
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002fd6a  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031e00  80031e00  00032200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000064c  80032000  80032000  00032400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8003264c  8003264c  00032a4c  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80032650  00032c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          000008f4  0000017c  800327c8  00032d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000018b0  00000a70  800330bc  00033670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007488  00002320  8003496c  00034f20  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  00034f20  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000ca8  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007af6  00000000  00000000  00035bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005ee81  00000000  00000000  0003d6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000096ce  00000000  00000000  0009c56f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011fbe  00000000  00000000  000a5c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008ac8  00000000  00000000  000b7bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000eefa  00000000  00000000  000c06c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000de82  00000000  00000000  000cf5be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00000668  00000000  00000000  000dd440  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	be 98       	st.b	pc[0x1],r8

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 2f 	mcall	r6[188]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 1e 	mcall	r6[120]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	20 6d       	sub	sp,24
800023fc:	49 e6       	lddpc	r6,80002474 <interpolate+0x80>
800023fe:	1e 26       	rsub	r6,pc
80002400:	ef 4c ff f8 	st.w	r7[-8],r12
80002404:	ef 4b ff f4 	st.w	r7[-12],r11
80002408:	ef 4a ff f0 	st.w	r7[-16],r10
8000240c:	ef 49 ff ec 	st.w	r7[-20],r9
80002410:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002414:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002420:	c0 41       	brne	80002428 <interpolate+0x34>
	{
		return y1;
80002422:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002426:	c2 38       	rjmp	8000246c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002428:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000242c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002430:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002434:	ee fa ff f8 	ld.w	r10,r7[-8]
80002438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000243c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002440:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002444:	ee fa ff f0 	ld.w	r10,r7[-16]
80002448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000244c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002450:	12 9b       	mov	r11,r9
80002452:	10 9c       	mov	r12,r8
80002454:	f0 16 00 08 	mcall	r6[32]
80002458:	18 98       	mov	r8,r12
8000245a:	10 99       	mov	r9,r8
8000245c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002460:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002464:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002468:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000246c:	10 9c       	mov	r12,r8
8000246e:	2f ad       	sub	sp,-24
80002470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	22 82       	sub	r2,40

80002478 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
80002478:	eb cd 40 c0 	pushm	r6-r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	48 96       	lddpc	r6,800024a0 <init_neighbors+0x28>
80002480:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002482:	f0 16 00 31 	mcall	r6[196]
80002486:	18 99       	mov	r9,r12
80002488:	ec f8 00 00 	ld.w	r8,r6[0]
8000248c:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000248e:	ec f8 00 00 	ld.w	r8,r6[0]
80002492:	70 09       	ld.w	r9,r8[0x0]
80002494:	30 08       	mov	r8,0
80002496:	f3 68 0f bc 	st.b	r9[4028],r8
}
8000249a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000249e:	00 00       	add	r0,r0
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	23 04       	sub	r4,48
800024a4:	54 68       	stdsp	sp[0x118],r8
800024a6:	65 72       	ld.w	r2,r2[0x5c]
800024a8:	65 20       	ld.w	r0,r2[0x48]
800024aa:	69 73       	ld.w	r3,r4[0x5c]
800024ac:	20 6d       	sub	sp,24
800024ae:	6f 72       	ld.w	r2,r7[0x5c]
800024b0:	65 20       	ld.w	r0,r2[0x48]
800024b2:	6e 65       	ld.w	r5,r7[0x18]
800024b4:	69 67       	ld.w	r7,r4[0x58]
800024b6:	68 62       	ld.w	r2,r4[0x18]
800024b8:	6f 72       	ld.w	r2,r7[0x5c]
800024ba:	73 20       	ld.w	r0,r9[0x48]
800024bc:	74 68       	ld.w	r8,r10[0x18]
800024be:	61 6e       	ld.w	lr,r0[0x58]
800024c0:	20 70       	sub	r0,7
800024c2:	6c 61       	ld.w	r1,r6[0x18]
800024c4:	6e 6e       	ld.w	lr,r7[0x18]
800024c6:	65 64       	ld.w	r4,r2[0x58]
800024c8:	21 0a       	sub	r10,16
	...

800024cc <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
800024cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800024d0:	1a 97       	mov	r7,sp
800024d2:	fa cd 00 a0 	sub	sp,sp,160
800024d6:	fe f6 03 66 	ld.w	r6,pc[870]
800024da:	1e 26       	rsub	r6,pc
800024dc:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
800024e0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024e4:	ee c9 00 20 	sub	r9,r7,32
800024e8:	12 9b       	mov	r11,r9
800024ea:	10 9c       	mov	r12,r8
800024ec:	c3 0f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
800024ee:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024f2:	11 d9       	ld.ub	r9,r8[0x5]
800024f4:	ec f8 00 6c 	ld.w	r8,r6[108]
800024f8:	11 88       	ld.ub	r8,r8[0x0]
800024fa:	f0 09 18 00 	cp.b	r9,r8
800024fe:	e0 80 01 9b 	breq	80002834 <read_msg_from_neighbors+0x368>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	10 9c       	mov	r12,r8
80002508:	f0 16 00 1a 	mcall	r6[104]
8000250c:	30 08       	mov	r8,0
8000250e:	e0 69 12 d0 	mov	r9,4816
80002512:	ea 19 41 63 	orh	r9,0x4163
80002516:	f0 16 00 0c 	mcall	r6[48]
8000251a:	14 98       	mov	r8,r10
8000251c:	16 99       	mov	r9,r11
8000251e:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
80002522:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002526:	10 9c       	mov	r12,r8
80002528:	f0 16 00 1a 	mcall	r6[104]
8000252c:	30 08       	mov	r8,0
8000252e:	e0 69 12 d0 	mov	r9,4816
80002532:	ea 19 41 63 	orh	r9,0x4163
80002536:	f0 16 00 0c 	mcall	r6[48]
8000253a:	14 98       	mov	r8,r10
8000253c:	16 99       	mov	r9,r11
8000253e:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
80002542:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002546:	10 9c       	mov	r12,r8
80002548:	f0 16 00 1a 	mcall	r6[104]
8000254c:	30 08       	mov	r8,0
8000254e:	e0 69 40 00 	mov	r9,16384
80002552:	ea 19 40 8f 	orh	r9,0x408f
80002556:	f0 16 00 0c 	mcall	r6[48]
8000255a:	14 98       	mov	r8,r10
8000255c:	16 99       	mov	r9,r11
8000255e:	10 9a       	mov	r10,r8
80002560:	12 9b       	mov	r11,r9
80002562:	f0 16 00 09 	mcall	r6[36]
80002566:	18 98       	mov	r8,r12
80002568:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
8000256c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002570:	5c 78       	castu.h	r8
80002572:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80002576:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
8000257a:	ec f8 00 00 	ld.w	r8,r6[0]
8000257e:	70 08       	ld.w	r8,r8[0x0]
80002580:	ee cc 00 a0 	sub	r12,r7,160
80002584:	20 7d       	sub	sp,28
80002586:	1a 99       	mov	r9,sp
80002588:	12 9a       	mov	r10,r9
8000258a:	f0 cb f3 94 	sub	r11,r8,-3180
8000258e:	f4 c8 00 00 	sub	r8,r10,0
80002592:	f6 c9 00 00 	sub	r9,r11,0
80002596:	72 0e       	ld.w	lr,r9[0x0]
80002598:	91 0e       	st.w	r8[0x0],lr
8000259a:	72 1e       	ld.w	lr,r9[0x4]
8000259c:	91 1e       	st.w	r8[0x4],lr
8000259e:	72 2e       	ld.w	lr,r9[0x8]
800025a0:	91 2e       	st.w	r8[0x8],lr
800025a2:	72 39       	ld.w	r9,r9[0xc]
800025a4:	91 39       	st.w	r8[0xc],r9
800025a6:	f6 e8 00 10 	ld.d	r8,r11[16]
800025aa:	f4 e9 00 10 	st.d	r10[16],r8
800025ae:	76 68       	ld.w	r8,r11[0x18]
800025b0:	95 68       	st.w	r10[0x18],r8
800025b2:	20 7d       	sub	sp,28
800025b4:	1a 98       	mov	r8,sp
800025b6:	10 9a       	mov	r10,r8
800025b8:	ee cb 00 3c 	sub	r11,r7,60
800025bc:	f4 c8 00 00 	sub	r8,r10,0
800025c0:	f6 c9 00 00 	sub	r9,r11,0
800025c4:	72 0e       	ld.w	lr,r9[0x0]
800025c6:	91 0e       	st.w	r8[0x0],lr
800025c8:	72 1e       	ld.w	lr,r9[0x4]
800025ca:	91 1e       	st.w	r8[0x4],lr
800025cc:	72 2e       	ld.w	lr,r9[0x8]
800025ce:	91 2e       	st.w	r8[0x8],lr
800025d0:	72 39       	ld.w	r9,r9[0xc]
800025d2:	91 39       	st.w	r8[0xc],r9
800025d4:	f6 e8 00 10 	ld.d	r8,r11[16]
800025d8:	f4 e9 00 10 	st.d	r10[16],r8
800025dc:	76 68       	ld.w	r8,r11[0x18]
800025de:	95 68       	st.w	r10[0x18],r8
800025e0:	f0 16 00 75 	mcall	r6[468]
800025e4:	2f 2d       	sub	sp,-56
800025e6:	ee cb 00 6c 	sub	r11,r7,108
800025ea:	ee ca 00 a0 	sub	r10,r7,160
800025ee:	f6 c8 00 00 	sub	r8,r11,0
800025f2:	f4 c9 00 00 	sub	r9,r10,0
800025f6:	72 0c       	ld.w	r12,r9[0x0]
800025f8:	91 0c       	st.w	r8[0x0],r12
800025fa:	72 1c       	ld.w	r12,r9[0x4]
800025fc:	91 1c       	st.w	r8[0x4],r12
800025fe:	72 2c       	ld.w	r12,r9[0x8]
80002600:	91 2c       	st.w	r8[0x8],r12
80002602:	72 39       	ld.w	r9,r9[0xc]
80002604:	91 39       	st.w	r8[0xc],r9
80002606:	f6 c8 ff f0 	sub	r8,r11,-16
8000260a:	f4 c9 ff f0 	sub	r9,r10,-16
8000260e:	72 0c       	ld.w	r12,r9[0x0]
80002610:	91 0c       	st.w	r8[0x0],r12
80002612:	72 1c       	ld.w	r12,r9[0x4]
80002614:	91 1c       	st.w	r8[0x4],r12
80002616:	72 2c       	ld.w	r12,r9[0x8]
80002618:	91 2c       	st.w	r8[0x8],r12
8000261a:	72 39       	ld.w	r9,r9[0xc]
8000261c:	91 39       	st.w	r8[0xc],r9
8000261e:	f6 c8 ff e0 	sub	r8,r11,-32
80002622:	f4 c9 ff e0 	sub	r9,r10,-32
80002626:	72 0a       	ld.w	r10,r9[0x0]
80002628:	91 0a       	st.w	r8[0x0],r10
8000262a:	72 1a       	ld.w	r10,r9[0x4]
8000262c:	91 1a       	st.w	r8[0x4],r10
8000262e:	72 2a       	ld.w	r10,r9[0x8]
80002630:	91 2a       	st.w	r8[0x8],r10
80002632:	72 39       	ld.w	r9,r9[0xc]
80002634:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
80002636:	30 08       	mov	r8,0
80002638:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
8000263c:	30 08       	mov	r8,0
8000263e:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002642:	c1 b8       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
80002644:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002648:	11 d9       	ld.ub	r9,r8[0x5]
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 0a       	ld.w	r10,r8[0x0]
80002650:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002654:	a5 78       	lsl	r8,0x5
80002656:	f4 08 00 08 	add	r8,r10,r8
8000265a:	f0 c8 f0 3c 	sub	r8,r8,-4036
8000265e:	11 88       	ld.ub	r8,r8[0x0]
80002660:	f0 09 18 00 	cp.b	r9,r8
80002664:	c0 51       	brne	8000266e <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
80002666:	30 18       	mov	r8,1
80002668:	ef 68 ff ff 	st.b	r7[-1],r8
8000266c:	c0 68       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
8000266e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002672:	2f f8       	sub	r8,-1
80002674:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002678:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000267c:	ec 18 00 01 	eorl	r8,0x1
80002680:	5c 58       	castu.b	r8
80002682:	c0 b0       	breq	80002698 <read_msg_from_neighbors+0x1cc>
80002684:	ec f8 00 00 	ld.w	r8,r6[0]
80002688:	70 08       	ld.w	r8,r8[0x0]
8000268a:	f1 38 0f bc 	ld.ub	r8,r8[4028]
8000268e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002692:	f0 09 18 00 	cp.b	r9,r8
80002696:	cd 73       	brcs	80002644 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002698:	ec f8 00 00 	ld.w	r8,r6[0]
8000269c:	70 08       	ld.w	r8,r8[0x0]
8000269e:	f1 38 0f bc 	ld.ub	r8,r8[4028]
800026a2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026a6:	f0 09 18 00 	cp.b	r9,r8
800026aa:	c2 93       	brcs	800026fc <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
800026ac:	ec f8 00 00 	ld.w	r8,r6[0]
800026b0:	70 08       	ld.w	r8,r8[0x0]
800026b2:	f1 39 0f bc 	ld.ub	r9,r8[4028]
800026b6:	30 e8       	mov	r8,14
800026b8:	f0 09 18 00 	cp.b	r9,r8
800026bc:	e0 8b 00 13 	brhi	800026e2 <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
800026c0:	ec f8 00 00 	ld.w	r8,r6[0]
800026c4:	70 08       	ld.w	r8,r8[0x0]
800026c6:	f1 38 0f bc 	ld.ub	r8,r8[4028]
800026ca:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
800026ce:	ec f8 00 00 	ld.w	r8,r6[0]
800026d2:	70 08       	ld.w	r8,r8[0x0]
800026d4:	f1 39 0f bc 	ld.ub	r9,r8[4028]
800026d8:	2f f9       	sub	r9,-1
800026da:	5c 59       	castu.b	r9
800026dc:	f1 69 0f bc 	st.b	r8[4028],r9
800026e0:	c1 28       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
800026e2:	fe cc 02 3e 	sub	r12,pc,574
800026e6:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
800026ea:	ec f8 00 00 	ld.w	r8,r6[0]
800026ee:	70 08       	ld.w	r8,r8[0x0]
800026f0:	f1 38 0f bc 	ld.ub	r8,r8[4028]
800026f4:	20 18       	sub	r8,1
800026f6:	ef 68 ff fe 	st.b	r7[-2],r8
800026fa:	c0 58       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
800026fc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002700:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002704:	ec f8 00 00 	ld.w	r8,r6[0]
80002708:	70 0a       	ld.w	r10,r8[0x0]
8000270a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000270e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002712:	11 d8       	ld.ub	r8,r8[0x5]
80002714:	a5 79       	lsl	r9,0x5
80002716:	f4 09 00 09 	add	r9,r10,r9
8000271a:	f2 c9 f0 3c 	sub	r9,r9,-4036
8000271e:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
80002720:	30 08       	mov	r8,0
80002722:	ef 68 ff fd 	st.b	r7[-3],r8
80002726:	c1 b8       	rjmp	8000275c <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
80002728:	ec f8 00 00 	ld.w	r8,r6[0]
8000272c:	70 09       	ld.w	r9,r8[0x0]
8000272e:	ef 3c ff fe 	ld.ub	r12,r7[-2]
80002732:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80002736:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000273a:	a3 68       	lsl	r8,0x2
8000273c:	ee 08 00 08 	add	r8,r7,r8
80002740:	f0 fa ff 94 	ld.w	r10,r8[-108]
80002744:	f8 08 15 03 	lsl	r8,r12,0x3
80002748:	16 08       	add	r8,r11
8000274a:	f0 c8 fc 0e 	sub	r8,r8,-1010
8000274e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
80002752:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002756:	2f f8       	sub	r8,-1
80002758:	ef 68 ff fd 	st.b	r7[-3],r8
8000275c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002760:	30 28       	mov	r8,2
80002762:	f0 09 18 00 	cp.b	r9,r8
80002766:	fe 98 ff e1 	brls	80002728 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
8000276a:	ec f8 00 00 	ld.w	r8,r6[0]
8000276e:	70 05       	ld.w	r5,r8[0x0]
80002770:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002774:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002778:	10 9c       	mov	r12,r8
8000277a:	f0 16 00 1a 	mcall	r6[104]
8000277e:	30 08       	mov	r8,0
80002780:	fc 19 40 59 	movh	r9,0x4059
80002784:	f0 16 00 0c 	mcall	r6[48]
80002788:	14 98       	mov	r8,r10
8000278a:	16 99       	mov	r9,r11
8000278c:	10 9a       	mov	r10,r8
8000278e:	12 9b       	mov	r11,r9
80002790:	f0 16 00 09 	mcall	r6[36]
80002794:	18 99       	mov	r9,r12
80002796:	e6 08 15 01 	lsl	r8,r3,0x1
8000279a:	2f f8       	sub	r8,-1
8000279c:	a5 68       	lsl	r8,0x4
8000279e:	ea 08 00 08 	add	r8,r5,r8
800027a2:	f0 c8 f0 3c 	sub	r8,r8,-4036
800027a6:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
800027a8:	ec f8 00 00 	ld.w	r8,r6[0]
800027ac:	70 05       	ld.w	r5,r8[0x0]
800027ae:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027b2:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800027b6:	10 9c       	mov	r12,r8
800027b8:	f0 16 00 1a 	mcall	r6[104]
800027bc:	30 08       	mov	r8,0
800027be:	fc 19 40 59 	movh	r9,0x4059
800027c2:	f0 16 00 0c 	mcall	r6[48]
800027c6:	14 98       	mov	r8,r10
800027c8:	16 99       	mov	r9,r11
800027ca:	10 9a       	mov	r10,r8
800027cc:	12 9b       	mov	r11,r9
800027ce:	f0 16 00 09 	mcall	r6[36]
800027d2:	18 99       	mov	r9,r12
800027d4:	e6 08 15 05 	lsl	r8,r3,0x5
800027d8:	ea 08 00 08 	add	r8,r5,r8
800027dc:	f0 c8 f0 28 	sub	r8,r8,-4056
800027e0:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
800027e2:	ec f8 00 00 	ld.w	r8,r6[0]
800027e6:	70 05       	ld.w	r5,r8[0x0]
800027e8:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027ec:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800027f0:	10 9c       	mov	r12,r8
800027f2:	f0 16 00 1a 	mcall	r6[104]
800027f6:	30 08       	mov	r8,0
800027f8:	fc 19 40 59 	movh	r9,0x4059
800027fc:	f0 16 00 0c 	mcall	r6[48]
80002800:	14 98       	mov	r8,r10
80002802:	16 99       	mov	r9,r11
80002804:	10 9a       	mov	r10,r8
80002806:	12 9b       	mov	r11,r9
80002808:	f0 16 00 09 	mcall	r6[36]
8000280c:	18 99       	mov	r9,r12
8000280e:	e6 08 15 05 	lsl	r8,r3,0x5
80002812:	ea 08 00 08 	add	r8,r5,r8
80002816:	f0 c8 f0 24 	sub	r8,r8,-4060
8000281a:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
8000281c:	ec f8 00 00 	ld.w	r8,r6[0]
80002820:	70 09       	ld.w	r9,r8[0x0]
80002822:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002826:	28 18       	sub	r8,-127
80002828:	a5 78       	lsl	r8,0x5
8000282a:	f2 08 00 08 	add	r8,r9,r8
8000282e:	fc 19 40 a0 	movh	r9,0x40a0
80002832:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
80002834:	2d 8d       	sub	sp,-160
80002836:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000283a:	00 00       	add	r0,r0
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	23 5e       	sub	lr,53

80002840 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
80002844:	1a 97       	mov	r7,sp
80002846:	20 3d       	sub	sp,12
80002848:	49 06       	lddpc	r6,80002888 <mav_array_memcpy+0x48>
8000284a:	1e 26       	rsub	r6,pc
8000284c:	ef 4c ff fc 	st.w	r7[-4],r12
80002850:	ef 4b ff f8 	st.w	r7[-8],r11
80002854:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	58 08       	cp.w	r8,0
8000285e:	c0 91       	brne	80002870 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80002860:	ee fa ff f4 	ld.w	r10,r7[-12]
80002864:	30 0b       	mov	r11,0
80002866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000286a:	f0 16 00 2f 	mcall	r6[188]
8000286e:	c0 98       	rjmp	80002880 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80002870:	ee fa ff f4 	ld.w	r10,r7[-12]
80002874:	ee fb ff f8 	ld.w	r11,r7[-8]
80002878:	ee fc ff fc 	ld.w	r12,r7[-4]
8000287c:	f0 16 00 1e 	mcall	r6[120]
	}
}
80002880:	2f dd       	sub	sp,-12
80002882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	26 ce       	sub	lr,108

8000288c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000288c:	eb cd 40 80 	pushm	r7,lr
80002890:	1a 97       	mov	r7,sp
80002892:	20 3d       	sub	sp,12
80002894:	ef 4c ff f8 	st.w	r7[-8],r12
80002898:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000289c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028a0:	70 09       	ld.w	r9,r8[0x0]
800028a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028a6:	70 08       	ld.w	r8,r8[0x0]
800028a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800028ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b0:	2f c8       	sub	r8,-4
800028b2:	70 0a       	ld.w	r10,r8[0x0]
800028b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b8:	2f c8       	sub	r8,-4
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800028c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c8:	2f 88       	sub	r8,-8
800028ca:	70 0a       	ld.w	r10,r8[0x0]
800028cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028d0:	2f 88       	sub	r8,-8
800028d2:	70 08       	ld.w	r8,r8[0x0]
800028d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800028dc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800028e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800028e4:	10 9c       	mov	r12,r8
800028e6:	2f dd       	sub	sp,-12
800028e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800028ec <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800028ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800028f0:	1a 97       	mov	r7,sp
800028f2:	20 7d       	sub	sp,28
800028f4:	4b d6       	lddpc	r6,800029e8 <quat_multi+0xfc>
800028f6:	1e 26       	rsub	r6,pc
800028f8:	ee c8 ff ec 	sub	r8,r7,-20
800028fc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800028fe:	70 2a       	ld.w	r10,r8[0x8]
80002900:	70 79       	ld.w	r9,r8[0x1c]
80002902:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002906:	70 3b       	ld.w	r11,r8[0xc]
80002908:	70 69       	ld.w	r9,r8[0x18]
8000290a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000290e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002912:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002916:	70 3a       	ld.w	r10,r8[0xc]
80002918:	70 59       	ld.w	r9,r8[0x14]
8000291a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000291e:	70 1b       	ld.w	r11,r8[0x4]
80002920:	70 79       	ld.w	r9,r8[0x1c]
80002922:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002926:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000292a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000292e:	70 1a       	ld.w	r10,r8[0x4]
80002930:	70 69       	ld.w	r9,r8[0x18]
80002932:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002936:	70 2b       	ld.w	r11,r8[0x8]
80002938:	70 59       	ld.w	r9,r8[0x14]
8000293a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000293e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002942:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80002946:	70 4a       	ld.w	r10,r8[0x10]
80002948:	70 19       	ld.w	r9,r8[0x4]
8000294a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000294e:	70 0b       	ld.w	r11,r8[0x0]
80002950:	70 59       	ld.w	r9,r8[0x14]
80002952:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002956:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000295a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000295e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002962:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80002966:	70 4a       	ld.w	r10,r8[0x10]
80002968:	70 29       	ld.w	r9,r8[0x8]
8000296a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000296e:	70 0b       	ld.w	r11,r8[0x0]
80002970:	70 69       	ld.w	r9,r8[0x18]
80002972:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002976:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000297a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002982:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002986:	70 4a       	ld.w	r10,r8[0x10]
80002988:	70 39       	ld.w	r9,r8[0xc]
8000298a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000298e:	70 0b       	ld.w	r11,r8[0x0]
80002990:	70 79       	ld.w	r9,r8[0x1c]
80002992:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002996:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000299a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000299e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800029a2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800029a6:	70 0a       	ld.w	r10,r8[0x0]
800029a8:	70 49       	ld.w	r9,r8[0x10]
800029aa:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800029ae:	f0 c9 ff f0 	sub	r9,r8,-16
800029b2:	2f c9       	sub	r9,-4
800029b4:	2f c8       	sub	r8,-4
800029b6:	12 9b       	mov	r11,r9
800029b8:	10 9c       	mov	r12,r8
800029ba:	c6 9f       	rcall	8000288c <scalar_product>
800029bc:	18 98       	mov	r8,r12
800029be:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800029c2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800029c6:	0a 98       	mov	r8,r5
800029c8:	ee c9 00 1c 	sub	r9,r7,28
800029cc:	20 08       	sub	r8,0
800029ce:	20 09       	sub	r9,0
800029d0:	72 0a       	ld.w	r10,r9[0x0]
800029d2:	91 0a       	st.w	r8[0x0],r10
800029d4:	72 1a       	ld.w	r10,r9[0x4]
800029d6:	91 1a       	st.w	r8[0x4],r10
800029d8:	72 2a       	ld.w	r10,r9[0x8]
800029da:	91 2a       	st.w	r8[0x8],r10
800029dc:	72 39       	ld.w	r9,r9[0xc]
800029de:	91 39       	st.w	r8[0xc],r9
}
800029e0:	0a 9c       	mov	r12,r5
800029e2:	2f 9d       	sub	sp,-28
800029e4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	27 7a       	sub	r10,119

800029ec <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800029ec:	eb cd 40 80 	pushm	r7,lr
800029f0:	1a 97       	mov	r7,sp
800029f2:	20 5d       	sub	sp,20
800029f4:	ee c9 ff f8 	sub	r9,r7,-8
800029f8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800029fa:	72 08       	ld.w	r8,r9[0x0]
800029fc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80002a00:	30 08       	mov	r8,0
80002a02:	ef 48 ff fc 	st.w	r7[-4],r8
80002a06:	c1 58       	rjmp	80002a30 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002a10:	2f fb       	sub	r11,-1
80002a12:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002a16:	ee 1b 80 00 	eorh	r11,0x8000
80002a1a:	2f f8       	sub	r8,-1
80002a1c:	a3 68       	lsl	r8,0x2
80002a1e:	ee 08 00 08 	add	r8,r7,r8
80002a22:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	2f f8       	sub	r8,-1
80002a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80002a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a34:	58 28       	cp.w	r8,2
80002a36:	fe 9a ff e9 	brle	80002a08 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80002a3a:	14 98       	mov	r8,r10
80002a3c:	ee c9 00 14 	sub	r9,r7,20
80002a40:	20 08       	sub	r8,0
80002a42:	20 09       	sub	r9,0
80002a44:	72 0b       	ld.w	r11,r9[0x0]
80002a46:	91 0b       	st.w	r8[0x0],r11
80002a48:	72 1b       	ld.w	r11,r9[0x4]
80002a4a:	91 1b       	st.w	r8[0x4],r11
80002a4c:	72 2b       	ld.w	r11,r9[0x8]
80002a4e:	91 2b       	st.w	r8[0x8],r11
80002a50:	72 39       	ld.w	r9,r9[0xc]
80002a52:	91 39       	st.w	r8[0xc],r9
}
80002a54:	14 9c       	mov	r12,r10
80002a56:	2f bd       	sub	sp,-20
80002a58:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a5c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80002a5c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80002a60:	1a 97       	mov	r7,sp
80002a62:	20 cd       	sub	sp,48
80002a64:	4b c6       	lddpc	r6,80002b54 <quat_global_to_local+0xf8>
80002a66:	1e 26       	rsub	r6,pc
80002a68:	ee c5 ff ec 	sub	r5,r7,-20
80002a6c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80002a6e:	ee ca 00 10 	sub	r10,r7,16
80002a72:	20 4d       	sub	sp,16
80002a74:	1a 98       	mov	r8,sp
80002a76:	0a 99       	mov	r9,r5
80002a78:	20 08       	sub	r8,0
80002a7a:	20 09       	sub	r9,0
80002a7c:	72 0b       	ld.w	r11,r9[0x0]
80002a7e:	91 0b       	st.w	r8[0x0],r11
80002a80:	72 1b       	ld.w	r11,r9[0x4]
80002a82:	91 1b       	st.w	r8[0x4],r11
80002a84:	72 2b       	ld.w	r11,r9[0x8]
80002a86:	91 2b       	st.w	r8[0x8],r11
80002a88:	72 39       	ld.w	r9,r9[0xc]
80002a8a:	91 39       	st.w	r8[0xc],r9
80002a8c:	14 9c       	mov	r12,r10
80002a8e:	ca ff       	rcall	800029ec <quat_inv>
80002a90:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a92:	ee ca 00 20 	sub	r10,r7,32
80002a96:	20 4d       	sub	sp,16
80002a98:	1a 98       	mov	r8,sp
80002a9a:	ea c9 ff f0 	sub	r9,r5,-16
80002a9e:	20 08       	sub	r8,0
80002aa0:	20 09       	sub	r9,0
80002aa2:	72 0b       	ld.w	r11,r9[0x0]
80002aa4:	91 0b       	st.w	r8[0x0],r11
80002aa6:	72 1b       	ld.w	r11,r9[0x4]
80002aa8:	91 1b       	st.w	r8[0x4],r11
80002aaa:	72 2b       	ld.w	r11,r9[0x8]
80002aac:	91 2b       	st.w	r8[0x8],r11
80002aae:	72 39       	ld.w	r9,r9[0xc]
80002ab0:	91 39       	st.w	r8[0xc],r9
80002ab2:	20 4d       	sub	sp,16
80002ab4:	1a 98       	mov	r8,sp
80002ab6:	ee c9 00 10 	sub	r9,r7,16
80002aba:	20 08       	sub	r8,0
80002abc:	20 09       	sub	r9,0
80002abe:	72 0b       	ld.w	r11,r9[0x0]
80002ac0:	91 0b       	st.w	r8[0x0],r11
80002ac2:	72 1b       	ld.w	r11,r9[0x4]
80002ac4:	91 1b       	st.w	r8[0x4],r11
80002ac6:	72 2b       	ld.w	r11,r9[0x8]
80002ac8:	91 2b       	st.w	r8[0x8],r11
80002aca:	72 39       	ld.w	r9,r9[0xc]
80002acc:	91 39       	st.w	r8[0xc],r9
80002ace:	14 9c       	mov	r12,r10
80002ad0:	c0 ef       	rcall	800028ec <quat_multi>
80002ad2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002ad4:	ee ca 00 30 	sub	r10,r7,48
80002ad8:	20 4d       	sub	sp,16
80002ada:	1a 98       	mov	r8,sp
80002adc:	0a 99       	mov	r9,r5
80002ade:	20 08       	sub	r8,0
80002ae0:	20 09       	sub	r9,0
80002ae2:	72 0b       	ld.w	r11,r9[0x0]
80002ae4:	91 0b       	st.w	r8[0x0],r11
80002ae6:	72 1b       	ld.w	r11,r9[0x4]
80002ae8:	91 1b       	st.w	r8[0x4],r11
80002aea:	72 2b       	ld.w	r11,r9[0x8]
80002aec:	91 2b       	st.w	r8[0x8],r11
80002aee:	72 39       	ld.w	r9,r9[0xc]
80002af0:	91 39       	st.w	r8[0xc],r9
80002af2:	20 4d       	sub	sp,16
80002af4:	1a 98       	mov	r8,sp
80002af6:	ee c9 00 20 	sub	r9,r7,32
80002afa:	20 08       	sub	r8,0
80002afc:	20 09       	sub	r9,0
80002afe:	72 0b       	ld.w	r11,r9[0x0]
80002b00:	91 0b       	st.w	r8[0x0],r11
80002b02:	72 1b       	ld.w	r11,r9[0x4]
80002b04:	91 1b       	st.w	r8[0x4],r11
80002b06:	72 2b       	ld.w	r11,r9[0x8]
80002b08:	91 2b       	st.w	r8[0x8],r11
80002b0a:	72 39       	ld.w	r9,r9[0xc]
80002b0c:	91 39       	st.w	r8[0xc],r9
80002b0e:	14 9c       	mov	r12,r10
80002b10:	ce ee       	rcall	800028ec <quat_multi>
80002b12:	2f 8d       	sub	sp,-32
80002b14:	ee c8 00 20 	sub	r8,r7,32
80002b18:	ee c9 00 30 	sub	r9,r7,48
80002b1c:	20 08       	sub	r8,0
80002b1e:	20 09       	sub	r9,0
80002b20:	72 0a       	ld.w	r10,r9[0x0]
80002b22:	91 0a       	st.w	r8[0x0],r10
80002b24:	72 1a       	ld.w	r10,r9[0x4]
80002b26:	91 1a       	st.w	r8[0x4],r10
80002b28:	72 2a       	ld.w	r10,r9[0x8]
80002b2a:	91 2a       	st.w	r8[0x8],r10
80002b2c:	72 39       	ld.w	r9,r9[0xc]
80002b2e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002b30:	06 98       	mov	r8,r3
80002b32:	ee c9 00 20 	sub	r9,r7,32
80002b36:	20 08       	sub	r8,0
80002b38:	20 09       	sub	r9,0
80002b3a:	72 0a       	ld.w	r10,r9[0x0]
80002b3c:	91 0a       	st.w	r8[0x0],r10
80002b3e:	72 1a       	ld.w	r10,r9[0x4]
80002b40:	91 1a       	st.w	r8[0x4],r10
80002b42:	72 2a       	ld.w	r10,r9[0x8]
80002b44:	91 2a       	st.w	r8[0x8],r10
80002b46:	72 39       	ld.w	r9,r9[0xc]
80002b48:	91 39       	st.w	r8[0xc],r9
}
80002b4a:	06 9c       	mov	r12,r3
80002b4c:	2f 4d       	sub	sp,-48
80002b4e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002b52:	00 00       	add	r0,r0
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	28 ea       	sub	r10,-114

80002b58 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002b58:	eb cd 40 c0 	pushm	r6-r7,lr
80002b5c:	1a 97       	mov	r7,sp
80002b5e:	20 2d       	sub	sp,8
80002b60:	4b 26       	lddpc	r6,80002c28 <fast_sqrt+0xd0>
80002b62:	1e 26       	rsub	r6,pc
80002b64:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002b68:	30 18       	mov	r8,1
80002b6a:	ee fa ff f8 	ld.w	r10,r7[-8]
80002b6e:	30 09       	mov	r9,0
80002b70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002b74:	e0 8c 00 03 	brvs	80002b7a <fast_sqrt+0x22>
80002b78:	c0 25       	brlt	80002b7c <fast_sqrt+0x24>
80002b7a:	30 08       	mov	r8,0
80002b7c:	5c 58       	castu.b	r8
80002b7e:	c0 30       	breq	80002b84 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002b80:	30 08       	mov	r8,0
80002b82:	c4 f8       	rjmp	80002c20 <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b84:	fc 18 3f 80 	movh	r8,0x3f80
80002b88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b8c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b90:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b94:	f0 16 00 08 	mcall	r6[32]
80002b98:	18 98       	mov	r8,r12
80002b9a:	10 99       	mov	r9,r8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002ba4:	fc 18 3f 00 	movh	r8,0x3f00
80002ba8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bb0:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bb8:	f0 16 00 08 	mcall	r6[32]
80002bbc:	18 98       	mov	r8,r12
80002bbe:	10 99       	mov	r9,r8
80002bc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bc8:	fc 18 3f 00 	movh	r8,0x3f00
80002bcc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bd0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bdc:	f0 16 00 08 	mcall	r6[32]
80002be0:	18 98       	mov	r8,r12
80002be2:	10 99       	mov	r9,r8
80002be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002be8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bec:	fc 18 3f 00 	movh	r8,0x3f00
80002bf0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bf4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bfc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c00:	f0 16 00 08 	mcall	r6[32]
80002c04:	18 98       	mov	r8,r12
80002c06:	10 99       	mov	r9,r8
80002c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c0c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002c10:	fc 18 3f 00 	movh	r8,0x3f00
80002c14:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002c18:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c20:	10 9c       	mov	r12,r8
80002c22:	2f ed       	sub	sp,-8
80002c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	29 e6       	sub	r6,-98

80002c2c <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 2d       	sub	sp,8
80002c34:	48 96       	lddpc	r6,80002c58 <vector_norm_sqr+0x2c>
80002c36:	1e 26       	rsub	r6,pc
80002c38:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002c3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c40:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c44:	c2 4e       	rcall	8000288c <scalar_product>
80002c46:	18 98       	mov	r8,r12
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c50:	10 9c       	mov	r12,r8
80002c52:	2f ed       	sub	sp,-8
80002c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2a ba       	sub	r10,-85

80002c5c <vector_norm>:

float static inline vector_norm(float u[])
{
80002c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c60:	1a 97       	mov	r7,sp
80002c62:	20 1d       	sub	sp,4
80002c64:	48 86       	lddpc	r6,80002c84 <vector_norm+0x28>
80002c66:	1e 26       	rsub	r6,pc
80002c68:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002c6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c70:	cd ef       	rcall	80002c2c <vector_norm_sqr>
80002c72:	18 98       	mov	r8,r12
80002c74:	10 9c       	mov	r12,r8
80002c76:	c7 1f       	rcall	80002b58 <fast_sqrt>
80002c78:	18 98       	mov	r8,r12
}
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	2f fd       	sub	sp,-4
80002c7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c82:	00 00       	add	r0,r0
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2a ea       	sub	r10,-82

80002c88 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c88:	eb cd 40 80 	pushm	r7,lr
80002c8c:	1a 97       	mov	r7,sp
80002c8e:	20 2d       	sub	sp,8
80002c90:	ef 4c ff fc 	st.w	r7[-4],r12
80002c94:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c98:	30 18       	mov	r8,1
80002c9a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ca6:	e0 8c 00 04 	brvs	80002cae <f_min+0x26>
80002caa:	e0 8a 00 03 	brle	80002cb0 <f_min+0x28>
80002cae:	30 08       	mov	r8,0
80002cb0:	5c 58       	castu.b	r8
80002cb2:	c0 40       	breq	80002cba <f_min+0x32>
	{
		return a;
80002cb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cb8:	c0 38       	rjmp	80002cbe <f_min+0x36>
	}else{
		return b;
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cbe:	10 9c       	mov	r12,r8
80002cc0:	2f ed       	sub	sp,-8
80002cc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cc6 <f_max>:

static inline float f_max(const float a, const float b){
80002cc6:	eb cd 40 80 	pushm	r7,lr
80002cca:	1a 97       	mov	r7,sp
80002ccc:	20 2d       	sub	sp,8
80002cce:	ef 4c ff fc 	st.w	r7[-4],r12
80002cd2:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002cd6:	30 18       	mov	r8,1
80002cd8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ce4:	e0 8c 00 03 	brvs	80002cea <f_max+0x24>
80002ce8:	c0 24       	brge	80002cec <f_max+0x26>
80002cea:	30 08       	mov	r8,0
80002cec:	5c 58       	castu.b	r8
80002cee:	c0 40       	breq	80002cf6 <f_max+0x30>
	{
		return a;
80002cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf4:	c0 38       	rjmp	80002cfa <f_max+0x34>
	}else{
		return b;
80002cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cfa:	10 9c       	mov	r12,r8
80002cfc:	2f ed       	sub	sp,-8
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d02 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80002d02:	eb cd 40 c0 	pushm	r6-r7,lr
80002d06:	1a 97       	mov	r7,sp
80002d08:	20 6d       	sub	sp,24
80002d0a:	49 f6       	lddpc	r6,80002d84 <interpolate+0x82>
80002d0c:	1e 26       	rsub	r6,pc
80002d0e:	ef 4c ff f8 	st.w	r7[-8],r12
80002d12:	ef 4b ff f4 	st.w	r7[-12],r11
80002d16:	ef 4a ff f0 	st.w	r7[-16],r10
80002d1a:	ef 49 ff ec 	st.w	r7[-20],r9
80002d1e:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002d22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002d2e:	c0 41       	brne	80002d36 <interpolate+0x34>
	{
		return y1;
80002d30:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d34:	c2 38       	rjmp	80002d7a <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002d36:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002d3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d3e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002d42:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d4a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002d52:	ee fa ff f0 	ld.w	r10,r7[-16]
80002d56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d5a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002d5e:	12 9b       	mov	r11,r9
80002d60:	10 9c       	mov	r12,r8
80002d62:	f0 16 00 08 	mcall	r6[32]
80002d66:	18 98       	mov	r8,r12
80002d68:	10 99       	mov	r9,r8
80002d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d6e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002d72:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80002d7a:	10 9c       	mov	r12,r8
80002d7c:	2f ad       	sub	sp,-24
80002d7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2b 90       	sub	r0,-71

80002d88 <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002d88:	eb cd 40 c0 	pushm	r6-r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	49 26       	lddpc	r6,80002dd4 <init_orca+0x4c>
80002d90:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002d92:	f0 16 00 31 	mcall	r6[196]
80002d96:	18 99       	mov	r9,r12
80002d98:	ec f8 00 00 	ld.w	r8,r6[0]
80002d9c:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	fc 19 40 a0 	movh	r9,0x40a0
80002da8:	f1 49 0f c0 	st.w	r8[4032],r9
		
	timeHorizon = 8.0;
80002dac:	ec f8 04 18 	ld.w	r8,r6[1048]
80002db0:	fc 19 41 00 	movh	r9,0x4100
80002db4:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002db6:	ec f8 04 18 	ld.w	r8,r6[1048]
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	10 9b       	mov	r11,r8
80002dbe:	fc 1c 3f 80 	movh	r12,0x3f80
80002dc2:	f0 16 00 08 	mcall	r6[32]
80002dc6:	18 98       	mov	r8,r12
80002dc8:	10 99       	mov	r9,r8
80002dca:	ec f8 02 a0 	ld.w	r8,r6[672]
80002dce:	91 09       	st.w	r8[0x0],r9
}
80002dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c 14       	sub	r4,-63
80002dd8:	43 6f       	lddsp	pc,sp[0xd8]
80002dda:	6c 6c       	ld.w	r12,r6[0x18]
80002ddc:	69 73       	ld.w	r3,r4[0x5c]
80002dde:	69 6f       	ld.w	pc,r4[0x58]
80002de0:	6e 21       	ld.w	r1,r7[0x8]
80002de2:	20 00       	sub	r0,0
80002de4:	44 69       	lddsp	r9,sp[0x118]
80002de6:	73 74       	ld.w	r4,r9[0x5c]
80002de8:	61 6e       	ld.w	lr,r0[0x58]
80002dea:	63 65       	ld.w	r5,r1[0x58]
80002dec:	20 77       	sub	r7,7
80002dee:	69 74       	ld.w	r4,r4[0x5c]
80002df0:	68 20       	ld.w	r0,r4[0x8]
80002df2:	6e 65       	ld.w	r5,r7[0x18]
80002df4:	69 67       	ld.w	r7,r4[0x58]
80002df6:	68 62       	ld.w	r2,r4[0x18]
80002df8:	6f 72       	ld.w	r2,r7[0x5c]
80002dfa:	20 00       	sub	r0,0
80002dfc:	28 78       	sub	r8,-121
80002dfe:	31 30       	mov	r0,19
80002e00:	30 29       	mov	r9,2
80002e02:	3a 00       	mov	r0,-96
80002e04:	0a 00       	add	r0,r5
80002e06:	00 00       	add	r0,r0
80002e08:	4f 72       	lddpc	r2,80002fe4 <computeNewVelocity+0x1b8>
80002e0a:	63 61       	ld.w	r1,r1[0x58]
80002e0c:	20 64       	sub	r4,6
80002e0e:	69 66       	ld.w	r6,r4[0x58]
80002e10:	66 76       	ld.w	r6,r3[0x1c]
80002e12:	65 6c       	ld.w	r12,r2[0x58]
80002e14:	3a 00       	mov	r0,-96
80002e16:	00 00       	add	r0,r0
80002e18:	2c 20       	sub	r0,-62
80002e1a:	4f 70       	lddpc	r0,80002ff4 <computeNewVelocity+0x1c8>
80002e1c:	74 69       	ld.w	r9,r10[0x18]
80002e1e:	6d 61       	ld.w	r1,r6[0x58]
80002e20:	6c 3a       	ld.w	r10,r6[0xc]
80002e22:	00 00       	add	r0,r0
80002e24:	2c 20       	sub	r0,-62
80002e26:	4e 65       	lddpc	r5,80002fbc <computeNewVelocity+0x190>
80002e28:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002e2c <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002e2c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002e30:	1a 97       	mov	r7,sp
80002e32:	fa cd 02 34 	sub	sp,sp,564
80002e36:	fe f6 09 ea 	ld.w	r6,pc[2538]
80002e3a:	1e 26       	rsub	r6,pc
80002e3c:	ef 4c fd e0 	st.w	r7[-544],r12
80002e40:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e44:	30 08       	mov	r8,0
80002e46:	ef 68 ff cf 	st.b	r7[-49],r8
80002e4a:	c1 68       	rjmp	80002e76 <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002e4c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e50:	a3 68       	lsl	r8,0x2
80002e52:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002e56:	f2 08 00 08 	add	r8,r9,r8
80002e5a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002e5e:	a3 69       	lsl	r9,0x2
80002e60:	ee fa fd e0 	ld.w	r10,r7[-544]
80002e64:	f4 09 00 09 	add	r9,r10,r9
80002e68:	72 09       	ld.w	r9,r9[0x0]
80002e6a:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e6c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e70:	2f f8       	sub	r8,-1
80002e72:	ef 68 ff cf 	st.b	r7[-49],r8
80002e76:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e7a:	30 28       	mov	r8,2
80002e7c:	f0 09 18 00 	cp.b	r9,r8
80002e80:	fe 9a ff e6 	brle	80002e4c <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002e84:	30 08       	mov	r8,0
80002e86:	ef 68 ff ce 	st.b	r7[-50],r8
80002e8a:	e0 8f 04 21 	bral	800036cc <computeNewVelocity+0x8a0>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e8e:	30 08       	mov	r8,0
80002e90:	ef 68 ff cf 	st.b	r7[-49],r8
80002e94:	c4 68       	rjmp	80002f20 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002e96:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e9a:	ec f9 00 00 	ld.w	r9,r6[0]
80002e9e:	72 09       	ld.w	r9,r9[0x0]
80002ea0:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002ea4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ea8:	a3 7b       	lsl	r11,0x3
80002eaa:	f6 0a 00 0a 	add	r10,r11,r10
80002eae:	f4 ca fc 0e 	sub	r10,r10,-1010
80002eb2:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eb6:	ec f9 00 00 	ld.w	r9,r6[0]
80002eba:	72 09       	ld.w	r9,r9[0x0]
80002ebc:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002ec0:	f6 cb fc e9 	sub	r11,r11,-791
80002ec4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002ec8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002ecc:	a3 68       	lsl	r8,0x2
80002ece:	ee 08 00 08 	add	r8,r7,r8
80002ed2:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002ed6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eda:	ec f9 00 00 	ld.w	r9,r6[0]
80002ede:	72 09       	ld.w	r9,r9[0x0]
80002ee0:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ee4:	f4 ca fc f3 	sub	r10,r10,-781
80002ee8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eec:	ec f9 00 00 	ld.w	r9,r6[0]
80002ef0:	72 09       	ld.w	r9,r9[0x0]
80002ef2:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002ef6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002efa:	a3 7c       	lsl	r12,0x3
80002efc:	f8 0b 00 0b 	add	r11,r12,r11
80002f00:	f6 cb fc 0b 	sub	r11,r11,-1013
80002f04:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002f08:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002f0c:	a3 68       	lsl	r8,0x2
80002f0e:	ee 08 00 08 	add	r8,r7,r8
80002f12:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002f16:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002f1a:	2f f8       	sub	r8,-1
80002f1c:	ef 68 ff cf 	st.b	r7[-49],r8
80002f20:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002f24:	30 28       	mov	r8,2
80002f26:	f0 09 18 00 	cp.b	r9,r8
80002f2a:	fe 9a ff b6 	brle	80002e96 <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002f2e:	30 08       	mov	r8,0
80002f30:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002f34:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002f38:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002f3c:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002f40:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002f44:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002f48:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80002f50:	70 0b       	ld.w	r11,r8[0x0]
80002f52:	ee ca 01 bc 	sub	r10,r7,444
80002f56:	20 4d       	sub	sp,16
80002f58:	1a 98       	mov	r8,sp
80002f5a:	ee c9 01 ac 	sub	r9,r7,428
80002f5e:	20 08       	sub	r8,0
80002f60:	20 09       	sub	r9,0
80002f62:	72 0c       	ld.w	r12,r9[0x0]
80002f64:	91 0c       	st.w	r8[0x0],r12
80002f66:	72 1c       	ld.w	r12,r9[0x4]
80002f68:	91 1c       	st.w	r8[0x4],r12
80002f6a:	72 2c       	ld.w	r12,r9[0x8]
80002f6c:	91 2c       	st.w	r8[0x8],r12
80002f6e:	72 39       	ld.w	r9,r9[0xc]
80002f70:	91 39       	st.w	r8[0xc],r9
80002f72:	20 4d       	sub	sp,16
80002f74:	1a 98       	mov	r8,sp
80002f76:	16 99       	mov	r9,r11
80002f78:	20 08       	sub	r8,0
80002f7a:	20 09       	sub	r9,0
80002f7c:	72 0b       	ld.w	r11,r9[0x0]
80002f7e:	91 0b       	st.w	r8[0x0],r11
80002f80:	72 1b       	ld.w	r11,r9[0x4]
80002f82:	91 1b       	st.w	r8[0x4],r11
80002f84:	72 2b       	ld.w	r11,r9[0x8]
80002f86:	91 2b       	st.w	r8[0x8],r11
80002f88:	72 39       	ld.w	r9,r9[0xc]
80002f8a:	91 39       	st.w	r8[0xc],r9
80002f8c:	14 9c       	mov	r12,r10
80002f8e:	fe b0 fd 67 	rcall	80002a5c <quat_global_to_local>
80002f92:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f94:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f98:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f9c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002fa0:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002fa4:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002fa8:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002fac:	30 08       	mov	r8,0
80002fae:	ef 68 ff cf 	st.b	r7[-49],r8
80002fb2:	c1 58       	rjmp	80002fdc <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002fb4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002fb8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002fbc:	a3 68       	lsl	r8,0x2
80002fbe:	ee 08 00 08 	add	r8,r7,r8
80002fc2:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002fc6:	f4 08 15 02 	lsl	r8,r10,0x2
80002fca:	ee 08 00 08 	add	r8,r7,r8
80002fce:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fd2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fd6:	2f f8       	sub	r8,-1
80002fd8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fdc:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	fe 9a ff e7 	brle	80002fb4 <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002fea:	30 08       	mov	r8,0
80002fec:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ff0:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002ff4:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ff8:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ffc:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80003000:	ee f8 fe 40 	ld.w	r8,r7[-448]
80003004:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80003008:	ec f8 00 00 	ld.w	r8,r6[0]
8000300c:	70 0b       	ld.w	r11,r8[0x0]
8000300e:	ee ca 02 34 	sub	r10,r7,564
80003012:	20 4d       	sub	sp,16
80003014:	1a 98       	mov	r8,sp
80003016:	ee c9 01 ac 	sub	r9,r7,428
8000301a:	20 08       	sub	r8,0
8000301c:	20 09       	sub	r9,0
8000301e:	72 0c       	ld.w	r12,r9[0x0]
80003020:	91 0c       	st.w	r8[0x0],r12
80003022:	72 1c       	ld.w	r12,r9[0x4]
80003024:	91 1c       	st.w	r8[0x4],r12
80003026:	72 2c       	ld.w	r12,r9[0x8]
80003028:	91 2c       	st.w	r8[0x8],r12
8000302a:	72 39       	ld.w	r9,r9[0xc]
8000302c:	91 39       	st.w	r8[0xc],r9
8000302e:	20 4d       	sub	sp,16
80003030:	1a 98       	mov	r8,sp
80003032:	16 99       	mov	r9,r11
80003034:	20 08       	sub	r8,0
80003036:	20 09       	sub	r9,0
80003038:	72 0b       	ld.w	r11,r9[0x0]
8000303a:	91 0b       	st.w	r8[0x0],r11
8000303c:	72 1b       	ld.w	r11,r9[0x4]
8000303e:	91 1b       	st.w	r8[0x4],r11
80003040:	72 2b       	ld.w	r11,r9[0x8]
80003042:	91 2b       	st.w	r8[0x8],r11
80003044:	72 39       	ld.w	r9,r9[0xc]
80003046:	91 39       	st.w	r8[0xc],r9
80003048:	14 9c       	mov	r12,r10
8000304a:	fe b0 fd 09 	rcall	80002a5c <quat_global_to_local>
8000304e:	2f 8d       	sub	sp,-32
80003050:	ee c8 01 bc 	sub	r8,r7,444
80003054:	ee c9 02 34 	sub	r9,r7,564
80003058:	20 08       	sub	r8,0
8000305a:	20 09       	sub	r9,0
8000305c:	72 0a       	ld.w	r10,r9[0x0]
8000305e:	91 0a       	st.w	r8[0x0],r10
80003060:	72 1a       	ld.w	r10,r9[0x4]
80003062:	91 1a       	st.w	r8[0x4],r10
80003064:	72 2a       	ld.w	r10,r9[0x8]
80003066:	91 2a       	st.w	r8[0x8],r10
80003068:	72 39       	ld.w	r9,r9[0xc]
8000306a:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
8000306c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80003070:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80003074:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80003078:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
8000307c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80003080:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80003084:	30 08       	mov	r8,0
80003086:	ef 68 ff cf 	st.b	r7[-49],r8
8000308a:	c1 58       	rjmp	800030b4 <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
8000308c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003090:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003094:	a3 68       	lsl	r8,0x2
80003096:	ee 08 00 08 	add	r8,r7,r8
8000309a:	f0 f9 fd fc 	ld.w	r9,r8[-516]
8000309e:	f4 08 15 02 	lsl	r8,r10,0x2
800030a2:	ee 08 00 08 	add	r8,r7,r8
800030a6:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
800030aa:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800030ae:	2f f8       	sub	r8,-1
800030b0:	ef 68 ff cf 	st.b	r7[-49],r8
800030b4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800030b8:	30 28       	mov	r8,2
800030ba:	f0 09 18 00 	cp.b	r9,r8
800030be:	fe 9a ff e7 	brle	8000308c <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
800030c2:	ee c8 01 c8 	sub	r8,r7,456
800030c6:	10 9c       	mov	r12,r8
800030c8:	fe b0 fd b2 	rcall	80002c2c <vector_norm_sqr>
800030cc:	18 98       	mov	r8,r12
800030ce:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
800030d2:	ec f8 00 00 	ld.w	r8,r6[0]
800030d6:	70 08       	ld.w	r8,r8[0x0]
800030d8:	f0 f9 0f c0 	ld.w	r9,r8[4032]
800030dc:	ec f8 00 00 	ld.w	r8,r6[0]
800030e0:	70 0a       	ld.w	r10,r8[0x0]
800030e2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800030e6:	28 18       	sub	r8,-127
800030e8:	a5 78       	lsl	r8,0x5
800030ea:	f4 08 00 08 	add	r8,r10,r8
800030ee:	70 08       	ld.w	r8,r8[0x0]
800030f0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800030f4:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
800030f8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800030fc:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003100:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003104:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
80003108:	30 18       	mov	r8,1
8000310a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000310e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003112:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003116:	e0 8c 00 04 	brvs	8000311e <computeNewVelocity+0x2f2>
8000311a:	e0 89 00 03 	brgt	80003120 <computeNewVelocity+0x2f4>
8000311e:	30 08       	mov	r8,0
80003120:	5c 58       	castu.b	r8
80003122:	e0 80 01 c7 	breq	800034b0 <computeNewVelocity+0x684>
		{
			for (i=0;i<3;i++)
80003126:	30 08       	mov	r8,0
80003128:	ef 68 ff cf 	st.b	r7[-49],r8
8000312c:	c2 38       	rjmp	80003172 <computeNewVelocity+0x346>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
8000312e:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003132:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003136:	a3 68       	lsl	r8,0x2
80003138:	ee 08 00 08 	add	r8,r7,r8
8000313c:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003140:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003144:	a3 68       	lsl	r8,0x2
80003146:	ee 08 00 08 	add	r8,r7,r8
8000314a:	f0 fb fe 38 	ld.w	r11,r8[-456]
8000314e:	ec f8 02 a0 	ld.w	r8,r6[672]
80003152:	70 08       	ld.w	r8,r8[0x0]
80003154:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003158:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000315c:	f4 08 15 02 	lsl	r8,r10,0x2
80003160:	ee 08 00 08 	add	r8,r7,r8
80003164:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
80003168:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000316c:	2f f8       	sub	r8,-1
8000316e:	ef 68 ff cf 	st.b	r7[-49],r8
80003172:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003176:	30 28       	mov	r8,2
80003178:	f0 09 18 00 	cp.b	r9,r8
8000317c:	fe 9a ff d9 	brle	8000312e <computeNewVelocity+0x302>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
80003180:	ee c8 01 e0 	sub	r8,r7,480
80003184:	10 9c       	mov	r12,r8
80003186:	fe b0 fd 53 	rcall	80002c2c <vector_norm_sqr>
8000318a:	18 98       	mov	r8,r12
8000318c:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
80003190:	ee c9 01 c8 	sub	r9,r7,456
80003194:	ee c8 01 e0 	sub	r8,r7,480
80003198:	12 9b       	mov	r11,r9
8000319a:	10 9c       	mov	r12,r8
8000319c:	fe b0 fb 78 	rcall	8000288c <scalar_product>
800031a0:	18 98       	mov	r8,r12
800031a2:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a6:	30 18       	mov	r8,1
800031a8:	ee fa ff dc 	ld.w	r10,r7[-36]
800031ac:	30 09       	mov	r9,0
800031ae:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031b2:	e0 8c 00 03 	brvs	800031b8 <computeNewVelocity+0x38c>
800031b6:	c0 25       	brlt	800031ba <computeNewVelocity+0x38e>
800031b8:	30 08       	mov	r8,0
800031ba:	5c 58       	castu.b	r8
800031bc:	c7 70       	breq	800032aa <computeNewVelocity+0x47e>
800031be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800031c2:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031c6:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800031ca:	ee f9 ff d8 	ld.w	r9,r7[-40]
800031ce:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031d6:	30 18       	mov	r8,1
800031d8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031dc:	e0 8c 00 04 	brvs	800031e4 <computeNewVelocity+0x3b8>
800031e0:	e0 89 00 03 	brgt	800031e6 <computeNewVelocity+0x3ba>
800031e4:	30 08       	mov	r8,0
800031e6:	5c 58       	castu.b	r8
800031e8:	c6 10       	breq	800032aa <computeNewVelocity+0x47e>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800031ea:	ee fc ff e4 	ld.w	r12,r7[-28]
800031ee:	fe b0 fc b5 	rcall	80002b58 <fast_sqrt>
800031f2:	18 98       	mov	r8,r12
800031f4:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800031f8:	30 08       	mov	r8,0
800031fa:	ef 68 ff cf 	st.b	r7[-49],r8
800031fe:	c4 d8       	rjmp	80003298 <computeNewVelocity+0x46c>
				{
					unitW[i] = w[i] / wLength;
80003200:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003204:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003208:	a3 68       	lsl	r8,0x2
8000320a:	ee 08 00 08 	add	r8,r7,r8
8000320e:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003212:	ee fb ff e0 	ld.w	r11,r7[-32]
80003216:	10 9c       	mov	r12,r8
80003218:	f0 16 00 08 	mcall	r6[32]
8000321c:	18 98       	mov	r8,r12
8000321e:	10 99       	mov	r9,r8
80003220:	ea 08 15 02 	lsl	r8,r5,0x2
80003224:	ee 08 00 08 	add	r8,r7,r8
80003228:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
8000322c:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003230:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003234:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003238:	a3 68       	lsl	r8,0x2
8000323a:	ee 08 00 08 	add	r8,r7,r8
8000323e:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003242:	12 98       	mov	r8,r9
80003244:	a1 78       	lsl	r8,0x1
80003246:	12 08       	add	r8,r9
80003248:	a1 78       	lsl	r8,0x1
8000324a:	16 08       	add	r8,r11
8000324c:	a3 68       	lsl	r8,0x2
8000324e:	ee 08 00 08 	add	r8,r7,r8
80003252:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003256:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000325a:	ec f8 02 a0 	ld.w	r8,r6[672]
8000325e:	70 09       	ld.w	r9,r8[0x0]
80003260:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003264:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003268:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000326c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003270:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003274:	a3 68       	lsl	r8,0x2
80003276:	ee 08 00 08 	add	r8,r7,r8
8000327a:	f0 f8 fe 14 	ld.w	r8,r8[-492]
8000327e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003282:	f4 08 15 02 	lsl	r8,r10,0x2
80003286:	ee 08 00 08 	add	r8,r7,r8
8000328a:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
8000328e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003292:	2f f8       	sub	r8,-1
80003294:	ef 68 ff cf 	st.b	r7[-49],r8
80003298:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000329c:	30 28       	mov	r8,2
8000329e:	f0 09 18 00 	cp.b	r9,r8
800032a2:	fe 9a ff af 	brle	80003200 <computeNewVelocity+0x3d4>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800032a6:	e0 8f 01 c5 	bral	80003630 <computeNewVelocity+0x804>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800032aa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800032ae:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800032b2:	ee c9 01 d4 	sub	r9,r7,468
800032b6:	ee c8 01 c8 	sub	r8,r7,456
800032ba:	12 9b       	mov	r11,r9
800032bc:	10 9c       	mov	r12,r8
800032be:	fe b0 fa e7 	rcall	8000288c <scalar_product>
800032c2:	18 98       	mov	r8,r12
800032c4:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800032c8:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800032cc:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032d0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032d4:	ee fa fe 40 	ld.w	r10,r7[-448]
800032d8:	ee f8 fe 30 	ld.w	r8,r7[-464]
800032dc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800032e0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800032e4:	ef 48 fd e4 	st.w	r7[-540],r8
800032e8:	ee f9 fe 40 	ld.w	r9,r7[-448]
800032ec:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800032f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032f4:	ee fa fe 38 	ld.w	r10,r7[-456]
800032f8:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003300:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003304:	ef 48 fd e8 	st.w	r7[-536],r8
80003308:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000330c:	ee f8 fe 30 	ld.w	r8,r7[-464]
80003310:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003314:	ee fa fe 3c 	ld.w	r10,r7[-452]
80003318:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000331c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003320:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003324:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
80003328:	ee c8 01 d4 	sub	r8,r7,468
8000332c:	10 9c       	mov	r12,r8
8000332e:	fe b0 fc 7f 	rcall	80002c2c <vector_norm_sqr>
80003332:	18 95       	mov	r5,r12
80003334:	ee c8 02 1c 	sub	r8,r7,540
80003338:	10 9c       	mov	r12,r8
8000333a:	fe b0 fc 79 	rcall	80002c2c <vector_norm_sqr>
8000333e:	18 98       	mov	r8,r12
80003340:	ee fa ff d4 	ld.w	r10,r7[-44]
80003344:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003348:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000334c:	12 9b       	mov	r11,r9
8000334e:	10 9c       	mov	r12,r8
80003350:	f0 16 00 08 	mcall	r6[32]
80003354:	18 98       	mov	r8,r12
80003356:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
8000335a:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
8000335e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003362:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003366:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336a:	ee fa ff ec 	ld.w	r10,r7[-20]
8000336e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003372:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003376:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000337a:	10 9c       	mov	r12,r8
8000337c:	fe b0 fb ee 	rcall	80002b58 <fast_sqrt>
80003380:	18 99       	mov	r9,r12
80003382:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003386:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000338a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000338e:	10 9c       	mov	r12,r8
80003390:	f0 16 00 08 	mcall	r6[32]
80003394:	18 98       	mov	r8,r12
80003396:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
8000339a:	30 08       	mov	r8,0
8000339c:	ef 68 ff cf 	st.b	r7[-49],r8
800033a0:	c2 28       	rjmp	800033e4 <computeNewVelocity+0x5b8>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
800033a2:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800033a6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033aa:	a3 68       	lsl	r8,0x2
800033ac:	ee 08 00 08 	add	r8,r7,r8
800033b0:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800033b4:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033b8:	a3 68       	lsl	r8,0x2
800033ba:	ee 08 00 08 	add	r8,r7,r8
800033be:	f0 fb fe 38 	ld.w	r11,r8[-456]
800033c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800033ca:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800033ce:	f4 08 15 02 	lsl	r8,r10,0x2
800033d2:	ee 08 00 08 	add	r8,r7,r8
800033d6:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800033da:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800033de:	2f f8       	sub	r8,-1
800033e0:	ef 68 ff cf 	st.b	r7[-49],r8
800033e4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800033e8:	30 28       	mov	r8,2
800033ea:	f0 09 18 00 	cp.b	r9,r8
800033ee:	fe 9a ff da 	brle	800033a2 <computeNewVelocity+0x576>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800033f2:	ee c8 01 e0 	sub	r8,r7,480
800033f6:	10 9c       	mov	r12,r8
800033f8:	fe b0 fc 32 	rcall	80002c5c <vector_norm>
800033fc:	18 98       	mov	r8,r12
800033fe:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80003402:	30 08       	mov	r8,0
80003404:	ef 68 ff cf 	st.b	r7[-49],r8
80003408:	c4 c8       	rjmp	800034a0 <computeNewVelocity+0x674>
				{
					unitW[i] = w[i] / wLength;
8000340a:	ef 25 ff cf 	ld.sb	r5,r7[-49]
8000340e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003412:	a3 68       	lsl	r8,0x2
80003414:	ee 08 00 08 	add	r8,r7,r8
80003418:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000341c:	ee fb ff e0 	ld.w	r11,r7[-32]
80003420:	10 9c       	mov	r12,r8
80003422:	f0 16 00 08 	mcall	r6[32]
80003426:	18 98       	mov	r8,r12
80003428:	10 99       	mov	r9,r8
8000342a:	ea 08 15 02 	lsl	r8,r5,0x2
8000342e:	ee 08 00 08 	add	r8,r7,r8
80003432:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003436:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000343a:	ef 2b ff cf 	ld.sb	r11,r7[-49]
8000343e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003442:	a3 68       	lsl	r8,0x2
80003444:	ee 08 00 08 	add	r8,r7,r8
80003448:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000344c:	12 98       	mov	r8,r9
8000344e:	a1 78       	lsl	r8,0x1
80003450:	12 08       	add	r8,r9
80003452:	a1 78       	lsl	r8,0x1
80003454:	16 08       	add	r8,r11
80003456:	a3 68       	lsl	r8,0x2
80003458:	ee 08 00 08 	add	r8,r7,r8
8000345c:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
80003460:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003464:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003470:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003474:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003478:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000347c:	a3 68       	lsl	r8,0x2
8000347e:	ee 08 00 08 	add	r8,r7,r8
80003482:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003486:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000348a:	f4 08 15 02 	lsl	r8,r10,0x2
8000348e:	ee 08 00 08 	add	r8,r7,r8
80003492:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003496:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000349a:	2f f8       	sub	r8,-1
8000349c:	ef 68 ff cf 	st.b	r7[-49],r8
800034a0:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800034a4:	30 28       	mov	r8,2
800034a6:	f0 09 18 00 	cp.b	r9,r8
800034aa:	fe 9a ff b0 	brle	8000340a <computeNewVelocity+0x5de>
800034ae:	cc 18       	rjmp	80003630 <computeNewVelocity+0x804>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800034b0:	fe cc 06 d8 	sub	r12,pc,1752
800034b4:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800034b8:	fe cc 06 d4 	sub	r12,pc,1748
800034bc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800034c0:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800034c4:	30 ab       	mov	r11,10
800034c6:	10 9c       	mov	r12,r8
800034c8:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800034cc:	fe cc 06 d0 	sub	r12,pc,1744
800034d0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800034d4:	ee fc ff d4 	ld.w	r12,r7[-44]
800034d8:	f0 16 00 03 	mcall	r6[12]
800034dc:	14 98       	mov	r8,r10
800034de:	16 99       	mov	r9,r11
800034e0:	10 9a       	mov	r10,r8
800034e2:	12 9b       	mov	r11,r9
800034e4:	f0 16 00 66 	mcall	r6[408]
800034e8:	30 08       	mov	r8,0
800034ea:	fc 19 40 59 	movh	r9,0x4059
800034ee:	f0 16 00 02 	mcall	r6[8]
800034f2:	14 98       	mov	r8,r10
800034f4:	16 99       	mov	r9,r11
800034f6:	10 9a       	mov	r10,r8
800034f8:	12 9b       	mov	r11,r9
800034fa:	f0 16 00 14 	mcall	r6[80]
800034fe:	18 98       	mov	r8,r12
80003500:	30 ab       	mov	r11,10
80003502:	10 9c       	mov	r12,r8
80003504:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80003508:	fe cc 07 04 	sub	r12,pc,1796
8000350c:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
80003510:	e0 68 cc cd 	mov	r8,52429
80003514:	ea 18 3d cc 	orh	r8,0x3dcc
80003518:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
8000351c:	30 08       	mov	r8,0
8000351e:	ef 68 ff cf 	st.b	r7[-49],r8
80003522:	c2 28       	rjmp	80003566 <computeNewVelocity+0x73a>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
80003524:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003528:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000352c:	a3 68       	lsl	r8,0x2
8000352e:	ee 08 00 08 	add	r8,r7,r8
80003532:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003536:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000353a:	a3 68       	lsl	r8,0x2
8000353c:	ee 08 00 08 	add	r8,r7,r8
80003540:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003544:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003548:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000354c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003550:	f4 08 15 02 	lsl	r8,r10,0x2
80003554:	ee 08 00 08 	add	r8,r7,r8
80003558:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
8000355c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003560:	2f f8       	sub	r8,-1
80003562:	ef 68 ff cf 	st.b	r7[-49],r8
80003566:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000356a:	30 28       	mov	r8,2
8000356c:	f0 09 18 00 	cp.b	r9,r8
80003570:	fe 9a ff da 	brle	80003524 <computeNewVelocity+0x6f8>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
80003574:	ee c8 01 e0 	sub	r8,r7,480
80003578:	10 9c       	mov	r12,r8
8000357a:	fe b0 fb 71 	rcall	80002c5c <vector_norm>
8000357e:	18 98       	mov	r8,r12
80003580:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
80003584:	30 08       	mov	r8,0
80003586:	ef 68 ff cf 	st.b	r7[-49],r8
8000358a:	c4 c8       	rjmp	80003622 <computeNewVelocity+0x7f6>
			{
				unitW[i] = w[i] / wLength;
8000358c:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003590:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003594:	a3 68       	lsl	r8,0x2
80003596:	ee 08 00 08 	add	r8,r7,r8
8000359a:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000359e:	ee fb ff e0 	ld.w	r11,r7[-32]
800035a2:	10 9c       	mov	r12,r8
800035a4:	f0 16 00 08 	mcall	r6[32]
800035a8:	18 98       	mov	r8,r12
800035aa:	10 99       	mov	r9,r8
800035ac:	ea 08 15 02 	lsl	r8,r5,0x2
800035b0:	ee 08 00 08 	add	r8,r7,r8
800035b4:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800035b8:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035bc:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800035c0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800035c4:	a3 68       	lsl	r8,0x2
800035c6:	ee 08 00 08 	add	r8,r7,r8
800035ca:	f0 fa fe 14 	ld.w	r10,r8[-492]
800035ce:	12 98       	mov	r8,r9
800035d0:	a1 78       	lsl	r8,0x1
800035d2:	12 08       	add	r8,r9
800035d4:	a1 78       	lsl	r8,0x1
800035d6:	16 08       	add	r8,r11
800035d8:	a3 68       	lsl	r8,0x2
800035da:	ee 08 00 08 	add	r8,r7,r8
800035de:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800035e2:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800035e6:	ee f9 ff d0 	ld.w	r9,r7[-48]
800035ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035ee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800035f2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800035f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800035fa:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800035fe:	a3 68       	lsl	r8,0x2
80003600:	ee 08 00 08 	add	r8,r7,r8
80003604:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003608:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000360c:	f4 08 15 02 	lsl	r8,r10,0x2
80003610:	ee 08 00 08 	add	r8,r7,r8
80003614:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
80003618:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000361c:	2f f8       	sub	r8,-1
8000361e:	ef 68 ff cf 	st.b	r7[-49],r8
80003622:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003626:	30 28       	mov	r8,2
80003628:	f0 09 18 00 	cp.b	r9,r8
8000362c:	fe 9a ff b0 	brle	8000358c <computeNewVelocity+0x760>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
80003630:	30 08       	mov	r8,0
80003632:	ef 68 ff cf 	st.b	r7[-49],r8
80003636:	c3 f8       	rjmp	800036b4 <computeNewVelocity+0x888>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
80003638:	ef 25 ff ce 	ld.sb	r5,r7[-50]
8000363c:	ef 21 ff cf 	ld.sb	r1,r7[-49]
80003640:	ec f8 00 00 	ld.w	r8,r6[0]
80003644:	70 08       	ld.w	r8,r8[0x0]
80003646:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000364a:	f2 c9 fc f6 	sub	r9,r9,-778
8000364e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003652:	10 9c       	mov	r12,r8
80003654:	f0 16 00 03 	mcall	r6[12]
80003658:	14 92       	mov	r2,r10
8000365a:	16 93       	mov	r3,r11
8000365c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003660:	a3 68       	lsl	r8,0x2
80003662:	ee 08 00 08 	add	r8,r7,r8
80003666:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8000366a:	10 9c       	mov	r12,r8
8000366c:	f0 16 00 03 	mcall	r6[12]
80003670:	30 08       	mov	r8,0
80003672:	fc 19 3f e0 	movh	r9,0x3fe0
80003676:	f0 16 00 02 	mcall	r6[8]
8000367a:	14 98       	mov	r8,r10
8000367c:	16 99       	mov	r9,r11
8000367e:	04 9a       	mov	r10,r2
80003680:	06 9b       	mov	r11,r3
80003682:	f0 16 00 05 	mcall	r6[20]
80003686:	14 98       	mov	r8,r10
80003688:	16 99       	mov	r9,r11
8000368a:	10 9a       	mov	r10,r8
8000368c:	12 9b       	mov	r11,r9
8000368e:	f0 16 00 09 	mcall	r6[36]
80003692:	18 99       	mov	r9,r12
80003694:	0a 98       	mov	r8,r5
80003696:	a1 78       	lsl	r8,0x1
80003698:	0a 08       	add	r8,r5
8000369a:	a1 78       	lsl	r8,0x1
8000369c:	02 08       	add	r8,r1
8000369e:	2f d8       	sub	r8,-3
800036a0:	a3 68       	lsl	r8,0x2
800036a2:	ee 08 00 08 	add	r8,r7,r8
800036a6:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800036aa:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036ae:	2f f8       	sub	r8,-1
800036b0:	ef 68 ff cf 	st.b	r7[-49],r8
800036b4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036b8:	30 28       	mov	r8,2
800036ba:	f0 09 18 00 	cp.b	r9,r8
800036be:	fe 9a ff bd 	brle	80003638 <computeNewVelocity+0x80c>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800036c2:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800036c6:	2f f8       	sub	r8,-1
800036c8:	ef 68 ff ce 	st.b	r7[-50],r8
800036cc:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800036d0:	ec f8 00 00 	ld.w	r8,r6[0]
800036d4:	70 08       	ld.w	r8,r8[0x0]
800036d6:	f1 38 0f bc 	ld.ub	r8,r8[4028]
800036da:	10 39       	cp.w	r9,r8
800036dc:	fe 95 fb d9 	brlt	80002e8e <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800036e0:	ee cc 01 9c 	sub	r12,r7,412
800036e4:	30 08       	mov	r8,0
800036e6:	ee f9 fd dc 	ld.w	r9,r7[-548]
800036ea:	fc 1a 40 90 	movh	r10,0x4090
800036ee:	ee fb fd e0 	ld.w	r11,r7[-544]
800036f2:	f0 16 01 08 	mcall	r6[1056]
800036f6:	18 98       	mov	r8,r12
800036f8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800036fc:	ec f8 00 00 	ld.w	r8,r6[0]
80003700:	70 08       	ld.w	r8,r8[0x0]
80003702:	f1 38 0f bc 	ld.ub	r8,r8[4028]
80003706:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
8000370a:	30 18       	mov	r8,1
8000370c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003710:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003714:	e0 8c 00 04 	brvs	8000371c <computeNewVelocity+0x8f0>
80003718:	e0 89 00 03 	brgt	8000371e <computeNewVelocity+0x8f2>
8000371c:	30 08       	mov	r8,0
8000371e:	5c 58       	castu.b	r8
80003720:	c1 10       	breq	80003742 <computeNewVelocity+0x916>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
80003722:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003726:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000372a:	5c 58       	castu.b	r8
8000372c:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
80003730:	ee c8 01 9c 	sub	r8,r7,412
80003734:	ee f9 fd dc 	ld.w	r9,r7[-548]
80003738:	fc 1a 40 90 	movh	r10,0x4090
8000373c:	10 9c       	mov	r12,r8
8000373e:	f0 16 02 0a 	mcall	r6[2088]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
80003742:	ec f8 02 20 	ld.w	r8,r6[544]
80003746:	11 89       	ld.ub	r9,r8[0x0]
80003748:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
8000374c:	e0 6a 85 1f 	mov	r10,34079
80003750:	ea 1a 51 eb 	orh	r10,0x51eb
80003754:	f0 0a 04 4a 	muls.d	r10,r8,r10
80003758:	a5 5b       	asr	r11,0x5
8000375a:	f0 0a 14 1f 	asr	r10,r8,0x1f
8000375e:	f6 0a 01 0a 	sub	r10,r11,r10
80003762:	f4 0a 10 64 	mul	r10,r10,100
80003766:	14 18       	sub	r8,r10
80003768:	5c 58       	castu.b	r8
8000376a:	ec fa 02 20 	ld.w	r10,r6[544]
8000376e:	b4 88       	st.b	r10[0x0],r8
80003770:	f2 c8 ff ff 	sub	r8,r9,-1
80003774:	5c 58       	castu.b	r8
80003776:	ec f9 02 20 	ld.w	r9,r6[544]
8000377a:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
8000377c:	30 08       	mov	r8,0
8000377e:	ef 68 ff cf 	st.b	r7[-49],r8
80003782:	c1 f8       	rjmp	800037c0 <computeNewVelocity+0x994>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
80003784:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003788:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000378c:	a3 69       	lsl	r9,0x2
8000378e:	ee fa fd e0 	ld.w	r10,r7[-544]
80003792:	f4 09 00 09 	add	r9,r10,r9
80003796:	72 0a       	ld.w	r10,r9[0x0]
80003798:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000379c:	a3 69       	lsl	r9,0x2
8000379e:	ee fb fd dc 	ld.w	r11,r7[-548]
800037a2:	f6 09 00 09 	add	r9,r11,r9
800037a6:	72 09       	ld.w	r9,r9[0x0]
800037a8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800037ac:	a3 68       	lsl	r8,0x2
800037ae:	ee 08 00 08 	add	r8,r7,r8
800037b2:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800037b6:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800037ba:	2f f8       	sub	r8,-1
800037bc:	ef 68 ff cf 	st.b	r7[-49],r8
800037c0:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037c4:	30 28       	mov	r8,2
800037c6:	f0 09 18 00 	cp.b	r9,r8
800037ca:	fe 9a ff dd 	brle	80003784 <computeNewVelocity+0x958>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800037ce:	ec f8 02 20 	ld.w	r8,r6[544]
800037d2:	11 88       	ld.ub	r8,r8[0x0]
800037d4:	58 08       	cp.w	r8,0
800037d6:	c2 11       	brne	80003818 <computeNewVelocity+0x9ec>
	{
		dbg_print("Orca diffvel:");
800037d8:	fe cc 09 d0 	sub	r12,pc,2512
800037dc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800037e0:	ee c8 02 10 	sub	r8,r7,528
800037e4:	30 2b       	mov	r11,2
800037e6:	10 9c       	mov	r12,r8
800037e8:	f0 16 00 c7 	mcall	r6[796]
		dbg_print(", Optimal:");
800037ec:	fe cc 09 d4 	sub	r12,pc,2516
800037f0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800037f4:	30 2b       	mov	r11,2
800037f6:	ee fc fd e0 	ld.w	r12,r7[-544]
800037fa:	f0 16 00 c7 	mcall	r6[796]
		dbg_print(", New:");
800037fe:	fe cc 09 da 	sub	r12,pc,2522
80003802:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003806:	30 2b       	mov	r11,2
80003808:	ee fc fd dc 	ld.w	r12,r7[-548]
8000380c:	f0 16 00 c7 	mcall	r6[796]
		dbg_print("\n");
80003810:	fe cc 0a 0c 	sub	r12,pc,2572
80003814:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
80003818:	fe 3d fd cc 	sub	sp,-564
8000381c:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	2c be       	sub	lr,-53

80003824 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003824:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003828:	1a 97       	mov	r7,sp
8000382a:	21 7d       	sub	sp,92
8000382c:	fe f6 04 a8 	ld.w	r6,pc[1192]
80003830:	1e 26       	rsub	r6,pc
80003832:	ee c5 ff ec 	sub	r5,r7,-20
80003836:	ef 4c ff b8 	st.w	r7[-72],r12
8000383a:	ef 4a ff b0 	st.w	r7[-80],r10
8000383e:	ef 49 ff ac 	st.w	r7[-84],r9
80003842:	ef 48 ff a8 	st.w	r7[-88],r8
80003846:	6a 68       	ld.w	r8,r5[0x18]
80003848:	16 99       	mov	r9,r11
8000384a:	ef 69 ff b4 	st.b	r7[-76],r9
8000384e:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
80003852:	ea c8 ff f4 	sub	r8,r5,-12
80003856:	0a 9b       	mov	r11,r5
80003858:	10 9c       	mov	r12,r8
8000385a:	fe b0 f8 19 	rcall	8000288c <scalar_product>
8000385e:	18 98       	mov	r8,r12
80003860:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003864:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003868:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000386c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003870:	ee fa ff b0 	ld.w	r10,r7[-80]
80003874:	ee f8 ff b0 	ld.w	r8,r7[-80]
80003878:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000387c:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
80003880:	ea c8 ff f4 	sub	r8,r5,-12
80003884:	10 9c       	mov	r12,r8
80003886:	fe b0 f9 d3 	rcall	80002c2c <vector_norm_sqr>
8000388a:	18 98       	mov	r8,r12
8000388c:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80003890:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003894:	30 18       	mov	r8,1
80003896:	ee fa ff dc 	ld.w	r10,r7[-36]
8000389a:	30 09       	mov	r9,0
8000389c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038a0:	e0 8c 00 03 	brvs	800038a6 <linearProgram1+0x82>
800038a4:	c0 25       	brlt	800038a8 <linearProgram1+0x84>
800038a6:	30 08       	mov	r8,0
800038a8:	5c 58       	castu.b	r8
800038aa:	c0 40       	breq	800038b2 <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800038ac:	30 08       	mov	r8,0
800038ae:	e0 8f 02 0e 	bral	80003cca <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800038b2:	ee fc ff dc 	ld.w	r12,r7[-36]
800038b6:	fe b0 f9 51 	rcall	80002b58 <fast_sqrt>
800038ba:	18 98       	mov	r8,r12
800038bc:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800038c0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038c4:	10 99       	mov	r9,r8
800038c6:	ee 19 80 00 	eorh	r9,0x8000
800038ca:	ee f8 ff e0 	ld.w	r8,r7[-32]
800038ce:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038d2:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800038d6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800038da:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038de:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038e2:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800038e6:	30 08       	mov	r8,0
800038e8:	ef 68 ff ef 	st.b	r7[-17],r8
800038ec:	cb e8       	rjmp	80003a68 <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800038ee:	30 08       	mov	r8,0
800038f0:	ef 68 ff d7 	st.b	r7[-41],r8
800038f4:	c2 48       	rjmp	8000393c <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800038f6:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800038fa:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800038fe:	12 98       	mov	r8,r9
80003900:	a1 78       	lsl	r8,0x1
80003902:	12 08       	add	r8,r9
80003904:	a3 78       	lsl	r8,0x3
80003906:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000390a:	f2 08 00 08 	add	r8,r9,r8
8000390e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003912:	2f d9       	sub	r9,-3
80003914:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003918:	ef 28 ff d7 	ld.sb	r8,r7[-41]
8000391c:	2f d8       	sub	r8,-3
8000391e:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
80003922:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003926:	f4 08 15 02 	lsl	r8,r10,0x2
8000392a:	ee 08 00 08 	add	r8,r7,r8
8000392e:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
80003932:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003936:	2f f8       	sub	r8,-1
80003938:	ef 68 ff d7 	st.b	r7[-41],r8
8000393c:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003940:	30 28       	mov	r8,2
80003942:	f0 09 18 00 	cp.b	r9,r8
80003946:	fe 9a ff d8 	brle	800038f6 <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
8000394a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000394e:	12 98       	mov	r8,r9
80003950:	a1 78       	lsl	r8,0x1
80003952:	12 08       	add	r8,r9
80003954:	a3 78       	lsl	r8,0x3
80003956:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000395a:	f2 08 00 08 	add	r8,r9,r8
8000395e:	10 99       	mov	r9,r8
80003960:	ee c8 00 38 	sub	r8,r7,56
80003964:	12 9b       	mov	r11,r9
80003966:	10 9c       	mov	r12,r8
80003968:	fe b0 f7 92 	rcall	8000288c <scalar_product>
8000396c:	18 98       	mov	r8,r12
8000396e:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
80003972:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003976:	12 98       	mov	r8,r9
80003978:	a1 78       	lsl	r8,0x1
8000397a:	12 08       	add	r8,r9
8000397c:	a3 78       	lsl	r8,0x3
8000397e:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003982:	f2 08 00 08 	add	r8,r9,r8
80003986:	10 9b       	mov	r11,r8
80003988:	0a 9c       	mov	r12,r5
8000398a:	fe b0 f7 81 	rcall	8000288c <scalar_product>
8000398e:	18 98       	mov	r8,r12
80003990:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003994:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000399c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800039a0:	10 9c       	mov	r12,r8
800039a2:	f0 16 00 03 	mcall	r6[12]
800039a6:	14 98       	mov	r8,r10
800039a8:	16 99       	mov	r9,r11
800039aa:	30 03       	mov	r3,0
800039ac:	e0 6a 43 2d 	mov	r10,17197
800039b0:	ea 1a eb 1c 	orh	r10,0xeb1c
800039b4:	e0 6b 36 e2 	mov	r11,14050
800039b8:	ea 1b 3f 1a 	orh	r11,0x3f1a
800039bc:	f0 16 00 8b 	mcall	r6[556]
800039c0:	18 98       	mov	r8,r12
800039c2:	58 08       	cp.w	r8,0
800039c4:	c0 20       	breq	800039c8 <linearProgram1+0x1a4>
800039c6:	30 13       	mov	r3,1
800039c8:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800039cc:	c1 00       	breq	800039ec <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800039ce:	30 18       	mov	r8,1
800039d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800039d4:	30 09       	mov	r9,0
800039d6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800039da:	e0 8c 00 04 	brvs	800039e2 <linearProgram1+0x1be>
800039de:	e0 89 00 03 	brgt	800039e4 <linearProgram1+0x1c0>
800039e2:	30 08       	mov	r8,0
800039e4:	5c 58       	castu.b	r8
800039e6:	c3 b0       	breq	80003a5c <linearProgram1+0x238>
			{
				return false;
800039e8:	30 08       	mov	r8,0
800039ea:	c7 09       	rjmp	80003cca <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800039ec:	ee fb ff f4 	ld.w	r11,r7[-12]
800039f0:	ee fc ff f0 	ld.w	r12,r7[-16]
800039f4:	f0 16 00 08 	mcall	r6[32]
800039f8:	18 98       	mov	r8,r12
800039fa:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
800039fe:	30 18       	mov	r8,1
80003a00:	ee fa ff f4 	ld.w	r10,r7[-12]
80003a04:	30 09       	mov	r9,0
80003a06:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a0a:	e0 8c 00 03 	brvs	80003a10 <linearProgram1+0x1ec>
80003a0e:	c0 24       	brge	80003a12 <linearProgram1+0x1ee>
80003a10:	30 08       	mov	r8,0
80003a12:	5c 58       	castu.b	r8
80003a14:	c0 b0       	breq	80003a2a <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003a16:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a1a:	ee fc ff e4 	ld.w	r12,r7[-28]
80003a1e:	fe b0 f9 54 	rcall	80002cc6 <f_max>
80003a22:	18 98       	mov	r8,r12
80003a24:	ef 48 ff e4 	st.w	r7[-28],r8
80003a28:	c0 a8       	rjmp	80003a3c <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003a2a:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a2e:	ee fc ff e8 	ld.w	r12,r7[-24]
80003a32:	fe b0 f9 2b 	rcall	80002c88 <f_min>
80003a36:	18 98       	mov	r8,r12
80003a38:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003a3c:	30 18       	mov	r8,1
80003a3e:	ee fa ff e4 	ld.w	r10,r7[-28]
80003a42:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003a46:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a4a:	e0 8c 00 04 	brvs	80003a52 <linearProgram1+0x22e>
80003a4e:	e0 89 00 03 	brgt	80003a54 <linearProgram1+0x230>
80003a52:	30 08       	mov	r8,0
80003a54:	5c 58       	castu.b	r8
80003a56:	c0 40       	breq	80003a5e <linearProgram1+0x23a>
		{
			return false;
80003a58:	30 08       	mov	r8,0
80003a5a:	c3 89       	rjmp	80003cca <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003a5c:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
80003a5e:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003a62:	2f f8       	sub	r8,-1
80003a64:	ef 68 ff ef 	st.b	r7[-17],r8
80003a68:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003a6c:	ef 38 ff b4 	ld.ub	r8,r7[-76]
80003a70:	f0 09 18 00 	cp.b	r9,r8
80003a74:	fe 95 ff 3d 	brlt	800038ee <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003a78:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003a7c:	30 08       	mov	r8,0
80003a7e:	f0 09 18 00 	cp.b	r9,r8
80003a82:	c6 20       	breq	80003b46 <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003a84:	0a 9b       	mov	r11,r5
80003a86:	ee fc ff ac 	ld.w	r12,r7[-84]
80003a8a:	fe b0 f7 01 	rcall	8000288c <scalar_product>
80003a8e:	18 9a       	mov	r10,r12
80003a90:	30 18       	mov	r8,1
80003a92:	30 09       	mov	r9,0
80003a94:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a98:	e0 8c 00 04 	brvs	80003aa0 <linearProgram1+0x27c>
80003a9c:	e0 89 00 03 	brgt	80003aa2 <linearProgram1+0x27e>
80003aa0:	30 08       	mov	r8,0
80003aa2:	5c 58       	castu.b	r8
80003aa4:	c2 90       	breq	80003af6 <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003aa6:	30 08       	mov	r8,0
80003aa8:	ef 68 ff d7 	st.b	r7[-41],r8
80003aac:	c1 d8       	rjmp	80003ae6 <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003aae:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ab2:	a3 68       	lsl	r8,0x2
80003ab4:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003ab8:	f2 08 00 08 	add	r8,r9,r8
80003abc:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ac0:	2f d9       	sub	r9,-3
80003ac2:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003ac6:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003aca:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ace:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003ad2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ad6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003ada:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003adc:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003ae0:	2f f8       	sub	r8,-1
80003ae2:	ef 68 ff d7 	st.b	r7[-41],r8
80003ae6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003aea:	30 28       	mov	r8,2
80003aec:	f0 09 18 00 	cp.b	r9,r8
80003af0:	fe 9a ff df 	brle	80003aae <linearProgram1+0x28a>
80003af4:	ce a8       	rjmp	80003cc8 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003af6:	30 08       	mov	r8,0
80003af8:	ef 68 ff d7 	st.b	r7[-41],r8
80003afc:	c1 d8       	rjmp	80003b36 <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003afe:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b02:	a3 68       	lsl	r8,0x2
80003b04:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b08:	f2 08 00 08 	add	r8,r9,r8
80003b0c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b10:	2f d9       	sub	r9,-3
80003b12:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b16:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b1a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b1e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003b22:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b26:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b2a:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003b2c:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b30:	2f f8       	sub	r8,-1
80003b32:	ef 68 ff d7 	st.b	r7[-41],r8
80003b36:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b3a:	30 28       	mov	r8,2
80003b3c:	f0 09 18 00 	cp.b	r9,r8
80003b40:	fe 9a ff df 	brle	80003afe <linearProgram1+0x2da>
80003b44:	cc 28       	rjmp	80003cc8 <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b46:	30 08       	mov	r8,0
80003b48:	ef 68 ff d7 	st.b	r7[-41],r8
80003b4c:	c1 c8       	rjmp	80003b84 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003b4e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b52:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b56:	a3 69       	lsl	r9,0x2
80003b58:	ee fa ff ac 	ld.w	r10,r7[-84]
80003b5c:	f4 09 00 09 	add	r9,r10,r9
80003b60:	72 0a       	ld.w	r10,r9[0x0]
80003b62:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b66:	2f d9       	sub	r9,-3
80003b68:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003b6c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003b70:	a3 68       	lsl	r8,0x2
80003b72:	ee 08 00 08 	add	r8,r7,r8
80003b76:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b7a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b7e:	2f f8       	sub	r8,-1
80003b80:	ef 68 ff d7 	st.b	r7[-41],r8
80003b84:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b88:	30 28       	mov	r8,2
80003b8a:	f0 09 18 00 	cp.b	r9,r8
80003b8e:	fe 9a ff e0 	brle	80003b4e <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003b92:	ee c8 00 44 	sub	r8,r7,68
80003b96:	10 9b       	mov	r11,r8
80003b98:	0a 9c       	mov	r12,r5
80003b9a:	fe b0 f6 79 	rcall	8000288c <scalar_product>
80003b9e:	18 98       	mov	r8,r12
80003ba0:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003ba4:	30 18       	mov	r8,1
80003ba6:	ee fa ff fc 	ld.w	r10,r7[-4]
80003baa:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bae:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003bb2:	e0 8c 00 03 	brvs	80003bb8 <linearProgram1+0x394>
80003bb6:	c0 25       	brlt	80003bba <linearProgram1+0x396>
80003bb8:	30 08       	mov	r8,0
80003bba:	5c 58       	castu.b	r8
80003bbc:	c2 90       	breq	80003c0e <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003bbe:	30 08       	mov	r8,0
80003bc0:	ef 68 ff d7 	st.b	r7[-41],r8
80003bc4:	c1 d8       	rjmp	80003bfe <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003bc6:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003bca:	a3 68       	lsl	r8,0x2
80003bcc:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003bd0:	f2 08 00 08 	add	r8,r9,r8
80003bd4:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003bd8:	2f d9       	sub	r9,-3
80003bda:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003bde:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003be2:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003be6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003bee:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003bf2:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003bf4:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bf8:	2f f8       	sub	r8,-1
80003bfa:	ef 68 ff d7 	st.b	r7[-41],r8
80003bfe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c02:	30 28       	mov	r8,2
80003c04:	f0 09 18 00 	cp.b	r9,r8
80003c08:	fe 9a ff df 	brle	80003bc6 <linearProgram1+0x3a2>
80003c0c:	c5 e8       	rjmp	80003cc8 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003c0e:	30 18       	mov	r8,1
80003c10:	ee fa ff fc 	ld.w	r10,r7[-4]
80003c14:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c18:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c1c:	e0 8c 00 04 	brvs	80003c24 <linearProgram1+0x400>
80003c20:	e0 89 00 03 	brgt	80003c26 <linearProgram1+0x402>
80003c24:	30 08       	mov	r8,0
80003c26:	5c 58       	castu.b	r8
80003c28:	c2 90       	breq	80003c7a <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003c2a:	30 08       	mov	r8,0
80003c2c:	ef 68 ff d7 	st.b	r7[-41],r8
80003c30:	c1 d8       	rjmp	80003c6a <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003c32:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c36:	a3 68       	lsl	r8,0x2
80003c38:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c3c:	f2 08 00 08 	add	r8,r9,r8
80003c40:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c44:	2f d9       	sub	r9,-3
80003c46:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c4a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c4e:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003c52:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c56:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003c5a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003c5e:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003c60:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003c64:	2f f8       	sub	r8,-1
80003c66:	ef 68 ff d7 	st.b	r7[-41],r8
80003c6a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c6e:	30 28       	mov	r8,2
80003c70:	f0 09 18 00 	cp.b	r9,r8
80003c74:	fe 9a ff df 	brle	80003c32 <linearProgram1+0x40e>
80003c78:	c2 88       	rjmp	80003cc8 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003c7a:	30 08       	mov	r8,0
80003c7c:	ef 68 ff d7 	st.b	r7[-41],r8
80003c80:	c1 d8       	rjmp	80003cba <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003c82:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c86:	a3 68       	lsl	r8,0x2
80003c88:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c8c:	f2 08 00 08 	add	r8,r9,r8
80003c90:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c94:	2f d9       	sub	r9,-3
80003c96:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c9a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c9e:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ca2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ca6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003caa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003cae:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003cb0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003cb4:	2f f8       	sub	r8,-1
80003cb6:	ef 68 ff d7 	st.b	r7[-41],r8
80003cba:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003cbe:	30 28       	mov	r8,2
80003cc0:	f0 09 18 00 	cp.b	r9,r8
80003cc4:	fe 9a ff df 	brle	80003c82 <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003cc8:	30 18       	mov	r8,1
}
80003cca:	10 9c       	mov	r12,r8
80003ccc:	2e 9d       	sub	sp,-92
80003cce:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003cd2:	00 00       	add	r0,r0
80003cd4:	80 00       	ld.sh	r0,r0[0x0]
80003cd6:	36 b4       	mov	r4,107

80003cd8 <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003cd8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003cdc:	1a 97       	mov	r7,sp
80003cde:	fa cd 00 cc 	sub	sp,sp,204
80003ce2:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003ce6:	1e 26       	rsub	r6,pc
80003ce8:	ee ce ff ec 	sub	lr,r7,-20
80003cec:	ef 4c ff 48 	st.w	r7[-184],r12
80003cf0:	ef 4a ff 40 	st.w	r7[-192],r10
80003cf4:	ef 49 ff 3c 	st.w	r7[-196],r9
80003cf8:	ef 48 ff 38 	st.w	r7[-200],r8
80003cfc:	7c 08       	ld.w	r8,lr[0x0]
80003cfe:	16 99       	mov	r9,r11
80003d00:	ef 69 ff 44 	st.b	r7[-188],r9
80003d04:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003d08:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d0c:	12 98       	mov	r8,r9
80003d0e:	a1 78       	lsl	r8,0x1
80003d10:	12 08       	add	r8,r9
80003d12:	a3 78       	lsl	r8,0x3
80003d14:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d18:	f2 08 00 08 	add	r8,r9,r8
80003d1c:	10 9a       	mov	r10,r8
80003d1e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d22:	12 98       	mov	r8,r9
80003d24:	a1 78       	lsl	r8,0x1
80003d26:	12 08       	add	r8,r9
80003d28:	a3 78       	lsl	r8,0x3
80003d2a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d2e:	f2 08 00 08 	add	r8,r9,r8
80003d32:	2f 48       	sub	r8,-12
80003d34:	14 9b       	mov	r11,r10
80003d36:	10 9c       	mov	r12,r8
80003d38:	fe b0 f5 aa 	rcall	8000288c <scalar_product>
80003d3c:	18 98       	mov	r8,r12
80003d3e:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003d42:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003d46:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003d4a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d4e:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003d52:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003d56:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d5a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d5e:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003d62:	30 18       	mov	r8,1
80003d64:	ee fa ff cc 	ld.w	r10,r7[-52]
80003d68:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d6c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003d70:	e0 8c 00 04 	brvs	80003d78 <linearProgram2+0xa0>
80003d74:	e0 89 00 03 	brgt	80003d7a <linearProgram2+0xa2>
80003d78:	30 08       	mov	r8,0
80003d7a:	5c 58       	castu.b	r8
80003d7c:	c0 40       	breq	80003d84 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003d7e:	30 08       	mov	r8,0
80003d80:	e0 8f 04 64 	bral	80004648 <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003d84:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d88:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003d8c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003d90:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003d94:	30 08       	mov	r8,0
80003d96:	ef 68 ff c7 	st.b	r7[-57],r8
80003d9a:	c2 08       	rjmp	80003dda <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003d9c:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003da0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003da4:	12 98       	mov	r8,r9
80003da6:	a1 78       	lsl	r8,0x1
80003da8:	12 08       	add	r8,r9
80003daa:	a3 78       	lsl	r8,0x3
80003dac:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003db0:	f2 08 00 08 	add	r8,r9,r8
80003db4:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003db8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003dbc:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003dc0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003dc4:	f4 08 15 02 	lsl	r8,r10,0x2
80003dc8:	ee 08 00 08 	add	r8,r7,r8
80003dcc:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003dd0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003dd4:	2f f8       	sub	r8,-1
80003dd6:	ef 68 ff c7 	st.b	r7[-57],r8
80003dda:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003dde:	30 28       	mov	r8,2
80003de0:	f0 09 18 00 	cp.b	r9,r8
80003de4:	fe 9a ff dc 	brle	80003d9c <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003de8:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003dec:	30 08       	mov	r8,0
80003dee:	f0 09 18 00 	cp.b	r9,r8
80003df2:	e0 80 00 c0 	breq	80003f72 <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003df6:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003dfa:	12 98       	mov	r8,r9
80003dfc:	a1 78       	lsl	r8,0x1
80003dfe:	12 08       	add	r8,r9
80003e00:	a3 78       	lsl	r8,0x3
80003e02:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e06:	f2 08 00 08 	add	r8,r9,r8
80003e0a:	10 9b       	mov	r11,r8
80003e0c:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003e10:	fe b0 f5 3e 	rcall	8000288c <scalar_product>
80003e14:	18 98       	mov	r8,r12
80003e16:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003e1a:	30 08       	mov	r8,0
80003e1c:	ef 68 ff c7 	st.b	r7[-57],r8
80003e20:	c2 a8       	rjmp	80003e74 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003e22:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e26:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2a:	a3 68       	lsl	r8,0x2
80003e2c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003e30:	f2 08 00 08 	add	r8,r9,r8
80003e34:	70 0b       	ld.w	r11,r8[0x0]
80003e36:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e3a:	12 98       	mov	r8,r9
80003e3c:	a1 78       	lsl	r8,0x1
80003e3e:	12 08       	add	r8,r9
80003e40:	a3 78       	lsl	r8,0x3
80003e42:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e46:	f2 08 00 08 	add	r8,r9,r8
80003e4a:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e4e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e52:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003e56:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003e5a:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003e5e:	f4 08 15 02 	lsl	r8,r10,0x2
80003e62:	ee 08 00 08 	add	r8,r7,r8
80003e66:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003e6a:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e6e:	2f f8       	sub	r8,-1
80003e70:	ef 68 ff c7 	st.b	r7[-57],r8
80003e74:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e78:	30 28       	mov	r8,2
80003e7a:	f0 09 18 00 	cp.b	r9,r8
80003e7e:	fe 9a ff d2 	brle	80003e22 <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003e82:	ee c8 00 54 	sub	r8,r7,84
80003e86:	10 9c       	mov	r12,r8
80003e88:	fe b0 f6 d2 	rcall	80002c2c <vector_norm_sqr>
80003e8c:	18 98       	mov	r8,r12
80003e8e:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003e92:	ee fc ff e0 	ld.w	r12,r7[-32]
80003e96:	f0 16 00 03 	mcall	r6[12]
80003e9a:	14 98       	mov	r8,r10
80003e9c:	16 99       	mov	r9,r11
80003e9e:	30 05       	mov	r5,0
80003ea0:	e0 6a 43 2d 	mov	r10,17197
80003ea4:	ea 1a eb 1c 	orh	r10,0xeb1c
80003ea8:	e0 6b 36 e2 	mov	r11,14050
80003eac:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003eb0:	f0 16 00 8b 	mcall	r6[556]
80003eb4:	18 98       	mov	r8,r12
80003eb6:	58 08       	cp.w	r8,0
80003eb8:	c0 20       	breq	80003ebc <linearProgram2+0x1e4>
80003eba:	30 15       	mov	r5,1
80003ebc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003ec0:	c2 00       	breq	80003f00 <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003ec2:	30 08       	mov	r8,0
80003ec4:	ef 68 ff c7 	st.b	r7[-57],r8
80003ec8:	c1 48       	rjmp	80003ef0 <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003eca:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ece:	a3 68       	lsl	r8,0x2
80003ed0:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003ed4:	10 09       	add	r9,r8
80003ed6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003eda:	a3 68       	lsl	r8,0x2
80003edc:	ee 08 00 08 	add	r8,r7,r8
80003ee0:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003ee4:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003ee6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003eea:	2f f8       	sub	r8,-1
80003eec:	ef 68 ff c7 	st.b	r7[-57],r8
80003ef0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ef4:	30 28       	mov	r8,2
80003ef6:	f0 09 18 00 	cp.b	r9,r8
80003efa:	fe 9a ff e8 	brle	80003eca <linearProgram2+0x1f2>
80003efe:	c2 d9       	rjmp	80004158 <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003f00:	ee fb ff e0 	ld.w	r11,r7[-32]
80003f04:	ee fc ff d4 	ld.w	r12,r7[-44]
80003f08:	f0 16 00 08 	mcall	r6[32]
80003f0c:	18 98       	mov	r8,r12
80003f0e:	10 9c       	mov	r12,r8
80003f10:	fe b0 f6 24 	rcall	80002b58 <fast_sqrt>
80003f14:	18 98       	mov	r8,r12
80003f16:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003f1a:	30 08       	mov	r8,0
80003f1c:	ef 68 ff c7 	st.b	r7[-57],r8
80003f20:	c2 18       	rjmp	80003f62 <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003f22:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f26:	a3 68       	lsl	r8,0x2
80003f28:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f2c:	10 09       	add	r9,r8
80003f2e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f32:	a3 68       	lsl	r8,0x2
80003f34:	ee 08 00 08 	add	r8,r7,r8
80003f38:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003f3c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f40:	a3 68       	lsl	r8,0x2
80003f42:	ee 08 00 08 	add	r8,r7,r8
80003f46:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003f4a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003f4e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003f52:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003f56:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003f58:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f5c:	2f f8       	sub	r8,-1
80003f5e:	ef 68 ff c7 	st.b	r7[-57],r8
80003f62:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f66:	30 28       	mov	r8,2
80003f68:	f0 09 18 00 	cp.b	r9,r8
80003f6c:	fe 9a ff db 	brle	80003f22 <linearProgram2+0x24a>
80003f70:	cf 48       	rjmp	80004158 <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003f72:	30 08       	mov	r8,0
80003f74:	ef 68 ff c7 	st.b	r7[-57],r8
80003f78:	c2 78       	rjmp	80003fc6 <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003f7a:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f7e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f82:	12 98       	mov	r8,r9
80003f84:	a1 78       	lsl	r8,0x1
80003f86:	12 08       	add	r8,r9
80003f88:	a3 78       	lsl	r8,0x3
80003f8a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f8e:	f2 08 00 08 	add	r8,r9,r8
80003f92:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f96:	2f d9       	sub	r9,-3
80003f98:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003f9c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa0:	a3 68       	lsl	r8,0x2
80003fa2:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003fa6:	f6 08 00 08 	add	r8,r11,r8
80003faa:	70 08       	ld.w	r8,r8[0x0]
80003fac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb0:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb4:	ee 08 00 08 	add	r8,r7,r8
80003fb8:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003fbc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc0:	2f f8       	sub	r8,-1
80003fc2:	ef 68 ff c7 	st.b	r7[-57],r8
80003fc6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fca:	30 28       	mov	r8,2
80003fcc:	f0 09 18 00 	cp.b	r9,r8
80003fd0:	fe 9a ff d5 	brle	80003f7a <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003fd4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003fd8:	12 98       	mov	r8,r9
80003fda:	a1 78       	lsl	r8,0x1
80003fdc:	12 08       	add	r8,r9
80003fde:	a3 78       	lsl	r8,0x3
80003fe0:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003fe4:	f2 08 00 08 	add	r8,r9,r8
80003fe8:	10 99       	mov	r9,r8
80003fea:	ee c8 00 60 	sub	r8,r7,96
80003fee:	12 9b       	mov	r11,r9
80003ff0:	10 9c       	mov	r12,r8
80003ff2:	fe b0 f4 4d 	rcall	8000288c <scalar_product>
80003ff6:	18 98       	mov	r8,r12
80003ff8:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80003ffc:	30 08       	mov	r8,0
80003ffe:	ef 68 ff c7 	st.b	r7[-57],r8
80004002:	c2 a8       	rjmp	80004056 <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80004004:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004008:	a3 68       	lsl	r8,0x2
8000400a:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000400e:	f2 08 00 0a 	add	r10,r9,r8
80004012:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004016:	a3 68       	lsl	r8,0x2
80004018:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000401c:	f2 08 00 08 	add	r8,r9,r8
80004020:	70 0b       	ld.w	r11,r8[0x0]
80004022:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004026:	12 98       	mov	r8,r9
80004028:	a1 78       	lsl	r8,0x1
8000402a:	12 08       	add	r8,r9
8000402c:	a3 78       	lsl	r8,0x3
8000402e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004032:	f2 08 00 08 	add	r8,r9,r8
80004036:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000403a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000403e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004042:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004046:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
8000404a:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
8000404c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004050:	2f f8       	sub	r8,-1
80004052:	ef 68 ff c7 	st.b	r7[-57],r8
80004056:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000405a:	30 28       	mov	r8,2
8000405c:	f0 09 18 00 	cp.b	r9,r8
80004060:	fe 9a ff d2 	brle	80004004 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80004064:	ee fc ff 38 	ld.w	r12,r7[-200]
80004068:	fe b0 f5 e2 	rcall	80002c2c <vector_norm_sqr>
8000406c:	18 9a       	mov	r10,r12
8000406e:	30 18       	mov	r8,1
80004070:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004074:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004078:	e0 8c 00 04 	brvs	80004080 <linearProgram2+0x3a8>
8000407c:	e0 89 00 03 	brgt	80004082 <linearProgram2+0x3aa>
80004080:	30 08       	mov	r8,0
80004082:	5c 58       	castu.b	r8
80004084:	c6 a0       	breq	80004158 <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
80004086:	30 08       	mov	r8,0
80004088:	ef 68 ff c7 	st.b	r7[-57],r8
8000408c:	c1 f8       	rjmp	800040ca <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
8000408e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004092:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004096:	a3 68       	lsl	r8,0x2
80004098:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000409c:	f2 08 00 08 	add	r8,r9,r8
800040a0:	70 09       	ld.w	r9,r8[0x0]
800040a2:	ef 28 ff c7 	ld.sb	r8,r7[-57]
800040a6:	a3 68       	lsl	r8,0x2
800040a8:	ee 08 00 08 	add	r8,r7,r8
800040ac:	f0 f8 ff b8 	ld.w	r8,r8[-72]
800040b0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800040b4:	f4 08 15 02 	lsl	r8,r10,0x2
800040b8:	ee 08 00 08 	add	r8,r7,r8
800040bc:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
800040c0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040c4:	2f f8       	sub	r8,-1
800040c6:	ef 68 ff c7 	st.b	r7[-57],r8
800040ca:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040ce:	30 28       	mov	r8,2
800040d0:	f0 09 18 00 	cp.b	r9,r8
800040d4:	fe 9a ff dd 	brle	8000408e <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
800040d8:	ee c8 00 6c 	sub	r8,r7,108
800040dc:	10 9c       	mov	r12,r8
800040de:	fe b0 f5 a7 	rcall	80002c2c <vector_norm_sqr>
800040e2:	18 98       	mov	r8,r12
800040e4:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
800040e8:	ee fb ff ec 	ld.w	r11,r7[-20]
800040ec:	ee fc ff d4 	ld.w	r12,r7[-44]
800040f0:	f0 16 00 08 	mcall	r6[32]
800040f4:	18 98       	mov	r8,r12
800040f6:	10 9c       	mov	r12,r8
800040f8:	fe b0 f5 30 	rcall	80002b58 <fast_sqrt>
800040fc:	18 98       	mov	r8,r12
800040fe:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80004102:	30 08       	mov	r8,0
80004104:	ef 68 ff c7 	st.b	r7[-57],r8
80004108:	c2 18       	rjmp	8000414a <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
8000410a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000410e:	a3 68       	lsl	r8,0x2
80004110:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004114:	10 09       	add	r9,r8
80004116:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000411a:	a3 68       	lsl	r8,0x2
8000411c:	ee 08 00 08 	add	r8,r7,r8
80004120:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004124:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004128:	a3 68       	lsl	r8,0x2
8000412a:	ee 08 00 08 	add	r8,r7,r8
8000412e:	f0 fb ff 94 	ld.w	r11,r8[-108]
80004132:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004136:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000413a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000413e:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
80004140:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004144:	2f f8       	sub	r8,-1
80004146:	ef 68 ff c7 	st.b	r7[-57],r8
8000414a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000414e:	30 28       	mov	r8,2
80004150:	f0 09 18 00 	cp.b	r9,r8
80004154:	fe 9a ff db 	brle	8000410a <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004158:	30 08       	mov	r8,0
8000415a:	ef 68 ff db 	st.b	r7[-37],r8
8000415e:	e0 8f 02 6c 	bral	80004636 <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80004162:	30 08       	mov	r8,0
80004164:	ef 68 ff c7 	st.b	r7[-57],r8
80004168:	c2 78       	rjmp	800041b6 <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
8000416a:	ef 2a ff c7 	ld.sb	r10,r7[-57]
8000416e:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004172:	12 98       	mov	r8,r9
80004174:	a1 78       	lsl	r8,0x1
80004176:	12 08       	add	r8,r9
80004178:	a3 78       	lsl	r8,0x3
8000417a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000417e:	f2 08 00 08 	add	r8,r9,r8
80004182:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004186:	2f d9       	sub	r9,-3
80004188:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000418c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004190:	a3 68       	lsl	r8,0x2
80004192:	ee fb ff 38 	ld.w	r11,r7[-200]
80004196:	f6 08 00 08 	add	r8,r11,r8
8000419a:	70 08       	ld.w	r8,r8[0x0]
8000419c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800041a0:	f4 08 15 02 	lsl	r8,r10,0x2
800041a4:	ee 08 00 08 	add	r8,r7,r8
800041a8:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800041ac:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800041b0:	2f f8       	sub	r8,-1
800041b2:	ef 68 ff c7 	st.b	r7[-57],r8
800041b6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800041ba:	30 28       	mov	r8,2
800041bc:	f0 09 18 00 	cp.b	r9,r8
800041c0:	fe 9a ff d5 	brle	8000416a <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800041c4:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041c8:	12 98       	mov	r8,r9
800041ca:	a1 78       	lsl	r8,0x1
800041cc:	12 08       	add	r8,r9
800041ce:	a3 78       	lsl	r8,0x3
800041d0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041d4:	f2 08 00 08 	add	r8,r9,r8
800041d8:	ee c9 00 78 	sub	r9,r7,120
800041dc:	12 9b       	mov	r11,r9
800041de:	10 9c       	mov	r12,r8
800041e0:	fe b0 f3 56 	rcall	8000288c <scalar_product>
800041e4:	18 9a       	mov	r10,r12
800041e6:	30 18       	mov	r8,1
800041e8:	30 09       	mov	r9,0
800041ea:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800041ee:	e0 8c 00 04 	brvs	800041f6 <linearProgram2+0x51e>
800041f2:	e0 89 00 03 	brgt	800041f8 <linearProgram2+0x520>
800041f6:	30 08       	mov	r8,0
800041f8:	5c 58       	castu.b	r8
800041fa:	e0 80 02 19 	breq	8000462c <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
800041fe:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004202:	12 98       	mov	r8,r9
80004204:	a1 78       	lsl	r8,0x1
80004206:	12 08       	add	r8,r9
80004208:	a3 78       	lsl	r8,0x3
8000420a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000420e:	f2 08 00 08 	add	r8,r9,r8
80004212:	70 1a       	ld.w	r10,r8[0x4]
80004214:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004218:	12 98       	mov	r8,r9
8000421a:	a1 78       	lsl	r8,0x1
8000421c:	12 08       	add	r8,r9
8000421e:	a3 78       	lsl	r8,0x3
80004220:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004224:	f2 08 00 08 	add	r8,r9,r8
80004228:	70 28       	ld.w	r8,r8[0x8]
8000422a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000422e:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004232:	12 98       	mov	r8,r9
80004234:	a1 78       	lsl	r8,0x1
80004236:	12 08       	add	r8,r9
80004238:	a3 78       	lsl	r8,0x3
8000423a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000423e:	f2 08 00 08 	add	r8,r9,r8
80004242:	70 2b       	ld.w	r11,r8[0x8]
80004244:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004248:	12 98       	mov	r8,r9
8000424a:	a1 78       	lsl	r8,0x1
8000424c:	12 08       	add	r8,r9
8000424e:	a3 78       	lsl	r8,0x3
80004250:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004254:	f2 08 00 08 	add	r8,r9,r8
80004258:	70 18       	ld.w	r8,r8[0x4]
8000425a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000425e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004262:	ef 48 ff 7c 	st.w	r7[-132],r8
80004266:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000426a:	12 98       	mov	r8,r9
8000426c:	a1 78       	lsl	r8,0x1
8000426e:	12 08       	add	r8,r9
80004270:	a3 78       	lsl	r8,0x3
80004272:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004276:	f2 08 00 08 	add	r8,r9,r8
8000427a:	70 2a       	ld.w	r10,r8[0x8]
8000427c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004280:	12 98       	mov	r8,r9
80004282:	a1 78       	lsl	r8,0x1
80004284:	12 08       	add	r8,r9
80004286:	a3 78       	lsl	r8,0x3
80004288:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000428c:	f2 08 00 08 	add	r8,r9,r8
80004290:	70 08       	ld.w	r8,r8[0x0]
80004292:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004296:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000429a:	12 98       	mov	r8,r9
8000429c:	a1 78       	lsl	r8,0x1
8000429e:	12 08       	add	r8,r9
800042a0:	a3 78       	lsl	r8,0x3
800042a2:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042a6:	f2 08 00 08 	add	r8,r9,r8
800042aa:	70 0b       	ld.w	r11,r8[0x0]
800042ac:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042b0:	12 98       	mov	r8,r9
800042b2:	a1 78       	lsl	r8,0x1
800042b4:	12 08       	add	r8,r9
800042b6:	a3 78       	lsl	r8,0x3
800042b8:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042bc:	f2 08 00 08 	add	r8,r9,r8
800042c0:	70 28       	ld.w	r8,r8[0x8]
800042c2:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800042c6:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800042ca:	ef 48 ff 80 	st.w	r7[-128],r8
800042ce:	ef 29 ff db 	ld.sb	r9,r7[-37]
800042d2:	12 98       	mov	r8,r9
800042d4:	a1 78       	lsl	r8,0x1
800042d6:	12 08       	add	r8,r9
800042d8:	a3 78       	lsl	r8,0x3
800042da:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042de:	f2 08 00 08 	add	r8,r9,r8
800042e2:	70 0a       	ld.w	r10,r8[0x0]
800042e4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042e8:	12 98       	mov	r8,r9
800042ea:	a1 78       	lsl	r8,0x1
800042ec:	12 08       	add	r8,r9
800042ee:	a3 78       	lsl	r8,0x3
800042f0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042f4:	f2 08 00 08 	add	r8,r9,r8
800042f8:	70 18       	ld.w	r8,r8[0x4]
800042fa:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800042fe:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004302:	12 98       	mov	r8,r9
80004304:	a1 78       	lsl	r8,0x1
80004306:	12 08       	add	r8,r9
80004308:	a3 78       	lsl	r8,0x3
8000430a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000430e:	f2 08 00 08 	add	r8,r9,r8
80004312:	70 1b       	ld.w	r11,r8[0x4]
80004314:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004318:	12 98       	mov	r8,r9
8000431a:	a1 78       	lsl	r8,0x1
8000431c:	12 08       	add	r8,r9
8000431e:	a3 78       	lsl	r8,0x3
80004320:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004324:	f2 08 00 08 	add	r8,r9,r8
80004328:	70 08       	ld.w	r8,r8[0x0]
8000432a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000432e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004332:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
80004336:	ee c8 00 84 	sub	r8,r7,132
8000433a:	10 9c       	mov	r12,r8
8000433c:	fe b0 f4 78 	rcall	80002c2c <vector_norm_sqr>
80004340:	18 98       	mov	r8,r12
80004342:	10 9c       	mov	r12,r8
80004344:	f0 16 00 03 	mcall	r6[12]
80004348:	14 98       	mov	r8,r10
8000434a:	16 99       	mov	r9,r11
8000434c:	30 05       	mov	r5,0
8000434e:	e0 6a 43 2d 	mov	r10,17197
80004352:	ea 1a eb 1c 	orh	r10,0xeb1c
80004356:	e0 6b 36 e2 	mov	r11,14050
8000435a:	ea 1b 3f 1a 	orh	r11,0x3f1a
8000435e:	f0 16 00 8b 	mcall	r6[556]
80004362:	18 98       	mov	r8,r12
80004364:	58 08       	cp.w	r8,0
80004366:	c0 20       	breq	8000436a <linearProgram2+0x692>
80004368:	30 15       	mov	r5,1
8000436a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000436e:	c0 30       	breq	80004374 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
80004370:	30 08       	mov	r8,0
80004372:	c6 b9       	rjmp	80004648 <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004374:	ee c8 00 84 	sub	r8,r7,132
80004378:	10 9c       	mov	r12,r8
8000437a:	fe b0 f4 71 	rcall	80002c5c <vector_norm>
8000437e:	18 98       	mov	r8,r12
80004380:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004384:	30 08       	mov	r8,0
80004386:	ef 68 ff c7 	st.b	r7[-57],r8
8000438a:	c1 c8       	rjmp	800043c2 <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
8000438c:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004390:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004394:	a3 68       	lsl	r8,0x2
80004396:	ee 08 00 08 	add	r8,r7,r8
8000439a:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
8000439e:	ee fb ff f4 	ld.w	r11,r7[-12]
800043a2:	10 9c       	mov	r12,r8
800043a4:	f0 16 00 08 	mcall	r6[32]
800043a8:	18 98       	mov	r8,r12
800043aa:	10 99       	mov	r9,r8
800043ac:	ea 08 15 02 	lsl	r8,r5,0x2
800043b0:	ee 08 00 08 	add	r8,r7,r8
800043b4:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800043b8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043bc:	2f f8       	sub	r8,-1
800043be:	ef 68 ff c7 	st.b	r7[-57],r8
800043c2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043c6:	30 28       	mov	r8,2
800043c8:	f0 09 18 00 	cp.b	r9,r8
800043cc:	fe 9a ff e0 	brle	8000438c <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800043d0:	ee fa ff 68 	ld.w	r10,r7[-152]
800043d4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043d8:	12 98       	mov	r8,r9
800043da:	a1 78       	lsl	r8,0x1
800043dc:	12 08       	add	r8,r9
800043de:	a3 78       	lsl	r8,0x3
800043e0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043e4:	f2 08 00 08 	add	r8,r9,r8
800043e8:	70 28       	ld.w	r8,r8[0x8]
800043ea:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800043ee:	ee fb ff 6c 	ld.w	r11,r7[-148]
800043f2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043f6:	12 98       	mov	r8,r9
800043f8:	a1 78       	lsl	r8,0x1
800043fa:	12 08       	add	r8,r9
800043fc:	a3 78       	lsl	r8,0x3
800043fe:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004402:	f2 08 00 08 	add	r8,r9,r8
80004406:	70 18       	ld.w	r8,r8[0x4]
80004408:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000440c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004410:	ef 48 ff 58 	st.w	r7[-168],r8
80004414:	ee fa ff 6c 	ld.w	r10,r7[-148]
80004418:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000441c:	12 98       	mov	r8,r9
8000441e:	a1 78       	lsl	r8,0x1
80004420:	12 08       	add	r8,r9
80004422:	a3 78       	lsl	r8,0x3
80004424:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004428:	f2 08 00 08 	add	r8,r9,r8
8000442c:	70 08       	ld.w	r8,r8[0x0]
8000442e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004432:	ee fb ff 64 	ld.w	r11,r7[-156]
80004436:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000443a:	12 98       	mov	r8,r9
8000443c:	a1 78       	lsl	r8,0x1
8000443e:	12 08       	add	r8,r9
80004440:	a3 78       	lsl	r8,0x3
80004442:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004446:	f2 08 00 08 	add	r8,r9,r8
8000444a:	70 28       	ld.w	r8,r8[0x8]
8000444c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004450:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004454:	ef 48 ff 5c 	st.w	r7[-164],r8
80004458:	ee fa ff 64 	ld.w	r10,r7[-156]
8000445c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004460:	12 98       	mov	r8,r9
80004462:	a1 78       	lsl	r8,0x1
80004464:	12 08       	add	r8,r9
80004466:	a3 78       	lsl	r8,0x3
80004468:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000446c:	f2 08 00 08 	add	r8,r9,r8
80004470:	70 18       	ld.w	r8,r8[0x4]
80004472:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004476:	ee fb ff 68 	ld.w	r11,r7[-152]
8000447a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000447e:	12 98       	mov	r8,r9
80004480:	a1 78       	lsl	r8,0x1
80004482:	12 08       	add	r8,r9
80004484:	a3 78       	lsl	r8,0x3
80004486:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000448a:	f2 08 00 08 	add	r8,r9,r8
8000448e:	70 08       	ld.w	r8,r8[0x0]
80004490:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004494:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004498:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
8000449c:	30 08       	mov	r8,0
8000449e:	ef 68 ff c7 	st.b	r7[-57],r8
800044a2:	c2 e8       	rjmp	800044fe <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800044a4:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800044a8:	ef 29 ff db 	ld.sb	r9,r7[-37]
800044ac:	12 98       	mov	r8,r9
800044ae:	a1 78       	lsl	r8,0x1
800044b0:	12 08       	add	r8,r9
800044b2:	a3 78       	lsl	r8,0x3
800044b4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044b8:	f2 08 00 08 	add	r8,r9,r8
800044bc:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044c0:	2f d9       	sub	r9,-3
800044c2:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800044c6:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800044ca:	12 98       	mov	r8,r9
800044cc:	a1 78       	lsl	r8,0x1
800044ce:	12 08       	add	r8,r9
800044d0:	a3 78       	lsl	r8,0x3
800044d2:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044d6:	f2 08 00 08 	add	r8,r9,r8
800044da:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044de:	2f d9       	sub	r9,-3
800044e0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800044e4:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800044e8:	f4 08 15 02 	lsl	r8,r10,0x2
800044ec:	ee 08 00 08 	add	r8,r7,r8
800044f0:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044f4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044f8:	2f f8       	sub	r8,-1
800044fa:	ef 68 ff c7 	st.b	r7[-57],r8
800044fe:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004502:	30 28       	mov	r8,2
80004504:	f0 09 18 00 	cp.b	r9,r8
80004508:	fe 9a ff ce 	brle	800044a4 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
8000450c:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004510:	12 98       	mov	r8,r9
80004512:	a1 78       	lsl	r8,0x1
80004514:	12 08       	add	r8,r9
80004516:	a3 78       	lsl	r8,0x3
80004518:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000451c:	f2 08 00 08 	add	r8,r9,r8
80004520:	10 99       	mov	r9,r8
80004522:	ee c8 00 b4 	sub	r8,r7,180
80004526:	12 9b       	mov	r11,r9
80004528:	10 9c       	mov	r12,r8
8000452a:	fe b0 f1 b1 	rcall	8000288c <scalar_product>
8000452e:	18 98       	mov	r8,r12
80004530:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004534:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004538:	12 98       	mov	r8,r9
8000453a:	a1 78       	lsl	r8,0x1
8000453c:	12 08       	add	r8,r9
8000453e:	a3 78       	lsl	r8,0x3
80004540:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004544:	f2 08 00 08 	add	r8,r9,r8
80004548:	10 99       	mov	r9,r8
8000454a:	ee c8 00 a8 	sub	r8,r7,168
8000454e:	12 9b       	mov	r11,r9
80004550:	10 9c       	mov	r12,r8
80004552:	fe b0 f1 9d 	rcall	8000288c <scalar_product>
80004556:	18 98       	mov	r8,r12
80004558:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
8000455c:	30 08       	mov	r8,0
8000455e:	ef 68 ff c7 	st.b	r7[-57],r8
80004562:	c3 18       	rjmp	800045c4 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004564:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004568:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000456c:	12 98       	mov	r8,r9
8000456e:	a1 78       	lsl	r8,0x1
80004570:	12 08       	add	r8,r9
80004572:	a3 78       	lsl	r8,0x3
80004574:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004578:	f2 08 00 08 	add	r8,r9,r8
8000457c:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004580:	2f d9       	sub	r9,-3
80004582:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004586:	ee fb ff fc 	ld.w	r11,r7[-4]
8000458a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000458e:	f0 16 00 08 	mcall	r6[32]
80004592:	18 98       	mov	r8,r12
80004594:	10 99       	mov	r9,r8
80004596:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000459a:	a3 68       	lsl	r8,0x2
8000459c:	ee 08 00 08 	add	r8,r7,r8
800045a0:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800045a4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045a8:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800045ac:	ea c8 ff fd 	sub	r8,r5,-3
800045b0:	a3 68       	lsl	r8,0x2
800045b2:	ee 08 00 08 	add	r8,r7,r8
800045b6:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800045ba:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800045be:	2f f8       	sub	r8,-1
800045c0:	ef 68 ff c7 	st.b	r7[-57],r8
800045c4:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800045c8:	30 28       	mov	r8,2
800045ca:	f0 09 18 00 	cp.b	r9,r8
800045ce:	fe 9a ff cb 	brle	80004564 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800045d2:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800045d6:	ef 2c ff db 	ld.sb	r12,r7[-37]
800045da:	1a d8       	st.w	--sp,r8
800045dc:	20 6d       	sub	sp,24
800045de:	1a 98       	mov	r8,sp
800045e0:	10 9a       	mov	r10,r8
800045e2:	ee cb 00 9c 	sub	r11,r7,156
800045e6:	f4 c8 00 00 	sub	r8,r10,0
800045ea:	f6 c9 00 00 	sub	r9,r11,0
800045ee:	72 0e       	ld.w	lr,r9[0x0]
800045f0:	91 0e       	st.w	r8[0x0],lr
800045f2:	72 1e       	ld.w	lr,r9[0x4]
800045f4:	91 1e       	st.w	r8[0x4],lr
800045f6:	72 2e       	ld.w	lr,r9[0x8]
800045f8:	91 2e       	st.w	r8[0x8],lr
800045fa:	72 39       	ld.w	r9,r9[0xc]
800045fc:	91 39       	st.w	r8[0xc],r9
800045fe:	f6 e8 00 10 	ld.d	r8,r11[16]
80004602:	f4 e9 00 10 	st.d	r10[16],r8
80004606:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000460a:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000460e:	ee fa ff 40 	ld.w	r10,r7[-192]
80004612:	18 9b       	mov	r11,r12
80004614:	ee fc ff 48 	ld.w	r12,r7[-184]
80004618:	f0 16 01 cd 	mcall	r6[1844]
8000461c:	2f 9d       	sub	sp,-28
8000461e:	18 98       	mov	r8,r12
80004620:	ec 18 00 01 	eorl	r8,0x1
80004624:	5c 58       	castu.b	r8
80004626:	c0 30       	breq	8000462c <linearProgram2+0x954>
			{
				return false;
80004628:	30 08       	mov	r8,0
8000462a:	c0 f8       	rjmp	80004648 <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
8000462c:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004630:	2f f8       	sub	r8,-1
80004632:	ef 68 ff db 	st.b	r7[-37],r8
80004636:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000463a:	ef 38 ff 44 	ld.ub	r8,r7[-188]
8000463e:	f0 09 18 00 	cp.b	r9,r8
80004642:	fe 95 fd 90 	brlt	80004162 <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
80004646:	30 18       	mov	r8,1
}
80004648:	10 9c       	mov	r12,r8
8000464a:	2c dd       	sub	sp,-204
8000464c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	3b 6a       	mov	r10,-74

80004654 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004654:	eb cd 40 e0 	pushm	r5-r7,lr
80004658:	1a 97       	mov	r7,sp
8000465a:	20 ed       	sub	sp,56
8000465c:	fe f6 02 e0 	ld.w	r6,pc[736]
80004660:	1e 26       	rsub	r6,pc
80004662:	ef 4c ff d8 	st.w	r7[-40],r12
80004666:	ef 4b ff d4 	st.w	r7[-44],r11
8000466a:	ef 4a ff d0 	st.w	r7[-48],r10
8000466e:	ef 49 ff cc 	st.w	r7[-52],r9
80004672:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
80004676:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000467a:	30 08       	mov	r8,0
8000467c:	f0 09 18 00 	cp.b	r9,r8
80004680:	c3 40       	breq	800046e8 <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004682:	ee fc ff d4 	ld.w	r12,r7[-44]
80004686:	fe b0 f2 eb 	rcall	80002c5c <vector_norm>
8000468a:	18 98       	mov	r8,r12
8000468c:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
80004690:	30 08       	mov	r8,0
80004692:	ef 68 ff f6 	st.b	r7[-10],r8
80004696:	c2 18       	rjmp	800046d8 <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004698:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000469c:	a3 68       	lsl	r8,0x2
8000469e:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046a2:	f2 08 00 05 	add	r5,r9,r8
800046a6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046aa:	a3 68       	lsl	r8,0x2
800046ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800046b0:	f2 08 00 08 	add	r8,r9,r8
800046b4:	70 08       	ld.w	r8,r8[0x0]
800046b6:	ee fb ff f8 	ld.w	r11,r7[-8]
800046ba:	10 9c       	mov	r12,r8
800046bc:	f0 16 00 08 	mcall	r6[32]
800046c0:	18 98       	mov	r8,r12
800046c2:	10 99       	mov	r9,r8
800046c4:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800046cc:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800046ce:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046d2:	2f f8       	sub	r8,-1
800046d4:	ef 68 ff f6 	st.b	r7[-10],r8
800046d8:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046dc:	30 28       	mov	r8,2
800046de:	f0 09 18 00 	cp.b	r9,r8
800046e2:	fe 9a ff db 	brle	80004698 <linearProgram3+0x44>
800046e6:	c6 98       	rjmp	800047b8 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800046e8:	ee fc ff d4 	ld.w	r12,r7[-44]
800046ec:	fe b0 f2 a0 	rcall	80002c2c <vector_norm_sqr>
800046f0:	18 9a       	mov	r10,r12
800046f2:	ee f9 ff d0 	ld.w	r9,r7[-48]
800046f6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046fa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800046fe:	30 18       	mov	r8,1
80004700:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004704:	e0 8c 00 04 	brvs	8000470c <linearProgram3+0xb8>
80004708:	e0 89 00 03 	brgt	8000470e <linearProgram3+0xba>
8000470c:	30 08       	mov	r8,0
8000470e:	5c 58       	castu.b	r8
80004710:	c3 40       	breq	80004778 <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004712:	ee fc ff d4 	ld.w	r12,r7[-44]
80004716:	fe b0 f2 a3 	rcall	80002c5c <vector_norm>
8000471a:	18 98       	mov	r8,r12
8000471c:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
80004720:	30 08       	mov	r8,0
80004722:	ef 68 ff f6 	st.b	r7[-10],r8
80004726:	c2 18       	rjmp	80004768 <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004728:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000472c:	a3 68       	lsl	r8,0x2
8000472e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004732:	f2 08 00 05 	add	r5,r9,r8
80004736:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000473a:	a3 68       	lsl	r8,0x2
8000473c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004740:	f2 08 00 08 	add	r8,r9,r8
80004744:	70 08       	ld.w	r8,r8[0x0]
80004746:	ee fb ff fc 	ld.w	r11,r7[-4]
8000474a:	10 9c       	mov	r12,r8
8000474c:	f0 16 00 08 	mcall	r6[32]
80004750:	18 98       	mov	r8,r12
80004752:	10 99       	mov	r9,r8
80004754:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004758:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000475c:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
8000475e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004762:	2f f8       	sub	r8,-1
80004764:	ef 68 ff f6 	st.b	r7[-10],r8
80004768:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000476c:	30 28       	mov	r8,2
8000476e:	f0 09 18 00 	cp.b	r9,r8
80004772:	fe 9a ff db 	brle	80004728 <linearProgram3+0xd4>
80004776:	c2 18       	rjmp	800047b8 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
80004778:	30 08       	mov	r8,0
8000477a:	ef 68 ff f6 	st.b	r7[-10],r8
8000477e:	c1 68       	rjmp	800047aa <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
80004780:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004784:	a3 68       	lsl	r8,0x2
80004786:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000478a:	f2 08 00 08 	add	r8,r9,r8
8000478e:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004792:	a3 69       	lsl	r9,0x2
80004794:	ee fa ff d4 	ld.w	r10,r7[-44]
80004798:	f4 09 00 09 	add	r9,r10,r9
8000479c:	72 09       	ld.w	r9,r9[0x0]
8000479e:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
800047a0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047a4:	2f f8       	sub	r8,-1
800047a6:	ef 68 ff f6 	st.b	r7[-10],r8
800047aa:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047ae:	30 28       	mov	r8,2
800047b0:	f0 09 18 00 	cp.b	r9,r8
800047b4:	fe 9a ff e6 	brle	80004780 <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800047b8:	30 08       	mov	r8,0
800047ba:	ef 68 ff f7 	st.b	r7[-9],r8
800047be:	ca a8       	rjmp	80004912 <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800047c0:	30 08       	mov	r8,0
800047c2:	ef 68 ff f6 	st.b	r7[-10],r8
800047c6:	c2 78       	rjmp	80004814 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800047c8:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800047cc:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800047d0:	12 98       	mov	r8,r9
800047d2:	a1 78       	lsl	r8,0x1
800047d4:	12 08       	add	r8,r9
800047d6:	a3 78       	lsl	r8,0x3
800047d8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800047dc:	f2 08 00 08 	add	r8,r9,r8
800047e0:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800047e4:	2f d9       	sub	r9,-3
800047e6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800047ea:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047ee:	a3 68       	lsl	r8,0x2
800047f0:	ee fb ff cc 	ld.w	r11,r7[-52]
800047f4:	f6 08 00 08 	add	r8,r11,r8
800047f8:	70 08       	ld.w	r8,r8[0x0]
800047fa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800047fe:	f4 08 15 02 	lsl	r8,r10,0x2
80004802:	ee 08 00 08 	add	r8,r7,r8
80004806:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
8000480a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000480e:	2f f8       	sub	r8,-1
80004810:	ef 68 ff f6 	st.b	r7[-10],r8
80004814:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004818:	30 28       	mov	r8,2
8000481a:	f0 09 18 00 	cp.b	r9,r8
8000481e:	fe 9a ff d5 	brle	800047c8 <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
80004822:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004826:	12 98       	mov	r8,r9
80004828:	a1 78       	lsl	r8,0x1
8000482a:	12 08       	add	r8,r9
8000482c:	a3 78       	lsl	r8,0x3
8000482e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004832:	f2 08 00 08 	add	r8,r9,r8
80004836:	ee c9 00 18 	sub	r9,r7,24
8000483a:	12 9b       	mov	r11,r9
8000483c:	10 9c       	mov	r12,r8
8000483e:	fe b0 f0 27 	rcall	8000288c <scalar_product>
80004842:	18 9a       	mov	r10,r12
80004844:	30 18       	mov	r8,1
80004846:	30 09       	mov	r9,0
80004848:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000484c:	e0 8c 00 04 	brvs	80004854 <linearProgram3+0x200>
80004850:	e0 89 00 03 	brgt	80004856 <linearProgram3+0x202>
80004854:	30 08       	mov	r8,0
80004856:	5c 58       	castu.b	r8
80004858:	c5 80       	breq	80004908 <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000485a:	30 08       	mov	r8,0
8000485c:	ef 68 ff f6 	st.b	r7[-10],r8
80004860:	c1 58       	rjmp	8000488a <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
80004862:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004866:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000486a:	a3 69       	lsl	r9,0x2
8000486c:	ee fa ff cc 	ld.w	r10,r7[-52]
80004870:	f4 09 00 09 	add	r9,r10,r9
80004874:	72 09       	ld.w	r9,r9[0x0]
80004876:	a3 68       	lsl	r8,0x2
80004878:	ee 08 00 08 	add	r8,r7,r8
8000487c:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004880:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004884:	2f f8       	sub	r8,-1
80004886:	ef 68 ff f6 	st.b	r7[-10],r8
8000488a:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000488e:	30 28       	mov	r8,2
80004890:	f0 09 18 00 	cp.b	r9,r8
80004894:	fe 9a ff e7 	brle	80004862 <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
80004898:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000489c:	ef 2b ff f7 	ld.sb	r11,r7[-9]
800048a0:	1a d8       	st.w	--sp,r8
800048a2:	ee f8 ff cc 	ld.w	r8,r7[-52]
800048a6:	ee f9 ff d4 	ld.w	r9,r7[-44]
800048aa:	ee fa ff d0 	ld.w	r10,r7[-48]
800048ae:	ee fc ff d8 	ld.w	r12,r7[-40]
800048b2:	f0 16 01 7c 	mcall	r6[1520]
800048b6:	2f fd       	sub	sp,-4
800048b8:	18 98       	mov	r8,r12
800048ba:	ec 18 00 01 	eorl	r8,0x1
800048be:	5c 58       	castu.b	r8
800048c0:	c2 40       	breq	80004908 <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800048c2:	30 08       	mov	r8,0
800048c4:	ef 68 ff f6 	st.b	r7[-10],r8
800048c8:	c1 48       	rjmp	800048f0 <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800048ca:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048ce:	a3 68       	lsl	r8,0x2
800048d0:	ee f9 ff cc 	ld.w	r9,r7[-52]
800048d4:	10 09       	add	r9,r8
800048d6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048da:	a3 68       	lsl	r8,0x2
800048dc:	ee 08 00 08 	add	r8,r7,r8
800048e0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800048e4:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800048e6:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048ea:	2f f8       	sub	r8,-1
800048ec:	ef 68 ff f6 	st.b	r7[-10],r8
800048f0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800048f4:	30 28       	mov	r8,2
800048f6:	f0 09 18 00 	cp.b	r9,r8
800048fa:	fe 9a ff e8 	brle	800048ca <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
800048fe:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80004902:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80004906:	c1 78       	rjmp	80004934 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
80004908:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000490c:	2f f8       	sub	r8,-1
8000490e:	ef 68 ff f7 	st.b	r7[-9],r8
80004912:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004916:	ec f8 00 00 	ld.w	r8,r6[0]
8000491a:	70 08       	ld.w	r8,r8[0x0]
8000491c:	f1 38 0f bc 	ld.ub	r8,r8[4028]
80004920:	10 39       	cp.w	r9,r8
80004922:	fe 95 ff 4f 	brlt	800047c0 <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
80004926:	ec f8 00 00 	ld.w	r8,r6[0]
8000492a:	70 08       	ld.w	r8,r8[0x0]
8000492c:	f1 38 0f bc 	ld.ub	r8,r8[4028]
80004930:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004934:	10 9c       	mov	r12,r8
80004936:	2f 2d       	sub	sp,-56
80004938:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	44 e4       	lddsp	r4,sp[0x138]

80004940 <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
80004940:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004944:	1a 97       	mov	r7,sp
80004946:	fa cd 01 ec 	sub	sp,sp,492
8000494a:	fe f6 07 7a 	ld.w	r6,pc[1914]
8000494e:	1e 26       	rsub	r6,pc
80004950:	ef 4c fe 20 	st.w	r7[-480],r12
80004954:	16 98       	mov	r8,r11
80004956:	ef 4a fe 18 	st.w	r7[-488],r10
8000495a:	ef 49 fe 14 	st.w	r7[-492],r9
8000495e:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
80004962:	30 08       	mov	r8,0
80004964:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004968:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
8000496c:	ef 68 ff ee 	st.b	r7[-18],r8
80004970:	e0 8f 03 9c 	bral	800050a8 <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004974:	30 08       	mov	r8,0
80004976:	ef 68 ff ed 	st.b	r7[-19],r8
8000497a:	c2 78       	rjmp	800049c8 <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
8000497c:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004980:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004984:	12 98       	mov	r8,r9
80004986:	a1 78       	lsl	r8,0x1
80004988:	12 08       	add	r8,r9
8000498a:	a3 78       	lsl	r8,0x3
8000498c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004990:	f2 08 00 08 	add	r8,r9,r8
80004994:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004998:	2f d9       	sub	r9,-3
8000499a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000499e:	ef 28 ff ed 	ld.sb	r8,r7[-19]
800049a2:	a3 68       	lsl	r8,0x2
800049a4:	ee fb fe 14 	ld.w	r11,r7[-492]
800049a8:	f6 08 00 08 	add	r8,r11,r8
800049ac:	70 08       	ld.w	r8,r8[0x0]
800049ae:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800049b2:	f4 08 15 02 	lsl	r8,r10,0x2
800049b6:	ee 08 00 08 	add	r8,r7,r8
800049ba:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800049be:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800049c2:	2f f8       	sub	r8,-1
800049c4:	ef 68 ff ed 	st.b	r7[-19],r8
800049c8:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800049cc:	30 28       	mov	r8,2
800049ce:	f0 09 18 00 	cp.b	r9,r8
800049d2:	fe 9a ff d5 	brle	8000497c <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800049d6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049da:	12 98       	mov	r8,r9
800049dc:	a1 78       	lsl	r8,0x1
800049de:	12 08       	add	r8,r9
800049e0:	a3 78       	lsl	r8,0x3
800049e2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049e6:	f2 08 00 08 	add	r8,r9,r8
800049ea:	ee c9 01 88 	sub	r9,r7,392
800049ee:	12 9b       	mov	r11,r9
800049f0:	10 9c       	mov	r12,r8
800049f2:	fe b0 ef 4d 	rcall	8000288c <scalar_product>
800049f6:	18 9a       	mov	r10,r12
800049f8:	30 18       	mov	r8,1
800049fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800049fe:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004a02:	e0 8c 00 04 	brvs	80004a0a <linearProgram4+0xca>
80004a06:	e0 89 00 03 	brgt	80004a0c <linearProgram4+0xcc>
80004a0a:	30 08       	mov	r8,0
80004a0c:	5c 58       	castu.b	r8
80004a0e:	e0 80 03 48 	breq	8000509e <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004a12:	30 08       	mov	r8,0
80004a14:	ef 68 ff ef 	st.b	r7[-17],r8
80004a18:	e0 8f 02 98 	bral	80004f48 <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004a1c:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a20:	12 98       	mov	r8,r9
80004a22:	a1 78       	lsl	r8,0x1
80004a24:	12 08       	add	r8,r9
80004a26:	a3 78       	lsl	r8,0x3
80004a28:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a2c:	f2 08 00 08 	add	r8,r9,r8
80004a30:	70 1a       	ld.w	r10,r8[0x4]
80004a32:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a36:	12 98       	mov	r8,r9
80004a38:	a1 78       	lsl	r8,0x1
80004a3a:	12 08       	add	r8,r9
80004a3c:	a3 78       	lsl	r8,0x3
80004a3e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a42:	f2 08 00 08 	add	r8,r9,r8
80004a46:	70 28       	ld.w	r8,r8[0x8]
80004a48:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a4c:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a50:	12 98       	mov	r8,r9
80004a52:	a1 78       	lsl	r8,0x1
80004a54:	12 08       	add	r8,r9
80004a56:	a3 78       	lsl	r8,0x3
80004a58:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a5c:	f2 08 00 08 	add	r8,r9,r8
80004a60:	70 2b       	ld.w	r11,r8[0x8]
80004a62:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a66:	12 98       	mov	r8,r9
80004a68:	a1 78       	lsl	r8,0x1
80004a6a:	12 08       	add	r8,r9
80004a6c:	a3 78       	lsl	r8,0x3
80004a6e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a72:	f2 08 00 08 	add	r8,r9,r8
80004a76:	70 18       	ld.w	r8,r8[0x4]
80004a78:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a7c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a80:	ef 48 fe 3c 	st.w	r7[-452],r8
80004a84:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a88:	12 98       	mov	r8,r9
80004a8a:	a1 78       	lsl	r8,0x1
80004a8c:	12 08       	add	r8,r9
80004a8e:	a3 78       	lsl	r8,0x3
80004a90:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a94:	f2 08 00 08 	add	r8,r9,r8
80004a98:	70 2a       	ld.w	r10,r8[0x8]
80004a9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a9e:	12 98       	mov	r8,r9
80004aa0:	a1 78       	lsl	r8,0x1
80004aa2:	12 08       	add	r8,r9
80004aa4:	a3 78       	lsl	r8,0x3
80004aa6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004aaa:	f2 08 00 08 	add	r8,r9,r8
80004aae:	70 08       	ld.w	r8,r8[0x0]
80004ab0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004ab4:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004ab8:	12 98       	mov	r8,r9
80004aba:	a1 78       	lsl	r8,0x1
80004abc:	12 08       	add	r8,r9
80004abe:	a3 78       	lsl	r8,0x3
80004ac0:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ac4:	f2 08 00 08 	add	r8,r9,r8
80004ac8:	70 0b       	ld.w	r11,r8[0x0]
80004aca:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ace:	12 98       	mov	r8,r9
80004ad0:	a1 78       	lsl	r8,0x1
80004ad2:	12 08       	add	r8,r9
80004ad4:	a3 78       	lsl	r8,0x3
80004ad6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ada:	f2 08 00 08 	add	r8,r9,r8
80004ade:	70 28       	ld.w	r8,r8[0x8]
80004ae0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004ae4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004ae8:	ef 48 fe 40 	st.w	r7[-448],r8
80004aec:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004af0:	12 98       	mov	r8,r9
80004af2:	a1 78       	lsl	r8,0x1
80004af4:	12 08       	add	r8,r9
80004af6:	a3 78       	lsl	r8,0x3
80004af8:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004afc:	f2 08 00 08 	add	r8,r9,r8
80004b00:	70 0a       	ld.w	r10,r8[0x0]
80004b02:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b06:	12 98       	mov	r8,r9
80004b08:	a1 78       	lsl	r8,0x1
80004b0a:	12 08       	add	r8,r9
80004b0c:	a3 78       	lsl	r8,0x3
80004b0e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b12:	f2 08 00 08 	add	r8,r9,r8
80004b16:	70 18       	ld.w	r8,r8[0x4]
80004b18:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b1c:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b20:	12 98       	mov	r8,r9
80004b22:	a1 78       	lsl	r8,0x1
80004b24:	12 08       	add	r8,r9
80004b26:	a3 78       	lsl	r8,0x3
80004b28:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b2c:	f2 08 00 08 	add	r8,r9,r8
80004b30:	70 1b       	ld.w	r11,r8[0x4]
80004b32:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b36:	12 98       	mov	r8,r9
80004b38:	a1 78       	lsl	r8,0x1
80004b3a:	12 08       	add	r8,r9
80004b3c:	a3 78       	lsl	r8,0x3
80004b3e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b42:	f2 08 00 08 	add	r8,r9,r8
80004b46:	70 08       	ld.w	r8,r8[0x0]
80004b48:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b4c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b50:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004b54:	ee c8 01 c4 	sub	r8,r7,452
80004b58:	10 9c       	mov	r12,r8
80004b5a:	fe b0 f0 69 	rcall	80002c2c <vector_norm_sqr>
80004b5e:	18 98       	mov	r8,r12
80004b60:	10 9c       	mov	r12,r8
80004b62:	f0 16 00 03 	mcall	r6[12]
80004b66:	14 98       	mov	r8,r10
80004b68:	16 99       	mov	r9,r11
80004b6a:	30 05       	mov	r5,0
80004b6c:	e0 6a 43 2d 	mov	r10,17197
80004b70:	ea 1a eb 1c 	orh	r10,0xeb1c
80004b74:	e0 6b 36 e2 	mov	r11,14050
80004b78:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004b7c:	f0 16 00 8b 	mcall	r6[556]
80004b80:	18 98       	mov	r8,r12
80004b82:	58 08       	cp.w	r8,0
80004b84:	c0 20       	breq	80004b88 <linearProgram4+0x248>
80004b86:	30 15       	mov	r5,1
80004b88:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004b8c:	c6 50       	breq	80004c56 <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004b8e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b92:	12 98       	mov	r8,r9
80004b94:	a1 78       	lsl	r8,0x1
80004b96:	12 08       	add	r8,r9
80004b98:	a3 78       	lsl	r8,0x3
80004b9a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b9e:	f2 08 00 08 	add	r8,r9,r8
80004ba2:	10 9a       	mov	r10,r8
80004ba4:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ba8:	12 98       	mov	r8,r9
80004baa:	a1 78       	lsl	r8,0x1
80004bac:	12 08       	add	r8,r9
80004bae:	a3 78       	lsl	r8,0x3
80004bb0:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bb4:	f2 08 00 08 	add	r8,r9,r8
80004bb8:	14 9b       	mov	r11,r10
80004bba:	10 9c       	mov	r12,r8
80004bbc:	fe b0 ee 68 	rcall	8000288c <scalar_product>
80004bc0:	18 9a       	mov	r10,r12
80004bc2:	30 18       	mov	r8,1
80004bc4:	30 09       	mov	r9,0
80004bc6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004bca:	e0 8c 00 04 	brvs	80004bd2 <linearProgram4+0x292>
80004bce:	e0 89 00 03 	brgt	80004bd4 <linearProgram4+0x294>
80004bd2:	30 08       	mov	r8,0
80004bd4:	5c 58       	castu.b	r8
80004bd6:	e0 81 01 b3 	brne	80004f3c <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004bda:	30 08       	mov	r8,0
80004bdc:	ef 68 ff ed 	st.b	r7[-19],r8
80004be0:	c3 38       	rjmp	80004c46 <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004be2:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004be6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bea:	12 98       	mov	r8,r9
80004bec:	a1 78       	lsl	r8,0x1
80004bee:	12 08       	add	r8,r9
80004bf0:	a3 78       	lsl	r8,0x3
80004bf2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bf6:	f2 08 00 08 	add	r8,r9,r8
80004bfa:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004bfe:	2f d9       	sub	r9,-3
80004c00:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c04:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c08:	12 98       	mov	r8,r9
80004c0a:	a1 78       	lsl	r8,0x1
80004c0c:	12 08       	add	r8,r9
80004c0e:	a3 78       	lsl	r8,0x3
80004c10:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c14:	f2 08 00 08 	add	r8,r9,r8
80004c18:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c1c:	2f d9       	sub	r9,-3
80004c1e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c22:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004c26:	fc 18 3f 00 	movh	r8,0x3f00
80004c2a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004c2e:	f4 c8 ff fd 	sub	r8,r10,-3
80004c32:	a3 68       	lsl	r8,0x2
80004c34:	ee 08 00 08 	add	r8,r7,r8
80004c38:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004c3c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c40:	2f f8       	sub	r8,-1
80004c42:	ef 68 ff ed 	st.b	r7[-19],r8
80004c46:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c4a:	30 28       	mov	r8,2
80004c4c:	f0 09 18 00 	cp.b	r9,r8
80004c50:	fe 9a ff c9 	brle	80004be2 <linearProgram4+0x2a2>
80004c54:	c5 69       	rjmp	80004f00 <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004c56:	ee fa fe 40 	ld.w	r10,r7[-448]
80004c5a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c5e:	12 98       	mov	r8,r9
80004c60:	a1 78       	lsl	r8,0x1
80004c62:	12 08       	add	r8,r9
80004c64:	a3 78       	lsl	r8,0x3
80004c66:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c6a:	f2 08 00 08 	add	r8,r9,r8
80004c6e:	70 28       	ld.w	r8,r8[0x8]
80004c70:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004c74:	ee fb fe 44 	ld.w	r11,r7[-444]
80004c78:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c7c:	12 98       	mov	r8,r9
80004c7e:	a1 78       	lsl	r8,0x1
80004c80:	12 08       	add	r8,r9
80004c82:	a3 78       	lsl	r8,0x3
80004c84:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c88:	f2 08 00 08 	add	r8,r9,r8
80004c8c:	70 18       	ld.w	r8,r8[0x4]
80004c8e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c92:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c96:	ef 48 fe 30 	st.w	r7[-464],r8
80004c9a:	ee fa fe 44 	ld.w	r10,r7[-444]
80004c9e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ca2:	12 98       	mov	r8,r9
80004ca4:	a1 78       	lsl	r8,0x1
80004ca6:	12 08       	add	r8,r9
80004ca8:	a3 78       	lsl	r8,0x3
80004caa:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cae:	f2 08 00 08 	add	r8,r9,r8
80004cb2:	70 08       	ld.w	r8,r8[0x0]
80004cb4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004cb8:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004cbc:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cc0:	12 98       	mov	r8,r9
80004cc2:	a1 78       	lsl	r8,0x1
80004cc4:	12 08       	add	r8,r9
80004cc6:	a3 78       	lsl	r8,0x3
80004cc8:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ccc:	f2 08 00 08 	add	r8,r9,r8
80004cd0:	70 28       	ld.w	r8,r8[0x8]
80004cd2:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004cd6:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004cda:	ef 48 fe 34 	st.w	r7[-460],r8
80004cde:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004ce2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ce6:	12 98       	mov	r8,r9
80004ce8:	a1 78       	lsl	r8,0x1
80004cea:	12 08       	add	r8,r9
80004cec:	a3 78       	lsl	r8,0x3
80004cee:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cf2:	f2 08 00 08 	add	r8,r9,r8
80004cf6:	70 18       	ld.w	r8,r8[0x4]
80004cf8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004cfc:	ee fb fe 40 	ld.w	r11,r7[-448]
80004d00:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d04:	12 98       	mov	r8,r9
80004d06:	a1 78       	lsl	r8,0x1
80004d08:	12 08       	add	r8,r9
80004d0a:	a3 78       	lsl	r8,0x3
80004d0c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d10:	f2 08 00 08 	add	r8,r9,r8
80004d14:	70 08       	ld.w	r8,r8[0x0]
80004d16:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004d1a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004d1e:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d22:	30 08       	mov	r8,0
80004d24:	ef 68 ff ed 	st.b	r7[-19],r8
80004d28:	c2 e8       	rjmp	80004d84 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004d2a:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d2e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d32:	12 98       	mov	r8,r9
80004d34:	a1 78       	lsl	r8,0x1
80004d36:	12 08       	add	r8,r9
80004d38:	a3 78       	lsl	r8,0x3
80004d3a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d3e:	f2 08 00 08 	add	r8,r9,r8
80004d42:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d46:	2f d9       	sub	r9,-3
80004d48:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d4c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d50:	12 98       	mov	r8,r9
80004d52:	a1 78       	lsl	r8,0x1
80004d54:	12 08       	add	r8,r9
80004d56:	a3 78       	lsl	r8,0x3
80004d58:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d5c:	f2 08 00 08 	add	r8,r9,r8
80004d60:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d64:	2f d9       	sub	r9,-3
80004d66:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d6a:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d6e:	f4 08 15 02 	lsl	r8,r10,0x2
80004d72:	ee 08 00 08 	add	r8,r7,r8
80004d76:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d7a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d7e:	2f f8       	sub	r8,-1
80004d80:	ef 68 ff ed 	st.b	r7[-19],r8
80004d84:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d88:	30 28       	mov	r8,2
80004d8a:	f0 09 18 00 	cp.b	r9,r8
80004d8e:	fe 9a ff ce 	brle	80004d2a <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004d92:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d96:	12 98       	mov	r8,r9
80004d98:	a1 78       	lsl	r8,0x1
80004d9a:	12 08       	add	r8,r9
80004d9c:	a3 78       	lsl	r8,0x3
80004d9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004da2:	f2 08 00 08 	add	r8,r9,r8
80004da6:	10 99       	mov	r9,r8
80004da8:	ee c8 01 dc 	sub	r8,r7,476
80004dac:	12 9b       	mov	r11,r9
80004dae:	10 9c       	mov	r12,r8
80004db0:	fe b0 ed 6e 	rcall	8000288c <scalar_product>
80004db4:	18 98       	mov	r8,r12
80004db6:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004dba:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004dbe:	12 98       	mov	r8,r9
80004dc0:	a1 78       	lsl	r8,0x1
80004dc2:	12 08       	add	r8,r9
80004dc4:	a3 78       	lsl	r8,0x3
80004dc6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004dca:	f2 08 00 08 	add	r8,r9,r8
80004dce:	10 99       	mov	r9,r8
80004dd0:	ee c8 01 d0 	sub	r8,r7,464
80004dd4:	12 9b       	mov	r11,r9
80004dd6:	10 9c       	mov	r12,r8
80004dd8:	fe b0 ed 5a 	rcall	8000288c <scalar_product>
80004ddc:	18 98       	mov	r8,r12
80004dde:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004de2:	30 08       	mov	r8,0
80004de4:	ef 68 ff ed 	st.b	r7[-19],r8
80004de8:	c5 78       	rjmp	80004e96 <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004dea:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004dee:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004df2:	12 98       	mov	r8,r9
80004df4:	a1 78       	lsl	r8,0x1
80004df6:	12 08       	add	r8,r9
80004df8:	a3 78       	lsl	r8,0x3
80004dfa:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004dfe:	f2 08 00 08 	add	r8,r9,r8
80004e02:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e06:	2f d9       	sub	r9,-3
80004e08:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004e0c:	ee fb ff f8 	ld.w	r11,r7[-8]
80004e10:	ee fc ff f4 	ld.w	r12,r7[-12]
80004e14:	f0 16 00 08 	mcall	r6[32]
80004e18:	18 98       	mov	r8,r12
80004e1a:	10 99       	mov	r9,r8
80004e1c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e20:	a3 68       	lsl	r8,0x2
80004e22:	ee 08 00 08 	add	r8,r7,r8
80004e26:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004e2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004e2e:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004e32:	ea c8 ff fd 	sub	r8,r5,-3
80004e36:	a3 68       	lsl	r8,0x2
80004e38:	ee 08 00 08 	add	r8,r7,r8
80004e3c:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004e40:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004e44:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e48:	12 98       	mov	r8,r9
80004e4a:	a1 78       	lsl	r8,0x1
80004e4c:	12 08       	add	r8,r9
80004e4e:	a3 78       	lsl	r8,0x3
80004e50:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e54:	f2 08 00 08 	add	r8,r9,r8
80004e58:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e5c:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004e60:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e64:	12 98       	mov	r8,r9
80004e66:	a1 78       	lsl	r8,0x1
80004e68:	12 08       	add	r8,r9
80004e6a:	a3 78       	lsl	r8,0x3
80004e6c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e70:	f2 08 00 08 	add	r8,r9,r8
80004e74:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e78:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004e7c:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004e80:	f4 08 15 02 	lsl	r8,r10,0x2
80004e84:	ee 08 00 08 	add	r8,r7,r8
80004e88:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004e8c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e90:	2f f8       	sub	r8,-1
80004e92:	ef 68 ff ed 	st.b	r7[-19],r8
80004e96:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e9a:	30 28       	mov	r8,2
80004e9c:	f0 09 18 00 	cp.b	r9,r8
80004ea0:	fe 9a ff a5 	brle	80004dea <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004ea4:	ee c8 01 b8 	sub	r8,r7,440
80004ea8:	10 9c       	mov	r12,r8
80004eaa:	fe b0 ee d9 	rcall	80002c5c <vector_norm>
80004eae:	18 98       	mov	r8,r12
80004eb0:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004eb4:	30 08       	mov	r8,0
80004eb6:	ef 68 ff ed 	st.b	r7[-19],r8
80004eba:	c1 c8       	rjmp	80004ef2 <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004ebc:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004ec0:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ec4:	a3 68       	lsl	r8,0x2
80004ec6:	ee 08 00 08 	add	r8,r7,r8
80004eca:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004ece:	ee fb ff fc 	ld.w	r11,r7[-4]
80004ed2:	10 9c       	mov	r12,r8
80004ed4:	f0 16 00 08 	mcall	r6[32]
80004ed8:	18 98       	mov	r8,r12
80004eda:	10 99       	mov	r9,r8
80004edc:	ea 08 15 02 	lsl	r8,r5,0x2
80004ee0:	ee 08 00 08 	add	r8,r7,r8
80004ee4:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004ee8:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004eec:	2f f8       	sub	r8,-1
80004eee:	ef 68 ff ed 	st.b	r7[-19],r8
80004ef2:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004ef6:	30 28       	mov	r8,2
80004ef8:	f0 09 18 00 	cp.b	r9,r8
80004efc:	fe 9a ff e0 	brle	80004ebc <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004f00:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004f04:	12 98       	mov	r8,r9
80004f06:	a1 78       	lsl	r8,0x1
80004f08:	12 08       	add	r8,r9
80004f0a:	a3 78       	lsl	r8,0x3
80004f0c:	ee 08 00 08 	add	r8,r7,r8
80004f10:	f0 c8 01 7c 	sub	r8,r8,380
80004f14:	10 9a       	mov	r10,r8
80004f16:	ee cb 01 b8 	sub	r11,r7,440
80004f1a:	f4 c8 00 00 	sub	r8,r10,0
80004f1e:	f6 c9 00 00 	sub	r9,r11,0
80004f22:	72 0c       	ld.w	r12,r9[0x0]
80004f24:	91 0c       	st.w	r8[0x0],r12
80004f26:	72 1c       	ld.w	r12,r9[0x4]
80004f28:	91 1c       	st.w	r8[0x4],r12
80004f2a:	72 2c       	ld.w	r12,r9[0x8]
80004f2c:	91 2c       	st.w	r8[0x8],r12
80004f2e:	72 39       	ld.w	r9,r9[0xc]
80004f30:	91 39       	st.w	r8[0xc],r9
80004f32:	f6 e8 00 10 	ld.d	r8,r11[16]
80004f36:	f4 e9 00 10 	st.d	r10[16],r8
80004f3a:	c0 28       	rjmp	80004f3e <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004f3c:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004f3e:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f42:	2f f8       	sub	r8,-1
80004f44:	ef 68 ff ef 	st.b	r7[-17],r8
80004f48:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004f4c:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f50:	f0 09 18 00 	cp.b	r9,r8
80004f54:	fe 95 fd 64 	brlt	80004a1c <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f58:	30 08       	mov	r8,0
80004f5a:	ef 68 ff ed 	st.b	r7[-19],r8
80004f5e:	c1 58       	rjmp	80004f88 <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004f60:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f64:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f68:	a3 69       	lsl	r9,0x2
80004f6a:	ee fa fe 14 	ld.w	r10,r7[-492]
80004f6e:	f4 09 00 09 	add	r9,r10,r9
80004f72:	72 09       	ld.w	r9,r9[0x0]
80004f74:	a3 68       	lsl	r8,0x2
80004f76:	ee 08 00 08 	add	r8,r7,r8
80004f7a:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f7e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f82:	2f f8       	sub	r8,-1
80004f84:	ef 68 ff ed 	st.b	r7[-19],r8
80004f88:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f8c:	30 28       	mov	r8,2
80004f8e:	f0 09 18 00 	cp.b	r9,r8
80004f92:	fe 9a ff e7 	brle	80004f60 <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004f96:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f9a:	12 98       	mov	r8,r9
80004f9c:	a1 78       	lsl	r8,0x1
80004f9e:	12 08       	add	r8,r9
80004fa0:	a3 78       	lsl	r8,0x3
80004fa2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004fa6:	f2 08 00 08 	add	r8,r9,r8
80004faa:	10 9b       	mov	r11,r8
80004fac:	ee cc 01 7c 	sub	r12,r7,380
80004fb0:	30 18       	mov	r8,1
80004fb2:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004fb6:	ee fa fe 18 	ld.w	r10,r7[-488]
80004fba:	f0 16 01 08 	mcall	r6[1056]
80004fbe:	18 9a       	mov	r10,r12
80004fc0:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004fc4:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004fc8:	30 18       	mov	r8,1
80004fca:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fce:	e0 8c 00 03 	brvs	80004fd4 <linearProgram4+0x694>
80004fd2:	c0 25       	brlt	80004fd6 <linearProgram4+0x696>
80004fd4:	30 08       	mov	r8,0
80004fd6:	5c 58       	castu.b	r8
80004fd8:	c1 f0       	breq	80005016 <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004fda:	30 08       	mov	r8,0
80004fdc:	ef 68 ff ed 	st.b	r7[-19],r8
80004fe0:	c1 48       	rjmp	80005008 <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004fe2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004fe6:	a3 68       	lsl	r8,0x2
80004fe8:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004fec:	10 09       	add	r9,r8
80004fee:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ff2:	a3 68       	lsl	r8,0x2
80004ff4:	ee 08 00 08 	add	r8,r7,r8
80004ff8:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80004ffc:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80004ffe:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005002:	2f f8       	sub	r8,-1
80005004:	ef 68 ff ed 	st.b	r7[-19],r8
80005008:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000500c:	30 28       	mov	r8,2
8000500e:	f0 09 18 00 	cp.b	r9,r8
80005012:	fe 9a ff e8 	brle	80004fe2 <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80005016:	30 08       	mov	r8,0
80005018:	ef 68 ff ed 	st.b	r7[-19],r8
8000501c:	c2 78       	rjmp	8000506a <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
8000501e:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80005022:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80005026:	12 98       	mov	r8,r9
80005028:	a1 78       	lsl	r8,0x1
8000502a:	12 08       	add	r8,r9
8000502c:	a3 78       	lsl	r8,0x3
8000502e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80005032:	f2 08 00 08 	add	r8,r9,r8
80005036:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000503a:	2f d9       	sub	r9,-3
8000503c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005040:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80005044:	a3 68       	lsl	r8,0x2
80005046:	ee fb fe 14 	ld.w	r11,r7[-492]
8000504a:	f6 08 00 08 	add	r8,r11,r8
8000504e:	70 08       	ld.w	r8,r8[0x0]
80005050:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005054:	f4 08 15 02 	lsl	r8,r10,0x2
80005058:	ee 08 00 08 	add	r8,r7,r8
8000505c:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80005060:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005064:	2f f8       	sub	r8,-1
80005066:	ef 68 ff ed 	st.b	r7[-19],r8
8000506a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8000506e:	30 28       	mov	r8,2
80005070:	f0 09 18 00 	cp.b	r9,r8
80005074:	fe 9a ff d5 	brle	8000501e <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
80005078:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000507c:	12 98       	mov	r8,r9
8000507e:	a1 78       	lsl	r8,0x1
80005080:	12 08       	add	r8,r9
80005082:	a3 78       	lsl	r8,0x3
80005084:	ee f9 fe 20 	ld.w	r9,r7[-480]
80005088:	f2 08 00 08 	add	r8,r9,r8
8000508c:	ee c9 01 a0 	sub	r9,r7,416
80005090:	12 9b       	mov	r11,r9
80005092:	10 9c       	mov	r12,r8
80005094:	fe b0 eb fc 	rcall	8000288c <scalar_product>
80005098:	18 98       	mov	r8,r12
8000509a:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
8000509e:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800050a2:	2f f8       	sub	r8,-1
800050a4:	ef 68 ff ee 	st.b	r7[-18],r8
800050a8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800050ac:	ec f8 00 00 	ld.w	r8,r6[0]
800050b0:	70 08       	ld.w	r8,r8[0x0]
800050b2:	f1 38 0f bc 	ld.ub	r8,r8[4028]
800050b6:	10 39       	cp.w	r9,r8
800050b8:	fe 95 fc 5e 	brlt	80004974 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
800050bc:	28 5d       	sub	sp,-492
800050be:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800050c2:	00 00       	add	r0,r0
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	47 d2       	lddsp	r2,sp[0x1f4]

800050c8 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
800050c8:	eb cd 40 80 	pushm	r7,lr
800050cc:	1a 97       	mov	r7,sp
800050ce:	20 2d       	sub	sp,8
800050d0:	ef 4c ff fc 	st.w	r7[-4],r12
800050d4:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
800050d8:	30 18       	mov	r8,1
800050da:	ee fa ff fc 	ld.w	r10,r7[-4]
800050de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050e2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800050e6:	e0 8c 00 04 	brvs	800050ee <clip+0x26>
800050ea:	e0 89 00 03 	brgt	800050f0 <clip+0x28>
800050ee:	30 08       	mov	r8,0
800050f0:	5c 58       	castu.b	r8
800050f2:	c0 40       	breq	800050fa <clip+0x32>
800050f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050f8:	c1 98       	rjmp	8000512a <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
800050fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050fe:	10 9a       	mov	r10,r8
80005100:	ee 1a 80 00 	eorh	r10,0x8000
80005104:	30 18       	mov	r8,1
80005106:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000510a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000510e:	e0 8c 00 04 	brvs	80005116 <clip+0x4e>
80005112:	e0 89 00 03 	brgt	80005118 <clip+0x50>
80005116:	30 08       	mov	r8,0
80005118:	5c 58       	castu.b	r8
8000511a:	c0 60       	breq	80005126 <clip+0x5e>
8000511c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005120:	ee 18 80 00 	eorh	r8,0x8000
80005124:	c0 38       	rjmp	8000512a <clip+0x62>
	return input_value;
80005126:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000512a:	10 9c       	mov	r12,r8
8000512c:	2f ed       	sub	sp,-8
8000512e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005132 <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
80005132:	eb cd 40 e0 	pushm	r5-r7,lr
80005136:	1a 97       	mov	r7,sp
80005138:	20 2d       	sub	sp,8
8000513a:	4a 16       	lddpc	r6,800051bc <soft_zone+0x8a>
8000513c:	1e 26       	rsub	r6,pc
8000513e:	ef 4c ff fc 	st.w	r7[-4],r12
80005142:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
80005146:	ee fc ff f8 	ld.w	r12,r7[-8]
8000514a:	f0 16 00 03 	mcall	r6[12]
8000514e:	30 05       	mov	r5,0
80005150:	e0 68 af 48 	mov	r8,44872
80005154:	ea 18 9a bc 	orh	r8,0x9abc
80005158:	e0 69 d7 f2 	mov	r9,55282
8000515c:	ea 19 3e 7a 	orh	r9,0x3e7a
80005160:	f0 16 00 20 	mcall	r6[128]
80005164:	18 98       	mov	r8,r12
80005166:	58 08       	cp.w	r8,0
80005168:	c0 20       	breq	8000516c <soft_zone+0x3a>
8000516a:	30 15       	mov	r5,1
8000516c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005170:	c0 40       	breq	80005178 <soft_zone+0x46>
80005172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005176:	c1 e8       	rjmp	800051b2 <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
80005178:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000517c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005180:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005184:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005188:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000518c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005190:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005194:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005198:	ee fb ff fc 	ld.w	r11,r7[-4]
8000519c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051a0:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800051a4:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800051a8:	12 9b       	mov	r11,r9
800051aa:	10 9c       	mov	r12,r8
800051ac:	f0 16 00 08 	mcall	r6[32]
800051b0:	18 98       	mov	r8,r12
	}
};
800051b2:	10 9c       	mov	r12,r8
800051b4:	2f ed       	sub	sp,-8
800051b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800051ba:	00 00       	add	r0,r0
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	4f c0       	lddpc	r0,800053ac <initDiff+0x1e>

800051c0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800051c0:	eb cd 40 c0 	pushm	r6-r7,lr
800051c4:	1a 97       	mov	r7,sp
800051c6:	20 6d       	sub	sp,24
800051c8:	49 e6       	lddpc	r6,80005240 <interpolate+0x80>
800051ca:	1e 26       	rsub	r6,pc
800051cc:	ef 4c ff f8 	st.w	r7[-8],r12
800051d0:	ef 4b ff f4 	st.w	r7[-12],r11
800051d4:	ef 4a ff f0 	st.w	r7[-16],r10
800051d8:	ef 49 ff ec 	st.w	r7[-20],r9
800051dc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800051e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051e8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800051ec:	c0 41       	brne	800051f4 <interpolate+0x34>
	{
		return y1;
800051ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051f2:	c2 38       	rjmp	80005238 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800051f4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800051f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051fc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005200:	ee fa ff f8 	ld.w	r10,r7[-8]
80005204:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005208:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000520c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005210:	ee fa ff f0 	ld.w	r10,r7[-16]
80005214:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005218:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000521c:	12 9b       	mov	r11,r9
8000521e:	10 9c       	mov	r12,r8
80005220:	f0 16 00 08 	mcall	r6[32]
80005224:	18 98       	mov	r8,r12
80005226:	10 99       	mov	r9,r8
80005228:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000522c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005230:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005234:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80005238:	10 9c       	mov	r12,r8
8000523a:	2f ad       	sub	sp,-24
8000523c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005240:	80 00       	ld.sh	r0,r0[0x0]
80005242:	50 4e       	stdsp	sp[0x10],lr

80005244 <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
80005244:	eb cd 40 e0 	pushm	r5-r7,lr
80005248:	1a 97       	mov	r7,sp
8000524a:	21 1d       	sub	sp,68
8000524c:	49 e6       	lddpc	r6,800052c4 <passthroughController+0x80>
8000524e:	1e 26       	rsub	r6,pc
80005250:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
80005252:	fc 18 3f 80 	movh	r8,0x3f80
80005256:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
8000525a:	f0 16 00 4b 	mcall	r6[300]
8000525e:	18 98       	mov	r8,r12
80005260:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
80005264:	e0 68 40 00 	mov	r8,16384
80005268:	ea 18 c6 1c 	orh	r8,0xc61c
8000526c:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
80005270:	e0 68 40 00 	mov	r8,16384
80005274:	ea 18 46 1c 	orh	r8,0x461c
80005278:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
8000527c:	30 08       	mov	r8,0
8000527e:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
80005282:	30 08       	mov	r8,0
80005284:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
80005288:	ee c8 00 44 	sub	r8,r7,68
8000528c:	2e 08       	sub	r8,-32
8000528e:	30 09       	mov	r9,0
80005290:	30 0a       	mov	r10,0
80005292:	30 0b       	mov	r11,0
80005294:	10 9c       	mov	r12,r8
80005296:	f0 16 01 42 	mcall	r6[1288]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
8000529a:	ee c8 00 44 	sub	r8,r7,68
8000529e:	2f 48       	sub	r8,-12
800052a0:	30 09       	mov	r9,0
800052a2:	30 0a       	mov	r10,0
800052a4:	30 0b       	mov	r11,0
800052a6:	10 9c       	mov	r12,r8
800052a8:	f0 16 01 8b 	mcall	r6[1580]
	return out;
800052ac:	0a 98       	mov	r8,r5
800052ae:	ee c9 00 44 	sub	r9,r7,68
800052b2:	34 4a       	mov	r10,68
800052b4:	12 9b       	mov	r11,r9
800052b6:	10 9c       	mov	r12,r8
800052b8:	f0 16 00 1e 	mcall	r6[120]
}
800052bc:	0a 9c       	mov	r12,r5
800052be:	2e fd       	sub	sp,-68
800052c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052c4:	80 00       	ld.sh	r0,r0[0x0]
800052c6:	50 d2       	stdsp	sp[0x34],r2

800052c8 <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
800052c8:	eb cd 40 c0 	pushm	r6-r7,lr
800052cc:	1a 97       	mov	r7,sp
800052ce:	20 3d       	sub	sp,12
800052d0:	49 76       	lddpc	r6,8000532c <integrate+0x64>
800052d2:	1e 26       	rsub	r6,pc
800052d4:	ef 4c ff fc 	st.w	r7[-4],r12
800052d8:	ef 4b ff f8 	st.w	r7[-8],r11
800052dc:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
800052e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052e4:	70 39       	ld.w	r9,r8[0xc]
800052e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052ea:	70 2a       	ld.w	r10,r8[0x8]
800052ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052f0:	70 0b       	ld.w	r11,r8[0x0]
800052f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800052f6:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
800052fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052fe:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005302:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005306:	12 9b       	mov	r11,r9
80005308:	10 9c       	mov	r12,r8
8000530a:	cd fe       	rcall	800050c8 <clip>
8000530c:	18 99       	mov	r9,r12
8000530e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005312:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
80005314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005318:	70 19       	ld.w	r9,r8[0x4]
8000531a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531e:	70 28       	ld.w	r8,r8[0x8]
80005320:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
80005324:	10 9c       	mov	r12,r8
80005326:	2f dd       	sub	sp,-12
80005328:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	51 56       	stdsp	sp[0x54],r6

80005330 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
80005330:	eb cd 40 80 	pushm	r7,lr
80005334:	1a 97       	mov	r7,sp
80005336:	20 4d       	sub	sp,16
80005338:	ef 4c ff fc 	st.w	r7[-4],r12
8000533c:	ef 4b ff f8 	st.w	r7[-8],r11
80005340:	ef 4a ff f4 	st.w	r7[-12],r10
80005344:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
80005348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000534c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005350:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
80005352:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005356:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000535a:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
8000535c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005364:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
80005366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000536a:	30 09       	mov	r9,0
8000536c:	91 29       	st.w	r8[0x8],r9

}
8000536e:	2f cd       	sub	sp,-16
80005370:	e3 cd 80 80 	ldm	sp++,r7,pc

80005374 <resetInt>:
void resetInt(Integrator_t *integrator) {
80005374:	eb cd 40 80 	pushm	r7,lr
80005378:	1a 97       	mov	r7,sp
8000537a:	20 1d       	sub	sp,4
8000537c:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
80005380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005384:	30 09       	mov	r9,0
80005386:	91 29       	st.w	r8[0x8],r9
}
80005388:	2f fd       	sub	sp,-4
8000538a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000538e <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
8000538e:	eb cd 40 80 	pushm	r7,lr
80005392:	1a 97       	mov	r7,sp
80005394:	20 4d       	sub	sp,16
80005396:	ef 4c ff fc 	st.w	r7[-4],r12
8000539a:	ef 4b ff f8 	st.w	r7[-8],r11
8000539e:	ef 4a ff f4 	st.w	r7[-12],r10
800053a2:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
800053a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800053ae:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
800053b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800053b8:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
800053ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800053c2:	91 39       	st.w	r8[0xc],r9
}
800053c4:	2f cd       	sub	sp,-16
800053c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800053ca <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
800053ca:	eb cd 40 e0 	pushm	r5-r7,lr
800053ce:	1a 97       	mov	r7,sp
800053d0:	20 4d       	sub	sp,16
800053d2:	4a 66       	lddpc	r6,80005468 <differentiate+0x9e>
800053d4:	1e 26       	rsub	r6,pc
800053d6:	ef 4c ff f8 	st.w	r7[-8],r12
800053da:	ef 4b ff f4 	st.w	r7[-12],r11
800053de:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
800053e2:	30 08       	mov	r8,0
800053e4:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
800053e8:	ee fc ff f0 	ld.w	r12,r7[-16]
800053ec:	f0 16 00 03 	mcall	r6[12]
800053f0:	30 05       	mov	r5,0
800053f2:	e0 68 ed 8d 	mov	r8,60813
800053f6:	ea 18 a0 b5 	orh	r8,0xa0b5
800053fa:	e0 69 c6 f7 	mov	r9,50935
800053fe:	ea 19 3e b0 	orh	r9,0x3eb0
80005402:	f0 16 00 20 	mcall	r6[128]
80005406:	18 98       	mov	r8,r12
80005408:	58 08       	cp.w	r8,0
8000540a:	c0 20       	breq	8000540e <differentiate+0x44>
8000540c:	30 15       	mov	r5,1
8000540e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005412:	c0 50       	breq	8000541c <differentiate+0x52>
		output=0.0; 
80005414:	30 08       	mov	r8,0
80005416:	ef 48 ff fc 	st.w	r7[-4],r8
8000541a:	c1 c8       	rjmp	80005452 <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
8000541c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005420:	70 35       	ld.w	r5,r8[0xc]
80005422:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005426:	70 09       	ld.w	r9,r8[0x0]
80005428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000542c:	70 18       	ld.w	r8,r8[0x4]
8000542e:	ee fa ff f4 	ld.w	r10,r7[-12]
80005432:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005436:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000543a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000543e:	10 9c       	mov	r12,r8
80005440:	f0 16 00 08 	mcall	r6[32]
80005444:	18 98       	mov	r8,r12
80005446:	0a 9b       	mov	r11,r5
80005448:	10 9c       	mov	r12,r8
8000544a:	c3 fe       	rcall	800050c8 <clip>
8000544c:	18 98       	mov	r8,r12
8000544e:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
80005452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005456:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000545a:	91 19       	st.w	r8[0x4],r9
	return output;
8000545c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005460:	10 9c       	mov	r12,r8
80005462:	2f cd       	sub	sp,-16
80005464:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005468:	80 00       	ld.sh	r0,r0[0x0]
8000546a:	52 58       	stdsp	sp[0x94],r8

8000546c <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
8000546c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005470:	1a 97       	mov	r7,sp
80005472:	20 3d       	sub	sp,12
80005474:	4c 36       	lddpc	r6,80005580 <pid_update+0x114>
80005476:	1e 26       	rsub	r6,pc
80005478:	ef 4c ff f8 	st.w	r7[-8],r12
8000547c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
80005480:	f0 16 00 4b 	mcall	r6[300]
80005484:	18 98       	mov	r8,r12
80005486:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
8000548a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000548e:	71 08       	ld.w	r8,r8[0x40]
80005490:	10 9b       	mov	r11,r8
80005492:	ee fc ff f4 	ld.w	r12,r7[-12]
80005496:	c4 ee       	rcall	80005132 <soft_zone>
80005498:	18 99       	mov	r9,r12
8000549a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000549e:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
800054a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a4:	70 e8       	ld.w	r8,r8[0x38]
800054a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054aa:	f2 08 01 08 	sub	r8,r9,r8
800054ae:	10 9c       	mov	r12,r8
800054b0:	f0 16 00 b4 	mcall	r6[720]
800054b4:	18 99       	mov	r9,r12
800054b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054ba:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
800054bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054c4:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800054c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054ca:	70 05       	ld.w	r5,r8[0x0]
800054cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054d0:	70 d3       	ld.w	r3,r8[0x34]
800054d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054d6:	70 fa       	ld.w	r10,r8[0x3c]
800054d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054dc:	70 d9       	ld.w	r9,r8[0x34]
800054de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054e2:	2f 48       	sub	r8,-12
800054e4:	12 9b       	mov	r11,r9
800054e6:	10 9c       	mov	r12,r8
800054e8:	f0 16 00 d6 	mcall	r6[856]
800054ec:	18 98       	mov	r8,r12
800054ee:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800054f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054f6:	70 fa       	ld.w	r10,r8[0x3c]
800054f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fc:	70 d9       	ld.w	r9,r8[0x34]
800054fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005502:	2e 08       	sub	r8,-32
80005504:	12 9b       	mov	r11,r9
80005506:	10 9c       	mov	r12,r8
80005508:	f0 16 01 05 	mcall	r6[1044]
8000550c:	18 98       	mov	r8,r12
8000550e:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005512:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000551a:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
8000551c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005520:	70 ca       	ld.w	r10,r8[0x30]
80005522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005526:	70 19       	ld.w	r9,r8[0x4]
80005528:	30 18       	mov	r8,1
8000552a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000552e:	e0 8c 00 03 	brvs	80005534 <pid_update+0xc8>
80005532:	c0 25       	brlt	80005536 <pid_update+0xca>
80005534:	30 08       	mov	r8,0
80005536:	5c 58       	castu.b	r8
80005538:	c0 70       	breq	80005546 <pid_update+0xda>
8000553a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000553e:	70 19       	ld.w	r9,r8[0x4]
80005540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005544:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
80005546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000554a:	70 ca       	ld.w	r10,r8[0x30]
8000554c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005550:	70 29       	ld.w	r9,r8[0x8]
80005552:	30 18       	mov	r8,1
80005554:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005558:	e0 8c 00 04 	brvs	80005560 <pid_update+0xf4>
8000555c:	e0 89 00 03 	brgt	80005562 <pid_update+0xf6>
80005560:	30 08       	mov	r8,0
80005562:	5c 58       	castu.b	r8
80005564:	c0 70       	breq	80005572 <pid_update+0x106>
80005566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000556a:	70 29       	ld.w	r9,r8[0x8]
8000556c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005570:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
80005572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005576:	70 c8       	ld.w	r8,r8[0x30]
}
80005578:	10 9c       	mov	r12,r8
8000557a:	2f dd       	sub	sp,-12
8000557c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005580:	80 00       	ld.sh	r0,r0[0x0]
80005582:	52 fa       	stdsp	sp[0xbc],r10

80005584 <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
80005584:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005588:	1a 97       	mov	r7,sp
8000558a:	20 3d       	sub	sp,12
8000558c:	4b b6       	lddpc	r6,80005678 <pid_update_dt+0xf4>
8000558e:	1e 26       	rsub	r6,pc
80005590:	ef 4c ff fc 	st.w	r7[-4],r12
80005594:	ef 4b ff f8 	st.w	r7[-8],r11
80005598:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
8000559c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800055a4:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
800055a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800055ae:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
800055b0:	f0 16 00 4b 	mcall	r6[300]
800055b4:	18 99       	mov	r9,r12
800055b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ba:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800055bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055c0:	70 05       	ld.w	r5,r8[0x0]
800055c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055c6:	70 d3       	ld.w	r3,r8[0x34]
800055c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055cc:	70 fa       	ld.w	r10,r8[0x3c]
800055ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d2:	70 d9       	ld.w	r9,r8[0x34]
800055d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d8:	2f 48       	sub	r8,-12
800055da:	12 9b       	mov	r11,r9
800055dc:	10 9c       	mov	r12,r8
800055de:	f0 16 00 d6 	mcall	r6[856]
800055e2:	18 98       	mov	r8,r12
800055e4:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800055e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ec:	70 fa       	ld.w	r10,r8[0x3c]
800055ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f2:	70 d9       	ld.w	r9,r8[0x34]
800055f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f8:	2e 08       	sub	r8,-32
800055fa:	12 9b       	mov	r11,r9
800055fc:	10 9c       	mov	r12,r8
800055fe:	f0 16 01 05 	mcall	r6[1044]
80005602:	18 98       	mov	r8,r12
80005604:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005608:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000560c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005610:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005616:	70 ca       	ld.w	r10,r8[0x30]
80005618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561c:	70 19       	ld.w	r9,r8[0x4]
8000561e:	30 18       	mov	r8,1
80005620:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005624:	e0 8c 00 03 	brvs	8000562a <pid_update_dt+0xa6>
80005628:	c0 25       	brlt	8000562c <pid_update_dt+0xa8>
8000562a:	30 08       	mov	r8,0
8000562c:	5c 58       	castu.b	r8
8000562e:	c0 70       	breq	8000563c <pid_update_dt+0xb8>
80005630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005634:	70 19       	ld.w	r9,r8[0x4]
80005636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000563a:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
8000563c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005640:	70 ca       	ld.w	r10,r8[0x30]
80005642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005646:	70 29       	ld.w	r9,r8[0x8]
80005648:	30 18       	mov	r8,1
8000564a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000564e:	e0 8c 00 04 	brvs	80005656 <pid_update_dt+0xd2>
80005652:	e0 89 00 03 	brgt	80005658 <pid_update_dt+0xd4>
80005656:	30 08       	mov	r8,0
80005658:	5c 58       	castu.b	r8
8000565a:	c0 70       	breq	80005668 <pid_update_dt+0xe4>
8000565c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005660:	70 29       	ld.w	r9,r8[0x8]
80005662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005666:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
80005668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000566c:	70 c8       	ld.w	r8,r8[0x30]
}
8000566e:	10 9c       	mov	r12,r8
80005670:	2f dd       	sub	sp,-12
80005672:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005676:	00 00       	add	r0,r0
80005678:	80 00       	ld.sh	r0,r0[0x0]
8000567a:	54 12       	stdsp	sp[0x104],r2

8000567c <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000567c:	eb cd 40 80 	pushm	r7,lr
80005680:	1a 97       	mov	r7,sp
80005682:	20 5d       	sub	sp,20
80005684:	18 9a       	mov	r10,r12
80005686:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000568a:	30 08       	mov	r8,0
8000568c:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80005690:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005694:	70 08       	ld.w	r8,r8[0x0]
80005696:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000569a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000569e:	2f c8       	sub	r8,-4
800056a0:	70 08       	ld.w	r8,r8[0x0]
800056a2:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
800056a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056aa:	2f 88       	sub	r8,-8
800056ac:	70 08       	ld.w	r8,r8[0x0]
800056ae:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
800056b2:	14 98       	mov	r8,r10
800056b4:	ee c9 00 10 	sub	r9,r7,16
800056b8:	20 08       	sub	r8,0
800056ba:	20 09       	sub	r9,0
800056bc:	72 0b       	ld.w	r11,r9[0x0]
800056be:	91 0b       	st.w	r8[0x0],r11
800056c0:	72 1b       	ld.w	r11,r9[0x4]
800056c2:	91 1b       	st.w	r8[0x4],r11
800056c4:	72 2b       	ld.w	r11,r9[0x8]
800056c6:	91 2b       	st.w	r8[0x8],r11
800056c8:	72 39       	ld.w	r9,r9[0xc]
800056ca:	91 39       	st.w	r8[0xc],r9
}
800056cc:	14 9c       	mov	r12,r10
800056ce:	2f bd       	sub	sp,-20
800056d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800056d4 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
800056d4:	eb cd 40 80 	pushm	r7,lr
800056d8:	1a 97       	mov	r7,sp
800056da:	20 3d       	sub	sp,12
800056dc:	ef 4c ff f8 	st.w	r7[-8],r12
800056e0:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
800056e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056e8:	70 09       	ld.w	r9,r8[0x0]
800056ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800056ee:	70 08       	ld.w	r8,r8[0x0]
800056f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800056f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056f8:	2f c8       	sub	r8,-4
800056fa:	70 0a       	ld.w	r10,r8[0x0]
800056fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005700:	2f c8       	sub	r8,-4
80005702:	70 08       	ld.w	r8,r8[0x0]
80005704:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005708:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000570c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005710:	2f 88       	sub	r8,-8
80005712:	70 0a       	ld.w	r10,r8[0x0]
80005714:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005718:	2f 88       	sub	r8,-8
8000571a:	70 08       	ld.w	r8,r8[0x0]
8000571c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005720:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005724:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80005728:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000572c:	10 9c       	mov	r12,r8
8000572e:	2f dd       	sub	sp,-12
80005730:	e3 cd 80 80 	ldm	sp++,r7,pc

80005734 <cross_product>:


void static inline cross_product(const float u[], const float v[], float out[])
{
80005734:	eb cd 40 80 	pushm	r7,lr
80005738:	1a 97       	mov	r7,sp
8000573a:	20 3d       	sub	sp,12
8000573c:	ef 4c ff fc 	st.w	r7[-4],r12
80005740:	ef 4b ff f8 	st.w	r7[-8],r11
80005744:	ef 4a ff f4 	st.w	r7[-12],r10
	out[0] = u[1] * v[2] - u[2] * v[1];
80005748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000574c:	2f c8       	sub	r8,-4
8000574e:	70 09       	ld.w	r9,r8[0x0]
80005750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005754:	2f 88       	sub	r8,-8
80005756:	70 08       	ld.w	r8,r8[0x0]
80005758:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000575c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005760:	2f 88       	sub	r8,-8
80005762:	70 0a       	ld.w	r10,r8[0x0]
80005764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005768:	2f c8       	sub	r8,-4
8000576a:	70 08       	ld.w	r8,r8[0x0]
8000576c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005770:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005774:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005778:	91 09       	st.w	r8[0x0],r9
	out[1] = u[2] * v[0] - u[0] * v[2];
8000577a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000577e:	2f c8       	sub	r8,-4
80005780:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005784:	2f 89       	sub	r9,-8
80005786:	72 0a       	ld.w	r10,r9[0x0]
80005788:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000578c:	72 09       	ld.w	r9,r9[0x0]
8000578e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005792:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005796:	72 0b       	ld.w	r11,r9[0x0]
80005798:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000579c:	2f 89       	sub	r9,-8
8000579e:	72 09       	ld.w	r9,r9[0x0]
800057a0:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800057a4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800057a8:	91 09       	st.w	r8[0x0],r9
	out[2] = u[0] * v[1] - u[1] * v[0];
800057aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800057ae:	2f 88       	sub	r8,-8
800057b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057b4:	72 0a       	ld.w	r10,r9[0x0]
800057b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800057ba:	2f c9       	sub	r9,-4
800057bc:	72 09       	ld.w	r9,r9[0x0]
800057be:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800057c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057c6:	2f c9       	sub	r9,-4
800057c8:	72 0b       	ld.w	r11,r9[0x0]
800057ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800057ce:	72 09       	ld.w	r9,r9[0x0]
800057d0:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800057d4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800057d8:	91 09       	st.w	r8[0x0],r9
}
800057da:	2f dd       	sub	sp,-12
800057dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800057e0 <quat_multi>:


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800057e0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800057e4:	1a 97       	mov	r7,sp
800057e6:	20 7d       	sub	sp,28
800057e8:	4b d6       	lddpc	r6,800058dc <quat_multi+0xfc>
800057ea:	1e 26       	rsub	r6,pc
800057ec:	ee c8 ff ec 	sub	r8,r7,-20
800057f0:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800057f2:	70 2a       	ld.w	r10,r8[0x8]
800057f4:	70 79       	ld.w	r9,r8[0x1c]
800057f6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800057fa:	70 3b       	ld.w	r11,r8[0xc]
800057fc:	70 69       	ld.w	r9,r8[0x18]
800057fe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005802:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005806:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000580a:	70 3a       	ld.w	r10,r8[0xc]
8000580c:	70 59       	ld.w	r9,r8[0x14]
8000580e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005812:	70 1b       	ld.w	r11,r8[0x4]
80005814:	70 79       	ld.w	r9,r8[0x1c]
80005816:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000581a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000581e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
80005822:	70 1a       	ld.w	r10,r8[0x4]
80005824:	70 69       	ld.w	r9,r8[0x18]
80005826:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000582a:	70 2b       	ld.w	r11,r8[0x8]
8000582c:	70 59       	ld.w	r9,r8[0x14]
8000582e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80005832:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005836:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000583a:	70 4a       	ld.w	r10,r8[0x10]
8000583c:	70 19       	ld.w	r9,r8[0x4]
8000583e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005842:	70 0b       	ld.w	r11,r8[0x0]
80005844:	70 59       	ld.w	r9,r8[0x14]
80005846:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000584a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000584e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005852:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80005856:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000585a:	70 4a       	ld.w	r10,r8[0x10]
8000585c:	70 29       	ld.w	r9,r8[0x8]
8000585e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005862:	70 0b       	ld.w	r11,r8[0x0]
80005864:	70 69       	ld.w	r9,r8[0x18]
80005866:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000586a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000586e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005872:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80005876:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000587a:	70 4a       	ld.w	r10,r8[0x10]
8000587c:	70 39       	ld.w	r9,r8[0xc]
8000587e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005882:	70 0b       	ld.w	r11,r8[0x0]
80005884:	70 79       	ld.w	r9,r8[0x1c]
80005886:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000588a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000588e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005892:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80005896:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000589a:	70 0a       	ld.w	r10,r8[0x0]
8000589c:	70 49       	ld.w	r9,r8[0x10]
8000589e:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800058a2:	f0 c9 ff f0 	sub	r9,r8,-16
800058a6:	2f c9       	sub	r9,-4
800058a8:	2f c8       	sub	r8,-4
800058aa:	12 9b       	mov	r11,r9
800058ac:	10 9c       	mov	r12,r8
800058ae:	c1 3f       	rcall	800056d4 <scalar_product>
800058b0:	18 98       	mov	r8,r12
800058b2:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800058b6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800058ba:	0a 98       	mov	r8,r5
800058bc:	ee c9 00 1c 	sub	r9,r7,28
800058c0:	20 08       	sub	r8,0
800058c2:	20 09       	sub	r9,0
800058c4:	72 0a       	ld.w	r10,r9[0x0]
800058c6:	91 0a       	st.w	r8[0x0],r10
800058c8:	72 1a       	ld.w	r10,r9[0x4]
800058ca:	91 1a       	st.w	r8[0x4],r10
800058cc:	72 2a       	ld.w	r10,r9[0x8]
800058ce:	91 2a       	st.w	r8[0x8],r10
800058d0:	72 39       	ld.w	r9,r9[0xc]
800058d2:	91 39       	st.w	r8[0xc],r9
}
800058d4:	0a 9c       	mov	r12,r5
800058d6:	2f 9d       	sub	sp,-28
800058d8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800058dc:	80 00       	ld.sh	r0,r0[0x0]
800058de:	56 6e       	stdsp	sp[0x198],lr

800058e0 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800058e0:	eb cd 40 80 	pushm	r7,lr
800058e4:	1a 97       	mov	r7,sp
800058e6:	20 5d       	sub	sp,20
800058e8:	ee c9 ff f8 	sub	r9,r7,-8
800058ec:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800058ee:	72 08       	ld.w	r8,r9[0x0]
800058f0:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
800058f4:	30 08       	mov	r8,0
800058f6:	ef 48 ff fc 	st.w	r7[-4],r8
800058fa:	c1 58       	rjmp	80005924 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
800058fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005900:	ee fb ff fc 	ld.w	r11,r7[-4]
80005904:	2f fb       	sub	r11,-1
80005906:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000590a:	ee 1b 80 00 	eorh	r11,0x8000
8000590e:	2f f8       	sub	r8,-1
80005910:	a3 68       	lsl	r8,0x2
80005912:	ee 08 00 08 	add	r8,r7,r8
80005916:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000591a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000591e:	2f f8       	sub	r8,-1
80005920:	ef 48 ff fc 	st.w	r7[-4],r8
80005924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005928:	58 28       	cp.w	r8,2
8000592a:	fe 9a ff e9 	brle	800058fc <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000592e:	14 98       	mov	r8,r10
80005930:	ee c9 00 14 	sub	r9,r7,20
80005934:	20 08       	sub	r8,0
80005936:	20 09       	sub	r9,0
80005938:	72 0b       	ld.w	r11,r9[0x0]
8000593a:	91 0b       	st.w	r8[0x0],r11
8000593c:	72 1b       	ld.w	r11,r9[0x4]
8000593e:	91 1b       	st.w	r8[0x4],r11
80005940:	72 2b       	ld.w	r11,r9[0x8]
80005942:	91 2b       	st.w	r8[0x8],r11
80005944:	72 39       	ld.w	r9,r9[0xc]
80005946:	91 39       	st.w	r8[0xc],r9
}
80005948:	14 9c       	mov	r12,r10
8000594a:	2f bd       	sub	sp,-20
8000594c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005950 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80005950:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005954:	1a 97       	mov	r7,sp
80005956:	20 cd       	sub	sp,48
80005958:	4b c6       	lddpc	r6,80005a48 <quat_global_to_local+0xf8>
8000595a:	1e 26       	rsub	r6,pc
8000595c:	ee c5 ff ec 	sub	r5,r7,-20
80005960:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80005962:	ee ca 00 10 	sub	r10,r7,16
80005966:	20 4d       	sub	sp,16
80005968:	1a 98       	mov	r8,sp
8000596a:	0a 99       	mov	r9,r5
8000596c:	20 08       	sub	r8,0
8000596e:	20 09       	sub	r9,0
80005970:	72 0b       	ld.w	r11,r9[0x0]
80005972:	91 0b       	st.w	r8[0x0],r11
80005974:	72 1b       	ld.w	r11,r9[0x4]
80005976:	91 1b       	st.w	r8[0x4],r11
80005978:	72 2b       	ld.w	r11,r9[0x8]
8000597a:	91 2b       	st.w	r8[0x8],r11
8000597c:	72 39       	ld.w	r9,r9[0xc]
8000597e:	91 39       	st.w	r8[0xc],r9
80005980:	14 9c       	mov	r12,r10
80005982:	ca ff       	rcall	800058e0 <quat_inv>
80005984:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80005986:	ee ca 00 20 	sub	r10,r7,32
8000598a:	20 4d       	sub	sp,16
8000598c:	1a 98       	mov	r8,sp
8000598e:	ea c9 ff f0 	sub	r9,r5,-16
80005992:	20 08       	sub	r8,0
80005994:	20 09       	sub	r9,0
80005996:	72 0b       	ld.w	r11,r9[0x0]
80005998:	91 0b       	st.w	r8[0x0],r11
8000599a:	72 1b       	ld.w	r11,r9[0x4]
8000599c:	91 1b       	st.w	r8[0x4],r11
8000599e:	72 2b       	ld.w	r11,r9[0x8]
800059a0:	91 2b       	st.w	r8[0x8],r11
800059a2:	72 39       	ld.w	r9,r9[0xc]
800059a4:	91 39       	st.w	r8[0xc],r9
800059a6:	20 4d       	sub	sp,16
800059a8:	1a 98       	mov	r8,sp
800059aa:	ee c9 00 10 	sub	r9,r7,16
800059ae:	20 08       	sub	r8,0
800059b0:	20 09       	sub	r9,0
800059b2:	72 0b       	ld.w	r11,r9[0x0]
800059b4:	91 0b       	st.w	r8[0x0],r11
800059b6:	72 1b       	ld.w	r11,r9[0x4]
800059b8:	91 1b       	st.w	r8[0x4],r11
800059ba:	72 2b       	ld.w	r11,r9[0x8]
800059bc:	91 2b       	st.w	r8[0x8],r11
800059be:	72 39       	ld.w	r9,r9[0xc]
800059c0:	91 39       	st.w	r8[0xc],r9
800059c2:	14 9c       	mov	r12,r10
800059c4:	c0 ef       	rcall	800057e0 <quat_multi>
800059c6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
800059c8:	ee ca 00 30 	sub	r10,r7,48
800059cc:	20 4d       	sub	sp,16
800059ce:	1a 98       	mov	r8,sp
800059d0:	0a 99       	mov	r9,r5
800059d2:	20 08       	sub	r8,0
800059d4:	20 09       	sub	r9,0
800059d6:	72 0b       	ld.w	r11,r9[0x0]
800059d8:	91 0b       	st.w	r8[0x0],r11
800059da:	72 1b       	ld.w	r11,r9[0x4]
800059dc:	91 1b       	st.w	r8[0x4],r11
800059de:	72 2b       	ld.w	r11,r9[0x8]
800059e0:	91 2b       	st.w	r8[0x8],r11
800059e2:	72 39       	ld.w	r9,r9[0xc]
800059e4:	91 39       	st.w	r8[0xc],r9
800059e6:	20 4d       	sub	sp,16
800059e8:	1a 98       	mov	r8,sp
800059ea:	ee c9 00 20 	sub	r9,r7,32
800059ee:	20 08       	sub	r8,0
800059f0:	20 09       	sub	r9,0
800059f2:	72 0b       	ld.w	r11,r9[0x0]
800059f4:	91 0b       	st.w	r8[0x0],r11
800059f6:	72 1b       	ld.w	r11,r9[0x4]
800059f8:	91 1b       	st.w	r8[0x4],r11
800059fa:	72 2b       	ld.w	r11,r9[0x8]
800059fc:	91 2b       	st.w	r8[0x8],r11
800059fe:	72 39       	ld.w	r9,r9[0xc]
80005a00:	91 39       	st.w	r8[0xc],r9
80005a02:	14 9c       	mov	r12,r10
80005a04:	ce ee       	rcall	800057e0 <quat_multi>
80005a06:	2f 8d       	sub	sp,-32
80005a08:	ee c8 00 20 	sub	r8,r7,32
80005a0c:	ee c9 00 30 	sub	r9,r7,48
80005a10:	20 08       	sub	r8,0
80005a12:	20 09       	sub	r9,0
80005a14:	72 0a       	ld.w	r10,r9[0x0]
80005a16:	91 0a       	st.w	r8[0x0],r10
80005a18:	72 1a       	ld.w	r10,r9[0x4]
80005a1a:	91 1a       	st.w	r8[0x4],r10
80005a1c:	72 2a       	ld.w	r10,r9[0x8]
80005a1e:	91 2a       	st.w	r8[0x8],r10
80005a20:	72 39       	ld.w	r9,r9[0xc]
80005a22:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80005a24:	06 98       	mov	r8,r3
80005a26:	ee c9 00 20 	sub	r9,r7,32
80005a2a:	20 08       	sub	r8,0
80005a2c:	20 09       	sub	r9,0
80005a2e:	72 0a       	ld.w	r10,r9[0x0]
80005a30:	91 0a       	st.w	r8[0x0],r10
80005a32:	72 1a       	ld.w	r10,r9[0x4]
80005a34:	91 1a       	st.w	r8[0x4],r10
80005a36:	72 2a       	ld.w	r10,r9[0x8]
80005a38:	91 2a       	st.w	r8[0x8],r10
80005a3a:	72 39       	ld.w	r9,r9[0xc]
80005a3c:	91 39       	st.w	r8[0xc],r9
}
80005a3e:	06 9c       	mov	r12,r3
80005a40:	2f 4d       	sub	sp,-48
80005a42:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005a46:	00 00       	add	r0,r0
80005a48:	80 00       	ld.sh	r0,r0[0x0]
80005a4a:	57 de       	stdsp	sp[0x1f4],lr

80005a4c <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80005a4c:	eb cd 40 c0 	pushm	r6-r7,lr
80005a50:	1a 97       	mov	r7,sp
80005a52:	20 2d       	sub	sp,8
80005a54:	4b 26       	lddpc	r6,80005b1c <fast_sqrt+0xd0>
80005a56:	1e 26       	rsub	r6,pc
80005a58:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80005a5c:	30 18       	mov	r8,1
80005a5e:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a62:	30 09       	mov	r9,0
80005a64:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005a68:	e0 8c 00 03 	brvs	80005a6e <fast_sqrt+0x22>
80005a6c:	c0 25       	brlt	80005a70 <fast_sqrt+0x24>
80005a6e:	30 08       	mov	r8,0
80005a70:	5c 58       	castu.b	r8
80005a72:	c0 30       	breq	80005a78 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80005a74:	30 08       	mov	r8,0
80005a76:	c4 f8       	rjmp	80005b14 <fast_sqrt+0xc8>
	}
	float result=1.0;
80005a78:	fc 18 3f 80 	movh	r8,0x3f80
80005a7c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005a80:	ee fb ff fc 	ld.w	r11,r7[-4]
80005a84:	ee fc ff f8 	ld.w	r12,r7[-8]
80005a88:	f0 16 00 08 	mcall	r6[32]
80005a8c:	18 98       	mov	r8,r12
80005a8e:	10 99       	mov	r9,r8
80005a90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a94:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005a98:	fc 18 3f 00 	movh	r8,0x3f00
80005a9c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005aa0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005aa4:	ee fb ff fc 	ld.w	r11,r7[-4]
80005aa8:	ee fc ff f8 	ld.w	r12,r7[-8]
80005aac:	f0 16 00 08 	mcall	r6[32]
80005ab0:	18 98       	mov	r8,r12
80005ab2:	10 99       	mov	r9,r8
80005ab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ab8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005abc:	fc 18 3f 00 	movh	r8,0x3f00
80005ac0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005ac4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005ac8:	ee fb ff fc 	ld.w	r11,r7[-4]
80005acc:	ee fc ff f8 	ld.w	r12,r7[-8]
80005ad0:	f0 16 00 08 	mcall	r6[32]
80005ad4:	18 98       	mov	r8,r12
80005ad6:	10 99       	mov	r9,r8
80005ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005adc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005ae0:	fc 18 3f 00 	movh	r8,0x3f00
80005ae4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005ae8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005aec:	ee fb ff fc 	ld.w	r11,r7[-4]
80005af0:	ee fc ff f8 	ld.w	r12,r7[-8]
80005af4:	f0 16 00 08 	mcall	r6[32]
80005af8:	18 98       	mov	r8,r12
80005afa:	10 99       	mov	r9,r8
80005afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b00:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b04:	fc 18 3f 00 	movh	r8,0x3f00
80005b08:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005b0c:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b14:	10 9c       	mov	r12,r8
80005b16:	2f ed       	sub	sp,-8
80005b18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005b1c:	80 00       	ld.sh	r0,r0[0x0]
80005b1e:	58 da       	cp.w	r10,13

80005b20 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80005b20:	eb cd 40 c0 	pushm	r6-r7,lr
80005b24:	1a 97       	mov	r7,sp
80005b26:	20 2d       	sub	sp,8
80005b28:	48 a6       	lddpc	r6,80005b50 <vector_norm_sqr+0x30>
80005b2a:	1e 26       	rsub	r6,pc
80005b2c:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80005b30:	ee fb ff f8 	ld.w	r11,r7[-8]
80005b34:	ee fc ff f8 	ld.w	r12,r7[-8]
80005b38:	fe b0 fd ce 	rcall	800056d4 <scalar_product>
80005b3c:	18 98       	mov	r8,r12
80005b3e:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80005b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b46:	10 9c       	mov	r12,r8
80005b48:	2f ed       	sub	sp,-8
80005b4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005b4e:	00 00       	add	r0,r0
80005b50:	80 00       	ld.sh	r0,r0[0x0]
80005b52:	59 ae       	cp.w	lr,26

80005b54 <vector_norm>:

float static inline vector_norm(float u[])
{
80005b54:	eb cd 40 c0 	pushm	r6-r7,lr
80005b58:	1a 97       	mov	r7,sp
80005b5a:	20 1d       	sub	sp,4
80005b5c:	48 86       	lddpc	r6,80005b7c <vector_norm+0x28>
80005b5e:	1e 26       	rsub	r6,pc
80005b60:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80005b64:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b68:	cd cf       	rcall	80005b20 <vector_norm_sqr>
80005b6a:	18 98       	mov	r8,r12
80005b6c:	10 9c       	mov	r12,r8
80005b6e:	c6 ff       	rcall	80005a4c <fast_sqrt>
80005b70:	18 98       	mov	r8,r12
}
80005b72:	10 9c       	mov	r12,r8
80005b74:	2f fd       	sub	sp,-4
80005b76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005b7a:	00 00       	add	r0,r0
80005b7c:	80 00       	ld.sh	r0,r0[0x0]
80005b7e:	59 e2       	cp.w	r2,30

80005b80 <vector_normalize>:

void static inline vector_normalize(float v[], float u[])
{
80005b80:	eb cd 40 e0 	pushm	r5-r7,lr
80005b84:	1a 97       	mov	r7,sp
80005b86:	20 4d       	sub	sp,16
80005b88:	49 a6       	lddpc	r6,80005bf0 <vector_normalize+0x70>
80005b8a:	1e 26       	rsub	r6,pc
80005b8c:	ef 4c ff f4 	st.w	r7[-12],r12
80005b90:	ef 4b ff f0 	st.w	r7[-16],r11
	int i;
	float norm = vector_norm(v);
80005b94:	ee fc ff f4 	ld.w	r12,r7[-12]
80005b98:	cd ef       	rcall	80005b54 <vector_norm>
80005b9a:	18 98       	mov	r8,r12
80005b9c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 3; ++i)
80005ba0:	30 08       	mov	r8,0
80005ba2:	ef 48 ff f8 	st.w	r7[-8],r8
80005ba6:	c1 c8       	rjmp	80005bde <vector_normalize+0x5e>
	{
		u[i] = v[i] / norm;
80005ba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bac:	a3 68       	lsl	r8,0x2
80005bae:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005bb2:	f2 08 00 05 	add	r5,r9,r8
80005bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bba:	a3 68       	lsl	r8,0x2
80005bbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005bc0:	f2 08 00 08 	add	r8,r9,r8
80005bc4:	70 08       	ld.w	r8,r8[0x0]
80005bc6:	ee fb ff fc 	ld.w	r11,r7[-4]
80005bca:	10 9c       	mov	r12,r8
80005bcc:	f0 16 00 08 	mcall	r6[32]
80005bd0:	18 98       	mov	r8,r12
80005bd2:	8b 08       	st.w	r5[0x0],r8

void static inline vector_normalize(float v[], float u[])
{
	int i;
	float norm = vector_norm(v);
	for (i = 0; i < 3; ++i)
80005bd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bd8:	2f f8       	sub	r8,-1
80005bda:	ef 48 ff f8 	st.w	r7[-8],r8
80005bde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005be2:	58 28       	cp.w	r8,2
80005be4:	fe 9a ff e2 	brle	80005ba8 <vector_normalize+0x28>
	{
		u[i] = v[i] / norm;
	}
}
80005be8:	2f cd       	sub	sp,-16
80005bea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005bee:	00 00       	add	r0,r0
80005bf0:	80 00       	ld.sh	r0,r0[0x0]
80005bf2:	5a 0e       	cp.w	lr,-32

80005bf4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80005bf4:	eb cd 40 c0 	pushm	r6-r7,lr
80005bf8:	1a 97       	mov	r7,sp
80005bfa:	20 6d       	sub	sp,24
80005bfc:	49 e6       	lddpc	r6,80005c74 <interpolate+0x80>
80005bfe:	1e 26       	rsub	r6,pc
80005c00:	ef 4c ff f8 	st.w	r7[-8],r12
80005c04:	ef 4b ff f4 	st.w	r7[-12],r11
80005c08:	ef 4a ff f0 	st.w	r7[-16],r10
80005c0c:	ef 49 ff ec 	st.w	r7[-20],r9
80005c10:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80005c14:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005c1c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80005c20:	c0 41       	brne	80005c28 <interpolate+0x34>
	{
		return y1;
80005c22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005c26:	c2 38       	rjmp	80005c6c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80005c28:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005c2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005c30:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005c34:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c3c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005c40:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005c44:	ee fa ff f0 	ld.w	r10,r7[-16]
80005c48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c4c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005c50:	12 9b       	mov	r11,r9
80005c52:	10 9c       	mov	r12,r8
80005c54:	f0 16 00 08 	mcall	r6[32]
80005c58:	18 98       	mov	r8,r12
80005c5a:	10 99       	mov	r9,r8
80005c5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005c60:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005c64:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80005c6c:	10 9c       	mov	r12,r8
80005c6e:	2f ad       	sub	sp,-24
80005c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005c74:	80 00       	ld.sh	r0,r0[0x0]
80005c76:	5a 82       	cp.w	r2,-24

80005c78 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80005c78:	eb cd 40 c0 	pushm	r6-r7,lr
80005c7c:	1a 97       	mov	r7,sp
80005c7e:	20 3d       	sub	sp,12
80005c80:	49 06       	lddpc	r6,80005cc0 <mav_array_memcpy+0x48>
80005c82:	1e 26       	rsub	r6,pc
80005c84:	ef 4c ff fc 	st.w	r7[-4],r12
80005c88:	ef 4b ff f8 	st.w	r7[-8],r11
80005c8c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c94:	58 08       	cp.w	r8,0
80005c96:	c0 91       	brne	80005ca8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80005c98:	ee fa ff f4 	ld.w	r10,r7[-12]
80005c9c:	30 0b       	mov	r11,0
80005c9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005ca2:	f0 16 00 2f 	mcall	r6[188]
80005ca6:	c0 98       	rjmp	80005cb8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80005ca8:	ee fa ff f4 	ld.w	r10,r7[-12]
80005cac:	ee fb ff f8 	ld.w	r11,r7[-8]
80005cb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80005cb4:	f0 16 00 1e 	mcall	r6[120]
	}
}
80005cb8:	2f dd       	sub	sp,-12
80005cba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005cbe:	00 00       	add	r0,r0
80005cc0:	80 00       	ld.sh	r0,r0[0x0]
80005cc2:	5b 06       	cp.w	r6,-16

80005cc4 <init_stabilisation_hybrid>:
#include "quick_trig.h"

central_data_t *centralData;

void init_stabilisation_hybrid(Stabiliser_Stack_hybrid_t* stabiliser_stack)
{
80005cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80005cc8:	1a 97       	mov	r7,sp
80005cca:	20 1d       	sub	sp,4
80005ccc:	49 26       	lddpc	r6,80005d14 <init_stabilisation_hybrid+0x50>
80005cce:	1e 26       	rsub	r6,pc
80005cd0:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80005cd4:	f0 16 00 31 	mcall	r6[196]
80005cd8:	18 99       	mov	r9,r12
80005cda:	ec f8 00 00 	ld.w	r8,r6[0]
80005cde:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode = MOTORS_OFF;
80005ce0:	ec f8 00 00 	ld.w	r8,r6[0]
80005ce4:	70 08       	ld.w	r8,r8[0x0]
80005ce6:	30 09       	mov	r9,0
80005ce8:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode = RATE_COMMAND_MODE;
80005cec:	ec f8 00 00 	ld.w	r8,r6[0]
80005cf0:	70 08       	ld.w	r8,r8[0x0]
80005cf2:	30 29       	mov	r9,2
80005cf4:	f1 49 01 68 	st.w	r8[360],r9

	*stabiliser_stack = stabiliser_defaults_hybrid;
80005cf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cfc:	ec f9 08 f0 	ld.w	r9,r6[2288]
80005d00:	e0 6a 02 78 	mov	r10,632
80005d04:	12 9b       	mov	r11,r9
80005d06:	10 9c       	mov	r12,r8
80005d08:	f0 16 00 1e 	mcall	r6[120]
}
80005d0c:	2f fd       	sub	sp,-4
80005d0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005d12:	00 00       	add	r0,r0
80005d14:	80 00       	ld.sh	r0,r0[0x0]
80005d16:	5b 52       	cp.w	r2,-11

80005d18 <cascade_stabilise_hybrid>:

void cascade_stabilise_hybrid(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input)
{
80005d18:	eb cd 40 c0 	pushm	r6-r7,lr
80005d1c:	1a 97       	mov	r7,sp
80005d1e:	fa cd 00 a0 	sub	sp,sp,160
80005d22:	fe f6 02 92 	ld.w	r6,pc[658]
80005d26:	1e 26       	rsub	r6,pc
80005d28:	ef 4c ff 78 	st.w	r7[-136],r12
80005d2c:	ef 4b ff 74 	st.w	r7[-140],r11
80005d30:	ef 4a ff 70 	st.w	r7[-144],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input = *control_input;
80005d34:	ee f9 ff 70 	ld.w	r9,r7[-144]
80005d38:	ee c8 00 44 	sub	r8,r7,68
80005d3c:	f0 ca 00 00 	sub	r10,r8,0
80005d40:	f2 cb 00 00 	sub	r11,r9,0
80005d44:	76 0c       	ld.w	r12,r11[0x0]
80005d46:	95 0c       	st.w	r10[0x0],r12
80005d48:	76 1c       	ld.w	r12,r11[0x4]
80005d4a:	95 1c       	st.w	r10[0x4],r12
80005d4c:	76 2c       	ld.w	r12,r11[0x8]
80005d4e:	95 2c       	st.w	r10[0x8],r12
80005d50:	76 3b       	ld.w	r11,r11[0xc]
80005d52:	95 3b       	st.w	r10[0xc],r11
80005d54:	f0 ca ff f0 	sub	r10,r8,-16
80005d58:	f2 cb ff f0 	sub	r11,r9,-16
80005d5c:	76 0c       	ld.w	r12,r11[0x0]
80005d5e:	95 0c       	st.w	r10[0x0],r12
80005d60:	76 1c       	ld.w	r12,r11[0x4]
80005d62:	95 1c       	st.w	r10[0x4],r12
80005d64:	76 2c       	ld.w	r12,r11[0x8]
80005d66:	95 2c       	st.w	r10[0x8],r12
80005d68:	76 3b       	ld.w	r11,r11[0xc]
80005d6a:	95 3b       	st.w	r10[0xc],r11
80005d6c:	f2 ea 00 20 	ld.d	r10,r9[32]
80005d70:	f0 eb 00 20 	st.d	r8[32],r10
80005d74:	72 a9       	ld.w	r9,r9[0x28]
80005d76:	91 a9       	st.w	r8[0x28],r9

	float target_global[3];
	float target_loc[3];
	float reference_loc[3];

	switch (control_input->control_mode) {
80005d78:	ee f8 ff 70 	ld.w	r8,r7[-144]
80005d7c:	70 88       	ld.w	r8,r8[0x20]
80005d7e:	58 18       	cp.w	r8,1
80005d80:	e0 88 00 06 	brls	80005d8c <cascade_stabilise_hybrid+0x74>
80005d84:	58 28       	cp.w	r8,2
80005d86:	e0 80 00 d1 	breq	80005f28 <cascade_stabilise_hybrid+0x210>
80005d8a:	c0 99       	rjmp	80005f9c <cascade_stabilise_hybrid+0x284>
		 */
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// reference vector	in local frame
		reference_loc[0] = 1.0;	// front vector
80005d8c:	fc 18 3f 80 	movh	r8,0x3f80
80005d90:	ef 48 ff 98 	st.w	r7[-104],r8
		reference_loc[1] = 0.0;
80005d94:	30 08       	mov	r8,0
80005d96:	ef 48 ff 9c 	st.w	r7[-100],r8
		reference_loc[2] = 0.0;	// norm = 1
80005d9a:	30 08       	mov	r8,0
80005d9c:	ef 48 ff a0 	st.w	r7[-96],r8

		// get target vector in global frame
		target_global[0] = input.rpy[1];
80005da0:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005da4:	ef 48 ff b0 	st.w	r7[-80],r8
		target_global[1] = input.rpy[2];
80005da8:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005dac:	ef 48 ff b4 	st.w	r7[-76],r8
		target_global[2] = -1;
80005db0:	fc 18 bf 80 	movh	r8,0xbf80
80005db4:	ef 48 ff b8 	st.w	r7[-72],r8

		// target vector in local frame
		UQuat_t qtarget = quat_from_vector(&target_global);
80005db8:	ee c8 00 78 	sub	r8,r7,120
80005dbc:	ee c9 00 50 	sub	r9,r7,80
80005dc0:	12 9b       	mov	r11,r9
80005dc2:	10 9c       	mov	r12,r8
80005dc4:	fe b0 fc 5c 	rcall	8000567c <quat_from_vector>
		qtarget = quat_global_to_local(imu->attitude.qe, qtarget);
80005dc8:	ee ca 00 a0 	sub	r10,r7,160
80005dcc:	20 4d       	sub	sp,16
80005dce:	1a 98       	mov	r8,sp
80005dd0:	ee c9 00 78 	sub	r9,r7,120
80005dd4:	20 08       	sub	r8,0
80005dd6:	20 09       	sub	r9,0
80005dd8:	72 0b       	ld.w	r11,r9[0x0]
80005dda:	91 0b       	st.w	r8[0x0],r11
80005ddc:	72 1b       	ld.w	r11,r9[0x4]
80005dde:	91 1b       	st.w	r8[0x4],r11
80005de0:	72 2b       	ld.w	r11,r9[0x8]
80005de2:	91 2b       	st.w	r8[0x8],r11
80005de4:	72 39       	ld.w	r9,r9[0xc]
80005de6:	91 39       	st.w	r8[0xc],r9
80005de8:	ee f9 ff 78 	ld.w	r9,r7[-136]
80005dec:	20 4d       	sub	sp,16
80005dee:	1a 98       	mov	r8,sp
80005df0:	20 08       	sub	r8,0
80005df2:	20 09       	sub	r9,0
80005df4:	72 0b       	ld.w	r11,r9[0x0]
80005df6:	91 0b       	st.w	r8[0x0],r11
80005df8:	72 1b       	ld.w	r11,r9[0x4]
80005dfa:	91 1b       	st.w	r8[0x4],r11
80005dfc:	72 2b       	ld.w	r11,r9[0x8]
80005dfe:	91 2b       	st.w	r8[0x8],r11
80005e00:	72 39       	ld.w	r9,r9[0xc]
80005e02:	91 39       	st.w	r8[0xc],r9
80005e04:	14 9c       	mov	r12,r10
80005e06:	fe b0 fd a5 	rcall	80005950 <quat_global_to_local>
80005e0a:	2f 8d       	sub	sp,-32
80005e0c:	ee c8 00 78 	sub	r8,r7,120
80005e10:	ee c9 00 a0 	sub	r9,r7,160
80005e14:	20 08       	sub	r8,0
80005e16:	20 09       	sub	r9,0
80005e18:	72 0a       	ld.w	r10,r9[0x0]
80005e1a:	91 0a       	st.w	r8[0x0],r10
80005e1c:	72 1a       	ld.w	r10,r9[0x4]
80005e1e:	91 1a       	st.w	r8[0x4],r10
80005e20:	72 2a       	ld.w	r10,r9[0x8]
80005e22:	91 2a       	st.w	r8[0x8],r10
80005e24:	72 39       	ld.w	r9,r9[0xc]
80005e26:	91 39       	st.w	r8[0xc],r9
		target_loc[0] = qtarget.v[0];
80005e28:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005e2c:	ef 48 ff a4 	st.w	r7[-92],r8
		target_loc[1] = qtarget.v[1];
80005e30:	ee f8 ff 90 	ld.w	r8,r7[-112]
80005e34:	ef 48 ff a8 	st.w	r7[-88],r8
		target_loc[2] = qtarget.v[2];
80005e38:	ee f8 ff 94 	ld.w	r8,r7[-108]
80005e3c:	ef 48 ff ac 	st.w	r7[-84],r8
		vector_normalize(target_loc, target_loc);
80005e40:	ee c9 00 5c 	sub	r9,r7,92
80005e44:	ee c8 00 5c 	sub	r8,r7,92
80005e48:	12 9b       	mov	r11,r9
80005e4a:	10 9c       	mov	r12,r8
80005e4c:	c9 ae       	rcall	80005b80 <vector_normalize>

		// get rotation axis
		float axis[3];
		cross_product(reference_loc, target_loc, axis);
80005e4e:	ee ca 00 84 	sub	r10,r7,132
80005e52:	ee c9 00 5c 	sub	r9,r7,92
80005e56:	ee c8 00 68 	sub	r8,r7,104
80005e5a:	12 9b       	mov	r11,r9
80005e5c:	10 9c       	mov	r12,r8
80005e5e:	fe b0 fc 6b 	rcall	80005734 <cross_product>
		vector_normalize(axis, axis);
80005e62:	ee c9 00 84 	sub	r9,r7,132
80005e66:	ee c8 00 84 	sub	r8,r7,132
80005e6a:	12 9b       	mov	r11,r9
80005e6c:	10 9c       	mov	r12,r8
80005e6e:	c8 9e       	rcall	80005b80 <vector_normalize>

		// get angle
		float angle = acosf(scalar_product(reference_loc, target_loc));
80005e70:	ee c9 00 5c 	sub	r9,r7,92
80005e74:	ee c8 00 68 	sub	r8,r7,104
80005e78:	12 9b       	mov	r11,r9
80005e7a:	10 9c       	mov	r12,r8
80005e7c:	fe b0 fc 2c 	rcall	800056d4 <scalar_product>
80005e80:	18 98       	mov	r8,r12
80005e82:	10 9c       	mov	r12,r8
80005e84:	f0 16 01 81 	mcall	r6[1540]
80005e88:	18 98       	mov	r8,r12
80005e8a:	ef 48 ff fc 	st.w	r7[-4],r8
		// float angle = quick_acos(scalar_product(reference_loc, target_loc));
		
		// get errors
		rpyt_errors[0]= input.rpy[0];
80005e8e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005e92:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[1]= axis[1] * angle;
80005e96:	ee f9 ff 80 	ld.w	r9,r7[-128]
80005e9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e9e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005ea2:	ef 48 ff ec 	st.w	r7[-20],r8
		rpyt_errors[2]= axis[2] * angle;
80005ea6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80005eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005eae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005eb2:	ef 48 ff f0 	st.w	r7[-16],r8
		
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80005eb6:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005eba:	ef 48 ff f4 	st.w	r7[-12],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
80005ebe:	ec f8 00 00 	ld.w	r8,r6[0]
80005ec2:	70 08       	ld.w	r8,r8[0x0]
80005ec4:	f0 f9 01 40 	ld.w	r9,r8[320]
80005ec8:	ec f8 00 00 	ld.w	r8,r6[0]
80005ecc:	70 08       	ld.w	r8,r8[0x0]
80005ece:	f0 c8 fd 24 	sub	r8,r8,-732
80005ed2:	ee ca 00 18 	sub	r10,r7,24
80005ed6:	12 9b       	mov	r11,r9
80005ed8:	10 9c       	mov	r12,r8
80005eda:	f0 16 01 17 	mcall	r6[1116]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
80005ede:	ec f8 00 00 	ld.w	r8,r6[0]
80005ee2:	70 09       	ld.w	r9,r8[0x0]
80005ee4:	ee c8 00 44 	sub	r8,r7,68
80005ee8:	f2 c9 fc 14 	sub	r9,r9,-1004
80005eec:	f0 ca 00 00 	sub	r10,r8,0
80005ef0:	f2 cb 00 00 	sub	r11,r9,0
80005ef4:	76 0c       	ld.w	r12,r11[0x0]
80005ef6:	95 0c       	st.w	r10[0x0],r12
80005ef8:	76 1c       	ld.w	r12,r11[0x4]
80005efa:	95 1c       	st.w	r10[0x4],r12
80005efc:	76 2c       	ld.w	r12,r11[0x8]
80005efe:	95 2c       	st.w	r10[0x8],r12
80005f00:	76 3b       	ld.w	r11,r11[0xc]
80005f02:	95 3b       	st.w	r10[0xc],r11
80005f04:	f0 ca ff f0 	sub	r10,r8,-16
80005f08:	f2 cb ff f0 	sub	r11,r9,-16
80005f0c:	76 0c       	ld.w	r12,r11[0x0]
80005f0e:	95 0c       	st.w	r10[0x0],r12
80005f10:	76 1c       	ld.w	r12,r11[0x4]
80005f12:	95 1c       	st.w	r10[0x4],r12
80005f14:	76 2c       	ld.w	r12,r11[0x8]
80005f16:	95 2c       	st.w	r10[0x8],r12
80005f18:	76 3b       	ld.w	r11,r11[0xc]
80005f1a:	95 3b       	st.w	r10[0xc],r11
80005f1c:	f2 ea 00 20 	ld.d	r10,r9[32]
80005f20:	f0 eb 00 20 	st.d	r8[32],r10
80005f24:	72 a9       	ld.w	r9,r9[0x28]
80005f26:	91 a9       	st.w	r8[0x28],r9
		
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005f28:	30 08       	mov	r8,0
80005f2a:	ef 48 ff f8 	st.w	r7[-8],r8
80005f2e:	c1 e8       	rjmp	80005f6a <cascade_stabilise_hybrid+0x252>
			rpyt_errors[i]= input.rpy[i] - imu->attitude.om[i];
80005f30:	ee fa ff f8 	ld.w	r10,r7[-8]
80005f34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f38:	a3 68       	lsl	r8,0x2
80005f3a:	ee 08 00 08 	add	r8,r7,r8
80005f3e:	f0 f9 ff bc 	ld.w	r9,r8[-68]
80005f42:	ee fb ff f8 	ld.w	r11,r7[-8]
80005f46:	ee f8 ff 78 	ld.w	r8,r7[-136]
80005f4a:	2e 2b       	sub	r11,-30
80005f4c:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80005f50:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f54:	f4 08 15 02 	lsl	r8,r10,0x2
80005f58:	ee 08 00 08 	add	r8,r7,r8
80005f5c:	f1 49 ff e8 	st.w	r8[-24],r9
		
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f64:	2f f8       	sub	r8,-1
80005f66:	ef 48 ff f8 	st.w	r7[-8],r8
80005f6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f6e:	58 28       	cp.w	r8,2
80005f70:	fe 9a ff e0 	brle	80005f30 <cascade_stabilise_hybrid+0x218>
			rpyt_errors[i]= input.rpy[i] - imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
80005f74:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005f78:	ef 48 ff f4 	st.w	r7[-12],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
80005f7c:	ec f8 00 00 	ld.w	r8,r6[0]
80005f80:	70 08       	ld.w	r8,r8[0x0]
80005f82:	f0 f9 01 40 	ld.w	r9,r8[320]
80005f86:	ec f8 00 00 	ld.w	r8,r6[0]
80005f8a:	70 08       	ld.w	r8,r8[0x0]
80005f8c:	f0 c8 fe 60 	sub	r8,r8,-416
80005f90:	ee ca 00 18 	sub	r10,r7,24
80005f94:	12 9b       	mov	r11,r9
80005f96:	10 9c       	mov	r12,r8
80005f98:	f0 16 01 17 	mcall	r6[1116]
	}

	// mix to servos 
	mix_to_servos_xwing(&centralData->stabiliser_stack.rate_stabiliser.output);
80005f9c:	ec f8 00 00 	ld.w	r8,r6[0]
80005fa0:	70 08       	ld.w	r8,r8[0x0]
80005fa2:	f0 c8 fd 50 	sub	r8,r8,-688
80005fa6:	10 9c       	mov	r12,r8
80005fa8:	f0 16 01 dd 	mcall	r6[1908]
}
80005fac:	2d 8d       	sub	sp,-160
80005fae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005fb2:	00 00       	add	r0,r0
80005fb4:	80 00       	ld.sh	r0,r0[0x0]
80005fb6:	5b aa       	cp.w	r10,-6

80005fb8 <mix_to_servos_xwing>:

void mix_to_servos_xwing(Control_Command_t *control)
{
80005fb8:	eb cd 40 e0 	pushm	r5-r7,lr
80005fbc:	1a 97       	mov	r7,sp
80005fbe:	20 7d       	sub	sp,28
80005fc0:	4f a6       	lddpc	r6,800061a8 <mix_to_servos_xwing+0x1f0>
80005fc2:	1e 26       	rsub	r6,pc
80005fc4:	ef 4c ff e4 	st.w	r7[-28],r12
	int i;
	float motor_command;
	float servo_command[4];

	// mix
	motor_command = control->thrust;
80005fc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005fcc:	70 38       	ld.w	r8,r8[0xc]
80005fce:	ef 48 ff fc 	st.w	r7[-4],r8
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
80005fd2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005fd6:	70 09       	ld.w	r9,r8[0x0]
												   + control->rpy[YAW] );
80005fd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005fdc:	70 28       	ld.w	r8,r8[0x8]
	float motor_command;
	float servo_command[4];

	// mix
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
80005fde:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005fe2:	ef 48 ff ec 	st.w	r7[-20],r8
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
80005fe6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005fea:	70 09       	ld.w	r9,r8[0x0]
												   + control->rpy[PITCH] ); 
80005fec:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ff0:	70 18       	ld.w	r8,r8[0x4]

	// mix
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
80005ff2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005ff6:	ef 48 ff f0 	st.w	r7[-16],r8
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
80005ffa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ffe:	70 09       	ld.w	r9,r8[0x0]
												 - control->rpy[YAW] );
80006000:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006004:	70 28       	ld.w	r8,r8[0x8]
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
80006006:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000600a:	ef 48 ff f4 	st.w	r7[-12],r8
												 - control->rpy[YAW] );
	servo_command[FLAP_LEFT] = FLAP_LEFT_DIR * ( + control->rpy[ROLL] 
8000600e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006012:	70 09       	ld.w	r9,r8[0x0]
												 - control->rpy[PITCH] ); 
80006014:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006018:	70 18       	ld.w	r8,r8[0x4]
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
												 - control->rpy[YAW] );
	servo_command[FLAP_LEFT] = FLAP_LEFT_DIR * ( + control->rpy[ROLL] 
8000601a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000601e:	ef 48 ff e8 	st.w	r7[-24],r8
												 - control->rpy[PITCH] ); 

	// clip
	if (motor_command < MIN_THRUST) motor_command = MIN_THRUST;
80006022:	ee fc ff fc 	ld.w	r12,r7[-4]
80006026:	f0 16 00 03 	mcall	r6[12]
8000602a:	30 05       	mov	r5,0
8000602c:	e0 68 cc cd 	mov	r8,52429
80006030:	ea 18 cc cc 	orh	r8,0xcccc
80006034:	e0 69 cc cc 	mov	r9,52428
80006038:	ea 19 bf ec 	orh	r9,0xbfec
8000603c:	f0 16 00 20 	mcall	r6[128]
80006040:	18 98       	mov	r8,r12
80006042:	58 08       	cp.w	r8,0
80006044:	c0 20       	breq	80006048 <mix_to_servos_xwing+0x90>
80006046:	30 15       	mov	r5,1
80006048:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000604c:	c0 70       	breq	8000605a <mix_to_servos_xwing+0xa2>
8000604e:	e0 68 66 66 	mov	r8,26214
80006052:	ea 18 bf 66 	orh	r8,0xbf66
80006056:	ef 48 ff fc 	st.w	r7[-4],r8
	if (motor_command > MAX_THRUST) motor_command = MAX_THRUST;
8000605a:	30 18       	mov	r8,1
8000605c:	ee fa ff fc 	ld.w	r10,r7[-4]
80006060:	fc 19 3f 80 	movh	r9,0x3f80
80006064:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006068:	e0 8c 00 04 	brvs	80006070 <mix_to_servos_xwing+0xb8>
8000606c:	e0 89 00 03 	brgt	80006072 <mix_to_servos_xwing+0xba>
80006070:	30 08       	mov	r8,0
80006072:	5c 58       	castu.b	r8
80006074:	c0 50       	breq	8000607e <mix_to_servos_xwing+0xc6>
80006076:	fc 18 3f 80 	movh	r8,0x3f80
8000607a:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<4; i++) 
8000607e:	30 08       	mov	r8,0
80006080:	ef 48 ff f8 	st.w	r7[-8],r8
80006084:	c3 d8       	rjmp	800060fe <mix_to_servos_xwing+0x146>
	{
		if (servo_command[i] < MIN_DEFLECTION) servo_command[i] = MIN_DEFLECTION;
80006086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000608a:	a3 68       	lsl	r8,0x2
8000608c:	ee 08 00 08 	add	r8,r7,r8
80006090:	f0 fa ff e8 	ld.w	r10,r8[-24]
80006094:	30 18       	mov	r8,1
80006096:	fc 19 bf 80 	movh	r9,0xbf80
8000609a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000609e:	e0 8c 00 03 	brvs	800060a4 <mix_to_servos_xwing+0xec>
800060a2:	c0 25       	brlt	800060a6 <mix_to_servos_xwing+0xee>
800060a4:	30 08       	mov	r8,0
800060a6:	5c 58       	castu.b	r8
800060a8:	c0 a0       	breq	800060bc <mix_to_servos_xwing+0x104>
800060aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060ae:	a3 68       	lsl	r8,0x2
800060b0:	ee 08 00 08 	add	r8,r7,r8
800060b4:	fc 19 bf 80 	movh	r9,0xbf80
800060b8:	f1 49 ff e8 	st.w	r8[-24],r9
		if (servo_command[i] > MAX_DEFLECTION) servo_command[i] = MAX_DEFLECTION;
800060bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060c0:	a3 68       	lsl	r8,0x2
800060c2:	ee 08 00 08 	add	r8,r7,r8
800060c6:	f0 fa ff e8 	ld.w	r10,r8[-24]
800060ca:	30 18       	mov	r8,1
800060cc:	fc 19 3f 80 	movh	r9,0x3f80
800060d0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800060d4:	e0 8c 00 04 	brvs	800060dc <mix_to_servos_xwing+0x124>
800060d8:	e0 89 00 03 	brgt	800060de <mix_to_servos_xwing+0x126>
800060dc:	30 08       	mov	r8,0
800060de:	5c 58       	castu.b	r8
800060e0:	c0 a0       	breq	800060f4 <mix_to_servos_xwing+0x13c>
800060e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060e6:	a3 68       	lsl	r8,0x2
800060e8:	ee 08 00 08 	add	r8,r7,r8
800060ec:	fc 19 3f 80 	movh	r9,0x3f80
800060f0:	f1 49 ff e8 	st.w	r8[-24],r9
												 - control->rpy[PITCH] ); 

	// clip
	if (motor_command < MIN_THRUST) motor_command = MIN_THRUST;
	if (motor_command > MAX_THRUST) motor_command = MAX_THRUST;
	for (i=0; i<4; i++) 
800060f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060f8:	2f f8       	sub	r8,-1
800060fa:	ef 48 ff f8 	st.w	r7[-8],r8
800060fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006102:	58 38       	cp.w	r8,3
80006104:	fe 9a ff c1 	brle	80006086 <mix_to_servos_xwing+0xce>
		if (servo_command[i] < MIN_DEFLECTION) servo_command[i] = MIN_DEFLECTION;
		if (servo_command[i] > MAX_DEFLECTION) servo_command[i] = MAX_DEFLECTION;
	}

	// scale and write values
	centralData->servos[FLAP_FRONT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_FRONT];
80006108:	ec f8 00 00 	ld.w	r8,r6[0]
8000610c:	70 08       	ld.w	r8,r8[0x0]
8000610e:	ee fa ff ec 	ld.w	r10,r7[-20]
80006112:	fc 19 43 fa 	movh	r9,0x43fa
80006116:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000611a:	30 09       	mov	r9,0
8000611c:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006120:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80006124:	f1 49 05 bc 	st.w	r8[1468],r9
	centralData->servos[FLAP_RIGHT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_RIGHT];
80006128:	ec f8 00 00 	ld.w	r8,r6[0]
8000612c:	70 08       	ld.w	r8,r8[0x0]
8000612e:	ee fa ff f0 	ld.w	r10,r7[-16]
80006132:	fc 19 43 fa 	movh	r9,0x43fa
80006136:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000613a:	30 09       	mov	r9,0
8000613c:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006140:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80006144:	f1 49 05 cc 	st.w	r8[1484],r9
	centralData->servos[FLAP_REAR].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_REAR];
80006148:	ec f8 00 00 	ld.w	r8,r6[0]
8000614c:	70 08       	ld.w	r8,r8[0x0]
8000614e:	ee fa ff f4 	ld.w	r10,r7[-12]
80006152:	fc 19 43 fa 	movh	r9,0x43fa
80006156:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000615a:	30 09       	mov	r9,0
8000615c:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006160:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80006164:	f1 49 05 dc 	st.w	r8[1500],r9
	centralData->servos[FLAP_LEFT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_LEFT];
80006168:	ec f8 00 00 	ld.w	r8,r6[0]
8000616c:	70 08       	ld.w	r8,r8[0x0]
8000616e:	ee fa ff e8 	ld.w	r10,r7[-24]
80006172:	fc 19 43 fa 	movh	r9,0x43fa
80006176:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000617a:	30 09       	mov	r9,0
8000617c:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006180:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80006184:	f1 49 05 ac 	st.w	r8[1452],r9
	centralData->servos[MAIN_ENGINE].value = SERVO_SCALE * motor_command;
80006188:	ec f8 00 00 	ld.w	r8,r6[0]
8000618c:	70 08       	ld.w	r8,r8[0x0]
8000618e:	ee fa ff fc 	ld.w	r10,r7[-4]
80006192:	fc 19 43 fa 	movh	r9,0x43fa
80006196:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8000619a:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
8000619e:	f1 49 05 ec 	st.w	r8[1516],r9
800061a2:	2f 9d       	sub	sp,-28
800061a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800061a8:	80 00       	ld.sh	r0,r0[0x0]
800061aa:	5e 46       	retge	r6

800061ac <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
800061ac:	eb cd 40 c0 	pushm	r6-r7,lr
800061b0:	1a 97       	mov	r7,sp
800061b2:	49 06       	lddpc	r6,800061f0 <init_analog_monitor+0x44>
800061b4:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
800061b6:	30 49       	mov	r9,4
800061b8:	31 0a       	mov	r10,16
800061ba:	30 1b       	mov	r11,1
800061bc:	e0 7c 86 a0 	mov	r12,100000
800061c0:	f0 16 02 09 	mcall	r6[2084]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
800061c4:	30 0a       	mov	r10,0
800061c6:	30 9b       	mov	r11,9
800061c8:	30 6c       	mov	r12,6
800061ca:	f0 16 00 8c 	mcall	r6[560]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
800061ce:	30 0a       	mov	r10,0
800061d0:	30 9b       	mov	r11,9
800061d2:	30 7c       	mov	r12,7
800061d4:	f0 16 00 8c 	mcall	r6[560]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1);  // BAT_FILTERED
800061d8:	30 0a       	mov	r10,0
800061da:	30 2b       	mov	r11,2
800061dc:	30 ac       	mov	r12,10
800061de:	f0 16 00 8c 	mcall	r6[560]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
800061e2:	30 0a       	mov	r10,0
800061e4:	30 3b       	mov	r11,3
800061e6:	30 ac       	mov	r12,10
800061e8:	f0 16 00 8c 	mcall	r6[560]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
800061ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800061f0:	80 00       	ld.sh	r0,r0[0x0]
800061f2:	60 38       	ld.w	r8,r0[0xc]

800061f4 <trigger_analog_monitor>:

void trigger_analog_monitor() {
800061f4:	eb cd 40 c0 	pushm	r6-r7,lr
800061f8:	1a 97       	mov	r7,sp
800061fa:	48 76       	lddpc	r6,80006214 <trigger_analog_monitor+0x20>
800061fc:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
800061fe:	30 08       	mov	r8,0
80006200:	36 49       	mov	r9,100
80006202:	30 aa       	mov	r10,10
80006204:	30 4b       	mov	r11,4
80006206:	ec fc 03 a4 	ld.w	r12,r6[932]
8000620a:	f0 16 01 89 	mcall	r6[1572]
}
8000620e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006212:	00 00       	add	r0,r0
80006214:	80 00       	ld.sh	r0,r0[0x0]
80006216:	60 80       	ld.w	r0,r0[0x20]

80006218 <get_monitored_avg>:

float get_monitored_avg(int channel) {
80006218:	eb cd 40 c0 	pushm	r6-r7,lr
8000621c:	1a 97       	mov	r7,sp
8000621e:	20 3d       	sub	sp,12
80006220:	49 c6       	lddpc	r6,80006290 <get_monitored_avg+0x78>
80006222:	1e 26       	rsub	r6,pc
80006224:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
80006228:	30 08       	mov	r8,0
8000622a:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
8000622e:	30 08       	mov	r8,0
80006230:	ef 48 ff fc 	st.w	r7[-4],r8
80006234:	c1 98       	rjmp	80006266 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
80006236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000623a:	f0 09 15 02 	lsl	r9,r8,0x2
8000623e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006242:	10 09       	add	r9,r8
80006244:	ec f8 03 a4 	ld.w	r8,r6[932]
80006248:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000624c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80006250:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006254:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006258:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
8000625c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006260:	2f f8       	sub	r8,-1
80006262:	ef 48 ff fc 	st.w	r7[-4],r8
80006266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000626a:	58 98       	cp.w	r8,9
8000626c:	fe 9a ff e5 	brle	80006236 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
80006270:	fc 1b 41 20 	movh	r11,0x4120
80006274:	ee fc ff f8 	ld.w	r12,r7[-8]
80006278:	f0 16 00 08 	mcall	r6[32]
8000627c:	18 98       	mov	r8,r12
8000627e:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
80006282:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006286:	10 9c       	mov	r12,r8
80006288:	2f dd       	sub	sp,-12
8000628a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000628e:	00 00       	add	r0,r0
80006290:	80 00       	ld.sh	r0,r0[0x0]
80006292:	60 a6       	ld.w	r6,r0[0x28]

80006294 <get_battery_rail>:

float get_battery_rail(){
80006294:	eb cd 40 c0 	pushm	r6-r7,lr
80006298:	1a 97       	mov	r7,sp
8000629a:	48 f6       	lddpc	r6,800062d4 <get_battery_rail+0x40>
8000629c:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
8000629e:	30 3c       	mov	r12,3
800062a0:	f0 16 00 80 	mcall	r6[512]
800062a4:	18 98       	mov	r8,r12
800062a6:	10 9c       	mov	r12,r8
800062a8:	f0 16 00 03 	mcall	r6[12]
800062ac:	e0 68 67 a1 	mov	r8,26529
800062b0:	ea 18 ea b3 	orh	r8,0xeab3
800062b4:	e0 69 b5 73 	mov	r9,46451
800062b8:	ea 19 bf 65 	orh	r9,0xbf65
800062bc:	f0 16 00 02 	mcall	r6[8]
800062c0:	14 98       	mov	r8,r10
800062c2:	16 99       	mov	r9,r11
800062c4:	10 9a       	mov	r10,r8
800062c6:	12 9b       	mov	r11,r9
800062c8:	f0 16 00 09 	mcall	r6[36]
800062cc:	18 98       	mov	r8,r12
}
800062ce:	10 9c       	mov	r12,r8
800062d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062d4:	80 00       	ld.sh	r0,r0[0x0]
800062d6:	61 20       	ld.w	r0,r0[0x48]

800062d8 <get_internal_rail>:

float get_internal_rail(){
800062d8:	eb cd 40 c0 	pushm	r6-r7,lr
800062dc:	1a 97       	mov	r7,sp
800062de:	48 f6       	lddpc	r6,80006318 <get_internal_rail+0x40>
800062e0:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
800062e2:	30 2c       	mov	r12,2
800062e4:	f0 16 00 80 	mcall	r6[512]
800062e8:	18 98       	mov	r8,r12
800062ea:	10 9c       	mov	r12,r8
800062ec:	f0 16 00 03 	mcall	r6[12]
800062f0:	e0 68 67 a1 	mov	r8,26529
800062f4:	ea 18 ea b3 	orh	r8,0xeab3
800062f8:	e0 69 b5 73 	mov	r9,46451
800062fc:	ea 19 bf 65 	orh	r9,0xbf65
80006300:	f0 16 00 02 	mcall	r6[8]
80006304:	14 98       	mov	r8,r10
80006306:	16 99       	mov	r9,r11
80006308:	10 9a       	mov	r10,r8
8000630a:	12 9b       	mov	r11,r9
8000630c:	f0 16 00 09 	mcall	r6[36]
80006310:	18 98       	mov	r8,r12
}
80006312:	10 9c       	mov	r12,r8
80006314:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006318:	80 00       	ld.sh	r0,r0[0x0]
8000631a:	61 64       	ld.w	r4,r0[0x58]

8000631c <get_6V_analog_rail>:


float get_6V_analog_rail(){
8000631c:	eb cd 40 c0 	pushm	r6-r7,lr
80006320:	1a 97       	mov	r7,sp
80006322:	48 f6       	lddpc	r6,8000635c <get_6V_analog_rail+0x40>
80006324:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
80006326:	30 0c       	mov	r12,0
80006328:	f0 16 00 80 	mcall	r6[512]
8000632c:	18 98       	mov	r8,r12
8000632e:	10 9c       	mov	r12,r8
80006330:	f0 16 00 03 	mcall	r6[12]
80006334:	e0 68 61 13 	mov	r8,24851
80006338:	ea 18 d3 c3 	orh	r8,0xd3c3
8000633c:	e0 69 65 2b 	mov	r9,25899
80006340:	ea 19 3f 59 	orh	r9,0x3f59
80006344:	f0 16 00 02 	mcall	r6[8]
80006348:	14 98       	mov	r8,r10
8000634a:	16 99       	mov	r9,r11
8000634c:	10 9a       	mov	r10,r8
8000634e:	12 9b       	mov	r11,r9
80006350:	f0 16 00 09 	mcall	r6[36]
80006354:	18 98       	mov	r8,r12
}
80006356:	10 9c       	mov	r12,r8
80006358:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000635c:	80 00       	ld.sh	r0,r0[0x0]
8000635e:	61 a8       	ld.w	r8,r0[0x68]

80006360 <get_5V_analog_rail>:


float get_5V_analog_rail(){
80006360:	eb cd 40 c0 	pushm	r6-r7,lr
80006364:	1a 97       	mov	r7,sp
80006366:	48 f6       	lddpc	r6,800063a0 <get_5V_analog_rail+0x40>
80006368:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
8000636a:	30 1c       	mov	r12,1
8000636c:	f0 16 00 80 	mcall	r6[512]
80006370:	18 98       	mov	r8,r12
80006372:	10 9c       	mov	r12,r8
80006374:	f0 16 00 03 	mcall	r6[12]
80006378:	e0 68 61 13 	mov	r8,24851
8000637c:	ea 18 d3 c3 	orh	r8,0xd3c3
80006380:	e0 69 65 2b 	mov	r9,25899
80006384:	ea 19 3f 59 	orh	r9,0x3f59
80006388:	f0 16 00 02 	mcall	r6[8]
8000638c:	14 98       	mov	r8,r10
8000638e:	16 99       	mov	r9,r11
80006390:	10 9a       	mov	r10,r8
80006392:	12 9b       	mov	r11,r9
80006394:	f0 16 00 09 	mcall	r6[36]
80006398:	18 98       	mov	r8,r12
}
8000639a:	10 9c       	mov	r12,r8
8000639c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800063a0:	80 00       	ld.sh	r0,r0[0x0]
800063a2:	61 ec       	ld.w	r12,r0[0x78]

800063a4 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
800063a4:	eb cd 40 c0 	pushm	r6-r7,lr
800063a8:	1a 97       	mov	r7,sp
800063aa:	48 86       	lddpc	r6,800063c8 <init_time_keeper+0x24>
800063ac:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
800063ae:	30 09       	mov	r9,0
800063b0:	30 5a       	mov	r10,5
800063b2:	30 2b       	mov	r11,2
800063b4:	fe 7c 0c 00 	mov	r12,-62464
800063b8:	f0 16 01 75 	mcall	r6[1492]
	ast_enable(&AVR32_AST);
800063bc:	fe 7c 0c 00 	mov	r12,-62464
800063c0:	f0 16 01 da 	mcall	r6[1896]
}
800063c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800063c8:	80 00       	ld.sh	r0,r0[0x0]
800063ca:	62 30       	ld.w	r0,r1[0xc]

800063cc <get_time>:


double get_time(){          // time in seconds since system start
800063cc:	eb cd 40 c0 	pushm	r6-r7,lr
800063d0:	1a 97       	mov	r7,sp
800063d2:	48 a6       	lddpc	r6,800063f8 <get_time+0x2c>
800063d4:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
800063d6:	f0 16 00 4b 	mcall	r6[300]
800063da:	18 98       	mov	r8,r12
800063dc:	10 9c       	mov	r12,r8
800063de:	f0 16 00 b4 	mcall	r6[720]
800063e2:	18 98       	mov	r8,r12
800063e4:	10 9c       	mov	r12,r8
800063e6:	f0 16 00 03 	mcall	r6[12]
800063ea:	14 98       	mov	r8,r10
800063ec:	16 99       	mov	r9,r11
}
800063ee:	10 9a       	mov	r10,r8
800063f0:	12 9b       	mov	r11,r9
800063f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800063f6:	00 00       	add	r0,r0
800063f8:	80 00       	ld.sh	r0,r0[0x0]
800063fa:	62 58       	ld.w	r8,r1[0x14]

800063fc <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
800063fc:	eb cd 40 c0 	pushm	r6-r7,lr
80006400:	1a 97       	mov	r7,sp
80006402:	48 96       	lddpc	r6,80006424 <get_millis+0x28>
80006404:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
80006406:	f0 16 00 4b 	mcall	r6[300]
8000640a:	18 99       	mov	r9,r12
8000640c:	e0 68 4d d3 	mov	r8,19923
80006410:	ea 18 10 62 	orh	r8,0x1062
80006414:	f2 08 06 48 	mulu.d	r8,r9,r8
80006418:	f2 08 16 06 	lsr	r8,r9,0x6
}	
8000641c:	10 9c       	mov	r12,r8
8000641e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006422:	00 00       	add	r0,r0
80006424:	80 00       	ld.sh	r0,r0[0x0]
80006426:	62 88       	ld.w	r8,r1[0x20]

80006428 <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
80006428:	eb cd 40 c0 	pushm	r6-r7,lr
8000642c:	1a 97       	mov	r7,sp
8000642e:	48 56       	lddpc	r6,80006440 <get_micros+0x18>
80006430:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
80006432:	f0 16 00 4b 	mcall	r6[300]
80006436:	18 98       	mov	r8,r12
}	
80006438:	10 9c       	mov	r12,r8
8000643a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000643e:	00 00       	add	r0,r0
80006440:	80 00       	ld.sh	r0,r0[0x0]
80006442:	62 b4       	ld.w	r4,r1[0x2c]

80006444 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
80006444:	eb cd 40 c0 	pushm	r6-r7,lr
80006448:	1a 97       	mov	r7,sp
8000644a:	48 66       	lddpc	r6,80006460 <get_time_ticks+0x1c>
8000644c:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
8000644e:	fe 7c 0c 00 	mov	r12,-62464
80006452:	f0 16 02 0c 	mcall	r6[2096]
80006456:	18 98       	mov	r8,r12
}
80006458:	10 9c       	mov	r12,r8
8000645a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000645e:	00 00       	add	r0,r0
80006460:	80 00       	ld.sh	r0,r0[0x0]
80006462:	62 d0       	ld.w	r0,r1[0x34]

80006464 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80006464:	eb cd 40 c0 	pushm	r6-r7,lr
80006468:	1a 97       	mov	r7,sp
8000646a:	20 1d       	sub	sp,4
8000646c:	48 d6       	lddpc	r6,800064a0 <ticks_to_seconds+0x3c>
8000646e:	1e 26       	rsub	r6,pc
80006470:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80006474:	ee fc ff fc 	ld.w	r12,r7[-4]
80006478:	f0 16 00 4e 	mcall	r6[312]
8000647c:	30 08       	mov	r8,0
8000647e:	e0 69 84 80 	mov	r9,33920
80006482:	ea 19 41 2e 	orh	r9,0x412e
80006486:	f0 16 00 0c 	mcall	r6[48]
8000648a:	14 98       	mov	r8,r10
8000648c:	16 99       	mov	r9,r11
8000648e:	10 9a       	mov	r10,r8
80006490:	12 9b       	mov	r11,r9
80006492:	f0 16 00 09 	mcall	r6[36]
80006496:	18 98       	mov	r8,r12
}
80006498:	10 9c       	mov	r12,r8
8000649a:	2f fd       	sub	sp,-4
8000649c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	62 f2       	ld.w	r2,r1[0x3c]

800064a4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800064a4:	eb cd 40 c0 	pushm	r6-r7,lr
800064a8:	1a 97       	mov	r7,sp
800064aa:	20 6d       	sub	sp,24
800064ac:	49 e6       	lddpc	r6,80006524 <interpolate+0x80>
800064ae:	1e 26       	rsub	r6,pc
800064b0:	ef 4c ff f8 	st.w	r7[-8],r12
800064b4:	ef 4b ff f4 	st.w	r7[-12],r11
800064b8:	ef 4a ff f0 	st.w	r7[-16],r10
800064bc:	ef 49 ff ec 	st.w	r7[-20],r9
800064c0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800064c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800064c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800064cc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800064d0:	c0 41       	brne	800064d8 <interpolate+0x34>
	{
		return y1;
800064d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800064d6:	c2 38       	rjmp	8000651c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800064d8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800064dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800064e0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800064e4:	ee fa ff f8 	ld.w	r10,r7[-8]
800064e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800064ec:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800064f0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800064f4:	ee fa ff f0 	ld.w	r10,r7[-16]
800064f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800064fc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80006500:	12 9b       	mov	r11,r9
80006502:	10 9c       	mov	r12,r8
80006504:	f0 16 00 08 	mcall	r6[32]
80006508:	18 98       	mov	r8,r12
8000650a:	10 99       	mov	r9,r8
8000650c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006510:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006514:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80006518:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000651c:	10 9c       	mov	r12,r8
8000651e:	2f ad       	sub	sp,-24
80006520:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	63 32       	ld.w	r2,r1[0x4c]

80006528 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80006528:	eb cd 40 c0 	pushm	r6-r7,lr
8000652c:	1a 97       	mov	r7,sp
8000652e:	20 3d       	sub	sp,12
80006530:	49 06       	lddpc	r6,80006570 <mav_array_memcpy+0x48>
80006532:	1e 26       	rsub	r6,pc
80006534:	ef 4c ff fc 	st.w	r7[-4],r12
80006538:	ef 4b ff f8 	st.w	r7[-8],r11
8000653c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80006540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006544:	58 08       	cp.w	r8,0
80006546:	c0 91       	brne	80006558 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80006548:	ee fa ff f4 	ld.w	r10,r7[-12]
8000654c:	30 0b       	mov	r11,0
8000654e:	ee fc ff fc 	ld.w	r12,r7[-4]
80006552:	f0 16 00 2f 	mcall	r6[188]
80006556:	c0 98       	rjmp	80006568 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80006558:	ee fa ff f4 	ld.w	r10,r7[-12]
8000655c:	ee fb ff f8 	ld.w	r11,r7[-8]
80006560:	ee fc ff fc 	ld.w	r12,r7[-4]
80006564:	f0 16 00 1e 	mcall	r6[120]
	}
}
80006568:	2f dd       	sub	sp,-12
8000656a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000656e:	00 00       	add	r0,r0
80006570:	80 00       	ld.sh	r0,r0[0x0]
80006572:	63 b6       	ld.w	r6,r1[0x6c]

80006574 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80006574:	eb cd 40 c0 	pushm	r6-r7,lr
80006578:	1a 97       	mov	r7,sp
8000657a:	fe f6 02 06 	ld.w	r6,pc[518]
8000657e:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80006580:	f0 16 00 31 	mcall	r6[196]
80006584:	18 99       	mov	r9,r12
80006586:	ec f8 00 00 	ld.w	r8,r6[0]
8000658a:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
8000658c:	fc 1b 41 20 	movh	r11,0x4120
80006590:	30 0c       	mov	r12,0
80006592:	f0 16 00 be 	mcall	r6[760]
	e_kalman_init(Y,INIT_Y_P);
80006596:	fc 1b 41 20 	movh	r11,0x4120
8000659a:	30 1c       	mov	r12,1
8000659c:	f0 16 00 be 	mcall	r6[760]
	e_kalman_init(Z,INIT_Z_P);
800065a0:	fc 1b 41 20 	movh	r11,0x4120
800065a4:	30 2c       	mov	r12,2
800065a6:	f0 16 00 be 	mcall	r6[760]
	Q[0][0]=Q_X0;
800065aa:	ec fa 00 d4 	ld.w	r10,r6[212]
800065ae:	e0 68 a9 fc 	mov	r8,43516
800065b2:	ea 18 d2 f1 	orh	r8,0xd2f1
800065b6:	e0 69 62 4d 	mov	r9,25165
800065ba:	ea 19 3f 50 	orh	r9,0x3f50
800065be:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800065c2:	ec fa 00 d4 	ld.w	r10,r6[212]
800065c6:	30 08       	mov	r8,0
800065c8:	30 09       	mov	r9,0
800065ca:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800065ce:	ec fa 00 d4 	ld.w	r10,r6[212]
800065d2:	30 08       	mov	r8,0
800065d4:	30 09       	mov	r9,0
800065d6:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800065da:	ec fa 00 d4 	ld.w	r10,r6[212]
800065de:	30 08       	mov	r8,0
800065e0:	30 09       	mov	r9,0
800065e2:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
800065e6:	ec fa 00 d4 	ld.w	r10,r6[212]
800065ea:	e0 68 a9 fc 	mov	r8,43516
800065ee:	ea 18 d2 f1 	orh	r8,0xd2f1
800065f2:	e0 69 62 4d 	mov	r9,25165
800065f6:	ea 19 3f 50 	orh	r9,0x3f50
800065fa:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
800065fe:	ec fa 00 d4 	ld.w	r10,r6[212]
80006602:	30 08       	mov	r8,0
80006604:	30 09       	mov	r9,0
80006606:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
8000660a:	ec fa 00 d4 	ld.w	r10,r6[212]
8000660e:	30 08       	mov	r8,0
80006610:	30 09       	mov	r9,0
80006612:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
80006616:	ec fa 00 d4 	ld.w	r10,r6[212]
8000661a:	30 08       	mov	r8,0
8000661c:	30 09       	mov	r9,0
8000661e:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
80006622:	ec fa 00 d4 	ld.w	r10,r6[212]
80006626:	e0 68 a9 fc 	mov	r8,43516
8000662a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000662e:	e0 69 62 4d 	mov	r9,25165
80006632:	ea 19 3f 50 	orh	r9,0x3f50
80006636:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
8000663a:	ec fa 01 54 	ld.w	r10,r6[340]
8000663e:	e0 68 b0 21 	mov	r8,45089
80006642:	ea 18 68 72 	orh	r8,0x6872
80006646:	e0 69 ed 91 	mov	r9,60817
8000664a:	ea 19 3f d8 	orh	r9,0x3fd8
8000664e:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
80006652:	ec fa 01 54 	ld.w	r10,r6[340]
80006656:	e0 68 a1 62 	mov	r8,41314
8000665a:	ea 18 34 d6 	orh	r8,0x34d6
8000665e:	e0 69 38 ef 	mov	r9,14575
80006662:	ea 19 3f e3 	orh	r9,0x3fe3
80006666:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
8000666a:	ec fa 01 54 	ld.w	r10,r6[340]
8000666e:	e0 68 6e 2f 	mov	r8,28207
80006672:	ea 18 01 a3 	orh	r8,0x1a3
80006676:	e0 69 05 bc 	mov	r9,1468
8000667a:	ea 19 40 05 	orh	r9,0x4005
8000667e:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
80006682:	ec fa 00 d8 	ld.w	r10,r6[216]
80006686:	e0 68 a9 fc 	mov	r8,43516
8000668a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000668e:	e0 69 62 4d 	mov	r9,25165
80006692:	ea 19 3f 50 	orh	r9,0x3f50
80006696:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
8000669a:	ec fa 00 d8 	ld.w	r10,r6[216]
8000669e:	30 08       	mov	r8,0
800066a0:	30 09       	mov	r9,0
800066a2:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800066a6:	ec fa 00 d8 	ld.w	r10,r6[216]
800066aa:	30 08       	mov	r8,0
800066ac:	30 09       	mov	r9,0
800066ae:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800066b2:	ec fa 00 d8 	ld.w	r10,r6[216]
800066b6:	30 08       	mov	r8,0
800066b8:	30 09       	mov	r9,0
800066ba:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800066be:	ec fa 00 d8 	ld.w	r10,r6[216]
800066c2:	e0 68 a9 fc 	mov	r8,43516
800066c6:	ea 18 d2 f1 	orh	r8,0xd2f1
800066ca:	e0 69 62 4d 	mov	r9,25165
800066ce:	ea 19 3f 50 	orh	r9,0x3f50
800066d2:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800066d6:	ec fa 00 d8 	ld.w	r10,r6[216]
800066da:	30 08       	mov	r8,0
800066dc:	30 09       	mov	r9,0
800066de:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
800066e2:	ec fa 00 d8 	ld.w	r10,r6[216]
800066e6:	30 08       	mov	r8,0
800066e8:	30 09       	mov	r9,0
800066ea:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
800066ee:	ec fa 00 d8 	ld.w	r10,r6[216]
800066f2:	30 08       	mov	r8,0
800066f4:	30 09       	mov	r9,0
800066f6:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
800066fa:	ec fa 00 d8 	ld.w	r10,r6[216]
800066fe:	e0 68 a9 fc 	mov	r8,43516
80006702:	ea 18 d2 f1 	orh	r8,0xd2f1
80006706:	e0 69 62 4d 	mov	r9,25165
8000670a:	ea 19 3f 50 	orh	r9,0x3f50
8000670e:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80006712:	ec fa 01 50 	ld.w	r10,r6[336]
80006716:	e0 68 b0 21 	mov	r8,45089
8000671a:	ea 18 68 72 	orh	r8,0x6872
8000671e:	e0 69 ed 91 	mov	r9,60817
80006722:	ea 19 3f d8 	orh	r9,0x3fd8
80006726:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
8000672a:	ec fa 01 50 	ld.w	r10,r6[336]
8000672e:	e0 68 a1 62 	mov	r8,41314
80006732:	ea 18 34 d6 	orh	r8,0x34d6
80006736:	e0 69 38 ef 	mov	r9,14575
8000673a:	ea 19 3f e3 	orh	r9,0x3fe3
8000673e:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80006742:	ec fa 01 50 	ld.w	r10,r6[336]
80006746:	e0 68 6e 2f 	mov	r8,28207
8000674a:	ea 18 01 a3 	orh	r8,0x1a3
8000674e:	e0 69 05 bc 	mov	r9,1468
80006752:	ea 19 40 05 	orh	r9,0x4005
80006756:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
8000675a:	ec f8 00 00 	ld.w	r8,r6[0]
8000675e:	70 09       	ld.w	r9,r8[0x0]
80006760:	30 08       	mov	r8,0
80006762:	f3 68 0c 24 	st.b	r9[3108],r8
	
	timeLastGpsMsgEstimator = 0;
80006766:	ec f8 02 7c 	ld.w	r8,r6[636]
8000676a:	30 09       	mov	r9,0
8000676c:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
8000676e:	ec f9 02 c0 	ld.w	r9,r6[704]
80006772:	30 08       	mov	r8,0
80006774:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80006776:	f0 16 01 0d 	mcall	r6[1076]
}
8000677a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000677e:	00 00       	add	r0,r0
80006780:	80 00       	ld.sh	r0,r0[0x0]
80006782:	64 02       	ld.w	r2,r2[0x0]
80006784:	47 50       	lddsp	r0,sp[0x1d4]
80006786:	53 20       	stdsp	sp[0xc8],r0
80006788:	70 6f       	ld.w	pc,r8[0x18]
8000678a:	73 69       	ld.w	r9,r9[0x58]
8000678c:	74 69       	ld.w	r9,r10[0x18]
8000678e:	6f 6e       	ld.w	lr,r7[0x58]
80006790:	20 69       	sub	r9,6
80006792:	6e 69       	ld.w	r9,r7[0x18]
80006794:	74 69       	ld.w	r9,r10[0x18]
80006796:	61 6c       	ld.w	r12,r0[0x58]
80006798:	69 7a       	ld.w	r10,r4[0x5c]
8000679a:	65 64       	ld.w	r4,r2[0x58]
8000679c:	21 0a       	sub	r10,16
	...

800067a0 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
800067a0:	eb cd 40 c0 	pushm	r6-r7,lr
800067a4:	1a 97       	mov	r7,sp
800067a6:	49 f6       	lddpc	r6,80006820 <init_pos_gps_estimator+0x80>
800067a8:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
800067aa:	ec fc 02 7c 	ld.w	r12,r6[636]
800067ae:	f0 16 00 8f 	mcall	r6[572]
800067b2:	18 98       	mov	r8,r12
800067b4:	58 08       	cp.w	r8,0
800067b6:	c3 20       	breq	8000681a <init_pos_gps_estimator+0x7a>
800067b8:	ec f8 00 00 	ld.w	r8,r6[0]
800067bc:	70 08       	ld.w	r8,r8[0x0]
800067be:	f1 38 0c 24 	ld.ub	r8,r8[3108]
800067c2:	ec 18 00 01 	eorl	r8,0x1
800067c6:	5c 58       	castu.b	r8
800067c8:	c2 90       	breq	8000681a <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
800067ca:	ec f8 00 00 	ld.w	r8,r6[0]
800067ce:	70 09       	ld.w	r9,r8[0x0]
800067d0:	30 18       	mov	r8,1
800067d2:	f3 68 0c 24 	st.b	r9[3108],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
800067d6:	ec f8 00 00 	ld.w	r8,r6[0]
800067da:	70 0a       	ld.w	r10,r8[0x0]
800067dc:	ec f8 00 00 	ld.w	r8,r6[0]
800067e0:	70 08       	ld.w	r8,r8[0x0]
800067e2:	f0 e8 09 d0 	ld.d	r8,r8[2512]
800067e6:	f4 e9 0c 6c 	st.d	r10[3180],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
800067ea:	ec f8 00 00 	ld.w	r8,r6[0]
800067ee:	70 0a       	ld.w	r10,r8[0x0]
800067f0:	ec f8 00 00 	ld.w	r8,r6[0]
800067f4:	70 08       	ld.w	r8,r8[0x0]
800067f6:	f0 e8 09 c8 	ld.d	r8,r8[2504]
800067fa:	f4 e9 0c 74 	st.d	r10[3188],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
800067fe:	ec f8 00 00 	ld.w	r8,r6[0]
80006802:	70 08       	ld.w	r8,r8[0x0]
80006804:	ec f9 00 00 	ld.w	r9,r6[0]
80006808:	72 09       	ld.w	r9,r9[0x0]
8000680a:	f2 f9 09 d8 	ld.w	r9,r9[2520]
8000680e:	f1 49 0c 7c 	st.w	r8[3196],r9
		
		dbg_print("GPS position initialized!\n");
80006812:	fe cc 00 8e 	sub	r12,pc,142
80006816:	f0 16 00 01 	mcall	r6[4]
	}
}
8000681a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000681e:	00 00       	add	r0,r0
80006820:	80 00       	ld.sh	r0,r0[0x0]
80006822:	66 2c       	ld.w	r12,r3[0x8]

80006824 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80006824:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80006828:	1a 97       	mov	r7,sp
8000682a:	20 4d       	sub	sp,16
8000682c:	4d e6       	lddpc	r6,800069a4 <e_kalman_init+0x180>
8000682e:	1e 26       	rsub	r6,pc
80006830:	ef 4c ff f4 	st.w	r7[-12],r12
80006834:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80006838:	ec f8 00 00 	ld.w	r8,r6[0]
8000683c:	70 0a       	ld.w	r10,r8[0x0]
8000683e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006842:	12 98       	mov	r8,r9
80006844:	a1 78       	lsl	r8,0x1
80006846:	12 08       	add	r8,r9
80006848:	a3 78       	lsl	r8,0x3
8000684a:	f4 08 00 08 	add	r8,r10,r8
8000684e:	f0 ca f5 e4 	sub	r10,r8,-2588
80006852:	30 08       	mov	r8,0
80006854:	30 09       	mov	r9,0
80006856:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
8000685a:	ec f8 00 00 	ld.w	r8,r6[0]
8000685e:	70 0a       	ld.w	r10,r8[0x0]
80006860:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006864:	12 98       	mov	r8,r9
80006866:	a1 78       	lsl	r8,0x1
80006868:	12 08       	add	r8,r9
8000686a:	2f f8       	sub	r8,-1
8000686c:	a3 78       	lsl	r8,0x3
8000686e:	f4 08 00 08 	add	r8,r10,r8
80006872:	30 0a       	mov	r10,0
80006874:	30 0b       	mov	r11,0
80006876:	f0 eb 0a 1c 	st.d	r8[2588],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
8000687a:	ec f8 00 00 	ld.w	r8,r6[0]
8000687e:	70 03       	ld.w	r3,r8[0x0]
80006880:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006884:	ec f8 00 00 	ld.w	r8,r6[0]
80006888:	70 08       	ld.w	r8,r8[0x0]
8000688a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000688e:	2f d9       	sub	r9,-3
80006890:	2f 49       	sub	r9,-12
80006892:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006896:	10 9c       	mov	r12,r8
80006898:	f0 16 00 03 	mcall	r6[12]
8000689c:	0a 98       	mov	r8,r5
8000689e:	a1 78       	lsl	r8,0x1
800068a0:	0a 08       	add	r8,r5
800068a2:	a3 78       	lsl	r8,0x3
800068a4:	e6 08 00 08 	add	r8,r3,r8
800068a8:	f0 c8 f5 d4 	sub	r8,r8,-2604
800068ac:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
800068b0:	30 08       	mov	r8,0
800068b2:	ef 48 ff f8 	st.w	r7[-8],r8
800068b6:	c6 e8       	rjmp	80006992 <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
800068b8:	30 08       	mov	r8,0
800068ba:	ef 48 ff fc 	st.w	r7[-4],r8
800068be:	c3 28       	rjmp	80006922 <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
800068c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800068c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800068cc:	ec fb 00 18 	ld.w	r11,r6[24]
800068d0:	10 99       	mov	r9,r8
800068d2:	a1 79       	lsl	r9,0x1
800068d4:	10 09       	add	r9,r8
800068d6:	14 98       	mov	r8,r10
800068d8:	a3 78       	lsl	r8,0x3
800068da:	14 08       	add	r8,r10
800068dc:	f2 08 00 08 	add	r8,r9,r8
800068e0:	f0 0c 00 0a 	add	r10,r8,r12
800068e4:	30 08       	mov	r8,0
800068e6:	30 09       	mov	r9,0
800068e8:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
800068ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800068f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800068f8:	ec fb 00 1c 	ld.w	r11,r6[28]
800068fc:	10 99       	mov	r9,r8
800068fe:	a1 79       	lsl	r9,0x1
80006900:	10 09       	add	r9,r8
80006902:	14 98       	mov	r8,r10
80006904:	a3 78       	lsl	r8,0x3
80006906:	14 08       	add	r8,r10
80006908:	f2 08 00 08 	add	r8,r9,r8
8000690c:	f0 0c 00 0a 	add	r10,r8,r12
80006910:	30 08       	mov	r8,0
80006912:	30 09       	mov	r9,0
80006914:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80006918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000691c:	2f f8       	sub	r8,-1
8000691e:	ef 48 ff fc 	st.w	r7[-4],r8
80006922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006926:	58 28       	cp.w	r8,2
80006928:	fe 9a ff cc 	brle	800068c0 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
8000692c:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006930:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006934:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006938:	ee fc ff f0 	ld.w	r12,r7[-16]
8000693c:	f0 16 00 03 	mcall	r6[12]
80006940:	ec fc 00 18 	ld.w	r12,r6[24]
80006944:	06 99       	mov	r9,r3
80006946:	a1 79       	lsl	r9,0x1
80006948:	06 09       	add	r9,r3
8000694a:	0a 98       	mov	r8,r5
8000694c:	a3 78       	lsl	r8,0x3
8000694e:	0a 08       	add	r8,r5
80006950:	f2 08 00 08 	add	r8,r9,r8
80006954:	04 08       	add	r8,r2
80006956:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
8000695a:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000695e:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006962:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006966:	ee fc ff f0 	ld.w	r12,r7[-16]
8000696a:	f0 16 00 03 	mcall	r6[12]
8000696e:	ec fc 00 1c 	ld.w	r12,r6[28]
80006972:	06 99       	mov	r9,r3
80006974:	a1 79       	lsl	r9,0x1
80006976:	06 09       	add	r9,r3
80006978:	0a 98       	mov	r8,r5
8000697a:	a3 78       	lsl	r8,0x3
8000697c:	0a 08       	add	r8,r5
8000697e:	f2 08 00 08 	add	r8,r9,r8
80006982:	04 08       	add	r8,r2
80006984:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
80006988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000698c:	2f f8       	sub	r8,-1
8000698e:	ef 48 ff f8 	st.w	r7[-8],r8
80006992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006996:	58 28       	cp.w	r8,2
80006998:	fe 9a ff 90 	brle	800068b8 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
8000699c:	2f cd       	sub	sp,-16
8000699e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800069a2:	00 00       	add	r0,r0
800069a4:	80 00       	ld.sh	r0,r0[0x0]
800069a6:	66 b2       	ld.w	r2,r3[0x2c]

800069a8 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
800069a8:	eb cd 40 c0 	pushm	r6-r7,lr
800069ac:	1a 97       	mov	r7,sp
800069ae:	21 9d       	sub	sp,100
800069b0:	fe f6 03 00 	ld.w	r6,pc[768]
800069b4:	1e 26       	rsub	r6,pc
800069b6:	ef 4c ff a4 	st.w	r7[-92],r12
800069ba:	ef 4b ff a0 	st.w	r7[-96],r11
800069be:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
800069c2:	ee f9 ff a4 	ld.w	r9,r7[-92]
800069c6:	ee c8 00 40 	sub	r8,r7,64
800069ca:	20 08       	sub	r8,0
800069cc:	20 09       	sub	r9,0
800069ce:	72 0a       	ld.w	r10,r9[0x0]
800069d0:	91 0a       	st.w	r8[0x0],r10
800069d2:	72 1a       	ld.w	r10,r9[0x4]
800069d4:	91 1a       	st.w	r8[0x4],r10
800069d6:	72 2a       	ld.w	r10,r9[0x8]
800069d8:	91 2a       	st.w	r8[0x8],r10
800069da:	72 39       	ld.w	r9,r9[0xc]
800069dc:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
800069de:	30 08       	mov	r8,0
800069e0:	ef 48 ff f0 	st.w	r7[-16],r8
800069e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800069e8:	70 08       	ld.w	r8,r8[0x0]
800069ea:	ef 48 ff f4 	st.w	r7[-12],r8
800069ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
800069f2:	2f c8       	sub	r8,-4
800069f4:	70 08       	ld.w	r8,r8[0x0]
800069f6:	ef 48 ff f8 	st.w	r7[-8],r8
800069fa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800069fe:	2f 88       	sub	r8,-8
80006a00:	70 08       	ld.w	r8,r8[0x0]
80006a02:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80006a06:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006a0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a0e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a12:	ee fa ff cc 	ld.w	r10,r7[-52]
80006a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a1a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a1e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a22:	ef 48 ff b4 	st.w	r7[-76],r8
80006a26:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006a2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a32:	ee fa ff c4 	ld.w	r10,r7[-60]
80006a36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a3a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a3e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a42:	ef 48 ff b8 	st.w	r7[-72],r8
80006a46:	ee f9 ff c4 	ld.w	r9,r7[-60]
80006a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a52:	ee fa ff c8 	ld.w	r10,r7[-56]
80006a56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a5a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a5e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a62:	ef 48 ff bc 	st.w	r7[-68],r8
80006a66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a6a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006a6e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a72:	ee fa ff c0 	ld.w	r10,r7[-64]
80006a76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a7a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a7e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006a82:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006a86:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006a8a:	ef 48 ff e4 	st.w	r7[-28],r8
80006a8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a92:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006a96:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a9a:	ee fa ff c0 	ld.w	r10,r7[-64]
80006a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006aa2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006aa6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006aaa:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006aae:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006ab2:	ef 48 ff e8 	st.w	r7[-24],r8
80006ab6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006aba:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006abe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ac2:	ee fa ff c0 	ld.w	r10,r7[-64]
80006ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006aca:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ace:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ad2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006ad6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006ada:	ef 48 ff ec 	st.w	r7[-20],r8
80006ade:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006ae2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006ae6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006aea:	ee fa ff c4 	ld.w	r10,r7[-60]
80006aee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006af2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006af6:	ee fb ff c8 	ld.w	r11,r7[-56]
80006afa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006afe:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006b02:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006b06:	ee fb ff cc 	ld.w	r11,r7[-52]
80006b0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006b0e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006b12:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006b16:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006b1a:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80006b1e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006b22:	ef 48 ff f0 	st.w	r7[-16],r8
80006b26:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006b2a:	ee 18 80 00 	eorh	r8,0x8000
80006b2e:	ef 48 ff f4 	st.w	r7[-12],r8
80006b32:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006b36:	ee 18 80 00 	eorh	r8,0x8000
80006b3a:	ef 48 ff f8 	st.w	r7[-8],r8
80006b3e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006b42:	ee 18 80 00 	eorh	r8,0x8000
80006b46:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80006b4a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006b52:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006b56:	ee fa ff ec 	ld.w	r10,r7[-20]
80006b5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006b5e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006b62:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006b66:	ef 48 ff b4 	st.w	r7[-76],r8
80006b6a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006b6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b72:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006b76:	ee fa ff e4 	ld.w	r10,r7[-28]
80006b7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006b7e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006b82:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006b86:	ef 48 ff b8 	st.w	r7[-72],r8
80006b8a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006b8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006b92:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006b96:	ee fa ff e8 	ld.w	r10,r7[-24]
80006b9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b9e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ba2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006ba6:	ef 48 ff bc 	st.w	r7[-68],r8
80006baa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006bae:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bb2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006bb6:	ee fa ff e0 	ld.w	r10,r7[-32]
80006bba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006bbe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006bc2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006bc6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006bca:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006bce:	ef 48 ff d4 	st.w	r7[-44],r8
80006bd2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006bd6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006bda:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006bde:	ee fa ff e0 	ld.w	r10,r7[-32]
80006be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006be6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006bea:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006bee:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006bf2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006bf6:	ef 48 ff d8 	st.w	r7[-40],r8
80006bfa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006bfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006c02:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006c06:	ee fa ff e0 	ld.w	r10,r7[-32]
80006c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c0e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c12:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006c16:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006c1a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006c1e:	ef 48 ff dc 	st.w	r7[-36],r8
80006c22:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006c26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c2a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006c2e:	ee fa ff e4 	ld.w	r10,r7[-28]
80006c32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c36:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006c3a:	ee fb ff e8 	ld.w	r11,r7[-24]
80006c3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c42:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006c46:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006c4a:	ee fb ff ec 	ld.w	r11,r7[-20]
80006c4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c52:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006c56:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006c5a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006c5e:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80006c62:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006c66:	ef 48 ff a8 	st.w	r7[-88],r8
80006c6a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006c6e:	ef 48 ff ac 	st.w	r7[-84],r8
80006c72:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006c76:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80006c7a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006c7e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006c82:	10 9b       	mov	r11,r8
80006c84:	30 0c       	mov	r12,0
80006c86:	f0 16 00 c3 	mcall	r6[780]
	e_kalman_predict(Y,acc_glo[Y],dt);
80006c8a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006c8e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006c92:	10 9b       	mov	r11,r8
80006c94:	30 1c       	mov	r12,1
80006c96:	f0 16 00 c3 	mcall	r6[780]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80006c9a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006c9e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006ca2:	10 9b       	mov	r11,r8
80006ca4:	30 2c       	mov	r12,2
80006ca6:	f0 16 00 c3 	mcall	r6[780]
}
80006caa:	2e 7d       	sub	sp,-100
80006cac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006cb0:	80 00       	ld.sh	r0,r0[0x0]
80006cb2:	68 38       	ld.w	r8,r4[0xc]

80006cb4 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80006cb4:	eb cd 40 80 	pushm	r7,lr
80006cb8:	1a 97       	mov	r7,sp
80006cba:	20 8d       	sub	sp,32
80006cbc:	ef 4c ff e4 	st.w	r7[-28],r12
80006cc0:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80006cc4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006cc8:	70 29       	ld.w	r9,r8[0x8]
80006cca:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cce:	2f 88       	sub	r8,-8
80006cd0:	70 08       	ld.w	r8,r8[0x0]
80006cd2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006cd6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006cda:	70 3a       	ld.w	r10,r8[0xc]
80006cdc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006ce0:	2f c8       	sub	r8,-4
80006ce2:	70 08       	ld.w	r8,r8[0x0]
80006ce4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ce8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006cec:	ef 48 ff f4 	st.w	r7[-12],r8
80006cf0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006cf4:	70 39       	ld.w	r9,r8[0xc]
80006cf6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cfa:	70 08       	ld.w	r8,r8[0x0]
80006cfc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d00:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d04:	70 1a       	ld.w	r10,r8[0x4]
80006d06:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d0a:	2f 88       	sub	r8,-8
80006d0c:	70 08       	ld.w	r8,r8[0x0]
80006d0e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d12:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d16:	ef 48 ff f8 	st.w	r7[-8],r8
80006d1a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d1e:	70 19       	ld.w	r9,r8[0x4]
80006d20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d24:	2f c8       	sub	r8,-4
80006d26:	70 08       	ld.w	r8,r8[0x0]
80006d28:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d30:	70 2a       	ld.w	r10,r8[0x8]
80006d32:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d36:	70 08       	ld.w	r8,r8[0x0]
80006d38:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d3c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d40:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80006d44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006d48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d4c:	70 0a       	ld.w	r10,r8[0x0]
80006d4e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d52:	70 08       	ld.w	r8,r8[0x0]
80006d54:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d58:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006d5c:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80006d60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d64:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d68:	70 0a       	ld.w	r10,r8[0x0]
80006d6a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d6e:	2f c8       	sub	r8,-4
80006d70:	70 08       	ld.w	r8,r8[0x0]
80006d72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d76:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006d7a:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80006d7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d82:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d86:	70 0a       	ld.w	r10,r8[0x0]
80006d88:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006d8c:	2f 88       	sub	r8,-8
80006d8e:	70 08       	ld.w	r8,r8[0x0]
80006d90:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d94:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006d98:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
80006d9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006da0:	70 29       	ld.w	r9,r8[0x8]
80006da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006da6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006daa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006dae:	70 3a       	ld.w	r10,r8[0xc]
80006db0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006db4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006db8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006dbc:	ef 48 ff e8 	st.w	r7[-24],r8
80006dc0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006dc4:	70 39       	ld.w	r9,r8[0xc]
80006dc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006dca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006dce:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006dd2:	70 1a       	ld.w	r10,r8[0x4]
80006dd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006dd8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ddc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006de0:	ef 48 ff ec 	st.w	r7[-20],r8
80006de4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006de8:	70 19       	ld.w	r9,r8[0x4]
80006dea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006df2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006df6:	70 2a       	ld.w	r10,r8[0x8]
80006df8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006dfc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e00:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e04:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80006e08:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006e0c:	70 09       	ld.w	r9,r8[0x0]
80006e0e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006e12:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006e16:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006e1a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006e1e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006e22:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80006e24:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006e28:	2f c8       	sub	r8,-4
80006e2a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006e2e:	2f c9       	sub	r9,-4
80006e30:	72 0a       	ld.w	r10,r9[0x0]
80006e32:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006e36:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006e3a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006e3e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006e42:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80006e44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006e48:	2f 88       	sub	r8,-8
80006e4a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006e4e:	2f 89       	sub	r9,-8
80006e50:	72 0a       	ld.w	r10,r9[0x0]
80006e52:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e56:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006e5a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006e5e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006e62:	91 09       	st.w	r8[0x0],r9
}
80006e64:	2f 8d       	sub	sp,-32
80006e66:	e3 cd 80 80 	ldm	sp++,r7,pc

80006e6a <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80006e6a:	d4 31       	pushm	r0-r7,lr
80006e6c:	1a 97       	mov	r7,sp
80006e6e:	fa cd 00 cc 	sub	sp,sp,204
80006e72:	fe f6 0d 02 	ld.w	r6,pc[3330]
80006e76:	1e 26       	rsub	r6,pc
80006e78:	ef 4c ff ac 	st.w	r7[-84],r12
80006e7c:	ef 4b ff a8 	st.w	r7[-88],r11
80006e80:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80006e84:	ec f8 00 00 	ld.w	r8,r6[0]
80006e88:	70 01       	ld.w	r1,r8[0x0]
80006e8a:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006e8e:	ec f8 00 00 	ld.w	r8,r6[0]
80006e92:	70 0a       	ld.w	r10,r8[0x0]
80006e94:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e98:	12 98       	mov	r8,r9
80006e9a:	a1 78       	lsl	r8,0x1
80006e9c:	12 08       	add	r8,r9
80006e9e:	2f f8       	sub	r8,-1
80006ea0:	a3 78       	lsl	r8,0x3
80006ea2:	f4 08 00 08 	add	r8,r10,r8
80006ea6:	f0 e2 0a 1c 	ld.d	r2,r8[2588]
80006eaa:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006eae:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006eb2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006eb6:	10 9c       	mov	r12,r8
80006eb8:	f0 16 00 03 	mcall	r6[12]
80006ebc:	14 98       	mov	r8,r10
80006ebe:	16 99       	mov	r9,r11
80006ec0:	04 9a       	mov	r10,r2
80006ec2:	06 9b       	mov	r11,r3
80006ec4:	f0 16 00 05 	mcall	r6[20]
80006ec8:	14 98       	mov	r8,r10
80006eca:	16 99       	mov	r9,r11
80006ecc:	10 9a       	mov	r10,r8
80006ece:	12 9b       	mov	r11,r9
80006ed0:	0a 98       	mov	r8,r5
80006ed2:	a1 78       	lsl	r8,0x1
80006ed4:	0a 08       	add	r8,r5
80006ed6:	2f f8       	sub	r8,-1
80006ed8:	a3 78       	lsl	r8,0x3
80006eda:	e2 08 00 08 	add	r8,r1,r8
80006ede:	f0 eb 0a 1c 	st.d	r8[2588],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80006ee2:	ec f8 00 00 	ld.w	r8,r6[0]
80006ee6:	70 01       	ld.w	r1,r8[0x0]
80006ee8:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006eec:	ec f8 00 00 	ld.w	r8,r6[0]
80006ef0:	70 0a       	ld.w	r10,r8[0x0]
80006ef2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ef6:	12 98       	mov	r8,r9
80006ef8:	a1 78       	lsl	r8,0x1
80006efa:	12 08       	add	r8,r9
80006efc:	a3 78       	lsl	r8,0x3
80006efe:	f4 08 00 08 	add	r8,r10,r8
80006f02:	f0 c8 f5 e4 	sub	r8,r8,-2588
80006f06:	f0 e2 00 00 	ld.d	r2,r8[0]
80006f0a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f0e:	f0 16 00 03 	mcall	r6[12]
80006f12:	ec f8 00 00 	ld.w	r8,r6[0]
80006f16:	70 0c       	ld.w	r12,r8[0x0]
80006f18:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f1c:	12 98       	mov	r8,r9
80006f1e:	a1 78       	lsl	r8,0x1
80006f20:	12 08       	add	r8,r9
80006f22:	2f f8       	sub	r8,-1
80006f24:	a3 78       	lsl	r8,0x3
80006f26:	f8 08 00 08 	add	r8,r12,r8
80006f2a:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
80006f2e:	f0 16 00 02 	mcall	r6[8]
80006f32:	14 98       	mov	r8,r10
80006f34:	16 99       	mov	r9,r11
80006f36:	04 9a       	mov	r10,r2
80006f38:	06 9b       	mov	r11,r3
80006f3a:	f0 16 00 05 	mcall	r6[20]
80006f3e:	14 98       	mov	r8,r10
80006f40:	16 99       	mov	r9,r11
80006f42:	10 9a       	mov	r10,r8
80006f44:	12 9b       	mov	r11,r9
80006f46:	0a 98       	mov	r8,r5
80006f48:	a1 78       	lsl	r8,0x1
80006f4a:	0a 08       	add	r8,r5
80006f4c:	a3 78       	lsl	r8,0x3
80006f4e:	e2 08 00 08 	add	r8,r1,r8
80006f52:	f0 c8 f5 e4 	sub	r8,r8,-2588
80006f56:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80006f5a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f5e:	ec fa 00 18 	ld.w	r10,r6[24]
80006f62:	12 98       	mov	r8,r9
80006f64:	a3 78       	lsl	r8,0x3
80006f66:	12 08       	add	r8,r9
80006f68:	a3 78       	lsl	r8,0x3
80006f6a:	f4 08 00 08 	add	r8,r10,r8
80006f6e:	f0 ea 00 00 	ld.d	r10,r8[0]
80006f72:	ee eb ff 34 	st.d	r7[-204],r10
80006f76:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f7a:	f0 16 00 03 	mcall	r6[12]
80006f7e:	14 90       	mov	r0,r10
80006f80:	16 91       	mov	r1,r11
80006f82:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f86:	ec fa 00 18 	ld.w	r10,r6[24]
80006f8a:	12 98       	mov	r8,r9
80006f8c:	a3 78       	lsl	r8,0x3
80006f8e:	12 08       	add	r8,r9
80006f90:	a3 78       	lsl	r8,0x3
80006f92:	f4 08 00 08 	add	r8,r10,r8
80006f96:	2e 88       	sub	r8,-24
80006f98:	f0 ea 00 00 	ld.d	r10,r8[0]
80006f9c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006fa0:	ec fc 00 18 	ld.w	r12,r6[24]
80006fa4:	12 98       	mov	r8,r9
80006fa6:	a3 78       	lsl	r8,0x3
80006fa8:	12 08       	add	r8,r9
80006faa:	2f f8       	sub	r8,-1
80006fac:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80006fb0:	f0 16 00 05 	mcall	r6[20]
80006fb4:	14 98       	mov	r8,r10
80006fb6:	16 99       	mov	r9,r11
80006fb8:	10 92       	mov	r2,r8
80006fba:	12 93       	mov	r3,r9
80006fbc:	ee fc ff a4 	ld.w	r12,r7[-92]
80006fc0:	f0 16 00 03 	mcall	r6[12]
80006fc4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006fc8:	ec fc 00 18 	ld.w	r12,r6[24]
80006fcc:	12 98       	mov	r8,r9
80006fce:	a3 78       	lsl	r8,0x3
80006fd0:	12 08       	add	r8,r9
80006fd2:	a3 78       	lsl	r8,0x3
80006fd4:	f8 08 00 08 	add	r8,r12,r8
80006fd8:	2e 08       	sub	r8,-32
80006fda:	f0 e8 00 00 	ld.d	r8,r8[0]
80006fde:	f0 16 00 02 	mcall	r6[8]
80006fe2:	14 98       	mov	r8,r10
80006fe4:	16 99       	mov	r9,r11
80006fe6:	04 9a       	mov	r10,r2
80006fe8:	06 9b       	mov	r11,r3
80006fea:	f0 16 00 05 	mcall	r6[20]
80006fee:	14 98       	mov	r8,r10
80006ff0:	16 99       	mov	r9,r11
80006ff2:	00 9a       	mov	r10,r0
80006ff4:	02 9b       	mov	r11,r1
80006ff6:	f0 16 00 02 	mcall	r6[8]
80006ffa:	14 98       	mov	r8,r10
80006ffc:	16 99       	mov	r9,r11
80006ffe:	ee ea ff 34 	ld.d	r10,r7[-204]
80007002:	f0 16 00 05 	mcall	r6[20]
80007006:	14 98       	mov	r8,r10
80007008:	16 99       	mov	r9,r11
8000700a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
8000700e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007012:	ec fa 00 18 	ld.w	r10,r6[24]
80007016:	12 98       	mov	r8,r9
80007018:	a3 78       	lsl	r8,0x3
8000701a:	12 08       	add	r8,r9
8000701c:	2f f8       	sub	r8,-1
8000701e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007022:	ee e5 ff 3c 	st.d	r7[-196],r4
80007026:	ee fc ff a4 	ld.w	r12,r7[-92]
8000702a:	f0 16 00 03 	mcall	r6[12]
8000702e:	14 90       	mov	r0,r10
80007030:	16 91       	mov	r1,r11
80007032:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007036:	ec fa 00 18 	ld.w	r10,r6[24]
8000703a:	12 98       	mov	r8,r9
8000703c:	a3 78       	lsl	r8,0x3
8000703e:	12 08       	add	r8,r9
80007040:	a3 78       	lsl	r8,0x3
80007042:	f4 08 00 08 	add	r8,r10,r8
80007046:	2e 08       	sub	r8,-32
80007048:	f0 ea 00 00 	ld.d	r10,r8[0]
8000704c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007050:	ec fc 00 18 	ld.w	r12,r6[24]
80007054:	12 98       	mov	r8,r9
80007056:	a3 78       	lsl	r8,0x3
80007058:	12 08       	add	r8,r9
8000705a:	a3 78       	lsl	r8,0x3
8000705c:	f8 08 00 08 	add	r8,r12,r8
80007060:	2f 08       	sub	r8,-16
80007062:	f0 e8 00 00 	ld.d	r8,r8[0]
80007066:	f0 16 00 12 	mcall	r6[72]
8000706a:	14 98       	mov	r8,r10
8000706c:	16 99       	mov	r9,r11
8000706e:	10 92       	mov	r2,r8
80007070:	12 93       	mov	r3,r9
80007072:	ee fc ff a4 	ld.w	r12,r7[-92]
80007076:	f0 16 00 03 	mcall	r6[12]
8000707a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000707e:	ec fc 00 18 	ld.w	r12,r6[24]
80007082:	12 98       	mov	r8,r9
80007084:	a3 78       	lsl	r8,0x3
80007086:	12 08       	add	r8,r9
80007088:	a3 78       	lsl	r8,0x3
8000708a:	f8 08 00 08 	add	r8,r12,r8
8000708e:	2d 88       	sub	r8,-40
80007090:	f0 e8 00 00 	ld.d	r8,r8[0]
80007094:	f0 16 00 02 	mcall	r6[8]
80007098:	14 98       	mov	r8,r10
8000709a:	16 99       	mov	r9,r11
8000709c:	04 9a       	mov	r10,r2
8000709e:	06 9b       	mov	r11,r3
800070a0:	f0 16 00 12 	mcall	r6[72]
800070a4:	14 98       	mov	r8,r10
800070a6:	16 99       	mov	r9,r11
800070a8:	00 9a       	mov	r10,r0
800070aa:	02 9b       	mov	r11,r1
800070ac:	f0 16 00 02 	mcall	r6[8]
800070b0:	14 98       	mov	r8,r10
800070b2:	16 99       	mov	r9,r11
800070b4:	ee ea ff 3c 	ld.d	r10,r7[-196]
800070b8:	f0 16 00 05 	mcall	r6[20]
800070bc:	14 98       	mov	r8,r10
800070be:	16 99       	mov	r9,r11
800070c0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
800070c4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070c8:	ec fa 00 18 	ld.w	r10,r6[24]
800070cc:	12 98       	mov	r8,r9
800070ce:	a3 78       	lsl	r8,0x3
800070d0:	12 08       	add	r8,r9
800070d2:	a3 78       	lsl	r8,0x3
800070d4:	f4 08 00 08 	add	r8,r10,r8
800070d8:	2f 08       	sub	r8,-16
800070da:	f0 e2 00 00 	ld.d	r2,r8[0]
800070de:	ee fc ff a4 	ld.w	r12,r7[-92]
800070e2:	f0 16 00 03 	mcall	r6[12]
800070e6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070ea:	ec fc 00 18 	ld.w	r12,r6[24]
800070ee:	12 98       	mov	r8,r9
800070f0:	a3 78       	lsl	r8,0x3
800070f2:	12 08       	add	r8,r9
800070f4:	a3 78       	lsl	r8,0x3
800070f6:	f8 08 00 08 	add	r8,r12,r8
800070fa:	2d 88       	sub	r8,-40
800070fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80007100:	f0 16 00 02 	mcall	r6[8]
80007104:	14 98       	mov	r8,r10
80007106:	16 99       	mov	r9,r11
80007108:	04 9a       	mov	r10,r2
8000710a:	06 9b       	mov	r11,r3
8000710c:	f0 16 00 05 	mcall	r6[20]
80007110:	14 98       	mov	r8,r10
80007112:	16 99       	mov	r9,r11
80007114:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80007118:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000711c:	ec fa 00 18 	ld.w	r10,r6[24]
80007120:	12 98       	mov	r8,r9
80007122:	a3 78       	lsl	r8,0x3
80007124:	12 08       	add	r8,r9
80007126:	a3 78       	lsl	r8,0x3
80007128:	f4 08 00 08 	add	r8,r10,r8
8000712c:	2e 88       	sub	r8,-24
8000712e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007132:	ee eb ff 44 	st.d	r7[-188],r10
80007136:	ee fc ff a4 	ld.w	r12,r7[-92]
8000713a:	f0 16 00 03 	mcall	r6[12]
8000713e:	14 90       	mov	r0,r10
80007140:	16 91       	mov	r1,r11
80007142:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007146:	ec fa 00 18 	ld.w	r10,r6[24]
8000714a:	12 98       	mov	r8,r9
8000714c:	a3 78       	lsl	r8,0x3
8000714e:	12 08       	add	r8,r9
80007150:	a3 78       	lsl	r8,0x3
80007152:	f4 08 00 08 	add	r8,r10,r8
80007156:	2e 08       	sub	r8,-32
80007158:	f0 ea 00 00 	ld.d	r10,r8[0]
8000715c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007160:	ec fc 00 18 	ld.w	r12,r6[24]
80007164:	12 98       	mov	r8,r9
80007166:	a3 78       	lsl	r8,0x3
80007168:	12 08       	add	r8,r9
8000716a:	a3 78       	lsl	r8,0x3
8000716c:	f8 08 00 08 	add	r8,r12,r8
80007170:	2d 08       	sub	r8,-48
80007172:	f0 e8 00 00 	ld.d	r8,r8[0]
80007176:	f0 16 00 12 	mcall	r6[72]
8000717a:	14 98       	mov	r8,r10
8000717c:	16 99       	mov	r9,r11
8000717e:	10 92       	mov	r2,r8
80007180:	12 93       	mov	r3,r9
80007182:	ee fc ff a4 	ld.w	r12,r7[-92]
80007186:	f0 16 00 03 	mcall	r6[12]
8000718a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000718e:	ec fc 00 18 	ld.w	r12,r6[24]
80007192:	12 98       	mov	r8,r9
80007194:	a3 78       	lsl	r8,0x3
80007196:	12 08       	add	r8,r9
80007198:	a3 78       	lsl	r8,0x3
8000719a:	f8 08 00 08 	add	r8,r12,r8
8000719e:	2c 88       	sub	r8,-56
800071a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800071a4:	f0 16 00 02 	mcall	r6[8]
800071a8:	14 98       	mov	r8,r10
800071aa:	16 99       	mov	r9,r11
800071ac:	04 9a       	mov	r10,r2
800071ae:	06 9b       	mov	r11,r3
800071b0:	f0 16 00 12 	mcall	r6[72]
800071b4:	14 98       	mov	r8,r10
800071b6:	16 99       	mov	r9,r11
800071b8:	00 9a       	mov	r10,r0
800071ba:	02 9b       	mov	r11,r1
800071bc:	f0 16 00 02 	mcall	r6[8]
800071c0:	14 98       	mov	r8,r10
800071c2:	16 99       	mov	r9,r11
800071c4:	ee ea ff 44 	ld.d	r10,r7[-188]
800071c8:	f0 16 00 05 	mcall	r6[20]
800071cc:	14 98       	mov	r8,r10
800071ce:	16 99       	mov	r9,r11
800071d0:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
800071d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071d8:	ec fa 00 18 	ld.w	r10,r6[24]
800071dc:	12 98       	mov	r8,r9
800071de:	a3 78       	lsl	r8,0x3
800071e0:	12 08       	add	r8,r9
800071e2:	a3 78       	lsl	r8,0x3
800071e4:	f4 08 00 08 	add	r8,r10,r8
800071e8:	2e 08       	sub	r8,-32
800071ea:	f0 e4 00 00 	ld.d	r4,r8[0]
800071ee:	ee e5 ff 4c 	st.d	r7[-180],r4
800071f2:	ee fc ff a4 	ld.w	r12,r7[-92]
800071f6:	f0 16 00 03 	mcall	r6[12]
800071fa:	14 90       	mov	r0,r10
800071fc:	16 91       	mov	r1,r11
800071fe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007202:	ec fa 00 18 	ld.w	r10,r6[24]
80007206:	12 98       	mov	r8,r9
80007208:	a3 78       	lsl	r8,0x3
8000720a:	12 08       	add	r8,r9
8000720c:	a3 78       	lsl	r8,0x3
8000720e:	f4 08 00 08 	add	r8,r10,r8
80007212:	2c 88       	sub	r8,-56
80007214:	f0 e8 00 00 	ld.d	r8,r8[0]
80007218:	12 94       	mov	r4,r9
8000721a:	ee 14 80 00 	eorh	r4,0x8000
8000721e:	ef 44 ff 54 	st.w	r7[-172],r4
80007222:	10 9c       	mov	r12,r8
80007224:	ef 4c ff 58 	st.w	r7[-168],r12
80007228:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000722c:	ec fa 00 18 	ld.w	r10,r6[24]
80007230:	12 98       	mov	r8,r9
80007232:	a3 78       	lsl	r8,0x3
80007234:	12 08       	add	r8,r9
80007236:	a3 78       	lsl	r8,0x3
80007238:	f4 08 00 08 	add	r8,r10,r8
8000723c:	2d 88       	sub	r8,-40
8000723e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007242:	ee ea ff 54 	ld.d	r10,r7[-172]
80007246:	f0 16 00 12 	mcall	r6[72]
8000724a:	14 98       	mov	r8,r10
8000724c:	16 99       	mov	r9,r11
8000724e:	10 92       	mov	r2,r8
80007250:	12 93       	mov	r3,r9
80007252:	ee fc ff a4 	ld.w	r12,r7[-92]
80007256:	f0 16 00 03 	mcall	r6[12]
8000725a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000725e:	ec fc 00 18 	ld.w	r12,r6[24]
80007262:	12 98       	mov	r8,r9
80007264:	a3 78       	lsl	r8,0x3
80007266:	12 08       	add	r8,r9
80007268:	a3 78       	lsl	r8,0x3
8000726a:	f8 08 00 08 	add	r8,r12,r8
8000726e:	2c 08       	sub	r8,-64
80007270:	f0 e8 00 00 	ld.d	r8,r8[0]
80007274:	f0 16 00 02 	mcall	r6[8]
80007278:	14 98       	mov	r8,r10
8000727a:	16 99       	mov	r9,r11
8000727c:	04 9a       	mov	r10,r2
8000727e:	06 9b       	mov	r11,r3
80007280:	f0 16 00 05 	mcall	r6[20]
80007284:	14 98       	mov	r8,r10
80007286:	16 99       	mov	r9,r11
80007288:	00 9a       	mov	r10,r0
8000728a:	02 9b       	mov	r11,r1
8000728c:	f0 16 00 02 	mcall	r6[8]
80007290:	14 98       	mov	r8,r10
80007292:	16 99       	mov	r9,r11
80007294:	ee ea ff 4c 	ld.d	r10,r7[-180]
80007298:	f0 16 00 05 	mcall	r6[20]
8000729c:	14 98       	mov	r8,r10
8000729e:	16 99       	mov	r9,r11
800072a0:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
800072a4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072a8:	ec fa 00 18 	ld.w	r10,r6[24]
800072ac:	12 98       	mov	r8,r9
800072ae:	a3 78       	lsl	r8,0x3
800072b0:	12 08       	add	r8,r9
800072b2:	a3 78       	lsl	r8,0x3
800072b4:	f4 08 00 08 	add	r8,r10,r8
800072b8:	2d 88       	sub	r8,-40
800072ba:	f0 e0 00 00 	ld.d	r0,r8[0]
800072be:	ee fc ff a4 	ld.w	r12,r7[-92]
800072c2:	f0 16 00 03 	mcall	r6[12]
800072c6:	14 92       	mov	r2,r10
800072c8:	16 93       	mov	r3,r11
800072ca:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072ce:	ec fa 00 18 	ld.w	r10,r6[24]
800072d2:	12 98       	mov	r8,r9
800072d4:	a3 78       	lsl	r8,0x3
800072d6:	12 08       	add	r8,r9
800072d8:	a3 78       	lsl	r8,0x3
800072da:	f4 08 00 08 	add	r8,r10,r8
800072de:	2c 08       	sub	r8,-64
800072e0:	f0 e8 00 00 	ld.d	r8,r8[0]
800072e4:	12 9b       	mov	r11,r9
800072e6:	ee 1b 80 00 	eorh	r11,0x8000
800072ea:	ef 4b ff 5c 	st.w	r7[-164],r11
800072ee:	10 9a       	mov	r10,r8
800072f0:	ef 4a ff 60 	st.w	r7[-160],r10
800072f4:	ee e8 ff 5c 	ld.d	r8,r7[-164]
800072f8:	04 9a       	mov	r10,r2
800072fa:	06 9b       	mov	r11,r3
800072fc:	f0 16 00 02 	mcall	r6[8]
80007300:	14 98       	mov	r8,r10
80007302:	16 99       	mov	r9,r11
80007304:	00 9a       	mov	r10,r0
80007306:	02 9b       	mov	r11,r1
80007308:	f0 16 00 05 	mcall	r6[20]
8000730c:	14 98       	mov	r8,r10
8000730e:	16 99       	mov	r9,r11
80007310:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
80007314:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007318:	ec fa 00 18 	ld.w	r10,r6[24]
8000731c:	12 98       	mov	r8,r9
8000731e:	a3 78       	lsl	r8,0x3
80007320:	12 08       	add	r8,r9
80007322:	a3 78       	lsl	r8,0x3
80007324:	f4 08 00 08 	add	r8,r10,r8
80007328:	2d 08       	sub	r8,-48
8000732a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000732e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007332:	f0 16 00 03 	mcall	r6[12]
80007336:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000733a:	ec fc 00 18 	ld.w	r12,r6[24]
8000733e:	12 98       	mov	r8,r9
80007340:	a3 78       	lsl	r8,0x3
80007342:	12 08       	add	r8,r9
80007344:	a3 78       	lsl	r8,0x3
80007346:	f8 08 00 08 	add	r8,r12,r8
8000734a:	2c 88       	sub	r8,-56
8000734c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007350:	f0 16 00 02 	mcall	r6[8]
80007354:	14 98       	mov	r8,r10
80007356:	16 99       	mov	r9,r11
80007358:	04 9a       	mov	r10,r2
8000735a:	06 9b       	mov	r11,r3
8000735c:	f0 16 00 05 	mcall	r6[20]
80007360:	14 98       	mov	r8,r10
80007362:	16 99       	mov	r9,r11
80007364:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80007368:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000736c:	ec fa 00 18 	ld.w	r10,r6[24]
80007370:	12 98       	mov	r8,r9
80007372:	a3 78       	lsl	r8,0x3
80007374:	12 08       	add	r8,r9
80007376:	a3 78       	lsl	r8,0x3
80007378:	f4 08 00 08 	add	r8,r10,r8
8000737c:	2c 88       	sub	r8,-56
8000737e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007382:	ee fc ff a4 	ld.w	r12,r7[-92]
80007386:	f0 16 00 03 	mcall	r6[12]
8000738a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000738e:	ec fc 00 18 	ld.w	r12,r6[24]
80007392:	12 98       	mov	r8,r9
80007394:	a3 78       	lsl	r8,0x3
80007396:	12 08       	add	r8,r9
80007398:	a3 78       	lsl	r8,0x3
8000739a:	f8 08 00 08 	add	r8,r12,r8
8000739e:	2c 08       	sub	r8,-64
800073a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800073a4:	12 95       	mov	r5,r9
800073a6:	ee 15 80 00 	eorh	r5,0x8000
800073aa:	ef 45 ff 64 	st.w	r7[-156],r5
800073ae:	10 94       	mov	r4,r8
800073b0:	ef 44 ff 68 	st.w	r7[-152],r4
800073b4:	ee e8 ff 64 	ld.d	r8,r7[-156]
800073b8:	f0 16 00 02 	mcall	r6[8]
800073bc:	14 98       	mov	r8,r10
800073be:	16 99       	mov	r9,r11
800073c0:	04 9a       	mov	r10,r2
800073c2:	06 9b       	mov	r11,r3
800073c4:	f0 16 00 05 	mcall	r6[20]
800073c8:	14 98       	mov	r8,r10
800073ca:	16 99       	mov	r9,r11
800073cc:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
800073d0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073d4:	ec fa 00 18 	ld.w	r10,r6[24]
800073d8:	12 98       	mov	r8,r9
800073da:	a3 78       	lsl	r8,0x3
800073dc:	12 08       	add	r8,r9
800073de:	a3 78       	lsl	r8,0x3
800073e0:	f4 08 00 08 	add	r8,r10,r8
800073e4:	2c 08       	sub	r8,-64
800073e6:	f0 e8 00 00 	ld.d	r8,r8[0]
800073ea:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
800073ee:	ee f5 ff ac 	ld.w	r5,r7[-84]
800073f2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073f6:	ec fa 00 d4 	ld.w	r10,r6[212]
800073fa:	12 98       	mov	r8,r9
800073fc:	a1 78       	lsl	r8,0x1
800073fe:	12 08       	add	r8,r9
80007400:	a3 78       	lsl	r8,0x3
80007402:	f4 08 00 08 	add	r8,r10,r8
80007406:	f0 ea 00 00 	ld.d	r10,r8[0]
8000740a:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000740e:	f0 16 00 05 	mcall	r6[20]
80007412:	14 98       	mov	r8,r10
80007414:	16 99       	mov	r9,r11
80007416:	10 9a       	mov	r10,r8
80007418:	12 9b       	mov	r11,r9
8000741a:	ec f9 00 18 	ld.w	r9,r6[24]
8000741e:	0a 98       	mov	r8,r5
80007420:	a3 78       	lsl	r8,0x3
80007422:	0a 08       	add	r8,r5
80007424:	a3 78       	lsl	r8,0x3
80007426:	f2 08 00 08 	add	r8,r9,r8
8000742a:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
8000742e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007432:	ec fa 00 18 	ld.w	r10,r6[24]
80007436:	12 98       	mov	r8,r9
80007438:	a3 78       	lsl	r8,0x3
8000743a:	12 08       	add	r8,r9
8000743c:	f0 cb ff ff 	sub	r11,r8,-1
80007440:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007444:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
80007448:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000744c:	ec fa 00 18 	ld.w	r10,r6[24]
80007450:	12 98       	mov	r8,r9
80007452:	a3 78       	lsl	r8,0x3
80007454:	12 08       	add	r8,r9
80007456:	a3 78       	lsl	r8,0x3
80007458:	f4 08 00 08 	add	r8,r10,r8
8000745c:	f0 ca ff f0 	sub	r10,r8,-16
80007460:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007464:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80007468:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000746c:	ec fa 00 18 	ld.w	r10,r6[24]
80007470:	12 98       	mov	r8,r9
80007472:	a3 78       	lsl	r8,0x3
80007474:	12 08       	add	r8,r9
80007476:	a3 78       	lsl	r8,0x3
80007478:	f4 08 00 08 	add	r8,r10,r8
8000747c:	f0 ca ff e8 	sub	r10,r8,-24
80007480:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007484:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007488:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000748c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007490:	ec fa 00 d4 	ld.w	r10,r6[212]
80007494:	12 98       	mov	r8,r9
80007496:	a1 78       	lsl	r8,0x1
80007498:	12 08       	add	r8,r9
8000749a:	2f f8       	sub	r8,-1
8000749c:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800074a0:	ee e8 ff d8 	ld.d	r8,r7[-40]
800074a4:	f0 16 00 05 	mcall	r6[20]
800074a8:	14 98       	mov	r8,r10
800074aa:	16 99       	mov	r9,r11
800074ac:	10 9a       	mov	r10,r8
800074ae:	12 9b       	mov	r11,r9
800074b0:	ec f9 00 18 	ld.w	r9,r6[24]
800074b4:	0a 98       	mov	r8,r5
800074b6:	a3 78       	lsl	r8,0x3
800074b8:	0a 08       	add	r8,r5
800074ba:	a3 78       	lsl	r8,0x3
800074bc:	f2 08 00 08 	add	r8,r9,r8
800074c0:	2e 08       	sub	r8,-32
800074c2:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800074c6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074ca:	ec fa 00 18 	ld.w	r10,r6[24]
800074ce:	12 98       	mov	r8,r9
800074d0:	a3 78       	lsl	r8,0x3
800074d2:	12 08       	add	r8,r9
800074d4:	a3 78       	lsl	r8,0x3
800074d6:	f4 08 00 08 	add	r8,r10,r8
800074da:	f0 ca ff d8 	sub	r10,r8,-40
800074de:	ee e8 ff e0 	ld.d	r8,r7[-32]
800074e2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
800074e6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074ea:	ec fa 00 18 	ld.w	r10,r6[24]
800074ee:	12 98       	mov	r8,r9
800074f0:	a3 78       	lsl	r8,0x3
800074f2:	12 08       	add	r8,r9
800074f4:	a3 78       	lsl	r8,0x3
800074f6:	f4 08 00 08 	add	r8,r10,r8
800074fa:	f0 ca ff d0 	sub	r10,r8,-48
800074fe:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007502:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
80007506:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000750a:	ec fa 00 18 	ld.w	r10,r6[24]
8000750e:	12 98       	mov	r8,r9
80007510:	a3 78       	lsl	r8,0x3
80007512:	12 08       	add	r8,r9
80007514:	a3 78       	lsl	r8,0x3
80007516:	f4 08 00 08 	add	r8,r10,r8
8000751a:	f0 ca ff c8 	sub	r10,r8,-56
8000751e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007522:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
80007526:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000752a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000752e:	ec fa 00 d4 	ld.w	r10,r6[212]
80007532:	12 98       	mov	r8,r9
80007534:	a1 78       	lsl	r8,0x1
80007536:	12 08       	add	r8,r9
80007538:	a3 78       	lsl	r8,0x3
8000753a:	f4 08 00 08 	add	r8,r10,r8
8000753e:	2f 08       	sub	r8,-16
80007540:	f0 ea 00 00 	ld.d	r10,r8[0]
80007544:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007548:	f0 16 00 05 	mcall	r6[20]
8000754c:	14 98       	mov	r8,r10
8000754e:	16 99       	mov	r9,r11
80007550:	10 9a       	mov	r10,r8
80007552:	12 9b       	mov	r11,r9
80007554:	ec f9 00 18 	ld.w	r9,r6[24]
80007558:	0a 98       	mov	r8,r5
8000755a:	a3 78       	lsl	r8,0x3
8000755c:	0a 08       	add	r8,r5
8000755e:	a3 78       	lsl	r8,0x3
80007560:	f2 08 00 08 	add	r8,r9,r8
80007564:	2c 08       	sub	r8,-64
80007566:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
8000756a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000756e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007572:	12 98       	mov	r8,r9
80007574:	a3 78       	lsl	r8,0x3
80007576:	12 08       	add	r8,r9
80007578:	a3 78       	lsl	r8,0x3
8000757a:	f4 08 00 08 	add	r8,r10,r8
8000757e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007582:	ee eb ff 6c 	st.d	r7[-148],r10
80007586:	ee fc ff a4 	ld.w	r12,r7[-92]
8000758a:	f0 16 00 03 	mcall	r6[12]
8000758e:	14 90       	mov	r0,r10
80007590:	16 91       	mov	r1,r11
80007592:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007596:	ec fa 00 1c 	ld.w	r10,r6[28]
8000759a:	12 98       	mov	r8,r9
8000759c:	a3 78       	lsl	r8,0x3
8000759e:	12 08       	add	r8,r9
800075a0:	a3 78       	lsl	r8,0x3
800075a2:	f4 08 00 08 	add	r8,r10,r8
800075a6:	2e 88       	sub	r8,-24
800075a8:	f0 ea 00 00 	ld.d	r10,r8[0]
800075ac:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075b0:	ec fc 00 1c 	ld.w	r12,r6[28]
800075b4:	12 98       	mov	r8,r9
800075b6:	a3 78       	lsl	r8,0x3
800075b8:	12 08       	add	r8,r9
800075ba:	2f f8       	sub	r8,-1
800075bc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800075c0:	f0 16 00 05 	mcall	r6[20]
800075c4:	14 98       	mov	r8,r10
800075c6:	16 99       	mov	r9,r11
800075c8:	10 92       	mov	r2,r8
800075ca:	12 93       	mov	r3,r9
800075cc:	ee fc ff a4 	ld.w	r12,r7[-92]
800075d0:	f0 16 00 03 	mcall	r6[12]
800075d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075d8:	ec fc 00 1c 	ld.w	r12,r6[28]
800075dc:	12 98       	mov	r8,r9
800075de:	a3 78       	lsl	r8,0x3
800075e0:	12 08       	add	r8,r9
800075e2:	a3 78       	lsl	r8,0x3
800075e4:	f8 08 00 08 	add	r8,r12,r8
800075e8:	2e 08       	sub	r8,-32
800075ea:	f0 e8 00 00 	ld.d	r8,r8[0]
800075ee:	f0 16 00 02 	mcall	r6[8]
800075f2:	14 98       	mov	r8,r10
800075f4:	16 99       	mov	r9,r11
800075f6:	04 9a       	mov	r10,r2
800075f8:	06 9b       	mov	r11,r3
800075fa:	f0 16 00 05 	mcall	r6[20]
800075fe:	14 98       	mov	r8,r10
80007600:	16 99       	mov	r9,r11
80007602:	00 9a       	mov	r10,r0
80007604:	02 9b       	mov	r11,r1
80007606:	f0 16 00 02 	mcall	r6[8]
8000760a:	14 98       	mov	r8,r10
8000760c:	16 99       	mov	r9,r11
8000760e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80007612:	f0 16 00 05 	mcall	r6[20]
80007616:	14 98       	mov	r8,r10
80007618:	16 99       	mov	r9,r11
8000761a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
8000761e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007622:	ec fa 00 1c 	ld.w	r10,r6[28]
80007626:	12 98       	mov	r8,r9
80007628:	a3 78       	lsl	r8,0x3
8000762a:	12 08       	add	r8,r9
8000762c:	2f f8       	sub	r8,-1
8000762e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007632:	ee e5 ff 74 	st.d	r7[-140],r4
80007636:	ee fc ff a4 	ld.w	r12,r7[-92]
8000763a:	f0 16 00 03 	mcall	r6[12]
8000763e:	14 90       	mov	r0,r10
80007640:	16 91       	mov	r1,r11
80007642:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007646:	ec fa 00 1c 	ld.w	r10,r6[28]
8000764a:	12 98       	mov	r8,r9
8000764c:	a3 78       	lsl	r8,0x3
8000764e:	12 08       	add	r8,r9
80007650:	a3 78       	lsl	r8,0x3
80007652:	f4 08 00 08 	add	r8,r10,r8
80007656:	2e 08       	sub	r8,-32
80007658:	f0 ea 00 00 	ld.d	r10,r8[0]
8000765c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007660:	ec fc 00 1c 	ld.w	r12,r6[28]
80007664:	12 98       	mov	r8,r9
80007666:	a3 78       	lsl	r8,0x3
80007668:	12 08       	add	r8,r9
8000766a:	a3 78       	lsl	r8,0x3
8000766c:	f8 08 00 08 	add	r8,r12,r8
80007670:	2f 08       	sub	r8,-16
80007672:	f0 e8 00 00 	ld.d	r8,r8[0]
80007676:	f0 16 00 12 	mcall	r6[72]
8000767a:	14 98       	mov	r8,r10
8000767c:	16 99       	mov	r9,r11
8000767e:	10 92       	mov	r2,r8
80007680:	12 93       	mov	r3,r9
80007682:	ee fc ff a4 	ld.w	r12,r7[-92]
80007686:	f0 16 00 03 	mcall	r6[12]
8000768a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000768e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007692:	12 98       	mov	r8,r9
80007694:	a3 78       	lsl	r8,0x3
80007696:	12 08       	add	r8,r9
80007698:	a3 78       	lsl	r8,0x3
8000769a:	f8 08 00 08 	add	r8,r12,r8
8000769e:	2d 88       	sub	r8,-40
800076a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800076a4:	f0 16 00 02 	mcall	r6[8]
800076a8:	14 98       	mov	r8,r10
800076aa:	16 99       	mov	r9,r11
800076ac:	04 9a       	mov	r10,r2
800076ae:	06 9b       	mov	r11,r3
800076b0:	f0 16 00 12 	mcall	r6[72]
800076b4:	14 98       	mov	r8,r10
800076b6:	16 99       	mov	r9,r11
800076b8:	00 9a       	mov	r10,r0
800076ba:	02 9b       	mov	r11,r1
800076bc:	f0 16 00 02 	mcall	r6[8]
800076c0:	14 98       	mov	r8,r10
800076c2:	16 99       	mov	r9,r11
800076c4:	ee ea ff 74 	ld.d	r10,r7[-140]
800076c8:	f0 16 00 05 	mcall	r6[20]
800076cc:	14 98       	mov	r8,r10
800076ce:	16 99       	mov	r9,r11
800076d0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
800076d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800076dc:	12 98       	mov	r8,r9
800076de:	a3 78       	lsl	r8,0x3
800076e0:	12 08       	add	r8,r9
800076e2:	a3 78       	lsl	r8,0x3
800076e4:	f4 08 00 08 	add	r8,r10,r8
800076e8:	2f 08       	sub	r8,-16
800076ea:	f0 e2 00 00 	ld.d	r2,r8[0]
800076ee:	ee fc ff a4 	ld.w	r12,r7[-92]
800076f2:	f0 16 00 03 	mcall	r6[12]
800076f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076fa:	ec fc 00 1c 	ld.w	r12,r6[28]
800076fe:	12 98       	mov	r8,r9
80007700:	a3 78       	lsl	r8,0x3
80007702:	12 08       	add	r8,r9
80007704:	a3 78       	lsl	r8,0x3
80007706:	f8 08 00 08 	add	r8,r12,r8
8000770a:	2d 88       	sub	r8,-40
8000770c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007710:	f0 16 00 02 	mcall	r6[8]
80007714:	14 98       	mov	r8,r10
80007716:	16 99       	mov	r9,r11
80007718:	04 9a       	mov	r10,r2
8000771a:	06 9b       	mov	r11,r3
8000771c:	f0 16 00 05 	mcall	r6[20]
80007720:	14 98       	mov	r8,r10
80007722:	16 99       	mov	r9,r11
80007724:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80007728:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000772c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007730:	12 98       	mov	r8,r9
80007732:	a3 78       	lsl	r8,0x3
80007734:	12 08       	add	r8,r9
80007736:	a3 78       	lsl	r8,0x3
80007738:	f4 08 00 08 	add	r8,r10,r8
8000773c:	2e 88       	sub	r8,-24
8000773e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007742:	ee eb ff 7c 	st.d	r7[-132],r10
80007746:	ee fc ff a4 	ld.w	r12,r7[-92]
8000774a:	f0 16 00 03 	mcall	r6[12]
8000774e:	14 90       	mov	r0,r10
80007750:	16 91       	mov	r1,r11
80007752:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007756:	ec fa 00 1c 	ld.w	r10,r6[28]
8000775a:	12 98       	mov	r8,r9
8000775c:	a3 78       	lsl	r8,0x3
8000775e:	12 08       	add	r8,r9
80007760:	a3 78       	lsl	r8,0x3
80007762:	f4 08 00 08 	add	r8,r10,r8
80007766:	2e 08       	sub	r8,-32
80007768:	f0 ea 00 00 	ld.d	r10,r8[0]
8000776c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007770:	ec fc 00 1c 	ld.w	r12,r6[28]
80007774:	12 98       	mov	r8,r9
80007776:	a3 78       	lsl	r8,0x3
80007778:	12 08       	add	r8,r9
8000777a:	a3 78       	lsl	r8,0x3
8000777c:	f8 08 00 08 	add	r8,r12,r8
80007780:	2d 08       	sub	r8,-48
80007782:	f0 e8 00 00 	ld.d	r8,r8[0]
80007786:	f0 16 00 12 	mcall	r6[72]
8000778a:	14 98       	mov	r8,r10
8000778c:	16 99       	mov	r9,r11
8000778e:	10 92       	mov	r2,r8
80007790:	12 93       	mov	r3,r9
80007792:	ee fc ff a4 	ld.w	r12,r7[-92]
80007796:	f0 16 00 03 	mcall	r6[12]
8000779a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000779e:	ec fc 00 1c 	ld.w	r12,r6[28]
800077a2:	12 98       	mov	r8,r9
800077a4:	a3 78       	lsl	r8,0x3
800077a6:	12 08       	add	r8,r9
800077a8:	a3 78       	lsl	r8,0x3
800077aa:	f8 08 00 08 	add	r8,r12,r8
800077ae:	2c 88       	sub	r8,-56
800077b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800077b4:	f0 16 00 02 	mcall	r6[8]
800077b8:	14 98       	mov	r8,r10
800077ba:	16 99       	mov	r9,r11
800077bc:	04 9a       	mov	r10,r2
800077be:	06 9b       	mov	r11,r3
800077c0:	f0 16 00 12 	mcall	r6[72]
800077c4:	14 98       	mov	r8,r10
800077c6:	16 99       	mov	r9,r11
800077c8:	00 9a       	mov	r10,r0
800077ca:	02 9b       	mov	r11,r1
800077cc:	f0 16 00 02 	mcall	r6[8]
800077d0:	14 98       	mov	r8,r10
800077d2:	16 99       	mov	r9,r11
800077d4:	ee ea ff 7c 	ld.d	r10,r7[-132]
800077d8:	f0 16 00 05 	mcall	r6[20]
800077dc:	14 98       	mov	r8,r10
800077de:	16 99       	mov	r9,r11
800077e0:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
800077e4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077e8:	ec fa 00 1c 	ld.w	r10,r6[28]
800077ec:	12 98       	mov	r8,r9
800077ee:	a3 78       	lsl	r8,0x3
800077f0:	12 08       	add	r8,r9
800077f2:	a3 78       	lsl	r8,0x3
800077f4:	f4 08 00 08 	add	r8,r10,r8
800077f8:	2e 08       	sub	r8,-32
800077fa:	f0 e0 00 00 	ld.d	r0,r8[0]
800077fe:	ee fc ff a4 	ld.w	r12,r7[-92]
80007802:	f0 16 00 03 	mcall	r6[12]
80007806:	ee eb ff 84 	st.d	r7[-124],r10
8000780a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000780e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007812:	12 98       	mov	r8,r9
80007814:	a3 78       	lsl	r8,0x3
80007816:	12 08       	add	r8,r9
80007818:	a3 78       	lsl	r8,0x3
8000781a:	f4 08 00 08 	add	r8,r10,r8
8000781e:	2c 88       	sub	r8,-56
80007820:	f0 e8 00 00 	ld.d	r8,r8[0]
80007824:	12 9a       	mov	r10,r9
80007826:	ee 1a 80 00 	eorh	r10,0x8000
8000782a:	ef 4a ff 8c 	st.w	r7[-116],r10
8000782e:	10 95       	mov	r5,r8
80007830:	ef 45 ff 90 	st.w	r7[-112],r5
80007834:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007838:	ec fa 00 1c 	ld.w	r10,r6[28]
8000783c:	12 98       	mov	r8,r9
8000783e:	a3 78       	lsl	r8,0x3
80007840:	12 08       	add	r8,r9
80007842:	a3 78       	lsl	r8,0x3
80007844:	f4 08 00 08 	add	r8,r10,r8
80007848:	2d 88       	sub	r8,-40
8000784a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000784e:	ee ea ff 8c 	ld.d	r10,r7[-116]
80007852:	f0 16 00 12 	mcall	r6[72]
80007856:	14 98       	mov	r8,r10
80007858:	16 99       	mov	r9,r11
8000785a:	10 92       	mov	r2,r8
8000785c:	12 93       	mov	r3,r9
8000785e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007862:	f0 16 00 03 	mcall	r6[12]
80007866:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000786a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000786e:	12 98       	mov	r8,r9
80007870:	a3 78       	lsl	r8,0x3
80007872:	12 08       	add	r8,r9
80007874:	a3 78       	lsl	r8,0x3
80007876:	f8 08 00 08 	add	r8,r12,r8
8000787a:	2c 08       	sub	r8,-64
8000787c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007880:	f0 16 00 02 	mcall	r6[8]
80007884:	14 98       	mov	r8,r10
80007886:	16 99       	mov	r9,r11
80007888:	04 9a       	mov	r10,r2
8000788a:	06 9b       	mov	r11,r3
8000788c:	f0 16 00 05 	mcall	r6[20]
80007890:	14 98       	mov	r8,r10
80007892:	16 99       	mov	r9,r11
80007894:	ee ea ff 84 	ld.d	r10,r7[-124]
80007898:	f0 16 00 02 	mcall	r6[8]
8000789c:	14 98       	mov	r8,r10
8000789e:	16 99       	mov	r9,r11
800078a0:	00 9a       	mov	r10,r0
800078a2:	02 9b       	mov	r11,r1
800078a4:	f0 16 00 05 	mcall	r6[20]
800078a8:	14 98       	mov	r8,r10
800078aa:	16 99       	mov	r9,r11
800078ac:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
800078b0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078b4:	ec fa 00 1c 	ld.w	r10,r6[28]
800078b8:	12 98       	mov	r8,r9
800078ba:	a3 78       	lsl	r8,0x3
800078bc:	12 08       	add	r8,r9
800078be:	a3 78       	lsl	r8,0x3
800078c0:	f4 08 00 08 	add	r8,r10,r8
800078c4:	2d 88       	sub	r8,-40
800078c6:	f0 e2 00 00 	ld.d	r2,r8[0]
800078ca:	ee fc ff a4 	ld.w	r12,r7[-92]
800078ce:	f0 16 00 03 	mcall	r6[12]
800078d2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078d6:	ec fc 00 1c 	ld.w	r12,r6[28]
800078da:	12 98       	mov	r8,r9
800078dc:	a3 78       	lsl	r8,0x3
800078de:	12 08       	add	r8,r9
800078e0:	a3 78       	lsl	r8,0x3
800078e2:	f8 08 00 08 	add	r8,r12,r8
800078e6:	2c 08       	sub	r8,-64
800078e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800078ec:	12 94       	mov	r4,r9
800078ee:	ee 14 80 00 	eorh	r4,0x8000
800078f2:	ef 44 ff 94 	st.w	r7[-108],r4
800078f6:	10 9c       	mov	r12,r8
800078f8:	ef 4c ff 98 	st.w	r7[-104],r12
800078fc:	ee e8 ff 94 	ld.d	r8,r7[-108]
80007900:	f0 16 00 02 	mcall	r6[8]
80007904:	14 98       	mov	r8,r10
80007906:	16 99       	mov	r9,r11
80007908:	04 9a       	mov	r10,r2
8000790a:	06 9b       	mov	r11,r3
8000790c:	f0 16 00 05 	mcall	r6[20]
80007910:	14 98       	mov	r8,r10
80007912:	16 99       	mov	r9,r11
80007914:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80007918:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000791c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007920:	12 98       	mov	r8,r9
80007922:	a3 78       	lsl	r8,0x3
80007924:	12 08       	add	r8,r9
80007926:	a3 78       	lsl	r8,0x3
80007928:	f4 08 00 08 	add	r8,r10,r8
8000792c:	2d 08       	sub	r8,-48
8000792e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007932:	ee fc ff a4 	ld.w	r12,r7[-92]
80007936:	f0 16 00 03 	mcall	r6[12]
8000793a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000793e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007942:	12 98       	mov	r8,r9
80007944:	a3 78       	lsl	r8,0x3
80007946:	12 08       	add	r8,r9
80007948:	a3 78       	lsl	r8,0x3
8000794a:	f8 08 00 08 	add	r8,r12,r8
8000794e:	2c 88       	sub	r8,-56
80007950:	f0 e8 00 00 	ld.d	r8,r8[0]
80007954:	f0 16 00 02 	mcall	r6[8]
80007958:	14 98       	mov	r8,r10
8000795a:	16 99       	mov	r9,r11
8000795c:	04 9a       	mov	r10,r2
8000795e:	06 9b       	mov	r11,r3
80007960:	f0 16 00 05 	mcall	r6[20]
80007964:	14 98       	mov	r8,r10
80007966:	16 99       	mov	r9,r11
80007968:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
8000796c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007970:	ec fa 00 1c 	ld.w	r10,r6[28]
80007974:	12 98       	mov	r8,r9
80007976:	a3 78       	lsl	r8,0x3
80007978:	12 08       	add	r8,r9
8000797a:	a3 78       	lsl	r8,0x3
8000797c:	f4 08 00 08 	add	r8,r10,r8
80007980:	2c 88       	sub	r8,-56
80007982:	f0 e2 00 00 	ld.d	r2,r8[0]
80007986:	ee fc ff a4 	ld.w	r12,r7[-92]
8000798a:	f0 16 00 03 	mcall	r6[12]
8000798e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007992:	ec fc 00 1c 	ld.w	r12,r6[28]
80007996:	12 98       	mov	r8,r9
80007998:	a3 78       	lsl	r8,0x3
8000799a:	12 08       	add	r8,r9
8000799c:	a3 78       	lsl	r8,0x3
8000799e:	f8 08 00 08 	add	r8,r12,r8
800079a2:	2c 08       	sub	r8,-64
800079a4:	f0 e8 00 00 	ld.d	r8,r8[0]
800079a8:	12 95       	mov	r5,r9
800079aa:	ee 15 80 00 	eorh	r5,0x8000
800079ae:	ef 45 ff 9c 	st.w	r7[-100],r5
800079b2:	10 94       	mov	r4,r8
800079b4:	ef 44 ff a0 	st.w	r7[-96],r4
800079b8:	ee e8 ff 9c 	ld.d	r8,r7[-100]
800079bc:	f0 16 00 02 	mcall	r6[8]
800079c0:	14 98       	mov	r8,r10
800079c2:	16 99       	mov	r9,r11
800079c4:	04 9a       	mov	r10,r2
800079c6:	06 9b       	mov	r11,r3
800079c8:	f0 16 00 05 	mcall	r6[20]
800079cc:	14 98       	mov	r8,r10
800079ce:	16 99       	mov	r9,r11
800079d0:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
800079d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800079dc:	12 98       	mov	r8,r9
800079de:	a3 78       	lsl	r8,0x3
800079e0:	12 08       	add	r8,r9
800079e2:	a3 78       	lsl	r8,0x3
800079e4:	f4 08 00 08 	add	r8,r10,r8
800079e8:	2c 08       	sub	r8,-64
800079ea:	f0 e8 00 00 	ld.d	r8,r8[0]
800079ee:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
800079f2:	ee f5 ff ac 	ld.w	r5,r7[-84]
800079f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079fa:	ec fa 00 d8 	ld.w	r10,r6[216]
800079fe:	12 98       	mov	r8,r9
80007a00:	a1 78       	lsl	r8,0x1
80007a02:	12 08       	add	r8,r9
80007a04:	a3 78       	lsl	r8,0x3
80007a06:	f4 08 00 08 	add	r8,r10,r8
80007a0a:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a0e:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007a12:	f0 16 00 05 	mcall	r6[20]
80007a16:	14 98       	mov	r8,r10
80007a18:	16 99       	mov	r9,r11
80007a1a:	10 9a       	mov	r10,r8
80007a1c:	12 9b       	mov	r11,r9
80007a1e:	ec f9 00 1c 	ld.w	r9,r6[28]
80007a22:	0a 98       	mov	r8,r5
80007a24:	a3 78       	lsl	r8,0x3
80007a26:	0a 08       	add	r8,r5
80007a28:	a3 78       	lsl	r8,0x3
80007a2a:	f2 08 00 08 	add	r8,r9,r8
80007a2e:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007a32:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a36:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a3a:	12 98       	mov	r8,r9
80007a3c:	a3 78       	lsl	r8,0x3
80007a3e:	12 08       	add	r8,r9
80007a40:	f0 cb ff ff 	sub	r11,r8,-1
80007a44:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007a48:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
80007a4c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a50:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a54:	12 98       	mov	r8,r9
80007a56:	a3 78       	lsl	r8,0x3
80007a58:	12 08       	add	r8,r9
80007a5a:	a3 78       	lsl	r8,0x3
80007a5c:	f4 08 00 08 	add	r8,r10,r8
80007a60:	f0 ca ff f0 	sub	r10,r8,-16
80007a64:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007a68:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007a6c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a70:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a74:	12 98       	mov	r8,r9
80007a76:	a3 78       	lsl	r8,0x3
80007a78:	12 08       	add	r8,r9
80007a7a:	a3 78       	lsl	r8,0x3
80007a7c:	f4 08 00 08 	add	r8,r10,r8
80007a80:	f0 ca ff e8 	sub	r10,r8,-24
80007a84:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007a88:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007a8c:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007a90:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a94:	ec fa 00 d8 	ld.w	r10,r6[216]
80007a98:	12 98       	mov	r8,r9
80007a9a:	a1 78       	lsl	r8,0x1
80007a9c:	12 08       	add	r8,r9
80007a9e:	2f f8       	sub	r8,-1
80007aa0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007aa4:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007aa8:	f0 16 00 05 	mcall	r6[20]
80007aac:	14 98       	mov	r8,r10
80007aae:	16 99       	mov	r9,r11
80007ab0:	10 9a       	mov	r10,r8
80007ab2:	12 9b       	mov	r11,r9
80007ab4:	ec f9 00 1c 	ld.w	r9,r6[28]
80007ab8:	0a 98       	mov	r8,r5
80007aba:	a3 78       	lsl	r8,0x3
80007abc:	0a 08       	add	r8,r5
80007abe:	a3 78       	lsl	r8,0x3
80007ac0:	f2 08 00 08 	add	r8,r9,r8
80007ac4:	2e 08       	sub	r8,-32
80007ac6:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
80007aca:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ace:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ad2:	12 98       	mov	r8,r9
80007ad4:	a3 78       	lsl	r8,0x3
80007ad6:	12 08       	add	r8,r9
80007ad8:	a3 78       	lsl	r8,0x3
80007ada:	f4 08 00 08 	add	r8,r10,r8
80007ade:	f0 ca ff d8 	sub	r10,r8,-40
80007ae2:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007ae6:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007aea:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007aee:	ec fa 00 1c 	ld.w	r10,r6[28]
80007af2:	12 98       	mov	r8,r9
80007af4:	a3 78       	lsl	r8,0x3
80007af6:	12 08       	add	r8,r9
80007af8:	a3 78       	lsl	r8,0x3
80007afa:	f4 08 00 08 	add	r8,r10,r8
80007afe:	f0 ca ff d0 	sub	r10,r8,-48
80007b02:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007b06:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80007b0a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b0e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b12:	12 98       	mov	r8,r9
80007b14:	a3 78       	lsl	r8,0x3
80007b16:	12 08       	add	r8,r9
80007b18:	a3 78       	lsl	r8,0x3
80007b1a:	f4 08 00 08 	add	r8,r10,r8
80007b1e:	f0 ca ff c8 	sub	r10,r8,-56
80007b22:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007b26:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80007b2a:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007b2e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b32:	ec fa 00 d8 	ld.w	r10,r6[216]
80007b36:	12 98       	mov	r8,r9
80007b38:	a1 78       	lsl	r8,0x1
80007b3a:	12 08       	add	r8,r9
80007b3c:	a3 78       	lsl	r8,0x3
80007b3e:	f4 08 00 08 	add	r8,r10,r8
80007b42:	2f 08       	sub	r8,-16
80007b44:	f0 ea 00 00 	ld.d	r10,r8[0]
80007b48:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007b4c:	f0 16 00 05 	mcall	r6[20]
80007b50:	14 98       	mov	r8,r10
80007b52:	16 99       	mov	r9,r11
80007b54:	10 9a       	mov	r10,r8
80007b56:	12 9b       	mov	r11,r9
80007b58:	ec f9 00 1c 	ld.w	r9,r6[28]
80007b5c:	0a 98       	mov	r8,r5
80007b5e:	a3 78       	lsl	r8,0x3
80007b60:	0a 08       	add	r8,r5
80007b62:	a3 78       	lsl	r8,0x3
80007b64:	f2 08 00 08 	add	r8,r9,r8
80007b68:	2c 08       	sub	r8,-64
80007b6a:	f0 eb 00 00 	st.d	r8[0],r10
}
80007b6e:	2c dd       	sub	sp,-204
80007b70:	d8 32       	popm	r0-r7,pc
80007b72:	00 00       	add	r0,r0
80007b74:	80 00       	ld.sh	r0,r0[0x0]
80007b76:	6c fa       	ld.w	r10,r6[0x3c]

80007b78 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007b78:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007b7c:	1a 97       	mov	r7,sp
80007b7e:	20 fd       	sub	sp,60
80007b80:	fe f6 05 88 	ld.w	r6,pc[1416]
80007b84:	1e 26       	rsub	r6,pc
80007b86:	ef 4c ff dc 	st.w	r7[-36],r12
80007b8a:	ef 4b ff d8 	st.w	r7[-40],r11
80007b8e:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80007b92:	ec f8 00 00 	ld.w	r8,r6[0]
80007b96:	70 01       	ld.w	r1,r8[0x0]
80007b98:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007b9c:	ec f8 00 00 	ld.w	r8,r6[0]
80007ba0:	70 0a       	ld.w	r10,r8[0x0]
80007ba2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ba6:	12 98       	mov	r8,r9
80007ba8:	a1 78       	lsl	r8,0x1
80007baa:	12 08       	add	r8,r9
80007bac:	a3 78       	lsl	r8,0x3
80007bae:	f4 08 00 08 	add	r8,r10,r8
80007bb2:	f0 c8 f5 e4 	sub	r8,r8,-2588
80007bb6:	f0 e2 00 00 	ld.d	r2,r8[0]
80007bba:	ee fc ff d4 	ld.w	r12,r7[-44]
80007bbe:	f0 16 00 03 	mcall	r6[12]
80007bc2:	ec f8 00 00 	ld.w	r8,r6[0]
80007bc6:	70 0c       	ld.w	r12,r8[0x0]
80007bc8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007bcc:	12 98       	mov	r8,r9
80007bce:	a1 78       	lsl	r8,0x1
80007bd0:	12 08       	add	r8,r9
80007bd2:	2f f8       	sub	r8,-1
80007bd4:	a3 78       	lsl	r8,0x3
80007bd6:	f8 08 00 08 	add	r8,r12,r8
80007bda:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
80007bde:	f0 16 00 02 	mcall	r6[8]
80007be2:	14 98       	mov	r8,r10
80007be4:	16 99       	mov	r9,r11
80007be6:	04 9a       	mov	r10,r2
80007be8:	06 9b       	mov	r11,r3
80007bea:	f0 16 00 05 	mcall	r6[20]
80007bee:	14 98       	mov	r8,r10
80007bf0:	16 99       	mov	r9,r11
80007bf2:	10 92       	mov	r2,r8
80007bf4:	12 93       	mov	r3,r9
80007bf6:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007bfa:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007bfe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007c02:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007c06:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007c0a:	10 9c       	mov	r12,r8
80007c0c:	f0 16 00 03 	mcall	r6[12]
80007c10:	14 98       	mov	r8,r10
80007c12:	16 99       	mov	r9,r11
80007c14:	04 9a       	mov	r10,r2
80007c16:	06 9b       	mov	r11,r3
80007c18:	f0 16 00 05 	mcall	r6[20]
80007c1c:	14 98       	mov	r8,r10
80007c1e:	16 99       	mov	r9,r11
80007c20:	10 9a       	mov	r10,r8
80007c22:	12 9b       	mov	r11,r9
80007c24:	0a 98       	mov	r8,r5
80007c26:	a1 78       	lsl	r8,0x1
80007c28:	0a 08       	add	r8,r5
80007c2a:	a3 78       	lsl	r8,0x3
80007c2c:	e2 08 00 08 	add	r8,r1,r8
80007c30:	f0 c8 f5 e4 	sub	r8,r8,-2588
80007c34:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80007c38:	ec f8 00 00 	ld.w	r8,r6[0]
80007c3c:	70 01       	ld.w	r1,r8[0x0]
80007c3e:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007c42:	ec f8 00 00 	ld.w	r8,r6[0]
80007c46:	70 0a       	ld.w	r10,r8[0x0]
80007c48:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c4c:	12 98       	mov	r8,r9
80007c4e:	a1 78       	lsl	r8,0x1
80007c50:	12 08       	add	r8,r9
80007c52:	a3 78       	lsl	r8,0x3
80007c54:	f4 08 00 08 	add	r8,r10,r8
80007c58:	f0 c8 f5 e4 	sub	r8,r8,-2588
80007c5c:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c60:	ee fc ff d4 	ld.w	r12,r7[-44]
80007c64:	f0 16 00 03 	mcall	r6[12]
80007c68:	ec f8 00 00 	ld.w	r8,r6[0]
80007c6c:	70 0c       	ld.w	r12,r8[0x0]
80007c6e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c72:	12 98       	mov	r8,r9
80007c74:	a1 78       	lsl	r8,0x1
80007c76:	12 08       	add	r8,r9
80007c78:	2f f8       	sub	r8,-1
80007c7a:	a3 78       	lsl	r8,0x3
80007c7c:	f8 08 00 08 	add	r8,r12,r8
80007c80:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
80007c84:	f0 16 00 02 	mcall	r6[8]
80007c88:	14 98       	mov	r8,r10
80007c8a:	16 99       	mov	r9,r11
80007c8c:	04 9a       	mov	r10,r2
80007c8e:	06 9b       	mov	r11,r3
80007c90:	f0 16 00 05 	mcall	r6[20]
80007c94:	14 98       	mov	r8,r10
80007c96:	16 99       	mov	r9,r11
80007c98:	10 9a       	mov	r10,r8
80007c9a:	12 9b       	mov	r11,r9
80007c9c:	0a 98       	mov	r8,r5
80007c9e:	a1 78       	lsl	r8,0x1
80007ca0:	0a 08       	add	r8,r5
80007ca2:	a3 78       	lsl	r8,0x3
80007ca4:	e2 08 00 08 	add	r8,r1,r8
80007ca8:	f0 c8 f5 e4 	sub	r8,r8,-2588
80007cac:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
80007cb0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cb4:	ec fa 00 18 	ld.w	r10,r6[24]
80007cb8:	12 98       	mov	r8,r9
80007cba:	a3 78       	lsl	r8,0x3
80007cbc:	12 08       	add	r8,r9
80007cbe:	a3 78       	lsl	r8,0x3
80007cc0:	f4 08 00 08 	add	r8,r10,r8
80007cc4:	f0 e2 00 00 	ld.d	r2,r8[0]
80007cc8:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ccc:	f0 16 00 03 	mcall	r6[12]
80007cd0:	14 90       	mov	r0,r10
80007cd2:	16 91       	mov	r1,r11
80007cd4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cd8:	ec fa 00 18 	ld.w	r10,r6[24]
80007cdc:	12 98       	mov	r8,r9
80007cde:	a3 78       	lsl	r8,0x3
80007ce0:	12 08       	add	r8,r9
80007ce2:	a3 78       	lsl	r8,0x3
80007ce4:	f4 08 00 08 	add	r8,r10,r8
80007ce8:	2e 88       	sub	r8,-24
80007cea:	f0 ea 00 00 	ld.d	r10,r8[0]
80007cee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cf2:	ec fc 00 18 	ld.w	r12,r6[24]
80007cf6:	12 98       	mov	r8,r9
80007cf8:	a3 78       	lsl	r8,0x3
80007cfa:	12 08       	add	r8,r9
80007cfc:	2f f8       	sub	r8,-1
80007cfe:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007d02:	f0 16 00 05 	mcall	r6[20]
80007d06:	14 98       	mov	r8,r10
80007d08:	16 99       	mov	r9,r11
80007d0a:	ee e9 ff c4 	st.d	r7[-60],r8
80007d0e:	ee fc ff d4 	ld.w	r12,r7[-44]
80007d12:	f0 16 00 03 	mcall	r6[12]
80007d16:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d1a:	ec fc 00 18 	ld.w	r12,r6[24]
80007d1e:	12 98       	mov	r8,r9
80007d20:	a3 78       	lsl	r8,0x3
80007d22:	12 08       	add	r8,r9
80007d24:	a3 78       	lsl	r8,0x3
80007d26:	f8 08 00 08 	add	r8,r12,r8
80007d2a:	2e 08       	sub	r8,-32
80007d2c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d30:	f0 16 00 02 	mcall	r6[8]
80007d34:	14 98       	mov	r8,r10
80007d36:	16 99       	mov	r9,r11
80007d38:	ee ea ff c4 	ld.d	r10,r7[-60]
80007d3c:	f0 16 00 05 	mcall	r6[20]
80007d40:	14 98       	mov	r8,r10
80007d42:	16 99       	mov	r9,r11
80007d44:	00 9a       	mov	r10,r0
80007d46:	02 9b       	mov	r11,r1
80007d48:	f0 16 00 02 	mcall	r6[8]
80007d4c:	14 98       	mov	r8,r10
80007d4e:	16 99       	mov	r9,r11
80007d50:	04 9a       	mov	r10,r2
80007d52:	06 9b       	mov	r11,r3
80007d54:	f0 16 00 05 	mcall	r6[20]
80007d58:	14 98       	mov	r8,r10
80007d5a:	16 99       	mov	r9,r11
80007d5c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80007d60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d64:	ec fa 00 18 	ld.w	r10,r6[24]
80007d68:	12 98       	mov	r8,r9
80007d6a:	a3 78       	lsl	r8,0x3
80007d6c:	12 08       	add	r8,r9
80007d6e:	2f f8       	sub	r8,-1
80007d70:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80007d74:	ee fc ff d4 	ld.w	r12,r7[-44]
80007d78:	f0 16 00 03 	mcall	r6[12]
80007d7c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d80:	ec fc 00 18 	ld.w	r12,r6[24]
80007d84:	12 98       	mov	r8,r9
80007d86:	a3 78       	lsl	r8,0x3
80007d88:	12 08       	add	r8,r9
80007d8a:	a3 78       	lsl	r8,0x3
80007d8c:	f8 08 00 08 	add	r8,r12,r8
80007d90:	2e 08       	sub	r8,-32
80007d92:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d96:	f0 16 00 02 	mcall	r6[8]
80007d9a:	14 98       	mov	r8,r10
80007d9c:	16 99       	mov	r9,r11
80007d9e:	04 9a       	mov	r10,r2
80007da0:	06 9b       	mov	r11,r3
80007da2:	f0 16 00 05 	mcall	r6[20]
80007da6:	14 98       	mov	r8,r10
80007da8:	16 99       	mov	r9,r11
80007daa:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
80007dae:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007db2:	ec fa 00 18 	ld.w	r10,r6[24]
80007db6:	12 98       	mov	r8,r9
80007db8:	a3 78       	lsl	r8,0x3
80007dba:	12 08       	add	r8,r9
80007dbc:	a3 78       	lsl	r8,0x3
80007dbe:	f4 08 00 08 	add	r8,r10,r8
80007dc2:	2e 88       	sub	r8,-24
80007dc4:	f0 e2 00 00 	ld.d	r2,r8[0]
80007dc8:	ee fc ff d4 	ld.w	r12,r7[-44]
80007dcc:	f0 16 00 03 	mcall	r6[12]
80007dd0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007dd4:	ec fc 00 18 	ld.w	r12,r6[24]
80007dd8:	12 98       	mov	r8,r9
80007dda:	a3 78       	lsl	r8,0x3
80007ddc:	12 08       	add	r8,r9
80007dde:	a3 78       	lsl	r8,0x3
80007de0:	f8 08 00 08 	add	r8,r12,r8
80007de4:	2e 08       	sub	r8,-32
80007de6:	f0 e8 00 00 	ld.d	r8,r8[0]
80007dea:	f0 16 00 02 	mcall	r6[8]
80007dee:	14 98       	mov	r8,r10
80007df0:	16 99       	mov	r9,r11
80007df2:	04 9a       	mov	r10,r2
80007df4:	06 9b       	mov	r11,r3
80007df6:	f0 16 00 05 	mcall	r6[20]
80007dfa:	14 98       	mov	r8,r10
80007dfc:	16 99       	mov	r9,r11
80007dfe:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80007e02:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e06:	ec fa 00 18 	ld.w	r10,r6[24]
80007e0a:	12 98       	mov	r8,r9
80007e0c:	a3 78       	lsl	r8,0x3
80007e0e:	12 08       	add	r8,r9
80007e10:	a3 78       	lsl	r8,0x3
80007e12:	f4 08 00 08 	add	r8,r10,r8
80007e16:	2e 08       	sub	r8,-32
80007e18:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e1c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007e20:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007e24:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e28:	ec fa 00 d4 	ld.w	r10,r6[212]
80007e2c:	12 98       	mov	r8,r9
80007e2e:	a1 78       	lsl	r8,0x1
80007e30:	12 08       	add	r8,r9
80007e32:	a3 78       	lsl	r8,0x3
80007e34:	f4 08 00 08 	add	r8,r10,r8
80007e38:	f0 ea 00 00 	ld.d	r10,r8[0]
80007e3c:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007e40:	f0 16 00 05 	mcall	r6[20]
80007e44:	14 98       	mov	r8,r10
80007e46:	16 99       	mov	r9,r11
80007e48:	10 9a       	mov	r10,r8
80007e4a:	12 9b       	mov	r11,r9
80007e4c:	ec f9 00 18 	ld.w	r9,r6[24]
80007e50:	0a 98       	mov	r8,r5
80007e52:	a3 78       	lsl	r8,0x3
80007e54:	0a 08       	add	r8,r5
80007e56:	a3 78       	lsl	r8,0x3
80007e58:	f2 08 00 08 	add	r8,r9,r8
80007e5c:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007e60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e64:	ec fa 00 18 	ld.w	r10,r6[24]
80007e68:	12 98       	mov	r8,r9
80007e6a:	a3 78       	lsl	r8,0x3
80007e6c:	12 08       	add	r8,r9
80007e6e:	f0 cb ff ff 	sub	r11,r8,-1
80007e72:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007e76:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
80007e7a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e7e:	ec fa 00 18 	ld.w	r10,r6[24]
80007e82:	12 98       	mov	r8,r9
80007e84:	a3 78       	lsl	r8,0x3
80007e86:	12 08       	add	r8,r9
80007e88:	a3 78       	lsl	r8,0x3
80007e8a:	f4 08 00 08 	add	r8,r10,r8
80007e8e:	f0 ca ff e8 	sub	r10,r8,-24
80007e92:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007e96:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007e9a:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007e9e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ea2:	ec fa 00 d4 	ld.w	r10,r6[212]
80007ea6:	12 98       	mov	r8,r9
80007ea8:	a1 78       	lsl	r8,0x1
80007eaa:	12 08       	add	r8,r9
80007eac:	2f f8       	sub	r8,-1
80007eae:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007eb2:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007eb6:	f0 16 00 05 	mcall	r6[20]
80007eba:	14 98       	mov	r8,r10
80007ebc:	16 99       	mov	r9,r11
80007ebe:	10 9a       	mov	r10,r8
80007ec0:	12 9b       	mov	r11,r9
80007ec2:	ec f9 00 18 	ld.w	r9,r6[24]
80007ec6:	0a 98       	mov	r8,r5
80007ec8:	a3 78       	lsl	r8,0x3
80007eca:	0a 08       	add	r8,r5
80007ecc:	a3 78       	lsl	r8,0x3
80007ece:	f2 08 00 08 	add	r8,r9,r8
80007ed2:	2e 08       	sub	r8,-32
80007ed4:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
80007ed8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007edc:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ee0:	12 98       	mov	r8,r9
80007ee2:	a3 78       	lsl	r8,0x3
80007ee4:	12 08       	add	r8,r9
80007ee6:	a3 78       	lsl	r8,0x3
80007ee8:	f4 08 00 08 	add	r8,r10,r8
80007eec:	f0 e2 00 00 	ld.d	r2,r8[0]
80007ef0:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ef4:	f0 16 00 03 	mcall	r6[12]
80007ef8:	14 90       	mov	r0,r10
80007efa:	16 91       	mov	r1,r11
80007efc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f00:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f04:	12 98       	mov	r8,r9
80007f06:	a3 78       	lsl	r8,0x3
80007f08:	12 08       	add	r8,r9
80007f0a:	a3 78       	lsl	r8,0x3
80007f0c:	f4 08 00 08 	add	r8,r10,r8
80007f10:	2e 88       	sub	r8,-24
80007f12:	f0 ea 00 00 	ld.d	r10,r8[0]
80007f16:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f1a:	ec fc 00 1c 	ld.w	r12,r6[28]
80007f1e:	12 98       	mov	r8,r9
80007f20:	a3 78       	lsl	r8,0x3
80007f22:	12 08       	add	r8,r9
80007f24:	2f f8       	sub	r8,-1
80007f26:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007f2a:	f0 16 00 05 	mcall	r6[20]
80007f2e:	14 98       	mov	r8,r10
80007f30:	16 99       	mov	r9,r11
80007f32:	ee e9 ff cc 	st.d	r7[-52],r8
80007f36:	ee fc ff d4 	ld.w	r12,r7[-44]
80007f3a:	f0 16 00 03 	mcall	r6[12]
80007f3e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f42:	ec fc 00 1c 	ld.w	r12,r6[28]
80007f46:	12 98       	mov	r8,r9
80007f48:	a3 78       	lsl	r8,0x3
80007f4a:	12 08       	add	r8,r9
80007f4c:	a3 78       	lsl	r8,0x3
80007f4e:	f8 08 00 08 	add	r8,r12,r8
80007f52:	2e 08       	sub	r8,-32
80007f54:	f0 e8 00 00 	ld.d	r8,r8[0]
80007f58:	f0 16 00 02 	mcall	r6[8]
80007f5c:	14 98       	mov	r8,r10
80007f5e:	16 99       	mov	r9,r11
80007f60:	ee ea ff cc 	ld.d	r10,r7[-52]
80007f64:	f0 16 00 05 	mcall	r6[20]
80007f68:	14 98       	mov	r8,r10
80007f6a:	16 99       	mov	r9,r11
80007f6c:	00 9a       	mov	r10,r0
80007f6e:	02 9b       	mov	r11,r1
80007f70:	f0 16 00 02 	mcall	r6[8]
80007f74:	14 98       	mov	r8,r10
80007f76:	16 99       	mov	r9,r11
80007f78:	04 9a       	mov	r10,r2
80007f7a:	06 9b       	mov	r11,r3
80007f7c:	f0 16 00 05 	mcall	r6[20]
80007f80:	14 98       	mov	r8,r10
80007f82:	16 99       	mov	r9,r11
80007f84:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
80007f88:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f8c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f90:	12 98       	mov	r8,r9
80007f92:	a3 78       	lsl	r8,0x3
80007f94:	12 08       	add	r8,r9
80007f96:	2f f8       	sub	r8,-1
80007f98:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80007f9c:	ee fc ff d4 	ld.w	r12,r7[-44]
80007fa0:	f0 16 00 03 	mcall	r6[12]
80007fa4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fa8:	ec fc 00 1c 	ld.w	r12,r6[28]
80007fac:	12 98       	mov	r8,r9
80007fae:	a3 78       	lsl	r8,0x3
80007fb0:	12 08       	add	r8,r9
80007fb2:	a3 78       	lsl	r8,0x3
80007fb4:	f8 08 00 08 	add	r8,r12,r8
80007fb8:	2e 08       	sub	r8,-32
80007fba:	f0 e8 00 00 	ld.d	r8,r8[0]
80007fbe:	f0 16 00 02 	mcall	r6[8]
80007fc2:	14 98       	mov	r8,r10
80007fc4:	16 99       	mov	r9,r11
80007fc6:	04 9a       	mov	r10,r2
80007fc8:	06 9b       	mov	r11,r3
80007fca:	f0 16 00 05 	mcall	r6[20]
80007fce:	14 98       	mov	r8,r10
80007fd0:	16 99       	mov	r9,r11
80007fd2:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
80007fd6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fda:	ec fa 00 1c 	ld.w	r10,r6[28]
80007fde:	12 98       	mov	r8,r9
80007fe0:	a3 78       	lsl	r8,0x3
80007fe2:	12 08       	add	r8,r9
80007fe4:	a3 78       	lsl	r8,0x3
80007fe6:	f4 08 00 08 	add	r8,r10,r8
80007fea:	2e 88       	sub	r8,-24
80007fec:	f0 e2 00 00 	ld.d	r2,r8[0]
80007ff0:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ff4:	f0 16 00 03 	mcall	r6[12]
80007ff8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ffc:	ec fc 00 1c 	ld.w	r12,r6[28]
80008000:	12 98       	mov	r8,r9
80008002:	a3 78       	lsl	r8,0x3
80008004:	12 08       	add	r8,r9
80008006:	a3 78       	lsl	r8,0x3
80008008:	f8 08 00 08 	add	r8,r12,r8
8000800c:	2e 08       	sub	r8,-32
8000800e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008012:	f0 16 00 02 	mcall	r6[8]
80008016:	14 98       	mov	r8,r10
80008018:	16 99       	mov	r9,r11
8000801a:	04 9a       	mov	r10,r2
8000801c:	06 9b       	mov	r11,r3
8000801e:	f0 16 00 05 	mcall	r6[20]
80008022:	14 98       	mov	r8,r10
80008024:	16 99       	mov	r9,r11
80008026:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
8000802a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000802e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008032:	12 98       	mov	r8,r9
80008034:	a3 78       	lsl	r8,0x3
80008036:	12 08       	add	r8,r9
80008038:	a3 78       	lsl	r8,0x3
8000803a:	f4 08 00 08 	add	r8,r10,r8
8000803e:	2e 08       	sub	r8,-32
80008040:	f0 e8 00 00 	ld.d	r8,r8[0]
80008044:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80008048:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000804c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008050:	ec fa 00 d8 	ld.w	r10,r6[216]
80008054:	12 98       	mov	r8,r9
80008056:	a1 78       	lsl	r8,0x1
80008058:	12 08       	add	r8,r9
8000805a:	a3 78       	lsl	r8,0x3
8000805c:	f4 08 00 08 	add	r8,r10,r8
80008060:	f0 ea 00 00 	ld.d	r10,r8[0]
80008064:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008068:	f0 16 00 05 	mcall	r6[20]
8000806c:	14 98       	mov	r8,r10
8000806e:	16 99       	mov	r9,r11
80008070:	10 9a       	mov	r10,r8
80008072:	12 9b       	mov	r11,r9
80008074:	ec f9 00 1c 	ld.w	r9,r6[28]
80008078:	0a 98       	mov	r8,r5
8000807a:	a3 78       	lsl	r8,0x3
8000807c:	0a 08       	add	r8,r5
8000807e:	a3 78       	lsl	r8,0x3
80008080:	f2 08 00 08 	add	r8,r9,r8
80008084:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80008088:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000808c:	ec fa 00 1c 	ld.w	r10,r6[28]
80008090:	12 98       	mov	r8,r9
80008092:	a3 78       	lsl	r8,0x3
80008094:	12 08       	add	r8,r9
80008096:	f0 cb ff ff 	sub	r11,r8,-1
8000809a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000809e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
800080a2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080a6:	ec fa 00 1c 	ld.w	r10,r6[28]
800080aa:	12 98       	mov	r8,r9
800080ac:	a3 78       	lsl	r8,0x3
800080ae:	12 08       	add	r8,r9
800080b0:	a3 78       	lsl	r8,0x3
800080b2:	f4 08 00 08 	add	r8,r10,r8
800080b6:	f0 ca ff e8 	sub	r10,r8,-24
800080ba:	ee e8 ff f0 	ld.d	r8,r7[-16]
800080be:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800080c2:	ee f5 ff dc 	ld.w	r5,r7[-36]
800080c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080ca:	ec fa 00 d8 	ld.w	r10,r6[216]
800080ce:	12 98       	mov	r8,r9
800080d0:	a1 78       	lsl	r8,0x1
800080d2:	12 08       	add	r8,r9
800080d4:	2f f8       	sub	r8,-1
800080d6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800080da:	ee e8 ff f8 	ld.d	r8,r7[-8]
800080de:	f0 16 00 05 	mcall	r6[20]
800080e2:	14 98       	mov	r8,r10
800080e4:	16 99       	mov	r9,r11
800080e6:	10 9a       	mov	r10,r8
800080e8:	12 9b       	mov	r11,r9
800080ea:	ec f9 00 1c 	ld.w	r9,r6[28]
800080ee:	0a 98       	mov	r8,r5
800080f0:	a3 78       	lsl	r8,0x3
800080f2:	0a 08       	add	r8,r5
800080f4:	a3 78       	lsl	r8,0x3
800080f6:	f2 08 00 08 	add	r8,r9,r8
800080fa:	2e 08       	sub	r8,-32
800080fc:	f0 eb 00 00 	st.d	r8[0],r10
}
80008100:	2f 1d       	sub	sp,-60
80008102:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80008106:	00 00       	add	r0,r0
80008108:	80 00       	ld.sh	r0,r0[0x0]
8000810a:	7a 08       	ld.w	r8,sp[0x0]

8000810c <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
8000810c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008110:	1a 97       	mov	r7,sp
80008112:	fa cd 00 e4 	sub	sp,sp,228
80008116:	fe f6 0b fe 	ld.w	r6,pc[3070]
8000811a:	1e 26       	rsub	r6,pc
8000811c:	ef 4c ff 84 	st.w	r7[-124],r12
80008120:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80008124:	ec f8 00 00 	ld.w	r8,r6[0]
80008128:	70 0a       	ld.w	r10,r8[0x0]
8000812a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000812e:	12 98       	mov	r8,r9
80008130:	a1 78       	lsl	r8,0x1
80008132:	12 08       	add	r8,r9
80008134:	a3 78       	lsl	r8,0x3
80008136:	f4 08 00 08 	add	r8,r10,r8
8000813a:	f0 c8 f5 e4 	sub	r8,r8,-2588
8000813e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008142:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008146:	f0 16 00 12 	mcall	r6[72]
8000814a:	14 98       	mov	r8,r10
8000814c:	16 99       	mov	r9,r11
8000814e:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80008152:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008156:	ec fa 00 18 	ld.w	r10,r6[24]
8000815a:	12 98       	mov	r8,r9
8000815c:	a3 78       	lsl	r8,0x3
8000815e:	12 08       	add	r8,r9
80008160:	a3 78       	lsl	r8,0x3
80008162:	f4 08 00 08 	add	r8,r10,r8
80008166:	f0 ea 00 00 	ld.d	r10,r8[0]
8000816a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000816e:	ec f8 01 54 	ld.w	r8,r6[340]
80008172:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008176:	f0 16 00 05 	mcall	r6[20]
8000817a:	14 98       	mov	r8,r10
8000817c:	16 99       	mov	r9,r11
8000817e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
80008182:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008186:	ec fa 00 18 	ld.w	r10,r6[24]
8000818a:	12 98       	mov	r8,r9
8000818c:	a3 78       	lsl	r8,0x3
8000818e:	12 08       	add	r8,r9
80008190:	a3 78       	lsl	r8,0x3
80008192:	f4 08 00 08 	add	r8,r10,r8
80008196:	f0 ea 00 00 	ld.d	r10,r8[0]
8000819a:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000819e:	f0 16 00 0c 	mcall	r6[48]
800081a2:	14 98       	mov	r8,r10
800081a4:	16 99       	mov	r9,r11
800081a6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
800081aa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800081ae:	ec fa 00 18 	ld.w	r10,r6[24]
800081b2:	12 98       	mov	r8,r9
800081b4:	a3 78       	lsl	r8,0x3
800081b6:	12 08       	add	r8,r9
800081b8:	a3 78       	lsl	r8,0x3
800081ba:	f4 08 00 08 	add	r8,r10,r8
800081be:	2e 88       	sub	r8,-24
800081c0:	f0 ea 00 00 	ld.d	r10,r8[0]
800081c4:	ee e8 ff 98 	ld.d	r8,r7[-104]
800081c8:	f0 16 00 0c 	mcall	r6[48]
800081cc:	14 98       	mov	r8,r10
800081ce:	16 99       	mov	r9,r11
800081d0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
800081d4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800081d8:	ec fa 00 18 	ld.w	r10,r6[24]
800081dc:	12 98       	mov	r8,r9
800081de:	a3 78       	lsl	r8,0x3
800081e0:	12 08       	add	r8,r9
800081e2:	a3 78       	lsl	r8,0x3
800081e4:	f4 08 00 08 	add	r8,r10,r8
800081e8:	2d 08       	sub	r8,-48
800081ea:	f0 ea 00 00 	ld.d	r10,r8[0]
800081ee:	ee e8 ff 98 	ld.d	r8,r7[-104]
800081f2:	f0 16 00 0c 	mcall	r6[48]
800081f6:	14 98       	mov	r8,r10
800081f8:	16 99       	mov	r9,r11
800081fa:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
800081fe:	ec f8 00 00 	ld.w	r8,r6[0]
80008202:	70 01       	ld.w	r1,r8[0x0]
80008204:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008208:	ec f8 00 00 	ld.w	r8,r6[0]
8000820c:	70 0a       	ld.w	r10,r8[0x0]
8000820e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008212:	12 98       	mov	r8,r9
80008214:	a1 78       	lsl	r8,0x1
80008216:	12 08       	add	r8,r9
80008218:	a3 78       	lsl	r8,0x3
8000821a:	f4 08 00 08 	add	r8,r10,r8
8000821e:	f0 c8 f5 e4 	sub	r8,r8,-2588
80008222:	f0 e2 00 00 	ld.d	r2,r8[0]
80008226:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000822a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000822e:	f0 16 00 02 	mcall	r6[8]
80008232:	14 98       	mov	r8,r10
80008234:	16 99       	mov	r9,r11
80008236:	04 9a       	mov	r10,r2
80008238:	06 9b       	mov	r11,r3
8000823a:	f0 16 00 05 	mcall	r6[20]
8000823e:	14 98       	mov	r8,r10
80008240:	16 99       	mov	r9,r11
80008242:	10 9a       	mov	r10,r8
80008244:	12 9b       	mov	r11,r9
80008246:	0a 98       	mov	r8,r5
80008248:	a1 78       	lsl	r8,0x1
8000824a:	0a 08       	add	r8,r5
8000824c:	a3 78       	lsl	r8,0x3
8000824e:	e2 08 00 08 	add	r8,r1,r8
80008252:	f0 c8 f5 e4 	sub	r8,r8,-2588
80008256:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
8000825a:	ec f8 00 00 	ld.w	r8,r6[0]
8000825e:	70 01       	ld.w	r1,r8[0x0]
80008260:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008264:	ec f8 00 00 	ld.w	r8,r6[0]
80008268:	70 0a       	ld.w	r10,r8[0x0]
8000826a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000826e:	12 98       	mov	r8,r9
80008270:	a1 78       	lsl	r8,0x1
80008272:	12 08       	add	r8,r9
80008274:	2f f8       	sub	r8,-1
80008276:	a3 78       	lsl	r8,0x3
80008278:	f4 08 00 08 	add	r8,r10,r8
8000827c:	f0 e2 0a 1c 	ld.d	r2,r8[2588]
80008280:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008284:	ee ea ff a8 	ld.d	r10,r7[-88]
80008288:	f0 16 00 02 	mcall	r6[8]
8000828c:	14 98       	mov	r8,r10
8000828e:	16 99       	mov	r9,r11
80008290:	04 9a       	mov	r10,r2
80008292:	06 9b       	mov	r11,r3
80008294:	f0 16 00 05 	mcall	r6[20]
80008298:	14 98       	mov	r8,r10
8000829a:	16 99       	mov	r9,r11
8000829c:	10 9a       	mov	r10,r8
8000829e:	12 9b       	mov	r11,r9
800082a0:	0a 98       	mov	r8,r5
800082a2:	a1 78       	lsl	r8,0x1
800082a4:	0a 08       	add	r8,r5
800082a6:	2f f8       	sub	r8,-1
800082a8:	a3 78       	lsl	r8,0x3
800082aa:	e2 08 00 08 	add	r8,r1,r8
800082ae:	f0 eb 0a 1c 	st.d	r8[2588],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
800082b2:	ec f8 00 00 	ld.w	r8,r6[0]
800082b6:	70 01       	ld.w	r1,r8[0x0]
800082b8:	ee f5 ff 84 	ld.w	r5,r7[-124]
800082bc:	ec f8 00 00 	ld.w	r8,r6[0]
800082c0:	70 0a       	ld.w	r10,r8[0x0]
800082c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082c6:	12 98       	mov	r8,r9
800082c8:	a1 78       	lsl	r8,0x1
800082ca:	12 08       	add	r8,r9
800082cc:	a3 78       	lsl	r8,0x3
800082ce:	f4 08 00 08 	add	r8,r10,r8
800082d2:	f0 c8 f5 d4 	sub	r8,r8,-2604
800082d6:	f0 e2 00 00 	ld.d	r2,r8[0]
800082da:	ee e8 ff 88 	ld.d	r8,r7[-120]
800082de:	ee ea ff b0 	ld.d	r10,r7[-80]
800082e2:	f0 16 00 02 	mcall	r6[8]
800082e6:	14 98       	mov	r8,r10
800082e8:	16 99       	mov	r9,r11
800082ea:	04 9a       	mov	r10,r2
800082ec:	06 9b       	mov	r11,r3
800082ee:	f0 16 00 05 	mcall	r6[20]
800082f2:	14 98       	mov	r8,r10
800082f4:	16 99       	mov	r9,r11
800082f6:	10 9a       	mov	r10,r8
800082f8:	12 9b       	mov	r11,r9
800082fa:	0a 98       	mov	r8,r5
800082fc:	a1 78       	lsl	r8,0x1
800082fe:	0a 08       	add	r8,r5
80008300:	a3 78       	lsl	r8,0x3
80008302:	e2 08 00 08 	add	r8,r1,r8
80008306:	f0 c8 f5 d4 	sub	r8,r8,-2604
8000830a:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
8000830e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008312:	30 0a       	mov	r10,0
80008314:	fc 1b 3f f0 	movh	r11,0x3ff0
80008318:	f0 16 00 12 	mcall	r6[72]
8000831c:	14 98       	mov	r8,r10
8000831e:	16 99       	mov	r9,r11
80008320:	10 9a       	mov	r10,r8
80008322:	12 9b       	mov	r11,r9
80008324:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008328:	ec fc 00 18 	ld.w	r12,r6[24]
8000832c:	12 98       	mov	r8,r9
8000832e:	a3 78       	lsl	r8,0x3
80008330:	12 08       	add	r8,r9
80008332:	a3 78       	lsl	r8,0x3
80008334:	f8 08 00 08 	add	r8,r12,r8
80008338:	f0 e8 00 00 	ld.d	r8,r8[0]
8000833c:	f0 16 00 02 	mcall	r6[8]
80008340:	14 98       	mov	r8,r10
80008342:	16 99       	mov	r9,r11
80008344:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
80008348:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000834c:	30 0a       	mov	r10,0
8000834e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008352:	f0 16 00 12 	mcall	r6[72]
80008356:	14 98       	mov	r8,r10
80008358:	16 99       	mov	r9,r11
8000835a:	10 9a       	mov	r10,r8
8000835c:	12 9b       	mov	r11,r9
8000835e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008362:	ec fc 00 18 	ld.w	r12,r6[24]
80008366:	12 98       	mov	r8,r9
80008368:	a3 78       	lsl	r8,0x3
8000836a:	12 08       	add	r8,r9
8000836c:	2f f8       	sub	r8,-1
8000836e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008372:	f0 16 00 02 	mcall	r6[8]
80008376:	14 98       	mov	r8,r10
80008378:	16 99       	mov	r9,r11
8000837a:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
8000837e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008382:	30 0a       	mov	r10,0
80008384:	fc 1b 3f f0 	movh	r11,0x3ff0
80008388:	f0 16 00 12 	mcall	r6[72]
8000838c:	14 98       	mov	r8,r10
8000838e:	16 99       	mov	r9,r11
80008390:	10 9a       	mov	r10,r8
80008392:	12 9b       	mov	r11,r9
80008394:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008398:	ec fc 00 18 	ld.w	r12,r6[24]
8000839c:	12 98       	mov	r8,r9
8000839e:	a3 78       	lsl	r8,0x3
800083a0:	12 08       	add	r8,r9
800083a2:	a3 78       	lsl	r8,0x3
800083a4:	f8 08 00 08 	add	r8,r12,r8
800083a8:	2f 08       	sub	r8,-16
800083aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800083ae:	f0 16 00 02 	mcall	r6[8]
800083b2:	14 98       	mov	r8,r10
800083b4:	16 99       	mov	r9,r11
800083b6:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800083ba:	ee f8 ff a8 	ld.w	r8,r7[-88]
800083be:	10 99       	mov	r9,r8
800083c0:	ee 19 80 00 	eorh	r9,0x8000
800083c4:	ef 49 ff 1c 	st.w	r7[-228],r9
800083c8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800083cc:	ef 48 ff 20 	st.w	r7[-224],r8
800083d0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083d4:	ec fa 00 18 	ld.w	r10,r6[24]
800083d8:	12 98       	mov	r8,r9
800083da:	a3 78       	lsl	r8,0x3
800083dc:	12 08       	add	r8,r9
800083de:	a3 78       	lsl	r8,0x3
800083e0:	f4 08 00 08 	add	r8,r10,r8
800083e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800083e8:	ee ea ff 1c 	ld.d	r10,r7[-228]
800083ec:	f0 16 00 02 	mcall	r6[8]
800083f0:	14 98       	mov	r8,r10
800083f2:	16 99       	mov	r9,r11
800083f4:	10 9a       	mov	r10,r8
800083f6:	12 9b       	mov	r11,r9
800083f8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083fc:	ec fc 00 18 	ld.w	r12,r6[24]
80008400:	12 98       	mov	r8,r9
80008402:	a3 78       	lsl	r8,0x3
80008404:	12 08       	add	r8,r9
80008406:	a3 78       	lsl	r8,0x3
80008408:	f8 08 00 08 	add	r8,r12,r8
8000840c:	2e 88       	sub	r8,-24
8000840e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008412:	f0 16 00 05 	mcall	r6[20]
80008416:	14 98       	mov	r8,r10
80008418:	16 99       	mov	r9,r11
8000841a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
8000841e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008422:	10 99       	mov	r9,r8
80008424:	ee 19 80 00 	eorh	r9,0x8000
80008428:	ef 49 ff 24 	st.w	r7[-220],r9
8000842c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008430:	ef 48 ff 28 	st.w	r7[-216],r8
80008434:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008438:	ec fa 00 18 	ld.w	r10,r6[24]
8000843c:	12 98       	mov	r8,r9
8000843e:	a3 78       	lsl	r8,0x3
80008440:	12 08       	add	r8,r9
80008442:	2f f8       	sub	r8,-1
80008444:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008448:	ee ea ff 24 	ld.d	r10,r7[-220]
8000844c:	f0 16 00 02 	mcall	r6[8]
80008450:	14 98       	mov	r8,r10
80008452:	16 99       	mov	r9,r11
80008454:	10 9a       	mov	r10,r8
80008456:	12 9b       	mov	r11,r9
80008458:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000845c:	ec fc 00 18 	ld.w	r12,r6[24]
80008460:	12 98       	mov	r8,r9
80008462:	a3 78       	lsl	r8,0x3
80008464:	12 08       	add	r8,r9
80008466:	a3 78       	lsl	r8,0x3
80008468:	f8 08 00 08 	add	r8,r12,r8
8000846c:	2e 08       	sub	r8,-32
8000846e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008472:	f0 16 00 05 	mcall	r6[20]
80008476:	14 98       	mov	r8,r10
80008478:	16 99       	mov	r9,r11
8000847a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
8000847e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008482:	10 99       	mov	r9,r8
80008484:	ee 19 80 00 	eorh	r9,0x8000
80008488:	ef 49 ff 2c 	st.w	r7[-212],r9
8000848c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008490:	ef 48 ff 30 	st.w	r7[-208],r8
80008494:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008498:	ec fa 00 18 	ld.w	r10,r6[24]
8000849c:	12 98       	mov	r8,r9
8000849e:	a3 78       	lsl	r8,0x3
800084a0:	12 08       	add	r8,r9
800084a2:	a3 78       	lsl	r8,0x3
800084a4:	f4 08 00 08 	add	r8,r10,r8
800084a8:	2f 08       	sub	r8,-16
800084aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800084ae:	ee ea ff 2c 	ld.d	r10,r7[-212]
800084b2:	f0 16 00 02 	mcall	r6[8]
800084b6:	14 98       	mov	r8,r10
800084b8:	16 99       	mov	r9,r11
800084ba:	10 9a       	mov	r10,r8
800084bc:	12 9b       	mov	r11,r9
800084be:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084c2:	ec fc 00 18 	ld.w	r12,r6[24]
800084c6:	12 98       	mov	r8,r9
800084c8:	a3 78       	lsl	r8,0x3
800084ca:	12 08       	add	r8,r9
800084cc:	a3 78       	lsl	r8,0x3
800084ce:	f8 08 00 08 	add	r8,r12,r8
800084d2:	2d 88       	sub	r8,-40
800084d4:	f0 e8 00 00 	ld.d	r8,r8[0]
800084d8:	f0 16 00 05 	mcall	r6[20]
800084dc:	14 98       	mov	r8,r10
800084de:	16 99       	mov	r9,r11
800084e0:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
800084e4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800084e8:	10 99       	mov	r9,r8
800084ea:	ee 19 80 00 	eorh	r9,0x8000
800084ee:	ef 49 ff 34 	st.w	r7[-204],r9
800084f2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800084f6:	ef 48 ff 38 	st.w	r7[-200],r8
800084fa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084fe:	ec fa 00 18 	ld.w	r10,r6[24]
80008502:	12 98       	mov	r8,r9
80008504:	a3 78       	lsl	r8,0x3
80008506:	12 08       	add	r8,r9
80008508:	a3 78       	lsl	r8,0x3
8000850a:	f4 08 00 08 	add	r8,r10,r8
8000850e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008512:	ee ea ff 34 	ld.d	r10,r7[-204]
80008516:	f0 16 00 02 	mcall	r6[8]
8000851a:	14 98       	mov	r8,r10
8000851c:	16 99       	mov	r9,r11
8000851e:	10 9a       	mov	r10,r8
80008520:	12 9b       	mov	r11,r9
80008522:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008526:	ec fc 00 18 	ld.w	r12,r6[24]
8000852a:	12 98       	mov	r8,r9
8000852c:	a3 78       	lsl	r8,0x3
8000852e:	12 08       	add	r8,r9
80008530:	a3 78       	lsl	r8,0x3
80008532:	f8 08 00 08 	add	r8,r12,r8
80008536:	2d 08       	sub	r8,-48
80008538:	f0 e8 00 00 	ld.d	r8,r8[0]
8000853c:	f0 16 00 05 	mcall	r6[20]
80008540:	14 98       	mov	r8,r10
80008542:	16 99       	mov	r9,r11
80008544:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
80008548:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000854c:	10 99       	mov	r9,r8
8000854e:	ee 19 80 00 	eorh	r9,0x8000
80008552:	ef 49 ff 3c 	st.w	r7[-196],r9
80008556:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000855a:	ef 48 ff 40 	st.w	r7[-192],r8
8000855e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008562:	ec fa 00 18 	ld.w	r10,r6[24]
80008566:	12 98       	mov	r8,r9
80008568:	a3 78       	lsl	r8,0x3
8000856a:	12 08       	add	r8,r9
8000856c:	2f f8       	sub	r8,-1
8000856e:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008572:	ee ea ff 3c 	ld.d	r10,r7[-196]
80008576:	f0 16 00 02 	mcall	r6[8]
8000857a:	14 98       	mov	r8,r10
8000857c:	16 99       	mov	r9,r11
8000857e:	10 9a       	mov	r10,r8
80008580:	12 9b       	mov	r11,r9
80008582:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008586:	ec fc 00 18 	ld.w	r12,r6[24]
8000858a:	12 98       	mov	r8,r9
8000858c:	a3 78       	lsl	r8,0x3
8000858e:	12 08       	add	r8,r9
80008590:	a3 78       	lsl	r8,0x3
80008592:	f8 08 00 08 	add	r8,r12,r8
80008596:	2c 88       	sub	r8,-56
80008598:	f0 e8 00 00 	ld.d	r8,r8[0]
8000859c:	f0 16 00 05 	mcall	r6[20]
800085a0:	14 98       	mov	r8,r10
800085a2:	16 99       	mov	r9,r11
800085a4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800085a8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800085ac:	10 99       	mov	r9,r8
800085ae:	ee 19 80 00 	eorh	r9,0x8000
800085b2:	ef 49 ff 44 	st.w	r7[-188],r9
800085b6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800085ba:	ef 48 ff 48 	st.w	r7[-184],r8
800085be:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085c2:	ec fa 00 18 	ld.w	r10,r6[24]
800085c6:	12 98       	mov	r8,r9
800085c8:	a3 78       	lsl	r8,0x3
800085ca:	12 08       	add	r8,r9
800085cc:	a3 78       	lsl	r8,0x3
800085ce:	f4 08 00 08 	add	r8,r10,r8
800085d2:	2f 08       	sub	r8,-16
800085d4:	f0 e8 00 00 	ld.d	r8,r8[0]
800085d8:	ee ea ff 44 	ld.d	r10,r7[-188]
800085dc:	f0 16 00 02 	mcall	r6[8]
800085e0:	14 98       	mov	r8,r10
800085e2:	16 99       	mov	r9,r11
800085e4:	10 9a       	mov	r10,r8
800085e6:	12 9b       	mov	r11,r9
800085e8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085ec:	ec fc 00 18 	ld.w	r12,r6[24]
800085f0:	12 98       	mov	r8,r9
800085f2:	a3 78       	lsl	r8,0x3
800085f4:	12 08       	add	r8,r9
800085f6:	a3 78       	lsl	r8,0x3
800085f8:	f8 08 00 08 	add	r8,r12,r8
800085fc:	2c 08       	sub	r8,-64
800085fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80008602:	f0 16 00 05 	mcall	r6[20]
80008606:	14 98       	mov	r8,r10
80008608:	16 99       	mov	r9,r11
8000860a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000860e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008612:	ec fa 00 18 	ld.w	r10,r6[24]
80008616:	12 98       	mov	r8,r9
80008618:	a3 78       	lsl	r8,0x3
8000861a:	12 08       	add	r8,r9
8000861c:	a3 78       	lsl	r8,0x3
8000861e:	10 0a       	add	r10,r8
80008620:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008624:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008628:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000862c:	ec fb 00 18 	ld.w	r11,r6[24]
80008630:	12 98       	mov	r8,r9
80008632:	a3 78       	lsl	r8,0x3
80008634:	12 08       	add	r8,r9
80008636:	f0 ca ff ff 	sub	r10,r8,-1
8000863a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000863e:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80008642:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008646:	ec fa 00 18 	ld.w	r10,r6[24]
8000864a:	12 98       	mov	r8,r9
8000864c:	a3 78       	lsl	r8,0x3
8000864e:	12 08       	add	r8,r9
80008650:	a3 78       	lsl	r8,0x3
80008652:	f4 08 00 08 	add	r8,r10,r8
80008656:	f0 ca ff f0 	sub	r10,r8,-16
8000865a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000865e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80008662:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008666:	ec fa 00 18 	ld.w	r10,r6[24]
8000866a:	12 98       	mov	r8,r9
8000866c:	a3 78       	lsl	r8,0x3
8000866e:	12 08       	add	r8,r9
80008670:	a3 78       	lsl	r8,0x3
80008672:	f4 08 00 08 	add	r8,r10,r8
80008676:	f0 ca ff e8 	sub	r10,r8,-24
8000867a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000867e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80008682:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008686:	ec fa 00 18 	ld.w	r10,r6[24]
8000868a:	12 98       	mov	r8,r9
8000868c:	a3 78       	lsl	r8,0x3
8000868e:	12 08       	add	r8,r9
80008690:	a3 78       	lsl	r8,0x3
80008692:	f4 08 00 08 	add	r8,r10,r8
80008696:	f0 ca ff e0 	sub	r10,r8,-32
8000869a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000869e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800086a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086a6:	ec fa 00 18 	ld.w	r10,r6[24]
800086aa:	12 98       	mov	r8,r9
800086ac:	a3 78       	lsl	r8,0x3
800086ae:	12 08       	add	r8,r9
800086b0:	a3 78       	lsl	r8,0x3
800086b2:	f4 08 00 08 	add	r8,r10,r8
800086b6:	f0 ca ff d8 	sub	r10,r8,-40
800086ba:	ee e8 ff e0 	ld.d	r8,r7[-32]
800086be:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800086c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086c6:	ec fa 00 18 	ld.w	r10,r6[24]
800086ca:	12 98       	mov	r8,r9
800086cc:	a3 78       	lsl	r8,0x3
800086ce:	12 08       	add	r8,r9
800086d0:	a3 78       	lsl	r8,0x3
800086d2:	f4 08 00 08 	add	r8,r10,r8
800086d6:	f0 ca ff d0 	sub	r10,r8,-48
800086da:	ee e8 ff e8 	ld.d	r8,r7[-24]
800086de:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800086e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086e6:	ec fa 00 18 	ld.w	r10,r6[24]
800086ea:	12 98       	mov	r8,r9
800086ec:	a3 78       	lsl	r8,0x3
800086ee:	12 08       	add	r8,r9
800086f0:	a3 78       	lsl	r8,0x3
800086f2:	f4 08 00 08 	add	r8,r10,r8
800086f6:	f0 ca ff c8 	sub	r10,r8,-56
800086fa:	ee e8 ff f0 	ld.d	r8,r7[-16]
800086fe:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80008702:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008706:	ec fa 00 18 	ld.w	r10,r6[24]
8000870a:	12 98       	mov	r8,r9
8000870c:	a3 78       	lsl	r8,0x3
8000870e:	12 08       	add	r8,r9
80008710:	a3 78       	lsl	r8,0x3
80008712:	f4 08 00 08 	add	r8,r10,r8
80008716:	f0 ca ff c0 	sub	r10,r8,-64
8000871a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000871e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
80008722:	ec f8 00 00 	ld.w	r8,r6[0]
80008726:	70 09       	ld.w	r9,r8[0x0]
80008728:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000872c:	f0 c8 fc e9 	sub	r8,r8,-791
80008730:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008734:	10 9c       	mov	r12,r8
80008736:	f0 16 00 03 	mcall	r6[12]
8000873a:	14 98       	mov	r8,r10
8000873c:	16 99       	mov	r9,r11
8000873e:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008742:	f0 16 00 12 	mcall	r6[72]
80008746:	14 98       	mov	r8,r10
80008748:	16 99       	mov	r9,r11
8000874a:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
8000874e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008752:	ec fa 00 1c 	ld.w	r10,r6[28]
80008756:	12 98       	mov	r8,r9
80008758:	a3 78       	lsl	r8,0x3
8000875a:	12 08       	add	r8,r9
8000875c:	a3 78       	lsl	r8,0x3
8000875e:	f4 08 00 08 	add	r8,r10,r8
80008762:	f0 ea 00 00 	ld.d	r10,r8[0]
80008766:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000876a:	ec f8 01 50 	ld.w	r8,r6[336]
8000876e:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008772:	f0 16 00 05 	mcall	r6[20]
80008776:	14 98       	mov	r8,r10
80008778:	16 99       	mov	r9,r11
8000877a:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
8000877e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008782:	ec fa 00 1c 	ld.w	r10,r6[28]
80008786:	12 98       	mov	r8,r9
80008788:	a3 78       	lsl	r8,0x3
8000878a:	12 08       	add	r8,r9
8000878c:	a3 78       	lsl	r8,0x3
8000878e:	f4 08 00 08 	add	r8,r10,r8
80008792:	f0 ea 00 00 	ld.d	r10,r8[0]
80008796:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000879a:	f0 16 00 0c 	mcall	r6[48]
8000879e:	14 98       	mov	r8,r10
800087a0:	16 99       	mov	r9,r11
800087a2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
800087a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087aa:	ec fa 00 1c 	ld.w	r10,r6[28]
800087ae:	12 98       	mov	r8,r9
800087b0:	a3 78       	lsl	r8,0x3
800087b2:	12 08       	add	r8,r9
800087b4:	a3 78       	lsl	r8,0x3
800087b6:	f4 08 00 08 	add	r8,r10,r8
800087ba:	2e 88       	sub	r8,-24
800087bc:	f0 ea 00 00 	ld.d	r10,r8[0]
800087c0:	ee e8 ff 98 	ld.d	r8,r7[-104]
800087c4:	f0 16 00 0c 	mcall	r6[48]
800087c8:	14 98       	mov	r8,r10
800087ca:	16 99       	mov	r9,r11
800087cc:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
800087d0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087d4:	ec fa 00 1c 	ld.w	r10,r6[28]
800087d8:	12 98       	mov	r8,r9
800087da:	a3 78       	lsl	r8,0x3
800087dc:	12 08       	add	r8,r9
800087de:	a3 78       	lsl	r8,0x3
800087e0:	f4 08 00 08 	add	r8,r10,r8
800087e4:	2d 08       	sub	r8,-48
800087e6:	f0 ea 00 00 	ld.d	r10,r8[0]
800087ea:	ee e8 ff 98 	ld.d	r8,r7[-104]
800087ee:	f0 16 00 0c 	mcall	r6[48]
800087f2:	14 98       	mov	r8,r10
800087f4:	16 99       	mov	r9,r11
800087f6:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
800087fa:	ec f8 00 00 	ld.w	r8,r6[0]
800087fe:	70 01       	ld.w	r1,r8[0x0]
80008800:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008804:	ec f8 00 00 	ld.w	r8,r6[0]
80008808:	70 09       	ld.w	r9,r8[0x0]
8000880a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000880e:	f0 c8 fc e9 	sub	r8,r8,-791
80008812:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008816:	10 9c       	mov	r12,r8
80008818:	f0 16 00 03 	mcall	r6[12]
8000881c:	14 92       	mov	r2,r10
8000881e:	16 93       	mov	r3,r11
80008820:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008824:	ee ea ff a0 	ld.d	r10,r7[-96]
80008828:	f0 16 00 02 	mcall	r6[8]
8000882c:	14 98       	mov	r8,r10
8000882e:	16 99       	mov	r9,r11
80008830:	04 9a       	mov	r10,r2
80008832:	06 9b       	mov	r11,r3
80008834:	f0 16 00 05 	mcall	r6[20]
80008838:	14 98       	mov	r8,r10
8000883a:	16 99       	mov	r9,r11
8000883c:	10 9a       	mov	r10,r8
8000883e:	12 9b       	mov	r11,r9
80008840:	f0 16 00 09 	mcall	r6[36]
80008844:	18 99       	mov	r9,r12
80008846:	ea c8 fc e9 	sub	r8,r5,-791
8000884a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
8000884e:	ec f8 00 00 	ld.w	r8,r6[0]
80008852:	70 01       	ld.w	r1,r8[0x0]
80008854:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008858:	ec f8 00 00 	ld.w	r8,r6[0]
8000885c:	70 09       	ld.w	r9,r8[0x0]
8000885e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008862:	f0 c8 fc f3 	sub	r8,r8,-781
80008866:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000886a:	10 9c       	mov	r12,r8
8000886c:	f0 16 00 03 	mcall	r6[12]
80008870:	14 92       	mov	r2,r10
80008872:	16 93       	mov	r3,r11
80008874:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008878:	ee ea ff a8 	ld.d	r10,r7[-88]
8000887c:	f0 16 00 02 	mcall	r6[8]
80008880:	14 98       	mov	r8,r10
80008882:	16 99       	mov	r9,r11
80008884:	04 9a       	mov	r10,r2
80008886:	06 9b       	mov	r11,r3
80008888:	f0 16 00 05 	mcall	r6[20]
8000888c:	14 98       	mov	r8,r10
8000888e:	16 99       	mov	r9,r11
80008890:	10 9a       	mov	r10,r8
80008892:	12 9b       	mov	r11,r9
80008894:	f0 16 00 09 	mcall	r6[36]
80008898:	18 99       	mov	r9,r12
8000889a:	ea c8 fc f3 	sub	r8,r5,-781
8000889e:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
800088a2:	ec f8 00 00 	ld.w	r8,r6[0]
800088a6:	70 01       	ld.w	r1,r8[0x0]
800088a8:	ee f8 ff 84 	ld.w	r8,r7[-124]
800088ac:	f0 c5 ff fd 	sub	r5,r8,-3
800088b0:	ec f8 00 00 	ld.w	r8,r6[0]
800088b4:	70 09       	ld.w	r9,r8[0x0]
800088b6:	ee f8 ff 84 	ld.w	r8,r7[-124]
800088ba:	2f d8       	sub	r8,-3
800088bc:	2f 48       	sub	r8,-12
800088be:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800088c2:	10 9c       	mov	r12,r8
800088c4:	f0 16 00 03 	mcall	r6[12]
800088c8:	14 92       	mov	r2,r10
800088ca:	16 93       	mov	r3,r11
800088cc:	ee e8 ff 88 	ld.d	r8,r7[-120]
800088d0:	ee ea ff b0 	ld.d	r10,r7[-80]
800088d4:	f0 16 00 02 	mcall	r6[8]
800088d8:	14 98       	mov	r8,r10
800088da:	16 99       	mov	r9,r11
800088dc:	04 9a       	mov	r10,r2
800088de:	06 9b       	mov	r11,r3
800088e0:	f0 16 00 05 	mcall	r6[20]
800088e4:	14 98       	mov	r8,r10
800088e6:	16 99       	mov	r9,r11
800088e8:	10 9a       	mov	r10,r8
800088ea:	12 9b       	mov	r11,r9
800088ec:	f0 16 00 09 	mcall	r6[36]
800088f0:	18 99       	mov	r9,r12
800088f2:	ea c8 ff f4 	sub	r8,r5,-12
800088f6:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
800088fa:	ee e8 ff a0 	ld.d	r8,r7[-96]
800088fe:	30 0a       	mov	r10,0
80008900:	fc 1b 3f f0 	movh	r11,0x3ff0
80008904:	f0 16 00 12 	mcall	r6[72]
80008908:	14 98       	mov	r8,r10
8000890a:	16 99       	mov	r9,r11
8000890c:	10 9a       	mov	r10,r8
8000890e:	12 9b       	mov	r11,r9
80008910:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008914:	ec fc 00 1c 	ld.w	r12,r6[28]
80008918:	12 98       	mov	r8,r9
8000891a:	a3 78       	lsl	r8,0x3
8000891c:	12 08       	add	r8,r9
8000891e:	a3 78       	lsl	r8,0x3
80008920:	f8 08 00 08 	add	r8,r12,r8
80008924:	f0 e8 00 00 	ld.d	r8,r8[0]
80008928:	f0 16 00 02 	mcall	r6[8]
8000892c:	14 98       	mov	r8,r10
8000892e:	16 99       	mov	r9,r11
80008930:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
80008934:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008938:	30 0a       	mov	r10,0
8000893a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000893e:	f0 16 00 12 	mcall	r6[72]
80008942:	14 98       	mov	r8,r10
80008944:	16 99       	mov	r9,r11
80008946:	10 9a       	mov	r10,r8
80008948:	12 9b       	mov	r11,r9
8000894a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000894e:	ec fc 00 1c 	ld.w	r12,r6[28]
80008952:	12 98       	mov	r8,r9
80008954:	a3 78       	lsl	r8,0x3
80008956:	12 08       	add	r8,r9
80008958:	2f f8       	sub	r8,-1
8000895a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000895e:	f0 16 00 02 	mcall	r6[8]
80008962:	14 98       	mov	r8,r10
80008964:	16 99       	mov	r9,r11
80008966:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
8000896a:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000896e:	30 0a       	mov	r10,0
80008970:	fc 1b 3f f0 	movh	r11,0x3ff0
80008974:	f0 16 00 12 	mcall	r6[72]
80008978:	14 98       	mov	r8,r10
8000897a:	16 99       	mov	r9,r11
8000897c:	10 9a       	mov	r10,r8
8000897e:	12 9b       	mov	r11,r9
80008980:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008984:	ec fc 00 1c 	ld.w	r12,r6[28]
80008988:	12 98       	mov	r8,r9
8000898a:	a3 78       	lsl	r8,0x3
8000898c:	12 08       	add	r8,r9
8000898e:	a3 78       	lsl	r8,0x3
80008990:	f8 08 00 08 	add	r8,r12,r8
80008994:	2f 08       	sub	r8,-16
80008996:	f0 e8 00 00 	ld.d	r8,r8[0]
8000899a:	f0 16 00 02 	mcall	r6[8]
8000899e:	14 98       	mov	r8,r10
800089a0:	16 99       	mov	r9,r11
800089a2:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
800089a6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800089aa:	10 99       	mov	r9,r8
800089ac:	ee 19 80 00 	eorh	r9,0x8000
800089b0:	ef 49 ff 4c 	st.w	r7[-180],r9
800089b4:	ee f8 ff ac 	ld.w	r8,r7[-84]
800089b8:	ef 48 ff 50 	st.w	r7[-176],r8
800089bc:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089c0:	ec fa 00 1c 	ld.w	r10,r6[28]
800089c4:	12 98       	mov	r8,r9
800089c6:	a3 78       	lsl	r8,0x3
800089c8:	12 08       	add	r8,r9
800089ca:	a3 78       	lsl	r8,0x3
800089cc:	f4 08 00 08 	add	r8,r10,r8
800089d0:	f0 e8 00 00 	ld.d	r8,r8[0]
800089d4:	ee ea ff 4c 	ld.d	r10,r7[-180]
800089d8:	f0 16 00 02 	mcall	r6[8]
800089dc:	14 98       	mov	r8,r10
800089de:	16 99       	mov	r9,r11
800089e0:	10 9a       	mov	r10,r8
800089e2:	12 9b       	mov	r11,r9
800089e4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089e8:	ec fc 00 1c 	ld.w	r12,r6[28]
800089ec:	12 98       	mov	r8,r9
800089ee:	a3 78       	lsl	r8,0x3
800089f0:	12 08       	add	r8,r9
800089f2:	a3 78       	lsl	r8,0x3
800089f4:	f8 08 00 08 	add	r8,r12,r8
800089f8:	2e 88       	sub	r8,-24
800089fa:	f0 e8 00 00 	ld.d	r8,r8[0]
800089fe:	f0 16 00 05 	mcall	r6[20]
80008a02:	14 98       	mov	r8,r10
80008a04:	16 99       	mov	r9,r11
80008a06:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008a0a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008a0e:	10 99       	mov	r9,r8
80008a10:	ee 19 80 00 	eorh	r9,0x8000
80008a14:	ef 49 ff 54 	st.w	r7[-172],r9
80008a18:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008a1c:	ef 48 ff 58 	st.w	r7[-168],r8
80008a20:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a24:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a28:	12 98       	mov	r8,r9
80008a2a:	a3 78       	lsl	r8,0x3
80008a2c:	12 08       	add	r8,r9
80008a2e:	2f f8       	sub	r8,-1
80008a30:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008a34:	ee ea ff 54 	ld.d	r10,r7[-172]
80008a38:	f0 16 00 02 	mcall	r6[8]
80008a3c:	14 98       	mov	r8,r10
80008a3e:	16 99       	mov	r9,r11
80008a40:	10 9a       	mov	r10,r8
80008a42:	12 9b       	mov	r11,r9
80008a44:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a48:	ec fc 00 1c 	ld.w	r12,r6[28]
80008a4c:	12 98       	mov	r8,r9
80008a4e:	a3 78       	lsl	r8,0x3
80008a50:	12 08       	add	r8,r9
80008a52:	a3 78       	lsl	r8,0x3
80008a54:	f8 08 00 08 	add	r8,r12,r8
80008a58:	2e 08       	sub	r8,-32
80008a5a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a5e:	f0 16 00 05 	mcall	r6[20]
80008a62:	14 98       	mov	r8,r10
80008a64:	16 99       	mov	r9,r11
80008a66:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008a6a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008a6e:	10 99       	mov	r9,r8
80008a70:	ee 19 80 00 	eorh	r9,0x8000
80008a74:	ef 49 ff 5c 	st.w	r7[-164],r9
80008a78:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008a7c:	ef 48 ff 60 	st.w	r7[-160],r8
80008a80:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a84:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a88:	12 98       	mov	r8,r9
80008a8a:	a3 78       	lsl	r8,0x3
80008a8c:	12 08       	add	r8,r9
80008a8e:	a3 78       	lsl	r8,0x3
80008a90:	f4 08 00 08 	add	r8,r10,r8
80008a94:	2f 08       	sub	r8,-16
80008a96:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a9a:	ee ea ff 5c 	ld.d	r10,r7[-164]
80008a9e:	f0 16 00 02 	mcall	r6[8]
80008aa2:	14 98       	mov	r8,r10
80008aa4:	16 99       	mov	r9,r11
80008aa6:	10 9a       	mov	r10,r8
80008aa8:	12 9b       	mov	r11,r9
80008aaa:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aae:	ec fc 00 1c 	ld.w	r12,r6[28]
80008ab2:	12 98       	mov	r8,r9
80008ab4:	a3 78       	lsl	r8,0x3
80008ab6:	12 08       	add	r8,r9
80008ab8:	a3 78       	lsl	r8,0x3
80008aba:	f8 08 00 08 	add	r8,r12,r8
80008abe:	2d 88       	sub	r8,-40
80008ac0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ac4:	f0 16 00 05 	mcall	r6[20]
80008ac8:	14 98       	mov	r8,r10
80008aca:	16 99       	mov	r9,r11
80008acc:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
80008ad0:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008ad4:	10 99       	mov	r9,r8
80008ad6:	ee 19 80 00 	eorh	r9,0x8000
80008ada:	ef 49 ff 64 	st.w	r7[-156],r9
80008ade:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008ae2:	ef 48 ff 68 	st.w	r7[-152],r8
80008ae6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aea:	ec fa 00 1c 	ld.w	r10,r6[28]
80008aee:	12 98       	mov	r8,r9
80008af0:	a3 78       	lsl	r8,0x3
80008af2:	12 08       	add	r8,r9
80008af4:	a3 78       	lsl	r8,0x3
80008af6:	f4 08 00 08 	add	r8,r10,r8
80008afa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008afe:	ee ea ff 64 	ld.d	r10,r7[-156]
80008b02:	f0 16 00 02 	mcall	r6[8]
80008b06:	14 98       	mov	r8,r10
80008b08:	16 99       	mov	r9,r11
80008b0a:	10 9a       	mov	r10,r8
80008b0c:	12 9b       	mov	r11,r9
80008b0e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b12:	ec fc 00 1c 	ld.w	r12,r6[28]
80008b16:	12 98       	mov	r8,r9
80008b18:	a3 78       	lsl	r8,0x3
80008b1a:	12 08       	add	r8,r9
80008b1c:	a3 78       	lsl	r8,0x3
80008b1e:	f8 08 00 08 	add	r8,r12,r8
80008b22:	2d 08       	sub	r8,-48
80008b24:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b28:	f0 16 00 05 	mcall	r6[20]
80008b2c:	14 98       	mov	r8,r10
80008b2e:	16 99       	mov	r9,r11
80008b30:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
80008b34:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008b38:	10 99       	mov	r9,r8
80008b3a:	ee 19 80 00 	eorh	r9,0x8000
80008b3e:	ef 49 ff 6c 	st.w	r7[-148],r9
80008b42:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008b46:	ef 48 ff 70 	st.w	r7[-144],r8
80008b4a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b4e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b52:	12 98       	mov	r8,r9
80008b54:	a3 78       	lsl	r8,0x3
80008b56:	12 08       	add	r8,r9
80008b58:	2f f8       	sub	r8,-1
80008b5a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008b5e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80008b62:	f0 16 00 02 	mcall	r6[8]
80008b66:	14 98       	mov	r8,r10
80008b68:	16 99       	mov	r9,r11
80008b6a:	10 9a       	mov	r10,r8
80008b6c:	12 9b       	mov	r11,r9
80008b6e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b72:	ec fc 00 1c 	ld.w	r12,r6[28]
80008b76:	12 98       	mov	r8,r9
80008b78:	a3 78       	lsl	r8,0x3
80008b7a:	12 08       	add	r8,r9
80008b7c:	a3 78       	lsl	r8,0x3
80008b7e:	f8 08 00 08 	add	r8,r12,r8
80008b82:	2c 88       	sub	r8,-56
80008b84:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b88:	f0 16 00 05 	mcall	r6[20]
80008b8c:	14 98       	mov	r8,r10
80008b8e:	16 99       	mov	r9,r11
80008b90:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80008b94:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008b98:	10 99       	mov	r9,r8
80008b9a:	ee 19 80 00 	eorh	r9,0x8000
80008b9e:	ef 49 ff 74 	st.w	r7[-140],r9
80008ba2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008ba6:	ef 48 ff 78 	st.w	r7[-136],r8
80008baa:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008bae:	ec fa 00 1c 	ld.w	r10,r6[28]
80008bb2:	12 98       	mov	r8,r9
80008bb4:	a3 78       	lsl	r8,0x3
80008bb6:	12 08       	add	r8,r9
80008bb8:	a3 78       	lsl	r8,0x3
80008bba:	f4 08 00 08 	add	r8,r10,r8
80008bbe:	2f 08       	sub	r8,-16
80008bc0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008bc4:	ee ea ff 74 	ld.d	r10,r7[-140]
80008bc8:	f0 16 00 02 	mcall	r6[8]
80008bcc:	14 98       	mov	r8,r10
80008bce:	16 99       	mov	r9,r11
80008bd0:	10 9a       	mov	r10,r8
80008bd2:	12 9b       	mov	r11,r9
80008bd4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008bd8:	ec fc 00 1c 	ld.w	r12,r6[28]
80008bdc:	12 98       	mov	r8,r9
80008bde:	a3 78       	lsl	r8,0x3
80008be0:	12 08       	add	r8,r9
80008be2:	a3 78       	lsl	r8,0x3
80008be4:	f8 08 00 08 	add	r8,r12,r8
80008be8:	2c 08       	sub	r8,-64
80008bea:	f0 e8 00 00 	ld.d	r8,r8[0]
80008bee:	f0 16 00 05 	mcall	r6[20]
80008bf2:	14 98       	mov	r8,r10
80008bf4:	16 99       	mov	r9,r11
80008bf6:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008bfa:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008bfe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c02:	12 98       	mov	r8,r9
80008c04:	a3 78       	lsl	r8,0x3
80008c06:	12 08       	add	r8,r9
80008c08:	a3 78       	lsl	r8,0x3
80008c0a:	10 0a       	add	r10,r8
80008c0c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008c10:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80008c14:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c18:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c1c:	12 98       	mov	r8,r9
80008c1e:	a3 78       	lsl	r8,0x3
80008c20:	12 08       	add	r8,r9
80008c22:	f0 cb ff ff 	sub	r11,r8,-1
80008c26:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008c2a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008c2e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c32:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c36:	12 98       	mov	r8,r9
80008c38:	a3 78       	lsl	r8,0x3
80008c3a:	12 08       	add	r8,r9
80008c3c:	a3 78       	lsl	r8,0x3
80008c3e:	f4 08 00 08 	add	r8,r10,r8
80008c42:	f0 ca ff f0 	sub	r10,r8,-16
80008c46:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008c4a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008c4e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c52:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c56:	12 98       	mov	r8,r9
80008c58:	a3 78       	lsl	r8,0x3
80008c5a:	12 08       	add	r8,r9
80008c5c:	a3 78       	lsl	r8,0x3
80008c5e:	f4 08 00 08 	add	r8,r10,r8
80008c62:	f0 ca ff e8 	sub	r10,r8,-24
80008c66:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008c6a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008c6e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c72:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c76:	12 98       	mov	r8,r9
80008c78:	a3 78       	lsl	r8,0x3
80008c7a:	12 08       	add	r8,r9
80008c7c:	a3 78       	lsl	r8,0x3
80008c7e:	f4 08 00 08 	add	r8,r10,r8
80008c82:	f0 ca ff e0 	sub	r10,r8,-32
80008c86:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008c8a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80008c8e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c92:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c96:	12 98       	mov	r8,r9
80008c98:	a3 78       	lsl	r8,0x3
80008c9a:	12 08       	add	r8,r9
80008c9c:	a3 78       	lsl	r8,0x3
80008c9e:	f4 08 00 08 	add	r8,r10,r8
80008ca2:	f0 ca ff d8 	sub	r10,r8,-40
80008ca6:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008caa:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80008cae:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cb2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cb6:	12 98       	mov	r8,r9
80008cb8:	a3 78       	lsl	r8,0x3
80008cba:	12 08       	add	r8,r9
80008cbc:	a3 78       	lsl	r8,0x3
80008cbe:	f4 08 00 08 	add	r8,r10,r8
80008cc2:	f0 ca ff d0 	sub	r10,r8,-48
80008cc6:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008cca:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80008cce:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cd2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cd6:	12 98       	mov	r8,r9
80008cd8:	a3 78       	lsl	r8,0x3
80008cda:	12 08       	add	r8,r9
80008cdc:	a3 78       	lsl	r8,0x3
80008cde:	f4 08 00 08 	add	r8,r10,r8
80008ce2:	f0 ca ff c8 	sub	r10,r8,-56
80008ce6:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008cea:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80008cee:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cf2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cf6:	12 98       	mov	r8,r9
80008cf8:	a3 78       	lsl	r8,0x3
80008cfa:	12 08       	add	r8,r9
80008cfc:	a3 78       	lsl	r8,0x3
80008cfe:	f4 08 00 08 	add	r8,r10,r8
80008d02:	f0 ca ff c0 	sub	r10,r8,-64
80008d06:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008d0a:	f4 e9 00 00 	st.d	r10[0],r8
}
80008d0e:	2c 7d       	sub	sp,-228
80008d10:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80008d14:	80 00       	ld.sh	r0,r0[0x0]
80008d16:	7f 9e       	ld.w	lr,pc[0x64]

80008d18 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80008d18:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008d1c:	1a 97       	mov	r7,sp
80008d1e:	fa cd 00 d8 	sub	sp,sp,216
80008d22:	fe f6 0c 1a 	ld.w	r6,pc[3098]
80008d26:	1e 26       	rsub	r6,pc
80008d28:	ef 4c ff 8c 	st.w	r7[-116],r12
80008d2c:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80008d30:	ee fc ff 88 	ld.w	r12,r7[-120]
80008d34:	f0 16 00 03 	mcall	r6[12]
80008d38:	ec f8 00 00 	ld.w	r8,r6[0]
80008d3c:	70 0c       	ld.w	r12,r8[0x0]
80008d3e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d42:	12 98       	mov	r8,r9
80008d44:	a1 78       	lsl	r8,0x1
80008d46:	12 08       	add	r8,r9
80008d48:	2f f8       	sub	r8,-1
80008d4a:	a3 78       	lsl	r8,0x3
80008d4c:	f8 08 00 08 	add	r8,r12,r8
80008d50:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
80008d54:	f0 16 00 12 	mcall	r6[72]
80008d58:	14 98       	mov	r8,r10
80008d5a:	16 99       	mov	r9,r11
80008d5c:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80008d60:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d64:	ec fa 00 18 	ld.w	r10,r6[24]
80008d68:	12 98       	mov	r8,r9
80008d6a:	a3 78       	lsl	r8,0x3
80008d6c:	12 08       	add	r8,r9
80008d6e:	a3 78       	lsl	r8,0x3
80008d70:	f4 08 00 08 	add	r8,r10,r8
80008d74:	2e 08       	sub	r8,-32
80008d76:	f0 ea 00 00 	ld.d	r10,r8[0]
80008d7a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d7e:	ec f8 01 54 	ld.w	r8,r6[340]
80008d82:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008d86:	f0 16 00 05 	mcall	r6[20]
80008d8a:	14 98       	mov	r8,r10
80008d8c:	16 99       	mov	r9,r11
80008d8e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
80008d92:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d96:	ec fa 00 18 	ld.w	r10,r6[24]
80008d9a:	12 98       	mov	r8,r9
80008d9c:	a3 78       	lsl	r8,0x3
80008d9e:	12 08       	add	r8,r9
80008da0:	2f f8       	sub	r8,-1
80008da2:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80008da6:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008daa:	f0 16 00 0c 	mcall	r6[48]
80008dae:	14 98       	mov	r8,r10
80008db0:	16 99       	mov	r9,r11
80008db2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
80008db6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008dba:	ec fa 00 18 	ld.w	r10,r6[24]
80008dbe:	12 98       	mov	r8,r9
80008dc0:	a3 78       	lsl	r8,0x3
80008dc2:	12 08       	add	r8,r9
80008dc4:	a3 78       	lsl	r8,0x3
80008dc6:	f4 08 00 08 	add	r8,r10,r8
80008dca:	2e 08       	sub	r8,-32
80008dcc:	f0 ea 00 00 	ld.d	r10,r8[0]
80008dd0:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008dd4:	f0 16 00 0c 	mcall	r6[48]
80008dd8:	14 98       	mov	r8,r10
80008dda:	16 99       	mov	r9,r11
80008ddc:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
80008de0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008de4:	ec fa 00 18 	ld.w	r10,r6[24]
80008de8:	12 98       	mov	r8,r9
80008dea:	a3 78       	lsl	r8,0x3
80008dec:	12 08       	add	r8,r9
80008dee:	a3 78       	lsl	r8,0x3
80008df0:	f4 08 00 08 	add	r8,r10,r8
80008df4:	2c 88       	sub	r8,-56
80008df6:	f0 ea 00 00 	ld.d	r10,r8[0]
80008dfa:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008dfe:	f0 16 00 0c 	mcall	r6[48]
80008e02:	14 98       	mov	r8,r10
80008e04:	16 99       	mov	r9,r11
80008e06:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
80008e0a:	ec f8 00 00 	ld.w	r8,r6[0]
80008e0e:	70 01       	ld.w	r1,r8[0x0]
80008e10:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008e14:	ec f8 00 00 	ld.w	r8,r6[0]
80008e18:	70 0a       	ld.w	r10,r8[0x0]
80008e1a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e1e:	12 98       	mov	r8,r9
80008e20:	a1 78       	lsl	r8,0x1
80008e22:	12 08       	add	r8,r9
80008e24:	a3 78       	lsl	r8,0x3
80008e26:	f4 08 00 08 	add	r8,r10,r8
80008e2a:	f0 c8 f5 e4 	sub	r8,r8,-2588
80008e2e:	f0 e2 00 00 	ld.d	r2,r8[0]
80008e32:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008e36:	ee ea ff a0 	ld.d	r10,r7[-96]
80008e3a:	f0 16 00 02 	mcall	r6[8]
80008e3e:	14 98       	mov	r8,r10
80008e40:	16 99       	mov	r9,r11
80008e42:	04 9a       	mov	r10,r2
80008e44:	06 9b       	mov	r11,r3
80008e46:	f0 16 00 05 	mcall	r6[20]
80008e4a:	14 98       	mov	r8,r10
80008e4c:	16 99       	mov	r9,r11
80008e4e:	10 9a       	mov	r10,r8
80008e50:	12 9b       	mov	r11,r9
80008e52:	0a 98       	mov	r8,r5
80008e54:	a1 78       	lsl	r8,0x1
80008e56:	0a 08       	add	r8,r5
80008e58:	a3 78       	lsl	r8,0x3
80008e5a:	e2 08 00 08 	add	r8,r1,r8
80008e5e:	f0 c8 f5 e4 	sub	r8,r8,-2588
80008e62:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
80008e66:	ec f8 00 00 	ld.w	r8,r6[0]
80008e6a:	70 01       	ld.w	r1,r8[0x0]
80008e6c:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008e70:	ec f8 00 00 	ld.w	r8,r6[0]
80008e74:	70 0a       	ld.w	r10,r8[0x0]
80008e76:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e7a:	12 98       	mov	r8,r9
80008e7c:	a1 78       	lsl	r8,0x1
80008e7e:	12 08       	add	r8,r9
80008e80:	2f f8       	sub	r8,-1
80008e82:	a3 78       	lsl	r8,0x3
80008e84:	f4 08 00 08 	add	r8,r10,r8
80008e88:	f0 e2 0a 1c 	ld.d	r2,r8[2588]
80008e8c:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008e90:	ee ea ff a8 	ld.d	r10,r7[-88]
80008e94:	f0 16 00 02 	mcall	r6[8]
80008e98:	14 98       	mov	r8,r10
80008e9a:	16 99       	mov	r9,r11
80008e9c:	04 9a       	mov	r10,r2
80008e9e:	06 9b       	mov	r11,r3
80008ea0:	f0 16 00 05 	mcall	r6[20]
80008ea4:	14 98       	mov	r8,r10
80008ea6:	16 99       	mov	r9,r11
80008ea8:	10 9a       	mov	r10,r8
80008eaa:	12 9b       	mov	r11,r9
80008eac:	0a 98       	mov	r8,r5
80008eae:	a1 78       	lsl	r8,0x1
80008eb0:	0a 08       	add	r8,r5
80008eb2:	2f f8       	sub	r8,-1
80008eb4:	a3 78       	lsl	r8,0x3
80008eb6:	e2 08 00 08 	add	r8,r1,r8
80008eba:	f0 eb 0a 1c 	st.d	r8[2588],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
80008ebe:	ec f8 00 00 	ld.w	r8,r6[0]
80008ec2:	70 01       	ld.w	r1,r8[0x0]
80008ec4:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008ec8:	ec f8 00 00 	ld.w	r8,r6[0]
80008ecc:	70 0a       	ld.w	r10,r8[0x0]
80008ece:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008ed2:	12 98       	mov	r8,r9
80008ed4:	a1 78       	lsl	r8,0x1
80008ed6:	12 08       	add	r8,r9
80008ed8:	a3 78       	lsl	r8,0x3
80008eda:	f4 08 00 08 	add	r8,r10,r8
80008ede:	f0 c8 f5 d4 	sub	r8,r8,-2604
80008ee2:	f0 e2 00 00 	ld.d	r2,r8[0]
80008ee6:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008eea:	ee ea ff b0 	ld.d	r10,r7[-80]
80008eee:	f0 16 00 02 	mcall	r6[8]
80008ef2:	14 98       	mov	r8,r10
80008ef4:	16 99       	mov	r9,r11
80008ef6:	04 9a       	mov	r10,r2
80008ef8:	06 9b       	mov	r11,r3
80008efa:	f0 16 00 05 	mcall	r6[20]
80008efe:	14 98       	mov	r8,r10
80008f00:	16 99       	mov	r9,r11
80008f02:	10 9a       	mov	r10,r8
80008f04:	12 9b       	mov	r11,r9
80008f06:	0a 98       	mov	r8,r5
80008f08:	a1 78       	lsl	r8,0x1
80008f0a:	0a 08       	add	r8,r5
80008f0c:	a3 78       	lsl	r8,0x3
80008f0e:	e2 08 00 08 	add	r8,r1,r8
80008f12:	f0 c8 f5 d4 	sub	r8,r8,-2604
80008f16:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80008f1a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f1e:	10 99       	mov	r9,r8
80008f20:	ee 19 80 00 	eorh	r9,0x8000
80008f24:	ef 49 ff 28 	st.w	r7[-216],r9
80008f28:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008f2c:	ef 48 ff 2c 	st.w	r7[-212],r8
80008f30:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f34:	ec fa 00 18 	ld.w	r10,r6[24]
80008f38:	12 98       	mov	r8,r9
80008f3a:	a3 78       	lsl	r8,0x3
80008f3c:	12 08       	add	r8,r9
80008f3e:	a3 78       	lsl	r8,0x3
80008f40:	f4 08 00 08 	add	r8,r10,r8
80008f44:	2e 88       	sub	r8,-24
80008f46:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f4a:	ee ea ff 28 	ld.d	r10,r7[-216]
80008f4e:	f0 16 00 02 	mcall	r6[8]
80008f52:	14 98       	mov	r8,r10
80008f54:	16 99       	mov	r9,r11
80008f56:	10 9a       	mov	r10,r8
80008f58:	12 9b       	mov	r11,r9
80008f5a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f5e:	ec fc 00 18 	ld.w	r12,r6[24]
80008f62:	12 98       	mov	r8,r9
80008f64:	a3 78       	lsl	r8,0x3
80008f66:	12 08       	add	r8,r9
80008f68:	a3 78       	lsl	r8,0x3
80008f6a:	f8 08 00 08 	add	r8,r12,r8
80008f6e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f72:	f0 16 00 05 	mcall	r6[20]
80008f76:	14 98       	mov	r8,r10
80008f78:	16 99       	mov	r9,r11
80008f7a:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80008f7e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008f82:	10 99       	mov	r9,r8
80008f84:	ee 19 80 00 	eorh	r9,0x8000
80008f88:	ef 49 ff 30 	st.w	r7[-208],r9
80008f8c:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008f90:	ef 48 ff 34 	st.w	r7[-204],r8
80008f94:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f98:	ec fa 00 18 	ld.w	r10,r6[24]
80008f9c:	12 98       	mov	r8,r9
80008f9e:	a3 78       	lsl	r8,0x3
80008fa0:	12 08       	add	r8,r9
80008fa2:	a3 78       	lsl	r8,0x3
80008fa4:	f4 08 00 08 	add	r8,r10,r8
80008fa8:	2e 08       	sub	r8,-32
80008faa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008fae:	ee ea ff 30 	ld.d	r10,r7[-208]
80008fb2:	f0 16 00 02 	mcall	r6[8]
80008fb6:	14 98       	mov	r8,r10
80008fb8:	16 99       	mov	r9,r11
80008fba:	10 9a       	mov	r10,r8
80008fbc:	12 9b       	mov	r11,r9
80008fbe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008fc2:	ec fc 00 18 	ld.w	r12,r6[24]
80008fc6:	12 98       	mov	r8,r9
80008fc8:	a3 78       	lsl	r8,0x3
80008fca:	12 08       	add	r8,r9
80008fcc:	2f f8       	sub	r8,-1
80008fce:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008fd2:	f0 16 00 05 	mcall	r6[20]
80008fd6:	14 98       	mov	r8,r10
80008fd8:	16 99       	mov	r9,r11
80008fda:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
80008fde:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008fe2:	10 99       	mov	r9,r8
80008fe4:	ee 19 80 00 	eorh	r9,0x8000
80008fe8:	ef 49 ff 38 	st.w	r7[-200],r9
80008fec:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008ff0:	ef 48 ff 3c 	st.w	r7[-196],r8
80008ff4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008ff8:	ec fa 00 18 	ld.w	r10,r6[24]
80008ffc:	12 98       	mov	r8,r9
80008ffe:	a3 78       	lsl	r8,0x3
80009000:	12 08       	add	r8,r9
80009002:	a3 78       	lsl	r8,0x3
80009004:	f4 08 00 08 	add	r8,r10,r8
80009008:	2d 88       	sub	r8,-40
8000900a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000900e:	ee ea ff 38 	ld.d	r10,r7[-200]
80009012:	f0 16 00 02 	mcall	r6[8]
80009016:	14 98       	mov	r8,r10
80009018:	16 99       	mov	r9,r11
8000901a:	10 9a       	mov	r10,r8
8000901c:	12 9b       	mov	r11,r9
8000901e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009022:	ec fc 00 18 	ld.w	r12,r6[24]
80009026:	12 98       	mov	r8,r9
80009028:	a3 78       	lsl	r8,0x3
8000902a:	12 08       	add	r8,r9
8000902c:	a3 78       	lsl	r8,0x3
8000902e:	f8 08 00 08 	add	r8,r12,r8
80009032:	2f 08       	sub	r8,-16
80009034:	f0 e8 00 00 	ld.d	r8,r8[0]
80009038:	f0 16 00 05 	mcall	r6[20]
8000903c:	14 98       	mov	r8,r10
8000903e:	16 99       	mov	r9,r11
80009040:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80009044:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009048:	30 0a       	mov	r10,0
8000904a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000904e:	f0 16 00 12 	mcall	r6[72]
80009052:	14 98       	mov	r8,r10
80009054:	16 99       	mov	r9,r11
80009056:	10 9a       	mov	r10,r8
80009058:	12 9b       	mov	r11,r9
8000905a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000905e:	ec fc 00 18 	ld.w	r12,r6[24]
80009062:	12 98       	mov	r8,r9
80009064:	a3 78       	lsl	r8,0x3
80009066:	12 08       	add	r8,r9
80009068:	a3 78       	lsl	r8,0x3
8000906a:	f8 08 00 08 	add	r8,r12,r8
8000906e:	2e 88       	sub	r8,-24
80009070:	f0 e8 00 00 	ld.d	r8,r8[0]
80009074:	f0 16 00 02 	mcall	r6[8]
80009078:	14 98       	mov	r8,r10
8000907a:	16 99       	mov	r9,r11
8000907c:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80009080:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009084:	30 0a       	mov	r10,0
80009086:	fc 1b 3f f0 	movh	r11,0x3ff0
8000908a:	f0 16 00 12 	mcall	r6[72]
8000908e:	14 98       	mov	r8,r10
80009090:	16 99       	mov	r9,r11
80009092:	10 9a       	mov	r10,r8
80009094:	12 9b       	mov	r11,r9
80009096:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000909a:	ec fc 00 18 	ld.w	r12,r6[24]
8000909e:	12 98       	mov	r8,r9
800090a0:	a3 78       	lsl	r8,0x3
800090a2:	12 08       	add	r8,r9
800090a4:	a3 78       	lsl	r8,0x3
800090a6:	f8 08 00 08 	add	r8,r12,r8
800090aa:	2e 08       	sub	r8,-32
800090ac:	f0 e8 00 00 	ld.d	r8,r8[0]
800090b0:	f0 16 00 02 	mcall	r6[8]
800090b4:	14 98       	mov	r8,r10
800090b6:	16 99       	mov	r9,r11
800090b8:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
800090bc:	ee e8 ff a8 	ld.d	r8,r7[-88]
800090c0:	30 0a       	mov	r10,0
800090c2:	fc 1b 3f f0 	movh	r11,0x3ff0
800090c6:	f0 16 00 12 	mcall	r6[72]
800090ca:	14 98       	mov	r8,r10
800090cc:	16 99       	mov	r9,r11
800090ce:	10 9a       	mov	r10,r8
800090d0:	12 9b       	mov	r11,r9
800090d2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090d6:	ec fc 00 18 	ld.w	r12,r6[24]
800090da:	12 98       	mov	r8,r9
800090dc:	a3 78       	lsl	r8,0x3
800090de:	12 08       	add	r8,r9
800090e0:	a3 78       	lsl	r8,0x3
800090e2:	f8 08 00 08 	add	r8,r12,r8
800090e6:	2d 88       	sub	r8,-40
800090e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800090ec:	f0 16 00 02 	mcall	r6[8]
800090f0:	14 98       	mov	r8,r10
800090f2:	16 99       	mov	r9,r11
800090f4:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
800090f8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800090fc:	10 99       	mov	r9,r8
800090fe:	ee 19 80 00 	eorh	r9,0x8000
80009102:	ef 49 ff 40 	st.w	r7[-192],r9
80009106:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000910a:	ef 48 ff 44 	st.w	r7[-188],r8
8000910e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009112:	ec fa 00 18 	ld.w	r10,r6[24]
80009116:	12 98       	mov	r8,r9
80009118:	a3 78       	lsl	r8,0x3
8000911a:	12 08       	add	r8,r9
8000911c:	a3 78       	lsl	r8,0x3
8000911e:	f4 08 00 08 	add	r8,r10,r8
80009122:	2e 88       	sub	r8,-24
80009124:	f0 e8 00 00 	ld.d	r8,r8[0]
80009128:	ee ea ff 40 	ld.d	r10,r7[-192]
8000912c:	f0 16 00 02 	mcall	r6[8]
80009130:	14 98       	mov	r8,r10
80009132:	16 99       	mov	r9,r11
80009134:	10 9a       	mov	r10,r8
80009136:	12 9b       	mov	r11,r9
80009138:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000913c:	ec fc 00 18 	ld.w	r12,r6[24]
80009140:	12 98       	mov	r8,r9
80009142:	a3 78       	lsl	r8,0x3
80009144:	12 08       	add	r8,r9
80009146:	a3 78       	lsl	r8,0x3
80009148:	f8 08 00 08 	add	r8,r12,r8
8000914c:	2d 08       	sub	r8,-48
8000914e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009152:	f0 16 00 05 	mcall	r6[20]
80009156:	14 98       	mov	r8,r10
80009158:	16 99       	mov	r9,r11
8000915a:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
8000915e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009162:	10 99       	mov	r9,r8
80009164:	ee 19 80 00 	eorh	r9,0x8000
80009168:	ef 49 ff 48 	st.w	r7[-184],r9
8000916c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009170:	ef 48 ff 4c 	st.w	r7[-180],r8
80009174:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009178:	ec fa 00 18 	ld.w	r10,r6[24]
8000917c:	12 98       	mov	r8,r9
8000917e:	a3 78       	lsl	r8,0x3
80009180:	12 08       	add	r8,r9
80009182:	a3 78       	lsl	r8,0x3
80009184:	f4 08 00 08 	add	r8,r10,r8
80009188:	2e 08       	sub	r8,-32
8000918a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000918e:	ee ea ff 48 	ld.d	r10,r7[-184]
80009192:	f0 16 00 02 	mcall	r6[8]
80009196:	14 98       	mov	r8,r10
80009198:	16 99       	mov	r9,r11
8000919a:	10 9a       	mov	r10,r8
8000919c:	12 9b       	mov	r11,r9
8000919e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091a2:	ec fc 00 18 	ld.w	r12,r6[24]
800091a6:	12 98       	mov	r8,r9
800091a8:	a3 78       	lsl	r8,0x3
800091aa:	12 08       	add	r8,r9
800091ac:	a3 78       	lsl	r8,0x3
800091ae:	f8 08 00 08 	add	r8,r12,r8
800091b2:	2c 88       	sub	r8,-56
800091b4:	f0 e8 00 00 	ld.d	r8,r8[0]
800091b8:	f0 16 00 05 	mcall	r6[20]
800091bc:	14 98       	mov	r8,r10
800091be:	16 99       	mov	r9,r11
800091c0:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
800091c4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800091c8:	10 99       	mov	r9,r8
800091ca:	ee 19 80 00 	eorh	r9,0x8000
800091ce:	ef 49 ff 50 	st.w	r7[-176],r9
800091d2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800091d6:	ef 48 ff 54 	st.w	r7[-172],r8
800091da:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091de:	ec fa 00 18 	ld.w	r10,r6[24]
800091e2:	12 98       	mov	r8,r9
800091e4:	a3 78       	lsl	r8,0x3
800091e6:	12 08       	add	r8,r9
800091e8:	a3 78       	lsl	r8,0x3
800091ea:	f4 08 00 08 	add	r8,r10,r8
800091ee:	2d 88       	sub	r8,-40
800091f0:	f0 e8 00 00 	ld.d	r8,r8[0]
800091f4:	ee ea ff 50 	ld.d	r10,r7[-176]
800091f8:	f0 16 00 02 	mcall	r6[8]
800091fc:	14 98       	mov	r8,r10
800091fe:	16 99       	mov	r9,r11
80009200:	10 9a       	mov	r10,r8
80009202:	12 9b       	mov	r11,r9
80009204:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009208:	ec fc 00 18 	ld.w	r12,r6[24]
8000920c:	12 98       	mov	r8,r9
8000920e:	a3 78       	lsl	r8,0x3
80009210:	12 08       	add	r8,r9
80009212:	a3 78       	lsl	r8,0x3
80009214:	f8 08 00 08 	add	r8,r12,r8
80009218:	2c 08       	sub	r8,-64
8000921a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000921e:	f0 16 00 05 	mcall	r6[20]
80009222:	14 98       	mov	r8,r10
80009224:	16 99       	mov	r9,r11
80009226:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000922a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000922e:	ec fa 00 18 	ld.w	r10,r6[24]
80009232:	12 98       	mov	r8,r9
80009234:	a3 78       	lsl	r8,0x3
80009236:	12 08       	add	r8,r9
80009238:	a3 78       	lsl	r8,0x3
8000923a:	10 0a       	add	r10,r8
8000923c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009240:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009244:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009248:	ec fb 00 18 	ld.w	r11,r6[24]
8000924c:	12 98       	mov	r8,r9
8000924e:	a3 78       	lsl	r8,0x3
80009250:	12 08       	add	r8,r9
80009252:	f0 ca ff ff 	sub	r10,r8,-1
80009256:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000925a:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000925e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009262:	ec fa 00 18 	ld.w	r10,r6[24]
80009266:	12 98       	mov	r8,r9
80009268:	a3 78       	lsl	r8,0x3
8000926a:	12 08       	add	r8,r9
8000926c:	a3 78       	lsl	r8,0x3
8000926e:	f4 08 00 08 	add	r8,r10,r8
80009272:	f0 ca ff f0 	sub	r10,r8,-16
80009276:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000927a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000927e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009282:	ec fa 00 18 	ld.w	r10,r6[24]
80009286:	12 98       	mov	r8,r9
80009288:	a3 78       	lsl	r8,0x3
8000928a:	12 08       	add	r8,r9
8000928c:	a3 78       	lsl	r8,0x3
8000928e:	f4 08 00 08 	add	r8,r10,r8
80009292:	f0 ca ff e8 	sub	r10,r8,-24
80009296:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000929a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000929e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092a2:	ec fa 00 18 	ld.w	r10,r6[24]
800092a6:	12 98       	mov	r8,r9
800092a8:	a3 78       	lsl	r8,0x3
800092aa:	12 08       	add	r8,r9
800092ac:	a3 78       	lsl	r8,0x3
800092ae:	f4 08 00 08 	add	r8,r10,r8
800092b2:	f0 ca ff e0 	sub	r10,r8,-32
800092b6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800092ba:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800092be:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092c2:	ec fa 00 18 	ld.w	r10,r6[24]
800092c6:	12 98       	mov	r8,r9
800092c8:	a3 78       	lsl	r8,0x3
800092ca:	12 08       	add	r8,r9
800092cc:	a3 78       	lsl	r8,0x3
800092ce:	f4 08 00 08 	add	r8,r10,r8
800092d2:	f0 ca ff d8 	sub	r10,r8,-40
800092d6:	ee e8 ff e0 	ld.d	r8,r7[-32]
800092da:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800092de:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092e2:	ec fa 00 18 	ld.w	r10,r6[24]
800092e6:	12 98       	mov	r8,r9
800092e8:	a3 78       	lsl	r8,0x3
800092ea:	12 08       	add	r8,r9
800092ec:	a3 78       	lsl	r8,0x3
800092ee:	f4 08 00 08 	add	r8,r10,r8
800092f2:	f0 ca ff d0 	sub	r10,r8,-48
800092f6:	ee e8 ff e8 	ld.d	r8,r7[-24]
800092fa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800092fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009302:	ec fa 00 18 	ld.w	r10,r6[24]
80009306:	12 98       	mov	r8,r9
80009308:	a3 78       	lsl	r8,0x3
8000930a:	12 08       	add	r8,r9
8000930c:	a3 78       	lsl	r8,0x3
8000930e:	f4 08 00 08 	add	r8,r10,r8
80009312:	f0 ca ff c8 	sub	r10,r8,-56
80009316:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000931a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000931e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009322:	ec fa 00 18 	ld.w	r10,r6[24]
80009326:	12 98       	mov	r8,r9
80009328:	a3 78       	lsl	r8,0x3
8000932a:	12 08       	add	r8,r9
8000932c:	a3 78       	lsl	r8,0x3
8000932e:	f4 08 00 08 	add	r8,r10,r8
80009332:	f0 ca ff c0 	sub	r10,r8,-64
80009336:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000933a:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
8000933e:	ec f8 00 00 	ld.w	r8,r6[0]
80009342:	70 09       	ld.w	r9,r8[0x0]
80009344:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009348:	f0 c8 fc f3 	sub	r8,r8,-781
8000934c:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80009350:	ee f8 ff 88 	ld.w	r8,r7[-120]
80009354:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80009358:	10 9c       	mov	r12,r8
8000935a:	f0 16 00 03 	mcall	r6[12]
8000935e:	14 98       	mov	r8,r10
80009360:	16 99       	mov	r9,r11
80009362:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
80009366:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000936a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000936e:	12 98       	mov	r8,r9
80009370:	a3 78       	lsl	r8,0x3
80009372:	12 08       	add	r8,r9
80009374:	a3 78       	lsl	r8,0x3
80009376:	f4 08 00 08 	add	r8,r10,r8
8000937a:	2e 08       	sub	r8,-32
8000937c:	f0 ea 00 00 	ld.d	r10,r8[0]
80009380:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009384:	ec f8 01 50 	ld.w	r8,r6[336]
80009388:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000938c:	f0 16 00 05 	mcall	r6[20]
80009390:	14 98       	mov	r8,r10
80009392:	16 99       	mov	r9,r11
80009394:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
80009398:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000939c:	ec fa 00 1c 	ld.w	r10,r6[28]
800093a0:	12 98       	mov	r8,r9
800093a2:	a3 78       	lsl	r8,0x3
800093a4:	12 08       	add	r8,r9
800093a6:	2f f8       	sub	r8,-1
800093a8:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800093ac:	ee e8 ff 98 	ld.d	r8,r7[-104]
800093b0:	f0 16 00 0c 	mcall	r6[48]
800093b4:	14 98       	mov	r8,r10
800093b6:	16 99       	mov	r9,r11
800093b8:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
800093bc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093c0:	ec fa 00 1c 	ld.w	r10,r6[28]
800093c4:	12 98       	mov	r8,r9
800093c6:	a3 78       	lsl	r8,0x3
800093c8:	12 08       	add	r8,r9
800093ca:	a3 78       	lsl	r8,0x3
800093cc:	f4 08 00 08 	add	r8,r10,r8
800093d0:	2e 08       	sub	r8,-32
800093d2:	f0 ea 00 00 	ld.d	r10,r8[0]
800093d6:	ee e8 ff 98 	ld.d	r8,r7[-104]
800093da:	f0 16 00 0c 	mcall	r6[48]
800093de:	14 98       	mov	r8,r10
800093e0:	16 99       	mov	r9,r11
800093e2:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
800093e6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093ea:	ec fa 00 1c 	ld.w	r10,r6[28]
800093ee:	12 98       	mov	r8,r9
800093f0:	a3 78       	lsl	r8,0x3
800093f2:	12 08       	add	r8,r9
800093f4:	a3 78       	lsl	r8,0x3
800093f6:	f4 08 00 08 	add	r8,r10,r8
800093fa:	2c 88       	sub	r8,-56
800093fc:	f0 ea 00 00 	ld.d	r10,r8[0]
80009400:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009404:	f0 16 00 0c 	mcall	r6[48]
80009408:	14 98       	mov	r8,r10
8000940a:	16 99       	mov	r9,r11
8000940c:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80009410:	ec f8 00 00 	ld.w	r8,r6[0]
80009414:	70 01       	ld.w	r1,r8[0x0]
80009416:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000941a:	ec f8 00 00 	ld.w	r8,r6[0]
8000941e:	70 09       	ld.w	r9,r8[0x0]
80009420:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009424:	f0 c8 fc e9 	sub	r8,r8,-791
80009428:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000942c:	10 9c       	mov	r12,r8
8000942e:	f0 16 00 03 	mcall	r6[12]
80009432:	14 92       	mov	r2,r10
80009434:	16 93       	mov	r3,r11
80009436:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000943a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000943e:	f0 16 00 02 	mcall	r6[8]
80009442:	14 98       	mov	r8,r10
80009444:	16 99       	mov	r9,r11
80009446:	04 9a       	mov	r10,r2
80009448:	06 9b       	mov	r11,r3
8000944a:	f0 16 00 05 	mcall	r6[20]
8000944e:	14 98       	mov	r8,r10
80009450:	16 99       	mov	r9,r11
80009452:	10 9a       	mov	r10,r8
80009454:	12 9b       	mov	r11,r9
80009456:	f0 16 00 09 	mcall	r6[36]
8000945a:	18 99       	mov	r9,r12
8000945c:	ea c8 fc e9 	sub	r8,r5,-791
80009460:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
80009464:	ec f8 00 00 	ld.w	r8,r6[0]
80009468:	70 01       	ld.w	r1,r8[0x0]
8000946a:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000946e:	ec f8 00 00 	ld.w	r8,r6[0]
80009472:	70 09       	ld.w	r9,r8[0x0]
80009474:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009478:	f0 c8 fc f3 	sub	r8,r8,-781
8000947c:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009480:	10 9c       	mov	r12,r8
80009482:	f0 16 00 03 	mcall	r6[12]
80009486:	14 92       	mov	r2,r10
80009488:	16 93       	mov	r3,r11
8000948a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000948e:	ee ea ff a8 	ld.d	r10,r7[-88]
80009492:	f0 16 00 02 	mcall	r6[8]
80009496:	14 98       	mov	r8,r10
80009498:	16 99       	mov	r9,r11
8000949a:	04 9a       	mov	r10,r2
8000949c:	06 9b       	mov	r11,r3
8000949e:	f0 16 00 05 	mcall	r6[20]
800094a2:	14 98       	mov	r8,r10
800094a4:	16 99       	mov	r9,r11
800094a6:	10 9a       	mov	r10,r8
800094a8:	12 9b       	mov	r11,r9
800094aa:	f0 16 00 09 	mcall	r6[36]
800094ae:	18 99       	mov	r9,r12
800094b0:	ea c8 fc f3 	sub	r8,r5,-781
800094b4:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800094b8:	ec f8 00 00 	ld.w	r8,r6[0]
800094bc:	70 01       	ld.w	r1,r8[0x0]
800094be:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800094c2:	f0 c5 ff fd 	sub	r5,r8,-3
800094c6:	ec f8 00 00 	ld.w	r8,r6[0]
800094ca:	70 09       	ld.w	r9,r8[0x0]
800094cc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800094d0:	2f d8       	sub	r8,-3
800094d2:	2f 48       	sub	r8,-12
800094d4:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800094d8:	10 9c       	mov	r12,r8
800094da:	f0 16 00 03 	mcall	r6[12]
800094de:	14 92       	mov	r2,r10
800094e0:	16 93       	mov	r3,r11
800094e2:	ee e8 ff 90 	ld.d	r8,r7[-112]
800094e6:	ee ea ff b0 	ld.d	r10,r7[-80]
800094ea:	f0 16 00 02 	mcall	r6[8]
800094ee:	14 98       	mov	r8,r10
800094f0:	16 99       	mov	r9,r11
800094f2:	04 9a       	mov	r10,r2
800094f4:	06 9b       	mov	r11,r3
800094f6:	f0 16 00 05 	mcall	r6[20]
800094fa:	14 98       	mov	r8,r10
800094fc:	16 99       	mov	r9,r11
800094fe:	10 9a       	mov	r10,r8
80009500:	12 9b       	mov	r11,r9
80009502:	f0 16 00 09 	mcall	r6[36]
80009506:	18 99       	mov	r9,r12
80009508:	ea c8 ff f4 	sub	r8,r5,-12
8000950c:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009510:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009514:	10 99       	mov	r9,r8
80009516:	ee 19 80 00 	eorh	r9,0x8000
8000951a:	ef 49 ff 58 	st.w	r7[-168],r9
8000951e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009522:	ef 48 ff 5c 	st.w	r7[-164],r8
80009526:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000952a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000952e:	12 98       	mov	r8,r9
80009530:	a3 78       	lsl	r8,0x3
80009532:	12 08       	add	r8,r9
80009534:	a3 78       	lsl	r8,0x3
80009536:	f4 08 00 08 	add	r8,r10,r8
8000953a:	2e 88       	sub	r8,-24
8000953c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009540:	ee ea ff 58 	ld.d	r10,r7[-168]
80009544:	f0 16 00 02 	mcall	r6[8]
80009548:	14 98       	mov	r8,r10
8000954a:	16 99       	mov	r9,r11
8000954c:	10 9a       	mov	r10,r8
8000954e:	12 9b       	mov	r11,r9
80009550:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009554:	ec fc 00 1c 	ld.w	r12,r6[28]
80009558:	12 98       	mov	r8,r9
8000955a:	a3 78       	lsl	r8,0x3
8000955c:	12 08       	add	r8,r9
8000955e:	a3 78       	lsl	r8,0x3
80009560:	f8 08 00 08 	add	r8,r12,r8
80009564:	f0 e8 00 00 	ld.d	r8,r8[0]
80009568:	f0 16 00 05 	mcall	r6[20]
8000956c:	14 98       	mov	r8,r10
8000956e:	16 99       	mov	r9,r11
80009570:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009574:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009578:	10 99       	mov	r9,r8
8000957a:	ee 19 80 00 	eorh	r9,0x8000
8000957e:	ef 49 ff 60 	st.w	r7[-160],r9
80009582:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009586:	ef 48 ff 64 	st.w	r7[-156],r8
8000958a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000958e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009592:	12 98       	mov	r8,r9
80009594:	a3 78       	lsl	r8,0x3
80009596:	12 08       	add	r8,r9
80009598:	a3 78       	lsl	r8,0x3
8000959a:	f4 08 00 08 	add	r8,r10,r8
8000959e:	2e 08       	sub	r8,-32
800095a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800095a4:	ee ea ff 60 	ld.d	r10,r7[-160]
800095a8:	f0 16 00 02 	mcall	r6[8]
800095ac:	14 98       	mov	r8,r10
800095ae:	16 99       	mov	r9,r11
800095b0:	10 9a       	mov	r10,r8
800095b2:	12 9b       	mov	r11,r9
800095b4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095b8:	ec fc 00 1c 	ld.w	r12,r6[28]
800095bc:	12 98       	mov	r8,r9
800095be:	a3 78       	lsl	r8,0x3
800095c0:	12 08       	add	r8,r9
800095c2:	2f f8       	sub	r8,-1
800095c4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800095c8:	f0 16 00 05 	mcall	r6[20]
800095cc:	14 98       	mov	r8,r10
800095ce:	16 99       	mov	r9,r11
800095d0:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800095d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800095d8:	10 99       	mov	r9,r8
800095da:	ee 19 80 00 	eorh	r9,0x8000
800095de:	ef 49 ff 68 	st.w	r7[-152],r9
800095e2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800095e6:	ef 48 ff 6c 	st.w	r7[-148],r8
800095ea:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095ee:	ec fa 00 1c 	ld.w	r10,r6[28]
800095f2:	12 98       	mov	r8,r9
800095f4:	a3 78       	lsl	r8,0x3
800095f6:	12 08       	add	r8,r9
800095f8:	a3 78       	lsl	r8,0x3
800095fa:	f4 08 00 08 	add	r8,r10,r8
800095fe:	2d 88       	sub	r8,-40
80009600:	f0 e8 00 00 	ld.d	r8,r8[0]
80009604:	ee ea ff 68 	ld.d	r10,r7[-152]
80009608:	f0 16 00 02 	mcall	r6[8]
8000960c:	14 98       	mov	r8,r10
8000960e:	16 99       	mov	r9,r11
80009610:	10 9a       	mov	r10,r8
80009612:	12 9b       	mov	r11,r9
80009614:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009618:	ec fc 00 1c 	ld.w	r12,r6[28]
8000961c:	12 98       	mov	r8,r9
8000961e:	a3 78       	lsl	r8,0x3
80009620:	12 08       	add	r8,r9
80009622:	a3 78       	lsl	r8,0x3
80009624:	f8 08 00 08 	add	r8,r12,r8
80009628:	2f 08       	sub	r8,-16
8000962a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000962e:	f0 16 00 05 	mcall	r6[20]
80009632:	14 98       	mov	r8,r10
80009634:	16 99       	mov	r9,r11
80009636:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
8000963a:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000963e:	30 0a       	mov	r10,0
80009640:	fc 1b 3f f0 	movh	r11,0x3ff0
80009644:	f0 16 00 12 	mcall	r6[72]
80009648:	14 98       	mov	r8,r10
8000964a:	16 99       	mov	r9,r11
8000964c:	10 9a       	mov	r10,r8
8000964e:	12 9b       	mov	r11,r9
80009650:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009654:	ec fc 00 1c 	ld.w	r12,r6[28]
80009658:	12 98       	mov	r8,r9
8000965a:	a3 78       	lsl	r8,0x3
8000965c:	12 08       	add	r8,r9
8000965e:	a3 78       	lsl	r8,0x3
80009660:	f8 08 00 08 	add	r8,r12,r8
80009664:	2e 88       	sub	r8,-24
80009666:	f0 e8 00 00 	ld.d	r8,r8[0]
8000966a:	f0 16 00 02 	mcall	r6[8]
8000966e:	14 98       	mov	r8,r10
80009670:	16 99       	mov	r9,r11
80009672:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
80009676:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000967a:	30 0a       	mov	r10,0
8000967c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009680:	f0 16 00 12 	mcall	r6[72]
80009684:	14 98       	mov	r8,r10
80009686:	16 99       	mov	r9,r11
80009688:	10 9a       	mov	r10,r8
8000968a:	12 9b       	mov	r11,r9
8000968c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009690:	ec fc 00 1c 	ld.w	r12,r6[28]
80009694:	12 98       	mov	r8,r9
80009696:	a3 78       	lsl	r8,0x3
80009698:	12 08       	add	r8,r9
8000969a:	a3 78       	lsl	r8,0x3
8000969c:	f8 08 00 08 	add	r8,r12,r8
800096a0:	2e 08       	sub	r8,-32
800096a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800096a6:	f0 16 00 02 	mcall	r6[8]
800096aa:	14 98       	mov	r8,r10
800096ac:	16 99       	mov	r9,r11
800096ae:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
800096b2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800096b6:	30 0a       	mov	r10,0
800096b8:	fc 1b 3f f0 	movh	r11,0x3ff0
800096bc:	f0 16 00 12 	mcall	r6[72]
800096c0:	14 98       	mov	r8,r10
800096c2:	16 99       	mov	r9,r11
800096c4:	10 9a       	mov	r10,r8
800096c6:	12 9b       	mov	r11,r9
800096c8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096cc:	ec fc 00 1c 	ld.w	r12,r6[28]
800096d0:	12 98       	mov	r8,r9
800096d2:	a3 78       	lsl	r8,0x3
800096d4:	12 08       	add	r8,r9
800096d6:	a3 78       	lsl	r8,0x3
800096d8:	f8 08 00 08 	add	r8,r12,r8
800096dc:	2d 88       	sub	r8,-40
800096de:	f0 e8 00 00 	ld.d	r8,r8[0]
800096e2:	f0 16 00 02 	mcall	r6[8]
800096e6:	14 98       	mov	r8,r10
800096e8:	16 99       	mov	r9,r11
800096ea:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
800096ee:	ee f8 ff b0 	ld.w	r8,r7[-80]
800096f2:	10 99       	mov	r9,r8
800096f4:	ee 19 80 00 	eorh	r9,0x8000
800096f8:	ef 49 ff 70 	st.w	r7[-144],r9
800096fc:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009700:	ef 48 ff 74 	st.w	r7[-140],r8
80009704:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009708:	ec fa 00 1c 	ld.w	r10,r6[28]
8000970c:	12 98       	mov	r8,r9
8000970e:	a3 78       	lsl	r8,0x3
80009710:	12 08       	add	r8,r9
80009712:	a3 78       	lsl	r8,0x3
80009714:	f4 08 00 08 	add	r8,r10,r8
80009718:	2e 88       	sub	r8,-24
8000971a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000971e:	ee ea ff 70 	ld.d	r10,r7[-144]
80009722:	f0 16 00 02 	mcall	r6[8]
80009726:	14 98       	mov	r8,r10
80009728:	16 99       	mov	r9,r11
8000972a:	10 9a       	mov	r10,r8
8000972c:	12 9b       	mov	r11,r9
8000972e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009732:	ec fc 00 1c 	ld.w	r12,r6[28]
80009736:	12 98       	mov	r8,r9
80009738:	a3 78       	lsl	r8,0x3
8000973a:	12 08       	add	r8,r9
8000973c:	a3 78       	lsl	r8,0x3
8000973e:	f8 08 00 08 	add	r8,r12,r8
80009742:	2d 08       	sub	r8,-48
80009744:	f0 e8 00 00 	ld.d	r8,r8[0]
80009748:	f0 16 00 05 	mcall	r6[20]
8000974c:	14 98       	mov	r8,r10
8000974e:	16 99       	mov	r9,r11
80009750:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80009754:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009758:	10 99       	mov	r9,r8
8000975a:	ee 19 80 00 	eorh	r9,0x8000
8000975e:	ef 49 ff 78 	st.w	r7[-136],r9
80009762:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009766:	ef 48 ff 7c 	st.w	r7[-132],r8
8000976a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000976e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009772:	12 98       	mov	r8,r9
80009774:	a3 78       	lsl	r8,0x3
80009776:	12 08       	add	r8,r9
80009778:	a3 78       	lsl	r8,0x3
8000977a:	f4 08 00 08 	add	r8,r10,r8
8000977e:	2e 08       	sub	r8,-32
80009780:	f0 e8 00 00 	ld.d	r8,r8[0]
80009784:	ee ea ff 78 	ld.d	r10,r7[-136]
80009788:	f0 16 00 02 	mcall	r6[8]
8000978c:	14 98       	mov	r8,r10
8000978e:	16 99       	mov	r9,r11
80009790:	10 9a       	mov	r10,r8
80009792:	12 9b       	mov	r11,r9
80009794:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009798:	ec fc 00 1c 	ld.w	r12,r6[28]
8000979c:	12 98       	mov	r8,r9
8000979e:	a3 78       	lsl	r8,0x3
800097a0:	12 08       	add	r8,r9
800097a2:	a3 78       	lsl	r8,0x3
800097a4:	f8 08 00 08 	add	r8,r12,r8
800097a8:	2c 88       	sub	r8,-56
800097aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800097ae:	f0 16 00 05 	mcall	r6[20]
800097b2:	14 98       	mov	r8,r10
800097b4:	16 99       	mov	r9,r11
800097b6:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
800097ba:	ee f8 ff b0 	ld.w	r8,r7[-80]
800097be:	10 99       	mov	r9,r8
800097c0:	ee 19 80 00 	eorh	r9,0x8000
800097c4:	ef 49 ff 80 	st.w	r7[-128],r9
800097c8:	ee f8 ff b4 	ld.w	r8,r7[-76]
800097cc:	ef 48 ff 84 	st.w	r7[-124],r8
800097d0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097d4:	ec fa 00 1c 	ld.w	r10,r6[28]
800097d8:	12 98       	mov	r8,r9
800097da:	a3 78       	lsl	r8,0x3
800097dc:	12 08       	add	r8,r9
800097de:	a3 78       	lsl	r8,0x3
800097e0:	f4 08 00 08 	add	r8,r10,r8
800097e4:	2d 88       	sub	r8,-40
800097e6:	f0 e8 00 00 	ld.d	r8,r8[0]
800097ea:	ee ea ff 80 	ld.d	r10,r7[-128]
800097ee:	f0 16 00 02 	mcall	r6[8]
800097f2:	14 98       	mov	r8,r10
800097f4:	16 99       	mov	r9,r11
800097f6:	10 9a       	mov	r10,r8
800097f8:	12 9b       	mov	r11,r9
800097fa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097fe:	ec fc 00 1c 	ld.w	r12,r6[28]
80009802:	12 98       	mov	r8,r9
80009804:	a3 78       	lsl	r8,0x3
80009806:	12 08       	add	r8,r9
80009808:	a3 78       	lsl	r8,0x3
8000980a:	f8 08 00 08 	add	r8,r12,r8
8000980e:	2c 08       	sub	r8,-64
80009810:	f0 e8 00 00 	ld.d	r8,r8[0]
80009814:	f0 16 00 05 	mcall	r6[20]
80009818:	14 98       	mov	r8,r10
8000981a:	16 99       	mov	r9,r11
8000981c:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009820:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009824:	ec fa 00 1c 	ld.w	r10,r6[28]
80009828:	12 98       	mov	r8,r9
8000982a:	a3 78       	lsl	r8,0x3
8000982c:	12 08       	add	r8,r9
8000982e:	a3 78       	lsl	r8,0x3
80009830:	10 0a       	add	r10,r8
80009832:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009836:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000983a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000983e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009842:	12 98       	mov	r8,r9
80009844:	a3 78       	lsl	r8,0x3
80009846:	12 08       	add	r8,r9
80009848:	f0 cb ff ff 	sub	r11,r8,-1
8000984c:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009850:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009854:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009858:	ec fa 00 1c 	ld.w	r10,r6[28]
8000985c:	12 98       	mov	r8,r9
8000985e:	a3 78       	lsl	r8,0x3
80009860:	12 08       	add	r8,r9
80009862:	a3 78       	lsl	r8,0x3
80009864:	f4 08 00 08 	add	r8,r10,r8
80009868:	f0 ca ff f0 	sub	r10,r8,-16
8000986c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009870:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009874:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009878:	ec fa 00 1c 	ld.w	r10,r6[28]
8000987c:	12 98       	mov	r8,r9
8000987e:	a3 78       	lsl	r8,0x3
80009880:	12 08       	add	r8,r9
80009882:	a3 78       	lsl	r8,0x3
80009884:	f4 08 00 08 	add	r8,r10,r8
80009888:	f0 ca ff e8 	sub	r10,r8,-24
8000988c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009890:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009894:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009898:	ec fa 00 1c 	ld.w	r10,r6[28]
8000989c:	12 98       	mov	r8,r9
8000989e:	a3 78       	lsl	r8,0x3
800098a0:	12 08       	add	r8,r9
800098a2:	a3 78       	lsl	r8,0x3
800098a4:	f4 08 00 08 	add	r8,r10,r8
800098a8:	f0 ca ff e0 	sub	r10,r8,-32
800098ac:	ee e8 ff d8 	ld.d	r8,r7[-40]
800098b0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
800098b4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098b8:	ec fa 00 1c 	ld.w	r10,r6[28]
800098bc:	12 98       	mov	r8,r9
800098be:	a3 78       	lsl	r8,0x3
800098c0:	12 08       	add	r8,r9
800098c2:	a3 78       	lsl	r8,0x3
800098c4:	f4 08 00 08 	add	r8,r10,r8
800098c8:	f0 ca ff d8 	sub	r10,r8,-40
800098cc:	ee e8 ff e0 	ld.d	r8,r7[-32]
800098d0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
800098d4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800098dc:	12 98       	mov	r8,r9
800098de:	a3 78       	lsl	r8,0x3
800098e0:	12 08       	add	r8,r9
800098e2:	a3 78       	lsl	r8,0x3
800098e4:	f4 08 00 08 	add	r8,r10,r8
800098e8:	f0 ca ff d0 	sub	r10,r8,-48
800098ec:	ee e8 ff e8 	ld.d	r8,r7[-24]
800098f0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
800098f4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098f8:	ec fa 00 1c 	ld.w	r10,r6[28]
800098fc:	12 98       	mov	r8,r9
800098fe:	a3 78       	lsl	r8,0x3
80009900:	12 08       	add	r8,r9
80009902:	a3 78       	lsl	r8,0x3
80009904:	f4 08 00 08 	add	r8,r10,r8
80009908:	f0 ca ff c8 	sub	r10,r8,-56
8000990c:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009910:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009914:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009918:	ec fa 00 1c 	ld.w	r10,r6[28]
8000991c:	12 98       	mov	r8,r9
8000991e:	a3 78       	lsl	r8,0x3
80009920:	12 08       	add	r8,r9
80009922:	a3 78       	lsl	r8,0x3
80009924:	f4 08 00 08 	add	r8,r10,r8
80009928:	f0 ca ff c0 	sub	r10,r8,-64
8000992c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009930:	f4 e9 00 00 	st.d	r10[0],r8
}
80009934:	2c ad       	sub	sp,-216
80009936:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000993a:	00 00       	add	r0,r0
8000993c:	80 00       	ld.sh	r0,r0[0x0]
8000993e:	8b aa       	st.w	r5[0x28],r10

80009940 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80009940:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009944:	1a 97       	mov	r7,sp
80009946:	21 bd       	sub	sp,108
80009948:	fe f6 05 80 	ld.w	r6,pc[1408]
8000994c:	1e 26       	rsub	r6,pc
8000994e:	ef 4c ff bc 	st.w	r7[-68],r12
80009952:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80009956:	ec f8 00 00 	ld.w	r8,r6[0]
8000995a:	70 0a       	ld.w	r10,r8[0x0]
8000995c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009960:	12 98       	mov	r8,r9
80009962:	a1 78       	lsl	r8,0x1
80009964:	12 08       	add	r8,r9
80009966:	a3 78       	lsl	r8,0x3
80009968:	f4 08 00 08 	add	r8,r10,r8
8000996c:	f0 c8 f5 e4 	sub	r8,r8,-2588
80009970:	f0 e8 00 00 	ld.d	r8,r8[0]
80009974:	ee ea ff b4 	ld.d	r10,r7[-76]
80009978:	f0 16 00 12 	mcall	r6[72]
8000997c:	14 98       	mov	r8,r10
8000997e:	16 99       	mov	r9,r11
80009980:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
80009984:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009988:	ec fa 00 18 	ld.w	r10,r6[24]
8000998c:	12 98       	mov	r8,r9
8000998e:	a3 78       	lsl	r8,0x3
80009990:	12 08       	add	r8,r9
80009992:	a3 78       	lsl	r8,0x3
80009994:	f4 08 00 08 	add	r8,r10,r8
80009998:	f0 ea 00 00 	ld.d	r10,r8[0]
8000999c:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099a0:	ec f8 01 54 	ld.w	r8,r6[340]
800099a4:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800099a8:	f0 16 00 05 	mcall	r6[20]
800099ac:	14 98       	mov	r8,r10
800099ae:	16 99       	mov	r9,r11
800099b0:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
800099b4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099b8:	ec fa 00 18 	ld.w	r10,r6[24]
800099bc:	12 98       	mov	r8,r9
800099be:	a3 78       	lsl	r8,0x3
800099c0:	12 08       	add	r8,r9
800099c2:	a3 78       	lsl	r8,0x3
800099c4:	f4 08 00 08 	add	r8,r10,r8
800099c8:	f0 ea 00 00 	ld.d	r10,r8[0]
800099cc:	ee e8 ff c8 	ld.d	r8,r7[-56]
800099d0:	f0 16 00 0c 	mcall	r6[48]
800099d4:	14 98       	mov	r8,r10
800099d6:	16 99       	mov	r9,r11
800099d8:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
800099dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099e0:	ec fa 00 18 	ld.w	r10,r6[24]
800099e4:	12 98       	mov	r8,r9
800099e6:	a3 78       	lsl	r8,0x3
800099e8:	12 08       	add	r8,r9
800099ea:	a3 78       	lsl	r8,0x3
800099ec:	f4 08 00 08 	add	r8,r10,r8
800099f0:	2e 88       	sub	r8,-24
800099f2:	f0 ea 00 00 	ld.d	r10,r8[0]
800099f6:	ee e8 ff c8 	ld.d	r8,r7[-56]
800099fa:	f0 16 00 0c 	mcall	r6[48]
800099fe:	14 98       	mov	r8,r10
80009a00:	16 99       	mov	r9,r11
80009a02:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
80009a06:	ec f8 00 00 	ld.w	r8,r6[0]
80009a0a:	70 08       	ld.w	r8,r8[0x0]
80009a0c:	ef 48 ff 94 	st.w	r7[-108],r8
80009a10:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009a14:	ec f8 00 00 	ld.w	r8,r6[0]
80009a18:	70 0a       	ld.w	r10,r8[0x0]
80009a1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a1e:	12 98       	mov	r8,r9
80009a20:	a1 78       	lsl	r8,0x1
80009a22:	12 08       	add	r8,r9
80009a24:	a3 78       	lsl	r8,0x3
80009a26:	f4 08 00 08 	add	r8,r10,r8
80009a2a:	f0 c8 f5 e4 	sub	r8,r8,-2588
80009a2e:	f0 e2 00 00 	ld.d	r2,r8[0]
80009a32:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009a36:	ee ea ff d0 	ld.d	r10,r7[-48]
80009a3a:	f0 16 00 02 	mcall	r6[8]
80009a3e:	14 98       	mov	r8,r10
80009a40:	16 99       	mov	r9,r11
80009a42:	04 9a       	mov	r10,r2
80009a44:	06 9b       	mov	r11,r3
80009a46:	f0 16 00 05 	mcall	r6[20]
80009a4a:	14 98       	mov	r8,r10
80009a4c:	16 99       	mov	r9,r11
80009a4e:	10 9a       	mov	r10,r8
80009a50:	12 9b       	mov	r11,r9
80009a52:	0a 98       	mov	r8,r5
80009a54:	a1 78       	lsl	r8,0x1
80009a56:	0a 08       	add	r8,r5
80009a58:	a3 78       	lsl	r8,0x3
80009a5a:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009a5e:	f2 08 00 08 	add	r8,r9,r8
80009a62:	f0 c8 f5 e4 	sub	r8,r8,-2588
80009a66:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009a6a:	ec f8 00 00 	ld.w	r8,r6[0]
80009a6e:	70 08       	ld.w	r8,r8[0x0]
80009a70:	ef 48 ff 98 	st.w	r7[-104],r8
80009a74:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009a78:	ec f8 00 00 	ld.w	r8,r6[0]
80009a7c:	70 0a       	ld.w	r10,r8[0x0]
80009a7e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a82:	12 98       	mov	r8,r9
80009a84:	a1 78       	lsl	r8,0x1
80009a86:	12 08       	add	r8,r9
80009a88:	2f f8       	sub	r8,-1
80009a8a:	a3 78       	lsl	r8,0x3
80009a8c:	f4 08 00 08 	add	r8,r10,r8
80009a90:	f0 e2 0a 1c 	ld.d	r2,r8[2588]
80009a94:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009a98:	ee ea ff d8 	ld.d	r10,r7[-40]
80009a9c:	f0 16 00 02 	mcall	r6[8]
80009aa0:	14 98       	mov	r8,r10
80009aa2:	16 99       	mov	r9,r11
80009aa4:	04 9a       	mov	r10,r2
80009aa6:	06 9b       	mov	r11,r3
80009aa8:	f0 16 00 05 	mcall	r6[20]
80009aac:	14 98       	mov	r8,r10
80009aae:	16 99       	mov	r9,r11
80009ab0:	10 9a       	mov	r10,r8
80009ab2:	12 9b       	mov	r11,r9
80009ab4:	0a 98       	mov	r8,r5
80009ab6:	a1 78       	lsl	r8,0x1
80009ab8:	0a 08       	add	r8,r5
80009aba:	2f f8       	sub	r8,-1
80009abc:	a3 78       	lsl	r8,0x3
80009abe:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009ac2:	f2 08 00 08 	add	r8,r9,r8
80009ac6:	f0 eb 0a 1c 	st.d	r8[2588],r10
	
	P11 = (1. - K1) * P[axis][0][0];
80009aca:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009ace:	30 0a       	mov	r10,0
80009ad0:	fc 1b 3f f0 	movh	r11,0x3ff0
80009ad4:	f0 16 00 12 	mcall	r6[72]
80009ad8:	14 98       	mov	r8,r10
80009ada:	16 99       	mov	r9,r11
80009adc:	10 9a       	mov	r10,r8
80009ade:	12 9b       	mov	r11,r9
80009ae0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ae4:	ec fc 00 18 	ld.w	r12,r6[24]
80009ae8:	12 98       	mov	r8,r9
80009aea:	a3 78       	lsl	r8,0x3
80009aec:	12 08       	add	r8,r9
80009aee:	a3 78       	lsl	r8,0x3
80009af0:	f8 08 00 08 	add	r8,r12,r8
80009af4:	f0 e8 00 00 	ld.d	r8,r8[0]
80009af8:	f0 16 00 02 	mcall	r6[8]
80009afc:	14 98       	mov	r8,r10
80009afe:	16 99       	mov	r9,r11
80009b00:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
80009b04:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009b08:	30 0a       	mov	r10,0
80009b0a:	fc 1b 3f f0 	movh	r11,0x3ff0
80009b0e:	f0 16 00 12 	mcall	r6[72]
80009b12:	14 98       	mov	r8,r10
80009b14:	16 99       	mov	r9,r11
80009b16:	10 9a       	mov	r10,r8
80009b18:	12 9b       	mov	r11,r9
80009b1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b1e:	ec fc 00 18 	ld.w	r12,r6[24]
80009b22:	12 98       	mov	r8,r9
80009b24:	a3 78       	lsl	r8,0x3
80009b26:	12 08       	add	r8,r9
80009b28:	2f f8       	sub	r8,-1
80009b2a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009b2e:	f0 16 00 02 	mcall	r6[8]
80009b32:	14 98       	mov	r8,r10
80009b34:	16 99       	mov	r9,r11
80009b36:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80009b3a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009b3e:	10 99       	mov	r9,r8
80009b40:	ee 19 80 00 	eorh	r9,0x8000
80009b44:	ef 49 ff 9c 	st.w	r7[-100],r9
80009b48:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009b4c:	ef 48 ff a0 	st.w	r7[-96],r8
80009b50:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b54:	ec fa 00 18 	ld.w	r10,r6[24]
80009b58:	12 98       	mov	r8,r9
80009b5a:	a3 78       	lsl	r8,0x3
80009b5c:	12 08       	add	r8,r9
80009b5e:	a3 78       	lsl	r8,0x3
80009b60:	f4 08 00 08 	add	r8,r10,r8
80009b64:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b68:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009b6c:	f0 16 00 02 	mcall	r6[8]
80009b70:	14 98       	mov	r8,r10
80009b72:	16 99       	mov	r9,r11
80009b74:	10 9a       	mov	r10,r8
80009b76:	12 9b       	mov	r11,r9
80009b78:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b7c:	ec fc 00 18 	ld.w	r12,r6[24]
80009b80:	12 98       	mov	r8,r9
80009b82:	a3 78       	lsl	r8,0x3
80009b84:	12 08       	add	r8,r9
80009b86:	a3 78       	lsl	r8,0x3
80009b88:	f8 08 00 08 	add	r8,r12,r8
80009b8c:	2e 88       	sub	r8,-24
80009b8e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b92:	f0 16 00 05 	mcall	r6[20]
80009b96:	14 98       	mov	r8,r10
80009b98:	16 99       	mov	r9,r11
80009b9a:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80009b9e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009ba2:	10 99       	mov	r9,r8
80009ba4:	ee 19 80 00 	eorh	r9,0x8000
80009ba8:	ef 49 ff a4 	st.w	r7[-92],r9
80009bac:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009bb0:	ef 48 ff a8 	st.w	r7[-88],r8
80009bb4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009bb8:	ec fa 00 18 	ld.w	r10,r6[24]
80009bbc:	12 98       	mov	r8,r9
80009bbe:	a3 78       	lsl	r8,0x3
80009bc0:	12 08       	add	r8,r9
80009bc2:	2f f8       	sub	r8,-1
80009bc4:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009bc8:	ee ea ff a4 	ld.d	r10,r7[-92]
80009bcc:	f0 16 00 02 	mcall	r6[8]
80009bd0:	14 98       	mov	r8,r10
80009bd2:	16 99       	mov	r9,r11
80009bd4:	10 9a       	mov	r10,r8
80009bd6:	12 9b       	mov	r11,r9
80009bd8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009bdc:	ec fc 00 18 	ld.w	r12,r6[24]
80009be0:	12 98       	mov	r8,r9
80009be2:	a3 78       	lsl	r8,0x3
80009be4:	12 08       	add	r8,r9
80009be6:	a3 78       	lsl	r8,0x3
80009be8:	f8 08 00 08 	add	r8,r12,r8
80009bec:	2e 08       	sub	r8,-32
80009bee:	f0 e8 00 00 	ld.d	r8,r8[0]
80009bf2:	f0 16 00 05 	mcall	r6[20]
80009bf6:	14 98       	mov	r8,r10
80009bf8:	16 99       	mov	r9,r11
80009bfa:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009bfe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c02:	ec fa 00 18 	ld.w	r10,r6[24]
80009c06:	12 98       	mov	r8,r9
80009c08:	a3 78       	lsl	r8,0x3
80009c0a:	12 08       	add	r8,r9
80009c0c:	a3 78       	lsl	r8,0x3
80009c0e:	10 0a       	add	r10,r8
80009c10:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009c14:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009c18:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c1c:	ec fa 00 18 	ld.w	r10,r6[24]
80009c20:	12 98       	mov	r8,r9
80009c22:	a3 78       	lsl	r8,0x3
80009c24:	12 08       	add	r8,r9
80009c26:	f0 cb ff ff 	sub	r11,r8,-1
80009c2a:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009c2e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
80009c32:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c36:	ec fa 00 18 	ld.w	r10,r6[24]
80009c3a:	12 98       	mov	r8,r9
80009c3c:	a3 78       	lsl	r8,0x3
80009c3e:	12 08       	add	r8,r9
80009c40:	a3 78       	lsl	r8,0x3
80009c42:	f4 08 00 08 	add	r8,r10,r8
80009c46:	f0 ca ff e8 	sub	r10,r8,-24
80009c4a:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009c4e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80009c52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c56:	ec fa 00 18 	ld.w	r10,r6[24]
80009c5a:	12 98       	mov	r8,r9
80009c5c:	a3 78       	lsl	r8,0x3
80009c5e:	12 08       	add	r8,r9
80009c60:	a3 78       	lsl	r8,0x3
80009c62:	f4 08 00 08 	add	r8,r10,r8
80009c66:	f0 ca ff e0 	sub	r10,r8,-32
80009c6a:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009c6e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
80009c72:	ec f8 00 00 	ld.w	r8,r6[0]
80009c76:	70 08       	ld.w	r8,r8[0x0]
80009c78:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c7c:	f2 c9 fc e9 	sub	r9,r9,-791
80009c80:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009c84:	10 9c       	mov	r12,r8
80009c86:	f0 16 00 03 	mcall	r6[12]
80009c8a:	14 98       	mov	r8,r10
80009c8c:	16 99       	mov	r9,r11
80009c8e:	ee ea ff b4 	ld.d	r10,r7[-76]
80009c92:	f0 16 00 12 	mcall	r6[72]
80009c96:	14 98       	mov	r8,r10
80009c98:	16 99       	mov	r9,r11
80009c9a:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
80009c9e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ca2:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ca6:	12 98       	mov	r8,r9
80009ca8:	a3 78       	lsl	r8,0x3
80009caa:	12 08       	add	r8,r9
80009cac:	a3 78       	lsl	r8,0x3
80009cae:	f4 08 00 08 	add	r8,r10,r8
80009cb2:	f0 ea 00 00 	ld.d	r10,r8[0]
80009cb6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cba:	ec f8 01 50 	ld.w	r8,r6[336]
80009cbe:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009cc2:	f0 16 00 05 	mcall	r6[20]
80009cc6:	14 98       	mov	r8,r10
80009cc8:	16 99       	mov	r9,r11
80009cca:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
80009cce:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cd2:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cd6:	12 98       	mov	r8,r9
80009cd8:	a3 78       	lsl	r8,0x3
80009cda:	12 08       	add	r8,r9
80009cdc:	a3 78       	lsl	r8,0x3
80009cde:	f4 08 00 08 	add	r8,r10,r8
80009ce2:	f0 ea 00 00 	ld.d	r10,r8[0]
80009ce6:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009cea:	f0 16 00 0c 	mcall	r6[48]
80009cee:	14 98       	mov	r8,r10
80009cf0:	16 99       	mov	r9,r11
80009cf2:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
80009cf6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cfa:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cfe:	12 98       	mov	r8,r9
80009d00:	a3 78       	lsl	r8,0x3
80009d02:	12 08       	add	r8,r9
80009d04:	a3 78       	lsl	r8,0x3
80009d06:	f4 08 00 08 	add	r8,r10,r8
80009d0a:	2e 88       	sub	r8,-24
80009d0c:	f0 ea 00 00 	ld.d	r10,r8[0]
80009d10:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009d14:	f0 16 00 0c 	mcall	r6[48]
80009d18:	14 98       	mov	r8,r10
80009d1a:	16 99       	mov	r9,r11
80009d1c:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
80009d20:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009d24:	30 0a       	mov	r10,0
80009d26:	fc 1b 3f f0 	movh	r11,0x3ff0
80009d2a:	f0 16 00 12 	mcall	r6[72]
80009d2e:	14 98       	mov	r8,r10
80009d30:	16 99       	mov	r9,r11
80009d32:	10 9a       	mov	r10,r8
80009d34:	12 9b       	mov	r11,r9
80009d36:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d3a:	ec fc 00 1c 	ld.w	r12,r6[28]
80009d3e:	12 98       	mov	r8,r9
80009d40:	a3 78       	lsl	r8,0x3
80009d42:	12 08       	add	r8,r9
80009d44:	a3 78       	lsl	r8,0x3
80009d46:	f8 08 00 08 	add	r8,r12,r8
80009d4a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d4e:	f0 16 00 02 	mcall	r6[8]
80009d52:	14 98       	mov	r8,r10
80009d54:	16 99       	mov	r9,r11
80009d56:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
80009d5a:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009d5e:	30 0a       	mov	r10,0
80009d60:	fc 1b 3f f0 	movh	r11,0x3ff0
80009d64:	f0 16 00 12 	mcall	r6[72]
80009d68:	14 98       	mov	r8,r10
80009d6a:	16 99       	mov	r9,r11
80009d6c:	10 9a       	mov	r10,r8
80009d6e:	12 9b       	mov	r11,r9
80009d70:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d74:	ec fc 00 1c 	ld.w	r12,r6[28]
80009d78:	12 98       	mov	r8,r9
80009d7a:	a3 78       	lsl	r8,0x3
80009d7c:	12 08       	add	r8,r9
80009d7e:	2f f8       	sub	r8,-1
80009d80:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009d84:	f0 16 00 02 	mcall	r6[8]
80009d88:	14 98       	mov	r8,r10
80009d8a:	16 99       	mov	r9,r11
80009d8c:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80009d90:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009d94:	10 99       	mov	r9,r8
80009d96:	ee 19 80 00 	eorh	r9,0x8000
80009d9a:	ef 49 ff ac 	st.w	r7[-84],r9
80009d9e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009da2:	ef 48 ff b0 	st.w	r7[-80],r8
80009da6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009daa:	ec fa 00 1c 	ld.w	r10,r6[28]
80009dae:	12 98       	mov	r8,r9
80009db0:	a3 78       	lsl	r8,0x3
80009db2:	12 08       	add	r8,r9
80009db4:	a3 78       	lsl	r8,0x3
80009db6:	f4 08 00 08 	add	r8,r10,r8
80009dba:	f0 e8 00 00 	ld.d	r8,r8[0]
80009dbe:	ee ea ff ac 	ld.d	r10,r7[-84]
80009dc2:	f0 16 00 02 	mcall	r6[8]
80009dc6:	14 98       	mov	r8,r10
80009dc8:	16 99       	mov	r9,r11
80009dca:	10 9a       	mov	r10,r8
80009dcc:	12 9b       	mov	r11,r9
80009dce:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dd2:	ec fc 00 1c 	ld.w	r12,r6[28]
80009dd6:	12 98       	mov	r8,r9
80009dd8:	a3 78       	lsl	r8,0x3
80009dda:	12 08       	add	r8,r9
80009ddc:	a3 78       	lsl	r8,0x3
80009dde:	f8 08 00 08 	add	r8,r12,r8
80009de2:	2e 88       	sub	r8,-24
80009de4:	f0 e8 00 00 	ld.d	r8,r8[0]
80009de8:	f0 16 00 05 	mcall	r6[20]
80009dec:	14 98       	mov	r8,r10
80009dee:	16 99       	mov	r9,r11
80009df0:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80009df4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009df8:	10 91       	mov	r1,r8
80009dfa:	ee 11 80 00 	eorh	r1,0x8000
80009dfe:	ee f0 ff dc 	ld.w	r0,r7[-36]
80009e02:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e06:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e0a:	12 98       	mov	r8,r9
80009e0c:	a3 78       	lsl	r8,0x3
80009e0e:	12 08       	add	r8,r9
80009e10:	2f f8       	sub	r8,-1
80009e12:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009e16:	00 9a       	mov	r10,r0
80009e18:	02 9b       	mov	r11,r1
80009e1a:	f0 16 00 02 	mcall	r6[8]
80009e1e:	14 98       	mov	r8,r10
80009e20:	16 99       	mov	r9,r11
80009e22:	10 9a       	mov	r10,r8
80009e24:	12 9b       	mov	r11,r9
80009e26:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e2a:	ec fc 00 1c 	ld.w	r12,r6[28]
80009e2e:	12 98       	mov	r8,r9
80009e30:	a3 78       	lsl	r8,0x3
80009e32:	12 08       	add	r8,r9
80009e34:	a3 78       	lsl	r8,0x3
80009e36:	f8 08 00 08 	add	r8,r12,r8
80009e3a:	2e 08       	sub	r8,-32
80009e3c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009e40:	f0 16 00 05 	mcall	r6[20]
80009e44:	14 98       	mov	r8,r10
80009e46:	16 99       	mov	r9,r11
80009e48:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009e4c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e50:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e54:	12 98       	mov	r8,r9
80009e56:	a3 78       	lsl	r8,0x3
80009e58:	12 08       	add	r8,r9
80009e5a:	a3 78       	lsl	r8,0x3
80009e5c:	10 0a       	add	r10,r8
80009e5e:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009e62:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009e66:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e6a:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e6e:	12 98       	mov	r8,r9
80009e70:	a3 78       	lsl	r8,0x3
80009e72:	12 08       	add	r8,r9
80009e74:	f0 cb ff ff 	sub	r11,r8,-1
80009e78:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009e7c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
80009e80:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e84:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e88:	12 98       	mov	r8,r9
80009e8a:	a3 78       	lsl	r8,0x3
80009e8c:	12 08       	add	r8,r9
80009e8e:	a3 78       	lsl	r8,0x3
80009e90:	f4 08 00 08 	add	r8,r10,r8
80009e94:	f0 ca ff e8 	sub	r10,r8,-24
80009e98:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009e9c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009ea0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ea4:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ea8:	12 98       	mov	r8,r9
80009eaa:	a3 78       	lsl	r8,0x3
80009eac:	12 08       	add	r8,r9
80009eae:	a3 78       	lsl	r8,0x3
80009eb0:	f4 08 00 08 	add	r8,r10,r8
80009eb4:	f0 ca ff e0 	sub	r10,r8,-32
80009eb8:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009ebc:	f4 e9 00 00 	st.d	r10[0],r8
}
80009ec0:	2e 5d       	sub	sp,-108
80009ec2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80009ec6:	00 00       	add	r0,r0
80009ec8:	80 00       	ld.sh	r0,r0[0x0]
80009eca:	97 d0       	st.w	r11[0x34],r0

80009ecc <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
80009ecc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009ed0:	1a 97       	mov	r7,sp
80009ed2:	21 ad       	sub	sp,104
80009ed4:	fe f6 05 88 	ld.w	r6,pc[1416]
80009ed8:	1e 26       	rsub	r6,pc
80009eda:	ef 4c ff bc 	st.w	r7[-68],r12
80009ede:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
80009ee2:	ee fc ff b8 	ld.w	r12,r7[-72]
80009ee6:	f0 16 00 03 	mcall	r6[12]
80009eea:	ec f8 00 00 	ld.w	r8,r6[0]
80009eee:	70 0c       	ld.w	r12,r8[0x0]
80009ef0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ef4:	12 98       	mov	r8,r9
80009ef6:	a1 78       	lsl	r8,0x1
80009ef8:	12 08       	add	r8,r9
80009efa:	2f f8       	sub	r8,-1
80009efc:	a3 78       	lsl	r8,0x3
80009efe:	f8 08 00 08 	add	r8,r12,r8
80009f02:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
80009f06:	f0 16 00 12 	mcall	r6[72]
80009f0a:	14 98       	mov	r8,r10
80009f0c:	16 99       	mov	r9,r11
80009f0e:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
80009f12:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f16:	ec fa 00 18 	ld.w	r10,r6[24]
80009f1a:	12 98       	mov	r8,r9
80009f1c:	a3 78       	lsl	r8,0x3
80009f1e:	12 08       	add	r8,r9
80009f20:	a3 78       	lsl	r8,0x3
80009f22:	f4 08 00 08 	add	r8,r10,r8
80009f26:	2e 08       	sub	r8,-32
80009f28:	f0 ea 00 00 	ld.d	r10,r8[0]
80009f2c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f30:	ec f8 01 54 	ld.w	r8,r6[340]
80009f34:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009f38:	f0 16 00 05 	mcall	r6[20]
80009f3c:	14 98       	mov	r8,r10
80009f3e:	16 99       	mov	r9,r11
80009f40:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
80009f44:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f48:	ec fa 00 18 	ld.w	r10,r6[24]
80009f4c:	12 98       	mov	r8,r9
80009f4e:	a3 78       	lsl	r8,0x3
80009f50:	12 08       	add	r8,r9
80009f52:	2f f8       	sub	r8,-1
80009f54:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009f58:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009f5c:	f0 16 00 0c 	mcall	r6[48]
80009f60:	14 98       	mov	r8,r10
80009f62:	16 99       	mov	r9,r11
80009f64:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
80009f68:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f6c:	ec fa 00 18 	ld.w	r10,r6[24]
80009f70:	12 98       	mov	r8,r9
80009f72:	a3 78       	lsl	r8,0x3
80009f74:	12 08       	add	r8,r9
80009f76:	a3 78       	lsl	r8,0x3
80009f78:	f4 08 00 08 	add	r8,r10,r8
80009f7c:	2e 08       	sub	r8,-32
80009f7e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009f82:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009f86:	f0 16 00 0c 	mcall	r6[48]
80009f8a:	14 98       	mov	r8,r10
80009f8c:	16 99       	mov	r9,r11
80009f8e:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
80009f92:	ec f8 00 00 	ld.w	r8,r6[0]
80009f96:	70 08       	ld.w	r8,r8[0x0]
80009f98:	ef 48 ff 98 	st.w	r7[-104],r8
80009f9c:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009fa0:	ec f8 00 00 	ld.w	r8,r6[0]
80009fa4:	70 0a       	ld.w	r10,r8[0x0]
80009fa6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009faa:	12 98       	mov	r8,r9
80009fac:	a1 78       	lsl	r8,0x1
80009fae:	12 08       	add	r8,r9
80009fb0:	a3 78       	lsl	r8,0x3
80009fb2:	f4 08 00 08 	add	r8,r10,r8
80009fb6:	f0 c8 f5 e4 	sub	r8,r8,-2588
80009fba:	f0 e2 00 00 	ld.d	r2,r8[0]
80009fbe:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009fc2:	ee ea ff d0 	ld.d	r10,r7[-48]
80009fc6:	f0 16 00 02 	mcall	r6[8]
80009fca:	14 98       	mov	r8,r10
80009fcc:	16 99       	mov	r9,r11
80009fce:	04 9a       	mov	r10,r2
80009fd0:	06 9b       	mov	r11,r3
80009fd2:	f0 16 00 05 	mcall	r6[20]
80009fd6:	14 98       	mov	r8,r10
80009fd8:	16 99       	mov	r9,r11
80009fda:	10 9a       	mov	r10,r8
80009fdc:	12 9b       	mov	r11,r9
80009fde:	0a 98       	mov	r8,r5
80009fe0:	a1 78       	lsl	r8,0x1
80009fe2:	0a 08       	add	r8,r5
80009fe4:	a3 78       	lsl	r8,0x3
80009fe6:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009fea:	f2 08 00 08 	add	r8,r9,r8
80009fee:	f0 c8 f5 e4 	sub	r8,r8,-2588
80009ff2:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
80009ff6:	ec f8 00 00 	ld.w	r8,r6[0]
80009ffa:	70 08       	ld.w	r8,r8[0x0]
80009ffc:	ef 48 ff 9c 	st.w	r7[-100],r8
8000a000:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a004:	ec f8 00 00 	ld.w	r8,r6[0]
8000a008:	70 0a       	ld.w	r10,r8[0x0]
8000a00a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a00e:	12 98       	mov	r8,r9
8000a010:	a1 78       	lsl	r8,0x1
8000a012:	12 08       	add	r8,r9
8000a014:	2f f8       	sub	r8,-1
8000a016:	a3 78       	lsl	r8,0x3
8000a018:	f4 08 00 08 	add	r8,r10,r8
8000a01c:	f0 e2 0a 1c 	ld.d	r2,r8[2588]
8000a020:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a024:	ee ea ff d8 	ld.d	r10,r7[-40]
8000a028:	f0 16 00 02 	mcall	r6[8]
8000a02c:	14 98       	mov	r8,r10
8000a02e:	16 99       	mov	r9,r11
8000a030:	04 9a       	mov	r10,r2
8000a032:	06 9b       	mov	r11,r3
8000a034:	f0 16 00 05 	mcall	r6[20]
8000a038:	14 98       	mov	r8,r10
8000a03a:	16 99       	mov	r9,r11
8000a03c:	10 9a       	mov	r10,r8
8000a03e:	12 9b       	mov	r11,r9
8000a040:	0a 98       	mov	r8,r5
8000a042:	a1 78       	lsl	r8,0x1
8000a044:	0a 08       	add	r8,r5
8000a046:	2f f8       	sub	r8,-1
8000a048:	a3 78       	lsl	r8,0x3
8000a04a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a04e:	f2 08 00 08 	add	r8,r9,r8
8000a052:	f0 eb 0a 1c 	st.d	r8[2588],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000a056:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a05a:	10 99       	mov	r9,r8
8000a05c:	ee 19 80 00 	eorh	r9,0x8000
8000a060:	ef 49 ff a0 	st.w	r7[-96],r9
8000a064:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a068:	ef 48 ff a4 	st.w	r7[-92],r8
8000a06c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a070:	ec fa 00 18 	ld.w	r10,r6[24]
8000a074:	12 98       	mov	r8,r9
8000a076:	a3 78       	lsl	r8,0x3
8000a078:	12 08       	add	r8,r9
8000a07a:	a3 78       	lsl	r8,0x3
8000a07c:	f4 08 00 08 	add	r8,r10,r8
8000a080:	2e 88       	sub	r8,-24
8000a082:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a086:	ee ea ff a0 	ld.d	r10,r7[-96]
8000a08a:	f0 16 00 02 	mcall	r6[8]
8000a08e:	14 98       	mov	r8,r10
8000a090:	16 99       	mov	r9,r11
8000a092:	10 9a       	mov	r10,r8
8000a094:	12 9b       	mov	r11,r9
8000a096:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a09a:	ec fc 00 18 	ld.w	r12,r6[24]
8000a09e:	12 98       	mov	r8,r9
8000a0a0:	a3 78       	lsl	r8,0x3
8000a0a2:	12 08       	add	r8,r9
8000a0a4:	a3 78       	lsl	r8,0x3
8000a0a6:	f8 08 00 08 	add	r8,r12,r8
8000a0aa:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0ae:	f0 16 00 05 	mcall	r6[20]
8000a0b2:	14 98       	mov	r8,r10
8000a0b4:	16 99       	mov	r9,r11
8000a0b6:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000a0ba:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a0be:	10 99       	mov	r9,r8
8000a0c0:	ee 19 80 00 	eorh	r9,0x8000
8000a0c4:	ef 49 ff a8 	st.w	r7[-88],r9
8000a0c8:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a0cc:	ef 48 ff ac 	st.w	r7[-84],r8
8000a0d0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0d4:	ec fa 00 18 	ld.w	r10,r6[24]
8000a0d8:	12 98       	mov	r8,r9
8000a0da:	a3 78       	lsl	r8,0x3
8000a0dc:	12 08       	add	r8,r9
8000a0de:	a3 78       	lsl	r8,0x3
8000a0e0:	f4 08 00 08 	add	r8,r10,r8
8000a0e4:	2e 08       	sub	r8,-32
8000a0e6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0ea:	ee ea ff a8 	ld.d	r10,r7[-88]
8000a0ee:	f0 16 00 02 	mcall	r6[8]
8000a0f2:	14 98       	mov	r8,r10
8000a0f4:	16 99       	mov	r9,r11
8000a0f6:	10 9a       	mov	r10,r8
8000a0f8:	12 9b       	mov	r11,r9
8000a0fa:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0fe:	ec fc 00 18 	ld.w	r12,r6[24]
8000a102:	12 98       	mov	r8,r9
8000a104:	a3 78       	lsl	r8,0x3
8000a106:	12 08       	add	r8,r9
8000a108:	2f f8       	sub	r8,-1
8000a10a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a10e:	f0 16 00 05 	mcall	r6[20]
8000a112:	14 98       	mov	r8,r10
8000a114:	16 99       	mov	r9,r11
8000a116:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000a11a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a11e:	30 0a       	mov	r10,0
8000a120:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a124:	f0 16 00 12 	mcall	r6[72]
8000a128:	14 98       	mov	r8,r10
8000a12a:	16 99       	mov	r9,r11
8000a12c:	10 9a       	mov	r10,r8
8000a12e:	12 9b       	mov	r11,r9
8000a130:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a134:	ec fc 00 18 	ld.w	r12,r6[24]
8000a138:	12 98       	mov	r8,r9
8000a13a:	a3 78       	lsl	r8,0x3
8000a13c:	12 08       	add	r8,r9
8000a13e:	a3 78       	lsl	r8,0x3
8000a140:	f8 08 00 08 	add	r8,r12,r8
8000a144:	2e 88       	sub	r8,-24
8000a146:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a14a:	f0 16 00 02 	mcall	r6[8]
8000a14e:	14 98       	mov	r8,r10
8000a150:	16 99       	mov	r9,r11
8000a152:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000a156:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a15a:	30 0a       	mov	r10,0
8000a15c:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a160:	f0 16 00 12 	mcall	r6[72]
8000a164:	14 98       	mov	r8,r10
8000a166:	16 99       	mov	r9,r11
8000a168:	10 9a       	mov	r10,r8
8000a16a:	12 9b       	mov	r11,r9
8000a16c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a170:	ec fc 00 18 	ld.w	r12,r6[24]
8000a174:	12 98       	mov	r8,r9
8000a176:	a3 78       	lsl	r8,0x3
8000a178:	12 08       	add	r8,r9
8000a17a:	a3 78       	lsl	r8,0x3
8000a17c:	f8 08 00 08 	add	r8,r12,r8
8000a180:	2e 08       	sub	r8,-32
8000a182:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a186:	f0 16 00 02 	mcall	r6[8]
8000a18a:	14 98       	mov	r8,r10
8000a18c:	16 99       	mov	r9,r11
8000a18e:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000a192:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a196:	ec fa 00 18 	ld.w	r10,r6[24]
8000a19a:	12 98       	mov	r8,r9
8000a19c:	a3 78       	lsl	r8,0x3
8000a19e:	12 08       	add	r8,r9
8000a1a0:	a3 78       	lsl	r8,0x3
8000a1a2:	10 0a       	add	r10,r8
8000a1a4:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a1a8:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000a1ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1b0:	ec fa 00 18 	ld.w	r10,r6[24]
8000a1b4:	12 98       	mov	r8,r9
8000a1b6:	a3 78       	lsl	r8,0x3
8000a1b8:	12 08       	add	r8,r9
8000a1ba:	f0 cb ff ff 	sub	r11,r8,-1
8000a1be:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a1c2:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000a1c6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1ca:	ec fa 00 18 	ld.w	r10,r6[24]
8000a1ce:	12 98       	mov	r8,r9
8000a1d0:	a3 78       	lsl	r8,0x3
8000a1d2:	12 08       	add	r8,r9
8000a1d4:	a3 78       	lsl	r8,0x3
8000a1d6:	f4 08 00 08 	add	r8,r10,r8
8000a1da:	f0 ca ff e8 	sub	r10,r8,-24
8000a1de:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a1e2:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000a1e6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1ea:	ec fa 00 18 	ld.w	r10,r6[24]
8000a1ee:	12 98       	mov	r8,r9
8000a1f0:	a3 78       	lsl	r8,0x3
8000a1f2:	12 08       	add	r8,r9
8000a1f4:	a3 78       	lsl	r8,0x3
8000a1f6:	f4 08 00 08 	add	r8,r10,r8
8000a1fa:	f0 ca ff e0 	sub	r10,r8,-32
8000a1fe:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a202:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000a206:	ec f8 00 00 	ld.w	r8,r6[0]
8000a20a:	70 08       	ld.w	r8,r8[0x0]
8000a20c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a210:	f2 c9 fc f3 	sub	r9,r9,-781
8000a214:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a218:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a21c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a220:	10 9c       	mov	r12,r8
8000a222:	f0 16 00 03 	mcall	r6[12]
8000a226:	14 98       	mov	r8,r10
8000a228:	16 99       	mov	r9,r11
8000a22a:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000a22e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a232:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a236:	12 98       	mov	r8,r9
8000a238:	a3 78       	lsl	r8,0x3
8000a23a:	12 08       	add	r8,r9
8000a23c:	a3 78       	lsl	r8,0x3
8000a23e:	f4 08 00 08 	add	r8,r10,r8
8000a242:	2e 08       	sub	r8,-32
8000a244:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a248:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a24c:	ec f8 01 50 	ld.w	r8,r6[336]
8000a250:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a254:	f0 16 00 05 	mcall	r6[20]
8000a258:	14 98       	mov	r8,r10
8000a25a:	16 99       	mov	r9,r11
8000a25c:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000a260:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a264:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a268:	12 98       	mov	r8,r9
8000a26a:	a3 78       	lsl	r8,0x3
8000a26c:	12 08       	add	r8,r9
8000a26e:	2f f8       	sub	r8,-1
8000a270:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a274:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a278:	f0 16 00 0c 	mcall	r6[48]
8000a27c:	14 98       	mov	r8,r10
8000a27e:	16 99       	mov	r9,r11
8000a280:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000a284:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a288:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a28c:	12 98       	mov	r8,r9
8000a28e:	a3 78       	lsl	r8,0x3
8000a290:	12 08       	add	r8,r9
8000a292:	a3 78       	lsl	r8,0x3
8000a294:	f4 08 00 08 	add	r8,r10,r8
8000a298:	2e 08       	sub	r8,-32
8000a29a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a29e:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a2a2:	f0 16 00 0c 	mcall	r6[48]
8000a2a6:	14 98       	mov	r8,r10
8000a2a8:	16 99       	mov	r9,r11
8000a2aa:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000a2ae:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a2b2:	10 99       	mov	r9,r8
8000a2b4:	ee 19 80 00 	eorh	r9,0x8000
8000a2b8:	ef 49 ff b0 	st.w	r7[-80],r9
8000a2bc:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a2c0:	ef 48 ff b4 	st.w	r7[-76],r8
8000a2c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2c8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a2cc:	12 98       	mov	r8,r9
8000a2ce:	a3 78       	lsl	r8,0x3
8000a2d0:	12 08       	add	r8,r9
8000a2d2:	a3 78       	lsl	r8,0x3
8000a2d4:	f4 08 00 08 	add	r8,r10,r8
8000a2d8:	2e 88       	sub	r8,-24
8000a2da:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a2de:	ee ea ff b0 	ld.d	r10,r7[-80]
8000a2e2:	f0 16 00 02 	mcall	r6[8]
8000a2e6:	14 98       	mov	r8,r10
8000a2e8:	16 99       	mov	r9,r11
8000a2ea:	10 9a       	mov	r10,r8
8000a2ec:	12 9b       	mov	r11,r9
8000a2ee:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2f2:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a2f6:	12 98       	mov	r8,r9
8000a2f8:	a3 78       	lsl	r8,0x3
8000a2fa:	12 08       	add	r8,r9
8000a2fc:	a3 78       	lsl	r8,0x3
8000a2fe:	f8 08 00 08 	add	r8,r12,r8
8000a302:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a306:	f0 16 00 05 	mcall	r6[20]
8000a30a:	14 98       	mov	r8,r10
8000a30c:	16 99       	mov	r9,r11
8000a30e:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000a312:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a316:	10 91       	mov	r1,r8
8000a318:	ee 11 80 00 	eorh	r1,0x8000
8000a31c:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000a320:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a324:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a328:	12 98       	mov	r8,r9
8000a32a:	a3 78       	lsl	r8,0x3
8000a32c:	12 08       	add	r8,r9
8000a32e:	a3 78       	lsl	r8,0x3
8000a330:	f4 08 00 08 	add	r8,r10,r8
8000a334:	2e 08       	sub	r8,-32
8000a336:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a33a:	00 9a       	mov	r10,r0
8000a33c:	02 9b       	mov	r11,r1
8000a33e:	f0 16 00 02 	mcall	r6[8]
8000a342:	14 98       	mov	r8,r10
8000a344:	16 99       	mov	r9,r11
8000a346:	10 9a       	mov	r10,r8
8000a348:	12 9b       	mov	r11,r9
8000a34a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a34e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a352:	12 98       	mov	r8,r9
8000a354:	a3 78       	lsl	r8,0x3
8000a356:	12 08       	add	r8,r9
8000a358:	2f f8       	sub	r8,-1
8000a35a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a35e:	f0 16 00 05 	mcall	r6[20]
8000a362:	14 98       	mov	r8,r10
8000a364:	16 99       	mov	r9,r11
8000a366:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000a36a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a36e:	30 0a       	mov	r10,0
8000a370:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a374:	f0 16 00 12 	mcall	r6[72]
8000a378:	14 98       	mov	r8,r10
8000a37a:	16 99       	mov	r9,r11
8000a37c:	10 9a       	mov	r10,r8
8000a37e:	12 9b       	mov	r11,r9
8000a380:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a384:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a388:	12 98       	mov	r8,r9
8000a38a:	a3 78       	lsl	r8,0x3
8000a38c:	12 08       	add	r8,r9
8000a38e:	a3 78       	lsl	r8,0x3
8000a390:	f8 08 00 08 	add	r8,r12,r8
8000a394:	2e 88       	sub	r8,-24
8000a396:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a39a:	f0 16 00 02 	mcall	r6[8]
8000a39e:	14 98       	mov	r8,r10
8000a3a0:	16 99       	mov	r9,r11
8000a3a2:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000a3a6:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a3aa:	30 0a       	mov	r10,0
8000a3ac:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a3b0:	f0 16 00 12 	mcall	r6[72]
8000a3b4:	14 98       	mov	r8,r10
8000a3b6:	16 99       	mov	r9,r11
8000a3b8:	10 9a       	mov	r10,r8
8000a3ba:	12 9b       	mov	r11,r9
8000a3bc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3c0:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a3c4:	12 98       	mov	r8,r9
8000a3c6:	a3 78       	lsl	r8,0x3
8000a3c8:	12 08       	add	r8,r9
8000a3ca:	a3 78       	lsl	r8,0x3
8000a3cc:	f8 08 00 08 	add	r8,r12,r8
8000a3d0:	2e 08       	sub	r8,-32
8000a3d2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a3d6:	f0 16 00 02 	mcall	r6[8]
8000a3da:	14 98       	mov	r8,r10
8000a3dc:	16 99       	mov	r9,r11
8000a3de:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000a3e2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3e6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a3ea:	12 98       	mov	r8,r9
8000a3ec:	a3 78       	lsl	r8,0x3
8000a3ee:	12 08       	add	r8,r9
8000a3f0:	a3 78       	lsl	r8,0x3
8000a3f2:	10 0a       	add	r10,r8
8000a3f4:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a3f8:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a3fc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a400:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a404:	12 98       	mov	r8,r9
8000a406:	a3 78       	lsl	r8,0x3
8000a408:	12 08       	add	r8,r9
8000a40a:	f0 cb ff ff 	sub	r11,r8,-1
8000a40e:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a412:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a416:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a41a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a41e:	12 98       	mov	r8,r9
8000a420:	a3 78       	lsl	r8,0x3
8000a422:	12 08       	add	r8,r9
8000a424:	a3 78       	lsl	r8,0x3
8000a426:	f4 08 00 08 	add	r8,r10,r8
8000a42a:	f0 ca ff e8 	sub	r10,r8,-24
8000a42e:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a432:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a436:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a43a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a43e:	12 98       	mov	r8,r9
8000a440:	a3 78       	lsl	r8,0x3
8000a442:	12 08       	add	r8,r9
8000a444:	a3 78       	lsl	r8,0x3
8000a446:	f4 08 00 08 	add	r8,r10,r8
8000a44a:	f0 ca ff e0 	sub	r10,r8,-32
8000a44e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a452:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a456:	2e 6d       	sub	sp,-104
8000a458:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a45c:	80 00       	ld.sh	r0,r0[0x0]
8000a45e:	9d 5c       	st.w	lr[0x14],r12

8000a460 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a460:	eb cd 40 e0 	pushm	r5-r7,lr
8000a464:	1a 97       	mov	r7,sp
8000a466:	21 dd       	sub	sp,116
8000a468:	fe f6 02 00 	ld.w	r6,pc[512]
8000a46c:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a46e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a472:	70 08       	ld.w	r8,r8[0x0]
8000a474:	f1 38 0c 24 	ld.ub	r8,r8[3108]
8000a478:	ec 18 00 01 	eorl	r8,0x1
8000a47c:	5c 58       	castu.b	r8
8000a47e:	c0 30       	breq	8000a484 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a480:	f0 16 01 0d 	mcall	r6[1076]
	}

	if(!filter_init_delta_t)
8000a484:	ec f8 02 c0 	ld.w	r8,r6[704]
8000a488:	11 88       	ld.ub	r8,r8[0x0]
8000a48a:	ec 18 00 01 	eorl	r8,0x1
8000a48e:	5c 58       	castu.b	r8
8000a490:	c0 c0       	breq	8000a4a8 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a492:	ec f9 02 c0 	ld.w	r9,r6[704]
8000a496:	30 18       	mov	r8,1
8000a498:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a49a:	f0 16 00 27 	mcall	r6[156]
8000a49e:	18 99       	mov	r9,r12
8000a4a0:	ec f8 02 bc 	ld.w	r8,r6[700]
8000a4a4:	91 09       	st.w	r8[0x0],r9
8000a4a6:	cd e8       	rjmp	8000a662 <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a4a8:	f0 16 00 27 	mcall	r6[156]
8000a4ac:	18 98       	mov	r8,r12
8000a4ae:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a4b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a4b6:	70 08       	ld.w	r8,r8[0x0]
8000a4b8:	ec f9 02 bc 	ld.w	r9,r6[700]
8000a4bc:	72 09       	ld.w	r9,r9[0x0]
8000a4be:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a4c2:	f4 09 01 09 	sub	r9,r10,r9
8000a4c6:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a4ca:	f1 49 0a 64 	st.w	r8[2660],r9
		prev_time = actual_time;
8000a4ce:	ec f8 02 bc 	ld.w	r8,r6[700]
8000a4d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a4d6:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a4d8:	ec f8 00 00 	ld.w	r8,r6[0]
8000a4dc:	70 05       	ld.w	r5,r8[0x0]
8000a4de:	ec f8 00 00 	ld.w	r8,r6[0]
8000a4e2:	70 08       	ld.w	r8,r8[0x0]
8000a4e4:	f0 f8 0a 64 	ld.w	r8,r8[2660]
8000a4e8:	e0 6b 24 00 	mov	r11,9216
8000a4ec:	ea 1b 49 74 	orh	r11,0x4974
8000a4f0:	10 9c       	mov	r12,r8
8000a4f2:	f0 16 00 08 	mcall	r6[32]
8000a4f6:	18 98       	mov	r8,r12
8000a4f8:	eb 48 0a 64 	st.w	r5[2660],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a4fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000a500:	70 08       	ld.w	r8,r8[0x0]
8000a502:	f0 fa 0a 64 	ld.w	r10,r8[2660]
8000a506:	ec f8 00 00 	ld.w	r8,r6[0]
8000a50a:	70 08       	ld.w	r8,r8[0x0]
8000a50c:	f0 c9 ff 40 	sub	r9,r8,-192
8000a510:	ec f8 00 00 	ld.w	r8,r6[0]
8000a514:	70 08       	ld.w	r8,r8[0x0]
8000a516:	12 9b       	mov	r11,r9
8000a518:	10 9c       	mov	r12,r8
8000a51a:	f0 16 01 d8 	mcall	r6[1888]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a51e:	ec fc 02 7c 	ld.w	r12,r6[636]
8000a522:	f0 16 00 8f 	mcall	r6[572]
8000a526:	18 98       	mov	r8,r12
8000a528:	58 08       	cp.w	r8,0
8000a52a:	e0 80 00 9c 	breq	8000a662 <estimator_loop+0x202>
8000a52e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a532:	70 08       	ld.w	r8,r8[0x0]
8000a534:	f1 38 0c 24 	ld.ub	r8,r8[3108]
8000a538:	58 08       	cp.w	r8,0
8000a53a:	e0 80 00 94 	breq	8000a662 <estimator_loop+0x202>
8000a53e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a542:	70 08       	ld.w	r8,r8[0x0]
8000a544:	f0 f8 0f 80 	ld.w	r8,r8[3968]
8000a548:	58 08       	cp.w	r8,0
8000a54a:	e0 81 00 8c 	brne	8000a662 <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a54e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a552:	70 08       	ld.w	r8,r8[0x0]
8000a554:	f0 e8 09 d0 	ld.d	r8,r8[2512]
8000a558:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a55c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a560:	70 08       	ld.w	r8,r8[0x0]
8000a562:	f0 e8 09 c8 	ld.d	r8,r8[2504]
8000a566:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a56a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a56e:	70 08       	ld.w	r8,r8[0x0]
8000a570:	f0 f8 09 d8 	ld.w	r8,r8[2520]
8000a574:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a578:	ec f8 00 00 	ld.w	r8,r6[0]
8000a57c:	70 08       	ld.w	r8,r8[0x0]
8000a57e:	ee cc 00 74 	sub	r12,r7,116
8000a582:	20 7d       	sub	sp,28
8000a584:	1a 99       	mov	r9,sp
8000a586:	12 9a       	mov	r10,r9
8000a588:	f0 cb f3 94 	sub	r11,r8,-3180
8000a58c:	f4 c8 00 00 	sub	r8,r10,0
8000a590:	f6 c9 00 00 	sub	r9,r11,0
8000a594:	72 0e       	ld.w	lr,r9[0x0]
8000a596:	91 0e       	st.w	r8[0x0],lr
8000a598:	72 1e       	ld.w	lr,r9[0x4]
8000a59a:	91 1e       	st.w	r8[0x4],lr
8000a59c:	72 2e       	ld.w	lr,r9[0x8]
8000a59e:	91 2e       	st.w	r8[0x8],lr
8000a5a0:	72 39       	ld.w	r9,r9[0xc]
8000a5a2:	91 39       	st.w	r8[0xc],r9
8000a5a4:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a5a8:	f4 e9 00 10 	st.d	r10[16],r8
8000a5ac:	76 68       	ld.w	r8,r11[0x18]
8000a5ae:	95 68       	st.w	r10[0x18],r8
8000a5b0:	20 7d       	sub	sp,28
8000a5b2:	1a 98       	mov	r8,sp
8000a5b4:	10 9a       	mov	r10,r8
8000a5b6:	ee cb 00 44 	sub	r11,r7,68
8000a5ba:	f4 c8 00 00 	sub	r8,r10,0
8000a5be:	f6 c9 00 00 	sub	r9,r11,0
8000a5c2:	72 0e       	ld.w	lr,r9[0x0]
8000a5c4:	91 0e       	st.w	r8[0x0],lr
8000a5c6:	72 1e       	ld.w	lr,r9[0x4]
8000a5c8:	91 1e       	st.w	r8[0x4],lr
8000a5ca:	72 2e       	ld.w	lr,r9[0x8]
8000a5cc:	91 2e       	st.w	r8[0x8],lr
8000a5ce:	72 39       	ld.w	r9,r9[0xc]
8000a5d0:	91 39       	st.w	r8[0xc],r9
8000a5d2:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a5d6:	f4 e9 00 10 	st.d	r10[16],r8
8000a5da:	76 68       	ld.w	r8,r11[0x18]
8000a5dc:	95 68       	st.w	r10[0x18],r8
8000a5de:	f0 16 00 75 	mcall	r6[468]
8000a5e2:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a5e4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a5e8:	10 9c       	mov	r12,r8
8000a5ea:	f0 16 00 03 	mcall	r6[12]
8000a5ee:	14 98       	mov	r8,r10
8000a5f0:	16 99       	mov	r9,r11
8000a5f2:	10 9a       	mov	r10,r8
8000a5f4:	12 9b       	mov	r11,r9
8000a5f6:	30 0c       	mov	r12,0
8000a5f8:	f0 16 00 c6 	mcall	r6[792]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000a5fc:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000a600:	10 9c       	mov	r12,r8
8000a602:	f0 16 00 03 	mcall	r6[12]
8000a606:	14 98       	mov	r8,r10
8000a608:	16 99       	mov	r9,r11
8000a60a:	10 9a       	mov	r10,r8
8000a60c:	12 9b       	mov	r11,r9
8000a60e:	30 1c       	mov	r12,1
8000a610:	f0 16 00 c6 	mcall	r6[792]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000a614:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a618:	10 9c       	mov	r12,r8
8000a61a:	f0 16 00 03 	mcall	r6[12]
8000a61e:	14 98       	mov	r8,r10
8000a620:	16 99       	mov	r9,r11
8000a622:	10 9a       	mov	r10,r8
8000a624:	12 9b       	mov	r11,r9
8000a626:	30 2c       	mov	r12,2
8000a628:	f0 16 00 c6 	mcall	r6[792]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000a62c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a630:	70 08       	ld.w	r8,r8[0x0]
8000a632:	f0 f8 09 e8 	ld.w	r8,r8[2536]
8000a636:	10 9b       	mov	r11,r8
8000a638:	30 0c       	mov	r12,0
8000a63a:	f0 16 00 a3 	mcall	r6[652]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000a63e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a642:	70 08       	ld.w	r8,r8[0x0]
8000a644:	f0 f8 09 ec 	ld.w	r8,r8[2540]
8000a648:	10 9b       	mov	r11,r8
8000a64a:	30 1c       	mov	r12,1
8000a64c:	f0 16 00 a3 	mcall	r6[652]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000a650:	ec f8 00 00 	ld.w	r8,r6[0]
8000a654:	70 08       	ld.w	r8,r8[0x0]
8000a656:	f0 f8 09 f0 	ld.w	r8,r8[2544]
8000a65a:	10 9b       	mov	r11,r8
8000a65c:	30 2c       	mov	r12,2
8000a65e:	f0 16 00 a3 	mcall	r6[652]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000a662:	2e 3d       	sub	sp,-116
8000a664:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a668:	80 00       	ld.sh	r0,r0[0x0]
8000a66a:	a2 f0       	st.b	r1[0x7],r0

8000a66c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a66c:	eb cd 40 80 	pushm	r7,lr
8000a670:	1a 97       	mov	r7,sp
8000a672:	20 3d       	sub	sp,12
8000a674:	ef 4c ff f8 	st.w	r7[-8],r12
8000a678:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a67c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a680:	70 09       	ld.w	r9,r8[0x0]
8000a682:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a686:	70 08       	ld.w	r8,r8[0x0]
8000a688:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a68c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a690:	2f c8       	sub	r8,-4
8000a692:	70 0a       	ld.w	r10,r8[0x0]
8000a694:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a698:	2f c8       	sub	r8,-4
8000a69a:	70 08       	ld.w	r8,r8[0x0]
8000a69c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a6a0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a6a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6a8:	2f 88       	sub	r8,-8
8000a6aa:	70 0a       	ld.w	r10,r8[0x0]
8000a6ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a6b0:	2f 88       	sub	r8,-8
8000a6b2:	70 08       	ld.w	r8,r8[0x0]
8000a6b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a6b8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a6bc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a6c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a6c4:	10 9c       	mov	r12,r8
8000a6c6:	2f dd       	sub	sp,-12
8000a6c8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6cc <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a6cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a6d0:	1a 97       	mov	r7,sp
8000a6d2:	20 7d       	sub	sp,28
8000a6d4:	4b d6       	lddpc	r6,8000a7c8 <quat_multi+0xfc>
8000a6d6:	1e 26       	rsub	r6,pc
8000a6d8:	ee c8 ff ec 	sub	r8,r7,-20
8000a6dc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a6de:	70 2a       	ld.w	r10,r8[0x8]
8000a6e0:	70 79       	ld.w	r9,r8[0x1c]
8000a6e2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a6e6:	70 3b       	ld.w	r11,r8[0xc]
8000a6e8:	70 69       	ld.w	r9,r8[0x18]
8000a6ea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a6ee:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a6f2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000a6f6:	70 3a       	ld.w	r10,r8[0xc]
8000a6f8:	70 59       	ld.w	r9,r8[0x14]
8000a6fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a6fe:	70 1b       	ld.w	r11,r8[0x4]
8000a700:	70 79       	ld.w	r9,r8[0x1c]
8000a702:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a706:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a70a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000a70e:	70 1a       	ld.w	r10,r8[0x4]
8000a710:	70 69       	ld.w	r9,r8[0x18]
8000a712:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a716:	70 2b       	ld.w	r11,r8[0x8]
8000a718:	70 59       	ld.w	r9,r8[0x14]
8000a71a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a71e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a722:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000a726:	70 4a       	ld.w	r10,r8[0x10]
8000a728:	70 19       	ld.w	r9,r8[0x4]
8000a72a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a72e:	70 0b       	ld.w	r11,r8[0x0]
8000a730:	70 59       	ld.w	r9,r8[0x14]
8000a732:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a736:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a73a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a73e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a742:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000a746:	70 4a       	ld.w	r10,r8[0x10]
8000a748:	70 29       	ld.w	r9,r8[0x8]
8000a74a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a74e:	70 0b       	ld.w	r11,r8[0x0]
8000a750:	70 69       	ld.w	r9,r8[0x18]
8000a752:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a756:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a75a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a75e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a762:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000a766:	70 4a       	ld.w	r10,r8[0x10]
8000a768:	70 39       	ld.w	r9,r8[0xc]
8000a76a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a76e:	70 0b       	ld.w	r11,r8[0x0]
8000a770:	70 79       	ld.w	r9,r8[0x1c]
8000a772:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a776:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a77a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a77e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a782:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000a786:	70 0a       	ld.w	r10,r8[0x0]
8000a788:	70 49       	ld.w	r9,r8[0x10]
8000a78a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000a78e:	f0 c9 ff f0 	sub	r9,r8,-16
8000a792:	2f c9       	sub	r9,-4
8000a794:	2f c8       	sub	r8,-4
8000a796:	12 9b       	mov	r11,r9
8000a798:	10 9c       	mov	r12,r8
8000a79a:	c6 9f       	rcall	8000a66c <scalar_product>
8000a79c:	18 98       	mov	r8,r12
8000a79e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000a7a2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000a7a6:	0a 98       	mov	r8,r5
8000a7a8:	ee c9 00 1c 	sub	r9,r7,28
8000a7ac:	20 08       	sub	r8,0
8000a7ae:	20 09       	sub	r9,0
8000a7b0:	72 0a       	ld.w	r10,r9[0x0]
8000a7b2:	91 0a       	st.w	r8[0x0],r10
8000a7b4:	72 1a       	ld.w	r10,r9[0x4]
8000a7b6:	91 1a       	st.w	r8[0x4],r10
8000a7b8:	72 2a       	ld.w	r10,r9[0x8]
8000a7ba:	91 2a       	st.w	r8[0x8],r10
8000a7bc:	72 39       	ld.w	r9,r9[0xc]
8000a7be:	91 39       	st.w	r8[0xc],r9
}
8000a7c0:	0a 9c       	mov	r12,r5
8000a7c2:	2f 9d       	sub	sp,-28
8000a7c4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a7c8:	80 00       	ld.sh	r0,r0[0x0]
8000a7ca:	a5 5a       	asr	r10,0x5

8000a7cc <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000a7cc:	eb cd 40 80 	pushm	r7,lr
8000a7d0:	1a 97       	mov	r7,sp
8000a7d2:	20 5d       	sub	sp,20
8000a7d4:	ee c9 ff f8 	sub	r9,r7,-8
8000a7d8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000a7da:	72 08       	ld.w	r8,r9[0x0]
8000a7dc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000a7e0:	30 08       	mov	r8,0
8000a7e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000a7e6:	c1 58       	rjmp	8000a810 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000a7e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7ec:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a7f0:	2f fb       	sub	r11,-1
8000a7f2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000a7f6:	ee 1b 80 00 	eorh	r11,0x8000
8000a7fa:	2f f8       	sub	r8,-1
8000a7fc:	a3 68       	lsl	r8,0x2
8000a7fe:	ee 08 00 08 	add	r8,r7,r8
8000a802:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000a806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a80a:	2f f8       	sub	r8,-1
8000a80c:	ef 48 ff fc 	st.w	r7[-4],r8
8000a810:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a814:	58 28       	cp.w	r8,2
8000a816:	fe 9a ff e9 	brle	8000a7e8 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000a81a:	14 98       	mov	r8,r10
8000a81c:	ee c9 00 14 	sub	r9,r7,20
8000a820:	20 08       	sub	r8,0
8000a822:	20 09       	sub	r9,0
8000a824:	72 0b       	ld.w	r11,r9[0x0]
8000a826:	91 0b       	st.w	r8[0x0],r11
8000a828:	72 1b       	ld.w	r11,r9[0x4]
8000a82a:	91 1b       	st.w	r8[0x4],r11
8000a82c:	72 2b       	ld.w	r11,r9[0x8]
8000a82e:	91 2b       	st.w	r8[0x8],r11
8000a830:	72 39       	ld.w	r9,r9[0xc]
8000a832:	91 39       	st.w	r8[0xc],r9
}
8000a834:	14 9c       	mov	r12,r10
8000a836:	2f bd       	sub	sp,-20
8000a838:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a83c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000a83c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a840:	1a 97       	mov	r7,sp
8000a842:	20 cd       	sub	sp,48
8000a844:	4b c6       	lddpc	r6,8000a934 <quat_global_to_local+0xf8>
8000a846:	1e 26       	rsub	r6,pc
8000a848:	ee c5 ff ec 	sub	r5,r7,-20
8000a84c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a84e:	ee ca 00 10 	sub	r10,r7,16
8000a852:	20 4d       	sub	sp,16
8000a854:	1a 98       	mov	r8,sp
8000a856:	0a 99       	mov	r9,r5
8000a858:	20 08       	sub	r8,0
8000a85a:	20 09       	sub	r9,0
8000a85c:	72 0b       	ld.w	r11,r9[0x0]
8000a85e:	91 0b       	st.w	r8[0x0],r11
8000a860:	72 1b       	ld.w	r11,r9[0x4]
8000a862:	91 1b       	st.w	r8[0x4],r11
8000a864:	72 2b       	ld.w	r11,r9[0x8]
8000a866:	91 2b       	st.w	r8[0x8],r11
8000a868:	72 39       	ld.w	r9,r9[0xc]
8000a86a:	91 39       	st.w	r8[0xc],r9
8000a86c:	14 9c       	mov	r12,r10
8000a86e:	ca ff       	rcall	8000a7cc <quat_inv>
8000a870:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000a872:	ee ca 00 20 	sub	r10,r7,32
8000a876:	20 4d       	sub	sp,16
8000a878:	1a 98       	mov	r8,sp
8000a87a:	ea c9 ff f0 	sub	r9,r5,-16
8000a87e:	20 08       	sub	r8,0
8000a880:	20 09       	sub	r9,0
8000a882:	72 0b       	ld.w	r11,r9[0x0]
8000a884:	91 0b       	st.w	r8[0x0],r11
8000a886:	72 1b       	ld.w	r11,r9[0x4]
8000a888:	91 1b       	st.w	r8[0x4],r11
8000a88a:	72 2b       	ld.w	r11,r9[0x8]
8000a88c:	91 2b       	st.w	r8[0x8],r11
8000a88e:	72 39       	ld.w	r9,r9[0xc]
8000a890:	91 39       	st.w	r8[0xc],r9
8000a892:	20 4d       	sub	sp,16
8000a894:	1a 98       	mov	r8,sp
8000a896:	ee c9 00 10 	sub	r9,r7,16
8000a89a:	20 08       	sub	r8,0
8000a89c:	20 09       	sub	r9,0
8000a89e:	72 0b       	ld.w	r11,r9[0x0]
8000a8a0:	91 0b       	st.w	r8[0x0],r11
8000a8a2:	72 1b       	ld.w	r11,r9[0x4]
8000a8a4:	91 1b       	st.w	r8[0x4],r11
8000a8a6:	72 2b       	ld.w	r11,r9[0x8]
8000a8a8:	91 2b       	st.w	r8[0x8],r11
8000a8aa:	72 39       	ld.w	r9,r9[0xc]
8000a8ac:	91 39       	st.w	r8[0xc],r9
8000a8ae:	14 9c       	mov	r12,r10
8000a8b0:	c0 ef       	rcall	8000a6cc <quat_multi>
8000a8b2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000a8b4:	ee ca 00 30 	sub	r10,r7,48
8000a8b8:	20 4d       	sub	sp,16
8000a8ba:	1a 98       	mov	r8,sp
8000a8bc:	0a 99       	mov	r9,r5
8000a8be:	20 08       	sub	r8,0
8000a8c0:	20 09       	sub	r9,0
8000a8c2:	72 0b       	ld.w	r11,r9[0x0]
8000a8c4:	91 0b       	st.w	r8[0x0],r11
8000a8c6:	72 1b       	ld.w	r11,r9[0x4]
8000a8c8:	91 1b       	st.w	r8[0x4],r11
8000a8ca:	72 2b       	ld.w	r11,r9[0x8]
8000a8cc:	91 2b       	st.w	r8[0x8],r11
8000a8ce:	72 39       	ld.w	r9,r9[0xc]
8000a8d0:	91 39       	st.w	r8[0xc],r9
8000a8d2:	20 4d       	sub	sp,16
8000a8d4:	1a 98       	mov	r8,sp
8000a8d6:	ee c9 00 20 	sub	r9,r7,32
8000a8da:	20 08       	sub	r8,0
8000a8dc:	20 09       	sub	r9,0
8000a8de:	72 0b       	ld.w	r11,r9[0x0]
8000a8e0:	91 0b       	st.w	r8[0x0],r11
8000a8e2:	72 1b       	ld.w	r11,r9[0x4]
8000a8e4:	91 1b       	st.w	r8[0x4],r11
8000a8e6:	72 2b       	ld.w	r11,r9[0x8]
8000a8e8:	91 2b       	st.w	r8[0x8],r11
8000a8ea:	72 39       	ld.w	r9,r9[0xc]
8000a8ec:	91 39       	st.w	r8[0xc],r9
8000a8ee:	14 9c       	mov	r12,r10
8000a8f0:	ce ee       	rcall	8000a6cc <quat_multi>
8000a8f2:	2f 8d       	sub	sp,-32
8000a8f4:	ee c8 00 20 	sub	r8,r7,32
8000a8f8:	ee c9 00 30 	sub	r9,r7,48
8000a8fc:	20 08       	sub	r8,0
8000a8fe:	20 09       	sub	r9,0
8000a900:	72 0a       	ld.w	r10,r9[0x0]
8000a902:	91 0a       	st.w	r8[0x0],r10
8000a904:	72 1a       	ld.w	r10,r9[0x4]
8000a906:	91 1a       	st.w	r8[0x4],r10
8000a908:	72 2a       	ld.w	r10,r9[0x8]
8000a90a:	91 2a       	st.w	r8[0x8],r10
8000a90c:	72 39       	ld.w	r9,r9[0xc]
8000a90e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000a910:	06 98       	mov	r8,r3
8000a912:	ee c9 00 20 	sub	r9,r7,32
8000a916:	20 08       	sub	r8,0
8000a918:	20 09       	sub	r9,0
8000a91a:	72 0a       	ld.w	r10,r9[0x0]
8000a91c:	91 0a       	st.w	r8[0x0],r10
8000a91e:	72 1a       	ld.w	r10,r9[0x4]
8000a920:	91 1a       	st.w	r8[0x4],r10
8000a922:	72 2a       	ld.w	r10,r9[0x8]
8000a924:	91 2a       	st.w	r8[0x8],r10
8000a926:	72 39       	ld.w	r9,r9[0xc]
8000a928:	91 39       	st.w	r8[0xc],r9
}
8000a92a:	06 9c       	mov	r12,r3
8000a92c:	2f 4d       	sub	sp,-48
8000a92e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a932:	00 00       	add	r0,r0
8000a934:	80 00       	ld.sh	r0,r0[0x0]
8000a936:	a6 ca       	st.b	r3[0x4],r10

8000a938 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000a938:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a93c:	1a 97       	mov	r7,sp
8000a93e:	20 cd       	sub	sp,48
8000a940:	4b c6       	lddpc	r6,8000aa30 <quat_local_to_global+0xf8>
8000a942:	1e 26       	rsub	r6,pc
8000a944:	ee c5 ff ec 	sub	r5,r7,-20
8000a948:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a94a:	ee ca 00 10 	sub	r10,r7,16
8000a94e:	20 4d       	sub	sp,16
8000a950:	1a 98       	mov	r8,sp
8000a952:	0a 99       	mov	r9,r5
8000a954:	20 08       	sub	r8,0
8000a956:	20 09       	sub	r9,0
8000a958:	72 0b       	ld.w	r11,r9[0x0]
8000a95a:	91 0b       	st.w	r8[0x0],r11
8000a95c:	72 1b       	ld.w	r11,r9[0x4]
8000a95e:	91 1b       	st.w	r8[0x4],r11
8000a960:	72 2b       	ld.w	r11,r9[0x8]
8000a962:	91 2b       	st.w	r8[0x8],r11
8000a964:	72 39       	ld.w	r9,r9[0xc]
8000a966:	91 39       	st.w	r8[0xc],r9
8000a968:	14 9c       	mov	r12,r10
8000a96a:	c3 1f       	rcall	8000a7cc <quat_inv>
8000a96c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000a96e:	ee ca 00 20 	sub	r10,r7,32
8000a972:	20 4d       	sub	sp,16
8000a974:	1a 98       	mov	r8,sp
8000a976:	ea c9 ff f0 	sub	r9,r5,-16
8000a97a:	20 08       	sub	r8,0
8000a97c:	20 09       	sub	r9,0
8000a97e:	72 0b       	ld.w	r11,r9[0x0]
8000a980:	91 0b       	st.w	r8[0x0],r11
8000a982:	72 1b       	ld.w	r11,r9[0x4]
8000a984:	91 1b       	st.w	r8[0x4],r11
8000a986:	72 2b       	ld.w	r11,r9[0x8]
8000a988:	91 2b       	st.w	r8[0x8],r11
8000a98a:	72 39       	ld.w	r9,r9[0xc]
8000a98c:	91 39       	st.w	r8[0xc],r9
8000a98e:	20 4d       	sub	sp,16
8000a990:	1a 98       	mov	r8,sp
8000a992:	0a 99       	mov	r9,r5
8000a994:	20 08       	sub	r8,0
8000a996:	20 09       	sub	r9,0
8000a998:	72 0b       	ld.w	r11,r9[0x0]
8000a99a:	91 0b       	st.w	r8[0x0],r11
8000a99c:	72 1b       	ld.w	r11,r9[0x4]
8000a99e:	91 1b       	st.w	r8[0x4],r11
8000a9a0:	72 2b       	ld.w	r11,r9[0x8]
8000a9a2:	91 2b       	st.w	r8[0x8],r11
8000a9a4:	72 39       	ld.w	r9,r9[0xc]
8000a9a6:	91 39       	st.w	r8[0xc],r9
8000a9a8:	14 9c       	mov	r12,r10
8000a9aa:	c9 1e       	rcall	8000a6cc <quat_multi>
8000a9ac:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000a9ae:	ee ca 00 30 	sub	r10,r7,48
8000a9b2:	20 4d       	sub	sp,16
8000a9b4:	1a 98       	mov	r8,sp
8000a9b6:	ee c9 00 10 	sub	r9,r7,16
8000a9ba:	20 08       	sub	r8,0
8000a9bc:	20 09       	sub	r9,0
8000a9be:	72 0b       	ld.w	r11,r9[0x0]
8000a9c0:	91 0b       	st.w	r8[0x0],r11
8000a9c2:	72 1b       	ld.w	r11,r9[0x4]
8000a9c4:	91 1b       	st.w	r8[0x4],r11
8000a9c6:	72 2b       	ld.w	r11,r9[0x8]
8000a9c8:	91 2b       	st.w	r8[0x8],r11
8000a9ca:	72 39       	ld.w	r9,r9[0xc]
8000a9cc:	91 39       	st.w	r8[0xc],r9
8000a9ce:	20 4d       	sub	sp,16
8000a9d0:	1a 98       	mov	r8,sp
8000a9d2:	ee c9 00 20 	sub	r9,r7,32
8000a9d6:	20 08       	sub	r8,0
8000a9d8:	20 09       	sub	r9,0
8000a9da:	72 0b       	ld.w	r11,r9[0x0]
8000a9dc:	91 0b       	st.w	r8[0x0],r11
8000a9de:	72 1b       	ld.w	r11,r9[0x4]
8000a9e0:	91 1b       	st.w	r8[0x4],r11
8000a9e2:	72 2b       	ld.w	r11,r9[0x8]
8000a9e4:	91 2b       	st.w	r8[0x8],r11
8000a9e6:	72 39       	ld.w	r9,r9[0xc]
8000a9e8:	91 39       	st.w	r8[0xc],r9
8000a9ea:	14 9c       	mov	r12,r10
8000a9ec:	c7 0e       	rcall	8000a6cc <quat_multi>
8000a9ee:	2f 8d       	sub	sp,-32
8000a9f0:	ee c8 00 20 	sub	r8,r7,32
8000a9f4:	ee c9 00 30 	sub	r9,r7,48
8000a9f8:	20 08       	sub	r8,0
8000a9fa:	20 09       	sub	r9,0
8000a9fc:	72 0a       	ld.w	r10,r9[0x0]
8000a9fe:	91 0a       	st.w	r8[0x0],r10
8000aa00:	72 1a       	ld.w	r10,r9[0x4]
8000aa02:	91 1a       	st.w	r8[0x4],r10
8000aa04:	72 2a       	ld.w	r10,r9[0x8]
8000aa06:	91 2a       	st.w	r8[0x8],r10
8000aa08:	72 39       	ld.w	r9,r9[0xc]
8000aa0a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000aa0c:	06 98       	mov	r8,r3
8000aa0e:	ee c9 00 20 	sub	r9,r7,32
8000aa12:	20 08       	sub	r8,0
8000aa14:	20 09       	sub	r9,0
8000aa16:	72 0a       	ld.w	r10,r9[0x0]
8000aa18:	91 0a       	st.w	r8[0x0],r10
8000aa1a:	72 1a       	ld.w	r10,r9[0x4]
8000aa1c:	91 1a       	st.w	r8[0x4],r10
8000aa1e:	72 2a       	ld.w	r10,r9[0x8]
8000aa20:	91 2a       	st.w	r8[0x8],r10
8000aa22:	72 39       	ld.w	r9,r9[0xc]
8000aa24:	91 39       	st.w	r8[0xc],r9
}
8000aa26:	06 9c       	mov	r12,r3
8000aa28:	2f 4d       	sub	sp,-48
8000aa2a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000aa2e:	00 00       	add	r0,r0
8000aa30:	80 00       	ld.sh	r0,r0[0x0]
8000aa32:	a7 c6       	cbr	r6,0x6

8000aa34 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000aa34:	eb cd 40 c0 	pushm	r6-r7,lr
8000aa38:	1a 97       	mov	r7,sp
8000aa3a:	20 6d       	sub	sp,24
8000aa3c:	49 e6       	lddpc	r6,8000aab4 <interpolate+0x80>
8000aa3e:	1e 26       	rsub	r6,pc
8000aa40:	ef 4c ff f8 	st.w	r7[-8],r12
8000aa44:	ef 4b ff f4 	st.w	r7[-12],r11
8000aa48:	ef 4a ff f0 	st.w	r7[-16],r10
8000aa4c:	ef 49 ff ec 	st.w	r7[-20],r9
8000aa50:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000aa54:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa58:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000aa5c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000aa60:	c0 41       	brne	8000aa68 <interpolate+0x34>
	{
		return y1;
8000aa62:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000aa66:	c2 38       	rjmp	8000aaac <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000aa68:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000aa6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000aa70:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000aa74:	ee fa ff f8 	ld.w	r10,r7[-8]
8000aa78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa7c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000aa80:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000aa84:	ee fa ff f0 	ld.w	r10,r7[-16]
8000aa88:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa8c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa90:	12 9b       	mov	r11,r9
8000aa92:	10 9c       	mov	r12,r8
8000aa94:	f0 16 00 08 	mcall	r6[32]
8000aa98:	18 98       	mov	r8,r12
8000aa9a:	10 99       	mov	r9,r8
8000aa9c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000aaa0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000aaa4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000aaa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000aaac:	10 9c       	mov	r12,r8
8000aaae:	2f ad       	sub	sp,-24
8000aab0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000aab4:	80 00       	ld.sh	r0,r0[0x0]
8000aab6:	a8 c2       	st.b	r4[0x4],r2

8000aab8 <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000aab8:	eb cd 40 c0 	pushm	r6-r7,lr
8000aabc:	1a 97       	mov	r7,sp
8000aabe:	20 3d       	sub	sp,12
8000aac0:	4a 66       	lddpc	r6,8000ab58 <init_pos_integration+0xa0>
8000aac2:	1e 26       	rsub	r6,pc
8000aac4:	ef 4c ff fc 	st.w	r7[-4],r12
8000aac8:	ef 4b ff f8 	st.w	r7[-8],r11
8000aacc:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000aad0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aad4:	30 08       	mov	r8,0
8000aad6:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000aada:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aade:	30 08       	mov	r8,0
8000aae0:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000aae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aae8:	30 09       	mov	r9,0
8000aaea:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000aaec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aaf0:	30 09       	mov	r9,0
8000aaf2:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000aaf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aaf8:	fc 19 40 00 	movh	r9,0x4000
8000aafc:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000aafe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab02:	fc 19 40 00 	movh	r9,0x4000
8000ab06:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000ab08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab0c:	fc 19 3f 80 	movh	r9,0x3f80
8000ab10:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000ab12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab16:	fc 19 3f 80 	movh	r9,0x3f80
8000ab1a:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000ab1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab20:	fc 19 3f 80 	movh	r9,0x3f80
8000ab24:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000ab26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab2a:	fc 19 3f 00 	movh	r9,0x3f00
8000ab2e:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000ab30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab34:	fc 19 40 00 	movh	r9,0x4000
8000ab38:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000ab3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab3e:	fc 19 3f 80 	movh	r9,0x3f80
8000ab42:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000ab44:	ee fb ff f4 	ld.w	r11,r7[-12]
8000ab48:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ab4c:	f0 16 00 de 	mcall	r6[888]
}
8000ab50:	2f dd       	sub	sp,-12
8000ab52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ab56:	00 00       	add	r0,r0
8000ab58:	80 00       	ld.sh	r0,r0[0x0]
8000ab5a:	a9 46       	asr	r6,0x8
8000ab5c:	47 50       	lddsp	r0,sp[0x1d4]
8000ab5e:	53 20       	stdsp	sp[0xc8],r0
8000ab60:	70 6f       	ld.w	pc,r8[0x18]
8000ab62:	73 69       	ld.w	r9,r9[0x58]
8000ab64:	74 69       	ld.w	r9,r10[0x18]
8000ab66:	6f 6e       	ld.w	lr,r7[0x58]
8000ab68:	20 69       	sub	r9,6
8000ab6a:	6e 69       	ld.w	r9,r7[0x18]
8000ab6c:	74 69       	ld.w	r9,r10[0x18]
8000ab6e:	61 6c       	ld.w	r12,r0[0x58]
8000ab70:	69 7a       	ld.w	r10,r4[0x5c]
8000ab72:	65 64       	ld.w	r4,r2[0x58]
8000ab74:	21 0a       	sub	r10,16
	...

8000ab78 <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000ab78:	eb cd 40 c0 	pushm	r6-r7,lr
8000ab7c:	1a 97       	mov	r7,sp
8000ab7e:	20 3d       	sub	sp,12
8000ab80:	4d 16       	lddpc	r6,8000acc4 <init_pos_gps+0x14c>
8000ab82:	1e 26       	rsub	r6,pc
8000ab84:	ef 4c ff f8 	st.w	r7[-8],r12
8000ab88:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000ab8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab90:	2e 08       	sub	r8,-32
8000ab92:	10 9c       	mov	r12,r8
8000ab94:	f0 16 00 8f 	mcall	r6[572]
8000ab98:	18 98       	mov	r8,r12
8000ab9a:	58 08       	cp.w	r8,0
8000ab9c:	e0 80 00 91 	breq	8000acbe <init_pos_gps+0x146>
8000aba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aba4:	f1 38 00 28 	ld.ub	r8,r8[40]
8000aba8:	ec 18 00 01 	eorl	r8,0x1
8000abac:	5c 58       	castu.b	r8
8000abae:	e0 80 00 88 	breq	8000acbe <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000abb2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000abb6:	30 18       	mov	r8,1
8000abb8:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000abbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000abc0:	f0 e8 00 08 	ld.d	r8,r8[8]
8000abc4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000abc8:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000abcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000abd0:	f0 e8 00 00 	ld.d	r8,r8[0]
8000abd4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000abd8:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000abdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000abe0:	70 49       	ld.w	r9,r8[0x10]
8000abe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abe6:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000abea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000abee:	71 19       	ld.w	r9,r8[0x44]
8000abf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abf4:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000abf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000abfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac00:	f2 cb ff 70 	sub	r11,r9,-144
8000ac04:	f0 ca ff a0 	sub	r10,r8,-96
8000ac08:	f6 c8 00 00 	sub	r8,r11,0
8000ac0c:	f4 c9 00 00 	sub	r9,r10,0
8000ac10:	72 0c       	ld.w	r12,r9[0x0]
8000ac12:	91 0c       	st.w	r8[0x0],r12
8000ac14:	72 1c       	ld.w	r12,r9[0x4]
8000ac16:	91 1c       	st.w	r8[0x4],r12
8000ac18:	72 2c       	ld.w	r12,r9[0x8]
8000ac1a:	91 2c       	st.w	r8[0x8],r12
8000ac1c:	72 39       	ld.w	r9,r9[0xc]
8000ac1e:	91 39       	st.w	r8[0xc],r9
8000ac20:	f6 c8 ff f0 	sub	r8,r11,-16
8000ac24:	f4 c9 ff f0 	sub	r9,r10,-16
8000ac28:	72 0c       	ld.w	r12,r9[0x0]
8000ac2a:	91 0c       	st.w	r8[0x0],r12
8000ac2c:	72 1c       	ld.w	r12,r9[0x4]
8000ac2e:	91 1c       	st.w	r8[0x4],r12
8000ac30:	72 2c       	ld.w	r12,r9[0x8]
8000ac32:	91 2c       	st.w	r8[0x8],r12
8000ac34:	72 39       	ld.w	r9,r9[0xc]
8000ac36:	91 39       	st.w	r8[0xc],r9
8000ac38:	f6 c8 ff e0 	sub	r8,r11,-32
8000ac3c:	f4 c9 ff e0 	sub	r9,r10,-32
8000ac40:	72 0a       	ld.w	r10,r9[0x0]
8000ac42:	91 0a       	st.w	r8[0x0],r10
8000ac44:	72 1a       	ld.w	r10,r9[0x4]
8000ac46:	91 1a       	st.w	r8[0x4],r10
8000ac48:	72 2a       	ld.w	r10,r9[0x8]
8000ac4a:	91 2a       	st.w	r8[0x8],r10
8000ac4c:	72 39       	ld.w	r9,r9[0xc]
8000ac4e:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000ac50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac54:	30 09       	mov	r9,0
8000ac56:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000ac5a:	30 08       	mov	r8,0
8000ac5c:	ef 48 ff fc 	st.w	r7[-4],r8
8000ac60:	c2 68       	rjmp	8000acac <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000ac62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac6a:	2e f9       	sub	r9,-17
8000ac6c:	30 0a       	mov	r10,0
8000ac6e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000ac72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac7a:	2e b9       	sub	r9,-21
8000ac7c:	30 0a       	mov	r10,0
8000ac7e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000ac82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac8a:	2e 89       	sub	r9,-24
8000ac8c:	30 0a       	mov	r10,0
8000ac8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000ac92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac9a:	2f 29       	sub	r9,-14
8000ac9c:	30 0a       	mov	r10,0
8000ac9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000aca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aca6:	2f f8       	sub	r8,-1
8000aca8:	ef 48 ff fc 	st.w	r7[-4],r8
8000acac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000acb0:	58 28       	cp.w	r8,2
8000acb2:	fe 9a ff d8 	brle	8000ac62 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000acb6:	fe cc 01 5a 	sub	r12,pc,346
8000acba:	f0 16 00 01 	mcall	r6[4]
	}
}
8000acbe:	2f dd       	sub	sp,-12
8000acc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000acc4:	80 00       	ld.sh	r0,r0[0x0]
8000acc6:	aa 06       	st.h	r5[0x0],r6
8000acc8:	4f 66       	lddpc	r6,8000aea0 <position_reset_home_altitude+0xac>
8000acca:	66 73       	ld.w	r3,r3[0x1c]
8000accc:	65 74       	ld.w	r4,r2[0x5c]
8000acce:	20 6f       	sub	pc,6
8000acd0:	66 20       	ld.w	r0,r3[0x8]
8000acd2:	74 68       	ld.w	r8,r10[0x18]
8000acd4:	65 20       	ld.w	r0,r2[0x48]
8000acd6:	62 61       	ld.w	r1,r1[0x18]
8000acd8:	72 6f       	ld.w	pc,r9[0x18]
8000acda:	6d 65       	ld.w	r5,r6[0x58]
8000acdc:	74 65       	ld.w	r5,r10[0x18]
8000acde:	72 20       	ld.w	r0,r9[0x8]
8000ace0:	73 65       	ld.w	r5,r9[0x58]
8000ace2:	74 20       	ld.w	r0,r10[0x8]
8000ace4:	74 6f       	ld.w	pc,r10[0x18]
8000ace6:	20 74       	sub	r4,7
8000ace8:	68 65       	ld.w	r5,r4[0x18]
8000acea:	20 47       	sub	r7,4
8000acec:	50 53       	stdsp	sp[0x14],r3
8000acee:	20 61       	sub	r1,6
8000acf0:	6c 74       	ld.w	r4,r6[0x1c]
8000acf2:	69 74       	ld.w	r4,r4[0x5c]
8000acf4:	75 64       	ld.w	r4,r10[0x58]
8000acf6:	65 2c       	ld.w	r12,r2[0x48]
8000acf8:	20 6f       	sub	pc,6
8000acfa:	66 66       	ld.w	r6,r3[0x18]
8000acfc:	73 65       	ld.w	r5,r9[0x58]
8000acfe:	74 20       	ld.w	r0,r10[0x8]
8000ad00:	76 61       	ld.w	r1,r11[0x18]
8000ad02:	6c 75       	ld.w	r5,r6[0x1c]
8000ad04:	65 20       	ld.w	r0,r2[0x48]
8000ad06:	6f 66       	ld.w	r6,r7[0x58]
8000ad08:	3a 00       	mov	r0,-96
8000ad0a:	00 00       	add	r0,r0
8000ad0c:	20 3d       	sub	sp,12
8000ad0e:	20 2d       	sub	sp,8
8000ad10:	00 00       	add	r0,r0
8000ad12:	00 00       	add	r0,r0
8000ad14:	20 2d       	sub	sp,8
8000ad16:	20 00       	sub	r0,0
8000ad18:	20 2b       	sub	r11,2
8000ad1a:	20 00       	sub	r0,0
8000ad1c:	0a 00       	add	r0,r5

8000ad1e <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000ad1e:	eb cd 40 c0 	pushm	r6-r7,lr
8000ad22:	1a 97       	mov	r7,sp
8000ad24:	20 3d       	sub	sp,12
8000ad26:	4b 36       	lddpc	r6,8000adf0 <init_barometer_offset+0xd2>
8000ad28:	1e 26       	rsub	r6,pc
8000ad2a:	ef 4c ff f8 	st.w	r7[-8],r12
8000ad2e:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000ad32:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad36:	2d c8       	sub	r8,-36
8000ad38:	10 9c       	mov	r12,r8
8000ad3a:	f0 16 00 df 	mcall	r6[892]
8000ad3e:	18 98       	mov	r8,r12
8000ad40:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000ad44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad48:	30 08       	mov	r8,0
8000ad4a:	f0 09 18 00 	cp.b	r9,r8
8000ad4e:	c4 e0       	breq	8000adea <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000ad50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad54:	70 79       	ld.w	r9,r8[0x1c]
8000ad56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad5a:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ad5e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ad62:	10 99       	mov	r9,r8
8000ad64:	ee 19 80 00 	eorh	r9,0x8000
8000ad68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad6c:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000ad6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ad72:	30 18       	mov	r8,1
8000ad74:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000ad78:	fe cc 00 b0 	sub	r12,pc,176
8000ad7c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000ad80:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad84:	70 88       	ld.w	r8,r8[0x20]
8000ad86:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ad8a:	30 ab       	mov	r11,10
8000ad8c:	10 9c       	mov	r12,r8
8000ad8e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000ad92:	fe cc 00 86 	sub	r12,pc,134
8000ad96:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000ad9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad9e:	70 78       	ld.w	r8,r8[0x1c]
8000ada0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ada4:	30 ab       	mov	r11,10
8000ada6:	10 9c       	mov	r12,r8
8000ada8:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000adac:	fe cc 00 98 	sub	r12,pc,152
8000adb0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000adb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000adb8:	71 a8       	ld.w	r8,r8[0x68]
8000adba:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000adbe:	30 ab       	mov	r11,10
8000adc0:	10 9c       	mov	r12,r8
8000adc2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000adc6:	fe cc 00 ae 	sub	r12,pc,174
8000adca:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000adce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000add2:	f0 f8 00 80 	ld.w	r8,r8[128]
8000add6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000adda:	30 ab       	mov	r11,10
8000addc:	10 9c       	mov	r12,r8
8000adde:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000ade2:	fe cc 00 c6 	sub	r12,pc,198
8000ade6:	f0 16 00 01 	mcall	r6[4]
	}
}
8000adea:	2f dd       	sub	sp,-12
8000adec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000adf0:	80 00       	ld.sh	r0,r0[0x0]
8000adf2:	ab ac       	sbr	r12,0xa

8000adf4 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000adf4:	eb cd 40 c0 	pushm	r6-r7,lr
8000adf8:	1a 97       	mov	r7,sp
8000adfa:	20 4d       	sub	sp,16
8000adfc:	4f 06       	lddpc	r6,8000afbc <position_reset_home_altitude+0x1c8>
8000adfe:	1e 26       	rsub	r6,pc
8000ae00:	ef 4c ff f8 	st.w	r7[-8],r12
8000ae04:	ef 4b ff f4 	st.w	r7[-12],r11
8000ae08:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000ae0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae10:	f1 38 00 28 	ld.ub	r8,r8[40]
8000ae14:	58 08       	cp.w	r8,0
8000ae16:	c4 b0       	breq	8000aeac <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000ae18:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae1c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000ae20:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae24:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000ae28:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae2c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ae30:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae34:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000ae38:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae3c:	70 49       	ld.w	r9,r8[0x10]
8000ae3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae42:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000ae46:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae4a:	71 19       	ld.w	r9,r8[0x44]
8000ae4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae50:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000ae54:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ae58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae5c:	f2 cb ff 70 	sub	r11,r9,-144
8000ae60:	f0 ca ff a0 	sub	r10,r8,-96
8000ae64:	f6 c8 00 00 	sub	r8,r11,0
8000ae68:	f4 c9 00 00 	sub	r9,r10,0
8000ae6c:	72 0c       	ld.w	r12,r9[0x0]
8000ae6e:	91 0c       	st.w	r8[0x0],r12
8000ae70:	72 1c       	ld.w	r12,r9[0x4]
8000ae72:	91 1c       	st.w	r8[0x4],r12
8000ae74:	72 2c       	ld.w	r12,r9[0x8]
8000ae76:	91 2c       	st.w	r8[0x8],r12
8000ae78:	72 39       	ld.w	r9,r9[0xc]
8000ae7a:	91 39       	st.w	r8[0xc],r9
8000ae7c:	f6 c8 ff f0 	sub	r8,r11,-16
8000ae80:	f4 c9 ff f0 	sub	r9,r10,-16
8000ae84:	72 0c       	ld.w	r12,r9[0x0]
8000ae86:	91 0c       	st.w	r8[0x0],r12
8000ae88:	72 1c       	ld.w	r12,r9[0x4]
8000ae8a:	91 1c       	st.w	r8[0x4],r12
8000ae8c:	72 2c       	ld.w	r12,r9[0x8]
8000ae8e:	91 2c       	st.w	r8[0x8],r12
8000ae90:	72 39       	ld.w	r9,r9[0xc]
8000ae92:	91 39       	st.w	r8[0xc],r9
8000ae94:	f6 c8 ff e0 	sub	r8,r11,-32
8000ae98:	f4 c9 ff e0 	sub	r9,r10,-32
8000ae9c:	72 0a       	ld.w	r10,r9[0x0]
8000ae9e:	91 0a       	st.w	r8[0x0],r10
8000aea0:	72 1a       	ld.w	r10,r9[0x4]
8000aea2:	91 1a       	st.w	r8[0x4],r10
8000aea4:	72 2a       	ld.w	r10,r9[0x8]
8000aea6:	91 2a       	st.w	r8[0x8],r10
8000aea8:	72 39       	ld.w	r9,r9[0xc]
8000aeaa:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000aeac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aeb0:	70 79       	ld.w	r9,r8[0x1c]
8000aeb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aeb6:	70 88       	ld.w	r8,r8[0x20]
8000aeb8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000aebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aec0:	f0 f8 00 80 	ld.w	r8,r8[128]
8000aec4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000aec8:	10 99       	mov	r9,r8
8000aeca:	ee 19 80 00 	eorh	r9,0x8000
8000aece:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aed2:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000aed4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aed8:	30 18       	mov	r8,1
8000aeda:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000aede:	fe cc 02 16 	sub	r12,pc,534
8000aee2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000aee6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aeea:	70 88       	ld.w	r8,r8[0x20]
8000aeec:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000aef0:	30 ab       	mov	r11,10
8000aef2:	10 9c       	mov	r12,r8
8000aef4:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000aef8:	fe cc 01 ec 	sub	r12,pc,492
8000aefc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000af00:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af04:	70 78       	ld.w	r8,r8[0x1c]
8000af06:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000af0a:	30 ab       	mov	r11,10
8000af0c:	10 9c       	mov	r12,r8
8000af0e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000af12:	fe cc 01 fe 	sub	r12,pc,510
8000af16:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000af1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af1e:	71 a8       	ld.w	r8,r8[0x68]
8000af20:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000af24:	30 ab       	mov	r11,10
8000af26:	10 9c       	mov	r12,r8
8000af28:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000af2c:	fe cc 02 14 	sub	r12,pc,532
8000af30:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000af34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af38:	f0 f8 00 80 	ld.w	r8,r8[128]
8000af3c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000af40:	30 ab       	mov	r11,10
8000af42:	10 9c       	mov	r12,r8
8000af44:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000af48:	fe cc 02 2c 	sub	r12,pc,556
8000af4c:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000af50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af54:	30 09       	mov	r9,0
8000af56:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000af5a:	30 08       	mov	r8,0
8000af5c:	ef 48 ff fc 	st.w	r7[-4],r8
8000af60:	c2 68       	rjmp	8000afac <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000af62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af6a:	2e f9       	sub	r9,-17
8000af6c:	30 0a       	mov	r10,0
8000af6e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000af72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af7a:	2e b9       	sub	r9,-21
8000af7c:	30 0a       	mov	r10,0
8000af7e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000af82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af8a:	2e 89       	sub	r9,-24
8000af8c:	30 0a       	mov	r10,0
8000af8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000af92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af9a:	2f 29       	sub	r9,-14
8000af9c:	30 0a       	mov	r10,0
8000af9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000afa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000afa6:	2f f8       	sub	r8,-1
8000afa8:	ef 48 ff fc 	st.w	r7[-4],r8
8000afac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000afb0:	58 28       	cp.w	r8,2
8000afb2:	fe 9a ff d8 	brle	8000af62 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000afb6:	2f cd       	sub	sp,-16
8000afb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000afbc:	80 00       	ld.sh	r0,r0[0x0]
8000afbe:	ac 82       	st.b	r6[0x0],r2

8000afc0 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000afc0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000afc4:	1a 97       	mov	r7,sp
8000afc6:	21 fd       	sub	sp,124
8000afc8:	fe f6 03 64 	ld.w	r6,pc[868]
8000afcc:	1e 26       	rsub	r6,pc
8000afce:	ef 4c ff 9c 	st.w	r7[-100],r12
8000afd2:	ef 4b ff 98 	st.w	r7[-104],r11
8000afd6:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000afda:	30 08       	mov	r8,0
8000afdc:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000afe0:	30 08       	mov	r8,0
8000afe2:	ef 48 ff fc 	st.w	r7[-4],r8
8000afe6:	c1 58       	rjmp	8000b010 <position_integration+0x50>
8000afe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000afec:	ee fa ff fc 	ld.w	r10,r7[-4]
8000aff0:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000aff4:	2f 2a       	sub	r10,-14
8000aff6:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000affa:	2f f8       	sub	r8,-1
8000affc:	a3 68       	lsl	r8,0x2
8000affe:	ee 08 00 08 	add	r8,r7,r8
8000b002:	f1 49 ff dc 	st.w	r8[-36],r9
8000b006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b00a:	2f f8       	sub	r8,-1
8000b00c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b010:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b014:	58 28       	cp.w	r8,2
8000b016:	fe 9a ff e9 	brle	8000afe8 <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000b01a:	ee ca 00 7c 	sub	r10,r7,124
8000b01e:	20 4d       	sub	sp,16
8000b020:	1a 98       	mov	r8,sp
8000b022:	ee c9 00 24 	sub	r9,r7,36
8000b026:	20 08       	sub	r8,0
8000b028:	20 09       	sub	r9,0
8000b02a:	72 0b       	ld.w	r11,r9[0x0]
8000b02c:	91 0b       	st.w	r8[0x0],r11
8000b02e:	72 1b       	ld.w	r11,r9[0x4]
8000b030:	91 1b       	st.w	r8[0x4],r11
8000b032:	72 2b       	ld.w	r11,r9[0x8]
8000b034:	91 2b       	st.w	r8[0x8],r11
8000b036:	72 39       	ld.w	r9,r9[0xc]
8000b038:	91 39       	st.w	r8[0xc],r9
8000b03a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b03e:	20 4d       	sub	sp,16
8000b040:	1a 98       	mov	r8,sp
8000b042:	20 08       	sub	r8,0
8000b044:	20 09       	sub	r9,0
8000b046:	72 0b       	ld.w	r11,r9[0x0]
8000b048:	91 0b       	st.w	r8[0x0],r11
8000b04a:	72 1b       	ld.w	r11,r9[0x4]
8000b04c:	91 1b       	st.w	r8[0x4],r11
8000b04e:	72 2b       	ld.w	r11,r9[0x8]
8000b050:	91 2b       	st.w	r8[0x8],r11
8000b052:	72 39       	ld.w	r9,r9[0xc]
8000b054:	91 39       	st.w	r8[0xc],r9
8000b056:	14 9c       	mov	r12,r10
8000b058:	fe b0 fb f2 	rcall	8000a83c <quat_global_to_local>
8000b05c:	2f 8d       	sub	sp,-32
8000b05e:	ee c8 00 14 	sub	r8,r7,20
8000b062:	ee c9 00 7c 	sub	r9,r7,124
8000b066:	20 08       	sub	r8,0
8000b068:	20 09       	sub	r9,0
8000b06a:	72 0a       	ld.w	r10,r9[0x0]
8000b06c:	91 0a       	st.w	r8[0x0],r10
8000b06e:	72 1a       	ld.w	r10,r9[0x4]
8000b070:	91 1a       	st.w	r8[0x4],r10
8000b072:	72 2a       	ld.w	r10,r9[0x8]
8000b074:	91 2a       	st.w	r8[0x8],r10
8000b076:	72 39       	ld.w	r9,r9[0xc]
8000b078:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000b07a:	30 08       	mov	r8,0
8000b07c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b080:	c8 c8       	rjmp	8000b198 <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000b082:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b086:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b08a:	2f f8       	sub	r8,-1
8000b08c:	a3 68       	lsl	r8,0x2
8000b08e:	ee 08 00 08 	add	r8,r7,r8
8000b092:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000b096:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b09a:	2f 59       	sub	r9,-11
8000b09c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000b0a0:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b0a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b0a8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b0ac:	2d f9       	sub	r9,-33
8000b0ae:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b0b2:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b0b6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b0ba:	2f ba       	sub	r10,-5
8000b0bc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b0c0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b0c4:	10 9c       	mov	r12,r8
8000b0c6:	f0 16 00 03 	mcall	r6[12]
8000b0ca:	e0 68 85 1f 	mov	r8,34079
8000b0ce:	ea 18 51 eb 	orh	r8,0x51eb
8000b0d2:	e0 69 9e b8 	mov	r9,40632
8000b0d6:	ea 19 40 23 	orh	r9,0x4023
8000b0da:	f0 16 00 02 	mcall	r6[8]
8000b0de:	14 98       	mov	r8,r10
8000b0e0:	16 99       	mov	r9,r11
8000b0e2:	10 9a       	mov	r10,r8
8000b0e4:	12 9b       	mov	r11,r9
8000b0e6:	f0 16 00 09 	mcall	r6[36]
8000b0ea:	18 9a       	mov	r10,r12
8000b0ec:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b0f0:	ea c9 ff d0 	sub	r9,r5,-48
8000b0f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000b0f8:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b0fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b100:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b104:	2f 59       	sub	r9,-11
8000b106:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b10a:	10 9c       	mov	r12,r8
8000b10c:	f0 16 00 03 	mcall	r6[12]
8000b110:	14 92       	mov	r2,r10
8000b112:	16 93       	mov	r3,r11
8000b114:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b118:	f0 16 00 03 	mcall	r6[12]
8000b11c:	30 08       	mov	r8,0
8000b11e:	fc 19 80 00 	movh	r9,0x8000
8000b122:	f0 16 00 02 	mcall	r6[8]
8000b126:	14 98       	mov	r8,r10
8000b128:	16 99       	mov	r9,r11
8000b12a:	10 9a       	mov	r10,r8
8000b12c:	12 9b       	mov	r11,r9
8000b12e:	30 08       	mov	r8,0
8000b130:	fc 19 3f f0 	movh	r9,0x3ff0
8000b134:	f0 16 00 05 	mcall	r6[20]
8000b138:	14 98       	mov	r8,r10
8000b13a:	16 99       	mov	r9,r11
8000b13c:	04 9a       	mov	r10,r2
8000b13e:	06 9b       	mov	r11,r3
8000b140:	f0 16 00 02 	mcall	r6[8]
8000b144:	14 98       	mov	r8,r10
8000b146:	16 99       	mov	r9,r11
8000b148:	10 92       	mov	r2,r8
8000b14a:	12 93       	mov	r3,r9
8000b14c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b150:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b154:	2d 09       	sub	r9,-48
8000b156:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b15a:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b15e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b162:	10 9c       	mov	r12,r8
8000b164:	f0 16 00 03 	mcall	r6[12]
8000b168:	14 98       	mov	r8,r10
8000b16a:	16 99       	mov	r9,r11
8000b16c:	04 9a       	mov	r10,r2
8000b16e:	06 9b       	mov	r11,r3
8000b170:	f0 16 00 05 	mcall	r6[20]
8000b174:	14 98       	mov	r8,r10
8000b176:	16 99       	mov	r9,r11
8000b178:	10 9a       	mov	r10,r8
8000b17a:	12 9b       	mov	r11,r9
8000b17c:	f0 16 00 09 	mcall	r6[36]
8000b180:	18 9a       	mov	r10,r12
8000b182:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b186:	ea c9 ff f5 	sub	r9,r5,-11
8000b18a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000b18e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b192:	2f f8       	sub	r8,-1
8000b194:	ef 48 ff fc 	st.w	r7[-4],r8
8000b198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b19c:	58 28       	cp.w	r8,2
8000b19e:	fe 9a ff 72 	brle	8000b082 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000b1a2:	30 08       	mov	r8,0
8000b1a4:	ef 48 ff ec 	st.w	r7[-20],r8
8000b1a8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b1ac:	70 b8       	ld.w	r8,r8[0x2c]
8000b1ae:	ef 48 ff f0 	st.w	r7[-16],r8
8000b1b2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b1b6:	70 c8       	ld.w	r8,r8[0x30]
8000b1b8:	ef 48 ff f4 	st.w	r7[-12],r8
8000b1bc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b1c0:	70 d8       	ld.w	r8,r8[0x34]
8000b1c2:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000b1c6:	ee ca 00 7c 	sub	r10,r7,124
8000b1ca:	20 4d       	sub	sp,16
8000b1cc:	1a 98       	mov	r8,sp
8000b1ce:	ee c9 00 14 	sub	r9,r7,20
8000b1d2:	20 08       	sub	r8,0
8000b1d4:	20 09       	sub	r9,0
8000b1d6:	72 0b       	ld.w	r11,r9[0x0]
8000b1d8:	91 0b       	st.w	r8[0x0],r11
8000b1da:	72 1b       	ld.w	r11,r9[0x4]
8000b1dc:	91 1b       	st.w	r8[0x4],r11
8000b1de:	72 2b       	ld.w	r11,r9[0x8]
8000b1e0:	91 2b       	st.w	r8[0x8],r11
8000b1e2:	72 39       	ld.w	r9,r9[0xc]
8000b1e4:	91 39       	st.w	r8[0xc],r9
8000b1e6:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b1ea:	20 4d       	sub	sp,16
8000b1ec:	1a 98       	mov	r8,sp
8000b1ee:	20 08       	sub	r8,0
8000b1f0:	20 09       	sub	r9,0
8000b1f2:	72 0b       	ld.w	r11,r9[0x0]
8000b1f4:	91 0b       	st.w	r8[0x0],r11
8000b1f6:	72 1b       	ld.w	r11,r9[0x4]
8000b1f8:	91 1b       	st.w	r8[0x4],r11
8000b1fa:	72 2b       	ld.w	r11,r9[0x8]
8000b1fc:	91 2b       	st.w	r8[0x8],r11
8000b1fe:	72 39       	ld.w	r9,r9[0xc]
8000b200:	91 39       	st.w	r8[0xc],r9
8000b202:	14 9c       	mov	r12,r10
8000b204:	fe b0 fb 9a 	rcall	8000a938 <quat_local_to_global>
8000b208:	2f 8d       	sub	sp,-32
8000b20a:	ee c8 00 24 	sub	r8,r7,36
8000b20e:	ee c9 00 7c 	sub	r9,r7,124
8000b212:	20 08       	sub	r8,0
8000b214:	20 09       	sub	r9,0
8000b216:	72 0a       	ld.w	r10,r9[0x0]
8000b218:	91 0a       	st.w	r8[0x0],r10
8000b21a:	72 1a       	ld.w	r10,r9[0x4]
8000b21c:	91 1a       	st.w	r8[0x4],r10
8000b21e:	72 2a       	ld.w	r10,r9[0x8]
8000b220:	91 2a       	st.w	r8[0x8],r10
8000b222:	72 39       	ld.w	r9,r9[0xc]
8000b224:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000b226:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000b22a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b22e:	91 e9       	st.w	r8[0x38],r9
8000b230:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b234:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b238:	91 f9       	st.w	r8[0x3c],r9
8000b23a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000b23e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b242:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b246:	30 08       	mov	r8,0
8000b248:	ef 48 ff fc 	st.w	r7[-4],r8
8000b24c:	c6 78       	rjmp	8000b31a <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000b24e:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b252:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b256:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b25a:	2e 89       	sub	r9,-24
8000b25c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b260:	10 9c       	mov	r12,r8
8000b262:	f0 16 00 03 	mcall	r6[12]
8000b266:	14 92       	mov	r2,r10
8000b268:	16 93       	mov	r3,r11
8000b26a:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b26e:	f0 16 00 03 	mcall	r6[12]
8000b272:	30 08       	mov	r8,0
8000b274:	fc 19 80 00 	movh	r9,0x8000
8000b278:	f0 16 00 02 	mcall	r6[8]
8000b27c:	14 98       	mov	r8,r10
8000b27e:	16 99       	mov	r9,r11
8000b280:	10 9a       	mov	r10,r8
8000b282:	12 9b       	mov	r11,r9
8000b284:	30 08       	mov	r8,0
8000b286:	fc 19 3f f0 	movh	r9,0x3ff0
8000b28a:	f0 16 00 05 	mcall	r6[20]
8000b28e:	14 98       	mov	r8,r10
8000b290:	16 99       	mov	r9,r11
8000b292:	04 9a       	mov	r10,r2
8000b294:	06 9b       	mov	r11,r3
8000b296:	f0 16 00 02 	mcall	r6[8]
8000b29a:	14 98       	mov	r8,r10
8000b29c:	16 99       	mov	r9,r11
8000b29e:	10 92       	mov	r2,r8
8000b2a0:	12 93       	mov	r3,r9
8000b2a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b2a6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b2aa:	2f 29       	sub	r9,-14
8000b2ac:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b2b0:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b2b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b2b8:	10 9c       	mov	r12,r8
8000b2ba:	f0 16 00 03 	mcall	r6[12]
8000b2be:	14 98       	mov	r8,r10
8000b2c0:	16 99       	mov	r9,r11
8000b2c2:	04 9a       	mov	r10,r2
8000b2c4:	06 9b       	mov	r11,r3
8000b2c6:	f0 16 00 05 	mcall	r6[20]
8000b2ca:	14 98       	mov	r8,r10
8000b2cc:	16 99       	mov	r9,r11
8000b2ce:	10 9a       	mov	r10,r8
8000b2d0:	12 9b       	mov	r11,r9
8000b2d2:	f0 16 00 09 	mcall	r6[36]
8000b2d6:	18 9a       	mov	r10,r12
8000b2d8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b2dc:	ea c9 ff e8 	sub	r9,r5,-24
8000b2e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000b2e4:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b2e8:	20 4d       	sub	sp,16
8000b2ea:	1a 98       	mov	r8,sp
8000b2ec:	20 08       	sub	r8,0
8000b2ee:	20 09       	sub	r9,0
8000b2f0:	72 0a       	ld.w	r10,r9[0x0]
8000b2f2:	91 0a       	st.w	r8[0x0],r10
8000b2f4:	72 1a       	ld.w	r10,r9[0x4]
8000b2f6:	91 1a       	st.w	r8[0x4],r10
8000b2f8:	72 2a       	ld.w	r10,r9[0x8]
8000b2fa:	91 2a       	st.w	r8[0x8],r10
8000b2fc:	72 39       	ld.w	r9,r9[0xc]
8000b2fe:	91 39       	st.w	r8[0xc],r9
8000b300:	f0 16 01 0b 	mcall	r6[1068]
8000b304:	2f cd       	sub	sp,-16
8000b306:	18 99       	mov	r9,r12
8000b308:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b30c:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b310:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b314:	2f f8       	sub	r8,-1
8000b316:	ef 48 ff fc 	st.w	r7[-4],r8
8000b31a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b31e:	58 28       	cp.w	r8,2
8000b320:	fe 9a ff 97 	brle	8000b24e <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000b324:	2e 1d       	sub	sp,-124
8000b326:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b32a:	00 00       	add	r0,r0
8000b32c:	80 00       	ld.sh	r0,r0[0x0]
8000b32e:	ae 50       	st.h	r7[0xa],r0
8000b330:	47 50       	lddsp	r0,sp[0x1d4]
8000b332:	53 20       	stdsp	sp[0xc8],r0
8000b334:	64 74       	ld.w	r4,r2[0x1c]
8000b336:	20 69       	sub	r9,6
8000b338:	73 20       	ld.w	r0,r9[0x48]
8000b33a:	74 6f       	ld.w	pc,r10[0x18]
8000b33c:	6f 20       	ld.w	r0,r7[0x48]
8000b33e:	73 6d       	ld.w	sp,r9[0x58]
8000b340:	61 6c       	ld.w	r12,r0[0x58]
8000b342:	6c 21       	ld.w	r1,r6[0x8]
	...

8000b346 <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000b346:	eb cd 40 e0 	pushm	r5-r7,lr
8000b34a:	1a 97       	mov	r7,sp
8000b34c:	fa cd 00 e4 	sub	sp,sp,228
8000b350:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000b354:	1e 26       	rsub	r6,pc
8000b356:	ef 4c ff 58 	st.w	r7[-168],r12
8000b35a:	ef 4b ff 54 	st.w	r7[-172],r11
8000b35e:	ef 4a ff 50 	st.w	r7[-176],r10
8000b362:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b366:	30 08       	mov	r8,0
8000b368:	ef 48 ff 84 	st.w	r7[-124],r8
8000b36c:	30 08       	mov	r8,0
8000b36e:	ef 48 ff 88 	st.w	r7[-120],r8
8000b372:	30 08       	mov	r8,0
8000b374:	ef 48 ff 8c 	st.w	r7[-116],r8
8000b378:	fc 18 3f 80 	movh	r8,0x3f80
8000b37c:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b380:	30 08       	mov	r8,0
8000b382:	ef 48 ff 74 	st.w	r7[-140],r8
8000b386:	30 08       	mov	r8,0
8000b388:	ef 48 ff 78 	st.w	r7[-136],r8
8000b38c:	30 08       	mov	r8,0
8000b38e:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b392:	fc 18 3f 80 	movh	r8,0x3f80
8000b396:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000b39a:	30 08       	mov	r8,0
8000b39c:	ef 48 ff 68 	st.w	r7[-152],r8
8000b3a0:	30 08       	mov	r8,0
8000b3a2:	ef 48 ff 6c 	st.w	r7[-148],r8
8000b3a6:	30 08       	mov	r8,0
8000b3a8:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000b3ac:	30 08       	mov	r8,0
8000b3ae:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000b3b2:	30 08       	mov	r8,0
8000b3b4:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000b3b8:	30 08       	mov	r8,0
8000b3ba:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000b3be:	30 08       	mov	r8,0
8000b3c0:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000b3c4:	30 08       	mov	r8,0
8000b3c6:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000b3ca:	30 08       	mov	r8,0
8000b3cc:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b3d0:	30 08       	mov	r8,0
8000b3d2:	ef 48 ff 60 	st.w	r7[-160],r8
8000b3d6:	30 08       	mov	r8,0
8000b3d8:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000b3dc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b3e0:	f1 38 00 29 	ld.ub	r8,r8[41]
8000b3e4:	58 08       	cp.w	r8,0
8000b3e6:	c6 40       	breq	8000b4ae <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000b3e8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b3ec:	2d c8       	sub	r8,-36
8000b3ee:	10 9c       	mov	r12,r8
8000b3f0:	f0 16 00 df 	mcall	r6[892]
8000b3f4:	18 98       	mov	r8,r12
8000b3f6:	58 08       	cp.w	r8,0
8000b3f8:	c2 70       	breq	8000b446 <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000b3fa:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b3fe:	f0 f9 00 80 	ld.w	r9,r8[128]
8000b402:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b406:	70 78       	ld.w	r8,r8[0x1c]
8000b408:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b40c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b410:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000b414:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b418:	70 78       	ld.w	r8,r8[0x1c]
8000b41a:	10 99       	mov	r9,r8
8000b41c:	ee 19 80 00 	eorh	r9,0x8000
8000b420:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b424:	71 a8       	ld.w	r8,r8[0x68]
8000b426:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b42a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b42e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b432:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b436:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000b43a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b43e:	70 a9       	ld.w	r9,r8[0x28]
8000b440:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b444:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000b446:	f0 16 00 27 	mcall	r6[156]
8000b44a:	18 99       	mov	r9,r12
8000b44c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b450:	70 a8       	ld.w	r8,r8[0x28]
8000b452:	f2 08 01 08 	sub	r8,r9,r8
8000b456:	10 9c       	mov	r12,r8
8000b458:	f0 16 00 4e 	mcall	r6[312]
8000b45c:	30 08       	mov	r8,0
8000b45e:	e0 69 40 00 	mov	r9,16384
8000b462:	ea 19 40 8f 	orh	r9,0x408f
8000b466:	f0 16 00 0c 	mcall	r6[48]
8000b46a:	14 98       	mov	r8,r10
8000b46c:	16 99       	mov	r9,r11
8000b46e:	10 9a       	mov	r10,r8
8000b470:	12 9b       	mov	r11,r9
8000b472:	f0 16 00 76 	mcall	r6[472]
8000b476:	18 98       	mov	r8,r12
8000b478:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b47c:	fc 18 3f 80 	movh	r8,0x3f80
8000b480:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b484:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b488:	71 49       	ld.w	r9,r8[0x50]
8000b48a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b48e:	71 a8       	ld.w	r8,r8[0x68]
8000b490:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b494:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b498:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b49c:	70 99       	ld.w	r9,r8[0x24]
8000b49e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4a2:	71 08       	ld.w	r8,r8[0x40]
8000b4a4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b4a8:	ef 48 ff e4 	st.w	r7[-28],r8
8000b4ac:	c0 78       	rjmp	8000b4ba <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b4ae:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b4b2:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b4b6:	f0 16 02 04 	mcall	r6[2064]
		}
	
		if (pos_est->init_gps_position)
8000b4ba:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4be:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b4c2:	58 08       	cp.w	r8,0
8000b4c4:	e0 80 01 9c 	breq	8000b7fc <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b4c8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4cc:	2e 08       	sub	r8,-32
8000b4ce:	10 9c       	mov	r12,r8
8000b4d0:	f0 16 00 8f 	mcall	r6[572]
8000b4d4:	18 98       	mov	r8,r12
8000b4d6:	58 08       	cp.w	r8,0
8000b4d8:	e0 80 01 07 	breq	8000b6e6 <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b4dc:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b4e0:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b4e4:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b4e8:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b4ec:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b4f0:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b4f4:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b4f8:	70 48       	ld.w	r8,r8[0x10]
8000b4fa:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b4fe:	30 08       	mov	r8,0
8000b500:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b504:	ee cc 00 e4 	sub	r12,r7,228
8000b508:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b50c:	20 7d       	sub	sp,28
8000b50e:	1a 99       	mov	r9,sp
8000b510:	12 9a       	mov	r10,r9
8000b512:	f0 cb ff 90 	sub	r11,r8,-112
8000b516:	f4 c8 00 00 	sub	r8,r10,0
8000b51a:	f6 c9 00 00 	sub	r9,r11,0
8000b51e:	72 0e       	ld.w	lr,r9[0x0]
8000b520:	91 0e       	st.w	r8[0x0],lr
8000b522:	72 1e       	ld.w	lr,r9[0x4]
8000b524:	91 1e       	st.w	r8[0x4],lr
8000b526:	72 2e       	ld.w	lr,r9[0x8]
8000b528:	91 2e       	st.w	r8[0x8],lr
8000b52a:	72 39       	ld.w	r9,r9[0xc]
8000b52c:	91 39       	st.w	r8[0xc],r9
8000b52e:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b532:	f4 e9 00 10 	st.d	r10[16],r8
8000b536:	76 68       	ld.w	r8,r11[0x18]
8000b538:	95 68       	st.w	r10[0x18],r8
8000b53a:	20 7d       	sub	sp,28
8000b53c:	1a 98       	mov	r8,sp
8000b53e:	10 9a       	mov	r10,r8
8000b540:	ee cb 00 3c 	sub	r11,r7,60
8000b544:	f4 c8 00 00 	sub	r8,r10,0
8000b548:	f6 c9 00 00 	sub	r9,r11,0
8000b54c:	72 0e       	ld.w	lr,r9[0x0]
8000b54e:	91 0e       	st.w	r8[0x0],lr
8000b550:	72 1e       	ld.w	lr,r9[0x4]
8000b552:	91 1e       	st.w	r8[0x4],lr
8000b554:	72 2e       	ld.w	lr,r9[0x8]
8000b556:	91 2e       	st.w	r8[0x8],lr
8000b558:	72 39       	ld.w	r9,r9[0xc]
8000b55a:	91 39       	st.w	r8[0xc],r9
8000b55c:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b560:	f4 e9 00 10 	st.d	r10[16],r8
8000b564:	76 68       	ld.w	r8,r11[0x18]
8000b566:	95 68       	st.w	r10[0x18],r8
8000b568:	f0 16 00 75 	mcall	r6[468]
8000b56c:	2f 2d       	sub	sp,-56
8000b56e:	ee cb 00 6c 	sub	r11,r7,108
8000b572:	ee ca 00 e4 	sub	r10,r7,228
8000b576:	f6 c8 00 00 	sub	r8,r11,0
8000b57a:	f4 c9 00 00 	sub	r9,r10,0
8000b57e:	72 0c       	ld.w	r12,r9[0x0]
8000b580:	91 0c       	st.w	r8[0x0],r12
8000b582:	72 1c       	ld.w	r12,r9[0x4]
8000b584:	91 1c       	st.w	r8[0x4],r12
8000b586:	72 2c       	ld.w	r12,r9[0x8]
8000b588:	91 2c       	st.w	r8[0x8],r12
8000b58a:	72 39       	ld.w	r9,r9[0xc]
8000b58c:	91 39       	st.w	r8[0xc],r9
8000b58e:	f6 c8 ff f0 	sub	r8,r11,-16
8000b592:	f4 c9 ff f0 	sub	r9,r10,-16
8000b596:	72 0c       	ld.w	r12,r9[0x0]
8000b598:	91 0c       	st.w	r8[0x0],r12
8000b59a:	72 1c       	ld.w	r12,r9[0x4]
8000b59c:	91 1c       	st.w	r8[0x4],r12
8000b59e:	72 2c       	ld.w	r12,r9[0x8]
8000b5a0:	91 2c       	st.w	r8[0x8],r12
8000b5a2:	72 39       	ld.w	r9,r9[0xc]
8000b5a4:	91 39       	st.w	r8[0xc],r9
8000b5a6:	f6 c8 ff e0 	sub	r8,r11,-32
8000b5aa:	f4 c9 ff e0 	sub	r9,r10,-32
8000b5ae:	72 0a       	ld.w	r10,r9[0x0]
8000b5b0:	91 0a       	st.w	r8[0x0],r10
8000b5b2:	72 1a       	ld.w	r10,r9[0x4]
8000b5b4:	91 1a       	st.w	r8[0x4],r10
8000b5b6:	72 2a       	ld.w	r10,r9[0x8]
8000b5b8:	91 2a       	st.w	r8[0x8],r10
8000b5ba:	72 39       	ld.w	r9,r9[0xc]
8000b5bc:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b5be:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b5c2:	71 18       	ld.w	r8,r8[0x44]
8000b5c4:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b5c8:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b5cc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b5d0:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b5d4:	f2 08 01 08 	sub	r8,r9,r8
8000b5d8:	10 9c       	mov	r12,r8
8000b5da:	f0 16 00 4e 	mcall	r6[312]
8000b5de:	30 08       	mov	r8,0
8000b5e0:	e0 69 40 00 	mov	r9,16384
8000b5e4:	ea 19 40 8f 	orh	r9,0x408f
8000b5e8:	f0 16 00 0c 	mcall	r6[48]
8000b5ec:	14 98       	mov	r8,r10
8000b5ee:	16 99       	mov	r9,r11
8000b5f0:	10 9a       	mov	r10,r8
8000b5f2:	12 9b       	mov	r11,r9
8000b5f4:	f0 16 00 09 	mcall	r6[36]
8000b5f8:	18 98       	mov	r8,r12
8000b5fa:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000b5fe:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b602:	f0 16 00 03 	mcall	r6[12]
8000b606:	14 98       	mov	r8,r10
8000b608:	16 99       	mov	r9,r11
8000b60a:	30 05       	mov	r5,0
8000b60c:	e0 6a a9 fc 	mov	r10,43516
8000b610:	ea 1a d2 f1 	orh	r10,0xd2f1
8000b614:	e0 6b 62 4d 	mov	r11,25165
8000b618:	ea 1b 3f 50 	orh	r11,0x3f50
8000b61c:	f0 16 00 20 	mcall	r6[128]
8000b620:	18 98       	mov	r8,r12
8000b622:	58 08       	cp.w	r8,0
8000b624:	c0 20       	breq	8000b628 <position_correction+0x2e2>
8000b626:	30 15       	mov	r5,1
8000b628:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b62c:	c5 90       	breq	8000b6de <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000b62e:	30 08       	mov	r8,0
8000b630:	ef 48 ff fc 	st.w	r7[-4],r8
8000b634:	c2 58       	rjmp	8000b67e <position_correction+0x338>
8000b636:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b63a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b63e:	a3 68       	lsl	r8,0x2
8000b640:	ee 08 00 08 	add	r8,r7,r8
8000b644:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000b648:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b64c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b650:	2d ca       	sub	r10,-36
8000b652:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b656:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b65a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b65e:	10 9c       	mov	r12,r8
8000b660:	f0 16 00 08 	mcall	r6[32]
8000b664:	18 98       	mov	r8,r12
8000b666:	10 9a       	mov	r10,r8
8000b668:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b66c:	ea c9 ff eb 	sub	r9,r5,-21
8000b670:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b674:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b678:	2f f8       	sub	r8,-1
8000b67a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b67e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b682:	58 28       	cp.w	r8,2
8000b684:	fe 9a ff d9 	brle	8000b636 <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000b688:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b68c:	f0 cb ff 70 	sub	r11,r8,-144
8000b690:	ee ca 00 6c 	sub	r10,r7,108
8000b694:	f6 c8 00 00 	sub	r8,r11,0
8000b698:	f4 c9 00 00 	sub	r9,r10,0
8000b69c:	72 0c       	ld.w	r12,r9[0x0]
8000b69e:	91 0c       	st.w	r8[0x0],r12
8000b6a0:	72 1c       	ld.w	r12,r9[0x4]
8000b6a2:	91 1c       	st.w	r8[0x4],r12
8000b6a4:	72 2c       	ld.w	r12,r9[0x8]
8000b6a6:	91 2c       	st.w	r8[0x8],r12
8000b6a8:	72 39       	ld.w	r9,r9[0xc]
8000b6aa:	91 39       	st.w	r8[0xc],r9
8000b6ac:	f6 c8 ff f0 	sub	r8,r11,-16
8000b6b0:	f4 c9 ff f0 	sub	r9,r10,-16
8000b6b4:	72 0c       	ld.w	r12,r9[0x0]
8000b6b6:	91 0c       	st.w	r8[0x0],r12
8000b6b8:	72 1c       	ld.w	r12,r9[0x4]
8000b6ba:	91 1c       	st.w	r8[0x4],r12
8000b6bc:	72 2c       	ld.w	r12,r9[0x8]
8000b6be:	91 2c       	st.w	r8[0x8],r12
8000b6c0:	72 39       	ld.w	r9,r9[0xc]
8000b6c2:	91 39       	st.w	r8[0xc],r9
8000b6c4:	f6 c8 ff e0 	sub	r8,r11,-32
8000b6c8:	f4 c9 ff e0 	sub	r9,r10,-32
8000b6cc:	72 0a       	ld.w	r10,r9[0x0]
8000b6ce:	91 0a       	st.w	r8[0x0],r10
8000b6d0:	72 1a       	ld.w	r10,r9[0x4]
8000b6d2:	91 1a       	st.w	r8[0x4],r10
8000b6d4:	72 2a       	ld.w	r10,r9[0x8]
8000b6d6:	91 2a       	st.w	r8[0x8],r10
8000b6d8:	72 39       	ld.w	r9,r9[0xc]
8000b6da:	91 39       	st.w	r8[0xc],r9
8000b6dc:	c0 58       	rjmp	8000b6e6 <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000b6de:	fe cc 03 ae 	sub	r12,pc,942
8000b6e2:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000b6e6:	f0 16 00 0e 	mcall	r6[56]
8000b6ea:	18 99       	mov	r9,r12
8000b6ec:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b6f0:	71 18       	ld.w	r8,r8[0x44]
8000b6f2:	10 19       	sub	r9,r8
8000b6f4:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000b6f8:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b6fc:	f0 16 00 4e 	mcall	r6[312]
8000b700:	30 08       	mov	r8,0
8000b702:	e0 69 40 00 	mov	r9,16384
8000b706:	ea 19 c0 8f 	orh	r9,0xc08f
8000b70a:	f0 16 00 0c 	mcall	r6[48]
8000b70e:	14 98       	mov	r8,r10
8000b710:	16 99       	mov	r9,r11
8000b712:	10 9a       	mov	r10,r8
8000b714:	12 9b       	mov	r11,r9
8000b716:	30 08       	mov	r8,0
8000b718:	fc 19 3f f0 	movh	r9,0x3ff0
8000b71c:	f0 16 00 05 	mcall	r6[20]
8000b720:	14 98       	mov	r8,r10
8000b722:	16 99       	mov	r9,r11
8000b724:	30 05       	mov	r5,0
8000b726:	30 0a       	mov	r10,0
8000b728:	30 0b       	mov	r11,0
8000b72a:	f0 16 00 20 	mcall	r6[128]
8000b72e:	18 98       	mov	r8,r12
8000b730:	58 08       	cp.w	r8,0
8000b732:	c0 20       	breq	8000b736 <position_correction+0x3f0>
8000b734:	30 15       	mov	r5,1
8000b736:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b73a:	c1 d0       	breq	8000b774 <position_correction+0x42e>
8000b73c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b740:	f0 16 00 4e 	mcall	r6[312]
8000b744:	30 08       	mov	r8,0
8000b746:	e0 69 40 00 	mov	r9,16384
8000b74a:	ea 19 c0 8f 	orh	r9,0xc08f
8000b74e:	f0 16 00 0c 	mcall	r6[48]
8000b752:	14 98       	mov	r8,r10
8000b754:	16 99       	mov	r9,r11
8000b756:	10 9a       	mov	r10,r8
8000b758:	12 9b       	mov	r11,r9
8000b75a:	30 08       	mov	r8,0
8000b75c:	fc 19 3f f0 	movh	r9,0x3ff0
8000b760:	f0 16 00 05 	mcall	r6[20]
8000b764:	14 98       	mov	r8,r10
8000b766:	16 99       	mov	r9,r11
8000b768:	10 9a       	mov	r10,r8
8000b76a:	12 9b       	mov	r11,r9
8000b76c:	f0 16 00 09 	mcall	r6[36]
8000b770:	18 98       	mov	r8,r12
8000b772:	c0 28       	rjmp	8000b776 <position_correction+0x430>
8000b774:	30 08       	mov	r8,0
8000b776:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000b77a:	fc 18 3f 80 	movh	r8,0x3f80
8000b77e:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000b782:	30 08       	mov	r8,0
8000b784:	ef 48 ff fc 	st.w	r7[-4],r8
8000b788:	c3 48       	rjmp	8000b7f0 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000b78a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b78e:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b792:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b796:	2d ca       	sub	r10,-36
8000b798:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b79c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b7a0:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b7a4:	2e 8b       	sub	r11,-24
8000b7a6:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b7aa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b7ae:	a3 68       	lsl	r8,0x2
8000b7b0:	ee 08 00 08 	add	r8,r7,r8
8000b7b4:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000b7b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7bc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b7c0:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b7c4:	2e ba       	sub	r10,-21
8000b7c6:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b7ca:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b7ce:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b7d2:	2f 2b       	sub	r11,-14
8000b7d4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b7d8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b7dc:	a3 68       	lsl	r8,0x2
8000b7de:	ee 08 00 08 	add	r8,r7,r8
8000b7e2:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000b7e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7ea:	2f f8       	sub	r8,-1
8000b7ec:	ef 48 ff fc 	st.w	r7[-4],r8
8000b7f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7f4:	58 28       	cp.w	r8,2
8000b7f6:	fe 9a ff ca 	brle	8000b78a <position_correction+0x444>
8000b7fa:	c2 b8       	rjmp	8000b850 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000b7fc:	ee fb ff 50 	ld.w	r11,r7[-176]
8000b800:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b804:	f0 16 00 de 	mcall	r6[888]
			for (i=0;i<2;i++){
8000b808:	30 08       	mov	r8,0
8000b80a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b80e:	c1 68       	rjmp	8000b83a <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000b810:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b814:	a3 68       	lsl	r8,0x2
8000b816:	ee 08 00 08 	add	r8,r7,r8
8000b81a:	30 09       	mov	r9,0
8000b81c:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000b820:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b824:	a3 68       	lsl	r8,0x2
8000b826:	ee 08 00 08 	add	r8,r7,r8
8000b82a:	30 09       	mov	r9,0
8000b82c:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000b830:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b834:	2f f8       	sub	r8,-1
8000b836:	ef 48 ff fc 	st.w	r7[-4],r8
8000b83a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b83e:	58 18       	cp.w	r8,1
8000b840:	fe 9a ff e8 	brle	8000b810 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000b844:	e0 68 cc cd 	mov	r8,52429
8000b848:	ea 18 3d cc 	orh	r8,0x3dcc
8000b84c:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b850:	30 08       	mov	r8,0
8000b852:	ef 48 ff fc 	st.w	r7[-4],r8
8000b856:	c2 e8       	rjmp	8000b8b2 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000b858:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b85c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b860:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b864:	2e 8a       	sub	r10,-24
8000b866:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b86a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b86e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b872:	2f db       	sub	r11,-3
8000b874:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b878:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b87c:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b880:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b884:	a3 68       	lsl	r8,0x2
8000b886:	ee 08 00 08 	add	r8,r7,r8
8000b88a:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000b88e:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b892:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b896:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b89a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b89e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8a2:	2e 89       	sub	r9,-24
8000b8a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b8a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8ac:	2f f8       	sub	r8,-1
8000b8ae:	ef 48 ff fc 	st.w	r7[-4],r8
8000b8b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8b6:	58 28       	cp.w	r8,2
8000b8b8:	fe 9a ff d0 	brle	8000b858 <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000b8bc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8c0:	71 a9       	ld.w	r9,r8[0x68]
8000b8c2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8c6:	70 6a       	ld.w	r10,r8[0x18]
8000b8c8:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b8cc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b8d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000b8d4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b8d8:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b8dc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b8e0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b8e4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8e8:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000b8ec:	30 08       	mov	r8,0
8000b8ee:	ef 48 ff fc 	st.w	r7[-4],r8
8000b8f2:	c1 68       	rjmp	8000b91e <position_correction+0x5d8>
8000b8f4:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b8f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8fc:	a3 68       	lsl	r8,0x2
8000b8fe:	ee 08 00 08 	add	r8,r7,r8
8000b902:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000b906:	f4 c8 ff ff 	sub	r8,r10,-1
8000b90a:	a3 68       	lsl	r8,0x2
8000b90c:	ee 08 00 08 	add	r8,r7,r8
8000b910:	f1 49 ff 74 	st.w	r8[-140],r9
8000b914:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b918:	2f f8       	sub	r8,-1
8000b91a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b91e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b922:	58 28       	cp.w	r8,2
8000b924:	fe 9a ff e8 	brle	8000b8f4 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b928:	30 08       	mov	r8,0
8000b92a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b92e:	c2 e8       	rjmp	8000b98a <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000b930:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b934:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b938:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b93c:	2f 2a       	sub	r10,-14
8000b93e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b942:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b946:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b94a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b94e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b952:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b956:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b95a:	2f f8       	sub	r8,-1
8000b95c:	a3 68       	lsl	r8,0x2
8000b95e:	ee 08 00 08 	add	r8,r7,r8
8000b962:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000b966:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b96a:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b96e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b972:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b976:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b97a:	2f 29       	sub	r9,-14
8000b97c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b980:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b984:	2f f8       	sub	r8,-1
8000b986:	ef 48 ff fc 	st.w	r7[-4],r8
8000b98a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b98e:	58 28       	cp.w	r8,2
8000b990:	fe 9a ff d0 	brle	8000b930 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000b994:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b998:	71 09       	ld.w	r9,r8[0x40]
8000b99a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b99e:	70 7a       	ld.w	r10,r8[0x1c]
8000b9a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b9a4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b9a8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b9ac:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b9b0:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b9b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b9b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9bc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b9c0:	f1 49 00 40 	st.w	r8[64],r9

	}
8000b9c4:	2c 7d       	sub	sp,-228
8000b9c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b9ca:	00 00       	add	r0,r0
8000b9cc:	80 00       	ld.sh	r0,r0[0x0]
8000b9ce:	b1 d8       	cbr	r8,0x11

8000b9d0 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000b9d0:	eb cd 40 80 	pushm	r7,lr
8000b9d4:	1a 97       	mov	r7,sp
8000b9d6:	20 5d       	sub	sp,20
8000b9d8:	18 9a       	mov	r10,r12
8000b9da:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000b9de:	30 08       	mov	r8,0
8000b9e0:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000b9e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b9e8:	70 08       	ld.w	r8,r8[0x0]
8000b9ea:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000b9ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b9f2:	2f c8       	sub	r8,-4
8000b9f4:	70 08       	ld.w	r8,r8[0x0]
8000b9f6:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000b9fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b9fe:	2f 88       	sub	r8,-8
8000ba00:	70 08       	ld.w	r8,r8[0x0]
8000ba02:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000ba06:	14 98       	mov	r8,r10
8000ba08:	ee c9 00 10 	sub	r9,r7,16
8000ba0c:	20 08       	sub	r8,0
8000ba0e:	20 09       	sub	r9,0
8000ba10:	72 0b       	ld.w	r11,r9[0x0]
8000ba12:	91 0b       	st.w	r8[0x0],r11
8000ba14:	72 1b       	ld.w	r11,r9[0x4]
8000ba16:	91 1b       	st.w	r8[0x4],r11
8000ba18:	72 2b       	ld.w	r11,r9[0x8]
8000ba1a:	91 2b       	st.w	r8[0x8],r11
8000ba1c:	72 39       	ld.w	r9,r9[0xc]
8000ba1e:	91 39       	st.w	r8[0xc],r9
}
8000ba20:	14 9c       	mov	r12,r10
8000ba22:	2f bd       	sub	sp,-20
8000ba24:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba28 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000ba28:	eb cd 40 80 	pushm	r7,lr
8000ba2c:	1a 97       	mov	r7,sp
8000ba2e:	20 3d       	sub	sp,12
8000ba30:	ef 4c ff f8 	st.w	r7[-8],r12
8000ba34:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000ba38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba3c:	70 09       	ld.w	r9,r8[0x0]
8000ba3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba42:	70 08       	ld.w	r8,r8[0x0]
8000ba44:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ba48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba4c:	2f c8       	sub	r8,-4
8000ba4e:	70 0a       	ld.w	r10,r8[0x0]
8000ba50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba54:	2f c8       	sub	r8,-4
8000ba56:	70 08       	ld.w	r8,r8[0x0]
8000ba58:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ba5c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ba60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba64:	2f 88       	sub	r8,-8
8000ba66:	70 0a       	ld.w	r10,r8[0x0]
8000ba68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ba6c:	2f 88       	sub	r8,-8
8000ba6e:	70 08       	ld.w	r8,r8[0x0]
8000ba70:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ba74:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ba78:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000ba7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ba80:	10 9c       	mov	r12,r8
8000ba82:	2f dd       	sub	sp,-12
8000ba84:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba88 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000ba88:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ba8c:	1a 97       	mov	r7,sp
8000ba8e:	20 7d       	sub	sp,28
8000ba90:	4b d6       	lddpc	r6,8000bb84 <quat_multi+0xfc>
8000ba92:	1e 26       	rsub	r6,pc
8000ba94:	ee c8 ff ec 	sub	r8,r7,-20
8000ba98:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000ba9a:	70 2a       	ld.w	r10,r8[0x8]
8000ba9c:	70 79       	ld.w	r9,r8[0x1c]
8000ba9e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000baa2:	70 3b       	ld.w	r11,r8[0xc]
8000baa4:	70 69       	ld.w	r9,r8[0x18]
8000baa6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000baaa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000baae:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000bab2:	70 3a       	ld.w	r10,r8[0xc]
8000bab4:	70 59       	ld.w	r9,r8[0x14]
8000bab6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000baba:	70 1b       	ld.w	r11,r8[0x4]
8000babc:	70 79       	ld.w	r9,r8[0x1c]
8000babe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bac2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bac6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000baca:	70 1a       	ld.w	r10,r8[0x4]
8000bacc:	70 69       	ld.w	r9,r8[0x18]
8000bace:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bad2:	70 2b       	ld.w	r11,r8[0x8]
8000bad4:	70 59       	ld.w	r9,r8[0x14]
8000bad6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bada:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bade:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000bae2:	70 4a       	ld.w	r10,r8[0x10]
8000bae4:	70 19       	ld.w	r9,r8[0x4]
8000bae6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000baea:	70 0b       	ld.w	r11,r8[0x0]
8000baec:	70 59       	ld.w	r9,r8[0x14]
8000baee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000baf2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000baf6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bafa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bafe:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000bb02:	70 4a       	ld.w	r10,r8[0x10]
8000bb04:	70 29       	ld.w	r9,r8[0x8]
8000bb06:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bb0a:	70 0b       	ld.w	r11,r8[0x0]
8000bb0c:	70 69       	ld.w	r9,r8[0x18]
8000bb0e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bb12:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bb16:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb1a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bb1e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000bb22:	70 4a       	ld.w	r10,r8[0x10]
8000bb24:	70 39       	ld.w	r9,r8[0xc]
8000bb26:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bb2a:	70 0b       	ld.w	r11,r8[0x0]
8000bb2c:	70 79       	ld.w	r9,r8[0x1c]
8000bb2e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bb32:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bb36:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bb3a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bb3e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000bb42:	70 0a       	ld.w	r10,r8[0x0]
8000bb44:	70 49       	ld.w	r9,r8[0x10]
8000bb46:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000bb4a:	f0 c9 ff f0 	sub	r9,r8,-16
8000bb4e:	2f c9       	sub	r9,-4
8000bb50:	2f c8       	sub	r8,-4
8000bb52:	12 9b       	mov	r11,r9
8000bb54:	10 9c       	mov	r12,r8
8000bb56:	c6 9f       	rcall	8000ba28 <scalar_product>
8000bb58:	18 98       	mov	r8,r12
8000bb5a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000bb5e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000bb62:	0a 98       	mov	r8,r5
8000bb64:	ee c9 00 1c 	sub	r9,r7,28
8000bb68:	20 08       	sub	r8,0
8000bb6a:	20 09       	sub	r9,0
8000bb6c:	72 0a       	ld.w	r10,r9[0x0]
8000bb6e:	91 0a       	st.w	r8[0x0],r10
8000bb70:	72 1a       	ld.w	r10,r9[0x4]
8000bb72:	91 1a       	st.w	r8[0x4],r10
8000bb74:	72 2a       	ld.w	r10,r9[0x8]
8000bb76:	91 2a       	st.w	r8[0x8],r10
8000bb78:	72 39       	ld.w	r9,r9[0xc]
8000bb7a:	91 39       	st.w	r8[0xc],r9
}
8000bb7c:	0a 9c       	mov	r12,r5
8000bb7e:	2f 9d       	sub	sp,-28
8000bb80:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bb84:	80 00       	ld.sh	r0,r0[0x0]
8000bb86:	b9 16       	ld.d	r6,--r12

8000bb88 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000bb88:	eb cd 40 80 	pushm	r7,lr
8000bb8c:	1a 97       	mov	r7,sp
8000bb8e:	20 5d       	sub	sp,20
8000bb90:	ee c9 ff f8 	sub	r9,r7,-8
8000bb94:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000bb96:	72 08       	ld.w	r8,r9[0x0]
8000bb98:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000bb9c:	30 08       	mov	r8,0
8000bb9e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bba2:	c1 58       	rjmp	8000bbcc <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000bba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bbac:	2f fb       	sub	r11,-1
8000bbae:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000bbb2:	ee 1b 80 00 	eorh	r11,0x8000
8000bbb6:	2f f8       	sub	r8,-1
8000bbb8:	a3 68       	lsl	r8,0x2
8000bbba:	ee 08 00 08 	add	r8,r7,r8
8000bbbe:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000bbc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbc6:	2f f8       	sub	r8,-1
8000bbc8:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbd0:	58 28       	cp.w	r8,2
8000bbd2:	fe 9a ff e9 	brle	8000bba4 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000bbd6:	14 98       	mov	r8,r10
8000bbd8:	ee c9 00 14 	sub	r9,r7,20
8000bbdc:	20 08       	sub	r8,0
8000bbde:	20 09       	sub	r9,0
8000bbe0:	72 0b       	ld.w	r11,r9[0x0]
8000bbe2:	91 0b       	st.w	r8[0x0],r11
8000bbe4:	72 1b       	ld.w	r11,r9[0x4]
8000bbe6:	91 1b       	st.w	r8[0x4],r11
8000bbe8:	72 2b       	ld.w	r11,r9[0x8]
8000bbea:	91 2b       	st.w	r8[0x8],r11
8000bbec:	72 39       	ld.w	r9,r9[0xc]
8000bbee:	91 39       	st.w	r8[0xc],r9
}
8000bbf0:	14 9c       	mov	r12,r10
8000bbf2:	2f bd       	sub	sp,-20
8000bbf4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbf8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000bbf8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bbfc:	1a 97       	mov	r7,sp
8000bbfe:	20 cd       	sub	sp,48
8000bc00:	4b c6       	lddpc	r6,8000bcf0 <quat_global_to_local+0xf8>
8000bc02:	1e 26       	rsub	r6,pc
8000bc04:	ee c5 ff ec 	sub	r5,r7,-20
8000bc08:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bc0a:	ee ca 00 10 	sub	r10,r7,16
8000bc0e:	20 4d       	sub	sp,16
8000bc10:	1a 98       	mov	r8,sp
8000bc12:	0a 99       	mov	r9,r5
8000bc14:	20 08       	sub	r8,0
8000bc16:	20 09       	sub	r9,0
8000bc18:	72 0b       	ld.w	r11,r9[0x0]
8000bc1a:	91 0b       	st.w	r8[0x0],r11
8000bc1c:	72 1b       	ld.w	r11,r9[0x4]
8000bc1e:	91 1b       	st.w	r8[0x4],r11
8000bc20:	72 2b       	ld.w	r11,r9[0x8]
8000bc22:	91 2b       	st.w	r8[0x8],r11
8000bc24:	72 39       	ld.w	r9,r9[0xc]
8000bc26:	91 39       	st.w	r8[0xc],r9
8000bc28:	14 9c       	mov	r12,r10
8000bc2a:	ca ff       	rcall	8000bb88 <quat_inv>
8000bc2c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000bc2e:	ee ca 00 20 	sub	r10,r7,32
8000bc32:	20 4d       	sub	sp,16
8000bc34:	1a 98       	mov	r8,sp
8000bc36:	ea c9 ff f0 	sub	r9,r5,-16
8000bc3a:	20 08       	sub	r8,0
8000bc3c:	20 09       	sub	r9,0
8000bc3e:	72 0b       	ld.w	r11,r9[0x0]
8000bc40:	91 0b       	st.w	r8[0x0],r11
8000bc42:	72 1b       	ld.w	r11,r9[0x4]
8000bc44:	91 1b       	st.w	r8[0x4],r11
8000bc46:	72 2b       	ld.w	r11,r9[0x8]
8000bc48:	91 2b       	st.w	r8[0x8],r11
8000bc4a:	72 39       	ld.w	r9,r9[0xc]
8000bc4c:	91 39       	st.w	r8[0xc],r9
8000bc4e:	20 4d       	sub	sp,16
8000bc50:	1a 98       	mov	r8,sp
8000bc52:	ee c9 00 10 	sub	r9,r7,16
8000bc56:	20 08       	sub	r8,0
8000bc58:	20 09       	sub	r9,0
8000bc5a:	72 0b       	ld.w	r11,r9[0x0]
8000bc5c:	91 0b       	st.w	r8[0x0],r11
8000bc5e:	72 1b       	ld.w	r11,r9[0x4]
8000bc60:	91 1b       	st.w	r8[0x4],r11
8000bc62:	72 2b       	ld.w	r11,r9[0x8]
8000bc64:	91 2b       	st.w	r8[0x8],r11
8000bc66:	72 39       	ld.w	r9,r9[0xc]
8000bc68:	91 39       	st.w	r8[0xc],r9
8000bc6a:	14 9c       	mov	r12,r10
8000bc6c:	c0 ef       	rcall	8000ba88 <quat_multi>
8000bc6e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000bc70:	ee ca 00 30 	sub	r10,r7,48
8000bc74:	20 4d       	sub	sp,16
8000bc76:	1a 98       	mov	r8,sp
8000bc78:	0a 99       	mov	r9,r5
8000bc7a:	20 08       	sub	r8,0
8000bc7c:	20 09       	sub	r9,0
8000bc7e:	72 0b       	ld.w	r11,r9[0x0]
8000bc80:	91 0b       	st.w	r8[0x0],r11
8000bc82:	72 1b       	ld.w	r11,r9[0x4]
8000bc84:	91 1b       	st.w	r8[0x4],r11
8000bc86:	72 2b       	ld.w	r11,r9[0x8]
8000bc88:	91 2b       	st.w	r8[0x8],r11
8000bc8a:	72 39       	ld.w	r9,r9[0xc]
8000bc8c:	91 39       	st.w	r8[0xc],r9
8000bc8e:	20 4d       	sub	sp,16
8000bc90:	1a 98       	mov	r8,sp
8000bc92:	ee c9 00 20 	sub	r9,r7,32
8000bc96:	20 08       	sub	r8,0
8000bc98:	20 09       	sub	r9,0
8000bc9a:	72 0b       	ld.w	r11,r9[0x0]
8000bc9c:	91 0b       	st.w	r8[0x0],r11
8000bc9e:	72 1b       	ld.w	r11,r9[0x4]
8000bca0:	91 1b       	st.w	r8[0x4],r11
8000bca2:	72 2b       	ld.w	r11,r9[0x8]
8000bca4:	91 2b       	st.w	r8[0x8],r11
8000bca6:	72 39       	ld.w	r9,r9[0xc]
8000bca8:	91 39       	st.w	r8[0xc],r9
8000bcaa:	14 9c       	mov	r12,r10
8000bcac:	ce ee       	rcall	8000ba88 <quat_multi>
8000bcae:	2f 8d       	sub	sp,-32
8000bcb0:	ee c8 00 20 	sub	r8,r7,32
8000bcb4:	ee c9 00 30 	sub	r9,r7,48
8000bcb8:	20 08       	sub	r8,0
8000bcba:	20 09       	sub	r9,0
8000bcbc:	72 0a       	ld.w	r10,r9[0x0]
8000bcbe:	91 0a       	st.w	r8[0x0],r10
8000bcc0:	72 1a       	ld.w	r10,r9[0x4]
8000bcc2:	91 1a       	st.w	r8[0x4],r10
8000bcc4:	72 2a       	ld.w	r10,r9[0x8]
8000bcc6:	91 2a       	st.w	r8[0x8],r10
8000bcc8:	72 39       	ld.w	r9,r9[0xc]
8000bcca:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000bccc:	06 98       	mov	r8,r3
8000bcce:	ee c9 00 20 	sub	r9,r7,32
8000bcd2:	20 08       	sub	r8,0
8000bcd4:	20 09       	sub	r9,0
8000bcd6:	72 0a       	ld.w	r10,r9[0x0]
8000bcd8:	91 0a       	st.w	r8[0x0],r10
8000bcda:	72 1a       	ld.w	r10,r9[0x4]
8000bcdc:	91 1a       	st.w	r8[0x4],r10
8000bcde:	72 2a       	ld.w	r10,r9[0x8]
8000bce0:	91 2a       	st.w	r8[0x8],r10
8000bce2:	72 39       	ld.w	r9,r9[0xc]
8000bce4:	91 39       	st.w	r8[0xc],r9
}
8000bce6:	06 9c       	mov	r12,r3
8000bce8:	2f 4d       	sub	sp,-48
8000bcea:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bcee:	00 00       	add	r0,r0
8000bcf0:	80 00       	ld.sh	r0,r0[0x0]
8000bcf2:	ba 86       	st.b	sp[0x0],r6

8000bcf4 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000bcf4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bcf8:	1a 97       	mov	r7,sp
8000bcfa:	20 cd       	sub	sp,48
8000bcfc:	4b c6       	lddpc	r6,8000bdec <quat_local_to_global+0xf8>
8000bcfe:	1e 26       	rsub	r6,pc
8000bd00:	ee c5 ff ec 	sub	r5,r7,-20
8000bd04:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bd06:	ee ca 00 10 	sub	r10,r7,16
8000bd0a:	20 4d       	sub	sp,16
8000bd0c:	1a 98       	mov	r8,sp
8000bd0e:	0a 99       	mov	r9,r5
8000bd10:	20 08       	sub	r8,0
8000bd12:	20 09       	sub	r9,0
8000bd14:	72 0b       	ld.w	r11,r9[0x0]
8000bd16:	91 0b       	st.w	r8[0x0],r11
8000bd18:	72 1b       	ld.w	r11,r9[0x4]
8000bd1a:	91 1b       	st.w	r8[0x4],r11
8000bd1c:	72 2b       	ld.w	r11,r9[0x8]
8000bd1e:	91 2b       	st.w	r8[0x8],r11
8000bd20:	72 39       	ld.w	r9,r9[0xc]
8000bd22:	91 39       	st.w	r8[0xc],r9
8000bd24:	14 9c       	mov	r12,r10
8000bd26:	c3 1f       	rcall	8000bb88 <quat_inv>
8000bd28:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000bd2a:	ee ca 00 20 	sub	r10,r7,32
8000bd2e:	20 4d       	sub	sp,16
8000bd30:	1a 98       	mov	r8,sp
8000bd32:	ea c9 ff f0 	sub	r9,r5,-16
8000bd36:	20 08       	sub	r8,0
8000bd38:	20 09       	sub	r9,0
8000bd3a:	72 0b       	ld.w	r11,r9[0x0]
8000bd3c:	91 0b       	st.w	r8[0x0],r11
8000bd3e:	72 1b       	ld.w	r11,r9[0x4]
8000bd40:	91 1b       	st.w	r8[0x4],r11
8000bd42:	72 2b       	ld.w	r11,r9[0x8]
8000bd44:	91 2b       	st.w	r8[0x8],r11
8000bd46:	72 39       	ld.w	r9,r9[0xc]
8000bd48:	91 39       	st.w	r8[0xc],r9
8000bd4a:	20 4d       	sub	sp,16
8000bd4c:	1a 98       	mov	r8,sp
8000bd4e:	0a 99       	mov	r9,r5
8000bd50:	20 08       	sub	r8,0
8000bd52:	20 09       	sub	r9,0
8000bd54:	72 0b       	ld.w	r11,r9[0x0]
8000bd56:	91 0b       	st.w	r8[0x0],r11
8000bd58:	72 1b       	ld.w	r11,r9[0x4]
8000bd5a:	91 1b       	st.w	r8[0x4],r11
8000bd5c:	72 2b       	ld.w	r11,r9[0x8]
8000bd5e:	91 2b       	st.w	r8[0x8],r11
8000bd60:	72 39       	ld.w	r9,r9[0xc]
8000bd62:	91 39       	st.w	r8[0xc],r9
8000bd64:	14 9c       	mov	r12,r10
8000bd66:	c9 1e       	rcall	8000ba88 <quat_multi>
8000bd68:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000bd6a:	ee ca 00 30 	sub	r10,r7,48
8000bd6e:	20 4d       	sub	sp,16
8000bd70:	1a 98       	mov	r8,sp
8000bd72:	ee c9 00 10 	sub	r9,r7,16
8000bd76:	20 08       	sub	r8,0
8000bd78:	20 09       	sub	r9,0
8000bd7a:	72 0b       	ld.w	r11,r9[0x0]
8000bd7c:	91 0b       	st.w	r8[0x0],r11
8000bd7e:	72 1b       	ld.w	r11,r9[0x4]
8000bd80:	91 1b       	st.w	r8[0x4],r11
8000bd82:	72 2b       	ld.w	r11,r9[0x8]
8000bd84:	91 2b       	st.w	r8[0x8],r11
8000bd86:	72 39       	ld.w	r9,r9[0xc]
8000bd88:	91 39       	st.w	r8[0xc],r9
8000bd8a:	20 4d       	sub	sp,16
8000bd8c:	1a 98       	mov	r8,sp
8000bd8e:	ee c9 00 20 	sub	r9,r7,32
8000bd92:	20 08       	sub	r8,0
8000bd94:	20 09       	sub	r9,0
8000bd96:	72 0b       	ld.w	r11,r9[0x0]
8000bd98:	91 0b       	st.w	r8[0x0],r11
8000bd9a:	72 1b       	ld.w	r11,r9[0x4]
8000bd9c:	91 1b       	st.w	r8[0x4],r11
8000bd9e:	72 2b       	ld.w	r11,r9[0x8]
8000bda0:	91 2b       	st.w	r8[0x8],r11
8000bda2:	72 39       	ld.w	r9,r9[0xc]
8000bda4:	91 39       	st.w	r8[0xc],r9
8000bda6:	14 9c       	mov	r12,r10
8000bda8:	c7 0e       	rcall	8000ba88 <quat_multi>
8000bdaa:	2f 8d       	sub	sp,-32
8000bdac:	ee c8 00 20 	sub	r8,r7,32
8000bdb0:	ee c9 00 30 	sub	r9,r7,48
8000bdb4:	20 08       	sub	r8,0
8000bdb6:	20 09       	sub	r9,0
8000bdb8:	72 0a       	ld.w	r10,r9[0x0]
8000bdba:	91 0a       	st.w	r8[0x0],r10
8000bdbc:	72 1a       	ld.w	r10,r9[0x4]
8000bdbe:	91 1a       	st.w	r8[0x4],r10
8000bdc0:	72 2a       	ld.w	r10,r9[0x8]
8000bdc2:	91 2a       	st.w	r8[0x8],r10
8000bdc4:	72 39       	ld.w	r9,r9[0xc]
8000bdc6:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000bdc8:	06 98       	mov	r8,r3
8000bdca:	ee c9 00 20 	sub	r9,r7,32
8000bdce:	20 08       	sub	r8,0
8000bdd0:	20 09       	sub	r9,0
8000bdd2:	72 0a       	ld.w	r10,r9[0x0]
8000bdd4:	91 0a       	st.w	r8[0x0],r10
8000bdd6:	72 1a       	ld.w	r10,r9[0x4]
8000bdd8:	91 1a       	st.w	r8[0x4],r10
8000bdda:	72 2a       	ld.w	r10,r9[0x8]
8000bddc:	91 2a       	st.w	r8[0x8],r10
8000bdde:	72 39       	ld.w	r9,r9[0xc]
8000bde0:	91 39       	st.w	r8[0xc],r9
}
8000bde2:	06 9c       	mov	r12,r3
8000bde4:	2f 4d       	sub	sp,-48
8000bde6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bdea:	00 00       	add	r0,r0
8000bdec:	80 00       	ld.sh	r0,r0[0x0]
8000bdee:	bb 82       	lsr	r2,0x1a

8000bdf0 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000bdf0:	eb cd 40 c0 	pushm	r6-r7,lr
8000bdf4:	1a 97       	mov	r7,sp
8000bdf6:	20 2d       	sub	sp,8
8000bdf8:	4b 26       	lddpc	r6,8000bec0 <fast_sqrt+0xd0>
8000bdfa:	1e 26       	rsub	r6,pc
8000bdfc:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000be00:	30 18       	mov	r8,1
8000be02:	ee fa ff f8 	ld.w	r10,r7[-8]
8000be06:	30 09       	mov	r9,0
8000be08:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000be0c:	e0 8c 00 03 	brvs	8000be12 <fast_sqrt+0x22>
8000be10:	c0 25       	brlt	8000be14 <fast_sqrt+0x24>
8000be12:	30 08       	mov	r8,0
8000be14:	5c 58       	castu.b	r8
8000be16:	c0 30       	breq	8000be1c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000be18:	30 08       	mov	r8,0
8000be1a:	c4 f8       	rjmp	8000beb8 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000be1c:	fc 18 3f 80 	movh	r8,0x3f80
8000be20:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000be24:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be28:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be2c:	f0 16 00 08 	mcall	r6[32]
8000be30:	18 98       	mov	r8,r12
8000be32:	10 99       	mov	r9,r8
8000be34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be38:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000be3c:	fc 18 3f 00 	movh	r8,0x3f00
8000be40:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000be44:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000be48:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be4c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be50:	f0 16 00 08 	mcall	r6[32]
8000be54:	18 98       	mov	r8,r12
8000be56:	10 99       	mov	r9,r8
8000be58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be5c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000be60:	fc 18 3f 00 	movh	r8,0x3f00
8000be64:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000be68:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000be6c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be70:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be74:	f0 16 00 08 	mcall	r6[32]
8000be78:	18 98       	mov	r8,r12
8000be7a:	10 99       	mov	r9,r8
8000be7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be80:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000be84:	fc 18 3f 00 	movh	r8,0x3f00
8000be88:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000be8c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000be90:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be94:	ee fc ff f8 	ld.w	r12,r7[-8]
8000be98:	f0 16 00 08 	mcall	r6[32]
8000be9c:	18 98       	mov	r8,r12
8000be9e:	10 99       	mov	r9,r8
8000bea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bea4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bea8:	fc 18 3f 00 	movh	r8,0x3f00
8000beac:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000beb0:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000beb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000beb8:	10 9c       	mov	r12,r8
8000beba:	2f ed       	sub	sp,-8
8000bebc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bec0:	80 00       	ld.sh	r0,r0[0x0]
8000bec2:	bc 7e       	st.h	lr[0xe],lr

8000bec4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000bec4:	eb cd 40 c0 	pushm	r6-r7,lr
8000bec8:	1a 97       	mov	r7,sp
8000beca:	20 6d       	sub	sp,24
8000becc:	49 e6       	lddpc	r6,8000bf44 <interpolate+0x80>
8000bece:	1e 26       	rsub	r6,pc
8000bed0:	ef 4c ff f8 	st.w	r7[-8],r12
8000bed4:	ef 4b ff f4 	st.w	r7[-12],r11
8000bed8:	ef 4a ff f0 	st.w	r7[-16],r10
8000bedc:	ef 49 ff ec 	st.w	r7[-20],r9
8000bee0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000bee4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bee8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000beec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000bef0:	c0 41       	brne	8000bef8 <interpolate+0x34>
	{
		return y1;
8000bef2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bef6:	c2 38       	rjmp	8000bf3c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000bef8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000befc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bf00:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000bf04:	ee fa ff f8 	ld.w	r10,r7[-8]
8000bf08:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf0c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000bf10:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bf14:	ee fa ff f0 	ld.w	r10,r7[-16]
8000bf18:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bf1c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bf20:	12 9b       	mov	r11,r9
8000bf22:	10 9c       	mov	r12,r8
8000bf24:	f0 16 00 08 	mcall	r6[32]
8000bf28:	18 98       	mov	r8,r12
8000bf2a:	10 99       	mov	r9,r8
8000bf2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bf30:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000bf34:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000bf38:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000bf3c:	10 9c       	mov	r12,r8
8000bf3e:	2f ad       	sub	sp,-24
8000bf40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bf44:	80 00       	ld.sh	r0,r0[0x0]
8000bf46:	bd 52       	asr	r2,0x1d
8000bf48:	49 6e       	lddpc	lr,8000bfa0 <qfInit+0x12>
8000bf4a:	69 74       	ld.w	r4,r4[0x5c]
8000bf4c:	69 61       	ld.w	r1,r4[0x58]
8000bf4e:	6c 20       	ld.w	r0,r6[0x8]
8000bf50:	79 61       	ld.w	r1,r12[0x58]
8000bf52:	77 3a       	ld.w	r10,r11[0x4c]
8000bf54:	00 00       	add	r0,r0
8000bf56:	00 00       	add	r0,r0
8000bf58:	20 3d       	sub	sp,12
8000bf5a:	20 61       	sub	r1,6
8000bf5c:	74 61       	ld.w	r1,r10[0x18]
8000bf5e:	6e 32       	ld.w	r2,r7[0xc]
8000bf60:	28 6d       	sub	sp,-488
8000bf62:	61 67       	ld.w	r7,r0[0x58]
8000bf64:	5f 79       	srpl	r9
8000bf66:	2c 6d       	sub	sp,-232
8000bf68:	61 67       	ld.w	r7,r0[0x58]
8000bf6a:	5f 78       	srpl	r8
8000bf6c:	29 20       	sub	r0,-110
8000bf6e:	3d 00       	mov	r0,-48
8000bf70:	20 2c       	sub	r12,2
8000bf72:	00 00       	add	r0,r0
8000bf74:	0a 00       	add	r0,r5
8000bf76:	00 00       	add	r0,r0
8000bf78:	46 72       	lddsp	r2,sp[0x19c]
8000bf7a:	6f 6e       	ld.w	lr,r7[0x58]
8000bf7c:	74 20       	ld.w	r0,r10[0x8]
8000bf7e:	6d 61       	ld.w	r1,r6[0x58]
8000bf80:	67 28       	ld.w	r8,r3[0x48]
8000bf82:	7a 29       	ld.w	r9,sp[0x8]
8000bf84:	20 28       	sub	r8,2
8000bf86:	2a 31       	sub	r1,-93
8000bf88:	30 30       	mov	r0,3
8000bf8a:	29 3a       	sub	r10,-109
	...

8000bf8e <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000bf8e:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000bf92:	1a 97       	mov	r7,sp
8000bf94:	20 5d       	sub	sp,20
8000bf96:	fe f6 03 46 	ld.w	r6,pc[838]
8000bf9a:	1e 26       	rsub	r6,pc
8000bf9c:	ef 4c ff f4 	st.w	r7[-12],r12
8000bfa0:	ef 4b ff f0 	st.w	r7[-16],r11
8000bfa4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000bfa8:	30 08       	mov	r8,0
8000bfaa:	ef 68 ff fb 	st.b	r7[-5],r8
8000bfae:	c2 c8       	rjmp	8000c006 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000bfb0:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000bfb4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bfb8:	a3 68       	lsl	r8,0x2
8000bfba:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bfbe:	f2 08 00 08 	add	r8,r9,r8
8000bfc2:	70 08       	ld.w	r8,r8[0x0]
8000bfc4:	10 9b       	mov	r11,r8
8000bfc6:	fc 1c 3f 80 	movh	r12,0x3f80
8000bfca:	f0 16 00 08 	mcall	r6[32]
8000bfce:	18 98       	mov	r8,r12
8000bfd0:	10 9a       	mov	r10,r8
8000bfd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bfd6:	ea c9 ff eb 	sub	r9,r5,-21
8000bfda:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000bfde:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bfe2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bfe6:	a3 68       	lsl	r8,0x2
8000bfe8:	ee fa ff ec 	ld.w	r10,r7[-20]
8000bfec:	f4 08 00 08 	add	r8,r10,r8
8000bff0:	70 0a       	ld.w	r10,r8[0x0]
8000bff2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bff6:	2f 49       	sub	r9,-12
8000bff8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000bffc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c000:	2f f8       	sub	r8,-1
8000c002:	ef 68 ff fb 	st.b	r7[-5],r8
8000c006:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c00a:	30 88       	mov	r8,8
8000c00c:	f0 09 18 00 	cp.b	r9,r8
8000c010:	fe 98 ff d0 	brls	8000bfb0 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c014:	30 08       	mov	r8,0
8000c016:	ef 68 ff fb 	st.b	r7[-5],r8
8000c01a:	c0 e8       	rjmp	8000c036 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000c01c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c020:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c024:	2d 09       	sub	r9,-48
8000c026:	30 0a       	mov	r10,0
8000c028:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c02c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c030:	2f f8       	sub	r8,-1
8000c032:	ef 68 ff fb 	st.b	r7[-5],r8
8000c036:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c03a:	30 28       	mov	r8,2
8000c03c:	f0 09 18 00 	cp.b	r9,r8
8000c040:	fe 98 ff ee 	brls	8000c01c <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000c044:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c048:	fc 19 3f 80 	movh	r9,0x3f80
8000c04c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c04e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c052:	30 09       	mov	r9,0
8000c054:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c056:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c05a:	30 09       	mov	r9,0
8000c05c:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000c05e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c062:	30 09       	mov	r9,0
8000c064:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000c066:	30 08       	mov	r8,0
8000c068:	ef 68 ff fb 	st.b	r7[-5],r8
8000c06c:	c2 a8       	rjmp	8000c0c0 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000c06e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c072:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000c076:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c07a:	2d 5a       	sub	r10,-43
8000c07c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000c080:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c084:	f0 cb ff fa 	sub	r11,r8,-6
8000c088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c08c:	2e bb       	sub	r11,-21
8000c08e:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c092:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c096:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c09a:	f0 cb ff fa 	sub	r11,r8,-6
8000c09e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0a2:	2f 4b       	sub	r11,-12
8000c0a4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c0a8:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000c0ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0b0:	2d c9       	sub	r9,-36
8000c0b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000c0b6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c0ba:	2f f8       	sub	r8,-1
8000c0bc:	ef 68 ff fb 	st.b	r7[-5],r8
8000c0c0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c0c4:	30 28       	mov	r8,2
8000c0c6:	f0 09 18 00 	cp.b	r9,r8
8000c0ca:	fe 98 ff d2 	brls	8000c06e <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000c0ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0d2:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c0d6:	10 9c       	mov	r12,r8
8000c0d8:	f0 16 00 03 	mcall	r6[12]
8000c0dc:	14 92       	mov	r2,r10
8000c0de:	16 93       	mov	r3,r11
8000c0e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0e4:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c0e8:	ee 18 80 00 	eorh	r8,0x8000
8000c0ec:	10 9c       	mov	r12,r8
8000c0ee:	f0 16 00 03 	mcall	r6[12]
8000c0f2:	04 98       	mov	r8,r2
8000c0f4:	06 99       	mov	r9,r3
8000c0f6:	f0 16 00 56 	mcall	r6[344]
8000c0fa:	14 98       	mov	r8,r10
8000c0fc:	16 99       	mov	r9,r11
8000c0fe:	10 9a       	mov	r10,r8
8000c100:	12 9b       	mov	r11,r9
8000c102:	f0 16 00 09 	mcall	r6[36]
8000c106:	18 98       	mov	r8,r12
8000c108:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000c10c:	fe cc 01 c4 	sub	r12,pc,452
8000c110:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000c114:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c118:	f0 16 00 03 	mcall	r6[12]
8000c11c:	30 08       	mov	r8,0
8000c11e:	fc 19 40 59 	movh	r9,0x4059
8000c122:	f0 16 00 02 	mcall	r6[8]
8000c126:	14 98       	mov	r8,r10
8000c128:	16 99       	mov	r9,r11
8000c12a:	10 9a       	mov	r10,r8
8000c12c:	12 9b       	mov	r11,r9
8000c12e:	f0 16 00 14 	mcall	r6[80]
8000c132:	18 98       	mov	r8,r12
8000c134:	30 ab       	mov	r11,10
8000c136:	10 9c       	mov	r12,r8
8000c138:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000c13c:	fe cc 01 e4 	sub	r12,pc,484
8000c140:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000c144:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c148:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c14c:	10 9c       	mov	r12,r8
8000c14e:	f0 16 00 03 	mcall	r6[12]
8000c152:	30 08       	mov	r8,0
8000c154:	fc 19 40 59 	movh	r9,0x4059
8000c158:	f0 16 00 02 	mcall	r6[8]
8000c15c:	14 98       	mov	r8,r10
8000c15e:	16 99       	mov	r9,r11
8000c160:	10 9a       	mov	r10,r8
8000c162:	12 9b       	mov	r11,r9
8000c164:	f0 16 00 14 	mcall	r6[80]
8000c168:	18 98       	mov	r8,r12
8000c16a:	30 ab       	mov	r11,10
8000c16c:	10 9c       	mov	r12,r8
8000c16e:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000c172:	fe cc 02 02 	sub	r12,pc,514
8000c176:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000c17a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c17e:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c182:	10 9c       	mov	r12,r8
8000c184:	f0 16 00 03 	mcall	r6[12]
8000c188:	30 08       	mov	r8,0
8000c18a:	fc 19 40 59 	movh	r9,0x4059
8000c18e:	f0 16 00 02 	mcall	r6[8]
8000c192:	14 98       	mov	r8,r10
8000c194:	16 99       	mov	r9,r11
8000c196:	10 9a       	mov	r10,r8
8000c198:	12 9b       	mov	r11,r9
8000c19a:	f0 16 00 14 	mcall	r6[80]
8000c19e:	18 98       	mov	r8,r12
8000c1a0:	30 ab       	mov	r11,10
8000c1a2:	10 9c       	mov	r12,r8
8000c1a4:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c1a8:	fe cc 02 34 	sub	r12,pc,564
8000c1ac:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000c1b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1b4:	f0 f9 00 98 	ld.w	r9,r8[152]
8000c1b8:	ec f8 03 88 	ld.w	r8,r6[904]
8000c1bc:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000c1be:	fe cc 02 46 	sub	r12,pc,582
8000c1c2:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000c1c6:	ec f8 03 88 	ld.w	r8,r6[904]
8000c1ca:	70 08       	ld.w	r8,r8[0x0]
8000c1cc:	10 9c       	mov	r12,r8
8000c1ce:	f0 16 00 03 	mcall	r6[12]
8000c1d2:	30 08       	mov	r8,0
8000c1d4:	fc 19 40 59 	movh	r9,0x4059
8000c1d8:	f0 16 00 02 	mcall	r6[8]
8000c1dc:	14 98       	mov	r8,r10
8000c1de:	16 99       	mov	r9,r11
8000c1e0:	10 9a       	mov	r10,r8
8000c1e2:	12 9b       	mov	r11,r9
8000c1e4:	f0 16 00 14 	mcall	r6[80]
8000c1e8:	18 98       	mov	r8,r12
8000c1ea:	30 ab       	mov	r11,10
8000c1ec:	10 9c       	mov	r12,r8
8000c1ee:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c1f2:	fe cc 02 7e 	sub	r12,pc,638
8000c1f6:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000c1fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c1fe:	f0 16 00 03 	mcall	r6[12]
8000c202:	30 08       	mov	r8,0
8000c204:	fc 19 40 00 	movh	r9,0x4000
8000c208:	f0 16 00 0c 	mcall	r6[48]
8000c20c:	14 98       	mov	r8,r10
8000c20e:	16 99       	mov	r9,r11
8000c210:	10 9a       	mov	r10,r8
8000c212:	12 9b       	mov	r11,r9
8000c214:	f0 16 00 b5 	mcall	r6[724]
8000c218:	14 98       	mov	r8,r10
8000c21a:	16 99       	mov	r9,r11
8000c21c:	10 9a       	mov	r10,r8
8000c21e:	12 9b       	mov	r11,r9
8000c220:	f0 16 00 09 	mcall	r6[36]
8000c224:	18 99       	mov	r9,r12
8000c226:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c22a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c22c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c230:	30 09       	mov	r9,0
8000c232:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c234:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c238:	30 09       	mov	r9,0
8000c23a:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000c23c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c240:	f0 16 00 03 	mcall	r6[12]
8000c244:	30 08       	mov	r8,0
8000c246:	fc 19 40 00 	movh	r9,0x4000
8000c24a:	f0 16 00 0c 	mcall	r6[48]
8000c24e:	14 98       	mov	r8,r10
8000c250:	16 99       	mov	r9,r11
8000c252:	10 9a       	mov	r10,r8
8000c254:	12 9b       	mov	r11,r9
8000c256:	f0 16 00 b3 	mcall	r6[716]
8000c25a:	14 98       	mov	r8,r10
8000c25c:	16 99       	mov	r9,r11
8000c25e:	10 9a       	mov	r10,r8
8000c260:	12 9b       	mov	r11,r9
8000c262:	f0 16 00 09 	mcall	r6[36]
8000c266:	18 99       	mov	r9,r12
8000c268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c26c:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000c26e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c272:	e0 69 51 ec 	mov	r9,20972
8000c276:	ea 19 3d b8 	orh	r9,0x3db8
8000c27a:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000c27e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c282:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c286:	fc 1b 41 70 	movh	r11,0x4170
8000c28a:	10 9c       	mov	r12,r8
8000c28c:	f0 16 00 08 	mcall	r6[32]
8000c290:	18 98       	mov	r8,r12
8000c292:	10 99       	mov	r9,r8
8000c294:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c298:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000c29c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2a0:	e0 69 cc cd 	mov	r9,52429
8000c2a4:	ea 19 3d cc 	orh	r9,0x3dcc
8000c2a8:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000c2ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2b0:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000c2b4:	fc 1b 41 70 	movh	r11,0x4170
8000c2b8:	10 9c       	mov	r12,r8
8000c2ba:	f0 16 00 08 	mcall	r6[32]
8000c2be:	18 98       	mov	r8,r12
8000c2c0:	10 99       	mov	r9,r8
8000c2c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2c6:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000c2ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c2ce:	30 18       	mov	r8,1
8000c2d0:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000c2d4:	2f bd       	sub	sp,-20
8000c2d6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c2da:	00 00       	add	r0,r0
8000c2dc:	80 00       	ld.sh	r0,r0[0x0]
8000c2de:	be 1e       	st.h	pc[0x2],lr

8000c2e0 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000c2e0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c2e4:	1a 97       	mov	r7,sp
8000c2e6:	fa cd 01 04 	sub	sp,sp,260
8000c2ea:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000c2ee:	1e 26       	rsub	r6,pc
8000c2f0:	ef 4c ff 18 	st.w	r7[-232],r12
8000c2f4:	ef 4b ff 14 	st.w	r7[-236],r11
8000c2f8:	ef 4a ff 10 	st.w	r7[-240],r10
8000c2fc:	12 98       	mov	r8,r9
8000c2fe:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000c302:	30 08       	mov	r8,0
8000c304:	ef 48 ff 1c 	st.w	r7[-228],r8
8000c308:	fc 18 3f 80 	movh	r8,0x3f80
8000c30c:	ef 48 ff 20 	st.w	r7[-224],r8
8000c310:	30 08       	mov	r8,0
8000c312:	ef 48 ff 24 	st.w	r7[-220],r8
8000c316:	30 08       	mov	r8,0
8000c318:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c31c:	30 08       	mov	r8,0
8000c31e:	ef 68 ff df 	st.b	r7[-33],r8
8000c322:	c0 c9       	rjmp	8000c53a <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000c324:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c328:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c32c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c330:	2e 29       	sub	r9,-30
8000c332:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c336:	10 9c       	mov	r12,r8
8000c338:	f0 16 00 03 	mcall	r6[12]
8000c33c:	e0 68 cc cd 	mov	r8,52429
8000c340:	ea 18 cc cc 	orh	r8,0xcccc
8000c344:	e0 69 cc cc 	mov	r9,52428
8000c348:	ea 19 3f ec 	orh	r9,0x3fec
8000c34c:	f0 16 00 02 	mcall	r6[8]
8000c350:	14 98       	mov	r8,r10
8000c352:	16 99       	mov	r9,r11
8000c354:	10 92       	mov	r2,r8
8000c356:	12 93       	mov	r3,r9
8000c358:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c35c:	a3 68       	lsl	r8,0x2
8000c35e:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c362:	f2 08 00 08 	add	r8,r9,r8
8000c366:	70 09       	ld.w	r9,r8[0x0]
8000c368:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c36c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c370:	2f 4a       	sub	r10,-12
8000c372:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c376:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c37a:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c37e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c382:	2e ba       	sub	r10,-21
8000c384:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c388:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c38c:	10 9c       	mov	r12,r8
8000c38e:	f0 16 00 03 	mcall	r6[12]
8000c392:	e0 68 99 9a 	mov	r8,39322
8000c396:	ea 18 99 99 	orh	r8,0x9999
8000c39a:	e0 69 99 99 	mov	r9,39321
8000c39e:	ea 19 3f b9 	orh	r9,0x3fb9
8000c3a2:	f0 16 00 02 	mcall	r6[8]
8000c3a6:	14 98       	mov	r8,r10
8000c3a8:	16 99       	mov	r9,r11
8000c3aa:	04 9a       	mov	r10,r2
8000c3ac:	06 9b       	mov	r11,r3
8000c3ae:	f0 16 00 05 	mcall	r6[20]
8000c3b2:	14 98       	mov	r8,r10
8000c3b4:	16 99       	mov	r9,r11
8000c3b6:	10 9a       	mov	r10,r8
8000c3b8:	12 9b       	mov	r11,r9
8000c3ba:	f0 16 00 09 	mcall	r6[36]
8000c3be:	18 9a       	mov	r10,r12
8000c3c0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c3c4:	ea c9 ff e2 	sub	r9,r5,-30
8000c3c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000c3cc:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c3d0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c3d4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c3d8:	2d f9       	sub	r9,-33
8000c3da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c3de:	10 9c       	mov	r12,r8
8000c3e0:	f0 16 00 03 	mcall	r6[12]
8000c3e4:	e0 68 8f 5c 	mov	r8,36700
8000c3e8:	ea 18 f5 c2 	orh	r8,0xf5c2
8000c3ec:	e0 69 5c 28 	mov	r9,23592
8000c3f0:	ea 19 3f ef 	orh	r9,0x3fef
8000c3f4:	f0 16 00 02 	mcall	r6[8]
8000c3f8:	14 98       	mov	r8,r10
8000c3fa:	16 99       	mov	r9,r11
8000c3fc:	10 92       	mov	r2,r8
8000c3fe:	12 93       	mov	r3,r9
8000c400:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c404:	2f d8       	sub	r8,-3
8000c406:	a3 68       	lsl	r8,0x2
8000c408:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c40c:	f2 08 00 08 	add	r8,r9,r8
8000c410:	70 09       	ld.w	r9,r8[0x0]
8000c412:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c416:	f0 ca ff fd 	sub	r10,r8,-3
8000c41a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c41e:	2f 4a       	sub	r10,-12
8000c420:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c424:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c428:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c42c:	f0 ca ff fd 	sub	r10,r8,-3
8000c430:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c434:	2e ba       	sub	r10,-21
8000c436:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c43a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c43e:	10 9c       	mov	r12,r8
8000c440:	f0 16 00 03 	mcall	r6[12]
8000c444:	e0 68 14 7b 	mov	r8,5243
8000c448:	ea 18 47 ae 	orh	r8,0x47ae
8000c44c:	e0 69 7a e1 	mov	r9,31457
8000c450:	ea 19 3f 94 	orh	r9,0x3f94
8000c454:	f0 16 00 02 	mcall	r6[8]
8000c458:	14 98       	mov	r8,r10
8000c45a:	16 99       	mov	r9,r11
8000c45c:	04 9a       	mov	r10,r2
8000c45e:	06 9b       	mov	r11,r3
8000c460:	f0 16 00 05 	mcall	r6[20]
8000c464:	14 98       	mov	r8,r10
8000c466:	16 99       	mov	r9,r11
8000c468:	10 9a       	mov	r10,r8
8000c46a:	12 9b       	mov	r11,r9
8000c46c:	f0 16 00 09 	mcall	r6[36]
8000c470:	18 9a       	mov	r10,r12
8000c472:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c476:	ea c9 ff df 	sub	r9,r5,-33
8000c47a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000c47e:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c482:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c486:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c48a:	2d c9       	sub	r9,-36
8000c48c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c490:	10 9c       	mov	r12,r8
8000c492:	f0 16 00 03 	mcall	r6[12]
8000c496:	e0 68 cc cd 	mov	r8,52429
8000c49a:	ea 18 cc cc 	orh	r8,0xcccc
8000c49e:	e0 69 cc cc 	mov	r9,52428
8000c4a2:	ea 19 3f ec 	orh	r9,0x3fec
8000c4a6:	f0 16 00 02 	mcall	r6[8]
8000c4aa:	14 98       	mov	r8,r10
8000c4ac:	16 99       	mov	r9,r11
8000c4ae:	10 92       	mov	r2,r8
8000c4b0:	12 93       	mov	r3,r9
8000c4b2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4b6:	2f a8       	sub	r8,-6
8000c4b8:	a3 68       	lsl	r8,0x2
8000c4ba:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c4be:	f2 08 00 08 	add	r8,r9,r8
8000c4c2:	70 09       	ld.w	r9,r8[0x0]
8000c4c4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4c8:	f0 ca ff fa 	sub	r10,r8,-6
8000c4cc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c4d0:	2f 4a       	sub	r10,-12
8000c4d2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c4d6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c4da:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4de:	f0 ca ff fa 	sub	r10,r8,-6
8000c4e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c4e6:	2e ba       	sub	r10,-21
8000c4e8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c4ec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c4f0:	10 9c       	mov	r12,r8
8000c4f2:	f0 16 00 03 	mcall	r6[12]
8000c4f6:	e0 68 99 9a 	mov	r8,39322
8000c4fa:	ea 18 99 99 	orh	r8,0x9999
8000c4fe:	e0 69 99 99 	mov	r9,39321
8000c502:	ea 19 3f b9 	orh	r9,0x3fb9
8000c506:	f0 16 00 02 	mcall	r6[8]
8000c50a:	14 98       	mov	r8,r10
8000c50c:	16 99       	mov	r9,r11
8000c50e:	04 9a       	mov	r10,r2
8000c510:	06 9b       	mov	r11,r3
8000c512:	f0 16 00 05 	mcall	r6[20]
8000c516:	14 98       	mov	r8,r10
8000c518:	16 99       	mov	r9,r11
8000c51a:	10 9a       	mov	r10,r8
8000c51c:	12 9b       	mov	r11,r9
8000c51e:	f0 16 00 09 	mcall	r6[36]
8000c522:	18 9a       	mov	r10,r12
8000c524:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c528:	ea c9 ff dc 	sub	r9,r5,-36
8000c52c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c530:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c534:	2f f8       	sub	r8,-1
8000c536:	ef 68 ff df 	st.b	r7[-33],r8
8000c53a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c53e:	30 28       	mov	r8,2
8000c540:	f0 09 18 00 	cp.b	r9,r8
8000c544:	fe 98 fe f0 	brls	8000c324 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c548:	30 08       	mov	r8,0
8000c54a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c54e:	30 08       	mov	r8,0
8000c550:	ef 48 ff 80 	st.w	r7[-128],r8
8000c554:	30 08       	mov	r8,0
8000c556:	ef 48 ff 84 	st.w	r7[-124],r8
8000c55a:	fc 18 bf 80 	movh	r8,0xbf80
8000c55e:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c562:	ee ca 00 94 	sub	r10,r7,148
8000c566:	20 4d       	sub	sp,16
8000c568:	1a 98       	mov	r8,sp
8000c56a:	ee c9 00 84 	sub	r9,r7,132
8000c56e:	20 08       	sub	r8,0
8000c570:	20 09       	sub	r9,0
8000c572:	72 0b       	ld.w	r11,r9[0x0]
8000c574:	91 0b       	st.w	r8[0x0],r11
8000c576:	72 1b       	ld.w	r11,r9[0x4]
8000c578:	91 1b       	st.w	r8[0x4],r11
8000c57a:	72 2b       	ld.w	r11,r9[0x8]
8000c57c:	91 2b       	st.w	r8[0x8],r11
8000c57e:	72 39       	ld.w	r9,r9[0xc]
8000c580:	91 39       	st.w	r8[0xc],r9
8000c582:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c586:	20 4d       	sub	sp,16
8000c588:	1a 98       	mov	r8,sp
8000c58a:	20 08       	sub	r8,0
8000c58c:	20 09       	sub	r9,0
8000c58e:	72 0b       	ld.w	r11,r9[0x0]
8000c590:	91 0b       	st.w	r8[0x0],r11
8000c592:	72 1b       	ld.w	r11,r9[0x4]
8000c594:	91 1b       	st.w	r8[0x4],r11
8000c596:	72 2b       	ld.w	r11,r9[0x8]
8000c598:	91 2b       	st.w	r8[0x8],r11
8000c59a:	72 39       	ld.w	r9,r9[0xc]
8000c59c:	91 39       	st.w	r8[0xc],r9
8000c59e:	14 9c       	mov	r12,r10
8000c5a0:	fe b0 fb 2c 	rcall	8000bbf8 <quat_global_to_local>
8000c5a4:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c5a6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5aa:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c5ae:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5b2:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c5b6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c5ba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5be:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c5c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5c6:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c5ca:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5ce:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c5d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5d6:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c5da:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5de:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c5e2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5e6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c5ea:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c5ee:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c5f2:	f0 16 00 03 	mcall	r6[12]
8000c5f6:	14 98       	mov	r8,r10
8000c5f8:	16 99       	mov	r9,r11
8000c5fa:	30 05       	mov	r5,0
8000c5fc:	e0 6a 8f 5b 	mov	r10,36699
8000c600:	ea 1a f5 c2 	orh	r10,0xf5c2
8000c604:	e0 6b 5c 28 	mov	r11,23592
8000c608:	ea 1b 3f df 	orh	r11,0x3fdf
8000c60c:	f0 16 00 20 	mcall	r6[128]
8000c610:	18 98       	mov	r8,r12
8000c612:	58 08       	cp.w	r8,0
8000c614:	c0 20       	breq	8000c618 <qfilter+0x338>
8000c616:	30 15       	mov	r5,1
8000c618:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c61c:	c7 30       	breq	8000c702 <qfilter+0x422>
8000c61e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c622:	f0 16 00 03 	mcall	r6[12]
8000c626:	30 05       	mov	r5,0
8000c628:	e0 68 d7 0b 	mov	r8,55051
8000c62c:	ea 18 70 a3 	orh	r8,0x70a3
8000c630:	e0 69 0a 3d 	mov	r9,2621
8000c634:	ea 19 3f fb 	orh	r9,0x3ffb
8000c638:	f0 16 00 20 	mcall	r6[128]
8000c63c:	18 98       	mov	r8,r12
8000c63e:	58 08       	cp.w	r8,0
8000c640:	c0 20       	breq	8000c644 <qfilter+0x364>
8000c642:	30 15       	mov	r5,1
8000c644:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c648:	c5 d0       	breq	8000c702 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000c64a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c64e:	fe b0 fb d1 	rcall	8000bdf0 <fast_sqrt>
8000c652:	18 98       	mov	r8,r12
8000c654:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000c658:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c65c:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c660:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c664:	10 9c       	mov	r12,r8
8000c666:	f0 16 00 08 	mcall	r6[32]
8000c66a:	18 98       	mov	r8,r12
8000c66c:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000c670:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c674:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c678:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c67c:	10 9c       	mov	r12,r8
8000c67e:	f0 16 00 08 	mcall	r6[32]
8000c682:	18 98       	mov	r8,r12
8000c684:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000c688:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c68c:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c690:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c694:	10 9c       	mov	r12,r8
8000c696:	f0 16 00 08 	mcall	r6[32]
8000c69a:	18 98       	mov	r8,r12
8000c69c:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000c6a0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000c6a4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c6a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c6ac:	ee fa ff b4 	ld.w	r10,r7[-76]
8000c6b0:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c6b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c6b8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c6bc:	ef 48 ff d0 	st.w	r7[-48],r8
8000c6c0:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000c6c4:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c6c8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c6cc:	ee fa ff ac 	ld.w	r10,r7[-84]
8000c6d0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c6d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c6d8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c6dc:	ef 48 ff d4 	st.w	r7[-44],r8
8000c6e0:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000c6e4:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c6e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c6ec:	ee fa ff b0 	ld.w	r10,r7[-80]
8000c6f0:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c6f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c6f8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c6fc:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c700:	c0 a8       	rjmp	8000c714 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000c702:	30 08       	mov	r8,0
8000c704:	ef 48 ff d0 	st.w	r7[-48],r8
8000c708:	30 08       	mov	r8,0
8000c70a:	ef 48 ff d4 	st.w	r7[-44],r8
8000c70e:	30 08       	mov	r8,0
8000c710:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000c714:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c718:	f0 c9 ff 70 	sub	r9,r8,-144
8000c71c:	ee c8 01 04 	sub	r8,r7,260
8000c720:	12 9b       	mov	r11,r9
8000c722:	10 9c       	mov	r12,r8
8000c724:	fe b0 f9 56 	rcall	8000b9d0 <quat_from_vector>
8000c728:	ee c8 00 74 	sub	r8,r7,116
8000c72c:	ee c9 01 04 	sub	r9,r7,260
8000c730:	20 08       	sub	r8,0
8000c732:	20 09       	sub	r9,0
8000c734:	72 0a       	ld.w	r10,r9[0x0]
8000c736:	91 0a       	st.w	r8[0x0],r10
8000c738:	72 1a       	ld.w	r10,r9[0x4]
8000c73a:	91 1a       	st.w	r8[0x4],r10
8000c73c:	72 2a       	ld.w	r10,r9[0x8]
8000c73e:	91 2a       	st.w	r8[0x8],r10
8000c740:	72 39       	ld.w	r9,r9[0xc]
8000c742:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000c744:	ee ca 00 c4 	sub	r10,r7,196
8000c748:	20 4d       	sub	sp,16
8000c74a:	1a 98       	mov	r8,sp
8000c74c:	ee c9 00 74 	sub	r9,r7,116
8000c750:	20 08       	sub	r8,0
8000c752:	20 09       	sub	r9,0
8000c754:	72 0b       	ld.w	r11,r9[0x0]
8000c756:	91 0b       	st.w	r8[0x0],r11
8000c758:	72 1b       	ld.w	r11,r9[0x4]
8000c75a:	91 1b       	st.w	r8[0x4],r11
8000c75c:	72 2b       	ld.w	r11,r9[0x8]
8000c75e:	91 2b       	st.w	r8[0x8],r11
8000c760:	72 39       	ld.w	r9,r9[0xc]
8000c762:	91 39       	st.w	r8[0xc],r9
8000c764:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c768:	20 4d       	sub	sp,16
8000c76a:	1a 98       	mov	r8,sp
8000c76c:	20 08       	sub	r8,0
8000c76e:	20 09       	sub	r9,0
8000c770:	72 0b       	ld.w	r11,r9[0x0]
8000c772:	91 0b       	st.w	r8[0x0],r11
8000c774:	72 1b       	ld.w	r11,r9[0x4]
8000c776:	91 1b       	st.w	r8[0x4],r11
8000c778:	72 2b       	ld.w	r11,r9[0x8]
8000c77a:	91 2b       	st.w	r8[0x8],r11
8000c77c:	72 39       	ld.w	r9,r9[0xc]
8000c77e:	91 39       	st.w	r8[0xc],r9
8000c780:	14 9c       	mov	r12,r10
8000c782:	fe b0 fa b9 	rcall	8000bcf4 <quat_local_to_global>
8000c786:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000c788:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000c78c:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c790:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c794:	ee fa ff 44 	ld.w	r10,r7[-188]
8000c798:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c79c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7a0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c7a4:	ee fa ff 48 	ld.w	r10,r7[-184]
8000c7a8:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000c7ac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7b0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c7b4:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c7b8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c7bc:	f0 16 00 03 	mcall	r6[12]
8000c7c0:	14 98       	mov	r8,r10
8000c7c2:	16 99       	mov	r9,r11
8000c7c4:	30 05       	mov	r5,0
8000c7c6:	e0 6a 14 7c 	mov	r10,5244
8000c7ca:	ea 1a 47 ae 	orh	r10,0x47ae
8000c7ce:	e0 6b 7a e1 	mov	r11,31457
8000c7d2:	ea 1b 3f c4 	orh	r11,0x3fc4
8000c7d6:	f0 16 00 20 	mcall	r6[128]
8000c7da:	18 98       	mov	r8,r12
8000c7dc:	58 08       	cp.w	r8,0
8000c7de:	c0 20       	breq	8000c7e2 <qfilter+0x502>
8000c7e0:	30 15       	mov	r5,1
8000c7e2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c7e6:	e0 80 00 c2 	breq	8000c96a <qfilter+0x68a>
8000c7ea:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c7ee:	f0 16 00 03 	mcall	r6[12]
8000c7f2:	30 05       	mov	r5,0
8000c7f4:	e0 68 51 ec 	mov	r8,20972
8000c7f8:	ea 18 1e b8 	orh	r8,0x1eb8
8000c7fc:	e0 69 eb 85 	mov	r9,60293
8000c800:	ea 19 40 09 	orh	r9,0x4009
8000c804:	f0 16 00 20 	mcall	r6[128]
8000c808:	18 98       	mov	r8,r12
8000c80a:	58 08       	cp.w	r8,0
8000c80c:	c0 20       	breq	8000c810 <qfilter+0x530>
8000c80e:	30 15       	mov	r5,1
8000c810:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c814:	e0 80 00 ab 	breq	8000c96a <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000c818:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c81c:	fe b0 fa ea 	rcall	8000bdf0 <fast_sqrt>
8000c820:	18 98       	mov	r8,r12
8000c822:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000c826:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c82a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c82e:	10 9c       	mov	r12,r8
8000c830:	f0 16 00 08 	mcall	r6[32]
8000c834:	18 98       	mov	r8,r12
8000c836:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000c83a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c83e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c842:	10 9c       	mov	r12,r8
8000c844:	f0 16 00 08 	mcall	r6[32]
8000c848:	18 98       	mov	r8,r12
8000c84a:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000c84e:	30 08       	mov	r8,0
8000c850:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000c854:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000c858:	ee ca 01 04 	sub	r10,r7,260
8000c85c:	20 4d       	sub	sp,16
8000c85e:	1a 98       	mov	r8,sp
8000c860:	ee c9 00 e4 	sub	r9,r7,228
8000c864:	20 08       	sub	r8,0
8000c866:	20 09       	sub	r9,0
8000c868:	72 0b       	ld.w	r11,r9[0x0]
8000c86a:	91 0b       	st.w	r8[0x0],r11
8000c86c:	72 1b       	ld.w	r11,r9[0x4]
8000c86e:	91 1b       	st.w	r8[0x4],r11
8000c870:	72 2b       	ld.w	r11,r9[0x8]
8000c872:	91 2b       	st.w	r8[0x8],r11
8000c874:	72 39       	ld.w	r9,r9[0xc]
8000c876:	91 39       	st.w	r8[0xc],r9
8000c878:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c87c:	20 4d       	sub	sp,16
8000c87e:	1a 98       	mov	r8,sp
8000c880:	20 08       	sub	r8,0
8000c882:	20 09       	sub	r9,0
8000c884:	72 0b       	ld.w	r11,r9[0x0]
8000c886:	91 0b       	st.w	r8[0x0],r11
8000c888:	72 1b       	ld.w	r11,r9[0x4]
8000c88a:	91 1b       	st.w	r8[0x4],r11
8000c88c:	72 2b       	ld.w	r11,r9[0x8]
8000c88e:	91 2b       	st.w	r8[0x8],r11
8000c890:	72 39       	ld.w	r9,r9[0xc]
8000c892:	91 39       	st.w	r8[0xc],r9
8000c894:	14 9c       	mov	r12,r10
8000c896:	fe b0 f9 b1 	rcall	8000bbf8 <quat_global_to_local>
8000c89a:	2f 8d       	sub	sp,-32
8000c89c:	ea c8 ff e0 	sub	r8,r5,-32
8000c8a0:	ee c9 01 04 	sub	r9,r7,260
8000c8a4:	20 08       	sub	r8,0
8000c8a6:	20 09       	sub	r9,0
8000c8a8:	72 0a       	ld.w	r10,r9[0x0]
8000c8aa:	91 0a       	st.w	r8[0x0],r10
8000c8ac:	72 1a       	ld.w	r10,r9[0x4]
8000c8ae:	91 1a       	st.w	r8[0x4],r10
8000c8b0:	72 2a       	ld.w	r10,r9[0x8]
8000c8b2:	91 2a       	st.w	r8[0x8],r10
8000c8b4:	72 39       	ld.w	r9,r9[0xc]
8000c8b6:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000c8b8:	ee ca 00 d4 	sub	r10,r7,212
8000c8bc:	20 4d       	sub	sp,16
8000c8be:	1a 98       	mov	r8,sp
8000c8c0:	ee c9 00 c4 	sub	r9,r7,196
8000c8c4:	20 08       	sub	r8,0
8000c8c6:	20 09       	sub	r9,0
8000c8c8:	72 0b       	ld.w	r11,r9[0x0]
8000c8ca:	91 0b       	st.w	r8[0x0],r11
8000c8cc:	72 1b       	ld.w	r11,r9[0x4]
8000c8ce:	91 1b       	st.w	r8[0x4],r11
8000c8d0:	72 2b       	ld.w	r11,r9[0x8]
8000c8d2:	91 2b       	st.w	r8[0x8],r11
8000c8d4:	72 39       	ld.w	r9,r9[0xc]
8000c8d6:	91 39       	st.w	r8[0xc],r9
8000c8d8:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c8dc:	20 4d       	sub	sp,16
8000c8de:	1a 98       	mov	r8,sp
8000c8e0:	20 08       	sub	r8,0
8000c8e2:	20 09       	sub	r9,0
8000c8e4:	72 0b       	ld.w	r11,r9[0x0]
8000c8e6:	91 0b       	st.w	r8[0x0],r11
8000c8e8:	72 1b       	ld.w	r11,r9[0x4]
8000c8ea:	91 1b       	st.w	r8[0x4],r11
8000c8ec:	72 2b       	ld.w	r11,r9[0x8]
8000c8ee:	91 2b       	st.w	r8[0x8],r11
8000c8f0:	72 39       	ld.w	r9,r9[0xc]
8000c8f2:	91 39       	st.w	r8[0xc],r9
8000c8f4:	14 9c       	mov	r12,r10
8000c8f6:	fe b0 f9 81 	rcall	8000bbf8 <quat_global_to_local>
8000c8fa:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000c8fc:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000c900:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c904:	70 b8       	ld.w	r8,r8[0x2c]
8000c906:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c90a:	ee fa ff 38 	ld.w	r10,r7[-200]
8000c90e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c912:	70 a8       	ld.w	r8,r8[0x28]
8000c914:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c918:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c91c:	ef 48 ff c4 	st.w	r7[-60],r8
8000c920:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000c924:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c928:	70 98       	ld.w	r8,r8[0x24]
8000c92a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c92e:	ee fa ff 30 	ld.w	r10,r7[-208]
8000c932:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c936:	70 b8       	ld.w	r8,r8[0x2c]
8000c938:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c93c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c940:	ef 48 ff c8 	st.w	r7[-56],r8
8000c944:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000c948:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c94c:	70 a8       	ld.w	r8,r8[0x28]
8000c94e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c952:	ee fa ff 34 	ld.w	r10,r7[-204]
8000c956:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c95a:	70 98       	ld.w	r8,r8[0x24]
8000c95c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c960:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c964:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c968:	c0 a8       	rjmp	8000c97c <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000c96a:	30 08       	mov	r8,0
8000c96c:	ef 48 ff c4 	st.w	r7[-60],r8
8000c970:	30 08       	mov	r8,0
8000c972:	ef 48 ff c8 	st.w	r7[-56],r8
8000c976:	30 08       	mov	r8,0
8000c978:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000c97c:	30 08       	mov	r8,0
8000c97e:	ef 68 ff df 	st.b	r7[-33],r8
8000c982:	c3 48       	rjmp	8000c9ea <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000c984:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c988:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c98c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c990:	2e 29       	sub	r9,-30
8000c992:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000c996:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c99a:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000c99e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c9a2:	a3 68       	lsl	r8,0x2
8000c9a4:	ee 08 00 08 	add	r8,r7,r8
8000c9a8:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000c9ac:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c9b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c9b4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9b8:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000c9bc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c9c0:	a3 68       	lsl	r8,0x2
8000c9c2:	ee 08 00 08 	add	r8,r7,r8
8000c9c6:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000c9ca:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c9ce:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c9d2:	f4 c8 ff ff 	sub	r8,r10,-1
8000c9d6:	a3 68       	lsl	r8,0x2
8000c9d8:	ee 08 00 08 	add	r8,r7,r8
8000c9dc:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000c9e0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c9e4:	2f f8       	sub	r8,-1
8000c9e6:	ef 68 ff df 	st.b	r7[-33],r8
8000c9ea:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c9ee:	30 28       	mov	r8,2
8000c9f0:	f0 09 18 00 	cp.b	r9,r8
8000c9f4:	fe 98 ff c8 	brls	8000c984 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000c9f8:	30 08       	mov	r8,0
8000c9fa:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000c9fe:	ee ca 00 64 	sub	r10,r7,100
8000ca02:	20 4d       	sub	sp,16
8000ca04:	1a 98       	mov	r8,sp
8000ca06:	ee c9 00 74 	sub	r9,r7,116
8000ca0a:	20 08       	sub	r8,0
8000ca0c:	20 09       	sub	r9,0
8000ca0e:	72 0b       	ld.w	r11,r9[0x0]
8000ca10:	91 0b       	st.w	r8[0x0],r11
8000ca12:	72 1b       	ld.w	r11,r9[0x4]
8000ca14:	91 1b       	st.w	r8[0x4],r11
8000ca16:	72 2b       	ld.w	r11,r9[0x8]
8000ca18:	91 2b       	st.w	r8[0x8],r11
8000ca1a:	72 39       	ld.w	r9,r9[0xc]
8000ca1c:	91 39       	st.w	r8[0xc],r9
8000ca1e:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ca22:	20 4d       	sub	sp,16
8000ca24:	1a 98       	mov	r8,sp
8000ca26:	20 08       	sub	r8,0
8000ca28:	20 09       	sub	r9,0
8000ca2a:	72 0b       	ld.w	r11,r9[0x0]
8000ca2c:	91 0b       	st.w	r8[0x0],r11
8000ca2e:	72 1b       	ld.w	r11,r9[0x4]
8000ca30:	91 1b       	st.w	r8[0x4],r11
8000ca32:	72 2b       	ld.w	r11,r9[0x8]
8000ca34:	91 2b       	st.w	r8[0x8],r11
8000ca36:	72 39       	ld.w	r9,r9[0xc]
8000ca38:	91 39       	st.w	r8[0xc],r9
8000ca3a:	14 9c       	mov	r12,r10
8000ca3c:	fe b0 f8 26 	rcall	8000ba88 <quat_multi>
8000ca40:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000ca42:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca46:	70 09       	ld.w	r9,r8[0x0]
8000ca48:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000ca4c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ca50:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ca54:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ca58:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca5c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000ca5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca62:	70 19       	ld.w	r9,r8[0x4]
8000ca64:	ee fa ff a0 	ld.w	r10,r7[-96]
8000ca68:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ca6c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ca70:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ca74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca78:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000ca7a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca7e:	70 29       	ld.w	r9,r8[0x8]
8000ca80:	ee fa ff a4 	ld.w	r10,r7[-92]
8000ca84:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ca88:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ca8c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ca90:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca94:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000ca96:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca9a:	70 39       	ld.w	r9,r8[0xc]
8000ca9c:	ee fa ff a8 	ld.w	r10,r7[-88]
8000caa0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000caa4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000caa8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000caac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cab0:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000cab2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cab6:	70 09       	ld.w	r9,r8[0x0]
8000cab8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cabc:	70 08       	ld.w	r8,r8[0x0]
8000cabe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cac2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cac6:	70 1a       	ld.w	r10,r8[0x4]
8000cac8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cacc:	70 18       	ld.w	r8,r8[0x4]
8000cace:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cad2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cad6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cada:	70 2a       	ld.w	r10,r8[0x8]
8000cadc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cae0:	70 28       	ld.w	r8,r8[0x8]
8000cae2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cae6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000caea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000caee:	70 3a       	ld.w	r10,r8[0xc]
8000caf0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000caf4:	70 38       	ld.w	r8,r8[0xc]
8000caf6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cafa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cafe:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000cb02:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cb06:	f0 16 00 03 	mcall	r6[12]
8000cb0a:	30 05       	mov	r5,0
8000cb0c:	e0 68 43 2d 	mov	r8,17197
8000cb10:	ea 18 eb 1c 	orh	r8,0xeb1c
8000cb14:	e0 69 36 e2 	mov	r9,14050
8000cb18:	ea 19 3f 1a 	orh	r9,0x3f1a
8000cb1c:	f0 16 00 20 	mcall	r6[128]
8000cb20:	18 98       	mov	r8,r12
8000cb22:	58 08       	cp.w	r8,0
8000cb24:	c0 20       	breq	8000cb28 <qfilter+0x848>
8000cb26:	30 15       	mov	r5,1
8000cb28:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cb2c:	c0 80       	breq	8000cb3c <qfilter+0x85c>
8000cb2e:	e0 68 d7 0a 	mov	r8,55050
8000cb32:	ea 18 3c 23 	orh	r8,0x3c23
8000cb36:	ef 48 ff e4 	st.w	r7[-28],r8
8000cb3a:	c0 88       	rjmp	8000cb4a <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000cb3c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cb40:	fe b0 f9 58 	rcall	8000bdf0 <fast_sqrt>
8000cb44:	18 98       	mov	r8,r12
8000cb46:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000cb4a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb4e:	70 08       	ld.w	r8,r8[0x0]
8000cb50:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cb54:	10 9c       	mov	r12,r8
8000cb56:	f0 16 00 08 	mcall	r6[32]
8000cb5a:	18 98       	mov	r8,r12
8000cb5c:	10 99       	mov	r9,r8
8000cb5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb62:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000cb64:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb68:	70 18       	ld.w	r8,r8[0x4]
8000cb6a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cb6e:	10 9c       	mov	r12,r8
8000cb70:	f0 16 00 08 	mcall	r6[32]
8000cb74:	18 98       	mov	r8,r12
8000cb76:	10 99       	mov	r9,r8
8000cb78:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb7c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000cb7e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb82:	70 28       	ld.w	r8,r8[0x8]
8000cb84:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cb88:	10 9c       	mov	r12,r8
8000cb8a:	f0 16 00 08 	mcall	r6[32]
8000cb8e:	18 98       	mov	r8,r12
8000cb90:	10 99       	mov	r9,r8
8000cb92:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb96:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000cb98:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb9c:	70 38       	ld.w	r8,r8[0xc]
8000cb9e:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cba2:	10 9c       	mov	r12,r8
8000cba4:	f0 16 00 08 	mcall	r6[32]
8000cba8:	18 98       	mov	r8,r12
8000cbaa:	10 99       	mov	r9,r8
8000cbac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbb0:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000cbb2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbb6:	70 c5       	ld.w	r5,r8[0x30]
8000cbb8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cbbc:	10 99       	mov	r9,r8
8000cbbe:	ee 19 80 00 	eorh	r9,0x8000
8000cbc2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbc6:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cbca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cbce:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000cbd2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cbd6:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cbda:	73 59       	ld.w	r9,r9[0x54]
8000cbdc:	12 9b       	mov	r11,r9
8000cbde:	10 9c       	mov	r12,r8
8000cbe0:	f0 16 00 08 	mcall	r6[32]
8000cbe4:	18 98       	mov	r8,r12
8000cbe6:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cbea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbee:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000cbf0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbf4:	70 d5       	ld.w	r5,r8[0x34]
8000cbf6:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cbfa:	10 99       	mov	r9,r8
8000cbfc:	ee 19 80 00 	eorh	r9,0x8000
8000cc00:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc04:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cc08:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cc0c:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000cc10:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cc14:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cc18:	73 69       	ld.w	r9,r9[0x58]
8000cc1a:	12 9b       	mov	r11,r9
8000cc1c:	10 9c       	mov	r12,r8
8000cc1e:	f0 16 00 08 	mcall	r6[32]
8000cc22:	18 98       	mov	r8,r12
8000cc24:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cc28:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc2c:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000cc2e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc32:	70 e5       	ld.w	r5,r8[0x38]
8000cc34:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc38:	10 99       	mov	r9,r8
8000cc3a:	ee 19 80 00 	eorh	r9,0x8000
8000cc3e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc42:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cc46:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cc4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000cc4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cc52:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cc56:	73 79       	ld.w	r9,r9[0x5c]
8000cc58:	12 9b       	mov	r11,r9
8000cc5a:	10 9c       	mov	r12,r8
8000cc5c:	f0 16 00 08 	mcall	r6[32]
8000cc60:	18 98       	mov	r8,r12
8000cc62:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cc66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc6a:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000cc6c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc70:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000cc74:	58 18       	cp.w	r8,1
8000cc76:	c1 c0       	breq	8000ccae <qfilter+0x9ce>
8000cc78:	58 28       	cp.w	r8,2
8000cc7a:	c3 00       	breq	8000ccda <qfilter+0x9fa>
8000cc7c:	58 08       	cp.w	r8,0
8000cc7e:	e0 81 00 94 	brne	8000cda6 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000cc82:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc86:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cc8a:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cc8e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc92:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cc96:	fc 1b 41 70 	movh	r11,0x4170
8000cc9a:	10 9c       	mov	r12,r8
8000cc9c:	f0 16 00 08 	mcall	r6[32]
8000cca0:	18 98       	mov	r8,r12
8000cca2:	10 99       	mov	r9,r8
8000cca4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cca8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000ccac:	c9 28       	rjmp	8000cdd0 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000ccae:	e0 68 99 9a 	mov	r8,39322
8000ccb2:	ea 18 3e 99 	orh	r8,0x3e99
8000ccb6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000ccba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccbe:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ccc2:	fc 1b 41 20 	movh	r11,0x4120
8000ccc6:	10 9c       	mov	r12,r8
8000ccc8:	f0 16 00 08 	mcall	r6[32]
8000cccc:	18 98       	mov	r8,r12
8000ccce:	10 99       	mov	r9,r8
8000ccd0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccd4:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000ccd8:	c7 c8       	rjmp	8000cdd0 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000ccda:	e0 68 99 9a 	mov	r8,39322
8000ccde:	ea 18 3e 99 	orh	r8,0x3e99
8000cce2:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000cce6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccea:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ccee:	fc 1b 41 20 	movh	r11,0x4120
8000ccf2:	10 9c       	mov	r12,r8
8000ccf4:	f0 16 00 08 	mcall	r6[32]
8000ccf8:	18 98       	mov	r8,r12
8000ccfa:	10 99       	mov	r9,r8
8000ccfc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd00:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000cd04:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd08:	70 f9       	ld.w	r9,r8[0x3c]
8000cd0a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd0e:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cd12:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cd16:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cd1a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd1e:	f0 fb 00 84 	ld.w	r11,r8[132]
8000cd22:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cd26:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cd2a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd2e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cd32:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd36:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000cd38:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd3c:	71 09       	ld.w	r9,r8[0x40]
8000cd3e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd42:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cd46:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cd4a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cd4e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd52:	f0 fb 00 88 	ld.w	r11,r8[136]
8000cd56:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cd5a:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cd5e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd62:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cd66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd6a:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000cd6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd72:	71 19       	ld.w	r9,r8[0x44]
8000cd74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd78:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cd7c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cd80:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cd84:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd88:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000cd8c:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cd90:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cd94:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd98:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cd9c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cda0:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000cda4:	c1 68       	rjmp	8000cdd0 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000cda6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdaa:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cdae:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cdb2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdb6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cdba:	fc 1b 41 70 	movh	r11,0x4170
8000cdbe:	10 9c       	mov	r12,r8
8000cdc0:	f0 16 00 08 	mcall	r6[32]
8000cdc4:	18 98       	mov	r8,r12
8000cdc6:	10 99       	mov	r9,r8
8000cdc8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdcc:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000cdd0:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000cdd4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdd8:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000cdda:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000cdde:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cde2:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000cde4:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000cde8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdec:	91 79       	st.w	r8[0x1c],r9
	
}
8000cdee:	2b fd       	sub	sp,-260
8000cdf0:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000cdf4:	80 00       	ld.sh	r0,r0[0x0]
8000cdf6:	c1 72       	brcc	8000ce24 <interpolate+0x2c>

8000cdf8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000cdf8:	eb cd 40 c0 	pushm	r6-r7,lr
8000cdfc:	1a 97       	mov	r7,sp
8000cdfe:	20 6d       	sub	sp,24
8000ce00:	49 e6       	lddpc	r6,8000ce78 <interpolate+0x80>
8000ce02:	1e 26       	rsub	r6,pc
8000ce04:	ef 4c ff f8 	st.w	r7[-8],r12
8000ce08:	ef 4b ff f4 	st.w	r7[-12],r11
8000ce0c:	ef 4a ff f0 	st.w	r7[-16],r10
8000ce10:	ef 49 ff ec 	st.w	r7[-20],r9
8000ce14:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000ce18:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ce1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ce20:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000ce24:	c0 41       	brne	8000ce2c <interpolate+0x34>
	{
		return y1;
8000ce26:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ce2a:	c2 38       	rjmp	8000ce70 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000ce2c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ce30:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ce34:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ce38:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ce3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ce40:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000ce44:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ce48:	ee fa ff f0 	ld.w	r10,r7[-16]
8000ce4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ce50:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ce54:	12 9b       	mov	r11,r9
8000ce56:	10 9c       	mov	r12,r8
8000ce58:	f0 16 00 08 	mcall	r6[32]
8000ce5c:	18 98       	mov	r8,r12
8000ce5e:	10 99       	mov	r9,r8
8000ce60:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ce64:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ce68:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000ce6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000ce70:	10 9c       	mov	r12,r8
8000ce72:	2f ad       	sub	sp,-24
8000ce74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ce78:	80 00       	ld.sh	r0,r0[0x0]
8000ce7a:	cc 86       	brmi	8000ce0a <interpolate+0x12>

8000ce7c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000ce7c:	eb cd 40 c0 	pushm	r6-r7,lr
8000ce80:	1a 97       	mov	r7,sp
8000ce82:	20 3d       	sub	sp,12
8000ce84:	49 06       	lddpc	r6,8000cec4 <mav_array_memcpy+0x48>
8000ce86:	1e 26       	rsub	r6,pc
8000ce88:	ef 4c ff fc 	st.w	r7[-4],r12
8000ce8c:	ef 4b ff f8 	st.w	r7[-8],r11
8000ce90:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000ce94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce98:	58 08       	cp.w	r8,0
8000ce9a:	c0 91       	brne	8000ceac <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000ce9c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000cea0:	30 0b       	mov	r11,0
8000cea2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cea6:	f0 16 00 2f 	mcall	r6[188]
8000ceaa:	c0 98       	rjmp	8000cebc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000ceac:	ee fa ff f4 	ld.w	r10,r7[-12]
8000ceb0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000ceb4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ceb8:	f0 16 00 1e 	mcall	r6[120]
	}
}
8000cebc:	2f dd       	sub	sp,-12
8000cebe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cec2:	00 00       	add	r0,r0
8000cec4:	80 00       	ld.sh	r0,r0[0x0]
8000cec6:	cd 0a       	rjmp	8000cc66 <qfilter+0x986>

8000cec8 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000cec8:	eb cd 40 c0 	pushm	r6-r7,lr
8000cecc:	1a 97       	mov	r7,sp
8000cece:	4d 86       	lddpc	r6,8000d02c <initialise_central_data+0x164>
8000ced0:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
8000ced2:	ec f8 00 64 	ld.w	r8,r6[100]
8000ced6:	30 09       	mov	r9,0
8000ced8:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000cedc:	ec f8 00 64 	ld.w	r8,r6[100]
8000cee0:	30 09       	mov	r9,0
8000cee2:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000cee6:	ec f8 00 64 	ld.w	r8,r6[100]
8000ceea:	30 09       	mov	r9,0
8000ceec:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000cef0:	ec f8 00 64 	ld.w	r8,r6[100]
8000cef4:	fc 19 bf 80 	movh	r9,0xbf80
8000cef8:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_hybrid(&centralData.stabiliser_stack);
8000cefc:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf00:	f0 c8 fe 60 	sub	r8,r8,-416
8000cf04:	10 9c       	mov	r12,r8
8000cf06:	f0 16 01 c2 	mcall	r6[1800]
		// centralData.stabilisers_stack = 

		centralData.simulation_mode=0;
8000cf0a:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf0e:	30 09       	mov	r9,0
8000cf10:	f1 49 0f 80 	st.w	r8[3968],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
8000cf14:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf18:	30 08       	mov	r8,0
8000cf1a:	f3 58 0e dc 	st.h	r9[3804],r8
		centralData.waypoint_set = false;
8000cf1e:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf22:	30 08       	mov	r8,0
8000cf24:	f3 68 0f 74 	st.b	r9[3956],r8
		centralData.waypoint_sending = false;
8000cf28:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf2c:	30 08       	mov	r8,0
8000cf2e:	f3 68 0f 75 	st.b	r9[3957],r8
		centralData.waypoint_receiving = false;
8000cf32:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf36:	30 08       	mov	r8,0
8000cf38:	f3 68 0f 76 	st.b	r9[3958],r8
		centralData.waypoint_hold_init = false;
8000cf3c:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf40:	30 08       	mov	r8,0
8000cf42:	f3 68 0f 77 	st.b	r9[3959],r8
		centralData.critical_landing = false;
8000cf46:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf4a:	30 08       	mov	r8,0
8000cf4c:	f3 68 0f 78 	st.b	r9[3960],r8
		centralData.critical_init = false;
8000cf50:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf54:	30 08       	mov	r8,0
8000cf56:	f3 68 0f 79 	st.b	r9[3961],r8
		centralData.collision_avoidance = false;
8000cf5a:	ec f9 00 64 	ld.w	r9,r6[100]
8000cf5e:	30 08       	mov	r8,0
8000cf60:	f3 68 0f 7b 	st.b	r9[3963],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000cf64:	ec fa 00 64 	ld.w	r10,r6[100]
8000cf68:	e0 68 33 27 	mov	r8,13095
8000cf6c:	ea 18 3f a0 	orh	r8,0x3fa0
8000cf70:	e0 69 43 a1 	mov	r9,17313
8000cf74:	ea 19 40 1a 	orh	r9,0x401a
8000cf78:	f4 e9 0c 6c 	st.d	r10[3180],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000cf7c:	ec fa 00 64 	ld.w	r10,r6[100]
8000cf80:	e0 68 f8 9c 	mov	r8,63644
8000cf84:	ea 18 f0 d4 	orh	r8,0xf0d4
8000cf88:	e0 69 42 5e 	mov	r9,16990
8000cf8c:	ea 19 40 47 	orh	r9,0x4047
8000cf90:	f4 e9 0c 74 	st.d	r10[3188],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000cf94:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf98:	fc 19 43 c8 	movh	r9,0x43c8
8000cf9c:	f1 49 0c 7c 	st.w	r8[3196],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000cfa0:	ec f8 00 64 	ld.w	r8,r6[100]
8000cfa4:	30 09       	mov	r9,0
8000cfa6:	f1 49 0c 5c 	st.w	r8[3164],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000cfaa:	ec f8 00 64 	ld.w	r8,r6[100]
8000cfae:	30 09       	mov	r9,0
8000cfb0:	f1 49 0c 60 	st.w	r8[3168],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000cfb4:	ec f8 00 64 	ld.w	r8,r6[100]
8000cfb8:	30 09       	mov	r9,0
8000cfba:	f1 49 0c 64 	st.w	r8[3172],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000cfbe:	ec f8 00 64 	ld.w	r8,r6[100]
8000cfc2:	f0 c8 f5 98 	sub	r8,r8,-2664
8000cfc6:	ec fb 00 64 	ld.w	r11,r6[100]
8000cfca:	10 9c       	mov	r12,r8
8000cfcc:	f0 16 01 e0 	mcall	r6[1920]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000cfd0:	ec f9 00 64 	ld.w	r9,r6[100]
8000cfd4:	ec f8 00 64 	ld.w	r8,r6[100]
8000cfd8:	f2 cb f4 84 	sub	r11,r9,-2940
8000cfdc:	f0 ca f3 a4 	sub	r10,r8,-3164
8000cfe0:	f6 c8 00 00 	sub	r8,r11,0
8000cfe4:	f4 c9 00 00 	sub	r9,r10,0
8000cfe8:	72 0c       	ld.w	r12,r9[0x0]
8000cfea:	91 0c       	st.w	r8[0x0],r12
8000cfec:	72 1c       	ld.w	r12,r9[0x4]
8000cfee:	91 1c       	st.w	r8[0x4],r12
8000cff0:	72 2c       	ld.w	r12,r9[0x8]
8000cff2:	91 2c       	st.w	r8[0x8],r12
8000cff4:	72 39       	ld.w	r9,r9[0xc]
8000cff6:	91 39       	st.w	r8[0xc],r9
8000cff8:	f6 c8 ff f0 	sub	r8,r11,-16
8000cffc:	f4 c9 ff f0 	sub	r9,r10,-16
8000d000:	72 0c       	ld.w	r12,r9[0x0]
8000d002:	91 0c       	st.w	r8[0x0],r12
8000d004:	72 1c       	ld.w	r12,r9[0x4]
8000d006:	91 1c       	st.w	r8[0x4],r12
8000d008:	72 2c       	ld.w	r12,r9[0x8]
8000d00a:	91 2c       	st.w	r8[0x8],r12
8000d00c:	72 39       	ld.w	r9,r9[0xc]
8000d00e:	91 39       	st.w	r8[0xc],r9
8000d010:	f6 c8 ff e0 	sub	r8,r11,-32
8000d014:	f4 c9 ff e0 	sub	r9,r10,-32
8000d018:	72 0a       	ld.w	r10,r9[0x0]
8000d01a:	91 0a       	st.w	r8[0x0],r10
8000d01c:	72 1a       	ld.w	r10,r9[0x4]
8000d01e:	91 1a       	st.w	r8[0x4],r10
8000d020:	72 2a       	ld.w	r10,r9[0x8]
8000d022:	91 2a       	st.w	r8[0x8],r10
8000d024:	72 39       	ld.w	r9,r9[0xc]
8000d026:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000d028:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d02c:	80 00       	ld.sh	r0,r0[0x0]
8000d02e:	cd 54       	brge	8000cfd8 <initialise_central_data+0x110>

8000d030 <get_central_data>:

central_data_t* get_central_data(void)
{
8000d030:	eb cd 40 c0 	pushm	r6-r7,lr
8000d034:	1a 97       	mov	r7,sp
8000d036:	48 46       	lddpc	r6,8000d044 <get_central_data+0x14>
8000d038:	1e 26       	rsub	r6,pc
	return &centralData;
8000d03a:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d03e:	10 9c       	mov	r12,r8
8000d040:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d044:	80 00       	ld.sh	r0,r0[0x0]
8000d046:	ce bc       	rcall	8000d21c <crc_accumulate_buffer+0x40>

8000d048 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000d048:	eb cd 40 c0 	pushm	r6-r7,lr
8000d04c:	1a 97       	mov	r7,sp
8000d04e:	48 56       	lddpc	r6,8000d060 <get_telemetry_upstream+0x18>
8000d050:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000d052:	ec f8 00 64 	ld.w	r8,r6[100]
8000d056:	f0 f8 0c c0 	ld.w	r8,r8[3264]
}
8000d05a:	10 9c       	mov	r12,r8
8000d05c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d060:	80 00       	ld.sh	r0,r0[0x0]
8000d062:	ce d4       	brge	8000d03c <get_central_data+0xc>

8000d064 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000d064:	eb cd 40 c0 	pushm	r6-r7,lr
8000d068:	1a 97       	mov	r7,sp
8000d06a:	48 56       	lddpc	r6,8000d07c <get_telemetry_downstream+0x18>
8000d06c:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000d06e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d072:	f0 f8 0c bc 	ld.w	r8,r8[3260]
}
8000d076:	10 9c       	mov	r12,r8
8000d078:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d07c:	80 00       	ld.sh	r0,r0[0x0]
8000d07e:	ce f0       	breq	8000d05c <get_telemetry_upstream+0x14>

8000d080 <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000d080:	eb cd 40 c0 	pushm	r6-r7,lr
8000d084:	1a 97       	mov	r7,sp
8000d086:	48 56       	lddpc	r6,8000d098 <get_debug_stream+0x18>
8000d088:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000d08a:	ec f8 00 64 	ld.w	r8,r6[100]
8000d08e:	f0 f8 0c c4 	ld.w	r8,r8[3268]
}
8000d092:	10 9c       	mov	r12,r8
8000d094:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d098:	80 00       	ld.sh	r0,r0[0x0]
8000d09a:	cf 0c       	rcall	8000d27a <_mav_finalize_message_chan_send+0xa>

8000d09c <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000d09c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d0a0:	1a 97       	mov	r7,sp
8000d0a2:	48 46       	lddpc	r6,8000d0b0 <get_imu_data+0x14>
8000d0a4:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000d0a6:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d0aa:	10 9c       	mov	r12,r8
8000d0ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d0b0:	80 00       	ld.sh	r0,r0[0x0]
8000d0b2:	cf 28       	rjmp	8000d296 <_mav_finalize_message_chan_send+0x26>

8000d0b4 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000d0b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d0b8:	1a 97       	mov	r7,sp
8000d0ba:	48 56       	lddpc	r6,8000d0cc <get_control_inputs_data+0x18>
8000d0bc:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000d0be:	ec f8 00 64 	ld.w	r8,r6[100]
8000d0c2:	f0 c8 fe b8 	sub	r8,r8,-328
8000d0c6:	10 9c       	mov	r12,r8
8000d0c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d0cc:	80 00       	ld.sh	r0,r0[0x0]
8000d0ce:	cf 40       	breq	8000d0b6 <get_control_inputs_data+0x2>

8000d0d0 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000d0d0:	eb cd 40 80 	pushm	r7,lr
8000d0d4:	1a 97       	mov	r7,sp
8000d0d6:	20 3d       	sub	sp,12
8000d0d8:	18 98       	mov	r8,r12
8000d0da:	ef 4b ff f4 	st.w	r7[-12],r11
8000d0de:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000d0e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0e6:	90 08       	ld.sh	r8,r8[0x0]
8000d0e8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d0ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d0f0:	f3 e8 20 08 	eor	r8,r9,r8
8000d0f4:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000d0f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d0fc:	a5 68       	lsl	r8,0x4
8000d0fe:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d102:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d106:	f3 e8 20 08 	eor	r8,r9,r8
8000d10a:	5c 58       	castu.b	r8
8000d10c:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000d110:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d114:	90 08       	ld.sh	r8,r8[0x0]
8000d116:	5c 78       	castu.h	r8
8000d118:	a9 88       	lsr	r8,0x8
8000d11a:	5c 88       	casts.h	r8
8000d11c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d120:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d124:	a9 68       	lsl	r8,0x8
8000d126:	5c 88       	casts.h	r8
8000d128:	f3 e8 20 08 	eor	r8,r9,r8
8000d12c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d130:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d134:	a3 78       	lsl	r8,0x3
8000d136:	5c 88       	casts.h	r8
8000d138:	f3 e8 20 08 	eor	r8,r9,r8
8000d13c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d140:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d144:	a5 88       	lsr	r8,0x4
8000d146:	5c 58       	castu.b	r8
8000d148:	f3 e8 20 08 	eor	r8,r9,r8
8000d14c:	5c 88       	casts.h	r8
8000d14e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d152:	b2 08       	st.h	r9[0x0],r8
}
8000d154:	2f dd       	sub	sp,-12
8000d156:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d15a <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000d15a:	eb cd 40 80 	pushm	r7,lr
8000d15e:	1a 97       	mov	r7,sp
8000d160:	20 1d       	sub	sp,4
8000d162:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000d166:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d16a:	3f f8       	mov	r8,-1
8000d16c:	b2 08       	st.h	r9[0x0],r8
}
8000d16e:	2f fd       	sub	sp,-4
8000d170:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d174 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000d174:	eb cd 40 c0 	pushm	r6-r7,lr
8000d178:	1a 97       	mov	r7,sp
8000d17a:	20 3d       	sub	sp,12
8000d17c:	49 76       	lddpc	r6,8000d1d8 <crc_calculate+0x64>
8000d17e:	1e 26       	rsub	r6,pc
8000d180:	ef 4c ff f8 	st.w	r7[-8],r12
8000d184:	16 98       	mov	r8,r11
8000d186:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000d18a:	ee c8 00 02 	sub	r8,r7,2
8000d18e:	10 9c       	mov	r12,r8
8000d190:	ce 5f       	rcall	8000d15a <crc_init>
	while (length--) {
8000d192:	c0 e8       	rjmp	8000d1ae <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000d194:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d198:	11 88       	ld.ub	r8,r8[0x0]
8000d19a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d19e:	2f f9       	sub	r9,-1
8000d1a0:	ef 49 ff f8 	st.w	r7[-8],r9
8000d1a4:	ee c9 00 02 	sub	r9,r7,2
8000d1a8:	12 9b       	mov	r11,r9
8000d1aa:	10 9c       	mov	r12,r8
8000d1ac:	c9 2f       	rcall	8000d0d0 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000d1ae:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000d1b2:	30 08       	mov	r8,0
8000d1b4:	f0 09 19 00 	cp.h	r9,r8
8000d1b8:	5f 18       	srne	r8
8000d1ba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d1be:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000d1c2:	20 18       	sub	r8,1
8000d1c4:	ef 58 ff f4 	st.h	r7[-12],r8
8000d1c8:	58 09       	cp.w	r9,0
8000d1ca:	ce 51       	brne	8000d194 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000d1cc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000d1d0:	10 9c       	mov	r12,r8
8000d1d2:	2f dd       	sub	sp,-12
8000d1d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1d8:	80 00       	ld.sh	r0,r0[0x0]
8000d1da:	d0 02       	popm	

8000d1dc <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000d1dc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1e0:	1a 97       	mov	r7,sp
8000d1e2:	20 4d       	sub	sp,16
8000d1e4:	49 66       	lddpc	r6,8000d23c <crc_accumulate_buffer+0x60>
8000d1e6:	1e 26       	rsub	r6,pc
8000d1e8:	ef 4c ff f8 	st.w	r7[-8],r12
8000d1ec:	ef 4b ff f4 	st.w	r7[-12],r11
8000d1f0:	14 98       	mov	r8,r10
8000d1f2:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000d1f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d1fa:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000d1fe:	c0 d8       	rjmp	8000d218 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000d200:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d204:	11 88       	ld.ub	r8,r8[0x0]
8000d206:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d20a:	2f f9       	sub	r9,-1
8000d20c:	ef 49 ff fc 	st.w	r7[-4],r9
8000d210:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d214:	10 9c       	mov	r12,r8
8000d216:	c5 df       	rcall	8000d0d0 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000d218:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d21c:	30 08       	mov	r8,0
8000d21e:	f0 09 18 00 	cp.b	r9,r8
8000d222:	5f 18       	srne	r8
8000d224:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d228:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d22c:	20 18       	sub	r8,1
8000d22e:	ef 68 ff f0 	st.b	r7[-16],r8
8000d232:	58 09       	cp.w	r9,0
8000d234:	ce 61       	brne	8000d200 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000d236:	2f cd       	sub	sp,-16
8000d238:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d23c:	80 00       	ld.sh	r0,r0[0x0]
8000d23e:	d0 6a       	popm	r4-r9

8000d240 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000d240:	eb cd 40 c0 	pushm	r6-r7,lr
8000d244:	1a 97       	mov	r7,sp
8000d246:	20 1d       	sub	sp,4
8000d248:	48 96       	lddpc	r6,8000d26c <mavlink_get_channel_status+0x2c>
8000d24a:	1e 26       	rsub	r6,pc
8000d24c:	18 98       	mov	r8,r12
8000d24e:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000d252:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000d256:	f0 09 15 04 	lsl	r9,r8,0x4
8000d25a:	ec f8 08 ec 	ld.w	r8,r6[2284]
8000d25e:	f2 08 00 08 	add	r8,r9,r8
}
8000d262:	10 9c       	mov	r12,r8
8000d264:	2f fd       	sub	sp,-4
8000d266:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d26a:	00 00       	add	r0,r0
8000d26c:	80 00       	ld.sh	r0,r0[0x0]
8000d26e:	d0 ce       	*unknown*

8000d270 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000d270:	eb cd 40 c0 	pushm	r6-r7,lr
8000d274:	1a 97       	mov	r7,sp
8000d276:	20 9d       	sub	sp,36
8000d278:	4b d6       	lddpc	r6,8000d36c <_mav_finalize_message_chan_send+0xfc>
8000d27a:	1e 26       	rsub	r6,pc
8000d27c:	ef 4c ff ec 	st.w	r7[-20],r12
8000d280:	ef 4a ff e4 	st.w	r7[-28],r10
8000d284:	16 9a       	mov	r10,r11
8000d286:	ef 6a ff e8 	st.b	r7[-24],r10
8000d28a:	ef 69 ff e0 	st.b	r7[-32],r9
8000d28e:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000d292:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d296:	5c 58       	castu.b	r8
8000d298:	10 9c       	mov	r12,r8
8000d29a:	cd 3f       	rcall	8000d240 <mavlink_get_channel_status>
8000d29c:	18 98       	mov	r8,r12
8000d29e:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000d2a2:	3f e8       	mov	r8,-2
8000d2a4:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000d2a8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d2ac:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000d2b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2b4:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d2b8:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000d2bc:	ec f8 00 6c 	ld.w	r8,r6[108]
8000d2c0:	11 88       	ld.ub	r8,r8[0x0]
8000d2c2:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000d2c6:	ec f8 00 6c 	ld.w	r8,r6[108]
8000d2ca:	11 98       	ld.ub	r8,r8[0x1]
8000d2cc:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000d2d0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d2d4:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000d2d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2dc:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d2e0:	2f f8       	sub	r8,-1
8000d2e2:	5c 58       	castu.b	r8
8000d2e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d2e8:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000d2ec:	ee c8 00 0c 	sub	r8,r7,12
8000d2f0:	2f f8       	sub	r8,-1
8000d2f2:	30 5b       	mov	r11,5
8000d2f4:	10 9c       	mov	r12,r8
8000d2f6:	c3 ff       	rcall	8000d174 <crc_calculate>
8000d2f8:	18 98       	mov	r8,r12
8000d2fa:	5c 88       	casts.h	r8
8000d2fc:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000d300:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000d304:	ee c8 00 06 	sub	r8,r7,6
8000d308:	12 9a       	mov	r10,r9
8000d30a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d30e:	10 9c       	mov	r12,r8
8000d310:	c6 6f       	rcall	8000d1dc <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000d312:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d316:	ee c9 00 06 	sub	r9,r7,6
8000d31a:	12 9b       	mov	r11,r9
8000d31c:	10 9c       	mov	r12,r8
8000d31e:	cd 9e       	rcall	8000d0d0 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000d320:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d324:	5c 58       	castu.b	r8
8000d326:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000d32a:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d32e:	5c 78       	castu.h	r8
8000d330:	a9 88       	lsr	r8,0x8
8000d332:	5c 88       	casts.h	r8
8000d334:	5c 58       	castu.b	r8
8000d336:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000d33a:	ee c8 00 0c 	sub	r8,r7,12
8000d33e:	30 6a       	mov	r10,6
8000d340:	10 9b       	mov	r11,r8
8000d342:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d346:	c1 5c       	rcall	8000d370 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000d348:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d34c:	10 9a       	mov	r10,r8
8000d34e:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d352:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d356:	c0 dc       	rcall	8000d370 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000d358:	ee c8 00 10 	sub	r8,r7,16
8000d35c:	30 2a       	mov	r10,2
8000d35e:	10 9b       	mov	r11,r8
8000d360:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d364:	c0 6c       	rcall	8000d370 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000d366:	2f 7d       	sub	sp,-36
8000d368:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d36c:	80 00       	ld.sh	r0,r0[0x0]
8000d36e:	d0 fe       	*unknown*

8000d370 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000d370:	eb cd 40 c0 	pushm	r6-r7,lr
8000d374:	1a 97       	mov	r7,sp
8000d376:	20 4d       	sub	sp,16
8000d378:	49 46       	lddpc	r6,8000d3c8 <_mavlink_send_uart+0x58>
8000d37a:	1e 26       	rsub	r6,pc
8000d37c:	ef 4c ff f8 	st.w	r7[-8],r12
8000d380:	ef 4b ff f4 	st.w	r7[-12],r11
8000d384:	14 98       	mov	r8,r10
8000d386:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d38a:	30 08       	mov	r8,0
8000d38c:	ef 58 ff fe 	st.h	r7[-2],r8
8000d390:	c1 28       	rjmp	8000d3b4 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000d392:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000d396:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d39a:	f2 08 00 08 	add	r8,r9,r8
8000d39e:	11 88       	ld.ub	r8,r8[0x0]
8000d3a0:	10 9b       	mov	r11,r8
8000d3a2:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d3a6:	f0 16 00 cf 	mcall	r6[828]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d3aa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d3ae:	2f f8       	sub	r8,-1
8000d3b0:	ef 58 ff fe 	st.h	r7[-2],r8
8000d3b4:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000d3b8:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000d3bc:	f0 09 19 00 	cp.h	r9,r8
8000d3c0:	ce 93       	brcs	8000d392 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000d3c2:	2f cd       	sub	sp,-16
8000d3c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3c8:	80 00       	ld.sh	r0,r0[0x0]
8000d3ca:	d1 fe       	*unknown*

8000d3cc <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d3cc:	eb cd 40 80 	pushm	r7,lr
8000d3d0:	1a 97       	mov	r7,sp
8000d3d2:	20 2d       	sub	sp,8
8000d3d4:	ef 4c ff fc 	st.w	r7[-4],r12
8000d3d8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d3dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d3e0:	2f f8       	sub	r8,-1
8000d3e2:	11 88       	ld.ub	r8,r8[0x0]
8000d3e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d3e8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d3ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3ee:	f0 c9 ff ff 	sub	r9,r8,-1
8000d3f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d3f6:	11 88       	ld.ub	r8,r8[0x0]
8000d3f8:	b2 88       	st.b	r9[0x0],r8
}
8000d3fa:	2f ed       	sub	sp,-8
8000d3fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d400 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d400:	eb cd 40 80 	pushm	r7,lr
8000d404:	1a 97       	mov	r7,sp
8000d406:	20 2d       	sub	sp,8
8000d408:	ef 4c ff fc 	st.w	r7[-4],r12
8000d40c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d410:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d414:	2f d8       	sub	r8,-3
8000d416:	11 88       	ld.ub	r8,r8[0x0]
8000d418:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d41c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d41e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d422:	f0 c9 ff ff 	sub	r9,r8,-1
8000d426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d42a:	2f e8       	sub	r8,-2
8000d42c:	11 88       	ld.ub	r8,r8[0x0]
8000d42e:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d430:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d434:	f0 c9 ff fe 	sub	r9,r8,-2
8000d438:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d43c:	2f f8       	sub	r8,-1
8000d43e:	11 88       	ld.ub	r8,r8[0x0]
8000d440:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d442:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d446:	f0 c9 ff fd 	sub	r9,r8,-3
8000d44a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d44e:	11 88       	ld.ub	r8,r8[0x0]
8000d450:	b2 88       	st.b	r9[0x0],r8
}
8000d452:	2f ed       	sub	sp,-8
8000d454:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d458 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000d458:	eb cd 40 80 	pushm	r7,lr
8000d45c:	1a 97       	mov	r7,sp
8000d45e:	20 2d       	sub	sp,8
8000d460:	ef 4c ff fc 	st.w	r7[-4],r12
8000d464:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000d468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d46c:	2f 98       	sub	r8,-7
8000d46e:	11 88       	ld.ub	r8,r8[0x0]
8000d470:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d474:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000d476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d47a:	f0 c9 ff ff 	sub	r9,r8,-1
8000d47e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d482:	2f a8       	sub	r8,-6
8000d484:	11 88       	ld.ub	r8,r8[0x0]
8000d486:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000d488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d48c:	f0 c9 ff fe 	sub	r9,r8,-2
8000d490:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d494:	2f b8       	sub	r8,-5
8000d496:	11 88       	ld.ub	r8,r8[0x0]
8000d498:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000d49a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d49e:	f0 c9 ff fd 	sub	r9,r8,-3
8000d4a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4a6:	2f c8       	sub	r8,-4
8000d4a8:	11 88       	ld.ub	r8,r8[0x0]
8000d4aa:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000d4ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4b0:	f0 c9 ff fc 	sub	r9,r8,-4
8000d4b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4b8:	2f d8       	sub	r8,-3
8000d4ba:	11 88       	ld.ub	r8,r8[0x0]
8000d4bc:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000d4be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4c2:	f0 c9 ff fb 	sub	r9,r8,-5
8000d4c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4ca:	2f e8       	sub	r8,-2
8000d4cc:	11 88       	ld.ub	r8,r8[0x0]
8000d4ce:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000d4d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4d4:	f0 c9 ff fa 	sub	r9,r8,-6
8000d4d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4dc:	2f f8       	sub	r8,-1
8000d4de:	11 88       	ld.ub	r8,r8[0x0]
8000d4e0:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000d4e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4e6:	f0 c9 ff f9 	sub	r9,r8,-7
8000d4ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d4ee:	11 88       	ld.ub	r8,r8[0x0]
8000d4f0:	b2 88       	st.b	r9[0x0],r8
}
8000d4f2:	2f ed       	sub	sp,-8
8000d4f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d4f8 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d4f8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4fc:	1a 97       	mov	r7,sp
8000d4fe:	20 3d       	sub	sp,12
8000d500:	49 06       	lddpc	r6,8000d540 <mav_array_memcpy+0x48>
8000d502:	1e 26       	rsub	r6,pc
8000d504:	ef 4c ff fc 	st.w	r7[-4],r12
8000d508:	ef 4b ff f8 	st.w	r7[-8],r11
8000d50c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d510:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d514:	58 08       	cp.w	r8,0
8000d516:	c0 91       	brne	8000d528 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d518:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d51c:	30 0b       	mov	r11,0
8000d51e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d522:	f0 16 00 2f 	mcall	r6[188]
8000d526:	c0 98       	rjmp	8000d538 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d528:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d52c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d530:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d534:	f0 16 00 1e 	mcall	r6[120]
	}
}
8000d538:	2f dd       	sub	sp,-12
8000d53a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d53e:	00 00       	add	r0,r0
8000d540:	80 00       	ld.sh	r0,r0[0x0]
8000d542:	d3 86       	*unknown*

8000d544 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000d544:	eb cd 40 c0 	pushm	r6-r7,lr
8000d548:	1a 97       	mov	r7,sp
8000d54a:	20 4d       	sub	sp,16
8000d54c:	48 e6       	lddpc	r6,8000d584 <_mav_put_char_array+0x40>
8000d54e:	1e 26       	rsub	r6,pc
8000d550:	ef 4c ff fc 	st.w	r7[-4],r12
8000d554:	ef 4a ff f4 	st.w	r7[-12],r10
8000d558:	12 98       	mov	r8,r9
8000d55a:	16 99       	mov	r9,r11
8000d55c:	ef 69 ff f8 	st.b	r7[-8],r9
8000d560:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000d564:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d568:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d56c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d570:	f4 08 00 08 	add	r8,r10,r8
8000d574:	12 9a       	mov	r10,r9
8000d576:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d57a:	10 9c       	mov	r12,r8
8000d57c:	cb ef       	rcall	8000d4f8 <mav_array_memcpy>

}
8000d57e:	2f cd       	sub	sp,-16
8000d580:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d584:	80 00       	ld.sh	r0,r0[0x0]
8000d586:	d3 d2       	popm	r0-r3,r8-r12

8000d588 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8000d588:	eb cd 40 c0 	pushm	r6-r7,lr
8000d58c:	1a 97       	mov	r7,sp
8000d58e:	20 3d       	sub	sp,12
8000d590:	48 d6       	lddpc	r6,8000d5c4 <_MAV_RETURN_uint16_t+0x3c>
8000d592:	1e 26       	rsub	r6,pc
8000d594:	ef 4c ff f8 	st.w	r7[-8],r12
8000d598:	16 98       	mov	r8,r11
8000d59a:	ef 68 ff f4 	st.b	r7[-12],r8
8000d59e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5a2:	2f 88       	sub	r8,-8
8000d5a4:	10 99       	mov	r9,r8
8000d5a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5aa:	10 09       	add	r9,r8
8000d5ac:	ee c8 00 02 	sub	r8,r7,2
8000d5b0:	12 9b       	mov	r11,r9
8000d5b2:	10 9c       	mov	r12,r8
8000d5b4:	c0 cf       	rcall	8000d3cc <byte_swap_2>
8000d5b6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d5ba:	10 9c       	mov	r12,r8
8000d5bc:	2f dd       	sub	sp,-12
8000d5be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d5c2:	00 00       	add	r0,r0
8000d5c4:	80 00       	ld.sh	r0,r0[0x0]
8000d5c6:	d4 16       	*unknown*

8000d5c8 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8000d5c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d5cc:	1a 97       	mov	r7,sp
8000d5ce:	20 3d       	sub	sp,12
8000d5d0:	48 d6       	lddpc	r6,8000d604 <_MAV_RETURN_float+0x3c>
8000d5d2:	1e 26       	rsub	r6,pc
8000d5d4:	ef 4c ff f8 	st.w	r7[-8],r12
8000d5d8:	16 98       	mov	r8,r11
8000d5da:	ef 68 ff f4 	st.b	r7[-12],r8
8000d5de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5e2:	2f 88       	sub	r8,-8
8000d5e4:	10 99       	mov	r9,r8
8000d5e6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d5ea:	10 09       	add	r9,r8
8000d5ec:	ee c8 00 04 	sub	r8,r7,4
8000d5f0:	12 9b       	mov	r11,r9
8000d5f2:	10 9c       	mov	r12,r8
8000d5f4:	c0 6f       	rcall	8000d400 <byte_swap_4>
8000d5f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5fa:	10 9c       	mov	r12,r8
8000d5fc:	2f dd       	sub	sp,-12
8000d5fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d602:	00 00       	add	r0,r0
8000d604:	80 00       	ld.sh	r0,r0[0x0]
8000d606:	d4 56       	*unknown*

8000d608 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000d608:	eb cd 40 c0 	pushm	r6-r7,lr
8000d60c:	1a 97       	mov	r7,sp
8000d60e:	20 9d       	sub	sp,36
8000d610:	49 c6       	lddpc	r6,8000d680 <mavlink_msg_heartbeat_send+0x78>
8000d612:	1e 26       	rsub	r6,pc
8000d614:	ee ce ff f4 	sub	lr,r7,-12
8000d618:	ef 4c ff f0 	st.w	r7[-16],r12
8000d61c:	ef 48 ff e0 	st.w	r7[-32],r8
8000d620:	7c 08       	ld.w	r8,lr[0x0]
8000d622:	ef 6b ff ec 	st.b	r7[-20],r11
8000d626:	ef 6a ff e8 	st.b	r7[-24],r10
8000d62a:	ef 69 ff e4 	st.b	r7[-28],r9
8000d62e:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000d632:	ee c9 00 20 	sub	r9,r7,32
8000d636:	ee c8 00 0c 	sub	r8,r7,12
8000d63a:	12 9b       	mov	r11,r9
8000d63c:	10 9c       	mov	r12,r8
8000d63e:	ce 1e       	rcall	8000d400 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000d640:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d644:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000d648:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d64c:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000d650:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000d654:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000d658:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d65c:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000d660:	30 38       	mov	r8,3
8000d662:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000d666:	ee ca 00 0c 	sub	r10,r7,12
8000d66a:	33 28       	mov	r8,50
8000d66c:	30 99       	mov	r9,9
8000d66e:	30 0b       	mov	r11,0
8000d670:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d674:	fe b0 fd fe 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000d678:	2f 7d       	sub	sp,-36
8000d67a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d67e:	00 00       	add	r0,r0
8000d680:	80 00       	ld.sh	r0,r0[0x0]
8000d682:	d4 96       	*unknown*

8000d684 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000d684:	eb cd 40 e0 	pushm	r5-r7,lr
8000d688:	1a 97       	mov	r7,sp
8000d68a:	21 2d       	sub	sp,72
8000d68c:	4b 76       	lddpc	r6,8000d768 <mavlink_msg_gps_raw_int_send+0xe4>
8000d68e:	1e 26       	rsub	r6,pc
8000d690:	ee c5 ff f0 	sub	r5,r7,-16
8000d694:	ef 4c ff dc 	st.w	r7[-36],r12
8000d698:	ee eb ff d4 	st.d	r7[-44],r10
8000d69c:	12 9e       	mov	lr,r9
8000d69e:	ef 48 ff cc 	st.w	r7[-52],r8
8000d6a2:	6a 2c       	ld.w	r12,r5[0x8]
8000d6a4:	6a 3b       	ld.w	r11,r5[0xc]
8000d6a6:	6a 4a       	ld.w	r10,r5[0x10]
8000d6a8:	6a 59       	ld.w	r9,r5[0x14]
8000d6aa:	6a 68       	ld.w	r8,r5[0x18]
8000d6ac:	ef 6e ff d0 	st.b	r7[-48],lr
8000d6b0:	ef 5c ff c8 	st.h	r7[-56],r12
8000d6b4:	ef 5b ff c4 	st.h	r7[-60],r11
8000d6b8:	ef 5a ff c0 	st.h	r7[-64],r10
8000d6bc:	ef 59 ff bc 	st.h	r7[-68],r9
8000d6c0:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d6c4:	ee c9 00 2c 	sub	r9,r7,44
8000d6c8:	ee c8 00 20 	sub	r8,r7,32
8000d6cc:	12 9b       	mov	r11,r9
8000d6ce:	10 9c       	mov	r12,r8
8000d6d0:	cc 4e       	rcall	8000d458 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000d6d2:	ee c9 00 34 	sub	r9,r7,52
8000d6d6:	ee c8 00 20 	sub	r8,r7,32
8000d6da:	2f 88       	sub	r8,-8
8000d6dc:	12 9b       	mov	r11,r9
8000d6de:	10 9c       	mov	r12,r8
8000d6e0:	c9 0e       	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000d6e2:	0a 99       	mov	r9,r5
8000d6e4:	ee c8 00 20 	sub	r8,r7,32
8000d6e8:	2f 48       	sub	r8,-12
8000d6ea:	12 9b       	mov	r11,r9
8000d6ec:	10 9c       	mov	r12,r8
8000d6ee:	c8 9e       	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000d6f0:	ea c9 ff fc 	sub	r9,r5,-4
8000d6f4:	ee c8 00 20 	sub	r8,r7,32
8000d6f8:	2f 08       	sub	r8,-16
8000d6fa:	12 9b       	mov	r11,r9
8000d6fc:	10 9c       	mov	r12,r8
8000d6fe:	c8 1e       	rcall	8000d400 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000d700:	ee c9 00 38 	sub	r9,r7,56
8000d704:	ee c8 00 20 	sub	r8,r7,32
8000d708:	2e c8       	sub	r8,-20
8000d70a:	12 9b       	mov	r11,r9
8000d70c:	10 9c       	mov	r12,r8
8000d70e:	c5 fe       	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000d710:	ee c9 00 3c 	sub	r9,r7,60
8000d714:	ee c8 00 20 	sub	r8,r7,32
8000d718:	2e a8       	sub	r8,-22
8000d71a:	12 9b       	mov	r11,r9
8000d71c:	10 9c       	mov	r12,r8
8000d71e:	c5 7e       	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000d720:	ee c9 00 40 	sub	r9,r7,64
8000d724:	ee c8 00 20 	sub	r8,r7,32
8000d728:	2e 88       	sub	r8,-24
8000d72a:	12 9b       	mov	r11,r9
8000d72c:	10 9c       	mov	r12,r8
8000d72e:	c4 fe       	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000d730:	ee c9 00 44 	sub	r9,r7,68
8000d734:	ee c8 00 20 	sub	r8,r7,32
8000d738:	2e 68       	sub	r8,-26
8000d73a:	12 9b       	mov	r11,r9
8000d73c:	10 9c       	mov	r12,r8
8000d73e:	c4 7e       	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000d740:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000d744:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000d748:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d74c:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000d750:	ee ca 00 20 	sub	r10,r7,32
8000d754:	31 88       	mov	r8,24
8000d756:	31 e9       	mov	r9,30
8000d758:	31 8b       	mov	r11,24
8000d75a:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d75e:	fe b0 fd 89 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000d762:	2e ed       	sub	sp,-72
8000d764:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d768:	80 00       	ld.sh	r0,r0[0x0]
8000d76a:	d5 12       	popm	r0-r3,r11,lr

8000d76c <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d76c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d770:	1a 97       	mov	r7,sp
8000d772:	21 1d       	sub	sp,68
8000d774:	4c 66       	lddpc	r6,8000d88c <mavlink_msg_scaled_imu_send+0x120>
8000d776:	1e 26       	rsub	r6,pc
8000d778:	ee ce ff e4 	sub	lr,r7,-28
8000d77c:	ef 4c ff e4 	st.w	r7[-28],r12
8000d780:	ef 4b ff e0 	st.w	r7[-32],r11
8000d784:	14 91       	mov	r1,r10
8000d786:	12 92       	mov	r2,r9
8000d788:	10 93       	mov	r3,r8
8000d78a:	7c 05       	ld.w	r5,lr[0x0]
8000d78c:	7c 1c       	ld.w	r12,lr[0x4]
8000d78e:	7c 2b       	ld.w	r11,lr[0x8]
8000d790:	7c 3a       	ld.w	r10,lr[0xc]
8000d792:	7c 49       	ld.w	r9,lr[0x10]
8000d794:	7c 58       	ld.w	r8,lr[0x14]
8000d796:	02 9e       	mov	lr,r1
8000d798:	ef 5e ff dc 	st.h	r7[-36],lr
8000d79c:	04 9e       	mov	lr,r2
8000d79e:	ef 5e ff d8 	st.h	r7[-40],lr
8000d7a2:	06 9e       	mov	lr,r3
8000d7a4:	ef 5e ff d4 	st.h	r7[-44],lr
8000d7a8:	0a 9e       	mov	lr,r5
8000d7aa:	ef 5e ff d0 	st.h	r7[-48],lr
8000d7ae:	ef 5c ff cc 	st.h	r7[-52],r12
8000d7b2:	ef 5b ff c8 	st.h	r7[-56],r11
8000d7b6:	ef 5a ff c4 	st.h	r7[-60],r10
8000d7ba:	ef 59 ff c0 	st.h	r7[-64],r9
8000d7be:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d7c2:	ee c9 00 20 	sub	r9,r7,32
8000d7c6:	ee c8 00 18 	sub	r8,r7,24
8000d7ca:	12 9b       	mov	r11,r9
8000d7cc:	10 9c       	mov	r12,r8
8000d7ce:	c1 9e       	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000d7d0:	ee c9 00 24 	sub	r9,r7,36
8000d7d4:	ee c8 00 18 	sub	r8,r7,24
8000d7d8:	2f c8       	sub	r8,-4
8000d7da:	12 9b       	mov	r11,r9
8000d7dc:	10 9c       	mov	r12,r8
8000d7de:	fe b0 fd f7 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000d7e2:	ee c9 00 28 	sub	r9,r7,40
8000d7e6:	ee c8 00 18 	sub	r8,r7,24
8000d7ea:	2f a8       	sub	r8,-6
8000d7ec:	12 9b       	mov	r11,r9
8000d7ee:	10 9c       	mov	r12,r8
8000d7f0:	fe b0 fd ee 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000d7f4:	ee c9 00 2c 	sub	r9,r7,44
8000d7f8:	ee c8 00 18 	sub	r8,r7,24
8000d7fc:	2f 88       	sub	r8,-8
8000d7fe:	12 9b       	mov	r11,r9
8000d800:	10 9c       	mov	r12,r8
8000d802:	fe b0 fd e5 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000d806:	ee c9 00 30 	sub	r9,r7,48
8000d80a:	ee c8 00 18 	sub	r8,r7,24
8000d80e:	2f 68       	sub	r8,-10
8000d810:	12 9b       	mov	r11,r9
8000d812:	10 9c       	mov	r12,r8
8000d814:	fe b0 fd dc 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000d818:	ee c9 00 34 	sub	r9,r7,52
8000d81c:	ee c8 00 18 	sub	r8,r7,24
8000d820:	2f 48       	sub	r8,-12
8000d822:	12 9b       	mov	r11,r9
8000d824:	10 9c       	mov	r12,r8
8000d826:	fe b0 fd d3 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000d82a:	ee c9 00 38 	sub	r9,r7,56
8000d82e:	ee c8 00 18 	sub	r8,r7,24
8000d832:	2f 28       	sub	r8,-14
8000d834:	12 9b       	mov	r11,r9
8000d836:	10 9c       	mov	r12,r8
8000d838:	fe b0 fd ca 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000d83c:	ee c9 00 3c 	sub	r9,r7,60
8000d840:	ee c8 00 18 	sub	r8,r7,24
8000d844:	2f 08       	sub	r8,-16
8000d846:	12 9b       	mov	r11,r9
8000d848:	10 9c       	mov	r12,r8
8000d84a:	fe b0 fd c1 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000d84e:	ee c9 00 40 	sub	r9,r7,64
8000d852:	ee c8 00 18 	sub	r8,r7,24
8000d856:	2e e8       	sub	r8,-18
8000d858:	12 9b       	mov	r11,r9
8000d85a:	10 9c       	mov	r12,r8
8000d85c:	fe b0 fd b8 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000d860:	ee c9 00 44 	sub	r9,r7,68
8000d864:	ee c8 00 18 	sub	r8,r7,24
8000d868:	2e c8       	sub	r8,-20
8000d86a:	12 9b       	mov	r11,r9
8000d86c:	10 9c       	mov	r12,r8
8000d86e:	fe b0 fd af 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000d872:	ee ca 00 18 	sub	r10,r7,24
8000d876:	e0 68 00 aa 	mov	r8,170
8000d87a:	31 69       	mov	r9,22
8000d87c:	31 ab       	mov	r11,26
8000d87e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d882:	fe b0 fc f7 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000d886:	2e fd       	sub	sp,-68
8000d888:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d88c:	80 00       	ld.sh	r0,r0[0x0]
8000d88e:	d5 fa       	popm	r0-r11,lr

8000d890 <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d890:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d894:	1a 97       	mov	r7,sp
8000d896:	21 3d       	sub	sp,76
8000d898:	4c 76       	lddpc	r6,8000d9b4 <mavlink_msg_raw_imu_send+0x124>
8000d89a:	1e 26       	rsub	r6,pc
8000d89c:	ee ce ff e4 	sub	lr,r7,-28
8000d8a0:	ef 4c ff e0 	st.w	r7[-32],r12
8000d8a4:	ee eb ff d8 	st.d	r7[-40],r10
8000d8a8:	12 91       	mov	r1,r9
8000d8aa:	10 92       	mov	r2,r8
8000d8ac:	7c 03       	ld.w	r3,lr[0x0]
8000d8ae:	7c 15       	ld.w	r5,lr[0x4]
8000d8b0:	7c 2c       	ld.w	r12,lr[0x8]
8000d8b2:	7c 3b       	ld.w	r11,lr[0xc]
8000d8b4:	7c 4a       	ld.w	r10,lr[0x10]
8000d8b6:	7c 59       	ld.w	r9,lr[0x14]
8000d8b8:	7c 68       	ld.w	r8,lr[0x18]
8000d8ba:	02 9e       	mov	lr,r1
8000d8bc:	ef 5e ff d4 	st.h	r7[-44],lr
8000d8c0:	04 9e       	mov	lr,r2
8000d8c2:	ef 5e ff d0 	st.h	r7[-48],lr
8000d8c6:	06 9e       	mov	lr,r3
8000d8c8:	ef 5e ff cc 	st.h	r7[-52],lr
8000d8cc:	0a 9e       	mov	lr,r5
8000d8ce:	ef 5e ff c8 	st.h	r7[-56],lr
8000d8d2:	ef 5c ff c4 	st.h	r7[-60],r12
8000d8d6:	ef 5b ff c0 	st.h	r7[-64],r11
8000d8da:	ef 5a ff bc 	st.h	r7[-68],r10
8000d8de:	ef 59 ff b8 	st.h	r7[-72],r9
8000d8e2:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d8e6:	ee c9 00 28 	sub	r9,r7,40
8000d8ea:	ee c8 00 1c 	sub	r8,r7,28
8000d8ee:	12 9b       	mov	r11,r9
8000d8f0:	10 9c       	mov	r12,r8
8000d8f2:	fe b0 fd b3 	rcall	8000d458 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000d8f6:	ee c9 00 2c 	sub	r9,r7,44
8000d8fa:	ee c8 00 1c 	sub	r8,r7,28
8000d8fe:	2f 88       	sub	r8,-8
8000d900:	12 9b       	mov	r11,r9
8000d902:	10 9c       	mov	r12,r8
8000d904:	fe b0 fd 64 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000d908:	ee c9 00 30 	sub	r9,r7,48
8000d90c:	ee c8 00 1c 	sub	r8,r7,28
8000d910:	2f 68       	sub	r8,-10
8000d912:	12 9b       	mov	r11,r9
8000d914:	10 9c       	mov	r12,r8
8000d916:	fe b0 fd 5b 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000d91a:	ee c9 00 34 	sub	r9,r7,52
8000d91e:	ee c8 00 1c 	sub	r8,r7,28
8000d922:	2f 48       	sub	r8,-12
8000d924:	12 9b       	mov	r11,r9
8000d926:	10 9c       	mov	r12,r8
8000d928:	fe b0 fd 52 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000d92c:	ee c9 00 38 	sub	r9,r7,56
8000d930:	ee c8 00 1c 	sub	r8,r7,28
8000d934:	2f 28       	sub	r8,-14
8000d936:	12 9b       	mov	r11,r9
8000d938:	10 9c       	mov	r12,r8
8000d93a:	fe b0 fd 49 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000d93e:	ee c9 00 3c 	sub	r9,r7,60
8000d942:	ee c8 00 1c 	sub	r8,r7,28
8000d946:	2f 08       	sub	r8,-16
8000d948:	12 9b       	mov	r11,r9
8000d94a:	10 9c       	mov	r12,r8
8000d94c:	fe b0 fd 40 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000d950:	ee c9 00 40 	sub	r9,r7,64
8000d954:	ee c8 00 1c 	sub	r8,r7,28
8000d958:	2e e8       	sub	r8,-18
8000d95a:	12 9b       	mov	r11,r9
8000d95c:	10 9c       	mov	r12,r8
8000d95e:	fe b0 fd 37 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000d962:	ee c9 00 44 	sub	r9,r7,68
8000d966:	ee c8 00 1c 	sub	r8,r7,28
8000d96a:	2e c8       	sub	r8,-20
8000d96c:	12 9b       	mov	r11,r9
8000d96e:	10 9c       	mov	r12,r8
8000d970:	fe b0 fd 2e 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000d974:	ee c9 00 48 	sub	r9,r7,72
8000d978:	ee c8 00 1c 	sub	r8,r7,28
8000d97c:	2e a8       	sub	r8,-22
8000d97e:	12 9b       	mov	r11,r9
8000d980:	10 9c       	mov	r12,r8
8000d982:	fe b0 fd 25 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000d986:	ee c9 00 4c 	sub	r9,r7,76
8000d98a:	ee c8 00 1c 	sub	r8,r7,28
8000d98e:	2e 88       	sub	r8,-24
8000d990:	12 9b       	mov	r11,r9
8000d992:	10 9c       	mov	r12,r8
8000d994:	fe b0 fd 1c 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000d998:	ee ca 00 1c 	sub	r10,r7,28
8000d99c:	e0 68 00 90 	mov	r8,144
8000d9a0:	31 a9       	mov	r9,26
8000d9a2:	31 bb       	mov	r11,27
8000d9a4:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d9a8:	fe b0 fc 64 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000d9ac:	2e dd       	sub	sp,-76
8000d9ae:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d9b2:	00 00       	add	r0,r0
8000d9b4:	80 00       	ld.sh	r0,r0[0x0]
8000d9b6:	d7 1e       	*unknown*

8000d9b8 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000d9b8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d9bc:	1a 97       	mov	r7,sp
8000d9be:	20 9d       	sub	sp,36
8000d9c0:	49 e6       	lddpc	r6,8000da38 <mavlink_msg_scaled_pressure_send+0x80>
8000d9c2:	1e 26       	rsub	r6,pc
8000d9c4:	ef 4c ff ec 	st.w	r7[-20],r12
8000d9c8:	ef 4b ff e8 	st.w	r7[-24],r11
8000d9cc:	ef 4a ff e4 	st.w	r7[-28],r10
8000d9d0:	ef 49 ff e0 	st.w	r7[-32],r9
8000d9d4:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d9d8:	ee c9 00 18 	sub	r9,r7,24
8000d9dc:	ee c8 00 10 	sub	r8,r7,16
8000d9e0:	12 9b       	mov	r11,r9
8000d9e2:	10 9c       	mov	r12,r8
8000d9e4:	fe b0 fd 0e 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000d9e8:	ee c9 00 1c 	sub	r9,r7,28
8000d9ec:	ee c8 00 10 	sub	r8,r7,16
8000d9f0:	2f c8       	sub	r8,-4
8000d9f2:	12 9b       	mov	r11,r9
8000d9f4:	10 9c       	mov	r12,r8
8000d9f6:	fe b0 fd 05 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000d9fa:	ee c9 00 20 	sub	r9,r7,32
8000d9fe:	ee c8 00 10 	sub	r8,r7,16
8000da02:	2f 88       	sub	r8,-8
8000da04:	12 9b       	mov	r11,r9
8000da06:	10 9c       	mov	r12,r8
8000da08:	fe b0 fc fc 	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000da0c:	ee c9 00 24 	sub	r9,r7,36
8000da10:	ee c8 00 10 	sub	r8,r7,16
8000da14:	2f 48       	sub	r8,-12
8000da16:	12 9b       	mov	r11,r9
8000da18:	10 9c       	mov	r12,r8
8000da1a:	fe b0 fc d9 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000da1e:	ee ca 00 10 	sub	r10,r7,16
8000da22:	37 38       	mov	r8,115
8000da24:	30 e9       	mov	r9,14
8000da26:	31 db       	mov	r11,29
8000da28:	ee fc ff ec 	ld.w	r12,r7[-20]
8000da2c:	fe b0 fc 22 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000da30:	2f 7d       	sub	sp,-36
8000da32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000da36:	00 00       	add	r0,r0
8000da38:	80 00       	ld.sh	r0,r0[0x0]
8000da3a:	d8 46       	*unknown*

8000da3c <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000da3c:	eb cd 40 e0 	pushm	r5-r7,lr
8000da40:	1a 97       	mov	r7,sp
8000da42:	20 cd       	sub	sp,48
8000da44:	4a c6       	lddpc	r6,8000daf4 <mavlink_msg_attitude_send+0xb8>
8000da46:	1e 26       	rsub	r6,pc
8000da48:	ee c5 ff f0 	sub	r5,r7,-16
8000da4c:	ef 4c ff e0 	st.w	r7[-32],r12
8000da50:	ef 4b ff dc 	st.w	r7[-36],r11
8000da54:	ef 4a ff d8 	st.w	r7[-40],r10
8000da58:	ef 49 ff d4 	st.w	r7[-44],r9
8000da5c:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000da60:	ee c9 00 24 	sub	r9,r7,36
8000da64:	ee c8 00 1c 	sub	r8,r7,28
8000da68:	12 9b       	mov	r11,r9
8000da6a:	10 9c       	mov	r12,r8
8000da6c:	fe b0 fc ca 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000da70:	ee c9 00 28 	sub	r9,r7,40
8000da74:	ee c8 00 1c 	sub	r8,r7,28
8000da78:	2f c8       	sub	r8,-4
8000da7a:	12 9b       	mov	r11,r9
8000da7c:	10 9c       	mov	r12,r8
8000da7e:	fe b0 fc c1 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000da82:	ee c9 00 2c 	sub	r9,r7,44
8000da86:	ee c8 00 1c 	sub	r8,r7,28
8000da8a:	2f 88       	sub	r8,-8
8000da8c:	12 9b       	mov	r11,r9
8000da8e:	10 9c       	mov	r12,r8
8000da90:	fe b0 fc b8 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000da94:	ee c9 00 30 	sub	r9,r7,48
8000da98:	ee c8 00 1c 	sub	r8,r7,28
8000da9c:	2f 48       	sub	r8,-12
8000da9e:	12 9b       	mov	r11,r9
8000daa0:	10 9c       	mov	r12,r8
8000daa2:	fe b0 fc af 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000daa6:	0a 99       	mov	r9,r5
8000daa8:	ee c8 00 1c 	sub	r8,r7,28
8000daac:	2f 08       	sub	r8,-16
8000daae:	12 9b       	mov	r11,r9
8000dab0:	10 9c       	mov	r12,r8
8000dab2:	fe b0 fc a7 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000dab6:	ea c9 ff fc 	sub	r9,r5,-4
8000daba:	ee c8 00 1c 	sub	r8,r7,28
8000dabe:	2e c8       	sub	r8,-20
8000dac0:	12 9b       	mov	r11,r9
8000dac2:	10 9c       	mov	r12,r8
8000dac4:	fe b0 fc 9e 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000dac8:	ea c9 ff f8 	sub	r9,r5,-8
8000dacc:	ee c8 00 1c 	sub	r8,r7,28
8000dad0:	2e 88       	sub	r8,-24
8000dad2:	12 9b       	mov	r11,r9
8000dad4:	10 9c       	mov	r12,r8
8000dad6:	fe b0 fc 95 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000dada:	ee ca 00 1c 	sub	r10,r7,28
8000dade:	32 78       	mov	r8,39
8000dae0:	31 c9       	mov	r9,28
8000dae2:	31 eb       	mov	r11,30
8000dae4:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dae8:	fe b0 fb c4 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000daec:	2f 4d       	sub	sp,-48
8000daee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000daf2:	00 00       	add	r0,r0
8000daf4:	80 00       	ld.sh	r0,r0[0x0]
8000daf6:	d8 ca       	popm	r8-r10,pc,r12=0

8000daf8 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000daf8:	eb cd 40 e0 	pushm	r5-r7,lr
8000dafc:	1a 97       	mov	r7,sp
8000dafe:	20 dd       	sub	sp,52
8000db00:	4b 16       	lddpc	r6,8000dbc4 <mavlink_msg_attitude_quaternion_send+0xcc>
8000db02:	1e 26       	rsub	r6,pc
8000db04:	ee c5 ff f0 	sub	r5,r7,-16
8000db08:	ef 4c ff dc 	st.w	r7[-36],r12
8000db0c:	ef 4b ff d8 	st.w	r7[-40],r11
8000db10:	ef 4a ff d4 	st.w	r7[-44],r10
8000db14:	ef 49 ff d0 	st.w	r7[-48],r9
8000db18:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000db1c:	ee c9 00 28 	sub	r9,r7,40
8000db20:	ee c8 00 20 	sub	r8,r7,32
8000db24:	12 9b       	mov	r11,r9
8000db26:	10 9c       	mov	r12,r8
8000db28:	fe b0 fc 6c 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000db2c:	ee c9 00 2c 	sub	r9,r7,44
8000db30:	ee c8 00 20 	sub	r8,r7,32
8000db34:	2f c8       	sub	r8,-4
8000db36:	12 9b       	mov	r11,r9
8000db38:	10 9c       	mov	r12,r8
8000db3a:	fe b0 fc 63 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000db3e:	ee c9 00 30 	sub	r9,r7,48
8000db42:	ee c8 00 20 	sub	r8,r7,32
8000db46:	2f 88       	sub	r8,-8
8000db48:	12 9b       	mov	r11,r9
8000db4a:	10 9c       	mov	r12,r8
8000db4c:	fe b0 fc 5a 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000db50:	ee c9 00 34 	sub	r9,r7,52
8000db54:	ee c8 00 20 	sub	r8,r7,32
8000db58:	2f 48       	sub	r8,-12
8000db5a:	12 9b       	mov	r11,r9
8000db5c:	10 9c       	mov	r12,r8
8000db5e:	fe b0 fc 51 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000db62:	0a 99       	mov	r9,r5
8000db64:	ee c8 00 20 	sub	r8,r7,32
8000db68:	2f 08       	sub	r8,-16
8000db6a:	12 9b       	mov	r11,r9
8000db6c:	10 9c       	mov	r12,r8
8000db6e:	fe b0 fc 49 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000db72:	ea c9 ff fc 	sub	r9,r5,-4
8000db76:	ee c8 00 20 	sub	r8,r7,32
8000db7a:	2e c8       	sub	r8,-20
8000db7c:	12 9b       	mov	r11,r9
8000db7e:	10 9c       	mov	r12,r8
8000db80:	fe b0 fc 40 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000db84:	ea c9 ff f8 	sub	r9,r5,-8
8000db88:	ee c8 00 20 	sub	r8,r7,32
8000db8c:	2e 88       	sub	r8,-24
8000db8e:	12 9b       	mov	r11,r9
8000db90:	10 9c       	mov	r12,r8
8000db92:	fe b0 fc 37 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000db96:	ea c9 ff f4 	sub	r9,r5,-12
8000db9a:	ee c8 00 20 	sub	r8,r7,32
8000db9e:	2e 48       	sub	r8,-28
8000dba0:	12 9b       	mov	r11,r9
8000dba2:	10 9c       	mov	r12,r8
8000dba4:	fe b0 fc 2e 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000dba8:	ee ca 00 20 	sub	r10,r7,32
8000dbac:	e0 68 00 f6 	mov	r8,246
8000dbb0:	32 09       	mov	r9,32
8000dbb2:	31 fb       	mov	r11,31
8000dbb4:	ee fc ff dc 	ld.w	r12,r7[-36]
8000dbb8:	fe b0 fb 5c 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000dbbc:	2f 3d       	sub	sp,-52
8000dbbe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dbc2:	00 00       	add	r0,r0
8000dbc4:	80 00       	ld.sh	r0,r0[0x0]
8000dbc6:	d9 86       	*unknown*

8000dbc8 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000dbc8:	eb cd 40 e0 	pushm	r5-r7,lr
8000dbcc:	1a 97       	mov	r7,sp
8000dbce:	20 cd       	sub	sp,48
8000dbd0:	4a c6       	lddpc	r6,8000dc80 <mavlink_msg_local_position_ned_send+0xb8>
8000dbd2:	1e 26       	rsub	r6,pc
8000dbd4:	ee c5 ff f0 	sub	r5,r7,-16
8000dbd8:	ef 4c ff e0 	st.w	r7[-32],r12
8000dbdc:	ef 4b ff dc 	st.w	r7[-36],r11
8000dbe0:	ef 4a ff d8 	st.w	r7[-40],r10
8000dbe4:	ef 49 ff d4 	st.w	r7[-44],r9
8000dbe8:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dbec:	ee c9 00 24 	sub	r9,r7,36
8000dbf0:	ee c8 00 1c 	sub	r8,r7,28
8000dbf4:	12 9b       	mov	r11,r9
8000dbf6:	10 9c       	mov	r12,r8
8000dbf8:	fe b0 fc 04 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000dbfc:	ee c9 00 28 	sub	r9,r7,40
8000dc00:	ee c8 00 1c 	sub	r8,r7,28
8000dc04:	2f c8       	sub	r8,-4
8000dc06:	12 9b       	mov	r11,r9
8000dc08:	10 9c       	mov	r12,r8
8000dc0a:	fe b0 fb fb 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000dc0e:	ee c9 00 2c 	sub	r9,r7,44
8000dc12:	ee c8 00 1c 	sub	r8,r7,28
8000dc16:	2f 88       	sub	r8,-8
8000dc18:	12 9b       	mov	r11,r9
8000dc1a:	10 9c       	mov	r12,r8
8000dc1c:	fe b0 fb f2 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000dc20:	ee c9 00 30 	sub	r9,r7,48
8000dc24:	ee c8 00 1c 	sub	r8,r7,28
8000dc28:	2f 48       	sub	r8,-12
8000dc2a:	12 9b       	mov	r11,r9
8000dc2c:	10 9c       	mov	r12,r8
8000dc2e:	fe b0 fb e9 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000dc32:	0a 99       	mov	r9,r5
8000dc34:	ee c8 00 1c 	sub	r8,r7,28
8000dc38:	2f 08       	sub	r8,-16
8000dc3a:	12 9b       	mov	r11,r9
8000dc3c:	10 9c       	mov	r12,r8
8000dc3e:	fe b0 fb e1 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000dc42:	ea c9 ff fc 	sub	r9,r5,-4
8000dc46:	ee c8 00 1c 	sub	r8,r7,28
8000dc4a:	2e c8       	sub	r8,-20
8000dc4c:	12 9b       	mov	r11,r9
8000dc4e:	10 9c       	mov	r12,r8
8000dc50:	fe b0 fb d8 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000dc54:	ea c9 ff f8 	sub	r9,r5,-8
8000dc58:	ee c8 00 1c 	sub	r8,r7,28
8000dc5c:	2e 88       	sub	r8,-24
8000dc5e:	12 9b       	mov	r11,r9
8000dc60:	10 9c       	mov	r12,r8
8000dc62:	fe b0 fb cf 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000dc66:	ee ca 00 1c 	sub	r10,r7,28
8000dc6a:	e0 68 00 b9 	mov	r8,185
8000dc6e:	31 c9       	mov	r9,28
8000dc70:	32 0b       	mov	r11,32
8000dc72:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dc76:	fe b0 fa fd 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000dc7a:	2f 4d       	sub	sp,-48
8000dc7c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dc80:	80 00       	ld.sh	r0,r0[0x0]
8000dc82:	da 56       	*unknown*

8000dc84 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000dc84:	eb cd 40 e0 	pushm	r5-r7,lr
8000dc88:	1a 97       	mov	r7,sp
8000dc8a:	21 0d       	sub	sp,64
8000dc8c:	4b b6       	lddpc	r6,8000dd78 <mavlink_msg_global_position_int_send+0xf4>
8000dc8e:	1e 26       	rsub	r6,pc
8000dc90:	ee c5 ff f0 	sub	r5,r7,-16
8000dc94:	ef 4c ff e0 	st.w	r7[-32],r12
8000dc98:	ef 4b ff dc 	st.w	r7[-36],r11
8000dc9c:	ef 4a ff d8 	st.w	r7[-40],r10
8000dca0:	ef 49 ff d4 	st.w	r7[-44],r9
8000dca4:	ef 48 ff d0 	st.w	r7[-48],r8
8000dca8:	6a 1b       	ld.w	r11,r5[0x4]
8000dcaa:	6a 2a       	ld.w	r10,r5[0x8]
8000dcac:	6a 39       	ld.w	r9,r5[0xc]
8000dcae:	6a 48       	ld.w	r8,r5[0x10]
8000dcb0:	ef 5b ff cc 	st.h	r7[-52],r11
8000dcb4:	ef 5a ff c8 	st.h	r7[-56],r10
8000dcb8:	ef 59 ff c4 	st.h	r7[-60],r9
8000dcbc:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dcc0:	ee c9 00 24 	sub	r9,r7,36
8000dcc4:	ee c8 00 1c 	sub	r8,r7,28
8000dcc8:	12 9b       	mov	r11,r9
8000dcca:	10 9c       	mov	r12,r8
8000dccc:	fe b0 fb 9a 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000dcd0:	ee c9 00 28 	sub	r9,r7,40
8000dcd4:	ee c8 00 1c 	sub	r8,r7,28
8000dcd8:	2f c8       	sub	r8,-4
8000dcda:	12 9b       	mov	r11,r9
8000dcdc:	10 9c       	mov	r12,r8
8000dcde:	fe b0 fb 91 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000dce2:	ee c9 00 2c 	sub	r9,r7,44
8000dce6:	ee c8 00 1c 	sub	r8,r7,28
8000dcea:	2f 88       	sub	r8,-8
8000dcec:	12 9b       	mov	r11,r9
8000dcee:	10 9c       	mov	r12,r8
8000dcf0:	fe b0 fb 88 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000dcf4:	ee c9 00 30 	sub	r9,r7,48
8000dcf8:	ee c8 00 1c 	sub	r8,r7,28
8000dcfc:	2f 48       	sub	r8,-12
8000dcfe:	12 9b       	mov	r11,r9
8000dd00:	10 9c       	mov	r12,r8
8000dd02:	fe b0 fb 7f 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000dd06:	0a 99       	mov	r9,r5
8000dd08:	ee c8 00 1c 	sub	r8,r7,28
8000dd0c:	2f 08       	sub	r8,-16
8000dd0e:	12 9b       	mov	r11,r9
8000dd10:	10 9c       	mov	r12,r8
8000dd12:	fe b0 fb 77 	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000dd16:	ee c9 00 34 	sub	r9,r7,52
8000dd1a:	ee c8 00 1c 	sub	r8,r7,28
8000dd1e:	2e c8       	sub	r8,-20
8000dd20:	12 9b       	mov	r11,r9
8000dd22:	10 9c       	mov	r12,r8
8000dd24:	fe b0 fb 54 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000dd28:	ee c9 00 38 	sub	r9,r7,56
8000dd2c:	ee c8 00 1c 	sub	r8,r7,28
8000dd30:	2e a8       	sub	r8,-22
8000dd32:	12 9b       	mov	r11,r9
8000dd34:	10 9c       	mov	r12,r8
8000dd36:	fe b0 fb 4b 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000dd3a:	ee c9 00 3c 	sub	r9,r7,60
8000dd3e:	ee c8 00 1c 	sub	r8,r7,28
8000dd42:	2e 88       	sub	r8,-24
8000dd44:	12 9b       	mov	r11,r9
8000dd46:	10 9c       	mov	r12,r8
8000dd48:	fe b0 fb 42 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000dd4c:	ee c9 00 40 	sub	r9,r7,64
8000dd50:	ee c8 00 1c 	sub	r8,r7,28
8000dd54:	2e 68       	sub	r8,-26
8000dd56:	12 9b       	mov	r11,r9
8000dd58:	10 9c       	mov	r12,r8
8000dd5a:	fe b0 fb 39 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000dd5e:	ee ca 00 1c 	sub	r10,r7,28
8000dd62:	36 88       	mov	r8,104
8000dd64:	31 c9       	mov	r9,28
8000dd66:	32 1b       	mov	r11,33
8000dd68:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dd6c:	fe b0 fa 82 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000dd70:	2f 0d       	sub	sp,-64
8000dd72:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dd76:	00 00       	add	r0,r0
8000dd78:	80 00       	ld.sh	r0,r0[0x0]
8000dd7a:	db 12       	popm	r0-r3,r11-r12,pc

8000dd7c <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000dd7c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000dd80:	1a 97       	mov	r7,sp
8000dd82:	21 2d       	sub	sp,72
8000dd84:	4c 86       	lddpc	r6,8000dea4 <mavlink_msg_rc_channels_scaled_send+0x128>
8000dd86:	1e 26       	rsub	r6,pc
8000dd88:	ee ce ff e0 	sub	lr,r7,-32
8000dd8c:	ef 4c ff e4 	st.w	r7[-28],r12
8000dd90:	ef 4b ff e0 	st.w	r7[-32],r11
8000dd94:	14 90       	mov	r0,r10
8000dd96:	12 91       	mov	r1,r9
8000dd98:	10 92       	mov	r2,r8
8000dd9a:	7c 03       	ld.w	r3,lr[0x0]
8000dd9c:	7c 15       	ld.w	r5,lr[0x4]
8000dd9e:	7c 2c       	ld.w	r12,lr[0x8]
8000dda0:	7c 3b       	ld.w	r11,lr[0xc]
8000dda2:	7c 4a       	ld.w	r10,lr[0x10]
8000dda4:	7c 59       	ld.w	r9,lr[0x14]
8000dda6:	7c 68       	ld.w	r8,lr[0x18]
8000dda8:	00 9e       	mov	lr,r0
8000ddaa:	ef 6e ff dc 	st.b	r7[-36],lr
8000ddae:	02 9e       	mov	lr,r1
8000ddb0:	ef 5e ff d8 	st.h	r7[-40],lr
8000ddb4:	04 9e       	mov	lr,r2
8000ddb6:	ef 5e ff d4 	st.h	r7[-44],lr
8000ddba:	06 9e       	mov	lr,r3
8000ddbc:	ef 5e ff d0 	st.h	r7[-48],lr
8000ddc0:	0a 9e       	mov	lr,r5
8000ddc2:	ef 5e ff cc 	st.h	r7[-52],lr
8000ddc6:	ef 5c ff c8 	st.h	r7[-56],r12
8000ddca:	ef 5b ff c4 	st.h	r7[-60],r11
8000ddce:	ef 5a ff c0 	st.h	r7[-64],r10
8000ddd2:	ef 59 ff bc 	st.h	r7[-68],r9
8000ddd6:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ddda:	ee c9 00 20 	sub	r9,r7,32
8000ddde:	ee c8 00 18 	sub	r8,r7,24
8000dde2:	12 9b       	mov	r11,r9
8000dde4:	10 9c       	mov	r12,r8
8000dde6:	fe b0 fb 0d 	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000ddea:	ee c9 00 28 	sub	r9,r7,40
8000ddee:	ee c8 00 18 	sub	r8,r7,24
8000ddf2:	2f c8       	sub	r8,-4
8000ddf4:	12 9b       	mov	r11,r9
8000ddf6:	10 9c       	mov	r12,r8
8000ddf8:	fe b0 fa ea 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000ddfc:	ee c9 00 2c 	sub	r9,r7,44
8000de00:	ee c8 00 18 	sub	r8,r7,24
8000de04:	2f a8       	sub	r8,-6
8000de06:	12 9b       	mov	r11,r9
8000de08:	10 9c       	mov	r12,r8
8000de0a:	fe b0 fa e1 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000de0e:	ee c9 00 30 	sub	r9,r7,48
8000de12:	ee c8 00 18 	sub	r8,r7,24
8000de16:	2f 88       	sub	r8,-8
8000de18:	12 9b       	mov	r11,r9
8000de1a:	10 9c       	mov	r12,r8
8000de1c:	fe b0 fa d8 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000de20:	ee c9 00 34 	sub	r9,r7,52
8000de24:	ee c8 00 18 	sub	r8,r7,24
8000de28:	2f 68       	sub	r8,-10
8000de2a:	12 9b       	mov	r11,r9
8000de2c:	10 9c       	mov	r12,r8
8000de2e:	fe b0 fa cf 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000de32:	ee c9 00 38 	sub	r9,r7,56
8000de36:	ee c8 00 18 	sub	r8,r7,24
8000de3a:	2f 48       	sub	r8,-12
8000de3c:	12 9b       	mov	r11,r9
8000de3e:	10 9c       	mov	r12,r8
8000de40:	fe b0 fa c6 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000de44:	ee c9 00 3c 	sub	r9,r7,60
8000de48:	ee c8 00 18 	sub	r8,r7,24
8000de4c:	2f 28       	sub	r8,-14
8000de4e:	12 9b       	mov	r11,r9
8000de50:	10 9c       	mov	r12,r8
8000de52:	fe b0 fa bd 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000de56:	ee c9 00 40 	sub	r9,r7,64
8000de5a:	ee c8 00 18 	sub	r8,r7,24
8000de5e:	2f 08       	sub	r8,-16
8000de60:	12 9b       	mov	r11,r9
8000de62:	10 9c       	mov	r12,r8
8000de64:	fe b0 fa b4 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000de68:	ee c9 00 44 	sub	r9,r7,68
8000de6c:	ee c8 00 18 	sub	r8,r7,24
8000de70:	2e e8       	sub	r8,-18
8000de72:	12 9b       	mov	r11,r9
8000de74:	10 9c       	mov	r12,r8
8000de76:	fe b0 fa ab 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000de7a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000de7e:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000de82:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000de86:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000de8a:	ee ca 00 18 	sub	r10,r7,24
8000de8e:	e0 68 00 ed 	mov	r8,237
8000de92:	31 69       	mov	r9,22
8000de94:	32 2b       	mov	r11,34
8000de96:	ee fc ff e4 	ld.w	r12,r7[-28]
8000de9a:	fe b0 f9 eb 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000de9e:	2e ed       	sub	sp,-72
8000dea0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000dea4:	80 00       	ld.sh	r0,r0[0x0]
8000dea6:	dc 0a       	popm	pc,r12=-1

8000dea8 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000dea8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000deac:	1a 97       	mov	r7,sp
8000deae:	21 2d       	sub	sp,72
8000deb0:	4c 86       	lddpc	r6,8000dfd0 <mavlink_msg_rc_channels_raw_send+0x128>
8000deb2:	1e 26       	rsub	r6,pc
8000deb4:	ee ce ff e0 	sub	lr,r7,-32
8000deb8:	ef 4c ff e4 	st.w	r7[-28],r12
8000debc:	ef 4b ff e0 	st.w	r7[-32],r11
8000dec0:	14 90       	mov	r0,r10
8000dec2:	12 91       	mov	r1,r9
8000dec4:	10 92       	mov	r2,r8
8000dec6:	7c 03       	ld.w	r3,lr[0x0]
8000dec8:	7c 15       	ld.w	r5,lr[0x4]
8000deca:	7c 2c       	ld.w	r12,lr[0x8]
8000decc:	7c 3b       	ld.w	r11,lr[0xc]
8000dece:	7c 4a       	ld.w	r10,lr[0x10]
8000ded0:	7c 59       	ld.w	r9,lr[0x14]
8000ded2:	7c 68       	ld.w	r8,lr[0x18]
8000ded4:	00 9e       	mov	lr,r0
8000ded6:	ef 6e ff dc 	st.b	r7[-36],lr
8000deda:	02 9e       	mov	lr,r1
8000dedc:	ef 5e ff d8 	st.h	r7[-40],lr
8000dee0:	04 9e       	mov	lr,r2
8000dee2:	ef 5e ff d4 	st.h	r7[-44],lr
8000dee6:	06 9e       	mov	lr,r3
8000dee8:	ef 5e ff d0 	st.h	r7[-48],lr
8000deec:	0a 9e       	mov	lr,r5
8000deee:	ef 5e ff cc 	st.h	r7[-52],lr
8000def2:	ef 5c ff c8 	st.h	r7[-56],r12
8000def6:	ef 5b ff c4 	st.h	r7[-60],r11
8000defa:	ef 5a ff c0 	st.h	r7[-64],r10
8000defe:	ef 59 ff bc 	st.h	r7[-68],r9
8000df02:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000df06:	ee c9 00 20 	sub	r9,r7,32
8000df0a:	ee c8 00 18 	sub	r8,r7,24
8000df0e:	12 9b       	mov	r11,r9
8000df10:	10 9c       	mov	r12,r8
8000df12:	fe b0 fa 77 	rcall	8000d400 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000df16:	ee c9 00 28 	sub	r9,r7,40
8000df1a:	ee c8 00 18 	sub	r8,r7,24
8000df1e:	2f c8       	sub	r8,-4
8000df20:	12 9b       	mov	r11,r9
8000df22:	10 9c       	mov	r12,r8
8000df24:	fe b0 fa 54 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000df28:	ee c9 00 2c 	sub	r9,r7,44
8000df2c:	ee c8 00 18 	sub	r8,r7,24
8000df30:	2f a8       	sub	r8,-6
8000df32:	12 9b       	mov	r11,r9
8000df34:	10 9c       	mov	r12,r8
8000df36:	fe b0 fa 4b 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000df3a:	ee c9 00 30 	sub	r9,r7,48
8000df3e:	ee c8 00 18 	sub	r8,r7,24
8000df42:	2f 88       	sub	r8,-8
8000df44:	12 9b       	mov	r11,r9
8000df46:	10 9c       	mov	r12,r8
8000df48:	fe b0 fa 42 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000df4c:	ee c9 00 34 	sub	r9,r7,52
8000df50:	ee c8 00 18 	sub	r8,r7,24
8000df54:	2f 68       	sub	r8,-10
8000df56:	12 9b       	mov	r11,r9
8000df58:	10 9c       	mov	r12,r8
8000df5a:	fe b0 fa 39 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000df5e:	ee c9 00 38 	sub	r9,r7,56
8000df62:	ee c8 00 18 	sub	r8,r7,24
8000df66:	2f 48       	sub	r8,-12
8000df68:	12 9b       	mov	r11,r9
8000df6a:	10 9c       	mov	r12,r8
8000df6c:	fe b0 fa 30 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000df70:	ee c9 00 3c 	sub	r9,r7,60
8000df74:	ee c8 00 18 	sub	r8,r7,24
8000df78:	2f 28       	sub	r8,-14
8000df7a:	12 9b       	mov	r11,r9
8000df7c:	10 9c       	mov	r12,r8
8000df7e:	fe b0 fa 27 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000df82:	ee c9 00 40 	sub	r9,r7,64
8000df86:	ee c8 00 18 	sub	r8,r7,24
8000df8a:	2f 08       	sub	r8,-16
8000df8c:	12 9b       	mov	r11,r9
8000df8e:	10 9c       	mov	r12,r8
8000df90:	fe b0 fa 1e 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000df94:	ee c9 00 44 	sub	r9,r7,68
8000df98:	ee c8 00 18 	sub	r8,r7,24
8000df9c:	2e e8       	sub	r8,-18
8000df9e:	12 9b       	mov	r11,r9
8000dfa0:	10 9c       	mov	r12,r8
8000dfa2:	fe b0 fa 15 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000dfa6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000dfaa:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000dfae:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000dfb2:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000dfb6:	ee ca 00 18 	sub	r10,r7,24
8000dfba:	e0 68 00 f4 	mov	r8,244
8000dfbe:	31 69       	mov	r9,22
8000dfc0:	32 3b       	mov	r11,35
8000dfc2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000dfc6:	fe b0 f9 55 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000dfca:	2e ed       	sub	sp,-72
8000dfcc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000dfd0:	80 00       	ld.sh	r0,r0[0x0]
8000dfd2:	dd 36       	*unknown*

8000dfd4 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000dfd4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000dfd8:	1a 97       	mov	r7,sp
8000dfda:	21 1d       	sub	sp,68
8000dfdc:	4c 46       	lddpc	r6,8000e0ec <mavlink_msg_servo_output_raw_send+0x118>
8000dfde:	1e 26       	rsub	r6,pc
8000dfe0:	ee ce ff e4 	sub	lr,r7,-28
8000dfe4:	ef 4c ff e4 	st.w	r7[-28],r12
8000dfe8:	ef 4b ff e0 	st.w	r7[-32],r11
8000dfec:	14 91       	mov	r1,r10
8000dfee:	12 92       	mov	r2,r9
8000dff0:	10 93       	mov	r3,r8
8000dff2:	7c 05       	ld.w	r5,lr[0x0]
8000dff4:	7c 1c       	ld.w	r12,lr[0x4]
8000dff6:	7c 2b       	ld.w	r11,lr[0x8]
8000dff8:	7c 3a       	ld.w	r10,lr[0xc]
8000dffa:	7c 49       	ld.w	r9,lr[0x10]
8000dffc:	7c 58       	ld.w	r8,lr[0x14]
8000dffe:	02 9e       	mov	lr,r1
8000e000:	ef 6e ff dc 	st.b	r7[-36],lr
8000e004:	04 9e       	mov	lr,r2
8000e006:	ef 5e ff d8 	st.h	r7[-40],lr
8000e00a:	06 9e       	mov	lr,r3
8000e00c:	ef 5e ff d4 	st.h	r7[-44],lr
8000e010:	0a 9e       	mov	lr,r5
8000e012:	ef 5e ff d0 	st.h	r7[-48],lr
8000e016:	ef 5c ff cc 	st.h	r7[-52],r12
8000e01a:	ef 5b ff c8 	st.h	r7[-56],r11
8000e01e:	ef 5a ff c4 	st.h	r7[-60],r10
8000e022:	ef 59 ff c0 	st.h	r7[-64],r9
8000e026:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000e02a:	ee c9 00 20 	sub	r9,r7,32
8000e02e:	ee c8 00 18 	sub	r8,r7,24
8000e032:	12 9b       	mov	r11,r9
8000e034:	10 9c       	mov	r12,r8
8000e036:	fe b0 f9 e5 	rcall	8000d400 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000e03a:	ee c9 00 28 	sub	r9,r7,40
8000e03e:	ee c8 00 18 	sub	r8,r7,24
8000e042:	2f c8       	sub	r8,-4
8000e044:	12 9b       	mov	r11,r9
8000e046:	10 9c       	mov	r12,r8
8000e048:	fe b0 f9 c2 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000e04c:	ee c9 00 2c 	sub	r9,r7,44
8000e050:	ee c8 00 18 	sub	r8,r7,24
8000e054:	2f a8       	sub	r8,-6
8000e056:	12 9b       	mov	r11,r9
8000e058:	10 9c       	mov	r12,r8
8000e05a:	fe b0 f9 b9 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000e05e:	ee c9 00 30 	sub	r9,r7,48
8000e062:	ee c8 00 18 	sub	r8,r7,24
8000e066:	2f 88       	sub	r8,-8
8000e068:	12 9b       	mov	r11,r9
8000e06a:	10 9c       	mov	r12,r8
8000e06c:	fe b0 f9 b0 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000e070:	ee c9 00 34 	sub	r9,r7,52
8000e074:	ee c8 00 18 	sub	r8,r7,24
8000e078:	2f 68       	sub	r8,-10
8000e07a:	12 9b       	mov	r11,r9
8000e07c:	10 9c       	mov	r12,r8
8000e07e:	fe b0 f9 a7 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000e082:	ee c9 00 38 	sub	r9,r7,56
8000e086:	ee c8 00 18 	sub	r8,r7,24
8000e08a:	2f 48       	sub	r8,-12
8000e08c:	12 9b       	mov	r11,r9
8000e08e:	10 9c       	mov	r12,r8
8000e090:	fe b0 f9 9e 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000e094:	ee c9 00 3c 	sub	r9,r7,60
8000e098:	ee c8 00 18 	sub	r8,r7,24
8000e09c:	2f 28       	sub	r8,-14
8000e09e:	12 9b       	mov	r11,r9
8000e0a0:	10 9c       	mov	r12,r8
8000e0a2:	fe b0 f9 95 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000e0a6:	ee c9 00 40 	sub	r9,r7,64
8000e0aa:	ee c8 00 18 	sub	r8,r7,24
8000e0ae:	2f 08       	sub	r8,-16
8000e0b0:	12 9b       	mov	r11,r9
8000e0b2:	10 9c       	mov	r12,r8
8000e0b4:	fe b0 f9 8c 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000e0b8:	ee c9 00 44 	sub	r9,r7,68
8000e0bc:	ee c8 00 18 	sub	r8,r7,24
8000e0c0:	2e e8       	sub	r8,-18
8000e0c2:	12 9b       	mov	r11,r9
8000e0c4:	10 9c       	mov	r12,r8
8000e0c6:	fe b0 f9 83 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e0ca:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e0ce:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000e0d2:	ee ca 00 18 	sub	r10,r7,24
8000e0d6:	e0 68 00 de 	mov	r8,222
8000e0da:	31 59       	mov	r9,21
8000e0dc:	32 4b       	mov	r11,36
8000e0de:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e0e2:	fe b0 f8 c7 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000e0e6:	2e fd       	sub	sp,-68
8000e0e8:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000e0ec:	80 00       	ld.sh	r0,r0[0x0]
8000e0ee:	de 62       	popm	r4-r9,r12,lr-pc

8000e0f0 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000e0f0:	eb cd 40 e0 	pushm	r5-r7,lr
8000e0f4:	1a 97       	mov	r7,sp
8000e0f6:	20 ad       	sub	sp,40
8000e0f8:	4a 36       	lddpc	r6,8000e184 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000e0fa:	1e 26       	rsub	r6,pc
8000e0fc:	ee c5 ff f0 	sub	r5,r7,-16
8000e100:	ef 4c ff e8 	st.w	r7[-24],r12
8000e104:	ef 4b ff e4 	st.w	r7[-28],r11
8000e108:	ef 4a ff e0 	st.w	r7[-32],r10
8000e10c:	ef 49 ff dc 	st.w	r7[-36],r9
8000e110:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e114:	ee c9 00 1c 	sub	r9,r7,28
8000e118:	ee c8 00 14 	sub	r8,r7,20
8000e11c:	12 9b       	mov	r11,r9
8000e11e:	10 9c       	mov	r12,r8
8000e120:	fe b0 f9 70 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000e124:	ee c9 00 20 	sub	r9,r7,32
8000e128:	ee c8 00 14 	sub	r8,r7,20
8000e12c:	2f c8       	sub	r8,-4
8000e12e:	12 9b       	mov	r11,r9
8000e130:	10 9c       	mov	r12,r8
8000e132:	fe b0 f9 67 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000e136:	ee c9 00 24 	sub	r9,r7,36
8000e13a:	ee c8 00 14 	sub	r8,r7,20
8000e13e:	2f 88       	sub	r8,-8
8000e140:	12 9b       	mov	r11,r9
8000e142:	10 9c       	mov	r12,r8
8000e144:	fe b0 f9 5e 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000e148:	ee c9 00 28 	sub	r9,r7,40
8000e14c:	ee c8 00 14 	sub	r8,r7,20
8000e150:	2f 48       	sub	r8,-12
8000e152:	12 9b       	mov	r11,r9
8000e154:	10 9c       	mov	r12,r8
8000e156:	fe b0 f9 55 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e15a:	0a 99       	mov	r9,r5
8000e15c:	ee c8 00 14 	sub	r8,r7,20
8000e160:	2f 08       	sub	r8,-16
8000e162:	12 9b       	mov	r11,r9
8000e164:	10 9c       	mov	r12,r8
8000e166:	fe b0 f9 4d 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000e16a:	ee ca 00 14 	sub	r10,r7,20
8000e16e:	e0 68 00 ef 	mov	r8,239
8000e172:	31 49       	mov	r9,20
8000e174:	33 ab       	mov	r11,58
8000e176:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e17a:	fe b0 f8 7b 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e17e:	2f 6d       	sub	sp,-40
8000e180:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e184:	80 00       	ld.sh	r0,r0[0x0]
8000e186:	df 7e       	*unknown*

8000e188 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000e188:	eb cd 40 e0 	pushm	r5-r7,lr
8000e18c:	1a 97       	mov	r7,sp
8000e18e:	20 ad       	sub	sp,40
8000e190:	4a 36       	lddpc	r6,8000e21c <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000e192:	1e 26       	rsub	r6,pc
8000e194:	ee c5 ff f0 	sub	r5,r7,-16
8000e198:	ef 4c ff e8 	st.w	r7[-24],r12
8000e19c:	ef 4b ff e4 	st.w	r7[-28],r11
8000e1a0:	ef 4a ff e0 	st.w	r7[-32],r10
8000e1a4:	ef 49 ff dc 	st.w	r7[-36],r9
8000e1a8:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e1ac:	ee c9 00 1c 	sub	r9,r7,28
8000e1b0:	ee c8 00 14 	sub	r8,r7,20
8000e1b4:	12 9b       	mov	r11,r9
8000e1b6:	10 9c       	mov	r12,r8
8000e1b8:	fe b0 f9 24 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000e1bc:	ee c9 00 20 	sub	r9,r7,32
8000e1c0:	ee c8 00 14 	sub	r8,r7,20
8000e1c4:	2f c8       	sub	r8,-4
8000e1c6:	12 9b       	mov	r11,r9
8000e1c8:	10 9c       	mov	r12,r8
8000e1ca:	fe b0 f9 1b 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000e1ce:	ee c9 00 24 	sub	r9,r7,36
8000e1d2:	ee c8 00 14 	sub	r8,r7,20
8000e1d6:	2f 88       	sub	r8,-8
8000e1d8:	12 9b       	mov	r11,r9
8000e1da:	10 9c       	mov	r12,r8
8000e1dc:	fe b0 f9 12 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000e1e0:	ee c9 00 28 	sub	r9,r7,40
8000e1e4:	ee c8 00 14 	sub	r8,r7,20
8000e1e8:	2f 48       	sub	r8,-12
8000e1ea:	12 9b       	mov	r11,r9
8000e1ec:	10 9c       	mov	r12,r8
8000e1ee:	fe b0 f9 09 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e1f2:	0a 99       	mov	r9,r5
8000e1f4:	ee c8 00 14 	sub	r8,r7,20
8000e1f8:	2f 08       	sub	r8,-16
8000e1fa:	12 9b       	mov	r11,r9
8000e1fc:	10 9c       	mov	r12,r8
8000e1fe:	fe b0 f9 01 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000e202:	ee ca 00 14 	sub	r10,r7,20
8000e206:	e0 68 00 ee 	mov	r8,238
8000e20a:	31 49       	mov	r9,20
8000e20c:	33 bb       	mov	r11,59
8000e20e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e212:	fe b0 f8 2f 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e216:	2f 6d       	sub	sp,-40
8000e218:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e21c:	80 00       	ld.sh	r0,r0[0x0]
8000e21e:	e0 16 eb cd 	andl	r6,0xebcd

8000e220 <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000e220:	eb cd 40 e0 	pushm	r5-r7,lr
8000e224:	1a 97       	mov	r7,sp
8000e226:	20 ad       	sub	sp,40
8000e228:	4a 76       	lddpc	r6,8000e2c4 <mavlink_msg_vfr_hud_send+0xa4>
8000e22a:	1e 26       	rsub	r6,pc
8000e22c:	ee c5 ff f0 	sub	r5,r7,-16
8000e230:	ef 4c ff e8 	st.w	r7[-24],r12
8000e234:	ef 4b ff e4 	st.w	r7[-28],r11
8000e238:	ef 4a ff e0 	st.w	r7[-32],r10
8000e23c:	ef 59 ff dc 	st.h	r7[-36],r9
8000e240:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000e244:	ee c9 00 1c 	sub	r9,r7,28
8000e248:	ee c8 00 14 	sub	r8,r7,20
8000e24c:	12 9b       	mov	r11,r9
8000e24e:	10 9c       	mov	r12,r8
8000e250:	fe b0 f8 d8 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000e254:	ee c9 00 20 	sub	r9,r7,32
8000e258:	ee c8 00 14 	sub	r8,r7,20
8000e25c:	2f c8       	sub	r8,-4
8000e25e:	12 9b       	mov	r11,r9
8000e260:	10 9c       	mov	r12,r8
8000e262:	fe b0 f8 cf 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000e266:	0a 99       	mov	r9,r5
8000e268:	ee c8 00 14 	sub	r8,r7,20
8000e26c:	2f 88       	sub	r8,-8
8000e26e:	12 9b       	mov	r11,r9
8000e270:	10 9c       	mov	r12,r8
8000e272:	fe b0 f8 c7 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000e276:	ea c9 ff fc 	sub	r9,r5,-4
8000e27a:	ee c8 00 14 	sub	r8,r7,20
8000e27e:	2f 48       	sub	r8,-12
8000e280:	12 9b       	mov	r11,r9
8000e282:	10 9c       	mov	r12,r8
8000e284:	fe b0 f8 be 	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000e288:	ee c9 00 24 	sub	r9,r7,36
8000e28c:	ee c8 00 14 	sub	r8,r7,20
8000e290:	2f 08       	sub	r8,-16
8000e292:	12 9b       	mov	r11,r9
8000e294:	10 9c       	mov	r12,r8
8000e296:	fe b0 f8 9b 	rcall	8000d3cc <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000e29a:	ee c9 00 28 	sub	r9,r7,40
8000e29e:	ee c8 00 14 	sub	r8,r7,20
8000e2a2:	2e e8       	sub	r8,-18
8000e2a4:	12 9b       	mov	r11,r9
8000e2a6:	10 9c       	mov	r12,r8
8000e2a8:	fe b0 f8 92 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000e2ac:	ee ca 00 14 	sub	r10,r7,20
8000e2b0:	31 48       	mov	r8,20
8000e2b2:	31 49       	mov	r9,20
8000e2b4:	34 ab       	mov	r11,74
8000e2b6:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e2ba:	fe b0 f7 db 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000e2be:	2f 6d       	sub	sp,-40
8000e2c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e2c4:	80 00       	ld.sh	r0,r0[0x0]
8000e2c6:	e0 ae       	*unknown*

8000e2c8 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
8000e2c8:	eb cd 40 80 	pushm	r7,lr
8000e2cc:	1a 97       	mov	r7,sp
8000e2ce:	20 1d       	sub	sp,4
8000e2d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
8000e2d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2d8:	2f 88       	sub	r8,-8
8000e2da:	2e 28       	sub	r8,-30
8000e2dc:	11 88       	ld.ub	r8,r8[0x0]
}
8000e2de:	10 9c       	mov	r12,r8
8000e2e0:	2f fd       	sub	sp,-4
8000e2e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e2e6 <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
8000e2e6:	eb cd 40 80 	pushm	r7,lr
8000e2ea:	1a 97       	mov	r7,sp
8000e2ec:	20 1d       	sub	sp,4
8000e2ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
8000e2f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2f6:	2f 88       	sub	r8,-8
8000e2f8:	2e 18       	sub	r8,-31
8000e2fa:	11 88       	ld.ub	r8,r8[0x0]
}
8000e2fc:	10 9c       	mov	r12,r8
8000e2fe:	2f fd       	sub	sp,-4
8000e300:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e304 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
8000e304:	eb cd 40 c0 	pushm	r6-r7,lr
8000e308:	1a 97       	mov	r7,sp
8000e30a:	20 1d       	sub	sp,4
8000e30c:	48 86       	lddpc	r6,8000e32c <mavlink_msg_command_long_get_command+0x28>
8000e30e:	1e 26       	rsub	r6,pc
8000e310:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8000e314:	31 cb       	mov	r11,28
8000e316:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e31a:	fe b0 f9 37 	rcall	8000d588 <_MAV_RETURN_uint16_t>
8000e31e:	18 98       	mov	r8,r12
8000e320:	5c 88       	casts.h	r8
8000e322:	5c 88       	casts.h	r8
}
8000e324:	10 9c       	mov	r12,r8
8000e326:	2f fd       	sub	sp,-4
8000e328:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e32c:	80 00       	ld.sh	r0,r0[0x0]
8000e32e:	e1 92       	*unknown*

8000e330 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
8000e330:	eb cd 40 80 	pushm	r7,lr
8000e334:	1a 97       	mov	r7,sp
8000e336:	20 1d       	sub	sp,4
8000e338:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8000e33c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e340:	2f 88       	sub	r8,-8
8000e342:	2e 08       	sub	r8,-32
8000e344:	11 88       	ld.ub	r8,r8[0x0]
}
8000e346:	10 9c       	mov	r12,r8
8000e348:	2f fd       	sub	sp,-4
8000e34a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e34e <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
8000e34e:	eb cd 40 c0 	pushm	r6-r7,lr
8000e352:	1a 97       	mov	r7,sp
8000e354:	20 1d       	sub	sp,4
8000e356:	48 86       	lddpc	r6,8000e374 <mavlink_msg_command_long_get_param1+0x26>
8000e358:	1e 26       	rsub	r6,pc
8000e35a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8000e35e:	30 0b       	mov	r11,0
8000e360:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e364:	fe b0 f9 32 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e368:	18 98       	mov	r8,r12
}
8000e36a:	10 9c       	mov	r12,r8
8000e36c:	2f fd       	sub	sp,-4
8000e36e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e372:	00 00       	add	r0,r0
8000e374:	80 00       	ld.sh	r0,r0[0x0]
8000e376:	e1 dc       	*unknown*

8000e378 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
8000e378:	eb cd 40 c0 	pushm	r6-r7,lr
8000e37c:	1a 97       	mov	r7,sp
8000e37e:	20 1d       	sub	sp,4
8000e380:	48 76       	lddpc	r6,8000e39c <mavlink_msg_command_long_get_param2+0x24>
8000e382:	1e 26       	rsub	r6,pc
8000e384:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8000e388:	30 4b       	mov	r11,4
8000e38a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e38e:	fe b0 f9 1d 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e392:	18 98       	mov	r8,r12
}
8000e394:	10 9c       	mov	r12,r8
8000e396:	2f fd       	sub	sp,-4
8000e398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e39c:	80 00       	ld.sh	r0,r0[0x0]
8000e39e:	e2 06       	*unknown*

8000e3a0 <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
8000e3a0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3a4:	1a 97       	mov	r7,sp
8000e3a6:	20 1d       	sub	sp,4
8000e3a8:	48 76       	lddpc	r6,8000e3c4 <mavlink_msg_command_long_get_param3+0x24>
8000e3aa:	1e 26       	rsub	r6,pc
8000e3ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8000e3b0:	30 8b       	mov	r11,8
8000e3b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e3b6:	fe b0 f9 09 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e3ba:	18 98       	mov	r8,r12
}
8000e3bc:	10 9c       	mov	r12,r8
8000e3be:	2f fd       	sub	sp,-4
8000e3c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3c4:	80 00       	ld.sh	r0,r0[0x0]
8000e3c6:	e2 2e eb cd 	sub	lr,191437

8000e3c8 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
8000e3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3cc:	1a 97       	mov	r7,sp
8000e3ce:	20 1d       	sub	sp,4
8000e3d0:	48 76       	lddpc	r6,8000e3ec <mavlink_msg_command_long_get_param4+0x24>
8000e3d2:	1e 26       	rsub	r6,pc
8000e3d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8000e3d8:	30 cb       	mov	r11,12
8000e3da:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e3de:	fe b0 f8 f5 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e3e2:	18 98       	mov	r8,r12
}
8000e3e4:	10 9c       	mov	r12,r8
8000e3e6:	2f fd       	sub	sp,-4
8000e3e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3ec:	80 00       	ld.sh	r0,r0[0x0]
8000e3ee:	e2 56 eb cd 	cp.w	r6,256973

8000e3f0 <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
8000e3f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e3f4:	1a 97       	mov	r7,sp
8000e3f6:	20 1d       	sub	sp,4
8000e3f8:	48 76       	lddpc	r6,8000e414 <mavlink_msg_command_long_get_param5+0x24>
8000e3fa:	1e 26       	rsub	r6,pc
8000e3fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8000e400:	31 0b       	mov	r11,16
8000e402:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e406:	fe b0 f8 e1 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e40a:	18 98       	mov	r8,r12
}
8000e40c:	10 9c       	mov	r12,r8
8000e40e:	2f fd       	sub	sp,-4
8000e410:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e414:	80 00       	ld.sh	r0,r0[0x0]
8000e416:	e2 7e eb cd 	mov	lr,256973

8000e418 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
8000e418:	eb cd 40 c0 	pushm	r6-r7,lr
8000e41c:	1a 97       	mov	r7,sp
8000e41e:	20 1d       	sub	sp,4
8000e420:	48 76       	lddpc	r6,8000e43c <mavlink_msg_command_long_get_param6+0x24>
8000e422:	1e 26       	rsub	r6,pc
8000e424:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8000e428:	31 4b       	mov	r11,20
8000e42a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e42e:	fe b0 f8 cd 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e432:	18 98       	mov	r8,r12
}
8000e434:	10 9c       	mov	r12,r8
8000e436:	2f fd       	sub	sp,-4
8000e438:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e43c:	80 00       	ld.sh	r0,r0[0x0]
8000e43e:	e2 a6       	*unknown*

8000e440 <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
8000e440:	eb cd 40 c0 	pushm	r6-r7,lr
8000e444:	1a 97       	mov	r7,sp
8000e446:	20 1d       	sub	sp,4
8000e448:	48 76       	lddpc	r6,8000e464 <mavlink_msg_command_long_get_param7+0x24>
8000e44a:	1e 26       	rsub	r6,pc
8000e44c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8000e450:	31 8b       	mov	r11,24
8000e452:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e456:	fe b0 f8 b9 	rcall	8000d5c8 <_MAV_RETURN_float>
8000e45a:	18 98       	mov	r8,r12
}
8000e45c:	10 9c       	mov	r12,r8
8000e45e:	2f fd       	sub	sp,-4
8000e460:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e464:	80 00       	ld.sh	r0,r0[0x0]
8000e466:	e2 ce eb cd 	sub	lr,r1,-5171

8000e468 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
8000e468:	eb cd 40 c0 	pushm	r6-r7,lr
8000e46c:	1a 97       	mov	r7,sp
8000e46e:	20 2d       	sub	sp,8
8000e470:	4a e6       	lddpc	r6,8000e528 <mavlink_msg_command_long_decode+0xc0>
8000e472:	1e 26       	rsub	r6,pc
8000e474:	ef 4c ff fc 	st.w	r7[-4],r12
8000e478:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
8000e47c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e480:	c6 7f       	rcall	8000e34e <mavlink_msg_command_long_get_param1>
8000e482:	18 99       	mov	r9,r12
8000e484:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e488:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
8000e48a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e48e:	c7 5f       	rcall	8000e378 <mavlink_msg_command_long_get_param2>
8000e490:	18 99       	mov	r9,r12
8000e492:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e496:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
8000e498:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e49c:	c8 2f       	rcall	8000e3a0 <mavlink_msg_command_long_get_param3>
8000e49e:	18 99       	mov	r9,r12
8000e4a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4a4:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
8000e4a6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4aa:	c8 ff       	rcall	8000e3c8 <mavlink_msg_command_long_get_param4>
8000e4ac:	18 99       	mov	r9,r12
8000e4ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4b2:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
8000e4b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4b8:	c9 cf       	rcall	8000e3f0 <mavlink_msg_command_long_get_param5>
8000e4ba:	18 99       	mov	r9,r12
8000e4bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4c0:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
8000e4c2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4c6:	ca 9f       	rcall	8000e418 <mavlink_msg_command_long_get_param6>
8000e4c8:	18 99       	mov	r9,r12
8000e4ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4ce:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
8000e4d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4d4:	cb 6f       	rcall	8000e440 <mavlink_msg_command_long_get_param7>
8000e4d6:	18 99       	mov	r9,r12
8000e4d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4dc:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
8000e4de:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4e2:	c1 1f       	rcall	8000e304 <mavlink_msg_command_long_get_command>
8000e4e4:	18 98       	mov	r8,r12
8000e4e6:	5c 88       	casts.h	r8
8000e4e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e4ec:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
8000e4f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e4f4:	ce ae       	rcall	8000e2c8 <mavlink_msg_command_long_get_target_system>
8000e4f6:	18 98       	mov	r8,r12
8000e4f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e4fc:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
8000e500:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e504:	cf 1e       	rcall	8000e2e6 <mavlink_msg_command_long_get_target_component>
8000e506:	18 98       	mov	r8,r12
8000e508:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e50c:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
8000e510:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e514:	c0 ef       	rcall	8000e330 <mavlink_msg_command_long_get_confirmation>
8000e516:	18 98       	mov	r8,r12
8000e518:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e51c:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
8000e520:	2f ed       	sub	sp,-8
8000e522:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e526:	00 00       	add	r0,r0
8000e528:	80 00       	ld.sh	r0,r0[0x0]
8000e52a:	e2 f6 eb cd 	ld.w	r6,r1[-5171]

8000e52c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000e52c:	eb cd 40 e0 	pushm	r5-r7,lr
8000e530:	1a 97       	mov	r7,sp
8000e532:	20 ad       	sub	sp,40
8000e534:	4a 36       	lddpc	r6,8000e5c0 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000e536:	1e 26       	rsub	r6,pc
8000e538:	ee c5 ff f0 	sub	r5,r7,-16
8000e53c:	ef 4c ff e8 	st.w	r7[-24],r12
8000e540:	ef 4b ff e4 	st.w	r7[-28],r11
8000e544:	ef 4a ff e0 	st.w	r7[-32],r10
8000e548:	ef 49 ff dc 	st.w	r7[-36],r9
8000e54c:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e550:	ee c9 00 1c 	sub	r9,r7,28
8000e554:	ee c8 00 14 	sub	r8,r7,20
8000e558:	12 9b       	mov	r11,r9
8000e55a:	10 9c       	mov	r12,r8
8000e55c:	fe b0 f7 52 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000e560:	ee c9 00 20 	sub	r9,r7,32
8000e564:	ee c8 00 14 	sub	r8,r7,20
8000e568:	2f c8       	sub	r8,-4
8000e56a:	12 9b       	mov	r11,r9
8000e56c:	10 9c       	mov	r12,r8
8000e56e:	fe b0 f7 49 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000e572:	ee c9 00 24 	sub	r9,r7,36
8000e576:	ee c8 00 14 	sub	r8,r7,20
8000e57a:	2f 88       	sub	r8,-8
8000e57c:	12 9b       	mov	r11,r9
8000e57e:	10 9c       	mov	r12,r8
8000e580:	fe b0 f7 40 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000e584:	ee c9 00 28 	sub	r9,r7,40
8000e588:	ee c8 00 14 	sub	r8,r7,20
8000e58c:	2f 48       	sub	r8,-12
8000e58e:	12 9b       	mov	r11,r9
8000e590:	10 9c       	mov	r12,r8
8000e592:	fe b0 f7 37 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e596:	0a 99       	mov	r9,r5
8000e598:	ee c8 00 14 	sub	r8,r7,20
8000e59c:	2f 08       	sub	r8,-16
8000e59e:	12 9b       	mov	r11,r9
8000e5a0:	10 9c       	mov	r12,r8
8000e5a2:	fe b0 f7 2f 	rcall	8000d400 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000e5a6:	ee ca 00 14 	sub	r10,r7,20
8000e5aa:	37 f8       	mov	r8,127
8000e5ac:	31 49       	mov	r9,20
8000e5ae:	35 0b       	mov	r11,80
8000e5b0:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e5b4:	fe b0 f6 5e 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e5b8:	2f 6d       	sub	sp,-40
8000e5ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e5be:	00 00       	add	r0,r0
8000e5c0:	80 00       	ld.sh	r0,r0[0x0]
8000e5c2:	e3 ba       	*unknown*

8000e5c4 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000e5c4:	eb cd 40 e0 	pushm	r5-r7,lr
8000e5c8:	1a 97       	mov	r7,sp
8000e5ca:	21 9d       	sub	sp,100
8000e5cc:	4d d6       	lddpc	r6,8000e740 <mavlink_msg_hil_state_send+0x17c>
8000e5ce:	1e 26       	rsub	r6,pc
8000e5d0:	ee c5 ff f0 	sub	r5,r7,-16
8000e5d4:	ef 4c ff c4 	st.w	r7[-60],r12
8000e5d8:	ee eb ff bc 	st.d	r7[-68],r10
8000e5dc:	ef 49 ff b8 	st.w	r7[-72],r9
8000e5e0:	ef 48 ff b4 	st.w	r7[-76],r8
8000e5e4:	6a 7e       	ld.w	lr,r5[0x1c]
8000e5e6:	6a 8c       	ld.w	r12,r5[0x20]
8000e5e8:	6a 9b       	ld.w	r11,r5[0x24]
8000e5ea:	6a aa       	ld.w	r10,r5[0x28]
8000e5ec:	6a b9       	ld.w	r9,r5[0x2c]
8000e5ee:	6a c8       	ld.w	r8,r5[0x30]
8000e5f0:	ef 5e ff b0 	st.h	r7[-80],lr
8000e5f4:	ef 5c ff ac 	st.h	r7[-84],r12
8000e5f8:	ef 5b ff a8 	st.h	r7[-88],r11
8000e5fc:	ef 5a ff a4 	st.h	r7[-92],r10
8000e600:	ef 59 ff a0 	st.h	r7[-96],r9
8000e604:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000e608:	ee c9 00 44 	sub	r9,r7,68
8000e60c:	ee c8 00 38 	sub	r8,r7,56
8000e610:	12 9b       	mov	r11,r9
8000e612:	10 9c       	mov	r12,r8
8000e614:	fe b0 f7 22 	rcall	8000d458 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000e618:	ee c9 00 48 	sub	r9,r7,72
8000e61c:	ee c8 00 38 	sub	r8,r7,56
8000e620:	2f 88       	sub	r8,-8
8000e622:	12 9b       	mov	r11,r9
8000e624:	10 9c       	mov	r12,r8
8000e626:	fe b0 f6 ed 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000e62a:	ee c9 00 4c 	sub	r9,r7,76
8000e62e:	ee c8 00 38 	sub	r8,r7,56
8000e632:	2f 48       	sub	r8,-12
8000e634:	12 9b       	mov	r11,r9
8000e636:	10 9c       	mov	r12,r8
8000e638:	fe b0 f6 e4 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000e63c:	0a 99       	mov	r9,r5
8000e63e:	ee c8 00 38 	sub	r8,r7,56
8000e642:	2f 08       	sub	r8,-16
8000e644:	12 9b       	mov	r11,r9
8000e646:	10 9c       	mov	r12,r8
8000e648:	fe b0 f6 dc 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000e64c:	ea c9 ff fc 	sub	r9,r5,-4
8000e650:	ee c8 00 38 	sub	r8,r7,56
8000e654:	2e c8       	sub	r8,-20
8000e656:	12 9b       	mov	r11,r9
8000e658:	10 9c       	mov	r12,r8
8000e65a:	fe b0 f6 d3 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000e65e:	ea c9 ff f8 	sub	r9,r5,-8
8000e662:	ee c8 00 38 	sub	r8,r7,56
8000e666:	2e 88       	sub	r8,-24
8000e668:	12 9b       	mov	r11,r9
8000e66a:	10 9c       	mov	r12,r8
8000e66c:	fe b0 f6 ca 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000e670:	ea c9 ff f4 	sub	r9,r5,-12
8000e674:	ee c8 00 38 	sub	r8,r7,56
8000e678:	2e 48       	sub	r8,-28
8000e67a:	12 9b       	mov	r11,r9
8000e67c:	10 9c       	mov	r12,r8
8000e67e:	fe b0 f6 c1 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000e682:	ea c9 ff f0 	sub	r9,r5,-16
8000e686:	ee c8 00 38 	sub	r8,r7,56
8000e68a:	2e 08       	sub	r8,-32
8000e68c:	12 9b       	mov	r11,r9
8000e68e:	10 9c       	mov	r12,r8
8000e690:	fe b0 f6 b8 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000e694:	ea c9 ff ec 	sub	r9,r5,-20
8000e698:	ee c8 00 38 	sub	r8,r7,56
8000e69c:	2d c8       	sub	r8,-36
8000e69e:	12 9b       	mov	r11,r9
8000e6a0:	10 9c       	mov	r12,r8
8000e6a2:	fe b0 f6 af 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000e6a6:	ea c9 ff e8 	sub	r9,r5,-24
8000e6aa:	ee c8 00 38 	sub	r8,r7,56
8000e6ae:	2d 88       	sub	r8,-40
8000e6b0:	12 9b       	mov	r11,r9
8000e6b2:	10 9c       	mov	r12,r8
8000e6b4:	fe b0 f6 a6 	rcall	8000d400 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000e6b8:	ee c9 00 50 	sub	r9,r7,80
8000e6bc:	ee c8 00 38 	sub	r8,r7,56
8000e6c0:	2d 48       	sub	r8,-44
8000e6c2:	12 9b       	mov	r11,r9
8000e6c4:	10 9c       	mov	r12,r8
8000e6c6:	fe b0 f6 83 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000e6ca:	ee c9 00 54 	sub	r9,r7,84
8000e6ce:	ee c8 00 38 	sub	r8,r7,56
8000e6d2:	2d 28       	sub	r8,-46
8000e6d4:	12 9b       	mov	r11,r9
8000e6d6:	10 9c       	mov	r12,r8
8000e6d8:	fe b0 f6 7a 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000e6dc:	ee c9 00 58 	sub	r9,r7,88
8000e6e0:	ee c8 00 38 	sub	r8,r7,56
8000e6e4:	2d 08       	sub	r8,-48
8000e6e6:	12 9b       	mov	r11,r9
8000e6e8:	10 9c       	mov	r12,r8
8000e6ea:	fe b0 f6 71 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000e6ee:	ee c9 00 5c 	sub	r9,r7,92
8000e6f2:	ee c8 00 38 	sub	r8,r7,56
8000e6f6:	2c e8       	sub	r8,-50
8000e6f8:	12 9b       	mov	r11,r9
8000e6fa:	10 9c       	mov	r12,r8
8000e6fc:	fe b0 f6 68 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000e700:	ee c9 00 60 	sub	r9,r7,96
8000e704:	ee c8 00 38 	sub	r8,r7,56
8000e708:	2c c8       	sub	r8,-52
8000e70a:	12 9b       	mov	r11,r9
8000e70c:	10 9c       	mov	r12,r8
8000e70e:	fe b0 f6 5f 	rcall	8000d3cc <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000e712:	ee c9 00 64 	sub	r9,r7,100
8000e716:	ee c8 00 38 	sub	r8,r7,56
8000e71a:	2c a8       	sub	r8,-54
8000e71c:	12 9b       	mov	r11,r9
8000e71e:	10 9c       	mov	r12,r8
8000e720:	fe b0 f6 56 	rcall	8000d3cc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000e724:	ee ca 00 38 	sub	r10,r7,56
8000e728:	e0 68 00 b7 	mov	r8,183
8000e72c:	33 89       	mov	r9,56
8000e72e:	35 ab       	mov	r11,90
8000e730:	ee fc ff c4 	ld.w	r12,r7[-60]
8000e734:	fe b0 f5 9e 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000e738:	2e 7d       	sub	sp,-100
8000e73a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e73e:	00 00       	add	r0,r0
8000e740:	80 00       	ld.sh	r0,r0[0x0]
8000e742:	e4 52 eb cd 	cp.w	r2,388045

8000e744 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000e744:	eb cd 40 c0 	pushm	r6-r7,lr
8000e748:	1a 97       	mov	r7,sp
8000e74a:	20 9d       	sub	sp,36
8000e74c:	49 96       	lddpc	r6,8000e7b0 <mavlink_msg_named_value_float_send+0x6c>
8000e74e:	1e 26       	rsub	r6,pc
8000e750:	ef 4c ff e8 	st.w	r7[-24],r12
8000e754:	ef 4b ff e4 	st.w	r7[-28],r11
8000e758:	ef 4a ff e0 	st.w	r7[-32],r10
8000e75c:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e760:	ee c9 00 1c 	sub	r9,r7,28
8000e764:	ee c8 00 14 	sub	r8,r7,20
8000e768:	12 9b       	mov	r11,r9
8000e76a:	10 9c       	mov	r12,r8
8000e76c:	fe b0 f6 4a 	rcall	8000d400 <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000e770:	ee c9 00 24 	sub	r9,r7,36
8000e774:	ee c8 00 14 	sub	r8,r7,20
8000e778:	2f c8       	sub	r8,-4
8000e77a:	12 9b       	mov	r11,r9
8000e77c:	10 9c       	mov	r12,r8
8000e77e:	fe b0 f6 41 	rcall	8000d400 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e782:	ee c8 00 14 	sub	r8,r7,20
8000e786:	30 a9       	mov	r9,10
8000e788:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e78c:	30 8b       	mov	r11,8
8000e78e:	10 9c       	mov	r12,r8
8000e790:	fe b0 f6 da 	rcall	8000d544 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000e794:	ee ca 00 14 	sub	r10,r7,20
8000e798:	e0 68 00 aa 	mov	r8,170
8000e79c:	31 29       	mov	r9,18
8000e79e:	e0 6b 00 fb 	mov	r11,251
8000e7a2:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e7a6:	fe b0 f5 65 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000e7aa:	2f 7d       	sub	sp,-36
8000e7ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e7b0:	80 00       	ld.sh	r0,r0[0x0]
8000e7b2:	e5 d2       	*unknown*

8000e7b4 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000e7b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e7b8:	1a 97       	mov	r7,sp
8000e7ba:	20 9d       	sub	sp,36
8000e7bc:	49 96       	lddpc	r6,8000e820 <mavlink_msg_named_value_int_send+0x6c>
8000e7be:	1e 26       	rsub	r6,pc
8000e7c0:	ef 4c ff e8 	st.w	r7[-24],r12
8000e7c4:	ef 4b ff e4 	st.w	r7[-28],r11
8000e7c8:	ef 4a ff e0 	st.w	r7[-32],r10
8000e7cc:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e7d0:	ee c9 00 1c 	sub	r9,r7,28
8000e7d4:	ee c8 00 14 	sub	r8,r7,20
8000e7d8:	12 9b       	mov	r11,r9
8000e7da:	10 9c       	mov	r12,r8
8000e7dc:	fe b0 f6 12 	rcall	8000d400 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000e7e0:	ee c9 00 24 	sub	r9,r7,36
8000e7e4:	ee c8 00 14 	sub	r8,r7,20
8000e7e8:	2f c8       	sub	r8,-4
8000e7ea:	12 9b       	mov	r11,r9
8000e7ec:	10 9c       	mov	r12,r8
8000e7ee:	fe b0 f6 09 	rcall	8000d400 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e7f2:	ee c8 00 14 	sub	r8,r7,20
8000e7f6:	30 a9       	mov	r9,10
8000e7f8:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e7fc:	30 8b       	mov	r11,8
8000e7fe:	10 9c       	mov	r12,r8
8000e800:	fe b0 f6 a2 	rcall	8000d544 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000e804:	ee ca 00 14 	sub	r10,r7,20
8000e808:	32 c8       	mov	r8,44
8000e80a:	31 29       	mov	r9,18
8000e80c:	e0 6b 00 fc 	mov	r11,252
8000e810:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e814:	fe b0 f5 2e 	rcall	8000d270 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000e818:	2f 7d       	sub	sp,-36
8000e81a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e81e:	00 00       	add	r0,r0
8000e820:	80 00       	ld.sh	r0,r0[0x0]
8000e822:	e6 42 eb cd 	cp.w	r2,453581

8000e824 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000e824:	eb cd 40 c0 	pushm	r6-r7,lr
8000e828:	1a 97       	mov	r7,sp
8000e82a:	20 6d       	sub	sp,24
8000e82c:	49 e6       	lddpc	r6,8000e8a4 <interpolate+0x80>
8000e82e:	1e 26       	rsub	r6,pc
8000e830:	ef 4c ff f8 	st.w	r7[-8],r12
8000e834:	ef 4b ff f4 	st.w	r7[-12],r11
8000e838:	ef 4a ff f0 	st.w	r7[-16],r10
8000e83c:	ef 49 ff ec 	st.w	r7[-20],r9
8000e840:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000e844:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e848:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e84c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000e850:	c0 41       	brne	8000e858 <interpolate+0x34>
	{
		return y1;
8000e852:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e856:	c2 38       	rjmp	8000e89c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000e858:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000e85c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e860:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000e864:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e868:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e86c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000e870:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000e874:	ee fa ff f0 	ld.w	r10,r7[-16]
8000e878:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e87c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000e880:	12 9b       	mov	r11,r9
8000e882:	10 9c       	mov	r12,r8
8000e884:	f0 16 00 08 	mcall	r6[32]
8000e888:	18 98       	mov	r8,r12
8000e88a:	10 99       	mov	r9,r8
8000e88c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e890:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000e894:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000e898:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000e89c:	10 9c       	mov	r12,r8
8000e89e:	2f ad       	sub	sp,-24
8000e8a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e8a4:	80 00       	ld.sh	r0,r0[0x0]
8000e8a6:	e6 b2       	*unknown*

8000e8a8 <mavlink_send_heartbeat>:
#include "mavlink_waypoint_handler.h"
#include "neighbor_selection.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000e8a8:	eb cd 40 c0 	pushm	r6-r7,lr
8000e8ac:	1a 97       	mov	r7,sp
8000e8ae:	20 1d       	sub	sp,4
8000e8b0:	48 e6       	lddpc	r6,8000e8e8 <mavlink_send_heartbeat+0x40>
8000e8b2:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000e8b4:	f0 16 00 31 	mcall	r6[196]
8000e8b8:	18 98       	mov	r8,r12
8000e8ba:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000e8be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e8c2:	f1 38 0f 7d 	ld.ub	r8,r8[3965]
8000e8c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e8ca:	f3 39 0f 7c 	ld.ub	r9,r9[3964]
8000e8ce:	1a d8       	st.w	--sp,r8
8000e8d0:	30 08       	mov	r8,0
8000e8d2:	30 0a       	mov	r10,0
8000e8d4:	30 2b       	mov	r11,2
8000e8d6:	30 0c       	mov	r12,0
8000e8d8:	fe b0 f6 98 	rcall	8000d608 <mavlink_msg_heartbeat_send>
8000e8dc:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000e8de:	f0 16 01 ee 	mcall	r6[1976]
	
	//dbg_print("Send hearbeat.\n");
}
8000e8e2:	2f fd       	sub	sp,-4
8000e8e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e8e8:	80 00       	ld.sh	r0,r0[0x0]
8000e8ea:	e7 36 eb cd 	ld.ub	r6,r3[-5171]

8000e8ec <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000e8ec:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e8f0:	1a 97       	mov	r7,sp
8000e8f2:	20 6d       	sub	sp,24
8000e8f4:	4b e6       	lddpc	r6,8000e9ec <mavlink_send_raw_imu+0x100>
8000e8f6:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000e8f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8fc:	70 08       	ld.w	r8,r8[0x0]
8000e8fe:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e902:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e906:	5c 88       	casts.h	r8
8000e908:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000e90c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e910:	70 08       	ld.w	r8,r8[0x0]
8000e912:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e916:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e91a:	5c 88       	casts.h	r8
8000e91c:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000e920:	ec f8 00 00 	ld.w	r8,r6[0]
8000e924:	70 08       	ld.w	r8,r8[0x0]
8000e926:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e92a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e92e:	5c 88       	casts.h	r8
8000e930:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000e934:	ec f8 00 00 	ld.w	r8,r6[0]
8000e938:	70 08       	ld.w	r8,r8[0x0]
8000e93a:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e93e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e942:	5c 88       	casts.h	r8
8000e944:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000e948:	ec f8 00 00 	ld.w	r8,r6[0]
8000e94c:	70 08       	ld.w	r8,r8[0x0]
8000e94e:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e952:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e956:	5c 88       	casts.h	r8
8000e958:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000e95c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e960:	70 08       	ld.w	r8,r8[0x0]
8000e962:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e966:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e96a:	5c 88       	casts.h	r8
8000e96c:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000e970:	ec f8 00 00 	ld.w	r8,r6[0]
8000e974:	70 08       	ld.w	r8,r8[0x0]
8000e976:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e97a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e97e:	5c 88       	casts.h	r8
8000e980:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000e982:	ec f8 00 00 	ld.w	r8,r6[0]
8000e986:	70 08       	ld.w	r8,r8[0x0]
8000e988:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e98c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e990:	5c 88       	casts.h	r8
8000e992:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000e994:	ec f8 00 00 	ld.w	r8,r6[0]
8000e998:	70 08       	ld.w	r8,r8[0x0]
8000e99a:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e99e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e9a2:	5c 88       	casts.h	r8
8000e9a4:	10 95       	mov	r5,r8
8000e9a6:	f0 16 00 27 	mcall	r6[156]
8000e9aa:	18 98       	mov	r8,r12
8000e9ac:	10 92       	mov	r2,r8
8000e9ae:	30 03       	mov	r3,0
8000e9b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e9b4:	1a d8       	st.w	--sp,r8
8000e9b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e9ba:	1a d8       	st.w	--sp,r8
8000e9bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e9c0:	1a d8       	st.w	--sp,r8
8000e9c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e9c6:	1a d8       	st.w	--sp,r8
8000e9c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e9cc:	1a d8       	st.w	--sp,r8
8000e9ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9d2:	1a d8       	st.w	--sp,r8
8000e9d4:	1a d0       	st.w	--sp,r0
8000e9d6:	02 98       	mov	r8,r1
8000e9d8:	0a 99       	mov	r9,r5
8000e9da:	04 9a       	mov	r10,r2
8000e9dc:	06 9b       	mov	r11,r3
8000e9de:	30 0c       	mov	r12,0
8000e9e0:	fe b0 f7 58 	rcall	8000d890 <mavlink_msg_raw_imu_send>
8000e9e4:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000e9e6:	2f ad       	sub	sp,-24
8000e9e8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e9ec:	80 00       	ld.sh	r0,r0[0x0]
8000e9ee:	e7 7a eb cd 	stcond	r3[-5171],r10

8000e9f0 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000e9f0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e9f4:	1a 97       	mov	r7,sp
8000e9f6:	20 4d       	sub	sp,16
8000e9f8:	4c 96       	lddpc	r6,8000eb1c <mavlink_send_scaled_imu+0x12c>
8000e9fa:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000e9fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea00:	70 08       	ld.w	r8,r8[0x0]
8000ea02:	70 b9       	ld.w	r9,r8[0x2c]
8000ea04:	fc 18 44 7a 	movh	r8,0x447a
8000ea08:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea0c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea10:	5c 88       	casts.h	r8
8000ea12:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000ea16:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea1a:	70 08       	ld.w	r8,r8[0x0]
8000ea1c:	70 a9       	ld.w	r9,r8[0x28]
8000ea1e:	fc 18 44 7a 	movh	r8,0x447a
8000ea22:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea26:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea2a:	5c 88       	casts.h	r8
8000ea2c:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000ea30:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea34:	70 08       	ld.w	r8,r8[0x0]
8000ea36:	70 99       	ld.w	r9,r8[0x24]
8000ea38:	fc 18 44 7a 	movh	r8,0x447a
8000ea3c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea40:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea44:	5c 88       	casts.h	r8
8000ea46:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000ea4a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea4e:	70 08       	ld.w	r8,r8[0x0]
8000ea50:	f0 f9 00 80 	ld.w	r9,r8[128]
8000ea54:	fc 18 44 7a 	movh	r8,0x447a
8000ea58:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea5c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea60:	5c 88       	casts.h	r8
8000ea62:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000ea66:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea6a:	70 08       	ld.w	r8,r8[0x0]
8000ea6c:	71 f9       	ld.w	r9,r8[0x7c]
8000ea6e:	fc 18 44 7a 	movh	r8,0x447a
8000ea72:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea76:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea7a:	5c 88       	casts.h	r8
8000ea7c:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000ea7e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea82:	70 08       	ld.w	r8,r8[0x0]
8000ea84:	71 e9       	ld.w	r9,r8[0x78]
8000ea86:	fc 18 44 7a 	movh	r8,0x447a
8000ea8a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000ea8e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ea92:	5c 88       	casts.h	r8
8000ea94:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000ea96:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea9a:	70 08       	ld.w	r8,r8[0x0]
8000ea9c:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000eaa0:	fc 18 44 7a 	movh	r8,0x447a
8000eaa4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eaa8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eaac:	5c 88       	casts.h	r8
8000eaae:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000eab0:	ec f8 00 00 	ld.w	r8,r6[0]
8000eab4:	70 08       	ld.w	r8,r8[0x0]
8000eab6:	f0 f9 00 88 	ld.w	r9,r8[136]
8000eaba:	fc 18 44 7a 	movh	r8,0x447a
8000eabe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eac2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eac6:	5c 88       	casts.h	r8
8000eac8:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000eaca:	ec f8 00 00 	ld.w	r8,r6[0]
8000eace:	70 08       	ld.w	r8,r8[0x0]
8000ead0:	f0 f9 00 84 	ld.w	r9,r8[132]
8000ead4:	fc 18 44 7a 	movh	r8,0x447a
8000ead8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000eadc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000eae0:	5c 88       	casts.h	r8
8000eae2:	10 95       	mov	r5,r8
8000eae4:	f0 16 00 0e 	mcall	r6[56]
8000eae8:	18 9b       	mov	r11,r12
8000eaea:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000eaee:	1a d8       	st.w	--sp,r8
8000eaf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eaf4:	1a d8       	st.w	--sp,r8
8000eaf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eafa:	1a d8       	st.w	--sp,r8
8000eafc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb00:	1a d8       	st.w	--sp,r8
8000eb02:	1a d0       	st.w	--sp,r0
8000eb04:	1a d1       	st.w	--sp,r1
8000eb06:	04 98       	mov	r8,r2
8000eb08:	06 99       	mov	r9,r3
8000eb0a:	0a 9a       	mov	r10,r5
8000eb0c:	30 0c       	mov	r12,0
8000eb0e:	fe b0 f6 2f 	rcall	8000d76c <mavlink_msg_scaled_imu_send>
8000eb12:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000eb14:	2f cd       	sub	sp,-16
8000eb16:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000eb1a:	00 00       	add	r0,r0
8000eb1c:	80 00       	ld.sh	r0,r0[0x0]
8000eb1e:	e8 7e eb cd 	mov	lr,650189

8000eb20 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000eb20:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000eb24:	1a 97       	mov	r7,sp
8000eb26:	20 1d       	sub	sp,4
8000eb28:	49 16       	lddpc	r6,8000eb6c <mavlink_send_rpy_rates_error+0x4c>
8000eb2a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000eb2c:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb30:	70 08       	ld.w	r8,r8[0x0]
8000eb32:	f0 c8 fe 60 	sub	r8,r8,-416
8000eb36:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000eb3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb3e:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000eb42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb46:	71 e3       	ld.w	r3,r8[0x78]
8000eb48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb4c:	70 d5       	ld.w	r5,r8[0x34]
8000eb4e:	f0 16 00 0e 	mcall	r6[56]
8000eb52:	18 9b       	mov	r11,r12
8000eb54:	30 08       	mov	r8,0
8000eb56:	1a d8       	st.w	--sp,r8
8000eb58:	04 98       	mov	r8,r2
8000eb5a:	06 99       	mov	r9,r3
8000eb5c:	0a 9a       	mov	r10,r5
8000eb5e:	30 0c       	mov	r12,0
8000eb60:	fe b0 fc e6 	rcall	8000e52c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000eb64:	2f fd       	sub	sp,-4
}
8000eb66:	2f fd       	sub	sp,-4
8000eb68:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000eb6c:	80 00       	ld.sh	r0,r0[0x0]
8000eb6e:	e9 ae eb cd 	ldc.w	cp7,cr11,lr[0x334]

8000eb70 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000eb70:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000eb74:	1a 97       	mov	r7,sp
8000eb76:	20 1d       	sub	sp,4
8000eb78:	49 16       	lddpc	r6,8000ebbc <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8000eb7a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000eb7c:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb80:	70 08       	ld.w	r8,r8[0x0]
8000eb82:	f0 c8 fe 60 	sub	r8,r8,-416
8000eb86:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000eb8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb8e:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000eb92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb96:	71 d3       	ld.w	r3,r8[0x74]
8000eb98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb9c:	70 c5       	ld.w	r5,r8[0x30]
8000eb9e:	f0 16 00 0e 	mcall	r6[56]
8000eba2:	18 9b       	mov	r11,r12
8000eba4:	30 08       	mov	r8,0
8000eba6:	1a d8       	st.w	--sp,r8
8000eba8:	04 98       	mov	r8,r2
8000ebaa:	06 99       	mov	r9,r3
8000ebac:	0a 9a       	mov	r10,r5
8000ebae:	30 0c       	mov	r12,0
8000ebb0:	fe b0 fa ec 	rcall	8000e188 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000ebb4:	2f fd       	sub	sp,-4
}
8000ebb6:	2f fd       	sub	sp,-4
8000ebb8:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ebbc:	80 00       	ld.sh	r0,r0[0x0]
8000ebbe:	e9 fe eb cd 	st.wqs	r4[0x734],lr

8000ebc0 <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000ebc0:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000ebc4:	1a 97       	mov	r7,sp
8000ebc6:	49 26       	lddpc	r6,8000ec0c <mavlink_send_rpy_thrust_setpoint+0x4c>
8000ebc8:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000ebca:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebce:	70 08       	ld.w	r8,r8[0x0]
8000ebd0:	f0 f1 01 54 	ld.w	r1,r8[340]
8000ebd4:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebd8:	70 08       	ld.w	r8,r8[0x0]
8000ebda:	f0 f2 01 50 	ld.w	r2,r8[336]
8000ebde:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebe2:	70 08       	ld.w	r8,r8[0x0]
8000ebe4:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000ebe8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebec:	70 08       	ld.w	r8,r8[0x0]
8000ebee:	f0 f5 01 48 	ld.w	r5,r8[328]
8000ebf2:	f0 16 00 0e 	mcall	r6[56]
8000ebf6:	18 9b       	mov	r11,r12
8000ebf8:	1a d1       	st.w	--sp,r1
8000ebfa:	04 98       	mov	r8,r2
8000ebfc:	06 99       	mov	r9,r3
8000ebfe:	0a 9a       	mov	r10,r5
8000ec00:	30 0c       	mov	r12,0
8000ec02:	fe b0 fa 77 	rcall	8000e0f0 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000ec06:	2f fd       	sub	sp,-4
}
8000ec08:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000ec0c:	80 00       	ld.sh	r0,r0[0x0]
8000ec0e:	ea 4c eb cd 	cp.w	r12,715725

8000ec10 <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000ec10:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ec14:	1a 97       	mov	r7,sp
8000ec16:	20 4d       	sub	sp,16
8000ec18:	4c b6       	lddpc	r6,8000ed44 <mavlink_send_servo_output+0x134>
8000ec1a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000ec1c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec20:	70 08       	ld.w	r8,r8[0x0]
8000ec22:	f0 c8 fe 60 	sub	r8,r8,-416
8000ec26:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000ec2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec2e:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000ec32:	fc 18 44 7a 	movh	r8,0x447a
8000ec36:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ec3a:	fc 18 44 7a 	movh	r8,0x447a
8000ec3e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ec42:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ec46:	5c 88       	casts.h	r8
8000ec48:	5c 78       	castu.h	r8
8000ec4a:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000ec4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec52:	f0 f9 01 18 	ld.w	r9,r8[280]
8000ec56:	fc 18 44 7a 	movh	r8,0x447a
8000ec5a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ec5e:	fc 18 44 7a 	movh	r8,0x447a
8000ec62:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ec66:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ec6a:	5c 88       	casts.h	r8
8000ec6c:	5c 78       	castu.h	r8
8000ec6e:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000ec72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec76:	f0 f9 01 14 	ld.w	r9,r8[276]
8000ec7a:	fc 18 44 7a 	movh	r8,0x447a
8000ec7e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ec82:	fc 18 44 7a 	movh	r8,0x447a
8000ec86:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ec8a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ec8e:	5c 88       	casts.h	r8
8000ec90:	5c 78       	castu.h	r8
8000ec92:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000ec96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec9a:	f0 f9 01 10 	ld.w	r9,r8[272]
8000ec9e:	fc 18 44 7a 	movh	r8,0x447a
8000eca2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eca6:	fc 18 44 7a 	movh	r8,0x447a
8000ecaa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ecae:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ecb2:	5c 88       	casts.h	r8
8000ecb4:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000ecb8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecbc:	70 08       	ld.w	r8,r8[0x0]
8000ecbe:	f0 f8 05 dc 	ld.w	r8,r8[1500]
8000ecc2:	5c 88       	casts.h	r8
8000ecc4:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ecc8:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ecca:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000ecce:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecd2:	70 08       	ld.w	r8,r8[0x0]
8000ecd4:	f0 f8 05 cc 	ld.w	r8,r8[1484]
8000ecd8:	5c 88       	casts.h	r8
8000ecda:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ecde:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ece0:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000ece4:	ec f8 00 00 	ld.w	r8,r6[0]
8000ece8:	70 08       	ld.w	r8,r8[0x0]
8000ecea:	f0 f8 05 bc 	ld.w	r8,r8[1468]
8000ecee:	5c 88       	casts.h	r8
8000ecf0:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ecf4:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ecf6:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000ecfa:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecfe:	70 08       	ld.w	r8,r8[0x0]
8000ed00:	f0 f8 05 ac 	ld.w	r8,r8[1452]
8000ed04:	5c 88       	casts.h	r8
8000ed06:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ed0a:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ed0c:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000ed10:	f0 16 00 27 	mcall	r6[156]
8000ed14:	18 9b       	mov	r11,r12
8000ed16:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ed1a:	1a d8       	st.w	--sp,r8
8000ed1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ed20:	1a d8       	st.w	--sp,r8
8000ed22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ed26:	1a d8       	st.w	--sp,r8
8000ed28:	1a d0       	st.w	--sp,r0
8000ed2a:	1a d1       	st.w	--sp,r1
8000ed2c:	1a d2       	st.w	--sp,r2
8000ed2e:	06 98       	mov	r8,r3
8000ed30:	0a 99       	mov	r9,r5
8000ed32:	30 0a       	mov	r10,0
8000ed34:	30 0c       	mov	r12,0
8000ed36:	fe b0 f9 4f 	rcall	8000dfd4 <mavlink_msg_servo_output_raw_send>
8000ed3a:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000ed3c:	2f cd       	sub	sp,-16
8000ed3e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ed42:	00 00       	add	r0,r0
8000ed44:	80 00       	ld.sh	r0,r0[0x0]
8000ed46:	ea 9e eb cd 	brqs	8018c4e0 <_data_lma+0x159e90>

8000ed48 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000ed48:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ed4c:	1a 97       	mov	r7,sp
8000ed4e:	20 2d       	sub	sp,8
8000ed50:	49 c6       	lddpc	r6,8000edc0 <mavlink_send_attitude_quaternion+0x78>
8000ed52:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000ed54:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed58:	70 08       	ld.w	r8,r8[0x0]
8000ed5a:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ed5e:	ef 48 ff f8 	st.w	r7[-8],r8
8000ed62:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed66:	70 08       	ld.w	r8,r8[0x0]
8000ed68:	71 f8       	ld.w	r8,r8[0x7c]
8000ed6a:	ef 48 ff fc 	st.w	r7[-4],r8
8000ed6e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed72:	70 08       	ld.w	r8,r8[0x0]
8000ed74:	71 e0       	ld.w	r0,r8[0x78]
8000ed76:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed7a:	70 08       	ld.w	r8,r8[0x0]
8000ed7c:	70 31       	ld.w	r1,r8[0xc]
8000ed7e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed82:	70 08       	ld.w	r8,r8[0x0]
8000ed84:	70 22       	ld.w	r2,r8[0x8]
8000ed86:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed8a:	70 08       	ld.w	r8,r8[0x0]
8000ed8c:	70 13       	ld.w	r3,r8[0x4]
8000ed8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed92:	70 08       	ld.w	r8,r8[0x0]
8000ed94:	70 05       	ld.w	r5,r8[0x0]
8000ed96:	f0 16 00 0e 	mcall	r6[56]
8000ed9a:	18 9b       	mov	r11,r12
8000ed9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eda0:	1a d8       	st.w	--sp,r8
8000eda2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eda6:	1a d8       	st.w	--sp,r8
8000eda8:	1a d0       	st.w	--sp,r0
8000edaa:	1a d1       	st.w	--sp,r1
8000edac:	04 98       	mov	r8,r2
8000edae:	06 99       	mov	r9,r3
8000edb0:	0a 9a       	mov	r10,r5
8000edb2:	30 0c       	mov	r12,0
8000edb4:	fe b0 f6 a2 	rcall	8000daf8 <mavlink_msg_attitude_quaternion_send>
8000edb8:	2f cd       	sub	sp,-16
}
8000edba:	2f ed       	sub	sp,-8
8000edbc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000edc0:	80 00       	ld.sh	r0,r0[0x0]
8000edc2:	eb d6       	*unknown*

8000edc4 <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000edc4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000edc8:	1a 97       	mov	r7,sp
8000edca:	20 4d       	sub	sp,16
8000edcc:	49 f6       	lddpc	r6,8000ee48 <mavlink_send_attitude+0x84>
8000edce:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000edd0:	ec f8 00 00 	ld.w	r8,r6[0]
8000edd4:	70 09       	ld.w	r9,r8[0x0]
8000edd6:	ee ca 00 0c 	sub	r10,r7,12
8000edda:	20 4d       	sub	sp,16
8000eddc:	1a 98       	mov	r8,sp
8000edde:	20 08       	sub	r8,0
8000ede0:	20 09       	sub	r9,0
8000ede2:	72 0b       	ld.w	r11,r9[0x0]
8000ede4:	91 0b       	st.w	r8[0x0],r11
8000ede6:	72 1b       	ld.w	r11,r9[0x4]
8000ede8:	91 1b       	st.w	r8[0x4],r11
8000edea:	72 2b       	ld.w	r11,r9[0x8]
8000edec:	91 2b       	st.w	r8[0x8],r11
8000edee:	72 39       	ld.w	r9,r9[0xc]
8000edf0:	91 39       	st.w	r8[0xc],r9
8000edf2:	14 9c       	mov	r12,r10
8000edf4:	f0 16 00 68 	mcall	r6[416]
8000edf8:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000edfa:	ec f8 00 00 	ld.w	r8,r6[0]
8000edfe:	70 08       	ld.w	r8,r8[0x0]
8000ee00:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ee04:	ef 48 ff f0 	st.w	r7[-16],r8
8000ee08:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee0c:	70 08       	ld.w	r8,r8[0x0]
8000ee0e:	71 f0       	ld.w	r0,r8[0x7c]
8000ee10:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee14:	70 08       	ld.w	r8,r8[0x0]
8000ee16:	71 e1       	ld.w	r1,r8[0x78]
8000ee18:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000ee1c:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000ee20:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000ee24:	f0 16 00 0e 	mcall	r6[56]
8000ee28:	18 9b       	mov	r11,r12
8000ee2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ee2e:	1a d8       	st.w	--sp,r8
8000ee30:	1a d0       	st.w	--sp,r0
8000ee32:	1a d1       	st.w	--sp,r1
8000ee34:	04 98       	mov	r8,r2
8000ee36:	06 99       	mov	r9,r3
8000ee38:	0a 9a       	mov	r10,r5
8000ee3a:	30 0c       	mov	r12,0
8000ee3c:	fe b0 f6 00 	rcall	8000da3c <mavlink_msg_attitude_send>
8000ee40:	2f dd       	sub	sp,-12
}
8000ee42:	2f cd       	sub	sp,-16
8000ee44:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ee48:	80 00       	ld.sh	r0,r0[0x0]
8000ee4a:	ec 52 eb cd 	cp.w	r2,912333

8000ee4c <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000ee4c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ee50:	1a 97       	mov	r7,sp
8000ee52:	20 9d       	sub	sp,36
8000ee54:	4e 66       	lddpc	r6,8000efec <mavlink_send_global_position+0x1a0>
8000ee56:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000ee58:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee5c:	70 08       	ld.w	r8,r8[0x0]
8000ee5e:	ee cc 00 1c 	sub	r12,r7,28
8000ee62:	20 cd       	sub	sp,48
8000ee64:	1a 99       	mov	r9,sp
8000ee66:	12 9b       	mov	r11,r9
8000ee68:	f0 ca f3 a4 	sub	r10,r8,-3164
8000ee6c:	f6 c8 00 00 	sub	r8,r11,0
8000ee70:	f4 c9 00 00 	sub	r9,r10,0
8000ee74:	72 0e       	ld.w	lr,r9[0x0]
8000ee76:	91 0e       	st.w	r8[0x0],lr
8000ee78:	72 1e       	ld.w	lr,r9[0x4]
8000ee7a:	91 1e       	st.w	r8[0x4],lr
8000ee7c:	72 2e       	ld.w	lr,r9[0x8]
8000ee7e:	91 2e       	st.w	r8[0x8],lr
8000ee80:	72 39       	ld.w	r9,r9[0xc]
8000ee82:	91 39       	st.w	r8[0xc],r9
8000ee84:	f6 c8 ff f0 	sub	r8,r11,-16
8000ee88:	f4 c9 ff f0 	sub	r9,r10,-16
8000ee8c:	72 0e       	ld.w	lr,r9[0x0]
8000ee8e:	91 0e       	st.w	r8[0x0],lr
8000ee90:	72 1e       	ld.w	lr,r9[0x4]
8000ee92:	91 1e       	st.w	r8[0x4],lr
8000ee94:	72 2e       	ld.w	lr,r9[0x8]
8000ee96:	91 2e       	st.w	r8[0x8],lr
8000ee98:	72 39       	ld.w	r9,r9[0xc]
8000ee9a:	91 39       	st.w	r8[0xc],r9
8000ee9c:	f6 c8 ff e0 	sub	r8,r11,-32
8000eea0:	f4 c9 ff e0 	sub	r9,r10,-32
8000eea4:	72 0a       	ld.w	r10,r9[0x0]
8000eea6:	91 0a       	st.w	r8[0x0],r10
8000eea8:	72 1a       	ld.w	r10,r9[0x4]
8000eeaa:	91 1a       	st.w	r8[0x4],r10
8000eeac:	72 2a       	ld.w	r10,r9[0x8]
8000eeae:	91 2a       	st.w	r8[0x8],r10
8000eeb0:	72 39       	ld.w	r9,r9[0xc]
8000eeb2:	91 39       	st.w	r8[0xc],r9
8000eeb4:	f0 16 00 81 	mcall	r6[516]
8000eeb8:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000eeba:	ec f8 00 00 	ld.w	r8,r6[0]
8000eebe:	70 08       	ld.w	r8,r8[0x0]
8000eec0:	f0 f8 00 80 	ld.w	r8,r8[128]
8000eec4:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eec8:	5c 88       	casts.h	r8
8000eeca:	5c 78       	castu.h	r8
8000eecc:	ef 48 ff dc 	st.w	r7[-36],r8
8000eed0:	ec f8 00 00 	ld.w	r8,r6[0]
8000eed4:	70 08       	ld.w	r8,r8[0x0]
8000eed6:	f0 f8 0c 3c 	ld.w	r8,r8[3132]
8000eeda:	10 9c       	mov	r12,r8
8000eedc:	f0 16 00 03 	mcall	r6[12]
8000eee0:	30 08       	mov	r8,0
8000eee2:	fc 19 40 59 	movh	r9,0x4059
8000eee6:	f0 16 00 02 	mcall	r6[8]
8000eeea:	14 98       	mov	r8,r10
8000eeec:	16 99       	mov	r9,r11
8000eeee:	10 9a       	mov	r10,r8
8000eef0:	12 9b       	mov	r11,r9
8000eef2:	f0 16 00 14 	mcall	r6[80]
8000eef6:	18 98       	mov	r8,r12
8000eef8:	5c 88       	casts.h	r8
8000eefa:	ef 48 ff e0 	st.w	r7[-32],r8
8000eefe:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef02:	70 08       	ld.w	r8,r8[0x0]
8000ef04:	f0 f8 0c 38 	ld.w	r8,r8[3128]
8000ef08:	10 9c       	mov	r12,r8
8000ef0a:	f0 16 00 03 	mcall	r6[12]
8000ef0e:	30 08       	mov	r8,0
8000ef10:	fc 19 40 59 	movh	r9,0x4059
8000ef14:	f0 16 00 02 	mcall	r6[8]
8000ef18:	14 98       	mov	r8,r10
8000ef1a:	16 99       	mov	r9,r11
8000ef1c:	10 9a       	mov	r10,r8
8000ef1e:	12 9b       	mov	r11,r9
8000ef20:	f0 16 00 14 	mcall	r6[80]
8000ef24:	18 98       	mov	r8,r12
8000ef26:	5c 88       	casts.h	r8
8000ef28:	10 90       	mov	r0,r8
8000ef2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef2e:	70 08       	ld.w	r8,r8[0x0]
8000ef30:	f0 f8 0c 34 	ld.w	r8,r8[3124]
8000ef34:	10 9c       	mov	r12,r8
8000ef36:	f0 16 00 03 	mcall	r6[12]
8000ef3a:	30 08       	mov	r8,0
8000ef3c:	fc 19 40 59 	movh	r9,0x4059
8000ef40:	f0 16 00 02 	mcall	r6[8]
8000ef44:	14 98       	mov	r8,r10
8000ef46:	16 99       	mov	r9,r11
8000ef48:	10 9a       	mov	r10,r8
8000ef4a:	12 9b       	mov	r11,r9
8000ef4c:	f0 16 00 14 	mcall	r6[80]
8000ef50:	18 98       	mov	r8,r12
8000ef52:	5c 88       	casts.h	r8
8000ef54:	10 91       	mov	r1,r8
8000ef56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ef5a:	10 9c       	mov	r12,r8
8000ef5c:	f0 16 00 03 	mcall	r6[12]
8000ef60:	30 08       	mov	r8,0
8000ef62:	e0 69 40 00 	mov	r9,16384
8000ef66:	ea 19 40 8f 	orh	r9,0x408f
8000ef6a:	f0 16 00 02 	mcall	r6[8]
8000ef6e:	14 98       	mov	r8,r10
8000ef70:	16 99       	mov	r9,r11
8000ef72:	10 9a       	mov	r10,r8
8000ef74:	12 9b       	mov	r11,r9
8000ef76:	f0 16 00 14 	mcall	r6[80]
8000ef7a:	18 92       	mov	r2,r12
8000ef7c:	ee ea ff e4 	ld.d	r10,r7[-28]
8000ef80:	30 08       	mov	r8,0
8000ef82:	e0 69 12 d0 	mov	r9,4816
8000ef86:	ea 19 41 63 	orh	r9,0x4163
8000ef8a:	f0 16 00 02 	mcall	r6[8]
8000ef8e:	14 98       	mov	r8,r10
8000ef90:	16 99       	mov	r9,r11
8000ef92:	10 9a       	mov	r10,r8
8000ef94:	12 9b       	mov	r11,r9
8000ef96:	f0 16 00 14 	mcall	r6[80]
8000ef9a:	18 93       	mov	r3,r12
8000ef9c:	ee ea ff ec 	ld.d	r10,r7[-20]
8000efa0:	30 08       	mov	r8,0
8000efa2:	e0 69 12 d0 	mov	r9,4816
8000efa6:	ea 19 41 63 	orh	r9,0x4163
8000efaa:	f0 16 00 02 	mcall	r6[8]
8000efae:	14 98       	mov	r8,r10
8000efb0:	16 99       	mov	r9,r11
8000efb2:	10 9a       	mov	r10,r8
8000efb4:	12 9b       	mov	r11,r9
8000efb6:	f0 16 00 14 	mcall	r6[80]
8000efba:	18 95       	mov	r5,r12
8000efbc:	f0 16 00 0e 	mcall	r6[56]
8000efc0:	18 9b       	mov	r11,r12
8000efc2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000efc6:	1a d8       	st.w	--sp,r8
8000efc8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000efcc:	1a d8       	st.w	--sp,r8
8000efce:	1a d0       	st.w	--sp,r0
8000efd0:	1a d1       	st.w	--sp,r1
8000efd2:	30 18       	mov	r8,1
8000efd4:	1a d8       	st.w	--sp,r8
8000efd6:	04 98       	mov	r8,r2
8000efd8:	06 99       	mov	r9,r3
8000efda:	0a 9a       	mov	r10,r5
8000efdc:	30 0c       	mov	r12,0
8000efde:	fe b0 f6 53 	rcall	8000dc84 <mavlink_msg_global_position_int_send>
8000efe2:	2f bd       	sub	sp,-20
   //} 
}
8000efe4:	2f 7d       	sub	sp,-36
8000efe6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000efea:	00 00       	add	r0,r0
8000efec:	80 00       	ld.sh	r0,r0[0x0]
8000efee:	ec da eb cd 	satsub.w	r10,r6,-5171

8000eff0 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000eff0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000eff4:	1a 97       	mov	r7,sp
8000eff6:	20 5d       	sub	sp,20
8000eff8:	4d 46       	lddpc	r6,8000f148 <mavlink_send_hud+0x158>
8000effa:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000effc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f000:	70 08       	ld.w	r8,r8[0x0]
8000f002:	f0 f9 0c 34 	ld.w	r9,r8[3124]
8000f006:	ec f8 00 00 	ld.w	r8,r6[0]
8000f00a:	70 08       	ld.w	r8,r8[0x0]
8000f00c:	f0 f8 0c 34 	ld.w	r8,r8[3124]
8000f010:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000f014:	ec f8 00 00 	ld.w	r8,r6[0]
8000f018:	70 08       	ld.w	r8,r8[0x0]
8000f01a:	f0 fa 0c 38 	ld.w	r10,r8[3128]
8000f01e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f022:	70 08       	ld.w	r8,r8[0x0]
8000f024:	f0 f8 0c 38 	ld.w	r8,r8[3128]
8000f028:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000f02c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000f030:	10 9c       	mov	r12,r8
8000f032:	f0 16 00 03 	mcall	r6[12]
8000f036:	14 98       	mov	r8,r10
8000f038:	16 99       	mov	r9,r11
8000f03a:	10 9a       	mov	r10,r8
8000f03c:	12 9b       	mov	r11,r9
8000f03e:	f0 16 00 66 	mcall	r6[408]
8000f042:	14 98       	mov	r8,r10
8000f044:	16 99       	mov	r9,r11
8000f046:	10 9a       	mov	r10,r8
8000f048:	12 9b       	mov	r11,r9
8000f04a:	f0 16 00 09 	mcall	r6[36]
8000f04e:	18 98       	mov	r8,r12
8000f050:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000f054:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f058:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000f05c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f060:	70 09       	ld.w	r9,r8[0x0]
8000f062:	ee ca 00 14 	sub	r10,r7,20
8000f066:	20 4d       	sub	sp,16
8000f068:	1a 98       	mov	r8,sp
8000f06a:	20 08       	sub	r8,0
8000f06c:	20 09       	sub	r9,0
8000f06e:	72 0b       	ld.w	r11,r9[0x0]
8000f070:	91 0b       	st.w	r8[0x0],r11
8000f072:	72 1b       	ld.w	r11,r9[0x4]
8000f074:	91 1b       	st.w	r8[0x4],r11
8000f076:	72 2b       	ld.w	r11,r9[0x8]
8000f078:	91 2b       	st.w	r8[0x8],r11
8000f07a:	72 39       	ld.w	r9,r9[0xc]
8000f07c:	91 39       	st.w	r8[0xc],r9
8000f07e:	14 9c       	mov	r12,r10
8000f080:	f0 16 00 68 	mcall	r6[416]
8000f084:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000f086:	ec f8 00 00 	ld.w	r8,r6[0]
8000f08a:	70 08       	ld.w	r8,r8[0x0]
8000f08c:	f0 f8 0c 3c 	ld.w	r8,r8[3132]
8000f090:	10 92       	mov	r2,r8
8000f092:	ee 12 80 00 	eorh	r2,0x8000
8000f096:	ec f8 00 00 	ld.w	r8,r6[0]
8000f09a:	70 08       	ld.w	r8,r8[0x0]
8000f09c:	f0 f8 0c 64 	ld.w	r8,r8[3172]
8000f0a0:	10 93       	mov	r3,r8
8000f0a2:	ee 13 80 00 	eorh	r3,0x8000
8000f0a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0aa:	70 08       	ld.w	r8,r8[0x0]
8000f0ac:	f0 f8 01 54 	ld.w	r8,r8[340]
8000f0b0:	10 9c       	mov	r12,r8
8000f0b2:	f0 16 00 03 	mcall	r6[12]
8000f0b6:	30 08       	mov	r8,0
8000f0b8:	fc 19 3f f0 	movh	r9,0x3ff0
8000f0bc:	f0 16 00 05 	mcall	r6[20]
8000f0c0:	14 98       	mov	r8,r10
8000f0c2:	16 99       	mov	r9,r11
8000f0c4:	10 9a       	mov	r10,r8
8000f0c6:	12 9b       	mov	r11,r9
8000f0c8:	30 08       	mov	r8,0
8000f0ca:	fc 19 40 49 	movh	r9,0x4049
8000f0ce:	f0 16 00 02 	mcall	r6[8]
8000f0d2:	14 98       	mov	r8,r10
8000f0d4:	16 99       	mov	r9,r11
8000f0d6:	10 9a       	mov	r10,r8
8000f0d8:	12 9b       	mov	r11,r9
8000f0da:	f0 16 00 14 	mcall	r6[80]
8000f0de:	18 98       	mov	r8,r12
8000f0e0:	5c 88       	casts.h	r8
8000f0e2:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f0e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0ea:	10 9c       	mov	r12,r8
8000f0ec:	f0 16 00 03 	mcall	r6[12]
8000f0f0:	30 08       	mov	r8,0
8000f0f2:	e0 69 80 00 	mov	r9,32768
8000f0f6:	ea 19 40 66 	orh	r9,0x4066
8000f0fa:	f0 16 00 02 	mcall	r6[8]
8000f0fe:	14 98       	mov	r8,r10
8000f100:	16 99       	mov	r9,r11
8000f102:	10 9a       	mov	r10,r8
8000f104:	12 9b       	mov	r11,r9
8000f106:	e0 68 2d 18 	mov	r8,11544
8000f10a:	ea 18 54 44 	orh	r8,0x5444
8000f10e:	e0 69 21 fb 	mov	r9,8699
8000f112:	ea 19 40 09 	orh	r9,0x4009
8000f116:	f0 16 00 0c 	mcall	r6[48]
8000f11a:	14 98       	mov	r8,r10
8000f11c:	16 99       	mov	r9,r11
8000f11e:	10 9a       	mov	r10,r8
8000f120:	12 9b       	mov	r11,r9
8000f122:	f0 16 00 14 	mcall	r6[80]
8000f126:	18 98       	mov	r8,r12
8000f128:	5c 88       	casts.h	r8
8000f12a:	10 99       	mov	r9,r8
8000f12c:	1a d2       	st.w	--sp,r2
8000f12e:	1a d3       	st.w	--sp,r3
8000f130:	0a 98       	mov	r8,r5
8000f132:	ee fa ff f8 	ld.w	r10,r7[-8]
8000f136:	ee fb ff fc 	ld.w	r11,r7[-4]
8000f13a:	30 0c       	mov	r12,0
8000f13c:	fe b0 f8 72 	rcall	8000e220 <mavlink_msg_vfr_hud_send>
8000f140:	2f ed       	sub	sp,-8

	
}
8000f142:	2f bd       	sub	sp,-20
8000f144:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f148:	80 00       	ld.sh	r0,r0[0x0]
8000f14a:	ee 7e eb cd 	mov	lr,1043405

8000f14c <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000f14c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f150:	1a 97       	mov	r7,sp
8000f152:	20 4d       	sub	sp,16
8000f154:	4f d6       	lddpc	r6,8000f348 <mavlink_send_gps_raw+0x1fc>
8000f156:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000f158:	ec f8 00 00 	ld.w	r8,r6[0]
8000f15c:	70 08       	ld.w	r8,r8[0x0]
8000f15e:	f1 39 0a 14 	ld.ub	r9,r8[2580]
8000f162:	30 28       	mov	r8,2
8000f164:	f0 09 18 00 	cp.b	r9,r8
8000f168:	e0 81 00 c0 	brne	8000f2e8 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000f16c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f170:	70 08       	ld.w	r8,r8[0x0]
8000f172:	f1 38 0a 08 	ld.ub	r8,r8[2568]
8000f176:	ef 48 ff f0 	st.w	r7[-16],r8
8000f17a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f17e:	70 08       	ld.w	r8,r8[0x0]
8000f180:	f0 f8 09 f4 	ld.w	r8,r8[2548]
8000f184:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f188:	5c 88       	casts.h	r8
8000f18a:	5c 78       	castu.h	r8
8000f18c:	ef 48 ff f4 	st.w	r7[-12],r8
8000f190:	ec f8 00 00 	ld.w	r8,r6[0]
8000f194:	70 08       	ld.w	r8,r8[0x0]
8000f196:	f0 f8 09 e4 	ld.w	r8,r8[2532]
8000f19a:	10 9c       	mov	r12,r8
8000f19c:	f0 16 00 03 	mcall	r6[12]
8000f1a0:	30 08       	mov	r8,0
8000f1a2:	fc 19 40 59 	movh	r9,0x4059
8000f1a6:	f0 16 00 02 	mcall	r6[8]
8000f1aa:	14 98       	mov	r8,r10
8000f1ac:	16 99       	mov	r9,r11
8000f1ae:	10 9a       	mov	r10,r8
8000f1b0:	12 9b       	mov	r11,r9
8000f1b2:	f0 16 00 76 	mcall	r6[472]
8000f1b6:	18 98       	mov	r8,r12
8000f1b8:	5c 88       	casts.h	r8
8000f1ba:	5c 78       	castu.h	r8
8000f1bc:	ef 48 ff f8 	st.w	r7[-8],r8
8000f1c0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1c4:	70 08       	ld.w	r8,r8[0x0]
8000f1c6:	f0 f8 0a 00 	ld.w	r8,r8[2560]
8000f1ca:	10 9c       	mov	r12,r8
8000f1cc:	f0 16 00 03 	mcall	r6[12]
8000f1d0:	30 08       	mov	r8,0
8000f1d2:	fc 19 40 59 	movh	r9,0x4059
8000f1d6:	f0 16 00 02 	mcall	r6[8]
8000f1da:	14 98       	mov	r8,r10
8000f1dc:	16 99       	mov	r9,r11
8000f1de:	10 9a       	mov	r10,r8
8000f1e0:	12 9b       	mov	r11,r9
8000f1e2:	f0 16 00 76 	mcall	r6[472]
8000f1e6:	18 98       	mov	r8,r12
8000f1e8:	5c 88       	casts.h	r8
8000f1ea:	5c 78       	castu.h	r8
8000f1ec:	ef 48 ff fc 	st.w	r7[-4],r8
8000f1f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1f4:	70 08       	ld.w	r8,r8[0x0]
8000f1f6:	f1 08 0a 0a 	ld.sh	r8,r8[2570]
8000f1fa:	5c 78       	castu.h	r8
8000f1fc:	10 9c       	mov	r12,r8
8000f1fe:	f0 16 00 1a 	mcall	r6[104]
8000f202:	30 08       	mov	r8,0
8000f204:	fc 19 40 59 	movh	r9,0x4059
8000f208:	f0 16 00 02 	mcall	r6[8]
8000f20c:	14 98       	mov	r8,r10
8000f20e:	16 99       	mov	r9,r11
8000f210:	10 9a       	mov	r10,r8
8000f212:	12 9b       	mov	r11,r9
8000f214:	f0 16 00 76 	mcall	r6[472]
8000f218:	18 98       	mov	r8,r12
8000f21a:	5c 88       	casts.h	r8
8000f21c:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f220:	ec f8 00 00 	ld.w	r8,r6[0]
8000f224:	70 08       	ld.w	r8,r8[0x0]
8000f226:	f0 f8 09 d8 	ld.w	r8,r8[2520]
8000f22a:	10 9c       	mov	r12,r8
8000f22c:	f0 16 00 03 	mcall	r6[12]
8000f230:	30 08       	mov	r8,0
8000f232:	e0 69 40 00 	mov	r9,16384
8000f236:	ea 19 40 8f 	orh	r9,0x408f
8000f23a:	f0 16 00 02 	mcall	r6[8]
8000f23e:	14 98       	mov	r8,r10
8000f240:	16 99       	mov	r9,r11
8000f242:	10 9a       	mov	r10,r8
8000f244:	12 9b       	mov	r11,r9
8000f246:	f0 16 00 14 	mcall	r6[80]
8000f24a:	18 93       	mov	r3,r12
8000f24c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f250:	70 08       	ld.w	r8,r8[0x0]
8000f252:	f0 ea 09 d0 	ld.d	r10,r8[2512]
8000f256:	30 08       	mov	r8,0
8000f258:	e0 69 12 d0 	mov	r9,4816
8000f25c:	ea 19 41 63 	orh	r9,0x4163
8000f260:	f0 16 00 02 	mcall	r6[8]
8000f264:	14 98       	mov	r8,r10
8000f266:	16 99       	mov	r9,r11
8000f268:	10 9a       	mov	r10,r8
8000f26a:	12 9b       	mov	r11,r9
8000f26c:	f0 16 00 14 	mcall	r6[80]
8000f270:	18 95       	mov	r5,r12
8000f272:	ec f8 00 00 	ld.w	r8,r6[0]
8000f276:	70 08       	ld.w	r8,r8[0x0]
8000f278:	f0 ea 09 c8 	ld.d	r10,r8[2504]
8000f27c:	30 08       	mov	r8,0
8000f27e:	e0 69 12 d0 	mov	r9,4816
8000f282:	ea 19 41 63 	orh	r9,0x4163
8000f286:	f0 16 00 02 	mcall	r6[8]
8000f28a:	14 98       	mov	r8,r10
8000f28c:	16 99       	mov	r9,r11
8000f28e:	10 9a       	mov	r10,r8
8000f290:	12 9b       	mov	r11,r9
8000f292:	f0 16 00 14 	mcall	r6[80]
8000f296:	18 9a       	mov	r10,r12
8000f298:	ec f8 00 00 	ld.w	r8,r6[0]
8000f29c:	70 08       	ld.w	r8,r8[0x0]
8000f29e:	f1 38 0a 14 	ld.ub	r8,r8[2580]
8000f2a2:	10 99       	mov	r9,r8
8000f2a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2a8:	70 08       	ld.w	r8,r8[0x0]
8000f2aa:	f0 fb 0a 0c 	ld.w	r11,r8[2572]
8000f2ae:	e0 68 03 e8 	mov	r8,1000
8000f2b2:	f6 08 02 48 	mul	r8,r11,r8
8000f2b6:	10 90       	mov	r0,r8
8000f2b8:	30 01       	mov	r1,0
8000f2ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f2be:	1a d8       	st.w	--sp,r8
8000f2c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f2c4:	1a d8       	st.w	--sp,r8
8000f2c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f2ca:	1a d8       	st.w	--sp,r8
8000f2cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f2d0:	1a d8       	st.w	--sp,r8
8000f2d2:	1a d2       	st.w	--sp,r2
8000f2d4:	1a d3       	st.w	--sp,r3
8000f2d6:	1a d5       	st.w	--sp,r5
8000f2d8:	14 98       	mov	r8,r10
8000f2da:	00 9a       	mov	r10,r0
8000f2dc:	02 9b       	mov	r11,r1
8000f2de:	30 0c       	mov	r12,0
8000f2e0:	fe b0 f1 d2 	rcall	8000d684 <mavlink_msg_gps_raw_int_send>
8000f2e4:	2f 9d       	sub	sp,-28
8000f2e6:	c2 e8       	rjmp	8000f342 <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000f2e8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2ec:	70 08       	ld.w	r8,r8[0x0]
8000f2ee:	f1 38 0a 08 	ld.ub	r8,r8[2568]
8000f2f2:	10 91       	mov	r1,r8
8000f2f4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2f8:	70 08       	ld.w	r8,r8[0x0]
8000f2fa:	f1 38 0a 14 	ld.ub	r8,r8[2580]
8000f2fe:	10 95       	mov	r5,r8
8000f300:	f0 16 00 27 	mcall	r6[156]
8000f304:	18 98       	mov	r8,r12
8000f306:	10 92       	mov	r2,r8
8000f308:	30 03       	mov	r3,0
8000f30a:	1a d1       	st.w	--sp,r1
8000f30c:	30 08       	mov	r8,0
8000f30e:	1a d8       	st.w	--sp,r8
8000f310:	30 08       	mov	r8,0
8000f312:	1a d8       	st.w	--sp,r8
8000f314:	30 08       	mov	r8,0
8000f316:	1a d8       	st.w	--sp,r8
8000f318:	30 08       	mov	r8,0
8000f31a:	1a d8       	st.w	--sp,r8
8000f31c:	e6 68 1a 80 	mov	r8,400000
8000f320:	1a d8       	st.w	--sp,r8
8000f322:	e0 68 c0 0c 	mov	r8,49164
8000f326:	ea 18 03 e9 	orh	r8,0x3e9
8000f32a:	1a d8       	st.w	--sp,r8
8000f32c:	e0 68 48 28 	mov	r8,18472
8000f330:	ea 18 1b ba 	orh	r8,0x1bba
8000f334:	0a 99       	mov	r9,r5
8000f336:	04 9a       	mov	r10,r2
8000f338:	06 9b       	mov	r11,r3
8000f33a:	30 0c       	mov	r12,0
8000f33c:	fe b0 f1 a4 	rcall	8000d684 <mavlink_msg_gps_raw_int_send>
8000f340:	2f 9d       	sub	sp,-28
	}
}
8000f342:	2f cd       	sub	sp,-16
8000f344:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f348:	80 00       	ld.sh	r0,r0[0x0]
8000f34a:	ef da 70 72 	ldins.b	r10:t,r7[114]
8000f34e:	65 73       	ld.w	r3,r2[0x5c]
8000f350:	73 41       	ld.w	r1,r9[0x50]
8000f352:	6c 74       	ld.w	r4,r6[0x1c]
8000f354:	00 00       	add	r0,r0
8000f356:	00 00       	add	r0,r0
8000f358:	6c 61       	ld.w	r1,r6[0x18]
8000f35a:	73 74       	ld.w	r4,r9[0x5c]
8000f35c:	41 6c       	lddsp	r12,sp[0x58]
8000f35e:	74 00       	ld.w	r0,r10[0x0]
8000f360:	62 61       	ld.w	r1,r1[0x18]
8000f362:	72 6f       	ld.w	pc,r9[0x18]
8000f364:	5f 64       	srmi	r4
8000f366:	74 00       	ld.w	r0,r10[0x0]

8000f368 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000f368:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f36c:	1a 97       	mov	r7,sp
8000f36e:	4b 56       	lddpc	r6,8000f440 <mavlink_send_pressure+0xd8>
8000f370:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000f372:	ec f8 00 00 	ld.w	r8,r6[0]
8000f376:	70 08       	ld.w	r8,r8[0x0]
8000f378:	f0 f8 0f 90 	ld.w	r8,r8[3984]
8000f37c:	10 9c       	mov	r12,r8
8000f37e:	f0 16 00 03 	mcall	r6[12]
8000f382:	30 08       	mov	r8,0
8000f384:	fc 19 40 59 	movh	r9,0x4059
8000f388:	f0 16 00 02 	mcall	r6[8]
8000f38c:	14 98       	mov	r8,r10
8000f38e:	16 99       	mov	r9,r11
8000f390:	10 9a       	mov	r10,r8
8000f392:	12 9b       	mov	r11,r9
8000f394:	f0 16 00 14 	mcall	r6[80]
8000f398:	18 98       	mov	r8,r12
8000f39a:	5c 88       	casts.h	r8
8000f39c:	10 92       	mov	r2,r8
8000f39e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3a2:	70 08       	ld.w	r8,r8[0x0]
8000f3a4:	f0 f3 0f a8 	ld.w	r3,r8[4008]
8000f3a8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3ac:	70 08       	ld.w	r8,r8[0x0]
8000f3ae:	f0 f8 0f 8c 	ld.w	r8,r8[3980]
8000f3b2:	fc 1b 42 c8 	movh	r11,0x42c8
8000f3b6:	10 9c       	mov	r12,r8
8000f3b8:	f0 16 00 08 	mcall	r6[32]
8000f3bc:	18 98       	mov	r8,r12
8000f3be:	10 95       	mov	r5,r8
8000f3c0:	f0 16 00 0e 	mcall	r6[56]
8000f3c4:	18 9b       	mov	r11,r12
8000f3c6:	04 98       	mov	r8,r2
8000f3c8:	06 99       	mov	r9,r3
8000f3ca:	0a 9a       	mov	r10,r5
8000f3cc:	30 0c       	mov	r12,0
8000f3ce:	fe b0 f2 f5 	rcall	8000d9b8 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000f3d2:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000f3d6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3da:	70 08       	ld.w	r8,r8[0x0]
8000f3dc:	f0 f5 0f a0 	ld.w	r5,r8[4000]
8000f3e0:	f0 16 00 0e 	mcall	r6[56]
8000f3e4:	18 98       	mov	r8,r12
8000f3e6:	0a 99       	mov	r9,r5
8000f3e8:	fe ca 00 9c 	sub	r10,pc,156
8000f3ec:	10 9b       	mov	r11,r8
8000f3ee:	30 0c       	mov	r12,0
8000f3f0:	fe b0 f9 aa 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f3f4:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000f3f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3fc:	70 08       	ld.w	r8,r8[0x0]
8000f3fe:	f0 f5 0c 4c 	ld.w	r5,r8[3148]
8000f402:	f0 16 00 0e 	mcall	r6[56]
8000f406:	18 98       	mov	r8,r12
8000f408:	0a 99       	mov	r9,r5
8000f40a:	fe ca 00 b2 	sub	r10,pc,178
8000f40e:	10 9b       	mov	r11,r8
8000f410:	30 0c       	mov	r12,0
8000f412:	fe b0 f9 99 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f416:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000f41a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f41e:	70 08       	ld.w	r8,r8[0x0]
8000f420:	f0 f5 0f b8 	ld.w	r5,r8[4024]
8000f424:	f0 16 00 0e 	mcall	r6[56]
8000f428:	18 98       	mov	r8,r12
8000f42a:	0a 99       	mov	r9,r5
8000f42c:	fe ca 00 cc 	sub	r10,pc,204
8000f430:	10 9b       	mov	r11,r8
8000f432:	30 0c       	mov	r12,0
8000f434:	fe b0 f9 88 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f438:	f0 16 00 2b 	mcall	r6[172]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000f43c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f440:	80 00       	ld.sh	r0,r0[0x0]
8000f442:	f1 f4 52 61 	ld.shlt	r4,r8[0xc2]
8000f446:	64 61       	ld.w	r1,r2[0x18]
8000f448:	72 5f       	ld.w	pc,r9[0x14]
8000f44a:	76 65       	ld.w	r5,r11[0x18]
8000f44c:	6c 6f       	ld.w	pc,r6[0x18]
8000f44e:	63 69       	ld.w	r9,r1[0x58]
8000f450:	74 79       	ld.w	r9,r10[0x1c]
8000f452:	00 00       	add	r0,r0
8000f454:	52 61       	stdsp	sp[0x98],r1
8000f456:	64 61       	ld.w	r1,r2[0x18]
8000f458:	72 5f       	ld.w	pc,r9[0x14]
8000f45a:	61 6d       	ld.w	sp,r0[0x58]
8000f45c:	70 6c       	ld.w	r12,r8[0x18]
8000f45e:	69 74       	ld.w	r4,r4[0x5c]
8000f460:	75 64       	ld.w	r4,r10[0x58]
8000f462:	65 00       	ld.w	r0,r2[0x40]

8000f464 <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000f464:	eb cd 40 e0 	pushm	r5-r7,lr
8000f468:	1a 97       	mov	r7,sp
8000f46a:	20 1d       	sub	sp,4
8000f46c:	49 76       	lddpc	r6,8000f4c8 <mavlink_send_radar+0x64>
8000f46e:	1e 26       	rsub	r6,pc
	read_radar();
8000f470:	f0 16 01 99 	mcall	r6[1636]
	radar_target *target=get_radar_main_target();
8000f474:	f0 16 01 a3 	mcall	r6[1676]
8000f478:	18 98       	mov	r8,r12
8000f47a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000f47e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f482:	70 05       	ld.w	r5,r8[0x0]
8000f484:	f0 16 00 0e 	mcall	r6[56]
8000f488:	18 98       	mov	r8,r12
8000f48a:	0a 99       	mov	r9,r5
8000f48c:	fe ca 00 48 	sub	r10,pc,72
8000f490:	10 9b       	mov	r11,r8
8000f492:	30 0c       	mov	r12,0
8000f494:	fe b0 f9 58 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000f498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f49c:	70 18       	ld.w	r8,r8[0x4]
8000f49e:	fc 1b 44 7a 	movh	r11,0x447a
8000f4a2:	10 9c       	mov	r12,r8
8000f4a4:	f0 16 00 08 	mcall	r6[32]
8000f4a8:	18 98       	mov	r8,r12
8000f4aa:	10 95       	mov	r5,r8
8000f4ac:	f0 16 00 0e 	mcall	r6[56]
8000f4b0:	18 98       	mov	r8,r12
8000f4b2:	0a 99       	mov	r9,r5
8000f4b4:	fe ca 00 60 	sub	r10,pc,96
8000f4b8:	10 9b       	mov	r11,r8
8000f4ba:	30 0c       	mov	r12,0
8000f4bc:	fe b0 f9 44 	rcall	8000e744 <mavlink_msg_named_value_float_send>
}
8000f4c0:	2f fd       	sub	sp,-4
8000f4c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f4c6:	00 00       	add	r0,r0
8000f4c8:	80 00       	ld.sh	r0,r0[0x0]
8000f4ca:	f2 f2 eb cd 	ld.w	r2,r9[-5171]

8000f4cc <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000f4cc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f4d0:	1a 97       	mov	r7,sp
8000f4d2:	20 1d       	sub	sp,4
8000f4d4:	49 a6       	lddpc	r6,8000f53c <mavlink_send_estimator+0x70>
8000f4d6:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000f4d8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4dc:	70 08       	ld.w	r8,r8[0x0]
8000f4de:	f0 f8 0c 3c 	ld.w	r8,r8[3132]
8000f4e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000f4e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4ea:	70 08       	ld.w	r8,r8[0x0]
8000f4ec:	f0 f0 0c 38 	ld.w	r0,r8[3128]
8000f4f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4f4:	70 08       	ld.w	r8,r8[0x0]
8000f4f6:	f0 f1 0c 34 	ld.w	r1,r8[3124]
8000f4fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4fe:	70 08       	ld.w	r8,r8[0x0]
8000f500:	f0 f2 0c 64 	ld.w	r2,r8[3172]
8000f504:	ec f8 00 00 	ld.w	r8,r6[0]
8000f508:	70 08       	ld.w	r8,r8[0x0]
8000f50a:	f0 f3 0c 60 	ld.w	r3,r8[3168]
8000f50e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f512:	70 08       	ld.w	r8,r8[0x0]
8000f514:	f0 f5 0c 5c 	ld.w	r5,r8[3164]
8000f518:	f0 16 00 0e 	mcall	r6[56]
8000f51c:	18 9b       	mov	r11,r12
8000f51e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f522:	1a d8       	st.w	--sp,r8
8000f524:	1a d0       	st.w	--sp,r0
8000f526:	1a d1       	st.w	--sp,r1
8000f528:	04 98       	mov	r8,r2
8000f52a:	06 99       	mov	r9,r3
8000f52c:	0a 9a       	mov	r10,r5
8000f52e:	30 0c       	mov	r12,0
8000f530:	fe b0 f3 4c 	rcall	8000dbc8 <mavlink_msg_local_position_ned_send>
8000f534:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000f536:	2f fd       	sub	sp,-4
8000f538:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f53c:	80 00       	ld.sh	r0,r0[0x0]
8000f53e:	f3 5a 65 73 	st.h	r9[25971],r10
8000f542:	74 69       	ld.w	r9,r10[0x18]
8000f544:	58 00       	cp.w	r0,0
8000f546:	00 00       	add	r0,r0
8000f548:	65 73       	ld.w	r3,r2[0x5c]
8000f54a:	74 69       	ld.w	r9,r10[0x18]
8000f54c:	59 00       	cp.w	r0,16
8000f54e:	00 00       	add	r0,r0
8000f550:	65 73       	ld.w	r3,r2[0x5c]
8000f552:	74 69       	ld.w	r9,r10[0x18]
8000f554:	5a 00       	cp.w	r0,-32
8000f556:	00 00       	add	r0,r0
8000f558:	65 73       	ld.w	r3,r2[0x5c]
8000f55a:	74 69       	ld.w	r9,r10[0x18]
8000f55c:	56 78       	stdsp	sp[0x19c],r8
8000f55e:	00 00       	add	r0,r0
8000f560:	65 73       	ld.w	r3,r2[0x5c]
8000f562:	74 69       	ld.w	r9,r10[0x18]
8000f564:	56 79       	stdsp	sp[0x19c],r9
8000f566:	00 00       	add	r0,r0
8000f568:	65 73       	ld.w	r3,r2[0x5c]
8000f56a:	74 69       	ld.w	r9,r10[0x18]
8000f56c:	56 7a       	stdsp	sp[0x19c],r10
8000f56e:	00 00       	add	r0,r0
8000f570:	65 73       	ld.w	r3,r2[0x5c]
8000f572:	74 69       	ld.w	r9,r10[0x18]
8000f574:	62 69       	ld.w	r9,r1[0x18]
8000f576:	61 69       	ld.w	r9,r0[0x58]
8000f578:	73 58       	ld.w	r8,r9[0x54]
8000f57a:	00 00       	add	r0,r0
8000f57c:	65 73       	ld.w	r3,r2[0x5c]
8000f57e:	74 69       	ld.w	r9,r10[0x18]
8000f580:	62 69       	ld.w	r9,r1[0x18]
8000f582:	61 69       	ld.w	r9,r0[0x58]
8000f584:	73 59       	ld.w	r9,r9[0x54]
8000f586:	00 00       	add	r0,r0
8000f588:	65 73       	ld.w	r3,r2[0x5c]
8000f58a:	74 69       	ld.w	r9,r10[0x18]
8000f58c:	62 69       	ld.w	r9,r1[0x18]
8000f58e:	61 69       	ld.w	r9,r0[0x58]
8000f590:	73 5a       	ld.w	r10,r9[0x54]
	...

8000f594 <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000f594:	eb cd 40 e0 	pushm	r5-r7,lr
8000f598:	1a 97       	mov	r7,sp
8000f59a:	4d d6       	lddpc	r6,8000f70c <mavlink_send_kalman_estimator+0x178>
8000f59c:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000f59e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f5a2:	70 08       	ld.w	r8,r8[0x0]
8000f5a4:	f0 e8 0a 1c 	ld.d	r8,r8[2588]
8000f5a8:	10 9a       	mov	r10,r8
8000f5aa:	12 9b       	mov	r11,r9
8000f5ac:	f0 16 00 09 	mcall	r6[36]
8000f5b0:	18 95       	mov	r5,r12
8000f5b2:	f0 16 00 0e 	mcall	r6[56]
8000f5b6:	18 98       	mov	r8,r12
8000f5b8:	0a 99       	mov	r9,r5
8000f5ba:	fe ca 00 7a 	sub	r10,pc,122
8000f5be:	10 9b       	mov	r11,r8
8000f5c0:	30 0c       	mov	r12,0
8000f5c2:	fe b0 f8 c1 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000f5c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f5ca:	70 08       	ld.w	r8,r8[0x0]
8000f5cc:	f0 e8 0a 34 	ld.d	r8,r8[2612]
8000f5d0:	10 9a       	mov	r10,r8
8000f5d2:	12 9b       	mov	r11,r9
8000f5d4:	f0 16 00 09 	mcall	r6[36]
8000f5d8:	18 95       	mov	r5,r12
8000f5da:	f0 16 00 0e 	mcall	r6[56]
8000f5de:	18 98       	mov	r8,r12
8000f5e0:	0a 99       	mov	r9,r5
8000f5e2:	fe ca 00 9a 	sub	r10,pc,154
8000f5e6:	10 9b       	mov	r11,r8
8000f5e8:	30 0c       	mov	r12,0
8000f5ea:	fe b0 f8 ad 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000f5ee:	ec f8 00 00 	ld.w	r8,r6[0]
8000f5f2:	70 08       	ld.w	r8,r8[0x0]
8000f5f4:	f0 e8 0a 4c 	ld.d	r8,r8[2636]
8000f5f8:	10 9a       	mov	r10,r8
8000f5fa:	12 9b       	mov	r11,r9
8000f5fc:	f0 16 00 09 	mcall	r6[36]
8000f600:	18 95       	mov	r5,r12
8000f602:	f0 16 00 0e 	mcall	r6[56]
8000f606:	18 98       	mov	r8,r12
8000f608:	0a 99       	mov	r9,r5
8000f60a:	fe ca 00 ba 	sub	r10,pc,186
8000f60e:	10 9b       	mov	r11,r8
8000f610:	30 0c       	mov	r12,0
8000f612:	fe b0 f8 99 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000f616:	ec f8 00 00 	ld.w	r8,r6[0]
8000f61a:	70 08       	ld.w	r8,r8[0x0]
8000f61c:	f0 e8 0a 24 	ld.d	r8,r8[2596]
8000f620:	10 9a       	mov	r10,r8
8000f622:	12 9b       	mov	r11,r9
8000f624:	f0 16 00 09 	mcall	r6[36]
8000f628:	18 95       	mov	r5,r12
8000f62a:	f0 16 00 0e 	mcall	r6[56]
8000f62e:	18 98       	mov	r8,r12
8000f630:	0a 99       	mov	r9,r5
8000f632:	fe ca 00 da 	sub	r10,pc,218
8000f636:	10 9b       	mov	r11,r8
8000f638:	30 0c       	mov	r12,0
8000f63a:	fe b0 f8 85 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000f63e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f642:	70 08       	ld.w	r8,r8[0x0]
8000f644:	f0 e8 0a 3c 	ld.d	r8,r8[2620]
8000f648:	10 9a       	mov	r10,r8
8000f64a:	12 9b       	mov	r11,r9
8000f64c:	f0 16 00 09 	mcall	r6[36]
8000f650:	18 95       	mov	r5,r12
8000f652:	f0 16 00 0e 	mcall	r6[56]
8000f656:	18 98       	mov	r8,r12
8000f658:	0a 99       	mov	r9,r5
8000f65a:	fe ca 00 fa 	sub	r10,pc,250
8000f65e:	10 9b       	mov	r11,r8
8000f660:	30 0c       	mov	r12,0
8000f662:	fe b0 f8 71 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000f666:	ec f8 00 00 	ld.w	r8,r6[0]
8000f66a:	70 08       	ld.w	r8,r8[0x0]
8000f66c:	f0 e8 0a 54 	ld.d	r8,r8[2644]
8000f670:	10 9a       	mov	r10,r8
8000f672:	12 9b       	mov	r11,r9
8000f674:	f0 16 00 09 	mcall	r6[36]
8000f678:	18 95       	mov	r5,r12
8000f67a:	f0 16 00 0e 	mcall	r6[56]
8000f67e:	18 98       	mov	r8,r12
8000f680:	0a 99       	mov	r9,r5
8000f682:	fe ca 01 1a 	sub	r10,pc,282
8000f686:	10 9b       	mov	r11,r8
8000f688:	30 0c       	mov	r12,0
8000f68a:	fe b0 f8 5d 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000f68e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f692:	70 08       	ld.w	r8,r8[0x0]
8000f694:	f0 e8 0a 2c 	ld.d	r8,r8[2604]
8000f698:	10 9a       	mov	r10,r8
8000f69a:	12 9b       	mov	r11,r9
8000f69c:	f0 16 00 09 	mcall	r6[36]
8000f6a0:	18 95       	mov	r5,r12
8000f6a2:	f0 16 00 0e 	mcall	r6[56]
8000f6a6:	18 98       	mov	r8,r12
8000f6a8:	0a 99       	mov	r9,r5
8000f6aa:	fe ca 01 3a 	sub	r10,pc,314
8000f6ae:	10 9b       	mov	r11,r8
8000f6b0:	30 0c       	mov	r12,0
8000f6b2:	fe b0 f8 49 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000f6b6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f6ba:	70 08       	ld.w	r8,r8[0x0]
8000f6bc:	f0 e8 0a 44 	ld.d	r8,r8[2628]
8000f6c0:	10 9a       	mov	r10,r8
8000f6c2:	12 9b       	mov	r11,r9
8000f6c4:	f0 16 00 09 	mcall	r6[36]
8000f6c8:	18 95       	mov	r5,r12
8000f6ca:	f0 16 00 0e 	mcall	r6[56]
8000f6ce:	18 98       	mov	r8,r12
8000f6d0:	0a 99       	mov	r9,r5
8000f6d2:	fe ca 01 56 	sub	r10,pc,342
8000f6d6:	10 9b       	mov	r11,r8
8000f6d8:	30 0c       	mov	r12,0
8000f6da:	fe b0 f8 35 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000f6de:	ec f8 00 00 	ld.w	r8,r6[0]
8000f6e2:	70 08       	ld.w	r8,r8[0x0]
8000f6e4:	f0 e8 0a 5c 	ld.d	r8,r8[2652]
8000f6e8:	10 9a       	mov	r10,r8
8000f6ea:	12 9b       	mov	r11,r9
8000f6ec:	f0 16 00 09 	mcall	r6[36]
8000f6f0:	18 95       	mov	r5,r12
8000f6f2:	f0 16 00 0e 	mcall	r6[56]
8000f6f6:	18 98       	mov	r8,r12
8000f6f8:	0a 99       	mov	r9,r5
8000f6fa:	fe ca 01 72 	sub	r10,pc,370
8000f6fe:	10 9b       	mov	r11,r8
8000f700:	30 0c       	mov	r12,0
8000f702:	fe b0 f8 21 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000f706:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f70a:	00 00       	add	r0,r0
8000f70c:	80 00       	ld.sh	r0,r0[0x0]
8000f70e:	f4 20 eb cd 	sub	r0,-726067

8000f710 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000f710:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f714:	1a 97       	mov	r7,sp
8000f716:	20 4d       	sub	sp,16
8000f718:	4b 86       	lddpc	r6,8000f7f8 <mavlink_send_raw_rc_channels+0xe8>
8000f71a:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000f71c:	f0 16 00 a2 	mcall	r6[648]
8000f720:	18 98       	mov	r8,r12
8000f722:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000f724:	5c 58       	castu.b	r8
8000f726:	ef 48 ff f0 	st.w	r7[-16],r8
8000f72a:	30 7c       	mov	r12,7
8000f72c:	f0 16 00 23 	mcall	r6[140]
8000f730:	18 98       	mov	r8,r12
8000f732:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f736:	5c 88       	casts.h	r8
8000f738:	5c 78       	castu.h	r8
8000f73a:	ef 48 ff f4 	st.w	r7[-12],r8
8000f73e:	30 6c       	mov	r12,6
8000f740:	f0 16 00 23 	mcall	r6[140]
8000f744:	18 98       	mov	r8,r12
8000f746:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f74a:	5c 88       	casts.h	r8
8000f74c:	5c 78       	castu.h	r8
8000f74e:	ef 48 ff f8 	st.w	r7[-8],r8
8000f752:	30 5c       	mov	r12,5
8000f754:	f0 16 00 23 	mcall	r6[140]
8000f758:	18 98       	mov	r8,r12
8000f75a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f75e:	5c 88       	casts.h	r8
8000f760:	5c 78       	castu.h	r8
8000f762:	ef 48 ff fc 	st.w	r7[-4],r8
8000f766:	30 4c       	mov	r12,4
8000f768:	f0 16 00 23 	mcall	r6[140]
8000f76c:	18 98       	mov	r8,r12
8000f76e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f772:	5c 88       	casts.h	r8
8000f774:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000f778:	30 3c       	mov	r12,3
8000f77a:	f0 16 00 23 	mcall	r6[140]
8000f77e:	18 98       	mov	r8,r12
8000f780:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f784:	5c 88       	casts.h	r8
8000f786:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000f78a:	30 2c       	mov	r12,2
8000f78c:	f0 16 00 23 	mcall	r6[140]
8000f790:	18 98       	mov	r8,r12
8000f792:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f796:	5c 88       	casts.h	r8
8000f798:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f79c:	30 1c       	mov	r12,1
8000f79e:	f0 16 00 23 	mcall	r6[140]
8000f7a2:	18 98       	mov	r8,r12
8000f7a4:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f7a8:	5c 88       	casts.h	r8
8000f7aa:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000f7ae:	30 0c       	mov	r12,0
8000f7b0:	f0 16 00 23 	mcall	r6[140]
8000f7b4:	18 98       	mov	r8,r12
8000f7b6:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f7ba:	5c 88       	casts.h	r8
8000f7bc:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f7c0:	f0 16 00 0e 	mcall	r6[56]
8000f7c4:	18 9b       	mov	r11,r12
8000f7c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f7ca:	1a d8       	st.w	--sp,r8
8000f7cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f7d0:	1a d8       	st.w	--sp,r8
8000f7d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f7d6:	1a d8       	st.w	--sp,r8
8000f7d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f7dc:	1a d8       	st.w	--sp,r8
8000f7de:	1a d0       	st.w	--sp,r0
8000f7e0:	1a d1       	st.w	--sp,r1
8000f7e2:	1a d2       	st.w	--sp,r2
8000f7e4:	06 98       	mov	r8,r3
8000f7e6:	0a 99       	mov	r9,r5
8000f7e8:	30 1a       	mov	r10,1
8000f7ea:	30 0c       	mov	r12,0
8000f7ec:	fe b0 f3 5e 	rcall	8000dea8 <mavlink_msg_rc_channels_raw_send>
8000f7f0:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000f7f2:	2f cd       	sub	sp,-16
8000f7f4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f7f8:	80 00       	ld.sh	r0,r0[0x0]
8000f7fa:	f5 9e       	*unknown*
8000f7fc:	43 6f       	lddsp	pc,sp[0xd8]
8000f7fe:	6c 6c       	ld.w	r12,r6[0x18]
8000f800:	5f 41       	srge	r1
8000f802:	76 6f       	ld.w	pc,r11[0x18]
8000f804:	69 64       	ld.w	r4,r4[0x58]
8000f806:	61 6e       	ld.w	lr,r0[0x58]
8000f808:	63 65       	ld.w	r5,r1[0x58]
	...

8000f80c <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000f80c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f810:	1a 97       	mov	r7,sp
8000f812:	20 4d       	sub	sp,16
8000f814:	fe f6 02 94 	ld.w	r6,pc[660]
8000f818:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000f81a:	f0 16 00 a2 	mcall	r6[648]
8000f81e:	18 98       	mov	r8,r12
8000f820:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f822:	5c 58       	castu.b	r8
8000f824:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000f828:	30 7c       	mov	r12,7
8000f82a:	f0 16 00 23 	mcall	r6[140]
8000f82e:	18 98       	mov	r8,r12
8000f830:	10 9c       	mov	r12,r8
8000f832:	f0 16 00 1a 	mcall	r6[104]
8000f836:	30 08       	mov	r8,0
8000f838:	e0 69 40 00 	mov	r9,16384
8000f83c:	ea 19 40 8f 	orh	r9,0x408f
8000f840:	f0 16 00 02 	mcall	r6[8]
8000f844:	14 98       	mov	r8,r10
8000f846:	16 99       	mov	r9,r11
8000f848:	10 9a       	mov	r10,r8
8000f84a:	12 9b       	mov	r11,r9
8000f84c:	30 08       	mov	r8,0
8000f84e:	e0 69 e0 00 	mov	r9,57344
8000f852:	ea 19 40 75 	orh	r9,0x4075
8000f856:	f0 16 00 0c 	mcall	r6[48]
8000f85a:	14 98       	mov	r8,r10
8000f85c:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f85e:	10 9a       	mov	r10,r8
8000f860:	12 9b       	mov	r11,r9
8000f862:	f0 16 00 14 	mcall	r6[80]
8000f866:	18 98       	mov	r8,r12
8000f868:	5c 88       	casts.h	r8
8000f86a:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000f86e:	30 6c       	mov	r12,6
8000f870:	f0 16 00 23 	mcall	r6[140]
8000f874:	18 98       	mov	r8,r12
8000f876:	10 9c       	mov	r12,r8
8000f878:	f0 16 00 1a 	mcall	r6[104]
8000f87c:	30 08       	mov	r8,0
8000f87e:	e0 69 40 00 	mov	r9,16384
8000f882:	ea 19 40 8f 	orh	r9,0x408f
8000f886:	f0 16 00 02 	mcall	r6[8]
8000f88a:	14 98       	mov	r8,r10
8000f88c:	16 99       	mov	r9,r11
8000f88e:	10 9a       	mov	r10,r8
8000f890:	12 9b       	mov	r11,r9
8000f892:	30 08       	mov	r8,0
8000f894:	e0 69 e0 00 	mov	r9,57344
8000f898:	ea 19 40 75 	orh	r9,0x4075
8000f89c:	f0 16 00 0c 	mcall	r6[48]
8000f8a0:	14 98       	mov	r8,r10
8000f8a2:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f8a4:	10 9a       	mov	r10,r8
8000f8a6:	12 9b       	mov	r11,r9
8000f8a8:	f0 16 00 14 	mcall	r6[80]
8000f8ac:	18 98       	mov	r8,r12
8000f8ae:	5c 88       	casts.h	r8
8000f8b0:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000f8b4:	30 5c       	mov	r12,5
8000f8b6:	f0 16 00 23 	mcall	r6[140]
8000f8ba:	18 98       	mov	r8,r12
8000f8bc:	10 9c       	mov	r12,r8
8000f8be:	f0 16 00 1a 	mcall	r6[104]
8000f8c2:	30 08       	mov	r8,0
8000f8c4:	e0 69 40 00 	mov	r9,16384
8000f8c8:	ea 19 40 8f 	orh	r9,0x408f
8000f8cc:	f0 16 00 02 	mcall	r6[8]
8000f8d0:	14 98       	mov	r8,r10
8000f8d2:	16 99       	mov	r9,r11
8000f8d4:	10 9a       	mov	r10,r8
8000f8d6:	12 9b       	mov	r11,r9
8000f8d8:	30 08       	mov	r8,0
8000f8da:	e0 69 e0 00 	mov	r9,57344
8000f8de:	ea 19 40 75 	orh	r9,0x4075
8000f8e2:	f0 16 00 0c 	mcall	r6[48]
8000f8e6:	14 98       	mov	r8,r10
8000f8e8:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f8ea:	10 9a       	mov	r10,r8
8000f8ec:	12 9b       	mov	r11,r9
8000f8ee:	f0 16 00 14 	mcall	r6[80]
8000f8f2:	18 98       	mov	r8,r12
8000f8f4:	5c 88       	casts.h	r8
8000f8f6:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000f8fa:	30 4c       	mov	r12,4
8000f8fc:	f0 16 00 23 	mcall	r6[140]
8000f900:	18 98       	mov	r8,r12
8000f902:	10 9c       	mov	r12,r8
8000f904:	f0 16 00 1a 	mcall	r6[104]
8000f908:	30 08       	mov	r8,0
8000f90a:	e0 69 40 00 	mov	r9,16384
8000f90e:	ea 19 40 8f 	orh	r9,0x408f
8000f912:	f0 16 00 02 	mcall	r6[8]
8000f916:	14 98       	mov	r8,r10
8000f918:	16 99       	mov	r9,r11
8000f91a:	10 9a       	mov	r10,r8
8000f91c:	12 9b       	mov	r11,r9
8000f91e:	30 08       	mov	r8,0
8000f920:	e0 69 e0 00 	mov	r9,57344
8000f924:	ea 19 40 75 	orh	r9,0x4075
8000f928:	f0 16 00 0c 	mcall	r6[48]
8000f92c:	14 98       	mov	r8,r10
8000f92e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f930:	10 9a       	mov	r10,r8
8000f932:	12 9b       	mov	r11,r9
8000f934:	f0 16 00 14 	mcall	r6[80]
8000f938:	18 98       	mov	r8,r12
8000f93a:	5c 88       	casts.h	r8
8000f93c:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000f93e:	30 3c       	mov	r12,3
8000f940:	f0 16 00 23 	mcall	r6[140]
8000f944:	18 98       	mov	r8,r12
8000f946:	10 9c       	mov	r12,r8
8000f948:	f0 16 00 1a 	mcall	r6[104]
8000f94c:	30 08       	mov	r8,0
8000f94e:	e0 69 40 00 	mov	r9,16384
8000f952:	ea 19 40 8f 	orh	r9,0x408f
8000f956:	f0 16 00 02 	mcall	r6[8]
8000f95a:	14 98       	mov	r8,r10
8000f95c:	16 99       	mov	r9,r11
8000f95e:	10 9a       	mov	r10,r8
8000f960:	12 9b       	mov	r11,r9
8000f962:	30 08       	mov	r8,0
8000f964:	e0 69 e0 00 	mov	r9,57344
8000f968:	ea 19 40 75 	orh	r9,0x4075
8000f96c:	f0 16 00 0c 	mcall	r6[48]
8000f970:	14 98       	mov	r8,r10
8000f972:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f974:	10 9a       	mov	r10,r8
8000f976:	12 9b       	mov	r11,r9
8000f978:	f0 16 00 14 	mcall	r6[80]
8000f97c:	18 98       	mov	r8,r12
8000f97e:	5c 88       	casts.h	r8
8000f980:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000f982:	30 2c       	mov	r12,2
8000f984:	f0 16 00 23 	mcall	r6[140]
8000f988:	18 98       	mov	r8,r12
8000f98a:	10 9c       	mov	r12,r8
8000f98c:	f0 16 00 1a 	mcall	r6[104]
8000f990:	30 08       	mov	r8,0
8000f992:	e0 69 40 00 	mov	r9,16384
8000f996:	ea 19 40 8f 	orh	r9,0x408f
8000f99a:	f0 16 00 02 	mcall	r6[8]
8000f99e:	14 98       	mov	r8,r10
8000f9a0:	16 99       	mov	r9,r11
8000f9a2:	10 9a       	mov	r10,r8
8000f9a4:	12 9b       	mov	r11,r9
8000f9a6:	30 08       	mov	r8,0
8000f9a8:	e0 69 e0 00 	mov	r9,57344
8000f9ac:	ea 19 40 75 	orh	r9,0x4075
8000f9b0:	f0 16 00 0c 	mcall	r6[48]
8000f9b4:	14 98       	mov	r8,r10
8000f9b6:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f9b8:	10 9a       	mov	r10,r8
8000f9ba:	12 9b       	mov	r11,r9
8000f9bc:	f0 16 00 14 	mcall	r6[80]
8000f9c0:	18 98       	mov	r8,r12
8000f9c2:	5c 88       	casts.h	r8
8000f9c4:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000f9c6:	30 1c       	mov	r12,1
8000f9c8:	f0 16 00 23 	mcall	r6[140]
8000f9cc:	18 98       	mov	r8,r12
8000f9ce:	10 9c       	mov	r12,r8
8000f9d0:	f0 16 00 1a 	mcall	r6[104]
8000f9d4:	30 08       	mov	r8,0
8000f9d6:	e0 69 40 00 	mov	r9,16384
8000f9da:	ea 19 40 8f 	orh	r9,0x408f
8000f9de:	f0 16 00 02 	mcall	r6[8]
8000f9e2:	14 98       	mov	r8,r10
8000f9e4:	16 99       	mov	r9,r11
8000f9e6:	10 9a       	mov	r10,r8
8000f9e8:	12 9b       	mov	r11,r9
8000f9ea:	30 08       	mov	r8,0
8000f9ec:	e0 69 e0 00 	mov	r9,57344
8000f9f0:	ea 19 40 75 	orh	r9,0x4075
8000f9f4:	f0 16 00 0c 	mcall	r6[48]
8000f9f8:	14 98       	mov	r8,r10
8000f9fa:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f9fc:	10 9a       	mov	r10,r8
8000f9fe:	12 9b       	mov	r11,r9
8000fa00:	f0 16 00 14 	mcall	r6[80]
8000fa04:	18 98       	mov	r8,r12
8000fa06:	5c 88       	casts.h	r8
8000fa08:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000fa0a:	30 0c       	mov	r12,0
8000fa0c:	f0 16 00 23 	mcall	r6[140]
8000fa10:	18 98       	mov	r8,r12
8000fa12:	10 9c       	mov	r12,r8
8000fa14:	f0 16 00 1a 	mcall	r6[104]
8000fa18:	30 08       	mov	r8,0
8000fa1a:	e0 69 40 00 	mov	r9,16384
8000fa1e:	ea 19 40 8f 	orh	r9,0x408f
8000fa22:	f0 16 00 02 	mcall	r6[8]
8000fa26:	14 98       	mov	r8,r10
8000fa28:	16 99       	mov	r9,r11
8000fa2a:	10 9a       	mov	r10,r8
8000fa2c:	12 9b       	mov	r11,r9
8000fa2e:	30 08       	mov	r8,0
8000fa30:	e0 69 e0 00 	mov	r9,57344
8000fa34:	ea 19 40 75 	orh	r9,0x4075
8000fa38:	f0 16 00 0c 	mcall	r6[48]
8000fa3c:	14 98       	mov	r8,r10
8000fa3e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000fa40:	10 9a       	mov	r10,r8
8000fa42:	12 9b       	mov	r11,r9
8000fa44:	f0 16 00 14 	mcall	r6[80]
8000fa48:	18 98       	mov	r8,r12
8000fa4a:	5c 88       	casts.h	r8
8000fa4c:	10 95       	mov	r5,r8
8000fa4e:	f0 16 00 0e 	mcall	r6[56]
8000fa52:	18 9b       	mov	r11,r12
8000fa54:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000fa58:	1a d8       	st.w	--sp,r8
8000fa5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fa5e:	1a d8       	st.w	--sp,r8
8000fa60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fa64:	1a d8       	st.w	--sp,r8
8000fa66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fa6a:	1a d8       	st.w	--sp,r8
8000fa6c:	1a d0       	st.w	--sp,r0
8000fa6e:	1a d1       	st.w	--sp,r1
8000fa70:	1a d2       	st.w	--sp,r2
8000fa72:	06 98       	mov	r8,r3
8000fa74:	0a 99       	mov	r9,r5
8000fa76:	30 1a       	mov	r10,1
8000fa78:	30 0c       	mov	r12,0
8000fa7a:	fe b0 f1 81 	rcall	8000dd7c <mavlink_msg_rc_channels_scaled_send>
8000fa7e:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000fa80:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa84:	70 08       	ld.w	r8,r8[0x0]
8000fa86:	f1 38 0f 7b 	ld.ub	r8,r8[3963]
8000fa8a:	10 95       	mov	r5,r8
8000fa8c:	f0 16 00 0e 	mcall	r6[56]
8000fa90:	18 98       	mov	r8,r12
8000fa92:	0a 99       	mov	r9,r5
8000fa94:	fe ca 02 98 	sub	r10,pc,664
8000fa98:	10 9b       	mov	r11,r8
8000fa9a:	30 0c       	mov	r12,0
8000fa9c:	fe b0 f6 8c 	rcall	8000e7b4 <mavlink_msg_named_value_int_send>
}
8000faa0:	2f cd       	sub	sp,-16
8000faa2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000faa6:	00 00       	add	r0,r0
8000faa8:	80 00       	ld.sh	r0,r0[0x0]
8000faaa:	f6 9c 72 6f 	brvs	7fefdf88 <_estack+0x7feedf88>
8000faae:	6c 6c       	ld.w	r12,r6[0x18]
8000fab0:	74 6f       	ld.w	pc,r10[0x18]
8000fab2:	72 71       	ld.w	r1,r9[0x1c]
8000fab4:	75 65       	ld.w	r5,r10[0x58]
8000fab6:	00 00       	add	r0,r0
8000fab8:	70 69       	ld.w	r9,r8[0x18]
8000faba:	74 63       	ld.w	r3,r10[0x18]
8000fabc:	68 74       	ld.w	r4,r4[0x1c]
8000fabe:	6f 72       	ld.w	r2,r7[0x5c]
8000fac0:	71 75       	ld.w	r5,r8[0x5c]
8000fac2:	65 00       	ld.w	r0,r2[0x40]
8000fac4:	79 61       	ld.w	r1,r12[0x58]
8000fac6:	77 74       	ld.w	r4,r11[0x5c]
8000fac8:	6f 72       	ld.w	r2,r7[0x5c]
8000faca:	71 75       	ld.w	r5,r8[0x5c]
8000facc:	65 00       	ld.w	r0,r2[0x40]
8000face:	00 00       	add	r0,r0
8000fad0:	74 68       	ld.w	r8,r10[0x18]
8000fad2:	72 75       	ld.w	r5,r9[0x1c]
8000fad4:	73 74       	ld.w	r4,r9[0x5c]
8000fad6:	00 00       	add	r0,r0
8000fad8:	72 70       	ld.w	r0,r9[0x1c]
8000fada:	6d 31       	ld.w	r1,r6[0x4c]
8000fadc:	00 00       	add	r0,r0
8000fade:	00 00       	add	r0,r0
8000fae0:	72 70       	ld.w	r0,r9[0x1c]
8000fae2:	6d 32       	ld.w	r2,r6[0x4c]
8000fae4:	00 00       	add	r0,r0
8000fae6:	00 00       	add	r0,r0
8000fae8:	72 70       	ld.w	r0,r9[0x1c]
8000faea:	6d 33       	ld.w	r3,r6[0x4c]
8000faec:	00 00       	add	r0,r0
8000faee:	00 00       	add	r0,r0
8000faf0:	72 70       	ld.w	r0,r9[0x1c]
8000faf2:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000faf6 <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000faf6:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000fafa:	1a 97       	mov	r7,sp
8000fafc:	21 6d       	sub	sp,88
8000fafe:	fe f6 03 66 	ld.w	r6,pc[870]
8000fb02:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000fb04:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb08:	70 09       	ld.w	r9,r8[0x0]
8000fb0a:	ee ca 00 0c 	sub	r10,r7,12
8000fb0e:	20 4d       	sub	sp,16
8000fb10:	1a 98       	mov	r8,sp
8000fb12:	f2 c9 f5 50 	sub	r9,r9,-2736
8000fb16:	20 08       	sub	r8,0
8000fb18:	20 09       	sub	r9,0
8000fb1a:	72 0b       	ld.w	r11,r9[0x0]
8000fb1c:	91 0b       	st.w	r8[0x0],r11
8000fb1e:	72 1b       	ld.w	r11,r9[0x4]
8000fb20:	91 1b       	st.w	r8[0x4],r11
8000fb22:	72 2b       	ld.w	r11,r9[0x8]
8000fb24:	91 2b       	st.w	r8[0x8],r11
8000fb26:	72 39       	ld.w	r9,r9[0xc]
8000fb28:	91 39       	st.w	r8[0xc],r9
8000fb2a:	14 9c       	mov	r12,r10
8000fb2c:	f0 16 00 68 	mcall	r6[416]
8000fb30:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000fb32:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb36:	70 08       	ld.w	r8,r8[0x0]
8000fb38:	ee cc 00 28 	sub	r12,r7,40
8000fb3c:	20 cd       	sub	sp,48
8000fb3e:	1a 99       	mov	r9,sp
8000fb40:	12 9b       	mov	r11,r9
8000fb42:	f0 ca f4 84 	sub	r10,r8,-2940
8000fb46:	f6 c8 00 00 	sub	r8,r11,0
8000fb4a:	f4 c9 00 00 	sub	r9,r10,0
8000fb4e:	72 0e       	ld.w	lr,r9[0x0]
8000fb50:	91 0e       	st.w	r8[0x0],lr
8000fb52:	72 1e       	ld.w	lr,r9[0x4]
8000fb54:	91 1e       	st.w	r8[0x4],lr
8000fb56:	72 2e       	ld.w	lr,r9[0x8]
8000fb58:	91 2e       	st.w	r8[0x8],lr
8000fb5a:	72 39       	ld.w	r9,r9[0xc]
8000fb5c:	91 39       	st.w	r8[0xc],r9
8000fb5e:	f6 c8 ff f0 	sub	r8,r11,-16
8000fb62:	f4 c9 ff f0 	sub	r9,r10,-16
8000fb66:	72 0e       	ld.w	lr,r9[0x0]
8000fb68:	91 0e       	st.w	r8[0x0],lr
8000fb6a:	72 1e       	ld.w	lr,r9[0x4]
8000fb6c:	91 1e       	st.w	r8[0x4],lr
8000fb6e:	72 2e       	ld.w	lr,r9[0x8]
8000fb70:	91 2e       	st.w	r8[0x8],lr
8000fb72:	72 39       	ld.w	r9,r9[0xc]
8000fb74:	91 39       	st.w	r8[0xc],r9
8000fb76:	f6 c8 ff e0 	sub	r8,r11,-32
8000fb7a:	f4 c9 ff e0 	sub	r9,r10,-32
8000fb7e:	72 0a       	ld.w	r10,r9[0x0]
8000fb80:	91 0a       	st.w	r8[0x0],r10
8000fb82:	72 1a       	ld.w	r10,r9[0x4]
8000fb84:	91 1a       	st.w	r8[0x4],r10
8000fb86:	72 2a       	ld.w	r10,r9[0x8]
8000fb88:	91 2a       	st.w	r8[0x8],r10
8000fb8a:	72 39       	ld.w	r9,r9[0xc]
8000fb8c:	91 39       	st.w	r8[0xc],r9
8000fb8e:	f0 16 00 81 	mcall	r6[516]
8000fb92:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fb94:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb98:	70 08       	ld.w	r8,r8[0x0]
8000fb9a:	f0 f9 0a 88 	ld.w	r9,r8[2696]
8000fb9e:	fc 18 44 7a 	movh	r8,0x447a
8000fba2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fba6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fbaa:	5c 88       	casts.h	r8
8000fbac:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fbb0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbb4:	70 08       	ld.w	r8,r8[0x0]
8000fbb6:	f0 f9 0a 84 	ld.w	r9,r8[2692]
8000fbba:	fc 18 44 7a 	movh	r8,0x447a
8000fbbe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fbc2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fbc6:	5c 88       	casts.h	r8
8000fbc8:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fbcc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbd0:	70 08       	ld.w	r8,r8[0x0]
8000fbd2:	f0 f9 0a 80 	ld.w	r9,r8[2688]
8000fbd6:	fc 18 44 7a 	movh	r8,0x447a
8000fbda:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fbde:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fbe2:	5c 88       	casts.h	r8
8000fbe4:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fbe8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbec:	70 08       	ld.w	r8,r8[0x0]
8000fbee:	f0 f9 0a a0 	ld.w	r9,r8[2720]
8000fbf2:	fc 18 42 c8 	movh	r8,0x42c8
8000fbf6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fbfa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fbfe:	5c 88       	casts.h	r8
8000fc00:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fc04:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc08:	70 08       	ld.w	r8,r8[0x0]
8000fc0a:	f0 f9 0a 9c 	ld.w	r9,r8[2716]
8000fc0e:	fc 18 42 c8 	movh	r8,0x42c8
8000fc12:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fc16:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fc1a:	5c 88       	casts.h	r8
8000fc1c:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fc20:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc24:	70 08       	ld.w	r8,r8[0x0]
8000fc26:	f0 f9 0a 98 	ld.w	r9,r8[2712]
8000fc2a:	fc 18 42 c8 	movh	r8,0x42c8
8000fc2e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fc32:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fc36:	5c 88       	casts.h	r8
8000fc38:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fc3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000fc40:	10 9c       	mov	r12,r8
8000fc42:	f0 16 00 03 	mcall	r6[12]
8000fc46:	30 08       	mov	r8,0
8000fc48:	e0 69 40 00 	mov	r9,16384
8000fc4c:	ea 19 40 8f 	orh	r9,0x408f
8000fc50:	f0 16 00 02 	mcall	r6[8]
8000fc54:	14 98       	mov	r8,r10
8000fc56:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fc58:	10 9a       	mov	r10,r8
8000fc5a:	12 9b       	mov	r11,r9
8000fc5c:	f0 16 00 14 	mcall	r6[80]
8000fc60:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fc64:	ee ea ff d8 	ld.d	r10,r7[-40]
8000fc68:	30 08       	mov	r8,0
8000fc6a:	e0 69 12 d0 	mov	r9,4816
8000fc6e:	ea 19 41 63 	orh	r9,0x4163
8000fc72:	f0 16 00 02 	mcall	r6[8]
8000fc76:	14 98       	mov	r8,r10
8000fc78:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fc7a:	10 9a       	mov	r10,r8
8000fc7c:	12 9b       	mov	r11,r9
8000fc7e:	f0 16 00 14 	mcall	r6[80]
8000fc82:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fc86:	ee ea ff e0 	ld.d	r10,r7[-32]
8000fc8a:	30 08       	mov	r8,0
8000fc8c:	e0 69 12 d0 	mov	r9,4816
8000fc90:	ea 19 41 63 	orh	r9,0x4163
8000fc94:	f0 16 00 02 	mcall	r6[8]
8000fc98:	14 98       	mov	r8,r10
8000fc9a:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fc9c:	10 9a       	mov	r10,r8
8000fc9e:	12 9b       	mov	r11,r9
8000fca0:	f0 16 00 14 	mcall	r6[80]
8000fca4:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fca8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcac:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fcae:	f0 f8 0a 7c 	ld.w	r8,r8[2684]
8000fcb2:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fcb6:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcba:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fcbc:	f0 f8 0a 78 	ld.w	r8,r8[2680]
8000fcc0:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fcc4:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcc8:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fcca:	f0 f8 0a 74 	ld.w	r8,r8[2676]
8000fcce:	ef 48 ff d4 	st.w	r7[-44],r8
8000fcd2:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000fcd6:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000fcda:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000fcde:	f0 16 00 27 	mcall	r6[156]
8000fce2:	18 98       	mov	r8,r12
8000fce4:	10 92       	mov	r2,r8
8000fce6:	30 03       	mov	r3,0
8000fce8:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000fcec:	1a d8       	st.w	--sp,r8
8000fcee:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000fcf2:	1a d8       	st.w	--sp,r8
8000fcf4:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000fcf8:	1a d8       	st.w	--sp,r8
8000fcfa:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000fcfe:	1a d8       	st.w	--sp,r8
8000fd00:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000fd04:	1a d8       	st.w	--sp,r8
8000fd06:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000fd0a:	1a d8       	st.w	--sp,r8
8000fd0c:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000fd10:	1a d8       	st.w	--sp,r8
8000fd12:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000fd16:	1a d8       	st.w	--sp,r8
8000fd18:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000fd1c:	1a d8       	st.w	--sp,r8
8000fd1e:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000fd22:	1a d8       	st.w	--sp,r8
8000fd24:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000fd28:	1a d8       	st.w	--sp,r8
8000fd2a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000fd2e:	1a d8       	st.w	--sp,r8
8000fd30:	1a d0       	st.w	--sp,r0
8000fd32:	02 98       	mov	r8,r1
8000fd34:	0a 99       	mov	r9,r5
8000fd36:	04 9a       	mov	r10,r2
8000fd38:	06 9b       	mov	r11,r3
8000fd3a:	30 0c       	mov	r12,0
8000fd3c:	fe b0 f4 44 	rcall	8000e5c4 <mavlink_msg_hil_state_send>
8000fd40:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000fd42:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000fd46:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd4a:	70 08       	ld.w	r8,r8[0x0]
8000fd4c:	f0 f8 0a 68 	ld.w	r8,r8[2664]
8000fd50:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fd54:	f0 16 00 0e 	mcall	r6[56]
8000fd58:	18 98       	mov	r8,r12
8000fd5a:	0a 99       	mov	r9,r5
8000fd5c:	fe ca 02 b0 	sub	r10,pc,688
8000fd60:	10 9b       	mov	r11,r8
8000fd62:	30 0c       	mov	r12,0
8000fd64:	fe b0 f5 28 	rcall	8000e7b4 <mavlink_msg_named_value_int_send>
8000fd68:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000fd6c:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd70:	70 08       	ld.w	r8,r8[0x0]
8000fd72:	f0 f8 0a 6c 	ld.w	r8,r8[2668]
8000fd76:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fd7a:	f0 16 00 0e 	mcall	r6[56]
8000fd7e:	18 98       	mov	r8,r12
8000fd80:	0a 99       	mov	r9,r5
8000fd82:	fe ca 02 ca 	sub	r10,pc,714
8000fd86:	10 9b       	mov	r11,r8
8000fd88:	30 0c       	mov	r12,0
8000fd8a:	fe b0 f5 15 	rcall	8000e7b4 <mavlink_msg_named_value_int_send>
8000fd8e:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000fd92:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd96:	70 08       	ld.w	r8,r8[0x0]
8000fd98:	f0 f8 0a 70 	ld.w	r8,r8[2672]
8000fd9c:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fda0:	f0 16 00 0e 	mcall	r6[56]
8000fda4:	18 98       	mov	r8,r12
8000fda6:	0a 99       	mov	r9,r5
8000fda8:	fe ca 02 e4 	sub	r10,pc,740
8000fdac:	10 9b       	mov	r11,r8
8000fdae:	30 0c       	mov	r12,0
8000fdb0:	fe b0 f5 02 	rcall	8000e7b4 <mavlink_msg_named_value_int_send>
8000fdb4:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000fdb8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdbc:	70 08       	ld.w	r8,r8[0x0]
8000fdbe:	f0 f5 0a 88 	ld.w	r5,r8[2696]
8000fdc2:	f0 16 00 0e 	mcall	r6[56]
8000fdc6:	18 98       	mov	r8,r12
8000fdc8:	0a 99       	mov	r9,r5
8000fdca:	fe ca 02 fa 	sub	r10,pc,762
8000fdce:	10 9b       	mov	r11,r8
8000fdd0:	30 0c       	mov	r12,0
8000fdd2:	fe b0 f4 b9 	rcall	8000e744 <mavlink_msg_named_value_float_send>
8000fdd6:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000fdda:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdde:	70 08       	ld.w	r8,r8[0x0]
8000fde0:	f0 f5 0b ac 	ld.w	r5,r8[2988]
8000fde4:	f0 16 00 0e 	mcall	r6[56]
8000fde8:	18 98       	mov	r8,r12
8000fdea:	0a 99       	mov	r9,r5
8000fdec:	fe ca 03 14 	sub	r10,pc,788
8000fdf0:	10 9b       	mov	r11,r8
8000fdf2:	30 0c       	mov	r12,0
8000fdf4:	fe b0 f4 a8 	rcall	8000e744 <mavlink_msg_named_value_float_send>
8000fdf8:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000fdfc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe00:	70 08       	ld.w	r8,r8[0x0]
8000fe02:	f0 f5 0b b0 	ld.w	r5,r8[2992]
8000fe06:	f0 16 00 0e 	mcall	r6[56]
8000fe0a:	18 98       	mov	r8,r12
8000fe0c:	0a 99       	mov	r9,r5
8000fe0e:	fe ca 03 2e 	sub	r10,pc,814
8000fe12:	10 9b       	mov	r11,r8
8000fe14:	30 0c       	mov	r12,0
8000fe16:	fe b0 f4 97 	rcall	8000e744 <mavlink_msg_named_value_float_send>
8000fe1a:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000fe1e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe22:	70 08       	ld.w	r8,r8[0x0]
8000fe24:	f0 f5 0b b4 	ld.w	r5,r8[2996]
8000fe28:	f0 16 00 0e 	mcall	r6[56]
8000fe2c:	18 98       	mov	r8,r12
8000fe2e:	0a 99       	mov	r9,r5
8000fe30:	fe ca 03 48 	sub	r10,pc,840
8000fe34:	10 9b       	mov	r11,r8
8000fe36:	30 0c       	mov	r12,0
8000fe38:	fe b0 f4 86 	rcall	8000e744 <mavlink_msg_named_value_float_send>
8000fe3c:	f0 16 00 2b 	mcall	r6[172]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000fe40:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe44:	70 08       	ld.w	r8,r8[0x0]
8000fe46:	f0 f5 0b b8 	ld.w	r5,r8[3000]
8000fe4a:	f0 16 00 0e 	mcall	r6[56]
8000fe4e:	18 98       	mov	r8,r12
8000fe50:	0a 99       	mov	r9,r5
8000fe52:	fe ca 03 62 	sub	r10,pc,866
8000fe56:	10 9b       	mov	r11,r8
8000fe58:	30 0c       	mov	r12,0
8000fe5a:	fe b0 f4 75 	rcall	8000e744 <mavlink_msg_named_value_float_send>

	
}
8000fe5e:	2e ad       	sub	sp,-88
8000fe60:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000fe64:	80 00       	ld.sh	r0,r0[0x0]
8000fe66:	f9 86       	*unknown*
8000fe68:	73 74       	ld.w	r4,r9[0x5c]
8000fe6a:	61 62       	ld.w	r2,r0[0x58]
8000fe6c:	41 76       	lddsp	r6,sp[0x5c]
8000fe6e:	67 44       	ld.w	r4,r3[0x50]
8000fe70:	65 6c       	ld.w	r12,r2[0x58]
8000fe72:	61 79       	ld.w	r9,r0[0x5c]
8000fe74:	00 00       	add	r0,r0
8000fe76:	00 00       	add	r0,r0
8000fe78:	73 74       	ld.w	r4,r9[0x5c]
8000fe7a:	61 62       	ld.w	r2,r0[0x58]
8000fe7c:	44 65       	lddsp	r5,sp[0x118]
8000fe7e:	6c 61       	ld.w	r1,r6[0x18]
8000fe80:	79 56       	ld.w	r6,r12[0x54]
8000fe82:	61 72       	ld.w	r2,r0[0x5c]
8000fe84:	00 00       	add	r0,r0
8000fe86:	00 00       	add	r0,r0
8000fe88:	73 74       	ld.w	r4,r9[0x5c]
8000fe8a:	61 62       	ld.w	r2,r0[0x58]
8000fe8c:	4d 61       	lddpc	r1,8000ffe4 <send_rt_stats+0x110>
8000fe8e:	78 44       	ld.w	r4,r12[0x10]
8000fe90:	65 6c       	ld.w	r12,r2[0x58]
8000fe92:	61 79       	ld.w	r9,r0[0x5c]
8000fe94:	00 00       	add	r0,r0
8000fe96:	00 00       	add	r0,r0
8000fe98:	73 74       	ld.w	r4,r9[0x5c]
8000fe9a:	61 62       	ld.w	r2,r0[0x58]
8000fe9c:	52 54       	stdsp	sp[0x94],r4
8000fe9e:	76 69       	ld.w	r9,r11[0x18]
8000fea0:	6f 00       	ld.w	r0,r7[0x40]
8000fea2:	00 00       	add	r0,r0
8000fea4:	62 61       	ld.w	r1,r1[0x18]
8000fea6:	72 6f       	ld.w	pc,r9[0x18]
8000fea8:	41 76       	lddsp	r6,sp[0x5c]
8000feaa:	67 44       	ld.w	r4,r3[0x50]
8000feac:	65 6c       	ld.w	r12,r2[0x58]
8000feae:	61 79       	ld.w	r9,r0[0x5c]
8000feb0:	00 00       	add	r0,r0
8000feb2:	00 00       	add	r0,r0
8000feb4:	69 6d       	ld.w	sp,r4[0x58]
8000feb6:	75 45       	ld.w	r5,r10[0x50]
8000feb8:	78 54       	ld.w	r4,r12[0x14]
8000feba:	69 6d       	ld.w	sp,r4[0x58]
8000febc:	65 00       	ld.w	r0,r2[0x40]
8000febe:	00 00       	add	r0,r0
8000fec0:	6e 61       	ld.w	r1,r7[0x18]
8000fec2:	76 45       	ld.w	r5,r11[0x10]
8000fec4:	78 54       	ld.w	r4,r12[0x14]
8000fec6:	69 6d       	ld.w	sp,r4[0x58]
8000fec8:	65 00       	ld.w	r0,r2[0x40]
8000feca:	00 00       	add	r0,r0
8000fecc:	69 6d       	ld.w	sp,r4[0x58]
8000fece:	75 5f       	ld.w	pc,r10[0x54]
8000fed0:	64 74       	ld.w	r4,r2[0x1c]
	...

8000fed4 <send_rt_stats>:

task_return_t send_rt_stats() {
8000fed4:	eb cd 40 e0 	pushm	r5-r7,lr
8000fed8:	1a 97       	mov	r7,sp
8000feda:	20 1d       	sub	sp,4
8000fedc:	4c e6       	lddpc	r6,80010014 <send_rt_stats+0x140>
8000fede:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000fee0:	f0 16 00 fe 	mcall	r6[1016]
8000fee4:	18 98       	mov	r8,r12
8000fee6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000feea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000feee:	70 c8       	ld.w	r8,r8[0x30]
8000fef0:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fef4:	f0 16 00 0e 	mcall	r6[56]
8000fef8:	18 98       	mov	r8,r12
8000fefa:	0a 99       	mov	r9,r5
8000fefc:	fe ca 00 94 	sub	r10,pc,148
8000ff00:	10 9b       	mov	r11,r8
8000ff02:	30 0c       	mov	r12,0
8000ff04:	fe b0 f4 20 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000ff08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ff0c:	70 d8       	ld.w	r8,r8[0x34]
8000ff0e:	10 9c       	mov	r12,r8
8000ff10:	f0 16 00 4e 	mcall	r6[312]
8000ff14:	14 98       	mov	r8,r10
8000ff16:	16 99       	mov	r9,r11
8000ff18:	10 9a       	mov	r10,r8
8000ff1a:	12 9b       	mov	r11,r9
8000ff1c:	f0 16 00 66 	mcall	r6[408]
8000ff20:	14 98       	mov	r8,r10
8000ff22:	16 99       	mov	r9,r11
8000ff24:	10 9a       	mov	r10,r8
8000ff26:	12 9b       	mov	r11,r9
8000ff28:	f0 16 00 09 	mcall	r6[36]
8000ff2c:	18 95       	mov	r5,r12
8000ff2e:	f0 16 00 0e 	mcall	r6[56]
8000ff32:	18 98       	mov	r8,r12
8000ff34:	0a 99       	mov	r9,r5
8000ff36:	fe ca 00 be 	sub	r10,pc,190
8000ff3a:	10 9b       	mov	r11,r8
8000ff3c:	30 0c       	mov	r12,0
8000ff3e:	fe b0 f4 03 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000ff42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ff46:	70 b8       	ld.w	r8,r8[0x2c]
8000ff48:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ff4c:	f0 16 00 0e 	mcall	r6[56]
8000ff50:	18 98       	mov	r8,r12
8000ff52:	0a 99       	mov	r9,r5
8000ff54:	fe ca 00 cc 	sub	r10,pc,204
8000ff58:	10 9b       	mov	r11,r8
8000ff5a:	30 0c       	mov	r12,0
8000ff5c:	fe b0 f3 f4 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000ff60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ff64:	70 e8       	ld.w	r8,r8[0x38]
8000ff66:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ff6a:	f0 16 00 0e 	mcall	r6[56]
8000ff6e:	18 98       	mov	r8,r12
8000ff70:	0a 99       	mov	r9,r5
8000ff72:	fe ca 00 da 	sub	r10,pc,218
8000ff76:	10 9b       	mov	r11,r8
8000ff78:	30 0c       	mov	r12,0
8000ff7a:	fe b0 f3 e5 	rcall	8000e744 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000ff7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ff82:	71 88       	ld.w	r8,r8[0x60]
8000ff84:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ff88:	f0 16 00 0e 	mcall	r6[56]
8000ff8c:	18 98       	mov	r8,r12
8000ff8e:	0a 99       	mov	r9,r5
8000ff90:	fe ca 00 ec 	sub	r10,pc,236
8000ff94:	10 9b       	mov	r11,r8
8000ff96:	30 0c       	mov	r12,0
8000ff98:	fe b0 f3 d6 	rcall	8000e744 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000ff9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ffa0:	70 a8       	ld.w	r8,r8[0x28]
8000ffa2:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ffa6:	f0 16 00 0e 	mcall	r6[56]
8000ffaa:	18 98       	mov	r8,r12
8000ffac:	0a 99       	mov	r9,r5
8000ffae:	fe ca 00 fa 	sub	r10,pc,250
8000ffb2:	10 9b       	mov	r11,r8
8000ffb4:	30 0c       	mov	r12,0
8000ffb6:	fe b0 f3 c7 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000ffba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ffbe:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000ffc2:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ffc6:	f0 16 00 0e 	mcall	r6[56]
8000ffca:	18 98       	mov	r8,r12
8000ffcc:	0a 99       	mov	r9,r5
8000ffce:	fe ca 01 0e 	sub	r10,pc,270
8000ffd2:	10 9b       	mov	r11,r8
8000ffd4:	30 0c       	mov	r12,0
8000ffd6:	fe b0 f3 b7 	rcall	8000e744 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000ffda:	f0 16 00 31 	mcall	r6[196]
8000ffde:	18 98       	mov	r8,r12
8000ffe0:	f0 f5 01 40 	ld.w	r5,r8[320]
8000ffe4:	f0 16 00 0e 	mcall	r6[56]
8000ffe8:	18 98       	mov	r8,r12
8000ffea:	0a 99       	mov	r9,r5
8000ffec:	fe ca 01 20 	sub	r10,pc,288
8000fff0:	10 9b       	mov	r11,r8
8000fff2:	30 0c       	mov	r12,0
8000fff4:	fe b0 f3 a8 	rcall	8000e744 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000fff8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fffc:	30 09       	mov	r9,0
8000fffe:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
80010002:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010006:	30 09       	mov	r9,0
80010008:	f1 49 00 5c 	st.w	r8[92],r9

}
8001000c:	2f fd       	sub	sp,-4
8001000e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010012:	00 00       	add	r0,r0
80010014:	80 00       	ld.sh	r0,r0[0x0]
80010016:	fd 62 53 69 	st.b	lr[21353],r2
8001001a:	6d 5f       	ld.w	pc,r6[0x54]
8001001c:	6d 6f       	ld.w	pc,r6[0x58]
8001001e:	64 65       	ld.w	r5,r2[0x18]
80010020:	00 00       	add	r0,r0
80010022:	00 00       	add	r0,r0
80010024:	52 6f       	stdsp	sp[0x98],pc
80010026:	6c 6c       	ld.w	r12,r6[0x18]
80010028:	52 50       	stdsp	sp[0x94],r0
8001002a:	69 64       	ld.w	r4,r4[0x58]
8001002c:	5f 50       	srlt	r0
8001002e:	5f 47       	srge	r7
80010030:	00 00       	add	r0,r0
80010032:	00 00       	add	r0,r0
80010034:	52 6f       	stdsp	sp[0x98],pc
80010036:	6c 6c       	ld.w	r12,r6[0x18]
80010038:	52 50       	stdsp	sp[0x94],r0
8001003a:	69 64       	ld.w	r4,r4[0x58]
8001003c:	5f 49       	srge	r9
8001003e:	5f 50       	srlt	r0
80010040:	73 74       	ld.w	r4,r9[0x5c]
80010042:	47 00       	lddsp	r0,sp[0x1c0]
80010044:	52 6f       	stdsp	sp[0x98],pc
80010046:	6c 6c       	ld.w	r12,r6[0x18]
80010048:	52 50       	stdsp	sp[0x94],r0
8001004a:	69 64       	ld.w	r4,r4[0x58]
8001004c:	5f 49       	srge	r9
8001004e:	5f 50       	srlt	r0
80010050:	72 65       	ld.w	r5,r9[0x18]
80010052:	47 00       	lddsp	r0,sp[0x1c0]
80010054:	52 6f       	stdsp	sp[0x98],pc
80010056:	6c 6c       	ld.w	r12,r6[0x18]
80010058:	52 50       	stdsp	sp[0x94],r0
8001005a:	69 64       	ld.w	r4,r4[0x58]
8001005c:	5f 44       	srge	r4
8001005e:	5f 47       	srge	r7
80010060:	61 69       	ld.w	r9,r0[0x58]
80010062:	6e 00       	ld.w	r0,r7[0x0]
80010064:	52 6f       	stdsp	sp[0x98],pc
80010066:	6c 6c       	ld.w	r12,r6[0x18]
80010068:	41 50       	lddsp	r0,sp[0x54]
8001006a:	69 64       	ld.w	r4,r4[0x58]
8001006c:	5f 50       	srlt	r0
8001006e:	5f 47       	srge	r7
80010070:	00 00       	add	r0,r0
80010072:	00 00       	add	r0,r0
80010074:	52 6f       	stdsp	sp[0x98],pc
80010076:	6c 6c       	ld.w	r12,r6[0x18]
80010078:	41 50       	lddsp	r0,sp[0x54]
8001007a:	69 64       	ld.w	r4,r4[0x58]
8001007c:	5f 49       	srge	r9
8001007e:	5f 50       	srlt	r0
80010080:	73 74       	ld.w	r4,r9[0x5c]
80010082:	47 00       	lddsp	r0,sp[0x1c0]
80010084:	52 6f       	stdsp	sp[0x98],pc
80010086:	6c 6c       	ld.w	r12,r6[0x18]
80010088:	41 50       	lddsp	r0,sp[0x54]
8001008a:	69 64       	ld.w	r4,r4[0x58]
8001008c:	5f 49       	srge	r9
8001008e:	5f 50       	srlt	r0
80010090:	72 65       	ld.w	r5,r9[0x18]
80010092:	47 00       	lddsp	r0,sp[0x1c0]
80010094:	52 6f       	stdsp	sp[0x98],pc
80010096:	6c 6c       	ld.w	r12,r6[0x18]
80010098:	41 50       	lddsp	r0,sp[0x54]
8001009a:	69 64       	ld.w	r4,r4[0x58]
8001009c:	5f 44       	srge	r4
8001009e:	5f 47       	srge	r7
800100a0:	61 69       	ld.w	r9,r0[0x58]
800100a2:	6e 00       	ld.w	r0,r7[0x0]
800100a4:	50 69       	stdsp	sp[0x18],r9
800100a6:	74 63       	ld.w	r3,r10[0x18]
800100a8:	68 52       	ld.w	r2,r4[0x14]
800100aa:	50 69       	stdsp	sp[0x18],r9
800100ac:	64 5f       	ld.w	pc,r2[0x14]
800100ae:	50 5f       	stdsp	sp[0x14],pc
800100b0:	47 00       	lddsp	r0,sp[0x1c0]
800100b2:	00 00       	add	r0,r0
800100b4:	50 69       	stdsp	sp[0x18],r9
800100b6:	74 63       	ld.w	r3,r10[0x18]
800100b8:	68 52       	ld.w	r2,r4[0x14]
800100ba:	50 69       	stdsp	sp[0x18],r9
800100bc:	64 5f       	ld.w	pc,r2[0x14]
800100be:	49 5f       	lddpc	pc,80010110 <send_rt_stats+0x23c>
800100c0:	50 73       	stdsp	sp[0x1c],r3
800100c2:	74 47       	ld.w	r7,r10[0x10]
800100c4:	00 00       	add	r0,r0
800100c6:	00 00       	add	r0,r0
800100c8:	50 69       	stdsp	sp[0x18],r9
800100ca:	74 63       	ld.w	r3,r10[0x18]
800100cc:	68 52       	ld.w	r2,r4[0x14]
800100ce:	50 69       	stdsp	sp[0x18],r9
800100d0:	64 5f       	ld.w	pc,r2[0x14]
800100d2:	49 5f       	lddpc	pc,80010124 <send_rt_stats+0x250>
800100d4:	50 72       	stdsp	sp[0x1c],r2
800100d6:	65 47       	ld.w	r7,r2[0x50]
800100d8:	00 00       	add	r0,r0
800100da:	00 00       	add	r0,r0
800100dc:	50 69       	stdsp	sp[0x18],r9
800100de:	74 63       	ld.w	r3,r10[0x18]
800100e0:	68 52       	ld.w	r2,r4[0x14]
800100e2:	50 69       	stdsp	sp[0x18],r9
800100e4:	64 5f       	ld.w	pc,r2[0x14]
800100e6:	44 5f       	lddsp	pc,sp[0x114]
800100e8:	47 61       	lddsp	r1,sp[0x1d8]
800100ea:	69 6e       	ld.w	lr,r4[0x58]
800100ec:	00 00       	add	r0,r0
800100ee:	00 00       	add	r0,r0
800100f0:	50 69       	stdsp	sp[0x18],r9
800100f2:	74 63       	ld.w	r3,r10[0x18]
800100f4:	68 41       	ld.w	r1,r4[0x10]
800100f6:	50 69       	stdsp	sp[0x18],r9
800100f8:	64 5f       	ld.w	pc,r2[0x14]
800100fa:	50 5f       	stdsp	sp[0x14],pc
800100fc:	47 00       	lddsp	r0,sp[0x1c0]
800100fe:	00 00       	add	r0,r0
80010100:	50 69       	stdsp	sp[0x18],r9
80010102:	74 63       	ld.w	r3,r10[0x18]
80010104:	68 41       	ld.w	r1,r4[0x10]
80010106:	50 69       	stdsp	sp[0x18],r9
80010108:	64 5f       	ld.w	pc,r2[0x14]
8001010a:	49 5f       	lddpc	pc,8001015c <send_rt_stats+0x288>
8001010c:	50 73       	stdsp	sp[0x1c],r3
8001010e:	74 47       	ld.w	r7,r10[0x10]
80010110:	00 00       	add	r0,r0
80010112:	00 00       	add	r0,r0
80010114:	50 69       	stdsp	sp[0x18],r9
80010116:	74 63       	ld.w	r3,r10[0x18]
80010118:	68 41       	ld.w	r1,r4[0x10]
8001011a:	50 69       	stdsp	sp[0x18],r9
8001011c:	64 5f       	ld.w	pc,r2[0x14]
8001011e:	49 5f       	lddpc	pc,80010170 <send_rt_stats+0x29c>
80010120:	50 72       	stdsp	sp[0x1c],r2
80010122:	65 47       	ld.w	r7,r2[0x50]
80010124:	00 00       	add	r0,r0
80010126:	00 00       	add	r0,r0
80010128:	50 69       	stdsp	sp[0x18],r9
8001012a:	74 63       	ld.w	r3,r10[0x18]
8001012c:	68 41       	ld.w	r1,r4[0x10]
8001012e:	50 69       	stdsp	sp[0x18],r9
80010130:	64 5f       	ld.w	pc,r2[0x14]
80010132:	44 5f       	lddsp	pc,sp[0x114]
80010134:	47 61       	lddsp	r1,sp[0x1d8]
80010136:	69 6e       	ld.w	lr,r4[0x58]
80010138:	00 00       	add	r0,r0
8001013a:	00 00       	add	r0,r0
8001013c:	59 61       	cp.w	r1,22
8001013e:	77 52       	ld.w	r2,r11[0x54]
80010140:	50 69       	stdsp	sp[0x18],r9
80010142:	64 5f       	ld.w	pc,r2[0x14]
80010144:	50 5f       	stdsp	sp[0x14],pc
80010146:	47 00       	lddsp	r0,sp[0x1c0]
80010148:	59 61       	cp.w	r1,22
8001014a:	77 52       	ld.w	r2,r11[0x54]
8001014c:	50 69       	stdsp	sp[0x18],r9
8001014e:	64 5f       	ld.w	pc,r2[0x14]
80010150:	49 5f       	lddpc	pc,800101a4 <send_rt_stats+0x2d0>
80010152:	50 73       	stdsp	sp[0x1c],r3
80010154:	74 47       	ld.w	r7,r10[0x10]
80010156:	00 00       	add	r0,r0
80010158:	59 61       	cp.w	r1,22
8001015a:	77 52       	ld.w	r2,r11[0x54]
8001015c:	50 69       	stdsp	sp[0x18],r9
8001015e:	64 5f       	ld.w	pc,r2[0x14]
80010160:	49 5f       	lddpc	pc,800101b4 <send_rt_stats+0x2e0>
80010162:	50 72       	stdsp	sp[0x1c],r2
80010164:	65 47       	ld.w	r7,r2[0x50]
80010166:	00 00       	add	r0,r0
80010168:	59 61       	cp.w	r1,22
8001016a:	77 52       	ld.w	r2,r11[0x54]
8001016c:	50 69       	stdsp	sp[0x18],r9
8001016e:	64 5f       	ld.w	pc,r2[0x14]
80010170:	44 5f       	lddsp	pc,sp[0x114]
80010172:	47 61       	lddsp	r1,sp[0x1d8]
80010174:	69 6e       	ld.w	lr,r4[0x58]
80010176:	00 00       	add	r0,r0
80010178:	59 61       	cp.w	r1,22
8001017a:	77 41       	ld.w	r1,r11[0x50]
8001017c:	50 69       	stdsp	sp[0x18],r9
8001017e:	64 5f       	ld.w	pc,r2[0x14]
80010180:	50 5f       	stdsp	sp[0x14],pc
80010182:	47 00       	lddsp	r0,sp[0x1c0]
80010184:	59 61       	cp.w	r1,22
80010186:	77 41       	ld.w	r1,r11[0x50]
80010188:	50 69       	stdsp	sp[0x18],r9
8001018a:	64 5f       	ld.w	pc,r2[0x14]
8001018c:	49 5f       	lddpc	pc,800101e0 <send_rt_stats+0x30c>
8001018e:	50 73       	stdsp	sp[0x1c],r3
80010190:	74 47       	ld.w	r7,r10[0x10]
80010192:	00 00       	add	r0,r0
80010194:	59 61       	cp.w	r1,22
80010196:	77 41       	ld.w	r1,r11[0x50]
80010198:	50 69       	stdsp	sp[0x18],r9
8001019a:	64 5f       	ld.w	pc,r2[0x14]
8001019c:	49 5f       	lddpc	pc,800101f0 <send_rt_stats+0x31c>
8001019e:	50 72       	stdsp	sp[0x1c],r2
800101a0:	65 47       	ld.w	r7,r2[0x50]
800101a2:	00 00       	add	r0,r0
800101a4:	59 61       	cp.w	r1,22
800101a6:	77 41       	ld.w	r1,r11[0x50]
800101a8:	50 69       	stdsp	sp[0x18],r9
800101aa:	64 5f       	ld.w	pc,r2[0x14]
800101ac:	44 5f       	lddsp	pc,sp[0x114]
800101ae:	47 61       	lddsp	r1,sp[0x1d8]
800101b0:	69 6e       	ld.w	lr,r4[0x58]
800101b2:	00 00       	add	r0,r0
800101b4:	51 46       	stdsp	sp[0x50],r6
800101b6:	5f 6b       	srmi	r11
800101b8:	70 5f       	ld.w	pc,r8[0x14]
800101ba:	61 63       	ld.w	r3,r0[0x58]
800101bc:	63 00       	ld.w	r0,r1[0x40]
800101be:	00 00       	add	r0,r0
800101c0:	51 46       	stdsp	sp[0x50],r6
800101c2:	5f 6b       	srmi	r11
800101c4:	70 5f       	ld.w	pc,r8[0x14]
800101c6:	6d 61       	ld.w	r1,r6[0x58]
800101c8:	67 00       	ld.w	r0,r3[0x40]
800101ca:	00 00       	add	r0,r0
800101cc:	42 69       	lddsp	r9,sp[0x98]
800101ce:	61 73       	ld.w	r3,r0[0x5c]
800101d0:	5f 47       	srge	r7
800101d2:	79 72       	ld.w	r2,r12[0x5c]
800101d4:	6f 5f       	ld.w	pc,r7[0x54]
800101d6:	58 00       	cp.w	r0,0
800101d8:	42 69       	lddsp	r9,sp[0x98]
800101da:	61 73       	ld.w	r3,r0[0x5c]
800101dc:	5f 47       	srge	r7
800101de:	79 72       	ld.w	r2,r12[0x5c]
800101e0:	6f 5f       	ld.w	pc,r7[0x54]
800101e2:	59 00       	cp.w	r0,16
800101e4:	42 69       	lddsp	r9,sp[0x98]
800101e6:	61 73       	ld.w	r3,r0[0x5c]
800101e8:	5f 47       	srge	r7
800101ea:	79 72       	ld.w	r2,r12[0x5c]
800101ec:	6f 5f       	ld.w	pc,r7[0x54]
800101ee:	5a 00       	cp.w	r0,-32
800101f0:	42 69       	lddsp	r9,sp[0x98]
800101f2:	61 73       	ld.w	r3,r0[0x5c]
800101f4:	5f 41       	srge	r1
800101f6:	63 63       	ld.w	r3,r1[0x58]
800101f8:	5f 58       	srlt	r8
800101fa:	00 00       	add	r0,r0
800101fc:	42 69       	lddsp	r9,sp[0x98]
800101fe:	61 73       	ld.w	r3,r0[0x5c]
80010200:	5f 41       	srge	r1
80010202:	63 63       	ld.w	r3,r1[0x58]
80010204:	5f 59       	srlt	r9
80010206:	00 00       	add	r0,r0
80010208:	42 69       	lddsp	r9,sp[0x98]
8001020a:	61 73       	ld.w	r3,r0[0x5c]
8001020c:	5f 41       	srge	r1
8001020e:	63 63       	ld.w	r3,r1[0x58]
80010210:	5f 5a       	srlt	r10
80010212:	00 00       	add	r0,r0
80010214:	42 69       	lddsp	r9,sp[0x98]
80010216:	61 73       	ld.w	r3,r0[0x5c]
80010218:	5f 4d       	srge	sp
8001021a:	61 67       	ld.w	r7,r0[0x58]
8001021c:	5f 58       	srlt	r8
8001021e:	00 00       	add	r0,r0
80010220:	42 69       	lddsp	r9,sp[0x98]
80010222:	61 73       	ld.w	r3,r0[0x5c]
80010224:	5f 4d       	srge	sp
80010226:	61 67       	ld.w	r7,r0[0x58]
80010228:	5f 59       	srlt	r9
8001022a:	00 00       	add	r0,r0
8001022c:	42 69       	lddsp	r9,sp[0x98]
8001022e:	61 73       	ld.w	r3,r0[0x5c]
80010230:	5f 4d       	srge	sp
80010232:	61 67       	ld.w	r7,r0[0x58]
80010234:	5f 5a       	srlt	r10
80010236:	00 00       	add	r0,r0
80010238:	53 63       	stdsp	sp[0xd8],r3
8001023a:	61 6c       	ld.w	r12,r0[0x58]
8001023c:	65 5f       	ld.w	pc,r2[0x54]
8001023e:	47 79       	lddsp	r9,sp[0x1dc]
80010240:	72 6f       	ld.w	pc,r9[0x18]
80010242:	5f 58       	srlt	r8
80010244:	00 00       	add	r0,r0
80010246:	00 00       	add	r0,r0
80010248:	53 63       	stdsp	sp[0xd8],r3
8001024a:	61 6c       	ld.w	r12,r0[0x58]
8001024c:	65 5f       	ld.w	pc,r2[0x54]
8001024e:	47 79       	lddsp	r9,sp[0x1dc]
80010250:	72 6f       	ld.w	pc,r9[0x18]
80010252:	5f 59       	srlt	r9
80010254:	00 00       	add	r0,r0
80010256:	00 00       	add	r0,r0
80010258:	53 63       	stdsp	sp[0xd8],r3
8001025a:	61 6c       	ld.w	r12,r0[0x58]
8001025c:	65 5f       	ld.w	pc,r2[0x54]
8001025e:	47 79       	lddsp	r9,sp[0x1dc]
80010260:	72 6f       	ld.w	pc,r9[0x18]
80010262:	5f 5a       	srlt	r10
80010264:	00 00       	add	r0,r0
80010266:	00 00       	add	r0,r0
80010268:	53 63       	stdsp	sp[0xd8],r3
8001026a:	61 6c       	ld.w	r12,r0[0x58]
8001026c:	65 5f       	ld.w	pc,r2[0x54]
8001026e:	41 63       	lddsp	r3,sp[0x58]
80010270:	63 5f       	ld.w	pc,r1[0x54]
80010272:	58 00       	cp.w	r0,0
80010274:	53 63       	stdsp	sp[0xd8],r3
80010276:	61 6c       	ld.w	r12,r0[0x58]
80010278:	65 5f       	ld.w	pc,r2[0x54]
8001027a:	41 63       	lddsp	r3,sp[0x58]
8001027c:	63 5f       	ld.w	pc,r1[0x54]
8001027e:	59 00       	cp.w	r0,16
80010280:	53 63       	stdsp	sp[0xd8],r3
80010282:	61 6c       	ld.w	r12,r0[0x58]
80010284:	65 5f       	ld.w	pc,r2[0x54]
80010286:	41 63       	lddsp	r3,sp[0x58]
80010288:	63 5f       	ld.w	pc,r1[0x54]
8001028a:	5a 00       	cp.w	r0,-32
8001028c:	53 63       	stdsp	sp[0xd8],r3
8001028e:	61 6c       	ld.w	r12,r0[0x58]
80010290:	65 5f       	ld.w	pc,r2[0x54]
80010292:	4d 61       	lddpc	r1,800103e8 <add_PID_parameters+0xe4>
80010294:	67 5f       	ld.w	pc,r3[0x54]
80010296:	58 00       	cp.w	r0,0
80010298:	53 63       	stdsp	sp[0xd8],r3
8001029a:	61 6c       	ld.w	r12,r0[0x58]
8001029c:	65 5f       	ld.w	pc,r2[0x54]
8001029e:	4d 61       	lddpc	r1,800103f4 <add_PID_parameters+0xf0>
800102a0:	67 5f       	ld.w	pc,r3[0x54]
800102a2:	59 00       	cp.w	r0,16
800102a4:	53 63       	stdsp	sp[0xd8],r3
800102a6:	61 6c       	ld.w	r12,r0[0x58]
800102a8:	65 5f       	ld.w	pc,r2[0x54]
800102aa:	4d 61       	lddpc	r1,80010400 <add_PID_parameters+0xfc>
800102ac:	67 5f       	ld.w	pc,r3[0x54]
800102ae:	5a 00       	cp.w	r0,-32
800102b0:	49 44       	lddpc	r4,80010300 <send_rt_stats+0x42c>
800102b2:	5f 53       	srlt	r3
800102b4:	79 73       	ld.w	r3,r12[0x5c]
800102b6:	74 65       	ld.w	r5,r10[0x18]
800102b8:	6d 00       	ld.w	r0,r6[0x40]
800102ba:	00 00       	add	r0,r0
800102bc:	49 44       	lddpc	r4,8001030c <add_PID_parameters+0x8>
800102be:	5f 50       	srlt	r0
800102c0:	6c 61       	ld.w	r1,r6[0x18]
800102c2:	6e 6e       	ld.w	lr,r7[0x18]
800102c4:	65 72       	ld.w	r2,r2[0x5c]
800102c6:	00 00       	add	r0,r0
800102c8:	50 6f       	stdsp	sp[0x18],pc
800102ca:	73 5f       	ld.w	pc,r9[0x54]
800102cc:	6b 70       	ld.w	r0,r5[0x5c]
800102ce:	5f 61       	srmi	r1
800102d0:	6c 74       	ld.w	r4,r6[0x1c]
800102d2:	00 00       	add	r0,r0
800102d4:	50 6f       	stdsp	sp[0x18],pc
800102d6:	73 5f       	ld.w	pc,r9[0x54]
800102d8:	6b 70       	ld.w	r0,r5[0x5c]
800102da:	5f 76       	srpl	r6
800102dc:	65 6c       	ld.w	r12,r2[0x58]
800102de:	62 00       	ld.w	r0,r1[0x0]
800102e0:	50 6f       	stdsp	sp[0x18],pc
800102e2:	73 5f       	ld.w	pc,r9[0x54]
800102e4:	6b 70       	ld.w	r0,r5[0x5c]
800102e6:	5f 70       	srpl	r0
800102e8:	6f 73       	ld.w	r3,r7[0x5c]
800102ea:	30 00       	mov	r0,0
800102ec:	50 6f       	stdsp	sp[0x18],pc
800102ee:	73 5f       	ld.w	pc,r9[0x54]
800102f0:	6b 70       	ld.w	r0,r5[0x5c]
800102f2:	5f 70       	srpl	r0
800102f4:	6f 73       	ld.w	r3,r7[0x5c]
800102f6:	31 00       	mov	r0,16
800102f8:	50 6f       	stdsp	sp[0x18],pc
800102fa:	73 5f       	ld.w	pc,r9[0x54]
800102fc:	6b 70       	ld.w	r0,r5[0x5c]
800102fe:	5f 70       	srpl	r0
80010300:	6f 73       	ld.w	r3,r7[0x5c]
80010302:	32 00       	mov	r0,32

80010304 <add_PID_parameters>:


void add_PID_parameters(void) {
80010304:	eb cd 40 c0 	pushm	r6-r7,lr
80010308:	1a 97       	mov	r7,sp
8001030a:	20 2d       	sub	sp,8
8001030c:	fe f6 03 d4 	ld.w	r6,pc[980]
80010310:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
80010312:	ec f8 00 00 	ld.w	r8,r6[0]
80010316:	70 08       	ld.w	r8,r8[0x0]
80010318:	f0 c8 fe 60 	sub	r8,r8,-416
8001031c:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
80010320:	ec f8 00 00 	ld.w	r8,r6[0]
80010324:	70 08       	ld.w	r8,r8[0x0]
80010326:	f0 c8 fd 24 	sub	r8,r8,-732
8001032a:	ef 48 ff fc 	st.w	r7[-4],r8
//	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
8001032e:	ec f8 00 00 	ld.w	r8,r6[0]
80010332:	70 08       	ld.w	r8,r8[0x0]
80010334:	f0 c8 f0 80 	sub	r8,r8,-3968
80010338:	fe cb 03 20 	sub	r11,pc,800
8001033c:	10 9c       	mov	r12,r8
8001033e:	f0 16 01 fe 	mcall	r6[2040]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
80010342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010346:	fe cb 03 22 	sub	r11,pc,802
8001034a:	10 9c       	mov	r12,r8
8001034c:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
80010350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010354:	2f 08       	sub	r8,-16
80010356:	fe cb 03 22 	sub	r11,pc,802
8001035a:	10 9c       	mov	r12,r8
8001035c:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
80010360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010364:	2f 48       	sub	r8,-12
80010366:	fe cb 03 22 	sub	r11,pc,802
8001036a:	10 9c       	mov	r12,r8
8001036c:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
80010370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010374:	2e 08       	sub	r8,-32
80010376:	fe cb 03 22 	sub	r11,pc,802
8001037a:	10 9c       	mov	r12,r8
8001037c:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
80010380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010384:	fe cb 03 20 	sub	r11,pc,800
80010388:	10 9c       	mov	r12,r8
8001038a:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
8001038e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010392:	2f 08       	sub	r8,-16
80010394:	fe cb 03 20 	sub	r11,pc,800
80010398:	10 9c       	mov	r12,r8
8001039a:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
8001039e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103a2:	2f 48       	sub	r8,-12
800103a4:	fe cb 03 20 	sub	r11,pc,800
800103a8:	10 9c       	mov	r12,r8
800103aa:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
800103ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103b2:	2e 08       	sub	r8,-32
800103b4:	fe cb 03 20 	sub	r11,pc,800
800103b8:	10 9c       	mov	r12,r8
800103ba:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
800103be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103c2:	2b c8       	sub	r8,-68
800103c4:	fe cb 03 20 	sub	r11,pc,800
800103c8:	10 9c       	mov	r12,r8
800103ca:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
800103ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103d2:	2a c8       	sub	r8,-84
800103d4:	fe cb 03 20 	sub	r11,pc,800
800103d8:	10 9c       	mov	r12,r8
800103da:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
800103de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103e2:	2b 08       	sub	r8,-80
800103e4:	fe cb 03 1c 	sub	r11,pc,796
800103e8:	10 9c       	mov	r12,r8
800103ea:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
800103ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103f2:	29 c8       	sub	r8,-100
800103f4:	fe cb 03 18 	sub	r11,pc,792
800103f8:	10 9c       	mov	r12,r8
800103fa:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
800103fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010402:	2b c8       	sub	r8,-68
80010404:	fe cb 03 14 	sub	r11,pc,788
80010408:	10 9c       	mov	r12,r8
8001040a:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
8001040e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010412:	2a c8       	sub	r8,-84
80010414:	fe cb 03 14 	sub	r11,pc,788
80010418:	10 9c       	mov	r12,r8
8001041a:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
8001041e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010422:	2b 08       	sub	r8,-80
80010424:	fe cb 03 10 	sub	r11,pc,784
80010428:	10 9c       	mov	r12,r8
8001042a:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
8001042e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010432:	29 c8       	sub	r8,-100
80010434:	fe cb 03 0c 	sub	r11,pc,780
80010438:	10 9c       	mov	r12,r8
8001043a:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
8001043e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010442:	f0 c8 ff 78 	sub	r8,r8,-136
80010446:	fe cb 03 0a 	sub	r11,pc,778
8001044a:	10 9c       	mov	r12,r8
8001044c:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
80010450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010454:	f0 c8 ff 68 	sub	r8,r8,-152
80010458:	fe cb 03 10 	sub	r11,pc,784
8001045c:	10 9c       	mov	r12,r8
8001045e:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
80010462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010466:	f0 c8 ff 6c 	sub	r8,r8,-148
8001046a:	fe cb 03 12 	sub	r11,pc,786
8001046e:	10 9c       	mov	r12,r8
80010470:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
80010474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010478:	f0 c8 ff 58 	sub	r8,r8,-168
8001047c:	fe cb 03 14 	sub	r11,pc,788
80010480:	10 9c       	mov	r12,r8
80010482:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80010486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001048a:	f0 c8 ff 78 	sub	r8,r8,-136
8001048e:	fe cb 03 16 	sub	r11,pc,790
80010492:	10 9c       	mov	r12,r8
80010494:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
80010498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001049c:	f0 c8 ff 68 	sub	r8,r8,-152
800104a0:	fe cb 03 1c 	sub	r11,pc,796
800104a4:	10 9c       	mov	r12,r8
800104a6:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
800104aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104ae:	f0 c8 ff 6c 	sub	r8,r8,-148
800104b2:	fe cb 03 1e 	sub	r11,pc,798
800104b6:	10 9c       	mov	r12,r8
800104b8:	f0 16 00 0f 	mcall	r6[60]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800104bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104c0:	f0 c8 ff 58 	sub	r8,r8,-168
800104c4:	fe cb 03 20 	sub	r11,pc,800
800104c8:	10 9c       	mov	r12,r8
800104ca:	f0 16 00 0f 	mcall	r6[60]
	// add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
	// add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
	// add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
800104ce:	ec f8 00 00 	ld.w	r8,r6[0]
800104d2:	70 08       	ld.w	r8,r8[0x0]
800104d4:	f0 c8 ff 64 	sub	r8,r8,-156
800104d8:	fe cb 03 24 	sub	r11,pc,804
800104dc:	10 9c       	mov	r12,r8
800104de:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
800104e2:	ec f8 00 00 	ld.w	r8,r6[0]
800104e6:	70 08       	ld.w	r8,r8[0x0]
800104e8:	f0 c8 ff 5c 	sub	r8,r8,-164
800104ec:	fe cb 03 2c 	sub	r11,pc,812
800104f0:	10 9c       	mov	r12,r8
800104f2:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800104f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104fa:	f0 c8 ff 58 	sub	r8,r8,-168
800104fe:	fe cb 03 5a 	sub	r11,pc,858
80010502:	10 9c       	mov	r12,r8
80010504:	f0 16 00 0f 	mcall	r6[60]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
80010508:	ec f8 00 00 	ld.w	r8,r6[0]
8001050c:	70 08       	ld.w	r8,r8[0x0]
8001050e:	2d 08       	sub	r8,-48
80010510:	fe cb 03 44 	sub	r11,pc,836
80010514:	10 9c       	mov	r12,r8
80010516:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
8001051a:	ec f8 00 00 	ld.w	r8,r6[0]
8001051e:	70 08       	ld.w	r8,r8[0x0]
80010520:	2c c8       	sub	r8,-52
80010522:	fe cb 03 4a 	sub	r11,pc,842
80010526:	10 9c       	mov	r12,r8
80010528:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
8001052c:	ec f8 00 00 	ld.w	r8,r6[0]
80010530:	70 08       	ld.w	r8,r8[0x0]
80010532:	2c 88       	sub	r8,-56
80010534:	fe cb 03 50 	sub	r11,pc,848
80010538:	10 9c       	mov	r12,r8
8001053a:	f0 16 00 0f 	mcall	r6[60]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
8001053e:	ec f8 00 00 	ld.w	r8,r6[0]
80010542:	70 08       	ld.w	r8,r8[0x0]
80010544:	2c 48       	sub	r8,-60
80010546:	fe cb 03 56 	sub	r11,pc,854
8001054a:	10 9c       	mov	r12,r8
8001054c:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
80010550:	ec f8 00 00 	ld.w	r8,r6[0]
80010554:	70 08       	ld.w	r8,r8[0x0]
80010556:	2c 08       	sub	r8,-64
80010558:	fe cb 03 5c 	sub	r11,pc,860
8001055c:	10 9c       	mov	r12,r8
8001055e:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
80010562:	ec f8 00 00 	ld.w	r8,r6[0]
80010566:	70 08       	ld.w	r8,r8[0x0]
80010568:	2b c8       	sub	r8,-68
8001056a:	fe cb 03 62 	sub	r11,pc,866
8001056e:	10 9c       	mov	r12,r8
80010570:	f0 16 00 0f 	mcall	r6[60]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
80010574:	ec f8 00 00 	ld.w	r8,r6[0]
80010578:	70 08       	ld.w	r8,r8[0x0]
8001057a:	2b 88       	sub	r8,-72
8001057c:	fe cb 03 68 	sub	r11,pc,872
80010580:	10 9c       	mov	r12,r8
80010582:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
80010586:	ec f8 00 00 	ld.w	r8,r6[0]
8001058a:	70 08       	ld.w	r8,r8[0x0]
8001058c:	2b 48       	sub	r8,-76
8001058e:	fe cb 03 6e 	sub	r11,pc,878
80010592:	10 9c       	mov	r12,r8
80010594:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
80010598:	ec f8 00 00 	ld.w	r8,r6[0]
8001059c:	70 08       	ld.w	r8,r8[0x0]
8001059e:	2b 08       	sub	r8,-80
800105a0:	fe cb 03 74 	sub	r11,pc,884
800105a4:	10 9c       	mov	r12,r8
800105a6:	f0 16 00 0f 	mcall	r6[60]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
800105aa:	ec f8 00 00 	ld.w	r8,r6[0]
800105ae:	70 08       	ld.w	r8,r8[0x0]
800105b0:	f0 c8 fe ec 	sub	r8,r8,-276
800105b4:	fe cb 03 7c 	sub	r11,pc,892
800105b8:	10 9c       	mov	r12,r8
800105ba:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
800105be:	ec f8 00 00 	ld.w	r8,r6[0]
800105c2:	70 08       	ld.w	r8,r8[0x0]
800105c4:	f0 c8 fe e8 	sub	r8,r8,-280
800105c8:	fe cb 03 80 	sub	r11,pc,896
800105cc:	10 9c       	mov	r12,r8
800105ce:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
800105d2:	ec f8 00 00 	ld.w	r8,r6[0]
800105d6:	70 08       	ld.w	r8,r8[0x0]
800105d8:	f0 c8 fe e4 	sub	r8,r8,-284
800105dc:	fe cb 03 84 	sub	r11,pc,900
800105e0:	10 9c       	mov	r12,r8
800105e2:	f0 16 00 0f 	mcall	r6[60]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
800105e6:	ec f8 00 00 	ld.w	r8,r6[0]
800105ea:	70 08       	ld.w	r8,r8[0x0]
800105ec:	f0 c8 fe e0 	sub	r8,r8,-288
800105f0:	fe cb 03 88 	sub	r11,pc,904
800105f4:	10 9c       	mov	r12,r8
800105f6:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
800105fa:	ec f8 00 00 	ld.w	r8,r6[0]
800105fe:	70 08       	ld.w	r8,r8[0x0]
80010600:	f0 c8 fe dc 	sub	r8,r8,-292
80010604:	fe cb 03 90 	sub	r11,pc,912
80010608:	10 9c       	mov	r12,r8
8001060a:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
8001060e:	ec f8 00 00 	ld.w	r8,r6[0]
80010612:	70 08       	ld.w	r8,r8[0x0]
80010614:	f0 c8 fe d8 	sub	r8,r8,-296
80010618:	fe cb 03 98 	sub	r11,pc,920
8001061c:	10 9c       	mov	r12,r8
8001061e:	f0 16 00 0f 	mcall	r6[60]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
80010622:	ec f8 00 00 	ld.w	r8,r6[0]
80010626:	70 08       	ld.w	r8,r8[0x0]
80010628:	f0 c8 fe d4 	sub	r8,r8,-300
8001062c:	fe cb 03 a0 	sub	r11,pc,928
80010630:	10 9c       	mov	r12,r8
80010632:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
80010636:	ec f8 00 00 	ld.w	r8,r6[0]
8001063a:	70 08       	ld.w	r8,r8[0x0]
8001063c:	f0 c8 fe d0 	sub	r8,r8,-304
80010640:	fe cb 03 a8 	sub	r11,pc,936
80010644:	10 9c       	mov	r12,r8
80010646:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
8001064a:	ec f8 00 00 	ld.w	r8,r6[0]
8001064e:	70 08       	ld.w	r8,r8[0x0]
80010650:	f0 c8 fe cc 	sub	r8,r8,-308
80010654:	fe cb 03 b0 	sub	r11,pc,944
80010658:	10 9c       	mov	r12,r8
8001065a:	f0 16 00 0f 	mcall	r6[60]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
8001065e:	fe cb 03 ae 	sub	r11,pc,942
80010662:	ec fc 00 6c 	ld.w	r12,r6[108]
80010666:	f0 16 00 d9 	mcall	r6[868]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
8001066a:	fe cb 03 ae 	sub	r11,pc,942
8001066e:	ec fc 00 c0 	ld.w	r12,r6[192]
80010672:	f0 16 00 d9 	mcall	r6[868]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
80010676:	ec f8 00 00 	ld.w	r8,r6[0]
8001067a:	70 08       	ld.w	r8,r8[0x0]
8001067c:	f0 c8 f3 ec 	sub	r8,r8,-3092
80010680:	fe cb 03 b8 	sub	r11,pc,952
80010684:	10 9c       	mov	r12,r8
80010686:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
8001068a:	ec f8 00 00 	ld.w	r8,r6[0]
8001068e:	70 08       	ld.w	r8,r8[0x0]
80010690:	f0 c8 f3 e8 	sub	r8,r8,-3096
80010694:	fe cb 03 c0 	sub	r11,pc,960
80010698:	10 9c       	mov	r12,r8
8001069a:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
8001069e:	ec f8 00 00 	ld.w	r8,r6[0]
800106a2:	70 08       	ld.w	r8,r8[0x0]
800106a4:	f0 c8 f3 f8 	sub	r8,r8,-3080
800106a8:	fe cb 03 c8 	sub	r11,pc,968
800106ac:	10 9c       	mov	r12,r8
800106ae:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
800106b2:	ec f8 00 00 	ld.w	r8,r6[0]
800106b6:	70 08       	ld.w	r8,r8[0x0]
800106b8:	f0 c8 f3 f4 	sub	r8,r8,-3084
800106bc:	fe cb 03 d0 	sub	r11,pc,976
800106c0:	10 9c       	mov	r12,r8
800106c2:	f0 16 00 0f 	mcall	r6[60]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
800106c6:	ec f8 00 00 	ld.w	r8,r6[0]
800106ca:	70 08       	ld.w	r8,r8[0x0]
800106cc:	f0 c8 f3 f0 	sub	r8,r8,-3088
800106d0:	fe cb 03 d8 	sub	r11,pc,984
800106d4:	10 9c       	mov	r12,r8
800106d6:	f0 16 00 0f 	mcall	r6[60]
}
800106da:	2f ed       	sub	sp,-8
800106dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800106e0:	80 01       	ld.sh	r1,r0[0x0]
800106e2:	01 94       	ld.ub	r4,r0[0x1]

800106e4 <control_waypoint_timeout>:


task_return_t control_waypoint_timeout () {
800106e4:	eb cd 40 c0 	pushm	r6-r7,lr
800106e8:	1a 97       	mov	r7,sp
800106ea:	48 c6       	lddpc	r6,80010718 <control_waypoint_timeout+0x34>
800106ec:	1e 26       	rsub	r6,pc
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
800106ee:	ec f8 00 00 	ld.w	r8,r6[0]
800106f2:	70 08       	ld.w	r8,r8[0x0]
800106f4:	f0 ca f0 8b 	sub	r10,r8,-3957
800106f8:	ec f8 00 00 	ld.w	r8,r6[0]
800106fc:	70 08       	ld.w	r8,r8[0x0]
800106fe:	f0 c9 f0 8a 	sub	r9,r8,-3958
80010702:	ec f8 00 00 	ld.w	r8,r6[0]
80010706:	70 08       	ld.w	r8,r8[0x0]
80010708:	f0 c8 f1 24 	sub	r8,r8,-3804
8001070c:	12 9b       	mov	r11,r9
8001070e:	10 9c       	mov	r12,r8
80010710:	f0 16 02 08 	mcall	r6[2080]
}
80010714:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010718:	80 01       	ld.sh	r1,r0[0x0]
8001071a:	05 70       	ld.ub	r0,--r2

8001071c <handle_specific_messages>:

void handle_specific_messages (Mavlink_Received_t* rec) {
8001071c:	eb cd 40 c0 	pushm	r6-r7,lr
80010720:	1a 97       	mov	r7,sp
80010722:	20 1d       	sub	sp,4
80010724:	fe f6 02 e0 	ld.w	r6,pc[736]
80010728:	1e 26       	rsub	r6,pc
8001072a:	ef 4c ff fc 	st.w	r7[-4],r12
	if (rec->msg.sysid == MAVLINK_BASE_STATION_ID) {
8001072e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010732:	11 d9       	ld.ub	r9,r8[0x5]
80010734:	3f f8       	mov	r8,-1
80010736:	f0 09 18 00 	cp.b	r9,r8
8001073a:	e0 81 01 52 	brne	800109de <handle_specific_messages+0x2c2>
		switch(rec->msg.msgid) {
8001073e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010742:	11 f8       	ld.ub	r8,r8[0x7]
80010744:	20 b8       	sub	r8,11
80010746:	e0 48 00 41 	cp.w	r8,65
8001074a:	e0 8b 01 57 	brhi	800109f8 <handle_specific_messages+0x2dc>
8001074e:	fe c9 ff f6 	sub	r9,pc,-10
80010752:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80010756:	00 00       	add	r0,r0
80010758:	e0 8f 01 25 	bral	800109a2 <handle_specific_messages+0x286>
8001075c:	e0 8f 01 50 	bral	800109fc <handle_specific_messages+0x2e0>
80010760:	e0 8f 01 4e 	bral	800109fc <handle_specific_messages+0x2e0>
80010764:	e0 8f 01 4c 	bral	800109fc <handle_specific_messages+0x2e0>
80010768:	e0 8f 01 4a 	bral	800109fc <handle_specific_messages+0x2e0>
8001076c:	e0 8f 01 48 	bral	800109fc <handle_specific_messages+0x2e0>
80010770:	e0 8f 01 46 	bral	800109fc <handle_specific_messages+0x2e0>
80010774:	e0 8f 01 44 	bral	800109fc <handle_specific_messages+0x2e0>
80010778:	e0 8f 01 42 	bral	800109fc <handle_specific_messages+0x2e0>
8001077c:	e0 8f 01 40 	bral	800109fc <handle_specific_messages+0x2e0>
80010780:	e0 8f 01 3e 	bral	800109fc <handle_specific_messages+0x2e0>
80010784:	e0 8f 01 3c 	bral	800109fc <handle_specific_messages+0x2e0>
80010788:	e0 8f 01 3a 	bral	800109fc <handle_specific_messages+0x2e0>
8001078c:	e0 8f 01 38 	bral	800109fc <handle_specific_messages+0x2e0>
80010790:	e0 8f 01 36 	bral	800109fc <handle_specific_messages+0x2e0>
80010794:	e0 8f 01 34 	bral	800109fc <handle_specific_messages+0x2e0>
80010798:	e0 8f 01 32 	bral	800109fc <handle_specific_messages+0x2e0>
8001079c:	e0 8f 01 30 	bral	800109fc <handle_specific_messages+0x2e0>
800107a0:	e0 8f 01 2e 	bral	800109fc <handle_specific_messages+0x2e0>
800107a4:	e0 8f 01 2c 	bral	800109fc <handle_specific_messages+0x2e0>
800107a8:	e0 8f 01 2a 	bral	800109fc <handle_specific_messages+0x2e0>
800107ac:	e0 8f 01 28 	bral	800109fc <handle_specific_messages+0x2e0>
800107b0:	e0 8f 01 26 	bral	800109fc <handle_specific_messages+0x2e0>
800107b4:	e0 8f 01 24 	bral	800109fc <handle_specific_messages+0x2e0>
800107b8:	e0 8f 01 22 	bral	800109fc <handle_specific_messages+0x2e0>
800107bc:	e0 8f 01 20 	bral	800109fc <handle_specific_messages+0x2e0>
800107c0:	e0 8f 01 1e 	bral	800109fc <handle_specific_messages+0x2e0>
800107c4:	e0 8f 01 1c 	bral	800109fc <handle_specific_messages+0x2e0>
800107c8:	e0 8f 00 4c 	bral	80010860 <handle_specific_messages+0x144>
800107cc:	e0 8f 00 67 	bral	8001089a <handle_specific_messages+0x17e>
800107d0:	e0 8f 00 82 	bral	800108d4 <handle_specific_messages+0x1b8>
800107d4:	e0 8f 01 14 	bral	800109fc <handle_specific_messages+0x2e0>
800107d8:	e0 8f 00 92 	bral	800108fc <handle_specific_messages+0x1e0>
800107dc:	e0 8f 00 ad 	bral	80010936 <handle_specific_messages+0x21a>
800107e0:	e0 8f 00 c4 	bral	80010968 <handle_specific_messages+0x24c>
800107e4:	e0 8f 01 0c 	bral	800109fc <handle_specific_messages+0x2e0>
800107e8:	e0 8f 00 d1 	bral	8001098a <handle_specific_messages+0x26e>
800107ec:	e0 8f 01 08 	bral	800109fc <handle_specific_messages+0x2e0>
800107f0:	e0 8f 01 06 	bral	800109fc <handle_specific_messages+0x2e0>
800107f4:	e0 8f 01 04 	bral	800109fc <handle_specific_messages+0x2e0>
800107f8:	e0 8f 01 02 	bral	800109fc <handle_specific_messages+0x2e0>
800107fc:	e0 8f 01 00 	bral	800109fc <handle_specific_messages+0x2e0>
80010800:	e0 8f 00 fe 	bral	800109fc <handle_specific_messages+0x2e0>
80010804:	e0 8f 00 fc 	bral	800109fc <handle_specific_messages+0x2e0>
80010808:	e0 8f 00 fa 	bral	800109fc <handle_specific_messages+0x2e0>
8001080c:	e0 8f 00 f8 	bral	800109fc <handle_specific_messages+0x2e0>
80010810:	e0 8f 00 f6 	bral	800109fc <handle_specific_messages+0x2e0>
80010814:	e0 8f 00 f4 	bral	800109fc <handle_specific_messages+0x2e0>
80010818:	e0 8f 00 f2 	bral	800109fc <handle_specific_messages+0x2e0>
8001081c:	e0 8f 00 f0 	bral	800109fc <handle_specific_messages+0x2e0>
80010820:	e0 8f 00 ee 	bral	800109fc <handle_specific_messages+0x2e0>
80010824:	e0 8f 00 ec 	bral	800109fc <handle_specific_messages+0x2e0>
80010828:	e0 8f 00 ea 	bral	800109fc <handle_specific_messages+0x2e0>
8001082c:	e0 8f 00 e8 	bral	800109fc <handle_specific_messages+0x2e0>
80010830:	e0 8f 00 e6 	bral	800109fc <handle_specific_messages+0x2e0>
80010834:	e0 8f 00 e4 	bral	800109fc <handle_specific_messages+0x2e0>
80010838:	e0 8f 00 e2 	bral	800109fc <handle_specific_messages+0x2e0>
8001083c:	e0 8f 00 e0 	bral	800109fc <handle_specific_messages+0x2e0>
80010840:	e0 8f 00 de 	bral	800109fc <handle_specific_messages+0x2e0>
80010844:	e0 8f 00 dc 	bral	800109fc <handle_specific_messages+0x2e0>
80010848:	e0 8f 00 da 	bral	800109fc <handle_specific_messages+0x2e0>
8001084c:	e0 8f 00 d8 	bral	800109fc <handle_specific_messages+0x2e0>
80010850:	e0 8f 00 d6 	bral	800109fc <handle_specific_messages+0x2e0>
80010854:	e0 8f 00 d4 	bral	800109fc <handle_specific_messages+0x2e0>
80010858:	e0 8f 00 d2 	bral	800109fc <handle_specific_messages+0x2e0>
8001085c:	e0 8f 00 bb 	bral	800109d2 <handle_specific_messages+0x2b6>
				case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
					suspend_downstream(500000);
80010860:	e6 7c a1 20 	mov	r12,500000
80010864:	f0 16 00 73 	mcall	r6[460]
					receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
80010868:	ec f8 00 00 	ld.w	r8,r6[0]
8001086c:	70 08       	ld.w	r8,r8[0x0]
8001086e:	f0 c9 f0 8a 	sub	r9,r8,-3958
80010872:	ec f8 00 00 	ld.w	r8,r6[0]
80010876:	70 08       	ld.w	r8,r8[0x0]
80010878:	f1 08 0e dc 	ld.sh	r8,r8[3804]
8001087c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010880:	ec f8 00 00 	ld.w	r8,r6[0]
80010884:	70 08       	ld.w	r8,r8[0x0]
80010886:	f0 cb f3 34 	sub	r11,r8,-3276
8001088a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001088e:	10 9c       	mov	r12,r8
80010890:	f0 16 01 63 	mcall	r6[1420]
					flush_mavlink();
80010894:	f0 16 00 2b 	mcall	r6[172]
				}
				break;
80010898:	cb 38       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
					suspend_downstream(500000);
8001089a:	e6 7c a1 20 	mov	r12,500000
8001089e:	f0 16 00 73 	mcall	r6[460]
					send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
800108a2:	ec f8 00 00 	ld.w	r8,r6[0]
800108a6:	70 08       	ld.w	r8,r8[0x0]
800108a8:	f0 c9 f0 8b 	sub	r9,r8,-3957
800108ac:	ec f8 00 00 	ld.w	r8,r6[0]
800108b0:	70 08       	ld.w	r8,r8[0x0]
800108b2:	f1 08 0e dc 	ld.sh	r8,r8[3804]
800108b6:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800108ba:	ec f8 00 00 	ld.w	r8,r6[0]
800108be:	70 08       	ld.w	r8,r8[0x0]
800108c0:	f0 cb f3 34 	sub	r11,r8,-3276
800108c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800108c8:	10 9c       	mov	r12,r8
800108ca:	f0 16 01 84 	mcall	r6[1552]
					flush_mavlink();
800108ce:	f0 16 00 2b 	mcall	r6[172]
				}
				break;
800108d2:	c9 68       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
					set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
800108d4:	ec f8 00 00 	ld.w	r8,r6[0]
800108d8:	70 08       	ld.w	r8,r8[0x0]
800108da:	f1 08 0e dc 	ld.sh	r8,r8[3804]
800108de:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800108e2:	ec f8 00 00 	ld.w	r8,r6[0]
800108e6:	70 08       	ld.w	r8,r8[0x0]
800108e8:	f0 c8 f3 34 	sub	r8,r8,-3276
800108ec:	10 99       	mov	r9,r8
800108ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800108f2:	12 9b       	mov	r11,r9
800108f4:	10 9c       	mov	r12,r8
800108f6:	f0 16 01 6f 	mcall	r6[1468]
				}
				break;
800108fa:	c8 28       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
					// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
800108fc:	e6 7c a1 20 	mov	r12,500000
80010900:	f0 16 00 73 	mcall	r6[460]
					send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80010904:	ec f8 00 00 	ld.w	r8,r6[0]
80010908:	70 08       	ld.w	r8,r8[0x0]
8001090a:	f0 c9 f0 8b 	sub	r9,r8,-3957
8001090e:	ec f8 00 00 	ld.w	r8,r6[0]
80010912:	70 08       	ld.w	r8,r8[0x0]
80010914:	f0 ca f0 8a 	sub	r10,r8,-3958
80010918:	ec f8 00 00 	ld.w	r8,r6[0]
8001091c:	70 08       	ld.w	r8,r8[0x0]
8001091e:	f1 08 0e dc 	ld.sh	r8,r8[3804]
80010922:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80010926:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001092a:	10 9c       	mov	r12,r8
8001092c:	f0 16 01 a2 	mcall	r6[1672]
					flush_mavlink();
80010930:	f0 16 00 2b 	mcall	r6[172]
				}
				break;
80010934:	c6 58       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
					// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
80010936:	e6 7c a1 20 	mov	r12,500000
8001093a:	f0 16 00 73 	mcall	r6[460]
					receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
8001093e:	ec f8 00 00 	ld.w	r8,r6[0]
80010942:	70 08       	ld.w	r8,r8[0x0]
80010944:	f0 c9 f0 8b 	sub	r9,r8,-3957
80010948:	ec f8 00 00 	ld.w	r8,r6[0]
8001094c:	70 08       	ld.w	r8,r8[0x0]
8001094e:	f0 ca f0 8a 	sub	r10,r8,-3958
80010952:	ec f8 00 00 	ld.w	r8,r6[0]
80010956:	70 08       	ld.w	r8,r8[0x0]
80010958:	f0 cb f1 24 	sub	r11,r8,-3804
8001095c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010960:	10 9c       	mov	r12,r8
80010962:	f0 16 02 1c 	mcall	r6[2160]
				}
				break;
80010966:	c4 c8       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
					clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
80010968:	ec f8 00 00 	ld.w	r8,r6[0]
8001096c:	70 08       	ld.w	r8,r8[0x0]
8001096e:	f0 ca f0 8c 	sub	r10,r8,-3956
80010972:	ec f8 00 00 	ld.w	r8,r6[0]
80010976:	70 08       	ld.w	r8,r8[0x0]
80010978:	f0 c9 f1 24 	sub	r9,r8,-3804
8001097c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010980:	12 9b       	mov	r11,r9
80010982:	10 9c       	mov	r12,r8
80010984:	f0 16 01 78 	mcall	r6[1504]
				}
				break;
80010988:	c3 b8       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_ACK : { // 47
					receive_ack_msg(rec,&centralData->waypoint_sending);
8001098a:	ec f8 00 00 	ld.w	r8,r6[0]
8001098e:	70 08       	ld.w	r8,r8[0x0]
80010990:	f0 c9 f0 8b 	sub	r9,r8,-3957
80010994:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010998:	12 9b       	mov	r11,r9
8001099a:	10 9c       	mov	r12,r8
8001099c:	f0 16 01 ec 	mcall	r6[1968]
				}
				break;
800109a0:	c2 f8       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
800109a2:	ec f8 00 00 	ld.w	r8,r6[0]
800109a6:	70 08       	ld.w	r8,r8[0x0]
800109a8:	f0 f8 0f 80 	ld.w	r8,r8[3968]
800109ac:	5c 58       	castu.b	r8
800109ae:	10 99       	mov	r9,r8
800109b0:	ec f8 00 00 	ld.w	r8,r6[0]
800109b4:	70 08       	ld.w	r8,r8[0x0]
800109b6:	f0 ca f0 83 	sub	r10,r8,-3965
800109ba:	ec f8 00 00 	ld.w	r8,r6[0]
800109be:	70 08       	ld.w	r8,r8[0x0]
800109c0:	f0 cb f0 84 	sub	r11,r8,-3964
800109c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109c8:	10 9c       	mov	r12,r8
800109ca:	f0 16 01 c9 	mcall	r6[1828]
				}
				break;
800109ce:	d7 03       	nop
800109d0:	c1 78       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
800109d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109d6:	10 9c       	mov	r12,r8
800109d8:	f0 16 01 7e 	mcall	r6[1528]
800109dc:	c1 18       	rjmp	800109fe <handle_specific_messages+0x2e2>
				}
				break;
		}
	} else
	if (rec->msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
800109de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109e2:	11 f9       	ld.ub	r9,r8[0x7]
800109e4:	32 18       	mov	r8,33
800109e6:	f0 09 18 00 	cp.b	r9,r8
800109ea:	c0 a1       	brne	800109fe <handle_specific_messages+0x2e2>
		//dbg_print_num(rec.msg.sysid, 10);
		//dbg_print(" for component");
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
800109ec:	ee c8 00 04 	sub	r8,r7,4
800109f0:	10 9c       	mov	r12,r8
800109f2:	f0 16 01 39 	mcall	r6[1252]
800109f6:	c0 48       	rjmp	800109fe <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
				}
				break;
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
800109f8:	d7 03       	nop
800109fa:	c0 28       	rjmp	800109fe <handle_specific_messages+0x2e2>
800109fc:	d7 03       	nop
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
	}
}
800109fe:	2f fd       	sub	sp,-4
80010a00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010a04:	80 01       	ld.sh	r1,r0[0x0]
80010a06:	05 ac       	ld.ub	r12,r2[0x2]
80010a08:	70 61       	ld.w	r1,r8[0x18]
80010a0a:	72 61       	ld.w	r1,r9[0x18]
80010a0c:	6d 65       	ld.w	r5,r6[0x58]
80010a0e:	74 65       	ld.w	r5,r10[0x18]
80010a10:	72 73       	ld.w	r3,r9[0x1c]
80010a12:	3a 00       	mov	r0,-96
80010a14:	2c 20       	sub	r0,-62
80010a16:	63 6f       	ld.w	pc,r1[0x58]
80010a18:	6d 6d       	ld.w	sp,r6[0x58]
80010a1a:	61 6e       	ld.w	lr,r0[0x58]
80010a1c:	64 20       	ld.w	r0,r2[0x8]
80010a1e:	69 64       	ld.w	r4,r4[0x58]
80010a20:	3a 00       	mov	r0,-96
80010a22:	00 00       	add	r0,r0
80010a24:	2c 20       	sub	r0,-62
80010a26:	63 6f       	ld.w	pc,r1[0x58]
80010a28:	6e 66       	ld.w	r6,r7[0x18]
80010a2a:	69 72       	ld.w	r2,r4[0x5c]
80010a2c:	6d 61       	ld.w	r1,r6[0x58]
80010a2e:	74 69       	ld.w	r9,r10[0x18]
80010a30:	6f 6e       	ld.w	lr,r7[0x58]
80010a32:	3a 00       	mov	r0,-96
80010a34:	0a 00       	add	r0,r5
80010a36:	00 00       	add	r0,r0
80010a38:	52 65       	stdsp	sp[0x98],r5
80010a3a:	61 64       	ld.w	r4,r0[0x58]
80010a3c:	69 6e       	ld.w	lr,r4[0x58]
80010a3e:	67 20       	ld.w	r0,r3[0x48]
80010a40:	66 72       	ld.w	r2,r3[0x1c]
80010a42:	6f 6d       	ld.w	sp,r7[0x58]
80010a44:	20 66       	sub	r6,6
80010a46:	6c 61       	ld.w	r1,r6[0x18]
80010a48:	73 68       	ld.w	r8,r9[0x58]
80010a4a:	63 2e       	ld.w	lr,r1[0x48]
80010a4c:	2e 2e       	sub	lr,-30
80010a4e:	0a 00       	add	r0,r5
80010a50:	57 72       	stdsp	sp[0x1dc],r2
80010a52:	69 74       	ld.w	r4,r4[0x5c]
80010a54:	74 69       	ld.w	r9,r10[0x18]
80010a56:	6e 67       	ld.w	r7,r7[0x18]
80010a58:	20 74       	sub	r4,7
80010a5a:	6f 20       	ld.w	r0,r7[0x48]
80010a5c:	66 6c       	ld.w	r12,r3[0x18]
80010a5e:	61 73       	ld.w	r3,r0[0x5c]
80010a60:	68 63       	ld.w	r3,r4[0x18]
80010a62:	0a 00       	add	r0,r5

80010a64 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
80010a64:	eb cd 40 c0 	pushm	r6-r7,lr
80010a68:	1a 97       	mov	r7,sp
80010a6a:	20 ad       	sub	sp,40
80010a6c:	fe f6 04 cc 	ld.w	r6,pc[1228]
80010a70:	1e 26       	rsub	r6,pc
80010a72:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
80010a76:	ee f8 ff d8 	ld.w	r8,r7[-40]
80010a7a:	ee c9 00 24 	sub	r9,r7,36
80010a7e:	12 9b       	mov	r11,r9
80010a80:	10 9c       	mov	r12,r8
80010a82:	fe b0 ec f3 	rcall	8000e468 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
80010a86:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80010a8a:	ec f8 00 6c 	ld.w	r8,r6[108]
80010a8e:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80010a90:	f0 09 18 00 	cp.b	r9,r8
80010a94:	e0 81 02 4e 	brne	80010f30 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80010a98:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80010a9c:	58 08       	cp.w	r8,0
80010a9e:	e0 81 02 49 	brne	80010f30 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80010aa2:	fe cc 00 9a 	sub	r12,pc,154
80010aa6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80010aaa:	ee f8 ff dc 	ld.w	r8,r7[-36]
80010aae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010ab2:	30 ab       	mov	r11,10
80010ab4:	10 9c       	mov	r12,r8
80010ab6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80010aba:	ee f8 ff e0 	ld.w	r8,r7[-32]
80010abe:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010ac2:	30 ab       	mov	r11,10
80010ac4:	10 9c       	mov	r12,r8
80010ac6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80010aca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80010ace:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010ad2:	30 ab       	mov	r11,10
80010ad4:	10 9c       	mov	r12,r8
80010ad6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80010ada:	ee f8 ff e8 	ld.w	r8,r7[-24]
80010ade:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010ae2:	30 ab       	mov	r11,10
80010ae4:	10 9c       	mov	r12,r8
80010ae6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80010aea:	ee f8 ff ec 	ld.w	r8,r7[-20]
80010aee:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010af2:	30 ab       	mov	r11,10
80010af4:	10 9c       	mov	r12,r8
80010af6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80010afa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80010afe:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b02:	30 ab       	mov	r11,10
80010b04:	10 9c       	mov	r12,r8
80010b06:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80010b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010b0e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b12:	30 ab       	mov	r11,10
80010b14:	10 9c       	mov	r12,r8
80010b16:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80010b1a:	fe cc 01 06 	sub	r12,pc,262
80010b1e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80010b22:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80010b26:	5c 78       	castu.h	r8
80010b28:	30 ab       	mov	r11,10
80010b2a:	10 9c       	mov	r12,r8
80010b2c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80010b30:	fe cc 01 0c 	sub	r12,pc,268
80010b34:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
80010b38:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80010b3c:	30 ab       	mov	r11,10
80010b3e:	10 9c       	mov	r12,r8
80010b40:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80010b44:	fe cc 01 10 	sub	r12,pc,272
80010b48:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80010b4c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80010b50:	5c 78       	castu.h	r8
80010b52:	21 08       	sub	r8,16
80010b54:	e0 48 00 e5 	cp.w	r8,229
80010b58:	e0 8b 01 ec 	brhi	80010f30 <receive_message_long+0x4cc>
80010b5c:	fe c9 ff f8 	sub	r9,pc,-8
80010b60:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80010b64:	e0 8f 01 e6 	bral	80010f30 <receive_message_long+0x4cc>
80010b68:	e0 8f 01 e4 	bral	80010f30 <receive_message_long+0x4cc>
80010b6c:	e0 8f 01 e2 	bral	80010f30 <receive_message_long+0x4cc>
80010b70:	e0 8f 01 e0 	bral	80010f30 <receive_message_long+0x4cc>
80010b74:	e0 8f 01 de 	bral	80010f30 <receive_message_long+0x4cc>
80010b78:	e0 8f 01 dc 	bral	80010f30 <receive_message_long+0x4cc>
80010b7c:	e0 8f 01 da 	bral	80010f30 <receive_message_long+0x4cc>
80010b80:	e0 8f 01 d8 	bral	80010f30 <receive_message_long+0x4cc>
80010b84:	e0 8f 01 d6 	bral	80010f30 <receive_message_long+0x4cc>
80010b88:	e0 8f 01 d4 	bral	80010f30 <receive_message_long+0x4cc>
80010b8c:	e0 8f 01 d2 	bral	80010f30 <receive_message_long+0x4cc>
80010b90:	e0 8f 01 d0 	bral	80010f30 <receive_message_long+0x4cc>
80010b94:	e0 8f 01 ce 	bral	80010f30 <receive_message_long+0x4cc>
80010b98:	e0 8f 01 cc 	bral	80010f30 <receive_message_long+0x4cc>
80010b9c:	e0 8f 01 ca 	bral	80010f30 <receive_message_long+0x4cc>
80010ba0:	e0 8f 01 c8 	bral	80010f30 <receive_message_long+0x4cc>
80010ba4:	e0 8f 01 c6 	bral	80010f30 <receive_message_long+0x4cc>
80010ba8:	e0 8f 01 c4 	bral	80010f30 <receive_message_long+0x4cc>
80010bac:	e0 8f 01 c2 	bral	80010f30 <receive_message_long+0x4cc>
80010bb0:	e0 8f 01 c0 	bral	80010f30 <receive_message_long+0x4cc>
80010bb4:	e0 8f 01 be 	bral	80010f30 <receive_message_long+0x4cc>
80010bb8:	e0 8f 01 bc 	bral	80010f30 <receive_message_long+0x4cc>
80010bbc:	e0 8f 01 ba 	bral	80010f30 <receive_message_long+0x4cc>
80010bc0:	e0 8f 01 b8 	bral	80010f30 <receive_message_long+0x4cc>
80010bc4:	e0 8f 01 b6 	bral	80010f30 <receive_message_long+0x4cc>
80010bc8:	e0 8f 01 b4 	bral	80010f30 <receive_message_long+0x4cc>
80010bcc:	e0 8f 01 b2 	bral	80010f30 <receive_message_long+0x4cc>
80010bd0:	e0 8f 01 b0 	bral	80010f30 <receive_message_long+0x4cc>
80010bd4:	e0 8f 01 ae 	bral	80010f30 <receive_message_long+0x4cc>
80010bd8:	e0 8f 01 ac 	bral	80010f30 <receive_message_long+0x4cc>
80010bdc:	e0 8f 01 aa 	bral	80010f30 <receive_message_long+0x4cc>
80010be0:	e0 8f 01 a8 	bral	80010f30 <receive_message_long+0x4cc>
80010be4:	e0 8f 01 a6 	bral	80010f30 <receive_message_long+0x4cc>
80010be8:	e0 8f 01 a4 	bral	80010f30 <receive_message_long+0x4cc>
80010bec:	e0 8f 01 a2 	bral	80010f30 <receive_message_long+0x4cc>
80010bf0:	e0 8f 01 a0 	bral	80010f30 <receive_message_long+0x4cc>
80010bf4:	e0 8f 01 9e 	bral	80010f30 <receive_message_long+0x4cc>
80010bf8:	e0 8f 01 9c 	bral	80010f30 <receive_message_long+0x4cc>
80010bfc:	e0 8f 01 9a 	bral	80010f30 <receive_message_long+0x4cc>
80010c00:	e0 8f 01 98 	bral	80010f30 <receive_message_long+0x4cc>
80010c04:	e0 8f 01 96 	bral	80010f30 <receive_message_long+0x4cc>
80010c08:	e0 8f 01 94 	bral	80010f30 <receive_message_long+0x4cc>
80010c0c:	e0 8f 01 92 	bral	80010f30 <receive_message_long+0x4cc>
80010c10:	e0 8f 01 90 	bral	80010f30 <receive_message_long+0x4cc>
80010c14:	e0 8f 01 8e 	bral	80010f30 <receive_message_long+0x4cc>
80010c18:	e0 8f 01 8c 	bral	80010f30 <receive_message_long+0x4cc>
80010c1c:	e0 8f 01 8a 	bral	80010f30 <receive_message_long+0x4cc>
80010c20:	e0 8f 01 88 	bral	80010f30 <receive_message_long+0x4cc>
80010c24:	e0 8f 01 86 	bral	80010f30 <receive_message_long+0x4cc>
80010c28:	e0 8f 01 84 	bral	80010f30 <receive_message_long+0x4cc>
80010c2c:	e0 8f 01 82 	bral	80010f30 <receive_message_long+0x4cc>
80010c30:	e0 8f 01 80 	bral	80010f30 <receive_message_long+0x4cc>
80010c34:	e0 8f 01 7e 	bral	80010f30 <receive_message_long+0x4cc>
80010c38:	e0 8f 01 7c 	bral	80010f30 <receive_message_long+0x4cc>
80010c3c:	e0 8f 01 7a 	bral	80010f30 <receive_message_long+0x4cc>
80010c40:	e0 8f 01 78 	bral	80010f30 <receive_message_long+0x4cc>
80010c44:	e0 8f 01 76 	bral	80010f30 <receive_message_long+0x4cc>
80010c48:	e0 8f 01 74 	bral	80010f30 <receive_message_long+0x4cc>
80010c4c:	e0 8f 01 72 	bral	80010f30 <receive_message_long+0x4cc>
80010c50:	e0 8f 01 70 	bral	80010f30 <receive_message_long+0x4cc>
80010c54:	e0 8f 01 6e 	bral	80010f30 <receive_message_long+0x4cc>
80010c58:	e0 8f 01 6c 	bral	80010f30 <receive_message_long+0x4cc>
80010c5c:	e0 8f 01 6a 	bral	80010f30 <receive_message_long+0x4cc>
80010c60:	e0 8f 01 68 	bral	80010f30 <receive_message_long+0x4cc>
80010c64:	e0 8f 01 66 	bral	80010f30 <receive_message_long+0x4cc>
80010c68:	e0 8f 01 64 	bral	80010f30 <receive_message_long+0x4cc>
80010c6c:	e0 8f 01 62 	bral	80010f30 <receive_message_long+0x4cc>
80010c70:	e0 8f 01 60 	bral	80010f30 <receive_message_long+0x4cc>
80010c74:	e0 8f 01 5e 	bral	80010f30 <receive_message_long+0x4cc>
80010c78:	e0 8f 01 5c 	bral	80010f30 <receive_message_long+0x4cc>
80010c7c:	e0 8f 01 5a 	bral	80010f30 <receive_message_long+0x4cc>
80010c80:	e0 8f 01 58 	bral	80010f30 <receive_message_long+0x4cc>
80010c84:	e0 8f 01 56 	bral	80010f30 <receive_message_long+0x4cc>
80010c88:	e0 8f 01 54 	bral	80010f30 <receive_message_long+0x4cc>
80010c8c:	e0 8f 01 52 	bral	80010f30 <receive_message_long+0x4cc>
80010c90:	e0 8f 01 50 	bral	80010f30 <receive_message_long+0x4cc>
80010c94:	e0 8f 01 4e 	bral	80010f30 <receive_message_long+0x4cc>
80010c98:	e0 8f 01 4c 	bral	80010f30 <receive_message_long+0x4cc>
80010c9c:	e0 8f 01 4a 	bral	80010f30 <receive_message_long+0x4cc>
80010ca0:	e0 8f 01 48 	bral	80010f30 <receive_message_long+0x4cc>
80010ca4:	e0 8f 01 46 	bral	80010f30 <receive_message_long+0x4cc>
80010ca8:	e0 8f 01 44 	bral	80010f30 <receive_message_long+0x4cc>
80010cac:	e0 8f 01 42 	bral	80010f30 <receive_message_long+0x4cc>
80010cb0:	e0 8f 01 40 	bral	80010f30 <receive_message_long+0x4cc>
80010cb4:	e0 8f 01 3e 	bral	80010f30 <receive_message_long+0x4cc>
80010cb8:	e0 8f 01 3c 	bral	80010f30 <receive_message_long+0x4cc>
80010cbc:	e0 8f 01 3a 	bral	80010f30 <receive_message_long+0x4cc>
80010cc0:	e0 8f 01 38 	bral	80010f30 <receive_message_long+0x4cc>
80010cc4:	e0 8f 01 36 	bral	80010f30 <receive_message_long+0x4cc>
80010cc8:	e0 8f 01 34 	bral	80010f30 <receive_message_long+0x4cc>
80010ccc:	e0 8f 01 32 	bral	80010f30 <receive_message_long+0x4cc>
80010cd0:	e0 8f 01 30 	bral	80010f30 <receive_message_long+0x4cc>
80010cd4:	e0 8f 01 2e 	bral	80010f30 <receive_message_long+0x4cc>
80010cd8:	e0 8f 01 2c 	bral	80010f30 <receive_message_long+0x4cc>
80010cdc:	e0 8f 01 2a 	bral	80010f30 <receive_message_long+0x4cc>
80010ce0:	e0 8f 01 28 	bral	80010f30 <receive_message_long+0x4cc>
80010ce4:	e0 8f 01 26 	bral	80010f30 <receive_message_long+0x4cc>
80010ce8:	e0 8f 01 24 	bral	80010f30 <receive_message_long+0x4cc>
80010cec:	e0 8f 01 22 	bral	80010f30 <receive_message_long+0x4cc>
80010cf0:	e0 8f 01 20 	bral	80010f30 <receive_message_long+0x4cc>
80010cf4:	e0 8f 01 1e 	bral	80010f30 <receive_message_long+0x4cc>
80010cf8:	e0 8f 01 1c 	bral	80010f30 <receive_message_long+0x4cc>
80010cfc:	e0 8f 01 1a 	bral	80010f30 <receive_message_long+0x4cc>
80010d00:	e0 8f 01 18 	bral	80010f30 <receive_message_long+0x4cc>
80010d04:	e0 8f 01 16 	bral	80010f30 <receive_message_long+0x4cc>
80010d08:	e0 8f 01 14 	bral	80010f30 <receive_message_long+0x4cc>
80010d0c:	e0 8f 01 12 	bral	80010f30 <receive_message_long+0x4cc>
80010d10:	e0 8f 01 10 	bral	80010f30 <receive_message_long+0x4cc>
80010d14:	e0 8f 01 0e 	bral	80010f30 <receive_message_long+0x4cc>
80010d18:	e0 8f 01 0c 	bral	80010f30 <receive_message_long+0x4cc>
80010d1c:	e0 8f 01 0a 	bral	80010f30 <receive_message_long+0x4cc>
80010d20:	e0 8f 01 08 	bral	80010f30 <receive_message_long+0x4cc>
80010d24:	e0 8f 01 06 	bral	80010f30 <receive_message_long+0x4cc>
80010d28:	e0 8f 01 04 	bral	80010f30 <receive_message_long+0x4cc>
80010d2c:	e0 8f 01 02 	bral	80010f30 <receive_message_long+0x4cc>
80010d30:	e0 8f 01 00 	bral	80010f30 <receive_message_long+0x4cc>
80010d34:	e0 8f 00 fe 	bral	80010f30 <receive_message_long+0x4cc>
80010d38:	e0 8f 00 fc 	bral	80010f30 <receive_message_long+0x4cc>
80010d3c:	e0 8f 00 fa 	bral	80010f30 <receive_message_long+0x4cc>
80010d40:	e0 8f 00 f8 	bral	80010f30 <receive_message_long+0x4cc>
80010d44:	e0 8f 00 f6 	bral	80010f30 <receive_message_long+0x4cc>
80010d48:	e0 8f 00 f4 	bral	80010f30 <receive_message_long+0x4cc>
80010d4c:	e0 8f 00 f2 	bral	80010f30 <receive_message_long+0x4cc>
80010d50:	e0 8f 00 f0 	bral	80010f30 <receive_message_long+0x4cc>
80010d54:	e0 8f 00 ee 	bral	80010f30 <receive_message_long+0x4cc>
80010d58:	e0 8f 00 ec 	bral	80010f30 <receive_message_long+0x4cc>
80010d5c:	e0 8f 00 ea 	bral	80010f30 <receive_message_long+0x4cc>
80010d60:	e0 8f 00 e8 	bral	80010f30 <receive_message_long+0x4cc>
80010d64:	e0 8f 00 e6 	bral	80010f30 <receive_message_long+0x4cc>
80010d68:	e0 8f 00 e4 	bral	80010f30 <receive_message_long+0x4cc>
80010d6c:	e0 8f 00 e2 	bral	80010f30 <receive_message_long+0x4cc>
80010d70:	e0 8f 00 e0 	bral	80010f30 <receive_message_long+0x4cc>
80010d74:	e0 8f 00 de 	bral	80010f30 <receive_message_long+0x4cc>
80010d78:	e0 8f 00 dc 	bral	80010f30 <receive_message_long+0x4cc>
80010d7c:	e0 8f 00 da 	bral	80010f30 <receive_message_long+0x4cc>
80010d80:	e0 8f 00 d8 	bral	80010f30 <receive_message_long+0x4cc>
80010d84:	e0 8f 00 d6 	bral	80010f30 <receive_message_long+0x4cc>
80010d88:	e0 8f 00 d4 	bral	80010f30 <receive_message_long+0x4cc>
80010d8c:	e0 8f 00 d2 	bral	80010f30 <receive_message_long+0x4cc>
80010d90:	e0 8f 00 d0 	bral	80010f30 <receive_message_long+0x4cc>
80010d94:	e0 8f 00 ce 	bral	80010f30 <receive_message_long+0x4cc>
80010d98:	e0 8f 00 cc 	bral	80010f30 <receive_message_long+0x4cc>
80010d9c:	e0 8f 00 ca 	bral	80010f30 <receive_message_long+0x4cc>
80010da0:	e0 8f 00 c8 	bral	80010f30 <receive_message_long+0x4cc>
80010da4:	e0 8f 00 c6 	bral	80010f30 <receive_message_long+0x4cc>
80010da8:	e0 8f 00 c4 	bral	80010f30 <receive_message_long+0x4cc>
80010dac:	e0 8f 00 c2 	bral	80010f30 <receive_message_long+0x4cc>
80010db0:	e0 8f 00 c0 	bral	80010f30 <receive_message_long+0x4cc>
80010db4:	e0 8f 00 be 	bral	80010f30 <receive_message_long+0x4cc>
80010db8:	e0 8f 00 bc 	bral	80010f30 <receive_message_long+0x4cc>
80010dbc:	e0 8f 00 ba 	bral	80010f30 <receive_message_long+0x4cc>
80010dc0:	e0 8f 00 b8 	bral	80010f30 <receive_message_long+0x4cc>
80010dc4:	e0 8f 00 b6 	bral	80010f30 <receive_message_long+0x4cc>
80010dc8:	e0 8f 00 b4 	bral	80010f30 <receive_message_long+0x4cc>
80010dcc:	e0 8f 00 b2 	bral	80010f30 <receive_message_long+0x4cc>
80010dd0:	e0 8f 00 b0 	bral	80010f30 <receive_message_long+0x4cc>
80010dd4:	e0 8f 00 ae 	bral	80010f30 <receive_message_long+0x4cc>
80010dd8:	e0 8f 00 ac 	bral	80010f30 <receive_message_long+0x4cc>
80010ddc:	e0 8f 00 aa 	bral	80010f30 <receive_message_long+0x4cc>
80010de0:	e0 8f 00 a8 	bral	80010f30 <receive_message_long+0x4cc>
80010de4:	e0 8f 00 a6 	bral	80010f30 <receive_message_long+0x4cc>
80010de8:	e0 8f 00 a4 	bral	80010f30 <receive_message_long+0x4cc>
80010dec:	e0 8f 00 a2 	bral	80010f30 <receive_message_long+0x4cc>
80010df0:	e0 8f 00 a0 	bral	80010f30 <receive_message_long+0x4cc>
80010df4:	e0 8f 00 9e 	bral	80010f30 <receive_message_long+0x4cc>
80010df8:	e0 8f 00 9c 	bral	80010f30 <receive_message_long+0x4cc>
80010dfc:	e0 8f 00 9a 	bral	80010f30 <receive_message_long+0x4cc>
80010e00:	e0 8f 00 98 	bral	80010f30 <receive_message_long+0x4cc>
80010e04:	e0 8f 00 96 	bral	80010f30 <receive_message_long+0x4cc>
80010e08:	e0 8f 00 94 	bral	80010f30 <receive_message_long+0x4cc>
80010e0c:	e0 8f 00 92 	bral	80010f30 <receive_message_long+0x4cc>
80010e10:	e0 8f 00 90 	bral	80010f30 <receive_message_long+0x4cc>
80010e14:	e0 8f 00 8e 	bral	80010f30 <receive_message_long+0x4cc>
80010e18:	e0 8f 00 8c 	bral	80010f30 <receive_message_long+0x4cc>
80010e1c:	e0 8f 00 8a 	bral	80010f30 <receive_message_long+0x4cc>
80010e20:	e0 8f 00 88 	bral	80010f30 <receive_message_long+0x4cc>
80010e24:	e0 8f 00 86 	bral	80010f30 <receive_message_long+0x4cc>
80010e28:	e0 8f 00 84 	bral	80010f30 <receive_message_long+0x4cc>
80010e2c:	e0 8f 00 82 	bral	80010f30 <receive_message_long+0x4cc>
80010e30:	e0 8f 00 80 	bral	80010f30 <receive_message_long+0x4cc>
80010e34:	e0 8f 00 7e 	bral	80010f30 <receive_message_long+0x4cc>
80010e38:	e0 8f 00 7c 	bral	80010f30 <receive_message_long+0x4cc>
80010e3c:	e0 8f 00 7a 	bral	80010f30 <receive_message_long+0x4cc>
80010e40:	e0 8f 00 78 	bral	80010f30 <receive_message_long+0x4cc>
80010e44:	e0 8f 00 76 	bral	80010f30 <receive_message_long+0x4cc>
80010e48:	e0 8f 00 74 	bral	80010f30 <receive_message_long+0x4cc>
80010e4c:	e0 8f 00 72 	bral	80010f30 <receive_message_long+0x4cc>
80010e50:	e0 8f 00 70 	bral	80010f30 <receive_message_long+0x4cc>
80010e54:	e0 8f 00 6e 	bral	80010f30 <receive_message_long+0x4cc>
80010e58:	e0 8f 00 6c 	bral	80010f30 <receive_message_long+0x4cc>
80010e5c:	e0 8f 00 6a 	bral	80010f30 <receive_message_long+0x4cc>
80010e60:	e0 8f 00 68 	bral	80010f30 <receive_message_long+0x4cc>
80010e64:	e0 8f 00 66 	bral	80010f30 <receive_message_long+0x4cc>
80010e68:	e0 8f 00 64 	bral	80010f30 <receive_message_long+0x4cc>
80010e6c:	e0 8f 00 62 	bral	80010f30 <receive_message_long+0x4cc>
80010e70:	e0 8f 00 60 	bral	80010f30 <receive_message_long+0x4cc>
80010e74:	e0 8f 00 5e 	bral	80010f30 <receive_message_long+0x4cc>
80010e78:	e0 8f 00 5c 	bral	80010f30 <receive_message_long+0x4cc>
80010e7c:	e0 8f 00 5a 	bral	80010f30 <receive_message_long+0x4cc>
80010e80:	e0 8f 00 58 	bral	80010f30 <receive_message_long+0x4cc>
80010e84:	e0 8f 00 56 	bral	80010f30 <receive_message_long+0x4cc>
80010e88:	e0 8f 00 54 	bral	80010f30 <receive_message_long+0x4cc>
80010e8c:	e0 8f 00 52 	bral	80010f30 <receive_message_long+0x4cc>
80010e90:	e0 8f 00 50 	bral	80010f30 <receive_message_long+0x4cc>
80010e94:	e0 8f 00 4e 	bral	80010f30 <receive_message_long+0x4cc>
80010e98:	e0 8f 00 4c 	bral	80010f30 <receive_message_long+0x4cc>
80010e9c:	e0 8f 00 4a 	bral	80010f30 <receive_message_long+0x4cc>
80010ea0:	e0 8f 00 48 	bral	80010f30 <receive_message_long+0x4cc>
80010ea4:	e0 8f 00 46 	bral	80010f30 <receive_message_long+0x4cc>
80010ea8:	e0 8f 00 44 	bral	80010f30 <receive_message_long+0x4cc>
80010eac:	e0 8f 00 42 	bral	80010f30 <receive_message_long+0x4cc>
80010eb0:	e0 8f 00 40 	bral	80010f30 <receive_message_long+0x4cc>
80010eb4:	e0 8f 00 3e 	bral	80010f30 <receive_message_long+0x4cc>
80010eb8:	e0 8f 00 3c 	bral	80010f30 <receive_message_long+0x4cc>
80010ebc:	e0 8f 00 3a 	bral	80010f30 <receive_message_long+0x4cc>
80010ec0:	e0 8f 00 38 	bral	80010f30 <receive_message_long+0x4cc>
80010ec4:	e0 8f 00 36 	bral	80010f30 <receive_message_long+0x4cc>
80010ec8:	e0 8f 00 34 	bral	80010f30 <receive_message_long+0x4cc>
80010ecc:	e0 8f 00 32 	bral	80010f30 <receive_message_long+0x4cc>
80010ed0:	e0 8f 00 30 	bral	80010f30 <receive_message_long+0x4cc>
80010ed4:	e0 8f 00 2e 	bral	80010f30 <receive_message_long+0x4cc>
80010ed8:	e0 8f 00 2c 	bral	80010f30 <receive_message_long+0x4cc>
80010edc:	e0 8f 00 2a 	bral	80010f30 <receive_message_long+0x4cc>
80010ee0:	e0 8f 00 28 	bral	80010f30 <receive_message_long+0x4cc>
80010ee4:	e0 8f 00 26 	bral	80010f30 <receive_message_long+0x4cc>
80010ee8:	e0 8f 00 24 	bral	80010f30 <receive_message_long+0x4cc>
80010eec:	e0 8f 00 22 	bral	80010f30 <receive_message_long+0x4cc>
80010ef0:	e0 8f 00 20 	bral	80010f30 <receive_message_long+0x4cc>
80010ef4:	e0 8f 00 1e 	bral	80010f30 <receive_message_long+0x4cc>
80010ef8:	e0 8f 00 02 	bral	80010efc <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80010efc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80010f00:	30 08       	mov	r8,0
80010f02:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80010f06:	c0 81       	brne	80010f16 <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80010f08:	fe cc 04 d0 	sub	r12,pc,1232
80010f0c:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80010f10:	f0 16 01 11 	mcall	r6[1092]
80010f14:	c0 e8       	rjmp	80010f30 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80010f16:	ee f9 ff dc 	ld.w	r9,r7[-36]
80010f1a:	fc 18 3f 80 	movh	r8,0x3f80
80010f1e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80010f22:	c0 71       	brne	80010f30 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80010f24:	fe cc 04 d4 	sub	r12,pc,1236
80010f28:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80010f2c:	f0 16 01 c3 	mcall	r6[1804]
				/*  | */
			}
			break;
		}
	}
}
80010f30:	2f 6d       	sub	sp,-40
80010f32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010f36:	00 00       	add	r0,r0
80010f38:	80 01       	ld.sh	r1,r0[0x0]
80010f3a:	08 f4       	st.b	--r4,r4

80010f3c <init_mavlink_actions>:


void init_mavlink_actions(void) {
80010f3c:	eb cd 40 e0 	pushm	r5-r7,lr
80010f40:	1a 97       	mov	r7,sp
80010f42:	4f 46       	lddpc	r6,80011110 <init_mavlink_actions+0x1d4>
80010f44:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80010f46:	f0 16 00 31 	mcall	r6[196]
80010f4a:	18 99       	mov	r9,r12
80010f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f50:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
80010f52:	f0 16 01 94 	mcall	r6[1616]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
80010f56:	f0 16 01 11 	mcall	r6[1092]
	
	add_task(get_mavlink_taskset(),   10000, RUN_REGULAR, &control_waypoint_timeout, 0);
80010f5a:	ec f5 08 3c 	ld.w	r5,r6[2108]
80010f5e:	f0 16 00 22 	mcall	r6[136]
80010f62:	30 08       	mov	r8,0
80010f64:	0a 99       	mov	r9,r5
80010f66:	30 2a       	mov	r10,2
80010f68:	e0 6b 27 10 	mov	r11,10000
80010f6c:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
80010f70:	ec f5 06 ac 	ld.w	r5,r6[1708]
80010f74:	f0 16 00 22 	mcall	r6[136]
80010f78:	30 08       	mov	r8,0
80010f7a:	0a 99       	mov	r9,r5
80010f7c:	30 2a       	mov	r10,2
80010f7e:	e6 7b a1 20 	mov	r11,500000
80010f82:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
80010f86:	ec f5 07 44 	ld.w	r5,r6[1860]
80010f8a:	f0 16 00 22 	mcall	r6[136]
80010f8e:	31 f8       	mov	r8,31
80010f90:	0a 99       	mov	r9,r5
80010f92:	30 0a       	mov	r10,0
80010f94:	ee 7b 42 40 	mov	r11,1000000
80010f98:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
80010f9c:	ec f5 07 a8 	ld.w	r5,r6[1960]
80010fa0:	f0 16 00 22 	mcall	r6[136]
80010fa4:	31 e8       	mov	r8,30
80010fa6:	0a 99       	mov	r9,r5
80010fa8:	30 2a       	mov	r10,2
80010faa:	e2 7b 0d 40 	mov	r11,200000
80010fae:	f0 16 00 21 	mcall	r6[132]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
80010fb2:	ec f5 06 20 	ld.w	r5,r6[1568]
80010fb6:	f0 16 00 22 	mcall	r6[136]
80010fba:	34 a8       	mov	r8,74
80010fbc:	0a 99       	mov	r9,r5
80010fbe:	30 2a       	mov	r10,2
80010fc0:	e6 7b a1 20 	mov	r11,500000
80010fc4:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
80010fc8:	ec f5 04 dc 	ld.w	r5,r6[1244]
80010fcc:	f0 16 00 22 	mcall	r6[136]
80010fd0:	31 d8       	mov	r8,29
80010fd2:	0a 99       	mov	r9,r5
80010fd4:	30 2a       	mov	r10,2
80010fd6:	e6 7b a1 20 	mov	r11,500000
80010fda:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
80010fde:	ec f5 04 d8 	ld.w	r5,r6[1240]
80010fe2:	f0 16 00 22 	mcall	r6[136]
80010fe6:	31 a8       	mov	r8,26
80010fe8:	0a 99       	mov	r9,r5
80010fea:	30 2a       	mov	r10,2
80010fec:	e2 7b 0d 40 	mov	r11,200000
80010ff0:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
80010ff4:	ec f5 04 e0 	ld.w	r5,r6[1248]
80010ff8:	f0 16 00 22 	mcall	r6[136]
80010ffc:	31 b8       	mov	r8,27
80010ffe:	0a 99       	mov	r9,r5
80011000:	30 2a       	mov	r10,2
80011002:	e6 7b a1 20 	mov	r11,500000
80011006:	f0 16 00 21 	mcall	r6[132]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
8001100a:	ec f5 05 70 	ld.w	r5,r6[1392]
8001100e:	f0 16 00 22 	mcall	r6[136]
80011012:	35 08       	mov	r8,80
80011014:	0a 99       	mov	r9,r5
80011016:	30 0a       	mov	r10,0
80011018:	e2 7b 0d 40 	mov	r11,200000
8001101c:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
80011020:	ec f5 05 60 	ld.w	r5,r6[1376]
80011024:	f0 16 00 22 	mcall	r6[136]
80011028:	33 b8       	mov	r8,59
8001102a:	0a 99       	mov	r9,r5
8001102c:	30 0a       	mov	r10,0
8001102e:	e2 7b 0d 40 	mov	r11,200000
80011032:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
80011036:	ec f5 05 04 	ld.w	r5,r6[1284]
8001103a:	f0 16 00 22 	mcall	r6[136]
8001103e:	33 a8       	mov	r8,58
80011040:	0a 99       	mov	r9,r5
80011042:	30 0a       	mov	r10,0
80011044:	e2 7b 0d 40 	mov	r11,200000
80011048:	f0 16 00 21 	mcall	r6[132]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
8001104c:	ec f5 07 38 	ld.w	r5,r6[1848]
80011050:	f0 16 00 22 	mcall	r6[136]
80011054:	32 48       	mov	r8,36
80011056:	0a 99       	mov	r9,r5
80011058:	30 2a       	mov	r10,2
8001105a:	e2 7b d0 90 	mov	r11,250000
8001105e:	f0 16 00 21 	mcall	r6[132]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
80011062:	ec f5 06 c8 	ld.w	r5,r6[1736]
80011066:	f0 16 00 22 	mcall	r6[136]
8001106a:	32 08       	mov	r8,32
8001106c:	0a 99       	mov	r9,r5
8001106e:	30 2a       	mov	r10,2
80011070:	e2 7b 0d 40 	mov	r11,200000
80011074:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
80011078:	ec f5 07 2c 	ld.w	r5,r6[1836]
8001107c:	f0 16 00 22 	mcall	r6[136]
80011080:	32 18       	mov	r8,33
80011082:	0a 99       	mov	r9,r5
80011084:	30 2a       	mov	r10,2
80011086:	e2 7b 0d 40 	mov	r11,200000
8001108a:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
8001108e:	ec f5 07 5c 	ld.w	r5,r6[1884]
80011092:	f0 16 00 22 	mcall	r6[136]
80011096:	31 88       	mov	r8,24
80011098:	0a 99       	mov	r9,r5
8001109a:	30 2a       	mov	r10,2
8001109c:	e2 7b d0 90 	mov	r11,250000
800110a0:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
800110a4:	ec f5 06 00 	ld.w	r5,r6[1536]
800110a8:	f0 16 00 22 	mcall	r6[136]
800110ac:	32 38       	mov	r8,35
800110ae:	0a 99       	mov	r9,r5
800110b0:	30 2a       	mov	r10,2
800110b2:	e2 7b 0d 40 	mov	r11,200000
800110b6:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
800110ba:	ec f5 07 30 	ld.w	r5,r6[1840]
800110be:	f0 16 00 22 	mcall	r6[136]
800110c2:	32 28       	mov	r8,34
800110c4:	0a 99       	mov	r9,r5
800110c6:	30 2a       	mov	r10,2
800110c8:	e2 7b d0 90 	mov	r11,250000
800110cc:	f0 16 00 21 	mcall	r6[132]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
800110d0:	ec f5 07 bc 	ld.w	r5,r6[1980]
800110d4:	f0 16 00 22 	mcall	r6[136]
800110d8:	35 a8       	mov	r8,90
800110da:	0a 99       	mov	r9,r5
800110dc:	30 2a       	mov	r10,2
800110de:	e6 7b a1 20 	mov	r11,500000
800110e2:	f0 16 00 21 	mcall	r6[132]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
800110e6:	ec f5 06 68 	ld.w	r5,r6[1640]
800110ea:	f0 16 00 22 	mcall	r6[136]
800110ee:	e0 68 00 fb 	mov	r8,251
800110f2:	0a 99       	mov	r9,r5
800110f4:	30 0a       	mov	r10,0
800110f6:	e2 7b d0 90 	mov	r11,250000
800110fa:	f0 16 00 21 	mcall	r6[132]
	
	sort_taskset_by_period(get_mavlink_taskset());
800110fe:	f0 16 00 22 	mcall	r6[136]
80011102:	18 98       	mov	r8,r12
80011104:	10 9c       	mov	r12,r8
80011106:	f0 16 01 9e 	mcall	r6[1656]
}
8001110a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001110e:	00 00       	add	r0,r0
80011110:	80 01       	ld.sh	r1,r0[0x0]
80011112:	0d c8       	ld.ub	r8,r6[0x4]

80011114 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80011114:	eb cd 40 c0 	pushm	r6-r7,lr
80011118:	1a 97       	mov	r7,sp
8001111a:	20 3d       	sub	sp,12
8001111c:	49 06       	lddpc	r6,8001115c <mav_array_memcpy+0x48>
8001111e:	1e 26       	rsub	r6,pc
80011120:	ef 4c ff fc 	st.w	r7[-4],r12
80011124:	ef 4b ff f8 	st.w	r7[-8],r11
80011128:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001112c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011130:	58 08       	cp.w	r8,0
80011132:	c0 91       	brne	80011144 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80011134:	ee fa ff f4 	ld.w	r10,r7[-12]
80011138:	30 0b       	mov	r11,0
8001113a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001113e:	f0 16 00 2f 	mcall	r6[188]
80011142:	c0 98       	rjmp	80011154 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80011144:	ee fa ff f4 	ld.w	r10,r7[-12]
80011148:	ee fb ff f8 	ld.w	r11,r7[-8]
8001114c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011150:	f0 16 00 1e 	mcall	r6[120]
	}
}
80011154:	2f dd       	sub	sp,-12
80011156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001115a:	00 00       	add	r0,r0
8001115c:	80 01       	ld.sh	r1,r0[0x0]
8001115e:	0f a2       	ld.ub	r2,r7[0x2]

80011160 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80011160:	eb cd 40 c0 	pushm	r6-r7,lr
80011164:	1a 97       	mov	r7,sp
80011166:	20 6d       	sub	sp,24
80011168:	49 e6       	lddpc	r6,800111e0 <interpolate+0x80>
8001116a:	1e 26       	rsub	r6,pc
8001116c:	ef 4c ff f8 	st.w	r7[-8],r12
80011170:	ef 4b ff f4 	st.w	r7[-12],r11
80011174:	ef 4a ff f0 	st.w	r7[-16],r10
80011178:	ef 49 ff ec 	st.w	r7[-20],r9
8001117c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80011180:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011184:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011188:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001118c:	c0 41       	brne	80011194 <interpolate+0x34>
	{
		return y1;
8001118e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011192:	c2 38       	rjmp	800111d8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80011194:	ee f9 ff e8 	ld.w	r9,r7[-24]
80011198:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001119c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800111a0:	ee fa ff f8 	ld.w	r10,r7[-8]
800111a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800111a8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800111ac:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800111b0:	ee fa ff f0 	ld.w	r10,r7[-16]
800111b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800111b8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800111bc:	12 9b       	mov	r11,r9
800111be:	10 9c       	mov	r12,r8
800111c0:	f0 16 00 08 	mcall	r6[32]
800111c4:	18 98       	mov	r8,r12
800111c6:	10 99       	mov	r9,r8
800111c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800111cc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800111d0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800111d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800111d8:	10 9c       	mov	r12,r8
800111da:	2f ad       	sub	sp,-24
800111dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800111e0:	80 01       	ld.sh	r1,r0[0x0]
800111e2:	0f ee       	ld.ub	lr,r7[0x6]

800111e4 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
800111e4:	eb cd 40 c0 	pushm	r6-r7,lr
800111e8:	1a 97       	mov	r7,sp
800111ea:	48 e6       	lddpc	r6,80011220 <get_roll_from_remote+0x3c>
800111ec:	1e 26       	rsub	r6,pc
800111ee:	30 1c       	mov	r12,1
800111f0:	f0 16 00 ba 	mcall	r6[744]
800111f4:	18 98       	mov	r8,r12
800111f6:	5c 38       	neg	r8
800111f8:	10 9c       	mov	r12,r8
800111fa:	f0 16 00 1a 	mcall	r6[104]
800111fe:	30 08       	mov	r8,0
80011200:	e0 69 e0 00 	mov	r9,57344
80011204:	ea 19 40 75 	orh	r9,0x4075
80011208:	f0 16 00 0c 	mcall	r6[48]
8001120c:	14 98       	mov	r8,r10
8001120e:	16 99       	mov	r9,r11
80011210:	10 9a       	mov	r10,r8
80011212:	12 9b       	mov	r11,r9
80011214:	f0 16 00 09 	mcall	r6[36]
80011218:	18 98       	mov	r8,r12
8001121a:	10 9c       	mov	r12,r8
8001121c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011220:	80 01       	ld.sh	r1,r0[0x0]
80011222:	10 70       	tst	r0,r8

80011224 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
80011224:	eb cd 40 c0 	pushm	r6-r7,lr
80011228:	1a 97       	mov	r7,sp
8001122a:	48 e6       	lddpc	r6,80011260 <get_pitch_from_remote+0x3c>
8001122c:	1e 26       	rsub	r6,pc
8001122e:	30 2c       	mov	r12,2
80011230:	f0 16 00 ba 	mcall	r6[744]
80011234:	18 98       	mov	r8,r12
80011236:	10 9c       	mov	r12,r8
80011238:	f0 16 00 1a 	mcall	r6[104]
8001123c:	30 08       	mov	r8,0
8001123e:	e0 69 e0 00 	mov	r9,57344
80011242:	ea 19 40 75 	orh	r9,0x4075
80011246:	f0 16 00 0c 	mcall	r6[48]
8001124a:	14 98       	mov	r8,r10
8001124c:	16 99       	mov	r9,r11
8001124e:	10 9a       	mov	r10,r8
80011250:	12 9b       	mov	r11,r9
80011252:	f0 16 00 09 	mcall	r6[36]
80011256:	18 98       	mov	r8,r12
80011258:	10 9c       	mov	r12,r8
8001125a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001125e:	00 00       	add	r0,r0
80011260:	80 01       	ld.sh	r1,r0[0x0]
80011262:	10 b0       	st.h	r8++,r0

80011264 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
80011264:	eb cd 40 c0 	pushm	r6-r7,lr
80011268:	1a 97       	mov	r7,sp
8001126a:	48 e6       	lddpc	r6,800112a0 <get_yaw_from_remote+0x3c>
8001126c:	1e 26       	rsub	r6,pc
8001126e:	30 3c       	mov	r12,3
80011270:	f0 16 00 ba 	mcall	r6[744]
80011274:	18 98       	mov	r8,r12
80011276:	10 9c       	mov	r12,r8
80011278:	f0 16 00 1a 	mcall	r6[104]
8001127c:	30 08       	mov	r8,0
8001127e:	e0 69 e0 00 	mov	r9,57344
80011282:	ea 19 40 75 	orh	r9,0x4075
80011286:	f0 16 00 0c 	mcall	r6[48]
8001128a:	14 98       	mov	r8,r10
8001128c:	16 99       	mov	r9,r11
8001128e:	10 9a       	mov	r10,r8
80011290:	12 9b       	mov	r11,r9
80011292:	f0 16 00 09 	mcall	r6[36]
80011296:	18 98       	mov	r8,r12
80011298:	10 9c       	mov	r12,r8
8001129a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001129e:	00 00       	add	r0,r0
800112a0:	80 01       	ld.sh	r1,r0[0x0]
800112a2:	10 f0       	st.b	--r8,r0

800112a4 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
800112a4:	eb cd 40 c0 	pushm	r6-r7,lr
800112a8:	1a 97       	mov	r7,sp
800112aa:	48 e6       	lddpc	r6,800112e0 <get_thrust_from_remote+0x3c>
800112ac:	1e 26       	rsub	r6,pc
800112ae:	30 0c       	mov	r12,0
800112b0:	f0 16 00 23 	mcall	r6[140]
800112b4:	18 98       	mov	r8,r12
800112b6:	10 9c       	mov	r12,r8
800112b8:	f0 16 00 1a 	mcall	r6[104]
800112bc:	30 08       	mov	r8,0
800112be:	e0 69 e0 00 	mov	r9,57344
800112c2:	ea 19 40 75 	orh	r9,0x4075
800112c6:	f0 16 00 0c 	mcall	r6[48]
800112ca:	14 98       	mov	r8,r10
800112cc:	16 99       	mov	r9,r11
800112ce:	10 9a       	mov	r10,r8
800112d0:	12 9b       	mov	r11,r9
800112d2:	f0 16 00 09 	mcall	r6[36]
800112d6:	18 98       	mov	r8,r12
800112d8:	10 9c       	mov	r12,r8
800112da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800112de:	00 00       	add	r0,r0
800112e0:	80 01       	ld.sh	r1,r0[0x0]
800112e2:	11 30       	ld.ub	r0,r8++

800112e4 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
800112e4:	eb cd 40 e0 	pushm	r5-r7,lr
800112e8:	1a 97       	mov	r7,sp
800112ea:	20 bd       	sub	sp,44
800112ec:	4b a6       	lddpc	r6,800113d4 <get_command_from_remote+0xf0>
800112ee:	1e 26       	rsub	r6,pc
800112f0:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
800112f2:	c7 9f       	rcall	800111e4 <get_roll_from_remote>
800112f4:	18 98       	mov	r8,r12
800112f6:	10 9c       	mov	r12,r8
800112f8:	f0 16 00 03 	mcall	r6[12]
800112fc:	e0 68 99 9a 	mov	r8,39322
80011300:	ea 18 99 99 	orh	r8,0x9999
80011304:	e0 69 99 99 	mov	r9,39321
80011308:	ea 19 3f e9 	orh	r9,0x3fe9
8001130c:	f0 16 00 02 	mcall	r6[8]
80011310:	14 98       	mov	r8,r10
80011312:	16 99       	mov	r9,r11
80011314:	10 9a       	mov	r10,r8
80011316:	12 9b       	mov	r11,r9
80011318:	f0 16 00 09 	mcall	r6[36]
8001131c:	18 98       	mov	r8,r12
8001131e:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
80011322:	c8 1f       	rcall	80011224 <get_pitch_from_remote>
80011324:	18 98       	mov	r8,r12
80011326:	10 9c       	mov	r12,r8
80011328:	f0 16 00 03 	mcall	r6[12]
8001132c:	e0 68 99 9a 	mov	r8,39322
80011330:	ea 18 99 99 	orh	r8,0x9999
80011334:	e0 69 99 99 	mov	r9,39321
80011338:	ea 19 3f e9 	orh	r9,0x3fe9
8001133c:	f0 16 00 02 	mcall	r6[8]
80011340:	14 98       	mov	r8,r10
80011342:	16 99       	mov	r9,r11
80011344:	10 9a       	mov	r10,r8
80011346:	12 9b       	mov	r11,r9
80011348:	f0 16 00 09 	mcall	r6[36]
8001134c:	18 98       	mov	r8,r12
8001134e:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
80011352:	c8 9f       	rcall	80011264 <get_yaw_from_remote>
80011354:	18 98       	mov	r8,r12
80011356:	10 9c       	mov	r12,r8
80011358:	f0 16 00 03 	mcall	r6[12]
8001135c:	e0 68 99 9a 	mov	r8,39322
80011360:	ea 18 99 99 	orh	r8,0x9999
80011364:	e0 69 99 99 	mov	r9,39321
80011368:	ea 19 3f e9 	orh	r9,0x3fe9
8001136c:	f0 16 00 02 	mcall	r6[8]
80011370:	14 98       	mov	r8,r10
80011372:	16 99       	mov	r9,r11
80011374:	10 9a       	mov	r10,r8
80011376:	12 9b       	mov	r11,r9
80011378:	f0 16 00 09 	mcall	r6[36]
8001137c:	18 98       	mov	r8,r12
8001137e:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80011382:	c9 1f       	rcall	800112a4 <get_thrust_from_remote>
80011384:	18 98       	mov	r8,r12
80011386:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
8001138a:	0a 98       	mov	r8,r5
8001138c:	ee c9 00 2c 	sub	r9,r7,44
80011390:	f0 ca 00 00 	sub	r10,r8,0
80011394:	f2 cb 00 00 	sub	r11,r9,0
80011398:	76 0c       	ld.w	r12,r11[0x0]
8001139a:	95 0c       	st.w	r10[0x0],r12
8001139c:	76 1c       	ld.w	r12,r11[0x4]
8001139e:	95 1c       	st.w	r10[0x4],r12
800113a0:	76 2c       	ld.w	r12,r11[0x8]
800113a2:	95 2c       	st.w	r10[0x8],r12
800113a4:	76 3b       	ld.w	r11,r11[0xc]
800113a6:	95 3b       	st.w	r10[0xc],r11
800113a8:	f0 ca ff f0 	sub	r10,r8,-16
800113ac:	f2 cb ff f0 	sub	r11,r9,-16
800113b0:	76 0c       	ld.w	r12,r11[0x0]
800113b2:	95 0c       	st.w	r10[0x0],r12
800113b4:	76 1c       	ld.w	r12,r11[0x4]
800113b6:	95 1c       	st.w	r10[0x4],r12
800113b8:	76 2c       	ld.w	r12,r11[0x8]
800113ba:	95 2c       	st.w	r10[0x8],r12
800113bc:	76 3b       	ld.w	r11,r11[0xc]
800113be:	95 3b       	st.w	r10[0xc],r11
800113c0:	f2 ea 00 20 	ld.d	r10,r9[32]
800113c4:	f0 eb 00 20 	st.d	r8[32],r10
800113c8:	72 a9       	ld.w	r9,r9[0x28]
800113ca:	91 a9       	st.w	r8[0x28],r9
}
800113cc:	0a 9c       	mov	r12,r5
800113ce:	2f 5d       	sub	sp,-44
800113d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800113d4:	80 01       	ld.sh	r1,r0[0x0]
800113d6:	11 72       	ld.ub	r2,--r8

800113d8 <get_channel_mode>:

#ifdef SPEKTRUM_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
800113d8:	eb cd 40 80 	pushm	r7,lr
800113dc:	1a 97       	mov	r7,sp
800113de:	20 1d       	sub	sp,4
800113e0:	ef 4c ff fc 	st.w	r7[-4],r12
		//TODO: remap with remote!
		*chanSwitch |= 0x00;
800113e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800113e8:	11 88       	ld.ub	r8,r8[0x0]
800113ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800113ee:	b2 88       	st.b	r9[0x0],r8
			//}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
			//*chanSwitch |= 0x03;
			//}else{
			//*chanSwitch |= 0x02;
		//}
	}
800113f0:	2f fd       	sub	sp,-4
800113f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800113f6 <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
800113f6:	eb cd 40 c0 	pushm	r6-r7,lr
800113fa:	1a 97       	mov	r7,sp
800113fc:	48 46       	lddpc	r6,8001140c <get_main_taskset+0x16>
800113fe:	1e 26       	rsub	r6,pc
	return &main_tasks;
80011400:	ec f8 01 24 	ld.w	r8,r6[292]
}
80011404:	10 9c       	mov	r12,r8
80011406:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001140a:	00 00       	add	r0,r0
8001140c:	80 01       	ld.sh	r1,r0[0x0]
8001140e:	12 82       	andn	r2,r9

80011410 <run_imu_update>:

task_return_t run_imu_update() {
80011410:	eb cd 40 c0 	pushm	r6-r7,lr
80011414:	1a 97       	mov	r7,sp
80011416:	48 d6       	lddpc	r6,80011448 <run_imu_update+0x38>
80011418:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8001141a:	ec f8 00 00 	ld.w	r8,r6[0]
8001141e:	70 08       	ld.w	r8,r8[0x0]
80011420:	f0 c9 f6 38 	sub	r9,r8,-2504
80011424:	ec f8 00 00 	ld.w	r8,r6[0]
80011428:	70 08       	ld.w	r8,r8[0x0]
8001142a:	f0 ca f0 7c 	sub	r10,r8,-3972
8001142e:	ec f8 00 00 	ld.w	r8,r6[0]
80011432:	70 08       	ld.w	r8,r8[0x0]
80011434:	f0 cb f4 04 	sub	r11,r8,-3068
80011438:	ec f8 00 00 	ld.w	r8,r6[0]
8001143c:	70 08       	ld.w	r8,r8[0x0]
8001143e:	10 9c       	mov	r12,r8
80011440:	f0 16 00 91 	mcall	r6[580]
}	
80011444:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011448:	80 01       	ld.sh	r1,r0[0x0]
8001144a:	12 9c       	mov	r12,r9
8001144c:	6d 6f       	ld.w	pc,r6[0x58]
8001144e:	74 6f       	ld.w	pc,r10[0x18]
80011450:	72 20       	ld.w	r0,r9[0x8]
80011452:	6f 6e       	ld.w	lr,r7[0x58]
80011454:	3a 20       	mov	r0,-94
80011456:	79 61       	ld.w	r1,r12[0x58]
80011458:	77 3d       	ld.w	sp,r11[0x4c]
8001145a:	0a 00       	add	r0,r5

8001145c <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
8001145c:	eb cd 40 e0 	pushm	r5-r7,lr
80011460:	1a 97       	mov	r7,sp
80011462:	20 3d       	sub	sp,12
80011464:	4c f6       	lddpc	r6,800115a0 <rc_user_channels+0x144>
80011466:	1e 26       	rsub	r6,pc
80011468:	ef 4c ff fc 	st.w	r7[-4],r12
8001146c:	ef 4b ff f8 	st.w	r7[-8],r11
80011470:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80011474:	ee fc ff fc 	ld.w	r12,r7[-4]
80011478:	cb 0f       	rcall	800113d8 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
8001147a:	c1 5f       	rcall	800112a4 <get_thrust_from_remote>
8001147c:	18 98       	mov	r8,r12
8001147e:	10 9c       	mov	r12,r8
80011480:	f0 16 00 03 	mcall	r6[12]
80011484:	30 05       	mov	r5,0
80011486:	e0 68 66 66 	mov	r8,26214
8001148a:	ea 18 66 66 	orh	r8,0x6666
8001148e:	e0 69 66 66 	mov	r9,26214
80011492:	ea 19 bf ee 	orh	r9,0xbfee
80011496:	f0 16 00 20 	mcall	r6[128]
8001149a:	18 98       	mov	r8,r12
8001149c:	58 08       	cp.w	r8,0
8001149e:	c0 20       	breq	800114a2 <rc_user_channels+0x46>
800114a0:	30 15       	mov	r5,1
800114a2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800114a6:	c2 90       	breq	800114f8 <rc_user_channels+0x9c>
800114a8:	cd ee       	rcall	80011264 <get_yaw_from_remote>
800114aa:	18 98       	mov	r8,r12
800114ac:	10 9c       	mov	r12,r8
800114ae:	f0 16 00 03 	mcall	r6[12]
800114b2:	14 98       	mov	r8,r10
800114b4:	16 99       	mov	r9,r11
800114b6:	30 05       	mov	r5,0
800114b8:	e0 6a cc cd 	mov	r10,52429
800114bc:	ea 1a cc cc 	orh	r10,0xcccc
800114c0:	e0 6b cc cc 	mov	r11,52428
800114c4:	ea 1b 3f ec 	orh	r11,0x3fec
800114c8:	f0 16 00 20 	mcall	r6[128]
800114cc:	18 98       	mov	r8,r12
800114ce:	58 08       	cp.w	r8,0
800114d0:	c0 20       	breq	800114d4 <rc_user_channels+0x78>
800114d2:	30 15       	mov	r5,1
800114d4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800114d8:	c1 00       	breq	800114f8 <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
800114da:	fe cc 00 8e 	sub	r12,pc,142
800114de:	f0 16 00 01 	mcall	r6[4]
800114e2:	cc 1e       	rcall	80011264 <get_yaw_from_remote>
800114e4:	18 98       	mov	r8,r12
800114e6:	30 2b       	mov	r11,2
800114e8:	10 9c       	mov	r12,r8
800114ea:	f0 16 02 06 	mcall	r6[2072]
		*motorbool = 1;
800114ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800114f2:	30 18       	mov	r8,1
800114f4:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
800114f6:	c3 88       	rjmp	80011566 <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
800114f8:	cd 6e       	rcall	800112a4 <get_thrust_from_remote>
800114fa:	18 98       	mov	r8,r12
800114fc:	10 9c       	mov	r12,r8
800114fe:	f0 16 00 03 	mcall	r6[12]
80011502:	30 05       	mov	r5,0
80011504:	e0 68 66 66 	mov	r8,26214
80011508:	ea 18 66 66 	orh	r8,0x6666
8001150c:	e0 69 66 66 	mov	r9,26214
80011510:	ea 19 bf ee 	orh	r9,0xbfee
80011514:	f0 16 00 20 	mcall	r6[128]
80011518:	18 98       	mov	r8,r12
8001151a:	58 08       	cp.w	r8,0
8001151c:	c0 20       	breq	80011520 <rc_user_channels+0xc4>
8001151e:	30 15       	mov	r5,1
80011520:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011524:	c1 d0       	breq	8001155e <rc_user_channels+0x102>
80011526:	c9 fe       	rcall	80011264 <get_yaw_from_remote>
80011528:	18 98       	mov	r8,r12
8001152a:	10 9c       	mov	r12,r8
8001152c:	f0 16 00 03 	mcall	r6[12]
80011530:	30 05       	mov	r5,0
80011532:	e0 68 cc cd 	mov	r8,52429
80011536:	ea 18 cc cc 	orh	r8,0xcccc
8001153a:	e0 69 cc cc 	mov	r9,52428
8001153e:	ea 19 bf ec 	orh	r9,0xbfec
80011542:	f0 16 00 20 	mcall	r6[128]
80011546:	18 98       	mov	r8,r12
80011548:	58 08       	cp.w	r8,0
8001154a:	c0 20       	breq	8001154e <rc_user_channels+0xf2>
8001154c:	30 15       	mov	r5,1
8001154e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011552:	c0 60       	breq	8001155e <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
80011554:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011558:	3f f8       	mov	r8,-1
8001155a:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
8001155c:	c0 58       	rjmp	80011566 <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
8001155e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011562:	30 08       	mov	r8,0
80011564:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80011566:	f0 16 00 a2 	mcall	r6[648]
8001156a:	18 98       	mov	r8,r12
8001156c:	5c 58       	castu.b	r8
8001156e:	5c 68       	casts.b	r8
80011570:	5b f8       	cp.w	r8,-1
80011572:	c0 b0       	breq	80011588 <rc_user_channels+0x12c>
80011574:	58 18       	cp.w	r8,1
80011576:	c0 40       	breq	8001157e <rc_user_channels+0x122>
80011578:	5b e8       	cp.w	r8,-2
8001157a:	c0 c0       	breq	80011592 <rc_user_channels+0x136>
8001157c:	c0 f8       	rjmp	8001159a <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
8001157e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011582:	30 18       	mov	r8,1
80011584:	b2 88       	st.b	r9[0x0],r8
		break;
80011586:	c0 a8       	rjmp	8001159a <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
80011588:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001158c:	3f f8       	mov	r8,-1
8001158e:	b2 88       	st.b	r9[0x0],r8
		break;
80011590:	c0 58       	rjmp	8001159a <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
80011592:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011596:	3f e8       	mov	r8,-2
80011598:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
8001159a:	2f dd       	sub	sp,-12
8001159c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800115a0:	80 01       	ld.sh	r1,r0[0x0]
800115a2:	12 ea       	st.h	--r9,r10
800115a4:	53 77       	stdsp	sp[0xdc],r7
800115a6:	69 74       	ld.w	r4,r4[0x5c]
800115a8:	63 68       	ld.w	r8,r1[0x58]
800115aa:	69 6e       	ld.w	lr,r4[0x58]
800115ac:	67 20       	ld.w	r0,r3[0x48]
800115ae:	6f 6e       	ld.w	lr,r7[0x58]
800115b0:	20 74       	sub	r4,7
800115b2:	68 65       	ld.w	r5,r4[0x18]
800115b4:	20 6d       	sub	sp,24
800115b6:	6f 74       	ld.w	r4,r7[0x5c]
800115b8:	6f 72       	ld.w	r2,r7[0x5c]
800115ba:	73 21       	ld.w	r1,r9[0x48]
800115bc:	0a 00       	add	r0,r5
800115be:	00 00       	add	r0,r0
800115c0:	53 77       	stdsp	sp[0xdc],r7
800115c2:	69 74       	ld.w	r4,r4[0x5c]
800115c4:	63 68       	ld.w	r8,r1[0x58]
800115c6:	65 73       	ld.w	r3,r2[0x5c]
800115c8:	20 6e       	sub	lr,6
800115ca:	6f 74       	ld.w	r4,r7[0x5c]
800115cc:	20 72       	sub	r2,7
800115ce:	65 61       	ld.w	r1,r2[0x58]
800115d0:	64 79       	ld.w	r9,r2[0x1c]
800115d2:	2c 20       	sub	r0,-62
800115d4:	62 6f       	ld.w	pc,r1[0x18]
800115d6:	74 68       	ld.w	r8,r10[0x18]
800115d8:	20 73       	sub	r3,7
800115da:	68 6f       	ld.w	pc,r4[0x18]
800115dc:	75 6c       	ld.w	r12,r10[0x58]
800115de:	64 20       	ld.w	r0,r2[0x8]
800115e0:	62 65       	ld.w	r5,r1[0x18]
800115e2:	20 70       	sub	r0,7
800115e4:	75 73       	ld.w	r3,r10[0x5c]
800115e6:	68 65       	ld.w	r5,r4[0x18]
800115e8:	64 21       	ld.w	r1,r2[0x8]
800115ea:	0a 00       	add	r0,r5
800115ec:	53 77       	stdsp	sp[0xdc],r7
800115ee:	69 74       	ld.w	r4,r4[0x5c]
800115f0:	63 68       	ld.w	r8,r1[0x58]
800115f2:	69 6e       	ld.w	lr,r4[0x58]
800115f4:	67 20       	ld.w	r0,r3[0x48]
800115f6:	6f 66       	ld.w	r6,r7[0x58]
800115f8:	66 20       	ld.w	r0,r3[0x8]
800115fa:	6d 6f       	ld.w	pc,r6[0x58]
800115fc:	74 6f       	ld.w	pc,r10[0x18]
800115fe:	72 73       	ld.w	r3,r9[0x1c]
80011600:	21 0a       	sub	r10,16
	...

80011604 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
80011604:	eb cd 40 c0 	pushm	r6-r7,lr
80011608:	1a 97       	mov	r7,sp
8001160a:	20 1d       	sub	sp,4
8001160c:	fe f6 03 9c 	ld.w	r6,pc[924]
80011610:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
80011612:	30 08       	mov	r8,0
80011614:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80011618:	30 08       	mov	r8,0
8001161a:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
8001161e:	30 08       	mov	r8,0
80011620:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
80011624:	30 2c       	mov	r12,2
80011626:	f0 16 01 c4 	mcall	r6[1808]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
8001162a:	ee ca 00 03 	sub	r10,r7,3
8001162e:	ee c9 00 02 	sub	r9,r7,2
80011632:	ee c8 00 01 	sub	r8,r7,1
80011636:	12 9b       	mov	r11,r9
80011638:	10 9c       	mov	r12,r8
8001163a:	f0 16 01 4f 	mcall	r6[1340]
	
	switch(centralData->mav_state)
8001163e:	ec f8 00 00 	ld.w	r8,r6[0]
80011642:	70 08       	ld.w	r8,r8[0x0]
80011644:	f1 38 0f 7d 	ld.ub	r8,r8[3965]
80011648:	58 48       	cp.w	r8,4
8001164a:	c6 50       	breq	80011714 <set_mav_mode_n_state+0x110>
8001164c:	e0 89 00 09 	brgt	8001165e <set_mav_mode_n_state+0x5a>
80011650:	58 28       	cp.w	r8,2
80011652:	e0 80 01 a2 	breq	80011996 <set_mav_mode_n_state+0x392>
80011656:	58 38       	cp.w	r8,3
80011658:	c0 b0       	breq	8001166e <set_mav_mode_n_state+0x6a>
8001165a:	e0 8f 01 a3 	bral	800119a0 <set_mav_mode_n_state+0x39c>
8001165e:	58 58       	cp.w	r8,5
80011660:	e0 80 00 fa 	breq	80011854 <set_mav_mode_n_state+0x250>
80011664:	58 68       	cp.w	r8,6
80011666:	e0 80 01 70 	breq	80011946 <set_mav_mode_n_state+0x342>
8001166a:	e0 8f 01 9b 	bral	800119a0 <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
8001166e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011672:	30 18       	mov	r8,1
80011674:	f0 09 18 00 	cp.b	r9,r8
80011678:	e0 81 01 91 	brne	8001199a <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
8001167c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011680:	58 18       	cp.w	r8,1
80011682:	c3 70       	breq	800116f0 <set_mav_mode_n_state+0xec>
80011684:	e0 89 00 06 	brgt	80011690 <set_mav_mode_n_state+0x8c>
80011688:	58 08       	cp.w	r8,0
8001168a:	c0 90       	breq	8001169c <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8001168c:	e0 8f 01 8a 	bral	800119a0 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
80011690:	58 28       	cp.w	r8,2
80011692:	c3 40       	breq	800116fa <set_mav_mode_n_state+0xf6>
80011694:	58 38       	cp.w	r8,3
80011696:	c3 70       	breq	80011704 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80011698:	e0 8f 01 84 	bral	800119a0 <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
8001169c:	fe cc 00 f8 	sub	r12,pc,248
800116a0:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800116a4:	ec f8 00 00 	ld.w	r8,r6[0]
800116a8:	70 08       	ld.w	r8,r8[0x0]
800116aa:	f0 ca f6 38 	sub	r10,r8,-2504
800116ae:	ec f8 00 00 	ld.w	r8,r6[0]
800116b2:	70 08       	ld.w	r8,r8[0x0]
800116b4:	f0 c9 f0 7c 	sub	r9,r8,-3972
800116b8:	ec f8 00 00 	ld.w	r8,r6[0]
800116bc:	70 08       	ld.w	r8,r8[0x0]
800116be:	f0 c8 f4 04 	sub	r8,r8,-3068
800116c2:	12 9b       	mov	r11,r9
800116c4:	10 9c       	mov	r12,r8
800116c6:	f0 16 02 02 	mcall	r6[2056]
						centralData->controls.run_mode = MOTORS_ON;
800116ca:	ec f8 00 00 	ld.w	r8,r6[0]
800116ce:	70 08       	ld.w	r8,r8[0x0]
800116d0:	30 19       	mov	r9,1
800116d2:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
800116d6:	ec f8 00 00 	ld.w	r8,r6[0]
800116da:	70 09       	ld.w	r9,r8[0x0]
800116dc:	30 48       	mov	r8,4
800116de:	f3 68 0f 7d 	st.b	r9[3965],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
800116e2:	ec f8 00 00 	ld.w	r8,r6[0]
800116e6:	70 09       	ld.w	r9,r8[0x0]
800116e8:	3c 08       	mov	r8,-64
800116ea:	f3 68 0f 7c 	st.b	r9[3964],r8
						break;
800116ee:	c1 18       	rjmp	80011710 <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
800116f0:	fe cc 01 30 	sub	r12,pc,304
800116f4:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
800116f8:	c0 c8       	rjmp	80011710 <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
800116fa:	fe cc 01 3a 	sub	r12,pc,314
800116fe:	f0 16 00 01 	mcall	r6[4]
						break;
80011702:	c0 78       	rjmp	80011710 <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
80011704:	fe cc 01 44 	sub	r12,pc,324
80011708:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
8001170c:	e0 8f 01 4a 	bral	800119a0 <set_mav_mode_n_state+0x39c>
80011710:	e0 8f 01 48 	bral	800119a0 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
80011714:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011718:	58 18       	cp.w	r8,1
8001171a:	c1 80       	breq	8001174a <set_mav_mode_n_state+0x146>
8001171c:	e0 89 00 05 	brgt	80011726 <set_mav_mode_n_state+0x122>
80011720:	58 08       	cp.w	r8,0
80011722:	c0 70       	breq	80011730 <set_mav_mode_n_state+0x12c>
80011724:	c2 d8       	rjmp	8001177e <set_mav_mode_n_state+0x17a>
80011726:	58 28       	cp.w	r8,2
80011728:	c1 e0       	breq	80011764 <set_mav_mode_n_state+0x160>
8001172a:	58 38       	cp.w	r8,3
8001172c:	c2 30       	breq	80011772 <set_mav_mode_n_state+0x16e>
8001172e:	c2 88       	rjmp	8001177e <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
80011730:	ec f8 00 00 	ld.w	r8,r6[0]
80011734:	70 09       	ld.w	r9,r8[0x0]
80011736:	30 08       	mov	r8,0
80011738:	f3 68 0f 77 	st.b	r9[3959],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
8001173c:	ec f8 00 00 	ld.w	r8,r6[0]
80011740:	70 09       	ld.w	r9,r8[0x0]
80011742:	3c 08       	mov	r8,-64
80011744:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
80011748:	c1 b8       	rjmp	8001177e <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
8001174a:	ec f8 00 00 	ld.w	r8,r6[0]
8001174e:	70 09       	ld.w	r9,r8[0x0]
80011750:	30 08       	mov	r8,0
80011752:	f3 68 0f 77 	st.b	r9[3959],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80011756:	ec f8 00 00 	ld.w	r8,r6[0]
8001175a:	70 09       	ld.w	r9,r8[0x0]
8001175c:	3d 08       	mov	r8,-48
8001175e:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
80011762:	c0 e8       	rjmp	8001177e <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011764:	ec f8 00 00 	ld.w	r8,r6[0]
80011768:	70 09       	ld.w	r9,r8[0x0]
8001176a:	3d 88       	mov	r8,-40
8001176c:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
80011770:	c0 78       	rjmp	8001177e <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80011772:	ec f8 00 00 	ld.w	r8,r6[0]
80011776:	70 09       	ld.w	r9,r8[0x0]
80011778:	3d c8       	mov	r8,-36
8001177a:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
			}
			
			switch (centralData->mav_mode)
8001177e:	ec f8 00 00 	ld.w	r8,r6[0]
80011782:	70 08       	ld.w	r8,r8[0x0]
80011784:	f1 38 0f 7c 	ld.ub	r8,r8[3964]
80011788:	e0 48 00 d0 	cp.w	r8,208
8001178c:	c1 50       	breq	800117b6 <set_mav_mode_n_state+0x1b2>
8001178e:	e0 89 00 06 	brgt	8001179a <set_mav_mode_n_state+0x196>
80011792:	e0 48 00 c0 	cp.w	r8,192
80011796:	c0 90       	breq	800117a8 <set_mav_mode_n_state+0x1a4>
80011798:	c2 88       	rjmp	800117e8 <set_mav_mode_n_state+0x1e4>
8001179a:	e0 48 00 d8 	cp.w	r8,216
8001179e:	c1 30       	breq	800117c4 <set_mav_mode_n_state+0x1c0>
800117a0:	e0 48 00 dc 	cp.w	r8,220
800117a4:	c1 30       	breq	800117ca <set_mav_mode_n_state+0x1c6>
800117a6:	c2 18       	rjmp	800117e8 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
800117a8:	ec f8 00 00 	ld.w	r8,r6[0]
800117ac:	70 09       	ld.w	r9,r8[0x0]
800117ae:	30 08       	mov	r8,0
800117b0:	f3 68 0f 77 	st.b	r9[3959],r8
					break;
800117b4:	c1 a8       	rjmp	800117e8 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
800117b6:	ec f8 00 00 	ld.w	r8,r6[0]
800117ba:	70 09       	ld.w	r9,r8[0x0]
800117bc:	30 08       	mov	r8,0
800117be:	f3 68 0f 77 	st.b	r9[3959],r8
					break;
800117c2:	c1 38       	rjmp	800117e8 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
800117c4:	f0 16 01 b8 	mcall	r6[1760]
					break;
800117c8:	c1 08       	rjmp	800117e8 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
800117ca:	ec f8 00 00 	ld.w	r8,r6[0]
800117ce:	70 08       	ld.w	r8,r8[0x0]
800117d0:	f1 38 0f 74 	ld.ub	r8,r8[3956]
800117d4:	58 08       	cp.w	r8,0
800117d6:	c0 70       	breq	800117e4 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
800117d8:	ec f8 00 00 	ld.w	r8,r6[0]
800117dc:	70 09       	ld.w	r9,r8[0x0]
800117de:	30 08       	mov	r8,0
800117e0:	f3 68 0f 77 	st.b	r9[3959],r8
					}
					waypoint_navigation_handler();
800117e4:	f0 16 02 07 	mcall	r6[2076]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
800117e8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800117ec:	3f f8       	mov	r8,-1
800117ee:	f0 09 18 00 	cp.b	r9,r8
800117f2:	c1 71       	brne	80011820 <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
800117f4:	fe cc 02 08 	sub	r12,pc,520
800117f8:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
800117fc:	ec f8 00 00 	ld.w	r8,r6[0]
80011800:	70 08       	ld.w	r8,r8[0x0]
80011802:	30 09       	mov	r9,0
80011804:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80011808:	ec f8 00 00 	ld.w	r8,r6[0]
8001180c:	70 09       	ld.w	r9,r8[0x0]
8001180e:	30 38       	mov	r8,3
80011810:	f3 68 0f 7d 	st.b	r9[3965],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011814:	ec f8 00 00 	ld.w	r8,r6[0]
80011818:	70 09       	ld.w	r9,r8[0x0]
8001181a:	34 08       	mov	r8,64
8001181c:	f3 68 0f 7c 	st.b	r9[3964],r8
			}
		
			switch (RC_check)
80011820:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011824:	5c 68       	casts.b	r8
80011826:	5b f8       	cp.w	r8,-1
80011828:	c0 70       	breq	80011836 <set_mav_mode_n_state+0x232>
8001182a:	58 18       	cp.w	r8,1
8001182c:	c0 40       	breq	80011834 <set_mav_mode_n_state+0x230>
8001182e:	5b e8       	cp.w	r8,-2
80011830:	c0 a0       	breq	80011844 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
80011832:	cb 78       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
80011834:	c0 f8       	rjmp	80011852 <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011836:	ec f8 00 00 	ld.w	r8,r6[0]
8001183a:	70 09       	ld.w	r9,r8[0x0]
8001183c:	30 58       	mov	r8,5
8001183e:	f3 68 0f 7d 	st.b	r9[3965],r8
					break;
80011842:	c0 88       	rjmp	80011852 <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011844:	ec f8 00 00 	ld.w	r8,r6[0]
80011848:	70 09       	ld.w	r9,r8[0x0]
8001184a:	30 58       	mov	r8,5
8001184c:	f3 68 0f 7d 	st.b	r9[3965],r8
					break;
			}
			break;
80011850:	ca 88       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
80011852:	ca 78       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
80011854:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011858:	58 18       	cp.w	r8,1
8001185a:	c1 20       	breq	8001187e <set_mav_mode_n_state+0x27a>
8001185c:	e0 89 00 05 	brgt	80011866 <set_mav_mode_n_state+0x262>
80011860:	58 08       	cp.w	r8,0
80011862:	c0 70       	breq	80011870 <set_mav_mode_n_state+0x26c>
80011864:	c2 18       	rjmp	800118a6 <set_mav_mode_n_state+0x2a2>
80011866:	58 28       	cp.w	r8,2
80011868:	c1 20       	breq	8001188c <set_mav_mode_n_state+0x288>
8001186a:	58 38       	cp.w	r8,3
8001186c:	c1 70       	breq	8001189a <set_mav_mode_n_state+0x296>
8001186e:	c1 c8       	rjmp	800118a6 <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80011870:	ec f8 00 00 	ld.w	r8,r6[0]
80011874:	70 09       	ld.w	r9,r8[0x0]
80011876:	3c 08       	mov	r8,-64
80011878:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
8001187c:	c1 58       	rjmp	800118a6 <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
8001187e:	ec f8 00 00 	ld.w	r8,r6[0]
80011882:	70 09       	ld.w	r9,r8[0x0]
80011884:	3d 08       	mov	r8,-48
80011886:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
8001188a:	c0 e8       	rjmp	800118a6 <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
8001188c:	ec f8 00 00 	ld.w	r8,r6[0]
80011890:	70 09       	ld.w	r9,r8[0x0]
80011892:	3d 88       	mov	r8,-40
80011894:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
80011898:	c0 78       	rjmp	800118a6 <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8001189a:	ec f8 00 00 	ld.w	r8,r6[0]
8001189e:	70 09       	ld.w	r9,r8[0x0]
800118a0:	3d c8       	mov	r8,-36
800118a2:	f3 68 0f 7c 	st.b	r9[3964],r8
					break;
			}
			if (motor_switch == -1)
800118a6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800118aa:	3f f8       	mov	r8,-1
800118ac:	f0 09 18 00 	cp.b	r9,r8
800118b0:	c1 71       	brne	800118de <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
800118b2:	fe cc 02 c6 	sub	r12,pc,710
800118b6:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
800118ba:	ec f8 00 00 	ld.w	r8,r6[0]
800118be:	70 08       	ld.w	r8,r8[0x0]
800118c0:	30 09       	mov	r9,0
800118c2:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
800118c6:	ec f8 00 00 	ld.w	r8,r6[0]
800118ca:	70 09       	ld.w	r9,r8[0x0]
800118cc:	30 38       	mov	r8,3
800118ce:	f3 68 0f 7d 	st.b	r9[3965],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
800118d2:	ec f8 00 00 	ld.w	r8,r6[0]
800118d6:	70 09       	ld.w	r9,r8[0x0]
800118d8:	34 08       	mov	r8,64
800118da:	f3 68 0f 7c 	st.b	r9[3964],r8
			}
			
			switch (centralData->mav_mode)
800118de:	ec f8 00 00 	ld.w	r8,r6[0]
800118e2:	70 08       	ld.w	r8,r8[0x0]
800118e4:	f1 38 0f 7c 	ld.ub	r8,r8[3964]
800118e8:	e0 48 00 d8 	cp.w	r8,216
800118ec:	c0 40       	breq	800118f4 <set_mav_mode_n_state+0x2f0>
800118ee:	e0 48 00 dc 	cp.w	r8,220
800118f2:	c0 31       	brne	800118f8 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
800118f4:	f0 16 01 d5 	mcall	r6[1876]
					break;
			}
			
			switch (RC_check)
800118f8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800118fc:	5c 68       	casts.b	r8
800118fe:	5b f8       	cp.w	r8,-1
80011900:	c1 30       	breq	80011926 <set_mav_mode_n_state+0x322>
80011902:	58 18       	cp.w	r8,1
80011904:	c0 40       	breq	8001190c <set_mav_mode_n_state+0x308>
80011906:	5b e8       	cp.w	r8,-2
80011908:	c1 00       	breq	80011928 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8001190a:	c4 b8       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
8001190c:	ec f8 00 00 	ld.w	r8,r6[0]
80011910:	70 09       	ld.w	r9,r8[0x0]
80011912:	30 48       	mov	r8,4
80011914:	f3 68 0f 7d 	st.b	r9[3965],r8
					centralData->critical_init = false;
80011918:	ec f8 00 00 	ld.w	r8,r6[0]
8001191c:	70 09       	ld.w	r9,r8[0x0]
8001191e:	30 08       	mov	r8,0
80011920:	f3 68 0f 79 	st.b	r9[3961],r8
					break;
80011924:	c1 08       	rjmp	80011944 <set_mav_mode_n_state+0x340>
				case -1:
					break;
80011926:	c0 f8       	rjmp	80011944 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
80011928:	ec f8 00 00 	ld.w	r8,r6[0]
8001192c:	70 08       	ld.w	r8,r8[0x0]
8001192e:	f1 38 0f 78 	ld.ub	r8,r8[3960]
80011932:	58 08       	cp.w	r8,0
80011934:	c3 50       	breq	8001199e <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
80011936:	ec f8 00 00 	ld.w	r8,r6[0]
8001193a:	70 09       	ld.w	r9,r8[0x0]
8001193c:	30 68       	mov	r8,6
8001193e:	f3 68 0f 7d 	st.b	r9[3965],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011942:	c2 f8       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
80011944:	c2 e8       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
80011946:	ec f8 00 00 	ld.w	r8,r6[0]
8001194a:	70 08       	ld.w	r8,r8[0x0]
8001194c:	f0 fa 0c 64 	ld.w	r10,r8[3172]
80011950:	30 18       	mov	r8,1
80011952:	fc 19 3f 80 	movh	r9,0x3f80
80011956:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001195a:	e0 8c 00 03 	brvs	80011960 <set_mav_mode_n_state+0x35c>
8001195e:	c0 25       	brlt	80011962 <set_mav_mode_n_state+0x35e>
80011960:	30 08       	mov	r8,0
80011962:	5c 58       	castu.b	r8
80011964:	c1 e0       	breq	800119a0 <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011966:	ec f8 00 00 	ld.w	r8,r6[0]
8001196a:	70 09       	ld.w	r9,r8[0x0]
8001196c:	34 08       	mov	r8,64
8001196e:	f3 68 0f 7c 	st.b	r9[3964],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011972:	ec f8 00 00 	ld.w	r8,r6[0]
80011976:	70 08       	ld.w	r8,r8[0x0]
80011978:	30 19       	mov	r9,1
8001197a:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
8001197e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011982:	5c 68       	casts.b	r8
80011984:	58 18       	cp.w	r8,1
80011986:	c0 d1       	brne	800119a0 <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
80011988:	ec f8 00 00 	ld.w	r8,r6[0]
8001198c:	70 09       	ld.w	r9,r8[0x0]
8001198e:	30 38       	mov	r8,3
80011990:	f3 68 0f 7d 	st.b	r9[3965],r8
80011994:	c0 68       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
80011996:	d7 03       	nop
80011998:	c0 48       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8001199a:	d7 03       	nop
8001199c:	c0 28       	rjmp	800119a0 <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8001199e:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
800119a0:	2f fd       	sub	sp,-4
800119a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800119a6:	00 00       	add	r0,r0
800119a8:	80 01       	ld.sh	r1,r0[0x0]
800119aa:	14 94       	mov	r4,r10

800119ac <run_stabilisation>:

task_return_t run_stabilisation() {
800119ac:	eb cd 40 e0 	pushm	r5-r7,lr
800119b0:	1a 97       	mov	r7,sp
800119b2:	20 cd       	sub	sp,48
800119b4:	fe f6 03 b8 	ld.w	r6,pc[952]
800119b8:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
800119ba:	ec f8 00 00 	ld.w	r8,r6[0]
800119be:	70 08       	ld.w	r8,r8[0x0]
800119c0:	f0 f8 0f 80 	ld.w	r8,r8[3968]
800119c4:	58 18       	cp.w	r8,1
800119c6:	c2 d1       	brne	80011a20 <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
800119c8:	ec f8 00 00 	ld.w	r8,r6[0]
800119cc:	70 08       	ld.w	r8,r8[0x0]
800119ce:	f0 c9 f4 04 	sub	r9,r8,-3068
800119d2:	ec f8 00 00 	ld.w	r8,r6[0]
800119d6:	70 08       	ld.w	r8,r8[0x0]
800119d8:	10 9a       	mov	r10,r8
800119da:	ec f8 00 00 	ld.w	r8,r6[0]
800119de:	70 08       	ld.w	r8,r8[0x0]
800119e0:	f0 cb fa 54 	sub	r11,r8,-1452
800119e4:	ec f8 00 00 	ld.w	r8,r6[0]
800119e8:	70 08       	ld.w	r8,r8[0x0]
800119ea:	f0 c8 f5 98 	sub	r8,r8,-2664
800119ee:	10 9c       	mov	r12,r8
800119f0:	f0 16 01 96 	mcall	r6[1624]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
800119f4:	ec f8 00 00 	ld.w	r8,r6[0]
800119f8:	70 08       	ld.w	r8,r8[0x0]
800119fa:	f0 c9 f6 38 	sub	r9,r8,-2504
800119fe:	ec f8 00 00 	ld.w	r8,r6[0]
80011a02:	70 08       	ld.w	r8,r8[0x0]
80011a04:	f0 ca f0 7c 	sub	r10,r8,-3972
80011a08:	ec f8 00 00 	ld.w	r8,r6[0]
80011a0c:	70 08       	ld.w	r8,r8[0x0]
80011a0e:	f0 cb f4 04 	sub	r11,r8,-3068
80011a12:	ec f8 00 00 	ld.w	r8,r6[0]
80011a16:	70 08       	ld.w	r8,r8[0x0]
80011a18:	10 9c       	mov	r12,r8
80011a1a:	f0 16 00 91 	mcall	r6[580]
80011a1e:	c1 c8       	rjmp	80011a56 <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
80011a20:	ec f8 00 00 	ld.w	r8,r6[0]
80011a24:	70 08       	ld.w	r8,r8[0x0]
80011a26:	10 9c       	mov	r12,r8
80011a28:	f0 16 00 90 	mcall	r6[576]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80011a2c:	ec f8 00 00 	ld.w	r8,r6[0]
80011a30:	70 08       	ld.w	r8,r8[0x0]
80011a32:	f0 c9 f6 38 	sub	r9,r8,-2504
80011a36:	ec f8 00 00 	ld.w	r8,r6[0]
80011a3a:	70 08       	ld.w	r8,r8[0x0]
80011a3c:	f0 ca f0 7c 	sub	r10,r8,-3972
80011a40:	ec f8 00 00 	ld.w	r8,r6[0]
80011a44:	70 08       	ld.w	r8,r8[0x0]
80011a46:	f0 cb f4 04 	sub	r11,r8,-3068
80011a4a:	ec f8 00 00 	ld.w	r8,r6[0]
80011a4e:	70 08       	ld.w	r8,r8[0x0]
80011a50:	10 9c       	mov	r12,r8
80011a52:	f0 16 00 91 	mcall	r6[580]
	}

	switch(centralData->mav_mode)
80011a56:	ec f8 00 00 	ld.w	r8,r6[0]
80011a5a:	70 08       	ld.w	r8,r8[0x0]
80011a5c:	f1 38 0f 7c 	ld.ub	r8,r8[3964]
80011a60:	e0 48 00 5c 	cp.w	r8,92
80011a64:	e0 80 01 43 	breq	80011cea <run_stabilisation+0x33e>
80011a68:	e0 89 00 17 	brgt	80011a96 <run_stabilisation+0xea>
80011a6c:	e0 48 00 40 	cp.w	r8,64
80011a70:	e0 80 01 3d 	breq	80011cea <run_stabilisation+0x33e>
80011a74:	e0 89 00 07 	brgt	80011a82 <run_stabilisation+0xd6>
80011a78:	58 08       	cp.w	r8,0
80011a7a:	e0 80 01 38 	breq	80011cea <run_stabilisation+0x33e>
80011a7e:	e0 8f 01 65 	bral	80011d48 <run_stabilisation+0x39c>
80011a82:	e0 48 00 50 	cp.w	r8,80
80011a86:	e0 80 01 32 	breq	80011cea <run_stabilisation+0x33e>
80011a8a:	e0 48 00 58 	cp.w	r8,88
80011a8e:	e0 80 01 2e 	breq	80011cea <run_stabilisation+0x33e>
80011a92:	e0 8f 01 5b 	bral	80011d48 <run_stabilisation+0x39c>
80011a96:	e0 48 00 d0 	cp.w	r8,208
80011a9a:	c5 a0       	breq	80011b4e <run_stabilisation+0x1a2>
80011a9c:	e0 89 00 07 	brgt	80011aaa <run_stabilisation+0xfe>
80011aa0:	e0 48 00 c0 	cp.w	r8,192
80011aa4:	c0 d0       	breq	80011abe <run_stabilisation+0x112>
80011aa6:	e0 8f 01 51 	bral	80011d48 <run_stabilisation+0x39c>
80011aaa:	e0 48 00 d8 	cp.w	r8,216
80011aae:	e0 80 00 92 	breq	80011bd2 <run_stabilisation+0x226>
80011ab2:	e0 48 00 dc 	cp.w	r8,220
80011ab6:	e0 80 00 d4 	breq	80011c5e <run_stabilisation+0x2b2>
80011aba:	e0 8f 01 47 	bral	80011d48 <run_stabilisation+0x39c>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80011abe:	ec f8 00 00 	ld.w	r8,r6[0]
80011ac2:	70 05       	ld.w	r5,r8[0x0]
80011ac4:	ee c8 00 30 	sub	r8,r7,48
80011ac8:	10 9c       	mov	r12,r8
80011aca:	fe b0 fc 0d 	rcall	800112e4 <get_command_from_remote>
80011ace:	ea c8 fe b8 	sub	r8,r5,-328
80011ad2:	ee c9 00 30 	sub	r9,r7,48
80011ad6:	f0 ca 00 00 	sub	r10,r8,0
80011ada:	f2 cb 00 00 	sub	r11,r9,0
80011ade:	76 0c       	ld.w	r12,r11[0x0]
80011ae0:	95 0c       	st.w	r10[0x0],r12
80011ae2:	76 1c       	ld.w	r12,r11[0x4]
80011ae4:	95 1c       	st.w	r10[0x4],r12
80011ae6:	76 2c       	ld.w	r12,r11[0x8]
80011ae8:	95 2c       	st.w	r10[0x8],r12
80011aea:	76 3b       	ld.w	r11,r11[0xc]
80011aec:	95 3b       	st.w	r10[0xc],r11
80011aee:	f0 ca ff f0 	sub	r10,r8,-16
80011af2:	f2 cb ff f0 	sub	r11,r9,-16
80011af6:	76 0c       	ld.w	r12,r11[0x0]
80011af8:	95 0c       	st.w	r10[0x0],r12
80011afa:	76 1c       	ld.w	r12,r11[0x4]
80011afc:	95 1c       	st.w	r10[0x4],r12
80011afe:	76 2c       	ld.w	r12,r11[0x8]
80011b00:	95 2c       	st.w	r10[0x8],r12
80011b02:	76 3b       	ld.w	r11,r11[0xc]
80011b04:	95 3b       	st.w	r10[0xc],r11
80011b06:	f2 ea 00 20 	ld.d	r10,r9[32]
80011b0a:	f0 eb 00 20 	st.d	r8[32],r10
80011b0e:	72 a9       	ld.w	r9,r9[0x28]
80011b10:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
80011b12:	ec f8 00 00 	ld.w	r8,r6[0]
80011b16:	70 08       	ld.w	r8,r8[0x0]
80011b18:	30 09       	mov	r9,0
80011b1a:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = RATE_COMMAND_MODE;
80011b1e:	ec f8 00 00 	ld.w	r8,r6[0]
80011b22:	70 08       	ld.w	r8,r8[0x0]
80011b24:	30 29       	mov	r9,2
80011b26:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_hybrid(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011b2a:	ec f8 00 00 	ld.w	r8,r6[0]
80011b2e:	70 08       	ld.w	r8,r8[0x0]
80011b30:	f0 ca fe b8 	sub	r10,r8,-328
80011b34:	ec f8 00 00 	ld.w	r8,r6[0]
80011b38:	70 08       	ld.w	r8,r8[0x0]
80011b3a:	f0 c9 f4 04 	sub	r9,r8,-3068
80011b3e:	ec f8 00 00 	ld.w	r8,r6[0]
80011b42:	70 08       	ld.w	r8,r8[0x0]
80011b44:	12 9b       	mov	r11,r9
80011b46:	10 9c       	mov	r12,r8
80011b48:	f0 16 00 84 	mcall	r6[528]
			break;
80011b4c:	cf e8       	rjmp	80011d48 <run_stabilisation+0x39c>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
80011b4e:	ec f8 00 00 	ld.w	r8,r6[0]
80011b52:	70 05       	ld.w	r5,r8[0x0]
80011b54:	ee c8 00 30 	sub	r8,r7,48
80011b58:	10 9c       	mov	r12,r8
80011b5a:	fe b0 fb c5 	rcall	800112e4 <get_command_from_remote>
80011b5e:	ea c8 fe b8 	sub	r8,r5,-328
80011b62:	ee c9 00 30 	sub	r9,r7,48
80011b66:	f0 ca 00 00 	sub	r10,r8,0
80011b6a:	f2 cb 00 00 	sub	r11,r9,0
80011b6e:	76 0c       	ld.w	r12,r11[0x0]
80011b70:	95 0c       	st.w	r10[0x0],r12
80011b72:	76 1c       	ld.w	r12,r11[0x4]
80011b74:	95 1c       	st.w	r10[0x4],r12
80011b76:	76 2c       	ld.w	r12,r11[0x8]
80011b78:	95 2c       	st.w	r10[0x8],r12
80011b7a:	76 3b       	ld.w	r11,r11[0xc]
80011b7c:	95 3b       	st.w	r10[0xc],r11
80011b7e:	f0 ca ff f0 	sub	r10,r8,-16
80011b82:	f2 cb ff f0 	sub	r11,r9,-16
80011b86:	76 0c       	ld.w	r12,r11[0x0]
80011b88:	95 0c       	st.w	r10[0x0],r12
80011b8a:	76 1c       	ld.w	r12,r11[0x4]
80011b8c:	95 1c       	st.w	r10[0x4],r12
80011b8e:	76 2c       	ld.w	r12,r11[0x8]
80011b90:	95 2c       	st.w	r10[0x8],r12
80011b92:	76 3b       	ld.w	r11,r11[0xc]
80011b94:	95 3b       	st.w	r10[0xc],r11
80011b96:	f2 ea 00 20 	ld.d	r10,r9[32]
80011b9a:	f0 eb 00 20 	st.d	r8[32],r10
80011b9e:	72 a9       	ld.w	r9,r9[0x28]
80011ba0:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011ba2:	ec f8 00 00 	ld.w	r8,r6[0]
80011ba6:	70 08       	ld.w	r8,r8[0x0]
80011ba8:	30 19       	mov	r9,1
80011baa:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_hybrid(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011bae:	ec f8 00 00 	ld.w	r8,r6[0]
80011bb2:	70 08       	ld.w	r8,r8[0x0]
80011bb4:	f0 ca fe b8 	sub	r10,r8,-328
80011bb8:	ec f8 00 00 	ld.w	r8,r6[0]
80011bbc:	70 08       	ld.w	r8,r8[0x0]
80011bbe:	f0 c9 f4 04 	sub	r9,r8,-3068
80011bc2:	ec f8 00 00 	ld.w	r8,r6[0]
80011bc6:	70 08       	ld.w	r8,r8[0x0]
80011bc8:	12 9b       	mov	r11,r9
80011bca:	10 9c       	mov	r12,r8
80011bcc:	f0 16 00 84 	mcall	r6[528]
			
			break;
80011bd0:	cb c8       	rjmp	80011d48 <run_stabilisation+0x39c>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
80011bd2:	ec f8 00 00 	ld.w	r8,r6[0]
80011bd6:	70 08       	ld.w	r8,r8[0x0]
80011bd8:	ec f9 00 00 	ld.w	r9,r6[0]
80011bdc:	72 09       	ld.w	r9,r9[0x0]
80011bde:	f0 c8 fe b8 	sub	r8,r8,-328
80011be2:	f2 c9 fe 8c 	sub	r9,r9,-372
80011be6:	f0 ca 00 00 	sub	r10,r8,0
80011bea:	f2 cb 00 00 	sub	r11,r9,0
80011bee:	76 0c       	ld.w	r12,r11[0x0]
80011bf0:	95 0c       	st.w	r10[0x0],r12
80011bf2:	76 1c       	ld.w	r12,r11[0x4]
80011bf4:	95 1c       	st.w	r10[0x4],r12
80011bf6:	76 2c       	ld.w	r12,r11[0x8]
80011bf8:	95 2c       	st.w	r10[0x8],r12
80011bfa:	76 3b       	ld.w	r11,r11[0xc]
80011bfc:	95 3b       	st.w	r10[0xc],r11
80011bfe:	f0 ca ff f0 	sub	r10,r8,-16
80011c02:	f2 cb ff f0 	sub	r11,r9,-16
80011c06:	76 0c       	ld.w	r12,r11[0x0]
80011c08:	95 0c       	st.w	r10[0x0],r12
80011c0a:	76 1c       	ld.w	r12,r11[0x4]
80011c0c:	95 1c       	st.w	r10[0x4],r12
80011c0e:	76 2c       	ld.w	r12,r11[0x8]
80011c10:	95 2c       	st.w	r10[0x8],r12
80011c12:	76 3b       	ld.w	r11,r11[0xc]
80011c14:	95 3b       	st.w	r10[0xc],r11
80011c16:	f2 ea 00 20 	ld.d	r10,r9[32]
80011c1a:	f0 eb 00 20 	st.d	r8[32],r10
80011c1e:	72 a9       	ld.w	r9,r9[0x28]
80011c20:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80011c22:	ec f8 00 00 	ld.w	r8,r6[0]
80011c26:	70 08       	ld.w	r8,r8[0x0]
80011c28:	30 09       	mov	r9,0
80011c2a:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80011c2e:	ec f8 00 00 	ld.w	r8,r6[0]
80011c32:	70 08       	ld.w	r8,r8[0x0]
80011c34:	30 19       	mov	r9,1
80011c36:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_hybrid(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011c3a:	ec f8 00 00 	ld.w	r8,r6[0]
80011c3e:	70 08       	ld.w	r8,r8[0x0]
80011c40:	f0 ca fe b8 	sub	r10,r8,-328
80011c44:	ec f8 00 00 	ld.w	r8,r6[0]
80011c48:	70 08       	ld.w	r8,r8[0x0]
80011c4a:	f0 c9 f4 04 	sub	r9,r8,-3068
80011c4e:	ec f8 00 00 	ld.w	r8,r6[0]
80011c52:	70 08       	ld.w	r8,r8[0x0]
80011c54:	12 9b       	mov	r11,r9
80011c56:	10 9c       	mov	r12,r8
80011c58:	f0 16 00 84 	mcall	r6[528]
			break;
80011c5c:	c7 68       	rjmp	80011d48 <run_stabilisation+0x39c>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80011c5e:	ec f8 00 00 	ld.w	r8,r6[0]
80011c62:	70 08       	ld.w	r8,r8[0x0]
80011c64:	ec f9 00 00 	ld.w	r9,r6[0]
80011c68:	72 09       	ld.w	r9,r9[0x0]
80011c6a:	f0 c8 fe b8 	sub	r8,r8,-328
80011c6e:	f2 c9 fe 8c 	sub	r9,r9,-372
80011c72:	f0 ca 00 00 	sub	r10,r8,0
80011c76:	f2 cb 00 00 	sub	r11,r9,0
80011c7a:	76 0c       	ld.w	r12,r11[0x0]
80011c7c:	95 0c       	st.w	r10[0x0],r12
80011c7e:	76 1c       	ld.w	r12,r11[0x4]
80011c80:	95 1c       	st.w	r10[0x4],r12
80011c82:	76 2c       	ld.w	r12,r11[0x8]
80011c84:	95 2c       	st.w	r10[0x8],r12
80011c86:	76 3b       	ld.w	r11,r11[0xc]
80011c88:	95 3b       	st.w	r10[0xc],r11
80011c8a:	f0 ca ff f0 	sub	r10,r8,-16
80011c8e:	f2 cb ff f0 	sub	r11,r9,-16
80011c92:	76 0c       	ld.w	r12,r11[0x0]
80011c94:	95 0c       	st.w	r10[0x0],r12
80011c96:	76 1c       	ld.w	r12,r11[0x4]
80011c98:	95 1c       	st.w	r10[0x4],r12
80011c9a:	76 2c       	ld.w	r12,r11[0x8]
80011c9c:	95 2c       	st.w	r10[0x8],r12
80011c9e:	76 3b       	ld.w	r11,r11[0xc]
80011ca0:	95 3b       	st.w	r10[0xc],r11
80011ca2:	f2 ea 00 20 	ld.d	r10,r9[32]
80011ca6:	f0 eb 00 20 	st.d	r8[32],r10
80011caa:	72 a9       	ld.w	r9,r9[0x28]
80011cac:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
80011cae:	ec f8 00 00 	ld.w	r8,r6[0]
80011cb2:	70 08       	ld.w	r8,r8[0x0]
80011cb4:	30 09       	mov	r9,0
80011cb6:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
80011cba:	ec f8 00 00 	ld.w	r8,r6[0]
80011cbe:	70 08       	ld.w	r8,r8[0x0]
80011cc0:	30 29       	mov	r9,2
80011cc2:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_hybrid(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011cc6:	ec f8 00 00 	ld.w	r8,r6[0]
80011cca:	70 08       	ld.w	r8,r8[0x0]
80011ccc:	f0 ca fe b8 	sub	r10,r8,-328
80011cd0:	ec f8 00 00 	ld.w	r8,r6[0]
80011cd4:	70 08       	ld.w	r8,r8[0x0]
80011cd6:	f0 c9 f4 04 	sub	r9,r8,-3068
80011cda:	ec f8 00 00 	ld.w	r8,r6[0]
80011cde:	70 08       	ld.w	r8,r8[0x0]
80011ce0:	12 9b       	mov	r11,r9
80011ce2:	10 9c       	mov	r12,r8
80011ce4:	f0 16 00 84 	mcall	r6[528]
			break;
80011ce8:	c3 08       	rjmp	80011d48 <run_stabilisation+0x39c>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
80011cea:	ec f8 00 00 	ld.w	r8,r6[0]
80011cee:	70 08       	ld.w	r8,r8[0x0]
80011cf0:	30 09       	mov	r9,0
80011cf2:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80011cf6:	30 08       	mov	r8,0
80011cf8:	ef 48 ff fc 	st.w	r7[-4],r8
80011cfc:	c2 18       	rjmp	80011d3e <run_stabilisation+0x392>
				centralData->servos[i]=servo_failsafe[i];
80011cfe:	ec f8 00 00 	ld.w	r8,r6[0]
80011d02:	70 0a       	ld.w	r10,r8[0x0]
80011d04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011d08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011d0c:	a5 68       	lsl	r8,0x4
80011d0e:	f4 08 00 08 	add	r8,r10,r8
80011d12:	f0 c8 fa 54 	sub	r8,r8,-1452
80011d16:	ec fa 08 e8 	ld.w	r10,r6[2280]
80011d1a:	a5 69       	lsl	r9,0x4
80011d1c:	f4 09 00 09 	add	r9,r10,r9
80011d20:	20 08       	sub	r8,0
80011d22:	20 09       	sub	r9,0
80011d24:	72 0a       	ld.w	r10,r9[0x0]
80011d26:	91 0a       	st.w	r8[0x0],r10
80011d28:	72 1a       	ld.w	r10,r9[0x4]
80011d2a:	91 1a       	st.w	r8[0x4],r10
80011d2c:	72 2a       	ld.w	r10,r9[0x8]
80011d2e:	91 2a       	st.w	r8[0x8],r10
80011d30:	72 39       	ld.w	r9,r9[0xc]
80011d32:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80011d34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011d38:	2f f8       	sub	r8,-1
80011d3a:	ef 48 ff fc 	st.w	r7[-4],r8
80011d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011d42:	58 78       	cp.w	r8,7
80011d44:	fe 9a ff dd 	brle	80011cfe <run_stabilisation+0x352>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
80011d48:	ec f8 00 00 	ld.w	r8,r6[0]
80011d4c:	70 08       	ld.w	r8,r8[0x0]
80011d4e:	f0 f8 0f 80 	ld.w	r8,r8[3968]
80011d52:	58 18       	cp.w	r8,1
80011d54:	c0 90       	breq	80011d66 <run_stabilisation+0x3ba>
		set_servos(&(centralData->servos));
80011d56:	ec f8 00 00 	ld.w	r8,r6[0]
80011d5a:	70 08       	ld.w	r8,r8[0x0]
80011d5c:	f0 c8 fa 54 	sub	r8,r8,-1452
80011d60:	10 9c       	mov	r12,r8
80011d62:	f0 16 00 a4 	mcall	r6[656]
	}
		

}
80011d66:	2f 4d       	sub	sp,-48
80011d68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011d6c:	80 01       	ld.sh	r1,r0[0x0]
80011d6e:	18 3c       	cp.w	r12,r12

80011d70 <gps_task>:

task_return_t gps_task() {
80011d70:	eb cd 40 c0 	pushm	r6-r7,lr
80011d74:	1a 97       	mov	r7,sp
80011d76:	20 1d       	sub	sp,4
80011d78:	49 16       	lddpc	r6,80011dbc <gps_task+0x4c>
80011d7a:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80011d7c:	f0 16 00 0e 	mcall	r6[56]
80011d80:	18 98       	mov	r8,r12
80011d82:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
80011d86:	ec f8 00 00 	ld.w	r8,r6[0]
80011d8a:	70 08       	ld.w	r8,r8[0x0]
80011d8c:	f0 f8 0f 80 	ld.w	r8,r8[3968]
80011d90:	58 18       	cp.w	r8,1
80011d92:	c1 01       	brne	80011db2 <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80011d94:	ec f8 00 00 	ld.w	r8,r6[0]
80011d98:	70 08       	ld.w	r8,r8[0x0]
80011d9a:	f0 c9 f6 38 	sub	r9,r8,-2504
80011d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80011da2:	70 08       	ld.w	r8,r8[0x0]
80011da4:	f0 c8 f5 98 	sub	r8,r8,-2664
80011da8:	12 9b       	mov	r11,r9
80011daa:	10 9c       	mov	r12,r8
80011dac:	f0 16 01 44 	mcall	r6[1296]
80011db0:	c0 38       	rjmp	80011db6 <gps_task+0x46>
	} else {
		gps_update();
80011db2:	f0 16 01 f8 	mcall	r6[2016]
	}
}
80011db6:	2f fd       	sub	sp,-4
80011db8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011dbc:	80 01       	ld.sh	r1,r0[0x0]
80011dbe:	1b fe       	ld.ub	lr,sp[0x7]

80011dc0 <run_estimator>:

task_return_t run_estimator()
{
80011dc0:	eb cd 40 c0 	pushm	r6-r7,lr
80011dc4:	1a 97       	mov	r7,sp
80011dc6:	48 46       	lddpc	r6,80011dd4 <run_estimator+0x14>
80011dc8:	1e 26       	rsub	r6,pc
	estimator_loop();
80011dca:	f0 16 01 60 	mcall	r6[1408]
}
80011dce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011dd2:	00 00       	add	r0,r0
80011dd4:	80 01       	ld.sh	r1,r0[0x0]
80011dd6:	1c 4c       	or	r12,lr

80011dd8 <run_navigation_task>:

task_return_t run_navigation_task()
{
80011dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80011ddc:	1a 97       	mov	r7,sp
80011dde:	20 1d       	sub	sp,4
80011de0:	fe f6 02 20 	ld.w	r6,pc[544]
80011de4:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
80011de6:	ec f8 00 00 	ld.w	r8,r6[0]
80011dea:	70 08       	ld.w	r8,r8[0x0]
80011dec:	f1 38 0f 7d 	ld.ub	r8,r8[3965]
80011df0:	58 48       	cp.w	r8,4
80011df2:	c0 50       	breq	80011dfc <run_navigation_task+0x24>
80011df4:	58 58       	cp.w	r8,5
80011df6:	e0 80 00 b5 	breq	80011f60 <run_navigation_task+0x188>
80011dfa:	cf f8       	rjmp	80011ff8 <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
80011dfc:	ec f8 00 00 	ld.w	r8,r6[0]
80011e00:	70 08       	ld.w	r8,r8[0x0]
80011e02:	f1 38 0f 7c 	ld.ub	r8,r8[3964]
80011e06:	e0 48 00 d8 	cp.w	r8,216
80011e0a:	c7 40       	breq	80011ef2 <run_navigation_task+0x11a>
80011e0c:	e0 48 00 dc 	cp.w	r8,220
80011e10:	e0 81 00 f1 	brne	80011ff2 <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80011e14:	ec f8 00 00 	ld.w	r8,r6[0]
80011e18:	70 08       	ld.w	r8,r8[0x0]
80011e1a:	f1 38 0f 74 	ld.ub	r8,r8[3956]
80011e1e:	58 08       	cp.w	r8,0
80011e20:	c3 10       	breq	80011e82 <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80011e22:	ec f8 00 00 	ld.w	r8,r6[0]
80011e26:	70 08       	ld.w	r8,r8[0x0]
80011e28:	20 cd       	sub	sp,48
80011e2a:	1a 99       	mov	r9,sp
80011e2c:	12 9b       	mov	r11,r9
80011e2e:	f0 ca f1 20 	sub	r10,r8,-3808
80011e32:	f6 c8 00 00 	sub	r8,r11,0
80011e36:	f4 c9 00 00 	sub	r9,r10,0
80011e3a:	72 0c       	ld.w	r12,r9[0x0]
80011e3c:	91 0c       	st.w	r8[0x0],r12
80011e3e:	72 1c       	ld.w	r12,r9[0x4]
80011e40:	91 1c       	st.w	r8[0x4],r12
80011e42:	72 2c       	ld.w	r12,r9[0x8]
80011e44:	91 2c       	st.w	r8[0x8],r12
80011e46:	72 39       	ld.w	r9,r9[0xc]
80011e48:	91 39       	st.w	r8[0xc],r9
80011e4a:	f6 c8 ff f0 	sub	r8,r11,-16
80011e4e:	f4 c9 ff f0 	sub	r9,r10,-16
80011e52:	72 0c       	ld.w	r12,r9[0x0]
80011e54:	91 0c       	st.w	r8[0x0],r12
80011e56:	72 1c       	ld.w	r12,r9[0x4]
80011e58:	91 1c       	st.w	r8[0x4],r12
80011e5a:	72 2c       	ld.w	r12,r9[0x8]
80011e5c:	91 2c       	st.w	r8[0x8],r12
80011e5e:	72 39       	ld.w	r9,r9[0xc]
80011e60:	91 39       	st.w	r8[0xc],r9
80011e62:	f6 c8 ff e0 	sub	r8,r11,-32
80011e66:	f4 c9 ff e0 	sub	r9,r10,-32
80011e6a:	72 0a       	ld.w	r10,r9[0x0]
80011e6c:	91 0a       	st.w	r8[0x0],r10
80011e6e:	72 1a       	ld.w	r10,r9[0x4]
80011e70:	91 1a       	st.w	r8[0x4],r10
80011e72:	72 2a       	ld.w	r10,r9[0x8]
80011e74:	91 2a       	st.w	r8[0x8],r10
80011e76:	72 39       	ld.w	r9,r9[0xc]
80011e78:	91 39       	st.w	r8[0xc],r9
80011e7a:	f0 16 00 83 	mcall	r6[524]
80011e7e:	2f 4d       	sub	sp,-48
80011e80:	c3 78       	rjmp	80011eee <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80011e82:	ec f8 00 00 	ld.w	r8,r6[0]
80011e86:	70 08       	ld.w	r8,r8[0x0]
80011e88:	f1 38 0f 77 	ld.ub	r8,r8[3959]
80011e8c:	58 08       	cp.w	r8,0
80011e8e:	c3 00       	breq	80011eee <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80011e90:	ec f8 00 00 	ld.w	r8,r6[0]
80011e94:	70 08       	ld.w	r8,r8[0x0]
80011e96:	20 cd       	sub	sp,48
80011e98:	1a 99       	mov	r9,sp
80011e9a:	12 9b       	mov	r11,r9
80011e9c:	f0 ca f0 f0 	sub	r10,r8,-3856
80011ea0:	f6 c8 00 00 	sub	r8,r11,0
80011ea4:	f4 c9 00 00 	sub	r9,r10,0
80011ea8:	72 0c       	ld.w	r12,r9[0x0]
80011eaa:	91 0c       	st.w	r8[0x0],r12
80011eac:	72 1c       	ld.w	r12,r9[0x4]
80011eae:	91 1c       	st.w	r8[0x4],r12
80011eb0:	72 2c       	ld.w	r12,r9[0x8]
80011eb2:	91 2c       	st.w	r8[0x8],r12
80011eb4:	72 39       	ld.w	r9,r9[0xc]
80011eb6:	91 39       	st.w	r8[0xc],r9
80011eb8:	f6 c8 ff f0 	sub	r8,r11,-16
80011ebc:	f4 c9 ff f0 	sub	r9,r10,-16
80011ec0:	72 0c       	ld.w	r12,r9[0x0]
80011ec2:	91 0c       	st.w	r8[0x0],r12
80011ec4:	72 1c       	ld.w	r12,r9[0x4]
80011ec6:	91 1c       	st.w	r8[0x4],r12
80011ec8:	72 2c       	ld.w	r12,r9[0x8]
80011eca:	91 2c       	st.w	r8[0x8],r12
80011ecc:	72 39       	ld.w	r9,r9[0xc]
80011ece:	91 39       	st.w	r8[0xc],r9
80011ed0:	f6 c8 ff e0 	sub	r8,r11,-32
80011ed4:	f4 c9 ff e0 	sub	r9,r10,-32
80011ed8:	72 0a       	ld.w	r10,r9[0x0]
80011eda:	91 0a       	st.w	r8[0x0],r10
80011edc:	72 1a       	ld.w	r10,r9[0x4]
80011ede:	91 1a       	st.w	r8[0x4],r10
80011ee0:	72 2a       	ld.w	r10,r9[0x8]
80011ee2:	91 2a       	st.w	r8[0x8],r10
80011ee4:	72 39       	ld.w	r9,r9[0xc]
80011ee6:	91 39       	st.w	r8[0xc],r9
80011ee8:	f0 16 00 83 	mcall	r6[524]
80011eec:	2f 4d       	sub	sp,-48
						}
						break;
80011eee:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
80011ef0:	c8 48       	rjmp	80011ff8 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
80011ef2:	ec f8 00 00 	ld.w	r8,r6[0]
80011ef6:	70 08       	ld.w	r8,r8[0x0]
80011ef8:	f1 38 0f 77 	ld.ub	r8,r8[3959]
80011efc:	58 08       	cp.w	r8,0
80011efe:	c7 c0       	breq	80011ff6 <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80011f00:	ec f8 00 00 	ld.w	r8,r6[0]
80011f04:	70 08       	ld.w	r8,r8[0x0]
80011f06:	20 cd       	sub	sp,48
80011f08:	1a 99       	mov	r9,sp
80011f0a:	12 9b       	mov	r11,r9
80011f0c:	f0 ca f0 f0 	sub	r10,r8,-3856
80011f10:	f6 c8 00 00 	sub	r8,r11,0
80011f14:	f4 c9 00 00 	sub	r9,r10,0
80011f18:	72 0c       	ld.w	r12,r9[0x0]
80011f1a:	91 0c       	st.w	r8[0x0],r12
80011f1c:	72 1c       	ld.w	r12,r9[0x4]
80011f1e:	91 1c       	st.w	r8[0x4],r12
80011f20:	72 2c       	ld.w	r12,r9[0x8]
80011f22:	91 2c       	st.w	r8[0x8],r12
80011f24:	72 39       	ld.w	r9,r9[0xc]
80011f26:	91 39       	st.w	r8[0xc],r9
80011f28:	f6 c8 ff f0 	sub	r8,r11,-16
80011f2c:	f4 c9 ff f0 	sub	r9,r10,-16
80011f30:	72 0c       	ld.w	r12,r9[0x0]
80011f32:	91 0c       	st.w	r8[0x0],r12
80011f34:	72 1c       	ld.w	r12,r9[0x4]
80011f36:	91 1c       	st.w	r8[0x4],r12
80011f38:	72 2c       	ld.w	r12,r9[0x8]
80011f3a:	91 2c       	st.w	r8[0x8],r12
80011f3c:	72 39       	ld.w	r9,r9[0xc]
80011f3e:	91 39       	st.w	r8[0xc],r9
80011f40:	f6 c8 ff e0 	sub	r8,r11,-32
80011f44:	f4 c9 ff e0 	sub	r9,r10,-32
80011f48:	72 0a       	ld.w	r10,r9[0x0]
80011f4a:	91 0a       	st.w	r8[0x0],r10
80011f4c:	72 1a       	ld.w	r10,r9[0x4]
80011f4e:	91 1a       	st.w	r8[0x4],r10
80011f50:	72 2a       	ld.w	r10,r9[0x8]
80011f52:	91 2a       	st.w	r8[0x8],r10
80011f54:	72 39       	ld.w	r9,r9[0xc]
80011f56:	91 39       	st.w	r8[0xc],r9
80011f58:	f0 16 00 83 	mcall	r6[524]
80011f5c:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80011f5e:	c4 d8       	rjmp	80011ff8 <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80011f60:	ec f8 00 00 	ld.w	r8,r6[0]
80011f64:	70 08       	ld.w	r8,r8[0x0]
80011f66:	f1 39 0f 7c 	ld.ub	r9,r8[3964]
80011f6a:	3d 88       	mov	r8,-40
80011f6c:	f0 09 18 00 	cp.b	r9,r8
80011f70:	c0 a0       	breq	80011f84 <run_navigation_task+0x1ac>
80011f72:	ec f8 00 00 	ld.w	r8,r6[0]
80011f76:	70 08       	ld.w	r8,r8[0x0]
80011f78:	f1 39 0f 7c 	ld.ub	r9,r8[3964]
80011f7c:	3d c8       	mov	r8,-36
80011f7e:	f0 09 18 00 	cp.b	r9,r8
80011f82:	c3 b1       	brne	80011ff8 <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80011f84:	ec f8 00 00 	ld.w	r8,r6[0]
80011f88:	70 08       	ld.w	r8,r8[0x0]
80011f8a:	f1 38 0f 79 	ld.ub	r8,r8[3961]
80011f8e:	58 08       	cp.w	r8,0
80011f90:	c3 40       	breq	80011ff8 <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
80011f92:	ec f8 00 00 	ld.w	r8,r6[0]
80011f96:	70 08       	ld.w	r8,r8[0x0]
80011f98:	20 cd       	sub	sp,48
80011f9a:	1a 99       	mov	r9,sp
80011f9c:	12 9b       	mov	r11,r9
80011f9e:	f0 ca f0 c0 	sub	r10,r8,-3904
80011fa2:	f6 c8 00 00 	sub	r8,r11,0
80011fa6:	f4 c9 00 00 	sub	r9,r10,0
80011faa:	72 0c       	ld.w	r12,r9[0x0]
80011fac:	91 0c       	st.w	r8[0x0],r12
80011fae:	72 1c       	ld.w	r12,r9[0x4]
80011fb0:	91 1c       	st.w	r8[0x4],r12
80011fb2:	72 2c       	ld.w	r12,r9[0x8]
80011fb4:	91 2c       	st.w	r8[0x8],r12
80011fb6:	72 39       	ld.w	r9,r9[0xc]
80011fb8:	91 39       	st.w	r8[0xc],r9
80011fba:	f6 c8 ff f0 	sub	r8,r11,-16
80011fbe:	f4 c9 ff f0 	sub	r9,r10,-16
80011fc2:	72 0c       	ld.w	r12,r9[0x0]
80011fc4:	91 0c       	st.w	r8[0x0],r12
80011fc6:	72 1c       	ld.w	r12,r9[0x4]
80011fc8:	91 1c       	st.w	r8[0x4],r12
80011fca:	72 2c       	ld.w	r12,r9[0x8]
80011fcc:	91 2c       	st.w	r8[0x8],r12
80011fce:	72 39       	ld.w	r9,r9[0xc]
80011fd0:	91 39       	st.w	r8[0xc],r9
80011fd2:	f6 c8 ff e0 	sub	r8,r11,-32
80011fd6:	f4 c9 ff e0 	sub	r9,r10,-32
80011fda:	72 0a       	ld.w	r10,r9[0x0]
80011fdc:	91 0a       	st.w	r8[0x0],r10
80011fde:	72 1a       	ld.w	r10,r9[0x4]
80011fe0:	91 1a       	st.w	r8[0x4],r10
80011fe2:	72 2a       	ld.w	r10,r9[0x8]
80011fe4:	91 2a       	st.w	r8[0x8],r10
80011fe6:	72 39       	ld.w	r9,r9[0xc]
80011fe8:	91 39       	st.w	r8[0xc],r9
80011fea:	f0 16 00 83 	mcall	r6[524]
80011fee:	2f 4d       	sub	sp,-48
80011ff0:	c0 48       	rjmp	80011ff8 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
80011ff2:	d7 03       	nop
80011ff4:	c0 28       	rjmp	80011ff8 <run_navigation_task+0x220>
80011ff6:	d7 03       	nop
					}
				}
				break;
		}
	
}
80011ff8:	2f fd       	sub	sp,-4
80011ffa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011ffe:	00 00       	add	r0,r0
80012000:	80 01       	ld.sh	r1,r0[0x0]
80012002:	1c 68       	and	r8,lr

80012004 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
80012004:	eb cd 40 c0 	pushm	r6-r7,lr
80012008:	1a 97       	mov	r7,sp
8001200a:	20 3d       	sub	sp,12
8001200c:	4a d6       	lddpc	r6,800120c0 <run_barometer+0xbc>
8001200e:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
80012010:	f0 16 00 27 	mcall	r6[156]
80012014:	18 98       	mov	r8,r12
80012016:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
8001201a:	f0 16 00 31 	mcall	r6[196]
8001201e:	18 98       	mov	r8,r12
80012020:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80012024:	ec f8 00 00 	ld.w	r8,r6[0]
80012028:	70 08       	ld.w	r8,r8[0x0]
8001202a:	f0 f8 0f a4 	ld.w	r8,r8[4004]
8001202e:	10 9c       	mov	r12,r8
80012030:	f0 16 01 b6 	mcall	r6[1752]
80012034:	18 98       	mov	r8,r12
80012036:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
8001203a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001203e:	f0 f8 0f 80 	ld.w	r8,r8[3968]
80012042:	58 18       	cp.w	r8,1
80012044:	c0 b1       	brne	8001205a <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
80012046:	ec f8 00 00 	ld.w	r8,r6[0]
8001204a:	70 08       	ld.w	r8,r8[0x0]
8001204c:	f0 c8 f5 98 	sub	r8,r8,-2664
80012050:	ee fb ff fc 	ld.w	r11,r7[-4]
80012054:	10 9c       	mov	r12,r8
80012056:	f0 16 01 8f 	mcall	r6[1596]
	} 
	centralData->pressure=*pressure;
8001205a:	ec f8 00 00 	ld.w	r8,r6[0]
8001205e:	70 08       	ld.w	r8,r8[0x0]
80012060:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012064:	f0 c8 f0 7c 	sub	r8,r8,-3972
80012068:	f0 ca 00 00 	sub	r10,r8,0
8001206c:	f2 cb 00 00 	sub	r11,r9,0
80012070:	76 0c       	ld.w	r12,r11[0x0]
80012072:	95 0c       	st.w	r10[0x0],r12
80012074:	76 1c       	ld.w	r12,r11[0x4]
80012076:	95 1c       	st.w	r10[0x4],r12
80012078:	76 2c       	ld.w	r12,r11[0x8]
8001207a:	95 2c       	st.w	r10[0x8],r12
8001207c:	76 3b       	ld.w	r11,r11[0xc]
8001207e:	95 3b       	st.w	r10[0xc],r11
80012080:	f0 ca ff f0 	sub	r10,r8,-16
80012084:	f2 cb ff f0 	sub	r11,r9,-16
80012088:	76 0c       	ld.w	r12,r11[0x0]
8001208a:	95 0c       	st.w	r10[0x0],r12
8001208c:	76 1c       	ld.w	r12,r11[0x4]
8001208e:	95 1c       	st.w	r10[0x4],r12
80012090:	76 2c       	ld.w	r12,r11[0x8]
80012092:	95 2c       	st.w	r10[0x8],r12
80012094:	76 3b       	ld.w	r11,r11[0xc]
80012096:	95 3b       	st.w	r10[0xc],r11
80012098:	f0 ca ff e0 	sub	r10,r8,-32
8001209c:	f2 cb ff e0 	sub	r11,r9,-32
800120a0:	76 0c       	ld.w	r12,r11[0x0]
800120a2:	95 0c       	st.w	r10[0x0],r12
800120a4:	76 1c       	ld.w	r12,r11[0x4]
800120a6:	95 1c       	st.w	r10[0x4],r12
800120a8:	76 2c       	ld.w	r12,r11[0x8]
800120aa:	95 2c       	st.w	r10[0x8],r12
800120ac:	76 3b       	ld.w	r11,r11[0xc]
800120ae:	95 3b       	st.w	r10[0xc],r11
800120b0:	f2 ea 00 30 	ld.d	r10,r9[48]
800120b4:	f0 eb 00 30 	st.d	r8[48],r10
	
}
800120b8:	2f dd       	sub	sp,-12
800120ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120be:	00 00       	add	r0,r0
800120c0:	80 01       	ld.sh	r1,r0[0x0]
800120c2:	1e 92       	mov	r2,pc

800120c4 <create_tasks>:


void create_tasks() {
800120c4:	eb cd 40 c0 	pushm	r6-r7,lr
800120c8:	1a 97       	mov	r7,sp
800120ca:	4a 96       	lddpc	r6,8001216c <create_tasks+0xa8>
800120cc:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800120ce:	ec f8 01 24 	ld.w	r8,r6[292]
800120d2:	10 9c       	mov	r12,r8
800120d4:	f0 16 01 04 	mcall	r6[1040]
	
	centralData = get_central_data();
800120d8:	f0 16 00 31 	mcall	r6[196]
800120dc:	18 99       	mov	r9,r12
800120de:	ec f8 00 00 	ld.w	r8,r6[0]
800120e2:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800120e4:	ec f8 08 58 	ld.w	r8,r6[2136]
800120e8:	ec fc 01 24 	ld.w	r12,r6[292]
800120ec:	30 29       	mov	r9,2
800120ee:	e0 6a 0f a0 	mov	r10,4000
800120f2:	30 0b       	mov	r11,0
800120f4:	f0 16 00 5b 	mcall	r6[364]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800120f8:	ec f8 07 20 	ld.w	r8,r6[1824]
800120fc:	ec fc 01 24 	ld.w	r12,r6[292]
80012100:	30 29       	mov	r9,2
80012102:	e0 6a 3a 98 	mov	r10,15000
80012106:	30 1b       	mov	r11,1
80012108:	f0 16 00 5b 	mcall	r6[364]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
8001210c:	ec f8 01 24 	ld.w	r8,r6[292]
80012110:	30 19       	mov	r9,1
80012112:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
80012116:	ec f8 07 a0 	ld.w	r8,r6[1952]
8001211a:	ec fc 01 24 	ld.w	r12,r6[292]
8001211e:	30 29       	mov	r9,2
80012120:	e0 7a 86 a0 	mov	r10,100000
80012124:	30 2b       	mov	r11,2
80012126:	f0 16 00 5b 	mcall	r6[364]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
8001212a:	ec f8 06 a8 	ld.w	r8,r6[1704]
8001212e:	ec fc 01 24 	ld.w	r12,r6[292]
80012132:	30 29       	mov	r9,2
80012134:	e0 6a 27 10 	mov	r10,10000
80012138:	30 3b       	mov	r11,3
8001213a:	f0 16 00 5b 	mcall	r6[364]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
8001213e:	ec f8 06 f8 	ld.w	r8,r6[1784]
80012142:	ec fc 01 24 	ld.w	r12,r6[292]
80012146:	30 29       	mov	r9,2
80012148:	e2 7a 0d 40 	mov	r10,200000
8001214c:	30 4b       	mov	r11,4
8001214e:	f0 16 00 5b 	mcall	r6[364]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
80012152:	ec f8 03 6c 	ld.w	r8,r6[876]
80012156:	ec fc 01 24 	ld.w	r12,r6[292]
8001215a:	30 29       	mov	r9,2
8001215c:	e0 6a 0f a0 	mov	r10,4000
80012160:	30 5b       	mov	r11,5
80012162:	f0 16 00 5b 	mcall	r6[364]

80012166:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001216a:	00 00       	add	r0,r0
8001216c:	80 01       	ld.sh	r1,r0[0x0]
8001216e:	1f 50       	ld.sh	r0,--pc

80012170 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80012170:	eb cd 40 80 	pushm	r7,lr
80012174:	1a 97       	mov	r7,sp
80012176:	20 3d       	sub	sp,12
80012178:	18 98       	mov	r8,r12
8001217a:	ef 4b ff f4 	st.w	r7[-12],r11
8001217e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80012182:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012186:	90 08       	ld.sh	r8,r8[0x0]
80012188:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001218c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012190:	f3 e8 20 08 	eor	r8,r9,r8
80012194:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80012198:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001219c:	a5 68       	lsl	r8,0x4
8001219e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800121a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121a6:	f3 e8 20 08 	eor	r8,r9,r8
800121aa:	5c 58       	castu.b	r8
800121ac:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800121b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800121b4:	90 08       	ld.sh	r8,r8[0x0]
800121b6:	5c 78       	castu.h	r8
800121b8:	a9 88       	lsr	r8,0x8
800121ba:	5c 88       	casts.h	r8
800121bc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121c4:	a9 68       	lsl	r8,0x8
800121c6:	5c 88       	casts.h	r8
800121c8:	f3 e8 20 08 	eor	r8,r9,r8
800121cc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121d4:	a3 78       	lsl	r8,0x3
800121d6:	5c 88       	casts.h	r8
800121d8:	f3 e8 20 08 	eor	r8,r9,r8
800121dc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121e4:	a5 88       	lsr	r8,0x4
800121e6:	5c 58       	castu.b	r8
800121e8:	f3 e8 20 08 	eor	r8,r9,r8
800121ec:	5c 88       	casts.h	r8
800121ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800121f2:	b2 08       	st.h	r9[0x0],r8
}
800121f4:	2f dd       	sub	sp,-12
800121f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800121fa <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800121fa:	eb cd 40 80 	pushm	r7,lr
800121fe:	1a 97       	mov	r7,sp
80012200:	20 1d       	sub	sp,4
80012202:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80012206:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001220a:	3f f8       	mov	r8,-1
8001220c:	b2 08       	st.h	r9[0x0],r8
}
8001220e:	2f fd       	sub	sp,-4
80012210:	e3 cd 80 80 	ldm	sp++,r7,pc

80012214 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80012214:	eb cd 40 c0 	pushm	r6-r7,lr
80012218:	1a 97       	mov	r7,sp
8001221a:	20 1d       	sub	sp,4
8001221c:	48 96       	lddpc	r6,80012240 <mavlink_get_channel_status+0x2c>
8001221e:	1e 26       	rsub	r6,pc
80012220:	18 98       	mov	r8,r12
80012222:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80012226:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001222a:	f0 09 15 04 	lsl	r9,r8,0x4
8001222e:	ec f8 08 e4 	ld.w	r8,r6[2276]
80012232:	f2 08 00 08 	add	r8,r9,r8
}
80012236:	10 9c       	mov	r12,r8
80012238:	2f fd       	sub	sp,-4
8001223a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001223e:	00 00       	add	r0,r0
80012240:	80 01       	ld.sh	r1,r0[0x0]
80012242:	20 a2       	sub	r2,10

80012244 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80012244:	eb cd 40 c0 	pushm	r6-r7,lr
80012248:	1a 97       	mov	r7,sp
8001224a:	20 1d       	sub	sp,4
8001224c:	48 a6       	lddpc	r6,80012274 <mavlink_get_channel_buffer+0x30>
8001224e:	1e 26       	rsub	r6,pc
80012250:	18 98       	mov	r8,r12
80012252:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
80012256:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001225a:	12 98       	mov	r8,r9
8001225c:	a5 68       	lsl	r8,0x4
8001225e:	12 08       	add	r8,r9
80012260:	a5 68       	lsl	r8,0x4
80012262:	10 99       	mov	r9,r8
80012264:	ec f8 08 e0 	ld.w	r8,r6[2272]
80012268:	f2 08 00 08 	add	r8,r9,r8
}
8001226c:	10 9c       	mov	r12,r8
8001226e:	2f fd       	sub	sp,-4
80012270:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012274:	80 01       	ld.sh	r1,r0[0x0]
80012276:	20 d2       	sub	r2,13

80012278 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80012278:	eb cd 40 c0 	pushm	r6-r7,lr
8001227c:	1a 97       	mov	r7,sp
8001227e:	20 1d       	sub	sp,4
80012280:	48 66       	lddpc	r6,80012298 <mavlink_start_checksum+0x20>
80012282:	1e 26       	rsub	r6,pc
80012284:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80012288:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001228c:	10 9c       	mov	r12,r8
8001228e:	cb 6f       	rcall	800121fa <crc_init>
}
80012290:	2f fd       	sub	sp,-4
80012292:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012296:	00 00       	add	r0,r0
80012298:	80 01       	ld.sh	r1,r0[0x0]
8001229a:	21 06       	sub	r6,16

8001229c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
8001229c:	eb cd 40 c0 	pushm	r6-r7,lr
800122a0:	1a 97       	mov	r7,sp
800122a2:	20 2d       	sub	sp,8
800122a4:	48 96       	lddpc	r6,800122c8 <mavlink_update_checksum+0x2c>
800122a6:	1e 26       	rsub	r6,pc
800122a8:	ef 4c ff fc 	st.w	r7[-4],r12
800122ac:	16 98       	mov	r8,r11
800122ae:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
800122b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800122b6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800122ba:	12 9b       	mov	r11,r9
800122bc:	10 9c       	mov	r12,r8
800122be:	c5 9f       	rcall	80012170 <crc_accumulate>
}
800122c0:	2f ed       	sub	sp,-8
800122c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800122c6:	00 00       	add	r0,r0
800122c8:	80 01       	ld.sh	r1,r0[0x0]
800122ca:	21 2a       	sub	r10,18

800122cc <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
800122cc:	eb cd 40 c0 	pushm	r6-r7,lr
800122d0:	1a 97       	mov	r7,sp
800122d2:	20 7d       	sub	sp,28
800122d4:	fe f6 03 b8 	ld.w	r6,pc[952]
800122d8:	1e 26       	rsub	r6,pc
800122da:	16 98       	mov	r8,r11
800122dc:	ef 4a ff e8 	st.w	r7[-24],r10
800122e0:	ef 49 ff e4 	st.w	r7[-28],r9
800122e4:	18 99       	mov	r9,r12
800122e6:	ef 69 ff f0 	st.b	r7[-16],r9
800122ea:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
800122ee:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800122f2:	10 9c       	mov	r12,r8
800122f4:	ca 8f       	rcall	80012244 <mavlink_get_channel_buffer>
800122f6:	18 98       	mov	r8,r12
800122f8:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
800122fc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80012300:	10 9c       	mov	r12,r8
80012302:	c8 9f       	rcall	80012214 <mavlink_get_channel_status>
80012304:	18 98       	mov	r8,r12
80012306:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
8001230a:	30 08       	mov	r8,0
8001230c:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
80012310:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012314:	30 08       	mov	r8,0
80012316:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
80012318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001231c:	70 18       	ld.w	r8,r8[0x4]
8001231e:	58 98       	cp.w	r8,9
80012320:	e0 8b 01 70 	brhi	80012600 <mavlink_parse_char+0x334>
80012324:	fe c9 ff f8 	sub	r9,pc,-8
80012328:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001232c:	e0 8f 00 14 	bral	80012354 <mavlink_parse_char+0x88>
80012330:	e0 8f 00 12 	bral	80012354 <mavlink_parse_char+0x88>
80012334:	e0 8f 00 28 	bral	80012384 <mavlink_parse_char+0xb8>
80012338:	e0 8f 00 69 	bral	8001240a <mavlink_parse_char+0x13e>
8001233c:	e0 8f 00 57 	bral	800123ea <mavlink_parse_char+0x11e>
80012340:	e0 8f 00 75 	bral	8001242a <mavlink_parse_char+0x15e>
80012344:	e0 8f 00 83 	bral	8001244a <mavlink_parse_char+0x17e>
80012348:	e0 8f 00 9b 	bral	8001247e <mavlink_parse_char+0x1b2>
8001234c:	e0 8f 00 c2 	bral	800124d0 <mavlink_parse_char+0x204>
80012350:	e0 8f 01 08 	bral	80012560 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80012354:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012358:	3f e8       	mov	r8,-2
8001235a:	f0 09 18 00 	cp.b	r9,r8
8001235e:	e0 81 01 4c 	brne	800125f6 <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80012362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012366:	30 29       	mov	r9,2
80012368:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
8001236a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001236e:	30 08       	mov	r8,0
80012370:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
80012372:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012376:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001237a:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
8001237c:	ee fc ff f4 	ld.w	r12,r7[-12]
80012380:	c7 cf       	rcall	80012278 <mavlink_start_checksum>
		}
		break;
80012382:	c3 f9       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80012384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012388:	11 88       	ld.ub	r8,r8[0x0]
8001238a:	58 08       	cp.w	r8,0
8001238c:	c1 a0       	breq	800123c0 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
8001238e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012392:	11 98       	ld.ub	r8,r8[0x1]
80012394:	2f f8       	sub	r8,-1
80012396:	5c 58       	castu.b	r8
80012398:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001239c:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
8001239e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800123a2:	11 a8       	ld.ub	r8,r8[0x2]
800123a4:	2f f8       	sub	r8,-1
800123a6:	5c 58       	castu.b	r8
800123a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800123ac:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
800123ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800123b2:	30 08       	mov	r8,0
800123b4:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800123b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800123ba:	30 19       	mov	r9,1
800123bc:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
800123be:	c2 19       	rjmp	80012600 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
800123c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800123c4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800123c8:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
800123ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800123ce:	30 08       	mov	r8,0
800123d0:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
800123d4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800123d8:	10 9b       	mov	r11,r8
800123da:	ee fc ff f4 	ld.w	r12,r7[-12]
800123de:	c5 ff       	rcall	8001229c <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
800123e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800123e4:	30 49       	mov	r9,4
800123e6:	91 19       	st.w	r8[0x4],r9
		}
		break;
800123e8:	c0 c9       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
800123ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800123ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800123f2:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
800123f4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800123f8:	10 9b       	mov	r11,r8
800123fa:	ee fc ff f4 	ld.w	r12,r7[-12]
800123fe:	c4 ff       	rcall	8001229c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80012400:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012404:	30 39       	mov	r9,3
80012406:	91 19       	st.w	r8[0x4],r9
		break;
80012408:	cf c8       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
8001240a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001240e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012412:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80012414:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012418:	10 9b       	mov	r11,r8
8001241a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001241e:	c3 ff       	rcall	8001229c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
80012420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012424:	30 59       	mov	r9,5
80012426:	91 19       	st.w	r8[0x4],r9
		break;
80012428:	ce c8       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
8001242a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001242e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012432:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80012434:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012438:	10 9b       	mov	r11,r8
8001243a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001243e:	c2 ff       	rcall	8001229c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
80012440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012444:	30 69       	mov	r9,6
80012446:	91 19       	st.w	r8[0x4],r9
		break;
80012448:	cd c8       	rjmp	80012600 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
8001244a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001244e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012452:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80012454:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012458:	10 9b       	mov	r11,r8
8001245a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001245e:	c1 ff       	rcall	8001229c <mavlink_update_checksum>
		if (rxmsg->len == 0)
80012460:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012464:	11 b8       	ld.ub	r8,r8[0x3]
80012466:	58 08       	cp.w	r8,0
80012468:	c0 61       	brne	80012474 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
8001246a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001246e:	30 89       	mov	r9,8
80012470:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
80012472:	cc 78       	rjmp	80012600 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80012474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012478:	30 79       	mov	r9,7
8001247a:	91 19       	st.w	r8[0x4],r9
		}
		break;
8001247c:	cc 28       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
8001247e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012482:	2f 88       	sub	r8,-8
80012484:	10 9a       	mov	r10,r8
80012486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001248a:	f1 38 00 08 	ld.ub	r8,r8[8]
8001248e:	10 99       	mov	r9,r8
80012490:	12 0a       	add	r10,r9
80012492:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012496:	b4 89       	st.b	r10[0x0],r9
80012498:	2f f8       	sub	r8,-1
8001249a:	5c 58       	castu.b	r8
8001249c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124a0:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
800124a4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800124a8:	10 9b       	mov	r11,r8
800124aa:	ee fc ff f4 	ld.w	r12,r7[-12]
800124ae:	cf 7e       	rcall	8001229c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
800124b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124b4:	f1 39 00 08 	ld.ub	r9,r8[8]
800124b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800124bc:	11 b8       	ld.ub	r8,r8[0x3]
800124be:	f0 09 18 00 	cp.b	r9,r8
800124c2:	e0 81 00 9c 	brne	800125fa <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
800124c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124ca:	30 89       	mov	r9,8
800124cc:	91 19       	st.w	r8[0x4],r9
		}
		break;
800124ce:	c9 98       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
800124d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800124d4:	11 f8       	ld.ub	r8,r8[0x7]
800124d6:	ec f9 08 dc 	ld.w	r9,r6[2268]
800124da:	f2 08 07 08 	ld.ub	r8,r9[r8]
800124de:	10 9b       	mov	r11,r8
800124e0:	ee fc ff f4 	ld.w	r12,r7[-12]
800124e4:	cd ce       	rcall	8001229c <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
800124e6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800124ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800124ee:	90 08       	ld.sh	r8,r8[0x0]
800124f0:	5c 78       	castu.h	r8
800124f2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800124f6:	10 39       	cp.w	r9,r8
800124f8:	c2 30       	breq	8001253e <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
800124fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124fe:	11 a8       	ld.ub	r8,r8[0x2]
80012500:	2f f8       	sub	r8,-1
80012502:	5c 58       	castu.b	r8
80012504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012508:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
8001250a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001250e:	30 08       	mov	r8,0
80012510:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012516:	30 19       	mov	r9,1
80012518:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
8001251a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8001251e:	3f e8       	mov	r8,-2
80012520:	f0 09 18 00 	cp.b	r9,r8
80012524:	c6 d1       	brne	800125fe <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80012526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001252a:	30 29       	mov	r9,2
8001252c:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
8001252e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012532:	30 08       	mov	r8,0
80012534:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80012536:	ee fc ff f4 	ld.w	r12,r7[-12]
8001253a:	c9 fe       	rcall	80012278 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
8001253c:	c6 28       	rjmp	80012600 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
8001253e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012542:	30 99       	mov	r9,9
80012544:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80012546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001254a:	2f 88       	sub	r8,-8
8001254c:	10 99       	mov	r9,r8
8001254e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012552:	f1 38 00 08 	ld.ub	r8,r8[8]
80012556:	10 09       	add	r9,r8
80012558:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001255c:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001255e:	c5 18       	rjmp	80012600 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
80012560:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012564:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012568:	90 08       	ld.sh	r8,r8[0x0]
8001256a:	5c 78       	castu.h	r8
8001256c:	a9 88       	lsr	r8,0x8
8001256e:	5c 88       	casts.h	r8
80012570:	f0 09 19 00 	cp.h	r9,r8
80012574:	c2 30       	breq	800125ba <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80012576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001257a:	11 a8       	ld.ub	r8,r8[0x2]
8001257c:	2f f8       	sub	r8,-1
8001257e:	5c 58       	castu.b	r8
80012580:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012584:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012586:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001258a:	30 08       	mov	r8,0
8001258c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001258e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012592:	30 19       	mov	r9,1
80012594:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80012596:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8001259a:	3f e8       	mov	r8,-2
8001259c:	f0 09 18 00 	cp.b	r9,r8
800125a0:	c3 01       	brne	80012600 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
800125a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125a6:	30 29       	mov	r9,2
800125a8:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
800125aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800125ae:	30 08       	mov	r8,0
800125b0:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
800125b2:	ee fc ff f4 	ld.w	r12,r7[-12]
800125b6:	c6 1e       	rcall	80012278 <mavlink_start_checksum>
800125b8:	c2 48       	rjmp	80012600 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
800125ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800125be:	30 18       	mov	r8,1
800125c0:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800125c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125c6:	30 19       	mov	r9,1
800125c8:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
800125ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800125ce:	2f 88       	sub	r8,-8
800125d0:	10 99       	mov	r9,r8
800125d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125d6:	f1 38 00 08 	ld.ub	r8,r8[8]
800125da:	2f f8       	sub	r8,-1
800125dc:	10 09       	add	r9,r8
800125de:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125e2:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
800125e4:	e0 6a 01 10 	mov	r10,272
800125e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800125ec:	ee fc ff e8 	ld.w	r12,r7[-24]
800125f0:	f0 16 00 1e 	mcall	r6[120]
800125f4:	c0 68       	rjmp	80012600 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
800125f6:	d7 03       	nop
800125f8:	c0 48       	rjmp	80012600 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
800125fa:	d7 03       	nop
800125fc:	c0 28       	rjmp	80012600 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
800125fe:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80012600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012604:	2f f8       	sub	r8,-1
80012606:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
8001260a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001260e:	11 89       	ld.ub	r9,r8[0x0]
80012610:	30 18       	mov	r8,1
80012612:	f0 09 18 00 	cp.b	r9,r8
80012616:	c1 91       	brne	80012648 <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80012618:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001261c:	11 c8       	ld.ub	r8,r8[0x4]
8001261e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012622:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80012626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001262a:	90 68       	ld.sh	r8,r8[0xc]
8001262c:	58 08       	cp.w	r8,0
8001262e:	c0 51       	brne	80012638 <mavlink_parse_char+0x36c>
80012630:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012634:	30 08       	mov	r8,0
80012636:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80012638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001263c:	90 68       	ld.sh	r8,r8[0xc]
8001263e:	2f f8       	sub	r8,-1
80012640:	5c 88       	casts.h	r8
80012642:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012646:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80012648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001264c:	f1 38 00 09 	ld.ub	r8,r8[9]
80012650:	2f f8       	sub	r8,-1
80012652:	5c 58       	castu.b	r8
80012654:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012658:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
8001265c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012660:	90 68       	ld.sh	r8,r8[0xc]
80012662:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012666:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80012668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001266c:	11 a8       	ld.ub	r8,r8[0x2]
8001266e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80012672:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80012674:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012678:	30 08       	mov	r8,0
8001267a:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
8001267c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012680:	11 88       	ld.ub	r8,r8[0x0]
}
80012682:	10 9c       	mov	r12,r8
80012684:	2f 9d       	sub	sp,-28
80012686:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001268a:	00 00       	add	r0,r0
8001268c:	80 01       	ld.sh	r1,r0[0x0]
8001268e:	21 5c       	sub	r12,21

80012690 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80012690:	eb cd 40 80 	pushm	r7,lr
80012694:	1a 97       	mov	r7,sp
80012696:	20 2d       	sub	sp,8
80012698:	ef 4c ff fc 	st.w	r7[-4],r12
8001269c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
800126a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126a4:	2f f8       	sub	r8,-1
800126a6:	11 88       	ld.ub	r8,r8[0x0]
800126a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800126ac:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800126ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800126b2:	f0 c9 ff ff 	sub	r9,r8,-1
800126b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126ba:	11 88       	ld.ub	r8,r8[0x0]
800126bc:	b2 88       	st.b	r9[0x0],r8
}
800126be:	2f ed       	sub	sp,-8
800126c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800126c4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800126c4:	eb cd 40 c0 	pushm	r6-r7,lr
800126c8:	1a 97       	mov	r7,sp
800126ca:	20 3d       	sub	sp,12
800126cc:	49 06       	lddpc	r6,8001270c <mav_array_memcpy+0x48>
800126ce:	1e 26       	rsub	r6,pc
800126d0:	ef 4c ff fc 	st.w	r7[-4],r12
800126d4:	ef 4b ff f8 	st.w	r7[-8],r11
800126d8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800126dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126e0:	58 08       	cp.w	r8,0
800126e2:	c0 91       	brne	800126f4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800126e4:	ee fa ff f4 	ld.w	r10,r7[-12]
800126e8:	30 0b       	mov	r11,0
800126ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800126ee:	f0 16 00 2f 	mcall	r6[188]
800126f2:	c0 98       	rjmp	80012704 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800126f4:	ee fa ff f4 	ld.w	r10,r7[-12]
800126f8:	ee fb ff f8 	ld.w	r11,r7[-8]
800126fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80012700:	f0 16 00 1e 	mcall	r6[120]
	}
}
80012704:	2f dd       	sub	sp,-12
80012706:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001270a:	00 00       	add	r0,r0
8001270c:	80 01       	ld.sh	r1,r0[0x0]
8001270e:	25 52       	sub	r2,85

80012710 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80012710:	eb cd 40 c0 	pushm	r6-r7,lr
80012714:	1a 97       	mov	r7,sp
80012716:	20 3d       	sub	sp,12
80012718:	48 d6       	lddpc	r6,8001274c <_MAV_RETURN_uint16_t+0x3c>
8001271a:	1e 26       	rsub	r6,pc
8001271c:	ef 4c ff f8 	st.w	r7[-8],r12
80012720:	16 98       	mov	r8,r11
80012722:	ef 68 ff f4 	st.b	r7[-12],r8
80012726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001272a:	2f 88       	sub	r8,-8
8001272c:	10 99       	mov	r9,r8
8001272e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80012732:	10 09       	add	r9,r8
80012734:	ee c8 00 02 	sub	r8,r7,2
80012738:	12 9b       	mov	r11,r9
8001273a:	10 9c       	mov	r12,r8
8001273c:	ca af       	rcall	80012690 <byte_swap_2>
8001273e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012742:	10 9c       	mov	r12,r8
80012744:	2f dd       	sub	sp,-12
80012746:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001274a:	00 00       	add	r0,r0
8001274c:	80 01       	ld.sh	r1,r0[0x0]
8001274e:	25 9e       	sub	lr,89

80012750 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80012750:	eb cd 40 c0 	pushm	r6-r7,lr
80012754:	1a 97       	mov	r7,sp
80012756:	20 3d       	sub	sp,12
80012758:	48 d6       	lddpc	r6,8001278c <_MAV_RETURN_int16_t+0x3c>
8001275a:	1e 26       	rsub	r6,pc
8001275c:	ef 4c ff f8 	st.w	r7[-8],r12
80012760:	16 98       	mov	r8,r11
80012762:	ef 68 ff f4 	st.b	r7[-12],r8
80012766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001276a:	2f 88       	sub	r8,-8
8001276c:	10 99       	mov	r9,r8
8001276e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80012772:	10 09       	add	r9,r8
80012774:	ee c8 00 02 	sub	r8,r7,2
80012778:	12 9b       	mov	r11,r9
8001277a:	10 9c       	mov	r12,r8
8001277c:	c8 af       	rcall	80012690 <byte_swap_2>
8001277e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012782:	10 9c       	mov	r12,r8
80012784:	2f dd       	sub	sp,-12
80012786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001278a:	00 00       	add	r0,r0
8001278c:	80 01       	ld.sh	r1,r0[0x0]
8001278e:	25 de       	sub	lr,93

80012790 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80012790:	eb cd 40 c0 	pushm	r6-r7,lr
80012794:	1a 97       	mov	r7,sp
80012796:	20 4d       	sub	sp,16
80012798:	49 16       	lddpc	r6,800127dc <_MAV_RETURN_char_array+0x4c>
8001279a:	1e 26       	rsub	r6,pc
8001279c:	ef 4c ff fc 	st.w	r7[-4],r12
800127a0:	ef 4b ff f8 	st.w	r7[-8],r11
800127a4:	12 98       	mov	r8,r9
800127a6:	14 99       	mov	r9,r10
800127a8:	ef 69 ff f4 	st.b	r7[-12],r9
800127ac:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
800127b0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800127b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127b8:	f0 ca ff f8 	sub	r10,r8,-8
800127bc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800127c0:	f4 08 00 08 	add	r8,r10,r8
800127c4:	12 9a       	mov	r10,r9
800127c6:	10 9b       	mov	r11,r8
800127c8:	ee fc ff f8 	ld.w	r12,r7[-8]
800127cc:	f0 16 00 1e 	mcall	r6[120]
	return array_length;
800127d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
800127d4:	10 9c       	mov	r12,r8
800127d6:	2f cd       	sub	sp,-16
800127d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127dc:	80 01       	ld.sh	r1,r0[0x0]
800127de:	26 1e       	sub	lr,97

800127e0 <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
800127e0:	eb cd 40 80 	pushm	r7,lr
800127e4:	1a 97       	mov	r7,sp
800127e6:	20 1d       	sub	sp,4
800127e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
800127ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127f0:	2f 88       	sub	r8,-8
800127f2:	2f e8       	sub	r8,-2
800127f4:	11 88       	ld.ub	r8,r8[0x0]
}
800127f6:	10 9c       	mov	r12,r8
800127f8:	2f fd       	sub	sp,-4
800127fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800127fe <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
800127fe:	eb cd 40 80 	pushm	r7,lr
80012802:	1a 97       	mov	r7,sp
80012804:	20 1d       	sub	sp,4
80012806:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001280a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001280e:	2f 88       	sub	r8,-8
80012810:	2f d8       	sub	r8,-3
80012812:	11 88       	ld.ub	r8,r8[0x0]
}
80012814:	10 9c       	mov	r12,r8
80012816:	2f fd       	sub	sp,-4
80012818:	e3 cd 80 80 	ldm	sp++,r7,pc

8001281c <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
8001281c:	eb cd 40 c0 	pushm	r6-r7,lr
80012820:	1a 97       	mov	r7,sp
80012822:	20 2d       	sub	sp,8
80012824:	48 a6       	lddpc	r6,8001284c <mavlink_msg_param_request_read_get_param_id+0x30>
80012826:	1e 26       	rsub	r6,pc
80012828:	ef 4c ff fc 	st.w	r7[-4],r12
8001282c:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
80012830:	30 49       	mov	r9,4
80012832:	31 0a       	mov	r10,16
80012834:	ee fb ff f8 	ld.w	r11,r7[-8]
80012838:	ee fc ff fc 	ld.w	r12,r7[-4]
8001283c:	ca af       	rcall	80012790 <_MAV_RETURN_char_array>
8001283e:	18 98       	mov	r8,r12
80012840:	5c 88       	casts.h	r8
80012842:	5c 88       	casts.h	r8
}
80012844:	10 9c       	mov	r12,r8
80012846:	2f ed       	sub	sp,-8
80012848:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001284c:	80 01       	ld.sh	r1,r0[0x0]
8001284e:	26 aa       	sub	r10,106

80012850 <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
80012850:	eb cd 40 c0 	pushm	r6-r7,lr
80012854:	1a 97       	mov	r7,sp
80012856:	20 1d       	sub	sp,4
80012858:	48 76       	lddpc	r6,80012874 <mavlink_msg_param_request_read_get_param_index+0x24>
8001285a:	1e 26       	rsub	r6,pc
8001285c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
80012860:	30 0b       	mov	r11,0
80012862:	ee fc ff fc 	ld.w	r12,r7[-4]
80012866:	c7 5f       	rcall	80012750 <_MAV_RETURN_int16_t>
80012868:	18 98       	mov	r8,r12
}
8001286a:	10 9c       	mov	r12,r8
8001286c:	2f fd       	sub	sp,-4
8001286e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012872:	00 00       	add	r0,r0
80012874:	80 01       	ld.sh	r1,r0[0x0]
80012876:	26 de       	sub	lr,109

80012878 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80012878:	eb cd 40 c0 	pushm	r6-r7,lr
8001287c:	1a 97       	mov	r7,sp
8001287e:	20 2d       	sub	sp,8
80012880:	49 36       	lddpc	r6,800128cc <mavlink_msg_param_request_read_decode+0x54>
80012882:	1e 26       	rsub	r6,pc
80012884:	ef 4c ff fc 	st.w	r7[-4],r12
80012888:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
8001288c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012890:	ce 0f       	rcall	80012850 <mavlink_msg_param_request_read_get_param_index>
80012892:	18 98       	mov	r8,r12
80012894:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012898:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
8001289a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001289e:	ca 1f       	rcall	800127e0 <mavlink_msg_param_request_read_get_target_system>
800128a0:	18 98       	mov	r8,r12
800128a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800128a6:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
800128a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800128ac:	ca 9f       	rcall	800127fe <mavlink_msg_param_request_read_get_target_component>
800128ae:	18 98       	mov	r8,r12
800128b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800128b4:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
800128b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800128ba:	2f c8       	sub	r8,-4
800128bc:	10 9b       	mov	r11,r8
800128be:	ee fc ff fc 	ld.w	r12,r7[-4]
800128c2:	ca df       	rcall	8001281c <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
800128c4:	2f ed       	sub	sp,-8
800128c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800128ca:	00 00       	add	r0,r0
800128cc:	80 01       	ld.sh	r1,r0[0x0]
800128ce:	27 06       	sub	r6,112

800128d0 <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
800128d0:	eb cd 40 80 	pushm	r7,lr
800128d4:	1a 97       	mov	r7,sp
800128d6:	20 1d       	sub	sp,4
800128d8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
800128dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800128e0:	2f 88       	sub	r8,-8
800128e2:	11 88       	ld.ub	r8,r8[0x0]
}
800128e4:	10 9c       	mov	r12,r8
800128e6:	2f fd       	sub	sp,-4
800128e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800128ec <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
800128ec:	eb cd 40 80 	pushm	r7,lr
800128f0:	1a 97       	mov	r7,sp
800128f2:	20 1d       	sub	sp,4
800128f4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
800128f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800128fc:	2f 88       	sub	r8,-8
800128fe:	2f f8       	sub	r8,-1
80012900:	11 88       	ld.ub	r8,r8[0x0]
}
80012902:	10 9c       	mov	r12,r8
80012904:	2f fd       	sub	sp,-4
80012906:	e3 cd 80 80 	ldm	sp++,r7,pc

8001290a <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
8001290a:	eb cd 40 c0 	pushm	r6-r7,lr
8001290e:	1a 97       	mov	r7,sp
80012910:	20 2d       	sub	sp,8
80012912:	48 c6       	lddpc	r6,80012940 <mavlink_msg_param_request_list_decode+0x36>
80012914:	1e 26       	rsub	r6,pc
80012916:	ef 4c ff fc 	st.w	r7[-4],r12
8001291a:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
8001291e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012922:	cd 7f       	rcall	800128d0 <mavlink_msg_param_request_list_get_target_system>
80012924:	18 98       	mov	r8,r12
80012926:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001292a:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
8001292c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012930:	cd ef       	rcall	800128ec <mavlink_msg_param_request_list_get_target_component>
80012932:	18 98       	mov	r8,r12
80012934:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012938:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
8001293a:	2f ed       	sub	sp,-8
8001293c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012940:	80 01       	ld.sh	r1,r0[0x0]
80012942:	27 98       	sub	r8,121

80012944 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
80012944:	eb cd 40 80 	pushm	r7,lr
80012948:	1a 97       	mov	r7,sp
8001294a:	20 1d       	sub	sp,4
8001294c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80012950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012954:	2f 88       	sub	r8,-8
80012956:	2f e8       	sub	r8,-2
80012958:	11 88       	ld.ub	r8,r8[0x0]
}
8001295a:	10 9c       	mov	r12,r8
8001295c:	2f fd       	sub	sp,-4
8001295e:	e3 cd 80 80 	ldm	sp++,r7,pc

80012962 <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
80012962:	eb cd 40 80 	pushm	r7,lr
80012966:	1a 97       	mov	r7,sp
80012968:	20 1d       	sub	sp,4
8001296a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001296e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012972:	2f 88       	sub	r8,-8
80012974:	2f d8       	sub	r8,-3
80012976:	11 88       	ld.ub	r8,r8[0x0]
}
80012978:	10 9c       	mov	r12,r8
8001297a:	2f fd       	sub	sp,-4
8001297c:	e3 cd 80 80 	ldm	sp++,r7,pc

80012980 <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
80012980:	eb cd 40 80 	pushm	r7,lr
80012984:	1a 97       	mov	r7,sp
80012986:	20 1d       	sub	sp,4
80012988:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001298c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012990:	2f 88       	sub	r8,-8
80012992:	2f c8       	sub	r8,-4
80012994:	11 88       	ld.ub	r8,r8[0x0]
}
80012996:	10 9c       	mov	r12,r8
80012998:	2f fd       	sub	sp,-4
8001299a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001299e <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
8001299e:	eb cd 40 c0 	pushm	r6-r7,lr
800129a2:	1a 97       	mov	r7,sp
800129a4:	20 1d       	sub	sp,4
800129a6:	48 86       	lddpc	r6,800129c4 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
800129a8:	1e 26       	rsub	r6,pc
800129aa:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
800129ae:	30 0b       	mov	r11,0
800129b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800129b4:	ca ee       	rcall	80012710 <_MAV_RETURN_uint16_t>
800129b6:	18 98       	mov	r8,r12
800129b8:	5c 88       	casts.h	r8
800129ba:	5c 88       	casts.h	r8
}
800129bc:	10 9c       	mov	r12,r8
800129be:	2f fd       	sub	sp,-4
800129c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800129c4:	80 01       	ld.sh	r1,r0[0x0]
800129c6:	28 2c       	sub	r12,-126

800129c8 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
800129c8:	eb cd 40 80 	pushm	r7,lr
800129cc:	1a 97       	mov	r7,sp
800129ce:	20 1d       	sub	sp,4
800129d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800129d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800129d8:	2f 88       	sub	r8,-8
800129da:	2f b8       	sub	r8,-5
800129dc:	11 88       	ld.ub	r8,r8[0x0]
}
800129de:	10 9c       	mov	r12,r8
800129e0:	2f fd       	sub	sp,-4
800129e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800129e6 <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
800129e6:	eb cd 40 c0 	pushm	r6-r7,lr
800129ea:	1a 97       	mov	r7,sp
800129ec:	20 2d       	sub	sp,8
800129ee:	49 76       	lddpc	r6,80012a48 <mavlink_msg_request_data_stream_decode+0x62>
800129f0:	1e 26       	rsub	r6,pc
800129f2:	ef 4c ff fc 	st.w	r7[-4],r12
800129f6:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
800129fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800129fe:	cd 0f       	rcall	8001299e <mavlink_msg_request_data_stream_get_req_message_rate>
80012a00:	18 98       	mov	r8,r12
80012a02:	5c 88       	casts.h	r8
80012a04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a08:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
80012a0a:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a0e:	c9 bf       	rcall	80012944 <mavlink_msg_request_data_stream_get_target_system>
80012a10:	18 98       	mov	r8,r12
80012a12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a16:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
80012a18:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a1c:	ca 3f       	rcall	80012962 <mavlink_msg_request_data_stream_get_target_component>
80012a1e:	18 98       	mov	r8,r12
80012a20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a24:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
80012a26:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a2a:	ca bf       	rcall	80012980 <mavlink_msg_request_data_stream_get_req_stream_id>
80012a2c:	18 98       	mov	r8,r12
80012a2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a32:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
80012a34:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a38:	cc 8f       	rcall	800129c8 <mavlink_msg_request_data_stream_get_start_stop>
80012a3a:	18 98       	mov	r8,r12
80012a3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a40:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
80012a42:	2f ed       	sub	sp,-8
80012a44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012a48:	80 01       	ld.sh	r1,r0[0x0]
80012a4a:	28 74       	sub	r4,-121

80012a4c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80012a4c:	eb cd 40 c0 	pushm	r6-r7,lr
80012a50:	1a 97       	mov	r7,sp
80012a52:	20 6d       	sub	sp,24
80012a54:	49 e6       	lddpc	r6,80012acc <interpolate+0x80>
80012a56:	1e 26       	rsub	r6,pc
80012a58:	ef 4c ff f8 	st.w	r7[-8],r12
80012a5c:	ef 4b ff f4 	st.w	r7[-12],r11
80012a60:	ef 4a ff f0 	st.w	r7[-16],r10
80012a64:	ef 49 ff ec 	st.w	r7[-20],r9
80012a68:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80012a6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012a70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012a74:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80012a78:	c0 41       	brne	80012a80 <interpolate+0x34>
	{
		return y1;
80012a7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012a7e:	c2 38       	rjmp	80012ac4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80012a80:	ee f9 ff e8 	ld.w	r9,r7[-24]
80012a84:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012a88:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80012a8c:	ee fa ff f8 	ld.w	r10,r7[-8]
80012a90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012a94:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80012a98:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80012a9c:	ee fa ff f0 	ld.w	r10,r7[-16]
80012aa0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012aa4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80012aa8:	12 9b       	mov	r11,r9
80012aaa:	10 9c       	mov	r12,r8
80012aac:	f0 16 00 08 	mcall	r6[32]
80012ab0:	18 98       	mov	r8,r12
80012ab2:	10 99       	mov	r9,r8
80012ab4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012ab8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80012abc:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80012ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80012ac4:	10 9c       	mov	r12,r8
80012ac6:	2f ad       	sub	sp,-24
80012ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012acc:	80 01       	ld.sh	r1,r0[0x0]
80012ace:	28 da       	sub	r10,-115

80012ad0 <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
80012ad0:	eb cd 40 c0 	pushm	r6-r7,lr
80012ad4:	1a 97       	mov	r7,sp
80012ad6:	20 2d       	sub	sp,8
80012ad8:	48 e6       	lddpc	r6,80012b10 <comm_send_ch+0x40>
80012ada:	1e 26       	rsub	r6,pc
80012adc:	ef 4c ff fc 	st.w	r7[-4],r12
80012ae0:	16 98       	mov	r8,r11
80012ae2:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
80012ae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012aea:	58 08       	cp.w	r8,0
80012aec:	c0 e1       	brne	80012b08 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
80012aee:	ec f8 01 4c 	ld.w	r8,r6[332]
80012af2:	70 08       	ld.w	r8,r8[0x0]
80012af4:	70 18       	ld.w	r8,r8[0x4]
80012af6:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80012afa:	ec f9 01 4c 	ld.w	r9,r6[332]
80012afe:	72 09       	ld.w	r9,r9[0x0]
80012b00:	72 59       	ld.w	r9,r9[0x14]
80012b02:	14 9b       	mov	r11,r10
80012b04:	12 9c       	mov	r12,r9
80012b06:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80012b08:	2f ed       	sub	sp,-8
80012b0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012b0e:	00 00       	add	r0,r0
80012b10:	80 01       	ld.sh	r1,r0[0x0]
80012b12:	29 5e       	sub	lr,-107
80012b14:	0a 20       	rsub	r0,r5
80012b16:	52 65       	stdsp	sp[0x98],r5
80012b18:	63 65       	ld.w	r5,r1[0x58]
80012b1a:	69 76       	ld.w	r6,r4[0x5c]
80012b1c:	65 64       	ld.w	r4,r2[0x58]
80012b1e:	20 6d       	sub	sp,24
80012b20:	65 73       	ld.w	r3,r2[0x5c]
80012b22:	73 61       	ld.w	r1,r9[0x58]
80012b24:	67 65       	ld.w	r5,r3[0x58]
80012b26:	20 77       	sub	r7,7
80012b28:	69 74       	ld.w	r4,r4[0x5c]
80012b2a:	68 20       	ld.w	r0,r4[0x8]
80012b2c:	49 44       	lddpc	r4,80012b7c <mavlink_receive_handler+0x2a>
80012b2e:	00 00       	add	r0,r0
80012b30:	20 66       	sub	r6,6
80012b32:	72 6f       	ld.w	pc,r9[0x18]
80012b34:	6d 20       	ld.w	r0,r6[0x48]
80012b36:	73 79       	ld.w	r9,r9[0x5c]
80012b38:	73 74       	ld.w	r4,r9[0x5c]
80012b3a:	65 6d       	ld.w	sp,r2[0x58]
80012b3c:	00 00       	add	r0,r0
80012b3e:	00 00       	add	r0,r0
80012b40:	20 66       	sub	r6,6
80012b42:	6f 72       	ld.w	r2,r7[0x5c]
80012b44:	20 63       	sub	r3,6
80012b46:	6f 6d       	ld.w	sp,r7[0x58]
80012b48:	70 6f       	ld.w	pc,r8[0x18]
80012b4a:	6e 65       	ld.w	r5,r7[0x18]
80012b4c:	6e 74       	ld.w	r4,r7[0x1c]
80012b4e:	00 00       	add	r0,r0
80012b50:	0a 00       	add	r0,r5

80012b52 <mavlink_receive_handler>:

void mavlink_receive_handler() {
80012b52:	eb cd 40 c0 	pushm	r6-r7,lr
80012b56:	1a 97       	mov	r7,sp
80012b58:	fa cd 01 20 	sub	sp,sp,288
80012b5c:	49 c6       	lddpc	r6,80012bcc <mavlink_receive_handler+0x7a>
80012b5e:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
80012b60:	ec f8 04 c4 	ld.w	r8,r6[1220]
80012b64:	70 08       	ld.w	r8,r8[0x0]
80012b66:	ee c9 01 20 	sub	r9,r7,288
80012b6a:	12 9b       	mov	r11,r9
80012b6c:	10 9c       	mov	r12,r8
80012b6e:	f0 16 01 3f 	mcall	r6[1276]
80012b72:	18 98       	mov	r8,r12
80012b74:	58 08       	cp.w	r8,0
80012b76:	c2 80       	breq	80012bc6 <mavlink_receive_handler+0x74>
		dbg_print("\n Received message with ID");
80012b78:	fe cc 00 64 	sub	r12,pc,100
80012b7c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
80012b80:	ef 38 fe e7 	ld.ub	r8,r7[-281]
80012b84:	30 ab       	mov	r11,10
80012b86:	10 9c       	mov	r12,r8
80012b88:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
80012b8c:	fe cc 00 5c 	sub	r12,pc,92
80012b90:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
80012b94:	ef 38 fe e5 	ld.ub	r8,r7[-283]
80012b98:	30 ab       	mov	r11,10
80012b9a:	10 9c       	mov	r12,r8
80012b9c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
80012ba0:	fe cc 00 60 	sub	r12,pc,96
80012ba4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
80012ba8:	ef 38 fe e6 	ld.ub	r8,r7[-282]
80012bac:	30 ab       	mov	r11,10
80012bae:	10 9c       	mov	r12,r8
80012bb0:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
80012bb4:	fe cc 00 64 	sub	r12,pc,100
80012bb8:	f0 16 00 01 	mcall	r6[4]
		
			handle_mavlink_message(&rec);
80012bbc:	ee c8 01 20 	sub	r8,r7,288
80012bc0:	10 9c       	mov	r12,r8
80012bc2:	f0 16 01 73 	mcall	r6[1484]
		
		
	}
}
80012bc6:	2b 8d       	sub	sp,-288
80012bc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012bcc:	80 01       	ld.sh	r1,r0[0x0]
80012bce:	29 e2       	sub	r2,-98

80012bd0 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
80012bd0:	eb cd 40 c0 	pushm	r6-r7,lr
80012bd4:	1a 97       	mov	r7,sp
80012bd6:	20 3d       	sub	sp,12
80012bd8:	4a 36       	lddpc	r6,80012c64 <init_mavlink+0x94>
80012bda:	1e 26       	rsub	r6,pc
80012bdc:	ef 4c ff fc 	st.w	r7[-4],r12
80012be0:	ef 4b ff f8 	st.w	r7[-8],r11
80012be4:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80012be8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012bec:	5c 58       	castu.b	r8
80012bee:	ec f9 00 6c 	ld.w	r9,r6[108]
80012bf2:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80012bf4:	ec f9 00 6c 	ld.w	r9,r6[108]
80012bf8:	33 28       	mov	r8,50
80012bfa:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
80012bfc:	ec f9 00 6c 	ld.w	r9,r6[108]
80012c00:	30 28       	mov	r8,2
80012c02:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80012c04:	ec f8 00 6c 	ld.w	r8,r6[108]
80012c08:	11 88       	ld.ub	r8,r8[0x0]
80012c0a:	ec f9 00 c0 	ld.w	r9,r6[192]
80012c0e:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80012c10:	ec f9 00 c0 	ld.w	r9,r6[192]
80012c14:	3b e8       	mov	r8,-66
80012c16:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80012c18:	ec f9 00 c0 	ld.w	r9,r6[192]
80012c1c:	30 28       	mov	r8,2
80012c1e:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80012c20:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012c24:	ec f8 01 4c 	ld.w	r8,r6[332]
80012c28:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
80012c2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012c2e:	ec f8 04 c4 	ld.w	r8,r6[1220]
80012c32:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
80012c34:	ec f8 01 20 	ld.w	r8,r6[288]
80012c38:	10 9c       	mov	r12,r8
80012c3a:	f0 16 01 04 	mcall	r6[1040]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
80012c3e:	ec f9 05 20 	ld.w	r9,r6[1312]
80012c42:	ec fc 01 20 	ld.w	r12,r6[288]
80012c46:	31 68       	mov	r8,22
80012c48:	30 2a       	mov	r10,2
80012c4a:	e0 7b 86 a0 	mov	r11,100000
80012c4e:	f0 16 00 21 	mcall	r6[132]

	centralData = get_central_data();
80012c52:	f0 16 00 31 	mcall	r6[196]
80012c56:	18 99       	mov	r9,r12
80012c58:	ec f8 00 00 	ld.w	r8,r6[0]
80012c5c:	91 09       	st.w	r8[0x0],r9
}
80012c5e:	2f dd       	sub	sp,-12
80012c60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012c64:	80 01       	ld.sh	r1,r0[0x0]
80012c66:	2a 5e       	sub	lr,-91

80012c68 <flush_mavlink>:

void flush_mavlink() {
80012c68:	eb cd 40 c0 	pushm	r6-r7,lr
80012c6c:	1a 97       	mov	r7,sp
80012c6e:	48 b6       	lddpc	r6,80012c98 <flush_mavlink+0x30>
80012c70:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
80012c72:	ec f8 01 4c 	ld.w	r8,r6[332]
80012c76:	70 08       	ld.w	r8,r8[0x0]
80012c78:	70 28       	ld.w	r8,r8[0x8]
80012c7a:	58 08       	cp.w	r8,0
80012c7c:	c0 b0       	breq	80012c92 <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
80012c7e:	ec f8 01 4c 	ld.w	r8,r6[332]
80012c82:	70 08       	ld.w	r8,r8[0x0]
80012c84:	70 28       	ld.w	r8,r8[0x8]
80012c86:	ec f9 01 4c 	ld.w	r9,r6[332]
80012c8a:	72 09       	ld.w	r9,r9[0x0]
80012c8c:	72 59       	ld.w	r9,r9[0x14]
80012c8e:	12 9c       	mov	r12,r9
80012c90:	5d 18       	icall	r8
	
	}
}
80012c92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012c96:	00 00       	add	r0,r0
80012c98:	80 01       	ld.sh	r1,r0[0x0]
80012c9a:	2a f4       	sub	r4,-81

80012c9c <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
80012c9c:	eb cd 40 c0 	pushm	r6-r7,lr
80012ca0:	1a 97       	mov	r7,sp
80012ca2:	20 1d       	sub	sp,4
80012ca4:	49 36       	lddpc	r6,80012cf0 <mavlink_protocol_update+0x54>
80012ca6:	1e 26       	rsub	r6,pc
	task_return_t result=0;
80012ca8:	30 08       	mov	r8,0
80012caa:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
80012cae:	f0 16 02 1f 	mcall	r6[2172]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
80012cb2:	ec f8 01 4c 	ld.w	r8,r6[332]
80012cb6:	70 08       	ld.w	r8,r8[0x0]
80012cb8:	70 38       	ld.w	r8,r8[0xc]
80012cba:	ec f9 01 4c 	ld.w	r9,r6[332]
80012cbe:	72 09       	ld.w	r9,r9[0x0]
80012cc0:	72 59       	ld.w	r9,r9[0x14]
80012cc2:	12 9c       	mov	r12,r9
80012cc4:	5d 18       	icall	r8
80012cc6:	18 98       	mov	r8,r12
80012cc8:	58 18       	cp.w	r8,1
80012cca:	c0 c1       	brne	80012ce2 <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
80012ccc:	ec f8 01 20 	ld.w	r8,r6[288]
80012cd0:	30 0b       	mov	r11,0
80012cd2:	10 9c       	mov	r12,r8
80012cd4:	f0 16 00 e7 	mcall	r6[924]
80012cd8:	18 98       	mov	r8,r12
80012cda:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
80012cde:	f0 16 00 2b 	mcall	r6[172]
	}
		
	
	return result;
80012ce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80012ce6:	10 9c       	mov	r12,r8
80012ce8:	2f fd       	sub	sp,-4
80012cea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012cee:	00 00       	add	r0,r0
80012cf0:	80 01       	ld.sh	r1,r0[0x0]
80012cf2:	2b 2a       	sub	r10,-78

80012cf4 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
80012cf4:	eb cd 40 c0 	pushm	r6-r7,lr
80012cf8:	1a 97       	mov	r7,sp
80012cfa:	48 46       	lddpc	r6,80012d08 <get_mavlink_taskset+0x14>
80012cfc:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
80012cfe:	ec f8 01 20 	ld.w	r8,r6[288]
}
80012d02:	10 9c       	mov	r12,r8
80012d04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d08:	80 01       	ld.sh	r1,r0[0x0]
80012d0a:	2b 80       	sub	r0,-72

80012d0c <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
80012d0c:	eb cd 40 c0 	pushm	r6-r7,lr
80012d10:	1a 97       	mov	r7,sp
80012d12:	20 2d       	sub	sp,8
80012d14:	49 56       	lddpc	r6,80012d68 <suspend_downstream+0x5c>
80012d16:	1e 26       	rsub	r6,pc
80012d18:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012d1c:	30 08       	mov	r8,0
80012d1e:	ef 48 ff fc 	st.w	r7[-4],r8
80012d22:	c1 78       	rjmp	80012d50 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
80012d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012d28:	12 98       	mov	r8,r9
80012d2a:	a1 78       	lsl	r8,0x1
80012d2c:	12 08       	add	r8,r9
80012d2e:	a5 68       	lsl	r8,0x4
80012d30:	10 99       	mov	r9,r8
80012d32:	ec f8 01 20 	ld.w	r8,r6[288]
80012d36:	2f c8       	sub	r8,-4
80012d38:	f2 08 00 08 	add	r8,r9,r8
80012d3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80012d40:	10 9c       	mov	r12,r8
80012d42:	f0 16 01 b9 	mcall	r6[1764]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012d4a:	2f f8       	sub	r8,-1
80012d4c:	ef 48 ff fc 	st.w	r7[-4],r8
80012d50:	ec f8 01 20 	ld.w	r8,r6[288]
80012d54:	11 88       	ld.ub	r8,r8[0x0]
80012d56:	10 99       	mov	r9,r8
80012d58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012d5c:	10 39       	cp.w	r9,r8
80012d5e:	fe 99 ff e3 	brgt	80012d24 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
80012d62:	2f ed       	sub	sp,-8
80012d64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d68:	80 01       	ld.sh	r1,r0[0x0]
80012d6a:	2b 9a       	sub	r10,-71

80012d6c <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80012d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80012d70:	1a 97       	mov	r7,sp
80012d72:	20 3d       	sub	sp,12
80012d74:	49 a6       	lddpc	r6,80012ddc <mavlink_receive+0x70>
80012d76:	1e 26       	rsub	r6,pc
80012d78:	ef 4c ff f8 	st.w	r7[-8],r12
80012d7c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012d80:	c1 d8       	rjmp	80012dba <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80012d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012d86:	70 08       	ld.w	r8,r8[0x0]
80012d88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012d8c:	72 59       	ld.w	r9,r9[0x14]
80012d8e:	12 9c       	mov	r12,r9
80012d90:	5d 18       	icall	r8
80012d92:	18 98       	mov	r8,r12
80012d94:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
80012d98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012d9c:	f0 c9 fe f0 	sub	r9,r8,-272
80012da0:	ee fa ff f4 	ld.w	r10,r7[-12]
80012da4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012da8:	10 9b       	mov	r11,r8
80012daa:	30 0c       	mov	r12,0
80012dac:	fe b0 fa 90 	rcall	800122cc <mavlink_parse_char>
80012db0:	18 98       	mov	r8,r12
80012db2:	58 08       	cp.w	r8,0
80012db4:	c0 30       	breq	80012dba <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
80012db6:	30 18       	mov	r8,1
80012db8:	c0 e8       	rjmp	80012dd4 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012dbe:	70 48       	ld.w	r8,r8[0x10]
80012dc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012dc4:	72 59       	ld.w	r9,r9[0x14]
80012dc6:	12 9c       	mov	r12,r9
80012dc8:	5d 18       	icall	r8
80012dca:	18 98       	mov	r8,r12
80012dcc:	58 08       	cp.w	r8,0
80012dce:	fe 99 ff da 	brgt	80012d82 <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
80012dd2:	30 08       	mov	r8,0
}
80012dd4:	10 9c       	mov	r12,r8
80012dd6:	2f dd       	sub	sp,-12
80012dd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012ddc:	80 01       	ld.sh	r1,r0[0x0]
80012dde:	2b fa       	sub	r10,-65
80012de0:	6d 73       	ld.w	r3,r6[0x5c]
80012de2:	67 20       	ld.w	r0,r3[0x48]
80012de4:	63 6f       	ld.w	pc,r1[0x58]
80012de6:	6d 70       	ld.w	r0,r6[0x5c]
80012de8:	20 69       	sub	r9,6
80012dea:	64 3a       	ld.w	r10,r2[0xc]
80012dec:	00 00       	add	r0,r0
80012dee:	00 00       	add	r0,r0
80012df0:	73 74       	ld.w	r4,r9[0x5c]
80012df2:	72 65       	ld.w	r5,r9[0x18]
80012df4:	61 6d       	ld.w	sp,r0[0x58]
80012df6:	20 72       	sub	r2,7
80012df8:	65 71       	ld.w	r1,r2[0x5c]
80012dfa:	75 65       	ld.w	r5,r10[0x58]
80012dfc:	73 74       	ld.w	r4,r9[0x5c]
80012dfe:	3a 00       	mov	r0,-96
80012e00:	73 65       	ld.w	r5,r9[0x58]
80012e02:	6e 64       	ld.w	r4,r7[0x18]
80012e04:	20 61       	sub	r1,6
80012e06:	6c 6c       	ld.w	r12,r6[0x18]
80012e08:	0a 00       	add	r0,r5
80012e0a:	00 00       	add	r0,r0
80012e0c:	20 73       	sub	r3,7
80012e0e:	74 72       	ld.w	r2,r10[0x1c]
80012e10:	65 61       	ld.w	r1,r2[0x58]
80012e12:	6d 3d       	ld.w	sp,r6[0x4c]
80012e14:	00 00       	add	r0,r0
80012e16:	00 00       	add	r0,r0
80012e18:	20 73       	sub	r3,7
80012e1a:	74 61       	ld.w	r1,r10[0x18]
80012e1c:	72 74       	ld.w	r4,r9[0x1c]
80012e1e:	5f 73       	srpl	r3
80012e20:	74 6f       	ld.w	pc,r10[0x18]
80012e22:	70 3d       	ld.w	sp,r8[0xc]
80012e24:	00 00       	add	r0,r0
80012e26:	00 00       	add	r0,r0
80012e28:	20 72       	sub	r2,7
80012e2a:	61 74       	ld.w	r4,r0[0x5c]
80012e2c:	65 3d       	ld.w	sp,r2[0x4c]
	...

80012e30 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
80012e30:	eb cd 40 c0 	pushm	r6-r7,lr
80012e34:	1a 97       	mov	r7,sp
80012e36:	20 cd       	sub	sp,48
80012e38:	fe f6 02 34 	ld.w	r6,pc[564]
80012e3c:	1e 26       	rsub	r6,pc
80012e3e:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
80012e42:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012e46:	11 f8       	ld.ub	r8,r8[0x7]
80012e48:	59 58       	cp.w	r8,21
80012e4a:	c0 c0       	breq	80012e62 <handle_mavlink_message+0x32>
80012e4c:	e0 89 00 05 	brgt	80012e56 <handle_mavlink_message+0x26>
80012e50:	59 48       	cp.w	r8,20
80012e52:	c2 a0       	breq	80012ea6 <handle_mavlink_message+0x76>
80012e54:	cf 98       	rjmp	80013046 <handle_mavlink_message+0x216>
80012e56:	59 78       	cp.w	r8,23
80012e58:	c4 70       	breq	80012ee6 <handle_mavlink_message+0xb6>
80012e5a:	e0 48 00 42 	cp.w	r8,66
80012e5e:	c4 d0       	breq	80012ef8 <handle_mavlink_message+0xc8>
80012e60:	cf 38       	rjmp	80013046 <handle_mavlink_message+0x216>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
80012e62:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012e66:	ee c9 00 12 	sub	r9,r7,18
80012e6a:	12 9b       	mov	r11,r9
80012e6c:	10 9c       	mov	r12,r8
80012e6e:	fe b0 fd 4e 	rcall	8001290a <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
80012e72:	fe cc 00 92 	sub	r12,pc,146
80012e76:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
80012e7a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80012e7e:	30 ab       	mov	r11,10
80012e80:	10 9c       	mov	r12,r8
80012e82:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80012e86:	fe cc 03 36 	sub	r12,pc,822
80012e8a:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80012e8e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80012e92:	ec f8 00 6c 	ld.w	r8,r6[108]
80012e96:	11 88       	ld.ub	r8,r8[0x0]
80012e98:	f0 09 18 00 	cp.b	r9,r8
80012e9c:	e0 81 00 da 	brne	80013050 <handle_mavlink_message+0x220>
				send_all_parameters();
80012ea0:	f0 16 01 50 	mcall	r6[1344]
			}				
		}
		break;
80012ea4:	ce 18       	rjmp	80013066 <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80012ea6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012eaa:	ee c9 00 26 	sub	r9,r7,38
80012eae:	12 9b       	mov	r11,r9
80012eb0:	10 9c       	mov	r12,r8
80012eb2:	fe b0 fc e3 	rcall	80012878 <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012eb6:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80012eba:	ec f8 00 6c 	ld.w	r8,r6[108]
80012ebe:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012ec0:	f0 09 18 00 	cp.b	r9,r8
80012ec4:	e0 81 00 c8 	brne	80013054 <handle_mavlink_message+0x224>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012ec8:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80012ecc:	ec f8 00 6c 	ld.w	r8,r6[108]
80012ed0:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012ed2:	f0 09 18 00 	cp.b	r9,r8
80012ed6:	e0 81 00 c1 	brne	80013058 <handle_mavlink_message+0x228>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
80012eda:	ee c8 00 26 	sub	r8,r7,38
80012ede:	10 9c       	mov	r12,r8
80012ee0:	f0 16 01 4b 	mcall	r6[1324]
			}				
		}
		break;
80012ee4:	cc 18       	rjmp	80013066 <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
80012ee6:	e0 7c 86 a0 	mov	r12,100000
80012eea:	f0 16 00 73 	mcall	r6[460]
			receive_parameter(rec);
80012eee:	ee fc ff d0 	ld.w	r12,r7[-48]
80012ef2:	f0 16 01 72 	mcall	r6[1480]
		}
		break;
80012ef6:	cb 88       	rjmp	80013066 <handle_mavlink_message+0x236>

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80012ef8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012efc:	ee c9 00 2c 	sub	r9,r7,44
80012f00:	12 9b       	mov	r11,r9
80012f02:	10 9c       	mov	r12,r8
80012f04:	fe b0 fd 71 	rcall	800129e6 <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012f08:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80012f0c:	ec f8 00 6c 	ld.w	r8,r6[108]
80012f10:	11 88       	ld.ub	r8,r8[0x0]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012f12:	f0 09 18 00 	cp.b	r9,r8
80012f16:	e0 81 00 a3 	brne	8001305c <handle_mavlink_message+0x22c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012f1a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80012f1e:	ec f8 00 6c 	ld.w	r8,r6[108]
80012f22:	11 98       	ld.ub	r8,r8[0x1]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012f24:	f0 09 18 00 	cp.b	r9,r8
80012f28:	e0 81 00 9c 	brne	80013060 <handle_mavlink_message+0x230>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80012f2c:	fe cc 01 3c 	sub	r12,pc,316
80012f30:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80012f34:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80012f38:	30 ab       	mov	r11,10
80012f3a:	10 9c       	mov	r12,r8
80012f3c:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
80012f40:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80012f44:	3f f8       	mov	r8,-1
80012f46:	f0 09 18 00 	cp.b	r9,r8
80012f4a:	c2 a1       	brne	80012f9e <handle_mavlink_message+0x16e>
					int i;
					dbg_print("send all\n");
80012f4c:	fe cc 01 4c 	sub	r12,pc,332
80012f50:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012f54:	30 08       	mov	r8,0
80012f56:	ef 48 ff f0 	st.w	r7[-16],r8
80012f5a:	c1 88       	rjmp	80012f8a <handle_mavlink_message+0x15a>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80012f5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012f60:	5c 88       	casts.h	r8
80012f62:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012f66:	ec f8 01 20 	ld.w	r8,r6[288]
80012f6a:	12 9b       	mov	r11,r9
80012f6c:	10 9c       	mov	r12,r8
80012f6e:	f0 16 01 ae 	mcall	r6[1720]
80012f72:	18 98       	mov	r8,r12
80012f74:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
80012f78:	ee fc ff f4 	ld.w	r12,r7[-12]
80012f7c:	f0 16 00 fa 	mcall	r6[1000]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012f80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012f84:	2f f8       	sub	r8,-1
80012f86:	ef 48 ff f0 	st.w	r7[-16],r8
80012f8a:	ec f8 01 20 	ld.w	r8,r6[288]
80012f8e:	11 88       	ld.ub	r8,r8[0x0]
80012f90:	10 99       	mov	r9,r8
80012f92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012f96:	10 39       	cp.w	r9,r8
80012f98:	fe 99 ff e2 	brgt	80012f5c <handle_mavlink_message+0x12c>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
80012f9c:	c6 58       	rjmp	80013066 <handle_mavlink_message+0x236>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80012f9e:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012fa2:	10 99       	mov	r9,r8
80012fa4:	ec f8 01 20 	ld.w	r8,r6[288]
80012fa8:	12 9b       	mov	r11,r9
80012faa:	10 9c       	mov	r12,r8
80012fac:	f0 16 01 b0 	mcall	r6[1728]
80012fb0:	18 98       	mov	r8,r12
80012fb2:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80012fb6:	fe cc 01 aa 	sub	r12,pc,426
80012fba:	f0 16 00 01 	mcall	r6[4]
80012fbe:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012fc2:	30 ab       	mov	r11,10
80012fc4:	10 9c       	mov	r12,r8
80012fc6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80012fca:	fe cc 01 b2 	sub	r12,pc,434
80012fce:	f0 16 00 01 	mcall	r6[4]
80012fd2:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012fd6:	30 ab       	mov	r11,10
80012fd8:	10 9c       	mov	r12,r8
80012fda:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80012fde:	fe cc 01 b6 	sub	r12,pc,438
80012fe2:	f0 16 00 01 	mcall	r6[4]
80012fe6:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012fea:	5c 78       	castu.h	r8
80012fec:	30 ab       	mov	r11,10
80012fee:	10 9c       	mov	r12,r8
80012ff0:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80012ff4:	fe cc 04 a4 	sub	r12,pc,1188
80012ff8:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80012ffc:	fe cc 04 ac 	sub	r12,pc,1196
80013000:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
80013004:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80013008:	58 08       	cp.w	r8,0
8001300a:	c0 70       	breq	80013018 <handle_mavlink_message+0x1e8>
						change_run_mode(task, RUN_REGULAR);
8001300c:	30 2b       	mov	r11,2
8001300e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013012:	f0 16 00 a6 	mcall	r6[664]
80013016:	c0 68       	rjmp	80013022 <handle_mavlink_message+0x1f2>
					}else {
						change_run_mode(task, RUN_NEVER);
80013018:	30 0b       	mov	r11,0
8001301a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001301e:	f0 16 00 a6 	mcall	r6[664]
					}
					if (request.req_message_rate>0) {
80013022:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80013026:	58 08       	cp.w	r8,0
80013028:	c1 e0       	breq	80013064 <handle_mavlink_message+0x234>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
8001302a:	ef 08 ff d4 	ld.sh	r8,r7[-44]
8001302e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80013032:	ee 78 42 40 	mov	r8,1000000
80013036:	f0 09 0d 08 	divu	r8,r8,r9
8001303a:	10 9b       	mov	r11,r8
8001303c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013040:	f0 16 01 97 	mcall	r6[1628]
					}
				}
			}
		}	
		break;
80013044:	c1 18       	rjmp	80013066 <handle_mavlink_message+0x236>
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
80013046:	ee fc ff d0 	ld.w	r12,r7[-48]
8001304a:	f0 16 01 a9 	mcall	r6[1700]
8001304e:	c0 c8       	rjmp	80013066 <handle_mavlink_message+0x236>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80013050:	d7 03       	nop
80013052:	c0 a8       	rjmp	80013066 <handle_mavlink_message+0x236>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80013054:	d7 03       	nop
80013056:	c0 88       	rjmp	80013066 <handle_mavlink_message+0x236>
80013058:	d7 03       	nop
8001305a:	c0 68       	rjmp	80013066 <handle_mavlink_message+0x236>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
8001305c:	d7 03       	nop
8001305e:	c0 48       	rjmp	80013066 <handle_mavlink_message+0x236>
80013060:	d7 03       	nop
80013062:	c0 28       	rjmp	80013066 <handle_mavlink_message+0x236>
80013064:	d7 03       	nop
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
		}		
	}
80013066:	2f 4d       	sub	sp,-48
80013068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001306c:	80 01       	ld.sh	r1,r0[0x0]
8001306e:	2c c0       	sub	r0,-52

80013070 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80013070:	eb cd 40 80 	pushm	r7,lr
80013074:	1a 97       	mov	r7,sp
80013076:	20 3d       	sub	sp,12
80013078:	18 98       	mov	r8,r12
8001307a:	ef 4b ff f4 	st.w	r7[-12],r11
8001307e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80013082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013086:	90 08       	ld.sh	r8,r8[0x0]
80013088:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001308c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80013090:	f3 e8 20 08 	eor	r8,r9,r8
80013094:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80013098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001309c:	a5 68       	lsl	r8,0x4
8001309e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800130a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800130a6:	f3 e8 20 08 	eor	r8,r9,r8
800130aa:	5c 58       	castu.b	r8
800130ac:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800130b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800130b4:	90 08       	ld.sh	r8,r8[0x0]
800130b6:	5c 78       	castu.h	r8
800130b8:	a9 88       	lsr	r8,0x8
800130ba:	5c 88       	casts.h	r8
800130bc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800130c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800130c4:	a9 68       	lsl	r8,0x8
800130c6:	5c 88       	casts.h	r8
800130c8:	f3 e8 20 08 	eor	r8,r9,r8
800130cc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800130d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800130d4:	a3 78       	lsl	r8,0x3
800130d6:	5c 88       	casts.h	r8
800130d8:	f3 e8 20 08 	eor	r8,r9,r8
800130dc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800130e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800130e4:	a5 88       	lsr	r8,0x4
800130e6:	5c 58       	castu.b	r8
800130e8:	f3 e8 20 08 	eor	r8,r9,r8
800130ec:	5c 88       	casts.h	r8
800130ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800130f2:	b2 08       	st.h	r9[0x0],r8
}
800130f4:	2f dd       	sub	sp,-12
800130f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800130fa <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800130fa:	eb cd 40 80 	pushm	r7,lr
800130fe:	1a 97       	mov	r7,sp
80013100:	20 1d       	sub	sp,4
80013102:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80013106:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001310a:	3f f8       	mov	r8,-1
8001310c:	b2 08       	st.h	r9[0x0],r8
}
8001310e:	2f fd       	sub	sp,-4
80013110:	e3 cd 80 80 	ldm	sp++,r7,pc

80013114 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80013114:	eb cd 40 c0 	pushm	r6-r7,lr
80013118:	1a 97       	mov	r7,sp
8001311a:	20 3d       	sub	sp,12
8001311c:	49 76       	lddpc	r6,80013178 <crc_calculate+0x64>
8001311e:	1e 26       	rsub	r6,pc
80013120:	ef 4c ff f8 	st.w	r7[-8],r12
80013124:	16 98       	mov	r8,r11
80013126:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001312a:	ee c8 00 02 	sub	r8,r7,2
8001312e:	10 9c       	mov	r12,r8
80013130:	ce 5f       	rcall	800130fa <crc_init>
	while (length--) {
80013132:	c0 e8       	rjmp	8001314e <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80013134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013138:	11 88       	ld.ub	r8,r8[0x0]
8001313a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001313e:	2f f9       	sub	r9,-1
80013140:	ef 49 ff f8 	st.w	r7[-8],r9
80013144:	ee c9 00 02 	sub	r9,r7,2
80013148:	12 9b       	mov	r11,r9
8001314a:	10 9c       	mov	r12,r8
8001314c:	c9 2f       	rcall	80013070 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001314e:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80013152:	30 08       	mov	r8,0
80013154:	f0 09 19 00 	cp.h	r9,r8
80013158:	5f 18       	srne	r8
8001315a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001315e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80013162:	20 18       	sub	r8,1
80013164:	ef 58 ff f4 	st.h	r7[-12],r8
80013168:	58 09       	cp.w	r9,0
8001316a:	ce 51       	brne	80013134 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001316c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80013170:	10 9c       	mov	r12,r8
80013172:	2f dd       	sub	sp,-12
80013174:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013178:	80 01       	ld.sh	r1,r0[0x0]
8001317a:	2f a2       	sub	r2,-6

8001317c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001317c:	eb cd 40 c0 	pushm	r6-r7,lr
80013180:	1a 97       	mov	r7,sp
80013182:	20 4d       	sub	sp,16
80013184:	49 66       	lddpc	r6,800131dc <crc_accumulate_buffer+0x60>
80013186:	1e 26       	rsub	r6,pc
80013188:	ef 4c ff f8 	st.w	r7[-8],r12
8001318c:	ef 4b ff f4 	st.w	r7[-12],r11
80013190:	14 98       	mov	r8,r10
80013192:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
80013196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001319a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001319e:	c0 d8       	rjmp	800131b8 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
800131a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800131a4:	11 88       	ld.ub	r8,r8[0x0]
800131a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800131aa:	2f f9       	sub	r9,-1
800131ac:	ef 49 ff fc 	st.w	r7[-4],r9
800131b0:	ee fb ff f8 	ld.w	r11,r7[-8]
800131b4:	10 9c       	mov	r12,r8
800131b6:	c5 df       	rcall	80013070 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
800131b8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800131bc:	30 08       	mov	r8,0
800131be:	f0 09 18 00 	cp.b	r9,r8
800131c2:	5f 18       	srne	r8
800131c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800131c8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800131cc:	20 18       	sub	r8,1
800131ce:	ef 68 ff f0 	st.b	r7[-16],r8
800131d2:	58 09       	cp.w	r9,0
800131d4:	ce 61       	brne	800131a0 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
800131d6:	2f cd       	sub	sp,-16
800131d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800131dc:	80 01       	ld.sh	r1,r0[0x0]
800131de:	30 0a       	mov	r10,0

800131e0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
800131e0:	eb cd 40 c0 	pushm	r6-r7,lr
800131e4:	1a 97       	mov	r7,sp
800131e6:	20 1d       	sub	sp,4
800131e8:	48 96       	lddpc	r6,8001320c <mavlink_get_channel_status+0x2c>
800131ea:	1e 26       	rsub	r6,pc
800131ec:	18 98       	mov	r8,r12
800131ee:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
800131f2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800131f6:	f0 09 15 04 	lsl	r9,r8,0x4
800131fa:	ec f8 08 d8 	ld.w	r8,r6[2264]
800131fe:	f2 08 00 08 	add	r8,r9,r8
}
80013202:	10 9c       	mov	r12,r8
80013204:	2f fd       	sub	sp,-4
80013206:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001320a:	00 00       	add	r0,r0
8001320c:	80 01       	ld.sh	r1,r0[0x0]
8001320e:	30 6e       	mov	lr,6

80013210 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80013210:	eb cd 40 c0 	pushm	r6-r7,lr
80013214:	1a 97       	mov	r7,sp
80013216:	20 9d       	sub	sp,36
80013218:	4b d6       	lddpc	r6,8001330c <_mav_finalize_message_chan_send+0xfc>
8001321a:	1e 26       	rsub	r6,pc
8001321c:	ef 4c ff ec 	st.w	r7[-20],r12
80013220:	ef 4a ff e4 	st.w	r7[-28],r10
80013224:	16 9a       	mov	r10,r11
80013226:	ef 6a ff e8 	st.b	r7[-24],r10
8001322a:	ef 69 ff e0 	st.b	r7[-32],r9
8001322e:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80013232:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013236:	5c 58       	castu.b	r8
80013238:	10 9c       	mov	r12,r8
8001323a:	cd 3f       	rcall	800131e0 <mavlink_get_channel_status>
8001323c:	18 98       	mov	r8,r12
8001323e:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80013242:	3f e8       	mov	r8,-2
80013244:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80013248:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001324c:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80013250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013254:	f1 38 00 0a 	ld.ub	r8,r8[10]
80013258:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001325c:	ec f8 00 6c 	ld.w	r8,r6[108]
80013260:	11 88       	ld.ub	r8,r8[0x0]
80013262:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
80013266:	ec f8 00 6c 	ld.w	r8,r6[108]
8001326a:	11 98       	ld.ub	r8,r8[0x1]
8001326c:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80013270:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80013274:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80013278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001327c:	f1 38 00 0a 	ld.ub	r8,r8[10]
80013280:	2f f8       	sub	r8,-1
80013282:	5c 58       	castu.b	r8
80013284:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013288:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001328c:	ee c8 00 0c 	sub	r8,r7,12
80013290:	2f f8       	sub	r8,-1
80013292:	30 5b       	mov	r11,5
80013294:	10 9c       	mov	r12,r8
80013296:	c3 ff       	rcall	80013114 <crc_calculate>
80013298:	18 98       	mov	r8,r12
8001329a:	5c 88       	casts.h	r8
8001329c:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
800132a0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800132a4:	ee c8 00 06 	sub	r8,r7,6
800132a8:	12 9a       	mov	r10,r9
800132aa:	ee fb ff e4 	ld.w	r11,r7[-28]
800132ae:	10 9c       	mov	r12,r8
800132b0:	c6 6f       	rcall	8001317c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800132b2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800132b6:	ee c9 00 06 	sub	r9,r7,6
800132ba:	12 9b       	mov	r11,r9
800132bc:	10 9c       	mov	r12,r8
800132be:	cd 9e       	rcall	80013070 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800132c0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800132c4:	5c 58       	castu.b	r8
800132c6:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
800132ca:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800132ce:	5c 78       	castu.h	r8
800132d0:	a9 88       	lsr	r8,0x8
800132d2:	5c 88       	casts.h	r8
800132d4:	5c 58       	castu.b	r8
800132d6:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
800132da:	ee c8 00 0c 	sub	r8,r7,12
800132de:	30 6a       	mov	r10,6
800132e0:	10 9b       	mov	r11,r8
800132e2:	ee fc ff ec 	ld.w	r12,r7[-20]
800132e6:	c1 5c       	rcall	80013310 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
800132e8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800132ec:	10 9a       	mov	r10,r8
800132ee:	ee fb ff e4 	ld.w	r11,r7[-28]
800132f2:	ee fc ff ec 	ld.w	r12,r7[-20]
800132f6:	c0 dc       	rcall	80013310 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
800132f8:	ee c8 00 10 	sub	r8,r7,16
800132fc:	30 2a       	mov	r10,2
800132fe:	10 9b       	mov	r11,r8
80013300:	ee fc ff ec 	ld.w	r12,r7[-20]
80013304:	c0 6c       	rcall	80013310 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80013306:	2f 7d       	sub	sp,-36
80013308:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001330c:	80 01       	ld.sh	r1,r0[0x0]
8001330e:	30 9e       	mov	lr,9

80013310 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80013310:	eb cd 40 c0 	pushm	r6-r7,lr
80013314:	1a 97       	mov	r7,sp
80013316:	20 4d       	sub	sp,16
80013318:	49 46       	lddpc	r6,80013368 <_mavlink_send_uart+0x58>
8001331a:	1e 26       	rsub	r6,pc
8001331c:	ef 4c ff f8 	st.w	r7[-8],r12
80013320:	ef 4b ff f4 	st.w	r7[-12],r11
80013324:	14 98       	mov	r8,r10
80013326:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001332a:	30 08       	mov	r8,0
8001332c:	ef 58 ff fe 	st.h	r7[-2],r8
80013330:	c1 28       	rjmp	80013354 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80013332:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013336:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001333a:	f2 08 00 08 	add	r8,r9,r8
8001333e:	11 88       	ld.ub	r8,r8[0x0]
80013340:	10 9b       	mov	r11,r8
80013342:	ee fc ff f8 	ld.w	r12,r7[-8]
80013346:	f0 16 00 cf 	mcall	r6[828]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001334a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001334e:	2f f8       	sub	r8,-1
80013350:	ef 58 ff fe 	st.h	r7[-2],r8
80013354:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013358:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001335c:	f0 09 19 00 	cp.h	r9,r8
80013360:	ce 93       	brcs	80013332 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80013362:	2f cd       	sub	sp,-16
80013364:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013368:	80 01       	ld.sh	r1,r0[0x0]
8001336a:	31 9e       	mov	lr,25

8001336c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001336c:	eb cd 40 80 	pushm	r7,lr
80013370:	1a 97       	mov	r7,sp
80013372:	20 2d       	sub	sp,8
80013374:	ef 4c ff fc 	st.w	r7[-4],r12
80013378:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001337c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013380:	2f f8       	sub	r8,-1
80013382:	11 88       	ld.ub	r8,r8[0x0]
80013384:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013388:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001338a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001338e:	f0 c9 ff ff 	sub	r9,r8,-1
80013392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013396:	11 88       	ld.ub	r8,r8[0x0]
80013398:	b2 88       	st.b	r9[0x0],r8
}
8001339a:	2f ed       	sub	sp,-8
8001339c:	e3 cd 80 80 	ldm	sp++,r7,pc

800133a0 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800133a0:	eb cd 40 80 	pushm	r7,lr
800133a4:	1a 97       	mov	r7,sp
800133a6:	20 2d       	sub	sp,8
800133a8:	ef 4c ff fc 	st.w	r7[-4],r12
800133ac:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800133b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800133b4:	2f d8       	sub	r8,-3
800133b6:	11 88       	ld.ub	r8,r8[0x0]
800133b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800133bc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800133be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133c2:	f0 c9 ff ff 	sub	r9,r8,-1
800133c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800133ca:	2f e8       	sub	r8,-2
800133cc:	11 88       	ld.ub	r8,r8[0x0]
800133ce:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
800133d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133d4:	f0 c9 ff fe 	sub	r9,r8,-2
800133d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800133dc:	2f f8       	sub	r8,-1
800133de:	11 88       	ld.ub	r8,r8[0x0]
800133e0:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
800133e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133e6:	f0 c9 ff fd 	sub	r9,r8,-3
800133ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800133ee:	11 88       	ld.ub	r8,r8[0x0]
800133f0:	b2 88       	st.b	r9[0x0],r8
}
800133f2:	2f ed       	sub	sp,-8
800133f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800133f8 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800133f8:	eb cd 40 c0 	pushm	r6-r7,lr
800133fc:	1a 97       	mov	r7,sp
800133fe:	20 3d       	sub	sp,12
80013400:	49 06       	lddpc	r6,80013440 <mav_array_memcpy+0x48>
80013402:	1e 26       	rsub	r6,pc
80013404:	ef 4c ff fc 	st.w	r7[-4],r12
80013408:	ef 4b ff f8 	st.w	r7[-8],r11
8001340c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80013410:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013414:	58 08       	cp.w	r8,0
80013416:	c0 91       	brne	80013428 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80013418:	ee fa ff f4 	ld.w	r10,r7[-12]
8001341c:	30 0b       	mov	r11,0
8001341e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013422:	f0 16 00 2f 	mcall	r6[188]
80013426:	c0 98       	rjmp	80013438 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80013428:	ee fa ff f4 	ld.w	r10,r7[-12]
8001342c:	ee fb ff f8 	ld.w	r11,r7[-8]
80013430:	ee fc ff fc 	ld.w	r12,r7[-4]
80013434:	f0 16 00 1e 	mcall	r6[120]
	}
}
80013438:	2f dd       	sub	sp,-12
8001343a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001343e:	00 00       	add	r0,r0
80013440:	80 01       	ld.sh	r1,r0[0x0]
80013442:	32 86       	mov	r6,40

80013444 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80013444:	eb cd 40 c0 	pushm	r6-r7,lr
80013448:	1a 97       	mov	r7,sp
8001344a:	20 4d       	sub	sp,16
8001344c:	48 e6       	lddpc	r6,80013484 <_mav_put_char_array+0x40>
8001344e:	1e 26       	rsub	r6,pc
80013450:	ef 4c ff fc 	st.w	r7[-4],r12
80013454:	ef 4a ff f4 	st.w	r7[-12],r10
80013458:	12 98       	mov	r8,r9
8001345a:	16 99       	mov	r9,r11
8001345c:	ef 69 ff f8 	st.b	r7[-8],r9
80013460:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80013464:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80013468:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001346c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013470:	f4 08 00 08 	add	r8,r10,r8
80013474:	12 9a       	mov	r10,r9
80013476:	ee fb ff f4 	ld.w	r11,r7[-12]
8001347a:	10 9c       	mov	r12,r8
8001347c:	cb ef       	rcall	800133f8 <mav_array_memcpy>

}
8001347e:	2f cd       	sub	sp,-16
80013480:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013484:	80 01       	ld.sh	r1,r0[0x0]
80013486:	32 d2       	mov	r2,45

80013488 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80013488:	eb cd 40 c0 	pushm	r6-r7,lr
8001348c:	1a 97       	mov	r7,sp
8001348e:	20 3d       	sub	sp,12
80013490:	48 d6       	lddpc	r6,800134c4 <_MAV_RETURN_float+0x3c>
80013492:	1e 26       	rsub	r6,pc
80013494:	ef 4c ff f8 	st.w	r7[-8],r12
80013498:	16 98       	mov	r8,r11
8001349a:	ef 68 ff f4 	st.b	r7[-12],r8
8001349e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800134a2:	2f 88       	sub	r8,-8
800134a4:	10 99       	mov	r9,r8
800134a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800134aa:	10 09       	add	r9,r8
800134ac:	ee c8 00 04 	sub	r8,r7,4
800134b0:	12 9b       	mov	r11,r9
800134b2:	10 9c       	mov	r12,r8
800134b4:	c7 6f       	rcall	800133a0 <byte_swap_4>
800134b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134ba:	10 9c       	mov	r12,r8
800134bc:	2f dd       	sub	sp,-12
800134be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800134c2:	00 00       	add	r0,r0
800134c4:	80 01       	ld.sh	r1,r0[0x0]
800134c6:	33 16       	mov	r6,49

800134c8 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
800134c8:	eb cd 40 c0 	pushm	r6-r7,lr
800134cc:	1a 97       	mov	r7,sp
800134ce:	20 4d       	sub	sp,16
800134d0:	49 16       	lddpc	r6,80013514 <_MAV_RETURN_char_array+0x4c>
800134d2:	1e 26       	rsub	r6,pc
800134d4:	ef 4c ff fc 	st.w	r7[-4],r12
800134d8:	ef 4b ff f8 	st.w	r7[-8],r11
800134dc:	12 98       	mov	r8,r9
800134de:	14 99       	mov	r9,r10
800134e0:	ef 69 ff f4 	st.b	r7[-12],r9
800134e4:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
800134e8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800134ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134f0:	f0 ca ff f8 	sub	r10,r8,-8
800134f4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800134f8:	f4 08 00 08 	add	r8,r10,r8
800134fc:	12 9a       	mov	r10,r9
800134fe:	10 9b       	mov	r11,r8
80013500:	ee fc ff f8 	ld.w	r12,r7[-8]
80013504:	f0 16 00 1e 	mcall	r6[120]
	return array_length;
80013508:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
8001350c:	10 9c       	mov	r12,r8
8001350e:	2f cd       	sub	sp,-16
80013510:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013514:	80 01       	ld.sh	r1,r0[0x0]
80013516:	33 56       	mov	r6,53

80013518 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80013518:	eb cd 40 c0 	pushm	r6-r7,lr
8001351c:	1a 97       	mov	r7,sp
8001351e:	20 dd       	sub	sp,52
80013520:	4a 16       	lddpc	r6,800135a4 <mavlink_msg_param_value_send+0x8c>
80013522:	1e 26       	rsub	r6,pc
80013524:	ee ce ff f4 	sub	lr,r7,-12
80013528:	ef 4c ff e0 	st.w	r7[-32],r12
8001352c:	ef 4b ff dc 	st.w	r7[-36],r11
80013530:	ef 4a ff d8 	st.w	r7[-40],r10
80013534:	12 9a       	mov	r10,r9
80013536:	10 99       	mov	r9,r8
80013538:	7c 08       	ld.w	r8,lr[0x0]
8001353a:	ef 6a ff d4 	st.b	r7[-44],r10
8001353e:	ef 59 ff d0 	st.h	r7[-48],r9
80013542:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
80013546:	ee c9 00 28 	sub	r9,r7,40
8001354a:	ee c8 00 1c 	sub	r8,r7,28
8001354e:	12 9b       	mov	r11,r9
80013550:	10 9c       	mov	r12,r8
80013552:	c2 7f       	rcall	800133a0 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80013554:	ee c9 00 30 	sub	r9,r7,48
80013558:	ee c8 00 1c 	sub	r8,r7,28
8001355c:	2f c8       	sub	r8,-4
8001355e:	12 9b       	mov	r11,r9
80013560:	10 9c       	mov	r12,r8
80013562:	c0 5f       	rcall	8001336c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
80013564:	ee c9 00 34 	sub	r9,r7,52
80013568:	ee c8 00 1c 	sub	r8,r7,28
8001356c:	2f a8       	sub	r8,-6
8001356e:	12 9b       	mov	r11,r9
80013570:	10 9c       	mov	r12,r8
80013572:	cf de       	rcall	8001336c <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
80013574:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80013578:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
8001357c:	ee c8 00 1c 	sub	r8,r7,28
80013580:	31 09       	mov	r9,16
80013582:	ee fa ff dc 	ld.w	r10,r7[-36]
80013586:	30 8b       	mov	r11,8
80013588:	10 9c       	mov	r12,r8
8001358a:	c5 df       	rcall	80013444 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
8001358c:	ee ca 00 1c 	sub	r10,r7,28
80013590:	e0 68 00 dc 	mov	r8,220
80013594:	31 99       	mov	r9,25
80013596:	31 6b       	mov	r11,22
80013598:	ee fc ff e0 	ld.w	r12,r7[-32]
8001359c:	c3 ae       	rcall	80013210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
8001359e:	2f 3d       	sub	sp,-52
800135a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800135a4:	80 01       	ld.sh	r1,r0[0x0]
800135a6:	33 a6       	mov	r6,58

800135a8 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800135a8:	eb cd 40 80 	pushm	r7,lr
800135ac:	1a 97       	mov	r7,sp
800135ae:	20 1d       	sub	sp,4
800135b0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800135b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135b8:	2f 88       	sub	r8,-8
800135ba:	2f c8       	sub	r8,-4
800135bc:	11 88       	ld.ub	r8,r8[0x0]
}
800135be:	10 9c       	mov	r12,r8
800135c0:	2f fd       	sub	sp,-4
800135c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800135c6 <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
800135c6:	eb cd 40 80 	pushm	r7,lr
800135ca:	1a 97       	mov	r7,sp
800135cc:	20 1d       	sub	sp,4
800135ce:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800135d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135d6:	2f 88       	sub	r8,-8
800135d8:	2f b8       	sub	r8,-5
800135da:	11 88       	ld.ub	r8,r8[0x0]
}
800135dc:	10 9c       	mov	r12,r8
800135de:	2f fd       	sub	sp,-4
800135e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800135e4 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800135e4:	eb cd 40 c0 	pushm	r6-r7,lr
800135e8:	1a 97       	mov	r7,sp
800135ea:	20 2d       	sub	sp,8
800135ec:	48 a6       	lddpc	r6,80013614 <mavlink_msg_param_set_get_param_id+0x30>
800135ee:	1e 26       	rsub	r6,pc
800135f0:	ef 4c ff fc 	st.w	r7[-4],r12
800135f4:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
800135f8:	30 69       	mov	r9,6
800135fa:	31 0a       	mov	r10,16
800135fc:	ee fb ff f8 	ld.w	r11,r7[-8]
80013600:	ee fc ff fc 	ld.w	r12,r7[-4]
80013604:	c6 2f       	rcall	800134c8 <_MAV_RETURN_char_array>
80013606:	18 98       	mov	r8,r12
80013608:	5c 88       	casts.h	r8
8001360a:	5c 88       	casts.h	r8
}
8001360c:	10 9c       	mov	r12,r8
8001360e:	2f ed       	sub	sp,-8
80013610:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013614:	80 01       	ld.sh	r1,r0[0x0]
80013616:	34 72       	mov	r2,71

80013618 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80013618:	eb cd 40 c0 	pushm	r6-r7,lr
8001361c:	1a 97       	mov	r7,sp
8001361e:	20 1d       	sub	sp,4
80013620:	48 76       	lddpc	r6,8001363c <mavlink_msg_param_set_get_param_value+0x24>
80013622:	1e 26       	rsub	r6,pc
80013624:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80013628:	30 0b       	mov	r11,0
8001362a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001362e:	c2 df       	rcall	80013488 <_MAV_RETURN_float>
80013630:	18 98       	mov	r8,r12
}
80013632:	10 9c       	mov	r12,r8
80013634:	2f fd       	sub	sp,-4
80013636:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001363a:	00 00       	add	r0,r0
8001363c:	80 01       	ld.sh	r1,r0[0x0]
8001363e:	34 a6       	mov	r6,74

80013640 <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
80013640:	eb cd 40 80 	pushm	r7,lr
80013644:	1a 97       	mov	r7,sp
80013646:	20 1d       	sub	sp,4
80013648:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
8001364c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013650:	2f 88       	sub	r8,-8
80013652:	2e a8       	sub	r8,-22
80013654:	11 88       	ld.ub	r8,r8[0x0]
}
80013656:	10 9c       	mov	r12,r8
80013658:	2f fd       	sub	sp,-4
8001365a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001365e <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
8001365e:	eb cd 40 c0 	pushm	r6-r7,lr
80013662:	1a 97       	mov	r7,sp
80013664:	20 2d       	sub	sp,8
80013666:	49 76       	lddpc	r6,800136c0 <mavlink_msg_param_set_decode+0x62>
80013668:	1e 26       	rsub	r6,pc
8001366a:	ef 4c ff fc 	st.w	r7[-4],r12
8001366e:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
80013672:	ee fc ff fc 	ld.w	r12,r7[-4]
80013676:	cd 1f       	rcall	80013618 <mavlink_msg_param_set_get_param_value>
80013678:	18 99       	mov	r9,r12
8001367a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001367e:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
80013680:	ee fc ff fc 	ld.w	r12,r7[-4]
80013684:	c9 2f       	rcall	800135a8 <mavlink_msg_param_set_get_target_system>
80013686:	18 98       	mov	r8,r12
80013688:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001368c:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
8001368e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013692:	c9 af       	rcall	800135c6 <mavlink_msg_param_set_get_target_component>
80013694:	18 98       	mov	r8,r12
80013696:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001369a:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
8001369c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800136a0:	2f a8       	sub	r8,-6
800136a2:	10 9b       	mov	r11,r8
800136a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800136a8:	c9 ef       	rcall	800135e4 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800136aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800136ae:	cc 9f       	rcall	80013640 <mavlink_msg_param_set_get_param_type>
800136b0:	18 98       	mov	r8,r12
800136b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800136b6:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800136ba:	2f ed       	sub	sp,-8
800136bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136c0:	80 01       	ld.sh	r1,r0[0x0]
800136c2:	34 ec       	mov	r12,78

800136c4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800136c4:	eb cd 40 c0 	pushm	r6-r7,lr
800136c8:	1a 97       	mov	r7,sp
800136ca:	20 6d       	sub	sp,24
800136cc:	49 e6       	lddpc	r6,80013744 <interpolate+0x80>
800136ce:	1e 26       	rsub	r6,pc
800136d0:	ef 4c ff f8 	st.w	r7[-8],r12
800136d4:	ef 4b ff f4 	st.w	r7[-12],r11
800136d8:	ef 4a ff f0 	st.w	r7[-16],r10
800136dc:	ef 49 ff ec 	st.w	r7[-20],r9
800136e0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800136e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800136e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800136ec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800136f0:	c0 41       	brne	800136f8 <interpolate+0x34>
	{
		return y1;
800136f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800136f6:	c2 38       	rjmp	8001373c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800136f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800136fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013700:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013704:	ee fa ff f8 	ld.w	r10,r7[-8]
80013708:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001370c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80013710:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80013714:	ee fa ff f0 	ld.w	r10,r7[-16]
80013718:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001371c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013720:	12 9b       	mov	r11,r9
80013722:	10 9c       	mov	r12,r8
80013724:	f0 16 00 08 	mcall	r6[32]
80013728:	18 98       	mov	r8,r12
8001372a:	10 99       	mov	r9,r8
8001372c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013730:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013734:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80013738:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001373c:	10 9c       	mov	r12,r8
8001373e:	2f ad       	sub	sp,-24
80013740:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013744:	80 01       	ld.sh	r1,r0[0x0]
80013746:	35 52       	mov	r2,85

80013748 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80013748:	eb cd 40 c0 	pushm	r6-r7,lr
8001374c:	1a 97       	mov	r7,sp
8001374e:	48 a6       	lddpc	r6,80013774 <init_onboard_parameters+0x2c>
80013750:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
80013752:	ec f8 00 28 	ld.w	r8,r6[40]
80013756:	30 09       	mov	r9,0
80013758:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
8001375c:	ec f9 00 28 	ld.w	r9,r6[40]
80013760:	30 08       	mov	r8,0
80013762:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
80013766:	ec f8 00 28 	ld.w	r8,r6[40]
8001376a:	30 09       	mov	r9,0
8001376c:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
80013770:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013774:	80 01       	ld.sh	r1,r0[0x0]
80013776:	35 d4       	mov	r4,93

80013778 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013778:	eb cd 40 e0 	pushm	r5-r7,lr
8001377c:	1a 97       	mov	r7,sp
8001377e:	20 2d       	sub	sp,8
80013780:	4b 66       	lddpc	r6,80013858 <add_parameter_uint8+0xe0>
80013782:	1e 26       	rsub	r6,pc
80013784:	ef 4c ff fc 	st.w	r7[-4],r12
80013788:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
8001378c:	ec f8 00 28 	ld.w	r8,r6[40]
80013790:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013794:	ee fa ff fc 	ld.w	r10,r7[-4]
80013798:	ec fb 00 28 	ld.w	r11,r6[40]
8001379c:	12 98       	mov	r8,r9
8001379e:	a3 78       	lsl	r8,0x3
800137a0:	12 18       	sub	r8,r9
800137a2:	a3 68       	lsl	r8,0x2
800137a4:	f6 08 00 08 	add	r8,r11,r8
800137a8:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
800137aa:	ec f8 00 28 	ld.w	r8,r6[40]
800137ae:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800137b2:	12 98       	mov	r8,r9
800137b4:	a3 78       	lsl	r8,0x3
800137b6:	12 18       	sub	r8,r9
800137b8:	2f f8       	sub	r8,-1
800137ba:	f0 09 15 02 	lsl	r9,r8,0x2
800137be:	ec f8 00 28 	ld.w	r8,r6[40]
800137c2:	f2 08 00 08 	add	r8,r9,r8
800137c6:	ee fb ff f8 	ld.w	r11,r7[-8]
800137ca:	10 9c       	mov	r12,r8
800137cc:	f0 16 00 96 	mcall	r6[600]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
800137d0:	ec f8 00 28 	ld.w	r8,r6[40]
800137d4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800137d8:	ec fa 00 28 	ld.w	r10,r6[40]
800137dc:	12 98       	mov	r8,r9
800137de:	a3 78       	lsl	r8,0x3
800137e0:	12 18       	sub	r8,r9
800137e2:	a3 68       	lsl	r8,0x2
800137e4:	f4 08 00 08 	add	r8,r10,r8
800137e8:	2e c8       	sub	r8,-20
800137ea:	30 19       	mov	r9,1
800137ec:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800137ee:	ec f8 00 28 	ld.w	r8,r6[40]
800137f2:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800137f6:	ee fc ff f8 	ld.w	r12,r7[-8]
800137fa:	f0 16 00 7e 	mcall	r6[504]
800137fe:	18 98       	mov	r8,r12
80013800:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013804:	ec fa 00 28 	ld.w	r10,r6[40]
80013808:	0a 98       	mov	r8,r5
8001380a:	a3 78       	lsl	r8,0x3
8001380c:	0a 18       	sub	r8,r5
8001380e:	a3 68       	lsl	r8,0x2
80013810:	f4 08 00 08 	add	r8,r10,r8
80013814:	f0 ca ff e8 	sub	r10,r8,-24
80013818:	12 98       	mov	r8,r9
8001381a:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
8001381c:	ec f8 00 28 	ld.w	r8,r6[40]
80013820:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013824:	ec fa 00 28 	ld.w	r10,r6[40]
80013828:	12 98       	mov	r8,r9
8001382a:	a3 78       	lsl	r8,0x3
8001382c:	12 18       	sub	r8,r9
8001382e:	a3 68       	lsl	r8,0x2
80013830:	f4 08 00 08 	add	r8,r10,r8
80013834:	f0 c9 ff e8 	sub	r9,r8,-24
80013838:	30 18       	mov	r8,1
8001383a:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
8001383c:	ec f8 00 28 	ld.w	r8,r6[40]
80013840:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013844:	f0 c9 ff ff 	sub	r9,r8,-1
80013848:	ec f8 00 28 	ld.w	r8,r6[40]
8001384c:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013850:	2f ed       	sub	sp,-8
80013852:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013856:	00 00       	add	r0,r0
80013858:	80 01       	ld.sh	r1,r0[0x0]
8001385a:	36 06       	mov	r6,96

8001385c <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
8001385c:	eb cd 40 e0 	pushm	r5-r7,lr
80013860:	1a 97       	mov	r7,sp
80013862:	20 2d       	sub	sp,8
80013864:	4b 66       	lddpc	r6,8001393c <add_parameter_uint32+0xe0>
80013866:	1e 26       	rsub	r6,pc
80013868:	ef 4c ff fc 	st.w	r7[-4],r12
8001386c:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013870:	ec f8 00 28 	ld.w	r8,r6[40]
80013874:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013878:	ee fa ff fc 	ld.w	r10,r7[-4]
8001387c:	ec fb 00 28 	ld.w	r11,r6[40]
80013880:	12 98       	mov	r8,r9
80013882:	a3 78       	lsl	r8,0x3
80013884:	12 18       	sub	r8,r9
80013886:	a3 68       	lsl	r8,0x2
80013888:	f6 08 00 08 	add	r8,r11,r8
8001388c:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
8001388e:	ec f8 00 28 	ld.w	r8,r6[40]
80013892:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013896:	12 98       	mov	r8,r9
80013898:	a3 78       	lsl	r8,0x3
8001389a:	12 18       	sub	r8,r9
8001389c:	2f f8       	sub	r8,-1
8001389e:	f0 09 15 02 	lsl	r9,r8,0x2
800138a2:	ec f8 00 28 	ld.w	r8,r6[40]
800138a6:	f2 08 00 08 	add	r8,r9,r8
800138aa:	ee fb ff f8 	ld.w	r11,r7[-8]
800138ae:	10 9c       	mov	r12,r8
800138b0:	f0 16 00 96 	mcall	r6[600]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
800138b4:	ec f8 00 28 	ld.w	r8,r6[40]
800138b8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800138bc:	ec fa 00 28 	ld.w	r10,r6[40]
800138c0:	12 98       	mov	r8,r9
800138c2:	a3 78       	lsl	r8,0x3
800138c4:	12 18       	sub	r8,r9
800138c6:	a3 68       	lsl	r8,0x2
800138c8:	f4 08 00 08 	add	r8,r10,r8
800138cc:	2e c8       	sub	r8,-20
800138ce:	30 59       	mov	r9,5
800138d0:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800138d2:	ec f8 00 28 	ld.w	r8,r6[40]
800138d6:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800138da:	ee fc ff f8 	ld.w	r12,r7[-8]
800138de:	f0 16 00 7e 	mcall	r6[504]
800138e2:	18 98       	mov	r8,r12
800138e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800138e8:	ec fa 00 28 	ld.w	r10,r6[40]
800138ec:	0a 98       	mov	r8,r5
800138ee:	a3 78       	lsl	r8,0x3
800138f0:	0a 18       	sub	r8,r5
800138f2:	a3 68       	lsl	r8,0x2
800138f4:	f4 08 00 08 	add	r8,r10,r8
800138f8:	f0 ca ff e8 	sub	r10,r8,-24
800138fc:	12 98       	mov	r8,r9
800138fe:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013900:	ec f8 00 28 	ld.w	r8,r6[40]
80013904:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013908:	ec fa 00 28 	ld.w	r10,r6[40]
8001390c:	12 98       	mov	r8,r9
8001390e:	a3 78       	lsl	r8,0x3
80013910:	12 18       	sub	r8,r9
80013912:	a3 68       	lsl	r8,0x2
80013914:	f4 08 00 08 	add	r8,r10,r8
80013918:	f0 c9 ff e8 	sub	r9,r8,-24
8001391c:	30 18       	mov	r8,1
8001391e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013920:	ec f8 00 28 	ld.w	r8,r6[40]
80013924:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013928:	f0 c9 ff ff 	sub	r9,r8,-1
8001392c:	ec f8 00 28 	ld.w	r8,r6[40]
80013930:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013934:	2f ed       	sub	sp,-8
80013936:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001393a:	00 00       	add	r0,r0
8001393c:	80 01       	ld.sh	r1,r0[0x0]
8001393e:	36 ea       	mov	r10,110

80013940 <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80013940:	eb cd 40 e0 	pushm	r5-r7,lr
80013944:	1a 97       	mov	r7,sp
80013946:	20 2d       	sub	sp,8
80013948:	4b 66       	lddpc	r6,80013a20 <add_parameter_int32+0xe0>
8001394a:	1e 26       	rsub	r6,pc
8001394c:	ef 4c ff fc 	st.w	r7[-4],r12
80013950:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013954:	ec f8 00 28 	ld.w	r8,r6[40]
80013958:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001395c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013960:	ec fb 00 28 	ld.w	r11,r6[40]
80013964:	12 98       	mov	r8,r9
80013966:	a3 78       	lsl	r8,0x3
80013968:	12 18       	sub	r8,r9
8001396a:	a3 68       	lsl	r8,0x2
8001396c:	f6 08 00 08 	add	r8,r11,r8
80013970:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013972:	ec f8 00 28 	ld.w	r8,r6[40]
80013976:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001397a:	12 98       	mov	r8,r9
8001397c:	a3 78       	lsl	r8,0x3
8001397e:	12 18       	sub	r8,r9
80013980:	2f f8       	sub	r8,-1
80013982:	f0 09 15 02 	lsl	r9,r8,0x2
80013986:	ec f8 00 28 	ld.w	r8,r6[40]
8001398a:	f2 08 00 08 	add	r8,r9,r8
8001398e:	ee fb ff f8 	ld.w	r11,r7[-8]
80013992:	10 9c       	mov	r12,r8
80013994:	f0 16 00 96 	mcall	r6[600]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80013998:	ec f8 00 28 	ld.w	r8,r6[40]
8001399c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800139a0:	ec fa 00 28 	ld.w	r10,r6[40]
800139a4:	12 98       	mov	r8,r9
800139a6:	a3 78       	lsl	r8,0x3
800139a8:	12 18       	sub	r8,r9
800139aa:	a3 68       	lsl	r8,0x2
800139ac:	f4 08 00 08 	add	r8,r10,r8
800139b0:	2e c8       	sub	r8,-20
800139b2:	30 69       	mov	r9,6
800139b4:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800139b6:	ec f8 00 28 	ld.w	r8,r6[40]
800139ba:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800139be:	ee fc ff f8 	ld.w	r12,r7[-8]
800139c2:	f0 16 00 7e 	mcall	r6[504]
800139c6:	18 98       	mov	r8,r12
800139c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800139cc:	ec fa 00 28 	ld.w	r10,r6[40]
800139d0:	0a 98       	mov	r8,r5
800139d2:	a3 78       	lsl	r8,0x3
800139d4:	0a 18       	sub	r8,r5
800139d6:	a3 68       	lsl	r8,0x2
800139d8:	f4 08 00 08 	add	r8,r10,r8
800139dc:	f0 ca ff e8 	sub	r10,r8,-24
800139e0:	12 98       	mov	r8,r9
800139e2:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800139e4:	ec f8 00 28 	ld.w	r8,r6[40]
800139e8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800139ec:	ec fa 00 28 	ld.w	r10,r6[40]
800139f0:	12 98       	mov	r8,r9
800139f2:	a3 78       	lsl	r8,0x3
800139f4:	12 18       	sub	r8,r9
800139f6:	a3 68       	lsl	r8,0x2
800139f8:	f4 08 00 08 	add	r8,r10,r8
800139fc:	f0 c9 ff e8 	sub	r9,r8,-24
80013a00:	30 18       	mov	r8,1
80013a02:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013a04:	ec f8 00 28 	ld.w	r8,r6[40]
80013a08:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013a0c:	f0 c9 ff ff 	sub	r9,r8,-1
80013a10:	ec f8 00 28 	ld.w	r8,r6[40]
80013a14:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013a18:	2f ed       	sub	sp,-8
80013a1a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013a1e:	00 00       	add	r0,r0
80013a20:	80 01       	ld.sh	r1,r0[0x0]
80013a22:	37 ce       	mov	lr,124

80013a24 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80013a24:	eb cd 40 e0 	pushm	r5-r7,lr
80013a28:	1a 97       	mov	r7,sp
80013a2a:	20 2d       	sub	sp,8
80013a2c:	4b 66       	lddpc	r6,80013b04 <add_parameter_float+0xe0>
80013a2e:	1e 26       	rsub	r6,pc
80013a30:	ef 4c ff fc 	st.w	r7[-4],r12
80013a34:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013a38:	ec f8 00 28 	ld.w	r8,r6[40]
80013a3c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a40:	ec fa 00 28 	ld.w	r10,r6[40]
80013a44:	12 98       	mov	r8,r9
80013a46:	a3 78       	lsl	r8,0x3
80013a48:	12 18       	sub	r8,r9
80013a4a:	a3 68       	lsl	r8,0x2
80013a4c:	f4 08 00 08 	add	r8,r10,r8
80013a50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013a54:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013a56:	ec f8 00 28 	ld.w	r8,r6[40]
80013a5a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a5e:	12 98       	mov	r8,r9
80013a60:	a3 78       	lsl	r8,0x3
80013a62:	12 18       	sub	r8,r9
80013a64:	2f f8       	sub	r8,-1
80013a66:	f0 09 15 02 	lsl	r9,r8,0x2
80013a6a:	ec f8 00 28 	ld.w	r8,r6[40]
80013a6e:	f2 08 00 08 	add	r8,r9,r8
80013a72:	ee fb ff f8 	ld.w	r11,r7[-8]
80013a76:	10 9c       	mov	r12,r8
80013a78:	f0 16 00 96 	mcall	r6[600]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80013a7c:	ec f8 00 28 	ld.w	r8,r6[40]
80013a80:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a84:	ec fa 00 28 	ld.w	r10,r6[40]
80013a88:	12 98       	mov	r8,r9
80013a8a:	a3 78       	lsl	r8,0x3
80013a8c:	12 18       	sub	r8,r9
80013a8e:	a3 68       	lsl	r8,0x2
80013a90:	f4 08 00 08 	add	r8,r10,r8
80013a94:	2e c8       	sub	r8,-20
80013a96:	30 99       	mov	r9,9
80013a98:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013a9a:	ec f8 00 28 	ld.w	r8,r6[40]
80013a9e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013aa2:	ee fc ff f8 	ld.w	r12,r7[-8]
80013aa6:	f0 16 00 7e 	mcall	r6[504]
80013aaa:	18 98       	mov	r8,r12
80013aac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013ab0:	ec fa 00 28 	ld.w	r10,r6[40]
80013ab4:	0a 98       	mov	r8,r5
80013ab6:	a3 78       	lsl	r8,0x3
80013ab8:	0a 18       	sub	r8,r5
80013aba:	a3 68       	lsl	r8,0x2
80013abc:	f4 08 00 08 	add	r8,r10,r8
80013ac0:	f0 ca ff e8 	sub	r10,r8,-24
80013ac4:	12 98       	mov	r8,r9
80013ac6:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013ac8:	ec f8 00 28 	ld.w	r8,r6[40]
80013acc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ad0:	ec fa 00 28 	ld.w	r10,r6[40]
80013ad4:	12 98       	mov	r8,r9
80013ad6:	a3 78       	lsl	r8,0x3
80013ad8:	12 18       	sub	r8,r9
80013ada:	a3 68       	lsl	r8,0x2
80013adc:	f4 08 00 08 	add	r8,r10,r8
80013ae0:	f0 c9 ff e8 	sub	r9,r8,-24
80013ae4:	30 18       	mov	r8,1
80013ae6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013ae8:	ec f8 00 28 	ld.w	r8,r6[40]
80013aec:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013af0:	f0 c9 ff ff 	sub	r9,r8,-1
80013af4:	ec f8 00 28 	ld.w	r8,r6[40]
80013af8:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013afc:	2f ed       	sub	sp,-8
80013afe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013b02:	00 00       	add	r0,r0
80013b04:	80 01       	ld.sh	r1,r0[0x0]
80013b06:	38 b2       	mov	r2,-117

80013b08 <send_all_parameters>:

void send_all_parameters() {
80013b08:	eb cd 40 c0 	pushm	r6-r7,lr
80013b0c:	1a 97       	mov	r7,sp
80013b0e:	20 1d       	sub	sp,4
80013b10:	49 26       	lddpc	r6,80013b58 <send_all_parameters+0x50>
80013b12:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013b14:	30 08       	mov	r8,0
80013b16:	ef 68 ff ff 	st.b	r7[-1],r8
80013b1a:	c1 48       	rjmp	80013b42 <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80013b1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013b20:	ec fa 00 28 	ld.w	r10,r6[40]
80013b24:	12 98       	mov	r8,r9
80013b26:	a3 78       	lsl	r8,0x3
80013b28:	12 18       	sub	r8,r9
80013b2a:	a3 68       	lsl	r8,0x2
80013b2c:	f4 08 00 08 	add	r8,r10,r8
80013b30:	f0 c9 ff e8 	sub	r9,r8,-24
80013b34:	30 18       	mov	r8,1
80013b36:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013b38:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013b3c:	2f f8       	sub	r8,-1
80013b3e:	ef 68 ff ff 	st.b	r7[-1],r8
80013b42:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013b46:	ec f8 00 28 	ld.w	r8,r6[40]
80013b4a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013b4e:	10 39       	cp.w	r9,r8
80013b50:	ce 65       	brlt	80013b1c <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80013b52:	2f fd       	sub	sp,-4
80013b54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013b58:	80 01       	ld.sh	r1,r0[0x0]
80013b5a:	39 96       	mov	r6,-103

80013b5c <send_all_parameters_now>:

void send_all_parameters_now() {
80013b5c:	eb cd 40 e0 	pushm	r5-r7,lr
80013b60:	1a 97       	mov	r7,sp
80013b62:	20 1d       	sub	sp,4
80013b64:	4a d6       	lddpc	r6,80013c18 <send_all_parameters_now+0xbc>
80013b66:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013b68:	30 08       	mov	r8,0
80013b6a:	ef 68 ff ff 	st.b	r7[-1],r8
80013b6e:	c4 a8       	rjmp	80013c02 <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013b70:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013b74:	ec f8 00 28 	ld.w	r8,r6[40]
80013b78:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013b7c:	5c 88       	casts.h	r8
80013b7e:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013b82:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013b86:	ec fa 00 28 	ld.w	r10,r6[40]
80013b8a:	12 98       	mov	r8,r9
80013b8c:	a3 78       	lsl	r8,0x3
80013b8e:	12 18       	sub	r8,r9
80013b90:	a3 68       	lsl	r8,0x2
80013b92:	f4 08 00 08 	add	r8,r10,r8
80013b96:	2e c8       	sub	r8,-20
80013b98:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013b9a:	5c 58       	castu.b	r8
80013b9c:	10 9c       	mov	r12,r8
80013b9e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013ba2:	ec fa 00 28 	ld.w	r10,r6[40]
80013ba6:	12 98       	mov	r8,r9
80013ba8:	a3 78       	lsl	r8,0x3
80013baa:	12 18       	sub	r8,r9
80013bac:	a3 68       	lsl	r8,0x2
80013bae:	f4 08 00 08 	add	r8,r10,r8
80013bb2:	70 08       	ld.w	r8,r8[0x0]
80013bb4:	70 0a       	ld.w	r10,r8[0x0]
80013bb6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013bba:	12 98       	mov	r8,r9
80013bbc:	a3 78       	lsl	r8,0x3
80013bbe:	12 18       	sub	r8,r9
80013bc0:	2f f8       	sub	r8,-1
80013bc2:	f0 09 15 02 	lsl	r9,r8,0x2
80013bc6:	ec f8 00 28 	ld.w	r8,r6[40]
80013bca:	f2 08 00 0b 	add	r11,r9,r8
80013bce:	1a d5       	st.w	--sp,r5
80013bd0:	1c 98       	mov	r8,lr
80013bd2:	18 99       	mov	r9,r12
80013bd4:	30 0c       	mov	r12,0
80013bd6:	fe b0 fc a1 	rcall	80013518 <mavlink_msg_param_value_send>
80013bda:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
80013bdc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013be0:	ec fa 00 28 	ld.w	r10,r6[40]
80013be4:	12 98       	mov	r8,r9
80013be6:	a3 78       	lsl	r8,0x3
80013be8:	12 18       	sub	r8,r9
80013bea:	a3 68       	lsl	r8,0x2
80013bec:	f4 08 00 08 	add	r8,r10,r8
80013bf0:	f0 c9 ff e8 	sub	r9,r8,-24
80013bf4:	30 08       	mov	r8,0
80013bf6:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013bf8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013bfc:	2f f8       	sub	r8,-1
80013bfe:	ef 68 ff ff 	st.b	r7[-1],r8
80013c02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013c06:	ec f8 00 28 	ld.w	r8,r6[40]
80013c0a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013c0e:	10 39       	cp.w	r9,r8
80013c10:	cb 05       	brlt	80013b70 <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80013c12:	2f fd       	sub	sp,-4
80013c14:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013c18:	80 01       	ld.sh	r1,r0[0x0]
80013c1a:	39 ea       	mov	r10,-98

80013c1c <send_scheduled_parameters>:


void send_scheduled_parameters() {
80013c1c:	eb cd 40 e0 	pushm	r5-r7,lr
80013c20:	1a 97       	mov	r7,sp
80013c22:	20 1d       	sub	sp,4
80013c24:	4b 56       	lddpc	r6,80013cf8 <send_scheduled_parameters+0xdc>
80013c26:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013c28:	30 08       	mov	r8,0
80013c2a:	ef 68 ff ff 	st.b	r7[-1],r8
80013c2e:	c5 98       	rjmp	80013ce0 <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80013c30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013c34:	ec fa 00 28 	ld.w	r10,r6[40]
80013c38:	12 98       	mov	r8,r9
80013c3a:	a3 78       	lsl	r8,0x3
80013c3c:	12 18       	sub	r8,r9
80013c3e:	a3 68       	lsl	r8,0x2
80013c40:	f4 08 00 08 	add	r8,r10,r8
80013c44:	2e 88       	sub	r8,-24
80013c46:	11 a8       	ld.ub	r8,r8[0x2]
80013c48:	58 08       	cp.w	r8,0
80013c4a:	c4 60       	breq	80013cd6 <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013c4c:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013c50:	ec f8 00 28 	ld.w	r8,r6[40]
80013c54:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013c58:	5c 88       	casts.h	r8
80013c5a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013c5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013c62:	ec fa 00 28 	ld.w	r10,r6[40]
80013c66:	12 98       	mov	r8,r9
80013c68:	a3 78       	lsl	r8,0x3
80013c6a:	12 18       	sub	r8,r9
80013c6c:	a3 68       	lsl	r8,0x2
80013c6e:	f4 08 00 08 	add	r8,r10,r8
80013c72:	2e c8       	sub	r8,-20
80013c74:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013c76:	5c 58       	castu.b	r8
80013c78:	10 9c       	mov	r12,r8
80013c7a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013c7e:	ec fa 00 28 	ld.w	r10,r6[40]
80013c82:	12 98       	mov	r8,r9
80013c84:	a3 78       	lsl	r8,0x3
80013c86:	12 18       	sub	r8,r9
80013c88:	a3 68       	lsl	r8,0x2
80013c8a:	f4 08 00 08 	add	r8,r10,r8
80013c8e:	70 08       	ld.w	r8,r8[0x0]
80013c90:	70 0a       	ld.w	r10,r8[0x0]
80013c92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013c96:	12 98       	mov	r8,r9
80013c98:	a3 78       	lsl	r8,0x3
80013c9a:	12 18       	sub	r8,r9
80013c9c:	2f f8       	sub	r8,-1
80013c9e:	f0 09 15 02 	lsl	r9,r8,0x2
80013ca2:	ec f8 00 28 	ld.w	r8,r6[40]
80013ca6:	f2 08 00 0b 	add	r11,r9,r8
80013caa:	1a d5       	st.w	--sp,r5
80013cac:	1c 98       	mov	r8,lr
80013cae:	18 99       	mov	r9,r12
80013cb0:	30 0c       	mov	r12,0
80013cb2:	fe b0 fc 33 	rcall	80013518 <mavlink_msg_param_value_send>
80013cb6:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80013cb8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cbc:	ec fa 00 28 	ld.w	r10,r6[40]
80013cc0:	12 98       	mov	r8,r9
80013cc2:	a3 78       	lsl	r8,0x3
80013cc4:	12 18       	sub	r8,r9
80013cc6:	a3 68       	lsl	r8,0x2
80013cc8:	f4 08 00 08 	add	r8,r10,r8
80013ccc:	f0 c9 ff e8 	sub	r9,r8,-24
80013cd0:	30 08       	mov	r8,0
80013cd2:	b2 a8       	st.b	r9[0x2],r8
			return;
80013cd4:	c0 e8       	rjmp	80013cf0 <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cd6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013cda:	2f f8       	sub	r8,-1
80013cdc:	ef 68 ff ff 	st.b	r7[-1],r8
80013ce0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013ce4:	ec f8 00 28 	ld.w	r8,r6[40]
80013ce8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013cec:	10 39       	cp.w	r9,r8
80013cee:	ca 15       	brlt	80013c30 <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80013cf0:	2f fd       	sub	sp,-4
80013cf2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013cf6:	00 00       	add	r0,r0
80013cf8:	80 01       	ld.sh	r1,r0[0x0]
80013cfa:	3a aa       	mov	r10,-86

80013cfc <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80013cfc:	eb cd 40 c0 	pushm	r6-r7,lr
80013d00:	1a 97       	mov	r7,sp
80013d02:	20 4d       	sub	sp,16
80013d04:	4d 26       	lddpc	r6,80013e4c <send_parameter+0x150>
80013d06:	1e 26       	rsub	r6,pc
80013d08:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80013d0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013d10:	90 09       	ld.sh	r9,r8[0x0]
80013d12:	3f f8       	mov	r8,-1
80013d14:	f0 09 19 00 	cp.h	r9,r8
80013d18:	c1 d0       	breq	80013d52 <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013d1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013d1e:	90 08       	ld.sh	r8,r8[0x0]
80013d20:	10 99       	mov	r9,r8
80013d22:	ec f8 00 28 	ld.w	r8,r6[40]
80013d26:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d2a:	10 39       	cp.w	r9,r8
80013d2c:	e0 89 00 8b 	brgt	80013e42 <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80013d30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013d34:	90 08       	ld.sh	r8,r8[0x0]
80013d36:	10 99       	mov	r9,r8
80013d38:	ec fa 00 28 	ld.w	r10,r6[40]
80013d3c:	12 98       	mov	r8,r9
80013d3e:	a3 78       	lsl	r8,0x3
80013d40:	12 18       	sub	r8,r9
80013d42:	a3 68       	lsl	r8,0x2
80013d44:	f4 08 00 08 	add	r8,r10,r8
80013d48:	f0 c9 ff e8 	sub	r9,r8,-24
80013d4c:	30 18       	mov	r8,1
80013d4e:	b2 a8       	st.b	r9[0x2],r8
80013d50:	c7 a8       	rjmp	80013e44 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80013d52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013d56:	2f c8       	sub	r8,-4
80013d58:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013d5c:	30 08       	mov	r8,0
80013d5e:	ef 58 ff fa 	st.h	r7[-6],r8
80013d62:	c6 78       	rjmp	80013e30 <send_parameter+0x134>
			bool match = true;
80013d64:	30 18       	mov	r8,1
80013d66:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013d6a:	30 08       	mov	r8,0
80013d6c:	ef 58 ff fe 	st.h	r7[-2],r8
80013d70:	c3 38       	rjmp	80013dd6 <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013d72:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013d76:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013d7a:	ec fb 00 28 	ld.w	r11,r6[40]
80013d7e:	12 98       	mov	r8,r9
80013d80:	a3 78       	lsl	r8,0x3
80013d82:	12 18       	sub	r8,r9
80013d84:	a3 68       	lsl	r8,0x2
80013d86:	f6 08 00 08 	add	r8,r11,r8
80013d8a:	14 08       	add	r8,r10
80013d8c:	2f c8       	sub	r8,-4
80013d8e:	11 89       	ld.ub	r9,r8[0x0]
80013d90:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013d94:	ee fa ff f4 	ld.w	r10,r7[-12]
80013d98:	f4 08 00 08 	add	r8,r10,r8
80013d9c:	11 88       	ld.ub	r8,r8[0x0]
80013d9e:	f0 09 18 00 	cp.b	r9,r8
80013da2:	c0 40       	breq	80013daa <send_parameter+0xae>
					match = false;
80013da4:	30 08       	mov	r8,0
80013da6:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80013daa:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013dae:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013db2:	ec fb 00 28 	ld.w	r11,r6[40]
80013db6:	12 98       	mov	r8,r9
80013db8:	a3 78       	lsl	r8,0x3
80013dba:	12 18       	sub	r8,r9
80013dbc:	a3 68       	lsl	r8,0x2
80013dbe:	f6 08 00 08 	add	r8,r11,r8
80013dc2:	14 08       	add	r8,r10
80013dc4:	2f c8       	sub	r8,-4
80013dc6:	11 88       	ld.ub	r8,r8[0x0]
80013dc8:	58 08       	cp.w	r8,0
80013dca:	c1 80       	breq	80013dfa <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013dcc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013dd0:	2f f8       	sub	r8,-1
80013dd2:	ef 58 ff fe 	st.h	r7[-2],r8
80013dd6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013dda:	ec fa 00 28 	ld.w	r10,r6[40]
80013dde:	12 98       	mov	r8,r9
80013de0:	a3 78       	lsl	r8,0x3
80013de2:	12 18       	sub	r8,r9
80013de4:	a3 68       	lsl	r8,0x2
80013de6:	f4 08 00 08 	add	r8,r10,r8
80013dea:	2e 88       	sub	r8,-24
80013dec:	11 88       	ld.ub	r8,r8[0x0]
80013dee:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013df2:	f0 09 19 00 	cp.h	r9,r8
80013df6:	cb e3       	brcs	80013d72 <send_parameter+0x76>
80013df8:	c0 28       	rjmp	80013dfc <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013dfa:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013dfc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013e00:	30 08       	mov	r8,0
80013e02:	f0 09 18 00 	cp.b	r9,r8
80013e06:	c1 00       	breq	80013e26 <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80013e08:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013e0c:	ec fa 00 28 	ld.w	r10,r6[40]
80013e10:	12 98       	mov	r8,r9
80013e12:	a3 78       	lsl	r8,0x3
80013e14:	12 18       	sub	r8,r9
80013e16:	a3 68       	lsl	r8,0x2
80013e18:	f4 08 00 08 	add	r8,r10,r8
80013e1c:	f0 c9 ff e8 	sub	r9,r8,-24
80013e20:	30 18       	mov	r8,1
80013e22:	b2 a8       	st.b	r9[0x2],r8

				break;
80013e24:	c1 08       	rjmp	80013e44 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013e26:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013e2a:	2f f8       	sub	r8,-1
80013e2c:	ef 58 ff fa 	st.h	r7[-6],r8
80013e30:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013e34:	ec f8 00 28 	ld.w	r8,r6[40]
80013e38:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013e3c:	10 39       	cp.w	r9,r8
80013e3e:	c9 35       	brlt	80013d64 <send_parameter+0x68>
80013e40:	c0 28       	rjmp	80013e44 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013e42:	d7 03       	nop

				break;
			}					
		}
	}
}
80013e44:	2f cd       	sub	sp,-16
80013e46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013e4a:	00 00       	add	r0,r0
80013e4c:	80 01       	ld.sh	r1,r0[0x0]
80013e4e:	3b 8a       	mov	r10,-72

80013e50 <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80013e50:	eb cd 40 c0 	pushm	r6-r7,lr
80013e54:	1a 97       	mov	r7,sp
80013e56:	20 ad       	sub	sp,40
80013e58:	4e 76       	lddpc	r6,80013ff4 <receive_parameter+0x1a4>
80013e5a:	1e 26       	rsub	r6,pc
80013e5c:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80013e60:	ee f8 ff d8 	ld.w	r8,r7[-40]
80013e64:	ee c9 00 24 	sub	r9,r7,36
80013e68:	12 9b       	mov	r11,r9
80013e6a:	10 9c       	mov	r12,r8
80013e6c:	fe b0 fb f9 	rcall	8001365e <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80013e70:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80013e74:	ec f8 00 6c 	ld.w	r8,r6[108]
80013e78:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80013e7a:	f0 09 18 00 	cp.b	r9,r8
80013e7e:	e0 81 00 b7 	brne	80013fec <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80013e82:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80013e86:	ec f8 00 6c 	ld.w	r8,r6[108]
80013e8a:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80013e8c:	f0 09 18 00 	cp.b	r9,r8
80013e90:	e0 81 00 ae 	brne	80013fec <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80013e94:	ee c8 00 24 	sub	r8,r7,36
80013e98:	2f a8       	sub	r8,-6
80013e9a:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013e9e:	30 08       	mov	r8,0
80013ea0:	ef 58 ff fa 	st.h	r7[-6],r8
80013ea4:	c9 78       	rjmp	80013fd2 <receive_parameter+0x182>
			bool match = true;
80013ea6:	30 18       	mov	r8,1
80013ea8:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013eac:	30 08       	mov	r8,0
80013eae:	ef 58 ff fe 	st.h	r7[-2],r8
80013eb2:	c3 38       	rjmp	80013f18 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013eb4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013eb8:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013ebc:	ec fb 00 28 	ld.w	r11,r6[40]
80013ec0:	12 98       	mov	r8,r9
80013ec2:	a3 78       	lsl	r8,0x3
80013ec4:	12 18       	sub	r8,r9
80013ec6:	a3 68       	lsl	r8,0x2
80013ec8:	f6 08 00 08 	add	r8,r11,r8
80013ecc:	14 08       	add	r8,r10
80013ece:	2f c8       	sub	r8,-4
80013ed0:	11 89       	ld.ub	r9,r8[0x0]
80013ed2:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013ed6:	ee fa ff f4 	ld.w	r10,r7[-12]
80013eda:	f4 08 00 08 	add	r8,r10,r8
80013ede:	11 88       	ld.ub	r8,r8[0x0]
80013ee0:	f0 09 18 00 	cp.b	r9,r8
80013ee4:	c0 40       	breq	80013eec <receive_parameter+0x9c>
					match = false;
80013ee6:	30 08       	mov	r8,0
80013ee8:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80013eec:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013ef0:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013ef4:	ec fb 00 28 	ld.w	r11,r6[40]
80013ef8:	12 98       	mov	r8,r9
80013efa:	a3 78       	lsl	r8,0x3
80013efc:	12 18       	sub	r8,r9
80013efe:	a3 68       	lsl	r8,0x2
80013f00:	f6 08 00 08 	add	r8,r11,r8
80013f04:	14 08       	add	r8,r10
80013f06:	2f c8       	sub	r8,-4
80013f08:	11 88       	ld.ub	r8,r8[0x0]
80013f0a:	58 08       	cp.w	r8,0
80013f0c:	c1 80       	breq	80013f3c <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f0e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013f12:	2f f8       	sub	r8,-1
80013f14:	ef 58 ff fe 	st.h	r7[-2],r8
80013f18:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f1c:	ec fa 00 28 	ld.w	r10,r6[40]
80013f20:	12 98       	mov	r8,r9
80013f22:	a3 78       	lsl	r8,0x3
80013f24:	12 18       	sub	r8,r9
80013f26:	a3 68       	lsl	r8,0x2
80013f28:	f4 08 00 08 	add	r8,r10,r8
80013f2c:	2e 88       	sub	r8,-24
80013f2e:	11 88       	ld.ub	r8,r8[0x0]
80013f30:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013f34:	f0 09 19 00 	cp.h	r9,r8
80013f38:	cb e3       	brcs	80013eb4 <receive_parameter+0x64>
80013f3a:	c0 28       	rjmp	80013f3e <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013f3c:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013f3e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013f42:	30 08       	mov	r8,0
80013f44:	f0 09 18 00 	cp.b	r9,r8
80013f48:	c4 00       	breq	80013fc8 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
80013f4a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f4e:	ec fa 00 28 	ld.w	r10,r6[40]
80013f52:	12 98       	mov	r8,r9
80013f54:	a3 78       	lsl	r8,0x3
80013f56:	12 18       	sub	r8,r9
80013f58:	a3 68       	lsl	r8,0x2
80013f5a:	f4 08 00 08 	add	r8,r10,r8
80013f5e:	70 08       	ld.w	r8,r8[0x0]
80013f60:	70 09       	ld.w	r9,r8[0x0]
80013f62:	ee f8 ff dc 	ld.w	r8,r7[-36]
80013f66:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013f6a:	c3 e0       	breq	80013fe6 <receive_parameter+0x196>
80013f6c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80013f70:	10 9a       	mov	r10,r8
80013f72:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f76:	ec fb 00 28 	ld.w	r11,r6[40]
80013f7a:	12 98       	mov	r8,r9
80013f7c:	a3 78       	lsl	r8,0x3
80013f7e:	12 18       	sub	r8,r9
80013f80:	a3 68       	lsl	r8,0x2
80013f82:	f6 08 00 08 	add	r8,r11,r8
80013f86:	2e c8       	sub	r8,-20
80013f88:	70 08       	ld.w	r8,r8[0x0]
80013f8a:	10 3a       	cp.w	r10,r8
80013f8c:	c2 f1       	brne	80013fea <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80013f8e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f92:	ec fa 00 28 	ld.w	r10,r6[40]
80013f96:	12 98       	mov	r8,r9
80013f98:	a3 78       	lsl	r8,0x3
80013f9a:	12 18       	sub	r8,r9
80013f9c:	a3 68       	lsl	r8,0x2
80013f9e:	f4 08 00 08 	add	r8,r10,r8
80013fa2:	70 08       	ld.w	r8,r8[0x0]
80013fa4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80013fa8:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80013faa:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fae:	ec fa 00 28 	ld.w	r10,r6[40]
80013fb2:	12 98       	mov	r8,r9
80013fb4:	a3 78       	lsl	r8,0x3
80013fb6:	12 18       	sub	r8,r9
80013fb8:	a3 68       	lsl	r8,0x2
80013fba:	f4 08 00 08 	add	r8,r10,r8
80013fbe:	f0 c9 ff e8 	sub	r9,r8,-24
80013fc2:	30 18       	mov	r8,1
80013fc4:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
80013fc6:	c1 38       	rjmp	80013fec <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013fc8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013fcc:	2f f8       	sub	r8,-1
80013fce:	ef 58 ff fa 	st.h	r7[-6],r8
80013fd2:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fd6:	ec f8 00 28 	ld.w	r8,r6[40]
80013fda:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013fde:	10 39       	cp.w	r9,r8
80013fe0:	fe 95 ff 63 	brlt	80013ea6 <receive_parameter+0x56>
80013fe4:	c0 48       	rjmp	80013fec <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
80013fe6:	d7 03       	nop
80013fe8:	c0 28       	rjmp	80013fec <receive_parameter+0x19c>
80013fea:	d7 03       	nop
			}
		}
	}
}
80013fec:	2f 6d       	sub	sp,-40
80013fee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013ff2:	00 00       	add	r0,r0
80013ff4:	80 01       	ld.sh	r1,r0[0x0]
80013ff6:	3c de       	mov	lr,-51
80013ff8:	46 6c       	lddsp	r12,sp[0x198]
80013ffa:	61 73       	ld.w	r3,r0[0x5c]
80013ffc:	68 20       	ld.w	r0,r4[0x8]
80013ffe:	72 65       	ld.w	r5,r9[0x18]
80014000:	61 64       	ld.w	r4,r0[0x58]
80014002:	20 73       	sub	r3,7
80014004:	75 63       	ld.w	r3,r10[0x58]
80014006:	63 65       	ld.w	r5,r1[0x58]
80014008:	73 73       	ld.w	r3,r9[0x5c]
8001400a:	66 75       	ld.w	r5,r3[0x1c]
8001400c:	6c 21       	ld.w	r1,r6[0x8]
8001400e:	20 4e       	sub	lr,4
80014010:	65 77       	ld.w	r7,r2[0x5c]
80014012:	20 50       	sub	r0,5
80014014:	61 72       	ld.w	r2,r0[0x5c]
80014016:	61 6d       	ld.w	sp,r0[0x58]
80014018:	65 74       	ld.w	r4,r2[0x5c]
8001401a:	65 72       	ld.w	r2,r2[0x5c]
8001401c:	73 20       	ld.w	r0,r9[0x48]
8001401e:	69 6e       	ld.w	lr,r4[0x58]
80014020:	73 65       	ld.w	r5,r9[0x58]
80014022:	72 74       	ld.w	r4,r9[0x1c]
80014024:	65 64       	ld.w	r4,r2[0x58]
80014026:	2e 20       	sub	r0,-30
80014028:	0a 00       	add	r0,r5
8001402a:	00 00       	add	r0,r0
8001402c:	46 6c       	lddsp	r12,sp[0x198]
8001402e:	61 73       	ld.w	r3,r0[0x5c]
80014030:	68 20       	ld.w	r0,r4[0x8]
80014032:	6d 65       	ld.w	r5,r6[0x58]
80014034:	6d 6f       	ld.w	pc,r6[0x58]
80014036:	72 79       	ld.w	r9,r9[0x1c]
80014038:	20 63       	sub	r3,6
8001403a:	6f 72       	ld.w	r2,r7[0x5c]
8001403c:	72 75       	ld.w	r5,r9[0x1c]
8001403e:	70 74       	ld.w	r4,r8[0x1c]
80014040:	65 64       	ld.w	r4,r2[0x58]
80014042:	21 20       	sub	r0,18
80014044:	48 61       	lddpc	r1,8001405c <receive_parameter+0x20c>
80014046:	72 64       	ld.w	r4,r9[0x18]
80014048:	63 6f       	ld.w	pc,r1[0x58]
8001404a:	64 65       	ld.w	r5,r2[0x18]
8001404c:	64 20       	ld.w	r0,r2[0x8]
8001404e:	76 61       	ld.w	r1,r11[0x18]
80014050:	6c 75       	ld.w	r5,r6[0x1c]
80014052:	65 73       	ld.w	r3,r2[0x5c]
80014054:	20 74       	sub	r4,7
80014056:	61 6b       	ld.w	r11,r0[0x58]
80014058:	65 6e       	ld.w	lr,r2[0x58]
8001405a:	2e 0a       	sub	r10,-32
	...

8001405e <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
8001405e:	eb cd 40 c0 	pushm	r6-r7,lr
80014062:	1a 97       	mov	r7,sp
80014064:	fa cd 01 f8 	sub	sp,sp,504
80014068:	4d 06       	lddpc	r6,800141a8 <read_parameters_from_flashc+0x14a>
8001406a:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
8001406c:	ec f8 01 7c 	ld.w	r8,r6[380]
80014070:	30 49       	mov	r9,4
80014072:	ea 19 80 80 	orh	r9,0x8080
80014076:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80014078:	30 08       	mov	r8,0
8001407a:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
8001407e:	30 08       	mov	r8,0
80014080:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80014084:	30 08       	mov	r8,0
80014086:	ef 68 ff f7 	st.b	r7[-9],r8
8001408a:	c2 98       	rjmp	800140dc <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
8001408c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014090:	ec f9 01 7c 	ld.w	r9,r6[380]
80014094:	72 09       	ld.w	r9,r9[0x0]
80014096:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8001409a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001409e:	a3 68       	lsl	r8,0x2
800140a0:	ee 08 00 08 	add	r8,r7,r8
800140a4:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
800140a8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800140ac:	a3 68       	lsl	r8,0x2
800140ae:	ee 08 00 08 	add	r8,r7,r8
800140b2:	f0 f8 fe 08 	ld.w	r8,r8[-504]
800140b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800140ba:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800140be:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
800140c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800140c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800140ca:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800140ce:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
800140d2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800140d6:	2f f8       	sub	r8,-1
800140d8:	ef 68 ff f7 	st.b	r7[-9],r8
800140dc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800140e0:	ec f8 00 28 	ld.w	r8,r6[40]
800140e4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800140e8:	2f f8       	sub	r8,-1
800140ea:	10 39       	cp.w	r9,r8
800140ec:	cd 05       	brlt	8001408c <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
800140ee:	ec f8 00 28 	ld.w	r8,r6[40]
800140f2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800140f6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800140fa:	ee f8 fe 08 	ld.w	r8,r7[-504]
800140fe:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014102:	c4 b1       	brne	80014198 <read_parameters_from_flashc+0x13a>
80014104:	ec f8 01 7c 	ld.w	r8,r6[380]
80014108:	70 08       	ld.w	r8,r8[0x0]
8001410a:	ec f9 00 28 	ld.w	r9,r6[40]
8001410e:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80014112:	2f f9       	sub	r9,-1
80014114:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80014118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001411c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014120:	c3 c1       	brne	80014198 <read_parameters_from_flashc+0x13a>
80014122:	ec f8 01 7c 	ld.w	r8,r6[380]
80014126:	70 08       	ld.w	r8,r8[0x0]
80014128:	ec f9 00 28 	ld.w	r9,r6[40]
8001412c:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80014130:	2f e9       	sub	r9,-2
80014132:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80014136:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001413a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001413e:	c2 d1       	brne	80014198 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
80014140:	fe cc 01 48 	sub	r12,pc,328
80014144:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
80014148:	30 18       	mov	r8,1
8001414a:	ef 68 ff f7 	st.b	r7[-9],r8
8001414e:	c1 b8       	rjmp	80014184 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80014150:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014154:	f0 c9 00 01 	sub	r9,r8,1
80014158:	ec fa 00 28 	ld.w	r10,r6[40]
8001415c:	12 98       	mov	r8,r9
8001415e:	a3 78       	lsl	r8,0x3
80014160:	12 18       	sub	r8,r9
80014162:	a3 68       	lsl	r8,0x2
80014164:	f4 08 00 08 	add	r8,r10,r8
80014168:	70 09       	ld.w	r9,r8[0x0]
8001416a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001416e:	a3 68       	lsl	r8,0x2
80014170:	ee 08 00 08 	add	r8,r7,r8
80014174:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014178:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
8001417a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001417e:	2f f8       	sub	r8,-1
80014180:	ef 68 ff f7 	st.b	r7[-9],r8
80014184:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80014188:	ec f8 00 28 	ld.w	r8,r6[40]
8001418c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014190:	2f f8       	sub	r8,-1
80014192:	10 39       	cp.w	r9,r8
80014194:	cd e5       	brlt	80014150 <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80014196:	c0 58       	rjmp	800141a0 <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80014198:	fe cc 01 6c 	sub	r12,pc,364
8001419c:	f0 16 00 01 	mcall	r6[4]
	}
}
800141a0:	28 2d       	sub	sp,-504
800141a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800141a6:	00 00       	add	r0,r0
800141a8:	80 01       	ld.sh	r1,r0[0x0]
800141aa:	3e ee       	mov	lr,-18
800141ac:	42 65       	lddsp	r5,sp[0x98]
800141ae:	67 69       	ld.w	r9,r3[0x58]
800141b0:	6e 20       	ld.w	r0,r7[0x8]
800141b2:	77 72       	ld.w	r2,r11[0x5c]
800141b4:	69 74       	ld.w	r4,r4[0x5c]
800141b6:	65 20       	ld.w	r0,r2[0x48]
800141b8:	74 6f       	ld.w	pc,r10[0x18]
800141ba:	20 66       	sub	r6,6
800141bc:	6c 61       	ld.w	r1,r6[0x18]
800141be:	73 68       	ld.w	r8,r9[0x58]
800141c0:	63 2e       	ld.w	lr,r1[0x48]
800141c2:	2e 2e       	sub	lr,-30
800141c4:	0a 00       	add	r0,r5
800141c6:	00 00       	add	r0,r0
800141c8:	57 72       	stdsp	sp[0x1dc],r2
800141ca:	69 74       	ld.w	r4,r4[0x5c]
800141cc:	65 20       	ld.w	r0,r2[0x48]
800141ce:	74 6f       	ld.w	pc,r10[0x18]
800141d0:	20 66       	sub	r6,6
800141d2:	61 6c       	ld.w	r12,r0[0x58]
800141d4:	73 68       	ld.w	r8,r9[0x58]
800141d6:	63 20       	ld.w	r0,r1[0x48]
800141d8:	63 6f       	ld.w	pc,r1[0x58]
800141da:	6d 70       	ld.w	r0,r6[0x5c]
800141dc:	6c 65       	ld.w	r5,r6[0x18]
800141de:	74 65       	ld.w	r5,r10[0x18]
800141e0:	64 2e       	ld.w	lr,r2[0x8]
800141e2:	0a 00       	add	r0,r5

800141e4 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
800141e4:	eb cd 40 c0 	pushm	r6-r7,lr
800141e8:	1a 97       	mov	r7,sp
800141ea:	fa cd 01 f8 	sub	sp,sp,504
800141ee:	4c 96       	lddpc	r6,80014310 <write_parameters_to_flashc+0x12c>
800141f0:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
800141f2:	30 08       	mov	r8,0
800141f4:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
800141f8:	30 08       	mov	r8,0
800141fa:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
800141fe:	ec f8 01 7c 	ld.w	r8,r6[380]
80014202:	30 49       	mov	r9,4
80014204:	ea 19 80 80 	orh	r9,0x8080
80014208:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
8001420a:	ec f8 00 28 	ld.w	r8,r6[40]
8001420e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014212:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80014216:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
8001421a:	ee f8 fe 08 	ld.w	r8,r7[-504]
8001421e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014222:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014226:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
8001422a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001422e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014232:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014236:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
8001423a:	fe cc 00 8e 	sub	r12,pc,142
8001423e:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
80014242:	30 18       	mov	r8,1
80014244:	ef 68 ff ff 	st.b	r7[-1],r8
80014248:	c3 18       	rjmp	800142aa <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
8001424a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001424e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014252:	f0 c9 00 01 	sub	r9,r8,1
80014256:	ec fb 00 28 	ld.w	r11,r6[40]
8001425a:	12 98       	mov	r8,r9
8001425c:	a3 78       	lsl	r8,0x3
8001425e:	12 18       	sub	r8,r9
80014260:	a3 68       	lsl	r8,0x2
80014262:	f6 08 00 08 	add	r8,r11,r8
80014266:	70 08       	ld.w	r8,r8[0x0]
80014268:	70 09       	ld.w	r9,r8[0x0]
8001426a:	f4 08 15 02 	lsl	r8,r10,0x2
8001426e:	ee 08 00 08 	add	r8,r7,r8
80014272:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014276:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001427a:	a3 68       	lsl	r8,0x2
8001427c:	ee 08 00 08 	add	r8,r7,r8
80014280:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014284:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014288:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001428c:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80014290:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014298:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001429c:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
800142a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800142a4:	2f f8       	sub	r8,-1
800142a6:	ef 68 ff ff 	st.b	r7[-1],r8
800142aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800142ae:	ec f8 00 28 	ld.w	r8,r6[40]
800142b2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800142b6:	2f f8       	sub	r8,-1
800142b8:	10 39       	cp.w	r9,r8
800142ba:	cc 85       	brlt	8001424a <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
800142bc:	ec f8 00 28 	ld.w	r8,r6[40]
800142c0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800142c4:	2f f8       	sub	r8,-1
800142c6:	a3 68       	lsl	r8,0x2
800142c8:	ee 08 00 08 	add	r8,r7,r8
800142cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800142d0:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
800142d4:	ec f8 00 28 	ld.w	r8,r6[40]
800142d8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800142dc:	2f e8       	sub	r8,-2
800142de:	a3 68       	lsl	r8,0x2
800142e0:	ee 08 00 08 	add	r8,r7,r8
800142e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800142e8:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
800142ec:	ec f8 01 7c 	ld.w	r8,r6[380]
800142f0:	70 08       	ld.w	r8,r8[0x0]
800142f2:	ee cb 01 f8 	sub	r11,r7,504
800142f6:	30 19       	mov	r9,1
800142f8:	e0 6a 01 ec 	mov	r10,492
800142fc:	10 9c       	mov	r12,r8
800142fe:	f0 16 01 55 	mcall	r6[1364]
	dbg_print("Write to falshc completed.\n");
80014302:	fe cc 01 3a 	sub	r12,pc,314
80014306:	f0 16 00 01 	mcall	r6[4]
8001430a:	28 2d       	sub	sp,-504
8001430c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014310:	80 01       	ld.sh	r1,r0[0x0]
80014312:	40 74       	lddsp	r4,sp[0x1c]

80014314 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
80014314:	eb cd 40 80 	pushm	r7,lr
80014318:	1a 97       	mov	r7,sp
8001431a:	20 5d       	sub	sp,20
8001431c:	18 9a       	mov	r10,r12
8001431e:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
80014322:	30 08       	mov	r8,0
80014324:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80014328:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001432c:	70 08       	ld.w	r8,r8[0x0]
8001432e:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
80014332:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014336:	2f c8       	sub	r8,-4
80014338:	70 08       	ld.w	r8,r8[0x0]
8001433a:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8001433e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014342:	2f 88       	sub	r8,-8
80014344:	70 08       	ld.w	r8,r8[0x0]
80014346:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8001434a:	14 98       	mov	r8,r10
8001434c:	ee c9 00 10 	sub	r9,r7,16
80014350:	20 08       	sub	r8,0
80014352:	20 09       	sub	r9,0
80014354:	72 0b       	ld.w	r11,r9[0x0]
80014356:	91 0b       	st.w	r8[0x0],r11
80014358:	72 1b       	ld.w	r11,r9[0x4]
8001435a:	91 1b       	st.w	r8[0x4],r11
8001435c:	72 2b       	ld.w	r11,r9[0x8]
8001435e:	91 2b       	st.w	r8[0x8],r11
80014360:	72 39       	ld.w	r9,r9[0xc]
80014362:	91 39       	st.w	r8[0xc],r9
}
80014364:	14 9c       	mov	r12,r10
80014366:	2f bd       	sub	sp,-20
80014368:	e3 cd 80 80 	ldm	sp++,r7,pc

8001436c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001436c:	eb cd 40 80 	pushm	r7,lr
80014370:	1a 97       	mov	r7,sp
80014372:	20 3d       	sub	sp,12
80014374:	ef 4c ff f8 	st.w	r7[-8],r12
80014378:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001437c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014380:	70 09       	ld.w	r9,r8[0x0]
80014382:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014386:	70 08       	ld.w	r8,r8[0x0]
80014388:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001438c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014390:	2f c8       	sub	r8,-4
80014392:	70 0a       	ld.w	r10,r8[0x0]
80014394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014398:	2f c8       	sub	r8,-4
8001439a:	70 08       	ld.w	r8,r8[0x0]
8001439c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800143a0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800143a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800143a8:	2f 88       	sub	r8,-8
800143aa:	70 0a       	ld.w	r10,r8[0x0]
800143ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143b0:	2f 88       	sub	r8,-8
800143b2:	70 08       	ld.w	r8,r8[0x0]
800143b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800143b8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143bc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800143c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800143c4:	10 9c       	mov	r12,r8
800143c6:	2f dd       	sub	sp,-12
800143c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800143cc <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800143cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800143d0:	1a 97       	mov	r7,sp
800143d2:	20 7d       	sub	sp,28
800143d4:	4b d6       	lddpc	r6,800144c8 <quat_multi+0xfc>
800143d6:	1e 26       	rsub	r6,pc
800143d8:	ee c8 ff ec 	sub	r8,r7,-20
800143dc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800143de:	70 2a       	ld.w	r10,r8[0x8]
800143e0:	70 79       	ld.w	r9,r8[0x1c]
800143e2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800143e6:	70 3b       	ld.w	r11,r8[0xc]
800143e8:	70 69       	ld.w	r9,r8[0x18]
800143ea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800143ee:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800143f2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
800143f6:	70 3a       	ld.w	r10,r8[0xc]
800143f8:	70 59       	ld.w	r9,r8[0x14]
800143fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800143fe:	70 1b       	ld.w	r11,r8[0x4]
80014400:	70 79       	ld.w	r9,r8[0x1c]
80014402:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014406:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001440a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001440e:	70 1a       	ld.w	r10,r8[0x4]
80014410:	70 69       	ld.w	r9,r8[0x18]
80014412:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014416:	70 2b       	ld.w	r11,r8[0x8]
80014418:	70 59       	ld.w	r9,r8[0x14]
8001441a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001441e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014422:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80014426:	70 4a       	ld.w	r10,r8[0x10]
80014428:	70 19       	ld.w	r9,r8[0x4]
8001442a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001442e:	70 0b       	ld.w	r11,r8[0x0]
80014430:	70 59       	ld.w	r9,r8[0x14]
80014432:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014436:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001443a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001443e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014442:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80014446:	70 4a       	ld.w	r10,r8[0x10]
80014448:	70 29       	ld.w	r9,r8[0x8]
8001444a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001444e:	70 0b       	ld.w	r11,r8[0x0]
80014450:	70 69       	ld.w	r9,r8[0x18]
80014452:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014456:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001445a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001445e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014462:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80014466:	70 4a       	ld.w	r10,r8[0x10]
80014468:	70 39       	ld.w	r9,r8[0xc]
8001446a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001446e:	70 0b       	ld.w	r11,r8[0x0]
80014470:	70 79       	ld.w	r9,r8[0x1c]
80014472:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014476:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001447a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001447e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80014482:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80014486:	70 0a       	ld.w	r10,r8[0x0]
80014488:	70 49       	ld.w	r9,r8[0x10]
8001448a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001448e:	f0 c9 ff f0 	sub	r9,r8,-16
80014492:	2f c9       	sub	r9,-4
80014494:	2f c8       	sub	r8,-4
80014496:	12 9b       	mov	r11,r9
80014498:	10 9c       	mov	r12,r8
8001449a:	c6 9f       	rcall	8001436c <scalar_product>
8001449c:	18 98       	mov	r8,r12
8001449e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800144a2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800144a6:	0a 98       	mov	r8,r5
800144a8:	ee c9 00 1c 	sub	r9,r7,28
800144ac:	20 08       	sub	r8,0
800144ae:	20 09       	sub	r9,0
800144b0:	72 0a       	ld.w	r10,r9[0x0]
800144b2:	91 0a       	st.w	r8[0x0],r10
800144b4:	72 1a       	ld.w	r10,r9[0x4]
800144b6:	91 1a       	st.w	r8[0x4],r10
800144b8:	72 2a       	ld.w	r10,r9[0x8]
800144ba:	91 2a       	st.w	r8[0x8],r10
800144bc:	72 39       	ld.w	r9,r9[0xc]
800144be:	91 39       	st.w	r8[0xc],r9
}
800144c0:	0a 9c       	mov	r12,r5
800144c2:	2f 9d       	sub	sp,-28
800144c4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800144c8:	80 01       	ld.sh	r1,r0[0x0]
800144ca:	42 5a       	lddsp	r10,sp[0x94]

800144cc <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800144cc:	eb cd 40 80 	pushm	r7,lr
800144d0:	1a 97       	mov	r7,sp
800144d2:	20 5d       	sub	sp,20
800144d4:	ee c9 ff f8 	sub	r9,r7,-8
800144d8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800144da:	72 08       	ld.w	r8,r9[0x0]
800144dc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
800144e0:	30 08       	mov	r8,0
800144e2:	ef 48 ff fc 	st.w	r7[-4],r8
800144e6:	c1 58       	rjmp	80014510 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
800144e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800144ec:	ee fb ff fc 	ld.w	r11,r7[-4]
800144f0:	2f fb       	sub	r11,-1
800144f2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
800144f6:	ee 1b 80 00 	eorh	r11,0x8000
800144fa:	2f f8       	sub	r8,-1
800144fc:	a3 68       	lsl	r8,0x2
800144fe:	ee 08 00 08 	add	r8,r7,r8
80014502:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80014506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001450a:	2f f8       	sub	r8,-1
8001450c:	ef 48 ff fc 	st.w	r7[-4],r8
80014510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014514:	58 28       	cp.w	r8,2
80014516:	fe 9a ff e9 	brle	800144e8 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001451a:	14 98       	mov	r8,r10
8001451c:	ee c9 00 14 	sub	r9,r7,20
80014520:	20 08       	sub	r8,0
80014522:	20 09       	sub	r9,0
80014524:	72 0b       	ld.w	r11,r9[0x0]
80014526:	91 0b       	st.w	r8[0x0],r11
80014528:	72 1b       	ld.w	r11,r9[0x4]
8001452a:	91 1b       	st.w	r8[0x4],r11
8001452c:	72 2b       	ld.w	r11,r9[0x8]
8001452e:	91 2b       	st.w	r8[0x8],r11
80014530:	72 39       	ld.w	r9,r9[0xc]
80014532:	91 39       	st.w	r8[0xc],r9
}
80014534:	14 9c       	mov	r12,r10
80014536:	2f bd       	sub	sp,-20
80014538:	e3 cd 80 80 	ldm	sp++,r7,pc

8001453c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001453c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014540:	1a 97       	mov	r7,sp
80014542:	20 cd       	sub	sp,48
80014544:	4b c6       	lddpc	r6,80014634 <quat_global_to_local+0xf8>
80014546:	1e 26       	rsub	r6,pc
80014548:	ee c5 ff ec 	sub	r5,r7,-20
8001454c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001454e:	ee ca 00 10 	sub	r10,r7,16
80014552:	20 4d       	sub	sp,16
80014554:	1a 98       	mov	r8,sp
80014556:	0a 99       	mov	r9,r5
80014558:	20 08       	sub	r8,0
8001455a:	20 09       	sub	r9,0
8001455c:	72 0b       	ld.w	r11,r9[0x0]
8001455e:	91 0b       	st.w	r8[0x0],r11
80014560:	72 1b       	ld.w	r11,r9[0x4]
80014562:	91 1b       	st.w	r8[0x4],r11
80014564:	72 2b       	ld.w	r11,r9[0x8]
80014566:	91 2b       	st.w	r8[0x8],r11
80014568:	72 39       	ld.w	r9,r9[0xc]
8001456a:	91 39       	st.w	r8[0xc],r9
8001456c:	14 9c       	mov	r12,r10
8001456e:	ca ff       	rcall	800144cc <quat_inv>
80014570:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80014572:	ee ca 00 20 	sub	r10,r7,32
80014576:	20 4d       	sub	sp,16
80014578:	1a 98       	mov	r8,sp
8001457a:	ea c9 ff f0 	sub	r9,r5,-16
8001457e:	20 08       	sub	r8,0
80014580:	20 09       	sub	r9,0
80014582:	72 0b       	ld.w	r11,r9[0x0]
80014584:	91 0b       	st.w	r8[0x0],r11
80014586:	72 1b       	ld.w	r11,r9[0x4]
80014588:	91 1b       	st.w	r8[0x4],r11
8001458a:	72 2b       	ld.w	r11,r9[0x8]
8001458c:	91 2b       	st.w	r8[0x8],r11
8001458e:	72 39       	ld.w	r9,r9[0xc]
80014590:	91 39       	st.w	r8[0xc],r9
80014592:	20 4d       	sub	sp,16
80014594:	1a 98       	mov	r8,sp
80014596:	ee c9 00 10 	sub	r9,r7,16
8001459a:	20 08       	sub	r8,0
8001459c:	20 09       	sub	r9,0
8001459e:	72 0b       	ld.w	r11,r9[0x0]
800145a0:	91 0b       	st.w	r8[0x0],r11
800145a2:	72 1b       	ld.w	r11,r9[0x4]
800145a4:	91 1b       	st.w	r8[0x4],r11
800145a6:	72 2b       	ld.w	r11,r9[0x8]
800145a8:	91 2b       	st.w	r8[0x8],r11
800145aa:	72 39       	ld.w	r9,r9[0xc]
800145ac:	91 39       	st.w	r8[0xc],r9
800145ae:	14 9c       	mov	r12,r10
800145b0:	c0 ef       	rcall	800143cc <quat_multi>
800145b2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
800145b4:	ee ca 00 30 	sub	r10,r7,48
800145b8:	20 4d       	sub	sp,16
800145ba:	1a 98       	mov	r8,sp
800145bc:	0a 99       	mov	r9,r5
800145be:	20 08       	sub	r8,0
800145c0:	20 09       	sub	r9,0
800145c2:	72 0b       	ld.w	r11,r9[0x0]
800145c4:	91 0b       	st.w	r8[0x0],r11
800145c6:	72 1b       	ld.w	r11,r9[0x4]
800145c8:	91 1b       	st.w	r8[0x4],r11
800145ca:	72 2b       	ld.w	r11,r9[0x8]
800145cc:	91 2b       	st.w	r8[0x8],r11
800145ce:	72 39       	ld.w	r9,r9[0xc]
800145d0:	91 39       	st.w	r8[0xc],r9
800145d2:	20 4d       	sub	sp,16
800145d4:	1a 98       	mov	r8,sp
800145d6:	ee c9 00 20 	sub	r9,r7,32
800145da:	20 08       	sub	r8,0
800145dc:	20 09       	sub	r9,0
800145de:	72 0b       	ld.w	r11,r9[0x0]
800145e0:	91 0b       	st.w	r8[0x0],r11
800145e2:	72 1b       	ld.w	r11,r9[0x4]
800145e4:	91 1b       	st.w	r8[0x4],r11
800145e6:	72 2b       	ld.w	r11,r9[0x8]
800145e8:	91 2b       	st.w	r8[0x8],r11
800145ea:	72 39       	ld.w	r9,r9[0xc]
800145ec:	91 39       	st.w	r8[0xc],r9
800145ee:	14 9c       	mov	r12,r10
800145f0:	ce ee       	rcall	800143cc <quat_multi>
800145f2:	2f 8d       	sub	sp,-32
800145f4:	ee c8 00 20 	sub	r8,r7,32
800145f8:	ee c9 00 30 	sub	r9,r7,48
800145fc:	20 08       	sub	r8,0
800145fe:	20 09       	sub	r9,0
80014600:	72 0a       	ld.w	r10,r9[0x0]
80014602:	91 0a       	st.w	r8[0x0],r10
80014604:	72 1a       	ld.w	r10,r9[0x4]
80014606:	91 1a       	st.w	r8[0x4],r10
80014608:	72 2a       	ld.w	r10,r9[0x8]
8001460a:	91 2a       	st.w	r8[0x8],r10
8001460c:	72 39       	ld.w	r9,r9[0xc]
8001460e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80014610:	06 98       	mov	r8,r3
80014612:	ee c9 00 20 	sub	r9,r7,32
80014616:	20 08       	sub	r8,0
80014618:	20 09       	sub	r9,0
8001461a:	72 0a       	ld.w	r10,r9[0x0]
8001461c:	91 0a       	st.w	r8[0x0],r10
8001461e:	72 1a       	ld.w	r10,r9[0x4]
80014620:	91 1a       	st.w	r8[0x4],r10
80014622:	72 2a       	ld.w	r10,r9[0x8]
80014624:	91 2a       	st.w	r8[0x8],r10
80014626:	72 39       	ld.w	r9,r9[0xc]
80014628:	91 39       	st.w	r8[0xc],r9
}
8001462a:	06 9c       	mov	r12,r3
8001462c:	2f 4d       	sub	sp,-48
8001462e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014632:	00 00       	add	r0,r0
80014634:	80 01       	ld.sh	r1,r0[0x0]
80014636:	43 ca       	lddsp	r10,sp[0xf0]

80014638 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80014638:	eb cd 40 c0 	pushm	r6-r7,lr
8001463c:	1a 97       	mov	r7,sp
8001463e:	20 2d       	sub	sp,8
80014640:	48 96       	lddpc	r6,80014664 <vector_norm_sqr+0x2c>
80014642:	1e 26       	rsub	r6,pc
80014644:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80014648:	ee fb ff f8 	ld.w	r11,r7[-8]
8001464c:	ee fc ff f8 	ld.w	r12,r7[-8]
80014650:	c8 ee       	rcall	8001436c <scalar_product>
80014652:	18 98       	mov	r8,r12
80014654:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80014658:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001465c:	10 9c       	mov	r12,r8
8001465e:	2f ed       	sub	sp,-8
80014660:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014664:	80 01       	ld.sh	r1,r0[0x0]
80014666:	44 c6       	lddsp	r6,sp[0x130]

80014668 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80014668:	eb cd 40 80 	pushm	r7,lr
8001466c:	1a 97       	mov	r7,sp
8001466e:	20 1d       	sub	sp,4
80014670:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80014674:	30 18       	mov	r8,1
80014676:	ee fa ff fc 	ld.w	r10,r7[-4]
8001467a:	30 09       	mov	r9,0
8001467c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014680:	e0 8c 00 03 	brvs	80014686 <f_abs+0x1e>
80014684:	c0 24       	brge	80014688 <f_abs+0x20>
80014686:	30 08       	mov	r8,0
80014688:	5c 58       	castu.b	r8
8001468a:	c0 40       	breq	80014692 <f_abs+0x2a>
	{
		return a;
8001468c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014690:	c0 58       	rjmp	8001469a <f_abs+0x32>
	}else{
		return -a;
80014692:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014696:	ee 18 80 00 	eorh	r8,0x8000
	}
}
8001469a:	10 9c       	mov	r12,r8
8001469c:	2f fd       	sub	sp,-4
8001469e:	e3 cd 80 80 	ldm	sp++,r7,pc

800146a2 <f_min>:

static inline float f_min(const float a, const float b){
800146a2:	eb cd 40 80 	pushm	r7,lr
800146a6:	1a 97       	mov	r7,sp
800146a8:	20 2d       	sub	sp,8
800146aa:	ef 4c ff fc 	st.w	r7[-4],r12
800146ae:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
800146b2:	30 18       	mov	r8,1
800146b4:	ee fa ff fc 	ld.w	r10,r7[-4]
800146b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800146bc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800146c0:	e0 8c 00 04 	brvs	800146c8 <f_min+0x26>
800146c4:	e0 8a 00 03 	brle	800146ca <f_min+0x28>
800146c8:	30 08       	mov	r8,0
800146ca:	5c 58       	castu.b	r8
800146cc:	c0 40       	breq	800146d4 <f_min+0x32>
	{
		return a;
800146ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146d2:	c0 38       	rjmp	800146d8 <f_min+0x36>
	}else{
		return b;
800146d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
800146d8:	10 9c       	mov	r12,r8
800146da:	2f ed       	sub	sp,-8
800146dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800146e0 <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
800146e0:	eb cd 40 c0 	pushm	r6-r7,lr
800146e4:	1a 97       	mov	r7,sp
800146e6:	20 1d       	sub	sp,4
800146e8:	48 c6       	lddpc	r6,80014718 <center_window_2+0x38>
800146ea:	1e 26       	rsub	r6,pc
800146ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
800146f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800146f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146f8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800146fc:	fc 18 3f 80 	movh	r8,0x3f80
80014700:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014704:	10 9b       	mov	r11,r8
80014706:	fc 1c 3f 80 	movh	r12,0x3f80
8001470a:	f0 16 00 08 	mcall	r6[32]
8001470e:	18 98       	mov	r8,r12
}
80014710:	10 9c       	mov	r12,r8
80014712:	2f fd       	sub	sp,-4
80014714:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014718:	80 01       	ld.sh	r1,r0[0x0]
8001471a:	45 6e       	lddsp	lr,sp[0x158]

8001471c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001471c:	eb cd 40 c0 	pushm	r6-r7,lr
80014720:	1a 97       	mov	r7,sp
80014722:	20 6d       	sub	sp,24
80014724:	49 e6       	lddpc	r6,8001479c <interpolate+0x80>
80014726:	1e 26       	rsub	r6,pc
80014728:	ef 4c ff f8 	st.w	r7[-8],r12
8001472c:	ef 4b ff f4 	st.w	r7[-12],r11
80014730:	ef 4a ff f0 	st.w	r7[-16],r10
80014734:	ef 49 ff ec 	st.w	r7[-20],r9
80014738:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001473c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014740:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014744:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014748:	c0 41       	brne	80014750 <interpolate+0x34>
	{
		return y1;
8001474a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001474e:	c2 38       	rjmp	80014794 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80014750:	ee f9 ff e8 	ld.w	r9,r7[-24]
80014754:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014758:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001475c:	ee fa ff f8 	ld.w	r10,r7[-8]
80014760:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014764:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80014768:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001476c:	ee fa ff f0 	ld.w	r10,r7[-16]
80014770:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014774:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014778:	12 9b       	mov	r11,r9
8001477a:	10 9c       	mov	r12,r8
8001477c:	f0 16 00 08 	mcall	r6[32]
80014780:	18 98       	mov	r8,r12
80014782:	10 99       	mov	r9,r8
80014784:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014788:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001478c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80014790:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014794:	10 9c       	mov	r12,r8
80014796:	2f ad       	sub	sp,-24
80014798:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001479c:	80 01       	ld.sh	r1,r0[0x0]
8001479e:	45 aa       	lddsp	r10,sp[0x168]

800147a0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800147a0:	eb cd 40 c0 	pushm	r6-r7,lr
800147a4:	1a 97       	mov	r7,sp
800147a6:	20 3d       	sub	sp,12
800147a8:	49 06       	lddpc	r6,800147e8 <mav_array_memcpy+0x48>
800147aa:	1e 26       	rsub	r6,pc
800147ac:	ef 4c ff fc 	st.w	r7[-4],r12
800147b0:	ef 4b ff f8 	st.w	r7[-8],r11
800147b4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800147b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800147bc:	58 08       	cp.w	r8,0
800147be:	c0 91       	brne	800147d0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800147c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800147c4:	30 0b       	mov	r11,0
800147c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800147ca:	f0 16 00 2f 	mcall	r6[188]
800147ce:	c0 98       	rjmp	800147e0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800147d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800147d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800147d8:	ee fc ff fc 	ld.w	r12,r7[-4]
800147dc:	f0 16 00 1e 	mcall	r6[120]
	}
}
800147e0:	2f dd       	sub	sp,-12
800147e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800147e6:	00 00       	add	r0,r0
800147e8:	80 01       	ld.sh	r1,r0[0x0]
800147ea:	46 2e       	lddsp	lr,sp[0x188]

800147ec <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
800147ec:	eb cd 40 c0 	pushm	r6-r7,lr
800147f0:	1a 97       	mov	r7,sp
800147f2:	20 1d       	sub	sp,4
800147f4:	49 46       	lddpc	r6,80014844 <init_nav+0x58>
800147f6:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
800147f8:	f0 16 00 31 	mcall	r6[196]
800147fc:	18 99       	mov	r9,r12
800147fe:	ec f8 00 00 	ld.w	r8,r6[0]
80014802:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80014804:	ec f8 00 00 	ld.w	r8,r6[0]
80014808:	70 08       	ld.w	r8,r8[0x0]
8001480a:	30 09       	mov	r9,0
8001480c:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
80014810:	ec f8 00 00 	ld.w	r8,r6[0]
80014814:	70 08       	ld.w	r8,r8[0x0]
80014816:	30 09       	mov	r9,0
80014818:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
8001481c:	ec f8 00 00 	ld.w	r8,r6[0]
80014820:	70 08       	ld.w	r8,r8[0x0]
80014822:	30 09       	mov	r9,0
80014824:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80014828:	ec f8 00 00 	ld.w	r8,r6[0]
8001482c:	70 08       	ld.w	r8,r8[0x0]
8001482e:	30 09       	mov	r9,0
80014830:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80014834:	ec f8 07 70 	ld.w	r8,r6[1904]
80014838:	30 09       	mov	r9,0
8001483a:	91 09       	st.w	r8[0x0],r9
}
8001483c:	2f fd       	sub	sp,-4
8001483e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014842:	00 00       	add	r0,r0
80014844:	80 01       	ld.sh	r1,r0[0x0]
80014846:	46 7a       	lddsp	r10,sp[0x19c]

80014848 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80014848:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001484c:	1a 97       	mov	r7,sp
8001484e:	20 8d       	sub	sp,32
80014850:	49 26       	lddpc	r6,80014898 <run_navigation+0x50>
80014852:	1e 26       	rsub	r6,pc
80014854:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80014858:	ec f8 00 00 	ld.w	r8,r6[0]
8001485c:	70 03       	ld.w	r3,r8[0x0]
8001485e:	ee c8 00 20 	sub	r8,r7,32
80014862:	10 9b       	mov	r11,r8
80014864:	0a 9c       	mov	r12,r5
80014866:	f0 16 01 9c 	mcall	r6[1648]
8001486a:	18 98       	mov	r8,r12
8001486c:	e7 48 0f 70 	st.w	r3[3952],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
80014870:	ec f8 00 00 	ld.w	r8,r6[0]
80014874:	70 08       	ld.w	r8,r8[0x0]
80014876:	f0 f9 0f 70 	ld.w	r9,r8[3952]
8001487a:	ee c8 00 20 	sub	r8,r7,32
8001487e:	12 9b       	mov	r11,r9
80014880:	10 9c       	mov	r12,r8
80014882:	f0 16 01 4d 	mcall	r6[1332]
	
	centralData->controls_nav.theading=waypoint_input.heading;
80014886:	ec f8 00 00 	ld.w	r8,r6[0]
8001488a:	70 08       	ld.w	r8,r8[0x0]
8001488c:	6a 39       	ld.w	r9,r5[0xc]
8001488e:	f1 49 01 90 	st.w	r8[400],r9
}
80014892:	2f 8d       	sub	sp,-32
80014894:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014898:	80 01       	ld.sh	r1,r0[0x0]
8001489a:	46 d6       	lddsp	r6,sp[0x1b4]

8001489c <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
8001489c:	eb cd 40 c0 	pushm	r6-r7,lr
800148a0:	1a 97       	mov	r7,sp
800148a2:	20 3d       	sub	sp,12
800148a4:	49 f6       	lddpc	r6,80014920 <set_rel_pos_n_dist2wp+0x84>
800148a6:	1e 26       	rsub	r6,pc
800148a8:	ef 4c ff f8 	st.w	r7[-8],r12
800148ac:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
800148b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800148b4:	70 09       	ld.w	r9,r8[0x0]
800148b6:	ec f8 00 00 	ld.w	r8,r6[0]
800148ba:	70 08       	ld.w	r8,r8[0x0]
800148bc:	f0 f8 0c 5c 	ld.w	r8,r8[3164]
800148c0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800148c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800148c8:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
800148ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800148ce:	2f c8       	sub	r8,-4
800148d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800148d4:	2f c9       	sub	r9,-4
800148d6:	72 0a       	ld.w	r10,r9[0x0]
800148d8:	ec f9 00 00 	ld.w	r9,r6[0]
800148dc:	72 09       	ld.w	r9,r9[0x0]
800148de:	f2 f9 0c 60 	ld.w	r9,r9[3168]
800148e2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800148e6:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
800148e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800148ec:	2f 88       	sub	r8,-8
800148ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800148f2:	2f 89       	sub	r9,-8
800148f4:	72 0a       	ld.w	r10,r9[0x0]
800148f6:	ec f9 00 00 	ld.w	r9,r6[0]
800148fa:	72 09       	ld.w	r9,r9[0x0]
800148fc:	f2 f9 0c 64 	ld.w	r9,r9[3172]
80014900:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014904:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014906:	ee fc ff f4 	ld.w	r12,r7[-12]
8001490a:	c9 7e       	rcall	80014638 <vector_norm_sqr>
8001490c:	18 98       	mov	r8,r12
8001490e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80014912:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014916:	10 9c       	mov	r12,r8
80014918:	2f dd       	sub	sp,-12
8001491a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001491e:	00 00       	add	r0,r0
80014920:	80 01       	ld.sh	r1,r0[0x0]
80014922:	47 2a       	lddsp	r10,sp[0x1c8]

80014924 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80014924:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014928:	1a 97       	mov	r7,sp
8001492a:	21 7d       	sub	sp,92
8001492c:	fe f6 02 f0 	ld.w	r6,pc[752]
80014930:	1e 26       	rsub	r6,pc
80014932:	ef 4c ff a8 	st.w	r7[-88],r12
80014936:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
8001493a:	ee fc ff a4 	ld.w	r12,r7[-92]
8001493e:	f0 16 00 03 	mcall	r6[12]
80014942:	14 98       	mov	r8,r10
80014944:	16 99       	mov	r9,r11
80014946:	10 9a       	mov	r10,r8
80014948:	12 9b       	mov	r11,r9
8001494a:	f0 16 00 66 	mcall	r6[408]
8001494e:	14 98       	mov	r8,r10
80014950:	16 99       	mov	r9,r11
80014952:	10 9a       	mov	r10,r8
80014954:	12 9b       	mov	r11,r9
80014956:	f0 16 00 09 	mcall	r6[36]
8001495a:	18 98       	mov	r8,r12
8001495c:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
80014960:	ee fc ff f4 	ld.w	r12,r7[-12]
80014964:	f0 16 00 03 	mcall	r6[12]
80014968:	30 05       	mov	r5,0
8001496a:	e0 68 a9 fc 	mov	r8,43516
8001496e:	ea 18 d2 f1 	orh	r8,0xd2f1
80014972:	e0 69 62 4d 	mov	r9,25165
80014976:	ea 19 3f 40 	orh	r9,0x3f40
8001497a:	f0 16 00 20 	mcall	r6[128]
8001497e:	18 98       	mov	r8,r12
80014980:	58 08       	cp.w	r8,0
80014982:	c0 20       	breq	80014986 <set_speed_command+0x62>
80014984:	30 15       	mov	r5,1
80014986:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001498a:	c1 80       	breq	800149ba <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
8001498c:	ee fc ff f4 	ld.w	r12,r7[-12]
80014990:	f0 16 00 03 	mcall	r6[12]
80014994:	e0 68 a9 fc 	mov	r8,43516
80014998:	ea 18 d2 f1 	orh	r8,0xd2f1
8001499c:	e0 69 62 4d 	mov	r9,25165
800149a0:	ea 19 3f 40 	orh	r9,0x3f40
800149a4:	f0 16 00 05 	mcall	r6[20]
800149a8:	14 98       	mov	r8,r10
800149aa:	16 99       	mov	r9,r11
800149ac:	10 9a       	mov	r10,r8
800149ae:	12 9b       	mov	r11,r9
800149b0:	f0 16 00 09 	mcall	r6[36]
800149b4:	18 98       	mov	r8,r12
800149b6:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
800149ba:	ee c8 00 20 	sub	r8,r7,32
800149be:	ee fb ff a8 	ld.w	r11,r7[-88]
800149c2:	10 9c       	mov	r12,r8
800149c4:	fe b0 fc a8 	rcall	80014314 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
800149c8:	ec f8 00 00 	ld.w	r8,r6[0]
800149cc:	70 0b       	ld.w	r11,r8[0x0]
800149ce:	ee ca 00 30 	sub	r10,r7,48
800149d2:	20 4d       	sub	sp,16
800149d4:	1a 98       	mov	r8,sp
800149d6:	ee c9 00 20 	sub	r9,r7,32
800149da:	20 08       	sub	r8,0
800149dc:	20 09       	sub	r9,0
800149de:	72 0c       	ld.w	r12,r9[0x0]
800149e0:	91 0c       	st.w	r8[0x0],r12
800149e2:	72 1c       	ld.w	r12,r9[0x4]
800149e4:	91 1c       	st.w	r8[0x4],r12
800149e6:	72 2c       	ld.w	r12,r9[0x8]
800149e8:	91 2c       	st.w	r8[0x8],r12
800149ea:	72 39       	ld.w	r9,r9[0xc]
800149ec:	91 39       	st.w	r8[0xc],r9
800149ee:	20 4d       	sub	sp,16
800149f0:	1a 98       	mov	r8,sp
800149f2:	16 99       	mov	r9,r11
800149f4:	20 08       	sub	r8,0
800149f6:	20 09       	sub	r9,0
800149f8:	72 0b       	ld.w	r11,r9[0x0]
800149fa:	91 0b       	st.w	r8[0x0],r11
800149fc:	72 1b       	ld.w	r11,r9[0x4]
800149fe:	91 1b       	st.w	r8[0x4],r11
80014a00:	72 2b       	ld.w	r11,r9[0x8]
80014a02:	91 2b       	st.w	r8[0x8],r11
80014a04:	72 39       	ld.w	r9,r9[0xc]
80014a06:	91 39       	st.w	r8[0xc],r9
80014a08:	14 9c       	mov	r12,r10
80014a0a:	fe b0 fd 99 	rcall	8001453c <quat_global_to_local>
80014a0e:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
80014a10:	ee f8 ff d4 	ld.w	r8,r7[-44]
80014a14:	ef 48 ff c4 	st.w	r7[-60],r8
80014a18:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014a1c:	ef 48 ff c8 	st.w	r7[-56],r8
80014a20:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014a24:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80014a28:	ee f8 ff a8 	ld.w	r8,r7[-88]
80014a2c:	2f 88       	sub	r8,-8
80014a2e:	70 08       	ld.w	r8,r8[0x0]
80014a30:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80014a34:	ee fc ff fc 	ld.w	r12,r7[-4]
80014a38:	c5 4e       	rcall	800146e0 <center_window_2>
80014a3a:	18 98       	mov	r8,r12
80014a3c:	10 9c       	mov	r12,r8
80014a3e:	f0 16 00 03 	mcall	r6[12]
80014a42:	e0 68 33 33 	mov	r8,13107
80014a46:	ea 18 33 33 	orh	r8,0x3333
80014a4a:	e0 69 33 33 	mov	r9,13107
80014a4e:	ea 19 3f d3 	orh	r9,0x3fd3
80014a52:	f0 16 00 02 	mcall	r6[8]
80014a56:	14 98       	mov	r8,r10
80014a58:	16 99       	mov	r9,r11
80014a5a:	10 92       	mov	r2,r8
80014a5c:	12 93       	mov	r3,r9
80014a5e:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a62:	f0 16 00 03 	mcall	r6[12]
80014a66:	14 98       	mov	r8,r10
80014a68:	16 99       	mov	r9,r11
80014a6a:	04 9a       	mov	r10,r2
80014a6c:	06 9b       	mov	r11,r3
80014a6e:	f0 16 00 02 	mcall	r6[8]
80014a72:	14 98       	mov	r8,r10
80014a74:	16 99       	mov	r9,r11
80014a76:	10 9a       	mov	r10,r8
80014a78:	12 9b       	mov	r11,r9
80014a7a:	f0 16 00 09 	mcall	r6[36]
80014a7e:	18 98       	mov	r8,r12
80014a80:	10 9b       	mov	r11,r8
80014a82:	fc 1c 40 40 	movh	r12,0x4040
80014a86:	c0 ee       	rcall	800146a2 <f_min>
80014a88:	18 98       	mov	r8,r12
80014a8a:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
80014a8e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014a92:	10 9c       	mov	r12,r8
80014a94:	fe b0 fd ea 	rcall	80014668 <f_abs>
80014a98:	18 99       	mov	r9,r12
80014a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a9e:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80014aa2:	30 18       	mov	r8,1
80014aa4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014aa8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014aac:	e0 8c 00 04 	brvs	80014ab4 <set_speed_command+0x190>
80014ab0:	e0 89 00 03 	brgt	80014ab6 <set_speed_command+0x192>
80014ab4:	30 08       	mov	r8,0
80014ab6:	5c 58       	castu.b	r8
80014ab8:	c0 f0       	breq	80014ad6 <set_speed_command+0x1b2>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
80014aba:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014abe:	10 9c       	mov	r12,r8
80014ac0:	fe b0 fd d4 	rcall	80014668 <f_abs>
80014ac4:	18 98       	mov	r8,r12
80014ac6:	10 9b       	mov	r11,r8
80014ac8:	ee fc ff f4 	ld.w	r12,r7[-12]
80014acc:	f0 16 00 08 	mcall	r6[32]
80014ad0:	18 98       	mov	r8,r12
80014ad2:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
80014ad6:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014ade:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014ae2:	ee fb ff f4 	ld.w	r11,r7[-12]
80014ae6:	10 9c       	mov	r12,r8
80014ae8:	f0 16 00 08 	mcall	r6[32]
80014aec:	18 98       	mov	r8,r12
80014aee:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
80014af2:	ee f9 ff c8 	ld.w	r9,r7[-56]
80014af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014afa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014afe:	ee fb ff f4 	ld.w	r11,r7[-12]
80014b02:	10 9c       	mov	r12,r8
80014b04:	f0 16 00 08 	mcall	r6[32]
80014b08:	18 98       	mov	r8,r12
80014b0a:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80014b0e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80014b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b16:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014b1a:	ee fb ff f4 	ld.w	r11,r7[-12]
80014b1e:	10 9c       	mov	r12,r8
80014b20:	f0 16 00 08 	mcall	r6[32]
80014b24:	18 98       	mov	r8,r12
80014b26:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014b2a:	30 08       	mov	r8,0
80014b2c:	ef 68 ff f3 	st.b	r7[-13],r8
80014b30:	c1 58       	rjmp	80014b5a <set_speed_command+0x236>
	{
		new_velocity[i] = dir_desired_bf[i];
80014b32:	ef 3a ff f3 	ld.ub	r10,r7[-13]
80014b36:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014b3a:	a3 68       	lsl	r8,0x2
80014b3c:	ee 08 00 08 	add	r8,r7,r8
80014b40:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80014b44:	f4 08 15 02 	lsl	r8,r10,0x2
80014b48:	ee 08 00 08 	add	r8,r7,r8
80014b4c:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014b50:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014b54:	2f f8       	sub	r8,-1
80014b56:	ef 68 ff f3 	st.b	r7[-13],r8
80014b5a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80014b5e:	30 28       	mov	r8,2
80014b60:	f0 09 18 00 	cp.b	r9,r8
80014b64:	fe 98 ff e7 	brls	80014b32 <set_speed_command+0x20e>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80014b68:	ec f8 00 00 	ld.w	r8,r6[0]
80014b6c:	70 08       	ld.w	r8,r8[0x0]
80014b6e:	f1 38 0f 7b 	ld.ub	r8,r8[3963]
80014b72:	58 08       	cp.w	r8,0
80014b74:	c0 90       	breq	80014b86 <set_speed_command+0x262>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80014b76:	ee c9 00 54 	sub	r9,r7,84
80014b7a:	ee c8 00 3c 	sub	r8,r7,60
80014b7e:	12 9b       	mov	r11,r9
80014b80:	10 9c       	mov	r12,r8
80014b82:	f0 16 01 95 	mcall	r6[1620]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
80014b86:	ee f8 ff ac 	ld.w	r8,r7[-84]
80014b8a:	10 9c       	mov	r12,r8
80014b8c:	f0 16 00 03 	mcall	r6[12]
80014b90:	14 92       	mov	r2,r10
80014b92:	16 93       	mov	r3,r11
80014b94:	ee f8 ff b0 	ld.w	r8,r7[-80]
80014b98:	10 9c       	mov	r12,r8
80014b9a:	f0 16 00 03 	mcall	r6[12]
80014b9e:	04 98       	mov	r8,r2
80014ba0:	06 99       	mov	r9,r3
80014ba2:	f0 16 00 56 	mcall	r6[344]
80014ba6:	14 98       	mov	r8,r10
80014ba8:	16 99       	mov	r9,r11
80014baa:	10 9a       	mov	r10,r8
80014bac:	12 9b       	mov	r11,r9
80014bae:	f0 16 00 09 	mcall	r6[36]
80014bb2:	18 98       	mov	r8,r12
80014bb4:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
80014bb8:	ec f8 00 00 	ld.w	r8,r6[0]
80014bbc:	70 08       	ld.w	r8,r8[0x0]
80014bbe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80014bc2:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
80014bc6:	ec f8 00 00 	ld.w	r8,r6[0]
80014bca:	70 08       	ld.w	r8,r8[0x0]
80014bcc:	ee f9 ff b0 	ld.w	r9,r7[-80]
80014bd0:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
80014bd4:	ec f8 00 00 	ld.w	r8,r6[0]
80014bd8:	70 08       	ld.w	r8,r8[0x0]
80014bda:	ee f9 ff b4 	ld.w	r9,r7[-76]
80014bde:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014be2:	ec f8 00 00 	ld.w	r8,r6[0]
80014be6:	70 05       	ld.w	r5,r8[0x0]
80014be8:	ee fc ff fc 	ld.w	r12,r7[-4]
80014bec:	f0 16 00 03 	mcall	r6[12]
80014bf0:	e0 68 99 9a 	mov	r8,39322
80014bf4:	ea 18 99 99 	orh	r8,0x9999
80014bf8:	e0 69 99 99 	mov	r9,39321
80014bfc:	ea 19 3f c9 	orh	r9,0x3fc9
80014c00:	f0 16 00 02 	mcall	r6[8]
80014c04:	14 98       	mov	r8,r10
80014c06:	16 99       	mov	r9,r11
80014c08:	10 9a       	mov	r10,r8
80014c0a:	12 9b       	mov	r11,r9
80014c0c:	f0 16 00 09 	mcall	r6[36]
80014c10:	18 98       	mov	r8,r12
80014c12:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
80014c16:	2e 9d       	sub	sp,-92
80014c18:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014c1c:	80 01       	ld.sh	r1,r0[0x0]
80014c1e:	47 b4       	lddsp	r4,sp[0x1ec]

80014c20 <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80014c20:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014c24:	1a 97       	mov	r7,sp
80014c26:	20 4d       	sub	sp,16
80014c28:	4f 06       	lddpc	r6,80014de8 <low_speed_nav+0x1c8>
80014c2a:	1e 26       	rsub	r6,pc
80014c2c:	ef 4c ff f4 	st.w	r7[-12],r12
80014c30:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80014c34:	e0 68 d9 7c 	mov	r8,55676
80014c38:	ea 18 3e a0 	orh	r8,0x3ea0
80014c3c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014c44:	70 08       	ld.w	r8,r8[0x0]
80014c46:	10 9c       	mov	r12,r8
80014c48:	fe b0 fd 10 	rcall	80014668 <f_abs>
80014c4c:	18 98       	mov	r8,r12
80014c4e:	10 9c       	mov	r12,r8
80014c50:	f0 16 00 03 	mcall	r6[12]
80014c54:	30 05       	mov	r5,0
80014c56:	e0 68 a9 fc 	mov	r8,43516
80014c5a:	ea 18 d2 f1 	orh	r8,0xd2f1
80014c5e:	e0 69 62 4d 	mov	r9,25165
80014c62:	ea 19 3f 50 	orh	r9,0x3f50
80014c66:	f0 16 00 20 	mcall	r6[128]
80014c6a:	18 98       	mov	r8,r12
80014c6c:	58 08       	cp.w	r8,0
80014c6e:	c0 20       	breq	80014c72 <low_speed_nav+0x52>
80014c70:	30 15       	mov	r5,1
80014c72:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014c76:	c1 e0       	breq	80014cb2 <low_speed_nav+0x92>
80014c78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014c7c:	2f c8       	sub	r8,-4
80014c7e:	70 08       	ld.w	r8,r8[0x0]
80014c80:	10 9c       	mov	r12,r8
80014c82:	fe b0 fc f3 	rcall	80014668 <f_abs>
80014c86:	18 98       	mov	r8,r12
80014c88:	10 9c       	mov	r12,r8
80014c8a:	f0 16 00 03 	mcall	r6[12]
80014c8e:	30 05       	mov	r5,0
80014c90:	e0 68 a9 fc 	mov	r8,43516
80014c94:	ea 18 d2 f1 	orh	r8,0xd2f1
80014c98:	e0 69 62 4d 	mov	r9,25165
80014c9c:	ea 19 3f 50 	orh	r9,0x3f50
80014ca0:	f0 16 00 20 	mcall	r6[128]
80014ca4:	18 98       	mov	r8,r12
80014ca6:	58 08       	cp.w	r8,0
80014ca8:	c0 20       	breq	80014cac <low_speed_nav+0x8c>
80014caa:	30 15       	mov	r5,1
80014cac:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014cb0:	c1 61       	brne	80014cdc <low_speed_nav+0xbc>
80014cb2:	ec f8 00 00 	ld.w	r8,r6[0]
80014cb6:	70 08       	ld.w	r8,r8[0x0]
80014cb8:	f1 38 0f 77 	ld.ub	r8,r8[3959]
80014cbc:	58 08       	cp.w	r8,0
80014cbe:	c0 f1       	brne	80014cdc <low_speed_nav+0xbc>
80014cc0:	30 18       	mov	r8,1
80014cc2:	ee fa ff f0 	ld.w	r10,r7[-16]
80014cc6:	fc 19 40 a0 	movh	r9,0x40a0
80014cca:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014cce:	e0 8c 00 04 	brvs	80014cd6 <low_speed_nav+0xb6>
80014cd2:	e0 8a 00 03 	brle	80014cd8 <low_speed_nav+0xb8>
80014cd6:	30 08       	mov	r8,0
80014cd8:	5c 58       	castu.b	r8
80014cda:	c1 90       	breq	80014d0c <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014cdc:	ec f8 00 00 	ld.w	r8,r6[0]
80014ce0:	70 08       	ld.w	r8,r8[0x0]
80014ce2:	30 09       	mov	r9,0
80014ce4:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014ce8:	ec f8 00 00 	ld.w	r8,r6[0]
80014cec:	70 08       	ld.w	r8,r8[0x0]
80014cee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014cf2:	72 09       	ld.w	r9,r9[0x0]
80014cf4:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014cf8:	ec f8 00 00 	ld.w	r8,r6[0]
80014cfc:	70 08       	ld.w	r8,r8[0x0]
80014cfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014d02:	2f c9       	sub	r9,-4
80014d04:	72 09       	ld.w	r9,r9[0x0]
80014d06:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014d0a:	c6 28       	rjmp	80014dce <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80014d0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014d10:	70 08       	ld.w	r8,r8[0x0]
80014d12:	10 9c       	mov	r12,r8
80014d14:	f0 16 00 03 	mcall	r6[12]
80014d18:	14 92       	mov	r2,r10
80014d1a:	16 93       	mov	r3,r11
80014d1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014d20:	2f c8       	sub	r8,-4
80014d22:	70 08       	ld.w	r8,r8[0x0]
80014d24:	10 9c       	mov	r12,r8
80014d26:	f0 16 00 03 	mcall	r6[12]
80014d2a:	04 98       	mov	r8,r2
80014d2c:	06 99       	mov	r9,r3
80014d2e:	f0 16 00 56 	mcall	r6[344]
80014d32:	14 98       	mov	r8,r10
80014d34:	16 99       	mov	r9,r11
80014d36:	10 9a       	mov	r10,r8
80014d38:	12 9b       	mov	r11,r9
80014d3a:	f0 16 00 09 	mcall	r6[36]
80014d3e:	18 98       	mov	r8,r12
80014d40:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80014d44:	30 18       	mov	r8,1
80014d46:	ee fa ff fc 	ld.w	r10,r7[-4]
80014d4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014d4e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014d52:	e0 8c 00 03 	brvs	80014d58 <low_speed_nav+0x138>
80014d56:	c0 24       	brge	80014d5a <low_speed_nav+0x13a>
80014d58:	30 08       	mov	r8,0
80014d5a:	5c 58       	castu.b	r8
80014d5c:	c0 e0       	breq	80014d78 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80014d5e:	ec f8 00 00 	ld.w	r8,r6[0]
80014d62:	70 08       	ld.w	r8,r8[0x0]
80014d64:	30 09       	mov	r9,0
80014d66:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80014d6a:	ec f8 00 00 	ld.w	r8,r6[0]
80014d6e:	70 08       	ld.w	r8,r8[0x0]
80014d70:	30 09       	mov	r9,0
80014d72:	f1 49 01 88 	st.w	r8[392],r9
80014d76:	c1 28       	rjmp	80014d9a <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014d78:	ec f8 00 00 	ld.w	r8,r6[0]
80014d7c:	70 08       	ld.w	r8,r8[0x0]
80014d7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014d82:	72 09       	ld.w	r9,r9[0x0]
80014d84:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014d88:	ec f8 00 00 	ld.w	r8,r6[0]
80014d8c:	70 08       	ld.w	r8,r8[0x0]
80014d8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014d92:	2f c9       	sub	r9,-4
80014d94:	72 09       	ld.w	r9,r9[0x0]
80014d96:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014d9a:	ec f8 00 00 	ld.w	r8,r6[0]
80014d9e:	70 05       	ld.w	r5,r8[0x0]
80014da0:	ee fc ff fc 	ld.w	r12,r7[-4]
80014da4:	f0 16 00 03 	mcall	r6[12]
80014da8:	e0 68 99 9a 	mov	r8,39322
80014dac:	ea 18 99 99 	orh	r8,0x9999
80014db0:	e0 69 99 99 	mov	r9,39321
80014db4:	ea 19 3f c9 	orh	r9,0x3fc9
80014db8:	f0 16 00 02 	mcall	r6[8]
80014dbc:	14 98       	mov	r8,r10
80014dbe:	16 99       	mov	r9,r11
80014dc0:	10 9a       	mov	r10,r8
80014dc2:	12 9b       	mov	r11,r9
80014dc4:	f0 16 00 09 	mcall	r6[36]
80014dc8:	18 98       	mov	r8,r12
80014dca:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014dce:	ec f8 00 00 	ld.w	r8,r6[0]
80014dd2:	70 08       	ld.w	r8,r8[0x0]
80014dd4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014dd8:	2f 89       	sub	r9,-8
80014dda:	72 09       	ld.w	r9,r9[0x0]
80014ddc:	f1 49 01 8c 	st.w	r8[396],r9
}
80014de0:	2f cd       	sub	sp,-16
80014de2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014de6:	00 00       	add	r0,r0
80014de8:	80 01       	ld.sh	r1,r0[0x0]
80014dea:	4a ae       	lddpc	lr,80014e90 <high_speed_nav+0xa4>

80014dec <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80014dec:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014df0:	1a 97       	mov	r7,sp
80014df2:	20 1d       	sub	sp,4
80014df4:	4a 76       	lddpc	r6,80014e90 <high_speed_nav+0xa4>
80014df6:	1e 26       	rsub	r6,pc
80014df8:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014dfc:	ec f8 00 00 	ld.w	r8,r6[0]
80014e00:	70 08       	ld.w	r8,r8[0x0]
80014e02:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e06:	72 09       	ld.w	r9,r9[0x0]
80014e08:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014e0c:	ec f8 00 00 	ld.w	r8,r6[0]
80014e10:	70 08       	ld.w	r8,r8[0x0]
80014e12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e16:	2f c9       	sub	r9,-4
80014e18:	72 09       	ld.w	r9,r9[0x0]
80014e1a:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014e1e:	ec f8 00 00 	ld.w	r8,r6[0]
80014e22:	70 08       	ld.w	r8,r8[0x0]
80014e24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e28:	2f 89       	sub	r9,-8
80014e2a:	72 09       	ld.w	r9,r9[0x0]
80014e2c:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80014e30:	ec f8 00 00 	ld.w	r8,r6[0]
80014e34:	70 05       	ld.w	r5,r8[0x0]
80014e36:	ec f8 00 00 	ld.w	r8,r6[0]
80014e3a:	70 08       	ld.w	r8,r8[0x0]
80014e3c:	f0 f8 0c 28 	ld.w	r8,r8[3112]
80014e40:	10 9c       	mov	r12,r8
80014e42:	f0 16 00 03 	mcall	r6[12]
80014e46:	14 92       	mov	r2,r10
80014e48:	16 93       	mov	r3,r11
80014e4a:	ec f8 00 00 	ld.w	r8,r6[0]
80014e4e:	70 08       	ld.w	r8,r8[0x0]
80014e50:	f0 f8 0c 2c 	ld.w	r8,r8[3116]
80014e54:	10 9c       	mov	r12,r8
80014e56:	f0 16 00 03 	mcall	r6[12]
80014e5a:	04 98       	mov	r8,r2
80014e5c:	06 99       	mov	r9,r3
80014e5e:	f0 16 00 56 	mcall	r6[344]
80014e62:	e0 68 99 9a 	mov	r8,39322
80014e66:	ea 18 99 99 	orh	r8,0x9999
80014e6a:	e0 69 99 99 	mov	r9,39321
80014e6e:	ea 19 3f c9 	orh	r9,0x3fc9
80014e72:	f0 16 00 02 	mcall	r6[8]
80014e76:	14 98       	mov	r8,r10
80014e78:	16 99       	mov	r9,r11
80014e7a:	10 9a       	mov	r10,r8
80014e7c:	12 9b       	mov	r11,r9
80014e7e:	f0 16 00 09 	mcall	r6[36]
80014e82:	18 98       	mov	r8,r12
80014e84:	eb 48 01 7c 	st.w	r5[380],r8
80014e88:	2f fd       	sub	sp,-4
80014e8a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014e8e:	00 00       	add	r0,r0
80014e90:	80 01       	ld.sh	r1,r0[0x0]
80014e92:	4c 7a       	lddpc	r10,80014fac <stabilise+0x94>

80014e94 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80014e94:	eb cd 40 c0 	pushm	r6-r7,lr
80014e98:	1a 97       	mov	r7,sp
80014e9a:	20 6d       	sub	sp,24
80014e9c:	49 e6       	lddpc	r6,80014f14 <interpolate+0x80>
80014e9e:	1e 26       	rsub	r6,pc
80014ea0:	ef 4c ff f8 	st.w	r7[-8],r12
80014ea4:	ef 4b ff f4 	st.w	r7[-12],r11
80014ea8:	ef 4a ff f0 	st.w	r7[-16],r10
80014eac:	ef 49 ff ec 	st.w	r7[-20],r9
80014eb0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80014eb4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014eb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014ebc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014ec0:	c0 41       	brne	80014ec8 <interpolate+0x34>
	{
		return y1;
80014ec2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014ec6:	c2 38       	rjmp	80014f0c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80014ec8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80014ecc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014ed0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014ed4:	ee fa ff f8 	ld.w	r10,r7[-8]
80014ed8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014edc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80014ee0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014ee4:	ee fa ff f0 	ld.w	r10,r7[-16]
80014ee8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014eec:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014ef0:	12 9b       	mov	r11,r9
80014ef2:	10 9c       	mov	r12,r8
80014ef4:	f0 16 00 08 	mcall	r6[32]
80014ef8:	18 98       	mov	r8,r12
80014efa:	10 99       	mov	r9,r8
80014efc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014f00:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014f04:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80014f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014f0c:	10 9c       	mov	r12,r8
80014f0e:	2f ad       	sub	sp,-24
80014f10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014f14:	80 01       	ld.sh	r1,r0[0x0]
80014f16:	4d 22       	lddpc	r2,8001505c <processData+0xa0>

80014f18 <stabilise>:
 */ 

#include "stabilisation.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
80014f18:	eb cd 40 e0 	pushm	r5-r7,lr
80014f1c:	1a 97       	mov	r7,sp
80014f1e:	20 4d       	sub	sp,16
80014f20:	4a 66       	lddpc	r6,80014fb8 <stabilise+0xa0>
80014f22:	1e 26       	rsub	r6,pc
80014f24:	ef 4c ff f8 	st.w	r7[-8],r12
80014f28:	ef 4b ff f4 	st.w	r7[-12],r11
80014f2c:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < 3; i++) 
80014f30:	30 08       	mov	r8,0
80014f32:	ef 48 ff fc 	st.w	r7[-4],r8
80014f36:	c2 68       	rjmp	80014f82 <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
80014f38:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014f3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f40:	a3 68       	lsl	r8,0x2
80014f42:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014f46:	f2 08 00 08 	add	r8,r9,r8
80014f4a:	70 0b       	ld.w	r11,r8[0x0]
80014f4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80014f50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f54:	12 98       	mov	r8,r9
80014f56:	a5 68       	lsl	r8,0x4
80014f58:	12 08       	add	r8,r9
80014f5a:	a3 68       	lsl	r8,0x2
80014f5c:	f4 08 00 08 	add	r8,r10,r8
80014f60:	ee fa ff f4 	ld.w	r10,r7[-12]
80014f64:	10 9c       	mov	r12,r8
80014f66:	f0 16 01 1a 	mcall	r6[1128]
80014f6a:	18 9a       	mov	r10,r12
80014f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014f70:	ea c9 ff bc 	sub	r9,r5,-68
80014f74:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i = 0; i < 3; i++) 
80014f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f7c:	2f f8       	sub	r8,-1
80014f7e:	ef 48 ff fc 	st.w	r7[-4],r8
80014f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f86:	58 28       	cp.w	r8,2
80014f88:	fe 9a ff d8 	brle	80014f38 <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80014f8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014f90:	2f 48       	sub	r8,-12
80014f92:	70 09       	ld.w	r9,r8[0x0]
80014f94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014f98:	f0 c8 ff 34 	sub	r8,r8,-204
80014f9c:	ee fa ff f4 	ld.w	r10,r7[-12]
80014fa0:	12 9b       	mov	r11,r9
80014fa2:	10 9c       	mov	r12,r8
80014fa4:	f0 16 01 1a 	mcall	r6[1128]
80014fa8:	18 99       	mov	r9,r12
80014faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014fae:	f1 49 01 1c 	st.w	r8[284],r9
80014fb2:	2f cd       	sub	sp,-16
80014fb4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014fb8:	80 01       	ld.sh	r1,r0[0x0]
80014fba:	4d a6       	lddpc	r6,80015120 <processData+0x164>

80014fbc <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
80014fbc:	eb cd 40 c0 	pushm	r6-r7,lr
80014fc0:	1a 97       	mov	r7,sp
80014fc2:	20 2d       	sub	sp,8
80014fc4:	4f 96       	lddpc	r6,800151a8 <processData+0x1ec>
80014fc6:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
80014fc8:	ec f8 01 14 	ld.w	r8,r6[276]
80014fcc:	70 09       	ld.w	r9,r8[0x0]
80014fce:	ec f8 03 4c 	ld.w	r8,r6[844]
80014fd2:	70 08       	ld.w	r8,r8[0x0]
80014fd4:	10 39       	cp.w	r9,r8
80014fd6:	c2 15       	brlt	80015018 <processData+0x5c>
		if (continuous_mode) {
80014fd8:	ec f8 03 24 	ld.w	r8,r6[804]
80014fdc:	11 88       	ld.ub	r8,r8[0x0]
80014fde:	58 08       	cp.w	r8,0
80014fe0:	c0 e0       	breq	80014ffc <processData+0x40>
			sample_counter=0;
80014fe2:	ec f8 01 14 	ld.w	r8,r6[276]
80014fe6:	30 09       	mov	r9,0
80014fe8:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
80014fea:	ec f8 01 78 	ld.w	r8,r6[376]
80014fee:	30 09       	mov	r9,0
80014ff0:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
80014ff2:	ec f8 01 34 	ld.w	r8,r6[308]
80014ff6:	30 09       	mov	r9,0
80014ff8:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
80014ffa:	cd 38       	rjmp	800151a0 <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
80014ffc:	ec f8 01 10 	ld.w	r8,r6[272]
80015000:	70 08       	ld.w	r8,r8[0x0]
80015002:	30 1b       	mov	r11,1
80015004:	10 9c       	mov	r12,r8
80015006:	f0 16 01 15 	mcall	r6[1108]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
8001500a:	ec f8 01 10 	ld.w	r8,r6[272]
8001500e:	70 08       	ld.w	r8,r8[0x0]
80015010:	10 9c       	mov	r12,r8
80015012:	f0 16 00 f4 	mcall	r6[976]
		}
		return;
80015016:	cc 58       	rjmp	800151a0 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
80015018:	ec f8 01 10 	ld.w	r8,r6[272]
8001501c:	70 08       	ld.w	r8,r8[0x0]
8001501e:	70 28       	ld.w	r8,r8[0x8]
80015020:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80015024:	e0 80 00 bd 	breq	8001519e <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
80015028:	ec f8 01 14 	ld.w	r8,r6[276]
8001502c:	70 08       	ld.w	r8,r8[0x0]
8001502e:	58 08       	cp.w	r8,0
80015030:	c4 85       	brlt	800150c0 <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
80015032:	30 08       	mov	r8,0
80015034:	ef 48 ff f8 	st.w	r7[-8],r8
80015038:	c3 88       	rjmp	800150a8 <processData+0xec>
			value=adcifa->resx[ch];
8001503a:	ec f8 01 10 	ld.w	r8,r6[272]
8001503e:	70 08       	ld.w	r8,r8[0x0]
80015040:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015044:	2d f9       	sub	r9,-33
80015046:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001504a:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
8001504e:	ec f8 01 78 	ld.w	r8,r6[376]
80015052:	70 08       	ld.w	r8,r8[0x0]
80015054:	58 08       	cp.w	r8,0
80015056:	e0 89 00 0c 	brgt	8001506e <processData+0xb2>
				internal_buffer[channel_index]=  value ;
8001505a:	ec f8 01 34 	ld.w	r8,r6[308]
8001505e:	70 09       	ld.w	r9,r8[0x0]
80015060:	ef 0a ff fe 	ld.sh	r10,r7[-2]
80015064:	ec f8 02 14 	ld.w	r8,r6[532]
80015068:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8001506c:	c1 18       	rjmp	8001508e <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
8001506e:	ec f8 01 34 	ld.w	r8,r6[308]
80015072:	70 08       	ld.w	r8,r8[0x0]
80015074:	10 99       	mov	r9,r8
80015076:	10 9a       	mov	r10,r8
80015078:	ec f8 02 14 	ld.w	r8,r6[532]
8001507c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80015080:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80015084:	10 0a       	add	r10,r8
80015086:	ec f8 02 14 	ld.w	r8,r6[532]
8001508a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
8001508e:	ec f8 01 34 	ld.w	r8,r6[308]
80015092:	70 08       	ld.w	r8,r8[0x0]
80015094:	f0 c9 ff ff 	sub	r9,r8,-1
80015098:	ec f8 01 34 	ld.w	r8,r6[308]
8001509c:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
8001509e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800150a2:	2f f8       	sub	r8,-1
800150a4:	ef 48 ff f8 	st.w	r7[-8],r8
800150a8:	ec f8 01 18 	ld.w	r8,r6[280]
800150ac:	11 88       	ld.ub	r8,r8[0x0]
800150ae:	5c 58       	castu.b	r8
800150b0:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800150b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800150b8:	10 39       	cp.w	r9,r8
800150ba:	fe 99 ff c0 	brgt	8001503a <processData+0x7e>
800150be:	c0 a8       	rjmp	800150d2 <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
800150c0:	ec f8 01 14 	ld.w	r8,r6[276]
800150c4:	70 08       	ld.w	r8,r8[0x0]
800150c6:	f0 c9 ff ff 	sub	r9,r8,-1
800150ca:	ec f8 01 14 	ld.w	r8,r6[276]
800150ce:	91 09       	st.w	r8[0x0],r9
800150d0:	c6 88       	rjmp	800151a0 <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
800150d2:	ec f8 01 f4 	ld.w	r8,r6[500]
800150d6:	11 88       	ld.ub	r8,r8[0x0]
800150d8:	5c 58       	castu.b	r8
800150da:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800150de:	ec f8 01 34 	ld.w	r8,r6[308]
800150e2:	70 08       	ld.w	r8,r8[0x0]
800150e4:	10 39       	cp.w	r9,r8
800150e6:	e0 89 00 0e 	brgt	80015102 <processData+0x146>
		oversampling_counter++;
800150ea:	ec f8 01 78 	ld.w	r8,r6[376]
800150ee:	70 08       	ld.w	r8,r8[0x0]
800150f0:	f0 c9 ff ff 	sub	r9,r8,-1
800150f4:	ec f8 01 78 	ld.w	r8,r6[376]
800150f8:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
800150fa:	ec f8 01 34 	ld.w	r8,r6[308]
800150fe:	30 09       	mov	r9,0
80015100:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
80015102:	ec f8 01 78 	ld.w	r8,r6[376]
80015106:	70 09       	ld.w	r9,r8[0x0]
80015108:	ec f8 03 48 	ld.w	r8,r6[840]
8001510c:	70 08       	ld.w	r8,r8[0x0]
8001510e:	10 39       	cp.w	r9,r8
80015110:	c4 85       	brlt	800151a0 <processData+0x1e4>
		oversampling_counter=0;
80015112:	ec f8 01 78 	ld.w	r8,r6[376]
80015116:	30 09       	mov	r9,0
80015118:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
8001511a:	ec f8 01 34 	ld.w	r8,r6[308]
8001511e:	30 09       	mov	r9,0
80015120:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
80015122:	30 08       	mov	r8,0
80015124:	ef 48 ff f8 	st.w	r7[-8],r8
80015128:	c2 78       	rjmp	80015176 <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
8001512a:	ec f8 02 5c 	ld.w	r8,r6[604]
8001512e:	70 09       	ld.w	r9,r8[0x0]
80015130:	ec f8 01 f4 	ld.w	r8,r6[500]
80015134:	11 88       	ld.ub	r8,r8[0x0]
80015136:	5c 58       	castu.b	r8
80015138:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
8001513c:	ec f8 01 14 	ld.w	r8,r6[276]
80015140:	70 08       	ld.w	r8,r8[0x0]
80015142:	b1 3a       	mul	r10,r8
80015144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015148:	f4 08 00 08 	add	r8,r10,r8
8001514c:	a1 78       	lsl	r8,0x1
8001514e:	f2 08 00 0a 	add	r10,r9,r8
80015152:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015156:	ec f8 02 14 	ld.w	r8,r6[532]
8001515a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001515e:	ec f9 04 c0 	ld.w	r9,r6[1216]
80015162:	72 09       	ld.w	r9,r9[0x0]
80015164:	f0 09 0c 08 	divs	r8,r8,r9
80015168:	5c 88       	casts.h	r8
8001516a:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
8001516c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015170:	2f f8       	sub	r8,-1
80015172:	ef 48 ff f8 	st.w	r7[-8],r8
80015176:	ec f8 01 f4 	ld.w	r8,r6[500]
8001517a:	11 88       	ld.ub	r8,r8[0x0]
8001517c:	5c 58       	castu.b	r8
8001517e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015186:	10 39       	cp.w	r9,r8
80015188:	fe 99 ff d1 	brgt	8001512a <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
8001518c:	ec f8 01 14 	ld.w	r8,r6[276]
80015190:	70 08       	ld.w	r8,r8[0x0]
80015192:	f0 c9 ff ff 	sub	r9,r8,-1
80015196:	ec f8 01 14 	ld.w	r8,r6[276]
8001519a:	91 09       	st.w	r8[0x0],r9
8001519c:	c0 28       	rjmp	800151a0 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
8001519e:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
800151a0:	2f ed       	sub	sp,-8
800151a2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800151a6:	d6 03       	rete
800151a8:	80 01       	ld.sh	r1,r0[0x0]
800151aa:	4e 4a       	lddpc	r10,80015338 <adc_sequencer_add+0x70>

800151ac <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
800151ac:	eb cd 40 c0 	pushm	r6-r7,lr
800151b0:	1a 97       	mov	r7,sp
800151b2:	20 4d       	sub	sp,16
800151b4:	4b 96       	lddpc	r6,80015298 <Init_ADCI+0xec>
800151b6:	1e 26       	rsub	r6,pc
800151b8:	ef 4c ff fc 	st.w	r7[-4],r12
800151bc:	16 98       	mov	r8,r11
800151be:	ef 4a ff f4 	st.w	r7[-12],r10
800151c2:	ef 49 ff f0 	st.w	r7[-16],r9
800151c6:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
800151ca:	31 3b       	mov	r11,19
800151cc:	ec fc 08 d4 	ld.w	r12,r6[2260]
800151d0:	f0 16 00 8d 	mcall	r6[564]

		adc_config_options.frequency=adc_frequency;
800151d4:	ec f8 01 00 	ld.w	r8,r6[256]
800151d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800151dc:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
800151de:	ec f9 01 00 	ld.w	r9,r6[256]
800151e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800151e6:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
800151e8:	ec f8 01 10 	ld.w	r8,r6[272]
800151ec:	70 08       	ld.w	r8,r8[0x0]
800151ee:	ec fb 01 00 	ld.w	r11,r6[256]
800151f2:	10 9c       	mov	r12,r8
800151f4:	f0 16 01 fd 	mcall	r6[2036]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
800151f8:	ec f8 01 00 	ld.w	r8,r6[256]
800151fc:	90 68       	ld.sh	r8,r8[0xc]
800151fe:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015202:	3f f8       	mov	r8,-1
80015204:	f0 09 19 00 	cp.h	r9,r8
80015208:	c1 51       	brne	80015232 <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
8001520a:	ec f9 01 00 	ld.w	r9,r6[256]
8001520e:	33 b8       	mov	r8,59
80015210:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
80015212:	ec f9 01 00 	ld.w	r9,r6[256]
80015216:	e0 68 42 10 	mov	r8,16912
8001521a:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
8001521c:	ec f9 01 00 	ld.w	r9,r6[256]
80015220:	e0 68 02 10 	mov	r8,528
80015224:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
80015226:	ec f9 01 00 	ld.w	r9,r6[256]
8001522a:	e0 68 02 10 	mov	r8,528
8001522e:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
80015232:	ec f9 01 00 	ld.w	r9,r6[256]
80015236:	33 b8       	mov	r8,59
80015238:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
8001523a:	ec f8 01 10 	ld.w	r8,r6[272]
8001523e:	70 08       	ld.w	r8,r8[0x0]
80015240:	e0 6a 24 00 	mov	r10,9216
80015244:	ea 1a 00 f4 	orh	r10,0xf4
80015248:	ec fb 01 00 	ld.w	r11,r6[256]
8001524c:	10 9c       	mov	r12,r8
8001524e:	f0 16 02 19 	mcall	r6[2148]

		clear_adc_sequencer();
80015252:	f0 16 01 f6 	mcall	r6[2008]
		continuous_mode=false;
80015256:	ec f9 03 24 	ld.w	r9,r6[804]
8001525a:	30 08       	mov	r8,0
8001525c:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
8001525e:	ec f8 01 10 	ld.w	r8,r6[272]
80015262:	70 08       	ld.w	r8,r8[0x0]
80015264:	3f fb       	mov	r11,-1
80015266:	10 9c       	mov	r12,r8
80015268:	f0 16 01 15 	mcall	r6[1108]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
8001526c:	fe c8 02 b0 	sub	r8,pc,688
80015270:	30 1a       	mov	r10,1
80015272:	e0 6b 04 80 	mov	r11,1152
80015276:	10 9c       	mov	r12,r8
80015278:	f0 16 00 38 	mcall	r6[224]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
8001527c:	ec f8 03 48 	ld.w	r8,r6[840]
80015280:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015284:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
80015286:	ec f8 04 c0 	ld.w	r8,r6[1216]
8001528a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001528e:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
80015290:	2f cd       	sub	sp,-16
80015292:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015296:	00 00       	add	r0,r0
80015298:	80 01       	ld.sh	r1,r0[0x0]
8001529a:	50 3a       	stdsp	sp[0xc],r10

8001529c <clear_adc_sequencer>:
void clear_adc_sequencer() {
8001529c:	eb cd 40 c0 	pushm	r6-r7,lr
800152a0:	1a 97       	mov	r7,sp
800152a2:	48 96       	lddpc	r6,800152c4 <clear_adc_sequencer+0x28>
800152a4:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
800152a6:	ec f9 01 18 	ld.w	r9,r6[280]
800152aa:	30 08       	mov	r8,0
800152ac:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
800152ae:	ec f8 01 18 	ld.w	r8,r6[280]
800152b2:	11 88       	ld.ub	r8,r8[0x0]
800152b4:	5c 58       	castu.b	r8
800152b6:	5c 58       	castu.b	r8
800152b8:	ec f9 02 a4 	ld.w	r9,r6[676]
800152bc:	b2 88       	st.b	r9[0x0],r8
}
800152be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800152c2:	00 00       	add	r0,r0
800152c4:	80 01       	ld.sh	r1,r0[0x0]
800152c6:	51 28       	stdsp	sp[0x48],r8

800152c8 <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
800152c8:	eb cd 40 c0 	pushm	r6-r7,lr
800152cc:	1a 97       	mov	r7,sp
800152ce:	20 3d       	sub	sp,12
800152d0:	4b 36       	lddpc	r6,8001539c <adc_sequencer_add+0xd4>
800152d2:	1e 26       	rsub	r6,pc
800152d4:	16 99       	mov	r9,r11
800152d6:	14 98       	mov	r8,r10
800152d8:	18 9a       	mov	r10,r12
800152da:	ef 6a ff fc 	st.b	r7[-4],r10
800152de:	ef 69 ff f8 	st.b	r7[-8],r9
800152e2:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
800152e6:	ec f8 01 18 	ld.w	r8,r6[280]
800152ea:	11 88       	ld.ub	r8,r8[0x0]
800152ec:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800152f0:	30 68       	mov	r8,6
800152f2:	f0 09 18 00 	cp.b	r9,r8
800152f6:	e0 89 00 4c 	brgt	8001538e <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
800152fa:	ec f8 01 18 	ld.w	r8,r6[280]
800152fe:	11 88       	ld.ub	r8,r8[0x0]
80015300:	5c 58       	castu.b	r8
80015302:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015306:	ec fa 02 24 	ld.w	r10,r6[548]
8001530a:	12 98       	mov	r8,r9
8001530c:	a1 78       	lsl	r8,0x1
8001530e:	12 08       	add	r8,r9
80015310:	f4 08 00 09 	add	r9,r10,r8
80015314:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80015318:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
8001531a:	ec f8 01 18 	ld.w	r8,r6[280]
8001531e:	11 88       	ld.ub	r8,r8[0x0]
80015320:	5c 58       	castu.b	r8
80015322:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015326:	ec fa 02 24 	ld.w	r10,r6[548]
8001532a:	12 98       	mov	r8,r9
8001532c:	a1 78       	lsl	r8,0x1
8001532e:	12 08       	add	r8,r9
80015330:	f4 08 00 08 	add	r8,r10,r8
80015334:	f0 c9 ff ff 	sub	r9,r8,-1
80015338:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001533c:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
8001533e:	ec f8 01 18 	ld.w	r8,r6[280]
80015342:	11 88       	ld.ub	r8,r8[0x0]
80015344:	5c 58       	castu.b	r8
80015346:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001534a:	ec fa 02 24 	ld.w	r10,r6[548]
8001534e:	12 98       	mov	r8,r9
80015350:	a1 78       	lsl	r8,0x1
80015352:	12 08       	add	r8,r9
80015354:	f4 08 00 08 	add	r8,r10,r8
80015358:	f0 c9 ff fe 	sub	r9,r8,-2
8001535c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80015360:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
80015362:	ec f8 01 18 	ld.w	r8,r6[280]
80015366:	11 88       	ld.ub	r8,r8[0x0]
80015368:	5c 58       	castu.b	r8
8001536a:	2f f8       	sub	r8,-1
8001536c:	5c 58       	castu.b	r8
8001536e:	ec f9 01 18 	ld.w	r9,r6[280]
80015372:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
80015374:	ec f8 01 18 	ld.w	r8,r6[280]
80015378:	11 88       	ld.ub	r8,r8[0x0]
8001537a:	5c 58       	castu.b	r8
8001537c:	5c 58       	castu.b	r8
8001537e:	ec f9 02 a4 	ld.w	r9,r6[676]
80015382:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
80015384:	ec f8 01 18 	ld.w	r8,r6[280]
80015388:	11 88       	ld.ub	r8,r8[0x0]
8001538a:	5c 58       	castu.b	r8
8001538c:	c0 38       	rjmp	80015392 <adc_sequencer_add+0xca>
	} else {
		return -1;
8001538e:	e0 68 00 ff 	mov	r8,255
	}
}
80015392:	10 9c       	mov	r12,r8
80015394:	2f dd       	sub	sp,-12
80015396:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001539a:	00 00       	add	r0,r0
8001539c:	80 01       	ld.sh	r1,r0[0x0]
8001539e:	51 56       	stdsp	sp[0x54],r6

800153a0 <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
800153a0:	eb cd 40 c0 	pushm	r6-r7,lr
800153a4:	1a 97       	mov	r7,sp
800153a6:	20 6d       	sub	sp,24
800153a8:	4a d6       	lddpc	r6,8001545c <ADCI_Start_Sampling+0xbc>
800153aa:	1e 26       	rsub	r6,pc
800153ac:	ef 4c ff f8 	st.w	r7[-8],r12
800153b0:	ef 4a ff f0 	st.w	r7[-16],r10
800153b4:	ef 49 ff ec 	st.w	r7[-20],r9
800153b8:	16 99       	mov	r9,r11
800153ba:	ef 69 ff f4 	st.b	r7[-12],r9
800153be:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
800153c2:	ec f8 01 10 	ld.w	r8,r6[272]
800153c6:	70 08       	ld.w	r8,r8[0x0]
800153c8:	ec f9 02 24 	ld.w	r9,r6[548]
800153cc:	ec fa 02 a4 	ld.w	r10,r6[676]
800153d0:	30 0b       	mov	r11,0
800153d2:	10 9c       	mov	r12,r8
800153d4:	f0 16 01 bd 	mcall	r6[1780]
	adci_buffer=buffer;
800153d8:	ec f8 02 5c 	ld.w	r8,r6[604]
800153dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800153e0:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
800153e2:	ec f8 01 00 	ld.w	r8,r6[256]
800153e6:	70 08       	ld.w	r8,r8[0x0]
800153e8:	ec f9 03 48 	ld.w	r9,r6[840]
800153ec:	72 0a       	ld.w	r10,r9[0x0]
800153ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800153f2:	f4 09 02 49 	mul	r9,r10,r9
800153f6:	f0 09 0d 08 	divu	r8,r8,r9
800153fa:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
800153fe:	ec f8 01 78 	ld.w	r8,r6[376]
80015402:	30 09       	mov	r9,0
80015404:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
80015406:	ec f8 01 14 	ld.w	r8,r6[276]
8001540a:	3f 69       	mov	r9,-10
8001540c:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
8001540e:	ec f8 03 4c 	ld.w	r8,r6[844]
80015412:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015416:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
80015418:	ec f9 03 24 	ld.w	r9,r6[804]
8001541c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80015420:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
80015422:	ec f9 01 f4 	ld.w	r9,r6[500]
80015426:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001542a:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
8001542c:	ec f8 01 34 	ld.w	r8,r6[308]
80015430:	30 09       	mov	r9,0
80015432:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
80015434:	ec f8 01 10 	ld.w	r8,r6[272]
80015438:	70 08       	ld.w	r8,r8[0x0]
8001543a:	30 1b       	mov	r11,1
8001543c:	10 9c       	mov	r12,r8
8001543e:	f0 16 01 4a 	mcall	r6[1320]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
80015442:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015446:	ec f8 01 10 	ld.w	r8,r6[272]
8001544a:	70 08       	ld.w	r8,r8[0x0]
8001544c:	12 9b       	mov	r11,r9
8001544e:	10 9c       	mov	r12,r8
80015450:	f0 16 01 d9 	mcall	r6[1892]
}
80015454:	2f ad       	sub	sp,-24
80015456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001545a:	00 00       	add	r0,r0
8001545c:	80 01       	ld.sh	r1,r0[0x0]
8001545e:	52 2e       	stdsp	sp[0x88],lr

80015460 <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
80015460:	eb cd 40 c0 	pushm	r6-r7,lr
80015464:	1a 97       	mov	r7,sp
80015466:	48 66       	lddpc	r6,8001547c <ADCI_Stop_Sampling+0x1c>
80015468:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
8001546a:	ec f8 01 10 	ld.w	r8,r6[272]
8001546e:	70 08       	ld.w	r8,r8[0x0]
80015470:	10 9c       	mov	r12,r8
80015472:	f0 16 00 f4 	mcall	r6[976]
	
}
80015476:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001547a:	00 00       	add	r0,r0
8001547c:	80 01       	ld.sh	r1,r0[0x0]
8001547e:	52 ec       	stdsp	sp[0xb8],r12

80015480 <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
80015480:	eb cd 40 c0 	pushm	r6-r7,lr
80015484:	1a 97       	mov	r7,sp
80015486:	48 86       	lddpc	r6,800154a4 <ADCI_Sampling_Complete+0x24>
80015488:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
8001548a:	ec f8 01 14 	ld.w	r8,r6[276]
8001548e:	70 0a       	ld.w	r10,r8[0x0]
80015490:	ec f8 03 4c 	ld.w	r8,r6[844]
80015494:	70 09       	ld.w	r9,r8[0x0]
80015496:	30 18       	mov	r8,1
80015498:	12 3a       	cp.w	r10,r9
8001549a:	c0 24       	brge	8001549e <ADCI_Sampling_Complete+0x1e>
8001549c:	30 08       	mov	r8,0
}
8001549e:	10 9c       	mov	r12,r8
800154a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800154a4:	80 01       	ld.sh	r1,r0[0x0]
800154a6:	53 0c       	stdsp	sp[0xc0],r12

800154a8 <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
800154a8:	eb cd 40 c0 	pushm	r6-r7,lr
800154ac:	1a 97       	mov	r7,sp
800154ae:	20 2d       	sub	sp,8
800154b0:	48 f6       	lddpc	r6,800154ec <ADCI_get_sample+0x44>
800154b2:	1e 26       	rsub	r6,pc
800154b4:	ef 4c ff fc 	st.w	r7[-4],r12
800154b8:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
800154bc:	ec f8 02 5c 	ld.w	r8,r6[604]
800154c0:	70 09       	ld.w	r9,r8[0x0]
800154c2:	ec f8 01 f4 	ld.w	r8,r6[500]
800154c6:	11 88       	ld.ub	r8,r8[0x0]
800154c8:	5c 58       	castu.b	r8
800154ca:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800154ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800154d2:	b1 3a       	mul	r10,r8
800154d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800154d8:	f4 08 00 08 	add	r8,r10,r8
800154dc:	a1 78       	lsl	r8,0x1
800154de:	f2 08 00 08 	add	r8,r9,r8
800154e2:	90 08       	ld.sh	r8,r8[0x0]
}
800154e4:	10 9c       	mov	r12,r8
800154e6:	2f ed       	sub	sp,-8
800154e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800154ec:	80 01       	ld.sh	r1,r0[0x0]
800154ee:	53 36       	stdsp	sp[0xcc],r6

800154f0 <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
800154f0:	eb cd 40 c0 	pushm	r6-r7,lr
800154f4:	1a 97       	mov	r7,sp
800154f6:	48 56       	lddpc	r6,80015508 <ADCI_get_buffer+0x18>
800154f8:	1e 26       	rsub	r6,pc
	return adci_buffer;
800154fa:	ec f8 02 5c 	ld.w	r8,r6[604]
800154fe:	70 08       	ld.w	r8,r8[0x0]
}
80015500:	10 9c       	mov	r12,r8
80015502:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015506:	00 00       	add	r0,r0
80015508:	80 01       	ld.sh	r1,r0[0x0]
8001550a:	53 7c       	stdsp	sp[0xdc],r12

8001550c <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
8001550c:	eb cd 40 c0 	pushm	r6-r7,lr
80015510:	1a 97       	mov	r7,sp
80015512:	48 56       	lddpc	r6,80015524 <ADCI_get_sampling_status+0x18>
80015514:	1e 26       	rsub	r6,pc
	return sample_counter;
80015516:	ec f8 01 14 	ld.w	r8,r6[276]
8001551a:	70 08       	ld.w	r8,r8[0x0]
}
8001551c:	10 9c       	mov	r12,r8
8001551e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015522:	00 00       	add	r0,r0
80015524:	80 01       	ld.sh	r1,r0[0x0]
80015526:	53 98       	stdsp	sp[0xe4],r8

80015528 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80015528:	eb cd 40 80 	pushm	r7,lr
8001552c:	1a 97       	mov	r7,sp
8001552e:	20 2d       	sub	sp,8
80015530:	ef 4c ff fc 	st.w	r7[-4],r12
80015534:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80015538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001553c:	30 09       	mov	r9,0
8001553e:	91 09       	st.w	r8[0x0],r9
}
80015540:	2f ed       	sub	sp,-8
80015542:	e3 cd 80 80 	ldm	sp++,r7,pc

80015546 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80015546:	eb cd 40 80 	pushm	r7,lr
8001554a:	1a 97       	mov	r7,sp
8001554c:	20 2d       	sub	sp,8
8001554e:	ef 4c ff fc 	st.w	r7[-4],r12
80015552:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80015556:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001555a:	70 08       	ld.w	r8,r8[0x0]
8001555c:	10 99       	mov	r9,r8
8001555e:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
80015562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015566:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80015568:	10 49       	or	r9,r8
8001556a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001556e:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80015570:	2f ed       	sub	sp,-8
80015572:	e3 cd 80 80 	ldm	sp++,r7,pc

80015576 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80015576:	eb cd 40 80 	pushm	r7,lr
8001557a:	1a 97       	mov	r7,sp
8001557c:	20 2d       	sub	sp,8
8001557e:	ef 4c ff fc 	st.w	r7[-4],r12
80015582:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80015586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001558a:	70 08       	ld.w	r8,r8[0x0]
8001558c:	10 99       	mov	r9,r8
8001558e:	e4 19 ff 00 	andh	r9,0xff00
80015592:	e0 19 ff fd 	andl	r9,0xfffd
80015596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001559a:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8001559c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800155a0:	58 18       	cp.w	r8,1
800155a2:	e0 88 00 17 	brls	800155d0 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800155a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155aa:	70 08       	ld.w	r8,r8[0x0]
800155ac:	10 99       	mov	r9,r8
800155ae:	a1 b9       	sbr	r9,0x1
800155b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155b4:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800155b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155ba:	70 09       	ld.w	r9,r8[0x0]
800155bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800155c0:	2f f8       	sub	r8,-1
800155c2:	a1 98       	lsr	r8,0x1
800155c4:	20 18       	sub	r8,1
800155c6:	b1 68       	lsl	r8,0x10
800155c8:	10 49       	or	r9,r8
800155ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155ce:	91 09       	st.w	r8[0x0],r9
	}
}
800155d0:	2f ed       	sub	sp,-8
800155d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800155d6 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800155d6:	eb cd 40 80 	pushm	r7,lr
800155da:	1a 97       	mov	r7,sp
800155dc:	20 2d       	sub	sp,8
800155de:	ef 4c ff fc 	st.w	r7[-4],r12
800155e2:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
800155e6:	fe 78 08 00 	mov	r8,-63488
800155ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800155ee:	ee fa ff fc 	ld.w	r10,r7[-4]
800155f2:	74 0a       	ld.w	r10,r10[0x0]
800155f4:	a1 aa       	sbr	r10,0x0
800155f6:	2e 79       	sub	r9,-25
800155f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800155fc:	2f ed       	sub	sp,-8
800155fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80015602 <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
80015602:	eb cd 40 80 	pushm	r7,lr
80015606:	1a 97       	mov	r7,sp
80015608:	20 1d       	sub	sp,4
8001560a:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8001560e:	fe 78 08 00 	mov	r8,-63488
80015612:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015616:	2e 79       	sub	r9,-25
80015618:	30 0a       	mov	r10,0
8001561a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8001561e:	2f fd       	sub	sp,-4
80015620:	e3 cd 80 80 	ldm	sp++,r7,pc

80015624 <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
80015624:	eb cd 40 c0 	pushm	r6-r7,lr
80015628:	1a 97       	mov	r7,sp
8001562a:	48 56       	lddpc	r6,8001563c <get_interrupt_counter+0x18>
8001562c:	1e 26       	rsub	r6,pc
	return interrupt_counter;
8001562e:	ec f8 08 d0 	ld.w	r8,r6[2256]
80015632:	70 08       	ld.w	r8,r8[0x0]
}
80015634:	10 9c       	mov	r12,r8
80015636:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001563a:	00 00       	add	r0,r0
8001563c:	80 01       	ld.sh	r1,r0[0x0]
8001563e:	54 b0       	stdsp	sp[0x12c],r0

80015640 <processData>:


void processData(void) {
80015640:	eb cd 40 c0 	pushm	r6-r7,lr
80015644:	1a 97       	mov	r7,sp
80015646:	20 3d       	sub	sp,12
80015648:	4b e6       	lddpc	r6,80015740 <processData+0x100>
8001564a:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
8001564c:	ec f8 01 48 	ld.w	r8,r6[328]
80015650:	70 08       	ld.w	r8,r8[0x0]
80015652:	e0 48 03 ff 	cp.w	r8,1023
80015656:	e0 89 00 70 	brgt	80015736 <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
8001565a:	30 0c       	mov	r12,0
8001565c:	f0 16 01 c7 	mcall	r6[1820]
80015660:	18 98       	mov	r8,r12
80015662:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
80015666:	30 08       	mov	r8,0
80015668:	ef 48 ff f4 	st.w	r7[-12],r8
8001566c:	c4 48       	rjmp	800156f4 <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
8001566e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015672:	12 98       	mov	r8,r9
80015674:	a1 78       	lsl	r8,0x1
80015676:	12 08       	add	r8,r9
80015678:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001567c:	f2 08 00 08 	add	r8,r9,r8
80015680:	11 88       	ld.ub	r8,r8[0x0]
80015682:	f0 0a 15 18 	lsl	r10,r8,0x18
80015686:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001568a:	12 98       	mov	r8,r9
8001568c:	a1 78       	lsl	r8,0x1
8001568e:	12 08       	add	r8,r9
80015690:	2f f8       	sub	r8,-1
80015692:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015696:	f2 08 00 08 	add	r8,r9,r8
8001569a:	11 88       	ld.ub	r8,r8[0x0]
8001569c:	b1 68       	lsl	r8,0x10
8001569e:	10 0a       	add	r10,r8
800156a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800156a4:	12 98       	mov	r8,r9
800156a6:	a1 78       	lsl	r8,0x1
800156a8:	12 08       	add	r8,r9
800156aa:	2f e8       	sub	r8,-2
800156ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800156b0:	f2 08 00 08 	add	r8,r9,r8
800156b4:	11 88       	ld.ub	r8,r8[0x0]
800156b6:	a9 68       	lsl	r8,0x8
800156b8:	f4 08 00 08 	add	r8,r10,r8
800156bc:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
800156c0:	ee fb ff f4 	ld.w	r11,r7[-12]
800156c4:	ec f8 01 48 	ld.w	r8,r6[328]
800156c8:	70 09       	ld.w	r9,r8[0x0]
800156ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800156ce:	f0 ca ff 01 	sub	r10,r8,-255
800156d2:	58 08       	cp.w	r8,0
800156d4:	f4 08 17 50 	movlt	r8,r10
800156d8:	a9 48       	asr	r8,0x8
800156da:	10 9a       	mov	r10,r8
800156dc:	ec f8 04 bc 	ld.w	r8,r6[1212]
800156e0:	ab 6b       	lsl	r11,0xa
800156e2:	f6 09 00 09 	add	r9,r11,r9
800156e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
800156ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800156ee:	2f f8       	sub	r8,-1
800156f0:	ef 48 ff f4 	st.w	r7[-12],r8
800156f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800156f8:	58 38       	cp.w	r8,3
800156fa:	fe 9a ff ba 	brle	8001566e <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
800156fe:	ec f8 02 70 	ld.w	r8,r6[624]
80015702:	70 08       	ld.w	r8,r8[0x0]
80015704:	58 08       	cp.w	r8,0
80015706:	c0 f0       	breq	80015724 <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80015708:	ec f8 02 70 	ld.w	r8,r6[624]
8001570c:	70 08       	ld.w	r8,r8[0x0]
8001570e:	ec f9 01 48 	ld.w	r9,r6[328]
80015712:	72 09       	ld.w	r9,r9[0x0]
80015714:	12 9c       	mov	r12,r9
80015716:	5d 18       	icall	r8
80015718:	18 98       	mov	r8,r12
8001571a:	5c 88       	casts.h	r8
8001571c:	5c 78       	castu.h	r8
8001571e:	10 9c       	mov	r12,r8
80015720:	f0 16 01 b5 	mcall	r6[1748]
	}		
	
	sampleCounter++;	
80015724:	ec f8 01 48 	ld.w	r8,r6[328]
80015728:	70 08       	ld.w	r8,r8[0x0]
8001572a:	f0 c9 ff ff 	sub	r9,r8,-1
8001572e:	ec f8 01 48 	ld.w	r8,r6[328]
80015732:	91 09       	st.w	r8[0x0],r9
80015734:	c0 28       	rjmp	80015738 <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
80015736:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
80015738:	2f dd       	sub	sp,-12
8001573a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001573e:	00 00       	add	r0,r0
80015740:	80 01       	ld.sh	r1,r0[0x0]
80015742:	54 ce       	stdsp	sp[0x130],lr

80015744 <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
80015744:	eb cd 40 c0 	pushm	r6-r7,lr
80015748:	1a 97       	mov	r7,sp
8001574a:	20 1d       	sub	sp,4
8001574c:	48 66       	lddpc	r6,80015764 <set_DAC_generator_function+0x20>
8001574e:	1e 26       	rsub	r6,pc
80015750:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
80015754:	ec f8 02 70 	ld.w	r8,r6[624]
80015758:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001575c:	91 09       	st.w	r8[0x0],r9
	
}
8001575e:	2f fd       	sub	sp,-4
80015760:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015764:	80 01       	ld.sh	r1,r0[0x0]
80015766:	55 d2       	stdsp	sp[0x174],r2

80015768 <get_sample>:

float get_sample(int channel, int sample) {
80015768:	eb cd 40 c0 	pushm	r6-r7,lr
8001576c:	1a 97       	mov	r7,sp
8001576e:	20 2d       	sub	sp,8
80015770:	48 c6       	lddpc	r6,800157a0 <get_sample+0x38>
80015772:	1e 26       	rsub	r6,pc
80015774:	ef 4c ff fc 	st.w	r7[-4],r12
80015778:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
8001577c:	ee fa ff fc 	ld.w	r10,r7[-4]
80015780:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015784:	ec f8 04 bc 	ld.w	r8,r6[1212]
80015788:	ab 6a       	lsl	r10,0xa
8001578a:	f4 09 00 09 	add	r9,r10,r9
8001578e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80015792:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
80015796:	10 9c       	mov	r12,r8
80015798:	2f ed       	sub	sp,-8
8001579a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001579e:	00 00       	add	r0,r0
800157a0:	80 01       	ld.sh	r1,r0[0x0]
800157a2:	55 f6       	stdsp	sp[0x17c],r6

800157a4 <get_sampling_status>:

int get_sampling_status(void) {
800157a4:	eb cd 40 c0 	pushm	r6-r7,lr
800157a8:	1a 97       	mov	r7,sp
800157aa:	48 56       	lddpc	r6,800157bc <get_sampling_status+0x18>
800157ac:	1e 26       	rsub	r6,pc
	return sampleCounter;
800157ae:	ec f8 01 48 	ld.w	r8,r6[328]
800157b2:	70 08       	ld.w	r8,r8[0x0]
}
800157b4:	10 9c       	mov	r12,r8
800157b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800157ba:	00 00       	add	r0,r0
800157bc:	80 01       	ld.sh	r1,r0[0x0]
800157be:	56 30       	stdsp	sp[0x18c],r0

800157c0 <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
800157c0:	eb cd 40 c0 	pushm	r6-r7,lr
800157c4:	1a 97       	mov	r7,sp
800157c6:	4b 96       	lddpc	r6,800158a8 <Init_ADC+0xe8>
800157c8:	1e 26       	rsub	r6,pc
	function_generator=NULL;
800157ca:	ec f8 02 70 	ld.w	r8,r6[624]
800157ce:	30 09       	mov	r9,0
800157d0:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800157d2:	30 3b       	mov	r11,3
800157d4:	32 3c       	mov	r12,35
800157d6:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800157da:	30 1b       	mov	r11,1
800157dc:	32 4c       	mov	r12,36
800157de:	f0 16 00 3a 	mcall	r6[232]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800157e2:	30 3b       	mov	r11,3
800157e4:	32 2c       	mov	r12,34
800157e6:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800157ea:	30 1b       	mov	r11,1
800157ec:	32 1c       	mov	r12,33
800157ee:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800157f2:	30 1b       	mov	r11,1
800157f4:	32 0c       	mov	r12,32
800157f6:	f0 16 00 3a 	mcall	r6[232]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800157fa:	30 3b       	mov	r11,3
800157fc:	34 0c       	mov	r12,64
800157fe:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015802:	30 3b       	mov	r11,3
80015804:	34 1c       	mov	r12,65
80015806:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001580a:	30 3b       	mov	r11,3
8001580c:	34 2c       	mov	r12,66
8001580e:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015812:	30 3b       	mov	r11,3
80015814:	34 3c       	mov	r12,67
80015816:	f0 16 00 3a 	mcall	r6[232]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
8001581a:	30 1c       	mov	r12,1
8001581c:	f0 16 01 53 	mcall	r6[1356]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
80015820:	ec f9 01 64 	ld.w	r9,r6[356]
80015824:	30 08       	mov	r8,0
80015826:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
80015828:	ec f9 01 64 	ld.w	r9,r6[356]
8001582c:	30 08       	mov	r8,0
8001582e:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
80015830:	ec f9 01 64 	ld.w	r9,r6[356]
80015834:	30 08       	mov	r8,0
80015836:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
80015838:	ec f9 01 64 	ld.w	r9,r6[356]
8001583c:	30 08       	mov	r8,0
8001583e:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
80015840:	30 1b       	mov	r11,1
80015842:	37 5c       	mov	r12,117
80015844:	f0 16 00 3c 	mcall	r6[240]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
80015848:	30 1a       	mov	r10,1
8001584a:	ec fb 01 64 	ld.w	r11,r6[356]
8001584e:	fe 7c 14 00 	mov	r12,-60416
80015852:	f0 16 01 ad 	mcall	r6[1716]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
80015856:	30 0b       	mov	r11,0
80015858:	fc 7c 18 00 	mov	r12,-190464
8001585c:	f0 16 01 3c 	mcall	r6[1264]
	spiInitDMA(0, 12);
80015860:	30 cb       	mov	r11,12
80015862:	30 0c       	mov	r12,0
80015864:	f0 16 01 9d 	mcall	r6[1652]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
80015868:	ec fb 06 98 	ld.w	r11,r6[1688]
8001586c:	30 0c       	mov	r12,0
8001586e:	f0 16 01 7f 	mcall	r6[1532]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
80015872:	ec f8 01 64 	ld.w	r8,r6[356]
80015876:	11 88       	ld.ub	r8,r8[0x0]
80015878:	10 9b       	mov	r11,r8
8001587a:	fe 7c 14 00 	mov	r12,-60416
8001587e:	f0 16 01 cf 	mcall	r6[1852]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
80015882:	ec f8 01 64 	ld.w	r8,r6[356]
80015886:	11 88       	ld.ub	r8,r8[0x0]
80015888:	10 9b       	mov	r11,r8
8001588a:	fe 7c 14 00 	mov	r12,-60416
8001588e:	f0 16 01 79 	mcall	r6[1508]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015892:	30 0b       	mov	r11,0
80015894:	fe 7c 14 00 	mov	r12,-60416
80015898:	f0 16 00 d5 	mcall	r6[852]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001589c:	30 3b       	mov	r11,3
8001589e:	32 5c       	mov	r12,37
800158a0:	f0 16 00 3a 	mcall	r6[232]

}
800158a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800158a8:	80 01       	ld.sh	r1,r0[0x0]
800158aa:	56 4c       	stdsp	sp[0x190],r12

800158ac <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
800158ac:	eb cd 40 c0 	pushm	r6-r7,lr
800158b0:	1a 97       	mov	r7,sp
800158b2:	20 1d       	sub	sp,4
800158b4:	49 56       	lddpc	r6,80015908 <ADC_Switch_Clock+0x5c>
800158b6:	1e 26       	rsub	r6,pc
800158b8:	18 98       	mov	r8,r12
800158ba:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
800158be:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800158c2:	30 18       	mov	r8,1
800158c4:	f0 09 18 00 	cp.b	r9,r8
800158c8:	c1 a1       	brne	800158fc <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
800158ca:	30 1b       	mov	r11,1
800158cc:	35 4c       	mov	r12,84
800158ce:	f0 16 00 3c 	mcall	r6[240]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800158d2:	30 3b       	mov	r11,3
800158d4:	32 5c       	mov	r12,37
800158d6:	f0 16 00 3a 	mcall	r6[232]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
800158da:	30 ab       	mov	r11,10
800158dc:	ec fc 02 08 	ld.w	r12,r6[520]
800158e0:	c2 4e       	rcall	80015528 <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
800158e2:	30 6b       	mov	r11,6
800158e4:	ec fc 02 08 	ld.w	r12,r6[520]
800158e8:	c2 fe       	rcall	80015546 <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
800158ea:	30 2b       	mov	r11,2
800158ec:	ec fc 02 08 	ld.w	r12,r6[520]
800158f0:	c4 3e       	rcall	80015576 <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
800158f2:	30 ab       	mov	r11,10
800158f4:	ec fc 02 08 	ld.w	r12,r6[520]
800158f8:	c6 fe       	rcall	800155d6 <genclk_enable>
800158fa:	c0 38       	rjmp	80015900 <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
800158fc:	30 ac       	mov	r12,10
800158fe:	c8 2e       	rcall	80015602 <genclk_disable>
		
	}
}
80015900:	2f fd       	sub	sp,-4
80015902:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015906:	00 00       	add	r0,r0
80015908:	80 01       	ld.sh	r1,r0[0x0]
8001590a:	57 3a       	stdsp	sp[0x1cc],r10

8001590c <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
8001590c:	eb cd 40 80 	pushm	r7,lr
80015910:	1a 97       	mov	r7,sp
80015912:	20 2d       	sub	sp,8
80015914:	ef 4c ff fc 	st.w	r7[-4],r12
80015918:	16 98       	mov	r8,r11
8001591a:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
8001591e:	2f ed       	sub	sp,-8
80015920:	e3 cd 80 80 	ldm	sp++,r7,pc

80015924 <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
80015924:	eb cd 40 80 	pushm	r7,lr
80015928:	1a 97       	mov	r7,sp
8001592a:	20 1d       	sub	sp,4
8001592c:	ef 4c ff fc 	st.w	r7[-4],r12
80015930:	2f fd       	sub	sp,-4
80015932:	e3 cd 80 80 	ldm	sp++,r7,pc

80015936 <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
80015936:	eb cd 40 c0 	pushm	r6-r7,lr
8001593a:	1a 97       	mov	r7,sp
8001593c:	48 46       	lddpc	r6,8001594c <ADC_Start_Oneshot+0x16>
8001593e:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
80015940:	ec f8 01 48 	ld.w	r8,r6[328]
80015944:	30 09       	mov	r9,0
80015946:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
80015948:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001594c:	80 01       	ld.sh	r1,r0[0x0]
8001594e:	57 c2       	stdsp	sp[0x1f0],r2

80015950 <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
80015950:	eb cd 40 80 	pushm	r7,lr
80015954:	1a 97       	mov	r7,sp
80015956:	e3 cd 80 80 	ldm	sp++,r7,pc

8001595a <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
8001595a:	eb cd 40 80 	pushm	r7,lr
8001595e:	1a 97       	mov	r7,sp
80015960:	e3 cd 80 80 	ldm	sp++,r7,pc

80015964 <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
80015964:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
80015966:	ec f8 01 48 	ld.w	r8,r6[328]
8001596a:	70 08       	ld.w	r8,r8[0x0]
8001596c:	e0 48 03 ff 	cp.w	r8,1023
80015970:	e0 89 00 06 	brgt	8001597c <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
80015974:	30 cb       	mov	r11,12
80015976:	30 0c       	mov	r12,0
80015978:	f0 16 01 82 	mcall	r6[1544]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
8001597c:	30 0b       	mov	r11,0
8001597e:	fe 7c 14 00 	mov	r12,-60416
80015982:	f0 16 00 d5 	mcall	r6[852]
	__asm__ __volatile__ (
80015986:	d7 f2       	popm	r0-r12,lr
80015988:	d6 03       	rete
	...

8001598c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001598c:	eb cd 40 c0 	pushm	r6-r7,lr
80015990:	1a 97       	mov	r7,sp
80015992:	20 6d       	sub	sp,24
80015994:	49 e6       	lddpc	r6,80015a0c <interpolate+0x80>
80015996:	1e 26       	rsub	r6,pc
80015998:	ef 4c ff f8 	st.w	r7[-8],r12
8001599c:	ef 4b ff f4 	st.w	r7[-12],r11
800159a0:	ef 4a ff f0 	st.w	r7[-16],r10
800159a4:	ef 49 ff ec 	st.w	r7[-20],r9
800159a8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800159ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800159b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800159b4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800159b8:	c0 41       	brne	800159c0 <interpolate+0x34>
	{
		return y1;
800159ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800159be:	c2 38       	rjmp	80015a04 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800159c0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800159c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800159c8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800159cc:	ee fa ff f8 	ld.w	r10,r7[-8]
800159d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800159d4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800159d8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800159dc:	ee fa ff f0 	ld.w	r10,r7[-16]
800159e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800159e4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800159e8:	12 9b       	mov	r11,r9
800159ea:	10 9c       	mov	r12,r8
800159ec:	f0 16 00 08 	mcall	r6[32]
800159f0:	18 98       	mov	r8,r12
800159f2:	10 99       	mov	r9,r8
800159f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800159f8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800159fc:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80015a00:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015a04:	10 9c       	mov	r12,r8
80015a06:	2f ad       	sub	sp,-24
80015a08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a0c:	80 01       	ld.sh	r1,r0[0x0]
80015a0e:	58 1a       	cp.w	r10,1

80015a10 <init_adxl345_slow>:
uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};



void init_adxl345_slow(void) {
80015a10:	eb cd 40 c0 	pushm	r6-r7,lr
80015a14:	1a 97       	mov	r7,sp
80015a16:	48 f6       	lddpc	r6,80015a50 <init_adxl345_slow+0x40>
80015a18:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015a1a:	ec fb 08 cc 	ld.w	r11,r6[2252]
80015a1e:	fe 7c 38 00 	mov	r12,-51200
80015a22:	f0 16 00 6b 	mcall	r6[428]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015a26:	30 08       	mov	r8,0
80015a28:	35 39       	mov	r9,83
80015a2a:	30 2a       	mov	r10,2
80015a2c:	ec fb 03 70 	ld.w	r11,r6[880]
80015a30:	fe 7c 38 00 	mov	r12,-51200
80015a34:	f0 16 00 39 	mcall	r6[228]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015a38:	30 08       	mov	r8,0
80015a3a:	35 39       	mov	r9,83
80015a3c:	30 2a       	mov	r10,2
80015a3e:	ec fb 08 60 	ld.w	r11,r6[2144]
80015a42:	fe 7c 38 00 	mov	r12,-51200
80015a46:	f0 16 00 39 	mcall	r6[228]
}
80015a4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a4e:	00 00       	add	r0,r0
80015a50:	80 01       	ld.sh	r1,r0[0x0]
80015a52:	58 9c       	cp.w	r12,9

80015a54 <get_acc_data_slow>:


acc_data* get_acc_data_slow(void) {
80015a54:	eb cd 40 c0 	pushm	r6-r7,lr
80015a58:	1a 97       	mov	r7,sp
80015a5a:	20 2d       	sub	sp,8
80015a5c:	4a 76       	lddpc	r6,80015af8 <get_acc_data_slow+0xa4>
80015a5e:	1e 26       	rsub	r6,pc
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
80015a60:	33 28       	mov	r8,50
80015a62:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80015a66:	ee cb 00 05 	sub	r11,r7,5
80015a6a:	30 08       	mov	r8,0
80015a6c:	35 39       	mov	r9,83
80015a6e:	30 1a       	mov	r10,1
80015a70:	fe 7c 38 00 	mov	r12,-51200
80015a74:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80015a78:	30 08       	mov	r8,0
80015a7a:	35 39       	mov	r9,83
80015a7c:	30 6a       	mov	r10,6
80015a7e:	ec fb 01 f0 	ld.w	r11,r6[496]
80015a82:	fe 7c 38 00 	mov	r12,-51200
80015a86:	f0 16 00 64 	mcall	r6[400]
	
	for (i=0; i<3; i++) {
80015a8a:	30 08       	mov	r8,0
80015a8c:	ef 48 ff fc 	st.w	r7[-4],r8
80015a90:	c2 98       	rjmp	80015ae2 <get_acc_data_slow+0x8e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80015a92:	ee fb ff fc 	ld.w	r11,r7[-4]
80015a96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015a9a:	a1 78       	lsl	r8,0x1
80015a9c:	ec f9 01 f0 	ld.w	r9,r6[496]
80015aa0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80015aa4:	5c 58       	castu.b	r8
80015aa6:	10 99       	mov	r9,r8
80015aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015aac:	a1 78       	lsl	r8,0x1
80015aae:	2f f8       	sub	r8,-1
80015ab0:	ec fa 01 f0 	ld.w	r10,r6[496]
80015ab4:	f4 08 07 08 	ld.ub	r8,r10[r8]
80015ab8:	5c 58       	castu.b	r8
80015aba:	a9 68       	lsl	r8,0x8
80015abc:	5c 88       	casts.h	r8
80015abe:	f2 08 00 08 	add	r8,r9,r8
80015ac2:	5c 88       	casts.h	r8
80015ac4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015ac8:	ec fa 01 f0 	ld.w	r10,r6[496]
80015acc:	f6 c8 ff fe 	sub	r8,r11,-2
80015ad0:	a1 78       	lsl	r8,0x1
80015ad2:	f4 08 00 08 	add	r8,r10,r8
80015ad6:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80015ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015adc:	2f f8       	sub	r8,-1
80015ade:	ef 48 ff fc 	st.w	r7[-4],r8
80015ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ae6:	58 28       	cp.w	r8,2
80015ae8:	fe 9a ff d5 	brle	80015a92 <get_acc_data_slow+0x3e>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80015aec:	ec f8 01 f0 	ld.w	r8,r6[496]
80015af0:	10 9c       	mov	r12,r8
80015af2:	2f ed       	sub	sp,-8
80015af4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015af8:	80 01       	ld.sh	r1,r0[0x0]
80015afa:	58 e2       	cp.w	r2,14

80015afc <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80015afc:	eb cd 40 80 	pushm	r7,lr
80015b00:	1a 97       	mov	r7,sp
80015b02:	20 1d       	sub	sp,4
80015b04:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80015b08:	30 18       	mov	r8,1
80015b0a:	ee fa ff fc 	ld.w	r10,r7[-4]
80015b0e:	30 09       	mov	r9,0
80015b10:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015b14:	e0 8c 00 03 	brvs	80015b1a <f_abs+0x1e>
80015b18:	c0 24       	brge	80015b1c <f_abs+0x20>
80015b1a:	30 08       	mov	r8,0
80015b1c:	5c 58       	castu.b	r8
80015b1e:	c0 40       	breq	80015b26 <f_abs+0x2a>
	{
		return a;
80015b20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015b24:	c0 58       	rjmp	80015b2e <f_abs+0x32>
	}else{
		return -a;
80015b26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015b2a:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80015b2e:	10 9c       	mov	r12,r8
80015b30:	2f fd       	sub	sp,-4
80015b32:	e3 cd 80 80 	ldm	sp++,r7,pc

80015b36 <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80015b36:	eb cd 40 80 	pushm	r7,lr
80015b3a:	1a 97       	mov	r7,sp
80015b3c:	20 4d       	sub	sp,16
80015b3e:	ef 4c ff f8 	st.w	r7[-8],r12
80015b42:	ef 4b ff f4 	st.w	r7[-12],r11
80015b46:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80015b4a:	30 18       	mov	r8,1
80015b4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015b50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015b54:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015b58:	e0 8c 00 04 	brvs	80015b60 <median_filter_3x+0x2a>
80015b5c:	e0 8a 00 03 	brle	80015b62 <median_filter_3x+0x2c>
80015b60:	30 08       	mov	r8,0
80015b62:	5c 58       	castu.b	r8
80015b64:	c2 50       	breq	80015bae <median_filter_3x+0x78>
80015b66:	30 18       	mov	r8,1
80015b68:	ee fa ff f8 	ld.w	r10,r7[-8]
80015b6c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015b70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015b74:	e0 8c 00 04 	brvs	80015b7c <median_filter_3x+0x46>
80015b78:	e0 8a 00 03 	brle	80015b7e <median_filter_3x+0x48>
80015b7c:	30 08       	mov	r8,0
80015b7e:	5c 58       	castu.b	r8
80015b80:	c1 70       	breq	80015bae <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80015b82:	30 18       	mov	r8,1
80015b84:	ee fa ff f4 	ld.w	r10,r7[-12]
80015b88:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015b8c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015b90:	e0 8c 00 04 	brvs	80015b98 <median_filter_3x+0x62>
80015b94:	e0 8a 00 03 	brle	80015b9a <median_filter_3x+0x64>
80015b98:	30 08       	mov	r8,0
80015b9a:	5c 58       	castu.b	r8
80015b9c:	c0 40       	breq	80015ba4 <median_filter_3x+0x6e>
80015b9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015ba2:	c0 38       	rjmp	80015ba8 <median_filter_3x+0x72>
80015ba4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015ba8:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
80015bac:	c4 88       	rjmp	80015c3c <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015bae:	30 18       	mov	r8,1
80015bb0:	ee fa ff f4 	ld.w	r10,r7[-12]
80015bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015bb8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015bbc:	e0 8c 00 04 	brvs	80015bc4 <median_filter_3x+0x8e>
80015bc0:	e0 8a 00 03 	brle	80015bc6 <median_filter_3x+0x90>
80015bc4:	30 08       	mov	r8,0
80015bc6:	5c 58       	castu.b	r8
80015bc8:	c2 50       	breq	80015c12 <median_filter_3x+0xdc>
80015bca:	30 18       	mov	r8,1
80015bcc:	ee fa ff f4 	ld.w	r10,r7[-12]
80015bd0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015bd4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015bd8:	e0 8c 00 04 	brvs	80015be0 <median_filter_3x+0xaa>
80015bdc:	e0 8a 00 03 	brle	80015be2 <median_filter_3x+0xac>
80015be0:	30 08       	mov	r8,0
80015be2:	5c 58       	castu.b	r8
80015be4:	c1 70       	breq	80015c12 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80015be6:	30 18       	mov	r8,1
80015be8:	ee fa ff f8 	ld.w	r10,r7[-8]
80015bec:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015bf0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015bf4:	e0 8c 00 04 	brvs	80015bfc <median_filter_3x+0xc6>
80015bf8:	e0 8a 00 03 	brle	80015bfe <median_filter_3x+0xc8>
80015bfc:	30 08       	mov	r8,0
80015bfe:	5c 58       	castu.b	r8
80015c00:	c0 40       	breq	80015c08 <median_filter_3x+0xd2>
80015c02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015c06:	c0 38       	rjmp	80015c0c <median_filter_3x+0xd6>
80015c08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015c0c:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015c10:	c1 68       	rjmp	80015c3c <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80015c12:	30 18       	mov	r8,1
80015c14:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015c1c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c20:	e0 8c 00 04 	brvs	80015c28 <median_filter_3x+0xf2>
80015c24:	e0 8a 00 03 	brle	80015c2a <median_filter_3x+0xf4>
80015c28:	30 08       	mov	r8,0
80015c2a:	5c 58       	castu.b	r8
80015c2c:	c0 40       	breq	80015c34 <median_filter_3x+0xfe>
80015c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015c32:	c0 38       	rjmp	80015c38 <median_filter_3x+0x102>
80015c34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015c38:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80015c3c:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80015c40:	10 9c       	mov	r12,r8
80015c42:	2f cd       	sub	sp,-16
80015c44:	e3 cd 80 80 	ldm	sp++,r7,pc

80015c48 <interpolate>:


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80015c48:	eb cd 40 c0 	pushm	r6-r7,lr
80015c4c:	1a 97       	mov	r7,sp
80015c4e:	20 6d       	sub	sp,24
80015c50:	49 e6       	lddpc	r6,80015cc8 <interpolate+0x80>
80015c52:	1e 26       	rsub	r6,pc
80015c54:	ef 4c ff f8 	st.w	r7[-8],r12
80015c58:	ef 4b ff f4 	st.w	r7[-12],r11
80015c5c:	ef 4a ff f0 	st.w	r7[-16],r10
80015c60:	ef 49 ff ec 	st.w	r7[-20],r9
80015c64:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80015c68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015c6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015c70:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80015c74:	c0 41       	brne	80015c7c <interpolate+0x34>
	{
		return y1;
80015c76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015c7a:	c2 38       	rjmp	80015cc0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80015c7c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015c80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015c84:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015c88:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015c90:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015c94:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015c98:	ee fa ff f0 	ld.w	r10,r7[-16]
80015c9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015ca0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80015ca4:	12 9b       	mov	r11,r9
80015ca6:	10 9c       	mov	r12,r8
80015ca8:	f0 16 00 08 	mcall	r6[32]
80015cac:	18 98       	mov	r8,r12
80015cae:	10 99       	mov	r9,r8
80015cb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015cb4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015cb8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80015cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015cc0:	10 9c       	mov	r12,r8
80015cc2:	2f ad       	sub	sp,-24
80015cc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015cc8:	80 01       	ld.sh	r1,r0[0x0]
80015cca:	5a d6       	cp.w	r6,-19

80015ccc <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80015ccc:	eb cd 40 c0 	pushm	r6-r7,lr
80015cd0:	1a 97       	mov	r7,sp
80015cd2:	20 2d       	sub	sp,8
80015cd4:	48 f6       	lddpc	r6,80015d10 <bmp085_read_int+0x44>
80015cd6:	1e 26       	rsub	r6,pc
80015cd8:	18 98       	mov	r8,r12
80015cda:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80015cde:	ee cb 00 08 	sub	r11,r7,8
80015ce2:	30 08       	mov	r8,0
80015ce4:	37 79       	mov	r9,119
80015ce6:	30 1a       	mov	r10,1
80015ce8:	fe 7c 38 00 	mov	r12,-51200
80015cec:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80015cf0:	ee cb 00 02 	sub	r11,r7,2
80015cf4:	30 08       	mov	r8,0
80015cf6:	37 79       	mov	r9,119
80015cf8:	30 2a       	mov	r10,2
80015cfa:	fe 7c 38 00 	mov	r12,-51200
80015cfe:	f0 16 00 64 	mcall	r6[400]
	return result;
80015d02:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80015d06:	10 9c       	mov	r12,r8
80015d08:	2f ed       	sub	sp,-8
80015d0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d0e:	00 00       	add	r0,r0
80015d10:	80 01       	ld.sh	r1,r0[0x0]
80015d12:	5b 5a       	cp.w	r10,-11

80015d14 <init_bmp085>:

void init_bmp085(){
80015d14:	eb cd 40 c0 	pushm	r6-r7,lr
80015d18:	1a 97       	mov	r7,sp
80015d1a:	20 1d       	sub	sp,4
80015d1c:	49 36       	lddpc	r6,80015d68 <init_bmp085+0x54>
80015d1e:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80015d20:	ec f8 00 44 	ld.w	r8,r6[68]
80015d24:	30 09       	mov	r9,0
80015d26:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80015d28:	30 08       	mov	r8,0
80015d2a:	ef 48 ff fc 	st.w	r7[-4],r8
80015d2e:	c0 e8       	rjmp	80015d4a <init_bmp085+0x36>
80015d30:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015d34:	ec f8 00 44 	ld.w	r8,r6[68]
80015d38:	2f c9       	sub	r9,-4
80015d3a:	30 0a       	mov	r10,0
80015d3c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d44:	2f f8       	sub	r8,-1
80015d46:	ef 48 ff fc 	st.w	r7[-4],r8
80015d4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d4e:	58 28       	cp.w	r8,2
80015d50:	fe 9a ff f0 	brle	80015d30 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80015d54:	ec f8 00 44 	ld.w	r8,r6[68]
80015d58:	30 09       	mov	r9,0
80015d5a:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80015d5c:	f0 16 01 ed 	mcall	r6[1972]
}
80015d60:	2f fd       	sub	sp,-4
80015d62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d66:	00 00       	add	r0,r0
80015d68:	80 01       	ld.sh	r1,r0[0x0]
80015d6a:	5b a2       	cp.w	r2,-6
80015d6c:	42 4d       	lddsp	sp,sp[0x90]
80015d6e:	50 38       	stdsp	sp[0xc],r8
80015d70:	35 2f       	mov	pc,82
80015d72:	31 38       	mov	r8,19
80015d74:	30 20       	mov	r0,2
80015d76:	70 72       	ld.w	r2,r8[0x1c]
80015d78:	65 73       	ld.w	r3,r2[0x5c]
80015d7a:	73 75       	ld.w	r5,r9[0x5c]
80015d7c:	72 65       	ld.w	r5,r9[0x18]
80015d7e:	20 73       	sub	r3,7
80015d80:	65 6e       	ld.w	lr,r2[0x58]
80015d82:	73 6f       	ld.w	pc,r9[0x58]
80015d84:	72 20       	ld.w	r0,r9[0x8]
80015d86:	66 6f       	ld.w	pc,r3[0x18]
80015d88:	75 6e       	ld.w	lr,r10[0x58]
80015d8a:	64 20       	ld.w	r0,r2[0x8]
80015d8c:	28 30       	sub	r0,-125
80015d8e:	78 37       	ld.w	r7,r12[0xc]
80015d90:	37 29       	mov	r9,114
80015d92:	0a 00       	add	r0,r5
80015d94:	42 4d       	lddsp	sp,sp[0x90]
80015d96:	50 38       	stdsp	sp[0xc],r8
80015d98:	35 2f       	mov	pc,82
80015d9a:	31 38       	mov	r8,19
80015d9c:	30 20       	mov	r0,2
80015d9e:	70 72       	ld.w	r2,r8[0x1c]
80015da0:	65 73       	ld.w	r3,r2[0x5c]
80015da2:	73 75       	ld.w	r5,r9[0x5c]
80015da4:	72 65       	ld.w	r5,r9[0x18]
80015da6:	20 73       	sub	r3,7
80015da8:	65 6e       	ld.w	lr,r2[0x58]
80015daa:	73 6f       	ld.w	pc,r9[0x58]
80015dac:	72 20       	ld.w	r0,r9[0x8]
80015dae:	6e 6f       	ld.w	pc,r7[0x18]
80015db0:	74 20       	ld.w	r0,r10[0x8]
80015db2:	72 65       	ld.w	r5,r9[0x18]
80015db4:	73 70       	ld.w	r0,r9[0x5c]
80015db6:	6f 6e       	ld.w	lr,r7[0x58]
80015db8:	64 69       	ld.w	r9,r2[0x18]
80015dba:	6e 67       	ld.w	r7,r7[0x18]
80015dbc:	20 28       	sub	r8,2
80015dbe:	30 78       	mov	r8,7
80015dc0:	37 37       	mov	r7,115
80015dc2:	29 0a       	sub	r10,-112
	...

80015dc6 <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
80015dc6:	eb cd 40 c0 	pushm	r6-r7,lr
80015dca:	1a 97       	mov	r7,sp
80015dcc:	4d 36       	lddpc	r6,80015f18 <init_bmp085_slow+0x152>
80015dce:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015dd0:	ec fb 08 c8 	ld.w	r11,r6[2248]
80015dd4:	fe 7c 38 00 	mov	r12,-51200
80015dd8:	f0 16 00 6b 	mcall	r6[428]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80015ddc:	37 7b       	mov	r11,119
80015dde:	fe 7c 38 00 	mov	r12,-51200
80015de2:	f0 16 01 02 	mcall	r6[1032]
80015de6:	18 98       	mov	r8,r12
80015de8:	58 08       	cp.w	r8,0
80015dea:	e0 81 00 8f 	brne	80015f08 <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80015dee:	fe cc 00 82 	sub	r12,pc,130
80015df2:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
80015df6:	ec f9 03 20 	ld.w	r9,r6[800]
80015dfa:	e0 68 01 98 	mov	r8,408
80015dfe:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80015e00:	ec f9 02 fc 	ld.w	r9,r6[764]
80015e04:	3b 88       	mov	r8,-72
80015e06:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
80015e08:	ec f9 02 84 	ld.w	r9,r6[644]
80015e0c:	fe 78 c7 d1 	mov	r8,-14383
80015e10:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80015e12:	ec f9 02 e0 	ld.w	r9,r6[736]
80015e16:	e0 68 7f e5 	mov	r8,32741
80015e1a:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80015e1c:	ec f9 03 00 	ld.w	r9,r6[768]
80015e20:	e0 68 7f f5 	mov	r8,32757
80015e24:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
80015e26:	ec f9 03 10 	ld.w	r9,r6[784]
80015e2a:	e0 68 5a 71 	mov	r8,23153
80015e2e:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80015e30:	ec f9 02 b8 	ld.w	r9,r6[696]
80015e34:	fe 78 dd f9 	mov	r8,-8711
80015e38:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
80015e3a:	ec f9 02 ec 	ld.w	r9,r6[748]
80015e3e:	e0 68 0b 34 	mov	r8,2868
80015e42:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80015e44:	ec f9 03 14 	ld.w	r9,r6[788]
80015e48:	e0 68 18 2e 	mov	r8,6190
80015e4c:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80015e4e:	ec f9 03 30 	ld.w	r9,r6[816]
80015e52:	30 48       	mov	r8,4
80015e54:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
80015e56:	e0 6c 00 aa 	mov	r12,170
80015e5a:	f0 16 00 43 	mcall	r6[268]
80015e5e:	18 98       	mov	r8,r12
80015e60:	ec f9 03 20 	ld.w	r9,r6[800]
80015e64:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
80015e66:	e0 6c 00 ac 	mov	r12,172
80015e6a:	f0 16 00 43 	mcall	r6[268]
80015e6e:	18 98       	mov	r8,r12
80015e70:	ec f9 02 fc 	ld.w	r9,r6[764]
80015e74:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
80015e76:	e0 6c 00 ae 	mov	r12,174
80015e7a:	f0 16 00 43 	mcall	r6[268]
80015e7e:	18 98       	mov	r8,r12
80015e80:	ec f9 02 84 	ld.w	r9,r6[644]
80015e84:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
80015e86:	e0 6c 00 b0 	mov	r12,176
80015e8a:	f0 16 00 43 	mcall	r6[268]
80015e8e:	18 98       	mov	r8,r12
80015e90:	ec f9 02 e0 	ld.w	r9,r6[736]
80015e94:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
80015e96:	e0 6c 00 b2 	mov	r12,178
80015e9a:	f0 16 00 43 	mcall	r6[268]
80015e9e:	18 98       	mov	r8,r12
80015ea0:	ec f9 03 00 	ld.w	r9,r6[768]
80015ea4:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
80015ea6:	e0 6c 00 b4 	mov	r12,180
80015eaa:	f0 16 00 43 	mcall	r6[268]
80015eae:	18 98       	mov	r8,r12
80015eb0:	ec f9 03 10 	ld.w	r9,r6[784]
80015eb4:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
80015eb6:	e0 6c 00 b6 	mov	r12,182
80015eba:	f0 16 00 43 	mcall	r6[268]
80015ebe:	18 98       	mov	r8,r12
80015ec0:	ec f9 03 14 	ld.w	r9,r6[788]
80015ec4:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
80015ec6:	e0 6c 00 b8 	mov	r12,184
80015eca:	f0 16 00 43 	mcall	r6[268]
80015ece:	18 98       	mov	r8,r12
80015ed0:	ec f9 03 30 	ld.w	r9,r6[816]
80015ed4:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
80015ed6:	e0 6c 00 ba 	mov	r12,186
80015eda:	f0 16 00 43 	mcall	r6[268]
80015ede:	18 98       	mov	r8,r12
80015ee0:	ec f9 08 00 	ld.w	r9,r6[2048]
80015ee4:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
80015ee6:	e0 6c 00 bc 	mov	r12,188
80015eea:	f0 16 00 43 	mcall	r6[268]
80015eee:	18 98       	mov	r8,r12
80015ef0:	ec f9 02 b8 	ld.w	r9,r6[696]
80015ef4:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
80015ef6:	e0 6c 00 be 	mov	r12,190
80015efa:	f0 16 00 43 	mcall	r6[268]
80015efe:	18 98       	mov	r8,r12
80015f00:	ec f9 02 ec 	ld.w	r9,r6[748]
80015f04:	b2 08       	st.h	r9[0x0],r8
80015f06:	c0 68       	rjmp	80015f12 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
80015f08:	fe cc 01 74 	sub	r12,pc,372
80015f0c:	f0 16 00 01 	mcall	r6[4]
		return;
80015f10:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80015f12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f16:	00 00       	add	r0,r0
80015f18:	80 01       	ld.sh	r1,r0[0x0]
80015f1a:	5c 52       	castu.b	r2

80015f1c <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
80015f1c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80015f20:	1a 97       	mov	r7,sp
80015f22:	21 4d       	sub	sp,80
80015f24:	fe f6 06 2c 	ld.w	r6,pc[1580]
80015f28:	1e 26       	rsub	r6,pc
80015f2a:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
80015f2e:	ec f8 08 c4 	ld.w	r8,r6[2244]
80015f32:	90 08       	ld.sh	r8,r8[0x0]
80015f34:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
80015f38:	ec f8 08 c0 	ld.w	r8,r6[2240]
80015f3c:	90 08       	ld.sh	r8,r8[0x0]
80015f3e:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80015f42:	e0 78 8b cd 	mov	r8,101325
80015f46:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
80015f4a:	ec f8 00 44 	ld.w	r8,r6[68]
80015f4e:	70 c8       	ld.w	r8,r8[0x30]
80015f50:	58 18       	cp.w	r8,1
80015f52:	c1 50       	breq	80015f7c <get_pressure_data_slow+0x60>
80015f54:	c0 53       	brcs	80015f5e <get_pressure_data_slow+0x42>
80015f56:	58 28       	cp.w	r8,2
80015f58:	c3 80       	breq	80015fc8 <get_pressure_data_slow+0xac>
80015f5a:	e0 8f 02 e9 	bral	8001652c <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80015f5e:	ee cb 00 48 	sub	r11,r7,72
80015f62:	30 08       	mov	r8,0
80015f64:	37 79       	mov	r9,119
80015f66:	30 2a       	mov	r10,2
80015f68:	fe 7c 38 00 	mov	r12,-51200
80015f6c:	f0 16 00 39 	mcall	r6[228]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80015f70:	ec f8 00 44 	ld.w	r8,r6[68]
80015f74:	30 19       	mov	r9,1
80015f76:	91 c9       	st.w	r8[0x30],r9
			break;
80015f78:	e0 8f 02 da 	bral	8001652c <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80015f7c:	3f 68       	mov	r8,-10
80015f7e:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80015f82:	ee cb 00 45 	sub	r11,r7,69
80015f86:	30 08       	mov	r8,0
80015f88:	37 79       	mov	r9,119
80015f8a:	30 1a       	mov	r10,1
80015f8c:	fe 7c 38 00 	mov	r12,-51200
80015f90:	f0 16 00 39 	mcall	r6[228]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80015f94:	ec f8 00 44 	ld.w	r8,r6[68]
80015f98:	f0 cb ff fd 	sub	r11,r8,-3
80015f9c:	30 08       	mov	r8,0
80015f9e:	37 79       	mov	r9,119
80015fa0:	30 2a       	mov	r10,2
80015fa2:	fe 7c 38 00 	mov	r12,-51200
80015fa6:	f0 16 00 64 	mcall	r6[400]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
80015faa:	ee cb 00 4c 	sub	r11,r7,76
80015fae:	30 08       	mov	r8,0
80015fb0:	37 79       	mov	r9,119
80015fb2:	30 2a       	mov	r10,2
80015fb4:	fe 7c 38 00 	mov	r12,-51200
80015fb8:	f0 16 00 39 	mcall	r6[228]
			pressure_outputs.state=GET_PRESSURE;
80015fbc:	ec f8 00 44 	ld.w	r8,r6[68]
80015fc0:	30 29       	mov	r9,2
80015fc2:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80015fc4:	e0 8f 02 b4 	bral	8001652c <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
80015fc8:	3f 68       	mov	r8,-10
80015fca:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80015fce:	ee cb 00 45 	sub	r11,r7,69
80015fd2:	30 08       	mov	r8,0
80015fd4:	37 79       	mov	r9,119
80015fd6:	30 1a       	mov	r10,1
80015fd8:	fe 7c 38 00 	mov	r12,-51200
80015fdc:	f0 16 00 39 	mcall	r6[228]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
80015fe0:	30 08       	mov	r8,0
80015fe2:	37 79       	mov	r9,119
80015fe4:	30 3a       	mov	r10,3
80015fe6:	ec fb 00 44 	ld.w	r11,r6[68]
80015fea:	fe 7c 38 00 	mov	r12,-51200
80015fee:	f0 16 00 64 	mcall	r6[400]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
80015ff2:	ec f8 00 44 	ld.w	r8,r6[68]
80015ff6:	11 88       	ld.ub	r8,r8[0x0]
80015ff8:	f0 09 15 10 	lsl	r9,r8,0x10
80015ffc:	ec f8 00 44 	ld.w	r8,r6[68]
80016000:	11 98       	ld.ub	r8,r8[0x1]
80016002:	a9 68       	lsl	r8,0x8
80016004:	10 49       	or	r9,r8
80016006:	ec f8 00 44 	ld.w	r8,r6[68]
8001600a:	11 a8       	ld.ub	r8,r8[0x2]
8001600c:	f3 e8 10 08 	or	r8,r9,r8
80016010:	a7 88       	lsr	r8,0x6
80016012:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
80016016:	ec f8 00 44 	ld.w	r8,r6[68]
8001601a:	11 b8       	ld.ub	r8,r8[0x3]
8001601c:	f0 09 15 08 	lsl	r9,r8,0x8
80016020:	ec f8 00 44 	ld.w	r8,r6[68]
80016024:	11 c8       	ld.ub	r8,r8[0x4]
80016026:	f3 e8 10 08 	or	r8,r9,r8
8001602a:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
8001602e:	ec f8 03 10 	ld.w	r8,r6[784]
80016032:	90 08       	ld.sh	r8,r8[0x0]
80016034:	5c 78       	castu.h	r8
80016036:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001603a:	10 19       	sub	r9,r8
8001603c:	ec f8 03 00 	ld.w	r8,r6[768]
80016040:	90 08       	ld.sh	r8,r8[0x0]
80016042:	5c 78       	castu.h	r8
80016044:	f2 08 02 48 	mul	r8,r9,r8
80016048:	10 9c       	mov	r12,r8
8001604a:	f0 16 00 1a 	mcall	r6[104]
8001604e:	30 08       	mov	r8,0
80016050:	fc 19 40 e0 	movh	r9,0x40e0
80016054:	f0 16 00 0c 	mcall	r6[48]
80016058:	14 98       	mov	r8,r10
8001605a:	16 99       	mov	r9,r11
8001605c:	10 9a       	mov	r10,r8
8001605e:	12 9b       	mov	r11,r9
80016060:	f0 16 00 14 	mcall	r6[80]
80016064:	18 98       	mov	r8,r12
80016066:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
8001606a:	ec f8 02 b8 	ld.w	r8,r6[696]
8001606e:	90 08       	ld.sh	r8,r8[0x0]
80016070:	10 9c       	mov	r12,r8
80016072:	f0 16 00 1a 	mcall	r6[104]
80016076:	30 08       	mov	r8,0
80016078:	fc 19 40 a0 	movh	r9,0x40a0
8001607c:	f0 16 00 02 	mcall	r6[8]
80016080:	14 98       	mov	r8,r10
80016082:	16 99       	mov	r9,r11
80016084:	10 92       	mov	r2,r8
80016086:	12 93       	mov	r3,r9
80016088:	ec f8 02 ec 	ld.w	r8,r6[748]
8001608c:	90 08       	ld.sh	r8,r8[0x0]
8001608e:	10 99       	mov	r9,r8
80016090:	ee f8 ff dc 	ld.w	r8,r7[-36]
80016094:	f2 08 00 08 	add	r8,r9,r8
80016098:	10 9c       	mov	r12,r8
8001609a:	f0 16 00 1a 	mcall	r6[104]
8001609e:	14 98       	mov	r8,r10
800160a0:	16 99       	mov	r9,r11
800160a2:	04 9a       	mov	r10,r2
800160a4:	06 9b       	mov	r11,r3
800160a6:	f0 16 00 0c 	mcall	r6[48]
800160aa:	14 98       	mov	r8,r10
800160ac:	16 99       	mov	r9,r11
800160ae:	10 9a       	mov	r10,r8
800160b0:	12 9b       	mov	r11,r9
800160b2:	f0 16 00 14 	mcall	r6[80]
800160b6:	18 98       	mov	r8,r12
800160b8:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
800160bc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800160c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800160c4:	f2 08 00 08 	add	r8,r9,r8
800160c8:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
800160cc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800160d0:	2f 88       	sub	r8,-8
800160d2:	10 9c       	mov	r12,r8
800160d4:	f0 16 00 1a 	mcall	r6[104]
800160d8:	30 08       	mov	r8,0
800160da:	fc 19 40 30 	movh	r9,0x4030
800160de:	f0 16 00 0c 	mcall	r6[48]
800160e2:	14 98       	mov	r8,r10
800160e4:	16 99       	mov	r9,r11
800160e6:	10 9a       	mov	r10,r8
800160e8:	12 9b       	mov	r11,r9
800160ea:	f0 16 00 09 	mcall	r6[36]
800160ee:	18 99       	mov	r9,r12
800160f0:	ec f8 00 44 	ld.w	r8,r6[68]
800160f4:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
800160f6:	ec f8 00 44 	ld.w	r8,r6[68]
800160fa:	70 38       	ld.w	r8,r8[0xc]
800160fc:	fc 1b 41 20 	movh	r11,0x4120
80016100:	10 9c       	mov	r12,r8
80016102:	f0 16 00 08 	mcall	r6[32]
80016106:	18 98       	mov	r8,r12
80016108:	10 99       	mov	r9,r8
8001610a:	ec f8 00 44 	ld.w	r8,r6[68]
8001610e:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80016110:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016114:	f0 c8 0f a0 	sub	r8,r8,4000
80016118:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
8001611c:	ec f8 03 30 	ld.w	r8,r6[816]
80016120:	90 08       	ld.sh	r8,r8[0x0]
80016122:	10 99       	mov	r9,r8
80016124:	ee fa ff d8 	ld.w	r10,r7[-40]
80016128:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001612c:	f4 08 02 48 	mul	r8,r10,r8
80016130:	ad 48       	asr	r8,0xc
80016132:	f2 08 02 48 	mul	r8,r9,r8
80016136:	ab 58       	asr	r8,0xb
80016138:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
8001613c:	ec f8 02 fc 	ld.w	r8,r6[764]
80016140:	90 08       	ld.sh	r8,r8[0x0]
80016142:	10 99       	mov	r9,r8
80016144:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016148:	f2 08 02 48 	mul	r8,r9,r8
8001614c:	ab 58       	asr	r8,0xb
8001614e:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
80016152:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001615a:	f2 08 00 08 	add	r8,r9,r8
8001615e:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
80016162:	ec f8 03 20 	ld.w	r8,r6[800]
80016166:	90 08       	ld.sh	r8,r8[0x0]
80016168:	f0 09 15 02 	lsl	r9,r8,0x2
8001616c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80016170:	f2 08 00 08 	add	r8,r9,r8
80016174:	a3 68       	lsl	r8,0x2
80016176:	2f e8       	sub	r8,-2
80016178:	f0 c9 ff fd 	sub	r9,r8,-3
8001617c:	58 08       	cp.w	r8,0
8001617e:	f2 08 17 50 	movlt	r8,r9
80016182:	a3 48       	asr	r8,0x2
80016184:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80016188:	ec f8 02 84 	ld.w	r8,r6[644]
8001618c:	90 08       	ld.sh	r8,r8[0x0]
8001618e:	10 99       	mov	r9,r8
80016190:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016194:	f2 08 02 48 	mul	r8,r9,r8
80016198:	ad 58       	asr	r8,0xd
8001619a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
8001619e:	ec f8 03 14 	ld.w	r8,r6[788]
800161a2:	90 08       	ld.sh	r8,r8[0x0]
800161a4:	10 99       	mov	r9,r8
800161a6:	ee fa ff d8 	ld.w	r10,r7[-40]
800161aa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800161ae:	f4 08 02 48 	mul	r8,r10,r8
800161b2:	ad 48       	asr	r8,0xc
800161b4:	f2 08 02 48 	mul	r8,r9,r8
800161b8:	b1 48       	asr	r8,0x10
800161ba:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
800161be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800161c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800161c6:	f2 08 00 08 	add	r8,r9,r8
800161ca:	2f e8       	sub	r8,-2
800161cc:	a3 48       	asr	r8,0x2
800161ce:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
800161d2:	ec f8 02 e0 	ld.w	r8,r6[736]
800161d6:	90 08       	ld.sh	r8,r8[0x0]
800161d8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800161dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800161e0:	f0 c8 80 00 	sub	r8,r8,-32768
800161e4:	f2 08 02 48 	mul	r8,r9,r8
800161e8:	af 98       	lsr	r8,0xf
800161ea:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
800161ee:	ee f9 ff cc 	ld.w	r9,r7[-52]
800161f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800161f6:	10 19       	sub	r9,r8
800161f8:	e0 68 30 d4 	mov	r8,12500
800161fc:	f2 08 02 48 	mul	r8,r9,r8
80016200:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80016204:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016208:	58 08       	cp.w	r8,0
8001620a:	c0 b5       	brlt	80016220 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
8001620c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016210:	a1 78       	lsl	r8,0x1
80016212:	ee f9 ff ec 	ld.w	r9,r7[-20]
80016216:	f0 09 0d 08 	divu	r8,r8,r9
8001621a:	ef 48 ff e8 	st.w	r7[-24],r8
8001621e:	c0 a8       	rjmp	80016232 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
80016220:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016224:	ee f9 ff ec 	ld.w	r9,r7[-20]
80016228:	f0 09 0d 08 	divu	r8,r8,r9
8001622c:	a1 78       	lsl	r8,0x1
8001622e:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
80016232:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016236:	f0 09 14 08 	asr	r9,r8,0x8
8001623a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001623e:	a9 48       	asr	r8,0x8
80016240:	f2 08 02 48 	mul	r8,r9,r8
80016244:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
80016248:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001624c:	e0 68 0b de 	mov	r8,3038
80016250:	f2 08 02 48 	mul	r8,r9,r8
80016254:	b1 48       	asr	r8,0x10
80016256:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
8001625a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001625e:	fe 78 e3 43 	mov	r8,-7357
80016262:	f2 08 02 48 	mul	r8,r9,r8
80016266:	b1 48       	asr	r8,0x10
80016268:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
8001626c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016270:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016274:	f2 08 00 08 	add	r8,r9,r8
80016278:	f0 c8 f1 31 	sub	r8,r8,-3791
8001627c:	a5 48       	asr	r8,0x4
8001627e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016282:	f2 08 00 08 	add	r8,r9,r8
80016286:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
8001628a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001628e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80016292:	ec f8 00 44 	ld.w	r8,r6[68]
80016296:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80016298:	ec f8 00 44 	ld.w	r8,r6[68]
8001629c:	70 78       	ld.w	r8,r8[0x1c]
8001629e:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
800162a2:	ec f8 00 44 	ld.w	r8,r6[68]
800162a6:	70 28       	ld.w	r8,r8[0x8]
800162a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800162ac:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
800162b0:	12 9b       	mov	r11,r9
800162b2:	10 9c       	mov	r12,r8
800162b4:	f0 16 00 08 	mcall	r6[32]
800162b8:	18 98       	mov	r8,r12
800162ba:	10 9c       	mov	r12,r8
800162bc:	f0 16 00 03 	mcall	r6[12]
800162c0:	e0 68 d1 24 	mov	r8,53540
800162c4:	ea 18 28 cb 	orh	r8,0x28cb
800162c8:	e0 69 5b 96 	mov	r9,23446
800162cc:	ea 19 3f c8 	orh	r9,0x3fc8
800162d0:	f0 16 01 ac 	mcall	r6[1712]
800162d4:	14 98       	mov	r8,r10
800162d6:	16 99       	mov	r9,r11
800162d8:	30 0a       	mov	r10,0
800162da:	fc 1b 3f f0 	movh	r11,0x3ff0
800162de:	f0 16 00 12 	mcall	r6[72]
800162e2:	14 98       	mov	r8,r10
800162e4:	16 99       	mov	r9,r11
800162e6:	10 9a       	mov	r10,r8
800162e8:	12 9b       	mov	r11,r9
800162ea:	30 08       	mov	r8,0
800162ec:	e0 69 a5 40 	mov	r9,42304
800162f0:	ea 19 40 e5 	orh	r9,0x40e5
800162f4:	f0 16 00 02 	mcall	r6[8]
800162f8:	14 98       	mov	r8,r10
800162fa:	16 99       	mov	r9,r11
800162fc:	10 92       	mov	r2,r8
800162fe:	12 93       	mov	r3,r9
80016300:	ec f8 00 44 	ld.w	r8,r6[68]
80016304:	70 88       	ld.w	r8,r8[0x20]
80016306:	10 9c       	mov	r12,r8
80016308:	f0 16 00 03 	mcall	r6[12]
8001630c:	14 98       	mov	r8,r10
8001630e:	16 99       	mov	r9,r11
80016310:	04 9a       	mov	r10,r2
80016312:	06 9b       	mov	r11,r3
80016314:	f0 16 00 05 	mcall	r6[20]
80016318:	14 98       	mov	r8,r10
8001631a:	16 99       	mov	r9,r11
8001631c:	10 9a       	mov	r10,r8
8001631e:	12 9b       	mov	r11,r9
80016320:	f0 16 00 09 	mcall	r6[36]
80016324:	18 98       	mov	r8,r12
80016326:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
8001632a:	30 08       	mov	r8,0
8001632c:	ef 48 ff bc 	st.w	r7[-68],r8
80016330:	c1 68       	rjmp	8001635c <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
80016332:	ee f9 ff bc 	ld.w	r9,r7[-68]
80016336:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001633a:	f0 ca ff ff 	sub	r10,r8,-1
8001633e:	ec f8 00 44 	ld.w	r8,r6[68]
80016342:	2f ca       	sub	r10,-4
80016344:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80016348:	ec f8 00 44 	ld.w	r8,r6[68]
8001634c:	2f c9       	sub	r9,-4
8001634e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
80016352:	ee f8 ff bc 	ld.w	r8,r7[-68]
80016356:	2f f8       	sub	r8,-1
80016358:	ef 48 ff bc 	st.w	r7[-68],r8
8001635c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80016360:	58 18       	cp.w	r8,1
80016362:	fe 9a ff e8 	brle	80016332 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
80016366:	ec f8 00 44 	ld.w	r8,r6[68]
8001636a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001636e:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
80016370:	ec f8 00 44 	ld.w	r8,r6[68]
80016374:	70 6a       	ld.w	r10,r8[0x18]
80016376:	ec f8 00 44 	ld.w	r8,r6[68]
8001637a:	70 59       	ld.w	r9,r8[0x14]
8001637c:	ec f8 00 44 	ld.w	r8,r6[68]
80016380:	70 48       	ld.w	r8,r8[0x10]
80016382:	12 9b       	mov	r11,r9
80016384:	10 9c       	mov	r12,r8
80016386:	fe b0 fb d8 	rcall	80015b36 <median_filter_3x>
8001638a:	18 98       	mov	r8,r12
8001638c:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80016390:	ec f8 00 44 	ld.w	r8,r6[68]
80016394:	70 78       	ld.w	r8,r8[0x1c]
80016396:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001639a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001639e:	10 9c       	mov	r12,r8
800163a0:	fe b0 fb ae 	rcall	80015afc <f_abs>
800163a4:	18 9a       	mov	r10,r12
800163a6:	30 18       	mov	r8,1
800163a8:	fc 19 41 70 	movh	r9,0x4170
800163ac:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800163b0:	e0 8c 00 03 	brvs	800163b6 <get_pressure_data_slow+0x49a>
800163b4:	c0 25       	brlt	800163b8 <get_pressure_data_slow+0x49c>
800163b6:	30 08       	mov	r8,0
800163b8:	5c 58       	castu.b	r8
800163ba:	c3 40       	breq	80016422 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
800163bc:	ec f8 00 44 	ld.w	r8,r6[68]
800163c0:	70 78       	ld.w	r8,r8[0x1c]
800163c2:	10 9c       	mov	r12,r8
800163c4:	f0 16 00 03 	mcall	r6[12]
800163c8:	e0 68 66 66 	mov	r8,26214
800163cc:	ea 18 66 66 	orh	r8,0x6666
800163d0:	e0 69 66 66 	mov	r9,26214
800163d4:	ea 19 3f ee 	orh	r9,0x3fee
800163d8:	f0 16 00 02 	mcall	r6[8]
800163dc:	14 98       	mov	r8,r10
800163de:	16 99       	mov	r9,r11
800163e0:	10 92       	mov	r2,r8
800163e2:	12 93       	mov	r3,r9
800163e4:	ee fc ff c0 	ld.w	r12,r7[-64]
800163e8:	f0 16 00 03 	mcall	r6[12]
800163ec:	e0 68 99 a0 	mov	r8,39328
800163f0:	ea 18 99 99 	orh	r8,0x9999
800163f4:	e0 69 99 99 	mov	r9,39321
800163f8:	ea 19 3f a9 	orh	r9,0x3fa9
800163fc:	f0 16 00 02 	mcall	r6[8]
80016400:	14 98       	mov	r8,r10
80016402:	16 99       	mov	r9,r11
80016404:	04 9a       	mov	r10,r2
80016406:	06 9b       	mov	r11,r3
80016408:	f0 16 00 05 	mcall	r6[20]
8001640c:	14 98       	mov	r8,r10
8001640e:	16 99       	mov	r9,r11
80016410:	10 9a       	mov	r10,r8
80016412:	12 9b       	mov	r11,r9
80016414:	f0 16 00 09 	mcall	r6[36]
80016418:	18 99       	mov	r9,r12
8001641a:	ec f8 00 44 	ld.w	r8,r6[68]
8001641e:	91 79       	st.w	r8[0x1c],r9
80016420:	c0 68       	rjmp	8001642c <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
80016422:	ec f8 00 44 	ld.w	r8,r6[68]
80016426:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001642a:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
8001642c:	f0 16 00 27 	mcall	r6[156]
80016430:	18 99       	mov	r9,r12
80016432:	ec f8 00 44 	ld.w	r8,r6[68]
80016436:	70 a8       	ld.w	r8,r8[0x28]
80016438:	f2 08 01 08 	sub	r8,r9,r8
8001643c:	10 9c       	mov	r12,r8
8001643e:	f0 16 00 4e 	mcall	r6[312]
80016442:	30 08       	mov	r8,0
80016444:	e0 69 84 80 	mov	r9,33920
80016448:	ea 19 41 2e 	orh	r9,0x412e
8001644c:	f0 16 00 0c 	mcall	r6[48]
80016450:	14 98       	mov	r8,r10
80016452:	16 99       	mov	r9,r11
80016454:	10 9a       	mov	r10,r8
80016456:	12 9b       	mov	r11,r9
80016458:	f0 16 00 09 	mcall	r6[36]
8001645c:	18 98       	mov	r8,r12
8001645e:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
80016462:	ec f8 00 44 	ld.w	r8,r6[68]
80016466:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001646a:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
8001646c:	ec f8 00 44 	ld.w	r8,r6[68]
80016470:	70 79       	ld.w	r9,r8[0x1c]
80016472:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016476:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001647a:	ee 18 80 00 	eorh	r8,0x8000
8001647e:	ee fb ff f8 	ld.w	r11,r7[-8]
80016482:	10 9c       	mov	r12,r8
80016484:	f0 16 00 08 	mcall	r6[32]
80016488:	18 98       	mov	r8,r12
8001648a:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
8001648e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016492:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80016496:	ef 48 ff fc 	st.w	r7[-4],r8
8001649a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001649e:	5c 48       	abs	r8
800164a0:	ef 48 ff fc 	st.w	r7[-4],r8
800164a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800164a8:	59 48       	cp.w	r8,20
800164aa:	e0 8a 00 05 	brle	800164b4 <get_pressure_data_slow+0x598>
800164ae:	30 08       	mov	r8,0
800164b0:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
800164b4:	ec f8 00 44 	ld.w	r8,r6[68]
800164b8:	70 98       	ld.w	r8,r8[0x24]
800164ba:	10 9c       	mov	r12,r8
800164bc:	f0 16 00 03 	mcall	r6[12]
800164c0:	e0 68 66 66 	mov	r8,26214
800164c4:	ea 18 66 66 	orh	r8,0x6666
800164c8:	e0 69 66 66 	mov	r9,26214
800164cc:	ea 19 3f ee 	orh	r9,0x3fee
800164d0:	f0 16 00 02 	mcall	r6[8]
800164d4:	14 98       	mov	r8,r10
800164d6:	16 99       	mov	r9,r11
800164d8:	10 92       	mov	r2,r8
800164da:	12 93       	mov	r3,r9
800164dc:	ee fc ff c4 	ld.w	r12,r7[-60]
800164e0:	f0 16 00 03 	mcall	r6[12]
800164e4:	e0 68 99 a0 	mov	r8,39328
800164e8:	ea 18 99 99 	orh	r8,0x9999
800164ec:	e0 69 99 99 	mov	r9,39321
800164f0:	ea 19 3f a9 	orh	r9,0x3fa9
800164f4:	f0 16 00 02 	mcall	r6[8]
800164f8:	14 98       	mov	r8,r10
800164fa:	16 99       	mov	r9,r11
800164fc:	04 9a       	mov	r10,r2
800164fe:	06 9b       	mov	r11,r3
80016500:	f0 16 00 05 	mcall	r6[20]
80016504:	14 98       	mov	r8,r10
80016506:	16 99       	mov	r9,r11
80016508:	10 9a       	mov	r10,r8
8001650a:	12 9b       	mov	r11,r9
8001650c:	f0 16 00 09 	mcall	r6[36]
80016510:	18 99       	mov	r9,r12
80016512:	ec f8 00 44 	ld.w	r8,r6[68]
80016516:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
80016518:	f0 16 00 27 	mcall	r6[156]
8001651c:	18 99       	mov	r9,r12
8001651e:	ec f8 00 44 	ld.w	r8,r6[68]
80016522:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
80016524:	ec f8 00 44 	ld.w	r8,r6[68]
80016528:	30 09       	mov	r9,0
8001652a:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
8001652c:	f0 16 00 27 	mcall	r6[156]
80016530:	18 99       	mov	r9,r12
80016532:	ec f8 00 44 	ld.w	r8,r6[68]
80016536:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
80016538:	ec f8 00 44 	ld.w	r8,r6[68]
8001653c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80016540:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
80016542:	ec f8 00 44 	ld.w	r8,r6[68]
}
80016546:	10 9c       	mov	r12,r8
80016548:	2e cd       	sub	sp,-80
8001654a:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
8001654e:	00 00       	add	r0,r0
80016550:	80 01       	ld.sh	r1,r0[0x0]
80016552:	5d ac       	*unknown*

80016554 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
80016554:	eb cd 40 c0 	pushm	r6-r7,lr
80016558:	1a 97       	mov	r7,sp
8001655a:	20 1d       	sub	sp,4
8001655c:	48 d6       	lddpc	r6,80016590 <newValidBarometer+0x3c>
8001655e:	1e 26       	rsub	r6,pc
80016560:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
80016564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016568:	70 09       	ld.w	r9,r8[0x0]
8001656a:	ec f8 00 44 	ld.w	r8,r6[68]
8001656e:	70 a8       	ld.w	r8,r8[0x28]
80016570:	10 39       	cp.w	r9,r8
80016572:	c0 92       	brcc	80016584 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
80016574:	ec f8 00 44 	ld.w	r8,r6[68]
80016578:	70 a9       	ld.w	r9,r8[0x28]
8001657a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001657e:	91 09       	st.w	r8[0x0],r9
		return true;
80016580:	30 18       	mov	r8,1
80016582:	c0 28       	rjmp	80016586 <newValidBarometer+0x32>
	}else{
		return false;
80016584:	30 08       	mov	r8,0
	}
	
80016586:	10 9c       	mov	r12,r8
80016588:	2f fd       	sub	sp,-4
8001658a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001658e:	00 00       	add	r0,r0
80016590:	80 01       	ld.sh	r1,r0[0x0]
80016592:	63 e2       	ld.w	r2,r1[0x78]

80016594 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
80016594:	eb cd 40 c0 	pushm	r6-r7,lr
80016598:	1a 97       	mov	r7,sp
8001659a:	48 a6       	lddpc	r6,800165c0 <init_hmc5883_slow+0x2c>
8001659c:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001659e:	ec fb 08 bc 	ld.w	r11,r6[2236]
800165a2:	fe 7c 38 00 	mov	r12,-51200
800165a6:	f0 16 00 6b 	mcall	r6[428]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
800165aa:	30 08       	mov	r8,0
800165ac:	31 e9       	mov	r9,30
800165ae:	30 4a       	mov	r10,4
800165b0:	ec fb 08 b8 	ld.w	r11,r6[2232]
800165b4:	fe 7c 38 00 	mov	r12,-51200
800165b8:	f0 16 00 39 	mcall	r6[228]
}
800165bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800165c0:	80 01       	ld.sh	r1,r0[0x0]
800165c2:	64 20       	ld.w	r0,r2[0x8]

800165c4 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
800165c4:	eb cd 40 c0 	pushm	r6-r7,lr
800165c8:	1a 97       	mov	r7,sp
800165ca:	20 2d       	sub	sp,8
800165cc:	49 e6       	lddpc	r6,80016644 <get_compass_data_slow+0x80>
800165ce:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
800165d0:	30 38       	mov	r8,3
800165d2:	ef 68 ff ff 	st.b	r7[-1],r8
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
800165d6:	30 08       	mov	r8,0
800165d8:	ef 48 ff f8 	st.w	r7[-8],r8
800165dc:	c2 98       	rjmp	8001662e <get_compass_data_slow+0x6a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
800165de:	ee fb ff f8 	ld.w	r11,r7[-8]
800165e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800165e6:	a1 78       	lsl	r8,0x1
800165e8:	ec f9 02 6c 	ld.w	r9,r6[620]
800165ec:	f2 08 07 08 	ld.ub	r8,r9[r8]
800165f0:	5c 58       	castu.b	r8
800165f2:	a9 68       	lsl	r8,0x8
800165f4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800165f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800165fc:	a1 78       	lsl	r8,0x1
800165fe:	2f f8       	sub	r8,-1
80016600:	ec fa 02 6c 	ld.w	r10,r6[620]
80016604:	f4 08 07 08 	ld.ub	r8,r10[r8]
80016608:	5c 58       	castu.b	r8
8001660a:	f2 08 00 08 	add	r8,r9,r8
8001660e:	5c 88       	casts.h	r8
80016610:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016614:	ec fa 02 6c 	ld.w	r10,r6[620]
80016618:	f6 c8 ff fe 	sub	r8,r11,-2
8001661c:	a1 78       	lsl	r8,0x1
8001661e:	f4 08 00 08 	add	r8,r10,r8
80016622:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	//twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	//twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80016624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016628:	2f f8       	sub	r8,-1
8001662a:	ef 48 ff f8 	st.w	r7[-8],r8
8001662e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016632:	58 28       	cp.w	r8,2
80016634:	fe 9a ff d5 	brle	800165de <get_compass_data_slow+0x1a>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
80016638:	ec f8 02 6c 	ld.w	r8,r6[620]
8001663c:	10 9c       	mov	r12,r8
8001663e:	2f ed       	sub	sp,-8
80016640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016644:	80 01       	ld.sh	r1,r0[0x0]
80016646:	64 52       	ld.w	r2,r2[0x14]

80016648 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016648:	eb cd 40 c0 	pushm	r6-r7,lr
8001664c:	1a 97       	mov	r7,sp
8001664e:	20 6d       	sub	sp,24
80016650:	49 e6       	lddpc	r6,800166c8 <interpolate+0x80>
80016652:	1e 26       	rsub	r6,pc
80016654:	ef 4c ff f8 	st.w	r7[-8],r12
80016658:	ef 4b ff f4 	st.w	r7[-12],r11
8001665c:	ef 4a ff f0 	st.w	r7[-16],r10
80016660:	ef 49 ff ec 	st.w	r7[-20],r9
80016664:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016668:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001666c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016670:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016674:	c0 41       	brne	8001667c <interpolate+0x34>
	{
		return y1;
80016676:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001667a:	c2 38       	rjmp	800166c0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001667c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016680:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016684:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016688:	ee fa ff f8 	ld.w	r10,r7[-8]
8001668c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016690:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016694:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016698:	ee fa ff f0 	ld.w	r10,r7[-16]
8001669c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800166a0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800166a4:	12 9b       	mov	r11,r9
800166a6:	10 9c       	mov	r12,r8
800166a8:	f0 16 00 08 	mcall	r6[32]
800166ac:	18 98       	mov	r8,r12
800166ae:	10 99       	mov	r9,r8
800166b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800166b4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800166b8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800166bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800166c0:	10 9c       	mov	r12,r8
800166c2:	2f ad       	sub	sp,-24
800166c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800166c8:	80 01       	ld.sh	r1,r0[0x0]
800166ca:	64 d6       	ld.w	r6,r2[0x34]

800166cc <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
800166cc:	eb cd 40 c0 	pushm	r6-r7,lr
800166d0:	1a 97       	mov	r7,sp
800166d2:	49 a6       	lddpc	r6,80016738 <pdca_int_handler_dac+0x6c>
800166d4:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
800166d6:	fc 78 00 00 	mov	r8,-196608
800166da:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
800166de:	ec f8 04 b8 	ld.w	r8,r6[1208]
800166e2:	70 08       	ld.w	r8,r8[0x0]
800166e4:	58 08       	cp.w	r8,0
800166e6:	c0 81       	brne	800166f6 <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
800166e8:	30 4c       	mov	r12,4
800166ea:	f0 16 00 78 	mcall	r6[480]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
800166ee:	30 4c       	mov	r12,4
800166f0:	f0 16 00 92 	mcall	r6[584]
800166f4:	c1 f8       	rjmp	80016732 <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
800166f6:	ec f8 02 68 	ld.w	r8,r6[616]
800166fa:	90 08       	ld.sh	r8,r8[0x0]
800166fc:	5c 88       	casts.h	r8
800166fe:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016702:	ec f8 01 74 	ld.w	r8,r6[372]
80016706:	90 08       	ld.sh	r8,r8[0x0]
80016708:	5c 88       	casts.h	r8
8001670a:	5c 78       	castu.h	r8
8001670c:	f2 08 01 08 	sub	r8,r9,r8
80016710:	10 99       	mov	r9,r8
80016712:	ec f8 03 44 	ld.w	r8,r6[836]
80016716:	70 0a       	ld.w	r10,r8[0x0]
80016718:	ec f8 01 74 	ld.w	r8,r6[372]
8001671c:	90 08       	ld.sh	r8,r8[0x0]
8001671e:	5c 88       	casts.h	r8
80016720:	5c 78       	castu.h	r8
80016722:	a1 78       	lsl	r8,0x1
80016724:	f4 08 00 08 	add	r8,r10,r8
80016728:	12 9a       	mov	r10,r9
8001672a:	10 9b       	mov	r11,r8
8001672c:	30 4c       	mov	r12,4
8001672e:	f0 16 00 fc 	mcall	r6[1008]
	}	   
		
}
80016732:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016736:	d6 03       	rete
80016738:	80 01       	ld.sh	r1,r0[0x0]
8001673a:	65 58       	ld.w	r8,r2[0x54]

8001673c <init_pevc>:


void init_pevc(void)
{
8001673c:	eb cd 40 c0 	pushm	r6-r7,lr
80016740:	1a 97       	mov	r7,sp
80016742:	48 c6       	lddpc	r6,80016770 <init_pevc+0x34>
80016744:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
80016746:	ec f8 03 80 	ld.w	r8,r6[896]
8001674a:	70 08       	ld.w	r8,r8[0x0]
8001674c:	ec f9 08 b4 	ld.w	r9,r6[2228]
80016750:	31 0a       	mov	r10,16
80016752:	30 2b       	mov	r11,2
80016754:	10 9c       	mov	r12,r8
80016756:	f0 16 01 a1 	mcall	r6[1668]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
8001675a:	ec f8 03 80 	ld.w	r8,r6[896]
8001675e:	70 08       	ld.w	r8,r8[0x0]
80016760:	30 4a       	mov	r10,4
80016762:	30 0b       	mov	r11,0
80016764:	10 9c       	mov	r12,r8
80016766:	f0 16 01 3b 	mcall	r6[1260]
}
8001676a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001676e:	00 00       	add	r0,r0
80016770:	80 01       	ld.sh	r1,r0[0x0]
80016772:	65 c8       	ld.w	r8,r2[0x70]

80016774 <init_gclk>:

void init_gclk(void)
{
80016774:	eb cd 40 c0 	pushm	r6-r7,lr
80016778:	1a 97       	mov	r7,sp
8001677a:	48 76       	lddpc	r6,80016794 <init_gclk+0x20>
8001677c:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
8001677e:	30 a9       	mov	r9,10
80016780:	30 1a       	mov	r10,1
80016782:	30 0b       	mov	r11,0
80016784:	30 7c       	mov	r12,7
80016786:	f0 16 01 fc 	mcall	r6[2032]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
8001678a:	30 7c       	mov	r12,7
8001678c:	f0 16 01 f2 	mcall	r6[1992]
}
80016790:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016794:	80 01       	ld.sh	r1,r0[0x0]
80016796:	66 00       	ld.w	r0,r3[0x0]
80016798:	65 72       	ld.w	r2,r2[0x5c]
8001679a:	72 6f       	ld.w	pc,r9[0x18]
8001679c:	72 20       	ld.w	r0,r9[0x8]
8001679e:	63 6f       	ld.w	pc,r1[0x58]
800167a0:	6e 66       	ld.w	r6,r7[0x18]
800167a2:	69 67       	ld.w	r7,r4[0x58]
800167a4:	75 72       	ld.w	r2,r10[0x5c]
800167a6:	69 6e       	ld.w	lr,r4[0x58]
800167a8:	67 20       	ld.w	r0,r3[0x48]
800167aa:	44 41       	lddsp	r1,sp[0x110]
800167ac:	43 00       	lddsp	r0,sp[0xc0]
800167ae:	00 00       	add	r0,r0
800167b0:	65 72       	ld.w	r2,r2[0x5c]
800167b2:	72 6f       	ld.w	pc,r9[0x18]
800167b4:	72 20       	ld.w	r0,r9[0x8]
800167b6:	63 6f       	ld.w	pc,r1[0x58]
800167b8:	6e 66       	ld.w	r6,r7[0x18]
800167ba:	69 67       	ld.w	r7,r4[0x58]
800167bc:	75 72       	ld.w	r2,r10[0x5c]
800167be:	69 6e       	ld.w	lr,r4[0x58]
800167c0:	67 20       	ld.w	r0,r3[0x48]
800167c2:	44 41       	lddsp	r1,sp[0x110]
800167c4:	43 20       	lddsp	r0,sp[0xc8]
800167c6:	63 68       	ld.w	r8,r1[0x58]
800167c8:	61 6e       	ld.w	lr,r0[0x58]
800167ca:	6e 65       	ld.w	r5,r7[0x18]
800167cc:	6c 00       	ld.w	r0,r6[0x0]

800167ce <Init_DAC>:



void Init_DAC(int trigger_mode) {
800167ce:	eb cd 40 c0 	pushm	r6-r7,lr
800167d2:	1a 97       	mov	r7,sp
800167d4:	20 6d       	sub	sp,24
800167d6:	4b 36       	lddpc	r6,800168a0 <Init_DAC+0xd2>
800167d8:	1e 26       	rsub	r6,pc
800167da:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
800167de:	ec f8 08 b0 	ld.w	r8,r6[2224]
800167e2:	ee ca 00 0c 	sub	r10,r7,12
800167e6:	10 9b       	mov	r11,r8
800167e8:	f6 e8 00 00 	ld.d	r8,r11[0]
800167ec:	f4 e9 00 00 	st.d	r10[0],r8
800167f0:	76 28       	ld.w	r8,r11[0x8]
800167f2:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
800167f4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800167f8:	5c 58       	castu.b	r8
800167fa:	30 19       	mov	r9,1
800167fc:	ef 69 ff ef 	st.b	r7[-17],r9
80016800:	ef 68 ff f0 	st.b	r7[-16],r8
80016804:	30 08       	mov	r8,0
80016806:	ef 68 ff f1 	st.b	r7[-15],r8
8001680a:	30 08       	mov	r8,0
8001680c:	ef 68 ff f2 	st.b	r7[-14],r8
80016810:	30 08       	mov	r8,0
80016812:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80016816:	30 4b       	mov	r11,4
80016818:	ec fc 08 ac 	ld.w	r12,r6[2220]
8001681c:	f0 16 00 8d 	mcall	r6[564]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80016820:	ec f8 02 4c 	ld.w	r8,r6[588]
80016824:	70 08       	ld.w	r8,r8[0x0]
80016826:	ee c9 00 0c 	sub	r9,r7,12
8001682a:	e0 6a 24 00 	mov	r10,9216
8001682e:	ea 1a 00 f4 	orh	r10,0xf4
80016832:	12 9b       	mov	r11,r9
80016834:	10 9c       	mov	r12,r8
80016836:	f0 16 01 6e 	mcall	r6[1464]
8001683a:	18 98       	mov	r8,r12
8001683c:	58 08       	cp.w	r8,0
8001683e:	c0 61       	brne	8001684a <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80016840:	fe cc 00 a8 	sub	r12,pc,168
80016844:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016848:	c0 08       	rjmp	80016848 <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
8001684a:	ec f8 03 8c 	ld.w	r8,r6[908]
8001684e:	11 88       	ld.ub	r8,r8[0x0]
80016850:	10 9b       	mov	r11,r8
80016852:	ec f8 02 4c 	ld.w	r8,r6[588]
80016856:	70 08       	ld.w	r8,r8[0x0]
80016858:	ee ca 00 11 	sub	r10,r7,17
8001685c:	e0 69 4b 40 	mov	r9,19264
80016860:	ea 19 00 4c 	orh	r9,0x4c
80016864:	10 9c       	mov	r12,r8
80016866:	f0 16 01 af 	mcall	r6[1724]
8001686a:	18 98       	mov	r8,r12
8001686c:	58 08       	cp.w	r8,0
8001686e:	c0 61       	brne	8001687a <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
80016870:	fe cc 00 c0 	sub	r12,pc,192
80016874:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016878:	c0 08       	rjmp	80016878 <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
8001687a:	ec f8 03 8c 	ld.w	r8,r6[908]
8001687e:	11 88       	ld.ub	r8,r8[0x0]
80016880:	10 99       	mov	r9,r8
80016882:	ec f8 02 4c 	ld.w	r8,r6[588]
80016886:	70 08       	ld.w	r8,r8[0x0]
80016888:	e0 6a 24 00 	mov	r10,9216
8001688c:	ea 1a 00 f4 	orh	r10,0xf4
80016890:	12 9b       	mov	r11,r9
80016892:	10 9c       	mov	r12,r8
80016894:	f0 16 01 47 	mcall	r6[1308]
                       dac_channel_audio,
                       FOSC0);


}
80016898:	2f ad       	sub	sp,-24
8001689a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001689e:	00 00       	add	r0,r0
800168a0:	80 01       	ld.sh	r1,r0[0x0]
800168a2:	66 5c       	ld.w	r12,r3[0x14]

800168a4 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
800168a4:	eb cd 40 c0 	pushm	r6-r7,lr
800168a8:	1a 97       	mov	r7,sp
800168aa:	20 4d       	sub	sp,16
800168ac:	4a a6       	lddpc	r6,80016954 <DAC_load_buffer+0xb0>
800168ae:	1e 26       	rsub	r6,pc
800168b0:	ef 4c ff fc 	st.w	r7[-4],r12
800168b4:	ef 4b ff f8 	st.w	r7[-8],r11
800168b8:	ef 4a ff f4 	st.w	r7[-12],r10
800168bc:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
800168c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800168c4:	ec f8 03 44 	ld.w	r8,r6[836]
800168c8:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
800168ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800168ce:	5c 88       	casts.h	r8
800168d0:	ec f9 01 74 	ld.w	r9,r6[372]
800168d4:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
800168d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800168da:	5c 88       	casts.h	r8
800168dc:	ec f9 02 68 	ld.w	r9,r6[616]
800168e0:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
800168e2:	ec f8 01 74 	ld.w	r8,r6[372]
800168e6:	90 08       	ld.sh	r8,r8[0x0]
800168e8:	5c 88       	casts.h	r8
800168ea:	5c 78       	castu.h	r8
800168ec:	a1 78       	lsl	r8,0x1
800168ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800168f2:	10 09       	add	r9,r8
800168f4:	ec f8 03 40 	ld.w	r8,r6[832]
800168f8:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
800168fa:	ec f8 02 68 	ld.w	r8,r6[616]
800168fe:	90 08       	ld.sh	r8,r8[0x0]
80016900:	5c 88       	casts.h	r8
80016902:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016906:	ec f8 01 74 	ld.w	r8,r6[372]
8001690a:	90 08       	ld.sh	r8,r8[0x0]
8001690c:	5c 88       	casts.h	r8
8001690e:	5c 78       	castu.h	r8
80016910:	f2 08 01 08 	sub	r8,r9,r8
80016914:	10 99       	mov	r9,r8
80016916:	ec f8 03 40 	ld.w	r8,r6[832]
8001691a:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
8001691c:	f0 16 01 d3 	mcall	r6[1868]
  // Initialize Generic Clock
  init_gclk();
80016920:	f0 16 01 c6 	mcall	r6[1816]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80016924:	ec fb 03 40 	ld.w	r11,r6[832]
80016928:	30 4c       	mov	r12,4
8001692a:	f0 16 00 70 	mcall	r6[448]

  autoplay=repeat;
8001692e:	ec f8 04 b8 	ld.w	r8,r6[1208]
80016932:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016936:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
80016938:	30 0a       	mov	r10,0
8001693a:	e0 6b 00 80 	mov	r11,128
8001693e:	fe cc 02 72 	sub	r12,pc,626
80016942:	f0 16 00 38 	mcall	r6[224]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016946:	30 4c       	mov	r12,4
80016948:	f0 16 00 b1 	mcall	r6[708]
  //}  
} 
8001694c:	2f cd       	sub	sp,-16
8001694e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016952:	00 00       	add	r0,r0
80016954:	80 01       	ld.sh	r1,r0[0x0]
80016956:	67 32       	ld.w	r2,r3[0x4c]

80016958 <DAC_play>:

void DAC_play() {
80016958:	eb cd 40 c0 	pushm	r6-r7,lr
8001695c:	1a 97       	mov	r7,sp
8001695e:	49 56       	lddpc	r6,800169b0 <DAC_play+0x58>
80016960:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
80016962:	30 4c       	mov	r12,4
80016964:	f0 16 00 78 	mcall	r6[480]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
80016968:	ec f8 02 68 	ld.w	r8,r6[616]
8001696c:	90 08       	ld.sh	r8,r8[0x0]
8001696e:	5c 88       	casts.h	r8
80016970:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016974:	ec f8 01 74 	ld.w	r8,r6[372]
80016978:	90 08       	ld.sh	r8,r8[0x0]
8001697a:	5c 88       	casts.h	r8
8001697c:	5c 78       	castu.h	r8
8001697e:	f2 08 01 08 	sub	r8,r9,r8
80016982:	10 99       	mov	r9,r8
80016984:	ec f8 03 44 	ld.w	r8,r6[836]
80016988:	70 0a       	ld.w	r10,r8[0x0]
8001698a:	ec f8 01 74 	ld.w	r8,r6[372]
8001698e:	90 08       	ld.sh	r8,r8[0x0]
80016990:	5c 88       	casts.h	r8
80016992:	5c 78       	castu.h	r8
80016994:	a1 78       	lsl	r8,0x1
80016996:	f4 08 00 08 	add	r8,r10,r8
8001699a:	12 9a       	mov	r10,r9
8001699c:	10 9b       	mov	r11,r8
8001699e:	30 4c       	mov	r12,4
800169a0:	f0 16 00 fc 	mcall	r6[1008]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
800169a4:	30 4c       	mov	r12,4
800169a6:	f0 16 00 8a 	mcall	r6[552]

  
}
800169aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800169ae:	00 00       	add	r0,r0
800169b0:	80 01       	ld.sh	r1,r0[0x0]
800169b2:	67 e4       	ld.w	r4,r3[0x78]

800169b4 <DAC_pause>:

void DAC_pause(void) {
800169b4:	eb cd 40 80 	pushm	r7,lr
800169b8:	1a 97       	mov	r7,sp

}
800169ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800169be <DAC_resume>:

void DAC_resume(void) {
800169be:	eb cd 40 80 	pushm	r7,lr
800169c2:	1a 97       	mov	r7,sp

}
800169c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800169c8 <DAC_is_finished>:

int  DAC_is_finished(void) {
800169c8:	eb cd 40 80 	pushm	r7,lr
800169cc:	1a 97       	mov	r7,sp
	return 0;
800169ce:	30 08       	mov	r8,0
}
800169d0:	10 9c       	mov	r12,r8
800169d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800169d6 <DAC_set_value>:

void DAC_set_value(int32_t output) {
800169d6:	eb cd 40 c0 	pushm	r6-r7,lr
800169da:	1a 97       	mov	r7,sp
800169dc:	20 1d       	sub	sp,4
800169de:	48 76       	lddpc	r6,800169f8 <DAC_set_value+0x22>
800169e0:	1e 26       	rsub	r6,pc
800169e2:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
800169e6:	ec f8 02 4c 	ld.w	r8,r6[588]
800169ea:	70 08       	ld.w	r8,r8[0x0]
800169ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800169f0:	91 b9       	st.w	r8[0x2c],r9
}
800169f2:	2f fd       	sub	sp,-4
800169f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800169f8:	80 01       	ld.sh	r1,r0[0x0]
800169fa:	68 64       	ld.w	r4,r4[0x18]

800169fc <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800169fc:	eb cd 40 80 	pushm	r7,lr
80016a00:	1a 97       	mov	r7,sp
80016a02:	20 1d       	sub	sp,4
80016a04:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80016a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016a0c:	e6 18 00 01 	andh	r8,0x1,COH
80016a10:	5f 08       	sreq	r8
80016a12:	5c 58       	castu.b	r8
}
80016a14:	10 9c       	mov	r12,r8
80016a16:	2f fd       	sub	sp,-4
80016a18:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a1c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80016a1c:	eb cd 40 80 	pushm	r7,lr
80016a20:	1a 97       	mov	r7,sp
80016a22:	20 1d       	sub	sp,4
80016a24:	18 98       	mov	r8,r12
80016a26:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80016a2a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016a2e:	58 38       	cp.w	r8,3
80016a30:	c1 20       	breq	80016a54 <osc_get_rate+0x38>
80016a32:	e0 89 00 07 	brgt	80016a40 <osc_get_rate+0x24>
80016a36:	58 08       	cp.w	r8,0
80016a38:	c0 90       	breq	80016a4a <osc_get_rate+0x2e>
80016a3a:	58 28       	cp.w	r8,2
80016a3c:	c0 f0       	breq	80016a5a <osc_get_rate+0x3e>
80016a3e:	c1 b8       	rjmp	80016a74 <osc_get_rate+0x58>
80016a40:	58 48       	cp.w	r8,4
80016a42:	c1 10       	breq	80016a64 <osc_get_rate+0x48>
80016a44:	58 58       	cp.w	r8,5
80016a46:	c1 40       	breq	80016a6e <osc_get_rate+0x52>
80016a48:	c1 68       	rjmp	80016a74 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80016a4a:	e0 68 24 00 	mov	r8,9216
80016a4e:	ea 18 00 f4 	orh	r8,0xf4
80016a52:	c1 28       	rjmp	80016a76 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80016a54:	e0 68 80 00 	mov	r8,32768
80016a58:	c0 f8       	rjmp	80016a76 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80016a5a:	e0 68 12 00 	mov	r8,4608
80016a5e:	ea 18 00 7a 	orh	r8,0x7a
80016a62:	c0 a8       	rjmp	80016a76 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80016a64:	e0 68 0e 00 	mov	r8,3584
80016a68:	ea 18 07 27 	orh	r8,0x727
80016a6c:	c0 58       	rjmp	80016a76 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80016a6e:	e0 78 c1 38 	mov	r8,115000
80016a72:	c0 28       	rjmp	80016a76 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80016a74:	30 08       	mov	r8,0
	}
}
80016a76:	10 9c       	mov	r12,r8
80016a78:	2f fd       	sub	sp,-4
80016a7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a7e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80016a7e:	eb cd 40 c0 	pushm	r6-r7,lr
80016a82:	1a 97       	mov	r7,sp
80016a84:	48 56       	lddpc	r6,80016a98 <sysclk_get_main_hz+0x1a>
80016a86:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80016a88:	30 0c       	mov	r12,0
80016a8a:	cc 9f       	rcall	80016a1c <osc_get_rate>
80016a8c:	18 98       	mov	r8,r12
80016a8e:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80016a90:	10 9c       	mov	r12,r8
80016a92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a96:	00 00       	add	r0,r0
80016a98:	80 01       	ld.sh	r1,r0[0x0]
80016a9a:	69 0a       	ld.w	r10,r4[0x40]

80016a9c <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80016a9c:	eb cd 40 c0 	pushm	r6-r7,lr
80016aa0:	1a 97       	mov	r7,sp
80016aa2:	48 46       	lddpc	r6,80016ab0 <sysclk_get_pba_hz+0x14>
80016aa4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80016aa6:	ce cf       	rcall	80016a7e <sysclk_get_main_hz>
80016aa8:	18 98       	mov	r8,r12
}
80016aaa:	10 9c       	mov	r12,r8
80016aac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ab0:	80 01       	ld.sh	r1,r0[0x0]
80016ab2:	69 28       	ld.w	r8,r4[0x48]

80016ab4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016ab4:	eb cd 40 c0 	pushm	r6-r7,lr
80016ab8:	1a 97       	mov	r7,sp
80016aba:	20 6d       	sub	sp,24
80016abc:	49 e6       	lddpc	r6,80016b34 <interpolate+0x80>
80016abe:	1e 26       	rsub	r6,pc
80016ac0:	ef 4c ff f8 	st.w	r7[-8],r12
80016ac4:	ef 4b ff f4 	st.w	r7[-12],r11
80016ac8:	ef 4a ff f0 	st.w	r7[-16],r10
80016acc:	ef 49 ff ec 	st.w	r7[-20],r9
80016ad0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016ad4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016ad8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016adc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016ae0:	c0 41       	brne	80016ae8 <interpolate+0x34>
	{
		return y1;
80016ae2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016ae6:	c2 38       	rjmp	80016b2c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016ae8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016aec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016af0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016af4:	ee fa ff f8 	ld.w	r10,r7[-8]
80016af8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016afc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016b00:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016b04:	ee fa ff f0 	ld.w	r10,r7[-16]
80016b08:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016b0c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016b10:	12 9b       	mov	r11,r9
80016b12:	10 9c       	mov	r12,r8
80016b14:	f0 16 00 08 	mcall	r6[32]
80016b18:	18 98       	mov	r8,r12
80016b1a:	10 99       	mov	r9,r8
80016b1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016b20:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016b24:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016b2c:	10 9c       	mov	r12,r8
80016b2e:	2f ad       	sub	sp,-24
80016b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016b34:	80 01       	ld.sh	r1,r0[0x0]
80016b36:	69 42       	ld.w	r2,r4[0x50]
80016b38:	21 00       	sub	r0,16

80016b3a <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
80016b3a:	eb cd 40 c0 	pushm	r6-r7,lr
80016b3e:	1a 97       	mov	r7,sp
80016b40:	4a 26       	lddpc	r6,80016bc8 <pdca_int_handler_i2c0+0x8e>
80016b42:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80016b44:	fe 78 38 00 	mov	r8,-51200
80016b48:	30 29       	mov	r9,2
80016b4a:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
80016b4c:	30 2c       	mov	r12,2
80016b4e:	f0 16 00 78 	mcall	r6[480]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80016b52:	30 2c       	mov	r12,2
80016b54:	f0 16 00 92 	mcall	r6[584]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80016b58:	ec f8 02 64 	ld.w	r8,r6[612]
80016b5c:	11 88       	ld.ub	r8,r8[0x0]
80016b5e:	5c 58       	castu.b	r8
80016b60:	10 99       	mov	r9,r8
80016b62:	ec fa 01 30 	ld.w	r10,r6[304]
80016b66:	12 98       	mov	r8,r9
80016b68:	a3 68       	lsl	r8,0x2
80016b6a:	12 08       	add	r8,r9
80016b6c:	a3 78       	lsl	r8,0x3
80016b6e:	f4 08 00 08 	add	r8,r10,r8
80016b72:	f0 c9 ff e0 	sub	r9,r8,-32
80016b76:	30 08       	mov	r8,0
80016b78:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
80016b7a:	ec f8 02 64 	ld.w	r8,r6[612]
80016b7e:	11 88       	ld.ub	r8,r8[0x0]
80016b80:	5c 58       	castu.b	r8
80016b82:	10 99       	mov	r9,r8
80016b84:	ec fa 01 30 	ld.w	r10,r6[304]
80016b88:	12 98       	mov	r8,r9
80016b8a:	a3 68       	lsl	r8,0x2
80016b8c:	12 08       	add	r8,r9
80016b8e:	a3 78       	lsl	r8,0x3
80016b90:	f4 08 00 08 	add	r8,r10,r8
80016b94:	2d c8       	sub	r8,-36
80016b96:	70 08       	ld.w	r8,r8[0x0]
80016b98:	58 08       	cp.w	r8,0
80016b9a:	c1 00       	breq	80016bba <pdca_int_handler_i2c0+0x80>
80016b9c:	ec f8 02 64 	ld.w	r8,r6[612]
80016ba0:	11 88       	ld.ub	r8,r8[0x0]
80016ba2:	5c 58       	castu.b	r8
80016ba4:	10 99       	mov	r9,r8
80016ba6:	ec fa 01 30 	ld.w	r10,r6[304]
80016baa:	12 98       	mov	r8,r9
80016bac:	a3 68       	lsl	r8,0x2
80016bae:	12 08       	add	r8,r9
80016bb0:	a3 78       	lsl	r8,0x3
80016bb2:	f4 08 00 08 	add	r8,r10,r8
80016bb6:	2d c8       	sub	r8,-36
80016bb8:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
80016bba:	fe cc 00 82 	sub	r12,pc,130
80016bbe:	f0 16 00 01 	mcall	r6[4]
}
80016bc2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016bc6:	d6 03       	rete
80016bc8:	80 01       	ld.sh	r1,r0[0x0]
80016bca:	69 c6       	ld.w	r6,r4[0x70]

80016bcc <init_i2c>:




int init_i2c(unsigned char i2c_device) {
80016bcc:	eb cd 40 c0 	pushm	r6-r7,lr
80016bd0:	1a 97       	mov	r7,sp
80016bd2:	20 4d       	sub	sp,16
80016bd4:	4c b6       	lddpc	r6,80016d00 <init_i2c+0x134>
80016bd6:	1e 26       	rsub	r6,pc
80016bd8:	18 98       	mov	r8,r12
80016bda:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016bde:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016be2:	58 08       	cp.w	r8,0
80016be4:	c0 40       	breq	80016bec <init_i2c+0x20>
80016be6:	58 18       	cp.w	r8,1
80016be8:	c1 50       	breq	80016c12 <init_i2c+0x46>
80016bea:	c2 d8       	rjmp	80016c44 <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
80016bec:	fe 78 38 00 	mov	r8,-51200
80016bf0:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
80016bf4:	30 0a       	mov	r10,0
80016bf6:	36 2b       	mov	r11,98
80016bf8:	fe cc 00 be 	sub	r12,pc,190
80016bfc:	f0 16 00 38 	mcall	r6[224]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80016c00:	30 0b       	mov	r11,0
80016c02:	34 3c       	mov	r12,67
80016c04:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
80016c08:	30 0b       	mov	r11,0
80016c0a:	34 2c       	mov	r12,66
80016c0c:	f0 16 00 3c 	mcall	r6[240]

	break;
80016c10:	c1 c8       	rjmp	80016c48 <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80016c12:	fe 78 3c 00 	mov	r8,-50176
80016c16:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
80016c1a:	30 0a       	mov	r10,0
80016c1c:	36 3b       	mov	r11,99
80016c1e:	fe cc 00 e4 	sub	r12,pc,228
80016c22:	f0 16 00 38 	mcall	r6[224]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80016c26:	30 0b       	mov	r11,0
80016c28:	34 5c       	mov	r12,69
80016c2a:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80016c2e:	30 0b       	mov	r11,0
80016c30:	34 4c       	mov	r12,68
80016c32:	f0 16 00 3c 	mcall	r6[240]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
80016c36:	34 5c       	mov	r12,69
80016c38:	f0 16 00 f2 	mcall	r6[968]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
80016c3c:	34 4c       	mov	r12,68
80016c3e:	f0 16 00 f2 	mcall	r6[968]
	break;
80016c42:	c0 38       	rjmp	80016c48 <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80016c44:	3f f8       	mov	r8,-1
80016c46:	c5 98       	rjmp	80016cf8 <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016c48:	30 08       	mov	r8,0
80016c4a:	ef 48 ff f4 	st.w	r7[-12],r8
80016c4e:	c1 b8       	rjmp	80016c84 <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80016c50:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80016c54:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016c58:	ec fa 01 30 	ld.w	r10,r6[304]
80016c5c:	12 98       	mov	r8,r9
80016c5e:	a3 68       	lsl	r8,0x2
80016c60:	12 08       	add	r8,r9
80016c62:	a3 78       	lsl	r8,0x3
80016c64:	e0 69 01 90 	mov	r9,400
80016c68:	f6 09 02 49 	mul	r9,r11,r9
80016c6c:	12 08       	add	r8,r9
80016c6e:	f4 08 00 08 	add	r8,r10,r8
80016c72:	f0 c9 ff e0 	sub	r9,r8,-32
80016c76:	3f f8       	mov	r8,-1
80016c78:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016c7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c7e:	2f f8       	sub	r8,-1
80016c80:	ef 48 ff f4 	st.w	r7[-12],r8
80016c84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c88:	58 98       	cp.w	r8,9
80016c8a:	fe 9a ff e3 	brle	80016c50 <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016c8e:	e1 b8 00 00 	mfsr	r8,0x0
80016c92:	10 9c       	mov	r12,r8
80016c94:	cb 4e       	rcall	800169fc <cpu_irq_is_enabled_flags>
80016c96:	18 98       	mov	r8,r12
80016c98:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016c9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016ca0:	30 08       	mov	r8,0
80016ca2:	f0 09 18 00 	cp.b	r9,r8
80016ca6:	c0 20       	breq	80016caa <init_i2c+0xde>
		cpu_irq_disable ();
80016ca8:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016caa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cae:	3f f9       	mov	r9,-1
80016cb0:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016cb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cb6:	30 19       	mov	r9,1
80016cb8:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cbe:	e0 69 00 80 	mov	r9,128
80016cc2:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80016cc4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016cc8:	30 08       	mov	r8,0
80016cca:	f0 09 18 00 	cp.b	r9,r8
80016cce:	c0 20       	breq	80016cd2 <init_i2c+0x106>
		cpu_irq_enable ();
80016cd0:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cd6:	3f f9       	mov	r9,-1
80016cd8:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
80016cda:	ce 1e       	rcall	80016a9c <sysclk_get_pba_hz>
80016cdc:	18 98       	mov	r8,r12
80016cde:	10 9a       	mov	r10,r8
80016ce0:	e0 7b 86 a0 	mov	r11,100000
80016ce4:	ee fc ff f8 	ld.w	r12,r7[-8]
80016ce8:	f0 16 01 29 	mcall	r6[1188]
80016cec:	18 98       	mov	r8,r12
80016cee:	5b 88       	cp.w	r8,-8
80016cf0:	c0 31       	brne	80016cf6 <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
80016cf2:	3f 88       	mov	r8,-8
80016cf4:	c0 28       	rjmp	80016cf8 <init_i2c+0x12c>
	}
	return STATUS_OK;				
80016cf6:	30 08       	mov	r8,0

}
80016cf8:	10 9c       	mov	r12,r8
80016cfa:	2f cd       	sub	sp,-16
80016cfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d00:	80 01       	ld.sh	r1,r0[0x0]
80016d02:	6a 5a       	ld.w	r10,r5[0x14]

80016d04 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
80016d04:	eb cd 40 c0 	pushm	r6-r7,lr
80016d08:	1a 97       	mov	r7,sp
80016d0a:	20 3d       	sub	sp,12
80016d0c:	4a 26       	lddpc	r6,80016d94 <i2c_reset+0x90>
80016d0e:	1e 26       	rsub	r6,pc
80016d10:	18 98       	mov	r8,r12
80016d12:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016d16:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016d1a:	58 08       	cp.w	r8,0
80016d1c:	c0 40       	breq	80016d24 <i2c_reset+0x20>
80016d1e:	58 18       	cp.w	r8,1
80016d20:	c0 70       	breq	80016d2e <i2c_reset+0x2a>
80016d22:	c0 b8       	rjmp	80016d38 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
80016d24:	fe 78 38 00 	mov	r8,-51200
80016d28:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016d2c:	c0 a8       	rjmp	80016d40 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
80016d2e:	fe 78 3c 00 	mov	r8,-50176
80016d32:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016d36:	c0 58       	rjmp	80016d40 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
80016d38:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
80016d3c:	10 9c       	mov	r12,r8
80016d3e:	c2 78       	rjmp	80016d8c <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016d40:	e1 b8 00 00 	mfsr	r8,0x0
80016d44:	10 9c       	mov	r12,r8
80016d46:	c5 be       	rcall	800169fc <cpu_irq_is_enabled_flags>
80016d48:	18 98       	mov	r8,r12
80016d4a:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016d4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016d52:	30 08       	mov	r8,0
80016d54:	f0 09 18 00 	cp.b	r9,r8
80016d58:	c0 20       	breq	80016d5c <i2c_reset+0x58>
		cpu_irq_disable ();
80016d5a:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d60:	3f f9       	mov	r9,-1
80016d62:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016d64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d68:	30 19       	mov	r9,1
80016d6a:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d70:	e0 69 00 80 	mov	r9,128
80016d74:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80016d76:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016d7a:	30 08       	mov	r8,0
80016d7c:	f0 09 18 00 	cp.b	r9,r8
80016d80:	c0 20       	breq	80016d84 <i2c_reset+0x80>
		cpu_irq_enable ();
80016d82:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016d84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d88:	3f f9       	mov	r9,-1
80016d8a:	91 b9       	st.w	r8[0x2c],r9
}
80016d8c:	2f dd       	sub	sp,-12
80016d8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d92:	00 00       	add	r0,r0
80016d94:	80 01       	ld.sh	r1,r0[0x0]
80016d96:	6b 92       	ld.w	r2,r5[0x64]

80016d98 <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016d98:	eb cd 40 c0 	pushm	r6-r7,lr
80016d9c:	1a 97       	mov	r7,sp
80016d9e:	20 3d       	sub	sp,12
80016da0:	4b f6       	lddpc	r6,80016e9c <i2c_add_request+0x104>
80016da2:	1e 26       	rsub	r6,pc
80016da4:	18 98       	mov	r8,r12
80016da6:	ef 4b ff f4 	st.w	r7[-12],r11
80016daa:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
80016dae:	30 08       	mov	r8,0
80016db0:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
80016db4:	30 08       	mov	r8,0
80016db6:	ef 48 ff fc 	st.w	r7[-4],r8
80016dba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016dbe:	58 98       	cp.w	r8,9
80016dc0:	e0 89 00 1b 	brgt	80016df6 <i2c_add_request+0x5e>
80016dc4:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016dcc:	ec fa 01 30 	ld.w	r10,r6[304]
80016dd0:	12 98       	mov	r8,r9
80016dd2:	a3 68       	lsl	r8,0x2
80016dd4:	12 08       	add	r8,r9
80016dd6:	a3 78       	lsl	r8,0x3
80016dd8:	e0 69 01 90 	mov	r9,400
80016ddc:	f6 09 02 49 	mul	r9,r11,r9
80016de0:	12 08       	add	r8,r9
80016de2:	f4 08 00 08 	add	r8,r10,r8
80016de6:	2e 08       	sub	r8,-32
80016de8:	11 98       	ld.ub	r8,r8[0x1]
80016dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016dee:	2f f8       	sub	r8,-1
80016df0:	ef 48 ff fc 	st.w	r7[-4],r8
80016df4:	ce 3b       	rjmp	80016dba <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
80016df6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016dfa:	58 98       	cp.w	r8,9
80016dfc:	e0 89 00 45 	brgt	80016e86 <i2c_add_request+0xee>
		new_event->schedule_slot=i;
80016e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e04:	5c 58       	castu.b	r8
80016e06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e0a:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
80016e0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e12:	30 08       	mov	r8,0
80016e14:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016e18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e1c:	30 18       	mov	r8,1
80016e1e:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016e22:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016e26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016e2a:	ec fa 01 30 	ld.w	r10,r6[304]
80016e2e:	12 98       	mov	r8,r9
80016e30:	a3 68       	lsl	r8,0x2
80016e32:	12 08       	add	r8,r9
80016e34:	a3 78       	lsl	r8,0x3
80016e36:	e0 69 01 90 	mov	r9,400
80016e3a:	f6 09 02 49 	mul	r9,r11,r9
80016e3e:	12 08       	add	r8,r9
80016e40:	f4 08 00 09 	add	r9,r10,r8
80016e44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e48:	12 9a       	mov	r10,r9
80016e4a:	10 9b       	mov	r11,r8
80016e4c:	f4 c8 00 00 	sub	r8,r10,0
80016e50:	f6 c9 00 00 	sub	r9,r11,0
80016e54:	72 0c       	ld.w	r12,r9[0x0]
80016e56:	91 0c       	st.w	r8[0x0],r12
80016e58:	72 1c       	ld.w	r12,r9[0x4]
80016e5a:	91 1c       	st.w	r8[0x4],r12
80016e5c:	72 2c       	ld.w	r12,r9[0x8]
80016e5e:	91 2c       	st.w	r8[0x8],r12
80016e60:	72 39       	ld.w	r9,r9[0xc]
80016e62:	91 39       	st.w	r8[0xc],r9
80016e64:	f4 c8 ff f0 	sub	r8,r10,-16
80016e68:	f6 c9 ff f0 	sub	r9,r11,-16
80016e6c:	72 0c       	ld.w	r12,r9[0x0]
80016e6e:	91 0c       	st.w	r8[0x0],r12
80016e70:	72 1c       	ld.w	r12,r9[0x4]
80016e72:	91 1c       	st.w	r8[0x4],r12
80016e74:	72 2c       	ld.w	r12,r9[0x8]
80016e76:	91 2c       	st.w	r8[0x8],r12
80016e78:	72 39       	ld.w	r9,r9[0xc]
80016e7a:	91 39       	st.w	r8[0xc],r9
80016e7c:	f6 e8 00 20 	ld.d	r8,r11[32]
80016e80:	f4 e9 00 20 	st.d	r10[32],r8
80016e84:	c0 48       	rjmp	80016e8c <i2c_add_request+0xf4>
	} else i=-1;
80016e86:	3f f8       	mov	r8,-1
80016e88:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
80016e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e90:	5c 58       	castu.b	r8
}
80016e92:	10 9c       	mov	r12,r8
80016e94:	2f dd       	sub	sp,-12
80016e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e9a:	00 00       	add	r0,r0
80016e9c:	80 01       	ld.sh	r1,r0[0x0]
80016e9e:	6c 26       	ld.w	r6,r6[0x8]

80016ea0 <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016ea0:	eb cd 40 c0 	pushm	r6-r7,lr
80016ea4:	1a 97       	mov	r7,sp
80016ea6:	20 3d       	sub	sp,12
80016ea8:	4a a6       	lddpc	r6,80016f50 <i2c_change_request+0xb0>
80016eaa:	1e 26       	rsub	r6,pc
80016eac:	18 98       	mov	r8,r12
80016eae:	ef 4b ff f4 	st.w	r7[-12],r11
80016eb2:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
80016eb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016eba:	f1 38 00 18 	ld.ub	r8,r8[24]
80016ebe:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
80016ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ec6:	58 08       	cp.w	r8,0
80016ec8:	c4 15       	brlt	80016f4a <i2c_change_request+0xaa>
80016eca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ece:	58 98       	cp.w	r8,9
80016ed0:	e0 89 00 3d 	brgt	80016f4a <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
80016ed4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016ed8:	30 08       	mov	r8,0
80016eda:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016ede:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016ee2:	30 18       	mov	r8,1
80016ee4:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016ee8:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016eec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016ef0:	ec fa 01 30 	ld.w	r10,r6[304]
80016ef4:	12 98       	mov	r8,r9
80016ef6:	a3 68       	lsl	r8,0x2
80016ef8:	12 08       	add	r8,r9
80016efa:	a3 78       	lsl	r8,0x3
80016efc:	e0 69 01 90 	mov	r9,400
80016f00:	f6 09 02 49 	mul	r9,r11,r9
80016f04:	12 08       	add	r8,r9
80016f06:	f4 08 00 09 	add	r9,r10,r8
80016f0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f0e:	12 9a       	mov	r10,r9
80016f10:	10 9b       	mov	r11,r8
80016f12:	f4 c8 00 00 	sub	r8,r10,0
80016f16:	f6 c9 00 00 	sub	r9,r11,0
80016f1a:	72 0c       	ld.w	r12,r9[0x0]
80016f1c:	91 0c       	st.w	r8[0x0],r12
80016f1e:	72 1c       	ld.w	r12,r9[0x4]
80016f20:	91 1c       	st.w	r8[0x4],r12
80016f22:	72 2c       	ld.w	r12,r9[0x8]
80016f24:	91 2c       	st.w	r8[0x8],r12
80016f26:	72 39       	ld.w	r9,r9[0xc]
80016f28:	91 39       	st.w	r8[0xc],r9
80016f2a:	f4 c8 ff f0 	sub	r8,r10,-16
80016f2e:	f6 c9 ff f0 	sub	r9,r11,-16
80016f32:	72 0c       	ld.w	r12,r9[0x0]
80016f34:	91 0c       	st.w	r8[0x0],r12
80016f36:	72 1c       	ld.w	r12,r9[0x4]
80016f38:	91 1c       	st.w	r8[0x4],r12
80016f3a:	72 2c       	ld.w	r12,r9[0x8]
80016f3c:	91 2c       	st.w	r8[0x8],r12
80016f3e:	72 39       	ld.w	r9,r9[0xc]
80016f40:	91 39       	st.w	r8[0xc],r9
80016f42:	f6 e8 00 20 	ld.d	r8,r11[32]
80016f46:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
80016f4a:	2f dd       	sub	sp,-12
80016f4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016f50:	80 01       	ld.sh	r1,r0[0x0]
80016f52:	6d 2e       	ld.w	lr,r6[0x48]
80016f54:	77 72       	ld.w	r2,r11[0x5c]
80016f56:	00 00       	add	r0,r0
80016f58:	77 00       	ld.w	r0,r11[0x40]

80016f5a <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
80016f5a:	eb cd 40 c0 	pushm	r6-r7,lr
80016f5e:	1a 97       	mov	r7,sp
80016f60:	20 4d       	sub	sp,16
80016f62:	fe f6 02 32 	ld.w	r6,pc[562]
80016f66:	1e 26       	rsub	r6,pc
80016f68:	18 99       	mov	r9,r12
80016f6a:	16 98       	mov	r8,r11
80016f6c:	ef 69 ff f4 	st.b	r7[-12],r9
80016f70:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
80016f74:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80016f78:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80016f7c:	12 98       	mov	r8,r9
80016f7e:	a3 68       	lsl	r8,0x2
80016f80:	12 08       	add	r8,r9
80016f82:	a3 78       	lsl	r8,0x3
80016f84:	e0 69 01 90 	mov	r9,400
80016f88:	f4 09 02 49 	mul	r9,r10,r9
80016f8c:	f0 09 00 09 	add	r9,r8,r9
80016f90:	ec f8 01 30 	ld.w	r8,r6[304]
80016f94:	f2 08 00 08 	add	r8,r9,r8
80016f98:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
80016f9c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016fa0:	58 08       	cp.w	r8,0
80016fa2:	c0 40       	breq	80016faa <i2c_trigger_request+0x50>
80016fa4:	58 18       	cp.w	r8,1
80016fa6:	c5 90       	breq	80017058 <i2c_trigger_request+0xfe>
80016fa8:	c5 d8       	rjmp	80017062 <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
80016faa:	fe 78 38 00 	mov	r8,-51200
80016fae:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fb6:	30 19       	mov	r9,1
80016fb8:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fbe:	e0 69 00 80 	mov	r9,128
80016fc2:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80016fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fc8:	30 29       	mov	r9,2
80016fca:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
80016fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fd0:	11 c8       	ld.ub	r8,r8[0x4]
80016fd2:	58 18       	cp.w	r8,1
80016fd4:	c1 b0       	breq	8001700a <i2c_trigger_request+0xb0>
80016fd6:	58 28       	cp.w	r8,2
80016fd8:	c0 30       	breq	80016fde <i2c_trigger_request+0x84>
80016fda:	58 08       	cp.w	r8,0
80016fdc:	c3 71       	brne	8001704a <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
80016fde:	ec f8 01 44 	ld.w	r8,r6[324]
80016fe2:	30 69       	mov	r9,6
80016fe4:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
80016fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fea:	70 49       	ld.w	r9,r8[0x10]
80016fec:	ec f8 01 44 	ld.w	r8,r6[324]
80016ff0:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
80016ff2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ff6:	70 59       	ld.w	r9,r8[0x14]
80016ff8:	ec f8 01 44 	ld.w	r8,r6[324]
80016ffc:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80016ffe:	ec fb 01 44 	ld.w	r11,r6[324]
80017002:	30 2c       	mov	r12,2
80017004:	f0 16 00 70 	mcall	r6[448]
			break;
80017008:	c2 18       	rjmp	8001704a <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
8001700a:	ec f8 01 44 	ld.w	r8,r6[324]
8001700e:	31 19       	mov	r9,17
80017010:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
80017012:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017016:	70 29       	ld.w	r9,r8[0x8]
80017018:	ec f8 01 44 	ld.w	r8,r6[324]
8001701c:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
8001701e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017022:	70 39       	ld.w	r9,r8[0xc]
80017024:	ec f8 01 44 	ld.w	r8,r6[324]
80017028:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
8001702a:	ec fb 01 44 	ld.w	r11,r6[324]
8001702e:	30 2c       	mov	r12,2
80017030:	f0 16 00 70 	mcall	r6[448]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
80017034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017038:	70 39       	ld.w	r9,r8[0xc]
8001703a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001703e:	70 28       	ld.w	r8,r8[0x8]
80017040:	12 9a       	mov	r10,r9
80017042:	10 9b       	mov	r11,r8
80017044:	30 2c       	mov	r12,2
80017046:	f0 16 00 b2 	mcall	r6[712]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
8001704a:	30 2c       	mov	r12,2
8001704c:	f0 16 00 b1 	mcall	r6[708]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
80017050:	30 2c       	mov	r12,2
80017052:	f0 16 02 1a 	mcall	r6[2152]
		
		
		break;
80017056:	c0 98       	rjmp	80017068 <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
80017058:	fe 78 3c 00 	mov	r8,-50176
8001705c:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80017060:	c0 48       	rjmp	80017068 <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
80017062:	e0 68 00 ff 	mov	r8,255
80017066:	c9 38       	rjmp	8001718c <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
80017068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001706c:	11 c8       	ld.ub	r8,r8[0x4]
8001706e:	58 18       	cp.w	r8,1
80017070:	c4 40       	breq	800170f8 <i2c_trigger_request+0x19e>
80017072:	58 28       	cp.w	r8,2
80017074:	c1 50       	breq	8001709e <i2c_trigger_request+0x144>
80017076:	58 08       	cp.w	r8,0
80017078:	c6 51       	brne	80017142 <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001707a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001707e:	11 88       	ld.ub	r8,r8[0x0]
80017080:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017082:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80017084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017088:	70 58       	ld.w	r8,r8[0x14]
8001708a:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001708c:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017090:	10 99       	mov	r9,r8
80017092:	e8 19 a0 00 	orl	r9,0xa000
80017096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001709a:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
8001709c:	c5 38       	rjmp	80017142 <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
8001709e:	fe cc 01 4a 	sub	r12,pc,330
800170a2:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170aa:	11 88       	ld.ub	r8,r8[0x0]
800170ac:	a1 78       	lsl	r8,0x1
800170ae:	ea 18 00 01 	orh	r8,0x1
800170b2:	e8 18 a0 00 	orl	r8,0xa000
800170b6:	10 99       	mov	r9,r8
800170b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170bc:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170c2:	11 88       	ld.ub	r8,r8[0x0]
800170c4:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170c6:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800170c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170cc:	70 58       	ld.w	r8,r8[0x14]
800170ce:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170d0:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170d4:	10 99       	mov	r9,r8
800170d6:	e8 19 a0 00 	orl	r9,0xa000
800170da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170de:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
800170e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170e4:	11 d8       	ld.ub	r8,r8[0x5]
800170e6:	10 99       	mov	r9,r8
800170e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170ec:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
800170ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170f2:	30 19       	mov	r9,1
800170f4:	91 09       	st.w	r8[0x0],r9
			
			break;	
800170f6:	c2 68       	rjmp	80017142 <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
800170f8:	fe cc 01 a0 	sub	r12,pc,416
800170fc:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017100:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017104:	11 88       	ld.ub	r8,r8[0x0]
80017106:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017108:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8001710a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001710e:	70 38       	ld.w	r8,r8[0xc]
80017110:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017112:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017116:	10 99       	mov	r9,r8
80017118:	e8 19 a0 00 	orl	r9,0xa000
8001711c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017120:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017126:	11 88       	ld.ub	r8,r8[0x0]
80017128:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
8001712a:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8001712c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017130:	70 38       	ld.w	r8,r8[0xc]
80017132:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
80017134:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017138:	10 99       	mov	r9,r8
8001713a:	ad b9       	sbr	r9,0xd
8001713c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017140:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
80017142:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80017146:	ec fa 02 64 	ld.w	r10,r6[612]
8001714a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001714e:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
80017152:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80017156:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001715a:	ec fa 01 30 	ld.w	r10,r6[304]
8001715e:	12 98       	mov	r8,r9
80017160:	a3 68       	lsl	r8,0x2
80017162:	12 08       	add	r8,r9
80017164:	a3 78       	lsl	r8,0x3
80017166:	e0 69 01 90 	mov	r9,400
8001716a:	f6 09 02 49 	mul	r9,r11,r9
8001716e:	12 08       	add	r8,r9
80017170:	f4 08 00 08 	add	r8,r10,r8
80017174:	f0 c9 ff e0 	sub	r9,r8,-32
80017178:	30 18       	mov	r8,1
8001717a:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8001717c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017180:	30 19       	mov	r9,1
80017182:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
80017184:	30 2c       	mov	r12,2
80017186:	f0 16 00 8a 	mcall	r6[552]
	return 0;
8001718a:	30 08       	mov	r8,0
}
8001718c:	10 9c       	mov	r12,r8
8001718e:	2f cd       	sub	sp,-16
80017190:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017194:	80 01       	ld.sh	r1,r0[0x0]
80017196:	6d ea       	ld.w	r10,r6[0x78]

80017198 <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
80017198:	eb cd 40 80 	pushm	r7,lr
8001719c:	1a 97       	mov	r7,sp
8001719e:	20 2d       	sub	sp,8
800171a0:	18 99       	mov	r9,r12
800171a2:	16 98       	mov	r8,r11
800171a4:	ef 69 ff fc 	st.b	r7[-4],r9
800171a8:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
800171ac:	2f ed       	sub	sp,-8
800171ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800171b2 <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
800171b2:	eb cd 40 80 	pushm	r7,lr
800171b6:	1a 97       	mov	r7,sp
800171b8:	20 2d       	sub	sp,8
800171ba:	18 99       	mov	r9,r12
800171bc:	16 98       	mov	r8,r11
800171be:	ef 69 ff fc 	st.b	r7[-4],r9
800171c2:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
800171c6:	30 08       	mov	r8,0
}
800171c8:	10 9c       	mov	r12,r8
800171ca:	2f ed       	sub	sp,-8
800171cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800171d0 <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
800171d0:	eb cd 40 80 	pushm	r7,lr
800171d4:	1a 97       	mov	r7,sp
800171d6:	20 2d       	sub	sp,8
800171d8:	18 99       	mov	r9,r12
800171da:	16 98       	mov	r8,r11
800171dc:	ef 69 ff fc 	st.b	r7[-4],r9
800171e0:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
800171e4:	30 08       	mov	r8,0
}
800171e6:	10 9c       	mov	r12,r8
800171e8:	2f ed       	sub	sp,-8
800171ea:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800171f0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800171f0:	eb cd 40 c0 	pushm	r6-r7,lr
800171f4:	1a 97       	mov	r7,sp
800171f6:	20 6d       	sub	sp,24
800171f8:	49 e6       	lddpc	r6,80017270 <interpolate+0x80>
800171fa:	1e 26       	rsub	r6,pc
800171fc:	ef 4c ff f8 	st.w	r7[-8],r12
80017200:	ef 4b ff f4 	st.w	r7[-12],r11
80017204:	ef 4a ff f0 	st.w	r7[-16],r10
80017208:	ef 49 ff ec 	st.w	r7[-20],r9
8001720c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017210:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017214:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017218:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001721c:	c0 41       	brne	80017224 <interpolate+0x34>
	{
		return y1;
8001721e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017222:	c2 38       	rjmp	80017268 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017224:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017228:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001722c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017230:	ee fa ff f8 	ld.w	r10,r7[-8]
80017234:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017238:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001723c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017240:	ee fa ff f0 	ld.w	r10,r7[-16]
80017244:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017248:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001724c:	12 9b       	mov	r11,r9
8001724e:	10 9c       	mov	r12,r8
80017250:	f0 16 00 08 	mcall	r6[32]
80017254:	18 98       	mov	r8,r12
80017256:	10 99       	mov	r9,r8
80017258:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001725c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017260:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017264:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017268:	10 9c       	mov	r12,r8
8001726a:	2f ad       	sub	sp,-24
8001726c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017270:	80 01       	ld.sh	r1,r0[0x0]
80017272:	70 7e       	ld.w	lr,r8[0x1c]

80017274 <init_itg3200_slow>:
gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;



void init_itg3200_slow(void) {
80017274:	eb cd 40 c0 	pushm	r6-r7,lr
80017278:	1a 97       	mov	r7,sp
8001727a:	48 a6       	lddpc	r6,800172a0 <init_itg3200_slow+0x2c>
8001727c:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001727e:	ec fb 08 a8 	ld.w	r11,r6[2216]
80017282:	fe 7c 38 00 	mov	r12,-51200
80017286:	f0 16 00 6b 	mcall	r6[428]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
8001728a:	30 08       	mov	r8,0
8001728c:	36 89       	mov	r9,104
8001728e:	30 4a       	mov	r10,4
80017290:	ec fb 03 70 	ld.w	r11,r6[880]
80017294:	fe 7c 38 00 	mov	r12,-51200
80017298:	f0 16 00 39 	mcall	r6[228]
}
8001729c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172a0:	80 01       	ld.sh	r1,r0[0x0]
800172a2:	71 00       	ld.w	r0,r8[0x40]

800172a4 <get_gyro_data_slow>:


gyro_data* get_gyro_data_slow(void) {
800172a4:	eb cd 40 c0 	pushm	r6-r7,lr
800172a8:	1a 97       	mov	r7,sp
800172aa:	20 1d       	sub	sp,4
800172ac:	48 f6       	lddpc	r6,800172e8 <get_gyro_data_slow+0x44>
800172ae:	1e 26       	rsub	r6,pc
	uint8_t write_then_read_preamble=SENSOR_REG_ADDRESS;
800172b0:	31 b8       	mov	r8,27
800172b2:	ef 68 ff ff 	st.b	r7[-1],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
800172b6:	ee cb 00 01 	sub	r11,r7,1
800172ba:	30 08       	mov	r8,0
800172bc:	36 89       	mov	r9,104
800172be:	30 1a       	mov	r10,1
800172c0:	fe 7c 38 00 	mov	r12,-51200
800172c4:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
800172c8:	ec fb 04 b4 	ld.w	r11,r6[1204]
800172cc:	30 08       	mov	r8,0
800172ce:	36 89       	mov	r9,104
800172d0:	30 8a       	mov	r10,8
800172d2:	fe 7c 38 00 	mov	r12,-51200
800172d6:	f0 16 00 64 	mcall	r6[400]
	
	
	return &gyro_outputs;
800172da:	ec f8 04 b4 	ld.w	r8,r6[1204]
800172de:	10 9c       	mov	r12,r8
800172e0:	2f fd       	sub	sp,-4
800172e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172e6:	00 00       	add	r0,r0
800172e8:	80 01       	ld.sh	r1,r0[0x0]
800172ea:	71 32       	ld.w	r2,r8[0x4c]

800172ec <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
800172ec:	eb cd 40 c0 	pushm	r6-r7,lr
800172f0:	1a 97       	mov	r7,sp
800172f2:	48 56       	lddpc	r6,80017304 <LED_Read_Display+0x18>
800172f4:	1e 26       	rsub	r6,pc
  return LED_State;
800172f6:	ec f8 00 ec 	ld.w	r8,r6[236]
800172fa:	70 08       	ld.w	r8,r8[0x0]
}
800172fc:	10 9c       	mov	r12,r8
800172fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017302:	00 00       	add	r0,r0
80017304:	80 01       	ld.sh	r1,r0[0x0]
80017306:	71 78       	ld.w	r8,r8[0x5c]

80017308 <LED_Display>:


void LED_Display(U32 leds)
{
80017308:	eb cd 40 c0 	pushm	r6-r7,lr
8001730c:	1a 97       	mov	r7,sp
8001730e:	20 3d       	sub	sp,12
80017310:	4a 96       	lddpc	r6,800173b4 <LED_Display+0xac>
80017312:	1e 26       	rsub	r6,pc
80017314:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017318:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001731c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017320:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80017324:	ec f8 00 ec 	ld.w	r8,r6[236]
80017328:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001732c:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001732e:	ec f8 01 9c 	ld.w	r8,r6[412]
80017332:	ef 48 ff f8 	st.w	r7[-8],r8
80017336:	c3 58       	rjmp	800173a0 <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001733c:	70 08       	ld.w	r8,r8[0x0]
8001733e:	a9 78       	lsl	r8,0x9
80017340:	e0 28 e0 00 	sub	r8,57344
80017344:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
80017348:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001734c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017350:	5c 58       	castu.b	r8
80017352:	c0 90       	breq	80017364 <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017358:	70 19       	ld.w	r9,r8[0x4]
8001735a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001735e:	f1 49 00 58 	st.w	r8[88],r9
80017362:	c0 88       	rjmp	80017372 <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017368:	70 19       	ld.w	r9,r8[0x4]
8001736a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001736e:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017376:	70 19       	ld.w	r9,r8[0x4]
80017378:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001737c:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017380:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017384:	70 19       	ld.w	r9,r8[0x4]
80017386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001738a:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001738c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017390:	a1 98       	lsr	r8,0x1
80017392:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
80017396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001739a:	2f 08       	sub	r8,-16
8001739c:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
800173a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800173a4:	ec f8 01 9c 	ld.w	r8,r6[412]
800173a8:	2e 08       	sub	r8,-32
800173aa:	10 39       	cp.w	r9,r8
800173ac:	cc 63       	brcs	80017338 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
800173ae:	2f dd       	sub	sp,-12
800173b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800173b4:	80 01       	ld.sh	r1,r0[0x0]
800173b6:	71 96       	ld.w	r6,r8[0x64]

800173b8 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
800173b8:	eb cd 40 c0 	pushm	r6-r7,lr
800173bc:	1a 97       	mov	r7,sp
800173be:	20 1d       	sub	sp,4
800173c0:	48 86       	lddpc	r6,800173e0 <LED_Read_Display_Mask+0x28>
800173c2:	1e 26       	rsub	r6,pc
800173c4:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
800173c8:	ec f8 00 ec 	ld.w	r8,r6[236]
800173cc:	70 09       	ld.w	r9,r8[0x0]
800173ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173d2:	f3 e8 00 08 	and	r8,r9,r8
}
800173d6:	10 9c       	mov	r12,r8
800173d8:	2f fd       	sub	sp,-4
800173da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800173de:	00 00       	add	r0,r0
800173e0:	80 01       	ld.sh	r1,r0[0x0]
800173e2:	72 46       	ld.w	r6,r9[0x10]

800173e4 <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
800173e4:	eb cd 40 c0 	pushm	r6-r7,lr
800173e8:	1a 97       	mov	r7,sp
800173ea:	20 5d       	sub	sp,20
800173ec:	4b f6       	lddpc	r6,800174e8 <LED_Display_Mask+0x104>
800173ee:	1e 26       	rsub	r6,pc
800173f0:	ef 4c ff f0 	st.w	r7[-16],r12
800173f4:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800173f8:	ec f8 01 9c 	ld.w	r8,r6[412]
800173fc:	21 08       	sub	r8,16
800173fe:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
80017402:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017406:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001740a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
8001740e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017412:	f0 09 11 ff 	rsub	r9,r8,-1
80017416:	ec f8 00 ec 	ld.w	r8,r6[236]
8001741a:	70 08       	ld.w	r8,r8[0x0]
8001741c:	10 69       	and	r9,r8
8001741e:	ee fa ff ec 	ld.w	r10,r7[-20]
80017422:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017426:	f5 e8 00 08 	and	r8,r10,r8
8001742a:	10 49       	or	r9,r8
8001742c:	ec f8 00 ec 	ld.w	r8,r6[236]
80017430:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
80017432:	c5 38       	rjmp	800174d8 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
80017434:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017438:	5c 98       	brev	r8
8001743a:	f0 08 12 00 	clz	r8,r8
8001743e:	5c 58       	castu.b	r8
80017440:	2f f8       	sub	r8,-1
80017442:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017446:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001744a:	a5 68       	lsl	r8,0x4
8001744c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017450:	f2 08 00 08 	add	r8,r9,r8
80017454:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001745c:	70 08       	ld.w	r8,r8[0x0]
8001745e:	a9 78       	lsl	r8,0x9
80017460:	e0 28 e0 00 	sub	r8,57344
80017464:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
80017468:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001746c:	20 18       	sub	r8,1
8001746e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80017472:	f2 08 0a 48 	lsr	r8,r9,r8
80017476:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
8001747a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001747e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017482:	5c 58       	castu.b	r8
80017484:	c0 90       	breq	80017496 <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017486:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001748a:	70 19       	ld.w	r9,r8[0x4]
8001748c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017490:	f1 49 00 58 	st.w	r8[88],r9
80017494:	c0 88       	rjmp	800174a4 <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017496:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001749a:	70 19       	ld.w	r9,r8[0x4]
8001749c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174a0:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800174a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174a8:	70 19       	ld.w	r9,r8[0x4]
800174aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174ae:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800174b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174b6:	70 19       	ld.w	r9,r8[0x4]
800174b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174bc:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
800174be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800174c2:	a1 98       	lsr	r8,0x1
800174c4:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
800174c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174cc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800174d0:	f2 08 0a 48 	lsr	r8,r9,r8
800174d4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
800174d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174dc:	58 08       	cp.w	r8,0
800174de:	ca b1       	brne	80017434 <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
800174e0:	2f bd       	sub	sp,-20
800174e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800174e6:	00 00       	add	r0,r0
800174e8:	80 01       	ld.sh	r1,r0[0x0]
800174ea:	72 72       	ld.w	r2,r9[0x1c]

800174ec <LED_Test>:


bool LED_Test(U32 leds)
{
800174ec:	eb cd 40 c0 	pushm	r6-r7,lr
800174f0:	1a 97       	mov	r7,sp
800174f2:	20 1d       	sub	sp,4
800174f4:	48 96       	lddpc	r6,80017518 <LED_Test+0x2c>
800174f6:	1e 26       	rsub	r6,pc
800174f8:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
800174fc:	ec f8 00 ec 	ld.w	r8,r6[236]
80017500:	70 09       	ld.w	r9,r8[0x0]
80017502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017506:	f3 e8 00 08 	and	r8,r9,r8
8001750a:	5f 18       	srne	r8
8001750c:	5c 58       	castu.b	r8
}
8001750e:	10 9c       	mov	r12,r8
80017510:	2f fd       	sub	sp,-4
80017512:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017516:	00 00       	add	r0,r0
80017518:	80 01       	ld.sh	r1,r0[0x0]
8001751a:	73 7a       	ld.w	r10,r9[0x5c]

8001751c <LED_Off>:


void LED_Off(U32 leds)
{
8001751c:	eb cd 40 c0 	pushm	r6-r7,lr
80017520:	1a 97       	mov	r7,sp
80017522:	20 4d       	sub	sp,16
80017524:	4a b6       	lddpc	r6,800175d0 <LED_Off+0xb4>
80017526:	1e 26       	rsub	r6,pc
80017528:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001752c:	ec f8 01 9c 	ld.w	r8,r6[412]
80017530:	21 08       	sub	r8,16
80017532:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017536:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001753a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001753e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
80017542:	ec f8 00 ec 	ld.w	r8,r6[236]
80017546:	70 09       	ld.w	r9,r8[0x0]
80017548:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001754c:	10 49       	or	r9,r8
8001754e:	ec f8 00 ec 	ld.w	r8,r6[236]
80017552:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017554:	c3 78       	rjmp	800175c2 <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80017556:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001755a:	5c 98       	brev	r8
8001755c:	f0 08 12 00 	clz	r8,r8
80017560:	5c 58       	castu.b	r8
80017562:	2f f8       	sub	r8,-1
80017564:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017568:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001756c:	a5 68       	lsl	r8,0x4
8001756e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017572:	f2 08 00 08 	add	r8,r9,r8
80017576:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001757a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001757e:	70 08       	ld.w	r8,r8[0x0]
80017580:	a9 78       	lsl	r8,0x9
80017582:	e0 28 e0 00 	sub	r8,57344
80017586:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001758a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001758e:	70 19       	ld.w	r9,r8[0x4]
80017590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017594:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017598:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001759c:	70 19       	ld.w	r9,r8[0x4]
8001759e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800175a2:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800175a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175aa:	70 19       	ld.w	r9,r8[0x4]
800175ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800175b0:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800175b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800175b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800175ba:	f2 08 0a 48 	lsr	r8,r9,r8
800175be:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
800175c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175c6:	58 08       	cp.w	r8,0
800175c8:	cc 71       	brne	80017556 <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800175ca:	2f cd       	sub	sp,-16
800175cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800175d0:	80 01       	ld.sh	r1,r0[0x0]
800175d2:	73 aa       	ld.w	r10,r9[0x68]

800175d4 <LED_On>:


void LED_On(U32 leds)
{
800175d4:	eb cd 40 c0 	pushm	r6-r7,lr
800175d8:	1a 97       	mov	r7,sp
800175da:	20 4d       	sub	sp,16
800175dc:	4a c6       	lddpc	r6,8001768c <LED_On+0xb8>
800175de:	1e 26       	rsub	r6,pc
800175e0:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800175e4:	ec f8 01 9c 	ld.w	r8,r6[412]
800175e8:	21 08       	sub	r8,16
800175ea:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800175ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175f2:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800175f6:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
800175fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175fe:	f0 09 11 ff 	rsub	r9,r8,-1
80017602:	ec f8 00 ec 	ld.w	r8,r6[236]
80017606:	70 08       	ld.w	r8,r8[0x0]
80017608:	10 69       	and	r9,r8
8001760a:	ec f8 00 ec 	ld.w	r8,r6[236]
8001760e:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017610:	c3 78       	rjmp	8001767e <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80017612:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017616:	5c 98       	brev	r8
80017618:	f0 08 12 00 	clz	r8,r8
8001761c:	5c 58       	castu.b	r8
8001761e:	2f f8       	sub	r8,-1
80017620:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017624:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017628:	a5 68       	lsl	r8,0x4
8001762a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001762e:	f2 08 00 08 	add	r8,r9,r8
80017632:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017636:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001763a:	70 08       	ld.w	r8,r8[0x0]
8001763c:	a9 78       	lsl	r8,0x9
8001763e:	e0 28 e0 00 	sub	r8,57344
80017642:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017646:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001764a:	70 19       	ld.w	r9,r8[0x4]
8001764c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017650:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017654:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017658:	70 19       	ld.w	r9,r8[0x4]
8001765a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001765e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017662:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017666:	70 19       	ld.w	r9,r8[0x4]
80017668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001766c:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001766e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017672:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017676:	f2 08 0a 48 	lsr	r8,r9,r8
8001767a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
8001767e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017682:	58 08       	cp.w	r8,0
80017684:	cc 71       	brne	80017612 <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80017686:	2f cd       	sub	sp,-16
80017688:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001768c:	80 01       	ld.sh	r1,r0[0x0]
8001768e:	74 62       	ld.w	r2,r10[0x18]

80017690 <LED_Toggle>:


void LED_Toggle(U32 leds)
{
80017690:	eb cd 40 c0 	pushm	r6-r7,lr
80017694:	1a 97       	mov	r7,sp
80017696:	20 4d       	sub	sp,16
80017698:	4a b6       	lddpc	r6,80017744 <LED_Toggle+0xb4>
8001769a:	1e 26       	rsub	r6,pc
8001769c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800176a0:	ec f8 01 9c 	ld.w	r8,r6[412]
800176a4:	21 08       	sub	r8,16
800176a6:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800176aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800176ae:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800176b2:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
800176b6:	ec f8 00 ec 	ld.w	r8,r6[236]
800176ba:	70 09       	ld.w	r9,r8[0x0]
800176bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800176c0:	10 59       	eor	r9,r8
800176c2:	ec f8 00 ec 	ld.w	r8,r6[236]
800176c6:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800176c8:	c3 78       	rjmp	80017736 <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
800176ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800176ce:	5c 98       	brev	r8
800176d0:	f0 08 12 00 	clz	r8,r8
800176d4:	5c 58       	castu.b	r8
800176d6:	2f f8       	sub	r8,-1
800176d8:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800176dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800176e0:	a5 68       	lsl	r8,0x4
800176e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800176e6:	f2 08 00 08 	add	r8,r9,r8
800176ea:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800176ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176f2:	70 08       	ld.w	r8,r8[0x0]
800176f4:	a9 78       	lsl	r8,0x9
800176f6:	e0 28 e0 00 	sub	r8,57344
800176fa:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
800176fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017702:	70 19       	ld.w	r9,r8[0x4]
80017704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017708:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001770c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017710:	70 19       	ld.w	r9,r8[0x4]
80017712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017716:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001771a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001771e:	70 19       	ld.w	r9,r8[0x4]
80017720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017724:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017726:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001772a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001772e:	f2 08 0a 48 	lsr	r8,r9,r8
80017732:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80017736:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001773a:	58 08       	cp.w	r8,0
8001773c:	cc 71       	brne	800176ca <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001773e:	2f cd       	sub	sp,-16
80017740:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017744:	80 01       	ld.sh	r1,r0[0x0]
80017746:	75 1e       	ld.w	lr,r10[0x44]

80017748 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
80017748:	eb cd 40 c0 	pushm	r6-r7,lr
8001774c:	1a 97       	mov	r7,sp
8001774e:	20 1d       	sub	sp,4
80017750:	48 b6       	lddpc	r6,8001777c <LED_Read_Display_Field+0x34>
80017752:	1e 26       	rsub	r6,pc
80017754:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
80017758:	ec f8 00 ec 	ld.w	r8,r6[236]
8001775c:	70 09       	ld.w	r9,r8[0x0]
8001775e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017762:	10 69       	and	r9,r8
80017764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017768:	5c 98       	brev	r8
8001776a:	f0 08 12 00 	clz	r8,r8
8001776e:	f2 08 0a 48 	lsr	r8,r9,r8
}
80017772:	10 9c       	mov	r12,r8
80017774:	2f fd       	sub	sp,-4
80017776:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001777a:	00 00       	add	r0,r0
8001777c:	80 01       	ld.sh	r1,r0[0x0]
8001777e:	75 d6       	ld.w	r6,r10[0x74]

80017780 <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
80017780:	eb cd 40 c0 	pushm	r6-r7,lr
80017784:	1a 97       	mov	r7,sp
80017786:	20 2d       	sub	sp,8
80017788:	48 c6       	lddpc	r6,800177b8 <LED_Display_Field+0x38>
8001778a:	1e 26       	rsub	r6,pc
8001778c:	ef 4c ff fc 	st.w	r7[-4],r12
80017790:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
80017794:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017798:	5c 98       	brev	r8
8001779a:	f0 08 12 00 	clz	r8,r8
8001779e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800177a2:	f2 08 09 48 	lsl	r8,r9,r8
800177a6:	10 9b       	mov	r11,r8
800177a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800177ac:	f0 16 01 7d 	mcall	r6[1524]
}
800177b0:	2f ed       	sub	sp,-8
800177b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177b6:	00 00       	add	r0,r0
800177b8:	80 01       	ld.sh	r1,r0[0x0]
800177ba:	76 0e       	ld.w	lr,r11[0x0]

800177bc <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
800177bc:	eb cd 40 80 	pushm	r7,lr
800177c0:	1a 97       	mov	r7,sp
800177c2:	20 1d       	sub	sp,4
800177c4:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
800177c8:	30 08       	mov	r8,0
}
800177ca:	10 9c       	mov	r12,r8
800177cc:	2f fd       	sub	sp,-4
800177ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800177d2 <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
800177d2:	eb cd 40 80 	pushm	r7,lr
800177d6:	1a 97       	mov	r7,sp
800177d8:	20 2d       	sub	sp,8
800177da:	ef 4c ff fc 	st.w	r7[-4],r12
800177de:	16 98       	mov	r8,r11
800177e0:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
800177e4:	2f ed       	sub	sp,-8
800177e6:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800177ec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800177ec:	eb cd 40 c0 	pushm	r6-r7,lr
800177f0:	1a 97       	mov	r7,sp
800177f2:	20 6d       	sub	sp,24
800177f4:	49 e6       	lddpc	r6,8001786c <interpolate+0x80>
800177f6:	1e 26       	rsub	r6,pc
800177f8:	ef 4c ff f8 	st.w	r7[-8],r12
800177fc:	ef 4b ff f4 	st.w	r7[-12],r11
80017800:	ef 4a ff f0 	st.w	r7[-16],r10
80017804:	ef 49 ff ec 	st.w	r7[-20],r9
80017808:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001780c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017810:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017814:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017818:	c0 41       	brne	80017820 <interpolate+0x34>
	{
		return y1;
8001781a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001781e:	c2 38       	rjmp	80017864 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017820:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017824:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017828:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001782c:	ee fa ff f8 	ld.w	r10,r7[-8]
80017830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017834:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017838:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001783c:	ee fa ff f0 	ld.w	r10,r7[-16]
80017840:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017844:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017848:	12 9b       	mov	r11,r9
8001784a:	10 9c       	mov	r12,r8
8001784c:	f0 16 00 08 	mcall	r6[32]
80017850:	18 98       	mov	r8,r12
80017852:	10 99       	mov	r9,r8
80017854:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017858:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001785c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017860:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017864:	10 9c       	mov	r12,r8
80017866:	2f ad       	sub	sp,-24
80017868:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001786c:	80 01       	ld.sh	r1,r0[0x0]
8001786e:	76 7a       	ld.w	r10,r11[0x1c]

80017870 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80017870:	eb cd 40 c0 	pushm	r6-r7,lr
80017874:	1a 97       	mov	r7,sp
80017876:	48 66       	lddpc	r6,8001788c <init_radar_modules+0x1c>
80017878:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
8001787a:	ec fb 08 a4 	ld.w	r11,r6[2212]
8001787e:	fe 7c 3c 00 	mov	r12,-50176
80017882:	f0 16 00 6b 	mcall	r6[428]
}
80017886:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001788a:	00 00       	add	r0,r0
8001788c:	80 01       	ld.sh	r1,r0[0x0]
8001788e:	76 fc       	ld.w	r12,r11[0x3c]
80017890:	0a 00       	add	r0,r5

80017892 <read_radar>:


void read_radar() {
80017892:	eb cd 40 c0 	pushm	r6-r7,lr
80017896:	1a 97       	mov	r7,sp
80017898:	20 1d       	sub	sp,4
8001789a:	49 f6       	lddpc	r6,80017914 <read_radar+0x82>
8001789c:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
8001789e:	30 08       	mov	r8,0
800178a0:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
800178a4:	ee cb 00 01 	sub	r11,r7,1
800178a8:	30 08       	mov	r8,0
800178aa:	30 19       	mov	r9,1
800178ac:	30 1a       	mov	r10,1
800178ae:	fe 7c 3c 00 	mov	r12,-50176
800178b2:	f0 16 00 39 	mcall	r6[228]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
800178b6:	ec fb 02 50 	ld.w	r11,r6[592]
800178ba:	30 08       	mov	r8,0
800178bc:	30 19       	mov	r9,1
800178be:	30 ca       	mov	r10,12
800178c0:	fe 7c 3c 00 	mov	r12,-50176
800178c4:	f0 16 00 64 	mcall	r6[400]
	
	dbg_print_num(main_target.velocity*100.0,10);
800178c8:	ec f8 02 50 	ld.w	r8,r6[592]
800178cc:	70 08       	ld.w	r8,r8[0x0]
800178ce:	10 9c       	mov	r12,r8
800178d0:	f0 16 00 03 	mcall	r6[12]
800178d4:	30 08       	mov	r8,0
800178d6:	fc 19 40 59 	movh	r9,0x4059
800178da:	f0 16 00 02 	mcall	r6[8]
800178de:	14 98       	mov	r8,r10
800178e0:	16 99       	mov	r9,r11
800178e2:	10 9a       	mov	r10,r8
800178e4:	12 9b       	mov	r11,r9
800178e6:	f0 16 00 14 	mcall	r6[80]
800178ea:	18 98       	mov	r8,r12
800178ec:	30 ab       	mov	r11,10
800178ee:	10 9c       	mov	r12,r8
800178f0:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
800178f4:	ec f8 02 50 	ld.w	r8,r6[592]
800178f8:	70 18       	ld.w	r8,r8[0x4]
800178fa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800178fe:	30 ab       	mov	r11,10
80017900:	10 9c       	mov	r12,r8
80017902:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
80017906:	fe cc 00 76 	sub	r12,pc,118
8001790a:	f0 16 00 01 	mcall	r6[4]
	
}
8001790e:	2f fd       	sub	sp,-4
80017910:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017914:	80 01       	ld.sh	r1,r0[0x0]
80017916:	77 20       	ld.w	r0,r11[0x48]

80017918 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80017918:	eb cd 40 c0 	pushm	r6-r7,lr
8001791c:	1a 97       	mov	r7,sp
8001791e:	48 46       	lddpc	r6,8001792c <get_radar_main_target+0x14>
80017920:	1e 26       	rsub	r6,pc
	return &main_target;
80017922:	ec f8 02 50 	ld.w	r8,r6[592]
	
}
80017926:	10 9c       	mov	r12,r8
80017928:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001792c:	80 01       	ld.sh	r1,r0[0x0]
8001792e:	77 a4       	ld.w	r4,r11[0x68]

80017930 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80017930:	eb cd 40 c0 	pushm	r6-r7,lr
80017934:	1a 97       	mov	r7,sp
80017936:	20 1d       	sub	sp,4
80017938:	4c b6       	lddpc	r6,80017a64 <init_Servos+0x134>
8001793a:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001793c:	fe 78 4c 00 	mov	r8,-46080
80017940:	e0 69 4d 04 	mov	r9,19716
80017944:	ea 19 50 57 	orh	r9,0x5057
80017948:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001794c:	fe 78 4c 00 	mov	r8,-46080
80017950:	e0 69 4d 08 	mov	r9,19720
80017954:	ea 19 50 57 	orh	r9,0x5057
80017958:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001795c:	fe 78 4c 00 	mov	r8,-46080
80017960:	e0 69 4d 10 	mov	r9,19728
80017964:	ea 19 50 57 	orh	r9,0x5057
80017968:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001796c:	fe 78 4c 00 	mov	r8,-46080
80017970:	e0 69 4d 20 	mov	r9,19744
80017974:	ea 19 50 57 	orh	r9,0x5057
80017978:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
8001797c:	fe 78 4c 00 	mov	r8,-46080
80017980:	e0 69 06 01 	mov	r9,1537
80017984:	ea 19 06 01 	orh	r9,0x601
80017988:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
8001798a:	fe 78 4c 00 	mov	r8,-46080
8001798e:	30 fa       	mov	r10,15
80017990:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017994:	f4 09 09 4a 	lsl	r10,r10,r9
80017998:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001799c:	2f 09       	sub	r9,-16
8001799e:	30 fb       	mov	r11,15
800179a0:	f6 09 09 49 	lsl	r9,r11,r9
800179a4:	f5 e9 10 09 	or	r9,r10,r9
800179a8:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
800179ac:	fe 78 4c 00 	mov	r8,-46080
800179b0:	30 fa       	mov	r10,15
800179b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179b6:	f4 09 09 4a 	lsl	r10,r10,r9
800179ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179be:	2f 09       	sub	r9,-16
800179c0:	30 fb       	mov	r11,15
800179c2:	f6 09 09 49 	lsl	r9,r11,r9
800179c6:	f5 e9 10 09 	or	r9,r10,r9
800179ca:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
800179ce:	30 08       	mov	r8,0
800179d0:	ef 48 ff fc 	st.w	r7[-4],r8
800179d4:	c3 78       	rjmp	80017a42 <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
800179d6:	fe 79 4c 00 	mov	r9,-46080
800179da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179de:	2f 08       	sub	r8,-16
800179e0:	a5 78       	lsl	r8,0x5
800179e2:	f2 08 00 08 	add	r8,r9,r8
800179e6:	e0 79 00 0b 	mov	r9,65547
800179ea:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
800179ec:	fe 79 4c 00 	mov	r9,-46080
800179f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179f4:	a5 78       	lsl	r8,0x5
800179f6:	f2 08 00 08 	add	r8,r9,r8
800179fa:	f0 c8 fd f4 	sub	r8,r8,-524
800179fe:	e0 69 27 10 	mov	r9,10000
80017a02:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
80017a04:	fe 79 4c 00 	mov	r9,-46080
80017a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a0c:	a5 78       	lsl	r8,0x5
80017a0e:	f2 08 00 08 	add	r8,r9,r8
80017a12:	f0 c8 fd fc 	sub	r8,r8,-516
80017a16:	e0 69 0f a0 	mov	r9,4000
80017a1a:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
80017a1c:	fe 79 4c 00 	mov	r9,-46080
80017a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a24:	a5 78       	lsl	r8,0x5
80017a26:	f2 08 00 08 	add	r8,r9,r8
80017a2a:	f0 c8 fd e8 	sub	r8,r8,-536
80017a2e:	e0 69 03 e8 	mov	r9,1000
80017a32:	ea 19 03 e8 	orh	r9,0x3e8
80017a36:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a3c:	2f f8       	sub	r8,-1
80017a3e:	ef 48 ff fc 	st.w	r7[-4],r8
80017a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a46:	58 38       	cp.w	r8,3
80017a48:	fe 9a ff c7 	brle	800179d6 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
80017a4c:	30 6b       	mov	r11,6
80017a4e:	ec fc 08 a0 	ld.w	r12,r6[2208]
80017a52:	f0 16 00 8d 	mcall	r6[564]
	// enable
	AVR32_PWM.ena=0b1111;
80017a56:	fe 78 4c 00 	mov	r8,-46080
80017a5a:	30 f9       	mov	r9,15
80017a5c:	91 19       	st.w	r8[0x4],r9
	
	
}
80017a5e:	2f fd       	sub	sp,-4
80017a60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a64:	80 01       	ld.sh	r1,r0[0x0]
80017a66:	77 be       	ld.w	lr,r11[0x6c]

80017a68 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017a68:	eb cd 40 80 	pushm	r7,lr
80017a6c:	1a 97       	mov	r7,sp
80017a6e:	20 6d       	sub	sp,24
80017a70:	ef 4c ff f0 	st.w	r7[-16],r12
80017a74:	ef 4b ff ec 	st.w	r7[-20],r11
80017a78:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
80017a7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017a80:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a84:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017a88:	ee f8 ff e8 	ld.w	r8,r7[-24]
80017a8c:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a90:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017a94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a98:	e0 69 13 88 	mov	r9,5000
80017a9c:	10 19       	sub	r9,r8
80017a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017aa2:	f2 08 01 08 	sub	r8,r9,r8
80017aa6:	f0 09 16 1f 	lsr	r9,r8,0x1f
80017aaa:	f2 08 00 08 	add	r8,r9,r8
80017aae:	a1 58       	asr	r8,0x1
80017ab0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
80017ab4:	fe 79 4c 00 	mov	r9,-46080
80017ab8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017abc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ac0:	a5 78       	lsl	r8,0x5
80017ac2:	f2 08 00 08 	add	r8,r9,r8
80017ac6:	f0 c8 fd f0 	sub	r8,r8,-528
80017aca:	e0 69 13 88 	mov	r9,5000
80017ace:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
80017ad0:	fe 7a 4c 00 	mov	r10,-46080
80017ad4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ad8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017adc:	ee fb ff f4 	ld.w	r11,r7[-12]
80017ae0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ae4:	f6 09 00 09 	add	r9,r11,r9
80017ae8:	a5 78       	lsl	r8,0x5
80017aea:	f4 08 00 08 	add	r8,r10,r8
80017aee:	f0 c8 fd f8 	sub	r8,r8,-520
80017af2:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
80017af4:	fe 7a 4c 00 	mov	r10,-46080
80017af8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017afc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017b00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017b04:	f2 0b 15 10 	lsl	r11,r9,0x10
80017b08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017b0c:	f7 e9 10 09 	or	r9,r11,r9
80017b10:	a5 78       	lsl	r8,0x5
80017b12:	f4 08 00 08 	add	r8,r10,r8
80017b16:	f0 c8 fd e4 	sub	r8,r8,-540
80017b1a:	91 09       	st.w	r8[0x0],r9
}
80017b1c:	2f ad       	sub	sp,-24
80017b1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017b22 <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017b22:	eb cd 40 c0 	pushm	r6-r7,lr
80017b26:	1a 97       	mov	r7,sp
80017b28:	20 1d       	sub	sp,4
80017b2a:	49 76       	lddpc	r6,80017b84 <set_servos+0x62>
80017b2c:	1e 26       	rsub	r6,pc
80017b2e:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017b32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b36:	2f 08       	sub	r8,-16
80017b38:	70 09       	ld.w	r9,r8[0x0]
80017b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b3e:	70 08       	ld.w	r8,r8[0x0]
80017b40:	12 9a       	mov	r10,r9
80017b42:	10 9b       	mov	r11,r8
80017b44:	30 1c       	mov	r12,1
80017b46:	f0 16 00 bc 	mcall	r6[752]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80017b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b4e:	2d 08       	sub	r8,-48
80017b50:	70 09       	ld.w	r9,r8[0x0]
80017b52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b56:	2e 08       	sub	r8,-32
80017b58:	70 08       	ld.w	r8,r8[0x0]
80017b5a:	12 9a       	mov	r10,r9
80017b5c:	10 9b       	mov	r11,r8
80017b5e:	30 2c       	mov	r12,2
80017b60:	f0 16 00 bc 	mcall	r6[752]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017b64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b68:	2b 08       	sub	r8,-80
80017b6a:	70 09       	ld.w	r9,r8[0x0]
80017b6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b70:	2c 08       	sub	r8,-64
80017b72:	70 08       	ld.w	r8,r8[0x0]
80017b74:	12 9a       	mov	r10,r9
80017b76:	10 9b       	mov	r11,r8
80017b78:	30 3c       	mov	r12,3
80017b7a:	f0 16 00 bc 	mcall	r6[752]
	#endif
	
}
80017b7e:	2f fd       	sub	sp,-4
80017b80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b84:	80 01       	ld.sh	r1,r0[0x0]
80017b86:	79 b0       	ld.w	r0,r12[0x6c]

80017b88 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017b88:	eb cd 40 c0 	pushm	r6-r7,lr
80017b8c:	1a 97       	mov	r7,sp
80017b8e:	20 6d       	sub	sp,24
80017b90:	49 e6       	lddpc	r6,80017c08 <interpolate+0x80>
80017b92:	1e 26       	rsub	r6,pc
80017b94:	ef 4c ff f8 	st.w	r7[-8],r12
80017b98:	ef 4b ff f4 	st.w	r7[-12],r11
80017b9c:	ef 4a ff f0 	st.w	r7[-16],r10
80017ba0:	ef 49 ff ec 	st.w	r7[-20],r9
80017ba4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017ba8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017bac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017bb0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017bb4:	c0 41       	brne	80017bbc <interpolate+0x34>
	{
		return y1;
80017bb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017bba:	c2 38       	rjmp	80017c00 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017bbc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017bc0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017bc4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017bc8:	ee fa ff f8 	ld.w	r10,r7[-8]
80017bcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017bd0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017bd4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017bd8:	ee fa ff f0 	ld.w	r10,r7[-16]
80017bdc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017be0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017be4:	12 9b       	mov	r11,r9
80017be6:	10 9c       	mov	r12,r8
80017be8:	f0 16 00 08 	mcall	r6[32]
80017bec:	18 98       	mov	r8,r12
80017bee:	10 99       	mov	r9,r8
80017bf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017bf4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017bf8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017c00:	10 9c       	mov	r12,r8
80017c02:	2f ad       	sub	sp,-24
80017c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c08:	80 01       	ld.sh	r1,r0[0x0]
80017c0a:	7a 16       	ld.w	r6,sp[0x4]

80017c0c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017c0c:	eb cd 40 80 	pushm	r7,lr
80017c10:	1a 97       	mov	r7,sp
80017c12:	20 1d       	sub	sp,4
80017c14:	18 98       	mov	r8,r12
80017c16:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017c1a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017c1e:	58 38       	cp.w	r8,3
80017c20:	c1 20       	breq	80017c44 <osc_get_rate+0x38>
80017c22:	e0 89 00 07 	brgt	80017c30 <osc_get_rate+0x24>
80017c26:	58 08       	cp.w	r8,0
80017c28:	c0 90       	breq	80017c3a <osc_get_rate+0x2e>
80017c2a:	58 28       	cp.w	r8,2
80017c2c:	c0 f0       	breq	80017c4a <osc_get_rate+0x3e>
80017c2e:	c1 b8       	rjmp	80017c64 <osc_get_rate+0x58>
80017c30:	58 48       	cp.w	r8,4
80017c32:	c1 10       	breq	80017c54 <osc_get_rate+0x48>
80017c34:	58 58       	cp.w	r8,5
80017c36:	c1 40       	breq	80017c5e <osc_get_rate+0x52>
80017c38:	c1 68       	rjmp	80017c64 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80017c3a:	e0 68 24 00 	mov	r8,9216
80017c3e:	ea 18 00 f4 	orh	r8,0xf4
80017c42:	c1 28       	rjmp	80017c66 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80017c44:	e0 68 80 00 	mov	r8,32768
80017c48:	c0 f8       	rjmp	80017c66 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80017c4a:	e0 68 12 00 	mov	r8,4608
80017c4e:	ea 18 00 7a 	orh	r8,0x7a
80017c52:	c0 a8       	rjmp	80017c66 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80017c54:	e0 68 0e 00 	mov	r8,3584
80017c58:	ea 18 07 27 	orh	r8,0x727
80017c5c:	c0 58       	rjmp	80017c66 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80017c5e:	e0 78 c1 38 	mov	r8,115000
80017c62:	c0 28       	rjmp	80017c66 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80017c64:	30 08       	mov	r8,0
	}
}
80017c66:	10 9c       	mov	r12,r8
80017c68:	2f fd       	sub	sp,-4
80017c6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80017c6e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80017c6e:	eb cd 40 c0 	pushm	r6-r7,lr
80017c72:	1a 97       	mov	r7,sp
80017c74:	48 56       	lddpc	r6,80017c88 <sysclk_get_main_hz+0x1a>
80017c76:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80017c78:	30 0c       	mov	r12,0
80017c7a:	cc 9f       	rcall	80017c0c <osc_get_rate>
80017c7c:	18 98       	mov	r8,r12
80017c7e:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80017c80:	10 9c       	mov	r12,r8
80017c82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c86:	00 00       	add	r0,r0
80017c88:	80 01       	ld.sh	r1,r0[0x0]
80017c8a:	7a fa       	ld.w	r10,sp[0x3c]

80017c8c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80017c8c:	eb cd 40 c0 	pushm	r6-r7,lr
80017c90:	1a 97       	mov	r7,sp
80017c92:	48 46       	lddpc	r6,80017ca0 <sysclk_get_cpu_hz+0x14>
80017c94:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80017c96:	ce cf       	rcall	80017c6e <sysclk_get_main_hz>
80017c98:	18 98       	mov	r8,r12
}
80017c9a:	10 9c       	mov	r12,r8
80017c9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ca0:	80 01       	ld.sh	r1,r0[0x0]
80017ca2:	7b 18       	ld.w	r8,sp[0x44]

80017ca4 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80017ca4:	eb cd 40 c0 	pushm	r6-r7,lr
80017ca8:	1a 97       	mov	r7,sp
80017caa:	20 3d       	sub	sp,12
80017cac:	4c 36       	lddpc	r6,80017db8 <spectrum_handler+0x114>
80017cae:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
80017cb0:	f0 16 00 4b 	mcall	r6[300]
80017cb4:	18 98       	mov	r8,r12
80017cb6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80017cba:	fc 78 14 00 	mov	r8,-191488
80017cbe:	70 58       	ld.w	r8,r8[0x14]
80017cc0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017cc4:	5c 58       	castu.b	r8
80017cc6:	c7 50       	breq	80017db0 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80017cc8:	ec f8 00 74 	ld.w	r8,r6[116]
80017ccc:	f0 f8 01 2c 	ld.w	r8,r8[300]
80017cd0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017cd4:	10 19       	sub	r9,r8
80017cd6:	ec f8 00 74 	ld.w	r8,r6[116]
80017cda:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
80017cde:	ec f8 00 74 	ld.w	r8,r6[116]
80017ce2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ce6:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80017cea:	ec f8 00 74 	ld.w	r8,r6[116]
80017cee:	f0 f8 01 30 	ld.w	r8,r8[304]
80017cf2:	e0 48 09 c4 	cp.w	r8,2500
80017cf6:	e0 88 00 06 	brls	80017d02 <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80017cfa:	ec fc 00 74 	ld.w	r12,r6[116]
80017cfe:	f0 16 01 fb 	mcall	r6[2028]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
80017d02:	fc 78 14 00 	mov	r8,-191488
80017d06:	70 68       	ld.w	r8,r8[0x18]
80017d08:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80017d0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017d10:	10 9b       	mov	r11,r8
80017d12:	ec fc 00 74 	ld.w	r12,r6[116]
80017d16:	f0 16 00 4f 	mcall	r6[316]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80017d1a:	ec fc 00 74 	ld.w	r12,r6[116]
80017d1e:	f0 16 00 2c 	mcall	r6[176]
80017d22:	18 98       	mov	r8,r12
80017d24:	59 08       	cp.w	r8,16
80017d26:	c4 51       	brne	80017db0 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017d28:	30 08       	mov	r8,0
80017d2a:	ef 68 ff f9 	st.b	r7[-7],r8
80017d2e:	c3 a8       	rjmp	80017da2 <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80017d30:	ec fc 00 74 	ld.w	r12,r6[116]
80017d34:	f0 16 00 42 	mcall	r6[264]
80017d38:	18 98       	mov	r8,r12
80017d3a:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
80017d3e:	ec fc 00 74 	ld.w	r12,r6[116]
80017d42:	f0 16 00 42 	mcall	r6[264]
80017d46:	18 98       	mov	r8,r12
80017d48:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
80017d4c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017d50:	a9 68       	lsl	r8,0x8
80017d52:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80017d56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017d5a:	f2 08 00 08 	add	r8,r9,r8
80017d5e:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80017d62:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017d66:	e2 18 00 3c 	andl	r8,0x3c,COH
80017d6a:	f0 0a 14 02 	asr	r10,r8,0x2
80017d6e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017d72:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80017d76:	ec f9 00 74 	ld.w	r9,r6[116]
80017d7a:	f4 ca ff 7e 	sub	r10,r10,-130
80017d7e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80017d82:	ec f9 00 74 	ld.w	r9,r6[116]
80017d86:	30 18       	mov	r8,1
80017d88:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80017d8c:	ec f8 00 74 	ld.w	r8,r6[116]
80017d90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017d94:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017d98:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80017d9c:	2f f8       	sub	r8,-1
80017d9e:	ef 68 ff f9 	st.b	r7[-7],r8
80017da2:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80017da6:	30 78       	mov	r8,7
80017da8:	f0 09 18 00 	cp.b	r9,r8
80017dac:	fe 98 ff c2 	brls	80017d30 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
80017db0:	2f dd       	sub	sp,-12
80017db2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017db6:	d6 03       	rete
80017db8:	80 01       	ld.sh	r1,r0[0x0]
80017dba:	7b 32       	ld.w	r2,sp[0x4c]

80017dbc <rc_init>:

void rc_init (void) {
80017dbc:	eb cd 40 c0 	pushm	r6-r7,lr
80017dc0:	1a 97       	mov	r7,sp
80017dc2:	20 1d       	sub	sp,4
80017dc4:	4a 96       	lddpc	r6,80017e68 <rc_init+0xac>
80017dc6:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017dc8:	30 08       	mov	r8,0
80017dca:	ef 48 ff fc 	st.w	r7[-4],r8
80017dce:	c2 18       	rjmp	80017e10 <rc_init+0x54>
		spRec1.channels[i]=500;
80017dd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017dd4:	ec f9 00 74 	ld.w	r9,r6[116]
80017dd8:	f0 ca ff 7e 	sub	r10,r8,-130
80017ddc:	e0 68 01 f4 	mov	r8,500
80017de0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80017de4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017de8:	ec f9 01 5c 	ld.w	r9,r6[348]
80017dec:	f0 ca ff 7e 	sub	r10,r8,-130
80017df0:	e0 68 01 f4 	mov	r8,500
80017df4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80017df8:	ee fa ff fc 	ld.w	r10,r7[-4]
80017dfc:	ec f9 02 a8 	ld.w	r9,r6[680]
80017e00:	30 08       	mov	r8,0
80017e02:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017e06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e0a:	2f f8       	sub	r8,-1
80017e0c:	ef 48 ff fc 	st.w	r7[-4],r8
80017e10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e14:	58 f8       	cp.w	r8,15
80017e16:	fe 9a ff dd 	brle	80017dd0 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80017e1a:	ec f9 00 74 	ld.w	r9,r6[116]
80017e1e:	30 08       	mov	r8,0
80017e20:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80017e24:	ec f9 01 5c 	ld.w	r9,r6[348]
80017e28:	30 08       	mov	r8,0
80017e2a:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
80017e2e:	30 2b       	mov	r11,2
80017e30:	ec fc 08 9c 	ld.w	r12,r6[2204]
80017e34:	f0 16 00 8d 	mcall	r6[564]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
80017e38:	c2 af       	rcall	80017c8c <sysclk_get_cpu_hz>
80017e3a:	18 98       	mov	r8,r12
80017e3c:	10 9a       	mov	r10,r8
80017e3e:	ec fb 08 98 	ld.w	r11,r6[2200]
80017e42:	fc 7c 14 00 	mov	r12,-191488
80017e46:	f0 16 00 62 	mcall	r6[392]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
80017e4a:	30 1a       	mov	r10,1
80017e4c:	e0 6b 02 80 	mov	r11,640
80017e50:	fe cc 01 ac 	sub	r12,pc,428
80017e54:	f0 16 00 38 	mcall	r6[224]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
80017e58:	fc 78 14 00 	mov	r8,-191488
80017e5c:	30 19       	mov	r9,1
80017e5e:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
80017e60:	2f fd       	sub	sp,-4
80017e62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e66:	00 00       	add	r0,r0
80017e68:	80 01       	ld.sh	r1,r0[0x0]
80017e6a:	7c 4a       	ld.w	r10,lr[0x10]

80017e6c <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
80017e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80017e70:	1a 97       	mov	r7,sp
80017e72:	20 1d       	sub	sp,4
80017e74:	48 b6       	lddpc	r6,80017ea0 <rc_get_channel+0x34>
80017e76:	1e 26       	rsub	r6,pc
80017e78:	18 98       	mov	r8,r12
80017e7a:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
80017e7e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80017e82:	ec f8 00 74 	ld.w	r8,r6[116]
80017e86:	f2 c9 ff 7e 	sub	r9,r9,-130
80017e8a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80017e8e:	f0 c8 01 f4 	sub	r8,r8,500
80017e92:	5c 88       	casts.h	r8
80017e94:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80017e96:	10 9c       	mov	r12,r8
80017e98:	2f fd       	sub	sp,-4
80017e9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e9e:	00 00       	add	r0,r0
80017ea0:	80 01       	ld.sh	r1,r0[0x0]
80017ea2:	7c fa       	ld.w	r10,lr[0x3c]

80017ea4 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80017ea4:	eb cd 40 e0 	pushm	r5-r7,lr
80017ea8:	1a 97       	mov	r7,sp
80017eaa:	20 2d       	sub	sp,8
80017eac:	4a 36       	lddpc	r6,80017f38 <rc_get_channel_neutral+0x94>
80017eae:	1e 26       	rsub	r6,pc
80017eb0:	18 98       	mov	r8,r12
80017eb2:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80017eb6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017eba:	10 9c       	mov	r12,r8
80017ebc:	f0 16 00 23 	mcall	r6[140]
80017ec0:	18 98       	mov	r8,r12
80017ec2:	10 99       	mov	r9,r8
80017ec4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017ec8:	ec f8 02 a8 	ld.w	r8,r6[680]
80017ecc:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80017ed0:	f2 08 01 08 	sub	r8,r9,r8
80017ed4:	5c 88       	casts.h	r8
80017ed6:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80017eda:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017ede:	10 9c       	mov	r12,r8
80017ee0:	f0 16 00 1a 	mcall	r6[104]
80017ee4:	14 98       	mov	r8,r10
80017ee6:	16 99       	mov	r9,r11
80017ee8:	30 05       	mov	r5,0
80017eea:	30 0a       	mov	r10,0
80017eec:	fc 1b c0 3e 	movh	r11,0xc03e
80017ef0:	f0 16 00 20 	mcall	r6[128]
80017ef4:	18 98       	mov	r8,r12
80017ef6:	58 08       	cp.w	r8,0
80017ef8:	c0 20       	breq	80017efc <rc_get_channel_neutral+0x58>
80017efa:	30 15       	mov	r5,1
80017efc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017f00:	c1 60       	breq	80017f2c <rc_get_channel_neutral+0x88>
80017f02:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017f06:	10 9c       	mov	r12,r8
80017f08:	f0 16 00 1a 	mcall	r6[104]
80017f0c:	30 05       	mov	r5,0
80017f0e:	30 08       	mov	r8,0
80017f10:	fc 19 40 3e 	movh	r9,0x403e
80017f14:	f0 16 00 20 	mcall	r6[128]
80017f18:	18 98       	mov	r8,r12
80017f1a:	58 08       	cp.w	r8,0
80017f1c:	c0 20       	breq	80017f20 <rc_get_channel_neutral+0x7c>
80017f1e:	30 15       	mov	r5,1
80017f20:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017f24:	c0 40       	breq	80017f2c <rc_get_channel_neutral+0x88>
80017f26:	30 08       	mov	r8,0
80017f28:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
80017f2c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80017f30:	10 9c       	mov	r12,r8
80017f32:	2f ed       	sub	sp,-8
80017f34:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017f38:	80 01       	ld.sh	r1,r0[0x0]
80017f3a:	7d 32       	ld.w	r2,lr[0x4c]

80017f3c <rc_center_channel>:

void rc_center_channel(uint8_t index){
80017f3c:	eb cd 40 e0 	pushm	r5-r7,lr
80017f40:	1a 97       	mov	r7,sp
80017f42:	20 1d       	sub	sp,4
80017f44:	48 a6       	lddpc	r6,80017f6c <rc_center_channel+0x30>
80017f46:	1e 26       	rsub	r6,pc
80017f48:	18 98       	mov	r8,r12
80017f4a:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
80017f4e:	ef 35 ff fc 	ld.ub	r5,r7[-4]
80017f52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017f56:	10 9c       	mov	r12,r8
80017f58:	f0 16 00 23 	mcall	r6[140]
80017f5c:	18 98       	mov	r8,r12
80017f5e:	ec f9 02 a8 	ld.w	r9,r6[680]
80017f62:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
80017f66:	2f fd       	sub	sp,-4
80017f68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017f6c:	80 01       	ld.sh	r1,r0[0x0]
80017f6e:	7d ca       	ld.w	r10,lr[0x70]

80017f70 <checkReceiver1>:

int8_t checkReceiver1() {
80017f70:	eb cd 40 c0 	pushm	r6-r7,lr
80017f74:	1a 97       	mov	r7,sp
80017f76:	20 3d       	sub	sp,12
80017f78:	4b 56       	lddpc	r6,8001804c <checkReceiver1+0xdc>
80017f7a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
80017f7c:	f0 16 00 4b 	mcall	r6[300]
80017f80:	18 98       	mov	r8,r12
80017f82:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80017f86:	ec f8 00 74 	ld.w	r8,r6[116]
80017f8a:	f0 f8 01 24 	ld.w	r8,r8[292]
80017f8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017f92:	10 19       	sub	r9,r8
80017f94:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80017f98:	ec f8 00 74 	ld.w	r8,r6[116]
80017f9c:	f1 38 01 28 	ld.ub	r8,r8[296]
80017fa0:	58 08       	cp.w	r8,0
80017fa2:	c0 41       	brne	80017faa <checkReceiver1+0x3a>
80017fa4:	e0 68 00 fe 	mov	r8,254
80017fa8:	c4 d8       	rjmp	80018042 <checkReceiver1+0xd2>
	if (duration<100000) {
80017faa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fae:	e0 58 86 9f 	cp.w	r8,99999
80017fb2:	e0 8b 00 04 	brhi	80017fba <checkReceiver1+0x4a>
		return 1;
80017fb6:	30 18       	mov	r8,1
80017fb8:	c4 58       	rjmp	80018042 <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80017fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fbe:	e0 69 e3 5f 	mov	r9,58207
80017fc2:	ea 19 00 16 	orh	r9,0x16
80017fc6:	12 38       	cp.w	r8,r9
80017fc8:	e0 8b 00 17 	brhi	80017ff6 <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80017fcc:	ec f9 00 74 	ld.w	r9,r6[116]
80017fd0:	e0 68 01 f4 	mov	r8,500
80017fd4:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80017fd8:	ec f9 00 74 	ld.w	r9,r6[116]
80017fdc:	e0 68 01 f4 	mov	r8,500
80017fe0:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80017fe4:	ec f9 00 74 	ld.w	r9,r6[116]
80017fe8:	e0 68 01 f4 	mov	r8,500
80017fec:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
80017ff0:	e0 68 00 ff 	mov	r8,255
80017ff4:	c2 78       	rjmp	80018042 <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80017ff6:	ec f9 00 74 	ld.w	r9,r6[116]
80017ffa:	30 08       	mov	r8,0
80017ffc:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80018000:	30 18       	mov	r8,1
80018002:	ef 68 ff f7 	st.b	r7[-9],r8
80018006:	c1 08       	rjmp	80018026 <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80018008:	ef 28 ff f7 	ld.sb	r8,r7[-9]
8001800c:	ec f9 00 74 	ld.w	r9,r6[116]
80018010:	f0 ca ff 7e 	sub	r10,r8,-130
80018014:	e0 68 01 f4 	mov	r8,500
80018018:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
8001801c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018020:	2f f8       	sub	r8,-1
80018022:	ef 68 ff f7 	st.b	r7[-9],r8
80018026:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001802a:	30 78       	mov	r8,7
8001802c:	f0 09 18 00 	cp.b	r9,r8
80018030:	fe 9a ff ec 	brle	80018008 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
80018034:	ec f9 00 74 	ld.w	r9,r6[116]
80018038:	30 08       	mov	r8,0
8001803a:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001803e:	e0 68 00 fe 	mov	r8,254

	}

}
80018042:	10 9c       	mov	r12,r8
80018044:	2f dd       	sub	sp,-12
80018046:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001804a:	00 00       	add	r0,r0
8001804c:	80 01       	ld.sh	r1,r0[0x0]
8001804e:	7d fe       	ld.w	lr,lr[0x7c]

80018050 <checkReceiver2>:

int8_t checkReceiver2(){
80018050:	eb cd 40 c0 	pushm	r6-r7,lr
80018054:	1a 97       	mov	r7,sp
80018056:	20 3d       	sub	sp,12
80018058:	4a 96       	lddpc	r6,800180fc <checkReceiver2+0xac>
8001805a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
8001805c:	30 08       	mov	r8,0
8001805e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
80018062:	ec f8 01 5c 	ld.w	r8,r6[348]
80018066:	f0 f8 01 24 	ld.w	r8,r8[292]
8001806a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001806e:	10 19       	sub	r9,r8
80018070:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
80018074:	ec f8 01 5c 	ld.w	r8,r6[348]
80018078:	f1 38 01 28 	ld.ub	r8,r8[296]
8001807c:	58 08       	cp.w	r8,0
8001807e:	c0 41       	brne	80018086 <checkReceiver2+0x36>
80018080:	e0 68 00 fe 	mov	r8,254
80018084:	c3 88       	rjmp	800180f4 <checkReceiver2+0xa4>
	if (duration < 200000) {
80018086:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001808a:	e2 58 0d 3f 	cp.w	r8,199999
8001808e:	e0 8b 00 04 	brhi	80018096 <checkReceiver2+0x46>
		return 1;
80018092:	30 18       	mov	r8,1
80018094:	c3 08       	rjmp	800180f4 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80018096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001809a:	e6 58 a1 1f 	cp.w	r8,499999
8001809e:	e0 8b 00 05 	brhi	800180a8 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
800180a2:	e0 68 00 ff 	mov	r8,255
800180a6:	c2 78       	rjmp	800180f4 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
800180a8:	ec f9 01 5c 	ld.w	r9,r6[348]
800180ac:	30 08       	mov	r8,0
800180ae:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
800180b2:	30 18       	mov	r8,1
800180b4:	ef 68 ff f7 	st.b	r7[-9],r8
800180b8:	c1 08       	rjmp	800180d8 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
800180ba:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800180be:	ec f9 01 5c 	ld.w	r9,r6[348]
800180c2:	f0 ca ff 7e 	sub	r10,r8,-130
800180c6:	e0 68 01 f4 	mov	r8,500
800180ca:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
800180ce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800180d2:	2f f8       	sub	r8,-1
800180d4:	ef 68 ff f7 	st.b	r7[-9],r8
800180d8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800180dc:	30 78       	mov	r8,7
800180de:	f0 09 18 00 	cp.b	r9,r8
800180e2:	fe 9a ff ec 	brle	800180ba <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
800180e6:	ec f9 01 5c 	ld.w	r9,r6[348]
800180ea:	30 08       	mov	r8,0
800180ec:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
800180f0:	e0 68 00 fe 	mov	r8,254

	}

}
800180f4:	10 9c       	mov	r12,r8
800180f6:	2f dd       	sub	sp,-12
800180f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800180fc:	80 01       	ld.sh	r1,r0[0x0]
800180fe:	7e de       	ld.w	lr,pc[0x34]

80018100 <rc_check_receivers>:

int8_t rc_check_receivers() {
80018100:	eb cd 40 c0 	pushm	r6-r7,lr
80018104:	1a 97       	mov	r7,sp
80018106:	48 66       	lddpc	r6,8001811c <rc_check_receivers+0x1c>
80018108:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
8001810a:	f0 16 01 90 	mcall	r6[1600]
8001810e:	18 98       	mov	r8,r12
80018110:	5c 58       	castu.b	r8
80018112:	5c 58       	castu.b	r8
}
80018114:	10 9c       	mov	r12,r8
80018116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001811a:	00 00       	add	r0,r0
8001811c:	80 01       	ld.sh	r1,r0[0x0]
8001811e:	7f 8c       	ld.w	r12,pc[0x60]

80018120 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80018120:	eb cd 40 c0 	pushm	r6-r7,lr
80018124:	1a 97       	mov	r7,sp
80018126:	20 1d       	sub	sp,4
80018128:	48 66       	lddpc	r6,80018140 <sysclk_enable_pba_module+0x20>
8001812a:	1e 26       	rsub	r6,pc
8001812c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80018130:	ee fb ff fc 	ld.w	r11,r7[-4]
80018134:	30 2c       	mov	r12,2
80018136:	f0 16 01 eb 	mcall	r6[1964]
}
8001813a:	2f fd       	sub	sp,-4
8001813c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018140:	80 01       	ld.sh	r1,r0[0x0]
80018142:	7f ae       	ld.w	lr,pc[0x68]

80018144 <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
80018144:	eb cd 40 80 	pushm	r7,lr
80018148:	1a 97       	mov	r7,sp
8001814a:	20 1d       	sub	sp,4
8001814c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80018150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018154:	e0 69 00 80 	mov	r9,128
80018158:	91 09       	st.w	r8[0x0],r9
}
8001815a:	2f fd       	sub	sp,-4
8001815c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018160 <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
80018160:	eb cd 40 80 	pushm	r7,lr
80018164:	1a 97       	mov	r7,sp
80018166:	20 1d       	sub	sp,4
80018168:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
8001816c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018170:	72 18       	ld.w	r8,r9[0x4]
80018172:	30 1a       	mov	r10,1
80018174:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
80018178:	93 18       	st.w	r9[0x4],r8
}
8001817a:	2f fd       	sub	sp,-4
8001817c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018180 <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
80018180:	eb cd 40 80 	pushm	r7,lr
80018184:	1a 97       	mov	r7,sp
80018186:	20 1d       	sub	sp,4
80018188:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
8001818c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018190:	72 18       	ld.w	r8,r9[0x4]
80018192:	30 1a       	mov	r10,1
80018194:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80018198:	93 18       	st.w	r9[0x4],r8
}
8001819a:	2f fd       	sub	sp,-4
8001819c:	e3 cd 80 80 	ldm	sp++,r7,pc

800181a0 <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
800181a0:	eb cd 40 80 	pushm	r7,lr
800181a4:	1a 97       	mov	r7,sp
800181a6:	20 1d       	sub	sp,4
800181a8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
800181ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800181b0:	72 18       	ld.w	r8,r9[0x4]
800181b2:	30 0a       	mov	r10,0
800181b4:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800181b8:	93 18       	st.w	r9[0x4],r8
}
800181ba:	2f fd       	sub	sp,-4
800181bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800181c0 <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
800181c0:	eb cd 40 80 	pushm	r7,lr
800181c4:	1a 97       	mov	r7,sp
800181c6:	20 1d       	sub	sp,4
800181c8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
800181cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800181d0:	72 18       	ld.w	r8,r9[0x4]
800181d2:	30 0a       	mov	r10,0
800181d4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
800181d8:	93 18       	st.w	r9[0x4],r8
}
800181da:	2f fd       	sub	sp,-4
800181dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800181e0 <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
800181e0:	eb cd 40 80 	pushm	r7,lr
800181e4:	1a 97       	mov	r7,sp
800181e6:	20 2d       	sub	sp,8
800181e8:	ef 4c ff fc 	st.w	r7[-4],r12
800181ec:	16 98       	mov	r8,r11
800181ee:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
800181f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800181f6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800181fa:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800181fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018202:	72 18       	ld.w	r8,r9[0x4]
80018204:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80018208:	93 18       	st.w	r9[0x4],r8
}
8001820a:	2f ed       	sub	sp,-8
8001820c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018210 <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
80018210:	eb cd 40 80 	pushm	r7,lr
80018214:	1a 97       	mov	r7,sp
80018216:	20 1d       	sub	sp,4
80018218:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
8001821c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018220:	72 18       	ld.w	r8,r9[0x4]
80018222:	30 0a       	mov	r10,0
80018224:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80018228:	93 18       	st.w	r9[0x4],r8
}
8001822a:	2f fd       	sub	sp,-4
8001822c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018230 <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
80018230:	eb cd 40 80 	pushm	r7,lr
80018234:	1a 97       	mov	r7,sp
80018236:	20 2d       	sub	sp,8
80018238:	ef 4c ff fc 	st.w	r7[-4],r12
8001823c:	16 98       	mov	r8,r11
8001823e:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
80018242:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018246:	72 18       	ld.w	r8,r9[0x4]
80018248:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8001824c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80018250:	93 18       	st.w	r9[0x4],r8
}
80018252:	2f ed       	sub	sp,-8
80018254:	e3 cd 80 80 	ldm	sp++,r7,pc

80018258 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
80018258:	eb cd 40 c0 	pushm	r6-r7,lr
8001825c:	1a 97       	mov	r7,sp
8001825e:	20 1d       	sub	sp,4
80018260:	49 86       	lddpc	r6,800182c0 <spi_master_init+0x68>
80018262:	1e 26       	rsub	r6,pc
80018264:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
80018268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001826c:	fc 58 18 00 	cp.w	r8,-190464
80018270:	c0 41       	brne	80018278 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
80018272:	30 3c       	mov	r12,3
80018274:	c5 6f       	rcall	80018120 <sysclk_enable_pba_module>
80018276:	c0 88       	rjmp	80018286 <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
80018278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001827c:	fe 58 34 00 	cp.w	r8,-52224
80018280:	c0 31       	brne	80018286 <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
80018282:	30 bc       	mov	r12,11
80018284:	c4 ef       	rcall	80018120 <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
80018286:	ee fc ff fc 	ld.w	r12,r7[-4]
8001828a:	c5 df       	rcall	80018144 <spi_reset>
  spi_set_master_mode(spi);
8001828c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018290:	c6 8f       	rcall	80018160 <spi_set_master_mode>
  spi_disable_modfault(spi);
80018292:	ee fc ff fc 	ld.w	r12,r7[-4]
80018296:	c7 5f       	rcall	80018180 <spi_disable_modfault>
  spi_disable_loopback(spi);
80018298:	ee fc ff fc 	ld.w	r12,r7[-4]
8001829c:	c8 2f       	rcall	800181a0 <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
8001829e:	30 fb       	mov	r11,15
800182a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800182a4:	c9 ef       	rcall	800181e0 <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
800182a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800182aa:	cb 3f       	rcall	80018210 <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
800182ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800182b0:	c8 8f       	rcall	800181c0 <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
800182b2:	30 0b       	mov	r11,0
800182b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800182b8:	cb cf       	rcall	80018230 <spi_set_delay>
}
800182ba:	2f fd       	sub	sp,-4
800182bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800182c0:	80 01       	ld.sh	r1,r0[0x0]
800182c2:	80 e6       	ld.uh	r6,r0[0xc]

800182c4 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800182c4:	eb cd 40 c0 	pushm	r6-r7,lr
800182c8:	1a 97       	mov	r7,sp
800182ca:	20 2d       	sub	sp,8
800182cc:	48 96       	lddpc	r6,800182f0 <spi_select_device+0x2c>
800182ce:	1e 26       	rsub	r6,pc
800182d0:	ef 4c ff fc 	st.w	r7[-4],r12
800182d4:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
800182d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800182dc:	11 88       	ld.ub	r8,r8[0x0]
800182de:	10 9b       	mov	r11,r8
800182e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800182e4:	f0 16 01 f5 	mcall	r6[2004]
}
800182e8:	2f ed       	sub	sp,-8
800182ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800182ee:	00 00       	add	r0,r0
800182f0:	80 01       	ld.sh	r1,r0[0x0]
800182f2:	81 52       	st.w	r0[0x14],r2

800182f4 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800182f4:	eb cd 40 c0 	pushm	r6-r7,lr
800182f8:	1a 97       	mov	r7,sp
800182fa:	20 2d       	sub	sp,8
800182fc:	48 96       	lddpc	r6,80018320 <spi_deselect_device+0x2c>
800182fe:	1e 26       	rsub	r6,pc
80018300:	ef 4c ff fc 	st.w	r7[-4],r12
80018304:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
80018308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001830c:	11 88       	ld.ub	r8,r8[0x0]
8001830e:	10 9b       	mov	r11,r8
80018310:	ee fc ff fc 	ld.w	r12,r7[-4]
80018314:	f0 16 01 43 	mcall	r6[1292]
}
80018318:	2f ed       	sub	sp,-8
8001831a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001831e:	00 00       	add	r0,r0
80018320:	80 01       	ld.sh	r1,r0[0x0]
80018322:	81 82       	st.w	r0[0x20],r2

80018324 <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
80018324:	eb cd 40 c0 	pushm	r6-r7,lr
80018328:	1a 97       	mov	r7,sp
8001832a:	20 1d       	sub	sp,4
8001832c:	48 96       	lddpc	r6,80018350 <get_spi_in_buffer+0x2c>
8001832e:	1e 26       	rsub	r6,pc
80018330:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
80018334:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018338:	f0 08 10 54 	mul	r8,r8,84
8001833c:	f0 c9 ff dc 	sub	r9,r8,-36
80018340:	ec f8 00 2c 	ld.w	r8,r6[44]
80018344:	f2 08 00 08 	add	r8,r9,r8
}
80018348:	10 9c       	mov	r12,r8
8001834a:	2f fd       	sub	sp,-4
8001834c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018350:	80 01       	ld.sh	r1,r0[0x0]
80018352:	81 b2       	st.w	r0[0x2c],r2

80018354 <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
80018354:	eb cd 40 c0 	pushm	r6-r7,lr
80018358:	1a 97       	mov	r7,sp
8001835a:	48 56       	lddpc	r6,8001836c <spi0_int_handler+0x18>
8001835c:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
8001835e:	30 0c       	mov	r12,0
80018360:	f0 16 01 1d 	mcall	r6[1140]
}
80018364:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018368:	d6 03       	rete
8001836a:	00 00       	add	r0,r0
8001836c:	80 01       	ld.sh	r1,r0[0x0]
8001836e:	81 e0       	st.w	r0[0x38],r0

80018370 <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
80018370:	eb cd 40 c0 	pushm	r6-r7,lr
80018374:	1a 97       	mov	r7,sp
80018376:	48 56       	lddpc	r6,80018388 <spi1_int_handler+0x18>
80018378:	1e 26       	rsub	r6,pc
	spi_handler(1);
8001837a:	30 1c       	mov	r12,1
8001837c:	f0 16 01 1d 	mcall	r6[1140]
}
80018380:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018384:	d6 03       	rete
80018386:	00 00       	add	r0,r0
80018388:	80 01       	ld.sh	r1,r0[0x0]
8001838a:	81 fc       	st.w	r0[0x3c],r12

8001838c <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
8001838c:	eb cd 40 c0 	pushm	r6-r7,lr
80018390:	1a 97       	mov	r7,sp
80018392:	49 b6       	lddpc	r6,800183fc <pdca_int_handler_spi0+0x70>
80018394:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
80018396:	fc 78 00 00 	mov	r8,-196608
8001839a:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
8001839c:	fc 78 00 00 	mov	r8,-196608
800183a0:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
800183a2:	30 1c       	mov	r12,1
800183a4:	f0 16 00 78 	mcall	r6[480]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
800183a8:	30 0c       	mov	r12,0
800183aa:	f0 16 00 78 	mcall	r6[480]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
800183ae:	30 1c       	mov	r12,1
800183b0:	f0 16 00 92 	mcall	r6[584]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
800183b4:	ec f8 00 2c 	ld.w	r8,r6[44]
800183b8:	70 08       	ld.w	r8,r8[0x0]
800183ba:	ec f9 00 2c 	ld.w	r9,r6[44]
800183be:	2b 09       	sub	r9,-80
800183c0:	12 9b       	mov	r11,r9
800183c2:	10 9c       	mov	r12,r8
800183c4:	c9 8f       	rcall	800182f4 <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
800183c6:	ec f8 00 2c 	ld.w	r8,r6[44]
800183ca:	f1 38 00 4a 	ld.ub	r8,r8[74]
800183ce:	5c 58       	castu.b	r8
800183d0:	ec f9 00 2c 	ld.w	r9,r6[44]
800183d4:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
800183d8:	ec f9 00 2c 	ld.w	r9,r6[44]
800183dc:	30 08       	mov	r8,0
800183de:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
800183e2:	ec f8 00 2c 	ld.w	r8,r6[44]
800183e6:	71 38       	ld.w	r8,r8[0x4c]
800183e8:	58 08       	cp.w	r8,0
800183ea:	c0 50       	breq	800183f4 <pdca_int_handler_spi0+0x68>
800183ec:	ec f8 00 2c 	ld.w	r8,r6[44]
800183f0:	71 38       	ld.w	r8,r8[0x4c]
800183f2:	5d 18       	icall	r8
   
}
800183f4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800183f8:	d6 03       	rete
800183fa:	00 00       	add	r0,r0
800183fc:	80 01       	ld.sh	r1,r0[0x0]
800183fe:	82 18       	ld.sh	r8,r1[0x2]

80018400 <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
80018400:	eb cd 40 c0 	pushm	r6-r7,lr
80018404:	1a 97       	mov	r7,sp
80018406:	20 2d       	sub	sp,8
80018408:	4e 16       	lddpc	r6,8001858c <initSPI+0x18c>
8001840a:	1e 26       	rsub	r6,pc
8001840c:	ef 4c ff fc 	st.w	r7[-4],r12
80018410:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
80018414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018418:	ec f9 00 2c 	ld.w	r9,r6[44]
8001841c:	f0 08 10 54 	mul	r8,r8,84
80018420:	f2 08 00 08 	add	r8,r9,r8
80018424:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018428:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
8001842a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001842e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018432:	f0 08 10 54 	mul	r8,r8,84
80018436:	f2 08 00 08 	add	r8,r9,r8
8001843a:	f0 c9 ff b0 	sub	r9,r8,-80
8001843e:	30 08       	mov	r8,0
80018440:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
80018442:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018446:	ec f9 00 2c 	ld.w	r9,r6[44]
8001844a:	f0 08 10 54 	mul	r8,r8,84
8001844e:	f2 08 00 08 	add	r8,r9,r8
80018452:	70 08       	ld.w	r8,r8[0x0]
80018454:	10 9c       	mov	r12,r8
80018456:	c0 1f       	rcall	80018258 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
80018458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001845c:	f0 08 10 54 	mul	r8,r8,84
80018460:	f0 c9 ff b0 	sub	r9,r8,-80
80018464:	ec f8 00 2c 	ld.w	r8,r6[44]
80018468:	f2 08 00 0b 	add	r11,r9,r8
8001846c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018470:	ec f9 00 2c 	ld.w	r9,r6[44]
80018474:	f0 08 10 54 	mul	r8,r8,84
80018478:	f2 08 00 08 	add	r8,r9,r8
8001847c:	70 0c       	ld.w	r12,r8[0x0]
8001847e:	30 08       	mov	r8,0
80018480:	e0 69 2d 00 	mov	r9,11520
80018484:	ea 19 01 31 	orh	r9,0x131
80018488:	30 0a       	mov	r10,0
8001848a:	f0 16 01 64 	mcall	r6[1424]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
8001848e:	30 0b       	mov	r11,0
80018490:	36 0c       	mov	r12,96
80018492:	f0 16 00 3c 	mcall	r6[240]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
80018496:	30 0b       	mov	r11,0
80018498:	36 1c       	mov	r12,97
8001849a:	f0 16 00 3c 	mcall	r6[240]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
8001849e:	30 0b       	mov	r11,0
800184a0:	36 2c       	mov	r12,98
800184a2:	f0 16 00 3c 	mcall	r6[240]

	spi_buffers[spi_index].SPIinBufferHead=0;
800184a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184aa:	ec f9 00 2c 	ld.w	r9,r6[44]
800184ae:	f0 08 10 54 	mul	r8,r8,84
800184b2:	f2 08 00 08 	add	r8,r9,r8
800184b6:	f0 c9 ff bc 	sub	r9,r8,-68
800184ba:	30 08       	mov	r8,0
800184bc:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
800184be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184c2:	ec f9 00 2c 	ld.w	r9,r6[44]
800184c6:	f0 08 10 54 	mul	r8,r8,84
800184ca:	f2 08 00 08 	add	r8,r9,r8
800184ce:	f0 c9 ff bc 	sub	r9,r8,-68
800184d2:	30 08       	mov	r8,0
800184d4:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
800184d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184da:	ec f9 00 2c 	ld.w	r9,r6[44]
800184de:	f0 08 10 54 	mul	r8,r8,84
800184e2:	f2 08 00 08 	add	r8,r9,r8
800184e6:	f0 c9 ff bc 	sub	r9,r8,-68
800184ea:	30 08       	mov	r8,0
800184ec:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
800184ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184f2:	ec f9 00 2c 	ld.w	r9,r6[44]
800184f6:	f0 08 10 54 	mul	r8,r8,84
800184fa:	f2 08 00 08 	add	r8,r9,r8
800184fe:	f0 c9 ff bc 	sub	r9,r8,-68
80018502:	30 08       	mov	r8,0
80018504:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
80018506:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001850a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001850e:	f0 08 10 54 	mul	r8,r8,84
80018512:	f2 08 00 08 	add	r8,r9,r8
80018516:	f0 c9 ff b8 	sub	r9,r8,-72
8001851a:	30 18       	mov	r8,1
8001851c:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
8001851e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018522:	ec f9 00 2c 	ld.w	r9,r6[44]
80018526:	f0 08 10 54 	mul	r8,r8,84
8001852a:	f2 08 00 08 	add	r8,r9,r8
8001852e:	f0 c9 ff b8 	sub	r9,r8,-72
80018532:	30 08       	mov	r8,0
80018534:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
80018536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001853a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001853e:	f0 08 10 54 	mul	r8,r8,84
80018542:	f2 08 00 08 	add	r8,r9,r8
80018546:	f0 c9 ff b8 	sub	r9,r8,-72
8001854a:	30 18       	mov	r8,1
8001854c:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
8001854e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018552:	ec f9 00 2c 	ld.w	r9,r6[44]
80018556:	f0 08 10 54 	mul	r8,r8,84
8001855a:	f2 08 00 08 	add	r8,r9,r8
8001855e:	2b 48       	sub	r8,-76
80018560:	30 09       	mov	r9,0
80018562:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
80018564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018568:	ec f9 00 2c 	ld.w	r9,r6[44]
8001856c:	f0 08 10 54 	mul	r8,r8,84
80018570:	f2 08 00 08 	add	r8,r9,r8
80018574:	f0 c9 ff b8 	sub	r9,r8,-72
80018578:	30 08       	mov	r8,0
8001857a:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
8001857c:	ee fc ff f8 	ld.w	r12,r7[-8]
80018580:	f0 16 01 a5 	mcall	r6[1684]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
80018584:	2f ed       	sub	sp,-8
80018586:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001858a:	00 00       	add	r0,r0
8001858c:	80 01       	ld.sh	r1,r0[0x0]
8001858e:	82 8e       	ld.uh	lr,r1[0x0]

80018590 <enableSPI>:

void enableSPI(int spi_index) {
80018590:	eb cd 40 c0 	pushm	r6-r7,lr
80018594:	1a 97       	mov	r7,sp
80018596:	20 1d       	sub	sp,4
80018598:	48 a6       	lddpc	r6,800185c0 <enableSPI+0x30>
8001859a:	1e 26       	rsub	r6,pc
8001859c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
800185a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185a4:	ec f9 00 2c 	ld.w	r9,r6[44]
800185a8:	f0 08 10 54 	mul	r8,r8,84
800185ac:	f2 08 00 08 	add	r8,r9,r8
800185b0:	70 08       	ld.w	r8,r8[0x0]
800185b2:	10 9c       	mov	r12,r8
800185b4:	f0 16 01 a7 	mcall	r6[1692]
}
800185b8:	2f fd       	sub	sp,-4
800185ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800185be:	00 00       	add	r0,r0
800185c0:	80 01       	ld.sh	r1,r0[0x0]
800185c2:	84 1e       	ld.sh	lr,r2[0x2]

800185c4 <disableSPI>:

void disableSPI(int spi_index) {
800185c4:	eb cd 40 c0 	pushm	r6-r7,lr
800185c8:	1a 97       	mov	r7,sp
800185ca:	20 1d       	sub	sp,4
800185cc:	48 a6       	lddpc	r6,800185f4 <disableSPI+0x30>
800185ce:	1e 26       	rsub	r6,pc
800185d0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
800185d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185d8:	ec f9 00 2c 	ld.w	r9,r6[44]
800185dc:	f0 08 10 54 	mul	r8,r8,84
800185e0:	f2 08 00 08 	add	r8,r9,r8
800185e4:	70 08       	ld.w	r8,r8[0x0]
800185e6:	10 9c       	mov	r12,r8
800185e8:	f0 16 01 4c 	mcall	r6[1328]
}
800185ec:	2f fd       	sub	sp,-4
800185ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800185f2:	00 00       	add	r0,r0
800185f4:	80 01       	ld.sh	r1,r0[0x0]
800185f6:	84 52       	ld.sh	r2,r2[0xa]

800185f8 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
800185f8:	eb cd 40 c0 	pushm	r6-r7,lr
800185fc:	1a 97       	mov	r7,sp
800185fe:	20 2d       	sub	sp,8
80018600:	49 c6       	lddpc	r6,80018670 <spiInitDMA+0x78>
80018602:	1e 26       	rsub	r6,pc
80018604:	ef 4c ff fc 	st.w	r7[-4],r12
80018608:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
8001860c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018610:	12 98       	mov	r8,r9
80018612:	a1 78       	lsl	r8,0x1
80018614:	12 08       	add	r8,r9
80018616:	f0 09 15 03 	lsl	r9,r8,0x3
8001861a:	10 19       	sub	r9,r8
8001861c:	f2 c8 ff ff 	sub	r8,r9,-1
80018620:	f0 09 15 02 	lsl	r9,r8,0x2
80018624:	ec f8 00 2c 	ld.w	r8,r6[44]
80018628:	10 09       	add	r9,r8
8001862a:	ec f8 04 b0 	ld.w	r8,r6[1200]
8001862e:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
80018630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018634:	f0 08 10 54 	mul	r8,r8,84
80018638:	f0 c9 ff dc 	sub	r9,r8,-36
8001863c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018640:	10 09       	add	r9,r8
80018642:	ec f8 04 ac 	ld.w	r8,r6[1196]
80018646:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
80018648:	ec fb 04 b0 	ld.w	r11,r6[1200]
8001864c:	30 0c       	mov	r12,0
8001864e:	f0 16 00 70 	mcall	r6[448]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
80018652:	ec fb 04 ac 	ld.w	r11,r6[1196]
80018656:	30 1c       	mov	r12,1
80018658:	f0 16 00 70 	mcall	r6[448]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
8001865c:	30 0a       	mov	r10,0
8001865e:	36 1b       	mov	r11,97
80018660:	fe cc 02 d4 	sub	r12,pc,724
80018664:	f0 16 00 38 	mcall	r6[224]
  
  
}
80018668:	2f ed       	sub	sp,-8
8001866a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001866e:	00 00       	add	r0,r0
80018670:	80 01       	ld.sh	r1,r0[0x0]
80018672:	84 86       	ld.uh	r6,r2[0x0]

80018674 <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
80018674:	eb cd 40 c0 	pushm	r6-r7,lr
80018678:	1a 97       	mov	r7,sp
8001867a:	20 2d       	sub	sp,8
8001867c:	4a 86       	lddpc	r6,8001871c <spiTriggerDMA+0xa8>
8001867e:	1e 26       	rsub	r6,pc
80018680:	ef 4c ff fc 	st.w	r7[-4],r12
80018684:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
80018688:	ee fa ff f8 	ld.w	r10,r7[-8]
8001868c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018690:	12 98       	mov	r8,r9
80018692:	a1 78       	lsl	r8,0x1
80018694:	12 08       	add	r8,r9
80018696:	f0 09 15 03 	lsl	r9,r8,0x3
8001869a:	10 19       	sub	r9,r8
8001869c:	f2 c8 ff ff 	sub	r8,r9,-1
800186a0:	f0 09 15 02 	lsl	r9,r8,0x2
800186a4:	ec f8 00 2c 	ld.w	r8,r6[44]
800186a8:	f2 08 00 08 	add	r8,r9,r8
800186ac:	10 9b       	mov	r11,r8
800186ae:	30 0c       	mov	r12,0
800186b0:	f0 16 00 b2 	mcall	r6[712]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
800186b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800186b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186bc:	f0 08 10 54 	mul	r8,r8,84
800186c0:	f0 ca ff dc 	sub	r10,r8,-36
800186c4:	ec f8 00 2c 	ld.w	r8,r6[44]
800186c8:	f4 08 00 08 	add	r8,r10,r8
800186cc:	12 9a       	mov	r10,r9
800186ce:	10 9b       	mov	r11,r8
800186d0:	30 1c       	mov	r12,1
800186d2:	f0 16 00 b2 	mcall	r6[712]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
800186d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186da:	f0 08 10 54 	mul	r8,r8,84
800186de:	f0 c9 ff b0 	sub	r9,r8,-80
800186e2:	ec f8 00 2c 	ld.w	r8,r6[44]
800186e6:	10 09       	add	r9,r8
800186e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186ec:	ec fa 00 2c 	ld.w	r10,r6[44]
800186f0:	f0 08 10 54 	mul	r8,r8,84
800186f4:	f4 08 00 08 	add	r8,r10,r8
800186f8:	70 08       	ld.w	r8,r8[0x0]
800186fa:	12 9b       	mov	r11,r9
800186fc:	10 9c       	mov	r12,r8
800186fe:	fe b0 fd e3 	rcall	800182c4 <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
80018702:	30 1c       	mov	r12,1
80018704:	f0 16 00 b1 	mcall	r6[708]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
80018708:	30 1c       	mov	r12,1
8001870a:	f0 16 00 8a 	mcall	r6[552]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
8001870e:	30 0c       	mov	r12,0
80018710:	f0 16 00 8a 	mcall	r6[552]
    
}
80018714:	2f ed       	sub	sp,-8
80018716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001871a:	00 00       	add	r0,r0
8001871c:	80 01       	ld.sh	r1,r0[0x0]
8001871e:	85 02       	st.w	r2[0x0],r2

80018720 <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
80018720:	eb cd 40 c0 	pushm	r6-r7,lr
80018724:	1a 97       	mov	r7,sp
80018726:	20 2d       	sub	sp,8
80018728:	48 b6       	lddpc	r6,80018754 <setSPIcallBack+0x34>
8001872a:	1e 26       	rsub	r6,pc
8001872c:	ef 4c ff fc 	st.w	r7[-4],r12
80018730:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
80018734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018738:	ec f9 00 2c 	ld.w	r9,r6[44]
8001873c:	f0 08 10 54 	mul	r8,r8,84
80018740:	f2 08 00 08 	add	r8,r9,r8
80018744:	2b 48       	sub	r8,-76
80018746:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001874a:	91 09       	st.w	r8[0x0],r9
}
8001874c:	2f ed       	sub	sp,-8
8001874e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018752:	00 00       	add	r0,r0
80018754:	80 01       	ld.sh	r1,r0[0x0]
80018756:	85 ae       	st.w	r2[0x28],lr

80018758 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
80018758:	eb cd 40 c0 	pushm	r6-r7,lr
8001875c:	1a 97       	mov	r7,sp
8001875e:	20 1d       	sub	sp,4
80018760:	48 a6       	lddpc	r6,80018788 <pauseSPI+0x30>
80018762:	1e 26       	rsub	r6,pc
80018764:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
80018768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001876c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018770:	f0 08 10 54 	mul	r8,r8,84
80018774:	f2 08 00 08 	add	r8,r9,r8
80018778:	f0 c9 ff b8 	sub	r9,r8,-72
8001877c:	30 08       	mov	r8,0
8001877e:	b2 b8       	st.b	r9[0x3],r8
}
80018780:	2f fd       	sub	sp,-4
80018782:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018786:	00 00       	add	r0,r0
80018788:	80 01       	ld.sh	r1,r0[0x0]
8001878a:	85 e6       	st.w	r2[0x38],r6

8001878c <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
8001878c:	eb cd 40 c0 	pushm	r6-r7,lr
80018790:	1a 97       	mov	r7,sp
80018792:	20 1d       	sub	sp,4
80018794:	48 c6       	lddpc	r6,800187c4 <resumeSPI+0x38>
80018796:	1e 26       	rsub	r6,pc
80018798:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
8001879c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800187a0:	ec f9 00 2c 	ld.w	r9,r6[44]
800187a4:	f0 08 10 54 	mul	r8,r8,84
800187a8:	f2 08 00 08 	add	r8,r9,r8
800187ac:	f0 c9 ff b8 	sub	r9,r8,-72
800187b0:	30 18       	mov	r8,1
800187b2:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
800187b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800187b8:	f0 16 00 e6 	mcall	r6[920]
}
800187bc:	2f fd       	sub	sp,-4
800187be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187c2:	00 00       	add	r0,r0
800187c4:	80 01       	ld.sh	r1,r0[0x0]
800187c6:	86 1a       	ld.sh	r10,r3[0x2]

800187c8 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
800187c8:	eb cd 40 c0 	pushm	r6-r7,lr
800187cc:	1a 97       	mov	r7,sp
800187ce:	20 1d       	sub	sp,4
800187d0:	48 a6       	lddpc	r6,800187f8 <activateReceiveSPI+0x30>
800187d2:	1e 26       	rsub	r6,pc
800187d4:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
800187d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800187dc:	ec f9 00 2c 	ld.w	r9,r6[44]
800187e0:	f0 08 10 54 	mul	r8,r8,84
800187e4:	f2 08 00 08 	add	r8,r9,r8
800187e8:	f0 c9 ff b8 	sub	r9,r8,-72
800187ec:	30 18       	mov	r8,1
800187ee:	b2 88       	st.b	r9[0x0],r8
}
800187f0:	2f fd       	sub	sp,-4
800187f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187f6:	00 00       	add	r0,r0
800187f8:	80 01       	ld.sh	r1,r0[0x0]
800187fa:	86 56       	ld.sh	r6,r3[0xa]

800187fc <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
800187fc:	eb cd 40 c0 	pushm	r6-r7,lr
80018800:	1a 97       	mov	r7,sp
80018802:	20 1d       	sub	sp,4
80018804:	48 a6       	lddpc	r6,8001882c <deactivateReceiveSPI+0x30>
80018806:	1e 26       	rsub	r6,pc
80018808:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
8001880c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018810:	ec f9 00 2c 	ld.w	r9,r6[44]
80018814:	f0 08 10 54 	mul	r8,r8,84
80018818:	f2 08 00 08 	add	r8,r9,r8
8001881c:	f0 c9 ff b8 	sub	r9,r8,-72
80018820:	30 08       	mov	r8,0
80018822:	b2 88       	st.b	r9[0x0],r8
}
80018824:	2f fd       	sub	sp,-4
80018826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001882a:	00 00       	add	r0,r0
8001882c:	80 01       	ld.sh	r1,r0[0x0]
8001882e:	86 8a       	ld.uh	r10,r3[0x0]

80018830 <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
80018830:	eb cd 40 c0 	pushm	r6-r7,lr
80018834:	1a 97       	mov	r7,sp
80018836:	20 1d       	sub	sp,4
80018838:	48 a6       	lddpc	r6,80018860 <getTraffic+0x30>
8001883a:	1e 26       	rsub	r6,pc
8001883c:	ef 4c ff fc 	st.w	r7[-4],r12
80018840:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018844:	ec f9 00 2c 	ld.w	r9,r6[44]
80018848:	f0 08 10 54 	mul	r8,r8,84
8001884c:	f2 08 00 08 	add	r8,r9,r8
80018850:	2b 88       	sub	r8,-72
80018852:	11 98       	ld.ub	r8,r8[0x1]
80018854:	5c 58       	castu.b	r8
80018856:	10 9c       	mov	r12,r8
80018858:	2f fd       	sub	sp,-4
8001885a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001885e:	00 00       	add	r0,r0
80018860:	80 01       	ld.sh	r1,r0[0x0]
80018862:	86 be       	ld.uh	lr,r3[0x6]

80018864 <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
80018864:	eb cd 40 c0 	pushm	r6-r7,lr
80018868:	1a 97       	mov	r7,sp
8001886a:	20 2d       	sub	sp,8
8001886c:	4a b6       	lddpc	r6,80018918 <readSPI+0xb4>
8001886e:	1e 26       	rsub	r6,pc
80018870:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
80018874:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018878:	ec f9 00 2c 	ld.w	r9,r6[44]
8001887c:	f0 08 10 54 	mul	r8,r8,84
80018880:	f2 08 00 08 	add	r8,r9,r8
80018884:	2b c8       	sub	r8,-68
80018886:	11 88       	ld.ub	r8,r8[0x0]
80018888:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001888c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018890:	ec fa 00 2c 	ld.w	r10,r6[44]
80018894:	f0 08 10 54 	mul	r8,r8,84
80018898:	f4 08 00 08 	add	r8,r10,r8
8001889c:	2b c8       	sub	r8,-68
8001889e:	11 98       	ld.ub	r8,r8[0x1]
800188a0:	5c 58       	castu.b	r8
800188a2:	f0 09 18 00 	cp.b	r9,r8
800188a6:	ce 70       	breq	80018874 <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
800188a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800188ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188b0:	ec fa 00 2c 	ld.w	r10,r6[44]
800188b4:	f0 08 10 54 	mul	r8,r8,84
800188b8:	f4 08 00 08 	add	r8,r10,r8
800188bc:	2b c8       	sub	r8,-68
800188be:	11 98       	ld.ub	r8,r8[0x1]
800188c0:	5c 58       	castu.b	r8
800188c2:	ec fa 00 2c 	ld.w	r10,r6[44]
800188c6:	f2 09 10 54 	mul	r9,r9,84
800188ca:	f4 09 00 09 	add	r9,r10,r9
800188ce:	f2 08 00 08 	add	r8,r9,r8
800188d2:	2d c8       	sub	r8,-36
800188d4:	11 88       	ld.ub	r8,r8[0x0]
800188d6:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
800188da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800188de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188e2:	ec fa 00 2c 	ld.w	r10,r6[44]
800188e6:	f0 08 10 54 	mul	r8,r8,84
800188ea:	f4 08 00 08 	add	r8,r10,r8
800188ee:	2b c8       	sub	r8,-68
800188f0:	11 98       	ld.ub	r8,r8[0x1]
800188f2:	5c 58       	castu.b	r8
800188f4:	2f f8       	sub	r8,-1
800188f6:	5c 58       	castu.b	r8
800188f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800188fc:	ec fa 00 2c 	ld.w	r10,r6[44]
80018900:	f2 09 10 54 	mul	r9,r9,84
80018904:	f4 09 00 09 	add	r9,r10,r9
80018908:	2b c9       	sub	r9,-68
8001890a:	b2 98       	st.b	r9[0x1],r8
  return byte;
8001890c:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
80018910:	10 9c       	mov	r12,r8
80018912:	2f ed       	sub	sp,-8
80018914:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018918:	80 01       	ld.sh	r1,r0[0x0]
8001891a:	86 f2       	ld.uh	r2,r3[0xe]

8001891c <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
8001891c:	eb cd 40 c0 	pushm	r6-r7,lr
80018920:	1a 97       	mov	r7,sp
80018922:	20 1d       	sub	sp,4
80018924:	48 e6       	lddpc	r6,8001895c <clearSPIReadBuffer+0x40>
80018926:	1e 26       	rsub	r6,pc
80018928:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
8001892c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018934:	ec fa 00 2c 	ld.w	r10,r6[44]
80018938:	f0 08 10 54 	mul	r8,r8,84
8001893c:	f4 08 00 08 	add	r8,r10,r8
80018940:	2b c8       	sub	r8,-68
80018942:	11 88       	ld.ub	r8,r8[0x0]
80018944:	5c 58       	castu.b	r8
80018946:	ec fa 00 2c 	ld.w	r10,r6[44]
8001894a:	f2 09 10 54 	mul	r9,r9,84
8001894e:	f4 09 00 09 	add	r9,r10,r9
80018952:	2b c9       	sub	r9,-68
80018954:	b2 98       	st.b	r9[0x1],r8
}
80018956:	2f fd       	sub	sp,-4
80018958:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001895c:	80 01       	ld.sh	r1,r0[0x0]
8001895e:	87 aa       	st.w	r3[0x28],r10

80018960 <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
80018960:	eb cd 40 c0 	pushm	r6-r7,lr
80018964:	1a 97       	mov	r7,sp
80018966:	20 3d       	sub	sp,12
80018968:	4a b6       	lddpc	r6,80018a14 <writeSPI+0xb4>
8001896a:	1e 26       	rsub	r6,pc
8001896c:	ef 4c ff f8 	st.w	r7[-8],r12
80018970:	16 98       	mov	r8,r11
80018972:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
80018976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001897a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001897e:	f0 08 10 54 	mul	r8,r8,84
80018982:	f2 08 00 08 	add	r8,r9,r8
80018986:	2b c8       	sub	r8,-68
80018988:	11 a8       	ld.ub	r8,r8[0x2]
8001898a:	5c 58       	castu.b	r8
8001898c:	2f f8       	sub	r8,-1
8001898e:	5c 58       	castu.b	r8
80018990:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018994:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
80018998:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001899c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800189a0:	ec fa 00 2c 	ld.w	r10,r6[44]
800189a4:	f0 08 10 54 	mul	r8,r8,84
800189a8:	f4 08 00 08 	add	r8,r10,r8
800189ac:	2b c8       	sub	r8,-68
800189ae:	11 a8       	ld.ub	r8,r8[0x2]
800189b0:	5c 58       	castu.b	r8
800189b2:	ec fa 00 2c 	ld.w	r10,r6[44]
800189b6:	f2 09 10 54 	mul	r9,r9,84
800189ba:	f4 09 00 09 	add	r9,r10,r9
800189be:	f2 08 00 08 	add	r8,r9,r8
800189c2:	f0 c9 ff fc 	sub	r9,r8,-4
800189c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800189ca:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
800189cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800189d0:	ec f9 00 2c 	ld.w	r9,r6[44]
800189d4:	f0 08 10 54 	mul	r8,r8,84
800189d8:	f2 08 00 08 	add	r8,r9,r8
800189dc:	f0 c9 ff bc 	sub	r9,r8,-68
800189e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800189e4:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
800189e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800189ea:	ec f9 00 2c 	ld.w	r9,r6[44]
800189ee:	f0 08 10 54 	mul	r8,r8,84
800189f2:	f2 08 00 08 	add	r8,r9,r8
800189f6:	2b 88       	sub	r8,-72
800189f8:	11 b8       	ld.ub	r8,r8[0x3]
800189fa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800189fe:	30 18       	mov	r8,1
80018a00:	f0 09 18 00 	cp.b	r9,r8
80018a04:	c0 51       	brne	80018a0e <writeSPI+0xae>
80018a06:	ee fc ff f8 	ld.w	r12,r7[-8]
80018a0a:	f0 16 00 e6 	mcall	r6[920]
}
80018a0e:	2f dd       	sub	sp,-12
80018a10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018a14:	80 01       	ld.sh	r1,r0[0x0]
80018a16:	87 ee       	st.w	r3[0x38],lr

80018a18 <SPItransmit>:

void SPItransmit(int spi_index) {
80018a18:	eb cd 40 c0 	pushm	r6-r7,lr
80018a1c:	1a 97       	mov	r7,sp
80018a1e:	20 1d       	sub	sp,4
80018a20:	4d 66       	lddpc	r6,80018b78 <SPItransmit+0x160>
80018a22:	1e 26       	rsub	r6,pc
80018a24:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
80018a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a2c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a30:	f0 08 10 54 	mul	r8,r8,84
80018a34:	f2 08 00 08 	add	r8,r9,r8
80018a38:	2b c8       	sub	r8,-68
80018a3a:	11 a8       	ld.ub	r8,r8[0x2]
80018a3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a44:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a48:	f0 08 10 54 	mul	r8,r8,84
80018a4c:	f4 08 00 08 	add	r8,r10,r8
80018a50:	2b c8       	sub	r8,-68
80018a52:	11 b8       	ld.ub	r8,r8[0x3]
80018a54:	5c 58       	castu.b	r8
80018a56:	f0 09 18 00 	cp.b	r9,r8
80018a5a:	c4 90       	breq	80018aec <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
80018a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a60:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a64:	f0 08 10 54 	mul	r8,r8,84
80018a68:	f2 08 00 08 	add	r8,r9,r8
80018a6c:	70 09       	ld.w	r9,r8[0x0]
80018a6e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a76:	ec fb 00 2c 	ld.w	r11,r6[44]
80018a7a:	f0 08 10 54 	mul	r8,r8,84
80018a7e:	f6 08 00 08 	add	r8,r11,r8
80018a82:	2b c8       	sub	r8,-68
80018a84:	11 b8       	ld.ub	r8,r8[0x3]
80018a86:	5c 58       	castu.b	r8
80018a88:	ec fb 00 2c 	ld.w	r11,r6[44]
80018a8c:	f4 0a 10 54 	mul	r10,r10,84
80018a90:	f6 0a 00 0a 	add	r10,r11,r10
80018a94:	f4 08 00 08 	add	r8,r10,r8
80018a98:	2f c8       	sub	r8,-4
80018a9a:	11 88       	ld.ub	r8,r8[0x0]
80018a9c:	5c 58       	castu.b	r8
80018a9e:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
80018aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aa4:	ec f9 00 2c 	ld.w	r9,r6[44]
80018aa8:	f0 08 10 54 	mul	r8,r8,84
80018aac:	f2 08 00 08 	add	r8,r9,r8
80018ab0:	f0 c9 ff b8 	sub	r9,r8,-72
80018ab4:	30 18       	mov	r8,1
80018ab6:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
80018ab8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ac0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ac4:	f0 08 10 54 	mul	r8,r8,84
80018ac8:	f4 08 00 08 	add	r8,r10,r8
80018acc:	2b c8       	sub	r8,-68
80018ace:	11 b8       	ld.ub	r8,r8[0x3]
80018ad0:	5c 58       	castu.b	r8
80018ad2:	2f f8       	sub	r8,-1
80018ad4:	5c 58       	castu.b	r8
80018ad6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018ada:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ade:	f2 09 10 54 	mul	r9,r9,84
80018ae2:	f4 09 00 09 	add	r9,r10,r9
80018ae6:	2b c9       	sub	r9,-68
80018ae8:	b2 b8       	st.b	r9[0x3],r8
80018aea:	c4 38       	rjmp	80018b70 <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
80018aec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018af0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018af4:	ec fa 00 2c 	ld.w	r10,r6[44]
80018af8:	f0 08 10 54 	mul	r8,r8,84
80018afc:	f4 08 00 08 	add	r8,r10,r8
80018b00:	2b c8       	sub	r8,-68
80018b02:	11 a8       	ld.ub	r8,r8[0x2]
80018b04:	5c 58       	castu.b	r8
80018b06:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b0a:	f2 09 10 54 	mul	r9,r9,84
80018b0e:	f4 09 00 09 	add	r9,r10,r9
80018b12:	2b c9       	sub	r9,-68
80018b14:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b1a:	f0 08 10 54 	mul	r8,r8,84
80018b1e:	f0 c9 ff b0 	sub	r9,r8,-80
80018b22:	ec f8 00 2c 	ld.w	r8,r6[44]
80018b26:	10 09       	add	r9,r8
80018b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b2c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b30:	f0 08 10 54 	mul	r8,r8,84
80018b34:	f4 08 00 08 	add	r8,r10,r8
80018b38:	70 08       	ld.w	r8,r8[0x0]
80018b3a:	12 9b       	mov	r11,r9
80018b3c:	10 9c       	mov	r12,r8
80018b3e:	fe b0 fb db 	rcall	800182f4 <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
80018b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b46:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b4a:	f0 08 10 54 	mul	r8,r8,84
80018b4e:	f2 08 00 08 	add	r8,r9,r8
80018b52:	f0 c9 ff b8 	sub	r9,r8,-72
80018b56:	30 08       	mov	r8,0
80018b58:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018b5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b5e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b62:	f0 08 10 54 	mul	r8,r8,84
80018b66:	f2 08 00 08 	add	r8,r9,r8
80018b6a:	70 08       	ld.w	r8,r8[0x0]
80018b6c:	30 39       	mov	r9,3
80018b6e:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
80018b70:	2f fd       	sub	sp,-4
80018b72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b76:	00 00       	add	r0,r0
80018b78:	80 01       	ld.sh	r1,r0[0x0]
80018b7a:	88 a6       	ld.uh	r6,r4[0x4]

80018b7c <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
80018b7c:	eb cd 40 c0 	pushm	r6-r7,lr
80018b80:	1a 97       	mov	r7,sp
80018b82:	20 1d       	sub	sp,4
80018b84:	4a f6       	lddpc	r6,80018c40 <startSPI+0xc4>
80018b86:	1e 26       	rsub	r6,pc
80018b88:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b90:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b94:	f0 08 10 54 	mul	r8,r8,84
80018b98:	f2 08 00 08 	add	r8,r9,r8
80018b9c:	2b 88       	sub	r8,-72
80018b9e:	11 a8       	ld.ub	r8,r8[0x2]
80018ba0:	5c 58       	castu.b	r8
80018ba2:	c4 c1       	brne	80018c3a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
80018ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ba8:	ec f9 00 2c 	ld.w	r9,r6[44]
80018bac:	f0 08 10 54 	mul	r8,r8,84
80018bb0:	f2 08 00 08 	add	r8,r9,r8
80018bb4:	2b c8       	sub	r8,-68
80018bb6:	11 a8       	ld.ub	r8,r8[0x2]
80018bb8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bc0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018bc4:	f0 08 10 54 	mul	r8,r8,84
80018bc8:	f4 08 00 08 	add	r8,r10,r8
80018bcc:	2b c8       	sub	r8,-68
80018bce:	11 b8       	ld.ub	r8,r8[0x3]
80018bd0:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018bd2:	f0 09 18 00 	cp.b	r9,r8
80018bd6:	c3 20       	breq	80018c3a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bdc:	f0 08 10 54 	mul	r8,r8,84
80018be0:	f0 c9 ff b0 	sub	r9,r8,-80
80018be4:	ec f8 00 2c 	ld.w	r8,r6[44]
80018be8:	10 09       	add	r9,r8
80018bea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bee:	ec fa 00 2c 	ld.w	r10,r6[44]
80018bf2:	f0 08 10 54 	mul	r8,r8,84
80018bf6:	f4 08 00 08 	add	r8,r10,r8
80018bfa:	70 08       	ld.w	r8,r8[0x0]
80018bfc:	12 9b       	mov	r11,r9
80018bfe:	10 9c       	mov	r12,r8
80018c00:	fe b0 fb 62 	rcall	800182c4 <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
80018c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c08:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c0c:	f0 08 10 54 	mul	r8,r8,84
80018c10:	f2 08 00 08 	add	r8,r9,r8
80018c14:	f0 c9 ff b8 	sub	r9,r8,-72
80018c18:	30 18       	mov	r8,1
80018c1a:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c20:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c24:	f0 08 10 54 	mul	r8,r8,84
80018c28:	f2 08 00 08 	add	r8,r9,r8
80018c2c:	70 08       	ld.w	r8,r8[0x0]
80018c2e:	30 39       	mov	r9,3
80018c30:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
80018c32:	ee fc ff fc 	ld.w	r12,r7[-4]
80018c36:	f0 16 01 27 	mcall	r6[1180]
  }
}
80018c3a:	2f fd       	sub	sp,-4
80018c3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c40:	80 01       	ld.sh	r1,r0[0x0]
80018c42:	8a 0a       	ld.sh	r10,r5[0x0]

80018c44 <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
80018c44:	eb cd 40 c0 	pushm	r6-r7,lr
80018c48:	1a 97       	mov	r7,sp
80018c4a:	20 1d       	sub	sp,4
80018c4c:	49 16       	lddpc	r6,80018c90 <SPITransferFinished+0x4c>
80018c4e:	1e 26       	rsub	r6,pc
80018c50:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
80018c54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c58:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c5c:	f0 08 10 54 	mul	r8,r8,84
80018c60:	f2 08 00 08 	add	r8,r9,r8
80018c64:	2b c8       	sub	r8,-68
80018c66:	11 a8       	ld.ub	r8,r8[0x2]
80018c68:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c70:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c74:	f0 08 10 54 	mul	r8,r8,84
80018c78:	f4 08 00 08 	add	r8,r10,r8
80018c7c:	2b c8       	sub	r8,-68
80018c7e:	11 b8       	ld.ub	r8,r8[0x3]
80018c80:	5c 58       	castu.b	r8
80018c82:	f0 09 18 00 	cp.b	r9,r8
80018c86:	5f 08       	sreq	r8
}
80018c88:	10 9c       	mov	r12,r8
80018c8a:	2f fd       	sub	sp,-4
80018c8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c90:	80 01       	ld.sh	r1,r0[0x0]
80018c92:	8a d2       	ld.uh	r2,r5[0xa]

80018c94 <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
80018c94:	eb cd 40 c0 	pushm	r6-r7,lr
80018c98:	1a 97       	mov	r7,sp
80018c9a:	20 1d       	sub	sp,4
80018c9c:	49 36       	lddpc	r6,80018ce8 <SPIFlushBuffer+0x54>
80018c9e:	1e 26       	rsub	r6,pc
80018ca0:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
80018ca4:	ee fc ff fc 	ld.w	r12,r7[-4]
80018ca8:	f0 16 01 e7 	mcall	r6[1948]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
80018cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018cb0:	ec f9 00 2c 	ld.w	r9,r6[44]
80018cb4:	f0 08 10 54 	mul	r8,r8,84
80018cb8:	f2 08 00 08 	add	r8,r9,r8
80018cbc:	2b c8       	sub	r8,-68
80018cbe:	11 a8       	ld.ub	r8,r8[0x2]
80018cc0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018cc8:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ccc:	f0 08 10 54 	mul	r8,r8,84
80018cd0:	f4 08 00 08 	add	r8,r10,r8
80018cd4:	2b c8       	sub	r8,-68
80018cd6:	11 b8       	ld.ub	r8,r8[0x3]
80018cd8:	5c 58       	castu.b	r8
80018cda:	f0 09 18 00 	cp.b	r9,r8
80018cde:	ce 71       	brne	80018cac <SPIFlushBuffer+0x18>
}
80018ce0:	2f fd       	sub	sp,-4
80018ce2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ce6:	00 00       	add	r0,r0
80018ce8:	80 01       	ld.sh	r1,r0[0x0]
80018cea:	8b 22       	st.w	r5[0x8],r2

80018cec <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
80018cec:	eb cd 40 c0 	pushm	r6-r7,lr
80018cf0:	1a 97       	mov	r7,sp
80018cf2:	20 1d       	sub	sp,4
80018cf4:	49 36       	lddpc	r6,80018d40 <SPIBytesAvailable+0x54>
80018cf6:	1e 26       	rsub	r6,pc
80018cf8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
80018cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018d00:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d04:	f0 08 10 54 	mul	r8,r8,84
80018d08:	f2 08 00 08 	add	r8,r9,r8
80018d0c:	2b c8       	sub	r8,-68
80018d0e:	11 88       	ld.ub	r8,r8[0x0]
80018d10:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018d18:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d1c:	f0 08 10 54 	mul	r8,r8,84
80018d20:	f4 08 00 08 	add	r8,r10,r8
80018d24:	2b c8       	sub	r8,-68
80018d26:	11 98       	ld.ub	r8,r8[0x1]
80018d28:	5c 58       	castu.b	r8
80018d2a:	f2 08 01 08 	sub	r8,r9,r8
80018d2e:	5c 58       	castu.b	r8
80018d30:	2e 08       	sub	r8,-32
80018d32:	5c 58       	castu.b	r8
80018d34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
80018d38:	10 9c       	mov	r12,r8
80018d3a:	2f fd       	sub	sp,-4
80018d3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018d40:	80 01       	ld.sh	r1,r0[0x0]
80018d42:	8b 7a       	st.w	r5[0x1c],r10

80018d44 <spi_handler>:





void spi_handler(int spi_index) {
80018d44:	eb cd 40 c0 	pushm	r6-r7,lr
80018d48:	1a 97       	mov	r7,sp
80018d4a:	20 2d       	sub	sp,8
80018d4c:	4d e6       	lddpc	r6,80018ec4 <spi_handler+0x180>
80018d4e:	1e 26       	rsub	r6,pc
80018d50:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
80018d54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d58:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d5c:	f0 08 10 54 	mul	r8,r8,84
80018d60:	f2 08 00 08 	add	r8,r9,r8
80018d64:	70 08       	ld.w	r8,r8[0x0]
80018d66:	70 28       	ld.w	r8,r8[0x8]
80018d68:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
80018d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d70:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d74:	f0 08 10 54 	mul	r8,r8,84
80018d78:	f2 08 00 08 	add	r8,r9,r8
80018d7c:	70 08       	ld.w	r8,r8[0x0]
80018d7e:	70 48       	ld.w	r8,r8[0x10]
80018d80:	e2 18 00 02 	andl	r8,0x2,COH
80018d84:	c0 50       	breq	80018d8e <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
80018d86:	ee fc ff f8 	ld.w	r12,r7[-8]
80018d8a:	f0 16 01 27 	mcall	r6[1180]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
80018d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d92:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d96:	f0 08 10 54 	mul	r8,r8,84
80018d9a:	f2 08 00 08 	add	r8,r9,r8
80018d9e:	2b 88       	sub	r8,-72
80018da0:	11 88       	ld.ub	r8,r8[0x0]
80018da2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018da6:	30 18       	mov	r8,1
80018da8:	f0 09 18 00 	cp.b	r9,r8
80018dac:	e0 81 00 88 	brne	80018ebc <spi_handler+0x178>
80018db0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018db4:	ec f9 00 2c 	ld.w	r9,r6[44]
80018db8:	f0 08 10 54 	mul	r8,r8,84
80018dbc:	f2 08 00 08 	add	r8,r9,r8
80018dc0:	70 08       	ld.w	r8,r8[0x0]
80018dc2:	70 48       	ld.w	r8,r8[0x10]
80018dc4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018dc8:	5c 58       	castu.b	r8
80018dca:	c7 90       	breq	80018ebc <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
80018dcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dd0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dd4:	f0 09 10 54 	mul	r9,r8,84
80018dd8:	f4 09 00 09 	add	r9,r10,r9
80018ddc:	2b 89       	sub	r9,-72
80018dde:	13 99       	ld.ub	r9,r9[0x1]
80018de0:	5c 59       	castu.b	r9
80018de2:	2f f9       	sub	r9,-1
80018de4:	5c 59       	castu.b	r9
80018de6:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dea:	f0 08 10 54 	mul	r8,r8,84
80018dee:	f4 08 00 08 	add	r8,r10,r8
80018df2:	f0 ca ff b8 	sub	r10,r8,-72
80018df6:	12 98       	mov	r8,r9
80018df8:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
80018dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dfe:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e02:	f0 08 10 54 	mul	r8,r8,84
80018e06:	f2 08 00 08 	add	r8,r9,r8
80018e0a:	2b c8       	sub	r8,-68
80018e0c:	11 88       	ld.ub	r8,r8[0x0]
80018e0e:	5c 58       	castu.b	r8
80018e10:	2f f8       	sub	r8,-1
80018e12:	5c 58       	castu.b	r8
80018e14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018e18:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
80018e1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e20:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e24:	f0 08 10 54 	mul	r8,r8,84
80018e28:	f2 08 00 08 	add	r8,r9,r8
80018e2c:	2b c8       	sub	r8,-68
80018e2e:	11 98       	ld.ub	r8,r8[0x1]
80018e30:	5c 58       	castu.b	r8
80018e32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80018e36:	f0 09 18 00 	cp.b	r9,r8
80018e3a:	c1 a1       	brne	80018e6e <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80018e3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018e40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e44:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e48:	f0 08 10 54 	mul	r8,r8,84
80018e4c:	f4 08 00 08 	add	r8,r10,r8
80018e50:	2b c8       	sub	r8,-68
80018e52:	11 98       	ld.ub	r8,r8[0x1]
80018e54:	5c 58       	castu.b	r8
80018e56:	2f f8       	sub	r8,-1
80018e58:	5c 58       	castu.b	r8
80018e5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018e5e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e62:	f2 09 10 54 	mul	r9,r9,84
80018e66:	f4 09 00 09 	add	r9,r10,r9
80018e6a:	2b c9       	sub	r9,-68
80018e6c:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
80018e6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018e72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e76:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e7a:	f0 08 10 54 	mul	r8,r8,84
80018e7e:	f4 08 00 08 	add	r8,r10,r8
80018e82:	2b c8       	sub	r8,-68
80018e84:	11 88       	ld.ub	r8,r8[0x0]
80018e86:	5c 58       	castu.b	r8
80018e88:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e8c:	f2 09 10 54 	mul	r9,r9,84
80018e90:	f4 09 00 09 	add	r9,r10,r9
80018e94:	f2 08 00 08 	add	r8,r9,r8
80018e98:	f0 c9 ff dc 	sub	r9,r8,-36
80018e9c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80018ea0:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
80018ea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ea6:	ec f9 00 2c 	ld.w	r9,r6[44]
80018eaa:	f0 08 10 54 	mul	r8,r8,84
80018eae:	f2 08 00 08 	add	r8,r9,r8
80018eb2:	f0 c9 ff bc 	sub	r9,r8,-68
80018eb6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018eba:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
80018ebc:	2f ed       	sub	sp,-8
80018ebe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ec2:	00 00       	add	r0,r0
80018ec4:	80 01       	ld.sh	r1,r0[0x0]
80018ec6:	8b d2       	st.w	r5[0x34],r2

80018ec8 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80018ec8:	eb cd 40 80 	pushm	r7,lr
80018ecc:	1a 97       	mov	r7,sp
80018ece:	20 1d       	sub	sp,4
80018ed0:	18 98       	mov	r8,r12
80018ed2:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80018ed6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018eda:	58 38       	cp.w	r8,3
80018edc:	c1 20       	breq	80018f00 <osc_get_rate+0x38>
80018ede:	e0 89 00 07 	brgt	80018eec <osc_get_rate+0x24>
80018ee2:	58 08       	cp.w	r8,0
80018ee4:	c0 90       	breq	80018ef6 <osc_get_rate+0x2e>
80018ee6:	58 28       	cp.w	r8,2
80018ee8:	c0 f0       	breq	80018f06 <osc_get_rate+0x3e>
80018eea:	c1 b8       	rjmp	80018f20 <osc_get_rate+0x58>
80018eec:	58 48       	cp.w	r8,4
80018eee:	c1 10       	breq	80018f10 <osc_get_rate+0x48>
80018ef0:	58 58       	cp.w	r8,5
80018ef2:	c1 40       	breq	80018f1a <osc_get_rate+0x52>
80018ef4:	c1 68       	rjmp	80018f20 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80018ef6:	e0 68 24 00 	mov	r8,9216
80018efa:	ea 18 00 f4 	orh	r8,0xf4
80018efe:	c1 28       	rjmp	80018f22 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80018f00:	e0 68 80 00 	mov	r8,32768
80018f04:	c0 f8       	rjmp	80018f22 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80018f06:	e0 68 12 00 	mov	r8,4608
80018f0a:	ea 18 00 7a 	orh	r8,0x7a
80018f0e:	c0 a8       	rjmp	80018f22 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80018f10:	e0 68 0e 00 	mov	r8,3584
80018f14:	ea 18 07 27 	orh	r8,0x727
80018f18:	c0 58       	rjmp	80018f22 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80018f1a:	e0 78 c1 38 	mov	r8,115000
80018f1e:	c0 28       	rjmp	80018f22 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80018f20:	30 08       	mov	r8,0
	}
}
80018f22:	10 9c       	mov	r12,r8
80018f24:	2f fd       	sub	sp,-4
80018f26:	e3 cd 80 80 	ldm	sp++,r7,pc

80018f2a <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80018f2a:	eb cd 40 c0 	pushm	r6-r7,lr
80018f2e:	1a 97       	mov	r7,sp
80018f30:	48 56       	lddpc	r6,80018f44 <sysclk_get_main_hz+0x1a>
80018f32:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80018f34:	30 0c       	mov	r12,0
80018f36:	cc 9f       	rcall	80018ec8 <osc_get_rate>
80018f38:	18 98       	mov	r8,r12
80018f3a:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80018f3c:	10 9c       	mov	r12,r8
80018f3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f42:	00 00       	add	r0,r0
80018f44:	80 01       	ld.sh	r1,r0[0x0]
80018f46:	8d b6       	st.w	r6[0x2c],r6

80018f48 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80018f48:	eb cd 40 c0 	pushm	r6-r7,lr
80018f4c:	1a 97       	mov	r7,sp
80018f4e:	48 46       	lddpc	r6,80018f5c <sysclk_get_cpu_hz+0x14>
80018f50:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80018f52:	ce cf       	rcall	80018f2a <sysclk_get_main_hz>
80018f54:	18 98       	mov	r8,r12
}
80018f56:	10 9c       	mov	r12,r8
80018f58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f5c:	80 01       	ld.sh	r1,r0[0x0]
80018f5e:	8d d4       	st.w	r6[0x34],r4

80018f60 <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018f60:	eb cd 40 c0 	pushm	r6-r7,lr
80018f64:	1a 97       	mov	r7,sp
80018f66:	20 2d       	sub	sp,8
80018f68:	4b 26       	lddpc	r6,80019030 <uart_handler_0+0xd0>
80018f6a:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
80018f6c:	ec f8 00 34 	ld.w	r8,r6[52]
80018f70:	70 18       	ld.w	r8,r8[0x4]
80018f72:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018f74:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
80018f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f7c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018f80:	5c 58       	castu.b	r8
80018f82:	c2 70       	breq	80018fd0 <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
80018f84:	ec f8 00 34 	ld.w	r8,r6[52]
80018f88:	70 18       	ld.w	r8,r8[0x4]
80018f8a:	70 68       	ld.w	r8,r8[0x18]
80018f8c:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
80018f90:	ec f8 00 34 	ld.w	r8,r6[52]
80018f94:	f0 f8 02 14 	ld.w	r8,r8[532]
80018f98:	58 08       	cp.w	r8,0
80018f9a:	c0 c1       	brne	80018fb2 <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
80018f9c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018fa0:	ec f8 00 34 	ld.w	r8,r6[52]
80018fa4:	f0 c8 fe f1 	sub	r8,r8,-271
80018fa8:	12 9b       	mov	r11,r9
80018faa:	10 9c       	mov	r12,r8
80018fac:	f0 16 00 4f 	mcall	r6[316]
80018fb0:	c1 08       	rjmp	80018fd0 <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
80018fb2:	ec f8 00 34 	ld.w	r8,r6[52]
80018fb6:	f0 f8 02 14 	ld.w	r8,r8[532]
80018fba:	70 18       	ld.w	r8,r8[0x4]
80018fbc:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018fc0:	ec f9 00 34 	ld.w	r9,r6[52]
80018fc4:	f2 f9 02 14 	ld.w	r9,r9[532]
80018fc8:	72 59       	ld.w	r9,r9[0x14]
80018fca:	14 9b       	mov	r11,r10
80018fcc:	12 9c       	mov	r12,r9
80018fce:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
80018fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fd4:	e2 18 00 02 	andl	r8,0x2,COH
80018fd8:	c2 80       	breq	80019028 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
80018fda:	ec f8 00 34 	ld.w	r8,r6[52]
80018fde:	2f 48       	sub	r8,-12
80018fe0:	10 9c       	mov	r12,r8
80018fe2:	f0 16 00 2c 	mcall	r6[176]
80018fe6:	18 98       	mov	r8,r12
80018fe8:	58 08       	cp.w	r8,0
80018fea:	e0 8a 00 11 	brle	8001900c <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
80018fee:	ec f8 00 34 	ld.w	r8,r6[52]
80018ff2:	2f 48       	sub	r8,-12
80018ff4:	10 9c       	mov	r12,r8
80018ff6:	f0 16 00 42 	mcall	r6[264]
80018ffa:	18 98       	mov	r8,r12
80018ffc:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
80019000:	ec f8 00 34 	ld.w	r8,r6[52]
80019004:	70 18       	ld.w	r8,r8[0x4]
80019006:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001900a:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
8001900c:	ec f8 00 34 	ld.w	r8,r6[52]
80019010:	2f 48       	sub	r8,-12
80019012:	10 9c       	mov	r12,r8
80019014:	f0 16 00 2c 	mcall	r6[176]
80019018:	18 98       	mov	r8,r12
8001901a:	58 08       	cp.w	r8,0
8001901c:	c0 61       	brne	80019028 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
8001901e:	ec f8 00 34 	ld.w	r8,r6[52]
80019022:	70 18       	ld.w	r8,r8[0x4]
80019024:	30 29       	mov	r9,2
80019026:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80019028:	2f ed       	sub	sp,-8
8001902a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001902e:	d6 03       	rete
80019030:	80 01       	ld.sh	r1,r0[0x0]
80019032:	8d ee       	st.w	r6[0x38],lr

80019034 <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
80019034:	eb cd 40 c0 	pushm	r6-r7,lr
80019038:	1a 97       	mov	r7,sp
8001903a:	20 2d       	sub	sp,8
8001903c:	4b 66       	lddpc	r6,80019114 <uart_handler_1+0xe0>
8001903e:	1e 26       	rsub	r6,pc
80019040:	ec f8 00 34 	ld.w	r8,r6[52]
80019044:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019048:	70 58       	ld.w	r8,r8[0x14]
8001904a:	ef 48 ff fc 	st.w	r7[-4],r8
8001904e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019052:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019056:	5c 58       	castu.b	r8
80019058:	c2 80       	breq	800190a8 <uart_handler_1+0x74>
8001905a:	ec f8 00 34 	ld.w	r8,r6[52]
8001905e:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019062:	70 68       	ld.w	r8,r8[0x18]
80019064:	ef 68 ff fb 	st.b	r7[-5],r8
80019068:	ec f8 00 34 	ld.w	r8,r6[52]
8001906c:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80019070:	58 08       	cp.w	r8,0
80019072:	c0 c1       	brne	8001908a <uart_handler_1+0x56>
80019074:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019078:	ec f8 00 34 	ld.w	r8,r6[52]
8001907c:	f0 c8 fc c9 	sub	r8,r8,-823
80019080:	12 9b       	mov	r11,r9
80019082:	10 9c       	mov	r12,r8
80019084:	f0 16 00 4f 	mcall	r6[316]
80019088:	c1 08       	rjmp	800190a8 <uart_handler_1+0x74>
8001908a:	ec f8 00 34 	ld.w	r8,r6[52]
8001908e:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80019092:	70 18       	ld.w	r8,r8[0x4]
80019094:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019098:	ec f9 00 34 	ld.w	r9,r6[52]
8001909c:	f2 f9 04 3c 	ld.w	r9,r9[1084]
800190a0:	72 59       	ld.w	r9,r9[0x14]
800190a2:	14 9b       	mov	r11,r10
800190a4:	12 9c       	mov	r12,r9
800190a6:	5d 18       	icall	r8
800190a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190ac:	e2 18 00 02 	andl	r8,0x2,COH
800190b0:	c2 d0       	breq	8001910a <uart_handler_1+0xd6>
800190b2:	ec f8 00 34 	ld.w	r8,r6[52]
800190b6:	f0 c8 fd cc 	sub	r8,r8,-564
800190ba:	10 9c       	mov	r12,r8
800190bc:	f0 16 00 2c 	mcall	r6[176]
800190c0:	18 98       	mov	r8,r12
800190c2:	58 08       	cp.w	r8,0
800190c4:	e0 8a 00 13 	brle	800190ea <uart_handler_1+0xb6>
800190c8:	ec f8 00 34 	ld.w	r8,r6[52]
800190cc:	f0 c8 fd cc 	sub	r8,r8,-564
800190d0:	10 9c       	mov	r12,r8
800190d2:	f0 16 00 42 	mcall	r6[264]
800190d6:	18 98       	mov	r8,r12
800190d8:	ef 68 ff fb 	st.b	r7[-5],r8
800190dc:	ec f8 00 34 	ld.w	r8,r6[52]
800190e0:	f0 f8 02 2c 	ld.w	r8,r8[556]
800190e4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800190e8:	91 79       	st.w	r8[0x1c],r9
800190ea:	ec f8 00 34 	ld.w	r8,r6[52]
800190ee:	f0 c8 fd cc 	sub	r8,r8,-564
800190f2:	10 9c       	mov	r12,r8
800190f4:	f0 16 00 2c 	mcall	r6[176]
800190f8:	18 98       	mov	r8,r12
800190fa:	58 08       	cp.w	r8,0
800190fc:	c0 71       	brne	8001910a <uart_handler_1+0xd6>
800190fe:	ec f8 00 34 	ld.w	r8,r6[52]
80019102:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019106:	30 29       	mov	r9,2
80019108:	91 39       	st.w	r8[0xc],r9
8001910a:	2f ed       	sub	sp,-8
8001910c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019110:	d6 03       	rete
80019112:	00 00       	add	r0,r0
80019114:	80 01       	ld.sh	r1,r0[0x0]
80019116:	8e c2       	ld.uh	r2,r7[0x8]

80019118 <uart_handler_2>:
UART_HANDLER(2);
80019118:	eb cd 40 c0 	pushm	r6-r7,lr
8001911c:	1a 97       	mov	r7,sp
8001911e:	20 2d       	sub	sp,8
80019120:	4b 66       	lddpc	r6,800191f8 <uart_handler_2+0xe0>
80019122:	1e 26       	rsub	r6,pc
80019124:	ec f8 00 34 	ld.w	r8,r6[52]
80019128:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001912c:	70 58       	ld.w	r8,r8[0x14]
8001912e:	ef 48 ff fc 	st.w	r7[-4],r8
80019132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019136:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001913a:	5c 58       	castu.b	r8
8001913c:	c2 80       	breq	8001918c <uart_handler_2+0x74>
8001913e:	ec f8 00 34 	ld.w	r8,r6[52]
80019142:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019146:	70 68       	ld.w	r8,r8[0x18]
80019148:	ef 68 ff fb 	st.b	r7[-5],r8
8001914c:	ec f8 00 34 	ld.w	r8,r6[52]
80019150:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019154:	58 08       	cp.w	r8,0
80019156:	c0 c1       	brne	8001916e <uart_handler_2+0x56>
80019158:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001915c:	ec f8 00 34 	ld.w	r8,r6[52]
80019160:	f0 c8 fa a1 	sub	r8,r8,-1375
80019164:	12 9b       	mov	r11,r9
80019166:	10 9c       	mov	r12,r8
80019168:	f0 16 00 4f 	mcall	r6[316]
8001916c:	c1 08       	rjmp	8001918c <uart_handler_2+0x74>
8001916e:	ec f8 00 34 	ld.w	r8,r6[52]
80019172:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019176:	70 18       	ld.w	r8,r8[0x4]
80019178:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001917c:	ec f9 00 34 	ld.w	r9,r6[52]
80019180:	f2 f9 06 64 	ld.w	r9,r9[1636]
80019184:	72 59       	ld.w	r9,r9[0x14]
80019186:	14 9b       	mov	r11,r10
80019188:	12 9c       	mov	r12,r9
8001918a:	5d 18       	icall	r8
8001918c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019190:	e2 18 00 02 	andl	r8,0x2,COH
80019194:	c2 d0       	breq	800191ee <uart_handler_2+0xd6>
80019196:	ec f8 00 34 	ld.w	r8,r6[52]
8001919a:	f0 c8 fb a4 	sub	r8,r8,-1116
8001919e:	10 9c       	mov	r12,r8
800191a0:	f0 16 00 2c 	mcall	r6[176]
800191a4:	18 98       	mov	r8,r12
800191a6:	58 08       	cp.w	r8,0
800191a8:	e0 8a 00 13 	brle	800191ce <uart_handler_2+0xb6>
800191ac:	ec f8 00 34 	ld.w	r8,r6[52]
800191b0:	f0 c8 fb a4 	sub	r8,r8,-1116
800191b4:	10 9c       	mov	r12,r8
800191b6:	f0 16 00 42 	mcall	r6[264]
800191ba:	18 98       	mov	r8,r12
800191bc:	ef 68 ff fb 	st.b	r7[-5],r8
800191c0:	ec f8 00 34 	ld.w	r8,r6[52]
800191c4:	f0 f8 04 54 	ld.w	r8,r8[1108]
800191c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800191cc:	91 79       	st.w	r8[0x1c],r9
800191ce:	ec f8 00 34 	ld.w	r8,r6[52]
800191d2:	f0 c8 fb a4 	sub	r8,r8,-1116
800191d6:	10 9c       	mov	r12,r8
800191d8:	f0 16 00 2c 	mcall	r6[176]
800191dc:	18 98       	mov	r8,r12
800191de:	58 08       	cp.w	r8,0
800191e0:	c0 71       	brne	800191ee <uart_handler_2+0xd6>
800191e2:	ec f8 00 34 	ld.w	r8,r6[52]
800191e6:	f0 f8 04 54 	ld.w	r8,r8[1108]
800191ea:	30 29       	mov	r9,2
800191ec:	91 39       	st.w	r8[0xc],r9
800191ee:	2f ed       	sub	sp,-8
800191f0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800191f4:	d6 03       	rete
800191f6:	00 00       	add	r0,r0
800191f8:	80 01       	ld.sh	r1,r0[0x0]
800191fa:	8f a6       	st.w	r7[0x28],r6

800191fc <uart_handler_3>:
UART_HANDLER(3);
800191fc:	eb cd 40 c0 	pushm	r6-r7,lr
80019200:	1a 97       	mov	r7,sp
80019202:	20 2d       	sub	sp,8
80019204:	4b 66       	lddpc	r6,800192dc <uart_handler_3+0xe0>
80019206:	1e 26       	rsub	r6,pc
80019208:	ec f8 00 34 	ld.w	r8,r6[52]
8001920c:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019210:	70 58       	ld.w	r8,r8[0x14]
80019212:	ef 48 ff fc 	st.w	r7[-4],r8
80019216:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001921a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001921e:	5c 58       	castu.b	r8
80019220:	c2 80       	breq	80019270 <uart_handler_3+0x74>
80019222:	ec f8 00 34 	ld.w	r8,r6[52]
80019226:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001922a:	70 68       	ld.w	r8,r8[0x18]
8001922c:	ef 68 ff fb 	st.b	r7[-5],r8
80019230:	ec f8 00 34 	ld.w	r8,r6[52]
80019234:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80019238:	58 08       	cp.w	r8,0
8001923a:	c0 c1       	brne	80019252 <uart_handler_3+0x56>
8001923c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019240:	ec f8 00 34 	ld.w	r8,r6[52]
80019244:	f0 c8 f8 79 	sub	r8,r8,-1927
80019248:	12 9b       	mov	r11,r9
8001924a:	10 9c       	mov	r12,r8
8001924c:	f0 16 00 4f 	mcall	r6[316]
80019250:	c1 08       	rjmp	80019270 <uart_handler_3+0x74>
80019252:	ec f8 00 34 	ld.w	r8,r6[52]
80019256:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001925a:	70 18       	ld.w	r8,r8[0x4]
8001925c:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019260:	ec f9 00 34 	ld.w	r9,r6[52]
80019264:	f2 f9 08 8c 	ld.w	r9,r9[2188]
80019268:	72 59       	ld.w	r9,r9[0x14]
8001926a:	14 9b       	mov	r11,r10
8001926c:	12 9c       	mov	r12,r9
8001926e:	5d 18       	icall	r8
80019270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019274:	e2 18 00 02 	andl	r8,0x2,COH
80019278:	c2 d0       	breq	800192d2 <uart_handler_3+0xd6>
8001927a:	ec f8 00 34 	ld.w	r8,r6[52]
8001927e:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019282:	10 9c       	mov	r12,r8
80019284:	f0 16 00 2c 	mcall	r6[176]
80019288:	18 98       	mov	r8,r12
8001928a:	58 08       	cp.w	r8,0
8001928c:	e0 8a 00 13 	brle	800192b2 <uart_handler_3+0xb6>
80019290:	ec f8 00 34 	ld.w	r8,r6[52]
80019294:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019298:	10 9c       	mov	r12,r8
8001929a:	f0 16 00 42 	mcall	r6[264]
8001929e:	18 98       	mov	r8,r12
800192a0:	ef 68 ff fb 	st.b	r7[-5],r8
800192a4:	ec f8 00 34 	ld.w	r8,r6[52]
800192a8:	f0 f8 06 7c 	ld.w	r8,r8[1660]
800192ac:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800192b0:	91 79       	st.w	r8[0x1c],r9
800192b2:	ec f8 00 34 	ld.w	r8,r6[52]
800192b6:	f0 c8 f9 7c 	sub	r8,r8,-1668
800192ba:	10 9c       	mov	r12,r8
800192bc:	f0 16 00 2c 	mcall	r6[176]
800192c0:	18 98       	mov	r8,r12
800192c2:	58 08       	cp.w	r8,0
800192c4:	c0 71       	brne	800192d2 <uart_handler_3+0xd6>
800192c6:	ec f8 00 34 	ld.w	r8,r6[52]
800192ca:	f0 f8 06 7c 	ld.w	r8,r8[1660]
800192ce:	30 29       	mov	r9,2
800192d0:	91 39       	st.w	r8[0xc],r9
800192d2:	2f ed       	sub	sp,-8
800192d4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800192d8:	d6 03       	rete
800192da:	00 00       	add	r0,r0
800192dc:	80 01       	ld.sh	r1,r0[0x0]
800192de:	90 8a       	ld.uh	r10,r8[0x0]

800192e0 <uart_handler_4>:
UART_HANDLER(4);
800192e0:	eb cd 40 c0 	pushm	r6-r7,lr
800192e4:	1a 97       	mov	r7,sp
800192e6:	20 2d       	sub	sp,8
800192e8:	4b 66       	lddpc	r6,800193c0 <uart_handler_4+0xe0>
800192ea:	1e 26       	rsub	r6,pc
800192ec:	ec f8 00 34 	ld.w	r8,r6[52]
800192f0:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800192f4:	70 58       	ld.w	r8,r8[0x14]
800192f6:	ef 48 ff fc 	st.w	r7[-4],r8
800192fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019302:	5c 58       	castu.b	r8
80019304:	c2 80       	breq	80019354 <uart_handler_4+0x74>
80019306:	ec f8 00 34 	ld.w	r8,r6[52]
8001930a:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001930e:	70 68       	ld.w	r8,r8[0x18]
80019310:	ef 68 ff fb 	st.b	r7[-5],r8
80019314:	ec f8 00 34 	ld.w	r8,r6[52]
80019318:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001931c:	58 08       	cp.w	r8,0
8001931e:	c0 c1       	brne	80019336 <uart_handler_4+0x56>
80019320:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019324:	ec f8 00 34 	ld.w	r8,r6[52]
80019328:	f0 c8 f6 51 	sub	r8,r8,-2479
8001932c:	12 9b       	mov	r11,r9
8001932e:	10 9c       	mov	r12,r8
80019330:	f0 16 00 4f 	mcall	r6[316]
80019334:	c1 08       	rjmp	80019354 <uart_handler_4+0x74>
80019336:	ec f8 00 34 	ld.w	r8,r6[52]
8001933a:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001933e:	70 18       	ld.w	r8,r8[0x4]
80019340:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019344:	ec f9 00 34 	ld.w	r9,r6[52]
80019348:	f2 f9 0a b4 	ld.w	r9,r9[2740]
8001934c:	72 59       	ld.w	r9,r9[0x14]
8001934e:	14 9b       	mov	r11,r10
80019350:	12 9c       	mov	r12,r9
80019352:	5d 18       	icall	r8
80019354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019358:	e2 18 00 02 	andl	r8,0x2,COH
8001935c:	c2 d0       	breq	800193b6 <uart_handler_4+0xd6>
8001935e:	ec f8 00 34 	ld.w	r8,r6[52]
80019362:	f0 c8 f7 54 	sub	r8,r8,-2220
80019366:	10 9c       	mov	r12,r8
80019368:	f0 16 00 2c 	mcall	r6[176]
8001936c:	18 98       	mov	r8,r12
8001936e:	58 08       	cp.w	r8,0
80019370:	e0 8a 00 13 	brle	80019396 <uart_handler_4+0xb6>
80019374:	ec f8 00 34 	ld.w	r8,r6[52]
80019378:	f0 c8 f7 54 	sub	r8,r8,-2220
8001937c:	10 9c       	mov	r12,r8
8001937e:	f0 16 00 42 	mcall	r6[264]
80019382:	18 98       	mov	r8,r12
80019384:	ef 68 ff fb 	st.b	r7[-5],r8
80019388:	ec f8 00 34 	ld.w	r8,r6[52]
8001938c:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019390:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019394:	91 79       	st.w	r8[0x1c],r9
80019396:	ec f8 00 34 	ld.w	r8,r6[52]
8001939a:	f0 c8 f7 54 	sub	r8,r8,-2220
8001939e:	10 9c       	mov	r12,r8
800193a0:	f0 16 00 2c 	mcall	r6[176]
800193a4:	18 98       	mov	r8,r12
800193a6:	58 08       	cp.w	r8,0
800193a8:	c0 71       	brne	800193b6 <uart_handler_4+0xd6>
800193aa:	ec f8 00 34 	ld.w	r8,r6[52]
800193ae:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800193b2:	30 29       	mov	r9,2
800193b4:	91 39       	st.w	r8[0xc],r9
800193b6:	2f ed       	sub	sp,-8
800193b8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800193bc:	d6 03       	rete
800193be:	00 00       	add	r0,r0
800193c0:	80 01       	ld.sh	r1,r0[0x0]
800193c2:	91 6e       	st.w	r8[0x18],lr

800193c4 <register_UART_handler>:


void register_UART_handler(int UID) {
800193c4:	eb cd 40 c0 	pushm	r6-r7,lr
800193c8:	1a 97       	mov	r7,sp
800193ca:	20 1d       	sub	sp,4
800193cc:	4a 56       	lddpc	r6,80019460 <register_UART_handler+0x9c>
800193ce:	1e 26       	rsub	r6,pc
800193d0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
800193d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800193d8:	58 28       	cp.w	r8,2
800193da:	c2 00       	breq	8001941a <register_UART_handler+0x56>
800193dc:	e0 89 00 07 	brgt	800193ea <register_UART_handler+0x26>
800193e0:	58 08       	cp.w	r8,0
800193e2:	c0 90       	breq	800193f4 <register_UART_handler+0x30>
800193e4:	58 18       	cp.w	r8,1
800193e6:	c0 f0       	breq	80019404 <register_UART_handler+0x40>
800193e8:	c3 98       	rjmp	8001945a <register_UART_handler+0x96>
800193ea:	58 38       	cp.w	r8,3
800193ec:	c2 20       	breq	80019430 <register_UART_handler+0x6c>
800193ee:	58 48       	cp.w	r8,4
800193f0:	c2 b0       	breq	80019446 <register_UART_handler+0x82>
800193f2:	c3 48       	rjmp	8001945a <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
800193f4:	30 1a       	mov	r10,1
800193f6:	e0 6b 02 60 	mov	r11,608
800193fa:	fe cc 04 9a 	sub	r12,pc,1178
800193fe:	f0 16 00 38 	mcall	r6[224]
80019402:	c2 c8       	rjmp	8001945a <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
80019404:	ec f8 00 34 	ld.w	r8,r6[52]
80019408:	f0 f8 02 30 	ld.w	r8,r8[560]
8001940c:	30 1a       	mov	r10,1
8001940e:	10 9b       	mov	r11,r8
80019410:	fe cc 03 dc 	sub	r12,pc,988
80019414:	f0 16 00 38 	mcall	r6[224]
80019418:	c2 18       	rjmp	8001945a <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
8001941a:	ec f8 00 34 	ld.w	r8,r6[52]
8001941e:	f0 f8 04 58 	ld.w	r8,r8[1112]
80019422:	30 1a       	mov	r10,1
80019424:	10 9b       	mov	r11,r8
80019426:	fe cc 03 0e 	sub	r12,pc,782
8001942a:	f0 16 00 38 	mcall	r6[224]
8001942e:	c1 68       	rjmp	8001945a <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
80019430:	ec f8 00 34 	ld.w	r8,r6[52]
80019434:	f0 f8 06 80 	ld.w	r8,r8[1664]
80019438:	30 1a       	mov	r10,1
8001943a:	10 9b       	mov	r11,r8
8001943c:	fe cc 02 40 	sub	r12,pc,576
80019440:	f0 16 00 38 	mcall	r6[224]
80019444:	c0 b8       	rjmp	8001945a <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
80019446:	ec f8 00 34 	ld.w	r8,r6[52]
8001944a:	f0 f8 08 a8 	ld.w	r8,r8[2216]
8001944e:	30 1a       	mov	r10,1
80019450:	10 9b       	mov	r11,r8
80019452:	fe cc 01 72 	sub	r12,pc,370
80019456:	f0 16 00 38 	mcall	r6[224]

	}
	
}
8001945a:	2f fd       	sub	sp,-4
8001945c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019460:	80 01       	ld.sh	r1,r0[0x0]
80019462:	92 52       	ld.sh	r2,r9[0xa]

80019464 <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
80019464:	eb cd 40 c0 	pushm	r6-r7,lr
80019468:	1a 97       	mov	r7,sp
8001946a:	20 1d       	sub	sp,4
8001946c:	4e 16       	lddpc	r6,800195f0 <init_UART_int+0x18c>
8001946e:	1e 26       	rsub	r6,pc
80019470:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
80019474:	ee fa ff fc 	ld.w	r10,r7[-4]
80019478:	ec f9 00 34 	ld.w	r9,r6[52]
8001947c:	e0 68 02 28 	mov	r8,552
80019480:	f4 08 02 48 	mul	r8,r10,r8
80019484:	f2 08 00 08 	add	r8,r9,r8
80019488:	70 08       	ld.w	r8,r8[0x0]
8001948a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001948e:	58 08       	cp.w	r8,0
80019490:	e0 8a 00 21 	brle	800194d2 <init_UART_int+0x6e>
80019494:	ee fa ff fc 	ld.w	r10,r7[-4]
80019498:	ec f9 00 34 	ld.w	r9,r6[52]
8001949c:	e0 68 02 28 	mov	r8,552
800194a0:	f4 08 02 48 	mul	r8,r10,r8
800194a4:	f2 08 00 08 	add	r8,r9,r8
800194a8:	f0 c8 fd dc 	sub	r8,r8,-548
800194ac:	11 98       	ld.ub	r8,r8[0x1]
800194ae:	10 99       	mov	r9,r8
800194b0:	ee fb ff fc 	ld.w	r11,r7[-4]
800194b4:	ec fa 00 34 	ld.w	r10,r6[52]
800194b8:	e0 68 02 28 	mov	r8,552
800194bc:	f6 08 02 48 	mul	r8,r11,r8
800194c0:	f4 08 00 08 	add	r8,r10,r8
800194c4:	f0 c8 fd dc 	sub	r8,r8,-548
800194c8:	11 88       	ld.ub	r8,r8[0x0]
800194ca:	12 9b       	mov	r11,r9
800194cc:	10 9c       	mov	r12,r8
800194ce:	f0 16 00 3c 	mcall	r6[240]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
800194d2:	ee fa ff fc 	ld.w	r10,r7[-4]
800194d6:	ec f9 00 34 	ld.w	r9,r6[52]
800194da:	e0 68 02 28 	mov	r8,552
800194de:	f4 08 02 48 	mul	r8,r10,r8
800194e2:	f2 08 00 08 	add	r8,r9,r8
800194e6:	70 08       	ld.w	r8,r8[0x0]
800194e8:	e2 18 00 02 	andl	r8,0x2,COH
800194ec:	58 08       	cp.w	r8,0
800194ee:	e0 8a 00 21 	brle	80019530 <init_UART_int+0xcc>
800194f2:	ee fa ff fc 	ld.w	r10,r7[-4]
800194f6:	ec f9 00 34 	ld.w	r9,r6[52]
800194fa:	e0 68 02 28 	mov	r8,552
800194fe:	f4 08 02 48 	mul	r8,r10,r8
80019502:	f2 08 00 08 	add	r8,r9,r8
80019506:	f0 c8 fd dc 	sub	r8,r8,-548
8001950a:	11 b8       	ld.ub	r8,r8[0x3]
8001950c:	10 99       	mov	r9,r8
8001950e:	ee fb ff fc 	ld.w	r11,r7[-4]
80019512:	ec fa 00 34 	ld.w	r10,r6[52]
80019516:	e0 68 02 28 	mov	r8,552
8001951a:	f6 08 02 48 	mul	r8,r11,r8
8001951e:	f4 08 00 08 	add	r8,r10,r8
80019522:	f0 c8 fd dc 	sub	r8,r8,-548
80019526:	11 a8       	ld.ub	r8,r8[0x2]
80019528:	12 9b       	mov	r11,r9
8001952a:	10 9c       	mov	r12,r8
8001952c:	f0 16 00 3c 	mcall	r6[240]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
80019530:	fe b0 fd 0c 	rcall	80018f48 <sysclk_get_cpu_hz>
80019534:	18 98       	mov	r8,r12
80019536:	10 9a       	mov	r10,r8
80019538:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001953c:	e0 68 02 28 	mov	r8,552
80019540:	f2 08 02 48 	mul	r8,r9,r8
80019544:	f0 c9 fd e8 	sub	r9,r8,-536
80019548:	ec f8 00 34 	ld.w	r8,r6[52]
8001954c:	10 09       	add	r9,r8
8001954e:	ee fc ff fc 	ld.w	r12,r7[-4]
80019552:	ec f8 00 34 	ld.w	r8,r6[52]
80019556:	e0 6b 00 8a 	mov	r11,138
8001955a:	f8 0b 02 4b 	mul	r11,r12,r11
8001955e:	2f fb       	sub	r11,-1
80019560:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80019564:	12 9b       	mov	r11,r9
80019566:	10 9c       	mov	r12,r8
80019568:	f0 16 00 62 	mcall	r6[392]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
8001956c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019570:	f0 16 01 f3 	mcall	r6[1996]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
80019574:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019578:	e0 68 02 28 	mov	r8,552
8001957c:	f2 08 02 48 	mul	r8,r9,r8
80019580:	f0 c9 ff f4 	sub	r9,r8,-12
80019584:	ec f8 00 34 	ld.w	r8,r6[52]
80019588:	f2 08 00 08 	add	r8,r9,r8
8001958c:	10 9c       	mov	r12,r8
8001958e:	f0 16 01 26 	mcall	r6[1176]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
80019592:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019596:	e0 68 02 28 	mov	r8,552
8001959a:	f2 08 02 48 	mul	r8,r9,r8
8001959e:	f0 c9 fe f4 	sub	r9,r8,-268
800195a2:	ec f8 00 34 	ld.w	r8,r6[52]
800195a6:	f2 08 00 08 	add	r8,r9,r8
800195aa:	2f d8       	sub	r8,-3
800195ac:	10 9c       	mov	r12,r8
800195ae:	f0 16 01 26 	mcall	r6[1176]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
800195b2:	ee fa ff fc 	ld.w	r10,r7[-4]
800195b6:	ec f9 00 34 	ld.w	r9,r6[52]
800195ba:	e0 68 02 28 	mov	r8,552
800195be:	f4 08 02 48 	mul	r8,r10,r8
800195c2:	f2 08 00 08 	add	r8,r9,r8
800195c6:	70 08       	ld.w	r8,r8[0x0]
800195c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800195cc:	5c 58       	castu.b	r8
800195ce:	c0 e0       	breq	800195ea <init_UART_int+0x186>
800195d0:	ee fa ff fc 	ld.w	r10,r7[-4]
800195d4:	ec f8 00 34 	ld.w	r8,r6[52]
800195d8:	e0 69 00 8a 	mov	r9,138
800195dc:	f4 09 02 49 	mul	r9,r10,r9
800195e0:	2f f9       	sub	r9,-1
800195e2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800195e6:	30 19       	mov	r9,1
800195e8:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
800195ea:	2f fd       	sub	sp,-4
800195ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195f0:	80 01       	ld.sh	r1,r0[0x0]
800195f2:	92 f2       	ld.uh	r2,r9[0xe]

800195f4 <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
800195f4:	eb cd 40 c0 	pushm	r6-r7,lr
800195f8:	1a 97       	mov	r7,sp
800195fa:	20 1d       	sub	sp,4
800195fc:	48 86       	lddpc	r6,8001961c <uart_int_get_byte+0x28>
800195fe:	1e 26       	rsub	r6,pc
80019600:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
80019604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019608:	f0 c8 fe f1 	sub	r8,r8,-271
8001960c:	10 9c       	mov	r12,r8
8001960e:	f0 16 00 42 	mcall	r6[264]
80019612:	18 98       	mov	r8,r12
}
80019614:	10 9c       	mov	r12,r8
80019616:	2f fd       	sub	sp,-4
80019618:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001961c:	80 01       	ld.sh	r1,r0[0x0]
8001961e:	94 82       	ld.uh	r2,r10[0x0]

80019620 <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
80019620:	eb cd 40 c0 	pushm	r6-r7,lr
80019624:	1a 97       	mov	r7,sp
80019626:	20 1d       	sub	sp,4
80019628:	48 86       	lddpc	r6,80019648 <uart_int_bytes_available+0x28>
8001962a:	1e 26       	rsub	r6,pc
8001962c:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
80019630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019634:	f0 c8 fe f1 	sub	r8,r8,-271
80019638:	10 9c       	mov	r12,r8
8001963a:	f0 16 00 2c 	mcall	r6[176]
8001963e:	18 98       	mov	r8,r12
}
80019640:	10 9c       	mov	r12,r8
80019642:	2f fd       	sub	sp,-4
80019644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019648:	80 01       	ld.sh	r1,r0[0x0]
8001964a:	94 ae       	ld.uh	lr,r10[0x4]

8001964c <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
8001964c:	eb cd 40 c0 	pushm	r6-r7,lr
80019650:	1a 97       	mov	r7,sp
80019652:	20 2d       	sub	sp,8
80019654:	49 56       	lddpc	r6,800196a8 <uart_int_send_byte+0x5c>
80019656:	1e 26       	rsub	r6,pc
80019658:	ef 4c ff fc 	st.w	r7[-4],r12
8001965c:	16 98       	mov	r8,r11
8001965e:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
80019662:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80019666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001966a:	2f 48       	sub	r8,-12
8001966c:	12 9b       	mov	r11,r9
8001966e:	10 9c       	mov	r12,r8
80019670:	f0 16 00 4f 	mcall	r6[316]
80019674:	18 98       	mov	r8,r12
80019676:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001967a:	30 08       	mov	r8,0
8001967c:	f0 09 18 00 	cp.b	r9,r8
80019680:	cf 15       	brlt	80019662 <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
80019682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019686:	2f 48       	sub	r8,-12
80019688:	10 9c       	mov	r12,r8
8001968a:	f0 16 00 2c 	mcall	r6[176]
8001968e:	18 98       	mov	r8,r12
80019690:	58 08       	cp.w	r8,0
80019692:	e0 8a 00 07 	brle	800196a0 <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
80019696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001969a:	70 18       	ld.w	r8,r8[0x4]
8001969c:	30 29       	mov	r9,2
8001969e:	91 29       	st.w	r8[0x8],r9
	} 		
}
800196a0:	2f ed       	sub	sp,-8
800196a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800196a6:	00 00       	add	r0,r0
800196a8:	80 01       	ld.sh	r1,r0[0x0]
800196aa:	94 da       	ld.uh	r10,r10[0xa]

800196ac <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
800196ac:	eb cd 40 c0 	pushm	r6-r7,lr
800196b0:	1a 97       	mov	r7,sp
800196b2:	20 1d       	sub	sp,4
800196b4:	48 b6       	lddpc	r6,800196e0 <uart_int_flush+0x34>
800196b6:	1e 26       	rsub	r6,pc
800196b8:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
800196bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800196c0:	70 18       	ld.w	r8,r8[0x4]
800196c2:	30 29       	mov	r9,2
800196c4:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
800196c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800196ca:	2f 48       	sub	r8,-12
800196cc:	10 9c       	mov	r12,r8
800196ce:	f0 16 01 18 	mcall	r6[1120]
800196d2:	18 98       	mov	r8,r12
800196d4:	5c 58       	castu.b	r8
800196d6:	cf 80       	breq	800196c6 <uart_int_flush+0x1a>
}
800196d8:	2f fd       	sub	sp,-4
800196da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800196de:	00 00       	add	r0,r0
800196e0:	80 01       	ld.sh	r1,r0[0x0]
800196e2:	95 3a       	st.w	r10[0xc],r10

800196e4 <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
800196e4:	eb cd 40 c0 	pushm	r6-r7,lr
800196e8:	1a 97       	mov	r7,sp
800196ea:	20 1d       	sub	sp,4
800196ec:	48 96       	lddpc	r6,80019710 <uart_out_buffer_empty+0x2c>
800196ee:	1e 26       	rsub	r6,pc
800196f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
800196f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800196f8:	2f 48       	sub	r8,-12
800196fa:	10 9c       	mov	r12,r8
800196fc:	f0 16 01 18 	mcall	r6[1120]
80019700:	18 98       	mov	r8,r12
80019702:	5c 58       	castu.b	r8
80019704:	5c 68       	casts.b	r8
}
80019706:	10 9c       	mov	r12,r8
80019708:	2f fd       	sub	sp,-4
8001970a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001970e:	00 00       	add	r0,r0
80019710:	80 01       	ld.sh	r1,r0[0x0]
80019712:	95 72       	st.w	r10[0x1c],r2

80019714 <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
80019714:	eb cd 40 c0 	pushm	r6-r7,lr
80019718:	1a 97       	mov	r7,sp
8001971a:	20 1d       	sub	sp,4
8001971c:	48 96       	lddpc	r6,80019740 <get_UART_handle+0x2c>
8001971e:	1e 26       	rsub	r6,pc
80019720:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
80019724:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019728:	e0 68 02 28 	mov	r8,552
8001972c:	b1 39       	mul	r9,r8
8001972e:	ec f8 00 34 	ld.w	r8,r6[52]
80019732:	f2 08 00 08 	add	r8,r9,r8
}
80019736:	10 9c       	mov	r12,r8
80019738:	2f fd       	sub	sp,-4
8001973a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001973e:	00 00       	add	r0,r0
80019740:	80 01       	ld.sh	r1,r0[0x0]
80019742:	95 a2       	st.w	r10[0x28],r2

80019744 <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
80019744:	eb cd 40 c0 	pushm	r6-r7,lr
80019748:	1a 97       	mov	r7,sp
8001974a:	20 2d       	sub	sp,8
8001974c:	49 16       	lddpc	r6,80019790 <register_write_stream+0x4c>
8001974e:	1e 26       	rsub	r6,pc
80019750:	ef 4c ff fc 	st.w	r7[-4],r12
80019754:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
80019758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001975c:	30 09       	mov	r9,0
8001975e:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
80019760:	ec f9 05 d0 	ld.w	r9,r6[1488]
80019764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019768:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
8001976a:	ec f9 06 80 	ld.w	r9,r6[1664]
8001976e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019772:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
80019774:	ec f9 08 4c 	ld.w	r9,r6[2124]
80019778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001977c:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
8001977e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019782:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019786:	91 59       	st.w	r8[0x14],r9

}
80019788:	2f ed       	sub	sp,-8
8001978a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001978e:	00 00       	add	r0,r0
80019790:	80 01       	ld.sh	r1,r0[0x0]
80019792:	95 d2       	st.w	r10[0x34],r2

80019794 <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
80019794:	eb cd 40 80 	pushm	r7,lr
80019798:	1a 97       	mov	r7,sp
8001979a:	20 2d       	sub	sp,8
8001979c:	ef 4c ff fc 	st.w	r7[-4],r12
800197a0:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
800197a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197ac:	f1 49 02 14 	st.w	r8[532],r9
}
800197b0:	2f ed       	sub	sp,-8
800197b2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800197b8 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
800197b8:	eb cd 40 80 	pushm	r7,lr
800197bc:	1a 97       	mov	r7,sp
800197be:	20 2d       	sub	sp,8
800197c0:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
800197c4:	30 08       	mov	r8,0
800197c6:	ef 48 ff fc 	st.w	r7[-4],r8
800197ca:	c2 18       	rjmp	8001980c <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
800197cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800197d0:	ee fa ff f8 	ld.w	r10,r7[-8]
800197d4:	12 98       	mov	r8,r9
800197d6:	a1 78       	lsl	r8,0x1
800197d8:	12 08       	add	r8,r9
800197da:	2f f8       	sub	r8,-1
800197dc:	a5 68       	lsl	r8,0x4
800197de:	f4 08 00 08 	add	r8,r10,r8
800197e2:	30 09       	mov	r9,0
800197e4:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
800197e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800197ea:	ee fa ff f8 	ld.w	r10,r7[-8]
800197ee:	ee fb ff f8 	ld.w	r11,r7[-8]
800197f2:	12 98       	mov	r8,r9
800197f4:	a1 78       	lsl	r8,0x1
800197f6:	12 08       	add	r8,r9
800197f8:	a5 68       	lsl	r8,0x4
800197fa:	f6 08 00 08 	add	r8,r11,r8
800197fe:	2f 48       	sub	r8,-12
80019800:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
80019802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019806:	2f f8       	sub	r8,-1
80019808:	ef 48 ff fc 	st.w	r7[-4],r8
8001980c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019810:	11 88       	ld.ub	r8,r8[0x0]
80019812:	10 99       	mov	r9,r8
80019814:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019818:	10 39       	cp.w	r9,r8
8001981a:	fe 99 ff d9 	brgt	800197cc <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
8001981e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019822:	3f f9       	mov	r9,-1
80019824:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
80019826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001982a:	30 09       	mov	r9,0
8001982c:	91 29       	st.w	r8[0x8],r9
}
8001982e:	2f ed       	sub	sp,-8
80019830:	e3 cd 80 80 	ldm	sp++,r7,pc

80019834 <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
80019834:	eb cd 40 e0 	pushm	r5-r7,lr
80019838:	1a 97       	mov	r7,sp
8001983a:	20 5d       	sub	sp,20
8001983c:	4d f6       	lddpc	r6,800199b8 <register_task+0x184>
8001983e:	1e 26       	rsub	r6,pc
80019840:	ef 4c ff fc 	st.w	r7[-4],r12
80019844:	ef 4b ff f8 	st.w	r7[-8],r11
80019848:	ef 4a ff f4 	st.w	r7[-12],r10
8001984c:	ef 49 ff f0 	st.w	r7[-16],r9
80019850:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
80019854:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019858:	58 08       	cp.w	r8,0
8001985a:	c0 a5       	brlt	8001986e <register_task+0x3a>
8001985c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019860:	11 88       	ld.ub	r8,r8[0x0]
80019862:	10 99       	mov	r9,r8
80019864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019868:	10 39       	cp.w	r9,r8
8001986a:	e0 89 00 05 	brgt	80019874 <register_task+0x40>
		return -1;
8001986e:	e0 68 00 ff 	mov	r8,255
80019872:	c9 f8       	rjmp	800199b0 <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
80019874:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001987c:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019880:	ee fb ff fc 	ld.w	r11,r7[-4]
80019884:	12 98       	mov	r8,r9
80019886:	a1 78       	lsl	r8,0x1
80019888:	12 08       	add	r8,r9
8001988a:	a1 78       	lsl	r8,0x1
8001988c:	2f f8       	sub	r8,-1
8001988e:	a3 78       	lsl	r8,0x3
80019890:	f6 08 00 08 	add	r8,r11,r8
80019894:	14 99       	mov	r9,r10
80019896:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
80019898:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001989c:	ee fa ff ec 	ld.w	r10,r7[-20]
800198a0:	ee fb ff fc 	ld.w	r11,r7[-4]
800198a4:	12 98       	mov	r8,r9
800198a6:	a1 78       	lsl	r8,0x1
800198a8:	12 08       	add	r8,r9
800198aa:	2f f8       	sub	r8,-1
800198ac:	a5 68       	lsl	r8,0x4
800198ae:	f6 08 00 08 	add	r8,r11,r8
800198b2:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
800198b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198b8:	ee fa ff fc 	ld.w	r10,r7[-4]
800198bc:	12 98       	mov	r8,r9
800198be:	a1 78       	lsl	r8,0x1
800198c0:	12 08       	add	r8,r9
800198c2:	a5 68       	lsl	r8,0x4
800198c4:	f4 08 00 08 	add	r8,r10,r8
800198c8:	2e 88       	sub	r8,-24
800198ca:	ee f9 ff f0 	ld.w	r9,r7[-16]
800198ce:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
800198d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198d4:	ee fa ff fc 	ld.w	r10,r7[-4]
800198d8:	12 98       	mov	r8,r9
800198da:	a1 78       	lsl	r8,0x1
800198dc:	12 08       	add	r8,r9
800198de:	a5 68       	lsl	r8,0x4
800198e0:	f4 08 00 08 	add	r8,r10,r8
800198e4:	2e 08       	sub	r8,-32
800198e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800198ea:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
800198ec:	ee f5 ff f8 	ld.w	r5,r7[-8]
800198f0:	f0 16 00 27 	mcall	r6[156]
800198f4:	18 99       	mov	r9,r12
800198f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800198fa:	0a 98       	mov	r8,r5
800198fc:	a1 78       	lsl	r8,0x1
800198fe:	0a 08       	add	r8,r5
80019900:	a5 68       	lsl	r8,0x4
80019902:	f4 08 00 08 	add	r8,r10,r8
80019906:	2d c8       	sub	r8,-36
80019908:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
8001990a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001990e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019912:	12 98       	mov	r8,r9
80019914:	a1 78       	lsl	r8,0x1
80019916:	12 08       	add	r8,r9
80019918:	a5 68       	lsl	r8,0x4
8001991a:	f4 08 00 08 	add	r8,r10,r8
8001991e:	2d 88       	sub	r8,-40
80019920:	30 09       	mov	r9,0
80019922:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
80019924:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019928:	ee fa ff fc 	ld.w	r10,r7[-4]
8001992c:	12 98       	mov	r8,r9
8001992e:	a1 78       	lsl	r8,0x1
80019930:	12 08       	add	r8,r9
80019932:	2f f8       	sub	r8,-1
80019934:	a5 68       	lsl	r8,0x4
80019936:	f4 08 00 08 	add	r8,r10,r8
8001993a:	2f 48       	sub	r8,-12
8001993c:	30 09       	mov	r9,0
8001993e:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
80019940:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019944:	ee fa ff fc 	ld.w	r10,r7[-4]
80019948:	12 98       	mov	r8,r9
8001994a:	a1 78       	lsl	r8,0x1
8001994c:	12 08       	add	r8,r9
8001994e:	a5 68       	lsl	r8,0x4
80019950:	f4 08 00 08 	add	r8,r10,r8
80019954:	2d 48       	sub	r8,-44
80019956:	30 09       	mov	r9,0
80019958:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
8001995a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001995e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019962:	f0 c9 ff ff 	sub	r9,r8,-1
80019966:	12 98       	mov	r8,r9
80019968:	a1 78       	lsl	r8,0x1
8001996a:	12 08       	add	r8,r9
8001996c:	a5 68       	lsl	r8,0x4
8001996e:	f4 08 00 08 	add	r8,r10,r8
80019972:	30 09       	mov	r9,0
80019974:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
80019976:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001997a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001997e:	12 98       	mov	r8,r9
80019980:	a1 78       	lsl	r8,0x1
80019982:	12 08       	add	r8,r9
80019984:	a5 68       	lsl	r8,0x4
80019986:	f4 08 00 08 	add	r8,r10,r8
8001998a:	2c c8       	sub	r8,-52
8001998c:	30 09       	mov	r9,0
8001998e:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
80019990:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019994:	ee fa ff fc 	ld.w	r10,r7[-4]
80019998:	12 98       	mov	r8,r9
8001999a:	a1 78       	lsl	r8,0x1
8001999c:	12 08       	add	r8,r9
8001999e:	a5 68       	lsl	r8,0x4
800199a0:	f4 08 00 08 	add	r8,r10,r8
800199a4:	2c 88       	sub	r8,-56
800199a6:	30 09       	mov	r9,0
800199a8:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
800199aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800199ae:	5c 58       	castu.b	r8
}
800199b0:	10 9c       	mov	r12,r8
800199b2:	2f bd       	sub	sp,-20
800199b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800199b8:	80 01       	ld.sh	r1,r0[0x0]
800199ba:	96 c2       	ld.uh	r2,r11[0x8]

800199bc <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
800199bc:	eb cd 40 c0 	pushm	r6-r7,lr
800199c0:	1a 97       	mov	r7,sp
800199c2:	20 6d       	sub	sp,24
800199c4:	4a d6       	lddpc	r6,80019a78 <add_task+0xbc>
800199c6:	1e 26       	rsub	r6,pc
800199c8:	ef 4c ff f8 	st.w	r7[-8],r12
800199cc:	ef 4b ff f4 	st.w	r7[-12],r11
800199d0:	ef 4a ff f0 	st.w	r7[-16],r10
800199d4:	ef 49 ff ec 	st.w	r7[-20],r9
800199d8:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
800199dc:	30 08       	mov	r8,0
800199de:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
800199e2:	c0 68       	rjmp	800199ee <add_task+0x32>
800199e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199e8:	2f f8       	sub	r8,-1
800199ea:	ef 48 ff fc 	st.w	r7[-4],r8
800199ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800199f2:	11 88       	ld.ub	r8,r8[0x0]
800199f4:	10 99       	mov	r9,r8
800199f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199fa:	10 39       	cp.w	r9,r8
800199fc:	e0 8a 00 10 	brle	80019a1c <add_task+0x60>
80019a00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019a04:	ee fa ff f8 	ld.w	r10,r7[-8]
80019a08:	12 98       	mov	r8,r9
80019a0a:	a1 78       	lsl	r8,0x1
80019a0c:	12 08       	add	r8,r9
80019a0e:	2f f8       	sub	r8,-1
80019a10:	a5 68       	lsl	r8,0x4
80019a12:	f4 08 00 08 	add	r8,r10,r8
80019a16:	70 08       	ld.w	r8,r8[0x0]
80019a18:	58 08       	cp.w	r8,0
80019a1a:	ce 51       	brne	800199e4 <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
80019a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a20:	11 88       	ld.ub	r8,r8[0x0]
80019a22:	10 99       	mov	r9,r8
80019a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a28:	10 39       	cp.w	r9,r8
80019a2a:	e0 89 00 04 	brgt	80019a32 <add_task+0x76>
80019a2e:	30 08       	mov	r8,0
80019a30:	c2 08       	rjmp	80019a70 <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
80019a32:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019a36:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019a3a:	ee fa ff f4 	ld.w	r10,r7[-12]
80019a3e:	ee fb ff fc 	ld.w	r11,r7[-4]
80019a42:	ee fc ff f8 	ld.w	r12,r7[-8]
80019a46:	f0 16 00 5b 	mcall	r6[364]
	ts->tasks[task_slot].task_id=task_id;
80019a4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019a4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019a52:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019a56:	ee fb ff f8 	ld.w	r11,r7[-8]
80019a5a:	12 98       	mov	r8,r9
80019a5c:	a1 78       	lsl	r8,0x1
80019a5e:	12 08       	add	r8,r9
80019a60:	a1 78       	lsl	r8,0x1
80019a62:	2f f8       	sub	r8,-1
80019a64:	a3 78       	lsl	r8,0x3
80019a66:	f6 08 00 08 	add	r8,r11,r8
80019a6a:	14 99       	mov	r9,r10
80019a6c:	b0 69       	st.h	r8[0xc],r9
	return true;
80019a6e:	30 18       	mov	r8,1
}
80019a70:	10 9c       	mov	r12,r8
80019a72:	2f ad       	sub	sp,-24
80019a74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a78:	80 01       	ld.sh	r1,r0[0x0]
80019a7a:	98 4a       	ld.sh	r10,r12[0x8]

80019a7c <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
80019a7c:	eb cd 40 80 	pushm	r7,lr
80019a80:	1a 97       	mov	r7,sp
80019a82:	20 fd       	sub	sp,60
80019a84:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
80019a88:	30 08       	mov	r8,0
80019a8a:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
80019a8e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019a92:	11 89       	ld.ub	r9,r8[0x0]
80019a94:	30 18       	mov	r8,1
80019a96:	f0 09 18 00 	cp.b	r9,r8
80019a9a:	e0 8b 01 1d 	brhi	80019cd4 <sort_taskset_by_period+0x258>
80019a9e:	c2 39       	rjmp	80019ce4 <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
80019aa0:	30 18       	mov	r8,1
80019aa2:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
80019aa6:	30 08       	mov	r8,0
80019aa8:	ef 48 ff f8 	st.w	r7[-8],r8
80019aac:	c0 99       	rjmp	80019cbe <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019aae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ab2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ab6:	12 98       	mov	r8,r9
80019ab8:	a1 78       	lsl	r8,0x1
80019aba:	12 08       	add	r8,r9
80019abc:	2f f8       	sub	r8,-1
80019abe:	a5 68       	lsl	r8,0x4
80019ac0:	f4 08 00 08 	add	r8,r10,r8
80019ac4:	70 08       	ld.w	r8,r8[0x0]
80019ac6:	58 08       	cp.w	r8,0
80019ac8:	c1 11       	brne	80019aea <sort_taskset_by_period+0x6e>
80019aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ace:	f0 c9 ff ff 	sub	r9,r8,-1
80019ad2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ad6:	12 98       	mov	r8,r9
80019ad8:	a1 78       	lsl	r8,0x1
80019ada:	12 08       	add	r8,r9
80019adc:	2f f8       	sub	r8,-1
80019ade:	a5 68       	lsl	r8,0x4
80019ae0:	f4 08 00 08 	add	r8,r10,r8
80019ae4:	70 08       	ld.w	r8,r8[0x0]
80019ae6:	58 08       	cp.w	r8,0
80019ae8:	c3 e1       	brne	80019b64 <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019aea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019aee:	ee fa ff c4 	ld.w	r10,r7[-60]
80019af2:	12 98       	mov	r8,r9
80019af4:	a1 78       	lsl	r8,0x1
80019af6:	12 08       	add	r8,r9
80019af8:	2f f8       	sub	r8,-1
80019afa:	a5 68       	lsl	r8,0x4
80019afc:	f4 08 00 08 	add	r8,r10,r8
80019b00:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019b02:	58 08       	cp.w	r8,0
80019b04:	e0 80 00 d8 	breq	80019cb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b0c:	f0 c9 ff ff 	sub	r9,r8,-1
80019b10:	ee fa ff c4 	ld.w	r10,r7[-60]
80019b14:	12 98       	mov	r8,r9
80019b16:	a1 78       	lsl	r8,0x1
80019b18:	12 08       	add	r8,r9
80019b1a:	2f f8       	sub	r8,-1
80019b1c:	a5 68       	lsl	r8,0x4
80019b1e:	f4 08 00 08 	add	r8,r10,r8
80019b22:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019b24:	58 08       	cp.w	r8,0
80019b26:	e0 80 00 c7 	breq	80019cb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
80019b2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b2e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019b32:	12 98       	mov	r8,r9
80019b34:	a1 78       	lsl	r8,0x1
80019b36:	12 08       	add	r8,r9
80019b38:	a5 68       	lsl	r8,0x4
80019b3a:	f4 08 00 08 	add	r8,r10,r8
80019b3e:	2e 08       	sub	r8,-32
80019b40:	70 0a       	ld.w	r10,r8[0x0]
80019b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b46:	f0 c9 ff ff 	sub	r9,r8,-1
80019b4a:	ee fb ff c4 	ld.w	r11,r7[-60]
80019b4e:	12 98       	mov	r8,r9
80019b50:	a1 78       	lsl	r8,0x1
80019b52:	12 08       	add	r8,r9
80019b54:	a5 68       	lsl	r8,0x4
80019b56:	f6 08 00 08 	add	r8,r11,r8
80019b5a:	2e 08       	sub	r8,-32
80019b5c:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019b5e:	10 3a       	cp.w	r10,r8
80019b60:	e0 88 00 aa 	brls	80019cb4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
80019b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b68:	ee fa ff c4 	ld.w	r10,r7[-60]
80019b6c:	12 98       	mov	r8,r9
80019b6e:	a1 78       	lsl	r8,0x1
80019b70:	12 08       	add	r8,r9
80019b72:	a5 68       	lsl	r8,0x4
80019b74:	f4 08 00 08 	add	r8,r10,r8
80019b78:	2f 48       	sub	r8,-12
80019b7a:	ee cb 00 38 	sub	r11,r7,56
80019b7e:	10 9a       	mov	r10,r8
80019b80:	f6 c8 00 00 	sub	r8,r11,0
80019b84:	f4 c9 00 00 	sub	r9,r10,0
80019b88:	72 0c       	ld.w	r12,r9[0x0]
80019b8a:	91 0c       	st.w	r8[0x0],r12
80019b8c:	72 1c       	ld.w	r12,r9[0x4]
80019b8e:	91 1c       	st.w	r8[0x4],r12
80019b90:	72 2c       	ld.w	r12,r9[0x8]
80019b92:	91 2c       	st.w	r8[0x8],r12
80019b94:	72 39       	ld.w	r9,r9[0xc]
80019b96:	91 39       	st.w	r8[0xc],r9
80019b98:	f6 c8 ff f0 	sub	r8,r11,-16
80019b9c:	f4 c9 ff f0 	sub	r9,r10,-16
80019ba0:	72 0c       	ld.w	r12,r9[0x0]
80019ba2:	91 0c       	st.w	r8[0x0],r12
80019ba4:	72 1c       	ld.w	r12,r9[0x4]
80019ba6:	91 1c       	st.w	r8[0x4],r12
80019ba8:	72 2c       	ld.w	r12,r9[0x8]
80019baa:	91 2c       	st.w	r8[0x8],r12
80019bac:	72 39       	ld.w	r9,r9[0xc]
80019bae:	91 39       	st.w	r8[0xc],r9
80019bb0:	f6 c8 ff e0 	sub	r8,r11,-32
80019bb4:	f4 c9 ff e0 	sub	r9,r10,-32
80019bb8:	72 0a       	ld.w	r10,r9[0x0]
80019bba:	91 0a       	st.w	r8[0x0],r10
80019bbc:	72 1a       	ld.w	r10,r9[0x4]
80019bbe:	91 1a       	st.w	r8[0x4],r10
80019bc0:	72 2a       	ld.w	r10,r9[0x8]
80019bc2:	91 2a       	st.w	r8[0x8],r10
80019bc4:	72 39       	ld.w	r9,r9[0xc]
80019bc6:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
80019bc8:	ee fa ff f8 	ld.w	r10,r7[-8]
80019bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019bd0:	f0 c9 ff ff 	sub	r9,r8,-1
80019bd4:	ee fb ff c4 	ld.w	r11,r7[-60]
80019bd8:	14 98       	mov	r8,r10
80019bda:	a1 78       	lsl	r8,0x1
80019bdc:	14 08       	add	r8,r10
80019bde:	a5 68       	lsl	r8,0x4
80019be0:	f6 08 00 08 	add	r8,r11,r8
80019be4:	f0 ca ff f4 	sub	r10,r8,-12
80019be8:	ee fb ff c4 	ld.w	r11,r7[-60]
80019bec:	12 98       	mov	r8,r9
80019bee:	a1 78       	lsl	r8,0x1
80019bf0:	12 08       	add	r8,r9
80019bf2:	a5 68       	lsl	r8,0x4
80019bf4:	f6 08 00 08 	add	r8,r11,r8
80019bf8:	2f 48       	sub	r8,-12
80019bfa:	14 9b       	mov	r11,r10
80019bfc:	10 9a       	mov	r10,r8
80019bfe:	f6 c8 00 00 	sub	r8,r11,0
80019c02:	f4 c9 00 00 	sub	r9,r10,0
80019c06:	72 0c       	ld.w	r12,r9[0x0]
80019c08:	91 0c       	st.w	r8[0x0],r12
80019c0a:	72 1c       	ld.w	r12,r9[0x4]
80019c0c:	91 1c       	st.w	r8[0x4],r12
80019c0e:	72 2c       	ld.w	r12,r9[0x8]
80019c10:	91 2c       	st.w	r8[0x8],r12
80019c12:	72 39       	ld.w	r9,r9[0xc]
80019c14:	91 39       	st.w	r8[0xc],r9
80019c16:	f6 c8 ff f0 	sub	r8,r11,-16
80019c1a:	f4 c9 ff f0 	sub	r9,r10,-16
80019c1e:	72 0c       	ld.w	r12,r9[0x0]
80019c20:	91 0c       	st.w	r8[0x0],r12
80019c22:	72 1c       	ld.w	r12,r9[0x4]
80019c24:	91 1c       	st.w	r8[0x4],r12
80019c26:	72 2c       	ld.w	r12,r9[0x8]
80019c28:	91 2c       	st.w	r8[0x8],r12
80019c2a:	72 39       	ld.w	r9,r9[0xc]
80019c2c:	91 39       	st.w	r8[0xc],r9
80019c2e:	f6 c8 ff e0 	sub	r8,r11,-32
80019c32:	f4 c9 ff e0 	sub	r9,r10,-32
80019c36:	72 0a       	ld.w	r10,r9[0x0]
80019c38:	91 0a       	st.w	r8[0x0],r10
80019c3a:	72 1a       	ld.w	r10,r9[0x4]
80019c3c:	91 1a       	st.w	r8[0x4],r10
80019c3e:	72 2a       	ld.w	r10,r9[0x8]
80019c40:	91 2a       	st.w	r8[0x8],r10
80019c42:	72 39       	ld.w	r9,r9[0xc]
80019c44:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
80019c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c4a:	f0 c9 ff ff 	sub	r9,r8,-1
80019c4e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019c52:	12 98       	mov	r8,r9
80019c54:	a1 78       	lsl	r8,0x1
80019c56:	12 08       	add	r8,r9
80019c58:	a5 68       	lsl	r8,0x4
80019c5a:	f4 08 00 08 	add	r8,r10,r8
80019c5e:	2f 48       	sub	r8,-12
80019c60:	10 9b       	mov	r11,r8
80019c62:	ee ca 00 38 	sub	r10,r7,56
80019c66:	f6 c8 00 00 	sub	r8,r11,0
80019c6a:	f4 c9 00 00 	sub	r9,r10,0
80019c6e:	72 0c       	ld.w	r12,r9[0x0]
80019c70:	91 0c       	st.w	r8[0x0],r12
80019c72:	72 1c       	ld.w	r12,r9[0x4]
80019c74:	91 1c       	st.w	r8[0x4],r12
80019c76:	72 2c       	ld.w	r12,r9[0x8]
80019c78:	91 2c       	st.w	r8[0x8],r12
80019c7a:	72 39       	ld.w	r9,r9[0xc]
80019c7c:	91 39       	st.w	r8[0xc],r9
80019c7e:	f6 c8 ff f0 	sub	r8,r11,-16
80019c82:	f4 c9 ff f0 	sub	r9,r10,-16
80019c86:	72 0c       	ld.w	r12,r9[0x0]
80019c88:	91 0c       	st.w	r8[0x0],r12
80019c8a:	72 1c       	ld.w	r12,r9[0x4]
80019c8c:	91 1c       	st.w	r8[0x4],r12
80019c8e:	72 2c       	ld.w	r12,r9[0x8]
80019c90:	91 2c       	st.w	r8[0x8],r12
80019c92:	72 39       	ld.w	r9,r9[0xc]
80019c94:	91 39       	st.w	r8[0xc],r9
80019c96:	f6 c8 ff e0 	sub	r8,r11,-32
80019c9a:	f4 c9 ff e0 	sub	r9,r10,-32
80019c9e:	72 0a       	ld.w	r10,r9[0x0]
80019ca0:	91 0a       	st.w	r8[0x0],r10
80019ca2:	72 1a       	ld.w	r10,r9[0x4]
80019ca4:	91 1a       	st.w	r8[0x4],r10
80019ca6:	72 2a       	ld.w	r10,r9[0x8]
80019ca8:	91 2a       	st.w	r8[0x8],r10
80019caa:	72 39       	ld.w	r9,r9[0xc]
80019cac:	91 39       	st.w	r8[0xc],r9
				sorted=false;
80019cae:	30 08       	mov	r8,0
80019cb0:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
80019cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019cb8:	2f f8       	sub	r8,-1
80019cba:	ef 48 ff f8 	st.w	r7[-8],r8
80019cbe:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019cc2:	11 88       	ld.ub	r8,r8[0x0]
80019cc4:	f0 c9 00 01 	sub	r9,r8,1
80019cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ccc:	10 39       	cp.w	r9,r8
80019cce:	fe 99 fe f0 	brgt	80019aae <sort_taskset_by_period+0x32>
80019cd2:	c0 28       	rjmp	80019cd6 <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
80019cd4:	d7 03       	nop
80019cd6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019cda:	ec 18 00 01 	eorl	r8,0x1
80019cde:	5c 58       	castu.b	r8
80019ce0:	fe 91 fe e0 	brne	80019aa0 <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
80019ce4:	2f 1d       	sub	sp,-60
80019ce6:	e3 cd 80 80 	ldm	sp++,r7,pc

80019cea <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
80019cea:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80019cee:	1a 97       	mov	r7,sp
80019cf0:	20 9d       	sub	sp,36
80019cf2:	fe f6 04 0a 	ld.w	r6,pc[1034]
80019cf6:	1e 26       	rsub	r6,pc
80019cf8:	ef 4c ff e0 	st.w	r7[-32],r12
80019cfc:	16 98       	mov	r8,r11
80019cfe:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
80019d02:	30 08       	mov	r8,0
80019d04:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
80019d08:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019d0c:	70 28       	ld.w	r8,r8[0x8]
80019d0e:	ef 48 ff e4 	st.w	r7[-28],r8
80019d12:	e0 8f 01 e5 	bral	8001a0dc <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
80019d16:	f0 16 00 27 	mcall	r6[156]
80019d1a:	18 98       	mov	r8,r12
80019d1c:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
80019d20:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d24:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d28:	12 98       	mov	r8,r9
80019d2a:	a1 78       	lsl	r8,0x1
80019d2c:	12 08       	add	r8,r9
80019d2e:	2f f8       	sub	r8,-1
80019d30:	a5 68       	lsl	r8,0x4
80019d32:	f4 08 00 08 	add	r8,r10,r8
80019d36:	70 08       	ld.w	r8,r8[0x0]
80019d38:	58 08       	cp.w	r8,0
80019d3a:	e0 80 01 cc 	breq	8001a0d2 <run_scheduler_update+0x3e8>
80019d3e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d42:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d46:	12 98       	mov	r8,r9
80019d48:	a1 78       	lsl	r8,0x1
80019d4a:	12 08       	add	r8,r9
80019d4c:	a5 68       	lsl	r8,0x4
80019d4e:	f4 08 00 08 	add	r8,r10,r8
80019d52:	2e 88       	sub	r8,-24
80019d54:	70 08       	ld.w	r8,r8[0x0]
80019d56:	58 08       	cp.w	r8,0
80019d58:	e0 80 01 bd 	breq	8001a0d2 <run_scheduler_update+0x3e8>
80019d5c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d60:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d64:	12 98       	mov	r8,r9
80019d66:	a1 78       	lsl	r8,0x1
80019d68:	12 08       	add	r8,r9
80019d6a:	a5 68       	lsl	r8,0x4
80019d6c:	f4 08 00 08 	add	r8,r10,r8
80019d70:	2d c8       	sub	r8,-36
80019d72:	70 09       	ld.w	r9,r8[0x0]
80019d74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019d78:	10 39       	cp.w	r9,r8
80019d7a:	e0 8b 01 ac 	brhi	8001a0d2 <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
80019d7e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d82:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d86:	12 98       	mov	r8,r9
80019d88:	a1 78       	lsl	r8,0x1
80019d8a:	12 08       	add	r8,r9
80019d8c:	a5 68       	lsl	r8,0x4
80019d8e:	f4 08 00 08 	add	r8,r10,r8
80019d92:	2d c8       	sub	r8,-36
80019d94:	70 08       	ld.w	r8,r8[0x0]
80019d96:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019d9a:	10 19       	sub	r9,r8
80019d9c:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
80019da0:	f0 16 00 27 	mcall	r6[156]
80019da4:	18 98       	mov	r8,r12
80019da6:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
80019daa:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019dae:	ee fa ff e0 	ld.w	r10,r7[-32]
80019db2:	12 98       	mov	r8,r9
80019db4:	a1 78       	lsl	r8,0x1
80019db6:	12 08       	add	r8,r9
80019db8:	2f f8       	sub	r8,-1
80019dba:	a5 68       	lsl	r8,0x4
80019dbc:	f4 08 00 08 	add	r8,r10,r8
80019dc0:	70 08       	ld.w	r8,r8[0x0]
80019dc2:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
80019dc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019dca:	5d 18       	icall	r8
80019dcc:	18 98       	mov	r8,r12
80019dce:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
80019dd2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019dd6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dda:	12 98       	mov	r8,r9
80019ddc:	a1 78       	lsl	r8,0x1
80019dde:	12 08       	add	r8,r9
80019de0:	2f f8       	sub	r8,-1
80019de2:	a5 68       	lsl	r8,0x4
80019de4:	f4 08 00 08 	add	r8,r10,r8
80019de8:	2f 48       	sub	r8,-12
80019dea:	70 08       	ld.w	r8,r8[0x0]
80019dec:	58 08       	cp.w	r8,0
80019dee:	c0 40       	breq	80019df6 <run_scheduler_update+0x10c>
80019df0:	58 18       	cp.w	r8,1
80019df2:	c2 90       	breq	80019e44 <run_scheduler_update+0x15a>
80019df4:	c4 58       	rjmp	80019e7e <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
80019df6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019dfa:	ee fa ff e4 	ld.w	r10,r7[-28]
80019dfe:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e02:	14 98       	mov	r8,r10
80019e04:	a1 78       	lsl	r8,0x1
80019e06:	14 08       	add	r8,r10
80019e08:	a5 68       	lsl	r8,0x4
80019e0a:	f6 08 00 08 	add	r8,r11,r8
80019e0e:	2d c8       	sub	r8,-36
80019e10:	70 0b       	ld.w	r11,r8[0x0]
80019e12:	ee fa ff e4 	ld.w	r10,r7[-28]
80019e16:	ee fc ff e0 	ld.w	r12,r7[-32]
80019e1a:	14 98       	mov	r8,r10
80019e1c:	a1 78       	lsl	r8,0x1
80019e1e:	14 08       	add	r8,r10
80019e20:	a5 68       	lsl	r8,0x4
80019e22:	f8 08 00 08 	add	r8,r12,r8
80019e26:	2e 08       	sub	r8,-32
80019e28:	70 08       	ld.w	r8,r8[0x0]
80019e2a:	f6 08 00 0a 	add	r10,r11,r8
80019e2e:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e32:	12 98       	mov	r8,r9
80019e34:	a1 78       	lsl	r8,0x1
80019e36:	12 08       	add	r8,r9
80019e38:	a5 68       	lsl	r8,0x4
80019e3a:	f6 08 00 08 	add	r8,r11,r8
80019e3e:	2d c8       	sub	r8,-36
80019e40:	91 0a       	st.w	r8[0x0],r10
				break;
80019e42:	c1 e8       	rjmp	80019e7e <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
80019e44:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019e48:	f0 16 00 27 	mcall	r6[156]
80019e4c:	18 9a       	mov	r10,r12
80019e4e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e52:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e56:	12 98       	mov	r8,r9
80019e58:	a1 78       	lsl	r8,0x1
80019e5a:	12 08       	add	r8,r9
80019e5c:	a5 68       	lsl	r8,0x4
80019e5e:	f6 08 00 08 	add	r8,r11,r8
80019e62:	2e 08       	sub	r8,-32
80019e64:	70 08       	ld.w	r8,r8[0x0]
80019e66:	f4 08 00 09 	add	r9,r10,r8
80019e6a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e6e:	0a 98       	mov	r8,r5
80019e70:	a1 78       	lsl	r8,0x1
80019e72:	0a 08       	add	r8,r5
80019e74:	a5 68       	lsl	r8,0x4
80019e76:	f4 08 00 08 	add	r8,r10,r8
80019e7a:	2d c8       	sub	r8,-36
80019e7c:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
80019e7e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e82:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e86:	12 98       	mov	r8,r9
80019e88:	a1 78       	lsl	r8,0x1
80019e8a:	12 08       	add	r8,r9
80019e8c:	a5 68       	lsl	r8,0x4
80019e8e:	f4 08 00 08 	add	r8,r10,r8
80019e92:	2e 88       	sub	r8,-24
80019e94:	70 08       	ld.w	r8,r8[0x0]
80019e96:	58 18       	cp.w	r8,1
80019e98:	c0 e1       	brne	80019eb4 <run_scheduler_update+0x1ca>
80019e9a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e9e:	ee fa ff e0 	ld.w	r10,r7[-32]
80019ea2:	12 98       	mov	r8,r9
80019ea4:	a1 78       	lsl	r8,0x1
80019ea6:	12 08       	add	r8,r9
80019ea8:	a5 68       	lsl	r8,0x4
80019eaa:	f4 08 00 08 	add	r8,r10,r8
80019eae:	2e 88       	sub	r8,-24
80019eb0:	30 09       	mov	r9,0
80019eb2:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
80019eb4:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019eb8:	ee fa ff e0 	ld.w	r10,r7[-32]
80019ebc:	12 98       	mov	r8,r9
80019ebe:	a1 78       	lsl	r8,0x1
80019ec0:	12 08       	add	r8,r9
80019ec2:	a5 68       	lsl	r8,0x4
80019ec4:	f4 08 00 08 	add	r8,r10,r8
80019ec8:	2d c8       	sub	r8,-36
80019eca:	70 09       	ld.w	r9,r8[0x0]
80019ecc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019ed0:	10 39       	cp.w	r9,r8
80019ed2:	c3 92       	brcc	80019f44 <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
80019ed4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019ed8:	5c 38       	neg	r8
80019eda:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
80019ede:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019ee2:	ee fa ff e0 	ld.w	r10,r7[-32]
80019ee6:	12 98       	mov	r8,r9
80019ee8:	a1 78       	lsl	r8,0x1
80019eea:	12 08       	add	r8,r9
80019eec:	a5 68       	lsl	r8,0x4
80019eee:	f4 08 00 08 	add	r8,r10,r8
80019ef2:	2c 88       	sub	r8,-56
80019ef4:	70 08       	ld.w	r8,r8[0x0]
80019ef6:	f0 ca ff ff 	sub	r10,r8,-1
80019efa:	ee fb ff e0 	ld.w	r11,r7[-32]
80019efe:	12 98       	mov	r8,r9
80019f00:	a1 78       	lsl	r8,0x1
80019f02:	12 08       	add	r8,r9
80019f04:	a5 68       	lsl	r8,0x4
80019f06:	f6 08 00 08 	add	r8,r11,r8
80019f0a:	2c 88       	sub	r8,-56
80019f0c:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
80019f0e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f12:	ee fa ff e4 	ld.w	r10,r7[-28]
80019f16:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f1a:	14 98       	mov	r8,r10
80019f1c:	a1 78       	lsl	r8,0x1
80019f1e:	14 08       	add	r8,r10
80019f20:	a5 68       	lsl	r8,0x4
80019f22:	f6 08 00 08 	add	r8,r11,r8
80019f26:	2e 08       	sub	r8,-32
80019f28:	70 0a       	ld.w	r10,r8[0x0]
80019f2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019f2e:	10 0a       	add	r10,r8
80019f30:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f34:	12 98       	mov	r8,r9
80019f36:	a1 78       	lsl	r8,0x1
80019f38:	12 08       	add	r8,r9
80019f3a:	a5 68       	lsl	r8,0x4
80019f3c:	f6 08 00 08 	add	r8,r11,r8
80019f40:	2d c8       	sub	r8,-36
80019f42:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
80019f44:	ee fc ff e4 	ld.w	r12,r7[-28]
80019f48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f4c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f50:	f0 c9 ff ff 	sub	r9,r8,-1
80019f54:	12 98       	mov	r8,r9
80019f56:	a1 78       	lsl	r8,0x1
80019f58:	12 08       	add	r8,r9
80019f5a:	a5 68       	lsl	r8,0x4
80019f5c:	f4 08 00 08 	add	r8,r10,r8
80019f60:	70 09       	ld.w	r9,r8[0x0]
80019f62:	12 98       	mov	r8,r9
80019f64:	a3 78       	lsl	r8,0x3
80019f66:	f0 09 01 09 	sub	r9,r8,r9
80019f6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019f6e:	f2 08 00 08 	add	r8,r9,r8
80019f72:	f0 0a 16 03 	lsr	r10,r8,0x3
80019f76:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f7a:	f8 c9 ff ff 	sub	r9,r12,-1
80019f7e:	12 98       	mov	r8,r9
80019f80:	a1 78       	lsl	r8,0x1
80019f82:	12 08       	add	r8,r9
80019f84:	a5 68       	lsl	r8,0x4
80019f86:	f6 08 00 08 	add	r8,r11,r8
80019f8a:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
80019f8c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f90:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f94:	12 98       	mov	r8,r9
80019f96:	a1 78       	lsl	r8,0x1
80019f98:	12 08       	add	r8,r9
80019f9a:	a5 68       	lsl	r8,0x4
80019f9c:	f4 08 00 08 	add	r8,r10,r8
80019fa0:	2d 48       	sub	r8,-44
80019fa2:	70 09       	ld.w	r9,r8[0x0]
80019fa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019fa8:	10 39       	cp.w	r9,r8
80019faa:	c0 f2       	brcc	80019fc8 <run_scheduler_update+0x2de>
80019fac:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019fb0:	ee fa ff e0 	ld.w	r10,r7[-32]
80019fb4:	12 98       	mov	r8,r9
80019fb6:	a1 78       	lsl	r8,0x1
80019fb8:	12 08       	add	r8,r9
80019fba:	a5 68       	lsl	r8,0x4
80019fbc:	f4 08 00 08 	add	r8,r10,r8
80019fc0:	2d 48       	sub	r8,-44
80019fc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019fc6:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
80019fc8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019fcc:	ee fa ff e4 	ld.w	r10,r7[-28]
80019fd0:	ee fb ff e0 	ld.w	r11,r7[-32]
80019fd4:	14 98       	mov	r8,r10
80019fd6:	a1 78       	lsl	r8,0x1
80019fd8:	14 08       	add	r8,r10
80019fda:	a5 68       	lsl	r8,0x4
80019fdc:	f6 08 00 08 	add	r8,r11,r8
80019fe0:	2c c8       	sub	r8,-52
80019fe2:	70 0a       	ld.w	r10,r8[0x0]
80019fe4:	14 98       	mov	r8,r10
80019fe6:	a5 68       	lsl	r8,0x4
80019fe8:	f0 0a 01 0b 	sub	r11,r8,r10
80019fec:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019ff0:	ee fc ff e0 	ld.w	r12,r7[-32]
80019ff4:	f0 ca ff ff 	sub	r10,r8,-1
80019ff8:	14 98       	mov	r8,r10
80019ffa:	a1 78       	lsl	r8,0x1
80019ffc:	14 08       	add	r8,r10
80019ffe:	a5 68       	lsl	r8,0x4
8001a000:	f8 08 00 08 	add	r8,r12,r8
8001a004:	70 08       	ld.w	r8,r8[0x0]
8001a006:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a00a:	f4 08 01 0c 	sub	r12,r10,r8
8001a00e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a012:	ee fe ff e0 	ld.w	lr,r7[-32]
8001a016:	f0 ca ff ff 	sub	r10,r8,-1
8001a01a:	14 98       	mov	r8,r10
8001a01c:	a1 78       	lsl	r8,0x1
8001a01e:	14 08       	add	r8,r10
8001a020:	a5 68       	lsl	r8,0x4
8001a022:	fc 08 00 08 	add	r8,lr,r8
8001a026:	70 08       	ld.w	r8,r8[0x0]
8001a028:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a02c:	f4 08 01 08 	sub	r8,r10,r8
8001a030:	f8 08 02 48 	mul	r8,r12,r8
8001a034:	f6 08 00 08 	add	r8,r11,r8
8001a038:	f0 0a 16 04 	lsr	r10,r8,0x4
8001a03c:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a040:	12 98       	mov	r8,r9
8001a042:	a1 78       	lsl	r8,0x1
8001a044:	12 08       	add	r8,r9
8001a046:	a5 68       	lsl	r8,0x4
8001a048:	f6 08 00 08 	add	r8,r11,r8
8001a04c:	2c c8       	sub	r8,-52
8001a04e:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
8001a050:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001a054:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a058:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a05c:	12 98       	mov	r8,r9
8001a05e:	a1 78       	lsl	r8,0x1
8001a060:	12 08       	add	r8,r9
8001a062:	a5 68       	lsl	r8,0x4
8001a064:	f4 08 00 08 	add	r8,r10,r8
8001a068:	2d 88       	sub	r8,-40
8001a06a:	70 09       	ld.w	r9,r8[0x0]
8001a06c:	12 98       	mov	r8,r9
8001a06e:	a3 78       	lsl	r8,0x3
8001a070:	f0 09 01 03 	sub	r3,r8,r9
8001a074:	f0 16 00 27 	mcall	r6[156]
8001a078:	18 99       	mov	r9,r12
8001a07a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a07e:	f2 08 01 08 	sub	r8,r9,r8
8001a082:	e6 08 00 08 	add	r8,r3,r8
8001a086:	f0 09 16 03 	lsr	r9,r8,0x3
8001a08a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a08e:	0a 98       	mov	r8,r5
8001a090:	a1 78       	lsl	r8,0x1
8001a092:	0a 08       	add	r8,r5
8001a094:	a5 68       	lsl	r8,0x4
8001a096:	f4 08 00 08 	add	r8,r10,r8
8001a09a:	2d 88       	sub	r8,-40
8001a09c:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
8001a09e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001a0a2:	58 18       	cp.w	r8,1
8001a0a4:	c0 81       	brne	8001a0b4 <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
8001a0a6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a0aa:	30 09       	mov	r9,0
8001a0ac:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a0ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a0b2:	c2 08       	rjmp	8001a0f2 <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
8001a0b4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a0b8:	11 88       	ld.ub	r8,r8[0x0]
8001a0ba:	10 99       	mov	r9,r8
8001a0bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a0c0:	10 39       	cp.w	r9,r8
8001a0c2:	c0 51       	brne	8001a0cc <run_scheduler_update+0x3e2>
8001a0c4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a0c8:	30 09       	mov	r9,0
8001a0ca:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a0cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a0d0:	c1 18       	rjmp	8001a0f2 <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001a0d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a0d6:	2f f8       	sub	r8,-1
8001a0d8:	ef 48 ff e4 	st.w	r7[-28],r8
8001a0dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a0e0:	11 88       	ld.ub	r8,r8[0x0]
8001a0e2:	10 99       	mov	r9,r8
8001a0e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a0e8:	10 39       	cp.w	r9,r8
8001a0ea:	fe 99 fe 16 	brgt	80019d16 <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
8001a0ee:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
8001a0f2:	10 9c       	mov	r12,r8
8001a0f4:	2f 7d       	sub	sp,-36
8001a0f6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001a0fa:	00 00       	add	r0,r0
8001a0fc:	80 01       	ld.sh	r1,r0[0x0]
8001a0fe:	9b 7a       	st.w	sp[0x1c],r10

8001a100 <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001a100:	eb cd 40 80 	pushm	r7,lr
8001a104:	1a 97       	mov	r7,sp
8001a106:	20 3d       	sub	sp,12
8001a108:	ef 4c ff f8 	st.w	r7[-8],r12
8001a10c:	16 98       	mov	r8,r11
8001a10e:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001a112:	30 08       	mov	r8,0
8001a114:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001a118:	30 08       	mov	r8,0
8001a11a:	ef 48 ff fc 	st.w	r7[-4],r8
8001a11e:	c2 58       	rjmp	8001a168 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001a120:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a124:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a128:	12 98       	mov	r8,r9
8001a12a:	a1 78       	lsl	r8,0x1
8001a12c:	12 08       	add	r8,r9
8001a12e:	a1 78       	lsl	r8,0x1
8001a130:	2f f8       	sub	r8,-1
8001a132:	a3 78       	lsl	r8,0x3
8001a134:	f4 08 00 08 	add	r8,r10,r8
8001a138:	90 68       	ld.sh	r8,r8[0xc]
8001a13a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001a13e:	f0 09 19 00 	cp.h	r9,r8
8001a142:	c0 e1       	brne	8001a15e <get_task_by_id+0x5e>
8001a144:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a148:	f0 ca ff f4 	sub	r10,r8,-12
8001a14c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a150:	12 98       	mov	r8,r9
8001a152:	a1 78       	lsl	r8,0x1
8001a154:	12 08       	add	r8,r9
8001a156:	a5 68       	lsl	r8,0x4
8001a158:	f4 08 00 08 	add	r8,r10,r8
8001a15c:	c1 08       	rjmp	8001a17c <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001a15e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a162:	2f f8       	sub	r8,-1
8001a164:	ef 48 ff fc 	st.w	r7[-4],r8
8001a168:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a16c:	11 88       	ld.ub	r8,r8[0x0]
8001a16e:	10 99       	mov	r9,r8
8001a170:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a174:	10 39       	cp.w	r9,r8
8001a176:	fe 99 ff d5 	brgt	8001a120 <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001a17a:	30 08       	mov	r8,0
}
8001a17c:	10 9c       	mov	r12,r8
8001a17e:	2f dd       	sub	sp,-12
8001a180:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a184 <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001a184:	eb cd 40 80 	pushm	r7,lr
8001a188:	1a 97       	mov	r7,sp
8001a18a:	20 2d       	sub	sp,8
8001a18c:	ef 4c ff fc 	st.w	r7[-4],r12
8001a190:	16 98       	mov	r8,r11
8001a192:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001a196:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a19a:	11 88       	ld.ub	r8,r8[0x0]
8001a19c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001a1a0:	f0 09 19 00 	cp.h	r9,r8
8001a1a4:	c0 e2       	brcc	8001a1c0 <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001a1a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1aa:	f0 ca ff f4 	sub	r10,r8,-12
8001a1ae:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001a1b2:	12 98       	mov	r8,r9
8001a1b4:	a1 78       	lsl	r8,0x1
8001a1b6:	12 08       	add	r8,r9
8001a1b8:	a5 68       	lsl	r8,0x4
8001a1ba:	f4 08 00 08 	add	r8,r10,r8
8001a1be:	c0 28       	rjmp	8001a1c2 <get_task_by_index+0x3e>
	}
	return NULL;
8001a1c0:	30 08       	mov	r8,0
}
8001a1c2:	10 9c       	mov	r12,r8
8001a1c4:	2f ed       	sub	sp,-8
8001a1c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a1ca <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001a1ca:	eb cd 40 80 	pushm	r7,lr
8001a1ce:	1a 97       	mov	r7,sp
8001a1d0:	20 2d       	sub	sp,8
8001a1d2:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1d6:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001a1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1de:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a1e2:	91 39       	st.w	r8[0xc],r9
}
8001a1e4:	2f ed       	sub	sp,-8
8001a1e6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a1ea <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001a1ea:	eb cd 40 c0 	pushm	r6-r7,lr
8001a1ee:	1a 97       	mov	r7,sp
8001a1f0:	20 2d       	sub	sp,8
8001a1f2:	48 c6       	lddpc	r6,8001a220 <change_task_period+0x36>
8001a1f4:	1e 26       	rsub	r6,pc
8001a1f6:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1fa:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001a1fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a202:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a206:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001a208:	30 2b       	mov	r11,2
8001a20a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a20e:	f0 16 00 a6 	mcall	r6[664]
	run_task_now(te);
8001a212:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a216:	f0 16 00 fa 	mcall	r6[1000]
}
8001a21a:	2f ed       	sub	sp,-8
8001a21c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a220:	80 01       	ld.sh	r1,r0[0x0]
8001a222:	a0 78       	st.h	r0[0xe],r8

8001a224 <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001a224:	eb cd 40 c0 	pushm	r6-r7,lr
8001a228:	1a 97       	mov	r7,sp
8001a22a:	20 2d       	sub	sp,8
8001a22c:	48 96       	lddpc	r6,8001a250 <suspend_task+0x2c>
8001a22e:	1e 26       	rsub	r6,pc
8001a230:	ef 4c ff fc 	st.w	r7[-4],r12
8001a234:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001a238:	f0 16 00 27 	mcall	r6[156]
8001a23c:	18 99       	mov	r9,r12
8001a23e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a242:	10 09       	add	r9,r8
8001a244:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a248:	91 69       	st.w	r8[0x18],r9
}
8001a24a:	2f ed       	sub	sp,-8
8001a24c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a250:	80 01       	ld.sh	r1,r0[0x0]
8001a252:	a0 b2       	st.b	r0[0x3],r2

8001a254 <run_task_now>:

void run_task_now(task_entry *te) {
8001a254:	eb cd 40 80 	pushm	r7,lr
8001a258:	1a 97       	mov	r7,sp
8001a25a:	20 1d       	sub	sp,4
8001a25c:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001a260:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a264:	70 38       	ld.w	r8,r8[0xc]
8001a266:	58 08       	cp.w	r8,0
8001a268:	c0 51       	brne	8001a272 <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001a26a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a26e:	30 19       	mov	r9,1
8001a270:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001a272:	2f fd       	sub	sp,-4
8001a274:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a278 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001a278:	eb cd 40 c0 	pushm	r6-r7,lr
8001a27c:	1a 97       	mov	r7,sp
8001a27e:	20 6d       	sub	sp,24
8001a280:	49 e6       	lddpc	r6,8001a2f8 <interpolate+0x80>
8001a282:	1e 26       	rsub	r6,pc
8001a284:	ef 4c ff f8 	st.w	r7[-8],r12
8001a288:	ef 4b ff f4 	st.w	r7[-12],r11
8001a28c:	ef 4a ff f0 	st.w	r7[-16],r10
8001a290:	ef 49 ff ec 	st.w	r7[-20],r9
8001a294:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001a298:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a29c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a2a0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001a2a4:	c0 41       	brne	8001a2ac <interpolate+0x34>
	{
		return y1;
8001a2a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a2aa:	c2 38       	rjmp	8001a2f0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001a2ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001a2b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a2b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001a2b8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a2bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a2c0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001a2c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001a2c8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001a2cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a2d0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001a2d4:	12 9b       	mov	r11,r9
8001a2d6:	10 9c       	mov	r12,r8
8001a2d8:	f0 16 00 08 	mcall	r6[32]
8001a2dc:	18 98       	mov	r8,r12
8001a2de:	10 99       	mov	r9,r8
8001a2e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a2e4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001a2e8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001a2ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001a2f0:	10 9c       	mov	r12,r8
8001a2f2:	2f ad       	sub	sp,-24
8001a2f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2f8:	80 01       	ld.sh	r1,r0[0x0]
8001a2fa:	a1 06       	ld.d	r6,r0

8001a2fc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001a2fc:	eb cd 40 c0 	pushm	r6-r7,lr
8001a300:	1a 97       	mov	r7,sp
8001a302:	20 3d       	sub	sp,12
8001a304:	49 06       	lddpc	r6,8001a344 <mav_array_memcpy+0x48>
8001a306:	1e 26       	rsub	r6,pc
8001a308:	ef 4c ff fc 	st.w	r7[-4],r12
8001a30c:	ef 4b ff f8 	st.w	r7[-8],r11
8001a310:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001a314:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a318:	58 08       	cp.w	r8,0
8001a31a:	c0 91       	brne	8001a32c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001a31c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a320:	30 0b       	mov	r11,0
8001a322:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a326:	f0 16 00 2f 	mcall	r6[188]
8001a32a:	c0 98       	rjmp	8001a33c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001a32c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a330:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a334:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a338:	f0 16 00 1e 	mcall	r6[120]
	}
}
8001a33c:	2f dd       	sub	sp,-12
8001a33e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a342:	00 00       	add	r0,r0
8001a344:	80 01       	ld.sh	r1,r0[0x0]
8001a346:	a1 8a       	lsr	r10,0x0

8001a348 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001a348:	eb cd 40 c0 	pushm	r6-r7,lr
8001a34c:	1a 97       	mov	r7,sp
8001a34e:	20 2d       	sub	sp,8
8001a350:	4a 26       	lddpc	r6,8001a3d8 <init_gps_ubx+0x90>
8001a352:	1e 26       	rsub	r6,pc
8001a354:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001a358:	f0 16 00 31 	mcall	r6[196]
8001a35c:	18 99       	mov	r9,r12
8001a35e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a362:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001a364:	30 18       	mov	r8,1
8001a366:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001a36a:	ec f8 04 0c 	ld.w	r8,r6[1036]
8001a36e:	e0 69 04 b0 	mov	r9,1200
8001a372:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001a374:	f0 16 01 7a 	mcall	r6[1512]
	
	engine_nav_setting = _engine_nav_setting;
8001a378:	ec f8 01 c4 	ld.w	r8,r6[452]
8001a37c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a380:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001a382:	ec f8 00 00 	ld.w	r8,r6[0]
8001a386:	70 09       	ld.w	r9,r8[0x0]
8001a388:	30 18       	mov	r8,1
8001a38a:	f3 68 0a 14 	st.b	r9[2580],r8
	centralData->GPS_data.num_sats = 0;
8001a38e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a392:	70 09       	ld.w	r9,r8[0x0]
8001a394:	30 08       	mov	r8,0
8001a396:	f3 68 0a 08 	st.b	r9[2568],r8
	
	next_fix = false;
8001a39a:	ec f9 01 d0 	ld.w	r9,r6[464]
8001a39e:	30 08       	mov	r8,0
8001a3a0:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001a3a2:	ec f9 03 a0 	ld.w	r9,r6[928]
8001a3a6:	30 08       	mov	r8,0
8001a3a8:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001a3aa:	ec f9 06 38 	ld.w	r9,r6[1592]
8001a3ae:	30 08       	mov	r8,0
8001a3b0:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001a3b2:	ec f8 06 a0 	ld.w	r8,r6[1696]
8001a3b6:	30 09       	mov	r9,0
8001a3b8:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001a3ba:	ec f9 02 38 	ld.w	r9,r6[568]
8001a3be:	30 08       	mov	r8,0
8001a3c0:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001a3c2:	ec f9 01 fc 	ld.w	r9,r6[508]
8001a3c6:	30 08       	mov	r8,0
8001a3c8:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001a3ca:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a3ce:	30 08       	mov	r8,0
8001a3d0:	b2 88       	st.b	r9[0x0],r8
	}
8001a3d2:	2f ed       	sub	sp,-8
8001a3d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a3d8:	80 01       	ld.sh	r1,r0[0x0]
8001a3da:	a1 d6       	cbr	r6,0x1
8001a3dc:	6c 61       	ld.w	r1,r6[0x18]
8001a3de:	72 67       	ld.w	r7,r9[0x18]
8001a3e0:	65 20       	ld.w	r0,r2[0x48]
8001a3e2:	70 61       	ld.w	r1,r8[0x18]
8001a3e4:	79 6c       	ld.w	r12,r12[0x58]
8001a3e6:	6f 61       	ld.w	r1,r7[0x58]
8001a3e8:	64 3a       	ld.w	r10,r2[0xc]
8001a3ea:	20 00       	sub	r0,0
8001a3ec:	0a 00       	add	r0,r5
8001a3ee:	00 00       	add	r0,r0
8001a3f0:	57 72       	stdsp	sp[0x1dc],r2
8001a3f2:	6f 6e       	ld.w	lr,r7[0x58]
8001a3f4:	67 20       	ld.w	r0,r3[0x48]
8001a3f6:	50 6f       	stdsp	sp[0x18],pc
8001a3f8:	73 6c       	ld.w	r12,r9[0x58]
8001a3fa:	6c 68       	ld.w	r8,r6[0x18]
8001a3fc:	20 6d       	sub	sp,24
8001a3fe:	65 73       	ld.w	r3,r2[0x5c]
8001a400:	73 61       	ld.w	r1,r9[0x58]
8001a402:	67 65       	ld.w	r5,r3[0x58]
8001a404:	20 30       	sub	r0,3
8001a406:	78 00       	ld.w	r0,r12[0x0]
8001a408:	20 4d       	sub	sp,16
8001a40a:	73 67       	ld.w	r7,r9[0x58]
8001a40c:	20 69       	sub	r9,6
8001a40e:	64 3a       	ld.w	r10,r2[0xc]
8001a410:	20 30       	sub	r0,3
8001a412:	78 00       	ld.w	r0,r12[0x0]
8001a414:	20 52       	sub	r2,5
8001a416:	65 63       	ld.w	r3,r2[0x58]
8001a418:	65 69       	ld.w	r9,r2[0x58]
8001a41a:	76 65       	ld.w	r5,r11[0x18]
8001a41c:	64 20       	ld.w	r0,r2[0x8]
8001a41e:	73 69       	ld.w	r9,r9[0x58]
8001a420:	7a 65       	ld.w	r5,sp[0x18]
8001a422:	3a 00       	mov	r0,-96
8001a424:	20 73       	sub	r3,7
8001a426:	68 6f       	ld.w	pc,r4[0x18]
8001a428:	75 6c       	ld.w	r12,r10[0x58]
8001a42a:	64 20       	ld.w	r0,r2[0x8]
8001a42c:	62 65       	ld.w	r5,r1[0x18]
8001a42e:	3a 00       	mov	r0,-96
8001a430:	57 72       	stdsp	sp[0x1dc],r2
8001a432:	6f 6e       	ld.w	lr,r7[0x58]
8001a434:	67 20       	ld.w	r0,r3[0x48]
8001a436:	4e 61       	lddpc	r1,8001a5cc <init_gps_ubx+0x284>
8001a438:	76 20       	ld.w	r0,r11[0x8]
8001a43a:	53 74       	stdsp	sp[0xdc],r4
8001a43c:	61 74       	ld.w	r4,r0[0x5c]
8001a43e:	75 73       	ld.w	r3,r10[0x5c]
8001a440:	20 6d       	sub	sp,24
8001a442:	65 73       	ld.w	r3,r2[0x5c]
8001a444:	73 61       	ld.w	r1,r9[0x58]
8001a446:	67 65       	ld.w	r5,r3[0x58]
8001a448:	20 30       	sub	r0,3
8001a44a:	78 00       	ld.w	r0,r12[0x0]
8001a44c:	57 72       	stdsp	sp[0x1dc],r2
8001a44e:	6f 6e       	ld.w	lr,r7[0x58]
8001a450:	67 20       	ld.w	r0,r3[0x48]
8001a452:	53 6f       	stdsp	sp[0xd8],pc
8001a454:	6c 75       	ld.w	r5,r6[0x1c]
8001a456:	74 69       	ld.w	r9,r10[0x18]
8001a458:	6f 6e       	ld.w	lr,r7[0x58]
8001a45a:	20 6d       	sub	sp,24
8001a45c:	65 73       	ld.w	r3,r2[0x5c]
8001a45e:	73 61       	ld.w	r1,r9[0x58]
8001a460:	67 65       	ld.w	r5,r3[0x58]
8001a462:	20 30       	sub	r0,3
8001a464:	78 00       	ld.w	r0,r12[0x0]
8001a466:	00 00       	add	r0,r0
8001a468:	57 72       	stdsp	sp[0x1dc],r2
8001a46a:	6f 6e       	ld.w	lr,r7[0x58]
8001a46c:	67 20       	ld.w	r0,r3[0x48]
8001a46e:	56 65       	stdsp	sp[0x198],r5
8001a470:	6c 6e       	ld.w	lr,r6[0x18]
8001a472:	65 64       	ld.w	r4,r2[0x58]
8001a474:	20 6d       	sub	sp,24
8001a476:	65 73       	ld.w	r3,r2[0x5c]
8001a478:	73 61       	ld.w	r1,r9[0x58]
8001a47a:	67 65       	ld.w	r5,r3[0x58]
8001a47c:	20 30       	sub	r0,3
8001a47e:	78 00       	ld.w	r0,r12[0x0]
8001a480:	57 72       	stdsp	sp[0x1dc],r2
8001a482:	6f 6e       	ld.w	lr,r7[0x58]
8001a484:	67 20       	ld.w	r0,r3[0x48]
8001a486:	53 56       	stdsp	sp[0xd4],r6
8001a488:	20 49       	sub	r9,4
8001a48a:	6e 66       	ld.w	r6,r7[0x18]
8001a48c:	6f 20       	ld.w	r0,r7[0x48]
8001a48e:	6d 65       	ld.w	r5,r6[0x58]
8001a490:	73 73       	ld.w	r3,r9[0x5c]
8001a492:	61 67       	ld.w	r7,r0[0x58]
8001a494:	65 20       	ld.w	r0,r2[0x48]
8001a496:	30 78       	mov	r8,7
8001a498:	00 00       	add	r0,r0
8001a49a:	00 00       	add	r0,r0
8001a49c:	55 6e       	stdsp	sp[0x158],lr
8001a49e:	65 78       	ld.w	r8,r2[0x5c]
8001a4a0:	70 65       	ld.w	r5,r8[0x18]
8001a4a2:	63 74       	ld.w	r4,r1[0x5c]
8001a4a4:	65 64       	ld.w	r4,r2[0x58]
8001a4a6:	20 4e       	sub	lr,4
8001a4a8:	41 56       	lddsp	r6,sp[0x54]
8001a4aa:	20 6d       	sub	sp,24
8001a4ac:	65 73       	ld.w	r3,r2[0x5c]
8001a4ae:	73 61       	ld.w	r1,r9[0x58]
8001a4b0:	67 65       	ld.w	r5,r3[0x58]
8001a4b2:	2c 20       	sub	r0,-62
8001a4b4:	43 6c       	lddsp	r12,sp[0xd8]
8001a4b6:	61 73       	ld.w	r3,r0[0x5c]
8001a4b8:	73 3a       	ld.w	r10,r9[0x4c]
8001a4ba:	20 30       	sub	r0,3
8001a4bc:	78 00       	ld.w	r0,r12[0x0]
8001a4be:	00 00       	add	r0,r0
8001a4c0:	2c 20       	sub	r0,-62
8001a4c2:	6d 73       	ld.w	r3,r6[0x5c]
8001a4c4:	67 20       	ld.w	r0,r3[0x48]
8001a4c6:	69 64       	ld.w	r4,r4[0x58]
8001a4c8:	3a 20       	mov	r0,-94
8001a4ca:	30 78       	mov	r8,7
8001a4cc:	00 00       	add	r0,r0
8001a4ce:	00 00       	add	r0,r0
8001a4d0:	20 6f       	sub	pc,6
8001a4d2:	66 20       	ld.w	r0,r3[0x8]
8001a4d4:	73 69       	ld.w	r9,r9[0x58]
8001a4d6:	7a 65       	ld.w	r5,sp[0x18]
8001a4d8:	20 00       	sub	r0,0
8001a4da:	00 00       	add	r0,r0
8001a4dc:	57 72       	stdsp	sp[0x1dc],r2
8001a4de:	6f 6e       	ld.w	lr,r7[0x58]
8001a4e0:	67 20       	ld.w	r0,r3[0x48]
8001a4e2:	4e 61       	lddpc	r1,8001a678 <ubx_read+0x32>
8001a4e4:	76 20       	ld.w	r0,r11[0x8]
8001a4e6:	53 65       	stdsp	sp[0xd8],r5
8001a4e8:	74 74       	ld.w	r4,r10[0x1c]
8001a4ea:	69 6e       	ld.w	lr,r4[0x58]
8001a4ec:	67 73       	ld.w	r3,r3[0x5c]
8001a4ee:	20 6d       	sub	sp,24
8001a4f0:	65 73       	ld.w	r3,r2[0x5c]
8001a4f2:	73 61       	ld.w	r1,r9[0x58]
8001a4f4:	67 65       	ld.w	r5,r3[0x58]
8001a4f6:	20 30       	sub	r0,3
8001a4f8:	78 00       	ld.w	r0,r12[0x0]
8001a4fa:	00 00       	add	r0,r0
8001a4fc:	57 72       	stdsp	sp[0x1dc],r2
8001a4fe:	6f 6e       	ld.w	lr,r7[0x58]
8001a500:	67 20       	ld.w	r0,r3[0x48]
8001a502:	43 46       	lddsp	r6,sp[0xd0]
8001a504:	47 20       	lddsp	r0,sp[0x1c8]
8001a506:	52 61       	stdsp	sp[0x98],r1
8001a508:	74 65       	ld.w	r5,r10[0x18]
8001a50a:	20 6d       	sub	sp,24
8001a50c:	65 73       	ld.w	r3,r2[0x5c]
8001a50e:	73 61       	ld.w	r1,r9[0x58]
8001a510:	67 65       	ld.w	r5,r3[0x58]
8001a512:	20 30       	sub	r0,3
8001a514:	78 00       	ld.w	r0,r12[0x0]
8001a516:	00 00       	add	r0,r0
8001a518:	57 72       	stdsp	sp[0x1dc],r2
8001a51a:	6f 6e       	ld.w	lr,r7[0x58]
8001a51c:	67 20       	ld.w	r0,r3[0x48]
8001a51e:	43 46       	lddsp	r6,sp[0xd0]
8001a520:	47 20       	lddsp	r0,sp[0x1c8]
8001a522:	53 65       	stdsp	sp[0xd8],r5
8001a524:	74 2f       	ld.w	pc,r10[0x8]
8001a526:	67 65       	ld.w	r5,r3[0x58]
8001a528:	74 20       	ld.w	r0,r10[0x8]
8001a52a:	6d 65       	ld.w	r5,r6[0x58]
8001a52c:	73 73       	ld.w	r3,r9[0x5c]
8001a52e:	61 67       	ld.w	r7,r0[0x58]
8001a530:	65 20       	ld.w	r0,r2[0x48]
8001a532:	30 78       	mov	r8,7
8001a534:	00 00       	add	r0,r0
8001a536:	00 00       	add	r0,r0
8001a538:	55 6e       	stdsp	sp[0x158],lr
8001a53a:	65 78       	ld.w	r8,r2[0x5c]
8001a53c:	70 65       	ld.w	r5,r8[0x18]
8001a53e:	63 74       	ld.w	r4,r1[0x5c]
8001a540:	65 64       	ld.w	r4,r2[0x58]
8001a542:	20 43       	sub	r3,4
8001a544:	46 47       	lddsp	r7,sp[0x190]
8001a546:	20 6d       	sub	sp,24
8001a548:	65 73       	ld.w	r3,r2[0x5c]
8001a54a:	73 61       	ld.w	r1,r9[0x58]
8001a54c:	67 65       	ld.w	r5,r3[0x58]
8001a54e:	2c 20       	sub	r0,-62
8001a550:	43 6c       	lddsp	r12,sp[0xd8]
8001a552:	61 73       	ld.w	r3,r0[0x5c]
8001a554:	73 3a       	ld.w	r10,r9[0x4c]
8001a556:	20 30       	sub	r0,3
8001a558:	78 00       	ld.w	r0,r12[0x0]
8001a55a:	00 00       	add	r0,r0
8001a55c:	57 72       	stdsp	sp[0x1dc],r2
8001a55e:	6f 6e       	ld.w	lr,r7[0x58]
8001a560:	67 20       	ld.w	r0,r3[0x48]
8001a562:	4d 4f       	lddpc	pc,8001a6b0 <ubx_read+0x6a>
8001a564:	4e 20       	lddpc	r0,8001a6ec <ubx_read+0xa6>
8001a566:	52 58       	stdsp	sp[0x94],r8
8001a568:	52 20       	stdsp	sp[0x88],r0
8001a56a:	6d 65       	ld.w	r5,r6[0x58]
8001a56c:	73 73       	ld.w	r3,r9[0x5c]
8001a56e:	61 67       	ld.w	r7,r0[0x58]
8001a570:	65 20       	ld.w	r0,r2[0x48]
8001a572:	30 78       	mov	r8,7
8001a574:	00 00       	add	r0,r0
8001a576:	00 00       	add	r0,r0
8001a578:	55 6e       	stdsp	sp[0x158],lr
8001a57a:	65 78       	ld.w	r8,r2[0x5c]
8001a57c:	70 65       	ld.w	r5,r8[0x18]
8001a57e:	63 74       	ld.w	r4,r1[0x5c]
8001a580:	65 64       	ld.w	r4,r2[0x58]
8001a582:	20 54       	sub	r4,5
8001a584:	49 4d       	lddpc	sp,8001a5d4 <init_gps_ubx+0x28c>
8001a586:	20 6d       	sub	sp,24
8001a588:	65 73       	ld.w	r3,r2[0x5c]
8001a58a:	73 61       	ld.w	r1,r9[0x58]
8001a58c:	67 65       	ld.w	r5,r3[0x58]
8001a58e:	2c 20       	sub	r0,-62
8001a590:	43 6c       	lddsp	r12,sp[0xd8]
8001a592:	61 73       	ld.w	r3,r0[0x5c]
8001a594:	73 3a       	ld.w	r10,r9[0x4c]
8001a596:	20 30       	sub	r0,3
8001a598:	78 00       	ld.w	r0,r12[0x0]
8001a59a:	00 00       	add	r0,r0
8001a59c:	20 73       	sub	r3,7
8001a59e:	68 6f       	ld.w	pc,r4[0x18]
8001a5a0:	75 6c       	ld.w	r12,r10[0x58]
8001a5a2:	64 20       	ld.w	r0,r2[0x8]
8001a5a4:	62 65       	ld.w	r5,r1[0x18]
8001a5a6:	20 3a       	sub	r10,3
8001a5a8:	00 00       	add	r0,r0
8001a5aa:	00 00       	add	r0,r0
8001a5ac:	57 72       	stdsp	sp[0x1dc],r2
8001a5ae:	6f 6e       	ld.w	lr,r7[0x58]
8001a5b0:	67 20       	ld.w	r0,r3[0x48]
8001a5b2:	54 49       	stdsp	sp[0x110],r9
8001a5b4:	4d 20       	lddpc	r0,8001a6fc <ubx_read+0xb6>
8001a5b6:	54 50       	stdsp	sp[0x114],r0
8001a5b8:	20 6d       	sub	sp,24
8001a5ba:	65 73       	ld.w	r3,r2[0x5c]
8001a5bc:	73 61       	ld.w	r1,r9[0x58]
8001a5be:	67 65       	ld.w	r5,r3[0x58]
8001a5c0:	20 30       	sub	r0,3
8001a5c2:	78 00       	ld.w	r0,r12[0x0]
8001a5c4:	57 72       	stdsp	sp[0x1dc],r2
8001a5c6:	6f 6e       	ld.w	lr,r7[0x58]
8001a5c8:	67 20       	ld.w	r0,r3[0x48]
8001a5ca:	54 49       	stdsp	sp[0x110],r9
8001a5cc:	4d 20       	lddpc	r0,8001a714 <ubx_read+0xce>
8001a5ce:	56 52       	stdsp	sp[0x194],r2
8001a5d0:	46 59       	lddsp	r9,sp[0x194]
8001a5d2:	20 6d       	sub	sp,24
8001a5d4:	65 73       	ld.w	r3,r2[0x5c]
8001a5d6:	73 61       	ld.w	r1,r9[0x58]
8001a5d8:	67 65       	ld.w	r5,r3[0x58]
8001a5da:	20 30       	sub	r0,3
8001a5dc:	78 00       	ld.w	r0,r12[0x0]
8001a5de:	00 00       	add	r0,r0
8001a5e0:	55 6e       	stdsp	sp[0x158],lr
8001a5e2:	65 78       	ld.w	r8,r2[0x5c]
8001a5e4:	70 65       	ld.w	r5,r8[0x18]
8001a5e6:	63 74       	ld.w	r4,r1[0x5c]
8001a5e8:	65 64       	ld.w	r4,r2[0x58]
8001a5ea:	20 6d       	sub	sp,24
8001a5ec:	65 73       	ld.w	r3,r2[0x5c]
8001a5ee:	73 61       	ld.w	r1,r9[0x58]
8001a5f0:	67 65       	ld.w	r5,r3[0x58]
8001a5f2:	2c 20       	sub	r0,-62
8001a5f4:	43 6c       	lddsp	r12,sp[0xd8]
8001a5f6:	61 73       	ld.w	r3,r0[0x5c]
8001a5f8:	73 3a       	ld.w	r10,r9[0x4c]
8001a5fa:	20 30       	sub	r0,3
8001a5fc:	78 00       	ld.w	r0,r12[0x0]
8001a5fe:	00 00       	add	r0,r0
8001a600:	62 61       	ld.w	r1,r1[0x18]
8001a602:	64 20       	ld.w	r0,r2[0x8]
8001a604:	63 6b       	ld.w	r11,r1[0x58]
8001a606:	73 75       	ld.w	r5,r9[0x5c]
8001a608:	6d 5f       	ld.w	pc,r6[0x54]
8001a60a:	61 20       	ld.w	r0,r0[0x48]
8001a60c:	00 00       	add	r0,r0
8001a60e:	00 00       	add	r0,r0
8001a610:	20 73       	sub	r3,7
8001a612:	68 6f       	ld.w	pc,r4[0x18]
8001a614:	75 6c       	ld.w	r12,r10[0x58]
8001a616:	64 20       	ld.w	r0,r2[0x8]
8001a618:	62 65       	ld.w	r5,r1[0x18]
8001a61a:	20 00       	sub	r0,0
8001a61c:	20 63       	sub	r3,6
8001a61e:	6c 61       	ld.w	r1,r6[0x18]
8001a620:	73 73       	ld.w	r3,r9[0x5c]
8001a622:	20 3a       	sub	r10,3
8001a624:	20 30       	sub	r0,3
8001a626:	78 00       	ld.w	r0,r12[0x0]
8001a628:	20 6d       	sub	sp,24
8001a62a:	73 67       	ld.w	r7,r9[0x58]
8001a62c:	5f 69       	srmi	r9
8001a62e:	64 20       	ld.w	r0,r2[0x8]
8001a630:	3a 20       	mov	r0,-94
8001a632:	30 78       	mov	r8,7
8001a634:	00 00       	add	r0,r0
8001a636:	00 00       	add	r0,r0
8001a638:	62 61       	ld.w	r1,r1[0x18]
8001a63a:	64 20       	ld.w	r0,r2[0x8]
8001a63c:	63 6b       	ld.w	r11,r1[0x58]
8001a63e:	73 75       	ld.w	r5,r9[0x5c]
8001a640:	6d 5f       	ld.w	pc,r6[0x54]
8001a642:	62 20       	ld.w	r0,r1[0x8]
	...

8001a646 <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001a646:	eb cd 40 c0 	pushm	r6-r7,lr
8001a64a:	1a 97       	mov	r7,sp
8001a64c:	20 2d       	sub	sp,8
8001a64e:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001a652:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001a654:	30 08       	mov	r8,0
8001a656:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001a65a:	e0 8f 06 64 	bral	8001b322 <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001a65e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a662:	70 08       	ld.w	r8,r8[0x0]
8001a664:	f0 c8 f7 6c 	sub	r8,r8,-2196
8001a668:	10 9c       	mov	r12,r8
8001a66a:	f0 16 00 42 	mcall	r6[264]
8001a66e:	18 98       	mov	r8,r12
8001a670:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001a674:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a678:	11 88       	ld.ub	r8,r8[0x0]
8001a67a:	58 88       	cp.w	r8,8
8001a67c:	e0 8b 06 53 	brhi	8001b322 <ubx_read+0xcdc>
8001a680:	fe c9 ff f8 	sub	r9,pc,-8
8001a684:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001a688:	e0 8f 00 26 	bral	8001a6d4 <ubx_read+0x8e>
8001a68c:	e0 8f 00 10 	bral	8001a6ac <ubx_read+0x66>
8001a690:	e0 8f 00 38 	bral	8001a700 <ubx_read+0xba>
8001a694:	e0 8f 00 50 	bral	8001a734 <ubx_read+0xee>
8001a698:	e0 8f 00 74 	bral	8001a780 <ubx_read+0x13a>
8001a69c:	e0 8f 00 98 	bral	8001a7cc <ubx_read+0x186>
8001a6a0:	e0 8f 05 68 	bral	8001b170 <ubx_read+0xb2a>
8001a6a4:	e0 8f 05 ac 	bral	8001b1fc <ubx_read+0xbb6>
8001a6a8:	e0 8f 05 f0 	bral	8001b288 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001a6ac:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a6b0:	36 28       	mov	r8,98
8001a6b2:	f0 09 18 00 	cp.b	r9,r8
8001a6b6:	c0 b1       	brne	8001a6cc <ubx_read+0x86>
			{
				step++;
8001a6b8:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a6bc:	11 88       	ld.ub	r8,r8[0x0]
8001a6be:	2f f8       	sub	r8,-1
8001a6c0:	5c 58       	castu.b	r8
8001a6c2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6c6:	b2 88       	st.b	r9[0x0],r8
				break;
8001a6c8:	e0 8f 06 2d 	bral	8001b322 <ubx_read+0xcdc>
			}
			step = 0;
8001a6cc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6d0:	30 08       	mov	r8,0
8001a6d2:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001a6d4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a6d8:	3b 58       	mov	r8,-75
8001a6da:	f0 09 18 00 	cp.b	r9,r8
8001a6de:	c0 b1       	brne	8001a6f4 <ubx_read+0xae>
			{
				step++;
8001a6e0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a6e4:	11 88       	ld.ub	r8,r8[0x0]
8001a6e6:	2f f8       	sub	r8,-1
8001a6e8:	5c 58       	castu.b	r8
8001a6ea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6ee:	b2 88       	st.b	r9[0x0],r8
				break;
8001a6f0:	e0 8f 06 19 	bral	8001b322 <ubx_read+0xcdc>
			}
			step = 0;
8001a6f4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6f8:	30 08       	mov	r8,0
8001a6fa:	b2 88       	st.b	r9[0x0],r8
			break;
8001a6fc:	e0 8f 06 13 	bral	8001b322 <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001a700:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a704:	11 88       	ld.ub	r8,r8[0x0]
8001a706:	2f f8       	sub	r8,-1
8001a708:	5c 58       	castu.b	r8
8001a70a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a70e:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001a710:	ec f9 00 60 	ld.w	r9,r6[96]
8001a714:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a718:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001a71a:	ec f9 00 a8 	ld.w	r9,r6[168]
8001a71e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a722:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001a724:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a728:	11 88       	ld.ub	r8,r8[0x0]
8001a72a:	ec f9 01 04 	ld.w	r9,r6[260]
8001a72e:	b2 88       	st.b	r9[0x0],r8
			break;
8001a730:	e0 8f 05 f9 	bral	8001b322 <ubx_read+0xcdc>
		case 3:
			step++;
8001a734:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a738:	11 88       	ld.ub	r8,r8[0x0]
8001a73a:	2f f8       	sub	r8,-1
8001a73c:	5c 58       	castu.b	r8
8001a73e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a742:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a744:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a748:	11 88       	ld.ub	r8,r8[0x0]
8001a74a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a74e:	f2 08 00 08 	add	r8,r9,r8
8001a752:	5c 58       	castu.b	r8
8001a754:	ec f9 00 a8 	ld.w	r9,r6[168]
8001a758:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a75a:	ec f8 01 04 	ld.w	r8,r6[260]
8001a75e:	11 89       	ld.ub	r9,r8[0x0]
8001a760:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a764:	11 88       	ld.ub	r8,r8[0x0]
8001a766:	f2 08 00 08 	add	r8,r9,r8
8001a76a:	5c 58       	castu.b	r8
8001a76c:	ec f9 01 04 	ld.w	r9,r6[260]
8001a770:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001a772:	ec f9 00 5c 	ld.w	r9,r6[92]
8001a776:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a77a:	b2 88       	st.b	r9[0x0],r8
			break;
8001a77c:	e0 8f 05 d3 	bral	8001b322 <ubx_read+0xcdc>
		case 4:
			step++;
8001a780:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a784:	11 88       	ld.ub	r8,r8[0x0]
8001a786:	2f f8       	sub	r8,-1
8001a788:	5c 58       	castu.b	r8
8001a78a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a78e:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a790:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a794:	11 88       	ld.ub	r8,r8[0x0]
8001a796:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a79a:	f2 08 00 08 	add	r8,r9,r8
8001a79e:	5c 58       	castu.b	r8
8001a7a0:	ec f9 00 a8 	ld.w	r9,r6[168]
8001a7a4:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a7a6:	ec f8 01 04 	ld.w	r8,r6[260]
8001a7aa:	11 89       	ld.ub	r9,r8[0x0]
8001a7ac:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a7b0:	11 88       	ld.ub	r8,r8[0x0]
8001a7b2:	f2 08 00 08 	add	r8,r9,r8
8001a7b6:	5c 58       	castu.b	r8
8001a7b8:	ec f9 01 04 	ld.w	r9,r6[260]
8001a7bc:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001a7be:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a7c2:	ec f9 00 58 	ld.w	r9,r6[88]
8001a7c6:	b2 08       	st.h	r9[0x0],r8
			break;
8001a7c8:	e0 8f 05 ad 	bral	8001b322 <ubx_read+0xcdc>
		case 5:
			step++;
8001a7cc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a7d0:	11 88       	ld.ub	r8,r8[0x0]
8001a7d2:	2f f8       	sub	r8,-1
8001a7d4:	5c 58       	castu.b	r8
8001a7d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a7da:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001a7dc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a7e0:	a9 68       	lsl	r8,0x8
8001a7e2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a7e6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a7ea:	90 08       	ld.sh	r8,r8[0x0]
8001a7ec:	5c 88       	casts.h	r8
8001a7ee:	f3 e8 10 08 	or	r8,r9,r8
8001a7f2:	5c 88       	casts.h	r8
8001a7f4:	ec f9 00 58 	ld.w	r9,r6[88]
8001a7f8:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001a7fa:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a7fe:	11 88       	ld.ub	r8,r8[0x0]
8001a800:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a804:	f2 08 00 08 	add	r8,r9,r8
8001a808:	5c 58       	castu.b	r8
8001a80a:	ec f9 00 a8 	ld.w	r9,r6[168]
8001a80e:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a810:	ec f8 01 04 	ld.w	r8,r6[260]
8001a814:	11 89       	ld.ub	r9,r8[0x0]
8001a816:	ec f8 00 a8 	ld.w	r8,r6[168]
8001a81a:	11 88       	ld.ub	r8,r8[0x0]
8001a81c:	f2 08 00 08 	add	r8,r9,r8
8001a820:	5c 58       	castu.b	r8
8001a822:	ec f9 01 04 	ld.w	r9,r6[260]
8001a826:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001a828:	ec f8 00 58 	ld.w	r8,r6[88]
8001a82c:	90 09       	ld.sh	r9,r8[0x0]
8001a82e:	e0 68 02 00 	mov	r8,512
8001a832:	f0 09 19 00 	cp.h	r9,r8
8001a836:	e0 88 00 1b 	brls	8001a86c <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001a83a:	fe cc 04 5e 	sub	r12,pc,1118
8001a83e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a842:	ec f8 00 58 	ld.w	r8,r6[88]
8001a846:	90 08       	ld.sh	r8,r8[0x0]
8001a848:	5c 78       	castu.h	r8
8001a84a:	30 ab       	mov	r11,10
8001a84c:	10 9c       	mov	r12,r8
8001a84e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a852:	fe cc 04 66 	sub	r12,pc,1126
8001a856:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001a85a:	ec f9 00 58 	ld.w	r9,r6[88]
8001a85e:	30 08       	mov	r8,0
8001a860:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001a862:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a866:	30 08       	mov	r8,0
8001a868:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001a86a:	c0 5b       	rjmp	8001a674 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001a86c:	ec f9 01 b4 	ld.w	r9,r6[436]
8001a870:	30 08       	mov	r8,0
8001a872:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001a874:	ec f8 00 60 	ld.w	r8,r6[96]
8001a878:	11 89       	ld.ub	r9,r8[0x0]
8001a87a:	30 18       	mov	r8,1
8001a87c:	f0 09 18 00 	cp.b	r9,r8
8001a880:	e0 81 01 c0 	brne	8001ac00 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001a884:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a888:	11 88       	ld.ub	r8,r8[0x0]
8001a88a:	58 68       	cp.w	r8,6
8001a88c:	e0 80 00 ab 	breq	8001a9e2 <ubx_read+0x39c>
8001a890:	e0 89 00 08 	brgt	8001a8a0 <ubx_read+0x25a>
8001a894:	58 28       	cp.w	r8,2
8001a896:	c0 e0       	breq	8001a8b2 <ubx_read+0x26c>
8001a898:	58 38       	cp.w	r8,3
8001a89a:	c5 80       	breq	8001a94a <ubx_read+0x304>
8001a89c:	e0 8f 01 84 	bral	8001aba4 <ubx_read+0x55e>
8001a8a0:	59 28       	cp.w	r8,18
8001a8a2:	e0 80 00 eb 	breq	8001aa78 <ubx_read+0x432>
8001a8a6:	e0 48 00 30 	cp.w	r8,48
8001a8aa:	e0 80 01 32 	breq	8001ab0e <ubx_read+0x4c8>
8001a8ae:	e0 8f 01 7b 	bral	8001aba4 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001a8b2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8b6:	90 09       	ld.sh	r9,r8[0x0]
8001a8b8:	31 c8       	mov	r8,28
8001a8ba:	f0 09 19 00 	cp.h	r9,r8
8001a8be:	c1 21       	brne	8001a8e2 <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001a8c0:	ec f9 07 88 	ld.w	r9,r6[1928]
8001a8c4:	ec f8 00 d0 	ld.w	r8,r6[208]
8001a8c8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001a8ca:	ec f9 03 5c 	ld.w	r9,r6[860]
8001a8ce:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a8d2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001a8d4:	ec f8 00 f4 	ld.w	r8,r6[244]
8001a8d8:	ec f9 04 64 	ld.w	r9,r6[1124]
8001a8dc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a8de:	e0 8f 01 8f 	bral	8001abfc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001a8e2:	fe cc 04 f2 	sub	r12,pc,1266
8001a8e6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a8ea:	ec f8 00 60 	ld.w	r8,r6[96]
8001a8ee:	11 88       	ld.ub	r8,r8[0x0]
8001a8f0:	31 0b       	mov	r11,16
8001a8f2:	10 9c       	mov	r12,r8
8001a8f4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a8f8:	fe cc 04 f0 	sub	r12,pc,1264
8001a8fc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a900:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a904:	11 88       	ld.ub	r8,r8[0x0]
8001a906:	31 0b       	mov	r11,16
8001a908:	10 9c       	mov	r12,r8
8001a90a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a90e:	fe cc 04 fa 	sub	r12,pc,1274
8001a912:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a916:	ec f8 00 58 	ld.w	r8,r6[88]
8001a91a:	90 08       	ld.sh	r8,r8[0x0]
8001a91c:	5c 78       	castu.h	r8
8001a91e:	30 ab       	mov	r11,10
8001a920:	10 9c       	mov	r12,r8
8001a922:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a926:	fe cc 05 02 	sub	r12,pc,1282
8001a92a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001a92e:	30 ab       	mov	r11,10
8001a930:	31 cc       	mov	r12,28
8001a932:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a936:	fe cc 05 4a 	sub	r12,pc,1354
8001a93a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a93e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a942:	30 08       	mov	r8,0
8001a944:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a946:	fe 9f fe 97 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001a94a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a94e:	90 09       	ld.sh	r9,r8[0x0]
8001a950:	31 08       	mov	r8,16
8001a952:	f0 09 19 00 	cp.h	r9,r8
8001a956:	c1 21       	brne	8001a97a <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001a958:	ec f9 06 18 	ld.w	r9,r6[1560]
8001a95c:	ec f8 00 d0 	ld.w	r8,r6[208]
8001a960:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001a962:	ec f9 03 60 	ld.w	r9,r6[864]
8001a966:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a96a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001a96c:	ec f8 00 f4 	ld.w	r8,r6[244]
8001a970:	ec f9 04 28 	ld.w	r9,r6[1064]
8001a974:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a976:	e0 8f 01 43 	bral	8001abfc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001a97a:	fe cc 05 4a 	sub	r12,pc,1354
8001a97e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a982:	ec f8 00 60 	ld.w	r8,r6[96]
8001a986:	11 88       	ld.ub	r8,r8[0x0]
8001a988:	31 0b       	mov	r11,16
8001a98a:	10 9c       	mov	r12,r8
8001a98c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a990:	fe cc 05 88 	sub	r12,pc,1416
8001a994:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a998:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a99c:	11 88       	ld.ub	r8,r8[0x0]
8001a99e:	31 0b       	mov	r11,16
8001a9a0:	10 9c       	mov	r12,r8
8001a9a2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a9a6:	fe cc 05 92 	sub	r12,pc,1426
8001a9aa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a9ae:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9b2:	90 08       	ld.sh	r8,r8[0x0]
8001a9b4:	5c 78       	castu.h	r8
8001a9b6:	30 ab       	mov	r11,10
8001a9b8:	10 9c       	mov	r12,r8
8001a9ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a9be:	fe cc 05 9a 	sub	r12,pc,1434
8001a9c2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001a9c6:	30 ab       	mov	r11,10
8001a9c8:	31 0c       	mov	r12,16
8001a9ca:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a9ce:	fe cc 05 e2 	sub	r12,pc,1506
8001a9d2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a9d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a9da:	30 08       	mov	r8,0
8001a9dc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a9de:	fe 9f fe 4b 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001a9e2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9e6:	90 09       	ld.sh	r9,r8[0x0]
8001a9e8:	33 48       	mov	r8,52
8001a9ea:	f0 09 19 00 	cp.h	r9,r8
8001a9ee:	c1 11       	brne	8001aa10 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001a9f0:	ec f9 07 c4 	ld.w	r9,r6[1988]
8001a9f4:	ec f8 00 d0 	ld.w	r8,r6[208]
8001a9f8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001a9fa:	ec f9 03 cc 	ld.w	r9,r6[972]
8001a9fe:	ec f8 00 dc 	ld.w	r8,r6[220]
8001aa02:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001aa04:	ec f8 00 f4 	ld.w	r8,r6[244]
8001aa08:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001aa0c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aa0e:	cf 78       	rjmp	8001abfc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001aa10:	fe cc 05 c4 	sub	r12,pc,1476
8001aa14:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aa18:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa1c:	11 88       	ld.ub	r8,r8[0x0]
8001aa1e:	31 0b       	mov	r11,16
8001aa20:	10 9c       	mov	r12,r8
8001aa22:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aa26:	fe cc 06 1e 	sub	r12,pc,1566
8001aa2a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aa2e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aa32:	11 88       	ld.ub	r8,r8[0x0]
8001aa34:	31 0b       	mov	r11,16
8001aa36:	10 9c       	mov	r12,r8
8001aa38:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aa3c:	fe cc 06 28 	sub	r12,pc,1576
8001aa40:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aa44:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa48:	90 08       	ld.sh	r8,r8[0x0]
8001aa4a:	5c 78       	castu.h	r8
8001aa4c:	30 ab       	mov	r11,10
8001aa4e:	10 9c       	mov	r12,r8
8001aa50:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aa54:	fe cc 06 30 	sub	r12,pc,1584
8001aa58:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001aa5c:	30 ab       	mov	r11,10
8001aa5e:	33 4c       	mov	r12,52
8001aa60:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aa64:	fe cc 06 78 	sub	r12,pc,1656
8001aa68:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aa6c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa70:	30 08       	mov	r8,0
8001aa72:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aa74:	fe 9f fe 00 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001aa78:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa7c:	90 09       	ld.sh	r9,r8[0x0]
8001aa7e:	32 48       	mov	r8,36
8001aa80:	f0 09 19 00 	cp.h	r9,r8
8001aa84:	c1 11       	brne	8001aaa6 <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001aa86:	ec f9 05 a4 	ld.w	r9,r6[1444]
8001aa8a:	ec f8 00 d0 	ld.w	r8,r6[208]
8001aa8e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001aa90:	ec f9 04 78 	ld.w	r9,r6[1144]
8001aa94:	ec f8 00 dc 	ld.w	r8,r6[220]
8001aa98:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001aa9a:	ec f8 00 f4 	ld.w	r8,r6[244]
8001aa9e:	ec f9 04 88 	ld.w	r9,r6[1160]
8001aaa2:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aaa4:	ca c8       	rjmp	8001abfc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001aaa6:	fe cc 06 3e 	sub	r12,pc,1598
8001aaaa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aaae:	ec f8 00 60 	ld.w	r8,r6[96]
8001aab2:	11 88       	ld.ub	r8,r8[0x0]
8001aab4:	31 0b       	mov	r11,16
8001aab6:	10 9c       	mov	r12,r8
8001aab8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aabc:	fe cc 06 b4 	sub	r12,pc,1716
8001aac0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aac4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aac8:	11 88       	ld.ub	r8,r8[0x0]
8001aaca:	31 0b       	mov	r11,16
8001aacc:	10 9c       	mov	r12,r8
8001aace:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aad2:	fe cc 06 be 	sub	r12,pc,1726
8001aad6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aada:	ec f8 00 58 	ld.w	r8,r6[88]
8001aade:	90 08       	ld.sh	r8,r8[0x0]
8001aae0:	5c 78       	castu.h	r8
8001aae2:	30 ab       	mov	r11,10
8001aae4:	10 9c       	mov	r12,r8
8001aae6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aaea:	fe cc 06 c6 	sub	r12,pc,1734
8001aaee:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001aaf2:	30 ab       	mov	r11,10
8001aaf4:	32 4c       	mov	r12,36
8001aaf6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aafa:	fe cc 07 0e 	sub	r12,pc,1806
8001aafe:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ab02:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ab06:	30 08       	mov	r8,0
8001ab08:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ab0a:	fe 9f fd b5 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001ab0e:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab12:	90 09       	ld.sh	r9,r8[0x0]
8001ab14:	31 e8       	mov	r8,30
8001ab16:	f0 09 19 00 	cp.h	r9,r8
8001ab1a:	c1 11       	brne	8001ab3c <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001ab1c:	ec f9 04 cc 	ld.w	r9,r6[1228]
8001ab20:	ec f8 00 d0 	ld.w	r8,r6[208]
8001ab24:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001ab26:	ec f9 04 58 	ld.w	r9,r6[1112]
8001ab2a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ab2e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001ab30:	ec f8 00 f4 	ld.w	r8,r6[244]
8001ab34:	ec f9 03 94 	ld.w	r9,r6[916]
8001ab38:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ab3a:	c6 18       	rjmp	8001abfc <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001ab3c:	fe cc 06 bc 	sub	r12,pc,1724
8001ab40:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ab44:	ec f8 00 60 	ld.w	r8,r6[96]
8001ab48:	11 88       	ld.ub	r8,r8[0x0]
8001ab4a:	31 0b       	mov	r11,16
8001ab4c:	10 9c       	mov	r12,r8
8001ab4e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ab52:	fe cc 07 4a 	sub	r12,pc,1866
8001ab56:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ab5a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab5e:	11 88       	ld.ub	r8,r8[0x0]
8001ab60:	31 0b       	mov	r11,16
8001ab62:	10 9c       	mov	r12,r8
8001ab64:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ab68:	fe cc 07 54 	sub	r12,pc,1876
8001ab6c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ab70:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab74:	90 08       	ld.sh	r8,r8[0x0]
8001ab76:	5c 78       	castu.h	r8
8001ab78:	30 ab       	mov	r11,10
8001ab7a:	10 9c       	mov	r12,r8
8001ab7c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ab80:	fe cc 07 5c 	sub	r12,pc,1884
8001ab84:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001ab88:	30 ab       	mov	r11,10
8001ab8a:	31 ec       	mov	r12,30
8001ab8c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ab90:	fe cc 07 a4 	sub	r12,pc,1956
8001ab94:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ab98:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ab9c:	30 08       	mov	r8,0
8001ab9e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aba0:	fe 9f fd 6a 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001aba4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aba8:	30 08       	mov	r8,0
8001abaa:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001abac:	fe cc 07 10 	sub	r12,pc,1808
8001abb0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001abb4:	ec f8 00 60 	ld.w	r8,r6[96]
8001abb8:	11 88       	ld.ub	r8,r8[0x0]
8001abba:	31 0b       	mov	r11,16
8001abbc:	10 9c       	mov	r12,r8
8001abbe:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001abc2:	fe cc 07 02 	sub	r12,pc,1794
8001abc6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001abca:	ec f8 00 5c 	ld.w	r8,r6[92]
8001abce:	11 88       	ld.ub	r8,r8[0x0]
8001abd0:	31 0b       	mov	r11,16
8001abd2:	10 9c       	mov	r12,r8
8001abd4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001abd8:	fe cc 07 08 	sub	r12,pc,1800
8001abdc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001abe0:	ec f8 00 58 	ld.w	r8,r6[88]
8001abe4:	90 08       	ld.sh	r8,r8[0x0]
8001abe6:	5c 78       	castu.h	r8
8001abe8:	30 ab       	mov	r11,10
8001abea:	10 9c       	mov	r12,r8
8001abec:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001abf0:	fe cc 08 04 	sub	r12,pc,2052
8001abf4:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001abf8:	fe 9f fd 3e 	bral	8001a674 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001abfc:	e0 8f 03 93 	bral	8001b322 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001ac00:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac04:	11 89       	ld.ub	r9,r8[0x0]
8001ac06:	30 68       	mov	r8,6
8001ac08:	f0 09 18 00 	cp.b	r9,r8
8001ac0c:	e0 81 01 1d 	brne	8001ae46 <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001ac10:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac14:	11 88       	ld.ub	r8,r8[0x0]
8001ac16:	58 88       	cp.w	r8,8
8001ac18:	c5 30       	breq	8001acbe <ubx_read+0x678>
8001ac1a:	e0 48 00 24 	cp.w	r8,36
8001ac1e:	c0 50       	breq	8001ac28 <ubx_read+0x5e2>
8001ac20:	58 18       	cp.w	r8,1
8001ac22:	e0 80 00 99 	breq	8001ad54 <ubx_read+0x70e>
8001ac26:	ce 28       	rjmp	8001adea <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001ac28:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac2c:	90 09       	ld.sh	r9,r8[0x0]
8001ac2e:	32 48       	mov	r8,36
8001ac30:	f0 09 19 00 	cp.h	r9,r8
8001ac34:	c1 11       	brne	8001ac56 <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001ac36:	ec f9 05 78 	ld.w	r9,r6[1400]
8001ac3a:	ec f8 00 d0 	ld.w	r8,r6[208]
8001ac3e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001ac40:	ec f9 04 70 	ld.w	r9,r6[1136]
8001ac44:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ac48:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001ac4a:	ec f8 00 f4 	ld.w	r8,r6[244]
8001ac4e:	ec f9 04 3c 	ld.w	r9,r6[1084]
8001ac52:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001ac54:	cf 78       	rjmp	8001ae42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001ac56:	fe cc 07 7a 	sub	r12,pc,1914
8001ac5a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ac5e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac62:	11 88       	ld.ub	r8,r8[0x0]
8001ac64:	31 0b       	mov	r11,16
8001ac66:	10 9c       	mov	r12,r8
8001ac68:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ac6c:	fe cc 08 64 	sub	r12,pc,2148
8001ac70:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ac74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac78:	11 88       	ld.ub	r8,r8[0x0]
8001ac7a:	31 0b       	mov	r11,16
8001ac7c:	10 9c       	mov	r12,r8
8001ac7e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ac82:	fe cc 08 6e 	sub	r12,pc,2158
8001ac86:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ac8a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac8e:	90 08       	ld.sh	r8,r8[0x0]
8001ac90:	5c 78       	castu.h	r8
8001ac92:	30 ab       	mov	r11,10
8001ac94:	10 9c       	mov	r12,r8
8001ac96:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ac9a:	fe cc 08 76 	sub	r12,pc,2166
8001ac9e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001aca2:	30 ab       	mov	r11,10
8001aca4:	32 4c       	mov	r12,36
8001aca6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001acaa:	fe cc 08 be 	sub	r12,pc,2238
8001acae:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001acb2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acb6:	30 08       	mov	r8,0
8001acb8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001acba:	fe 9f fc dd 	bral	8001a674 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001acbe:	ec f8 00 58 	ld.w	r8,r6[88]
8001acc2:	90 09       	ld.sh	r9,r8[0x0]
8001acc4:	30 68       	mov	r8,6
8001acc6:	f0 09 19 00 	cp.h	r9,r8
8001acca:	c1 11       	brne	8001acec <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001accc:	ec f9 06 14 	ld.w	r9,r6[1556]
8001acd0:	ec f8 00 d0 	ld.w	r8,r6[208]
8001acd4:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001acd6:	ec f9 08 54 	ld.w	r9,r6[2132]
8001acda:	ec f8 00 dc 	ld.w	r8,r6[220]
8001acde:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001ace0:	ec f8 00 f4 	ld.w	r8,r6[244]
8001ace4:	ec f9 06 d0 	ld.w	r9,r6[1744]
8001ace8:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001acea:	ca c8       	rjmp	8001ae42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001acec:	fe cc 07 f0 	sub	r12,pc,2032
8001acf0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001acf4:	ec f8 00 60 	ld.w	r8,r6[96]
8001acf8:	11 88       	ld.ub	r8,r8[0x0]
8001acfa:	31 0b       	mov	r11,16
8001acfc:	10 9c       	mov	r12,r8
8001acfe:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ad02:	fe cc 08 fa 	sub	r12,pc,2298
8001ad06:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ad0a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad0e:	11 88       	ld.ub	r8,r8[0x0]
8001ad10:	31 0b       	mov	r11,16
8001ad12:	10 9c       	mov	r12,r8
8001ad14:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ad18:	fe cc 09 04 	sub	r12,pc,2308
8001ad1c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ad20:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad24:	90 08       	ld.sh	r8,r8[0x0]
8001ad26:	5c 78       	castu.h	r8
8001ad28:	30 ab       	mov	r11,10
8001ad2a:	10 9c       	mov	r12,r8
8001ad2c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ad30:	fe cc 09 0c 	sub	r12,pc,2316
8001ad34:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001ad38:	30 ab       	mov	r11,10
8001ad3a:	30 6c       	mov	r12,6
8001ad3c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ad40:	fe cc 09 54 	sub	r12,pc,2388
8001ad44:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ad48:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ad4c:	30 08       	mov	r8,0
8001ad4e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ad50:	fe 9f fc 92 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001ad54:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad58:	90 09       	ld.sh	r9,r8[0x0]
8001ad5a:	30 38       	mov	r8,3
8001ad5c:	f0 09 19 00 	cp.h	r9,r8
8001ad60:	c1 11       	brne	8001ad82 <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001ad62:	ec f9 06 34 	ld.w	r9,r6[1588]
8001ad66:	ec f8 00 d0 	ld.w	r8,r6[208]
8001ad6a:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001ad6c:	ec f9 03 dc 	ld.w	r9,r6[988]
8001ad70:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ad74:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001ad76:	ec f8 00 f4 	ld.w	r8,r6[244]
8001ad7a:	ec f9 04 a0 	ld.w	r9,r6[1184]
8001ad7e:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ad80:	c6 18       	rjmp	8001ae42 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001ad82:	fe cc 08 6a 	sub	r12,pc,2154
8001ad86:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ad8a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad8e:	11 88       	ld.ub	r8,r8[0x0]
8001ad90:	31 0b       	mov	r11,16
8001ad92:	10 9c       	mov	r12,r8
8001ad94:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ad98:	fe cc 09 90 	sub	r12,pc,2448
8001ad9c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ada0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ada4:	11 88       	ld.ub	r8,r8[0x0]
8001ada6:	31 0b       	mov	r11,16
8001ada8:	10 9c       	mov	r12,r8
8001adaa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001adae:	fe cc 09 9a 	sub	r12,pc,2458
8001adb2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001adb6:	ec f8 00 58 	ld.w	r8,r6[88]
8001adba:	90 08       	ld.sh	r8,r8[0x0]
8001adbc:	5c 78       	castu.h	r8
8001adbe:	30 ab       	mov	r11,10
8001adc0:	10 9c       	mov	r12,r8
8001adc2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001adc6:	fe cc 09 a2 	sub	r12,pc,2466
8001adca:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001adce:	30 ab       	mov	r11,10
8001add0:	30 3c       	mov	r12,3
8001add2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001add6:	fe cc 09 ea 	sub	r12,pc,2538
8001adda:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001adde:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ade2:	30 08       	mov	r8,0
8001ade4:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ade6:	fe 9f fc 47 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001adea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adee:	30 08       	mov	r8,0
8001adf0:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001adf2:	fe cc 08 ba 	sub	r12,pc,2234
8001adf6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001adfa:	ec f8 00 60 	ld.w	r8,r6[96]
8001adfe:	11 88       	ld.ub	r8,r8[0x0]
8001ae00:	31 0b       	mov	r11,16
8001ae02:	10 9c       	mov	r12,r8
8001ae04:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001ae08:	fe cc 09 48 	sub	r12,pc,2376
8001ae0c:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001ae10:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae14:	11 88       	ld.ub	r8,r8[0x0]
8001ae16:	31 0b       	mov	r11,16
8001ae18:	10 9c       	mov	r12,r8
8001ae1a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001ae1e:	fe cc 09 4e 	sub	r12,pc,2382
8001ae22:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001ae26:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae2a:	90 08       	ld.sh	r8,r8[0x0]
8001ae2c:	5c 78       	castu.h	r8
8001ae2e:	30 ab       	mov	r11,10
8001ae30:	10 9c       	mov	r12,r8
8001ae32:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001ae36:	fe cc 0a 4a 	sub	r12,pc,2634
8001ae3a:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001ae3e:	fe 9f fc 1b 	bral	8001a674 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ae42:	e0 8f 02 70 	bral	8001b322 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001ae46:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae4a:	11 89       	ld.ub	r9,r8[0x0]
8001ae4c:	30 a8       	mov	r8,10
8001ae4e:	f0 09 18 00 	cp.b	r9,r8
8001ae52:	e0 81 00 88 	brne	8001af62 <ubx_read+0x91c>
			{
 				switch (msg_id)
8001ae56:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae5a:	11 88       	ld.ub	r8,r8[0x0]
8001ae5c:	e0 48 00 21 	cp.w	r8,33
8001ae60:	c4 d1       	brne	8001aefa <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001ae62:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae66:	90 09       	ld.sh	r9,r8[0x0]
8001ae68:	30 18       	mov	r8,1
8001ae6a:	f0 09 19 00 	cp.h	r9,r8
8001ae6e:	c1 21       	brne	8001ae92 <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001ae70:	ec f9 05 74 	ld.w	r9,r6[1396]
8001ae74:	ec f8 00 d0 	ld.w	r8,r6[208]
8001ae78:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001ae7a:	ec f9 03 c4 	ld.w	r9,r6[964]
8001ae7e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ae82:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001ae84:	ec f8 00 f4 	ld.w	r8,r6[244]
8001ae88:	ec f9 04 84 	ld.w	r9,r6[1156]
8001ae8c:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ae8e:	e0 8f 02 4a 	bral	8001b322 <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001ae92:	fe cc 09 36 	sub	r12,pc,2358
8001ae96:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001ae9a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae9e:	11 88       	ld.ub	r8,r8[0x0]
8001aea0:	31 0b       	mov	r11,16
8001aea2:	10 9c       	mov	r12,r8
8001aea4:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001aea8:	fe cc 0a a0 	sub	r12,pc,2720
8001aeac:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001aeb0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aeb4:	11 88       	ld.ub	r8,r8[0x0]
8001aeb6:	31 0b       	mov	r11,16
8001aeb8:	10 9c       	mov	r12,r8
8001aeba:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001aebe:	fe cc 0a aa 	sub	r12,pc,2730
8001aec2:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001aec6:	ec f8 00 58 	ld.w	r8,r6[88]
8001aeca:	90 08       	ld.sh	r8,r8[0x0]
8001aecc:	5c 78       	castu.h	r8
8001aece:	30 ab       	mov	r11,10
8001aed0:	10 9c       	mov	r12,r8
8001aed2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001aed6:	fe cc 0a b2 	sub	r12,pc,2738
8001aeda:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001aede:	30 ab       	mov	r11,10
8001aee0:	30 1c       	mov	r12,1
8001aee2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001aee6:	fe cc 0a fa 	sub	r12,pc,2810
8001aeea:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001aeee:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aef2:	30 08       	mov	r8,0
8001aef4:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001aef6:	fe 9f fb bf 	bral	8001a674 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001aefa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aefe:	30 08       	mov	r8,0
8001af00:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001af02:	fe cc 09 8a 	sub	r12,pc,2442
8001af06:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001af0a:	ec f8 00 60 	ld.w	r8,r6[96]
8001af0e:	11 88       	ld.ub	r8,r8[0x0]
8001af10:	31 0b       	mov	r11,16
8001af12:	10 9c       	mov	r12,r8
8001af14:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001af18:	fe cc 0a 58 	sub	r12,pc,2648
8001af1c:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001af20:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af24:	11 88       	ld.ub	r8,r8[0x0]
8001af26:	31 0b       	mov	r11,16
8001af28:	10 9c       	mov	r12,r8
8001af2a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001af2e:	fe cc 0a 5e 	sub	r12,pc,2654
8001af32:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001af36:	ec f8 00 58 	ld.w	r8,r6[88]
8001af3a:	90 08       	ld.sh	r8,r8[0x0]
8001af3c:	5c 78       	castu.h	r8
8001af3e:	30 ab       	mov	r11,10
8001af40:	10 9c       	mov	r12,r8
8001af42:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001af46:	fe cc 09 aa 	sub	r12,pc,2474
8001af4a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001af4e:	31 0b       	mov	r11,16
8001af50:	32 1c       	mov	r12,33
8001af52:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001af56:	fe cc 0b 6a 	sub	r12,pc,2922
8001af5a:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001af5e:	fe 9f fb 8b 	bral	8001a674 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001af62:	ec f8 00 60 	ld.w	r8,r6[96]
8001af66:	11 89       	ld.ub	r9,r8[0x0]
8001af68:	30 d8       	mov	r8,13
8001af6a:	f0 09 18 00 	cp.b	r9,r8
8001af6e:	e0 81 00 d5 	brne	8001b118 <ubx_read+0xad2>
			{
				switch(msg_id)
8001af72:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af76:	11 88       	ld.ub	r8,r8[0x0]
8001af78:	58 18       	cp.w	r8,1
8001af7a:	c0 40       	breq	8001af82 <ubx_read+0x93c>
8001af7c:	58 68       	cp.w	r8,6
8001af7e:	c4 d0       	breq	8001b018 <ubx_read+0x9d2>
8001af80:	c9 78       	rjmp	8001b0ae <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001af82:	ec f8 00 58 	ld.w	r8,r6[88]
8001af86:	90 09       	ld.sh	r9,r8[0x0]
8001af88:	31 08       	mov	r8,16
8001af8a:	f0 09 19 00 	cp.h	r9,r8
8001af8e:	c1 11       	brne	8001afb0 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001af90:	ec f9 08 04 	ld.w	r9,r6[2052]
8001af94:	ec f8 00 d0 	ld.w	r8,r6[208]
8001af98:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001af9a:	ec f9 04 04 	ld.w	r9,r6[1028]
8001af9e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001afa2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001afa4:	ec f8 00 f4 	ld.w	r8,r6[244]
8001afa8:	ec f9 04 40 	ld.w	r9,r6[1088]
8001afac:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001afae:	cb 48       	rjmp	8001b116 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001afb0:	fe cc 0a 04 	sub	r12,pc,2564
8001afb4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001afb8:	ec f8 00 60 	ld.w	r8,r6[96]
8001afbc:	11 88       	ld.ub	r8,r8[0x0]
8001afbe:	31 0b       	mov	r11,16
8001afc0:	10 9c       	mov	r12,r8
8001afc2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001afc6:	fe cc 0b be 	sub	r12,pc,3006
8001afca:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001afce:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afd2:	11 88       	ld.ub	r8,r8[0x0]
8001afd4:	31 0b       	mov	r11,16
8001afd6:	10 9c       	mov	r12,r8
8001afd8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001afdc:	fe cc 0b c8 	sub	r12,pc,3016
8001afe0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001afe4:	ec f8 00 58 	ld.w	r8,r6[88]
8001afe8:	90 08       	ld.sh	r8,r8[0x0]
8001afea:	5c 78       	castu.h	r8
8001afec:	30 ab       	mov	r11,10
8001afee:	10 9c       	mov	r12,r8
8001aff0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aff4:	fe cc 0b d0 	sub	r12,pc,3024
8001aff8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001affc:	30 ab       	mov	r11,10
8001affe:	31 0c       	mov	r12,16
8001b000:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b004:	fe cc 0c 18 	sub	r12,pc,3096
8001b008:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b00c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b010:	30 08       	mov	r8,0
8001b012:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b014:	fe 9f fb 30 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001b018:	ec f8 00 58 	ld.w	r8,r6[88]
8001b01c:	90 09       	ld.sh	r9,r8[0x0]
8001b01e:	31 48       	mov	r8,20
8001b020:	f0 09 19 00 	cp.h	r9,r8
8001b024:	c1 11       	brne	8001b046 <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001b026:	ec f9 08 74 	ld.w	r9,r6[2164]
8001b02a:	ec f8 00 d0 	ld.w	r8,r6[208]
8001b02e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001b030:	ec f9 04 1c 	ld.w	r9,r6[1052]
8001b034:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b038:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001b03a:	ec f8 00 f4 	ld.w	r8,r6[244]
8001b03e:	ec f9 04 48 	ld.w	r9,r6[1096]
8001b042:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001b044:	c6 98       	rjmp	8001b116 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001b046:	fe cc 0a 82 	sub	r12,pc,2690
8001b04a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b04e:	ec f8 00 60 	ld.w	r8,r6[96]
8001b052:	11 88       	ld.ub	r8,r8[0x0]
8001b054:	31 0b       	mov	r11,16
8001b056:	10 9c       	mov	r12,r8
8001b058:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b05c:	fe cc 0c 54 	sub	r12,pc,3156
8001b060:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b064:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b068:	11 88       	ld.ub	r8,r8[0x0]
8001b06a:	31 0b       	mov	r11,16
8001b06c:	10 9c       	mov	r12,r8
8001b06e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b072:	fe cc 0c 5e 	sub	r12,pc,3166
8001b076:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b07a:	ec f8 00 58 	ld.w	r8,r6[88]
8001b07e:	90 08       	ld.sh	r8,r8[0x0]
8001b080:	5c 78       	castu.h	r8
8001b082:	30 ab       	mov	r11,10
8001b084:	10 9c       	mov	r12,r8
8001b086:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b08a:	fe cc 0c 66 	sub	r12,pc,3174
8001b08e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001b092:	30 ab       	mov	r11,10
8001b094:	31 4c       	mov	r12,20
8001b096:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b09a:	fe cc 0c ae 	sub	r12,pc,3246
8001b09e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b0a2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0a6:	30 08       	mov	r8,0
8001b0a8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b0aa:	fe 9f fa e5 	bral	8001a674 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001b0ae:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0b2:	30 08       	mov	r8,0
8001b0b4:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001b0b6:	fe cc 0b 3e 	sub	r12,pc,2878
8001b0ba:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001b0be:	ec f8 00 60 	ld.w	r8,r6[96]
8001b0c2:	11 88       	ld.ub	r8,r8[0x0]
8001b0c4:	31 0b       	mov	r11,16
8001b0c6:	10 9c       	mov	r12,r8
8001b0c8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001b0cc:	fe cc 0c 0c 	sub	r12,pc,3084
8001b0d0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001b0d4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b0d8:	11 88       	ld.ub	r8,r8[0x0]
8001b0da:	31 0b       	mov	r11,16
8001b0dc:	10 9c       	mov	r12,r8
8001b0de:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001b0e2:	fe cc 0c 12 	sub	r12,pc,3090
8001b0e6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001b0ea:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0ee:	90 08       	ld.sh	r8,r8[0x0]
8001b0f0:	5c 78       	castu.h	r8
8001b0f2:	30 ab       	mov	r11,10
8001b0f4:	10 9c       	mov	r12,r8
8001b0f6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001b0fa:	fe cc 0b 5e 	sub	r12,pc,2910
8001b0fe:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001b102:	31 0b       	mov	r11,16
8001b104:	30 1c       	mov	r12,1
8001b106:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001b10a:	fe cc 0d 1e 	sub	r12,pc,3358
8001b10e:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001b112:	fe 9f fa b1 	bral	8001a674 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b116:	c0 69       	rjmp	8001b322 <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001b118:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b11c:	30 08       	mov	r8,0
8001b11e:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001b120:	fe cc 0b 40 	sub	r12,pc,2880
8001b124:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b128:	ec f8 00 60 	ld.w	r8,r6[96]
8001b12c:	11 88       	ld.ub	r8,r8[0x0]
8001b12e:	31 0b       	mov	r11,16
8001b130:	10 9c       	mov	r12,r8
8001b132:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001b136:	fe cc 0c 76 	sub	r12,pc,3190
8001b13a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b13e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b142:	11 88       	ld.ub	r8,r8[0x0]
8001b144:	31 0b       	mov	r11,16
8001b146:	10 9c       	mov	r12,r8
8001b148:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001b14c:	fe cc 0c 7c 	sub	r12,pc,3196
8001b150:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001b154:	ec f8 00 58 	ld.w	r8,r6[88]
8001b158:	90 08       	ld.sh	r8,r8[0x0]
8001b15a:	5c 78       	castu.h	r8
8001b15c:	30 ab       	mov	r11,10
8001b15e:	10 9c       	mov	r12,r8
8001b160:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b164:	fe cc 0d 78 	sub	r12,pc,3448
8001b168:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001b16c:	fe 9f fa 84 	bral	8001a674 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001b170:	ec f8 00 a8 	ld.w	r8,r6[168]
8001b174:	11 88       	ld.ub	r8,r8[0x0]
8001b176:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b17a:	f2 08 00 08 	add	r8,r9,r8
8001b17e:	5c 58       	castu.b	r8
8001b180:	ec f9 00 a8 	ld.w	r9,r6[168]
8001b184:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b186:	ec f8 01 04 	ld.w	r8,r6[260]
8001b18a:	11 89       	ld.ub	r9,r8[0x0]
8001b18c:	ec f8 00 a8 	ld.w	r8,r6[168]
8001b190:	11 88       	ld.ub	r8,r8[0x0]
8001b192:	f2 08 00 08 	add	r8,r9,r8
8001b196:	5c 58       	castu.b	r8
8001b198:	ec f9 01 04 	ld.w	r9,r6[260]
8001b19c:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001b19e:	ec f8 00 d0 	ld.w	r8,r6[208]
8001b1a2:	70 08       	ld.w	r8,r8[0x0]
8001b1a4:	70 09       	ld.w	r9,r8[0x0]
8001b1a6:	ec f8 00 58 	ld.w	r8,r6[88]
8001b1aa:	90 08       	ld.sh	r8,r8[0x0]
8001b1ac:	5c 78       	castu.h	r8
8001b1ae:	f0 ca 00 01 	sub	r10,r8,1
8001b1b2:	ec f8 01 b4 	ld.w	r8,r6[436]
8001b1b6:	90 08       	ld.sh	r8,r8[0x0]
8001b1b8:	5c 78       	castu.h	r8
8001b1ba:	f4 08 01 08 	sub	r8,r10,r8
8001b1be:	10 09       	add	r9,r8
8001b1c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b1c4:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001b1c6:	ec f8 01 b4 	ld.w	r8,r6[436]
8001b1ca:	90 08       	ld.sh	r8,r8[0x0]
8001b1cc:	2f f8       	sub	r8,-1
8001b1ce:	5c 88       	casts.h	r8
8001b1d0:	ec f9 01 b4 	ld.w	r9,r6[436]
8001b1d4:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001b1d6:	ec f8 01 b4 	ld.w	r8,r6[436]
8001b1da:	90 09       	ld.sh	r9,r8[0x0]
8001b1dc:	ec f8 00 58 	ld.w	r8,r6[88]
8001b1e0:	90 08       	ld.sh	r8,r8[0x0]
8001b1e2:	f0 09 19 00 	cp.h	r9,r8
8001b1e6:	e0 81 00 9b 	brne	8001b31c <ubx_read+0xcd6>
			{
				step++;
8001b1ea:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b1ee:	11 88       	ld.ub	r8,r8[0x0]
8001b1f0:	2f f8       	sub	r8,-1
8001b1f2:	5c 58       	castu.b	r8
8001b1f4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b1f8:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001b1fa:	c9 48       	rjmp	8001b322 <ubx_read+0xcdc>
		case 7:
			step++;
8001b1fc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b200:	11 88       	ld.ub	r8,r8[0x0]
8001b202:	2f f8       	sub	r8,-1
8001b204:	5c 58       	castu.b	r8
8001b206:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b20a:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001b20c:	ec f8 00 a8 	ld.w	r8,r6[168]
8001b210:	11 88       	ld.ub	r8,r8[0x0]
8001b212:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b216:	f0 09 18 00 	cp.b	r9,r8
8001b21a:	e0 80 00 83 	breq	8001b320 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001b21e:	fe cc 0c 1e 	sub	r12,pc,3102
8001b222:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b226:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b22a:	31 0b       	mov	r11,16
8001b22c:	10 9c       	mov	r12,r8
8001b22e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b232:	fe cc 0c 22 	sub	r12,pc,3106
8001b236:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001b23a:	ec f8 00 a8 	ld.w	r8,r6[168]
8001b23e:	11 88       	ld.ub	r8,r8[0x0]
8001b240:	31 0b       	mov	r11,16
8001b242:	10 9c       	mov	r12,r8
8001b244:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001b248:	fe cc 0c 2c 	sub	r12,pc,3116
8001b24c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b250:	ec f8 00 60 	ld.w	r8,r6[96]
8001b254:	11 88       	ld.ub	r8,r8[0x0]
8001b256:	31 0b       	mov	r11,16
8001b258:	10 9c       	mov	r12,r8
8001b25a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001b25e:	fe cc 0c 36 	sub	r12,pc,3126
8001b262:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b266:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b26a:	11 88       	ld.ub	r8,r8[0x0]
8001b26c:	31 0b       	mov	r11,16
8001b26e:	10 9c       	mov	r12,r8
8001b270:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b274:	fe cc 0e 88 	sub	r12,pc,3720
8001b278:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001b27c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b280:	30 08       	mov	r8,0
8001b282:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001b284:	fe 9f f9 f8 	bral	8001a674 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001b288:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b28c:	30 08       	mov	r8,0
8001b28e:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001b290:	ec f8 01 04 	ld.w	r8,r6[260]
8001b294:	11 88       	ld.ub	r8,r8[0x0]
8001b296:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b29a:	f0 09 18 00 	cp.b	r9,r8
8001b29e:	c1 b0       	breq	8001b2d4 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001b2a0:	fe cc 0c 68 	sub	r12,pc,3176
8001b2a4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b2a8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b2ac:	31 0b       	mov	r11,16
8001b2ae:	10 9c       	mov	r12,r8
8001b2b0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b2b4:	fe cc 0c a4 	sub	r12,pc,3236
8001b2b8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001b2bc:	ec f8 01 04 	ld.w	r8,r6[260]
8001b2c0:	11 88       	ld.ub	r8,r8[0x0]
8001b2c2:	31 0b       	mov	r11,16
8001b2c4:	10 9c       	mov	r12,r8
8001b2c6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b2ca:	fe cc 0e de 	sub	r12,pc,3806
8001b2ce:	f0 16 00 01 	mcall	r6[4]
				break;
8001b2d2:	c2 88       	rjmp	8001b322 <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001b2d4:	ec f8 00 f4 	ld.w	r8,r6[244]
8001b2d8:	70 08       	ld.w	r8,r8[0x0]
8001b2da:	90 09       	ld.sh	r9,r8[0x0]
8001b2dc:	2f f9       	sub	r9,-1
8001b2de:	5c 89       	casts.h	r9
8001b2e0:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001b2e2:	ec f8 00 d0 	ld.w	r8,r6[208]
8001b2e6:	70 08       	ld.w	r8,r8[0x0]
8001b2e8:	70 08       	ld.w	r8,r8[0x0]
8001b2ea:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001b2ee:	ec f8 00 d0 	ld.w	r8,r6[208]
8001b2f2:	70 08       	ld.w	r8,r8[0x0]
8001b2f4:	ec f9 00 dc 	ld.w	r9,r6[220]
8001b2f8:	72 09       	ld.w	r9,r9[0x0]
8001b2fa:	72 09       	ld.w	r9,r9[0x0]
8001b2fc:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001b2fe:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b302:	70 08       	ld.w	r8,r8[0x0]
8001b304:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b308:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001b30a:	f0 16 02 05 	mcall	r6[2068]
8001b30e:	18 98       	mov	r8,r12
8001b310:	58 08       	cp.w	r8,0
8001b312:	c0 80       	breq	8001b322 <ubx_read+0xcdc>
			{
				msg_ok = true;
8001b314:	30 18       	mov	r8,1
8001b316:	ef 68 ff fb 	st.b	r7[-5],r8
8001b31a:	c0 48       	rjmp	8001b322 <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001b31c:	d7 03       	nop
8001b31e:	c0 28       	rjmp	8001b322 <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001b320:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b322:	ec f8 00 00 	ld.w	r8,r6[0]
8001b326:	70 08       	ld.w	r8,r8[0x0]
8001b328:	f0 c8 f7 6c 	sub	r8,r8,-2196
8001b32c:	10 9c       	mov	r12,r8
8001b32e:	f0 16 00 2c 	mcall	r6[176]
8001b332:	18 98       	mov	r8,r12
8001b334:	58 08       	cp.w	r8,0
8001b336:	fe 91 f9 94 	brne	8001a65e <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001b33a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001b33e:	10 9c       	mov	r12,r8
8001b340:	2f ed       	sub	sp,-8
8001b342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b346:	00 00       	add	r0,r0
8001b348:	80 01       	ld.sh	r1,r0[0x0]
8001b34a:	a4 d6       	st.b	r2[0x5],r6
8001b34c:	4d 53       	lddpc	r3,8001b4a0 <ubx_read+0xe5a>
8001b34e:	47 5f       	lddsp	pc,sp[0x1d4]
8001b350:	4d 4f       	lddpc	pc,8001b4a0 <ubx_read+0xe5a>
8001b352:	4e 20       	lddpc	r0,8001b4d8 <ubx_read+0xe92>
8001b354:	47 50       	lddsp	r0,sp[0x1d4]
8001b356:	53 20       	stdsp	sp[0xc8],r0
8001b358:	61 77       	ld.w	r7,r0[0x5c]
8001b35a:	61 6b       	ld.w	r11,r0[0x58]
8001b35c:	65 0a       	ld.w	r10,r2[0x40]
8001b35e:	00 00       	add	r0,r0
8001b360:	4d 53       	lddpc	r3,8001b4b4 <ubx_read+0xe6e>
8001b362:	47 5f       	lddsp	pc,sp[0x1d4]
8001b364:	54 49       	stdsp	sp[0x110],r9
8001b366:	4d 5f       	lddpc	pc,8001b4b8 <ubx_read+0xe72>
8001b368:	54 50       	stdsp	sp[0x114],r0
8001b36a:	20 47       	sub	r7,4
8001b36c:	50 53       	stdsp	sp[0x14],r3
8001b36e:	20 61       	sub	r1,6
8001b370:	77 61       	ld.w	r1,r11[0x58]
8001b372:	6b 65       	ld.w	r5,r5[0x58]
8001b374:	0a 00       	add	r0,r5
8001b376:	00 00       	add	r0,r0
8001b378:	4d 53       	lddpc	r3,8001b4cc <ubx_read+0xe86>
8001b37a:	47 5f       	lddsp	pc,sp[0x1d4]
8001b37c:	54 49       	stdsp	sp[0x110],r9
8001b37e:	4d 5f       	lddpc	pc,8001b4d0 <ubx_read+0xe8a>
8001b380:	56 52       	stdsp	sp[0x194],r2
8001b382:	46 59       	lddsp	r9,sp[0x194]
8001b384:	00 00       	add	r0,r0
8001b386:	00 00       	add	r0,r0
8001b388:	20 69       	sub	r9,6
8001b38a:	74 6f       	ld.w	pc,r10[0x18]
8001b38c:	77 20       	ld.w	r0,r11[0x48]
8001b38e:	3a 00       	mov	r0,-96
8001b390:	20 66       	sub	r6,6
8001b392:	72 61       	ld.w	r1,r9[0x18]
8001b394:	63 20       	ld.w	r0,r1[0x48]
8001b396:	3a 00       	mov	r0,-96
8001b398:	20 64       	sub	r4,6
8001b39a:	65 6c       	ld.w	r12,r2[0x58]
8001b39c:	74 61       	ld.w	r1,r10[0x18]
8001b39e:	4d 73       	lddpc	r3,8001b4f8 <ubx_read+0xeb2>
8001b3a0:	20 3a       	sub	r10,3
8001b3a2:	00 00       	add	r0,r0
8001b3a4:	20 64       	sub	r4,6
8001b3a6:	65 6c       	ld.w	r12,r2[0x58]
8001b3a8:	74 61       	ld.w	r1,r10[0x18]
8001b3aa:	4e 73       	lddpc	r3,8001b544 <ubx_read+0xefe>
8001b3ac:	20 3a       	sub	r10,3
8001b3ae:	00 00       	add	r0,r0
8001b3b0:	47 6f       	lddsp	pc,sp[0x1d8]
8001b3b2:	74 20       	ld.w	r0,r10[0x8]
8001b3b4:	65 6e       	ld.w	lr,r2[0x58]
8001b3b6:	67 69       	ld.w	r9,r3[0x58]
8001b3b8:	6e 65       	ld.w	r5,r7[0x18]
8001b3ba:	20 73       	sub	r3,7
8001b3bc:	65 74       	ld.w	r4,r2[0x5c]
8001b3be:	74 69       	ld.w	r9,r10[0x18]
8001b3c0:	6e 67       	ld.w	r7,r7[0x18]
8001b3c2:	73 20       	ld.w	r0,r9[0x48]
8001b3c4:	00 00       	add	r0,r0
8001b3c6:	00 00       	add	r0,r0
8001b3c8:	53 65       	stdsp	sp[0xd8],r5
8001b3ca:	6e 64       	ld.w	r4,r7[0x18]
8001b3cc:	20 4e       	sub	lr,4
8001b3ce:	61 76       	ld.w	r6,r0[0x5c]
8001b3d0:	20 73       	sub	r3,7
8001b3d2:	65 74       	ld.w	r4,r2[0x5c]
8001b3d4:	74 69       	ld.w	r9,r10[0x18]
8001b3d6:	6e 67       	ld.w	r7,r7[0x18]
8001b3d8:	73 00       	ld.w	r0,r9[0x40]
8001b3da:	00 00       	add	r0,r0
8001b3dc:	4e 6f       	lddpc	pc,8001b574 <ubx_read+0xf2e>
8001b3de:	20 65       	sub	r5,6
8001b3e0:	6e 67       	ld.w	r7,r7[0x18]
8001b3e2:	69 6e       	ld.w	lr,r4[0x58]
8001b3e4:	65 20       	ld.w	r0,r2[0x48]
8001b3e6:	73 65       	ld.w	r5,r9[0x58]
8001b3e8:	74 74       	ld.w	r4,r10[0x1c]
8001b3ea:	69 6e       	ld.w	lr,r4[0x58]
8001b3ec:	67 73       	ld.w	r3,r3[0x5c]
8001b3ee:	20 72       	sub	r2,7
8001b3f0:	65 63       	ld.w	r3,r2[0x58]
8001b3f2:	65 69       	ld.w	r9,r2[0x58]
8001b3f4:	76 65       	ld.w	r5,r11[0x18]
8001b3f6:	64 20       	ld.w	r0,r2[0x8]
8001b3f8:	00 00       	add	r0,r0
8001b3fa:	00 00       	add	r0,r0
8001b3fc:	4d 65       	lddpc	r5,8001b554 <ubx_read+0xf0e>
8001b3fe:	73 73       	ld.w	r3,r9[0x5c]
8001b400:	61 67       	ld.w	r7,r0[0x58]
8001b402:	65 20       	ld.w	r0,r2[0x48]
8001b404:	43 46       	lddsp	r6,sp[0xd0]
8001b406:	47 20       	lddsp	r0,sp[0x1c8]
8001b408:	52 61       	stdsp	sp[0x98],r1
8001b40a:	74 65       	ld.w	r5,r10[0x18]
8001b40c:	20 30       	sub	r0,3
8001b40e:	78 00       	ld.w	r0,r12[0x0]
8001b410:	55 6e       	stdsp	sp[0x158],lr
8001b412:	65 78       	ld.w	r8,r2[0x5c]
8001b414:	70 65       	ld.w	r5,r8[0x18]
8001b416:	63 74       	ld.w	r4,r1[0x5c]
8001b418:	65 64       	ld.w	r4,r2[0x58]
8001b41a:	20 6d       	sub	sp,24
8001b41c:	65 73       	ld.w	r3,r2[0x5c]
8001b41e:	73 61       	ld.w	r1,r9[0x58]
8001b420:	67 65       	ld.w	r5,r3[0x58]
8001b422:	20 30       	sub	r0,3
8001b424:	78 00       	ld.w	r0,r12[0x0]
8001b426:	00 00       	add	r0,r0
8001b428:	30 32       	mov	r2,3
8001b42a:	78 20       	ld.w	r0,r12[0x8]
8001b42c:	30 78       	mov	r8,7
8001b42e:	00 00       	add	r0,r0
8001b430:	30 32       	mov	r2,3
8001b432:	78 0a       	ld.w	r10,r12[0x0]
8001b434:	00 00       	add	r0,r0
8001b436:	00 00       	add	r0,r0
8001b438:	44 69       	lddsp	r9,sp[0x118]
8001b43a:	73 61       	ld.w	r1,r9[0x58]
8001b43c:	62 6c       	ld.w	r12,r1[0x18]
8001b43e:	69 6e       	ld.w	lr,r4[0x58]
8001b440:	67 20       	ld.w	r0,r3[0x48]
8001b442:	6d 65       	ld.w	r5,r6[0x58]
8001b444:	73 73       	ld.w	r3,r9[0x5c]
8001b446:	61 67       	ld.w	r7,r0[0x58]
8001b448:	65 20       	ld.w	r0,r2[0x48]
8001b44a:	30 78       	mov	r8,7
8001b44c:	00 00       	add	r0,r0
8001b44e:	00 00       	add	r0,r0
8001b450:	4d 53       	lddpc	r3,8001b5a4 <ubx_read+0xf5e>
8001b452:	47 5f       	lddsp	pc,sp[0x1d4]
8001b454:	4e 41       	lddpc	r1,8001b5e4 <ubx_read+0xf9e>
8001b456:	56 5f       	stdsp	sp[0x194],pc
8001b458:	50 4f       	stdsp	sp[0x10],pc
8001b45a:	53 4c       	stdsp	sp[0xd0],r12
8001b45c:	4c 48       	lddpc	r8,8001b56c <ubx_read+0xf26>
8001b45e:	00 00       	add	r0,r0
8001b460:	20 6c       	sub	r12,6
8001b462:	6f 6e       	ld.w	lr,r7[0x58]
8001b464:	67 69       	ld.w	r9,r3[0x58]
8001b466:	74 75       	ld.w	r5,r10[0x1c]
8001b468:	64 65       	ld.w	r5,r2[0x18]
8001b46a:	20 3a       	sub	r10,3
8001b46c:	00 00       	add	r0,r0
8001b46e:	00 00       	add	r0,r0
8001b470:	20 6c       	sub	r12,6
8001b472:	61 74       	ld.w	r4,r0[0x5c]
8001b474:	69 74       	ld.w	r4,r4[0x5c]
8001b476:	75 64       	ld.w	r4,r10[0x58]
8001b478:	65 20       	ld.w	r0,r2[0x48]
8001b47a:	3a 00       	mov	r0,-96
8001b47c:	20 61       	sub	r1,6
8001b47e:	6c 74       	ld.w	r4,r6[0x1c]
8001b480:	5f 65       	srmi	r5
8001b482:	6c 6c       	ld.w	r12,r6[0x18]
8001b484:	69 70       	ld.w	r0,r4[0x5c]
8001b486:	73 20       	ld.w	r0,r9[0x48]
8001b488:	3a 00       	mov	r0,-96
8001b48a:	00 00       	add	r0,r0
8001b48c:	20 61       	sub	r1,6
8001b48e:	6c 74       	ld.w	r4,r6[0x1c]
8001b490:	5f 6d       	srmi	sp
8001b492:	73 6c       	ld.w	r12,r9[0x58]
8001b494:	20 3a       	sub	r10,3
8001b496:	00 00       	add	r0,r0
8001b498:	20 68       	sub	r8,6
8001b49a:	6f 72       	ld.w	r2,r7[0x5c]
8001b49c:	7a 5f       	ld.w	pc,sp[0x14]
8001b49e:	61 63       	ld.w	r3,r0[0x58]
8001b4a0:	63 20       	ld.w	r0,r1[0x48]
8001b4a2:	3a 00       	mov	r0,-96
8001b4a4:	20 76       	sub	r6,7
8001b4a6:	65 72       	ld.w	r2,r2[0x5c]
8001b4a8:	74 5f       	ld.w	pc,r10[0x14]
8001b4aa:	61 63       	ld.w	r3,r0[0x58]
8001b4ac:	63 20       	ld.w	r0,r1[0x48]
8001b4ae:	3a 00       	mov	r0,-96
8001b4b0:	4d 53       	lddpc	r3,8001b604 <ubx_read+0xfbe>
8001b4b2:	47 5f       	lddsp	pc,sp[0x1d4]
8001b4b4:	53 54       	stdsp	sp[0xd4],r4
8001b4b6:	41 54       	lddsp	r4,sp[0x54]
8001b4b8:	55 53       	stdsp	sp[0x154],r3
8001b4ba:	20 66       	sub	r6,6
8001b4bc:	69 78       	ld.w	r8,r4[0x5c]
8001b4be:	5f 74       	srpl	r4
8001b4c0:	79 70       	ld.w	r0,r12[0x5c]
8001b4c2:	65 20       	ld.w	r0,r2[0x48]
8001b4c4:	3d 20       	mov	r0,-46
8001b4c6:	30 78       	mov	r8,7
8001b4c8:	00 00       	add	r0,r0
8001b4ca:	00 00       	add	r0,r0
8001b4cc:	2c 20       	sub	r0,-62
8001b4ce:	75 70       	ld.w	r0,r10[0x5c]
8001b4d0:	74 69       	ld.w	r9,r10[0x18]
8001b4d2:	6d 65       	ld.w	r5,r6[0x58]
8001b4d4:	20 3d       	sub	sp,12
8001b4d6:	00 00       	add	r0,r0
8001b4d8:	4d 53       	lddpc	r3,8001b62c <ubx_process_data+0xe>
8001b4da:	47 5f       	lddsp	pc,sp[0x1d4]
8001b4dc:	53 4f       	stdsp	sp[0xd0],pc
8001b4de:	4c 20       	lddpc	r0,8001b5e4 <ubx_read+0xf9e>
8001b4e0:	00 00       	add	r0,r0
8001b4e2:	00 00       	add	r0,r0
8001b4e4:	69 74       	ld.w	r4,r4[0x5c]
8001b4e6:	6f 77       	ld.w	r7,r7[0x5c]
8001b4e8:	20 3a       	sub	r10,3
8001b4ea:	00 00       	add	r0,r0
8001b4ec:	20 77       	sub	r7,7
8001b4ee:	65 65       	ld.w	r5,r2[0x58]
8001b4f0:	6b 20       	ld.w	r0,r5[0x48]
8001b4f2:	3a 00       	mov	r0,-96
8001b4f4:	20 66       	sub	r6,6
8001b4f6:	69 78       	ld.w	r8,r4[0x5c]
8001b4f8:	5f 74       	srpl	r4
8001b4fa:	79 70       	ld.w	r0,r12[0x5c]
8001b4fc:	65 20       	ld.w	r0,r2[0x48]
8001b4fe:	3d 20       	mov	r0,-46
8001b500:	30 78       	mov	r8,7
8001b502:	30 00       	mov	r0,0
8001b504:	20 70       	sub	r0,7
8001b506:	6f 73       	ld.w	r3,r7[0x5c]
8001b508:	5f 61       	srmi	r1
8001b50a:	63 63       	ld.w	r3,r1[0x58]
8001b50c:	5f 33       	srlo	r3
8001b50e:	64 20       	ld.w	r0,r2[0x8]
8001b510:	3a 00       	mov	r0,-96
8001b512:	00 00       	add	r0,r0
8001b514:	20 65       	sub	r5,6
8001b516:	63 65       	ld.w	r5,r1[0x58]
8001b518:	66 78       	ld.w	r8,r3[0x1c]
8001b51a:	20 3a       	sub	r10,3
8001b51c:	00 00       	add	r0,r0
8001b51e:	00 00       	add	r0,r0
8001b520:	20 65       	sub	r5,6
8001b522:	63 65       	ld.w	r5,r1[0x58]
8001b524:	66 79       	ld.w	r9,r3[0x1c]
8001b526:	20 3a       	sub	r10,3
8001b528:	00 00       	add	r0,r0
8001b52a:	00 00       	add	r0,r0
8001b52c:	20 65       	sub	r5,6
8001b52e:	63 65       	ld.w	r5,r1[0x58]
8001b530:	66 7a       	ld.w	r10,r3[0x1c]
8001b532:	20 3a       	sub	r10,3
8001b534:	00 00       	add	r0,r0
8001b536:	00 00       	add	r0,r0
8001b538:	20 70       	sub	r0,7
8001b53a:	6f 73       	ld.w	r3,r7[0x5c]
8001b53c:	5f 44       	srge	r4
8001b53e:	4f 50       	lddpc	r0,8001b710 <ubx_process_data+0xf2>
8001b540:	20 3a       	sub	r10,3
8001b542:	00 00       	add	r0,r0
8001b544:	20 6e       	sub	lr,6
8001b546:	75 6d       	ld.w	sp,r10[0x58]
8001b548:	20 73       	sub	r3,7
8001b54a:	61 74       	ld.w	r4,r0[0x5c]
8001b54c:	20 3a       	sub	r10,3
8001b54e:	00 00       	add	r0,r0
8001b550:	4d 53       	lddpc	r3,8001b6a4 <ubx_process_data+0x86>
8001b552:	47 5f       	lddsp	pc,sp[0x1d4]
8001b554:	4e 41       	lddpc	r1,8001b6e4 <ubx_process_data+0xc6>
8001b556:	56 5f       	stdsp	sp[0x194],pc
8001b558:	56 45       	stdsp	sp[0x190],r5
8001b55a:	4c 4e       	lddpc	lr,8001b668 <ubx_process_data+0x4a>
8001b55c:	45 44       	lddsp	r4,sp[0x150]
8001b55e:	20 00       	sub	r0,0
8001b560:	20 6e       	sub	lr,6
8001b562:	65 64       	ld.w	r4,r2[0x58]
8001b564:	5f 6e       	srmi	lr
8001b566:	6f 72       	ld.w	r2,r7[0x5c]
8001b568:	74 68       	ld.w	r8,r10[0x18]
8001b56a:	20 3a       	sub	r10,3
8001b56c:	00 00       	add	r0,r0
8001b56e:	00 00       	add	r0,r0
8001b570:	20 6e       	sub	lr,6
8001b572:	65 64       	ld.w	r4,r2[0x58]
8001b574:	5f 65       	srmi	r5
8001b576:	61 73       	ld.w	r3,r0[0x5c]
8001b578:	74 20       	ld.w	r0,r10[0x8]
8001b57a:	3a 00       	mov	r0,-96
8001b57c:	20 6e       	sub	lr,6
8001b57e:	65 64       	ld.w	r4,r2[0x58]
8001b580:	5f 64       	srmi	r4
8001b582:	6f 77       	ld.w	r7,r7[0x5c]
8001b584:	6e 20       	ld.w	r0,r7[0x8]
8001b586:	3a 00       	mov	r0,-96
8001b588:	20 73       	sub	r3,7
8001b58a:	70 65       	ld.w	r5,r8[0x18]
8001b58c:	65 64       	ld.w	r4,r2[0x58]
8001b58e:	5f 33       	srlo	r3
8001b590:	64 20       	ld.w	r0,r2[0x8]
8001b592:	3a 00       	mov	r0,-96
8001b594:	20 68       	sub	r8,6
8001b596:	65 61       	ld.w	r1,r2[0x58]
8001b598:	64 69       	ld.w	r9,r2[0x18]
8001b59a:	6e 67       	ld.w	r7,r7[0x18]
8001b59c:	5f 32       	srlo	r2
8001b59e:	64 20       	ld.w	r0,r2[0x8]
8001b5a0:	3a 00       	mov	r0,-96
8001b5a2:	00 00       	add	r0,r0
8001b5a4:	20 73       	sub	r3,7
8001b5a6:	70 65       	ld.w	r5,r8[0x18]
8001b5a8:	65 64       	ld.w	r4,r2[0x58]
8001b5aa:	5f 61       	srmi	r1
8001b5ac:	63 63       	ld.w	r3,r1[0x58]
8001b5ae:	75 72       	ld.w	r2,r10[0x5c]
8001b5b0:	61 63       	ld.w	r3,r0[0x58]
8001b5b2:	79 20       	ld.w	r0,r12[0x48]
8001b5b4:	3a 00       	mov	r0,-96
8001b5b6:	00 00       	add	r0,r0
8001b5b8:	20 68       	sub	r8,6
8001b5ba:	65 61       	ld.w	r1,r2[0x58]
8001b5bc:	64 69       	ld.w	r9,r2[0x18]
8001b5be:	6e 67       	ld.w	r7,r7[0x18]
8001b5c0:	5f 61       	srmi	r1
8001b5c2:	63 63       	ld.w	r3,r1[0x58]
8001b5c4:	75 72       	ld.w	r2,r10[0x5c]
8001b5c6:	61 63       	ld.w	r3,r0[0x58]
8001b5c8:	79 20       	ld.w	r0,r12[0x48]
8001b5ca:	3a 00       	mov	r0,-96
8001b5cc:	4d 53       	lddpc	r3,8001b720 <ubx_process_data+0x102>
8001b5ce:	47 5f       	lddsp	pc,sp[0x1d4]
8001b5d0:	4e 41       	lddpc	r1,8001b760 <ubx_process_data+0x142>
8001b5d2:	56 5f       	stdsp	sp[0x194],pc
8001b5d4:	53 56       	stdsp	sp[0xd4],r6
8001b5d6:	49 4e       	lddpc	lr,8001b624 <ubx_process_data+0x6>
8001b5d8:	46 4f       	lddsp	pc,sp[0x190]
8001b5da:	2c 20       	sub	r0,-62
8001b5dc:	6e 75       	ld.w	r5,r7[0x1c]
8001b5de:	6d 43       	ld.w	r3,r6[0x50]
8001b5e0:	68 61       	ld.w	r1,r4[0x18]
8001b5e2:	6e 6e       	ld.w	lr,r7[0x18]
8001b5e4:	65 6c       	ld.w	r12,r2[0x58]
8001b5e6:	3a 00       	mov	r0,-96
8001b5e8:	55 6e       	stdsp	sp[0x158],lr
8001b5ea:	65 78       	ld.w	r8,r2[0x5c]
8001b5ec:	70 65       	ld.w	r5,r8[0x18]
8001b5ee:	63 74       	ld.w	r4,r1[0x5c]
8001b5f0:	65 64       	ld.w	r4,r2[0x58]
8001b5f2:	20 4e       	sub	lr,4
8001b5f4:	41 56       	lddsp	r6,sp[0x54]
8001b5f6:	20 6d       	sub	sp,24
8001b5f8:	65 73       	ld.w	r3,r2[0x5c]
8001b5fa:	73 61       	ld.w	r1,r9[0x58]
8001b5fc:	67 65       	ld.w	r5,r3[0x58]
8001b5fe:	20 30       	sub	r0,3
8001b600:	78 00       	ld.w	r0,r12[0x0]
8001b602:	00 00       	add	r0,r0
8001b604:	44 69       	lddsp	r9,sp[0x118]
8001b606:	73 61       	ld.w	r1,r9[0x58]
8001b608:	62 6c       	ld.w	r12,r1[0x18]
8001b60a:	69 6e       	ld.w	lr,r4[0x58]
8001b60c:	67 20       	ld.w	r0,r3[0x48]
8001b60e:	4e 41       	lddpc	r1,8001b79c <ubx_process_data+0x17e>
8001b610:	56 20       	stdsp	sp[0x188],r0
8001b612:	6d 65       	ld.w	r5,r6[0x58]
8001b614:	73 73       	ld.w	r3,r9[0x5c]
8001b616:	61 67       	ld.w	r7,r0[0x58]
8001b618:	65 20       	ld.w	r0,r2[0x48]
8001b61a:	30 78       	mov	r8,7
	...

8001b61e <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001b61e:	eb cd 40 e0 	pushm	r5-r7,lr
8001b622:	1a 97       	mov	r7,sp
8001b624:	20 ad       	sub	sp,40
8001b626:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001b62a:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001b62c:	ec f8 00 60 	ld.w	r8,r6[96]
8001b630:	11 89       	ld.ub	r9,r8[0x0]
8001b632:	30 58       	mov	r8,5
8001b634:	f0 09 18 00 	cp.b	r9,r8
8001b638:	c0 f1       	brne	8001b656 <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001b63a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b63e:	11 88       	ld.ub	r8,r8[0x0]
8001b640:	30 ab       	mov	r11,10
8001b642:	10 9c       	mov	r12,r8
8001b644:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001b648:	fe cc 12 5c 	sub	r12,pc,4700
8001b64c:	f0 16 00 01 	mcall	r6[4]
		return false;
8001b650:	30 08       	mov	r8,0
8001b652:	e0 8f 05 58 	bral	8001c102 <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001b656:	ec f8 00 60 	ld.w	r8,r6[96]
8001b65a:	11 89       	ld.ub	r9,r8[0x0]
8001b65c:	30 a8       	mov	r8,10
8001b65e:	f0 09 18 00 	cp.b	r9,r8
8001b662:	c1 11       	brne	8001b684 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001b664:	f0 16 02 0b 	mcall	r6[2092]
8001b668:	18 98       	mov	r8,r12
8001b66a:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001b66e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b672:	58 08       	cp.w	r8,0
8001b674:	c0 50       	breq	8001b67e <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001b676:	fe cc 03 2a 	sub	r12,pc,810
8001b67a:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001b67e:	30 08       	mov	r8,0
8001b680:	e0 8f 05 41 	bral	8001c102 <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001b684:	ec f8 00 60 	ld.w	r8,r6[96]
8001b688:	11 89       	ld.ub	r9,r8[0x0]
8001b68a:	30 d8       	mov	r8,13
8001b68c:	f0 09 18 00 	cp.b	r9,r8
8001b690:	e0 81 00 89 	brne	8001b7a2 <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001b694:	f0 16 01 45 	mcall	r6[1300]
8001b698:	18 98       	mov	r8,r12
8001b69a:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001b69e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b6a2:	58 08       	cp.w	r8,0
8001b6a4:	c2 40       	breq	8001b6ec <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001b6a6:	ec f8 01 e8 	ld.w	r8,r6[488]
8001b6aa:	11 88       	ld.ub	r8,r8[0x0]
8001b6ac:	2f f8       	sub	r8,-1
8001b6ae:	5c 58       	castu.b	r8
8001b6b0:	ec f9 01 e8 	ld.w	r9,r6[488]
8001b6b4:	b2 88       	st.b	r9[0x0],r8
8001b6b6:	ec f8 01 e8 	ld.w	r8,r6[488]
8001b6ba:	11 88       	ld.ub	r8,r8[0x0]
8001b6bc:	ec f9 01 80 	ld.w	r9,r6[384]
8001b6c0:	13 89       	ld.ub	r9,r9[0x0]
8001b6c2:	f0 09 0d 08 	divu	r8,r8,r9
8001b6c6:	12 98       	mov	r8,r9
8001b6c8:	5c 58       	castu.b	r8
8001b6ca:	ec f9 01 e8 	ld.w	r9,r6[488]
8001b6ce:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001b6d0:	ec f8 01 70 	ld.w	r8,r6[368]
8001b6d4:	11 88       	ld.ub	r8,r8[0x0]
8001b6d6:	58 08       	cp.w	r8,0
8001b6d8:	c0 a0       	breq	8001b6ec <ubx_process_data+0xce>
8001b6da:	ec f8 01 e8 	ld.w	r8,r6[488]
8001b6de:	11 88       	ld.ub	r8,r8[0x0]
8001b6e0:	58 08       	cp.w	r8,0
8001b6e2:	c0 51       	brne	8001b6ec <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001b6e4:	fe cc 03 84 	sub	r12,pc,900
8001b6e8:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001b6ec:	f0 16 02 0d 	mcall	r6[2100]
8001b6f0:	18 98       	mov	r8,r12
8001b6f2:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001b6f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b6fa:	58 08       	cp.w	r8,0
8001b6fc:	c5 00       	breq	8001b79c <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001b6fe:	ec f8 01 a4 	ld.w	r8,r6[420]
8001b702:	11 88       	ld.ub	r8,r8[0x0]
8001b704:	2f f8       	sub	r8,-1
8001b706:	5c 58       	castu.b	r8
8001b708:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b70c:	b2 88       	st.b	r9[0x0],r8
8001b70e:	ec f8 01 a4 	ld.w	r8,r6[420]
8001b712:	11 88       	ld.ub	r8,r8[0x0]
8001b714:	ec f9 01 80 	ld.w	r9,r6[384]
8001b718:	13 89       	ld.ub	r9,r9[0x0]
8001b71a:	f0 09 0d 08 	divu	r8,r8,r9
8001b71e:	12 98       	mov	r8,r9
8001b720:	5c 58       	castu.b	r8
8001b722:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b726:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001b728:	ec f8 01 70 	ld.w	r8,r6[368]
8001b72c:	11 88       	ld.ub	r8,r8[0x0]
8001b72e:	58 08       	cp.w	r8,0
8001b730:	c3 60       	breq	8001b79c <ubx_process_data+0x17e>
8001b732:	ec f8 01 a4 	ld.w	r8,r6[420]
8001b736:	11 88       	ld.ub	r8,r8[0x0]
8001b738:	58 08       	cp.w	r8,0
8001b73a:	c3 11       	brne	8001b79c <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001b73c:	fe cc 03 c4 	sub	r12,pc,964
8001b740:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b744:	fe cc 03 bc 	sub	r12,pc,956
8001b748:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001b74c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b750:	70 48       	ld.w	r8,r8[0x10]
8001b752:	30 ab       	mov	r11,10
8001b754:	10 9c       	mov	r12,r8
8001b756:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001b75a:	fe cc 03 ca 	sub	r12,pc,970
8001b75e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001b762:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b766:	70 38       	ld.w	r8,r8[0xc]
8001b768:	30 ab       	mov	r11,10
8001b76a:	10 9c       	mov	r12,r8
8001b76c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001b770:	fe cc 03 d8 	sub	r12,pc,984
8001b774:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001b778:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b77c:	70 28       	ld.w	r8,r8[0x8]
8001b77e:	30 ab       	mov	r11,10
8001b780:	10 9c       	mov	r12,r8
8001b782:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001b786:	fe cc 03 e2 	sub	r12,pc,994
8001b78a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001b78e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b792:	70 18       	ld.w	r8,r8[0x4]
8001b794:	30 ab       	mov	r11,10
8001b796:	10 9c       	mov	r12,r8
8001b798:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001b79c:	30 08       	mov	r8,0
8001b79e:	e0 8f 04 b2 	bral	8001c102 <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001b7a2:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7a6:	11 89       	ld.ub	r9,r8[0x0]
8001b7a8:	30 68       	mov	r8,6
8001b7aa:	f0 09 18 00 	cp.b	r9,r8
8001b7ae:	c5 b1       	brne	8001b864 <ubx_process_data+0x246>
8001b7b0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b7b4:	11 89       	ld.ub	r9,r8[0x0]
8001b7b6:	32 48       	mov	r8,36
8001b7b8:	f0 09 18 00 	cp.b	r9,r8
8001b7bc:	c5 41       	brne	8001b864 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001b7be:	f0 16 01 e6 	mcall	r6[1944]
8001b7c2:	18 98       	mov	r8,r12
8001b7c4:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001b7c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b7cc:	58 08       	cp.w	r8,0
8001b7ce:	c1 20       	breq	8001b7f2 <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001b7d0:	fe cc 04 20 	sub	r12,pc,1056
8001b7d4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001b7d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b7dc:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b7e0:	31 0b       	mov	r11,16
8001b7e2:	10 9c       	mov	r12,r8
8001b7e4:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b7e8:	fe cc 13 fc 	sub	r12,pc,5116
8001b7ec:	f0 16 00 01 	mcall	r6[4]
8001b7f0:	c3 78       	rjmp	8001b85e <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001b7f2:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b7f6:	70 08       	ld.w	r8,r8[0x0]
8001b7f8:	5b f8       	cp.w	r8,-1
8001b7fa:	c2 30       	breq	8001b840 <ubx_process_data+0x222>
8001b7fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b800:	58 08       	cp.w	r8,0
8001b802:	c1 f1       	brne	8001b840 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001b804:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b808:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b80c:	10 99       	mov	r9,r8
8001b80e:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b812:	70 08       	ld.w	r8,r8[0x0]
8001b814:	10 39       	cp.w	r9,r8
8001b816:	c1 50       	breq	8001b840 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001b818:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b81c:	70 08       	ld.w	r8,r8[0x0]
8001b81e:	5c 58       	castu.b	r8
8001b820:	ec f9 03 84 	ld.w	r9,r6[900]
8001b824:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001b828:	fe cc 04 60 	sub	r12,pc,1120
8001b82c:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001b830:	ec f8 03 84 	ld.w	r8,r6[900]
8001b834:	32 49       	mov	r9,36
8001b836:	10 9a       	mov	r10,r8
8001b838:	32 4b       	mov	r11,36
8001b83a:	30 6c       	mov	r12,6
8001b83c:	f0 16 00 f6 	mcall	r6[984]
				}				
			}
			dbg_print("No engine settings received ");
8001b840:	fe cc 04 64 	sub	r12,pc,1124
8001b844:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b848:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b84c:	11 88       	ld.ub	r8,r8[0x0]
8001b84e:	31 0b       	mov	r11,16
8001b850:	10 9c       	mov	r12,r8
8001b852:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b856:	fe cc 14 6a 	sub	r12,pc,5226
8001b85a:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001b85e:	30 08       	mov	r8,0
8001b860:	e0 8f 04 51 	bral	8001c102 <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001b864:	ec f8 00 60 	ld.w	r8,r6[96]
8001b868:	11 89       	ld.ub	r9,r8[0x0]
8001b86a:	30 68       	mov	r8,6
8001b86c:	f0 09 18 00 	cp.b	r9,r8
8001b870:	c3 11       	brne	8001b8d2 <ubx_process_data+0x2b4>
8001b872:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b876:	11 89       	ld.ub	r9,r8[0x0]
8001b878:	30 18       	mov	r8,1
8001b87a:	f0 09 18 00 	cp.b	r9,r8
8001b87e:	c2 a1       	brne	8001b8d2 <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001b880:	f0 16 01 8c 	mcall	r6[1584]
8001b884:	18 98       	mov	r8,r12
8001b886:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001b88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b88e:	58 08       	cp.w	r8,0
8001b890:	c1 e0       	breq	8001b8cc <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001b892:	fe cc 04 96 	sub	r12,pc,1174
8001b896:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001b89a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b89e:	11 a8       	ld.ub	r8,r8[0x2]
8001b8a0:	31 0b       	mov	r11,16
8001b8a2:	10 9c       	mov	r12,r8
8001b8a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001b8a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b8ac:	11 98       	ld.ub	r8,r8[0x1]
8001b8ae:	31 0b       	mov	r11,16
8001b8b0:	10 9c       	mov	r12,r8
8001b8b2:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001b8b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b8ba:	11 88       	ld.ub	r8,r8[0x0]
8001b8bc:	30 ab       	mov	r11,10
8001b8be:	10 9c       	mov	r12,r8
8001b8c0:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b8c4:	fe cc 14 d8 	sub	r12,pc,5336
8001b8c8:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001b8cc:	30 08       	mov	r8,0
8001b8ce:	e0 8f 04 1a 	bral	8001c102 <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001b8d2:	ec f8 00 60 	ld.w	r8,r6[96]
8001b8d6:	11 89       	ld.ub	r9,r8[0x0]
8001b8d8:	30 18       	mov	r8,1
8001b8da:	f0 09 18 00 	cp.b	r9,r8
8001b8de:	c5 10       	breq	8001b980 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001b8e0:	fe cc 04 d0 	sub	r12,pc,1232
8001b8e4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001b8e8:	ec f8 00 60 	ld.w	r8,r6[96]
8001b8ec:	11 88       	ld.ub	r8,r8[0x0]
8001b8ee:	31 0b       	mov	r11,16
8001b8f0:	10 9c       	mov	r12,r8
8001b8f2:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001b8f6:	fe cc 04 ce 	sub	r12,pc,1230
8001b8fa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b8fe:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b902:	11 88       	ld.ub	r8,r8[0x0]
8001b904:	30 ab       	mov	r11,10
8001b906:	10 9c       	mov	r12,r8
8001b908:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001b90c:	fe cc 04 dc 	sub	r12,pc,1244
8001b910:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001b914:	ec f8 01 84 	ld.w	r8,r6[388]
8001b918:	11 88       	ld.ub	r8,r8[0x0]
8001b91a:	2f f8       	sub	r8,-1
8001b91c:	5c 58       	castu.b	r8
8001b91e:	ec f9 01 84 	ld.w	r9,r6[388]
8001b922:	b2 88       	st.b	r9[0x0],r8
8001b924:	ec f8 01 84 	ld.w	r8,r6[388]
8001b928:	11 88       	ld.ub	r8,r8[0x0]
8001b92a:	58 08       	cp.w	r8,0
8001b92c:	c2 71       	brne	8001b97a <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001b92e:	fe cc 04 f6 	sub	r12,pc,1270
8001b932:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001b936:	ec f8 00 60 	ld.w	r8,r6[96]
8001b93a:	11 88       	ld.ub	r8,r8[0x0]
8001b93c:	31 0b       	mov	r11,16
8001b93e:	10 9c       	mov	r12,r8
8001b940:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001b944:	fe cc 05 1c 	sub	r12,pc,1308
8001b948:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b94c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b950:	11 88       	ld.ub	r8,r8[0x0]
8001b952:	31 0b       	mov	r11,16
8001b954:	10 9c       	mov	r12,r8
8001b956:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001b95a:	fe cc 05 2a 	sub	r12,pc,1322
8001b95e:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001b962:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b966:	11 88       	ld.ub	r8,r8[0x0]
8001b968:	10 99       	mov	r9,r8
8001b96a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b96e:	11 88       	ld.ub	r8,r8[0x0]
8001b970:	30 0a       	mov	r10,0
8001b972:	12 9b       	mov	r11,r9
8001b974:	10 9c       	mov	r12,r8
8001b976:	f0 16 00 58 	mcall	r6[352]
		}
		return false;
8001b97a:	30 08       	mov	r8,0
8001b97c:	e0 8f 03 c3 	bral	8001c102 <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001b980:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b984:	11 88       	ld.ub	r8,r8[0x0]
8001b986:	58 68       	cp.w	r8,6
8001b988:	e0 80 01 6f 	breq	8001bc66 <ubx_process_data+0x648>
8001b98c:	e0 89 00 09 	brgt	8001b99e <ubx_process_data+0x380>
8001b990:	58 28       	cp.w	r8,2
8001b992:	c0 f0       	breq	8001b9b0 <ubx_process_data+0x392>
8001b994:	58 38       	cp.w	r8,3
8001b996:	e0 80 01 01 	breq	8001bb98 <ubx_process_data+0x57a>
8001b99a:	e0 8f 03 63 	bral	8001c060 <ubx_process_data+0xa42>
8001b99e:	59 28       	cp.w	r8,18
8001b9a0:	e0 80 02 2c 	breq	8001bdf8 <ubx_process_data+0x7da>
8001b9a4:	e0 48 00 30 	cp.w	r8,48
8001b9a8:	e0 80 03 3e 	breq	8001c024 <ubx_process_data+0xa06>
8001b9ac:	e0 8f 03 5a 	bral	8001c060 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001b9b0:	f0 16 01 6d 	mcall	r6[1460]
8001b9b4:	18 98       	mov	r8,r12
8001b9b6:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001b9ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9be:	58 08       	cp.w	r8,0
8001b9c0:	e0 80 03 85 	breq	8001c0ca <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001b9c4:	ec f8 01 dc 	ld.w	r8,r6[476]
8001b9c8:	11 88       	ld.ub	r8,r8[0x0]
8001b9ca:	2f f8       	sub	r8,-1
8001b9cc:	5c 58       	castu.b	r8
8001b9ce:	ec f9 01 dc 	ld.w	r9,r6[476]
8001b9d2:	b2 88       	st.b	r9[0x0],r8
8001b9d4:	ec f8 01 dc 	ld.w	r8,r6[476]
8001b9d8:	11 88       	ld.ub	r8,r8[0x0]
8001b9da:	ec f9 01 80 	ld.w	r9,r6[384]
8001b9de:	13 89       	ld.ub	r9,r9[0x0]
8001b9e0:	f0 09 0d 08 	divu	r8,r8,r9
8001b9e4:	12 98       	mov	r8,r9
8001b9e6:	5c 58       	castu.b	r8
8001b9e8:	ec f9 01 dc 	ld.w	r9,r6[476]
8001b9ec:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001b9ee:	ec f8 01 70 	ld.w	r8,r6[368]
8001b9f2:	11 88       	ld.ub	r8,r8[0x0]
8001b9f4:	58 08       	cp.w	r8,0
8001b9f6:	c5 b0       	breq	8001baac <ubx_process_data+0x48e>
8001b9f8:	ec f8 01 dc 	ld.w	r8,r6[476]
8001b9fc:	11 88       	ld.ub	r8,r8[0x0]
8001b9fe:	58 08       	cp.w	r8,0
8001ba00:	c5 61       	brne	8001baac <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001ba02:	fe cc 05 b2 	sub	r12,pc,1458
8001ba06:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001ba0a:	fe cc 06 82 	sub	r12,pc,1666
8001ba0e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001ba12:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba16:	70 68       	ld.w	r8,r8[0x18]
8001ba18:	30 ab       	mov	r11,10
8001ba1a:	10 9c       	mov	r12,r8
8001ba1c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001ba20:	fe cc 05 c0 	sub	r12,pc,1472
8001ba24:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001ba28:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba2c:	70 58       	ld.w	r8,r8[0x14]
8001ba2e:	30 ab       	mov	r11,10
8001ba30:	10 9c       	mov	r12,r8
8001ba32:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001ba36:	fe cc 05 c6 	sub	r12,pc,1478
8001ba3a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001ba3e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba42:	70 48       	ld.w	r8,r8[0x10]
8001ba44:	30 ab       	mov	r11,10
8001ba46:	10 9c       	mov	r12,r8
8001ba48:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001ba4c:	fe cc 05 d0 	sub	r12,pc,1488
8001ba50:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001ba54:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba58:	70 38       	ld.w	r8,r8[0xc]
8001ba5a:	30 ab       	mov	r11,10
8001ba5c:	10 9c       	mov	r12,r8
8001ba5e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001ba62:	fe cc 05 d6 	sub	r12,pc,1494
8001ba66:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001ba6a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba6e:	70 28       	ld.w	r8,r8[0x8]
8001ba70:	30 ab       	mov	r11,10
8001ba72:	10 9c       	mov	r12,r8
8001ba74:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001ba78:	fe cc 05 e0 	sub	r12,pc,1504
8001ba7c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001ba80:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba84:	70 18       	ld.w	r8,r8[0x4]
8001ba86:	30 ab       	mov	r11,10
8001ba88:	10 9c       	mov	r12,r8
8001ba8a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001ba8e:	fe cc 05 ea 	sub	r12,pc,1514
8001ba92:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001ba96:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba9a:	70 08       	ld.w	r8,r8[0x0]
8001ba9c:	30 ab       	mov	r11,10
8001ba9e:	10 9c       	mov	r12,r8
8001baa0:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001baa4:	fe cc 16 b8 	sub	r12,pc,5816
8001baa8:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001baac:	ec f8 00 00 	ld.w	r8,r6[0]
8001bab0:	70 08       	ld.w	r8,r8[0x0]
8001bab2:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001bab6:	72 69       	ld.w	r9,r9[0x18]
8001bab8:	f1 49 0a 10 	st.w	r8[2576],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001babc:	ec f8 00 00 	ld.w	r8,r6[0]
8001bac0:	70 05       	ld.w	r5,r8[0x0]
8001bac2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bac6:	70 58       	ld.w	r8,r8[0x14]
8001bac8:	10 9c       	mov	r12,r8
8001baca:	f0 16 00 1a 	mcall	r6[104]
8001bace:	30 08       	mov	r8,0
8001bad0:	e0 69 12 d0 	mov	r9,4816
8001bad4:	ea 19 41 63 	orh	r9,0x4163
8001bad8:	f0 16 00 0c 	mcall	r6[48]
8001badc:	14 98       	mov	r8,r10
8001bade:	16 99       	mov	r9,r11
8001bae0:	ea e9 09 d0 	st.d	r5[2512],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001bae4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bae8:	70 05       	ld.w	r5,r8[0x0]
8001baea:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001baee:	70 48       	ld.w	r8,r8[0x10]
8001baf0:	10 9c       	mov	r12,r8
8001baf2:	f0 16 00 1a 	mcall	r6[104]
8001baf6:	30 08       	mov	r8,0
8001baf8:	e0 69 12 d0 	mov	r9,4816
8001bafc:	ea 19 41 63 	orh	r9,0x4163
8001bb00:	f0 16 00 0c 	mcall	r6[48]
8001bb04:	14 98       	mov	r8,r10
8001bb06:	16 99       	mov	r9,r11
8001bb08:	ea e9 09 c8 	st.d	r5[2504],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001bb0c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb10:	70 05       	ld.w	r5,r8[0x0]
8001bb12:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bb16:	70 38       	ld.w	r8,r8[0xc]
8001bb18:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bb1c:	fc 1b 44 7a 	movh	r11,0x447a
8001bb20:	10 9c       	mov	r12,r8
8001bb22:	f0 16 00 08 	mcall	r6[32]
8001bb26:	18 98       	mov	r8,r12
8001bb28:	eb 48 09 dc 	st.w	r5[2524],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001bb2c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb30:	70 05       	ld.w	r5,r8[0x0]
8001bb32:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bb36:	70 28       	ld.w	r8,r8[0x8]
8001bb38:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bb3c:	fc 1b 44 7a 	movh	r11,0x447a
8001bb40:	10 9c       	mov	r12,r8
8001bb42:	f0 16 00 08 	mcall	r6[32]
8001bb46:	18 98       	mov	r8,r12
8001bb48:	eb 48 09 d8 	st.w	r5[2520],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001bb4c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb50:	70 05       	ld.w	r5,r8[0x0]
8001bb52:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bb56:	70 18       	ld.w	r8,r8[0x4]
8001bb58:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bb5c:	fc 1b 44 7a 	movh	r11,0x447a
8001bb60:	10 9c       	mov	r12,r8
8001bb62:	f0 16 00 08 	mcall	r6[32]
8001bb66:	18 98       	mov	r8,r12
8001bb68:	eb 48 09 f8 	st.w	r5[2552],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001bb6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb70:	70 05       	ld.w	r5,r8[0x0]
8001bb72:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bb76:	70 08       	ld.w	r8,r8[0x0]
8001bb78:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bb7c:	fc 1b 44 7a 	movh	r11,0x447a
8001bb80:	10 9c       	mov	r12,r8
8001bb82:	f0 16 00 08 	mcall	r6[32]
8001bb86:	18 98       	mov	r8,r12
8001bb88:	eb 48 09 fc 	st.w	r5[2556],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001bb8c:	ec f9 02 38 	ld.w	r9,r6[568]
8001bb90:	30 18       	mov	r8,1
8001bb92:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001bb94:	e0 8f 02 a2 	bral	8001c0d8 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001bb98:	f0 16 01 49 	mcall	r6[1316]
8001bb9c:	18 98       	mov	r8,r12
8001bb9e:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001bba2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bba6:	58 08       	cp.w	r8,0
8001bba8:	e0 80 02 93 	breq	8001c0ce <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001bbac:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bbb0:	11 88       	ld.ub	r8,r8[0x0]
8001bbb2:	2f f8       	sub	r8,-1
8001bbb4:	5c 58       	castu.b	r8
8001bbb6:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bbba:	b2 88       	st.b	r9[0x0],r8
8001bbbc:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bbc0:	11 88       	ld.ub	r8,r8[0x0]
8001bbc2:	ec f9 01 80 	ld.w	r9,r6[384]
8001bbc6:	13 89       	ld.ub	r9,r9[0x0]
8001bbc8:	f0 09 0d 08 	divu	r8,r8,r9
8001bbcc:	12 98       	mov	r8,r9
8001bbce:	5c 58       	castu.b	r8
8001bbd0:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bbd4:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001bbd6:	ec f8 01 70 	ld.w	r8,r6[368]
8001bbda:	11 88       	ld.ub	r8,r8[0x0]
8001bbdc:	58 08       	cp.w	r8,0
8001bbde:	c2 10       	breq	8001bc20 <ubx_process_data+0x602>
8001bbe0:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bbe4:	11 88       	ld.ub	r8,r8[0x0]
8001bbe6:	58 08       	cp.w	r8,0
8001bbe8:	c1 c1       	brne	8001bc20 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001bbea:	fe cc 07 3a 	sub	r12,pc,1850
8001bbee:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001bbf2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bbf6:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001bbfa:	31 0b       	mov	r11,16
8001bbfc:	10 9c       	mov	r12,r8
8001bbfe:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001bc02:	fe cc 07 36 	sub	r12,pc,1846
8001bc06:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001bc0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bc0e:	70 08       	ld.w	r8,r8[0x0]
8001bc10:	30 ab       	mov	r11,10
8001bc12:	10 9c       	mov	r12,r8
8001bc14:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bc18:	fe cc 18 2c 	sub	r12,pc,6188
8001bc1c:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001bc20:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bc24:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001bc28:	30 38       	mov	r8,3
8001bc2a:	f0 09 18 00 	cp.b	r9,r8
8001bc2e:	5f 08       	sreq	r8
8001bc30:	5c 58       	castu.b	r8
8001bc32:	ec f9 01 d0 	ld.w	r9,r6[464]
8001bc36:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bc38:	ec f8 01 d0 	ld.w	r8,r6[464]
8001bc3c:	11 88       	ld.ub	r8,r8[0x0]
8001bc3e:	ec 18 00 01 	eorl	r8,0x1
8001bc42:	5c 58       	castu.b	r8
8001bc44:	c0 90       	breq	8001bc56 <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001bc46:	ec f8 00 00 	ld.w	r8,r6[0]
8001bc4a:	70 09       	ld.w	r9,r8[0x0]
8001bc4c:	30 18       	mov	r8,1
8001bc4e:	f3 68 0a 14 	st.b	r9[2580],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bc52:	e0 8f 02 43 	bral	8001c0d8 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bc56:	ec f8 00 00 	ld.w	r8,r6[0]
8001bc5a:	70 09       	ld.w	r9,r8[0x0]
8001bc5c:	30 28       	mov	r8,2
8001bc5e:	f3 68 0a 14 	st.b	r9[2580],r8
			}
		}
		break;
8001bc62:	e0 8f 02 3b 	bral	8001c0d8 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001bc66:	f0 16 01 77 	mcall	r6[1500]
8001bc6a:	18 98       	mov	r8,r12
8001bc6c:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001bc70:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc74:	58 08       	cp.w	r8,0
8001bc76:	e0 80 02 2e 	breq	8001c0d2 <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001bc7a:	ec f8 01 b0 	ld.w	r8,r6[432]
8001bc7e:	11 88       	ld.ub	r8,r8[0x0]
8001bc80:	2f f8       	sub	r8,-1
8001bc82:	5c 58       	castu.b	r8
8001bc84:	ec f9 01 b0 	ld.w	r9,r6[432]
8001bc88:	b2 88       	st.b	r9[0x0],r8
8001bc8a:	ec f8 01 b0 	ld.w	r8,r6[432]
8001bc8e:	11 88       	ld.ub	r8,r8[0x0]
8001bc90:	ec f9 01 80 	ld.w	r9,r6[384]
8001bc94:	13 89       	ld.ub	r9,r9[0x0]
8001bc96:	f0 09 0d 08 	divu	r8,r8,r9
8001bc9a:	12 98       	mov	r8,r9
8001bc9c:	5c 58       	castu.b	r8
8001bc9e:	ec f9 01 b0 	ld.w	r9,r6[432]
8001bca2:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001bca4:	ec f8 01 70 	ld.w	r8,r6[368]
8001bca8:	11 88       	ld.ub	r8,r8[0x0]
8001bcaa:	58 08       	cp.w	r8,0
8001bcac:	c7 40       	breq	8001bd94 <ubx_process_data+0x776>
8001bcae:	ec f8 01 b0 	ld.w	r8,r6[432]
8001bcb2:	11 88       	ld.ub	r8,r8[0x0]
8001bcb4:	58 08       	cp.w	r8,0
8001bcb6:	c6 f1       	brne	8001bd94 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001bcb8:	fe cc 07 e0 	sub	r12,pc,2016
8001bcbc:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001bcc0:	fe cc 07 dc 	sub	r12,pc,2012
8001bcc4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001bcc8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bccc:	70 c8       	ld.w	r8,r8[0x30]
8001bcce:	30 ab       	mov	r11,10
8001bcd0:	10 9c       	mov	r12,r8
8001bcd2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001bcd6:	fe cc 07 ea 	sub	r12,pc,2026
8001bcda:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001bcde:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bce2:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001bce6:	30 ab       	mov	r11,10
8001bce8:	10 9c       	mov	r12,r8
8001bcea:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001bcee:	fe cc 07 fa 	sub	r12,pc,2042
8001bcf2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001bcf6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcfa:	f1 38 00 29 	ld.ub	r8,r8[41]
8001bcfe:	31 0b       	mov	r11,16
8001bd00:	10 9c       	mov	r12,r8
8001bd02:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001bd06:	fe cc 08 02 	sub	r12,pc,2050
8001bd0a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001bd0e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd12:	70 68       	ld.w	r8,r8[0x18]
8001bd14:	30 ab       	mov	r11,10
8001bd16:	10 9c       	mov	r12,r8
8001bd18:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001bd1c:	fe cc 08 08 	sub	r12,pc,2056
8001bd20:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001bd24:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd28:	70 98       	ld.w	r8,r8[0x24]
8001bd2a:	30 ab       	mov	r11,10
8001bd2c:	10 9c       	mov	r12,r8
8001bd2e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001bd32:	fe cc 08 12 	sub	r12,pc,2066
8001bd36:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001bd3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd3e:	70 88       	ld.w	r8,r8[0x20]
8001bd40:	30 ab       	mov	r11,10
8001bd42:	10 9c       	mov	r12,r8
8001bd44:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001bd48:	fe cc 08 1c 	sub	r12,pc,2076
8001bd4c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001bd50:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd54:	70 78       	ld.w	r8,r8[0x1c]
8001bd56:	30 ab       	mov	r11,10
8001bd58:	10 9c       	mov	r12,r8
8001bd5a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001bd5e:	fe cc 08 26 	sub	r12,pc,2086
8001bd62:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001bd66:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd6a:	90 38       	ld.sh	r8,r8[0x6]
8001bd6c:	5c 78       	castu.h	r8
8001bd6e:	30 ab       	mov	r11,10
8001bd70:	10 9c       	mov	r12,r8
8001bd72:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001bd76:	fe cc 08 32 	sub	r12,pc,2098
8001bd7a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001bd7e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd82:	11 c8       	ld.ub	r8,r8[0x4]
8001bd84:	30 ab       	mov	r11,10
8001bd86:	10 9c       	mov	r12,r8
8001bd88:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bd8c:	fe cc 19 a0 	sub	r12,pc,6560
8001bd90:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001bd94:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bd98:	f1 39 00 29 	ld.ub	r9,r8[41]
8001bd9c:	30 38       	mov	r8,3
8001bd9e:	f0 09 18 00 	cp.b	r9,r8
8001bda2:	5f 08       	sreq	r8
8001bda4:	5c 58       	castu.b	r8
8001bda6:	ec f9 01 d0 	ld.w	r9,r6[464]
8001bdaa:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bdac:	ec f8 01 d0 	ld.w	r8,r6[464]
8001bdb0:	11 88       	ld.ub	r8,r8[0x0]
8001bdb2:	ec 18 00 01 	eorl	r8,0x1
8001bdb6:	5c 58       	castu.b	r8
8001bdb8:	c0 80       	breq	8001bdc8 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001bdba:	ec f8 00 00 	ld.w	r8,r6[0]
8001bdbe:	70 09       	ld.w	r9,r8[0x0]
8001bdc0:	30 18       	mov	r8,1
8001bdc2:	f3 68 0a 14 	st.b	r9[2580],r8
8001bdc6:	c0 78       	rjmp	8001bdd4 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bdc8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bdcc:	70 09       	ld.w	r9,r8[0x0]
8001bdce:	30 28       	mov	r8,2
8001bdd0:	f3 68 0a 14 	st.b	r9[2580],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001bdd4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bdd8:	70 09       	ld.w	r9,r8[0x0]
8001bdda:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bdde:	11 c8       	ld.ub	r8,r8[0x4]
8001bde0:	f3 68 0a 08 	st.b	r9[2568],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001bde4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bde8:	70 09       	ld.w	r9,r8[0x0]
8001bdea:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bdee:	90 38       	ld.sh	r8,r8[0x6]
8001bdf0:	f3 58 0a 0a 	st.h	r9[2570],r8
		}
		break;
8001bdf4:	e0 8f 01 72 	bral	8001c0d8 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001bdf8:	f0 16 01 59 	mcall	r6[1380]
8001bdfc:	18 98       	mov	r8,r12
8001bdfe:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001be02:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be06:	58 08       	cp.w	r8,0
8001be08:	e0 80 01 67 	breq	8001c0d6 <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001be0c:	ec f8 01 bc 	ld.w	r8,r6[444]
8001be10:	11 88       	ld.ub	r8,r8[0x0]
8001be12:	2f f8       	sub	r8,-1
8001be14:	5c 58       	castu.b	r8
8001be16:	ec f9 01 bc 	ld.w	r9,r6[444]
8001be1a:	b2 88       	st.b	r9[0x0],r8
8001be1c:	ec f8 01 bc 	ld.w	r8,r6[444]
8001be20:	11 88       	ld.ub	r8,r8[0x0]
8001be22:	ec f9 01 80 	ld.w	r9,r6[384]
8001be26:	13 89       	ld.ub	r9,r9[0x0]
8001be28:	f0 09 0d 08 	divu	r8,r8,r9
8001be2c:	12 98       	mov	r8,r9
8001be2e:	5c 58       	castu.b	r8
8001be30:	ec f9 01 bc 	ld.w	r9,r6[444]
8001be34:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001be36:	ec f8 01 70 	ld.w	r8,r6[368]
8001be3a:	11 88       	ld.ub	r8,r8[0x0]
8001be3c:	58 08       	cp.w	r8,0
8001be3e:	c6 60       	breq	8001bf0a <ubx_process_data+0x8ec>
8001be40:	ec f8 01 bc 	ld.w	r8,r6[444]
8001be44:	11 88       	ld.ub	r8,r8[0x0]
8001be46:	58 08       	cp.w	r8,0
8001be48:	c6 11       	brne	8001bf0a <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001be4a:	fe cc 08 fa 	sub	r12,pc,2298
8001be4e:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001be52:	fe cc 09 6e 	sub	r12,pc,2414
8001be56:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001be5a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be5e:	70 88       	ld.w	r8,r8[0x20]
8001be60:	30 ab       	mov	r11,10
8001be62:	10 9c       	mov	r12,r8
8001be64:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001be68:	fe cc 09 08 	sub	r12,pc,2312
8001be6c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001be70:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be74:	70 78       	ld.w	r8,r8[0x1c]
8001be76:	30 ab       	mov	r11,10
8001be78:	10 9c       	mov	r12,r8
8001be7a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001be7e:	fe cc 09 0e 	sub	r12,pc,2318
8001be82:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001be86:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be8a:	70 68       	ld.w	r8,r8[0x18]
8001be8c:	30 ab       	mov	r11,10
8001be8e:	10 9c       	mov	r12,r8
8001be90:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001be94:	fe cc 09 18 	sub	r12,pc,2328
8001be98:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001be9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bea0:	70 58       	ld.w	r8,r8[0x14]
8001bea2:	30 ab       	mov	r11,10
8001bea4:	10 9c       	mov	r12,r8
8001bea6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001beaa:	fe cc 09 22 	sub	r12,pc,2338
8001beae:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001beb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001beb6:	70 48       	ld.w	r8,r8[0x10]
8001beb8:	30 ab       	mov	r11,10
8001beba:	10 9c       	mov	r12,r8
8001bebc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001bec0:	fe cc 09 2c 	sub	r12,pc,2348
8001bec4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001bec8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001becc:	70 28       	ld.w	r8,r8[0x8]
8001bece:	30 ab       	mov	r11,10
8001bed0:	10 9c       	mov	r12,r8
8001bed2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001bed6:	fe cc 09 32 	sub	r12,pc,2354
8001beda:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001bede:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bee2:	70 18       	ld.w	r8,r8[0x4]
8001bee4:	30 ab       	mov	r11,10
8001bee6:	10 9c       	mov	r12,r8
8001bee8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001beec:	fe cc 09 34 	sub	r12,pc,2356
8001bef0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001bef4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bef8:	70 08       	ld.w	r8,r8[0x0]
8001befa:	30 ab       	mov	r11,10
8001befc:	10 9c       	mov	r12,r8
8001befe:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bf02:	fe cc 1b 16 	sub	r12,pc,6934
8001bf06:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001bf0a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf0e:	70 08       	ld.w	r8,r8[0x0]
8001bf10:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001bf14:	72 89       	ld.w	r9,r9[0x20]
8001bf16:	f1 49 0a 10 	st.w	r8[2576],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001bf1a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf1e:	70 05       	ld.w	r5,r8[0x0]
8001bf20:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bf24:	70 48       	ld.w	r8,r8[0x10]
8001bf26:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bf2a:	fc 1b 42 c8 	movh	r11,0x42c8
8001bf2e:	10 9c       	mov	r12,r8
8001bf30:	f0 16 00 08 	mcall	r6[32]
8001bf34:	18 98       	mov	r8,r12
8001bf36:	eb 48 09 e0 	st.w	r5[2528],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001bf3a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf3e:	70 05       	ld.w	r5,r8[0x0]
8001bf40:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bf44:	70 38       	ld.w	r8,r8[0xc]
8001bf46:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bf4a:	fc 1b 42 c8 	movh	r11,0x42c8
8001bf4e:	10 9c       	mov	r12,r8
8001bf50:	f0 16 00 08 	mcall	r6[32]
8001bf54:	18 98       	mov	r8,r12
8001bf56:	eb 48 09 e4 	st.w	r5[2532],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001bf5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf5e:	70 05       	ld.w	r5,r8[0x0]
8001bf60:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bf64:	70 28       	ld.w	r8,r8[0x8]
8001bf66:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bf6a:	e0 6b 50 00 	mov	r11,20480
8001bf6e:	ea 1b 47 c3 	orh	r11,0x47c3
8001bf72:	10 9c       	mov	r12,r8
8001bf74:	f0 16 00 08 	mcall	r6[32]
8001bf78:	18 98       	mov	r8,r12
8001bf7a:	eb 48 09 f4 	st.w	r5[2548],r8
			have_raw_velocity = true;
8001bf7e:	ec f9 03 a0 	ld.w	r9,r6[928]
8001bf82:	30 18       	mov	r8,1
8001bf84:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001bf86:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf8a:	70 05       	ld.w	r5,r8[0x0]
8001bf8c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bf90:	70 78       	ld.w	r8,r8[0x1c]
8001bf92:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bf96:	fc 1b 42 c8 	movh	r11,0x42c8
8001bf9a:	10 9c       	mov	r12,r8
8001bf9c:	f0 16 00 08 	mcall	r6[32]
8001bfa0:	18 98       	mov	r8,r12
8001bfa2:	eb 48 09 e8 	st.w	r5[2536],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001bfa6:	ec f8 00 00 	ld.w	r8,r6[0]
8001bfaa:	70 05       	ld.w	r5,r8[0x0]
8001bfac:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bfb0:	70 68       	ld.w	r8,r8[0x18]
8001bfb2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bfb6:	fc 1b 42 c8 	movh	r11,0x42c8
8001bfba:	10 9c       	mov	r12,r8
8001bfbc:	f0 16 00 08 	mcall	r6[32]
8001bfc0:	18 98       	mov	r8,r12
8001bfc2:	eb 48 09 ec 	st.w	r5[2540],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001bfc6:	ec f8 00 00 	ld.w	r8,r6[0]
8001bfca:	70 05       	ld.w	r5,r8[0x0]
8001bfcc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bfd0:	70 58       	ld.w	r8,r8[0x14]
8001bfd2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bfd6:	fc 1b 42 c8 	movh	r11,0x42c8
8001bfda:	10 9c       	mov	r12,r8
8001bfdc:	f0 16 00 08 	mcall	r6[32]
8001bfe0:	18 98       	mov	r8,r12
8001bfe2:	eb 48 09 f0 	st.w	r5[2544],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001bfe6:	ec f8 00 00 	ld.w	r8,r6[0]
8001bfea:	70 05       	ld.w	r5,r8[0x0]
8001bfec:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bff0:	70 18       	ld.w	r8,r8[0x4]
8001bff2:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bff6:	fc 1b 42 c8 	movh	r11,0x42c8
8001bffa:	10 9c       	mov	r12,r8
8001bffc:	f0 16 00 08 	mcall	r6[32]
8001c000:	18 98       	mov	r8,r12
8001c002:	eb 48 0a 00 	st.w	r5[2560],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001c006:	ec f8 00 00 	ld.w	r8,r6[0]
8001c00a:	70 08       	ld.w	r8,r8[0x0]
8001c00c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001c010:	72 09       	ld.w	r9,r9[0x0]
8001c012:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001c016:	f1 49 0a 04 	st.w	r8[2564],r9
			new_speed = true;
8001c01a:	ec f9 01 fc 	ld.w	r9,r6[508]
8001c01e:	30 18       	mov	r8,1
8001c020:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001c022:	c5 b8       	rjmp	8001c0d8 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001c024:	f0 16 01 c5 	mcall	r6[1812]
8001c028:	18 98       	mov	r8,r12
8001c02a:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001c02e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001c032:	58 08       	cp.w	r8,0
8001c034:	c1 60       	breq	8001c060 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001c036:	ec f8 01 70 	ld.w	r8,r6[368]
8001c03a:	11 88       	ld.ub	r8,r8[0x0]
8001c03c:	58 08       	cp.w	r8,0
8001c03e:	c1 10       	breq	8001c060 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001c040:	fe cc 0a 74 	sub	r12,pc,2676
8001c044:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001c048:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001c04c:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001c050:	30 ab       	mov	r11,10
8001c052:	10 9c       	mov	r12,r8
8001c054:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c058:	fe cc 1c 6c 	sub	r12,pc,7276
8001c05c:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001c060:	fe cc 0a 78 	sub	r12,pc,2680
8001c064:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001c068:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c06c:	11 88       	ld.ub	r8,r8[0x0]
8001c06e:	30 ab       	mov	r11,10
8001c070:	10 9c       	mov	r12,r8
8001c072:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001c076:	fe cc 1c 8a 	sub	r12,pc,7306
8001c07a:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001c07e:	ec f8 01 84 	ld.w	r8,r6[388]
8001c082:	11 88       	ld.ub	r8,r8[0x0]
8001c084:	2f f8       	sub	r8,-1
8001c086:	5c 58       	castu.b	r8
8001c088:	ec f9 01 84 	ld.w	r9,r6[388]
8001c08c:	b2 88       	st.b	r9[0x0],r8
8001c08e:	ec f8 01 84 	ld.w	r8,r6[388]
8001c092:	11 88       	ld.ub	r8,r8[0x0]
8001c094:	58 08       	cp.w	r8,0
8001c096:	c1 81       	brne	8001c0c6 <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001c098:	fe cc 0a 94 	sub	r12,pc,2708
8001c09c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001c0a0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c0a4:	11 88       	ld.ub	r8,r8[0x0]
8001c0a6:	31 0b       	mov	r11,16
8001c0a8:	10 9c       	mov	r12,r8
8001c0aa:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001c0ae:	fe cc 1c c2 	sub	r12,pc,7362
8001c0b2:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001c0b6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c0ba:	11 88       	ld.ub	r8,r8[0x0]
8001c0bc:	30 0a       	mov	r10,0
8001c0be:	10 9b       	mov	r11,r8
8001c0c0:	30 1c       	mov	r12,1
8001c0c2:	f0 16 00 58 	mcall	r6[352]
		}
		return false;
8001c0c6:	30 08       	mov	r8,0
8001c0c8:	c1 d8       	rjmp	8001c102 <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001c0ca:	d7 03       	nop
8001c0cc:	c0 68       	rjmp	8001c0d8 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001c0ce:	d7 03       	nop
8001c0d0:	c0 48       	rjmp	8001c0d8 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001c0d2:	d7 03       	nop
8001c0d4:	c0 28       	rjmp	8001c0d8 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001c0d6:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001c0d8:	ec f8 02 38 	ld.w	r8,r6[568]
8001c0dc:	11 88       	ld.ub	r8,r8[0x0]
8001c0de:	58 08       	cp.w	r8,0
8001c0e0:	c1 00       	breq	8001c100 <ubx_process_data+0xae2>
8001c0e2:	ec f8 01 fc 	ld.w	r8,r6[508]
8001c0e6:	11 88       	ld.ub	r8,r8[0x0]
8001c0e8:	58 08       	cp.w	r8,0
8001c0ea:	c0 b0       	breq	8001c100 <ubx_process_data+0xae2>
		new_speed = false;
8001c0ec:	ec f9 01 fc 	ld.w	r9,r6[508]
8001c0f0:	30 08       	mov	r8,0
8001c0f2:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001c0f4:	ec f9 02 38 	ld.w	r9,r6[568]
8001c0f8:	30 08       	mov	r8,0
8001c0fa:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001c0fc:	30 18       	mov	r8,1
8001c0fe:	c0 28       	rjmp	8001c102 <ubx_process_data+0xae4>
	}
	return false;
8001c100:	30 08       	mov	r8,0
}
8001c102:	10 9c       	mov	r12,r8
8001c104:	2f 6d       	sub	sp,-40
8001c106:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c10a:	00 00       	add	r0,r0
8001c10c:	80 01       	ld.sh	r1,r0[0x0]
8001c10e:	b4 ae       	st.b	r10[0x2],lr

8001c110 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001c110:	eb cd 40 80 	pushm	r7,lr
8001c114:	1a 97       	mov	r7,sp
8001c116:	20 4d       	sub	sp,16
8001c118:	ef 4c ff fc 	st.w	r7[-4],r12
8001c11c:	16 98       	mov	r8,r11
8001c11e:	ef 4a ff f4 	st.w	r7[-12],r10
8001c122:	ef 49 ff f0 	st.w	r7[-16],r9
8001c126:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001c12a:	c1 e8       	rjmp	8001c166 <update_checksum+0x56>
		*ck_a += *data;
8001c12c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c130:	11 89       	ld.ub	r9,r8[0x0]
8001c132:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c136:	11 88       	ld.ub	r8,r8[0x0]
8001c138:	f2 08 00 08 	add	r8,r9,r8
8001c13c:	5c 58       	castu.b	r8
8001c13e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c142:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001c144:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c148:	11 89       	ld.ub	r9,r8[0x0]
8001c14a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c14e:	11 88       	ld.ub	r8,r8[0x0]
8001c150:	f2 08 00 08 	add	r8,r9,r8
8001c154:	5c 58       	castu.b	r8
8001c156:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001c15a:	b2 88       	st.b	r9[0x0],r8
		data++;
8001c15c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c160:	2f f8       	sub	r8,-1
8001c162:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001c166:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c16a:	30 08       	mov	r8,0
8001c16c:	f0 09 18 00 	cp.b	r9,r8
8001c170:	5f 18       	srne	r8
8001c172:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c176:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c17a:	20 18       	sub	r8,1
8001c17c:	ef 68 ff f8 	st.b	r7[-8],r8
8001c180:	58 09       	cp.w	r9,0
8001c182:	cd 51       	brne	8001c12c <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001c184:	2f cd       	sub	sp,-16
8001c186:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c18a <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001c18a:	eb cd 40 80 	pushm	r7,lr
8001c18e:	1a 97       	mov	r7,sp
8001c190:	20 1d       	sub	sp,4
8001c192:	18 98       	mov	r8,r12
8001c194:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001c198:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001c19c:	5c 58       	castu.b	r8
}
8001c19e:	10 9c       	mov	r12,r8
8001c1a0:	2f fd       	sub	sp,-4
8001c1a2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c1a6 <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001c1a6:	eb cd 40 80 	pushm	r7,lr
8001c1aa:	1a 97       	mov	r7,sp
8001c1ac:	20 1d       	sub	sp,4
8001c1ae:	18 98       	mov	r8,r12
8001c1b0:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001c1b4:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001c1b8:	a9 88       	lsr	r8,0x8
8001c1ba:	5c 88       	casts.h	r8
8001c1bc:	5c 58       	castu.b	r8
}
8001c1be:	10 9c       	mov	r12,r8
8001c1c0:	2f fd       	sub	sp,-4
8001c1c2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c1c6 <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001c1c6:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1ca:	1a 97       	mov	r7,sp
8001c1cc:	20 5d       	sub	sp,20
8001c1ce:	4b 76       	lddpc	r6,8001c2a8 <ubx_send_header+0xe2>
8001c1d0:	1e 26       	rsub	r6,pc
8001c1d2:	16 99       	mov	r9,r11
8001c1d4:	14 98       	mov	r8,r10
8001c1d6:	18 9a       	mov	r10,r12
8001c1d8:	ef 6a ff f4 	st.b	r7[-12],r10
8001c1dc:	ef 69 ff f0 	st.b	r7[-16],r9
8001c1e0:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001c1e4:	3b 58       	mov	r8,-75
8001c1e6:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001c1ea:	36 28       	mov	r8,98
8001c1ec:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001c1f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c1f4:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c1f8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c1fc:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001c200:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c204:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001c208:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c20c:	10 99       	mov	r9,r8
8001c20e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c212:	70 08       	ld.w	r8,r8[0x0]
8001c214:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c218:	31 0a       	mov	r10,16
8001c21a:	12 9b       	mov	r11,r9
8001c21c:	10 9c       	mov	r12,r8
8001c21e:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001c222:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c226:	10 99       	mov	r9,r8
8001c228:	ec f8 00 00 	ld.w	r8,r6[0]
8001c22c:	70 08       	ld.w	r8,r8[0x0]
8001c22e:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c232:	31 0a       	mov	r10,16
8001c234:	12 9b       	mov	r11,r9
8001c236:	10 9c       	mov	r12,r8
8001c238:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001c23c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c240:	10 99       	mov	r9,r8
8001c242:	ec f8 00 00 	ld.w	r8,r6[0]
8001c246:	70 08       	ld.w	r8,r8[0x0]
8001c248:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c24c:	30 aa       	mov	r10,10
8001c24e:	12 9b       	mov	r11,r9
8001c250:	10 9c       	mov	r12,r8
8001c252:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001c256:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c25a:	10 99       	mov	r9,r8
8001c25c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c260:	70 08       	ld.w	r8,r8[0x0]
8001c262:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c266:	31 0a       	mov	r10,16
8001c268:	12 9b       	mov	r11,r9
8001c26a:	10 9c       	mov	r12,r8
8001c26c:	f0 16 00 26 	mcall	r6[152]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001c270:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001c274:	5c 58       	castu.b	r8
8001c276:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001c27a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c27e:	70 08       	ld.w	r8,r8[0x0]
8001c280:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c284:	31 0a       	mov	r10,16
8001c286:	12 9b       	mov	r11,r9
8001c288:	10 9c       	mov	r12,r8
8001c28a:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001c28e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c292:	70 08       	ld.w	r8,r8[0x0]
8001c294:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c298:	31 0a       	mov	r10,16
8001c29a:	30 0b       	mov	r11,0
8001c29c:	10 9c       	mov	r12,r8
8001c29e:	f0 16 00 26 	mcall	r6[152]
	
}
8001c2a2:	2f bd       	sub	sp,-20
8001c2a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2a8:	80 01       	ld.sh	r1,r0[0x0]
8001c2aa:	c0 54       	brge	8001c2b4 <ubx_send_cksum+0x8>

8001c2ac <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001c2ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001c2b0:	1a 97       	mov	r7,sp
8001c2b2:	20 2d       	sub	sp,8
8001c2b4:	49 26       	lddpc	r6,8001c2fc <ubx_send_cksum+0x50>
8001c2b6:	1e 26       	rsub	r6,pc
8001c2b8:	18 99       	mov	r9,r12
8001c2ba:	16 98       	mov	r8,r11
8001c2bc:	ef 69 ff fc 	st.b	r7[-4],r9
8001c2c0:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001c2c4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001c2c8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2cc:	70 08       	ld.w	r8,r8[0x0]
8001c2ce:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c2d2:	31 0a       	mov	r10,16
8001c2d4:	12 9b       	mov	r11,r9
8001c2d6:	10 9c       	mov	r12,r8
8001c2d8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001c2dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c2e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2e4:	70 08       	ld.w	r8,r8[0x0]
8001c2e6:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c2ea:	31 0a       	mov	r10,16
8001c2ec:	12 9b       	mov	r11,r9
8001c2ee:	10 9c       	mov	r12,r8
8001c2f0:	f0 16 00 26 	mcall	r6[152]
}
8001c2f4:	2f ed       	sub	sp,-8
8001c2f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2fa:	00 00       	add	r0,r0
8001c2fc:	80 01       	ld.sh	r1,r0[0x0]
8001c2fe:	c1 3a       	rjmp	8001bf24 <ubx_process_data+0x906>

8001c300 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001c300:	eb cd 40 c0 	pushm	r6-r7,lr
8001c304:	1a 97       	mov	r7,sp
8001c306:	20 6d       	sub	sp,24
8001c308:	4b 56       	lddpc	r6,8001c3dc <ubx_send_message+0xdc>
8001c30a:	1e 26       	rsub	r6,pc
8001c30c:	ef 4a ff ec 	st.w	r7[-20],r10
8001c310:	12 98       	mov	r8,r9
8001c312:	18 99       	mov	r9,r12
8001c314:	ef 69 ff f4 	st.b	r7[-12],r9
8001c318:	16 99       	mov	r9,r11
8001c31a:	ef 69 ff f0 	st.b	r7[-16],r9
8001c31e:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001c322:	30 08       	mov	r8,0
8001c324:	ef 68 ff f9 	st.b	r7[-7],r8
8001c328:	30 08       	mov	r8,0
8001c32a:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001c32e:	3b 58       	mov	r8,-75
8001c330:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001c334:	36 28       	mov	r8,98
8001c336:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001c33a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c33e:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c342:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c346:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001c34a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001c34e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001c352:	ee c9 00 08 	sub	r9,r7,8
8001c356:	ee ca 00 07 	sub	r10,r7,7
8001c35a:	ee c8 00 06 	sub	r8,r7,6
8001c35e:	2f d8       	sub	r8,-3
8001c360:	30 4b       	mov	r11,4
8001c362:	10 9c       	mov	r12,r8
8001c364:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001c368:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001c36c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c370:	ee c9 00 08 	sub	r9,r7,8
8001c374:	ee ca 00 07 	sub	r10,r7,7
8001c378:	10 9c       	mov	r12,r8
8001c37a:	f0 16 00 33 	mcall	r6[204]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001c37e:	ee c9 00 06 	sub	r9,r7,6
8001c382:	ec f8 00 00 	ld.w	r8,r6[0]
8001c386:	70 08       	ld.w	r8,r8[0x0]
8001c388:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c38c:	12 9b       	mov	r11,r9
8001c38e:	10 9c       	mov	r12,r8
8001c390:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001c394:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001c398:	ec f8 00 00 	ld.w	r8,r6[0]
8001c39c:	70 08       	ld.w	r8,r8[0x0]
8001c39e:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c3a2:	12 9b       	mov	r11,r9
8001c3a4:	10 9c       	mov	r12,r8
8001c3a6:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001c3aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3ae:	70 08       	ld.w	r8,r8[0x0]
8001c3b0:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c3b4:	ee c9 00 07 	sub	r9,r7,7
8001c3b8:	12 9b       	mov	r11,r9
8001c3ba:	10 9c       	mov	r12,r8
8001c3bc:	f0 16 00 32 	mcall	r6[200]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001c3c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3c4:	70 08       	ld.w	r8,r8[0x0]
8001c3c6:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c3ca:	ee c9 00 08 	sub	r9,r7,8
8001c3ce:	12 9b       	mov	r11,r9
8001c3d0:	10 9c       	mov	r12,r8
8001c3d2:	f0 16 00 32 	mcall	r6[200]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c3d6:	2f ad       	sub	sp,-24
8001c3d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c3dc:	80 01       	ld.sh	r1,r0[0x0]
8001c3de:	c1 8e       	rcall	8001c00e <ubx_process_data+0x9f0>

8001c3e0 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001c3e0:	eb cd 40 e0 	pushm	r5-r7,lr
8001c3e4:	1a 97       	mov	r7,sp
8001c3e6:	20 4d       	sub	sp,16
8001c3e8:	4d d6       	lddpc	r6,8001c55c <ubx_send_message_CFG_nav_rate+0x17c>
8001c3ea:	1e 26       	rsub	r6,pc
8001c3ec:	ee c5 ff f0 	sub	r5,r7,-16
8001c3f0:	16 99       	mov	r9,r11
8001c3f2:	14 98       	mov	r8,r10
8001c3f4:	18 9a       	mov	r10,r12
8001c3f6:	ef 6a ff f8 	st.b	r7[-8],r10
8001c3fa:	ef 69 ff f4 	st.b	r7[-12],r9
8001c3fe:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001c402:	30 08       	mov	r8,0
8001c404:	ef 68 ff ff 	st.b	r7[-1],r8
8001c408:	30 08       	mov	r8,0
8001c40a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c40e:	ee c9 00 02 	sub	r9,r7,2
8001c412:	ee ca 00 01 	sub	r10,r7,1
8001c416:	ee c8 00 08 	sub	r8,r7,8
8001c41a:	30 1b       	mov	r11,1
8001c41c:	10 9c       	mov	r12,r8
8001c41e:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c422:	ee c9 00 02 	sub	r9,r7,2
8001c426:	ee ca 00 01 	sub	r10,r7,1
8001c42a:	ee c8 00 0c 	sub	r8,r7,12
8001c42e:	30 1b       	mov	r11,1
8001c430:	10 9c       	mov	r12,r8
8001c432:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c436:	ee c9 00 02 	sub	r9,r7,2
8001c43a:	ee ca 00 01 	sub	r10,r7,1
8001c43e:	ee c8 00 10 	sub	r8,r7,16
8001c442:	30 1b       	mov	r11,1
8001c444:	10 9c       	mov	r12,r8
8001c446:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c44a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c44e:	10 9b       	mov	r11,r8
8001c450:	0a 98       	mov	r8,r5
8001c452:	ee c9 00 02 	sub	r9,r7,2
8001c456:	ee ca 00 01 	sub	r10,r7,1
8001c45a:	10 9c       	mov	r12,r8
8001c45c:	f0 16 00 33 	mcall	r6[204]
	
	ubx_send_header(msg_class,_msg_id,size);
8001c460:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c464:	10 9a       	mov	r10,r8
8001c466:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c46a:	10 99       	mov	r9,r8
8001c46c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c470:	12 9b       	mov	r11,r9
8001c472:	10 9c       	mov	r12,r8
8001c474:	f0 16 00 b9 	mcall	r6[740]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001c478:	8a 08       	ld.sh	r8,r5[0x0]
8001c47a:	5c 78       	castu.h	r8
8001c47c:	10 9c       	mov	r12,r8
8001c47e:	f0 16 00 a5 	mcall	r6[660]
8001c482:	18 98       	mov	r8,r12
8001c484:	10 99       	mov	r9,r8
8001c486:	ec f8 00 00 	ld.w	r8,r6[0]
8001c48a:	70 08       	ld.w	r8,r8[0x0]
8001c48c:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c490:	31 0a       	mov	r10,16
8001c492:	12 9b       	mov	r11,r9
8001c494:	10 9c       	mov	r12,r8
8001c496:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001c49a:	8a 08       	ld.sh	r8,r5[0x0]
8001c49c:	5c 78       	castu.h	r8
8001c49e:	10 9c       	mov	r12,r8
8001c4a0:	f0 16 00 ac 	mcall	r6[688]
8001c4a4:	18 98       	mov	r8,r12
8001c4a6:	10 99       	mov	r9,r8
8001c4a8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c4ac:	70 08       	ld.w	r8,r8[0x0]
8001c4ae:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c4b2:	31 0a       	mov	r10,16
8001c4b4:	12 9b       	mov	r11,r9
8001c4b6:	10 9c       	mov	r12,r8
8001c4b8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001c4bc:	8a 18       	ld.sh	r8,r5[0x2]
8001c4be:	5c 78       	castu.h	r8
8001c4c0:	10 9c       	mov	r12,r8
8001c4c2:	f0 16 00 a5 	mcall	r6[660]
8001c4c6:	18 98       	mov	r8,r12
8001c4c8:	10 99       	mov	r9,r8
8001c4ca:	ec f8 00 00 	ld.w	r8,r6[0]
8001c4ce:	70 08       	ld.w	r8,r8[0x0]
8001c4d0:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c4d4:	31 0a       	mov	r10,16
8001c4d6:	12 9b       	mov	r11,r9
8001c4d8:	10 9c       	mov	r12,r8
8001c4da:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001c4de:	8a 18       	ld.sh	r8,r5[0x2]
8001c4e0:	5c 78       	castu.h	r8
8001c4e2:	10 9c       	mov	r12,r8
8001c4e4:	f0 16 00 ac 	mcall	r6[688]
8001c4e8:	18 98       	mov	r8,r12
8001c4ea:	10 99       	mov	r9,r8
8001c4ec:	ec f8 00 00 	ld.w	r8,r6[0]
8001c4f0:	70 08       	ld.w	r8,r8[0x0]
8001c4f2:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c4f6:	31 0a       	mov	r10,16
8001c4f8:	12 9b       	mov	r11,r9
8001c4fa:	10 9c       	mov	r12,r8
8001c4fc:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001c500:	8a 28       	ld.sh	r8,r5[0x4]
8001c502:	5c 78       	castu.h	r8
8001c504:	10 9c       	mov	r12,r8
8001c506:	f0 16 00 a5 	mcall	r6[660]
8001c50a:	18 98       	mov	r8,r12
8001c50c:	10 99       	mov	r9,r8
8001c50e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c512:	70 08       	ld.w	r8,r8[0x0]
8001c514:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c518:	31 0a       	mov	r10,16
8001c51a:	12 9b       	mov	r11,r9
8001c51c:	10 9c       	mov	r12,r8
8001c51e:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001c522:	8a 28       	ld.sh	r8,r5[0x4]
8001c524:	5c 78       	castu.h	r8
8001c526:	10 9c       	mov	r12,r8
8001c528:	f0 16 00 ac 	mcall	r6[688]
8001c52c:	18 98       	mov	r8,r12
8001c52e:	10 99       	mov	r9,r8
8001c530:	ec f8 00 00 	ld.w	r8,r6[0]
8001c534:	70 08       	ld.w	r8,r8[0x0]
8001c536:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c53a:	31 0a       	mov	r10,16
8001c53c:	12 9b       	mov	r11,r9
8001c53e:	10 9c       	mov	r12,r8
8001c540:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001c544:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c548:	10 99       	mov	r9,r8
8001c54a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c54e:	12 9b       	mov	r11,r9
8001c550:	10 9c       	mov	r12,r8
8001c552:	f0 16 00 b7 	mcall	r6[732]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c556:	2f cd       	sub	sp,-16
8001c558:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c55c:	80 01       	ld.sh	r1,r0[0x0]
8001c55e:	c2 6e       	rcall	8001c1aa <endian_higher_bytes_uint16+0x4>

8001c560 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001c560:	eb cd 40 c0 	pushm	r6-r7,lr
8001c564:	1a 97       	mov	r7,sp
8001c566:	20 5d       	sub	sp,20
8001c568:	4b 46       	lddpc	r6,8001c638 <ubx_send_message_nav_settings+0xd8>
8001c56a:	1e 26       	rsub	r6,pc
8001c56c:	ef 4a ff f0 	st.w	r7[-16],r10
8001c570:	12 98       	mov	r8,r9
8001c572:	18 99       	mov	r9,r12
8001c574:	ef 69 ff f8 	st.b	r7[-8],r9
8001c578:	16 99       	mov	r9,r11
8001c57a:	ef 69 ff f4 	st.b	r7[-12],r9
8001c57e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c582:	30 08       	mov	r8,0
8001c584:	ef 68 ff ff 	st.b	r7[-1],r8
8001c588:	30 08       	mov	r8,0
8001c58a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c58e:	ee c9 00 02 	sub	r9,r7,2
8001c592:	ee ca 00 01 	sub	r10,r7,1
8001c596:	ee c8 00 08 	sub	r8,r7,8
8001c59a:	30 1b       	mov	r11,1
8001c59c:	10 9c       	mov	r12,r8
8001c59e:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c5a2:	ee c9 00 02 	sub	r9,r7,2
8001c5a6:	ee ca 00 01 	sub	r10,r7,1
8001c5aa:	ee c8 00 0c 	sub	r8,r7,12
8001c5ae:	30 1b       	mov	r11,1
8001c5b0:	10 9c       	mov	r12,r8
8001c5b2:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c5b6:	ee c9 00 02 	sub	r9,r7,2
8001c5ba:	ee ca 00 01 	sub	r10,r7,1
8001c5be:	ee c8 00 14 	sub	r8,r7,20
8001c5c2:	30 1b       	mov	r11,1
8001c5c4:	10 9c       	mov	r12,r8
8001c5c6:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001c5ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c5ce:	10 9a       	mov	r10,r8
8001c5d0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c5d4:	10 99       	mov	r9,r8
8001c5d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c5da:	12 9b       	mov	r11,r9
8001c5dc:	10 9c       	mov	r12,r8
8001c5de:	f0 16 00 b9 	mcall	r6[740]
	
	if (engine_settings != NULL)
8001c5e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c5e6:	58 08       	cp.w	r8,0
8001c5e8:	c1 c0       	breq	8001c620 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001c5ea:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c5ee:	10 9b       	mov	r11,r8
8001c5f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c5f4:	ee c9 00 02 	sub	r9,r7,2
8001c5f8:	ee ca 00 01 	sub	r10,r7,1
8001c5fc:	10 9c       	mov	r12,r8
8001c5fe:	f0 16 00 33 	mcall	r6[204]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001c602:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c606:	70 08       	ld.w	r8,r8[0x0]
8001c608:	5c 58       	castu.b	r8
8001c60a:	10 99       	mov	r9,r8
8001c60c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c610:	70 08       	ld.w	r8,r8[0x0]
8001c612:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c616:	30 aa       	mov	r10,10
8001c618:	12 9b       	mov	r11,r9
8001c61a:	10 9c       	mov	r12,r8
8001c61c:	f0 16 00 26 	mcall	r6[152]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001c620:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c624:	10 99       	mov	r9,r8
8001c626:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c62a:	12 9b       	mov	r11,r9
8001c62c:	10 9c       	mov	r12,r8
8001c62e:	f0 16 00 b7 	mcall	r6[732]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c632:	2f bd       	sub	sp,-20
8001c634:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c638:	80 01       	ld.sh	r1,r0[0x0]
8001c63a:	c3 ee       	rcall	8001c2b6 <ubx_send_cksum+0xa>

8001c63c <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001c63c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c640:	1a 97       	mov	r7,sp
8001c642:	20 5d       	sub	sp,20
8001c644:	4c 16       	lddpc	r6,8001c748 <ubx_configure_message_rate+0x10c>
8001c646:	1e 26       	rsub	r6,pc
8001c648:	16 99       	mov	r9,r11
8001c64a:	14 98       	mov	r8,r10
8001c64c:	18 9a       	mov	r10,r12
8001c64e:	ef 6a ff f4 	st.b	r7[-12],r10
8001c652:	ef 69 ff f0 	st.b	r7[-16],r9
8001c656:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c65a:	30 08       	mov	r8,0
8001c65c:	ef 68 ff ff 	st.b	r7[-1],r8
8001c660:	30 08       	mov	r8,0
8001c662:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001c666:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c66a:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001c66e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c672:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001c676:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c67a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001c67e:	30 38       	mov	r8,3
8001c680:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c684:	ee c9 00 02 	sub	r9,r7,2
8001c688:	ee ca 00 01 	sub	r10,r7,1
8001c68c:	ee c8 00 0c 	sub	r8,r7,12
8001c690:	30 1b       	mov	r11,1
8001c692:	10 9c       	mov	r12,r8
8001c694:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c698:	ee c9 00 02 	sub	r9,r7,2
8001c69c:	ee ca 00 01 	sub	r10,r7,1
8001c6a0:	ee c8 00 10 	sub	r8,r7,16
8001c6a4:	30 1b       	mov	r11,1
8001c6a6:	10 9c       	mov	r12,r8
8001c6a8:	f0 16 00 33 	mcall	r6[204]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c6ac:	ee c9 00 02 	sub	r9,r7,2
8001c6b0:	ee ca 00 01 	sub	r10,r7,1
8001c6b4:	ee c8 00 06 	sub	r8,r7,6
8001c6b8:	30 1b       	mov	r11,1
8001c6ba:	10 9c       	mov	r12,r8
8001c6bc:	f0 16 00 33 	mcall	r6[204]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c6c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c6c4:	10 9b       	mov	r11,r8
8001c6c6:	ee c9 00 02 	sub	r9,r7,2
8001c6ca:	ee ca 00 01 	sub	r10,r7,1
8001c6ce:	ee c8 00 05 	sub	r8,r7,5
8001c6d2:	10 9c       	mov	r12,r8
8001c6d4:	f0 16 00 33 	mcall	r6[204]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001c6d8:	30 3a       	mov	r10,3
8001c6da:	30 1b       	mov	r11,1
8001c6dc:	30 6c       	mov	r12,6
8001c6de:	f0 16 00 b9 	mcall	r6[740]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001c6e2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c6e6:	10 99       	mov	r9,r8
8001c6e8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c6ec:	70 08       	ld.w	r8,r8[0x0]
8001c6ee:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c6f2:	31 0a       	mov	r10,16
8001c6f4:	12 9b       	mov	r11,r9
8001c6f6:	10 9c       	mov	r12,r8
8001c6f8:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001c6fc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c700:	10 99       	mov	r9,r8
8001c702:	ec f8 00 00 	ld.w	r8,r6[0]
8001c706:	70 08       	ld.w	r8,r8[0x0]
8001c708:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c70c:	31 0a       	mov	r10,16
8001c70e:	12 9b       	mov	r11,r9
8001c710:	10 9c       	mov	r12,r8
8001c712:	f0 16 00 26 	mcall	r6[152]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001c716:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c71a:	10 99       	mov	r9,r8
8001c71c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c720:	70 08       	ld.w	r8,r8[0x0]
8001c722:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c726:	31 0a       	mov	r10,16
8001c728:	12 9b       	mov	r11,r9
8001c72a:	10 9c       	mov	r12,r8
8001c72c:	f0 16 00 26 	mcall	r6[152]
	
	ubx_send_cksum(ck_a,ck_b);
8001c730:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c734:	10 99       	mov	r9,r8
8001c736:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c73a:	12 9b       	mov	r11,r9
8001c73c:	10 9c       	mov	r12,r8
8001c73e:	f0 16 00 b7 	mcall	r6[732]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001c742:	2f bd       	sub	sp,-20
8001c744:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c748:	80 01       	ld.sh	r1,r0[0x0]
8001c74a:	c4 ca       	rjmp	8001c3e2 <ubx_send_message_CFG_nav_rate+0x2>
8001c74c:	24 50       	sub	r0,69
8001c74e:	55 42       	stdsp	sp[0x150],r2
8001c750:	58 2c       	cp.w	r12,2
8001c752:	34 31       	mov	r1,67
8001c754:	2c 31       	sub	r1,-61
8001c756:	2c 30       	sub	r0,-61
8001c758:	30 30       	mov	r0,3
8001c75a:	33 2c       	mov	r12,50
8001c75c:	30 30       	mov	r0,3
8001c75e:	30 31       	mov	r1,3
8001c760:	2c 33       	sub	r3,-61
8001c762:	38 34       	mov	r4,-125
8001c764:	30 30       	mov	r0,3
8001c766:	2c 30       	sub	r0,-61
8001c768:	2a 32       	sub	r2,-93
8001c76a:	35 0d       	mov	sp,80
8001c76c:	0a 00       	add	r0,r5

8001c76e <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001c76e:	eb cd 40 c0 	pushm	r6-r7,lr
8001c772:	1a 97       	mov	r7,sp
8001c774:	20 3d       	sub	sp,12
8001c776:	4a 66       	lddpc	r6,8001c80c <configure_gps+0x9e>
8001c778:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001c77a:	fe c8 00 2e 	sub	r8,pc,46
8001c77e:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001c782:	ec f8 00 00 	ld.w	r8,r6[0]
8001c786:	70 08       	ld.w	r8,r8[0x0]
8001c788:	f0 c8 f6 50 	sub	r8,r8,-2480
8001c78c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001c790:	10 9c       	mov	r12,r8
8001c792:	f0 16 00 32 	mcall	r6[200]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001c796:	e0 68 00 c8 	mov	r8,200
8001c79a:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001c79e:	30 18       	mov	r8,1
8001c7a0:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001c7a4:	30 08       	mov	r8,0
8001c7a6:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001c7aa:	20 2d       	sub	sp,8
8001c7ac:	1a 98       	mov	r8,sp
8001c7ae:	ee c9 00 0a 	sub	r9,r7,10
8001c7b2:	30 6a       	mov	r10,6
8001c7b4:	12 9b       	mov	r11,r9
8001c7b6:	10 9c       	mov	r12,r8
8001c7b8:	f0 16 00 1e 	mcall	r6[120]
8001c7bc:	30 6a       	mov	r10,6
8001c7be:	30 8b       	mov	r11,8
8001c7c0:	30 6c       	mov	r12,6
8001c7c2:	f0 16 01 91 	mcall	r6[1604]
8001c7c6:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001c7c8:	30 1a       	mov	r10,1
8001c7ca:	30 2b       	mov	r11,2
8001c7cc:	30 1c       	mov	r12,1
8001c7ce:	f0 16 00 58 	mcall	r6[352]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001c7d2:	30 1a       	mov	r10,1
8001c7d4:	30 3b       	mov	r11,3
8001c7d6:	30 1c       	mov	r12,1
8001c7d8:	f0 16 00 58 	mcall	r6[352]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001c7dc:	30 1a       	mov	r10,1
8001c7de:	30 6b       	mov	r11,6
8001c7e0:	30 1c       	mov	r12,1
8001c7e2:	f0 16 00 58 	mcall	r6[352]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001c7e6:	30 1a       	mov	r10,1
8001c7e8:	31 2b       	mov	r11,18
8001c7ea:	30 1c       	mov	r12,1
8001c7ec:	f0 16 00 58 	mcall	r6[352]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001c7f0:	30 1a       	mov	r10,1
8001c7f2:	33 0b       	mov	r11,48
8001c7f4:	30 1c       	mov	r12,1
8001c7f6:	f0 16 00 58 	mcall	r6[352]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001c7fa:	30 09       	mov	r9,0
8001c7fc:	30 0a       	mov	r10,0
8001c7fe:	32 4b       	mov	r11,36
8001c800:	30 6c       	mov	r12,6
8001c802:	f0 16 00 f6 	mcall	r6[984]
}
8001c806:	2f dd       	sub	sp,-12
8001c808:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c80c:	80 01       	ld.sh	r1,r0[0x0]
8001c80e:	c5 fc       	rcall	8001c8cc <gps_update+0xbc>

8001c810 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001c810:	eb cd 40 c0 	pushm	r6-r7,lr
8001c814:	1a 97       	mov	r7,sp
8001c816:	20 2d       	sub	sp,8
8001c818:	fe f6 02 08 	ld.w	r6,pc[520]
8001c81c:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001c81e:	f0 16 01 98 	mcall	r6[1632]
8001c822:	18 98       	mov	r8,r12
8001c824:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001c828:	f0 16 00 0e 	mcall	r6[56]
8001c82c:	18 98       	mov	r8,r12
8001c82e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001c832:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c836:	ec 18 00 01 	eorl	r8,0x1
8001c83a:	5c 58       	castu.b	r8
8001c83c:	c1 f0       	breq	8001c87a <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001c83e:	ec f8 03 08 	ld.w	r8,r6[776]
8001c842:	70 08       	ld.w	r8,r8[0x0]
8001c844:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c848:	10 19       	sub	r9,r8
8001c84a:	ec f8 04 0c 	ld.w	r8,r6[1036]
8001c84e:	70 08       	ld.w	r8,r8[0x0]
8001c850:	10 39       	cp.w	r9,r8
8001c852:	e0 88 00 e3 	brls	8001ca18 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001c856:	ec f8 00 00 	ld.w	r8,r6[0]
8001c85a:	70 09       	ld.w	r9,r8[0x0]
8001c85c:	30 08       	mov	r8,0
8001c85e:	f3 68 0a 14 	st.b	r9[2580],r8
			
			init_gps_ubx(engine_nav_setting);
8001c862:	ec f8 01 c4 	ld.w	r8,r6[452]
8001c866:	70 08       	ld.w	r8,r8[0x0]
8001c868:	10 9c       	mov	r12,r8
8001c86a:	f0 16 01 61 	mcall	r6[1412]
			idleTimer = tnow;
8001c86e:	ec f8 03 08 	ld.w	r8,r6[776]
8001c872:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c876:	91 09       	st.w	r8[0x0],r9
8001c878:	cd 08       	rjmp	8001ca18 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001c87a:	ec f8 03 08 	ld.w	r8,r6[776]
8001c87e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c882:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001c884:	ec f8 00 00 	ld.w	r8,r6[0]
8001c888:	70 08       	ld.w	r8,r8[0x0]
8001c88a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c88e:	f1 49 0a 0c 	st.w	r8[2572],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001c892:	ec f8 00 00 	ld.w	r8,r6[0]
8001c896:	70 08       	ld.w	r8,r8[0x0]
8001c898:	f1 39 0a 14 	ld.ub	r9,r8[2580]
8001c89c:	30 28       	mov	r8,2
8001c89e:	f0 09 18 00 	cp.b	r9,r8
8001c8a2:	e0 81 00 9d 	brne	8001c9dc <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001c8a6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8aa:	70 08       	ld.w	r8,r8[0x0]
8001c8ac:	f0 fa 09 f8 	ld.w	r10,r8[2552]
8001c8b0:	30 18       	mov	r8,1
8001c8b2:	fc 19 41 a0 	movh	r9,0x41a0
8001c8b6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c8ba:	e0 8c 00 03 	brvs	8001c8c0 <gps_update+0xb0>
8001c8be:	c0 25       	brlt	8001c8c2 <gps_update+0xb2>
8001c8c0:	30 08       	mov	r8,0
8001c8c2:	5c 58       	castu.b	r8
8001c8c4:	c0 80       	breq	8001c8d4 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001c8c6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8ca:	70 09       	ld.w	r9,r8[0x0]
8001c8cc:	30 18       	mov	r8,1
8001c8ce:	f3 68 0a 15 	st.b	r9[2581],r8
8001c8d2:	c0 78       	rjmp	8001c8e0 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001c8d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8d8:	70 09       	ld.w	r9,r8[0x0]
8001c8da:	30 08       	mov	r8,0
8001c8dc:	f3 68 0a 15 	st.b	r9[2581],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001c8e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8e4:	70 08       	ld.w	r8,r8[0x0]
8001c8e6:	f0 fa 09 fc 	ld.w	r10,r8[2556]
8001c8ea:	30 18       	mov	r8,1
8001c8ec:	fc 19 41 a0 	movh	r9,0x41a0
8001c8f0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c8f4:	e0 8c 00 03 	brvs	8001c8fa <gps_update+0xea>
8001c8f8:	c0 25       	brlt	8001c8fc <gps_update+0xec>
8001c8fa:	30 08       	mov	r8,0
8001c8fc:	5c 58       	castu.b	r8
8001c8fe:	c0 80       	breq	8001c90e <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001c900:	ec f8 00 00 	ld.w	r8,r6[0]
8001c904:	70 09       	ld.w	r9,r8[0x0]
8001c906:	30 18       	mov	r8,1
8001c908:	f3 68 0a 16 	st.b	r9[2582],r8
8001c90c:	c0 78       	rjmp	8001c91a <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001c90e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c912:	70 09       	ld.w	r9,r8[0x0]
8001c914:	30 08       	mov	r8,0
8001c916:	f3 68 0a 16 	st.b	r9[2582],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001c91a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c91e:	70 08       	ld.w	r8,r8[0x0]
8001c920:	f0 fa 0a 00 	ld.w	r10,r8[2560]
8001c924:	30 18       	mov	r8,1
8001c926:	fc 19 40 a0 	movh	r9,0x40a0
8001c92a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c92e:	e0 8c 00 03 	brvs	8001c934 <gps_update+0x124>
8001c932:	c0 25       	brlt	8001c936 <gps_update+0x126>
8001c934:	30 08       	mov	r8,0
8001c936:	5c 58       	castu.b	r8
8001c938:	c0 80       	breq	8001c948 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001c93a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c93e:	70 09       	ld.w	r9,r8[0x0]
8001c940:	30 18       	mov	r8,1
8001c942:	f3 68 0a 17 	st.b	r9[2583],r8
8001c946:	c0 78       	rjmp	8001c954 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001c948:	ec f8 00 00 	ld.w	r8,r6[0]
8001c94c:	70 09       	ld.w	r9,r8[0x0]
8001c94e:	30 08       	mov	r8,0
8001c950:	f3 68 0a 17 	st.b	r9[2583],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001c954:	ec f8 00 00 	ld.w	r8,r6[0]
8001c958:	70 08       	ld.w	r8,r8[0x0]
8001c95a:	f0 fa 0a 04 	ld.w	r10,r8[2564]
8001c95e:	30 18       	mov	r8,1
8001c960:	e0 69 96 80 	mov	r9,38528
8001c964:	ea 19 4a 98 	orh	r9,0x4a98
8001c968:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c96c:	e0 8c 00 03 	brvs	8001c972 <gps_update+0x162>
8001c970:	c0 25       	brlt	8001c974 <gps_update+0x164>
8001c972:	30 08       	mov	r8,0
8001c974:	5c 58       	castu.b	r8
8001c976:	c0 80       	breq	8001c986 <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001c978:	ec f8 00 00 	ld.w	r8,r6[0]
8001c97c:	70 09       	ld.w	r9,r8[0x0]
8001c97e:	30 18       	mov	r8,1
8001c980:	f3 68 0a 18 	st.b	r9[2584],r8
8001c984:	c0 78       	rjmp	8001c992 <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001c986:	ec f8 00 00 	ld.w	r8,r6[0]
8001c98a:	70 09       	ld.w	r9,r8[0x0]
8001c98c:	30 08       	mov	r8,0
8001c98e:	f3 68 0a 18 	st.b	r9[2584],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001c992:	ec f8 00 00 	ld.w	r8,r6[0]
8001c996:	70 09       	ld.w	r9,r8[0x0]
8001c998:	ec f8 00 00 	ld.w	r8,r6[0]
8001c99c:	70 08       	ld.w	r8,r8[0x0]
8001c99e:	f1 3a 0a 15 	ld.ub	r10,r8[2581]
8001c9a2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9a6:	70 08       	ld.w	r8,r8[0x0]
8001c9a8:	f1 38 0a 16 	ld.ub	r8,r8[2582]
8001c9ac:	f5 e8 00 08 	and	r8,r10,r8
8001c9b0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c9b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9b8:	70 08       	ld.w	r8,r8[0x0]
8001c9ba:	f1 38 0a 17 	ld.ub	r8,r8[2583]
8001c9be:	f5 e8 00 08 	and	r8,r10,r8
8001c9c2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c9c6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9ca:	70 08       	ld.w	r8,r8[0x0]
8001c9cc:	f1 38 0a 18 	ld.ub	r8,r8[2584]
8001c9d0:	f5 e8 00 08 	and	r8,r10,r8
8001c9d4:	5c 58       	castu.b	r8
8001c9d6:	f3 68 0a 19 	st.b	r9[2585],r8
8001c9da:	c1 f8       	rjmp	8001ca18 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001c9dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9e0:	70 09       	ld.w	r9,r8[0x0]
8001c9e2:	30 08       	mov	r8,0
8001c9e4:	f3 68 0a 15 	st.b	r9[2581],r8
			centralData->GPS_data.altitudeStatus = 0;
8001c9e8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9ec:	70 09       	ld.w	r9,r8[0x0]
8001c9ee:	30 08       	mov	r8,0
8001c9f0:	f3 68 0a 16 	st.b	r9[2582],r8
			centralData->GPS_data.speedStatus = 0;
8001c9f4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c9f8:	70 09       	ld.w	r9,r8[0x0]
8001c9fa:	30 08       	mov	r8,0
8001c9fc:	f3 68 0a 17 	st.b	r9[2583],r8
			centralData->GPS_data.courseStatus = 0;
8001ca00:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca04:	70 09       	ld.w	r9,r8[0x0]
8001ca06:	30 08       	mov	r8,0
8001ca08:	f3 68 0a 18 	st.b	r9[2584],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001ca0c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca10:	70 09       	ld.w	r9,r8[0x0]
8001ca12:	30 08       	mov	r8,0
8001ca14:	f3 68 0a 19 	st.b	r9[2585],r8
		}
	}
}
8001ca18:	2f ed       	sub	sp,-8
8001ca1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca1e:	00 00       	add	r0,r0
8001ca20:	80 01       	ld.sh	r1,r0[0x0]
8001ca22:	c6 a0       	breq	8001caf6 <ubx_GetVelned+0x2>

8001ca24 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001ca24:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca28:	1a 97       	mov	r7,sp
8001ca2a:	20 1d       	sub	sp,4
8001ca2c:	49 36       	lddpc	r6,8001ca78 <newValidGpsMsg+0x54>
8001ca2e:	1e 26       	rsub	r6,pc
8001ca30:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001ca34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ca38:	70 09       	ld.w	r9,r8[0x0]
8001ca3a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca3e:	70 08       	ld.w	r8,r8[0x0]
8001ca40:	f0 f8 0a 0c 	ld.w	r8,r8[2572]
8001ca44:	10 39       	cp.w	r9,r8
8001ca46:	c1 40       	breq	8001ca6e <newValidGpsMsg+0x4a>
8001ca48:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca4c:	70 08       	ld.w	r8,r8[0x0]
8001ca4e:	f1 39 0a 14 	ld.ub	r9,r8[2580]
8001ca52:	30 28       	mov	r8,2
8001ca54:	f0 09 18 00 	cp.b	r9,r8
8001ca58:	c0 b1       	brne	8001ca6e <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001ca5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca5e:	70 08       	ld.w	r8,r8[0x0]
8001ca60:	f0 f9 0a 0c 	ld.w	r9,r8[2572]
8001ca64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ca68:	91 09       	st.w	r8[0x0],r9
		return true;
8001ca6a:	30 18       	mov	r8,1
8001ca6c:	c0 28       	rjmp	8001ca70 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001ca6e:	30 08       	mov	r8,0
	}
	
	
}
8001ca70:	10 9c       	mov	r12,r8
8001ca72:	2f fd       	sub	sp,-4
8001ca74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca78:	80 01       	ld.sh	r1,r0[0x0]
8001ca7a:	c8 b2       	brcc	8001c990 <gps_update+0x180>

8001ca7c <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001ca7c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca80:	1a 97       	mov	r7,sp
8001ca82:	48 86       	lddpc	r6,8001caa0 <ubx_GetPosllh+0x24>
8001ca84:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001ca86:	ec f8 04 64 	ld.w	r8,r6[1124]
8001ca8a:	90 08       	ld.sh	r8,r8[0x0]
8001ca8c:	58 08       	cp.w	r8,0
8001ca8e:	c0 50       	breq	8001ca98 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001ca90:	ec f8 03 5c 	ld.w	r8,r6[860]
8001ca94:	70 08       	ld.w	r8,r8[0x0]
8001ca96:	c0 28       	rjmp	8001ca9a <ubx_GetPosllh+0x1e>
	else
	return 0;
8001ca98:	30 08       	mov	r8,0
}
8001ca9a:	10 9c       	mov	r12,r8
8001ca9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001caa0:	80 01       	ld.sh	r1,r0[0x0]
8001caa2:	c9 08       	rjmp	8001cbc2 <ubx_GetTimTP+0x6>

8001caa4 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001caa4:	eb cd 40 c0 	pushm	r6-r7,lr
8001caa8:	1a 97       	mov	r7,sp
8001caaa:	48 86       	lddpc	r6,8001cac8 <ubx_GetStatus+0x24>
8001caac:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001caae:	ec f8 04 28 	ld.w	r8,r6[1064]
8001cab2:	90 08       	ld.sh	r8,r8[0x0]
8001cab4:	58 08       	cp.w	r8,0
8001cab6:	c0 50       	breq	8001cac0 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001cab8:	ec f8 03 60 	ld.w	r8,r6[864]
8001cabc:	70 08       	ld.w	r8,r8[0x0]
8001cabe:	c0 28       	rjmp	8001cac2 <ubx_GetStatus+0x1e>
	else
	return 0;
8001cac0:	30 08       	mov	r8,0
}
8001cac2:	10 9c       	mov	r12,r8
8001cac4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cac8:	80 01       	ld.sh	r1,r0[0x0]
8001caca:	c9 30       	breq	8001c9f0 <gps_update+0x1e0>

8001cacc <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001cacc:	eb cd 40 c0 	pushm	r6-r7,lr
8001cad0:	1a 97       	mov	r7,sp
8001cad2:	48 86       	lddpc	r6,8001caf0 <ubx_GetSolution+0x24>
8001cad4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001cad6:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001cada:	90 08       	ld.sh	r8,r8[0x0]
8001cadc:	58 08       	cp.w	r8,0
8001cade:	c0 50       	breq	8001cae8 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001cae0:	ec f8 03 cc 	ld.w	r8,r6[972]
8001cae4:	70 08       	ld.w	r8,r8[0x0]
8001cae6:	c0 28       	rjmp	8001caea <ubx_GetSolution+0x1e>
	else
	return 0;
8001cae8:	30 08       	mov	r8,0
}
8001caea:	10 9c       	mov	r12,r8
8001caec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001caf0:	80 01       	ld.sh	r1,r0[0x0]
8001caf2:	c9 58       	rjmp	8001cc1c <ToRad+0x10>

8001caf4 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001caf4:	eb cd 40 c0 	pushm	r6-r7,lr
8001caf8:	1a 97       	mov	r7,sp
8001cafa:	48 86       	lddpc	r6,8001cb18 <ubx_GetVelned+0x24>
8001cafc:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001cafe:	ec f8 04 88 	ld.w	r8,r6[1160]
8001cb02:	90 08       	ld.sh	r8,r8[0x0]
8001cb04:	58 08       	cp.w	r8,0
8001cb06:	c0 50       	breq	8001cb10 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001cb08:	ec f8 04 78 	ld.w	r8,r6[1144]
8001cb0c:	70 08       	ld.w	r8,r8[0x0]
8001cb0e:	c0 28       	rjmp	8001cb12 <ubx_GetVelned+0x1e>
	else
	return 0;
8001cb10:	30 08       	mov	r8,0
}
8001cb12:	10 9c       	mov	r12,r8
8001cb14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb18:	80 01       	ld.sh	r1,r0[0x0]
8001cb1a:	c9 80       	breq	8001ca4a <newValidGpsMsg+0x26>

8001cb1c <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001cb1c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb20:	1a 97       	mov	r7,sp
8001cb22:	48 86       	lddpc	r6,8001cb40 <ubx_GetSVInfo+0x24>
8001cb24:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001cb26:	ec f8 03 94 	ld.w	r8,r6[916]
8001cb2a:	90 08       	ld.sh	r8,r8[0x0]
8001cb2c:	58 08       	cp.w	r8,0
8001cb2e:	c0 50       	breq	8001cb38 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001cb30:	ec f8 04 58 	ld.w	r8,r6[1112]
8001cb34:	70 08       	ld.w	r8,r8[0x0]
8001cb36:	c0 28       	rjmp	8001cb3a <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001cb38:	30 08       	mov	r8,0
}
8001cb3a:	10 9c       	mov	r12,r8
8001cb3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb40:	80 01       	ld.sh	r1,r0[0x0]
8001cb42:	c9 a8       	rjmp	8001cc76 <interpolate+0xe>

8001cb44 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001cb44:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb48:	1a 97       	mov	r7,sp
8001cb4a:	48 86       	lddpc	r6,8001cb68 <ubx_GetNavSettings+0x24>
8001cb4c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001cb4e:	ec f8 04 3c 	ld.w	r8,r6[1084]
8001cb52:	90 08       	ld.sh	r8,r8[0x0]
8001cb54:	58 08       	cp.w	r8,0
8001cb56:	c0 50       	breq	8001cb60 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001cb58:	ec f8 04 70 	ld.w	r8,r6[1136]
8001cb5c:	70 08       	ld.w	r8,r8[0x0]
8001cb5e:	c0 28       	rjmp	8001cb62 <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001cb60:	30 08       	mov	r8,0
}
8001cb62:	10 9c       	mov	r12,r8
8001cb64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb68:	80 01       	ld.sh	r1,r0[0x0]
8001cb6a:	c9 d0       	breq	8001caa4 <ubx_GetStatus>

8001cb6c <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001cb6c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb70:	1a 97       	mov	r7,sp
8001cb72:	48 86       	lddpc	r6,8001cb90 <ubx_GetMsgRate+0x24>
8001cb74:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001cb76:	ec f8 04 a0 	ld.w	r8,r6[1184]
8001cb7a:	90 08       	ld.sh	r8,r8[0x0]
8001cb7c:	58 08       	cp.w	r8,0
8001cb7e:	c0 50       	breq	8001cb88 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001cb80:	ec f8 03 dc 	ld.w	r8,r6[988]
8001cb84:	70 08       	ld.w	r8,r8[0x0]
8001cb86:	c0 28       	rjmp	8001cb8a <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001cb88:	30 08       	mov	r8,0
}
8001cb8a:	10 9c       	mov	r12,r8
8001cb8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb90:	80 01       	ld.sh	r1,r0[0x0]
8001cb92:	c9 f8       	rjmp	8001ccd0 <interpolate+0x68>

8001cb94 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001cb94:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb98:	1a 97       	mov	r7,sp
8001cb9a:	48 86       	lddpc	r6,8001cbb8 <ubx_GetMonRXR+0x24>
8001cb9c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001cb9e:	ec f8 04 84 	ld.w	r8,r6[1156]
8001cba2:	90 08       	ld.sh	r8,r8[0x0]
8001cba4:	58 08       	cp.w	r8,0
8001cba6:	c0 50       	breq	8001cbb0 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001cba8:	ec f8 03 c4 	ld.w	r8,r6[964]
8001cbac:	70 08       	ld.w	r8,r8[0x0]
8001cbae:	c0 28       	rjmp	8001cbb2 <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001cbb0:	30 08       	mov	r8,0
}
8001cbb2:	10 9c       	mov	r12,r8
8001cbb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cbb8:	80 01       	ld.sh	r1,r0[0x0]
8001cbba:	ca 20       	breq	8001cafe <ubx_GetVelned+0xa>

8001cbbc <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001cbbc:	eb cd 40 c0 	pushm	r6-r7,lr
8001cbc0:	1a 97       	mov	r7,sp
8001cbc2:	48 86       	lddpc	r6,8001cbe0 <ubx_GetTimTP+0x24>
8001cbc4:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001cbc6:	ec f8 04 40 	ld.w	r8,r6[1088]
8001cbca:	90 08       	ld.sh	r8,r8[0x0]
8001cbcc:	58 08       	cp.w	r8,0
8001cbce:	c0 50       	breq	8001cbd8 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001cbd0:	ec f8 04 04 	ld.w	r8,r6[1028]
8001cbd4:	70 08       	ld.w	r8,r8[0x0]
8001cbd6:	c0 28       	rjmp	8001cbda <ubx_GetTimTP+0x1e>
	else
	return 0;
8001cbd8:	30 08       	mov	r8,0
}
8001cbda:	10 9c       	mov	r12,r8
8001cbdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cbe0:	80 01       	ld.sh	r1,r0[0x0]
8001cbe2:	ca 48       	rjmp	8001cd2a <init_imu+0x3e>

8001cbe4 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001cbe4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cbe8:	1a 97       	mov	r7,sp
8001cbea:	48 86       	lddpc	r6,8001cc08 <ubx_GetTimVRFY+0x24>
8001cbec:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001cbee:	ec f8 04 48 	ld.w	r8,r6[1096]
8001cbf2:	90 08       	ld.sh	r8,r8[0x0]
8001cbf4:	58 08       	cp.w	r8,0
8001cbf6:	c0 50       	breq	8001cc00 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001cbf8:	ec f8 04 1c 	ld.w	r8,r6[1052]
8001cbfc:	70 08       	ld.w	r8,r8[0x0]
8001cbfe:	c0 28       	rjmp	8001cc02 <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001cc00:	30 08       	mov	r8,0
}
8001cc02:	10 9c       	mov	r12,r8
8001cc04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc08:	80 01       	ld.sh	r1,r0[0x0]
8001cc0a:	ca 70       	breq	8001cb58 <ubx_GetNavSettings+0x14>

8001cc0c <ToRad>:

float ToRad(float numdeg)
{
8001cc0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc10:	1a 97       	mov	r7,sp
8001cc12:	20 1d       	sub	sp,4
8001cc14:	49 46       	lddpc	r6,8001cc64 <ToRad+0x58>
8001cc16:	1e 26       	rsub	r6,pc
8001cc18:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001cc1c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001cc20:	f0 16 00 03 	mcall	r6[12]
8001cc24:	e0 68 2d 18 	mov	r8,11544
8001cc28:	ea 18 54 44 	orh	r8,0x5444
8001cc2c:	e0 69 21 fb 	mov	r9,8699
8001cc30:	ea 19 40 09 	orh	r9,0x4009
8001cc34:	f0 16 00 02 	mcall	r6[8]
8001cc38:	14 98       	mov	r8,r10
8001cc3a:	16 99       	mov	r9,r11
8001cc3c:	10 9a       	mov	r10,r8
8001cc3e:	12 9b       	mov	r11,r9
8001cc40:	30 08       	mov	r8,0
8001cc42:	e0 69 80 00 	mov	r9,32768
8001cc46:	ea 19 40 66 	orh	r9,0x4066
8001cc4a:	f0 16 00 0c 	mcall	r6[48]
8001cc4e:	14 98       	mov	r8,r10
8001cc50:	16 99       	mov	r9,r11
8001cc52:	10 9a       	mov	r10,r8
8001cc54:	12 9b       	mov	r11,r9
8001cc56:	f0 16 00 09 	mcall	r6[36]
8001cc5a:	18 98       	mov	r8,r12
8001cc5c:	10 9c       	mov	r12,r8
8001cc5e:	2f fd       	sub	sp,-4
8001cc60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc64:	80 01       	ld.sh	r1,r0[0x0]
8001cc66:	ca 9a       	rjmp	8001c9b8 <gps_update+0x1a8>

8001cc68 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001cc68:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc6c:	1a 97       	mov	r7,sp
8001cc6e:	20 6d       	sub	sp,24
8001cc70:	49 e6       	lddpc	r6,8001cce8 <interpolate+0x80>
8001cc72:	1e 26       	rsub	r6,pc
8001cc74:	ef 4c ff f8 	st.w	r7[-8],r12
8001cc78:	ef 4b ff f4 	st.w	r7[-12],r11
8001cc7c:	ef 4a ff f0 	st.w	r7[-16],r10
8001cc80:	ef 49 ff ec 	st.w	r7[-20],r9
8001cc84:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001cc88:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001cc8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001cc90:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001cc94:	c0 41       	brne	8001cc9c <interpolate+0x34>
	{
		return y1;
8001cc96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cc9a:	c2 38       	rjmp	8001cce0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001cc9c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001cca0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cca4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001cca8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ccac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ccb0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001ccb4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001ccb8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001ccbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ccc0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001ccc4:	12 9b       	mov	r11,r9
8001ccc6:	10 9c       	mov	r12,r8
8001ccc8:	f0 16 00 08 	mcall	r6[32]
8001cccc:	18 98       	mov	r8,r12
8001ccce:	10 99       	mov	r9,r8
8001ccd0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ccd4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ccd8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001ccdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001cce0:	10 9c       	mov	r12,r8
8001cce2:	2f ad       	sub	sp,-24
8001cce4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cce8:	80 01       	ld.sh	r1,r0[0x0]
8001ccea:	ca f6       	brmi	8001cc48 <ToRad+0x3c>

8001ccec <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001ccec:	eb cd 40 c0 	pushm	r6-r7,lr
8001ccf0:	1a 97       	mov	r7,sp
8001ccf2:	20 1d       	sub	sp,4
8001ccf4:	4d 36       	lddpc	r6,8001ce40 <init_imu+0x154>
8001ccf6:	1e 26       	rsub	r6,pc
8001ccf8:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001ccfc:	f0 16 02 11 	mcall	r6[2116]
	init_adxl345_slow();
8001cd00:	f0 16 01 6b 	mcall	r6[1452]
	//init_lsm330();
	
	init_hmc5883_slow();
8001cd04:	f0 16 01 e9 	mcall	r6[1956]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001cd08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd0c:	e0 69 e0 00 	mov	r9,57344
8001cd10:	ea 19 46 44 	orh	r9,0x4644
8001cd14:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001cd18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd1c:	e0 69 e0 00 	mov	r9,57344
8001cd20:	ea 19 c6 44 	orh	r9,0xc644
8001cd24:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001cd28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd2c:	e0 69 e0 00 	mov	r9,57344
8001cd30:	ea 19 46 44 	orh	r9,0x4644
8001cd34:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001cd38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd3c:	e0 69 75 6a 	mov	r9,30058
8001cd40:	ea 19 43 81 	orh	r9,0x4381
8001cd44:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001cd48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd4c:	e0 69 7e 1e 	mov	r9,32286
8001cd50:	ea 19 43 81 	orh	r9,0x4381
8001cd54:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001cd58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd5c:	e0 69 0a 9c 	mov	r9,2716
8001cd60:	ea 19 43 81 	orh	r9,0x4381
8001cd64:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001cd68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd6c:	e0 69 91 bc 	mov	r9,37308
8001cd70:	ea 19 44 04 	orh	r9,0x4404
8001cd74:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001cd78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd7c:	e0 69 52 c7 	mov	r9,21191
8001cd80:	ea 19 44 03 	orh	r9,0x4403
8001cd84:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001cd88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd8c:	e0 69 39 4b 	mov	r9,14667
8001cd90:	ea 19 43 f9 	orh	r9,0x43f9
8001cd94:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001cd98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd9c:	30 09       	mov	r9,0
8001cd9e:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001cda2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cda6:	30 09       	mov	r9,0
8001cda8:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001cdac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdb0:	30 09       	mov	r9,0
8001cdb2:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001cdb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdba:	fc 19 41 90 	movh	r9,0x4190
8001cdbe:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001cdc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdc6:	fc 19 41 10 	movh	r9,0x4110
8001cdca:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001cdce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdd2:	fc 19 c1 80 	movh	r9,0xc180
8001cdd6:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001cdda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdde:	e0 69 c2 19 	mov	r9,49689
8001cde2:	ea 19 43 03 	orh	r9,0x4303
8001cde6:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001cdea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdee:	e0 69 09 d5 	mov	r9,2517
8001cdf2:	ea 19 c1 d1 	orh	r9,0xc1d1
8001cdf6:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001cdfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdfe:	e0 69 a8 8d 	mov	r9,43149
8001ce02:	ea 19 42 74 	orh	r9,0x4274
8001ce06:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001ce0a:	ec f9 02 d8 	ld.w	r9,r6[728]
8001ce0e:	30 08       	mov	r8,0
8001ce10:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001ce12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce16:	f0 ca ff 10 	sub	r10,r8,-240
8001ce1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce1e:	f0 c9 fe ec 	sub	r9,r8,-276
8001ce22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce26:	12 9b       	mov	r11,r9
8001ce28:	10 9c       	mov	r12,r8
8001ce2a:	f0 16 01 e4 	mcall	r6[1936]
	imu1->attitude.calibration_level=OFF;
8001ce2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce32:	30 08       	mov	r8,0
8001ce34:	f3 68 00 b8 	st.b	r9[184],r8
}
8001ce38:	2f fd       	sub	sp,-4
8001ce3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ce3e:	00 00       	add	r0,r0
8001ce40:	80 01       	ld.sh	r1,r0[0x0]
8001ce42:	cb 7a       	rjmp	8001cbb0 <ubx_GetMonRXR+0x1c>

8001ce44 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001ce44:	eb cd 40 c0 	pushm	r6-r7,lr
8001ce48:	1a 97       	mov	r7,sp
8001ce4a:	20 5d       	sub	sp,20
8001ce4c:	4b 66       	lddpc	r6,8001cf24 <imu_get_raw_data+0xe0>
8001ce4e:	1e 26       	rsub	r6,pc
8001ce50:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001ce54:	30 08       	mov	r8,0
8001ce56:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001ce5a:	f0 16 01 d0 	mcall	r6[1856]
8001ce5e:	18 98       	mov	r8,r12
8001ce60:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001ce64:	f0 16 01 bb 	mcall	r6[1772]
8001ce68:	18 98       	mov	r8,r12
8001ce6a:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001ce6e:	f0 16 01 34 	mcall	r6[1232]
8001ce72:	18 98       	mov	r8,r12
8001ce74:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001ce78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce7c:	90 28       	ld.sh	r8,r8[0x4]
8001ce7e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ce82:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ce86:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001ce8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce8e:	90 18       	ld.sh	r8,r8[0x2]
8001ce90:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ce94:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ce98:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001ce9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cea0:	90 38       	ld.sh	r8,r8[0x6]
8001cea2:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cea6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ceaa:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001ceae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ceb2:	90 38       	ld.sh	r8,r8[0x6]
8001ceb4:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ceb8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cebc:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001cec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cec4:	90 48       	ld.sh	r8,r8[0x8]
8001cec6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ceca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cece:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001ced2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ced6:	90 58       	ld.sh	r8,r8[0xa]
8001ced8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cedc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cee0:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001cee4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cee8:	90 58       	ld.sh	r8,r8[0xa]
8001ceea:	5c 38       	neg	r8
8001ceec:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cef0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cef4:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001cef8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cefc:	90 38       	ld.sh	r8,r8[0x6]
8001cefe:	5c 38       	neg	r8
8001cf00:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cf04:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cf08:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001cf0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf10:	90 48       	ld.sh	r8,r8[0x8]
8001cf12:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cf16:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cf1a:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001cf1e:	2f bd       	sub	sp,-20
8001cf20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf24:	80 01       	ld.sh	r1,r0[0x0]
8001cf26:	cc d2       	brcc	8001cec0 <imu_get_raw_data+0x7c>

8001cf28 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001cf28:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001cf2c:	1a 97       	mov	r7,sp
8001cf2e:	20 3d       	sub	sp,12
8001cf30:	4e 86       	lddpc	r6,8001d0d0 <calibrate_Gyros+0x1a8>
8001cf32:	1e 26       	rsub	r6,pc
8001cf34:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001cf38:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cf3c:	f0 16 00 90 	mcall	r6[576]
	for (j=0; j<3; j++) {
8001cf40:	30 08       	mov	r8,0
8001cf42:	ef 48 ff fc 	st.w	r7[-4],r8
8001cf46:	c1 48       	rjmp	8001cf6e <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001cf48:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf4c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cf50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf54:	2c da       	sub	r10,-51
8001cf56:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001cf5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf5e:	2c 49       	sub	r9,-60
8001cf60:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001cf64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf68:	2f f8       	sub	r8,-1
8001cf6a:	ef 48 ff fc 	st.w	r7[-4],r8
8001cf6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf72:	58 28       	cp.w	r8,2
8001cf74:	fe 9a ff ea 	brle	8001cf48 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cf78:	30 08       	mov	r8,0
8001cf7a:	ef 48 ff f8 	st.w	r7[-8],r8
8001cf7e:	c9 f8       	rjmp	8001d0bc <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001cf80:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cf84:	f0 16 00 90 	mcall	r6[576]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cf88:	30 08       	mov	r8,0
8001cf8a:	ef 48 ff fc 	st.w	r7[-4],r8
8001cf8e:	c8 a8       	rjmp	8001d0a2 <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001cf90:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001cf94:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf98:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cf9c:	2c 49       	sub	r9,-60
8001cf9e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cfa2:	10 9c       	mov	r12,r8
8001cfa4:	f0 16 00 03 	mcall	r6[12]
8001cfa8:	e0 68 cc cd 	mov	r8,52429
8001cfac:	ea 18 cc cc 	orh	r8,0xcccc
8001cfb0:	e0 69 cc cc 	mov	r9,52428
8001cfb4:	ea 19 3f ec 	orh	r9,0x3fec
8001cfb8:	f0 16 00 02 	mcall	r6[8]
8001cfbc:	14 98       	mov	r8,r10
8001cfbe:	16 99       	mov	r9,r11
8001cfc0:	10 92       	mov	r2,r8
8001cfc2:	12 93       	mov	r3,r9
8001cfc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cfcc:	2c d9       	sub	r9,-51
8001cfce:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cfd2:	10 9c       	mov	r12,r8
8001cfd4:	f0 16 00 03 	mcall	r6[12]
8001cfd8:	e0 68 99 9a 	mov	r8,39322
8001cfdc:	ea 18 99 99 	orh	r8,0x9999
8001cfe0:	e0 69 99 99 	mov	r9,39321
8001cfe4:	ea 19 3f b9 	orh	r9,0x3fb9
8001cfe8:	f0 16 00 02 	mcall	r6[8]
8001cfec:	14 98       	mov	r8,r10
8001cfee:	16 99       	mov	r9,r11
8001cff0:	04 9a       	mov	r10,r2
8001cff2:	06 9b       	mov	r11,r3
8001cff4:	f0 16 00 05 	mcall	r6[20]
8001cff8:	14 98       	mov	r8,r10
8001cffa:	16 99       	mov	r9,r11
8001cffc:	10 9a       	mov	r10,r8
8001cffe:	12 9b       	mov	r11,r9
8001d000:	f0 16 00 09 	mcall	r6[36]
8001d004:	18 9a       	mov	r10,r12
8001d006:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d00a:	ea c9 ff c4 	sub	r9,r5,-60
8001d00e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001d012:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001d016:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d01a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d01e:	2d 59       	sub	r9,-43
8001d020:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d024:	10 9c       	mov	r12,r8
8001d026:	f0 16 00 03 	mcall	r6[12]
8001d02a:	e0 68 cc cd 	mov	r8,52429
8001d02e:	ea 18 cc cc 	orh	r8,0xcccc
8001d032:	e0 69 cc cc 	mov	r9,52428
8001d036:	ea 19 3f ec 	orh	r9,0x3fec
8001d03a:	f0 16 00 02 	mcall	r6[8]
8001d03e:	14 98       	mov	r8,r10
8001d040:	16 99       	mov	r9,r11
8001d042:	10 92       	mov	r2,r8
8001d044:	12 93       	mov	r3,r9
8001d046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d04a:	f0 c9 ff fa 	sub	r9,r8,-6
8001d04e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d052:	2c d9       	sub	r9,-51
8001d054:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d058:	10 9c       	mov	r12,r8
8001d05a:	f0 16 00 03 	mcall	r6[12]
8001d05e:	e0 68 99 9a 	mov	r8,39322
8001d062:	ea 18 99 99 	orh	r8,0x9999
8001d066:	e0 69 99 99 	mov	r9,39321
8001d06a:	ea 19 3f b9 	orh	r9,0x3fb9
8001d06e:	f0 16 00 02 	mcall	r6[8]
8001d072:	14 98       	mov	r8,r10
8001d074:	16 99       	mov	r9,r11
8001d076:	04 9a       	mov	r10,r2
8001d078:	06 9b       	mov	r11,r3
8001d07a:	f0 16 00 05 	mcall	r6[20]
8001d07e:	14 98       	mov	r8,r10
8001d080:	16 99       	mov	r9,r11
8001d082:	10 9a       	mov	r10,r8
8001d084:	12 9b       	mov	r11,r9
8001d086:	f0 16 00 09 	mcall	r6[36]
8001d08a:	18 9a       	mov	r10,r12
8001d08c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d090:	ea c9 ff d5 	sub	r9,r5,-43
8001d094:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001d098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d09c:	2f f8       	sub	r8,-1
8001d09e:	ef 48 ff fc 	st.w	r7[-4],r8
8001d0a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d0a6:	58 28       	cp.w	r8,2
8001d0a8:	fe 9a ff 74 	brle	8001cf90 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001d0ac:	30 4c       	mov	r12,4
8001d0ae:	f0 16 00 fd 	mcall	r6[1012]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001d0b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0b6:	2f f8       	sub	r8,-1
8001d0b8:	ef 48 ff f8 	st.w	r7[-8],r8
8001d0bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d0c0:	e0 48 00 63 	cp.w	r8,99
8001d0c4:	fe 9a ff 5e 	brle	8001cf80 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001d0c8:	2f dd       	sub	sp,-12
8001d0ca:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d0ce:	00 00       	add	r0,r0
8001d0d0:	80 01       	ld.sh	r1,r0[0x0]
8001d0d2:	cd b6       	brmi	8001d088 <calibrate_Gyros+0x160>

8001d0d4 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001d0d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001d0d8:	1a 97       	mov	r7,sp
8001d0da:	20 5d       	sub	sp,20
8001d0dc:	4b 46       	lddpc	r6,8001d1ac <imu_update+0xd8>
8001d0de:	1e 26       	rsub	r6,pc
8001d0e0:	ef 4c ff f8 	st.w	r7[-8],r12
8001d0e4:	ef 4b ff f4 	st.w	r7[-12],r11
8001d0e8:	ef 4a ff f0 	st.w	r7[-16],r10
8001d0ec:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001d0f0:	f0 16 00 4b 	mcall	r6[300]
8001d0f4:	18 98       	mov	r8,r12
8001d0f6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001d0fa:	ec f8 02 d8 	ld.w	r8,r6[728]
8001d0fe:	11 88       	ld.ub	r8,r8[0x0]
8001d100:	ec 18 00 01 	eorl	r8,0x1
8001d104:	5c 58       	castu.b	r8
8001d106:	c0 c0       	breq	8001d11e <imu_update+0x4a>
	{
		imu1->last_update = t;
8001d108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d10c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d110:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001d114:	ec f9 02 d8 	ld.w	r9,r6[728]
8001d118:	30 18       	mov	r8,1
8001d11a:	b2 88       	st.b	r9[0x0],r8
8001d11c:	c4 48       	rjmp	8001d1a4 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001d11e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d122:	f0 f8 01 38 	ld.w	r8,r8[312]
8001d126:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d12a:	f2 08 01 08 	sub	r8,r9,r8
8001d12e:	10 9c       	mov	r12,r8
8001d130:	f0 16 00 b4 	mcall	r6[720]
8001d134:	18 99       	mov	r9,r12
8001d136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d13a:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001d13e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d142:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d146:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001d14a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d14e:	f0 fa 01 40 	ld.w	r10,r8[320]
8001d152:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d156:	f0 cb ff 34 	sub	r11,r8,-204
8001d15a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d15e:	30 09       	mov	r9,0
8001d160:	10 9c       	mov	r12,r8
8001d162:	f0 16 01 5b 	mcall	r6[1388]
		if (imu1->attitude.calibration_level==OFF) {
8001d166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d16a:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001d16e:	58 08       	cp.w	r8,0
8001d170:	c1 a1       	brne	8001d1a4 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001d172:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d176:	f0 f9 01 40 	ld.w	r9,r8[320]
8001d17a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d17e:	12 9a       	mov	r10,r9
8001d180:	10 9b       	mov	r11,r8
8001d182:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d186:	f0 16 01 ff 	mcall	r6[2044]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001d18a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d18e:	f0 f8 01 40 	ld.w	r8,r8[320]
8001d192:	10 99       	mov	r9,r8
8001d194:	ee fa ff ec 	ld.w	r10,r7[-20]
8001d198:	ee fb ff f0 	ld.w	r11,r7[-16]
8001d19c:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d1a0:	f0 16 01 e1 	mcall	r6[1924]
		}
	}
}
8001d1a4:	2f bd       	sub	sp,-20
8001d1a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d1aa:	00 00       	add	r0,r0
8001d1ac:	80 01       	ld.sh	r1,r0[0x0]
8001d1ae:	cf 62       	brcc	8001d19a <imu_update+0xc6>

8001d1b0 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001d1b0:	eb cd 40 80 	pushm	r7,lr
8001d1b4:	1a 97       	mov	r7,sp
8001d1b6:	20 3d       	sub	sp,12
8001d1b8:	ef 4c ff f8 	st.w	r7[-8],r12
8001d1bc:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001d1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d1c4:	70 09       	ld.w	r9,r8[0x0]
8001d1c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d1ca:	70 08       	ld.w	r8,r8[0x0]
8001d1cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d1d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d1d4:	2f c8       	sub	r8,-4
8001d1d6:	70 0a       	ld.w	r10,r8[0x0]
8001d1d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d1dc:	2f c8       	sub	r8,-4
8001d1de:	70 08       	ld.w	r8,r8[0x0]
8001d1e0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d1e4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d1e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d1ec:	2f 88       	sub	r8,-8
8001d1ee:	70 0a       	ld.w	r10,r8[0x0]
8001d1f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d1f4:	2f 88       	sub	r8,-8
8001d1f6:	70 08       	ld.w	r8,r8[0x0]
8001d1f8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d1fc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d200:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001d204:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d208:	10 9c       	mov	r12,r8
8001d20a:	2f dd       	sub	sp,-12
8001d20c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d210 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001d210:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d214:	1a 97       	mov	r7,sp
8001d216:	20 7d       	sub	sp,28
8001d218:	4b d6       	lddpc	r6,8001d30c <quat_multi+0xfc>
8001d21a:	1e 26       	rsub	r6,pc
8001d21c:	ee c8 ff ec 	sub	r8,r7,-20
8001d220:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001d222:	70 2a       	ld.w	r10,r8[0x8]
8001d224:	70 79       	ld.w	r9,r8[0x1c]
8001d226:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d22a:	70 3b       	ld.w	r11,r8[0xc]
8001d22c:	70 69       	ld.w	r9,r8[0x18]
8001d22e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d232:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d236:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001d23a:	70 3a       	ld.w	r10,r8[0xc]
8001d23c:	70 59       	ld.w	r9,r8[0x14]
8001d23e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d242:	70 1b       	ld.w	r11,r8[0x4]
8001d244:	70 79       	ld.w	r9,r8[0x1c]
8001d246:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d24a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d24e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001d252:	70 1a       	ld.w	r10,r8[0x4]
8001d254:	70 69       	ld.w	r9,r8[0x18]
8001d256:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d25a:	70 2b       	ld.w	r11,r8[0x8]
8001d25c:	70 59       	ld.w	r9,r8[0x14]
8001d25e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d262:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d266:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001d26a:	70 4a       	ld.w	r10,r8[0x10]
8001d26c:	70 19       	ld.w	r9,r8[0x4]
8001d26e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d272:	70 0b       	ld.w	r11,r8[0x0]
8001d274:	70 59       	ld.w	r9,r8[0x14]
8001d276:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d27a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d27e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d282:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d286:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001d28a:	70 4a       	ld.w	r10,r8[0x10]
8001d28c:	70 29       	ld.w	r9,r8[0x8]
8001d28e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d292:	70 0b       	ld.w	r11,r8[0x0]
8001d294:	70 69       	ld.w	r9,r8[0x18]
8001d296:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d29a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d29e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d2a2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d2a6:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001d2aa:	70 4a       	ld.w	r10,r8[0x10]
8001d2ac:	70 39       	ld.w	r9,r8[0xc]
8001d2ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d2b2:	70 0b       	ld.w	r11,r8[0x0]
8001d2b4:	70 79       	ld.w	r9,r8[0x1c]
8001d2b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d2ba:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d2be:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d2c2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d2c6:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001d2ca:	70 0a       	ld.w	r10,r8[0x0]
8001d2cc:	70 49       	ld.w	r9,r8[0x10]
8001d2ce:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001d2d2:	f0 c9 ff f0 	sub	r9,r8,-16
8001d2d6:	2f c9       	sub	r9,-4
8001d2d8:	2f c8       	sub	r8,-4
8001d2da:	12 9b       	mov	r11,r9
8001d2dc:	10 9c       	mov	r12,r8
8001d2de:	c6 9f       	rcall	8001d1b0 <scalar_product>
8001d2e0:	18 98       	mov	r8,r12
8001d2e2:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001d2e6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001d2ea:	0a 98       	mov	r8,r5
8001d2ec:	ee c9 00 1c 	sub	r9,r7,28
8001d2f0:	20 08       	sub	r8,0
8001d2f2:	20 09       	sub	r9,0
8001d2f4:	72 0a       	ld.w	r10,r9[0x0]
8001d2f6:	91 0a       	st.w	r8[0x0],r10
8001d2f8:	72 1a       	ld.w	r10,r9[0x4]
8001d2fa:	91 1a       	st.w	r8[0x4],r10
8001d2fc:	72 2a       	ld.w	r10,r9[0x8]
8001d2fe:	91 2a       	st.w	r8[0x8],r10
8001d300:	72 39       	ld.w	r9,r9[0xc]
8001d302:	91 39       	st.w	r8[0xc],r9
}
8001d304:	0a 9c       	mov	r12,r5
8001d306:	2f 9d       	sub	sp,-28
8001d308:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d30c:	80 01       	ld.sh	r1,r0[0x0]
8001d30e:	d0 9e       	*unknown*

8001d310 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001d310:	eb cd 40 80 	pushm	r7,lr
8001d314:	1a 97       	mov	r7,sp
8001d316:	20 5d       	sub	sp,20
8001d318:	ee c9 ff f8 	sub	r9,r7,-8
8001d31c:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001d31e:	72 08       	ld.w	r8,r9[0x0]
8001d320:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001d324:	30 08       	mov	r8,0
8001d326:	ef 48 ff fc 	st.w	r7[-4],r8
8001d32a:	c1 58       	rjmp	8001d354 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001d32c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d330:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d334:	2f fb       	sub	r11,-1
8001d336:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001d33a:	ee 1b 80 00 	eorh	r11,0x8000
8001d33e:	2f f8       	sub	r8,-1
8001d340:	a3 68       	lsl	r8,0x2
8001d342:	ee 08 00 08 	add	r8,r7,r8
8001d346:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001d34a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d34e:	2f f8       	sub	r8,-1
8001d350:	ef 48 ff fc 	st.w	r7[-4],r8
8001d354:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d358:	58 28       	cp.w	r8,2
8001d35a:	fe 9a ff e9 	brle	8001d32c <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001d35e:	14 98       	mov	r8,r10
8001d360:	ee c9 00 14 	sub	r9,r7,20
8001d364:	20 08       	sub	r8,0
8001d366:	20 09       	sub	r9,0
8001d368:	72 0b       	ld.w	r11,r9[0x0]
8001d36a:	91 0b       	st.w	r8[0x0],r11
8001d36c:	72 1b       	ld.w	r11,r9[0x4]
8001d36e:	91 1b       	st.w	r8[0x4],r11
8001d370:	72 2b       	ld.w	r11,r9[0x8]
8001d372:	91 2b       	st.w	r8[0x8],r11
8001d374:	72 39       	ld.w	r9,r9[0xc]
8001d376:	91 39       	st.w	r8[0xc],r9
}
8001d378:	14 9c       	mov	r12,r10
8001d37a:	2f bd       	sub	sp,-20
8001d37c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d380 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001d380:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d384:	1a 97       	mov	r7,sp
8001d386:	20 cd       	sub	sp,48
8001d388:	4b c6       	lddpc	r6,8001d478 <quat_global_to_local+0xf8>
8001d38a:	1e 26       	rsub	r6,pc
8001d38c:	ee c5 ff ec 	sub	r5,r7,-20
8001d390:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d392:	ee ca 00 10 	sub	r10,r7,16
8001d396:	20 4d       	sub	sp,16
8001d398:	1a 98       	mov	r8,sp
8001d39a:	0a 99       	mov	r9,r5
8001d39c:	20 08       	sub	r8,0
8001d39e:	20 09       	sub	r9,0
8001d3a0:	72 0b       	ld.w	r11,r9[0x0]
8001d3a2:	91 0b       	st.w	r8[0x0],r11
8001d3a4:	72 1b       	ld.w	r11,r9[0x4]
8001d3a6:	91 1b       	st.w	r8[0x4],r11
8001d3a8:	72 2b       	ld.w	r11,r9[0x8]
8001d3aa:	91 2b       	st.w	r8[0x8],r11
8001d3ac:	72 39       	ld.w	r9,r9[0xc]
8001d3ae:	91 39       	st.w	r8[0xc],r9
8001d3b0:	14 9c       	mov	r12,r10
8001d3b2:	ca ff       	rcall	8001d310 <quat_inv>
8001d3b4:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001d3b6:	ee ca 00 20 	sub	r10,r7,32
8001d3ba:	20 4d       	sub	sp,16
8001d3bc:	1a 98       	mov	r8,sp
8001d3be:	ea c9 ff f0 	sub	r9,r5,-16
8001d3c2:	20 08       	sub	r8,0
8001d3c4:	20 09       	sub	r9,0
8001d3c6:	72 0b       	ld.w	r11,r9[0x0]
8001d3c8:	91 0b       	st.w	r8[0x0],r11
8001d3ca:	72 1b       	ld.w	r11,r9[0x4]
8001d3cc:	91 1b       	st.w	r8[0x4],r11
8001d3ce:	72 2b       	ld.w	r11,r9[0x8]
8001d3d0:	91 2b       	st.w	r8[0x8],r11
8001d3d2:	72 39       	ld.w	r9,r9[0xc]
8001d3d4:	91 39       	st.w	r8[0xc],r9
8001d3d6:	20 4d       	sub	sp,16
8001d3d8:	1a 98       	mov	r8,sp
8001d3da:	ee c9 00 10 	sub	r9,r7,16
8001d3de:	20 08       	sub	r8,0
8001d3e0:	20 09       	sub	r9,0
8001d3e2:	72 0b       	ld.w	r11,r9[0x0]
8001d3e4:	91 0b       	st.w	r8[0x0],r11
8001d3e6:	72 1b       	ld.w	r11,r9[0x4]
8001d3e8:	91 1b       	st.w	r8[0x4],r11
8001d3ea:	72 2b       	ld.w	r11,r9[0x8]
8001d3ec:	91 2b       	st.w	r8[0x8],r11
8001d3ee:	72 39       	ld.w	r9,r9[0xc]
8001d3f0:	91 39       	st.w	r8[0xc],r9
8001d3f2:	14 9c       	mov	r12,r10
8001d3f4:	c0 ef       	rcall	8001d210 <quat_multi>
8001d3f6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001d3f8:	ee ca 00 30 	sub	r10,r7,48
8001d3fc:	20 4d       	sub	sp,16
8001d3fe:	1a 98       	mov	r8,sp
8001d400:	0a 99       	mov	r9,r5
8001d402:	20 08       	sub	r8,0
8001d404:	20 09       	sub	r9,0
8001d406:	72 0b       	ld.w	r11,r9[0x0]
8001d408:	91 0b       	st.w	r8[0x0],r11
8001d40a:	72 1b       	ld.w	r11,r9[0x4]
8001d40c:	91 1b       	st.w	r8[0x4],r11
8001d40e:	72 2b       	ld.w	r11,r9[0x8]
8001d410:	91 2b       	st.w	r8[0x8],r11
8001d412:	72 39       	ld.w	r9,r9[0xc]
8001d414:	91 39       	st.w	r8[0xc],r9
8001d416:	20 4d       	sub	sp,16
8001d418:	1a 98       	mov	r8,sp
8001d41a:	ee c9 00 20 	sub	r9,r7,32
8001d41e:	20 08       	sub	r8,0
8001d420:	20 09       	sub	r9,0
8001d422:	72 0b       	ld.w	r11,r9[0x0]
8001d424:	91 0b       	st.w	r8[0x0],r11
8001d426:	72 1b       	ld.w	r11,r9[0x4]
8001d428:	91 1b       	st.w	r8[0x4],r11
8001d42a:	72 2b       	ld.w	r11,r9[0x8]
8001d42c:	91 2b       	st.w	r8[0x8],r11
8001d42e:	72 39       	ld.w	r9,r9[0xc]
8001d430:	91 39       	st.w	r8[0xc],r9
8001d432:	14 9c       	mov	r12,r10
8001d434:	ce ee       	rcall	8001d210 <quat_multi>
8001d436:	2f 8d       	sub	sp,-32
8001d438:	ee c8 00 20 	sub	r8,r7,32
8001d43c:	ee c9 00 30 	sub	r9,r7,48
8001d440:	20 08       	sub	r8,0
8001d442:	20 09       	sub	r9,0
8001d444:	72 0a       	ld.w	r10,r9[0x0]
8001d446:	91 0a       	st.w	r8[0x0],r10
8001d448:	72 1a       	ld.w	r10,r9[0x4]
8001d44a:	91 1a       	st.w	r8[0x4],r10
8001d44c:	72 2a       	ld.w	r10,r9[0x8]
8001d44e:	91 2a       	st.w	r8[0x8],r10
8001d450:	72 39       	ld.w	r9,r9[0xc]
8001d452:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001d454:	06 98       	mov	r8,r3
8001d456:	ee c9 00 20 	sub	r9,r7,32
8001d45a:	20 08       	sub	r8,0
8001d45c:	20 09       	sub	r9,0
8001d45e:	72 0a       	ld.w	r10,r9[0x0]
8001d460:	91 0a       	st.w	r8[0x0],r10
8001d462:	72 1a       	ld.w	r10,r9[0x4]
8001d464:	91 1a       	st.w	r8[0x4],r10
8001d466:	72 2a       	ld.w	r10,r9[0x8]
8001d468:	91 2a       	st.w	r8[0x8],r10
8001d46a:	72 39       	ld.w	r9,r9[0xc]
8001d46c:	91 39       	st.w	r8[0xc],r9
}
8001d46e:	06 9c       	mov	r12,r3
8001d470:	2f 4d       	sub	sp,-48
8001d472:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d476:	00 00       	add	r0,r0
8001d478:	80 01       	ld.sh	r1,r0[0x0]
8001d47a:	d2 0e       	*unknown*

8001d47c <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001d47c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d480:	1a 97       	mov	r7,sp
8001d482:	20 cd       	sub	sp,48
8001d484:	4b c6       	lddpc	r6,8001d574 <quat_local_to_global+0xf8>
8001d486:	1e 26       	rsub	r6,pc
8001d488:	ee c5 ff ec 	sub	r5,r7,-20
8001d48c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d48e:	ee ca 00 10 	sub	r10,r7,16
8001d492:	20 4d       	sub	sp,16
8001d494:	1a 98       	mov	r8,sp
8001d496:	0a 99       	mov	r9,r5
8001d498:	20 08       	sub	r8,0
8001d49a:	20 09       	sub	r9,0
8001d49c:	72 0b       	ld.w	r11,r9[0x0]
8001d49e:	91 0b       	st.w	r8[0x0],r11
8001d4a0:	72 1b       	ld.w	r11,r9[0x4]
8001d4a2:	91 1b       	st.w	r8[0x4],r11
8001d4a4:	72 2b       	ld.w	r11,r9[0x8]
8001d4a6:	91 2b       	st.w	r8[0x8],r11
8001d4a8:	72 39       	ld.w	r9,r9[0xc]
8001d4aa:	91 39       	st.w	r8[0xc],r9
8001d4ac:	14 9c       	mov	r12,r10
8001d4ae:	c3 1f       	rcall	8001d310 <quat_inv>
8001d4b0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001d4b2:	ee ca 00 20 	sub	r10,r7,32
8001d4b6:	20 4d       	sub	sp,16
8001d4b8:	1a 98       	mov	r8,sp
8001d4ba:	ea c9 ff f0 	sub	r9,r5,-16
8001d4be:	20 08       	sub	r8,0
8001d4c0:	20 09       	sub	r9,0
8001d4c2:	72 0b       	ld.w	r11,r9[0x0]
8001d4c4:	91 0b       	st.w	r8[0x0],r11
8001d4c6:	72 1b       	ld.w	r11,r9[0x4]
8001d4c8:	91 1b       	st.w	r8[0x4],r11
8001d4ca:	72 2b       	ld.w	r11,r9[0x8]
8001d4cc:	91 2b       	st.w	r8[0x8],r11
8001d4ce:	72 39       	ld.w	r9,r9[0xc]
8001d4d0:	91 39       	st.w	r8[0xc],r9
8001d4d2:	20 4d       	sub	sp,16
8001d4d4:	1a 98       	mov	r8,sp
8001d4d6:	0a 99       	mov	r9,r5
8001d4d8:	20 08       	sub	r8,0
8001d4da:	20 09       	sub	r9,0
8001d4dc:	72 0b       	ld.w	r11,r9[0x0]
8001d4de:	91 0b       	st.w	r8[0x0],r11
8001d4e0:	72 1b       	ld.w	r11,r9[0x4]
8001d4e2:	91 1b       	st.w	r8[0x4],r11
8001d4e4:	72 2b       	ld.w	r11,r9[0x8]
8001d4e6:	91 2b       	st.w	r8[0x8],r11
8001d4e8:	72 39       	ld.w	r9,r9[0xc]
8001d4ea:	91 39       	st.w	r8[0xc],r9
8001d4ec:	14 9c       	mov	r12,r10
8001d4ee:	c9 1e       	rcall	8001d210 <quat_multi>
8001d4f0:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001d4f2:	ee ca 00 30 	sub	r10,r7,48
8001d4f6:	20 4d       	sub	sp,16
8001d4f8:	1a 98       	mov	r8,sp
8001d4fa:	ee c9 00 10 	sub	r9,r7,16
8001d4fe:	20 08       	sub	r8,0
8001d500:	20 09       	sub	r9,0
8001d502:	72 0b       	ld.w	r11,r9[0x0]
8001d504:	91 0b       	st.w	r8[0x0],r11
8001d506:	72 1b       	ld.w	r11,r9[0x4]
8001d508:	91 1b       	st.w	r8[0x4],r11
8001d50a:	72 2b       	ld.w	r11,r9[0x8]
8001d50c:	91 2b       	st.w	r8[0x8],r11
8001d50e:	72 39       	ld.w	r9,r9[0xc]
8001d510:	91 39       	st.w	r8[0xc],r9
8001d512:	20 4d       	sub	sp,16
8001d514:	1a 98       	mov	r8,sp
8001d516:	ee c9 00 20 	sub	r9,r7,32
8001d51a:	20 08       	sub	r8,0
8001d51c:	20 09       	sub	r9,0
8001d51e:	72 0b       	ld.w	r11,r9[0x0]
8001d520:	91 0b       	st.w	r8[0x0],r11
8001d522:	72 1b       	ld.w	r11,r9[0x4]
8001d524:	91 1b       	st.w	r8[0x4],r11
8001d526:	72 2b       	ld.w	r11,r9[0x8]
8001d528:	91 2b       	st.w	r8[0x8],r11
8001d52a:	72 39       	ld.w	r9,r9[0xc]
8001d52c:	91 39       	st.w	r8[0xc],r9
8001d52e:	14 9c       	mov	r12,r10
8001d530:	c7 0e       	rcall	8001d210 <quat_multi>
8001d532:	2f 8d       	sub	sp,-32
8001d534:	ee c8 00 20 	sub	r8,r7,32
8001d538:	ee c9 00 30 	sub	r9,r7,48
8001d53c:	20 08       	sub	r8,0
8001d53e:	20 09       	sub	r9,0
8001d540:	72 0a       	ld.w	r10,r9[0x0]
8001d542:	91 0a       	st.w	r8[0x0],r10
8001d544:	72 1a       	ld.w	r10,r9[0x4]
8001d546:	91 1a       	st.w	r8[0x4],r10
8001d548:	72 2a       	ld.w	r10,r9[0x8]
8001d54a:	91 2a       	st.w	r8[0x8],r10
8001d54c:	72 39       	ld.w	r9,r9[0xc]
8001d54e:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001d550:	06 98       	mov	r8,r3
8001d552:	ee c9 00 20 	sub	r9,r7,32
8001d556:	20 08       	sub	r8,0
8001d558:	20 09       	sub	r9,0
8001d55a:	72 0a       	ld.w	r10,r9[0x0]
8001d55c:	91 0a       	st.w	r8[0x0],r10
8001d55e:	72 1a       	ld.w	r10,r9[0x4]
8001d560:	91 1a       	st.w	r8[0x4],r10
8001d562:	72 2a       	ld.w	r10,r9[0x8]
8001d564:	91 2a       	st.w	r8[0x8],r10
8001d566:	72 39       	ld.w	r9,r9[0xc]
8001d568:	91 39       	st.w	r8[0xc],r9
}
8001d56a:	06 9c       	mov	r12,r3
8001d56c:	2f 4d       	sub	sp,-48
8001d56e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d572:	00 00       	add	r0,r0
8001d574:	80 01       	ld.sh	r1,r0[0x0]
8001d576:	d3 0a       	popm	r11-r12

8001d578 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001d578:	eb cd 40 c0 	pushm	r6-r7,lr
8001d57c:	1a 97       	mov	r7,sp
8001d57e:	20 2d       	sub	sp,8
8001d580:	4b 26       	lddpc	r6,8001d648 <fast_sqrt+0xd0>
8001d582:	1e 26       	rsub	r6,pc
8001d584:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001d588:	30 18       	mov	r8,1
8001d58a:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d58e:	30 09       	mov	r9,0
8001d590:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d594:	e0 8c 00 03 	brvs	8001d59a <fast_sqrt+0x22>
8001d598:	c0 25       	brlt	8001d59c <fast_sqrt+0x24>
8001d59a:	30 08       	mov	r8,0
8001d59c:	5c 58       	castu.b	r8
8001d59e:	c0 30       	breq	8001d5a4 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001d5a0:	30 08       	mov	r8,0
8001d5a2:	c4 f8       	rjmp	8001d640 <fast_sqrt+0xc8>
	}
	float result=1.0;
8001d5a4:	fc 18 3f 80 	movh	r8,0x3f80
8001d5a8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d5ac:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d5b0:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d5b4:	f0 16 00 08 	mcall	r6[32]
8001d5b8:	18 98       	mov	r8,r12
8001d5ba:	10 99       	mov	r9,r8
8001d5bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d5c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d5c4:	fc 18 3f 00 	movh	r8,0x3f00
8001d5c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d5cc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d5d0:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d5d4:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d5d8:	f0 16 00 08 	mcall	r6[32]
8001d5dc:	18 98       	mov	r8,r12
8001d5de:	10 99       	mov	r9,r8
8001d5e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d5e4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d5e8:	fc 18 3f 00 	movh	r8,0x3f00
8001d5ec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d5f0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d5f4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d5f8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d5fc:	f0 16 00 08 	mcall	r6[32]
8001d600:	18 98       	mov	r8,r12
8001d602:	10 99       	mov	r9,r8
8001d604:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d608:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d60c:	fc 18 3f 00 	movh	r8,0x3f00
8001d610:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d614:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d618:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d61c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d620:	f0 16 00 08 	mcall	r6[32]
8001d624:	18 98       	mov	r8,r12
8001d626:	10 99       	mov	r9,r8
8001d628:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d62c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d630:	fc 18 3f 00 	movh	r8,0x3f00
8001d634:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d638:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001d63c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d640:	10 9c       	mov	r12,r8
8001d642:	2f ed       	sub	sp,-8
8001d644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d648:	80 01       	ld.sh	r1,r0[0x0]
8001d64a:	d4 06       	*unknown*

8001d64c <quat_normalise>:
	{
		u[i] = v[i] / norm;
	}
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001d64c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d650:	1a 97       	mov	r7,sp
8001d652:	20 6d       	sub	sp,24
8001d654:	4b f6       	lddpc	r6,8001d750 <quat_normalise+0x104>
8001d656:	1e 26       	rsub	r6,pc
8001d658:	ee c5 ff e8 	sub	r5,r7,-24
8001d65c:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001d65e:	fc 18 3f 80 	movh	r8,0x3f80
8001d662:	ef 48 ff e8 	st.w	r7[-24],r8
8001d666:	30 08       	mov	r8,0
8001d668:	ef 48 ff ec 	st.w	r7[-20],r8
8001d66c:	30 08       	mov	r8,0
8001d66e:	ef 48 ff f0 	st.w	r7[-16],r8
8001d672:	30 08       	mov	r8,0
8001d674:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001d678:	6a 09       	ld.w	r9,r5[0x0]
8001d67a:	6a 08       	ld.w	r8,r5[0x0]
8001d67c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d680:	6a 1a       	ld.w	r10,r5[0x4]
8001d682:	6a 18       	ld.w	r8,r5[0x4]
8001d684:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d688:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d68c:	6a 2a       	ld.w	r10,r5[0x8]
8001d68e:	6a 28       	ld.w	r8,r5[0x8]
8001d690:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d694:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d698:	6a 3a       	ld.w	r10,r5[0xc]
8001d69a:	6a 38       	ld.w	r8,r5[0xc]
8001d69c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d6a0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d6a4:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001d6a8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d6ac:	f0 16 00 03 	mcall	r6[12]
8001d6b0:	14 98       	mov	r8,r10
8001d6b2:	16 99       	mov	r9,r11
8001d6b4:	30 03       	mov	r3,0
8001d6b6:	e0 6a af 48 	mov	r10,44872
8001d6ba:	ea 1a 9a bc 	orh	r10,0x9abc
8001d6be:	e0 6b d7 f2 	mov	r11,55282
8001d6c2:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001d6c6:	f0 16 00 20 	mcall	r6[128]
8001d6ca:	18 98       	mov	r8,r12
8001d6cc:	58 08       	cp.w	r8,0
8001d6ce:	c0 20       	breq	8001d6d2 <quat_normalise+0x86>
8001d6d0:	30 13       	mov	r3,1
8001d6d2:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001d6d6:	c2 b0       	breq	8001d72c <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001d6d8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d6dc:	c4 ef       	rcall	8001d578 <fast_sqrt>
8001d6de:	18 98       	mov	r8,r12
8001d6e0:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001d6e4:	6a 08       	ld.w	r8,r5[0x0]
8001d6e6:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d6ea:	10 9c       	mov	r12,r8
8001d6ec:	f0 16 00 08 	mcall	r6[32]
8001d6f0:	18 98       	mov	r8,r12
8001d6f2:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001d6f6:	6a 18       	ld.w	r8,r5[0x4]
8001d6f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d6fc:	10 9c       	mov	r12,r8
8001d6fe:	f0 16 00 08 	mcall	r6[32]
8001d702:	18 98       	mov	r8,r12
8001d704:	ef 48 ff ec 	st.w	r7[-20],r8
8001d708:	6a 28       	ld.w	r8,r5[0x8]
8001d70a:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d70e:	10 9c       	mov	r12,r8
8001d710:	f0 16 00 08 	mcall	r6[32]
8001d714:	18 98       	mov	r8,r12
8001d716:	ef 48 ff f0 	st.w	r7[-16],r8
8001d71a:	6a 38       	ld.w	r8,r5[0xc]
8001d71c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d720:	10 9c       	mov	r12,r8
8001d722:	f0 16 00 08 	mcall	r6[32]
8001d726:	18 98       	mov	r8,r12
8001d728:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001d72c:	04 98       	mov	r8,r2
8001d72e:	ee c9 00 18 	sub	r9,r7,24
8001d732:	20 08       	sub	r8,0
8001d734:	20 09       	sub	r9,0
8001d736:	72 0a       	ld.w	r10,r9[0x0]
8001d738:	91 0a       	st.w	r8[0x0],r10
8001d73a:	72 1a       	ld.w	r10,r9[0x4]
8001d73c:	91 1a       	st.w	r8[0x4],r10
8001d73e:	72 2a       	ld.w	r10,r9[0x8]
8001d740:	91 2a       	st.w	r8[0x8],r10
8001d742:	72 39       	ld.w	r9,r9[0xc]
8001d744:	91 39       	st.w	r8[0xc],r9
}
8001d746:	04 9c       	mov	r12,r2
8001d748:	2f ad       	sub	sp,-24
8001d74a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d74e:	00 00       	add	r0,r0
8001d750:	80 01       	ld.sh	r1,r0[0x0]
8001d752:	d4 da       	popm	r0-r3,r8-r10,lr

8001d754 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001d754:	eb cd 40 80 	pushm	r7,lr
8001d758:	1a 97       	mov	r7,sp
8001d75a:	20 2d       	sub	sp,8
8001d75c:	ef 4c ff fc 	st.w	r7[-4],r12
8001d760:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001d764:	30 18       	mov	r8,1
8001d766:	ee fa ff fc 	ld.w	r10,r7[-4]
8001d76a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d76e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d772:	e0 8c 00 04 	brvs	8001d77a <clip+0x26>
8001d776:	e0 89 00 03 	brgt	8001d77c <clip+0x28>
8001d77a:	30 08       	mov	r8,0
8001d77c:	5c 58       	castu.b	r8
8001d77e:	c0 40       	breq	8001d786 <clip+0x32>
8001d780:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d784:	c1 98       	rjmp	8001d7b6 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001d786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d78a:	10 9a       	mov	r10,r8
8001d78c:	ee 1a 80 00 	eorh	r10,0x8000
8001d790:	30 18       	mov	r8,1
8001d792:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d796:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d79a:	e0 8c 00 04 	brvs	8001d7a2 <clip+0x4e>
8001d79e:	e0 89 00 03 	brgt	8001d7a4 <clip+0x50>
8001d7a2:	30 08       	mov	r8,0
8001d7a4:	5c 58       	castu.b	r8
8001d7a6:	c0 60       	breq	8001d7b2 <clip+0x5e>
8001d7a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d7ac:	ee 18 80 00 	eorh	r8,0x8000
8001d7b0:	c0 38       	rjmp	8001d7b6 <clip+0x62>
	return input_value;
8001d7b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d7b6:	10 9c       	mov	r12,r8
8001d7b8:	2f ed       	sub	sp,-8
8001d7ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d7be <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001d7be:	eb cd 40 c0 	pushm	r6-r7,lr
8001d7c2:	1a 97       	mov	r7,sp
8001d7c4:	20 6d       	sub	sp,24
8001d7c6:	49 f6       	lddpc	r6,8001d840 <interpolate+0x82>
8001d7c8:	1e 26       	rsub	r6,pc
8001d7ca:	ef 4c ff f8 	st.w	r7[-8],r12
8001d7ce:	ef 4b ff f4 	st.w	r7[-12],r11
8001d7d2:	ef 4a ff f0 	st.w	r7[-16],r10
8001d7d6:	ef 49 ff ec 	st.w	r7[-20],r9
8001d7da:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001d7de:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d7e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d7e6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001d7ea:	c0 41       	brne	8001d7f2 <interpolate+0x34>
	{
		return y1;
8001d7ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d7f0:	c2 38       	rjmp	8001d836 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001d7f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d7f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d7fa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d7fe:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d802:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d806:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001d80a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d80e:	ee fa ff f0 	ld.w	r10,r7[-16]
8001d812:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d816:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d81a:	12 9b       	mov	r11,r9
8001d81c:	10 9c       	mov	r12,r8
8001d81e:	f0 16 00 08 	mcall	r6[32]
8001d822:	18 98       	mov	r8,r12
8001d824:	10 99       	mov	r9,r8
8001d826:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d82a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d82e:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001d832:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001d836:	10 9c       	mov	r12,r8
8001d838:	2f ad       	sub	sp,-24
8001d83a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d83e:	00 00       	add	r0,r0
8001d840:	80 01       	ld.sh	r1,r0[0x0]
8001d842:	d6 4c       	*unknown*

8001d844 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001d844:	eb cd 40 c0 	pushm	r6-r7,lr
8001d848:	1a 97       	mov	r7,sp
8001d84a:	20 3d       	sub	sp,12
8001d84c:	49 06       	lddpc	r6,8001d88c <mav_array_memcpy+0x48>
8001d84e:	1e 26       	rsub	r6,pc
8001d850:	ef 4c ff fc 	st.w	r7[-4],r12
8001d854:	ef 4b ff f8 	st.w	r7[-8],r11
8001d858:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001d85c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d860:	58 08       	cp.w	r8,0
8001d862:	c0 91       	brne	8001d874 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001d864:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d868:	30 0b       	mov	r11,0
8001d86a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d86e:	f0 16 00 2f 	mcall	r6[188]
8001d872:	c0 98       	rjmp	8001d884 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001d874:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d878:	ee fb ff f8 	ld.w	r11,r7[-8]
8001d87c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d880:	f0 16 00 1e 	mcall	r6[120]
	}
}
8001d884:	2f dd       	sub	sp,-12
8001d886:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d88a:	00 00       	add	r0,r0
8001d88c:	80 01       	ld.sh	r1,r0[0x0]
8001d88e:	d6 d2       	popm	r0-r3,r8-r10,r12,lr

8001d890 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001d890:	eb cd 40 c0 	pushm	r6-r7,lr
8001d894:	1a 97       	mov	r7,sp
8001d896:	20 3d       	sub	sp,12
8001d898:	4b f6       	lddpc	r6,8001d994 <init_simulation+0x104>
8001d89a:	1e 26       	rsub	r6,pc
8001d89c:	ef 4c ff f8 	st.w	r7[-8],r12
8001d8a0:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001d8a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d8a8:	ec f9 08 94 	ld.w	r9,r6[2196]
8001d8ac:	e0 6a 01 94 	mov	r10,404
8001d8b0:	12 9b       	mov	r11,r9
8001d8b2:	10 9c       	mov	r12,r8
8001d8b4:	f0 16 00 1e 	mcall	r6[120]
	for (i=0; i<3; i++) {
8001d8b8:	30 08       	mov	r8,0
8001d8ba:	ef 48 ff fc 	st.w	r7[-4],r8
8001d8be:	c2 d8       	rjmp	8001d918 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001d8c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d8c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d8c8:	2f d9       	sub	r9,-3
8001d8ca:	30 0a       	mov	r10,0
8001d8cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001d8d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d8d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d8d8:	30 0a       	mov	r10,0
8001d8da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001d8de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d8e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d8e6:	2f a9       	sub	r9,-6
8001d8e8:	30 0a       	mov	r10,0
8001d8ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001d8ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d8f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d8f6:	2f 79       	sub	r9,-9
8001d8f8:	30 0a       	mov	r10,0
8001d8fa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001d8fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d902:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d906:	2f 19       	sub	r9,-15
8001d908:	30 0a       	mov	r10,0
8001d90a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001d90e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d912:	2f f8       	sub	r8,-1
8001d914:	ef 48 ff fc 	st.w	r7[-4],r8
8001d918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d91c:	58 28       	cp.w	r8,2
8001d91e:	fe 9a ff d1 	brle	8001d8c0 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001d922:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d926:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d92a:	2b 88       	sub	r8,-72
8001d92c:	e0 6a 00 cc 	mov	r10,204
8001d930:	12 9b       	mov	r11,r9
8001d932:	10 9c       	mov	r12,r8
8001d934:	f0 16 00 1e 	mcall	r6[120]

	for (i=0; i<ROTORCOUNT; i++) {
8001d938:	30 08       	mov	r8,0
8001d93a:	ef 48 ff fc 	st.w	r7[-4],r8
8001d93e:	c0 e8       	rjmp	8001d95a <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001d940:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d944:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d948:	2a f9       	sub	r9,-81
8001d94a:	30 0a       	mov	r10,0
8001d94c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001d950:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d954:	2f f8       	sub	r8,-1
8001d956:	ef 48 ff fc 	st.w	r7[-4],r8
8001d95a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d95e:	58 38       	cp.w	r8,3
8001d960:	fe 9a ff f0 	brle	8001d940 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001d964:	f0 16 01 fa 	mcall	r6[2024]
8001d968:	14 98       	mov	r8,r10
8001d96a:	16 99       	mov	r9,r11
8001d96c:	10 9a       	mov	r10,r8
8001d96e:	12 9b       	mov	r11,r9
8001d970:	f0 16 00 76 	mcall	r6[472]
8001d974:	18 99       	mov	r9,r12
8001d976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d97a:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001d97e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d982:	e0 69 d7 0a 	mov	r9,55050
8001d986:	ea 19 3c 23 	orh	r9,0x3c23
8001d98a:	f1 49 01 90 	st.w	r8[400],r9
}
8001d98e:	2f dd       	sub	sp,-12
8001d990:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d994:	80 01       	ld.sh	r1,r0[0x0]
8001d996:	d7 1e       	*unknown*

8001d998 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001d998:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d99c:	1a 97       	mov	r7,sp
8001d99e:	20 6d       	sub	sp,24
8001d9a0:	4e 26       	lddpc	r6,8001db28 <lift_drag_base+0x190>
8001d9a2:	1e 26       	rsub	r6,pc
8001d9a4:	ef 4c ff f4 	st.w	r7[-12],r12
8001d9a8:	ef 4b ff f0 	st.w	r7[-16],r11
8001d9ac:	ef 4a ff ec 	st.w	r7[-20],r10
8001d9b0:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001d9b4:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d9b8:	f0 16 00 03 	mcall	r6[12]
8001d9bc:	30 05       	mov	r5,0
8001d9be:	e0 68 99 9a 	mov	r8,39322
8001d9c2:	ea 18 99 99 	orh	r8,0x9999
8001d9c6:	e0 69 99 99 	mov	r9,39321
8001d9ca:	ea 19 3f b9 	orh	r9,0x3fb9
8001d9ce:	f0 16 00 20 	mcall	r6[128]
8001d9d2:	18 98       	mov	r8,r12
8001d9d4:	58 08       	cp.w	r8,0
8001d9d6:	c0 20       	breq	8001d9da <lift_drag_base+0x42>
8001d9d8:	30 15       	mov	r5,1
8001d9da:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001d9de:	c0 30       	breq	8001d9e4 <lift_drag_base+0x4c>
8001d9e0:	30 08       	mov	r8,0
8001d9e2:	c9 f8       	rjmp	8001db20 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001d9e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d9e8:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d9ec:	10 9c       	mov	r12,r8
8001d9ee:	f0 16 00 03 	mcall	r6[12]
8001d9f2:	e0 68 2d 18 	mov	r8,11544
8001d9f6:	ea 18 54 44 	orh	r8,0x5444
8001d9fa:	e0 69 21 fb 	mov	r9,8699
8001d9fe:	ea 19 40 09 	orh	r9,0x4009
8001da02:	f0 16 00 02 	mcall	r6[8]
8001da06:	14 98       	mov	r8,r10
8001da08:	16 99       	mov	r9,r11
8001da0a:	10 92       	mov	r2,r8
8001da0c:	12 93       	mov	r3,r9
8001da0e:	ee fc ff f0 	ld.w	r12,r7[-16]
8001da12:	f0 16 00 03 	mcall	r6[12]
8001da16:	14 98       	mov	r8,r10
8001da18:	16 99       	mov	r9,r11
8001da1a:	04 9a       	mov	r10,r2
8001da1c:	06 9b       	mov	r11,r3
8001da1e:	f0 16 00 02 	mcall	r6[8]
8001da22:	14 98       	mov	r8,r10
8001da24:	16 99       	mov	r9,r11
8001da26:	10 9a       	mov	r10,r8
8001da28:	12 9b       	mov	r11,r9
8001da2a:	30 08       	mov	r8,0
8001da2c:	fc 19 40 4e 	movh	r9,0x404e
8001da30:	f0 16 00 0c 	mcall	r6[48]
8001da34:	14 98       	mov	r8,r10
8001da36:	16 99       	mov	r9,r11
8001da38:	10 9a       	mov	r10,r8
8001da3a:	12 9b       	mov	r11,r9
8001da3c:	f0 16 00 09 	mcall	r6[36]
8001da40:	18 98       	mov	r8,r12
8001da42:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001da46:	ee fc ff f0 	ld.w	r12,r7[-16]
8001da4a:	f0 16 00 03 	mcall	r6[12]
8001da4e:	30 08       	mov	r8,0
8001da50:	fc 19 40 4e 	movh	r9,0x404e
8001da54:	f0 16 00 0c 	mcall	r6[48]
8001da58:	14 98       	mov	r8,r10
8001da5a:	16 99       	mov	r9,r11
8001da5c:	10 92       	mov	r2,r8
8001da5e:	12 93       	mov	r3,r9
8001da60:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001da64:	f0 f8 01 70 	ld.w	r8,r8[368]
8001da68:	10 9c       	mov	r12,r8
8001da6a:	f0 16 00 03 	mcall	r6[12]
8001da6e:	14 98       	mov	r8,r10
8001da70:	16 99       	mov	r9,r11
8001da72:	04 9a       	mov	r10,r2
8001da74:	06 9b       	mov	r11,r3
8001da76:	f0 16 00 02 	mcall	r6[8]
8001da7a:	14 98       	mov	r8,r10
8001da7c:	16 99       	mov	r9,r11
8001da7e:	10 9a       	mov	r10,r8
8001da80:	12 9b       	mov	r11,r9
8001da82:	f0 16 00 09 	mcall	r6[36]
8001da86:	18 98       	mov	r8,r12
8001da88:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001da8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001da90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001da94:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001da98:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001da9c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001daa0:	10 9c       	mov	r12,r8
8001daa2:	f0 16 00 03 	mcall	r6[12]
8001daa6:	e0 68 33 33 	mov	r8,13107
8001daaa:	ea 18 33 33 	orh	r8,0x3333
8001daae:	e0 69 33 33 	mov	r9,13107
8001dab2:	ea 19 3f e3 	orh	r9,0x3fe3
8001dab6:	f0 16 00 02 	mcall	r6[8]
8001daba:	14 98       	mov	r8,r10
8001dabc:	16 99       	mov	r9,r11
8001dabe:	10 92       	mov	r2,r8
8001dac0:	12 93       	mov	r3,r9
8001dac2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dac6:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001daca:	10 9c       	mov	r12,r8
8001dacc:	f0 16 00 03 	mcall	r6[12]
8001dad0:	14 98       	mov	r8,r10
8001dad2:	16 99       	mov	r9,r11
8001dad4:	04 9a       	mov	r10,r2
8001dad6:	06 9b       	mov	r11,r3
8001dad8:	f0 16 00 02 	mcall	r6[8]
8001dadc:	14 98       	mov	r8,r10
8001dade:	16 99       	mov	r9,r11
8001dae0:	10 92       	mov	r2,r8
8001dae2:	12 93       	mov	r3,r9
8001dae4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001dae8:	ee fc ff e8 	ld.w	r12,r7[-24]
8001daec:	f0 16 00 08 	mcall	r6[32]
8001daf0:	18 98       	mov	r8,r12
8001daf2:	10 9c       	mov	r12,r8
8001daf4:	f0 16 00 03 	mcall	r6[12]
8001daf8:	14 98       	mov	r8,r10
8001dafa:	16 99       	mov	r9,r11
8001dafc:	30 0a       	mov	r10,0
8001dafe:	fc 1b 3f f0 	movh	r11,0x3ff0
8001db02:	f0 16 00 12 	mcall	r6[72]
8001db06:	14 98       	mov	r8,r10
8001db08:	16 99       	mov	r9,r11
8001db0a:	04 9a       	mov	r10,r2
8001db0c:	06 9b       	mov	r11,r3
8001db0e:	f0 16 00 02 	mcall	r6[8]
8001db12:	14 98       	mov	r8,r10
8001db14:	16 99       	mov	r9,r11
8001db16:	10 9a       	mov	r10,r8
8001db18:	12 9b       	mov	r11,r9
8001db1a:	f0 16 00 09 	mcall	r6[36]
8001db1e:	18 98       	mov	r8,r12
}
8001db20:	10 9c       	mov	r12,r8
8001db22:	2f ad       	sub	sp,-24
8001db24:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001db28:	80 01       	ld.sh	r1,r0[0x0]
8001db2a:	d8 26       	*unknown*

8001db2c <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001db2c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001db30:	1a 97       	mov	r7,sp
8001db32:	21 dd       	sub	sp,116
8001db34:	fe f6 04 54 	ld.w	r6,pc[1108]
8001db38:	1e 26       	rsub	r6,pc
8001db3a:	ef 4c ff 90 	st.w	r7[-112],r12
8001db3e:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001db42:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db46:	70 99       	ld.w	r9,r8[0x24]
8001db48:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db4c:	70 98       	ld.w	r8,r8[0x24]
8001db4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001db52:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db56:	70 aa       	ld.w	r10,r8[0x28]
8001db58:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db5c:	70 a8       	ld.w	r8,r8[0x28]
8001db5e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001db62:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db66:	70 ab       	ld.w	r11,r8[0x28]
8001db68:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db6c:	70 a8       	ld.w	r8,r8[0x28]
8001db6e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001db72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001db76:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001db7a:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001db7e:	ee fc ff ec 	ld.w	r12,r7[-20]
8001db82:	f0 16 00 03 	mcall	r6[12]
8001db86:	14 98       	mov	r8,r10
8001db88:	16 99       	mov	r9,r11
8001db8a:	10 9a       	mov	r10,r8
8001db8c:	12 9b       	mov	r11,r9
8001db8e:	f0 16 00 66 	mcall	r6[408]
8001db92:	14 98       	mov	r8,r10
8001db94:	16 99       	mov	r9,r11
8001db96:	10 9a       	mov	r10,r8
8001db98:	12 9b       	mov	r11,r9
8001db9a:	f0 16 00 09 	mcall	r6[36]
8001db9e:	18 98       	mov	r8,r12
8001dba0:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001dba4:	30 08       	mov	r8,0
8001dba6:	ef 48 ff e4 	st.w	r7[-28],r8
8001dbaa:	cb 28       	rjmp	8001dd0e <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001dbac:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001dbb0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dbb4:	a5 68       	lsl	r8,0x4
8001dbb6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001dbba:	f2 08 00 08 	add	r8,r9,r8
8001dbbe:	70 08       	ld.w	r8,r8[0x0]
8001dbc0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001dbc4:	fc 1b 43 fa 	movh	r11,0x43fa
8001dbc8:	10 9c       	mov	r12,r8
8001dbca:	f0 16 00 08 	mcall	r6[32]
8001dbce:	18 98       	mov	r8,r12
8001dbd0:	10 99       	mov	r9,r8
8001dbd2:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dbd6:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001dbda:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dbde:	ea 08 15 02 	lsl	r8,r5,0x2
8001dbe2:	ee 08 00 08 	add	r8,r7,r8
8001dbe6:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001dbea:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dbee:	a3 68       	lsl	r8,0x2
8001dbf0:	ee 08 00 08 	add	r8,r7,r8
8001dbf4:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001dbf8:	30 18       	mov	r8,1
8001dbfa:	30 09       	mov	r9,0
8001dbfc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001dc00:	e0 8c 00 03 	brvs	8001dc06 <forces_from_servos_diag_quad+0xda>
8001dc04:	c0 25       	brlt	8001dc08 <forces_from_servos_diag_quad+0xdc>
8001dc06:	30 08       	mov	r8,0
8001dc08:	5c 58       	castu.b	r8
8001dc0a:	c0 90       	breq	8001dc1c <forces_from_servos_diag_quad+0xf0>
8001dc0c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dc10:	a3 68       	lsl	r8,0x2
8001dc12:	ee 08 00 08 	add	r8,r7,r8
8001dc16:	30 09       	mov	r9,0
8001dc18:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001dc1c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001dc20:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc24:	2a f9       	sub	r9,-81
8001dc26:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001dc2a:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001dc2e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001dc32:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dc36:	a3 68       	lsl	r8,0x2
8001dc38:	ee 08 00 08 	add	r8,r7,r8
8001dc3c:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001dc40:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc44:	f0 f8 01 58 	ld.w	r8,r8[344]
8001dc48:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001dc4c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc50:	2a f9       	sub	r9,-81
8001dc52:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001dc56:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001dc5a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001dc5e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc62:	2a f9       	sub	r9,-81
8001dc64:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001dc68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dc6c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001dc70:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dc74:	f2 f9 01 90 	ld.w	r9,r9[400]
8001dc78:	12 9b       	mov	r11,r9
8001dc7a:	10 9c       	mov	r12,r8
8001dc7c:	f0 16 00 08 	mcall	r6[32]
8001dc80:	18 98       	mov	r8,r12
8001dc82:	10 99       	mov	r9,r8
8001dc84:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dc88:	f0 f8 01 84 	ld.w	r8,r8[388]
8001dc8c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dc90:	ea 08 15 02 	lsl	r8,r5,0x2
8001dc94:	ee 08 00 08 	add	r8,r7,r8
8001dc98:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001dc9c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dca0:	70 b8       	ld.w	r8,r8[0x2c]
8001dca2:	10 99       	mov	r9,r8
8001dca4:	ee 19 80 00 	eorh	r9,0x8000
8001dca8:	ee fa ff e4 	ld.w	r10,r7[-28]
8001dcac:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcb0:	2a fa       	sub	r10,-81
8001dcb2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001dcb6:	ee fa ff ec 	ld.w	r10,r7[-20]
8001dcba:	10 9b       	mov	r11,r8
8001dcbc:	ee fc ff 90 	ld.w	r12,r7[-112]
8001dcc0:	c6 ce       	rcall	8001d998 <lift_drag_base>
8001dcc2:	18 98       	mov	r8,r12
8001dcc4:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001dcc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dccc:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dcd0:	f2 fa 01 64 	ld.w	r10,r9[356]
8001dcd4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dcd8:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dcdc:	a3 68       	lsl	r8,0x2
8001dcde:	ee 08 00 08 	add	r8,r7,r8
8001dce2:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001dce6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dcea:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dcee:	f2 fa 01 60 	ld.w	r10,r9[352]
8001dcf2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dcf6:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dcfa:	a3 68       	lsl	r8,0x2
8001dcfc:	ee 08 00 08 	add	r8,r7,r8
8001dd00:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001dd04:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dd08:	2f f8       	sub	r8,-1
8001dd0a:	ef 48 ff e4 	st.w	r7[-28],r8
8001dd0e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dd12:	58 38       	cp.w	r8,3
8001dd14:	fe 9a ff 4c 	brle	8001dbac <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001dd18:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd1c:	f0 f8 01 88 	ld.w	r8,r8[392]
8001dd20:	10 9c       	mov	r12,r8
8001dd22:	f0 16 00 03 	mcall	r6[12]
8001dd26:	e0 68 0d 1b 	mov	r8,3355
8001dd2a:	ea 18 2d e0 	orh	r8,0x2de0
8001dd2e:	e0 69 a0 90 	mov	r9,41104
8001dd32:	ea 19 3f f6 	orh	r9,0x3ff6
8001dd36:	f0 16 00 0c 	mcall	r6[48]
8001dd3a:	14 98       	mov	r8,r10
8001dd3c:	16 99       	mov	r9,r11
8001dd3e:	10 9a       	mov	r10,r8
8001dd40:	12 9b       	mov	r11,r9
8001dd42:	f0 16 00 09 	mcall	r6[36]
8001dd46:	18 98       	mov	r8,r12
8001dd48:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001dd4c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd50:	f0 f8 01 88 	ld.w	r8,r8[392]
8001dd54:	10 9c       	mov	r12,r8
8001dd56:	f0 16 00 03 	mcall	r6[12]
8001dd5a:	e0 68 0d 1b 	mov	r8,3355
8001dd5e:	ea 18 2d e0 	orh	r8,0x2de0
8001dd62:	e0 69 a0 90 	mov	r9,41104
8001dd66:	ea 19 3f f6 	orh	r9,0x3ff6
8001dd6a:	f0 16 00 0c 	mcall	r6[48]
8001dd6e:	14 98       	mov	r8,r10
8001dd70:	16 99       	mov	r9,r11
8001dd72:	10 9a       	mov	r10,r8
8001dd74:	12 9b       	mov	r11,r9
8001dd76:	f0 16 00 09 	mcall	r6[36]
8001dd7a:	18 98       	mov	r8,r12
8001dd7c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001dd80:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001dd84:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001dd88:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001dd8c:	ee fa ff c8 	ld.w	r10,r7[-56]
8001dd90:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dd94:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001dd98:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dd9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dda0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dda4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dda8:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001ddaa:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001ddae:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001ddb2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001ddb6:	ee fa ff d0 	ld.w	r10,r7[-48]
8001ddba:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001ddbe:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001ddc2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ddc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ddca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ddce:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ddd2:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001ddd4:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001ddd8:	10 9c       	mov	r12,r8
8001ddda:	f0 16 00 03 	mcall	r6[12]
8001ddde:	30 08       	mov	r8,0
8001dde0:	fc 19 40 24 	movh	r9,0x4024
8001dde4:	f0 16 00 02 	mcall	r6[8]
8001dde8:	14 98       	mov	r8,r10
8001ddea:	16 99       	mov	r9,r11
8001ddec:	10 92       	mov	r2,r8
8001ddee:	12 93       	mov	r3,r9
8001ddf0:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001ddf4:	10 9c       	mov	r12,r8
8001ddf6:	f0 16 00 03 	mcall	r6[12]
8001ddfa:	14 98       	mov	r8,r10
8001ddfc:	16 99       	mov	r9,r11
8001ddfe:	04 9a       	mov	r10,r2
8001de00:	06 9b       	mov	r11,r3
8001de02:	f0 16 00 05 	mcall	r6[20]
8001de06:	14 98       	mov	r8,r10
8001de08:	16 99       	mov	r9,r11
8001de0a:	10 92       	mov	r2,r8
8001de0c:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001de0e:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001de12:	10 9c       	mov	r12,r8
8001de14:	f0 16 00 03 	mcall	r6[12]
8001de18:	30 08       	mov	r8,0
8001de1a:	fc 19 40 24 	movh	r9,0x4024
8001de1e:	f0 16 00 02 	mcall	r6[8]
8001de22:	14 98       	mov	r8,r10
8001de24:	16 99       	mov	r9,r11
8001de26:	10 90       	mov	r0,r8
8001de28:	12 91       	mov	r1,r9
8001de2a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001de2e:	10 9c       	mov	r12,r8
8001de30:	f0 16 00 03 	mcall	r6[12]
8001de34:	14 98       	mov	r8,r10
8001de36:	16 99       	mov	r9,r11
8001de38:	00 9a       	mov	r10,r0
8001de3a:	02 9b       	mov	r11,r1
8001de3c:	f0 16 00 05 	mcall	r6[20]
8001de40:	14 98       	mov	r8,r10
8001de42:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001de44:	04 9a       	mov	r10,r2
8001de46:	06 9b       	mov	r11,r3
8001de48:	f0 16 00 12 	mcall	r6[72]
8001de4c:	14 98       	mov	r8,r10
8001de4e:	16 99       	mov	r9,r11
8001de50:	10 92       	mov	r2,r8
8001de52:	12 93       	mov	r3,r9
8001de54:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001de58:	10 9c       	mov	r12,r8
8001de5a:	f0 16 00 03 	mcall	r6[12]
8001de5e:	30 08       	mov	r8,0
8001de60:	fc 19 40 24 	movh	r9,0x4024
8001de64:	f0 16 00 02 	mcall	r6[8]
8001de68:	14 98       	mov	r8,r10
8001de6a:	16 99       	mov	r9,r11
8001de6c:	10 90       	mov	r0,r8
8001de6e:	12 91       	mov	r1,r9
8001de70:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001de74:	10 9c       	mov	r12,r8
8001de76:	f0 16 00 03 	mcall	r6[12]
8001de7a:	14 98       	mov	r8,r10
8001de7c:	16 99       	mov	r9,r11
8001de7e:	00 9a       	mov	r10,r0
8001de80:	02 9b       	mov	r11,r1
8001de82:	f0 16 00 05 	mcall	r6[20]
8001de86:	14 98       	mov	r8,r10
8001de88:	16 99       	mov	r9,r11
8001de8a:	04 9a       	mov	r10,r2
8001de8c:	06 9b       	mov	r11,r3
8001de8e:	f0 16 00 05 	mcall	r6[20]
8001de92:	14 98       	mov	r8,r10
8001de94:	16 99       	mov	r9,r11
8001de96:	10 92       	mov	r2,r8
8001de98:	12 93       	mov	r3,r9
8001de9a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001de9e:	10 9c       	mov	r12,r8
8001dea0:	f0 16 00 03 	mcall	r6[12]
8001dea4:	30 08       	mov	r8,0
8001dea6:	fc 19 40 24 	movh	r9,0x4024
8001deaa:	f0 16 00 02 	mcall	r6[8]
8001deae:	14 98       	mov	r8,r10
8001deb0:	16 99       	mov	r9,r11
8001deb2:	10 90       	mov	r0,r8
8001deb4:	12 91       	mov	r1,r9
8001deb6:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001deba:	10 9c       	mov	r12,r8
8001debc:	f0 16 00 03 	mcall	r6[12]
8001dec0:	14 98       	mov	r8,r10
8001dec2:	16 99       	mov	r9,r11
8001dec4:	00 9a       	mov	r10,r0
8001dec6:	02 9b       	mov	r11,r1
8001dec8:	f0 16 00 05 	mcall	r6[20]
8001decc:	14 98       	mov	r8,r10
8001dece:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001ded0:	04 9a       	mov	r10,r2
8001ded2:	06 9b       	mov	r11,r3
8001ded4:	f0 16 00 12 	mcall	r6[72]
8001ded8:	14 98       	mov	r8,r10
8001deda:	16 99       	mov	r9,r11
8001dedc:	10 92       	mov	r2,r8
8001dede:	12 93       	mov	r3,r9
8001dee0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dee4:	f0 f8 01 68 	ld.w	r8,r8[360]
8001dee8:	10 9c       	mov	r12,r8
8001deea:	f0 16 00 03 	mcall	r6[12]
8001deee:	14 98       	mov	r8,r10
8001def0:	16 99       	mov	r9,r11
8001def2:	04 9a       	mov	r10,r2
8001def4:	06 9b       	mov	r11,r3
8001def6:	f0 16 00 02 	mcall	r6[8]
8001defa:	14 98       	mov	r8,r10
8001defc:	16 99       	mov	r9,r11
8001defe:	10 9a       	mov	r10,r8
8001df00:	12 9b       	mov	r11,r9
8001df02:	f0 16 00 09 	mcall	r6[36]
8001df06:	18 99       	mov	r9,r12
8001df08:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df0c:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001df0e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df12:	70 98       	ld.w	r8,r8[0x24]
8001df14:	10 99       	mov	r9,r8
8001df16:	ee 19 80 00 	eorh	r9,0x8000
8001df1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001df1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df22:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df26:	f0 f8 01 78 	ld.w	r8,r8[376]
8001df2a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df2e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df32:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001df34:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df38:	70 a8       	ld.w	r8,r8[0x28]
8001df3a:	10 99       	mov	r9,r8
8001df3c:	ee 19 80 00 	eorh	r9,0x8000
8001df40:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001df44:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df48:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df4c:	f0 f8 01 78 	ld.w	r8,r8[376]
8001df50:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df54:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df58:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001df5a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001df5e:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001df62:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001df66:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001df6a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001df6e:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001df72:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001df76:	10 99       	mov	r9,r8
8001df78:	ee 19 80 00 	eorh	r9,0x8000
8001df7c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df80:	91 89       	st.w	r8[0x20],r9

}
8001df82:	2e 3d       	sub	sp,-116
8001df84:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001df88:	80 01       	ld.sh	r1,r0[0x0]
8001df8a:	d9 bc       	*unknown*

8001df8c <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001df8c:	eb cd 40 80 	pushm	r7,lr
8001df90:	1a 97       	mov	r7,sp
8001df92:	20 7d       	sub	sp,28
8001df94:	ef 4c ff e8 	st.w	r7[-24],r12
8001df98:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001df9c:	2f 9d       	sub	sp,-28
8001df9e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001dfa2 <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001dfa2:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001dfa6:	1a 97       	mov	r7,sp
8001dfa8:	21 fd       	sub	sp,124
8001dfaa:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001dfae:	1e 26       	rsub	r6,pc
8001dfb0:	ef 4c ff a0 	st.w	r7[-96],r12
8001dfb4:	ef 4b ff 9c 	st.w	r7[-100],r11
8001dfb8:	ef 4a ff 98 	st.w	r7[-104],r10
8001dfbc:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001dfc0:	30 08       	mov	r8,0
8001dfc2:	ef 48 ff b4 	st.w	r7[-76],r8
8001dfc6:	fc 18 3f 80 	movh	r8,0x3f80
8001dfca:	ef 48 ff b8 	st.w	r7[-72],r8
8001dfce:	30 08       	mov	r8,0
8001dfd0:	ef 48 ff bc 	st.w	r7[-68],r8
8001dfd4:	30 08       	mov	r8,0
8001dfd6:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001dfda:	30 08       	mov	r8,0
8001dfdc:	ef 48 ff a4 	st.w	r7[-92],r8
8001dfe0:	30 08       	mov	r8,0
8001dfe2:	ef 48 ff a8 	st.w	r7[-88],r8
8001dfe6:	30 08       	mov	r8,0
8001dfe8:	ef 48 ff ac 	st.w	r7[-84],r8
8001dfec:	fc 18 bf 80 	movh	r8,0xbf80
8001dff0:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001dff4:	f0 16 00 27 	mcall	r6[156]
8001dff8:	18 98       	mov	r8,r12
8001dffa:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001dffe:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e002:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001e006:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e00a:	f2 08 01 08 	sub	r8,r9,r8
8001e00e:	10 9c       	mov	r12,r8
8001e010:	f0 16 00 4e 	mcall	r6[312]
8001e014:	30 08       	mov	r8,0
8001e016:	e0 69 84 80 	mov	r9,33920
8001e01a:	ea 19 41 2e 	orh	r9,0x412e
8001e01e:	f0 16 00 0c 	mcall	r6[48]
8001e022:	14 98       	mov	r8,r10
8001e024:	16 99       	mov	r9,r11
8001e026:	10 9a       	mov	r10,r8
8001e028:	12 9b       	mov	r11,r9
8001e02a:	f0 16 00 09 	mcall	r6[36]
8001e02e:	18 99       	mov	r9,r12
8001e030:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e034:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001e038:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e03c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e040:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001e044:	f0 16 00 31 	mcall	r6[196]
8001e048:	18 98       	mov	r8,r12
8001e04a:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001e04e:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001e052:	ee fc ff a0 	ld.w	r12,r7[-96]
8001e056:	f0 16 01 df 	mcall	r6[1916]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001e05a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e05e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e062:	10 9c       	mov	r12,r8
8001e064:	f0 16 00 03 	mcall	r6[12]
8001e068:	e0 68 99 9a 	mov	r8,39322
8001e06c:	ea 18 99 99 	orh	r8,0x9999
8001e070:	e0 69 99 99 	mov	r9,39321
8001e074:	ea 19 bf b9 	orh	r9,0xbfb9
8001e078:	f0 16 00 02 	mcall	r6[8]
8001e07c:	14 98       	mov	r8,r10
8001e07e:	16 99       	mov	r9,r11
8001e080:	10 9a       	mov	r10,r8
8001e082:	12 9b       	mov	r11,r9
8001e084:	30 08       	mov	r8,0
8001e086:	fc 19 3f f0 	movh	r9,0x3ff0
8001e08a:	f0 16 00 05 	mcall	r6[20]
8001e08e:	14 98       	mov	r8,r10
8001e090:	16 99       	mov	r9,r11
8001e092:	10 92       	mov	r2,r8
8001e094:	12 93       	mov	r3,r9
8001e096:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e09a:	70 38       	ld.w	r8,r8[0xc]
8001e09c:	10 9c       	mov	r12,r8
8001e09e:	f0 16 00 03 	mcall	r6[12]
8001e0a2:	14 98       	mov	r8,r10
8001e0a4:	16 99       	mov	r9,r11
8001e0a6:	04 9a       	mov	r10,r2
8001e0a8:	06 9b       	mov	r11,r3
8001e0aa:	f0 16 00 02 	mcall	r6[8]
8001e0ae:	14 98       	mov	r8,r10
8001e0b0:	16 99       	mov	r9,r11
8001e0b2:	10 92       	mov	r2,r8
8001e0b4:	12 93       	mov	r3,r9
8001e0b6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0ba:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e0be:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0c2:	70 08       	ld.w	r8,r8[0x0]
8001e0c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e0c8:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e0cc:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001e0d0:	12 9b       	mov	r11,r9
8001e0d2:	10 9c       	mov	r12,r8
8001e0d4:	f0 16 00 08 	mcall	r6[32]
8001e0d8:	18 98       	mov	r8,r12
8001e0da:	10 9c       	mov	r12,r8
8001e0dc:	f0 16 00 03 	mcall	r6[12]
8001e0e0:	14 98       	mov	r8,r10
8001e0e2:	16 99       	mov	r9,r11
8001e0e4:	04 9a       	mov	r10,r2
8001e0e6:	06 9b       	mov	r11,r3
8001e0e8:	f0 16 00 05 	mcall	r6[20]
8001e0ec:	14 98       	mov	r8,r10
8001e0ee:	16 99       	mov	r9,r11
8001e0f0:	10 9a       	mov	r10,r8
8001e0f2:	12 9b       	mov	r11,r9
8001e0f4:	f0 16 00 09 	mcall	r6[36]
8001e0f8:	18 98       	mov	r8,r12
8001e0fa:	fc 1b 41 20 	movh	r11,0x4120
8001e0fe:	10 9c       	mov	r12,r8
8001e100:	fe b0 fb 2a 	rcall	8001d754 <clip>
8001e104:	18 99       	mov	r9,r12
8001e106:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e10a:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001e10c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e110:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e114:	10 9c       	mov	r12,r8
8001e116:	f0 16 00 03 	mcall	r6[12]
8001e11a:	e0 68 99 9a 	mov	r8,39322
8001e11e:	ea 18 99 99 	orh	r8,0x9999
8001e122:	e0 69 99 99 	mov	r9,39321
8001e126:	ea 19 bf b9 	orh	r9,0xbfb9
8001e12a:	f0 16 00 02 	mcall	r6[8]
8001e12e:	14 98       	mov	r8,r10
8001e130:	16 99       	mov	r9,r11
8001e132:	10 9a       	mov	r10,r8
8001e134:	12 9b       	mov	r11,r9
8001e136:	30 08       	mov	r8,0
8001e138:	fc 19 3f f0 	movh	r9,0x3ff0
8001e13c:	f0 16 00 05 	mcall	r6[20]
8001e140:	14 98       	mov	r8,r10
8001e142:	16 99       	mov	r9,r11
8001e144:	10 92       	mov	r2,r8
8001e146:	12 93       	mov	r3,r9
8001e148:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e14c:	70 48       	ld.w	r8,r8[0x10]
8001e14e:	10 9c       	mov	r12,r8
8001e150:	f0 16 00 03 	mcall	r6[12]
8001e154:	14 98       	mov	r8,r10
8001e156:	16 99       	mov	r9,r11
8001e158:	04 9a       	mov	r10,r2
8001e15a:	06 9b       	mov	r11,r3
8001e15c:	f0 16 00 02 	mcall	r6[8]
8001e160:	14 98       	mov	r8,r10
8001e162:	16 99       	mov	r9,r11
8001e164:	10 92       	mov	r2,r8
8001e166:	12 93       	mov	r3,r9
8001e168:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e16c:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e170:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e174:	70 18       	ld.w	r8,r8[0x4]
8001e176:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e17a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e17e:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001e182:	12 9b       	mov	r11,r9
8001e184:	10 9c       	mov	r12,r8
8001e186:	f0 16 00 08 	mcall	r6[32]
8001e18a:	18 98       	mov	r8,r12
8001e18c:	10 9c       	mov	r12,r8
8001e18e:	f0 16 00 03 	mcall	r6[12]
8001e192:	14 98       	mov	r8,r10
8001e194:	16 99       	mov	r9,r11
8001e196:	04 9a       	mov	r10,r2
8001e198:	06 9b       	mov	r11,r3
8001e19a:	f0 16 00 05 	mcall	r6[20]
8001e19e:	14 98       	mov	r8,r10
8001e1a0:	16 99       	mov	r9,r11
8001e1a2:	10 9a       	mov	r10,r8
8001e1a4:	12 9b       	mov	r11,r9
8001e1a6:	f0 16 00 09 	mcall	r6[36]
8001e1aa:	18 98       	mov	r8,r12
8001e1ac:	fc 1b 41 20 	movh	r11,0x4120
8001e1b0:	10 9c       	mov	r12,r8
8001e1b2:	fe b0 fa d1 	rcall	8001d754 <clip>
8001e1b6:	18 99       	mov	r9,r12
8001e1b8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e1bc:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001e1be:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e1c2:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e1c6:	10 9c       	mov	r12,r8
8001e1c8:	f0 16 00 03 	mcall	r6[12]
8001e1cc:	e0 68 99 9a 	mov	r8,39322
8001e1d0:	ea 18 99 99 	orh	r8,0x9999
8001e1d4:	e0 69 99 99 	mov	r9,39321
8001e1d8:	ea 19 bf b9 	orh	r9,0xbfb9
8001e1dc:	f0 16 00 02 	mcall	r6[8]
8001e1e0:	14 98       	mov	r8,r10
8001e1e2:	16 99       	mov	r9,r11
8001e1e4:	10 9a       	mov	r10,r8
8001e1e6:	12 9b       	mov	r11,r9
8001e1e8:	30 08       	mov	r8,0
8001e1ea:	fc 19 3f f0 	movh	r9,0x3ff0
8001e1ee:	f0 16 00 05 	mcall	r6[20]
8001e1f2:	14 98       	mov	r8,r10
8001e1f4:	16 99       	mov	r9,r11
8001e1f6:	10 92       	mov	r2,r8
8001e1f8:	12 93       	mov	r3,r9
8001e1fa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e1fe:	70 58       	ld.w	r8,r8[0x14]
8001e200:	10 9c       	mov	r12,r8
8001e202:	f0 16 00 03 	mcall	r6[12]
8001e206:	14 98       	mov	r8,r10
8001e208:	16 99       	mov	r9,r11
8001e20a:	04 9a       	mov	r10,r2
8001e20c:	06 9b       	mov	r11,r3
8001e20e:	f0 16 00 02 	mcall	r6[8]
8001e212:	14 98       	mov	r8,r10
8001e214:	16 99       	mov	r9,r11
8001e216:	10 92       	mov	r2,r8
8001e218:	12 93       	mov	r3,r9
8001e21a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e21e:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e222:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e226:	70 28       	ld.w	r8,r8[0x8]
8001e228:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e22c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e230:	f2 f9 01 80 	ld.w	r9,r9[384]
8001e234:	12 9b       	mov	r11,r9
8001e236:	10 9c       	mov	r12,r8
8001e238:	f0 16 00 08 	mcall	r6[32]
8001e23c:	18 98       	mov	r8,r12
8001e23e:	10 9c       	mov	r12,r8
8001e240:	f0 16 00 03 	mcall	r6[12]
8001e244:	14 98       	mov	r8,r10
8001e246:	16 99       	mov	r9,r11
8001e248:	04 9a       	mov	r10,r2
8001e24a:	06 9b       	mov	r11,r3
8001e24c:	f0 16 00 05 	mcall	r6[20]
8001e250:	14 98       	mov	r8,r10
8001e252:	16 99       	mov	r9,r11
8001e254:	10 9a       	mov	r10,r8
8001e256:	12 9b       	mov	r11,r9
8001e258:	f0 16 00 09 	mcall	r6[36]
8001e25c:	18 98       	mov	r8,r12
8001e25e:	fc 1b 41 20 	movh	r11,0x4120
8001e262:	10 9c       	mov	r12,r8
8001e264:	fe b0 fa 78 	rcall	8001d754 <clip>
8001e268:	18 99       	mov	r9,r12
8001e26a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e26e:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001e270:	30 08       	mov	r8,0
8001e272:	ef 48 ff f4 	st.w	r7[-12],r8
8001e276:	c1 58       	rjmp	8001e2a0 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001e278:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e27c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e280:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e284:	2f da       	sub	r10,-3
8001e286:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e28a:	2f f8       	sub	r8,-1
8001e28c:	a3 68       	lsl	r8,0x2
8001e28e:	ee 08 00 08 	add	r8,r7,r8
8001e292:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001e296:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e29a:	2f f8       	sub	r8,-1
8001e29c:	ef 48 ff f4 	st.w	r7[-12],r8
8001e2a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e2a4:	58 28       	cp.w	r8,2
8001e2a6:	fe 9a ff e9 	brle	8001e278 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001e2aa:	30 08       	mov	r8,0
8001e2ac:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001e2b0:	ee ca 00 3c 	sub	r10,r7,60
8001e2b4:	20 4d       	sub	sp,16
8001e2b6:	1a 98       	mov	r8,sp
8001e2b8:	ee c9 00 1c 	sub	r9,r7,28
8001e2bc:	20 08       	sub	r8,0
8001e2be:	20 09       	sub	r9,0
8001e2c0:	72 0b       	ld.w	r11,r9[0x0]
8001e2c2:	91 0b       	st.w	r8[0x0],r11
8001e2c4:	72 1b       	ld.w	r11,r9[0x4]
8001e2c6:	91 1b       	st.w	r8[0x4],r11
8001e2c8:	72 2b       	ld.w	r11,r9[0x8]
8001e2ca:	91 2b       	st.w	r8[0x8],r11
8001e2cc:	72 39       	ld.w	r9,r9[0xc]
8001e2ce:	91 39       	st.w	r8[0xc],r9
8001e2d0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e2d4:	20 4d       	sub	sp,16
8001e2d6:	1a 98       	mov	r8,sp
8001e2d8:	2b 89       	sub	r9,-72
8001e2da:	20 08       	sub	r8,0
8001e2dc:	20 09       	sub	r9,0
8001e2de:	72 0b       	ld.w	r11,r9[0x0]
8001e2e0:	91 0b       	st.w	r8[0x0],r11
8001e2e2:	72 1b       	ld.w	r11,r9[0x4]
8001e2e4:	91 1b       	st.w	r8[0x4],r11
8001e2e6:	72 2b       	ld.w	r11,r9[0x8]
8001e2e8:	91 2b       	st.w	r8[0x8],r11
8001e2ea:	72 39       	ld.w	r9,r9[0xc]
8001e2ec:	91 39       	st.w	r8[0xc],r9
8001e2ee:	14 9c       	mov	r12,r10
8001e2f0:	fe b0 f7 90 	rcall	8001d210 <quat_multi>
8001e2f4:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001e2f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2fa:	71 29       	ld.w	r9,r8[0x48]
8001e2fc:	ee fa ff c4 	ld.w	r10,r7[-60]
8001e300:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e304:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e308:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e30c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e310:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e314:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001e318:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e31c:	71 39       	ld.w	r9,r8[0x4c]
8001e31e:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e322:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e326:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e32a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e32e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e332:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e336:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001e33a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e33e:	71 49       	ld.w	r9,r8[0x50]
8001e340:	ee fa ff cc 	ld.w	r10,r7[-52]
8001e344:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e348:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e34c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e350:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e354:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e358:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001e35c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e360:	71 59       	ld.w	r9,r8[0x54]
8001e362:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e366:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e36a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e36e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e372:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e376:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e37a:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001e37e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e382:	ee ca 00 7c 	sub	r10,r7,124
8001e386:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e38a:	20 4d       	sub	sp,16
8001e38c:	1a 98       	mov	r8,sp
8001e38e:	2b 89       	sub	r9,-72
8001e390:	20 08       	sub	r8,0
8001e392:	20 09       	sub	r9,0
8001e394:	72 0b       	ld.w	r11,r9[0x0]
8001e396:	91 0b       	st.w	r8[0x0],r11
8001e398:	72 1b       	ld.w	r11,r9[0x4]
8001e39a:	91 1b       	st.w	r8[0x4],r11
8001e39c:	72 2b       	ld.w	r11,r9[0x8]
8001e39e:	91 2b       	st.w	r8[0x8],r11
8001e3a0:	72 39       	ld.w	r9,r9[0xc]
8001e3a2:	91 39       	st.w	r8[0xc],r9
8001e3a4:	14 9c       	mov	r12,r10
8001e3a6:	fe b0 f9 53 	rcall	8001d64c <quat_normalise>
8001e3aa:	2f cd       	sub	sp,-16
8001e3ac:	ea c8 ff b8 	sub	r8,r5,-72
8001e3b0:	ee c9 00 7c 	sub	r9,r7,124
8001e3b4:	20 08       	sub	r8,0
8001e3b6:	20 09       	sub	r9,0
8001e3b8:	72 0a       	ld.w	r10,r9[0x0]
8001e3ba:	91 0a       	st.w	r8[0x0],r10
8001e3bc:	72 1a       	ld.w	r10,r9[0x4]
8001e3be:	91 1a       	st.w	r8[0x4],r10
8001e3c0:	72 2a       	ld.w	r10,r9[0x8]
8001e3c2:	91 2a       	st.w	r8[0x8],r10
8001e3c4:	72 39       	ld.w	r9,r9[0xc]
8001e3c6:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001e3c8:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e3cc:	ee ca 00 7c 	sub	r10,r7,124
8001e3d0:	20 4d       	sub	sp,16
8001e3d2:	1a 98       	mov	r8,sp
8001e3d4:	ee c9 00 5c 	sub	r9,r7,92
8001e3d8:	20 08       	sub	r8,0
8001e3da:	20 09       	sub	r9,0
8001e3dc:	72 0b       	ld.w	r11,r9[0x0]
8001e3de:	91 0b       	st.w	r8[0x0],r11
8001e3e0:	72 1b       	ld.w	r11,r9[0x4]
8001e3e2:	91 1b       	st.w	r8[0x4],r11
8001e3e4:	72 2b       	ld.w	r11,r9[0x8]
8001e3e6:	91 2b       	st.w	r8[0x8],r11
8001e3e8:	72 39       	ld.w	r9,r9[0xc]
8001e3ea:	91 39       	st.w	r8[0xc],r9
8001e3ec:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e3f0:	20 4d       	sub	sp,16
8001e3f2:	1a 98       	mov	r8,sp
8001e3f4:	2b 89       	sub	r9,-72
8001e3f6:	20 08       	sub	r8,0
8001e3f8:	20 09       	sub	r9,0
8001e3fa:	72 0b       	ld.w	r11,r9[0x0]
8001e3fc:	91 0b       	st.w	r8[0x0],r11
8001e3fe:	72 1b       	ld.w	r11,r9[0x4]
8001e400:	91 1b       	st.w	r8[0x4],r11
8001e402:	72 2b       	ld.w	r11,r9[0x8]
8001e404:	91 2b       	st.w	r8[0x8],r11
8001e406:	72 39       	ld.w	r9,r9[0xc]
8001e408:	91 39       	st.w	r8[0xc],r9
8001e40a:	14 9c       	mov	r12,r10
8001e40c:	fe b0 f7 ba 	rcall	8001d380 <quat_global_to_local>
8001e410:	2f 8d       	sub	sp,-32
8001e412:	ea c8 ff a8 	sub	r8,r5,-88
8001e416:	ee c9 00 7c 	sub	r9,r7,124
8001e41a:	20 08       	sub	r8,0
8001e41c:	20 09       	sub	r9,0
8001e41e:	72 0a       	ld.w	r10,r9[0x0]
8001e420:	91 0a       	st.w	r8[0x0],r10
8001e422:	72 1a       	ld.w	r10,r9[0x4]
8001e424:	91 1a       	st.w	r8[0x4],r10
8001e426:	72 2a       	ld.w	r10,r9[0x8]
8001e428:	91 2a       	st.w	r8[0x8],r10
8001e42a:	72 39       	ld.w	r9,r9[0xc]
8001e42c:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001e42e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e432:	ee ca 00 7c 	sub	r10,r7,124
8001e436:	20 4d       	sub	sp,16
8001e438:	1a 98       	mov	r8,sp
8001e43a:	ee c9 00 4c 	sub	r9,r7,76
8001e43e:	20 08       	sub	r8,0
8001e440:	20 09       	sub	r9,0
8001e442:	72 0b       	ld.w	r11,r9[0x0]
8001e444:	91 0b       	st.w	r8[0x0],r11
8001e446:	72 1b       	ld.w	r11,r9[0x4]
8001e448:	91 1b       	st.w	r8[0x4],r11
8001e44a:	72 2b       	ld.w	r11,r9[0x8]
8001e44c:	91 2b       	st.w	r8[0x8],r11
8001e44e:	72 39       	ld.w	r9,r9[0xc]
8001e450:	91 39       	st.w	r8[0xc],r9
8001e452:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e456:	20 4d       	sub	sp,16
8001e458:	1a 98       	mov	r8,sp
8001e45a:	2b 89       	sub	r9,-72
8001e45c:	20 08       	sub	r8,0
8001e45e:	20 09       	sub	r9,0
8001e460:	72 0b       	ld.w	r11,r9[0x0]
8001e462:	91 0b       	st.w	r8[0x0],r11
8001e464:	72 1b       	ld.w	r11,r9[0x4]
8001e466:	91 1b       	st.w	r8[0x4],r11
8001e468:	72 2b       	ld.w	r11,r9[0x8]
8001e46a:	91 2b       	st.w	r8[0x8],r11
8001e46c:	72 39       	ld.w	r9,r9[0xc]
8001e46e:	91 39       	st.w	r8[0xc],r9
8001e470:	14 9c       	mov	r12,r10
8001e472:	fe b0 f7 87 	rcall	8001d380 <quat_global_to_local>
8001e476:	2f 8d       	sub	sp,-32
8001e478:	ea c8 ff 98 	sub	r8,r5,-104
8001e47c:	ee c9 00 7c 	sub	r9,r7,124
8001e480:	20 08       	sub	r8,0
8001e482:	20 09       	sub	r9,0
8001e484:	72 0a       	ld.w	r10,r9[0x0]
8001e486:	91 0a       	st.w	r8[0x0],r10
8001e488:	72 1a       	ld.w	r10,r9[0x4]
8001e48a:	91 1a       	st.w	r8[0x4],r10
8001e48c:	72 2a       	ld.w	r10,r9[0x8]
8001e48e:	91 2a       	st.w	r8[0x8],r10
8001e490:	72 39       	ld.w	r9,r9[0xc]
8001e492:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001e494:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e498:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001e49c:	30 18       	mov	r8,1
8001e49e:	30 09       	mov	r9,0
8001e4a0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e4a4:	e0 8c 00 04 	brvs	8001e4ac <simu_update+0x50a>
8001e4a8:	e0 89 00 03 	brgt	8001e4ae <simu_update+0x50c>
8001e4ac:	30 08       	mov	r8,0
8001e4ae:	5c 58       	castu.b	r8
8001e4b0:	e0 80 00 85 	breq	8001e5ba <simu_update+0x618>
		sim->vel[Z]=0.0;
8001e4b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4b8:	30 09       	mov	r9,0
8001e4ba:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001e4bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4c0:	30 09       	mov	r9,0
8001e4c2:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e4c6:	30 08       	mov	r8,0
8001e4c8:	ef 48 ff f4 	st.w	r7[-12],r8
8001e4cc:	c4 18       	rjmp	8001e54e <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001e4ce:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e4d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4d6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4da:	2f a9       	sub	r9,-6
8001e4dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e4e0:	10 9c       	mov	r12,r8
8001e4e2:	f0 16 00 03 	mcall	r6[12]
8001e4e6:	14 92       	mov	r2,r10
8001e4e8:	16 93       	mov	r3,r11
8001e4ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4f2:	2e 99       	sub	r9,-23
8001e4f4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e4f8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4fc:	f0 f8 01 74 	ld.w	r8,r8[372]
8001e500:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e504:	10 9c       	mov	r12,r8
8001e506:	f0 16 00 03 	mcall	r6[12]
8001e50a:	e0 68 85 1f 	mov	r8,34079
8001e50e:	ea 18 51 eb 	orh	r8,0x51eb
8001e512:	e0 69 9e b8 	mov	r9,40632
8001e516:	ea 19 40 23 	orh	r9,0x4023
8001e51a:	f0 16 00 02 	mcall	r6[8]
8001e51e:	14 98       	mov	r8,r10
8001e520:	16 99       	mov	r9,r11
8001e522:	04 9a       	mov	r10,r2
8001e524:	06 9b       	mov	r11,r3
8001e526:	f0 16 00 05 	mcall	r6[20]
8001e52a:	14 98       	mov	r8,r10
8001e52c:	16 99       	mov	r9,r11
8001e52e:	10 9a       	mov	r10,r8
8001e530:	12 9b       	mov	r11,r9
8001e532:	f0 16 00 09 	mcall	r6[36]
8001e536:	18 9a       	mov	r10,r12
8001e538:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e53c:	ea c9 ff fa 	sub	r9,r5,-6
8001e540:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e544:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e548:	2f f8       	sub	r8,-1
8001e54a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e54e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e552:	58 28       	cp.w	r8,2
8001e554:	fe 9a ff bd 	brle	8001e4ce <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e558:	30 08       	mov	r8,0
8001e55a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e55e:	c2 98       	rjmp	8001e5b0 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001e560:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e564:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e568:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e56c:	2f 79       	sub	r9,-9
8001e56e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e572:	10 9c       	mov	r12,r8
8001e574:	f0 16 00 03 	mcall	r6[12]
8001e578:	e0 68 66 66 	mov	r8,26214
8001e57c:	ea 18 66 66 	orh	r8,0x6666
8001e580:	e0 69 66 66 	mov	r9,26214
8001e584:	ea 19 3f ee 	orh	r9,0x3fee
8001e588:	f0 16 00 02 	mcall	r6[8]
8001e58c:	14 98       	mov	r8,r10
8001e58e:	16 99       	mov	r9,r11
8001e590:	10 9a       	mov	r10,r8
8001e592:	12 9b       	mov	r11,r9
8001e594:	f0 16 00 09 	mcall	r6[36]
8001e598:	18 9a       	mov	r10,r12
8001e59a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e59e:	ea c9 ff f7 	sub	r9,r5,-9
8001e5a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e5a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e5aa:	2f f8       	sub	r8,-1
8001e5ac:	ef 48 ff f4 	st.w	r7[-12],r8
8001e5b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e5b4:	58 28       	cp.w	r8,2
8001e5b6:	fe 9a ff d5 	brle	8001e560 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e5ba:	30 08       	mov	r8,0
8001e5bc:	ef 48 ff f4 	st.w	r7[-12],r8
8001e5c0:	c1 58       	rjmp	8001e5ea <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001e5c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e5c6:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e5ca:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e5ce:	2f 4a       	sub	r10,-12
8001e5d0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e5d4:	2f f8       	sub	r8,-1
8001e5d6:	a3 68       	lsl	r8,0x2
8001e5d8:	ee 08 00 08 	add	r8,r7,r8
8001e5dc:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e5e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e5e4:	2f f8       	sub	r8,-1
8001e5e6:	ef 48 ff f4 	st.w	r7[-12],r8
8001e5ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e5ee:	58 28       	cp.w	r8,2
8001e5f0:	fe 9a ff e9 	brle	8001e5c2 <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001e5f4:	30 08       	mov	r8,0
8001e5f6:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001e5fa:	ee ca 00 7c 	sub	r10,r7,124
8001e5fe:	20 4d       	sub	sp,16
8001e600:	1a 98       	mov	r8,sp
8001e602:	ee c9 00 1c 	sub	r9,r7,28
8001e606:	20 08       	sub	r8,0
8001e608:	20 09       	sub	r9,0
8001e60a:	72 0b       	ld.w	r11,r9[0x0]
8001e60c:	91 0b       	st.w	r8[0x0],r11
8001e60e:	72 1b       	ld.w	r11,r9[0x4]
8001e610:	91 1b       	st.w	r8[0x4],r11
8001e612:	72 2b       	ld.w	r11,r9[0x8]
8001e614:	91 2b       	st.w	r8[0x8],r11
8001e616:	72 39       	ld.w	r9,r9[0xc]
8001e618:	91 39       	st.w	r8[0xc],r9
8001e61a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e61e:	20 4d       	sub	sp,16
8001e620:	1a 98       	mov	r8,sp
8001e622:	2b 89       	sub	r9,-72
8001e624:	20 08       	sub	r8,0
8001e626:	20 09       	sub	r9,0
8001e628:	72 0b       	ld.w	r11,r9[0x0]
8001e62a:	91 0b       	st.w	r8[0x0],r11
8001e62c:	72 1b       	ld.w	r11,r9[0x4]
8001e62e:	91 1b       	st.w	r8[0x4],r11
8001e630:	72 2b       	ld.w	r11,r9[0x8]
8001e632:	91 2b       	st.w	r8[0x8],r11
8001e634:	72 39       	ld.w	r9,r9[0xc]
8001e636:	91 39       	st.w	r8[0xc],r9
8001e638:	14 9c       	mov	r12,r10
8001e63a:	fe b0 f6 a3 	rcall	8001d380 <quat_global_to_local>
8001e63e:	2f 8d       	sub	sp,-32
8001e640:	ee c8 00 2c 	sub	r8,r7,44
8001e644:	ee c9 00 7c 	sub	r9,r7,124
8001e648:	20 08       	sub	r8,0
8001e64a:	20 09       	sub	r9,0
8001e64c:	72 0a       	ld.w	r10,r9[0x0]
8001e64e:	91 0a       	st.w	r8[0x0],r10
8001e650:	72 1a       	ld.w	r10,r9[0x4]
8001e652:	91 1a       	st.w	r8[0x4],r10
8001e654:	72 2a       	ld.w	r10,r9[0x8]
8001e656:	91 2a       	st.w	r8[0x8],r10
8001e658:	72 39       	ld.w	r9,r9[0xc]
8001e65a:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001e65c:	30 08       	mov	r8,0
8001e65e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e662:	c8 08       	rjmp	8001e762 <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001e664:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e668:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e66c:	2f f8       	sub	r8,-1
8001e66e:	a3 68       	lsl	r8,0x2
8001e670:	ee 08 00 08 	add	r8,r7,r8
8001e674:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001e678:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e67c:	2f 79       	sub	r9,-9
8001e67e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001e682:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e686:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e68a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e68e:	2f a9       	sub	r9,-6
8001e690:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e694:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e698:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e69c:	12 9b       	mov	r11,r9
8001e69e:	10 9c       	mov	r12,r8
8001e6a0:	f0 16 00 08 	mcall	r6[32]
8001e6a4:	18 98       	mov	r8,r12
8001e6a6:	10 9a       	mov	r10,r8
8001e6a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6ac:	ea c9 ff cd 	sub	r9,r5,-51
8001e6b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001e6b4:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e6b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e6bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6c0:	2c d9       	sub	r9,-51
8001e6c2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e6c6:	10 9c       	mov	r12,r8
8001e6c8:	f0 16 00 03 	mcall	r6[12]
8001e6cc:	14 92       	mov	r2,r10
8001e6ce:	16 93       	mov	r3,r11
8001e6d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e6d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6d8:	2e 99       	sub	r9,-23
8001e6da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e6de:	10 9c       	mov	r12,r8
8001e6e0:	f0 16 00 03 	mcall	r6[12]
8001e6e4:	e0 68 85 1f 	mov	r8,34079
8001e6e8:	ea 18 51 eb 	orh	r8,0x51eb
8001e6ec:	e0 69 9e b8 	mov	r9,40632
8001e6f0:	ea 19 c0 23 	orh	r9,0xc023
8001e6f4:	f0 16 00 02 	mcall	r6[8]
8001e6f8:	14 98       	mov	r8,r10
8001e6fa:	16 99       	mov	r9,r11
8001e6fc:	04 9a       	mov	r10,r2
8001e6fe:	06 9b       	mov	r11,r3
8001e700:	f0 16 00 05 	mcall	r6[20]
8001e704:	14 98       	mov	r8,r10
8001e706:	16 99       	mov	r9,r11
8001e708:	10 9a       	mov	r10,r8
8001e70a:	12 9b       	mov	r11,r9
8001e70c:	f0 16 00 09 	mcall	r6[36]
8001e710:	18 9a       	mov	r10,r12
8001e712:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e716:	ea c9 ff be 	sub	r9,r5,-66
8001e71a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001e71e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e722:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e726:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e72a:	2f 7a       	sub	r10,-9
8001e72c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e730:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e734:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e738:	2b eb       	sub	r11,-66
8001e73a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e73e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e742:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e746:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e74a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e74e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e752:	2f 79       	sub	r9,-9
8001e754:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001e758:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e75c:	2f f8       	sub	r8,-1
8001e75e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e762:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e766:	58 28       	cp.w	r8,2
8001e768:	fe 9a ff 7e 	brle	8001e664 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001e76c:	30 08       	mov	r8,0
8001e76e:	ef 48 ff d4 	st.w	r7[-44],r8
8001e772:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e776:	70 98       	ld.w	r8,r8[0x24]
8001e778:	ef 48 ff d8 	st.w	r7[-40],r8
8001e77c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e780:	70 a8       	ld.w	r8,r8[0x28]
8001e782:	ef 48 ff dc 	st.w	r7[-36],r8
8001e786:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e78a:	70 b8       	ld.w	r8,r8[0x2c]
8001e78c:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001e790:	ee ca 00 7c 	sub	r10,r7,124
8001e794:	20 4d       	sub	sp,16
8001e796:	1a 98       	mov	r8,sp
8001e798:	ee c9 00 2c 	sub	r9,r7,44
8001e79c:	20 08       	sub	r8,0
8001e79e:	20 09       	sub	r9,0
8001e7a0:	72 0b       	ld.w	r11,r9[0x0]
8001e7a2:	91 0b       	st.w	r8[0x0],r11
8001e7a4:	72 1b       	ld.w	r11,r9[0x4]
8001e7a6:	91 1b       	st.w	r8[0x4],r11
8001e7a8:	72 2b       	ld.w	r11,r9[0x8]
8001e7aa:	91 2b       	st.w	r8[0x8],r11
8001e7ac:	72 39       	ld.w	r9,r9[0xc]
8001e7ae:	91 39       	st.w	r8[0xc],r9
8001e7b0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e7b4:	20 4d       	sub	sp,16
8001e7b6:	1a 98       	mov	r8,sp
8001e7b8:	2b 89       	sub	r9,-72
8001e7ba:	20 08       	sub	r8,0
8001e7bc:	20 09       	sub	r9,0
8001e7be:	72 0b       	ld.w	r11,r9[0x0]
8001e7c0:	91 0b       	st.w	r8[0x0],r11
8001e7c2:	72 1b       	ld.w	r11,r9[0x4]
8001e7c4:	91 1b       	st.w	r8[0x4],r11
8001e7c6:	72 2b       	ld.w	r11,r9[0x8]
8001e7c8:	91 2b       	st.w	r8[0x8],r11
8001e7ca:	72 39       	ld.w	r9,r9[0xc]
8001e7cc:	91 39       	st.w	r8[0xc],r9
8001e7ce:	14 9c       	mov	r12,r10
8001e7d0:	fe b0 f6 56 	rcall	8001d47c <quat_local_to_global>
8001e7d4:	2f 8d       	sub	sp,-32
8001e7d6:	ee c8 00 1c 	sub	r8,r7,28
8001e7da:	ee c9 00 7c 	sub	r9,r7,124
8001e7de:	20 08       	sub	r8,0
8001e7e0:	20 09       	sub	r9,0
8001e7e2:	72 0a       	ld.w	r10,r9[0x0]
8001e7e4:	91 0a       	st.w	r8[0x0],r10
8001e7e6:	72 1a       	ld.w	r10,r9[0x4]
8001e7e8:	91 1a       	st.w	r8[0x4],r10
8001e7ea:	72 2a       	ld.w	r10,r9[0x8]
8001e7ec:	91 2a       	st.w	r8[0x8],r10
8001e7ee:	72 39       	ld.w	r9,r9[0xc]
8001e7f0:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001e7f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e7f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e7fa:	91 c9       	st.w	r8[0x30],r9
8001e7fc:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001e800:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e804:	91 d9       	st.w	r8[0x34],r9
8001e806:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001e80a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e80e:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001e810:	30 08       	mov	r8,0
8001e812:	ef 48 ff f4 	st.w	r7[-12],r8
8001e816:	c2 38       	rjmp	8001e85c <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001e818:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e81c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e820:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e824:	2b ba       	sub	r10,-69
8001e826:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e82a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e82e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e832:	2f 4b       	sub	r11,-12
8001e834:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e838:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e83c:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e840:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e844:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e848:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e84c:	2b b9       	sub	r9,-69
8001e84e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001e852:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e856:	2f f8       	sub	r8,-1
8001e858:	ef 48 ff f4 	st.w	r7[-12],r8
8001e85c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e860:	58 28       	cp.w	r8,2
8001e862:	fe 9a ff db 	brle	8001e818 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001e866:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e86a:	70 39       	ld.w	r9,r8[0xc]
8001e86c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e870:	f0 f8 01 14 	ld.w	r8,r8[276]
8001e874:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e878:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e87c:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001e880:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e884:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e888:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001e88c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e890:	70 49       	ld.w	r9,r8[0x10]
8001e892:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e896:	f0 f8 01 18 	ld.w	r8,r8[280]
8001e89a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e89e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8a2:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001e8a6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8aa:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8ae:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001e8b2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8b6:	70 59       	ld.w	r9,r8[0x14]
8001e8b8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8bc:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e8c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e8c4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8c8:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001e8cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8d0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8d4:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001e8d8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8dc:	70 68       	ld.w	r8,r8[0x18]
8001e8de:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e8e2:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e8e6:	12 9b       	mov	r11,r9
8001e8e8:	10 9c       	mov	r12,r8
8001e8ea:	f0 16 00 08 	mcall	r6[32]
8001e8ee:	18 98       	mov	r8,r12
8001e8f0:	10 9c       	mov	r12,r8
8001e8f2:	f0 16 00 03 	mcall	r6[12]
8001e8f6:	e0 68 85 1f 	mov	r8,34079
8001e8fa:	ea 18 51 eb 	orh	r8,0x51eb
8001e8fe:	e0 69 9e b8 	mov	r9,40632
8001e902:	ea 19 40 23 	orh	r9,0x4023
8001e906:	f0 16 00 0c 	mcall	r6[48]
8001e90a:	14 98       	mov	r8,r10
8001e90c:	16 99       	mov	r9,r11
8001e90e:	10 92       	mov	r2,r8
8001e910:	12 93       	mov	r3,r9
8001e912:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e916:	f0 f8 01 20 	ld.w	r8,r8[288]
8001e91a:	10 9c       	mov	r12,r8
8001e91c:	f0 16 00 03 	mcall	r6[12]
8001e920:	14 98       	mov	r8,r10
8001e922:	16 99       	mov	r9,r11
8001e924:	04 9a       	mov	r10,r2
8001e926:	06 9b       	mov	r11,r3
8001e928:	f0 16 00 02 	mcall	r6[8]
8001e92c:	14 98       	mov	r8,r10
8001e92e:	16 99       	mov	r9,r11
8001e930:	10 92       	mov	r2,r8
8001e932:	12 93       	mov	r3,r9
8001e934:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e938:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001e93c:	10 9c       	mov	r12,r8
8001e93e:	f0 16 00 03 	mcall	r6[12]
8001e942:	14 98       	mov	r8,r10
8001e944:	16 99       	mov	r9,r11
8001e946:	04 9a       	mov	r10,r2
8001e948:	06 9b       	mov	r11,r3
8001e94a:	f0 16 00 05 	mcall	r6[20]
8001e94e:	14 98       	mov	r8,r10
8001e950:	16 99       	mov	r9,r11
8001e952:	10 9a       	mov	r10,r8
8001e954:	12 9b       	mov	r11,r9
8001e956:	f0 16 00 09 	mcall	r6[36]
8001e95a:	18 99       	mov	r9,r12
8001e95c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e960:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001e964:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e968:	70 78       	ld.w	r8,r8[0x1c]
8001e96a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e96e:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e972:	12 9b       	mov	r11,r9
8001e974:	10 9c       	mov	r12,r8
8001e976:	f0 16 00 08 	mcall	r6[32]
8001e97a:	18 98       	mov	r8,r12
8001e97c:	10 9c       	mov	r12,r8
8001e97e:	f0 16 00 03 	mcall	r6[12]
8001e982:	e0 68 85 1f 	mov	r8,34079
8001e986:	ea 18 51 eb 	orh	r8,0x51eb
8001e98a:	e0 69 9e b8 	mov	r9,40632
8001e98e:	ea 19 40 23 	orh	r9,0x4023
8001e992:	f0 16 00 0c 	mcall	r6[48]
8001e996:	14 98       	mov	r8,r10
8001e998:	16 99       	mov	r9,r11
8001e99a:	10 92       	mov	r2,r8
8001e99c:	12 93       	mov	r3,r9
8001e99e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9a2:	f0 f8 01 24 	ld.w	r8,r8[292]
8001e9a6:	10 9c       	mov	r12,r8
8001e9a8:	f0 16 00 03 	mcall	r6[12]
8001e9ac:	14 98       	mov	r8,r10
8001e9ae:	16 99       	mov	r9,r11
8001e9b0:	04 9a       	mov	r10,r2
8001e9b2:	06 9b       	mov	r11,r3
8001e9b4:	f0 16 00 02 	mcall	r6[8]
8001e9b8:	14 98       	mov	r8,r10
8001e9ba:	16 99       	mov	r9,r11
8001e9bc:	10 92       	mov	r2,r8
8001e9be:	12 93       	mov	r3,r9
8001e9c0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9c4:	f0 f8 01 00 	ld.w	r8,r8[256]
8001e9c8:	10 9c       	mov	r12,r8
8001e9ca:	f0 16 00 03 	mcall	r6[12]
8001e9ce:	14 98       	mov	r8,r10
8001e9d0:	16 99       	mov	r9,r11
8001e9d2:	04 9a       	mov	r10,r2
8001e9d4:	06 9b       	mov	r11,r3
8001e9d6:	f0 16 00 05 	mcall	r6[20]
8001e9da:	14 98       	mov	r8,r10
8001e9dc:	16 99       	mov	r9,r11
8001e9de:	10 9a       	mov	r10,r8
8001e9e0:	12 9b       	mov	r11,r9
8001e9e2:	f0 16 00 09 	mcall	r6[36]
8001e9e6:	18 99       	mov	r9,r12
8001e9e8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e9ec:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001e9f0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e9f4:	70 88       	ld.w	r8,r8[0x20]
8001e9f6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e9fa:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e9fe:	12 9b       	mov	r11,r9
8001ea00:	10 9c       	mov	r12,r8
8001ea02:	f0 16 00 08 	mcall	r6[32]
8001ea06:	18 98       	mov	r8,r12
8001ea08:	10 9c       	mov	r12,r8
8001ea0a:	f0 16 00 03 	mcall	r6[12]
8001ea0e:	e0 68 85 1f 	mov	r8,34079
8001ea12:	ea 18 51 eb 	orh	r8,0x51eb
8001ea16:	e0 69 9e b8 	mov	r9,40632
8001ea1a:	ea 19 40 23 	orh	r9,0x4023
8001ea1e:	f0 16 00 0c 	mcall	r6[48]
8001ea22:	14 98       	mov	r8,r10
8001ea24:	16 99       	mov	r9,r11
8001ea26:	10 92       	mov	r2,r8
8001ea28:	12 93       	mov	r3,r9
8001ea2a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea2e:	f0 f8 01 28 	ld.w	r8,r8[296]
8001ea32:	10 9c       	mov	r12,r8
8001ea34:	f0 16 00 03 	mcall	r6[12]
8001ea38:	14 98       	mov	r8,r10
8001ea3a:	16 99       	mov	r9,r11
8001ea3c:	04 9a       	mov	r10,r2
8001ea3e:	06 9b       	mov	r11,r3
8001ea40:	f0 16 00 02 	mcall	r6[8]
8001ea44:	14 98       	mov	r8,r10
8001ea46:	16 99       	mov	r9,r11
8001ea48:	10 92       	mov	r2,r8
8001ea4a:	12 93       	mov	r3,r9
8001ea4c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea50:	f0 f8 01 04 	ld.w	r8,r8[260]
8001ea54:	10 9c       	mov	r12,r8
8001ea56:	f0 16 00 03 	mcall	r6[12]
8001ea5a:	14 98       	mov	r8,r10
8001ea5c:	16 99       	mov	r9,r11
8001ea5e:	04 9a       	mov	r10,r2
8001ea60:	06 9b       	mov	r11,r3
8001ea62:	f0 16 00 05 	mcall	r6[20]
8001ea66:	14 98       	mov	r8,r10
8001ea68:	16 99       	mov	r9,r11
8001ea6a:	10 9a       	mov	r10,r8
8001ea6c:	12 9b       	mov	r11,r9
8001ea6e:	f0 16 00 09 	mcall	r6[36]
8001ea72:	18 99       	mov	r9,r12
8001ea74:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea78:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001ea7c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ea80:	71 b9       	ld.w	r9,r8[0x6c]
8001ea82:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea86:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001ea8a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ea8e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea92:	f0 f8 01 08 	ld.w	r8,r8[264]
8001ea96:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ea9a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ea9e:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001eaa2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eaa6:	71 c9       	ld.w	r9,r8[0x70]
8001eaa8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eaac:	f0 f8 01 30 	ld.w	r8,r8[304]
8001eab0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001eab4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eab8:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001eabc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001eac0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eac4:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001eac8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eacc:	71 d9       	ld.w	r9,r8[0x74]
8001eace:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ead2:	f0 f8 01 34 	ld.w	r8,r8[308]
8001ead6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001eada:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eade:	f0 f8 01 10 	ld.w	r8,r8[272]
8001eae2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001eae6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eaea:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001eaee:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001eaf2:	20 4d       	sub	sp,16
8001eaf4:	1a 98       	mov	r8,sp
8001eaf6:	2b 89       	sub	r9,-72
8001eaf8:	20 08       	sub	r8,0
8001eafa:	20 09       	sub	r9,0
8001eafc:	72 0a       	ld.w	r10,r9[0x0]
8001eafe:	91 0a       	st.w	r8[0x0],r10
8001eb00:	72 1a       	ld.w	r10,r9[0x4]
8001eb02:	91 1a       	st.w	r8[0x4],r10
8001eb04:	72 2a       	ld.w	r10,r9[0x8]
8001eb06:	91 2a       	st.w	r8[0x8],r10
8001eb08:	72 39       	ld.w	r9,r9[0xc]
8001eb0a:	91 39       	st.w	r8[0xc],r9
8001eb0c:	f0 16 01 0b 	mcall	r6[1068]
8001eb10:	2f cd       	sub	sp,-16
8001eb12:	18 99       	mov	r9,r12
8001eb14:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb18:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001eb1c:	2e 1d       	sub	sp,-124
8001eb1e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001eb22:	00 00       	add	r0,r0
8001eb24:	80 01       	ld.sh	r1,r0[0x0]
8001eb26:	de 32       	popm	r0-r7,r12,lr-pc

8001eb28 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001eb28:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb2c:	1a 97       	mov	r7,sp
8001eb2e:	20 2d       	sub	sp,8
8001eb30:	49 36       	lddpc	r6,8001eb7c <simulate_barometer+0x54>
8001eb32:	1e 26       	rsub	r6,pc
8001eb34:	ef 4c ff fc 	st.w	r7[-4],r12
8001eb38:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001eb3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb40:	f0 f9 01 34 	ld.w	r9,r8[308]
8001eb44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb48:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001eb4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001eb50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb54:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001eb56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb5a:	70 e9       	ld.w	r9,r8[0x38]
8001eb5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb60:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001eb62:	f0 16 00 0e 	mcall	r6[56]
8001eb66:	18 99       	mov	r9,r12
8001eb68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb6c:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001eb6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb72:	30 09       	mov	r9,0
8001eb74:	91 89       	st.w	r8[0x20],r9
		
	}
8001eb76:	2f ed       	sub	sp,-8
8001eb78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb7c:	80 01       	ld.sh	r1,r0[0x0]
8001eb7e:	e9 b6       	*unknown*

8001eb80 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001eb80:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb84:	1a 97       	mov	r7,sp
8001eb86:	20 9d       	sub	sp,36
8001eb88:	4a b6       	lddpc	r6,8001ec34 <simulate_gps+0xb4>
8001eb8a:	1e 26       	rsub	r6,pc
8001eb8c:	ef 4c ff e0 	st.w	r7[-32],r12
8001eb90:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001eb94:	ee cc 00 1c 	sub	r12,r7,28
8001eb98:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001eb9c:	20 cd       	sub	sp,48
8001eb9e:	1a 99       	mov	r9,sp
8001eba0:	12 9b       	mov	r11,r9
8001eba2:	f0 ca fe ec 	sub	r10,r8,-276
8001eba6:	f6 c8 00 00 	sub	r8,r11,0
8001ebaa:	f4 c9 00 00 	sub	r9,r10,0
8001ebae:	72 0e       	ld.w	lr,r9[0x0]
8001ebb0:	91 0e       	st.w	r8[0x0],lr
8001ebb2:	72 1e       	ld.w	lr,r9[0x4]
8001ebb4:	91 1e       	st.w	r8[0x4],lr
8001ebb6:	72 2e       	ld.w	lr,r9[0x8]
8001ebb8:	91 2e       	st.w	r8[0x8],lr
8001ebba:	72 39       	ld.w	r9,r9[0xc]
8001ebbc:	91 39       	st.w	r8[0xc],r9
8001ebbe:	f6 c8 ff f0 	sub	r8,r11,-16
8001ebc2:	f4 c9 ff f0 	sub	r9,r10,-16
8001ebc6:	72 0e       	ld.w	lr,r9[0x0]
8001ebc8:	91 0e       	st.w	r8[0x0],lr
8001ebca:	72 1e       	ld.w	lr,r9[0x4]
8001ebcc:	91 1e       	st.w	r8[0x4],lr
8001ebce:	72 2e       	ld.w	lr,r9[0x8]
8001ebd0:	91 2e       	st.w	r8[0x8],lr
8001ebd2:	72 39       	ld.w	r9,r9[0xc]
8001ebd4:	91 39       	st.w	r8[0xc],r9
8001ebd6:	f6 c8 ff e0 	sub	r8,r11,-32
8001ebda:	f4 c9 ff e0 	sub	r9,r10,-32
8001ebde:	72 0a       	ld.w	r10,r9[0x0]
8001ebe0:	91 0a       	st.w	r8[0x0],r10
8001ebe2:	72 1a       	ld.w	r10,r9[0x4]
8001ebe4:	91 1a       	st.w	r8[0x4],r10
8001ebe6:	72 2a       	ld.w	r10,r9[0x8]
8001ebe8:	91 2a       	st.w	r8[0x8],r10
8001ebea:	72 39       	ld.w	r9,r9[0xc]
8001ebec:	91 39       	st.w	r8[0xc],r9
8001ebee:	f0 16 00 81 	mcall	r6[516]
8001ebf2:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001ebf4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ebf8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ebfc:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001ebfe:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001ec02:	ee fa ff dc 	ld.w	r10,r7[-36]
8001ec06:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001ec0a:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001ec0e:	ee fa ff dc 	ld.w	r10,r7[-36]
8001ec12:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001ec16:	f0 16 00 0e 	mcall	r6[56]
8001ec1a:	18 99       	mov	r9,r12
8001ec1c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ec20:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001ec24:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001ec28:	30 28       	mov	r8,2
8001ec2a:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001ec2e:	2f 7d       	sub	sp,-36
8001ec30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ec34:	80 01       	ld.sh	r1,r0[0x0]
8001ec36:	ea 0e       	*unknown*

8001ec38 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001ec38:	eb cd 40 80 	pushm	r7,lr
8001ec3c:	1a 97       	mov	r7,sp
8001ec3e:	20 3d       	sub	sp,12
8001ec40:	18 98       	mov	r8,r12
8001ec42:	ef 4b ff f4 	st.w	r7[-12],r11
8001ec46:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001ec4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec4e:	90 08       	ld.sh	r8,r8[0x0]
8001ec50:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ec54:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001ec58:	f3 e8 20 08 	eor	r8,r9,r8
8001ec5c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001ec60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ec64:	a5 68       	lsl	r8,0x4
8001ec66:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ec6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ec6e:	f3 e8 20 08 	eor	r8,r9,r8
8001ec72:	5c 58       	castu.b	r8
8001ec74:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001ec78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec7c:	90 08       	ld.sh	r8,r8[0x0]
8001ec7e:	5c 78       	castu.h	r8
8001ec80:	a9 88       	lsr	r8,0x8
8001ec82:	5c 88       	casts.h	r8
8001ec84:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ec88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ec8c:	a9 68       	lsl	r8,0x8
8001ec8e:	5c 88       	casts.h	r8
8001ec90:	f3 e8 20 08 	eor	r8,r9,r8
8001ec94:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ec98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ec9c:	a3 78       	lsl	r8,0x3
8001ec9e:	5c 88       	casts.h	r8
8001eca0:	f3 e8 20 08 	eor	r8,r9,r8
8001eca4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001eca8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ecac:	a5 88       	lsr	r8,0x4
8001ecae:	5c 58       	castu.b	r8
8001ecb0:	f3 e8 20 08 	eor	r8,r9,r8
8001ecb4:	5c 88       	casts.h	r8
8001ecb6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ecba:	b2 08       	st.h	r9[0x0],r8
}
8001ecbc:	2f dd       	sub	sp,-12
8001ecbe:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ecc2 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001ecc2:	eb cd 40 80 	pushm	r7,lr
8001ecc6:	1a 97       	mov	r7,sp
8001ecc8:	20 1d       	sub	sp,4
8001ecca:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001ecce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ecd2:	3f f8       	mov	r8,-1
8001ecd4:	b2 08       	st.h	r9[0x0],r8
}
8001ecd6:	2f fd       	sub	sp,-4
8001ecd8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ecdc <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001ecdc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ece0:	1a 97       	mov	r7,sp
8001ece2:	20 3d       	sub	sp,12
8001ece4:	49 76       	lddpc	r6,8001ed40 <crc_calculate+0x64>
8001ece6:	1e 26       	rsub	r6,pc
8001ece8:	ef 4c ff f8 	st.w	r7[-8],r12
8001ecec:	16 98       	mov	r8,r11
8001ecee:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001ecf2:	ee c8 00 02 	sub	r8,r7,2
8001ecf6:	10 9c       	mov	r12,r8
8001ecf8:	ce 5f       	rcall	8001ecc2 <crc_init>
	while (length--) {
8001ecfa:	c0 e8       	rjmp	8001ed16 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001ecfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed00:	11 88       	ld.ub	r8,r8[0x0]
8001ed02:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ed06:	2f f9       	sub	r9,-1
8001ed08:	ef 49 ff f8 	st.w	r7[-8],r9
8001ed0c:	ee c9 00 02 	sub	r9,r7,2
8001ed10:	12 9b       	mov	r11,r9
8001ed12:	10 9c       	mov	r12,r8
8001ed14:	c9 2f       	rcall	8001ec38 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001ed16:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001ed1a:	30 08       	mov	r8,0
8001ed1c:	f0 09 19 00 	cp.h	r9,r8
8001ed20:	5f 18       	srne	r8
8001ed22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ed26:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001ed2a:	20 18       	sub	r8,1
8001ed2c:	ef 58 ff f4 	st.h	r7[-12],r8
8001ed30:	58 09       	cp.w	r9,0
8001ed32:	ce 51       	brne	8001ecfc <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001ed34:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001ed38:	10 9c       	mov	r12,r8
8001ed3a:	2f dd       	sub	sp,-12
8001ed3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ed40:	80 01       	ld.sh	r1,r0[0x0]
8001ed42:	eb 6a eb cd 	st.b	r5[-5171],r10

8001ed44 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001ed44:	eb cd 40 c0 	pushm	r6-r7,lr
8001ed48:	1a 97       	mov	r7,sp
8001ed4a:	20 4d       	sub	sp,16
8001ed4c:	49 66       	lddpc	r6,8001eda4 <crc_accumulate_buffer+0x60>
8001ed4e:	1e 26       	rsub	r6,pc
8001ed50:	ef 4c ff f8 	st.w	r7[-8],r12
8001ed54:	ef 4b ff f4 	st.w	r7[-12],r11
8001ed58:	14 98       	mov	r8,r10
8001ed5a:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001ed5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ed62:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001ed66:	c0 d8       	rjmp	8001ed80 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001ed68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed6c:	11 88       	ld.ub	r8,r8[0x0]
8001ed6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed72:	2f f9       	sub	r9,-1
8001ed74:	ef 49 ff fc 	st.w	r7[-4],r9
8001ed78:	ee fb ff f8 	ld.w	r11,r7[-8]
8001ed7c:	10 9c       	mov	r12,r8
8001ed7e:	c5 df       	rcall	8001ec38 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001ed80:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001ed84:	30 08       	mov	r8,0
8001ed86:	f0 09 18 00 	cp.b	r9,r8
8001ed8a:	5f 18       	srne	r8
8001ed8c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ed90:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001ed94:	20 18       	sub	r8,1
8001ed96:	ef 68 ff f0 	st.b	r7[-16],r8
8001ed9a:	58 09       	cp.w	r9,0
8001ed9c:	ce 61       	brne	8001ed68 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001ed9e:	2f cd       	sub	sp,-16
8001eda0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eda4:	80 01       	ld.sh	r1,r0[0x0]
8001eda6:	eb d2       	*unknown*

8001eda8 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001eda8:	eb cd 40 c0 	pushm	r6-r7,lr
8001edac:	1a 97       	mov	r7,sp
8001edae:	20 1d       	sub	sp,4
8001edb0:	48 96       	lddpc	r6,8001edd4 <mavlink_get_channel_status+0x2c>
8001edb2:	1e 26       	rsub	r6,pc
8001edb4:	18 98       	mov	r8,r12
8001edb6:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001edba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001edbe:	f0 09 15 04 	lsl	r9,r8,0x4
8001edc2:	ec f8 08 90 	ld.w	r8,r6[2192]
8001edc6:	f2 08 00 08 	add	r8,r9,r8
}
8001edca:	10 9c       	mov	r12,r8
8001edcc:	2f fd       	sub	sp,-4
8001edce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001edd2:	00 00       	add	r0,r0
8001edd4:	80 01       	ld.sh	r1,r0[0x0]
8001edd6:	ec 36 eb cd 	sub	r6,912333

8001edd8 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001edd8:	eb cd 40 c0 	pushm	r6-r7,lr
8001eddc:	1a 97       	mov	r7,sp
8001edde:	20 9d       	sub	sp,36
8001ede0:	4b d6       	lddpc	r6,8001eed4 <_mav_finalize_message_chan_send+0xfc>
8001ede2:	1e 26       	rsub	r6,pc
8001ede4:	ef 4c ff ec 	st.w	r7[-20],r12
8001ede8:	ef 4a ff e4 	st.w	r7[-28],r10
8001edec:	16 9a       	mov	r10,r11
8001edee:	ef 6a ff e8 	st.b	r7[-24],r10
8001edf2:	ef 69 ff e0 	st.b	r7[-32],r9
8001edf6:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001edfa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001edfe:	5c 58       	castu.b	r8
8001ee00:	10 9c       	mov	r12,r8
8001ee02:	cd 3f       	rcall	8001eda8 <mavlink_get_channel_status>
8001ee04:	18 98       	mov	r8,r12
8001ee06:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001ee0a:	3f e8       	mov	r8,-2
8001ee0c:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001ee10:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ee14:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001ee18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee1c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ee20:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001ee24:	ec f8 00 6c 	ld.w	r8,r6[108]
8001ee28:	11 88       	ld.ub	r8,r8[0x0]
8001ee2a:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001ee2e:	ec f8 00 6c 	ld.w	r8,r6[108]
8001ee32:	11 98       	ld.ub	r8,r8[0x1]
8001ee34:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001ee38:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001ee3c:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001ee40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee44:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ee48:	2f f8       	sub	r8,-1
8001ee4a:	5c 58       	castu.b	r8
8001ee4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ee50:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001ee54:	ee c8 00 0c 	sub	r8,r7,12
8001ee58:	2f f8       	sub	r8,-1
8001ee5a:	30 5b       	mov	r11,5
8001ee5c:	10 9c       	mov	r12,r8
8001ee5e:	c3 ff       	rcall	8001ecdc <crc_calculate>
8001ee60:	18 98       	mov	r8,r12
8001ee62:	5c 88       	casts.h	r8
8001ee64:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001ee68:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001ee6c:	ee c8 00 06 	sub	r8,r7,6
8001ee70:	12 9a       	mov	r10,r9
8001ee72:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ee76:	10 9c       	mov	r12,r8
8001ee78:	c6 6f       	rcall	8001ed44 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001ee7a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001ee7e:	ee c9 00 06 	sub	r9,r7,6
8001ee82:	12 9b       	mov	r11,r9
8001ee84:	10 9c       	mov	r12,r8
8001ee86:	cd 9e       	rcall	8001ec38 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001ee88:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ee8c:	5c 58       	castu.b	r8
8001ee8e:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001ee92:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ee96:	5c 78       	castu.h	r8
8001ee98:	a9 88       	lsr	r8,0x8
8001ee9a:	5c 88       	casts.h	r8
8001ee9c:	5c 58       	castu.b	r8
8001ee9e:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001eea2:	ee c8 00 0c 	sub	r8,r7,12
8001eea6:	30 6a       	mov	r10,6
8001eea8:	10 9b       	mov	r11,r8
8001eeaa:	ee fc ff ec 	ld.w	r12,r7[-20]
8001eeae:	c1 5c       	rcall	8001eed8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001eeb0:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001eeb4:	10 9a       	mov	r10,r8
8001eeb6:	ee fb ff e4 	ld.w	r11,r7[-28]
8001eeba:	ee fc ff ec 	ld.w	r12,r7[-20]
8001eebe:	c0 dc       	rcall	8001eed8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001eec0:	ee c8 00 10 	sub	r8,r7,16
8001eec4:	30 2a       	mov	r10,2
8001eec6:	10 9b       	mov	r11,r8
8001eec8:	ee fc ff ec 	ld.w	r12,r7[-20]
8001eecc:	c0 6c       	rcall	8001eed8 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001eece:	2f 7d       	sub	sp,-36
8001eed0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eed4:	80 01       	ld.sh	r1,r0[0x0]
8001eed6:	ec 66 eb cd 	mov	r6,846797

8001eed8 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001eed8:	eb cd 40 c0 	pushm	r6-r7,lr
8001eedc:	1a 97       	mov	r7,sp
8001eede:	20 4d       	sub	sp,16
8001eee0:	49 46       	lddpc	r6,8001ef30 <_mavlink_send_uart+0x58>
8001eee2:	1e 26       	rsub	r6,pc
8001eee4:	ef 4c ff f8 	st.w	r7[-8],r12
8001eee8:	ef 4b ff f4 	st.w	r7[-12],r11
8001eeec:	14 98       	mov	r8,r10
8001eeee:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001eef2:	30 08       	mov	r8,0
8001eef4:	ef 58 ff fe 	st.h	r7[-2],r8
8001eef8:	c1 28       	rjmp	8001ef1c <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001eefa:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001eefe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ef02:	f2 08 00 08 	add	r8,r9,r8
8001ef06:	11 88       	ld.ub	r8,r8[0x0]
8001ef08:	10 9b       	mov	r11,r8
8001ef0a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ef0e:	f0 16 00 cf 	mcall	r6[828]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ef12:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ef16:	2f f8       	sub	r8,-1
8001ef18:	ef 58 ff fe 	st.h	r7[-2],r8
8001ef1c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001ef20:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001ef24:	f0 09 19 00 	cp.h	r9,r8
8001ef28:	ce 93       	brcs	8001eefa <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001ef2a:	2f cd       	sub	sp,-16
8001ef2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef30:	80 01       	ld.sh	r1,r0[0x0]
8001ef32:	ed 66 eb cd 	st.b	r6[-5171],r6

8001ef34 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001ef34:	eb cd 40 80 	pushm	r7,lr
8001ef38:	1a 97       	mov	r7,sp
8001ef3a:	20 2d       	sub	sp,8
8001ef3c:	ef 4c ff fc 	st.w	r7[-4],r12
8001ef40:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001ef44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef48:	2f f8       	sub	r8,-1
8001ef4a:	11 88       	ld.ub	r8,r8[0x0]
8001ef4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ef50:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001ef52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef56:	f0 c9 ff ff 	sub	r9,r8,-1
8001ef5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef5e:	11 88       	ld.ub	r8,r8[0x0]
8001ef60:	b2 88       	st.b	r9[0x0],r8
}
8001ef62:	2f ed       	sub	sp,-8
8001ef64:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ef68 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001ef68:	eb cd 40 80 	pushm	r7,lr
8001ef6c:	1a 97       	mov	r7,sp
8001ef6e:	20 2d       	sub	sp,8
8001ef70:	ef 4c ff fc 	st.w	r7[-4],r12
8001ef74:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001ef78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef7c:	2f d8       	sub	r8,-3
8001ef7e:	11 88       	ld.ub	r8,r8[0x0]
8001ef80:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ef84:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001ef86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef8a:	f0 c9 ff ff 	sub	r9,r8,-1
8001ef8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef92:	2f e8       	sub	r8,-2
8001ef94:	11 88       	ld.ub	r8,r8[0x0]
8001ef96:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001ef98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef9c:	f0 c9 ff fe 	sub	r9,r8,-2
8001efa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001efa4:	2f f8       	sub	r8,-1
8001efa6:	11 88       	ld.ub	r8,r8[0x0]
8001efa8:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001efaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001efae:	f0 c9 ff fd 	sub	r9,r8,-3
8001efb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001efb6:	11 88       	ld.ub	r8,r8[0x0]
8001efb8:	b2 88       	st.b	r9[0x0],r8
}
8001efba:	2f ed       	sub	sp,-8
8001efbc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001efc0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001efc0:	eb cd 40 c0 	pushm	r6-r7,lr
8001efc4:	1a 97       	mov	r7,sp
8001efc6:	20 3d       	sub	sp,12
8001efc8:	49 06       	lddpc	r6,8001f008 <mav_array_memcpy+0x48>
8001efca:	1e 26       	rsub	r6,pc
8001efcc:	ef 4c ff fc 	st.w	r7[-4],r12
8001efd0:	ef 4b ff f8 	st.w	r7[-8],r11
8001efd4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001efd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001efdc:	58 08       	cp.w	r8,0
8001efde:	c0 91       	brne	8001eff0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001efe0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001efe4:	30 0b       	mov	r11,0
8001efe6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001efea:	f0 16 00 2f 	mcall	r6[188]
8001efee:	c0 98       	rjmp	8001f000 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001eff0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001eff4:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eff8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001effc:	f0 16 00 1e 	mcall	r6[120]
	}
}
8001f000:	2f dd       	sub	sp,-12
8001f002:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f006:	00 00       	add	r0,r0
8001f008:	80 01       	ld.sh	r1,r0[0x0]
8001f00a:	ee 4e eb cd 	cp.w	lr,977869

8001f00c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001f00c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f010:	1a 97       	mov	r7,sp
8001f012:	20 3d       	sub	sp,12
8001f014:	48 d6       	lddpc	r6,8001f048 <_MAV_RETURN_uint16_t+0x3c>
8001f016:	1e 26       	rsub	r6,pc
8001f018:	ef 4c ff f8 	st.w	r7[-8],r12
8001f01c:	16 98       	mov	r8,r11
8001f01e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f022:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f026:	2f 88       	sub	r8,-8
8001f028:	10 99       	mov	r9,r8
8001f02a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f02e:	10 09       	add	r9,r8
8001f030:	ee c8 00 02 	sub	r8,r7,2
8001f034:	12 9b       	mov	r11,r9
8001f036:	10 9c       	mov	r12,r8
8001f038:	c7 ef       	rcall	8001ef34 <byte_swap_2>
8001f03a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001f03e:	10 9c       	mov	r12,r8
8001f040:	2f dd       	sub	sp,-12
8001f042:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f046:	00 00       	add	r0,r0
8001f048:	80 01       	ld.sh	r1,r0[0x0]
8001f04a:	ee 9a eb cd 	brle	8021c7e4 <_data_lma+0x1ea194>

8001f04c <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001f04c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f050:	1a 97       	mov	r7,sp
8001f052:	20 3d       	sub	sp,12
8001f054:	48 d6       	lddpc	r6,8001f088 <_MAV_RETURN_uint32_t+0x3c>
8001f056:	1e 26       	rsub	r6,pc
8001f058:	ef 4c ff f8 	st.w	r7[-8],r12
8001f05c:	16 98       	mov	r8,r11
8001f05e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f062:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f066:	2f 88       	sub	r8,-8
8001f068:	10 99       	mov	r9,r8
8001f06a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f06e:	10 09       	add	r9,r8
8001f070:	ee c8 00 04 	sub	r8,r7,4
8001f074:	12 9b       	mov	r11,r9
8001f076:	10 9c       	mov	r12,r8
8001f078:	c7 8f       	rcall	8001ef68 <byte_swap_4>
8001f07a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f07e:	10 9c       	mov	r12,r8
8001f080:	2f dd       	sub	sp,-12
8001f082:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f086:	00 00       	add	r0,r0
8001f088:	80 01       	ld.sh	r1,r0[0x0]
8001f08a:	ee da eb cd 	satsub.w	r10,r7,-5171

8001f08c <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001f08c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f090:	1a 97       	mov	r7,sp
8001f092:	20 3d       	sub	sp,12
8001f094:	48 d6       	lddpc	r6,8001f0c8 <_MAV_RETURN_float+0x3c>
8001f096:	1e 26       	rsub	r6,pc
8001f098:	ef 4c ff f8 	st.w	r7[-8],r12
8001f09c:	16 98       	mov	r8,r11
8001f09e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f0a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f0a6:	2f 88       	sub	r8,-8
8001f0a8:	10 99       	mov	r9,r8
8001f0aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f0ae:	10 09       	add	r9,r8
8001f0b0:	ee c8 00 04 	sub	r8,r7,4
8001f0b4:	12 9b       	mov	r11,r9
8001f0b6:	10 9c       	mov	r12,r8
8001f0b8:	c5 8f       	rcall	8001ef68 <byte_swap_4>
8001f0ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f0be:	10 9c       	mov	r12,r8
8001f0c0:	2f dd       	sub	sp,-12
8001f0c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f0c6:	00 00       	add	r0,r0
8001f0c8:	80 01       	ld.sh	r1,r0[0x0]
8001f0ca:	ef 1a eb cd 	ld.uh	r10,r7[-5171]

8001f0cc <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001f0cc:	eb cd 40 80 	pushm	r7,lr
8001f0d0:	1a 97       	mov	r7,sp
8001f0d2:	20 1d       	sub	sp,4
8001f0d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001f0d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f0dc:	2f 88       	sub	r8,-8
8001f0de:	2f c8       	sub	r8,-4
8001f0e0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f0e2:	10 9c       	mov	r12,r8
8001f0e4:	2f fd       	sub	sp,-4
8001f0e6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0ea <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001f0ea:	eb cd 40 80 	pushm	r7,lr
8001f0ee:	1a 97       	mov	r7,sp
8001f0f0:	20 1d       	sub	sp,4
8001f0f2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001f0f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f0fa:	2f 88       	sub	r8,-8
8001f0fc:	2f b8       	sub	r8,-5
8001f0fe:	11 88       	ld.ub	r8,r8[0x0]
}
8001f100:	10 9c       	mov	r12,r8
8001f102:	2f fd       	sub	sp,-4
8001f104:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f108 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001f108:	eb cd 40 c0 	pushm	r6-r7,lr
8001f10c:	1a 97       	mov	r7,sp
8001f10e:	20 1d       	sub	sp,4
8001f110:	48 76       	lddpc	r6,8001f12c <mavlink_msg_set_mode_get_custom_mode+0x24>
8001f112:	1e 26       	rsub	r6,pc
8001f114:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001f118:	30 0b       	mov	r11,0
8001f11a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f11e:	c9 7f       	rcall	8001f04c <_MAV_RETURN_uint32_t>
8001f120:	18 98       	mov	r8,r12
}
8001f122:	10 9c       	mov	r12,r8
8001f124:	2f fd       	sub	sp,-4
8001f126:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f12a:	00 00       	add	r0,r0
8001f12c:	80 01       	ld.sh	r1,r0[0x0]
8001f12e:	ef 96       	*unknown*

8001f130 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001f130:	eb cd 40 c0 	pushm	r6-r7,lr
8001f134:	1a 97       	mov	r7,sp
8001f136:	20 2d       	sub	sp,8
8001f138:	48 f6       	lddpc	r6,8001f174 <mavlink_msg_set_mode_decode+0x44>
8001f13a:	1e 26       	rsub	r6,pc
8001f13c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f140:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001f144:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f148:	ce 0f       	rcall	8001f108 <mavlink_msg_set_mode_get_custom_mode>
8001f14a:	18 99       	mov	r9,r12
8001f14c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f150:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001f152:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f156:	cb bf       	rcall	8001f0cc <mavlink_msg_set_mode_get_target_system>
8001f158:	18 98       	mov	r8,r12
8001f15a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f15e:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001f160:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f164:	cc 3f       	rcall	8001f0ea <mavlink_msg_set_mode_get_base_mode>
8001f166:	18 98       	mov	r8,r12
8001f168:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f16c:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001f16e:	2f ed       	sub	sp,-8
8001f170:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f174:	80 01       	ld.sh	r1,r0[0x0]
8001f176:	ef be       	*unknown*

8001f178 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001f178:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001f17c:	1a 97       	mov	r7,sp
8001f17e:	21 2d       	sub	sp,72
8001f180:	4c 26       	lddpc	r6,8001f288 <mavlink_msg_mission_item_send+0x110>
8001f182:	1e 26       	rsub	r6,pc
8001f184:	ee c5 ff ec 	sub	r5,r7,-20
8001f188:	ef 4c ff d4 	st.w	r7[-44],r12
8001f18c:	16 93       	mov	r3,r11
8001f18e:	14 9e       	mov	lr,r10
8001f190:	12 9c       	mov	r12,r9
8001f192:	10 9b       	mov	r11,r8
8001f194:	6a 0a       	ld.w	r10,r5[0x0]
8001f196:	6a 19       	ld.w	r9,r5[0x4]
8001f198:	6a 28       	ld.w	r8,r5[0x8]
8001f19a:	ef 63 ff d0 	st.b	r7[-48],r3
8001f19e:	ef 6e ff cc 	st.b	r7[-52],lr
8001f1a2:	ef 5c ff c8 	st.h	r7[-56],r12
8001f1a6:	ef 6b ff c4 	st.b	r7[-60],r11
8001f1aa:	ef 5a ff c0 	st.h	r7[-64],r10
8001f1ae:	ef 69 ff bc 	st.b	r7[-68],r9
8001f1b2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001f1b6:	ea c9 ff f4 	sub	r9,r5,-12
8001f1ba:	ee c8 00 28 	sub	r8,r7,40
8001f1be:	12 9b       	mov	r11,r9
8001f1c0:	10 9c       	mov	r12,r8
8001f1c2:	cd 3e       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001f1c4:	ea c9 ff f0 	sub	r9,r5,-16
8001f1c8:	ee c8 00 28 	sub	r8,r7,40
8001f1cc:	2f c8       	sub	r8,-4
8001f1ce:	12 9b       	mov	r11,r9
8001f1d0:	10 9c       	mov	r12,r8
8001f1d2:	cc be       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001f1d4:	ea c9 ff ec 	sub	r9,r5,-20
8001f1d8:	ee c8 00 28 	sub	r8,r7,40
8001f1dc:	2f 88       	sub	r8,-8
8001f1de:	12 9b       	mov	r11,r9
8001f1e0:	10 9c       	mov	r12,r8
8001f1e2:	cc 3e       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001f1e4:	ea c9 ff e8 	sub	r9,r5,-24
8001f1e8:	ee c8 00 28 	sub	r8,r7,40
8001f1ec:	2f 48       	sub	r8,-12
8001f1ee:	12 9b       	mov	r11,r9
8001f1f0:	10 9c       	mov	r12,r8
8001f1f2:	cb be       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001f1f4:	ea c9 ff e4 	sub	r9,r5,-28
8001f1f8:	ee c8 00 28 	sub	r8,r7,40
8001f1fc:	2f 08       	sub	r8,-16
8001f1fe:	12 9b       	mov	r11,r9
8001f200:	10 9c       	mov	r12,r8
8001f202:	cb 3e       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001f204:	ea c9 ff e0 	sub	r9,r5,-32
8001f208:	ee c8 00 28 	sub	r8,r7,40
8001f20c:	2e c8       	sub	r8,-20
8001f20e:	12 9b       	mov	r11,r9
8001f210:	10 9c       	mov	r12,r8
8001f212:	ca be       	rcall	8001ef68 <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001f214:	ea c9 ff dc 	sub	r9,r5,-36
8001f218:	ee c8 00 28 	sub	r8,r7,40
8001f21c:	2e 88       	sub	r8,-24
8001f21e:	12 9b       	mov	r11,r9
8001f220:	10 9c       	mov	r12,r8
8001f222:	ca 3e       	rcall	8001ef68 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001f224:	ee c9 00 38 	sub	r9,r7,56
8001f228:	ee c8 00 28 	sub	r8,r7,40
8001f22c:	2e 48       	sub	r8,-28
8001f22e:	12 9b       	mov	r11,r9
8001f230:	10 9c       	mov	r12,r8
8001f232:	c8 1e       	rcall	8001ef34 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001f234:	ee c9 00 40 	sub	r9,r7,64
8001f238:	ee c8 00 28 	sub	r8,r7,40
8001f23c:	2e 28       	sub	r8,-30
8001f23e:	12 9b       	mov	r11,r9
8001f240:	10 9c       	mov	r12,r8
8001f242:	c7 9e       	rcall	8001ef34 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001f244:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001f248:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001f24c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001f250:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001f254:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001f258:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001f25c:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001f260:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001f264:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001f268:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001f26c:	ee ca 00 28 	sub	r10,r7,40
8001f270:	e0 68 00 fe 	mov	r8,254
8001f274:	32 59       	mov	r9,37
8001f276:	32 7b       	mov	r11,39
8001f278:	ee fc ff d4 	ld.w	r12,r7[-44]
8001f27c:	fe b0 fd ae 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001f280:	2e ed       	sub	sp,-72
8001f282:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f286:	00 00       	add	r0,r0
8001f288:	80 01       	ld.sh	r1,r0[0x0]
8001f28a:	f0 06       	*unknown*

8001f28c <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001f28c:	eb cd 40 80 	pushm	r7,lr
8001f290:	1a 97       	mov	r7,sp
8001f292:	20 1d       	sub	sp,4
8001f294:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001f298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f29c:	2f 88       	sub	r8,-8
8001f29e:	2e 08       	sub	r8,-32
8001f2a0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f2a2:	10 9c       	mov	r12,r8
8001f2a4:	2f fd       	sub	sp,-4
8001f2a6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f2aa <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001f2aa:	eb cd 40 80 	pushm	r7,lr
8001f2ae:	1a 97       	mov	r7,sp
8001f2b0:	20 1d       	sub	sp,4
8001f2b2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001f2b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f2ba:	2f 88       	sub	r8,-8
8001f2bc:	2d f8       	sub	r8,-33
8001f2be:	11 88       	ld.ub	r8,r8[0x0]
}
8001f2c0:	10 9c       	mov	r12,r8
8001f2c2:	2f fd       	sub	sp,-4
8001f2c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f2c8 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001f2c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f2cc:	1a 97       	mov	r7,sp
8001f2ce:	20 1d       	sub	sp,4
8001f2d0:	48 86       	lddpc	r6,8001f2f0 <mavlink_msg_mission_item_get_seq+0x28>
8001f2d2:	1e 26       	rsub	r6,pc
8001f2d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001f2d8:	31 cb       	mov	r11,28
8001f2da:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2de:	c9 7e       	rcall	8001f00c <_MAV_RETURN_uint16_t>
8001f2e0:	18 98       	mov	r8,r12
8001f2e2:	5c 88       	casts.h	r8
8001f2e4:	5c 88       	casts.h	r8
}
8001f2e6:	10 9c       	mov	r12,r8
8001f2e8:	2f fd       	sub	sp,-4
8001f2ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f2ee:	00 00       	add	r0,r0
8001f2f0:	80 01       	ld.sh	r1,r0[0x0]
8001f2f2:	f1 56 eb cd 	st.h	r8[-5171],r6

8001f2f4 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001f2f4:	eb cd 40 80 	pushm	r7,lr
8001f2f8:	1a 97       	mov	r7,sp
8001f2fa:	20 1d       	sub	sp,4
8001f2fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001f300:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f304:	2f 88       	sub	r8,-8
8001f306:	2d e8       	sub	r8,-34
8001f308:	11 88       	ld.ub	r8,r8[0x0]
}
8001f30a:	10 9c       	mov	r12,r8
8001f30c:	2f fd       	sub	sp,-4
8001f30e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f312 <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001f312:	eb cd 40 c0 	pushm	r6-r7,lr
8001f316:	1a 97       	mov	r7,sp
8001f318:	20 1d       	sub	sp,4
8001f31a:	48 86       	lddpc	r6,8001f338 <mavlink_msg_mission_item_get_command+0x26>
8001f31c:	1e 26       	rsub	r6,pc
8001f31e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001f322:	31 eb       	mov	r11,30
8001f324:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f328:	c7 2e       	rcall	8001f00c <_MAV_RETURN_uint16_t>
8001f32a:	18 98       	mov	r8,r12
8001f32c:	5c 88       	casts.h	r8
8001f32e:	5c 88       	casts.h	r8
}
8001f330:	10 9c       	mov	r12,r8
8001f332:	2f fd       	sub	sp,-4
8001f334:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f338:	80 01       	ld.sh	r1,r0[0x0]
8001f33a:	f1 a0 eb cd 	ldc0.w	cr11,r0[0x3b34]

8001f33c <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001f33c:	eb cd 40 80 	pushm	r7,lr
8001f340:	1a 97       	mov	r7,sp
8001f342:	20 1d       	sub	sp,4
8001f344:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001f348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f34c:	2f 88       	sub	r8,-8
8001f34e:	2d d8       	sub	r8,-35
8001f350:	11 88       	ld.ub	r8,r8[0x0]
}
8001f352:	10 9c       	mov	r12,r8
8001f354:	2f fd       	sub	sp,-4
8001f356:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f35a <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001f35a:	eb cd 40 80 	pushm	r7,lr
8001f35e:	1a 97       	mov	r7,sp
8001f360:	20 1d       	sub	sp,4
8001f362:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001f366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f36a:	2f 88       	sub	r8,-8
8001f36c:	2d c8       	sub	r8,-36
8001f36e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f370:	10 9c       	mov	r12,r8
8001f372:	2f fd       	sub	sp,-4
8001f374:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f378 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001f378:	eb cd 40 c0 	pushm	r6-r7,lr
8001f37c:	1a 97       	mov	r7,sp
8001f37e:	20 1d       	sub	sp,4
8001f380:	48 76       	lddpc	r6,8001f39c <mavlink_msg_mission_item_get_param1+0x24>
8001f382:	1e 26       	rsub	r6,pc
8001f384:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001f388:	30 0b       	mov	r11,0
8001f38a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f38e:	c7 fe       	rcall	8001f08c <_MAV_RETURN_float>
8001f390:	18 98       	mov	r8,r12
}
8001f392:	10 9c       	mov	r12,r8
8001f394:	2f fd       	sub	sp,-4
8001f396:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f39a:	00 00       	add	r0,r0
8001f39c:	80 01       	ld.sh	r1,r0[0x0]
8001f39e:	f2 06       	*unknown*

8001f3a0 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001f3a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f3a4:	1a 97       	mov	r7,sp
8001f3a6:	20 1d       	sub	sp,4
8001f3a8:	48 76       	lddpc	r6,8001f3c4 <mavlink_msg_mission_item_get_param2+0x24>
8001f3aa:	1e 26       	rsub	r6,pc
8001f3ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001f3b0:	30 4b       	mov	r11,4
8001f3b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3b6:	c6 be       	rcall	8001f08c <_MAV_RETURN_float>
8001f3b8:	18 98       	mov	r8,r12
}
8001f3ba:	10 9c       	mov	r12,r8
8001f3bc:	2f fd       	sub	sp,-4
8001f3be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f3c2:	00 00       	add	r0,r0
8001f3c4:	80 01       	ld.sh	r1,r0[0x0]
8001f3c6:	f2 2e eb cd 	sub	lr,-857139

8001f3c8 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001f3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f3cc:	1a 97       	mov	r7,sp
8001f3ce:	20 1d       	sub	sp,4
8001f3d0:	48 76       	lddpc	r6,8001f3ec <mavlink_msg_mission_item_get_param3+0x24>
8001f3d2:	1e 26       	rsub	r6,pc
8001f3d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001f3d8:	30 8b       	mov	r11,8
8001f3da:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3de:	c5 7e       	rcall	8001f08c <_MAV_RETURN_float>
8001f3e0:	18 98       	mov	r8,r12
}
8001f3e2:	10 9c       	mov	r12,r8
8001f3e4:	2f fd       	sub	sp,-4
8001f3e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f3ea:	00 00       	add	r0,r0
8001f3ec:	80 01       	ld.sh	r1,r0[0x0]
8001f3ee:	f2 56 eb cd 	cp.w	r6,-791603

8001f3f0 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001f3f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f3f4:	1a 97       	mov	r7,sp
8001f3f6:	20 1d       	sub	sp,4
8001f3f8:	48 76       	lddpc	r6,8001f414 <mavlink_msg_mission_item_get_param4+0x24>
8001f3fa:	1e 26       	rsub	r6,pc
8001f3fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001f400:	30 cb       	mov	r11,12
8001f402:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f406:	c4 3e       	rcall	8001f08c <_MAV_RETURN_float>
8001f408:	18 98       	mov	r8,r12
}
8001f40a:	10 9c       	mov	r12,r8
8001f40c:	2f fd       	sub	sp,-4
8001f40e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f412:	00 00       	add	r0,r0
8001f414:	80 01       	ld.sh	r1,r0[0x0]
8001f416:	f2 7e eb cd 	mov	lr,-791603

8001f418 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001f418:	eb cd 40 c0 	pushm	r6-r7,lr
8001f41c:	1a 97       	mov	r7,sp
8001f41e:	20 1d       	sub	sp,4
8001f420:	48 76       	lddpc	r6,8001f43c <mavlink_msg_mission_item_get_x+0x24>
8001f422:	1e 26       	rsub	r6,pc
8001f424:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001f428:	31 0b       	mov	r11,16
8001f42a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f42e:	c2 fe       	rcall	8001f08c <_MAV_RETURN_float>
8001f430:	18 98       	mov	r8,r12
}
8001f432:	10 9c       	mov	r12,r8
8001f434:	2f fd       	sub	sp,-4
8001f436:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f43a:	00 00       	add	r0,r0
8001f43c:	80 01       	ld.sh	r1,r0[0x0]
8001f43e:	f2 a6       	*unknown*

8001f440 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001f440:	eb cd 40 c0 	pushm	r6-r7,lr
8001f444:	1a 97       	mov	r7,sp
8001f446:	20 1d       	sub	sp,4
8001f448:	48 76       	lddpc	r6,8001f464 <mavlink_msg_mission_item_get_y+0x24>
8001f44a:	1e 26       	rsub	r6,pc
8001f44c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001f450:	31 4b       	mov	r11,20
8001f452:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f456:	c1 be       	rcall	8001f08c <_MAV_RETURN_float>
8001f458:	18 98       	mov	r8,r12
}
8001f45a:	10 9c       	mov	r12,r8
8001f45c:	2f fd       	sub	sp,-4
8001f45e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f462:	00 00       	add	r0,r0
8001f464:	80 01       	ld.sh	r1,r0[0x0]
8001f466:	f2 ce eb cd 	sub	lr,r9,-5171

8001f468 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001f468:	eb cd 40 c0 	pushm	r6-r7,lr
8001f46c:	1a 97       	mov	r7,sp
8001f46e:	20 1d       	sub	sp,4
8001f470:	48 76       	lddpc	r6,8001f48c <mavlink_msg_mission_item_get_z+0x24>
8001f472:	1e 26       	rsub	r6,pc
8001f474:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001f478:	31 8b       	mov	r11,24
8001f47a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f47e:	c0 7e       	rcall	8001f08c <_MAV_RETURN_float>
8001f480:	18 98       	mov	r8,r12
}
8001f482:	10 9c       	mov	r12,r8
8001f484:	2f fd       	sub	sp,-4
8001f486:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f48a:	00 00       	add	r0,r0
8001f48c:	80 01       	ld.sh	r1,r0[0x0]
8001f48e:	f2 f6 eb cd 	ld.w	r6,r9[-5171]

8001f490 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001f490:	eb cd 40 c0 	pushm	r6-r7,lr
8001f494:	1a 97       	mov	r7,sp
8001f496:	20 2d       	sub	sp,8
8001f498:	4b a6       	lddpc	r6,8001f580 <mavlink_msg_mission_item_decode+0xf0>
8001f49a:	1e 26       	rsub	r6,pc
8001f49c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f4a0:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001f4a4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4a8:	c6 8f       	rcall	8001f378 <mavlink_msg_mission_item_get_param1>
8001f4aa:	18 99       	mov	r9,r12
8001f4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4b0:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001f4b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4b6:	c7 5f       	rcall	8001f3a0 <mavlink_msg_mission_item_get_param2>
8001f4b8:	18 99       	mov	r9,r12
8001f4ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4be:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001f4c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4c4:	c8 2f       	rcall	8001f3c8 <mavlink_msg_mission_item_get_param3>
8001f4c6:	18 99       	mov	r9,r12
8001f4c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4cc:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001f4ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4d2:	c8 ff       	rcall	8001f3f0 <mavlink_msg_mission_item_get_param4>
8001f4d4:	18 99       	mov	r9,r12
8001f4d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4da:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001f4dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4e0:	c9 cf       	rcall	8001f418 <mavlink_msg_mission_item_get_x>
8001f4e2:	18 99       	mov	r9,r12
8001f4e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4e8:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001f4ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4ee:	ca 9f       	rcall	8001f440 <mavlink_msg_mission_item_get_y>
8001f4f0:	18 99       	mov	r9,r12
8001f4f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f4f6:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001f4f8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4fc:	cb 6f       	rcall	8001f468 <mavlink_msg_mission_item_get_z>
8001f4fe:	18 99       	mov	r9,r12
8001f500:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f504:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001f506:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f50a:	cd fe       	rcall	8001f2c8 <mavlink_msg_mission_item_get_seq>
8001f50c:	18 98       	mov	r8,r12
8001f50e:	5c 88       	casts.h	r8
8001f510:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f514:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001f518:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f51c:	cf be       	rcall	8001f312 <mavlink_msg_mission_item_get_command>
8001f51e:	18 98       	mov	r8,r12
8001f520:	5c 88       	casts.h	r8
8001f522:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f526:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001f52a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f52e:	ca fe       	rcall	8001f28c <mavlink_msg_mission_item_get_target_system>
8001f530:	18 98       	mov	r8,r12
8001f532:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f536:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001f53a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f53e:	cb 6e       	rcall	8001f2aa <mavlink_msg_mission_item_get_target_component>
8001f540:	18 98       	mov	r8,r12
8001f542:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f546:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001f54a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f54e:	cd 3e       	rcall	8001f2f4 <mavlink_msg_mission_item_get_frame>
8001f550:	18 98       	mov	r8,r12
8001f552:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f556:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001f55a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f55e:	ce fe       	rcall	8001f33c <mavlink_msg_mission_item_get_current>
8001f560:	18 98       	mov	r8,r12
8001f562:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f566:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001f56a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f56e:	cf 6e       	rcall	8001f35a <mavlink_msg_mission_item_get_autocontinue>
8001f570:	18 98       	mov	r8,r12
8001f572:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f576:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001f57a:	2f ed       	sub	sp,-8
8001f57c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f580:	80 01       	ld.sh	r1,r0[0x0]
8001f582:	f3 1e eb cd 	ld.uh	lr,r9[-5171]

8001f584 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001f584:	eb cd 40 c0 	pushm	r6-r7,lr
8001f588:	1a 97       	mov	r7,sp
8001f58a:	20 5d       	sub	sp,20
8001f58c:	49 56       	lddpc	r6,8001f5e0 <mavlink_msg_mission_request_send+0x5c>
8001f58e:	1e 26       	rsub	r6,pc
8001f590:	ef 4c ff f8 	st.w	r7[-8],r12
8001f594:	12 98       	mov	r8,r9
8001f596:	16 99       	mov	r9,r11
8001f598:	ef 69 ff f4 	st.b	r7[-12],r9
8001f59c:	14 99       	mov	r9,r10
8001f59e:	ef 69 ff f0 	st.b	r7[-16],r9
8001f5a2:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f5a6:	ee c9 00 14 	sub	r9,r7,20
8001f5aa:	ee c8 00 04 	sub	r8,r7,4
8001f5ae:	12 9b       	mov	r11,r9
8001f5b0:	10 9c       	mov	r12,r8
8001f5b2:	fe b0 fc c1 	rcall	8001ef34 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f5b6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f5ba:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f5be:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f5c2:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001f5c6:	ee ca 00 04 	sub	r10,r7,4
8001f5ca:	e0 68 00 e6 	mov	r8,230
8001f5ce:	30 49       	mov	r9,4
8001f5d0:	32 8b       	mov	r11,40
8001f5d2:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f5d6:	fe b0 fc 01 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001f5da:	2f bd       	sub	sp,-20
8001f5dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f5e0:	80 01       	ld.sh	r1,r0[0x0]
8001f5e2:	f4 12 eb cd 	cache	r2[973],0x1d

8001f5e4 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001f5e4:	eb cd 40 80 	pushm	r7,lr
8001f5e8:	1a 97       	mov	r7,sp
8001f5ea:	20 1d       	sub	sp,4
8001f5ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f5f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f5f4:	2f 88       	sub	r8,-8
8001f5f6:	2f e8       	sub	r8,-2
8001f5f8:	11 88       	ld.ub	r8,r8[0x0]
}
8001f5fa:	10 9c       	mov	r12,r8
8001f5fc:	2f fd       	sub	sp,-4
8001f5fe:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f602 <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001f602:	eb cd 40 80 	pushm	r7,lr
8001f606:	1a 97       	mov	r7,sp
8001f608:	20 1d       	sub	sp,4
8001f60a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f60e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f612:	2f 88       	sub	r8,-8
8001f614:	2f d8       	sub	r8,-3
8001f616:	11 88       	ld.ub	r8,r8[0x0]
}
8001f618:	10 9c       	mov	r12,r8
8001f61a:	2f fd       	sub	sp,-4
8001f61c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f620 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001f620:	eb cd 40 c0 	pushm	r6-r7,lr
8001f624:	1a 97       	mov	r7,sp
8001f626:	20 1d       	sub	sp,4
8001f628:	48 86       	lddpc	r6,8001f648 <mavlink_msg_mission_request_get_seq+0x28>
8001f62a:	1e 26       	rsub	r6,pc
8001f62c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f630:	30 0b       	mov	r11,0
8001f632:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f636:	fe b0 fc eb 	rcall	8001f00c <_MAV_RETURN_uint16_t>
8001f63a:	18 98       	mov	r8,r12
8001f63c:	5c 88       	casts.h	r8
8001f63e:	5c 88       	casts.h	r8
}
8001f640:	10 9c       	mov	r12,r8
8001f642:	2f fd       	sub	sp,-4
8001f644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f648:	80 01       	ld.sh	r1,r0[0x0]
8001f64a:	f4 ae       	*unknown*

8001f64c <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001f64c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f650:	1a 97       	mov	r7,sp
8001f652:	20 2d       	sub	sp,8
8001f654:	49 06       	lddpc	r6,8001f694 <mavlink_msg_mission_request_decode+0x48>
8001f656:	1e 26       	rsub	r6,pc
8001f658:	ef 4c ff fc 	st.w	r7[-4],r12
8001f65c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001f660:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f664:	cd ef       	rcall	8001f620 <mavlink_msg_mission_request_get_seq>
8001f666:	18 98       	mov	r8,r12
8001f668:	5c 88       	casts.h	r8
8001f66a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f66e:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001f670:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f674:	cb 8f       	rcall	8001f5e4 <mavlink_msg_mission_request_get_target_system>
8001f676:	18 98       	mov	r8,r12
8001f678:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f67c:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001f67e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f682:	cc 0f       	rcall	8001f602 <mavlink_msg_mission_request_get_target_component>
8001f684:	18 98       	mov	r8,r12
8001f686:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f68a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001f68c:	2f ed       	sub	sp,-8
8001f68e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f692:	00 00       	add	r0,r0
8001f694:	80 01       	ld.sh	r1,r0[0x0]
8001f696:	f4 da eb cd 	satsub.w	r10,r10,-5171

8001f698 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001f698:	eb cd 40 80 	pushm	r7,lr
8001f69c:	1a 97       	mov	r7,sp
8001f69e:	20 1d       	sub	sp,4
8001f6a0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f6a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6a8:	2f 88       	sub	r8,-8
8001f6aa:	2f e8       	sub	r8,-2
8001f6ac:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6ae:	10 9c       	mov	r12,r8
8001f6b0:	2f fd       	sub	sp,-4
8001f6b2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6b6 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001f6b6:	eb cd 40 80 	pushm	r7,lr
8001f6ba:	1a 97       	mov	r7,sp
8001f6bc:	20 1d       	sub	sp,4
8001f6be:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f6c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6c6:	2f 88       	sub	r8,-8
8001f6c8:	2f d8       	sub	r8,-3
8001f6ca:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6cc:	10 9c       	mov	r12,r8
8001f6ce:	2f fd       	sub	sp,-4
8001f6d0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6d4 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001f6d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f6d8:	1a 97       	mov	r7,sp
8001f6da:	20 1d       	sub	sp,4
8001f6dc:	48 86       	lddpc	r6,8001f6fc <mavlink_msg_mission_set_current_get_seq+0x28>
8001f6de:	1e 26       	rsub	r6,pc
8001f6e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f6e4:	30 0b       	mov	r11,0
8001f6e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6ea:	fe b0 fc 91 	rcall	8001f00c <_MAV_RETURN_uint16_t>
8001f6ee:	18 98       	mov	r8,r12
8001f6f0:	5c 88       	casts.h	r8
8001f6f2:	5c 88       	casts.h	r8
}
8001f6f4:	10 9c       	mov	r12,r8
8001f6f6:	2f fd       	sub	sp,-4
8001f6f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f6fc:	80 01       	ld.sh	r1,r0[0x0]
8001f6fe:	f5 62 eb cd 	st.b	r10[-5171],r2

8001f700 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001f700:	eb cd 40 c0 	pushm	r6-r7,lr
8001f704:	1a 97       	mov	r7,sp
8001f706:	20 2d       	sub	sp,8
8001f708:	49 06       	lddpc	r6,8001f748 <mavlink_msg_mission_set_current_decode+0x48>
8001f70a:	1e 26       	rsub	r6,pc
8001f70c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f710:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001f714:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f718:	cd ef       	rcall	8001f6d4 <mavlink_msg_mission_set_current_get_seq>
8001f71a:	18 98       	mov	r8,r12
8001f71c:	5c 88       	casts.h	r8
8001f71e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f722:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001f724:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f728:	cb 8f       	rcall	8001f698 <mavlink_msg_mission_set_current_get_target_system>
8001f72a:	18 98       	mov	r8,r12
8001f72c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f730:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001f732:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f736:	cc 0f       	rcall	8001f6b6 <mavlink_msg_mission_set_current_get_target_component>
8001f738:	18 98       	mov	r8,r12
8001f73a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f73e:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001f740:	2f ed       	sub	sp,-8
8001f742:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f746:	00 00       	add	r0,r0
8001f748:	80 01       	ld.sh	r1,r0[0x0]
8001f74a:	f5 8e       	*unknown*

8001f74c <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001f74c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f750:	1a 97       	mov	r7,sp
8001f752:	20 3d       	sub	sp,12
8001f754:	48 e6       	lddpc	r6,8001f78c <mavlink_msg_mission_current_send+0x40>
8001f756:	1e 26       	rsub	r6,pc
8001f758:	ef 4c ff f8 	st.w	r7[-8],r12
8001f75c:	16 98       	mov	r8,r11
8001f75e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f762:	ee c9 00 0c 	sub	r9,r7,12
8001f766:	ee c8 00 04 	sub	r8,r7,4
8001f76a:	12 9b       	mov	r11,r9
8001f76c:	10 9c       	mov	r12,r8
8001f76e:	fe b0 fb e3 	rcall	8001ef34 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001f772:	ee ca 00 04 	sub	r10,r7,4
8001f776:	31 c8       	mov	r8,28
8001f778:	30 29       	mov	r9,2
8001f77a:	32 ab       	mov	r11,42
8001f77c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f780:	fe b0 fb 2c 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001f784:	2f dd       	sub	sp,-12
8001f786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f78a:	00 00       	add	r0,r0
8001f78c:	80 01       	ld.sh	r1,r0[0x0]
8001f78e:	f5 da       	*unknown*

8001f790 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001f790:	eb cd 40 80 	pushm	r7,lr
8001f794:	1a 97       	mov	r7,sp
8001f796:	20 1d       	sub	sp,4
8001f798:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f79c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f7a0:	2f 88       	sub	r8,-8
8001f7a2:	11 88       	ld.ub	r8,r8[0x0]
}
8001f7a4:	10 9c       	mov	r12,r8
8001f7a6:	2f fd       	sub	sp,-4
8001f7a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f7ac <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001f7ac:	eb cd 40 80 	pushm	r7,lr
8001f7b0:	1a 97       	mov	r7,sp
8001f7b2:	20 1d       	sub	sp,4
8001f7b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f7b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f7bc:	2f 88       	sub	r8,-8
8001f7be:	2f f8       	sub	r8,-1
8001f7c0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f7c2:	10 9c       	mov	r12,r8
8001f7c4:	2f fd       	sub	sp,-4
8001f7c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f7ca <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001f7ca:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7ce:	1a 97       	mov	r7,sp
8001f7d0:	20 2d       	sub	sp,8
8001f7d2:	48 c6       	lddpc	r6,8001f800 <mavlink_msg_mission_request_list_decode+0x36>
8001f7d4:	1e 26       	rsub	r6,pc
8001f7d6:	ef 4c ff fc 	st.w	r7[-4],r12
8001f7da:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001f7de:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7e2:	cd 7f       	rcall	8001f790 <mavlink_msg_mission_request_list_get_target_system>
8001f7e4:	18 98       	mov	r8,r12
8001f7e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f7ea:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001f7ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7f0:	cd ef       	rcall	8001f7ac <mavlink_msg_mission_request_list_get_target_component>
8001f7f2:	18 98       	mov	r8,r12
8001f7f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f7f8:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001f7fa:	2f ed       	sub	sp,-8
8001f7fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f800:	80 01       	ld.sh	r1,r0[0x0]
8001f802:	f6 58 eb cd 	cp.w	r8,-529459

8001f804 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001f804:	eb cd 40 c0 	pushm	r6-r7,lr
8001f808:	1a 97       	mov	r7,sp
8001f80a:	20 5d       	sub	sp,20
8001f80c:	49 56       	lddpc	r6,8001f860 <mavlink_msg_mission_count_send+0x5c>
8001f80e:	1e 26       	rsub	r6,pc
8001f810:	ef 4c ff f8 	st.w	r7[-8],r12
8001f814:	12 98       	mov	r8,r9
8001f816:	16 99       	mov	r9,r11
8001f818:	ef 69 ff f4 	st.b	r7[-12],r9
8001f81c:	14 99       	mov	r9,r10
8001f81e:	ef 69 ff f0 	st.b	r7[-16],r9
8001f822:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001f826:	ee c9 00 14 	sub	r9,r7,20
8001f82a:	ee c8 00 04 	sub	r8,r7,4
8001f82e:	12 9b       	mov	r11,r9
8001f830:	10 9c       	mov	r12,r8
8001f832:	fe b0 fb 81 	rcall	8001ef34 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f836:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f83a:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f83e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f842:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001f846:	ee ca 00 04 	sub	r10,r7,4
8001f84a:	e0 68 00 dd 	mov	r8,221
8001f84e:	30 49       	mov	r9,4
8001f850:	32 cb       	mov	r11,44
8001f852:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f856:	fe b0 fa c1 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001f85a:	2f bd       	sub	sp,-20
8001f85c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f860:	80 01       	ld.sh	r1,r0[0x0]
8001f862:	f6 92 eb cd 	brhs	7ff1cffc <_estack+0x7ff0cffc>

8001f864 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001f864:	eb cd 40 80 	pushm	r7,lr
8001f868:	1a 97       	mov	r7,sp
8001f86a:	20 1d       	sub	sp,4
8001f86c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f870:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f874:	2f 88       	sub	r8,-8
8001f876:	2f e8       	sub	r8,-2
8001f878:	11 88       	ld.ub	r8,r8[0x0]
}
8001f87a:	10 9c       	mov	r12,r8
8001f87c:	2f fd       	sub	sp,-4
8001f87e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f882 <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001f882:	eb cd 40 80 	pushm	r7,lr
8001f886:	1a 97       	mov	r7,sp
8001f888:	20 1d       	sub	sp,4
8001f88a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f88e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f892:	2f 88       	sub	r8,-8
8001f894:	2f d8       	sub	r8,-3
8001f896:	11 88       	ld.ub	r8,r8[0x0]
}
8001f898:	10 9c       	mov	r12,r8
8001f89a:	2f fd       	sub	sp,-4
8001f89c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f8a0 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001f8a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f8a4:	1a 97       	mov	r7,sp
8001f8a6:	20 1d       	sub	sp,4
8001f8a8:	48 86       	lddpc	r6,8001f8c8 <mavlink_msg_mission_count_get_count+0x28>
8001f8aa:	1e 26       	rsub	r6,pc
8001f8ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f8b0:	30 0b       	mov	r11,0
8001f8b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8b6:	fe b0 fb ab 	rcall	8001f00c <_MAV_RETURN_uint16_t>
8001f8ba:	18 98       	mov	r8,r12
8001f8bc:	5c 88       	casts.h	r8
8001f8be:	5c 88       	casts.h	r8
}
8001f8c0:	10 9c       	mov	r12,r8
8001f8c2:	2f fd       	sub	sp,-4
8001f8c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f8c8:	80 01       	ld.sh	r1,r0[0x0]
8001f8ca:	f7 2e eb cd 	ld.sb	lr,r11[-5171]

8001f8cc <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001f8cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f8d0:	1a 97       	mov	r7,sp
8001f8d2:	20 2d       	sub	sp,8
8001f8d4:	49 06       	lddpc	r6,8001f914 <mavlink_msg_mission_count_decode+0x48>
8001f8d6:	1e 26       	rsub	r6,pc
8001f8d8:	ef 4c ff fc 	st.w	r7[-4],r12
8001f8dc:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001f8e0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8e4:	cd ef       	rcall	8001f8a0 <mavlink_msg_mission_count_get_count>
8001f8e6:	18 98       	mov	r8,r12
8001f8e8:	5c 88       	casts.h	r8
8001f8ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f8ee:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001f8f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8f4:	cb 8f       	rcall	8001f864 <mavlink_msg_mission_count_get_target_system>
8001f8f6:	18 98       	mov	r8,r12
8001f8f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f8fc:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001f8fe:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f902:	cc 0f       	rcall	8001f882 <mavlink_msg_mission_count_get_target_component>
8001f904:	18 98       	mov	r8,r12
8001f906:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f90a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001f90c:	2f ed       	sub	sp,-8
8001f90e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f912:	00 00       	add	r0,r0
8001f914:	80 01       	ld.sh	r1,r0[0x0]
8001f916:	f7 5a eb cd 	st.h	r11[-5171],r10

8001f918 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001f918:	eb cd 40 80 	pushm	r7,lr
8001f91c:	1a 97       	mov	r7,sp
8001f91e:	20 1d       	sub	sp,4
8001f920:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f924:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f928:	2f 88       	sub	r8,-8
8001f92a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f92c:	10 9c       	mov	r12,r8
8001f92e:	2f fd       	sub	sp,-4
8001f930:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f934 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001f934:	eb cd 40 80 	pushm	r7,lr
8001f938:	1a 97       	mov	r7,sp
8001f93a:	20 1d       	sub	sp,4
8001f93c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f940:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f944:	2f 88       	sub	r8,-8
8001f946:	2f f8       	sub	r8,-1
8001f948:	11 88       	ld.ub	r8,r8[0x0]
}
8001f94a:	10 9c       	mov	r12,r8
8001f94c:	2f fd       	sub	sp,-4
8001f94e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f952 <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001f952:	eb cd 40 c0 	pushm	r6-r7,lr
8001f956:	1a 97       	mov	r7,sp
8001f958:	20 2d       	sub	sp,8
8001f95a:	48 c6       	lddpc	r6,8001f988 <mavlink_msg_mission_clear_all_decode+0x36>
8001f95c:	1e 26       	rsub	r6,pc
8001f95e:	ef 4c ff fc 	st.w	r7[-4],r12
8001f962:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001f966:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f96a:	cd 7f       	rcall	8001f918 <mavlink_msg_mission_clear_all_get_target_system>
8001f96c:	18 98       	mov	r8,r12
8001f96e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f972:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001f974:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f978:	cd ef       	rcall	8001f934 <mavlink_msg_mission_clear_all_get_target_component>
8001f97a:	18 98       	mov	r8,r12
8001f97c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f980:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001f982:	2f ed       	sub	sp,-8
8001f984:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f988:	80 01       	ld.sh	r1,r0[0x0]
8001f98a:	f7 e0 eb cd 	sthh.w	sp[0x2f0],r11:t,r0:b

8001f98c <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001f98c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f990:	1a 97       	mov	r7,sp
8001f992:	20 3d       	sub	sp,12
8001f994:	48 e6       	lddpc	r6,8001f9cc <mavlink_msg_mission_item_reached_send+0x40>
8001f996:	1e 26       	rsub	r6,pc
8001f998:	ef 4c ff f8 	st.w	r7[-8],r12
8001f99c:	16 98       	mov	r8,r11
8001f99e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f9a2:	ee c9 00 0c 	sub	r9,r7,12
8001f9a6:	ee c8 00 04 	sub	r8,r7,4
8001f9aa:	12 9b       	mov	r11,r9
8001f9ac:	10 9c       	mov	r12,r8
8001f9ae:	fe b0 fa c3 	rcall	8001ef34 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001f9b2:	ee ca 00 04 	sub	r10,r7,4
8001f9b6:	30 b8       	mov	r8,11
8001f9b8:	30 29       	mov	r9,2
8001f9ba:	32 eb       	mov	r11,46
8001f9bc:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f9c0:	fe b0 fa 0c 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001f9c4:	2f dd       	sub	sp,-12
8001f9c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f9ca:	00 00       	add	r0,r0
8001f9cc:	80 01       	ld.sh	r1,r0[0x0]
8001f9ce:	f8 1a eb cd 	mems	-20684,0x15

8001f9d0 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001f9d0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f9d4:	1a 97       	mov	r7,sp
8001f9d6:	20 5d       	sub	sp,20
8001f9d8:	49 36       	lddpc	r6,8001fa24 <mavlink_msg_mission_ack_send+0x54>
8001f9da:	1e 26       	rsub	r6,pc
8001f9dc:	ef 4c ff f8 	st.w	r7[-8],r12
8001f9e0:	12 98       	mov	r8,r9
8001f9e2:	16 99       	mov	r9,r11
8001f9e4:	ef 69 ff f4 	st.b	r7[-12],r9
8001f9e8:	14 99       	mov	r9,r10
8001f9ea:	ef 69 ff f0 	st.b	r7[-16],r9
8001f9ee:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001f9f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f9f6:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001f9fa:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f9fe:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001fa02:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001fa06:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001fa0a:	ee ca 00 04 	sub	r10,r7,4
8001fa0e:	e0 68 00 99 	mov	r8,153
8001fa12:	30 39       	mov	r9,3
8001fa14:	32 fb       	mov	r11,47
8001fa16:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fa1a:	fe b0 f9 df 	rcall	8001edd8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001fa1e:	2f bd       	sub	sp,-20
8001fa20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fa24:	80 01       	ld.sh	r1,r0[0x0]
8001fa26:	f8 5e eb cd 	cp.w	lr,-398387

8001fa28 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001fa28:	eb cd 40 80 	pushm	r7,lr
8001fa2c:	1a 97       	mov	r7,sp
8001fa2e:	20 1d       	sub	sp,4
8001fa30:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001fa34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fa38:	2f 88       	sub	r8,-8
8001fa3a:	11 88       	ld.ub	r8,r8[0x0]
}
8001fa3c:	10 9c       	mov	r12,r8
8001fa3e:	2f fd       	sub	sp,-4
8001fa40:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fa44 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001fa44:	eb cd 40 80 	pushm	r7,lr
8001fa48:	1a 97       	mov	r7,sp
8001fa4a:	20 1d       	sub	sp,4
8001fa4c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001fa50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fa54:	2f 88       	sub	r8,-8
8001fa56:	2f f8       	sub	r8,-1
8001fa58:	11 88       	ld.ub	r8,r8[0x0]
}
8001fa5a:	10 9c       	mov	r12,r8
8001fa5c:	2f fd       	sub	sp,-4
8001fa5e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fa62 <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001fa62:	eb cd 40 80 	pushm	r7,lr
8001fa66:	1a 97       	mov	r7,sp
8001fa68:	20 1d       	sub	sp,4
8001fa6a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001fa6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fa72:	2f 88       	sub	r8,-8
8001fa74:	2f e8       	sub	r8,-2
8001fa76:	11 88       	ld.ub	r8,r8[0x0]
}
8001fa78:	10 9c       	mov	r12,r8
8001fa7a:	2f fd       	sub	sp,-4
8001fa7c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fa80 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001fa80:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa84:	1a 97       	mov	r7,sp
8001fa86:	20 2d       	sub	sp,8
8001fa88:	48 f6       	lddpc	r6,8001fac4 <mavlink_msg_mission_ack_decode+0x44>
8001fa8a:	1e 26       	rsub	r6,pc
8001fa8c:	ef 4c ff fc 	st.w	r7[-4],r12
8001fa90:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001fa94:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fa98:	cc 8f       	rcall	8001fa28 <mavlink_msg_mission_ack_get_target_system>
8001fa9a:	18 98       	mov	r8,r12
8001fa9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001faa0:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001faa2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001faa6:	cc ff       	rcall	8001fa44 <mavlink_msg_mission_ack_get_target_component>
8001faa8:	18 98       	mov	r8,r12
8001faaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001faae:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001fab0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fab4:	cd 7f       	rcall	8001fa62 <mavlink_msg_mission_ack_get_type>
8001fab6:	18 98       	mov	r8,r12
8001fab8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fabc:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001fabe:	2f ed       	sub	sp,-8
8001fac0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fac4:	80 01       	ld.sh	r1,r0[0x0]
8001fac6:	f9 0e eb cd 	ld.sh	lr,r12[-5171]

8001fac8 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001fac8:	eb cd 40 80 	pushm	r7,lr
8001facc:	1a 97       	mov	r7,sp
8001face:	20 3d       	sub	sp,12
8001fad0:	ef 4c ff f8 	st.w	r7[-8],r12
8001fad4:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001fad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fadc:	70 09       	ld.w	r9,r8[0x0]
8001fade:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fae2:	70 08       	ld.w	r8,r8[0x0]
8001fae4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001faec:	2f c8       	sub	r8,-4
8001faee:	70 0a       	ld.w	r10,r8[0x0]
8001faf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001faf4:	2f c8       	sub	r8,-4
8001faf6:	70 08       	ld.w	r8,r8[0x0]
8001faf8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001fafc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fb00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fb04:	2f 88       	sub	r8,-8
8001fb06:	70 0a       	ld.w	r10,r8[0x0]
8001fb08:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fb0c:	2f 88       	sub	r8,-8
8001fb0e:	70 08       	ld.w	r8,r8[0x0]
8001fb10:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001fb14:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001fb18:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001fb1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001fb20:	10 9c       	mov	r12,r8
8001fb22:	2f dd       	sub	sp,-12
8001fb24:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fb28 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001fb28:	eb cd 40 c0 	pushm	r6-r7,lr
8001fb2c:	1a 97       	mov	r7,sp
8001fb2e:	20 2d       	sub	sp,8
8001fb30:	48 96       	lddpc	r6,8001fb54 <vector_norm_sqr+0x2c>
8001fb32:	1e 26       	rsub	r6,pc
8001fb34:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001fb38:	ee fb ff f8 	ld.w	r11,r7[-8]
8001fb3c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fb40:	cc 4f       	rcall	8001fac8 <scalar_product>
8001fb42:	18 98       	mov	r8,r12
8001fb44:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001fb48:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001fb4c:	10 9c       	mov	r12,r8
8001fb4e:	2f ed       	sub	sp,-8
8001fb50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb54:	80 01       	ld.sh	r1,r0[0x0]
8001fb56:	f9 b6       	*unknown*

8001fb58 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001fb58:	eb cd 40 c0 	pushm	r6-r7,lr
8001fb5c:	1a 97       	mov	r7,sp
8001fb5e:	20 6d       	sub	sp,24
8001fb60:	49 e6       	lddpc	r6,8001fbd8 <interpolate+0x80>
8001fb62:	1e 26       	rsub	r6,pc
8001fb64:	ef 4c ff f8 	st.w	r7[-8],r12
8001fb68:	ef 4b ff f4 	st.w	r7[-12],r11
8001fb6c:	ef 4a ff f0 	st.w	r7[-16],r10
8001fb70:	ef 49 ff ec 	st.w	r7[-20],r9
8001fb74:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001fb78:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fb7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fb80:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001fb84:	c0 41       	brne	8001fb8c <interpolate+0x34>
	{
		return y1;
8001fb86:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fb8a:	c2 38       	rjmp	8001fbd0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001fb8c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001fb90:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fb94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001fb98:	ee fa ff f8 	ld.w	r10,r7[-8]
8001fb9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fba0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001fba4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001fba8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001fbac:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fbb0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001fbb4:	12 9b       	mov	r11,r9
8001fbb6:	10 9c       	mov	r12,r8
8001fbb8:	f0 16 00 08 	mcall	r6[32]
8001fbbc:	18 98       	mov	r8,r12
8001fbbe:	10 99       	mov	r9,r8
8001fbc0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fbc4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001fbc8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001fbcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001fbd0:	10 9c       	mov	r12,r8
8001fbd2:	2f ad       	sub	sp,-24
8001fbd4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fbd8:	80 01       	ld.sh	r1,r0[0x0]
8001fbda:	f9 e6 eb cd 	sthh.w	sp[0x2f0],r12:t,r6:b

8001fbdc <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001fbdc:	eb cd 40 c0 	pushm	r6-r7,lr
8001fbe0:	1a 97       	mov	r7,sp
8001fbe2:	48 e6       	lddpc	r6,8001fc18 <get_thrust_from_remote+0x3c>
8001fbe4:	1e 26       	rsub	r6,pc
8001fbe6:	30 0c       	mov	r12,0
8001fbe8:	f0 16 00 23 	mcall	r6[140]
8001fbec:	18 98       	mov	r8,r12
8001fbee:	10 9c       	mov	r12,r8
8001fbf0:	f0 16 00 1a 	mcall	r6[104]
8001fbf4:	30 08       	mov	r8,0
8001fbf6:	e0 69 e0 00 	mov	r9,57344
8001fbfa:	ea 19 40 75 	orh	r9,0x4075
8001fbfe:	f0 16 00 0c 	mcall	r6[48]
8001fc02:	14 98       	mov	r8,r10
8001fc04:	16 99       	mov	r9,r11
8001fc06:	10 9a       	mov	r10,r8
8001fc08:	12 9b       	mov	r11,r9
8001fc0a:	f0 16 00 09 	mcall	r6[36]
8001fc0e:	18 98       	mov	r8,r12
8001fc10:	10 9c       	mov	r12,r8
8001fc12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fc16:	00 00       	add	r0,r0
8001fc18:	80 01       	ld.sh	r1,r0[0x0]
8001fc1a:	fa 68 eb cd 	mov	r8,-332851

8001fc1c <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8001fc1c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fc20:	1a 97       	mov	r7,sp
8001fc22:	49 c6       	lddpc	r6,8001fc90 <init_waypoint_handler+0x74>
8001fc24:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
8001fc26:	f0 16 00 0e 	mcall	r6[56]
8001fc2a:	18 99       	mov	r9,r12
8001fc2c:	ec f8 01 68 	ld.w	r8,r6[360]
8001fc30:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
8001fc32:	ec f8 04 00 	ld.w	r8,r6[1024]
8001fc36:	e0 69 27 10 	mov	r9,10000
8001fc3a:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8001fc3c:	f0 16 00 31 	mcall	r6[196]
8001fc40:	18 99       	mov	r9,r12
8001fc42:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc46:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
8001fc48:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc4c:	70 08       	ld.w	r8,r8[0x0]
8001fc4e:	30 19       	mov	r9,1
8001fc50:	f1 49 11 a4 	st.w	r8[4516],r9
	centralData->critical_init = false;
8001fc54:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc58:	70 09       	ld.w	r9,r8[0x0]
8001fc5a:	30 08       	mov	r8,0
8001fc5c:	f3 68 0f 79 	st.b	r9[3961],r8
	centralData->critical_next_state = false;
8001fc60:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc64:	70 09       	ld.w	r9,r8[0x0]
8001fc66:	30 08       	mov	r8,0
8001fc68:	f3 68 0f 7a 	st.b	r9[3962],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8001fc6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc70:	70 08       	ld.w	r8,r8[0x0]
8001fc72:	f0 c9 f1 24 	sub	r9,r8,-3804
8001fc76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc7a:	70 08       	ld.w	r8,r8[0x0]
8001fc7c:	f0 c8 f3 34 	sub	r8,r8,-3276
8001fc80:	12 9b       	mov	r11,r9
8001fc82:	10 9c       	mov	r12,r8
8001fc84:	f0 16 01 54 	mcall	r6[1360]
	init_wp();
8001fc88:	f0 16 00 87 	mcall	r6[540]
}
8001fc8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fc90:	80 01       	ld.sh	r1,r0[0x0]
8001fc92:	fa a8       	*unknown*
8001fc94:	4e 61       	lddpc	r1,8001fe2c <init_wp+0x178>
8001fc96:	76 20       	ld.w	r0,r11[0x8]
8001fc98:	69 6e       	ld.w	lr,r4[0x58]
8001fc9a:	69 74       	ld.w	r4,r4[0x5c]
8001fc9c:	0a 00       	add	r0,r5
8001fc9e:	00 00       	add	r0,r0
8001fca0:	57 61       	stdsp	sp[0x1d8],r1
8001fca2:	79 70       	ld.w	r0,r12[0x5c]
8001fca4:	6f 69       	ld.w	r9,r7[0x58]
8001fca6:	6e 74       	ld.w	r4,r7[0x1c]
8001fca8:	20 4e       	sub	lr,4
8001fcaa:	72 00       	ld.w	r0,r9[0x0]
8001fcac:	20 73       	sub	r3,7
8001fcae:	65 74       	ld.w	r4,r2[0x5c]
8001fcb0:	2c 0a       	sub	r10,-64
	...

8001fcb4 <init_wp>:

void init_wp()
{
8001fcb4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001fcb8:	1a 97       	mov	r7,sp
8001fcba:	21 0d       	sub	sp,64
8001fcbc:	fe f6 02 fc 	ld.w	r6,pc[764]
8001fcc0:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
8001fcc2:	ec f8 03 2c 	ld.w	r8,r6[812]
8001fcc6:	70 08       	ld.w	r8,r8[0x0]
8001fcc8:	58 08       	cp.w	r8,0
8001fcca:	c0 51       	brne	8001fcd4 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8001fccc:	fe cc 00 38 	sub	r12,pc,56
8001fcd0:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
8001fcd4:	ec f8 03 2c 	ld.w	r8,r6[812]
8001fcd8:	70 08       	ld.w	r8,r8[0x0]
8001fcda:	f0 c9 ff ff 	sub	r9,r8,-1
8001fcde:	e0 68 4d d3 	mov	r8,19923
8001fce2:	ea 18 10 62 	orh	r8,0x1062
8001fce6:	f2 08 04 4a 	muls.d	r10,r9,r8
8001fcea:	f6 0a 14 06 	asr	r10,r11,0x6
8001fcee:	f2 08 14 1f 	asr	r8,r9,0x1f
8001fcf2:	f4 08 01 08 	sub	r8,r10,r8
8001fcf6:	e0 6a 03 e8 	mov	r10,1000
8001fcfa:	b5 38       	mul	r8,r10
8001fcfc:	f2 08 01 08 	sub	r8,r9,r8
8001fd00:	ec f9 03 2c 	ld.w	r9,r6[812]
8001fd04:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
8001fd06:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd0a:	70 08       	ld.w	r8,r8[0x0]
8001fd0c:	f1 08 0e dc 	ld.sh	r8,r8[3804]
8001fd10:	58 08       	cp.w	r8,0
8001fd12:	e0 80 01 4f 	breq	8001ffb0 <init_wp+0x2fc>
8001fd16:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd1a:	70 08       	ld.w	r8,r8[0x0]
8001fd1c:	f1 38 0c 24 	ld.ub	r8,r8[3108]
8001fd20:	58 08       	cp.w	r8,0
8001fd22:	c0 91       	brne	8001fd34 <init_wp+0x80>
8001fd24:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd28:	70 08       	ld.w	r8,r8[0x0]
8001fd2a:	f0 f8 0f 80 	ld.w	r8,r8[3968]
8001fd2e:	58 08       	cp.w	r8,0
8001fd30:	e0 80 01 40 	breq	8001ffb0 <init_wp+0x2fc>
8001fd34:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd38:	70 08       	ld.w	r8,r8[0x0]
8001fd3a:	f1 38 0f 76 	ld.ub	r8,r8[3958]
8001fd3e:	ec 18 00 01 	eorl	r8,0x1
8001fd42:	5c 58       	castu.b	r8
8001fd44:	e0 80 01 36 	breq	8001ffb0 <init_wp+0x2fc>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fd48:	30 08       	mov	r8,0
8001fd4a:	ef 68 ff fe 	st.b	r7[-2],r8
8001fd4e:	c2 69       	rjmp	8001ff9a <init_wp+0x2e6>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
8001fd50:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd54:	70 0a       	ld.w	r10,r8[0x0]
8001fd56:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fd5a:	12 98       	mov	r8,r9
8001fd5c:	a1 78       	lsl	r8,0x1
8001fd5e:	12 08       	add	r8,r9
8001fd60:	a5 68       	lsl	r8,0x4
8001fd62:	f4 08 00 08 	add	r8,r10,r8
8001fd66:	f0 c8 f3 30 	sub	r8,r8,-3280
8001fd6a:	11 89       	ld.ub	r9,r8[0x0]
8001fd6c:	30 18       	mov	r8,1
8001fd6e:	f0 09 18 00 	cp.b	r9,r8
8001fd72:	e0 81 01 0f 	brne	8001ff90 <init_wp+0x2dc>
8001fd76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd7a:	70 08       	ld.w	r8,r8[0x0]
8001fd7c:	f1 38 0f 74 	ld.ub	r8,r8[3956]
8001fd80:	ec 18 00 01 	eorl	r8,0x1
8001fd84:	5c 58       	castu.b	r8
8001fd86:	e0 80 01 05 	breq	8001ff90 <init_wp+0x2dc>
			{
				centralData->current_wp_count = i;
8001fd8a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd8e:	70 09       	ld.w	r9,r8[0x0]
8001fd90:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fd94:	f3 68 0e de 	st.b	r9[3806],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
8001fd98:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd9c:	70 0a       	ld.w	r10,r8[0x0]
8001fd9e:	ec f8 00 00 	ld.w	r8,r6[0]
8001fda2:	70 0b       	ld.w	r11,r8[0x0]
8001fda4:	ec f8 00 00 	ld.w	r8,r6[0]
8001fda8:	70 08       	ld.w	r8,r8[0x0]
8001fdaa:	f1 38 0e de 	ld.ub	r8,r8[3806]
8001fdae:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001fdb2:	12 98       	mov	r8,r9
8001fdb4:	a1 78       	lsl	r8,0x1
8001fdb6:	12 08       	add	r8,r9
8001fdb8:	a5 68       	lsl	r8,0x4
8001fdba:	f6 08 00 08 	add	r8,r11,r8
8001fdbe:	f0 c8 f3 34 	sub	r8,r8,-3276
8001fdc2:	f4 cb f1 54 	sub	r11,r10,-3756
8001fdc6:	10 9a       	mov	r10,r8
8001fdc8:	f6 c8 00 00 	sub	r8,r11,0
8001fdcc:	f4 c9 00 00 	sub	r9,r10,0
8001fdd0:	72 0c       	ld.w	r12,r9[0x0]
8001fdd2:	91 0c       	st.w	r8[0x0],r12
8001fdd4:	72 1c       	ld.w	r12,r9[0x4]
8001fdd6:	91 1c       	st.w	r8[0x4],r12
8001fdd8:	72 2c       	ld.w	r12,r9[0x8]
8001fdda:	91 2c       	st.w	r8[0x8],r12
8001fddc:	72 39       	ld.w	r9,r9[0xc]
8001fdde:	91 39       	st.w	r8[0xc],r9
8001fde0:	f6 c8 ff f0 	sub	r8,r11,-16
8001fde4:	f4 c9 ff f0 	sub	r9,r10,-16
8001fde8:	72 0c       	ld.w	r12,r9[0x0]
8001fdea:	91 0c       	st.w	r8[0x0],r12
8001fdec:	72 1c       	ld.w	r12,r9[0x4]
8001fdee:	91 1c       	st.w	r8[0x4],r12
8001fdf0:	72 2c       	ld.w	r12,r9[0x8]
8001fdf2:	91 2c       	st.w	r8[0x8],r12
8001fdf4:	72 39       	ld.w	r9,r9[0xc]
8001fdf6:	91 39       	st.w	r8[0xc],r9
8001fdf8:	f6 c8 ff e0 	sub	r8,r11,-32
8001fdfc:	f4 c9 ff e0 	sub	r9,r10,-32
8001fe00:	72 0a       	ld.w	r10,r9[0x0]
8001fe02:	91 0a       	st.w	r8[0x0],r10
8001fe04:	72 1a       	ld.w	r10,r9[0x4]
8001fe06:	91 1a       	st.w	r8[0x4],r10
8001fe08:	72 2a       	ld.w	r10,r9[0x8]
8001fe0a:	91 2a       	st.w	r8[0x8],r10
8001fe0c:	72 39       	ld.w	r9,r9[0xc]
8001fe0e:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8001fe10:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe14:	70 05       	ld.w	r5,r8[0x0]
8001fe16:	ec f8 00 00 	ld.w	r8,r6[0]
8001fe1a:	70 08       	ld.w	r8,r8[0x0]
8001fe1c:	ec f9 00 00 	ld.w	r9,r6[0]
8001fe20:	72 0e       	ld.w	lr,r9[0x0]
8001fe22:	ee cc 00 40 	sub	r12,r7,64
8001fe26:	20 7d       	sub	sp,28
8001fe28:	1a 99       	mov	r9,sp
8001fe2a:	12 9a       	mov	r10,r9
8001fe2c:	f0 cb f3 94 	sub	r11,r8,-3180
8001fe30:	f4 c8 00 00 	sub	r8,r10,0
8001fe34:	f6 c9 00 00 	sub	r9,r11,0
8001fe38:	72 03       	ld.w	r3,r9[0x0]
8001fe3a:	91 03       	st.w	r8[0x0],r3
8001fe3c:	72 13       	ld.w	r3,r9[0x4]
8001fe3e:	91 13       	st.w	r8[0x4],r3
8001fe40:	72 23       	ld.w	r3,r9[0x8]
8001fe42:	91 23       	st.w	r8[0x8],r3
8001fe44:	72 39       	ld.w	r9,r9[0xc]
8001fe46:	91 39       	st.w	r8[0xc],r9
8001fe48:	f6 e8 00 10 	ld.d	r8,r11[16]
8001fe4c:	f4 e9 00 10 	st.d	r10[16],r8
8001fe50:	76 68       	ld.w	r8,r11[0x18]
8001fe52:	95 68       	st.w	r10[0x18],r8
8001fe54:	20 cd       	sub	sp,48
8001fe56:	1a 98       	mov	r8,sp
8001fe58:	10 9b       	mov	r11,r8
8001fe5a:	fc ca f1 54 	sub	r10,lr,-3756
8001fe5e:	f6 c8 00 00 	sub	r8,r11,0
8001fe62:	f4 c9 00 00 	sub	r9,r10,0
8001fe66:	72 0e       	ld.w	lr,r9[0x0]
8001fe68:	91 0e       	st.w	r8[0x0],lr
8001fe6a:	72 1e       	ld.w	lr,r9[0x4]
8001fe6c:	91 1e       	st.w	r8[0x4],lr
8001fe6e:	72 2e       	ld.w	lr,r9[0x8]
8001fe70:	91 2e       	st.w	r8[0x8],lr
8001fe72:	72 39       	ld.w	r9,r9[0xc]
8001fe74:	91 39       	st.w	r8[0xc],r9
8001fe76:	f6 c8 ff f0 	sub	r8,r11,-16
8001fe7a:	f4 c9 ff f0 	sub	r9,r10,-16
8001fe7e:	72 0e       	ld.w	lr,r9[0x0]
8001fe80:	91 0e       	st.w	r8[0x0],lr
8001fe82:	72 1e       	ld.w	lr,r9[0x4]
8001fe84:	91 1e       	st.w	r8[0x4],lr
8001fe86:	72 2e       	ld.w	lr,r9[0x8]
8001fe88:	91 2e       	st.w	r8[0x8],lr
8001fe8a:	72 39       	ld.w	r9,r9[0xc]
8001fe8c:	91 39       	st.w	r8[0xc],r9
8001fe8e:	f6 c8 ff e0 	sub	r8,r11,-32
8001fe92:	f4 c9 ff e0 	sub	r9,r10,-32
8001fe96:	72 0a       	ld.w	r10,r9[0x0]
8001fe98:	91 0a       	st.w	r8[0x0],r10
8001fe9a:	72 1a       	ld.w	r10,r9[0x4]
8001fe9c:	91 1a       	st.w	r8[0x4],r10
8001fe9e:	72 2a       	ld.w	r10,r9[0x8]
8001fea0:	91 2a       	st.w	r8[0x8],r10
8001fea2:	72 39       	ld.w	r9,r9[0xc]
8001fea4:	91 39       	st.w	r8[0xc],r9
8001fea6:	f0 16 00 f9 	mcall	r6[996]
8001feaa:	2e dd       	sub	sp,-76
8001feac:	ea cb f1 20 	sub	r11,r5,-3808
8001feb0:	ee ca 00 40 	sub	r10,r7,64
8001feb4:	f6 c8 00 00 	sub	r8,r11,0
8001feb8:	f4 c9 00 00 	sub	r9,r10,0
8001febc:	72 0c       	ld.w	r12,r9[0x0]
8001febe:	91 0c       	st.w	r8[0x0],r12
8001fec0:	72 1c       	ld.w	r12,r9[0x4]
8001fec2:	91 1c       	st.w	r8[0x4],r12
8001fec4:	72 2c       	ld.w	r12,r9[0x8]
8001fec6:	91 2c       	st.w	r8[0x8],r12
8001fec8:	72 39       	ld.w	r9,r9[0xc]
8001feca:	91 39       	st.w	r8[0xc],r9
8001fecc:	f6 c8 ff f0 	sub	r8,r11,-16
8001fed0:	f4 c9 ff f0 	sub	r9,r10,-16
8001fed4:	72 0c       	ld.w	r12,r9[0x0]
8001fed6:	91 0c       	st.w	r8[0x0],r12
8001fed8:	72 1c       	ld.w	r12,r9[0x4]
8001feda:	91 1c       	st.w	r8[0x4],r12
8001fedc:	72 2c       	ld.w	r12,r9[0x8]
8001fede:	91 2c       	st.w	r8[0x8],r12
8001fee0:	72 39       	ld.w	r9,r9[0xc]
8001fee2:	91 39       	st.w	r8[0xc],r9
8001fee4:	f6 c8 ff e0 	sub	r8,r11,-32
8001fee8:	f4 c9 ff e0 	sub	r9,r10,-32
8001feec:	72 0a       	ld.w	r10,r9[0x0]
8001feee:	91 0a       	st.w	r8[0x0],r10
8001fef0:	72 1a       	ld.w	r10,r9[0x4]
8001fef2:	91 1a       	st.w	r8[0x4],r10
8001fef4:	72 2a       	ld.w	r10,r9[0x8]
8001fef6:	91 2a       	st.w	r8[0x8],r10
8001fef8:	72 39       	ld.w	r9,r9[0xc]
8001fefa:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
8001fefc:	fe cc 02 5c 	sub	r12,pc,604
8001ff00:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
8001ff04:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001ff08:	30 ab       	mov	r11,10
8001ff0a:	10 9c       	mov	r12,r8
8001ff0c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8001ff10:	fe cc 02 64 	sub	r12,pc,612
8001ff14:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
8001ff18:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff1c:	70 09       	ld.w	r9,r8[0x0]
8001ff1e:	30 18       	mov	r8,1
8001ff20:	f3 68 0f 74 	st.b	r9[3956],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001ff24:	30 08       	mov	r8,0
8001ff26:	ef 68 ff ff 	st.b	r7[-1],r8
8001ff2a:	c2 18       	rjmp	8001ff6c <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8001ff2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ff30:	ec f9 00 00 	ld.w	r9,r6[0]
8001ff34:	72 09       	ld.w	r9,r9[0x0]
8001ff36:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001ff3a:	f4 ca fc 48 	sub	r10,r10,-952
8001ff3e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001ff42:	ec f9 00 00 	ld.w	r9,r6[0]
8001ff46:	72 09       	ld.w	r9,r9[0x0]
8001ff48:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8001ff4c:	f6 cb fc e9 	sub	r11,r11,-791
8001ff50:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8001ff54:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001ff58:	a3 68       	lsl	r8,0x2
8001ff5a:	ee 08 00 08 	add	r8,r7,r8
8001ff5e:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001ff62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ff66:	2f f8       	sub	r8,-1
8001ff68:	ef 68 ff ff 	st.b	r7[-1],r8
8001ff6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001ff70:	30 28       	mov	r8,2
8001ff72:	f0 09 18 00 	cp.b	r9,r8
8001ff76:	fe 98 ff db 	brls	8001ff2c <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8001ff7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ff7e:	70 05       	ld.w	r5,r8[0x0]
8001ff80:	ee c8 00 10 	sub	r8,r7,16
8001ff84:	10 9c       	mov	r12,r8
8001ff86:	fe b0 fd d1 	rcall	8001fb28 <vector_norm_sqr>
8001ff8a:	18 98       	mov	r8,r12
8001ff8c:	eb 48 0f 70 	st.w	r5[3952],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001ff90:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001ff94:	2f f8       	sub	r8,-1
8001ff96:	ef 68 ff fe 	st.b	r7[-2],r8
8001ff9a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001ff9e:	ec f8 00 00 	ld.w	r8,r6[0]
8001ffa2:	70 08       	ld.w	r8,r8[0x0]
8001ffa4:	f1 08 0e dc 	ld.sh	r8,r8[3804]
8001ffa8:	f0 09 19 00 	cp.h	r9,r8
8001ffac:	fe 93 fe d2 	brlo	8001fd50 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8001ffb0:	2f 0d       	sub	sp,-64
8001ffb2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001ffb6:	00 00       	add	r0,r0
8001ffb8:	80 01       	ld.sh	r1,r0[0x0]
8001ffba:	fb 44 4e 75 	st.w	sp[20085],r4
8001ffbe:	6d 62       	ld.w	r2,r6[0x58]
8001ffc0:	65 72       	ld.w	r2,r2[0x5c]
8001ffc2:	20 6f       	sub	pc,6
8001ffc4:	66 20       	ld.w	r0,r3[0x8]
8001ffc6:	57 61       	stdsp	sp[0x1d8],r1
8001ffc8:	79 70       	ld.w	r0,r12[0x5c]
8001ffca:	6f 69       	ld.w	r9,r7[0x58]
8001ffcc:	6e 74       	ld.w	r4,r7[0x1c]
8001ffce:	20 6f       	sub	pc,6
8001ffd0:	6e 62       	ld.w	r2,r7[0x18]
8001ffd2:	6f 61       	ld.w	r1,r7[0x58]
8001ffd4:	72 64       	ld.w	r4,r9[0x18]
8001ffd6:	3a 00       	mov	r0,-96
8001ffd8:	0a 00       	add	r0,r5

8001ffda <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
8001ffda:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffde:	1a 97       	mov	r7,sp
8001ffe0:	20 ed       	sub	sp,56
8001ffe2:	fe f6 03 1a 	ld.w	r6,pc[794]
8001ffe6:	1e 26       	rsub	r6,pc
8001ffe8:	ef 4c ff cc 	st.w	r7[-52],r12
8001ffec:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8001fff0:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001fff4:	30 48       	mov	r8,4
8001fff6:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
8001fff8:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001fffc:	90 08       	ld.sh	r8,r8[0x0]
8001fffe:	ec f9 01 1c 	ld.w	r9,r6[284]
80020002:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80020004:	30 18       	mov	r8,1
80020006:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
8002000a:	30 18       	mov	r8,1
8002000c:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
80020010:	30 38       	mov	r8,3
80020012:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020016:	31 08       	mov	r8,16
80020018:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8002001c:	e0 68 f5 80 	mov	r8,62848
80020020:	ea 18 f0 d4 	orh	r8,0xf0d4
80020024:	e0 69 42 5e 	mov	r9,16990
80020028:	ea 19 40 47 	orh	r9,0x4047
8002002c:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
80020030:	fc 18 60 00 	movh	r8,0x6000
80020034:	e0 69 44 aa 	mov	r9,17578
80020038:	ea 19 40 1a 	orh	r9,0x401a
8002003c:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80020040:	30 08       	mov	r8,0
80020042:	fc 19 40 34 	movh	r9,0x4034
80020046:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8002004a:	fc 18 41 20 	movh	r8,0x4120
8002004e:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
80020052:	fc 18 40 00 	movh	r8,0x4000
80020056:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8002005a:	30 08       	mov	r8,0
8002005c:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020060:	fc 18 42 b4 	movh	r8,0x42b4
80020064:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
80020068:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002006c:	10 9b       	mov	r11,r8
8002006e:	ee ca 00 30 	sub	r10,r7,48
80020072:	f6 c8 00 00 	sub	r8,r11,0
80020076:	f4 c9 00 00 	sub	r9,r10,0
8002007a:	72 0c       	ld.w	r12,r9[0x0]
8002007c:	91 0c       	st.w	r8[0x0],r12
8002007e:	72 1c       	ld.w	r12,r9[0x4]
80020080:	91 1c       	st.w	r8[0x4],r12
80020082:	72 2c       	ld.w	r12,r9[0x8]
80020084:	91 2c       	st.w	r8[0x8],r12
80020086:	72 39       	ld.w	r9,r9[0xc]
80020088:	91 39       	st.w	r8[0xc],r9
8002008a:	f6 c8 ff f0 	sub	r8,r11,-16
8002008e:	f4 c9 ff f0 	sub	r9,r10,-16
80020092:	72 0c       	ld.w	r12,r9[0x0]
80020094:	91 0c       	st.w	r8[0x0],r12
80020096:	72 1c       	ld.w	r12,r9[0x4]
80020098:	91 1c       	st.w	r8[0x4],r12
8002009a:	72 2c       	ld.w	r12,r9[0x8]
8002009c:	91 2c       	st.w	r8[0x8],r12
8002009e:	72 39       	ld.w	r9,r9[0xc]
800200a0:	91 39       	st.w	r8[0xc],r9
800200a2:	f6 c8 ff e0 	sub	r8,r11,-32
800200a6:	f4 c9 ff e0 	sub	r9,r10,-32
800200aa:	72 0a       	ld.w	r10,r9[0x0]
800200ac:	91 0a       	st.w	r8[0x0],r10
800200ae:	72 1a       	ld.w	r10,r9[0x4]
800200b0:	91 1a       	st.w	r8[0x4],r10
800200b2:	72 2a       	ld.w	r10,r9[0x8]
800200b4:	91 2a       	st.w	r8[0x8],r10
800200b6:	72 39       	ld.w	r9,r9[0xc]
800200b8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800200ba:	30 18       	mov	r8,1
800200bc:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
800200c0:	30 08       	mov	r8,0
800200c2:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
800200c6:	30 38       	mov	r8,3
800200c8:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
800200cc:	31 08       	mov	r8,16
800200ce:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
800200d2:	fc 18 20 00 	movh	r8,0x2000
800200d6:	e0 69 42 64 	mov	r9,16996
800200da:	ea 19 40 47 	orh	r9,0x4047
800200de:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
800200e2:	fc 18 60 00 	movh	r8,0x6000
800200e6:	e0 69 44 aa 	mov	r9,17578
800200ea:	ea 19 40 1a 	orh	r9,0x401a
800200ee:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
800200f2:	30 08       	mov	r8,0
800200f4:	fc 19 40 34 	movh	r9,0x4034
800200f8:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800200fc:	fc 18 41 20 	movh	r8,0x4120
80020100:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
80020104:	fc 18 40 80 	movh	r8,0x4080
80020108:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8002010c:	30 08       	mov	r8,0
8002010e:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020112:	fc 18 42 b4 	movh	r8,0x42b4
80020116:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8002011a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002011e:	2d 08       	sub	r8,-48
80020120:	10 9b       	mov	r11,r8
80020122:	ee ca 00 30 	sub	r10,r7,48
80020126:	f6 c8 00 00 	sub	r8,r11,0
8002012a:	f4 c9 00 00 	sub	r9,r10,0
8002012e:	72 0c       	ld.w	r12,r9[0x0]
80020130:	91 0c       	st.w	r8[0x0],r12
80020132:	72 1c       	ld.w	r12,r9[0x4]
80020134:	91 1c       	st.w	r8[0x4],r12
80020136:	72 2c       	ld.w	r12,r9[0x8]
80020138:	91 2c       	st.w	r8[0x8],r12
8002013a:	72 39       	ld.w	r9,r9[0xc]
8002013c:	91 39       	st.w	r8[0xc],r9
8002013e:	f6 c8 ff f0 	sub	r8,r11,-16
80020142:	f4 c9 ff f0 	sub	r9,r10,-16
80020146:	72 0c       	ld.w	r12,r9[0x0]
80020148:	91 0c       	st.w	r8[0x0],r12
8002014a:	72 1c       	ld.w	r12,r9[0x4]
8002014c:	91 1c       	st.w	r8[0x4],r12
8002014e:	72 2c       	ld.w	r12,r9[0x8]
80020150:	91 2c       	st.w	r8[0x8],r12
80020152:	72 39       	ld.w	r9,r9[0xc]
80020154:	91 39       	st.w	r8[0xc],r9
80020156:	f6 c8 ff e0 	sub	r8,r11,-32
8002015a:	f4 c9 ff e0 	sub	r9,r10,-32
8002015e:	72 0a       	ld.w	r10,r9[0x0]
80020160:	91 0a       	st.w	r8[0x0],r10
80020162:	72 1a       	ld.w	r10,r9[0x4]
80020164:	91 1a       	st.w	r8[0x4],r10
80020166:	72 2a       	ld.w	r10,r9[0x8]
80020168:	91 2a       	st.w	r8[0x8],r10
8002016a:	72 39       	ld.w	r9,r9[0xc]
8002016c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8002016e:	30 18       	mov	r8,1
80020170:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020174:	30 08       	mov	r8,0
80020176:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002017a:	30 38       	mov	r8,3
8002017c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020180:	31 08       	mov	r8,16
80020182:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
80020186:	fc 18 20 00 	movh	r8,0x2000
8002018a:	e0 69 42 64 	mov	r9,16996
8002018e:	ea 19 40 47 	orh	r9,0x4047
80020192:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020196:	fc 18 80 00 	movh	r8,0x8000
8002019a:	e0 69 43 7d 	mov	r9,17277
8002019e:	ea 19 40 1a 	orh	r9,0x401a
800201a2:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
800201a6:	30 08       	mov	r8,0
800201a8:	fc 19 40 44 	movh	r9,0x4044
800201ac:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800201b0:	fc 18 41 20 	movh	r8,0x4120
800201b4:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
800201b8:	fc 18 41 70 	movh	r8,0x4170
800201bc:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800201c0:	30 08       	mov	r8,0
800201c2:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800201c6:	fc 18 42 b4 	movh	r8,0x42b4
800201ca:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
800201ce:	ee f8 ff cc 	ld.w	r8,r7[-52]
800201d2:	2a 08       	sub	r8,-96
800201d4:	10 9b       	mov	r11,r8
800201d6:	ee ca 00 30 	sub	r10,r7,48
800201da:	f6 c8 00 00 	sub	r8,r11,0
800201de:	f4 c9 00 00 	sub	r9,r10,0
800201e2:	72 0c       	ld.w	r12,r9[0x0]
800201e4:	91 0c       	st.w	r8[0x0],r12
800201e6:	72 1c       	ld.w	r12,r9[0x4]
800201e8:	91 1c       	st.w	r8[0x4],r12
800201ea:	72 2c       	ld.w	r12,r9[0x8]
800201ec:	91 2c       	st.w	r8[0x8],r12
800201ee:	72 39       	ld.w	r9,r9[0xc]
800201f0:	91 39       	st.w	r8[0xc],r9
800201f2:	f6 c8 ff f0 	sub	r8,r11,-16
800201f6:	f4 c9 ff f0 	sub	r9,r10,-16
800201fa:	72 0c       	ld.w	r12,r9[0x0]
800201fc:	91 0c       	st.w	r8[0x0],r12
800201fe:	72 1c       	ld.w	r12,r9[0x4]
80020200:	91 1c       	st.w	r8[0x4],r12
80020202:	72 2c       	ld.w	r12,r9[0x8]
80020204:	91 2c       	st.w	r8[0x8],r12
80020206:	72 39       	ld.w	r9,r9[0xc]
80020208:	91 39       	st.w	r8[0xc],r9
8002020a:	f6 c8 ff e0 	sub	r8,r11,-32
8002020e:	f4 c9 ff e0 	sub	r9,r10,-32
80020212:	72 0a       	ld.w	r10,r9[0x0]
80020214:	91 0a       	st.w	r8[0x0],r10
80020216:	72 1a       	ld.w	r10,r9[0x4]
80020218:	91 1a       	st.w	r8[0x4],r10
8002021a:	72 2a       	ld.w	r10,r9[0x8]
8002021c:	91 2a       	st.w	r8[0x8],r10
8002021e:	72 39       	ld.w	r9,r9[0xc]
80020220:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80020222:	30 18       	mov	r8,1
80020224:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020228:	30 08       	mov	r8,0
8002022a:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002022e:	30 38       	mov	r8,3
80020230:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020234:	31 08       	mov	r8,16
80020236:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8002023a:	30 08       	mov	r8,0
8002023c:	e0 69 42 55 	mov	r9,16981
80020240:	ea 19 40 47 	orh	r9,0x4047
80020244:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020248:	fc 18 80 00 	movh	r8,0x8000
8002024c:	e0 69 43 7d 	mov	r9,17277
80020250:	ea 19 40 1a 	orh	r9,0x401a
80020254:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80020258:	30 08       	mov	r8,0
8002025a:	fc 19 40 34 	movh	r9,0x4034
8002025e:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
80020262:	fc 18 41 20 	movh	r8,0x4120
80020266:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8002026a:	fc 18 41 40 	movh	r8,0x4140
8002026e:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80020272:	30 08       	mov	r8,0
80020274:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020278:	fc 18 42 b4 	movh	r8,0x42b4
8002027c:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
80020280:	ee f8 ff cc 	ld.w	r8,r7[-52]
80020284:	f0 c8 ff 70 	sub	r8,r8,-144
80020288:	10 9b       	mov	r11,r8
8002028a:	ee ca 00 30 	sub	r10,r7,48
8002028e:	f6 c8 00 00 	sub	r8,r11,0
80020292:	f4 c9 00 00 	sub	r9,r10,0
80020296:	72 0c       	ld.w	r12,r9[0x0]
80020298:	91 0c       	st.w	r8[0x0],r12
8002029a:	72 1c       	ld.w	r12,r9[0x4]
8002029c:	91 1c       	st.w	r8[0x4],r12
8002029e:	72 2c       	ld.w	r12,r9[0x8]
800202a0:	91 2c       	st.w	r8[0x8],r12
800202a2:	72 39       	ld.w	r9,r9[0xc]
800202a4:	91 39       	st.w	r8[0xc],r9
800202a6:	f6 c8 ff f0 	sub	r8,r11,-16
800202aa:	f4 c9 ff f0 	sub	r9,r10,-16
800202ae:	72 0c       	ld.w	r12,r9[0x0]
800202b0:	91 0c       	st.w	r8[0x0],r12
800202b2:	72 1c       	ld.w	r12,r9[0x4]
800202b4:	91 1c       	st.w	r8[0x4],r12
800202b6:	72 2c       	ld.w	r12,r9[0x8]
800202b8:	91 2c       	st.w	r8[0x8],r12
800202ba:	72 39       	ld.w	r9,r9[0xc]
800202bc:	91 39       	st.w	r8[0xc],r9
800202be:	f6 c8 ff e0 	sub	r8,r11,-32
800202c2:	f4 c9 ff e0 	sub	r9,r10,-32
800202c6:	72 0a       	ld.w	r10,r9[0x0]
800202c8:	91 0a       	st.w	r8[0x0],r10
800202ca:	72 1a       	ld.w	r10,r9[0x4]
800202cc:	91 1a       	st.w	r8[0x4],r10
800202ce:	72 2a       	ld.w	r10,r9[0x8]
800202d0:	91 2a       	st.w	r8[0x8],r10
800202d2:	72 39       	ld.w	r9,r9[0xc]
800202d4:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
800202d6:	fe cc 03 1a 	sub	r12,pc,794
800202da:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
800202de:	ec f8 01 1c 	ld.w	r8,r6[284]
800202e2:	90 08       	ld.sh	r8,r8[0x0]
800202e4:	5c 78       	castu.h	r8
800202e6:	30 ab       	mov	r11,10
800202e8:	10 9c       	mov	r12,r8
800202ea:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800202ee:	fe cc 03 16 	sub	r12,pc,790
800202f2:	f0 16 00 01 	mcall	r6[4]
	
}
800202f6:	2f 2d       	sub	sp,-56
800202f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800202fc:	80 01       	ld.sh	r1,r0[0x0]
800202fe:	fe 6a 57 69 	mov	r10,-108695
80020302:	6c 6c       	ld.w	r12,r6[0x18]
80020304:	20 73       	sub	r3,7
80020306:	65 6e       	ld.w	lr,r2[0x58]
80020308:	64 20       	ld.w	r0,r2[0x8]
8002030a:	00 00       	add	r0,r0
8002030c:	20 77       	sub	r7,7
8002030e:	61 79       	ld.w	r9,r0[0x5c]
80020310:	70 6f       	ld.w	pc,r8[0x18]
80020312:	69 6e       	ld.w	lr,r4[0x58]
80020314:	74 73       	ld.w	r3,r10[0x1c]
80020316:	0a 00       	add	r0,r5

80020318 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80020318:	eb cd 40 c0 	pushm	r6-r7,lr
8002031c:	1a 97       	mov	r7,sp
8002031e:	20 5d       	sub	sp,20
80020320:	4a d6       	lddpc	r6,800203d4 <send_count+0xbc>
80020322:	1e 26       	rsub	r6,pc
80020324:	ef 4c ff f8 	st.w	r7[-8],r12
80020328:	16 98       	mov	r8,r11
8002032a:	ef 4a ff f0 	st.w	r7[-16],r10
8002032e:	ef 49 ff ec 	st.w	r7[-20],r9
80020332:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80020336:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002033a:	ee c9 00 02 	sub	r9,r7,2
8002033e:	12 9b       	mov	r11,r9
80020340:	10 9c       	mov	r12,r8
80020342:	fe b0 fa 44 	rcall	8001f7ca <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020346:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002034a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002034e:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020350:	f0 09 18 00 	cp.b	r9,r8
80020354:	c3 c1       	brne	800203cc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020356:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002035a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002035e:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020360:	f0 09 18 00 	cp.b	r9,r8
80020364:	c3 41       	brne	800203cc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
80020366:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8002036a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002036e:	11 e8       	ld.ub	r8,r8[0x6]
80020370:	10 9a       	mov	r10,r8
80020372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020376:	11 d8       	ld.ub	r8,r8[0x5]
80020378:	10 9b       	mov	r11,r8
8002037a:	30 0c       	mov	r12,0
8002037c:	fe b0 fa 44 	rcall	8001f804 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
80020380:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80020384:	30 08       	mov	r8,0
80020386:	f0 09 19 00 	cp.h	r9,r8
8002038a:	c0 f0       	breq	800203a8 <send_count+0x90>
		{
			*waypoint_sending = true;
8002038c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020390:	30 18       	mov	r8,1
80020392:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
80020394:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020398:	30 08       	mov	r8,0
8002039a:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
8002039c:	f0 16 00 0e 	mcall	r6[56]
800203a0:	18 99       	mov	r9,r12
800203a2:	ec f8 01 68 	ld.w	r8,r6[360]
800203a6:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
800203a8:	ec f8 00 a4 	ld.w	r8,r6[164]
800203ac:	30 09       	mov	r9,0
800203ae:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
800203b0:	fe cc 00 b0 	sub	r12,pc,176
800203b4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
800203b8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800203bc:	30 ab       	mov	r11,10
800203be:	10 9c       	mov	r12,r8
800203c0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
800203c4:	fe cc 00 b8 	sub	r12,pc,184
800203c8:	f0 16 00 01 	mcall	r6[4]
	}
}
800203cc:	2f bd       	sub	sp,-20
800203ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800203d2:	00 00       	add	r0,r0
800203d4:	80 02       	ld.sh	r2,r0[0x0]
800203d6:	01 a6       	ld.ub	r6,r0[0x2]
800203d8:	41 73       	lddsp	r3,sp[0x5c]
800203da:	6b 69       	ld.w	r9,r5[0x58]
800203dc:	6e 67       	ld.w	r7,r7[0x18]
800203de:	20 66       	sub	r6,6
800203e0:	6f 72       	ld.w	r2,r7[0x5c]
800203e2:	20 77       	sub	r7,7
800203e4:	61 79       	ld.w	r9,r0[0x5c]
800203e6:	70 6f       	ld.w	pc,r8[0x18]
800203e8:	69 6e       	ld.w	lr,r4[0x58]
800203ea:	74 20       	ld.w	r0,r10[0x8]
800203ec:	6e 75       	ld.w	r5,r7[0x1c]
800203ee:	6d 62       	ld.w	r2,r6[0x58]
800203f0:	65 72       	ld.w	r2,r2[0x5c]
800203f2:	20 00       	sub	r0,0
800203f4:	53 65       	stdsp	sp[0xd8],r5
800203f6:	6e 64       	ld.w	r4,r7[0x18]
800203f8:	69 6e       	ld.w	lr,r4[0x58]
800203fa:	67 20       	ld.w	r0,r3[0x48]
800203fc:	77 61       	ld.w	r1,r11[0x58]
800203fe:	79 70       	ld.w	r0,r12[0x5c]
80020400:	6f 69       	ld.w	r9,r7[0x58]
80020402:	6e 74       	ld.w	r4,r7[0x1c]
80020404:	20 00       	sub	r0,0

80020406 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
80020406:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002040a:	1a 97       	mov	r7,sp
8002040c:	20 9d       	sub	sp,36
8002040e:	fe f6 02 62 	ld.w	r6,pc[610]
80020412:	1e 26       	rsub	r6,pc
80020414:	ef 4c ff f8 	st.w	r7[-8],r12
80020418:	ef 4b ff f4 	st.w	r7[-12],r11
8002041c:	14 98       	mov	r8,r10
8002041e:	ef 49 ff ec 	st.w	r7[-20],r9
80020422:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80020426:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002042a:	11 88       	ld.ub	r8,r8[0x0]
8002042c:	58 08       	cp.w	r8,0
8002042e:	e0 80 01 1e 	breq	8002066a <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
80020432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020436:	ee c9 00 04 	sub	r9,r7,4
8002043a:	12 9b       	mov	r11,r9
8002043c:	10 9c       	mov	r12,r8
8002043e:	fe b0 f9 07 	rcall	8001f64c <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
80020442:	fe cc 00 6a 	sub	r12,pc,106
80020446:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8002044a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002044e:	5c 78       	castu.h	r8
80020450:	30 ab       	mov	r11,10
80020452:	10 9c       	mov	r12,r8
80020454:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020458:	fe cc 04 80 	sub	r12,pc,1152
8002045c:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020460:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020464:	ec f8 00 c0 	ld.w	r8,r6[192]
80020468:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002046a:	f0 09 18 00 	cp.b	r9,r8
8002046e:	e0 81 00 fe 	brne	8002066a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020472:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020476:	ec f8 00 c0 	ld.w	r8,r6[192]
8002047a:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002047c:	f0 09 18 00 	cp.b	r9,r8
80020480:	e0 81 00 f5 	brne	8002066a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
80020484:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020488:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002048c:	ec f8 00 a4 	ld.w	r8,r6[164]
80020490:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
80020492:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80020496:	ec f8 00 a4 	ld.w	r8,r6[164]
8002049a:	70 08       	ld.w	r8,r8[0x0]
8002049c:	10 39       	cp.w	r9,r8
8002049e:	e0 8a 00 e6 	brle	8002066a <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800204a2:	ec f8 00 a4 	ld.w	r8,r6[164]
800204a6:	70 08       	ld.w	r8,r8[0x0]
800204a8:	10 99       	mov	r9,r8
800204aa:	12 98       	mov	r8,r9
800204ac:	a1 78       	lsl	r8,0x1
800204ae:	12 08       	add	r8,r9
800204b0:	a5 68       	lsl	r8,0x4
800204b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800204b6:	f2 08 00 08 	add	r8,r9,r8
800204ba:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204be:	10 9a       	mov	r10,r8
800204c0:	12 9b       	mov	r11,r9
800204c2:	f0 16 00 09 	mcall	r6[36]
800204c6:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800204c8:	ec f8 00 a4 	ld.w	r8,r6[164]
800204cc:	70 08       	ld.w	r8,r8[0x0]
800204ce:	10 99       	mov	r9,r8
800204d0:	12 98       	mov	r8,r9
800204d2:	a1 78       	lsl	r8,0x1
800204d4:	12 08       	add	r8,r9
800204d6:	a5 68       	lsl	r8,0x4
800204d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800204dc:	f2 08 00 08 	add	r8,r9,r8
800204e0:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800204e4:	10 9a       	mov	r10,r8
800204e6:	12 9b       	mov	r11,r9
800204e8:	f0 16 00 09 	mcall	r6[36]
800204ec:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800204f0:	ec f8 00 a4 	ld.w	r8,r6[164]
800204f4:	70 08       	ld.w	r8,r8[0x0]
800204f6:	10 99       	mov	r9,r8
800204f8:	12 98       	mov	r8,r9
800204fa:	a1 78       	lsl	r8,0x1
800204fc:	12 08       	add	r8,r9
800204fe:	a5 68       	lsl	r8,0x4
80020500:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020504:	f2 08 00 08 	add	r8,r9,r8
80020508:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002050c:	10 9a       	mov	r10,r8
8002050e:	12 9b       	mov	r11,r9
80020510:	f0 16 00 09 	mcall	r6[36]
80020514:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020518:	ec f8 00 a4 	ld.w	r8,r6[164]
8002051c:	70 08       	ld.w	r8,r8[0x0]
8002051e:	10 99       	mov	r9,r8
80020520:	12 98       	mov	r8,r9
80020522:	a1 78       	lsl	r8,0x1
80020524:	12 08       	add	r8,r9
80020526:	a5 68       	lsl	r8,0x4
80020528:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002052c:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020530:	70 58       	ld.w	r8,r8[0x14]
80020532:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020536:	ec f8 00 a4 	ld.w	r8,r6[164]
8002053a:	70 08       	ld.w	r8,r8[0x0]
8002053c:	10 99       	mov	r9,r8
8002053e:	12 98       	mov	r8,r9
80020540:	a1 78       	lsl	r8,0x1
80020542:	12 08       	add	r8,r9
80020544:	a5 68       	lsl	r8,0x4
80020546:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002054a:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002054e:	70 48       	ld.w	r8,r8[0x10]
80020550:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020554:	ec f8 00 a4 	ld.w	r8,r6[164]
80020558:	70 08       	ld.w	r8,r8[0x0]
8002055a:	10 99       	mov	r9,r8
8002055c:	12 98       	mov	r8,r9
8002055e:	a1 78       	lsl	r8,0x1
80020560:	12 08       	add	r8,r9
80020562:	a5 68       	lsl	r8,0x4
80020564:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020568:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002056c:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8002056e:	ec f8 00 a4 	ld.w	r8,r6[164]
80020572:	70 08       	ld.w	r8,r8[0x0]
80020574:	10 99       	mov	r9,r8
80020576:	12 98       	mov	r8,r9
80020578:	a1 78       	lsl	r8,0x1
8002057a:	12 08       	add	r8,r9
8002057c:	a5 68       	lsl	r8,0x4
8002057e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020582:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020586:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80020588:	ec f8 00 a4 	ld.w	r8,r6[164]
8002058c:	70 08       	ld.w	r8,r8[0x0]
8002058e:	10 99       	mov	r9,r8
80020590:	12 98       	mov	r8,r9
80020592:	a1 78       	lsl	r8,0x1
80020594:	12 08       	add	r8,r9
80020596:	a5 68       	lsl	r8,0x4
80020598:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002059c:	f2 08 00 08 	add	r8,r9,r8
800205a0:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800205a2:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800205a4:	ec f8 00 a4 	ld.w	r8,r6[164]
800205a8:	70 08       	ld.w	r8,r8[0x0]
800205aa:	10 99       	mov	r9,r8
800205ac:	12 98       	mov	r8,r9
800205ae:	a1 78       	lsl	r8,0x1
800205b0:	12 08       	add	r8,r9
800205b2:	a5 68       	lsl	r8,0x4
800205b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800205b8:	f2 08 00 08 	add	r8,r9,r8
800205bc:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800205be:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800205c0:	ec f8 00 a4 	ld.w	r8,r6[164]
800205c4:	70 08       	ld.w	r8,r8[0x0]
800205c6:	10 99       	mov	r9,r8
800205c8:	12 98       	mov	r8,r9
800205ca:	a1 78       	lsl	r8,0x1
800205cc:	12 08       	add	r8,r9
800205ce:	a5 68       	lsl	r8,0x4
800205d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800205d4:	f2 08 00 08 	add	r8,r9,r8
800205d8:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800205da:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800205de:	ec f8 00 a4 	ld.w	r8,r6[164]
800205e2:	70 08       	ld.w	r8,r8[0x0]
800205e4:	10 99       	mov	r9,r8
800205e6:	12 98       	mov	r8,r9
800205e8:	a1 78       	lsl	r8,0x1
800205ea:	12 08       	add	r8,r9
800205ec:	a5 68       	lsl	r8,0x4
800205ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800205f2:	f2 08 00 08 	add	r8,r9,r8
800205f6:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800205f8:	10 9c       	mov	r12,r8
800205fa:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800205fe:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020606:	11 e8       	ld.ub	r8,r8[0x6]
80020608:	10 9a       	mov	r10,r8
8002060a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002060e:	11 d8       	ld.ub	r8,r8[0x5]
80020610:	10 9b       	mov	r11,r8
80020612:	1a d5       	st.w	--sp,r5
80020614:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020618:	1a d8       	st.w	--sp,r8
8002061a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002061e:	1a d8       	st.w	--sp,r8
80020620:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020624:	1a d8       	st.w	--sp,r8
80020626:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002062a:	1a d8       	st.w	--sp,r8
8002062c:	1a d0       	st.w	--sp,r0
8002062e:	1a d1       	st.w	--sp,r1
80020630:	1a d2       	st.w	--sp,r2
80020632:	1a d3       	st.w	--sp,r3
80020634:	1a de       	st.w	--sp,lr
80020636:	18 98       	mov	r8,r12
80020638:	30 0c       	mov	r12,0
8002063a:	fe b0 f5 9f 	rcall	8001f178 <mavlink_msg_mission_item_send>
8002063e:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
80020640:	fe cc 02 4c 	sub	r12,pc,588
80020644:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
80020648:	ec f8 00 a4 	ld.w	r8,r6[164]
8002064c:	70 08       	ld.w	r8,r8[0x0]
8002064e:	30 ab       	mov	r11,10
80020650:	10 9c       	mov	r12,r8
80020652:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80020656:	fe cc 06 7e 	sub	r12,pc,1662
8002065a:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
8002065e:	f0 16 00 0e 	mcall	r6[56]
80020662:	18 99       	mov	r9,r12
80020664:	ec f8 01 68 	ld.w	r8,r6[360]
80020668:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
8002066a:	2f 7d       	sub	sp,-36
8002066c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80020670:	80 02       	ld.sh	r2,r0[0x0]
80020672:	02 96       	mov	r6,r1
80020674:	41 63       	lddsp	r3,sp[0x58]
80020676:	6b 6e       	ld.w	lr,r5[0x58]
80020678:	6f 77       	ld.w	r7,r7[0x5c]
8002067a:	6c 65       	ld.w	r5,r6[0x18]
8002067c:	64 67       	ld.w	r7,r2[0x18]
8002067e:	6d 65       	ld.w	r5,r6[0x58]
80020680:	6e 74       	ld.w	r4,r7[0x1c]
80020682:	20 72       	sub	r2,7
80020684:	65 63       	ld.w	r3,r2[0x58]
80020686:	65 69       	ld.w	r9,r2[0x58]
80020688:	76 65       	ld.w	r5,r11[0x18]
8002068a:	64 2c       	ld.w	r12,r2[0x8]
8002068c:	20 65       	sub	r5,6
8002068e:	6e 64       	ld.w	r4,r7[0x18]
80020690:	20 6f       	sub	pc,6
80020692:	66 20       	ld.w	r0,r3[0x8]
80020694:	77 61       	ld.w	r1,r11[0x58]
80020696:	79 70       	ld.w	r0,r12[0x5c]
80020698:	6f 69       	ld.w	r9,r7[0x58]
8002069a:	6e 74       	ld.w	r4,r7[0x1c]
8002069c:	20 73       	sub	r3,7
8002069e:	65 6e       	ld.w	lr,r2[0x58]
800206a0:	64 69       	ld.w	r9,r2[0x18]
800206a2:	6e 67       	ld.w	r7,r7[0x18]
800206a4:	2e 0a       	sub	r10,-32
	...

800206a8 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
800206a8:	eb cd 40 c0 	pushm	r6-r7,lr
800206ac:	1a 97       	mov	r7,sp
800206ae:	20 3d       	sub	sp,12
800206b0:	49 76       	lddpc	r6,8002070c <receive_ack_msg+0x64>
800206b2:	1e 26       	rsub	r6,pc
800206b4:	ef 4c ff f8 	st.w	r7[-8],r12
800206b8:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
800206bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800206c0:	ee c9 00 03 	sub	r9,r7,3
800206c4:	12 9b       	mov	r11,r9
800206c6:	10 9c       	mov	r12,r8
800206c8:	fe b0 f9 dc 	rcall	8001fa80 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206cc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800206d0:	ec f8 00 c0 	ld.w	r8,r6[192]
800206d4:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800206d6:	f0 09 18 00 	cp.b	r9,r8
800206da:	c1 51       	brne	80020704 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206dc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800206e0:	ec f8 00 c0 	ld.w	r8,r6[192]
800206e4:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800206e6:	f0 09 18 00 	cp.b	r9,r8
800206ea:	c0 d1       	brne	80020704 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
800206ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800206f0:	30 08       	mov	r8,0
800206f2:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
800206f4:	ec f8 00 a4 	ld.w	r8,r6[164]
800206f8:	30 09       	mov	r9,0
800206fa:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
800206fc:	fe cc 00 88 	sub	r12,pc,136
80020700:	f0 16 00 01 	mcall	r6[4]
	}
}
80020704:	2f dd       	sub	sp,-12
80020706:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002070a:	00 00       	add	r0,r0
8002070c:	80 02       	ld.sh	r2,r0[0x0]
8002070e:	05 36       	ld.ub	r6,r2++
80020710:	52 65       	stdsp	sp[0x98],r5
80020712:	63 65       	ld.w	r5,r1[0x58]
80020714:	69 76       	ld.w	r6,r4[0x5c]
80020716:	69 6e       	ld.w	lr,r4[0x58]
80020718:	67 20       	ld.w	r0,r3[0x48]
8002071a:	00 00       	add	r0,r0
8002071c:	20 6e       	sub	lr,6
8002071e:	65 77       	ld.w	r7,r2[0x5c]
80020720:	20 77       	sub	r7,7
80020722:	61 79       	ld.w	r9,r0[0x5c]
80020724:	70 6f       	ld.w	pc,r8[0x18]
80020726:	69 6e       	ld.w	lr,r4[0x58]
80020728:	74 73       	ld.w	r3,r10[0x1c]
8002072a:	2e 20       	sub	r0,-30
8002072c:	00 00       	add	r0,r0
8002072e:	00 00       	add	r0,r0
80020730:	4e 65       	lddpc	r5,800208c8 <receive_count+0x162>
80020732:	77 20       	ld.w	r0,r11[0x48]
80020734:	74 6f       	ld.w	pc,r10[0x18]
80020736:	74 61       	ld.w	r1,r10[0x18]
80020738:	6c 20       	ld.w	r0,r6[0x8]
8002073a:	6e 75       	ld.w	r5,r7[0x1c]
8002073c:	6d 62       	ld.w	r2,r6[0x58]
8002073e:	65 72       	ld.w	r2,r2[0x5c]
80020740:	20 6f       	sub	pc,6
80020742:	66 20       	ld.w	r0,r3[0x8]
80020744:	77 61       	ld.w	r1,r11[0x58]
80020746:	79 70       	ld.w	r0,r12[0x5c]
80020748:	6f 69       	ld.w	r9,r7[0x58]
8002074a:	6e 74       	ld.w	r4,r7[0x1c]
8002074c:	73 3a       	ld.w	r10,r9[0x4c]
8002074e:	00 00       	add	r0,r0
80020750:	41 73       	lddsp	r3,sp[0x5c]
80020752:	6b 69       	ld.w	r9,r5[0x58]
80020754:	6e 67       	ld.w	r7,r7[0x18]
80020756:	20 66       	sub	r6,6
80020758:	6f 72       	ld.w	r2,r7[0x5c]
8002075a:	20 77       	sub	r7,7
8002075c:	61 79       	ld.w	r9,r0[0x5c]
8002075e:	70 6f       	ld.w	pc,r8[0x18]
80020760:	69 6e       	ld.w	lr,r4[0x58]
80020762:	74 20       	ld.w	r0,r10[0x8]
	...

80020766 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
80020766:	eb cd 40 c0 	pushm	r6-r7,lr
8002076a:	1a 97       	mov	r7,sp
8002076c:	20 5d       	sub	sp,20
8002076e:	4d 46       	lddpc	r6,800208bc <receive_count+0x156>
80020770:	1e 26       	rsub	r6,pc
80020772:	ef 4c ff f8 	st.w	r7[-8],r12
80020776:	ef 4b ff f4 	st.w	r7[-12],r11
8002077a:	ef 4a ff f0 	st.w	r7[-16],r10
8002077e:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
80020782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020786:	ee c9 00 04 	sub	r9,r7,4
8002078a:	12 9b       	mov	r11,r9
8002078c:	10 9c       	mov	r12,r8
8002078e:	fe b0 f8 9f 	rcall	8001f8cc <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020792:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020796:	ec f8 00 c0 	ld.w	r8,r6[192]
8002079a:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002079c:	f0 09 18 00 	cp.b	r9,r8
800207a0:	e0 81 00 8b 	brne	800208b6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800207a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800207a8:	ec f8 00 c0 	ld.w	r8,r6[192]
800207ac:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800207ae:	f0 09 18 00 	cp.b	r9,r8
800207b2:	e0 81 00 82 	brne	800208b6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
800207b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800207ba:	11 88       	ld.ub	r8,r8[0x0]
800207bc:	ec 18 00 01 	eorl	r8,0x1
800207c0:	5c 58       	castu.b	r8
800207c2:	c5 a0       	breq	80020876 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
800207c4:	ec f9 01 1c 	ld.w	r9,r6[284]
800207c8:	30 08       	mov	r8,0
800207ca:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
800207cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800207d0:	30 08       	mov	r8,0
800207d2:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
800207d4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800207d8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800207dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800207e0:	90 08       	ld.sh	r8,r8[0x0]
800207e2:	5c 78       	castu.h	r8
800207e4:	f2 08 00 08 	add	r8,r9,r8
800207e8:	58 a8       	cp.w	r8,10
800207ea:	e0 8a 00 0a 	brle	800207fe <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
800207ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800207f2:	90 08       	ld.sh	r8,r8[0x0]
800207f4:	f0 08 11 0a 	rsub	r8,r8,10
800207f8:	5c 88       	casts.h	r8
800207fa:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
800207fe:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80020802:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020806:	90 08       	ld.sh	r8,r8[0x0]
80020808:	f2 08 00 08 	add	r8,r9,r8
8002080c:	5c 88       	casts.h	r8
8002080e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020812:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80020814:	fe cc 01 04 	sub	r12,pc,260
80020818:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
8002081c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020820:	5c 78       	castu.h	r8
80020822:	30 ab       	mov	r11,10
80020824:	10 9c       	mov	r12,r8
80020826:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
8002082a:	fe cc 01 0e 	sub	r12,pc,270
8002082e:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80020832:	fe cc 01 02 	sub	r12,pc,258
80020836:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
8002083a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002083e:	90 08       	ld.sh	r8,r8[0x0]
80020840:	5c 78       	castu.h	r8
80020842:	30 ab       	mov	r11,10
80020844:	10 9c       	mov	r12,r8
80020846:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002084a:	fe cc 08 72 	sub	r12,pc,2162
8002084e:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80020852:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020856:	30 18       	mov	r8,1
80020858:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
8002085a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002085e:	30 08       	mov	r8,0
80020860:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
80020862:	ec f8 00 f8 	ld.w	r8,r6[248]
80020866:	30 09       	mov	r9,0
80020868:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
8002086a:	f0 16 00 0e 	mcall	r6[56]
8002086e:	18 99       	mov	r9,r12
80020870:	ec f8 01 68 	ld.w	r8,r6[360]
80020874:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020876:	ec f8 00 f8 	ld.w	r8,r6[248]
8002087a:	70 08       	ld.w	r8,r8[0x0]
8002087c:	5c 88       	casts.h	r8
8002087e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020882:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020886:	11 e8       	ld.ub	r8,r8[0x6]
80020888:	10 9a       	mov	r10,r8
8002088a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002088e:	11 d8       	ld.ub	r8,r8[0x5]
80020890:	10 9b       	mov	r11,r8
80020892:	30 0c       	mov	r12,0
80020894:	fe b0 f6 78 	rcall	8001f584 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
80020898:	fe cc 01 48 	sub	r12,pc,328
8002089c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
800208a0:	ec f8 00 f8 	ld.w	r8,r6[248]
800208a4:	70 08       	ld.w	r8,r8[0x0]
800208a6:	30 ab       	mov	r11,10
800208a8:	10 9c       	mov	r12,r8
800208aa:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
800208ae:	fe cc 08 d6 	sub	r12,pc,2262
800208b2:	f0 16 00 01 	mcall	r6[4]
	}
	
}
800208b6:	2f bd       	sub	sp,-20
800208b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800208bc:	80 02       	ld.sh	r2,r0[0x0]
800208be:	05 f4       	ld.ub	r4,r2[0x7]
800208c0:	4e 65       	lddpc	r5,80020a58 <receive_waypoint+0x102>
800208c2:	77 20       	ld.w	r0,r11[0x48]
800208c4:	77 61       	ld.w	r1,r11[0x58]
800208c6:	79 70       	ld.w	r0,r12[0x5c]
800208c8:	6f 69       	ld.w	r9,r7[0x58]
800208ca:	6e 74       	ld.w	r4,r7[0x1c]
800208cc:	20 72       	sub	r2,7
800208ce:	65 63       	ld.w	r3,r2[0x58]
800208d0:	65 69       	ld.w	r9,r2[0x58]
800208d2:	76 65       	ld.w	r5,r11[0x18]
800208d4:	64 20       	ld.w	r0,r2[0x8]
800208d6:	00 00       	add	r0,r0
800208d8:	20 72       	sub	r2,7
800208da:	65 71       	ld.w	r1,r2[0x5c]
800208dc:	75 65       	ld.w	r5,r10[0x58]
800208de:	73 74       	ld.w	r4,r9[0x5c]
800208e0:	65 64       	ld.w	r4,r2[0x58]
800208e2:	20 6e       	sub	lr,6
800208e4:	75 6d       	ld.w	sp,r10[0x58]
800208e6:	20 3a       	sub	r10,3
800208e8:	00 00       	add	r0,r0
800208ea:	00 00       	add	r0,r0
800208ec:	20 72       	sub	r2,7
800208ee:	65 63       	ld.w	r3,r2[0x58]
800208f0:	65 69       	ld.w	r9,r2[0x58]
800208f2:	76 69       	ld.w	r9,r11[0x18]
800208f4:	6e 67       	ld.w	r7,r7[0x18]
800208f6:	20 6e       	sub	lr,6
800208f8:	75 6d       	ld.w	sp,r10[0x58]
800208fa:	20 3a       	sub	r10,3
800208fc:	00 00       	add	r0,r0
800208fe:	00 00       	add	r0,r0
80020900:	52 65       	stdsp	sp[0x98],r5
80020902:	63 65       	ld.w	r5,r1[0x58]
80020904:	69 76       	ld.w	r6,r4[0x5c]
80020906:	69 6e       	ld.w	lr,r4[0x58]
80020908:	67 20       	ld.w	r0,r3[0x48]
8002090a:	67 6f       	ld.w	pc,r3[0x58]
8002090c:	6f 64       	ld.w	r4,r7[0x58]
8002090e:	20 77       	sub	r7,7
80020910:	61 79       	ld.w	r9,r0[0x5c]
80020912:	70 6f       	ld.w	pc,r8[0x18]
80020914:	69 6e       	ld.w	lr,r4[0x58]
80020916:	74 2c       	ld.w	r12,r10[0x8]
80020918:	20 6e       	sub	lr,6
8002091a:	75 6d       	ld.w	sp,r10[0x58]
8002091c:	62 65       	ld.w	r5,r1[0x18]
8002091e:	72 20       	ld.w	r0,r9[0x8]
80020920:	00 00       	add	r0,r0
80020922:	00 00       	add	r0,r0
80020924:	20 6f       	sub	pc,6
80020926:	66 20       	ld.w	r0,r3[0x8]
80020928:	00 00       	add	r0,r0
8002092a:	00 00       	add	r0,r0
8002092c:	66 6c       	ld.w	r12,r3[0x18]
8002092e:	69 67       	ld.w	r7,r4[0x58]
80020930:	68 74       	ld.w	r4,r4[0x1c]
80020932:	20 70       	sub	r0,7
80020934:	6c 61       	ld.w	r1,r6[0x18]
80020936:	6e 20       	ld.w	r0,r7[0x8]
80020938:	72 65       	ld.w	r5,r9[0x18]
8002093a:	63 65       	ld.w	r5,r1[0x58]
8002093c:	69 76       	ld.w	r6,r4[0x5c]
8002093e:	65 64       	ld.w	r4,r2[0x58]
80020940:	21 0a       	sub	r10,16
80020942:	00 00       	add	r0,r0
80020944:	41 63       	lddsp	r3,sp[0x58]
80020946:	6b 20       	ld.w	r0,r5[0x48]
80020948:	6e 6f       	ld.w	pc,r7[0x18]
8002094a:	74 20       	ld.w	r0,r10[0x8]
8002094c:	72 65       	ld.w	r5,r9[0x18]
8002094e:	63 65       	ld.w	r5,r1[0x58]
80020950:	69 76       	ld.w	r6,r4[0x5c]
80020952:	65 64       	ld.w	r4,r2[0x58]
80020954:	21 00       	sub	r0,16

80020956 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80020956:	eb cd 40 c0 	pushm	r6-r7,lr
8002095a:	1a 97       	mov	r7,sp
8002095c:	21 bd       	sub	sp,108
8002095e:	fe f6 03 02 	ld.w	r6,pc[770]
80020962:	1e 26       	rsub	r6,pc
80020964:	ef 4c ff a0 	st.w	r7[-96],r12
80020968:	ef 4b ff 9c 	st.w	r7[-100],r11
8002096c:	14 98       	mov	r8,r10
8002096e:	ef 49 ff 94 	st.w	r7[-108],r9
80020972:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
80020976:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002097a:	ee c9 00 2c 	sub	r9,r7,44
8002097e:	12 9b       	mov	r11,r9
80020980:	10 9c       	mov	r12,r8
80020982:	fe b0 f5 87 	rcall	8001f490 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020986:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002098a:	ec f8 00 6c 	ld.w	r8,r6[108]
8002098e:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020990:	f0 09 18 00 	cp.b	r9,r8
80020994:	e0 81 01 63 	brne	80020c5a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020998:	ef 39 ff f5 	ld.ub	r9,r7[-11]
8002099c:	ec f8 00 c0 	ld.w	r8,r6[192]
800209a0:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800209a2:	f0 09 18 00 	cp.b	r9,r8
800209a6:	e0 81 01 5a 	brne	80020c5a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
800209aa:	f0 16 00 0e 	mcall	r6[56]
800209ae:	18 99       	mov	r9,r12
800209b0:	ec f8 01 68 	ld.w	r8,r6[360]
800209b4:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
800209b6:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800209ba:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
800209be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800209c2:	10 9c       	mov	r12,r8
800209c4:	f0 16 00 03 	mcall	r6[12]
800209c8:	14 98       	mov	r8,r10
800209ca:	16 99       	mov	r9,r11
800209cc:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
800209d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800209d4:	10 9c       	mov	r12,r8
800209d6:	f0 16 00 03 	mcall	r6[12]
800209da:	14 98       	mov	r8,r10
800209dc:	16 99       	mov	r9,r11
800209de:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
800209e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800209e6:	10 9c       	mov	r12,r8
800209e8:	f0 16 00 03 	mcall	r6[12]
800209ec:	14 98       	mov	r8,r10
800209ee:	16 99       	mov	r9,r11
800209f0:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
800209f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800209f8:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
800209fc:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80020a00:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020a04:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80020a08:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80020a0c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80020a10:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020a14:	ee f8 ff d8 	ld.w	r8,r7[-40]
80020a18:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80020a1c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020a20:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020a24:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020a28:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80020a2c:	fe cc 01 6c 	sub	r12,pc,364
80020a30:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020a34:	fe cc 01 5c 	sub	r12,pc,348
80020a38:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80020a3c:	ec f8 00 f8 	ld.w	r8,r6[248]
80020a40:	70 08       	ld.w	r8,r8[0x0]
80020a42:	30 ab       	mov	r11,10
80020a44:	10 9c       	mov	r12,r8
80020a46:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
80020a4a:	fe cc 01 5e 	sub	r12,pc,350
80020a4e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80020a52:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020a56:	5c 78       	castu.h	r8
80020a58:	30 ab       	mov	r11,10
80020a5a:	10 9c       	mov	r12,r8
80020a5c:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
80020a60:	fe cc 0a 88 	sub	r12,pc,2696
80020a64:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
80020a68:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80020a6c:	30 28       	mov	r8,2
80020a6e:	f0 09 18 00 	cp.b	r9,r8
80020a72:	c0 e1       	brne	80020a8e <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80020a74:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020a78:	11 e8       	ld.ub	r8,r8[0x6]
80020a7a:	10 9a       	mov	r10,r8
80020a7c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020a80:	11 d8       	ld.ub	r8,r8[0x5]
80020a82:	30 19       	mov	r9,1
80020a84:	10 9b       	mov	r11,r8
80020a86:	30 0c       	mov	r12,0
80020a88:	fe b0 f7 a4 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
80020a8c:	ce 78       	rjmp	80020c5a <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
80020a8e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80020a92:	30 38       	mov	r8,3
80020a94:	f0 09 18 00 	cp.b	r9,r8
80020a98:	c0 e1       	brne	80020ab4 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80020a9a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020a9e:	11 e8       	ld.ub	r8,r8[0x6]
80020aa0:	10 9a       	mov	r10,r8
80020aa2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020aa6:	11 d8       	ld.ub	r8,r8[0x5]
80020aa8:	30 19       	mov	r9,1
80020aaa:	10 9b       	mov	r11,r8
80020aac:	30 0c       	mov	r12,0
80020aae:	fe b0 f7 91 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
80020ab2:	cd 48       	rjmp	80020c5a <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80020ab4:	ee f8 ff 94 	ld.w	r8,r7[-108]
80020ab8:	11 88       	ld.ub	r8,r8[0x0]
80020aba:	58 08       	cp.w	r8,0
80020abc:	e0 80 00 bb 	breq	80020c32 <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80020ac0:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020ac4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020ac8:	ec f8 00 f8 	ld.w	r8,r6[248]
80020acc:	70 08       	ld.w	r8,r8[0x0]
80020ace:	10 39       	cp.w	r9,r8
80020ad0:	e0 81 00 c5 	brne	80020c5a <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80020ad4:	fe cc 01 d4 	sub	r12,pc,468
80020ad8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80020adc:	ec f8 00 f8 	ld.w	r8,r6[248]
80020ae0:	70 08       	ld.w	r8,r8[0x0]
80020ae2:	30 ab       	mov	r11,10
80020ae4:	10 9c       	mov	r12,r8
80020ae6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
80020aea:	fe cc 01 c6 	sub	r12,pc,454
80020aee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80020af2:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80020af6:	ec f8 01 1c 	ld.w	r8,r6[284]
80020afa:	90 08       	ld.sh	r8,r8[0x0]
80020afc:	5c 78       	castu.h	r8
80020afe:	f2 08 01 08 	sub	r8,r9,r8
80020b02:	30 ab       	mov	r11,10
80020b04:	10 9c       	mov	r12,r8
80020b06:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80020b0a:	fe cc 0b 32 	sub	r12,pc,2866
80020b0e:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80020b12:	ec f8 01 1c 	ld.w	r8,r6[284]
80020b16:	90 08       	ld.sh	r8,r8[0x0]
80020b18:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020b1c:	ec f8 00 f8 	ld.w	r8,r6[248]
80020b20:	70 08       	ld.w	r8,r8[0x0]
80020b22:	f2 08 00 08 	add	r8,r9,r8
80020b26:	10 99       	mov	r9,r8
80020b28:	12 98       	mov	r8,r9
80020b2a:	a1 78       	lsl	r8,0x1
80020b2c:	12 08       	add	r8,r9
80020b2e:	a5 68       	lsl	r8,0x4
80020b30:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020b34:	f2 08 00 08 	add	r8,r9,r8
80020b38:	10 9b       	mov	r11,r8
80020b3a:	ee ca 00 5c 	sub	r10,r7,92
80020b3e:	f6 c8 00 00 	sub	r8,r11,0
80020b42:	f4 c9 00 00 	sub	r9,r10,0
80020b46:	72 0c       	ld.w	r12,r9[0x0]
80020b48:	91 0c       	st.w	r8[0x0],r12
80020b4a:	72 1c       	ld.w	r12,r9[0x4]
80020b4c:	91 1c       	st.w	r8[0x4],r12
80020b4e:	72 2c       	ld.w	r12,r9[0x8]
80020b50:	91 2c       	st.w	r8[0x8],r12
80020b52:	72 39       	ld.w	r9,r9[0xc]
80020b54:	91 39       	st.w	r8[0xc],r9
80020b56:	f6 c8 ff f0 	sub	r8,r11,-16
80020b5a:	f4 c9 ff f0 	sub	r9,r10,-16
80020b5e:	72 0c       	ld.w	r12,r9[0x0]
80020b60:	91 0c       	st.w	r8[0x0],r12
80020b62:	72 1c       	ld.w	r12,r9[0x4]
80020b64:	91 1c       	st.w	r8[0x4],r12
80020b66:	72 2c       	ld.w	r12,r9[0x8]
80020b68:	91 2c       	st.w	r8[0x8],r12
80020b6a:	72 39       	ld.w	r9,r9[0xc]
80020b6c:	91 39       	st.w	r8[0xc],r9
80020b6e:	f6 c8 ff e0 	sub	r8,r11,-32
80020b72:	f4 c9 ff e0 	sub	r9,r10,-32
80020b76:	72 0a       	ld.w	r10,r9[0x0]
80020b78:	91 0a       	st.w	r8[0x0],r10
80020b7a:	72 1a       	ld.w	r10,r9[0x4]
80020b7c:	91 1a       	st.w	r8[0x4],r10
80020b7e:	72 2a       	ld.w	r10,r9[0x8]
80020b80:	91 2a       	st.w	r8[0x8],r10
80020b82:	72 39       	ld.w	r9,r9[0xc]
80020b84:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
80020b86:	ec f8 00 f8 	ld.w	r8,r6[248]
80020b8a:	70 08       	ld.w	r8,r8[0x0]
80020b8c:	f0 c9 ff ff 	sub	r9,r8,-1
80020b90:	ec f8 00 f8 	ld.w	r8,r6[248]
80020b94:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
80020b96:	ec f8 01 1c 	ld.w	r8,r6[284]
80020b9a:	90 08       	ld.sh	r8,r8[0x0]
80020b9c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020ba0:	ec f8 00 f8 	ld.w	r8,r6[248]
80020ba4:	70 08       	ld.w	r8,r8[0x0]
80020ba6:	10 09       	add	r9,r8
80020ba8:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80020bac:	10 39       	cp.w	r9,r8
80020bae:	c2 11       	brne	80020bf0 <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80020bb0:	30 18       	mov	r8,1
80020bb2:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020bb6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020bba:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020bbe:	11 e8       	ld.ub	r8,r8[0x6]
80020bc0:	10 9a       	mov	r10,r8
80020bc2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020bc6:	11 d8       	ld.ub	r8,r8[0x5]
80020bc8:	10 9b       	mov	r11,r8
80020bca:	30 0c       	mov	r12,0
80020bcc:	fe b0 f7 02 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80020bd0:	fe cc 02 a4 	sub	r12,pc,676
80020bd4:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80020bd8:	ee f9 ff 94 	ld.w	r9,r7[-108]
80020bdc:	30 08       	mov	r8,0
80020bde:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80020be0:	ec f9 01 1c 	ld.w	r9,r6[284]
80020be4:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80020be8:	b2 08       	st.h	r9[0x0],r8
						init_wp();
80020bea:	f0 16 00 87 	mcall	r6[540]
80020bee:	c3 68       	rjmp	80020c5a <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020bf0:	ec f8 00 f8 	ld.w	r8,r6[248]
80020bf4:	70 08       	ld.w	r8,r8[0x0]
80020bf6:	5c 88       	casts.h	r8
80020bf8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020bfc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020c00:	11 e8       	ld.ub	r8,r8[0x6]
80020c02:	10 9a       	mov	r10,r8
80020c04:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020c08:	11 d8       	ld.ub	r8,r8[0x5]
80020c0a:	10 9b       	mov	r11,r8
80020c0c:	30 0c       	mov	r12,0
80020c0e:	fe b0 f4 bb 	rcall	8001f584 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80020c12:	fe cc 04 c2 	sub	r12,pc,1218
80020c16:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
80020c1a:	ec f8 00 f8 	ld.w	r8,r6[248]
80020c1e:	70 08       	ld.w	r8,r8[0x0]
80020c20:	30 ab       	mov	r11,10
80020c22:	10 9c       	mov	r12,r8
80020c24:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80020c28:	fe cc 0c 50 	sub	r12,pc,3152
80020c2c:	f0 16 00 01 	mcall	r6[4]
80020c30:	c1 58       	rjmp	80020c5a <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80020c32:	30 18       	mov	r8,1
80020c34:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80020c38:	fe cc 02 f4 	sub	r12,pc,756
80020c3c:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020c40:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020c44:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020c48:	11 e8       	ld.ub	r8,r8[0x6]
80020c4a:	10 9a       	mov	r10,r8
80020c4c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020c50:	11 d8       	ld.ub	r8,r8[0x5]
80020c52:	10 9b       	mov	r11,r8
80020c54:	30 0c       	mov	r12,0
80020c56:	fe b0 f6 bd 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
80020c5a:	2e 5d       	sub	sp,-108
80020c5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020c60:	80 02       	ld.sh	r2,r0[0x0]
80020c62:	07 e6       	ld.ub	r6,r3[0x6]
80020c64:	73 65       	ld.w	r5,r9[0x58]
80020c66:	74 74       	ld.w	r4,r10[0x1c]
80020c68:	69 6e       	ld.w	lr,r4[0x58]
80020c6a:	67 20       	ld.w	r0,r3[0x48]
80020c6c:	63 75       	ld.w	r5,r1[0x5c]
80020c6e:	72 72       	ld.w	r2,r9[0x1c]
80020c70:	65 6e       	ld.w	lr,r2[0x58]
80020c72:	74 20       	ld.w	r0,r10[0x8]
80020c74:	77 70       	ld.w	r0,r11[0x5c]
80020c76:	00 00       	add	r0,r0
80020c78:	53 65       	stdsp	sp[0xd8],r5
80020c7a:	74 20       	ld.w	r0,r10[0x8]
80020c7c:	63 75       	ld.w	r5,r1[0x5c]
80020c7e:	72 72       	ld.w	r2,r9[0x1c]
80020c80:	65 6e       	ld.w	lr,r2[0x58]
80020c82:	74 20       	ld.w	r0,r10[0x8]
80020c84:	77 61       	ld.w	r1,r11[0x58]
80020c86:	79 70       	ld.w	r0,r12[0x5c]
80020c88:	6f 69       	ld.w	r9,r7[0x58]
80020c8a:	6e 74       	ld.w	r4,r7[0x1c]
80020c8c:	20 74       	sub	r4,7
80020c8e:	6f 20       	ld.w	r0,r7[0x48]
80020c90:	6e 75       	ld.w	r5,r7[0x1c]
80020c92:	6d 62       	ld.w	r2,r6[0x58]
80020c94:	65 72       	ld.w	r2,r2[0x5c]
	...

80020c98 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
80020c98:	eb cd 40 c0 	pushm	r6-r7,lr
80020c9c:	1a 97       	mov	r7,sp
80020c9e:	20 5d       	sub	sp,20
80020ca0:	4c 06       	lddpc	r6,80020da0 <set_current_wp+0x108>
80020ca2:	1e 26       	rsub	r6,pc
80020ca4:	ef 4c ff f4 	st.w	r7[-12],r12
80020ca8:	ef 4b ff f0 	st.w	r7[-16],r11
80020cac:	14 98       	mov	r8,r10
80020cae:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
80020cb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020cb6:	ee c9 00 08 	sub	r9,r7,8
80020cba:	12 9b       	mov	r11,r9
80020cbc:	10 9c       	mov	r12,r8
80020cbe:	fe b0 f5 21 	rcall	8001f700 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020cc2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80020cc6:	ec f8 00 6c 	ld.w	r8,r6[108]
80020cca:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020ccc:	f0 09 18 00 	cp.b	r9,r8
80020cd0:	c6 41       	brne	80020d98 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020cd2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80020cd6:	ec f8 00 c0 	ld.w	r8,r6[192]
80020cda:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020cdc:	f0 09 18 00 	cp.b	r9,r8
80020ce0:	c5 c1       	brne	80020d98 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80020ce2:	fe cc 00 7e 	sub	r12,pc,126
80020ce6:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020cea:	30 08       	mov	r8,0
80020cec:	ef 48 ff fc 	st.w	r7[-4],r8
80020cf0:	c1 08       	rjmp	80020d10 <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80020cf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020cf6:	a3 68       	lsl	r8,0x2
80020cf8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cfc:	f2 08 00 08 	add	r8,r9,r8
80020d00:	70 09       	ld.w	r9,r8[0x0]
80020d02:	30 08       	mov	r8,0
80020d04:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020d06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020d0a:	2f f8       	sub	r8,-1
80020d0c:	ef 48 ff fc 	st.w	r7[-4],r8
80020d10:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80020d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020d18:	10 39       	cp.w	r9,r8
80020d1a:	fe 99 ff ec 	brgt	80020cf2 <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80020d1e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020d22:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80020d26:	f0 09 19 00 	cp.h	r9,r8
80020d2a:	e0 88 00 2b 	brls	80020d80 <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80020d2e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020d32:	5c 78       	castu.h	r8
80020d34:	a3 68       	lsl	r8,0x2
80020d36:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d3a:	f2 08 00 08 	add	r8,r9,r8
80020d3e:	70 09       	ld.w	r9,r8[0x0]
80020d40:	30 18       	mov	r8,1
80020d42:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80020d44:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020d48:	5c 78       	castu.h	r8
80020d4a:	a3 68       	lsl	r8,0x2
80020d4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d50:	f2 08 00 08 	add	r8,r9,r8
80020d54:	70 08       	ld.w	r8,r8[0x0]
80020d56:	11 c8       	ld.ub	r8,r8[0x4]
80020d58:	10 9b       	mov	r11,r8
80020d5a:	30 0c       	mov	r12,0
80020d5c:	fe b0 f4 f8 	rcall	8001f74c <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80020d60:	fe cc 00 e8 	sub	r12,pc,232
80020d64:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80020d68:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020d6c:	5c 78       	castu.h	r8
80020d6e:	30 ab       	mov	r11,10
80020d70:	10 9c       	mov	r12,r8
80020d72:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020d76:	fe cc 0d 9e 	sub	r12,pc,3486
80020d7a:	f0 16 00 01 	mcall	r6[4]
80020d7e:	c0 d8       	rjmp	80020d98 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80020d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d84:	11 e8       	ld.ub	r8,r8[0x6]
80020d86:	10 9a       	mov	r10,r8
80020d88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d8c:	11 d8       	ld.ub	r8,r8[0x5]
80020d8e:	30 39       	mov	r9,3
80020d90:	10 9b       	mov	r11,r8
80020d92:	30 0c       	mov	r12,0
80020d94:	fe b0 f6 1e 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
		}
	}
}
80020d98:	2f bd       	sub	sp,-20
80020d9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020d9e:	00 00       	add	r0,r0
80020da0:	80 02       	ld.sh	r2,r0[0x0]
80020da2:	0b 26       	ld.uh	r6,r5++
80020da4:	43 6c       	lddsp	r12,sp[0xd8]
80020da6:	65 61       	ld.w	r1,r2[0x58]
80020da8:	72 20       	ld.w	r0,r9[0x8]
80020daa:	57 61       	stdsp	sp[0x1d8],r1
80020dac:	79 70       	ld.w	r0,r12[0x5c]
80020dae:	6f 69       	ld.w	r9,r7[0x58]
80020db0:	6e 74       	ld.w	r4,r7[0x1c]
80020db2:	20 6c       	sub	r12,6
80020db4:	69 73       	ld.w	r3,r4[0x5c]
80020db6:	74 00       	ld.w	r0,r10[0x0]

80020db8 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80020db8:	eb cd 40 c0 	pushm	r6-r7,lr
80020dbc:	1a 97       	mov	r7,sp
80020dbe:	20 4d       	sub	sp,16
80020dc0:	4a 06       	lddpc	r6,80020e40 <clear_waypoint_list+0x88>
80020dc2:	1e 26       	rsub	r6,pc
80020dc4:	ef 4c ff f8 	st.w	r7[-8],r12
80020dc8:	ef 4b ff f4 	st.w	r7[-12],r11
80020dcc:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
80020dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020dd4:	ee c9 00 02 	sub	r9,r7,2
80020dd8:	12 9b       	mov	r11,r9
80020dda:	10 9c       	mov	r12,r8
80020ddc:	fe b0 f5 bb 	rcall	8001f952 <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020de0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020de4:	ec f8 00 6c 	ld.w	r8,r6[108]
80020de8:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020dea:	f0 09 18 00 	cp.b	r9,r8
80020dee:	c2 51       	brne	80020e38 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020df0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020df4:	ec f8 00 c0 	ld.w	r8,r6[192]
80020df8:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020dfa:	f0 09 18 00 	cp.b	r9,r8
80020dfe:	c1 d1       	brne	80020e38 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
80020e00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020e04:	30 08       	mov	r8,0
80020e06:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
80020e08:	ec f9 01 1c 	ld.w	r9,r6[284]
80020e0c:	30 08       	mov	r8,0
80020e0e:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80020e10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020e14:	30 08       	mov	r8,0
80020e16:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80020e18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e1c:	11 e8       	ld.ub	r8,r8[0x6]
80020e1e:	10 9a       	mov	r10,r8
80020e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020e24:	11 d8       	ld.ub	r8,r8[0x5]
80020e26:	30 19       	mov	r9,1
80020e28:	10 9b       	mov	r11,r8
80020e2a:	30 0c       	mov	r12,0
80020e2c:	fe b0 f5 d2 	rcall	8001f9d0 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80020e30:	fe cc 00 8c 	sub	r12,pc,140
80020e34:	f0 16 00 01 	mcall	r6[4]
	}		
}
80020e38:	2f cd       	sub	sp,-16
80020e3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020e3e:	00 00       	add	r0,r0
80020e40:	80 02       	ld.sh	r2,r0[0x0]
80020e42:	0c 46       	or	r6,r6
80020e44:	62 61       	ld.w	r1,r1[0x18]
80020e46:	73 65       	ld.w	r5,r9[0x58]
80020e48:	5f 6d       	srmi	sp
80020e4a:	6f 64       	ld.w	r4,r7[0x58]
80020e4c:	65 3a       	ld.w	r10,r2[0x4c]
80020e4e:	00 00       	add	r0,r0
80020e50:	2c 20       	sub	r0,-62
80020e52:	63 75       	ld.w	r5,r1[0x5c]
80020e54:	73 74       	ld.w	r4,r9[0x5c]
80020e56:	6f 6d       	ld.w	sp,r7[0x58]
80020e58:	20 6d       	sub	sp,24
80020e5a:	6f 64       	ld.w	r4,r7[0x58]
80020e5c:	65 3a       	ld.w	r10,r2[0x4c]
	...

80020e60 <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
80020e60:	eb cd 40 e0 	pushm	r5-r7,lr
80020e64:	1a 97       	mov	r7,sp
80020e66:	20 6d       	sub	sp,24
80020e68:	4e 26       	lddpc	r6,80020ff0 <set_mav_mode+0x190>
80020e6a:	1e 26       	rsub	r6,pc
80020e6c:	ef 4c ff f4 	st.w	r7[-12],r12
80020e70:	ef 4b ff f0 	st.w	r7[-16],r11
80020e74:	ef 4a ff ec 	st.w	r7[-20],r10
80020e78:	12 98       	mov	r8,r9
80020e7a:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
80020e7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020e82:	ee c9 00 08 	sub	r9,r7,8
80020e86:	12 9b       	mov	r11,r9
80020e88:	10 9c       	mov	r12,r8
80020e8a:	fe b0 f1 53 	rcall	8001f130 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
80020e8e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80020e92:	ec f8 00 6c 	ld.w	r8,r6[108]
80020e96:	11 88       	ld.ub	r8,r8[0x0]
80020e98:	f0 09 18 00 	cp.b	r9,r8
80020e9c:	e0 81 00 a6 	brne	80020fe8 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80020ea0:	fe cc 00 5c 	sub	r12,pc,92
80020ea4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80020ea8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020eac:	30 ab       	mov	r11,10
80020eae:	10 9c       	mov	r12,r8
80020eb0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80020eb4:	fe cc 00 64 	sub	r12,pc,100
80020eb8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80020ebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020ec0:	30 ab       	mov	r11,10
80020ec2:	10 9c       	mov	r12,r8
80020ec4:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020ec8:	fe cc 0e f0 	sub	r12,pc,3824
80020ecc:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
80020ed0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80020ed4:	30 08       	mov	r8,0
80020ed6:	f0 09 18 00 	cp.b	r9,r8
80020eda:	c3 e1       	brne	80020f56 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80020edc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020ee0:	e0 48 00 58 	cp.w	r8,88
80020ee4:	c0 e0       	breq	80020f00 <set_mav_mode+0xa0>
80020ee6:	e0 89 00 06 	brgt	80020ef2 <set_mav_mode+0x92>
80020eea:	e0 48 00 50 	cp.w	r8,80
80020eee:	c0 90       	breq	80020f00 <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020ef0:	c7 c8       	rjmp	80020fe8 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
80020ef2:	e0 48 00 5c 	cp.w	r8,92
80020ef6:	c0 50       	breq	80020f00 <set_mav_mode+0xa0>
80020ef8:	e0 48 00 c0 	cp.w	r8,192
80020efc:	c0 c0       	breq	80020f14 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020efe:	c7 58       	rjmp	80020fe8 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020f00:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020f04:	30 38       	mov	r8,3
80020f06:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020f08:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020f0c:	34 08       	mov	r8,64
80020f0e:	b2 88       	st.b	r9[0x0],r8
				break;
80020f10:	d7 03       	nop
80020f12:	c6 b8       	rjmp	80020fe8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80020f14:	fe b0 f6 64 	rcall	8001fbdc <get_thrust_from_remote>
80020f18:	18 98       	mov	r8,r12
80020f1a:	10 9c       	mov	r12,r8
80020f1c:	f0 16 00 03 	mcall	r6[12]
80020f20:	30 05       	mov	r5,0
80020f22:	e0 68 66 66 	mov	r8,26214
80020f26:	ea 18 66 66 	orh	r8,0x6666
80020f2a:	e0 69 66 66 	mov	r9,26214
80020f2e:	ea 19 bf ee 	orh	r9,0xbfee
80020f32:	f0 16 00 20 	mcall	r6[128]
80020f36:	18 98       	mov	r8,r12
80020f38:	58 08       	cp.w	r8,0
80020f3a:	c0 20       	breq	80020f3e <set_mav_mode+0xde>
80020f3c:	30 15       	mov	r5,1
80020f3e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80020f42:	c5 20       	breq	80020fe6 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80020f44:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020f48:	30 48       	mov	r8,4
80020f4a:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020f4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020f50:	3c 08       	mov	r8,-64
80020f52:	b2 88       	st.b	r9[0x0],r8
80020f54:	c4 a8       	rjmp	80020fe8 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80020f56:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020f5a:	e0 48 00 c0 	cp.w	r8,192
80020f5e:	c2 00       	breq	80020f9e <set_mav_mode+0x13e>
80020f60:	e0 89 00 0c 	brgt	80020f78 <set_mav_mode+0x118>
80020f64:	e0 48 00 58 	cp.w	r8,88
80020f68:	c1 20       	breq	80020f8c <set_mav_mode+0x12c>
80020f6a:	e0 48 00 5c 	cp.w	r8,92
80020f6e:	c0 f0       	breq	80020f8c <set_mav_mode+0x12c>
80020f70:	e0 48 00 50 	cp.w	r8,80
80020f74:	c0 c0       	breq	80020f8c <set_mav_mode+0x12c>
80020f76:	c3 98       	rjmp	80020fe8 <set_mav_mode+0x188>
80020f78:	e0 48 00 d8 	cp.w	r8,216
80020f7c:	c2 30       	breq	80020fc2 <set_mav_mode+0x162>
80020f7e:	e0 48 00 dc 	cp.w	r8,220
80020f82:	c2 90       	breq	80020fd4 <set_mav_mode+0x174>
80020f84:	e0 48 00 d0 	cp.w	r8,208
80020f88:	c1 40       	breq	80020fb0 <set_mav_mode+0x150>
80020f8a:	c2 f8       	rjmp	80020fe8 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020f8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020f90:	30 38       	mov	r8,3
80020f92:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020f94:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020f98:	34 08       	mov	r8,64
80020f9a:	b2 88       	st.b	r9[0x0],r8
				break;
80020f9c:	c2 68       	rjmp	80020fe8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020f9e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020fa2:	30 48       	mov	r8,4
80020fa4:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020fa6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020faa:	3c 08       	mov	r8,-64
80020fac:	b2 88       	st.b	r9[0x0],r8
				break;
80020fae:	c1 d8       	rjmp	80020fe8 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020fb0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020fb4:	30 48       	mov	r8,4
80020fb6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80020fb8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020fbc:	3d 08       	mov	r8,-48
80020fbe:	b2 88       	st.b	r9[0x0],r8
				break;
80020fc0:	c1 48       	rjmp	80020fe8 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020fc2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020fc6:	30 48       	mov	r8,4
80020fc8:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
80020fca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020fce:	3d 88       	mov	r8,-40
80020fd0:	b2 88       	st.b	r9[0x0],r8
				break;
80020fd2:	c0 b8       	rjmp	80020fe8 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020fd4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020fd8:	30 48       	mov	r8,4
80020fda:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80020fdc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020fe0:	3d c8       	mov	r8,-36
80020fe2:	b2 88       	st.b	r9[0x0],r8
80020fe4:	c0 28       	rjmp	80020fe8 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020fe6:	d7 03       	nop
				break;
			}
		}
		
	}
}
80020fe8:	2f ad       	sub	sp,-24
80020fea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80020fee:	00 00       	add	r0,r0
80020ff0:	80 02       	ld.sh	r2,r0[0x0]
80020ff2:	0c ee       	st.h	--r6,lr
80020ff4:	53 65       	stdsp	sp[0xd8],r5
80020ff6:	6e 64       	ld.w	r4,r7[0x18]
80020ff8:	69 6e       	ld.w	lr,r4[0x58]
80020ffa:	67 20       	ld.w	r0,r3[0x48]
80020ffc:	77 61       	ld.w	r1,r11[0x58]
80020ffe:	79 70       	ld.w	r0,r12[0x5c]
80021000:	6f 69       	ld.w	r9,r7[0x58]
80021002:	6e 74       	ld.w	r4,r7[0x1c]
80021004:	20 74       	sub	r4,7
80021006:	69 6d       	ld.w	sp,r4[0x58]
80021008:	65 6f       	ld.w	pc,r2[0x58]
8002100a:	75 74       	ld.w	r4,r10[0x5c]
8002100c:	00 00       	add	r0,r0
8002100e:	00 00       	add	r0,r0
80021010:	52 65       	stdsp	sp[0x98],r5
80021012:	63 65       	ld.w	r5,r1[0x58]
80021014:	69 76       	ld.w	r6,r4[0x5c]
80021016:	69 6e       	ld.w	lr,r4[0x58]
80021018:	67 20       	ld.w	r0,r3[0x48]
8002101a:	77 61       	ld.w	r1,r11[0x58]
8002101c:	79 70       	ld.w	r0,r12[0x5c]
8002101e:	6f 69       	ld.w	r9,r7[0x58]
80021020:	6e 74       	ld.w	r4,r7[0x1c]
80021022:	20 74       	sub	r4,7
80021024:	69 6d       	ld.w	sp,r4[0x58]
80021026:	65 6f       	ld.w	pc,r2[0x58]
80021028:	75 74       	ld.w	r4,r10[0x5c]
	...

8002102c <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
8002102c:	eb cd 40 c0 	pushm	r6-r7,lr
80021030:	1a 97       	mov	r7,sp
80021032:	20 4d       	sub	sp,16
80021034:	4a 76       	lddpc	r6,800210d0 <control_time_out_waypoint_msg+0xa4>
80021036:	1e 26       	rsub	r6,pc
80021038:	ef 4c ff f8 	st.w	r7[-8],r12
8002103c:	ef 4b ff f4 	st.w	r7[-12],r11
80021040:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80021044:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021048:	11 88       	ld.ub	r8,r8[0x0]
8002104a:	58 08       	cp.w	r8,0
8002104c:	c0 61       	brne	80021058 <control_time_out_waypoint_msg+0x2c>
8002104e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021052:	11 88       	ld.ub	r8,r8[0x0]
80021054:	58 08       	cp.w	r8,0
80021056:	c3 90       	breq	800210c8 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80021058:	f0 16 00 0e 	mcall	r6[56]
8002105c:	18 98       	mov	r8,r12
8002105e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
80021062:	ec f8 01 68 	ld.w	r8,r6[360]
80021066:	70 08       	ld.w	r8,r8[0x0]
80021068:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002106c:	10 19       	sub	r9,r8
8002106e:	ec f8 04 00 	ld.w	r8,r6[1024]
80021072:	70 08       	ld.w	r8,r8[0x0]
80021074:	10 39       	cp.w	r9,r8
80021076:	e0 88 00 29 	brls	800210c8 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
8002107a:	ec f8 01 68 	ld.w	r8,r6[360]
8002107e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021082:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80021084:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021088:	11 88       	ld.ub	r8,r8[0x0]
8002108a:	58 08       	cp.w	r8,0
8002108c:	c0 90       	breq	8002109e <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
8002108e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021092:	30 08       	mov	r8,0
80021094:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80021096:	fe cc 00 a2 	sub	r12,pc,162
8002109a:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
8002109e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800210a2:	11 88       	ld.ub	r8,r8[0x0]
800210a4:	58 08       	cp.w	r8,0
800210a6:	c1 10       	breq	800210c8 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
800210a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800210ac:	30 08       	mov	r8,0
800210ae:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
800210b0:	fe cc 00 a0 	sub	r12,pc,160
800210b4:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
800210b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800210bc:	30 08       	mov	r8,0
800210be:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
800210c0:	ec f9 01 1c 	ld.w	r9,r6[284]
800210c4:	30 08       	mov	r8,0
800210c6:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
800210c8:	2f cd       	sub	sp,-16
800210ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800210ce:	00 00       	add	r0,r0
800210d0:	80 02       	ld.sh	r2,r0[0x0]
800210d2:	0e ba       	st.h	r7++,r10
800210d4:	77 70       	ld.w	r0,r11[0x5c]
800210d6:	5f 67       	srmi	r7
800210d8:	6c 6f       	ld.w	pc,r6[0x18]
800210da:	62 61       	ld.w	r1,r1[0x18]
800210dc:	6c 3a       	ld.w	r10,r6[0xc]
800210de:	20 6c       	sub	r12,6
800210e0:	61 74       	ld.w	r4,r0[0x5c]
800210e2:	20 28       	sub	r8,2
800210e4:	78 31       	ld.w	r1,r12[0xc]
800210e6:	65 37       	ld.w	r7,r2[0x4c]
800210e8:	29 3a       	sub	r10,-109
800210ea:	00 00       	add	r0,r0
800210ec:	20 6c       	sub	r12,6
800210ee:	6f 6e       	ld.w	lr,r7[0x58]
800210f0:	67 20       	ld.w	r0,r3[0x48]
800210f2:	28 78       	sub	r8,-121
800210f4:	31 65       	mov	r5,22
800210f6:	37 29       	mov	r9,114
800210f8:	3a 00       	mov	r0,-96
800210fa:	00 00       	add	r0,r0
800210fc:	20 61       	sub	r1,6
800210fe:	6c 74       	ld.w	r4,r6[0x1c]
80021100:	20 28       	sub	r8,2
80021102:	78 31       	ld.w	r1,r12[0xc]
80021104:	30 30       	mov	r0,3
80021106:	30 29       	mov	r9,2
80021108:	3a 00       	mov	r0,-96
8002110a:	00 00       	add	r0,r0
8002110c:	20 77       	sub	r7,7
8002110e:	70 5f       	ld.w	pc,r8[0x14]
80021110:	63 6f       	ld.w	pc,r1[0x58]
80021112:	6f 72       	ld.w	r2,r7[0x5c]
80021114:	3a 20       	mov	r0,-94
80021116:	78 20       	ld.w	r0,r12[0x8]
80021118:	28 78       	sub	r8,-121
8002111a:	31 30       	mov	r0,19
8002111c:	30 29       	mov	r9,2
8002111e:	3a 00       	mov	r0,-96
80021120:	2c 20       	sub	r0,-62
80021122:	79 20       	ld.w	r0,r12[0x48]
80021124:	28 78       	sub	r8,-121
80021126:	31 30       	mov	r0,19
80021128:	30 29       	mov	r9,2
8002112a:	3a 00       	mov	r0,-96
8002112c:	2c 20       	sub	r0,-62
8002112e:	7a 20       	ld.w	r0,sp[0x8]
80021130:	28 78       	sub	r8,-121
80021132:	31 30       	mov	r0,19
80021134:	30 29       	mov	r9,2
80021136:	3a 00       	mov	r0,-96
80021138:	20 6c       	sub	r12,6
8002113a:	6f 63       	ld.w	r3,r7[0x58]
8002113c:	61 6c       	ld.w	r12,r0[0x58]
8002113e:	4f 72       	lddpc	r2,80021318 <set_waypoint_from_frame+0x192>
80021140:	69 67       	ld.w	r7,r4[0x58]
80021142:	69 6e       	ld.w	lr,r4[0x58]
80021144:	20 6c       	sub	r12,6
80021146:	61 74       	ld.w	r4,r0[0x5c]
80021148:	20 28       	sub	r8,2
8002114a:	78 31       	ld.w	r1,r12[0xc]
8002114c:	65 37       	ld.w	r7,r2[0x4c]
8002114e:	29 3a       	sub	r10,-109
80021150:	00 00       	add	r0,r0
80021152:	00 00       	add	r0,r0
80021154:	4c 6f       	lddpc	pc,8002126c <set_waypoint_from_frame+0xe6>
80021156:	63 61       	ld.w	r1,r1[0x58]
80021158:	6c 4f       	ld.w	pc,r6[0x10]
8002115a:	72 69       	ld.w	r9,r9[0x18]
8002115c:	67 69       	ld.w	r9,r3[0x58]
8002115e:	6e 3a       	ld.w	r10,r7[0xc]
80021160:	20 6c       	sub	r12,6
80021162:	61 74       	ld.w	r4,r0[0x5c]
80021164:	20 28       	sub	r8,2
80021166:	78 31       	ld.w	r1,r12[0xc]
80021168:	65 37       	ld.w	r7,r2[0x4c]
8002116a:	29 3a       	sub	r10,-109
8002116c:	00 00       	add	r0,r0
8002116e:	00 00       	add	r0,r0
80021170:	20 67       	sub	r7,6
80021172:	6c 6f       	ld.w	pc,r6[0x18]
80021174:	62 61       	ld.w	r1,r1[0x18]
80021176:	6c 20       	ld.w	r0,r6[0x8]
80021178:	61 6c       	ld.w	r12,r0[0x58]
8002117a:	74 20       	ld.w	r0,r10[0x8]
8002117c:	28 78       	sub	r8,-121
8002117e:	31 30       	mov	r0,19
80021180:	30 30       	mov	r0,3
80021182:	29 3a       	sub	r10,-109
	...

80021186 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80021186:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002118a:	1a 97       	mov	r7,sp
8002118c:	fa cd 00 a8 	sub	sp,sp,168
80021190:	fe f6 05 f0 	ld.w	r6,pc[1520]
80021194:	1e 26       	rsub	r6,pc
80021196:	ee c5 ff ec 	sub	r5,r7,-20
8002119a:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
8002119c:	30 08       	mov	r8,0
8002119e:	ef 68 ff ff 	st.b	r7[-1],r8
800211a2:	c0 e8       	rjmp	800211be <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
800211a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800211a8:	a3 68       	lsl	r8,0x2
800211aa:	ee 08 00 08 	add	r8,r7,r8
800211ae:	30 09       	mov	r9,0
800211b0:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
800211b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800211b8:	2f f8       	sub	r8,-1
800211ba:	ef 68 ff ff 	st.b	r7[-1],r8
800211be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800211c2:	30 28       	mov	r8,2
800211c4:	f0 09 18 00 	cp.b	r9,r8
800211c8:	fe 98 ff ee 	brls	800211a4 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
800211cc:	0b 88       	ld.ub	r8,r5[0x0]
800211ce:	58 18       	cp.w	r8,1
800211d0:	e0 80 01 31 	breq	80021432 <set_waypoint_from_frame+0x2ac>
800211d4:	e0 89 00 06 	brgt	800211e0 <set_waypoint_from_frame+0x5a>
800211d8:	58 08       	cp.w	r8,0
800211da:	c0 b0       	breq	800211f0 <set_waypoint_from_frame+0x6a>
800211dc:	e0 8f 02 a7 	bral	8002172a <set_waypoint_from_frame+0x5a4>
800211e0:	58 28       	cp.w	r8,2
800211e2:	e0 80 02 a3 	breq	80021728 <set_waypoint_from_frame+0x5a2>
800211e6:	58 38       	cp.w	r8,3
800211e8:	e0 80 01 a7 	breq	80021536 <set_waypoint_from_frame+0x3b0>
800211ec:	e0 8f 02 9f 	bral	8002172a <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
800211f0:	ea e8 00 18 	ld.d	r8,r5[24]
800211f4:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
800211f8:	ea e8 00 20 	ld.d	r8,r5[32]
800211fc:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021200:	ea e8 00 28 	ld.d	r8,r5[40]
80021204:	10 9a       	mov	r10,r8
80021206:	12 9b       	mov	r11,r9
80021208:	f0 16 00 09 	mcall	r6[36]
8002120c:	18 98       	mov	r8,r12
8002120e:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80021212:	ee cc 00 a8 	sub	r12,r7,168
80021216:	20 7d       	sub	sp,28
80021218:	1a 98       	mov	r8,sp
8002121a:	10 9a       	mov	r10,r8
8002121c:	ea cb ff d0 	sub	r11,r5,-48
80021220:	f4 c8 00 00 	sub	r8,r10,0
80021224:	f6 c9 00 00 	sub	r9,r11,0
80021228:	72 0e       	ld.w	lr,r9[0x0]
8002122a:	91 0e       	st.w	r8[0x0],lr
8002122c:	72 1e       	ld.w	lr,r9[0x4]
8002122e:	91 1e       	st.w	r8[0x4],lr
80021230:	72 2e       	ld.w	lr,r9[0x8]
80021232:	91 2e       	st.w	r8[0x8],lr
80021234:	72 39       	ld.w	r9,r9[0xc]
80021236:	91 39       	st.w	r8[0xc],r9
80021238:	f6 e8 00 10 	ld.d	r8,r11[16]
8002123c:	f4 e9 00 10 	st.d	r10[16],r8
80021240:	76 68       	ld.w	r8,r11[0x18]
80021242:	95 68       	st.w	r10[0x18],r8
80021244:	20 7d       	sub	sp,28
80021246:	1a 98       	mov	r8,sp
80021248:	10 9a       	mov	r10,r8
8002124a:	ee cb 00 20 	sub	r11,r7,32
8002124e:	f4 c8 00 00 	sub	r8,r10,0
80021252:	f6 c9 00 00 	sub	r9,r11,0
80021256:	72 0e       	ld.w	lr,r9[0x0]
80021258:	91 0e       	st.w	r8[0x0],lr
8002125a:	72 1e       	ld.w	lr,r9[0x4]
8002125c:	91 1e       	st.w	r8[0x4],lr
8002125e:	72 2e       	ld.w	lr,r9[0x8]
80021260:	91 2e       	st.w	r8[0x8],lr
80021262:	72 39       	ld.w	r9,r9[0xc]
80021264:	91 39       	st.w	r8[0xc],r9
80021266:	f6 e8 00 10 	ld.d	r8,r11[16]
8002126a:	f4 e9 00 10 	st.d	r10[16],r8
8002126e:	76 68       	ld.w	r8,r11[0x18]
80021270:	95 68       	st.w	r10[0x18],r8
80021272:	f0 16 00 75 	mcall	r6[468]
80021276:	2f 2d       	sub	sp,-56
80021278:	ee cb 00 50 	sub	r11,r7,80
8002127c:	ee ca 00 a8 	sub	r10,r7,168
80021280:	f6 c8 00 00 	sub	r8,r11,0
80021284:	f4 c9 00 00 	sub	r9,r10,0
80021288:	72 0c       	ld.w	r12,r9[0x0]
8002128a:	91 0c       	st.w	r8[0x0],r12
8002128c:	72 1c       	ld.w	r12,r9[0x4]
8002128e:	91 1c       	st.w	r8[0x4],r12
80021290:	72 2c       	ld.w	r12,r9[0x8]
80021292:	91 2c       	st.w	r8[0x8],r12
80021294:	72 39       	ld.w	r9,r9[0xc]
80021296:	91 39       	st.w	r8[0xc],r9
80021298:	f6 c8 ff f0 	sub	r8,r11,-16
8002129c:	f4 c9 ff f0 	sub	r9,r10,-16
800212a0:	72 0c       	ld.w	r12,r9[0x0]
800212a2:	91 0c       	st.w	r8[0x0],r12
800212a4:	72 1c       	ld.w	r12,r9[0x4]
800212a6:	91 1c       	st.w	r8[0x4],r12
800212a8:	72 2c       	ld.w	r12,r9[0x8]
800212aa:	91 2c       	st.w	r8[0x8],r12
800212ac:	72 39       	ld.w	r9,r9[0xc]
800212ae:	91 39       	st.w	r8[0xc],r9
800212b0:	f6 c8 ff e0 	sub	r8,r11,-32
800212b4:	f4 c9 ff e0 	sub	r9,r10,-32
800212b8:	72 0a       	ld.w	r10,r9[0x0]
800212ba:	91 0a       	st.w	r8[0x0],r10
800212bc:	72 1a       	ld.w	r10,r9[0x4]
800212be:	91 1a       	st.w	r8[0x4],r10
800212c0:	72 2a       	ld.w	r10,r9[0x8]
800212c2:	91 2a       	st.w	r8[0x8],r10
800212c4:	72 39       	ld.w	r9,r9[0xc]
800212c6:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
800212c8:	fe cc 01 f4 	sub	r12,pc,500
800212cc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
800212d0:	ee ea ff e8 	ld.d	r10,r7[-24]
800212d4:	30 08       	mov	r8,0
800212d6:	e0 69 12 d0 	mov	r9,4816
800212da:	ea 19 41 63 	orh	r9,0x4163
800212de:	f0 16 00 02 	mcall	r6[8]
800212e2:	14 98       	mov	r8,r10
800212e4:	16 99       	mov	r9,r11
800212e6:	10 9a       	mov	r10,r8
800212e8:	12 9b       	mov	r11,r9
800212ea:	f0 16 00 14 	mcall	r6[80]
800212ee:	18 98       	mov	r8,r12
800212f0:	30 ab       	mov	r11,10
800212f2:	10 9c       	mov	r12,r8
800212f4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800212f8:	fe cc 02 0c 	sub	r12,pc,524
800212fc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
80021300:	ee ea ff e0 	ld.d	r10,r7[-32]
80021304:	30 08       	mov	r8,0
80021306:	e0 69 12 d0 	mov	r9,4816
8002130a:	ea 19 41 63 	orh	r9,0x4163
8002130e:	f0 16 00 02 	mcall	r6[8]
80021312:	14 98       	mov	r8,r10
80021314:	16 99       	mov	r9,r11
80021316:	10 9a       	mov	r10,r8
80021318:	12 9b       	mov	r11,r9
8002131a:	f0 16 00 14 	mcall	r6[80]
8002131e:	18 98       	mov	r8,r12
80021320:	30 ab       	mov	r11,10
80021322:	10 9c       	mov	r12,r8
80021324:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021328:	fe cc 02 2c 	sub	r12,pc,556
8002132c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
80021330:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021334:	fc 18 44 7a 	movh	r8,0x447a
80021338:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002133c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021340:	30 ab       	mov	r11,10
80021342:	10 9c       	mov	r12,r8
80021344:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80021348:	fe cc 02 3c 	sub	r12,pc,572
8002134c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021350:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021354:	fc 18 42 c8 	movh	r8,0x42c8
80021358:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002135c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021360:	30 ab       	mov	r11,10
80021362:	10 9c       	mov	r12,r8
80021364:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80021368:	fe cc 02 48 	sub	r12,pc,584
8002136c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021370:	ee f9 ff b4 	ld.w	r9,r7[-76]
80021374:	fc 18 42 c8 	movh	r8,0x42c8
80021378:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002137c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021380:	30 ab       	mov	r11,10
80021382:	10 9c       	mov	r12,r8
80021384:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80021388:	fe cc 02 5c 	sub	r12,pc,604
8002138c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021390:	ee f9 ff b8 	ld.w	r9,r7[-72]
80021394:	fc 18 42 c8 	movh	r8,0x42c8
80021398:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002139c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800213a0:	30 ab       	mov	r11,10
800213a2:	10 9c       	mov	r12,r8
800213a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
800213a8:	fe cc 02 70 	sub	r12,pc,624
800213ac:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
800213b0:	ea ea 00 38 	ld.d	r10,r5[56]
800213b4:	30 08       	mov	r8,0
800213b6:	e0 69 12 d0 	mov	r9,4816
800213ba:	ea 19 41 63 	orh	r9,0x4163
800213be:	f0 16 00 02 	mcall	r6[8]
800213c2:	14 98       	mov	r8,r10
800213c4:	16 99       	mov	r9,r11
800213c6:	10 9a       	mov	r10,r8
800213c8:	12 9b       	mov	r11,r9
800213ca:	f0 16 00 14 	mcall	r6[80]
800213ce:	18 98       	mov	r8,r12
800213d0:	30 ab       	mov	r11,10
800213d2:	10 9c       	mov	r12,r8
800213d4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800213d8:	fe cc 02 ec 	sub	r12,pc,748
800213dc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
800213e0:	ea ea 00 30 	ld.d	r10,r5[48]
800213e4:	30 08       	mov	r8,0
800213e6:	e0 69 12 d0 	mov	r9,4816
800213ea:	ea 19 41 63 	orh	r9,0x4163
800213ee:	f0 16 00 02 	mcall	r6[8]
800213f2:	14 98       	mov	r8,r10
800213f4:	16 99       	mov	r9,r11
800213f6:	10 9a       	mov	r10,r8
800213f8:	12 9b       	mov	r11,r9
800213fa:	f0 16 00 14 	mcall	r6[80]
800213fe:	18 98       	mov	r8,r12
80021400:	30 ab       	mov	r11,10
80021402:	10 9c       	mov	r12,r8
80021404:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021408:	fe cc 03 0c 	sub	r12,pc,780
8002140c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021410:	6b 09       	ld.w	r9,r5[0x40]
80021412:	fc 18 44 7a 	movh	r8,0x447a
80021416:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002141a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002141e:	30 ab       	mov	r11,10
80021420:	10 9c       	mov	r12,r8
80021422:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021426:	fe cc 14 4e 	sub	r12,pc,5198
8002142a:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002142e:	e0 8f 01 7e 	bral	8002172a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
80021432:	ea e8 00 18 	ld.d	r8,r5[24]
80021436:	10 9a       	mov	r10,r8
80021438:	12 9b       	mov	r11,r9
8002143a:	f0 16 00 09 	mcall	r6[36]
8002143e:	18 98       	mov	r8,r12
80021440:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80021444:	ea e8 00 20 	ld.d	r8,r5[32]
80021448:	10 9a       	mov	r10,r8
8002144a:	12 9b       	mov	r11,r9
8002144c:	f0 16 00 09 	mcall	r6[36]
80021450:	18 98       	mov	r8,r12
80021452:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80021456:	ea e8 00 28 	ld.d	r8,r5[40]
8002145a:	10 9a       	mov	r10,r8
8002145c:	12 9b       	mov	r11,r9
8002145e:	f0 16 00 09 	mcall	r6[36]
80021462:	18 98       	mov	r8,r12
80021464:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
80021468:	6a 58       	ld.w	r8,r5[0x14]
8002146a:	10 9c       	mov	r12,r8
8002146c:	f0 16 00 03 	mcall	r6[12]
80021470:	e0 68 2d 18 	mov	r8,11544
80021474:	ea 18 54 44 	orh	r8,0x5444
80021478:	e0 69 21 fb 	mov	r9,8699
8002147c:	ea 19 40 09 	orh	r9,0x4009
80021480:	f0 16 00 02 	mcall	r6[8]
80021484:	14 98       	mov	r8,r10
80021486:	16 99       	mov	r9,r11
80021488:	10 9a       	mov	r10,r8
8002148a:	12 9b       	mov	r11,r9
8002148c:	30 08       	mov	r8,0
8002148e:	e0 69 80 00 	mov	r9,32768
80021492:	ea 19 40 66 	orh	r9,0x4066
80021496:	f0 16 00 0c 	mcall	r6[48]
8002149a:	14 98       	mov	r8,r10
8002149c:	16 99       	mov	r9,r11
8002149e:	10 9a       	mov	r10,r8
800214a0:	12 9b       	mov	r11,r9
800214a2:	f0 16 00 09 	mcall	r6[36]
800214a6:	18 98       	mov	r8,r12
800214a8:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
800214ac:	ee cc 00 a8 	sub	r12,r7,168
800214b0:	20 cd       	sub	sp,48
800214b2:	1a 98       	mov	r8,sp
800214b4:	10 9b       	mov	r11,r8
800214b6:	ee ca 00 50 	sub	r10,r7,80
800214ba:	f6 c8 00 00 	sub	r8,r11,0
800214be:	f4 c9 00 00 	sub	r9,r10,0
800214c2:	72 0e       	ld.w	lr,r9[0x0]
800214c4:	91 0e       	st.w	r8[0x0],lr
800214c6:	72 1e       	ld.w	lr,r9[0x4]
800214c8:	91 1e       	st.w	r8[0x4],lr
800214ca:	72 2e       	ld.w	lr,r9[0x8]
800214cc:	91 2e       	st.w	r8[0x8],lr
800214ce:	72 39       	ld.w	r9,r9[0xc]
800214d0:	91 39       	st.w	r8[0xc],r9
800214d2:	f6 c8 ff f0 	sub	r8,r11,-16
800214d6:	f4 c9 ff f0 	sub	r9,r10,-16
800214da:	72 0e       	ld.w	lr,r9[0x0]
800214dc:	91 0e       	st.w	r8[0x0],lr
800214de:	72 1e       	ld.w	lr,r9[0x4]
800214e0:	91 1e       	st.w	r8[0x4],lr
800214e2:	72 2e       	ld.w	lr,r9[0x8]
800214e4:	91 2e       	st.w	r8[0x8],lr
800214e6:	72 39       	ld.w	r9,r9[0xc]
800214e8:	91 39       	st.w	r8[0xc],r9
800214ea:	f6 c8 ff e0 	sub	r8,r11,-32
800214ee:	f4 c9 ff e0 	sub	r9,r10,-32
800214f2:	72 0a       	ld.w	r10,r9[0x0]
800214f4:	91 0a       	st.w	r8[0x0],r10
800214f6:	72 1a       	ld.w	r10,r9[0x4]
800214f8:	91 1a       	st.w	r8[0x4],r10
800214fa:	72 2a       	ld.w	r10,r9[0x8]
800214fc:	91 2a       	st.w	r8[0x8],r10
800214fe:	72 39       	ld.w	r9,r9[0xc]
80021500:	91 39       	st.w	r8[0xc],r9
80021502:	f0 16 00 81 	mcall	r6[516]
80021506:	2f 4d       	sub	sp,-48
80021508:	ee ca 00 40 	sub	r10,r7,64
8002150c:	ee cb 00 a8 	sub	r11,r7,168
80021510:	f4 c8 00 00 	sub	r8,r10,0
80021514:	f6 c9 00 00 	sub	r9,r11,0
80021518:	72 0c       	ld.w	r12,r9[0x0]
8002151a:	91 0c       	st.w	r8[0x0],r12
8002151c:	72 1c       	ld.w	r12,r9[0x4]
8002151e:	91 1c       	st.w	r8[0x4],r12
80021520:	72 2c       	ld.w	r12,r9[0x8]
80021522:	91 2c       	st.w	r8[0x8],r12
80021524:	72 39       	ld.w	r9,r9[0xc]
80021526:	91 39       	st.w	r8[0xc],r9
80021528:	f6 e8 00 10 	ld.d	r8,r11[16]
8002152c:	f4 e9 00 10 	st.d	r10[16],r8
80021530:	76 68       	ld.w	r8,r11[0x18]
80021532:	95 68       	st.w	r10[0x18],r8
		break;
80021534:	cf b8       	rjmp	8002172a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80021536:	ea e8 00 18 	ld.d	r8,r5[24]
8002153a:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002153e:	ea e8 00 20 	ld.d	r8,r5[32]
80021542:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021546:	ea e8 00 28 	ld.d	r8,r5[40]
8002154a:	10 9a       	mov	r10,r8
8002154c:	12 9b       	mov	r11,r9
8002154e:	f0 16 00 09 	mcall	r6[36]
80021552:	18 98       	mov	r8,r12
80021554:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80021558:	ee ca 00 78 	sub	r10,r7,120
8002155c:	ea cb ff d0 	sub	r11,r5,-48
80021560:	f4 c8 00 00 	sub	r8,r10,0
80021564:	f6 c9 00 00 	sub	r9,r11,0
80021568:	72 0c       	ld.w	r12,r9[0x0]
8002156a:	91 0c       	st.w	r8[0x0],r12
8002156c:	72 1c       	ld.w	r12,r9[0x4]
8002156e:	91 1c       	st.w	r8[0x4],r12
80021570:	72 2c       	ld.w	r12,r9[0x8]
80021572:	91 2c       	st.w	r8[0x8],r12
80021574:	72 39       	ld.w	r9,r9[0xc]
80021576:	91 39       	st.w	r8[0xc],r9
80021578:	f6 e8 00 10 	ld.d	r8,r11[16]
8002157c:	f4 e9 00 10 	st.d	r10[16],r8
80021580:	76 68       	ld.w	r8,r11[0x18]
80021582:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
80021584:	30 08       	mov	r8,0
80021586:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
8002158a:	ee cc 00 a8 	sub	r12,r7,168
8002158e:	20 7d       	sub	sp,28
80021590:	1a 98       	mov	r8,sp
80021592:	10 9a       	mov	r10,r8
80021594:	ee cb 00 78 	sub	r11,r7,120
80021598:	f4 c8 00 00 	sub	r8,r10,0
8002159c:	f6 c9 00 00 	sub	r9,r11,0
800215a0:	72 0e       	ld.w	lr,r9[0x0]
800215a2:	91 0e       	st.w	r8[0x0],lr
800215a4:	72 1e       	ld.w	lr,r9[0x4]
800215a6:	91 1e       	st.w	r8[0x4],lr
800215a8:	72 2e       	ld.w	lr,r9[0x8]
800215aa:	91 2e       	st.w	r8[0x8],lr
800215ac:	72 39       	ld.w	r9,r9[0xc]
800215ae:	91 39       	st.w	r8[0xc],r9
800215b0:	f6 e8 00 10 	ld.d	r8,r11[16]
800215b4:	f4 e9 00 10 	st.d	r10[16],r8
800215b8:	76 68       	ld.w	r8,r11[0x18]
800215ba:	95 68       	st.w	r10[0x18],r8
800215bc:	20 7d       	sub	sp,28
800215be:	1a 98       	mov	r8,sp
800215c0:	10 9a       	mov	r10,r8
800215c2:	ee cb 00 20 	sub	r11,r7,32
800215c6:	f4 c8 00 00 	sub	r8,r10,0
800215ca:	f6 c9 00 00 	sub	r9,r11,0
800215ce:	72 0e       	ld.w	lr,r9[0x0]
800215d0:	91 0e       	st.w	r8[0x0],lr
800215d2:	72 1e       	ld.w	lr,r9[0x4]
800215d4:	91 1e       	st.w	r8[0x4],lr
800215d6:	72 2e       	ld.w	lr,r9[0x8]
800215d8:	91 2e       	st.w	r8[0x8],lr
800215da:	72 39       	ld.w	r9,r9[0xc]
800215dc:	91 39       	st.w	r8[0xc],r9
800215de:	f6 e8 00 10 	ld.d	r8,r11[16]
800215e2:	f4 e9 00 10 	st.d	r10[16],r8
800215e6:	76 68       	ld.w	r8,r11[0x18]
800215e8:	95 68       	st.w	r10[0x18],r8
800215ea:	f0 16 00 75 	mcall	r6[468]
800215ee:	2f 2d       	sub	sp,-56
800215f0:	ee cb 00 50 	sub	r11,r7,80
800215f4:	ee ca 00 a8 	sub	r10,r7,168
800215f8:	f6 c8 00 00 	sub	r8,r11,0
800215fc:	f4 c9 00 00 	sub	r9,r10,0
80021600:	72 0c       	ld.w	r12,r9[0x0]
80021602:	91 0c       	st.w	r8[0x0],r12
80021604:	72 1c       	ld.w	r12,r9[0x4]
80021606:	91 1c       	st.w	r8[0x4],r12
80021608:	72 2c       	ld.w	r12,r9[0x8]
8002160a:	91 2c       	st.w	r8[0x8],r12
8002160c:	72 39       	ld.w	r9,r9[0xc]
8002160e:	91 39       	st.w	r8[0xc],r9
80021610:	f6 c8 ff f0 	sub	r8,r11,-16
80021614:	f4 c9 ff f0 	sub	r9,r10,-16
80021618:	72 0c       	ld.w	r12,r9[0x0]
8002161a:	91 0c       	st.w	r8[0x0],r12
8002161c:	72 1c       	ld.w	r12,r9[0x4]
8002161e:	91 1c       	st.w	r8[0x4],r12
80021620:	72 2c       	ld.w	r12,r9[0x8]
80021622:	91 2c       	st.w	r8[0x8],r12
80021624:	72 39       	ld.w	r9,r9[0xc]
80021626:	91 39       	st.w	r8[0xc],r9
80021628:	f6 c8 ff e0 	sub	r8,r11,-32
8002162c:	f4 c9 ff e0 	sub	r9,r10,-32
80021630:	72 0a       	ld.w	r10,r9[0x0]
80021632:	91 0a       	st.w	r8[0x0],r10
80021634:	72 1a       	ld.w	r10,r9[0x4]
80021636:	91 1a       	st.w	r8[0x4],r10
80021638:	72 2a       	ld.w	r10,r9[0x8]
8002163a:	91 2a       	st.w	r8[0x8],r10
8002163c:	72 39       	ld.w	r9,r9[0xc]
8002163e:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80021640:	fe cc 04 ec 	sub	r12,pc,1260
80021644:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80021648:	ee ea ff 90 	ld.d	r10,r7[-112]
8002164c:	30 08       	mov	r8,0
8002164e:	e0 69 12 d0 	mov	r9,4816
80021652:	ea 19 41 63 	orh	r9,0x4163
80021656:	f0 16 00 02 	mcall	r6[8]
8002165a:	14 98       	mov	r8,r10
8002165c:	16 99       	mov	r9,r11
8002165e:	10 9a       	mov	r10,r8
80021660:	12 9b       	mov	r11,r9
80021662:	f0 16 00 14 	mcall	r6[80]
80021666:	18 98       	mov	r8,r12
80021668:	30 ab       	mov	r11,10
8002166a:	10 9c       	mov	r12,r8
8002166c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021670:	fe cc 05 84 	sub	r12,pc,1412
80021674:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
80021678:	ee ea ff 88 	ld.d	r10,r7[-120]
8002167c:	30 08       	mov	r8,0
8002167e:	e0 69 12 d0 	mov	r9,4816
80021682:	ea 19 41 63 	orh	r9,0x4163
80021686:	f0 16 00 02 	mcall	r6[8]
8002168a:	14 98       	mov	r8,r10
8002168c:	16 99       	mov	r9,r11
8002168e:	10 9a       	mov	r10,r8
80021690:	12 9b       	mov	r11,r9
80021692:	f0 16 00 14 	mcall	r6[80]
80021696:	18 98       	mov	r8,r12
80021698:	30 ab       	mov	r11,10
8002169a:	10 9c       	mov	r12,r8
8002169c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
800216a0:	fe cc 05 30 	sub	r12,pc,1328
800216a4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
800216a8:	6b 09       	ld.w	r9,r5[0x40]
800216aa:	fc 18 44 7a 	movh	r8,0x447a
800216ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800216b2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216b6:	30 ab       	mov	r11,10
800216b8:	10 9c       	mov	r12,r8
800216ba:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800216be:	fe cc 05 b2 	sub	r12,pc,1458
800216c2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
800216c6:	ee f9 ff b0 	ld.w	r9,r7[-80]
800216ca:	fc 18 42 c8 	movh	r8,0x42c8
800216ce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800216d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216d6:	30 ab       	mov	r11,10
800216d8:	10 9c       	mov	r12,r8
800216da:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800216de:	fe cc 05 be 	sub	r12,pc,1470
800216e2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800216e6:	ee f9 ff b4 	ld.w	r9,r7[-76]
800216ea:	fc 18 42 c8 	movh	r8,0x42c8
800216ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800216f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800216f6:	30 ab       	mov	r11,10
800216f8:	10 9c       	mov	r12,r8
800216fa:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800216fe:	fe cc 05 d2 	sub	r12,pc,1490
80021702:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021706:	ee f9 ff b8 	ld.w	r9,r7[-72]
8002170a:	fc 18 42 c8 	movh	r8,0x42c8
8002170e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021712:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021716:	30 ab       	mov	r11,10
80021718:	10 9c       	mov	r12,r8
8002171a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002171e:	fe cc 17 46 	sub	r12,pc,5958
80021722:	f0 16 00 01 	mcall	r6[4]
80021726:	c0 28       	rjmp	8002172a <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80021728:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
8002172a:	06 9b       	mov	r11,r3
8002172c:	ee ca 00 50 	sub	r10,r7,80
80021730:	f6 c8 00 00 	sub	r8,r11,0
80021734:	f4 c9 00 00 	sub	r9,r10,0
80021738:	72 0c       	ld.w	r12,r9[0x0]
8002173a:	91 0c       	st.w	r8[0x0],r12
8002173c:	72 1c       	ld.w	r12,r9[0x4]
8002173e:	91 1c       	st.w	r8[0x4],r12
80021740:	72 2c       	ld.w	r12,r9[0x8]
80021742:	91 2c       	st.w	r8[0x8],r12
80021744:	72 39       	ld.w	r9,r9[0xc]
80021746:	91 39       	st.w	r8[0xc],r9
80021748:	f6 c8 ff f0 	sub	r8,r11,-16
8002174c:	f4 c9 ff f0 	sub	r9,r10,-16
80021750:	72 0c       	ld.w	r12,r9[0x0]
80021752:	91 0c       	st.w	r8[0x0],r12
80021754:	72 1c       	ld.w	r12,r9[0x4]
80021756:	91 1c       	st.w	r8[0x4],r12
80021758:	72 2c       	ld.w	r12,r9[0x8]
8002175a:	91 2c       	st.w	r8[0x8],r12
8002175c:	72 39       	ld.w	r9,r9[0xc]
8002175e:	91 39       	st.w	r8[0xc],r9
80021760:	f6 c8 ff e0 	sub	r8,r11,-32
80021764:	f4 c9 ff e0 	sub	r9,r10,-32
80021768:	72 0a       	ld.w	r10,r9[0x0]
8002176a:	91 0a       	st.w	r8[0x0],r10
8002176c:	72 1a       	ld.w	r10,r9[0x4]
8002176e:	91 1a       	st.w	r8[0x4],r10
80021770:	72 2a       	ld.w	r10,r9[0x8]
80021772:	91 2a       	st.w	r8[0x8],r10
80021774:	72 39       	ld.w	r9,r9[0xc]
80021776:	91 39       	st.w	r8[0xc],r9
}
80021778:	06 9c       	mov	r12,r3
8002177a:	2d 6d       	sub	sp,-168
8002177c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021780:	80 02       	ld.sh	r2,r0[0x0]
80021782:	10 18       	sub	r8,r8
80021784:	50 6f       	stdsp	sp[0x18],pc
80021786:	73 69       	ld.w	r9,r9[0x58]
80021788:	74 69       	ld.w	r9,r10[0x18]
8002178a:	6f 6e       	ld.w	lr,r7[0x58]
8002178c:	20 68       	sub	r8,6
8002178e:	6f 6c       	ld.w	r12,r7[0x58]
80021790:	64 20       	ld.w	r0,r2[0x8]
80021792:	61 74       	ld.w	r4,r0[0x5c]
80021794:	3a 20       	mov	r0,-94
80021796:	00 00       	add	r0,r0
80021798:	29 0a       	sub	r10,-112
	...

8002179c <wp_hold_init>:

void wp_hold_init()
{
8002179c:	eb cd 40 c0 	pushm	r6-r7,lr
800217a0:	1a 97       	mov	r7,sp
800217a2:	20 3d       	sub	sp,12
800217a4:	4d 86       	lddpc	r6,80021904 <wp_hold_init+0x168>
800217a6:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
800217a8:	ec f8 00 00 	ld.w	r8,r6[0]
800217ac:	70 08       	ld.w	r8,r8[0x0]
800217ae:	f1 38 0f 77 	ld.ub	r8,r8[3959]
800217b2:	ec 18 00 01 	eorl	r8,0x1
800217b6:	5c 58       	castu.b	r8
800217b8:	e0 80 00 a3 	breq	800218fe <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
800217bc:	fe cc 00 38 	sub	r12,pc,56
800217c0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
800217c4:	ec f8 00 00 	ld.w	r8,r6[0]
800217c8:	70 08       	ld.w	r8,r8[0x0]
800217ca:	f0 f8 0c 5c 	ld.w	r8,r8[3164]
800217ce:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800217d2:	30 ab       	mov	r11,10
800217d4:	10 9c       	mov	r12,r8
800217d6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
800217da:	ec f8 00 00 	ld.w	r8,r6[0]
800217de:	70 08       	ld.w	r8,r8[0x0]
800217e0:	f0 f8 0c 60 	ld.w	r8,r8[3168]
800217e4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800217e8:	30 ab       	mov	r11,10
800217ea:	10 9c       	mov	r12,r8
800217ec:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
800217f0:	ec f8 00 00 	ld.w	r8,r6[0]
800217f4:	70 08       	ld.w	r8,r8[0x0]
800217f6:	f0 f8 0c 64 	ld.w	r8,r8[3172]
800217fa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800217fe:	30 ab       	mov	r11,10
80021800:	10 9c       	mov	r12,r8
80021802:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80021806:	ec f8 00 00 	ld.w	r8,r6[0]
8002180a:	70 08       	ld.w	r8,r8[0x0]
8002180c:	f0 f8 0c 68 	ld.w	r8,r8[3176]
80021810:	10 9c       	mov	r12,r8
80021812:	f0 16 00 03 	mcall	r6[12]
80021816:	30 08       	mov	r8,0
80021818:	e0 69 80 00 	mov	r9,32768
8002181c:	ea 19 40 66 	orh	r9,0x4066
80021820:	f0 16 00 02 	mcall	r6[8]
80021824:	14 98       	mov	r8,r10
80021826:	16 99       	mov	r9,r11
80021828:	10 9a       	mov	r10,r8
8002182a:	12 9b       	mov	r11,r9
8002182c:	e0 68 85 1f 	mov	r8,34079
80021830:	ea 18 51 eb 	orh	r8,0x51eb
80021834:	e0 69 1e b8 	mov	r9,7864
80021838:	ea 19 40 09 	orh	r9,0x4009
8002183c:	f0 16 00 0c 	mcall	r6[48]
80021840:	14 98       	mov	r8,r10
80021842:	16 99       	mov	r9,r11
80021844:	10 9a       	mov	r10,r8
80021846:	12 9b       	mov	r11,r9
80021848:	f0 16 00 14 	mcall	r6[80]
8002184c:	18 98       	mov	r8,r12
8002184e:	30 ab       	mov	r11,10
80021850:	10 9c       	mov	r12,r8
80021852:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80021856:	fe cc 00 be 	sub	r12,pc,190
8002185a:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
8002185e:	ec f8 00 00 	ld.w	r8,r6[0]
80021862:	70 09       	ld.w	r9,r8[0x0]
80021864:	30 18       	mov	r8,1
80021866:	f3 68 0f 77 	st.b	r9[3959],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
8002186a:	ec f8 00 00 	ld.w	r8,r6[0]
8002186e:	70 09       	ld.w	r9,r8[0x0]
80021870:	ec f8 00 00 	ld.w	r8,r6[0]
80021874:	70 08       	ld.w	r8,r8[0x0]
80021876:	f2 cb f0 f0 	sub	r11,r9,-3856
8002187a:	f0 ca f3 a4 	sub	r10,r8,-3164
8002187e:	f6 c8 00 00 	sub	r8,r11,0
80021882:	f4 c9 00 00 	sub	r9,r10,0
80021886:	72 0c       	ld.w	r12,r9[0x0]
80021888:	91 0c       	st.w	r8[0x0],r12
8002188a:	72 1c       	ld.w	r12,r9[0x4]
8002188c:	91 1c       	st.w	r8[0x4],r12
8002188e:	72 2c       	ld.w	r12,r9[0x8]
80021890:	91 2c       	st.w	r8[0x8],r12
80021892:	72 39       	ld.w	r9,r9[0xc]
80021894:	91 39       	st.w	r8[0xc],r9
80021896:	f6 c8 ff f0 	sub	r8,r11,-16
8002189a:	f4 c9 ff f0 	sub	r9,r10,-16
8002189e:	72 0c       	ld.w	r12,r9[0x0]
800218a0:	91 0c       	st.w	r8[0x0],r12
800218a2:	72 1c       	ld.w	r12,r9[0x4]
800218a4:	91 1c       	st.w	r8[0x4],r12
800218a6:	72 2c       	ld.w	r12,r9[0x8]
800218a8:	91 2c       	st.w	r8[0x8],r12
800218aa:	72 39       	ld.w	r9,r9[0xc]
800218ac:	91 39       	st.w	r8[0xc],r9
800218ae:	f6 c8 ff e0 	sub	r8,r11,-32
800218b2:	f4 c9 ff e0 	sub	r9,r10,-32
800218b6:	72 0a       	ld.w	r10,r9[0x0]
800218b8:	91 0a       	st.w	r8[0x0],r10
800218ba:	72 1a       	ld.w	r10,r9[0x4]
800218bc:	91 1a       	st.w	r8[0x4],r10
800218be:	72 2a       	ld.w	r10,r9[0x8]
800218c0:	91 2a       	st.w	r8[0x8],r10
800218c2:	72 39       	ld.w	r9,r9[0xc]
800218c4:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
800218c6:	ec f8 00 00 	ld.w	r8,r6[0]
800218ca:	70 09       	ld.w	r9,r8[0x0]
800218cc:	ee ca 00 0c 	sub	r10,r7,12
800218d0:	20 4d       	sub	sp,16
800218d2:	1a 98       	mov	r8,sp
800218d4:	20 08       	sub	r8,0
800218d6:	20 09       	sub	r9,0
800218d8:	72 0b       	ld.w	r11,r9[0x0]
800218da:	91 0b       	st.w	r8[0x0],r11
800218dc:	72 1b       	ld.w	r11,r9[0x4]
800218de:	91 1b       	st.w	r8[0x4],r11
800218e0:	72 2b       	ld.w	r11,r9[0x8]
800218e2:	91 2b       	st.w	r8[0x8],r11
800218e4:	72 39       	ld.w	r9,r9[0xc]
800218e6:	91 39       	st.w	r8[0xc],r9
800218e8:	14 9c       	mov	r12,r10
800218ea:	f0 16 00 68 	mcall	r6[416]
800218ee:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
800218f0:	ec f8 00 00 	ld.w	r8,r6[0]
800218f4:	70 08       	ld.w	r8,r8[0x0]
800218f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800218fa:	f1 49 0f 1c 	st.w	r8[3868],r9
	}
}
800218fe:	2f dd       	sub	sp,-12
80021900:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021904:	80 02       	ld.sh	r2,r0[0x0]
80021906:	16 2a       	rsub	r10,r11

80021908 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80021908:	eb cd 40 c0 	pushm	r6-r7,lr
8002190c:	1a 97       	mov	r7,sp
8002190e:	48 96       	lddpc	r6,80021930 <waypoint_hold_position_handler+0x28>
80021910:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80021912:	ec f8 00 00 	ld.w	r8,r6[0]
80021916:	70 08       	ld.w	r8,r8[0x0]
80021918:	f1 38 0f 74 	ld.ub	r8,r8[3956]
8002191c:	ec 18 00 01 	eorl	r8,0x1
80021920:	5c 58       	castu.b	r8
80021922:	c0 30       	breq	80021928 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80021924:	f0 16 00 87 	mcall	r6[540]
	}
	wp_hold_init();
80021928:	f0 16 00 ad 	mcall	r6[692]
}
8002192c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021930:	80 02       	ld.sh	r2,r0[0x0]
80021932:	17 94       	ld.ub	r4,r11[0x1]
80021934:	20 72       	sub	r2,7
80021936:	65 61       	ld.w	r1,r2[0x58]
80021938:	63 68       	ld.w	r8,r1[0x58]
8002193a:	65 64       	ld.w	r4,r2[0x58]
8002193c:	2c 20       	sub	r0,-62
8002193e:	64 69       	ld.w	r9,r2[0x18]
80021940:	73 74       	ld.w	r4,r9[0x5c]
80021942:	61 6e       	ld.w	lr,r0[0x58]
80021944:	63 65       	ld.w	r5,r1[0x58]
80021946:	3a 00       	mov	r0,-96
80021948:	20 6c       	sub	r12,6
8002194a:	65 73       	ld.w	r3,r2[0x5c]
8002194c:	73 20       	ld.w	r0,r9[0x48]
8002194e:	74 68       	ld.w	r8,r10[0x18]
80021950:	61 6e       	ld.w	lr,r0[0x58]
80021952:	20 3a       	sub	r10,3
80021954:	00 00       	add	r0,r0
80021956:	00 00       	add	r0,r0
80021958:	2e 0a       	sub	r10,-32
8002195a:	00 00       	add	r0,r0
8002195c:	41 75       	lddsp	r5,sp[0x5c]
8002195e:	74 6f       	ld.w	pc,r10[0x18]
80021960:	63 6f       	ld.w	pc,r1[0x58]
80021962:	6e 74       	ld.w	r4,r7[0x1c]
80021964:	69 6e       	ld.w	lr,r4[0x58]
80021966:	75 65       	ld.w	r5,r10[0x58]
80021968:	20 74       	sub	r4,7
8002196a:	6f 77       	ld.w	r7,r7[0x5c]
8002196c:	61 72       	ld.w	r2,r0[0x5c]
8002196e:	64 73       	ld.w	r3,r2[0x1c]
80021970:	20 77       	sub	r7,7
80021972:	61 79       	ld.w	r9,r0[0x5c]
80021974:	70 6f       	ld.w	pc,r8[0x18]
80021976:	69 6e       	ld.w	lr,r4[0x58]
80021978:	74 20       	ld.w	r0,r10[0x8]
8002197a:	4e 72       	lddpc	r2,80021b14 <waypoint_navigation_handler+0x18e>
8002197c:	00 00       	add	r0,r0
8002197e:	00 00       	add	r0,r0
80021980:	53 74       	stdsp	sp[0xdc],r4
80021982:	6f 70       	ld.w	r0,r7[0x5c]
80021984:	0a 00       	add	r0,r5

80021986 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80021986:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002198a:	1a 97       	mov	r7,sp
8002198c:	21 0d       	sub	sp,64
8002198e:	fe f6 03 ba 	ld.w	r6,pc[954]
80021992:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80021994:	ec f8 00 00 	ld.w	r8,r6[0]
80021998:	70 08       	ld.w	r8,r8[0x0]
8002199a:	f1 38 0f 74 	ld.ub	r8,r8[3956]
8002199e:	58 08       	cp.w	r8,0
800219a0:	e0 80 01 cd 	breq	80021d3a <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
800219a4:	30 08       	mov	r8,0
800219a6:	ef 68 ff ff 	st.b	r7[-1],r8
800219aa:	c2 18       	rjmp	800219ec <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
800219ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800219b0:	ec f9 00 00 	ld.w	r9,r6[0]
800219b4:	72 09       	ld.w	r9,r9[0x0]
800219b6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800219ba:	f4 ca fc 48 	sub	r10,r10,-952
800219be:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800219c2:	ec f9 00 00 	ld.w	r9,r6[0]
800219c6:	72 09       	ld.w	r9,r9[0x0]
800219c8:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800219cc:	f6 cb fc e9 	sub	r11,r11,-791
800219d0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
800219d4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800219d8:	a3 68       	lsl	r8,0x2
800219da:	ee 08 00 08 	add	r8,r7,r8
800219de:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
800219e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800219e6:	2f f8       	sub	r8,-1
800219e8:	ef 68 ff ff 	st.b	r7[-1],r8
800219ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800219f0:	30 28       	mov	r8,2
800219f2:	f0 09 18 00 	cp.b	r9,r8
800219f6:	fe 98 ff db 	brls	800219ac <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
800219fa:	ec f8 00 00 	ld.w	r8,r6[0]
800219fe:	70 05       	ld.w	r5,r8[0x0]
80021a00:	ee c8 00 10 	sub	r8,r7,16
80021a04:	10 9c       	mov	r12,r8
80021a06:	fe b0 f0 91 	rcall	8001fb28 <vector_norm_sqr>
80021a0a:	18 98       	mov	r8,r12
80021a0c:	eb 48 0f 70 	st.w	r5[3952],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80021a10:	ec f8 00 00 	ld.w	r8,r6[0]
80021a14:	70 08       	ld.w	r8,r8[0x0]
80021a16:	f0 fa 0f 70 	ld.w	r10,r8[3952]
80021a1a:	ec f8 00 00 	ld.w	r8,r6[0]
80021a1e:	70 08       	ld.w	r8,r8[0x0]
80021a20:	f0 f9 0e b8 	ld.w	r9,r8[3768]
80021a24:	ec f8 00 00 	ld.w	r8,r6[0]
80021a28:	70 08       	ld.w	r8,r8[0x0]
80021a2a:	f0 f8 0e b8 	ld.w	r8,r8[3768]
80021a2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021a32:	30 18       	mov	r8,1
80021a34:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021a38:	e0 8c 00 03 	brvs	80021a3e <waypoint_navigation_handler+0xb8>
80021a3c:	c0 25       	brlt	80021a40 <waypoint_navigation_handler+0xba>
80021a3e:	30 08       	mov	r8,0
80021a40:	5c 58       	castu.b	r8
80021a42:	e0 80 01 80 	breq	80021d42 <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80021a46:	fe cc 1d a6 	sub	r12,pc,7590
80021a4a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
80021a4e:	ec f8 00 00 	ld.w	r8,r6[0]
80021a52:	70 08       	ld.w	r8,r8[0x0]
80021a54:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021a58:	5c 68       	casts.b	r8
80021a5a:	30 ab       	mov	r11,10
80021a5c:	10 9c       	mov	r12,r8
80021a5e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
80021a62:	fe cc 01 2e 	sub	r12,pc,302
80021a66:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
80021a6a:	ec f8 00 00 	ld.w	r8,r6[0]
80021a6e:	70 08       	ld.w	r8,r8[0x0]
80021a70:	f0 f8 0f 70 	ld.w	r8,r8[3952]
80021a74:	10 9c       	mov	r12,r8
80021a76:	f0 16 00 03 	mcall	r6[12]
80021a7a:	14 98       	mov	r8,r10
80021a7c:	16 99       	mov	r9,r11
80021a7e:	10 9a       	mov	r10,r8
80021a80:	12 9b       	mov	r11,r9
80021a82:	f0 16 00 66 	mcall	r6[408]
80021a86:	14 98       	mov	r8,r10
80021a88:	16 99       	mov	r9,r11
80021a8a:	10 9a       	mov	r10,r8
80021a8c:	12 9b       	mov	r11,r9
80021a8e:	f0 16 00 14 	mcall	r6[80]
80021a92:	18 98       	mov	r8,r12
80021a94:	30 ab       	mov	r11,10
80021a96:	10 9c       	mov	r12,r8
80021a98:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
80021a9c:	fe cc 01 54 	sub	r12,pc,340
80021aa0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80021aa4:	ec f8 00 00 	ld.w	r8,r6[0]
80021aa8:	70 08       	ld.w	r8,r8[0x0]
80021aaa:	f0 f8 0e b8 	ld.w	r8,r8[3768]
80021aae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021ab2:	30 ab       	mov	r11,10
80021ab4:	10 9c       	mov	r12,r8
80021ab6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
80021aba:	fe cc 01 62 	sub	r12,pc,354
80021abe:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021ac2:	ec f8 00 00 	ld.w	r8,r6[0]
80021ac6:	70 08       	ld.w	r8,r8[0x0]
80021ac8:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021acc:	5c 68       	casts.b	r8
80021ace:	5c 88       	casts.h	r8
80021ad0:	5c 78       	castu.h	r8
80021ad2:	10 9b       	mov	r11,r8
80021ad4:	30 0c       	mov	r12,0
80021ad6:	fe b0 ef 5b 	rcall	8001f98c <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
80021ada:	ec f8 00 00 	ld.w	r8,r6[0]
80021ade:	70 0a       	ld.w	r10,r8[0x0]
80021ae0:	ec f8 00 00 	ld.w	r8,r6[0]
80021ae4:	70 08       	ld.w	r8,r8[0x0]
80021ae6:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021aea:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021aee:	12 98       	mov	r8,r9
80021af0:	a1 78       	lsl	r8,0x1
80021af2:	12 08       	add	r8,r9
80021af4:	a5 68       	lsl	r8,0x4
80021af6:	f4 08 00 08 	add	r8,r10,r8
80021afa:	f0 c9 f3 30 	sub	r9,r8,-3280
80021afe:	30 08       	mov	r8,0
80021b00:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80021b02:	ec f8 00 00 	ld.w	r8,r6[0]
80021b06:	70 08       	ld.w	r8,r8[0x0]
80021b08:	f1 39 0e b1 	ld.ub	r9,r8[3761]
80021b0c:	30 18       	mov	r8,1
80021b0e:	f0 09 18 00 	cp.b	r9,r8
80021b12:	e0 81 01 07 	brne	80021d20 <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80021b16:	fe cc 01 ba 	sub	r12,pc,442
80021b1a:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80021b1e:	ec f8 00 00 	ld.w	r8,r6[0]
80021b22:	70 08       	ld.w	r8,r8[0x0]
80021b24:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021b28:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021b2c:	ec f8 00 00 	ld.w	r8,r6[0]
80021b30:	70 08       	ld.w	r8,r8[0x0]
80021b32:	f1 08 0e dc 	ld.sh	r8,r8[3804]
80021b36:	5c 78       	castu.h	r8
80021b38:	20 18       	sub	r8,1
80021b3a:	10 39       	cp.w	r9,r8
80021b3c:	c0 81       	brne	80021b4c <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
80021b3e:	ec f8 00 00 	ld.w	r8,r6[0]
80021b42:	70 09       	ld.w	r9,r8[0x0]
80021b44:	30 08       	mov	r8,0
80021b46:	f3 68 0e de 	st.b	r9[3806],r8
80021b4a:	c0 a8       	rjmp	80021b5e <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
80021b4c:	ec f8 00 00 	ld.w	r8,r6[0]
80021b50:	70 08       	ld.w	r8,r8[0x0]
80021b52:	f1 39 0e de 	ld.ub	r9,r8[3806]
80021b56:	2f f9       	sub	r9,-1
80021b58:	5c 59       	castu.b	r9
80021b5a:	f1 69 0e de 	st.b	r8[3806],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
80021b5e:	ec f8 00 00 	ld.w	r8,r6[0]
80021b62:	70 08       	ld.w	r8,r8[0x0]
80021b64:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021b68:	5c 68       	casts.b	r8
80021b6a:	30 ab       	mov	r11,10
80021b6c:	10 9c       	mov	r12,r8
80021b6e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80021b72:	fe cc 1b 9a 	sub	r12,pc,7066
80021b76:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
80021b7a:	ec f8 00 00 	ld.w	r8,r6[0]
80021b7e:	70 0a       	ld.w	r10,r8[0x0]
80021b80:	ec f8 00 00 	ld.w	r8,r6[0]
80021b84:	70 08       	ld.w	r8,r8[0x0]
80021b86:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021b8a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021b8e:	12 98       	mov	r8,r9
80021b90:	a1 78       	lsl	r8,0x1
80021b92:	12 08       	add	r8,r9
80021b94:	a5 68       	lsl	r8,0x4
80021b96:	f4 08 00 08 	add	r8,r10,r8
80021b9a:	f0 c9 f3 30 	sub	r9,r8,-3280
80021b9e:	30 18       	mov	r8,1
80021ba0:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80021ba2:	ec f8 00 00 	ld.w	r8,r6[0]
80021ba6:	70 0a       	ld.w	r10,r8[0x0]
80021ba8:	ec f8 00 00 	ld.w	r8,r6[0]
80021bac:	70 0b       	ld.w	r11,r8[0x0]
80021bae:	ec f8 00 00 	ld.w	r8,r6[0]
80021bb2:	70 08       	ld.w	r8,r8[0x0]
80021bb4:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021bb8:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021bbc:	12 98       	mov	r8,r9
80021bbe:	a1 78       	lsl	r8,0x1
80021bc0:	12 08       	add	r8,r9
80021bc2:	a5 68       	lsl	r8,0x4
80021bc4:	f6 08 00 08 	add	r8,r11,r8
80021bc8:	f0 c8 f3 34 	sub	r8,r8,-3276
80021bcc:	f4 cb f1 54 	sub	r11,r10,-3756
80021bd0:	10 9a       	mov	r10,r8
80021bd2:	f6 c8 00 00 	sub	r8,r11,0
80021bd6:	f4 c9 00 00 	sub	r9,r10,0
80021bda:	72 0c       	ld.w	r12,r9[0x0]
80021bdc:	91 0c       	st.w	r8[0x0],r12
80021bde:	72 1c       	ld.w	r12,r9[0x4]
80021be0:	91 1c       	st.w	r8[0x4],r12
80021be2:	72 2c       	ld.w	r12,r9[0x8]
80021be4:	91 2c       	st.w	r8[0x8],r12
80021be6:	72 39       	ld.w	r9,r9[0xc]
80021be8:	91 39       	st.w	r8[0xc],r9
80021bea:	f6 c8 ff f0 	sub	r8,r11,-16
80021bee:	f4 c9 ff f0 	sub	r9,r10,-16
80021bf2:	72 0c       	ld.w	r12,r9[0x0]
80021bf4:	91 0c       	st.w	r8[0x0],r12
80021bf6:	72 1c       	ld.w	r12,r9[0x4]
80021bf8:	91 1c       	st.w	r8[0x4],r12
80021bfa:	72 2c       	ld.w	r12,r9[0x8]
80021bfc:	91 2c       	st.w	r8[0x8],r12
80021bfe:	72 39       	ld.w	r9,r9[0xc]
80021c00:	91 39       	st.w	r8[0xc],r9
80021c02:	f6 c8 ff e0 	sub	r8,r11,-32
80021c06:	f4 c9 ff e0 	sub	r9,r10,-32
80021c0a:	72 0a       	ld.w	r10,r9[0x0]
80021c0c:	91 0a       	st.w	r8[0x0],r10
80021c0e:	72 1a       	ld.w	r10,r9[0x4]
80021c10:	91 1a       	st.w	r8[0x4],r10
80021c12:	72 2a       	ld.w	r10,r9[0x8]
80021c14:	91 2a       	st.w	r8[0x8],r10
80021c16:	72 39       	ld.w	r9,r9[0xc]
80021c18:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80021c1a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c1e:	70 05       	ld.w	r5,r8[0x0]
80021c20:	ec f8 00 00 	ld.w	r8,r6[0]
80021c24:	70 08       	ld.w	r8,r8[0x0]
80021c26:	ec f9 00 00 	ld.w	r9,r6[0]
80021c2a:	72 0e       	ld.w	lr,r9[0x0]
80021c2c:	ee cc 00 40 	sub	r12,r7,64
80021c30:	20 7d       	sub	sp,28
80021c32:	1a 99       	mov	r9,sp
80021c34:	12 9a       	mov	r10,r9
80021c36:	f0 cb f3 94 	sub	r11,r8,-3180
80021c3a:	f4 c8 00 00 	sub	r8,r10,0
80021c3e:	f6 c9 00 00 	sub	r9,r11,0
80021c42:	72 03       	ld.w	r3,r9[0x0]
80021c44:	91 03       	st.w	r8[0x0],r3
80021c46:	72 13       	ld.w	r3,r9[0x4]
80021c48:	91 13       	st.w	r8[0x4],r3
80021c4a:	72 23       	ld.w	r3,r9[0x8]
80021c4c:	91 23       	st.w	r8[0x8],r3
80021c4e:	72 39       	ld.w	r9,r9[0xc]
80021c50:	91 39       	st.w	r8[0xc],r9
80021c52:	f6 e8 00 10 	ld.d	r8,r11[16]
80021c56:	f4 e9 00 10 	st.d	r10[16],r8
80021c5a:	76 68       	ld.w	r8,r11[0x18]
80021c5c:	95 68       	st.w	r10[0x18],r8
80021c5e:	20 cd       	sub	sp,48
80021c60:	1a 98       	mov	r8,sp
80021c62:	10 9b       	mov	r11,r8
80021c64:	fc ca f1 54 	sub	r10,lr,-3756
80021c68:	f6 c8 00 00 	sub	r8,r11,0
80021c6c:	f4 c9 00 00 	sub	r9,r10,0
80021c70:	72 0e       	ld.w	lr,r9[0x0]
80021c72:	91 0e       	st.w	r8[0x0],lr
80021c74:	72 1e       	ld.w	lr,r9[0x4]
80021c76:	91 1e       	st.w	r8[0x4],lr
80021c78:	72 2e       	ld.w	lr,r9[0x8]
80021c7a:	91 2e       	st.w	r8[0x8],lr
80021c7c:	72 39       	ld.w	r9,r9[0xc]
80021c7e:	91 39       	st.w	r8[0xc],r9
80021c80:	f6 c8 ff f0 	sub	r8,r11,-16
80021c84:	f4 c9 ff f0 	sub	r9,r10,-16
80021c88:	72 0e       	ld.w	lr,r9[0x0]
80021c8a:	91 0e       	st.w	r8[0x0],lr
80021c8c:	72 1e       	ld.w	lr,r9[0x4]
80021c8e:	91 1e       	st.w	r8[0x4],lr
80021c90:	72 2e       	ld.w	lr,r9[0x8]
80021c92:	91 2e       	st.w	r8[0x8],lr
80021c94:	72 39       	ld.w	r9,r9[0xc]
80021c96:	91 39       	st.w	r8[0xc],r9
80021c98:	f6 c8 ff e0 	sub	r8,r11,-32
80021c9c:	f4 c9 ff e0 	sub	r9,r10,-32
80021ca0:	72 0a       	ld.w	r10,r9[0x0]
80021ca2:	91 0a       	st.w	r8[0x0],r10
80021ca4:	72 1a       	ld.w	r10,r9[0x4]
80021ca6:	91 1a       	st.w	r8[0x4],r10
80021ca8:	72 2a       	ld.w	r10,r9[0x8]
80021caa:	91 2a       	st.w	r8[0x8],r10
80021cac:	72 39       	ld.w	r9,r9[0xc]
80021cae:	91 39       	st.w	r8[0xc],r9
80021cb0:	f0 16 00 f9 	mcall	r6[996]
80021cb4:	2e dd       	sub	sp,-76
80021cb6:	ea cb f1 20 	sub	r11,r5,-3808
80021cba:	ee ca 00 40 	sub	r10,r7,64
80021cbe:	f6 c8 00 00 	sub	r8,r11,0
80021cc2:	f4 c9 00 00 	sub	r9,r10,0
80021cc6:	72 0c       	ld.w	r12,r9[0x0]
80021cc8:	91 0c       	st.w	r8[0x0],r12
80021cca:	72 1c       	ld.w	r12,r9[0x4]
80021ccc:	91 1c       	st.w	r8[0x4],r12
80021cce:	72 2c       	ld.w	r12,r9[0x8]
80021cd0:	91 2c       	st.w	r8[0x8],r12
80021cd2:	72 39       	ld.w	r9,r9[0xc]
80021cd4:	91 39       	st.w	r8[0xc],r9
80021cd6:	f6 c8 ff f0 	sub	r8,r11,-16
80021cda:	f4 c9 ff f0 	sub	r9,r10,-16
80021cde:	72 0c       	ld.w	r12,r9[0x0]
80021ce0:	91 0c       	st.w	r8[0x0],r12
80021ce2:	72 1c       	ld.w	r12,r9[0x4]
80021ce4:	91 1c       	st.w	r8[0x4],r12
80021ce6:	72 2c       	ld.w	r12,r9[0x8]
80021ce8:	91 2c       	st.w	r8[0x8],r12
80021cea:	72 39       	ld.w	r9,r9[0xc]
80021cec:	91 39       	st.w	r8[0xc],r9
80021cee:	f6 c8 ff e0 	sub	r8,r11,-32
80021cf2:	f4 c9 ff e0 	sub	r9,r10,-32
80021cf6:	72 0a       	ld.w	r10,r9[0x0]
80021cf8:	91 0a       	st.w	r8[0x0],r10
80021cfa:	72 1a       	ld.w	r10,r9[0x4]
80021cfc:	91 1a       	st.w	r8[0x4],r10
80021cfe:	72 2a       	ld.w	r10,r9[0x8]
80021d00:	91 2a       	st.w	r8[0x8],r10
80021d02:	72 39       	ld.w	r9,r9[0xc]
80021d04:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021d06:	ec f8 00 00 	ld.w	r8,r6[0]
80021d0a:	70 08       	ld.w	r8,r8[0x0]
80021d0c:	f1 38 0e de 	ld.ub	r8,r8[3806]
80021d10:	5c 68       	casts.b	r8
80021d12:	5c 88       	casts.h	r8
80021d14:	5c 78       	castu.h	r8
80021d16:	10 9b       	mov	r11,r8
80021d18:	30 0c       	mov	r12,0
80021d1a:	fe b0 ed 19 	rcall	8001f74c <mavlink_msg_mission_current_send>
80021d1e:	c1 28       	rjmp	80021d42 <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80021d20:	ec f8 00 00 	ld.w	r8,r6[0]
80021d24:	70 09       	ld.w	r9,r8[0x0]
80021d26:	30 08       	mov	r8,0
80021d28:	f3 68 0f 74 	st.b	r9[3956],r8
				dbg_print("Stop\n");
80021d2c:	fe cc 03 ac 	sub	r12,pc,940
80021d30:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80021d34:	f0 16 00 ad 	mcall	r6[692]
80021d38:	c0 58       	rjmp	80021d42 <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80021d3a:	f0 16 00 87 	mcall	r6[540]
		wp_hold_init();
80021d3e:	f0 16 00 ad 	mcall	r6[692]
	}
}
80021d42:	2f 0d       	sub	sp,-64
80021d44:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021d48:	80 02       	ld.sh	r2,r0[0x0]
80021d4a:	18 16       	sub	r6,r12
80021d4c:	43 72       	lddsp	r2,sp[0xdc]
80021d4e:	69 74       	ld.w	r4,r4[0x5c]
80021d50:	69 63       	ld.w	r3,r4[0x58]
80021d52:	61 6c       	ld.w	r12,r0[0x58]
80021d54:	20 53       	sub	r3,5
80021d56:	74 61       	ld.w	r1,r10[0x18]
80021d58:	74 65       	ld.w	r5,r10[0x18]
80021d5a:	21 20       	sub	r0,18
80021d5c:	43 6c       	lddsp	r12,sp[0xd8]
80021d5e:	69 6d       	ld.w	sp,r4[0x58]
80021d60:	62 69       	ld.w	r9,r1[0x18]
80021d62:	6e 67       	ld.w	r7,r7[0x18]
80021d64:	20 74       	sub	r4,7
80021d66:	6f 20       	ld.w	r0,r7[0x48]
80021d68:	73 61       	ld.w	r1,r9[0x58]
80021d6a:	66 65       	ld.w	r5,r3[0x18]
80021d6c:	20 61       	sub	r1,6
80021d6e:	6c 74       	ld.w	r4,r6[0x1c]
80021d70:	69 74       	ld.w	r4,r4[0x5c]
80021d72:	75 64       	ld.w	r4,r10[0x58]
80021d74:	65 2e       	ld.w	lr,r2[0x48]
80021d76:	0a 00       	add	r0,r5
80021d78:	43 72       	lddsp	r2,sp[0xdc]
80021d7a:	69 74       	ld.w	r4,r4[0x5c]
80021d7c:	69 63       	ld.w	r3,r4[0x58]
80021d7e:	61 6c       	ld.w	r12,r0[0x58]
80021d80:	20 53       	sub	r3,5
80021d82:	74 61       	ld.w	r1,r10[0x18]
80021d84:	74 65       	ld.w	r5,r10[0x18]
80021d86:	21 20       	sub	r0,18
80021d88:	46 6c       	lddsp	r12,sp[0x198]
80021d8a:	79 69       	ld.w	r9,r12[0x58]
80021d8c:	6e 67       	ld.w	r7,r7[0x18]
80021d8e:	20 74       	sub	r4,7
80021d90:	6f 20       	ld.w	r0,r7[0x48]
80021d92:	68 6f       	ld.w	pc,r4[0x18]
80021d94:	6d 65       	ld.w	r5,r6[0x58]
80021d96:	20 77       	sub	r7,7
80021d98:	61 79       	ld.w	r9,r0[0x5c]
80021d9a:	70 6f       	ld.w	pc,r8[0x18]
80021d9c:	69 6e       	ld.w	lr,r4[0x58]
80021d9e:	74 2e       	ld.w	lr,r10[0x8]
80021da0:	0a 00       	add	r0,r5
80021da2:	00 00       	add	r0,r0
80021da4:	43 72       	lddsp	r2,sp[0xdc]
80021da6:	69 74       	ld.w	r4,r4[0x5c]
80021da8:	69 63       	ld.w	r3,r4[0x58]
80021daa:	61 6c       	ld.w	r12,r0[0x58]
80021dac:	20 53       	sub	r3,5
80021dae:	74 61       	ld.w	r1,r10[0x18]
80021db0:	74 65       	ld.w	r5,r10[0x18]
80021db2:	21 20       	sub	r0,18
80021db4:	50 65       	stdsp	sp[0x18],r5
80021db6:	72 66       	ld.w	r6,r9[0x18]
80021db8:	6f 72       	ld.w	r2,r7[0x5c]
80021dba:	6d 69       	ld.w	r9,r6[0x58]
80021dbc:	6e 67       	ld.w	r7,r7[0x18]
80021dbe:	20 63       	sub	r3,6
80021dc0:	72 69       	ld.w	r9,r9[0x18]
80021dc2:	74 69       	ld.w	r9,r10[0x18]
80021dc4:	63 61       	ld.w	r1,r1[0x58]
80021dc6:	6c 20       	ld.w	r0,r6[0x8]
80021dc8:	6c 61       	ld.w	r1,r6[0x18]
80021dca:	6e 64       	ld.w	r4,r7[0x18]
80021dcc:	69 6e       	ld.w	lr,r4[0x58]
80021dce:	67 2e       	ld.w	lr,r3[0x48]
80021dd0:	0a 00       	add	r0,r5
80021dd2:	00 00       	add	r0,r0
80021dd4:	43 72       	lddsp	r2,sp[0xdc]
80021dd6:	69 74       	ld.w	r4,r4[0x5c]
80021dd8:	69 63       	ld.w	r3,r4[0x58]
80021dda:	61 6c       	ld.w	r12,r0[0x58]
80021ddc:	20 53       	sub	r3,5
80021dde:	74 61       	ld.w	r1,r10[0x18]
80021de0:	74 65       	ld.w	r5,r10[0x18]
80021de2:	21 20       	sub	r0,18
80021de4:	4c 61       	lddpc	r1,80021efc <waypoint_critical_handler+0xe8>
80021de6:	6e 64       	ld.w	r4,r7[0x18]
80021de8:	65 64       	ld.w	r4,r2[0x58]
80021dea:	2c 20       	sub	r0,-62
80021dec:	73 77       	ld.w	r7,r9[0x5c]
80021dee:	69 74       	ld.w	r4,r4[0x5c]
80021df0:	63 68       	ld.w	r8,r1[0x58]
80021df2:	69 6e       	ld.w	lr,r4[0x58]
80021df4:	67 20       	ld.w	r0,r3[0x48]
80021df6:	6f 66       	ld.w	r6,r7[0x58]
80021df8:	66 20       	ld.w	r0,r3[0x8]
80021dfa:	6d 6f       	ld.w	pc,r6[0x58]
80021dfc:	74 6f       	ld.w	pc,r10[0x18]
80021dfe:	72 73       	ld.w	r3,r9[0x1c]
80021e00:	2c 20       	sub	r0,-62
80021e02:	45 6d       	lddsp	sp,sp[0x158]
80021e04:	65 72       	ld.w	r2,r2[0x5c]
80021e06:	67 65       	ld.w	r5,r3[0x58]
80021e08:	6e 63       	ld.w	r3,r7[0x18]
80021e0a:	79 20       	ld.w	r0,r12[0x48]
80021e0c:	6d 6f       	ld.w	pc,r6[0x58]
80021e0e:	64 65       	ld.w	r5,r2[0x18]
80021e10:	2e 0a       	sub	r10,-32
	...

80021e14 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80021e14:	eb cd 40 e0 	pushm	r5-r7,lr
80021e18:	1a 97       	mov	r7,sp
80021e1a:	20 7d       	sub	sp,28
80021e1c:	fe f6 02 20 	ld.w	r6,pc[544]
80021e20:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80021e22:	ec f8 00 00 	ld.w	r8,r6[0]
80021e26:	70 08       	ld.w	r8,r8[0x0]
80021e28:	f1 38 0f 79 	ld.ub	r8,r8[3961]
80021e2c:	ec 18 00 01 	eorl	r8,0x1
80021e30:	5c 58       	castu.b	r8
80021e32:	c1 10       	breq	80021e54 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80021e34:	ec f8 00 00 	ld.w	r8,r6[0]
80021e38:	70 09       	ld.w	r9,r8[0x0]
80021e3a:	30 18       	mov	r8,1
80021e3c:	f3 68 0f 79 	st.b	r9[3961],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
80021e40:	fe cc 00 f4 	sub	r12,pc,244
80021e44:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80021e48:	ec f8 00 00 	ld.w	r8,r6[0]
80021e4c:	70 08       	ld.w	r8,r8[0x0]
80021e4e:	30 19       	mov	r9,1
80021e50:	f1 49 11 a4 	st.w	r8[4516],r9
	}
	
	if (!(centralData->critical_next_state))
80021e54:	ec f8 00 00 	ld.w	r8,r6[0]
80021e58:	70 08       	ld.w	r8,r8[0x0]
80021e5a:	f1 38 0f 7a 	ld.ub	r8,r8[3962]
80021e5e:	ec 18 00 01 	eorl	r8,0x1
80021e62:	5c 58       	castu.b	r8
80021e64:	e0 80 00 a7 	breq	80021fb2 <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80021e68:	ec f8 00 00 	ld.w	r8,r6[0]
80021e6c:	70 09       	ld.w	r9,r8[0x0]
80021e6e:	30 18       	mov	r8,1
80021e70:	f3 68 0f 7a 	st.b	r9[3962],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021e74:	ec f8 00 00 	ld.w	r8,r6[0]
80021e78:	70 09       	ld.w	r9,r8[0x0]
80021e7a:	ee ca 00 10 	sub	r10,r7,16
80021e7e:	20 4d       	sub	sp,16
80021e80:	1a 98       	mov	r8,sp
80021e82:	20 08       	sub	r8,0
80021e84:	20 09       	sub	r9,0
80021e86:	72 0b       	ld.w	r11,r9[0x0]
80021e88:	91 0b       	st.w	r8[0x0],r11
80021e8a:	72 1b       	ld.w	r11,r9[0x4]
80021e8c:	91 1b       	st.w	r8[0x4],r11
80021e8e:	72 2b       	ld.w	r11,r9[0x8]
80021e90:	91 2b       	st.w	r8[0x8],r11
80021e92:	72 39       	ld.w	r9,r9[0xc]
80021e94:	91 39       	st.w	r8[0xc],r9
80021e96:	14 9c       	mov	r12,r10
80021e98:	f0 16 00 68 	mcall	r6[416]
80021e9c:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
80021e9e:	ec f8 00 00 	ld.w	r8,r6[0]
80021ea2:	70 08       	ld.w	r8,r8[0x0]
80021ea4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ea8:	f1 49 0f 4c 	st.w	r8[3916],r9
		
		switch (centralData->critical_behavior)
80021eac:	ec f8 00 00 	ld.w	r8,r6[0]
80021eb0:	70 08       	ld.w	r8,r8[0x0]
80021eb2:	f0 f8 11 a4 	ld.w	r8,r8[4516]
80021eb6:	58 28       	cp.w	r8,2
80021eb8:	c2 10       	breq	80021efa <waypoint_critical_handler+0xe6>
80021eba:	58 38       	cp.w	r8,3
80021ebc:	c3 30       	breq	80021f22 <waypoint_critical_handler+0x10e>
80021ebe:	58 18       	cp.w	r8,1
80021ec0:	c4 31       	brne	80021f46 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
80021ec2:	ec f8 00 00 	ld.w	r8,r6[0]
80021ec6:	70 08       	ld.w	r8,r8[0x0]
80021ec8:	ec f9 00 00 	ld.w	r9,r6[0]
80021ecc:	72 09       	ld.w	r9,r9[0x0]
80021ece:	f2 f9 0c 5c 	ld.w	r9,r9[3164]
80021ed2:	f1 49 0f 40 	st.w	r8[3904],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
80021ed6:	ec f8 00 00 	ld.w	r8,r6[0]
80021eda:	70 08       	ld.w	r8,r8[0x0]
80021edc:	ec f9 00 00 	ld.w	r9,r6[0]
80021ee0:	72 09       	ld.w	r9,r9[0x0]
80021ee2:	f2 f9 0c 60 	ld.w	r9,r9[3168]
80021ee6:	f1 49 0f 44 	st.w	r8[3908],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021eea:	ec f8 00 00 	ld.w	r8,r6[0]
80021eee:	70 08       	ld.w	r8,r8[0x0]
80021ef0:	fc 19 c1 f0 	movh	r9,0xc1f0
80021ef4:	f1 49 0f 48 	st.w	r8[3912],r9
			
			break;
80021ef8:	c2 78       	rjmp	80021f46 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021efa:	ec f8 00 00 	ld.w	r8,r6[0]
80021efe:	70 08       	ld.w	r8,r8[0x0]
80021f00:	30 09       	mov	r9,0
80021f02:	f1 49 0f 40 	st.w	r8[3904],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021f06:	ec f8 00 00 	ld.w	r8,r6[0]
80021f0a:	70 08       	ld.w	r8,r8[0x0]
80021f0c:	30 09       	mov	r9,0
80021f0e:	f1 49 0f 44 	st.w	r8[3908],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021f12:	ec f8 00 00 	ld.w	r8,r6[0]
80021f16:	70 08       	ld.w	r8,r8[0x0]
80021f18:	fc 19 c1 f0 	movh	r9,0xc1f0
80021f1c:	f1 49 0f 48 	st.w	r8[3912],r9
			break;
80021f20:	c1 38       	rjmp	80021f46 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021f22:	ec f8 00 00 	ld.w	r8,r6[0]
80021f26:	70 08       	ld.w	r8,r8[0x0]
80021f28:	30 09       	mov	r9,0
80021f2a:	f1 49 0f 40 	st.w	r8[3904],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021f2e:	ec f8 00 00 	ld.w	r8,r6[0]
80021f32:	70 08       	ld.w	r8,r8[0x0]
80021f34:	30 09       	mov	r9,0
80021f36:	f1 49 0f 44 	st.w	r8[3908],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
80021f3a:	ec f8 00 00 	ld.w	r8,r6[0]
80021f3e:	70 08       	ld.w	r8,r8[0x0]
80021f40:	30 09       	mov	r9,0
80021f42:	f1 49 0f 48 	st.w	r8[3912],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021f46:	30 08       	mov	r8,0
80021f48:	ef 68 ff ff 	st.b	r7[-1],r8
80021f4c:	c2 18       	rjmp	80021f8e <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
80021f4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021f52:	ec f9 00 00 	ld.w	r9,r6[0]
80021f56:	72 09       	ld.w	r9,r9[0x0]
80021f58:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021f5c:	f4 ca fc 30 	sub	r10,r10,-976
80021f60:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021f64:	ec f9 00 00 	ld.w	r9,r6[0]
80021f68:	72 09       	ld.w	r9,r9[0x0]
80021f6a:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021f6e:	f6 cb fc e9 	sub	r11,r11,-791
80021f72:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021f76:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021f7a:	a3 68       	lsl	r8,0x2
80021f7c:	ee 08 00 08 	add	r8,r7,r8
80021f80:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021f84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021f88:	2f f8       	sub	r8,-1
80021f8a:	ef 68 ff ff 	st.b	r7[-1],r8
80021f8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021f92:	30 28       	mov	r8,2
80021f94:	f0 09 18 00 	cp.b	r9,r8
80021f98:	fe 98 ff db 	brls	80021f4e <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021f9c:	ec f8 00 00 	ld.w	r8,r6[0]
80021fa0:	70 05       	ld.w	r5,r8[0x0]
80021fa2:	ee c8 00 1c 	sub	r8,r7,28
80021fa6:	10 9c       	mov	r12,r8
80021fa8:	fe b0 ed c0 	rcall	8001fb28 <vector_norm_sqr>
80021fac:	18 98       	mov	r8,r12
80021fae:	eb 48 0f 70 	st.w	r5[3952],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
80021fb2:	ec f8 00 00 	ld.w	r8,r6[0]
80021fb6:	70 08       	ld.w	r8,r8[0x0]
80021fb8:	f0 fa 0f 70 	ld.w	r10,r8[3952]
80021fbc:	30 18       	mov	r8,1
80021fbe:	fc 19 40 40 	movh	r9,0x4040
80021fc2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021fc6:	e0 8c 00 03 	brvs	80021fcc <waypoint_critical_handler+0x1b8>
80021fca:	c0 25       	brlt	80021fce <waypoint_critical_handler+0x1ba>
80021fcc:	30 08       	mov	r8,0
80021fce:	5c 58       	castu.b	r8
80021fd0:	c3 20       	breq	80022034 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
80021fd2:	ec f8 00 00 	ld.w	r8,r6[0]
80021fd6:	70 09       	ld.w	r9,r8[0x0]
80021fd8:	30 08       	mov	r8,0
80021fda:	f3 68 0f 7a 	st.b	r9[3962],r8
		switch (centralData->critical_behavior)
80021fde:	ec f8 00 00 	ld.w	r8,r6[0]
80021fe2:	70 08       	ld.w	r8,r8[0x0]
80021fe4:	f0 f8 11 a4 	ld.w	r8,r8[4516]
80021fe8:	58 28       	cp.w	r8,2
80021fea:	c1 00       	breq	8002200a <waypoint_critical_handler+0x1f6>
80021fec:	58 38       	cp.w	r8,3
80021fee:	c1 90       	breq	80022020 <waypoint_critical_handler+0x20c>
80021ff0:	58 18       	cp.w	r8,1
80021ff2:	c2 11       	brne	80022034 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80021ff4:	fe cc 02 7c 	sub	r12,pc,636
80021ff8:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80021ffc:	ec f8 00 00 	ld.w	r8,r6[0]
80022000:	70 08       	ld.w	r8,r8[0x0]
80022002:	30 29       	mov	r9,2
80022004:	f1 49 11 a4 	st.w	r8[4516],r9
			break;
80022008:	c1 68       	rjmp	80022034 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
8002200a:	fe cc 02 66 	sub	r12,pc,614
8002200e:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80022012:	ec f8 00 00 	ld.w	r8,r6[0]
80022016:	70 08       	ld.w	r8,r8[0x0]
80022018:	30 39       	mov	r9,3
8002201a:	f1 49 11 a4 	st.w	r8[4516],r9
			break;
8002201e:	c0 b8       	rjmp	80022034 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80022020:	fe cc 02 4c 	sub	r12,pc,588
80022024:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80022028:	ec f8 00 00 	ld.w	r8,r6[0]
8002202c:	70 09       	ld.w	r9,r8[0x0]
8002202e:	30 18       	mov	r8,1
80022030:	f3 68 0f 78 	st.b	r9[3960],r8
			break;
		}
	}
80022034:	2f 9d       	sub	sp,-28
80022036:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002203a:	00 00       	add	r0,r0
8002203c:	80 02       	ld.sh	r2,r0[0x0]
8002203e:	1c a4       	st.w	lr++,r4

80022040 <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
80022040:	eb cd 40 80 	pushm	r7,lr
80022044:	1a 97       	mov	r7,sp
80022046:	20 1d       	sub	sp,4
80022048:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
8002204c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022050:	f1 38 01 00 	ld.ub	r8,r8[256]
80022054:	2f f8       	sub	r8,-1
80022056:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002205e:	f1 38 01 01 	ld.ub	r8,r8[257]
80022062:	10 39       	cp.w	r9,r8
80022064:	5f 08       	sreq	r8
}
80022066:	10 9c       	mov	r12,r8
80022068:	2f fd       	sub	sp,-4
8002206a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002206e <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
8002206e:	eb cd 40 c0 	pushm	r6-r7,lr
80022072:	1a 97       	mov	r7,sp
80022074:	20 3d       	sub	sp,12
80022076:	4a 46       	lddpc	r6,80022104 <buffer_put_lossy+0x96>
80022078:	1e 26       	rsub	r6,pc
8002207a:	ef 4c ff f8 	st.w	r7[-8],r12
8002207e:	16 98       	mov	r8,r11
80022080:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
80022084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022088:	f1 38 01 00 	ld.ub	r8,r8[256]
8002208c:	2f f8       	sub	r8,-1
8002208e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80022092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022096:	f1 38 01 01 	ld.ub	r8,r8[257]
8002209a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002209e:	f0 09 18 00 	cp.b	r9,r8
800220a2:	c0 b1       	brne	800220b8 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
800220a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220a8:	f1 38 01 01 	ld.ub	r8,r8[257]
800220ac:	2f f8       	sub	r8,-1
800220ae:	5c 58       	castu.b	r8
800220b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220b4:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
800220b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220bc:	f1 38 01 00 	ld.ub	r8,r8[256]
800220c0:	10 99       	mov	r9,r8
800220c2:	ee fa ff f8 	ld.w	r10,r7[-8]
800220c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800220ca:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
800220ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800220d6:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
800220da:	ee fc ff f8 	ld.w	r12,r7[-8]
800220de:	f0 16 00 f5 	mcall	r6[980]
800220e2:	18 98       	mov	r8,r12
800220e4:	5c 58       	castu.b	r8
800220e6:	c0 70       	breq	800220f4 <buffer_put_lossy+0x86>
800220e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220ec:	30 18       	mov	r8,1
800220ee:	f3 68 01 02 	st.b	r9[258],r8
800220f2:	c0 68       	rjmp	800220fe <buffer_put_lossy+0x90>
800220f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800220f8:	30 08       	mov	r8,0
800220fa:	f3 68 01 02 	st.b	r9[258],r8
}
800220fe:	2f dd       	sub	sp,-12
80022100:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022104:	80 02       	ld.sh	r2,r0[0x0]
80022106:	1e fc       	st.b	--pc,r12

80022108 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
80022108:	eb cd 40 c0 	pushm	r6-r7,lr
8002210c:	1a 97       	mov	r7,sp
8002210e:	20 3d       	sub	sp,12
80022110:	4a 16       	lddpc	r6,80022194 <buffer_put+0x8c>
80022112:	1e 26       	rsub	r6,pc
80022114:	ef 4c ff f8 	st.w	r7[-8],r12
80022118:	16 98       	mov	r8,r11
8002211a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
8002211e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022122:	f1 38 01 00 	ld.ub	r8,r8[256]
80022126:	2f f8       	sub	r8,-1
80022128:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
8002212c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022130:	f1 38 01 01 	ld.ub	r8,r8[257]
80022134:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022138:	f0 09 18 00 	cp.b	r9,r8
8002213c:	c0 51       	brne	80022146 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
8002213e:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
80022142:	10 9c       	mov	r12,r8
80022144:	c2 48       	rjmp	8002218c <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80022146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002214a:	f1 38 01 00 	ld.ub	r8,r8[256]
8002214e:	10 99       	mov	r9,r8
80022150:	ee fa ff f8 	ld.w	r10,r7[-8]
80022154:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022158:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
8002215c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022160:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022164:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80022168:	ee fc ff f8 	ld.w	r12,r7[-8]
8002216c:	f0 16 00 f5 	mcall	r6[980]
80022170:	18 98       	mov	r8,r12
80022172:	5c 58       	castu.b	r8
80022174:	c0 70       	breq	80022182 <buffer_put+0x7a>
80022176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002217a:	30 18       	mov	r8,1
8002217c:	f3 68 01 02 	st.b	r9[258],r8
80022180:	c0 68       	rjmp	8002218c <buffer_put+0x84>
80022182:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022186:	30 08       	mov	r8,0
80022188:	f3 68 01 02 	st.b	r9[258],r8
}
8002218c:	2f dd       	sub	sp,-12
8002218e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022192:	00 00       	add	r0,r0
80022194:	80 02       	ld.sh	r2,r0[0x0]
80022196:	1f 96       	ld.ub	r6,pc[0x1]

80022198 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
80022198:	eb cd 40 80 	pushm	r7,lr
8002219c:	1a 97       	mov	r7,sp
8002219e:	20 2d       	sub	sp,8
800221a0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
800221a4:	30 08       	mov	r8,0
800221a6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
800221aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221ae:	f1 39 01 00 	ld.ub	r9,r8[256]
800221b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221b6:	f1 38 01 01 	ld.ub	r8,r8[257]
800221ba:	f0 09 18 00 	cp.b	r9,r8
800221be:	c1 a0       	breq	800221f2 <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
800221c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221c4:	f1 38 01 01 	ld.ub	r8,r8[257]
800221c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800221cc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800221d0:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
800221d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800221d8:	f1 38 01 01 	ld.ub	r8,r8[257]
800221dc:	2f f8       	sub	r8,-1
800221de:	5c 58       	castu.b	r8
800221e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800221e4:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
800221e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800221ec:	30 08       	mov	r8,0
800221ee:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
800221f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800221f6:	10 9c       	mov	r12,r8
800221f8:	2f ed       	sub	sp,-8
800221fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800221fe <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
800221fe:	eb cd 40 80 	pushm	r7,lr
80022202:	1a 97       	mov	r7,sp
80022204:	20 1d       	sub	sp,4
80022206:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
8002220a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002220e:	f1 39 01 00 	ld.ub	r9,r8[256]
80022212:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022216:	f1 38 01 01 	ld.ub	r8,r8[257]
8002221a:	f0 09 18 00 	cp.b	r9,r8
8002221e:	5f 08       	sreq	r8
}
80022220:	10 9c       	mov	r12,r8
80022222:	2f fd       	sub	sp,-4
80022224:	e3 cd 80 80 	ldm	sp++,r7,pc

80022228 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80022228:	eb cd 40 80 	pushm	r7,lr
8002222c:	1a 97       	mov	r7,sp
8002222e:	20 1d       	sub	sp,4
80022230:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
80022234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022238:	f1 38 01 00 	ld.ub	r8,r8[256]
8002223c:	f0 c9 ff 00 	sub	r9,r8,-256
80022240:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022244:	f1 38 01 01 	ld.ub	r8,r8[257]
80022248:	f2 08 01 08 	sub	r8,r9,r8
8002224c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
80022250:	10 9c       	mov	r12,r8
80022252:	2f fd       	sub	sp,-4
80022254:	e3 cd 80 80 	ldm	sp++,r7,pc

80022258 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
80022258:	eb cd 40 80 	pushm	r7,lr
8002225c:	1a 97       	mov	r7,sp
8002225e:	20 1d       	sub	sp,4
80022260:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022264:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022268:	30 08       	mov	r8,0
8002226a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002226e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022272:	30 08       	mov	r8,0
80022274:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80022278:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002227c:	30 08       	mov	r8,0
8002227e:	f3 68 01 02 	st.b	r9[258],r8
}
80022282:	2f fd       	sub	sp,-4
80022284:	e3 cd 80 80 	ldm	sp++,r7,pc

80022288 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
80022288:	eb cd 40 80 	pushm	r7,lr
8002228c:	1a 97       	mov	r7,sp
8002228e:	20 1d       	sub	sp,4
80022290:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022294:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022298:	30 08       	mov	r8,0
8002229a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002229e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800222a2:	30 08       	mov	r8,0
800222a4:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
800222a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800222ac:	30 08       	mov	r8,0
800222ae:	f3 68 01 02 	st.b	r9[258],r8
}
800222b2:	2f fd       	sub	sp,-4
800222b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800222b8 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
800222b8:	eb cd 40 c0 	pushm	r6-r7,lr
800222bc:	1a 97       	mov	r7,sp
800222be:	20 2d       	sub	sp,8
800222c0:	49 16       	lddpc	r6,80022304 <make_buffered_stream+0x4c>
800222c2:	1e 26       	rsub	r6,pc
800222c4:	ef 4c ff fc 	st.w	r7[-4],r12
800222c8:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
800222cc:	ec f9 01 08 	ld.w	r9,r6[264]
800222d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222d4:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
800222d6:	ec f9 01 3c 	ld.w	r9,r6[316]
800222da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222de:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
800222e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222e4:	30 09       	mov	r9,0
800222e6:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
800222e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800222f0:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
800222f2:	ec f9 00 b0 	ld.w	r9,r6[176]
800222f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800222fa:	91 49       	st.w	r8[0x10],r9
}
800222fc:	2f ed       	sub	sp,-8
800222fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022302:	00 00       	add	r0,r0
80022304:	80 02       	ld.sh	r2,r0[0x0]
80022306:	21 46       	sub	r6,20

80022308 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
80022308:	eb cd 40 c0 	pushm	r6-r7,lr
8002230c:	1a 97       	mov	r7,sp
8002230e:	20 2d       	sub	sp,8
80022310:	49 16       	lddpc	r6,80022354 <make_buffered_stream_lossy+0x4c>
80022312:	1e 26       	rsub	r6,pc
80022314:	ef 4c ff fc 	st.w	r7[-4],r12
80022318:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002231c:	ec f9 01 08 	ld.w	r9,r6[264]
80022320:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022324:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80022326:	ec f9 04 f4 	ld.w	r9,r6[1268]
8002232a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002232e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022334:	30 09       	mov	r9,0
80022336:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002233c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022340:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022342:	ec f9 00 b0 	ld.w	r9,r6[176]
80022346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002234a:	91 49       	st.w	r8[0x10],r9
}
8002234c:	2f ed       	sub	sp,-8
8002234e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022352:	00 00       	add	r0,r0
80022354:	80 02       	ld.sh	r2,r0[0x0]
80022356:	21 96       	sub	r6,25

80022358 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022358:	eb cd 40 c0 	pushm	r6-r7,lr
8002235c:	1a 97       	mov	r7,sp
8002235e:	20 6d       	sub	sp,24
80022360:	49 e6       	lddpc	r6,800223d8 <interpolate+0x80>
80022362:	1e 26       	rsub	r6,pc
80022364:	ef 4c ff f8 	st.w	r7[-8],r12
80022368:	ef 4b ff f4 	st.w	r7[-12],r11
8002236c:	ef 4a ff f0 	st.w	r7[-16],r10
80022370:	ef 49 ff ec 	st.w	r7[-20],r9
80022374:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022378:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002237c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022380:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022384:	c0 41       	brne	8002238c <interpolate+0x34>
	{
		return y1;
80022386:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002238a:	c2 38       	rjmp	800223d0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002238c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022390:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022394:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022398:	ee fa ff f8 	ld.w	r10,r7[-8]
8002239c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800223a0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800223a4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800223a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800223ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800223b0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800223b4:	12 9b       	mov	r11,r9
800223b6:	10 9c       	mov	r12,r8
800223b8:	f0 16 00 08 	mcall	r6[32]
800223bc:	18 98       	mov	r8,r12
800223be:	10 99       	mov	r9,r8
800223c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800223c4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800223c8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800223cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800223d0:	10 9c       	mov	r12,r8
800223d2:	2f ad       	sub	sp,-24
800223d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800223d8:	80 02       	ld.sh	r2,r0[0x0]
800223da:	21 e6       	sub	r6,30

800223dc <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800223dc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800223e0:	1a 97       	mov	r7,sp
800223e2:	20 8d       	sub	sp,32
800223e4:	4d 96       	lddpc	r6,80022548 <local_to_global_position+0x16c>
800223e6:	1e 26       	rsub	r6,pc
800223e8:	ee c5 ff e0 	sub	r5,r7,-32
800223ec:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800223f0:	ea e2 00 18 	ld.d	r2,r5[24]
800223f4:	6a 08       	ld.w	r8,r5[0x0]
800223f6:	10 9c       	mov	r12,r8
800223f8:	f0 16 00 03 	mcall	r6[12]
800223fc:	fc 18 40 00 	movh	r8,0x4000
80022400:	e0 69 54 a6 	mov	r9,21670
80022404:	ea 19 41 58 	orh	r9,0x4158
80022408:	f0 16 00 0c 	mcall	r6[48]
8002240c:	14 98       	mov	r8,r10
8002240e:	16 99       	mov	r9,r11
80022410:	10 9a       	mov	r10,r8
80022412:	12 9b       	mov	r11,r9
80022414:	30 08       	mov	r8,0
80022416:	e0 69 80 00 	mov	r9,32768
8002241a:	ea 19 40 66 	orh	r9,0x4066
8002241e:	f0 16 00 02 	mcall	r6[8]
80022422:	14 98       	mov	r8,r10
80022424:	16 99       	mov	r9,r11
80022426:	10 9a       	mov	r10,r8
80022428:	12 9b       	mov	r11,r9
8002242a:	e0 68 2d 18 	mov	r8,11544
8002242e:	ea 18 54 44 	orh	r8,0x5444
80022432:	e0 69 21 fb 	mov	r9,8699
80022436:	ea 19 40 09 	orh	r9,0x4009
8002243a:	f0 16 00 0c 	mcall	r6[48]
8002243e:	14 98       	mov	r8,r10
80022440:	16 99       	mov	r9,r11
80022442:	04 9a       	mov	r10,r2
80022444:	06 9b       	mov	r11,r3
80022446:	f0 16 00 05 	mcall	r6[20]
8002244a:	14 98       	mov	r8,r10
8002244c:	16 99       	mov	r9,r11
8002244e:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
80022452:	ea e2 00 10 	ld.d	r2,r5[16]
80022456:	6a 18       	ld.w	r8,r5[0x4]
80022458:	10 9c       	mov	r12,r8
8002245a:	f0 16 00 03 	mcall	r6[12]
8002245e:	14 90       	mov	r0,r10
80022460:	16 91       	mov	r1,r11
80022462:	ee ea ff ec 	ld.d	r10,r7[-20]
80022466:	e0 68 2d 18 	mov	r8,11544
8002246a:	ea 18 54 44 	orh	r8,0x5444
8002246e:	e0 69 21 fb 	mov	r9,8699
80022472:	ea 19 40 09 	orh	r9,0x4009
80022476:	f0 16 00 02 	mcall	r6[8]
8002247a:	14 98       	mov	r8,r10
8002247c:	16 99       	mov	r9,r11
8002247e:	10 9a       	mov	r10,r8
80022480:	12 9b       	mov	r11,r9
80022482:	30 08       	mov	r8,0
80022484:	e0 69 80 00 	mov	r9,32768
80022488:	ea 19 40 66 	orh	r9,0x4066
8002248c:	f0 16 00 0c 	mcall	r6[48]
80022490:	14 98       	mov	r8,r10
80022492:	16 99       	mov	r9,r11
80022494:	10 9a       	mov	r10,r8
80022496:	12 9b       	mov	r11,r9
80022498:	f0 16 00 b5 	mcall	r6[724]
8002249c:	fc 18 40 00 	movh	r8,0x4000
800224a0:	e0 69 54 a6 	mov	r9,21670
800224a4:	ea 19 41 58 	orh	r9,0x4158
800224a8:	f0 16 00 02 	mcall	r6[8]
800224ac:	14 98       	mov	r8,r10
800224ae:	16 99       	mov	r9,r11
800224b0:	00 9a       	mov	r10,r0
800224b2:	02 9b       	mov	r11,r1
800224b4:	f0 16 00 0c 	mcall	r6[48]
800224b8:	14 98       	mov	r8,r10
800224ba:	16 99       	mov	r9,r11
800224bc:	10 9a       	mov	r10,r8
800224be:	12 9b       	mov	r11,r9
800224c0:	30 08       	mov	r8,0
800224c2:	e0 69 80 00 	mov	r9,32768
800224c6:	ea 19 40 66 	orh	r9,0x4066
800224ca:	f0 16 00 02 	mcall	r6[8]
800224ce:	14 98       	mov	r8,r10
800224d0:	16 99       	mov	r9,r11
800224d2:	10 9a       	mov	r10,r8
800224d4:	12 9b       	mov	r11,r9
800224d6:	e0 68 2d 18 	mov	r8,11544
800224da:	ea 18 54 44 	orh	r8,0x5444
800224de:	e0 69 21 fb 	mov	r9,8699
800224e2:	ea 19 40 09 	orh	r9,0x4009
800224e6:	f0 16 00 0c 	mcall	r6[48]
800224ea:	14 98       	mov	r8,r10
800224ec:	16 99       	mov	r9,r11
800224ee:	04 9a       	mov	r10,r2
800224f0:	06 9b       	mov	r11,r3
800224f2:	f0 16 00 05 	mcall	r6[20]
800224f6:	14 98       	mov	r8,r10
800224f8:	16 99       	mov	r9,r11
800224fa:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
800224fe:	6a 89       	ld.w	r9,r5[0x20]
80022500:	6a 28       	ld.w	r8,r5[0x8]
80022502:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022506:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
8002250a:	6a 38       	ld.w	r8,r5[0xc]
8002250c:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
80022510:	ee fa ff e0 	ld.w	r10,r7[-32]
80022514:	ee cb 00 1c 	sub	r11,r7,28
80022518:	f4 c8 00 00 	sub	r8,r10,0
8002251c:	f6 c9 00 00 	sub	r9,r11,0
80022520:	72 0c       	ld.w	r12,r9[0x0]
80022522:	91 0c       	st.w	r8[0x0],r12
80022524:	72 1c       	ld.w	r12,r9[0x4]
80022526:	91 1c       	st.w	r8[0x4],r12
80022528:	72 2c       	ld.w	r12,r9[0x8]
8002252a:	91 2c       	st.w	r8[0x8],r12
8002252c:	72 39       	ld.w	r9,r9[0xc]
8002252e:	91 39       	st.w	r8[0xc],r9
80022530:	f6 e8 00 10 	ld.d	r8,r11[16]
80022534:	f4 e9 00 10 	st.d	r10[16],r8
80022538:	76 68       	ld.w	r8,r11[0x18]
8002253a:	95 68       	st.w	r10[0x18],r8
}
8002253c:	ee fc ff e0 	ld.w	r12,r7[-32]
80022540:	2f 8d       	sub	sp,-32
80022542:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80022546:	00 00       	add	r0,r0
80022548:	80 02       	ld.sh	r2,r0[0x0]
8002254a:	22 6a       	sub	r10,38

8002254c <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
8002254c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022550:	1a 97       	mov	r7,sp
80022552:	20 ed       	sub	sp,56
80022554:	4f 16       	lddpc	r6,80022718 <global_to_local_position+0x1cc>
80022556:	1e 26       	rsub	r6,pc
80022558:	ee c5 ff ec 	sub	r5,r7,-20
8002255c:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
8002255e:	ee ca 00 28 	sub	r10,r7,40
80022562:	ea cb ff e4 	sub	r11,r5,-28
80022566:	f4 c8 00 00 	sub	r8,r10,0
8002256a:	f6 c9 00 00 	sub	r9,r11,0
8002256e:	72 0c       	ld.w	r12,r9[0x0]
80022570:	91 0c       	st.w	r8[0x0],r12
80022572:	72 1c       	ld.w	r12,r9[0x4]
80022574:	91 1c       	st.w	r8[0x4],r12
80022576:	72 2c       	ld.w	r12,r9[0x8]
80022578:	91 2c       	st.w	r8[0x8],r12
8002257a:	72 39       	ld.w	r9,r9[0xc]
8002257c:	91 39       	st.w	r8[0xc],r9
8002257e:	f6 e8 00 10 	ld.d	r8,r11[16]
80022582:	f4 e9 00 10 	st.d	r10[16],r8
80022586:	76 68       	ld.w	r8,r11[0x18]
80022588:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
8002258a:	ea ea 00 08 	ld.d	r10,r5[8]
8002258e:	e0 68 2d 18 	mov	r8,11544
80022592:	ea 18 54 44 	orh	r8,0x5444
80022596:	e0 69 21 fb 	mov	r9,8699
8002259a:	ea 19 40 09 	orh	r9,0x4009
8002259e:	f0 16 00 02 	mcall	r6[8]
800225a2:	14 98       	mov	r8,r10
800225a4:	16 99       	mov	r9,r11
800225a6:	10 9a       	mov	r10,r8
800225a8:	12 9b       	mov	r11,r9
800225aa:	30 08       	mov	r8,0
800225ac:	e0 69 80 00 	mov	r9,32768
800225b0:	ea 19 40 66 	orh	r9,0x4066
800225b4:	f0 16 00 0c 	mcall	r6[48]
800225b8:	14 98       	mov	r8,r10
800225ba:	16 99       	mov	r9,r11
800225bc:	10 9a       	mov	r10,r8
800225be:	12 9b       	mov	r11,r9
800225c0:	f0 16 00 b5 	mcall	r6[724]
800225c4:	fc 18 40 00 	movh	r8,0x4000
800225c8:	e0 69 54 a6 	mov	r9,21670
800225cc:	ea 19 41 58 	orh	r9,0x4158
800225d0:	f0 16 00 02 	mcall	r6[8]
800225d4:	14 98       	mov	r8,r10
800225d6:	16 99       	mov	r9,r11
800225d8:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
800225dc:	ea ea 00 08 	ld.d	r10,r5[8]
800225e0:	ea e8 00 24 	ld.d	r8,r5[36]
800225e4:	f0 16 00 12 	mcall	r6[72]
800225e8:	14 98       	mov	r8,r10
800225ea:	16 99       	mov	r9,r11
800225ec:	10 9a       	mov	r10,r8
800225ee:	12 9b       	mov	r11,r9
800225f0:	e0 68 2d 18 	mov	r8,11544
800225f4:	ea 18 54 44 	orh	r8,0x5444
800225f8:	e0 69 21 fb 	mov	r9,8699
800225fc:	ea 19 40 09 	orh	r9,0x4009
80022600:	f0 16 00 02 	mcall	r6[8]
80022604:	14 98       	mov	r8,r10
80022606:	16 99       	mov	r9,r11
80022608:	10 9a       	mov	r10,r8
8002260a:	12 9b       	mov	r11,r9
8002260c:	30 08       	mov	r8,0
8002260e:	e0 69 80 00 	mov	r9,32768
80022612:	ea 19 40 66 	orh	r9,0x4066
80022616:	f0 16 00 0c 	mcall	r6[48]
8002261a:	14 98       	mov	r8,r10
8002261c:	16 99       	mov	r9,r11
8002261e:	10 9a       	mov	r10,r8
80022620:	12 9b       	mov	r11,r9
80022622:	f0 16 00 b3 	mcall	r6[716]
80022626:	fc 18 40 00 	movh	r8,0x4000
8002262a:	e0 69 54 a6 	mov	r9,21670
8002262e:	ea 19 41 58 	orh	r9,0x4158
80022632:	f0 16 00 02 	mcall	r6[8]
80022636:	14 98       	mov	r8,r10
80022638:	16 99       	mov	r9,r11
8002263a:	10 9a       	mov	r10,r8
8002263c:	12 9b       	mov	r11,r9
8002263e:	f0 16 00 09 	mcall	r6[36]
80022642:	18 98       	mov	r8,r12
80022644:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022648:	ea ea 00 00 	ld.d	r10,r5[0]
8002264c:	ea e8 00 1c 	ld.d	r8,r5[28]
80022650:	f0 16 00 12 	mcall	r6[72]
80022654:	14 98       	mov	r8,r10
80022656:	16 99       	mov	r9,r11
80022658:	10 9a       	mov	r10,r8
8002265a:	12 9b       	mov	r11,r9
8002265c:	e0 68 2d 18 	mov	r8,11544
80022660:	ea 18 54 44 	orh	r8,0x5444
80022664:	e0 69 21 fb 	mov	r9,8699
80022668:	ea 19 40 09 	orh	r9,0x4009
8002266c:	f0 16 00 02 	mcall	r6[8]
80022670:	14 98       	mov	r8,r10
80022672:	16 99       	mov	r9,r11
80022674:	10 9a       	mov	r10,r8
80022676:	12 9b       	mov	r11,r9
80022678:	30 08       	mov	r8,0
8002267a:	e0 69 80 00 	mov	r9,32768
8002267e:	ea 19 40 66 	orh	r9,0x4066
80022682:	f0 16 00 0c 	mcall	r6[48]
80022686:	14 98       	mov	r8,r10
80022688:	16 99       	mov	r9,r11
8002268a:	10 9a       	mov	r10,r8
8002268c:	12 9b       	mov	r11,r9
8002268e:	f0 16 00 b3 	mcall	r6[716]
80022692:	ee e8 ff f8 	ld.d	r8,r7[-8]
80022696:	f0 16 00 02 	mcall	r6[8]
8002269a:	14 98       	mov	r8,r10
8002269c:	16 99       	mov	r9,r11
8002269e:	10 9a       	mov	r10,r8
800226a0:	12 9b       	mov	r11,r9
800226a2:	f0 16 00 09 	mcall	r6[36]
800226a6:	18 98       	mov	r8,r12
800226a8:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
800226ac:	6a 49       	ld.w	r9,r5[0x10]
800226ae:	6a b8       	ld.w	r8,r5[0x2c]
800226b0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800226b4:	ee 18 80 00 	eorh	r8,0x8000
800226b8:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
800226bc:	6a 58       	ld.w	r8,r5[0x14]
800226be:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
800226c2:	06 9b       	mov	r11,r3
800226c4:	ee ca 00 38 	sub	r10,r7,56
800226c8:	f6 c8 00 00 	sub	r8,r11,0
800226cc:	f4 c9 00 00 	sub	r9,r10,0
800226d0:	72 0c       	ld.w	r12,r9[0x0]
800226d2:	91 0c       	st.w	r8[0x0],r12
800226d4:	72 1c       	ld.w	r12,r9[0x4]
800226d6:	91 1c       	st.w	r8[0x4],r12
800226d8:	72 2c       	ld.w	r12,r9[0x8]
800226da:	91 2c       	st.w	r8[0x8],r12
800226dc:	72 39       	ld.w	r9,r9[0xc]
800226de:	91 39       	st.w	r8[0xc],r9
800226e0:	f6 c8 ff f0 	sub	r8,r11,-16
800226e4:	f4 c9 ff f0 	sub	r9,r10,-16
800226e8:	72 0c       	ld.w	r12,r9[0x0]
800226ea:	91 0c       	st.w	r8[0x0],r12
800226ec:	72 1c       	ld.w	r12,r9[0x4]
800226ee:	91 1c       	st.w	r8[0x4],r12
800226f0:	72 2c       	ld.w	r12,r9[0x8]
800226f2:	91 2c       	st.w	r8[0x8],r12
800226f4:	72 39       	ld.w	r9,r9[0xc]
800226f6:	91 39       	st.w	r8[0xc],r9
800226f8:	f6 c8 ff e0 	sub	r8,r11,-32
800226fc:	f4 c9 ff e0 	sub	r9,r10,-32
80022700:	72 0a       	ld.w	r10,r9[0x0]
80022702:	91 0a       	st.w	r8[0x0],r10
80022704:	72 1a       	ld.w	r10,r9[0x4]
80022706:	91 1a       	st.w	r8[0x4],r10
80022708:	72 2a       	ld.w	r10,r9[0x8]
8002270a:	91 2a       	st.w	r8[0x8],r10
8002270c:	72 39       	ld.w	r9,r9[0xc]
8002270e:	91 39       	st.w	r8[0xc],r9
}
80022710:	06 9c       	mov	r12,r3
80022712:	2f 2d       	sub	sp,-56
80022714:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022718:	80 02       	ld.sh	r2,r0[0x0]
8002271a:	23 da       	sub	r10,61

8002271c <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
8002271c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80022720:	1a 97       	mov	r7,sp
80022722:	20 3d       	sub	sp,12
80022724:	4d 06       	lddpc	r6,80022864 <Quat_to_Aero+0x148>
80022726:	1e 26       	rsub	r6,pc
80022728:	ee c5 ff e4 	sub	r5,r7,-28
8002272c:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
8002272e:	6a 09       	ld.w	r9,r5[0x0]
80022730:	6a 08       	ld.w	r8,r5[0x0]
80022732:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022736:	6a 1a       	ld.w	r10,r5[0x4]
80022738:	6a 18       	ld.w	r8,r5[0x4]
8002273a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002273e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022742:	6a 2a       	ld.w	r10,r5[0x8]
80022744:	6a 28       	ld.w	r8,r5[0x8]
80022746:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002274a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002274e:	6a 3a       	ld.w	r10,r5[0xc]
80022750:	6a 38       	ld.w	r8,r5[0xc]
80022752:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022756:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002275a:	10 9c       	mov	r12,r8
8002275c:	f0 16 00 03 	mcall	r6[12]
80022760:	14 92       	mov	r2,r10
80022762:	16 93       	mov	r3,r11
80022764:	6a 09       	ld.w	r9,r5[0x0]
80022766:	6a 18       	ld.w	r8,r5[0x4]
80022768:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002276c:	6a 2a       	ld.w	r10,r5[0x8]
8002276e:	6a 38       	ld.w	r8,r5[0xc]
80022770:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022774:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022778:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002277c:	10 9c       	mov	r12,r8
8002277e:	f0 16 00 03 	mcall	r6[12]
80022782:	04 98       	mov	r8,r2
80022784:	06 99       	mov	r9,r3
80022786:	f0 16 00 56 	mcall	r6[344]
8002278a:	14 98       	mov	r8,r10
8002278c:	16 99       	mov	r9,r11
8002278e:	10 9a       	mov	r10,r8
80022790:	12 9b       	mov	r11,r9
80022792:	f0 16 00 09 	mcall	r6[36]
80022796:	18 98       	mov	r8,r12
80022798:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
8002279c:	6a 19       	ld.w	r9,r5[0x4]
8002279e:	6a 38       	ld.w	r8,r5[0xc]
800227a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800227a4:	6a 0a       	ld.w	r10,r5[0x0]
800227a6:	6a 28       	ld.w	r8,r5[0x8]
800227a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800227ac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800227b0:	fc 18 c0 00 	movh	r8,0xc000
800227b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800227b8:	10 9c       	mov	r12,r8
800227ba:	f0 16 00 03 	mcall	r6[12]
800227be:	14 98       	mov	r8,r10
800227c0:	16 99       	mov	r9,r11
800227c2:	10 9a       	mov	r10,r8
800227c4:	12 9b       	mov	r11,r9
800227c6:	f0 16 01 76 	mcall	r6[1496]
800227ca:	14 98       	mov	r8,r10
800227cc:	16 99       	mov	r9,r11
800227ce:	10 9a       	mov	r10,r8
800227d0:	12 9b       	mov	r11,r9
800227d2:	f0 16 00 09 	mcall	r6[36]
800227d6:	18 98       	mov	r8,r12
800227d8:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
800227dc:	6a 09       	ld.w	r9,r5[0x0]
800227de:	6a 08       	ld.w	r8,r5[0x0]
800227e0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800227e4:	6a 1a       	ld.w	r10,r5[0x4]
800227e6:	6a 18       	ld.w	r8,r5[0x4]
800227e8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800227ec:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800227f0:	6a 2a       	ld.w	r10,r5[0x8]
800227f2:	6a 28       	ld.w	r8,r5[0x8]
800227f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800227f8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800227fc:	6a 3a       	ld.w	r10,r5[0xc]
800227fe:	6a 38       	ld.w	r8,r5[0xc]
80022800:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022804:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022808:	10 9c       	mov	r12,r8
8002280a:	f0 16 00 03 	mcall	r6[12]
8002280e:	14 92       	mov	r2,r10
80022810:	16 93       	mov	r3,r11
80022812:	6a 09       	ld.w	r9,r5[0x0]
80022814:	6a 38       	ld.w	r8,r5[0xc]
80022816:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002281a:	6a 1a       	ld.w	r10,r5[0x4]
8002281c:	6a 28       	ld.w	r8,r5[0x8]
8002281e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022822:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022826:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002282a:	10 9c       	mov	r12,r8
8002282c:	f0 16 00 03 	mcall	r6[12]
80022830:	04 98       	mov	r8,r2
80022832:	06 99       	mov	r9,r3
80022834:	f0 16 00 56 	mcall	r6[344]
80022838:	14 98       	mov	r8,r10
8002283a:	16 99       	mov	r9,r11
8002283c:	10 9a       	mov	r10,r8
8002283e:	12 9b       	mov	r11,r9
80022840:	f0 16 00 09 	mcall	r6[36]
80022844:	18 98       	mov	r8,r12
80022846:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
8002284a:	02 9a       	mov	r10,r1
8002284c:	ee cb 00 0c 	sub	r11,r7,12
80022850:	f6 e8 00 00 	ld.d	r8,r11[0]
80022854:	f4 e9 00 00 	st.d	r10[0],r8
80022858:	76 28       	ld.w	r8,r11[0x8]
8002285a:	95 28       	st.w	r10[0x8],r8
}
8002285c:	02 9c       	mov	r12,r1
8002285e:	2f dd       	sub	sp,-12
80022860:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80022864:	80 02       	ld.sh	r2,r0[0x0]
80022866:	25 aa       	sub	r10,90

80022868 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022868:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002286c:	1a 97       	mov	r7,sp
8002286e:	49 f6       	lddpc	r6,800228e8 <get_yaw+0x80>
80022870:	1e 26       	rsub	r6,pc
80022872:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022876:	6a 09       	ld.w	r9,r5[0x0]
80022878:	6a 08       	ld.w	r8,r5[0x0]
8002287a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002287e:	6a 1a       	ld.w	r10,r5[0x4]
80022880:	6a 18       	ld.w	r8,r5[0x4]
80022882:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022886:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8002288a:	6a 2a       	ld.w	r10,r5[0x8]
8002288c:	6a 28       	ld.w	r8,r5[0x8]
8002288e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022892:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022896:	6a 3a       	ld.w	r10,r5[0xc]
80022898:	6a 38       	ld.w	r8,r5[0xc]
8002289a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002289e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800228a2:	10 9c       	mov	r12,r8
800228a4:	f0 16 00 03 	mcall	r6[12]
800228a8:	14 92       	mov	r2,r10
800228aa:	16 93       	mov	r3,r11
800228ac:	6a 09       	ld.w	r9,r5[0x0]
800228ae:	6a 38       	ld.w	r8,r5[0xc]
800228b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800228b4:	6a 1a       	ld.w	r10,r5[0x4]
800228b6:	6a 28       	ld.w	r8,r5[0x8]
800228b8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800228bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800228c0:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
800228c4:	10 9c       	mov	r12,r8
800228c6:	f0 16 00 03 	mcall	r6[12]
800228ca:	04 98       	mov	r8,r2
800228cc:	06 99       	mov	r9,r3
800228ce:	f0 16 00 56 	mcall	r6[344]
800228d2:	14 98       	mov	r8,r10
800228d4:	16 99       	mov	r9,r11
800228d6:	10 9a       	mov	r10,r8
800228d8:	12 9b       	mov	r11,r9
800228da:	f0 16 00 09 	mcall	r6[36]
800228de:	18 98       	mov	r8,r12
}
800228e0:	10 9c       	mov	r12,r8
800228e2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800228e6:	00 00       	add	r0,r0
800228e8:	80 02       	ld.sh	r2,r0[0x0]
800228ea:	26 f4       	sub	r4,111

800228ec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800228ec:	eb cd 40 c0 	pushm	r6-r7,lr
800228f0:	1a 97       	mov	r7,sp
800228f2:	20 6d       	sub	sp,24
800228f4:	49 e6       	lddpc	r6,8002296c <interpolate+0x80>
800228f6:	1e 26       	rsub	r6,pc
800228f8:	ef 4c ff f8 	st.w	r7[-8],r12
800228fc:	ef 4b ff f4 	st.w	r7[-12],r11
80022900:	ef 4a ff f0 	st.w	r7[-16],r10
80022904:	ef 49 ff ec 	st.w	r7[-20],r9
80022908:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002290c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022910:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022914:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022918:	c0 41       	brne	80022920 <interpolate+0x34>
	{
		return y1;
8002291a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002291e:	c2 38       	rjmp	80022964 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80022920:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022924:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022928:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002292c:	ee fa ff f8 	ld.w	r10,r7[-8]
80022930:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022934:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80022938:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002293c:	ee fa ff f0 	ld.w	r10,r7[-16]
80022940:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022944:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80022948:	12 9b       	mov	r11,r9
8002294a:	10 9c       	mov	r12,r8
8002294c:	f0 16 00 08 	mcall	r6[32]
80022950:	18 98       	mov	r8,r12
80022952:	10 99       	mov	r9,r8
80022954:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022958:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002295c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80022960:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80022964:	10 9c       	mov	r12,r8
80022966:	2f ad       	sub	sp,-24
80022968:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002296c:	80 02       	ld.sh	r2,r0[0x0]
8002296e:	27 7a       	sub	r10,119

80022970 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80022970:	eb cd 40 c0 	pushm	r6-r7,lr
80022974:	1a 97       	mov	r7,sp
80022976:	20 1d       	sub	sp,4
80022978:	48 66       	lddpc	r6,80022990 <dbg_print_init+0x20>
8002297a:	1e 26       	rsub	r6,pc
8002297c:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80022980:	ec f8 01 94 	ld.w	r8,r6[404]
80022984:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022988:	91 09       	st.w	r8[0x0],r9
}
8002298a:	2f fd       	sub	sp,-4
8002298c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022990:	80 02       	ld.sh	r2,r0[0x0]
80022992:	27 fe       	sub	lr,127

80022994 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80022994:	eb cd 40 80 	pushm	r7,lr
80022998:	1a 97       	mov	r7,sp
8002299a:	20 2d       	sub	sp,8
8002299c:	ef 4c ff fc 	st.w	r7[-4],r12
800229a0:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800229a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229a8:	58 08       	cp.w	r8,0
800229aa:	c2 10       	breq	800229ec <putstring+0x58>
800229ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229b0:	70 18       	ld.w	r8,r8[0x4]
800229b2:	58 08       	cp.w	r8,0
800229b4:	c1 51       	brne	800229de <putstring+0x4a>
800229b6:	c1 c8       	rjmp	800229ee <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
800229b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229bc:	70 18       	ld.w	r8,r8[0x4]
800229be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800229c2:	13 89       	ld.ub	r9,r9[0x0]
800229c4:	12 9a       	mov	r10,r9
800229c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800229ca:	72 59       	ld.w	r9,r9[0x14]
800229cc:	14 9b       	mov	r11,r10
800229ce:	12 9c       	mov	r12,r9
800229d0:	5d 18       	icall	r8
		s++;
800229d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800229d6:	2f f8       	sub	r8,-1
800229d8:	ef 48 ff f8 	st.w	r7[-8],r8
800229dc:	c0 28       	rjmp	800229e0 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
800229de:	d7 03       	nop
800229e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800229e4:	11 88       	ld.ub	r8,r8[0x0]
800229e6:	58 08       	cp.w	r8,0
800229e8:	ce 81       	brne	800229b8 <putstring+0x24>
800229ea:	c0 28       	rjmp	800229ee <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800229ec:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
800229ee:	2f ed       	sub	sp,-8
800229f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800229f4 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
800229f4:	eb cd 40 c0 	pushm	r6-r7,lr
800229f8:	1a 97       	mov	r7,sp
800229fa:	20 2d       	sub	sp,8
800229fc:	49 76       	lddpc	r6,80022a58 <putdigit+0x64>
800229fe:	1e 26       	rsub	r6,pc
80022a00:	ef 4c ff fc 	st.w	r7[-4],r12
80022a04:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a0c:	58 08       	cp.w	r8,0
80022a0e:	c1 d0       	breq	80022a48 <putdigit+0x54>
80022a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a14:	70 18       	ld.w	r8,r8[0x4]
80022a16:	58 08       	cp.w	r8,0
80022a18:	c1 a0       	breq	80022a4c <putdigit+0x58>
	
if (c > 35)
80022a1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022a1e:	e0 48 00 23 	cp.w	r8,35
80022a22:	e0 8b 00 17 	brhi	80022a50 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80022a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022a2a:	70 18       	ld.w	r8,r8[0x4]
80022a2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022a30:	ec fa 08 8c 	ld.w	r10,r6[2188]
80022a34:	f4 09 07 09 	ld.ub	r9,r10[r9]
80022a38:	12 9a       	mov	r10,r9
80022a3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022a3e:	72 59       	ld.w	r9,r9[0x14]
80022a40:	14 9b       	mov	r11,r10
80022a42:	12 9c       	mov	r12,r9
80022a44:	5d 18       	icall	r8
80022a46:	c0 68       	rjmp	80022a52 <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022a48:	d7 03       	nop
80022a4a:	c0 48       	rjmp	80022a52 <putdigit+0x5e>
80022a4c:	d7 03       	nop
80022a4e:	c0 28       	rjmp	80022a52 <putdigit+0x5e>
	
if (c > 35)
    return;
80022a50:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80022a52:	2f ed       	sub	sp,-8
80022a54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a58:	80 02       	ld.sh	r2,r0[0x0]
80022a5a:	28 82       	sub	r2,-120

80022a5c <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80022a5c:	eb cd 40 c0 	pushm	r6-r7,lr
80022a60:	1a 97       	mov	r7,sp
80022a62:	20 7d       	sub	sp,28
80022a64:	4b 96       	lddpc	r6,80022b48 <putnum+0xec>
80022a66:	1e 26       	rsub	r6,pc
80022a68:	ef 4c ff ec 	st.w	r7[-20],r12
80022a6c:	ef 4b ff e8 	st.w	r7[-24],r11
80022a70:	14 98       	mov	r8,r10
80022a72:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022a76:	30 a8       	mov	r8,10
80022a78:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022a7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a80:	58 08       	cp.w	r8,0
80022a82:	c5 d0       	breq	80022b3c <putnum+0xe0>
80022a84:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a88:	70 18       	ld.w	r8,r8[0x4]
80022a8a:	58 08       	cp.w	r8,0
80022a8c:	c5 a0       	breq	80022b40 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
80022a8e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022a92:	58 08       	cp.w	r8,0
80022a94:	c1 04       	brge	80022ab4 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80022a96:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022a9a:	70 18       	ld.w	r8,r8[0x4]
80022a9c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022aa0:	72 59       	ld.w	r9,r9[0x14]
80022aa2:	32 db       	mov	r11,45
80022aa4:	12 9c       	mov	r12,r9
80022aa6:	5d 18       	icall	r8
    c = c*-1;
80022aa8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022aac:	5c 38       	neg	r8
80022aae:	ef 48 ff e8 	st.w	r7[-24],r8
80022ab2:	c0 a8       	rjmp	80022ac6 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80022ab4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022ab8:	70 18       	ld.w	r8,r8[0x4]
80022aba:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022abe:	72 59       	ld.w	r9,r9[0x14]
80022ac0:	32 0b       	mov	r11,32
80022ac2:	12 9c       	mov	r12,r9
80022ac4:	5d 18       	icall	r8
    
  }

  do{
    i--;
80022ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022aca:	20 18       	sub	r8,1
80022acc:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022ad0:	ee fa ff fc 	ld.w	r10,r7[-4]
80022ad4:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022ad8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022adc:	f0 09 0c 08 	divs	r8,r8,r9
80022ae0:	12 98       	mov	r8,r9
80022ae2:	5c 58       	castu.b	r8
80022ae4:	ee 0a 00 09 	add	r9,r7,r10
80022ae8:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022aec:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022af0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022af4:	f0 09 0c 08 	divs	r8,r8,r9
80022af8:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b00:	58 08       	cp.w	r8,0
80022b02:	c1 75       	brlt	80022b30 <putnum+0xd4>
80022b04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022b08:	58 08       	cp.w	r8,0
80022b0a:	fe 99 ff de 	brgt	80022ac6 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022b0e:	c1 18       	rjmp	80022b30 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b14:	ee 08 00 08 	add	r8,r7,r8
80022b18:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022b1c:	10 9b       	mov	r11,r8
80022b1e:	ee fc ff ec 	ld.w	r12,r7[-20]
80022b22:	f0 16 00 ab 	mcall	r6[684]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022b26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b2a:	2f f8       	sub	r8,-1
80022b2c:	ef 48 ff fc 	st.w	r7[-4],r8
80022b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022b34:	58 98       	cp.w	r8,9
80022b36:	fe 9a ff ed 	brle	80022b10 <putnum+0xb4>
80022b3a:	c0 48       	rjmp	80022b42 <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b3c:	d7 03       	nop
80022b3e:	c0 28       	rjmp	80022b42 <putnum+0xe6>
80022b40:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022b42:	2f 9d       	sub	sp,-28
80022b44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b48:	80 02       	ld.sh	r2,r0[0x0]
80022b4a:	28 ea       	sub	r10,-114

80022b4c <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80022b4c:	eb cd 40 c0 	pushm	r6-r7,lr
80022b50:	1a 97       	mov	r7,sp
80022b52:	20 7d       	sub	sp,28
80022b54:	4b 46       	lddpc	r6,80022c24 <putnum_tight+0xd8>
80022b56:	1e 26       	rsub	r6,pc
80022b58:	ef 4c ff ec 	st.w	r7[-20],r12
80022b5c:	ef 4b ff e8 	st.w	r7[-24],r11
80022b60:	14 98       	mov	r8,r10
80022b62:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022b66:	30 a8       	mov	r8,10
80022b68:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022b6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022b70:	58 08       	cp.w	r8,0
80022b72:	c5 30       	breq	80022c18 <putnum_tight+0xcc>
80022b74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022b78:	70 18       	ld.w	r8,r8[0x4]
80022b7a:	58 08       	cp.w	r8,0
80022b7c:	c5 00       	breq	80022c1c <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
80022b7e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022b82:	58 08       	cp.w	r8,0
80022b84:	c0 f4       	brge	80022ba2 <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
80022b86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022b8a:	70 18       	ld.w	r8,r8[0x4]
80022b8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022b90:	72 59       	ld.w	r9,r9[0x14]
80022b92:	32 db       	mov	r11,45
80022b94:	12 9c       	mov	r12,r9
80022b96:	5d 18       	icall	r8
    c = c*-1;
80022b98:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022b9c:	5c 38       	neg	r8
80022b9e:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
80022ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ba6:	20 18       	sub	r8,1
80022ba8:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022bac:	ee fa ff fc 	ld.w	r10,r7[-4]
80022bb0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022bb4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022bb8:	f0 09 0c 08 	divs	r8,r8,r9
80022bbc:	12 98       	mov	r8,r9
80022bbe:	5c 58       	castu.b	r8
80022bc0:	ee 0a 00 09 	add	r9,r7,r10
80022bc4:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022bc8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022bcc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022bd0:	f0 09 0c 08 	divs	r8,r8,r9
80022bd4:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022bdc:	58 08       	cp.w	r8,0
80022bde:	c1 75       	brlt	80022c0c <putnum_tight+0xc0>
80022be0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022be4:	58 08       	cp.w	r8,0
80022be6:	fe 99 ff de 	brgt	80022ba2 <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022bea:	c1 18       	rjmp	80022c0c <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022bf0:	ee 08 00 08 	add	r8,r7,r8
80022bf4:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022bf8:	10 9b       	mov	r11,r8
80022bfa:	ee fc ff ec 	ld.w	r12,r7[-20]
80022bfe:	f0 16 00 ab 	mcall	r6[684]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c06:	2f f8       	sub	r8,-1
80022c08:	ef 48 ff fc 	st.w	r7[-4],r8
80022c0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c10:	58 98       	cp.w	r8,9
80022c12:	fe 9a ff ed 	brle	80022bec <putnum_tight+0xa0>
80022c16:	c0 48       	rjmp	80022c1e <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022c18:	d7 03       	nop
80022c1a:	c0 28       	rjmp	80022c1e <putnum_tight+0xd2>
80022c1c:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022c1e:	2f 9d       	sub	sp,-28
80022c20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022c24:	80 02       	ld.sh	r2,r0[0x0]
80022c26:	29 da       	sub	r10,-99
80022c28:	2d 00       	sub	r0,-48
80022c2a:	00 00       	add	r0,r0
80022c2c:	2e 00       	sub	r0,-32

80022c2e <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80022c2e:	eb cd 40 c0 	pushm	r6-r7,lr
80022c32:	1a 97       	mov	r7,sp
80022c34:	20 8d       	sub	sp,32
80022c36:	4b d6       	lddpc	r6,80022d28 <putfloat+0xfa>
80022c38:	1e 26       	rsub	r6,pc
80022c3a:	ef 4c ff e8 	st.w	r7[-24],r12
80022c3e:	ef 4b ff e4 	st.w	r7[-28],r11
80022c42:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
80022c46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022c4a:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
80022c4e:	30 18       	mov	r8,1
80022c50:	ee fa ff e4 	ld.w	r10,r7[-28]
80022c54:	30 09       	mov	r9,0
80022c56:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80022c5a:	e0 8c 00 03 	brvs	80022c60 <putfloat+0x32>
80022c5e:	c0 25       	brlt	80022c62 <putfloat+0x34>
80022c60:	30 08       	mov	r8,0
80022c62:	5c 58       	castu.b	r8
80022c64:	c0 d0       	breq	80022c7e <putfloat+0x50>
		putstring(out_stream, "-");
80022c66:	fe cb 00 3e 	sub	r11,pc,62
80022c6a:	ee fc ff e8 	ld.w	r12,r7[-24]
80022c6e:	f0 16 00 32 	mcall	r6[200]
		num=-c;
80022c72:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022c76:	ee 18 80 00 	eorh	r8,0x8000
80022c7a:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
80022c7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022c82:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022c86:	ef 48 ff fc 	st.w	r7[-4],r8
80022c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c8e:	5c 48       	abs	r8
80022c90:	ef 48 ff fc 	st.w	r7[-4],r8
80022c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c98:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
80022c9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022ca0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022ca4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022ca8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022cac:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
80022cb0:	30 aa       	mov	r10,10
80022cb2:	ee fb ff f4 	ld.w	r11,r7[-12]
80022cb6:	ee fc ff e8 	ld.w	r12,r7[-24]
80022cba:	f0 16 01 3e 	mcall	r6[1272]
	putstring(out_stream, "."); 
80022cbe:	fe cb 00 92 	sub	r11,pc,146
80022cc2:	ee fc ff e8 	ld.w	r12,r7[-24]
80022cc6:	f0 16 00 32 	mcall	r6[200]
	
	for (i=0; i<after_digits; i++) 
80022cca:	30 08       	mov	r8,0
80022ccc:	ef 48 ff ec 	st.w	r7[-20],r8
80022cd0:	c2 38       	rjmp	80022d16 <putfloat+0xe8>
	{
		after*=10;
80022cd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022cd6:	fc 18 41 20 	movh	r8,0x4120
80022cda:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022cde:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
80022ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022ce6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022cea:	10 9b       	mov	r11,r8
80022cec:	ee fc ff e8 	ld.w	r12,r7[-24]
80022cf0:	f0 16 00 ab 	mcall	r6[684]
		after=after-(int)after;
80022cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cf8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022cfc:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d04:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022d08:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022d0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022d10:	2f f8       	sub	r8,-1
80022d12:	ef 48 ff ec 	st.w	r7[-20],r8
80022d16:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022d1a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80022d1e:	10 39       	cp.w	r9,r8
80022d20:	cd 95       	brlt	80022cd2 <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80022d22:	2f 8d       	sub	sp,-32
80022d24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d28:	80 02       	ld.sh	r2,r0[0x0]
80022d2a:	2a bc       	sub	r12,-85
80022d2c:	28 00       	sub	r0,-128
80022d2e:	00 00       	add	r0,r0
80022d30:	2c 20       	sub	r0,-62
80022d32:	00 00       	add	r0,r0
80022d34:	29 20       	sub	r0,-110
	...

80022d38 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80022d38:	eb cd 40 c0 	pushm	r6-r7,lr
80022d3c:	1a 97       	mov	r7,sp
80022d3e:	20 4d       	sub	sp,16
80022d40:	4a 06       	lddpc	r6,80022dc0 <print_vector+0x88>
80022d42:	1e 26       	rsub	r6,pc
80022d44:	ef 4c ff f8 	st.w	r7[-8],r12
80022d48:	ef 4b ff f4 	st.w	r7[-12],r11
80022d4c:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80022d50:	fe cb 00 24 	sub	r11,pc,36
80022d54:	ee fc ff f8 	ld.w	r12,r7[-8]
80022d58:	f0 16 00 32 	mcall	r6[200]
	for (i=0; i<3; i++) {
80022d5c:	30 08       	mov	r8,0
80022d5e:	ef 48 ff fc 	st.w	r7[-4],r8
80022d62:	c2 08       	rjmp	80022da2 <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
80022d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d68:	a3 68       	lsl	r8,0x2
80022d6a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022d6e:	f2 08 00 08 	add	r8,r9,r8
80022d72:	70 08       	ld.w	r8,r8[0x0]
80022d74:	ee fa ff f0 	ld.w	r10,r7[-16]
80022d78:	10 9b       	mov	r11,r8
80022d7a:	ee fc ff f8 	ld.w	r12,r7[-8]
80022d7e:	f0 16 00 cd 	mcall	r6[820]
		if (i<2) putstring(out_stream, ", ");
80022d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d86:	58 18       	cp.w	r8,1
80022d88:	e0 89 00 08 	brgt	80022d98 <print_vector+0x60>
80022d8c:	fe cb 00 5c 	sub	r11,pc,92
80022d90:	ee fc ff f8 	ld.w	r12,r7[-8]
80022d94:	f0 16 00 32 	mcall	r6[200]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
80022d98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d9c:	2f f8       	sub	r8,-1
80022d9e:	ef 48 ff fc 	st.w	r7[-4],r8
80022da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022da6:	58 28       	cp.w	r8,2
80022da8:	fe 9a ff de 	brle	80022d64 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80022dac:	fe cb 00 78 	sub	r11,pc,120
80022db0:	ee fc ff f8 	ld.w	r12,r7[-8]
80022db4:	f0 16 00 32 	mcall	r6[200]

}
80022db8:	2f cd       	sub	sp,-16
80022dba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022dbe:	00 00       	add	r0,r0
80022dc0:	80 02       	ld.sh	r2,r0[0x0]
80022dc2:	2b c6       	sub	r6,-68

80022dc4 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80022dc4:	eb cd 40 c0 	pushm	r6-r7,lr
80022dc8:	1a 97       	mov	r7,sp
80022dca:	20 3d       	sub	sp,12
80022dcc:	49 96       	lddpc	r6,80022e30 <print_quaternion+0x6c>
80022dce:	1e 26       	rsub	r6,pc
80022dd0:	ef 4c ff fc 	st.w	r7[-4],r12
80022dd4:	ef 4b ff f8 	st.w	r7[-8],r11
80022dd8:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022ddc:	fe cb 00 b0 	sub	r11,pc,176
80022de0:	ee fc ff fc 	ld.w	r12,r7[-4]
80022de4:	f0 16 00 32 	mcall	r6[200]
	putfloat(out_stream, quat->s, after_digits);
80022de8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022dec:	70 08       	ld.w	r8,r8[0x0]
80022dee:	ee fa ff f4 	ld.w	r10,r7[-12]
80022df2:	10 9b       	mov	r11,r8
80022df4:	ee fc ff fc 	ld.w	r12,r7[-4]
80022df8:	f0 16 00 cd 	mcall	r6[820]
	putstring(out_stream, ", ");
80022dfc:	fe cb 00 cc 	sub	r11,pc,204
80022e00:	ee fc ff fc 	ld.w	r12,r7[-4]
80022e04:	f0 16 00 32 	mcall	r6[200]
	print_vector(out_stream, quat->v, after_digits);
80022e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022e0c:	2f c8       	sub	r8,-4
80022e0e:	ee fa ff f4 	ld.w	r10,r7[-12]
80022e12:	10 9b       	mov	r11,r8
80022e14:	ee fc ff fc 	ld.w	r12,r7[-4]
80022e18:	f0 16 00 ea 	mcall	r6[936]
	putstring(out_stream, ") ");
80022e1c:	fe cb 00 e8 	sub	r11,pc,232
80022e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80022e24:	f0 16 00 32 	mcall	r6[200]
}
80022e28:	2f dd       	sub	sp,-12
80022e2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e2e:	00 00       	add	r0,r0
80022e30:	80 02       	ld.sh	r2,r0[0x0]
80022e32:	2c 52       	sub	r2,-59

80022e34 <dbg_print>:

void dbg_print(const char* s) {
80022e34:	eb cd 40 c0 	pushm	r6-r7,lr
80022e38:	1a 97       	mov	r7,sp
80022e3a:	20 1d       	sub	sp,4
80022e3c:	48 86       	lddpc	r6,80022e5c <dbg_print+0x28>
80022e3e:	1e 26       	rsub	r6,pc
80022e40:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80022e44:	ec f8 01 94 	ld.w	r8,r6[404]
80022e48:	70 08       	ld.w	r8,r8[0x0]
80022e4a:	ee fb ff fc 	ld.w	r11,r7[-4]
80022e4e:	10 9c       	mov	r12,r8
80022e50:	f0 16 00 32 	mcall	r6[200]

}
80022e54:	2f fd       	sub	sp,-4
80022e56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e5a:	00 00       	add	r0,r0
80022e5c:	80 02       	ld.sh	r2,r0[0x0]
80022e5e:	2c c2       	sub	r2,-52

80022e60 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80022e60:	eb cd 40 c0 	pushm	r6-r7,lr
80022e64:	1a 97       	mov	r7,sp
80022e66:	20 2d       	sub	sp,8
80022e68:	48 b6       	lddpc	r6,80022e94 <dbg_print_num+0x34>
80022e6a:	1e 26       	rsub	r6,pc
80022e6c:	ef 4c ff fc 	st.w	r7[-4],r12
80022e70:	16 98       	mov	r8,r11
80022e72:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80022e76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022e7a:	ec f8 01 94 	ld.w	r8,r6[404]
80022e7e:	70 08       	ld.w	r8,r8[0x0]
80022e80:	12 9a       	mov	r10,r9
80022e82:	ee fb ff fc 	ld.w	r11,r7[-4]
80022e86:	10 9c       	mov	r12,r8
80022e88:	f0 16 00 26 	mcall	r6[152]

}
80022e8c:	2f ed       	sub	sp,-8
80022e8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e92:	00 00       	add	r0,r0
80022e94:	80 02       	ld.sh	r2,r0[0x0]
80022e96:	2c ee       	sub	lr,-50

80022e98 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80022e98:	eb cd 40 c0 	pushm	r6-r7,lr
80022e9c:	1a 97       	mov	r7,sp
80022e9e:	20 2d       	sub	sp,8
80022ea0:	48 a6       	lddpc	r6,80022ec8 <dbg_putfloat+0x30>
80022ea2:	1e 26       	rsub	r6,pc
80022ea4:	ef 4c ff fc 	st.w	r7[-4],r12
80022ea8:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022eac:	ec f8 01 94 	ld.w	r8,r6[404]
80022eb0:	70 08       	ld.w	r8,r8[0x0]
80022eb2:	ee fa ff f8 	ld.w	r10,r7[-8]
80022eb6:	ee fb ff fc 	ld.w	r11,r7[-4]
80022eba:	10 9c       	mov	r12,r8
80022ebc:	f0 16 00 cd 	mcall	r6[820]
}
80022ec0:	2f ed       	sub	sp,-8
80022ec2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ec6:	00 00       	add	r0,r0
80022ec8:	80 02       	ld.sh	r2,r0[0x0]
80022eca:	2d 26       	sub	r6,-46

80022ecc <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022ecc:	eb cd 40 c0 	pushm	r6-r7,lr
80022ed0:	1a 97       	mov	r7,sp
80022ed2:	20 2d       	sub	sp,8
80022ed4:	48 a6       	lddpc	r6,80022efc <dbg_print_vector+0x30>
80022ed6:	1e 26       	rsub	r6,pc
80022ed8:	ef 4c ff fc 	st.w	r7[-4],r12
80022edc:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
80022ee0:	ec f8 01 94 	ld.w	r8,r6[404]
80022ee4:	70 08       	ld.w	r8,r8[0x0]
80022ee6:	ee fa ff f8 	ld.w	r10,r7[-8]
80022eea:	ee fb ff fc 	ld.w	r11,r7[-4]
80022eee:	10 9c       	mov	r12,r8
80022ef0:	f0 16 00 ea 	mcall	r6[936]
}
80022ef4:	2f ed       	sub	sp,-8
80022ef6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022efa:	00 00       	add	r0,r0
80022efc:	80 02       	ld.sh	r2,r0[0x0]
80022efe:	2d 5a       	sub	r10,-43

80022f00 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
80022f00:	eb cd 40 c0 	pushm	r6-r7,lr
80022f04:	1a 97       	mov	r7,sp
80022f06:	20 2d       	sub	sp,8
80022f08:	48 a6       	lddpc	r6,80022f30 <dbg_print_quaternion+0x30>
80022f0a:	1e 26       	rsub	r6,pc
80022f0c:	ef 4c ff fc 	st.w	r7[-4],r12
80022f10:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80022f14:	ec f8 01 94 	ld.w	r8,r6[404]
80022f18:	70 08       	ld.w	r8,r8[0x0]
80022f1a:	ee fa ff f8 	ld.w	r10,r7[-8]
80022f1e:	ee fb ff fc 	ld.w	r11,r7[-4]
80022f22:	10 9c       	mov	r12,r8
80022f24:	f0 16 01 93 	mcall	r6[1612]
}
80022f28:	2f ed       	sub	sp,-8
80022f2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f2e:	00 00       	add	r0,r0
80022f30:	80 02       	ld.sh	r2,r0[0x0]
80022f32:	2d 8e       	sub	lr,-40
80022f34:	0a 00       	add	r0,r5

80022f36 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80022f36:	eb cd 40 c0 	pushm	r6-r7,lr
80022f3a:	1a 97       	mov	r7,sp
80022f3c:	20 3d       	sub	sp,12
80022f3e:	49 26       	lddpc	r6,80022f84 <dbg_log_value+0x4e>
80022f40:	1e 26       	rsub	r6,pc
80022f42:	ef 4c ff fc 	st.w	r7[-4],r12
80022f46:	ef 4b ff f8 	st.w	r7[-8],r11
80022f4a:	14 98       	mov	r8,r10
80022f4c:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80022f50:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f54:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80022f58:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022f5c:	30 18       	mov	r8,1
80022f5e:	f0 09 18 00 	cp.b	r9,r8
80022f62:	e0 88 00 09 	brls	80022f74 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80022f66:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022f6a:	10 9b       	mov	r11,r8
80022f6c:	ee fc ff f8 	ld.w	r12,r7[-8]
80022f70:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80022f74:	fe cc 00 40 	sub	r12,pc,64
80022f78:	f0 16 00 01 	mcall	r6[4]

}
80022f7c:	2f dd       	sub	sp,-12
80022f7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f82:	00 00       	add	r0,r0
80022f84:	80 02       	ld.sh	r2,r0[0x0]
80022f86:	2d c4       	sub	r4,-36

80022f88 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
80022f88:	eb cd 40 80 	pushm	r7,lr
80022f8c:	1a 97       	mov	r7,sp
80022f8e:	20 6d       	sub	sp,24
80022f90:	ef 4c ff ec 	st.w	r7[-20],r12
80022f94:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
80022f98:	e0 68 02 04 	mov	r8,516
80022f9c:	ea 18 80 80 	orh	r8,0x8080
80022fa0:	70 08       	ld.w	r8,r8[0x0]
80022fa2:	e6 18 3f 00 	andh	r8,0x3f00,COH
80022fa6:	b9 48       	asr	r8,0x18
80022fa8:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
80022fac:	e0 68 02 04 	mov	r8,516
80022fb0:	ea 18 80 80 	orh	r8,0x8080
80022fb4:	70 08       	ld.w	r8,r8[0x0]
80022fb6:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80022fba:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
80022fbe:	e0 68 02 08 	mov	r8,520
80022fc2:	ea 18 80 80 	orh	r8,0x8080
80022fc6:	70 08       	ld.w	r8,r8[0x0]
80022fc8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80022fcc:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
80022fd0:	e0 68 02 08 	mov	r8,520
80022fd4:	ea 18 80 80 	orh	r8,0x8080
80022fd8:	70 08       	ld.w	r8,r8[0x0]
80022fda:	e6 18 03 ff 	andh	r8,0x3ff,COH
80022fde:	b1 48       	asr	r8,0x10
80022fe0:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80022fe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022fe8:	5c 88       	casts.h	r8
80022fea:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022fee:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
80022ff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022ff4:	5c 88       	casts.h	r8
80022ff6:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022ffa:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80022ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023000:	5c 88       	casts.h	r8
80023002:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023006:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80023008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002300c:	5c 88       	casts.h	r8
8002300e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023012:	f3 58 00 10 	st.h	r9[16],r8
}
80023016:	2f ad       	sub	sp,-24
80023018:	e3 cd 80 80 	ldm	sp++,r7,pc

8002301c <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
8002301c:	eb cd 40 80 	pushm	r7,lr
80023020:	1a 97       	mov	r7,sp
80023022:	20 3d       	sub	sp,12
80023024:	ef 4c ff fc 	st.w	r7[-4],r12
80023028:	ef 4b ff f8 	st.w	r7[-8],r11
8002302c:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80023030:	fc 7a 24 00 	mov	r10,-187392
80023034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023038:	f1 38 00 08 	ld.ub	r8,r8[8]
8002303c:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
80023040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023044:	11 e8       	ld.ub	r8,r8[0x6]
80023046:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
80023048:	10 49       	or	r9,r8
8002304a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002304e:	11 f8       	ld.ub	r8,r8[0x7]
80023050:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
80023052:	10 49       	or	r9,r8
80023054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023058:	11 c8       	ld.ub	r8,r8[0x4]
8002305a:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
8002305c:	10 49       	or	r9,r8
8002305e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023062:	11 d8       	ld.ub	r8,r8[0x5]
80023064:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80023066:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
8002306a:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
8002306c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023070:	70 09       	ld.w	r9,r8[0x0]
80023072:	e0 68 4d d3 	mov	r8,19923
80023076:	ea 18 10 62 	orh	r8,0x1062
8002307a:	f2 08 06 48 	mulu.d	r8,r9,r8
8002307e:	a7 89       	lsr	r9,0x6
80023080:	e0 68 03 e8 	mov	r8,1000
80023084:	b1 39       	mul	r9,r8
80023086:	e0 68 4d d3 	mov	r8,19923
8002308a:	ea 18 10 62 	orh	r8,0x1062
8002308e:	f2 08 06 48 	mulu.d	r8,r9,r8
80023092:	f2 08 16 0b 	lsr	r8,r9,0xb
80023096:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80023098:	f7 e8 10 08 	or	r8,r11,r8
8002309c:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
8002309e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800230a2:	70 08       	ld.w	r8,r8[0x0]
800230a4:	f0 09 15 01 	lsl	r9,r8,0x1
800230a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800230ac:	f0 09 0d 08 	divu	r8,r8,r9
800230b0:	20 18       	sub	r8,1
800230b2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800230b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800230ba:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800230be:	fc 78 24 00 	mov	r8,-187392
800230c2:	fc 79 24 00 	mov	r9,-187392
800230c6:	73 aa       	ld.w	r10,r9[0x68]
800230c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800230cc:	92 69       	ld.sh	r9,r9[0xc]
800230ce:	b9 69       	lsl	r9,0x18
800230d0:	e6 19 3f 00 	andh	r9,0x3f00,COH
800230d4:	f5 e9 10 09 	or	r9,r10,r9
800230d8:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800230dc:	fc 78 24 00 	mov	r8,-187392
800230e0:	fc 79 24 00 	mov	r9,-187392
800230e4:	73 aa       	ld.w	r10,r9[0x68]
800230e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800230ea:	92 59       	ld.sh	r9,r9[0xa]
800230ec:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
800230f0:	f5 e9 10 09 	or	r9,r10,r9
800230f4:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
800230f8:	fc 78 24 00 	mov	r8,-187392
800230fc:	fc 79 24 00 	mov	r9,-187392
80023100:	73 ba       	ld.w	r10,r9[0x6c]
80023102:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023106:	92 79       	ld.sh	r9,r9[0xe]
80023108:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
8002310c:	f5 e9 10 09 	or	r9,r10,r9
80023110:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80023114:	fc 78 24 00 	mov	r8,-187392
80023118:	fc 79 24 00 	mov	r9,-187392
8002311c:	73 ba       	ld.w	r10,r9[0x6c]
8002311e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023122:	f3 09 00 10 	ld.sh	r9,r9[16]
80023126:	b1 69       	lsl	r9,0x10
80023128:	e6 19 03 ff 	andh	r9,0x3ff,COH
8002312c:	f5 e9 10 09 	or	r9,r10,r9
80023130:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
80023134:	fc 78 24 00 	mov	r8,-187392
80023138:	fc 79 24 00 	mov	r9,-187392
8002313c:	72 19       	ld.w	r9,r9[0x4]
8002313e:	a1 a9       	sbr	r9,0x0
80023140:	91 19       	st.w	r8[0x4],r9
80023142:	c0 28       	rjmp	80023146 <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
80023144:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
80023146:	fc 78 24 00 	mov	r8,-187392
8002314a:	70 28       	ld.w	r8,r8[0x8]
8002314c:	e2 18 40 00 	andl	r8,0x4000,COH
80023150:	cf a0       	breq	80023144 <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80023152:	30 18       	mov	r8,1
}
80023154:	10 9c       	mov	r12,r8
80023156:	2f dd       	sub	sp,-12
80023158:	e3 cd 80 80 	ldm	sp++,r7,pc

8002315c <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
8002315c:	eb cd 40 80 	pushm	r7,lr
80023160:	1a 97       	mov	r7,sp
80023162:	20 bd       	sub	sp,44
80023164:	ef 4c ff e0 	st.w	r7[-32],r12
80023168:	16 98       	mov	r8,r11
8002316a:	ef 4a ff d8 	st.w	r7[-40],r10
8002316e:	ef 49 ff d4 	st.w	r7[-44],r9
80023172:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
80023176:	30 08       	mov	r8,0
80023178:	30 09       	mov	r9,0
8002317a:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
8002317e:	30 08       	mov	r8,0
80023180:	30 09       	mov	r9,0
80023182:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
80023186:	30 08       	mov	r8,0
80023188:	30 09       	mov	r9,0
8002318a:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
8002318e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80023192:	58 08       	cp.w	r8,0
80023194:	c0 60       	breq	800231a0 <adcifa_configure_sequencer+0x44>
80023196:	58 18       	cp.w	r8,1
80023198:	e0 80 00 ed 	breq	80023372 <adcifa_configure_sequencer+0x216>
8002319c:	e0 8f 01 d7 	bral	8002354a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
800231a0:	fc 78 24 00 	mov	r8,-187392
800231a4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231a8:	13 89       	ld.ub	r9,r9[0x0]
800231aa:	20 19       	sub	r9,1
800231ac:	f2 0a 15 10 	lsl	r10,r9,0x10
800231b0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231b4:	13 99       	ld.ub	r9,r9[0x1]
800231b6:	ad 69       	lsl	r9,0xc
800231b8:	12 4a       	or	r10,r9
800231ba:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231be:	13 a9       	ld.ub	r9,r9[0x2]
800231c0:	a9 69       	lsl	r9,0x8
800231c2:	12 4a       	or	r10,r9
800231c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231c8:	13 b9       	ld.ub	r9,r9[0x3]
800231ca:	a3 69       	lsl	r9,0x2
800231cc:	12 4a       	or	r10,r9
800231ce:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231d2:	13 c9       	ld.ub	r9,r9[0x4]
800231d4:	a3 79       	lsl	r9,0x3
800231d6:	12 4a       	or	r10,r9
800231d8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231dc:	13 d9       	ld.ub	r9,r9[0x5]
800231de:	a1 79       	lsl	r9,0x1
800231e0:	12 4a       	or	r10,r9
800231e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800231e6:	13 e9       	ld.ub	r9,r9[0x6]
800231e8:	f5 e9 10 09 	or	r9,r10,r9
800231ec:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800231ee:	30 08       	mov	r8,0
800231f0:	ef 68 ff ff 	st.b	r7[-1],r8
800231f4:	c1 68       	rjmp	80023220 <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800231f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800231fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800231fe:	12 98       	mov	r8,r9
80023200:	a1 78       	lsl	r8,0x1
80023202:	12 08       	add	r8,r9
80023204:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023208:	f2 08 00 08 	add	r8,r9,r8
8002320c:	11 a8       	ld.ub	r8,r8[0x2]
8002320e:	ee 0a 00 09 	add	r9,r7,r10
80023212:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80023216:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002321a:	2f f8       	sub	r8,-1
8002321c:	ef 68 ff ff 	st.b	r7[-1],r8
80023220:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023224:	11 88       	ld.ub	r8,r8[0x0]
80023226:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002322a:	f0 09 18 00 	cp.b	r9,r8
8002322e:	ce 43       	brcs	800231f6 <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023230:	fc 78 24 00 	mov	r8,-187392
80023234:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023238:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8002323c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023240:	b9 69       	lsl	r9,0x18
80023242:	12 4a       	or	r10,r9
80023244:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023248:	b5 69       	lsl	r9,0x14
8002324a:	12 4a       	or	r10,r9
8002324c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023250:	b1 69       	lsl	r9,0x10
80023252:	12 4a       	or	r10,r9
80023254:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023258:	ad 69       	lsl	r9,0xc
8002325a:	12 4a       	or	r10,r9
8002325c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023260:	a9 69       	lsl	r9,0x8
80023262:	12 4a       	or	r10,r9
80023264:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023268:	a5 69       	lsl	r9,0x4
8002326a:	12 4a       	or	r10,r9
8002326c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023270:	f5 e9 10 09 	or	r9,r10,r9
80023274:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023276:	30 08       	mov	r8,0
80023278:	ef 68 ff ff 	st.b	r7[-1],r8
8002327c:	c2 68       	rjmp	800232c8 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8002327e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023282:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023286:	12 98       	mov	r8,r9
80023288:	a1 78       	lsl	r8,0x1
8002328a:	12 08       	add	r8,r9
8002328c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023290:	f2 08 00 08 	add	r8,r9,r8
80023294:	11 88       	ld.ub	r8,r8[0x0]
80023296:	ee 0a 00 09 	add	r9,r7,r10
8002329a:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8002329e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800232a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800232a6:	12 98       	mov	r8,r9
800232a8:	a1 78       	lsl	r8,0x1
800232aa:	12 08       	add	r8,r9
800232ac:	ee f9 ff d4 	ld.w	r9,r7[-44]
800232b0:	f2 08 00 08 	add	r8,r9,r8
800232b4:	11 98       	ld.ub	r8,r8[0x1]
800232b6:	ee 0a 00 09 	add	r9,r7,r10
800232ba:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800232be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800232c2:	2f f8       	sub	r8,-1
800232c4:	ef 68 ff ff 	st.b	r7[-1],r8
800232c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800232cc:	11 88       	ld.ub	r8,r8[0x0]
800232ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800232d2:	f0 09 18 00 	cp.b	r9,r8
800232d6:	cd 43       	brcs	8002327e <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800232d8:	fc 78 24 00 	mov	r8,-187392
800232dc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800232e0:	f2 0a 15 18 	lsl	r10,r9,0x18
800232e4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800232e8:	b1 69       	lsl	r9,0x10
800232ea:	12 4a       	or	r10,r9
800232ec:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800232f0:	a9 69       	lsl	r9,0x8
800232f2:	12 4a       	or	r10,r9
800232f4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800232f8:	f5 e9 10 09 	or	r9,r10,r9
800232fc:	91 b9       	st.w	r8[0x2c],r9
800232fe:	fc 78 24 00 	mov	r8,-187392
80023302:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80023306:	f2 0a 15 18 	lsl	r10,r9,0x18
8002330a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002330e:	b1 69       	lsl	r9,0x10
80023310:	12 4a       	or	r10,r9
80023312:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023316:	a9 69       	lsl	r9,0x8
80023318:	12 4a       	or	r10,r9
8002331a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002331e:	f5 e9 10 09 	or	r9,r10,r9
80023322:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80023324:	fc 78 24 00 	mov	r8,-187392
80023328:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8002332c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023330:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023334:	b1 69       	lsl	r9,0x10
80023336:	12 4a       	or	r10,r9
80023338:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8002333c:	a9 69       	lsl	r9,0x8
8002333e:	12 4a       	or	r10,r9
80023340:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023344:	f5 e9 10 09 	or	r9,r10,r9
80023348:	91 f9       	st.w	r8[0x3c],r9
8002334a:	fc 78 24 00 	mov	r8,-187392
8002334e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023352:	f2 0a 15 18 	lsl	r10,r9,0x18
80023356:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002335a:	b1 69       	lsl	r9,0x10
8002335c:	12 4a       	or	r10,r9
8002335e:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023362:	a9 69       	lsl	r9,0x8
80023364:	12 4a       	or	r10,r9
80023366:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002336a:	f5 e9 10 09 	or	r9,r10,r9
8002336e:	91 d9       	st.w	r8[0x34],r9
		break;
80023370:	ce d8       	rjmp	8002354a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
80023372:	fc 78 24 00 	mov	r8,-187392
80023376:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002337a:	13 89       	ld.ub	r9,r9[0x0]
8002337c:	20 19       	sub	r9,1
8002337e:	f2 0a 15 10 	lsl	r10,r9,0x10
80023382:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023386:	13 99       	ld.ub	r9,r9[0x1]
80023388:	ad 69       	lsl	r9,0xc
8002338a:	12 4a       	or	r10,r9
8002338c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023390:	13 a9       	ld.ub	r9,r9[0x2]
80023392:	a9 69       	lsl	r9,0x8
80023394:	12 4a       	or	r10,r9
80023396:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002339a:	13 b9       	ld.ub	r9,r9[0x3]
8002339c:	a3 69       	lsl	r9,0x2
8002339e:	12 4a       	or	r10,r9
800233a0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800233a4:	13 c9       	ld.ub	r9,r9[0x4]
800233a6:	a3 79       	lsl	r9,0x3
800233a8:	12 4a       	or	r10,r9
800233aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800233ae:	13 d9       	ld.ub	r9,r9[0x5]
800233b0:	a1 79       	lsl	r9,0x1
800233b2:	f5 e9 10 09 	or	r9,r10,r9
800233b6:	12 9a       	mov	r10,r9
800233b8:	a5 aa       	sbr	r10,0x4
800233ba:	ee f9 ff d8 	ld.w	r9,r7[-40]
800233be:	13 e9       	ld.ub	r9,r9[0x6]
800233c0:	f5 e9 10 09 	or	r9,r10,r9
800233c4:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800233c6:	30 08       	mov	r8,0
800233c8:	ef 68 ff ff 	st.b	r7[-1],r8
800233cc:	c1 68       	rjmp	800233f8 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800233ce:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800233d2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233d6:	12 98       	mov	r8,r9
800233d8:	a1 78       	lsl	r8,0x1
800233da:	12 08       	add	r8,r9
800233dc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800233e0:	f2 08 00 08 	add	r8,r9,r8
800233e4:	11 a8       	ld.ub	r8,r8[0x2]
800233e6:	ee 0a 00 09 	add	r9,r7,r10
800233ea:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800233ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233f2:	2f f8       	sub	r8,-1
800233f4:	ef 68 ff ff 	st.b	r7[-1],r8
800233f8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800233fc:	11 88       	ld.ub	r8,r8[0x0]
800233fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023402:	f0 09 18 00 	cp.b	r9,r8
80023406:	ce 43       	brcs	800233ce <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023408:	fc 78 24 00 	mov	r8,-187392
8002340c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023410:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80023414:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023418:	b9 69       	lsl	r9,0x18
8002341a:	12 4a       	or	r10,r9
8002341c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023420:	b5 69       	lsl	r9,0x14
80023422:	12 4a       	or	r10,r9
80023424:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023428:	b1 69       	lsl	r9,0x10
8002342a:	12 4a       	or	r10,r9
8002342c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023430:	ad 69       	lsl	r9,0xc
80023432:	12 4a       	or	r10,r9
80023434:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023438:	a9 69       	lsl	r9,0x8
8002343a:	12 4a       	or	r10,r9
8002343c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023440:	a5 69       	lsl	r9,0x4
80023442:	12 4a       	or	r10,r9
80023444:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023448:	f5 e9 10 09 	or	r9,r10,r9
8002344c:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
8002344e:	30 08       	mov	r8,0
80023450:	ef 68 ff ff 	st.b	r7[-1],r8
80023454:	c2 68       	rjmp	800234a0 <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80023456:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002345a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002345e:	12 98       	mov	r8,r9
80023460:	a1 78       	lsl	r8,0x1
80023462:	12 08       	add	r8,r9
80023464:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023468:	f2 08 00 08 	add	r8,r9,r8
8002346c:	11 88       	ld.ub	r8,r8[0x0]
8002346e:	ee 0a 00 09 	add	r9,r7,r10
80023472:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80023476:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002347a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002347e:	12 98       	mov	r8,r9
80023480:	a1 78       	lsl	r8,0x1
80023482:	12 08       	add	r8,r9
80023484:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023488:	f2 08 00 08 	add	r8,r9,r8
8002348c:	11 98       	ld.ub	r8,r8[0x1]
8002348e:	ee 0a 00 09 	add	r9,r7,r10
80023492:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
80023496:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002349a:	2f f8       	sub	r8,-1
8002349c:	ef 68 ff ff 	st.b	r7[-1],r8
800234a0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800234a4:	11 88       	ld.ub	r8,r8[0x0]
800234a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800234aa:	f0 09 18 00 	cp.b	r9,r8
800234ae:	cd 43       	brcs	80023456 <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800234b0:	fc 78 24 00 	mov	r8,-187392
800234b4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800234b8:	f2 0a 15 18 	lsl	r10,r9,0x18
800234bc:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800234c0:	b1 69       	lsl	r9,0x10
800234c2:	12 4a       	or	r10,r9
800234c4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800234c8:	a9 69       	lsl	r9,0x8
800234ca:	12 4a       	or	r10,r9
800234cc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800234d0:	f5 e9 10 09 	or	r9,r10,r9
800234d4:	91 c9       	st.w	r8[0x30],r9
800234d6:	fc 78 24 00 	mov	r8,-187392
800234da:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800234de:	f2 0a 15 18 	lsl	r10,r9,0x18
800234e2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800234e6:	b1 69       	lsl	r9,0x10
800234e8:	12 4a       	or	r10,r9
800234ea:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800234ee:	a9 69       	lsl	r9,0x8
800234f0:	12 4a       	or	r10,r9
800234f2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800234f6:	f5 e9 10 09 	or	r9,r10,r9
800234fa:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
800234fc:	fc 78 24 00 	mov	r8,-187392
80023500:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80023504:	f2 0a 15 18 	lsl	r10,r9,0x18
80023508:	ef 39 ff ea 	ld.ub	r9,r7[-22]
8002350c:	b1 69       	lsl	r9,0x10
8002350e:	12 4a       	or	r10,r9
80023510:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80023514:	a9 69       	lsl	r9,0x8
80023516:	12 4a       	or	r10,r9
80023518:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8002351c:	f5 e9 10 09 	or	r9,r10,r9
80023520:	f1 49 00 40 	st.w	r8[64],r9
80023524:	fc 78 24 00 	mov	r8,-187392
80023528:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002352c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023530:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80023534:	b1 69       	lsl	r9,0x10
80023536:	12 4a       	or	r10,r9
80023538:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8002353c:	a9 69       	lsl	r9,0x8
8002353e:	12 4a       	or	r10,r9
80023540:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023544:	f5 e9 10 09 	or	r9,r10,r9
80023548:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
8002354a:	30 18       	mov	r8,1
}
8002354c:	10 9c       	mov	r12,r8
8002354e:	2f 5d       	sub	sp,-44
80023550:	e3 cd 80 80 	ldm	sp++,r7,pc

80023554 <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
80023554:	eb cd 40 80 	pushm	r7,lr
80023558:	1a 97       	mov	r7,sp
8002355a:	20 4d       	sub	sp,16
8002355c:	ef 4c ff f8 	st.w	r7[-8],r12
80023560:	16 98       	mov	r8,r11
80023562:	ef 4a ff f0 	st.w	r7[-16],r10
80023566:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
8002356a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002356e:	58 08       	cp.w	r8,0
80023570:	c0 40       	breq	80023578 <adcifa_configure_window_monitor+0x24>
80023572:	58 18       	cp.w	r8,1
80023574:	c3 d0       	breq	800235ee <adcifa_configure_window_monitor+0x9a>
80023576:	c7 68       	rjmp	80023662 <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
80023578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002357c:	71 e8       	ld.w	r8,r8[0x78]
8002357e:	e2 18 04 00 	andl	r8,0x400,COH
80023582:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
80023586:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002358a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002358e:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
80023592:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023596:	11 98       	ld.ub	r8,r8[0x1]
80023598:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
8002359c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235a0:	90 28       	ld.sh	r8,r8[0x4]
800235a2:	5c 78       	castu.h	r8
800235a4:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
800235a6:	10 49       	or	r9,r8
800235a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235ac:	90 18       	ld.sh	r8,r8[0x2]
800235ae:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800235b0:	f3 e8 10 08 	or	r8,r9,r8
800235b4:	10 99       	mov	r9,r8
800235b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235ba:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
800235be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235c2:	e0 69 04 00 	mov	r9,1024
800235c6:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
800235c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235cc:	71 69       	ld.w	r9,r8[0x58]
800235ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235d2:	11 88       	ld.ub	r8,r8[0x0]
800235d4:	b9 68       	lsl	r8,0x18
800235d6:	10 49       	or	r9,r8
800235d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235dc:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
800235e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800235e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235e8:	f1 49 00 70 	st.w	r8[112],r9
		break;
800235ec:	c3 b8       	rjmp	80023662 <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
800235ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235f2:	71 e8       	ld.w	r8,r8[0x78]
800235f4:	e2 18 08 00 	andl	r8,0x800,COH
800235f8:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800235fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023600:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023604:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023608:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002360c:	11 98       	ld.ub	r8,r8[0x1]
8002360e:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
80023612:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023616:	90 28       	ld.sh	r8,r8[0x4]
80023618:	5c 78       	castu.h	r8
8002361a:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
8002361c:	10 49       	or	r9,r8
8002361e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023622:	90 18       	ld.sh	r8,r8[0x2]
80023624:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023626:	f3 e8 10 08 	or	r8,r9,r8
8002362a:	10 99       	mov	r9,r8
8002362c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023630:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
80023634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023638:	e0 69 08 00 	mov	r9,2048
8002363c:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
8002363e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023642:	71 79       	ld.w	r9,r8[0x5c]
80023644:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023648:	11 88       	ld.ub	r8,r8[0x0]
8002364a:	b9 68       	lsl	r8,0x18
8002364c:	10 49       	or	r9,r8
8002364e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023652:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023656:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002365a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002365e:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
80023662:	2f cd       	sub	sp,-16
80023664:	e3 cd 80 80 	ldm	sp++,r7,pc

80023668 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023668:	eb cd 40 80 	pushm	r7,lr
8002366c:	1a 97       	mov	r7,sp
8002366e:	20 2d       	sub	sp,8
80023670:	ef 4c ff fc 	st.w	r7[-4],r12
80023674:	16 98       	mov	r8,r11
80023676:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
8002367a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002367e:	58 18       	cp.w	r8,1
80023680:	c0 a0       	breq	80023694 <adcifa_start_sequencer+0x2c>
80023682:	58 38       	cp.w	r8,3
80023684:	c0 d0       	breq	8002369e <adcifa_start_sequencer+0x36>
80023686:	58 08       	cp.w	r8,0
80023688:	c0 f1       	brne	800236a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
8002368a:	fc 78 24 00 	mov	r8,-187392
8002368e:	30 19       	mov	r9,1
80023690:	91 09       	st.w	r8[0x0],r9
		break;
80023692:	c0 a8       	rjmp	800236a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80023694:	fc 78 24 00 	mov	r8,-187392
80023698:	30 29       	mov	r9,2
8002369a:	91 09       	st.w	r8[0x0],r9
		break;
8002369c:	c0 58       	rjmp	800236a6 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
8002369e:	fc 78 24 00 	mov	r8,-187392
800236a2:	30 39       	mov	r9,3
800236a4:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
800236a6:	2f ed       	sub	sp,-8
800236a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800236ac <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800236ac:	eb cd 40 80 	pushm	r7,lr
800236b0:	1a 97       	mov	r7,sp
800236b2:	20 2d       	sub	sp,8
800236b4:	ef 4c ff fc 	st.w	r7[-4],r12
800236b8:	16 98       	mov	r8,r11
800236ba:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
800236be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800236c2:	58 08       	cp.w	r8,0
800236c4:	c0 40       	breq	800236cc <adcifa_check_eoc+0x20>
800236c6:	58 18       	cp.w	r8,1
800236c8:	c0 a0       	breq	800236dc <adcifa_check_eoc+0x30>
800236ca:	c1 18       	rjmp	800236ec <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
800236cc:	fc 78 24 00 	mov	r8,-187392
800236d0:	70 28       	ld.w	r8,r8[0x8]
800236d2:	e2 18 00 02 	andl	r8,0x2,COH
800236d6:	5f 18       	srne	r8
800236d8:	5c 58       	castu.b	r8
800236da:	c0 a8       	rjmp	800236ee <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
800236dc:	fc 78 24 00 	mov	r8,-187392
800236e0:	70 28       	ld.w	r8,r8[0x8]
800236e2:	e2 18 00 20 	andl	r8,0x20,COH
800236e6:	5f 18       	srne	r8
800236e8:	5c 58       	castu.b	r8
800236ea:	c0 28       	rjmp	800236ee <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
800236ec:	30 08       	mov	r8,0
}
800236ee:	10 9c       	mov	r12,r8
800236f0:	2f ed       	sub	sp,-8
800236f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800236f6 <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800236f6:	eb cd 40 80 	pushm	r7,lr
800236fa:	1a 97       	mov	r7,sp
800236fc:	20 2d       	sub	sp,8
800236fe:	ef 4c ff fc 	st.w	r7[-4],r12
80023702:	16 98       	mov	r8,r11
80023704:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80023708:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002370c:	58 08       	cp.w	r8,0
8002370e:	c0 40       	breq	80023716 <adcifa_check_eos+0x20>
80023710:	58 18       	cp.w	r8,1
80023712:	c0 90       	breq	80023724 <adcifa_check_eos+0x2e>
80023714:	c1 08       	rjmp	80023734 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80023716:	fc 78 24 00 	mov	r8,-187392
8002371a:	70 28       	ld.w	r8,r8[0x8]
8002371c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023720:	5c 58       	castu.b	r8
80023722:	c0 a8       	rjmp	80023736 <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80023724:	fc 78 24 00 	mov	r8,-187392
80023728:	70 28       	ld.w	r8,r8[0x8]
8002372a:	e2 18 00 10 	andl	r8,0x10,COH
8002372e:	5f 18       	srne	r8
80023730:	5c 58       	castu.b	r8
80023732:	c0 28       	rjmp	80023736 <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
80023734:	30 08       	mov	r8,0
}
80023736:	10 9c       	mov	r12,r8
80023738:	2f ed       	sub	sp,-8
8002373a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002373e <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
8002373e:	eb cd 40 c0 	pushm	r6-r7,lr
80023742:	1a 97       	mov	r7,sp
80023744:	20 5d       	sub	sp,20
80023746:	4b 46       	lddpc	r6,80023814 <adcifa_get_values_from_sequencer+0xd6>
80023748:	1e 26       	rsub	r6,pc
8002374a:	ef 4c ff f8 	st.w	r7[-8],r12
8002374e:	16 98       	mov	r8,r11
80023750:	ef 4a ff f0 	st.w	r7[-16],r10
80023754:	ef 49 ff ec 	st.w	r7[-20],r9
80023758:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
8002375c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023760:	10 9b       	mov	r11,r8
80023762:	ee fc ff f8 	ld.w	r12,r7[-8]
80023766:	f0 16 01 32 	mcall	r6[1224]
8002376a:	18 98       	mov	r8,r12
8002376c:	ec 18 00 01 	eorl	r8,0x1
80023770:	5c 58       	castu.b	r8
80023772:	c0 30       	breq	80023778 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
80023774:	30 38       	mov	r8,3
80023776:	c4 b8       	rjmp	8002380c <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
80023778:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002377c:	58 08       	cp.w	r8,0
8002377e:	c0 40       	breq	80023786 <adcifa_get_values_from_sequencer+0x48>
80023780:	58 18       	cp.w	r8,1
80023782:	c2 30       	breq	800237c8 <adcifa_get_values_from_sequencer+0x8a>
80023784:	c4 38       	rjmp	8002380a <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023786:	30 08       	mov	r8,0
80023788:	ef 68 ff ff 	st.b	r7[-1],r8
8002378c:	c1 58       	rjmp	800237b6 <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
8002378e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023792:	a1 78       	lsl	r8,0x1
80023794:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023798:	10 09       	add	r9,r8
8002379a:	fc 78 24 00 	mov	r8,-187392
8002379e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800237a2:	2d fa       	sub	r10,-33
800237a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800237a8:	5c 88       	casts.h	r8
800237aa:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800237ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800237b0:	2f f8       	sub	r8,-1
800237b2:	ef 68 ff ff 	st.b	r7[-1],r8
800237b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237ba:	11 88       	ld.ub	r8,r8[0x0]
800237bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800237c0:	f0 09 18 00 	cp.b	r9,r8
800237c4:	ce 53       	brcs	8002378e <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
800237c6:	c2 28       	rjmp	8002380a <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800237c8:	30 08       	mov	r8,0
800237ca:	ef 68 ff ff 	st.b	r7[-1],r8
800237ce:	c1 68       	rjmp	800237fa <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
800237d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800237d4:	a1 78       	lsl	r8,0x1
800237d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800237da:	10 09       	add	r9,r8
800237dc:	fc 78 24 00 	mov	r8,-187392
800237e0:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800237e4:	2f 8a       	sub	r10,-8
800237e6:	2d fa       	sub	r10,-33
800237e8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800237ec:	5c 88       	casts.h	r8
800237ee:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800237f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800237f4:	2f f8       	sub	r8,-1
800237f6:	ef 68 ff ff 	st.b	r7[-1],r8
800237fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237fe:	11 88       	ld.ub	r8,r8[0x0]
80023800:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023804:	f0 09 18 00 	cp.b	r9,r8
80023808:	ce 43       	brcs	800237d0 <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
8002380a:	30 28       	mov	r8,2
}
8002380c:	10 9c       	mov	r12,r8
8002380e:	2f bd       	sub	sp,-20
80023810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023814:	80 02       	ld.sh	r2,r0[0x0]
80023816:	35 cc       	mov	r12,92

80023818 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80023818:	eb cd 40 80 	pushm	r7,lr
8002381c:	1a 97       	mov	r7,sp
8002381e:	20 2d       	sub	sp,8
80023820:	ef 4c ff fc 	st.w	r7[-4],r12
80023824:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80023828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002382c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023830:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80023834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023838:	30 89       	mov	r9,8
8002383a:	91 09       	st.w	r8[0x0],r9
}
8002383c:	2f ed       	sub	sp,-8
8002383e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023842 <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
80023842:	eb cd 40 80 	pushm	r7,lr
80023846:	1a 97       	mov	r7,sp
80023848:	20 1d       	sub	sp,4
8002384a:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
8002384e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023852:	30 49       	mov	r9,4
80023854:	91 09       	st.w	r8[0x0],r9
}
80023856:	2f fd       	sub	sp,-4
80023858:	e3 cd 80 80 	ldm	sp++,r7,pc

8002385c <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
8002385c:	eb cd 40 80 	pushm	r7,lr
80023860:	1a 97       	mov	r7,sp
80023862:	20 2d       	sub	sp,8
80023864:	ef 4c ff fc 	st.w	r7[-4],r12
80023868:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
8002386c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023874:	f1 49 00 70 	st.w	r8[112],r9
}
80023878:	2f ed       	sub	sp,-8
8002387a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002387e <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
8002387e:	eb cd 40 80 	pushm	r7,lr
80023882:	1a 97       	mov	r7,sp
80023884:	20 2d       	sub	sp,8
80023886:	ef 4c ff fc 	st.w	r7[-4],r12
8002388a:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
8002388e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023892:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023896:	f1 49 00 74 	st.w	r8[116],r9
}
8002389a:	2f ed       	sub	sp,-8
8002389c:	e3 cd 80 80 	ldm	sp++,r7,pc

800238a0 <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
800238a0:	eb cd 40 80 	pushm	r7,lr
800238a4:	1a 97       	mov	r7,sp
800238a6:	20 2d       	sub	sp,8
800238a8:	ef 4c ff fc 	st.w	r7[-4],r12
800238ac:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
800238b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800238b8:	91 39       	st.w	r8[0xc],r9
}
800238ba:	2f ed       	sub	sp,-8
800238bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800238c0 <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
800238c0:	eb cd 40 80 	pushm	r7,lr
800238c4:	1a 97       	mov	r7,sp
800238c6:	20 1d       	sub	sp,4
800238c8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
800238cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238d0:	70 28       	ld.w	r8,r8[0x8]
800238d2:	e6 18 01 00 	andh	r8,0x100,COH
800238d6:	5f 18       	srne	r8
}
800238d8:	10 9c       	mov	r12,r8
800238da:	2f fd       	sub	sp,-4
800238dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800238e0 <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
800238e0:	eb cd 40 80 	pushm	r7,lr
800238e4:	1a 97       	mov	r7,sp
800238e6:	20 1d       	sub	sp,4
800238e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
800238ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238f0:	70 28       	ld.w	r8,r8[0x8]
800238f2:	e6 18 10 00 	andh	r8,0x1000,COH
800238f6:	5f 18       	srne	r8
}
800238f8:	10 9c       	mov	r12,r8
800238fa:	2f fd       	sub	sp,-4
800238fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023900 <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80023900:	eb cd 40 c0 	pushm	r6-r7,lr
80023904:	1a 97       	mov	r7,sp
80023906:	20 4d       	sub	sp,16
80023908:	49 a6       	lddpc	r6,80023970 <ast_init_calendar+0x70>
8002390a:	1e 26       	rsub	r6,pc
8002390c:	ef 4c ff fc 	st.w	r7[-4],r12
80023910:	14 98       	mov	r8,r10
80023912:	ef 49 ff f0 	st.w	r7[-16],r9
80023916:	16 99       	mov	r9,r11
80023918:	ef 69 ff f8 	st.b	r7[-8],r9
8002391c:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80023920:	ee fc ff fc 	ld.w	r12,r7[-4]
80023924:	cd ef       	rcall	800238e0 <ast_is_clkbusy>
80023926:	18 98       	mov	r8,r12
80023928:	58 08       	cp.w	r8,0
8002392a:	cf b1       	brne	80023920 <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
8002392c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023930:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023932:	a1 a8       	sbr	r8,0x0
80023934:	10 99       	mov	r9,r8
80023936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002393a:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
8002393e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023942:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
80023944:	a3 a8       	sbr	r8,0x2
80023946:	10 99       	mov	r9,r8
80023948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002394c:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
8002394e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023952:	cb 7f       	rcall	800238c0 <ast_is_busy>
80023954:	18 98       	mov	r8,r12
80023956:	58 08       	cp.w	r8,0
80023958:	cf b1       	brne	8002394e <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
8002395a:	ee fb ff f0 	ld.w	r11,r7[-16]
8002395e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023962:	f0 16 01 bf 	mcall	r6[1788]

	return 1;
80023966:	30 18       	mov	r8,1
}
80023968:	10 9c       	mov	r12,r8
8002396a:	2f cd       	sub	sp,-16
8002396c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023970:	80 02       	ld.sh	r2,r0[0x0]
80023972:	37 8e       	mov	lr,120

80023974 <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
80023974:	eb cd 40 c0 	pushm	r6-r7,lr
80023978:	1a 97       	mov	r7,sp
8002397a:	20 4d       	sub	sp,16
8002397c:	49 46       	lddpc	r6,800239cc <ast_init_counter+0x58>
8002397e:	1e 26       	rsub	r6,pc
80023980:	ef 4c ff fc 	st.w	r7[-4],r12
80023984:	14 98       	mov	r8,r10
80023986:	ef 49 ff f0 	st.w	r7[-16],r9
8002398a:	16 99       	mov	r9,r11
8002398c:	ef 69 ff f8 	st.b	r7[-8],r9
80023990:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023994:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023998:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
8002399a:	a1 a8       	sbr	r8,0x0
8002399c:	10 99       	mov	r9,r8
8002399e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239a2:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
800239a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800239aa:	b1 68       	lsl	r8,0x10
800239ac:	10 99       	mov	r9,r8
800239ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239b2:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
800239b4:	ee fb ff f0 	ld.w	r11,r7[-16]
800239b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800239bc:	f0 16 02 12 	mcall	r6[2120]

	return 1;
800239c0:	30 18       	mov	r8,1
}
800239c2:	10 9c       	mov	r12,r8
800239c4:	2f cd       	sub	sp,-16
800239c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800239ca:	00 00       	add	r0,r0
800239cc:	80 02       	ld.sh	r2,r0[0x0]
800239ce:	38 02       	mov	r2,-128

800239d0 <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
800239d0:	eb cd 40 c0 	pushm	r6-r7,lr
800239d4:	1a 97       	mov	r7,sp
800239d6:	20 1d       	sub	sp,4
800239d8:	48 e6       	lddpc	r6,80023a10 <ast_enable+0x40>
800239da:	1e 26       	rsub	r6,pc
800239dc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800239e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800239e4:	c6 ef       	rcall	800238c0 <ast_is_busy>
800239e6:	18 98       	mov	r8,r12
800239e8:	58 08       	cp.w	r8,0
800239ea:	cf b1       	brne	800239e0 <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
800239ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239f0:	70 08       	ld.w	r8,r8[0x0]
800239f2:	10 99       	mov	r9,r8
800239f4:	a1 a9       	sbr	r9,0x0
800239f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239fa:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800239fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a00:	c6 0f       	rcall	800238c0 <ast_is_busy>
80023a02:	18 98       	mov	r8,r12
80023a04:	58 08       	cp.w	r8,0
80023a06:	cf b1       	brne	800239fc <ast_enable+0x2c>
}
80023a08:	2f fd       	sub	sp,-4
80023a0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a0e:	00 00       	add	r0,r0
80023a10:	80 02       	ld.sh	r2,r0[0x0]
80023a12:	38 5e       	mov	lr,-123

80023a14 <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
80023a14:	eb cd 40 c0 	pushm	r6-r7,lr
80023a18:	1a 97       	mov	r7,sp
80023a1a:	20 2d       	sub	sp,8
80023a1c:	48 e6       	lddpc	r6,80023a54 <ast_set_calendar_value+0x40>
80023a1e:	1e 26       	rsub	r6,pc
80023a20:	ef 4c ff fc 	st.w	r7[-4],r12
80023a24:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023a28:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a2c:	c4 af       	rcall	800238c0 <ast_is_busy>
80023a2e:	18 98       	mov	r8,r12
80023a30:	58 08       	cp.w	r8,0
80023a32:	cf b1       	brne	80023a28 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
80023a34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a3c:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023a40:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a44:	c3 ef       	rcall	800238c0 <ast_is_busy>
80023a46:	18 98       	mov	r8,r12
80023a48:	58 08       	cp.w	r8,0
80023a4a:	cf b1       	brne	80023a40 <ast_set_calendar_value+0x2c>
}
80023a4c:	2f ed       	sub	sp,-8
80023a4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a52:	00 00       	add	r0,r0
80023a54:	80 02       	ld.sh	r2,r0[0x0]
80023a56:	38 a2       	mov	r2,-118

80023a58 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80023a58:	eb cd 40 c0 	pushm	r6-r7,lr
80023a5c:	1a 97       	mov	r7,sp
80023a5e:	20 2d       	sub	sp,8
80023a60:	48 d6       	lddpc	r6,80023a94 <ast_set_counter_value+0x3c>
80023a62:	1e 26       	rsub	r6,pc
80023a64:	ef 4c ff fc 	st.w	r7[-4],r12
80023a68:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023a6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a70:	c2 8f       	rcall	800238c0 <ast_is_busy>
80023a72:	18 98       	mov	r8,r12
80023a74:	58 08       	cp.w	r8,0
80023a76:	cf b1       	brne	80023a6c <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
80023a78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023a80:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023a82:	ee fc ff fc 	ld.w	r12,r7[-4]
80023a86:	c1 df       	rcall	800238c0 <ast_is_busy>
80023a88:	18 98       	mov	r8,r12
80023a8a:	58 08       	cp.w	r8,0
80023a8c:	cf b1       	brne	80023a82 <ast_set_counter_value+0x2a>
}
80023a8e:	2f ed       	sub	sp,-8
80023a90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a94:	80 02       	ld.sh	r2,r0[0x0]
80023a96:	38 e6       	mov	r6,-114

80023a98 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
80023a98:	eb cd 40 80 	pushm	r7,lr
80023a9c:	1a 97       	mov	r7,sp
80023a9e:	20 2d       	sub	sp,8
80023aa0:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
80023aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023aa8:	71 58       	ld.w	r8,r8[0x54]
80023aaa:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
80023aae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80023ab2:	10 9c       	mov	r12,r8
80023ab4:	2f ed       	sub	sp,-8
80023ab6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023aba <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
80023aba:	eb cd 40 80 	pushm	r7,lr
80023abe:	1a 97       	mov	r7,sp
80023ac0:	20 1d       	sub	sp,4
80023ac2:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
80023ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023aca:	70 18       	ld.w	r8,r8[0x4]
}
80023acc:	10 9c       	mov	r12,r8
80023ace:	2f fd       	sub	sp,-4
80023ad0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023ad4 <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023ad4:	eb cd 40 80 	pushm	r7,lr
80023ad8:	1a 97       	mov	r7,sp
80023ada:	20 2d       	sub	sp,8
80023adc:	ef 4c ff fc 	st.w	r7[-4],r12
80023ae0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
80023ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ae8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023aec:	91 89       	st.w	r8[0x20],r9
}
80023aee:	2f ed       	sub	sp,-8
80023af0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023af4 <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023af4:	eb cd 40 80 	pushm	r7,lr
80023af8:	1a 97       	mov	r7,sp
80023afa:	20 2d       	sub	sp,8
80023afc:	ef 4c ff fc 	st.w	r7[-4],r12
80023b00:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
80023b04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023b0c:	91 99       	st.w	r8[0x24],r9
}
80023b0e:	2f ed       	sub	sp,-8
80023b10:	e3 cd 80 80 	ldm	sp++,r7,pc

80023b14 <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
80023b14:	eb cd 40 c0 	pushm	r6-r7,lr
80023b18:	1a 97       	mov	r7,sp
80023b1a:	20 1d       	sub	sp,4
80023b1c:	48 e6       	lddpc	r6,80023b54 <ast_enable_alarm0+0x40>
80023b1e:	1e 26       	rsub	r6,pc
80023b20:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023b24:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b28:	cc ce       	rcall	800238c0 <ast_is_busy>
80023b2a:	18 98       	mov	r8,r12
80023b2c:	58 08       	cp.w	r8,0
80023b2e:	cf b1       	brne	80023b24 <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80023b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b34:	71 28       	ld.w	r8,r8[0x48]
80023b36:	10 99       	mov	r9,r8
80023b38:	a9 a9       	sbr	r9,0x8
80023b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b3e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b42:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b46:	cb de       	rcall	800238c0 <ast_is_busy>
80023b48:	18 98       	mov	r8,r12
80023b4a:	58 08       	cp.w	r8,0
80023b4c:	cf b1       	brne	80023b42 <ast_enable_alarm0+0x2e>
}
80023b4e:	2f fd       	sub	sp,-4
80023b50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023b54:	80 02       	ld.sh	r2,r0[0x0]
80023b56:	39 a2       	mov	r2,-102

80023b58 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80023b58:	eb cd 40 c0 	pushm	r6-r7,lr
80023b5c:	1a 97       	mov	r7,sp
80023b5e:	20 1d       	sub	sp,4
80023b60:	48 e6       	lddpc	r6,80023b98 <ast_disable_alarm0+0x40>
80023b62:	1e 26       	rsub	r6,pc
80023b64:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023b68:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b6c:	ca ae       	rcall	800238c0 <ast_is_busy>
80023b6e:	18 98       	mov	r8,r12
80023b70:	58 08       	cp.w	r8,0
80023b72:	cf b1       	brne	80023b68 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
80023b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b78:	71 38       	ld.w	r8,r8[0x4c]
80023b7a:	10 99       	mov	r9,r8
80023b7c:	a9 a9       	sbr	r9,0x8
80023b7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b82:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023b86:	ee fc ff fc 	ld.w	r12,r7[-4]
80023b8a:	c9 be       	rcall	800238c0 <ast_is_busy>
80023b8c:	18 98       	mov	r8,r12
80023b8e:	58 08       	cp.w	r8,0
80023b90:	cf b1       	brne	80023b86 <ast_disable_alarm0+0x2e>
}
80023b92:	2f fd       	sub	sp,-4
80023b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023b98:	80 02       	ld.sh	r2,r0[0x0]
80023b9a:	39 e6       	mov	r6,-98

80023b9c <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
80023b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80023ba0:	1a 97       	mov	r7,sp
80023ba2:	20 1d       	sub	sp,4
80023ba4:	48 e6       	lddpc	r6,80023bdc <ast_enable_alarm1+0x40>
80023ba6:	1e 26       	rsub	r6,pc
80023ba8:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023bac:	ee fc ff fc 	ld.w	r12,r7[-4]
80023bb0:	c8 8e       	rcall	800238c0 <ast_is_busy>
80023bb2:	18 98       	mov	r8,r12
80023bb4:	58 08       	cp.w	r8,0
80023bb6:	cf b1       	brne	80023bac <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
80023bb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bbc:	71 28       	ld.w	r8,r8[0x48]
80023bbe:	10 99       	mov	r9,r8
80023bc0:	a9 b9       	sbr	r9,0x9
80023bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bc6:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023bca:	ee fc ff fc 	ld.w	r12,r7[-4]
80023bce:	c7 9e       	rcall	800238c0 <ast_is_busy>
80023bd0:	18 98       	mov	r8,r12
80023bd2:	58 08       	cp.w	r8,0
80023bd4:	cf b1       	brne	80023bca <ast_enable_alarm1+0x2e>
}
80023bd6:	2f fd       	sub	sp,-4
80023bd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023bdc:	80 02       	ld.sh	r2,r0[0x0]
80023bde:	3a 2a       	mov	r10,-94

80023be0 <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80023be0:	eb cd 40 c0 	pushm	r6-r7,lr
80023be4:	1a 97       	mov	r7,sp
80023be6:	20 1d       	sub	sp,4
80023be8:	48 e6       	lddpc	r6,80023c20 <ast_disable_alarm1+0x40>
80023bea:	1e 26       	rsub	r6,pc
80023bec:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023bf0:	ee fc ff fc 	ld.w	r12,r7[-4]
80023bf4:	c6 6e       	rcall	800238c0 <ast_is_busy>
80023bf6:	18 98       	mov	r8,r12
80023bf8:	58 08       	cp.w	r8,0
80023bfa:	cf b1       	brne	80023bf0 <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80023bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c00:	71 38       	ld.w	r8,r8[0x4c]
80023c02:	10 99       	mov	r9,r8
80023c04:	a9 b9       	sbr	r9,0x9
80023c06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c0a:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023c0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c12:	c5 7e       	rcall	800238c0 <ast_is_busy>
80023c14:	18 98       	mov	r8,r12
80023c16:	58 08       	cp.w	r8,0
80023c18:	cf b1       	brne	80023c0e <ast_disable_alarm1+0x2e>
}
80023c1a:	2f fd       	sub	sp,-4
80023c1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023c20:	80 02       	ld.sh	r2,r0[0x0]
80023c22:	3a 6e       	mov	lr,-90

80023c24 <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
80023c24:	eb cd 40 80 	pushm	r7,lr
80023c28:	1a 97       	mov	r7,sp
80023c2a:	20 2d       	sub	sp,8
80023c2c:	ef 4c ff fc 	st.w	r7[-4],r12
80023c30:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
80023c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c3c:	91 c9       	st.w	r8[0x30],r9
}
80023c3e:	2f ed       	sub	sp,-8
80023c40:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c44 <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
80023c44:	eb cd 40 80 	pushm	r7,lr
80023c48:	1a 97       	mov	r7,sp
80023c4a:	20 2d       	sub	sp,8
80023c4c:	ef 4c ff fc 	st.w	r7[-4],r12
80023c50:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
80023c54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c5c:	91 d9       	st.w	r8[0x34],r9
}
80023c5e:	2f ed       	sub	sp,-8
80023c60:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c64 <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
80023c64:	eb cd 40 c0 	pushm	r6-r7,lr
80023c68:	1a 97       	mov	r7,sp
80023c6a:	20 1d       	sub	sp,4
80023c6c:	48 e6       	lddpc	r6,80023ca4 <ast_enable_periodic0+0x40>
80023c6e:	1e 26       	rsub	r6,pc
80023c70:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023c74:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c78:	c2 4e       	rcall	800238c0 <ast_is_busy>
80023c7a:	18 98       	mov	r8,r12
80023c7c:	58 08       	cp.w	r8,0
80023c7e:	cf b1       	brne	80023c74 <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
80023c80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c84:	71 28       	ld.w	r8,r8[0x48]
80023c86:	10 99       	mov	r9,r8
80023c88:	b1 a9       	sbr	r9,0x10
80023c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c8e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023c92:	ee fc ff fc 	ld.w	r12,r7[-4]
80023c96:	c1 5e       	rcall	800238c0 <ast_is_busy>
80023c98:	18 98       	mov	r8,r12
80023c9a:	58 08       	cp.w	r8,0
80023c9c:	cf b1       	brne	80023c92 <ast_enable_periodic0+0x2e>
}
80023c9e:	2f fd       	sub	sp,-4
80023ca0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023ca4:	80 02       	ld.sh	r2,r0[0x0]
80023ca6:	3a f2       	mov	r2,-81

80023ca8 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
80023ca8:	eb cd 40 c0 	pushm	r6-r7,lr
80023cac:	1a 97       	mov	r7,sp
80023cae:	20 1d       	sub	sp,4
80023cb0:	48 f6       	lddpc	r6,80023cec <ast_disable_periodic0+0x44>
80023cb2:	1e 26       	rsub	r6,pc
80023cb4:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023cb8:	ee fc ff fc 	ld.w	r12,r7[-4]
80023cbc:	c0 2e       	rcall	800238c0 <ast_is_busy>
80023cbe:	18 98       	mov	r8,r12
80023cc0:	58 08       	cp.w	r8,0
80023cc2:	cf b1       	brne	80023cb8 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023cc8:	71 38       	ld.w	r8,r8[0x4c]
80023cca:	10 99       	mov	r9,r8
80023ccc:	b1 a9       	sbr	r9,0x10
80023cce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023cd2:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023cd6:	ee fc ff fc 	ld.w	r12,r7[-4]
80023cda:	fe b0 fd f3 	rcall	800238c0 <ast_is_busy>
80023cde:	18 98       	mov	r8,r12
80023ce0:	58 08       	cp.w	r8,0
80023ce2:	cf a1       	brne	80023cd6 <ast_disable_periodic0+0x2e>
}
80023ce4:	2f fd       	sub	sp,-4
80023ce6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023cea:	00 00       	add	r0,r0
80023cec:	80 02       	ld.sh	r2,r0[0x0]
80023cee:	3b 36       	mov	r6,-77

80023cf0 <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
80023cf0:	eb cd 40 c0 	pushm	r6-r7,lr
80023cf4:	1a 97       	mov	r7,sp
80023cf6:	20 1d       	sub	sp,4
80023cf8:	48 f6       	lddpc	r6,80023d34 <ast_enable_periodic1+0x44>
80023cfa:	1e 26       	rsub	r6,pc
80023cfc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023d00:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d04:	fe b0 fd de 	rcall	800238c0 <ast_is_busy>
80023d08:	18 98       	mov	r8,r12
80023d0a:	58 08       	cp.w	r8,0
80023d0c:	cf a1       	brne	80023d00 <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
80023d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d12:	71 28       	ld.w	r8,r8[0x48]
80023d14:	10 99       	mov	r9,r8
80023d16:	b1 b9       	sbr	r9,0x11
80023d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d1c:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023d20:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d24:	fe b0 fd ce 	rcall	800238c0 <ast_is_busy>
80023d28:	18 98       	mov	r8,r12
80023d2a:	58 08       	cp.w	r8,0
80023d2c:	cf a1       	brne	80023d20 <ast_enable_periodic1+0x30>
}
80023d2e:	2f fd       	sub	sp,-4
80023d30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023d34:	80 02       	ld.sh	r2,r0[0x0]
80023d36:	3b 7e       	mov	lr,-73

80023d38 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80023d38:	eb cd 40 c0 	pushm	r6-r7,lr
80023d3c:	1a 97       	mov	r7,sp
80023d3e:	20 1d       	sub	sp,4
80023d40:	48 f6       	lddpc	r6,80023d7c <ast_disable_periodic1+0x44>
80023d42:	1e 26       	rsub	r6,pc
80023d44:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023d48:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d4c:	fe b0 fd ba 	rcall	800238c0 <ast_is_busy>
80023d50:	18 98       	mov	r8,r12
80023d52:	58 08       	cp.w	r8,0
80023d54:	cf a1       	brne	80023d48 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80023d56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d5a:	71 38       	ld.w	r8,r8[0x4c]
80023d5c:	10 99       	mov	r9,r8
80023d5e:	b1 a9       	sbr	r9,0x10
80023d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d64:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023d68:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d6c:	fe b0 fd aa 	rcall	800238c0 <ast_is_busy>
80023d70:	18 98       	mov	r8,r12
80023d72:	58 08       	cp.w	r8,0
80023d74:	cf a1       	brne	80023d68 <ast_disable_periodic1+0x30>
}
80023d76:	2f fd       	sub	sp,-4
80023d78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023d7c:	80 02       	ld.sh	r2,r0[0x0]
80023d7e:	3b c6       	mov	r6,-68

80023d80 <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
80023d80:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80023d84:	1a 97       	mov	r7,sp
80023d86:	20 cd       	sub	sp,48
80023d88:	4d 46       	lddpc	r6,80023ed8 <dacifb_us_delay+0x158>
80023d8a:	1e 26       	rsub	r6,pc
80023d8c:	ef 4c ff d4 	st.w	r7[-44],r12
80023d90:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
80023d94:	ee fa ff d0 	ld.w	r10,r7[-48]
80023d98:	ee fb ff d4 	ld.w	r11,r7[-44]
80023d9c:	ef 4b ff e8 	st.w	r7[-24],r11
80023da0:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80023da4:	ee f2 ff e8 	ld.w	r2,r7[-24]
80023da8:	30 03       	mov	r3,0
80023daa:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023dae:	30 09       	mov	r9,0
80023db0:	e6 08 02 4a 	mul	r10,r3,r8
80023db4:	f2 02 02 4b 	mul	r11,r9,r2
80023db8:	16 0a       	add	r10,r11
80023dba:	e4 08 06 48 	mulu.d	r8,r2,r8
80023dbe:	12 0a       	add	r10,r9
80023dc0:	14 99       	mov	r9,r10
80023dc2:	ee 7a 42 3f 	mov	r10,999999
80023dc6:	30 0b       	mov	r11,0
80023dc8:	f0 0a 00 0a 	add	r10,r8,r10
80023dcc:	f2 0b 00 4b 	adc	r11,r9,r11
80023dd0:	ee 78 42 40 	mov	r8,1000000
80023dd4:	30 09       	mov	r9,0
80023dd6:	f0 16 00 fb 	mcall	r6[1004]
80023dda:	14 98       	mov	r8,r10
80023ddc:	16 99       	mov	r9,r11
80023dde:	ef 48 ff f0 	st.w	r7[-16],r8
80023de2:	ee c8 00 28 	sub	r8,r7,40
80023de6:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80023dea:	e1 b8 00 42 	mfsr	r8,0x108
80023dee:	10 99       	mov	r9,r8
80023df0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023df4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80023df6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023dfa:	70 09       	ld.w	r9,r8[0x0]
80023dfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e00:	10 09       	add	r9,r8
80023e02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023e06:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80023e08:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023e0c:	30 08       	mov	r8,0
80023e0e:	f3 68 00 08 	st.b	r9[8],r8
80023e12:	ee c8 00 28 	sub	r8,r7,40
80023e16:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80023e1a:	e1 b8 00 42 	mfsr	r8,0x108
80023e1e:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80023e22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e26:	f1 39 00 08 	ld.ub	r9,r8[8]
80023e2a:	30 28       	mov	r8,2
80023e2c:	f0 09 18 00 	cp.b	r9,r8
80023e30:	c0 31       	brne	80023e36 <dacifb_us_delay+0xb6>
    return false;
80023e32:	30 08       	mov	r8,0
80023e34:	c4 38       	rjmp	80023eba <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80023e36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e3a:	f1 39 00 08 	ld.ub	r9,r8[8]
80023e3e:	30 18       	mov	r8,1
80023e40:	f0 09 18 00 	cp.b	r9,r8
80023e44:	c0 31       	brne	80023e4a <dacifb_us_delay+0xca>
    return true;
80023e46:	30 18       	mov	r8,1
80023e48:	c3 98       	rjmp	80023eba <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80023e4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e4e:	70 09       	ld.w	r9,r8[0x0]
80023e50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e54:	70 18       	ld.w	r8,r8[0x4]
80023e56:	10 39       	cp.w	r9,r8
80023e58:	e0 88 00 1a 	brls	80023e8c <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80023e5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e60:	70 08       	ld.w	r8,r8[0x0]
80023e62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e66:	10 39       	cp.w	r9,r8
80023e68:	c1 02       	brcc	80023e88 <dacifb_us_delay+0x108>
80023e6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e6e:	70 18       	ld.w	r8,r8[0x4]
80023e70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e74:	10 39       	cp.w	r9,r8
80023e76:	e0 88 00 09 	brls	80023e88 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023e7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023e7e:	30 18       	mov	r8,1
80023e80:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023e84:	30 18       	mov	r8,1
80023e86:	c1 a8       	rjmp	80023eba <dacifb_us_delay+0x13a>
    }
    return false;
80023e88:	30 08       	mov	r8,0
80023e8a:	c1 88       	rjmp	80023eba <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80023e8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e90:	70 08       	ld.w	r8,r8[0x0]
80023e92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e96:	10 39       	cp.w	r9,r8
80023e98:	c0 93       	brcs	80023eaa <dacifb_us_delay+0x12a>
80023e9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e9e:	70 18       	ld.w	r8,r8[0x4]
80023ea0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023ea4:	10 39       	cp.w	r9,r8
80023ea6:	e0 88 00 09 	brls	80023eb8 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023eaa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023eae:	30 18       	mov	r8,1
80023eb0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023eb4:	30 18       	mov	r8,1
80023eb6:	c0 28       	rjmp	80023eba <dacifb_us_delay+0x13a>
    }
    return false;
80023eb8:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
80023eba:	58 08       	cp.w	r8,0
80023ebc:	ca b0       	breq	80023e12 <dacifb_us_delay+0x92>
80023ebe:	ee c8 00 28 	sub	r8,r7,40
80023ec2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80023ec6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023eca:	30 28       	mov	r8,2
80023ecc:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
80023ed0:	2f 4d       	sub	sp,-48
80023ed2:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023ed6:	00 00       	add	r0,r0
80023ed8:	80 02       	ld.sh	r2,r0[0x0]
80023eda:	3c 0e       	mov	lr,-64

80023edc <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
80023edc:	eb cd 40 80 	pushm	r7,lr
80023ee0:	1a 97       	mov	r7,sp
80023ee2:	20 5d       	sub	sp,20
80023ee4:	ef 4c ff f4 	st.w	r7[-12],r12
80023ee8:	ef 4b ff f0 	st.w	r7[-16],r11
80023eec:	14 98       	mov	r8,r10
80023eee:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
80023ef2:	e0 68 02 0c 	mov	r8,524
80023ef6:	ea 18 80 80 	orh	r8,0x8080
80023efa:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
80023efe:	e0 68 02 14 	mov	r8,532
80023f02:	ea 18 80 80 	orh	r8,0x8080
80023f06:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
80023f0a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80023f0e:	30 08       	mov	r8,0
80023f10:	f0 09 18 00 	cp.b	r9,r8
80023f14:	c1 71       	brne	80023f42 <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80023f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f1a:	70 08       	ld.w	r8,r8[0x0]
80023f1c:	5c 88       	casts.h	r8
80023f1e:	5c 88       	casts.h	r8
80023f20:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023f24:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023f28:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
80023f2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f2e:	70 08       	ld.w	r8,r8[0x0]
80023f30:	b1 88       	lsr	r8,0x10
80023f32:	5c 88       	casts.h	r8
80023f34:	5c 88       	casts.h	r8
80023f36:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023f3a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023f3e:	b2 18       	st.h	r9[0x2],r8
80023f40:	c1 68       	rjmp	80023f6c <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
80023f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f46:	70 08       	ld.w	r8,r8[0x0]
80023f48:	5c 88       	casts.h	r8
80023f4a:	5c 88       	casts.h	r8
80023f4c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023f50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023f54:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
80023f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f5a:	70 08       	ld.w	r8,r8[0x0]
80023f5c:	b1 88       	lsr	r8,0x10
80023f5e:	5c 88       	casts.h	r8
80023f60:	5c 88       	casts.h	r8
80023f62:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023f66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023f6a:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
80023f6c:	2f bd       	sub	sp,-20
80023f6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023f72 <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
80023f72:	eb cd 40 80 	pushm	r7,lr
80023f76:	1a 97       	mov	r7,sp
80023f78:	20 5d       	sub	sp,20
80023f7a:	ef 4c ff f4 	st.w	r7[-12],r12
80023f7e:	ef 4b ff f0 	st.w	r7[-16],r11
80023f82:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
80023f86:	30 08       	mov	r8,0
80023f88:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
80023f8c:	30 08       	mov	r8,0
80023f8e:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023f92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f96:	90 28       	ld.sh	r8,r8[0x4]
80023f98:	5c 78       	castu.h	r8
80023f9a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
80023f9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fa2:	90 18       	ld.sh	r8,r8[0x2]
80023fa4:	5c 78       	castu.h	r8
80023fa6:	b1 68       	lsl	r8,0x10
80023fa8:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023fac:	f3 e8 10 08 	or	r8,r9,r8
80023fb0:	10 99       	mov	r9,r8
80023fb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fb6:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
80023fb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fbc:	70 29       	ld.w	r9,r8[0x8]
80023fbe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023fc2:	f0 09 0d 08 	divu	r8,r8,r9
80023fc6:	f0 08 12 00 	clz	r8,r8
80023fca:	f0 08 11 1f 	rsub	r8,r8,31
80023fce:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
80023fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023fd6:	58 88       	cp.w	r8,8
80023fd8:	e0 88 00 04 	brls	80023fe0 <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
80023fdc:	30 08       	mov	r8,0
80023fde:	c6 d8       	rjmp	800240b8 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
80023fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023fe4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023fe8:	f2 08 0a 49 	lsr	r9,r9,r8
80023fec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ff0:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
80023ff2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ff6:	70 29       	ld.w	r9,r8[0x8]
80023ff8:	e0 68 de 83 	mov	r8,56963
80023ffc:	ea 18 43 1b 	orh	r8,0x431b
80024000:	f2 08 06 48 	mulu.d	r8,r9,r8
80024004:	f2 08 16 11 	lsr	r8,r9,0x11
80024008:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
8002400c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024010:	e0 48 00 80 	cp.w	r8,128
80024014:	e0 88 00 04 	brls	8002401c <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80024018:	30 08       	mov	r8,0
8002401a:	c4 f8       	rjmp	800240b8 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
8002401c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024020:	70 39       	ld.w	r9,r8[0xc]
80024022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024026:	b9 68       	lsl	r8,0x18
80024028:	10 9a       	mov	r10,r8
8002402a:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
8002402e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024032:	b1 68       	lsl	r8,0x10
80024034:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80024038:	f5 e8 10 08 	or	r8,r10,r8
8002403c:	10 49       	or	r9,r8
8002403e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024042:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
80024044:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024048:	70 19       	ld.w	r9,r8[0x4]
8002404a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002404e:	11 98       	ld.ub	r8,r8[0x1]
80024050:	b9 68       	lsl	r8,0x18
80024052:	e6 18 03 00 	andh	r8,0x300,COH
80024056:	10 49       	or	r9,r8
80024058:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002405c:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
8002405e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024062:	70 19       	ld.w	r9,r8[0x4]
80024064:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024068:	11 88       	ld.ub	r8,r8[0x0]
8002406a:	a9 68       	lsl	r8,0x8
8002406c:	e2 18 01 00 	andl	r8,0x100,COH
80024070:	10 49       	or	r9,r8
80024072:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024076:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80024078:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002407c:	70 19       	ld.w	r9,r8[0x4]
8002407e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024082:	11 f8       	ld.ub	r8,r8[0x7]
80024084:	a1 78       	lsl	r8,0x1
80024086:	e2 18 00 02 	andl	r8,0x2,COH
8002408a:	10 49       	or	r9,r8
8002408c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024090:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
80024092:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024096:	70 19       	ld.w	r9,r8[0x4]
80024098:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002409c:	11 e8       	ld.ub	r8,r8[0x6]
8002409e:	10 49       	or	r9,r8
800240a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800240a4:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
800240a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800240aa:	70 08       	ld.w	r8,r8[0x0]
800240ac:	10 99       	mov	r9,r8
800240ae:	a1 a9       	sbr	r9,0x0
800240b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800240b4:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
800240b6:	30 18       	mov	r8,1
}
800240b8:	10 9c       	mov	r12,r8
800240ba:	2f bd       	sub	sp,-20
800240bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800240c0 <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
800240c0:	eb cd 40 80 	pushm	r7,lr
800240c4:	1a 97       	mov	r7,sp
800240c6:	20 7d       	sub	sp,28
800240c8:	ef 4c ff f0 	st.w	r7[-16],r12
800240cc:	16 98       	mov	r8,r11
800240ce:	ef 4a ff e8 	st.w	r7[-24],r10
800240d2:	ef 49 ff e4 	st.w	r7[-28],r9
800240d6:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
800240da:	30 08       	mov	r8,0
800240dc:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
800240e0:	30 08       	mov	r8,0
800240e2:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
800240e6:	30 08       	mov	r8,0
800240e8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
800240ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240f0:	11 88       	ld.ub	r8,r8[0x0]
800240f2:	58 08       	cp.w	r8,0
800240f4:	c2 40       	breq	8002413c <dacifb_configure_channel+0x7c>
  {
    switch(channel)
800240f6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800240fa:	58 28       	cp.w	r8,2
800240fc:	c0 e0       	breq	80024118 <dacifb_configure_channel+0x58>
800240fe:	58 38       	cp.w	r8,3
80024100:	c1 50       	breq	8002412a <dacifb_configure_channel+0x6a>
80024102:	58 18       	cp.w	r8,1
80024104:	c1 c1       	brne	8002413c <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
80024106:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002410a:	70 08       	ld.w	r8,r8[0x0]
8002410c:	10 99       	mov	r9,r8
8002410e:	bb a9       	sbr	r9,0x1a
80024110:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024114:	91 09       	st.w	r8[0x0],r9
        break;
80024116:	c1 38       	rjmp	8002413c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80024118:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002411c:	70 08       	ld.w	r8,r8[0x0]
8002411e:	10 99       	mov	r9,r8
80024120:	bb b9       	sbr	r9,0x1b
80024122:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024126:	91 09       	st.w	r8[0x0],r9
        break;  
80024128:	c0 a8       	rjmp	8002413c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
8002412a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002412e:	70 08       	ld.w	r8,r8[0x0]
80024130:	10 99       	mov	r9,r8
80024132:	ea 19 0c 00 	orh	r9,0xc00
80024136:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002413a:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
8002413c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80024140:	e0 68 17 59 	mov	r8,5977
80024144:	ea 18 d1 b7 	orh	r8,0xd1b7
80024148:	f2 08 06 48 	mulu.d	r8,r9,r8
8002414c:	f2 08 16 0f 	lsr	r8,r9,0xf
80024150:	f0 08 12 00 	clz	r8,r8
80024154:	f0 08 11 1f 	rsub	r8,r8,31
80024158:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
8002415c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024160:	58 08       	cp.w	r8,0
80024162:	c0 60       	breq	8002416e <dacifb_configure_channel+0xae>
80024164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024168:	20 18       	sub	r8,1
8002416a:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
8002416e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024172:	59 08       	cp.w	r8,16
80024174:	e0 8b 00 07 	brhi	80024182 <dacifb_configure_channel+0xc2>
80024178:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002417c:	59 08       	cp.w	r8,16
8002417e:	e0 88 00 05 	brls	80024188 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
80024182:	30 08       	mov	r8,0
80024184:	e0 8f 01 87 	bral	80024492 <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
80024188:	ee f9 ff e4 	ld.w	r9,r7[-28]
8002418c:	e0 68 27 59 	mov	r8,10073
80024190:	ea 18 fb a9 	orh	r8,0xfba9
80024194:	f2 08 06 48 	mulu.d	r8,r9,r8
80024198:	f2 08 16 0f 	lsr	r8,r9,0xf
8002419c:	f0 08 12 00 	clz	r8,r8
800241a0:	f0 08 11 1f 	rsub	r8,r8,31
800241a4:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
800241a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800241ac:	58 08       	cp.w	r8,0
800241ae:	c0 60       	breq	800241ba <dacifb_configure_channel+0xfa>
800241b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800241b4:	20 18       	sub	r8,1
800241b6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800241ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800241be:	59 08       	cp.w	r8,16
800241c0:	e0 8b 00 07 	brhi	800241ce <dacifb_configure_channel+0x10e>
800241c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800241c8:	59 08       	cp.w	r8,16
800241ca:	e0 88 00 04 	brls	800241d2 <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
800241ce:	30 08       	mov	r8,0
800241d0:	c6 19       	rjmp	80024492 <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
800241d2:	30 08       	mov	r8,0
800241d4:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
800241d8:	c0 68       	rjmp	800241e4 <dacifb_configure_channel+0x124>
  {
      prescaler++;
800241da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241de:	2f f8       	sub	r8,-1
800241e0:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
800241e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241e8:	f0 09 15 01 	lsl	r9,r8,0x1
800241ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800241f0:	10 39       	cp.w	r9,r8
800241f2:	cf 43       	brcs	800241da <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
800241f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241f8:	f0 09 15 01 	lsl	r9,r8,0x1
800241fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024200:	10 39       	cp.w	r9,r8
80024202:	e0 88 00 04 	brls	8002420a <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
80024206:	30 08       	mov	r8,0
80024208:	c4 59       	rjmp	80024492 <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
8002420a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002420e:	58 28       	cp.w	r8,2
80024210:	c1 10       	breq	80024232 <dacifb_configure_channel+0x172>
80024212:	58 38       	cp.w	r8,3
80024214:	c1 c0       	breq	8002424c <dacifb_configure_channel+0x18c>
80024216:	58 18       	cp.w	r8,1
80024218:	c2 c1       	brne	80024270 <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
8002421a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002421e:	70 39       	ld.w	r9,r8[0xc]
80024220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024224:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024228:	10 49       	or	r9,r8
8002422a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002422e:	91 39       	st.w	r8[0xc],r9
      break;
80024230:	c2 08       	rjmp	80024270 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
80024232:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024236:	70 39       	ld.w	r9,r8[0xc]
80024238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002423c:	a9 68       	lsl	r8,0x8
8002423e:	e2 18 0f 00 	andl	r8,0xf00,COH
80024242:	10 49       	or	r9,r8
80024244:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024248:	91 39       	st.w	r8[0xc],r9
      break;  
8002424a:	c1 38       	rjmp	80024270 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
8002424c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024250:	70 39       	ld.w	r9,r8[0xc]
80024252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024256:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
8002425a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002425e:	a9 68       	lsl	r8,0x8
80024260:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80024264:	f5 e8 10 08 	or	r8,r10,r8
80024268:	10 49       	or	r9,r8
8002426a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002426e:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80024270:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80024274:	58 28       	cp.w	r8,2
80024276:	c3 30       	breq	800242dc <dacifb_configure_channel+0x21c>
80024278:	58 38       	cp.w	r8,3
8002427a:	c5 e0       	breq	80024336 <dacifb_configure_channel+0x276>
8002427c:	58 18       	cp.w	r8,1
8002427e:	e0 81 00 8f 	brne	8002439c <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024282:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024286:	11 98       	ld.ub	r8,r8[0x1]
80024288:	58 08       	cp.w	r8,0
8002428a:	c0 90       	breq	8002429c <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
8002428c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024290:	70 18       	ld.w	r8,r8[0x4]
80024292:	10 99       	mov	r9,r8
80024294:	b1 a9       	sbr	r9,0x10
80024296:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002429a:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
8002429c:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242a0:	11 99       	ld.ub	r9,r8[0x1]
800242a2:	30 28       	mov	r8,2
800242a4:	f0 09 18 00 	cp.b	r9,r8
800242a8:	c0 a1       	brne	800242bc <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
800242aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242ae:	70 28       	ld.w	r8,r8[0x8]
800242b0:	10 99       	mov	r9,r8
800242b2:	a1 a9       	sbr	r9,0x0
800242b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242b8:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
800242ba:	c7 18       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800242bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242c0:	11 99       	ld.ub	r9,r8[0x1]
800242c2:	30 18       	mov	r8,1
800242c4:	f0 09 18 00 	cp.b	r9,r8
800242c8:	c6 71       	brne	80024396 <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
800242ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242ce:	70 08       	ld.w	r8,r8[0x0]
800242d0:	10 99       	mov	r9,r8
800242d2:	b9 a9       	sbr	r9,0x18
800242d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242d8:	91 09       	st.w	r8[0x0],r9
         }
      break;
800242da:	c6 18       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800242dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242e0:	11 98       	ld.ub	r8,r8[0x1]
800242e2:	58 08       	cp.w	r8,0
800242e4:	c0 90       	breq	800242f6 <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
800242e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242ea:	70 18       	ld.w	r8,r8[0x4]
800242ec:	10 99       	mov	r9,r8
800242ee:	b1 b9       	sbr	r9,0x11
800242f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800242f4:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800242f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800242fa:	11 99       	ld.ub	r9,r8[0x1]
800242fc:	30 28       	mov	r8,2
800242fe:	f0 09 18 00 	cp.b	r9,r8
80024302:	c0 a1       	brne	80024316 <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
80024304:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024308:	70 28       	ld.w	r8,r8[0x8]
8002430a:	10 99       	mov	r9,r8
8002430c:	a9 a9       	sbr	r9,0x8
8002430e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024312:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80024314:	c4 48       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024316:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002431a:	11 99       	ld.ub	r9,r8[0x1]
8002431c:	30 18       	mov	r8,1
8002431e:	f0 09 18 00 	cp.b	r9,r8
80024322:	c3 c1       	brne	8002439a <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80024324:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024328:	70 08       	ld.w	r8,r8[0x0]
8002432a:	10 99       	mov	r9,r8
8002432c:	b9 b9       	sbr	r9,0x19
8002432e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024332:	91 09       	st.w	r8[0x0],r9
         }
      break;    
80024334:	c3 48       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024336:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002433a:	11 98       	ld.ub	r8,r8[0x1]
8002433c:	58 08       	cp.w	r8,0
8002433e:	c0 a0       	breq	80024352 <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80024340:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024344:	70 18       	ld.w	r8,r8[0x4]
80024346:	10 99       	mov	r9,r8
80024348:	ea 19 00 03 	orh	r9,0x3
8002434c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024350:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80024352:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024356:	11 99       	ld.ub	r9,r8[0x1]
80024358:	30 28       	mov	r8,2
8002435a:	f0 09 18 00 	cp.b	r9,r8
8002435e:	c0 b1       	brne	80024374 <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80024360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024364:	70 28       	ld.w	r8,r8[0x8]
80024366:	10 99       	mov	r9,r8
80024368:	e8 19 01 01 	orl	r9,0x101
8002436c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024370:	91 29       	st.w	r8[0x8],r9
80024372:	c1 58       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024374:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024378:	11 99       	ld.ub	r9,r8[0x1]
8002437a:	30 18       	mov	r8,1
8002437c:	f0 09 18 00 	cp.b	r9,r8
80024380:	c0 e1       	brne	8002439c <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
80024382:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024386:	70 08       	ld.w	r8,r8[0x0]
80024388:	10 99       	mov	r9,r8
8002438a:	ea 19 03 00 	orh	r9,0x300
8002438e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024392:	91 09       	st.w	r8[0x0],r9
80024394:	c0 48       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80024396:	d7 03       	nop
80024398:	c0 28       	rjmp	8002439c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
8002439a:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
8002439c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800243a0:	58 28       	cp.w	r8,2
800243a2:	c2 20       	breq	800243e6 <dacifb_configure_channel+0x326>
800243a4:	58 38       	cp.w	r8,3
800243a6:	c3 d0       	breq	80024420 <dacifb_configure_channel+0x360>
800243a8:	58 18       	cp.w	r8,1
800243aa:	c7 31       	brne	80024490 <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800243ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243b0:	70 99       	ld.w	r9,r8[0x24]
800243b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243b6:	11 a8       	ld.ub	r8,r8[0x2]
800243b8:	ab 78       	lsl	r8,0xb
800243ba:	10 9a       	mov	r10,r8
800243bc:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
800243c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243c4:	11 b8       	ld.ub	r8,r8[0x3]
800243c6:	a9 68       	lsl	r8,0x8
800243c8:	e2 18 07 00 	andl	r8,0x700,COH
800243cc:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
800243ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243d2:	11 c8       	ld.ub	r8,r8[0x4]
800243d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800243d8:	f5 e8 10 08 	or	r8,r10,r8
800243dc:	10 49       	or	r9,r8
800243de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243e2:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
800243e4:	c5 68       	rjmp	80024490 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800243e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243ea:	70 a9       	ld.w	r9,r8[0x28]
800243ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243f0:	11 a8       	ld.ub	r8,r8[0x2]
800243f2:	ab 78       	lsl	r8,0xb
800243f4:	10 9a       	mov	r10,r8
800243f6:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
800243fa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800243fe:	11 b8       	ld.ub	r8,r8[0x3]
80024400:	a9 68       	lsl	r8,0x8
80024402:	e2 18 07 00 	andl	r8,0x700,COH
80024406:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
80024408:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002440c:	11 c8       	ld.ub	r8,r8[0x4]
8002440e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024412:	f5 e8 10 08 	or	r8,r10,r8
80024416:	10 49       	or	r9,r8
80024418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002441c:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
8002441e:	c3 98       	rjmp	80024490 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024424:	70 99       	ld.w	r9,r8[0x24]
80024426:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002442a:	11 a8       	ld.ub	r8,r8[0x2]
8002442c:	ab 78       	lsl	r8,0xb
8002442e:	10 9a       	mov	r10,r8
80024430:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
80024434:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024438:	11 b8       	ld.ub	r8,r8[0x3]
8002443a:	a9 68       	lsl	r8,0x8
8002443c:	e2 18 07 00 	andl	r8,0x700,COH
80024440:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
80024442:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024446:	11 c8       	ld.ub	r8,r8[0x4]
80024448:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002444c:	f5 e8 10 08 	or	r8,r10,r8
80024450:	10 49       	or	r9,r8
80024452:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024456:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024458:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002445c:	70 a9       	ld.w	r9,r8[0x28]
8002445e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024462:	11 a8       	ld.ub	r8,r8[0x2]
80024464:	ab 78       	lsl	r8,0xb
80024466:	10 9a       	mov	r10,r8
80024468:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
8002446c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024470:	11 b8       	ld.ub	r8,r8[0x3]
80024472:	a9 68       	lsl	r8,0x8
80024474:	e2 18 07 00 	andl	r8,0x700,COH
80024478:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
8002447a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002447e:	11 c8       	ld.ub	r8,r8[0x4]
80024480:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024484:	f5 e8 10 08 	or	r8,r10,r8
80024488:	10 49       	or	r9,r8
8002448a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002448e:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
80024490:	30 18       	mov	r8,1
}
80024492:	10 9c       	mov	r12,r8
80024494:	2f 9d       	sub	sp,-28
80024496:	e3 cd 80 80 	ldm	sp++,r7,pc

8002449a <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
8002449a:	eb cd 40 c0 	pushm	r6-r7,lr
8002449e:	1a 97       	mov	r7,sp
800244a0:	20 3d       	sub	sp,12
800244a2:	49 b6       	lddpc	r6,8002450c <dacifb_start_channel+0x72>
800244a4:	1e 26       	rsub	r6,pc
800244a6:	ef 4c ff fc 	st.w	r7[-4],r12
800244aa:	16 98       	mov	r8,r11
800244ac:	ef 4a ff f4 	st.w	r7[-12],r10
800244b0:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
800244b4:	ee fb ff f4 	ld.w	r11,r7[-12]
800244b8:	30 2c       	mov	r12,2
800244ba:	fe b0 fc 63 	rcall	80023d80 <dacifb_us_delay>
  
  switch(channel)
800244be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800244c2:	58 28       	cp.w	r8,2
800244c4:	c0 e0       	breq	800244e0 <dacifb_start_channel+0x46>
800244c6:	58 38       	cp.w	r8,3
800244c8:	c1 50       	breq	800244f2 <dacifb_start_channel+0x58>
800244ca:	58 18       	cp.w	r8,1
800244cc:	c1 c1       	brne	80024504 <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
800244ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244d2:	70 08       	ld.w	r8,r8[0x0]
800244d4:	10 99       	mov	r9,r8
800244d6:	b1 a9       	sbr	r9,0x10
800244d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244dc:	91 09       	st.w	r8[0x0],r9
      break;
800244de:	c1 38       	rjmp	80024504 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
800244e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244e4:	70 08       	ld.w	r8,r8[0x0]
800244e6:	10 99       	mov	r9,r8
800244e8:	b1 b9       	sbr	r9,0x11
800244ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244ee:	91 09       	st.w	r8[0x0],r9
      break;
800244f0:	c0 a8       	rjmp	80024504 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
800244f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800244f6:	70 08       	ld.w	r8,r8[0x0]
800244f8:	10 99       	mov	r9,r8
800244fa:	ea 19 00 03 	orh	r9,0x3
800244fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024502:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
80024504:	2f dd       	sub	sp,-12
80024506:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002450a:	00 00       	add	r0,r0
8002450c:	80 02       	ld.sh	r2,r0[0x0]
8002450e:	43 28       	lddsp	r8,sp[0xc8]

80024510 <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
80024510:	eb cd 40 80 	pushm	r7,lr
80024514:	1a 97       	mov	r7,sp
80024516:	20 2d       	sub	sp,8
80024518:	ef 4c ff fc 	st.w	r7[-4],r12
8002451c:	16 98       	mov	r8,r11
8002451e:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
80024522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024526:	70 78       	ld.w	r8,r8[0x1c]
80024528:	30 18       	mov	r8,1
}
8002452a:	10 9c       	mov	r12,r8
8002452c:	2f ed       	sub	sp,-8
8002452e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024532 <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
80024532:	eb cd 40 80 	pushm	r7,lr
80024536:	1a 97       	mov	r7,sp
80024538:	20 4d       	sub	sp,16
8002453a:	ef 4c ff fc 	st.w	r7[-4],r12
8002453e:	14 98       	mov	r8,r10
80024540:	ef 49 ff f0 	st.w	r7[-16],r9
80024544:	16 99       	mov	r9,r11
80024546:	ef 69 ff f8 	st.b	r7[-8],r9
8002454a:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
8002454e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024552:	58 28       	cp.w	r8,2
80024554:	c0 b0       	breq	8002456a <dacifb_set_value+0x38>
80024556:	58 38       	cp.w	r8,3
80024558:	c0 f0       	breq	80024576 <dacifb_set_value+0x44>
8002455a:	58 18       	cp.w	r8,1
8002455c:	c2 01       	brne	8002459c <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
8002455e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024562:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024566:	91 b9       	st.w	r8[0x2c],r9
      break;
80024568:	c1 a8       	rjmp	8002459c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
8002456a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002456e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024572:	91 c9       	st.w	r8[0x30],r9
      break;
80024574:	c1 48       	rjmp	8002459c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
80024576:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002457a:	30 08       	mov	r8,0
8002457c:	f0 09 18 00 	cp.b	r9,r8
80024580:	c0 70       	breq	8002458e <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
80024582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024586:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002458a:	91 b9       	st.w	r8[0x2c],r9
8002458c:	c0 88       	rjmp	8002459c <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
8002458e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024592:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002459a:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
8002459c:	2f cd       	sub	sp,-16
8002459e:	e3 cd 80 80 	ldm	sp++,r7,pc

800245a2 <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
800245a2:	eb cd 40 80 	pushm	r7,lr
800245a6:	1a 97       	mov	r7,sp
800245a8:	20 5d       	sub	sp,20
800245aa:	ef 4c ff f8 	st.w	r7[-8],r12
800245ae:	14 98       	mov	r8,r10
800245b0:	ef 49 ff ec 	st.w	r7[-20],r9
800245b4:	16 99       	mov	r9,r11
800245b6:	ef 69 ff f4 	st.b	r7[-12],r9
800245ba:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
800245be:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800245c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800245c6:	b1 39       	mul	r9,r8
800245c8:	e0 68 de 83 	mov	r8,56963
800245cc:	ea 18 43 1b 	orh	r8,0x431b
800245d0:	f2 08 06 48 	mulu.d	r8,r9,r8
800245d4:	f2 08 16 12 	lsr	r8,r9,0x12
800245d8:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
800245dc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800245e0:	58 28       	cp.w	r8,2
800245e2:	c0 f0       	breq	80024600 <dacifb_reload_timer+0x5e>
800245e4:	58 38       	cp.w	r8,3
800245e6:	c1 70       	breq	80024614 <dacifb_reload_timer+0x72>
800245e8:	58 18       	cp.w	r8,1
800245ea:	c2 71       	brne	80024638 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
800245ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245f0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800245f4:	10 99       	mov	r9,r8
800245f6:	bf b9       	sbr	r9,0x1f
800245f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245fc:	91 e9       	st.w	r8[0x38],r9
        break;
800245fe:	c1 d8       	rjmp	80024638 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
80024600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024604:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024608:	10 99       	mov	r9,r8
8002460a:	bf b9       	sbr	r9,0x1f
8002460c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024610:	91 f9       	st.w	r8[0x3c],r9
        break;
80024612:	c1 38       	rjmp	80024638 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
80024614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024618:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002461c:	10 99       	mov	r9,r8
8002461e:	bf b9       	sbr	r9,0x1f
80024620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024624:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
80024626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002462a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002462e:	10 99       	mov	r9,r8
80024630:	bf b9       	sbr	r9,0x1f
80024632:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024636:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
80024638:	2f bd       	sub	sp,-20
8002463a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024640 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80024640:	eb cd 40 80 	pushm	r7,lr
80024644:	1a 97       	mov	r7,sp
80024646:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80024648:	e1 b8 00 00 	mfsr	r8,0x0
8002464c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80024650:	d3 03       	ssrf	0x10

	return flags;
80024652:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80024656:	10 9c       	mov	r12,r8
80024658:	2f fd       	sub	sp,-4
8002465a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002465e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002465e:	eb cd 40 80 	pushm	r7,lr
80024662:	1a 97       	mov	r7,sp
80024664:	20 1d       	sub	sp,4
80024666:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002466a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002466e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80024672:	2f fd       	sub	sp,-4
80024674:	e3 cd 80 80 	ldm	sp++,r7,pc

80024678 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80024678:	eb cd 40 80 	pushm	r7,lr
8002467c:	1a 97       	mov	r7,sp
8002467e:	20 4d       	sub	sp,16
80024680:	ef 4c ff f8 	st.w	r7[-8],r12
80024684:	ef 4b ff f4 	st.w	r7[-12],r11
80024688:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
8002468c:	30 08       	mov	r8,0
8002468e:	ef 48 ff fc 	st.w	r7[-4],r8
80024692:	c2 89       	rjmp	800248e2 <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024694:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024698:	12 98       	mov	r8,r9
8002469a:	a1 78       	lsl	r8,0x1
8002469c:	12 08       	add	r8,r9
8002469e:	a1 78       	lsl	r8,0x1
800246a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800246a4:	f2 08 00 08 	add	r8,r9,r8
800246a8:	11 99       	ld.ub	r9,r8[0x1]
800246aa:	30 18       	mov	r8,1
800246ac:	f0 09 18 00 	cp.b	r9,r8
800246b0:	c1 51       	brne	800246da <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
800246b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246b6:	70 5a       	ld.w	r10,r8[0x14]
800246b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800246bc:	12 98       	mov	r8,r9
800246be:	a1 78       	lsl	r8,0x1
800246c0:	12 08       	add	r8,r9
800246c2:	a1 78       	lsl	r8,0x1
800246c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800246c8:	f2 08 00 08 	add	r8,r9,r8
800246cc:	11 88       	ld.ub	r8,r8[0x0]
800246ce:	30 19       	mov	r9,1
800246d0:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800246d4:	f5 e8 10 08 	or	r8,r10,r8
800246d8:	c1 58       	rjmp	80024702 <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
800246da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246de:	70 5a       	ld.w	r10,r8[0x14]
800246e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800246e4:	12 98       	mov	r8,r9
800246e6:	a1 78       	lsl	r8,0x1
800246e8:	12 08       	add	r8,r9
800246ea:	a1 78       	lsl	r8,0x1
800246ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800246f0:	f2 08 00 08 	add	r8,r9,r8
800246f4:	11 88       	ld.ub	r8,r8[0x0]
800246f6:	30 19       	mov	r9,1
800246f8:	f2 08 09 48 	lsl	r8,r9,r8
800246fc:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800246fe:	f5 e8 00 08 	and	r8,r10,r8
80024702:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024706:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002470c:	12 98       	mov	r8,r9
8002470e:	a1 78       	lsl	r8,0x1
80024710:	12 08       	add	r8,r9
80024712:	a1 78       	lsl	r8,0x1
80024714:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024718:	f2 08 00 08 	add	r8,r9,r8
8002471c:	11 a9       	ld.ub	r9,r8[0x2]
8002471e:	30 18       	mov	r8,1
80024720:	f0 09 18 00 	cp.b	r9,r8
80024724:	c1 51       	brne	8002474e <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80024726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002472a:	70 6a       	ld.w	r10,r8[0x18]
8002472c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024730:	12 98       	mov	r8,r9
80024732:	a1 78       	lsl	r8,0x1
80024734:	12 08       	add	r8,r9
80024736:	a1 78       	lsl	r8,0x1
80024738:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002473c:	f2 08 00 08 	add	r8,r9,r8
80024740:	11 88       	ld.ub	r8,r8[0x0]
80024742:	30 19       	mov	r9,1
80024744:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024748:	f5 e8 10 08 	or	r8,r10,r8
8002474c:	c1 58       	rjmp	80024776 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
8002474e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024752:	70 6a       	ld.w	r10,r8[0x18]
80024754:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024758:	12 98       	mov	r8,r9
8002475a:	a1 78       	lsl	r8,0x1
8002475c:	12 08       	add	r8,r9
8002475e:	a1 78       	lsl	r8,0x1
80024760:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024764:	f2 08 00 08 	add	r8,r9,r8
80024768:	11 88       	ld.ub	r8,r8[0x0]
8002476a:	30 19       	mov	r9,1
8002476c:	f2 08 09 48 	lsl	r8,r9,r8
80024770:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024772:	f5 e8 00 08 	and	r8,r10,r8
80024776:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002477a:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8002477c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024780:	12 98       	mov	r8,r9
80024782:	a1 78       	lsl	r8,0x1
80024784:	12 08       	add	r8,r9
80024786:	a1 78       	lsl	r8,0x1
80024788:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002478c:	f2 08 00 08 	add	r8,r9,r8
80024790:	11 b9       	ld.ub	r9,r8[0x3]
80024792:	30 18       	mov	r8,1
80024794:	f0 09 18 00 	cp.b	r9,r8
80024798:	c1 51       	brne	800247c2 <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
8002479a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002479e:	70 7a       	ld.w	r10,r8[0x1c]
800247a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247a4:	12 98       	mov	r8,r9
800247a6:	a1 78       	lsl	r8,0x1
800247a8:	12 08       	add	r8,r9
800247aa:	a1 78       	lsl	r8,0x1
800247ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800247b0:	f2 08 00 08 	add	r8,r9,r8
800247b4:	11 88       	ld.ub	r8,r8[0x0]
800247b6:	30 19       	mov	r9,1
800247b8:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800247bc:	f5 e8 10 08 	or	r8,r10,r8
800247c0:	c1 58       	rjmp	800247ea <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
800247c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247c6:	70 7a       	ld.w	r10,r8[0x1c]
800247c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247cc:	12 98       	mov	r8,r9
800247ce:	a1 78       	lsl	r8,0x1
800247d0:	12 08       	add	r8,r9
800247d2:	a1 78       	lsl	r8,0x1
800247d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800247d8:	f2 08 00 08 	add	r8,r9,r8
800247dc:	11 88       	ld.ub	r8,r8[0x0]
800247de:	30 19       	mov	r9,1
800247e0:	f2 08 09 48 	lsl	r8,r9,r8
800247e4:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800247e6:	f5 e8 00 08 	and	r8,r10,r8
800247ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800247ee:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
800247f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247f4:	12 98       	mov	r8,r9
800247f6:	a1 78       	lsl	r8,0x1
800247f8:	12 08       	add	r8,r9
800247fa:	a1 78       	lsl	r8,0x1
800247fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024800:	f2 08 00 08 	add	r8,r9,r8
80024804:	11 c9       	ld.ub	r9,r8[0x4]
80024806:	30 18       	mov	r8,1
80024808:	f0 09 18 00 	cp.b	r9,r8
8002480c:	c1 51       	brne	80024836 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
8002480e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024812:	70 8a       	ld.w	r10,r8[0x20]
80024814:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024818:	12 98       	mov	r8,r9
8002481a:	a1 78       	lsl	r8,0x1
8002481c:	12 08       	add	r8,r9
8002481e:	a1 78       	lsl	r8,0x1
80024820:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024824:	f2 08 00 08 	add	r8,r9,r8
80024828:	11 88       	ld.ub	r8,r8[0x0]
8002482a:	30 19       	mov	r9,1
8002482c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024830:	f5 e8 10 08 	or	r8,r10,r8
80024834:	c1 58       	rjmp	8002485e <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80024836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002483a:	70 8a       	ld.w	r10,r8[0x20]
8002483c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024840:	12 98       	mov	r8,r9
80024842:	a1 78       	lsl	r8,0x1
80024844:	12 08       	add	r8,r9
80024846:	a1 78       	lsl	r8,0x1
80024848:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002484c:	f2 08 00 08 	add	r8,r9,r8
80024850:	11 88       	ld.ub	r8,r8[0x0]
80024852:	30 19       	mov	r9,1
80024854:	f2 08 09 48 	lsl	r8,r9,r8
80024858:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
8002485a:	f5 e8 00 08 	and	r8,r10,r8
8002485e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024862:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024864:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024868:	12 98       	mov	r8,r9
8002486a:	a1 78       	lsl	r8,0x1
8002486c:	12 08       	add	r8,r9
8002486e:	a1 78       	lsl	r8,0x1
80024870:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024874:	f2 08 00 08 	add	r8,r9,r8
80024878:	11 d9       	ld.ub	r9,r8[0x5]
8002487a:	30 18       	mov	r8,1
8002487c:	f0 09 18 00 	cp.b	r9,r8
80024880:	c1 51       	brne	800248aa <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
80024882:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024886:	70 aa       	ld.w	r10,r8[0x28]
80024888:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002488c:	12 98       	mov	r8,r9
8002488e:	a1 78       	lsl	r8,0x1
80024890:	12 08       	add	r8,r9
80024892:	a1 78       	lsl	r8,0x1
80024894:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024898:	f2 08 00 08 	add	r8,r9,r8
8002489c:	11 88       	ld.ub	r8,r8[0x0]
8002489e:	30 19       	mov	r9,1
800248a0:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800248a4:	f5 e8 10 08 	or	r8,r10,r8
800248a8:	c1 58       	rjmp	800248d2 <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800248aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248ae:	70 aa       	ld.w	r10,r8[0x28]
800248b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248b4:	12 98       	mov	r8,r9
800248b6:	a1 78       	lsl	r8,0x1
800248b8:	12 08       	add	r8,r9
800248ba:	a1 78       	lsl	r8,0x1
800248bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800248c0:	f2 08 00 08 	add	r8,r9,r8
800248c4:	11 88       	ld.ub	r8,r8[0x0]
800248c6:	30 19       	mov	r9,1
800248c8:	f2 08 09 48 	lsl	r8,r9,r8
800248cc:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800248ce:	f5 e8 00 08 	and	r8,r10,r8
800248d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800248d6:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
800248d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248dc:	2f f8       	sub	r8,-1
800248de:	ef 48 ff fc 	st.w	r7[-4],r8
800248e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800248ea:	10 39       	cp.w	r9,r8
800248ec:	fe 93 fe d4 	brlo	80024694 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
800248f0:	2f cd       	sub	sp,-16
800248f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800248f6 <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800248f6:	eb cd 40 80 	pushm	r7,lr
800248fa:	1a 97       	mov	r7,sp
800248fc:	20 2d       	sub	sp,8
800248fe:	ef 4c ff fc 	st.w	r7[-4],r12
80024902:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
80024906:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002490a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002490e:	91 c9       	st.w	r8[0x30],r9
}
80024910:	2f ed       	sub	sp,-8
80024912:	e3 cd 80 80 	ldm	sp++,r7,pc

80024916 <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024916:	eb cd 40 80 	pushm	r7,lr
8002491a:	1a 97       	mov	r7,sp
8002491c:	20 2d       	sub	sp,8
8002491e:	ef 4c ff fc 	st.w	r7[-4],r12
80024922:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80024926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002492a:	30 19       	mov	r9,1
8002492c:	f2 08 09 48 	lsl	r8,r9,r8
80024930:	10 99       	mov	r9,r8
80024932:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024936:	91 c9       	st.w	r8[0x30],r9
}
80024938:	2f ed       	sub	sp,-8
8002493a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002493e <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
8002493e:	eb cd 40 80 	pushm	r7,lr
80024942:	1a 97       	mov	r7,sp
80024944:	20 2d       	sub	sp,8
80024946:	ef 4c ff fc 	st.w	r7[-4],r12
8002494a:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
8002494e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024952:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024956:	91 d9       	st.w	r8[0x34],r9
}
80024958:	2f ed       	sub	sp,-8
8002495a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002495e <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002495e:	eb cd 40 80 	pushm	r7,lr
80024962:	1a 97       	mov	r7,sp
80024964:	20 2d       	sub	sp,8
80024966:	ef 4c ff fc 	st.w	r7[-4],r12
8002496a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
8002496e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024972:	30 19       	mov	r9,1
80024974:	f2 08 09 48 	lsl	r8,r9,r8
80024978:	10 99       	mov	r9,r8
8002497a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002497e:	91 d9       	st.w	r8[0x34],r9
}
80024980:	2f ed       	sub	sp,-8
80024982:	e3 cd 80 80 	ldm	sp++,r7,pc

80024986 <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024986:	eb cd 40 80 	pushm	r7,lr
8002498a:	1a 97       	mov	r7,sp
8002498c:	20 2d       	sub	sp,8
8002498e:	ef 4c ff fc 	st.w	r7[-4],r12
80024992:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
80024996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002499a:	70 e9       	ld.w	r9,r8[0x38]
8002499c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249a0:	30 1a       	mov	r10,1
800249a2:	f4 08 09 48 	lsl	r8,r10,r8
800249a6:	f3 e8 00 08 	and	r8,r9,r8
800249aa:	5f 18       	srne	r8
800249ac:	5c 58       	castu.b	r8
}
800249ae:	10 9c       	mov	r12,r8
800249b0:	2f ed       	sub	sp,-8
800249b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800249b6 <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800249b6:	eb cd 40 80 	pushm	r7,lr
800249ba:	1a 97       	mov	r7,sp
800249bc:	20 2d       	sub	sp,8
800249be:	ef 4c ff fc 	st.w	r7[-4],r12
800249c2:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
800249c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800249ce:	91 09       	st.w	r8[0x0],r9
}
800249d0:	2f ed       	sub	sp,-8
800249d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800249d6 <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
800249d6:	eb cd 40 80 	pushm	r7,lr
800249da:	1a 97       	mov	r7,sp
800249dc:	20 2d       	sub	sp,8
800249de:	ef 4c ff fc 	st.w	r7[-4],r12
800249e2:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
800249e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249ea:	30 19       	mov	r9,1
800249ec:	f2 08 09 48 	lsl	r8,r9,r8
800249f0:	10 99       	mov	r9,r8
800249f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249f6:	91 09       	st.w	r8[0x0],r9
}
800249f8:	2f ed       	sub	sp,-8
800249fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800249fe <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800249fe:	eb cd 40 c0 	pushm	r6-r7,lr
80024a02:	1a 97       	mov	r7,sp
80024a04:	20 3d       	sub	sp,12
80024a06:	48 d6       	lddpc	r6,80024a38 <eic_disable_interrupt_lines+0x3a>
80024a08:	1e 26       	rsub	r6,pc
80024a0a:	ef 4c ff f8 	st.w	r7[-8],r12
80024a0e:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024a12:	c1 7e       	rcall	80024640 <cpu_irq_save>
80024a14:	18 98       	mov	r8,r12
80024a16:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
80024a1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024a22:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a28:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024a2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024a2e:	c1 8e       	rcall	8002465e <cpu_irq_restore>
}
80024a30:	2f dd       	sub	sp,-12
80024a32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a36:	00 00       	add	r0,r0
80024a38:	80 02       	ld.sh	r2,r0[0x0]
80024a3a:	48 8c       	lddpc	r12,80024a58 <eic_disable_interrupt_line+0x1c>

80024a3c <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024a3c:	eb cd 40 c0 	pushm	r6-r7,lr
80024a40:	1a 97       	mov	r7,sp
80024a42:	20 3d       	sub	sp,12
80024a44:	48 f6       	lddpc	r6,80024a80 <eic_disable_interrupt_line+0x44>
80024a46:	1e 26       	rsub	r6,pc
80024a48:	ef 4c ff f8 	st.w	r7[-8],r12
80024a4c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024a50:	fe b0 fd f8 	rcall	80024640 <cpu_irq_save>
80024a54:	18 98       	mov	r8,r12
80024a56:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
80024a5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024a5e:	30 19       	mov	r9,1
80024a60:	f2 08 09 48 	lsl	r8,r9,r8
80024a64:	10 99       	mov	r9,r8
80024a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a6a:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024a6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a70:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024a72:	ee fc ff fc 	ld.w	r12,r7[-4]
80024a76:	fe b0 fd f4 	rcall	8002465e <cpu_irq_restore>
}
80024a7a:	2f dd       	sub	sp,-12
80024a7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a80:	80 02       	ld.sh	r2,r0[0x0]
80024a82:	48 ca       	lddpc	r10,80024ab0 <eic_is_interrupt_line_enabled+0x2c>

80024a84 <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024a84:	eb cd 40 80 	pushm	r7,lr
80024a88:	1a 97       	mov	r7,sp
80024a8a:	20 2d       	sub	sp,8
80024a8c:	ef 4c ff fc 	st.w	r7[-4],r12
80024a90:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
80024a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a98:	70 29       	ld.w	r9,r8[0x8]
80024a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a9e:	30 1a       	mov	r10,1
80024aa0:	f4 08 09 48 	lsl	r8,r10,r8
80024aa4:	f3 e8 00 08 	and	r8,r9,r8
80024aa8:	5f 18       	srne	r8
80024aaa:	5c 58       	castu.b	r8
}
80024aac:	10 9c       	mov	r12,r8
80024aae:	2f ed       	sub	sp,-8
80024ab0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ab4 <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024ab4:	eb cd 40 c0 	pushm	r6-r7,lr
80024ab8:	1a 97       	mov	r7,sp
80024aba:	20 3d       	sub	sp,12
80024abc:	48 d6       	lddpc	r6,80024af0 <eic_clear_interrupt_lines+0x3c>
80024abe:	1e 26       	rsub	r6,pc
80024ac0:	ef 4c ff f8 	st.w	r7[-8],r12
80024ac4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024ac8:	fe b0 fd bc 	rcall	80024640 <cpu_irq_save>
80024acc:	18 98       	mov	r8,r12
80024ace:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
80024ad2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ad6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024ada:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ae0:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024ae2:	ee fc ff fc 	ld.w	r12,r7[-4]
80024ae6:	fe b0 fd bc 	rcall	8002465e <cpu_irq_restore>
}
80024aea:	2f dd       	sub	sp,-12
80024aec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024af0:	80 02       	ld.sh	r2,r0[0x0]
80024af2:	49 42       	lddpc	r2,80024b40 <eic_is_interrupt_line_pending+0x4>

80024af4 <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024af4:	eb cd 40 c0 	pushm	r6-r7,lr
80024af8:	1a 97       	mov	r7,sp
80024afa:	20 3d       	sub	sp,12
80024afc:	48 f6       	lddpc	r6,80024b38 <eic_clear_interrupt_line+0x44>
80024afe:	1e 26       	rsub	r6,pc
80024b00:	ef 4c ff f8 	st.w	r7[-8],r12
80024b04:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024b08:	fe b0 fd 9c 	rcall	80024640 <cpu_irq_save>
80024b0c:	18 98       	mov	r8,r12
80024b0e:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80024b12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b16:	30 19       	mov	r9,1
80024b18:	f2 08 09 48 	lsl	r8,r9,r8
80024b1c:	10 99       	mov	r9,r8
80024b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b22:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b28:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024b2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024b2e:	fe b0 fd 98 	rcall	8002465e <cpu_irq_restore>
}
80024b32:	2f dd       	sub	sp,-12
80024b34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b38:	80 02       	ld.sh	r2,r0[0x0]
80024b3a:	49 82       	lddpc	r2,80024b98 <flashc_get_page_count+0x4>

80024b3c <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024b3c:	eb cd 40 80 	pushm	r7,lr
80024b40:	1a 97       	mov	r7,sp
80024b42:	20 2d       	sub	sp,8
80024b44:	ef 4c ff fc 	st.w	r7[-4],r12
80024b48:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80024b4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b50:	70 39       	ld.w	r9,r8[0xc]
80024b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b56:	30 1a       	mov	r10,1
80024b58:	f4 08 09 48 	lsl	r8,r10,r8
80024b5c:	f3 e8 00 08 	and	r8,r9,r8
80024b60:	5f 18       	srne	r8
80024b62:	5c 58       	castu.b	r8
}
80024b64:	10 9c       	mov	r12,r8
80024b66:	2f ed       	sub	sp,-8
80024b68:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b6c <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80024b6c:	eb cd 40 c0 	pushm	r6-r7,lr
80024b70:	1a 97       	mov	r7,sp
80024b72:	48 86       	lddpc	r6,80024b90 <flashc_get_flash_size+0x24>
80024b74:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
80024b76:	fe 68 00 00 	mov	r8,-131072
80024b7a:	70 38       	ld.w	r8,r8[0xc]
80024b7c:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80024b80:	ec f8 08 88 	ld.w	r8,r6[2184]
80024b84:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
80024b88:	10 9c       	mov	r12,r8
80024b8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b8e:	00 00       	add	r0,r0
80024b90:	80 02       	ld.sh	r2,r0[0x0]
80024b92:	49 f8       	lddpc	r8,80024c0c <flashc_get_region_first_page_number+0x4>

80024b94 <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
80024b94:	eb cd 40 c0 	pushm	r6-r7,lr
80024b98:	1a 97       	mov	r7,sp
80024b9a:	48 56       	lddpc	r6,80024bac <flashc_get_page_count+0x18>
80024b9c:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
80024b9e:	f0 16 00 c1 	mcall	r6[772]
80024ba2:	18 98       	mov	r8,r12
80024ba4:	a9 98       	lsr	r8,0x9
}
80024ba6:	10 9c       	mov	r12,r8
80024ba8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024bac:	80 02       	ld.sh	r2,r0[0x0]
80024bae:	4a 20       	lddpc	r0,80024c34 <flashc_get_wait_state>

80024bb0 <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
80024bb0:	eb cd 40 c0 	pushm	r6-r7,lr
80024bb4:	1a 97       	mov	r7,sp
80024bb6:	48 56       	lddpc	r6,80024bc8 <flashc_get_page_count_per_region+0x18>
80024bb8:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
80024bba:	f0 16 00 ff 	mcall	r6[1020]
80024bbe:	18 98       	mov	r8,r12
80024bc0:	a5 88       	lsr	r8,0x4
}
80024bc2:	10 9c       	mov	r12,r8
80024bc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024bc8:	80 02       	ld.sh	r2,r0[0x0]
80024bca:	4a 3c       	lddpc	r12,80024c54 <flashc_set_wait_state+0x8>

80024bcc <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80024bcc:	eb cd 40 e0 	pushm	r5-r7,lr
80024bd0:	1a 97       	mov	r7,sp
80024bd2:	20 1d       	sub	sp,4
80024bd4:	48 c6       	lddpc	r6,80024c04 <flashc_get_page_region+0x38>
80024bd6:	1e 26       	rsub	r6,pc
80024bd8:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80024bdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024be0:	58 08       	cp.w	r8,0
80024be2:	c0 45       	brlt	80024bea <flashc_get_page_region+0x1e>
80024be4:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024be8:	c0 58       	rjmp	80024bf2 <flashc_get_page_region+0x26>
80024bea:	f0 16 01 83 	mcall	r6[1548]
80024bee:	18 98       	mov	r8,r12
80024bf0:	10 95       	mov	r5,r8
80024bf2:	f0 16 01 0c 	mcall	r6[1072]
80024bf6:	18 98       	mov	r8,r12
80024bf8:	ea 08 0d 08 	divu	r8,r5,r8
}
80024bfc:	10 9c       	mov	r12,r8
80024bfe:	2f fd       	sub	sp,-4
80024c00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024c04:	80 02       	ld.sh	r2,r0[0x0]
80024c06:	4a 5a       	lddpc	r10,80024c98 <flashc_set_bus_freq+0x6>

80024c08 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80024c08:	eb cd 40 c0 	pushm	r6-r7,lr
80024c0c:	1a 97       	mov	r7,sp
80024c0e:	20 1d       	sub	sp,4
80024c10:	48 86       	lddpc	r6,80024c30 <flashc_get_region_first_page_number+0x28>
80024c12:	1e 26       	rsub	r6,pc
80024c14:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80024c18:	f0 16 01 0c 	mcall	r6[1072]
80024c1c:	18 99       	mov	r9,r12
80024c1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c22:	f2 08 02 48 	mul	r8,r9,r8
}
80024c26:	10 9c       	mov	r12,r8
80024c28:	2f fd       	sub	sp,-4
80024c2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c2e:	00 00       	add	r0,r0
80024c30:	80 02       	ld.sh	r2,r0[0x0]
80024c32:	4a 96       	lddpc	r6,80024cd4 <flashc_is_ready_int_enabled+0x8>

80024c34 <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
80024c34:	eb cd 40 80 	pushm	r7,lr
80024c38:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
80024c3a:	fe 68 00 00 	mov	r8,-131072
80024c3e:	70 08       	ld.w	r8,r8[0x0]
80024c40:	e2 18 00 40 	andl	r8,0x40,COH
80024c44:	a7 88       	lsr	r8,0x6
}
80024c46:	10 9c       	mov	r12,r8
80024c48:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c4c <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
80024c4c:	eb cd 40 80 	pushm	r7,lr
80024c50:	1a 97       	mov	r7,sp
80024c52:	20 2d       	sub	sp,8
80024c54:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024c58:	fe 68 00 00 	mov	r8,-131072
80024c5c:	70 08       	ld.w	r8,r8[0x0]
80024c5e:	30 09       	mov	r9,0
80024c60:	ef 49 ff fc 	st.w	r7[-4],r9
80024c64:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80024c68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c6c:	5c 58       	castu.b	r8
80024c6e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024c72:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024c76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c7a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80024c7e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024c82:	fe 68 00 00 	mov	r8,-131072
80024c86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c8a:	91 09       	st.w	r8[0x0],r9
}
80024c8c:	2f ed       	sub	sp,-8
80024c8e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024c92 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80024c92:	eb cd 40 c0 	pushm	r6-r7,lr
80024c96:	1a 97       	mov	r7,sp
80024c98:	20 1d       	sub	sp,4
80024c9a:	48 c6       	lddpc	r6,80024cc8 <flashc_set_bus_freq+0x36>
80024c9c:	1e 26       	rsub	r6,pc
80024c9e:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80024ca2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ca6:	e0 69 8a 3f 	mov	r9,35391
80024caa:	ea 19 01 f7 	orh	r9,0x1f7
80024cae:	12 38       	cp.w	r8,r9
80024cb0:	e0 88 00 06 	brls	80024cbc <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80024cb4:	30 1c       	mov	r12,1
80024cb6:	f0 16 00 95 	mcall	r6[596]
80024cba:	c0 48       	rjmp	80024cc2 <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80024cbc:	30 0c       	mov	r12,0
80024cbe:	f0 16 00 95 	mcall	r6[596]
  }
}
80024cc2:	2f fd       	sub	sp,-4
80024cc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cc8:	80 02       	ld.sh	r2,r0[0x0]
80024cca:	4b 20       	lddpc	r0,80024d90 <flashc_is_prog_error_int_enabled+0x16>

80024ccc <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
80024ccc:	eb cd 40 80 	pushm	r7,lr
80024cd0:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
80024cd2:	fe 68 00 00 	mov	r8,-131072
80024cd6:	70 08       	ld.w	r8,r8[0x0]
80024cd8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024cdc:	5c 58       	castu.b	r8
}
80024cde:	10 9c       	mov	r12,r8
80024ce0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ce4 <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
80024ce4:	eb cd 40 80 	pushm	r7,lr
80024ce8:	1a 97       	mov	r7,sp
80024cea:	20 2d       	sub	sp,8
80024cec:	18 98       	mov	r8,r12
80024cee:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024cf2:	fe 68 00 00 	mov	r8,-131072
80024cf6:	70 08       	ld.w	r8,r8[0x0]
80024cf8:	30 09       	mov	r9,0
80024cfa:	ef 49 ff fc 	st.w	r7[-4],r9
80024cfe:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
80024d02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d06:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024d0a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80024d0e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024d12:	fe 68 00 00 	mov	r8,-131072
80024d16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024d1a:	91 09       	st.w	r8[0x0],r9
}
80024d1c:	2f ed       	sub	sp,-8
80024d1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d22 <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
80024d22:	eb cd 40 80 	pushm	r7,lr
80024d26:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80024d28:	fe 68 00 00 	mov	r8,-131072
80024d2c:	70 08       	ld.w	r8,r8[0x0]
80024d2e:	e2 18 00 04 	andl	r8,0x4,COH
80024d32:	5f 18       	srne	r8
80024d34:	5c 58       	castu.b	r8
}
80024d36:	10 9c       	mov	r12,r8
80024d38:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d3c <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
80024d3c:	eb cd 40 80 	pushm	r7,lr
80024d40:	1a 97       	mov	r7,sp
80024d42:	20 2d       	sub	sp,8
80024d44:	18 98       	mov	r8,r12
80024d46:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024d4a:	fe 68 00 00 	mov	r8,-131072
80024d4e:	70 08       	ld.w	r8,r8[0x0]
80024d50:	30 09       	mov	r9,0
80024d52:	ef 49 ff fc 	st.w	r7[-4],r9
80024d56:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
80024d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024d62:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80024d66:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024d6a:	fe 68 00 00 	mov	r8,-131072
80024d6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024d72:	91 09       	st.w	r8[0x0],r9
}
80024d74:	2f ed       	sub	sp,-8
80024d76:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d7a <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
80024d7a:	eb cd 40 80 	pushm	r7,lr
80024d7e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
80024d80:	fe 68 00 00 	mov	r8,-131072
80024d84:	70 08       	ld.w	r8,r8[0x0]
80024d86:	e2 18 00 08 	andl	r8,0x8,COH
80024d8a:	5f 18       	srne	r8
80024d8c:	5c 58       	castu.b	r8
}
80024d8e:	10 9c       	mov	r12,r8
80024d90:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d94 <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
80024d94:	eb cd 40 80 	pushm	r7,lr
80024d98:	1a 97       	mov	r7,sp
80024d9a:	20 2d       	sub	sp,8
80024d9c:	18 98       	mov	r8,r12
80024d9e:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024da2:	fe 68 00 00 	mov	r8,-131072
80024da6:	70 08       	ld.w	r8,r8[0x0]
80024da8:	30 09       	mov	r9,0
80024daa:	ef 49 ff fc 	st.w	r7[-4],r9
80024dae:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
80024db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024db6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024dba:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80024dbe:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80024dc2:	fe 68 00 00 	mov	r8,-131072
80024dc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024dca:	91 09       	st.w	r8[0x0],r9
}
80024dcc:	2f ed       	sub	sp,-8
80024dce:	e3 cd 80 80 	ldm	sp++,r7,pc

80024dd2 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80024dd2:	eb cd 40 80 	pushm	r7,lr
80024dd6:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80024dd8:	fe 68 00 00 	mov	r8,-131072
80024ddc:	70 28       	ld.w	r8,r8[0x8]
80024dde:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024de2:	5c 58       	castu.b	r8
}
80024de4:	10 9c       	mov	r12,r8
80024de6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024dea <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80024dea:	eb cd 40 c0 	pushm	r6-r7,lr
80024dee:	1a 97       	mov	r7,sp
80024df0:	48 66       	lddpc	r6,80024e08 <flashc_default_wait_until_ready+0x1e>
80024df2:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
80024df4:	f0 16 01 a4 	mcall	r6[1680]
80024df8:	18 98       	mov	r8,r12
80024dfa:	ec 18 00 01 	eorl	r8,0x1
80024dfe:	5c 58       	castu.b	r8
80024e00:	cf a1       	brne	80024df4 <flashc_default_wait_until_ready+0xa>
}
80024e02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e06:	00 00       	add	r0,r0
80024e08:	80 02       	ld.sh	r2,r0[0x0]
80024e0a:	4c 76       	lddpc	r6,80024f24 <flashc_no_operation>

80024e0c <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80024e0c:	eb cd 40 80 	pushm	r7,lr
80024e10:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80024e12:	fe 68 00 00 	mov	r8,-131072
80024e16:	70 28       	ld.w	r8,r8[0x8]
80024e18:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
80024e1c:	10 9c       	mov	r12,r8
80024e1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e22 <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
80024e22:	eb cd 40 c0 	pushm	r6-r7,lr
80024e26:	1a 97       	mov	r7,sp
80024e28:	48 66       	lddpc	r6,80024e40 <flashc_is_lock_error+0x1e>
80024e2a:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
80024e2c:	ec f8 00 54 	ld.w	r8,r6[84]
80024e30:	70 08       	ld.w	r8,r8[0x0]
80024e32:	e2 18 00 04 	andl	r8,0x4,COH
80024e36:	5f 18       	srne	r8
80024e38:	5c 58       	castu.b	r8
}
80024e3a:	10 9c       	mov	r12,r8
80024e3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e40:	80 02       	ld.sh	r2,r0[0x0]
80024e42:	4c ae       	lddpc	lr,80024f68 <flashc_is_security_bit_active+0xc>

80024e44 <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
80024e44:	eb cd 40 c0 	pushm	r6-r7,lr
80024e48:	1a 97       	mov	r7,sp
80024e4a:	48 76       	lddpc	r6,80024e64 <flashc_is_programming_error+0x20>
80024e4c:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
80024e4e:	ec f8 00 54 	ld.w	r8,r6[84]
80024e52:	70 08       	ld.w	r8,r8[0x0]
80024e54:	e2 18 00 08 	andl	r8,0x8,COH
80024e58:	5f 18       	srne	r8
80024e5a:	5c 58       	castu.b	r8
}
80024e5c:	10 9c       	mov	r12,r8
80024e5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e62:	00 00       	add	r0,r0
80024e64:	80 02       	ld.sh	r2,r0[0x0]
80024e66:	4c d0       	lddpc	r0,80024f98 <flashc_get_bootloader_protected_size+0x8>

80024e68 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
80024e68:	eb cd 40 80 	pushm	r7,lr
80024e6c:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
80024e6e:	fe 68 00 00 	mov	r8,-131072
80024e72:	70 18       	ld.w	r8,r8[0x4]
80024e74:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80024e78:	10 9c       	mov	r12,r8
80024e7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e7e <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
80024e7e:	eb cd 40 80 	pushm	r7,lr
80024e82:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
80024e84:	fe 68 00 00 	mov	r8,-131072
80024e88:	70 18       	ld.w	r8,r8[0x4]
80024e8a:	e4 18 00 ff 	andh	r8,0xff
80024e8e:	e0 18 ff 00 	andl	r8,0xff00
80024e92:	a9 88       	lsr	r8,0x8
}
80024e94:	10 9c       	mov	r12,r8
80024e96:	e3 cd 80 80 	ldm	sp++,r7,pc

80024e9a <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
80024e9a:	eb cd 40 c0 	pushm	r6-r7,lr
80024e9e:	1a 97       	mov	r7,sp
80024ea0:	20 3d       	sub	sp,12
80024ea2:	4a 06       	lddpc	r6,80024f20 <flashc_issue_command+0x86>
80024ea4:	1e 26       	rsub	r6,pc
80024ea6:	ef 4c ff f8 	st.w	r7[-8],r12
80024eaa:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
80024eae:	ec f8 04 8c 	ld.w	r8,r6[1164]
80024eb2:	70 08       	ld.w	r8,r8[0x0]
80024eb4:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80024eb6:	fe 68 00 00 	mov	r8,-131072
80024eba:	70 18       	ld.w	r8,r8[0x4]
80024ebc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
80024ec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ec4:	5c 58       	castu.b	r8
80024ec6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024eca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024ece:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ed2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024ed6:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80024eda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024ede:	58 08       	cp.w	r8,0
80024ee0:	c0 b5       	brlt	80024ef6 <flashc_issue_command+0x5c>
80024ee2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024ee6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80024eea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024eee:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80024ef2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80024ef6:	3a 58       	mov	r8,-91
80024ef8:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80024efc:	fe 68 00 00 	mov	r8,-131072
80024f00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024f04:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
80024f06:	c8 3f       	rcall	80024e0c <flashc_get_error_status>
80024f08:	18 99       	mov	r9,r12
80024f0a:	ec f8 00 54 	ld.w	r8,r6[84]
80024f0e:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
80024f10:	ec f8 04 8c 	ld.w	r8,r6[1164]
80024f14:	70 08       	ld.w	r8,r8[0x0]
80024f16:	5d 18       	icall	r8
}
80024f18:	2f dd       	sub	sp,-12
80024f1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f1e:	00 00       	add	r0,r0
80024f20:	80 02       	ld.sh	r2,r0[0x0]
80024f22:	4d 28       	lddpc	r8,80025068 <flashc_set_bootloader_protected_size+0x94>

80024f24 <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80024f24:	eb cd 40 c0 	pushm	r6-r7,lr
80024f28:	1a 97       	mov	r7,sp
80024f2a:	48 56       	lddpc	r6,80024f3c <flashc_no_operation+0x18>
80024f2c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
80024f2e:	3f fb       	mov	r11,-1
80024f30:	30 0c       	mov	r12,0
80024f32:	f0 16 00 28 	mcall	r6[160]
}
80024f36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f3a:	00 00       	add	r0,r0
80024f3c:	80 02       	ld.sh	r2,r0[0x0]
80024f3e:	4d b0       	lddpc	r0,800250a8 <flashc_lock_external_privileged_fetch+0x14>

80024f40 <flashc_erase_all>:


void flashc_erase_all(void)
{
80024f40:	eb cd 40 c0 	pushm	r6-r7,lr
80024f44:	1a 97       	mov	r7,sp
80024f46:	48 56       	lddpc	r6,80024f58 <flashc_erase_all+0x18>
80024f48:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
80024f4a:	3f fb       	mov	r11,-1
80024f4c:	30 6c       	mov	r12,6
80024f4e:	f0 16 00 28 	mcall	r6[160]
}
80024f52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f56:	00 00       	add	r0,r0
80024f58:	80 02       	ld.sh	r2,r0[0x0]
80024f5a:	4d cc       	lddpc	r12,800250c8 <flashc_is_page_region_locked+0x4>

80024f5c <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
80024f5c:	eb cd 40 80 	pushm	r7,lr
80024f60:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
80024f62:	fe 68 00 00 	mov	r8,-131072
80024f66:	70 28       	ld.w	r8,r8[0x8]
80024f68:	e2 18 00 10 	andl	r8,0x10,COH
80024f6c:	5f 18       	srne	r8
80024f6e:	5c 58       	castu.b	r8
}
80024f70:	10 9c       	mov	r12,r8
80024f72:	e3 cd 80 80 	ldm	sp++,r7,pc

80024f76 <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
80024f76:	eb cd 40 c0 	pushm	r6-r7,lr
80024f7a:	1a 97       	mov	r7,sp
80024f7c:	48 46       	lddpc	r6,80024f8c <flashc_activate_security_bit+0x16>
80024f7e:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
80024f80:	3f fb       	mov	r11,-1
80024f82:	30 9c       	mov	r12,9
80024f84:	f0 16 00 28 	mcall	r6[160]
}
80024f88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f8c:	80 02       	ld.sh	r2,r0[0x0]
80024f8e:	4e 02       	lddpc	r2,8002510c <flashc_is_region_locked+0x18>

80024f90 <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
80024f90:	eb cd 40 c0 	pushm	r6-r7,lr
80024f94:	1a 97       	mov	r7,sp
80024f96:	20 1d       	sub	sp,4
80024f98:	48 e6       	lddpc	r6,80024fd0 <flashc_get_bootloader_protected_size+0x40>
80024f9a:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
80024f9c:	30 3b       	mov	r11,3
80024f9e:	31 1c       	mov	r12,17
80024fa0:	f0 16 01 24 	mcall	r6[1168]
80024fa4:	14 98       	mov	r8,r10
80024fa6:	16 99       	mov	r9,r11
80024fa8:	f0 08 11 07 	rsub	r8,r8,7
80024fac:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
80024fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024fb4:	58 08       	cp.w	r8,0
80024fb6:	c0 80       	breq	80024fc6 <flashc_get_bootloader_protected_size+0x36>
80024fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024fbc:	e0 69 02 00 	mov	r9,512
80024fc0:	f2 08 09 48 	lsl	r8,r9,r8
80024fc4:	c0 28       	rjmp	80024fc8 <flashc_get_bootloader_protected_size+0x38>
80024fc6:	30 08       	mov	r8,0
}
80024fc8:	10 9c       	mov	r12,r8
80024fca:	2f fd       	sub	sp,-4
80024fcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fd0:	80 02       	ld.sh	r2,r0[0x0]
80024fd2:	4e 1e       	lddpc	lr,80025154 <flashc_lock_page_region+0x2e>

80024fd4 <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
80024fd4:	eb cd 40 c0 	pushm	r6-r7,lr
80024fd8:	1a 97       	mov	r7,sp
80024fda:	20 7d       	sub	sp,28
80024fdc:	4a 46       	lddpc	r6,8002506c <flashc_set_bootloader_protected_size+0x98>
80024fde:	1e 26       	rsub	r6,pc
80024fe0:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80024fe4:	ee fa ff e4 	ld.w	r10,r7[-28]
80024fe8:	58 0a       	cp.w	r10,0
80024fea:	c3 40       	breq	80025052 <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
80024fec:	ee fa ff e4 	ld.w	r10,r7[-28]
80024ff0:	ef 4a ff f8 	st.w	r7[-8],r10
80024ff4:	e0 6a 04 00 	mov	r10,1024
80024ff8:	ef 4a ff fc 	st.w	r7[-4],r10
80024ffc:	ee fa ff f8 	ld.w	r10,r7[-8]
80025000:	ee fb ff fc 	ld.w	r11,r7[-4]
80025004:	f4 0b 0c 4a 	max	r10,r10,r11
80025008:	ef 4a ff f4 	st.w	r7[-12],r10
8002500c:	ee fa ff f4 	ld.w	r10,r7[-12]
80025010:	ef 4a ff ec 	st.w	r7[-20],r10
80025014:	e0 7a 00 00 	mov	r10,65536
80025018:	ef 4a ff f0 	st.w	r7[-16],r10
8002501c:	ee fa ff ec 	ld.w	r10,r7[-20]
80025020:	ee fb ff f0 	ld.w	r11,r7[-16]
80025024:	f4 0b 0d 4a 	min	r10,r10,r11
80025028:	ef 4a ff e8 	st.w	r7[-24],r10
8002502c:	ee fa ff e8 	ld.w	r10,r7[-24]
80025030:	f4 ca fe 01 	sub	r10,r10,-511
80025034:	f4 cb fe 01 	sub	r11,r10,-511
80025038:	58 0a       	cp.w	r10,0
8002503a:	f6 0a 17 50 	movlt	r10,r11
8002503e:	a9 5a       	asr	r10,0x9
80025040:	a1 7a       	lsl	r10,0x1
80025042:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80025044:	f4 0a 12 00 	clz	r10,r10
80025048:	21 8a       	sub	r10,24
8002504a:	14 98       	mov	r8,r10
8002504c:	bf 5a       	asr	r10,0x1f
8002504e:	14 99       	mov	r9,r10
80025050:	c0 38       	rjmp	80025056 <flashc_set_bootloader_protected_size+0x82>
80025052:	30 78       	mov	r8,7
80025054:	30 09       	mov	r9,0
80025056:	30 3b       	mov	r11,3
80025058:	31 1c       	mov	r12,17
8002505a:	f0 16 01 51 	mcall	r6[1348]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
8002505e:	f0 16 01 62 	mcall	r6[1416]
80025062:	18 98       	mov	r8,r12
}
80025064:	10 9c       	mov	r12,r8
80025066:	2f 9d       	sub	sp,-28
80025068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002506c:	80 02       	ld.sh	r2,r0[0x0]
8002506e:	4e 62       	lddpc	r2,80025204 <flashc_read_gp_fuse_bit>

80025070 <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
80025070:	eb cd 40 c0 	pushm	r6-r7,lr
80025074:	1a 97       	mov	r7,sp
80025076:	48 76       	lddpc	r6,80025090 <flashc_is_external_privileged_fetch_locked+0x20>
80025078:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
8002507a:	31 0c       	mov	r12,16
8002507c:	f0 16 00 ed 	mcall	r6[948]
80025080:	18 98       	mov	r8,r12
80025082:	ec 18 00 01 	eorl	r8,0x1
80025086:	5c 58       	castu.b	r8
80025088:	5c 58       	castu.b	r8
}
8002508a:	10 9c       	mov	r12,r8
8002508c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025090:	80 02       	ld.sh	r2,r0[0x0]
80025092:	4e fc       	lddpc	r12,8002524c <flashc_read_gp_fuse_bit+0x48>

80025094 <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
80025094:	eb cd 40 c0 	pushm	r6-r7,lr
80025098:	1a 97       	mov	r7,sp
8002509a:	20 1d       	sub	sp,4
8002509c:	48 96       	lddpc	r6,800250c0 <flashc_lock_external_privileged_fetch+0x2c>
8002509e:	1e 26       	rsub	r6,pc
800250a0:	18 98       	mov	r8,r12
800250a2:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
800250a6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800250aa:	ec 18 00 01 	eorl	r8,0x1
800250ae:	5c 58       	castu.b	r8
800250b0:	5c 58       	castu.b	r8
800250b2:	10 9b       	mov	r11,r8
800250b4:	31 0c       	mov	r12,16
800250b6:	f0 16 01 13 	mcall	r6[1100]
}
800250ba:	2f fd       	sub	sp,-4
800250bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250c0:	80 02       	ld.sh	r2,r0[0x0]
800250c2:	4f 22       	lddpc	r2,80025288 <flashc_read_gp_fuse_bitfield+0x20>

800250c4 <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
800250c4:	eb cd 40 c0 	pushm	r6-r7,lr
800250c8:	1a 97       	mov	r7,sp
800250ca:	20 1d       	sub	sp,4
800250cc:	48 96       	lddpc	r6,800250f0 <flashc_is_page_region_locked+0x2c>
800250ce:	1e 26       	rsub	r6,pc
800250d0:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
800250d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800250d8:	f0 16 01 8a 	mcall	r6[1576]
800250dc:	18 98       	mov	r8,r12
800250de:	10 9c       	mov	r12,r8
800250e0:	f0 16 01 3a 	mcall	r6[1256]
800250e4:	18 98       	mov	r8,r12
}
800250e6:	10 9c       	mov	r12,r8
800250e8:	2f fd       	sub	sp,-4
800250ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250ee:	00 00       	add	r0,r0
800250f0:	80 02       	ld.sh	r2,r0[0x0]
800250f2:	4f 52       	lddpc	r2,800252c4 <flashc_read_gp_fuse_bitfield+0x5c>

800250f4 <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
800250f4:	eb cd 40 80 	pushm	r7,lr
800250f8:	1a 97       	mov	r7,sp
800250fa:	20 1d       	sub	sp,4
800250fc:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
80025100:	fe 68 00 00 	mov	r8,-131072
80025104:	70 29       	ld.w	r9,r8[0x8]
80025106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002510a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002510e:	e0 7a 00 00 	mov	r10,65536
80025112:	f4 08 09 48 	lsl	r8,r10,r8
80025116:	f3 e8 00 08 	and	r8,r9,r8
8002511a:	5f 18       	srne	r8
8002511c:	5c 58       	castu.b	r8
}
8002511e:	10 9c       	mov	r12,r8
80025120:	2f fd       	sub	sp,-4
80025122:	e3 cd 80 80 	ldm	sp++,r7,pc

80025126 <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80025126:	eb cd 40 c0 	pushm	r6-r7,lr
8002512a:	1a 97       	mov	r7,sp
8002512c:	20 2d       	sub	sp,8
8002512e:	48 d6       	lddpc	r6,80025160 <flashc_lock_page_region+0x3a>
80025130:	1e 26       	rsub	r6,pc
80025132:	ef 4c ff fc 	st.w	r7[-4],r12
80025136:	16 98       	mov	r8,r11
80025138:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
8002513c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025140:	30 08       	mov	r8,0
80025142:	f0 09 18 00 	cp.b	r9,r8
80025146:	c0 30       	breq	8002514c <flashc_lock_page_region+0x26>
80025148:	30 48       	mov	r8,4
8002514a:	c0 28       	rjmp	8002514e <flashc_lock_page_region+0x28>
8002514c:	30 58       	mov	r8,5
8002514e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025152:	10 9c       	mov	r12,r8
80025154:	f0 16 00 28 	mcall	r6[160]
}
80025158:	2f ed       	sub	sp,-8
8002515a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002515e:	00 00       	add	r0,r0
80025160:	80 02       	ld.sh	r2,r0[0x0]
80025162:	4f b4       	lddpc	r4,8002534c <flashc_read_gp_fuse_byte+0x14>

80025164 <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
80025164:	eb cd 40 e0 	pushm	r5-r7,lr
80025168:	1a 97       	mov	r7,sp
8002516a:	20 2d       	sub	sp,8
8002516c:	48 b6       	lddpc	r6,80025198 <flashc_lock_region+0x34>
8002516e:	1e 26       	rsub	r6,pc
80025170:	ef 4c ff fc 	st.w	r7[-4],r12
80025174:	16 98       	mov	r8,r11
80025176:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
8002517a:	ef 35 ff f8 	ld.ub	r5,r7[-8]
8002517e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025182:	f0 16 01 71 	mcall	r6[1476]
80025186:	18 98       	mov	r8,r12
80025188:	0a 9b       	mov	r11,r5
8002518a:	10 9c       	mov	r12,r8
8002518c:	f0 16 01 f0 	mcall	r6[1984]
}
80025190:	2f ed       	sub	sp,-8
80025192:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025196:	00 00       	add	r0,r0
80025198:	80 02       	ld.sh	r2,r0[0x0]
8002519a:	4f f2       	lddpc	r2,80025394 <flashc_read_gp_fuse_byte+0x5c>

8002519c <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
8002519c:	eb cd 40 c0 	pushm	r6-r7,lr
800251a0:	1a 97       	mov	r7,sp
800251a2:	20 3d       	sub	sp,12
800251a4:	49 76       	lddpc	r6,80025200 <flashc_lock_all_regions+0x64>
800251a6:	1e 26       	rsub	r6,pc
800251a8:	18 98       	mov	r8,r12
800251aa:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
800251ae:	30 08       	mov	r8,0
800251b0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
800251b4:	31 08       	mov	r8,16
800251b6:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
800251ba:	c1 68       	rjmp	800251e6 <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
800251bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800251c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800251c4:	20 19       	sub	r9,1
800251c6:	ef 49 ff fc 	st.w	r7[-4],r9
800251ca:	10 9b       	mov	r11,r8
800251cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800251d0:	f0 16 01 52 	mcall	r6[1352]
    error_status |= flashc_error_status;
800251d4:	ec f8 00 54 	ld.w	r8,r6[84]
800251d8:	70 08       	ld.w	r8,r8[0x0]
800251da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800251de:	f3 e8 10 08 	or	r8,r9,r8
800251e2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
800251e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800251ea:	58 08       	cp.w	r8,0
800251ec:	ce 81       	brne	800251bc <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800251ee:	ec f8 00 54 	ld.w	r8,r6[84]
800251f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800251f6:	91 09       	st.w	r8[0x0],r9
}
800251f8:	2f dd       	sub	sp,-12
800251fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800251fe:	00 00       	add	r0,r0
80025200:	80 02       	ld.sh	r2,r0[0x0]
80025202:	50 2a       	stdsp	sp[0x8],r10

80025204 <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
80025204:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025208:	1a 97       	mov	r7,sp
8002520a:	20 1d       	sub	sp,4
8002520c:	49 66       	lddpc	r6,80025264 <flashc_read_gp_fuse_bit+0x60>
8002520e:	1e 26       	rsub	r6,pc
80025210:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80025214:	f0 16 00 72 	mcall	r6[456]
80025218:	14 98       	mov	r8,r10
8002521a:	16 99       	mov	r9,r11
8002521c:	ee fa ff fc 	ld.w	r10,r7[-4]
80025220:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80025224:	14 9b       	mov	r11,r10
80025226:	e2 1b 00 20 	andl	r11,0x20,COH
8002522a:	30 0c       	mov	r12,0
8002522c:	f2 05 15 01 	lsl	r5,r9,0x1
80025230:	14 9e       	mov	lr,r10
80025232:	ee 1e ff ff 	eorh	lr,0xffff
80025236:	ec 1e ff ff 	eorl	lr,0xffff
8002523a:	ea 0e 09 4e 	lsl	lr,r5,lr
8002523e:	f0 0a 0a 42 	lsr	r2,r8,r10
80025242:	fd e2 10 02 	or	r2,lr,r2
80025246:	f2 0a 0a 43 	lsr	r3,r9,r10
8002524a:	58 0b       	cp.w	r11,0
8002524c:	e6 02 17 10 	movne	r2,r3
80025250:	f8 03 17 10 	movne	r3,r12
80025254:	04 98       	mov	r8,r2
80025256:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002525a:	5c 58       	castu.b	r8
}
8002525c:	10 9c       	mov	r12,r8
8002525e:	2f fd       	sub	sp,-4
80025260:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025264:	80 02       	ld.sh	r2,r0[0x0]
80025266:	50 92       	stdsp	sp[0x24],r2

80025268 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
80025268:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002526c:	1a 97       	mov	r7,sp
8002526e:	20 5d       	sub	sp,20
80025270:	4b 16       	lddpc	r6,80025334 <flashc_read_gp_fuse_bitfield+0xcc>
80025272:	1e 26       	rsub	r6,pc
80025274:	ef 4c ff f0 	st.w	r7[-16],r12
80025278:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
8002527c:	f0 16 00 72 	mcall	r6[456]
80025280:	14 98       	mov	r8,r10
80025282:	16 99       	mov	r9,r11
80025284:	ee fa ff f0 	ld.w	r10,r7[-16]
80025288:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8002528c:	14 9b       	mov	r11,r10
8002528e:	e2 1b 00 20 	andl	r11,0x20,COH
80025292:	30 0c       	mov	r12,0
80025294:	f2 05 15 01 	lsl	r5,r9,0x1
80025298:	14 9e       	mov	lr,r10
8002529a:	ee 1e ff ff 	eorh	lr,0xffff
8002529e:	ec 1e ff ff 	eorl	lr,0xffff
800252a2:	ea 0e 09 4e 	lsl	lr,r5,lr
800252a6:	f0 0a 0a 42 	lsr	r2,r8,r10
800252aa:	fd e2 10 02 	or	r2,lr,r2
800252ae:	f2 0a 0a 43 	lsr	r3,r9,r10
800252b2:	58 0b       	cp.w	r11,0
800252b4:	e6 02 17 10 	movne	r2,r3
800252b8:	f8 03 17 10 	movne	r3,r12
800252bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800252c0:	ef 48 ff f8 	st.w	r7[-8],r8
800252c4:	34 08       	mov	r8,64
800252c6:	ef 48 ff fc 	st.w	r7[-4],r8
800252ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800252ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800252d2:	f0 09 0d 48 	min	r8,r8,r9
800252d6:	ef 48 ff f4 	st.w	r7[-12],r8
800252da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252de:	10 99       	mov	r9,r8
800252e0:	e2 19 00 20 	andl	r9,0x20,COH
800252e4:	30 0a       	mov	r10,0
800252e6:	30 1b       	mov	r11,1
800252e8:	f6 0c 16 01 	lsr	r12,r11,0x1
800252ec:	10 9b       	mov	r11,r8
800252ee:	ee 1b ff ff 	eorh	r11,0xffff
800252f2:	ec 1b ff ff 	eorl	r11,0xffff
800252f6:	f8 0b 0a 4b 	lsr	r11,r12,r11
800252fa:	30 0c       	mov	r12,0
800252fc:	f8 08 09 41 	lsl	r1,r12,r8
80025300:	f7 e1 10 01 	or	r1,r11,r1
80025304:	30 1b       	mov	r11,1
80025306:	f6 08 09 40 	lsl	r0,r11,r8
8002530a:	58 09       	cp.w	r9,0
8002530c:	e0 01 17 10 	movne	r1,r0
80025310:	f4 00 17 10 	movne	r0,r10
80025314:	3f f8       	mov	r8,-1
80025316:	3f f9       	mov	r9,-1
80025318:	e0 08 00 0a 	add	r10,r0,r8
8002531c:	e2 09 00 4b 	adc	r11,r1,r9
80025320:	e5 ea 00 08 	and	r8,r2,r10
80025324:	e7 eb 00 09 	and	r9,r3,r11
}
80025328:	10 9a       	mov	r10,r8
8002532a:	12 9b       	mov	r11,r9
8002532c:	2f bd       	sub	sp,-20
8002532e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80025332:	00 00       	add	r0,r0
80025334:	80 02       	ld.sh	r2,r0[0x0]
80025336:	50 f6       	stdsp	sp[0x3c],r6

80025338 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
80025338:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002533c:	1a 97       	mov	r7,sp
8002533e:	20 1d       	sub	sp,4
80025340:	49 66       	lddpc	r6,80025398 <flashc_read_gp_fuse_byte+0x60>
80025342:	1e 26       	rsub	r6,pc
80025344:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
80025348:	f0 16 00 72 	mcall	r6[456]
8002534c:	14 98       	mov	r8,r10
8002534e:	16 99       	mov	r9,r11
80025350:	ee fa ff fc 	ld.w	r10,r7[-4]
80025354:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80025358:	a3 7a       	lsl	r10,0x3
8002535a:	14 9b       	mov	r11,r10
8002535c:	e2 1b 00 20 	andl	r11,0x20,COH
80025360:	30 0c       	mov	r12,0
80025362:	f2 05 15 01 	lsl	r5,r9,0x1
80025366:	14 9e       	mov	lr,r10
80025368:	ee 1e ff ff 	eorh	lr,0xffff
8002536c:	ec 1e ff ff 	eorl	lr,0xffff
80025370:	ea 0e 09 4e 	lsl	lr,r5,lr
80025374:	f0 0a 0a 42 	lsr	r2,r8,r10
80025378:	fd e2 10 02 	or	r2,lr,r2
8002537c:	f2 0a 0a 43 	lsr	r3,r9,r10
80025380:	58 0b       	cp.w	r11,0
80025382:	e6 02 17 10 	movne	r2,r3
80025386:	f8 03 17 10 	movne	r3,r12
8002538a:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
8002538e:	10 9c       	mov	r12,r8
80025390:	2f fd       	sub	sp,-4
80025392:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025396:	00 00       	add	r0,r0
80025398:	80 02       	ld.sh	r2,r0[0x0]
8002539a:	51 c6       	stdsp	sp[0x70],r6

8002539c <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
8002539c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
800253a0:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
800253a2:	fe 6c 00 00 	mov	r12,-131072
800253a6:	78 6c       	ld.w	r12,r12[0x18]
800253a8:	18 9a       	mov	r10,r12
800253aa:	30 0b       	mov	r11,0
800253ac:	fe 6c 00 00 	mov	r12,-131072
800253b0:	78 5c       	ld.w	r12,r12[0x14]
800253b2:	18 92       	mov	r2,r12
800253b4:	30 03       	mov	r3,0
800253b6:	e4 09 15 00 	lsl	r9,r2,0x0
800253ba:	30 08       	mov	r8,0
800253bc:	f5 e8 10 02 	or	r2,r10,r8
800253c0:	f7 e9 10 03 	or	r3,r11,r9
800253c4:	04 98       	mov	r8,r2
800253c6:	06 99       	mov	r9,r3
}
800253c8:	10 9a       	mov	r10,r8
800253ca:	12 9b       	mov	r11,r9
800253cc:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

800253d0 <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
800253d0:	eb cd 40 c0 	pushm	r6-r7,lr
800253d4:	1a 97       	mov	r7,sp
800253d6:	20 2d       	sub	sp,8
800253d8:	49 06       	lddpc	r6,80025418 <flashc_erase_gp_fuse_bit+0x48>
800253da:	1e 26       	rsub	r6,pc
800253dc:	ef 4c ff fc 	st.w	r7[-4],r12
800253e0:	16 98       	mov	r8,r11
800253e2:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
800253e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800253ea:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800253ee:	10 9b       	mov	r11,r8
800253f0:	30 8c       	mov	r12,8
800253f2:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
800253f6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800253fa:	30 08       	mov	r8,0
800253fc:	f0 09 18 00 	cp.b	r9,r8
80025400:	c0 70       	breq	8002540e <flashc_erase_gp_fuse_bit+0x3e>
80025402:	ee fc ff fc 	ld.w	r12,r7[-4]
80025406:	f0 16 00 ed 	mcall	r6[948]
8002540a:	18 98       	mov	r8,r12
8002540c:	c0 28       	rjmp	80025410 <flashc_erase_gp_fuse_bit+0x40>
8002540e:	30 18       	mov	r8,1
}
80025410:	10 9c       	mov	r12,r8
80025412:	2f ed       	sub	sp,-8
80025414:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025418:	80 02       	ld.sh	r2,r0[0x0]
8002541a:	52 5e       	stdsp	sp[0x94],lr

8002541c <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
8002541c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025420:	1a 97       	mov	r7,sp
80025422:	20 8d       	sub	sp,32
80025424:	4c 36       	lddpc	r6,80025530 <flashc_erase_gp_fuse_bitfield+0x114>
80025426:	1e 26       	rsub	r6,pc
80025428:	ef 4c ff e8 	st.w	r7[-24],r12
8002542c:	ef 4b ff e4 	st.w	r7[-28],r11
80025430:	14 98       	mov	r8,r10
80025432:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
80025436:	30 08       	mov	r8,0
80025438:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002543c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025440:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025444:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025448:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002544c:	ef 48 ff f8 	st.w	r7[-8],r8
80025450:	34 08       	mov	r8,64
80025452:	ef 48 ff fc 	st.w	r7[-4],r8
80025456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002545a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002545e:	f0 09 0d 48 	min	r8,r8,r9
80025462:	ef 48 ff f4 	st.w	r7[-12],r8
80025466:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002546a:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
8002546e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025472:	ef 48 ff f0 	st.w	r7[-16],r8
80025476:	c1 48       	rjmp	8002549e <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025478:	30 0b       	mov	r11,0
8002547a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002547e:	f0 16 00 e4 	mcall	r6[912]
    error_status |= flashc_error_status;
80025482:	ec f8 00 54 	ld.w	r8,r6[84]
80025486:	70 08       	ld.w	r8,r8[0x0]
80025488:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002548c:	f3 e8 10 08 	or	r8,r9,r8
80025490:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
80025494:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025498:	2f f8       	sub	r8,-1
8002549a:	ef 48 ff f0 	st.w	r7[-16],r8
8002549e:	ee f9 ff e8 	ld.w	r9,r7[-24]
800254a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800254a6:	10 09       	add	r9,r8
800254a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254ac:	10 39       	cp.w	r9,r8
800254ae:	fe 9b ff e5 	brhi	80025478 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800254b2:	ec f8 00 54 	ld.w	r8,r6[84]
800254b6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800254ba:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
800254bc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800254c0:	30 08       	mov	r8,0
800254c2:	f0 09 18 00 	cp.b	r9,r8
800254c6:	c3 00       	breq	80025526 <flashc_erase_gp_fuse_bitfield+0x10a>
800254c8:	ee fb ff e4 	ld.w	r11,r7[-28]
800254cc:	ee fc ff e8 	ld.w	r12,r7[-24]
800254d0:	f0 16 01 24 	mcall	r6[1168]
800254d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800254d8:	10 99       	mov	r9,r8
800254da:	e2 19 00 20 	andl	r9,0x20,COH
800254de:	30 0c       	mov	r12,0
800254e0:	30 1e       	mov	lr,1
800254e2:	fc 05 16 01 	lsr	r5,lr,0x1
800254e6:	10 9e       	mov	lr,r8
800254e8:	ee 1e ff ff 	eorh	lr,0xffff
800254ec:	ec 1e ff ff 	eorl	lr,0xffff
800254f0:	ea 0e 0a 4e 	lsr	lr,r5,lr
800254f4:	30 05       	mov	r5,0
800254f6:	ea 08 09 43 	lsl	r3,r5,r8
800254fa:	fd e3 10 03 	or	r3,lr,r3
800254fe:	30 1e       	mov	lr,1
80025500:	fc 08 09 42 	lsl	r2,lr,r8
80025504:	58 09       	cp.w	r9,0
80025506:	e4 03 17 10 	movne	r3,r2
8002550a:	f8 02 17 10 	movne	r2,r12
8002550e:	3f f8       	mov	r8,-1
80025510:	3f f9       	mov	r9,-1
80025512:	e4 08 00 08 	add	r8,r2,r8
80025516:	e6 09 00 49 	adc	r9,r3,r9
8002551a:	10 3a       	cp.w	r10,r8
8002551c:	f2 0b 13 00 	cpc	r11,r9
80025520:	5f 08       	sreq	r8
80025522:	5c 58       	castu.b	r8
80025524:	c0 28       	rjmp	80025528 <flashc_erase_gp_fuse_bitfield+0x10c>
80025526:	30 18       	mov	r8,1
}
80025528:	10 9c       	mov	r12,r8
8002552a:	2f 8d       	sub	sp,-32
8002552c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025530:	80 02       	ld.sh	r2,r0[0x0]
80025532:	52 aa       	stdsp	sp[0xa8],r10

80025534 <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
80025534:	eb cd 40 c0 	pushm	r6-r7,lr
80025538:	1a 97       	mov	r7,sp
8002553a:	20 6d       	sub	sp,24
8002553c:	4b 26       	lddpc	r6,80025604 <flashc_erase_gp_fuse_byte+0xd0>
8002553e:	1e 26       	rsub	r6,pc
80025540:	ef 4c ff ec 	st.w	r7[-20],r12
80025544:	16 98       	mov	r8,r11
80025546:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
8002554a:	f0 16 00 72 	mcall	r6[456]
8002554e:	14 98       	mov	r8,r10
80025550:	16 99       	mov	r9,r11
80025552:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
80025556:	30 0c       	mov	r12,0
80025558:	f0 16 00 ca 	mcall	r6[808]
  error_status = flashc_error_status;
8002555c:	ec f8 00 54 	ld.w	r8,r6[84]
80025560:	70 08       	ld.w	r8,r8[0x0]
80025562:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
80025566:	30 08       	mov	r8,0
80025568:	ef 48 ff f4 	st.w	r7[-12],r8
8002556c:	c2 b8       	rjmp	800255c2 <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
8002556e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025572:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025576:	10 39       	cp.w	r9,r8
80025578:	c1 10       	breq	8002559a <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
8002557a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002557e:	10 9b       	mov	r11,r8
80025580:	ee fc ff f4 	ld.w	r12,r7[-12]
80025584:	f0 16 00 86 	mcall	r6[536]
      error_status |= flashc_error_status;
80025588:	ec f8 00 54 	ld.w	r8,r6[84]
8002558c:	70 08       	ld.w	r8,r8[0x0]
8002558e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025592:	f3 e8 10 08 	or	r8,r9,r8
80025596:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
8002559a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002559e:	2f f8       	sub	r8,-1
800255a0:	ef 48 ff f4 	st.w	r7[-12],r8
800255a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800255a8:	b9 68       	lsl	r8,0x18
800255aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800255ae:	a9 89       	lsr	r9,0x8
800255b0:	f3 e8 10 08 	or	r8,r9,r8
800255b4:	ef 48 ff fc 	st.w	r7[-4],r8
800255b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800255bc:	a9 88       	lsr	r8,0x8
800255be:	ef 48 ff f8 	st.w	r7[-8],r8
800255c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800255c6:	58 78       	cp.w	r8,7
800255c8:	fe 98 ff d3 	brls	8002556e <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
800255cc:	ec f8 00 54 	ld.w	r8,r6[84]
800255d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800255d4:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
800255d6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800255da:	30 08       	mov	r8,0
800255dc:	f0 09 18 00 	cp.b	r9,r8
800255e0:	c0 d0       	breq	800255fa <flashc_erase_gp_fuse_byte+0xc6>
800255e2:	ee fc ff ec 	ld.w	r12,r7[-20]
800255e6:	f0 16 02 17 	mcall	r6[2140]
800255ea:	18 98       	mov	r8,r12
800255ec:	10 99       	mov	r9,r8
800255ee:	3f f8       	mov	r8,-1
800255f0:	f0 09 18 00 	cp.b	r9,r8
800255f4:	5f 08       	sreq	r8
800255f6:	5c 58       	castu.b	r8
800255f8:	c0 28       	rjmp	800255fc <flashc_erase_gp_fuse_byte+0xc8>
800255fa:	30 18       	mov	r8,1
}
800255fc:	10 9c       	mov	r12,r8
800255fe:	2f ad       	sub	sp,-24
80025600:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025604:	80 02       	ld.sh	r2,r0[0x0]
80025606:	53 c2       	stdsp	sp[0xf0],r2

80025608 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
80025608:	eb cd 40 c0 	pushm	r6-r7,lr
8002560c:	1a 97       	mov	r7,sp
8002560e:	20 1d       	sub	sp,4
80025610:	48 f6       	lddpc	r6,8002564c <flashc_erase_all_gp_fuses+0x44>
80025612:	1e 26       	rsub	r6,pc
80025614:	18 98       	mov	r8,r12
80025616:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
8002561a:	3f fb       	mov	r11,-1
8002561c:	30 bc       	mov	r12,11
8002561e:	f0 16 00 28 	mcall	r6[160]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
80025622:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025626:	30 08       	mov	r8,0
80025628:	f0 09 18 00 	cp.b	r9,r8
8002562c:	c0 b0       	breq	80025642 <flashc_erase_all_gp_fuses+0x3a>
8002562e:	f0 16 00 72 	mcall	r6[456]
80025632:	14 98       	mov	r8,r10
80025634:	16 99       	mov	r9,r11
80025636:	f3 e8 00 08 	and	r8,r9,r8
8002563a:	5b f8       	cp.w	r8,-1
8002563c:	5f 08       	sreq	r8
8002563e:	5c 58       	castu.b	r8
80025640:	c0 28       	rjmp	80025644 <flashc_erase_all_gp_fuses+0x3c>
80025642:	30 18       	mov	r8,1
}
80025644:	10 9c       	mov	r12,r8
80025646:	2f fd       	sub	sp,-4
80025648:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002564c:	80 02       	ld.sh	r2,r0[0x0]
8002564e:	54 96       	stdsp	sp[0x124],r6

80025650 <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025650:	eb cd 40 c0 	pushm	r6-r7,lr
80025654:	1a 97       	mov	r7,sp
80025656:	20 2d       	sub	sp,8
80025658:	48 c6       	lddpc	r6,80025688 <flashc_write_gp_fuse_bit+0x38>
8002565a:	1e 26       	rsub	r6,pc
8002565c:	ef 4c ff fc 	st.w	r7[-4],r12
80025660:	16 98       	mov	r8,r11
80025662:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
80025666:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002566a:	ec 18 00 01 	eorl	r8,0x1
8002566e:	5c 58       	castu.b	r8
80025670:	c0 90       	breq	80025682 <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
80025672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025676:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002567a:	10 9b       	mov	r11,r8
8002567c:	30 7c       	mov	r12,7
8002567e:	f0 16 00 28 	mcall	r6[160]
}
80025682:	2f ed       	sub	sp,-8
80025684:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025688:	80 02       	ld.sh	r2,r0[0x0]
8002568a:	54 de       	stdsp	sp[0x134],lr

8002568c <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
8002568c:	eb cd 40 c0 	pushm	r6-r7,lr
80025690:	1a 97       	mov	r7,sp
80025692:	20 9d       	sub	sp,36
80025694:	4b 16       	lddpc	r6,80025758 <flashc_write_gp_fuse_bitfield+0xcc>
80025696:	1e 26       	rsub	r6,pc
80025698:	ef 4c ff e8 	st.w	r7[-24],r12
8002569c:	ef 4b ff e4 	st.w	r7[-28],r11
800256a0:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
800256a4:	30 08       	mov	r8,0
800256a6:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800256aa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256ae:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800256b2:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800256b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800256ba:	ef 48 ff f8 	st.w	r7[-8],r8
800256be:	34 08       	mov	r8,64
800256c0:	ef 48 ff fc 	st.w	r7[-4],r8
800256c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800256c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800256cc:	f0 09 0d 48 	min	r8,r8,r9
800256d0:	ef 48 ff f4 	st.w	r7[-12],r8
800256d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800256d8:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800256dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256e0:	ef 48 ff f0 	st.w	r7[-16],r8
800256e4:	c2 88       	rjmp	80025734 <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800256e6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800256ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800256ee:	5c 58       	castu.b	r8
800256f0:	10 9b       	mov	r11,r8
800256f2:	ee fc ff f0 	ld.w	r12,r7[-16]
800256f6:	f0 16 00 d4 	mcall	r6[848]
    error_status |= flashc_error_status;
800256fa:	ec f8 00 54 	ld.w	r8,r6[84]
800256fe:	70 08       	ld.w	r8,r8[0x0]
80025700:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025704:	f3 e8 10 08 	or	r8,r9,r8
80025708:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
8002570c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025710:	2f f8       	sub	r8,-1
80025712:	ef 48 ff f0 	st.w	r7[-16],r8
80025716:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002571a:	bf 78       	lsl	r8,0x1f
8002571c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025720:	a1 99       	lsr	r9,0x1
80025722:	f3 e8 10 08 	or	r8,r9,r8
80025726:	ef 48 ff e0 	st.w	r7[-32],r8
8002572a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002572e:	a1 98       	lsr	r8,0x1
80025730:	ef 48 ff dc 	st.w	r7[-36],r8
80025734:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025738:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002573c:	10 09       	add	r9,r8
8002573e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025742:	10 39       	cp.w	r9,r8
80025744:	fe 9b ff d1 	brhi	800256e6 <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025748:	ec f8 00 54 	ld.w	r8,r6[84]
8002574c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025750:	91 09       	st.w	r8[0x0],r9
}
80025752:	2f 7d       	sub	sp,-36
80025754:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025758:	80 02       	ld.sh	r2,r0[0x0]
8002575a:	55 1a       	stdsp	sp[0x144],r10

8002575c <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
8002575c:	eb cd 40 c0 	pushm	r6-r7,lr
80025760:	1a 97       	mov	r7,sp
80025762:	20 2d       	sub	sp,8
80025764:	48 c6       	lddpc	r6,80025794 <flashc_write_gp_fuse_byte+0x38>
80025766:	1e 26       	rsub	r6,pc
80025768:	ef 4c ff fc 	st.w	r7[-4],r12
8002576c:	16 98       	mov	r8,r11
8002576e:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
80025772:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025776:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002577a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002577e:	a3 78       	lsl	r8,0x3
80025780:	f3 e8 10 08 	or	r8,r9,r8
80025784:	10 9b       	mov	r11,r8
80025786:	30 ac       	mov	r12,10
80025788:	f0 16 00 28 	mcall	r6[160]
}
8002578c:	2f ed       	sub	sp,-8
8002578e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025792:	00 00       	add	r0,r0
80025794:	80 02       	ld.sh	r2,r0[0x0]
80025796:	55 ea       	stdsp	sp[0x178],r10

80025798 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
80025798:	eb cd 40 c0 	pushm	r6-r7,lr
8002579c:	1a 97       	mov	r7,sp
8002579e:	20 4d       	sub	sp,16
800257a0:	49 e6       	lddpc	r6,80025818 <flashc_write_all_gp_fuses+0x80>
800257a2:	1e 26       	rsub	r6,pc
800257a4:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
800257a8:	30 08       	mov	r8,0
800257aa:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800257ae:	30 08       	mov	r8,0
800257b0:	ef 48 ff fc 	st.w	r7[-4],r8
800257b4:	c2 58       	rjmp	800257fe <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
800257b6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800257ba:	10 9b       	mov	r11,r8
800257bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800257c0:	f0 16 00 86 	mcall	r6[536]
    error_status |= flashc_error_status;
800257c4:	ec f8 00 54 	ld.w	r8,r6[84]
800257c8:	70 08       	ld.w	r8,r8[0x0]
800257ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800257ce:	f3 e8 10 08 	or	r8,r9,r8
800257d2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800257d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257da:	2f f8       	sub	r8,-1
800257dc:	ef 48 ff fc 	st.w	r7[-4],r8
800257e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800257e4:	b9 68       	lsl	r8,0x18
800257e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800257ea:	a9 89       	lsr	r9,0x8
800257ec:	f3 e8 10 08 	or	r8,r9,r8
800257f0:	ef 48 ff f4 	st.w	r7[-12],r8
800257f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800257f8:	a9 88       	lsr	r8,0x8
800257fa:	ef 48 ff f0 	st.w	r7[-16],r8
800257fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025802:	58 78       	cp.w	r8,7
80025804:	fe 98 ff d9 	brls	800257b6 <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025808:	ec f8 00 54 	ld.w	r8,r6[84]
8002580c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025810:	91 09       	st.w	r8[0x0],r9
}
80025812:	2f cd       	sub	sp,-16
80025814:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025818:	80 02       	ld.sh	r2,r0[0x0]
8002581a:	56 26       	stdsp	sp[0x188],r6

8002581c <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
8002581c:	eb cd 40 c0 	pushm	r6-r7,lr
80025820:	1a 97       	mov	r7,sp
80025822:	20 2d       	sub	sp,8
80025824:	48 e6       	lddpc	r6,8002585c <flashc_set_gp_fuse_bit+0x40>
80025826:	1e 26       	rsub	r6,pc
80025828:	ef 4c ff fc 	st.w	r7[-4],r12
8002582c:	16 98       	mov	r8,r11
8002582e:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
80025832:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025836:	30 08       	mov	r8,0
80025838:	f0 09 18 00 	cp.b	r9,r8
8002583c:	c0 70       	breq	8002584a <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
8002583e:	30 0b       	mov	r11,0
80025840:	ee fc ff fc 	ld.w	r12,r7[-4]
80025844:	f0 16 00 e4 	mcall	r6[912]
80025848:	c0 68       	rjmp	80025854 <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
8002584a:	30 0b       	mov	r11,0
8002584c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025850:	f0 16 00 d4 	mcall	r6[848]
}
80025854:	2f ed       	sub	sp,-8
80025856:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002585a:	00 00       	add	r0,r0
8002585c:	80 02       	ld.sh	r2,r0[0x0]
8002585e:	56 aa       	stdsp	sp[0x1a8],r10

80025860 <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025860:	eb cd 40 c0 	pushm	r6-r7,lr
80025864:	1a 97       	mov	r7,sp
80025866:	20 9d       	sub	sp,36
80025868:	4b 16       	lddpc	r6,8002592c <flashc_set_gp_fuse_bitfield+0xcc>
8002586a:	1e 26       	rsub	r6,pc
8002586c:	ef 4c ff e8 	st.w	r7[-24],r12
80025870:	ef 4b ff e4 	st.w	r7[-28],r11
80025874:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80025878:	30 08       	mov	r8,0
8002587a:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002587e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025882:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025886:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
8002588a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002588e:	ef 48 ff f8 	st.w	r7[-8],r8
80025892:	34 08       	mov	r8,64
80025894:	ef 48 ff fc 	st.w	r7[-4],r8
80025898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002589c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800258a0:	f0 09 0d 48 	min	r8,r8,r9
800258a4:	ef 48 ff f4 	st.w	r7[-12],r8
800258a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800258ac:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800258b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800258b4:	ef 48 ff f0 	st.w	r7[-16],r8
800258b8:	c2 88       	rjmp	80025908 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800258ba:	ee f8 ff e0 	ld.w	r8,r7[-32]
800258be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800258c2:	5c 58       	castu.b	r8
800258c4:	10 9b       	mov	r11,r8
800258c6:	ee fc ff f0 	ld.w	r12,r7[-16]
800258ca:	f0 16 01 13 	mcall	r6[1100]
    error_status |= flashc_error_status;
800258ce:	ec f8 00 54 	ld.w	r8,r6[84]
800258d2:	70 08       	ld.w	r8,r8[0x0]
800258d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800258d8:	f3 e8 10 08 	or	r8,r9,r8
800258dc:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800258e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800258e4:	2f f8       	sub	r8,-1
800258e6:	ef 48 ff f0 	st.w	r7[-16],r8
800258ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800258ee:	bf 78       	lsl	r8,0x1f
800258f0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800258f4:	a1 99       	lsr	r9,0x1
800258f6:	f3 e8 10 08 	or	r8,r9,r8
800258fa:	ef 48 ff e0 	st.w	r7[-32],r8
800258fe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025902:	a1 98       	lsr	r8,0x1
80025904:	ef 48 ff dc 	st.w	r7[-36],r8
80025908:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002590c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025910:	10 09       	add	r9,r8
80025912:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025916:	10 39       	cp.w	r9,r8
80025918:	fe 9b ff d1 	brhi	800258ba <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002591c:	ec f8 00 54 	ld.w	r8,r6[84]
80025920:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025924:	91 09       	st.w	r8[0x0],r9
}
80025926:	2f 7d       	sub	sp,-36
80025928:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002592c:	80 02       	ld.sh	r2,r0[0x0]
8002592e:	56 ee       	stdsp	sp[0x1b8],lr

80025930 <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025930:	eb cd 40 c0 	pushm	r6-r7,lr
80025934:	1a 97       	mov	r7,sp
80025936:	20 3d       	sub	sp,12
80025938:	49 c6       	lddpc	r6,800259a8 <flashc_set_gp_fuse_byte+0x78>
8002593a:	1e 26       	rsub	r6,pc
8002593c:	ef 4c ff f8 	st.w	r7[-8],r12
80025940:	16 98       	mov	r8,r11
80025942:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
80025946:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002594a:	58 08       	cp.w	r8,0
8002594c:	c0 a0       	breq	80025960 <flashc_set_gp_fuse_byte+0x30>
8002594e:	e0 48 00 ff 	cp.w	r8,255
80025952:	c0 d1       	brne	8002596c <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025954:	30 0b       	mov	r11,0
80025956:	ee fc ff f8 	ld.w	r12,r7[-8]
8002595a:	f0 16 01 09 	mcall	r6[1060]
    break;
8002595e:	c2 18       	rjmp	800259a0 <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80025960:	30 0b       	mov	r11,0
80025962:	ee fc ff f8 	ld.w	r12,r7[-8]
80025966:	f0 16 00 86 	mcall	r6[536]
    break;
8002596a:	c1 b8       	rjmp	800259a0 <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
8002596c:	30 0b       	mov	r11,0
8002596e:	ee fc ff f8 	ld.w	r12,r7[-8]
80025972:	f0 16 01 09 	mcall	r6[1060]
    error_status = flashc_error_status;
80025976:	ec f8 00 54 	ld.w	r8,r6[84]
8002597a:	70 08       	ld.w	r8,r8[0x0]
8002597c:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80025980:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025984:	10 9b       	mov	r11,r8
80025986:	ee fc ff f8 	ld.w	r12,r7[-8]
8002598a:	f0 16 00 86 	mcall	r6[536]
    flashc_error_status |= error_status;
8002598e:	ec f8 00 54 	ld.w	r8,r6[84]
80025992:	70 09       	ld.w	r9,r8[0x0]
80025994:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025998:	10 49       	or	r9,r8
8002599a:	ec f8 00 54 	ld.w	r8,r6[84]
8002599e:	91 09       	st.w	r8[0x0],r9
  }
}
800259a0:	2f dd       	sub	sp,-12
800259a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800259a6:	00 00       	add	r0,r0
800259a8:	80 02       	ld.sh	r2,r0[0x0]
800259aa:	57 be       	stdsp	sp[0x1ec],lr

800259ac <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
800259ac:	eb cd 40 c0 	pushm	r6-r7,lr
800259b0:	1a 97       	mov	r7,sp
800259b2:	20 3d       	sub	sp,12
800259b4:	49 86       	lddpc	r6,80025a14 <flashc_set_all_gp_fuses+0x68>
800259b6:	1e 26       	rsub	r6,pc
800259b8:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
800259bc:	ee e8 ff f4 	ld.d	r8,r7[-12]
800259c0:	58 08       	cp.w	r8,0
800259c2:	5c 29       	cpc	r9
800259c4:	c0 b0       	breq	800259da <flashc_set_all_gp_fuses+0x2e>
800259c6:	3f fa       	mov	r10,-1
800259c8:	3f fb       	mov	r11,-1
800259ca:	14 38       	cp.w	r8,r10
800259cc:	f6 09 13 00 	cpc	r9,r11
800259d0:	c0 a1       	brne	800259e4 <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
800259d2:	30 0c       	mov	r12,0
800259d4:	f0 16 00 ca 	mcall	r6[808]
    break;
800259d8:	c1 b8       	rjmp	80025a0e <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
800259da:	30 0a       	mov	r10,0
800259dc:	30 0b       	mov	r11,0
800259de:	f0 16 00 ec 	mcall	r6[944]
    break;
800259e2:	c1 68       	rjmp	80025a0e <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
800259e4:	30 0c       	mov	r12,0
800259e6:	f0 16 00 ca 	mcall	r6[808]
    error_status = flashc_error_status;
800259ea:	ec f8 00 54 	ld.w	r8,r6[84]
800259ee:	70 08       	ld.w	r8,r8[0x0]
800259f0:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
800259f4:	ee ea ff f4 	ld.d	r10,r7[-12]
800259f8:	f0 16 00 ec 	mcall	r6[944]
    flashc_error_status |= error_status;
800259fc:	ec f8 00 54 	ld.w	r8,r6[84]
80025a00:	70 09       	ld.w	r9,r8[0x0]
80025a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025a06:	10 49       	or	r9,r8
80025a08:	ec f8 00 54 	ld.w	r8,r6[84]
80025a0c:	91 09       	st.w	r8[0x0],r9
  }
}
80025a0e:	2f dd       	sub	sp,-12
80025a10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a14:	80 02       	ld.sh	r2,r0[0x0]
80025a16:	58 3a       	cp.w	r10,3

80025a18 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80025a18:	eb cd 40 c0 	pushm	r6-r7,lr
80025a1c:	1a 97       	mov	r7,sp
80025a1e:	48 56       	lddpc	r6,80025a30 <flashc_clear_page_buffer+0x18>
80025a20:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80025a22:	3f fb       	mov	r11,-1
80025a24:	30 3c       	mov	r12,3
80025a26:	f0 16 00 28 	mcall	r6[160]
}
80025a2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a2e:	00 00       	add	r0,r0
80025a30:	80 02       	ld.sh	r2,r0[0x0]
80025a32:	58 a4       	cp.w	r4,10

80025a34 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80025a34:	eb cd 40 80 	pushm	r7,lr
80025a38:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80025a3a:	fe 68 00 00 	mov	r8,-131072
80025a3e:	70 28       	ld.w	r8,r8[0x8]
80025a40:	e2 18 00 20 	andl	r8,0x20,COH
80025a44:	5f 18       	srne	r8
80025a46:	5c 58       	castu.b	r8
}
80025a48:	10 9c       	mov	r12,r8
80025a4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80025a4e <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80025a4e:	eb cd 40 c0 	pushm	r6-r7,lr
80025a52:	1a 97       	mov	r7,sp
80025a54:	20 1d       	sub	sp,4
80025a56:	48 96       	lddpc	r6,80025a78 <flashc_quick_page_read+0x2a>
80025a58:	1e 26       	rsub	r6,pc
80025a5a:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80025a5e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025a62:	30 cc       	mov	r12,12
80025a64:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025a68:	f0 16 00 da 	mcall	r6[872]
80025a6c:	18 98       	mov	r8,r12
}
80025a6e:	10 9c       	mov	r12,r8
80025a70:	2f fd       	sub	sp,-4
80025a72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a76:	00 00       	add	r0,r0
80025a78:	80 02       	ld.sh	r2,r0[0x0]
80025a7a:	58 dc       	cp.w	r12,13

80025a7c <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80025a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80025a80:	1a 97       	mov	r7,sp
80025a82:	20 4d       	sub	sp,16
80025a84:	49 86       	lddpc	r6,80025ae4 <flashc_erase_page+0x68>
80025a86:	1e 26       	rsub	r6,pc
80025a88:	ef 4c ff f4 	st.w	r7[-12],r12
80025a8c:	16 98       	mov	r8,r11
80025a8e:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
80025a92:	30 18       	mov	r8,1
80025a94:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80025a98:	ee fb ff f4 	ld.w	r11,r7[-12]
80025a9c:	30 2c       	mov	r12,2
80025a9e:	f0 16 00 28 	mcall	r6[160]
  if (check)
80025aa2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025aa6:	30 08       	mov	r8,0
80025aa8:	f0 09 18 00 	cp.b	r9,r8
80025aac:	c1 50       	breq	80025ad6 <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
80025aae:	ec f8 00 54 	ld.w	r8,r6[84]
80025ab2:	70 08       	ld.w	r8,r8[0x0]
80025ab4:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
80025ab8:	3f fc       	mov	r12,-1
80025aba:	f0 16 01 70 	mcall	r6[1472]
80025abe:	18 98       	mov	r8,r12
80025ac0:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
80025ac4:	ec f8 00 54 	ld.w	r8,r6[84]
80025ac8:	70 09       	ld.w	r9,r8[0x0]
80025aca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ace:	10 49       	or	r9,r8
80025ad0:	ec f8 00 54 	ld.w	r8,r6[84]
80025ad4:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
80025ad6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80025ada:	10 9c       	mov	r12,r8
80025adc:	2f cd       	sub	sp,-16
80025ade:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ae2:	00 00       	add	r0,r0
80025ae4:	80 02       	ld.sh	r2,r0[0x0]
80025ae6:	59 0a       	cp.w	r10,16

80025ae8 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
80025ae8:	eb cd 40 e0 	pushm	r5-r7,lr
80025aec:	1a 97       	mov	r7,sp
80025aee:	20 4d       	sub	sp,16
80025af0:	49 f6       	lddpc	r6,80025b6c <flashc_erase_all_pages+0x84>
80025af2:	1e 26       	rsub	r6,pc
80025af4:	18 98       	mov	r8,r12
80025af6:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
80025afa:	30 18       	mov	r8,1
80025afc:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80025b00:	30 08       	mov	r8,0
80025b02:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
80025b06:	f0 16 00 ff 	mcall	r6[1020]
80025b0a:	18 98       	mov	r8,r12
80025b0c:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80025b10:	c1 f8       	rjmp	80025b4e <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
80025b12:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80025b16:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025b1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b1e:	20 18       	sub	r8,1
80025b20:	ef 48 ff fc 	st.w	r7[-4],r8
80025b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b28:	12 9b       	mov	r11,r9
80025b2a:	10 9c       	mov	r12,r8
80025b2c:	f0 16 00 9d 	mcall	r6[628]
80025b30:	18 98       	mov	r8,r12
80025b32:	eb e8 00 08 	and	r8,r5,r8
80025b36:	5f 18       	srne	r8
80025b38:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80025b3c:	ec f8 00 54 	ld.w	r8,r6[84]
80025b40:	70 08       	ld.w	r8,r8[0x0]
80025b42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025b46:	f3 e8 10 08 	or	r8,r9,r8
80025b4a:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80025b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b52:	58 08       	cp.w	r8,0
80025b54:	cd f1       	brne	80025b12 <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025b56:	ec f8 00 54 	ld.w	r8,r6[84]
80025b5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025b5e:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80025b60:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
80025b64:	10 9c       	mov	r12,r8
80025b66:	2f cd       	sub	sp,-16
80025b68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025b6c:	80 02       	ld.sh	r2,r0[0x0]
80025b6e:	59 76       	cp.w	r6,23

80025b70 <flashc_write_page>:


void flashc_write_page(int page_number)
{
80025b70:	eb cd 40 c0 	pushm	r6-r7,lr
80025b74:	1a 97       	mov	r7,sp
80025b76:	20 1d       	sub	sp,4
80025b78:	48 66       	lddpc	r6,80025b90 <flashc_write_page+0x20>
80025b7a:	1e 26       	rsub	r6,pc
80025b7c:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80025b80:	ee fb ff fc 	ld.w	r11,r7[-4]
80025b84:	30 1c       	mov	r12,1
80025b86:	f0 16 00 28 	mcall	r6[160]
}
80025b8a:	2f fd       	sub	sp,-4
80025b8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b90:	80 02       	ld.sh	r2,r0[0x0]
80025b92:	59 fe       	cp.w	lr,31

80025b94 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80025b94:	eb cd 40 c0 	pushm	r6-r7,lr
80025b98:	1a 97       	mov	r7,sp
80025b9a:	48 76       	lddpc	r6,80025bb4 <flashc_quick_user_page_read+0x20>
80025b9c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80025b9e:	3f fb       	mov	r11,-1
80025ba0:	30 fc       	mov	r12,15
80025ba2:	f0 16 00 28 	mcall	r6[160]
  return flashc_is_page_erased();
80025ba6:	f0 16 00 da 	mcall	r6[872]
80025baa:	18 98       	mov	r8,r12
}
80025bac:	10 9c       	mov	r12,r8
80025bae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025bb2:	00 00       	add	r0,r0
80025bb4:	80 02       	ld.sh	r2,r0[0x0]
80025bb6:	5a 20       	cp.w	r0,-30

80025bb8 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80025bb8:	eb cd 40 c0 	pushm	r6-r7,lr
80025bbc:	1a 97       	mov	r7,sp
80025bbe:	20 1d       	sub	sp,4
80025bc0:	48 c6       	lddpc	r6,80025bf0 <flashc_erase_user_page+0x38>
80025bc2:	1e 26       	rsub	r6,pc
80025bc4:	18 98       	mov	r8,r12
80025bc6:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80025bca:	3f fb       	mov	r11,-1
80025bcc:	30 ec       	mov	r12,14
80025bce:	f0 16 00 28 	mcall	r6[160]
  return (check) ? flashc_quick_user_page_read() : true;
80025bd2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025bd6:	30 08       	mov	r8,0
80025bd8:	f0 09 18 00 	cp.b	r9,r8
80025bdc:	c0 50       	breq	80025be6 <flashc_erase_user_page+0x2e>
80025bde:	f0 16 02 0e 	mcall	r6[2104]
80025be2:	18 98       	mov	r8,r12
80025be4:	c0 28       	rjmp	80025be8 <flashc_erase_user_page+0x30>
80025be6:	30 18       	mov	r8,1
}
80025be8:	10 9c       	mov	r12,r8
80025bea:	2f fd       	sub	sp,-4
80025bec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025bf0:	80 02       	ld.sh	r2,r0[0x0]
80025bf2:	5a 46       	cp.w	r6,-28

80025bf4 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80025bf4:	eb cd 40 c0 	pushm	r6-r7,lr
80025bf8:	1a 97       	mov	r7,sp
80025bfa:	48 56       	lddpc	r6,80025c0c <flashc_write_user_page+0x18>
80025bfc:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80025bfe:	3f fb       	mov	r11,-1
80025c00:	30 dc       	mov	r12,13
80025c02:	f0 16 00 28 	mcall	r6[160]
}
80025c06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c0a:	00 00       	add	r0,r0
80025c0c:	80 02       	ld.sh	r2,r0[0x0]
80025c0e:	5a 80       	cp.w	r0,-24

80025c10 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80025c10:	eb cd 40 c0 	pushm	r6-r7,lr
80025c14:	1a 97       	mov	r7,sp
80025c16:	20 4d       	sub	sp,16
80025c18:	49 26       	lddpc	r6,80025c60 <flashc_memset8+0x50>
80025c1a:	1e 26       	rsub	r6,pc
80025c1c:	ef 4c ff fc 	st.w	r7[-4],r12
80025c20:	ef 4a ff f4 	st.w	r7[-12],r10
80025c24:	12 98       	mov	r8,r9
80025c26:	16 99       	mov	r9,r11
80025c28:	ef 69 ff f8 	st.b	r7[-8],r9
80025c2c:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80025c30:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025c34:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80025c38:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025c3c:	a9 68       	lsl	r8,0x8
80025c3e:	5c 88       	casts.h	r8
80025c40:	f5 e8 10 08 	or	r8,r10,r8
80025c44:	5c 88       	casts.h	r8
80025c46:	5c 78       	castu.h	r8
80025c48:	ee fa ff f4 	ld.w	r10,r7[-12]
80025c4c:	10 9b       	mov	r11,r8
80025c4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025c52:	f0 16 01 7b 	mcall	r6[1516]
80025c56:	18 98       	mov	r8,r12
}
80025c58:	10 9c       	mov	r12,r8
80025c5a:	2f cd       	sub	sp,-16
80025c5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c60:	80 02       	ld.sh	r2,r0[0x0]
80025c62:	5a 9e       	cp.w	lr,-23

80025c64 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
80025c64:	eb cd 40 c0 	pushm	r6-r7,lr
80025c68:	1a 97       	mov	r7,sp
80025c6a:	20 4d       	sub	sp,16
80025c6c:	49 16       	lddpc	r6,80025cb0 <flashc_memset16+0x4c>
80025c6e:	1e 26       	rsub	r6,pc
80025c70:	ef 4c ff fc 	st.w	r7[-4],r12
80025c74:	ef 4a ff f4 	st.w	r7[-12],r10
80025c78:	12 98       	mov	r8,r9
80025c7a:	16 99       	mov	r9,r11
80025c7c:	ef 59 ff f8 	st.h	r7[-8],r9
80025c80:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
80025c84:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025c88:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80025c8c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80025c90:	b1 68       	lsl	r8,0x10
80025c92:	f5 e8 10 08 	or	r8,r10,r8
80025c96:	ee fa ff f4 	ld.w	r10,r7[-12]
80025c9a:	10 9b       	mov	r11,r8
80025c9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025ca0:	f0 16 01 b7 	mcall	r6[1756]
80025ca4:	18 98       	mov	r8,r12
}
80025ca6:	10 9c       	mov	r12,r8
80025ca8:	2f cd       	sub	sp,-16
80025caa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025cae:	00 00       	add	r0,r0
80025cb0:	80 02       	ld.sh	r2,r0[0x0]
80025cb2:	5a f2       	cp.w	r2,-17

80025cb4 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
80025cb4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80025cb8:	1a 97       	mov	r7,sp
80025cba:	20 6d       	sub	sp,24
80025cbc:	49 56       	lddpc	r6,80025d10 <flashc_memset32+0x5c>
80025cbe:	1e 26       	rsub	r6,pc
80025cc0:	ef 4c ff fc 	st.w	r7[-4],r12
80025cc4:	ef 4b ff f8 	st.w	r7[-8],r11
80025cc8:	ef 4a ff f4 	st.w	r7[-12],r10
80025ccc:	12 98       	mov	r8,r9
80025cce:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
80025cd2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80025cd6:	ee f0 ff f8 	ld.w	r0,r7[-8]
80025cda:	30 01       	mov	r1,0
80025cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025ce0:	ef 49 ff ec 	st.w	r7[-20],r9
80025ce4:	30 09       	mov	r9,0
80025ce6:	ef 49 ff e8 	st.w	r7[-24],r9
80025cea:	ee f3 ff ec 	ld.w	r3,r7[-20]
80025cee:	a1 63       	lsl	r3,0x0
80025cf0:	30 02       	mov	r2,0
80025cf2:	e1 e2 10 0a 	or	r10,r0,r2
80025cf6:	e3 e3 10 0b 	or	r11,r1,r3
80025cfa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025cfe:	ee fc ff fc 	ld.w	r12,r7[-4]
80025d02:	f0 16 01 9b 	mcall	r6[1644]
80025d06:	18 98       	mov	r8,r12
}
80025d08:	10 9c       	mov	r12,r8
80025d0a:	2f ad       	sub	sp,-24
80025d0c:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80025d10:	80 02       	ld.sh	r2,r0[0x0]
80025d12:	5b 42       	cp.w	r2,-12

80025d14 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
80025d14:	eb cd 40 c0 	pushm	r6-r7,lr
80025d18:	1a 97       	mov	r7,sp
80025d1a:	21 bd       	sub	sp,108
80025d1c:	fe f6 04 14 	ld.w	r6,pc[1044]
80025d20:	1e 26       	rsub	r6,pc
80025d22:	ef 4c ff a4 	st.w	r7[-92],r12
80025d26:	ee eb ff 9c 	st.d	r7[-100],r10
80025d2a:	ef 49 ff 98 	st.w	r7[-104],r9
80025d2e:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
80025d32:	30 08       	mov	r8,0
80025d34:	30 09       	mov	r9,0
80025d36:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
80025d3a:	30 08       	mov	r8,0
80025d3c:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80025d40:	f0 16 00 c1 	mcall	r6[772]
80025d44:	18 99       	mov	r9,r12
80025d46:	fc 18 80 00 	movh	r8,0x8000
80025d4a:	f2 08 00 08 	add	r8,r9,r8
80025d4e:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
80025d52:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025d56:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025d5a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025d5e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025d62:	20 18       	sub	r8,1
80025d64:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025d68:	ef 48 ff f0 	st.w	r7[-16],r8
80025d6c:	c1 f8       	rjmp	80025daa <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
80025d6e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025d72:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80025d76:	ee 09 00 09 	add	r9,r7,r9
80025d7a:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
80025d7e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025d82:	b9 68       	lsl	r8,0x18
80025d84:	ee f9 ff a0 	ld.w	r9,r7[-96]
80025d88:	a9 89       	lsr	r9,0x8
80025d8a:	f3 e8 10 08 	or	r8,r9,r8
80025d8e:	ef 48 ff a0 	st.w	r7[-96],r8
80025d92:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025d96:	a9 88       	lsr	r8,0x8
80025d98:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
80025d9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025da0:	20 18       	sub	r8,1
80025da2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025da6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025daa:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80025dae:	58 08       	cp.w	r8,0
80025db0:	5c 29       	cpc	r9
80025db2:	cd e1       	brne	80025d6e <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
80025db4:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025db8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80025dbc:	f2 08 00 08 	add	r8,r9,r8
80025dc0:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80025dc4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025dc8:	e0 69 ff ff 	mov	r9,65535
80025dcc:	ea 19 7f ff 	orh	r9,0x7fff
80025dd0:	12 38       	cp.w	r8,r9
80025dd2:	e0 8b 00 07 	brhi	80025de0 <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
80025dd6:	fc 18 80 00 	movh	r8,0x8000
80025dda:	ef 48 ff e0 	st.w	r7[-32],r8
80025dde:	c1 58       	rjmp	80025e08 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80025de0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025de4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025de8:	10 39       	cp.w	r9,r8
80025dea:	e0 8b 00 0f 	brhi	80025e08 <flashc_memset64+0xf4>
80025dee:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025df2:	e0 69 ff ff 	mov	r9,65535
80025df6:	ea 19 80 7f 	orh	r9,0x807f
80025dfa:	12 38       	cp.w	r8,r9
80025dfc:	e0 8b 00 06 	brhi	80025e08 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025e00:	fc 18 80 80 	movh	r8,0x8080
80025e04:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80025e08:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e0c:	e0 69 02 00 	mov	r9,512
80025e10:	ea 19 80 80 	orh	r9,0x8080
80025e14:	12 38       	cp.w	r8,r9
80025e16:	e0 88 00 09 	brls	80025e28 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80025e1a:	e0 68 02 00 	mov	r8,512
80025e1e:	ea 18 80 80 	orh	r8,0x8080
80025e22:	ef 48 ff d4 	st.w	r7[-44],r8
80025e26:	c1 38       	rjmp	80025e4c <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80025e28:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e2c:	fc 19 80 80 	movh	r9,0x8080
80025e30:	12 38       	cp.w	r8,r9
80025e32:	e0 8b 00 0d 	brhi	80025e4c <flashc_memset64+0x138>
80025e36:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025e3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025e3e:	10 39       	cp.w	r9,r8
80025e40:	e0 88 00 06 	brls	80025e4c <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80025e44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025e48:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
80025e4c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e50:	a1 c8       	cbr	r8,0x0
80025e52:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80025e56:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025e5a:	e0 18 ff fc 	andl	r8,0xfffc
80025e5e:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80025e62:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025e66:	e0 18 ff f8 	andl	r8,0xfff8
80025e6a:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025e6e:	c4 f9       	rjmp	8002610c <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80025e70:	f0 16 01 20 	mcall	r6[1152]
    error_status |= flashc_error_status;
80025e74:	ec f8 00 54 	ld.w	r8,r6[84]
80025e78:	70 08       	ld.w	r8,r8[0x0]
80025e7a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025e7e:	f3 e8 10 08 	or	r8,r9,r8
80025e82:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80025e86:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025e8a:	ef 48 ff f8 	st.w	r7[-8],r8
80025e8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e92:	e0 18 fe 00 	andl	r8,0xfe00
80025e96:	f0 c8 fe 00 	sub	r8,r8,-512
80025e9a:	ef 48 ff fc 	st.w	r7[-4],r8
80025e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ea2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ea6:	f0 09 0d 48 	min	r8,r8,r9
80025eaa:	ef 48 ff f4 	st.w	r7[-12],r8
80025eae:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
80025eb2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025eb6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025eba:	10 9a       	mov	r10,r8
80025ebc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80025ec0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ec4:	10 99       	mov	r9,r8
80025ec6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025eca:	30 18       	mov	r8,1
80025ecc:	12 3a       	cp.w	r10,r9
80025ece:	c0 22       	brcc	80025ed2 <flashc_memset64+0x1be>
80025ed0:	30 08       	mov	r8,0
80025ed2:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
80025ed6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025eda:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80025ede:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ee2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025ee6:	c5 b0       	breq	80025f9c <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025ee8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025eec:	e0 18 fe 00 	andl	r8,0xfe00
80025ef0:	ef 48 ff a8 	st.w	r7[-88],r8
80025ef4:	c0 e8       	rjmp	80025f10 <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80025ef6:	ee fa ff a8 	ld.w	r10,r7[-88]
80025efa:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025efe:	f0 e8 00 00 	ld.d	r8,r8[0]
80025f02:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80025f06:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f0a:	2f 88       	sub	r8,-8
80025f0c:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025f10:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025f14:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f18:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025f1c:	10 39       	cp.w	r9,r8
80025f1e:	ce c3       	brcs	80025ef6 <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80025f20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f24:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025f28:	c3 a0       	breq	80025f9c <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025f2a:	30 08       	mov	r8,0
80025f2c:	ef 48 ff f0 	st.w	r7[-16],r8
80025f30:	c1 38       	rjmp	80025f56 <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
80025f32:	ee fa ff f0 	ld.w	r10,r7[-16]
80025f36:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f3a:	11 89       	ld.ub	r9,r8[0x0]
80025f3c:	5c 59       	castu.b	r9
80025f3e:	ee 0a 00 0a 	add	r10,r7,r10
80025f42:	f5 69 ff ac 	st.b	r10[-84],r9
80025f46:	2f f8       	sub	r8,-1
80025f48:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025f4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025f50:	2f f8       	sub	r8,-1
80025f52:	ef 48 ff f0 	st.w	r7[-16],r8
80025f56:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f5a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025f5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025f62:	10 39       	cp.w	r9,r8
80025f64:	fe 9b ff e7 	brhi	80025f32 <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025f68:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025f6c:	e0 18 ff f8 	andl	r8,0xfff8
80025f70:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80025f74:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025f78:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025f7c:	10 39       	cp.w	r9,r8
80025f7e:	c0 f2       	brcc	80025f9c <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
80025f80:	ee fa ff e0 	ld.w	r10,r7[-32]
80025f84:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025f88:	f4 e9 00 00 	st.d	r10[0],r8
80025f8c:	f4 c8 ff f8 	sub	r8,r10,-8
80025f90:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
80025f94:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025f98:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025f9c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80025fa0:	10 99       	mov	r9,r8
80025fa2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025fa6:	f2 08 01 08 	sub	r8,r9,r8
80025faa:	a3 58       	asr	r8,0x3
80025fac:	ef 48 ff f0 	st.w	r7[-16],r8
80025fb0:	c1 08       	rjmp	80025fd0 <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
80025fb2:	ee fa ff e0 	ld.w	r10,r7[-32]
80025fb6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025fba:	f4 e9 00 00 	st.d	r10[0],r8
80025fbe:	f4 c8 ff f8 	sub	r8,r10,-8
80025fc2:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025fc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025fca:	20 18       	sub	r8,1
80025fcc:	ef 48 ff f0 	st.w	r7[-16],r8
80025fd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025fd4:	58 08       	cp.w	r8,0
80025fd6:	ce e1       	brne	80025fb2 <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80025fd8:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80025fdc:	30 08       	mov	r8,0
80025fde:	f0 09 18 00 	cp.b	r9,r8
80025fe2:	c4 70       	breq	80026070 <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80025fe4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025fe8:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
80025fec:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ff0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ff4:	c3 80       	breq	80026064 <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80025ff6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ffa:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ffe:	ef 48 ff f0 	st.w	r7[-16],r8
80026002:	c1 38       	rjmp	80026028 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026004:	ee fa ff f0 	ld.w	r10,r7[-16]
80026008:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002600c:	11 89       	ld.ub	r9,r8[0x0]
8002600e:	5c 59       	castu.b	r9
80026010:	ee 0a 00 0a 	add	r10,r7,r10
80026014:	f5 69 ff ac 	st.b	r10[-84],r9
80026018:	2f f8       	sub	r8,-1
8002601a:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
8002601e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026022:	2f f8       	sub	r8,-1
80026024:	ef 48 ff f0 	st.w	r7[-16],r8
80026028:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002602c:	58 78       	cp.w	r8,7
8002602e:	fe 98 ff eb 	brls	80026004 <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80026032:	ee fa ff e0 	ld.w	r10,r7[-32]
80026036:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002603a:	f4 e9 00 00 	st.d	r10[0],r8
8002603e:	f4 c8 ff f8 	sub	r8,r10,-8
80026042:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026046:	c1 08       	rjmp	80026066 <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
80026048:	ee fa ff a8 	ld.w	r10,r7[-88]
8002604c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026050:	f0 e8 00 00 	ld.d	r8,r8[0]
80026054:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026058:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002605c:	2f 88       	sub	r8,-8
8002605e:	ef 48 ff a8 	st.w	r7[-88],r8
80026062:	c0 28       	rjmp	80026066 <flashc_memset64+0x352>
80026064:	d7 03       	nop
80026066:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002606a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002606e:	ce d1       	brne	80026048 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80026070:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026074:	fc 19 80 80 	movh	r9,0x8080
80026078:	12 38       	cp.w	r8,r9
8002607a:	e0 8b 00 2c 	brhi	800260d2 <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
8002607e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80026082:	30 08       	mov	r8,0
80026084:	f0 09 18 00 	cp.b	r9,r8
80026088:	c0 e0       	breq	800260a4 <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
8002608a:	30 0b       	mov	r11,0
8002608c:	3f fc       	mov	r12,-1
8002608e:	f0 16 00 9d 	mcall	r6[628]
        error_status |= flashc_error_status;
80026092:	ec f8 00 54 	ld.w	r8,r6[84]
80026096:	70 08       	ld.w	r8,r8[0x0]
80026098:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002609c:	f3 e8 10 08 	or	r8,r9,r8
800260a0:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
800260a4:	3f fc       	mov	r12,-1
800260a6:	f0 16 00 f0 	mcall	r6[960]
      error_status |= flashc_error_status;
800260aa:	ec f8 00 54 	ld.w	r8,r6[84]
800260ae:	70 08       	ld.w	r8,r8[0x0]
800260b0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800260b4:	f3 e8 10 08 	or	r8,r9,r8
800260b8:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
800260bc:	ee f9 ff e0 	ld.w	r9,r7[-32]
800260c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800260c4:	10 39       	cp.w	r9,r8
800260c6:	c2 33       	brcs	8002610c <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800260c8:	fc 18 80 80 	movh	r8,0x8080
800260cc:	ef 48 ff e0 	st.w	r7[-32],r8
800260d0:	c1 e8       	rjmp	8002610c <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
800260d2:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800260d6:	30 08       	mov	r8,0
800260d8:	f0 09 18 00 	cp.b	r9,r8
800260dc:	c0 d0       	breq	800260f6 <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
800260de:	30 0c       	mov	r12,0
800260e0:	f0 16 01 25 	mcall	r6[1172]
        error_status |= flashc_error_status;
800260e4:	ec f8 00 54 	ld.w	r8,r6[84]
800260e8:	70 08       	ld.w	r8,r8[0x0]
800260ea:	ee f9 ff ec 	ld.w	r9,r7[-20]
800260ee:	f3 e8 10 08 	or	r8,r9,r8
800260f2:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
800260f6:	f0 16 00 ef 	mcall	r6[956]
      error_status |= flashc_error_status;
800260fa:	ec f8 00 54 	ld.w	r8,r6[84]
800260fe:	70 08       	ld.w	r8,r8[0x0]
80026100:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026104:	f3 e8 10 08 	or	r8,r9,r8
80026108:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002610c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026110:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026114:	10 39       	cp.w	r9,r8
80026116:	fe 93 fe ad 	brlo	80025e70 <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
8002611a:	ec f8 00 54 	ld.w	r8,r6[84]
8002611e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026122:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80026124:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80026128:	10 9c       	mov	r12,r8
8002612a:	2e 5d       	sub	sp,-108
8002612c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026130:	80 02       	ld.sh	r2,r0[0x0]
80026132:	5b a4       	cp.w	r4,-6

80026134 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80026134:	eb cd 40 c0 	pushm	r6-r7,lr
80026138:	1a 97       	mov	r7,sp
8002613a:	21 ad       	sub	sp,104
8002613c:	fe f6 05 80 	ld.w	r6,pc[1408]
80026140:	1e 26       	rsub	r6,pc
80026142:	ef 4c ff a4 	st.w	r7[-92],r12
80026146:	ef 4b ff a0 	st.w	r7[-96],r11
8002614a:	ef 4a ff 9c 	st.w	r7[-100],r10
8002614e:	12 98       	mov	r8,r9
80026150:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
80026154:	30 08       	mov	r8,0
80026156:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
8002615a:	30 08       	mov	r8,0
8002615c:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026160:	f0 16 00 c1 	mcall	r6[772]
80026164:	18 99       	mov	r9,r12
80026166:	fc 18 80 00 	movh	r8,0x8000
8002616a:	f2 08 00 08 	add	r8,r9,r8
8002616e:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
80026172:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026176:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
8002617a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002617e:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
80026182:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026186:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8002618a:	f2 08 00 08 	add	r8,r9,r8
8002618e:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80026192:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026196:	e0 6a ff ff 	mov	r10,65535
8002619a:	ea 1a 7f ff 	orh	r10,0x7fff
8002619e:	14 38       	cp.w	r8,r10
800261a0:	e0 8b 00 13 	brhi	800261c6 <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
800261a4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800261a8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261ac:	fc 1a 80 00 	movh	r10,0x8000
800261b0:	f4 08 01 08 	sub	r8,r10,r8
800261b4:	f2 08 00 08 	add	r8,r9,r8
800261b8:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
800261bc:	fc 18 80 00 	movh	r8,0x8000
800261c0:	ef 48 ff dc 	st.w	r7[-36],r8
800261c4:	c2 18       	rjmp	80026206 <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
800261c6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800261ca:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261ce:	10 39       	cp.w	r9,r8
800261d0:	e0 8b 00 1b 	brhi	80026206 <flashc_memcpy+0xd2>
800261d4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261d8:	e0 69 ff ff 	mov	r9,65535
800261dc:	ea 19 80 7f 	orh	r9,0x807f
800261e0:	12 38       	cp.w	r8,r9
800261e2:	e0 8b 00 12 	brhi	80026206 <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
800261e6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800261ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800261ee:	fc 1a 80 80 	movh	r10,0x8080
800261f2:	f4 08 01 08 	sub	r8,r10,r8
800261f6:	f2 08 00 08 	add	r8,r9,r8
800261fa:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800261fe:	fc 18 80 80 	movh	r8,0x8080
80026202:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80026206:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002620a:	e0 69 02 00 	mov	r9,512
8002620e:	ea 19 80 80 	orh	r9,0x8080
80026212:	12 38       	cp.w	r8,r9
80026214:	e0 88 00 09 	brls	80026226 <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80026218:	e0 68 02 00 	mov	r8,512
8002621c:	ea 18 80 80 	orh	r8,0x8080
80026220:	ef 48 ff d4 	st.w	r7[-44],r8
80026224:	c1 38       	rjmp	8002624a <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80026226:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002622a:	fc 1a 80 80 	movh	r10,0x8080
8002622e:	14 38       	cp.w	r8,r10
80026230:	e0 8b 00 0d 	brhi	8002624a <flashc_memcpy+0x116>
80026234:	ee f9 ff d4 	ld.w	r9,r7[-44]
80026238:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002623c:	10 39       	cp.w	r9,r8
8002623e:	e0 88 00 06 	brls	8002624a <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80026242:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026246:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
8002624a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002624e:	a1 c8       	cbr	r8,0x0
80026250:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80026254:	ee f8 ff cc 	ld.w	r8,r7[-52]
80026258:	e0 18 ff fc 	andl	r8,0xfffc
8002625c:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80026260:	ee f8 ff c4 	ld.w	r8,r7[-60]
80026264:	e0 18 ff f8 	andl	r8,0xfff8
80026268:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002626c:	e0 8f 02 16 	bral	80026698 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80026270:	f0 16 01 20 	mcall	r6[1152]
    error_status |= flashc_error_status;
80026274:	ec f8 00 54 	ld.w	r8,r6[84]
80026278:	70 08       	ld.w	r8,r8[0x0]
8002627a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002627e:	f3 e8 10 08 	or	r8,r9,r8
80026282:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80026286:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002628a:	ef 48 ff f8 	st.w	r7[-8],r8
8002628e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026292:	e0 18 fe 00 	andl	r8,0xfe00
80026296:	f0 c8 fe 00 	sub	r8,r8,-512
8002629a:	ef 48 ff fc 	st.w	r7[-4],r8
8002629e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800262a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800262a6:	f0 09 0d 48 	min	r8,r8,r9
800262aa:	ef 48 ff f4 	st.w	r7[-12],r8
800262ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
800262b2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800262b6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262ba:	10 9a       	mov	r10,r8
800262bc:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
800262c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800262c4:	10 99       	mov	r9,r8
800262c6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800262ca:	30 18       	mov	r8,1
800262cc:	12 3a       	cp.w	r10,r9
800262ce:	c0 22       	brcc	800262d2 <flashc_memcpy+0x19e>
800262d0:	30 08       	mov	r8,0
800262d2:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
800262d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262da:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800262de:	c7 20       	breq	800263c2 <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800262e0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800262e4:	e0 18 fe 00 	andl	r8,0xfe00
800262e8:	ef 48 ff a8 	st.w	r7[-88],r8
800262ec:	c0 e8       	rjmp	80026308 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
800262ee:	ee fa ff a8 	ld.w	r10,r7[-88]
800262f2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800262f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800262fa:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
800262fe:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026302:	2f 88       	sub	r8,-8
80026304:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026308:	ee f9 ff a8 	ld.w	r9,r7[-88]
8002630c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026310:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026314:	10 39       	cp.w	r9,r8
80026316:	ce c3       	brcs	800262ee <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026318:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002631c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026320:	c5 10       	breq	800263c2 <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026322:	30 08       	mov	r8,0
80026324:	ef 48 ff ec 	st.w	r7[-20],r8
80026328:	c1 38       	rjmp	8002634e <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
8002632a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002632e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026332:	11 89       	ld.ub	r9,r8[0x0]
80026334:	5c 59       	castu.b	r9
80026336:	ee 0a 00 0a 	add	r10,r7,r10
8002633a:	f5 69 ff ac 	st.b	r10[-84],r9
8002633e:	2f f8       	sub	r8,-1
80026340:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026344:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026348:	2f f8       	sub	r8,-1
8002634a:	ef 48 ff ec 	st.w	r7[-20],r8
8002634e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026352:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80026356:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002635a:	10 39       	cp.w	r9,r8
8002635c:	fe 9b ff e7 	brhi	8002632a <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80026360:	c1 28       	rjmp	80026384 <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
80026362:	ee fa ff ec 	ld.w	r10,r7[-20]
80026366:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002636a:	11 89       	ld.ub	r9,r8[0x0]
8002636c:	ee 0a 00 0a 	add	r10,r7,r10
80026370:	f5 69 ff ac 	st.b	r10[-84],r9
80026374:	2f f8       	sub	r8,-1
80026376:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
8002637a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002637e:	2f f8       	sub	r8,-1
80026380:	ef 48 ff ec 	st.w	r7[-20],r8
80026384:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026388:	58 78       	cp.w	r8,7
8002638a:	fe 98 ff ec 	brls	80026362 <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
8002638e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026392:	e0 18 ff f8 	andl	r8,0xfff8
80026396:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
8002639a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002639e:	ee f8 ff bc 	ld.w	r8,r7[-68]
800263a2:	10 39       	cp.w	r9,r8
800263a4:	c0 c2       	brcc	800263bc <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800263a6:	ee fa ff dc 	ld.w	r10,r7[-36]
800263aa:	ee e8 ff ac 	ld.d	r8,r7[-84]
800263ae:	f4 e9 00 00 	st.d	r10[0],r8
800263b2:	f4 c8 ff f8 	sub	r8,r10,-8
800263b6:	ef 48 ff dc 	st.w	r7[-36],r8
800263ba:	c0 48       	rjmp	800263c2 <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
800263bc:	30 18       	mov	r8,1
800263be:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
800263c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800263c6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800263ca:	c0 40       	breq	800263d2 <flashc_memcpy+0x29e>
800263cc:	58 28       	cp.w	r8,2
800263ce:	c2 70       	breq	8002641c <flashc_memcpy+0x2e8>
800263d0:	c6 18       	rjmp	80026492 <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800263d2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800263d6:	10 99       	mov	r9,r8
800263d8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800263dc:	f2 08 01 08 	sub	r8,r9,r8
800263e0:	a3 58       	asr	r8,0x3
800263e2:	ef 48 ff ec 	st.w	r7[-20],r8
800263e6:	c1 68       	rjmp	80026412 <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
800263e8:	ee fb ff dc 	ld.w	r11,r7[-36]
800263ec:	ee fa ff d8 	ld.w	r10,r7[-40]
800263f0:	f4 e8 00 00 	ld.d	r8,r10[0]
800263f4:	f6 e9 00 00 	st.d	r11[0],r8
800263f8:	f6 c8 ff f8 	sub	r8,r11,-8
800263fc:	ef 48 ff dc 	st.w	r7[-36],r8
80026400:	f4 c8 ff f8 	sub	r8,r10,-8
80026404:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026408:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002640c:	20 18       	sub	r8,1
8002640e:	ef 48 ff ec 	st.w	r7[-20],r8
80026412:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026416:	58 08       	cp.w	r8,0
80026418:	ce 81       	brne	800263e8 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
8002641a:	c7 48       	rjmp	80026502 <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002641c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026420:	10 99       	mov	r9,r8
80026422:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026426:	f2 08 01 08 	sub	r8,r9,r8
8002642a:	a3 58       	asr	r8,0x3
8002642c:	ef 48 ff ec 	st.w	r7[-20],r8
80026430:	c2 c8       	rjmp	80026488 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
80026432:	30 08       	mov	r8,0
80026434:	ef 48 ff f0 	st.w	r7[-16],r8
80026438:	c1 48       	rjmp	80026460 <flashc_memcpy+0x32c>
8002643a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002643e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026442:	92 0a       	ld.sh	r10,r9[0x0]
80026444:	a1 78       	lsl	r8,0x1
80026446:	ee 08 00 08 	add	r8,r7,r8
8002644a:	f1 5a ff ac 	st.h	r8[-84],r10
8002644e:	f2 c8 ff fe 	sub	r8,r9,-2
80026452:	ef 48 ff d8 	st.w	r7[-40],r8
80026456:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002645a:	2f f8       	sub	r8,-1
8002645c:	ef 48 ff f0 	st.w	r7[-16],r8
80026460:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026464:	58 38       	cp.w	r8,3
80026466:	fe 98 ff ea 	brls	8002643a <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
8002646a:	ee fa ff dc 	ld.w	r10,r7[-36]
8002646e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026472:	f4 e9 00 00 	st.d	r10[0],r8
80026476:	f4 c8 ff f8 	sub	r8,r10,-8
8002647a:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002647e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026482:	20 18       	sub	r8,1
80026484:	ef 48 ff ec 	st.w	r7[-20],r8
80026488:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002648c:	58 08       	cp.w	r8,0
8002648e:	cd 21       	brne	80026432 <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
80026490:	c3 98       	rjmp	80026502 <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026492:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026496:	10 99       	mov	r9,r8
80026498:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002649c:	f2 08 01 08 	sub	r8,r9,r8
800264a0:	a3 58       	asr	r8,0x3
800264a2:	ef 48 ff ec 	st.w	r7[-20],r8
800264a6:	c2 a8       	rjmp	800264fa <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
800264a8:	30 08       	mov	r8,0
800264aa:	ef 48 ff f0 	st.w	r7[-16],r8
800264ae:	c1 28       	rjmp	800264d2 <flashc_memcpy+0x39e>
800264b0:	ee fa ff f0 	ld.w	r10,r7[-16]
800264b4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800264b8:	11 89       	ld.ub	r9,r8[0x0]
800264ba:	ee 0a 00 0a 	add	r10,r7,r10
800264be:	f5 69 ff ac 	st.b	r10[-84],r9
800264c2:	2f f8       	sub	r8,-1
800264c4:	ef 48 ff d8 	st.w	r7[-40],r8
800264c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800264cc:	2f f8       	sub	r8,-1
800264ce:	ef 48 ff f0 	st.w	r7[-16],r8
800264d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800264d6:	58 78       	cp.w	r8,7
800264d8:	fe 98 ff ec 	brls	800264b0 <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
800264dc:	ee fa ff dc 	ld.w	r10,r7[-36]
800264e0:	ee e8 ff ac 	ld.d	r8,r7[-84]
800264e4:	f4 e9 00 00 	st.d	r10[0],r8
800264e8:	f4 c8 ff f8 	sub	r8,r10,-8
800264ec:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800264f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800264f4:	20 18       	sub	r8,1
800264f6:	ef 48 ff ec 	st.w	r7[-20],r8
800264fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800264fe:	58 08       	cp.w	r8,0
80026500:	cd 41       	brne	800264a8 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80026502:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80026506:	30 08       	mov	r8,0
80026508:	f0 09 18 00 	cp.b	r9,r8
8002650c:	c6 c0       	breq	800265e4 <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
8002650e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80026512:	30 08       	mov	r8,0
80026514:	f0 09 18 00 	cp.b	r9,r8
80026518:	c0 80       	breq	80026528 <flashc_memcpy+0x3f4>
8002651a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002651e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026522:	ef 48 ff ec 	st.w	r7[-20],r8
80026526:	c1 f8       	rjmp	80026564 <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026528:	30 08       	mov	r8,0
8002652a:	ef 48 ff ec 	st.w	r7[-20],r8
8002652e:	c1 28       	rjmp	80026552 <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
80026530:	ee fa ff ec 	ld.w	r10,r7[-20]
80026534:	ee f8 ff d8 	ld.w	r8,r7[-40]
80026538:	11 89       	ld.ub	r9,r8[0x0]
8002653a:	ee 0a 00 0a 	add	r10,r7,r10
8002653e:	f5 69 ff ac 	st.b	r10[-84],r9
80026542:	2f f8       	sub	r8,-1
80026544:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026548:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002654c:	2f f8       	sub	r8,-1
8002654e:	ef 48 ff ec 	st.w	r7[-20],r8
80026552:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026556:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002655a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002655e:	10 39       	cp.w	r9,r8
80026560:	fe 9b ff e8 	brhi	80026530 <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80026564:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026568:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
8002656c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026570:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026574:	c3 20       	breq	800265d8 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026576:	c1 38       	rjmp	8002659c <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026578:	ee fa ff ec 	ld.w	r10,r7[-20]
8002657c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026580:	11 89       	ld.ub	r9,r8[0x0]
80026582:	5c 59       	castu.b	r9
80026584:	ee 0a 00 0a 	add	r10,r7,r10
80026588:	f5 69 ff ac 	st.b	r10[-84],r9
8002658c:	2f f8       	sub	r8,-1
8002658e:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026592:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026596:	2f f8       	sub	r8,-1
80026598:	ef 48 ff ec 	st.w	r7[-20],r8
8002659c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800265a0:	58 78       	cp.w	r8,7
800265a2:	fe 98 ff eb 	brls	80026578 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800265a6:	ee fa ff dc 	ld.w	r10,r7[-36]
800265aa:	ee e8 ff ac 	ld.d	r8,r7[-84]
800265ae:	f4 e9 00 00 	st.d	r10[0],r8
800265b2:	f4 c8 ff f8 	sub	r8,r10,-8
800265b6:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800265ba:	c1 08       	rjmp	800265da <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
800265bc:	ee fa ff a8 	ld.w	r10,r7[-88]
800265c0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800265c4:	f0 e8 00 00 	ld.d	r8,r8[0]
800265c8:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800265cc:	ee f8 ff a8 	ld.w	r8,r7[-88]
800265d0:	2f 88       	sub	r8,-8
800265d2:	ef 48 ff a8 	st.w	r7[-88],r8
800265d6:	c0 28       	rjmp	800265da <flashc_memcpy+0x4a6>
800265d8:	d7 03       	nop
800265da:	ee f8 ff a8 	ld.w	r8,r7[-88]
800265de:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800265e2:	ce d1       	brne	800265bc <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
800265e4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800265e8:	fc 19 80 80 	movh	r9,0x8080
800265ec:	12 38       	cp.w	r8,r9
800265ee:	e0 8b 00 38 	brhi	8002665e <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
800265f2:	ef 39 ff 98 	ld.ub	r9,r7[-104]
800265f6:	30 08       	mov	r8,0
800265f8:	f0 09 18 00 	cp.b	r9,r8
800265fc:	c0 e0       	breq	80026618 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
800265fe:	30 0b       	mov	r11,0
80026600:	3f fc       	mov	r12,-1
80026602:	f0 16 00 9d 	mcall	r6[628]
        error_status |= flashc_error_status;
80026606:	ec f8 00 54 	ld.w	r8,r6[84]
8002660a:	70 08       	ld.w	r8,r8[0x0]
8002660c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026610:	f3 e8 10 08 	or	r8,r9,r8
80026614:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80026618:	3f fc       	mov	r12,-1
8002661a:	f0 16 00 f0 	mcall	r6[960]
      error_status |= flashc_error_status;
8002661e:	ec f8 00 54 	ld.w	r8,r6[84]
80026622:	70 08       	ld.w	r8,r8[0x0]
80026624:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026628:	f3 e8 10 08 	or	r8,r9,r8
8002662c:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80026630:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026634:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026638:	10 39       	cp.w	r9,r8
8002663a:	c2 f3       	brcs	80026698 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
8002663c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026640:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026644:	fc 1a 80 80 	movh	r10,0x8080
80026648:	f4 08 01 08 	sub	r8,r10,r8
8002664c:	f2 08 00 08 	add	r8,r9,r8
80026650:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80026654:	fc 18 80 80 	movh	r8,0x8080
80026658:	ef 48 ff dc 	st.w	r7[-36],r8
8002665c:	c1 e8       	rjmp	80026698 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
8002665e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80026662:	30 08       	mov	r8,0
80026664:	f0 09 18 00 	cp.b	r9,r8
80026668:	c0 d0       	breq	80026682 <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
8002666a:	30 0c       	mov	r12,0
8002666c:	f0 16 01 25 	mcall	r6[1172]
        error_status |= flashc_error_status;
80026670:	ec f8 00 54 	ld.w	r8,r6[84]
80026674:	70 08       	ld.w	r8,r8[0x0]
80026676:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002667a:	f3 e8 10 08 	or	r8,r9,r8
8002667e:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
80026682:	f0 16 00 ef 	mcall	r6[956]
      error_status |= flashc_error_status;
80026686:	ec f8 00 54 	ld.w	r8,r6[84]
8002668a:	70 08       	ld.w	r8,r8[0x0]
8002668c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026690:	f3 e8 10 08 	or	r8,r9,r8
80026694:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80026698:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002669c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800266a0:	10 39       	cp.w	r9,r8
800266a2:	fe 93 fd e7 	brlo	80026270 <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
800266a6:	ec f8 00 54 	ld.w	r8,r6[84]
800266aa:	ee f9 ff e8 	ld.w	r9,r7[-24]
800266ae:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
800266b0:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800266b4:	10 9c       	mov	r12,r8
800266b6:	2e 6d       	sub	sp,-104
800266b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800266bc:	80 02       	ld.sh	r2,r0[0x0]
800266be:	5f c4       	srvs	r4

800266c0 <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800266c0:	eb cd 40 c0 	pushm	r6-r7,lr
800266c4:	1a 97       	mov	r7,sp
800266c6:	20 1d       	sub	sp,4
800266c8:	49 76       	lddpc	r6,80026724 <flashc_set_flash_waitstate_and_readmode+0x64>
800266ca:	1e 26       	rsub	r6,pc
800266cc:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
800266d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266d4:	e0 69 8a 40 	mov	r9,35392
800266d8:	ea 19 01 f7 	orh	r9,0x1f7
800266dc:	12 38       	cp.w	r8,r9
800266de:	e0 88 00 18 	brls	8002670e <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
800266e2:	30 1c       	mov	r12,1
800266e4:	f0 16 00 95 	mcall	r6[596]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
800266e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266ec:	e0 69 14 80 	mov	r9,5248
800266f0:	ea 19 03 ef 	orh	r9,0x3ef
800266f4:	12 38       	cp.w	r8,r9
800266f6:	e0 8b 00 07 	brhi	80026704 <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
800266fa:	3f fb       	mov	r11,-1
800266fc:	31 1c       	mov	r12,17
800266fe:	f0 16 00 28 	mcall	r6[160]
80026702:	c0 d8       	rjmp	8002671c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
80026704:	3f fb       	mov	r11,-1
80026706:	31 0c       	mov	r12,16
80026708:	f0 16 00 28 	mcall	r6[160]
8002670c:	c0 88       	rjmp	8002671c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
8002670e:	30 0c       	mov	r12,0
80026710:	f0 16 00 95 	mcall	r6[596]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026714:	3f fb       	mov	r11,-1
80026716:	31 1c       	mov	r12,17
80026718:	f0 16 00 28 	mcall	r6[160]
    
  }
}
8002671c:	2f fd       	sub	sp,-4
8002671e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026722:	00 00       	add	r0,r0
80026724:	80 02       	ld.sh	r2,r0[0x0]
80026726:	65 4e       	ld.w	lr,r2[0x50]

80026728 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80026728:	eb cd 40 c0 	pushm	r6-r7,lr
8002672c:	1a 97       	mov	r7,sp
8002672e:	20 4d       	sub	sp,16
80026730:	49 b6       	lddpc	r6,8002679c <gpio_enable_module+0x74>
80026732:	1e 26       	rsub	r6,pc
80026734:	ef 4c ff f4 	st.w	r7[-12],r12
80026738:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
8002673c:	30 08       	mov	r8,0
8002673e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80026742:	30 08       	mov	r8,0
80026744:	ef 48 ff fc 	st.w	r7[-4],r8
80026748:	c1 d8       	rjmp	80026782 <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8002674a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002674e:	11 98       	ld.ub	r8,r8[0x1]
80026750:	10 99       	mov	r9,r8
80026752:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026756:	11 88       	ld.ub	r8,r8[0x0]
80026758:	12 9b       	mov	r11,r9
8002675a:	10 9c       	mov	r12,r8
8002675c:	f0 16 00 3c 	mcall	r6[240]
80026760:	18 98       	mov	r8,r12
80026762:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026766:	f3 e8 10 08 	or	r8,r9,r8
8002676a:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
8002676e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026772:	2f e8       	sub	r8,-2
80026774:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80026778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002677c:	2f f8       	sub	r8,-1
8002677e:	ef 48 ff fc 	st.w	r7[-4],r8
80026782:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002678a:	10 39       	cp.w	r9,r8
8002678c:	cd f3       	brcs	8002674a <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
8002678e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80026792:	10 9c       	mov	r12,r8
80026794:	2f cd       	sub	sp,-16
80026796:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002679a:	00 00       	add	r0,r0
8002679c:	80 02       	ld.sh	r2,r0[0x0]
8002679e:	65 b6       	ld.w	r6,r2[0x6c]

800267a0 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800267a0:	eb cd 40 c0 	pushm	r6-r7,lr
800267a4:	1a 97       	mov	r7,sp
800267a6:	20 3d       	sub	sp,12
800267a8:	fe f6 02 94 	ld.w	r6,pc[660]
800267ac:	1e 26       	rsub	r6,pc
800267ae:	ef 4c ff f8 	st.w	r7[-8],r12
800267b2:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800267b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267ba:	a5 98       	lsr	r8,0x5
800267bc:	a9 78       	lsl	r8,0x9
800267be:	e0 28 e0 00 	sub	r8,57344
800267c2:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800267c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800267ca:	58 78       	cp.w	r8,7
800267cc:	e0 8b 01 26 	brhi	80026a18 <gpio_enable_module_pin+0x278>
800267d0:	fe c9 ff f8 	sub	r9,pc,-8
800267d4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800267d8:	e0 8f 00 10 	bral	800267f8 <gpio_enable_module_pin+0x58>
800267dc:	e0 8f 00 30 	bral	8002683c <gpio_enable_module_pin+0x9c>
800267e0:	e0 8f 00 50 	bral	80026880 <gpio_enable_module_pin+0xe0>
800267e4:	e0 8f 00 70 	bral	800268c4 <gpio_enable_module_pin+0x124>
800267e8:	e0 8f 00 90 	bral	80026908 <gpio_enable_module_pin+0x168>
800267ec:	e0 8f 00 b0 	bral	8002694c <gpio_enable_module_pin+0x1ac>
800267f0:	e0 8f 00 d0 	bral	80026990 <gpio_enable_module_pin+0x1f0>
800267f4:	e0 8f 00 f0 	bral	800269d4 <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800267f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026800:	30 19       	mov	r9,1
80026802:	f2 08 09 48 	lsl	r8,r9,r8
80026806:	10 99       	mov	r9,r8
80026808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002680c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002680e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026812:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026816:	30 19       	mov	r9,1
80026818:	f2 08 09 48 	lsl	r8,r9,r8
8002681c:	10 99       	mov	r9,r8
8002681e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026822:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026828:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002682c:	30 19       	mov	r9,1
8002682e:	f2 08 09 48 	lsl	r8,r9,r8
80026832:	10 99       	mov	r9,r8
80026834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026838:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002683a:	cf 18       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002683c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026840:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026844:	30 19       	mov	r9,1
80026846:	f2 08 09 48 	lsl	r8,r9,r8
8002684a:	10 99       	mov	r9,r8
8002684c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026850:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026856:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002685a:	30 19       	mov	r9,1
8002685c:	f2 08 09 48 	lsl	r8,r9,r8
80026860:	10 99       	mov	r9,r8
80026862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026866:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002686c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026870:	30 19       	mov	r9,1
80026872:	f2 08 09 48 	lsl	r8,r9,r8
80026876:	10 99       	mov	r9,r8
80026878:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002687c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002687e:	cc f8       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026880:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026884:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026888:	30 19       	mov	r9,1
8002688a:	f2 08 09 48 	lsl	r8,r9,r8
8002688e:	10 99       	mov	r9,r8
80026890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026894:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002689a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002689e:	30 19       	mov	r9,1
800268a0:	f2 08 09 48 	lsl	r8,r9,r8
800268a4:	10 99       	mov	r9,r8
800268a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268aa:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800268ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268b4:	30 19       	mov	r9,1
800268b6:	f2 08 09 48 	lsl	r8,r9,r8
800268ba:	10 99       	mov	r9,r8
800268bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268c0:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800268c2:	ca d8       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800268c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268cc:	30 19       	mov	r9,1
800268ce:	f2 08 09 48 	lsl	r8,r9,r8
800268d2:	10 99       	mov	r9,r8
800268d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268d8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800268da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268e2:	30 19       	mov	r9,1
800268e4:	f2 08 09 48 	lsl	r8,r9,r8
800268e8:	10 99       	mov	r9,r8
800268ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268ee:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800268f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268f8:	30 19       	mov	r9,1
800268fa:	f2 08 09 48 	lsl	r8,r9,r8
800268fe:	10 99       	mov	r9,r8
80026900:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026904:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026906:	c8 b8       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002690c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026910:	30 19       	mov	r9,1
80026912:	f2 08 09 48 	lsl	r8,r9,r8
80026916:	10 99       	mov	r9,r8
80026918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002691c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002691e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026922:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026926:	30 19       	mov	r9,1
80026928:	f2 08 09 48 	lsl	r8,r9,r8
8002692c:	10 99       	mov	r9,r8
8002692e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026932:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026934:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026938:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002693c:	30 19       	mov	r9,1
8002693e:	f2 08 09 48 	lsl	r8,r9,r8
80026942:	10 99       	mov	r9,r8
80026944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026948:	91 d9       	st.w	r8[0x34],r9
    break;
8002694a:	c6 98       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002694c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026950:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026954:	30 19       	mov	r9,1
80026956:	f2 08 09 48 	lsl	r8,r9,r8
8002695a:	10 99       	mov	r9,r8
8002695c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026960:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026966:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002696a:	30 19       	mov	r9,1
8002696c:	f2 08 09 48 	lsl	r8,r9,r8
80026970:	10 99       	mov	r9,r8
80026972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026976:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002697c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026980:	30 19       	mov	r9,1
80026982:	f2 08 09 48 	lsl	r8,r9,r8
80026986:	10 99       	mov	r9,r8
80026988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002698c:	91 d9       	st.w	r8[0x34],r9
    break;
8002698e:	c4 78       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026994:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026998:	30 19       	mov	r9,1
8002699a:	f2 08 09 48 	lsl	r8,r9,r8
8002699e:	10 99       	mov	r9,r8
800269a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269a4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800269a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269ae:	30 19       	mov	r9,1
800269b0:	f2 08 09 48 	lsl	r8,r9,r8
800269b4:	10 99       	mov	r9,r8
800269b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269ba:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800269bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269c4:	30 19       	mov	r9,1
800269c6:	f2 08 09 48 	lsl	r8,r9,r8
800269ca:	10 99       	mov	r9,r8
800269cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269d0:	91 d9       	st.w	r8[0x34],r9
    break;
800269d2:	c2 58       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800269d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269dc:	30 19       	mov	r9,1
800269de:	f2 08 09 48 	lsl	r8,r9,r8
800269e2:	10 99       	mov	r9,r8
800269e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269e8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800269ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269f2:	30 19       	mov	r9,1
800269f4:	f2 08 09 48 	lsl	r8,r9,r8
800269f8:	10 99       	mov	r9,r8
800269fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269fe:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026a00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a08:	30 19       	mov	r9,1
80026a0a:	f2 08 09 48 	lsl	r8,r9,r8
80026a0e:	10 99       	mov	r9,r8
80026a10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a14:	91 d9       	st.w	r8[0x34],r9
    break;
80026a16:	c0 38       	rjmp	80026a1c <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80026a18:	30 18       	mov	r8,1
80026a1a:	c0 d8       	rjmp	80026a34 <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80026a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a24:	30 19       	mov	r9,1
80026a26:	f2 08 09 48 	lsl	r8,r9,r8
80026a2a:	10 99       	mov	r9,r8
80026a2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a30:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80026a32:	30 08       	mov	r8,0
}
80026a34:	10 9c       	mov	r12,r8
80026a36:	2f dd       	sub	sp,-12
80026a38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026a3c:	80 02       	ld.sh	r2,r0[0x0]
80026a3e:	66 30       	ld.w	r0,r3[0xc]

80026a40 <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80026a40:	eb cd 40 c0 	pushm	r6-r7,lr
80026a44:	1a 97       	mov	r7,sp
80026a46:	20 3d       	sub	sp,12
80026a48:	49 26       	lddpc	r6,80026a90 <gpio_enable_gpio+0x50>
80026a4a:	1e 26       	rsub	r6,pc
80026a4c:	ef 4c ff f8 	st.w	r7[-8],r12
80026a50:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
80026a54:	30 08       	mov	r8,0
80026a56:	ef 48 ff fc 	st.w	r7[-4],r8
80026a5a:	c1 18       	rjmp	80026a7c <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
80026a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a60:	11 88       	ld.ub	r8,r8[0x0]
80026a62:	10 9c       	mov	r12,r8
80026a64:	f0 16 01 4e 	mcall	r6[1336]
    gpiomap++;
80026a68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a6c:	2f e8       	sub	r8,-2
80026a6e:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80026a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a76:	2f f8       	sub	r8,-1
80026a78:	ef 48 ff fc 	st.w	r7[-4],r8
80026a7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026a80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a84:	10 39       	cp.w	r9,r8
80026a86:	ce b3       	brcs	80026a5c <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
80026a88:	2f dd       	sub	sp,-12
80026a8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026a8e:	00 00       	add	r0,r0
80026a90:	80 02       	ld.sh	r2,r0[0x0]
80026a92:	68 ce       	ld.w	lr,r4[0x30]

80026a94 <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
80026a94:	eb cd 40 80 	pushm	r7,lr
80026a98:	1a 97       	mov	r7,sp
80026a9a:	20 2d       	sub	sp,8
80026a9c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026aa4:	a5 98       	lsr	r8,0x5
80026aa6:	a9 78       	lsl	r8,0x9
80026aa8:	e0 28 e0 00 	sub	r8,57344
80026aac:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80026ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ab4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ab8:	30 19       	mov	r9,1
80026aba:	f2 08 09 48 	lsl	r8,r9,r8
80026abe:	10 99       	mov	r9,r8
80026ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ac4:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80026ac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026acc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ad0:	30 19       	mov	r9,1
80026ad2:	f2 08 09 48 	lsl	r8,r9,r8
80026ad6:	10 99       	mov	r9,r8
80026ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026adc:	91 19       	st.w	r8[0x4],r9
}
80026ade:	2f ed       	sub	sp,-8
80026ae0:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ae4 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80026ae4:	eb cd 40 80 	pushm	r7,lr
80026ae8:	1a 97       	mov	r7,sp
80026aea:	20 2d       	sub	sp,8
80026aec:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026af4:	a5 98       	lsr	r8,0x5
80026af6:	a9 78       	lsl	r8,0x9
80026af8:	e0 28 e0 00 	sub	r8,57344
80026afc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b08:	30 19       	mov	r9,1
80026b0a:	f2 08 09 48 	lsl	r8,r9,r8
80026b0e:	10 99       	mov	r9,r8
80026b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b14:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80026b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b20:	30 19       	mov	r9,1
80026b22:	f2 08 09 48 	lsl	r8,r9,r8
80026b26:	10 99       	mov	r9,r8
80026b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b2c:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80026b30:	2f ed       	sub	sp,-8
80026b32:	e3 cd 80 80 	ldm	sp++,r7,pc

80026b36 <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
80026b36:	eb cd 40 80 	pushm	r7,lr
80026b3a:	1a 97       	mov	r7,sp
80026b3c:	20 2d       	sub	sp,8
80026b3e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b46:	a5 98       	lsr	r8,0x5
80026b48:	a9 78       	lsl	r8,0x9
80026b4a:	e0 28 e0 00 	sub	r8,57344
80026b4e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b5a:	30 19       	mov	r9,1
80026b5c:	f2 08 09 48 	lsl	r8,r9,r8
80026b60:	10 99       	mov	r9,r8
80026b62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b66:	f1 49 00 78 	st.w	r8[120],r9
}
80026b6a:	2f ed       	sub	sp,-8
80026b6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026b70 <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
80026b70:	eb cd 40 80 	pushm	r7,lr
80026b74:	1a 97       	mov	r7,sp
80026b76:	20 2d       	sub	sp,8
80026b78:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b80:	a5 98       	lsr	r8,0x5
80026b82:	a9 78       	lsl	r8,0x9
80026b84:	e0 28 e0 00 	sub	r8,57344
80026b88:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b94:	30 19       	mov	r9,1
80026b96:	f2 08 09 48 	lsl	r8,r9,r8
80026b9a:	10 99       	mov	r9,r8
80026b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ba0:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ba8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bac:	30 19       	mov	r9,1
80026bae:	f2 08 09 48 	lsl	r8,r9,r8
80026bb2:	10 99       	mov	r9,r8
80026bb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bb8:	f1 49 00 84 	st.w	r8[132],r9
}
80026bbc:	2f ed       	sub	sp,-8
80026bbe:	e3 cd 80 80 	ldm	sp++,r7,pc

80026bc2 <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
80026bc2:	eb cd 40 80 	pushm	r7,lr
80026bc6:	1a 97       	mov	r7,sp
80026bc8:	20 2d       	sub	sp,8
80026bca:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bd2:	a5 98       	lsr	r8,0x5
80026bd4:	a9 78       	lsl	r8,0x9
80026bd6:	e0 28 e0 00 	sub	r8,57344
80026bda:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80026bde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026be2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026be6:	30 19       	mov	r9,1
80026be8:	f2 08 09 48 	lsl	r8,r9,r8
80026bec:	10 99       	mov	r9,r8
80026bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bf2:	f1 49 00 88 	st.w	r8[136],r9
}
80026bf6:	2f ed       	sub	sp,-8
80026bf8:	e3 cd 80 80 	ldm	sp++,r7,pc

80026bfc <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80026bfc:	eb cd 40 80 	pushm	r7,lr
80026c00:	1a 97       	mov	r7,sp
80026c02:	20 2d       	sub	sp,8
80026c04:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c0c:	a5 98       	lsr	r8,0x5
80026c0e:	a9 78       	lsl	r8,0x9
80026c10:	e0 28 e0 00 	sub	r8,57344
80026c14:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c20:	30 19       	mov	r9,1
80026c22:	f2 08 09 48 	lsl	r8,r9,r8
80026c26:	10 99       	mov	r9,r8
80026c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c2c:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026c30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c38:	30 19       	mov	r9,1
80026c3a:	f2 08 09 48 	lsl	r8,r9,r8
80026c3e:	10 99       	mov	r9,r8
80026c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c44:	f1 49 00 84 	st.w	r8[132],r9
}
80026c48:	2f ed       	sub	sp,-8
80026c4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80026c4e <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
80026c4e:	eb cd 40 80 	pushm	r7,lr
80026c52:	1a 97       	mov	r7,sp
80026c54:	20 2d       	sub	sp,8
80026c56:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c5e:	a5 98       	lsr	r8,0x5
80026c60:	a9 78       	lsl	r8,0x9
80026c62:	e0 28 e0 00 	sub	r8,57344
80026c66:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c72:	30 19       	mov	r9,1
80026c74:	f2 08 09 48 	lsl	r8,r9,r8
80026c78:	10 99       	mov	r9,r8
80026c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c7e:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
80026c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c8a:	30 19       	mov	r9,1
80026c8c:	f2 08 09 48 	lsl	r8,r9,r8
80026c90:	10 99       	mov	r9,r8
80026c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c96:	f1 49 00 88 	st.w	r8[136],r9
}
80026c9a:	2f ed       	sub	sp,-8
80026c9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ca0 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
80026ca0:	eb cd 40 80 	pushm	r7,lr
80026ca4:	1a 97       	mov	r7,sp
80026ca6:	20 3d       	sub	sp,12
80026ca8:	ef 4c ff f8 	st.w	r7[-8],r12
80026cac:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80026cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cb4:	a5 98       	lsr	r8,0x5
80026cb6:	a9 78       	lsl	r8,0x9
80026cb8:	e0 28 e0 00 	sub	r8,57344
80026cbc:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
80026cc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026cc4:	e2 18 00 08 	andl	r8,0x8,COH
80026cc8:	c0 e0       	breq	80026ce4 <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
80026cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cd2:	30 19       	mov	r9,1
80026cd4:	f2 08 09 48 	lsl	r8,r9,r8
80026cd8:	10 99       	mov	r9,r8
80026cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cde:	f1 49 00 84 	st.w	r8[132],r9
80026ce2:	c0 d8       	rjmp	80026cfc <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
80026ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ce8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cec:	30 19       	mov	r9,1
80026cee:	f2 08 09 48 	lsl	r8,r9,r8
80026cf2:	10 99       	mov	r9,r8
80026cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cf8:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026cfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d00:	e2 18 00 04 	andl	r8,0x4,COH
80026d04:	c0 e0       	breq	80026d20 <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
80026d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d0e:	30 19       	mov	r9,1
80026d10:	f2 08 09 48 	lsl	r8,r9,r8
80026d14:	10 99       	mov	r9,r8
80026d16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d1a:	f1 49 00 74 	st.w	r8[116],r9
80026d1e:	c0 d8       	rjmp	80026d38 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80026d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d28:	30 19       	mov	r9,1
80026d2a:	f2 08 09 48 	lsl	r8,r9,r8
80026d2e:	10 99       	mov	r9,r8
80026d30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d34:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80026d38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d3c:	e2 18 00 40 	andl	r8,0x40,COH
80026d40:	c0 e0       	breq	80026d5c <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
80026d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d4a:	30 19       	mov	r9,1
80026d4c:	f2 08 09 48 	lsl	r8,r9,r8
80026d50:	10 99       	mov	r9,r8
80026d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d56:	f1 49 00 e4 	st.w	r8[228],r9
80026d5a:	c0 d8       	rjmp	80026d74 <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
80026d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d64:	30 19       	mov	r9,1
80026d66:	f2 08 09 48 	lsl	r8,r9,r8
80026d6a:	10 99       	mov	r9,r8
80026d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d70:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80026d74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026d78:	e2 18 00 40 	andl	r8,0x40,COH
80026d7c:	c0 e0       	breq	80026d98 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
80026d7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d86:	30 19       	mov	r9,1
80026d88:	f2 08 09 48 	lsl	r8,r9,r8
80026d8c:	10 99       	mov	r9,r8
80026d8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d92:	f1 49 00 84 	st.w	r8[132],r9
80026d96:	c0 d8       	rjmp	80026db0 <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
80026d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026da0:	30 19       	mov	r9,1
80026da2:	f2 08 09 48 	lsl	r8,r9,r8
80026da6:	10 99       	mov	r9,r8
80026da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dac:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80026db0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026db4:	e2 18 00 10 	andl	r8,0x10,COH
80026db8:	c0 e0       	breq	80026dd4 <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
80026dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dc2:	30 19       	mov	r9,1
80026dc4:	f2 08 09 48 	lsl	r8,r9,r8
80026dc8:	10 99       	mov	r9,r8
80026dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dce:	f1 49 01 04 	st.w	r8[260],r9
80026dd2:	c0 d8       	rjmp	80026dec <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
80026dd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dd8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ddc:	30 19       	mov	r9,1
80026dde:	f2 08 09 48 	lsl	r8,r9,r8
80026de2:	10 99       	mov	r9,r8
80026de4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026de8:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026dec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026df0:	e2 18 00 20 	andl	r8,0x20,COH
80026df4:	c0 e0       	breq	80026e10 <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
80026df6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dfa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dfe:	30 19       	mov	r9,1
80026e00:	f2 08 09 48 	lsl	r8,r9,r8
80026e04:	10 99       	mov	r9,r8
80026e06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e0a:	f1 49 01 14 	st.w	r8[276],r9
80026e0e:	c0 d8       	rjmp	80026e28 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
80026e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e18:	30 19       	mov	r9,1
80026e1a:	f2 08 09 48 	lsl	r8,r9,r8
80026e1e:	10 99       	mov	r9,r8
80026e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e24:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026e28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e2c:	e2 18 00 80 	andl	r8,0x80,COH
80026e30:	c5 a0       	breq	80026ee4 <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
80026e32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e36:	e2 18 01 80 	andl	r8,0x180,COH
80026e3a:	c1 a0       	breq	80026e6e <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e44:	30 19       	mov	r9,1
80026e46:	f2 08 09 48 	lsl	r8,r9,r8
80026e4a:	10 99       	mov	r9,r8
80026e4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e50:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e5c:	30 19       	mov	r9,1
80026e5e:	f2 08 09 48 	lsl	r8,r9,r8
80026e62:	10 99       	mov	r9,r8
80026e64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e68:	f1 49 00 b8 	st.w	r8[184],r9
80026e6c:	c3 c8       	rjmp	80026ee4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
80026e6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e72:	e2 18 02 80 	andl	r8,0x280,COH
80026e76:	c1 a0       	breq	80026eaa <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80026e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e80:	30 19       	mov	r9,1
80026e82:	f2 08 09 48 	lsl	r8,r9,r8
80026e86:	10 99       	mov	r9,r8
80026e88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e8c:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e98:	30 19       	mov	r9,1
80026e9a:	f2 08 09 48 	lsl	r8,r9,r8
80026e9e:	10 99       	mov	r9,r8
80026ea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ea4:	f1 49 00 b8 	st.w	r8[184],r9
80026ea8:	c1 e8       	rjmp	80026ee4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
80026eaa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026eae:	e2 18 03 80 	andl	r8,0x380,COH
80026eb2:	c1 90       	breq	80026ee4 <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026eb8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ebc:	30 19       	mov	r9,1
80026ebe:	f2 08 09 48 	lsl	r8,r9,r8
80026ec2:	10 99       	mov	r9,r8
80026ec4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ec8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80026ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ed0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ed4:	30 19       	mov	r9,1
80026ed6:	f2 08 09 48 	lsl	r8,r9,r8
80026eda:	10 99       	mov	r9,r8
80026edc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ee0:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80026ee4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ee8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026eec:	5c 58       	castu.b	r8
80026eee:	c2 c0       	breq	80026f46 <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
80026ef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ef4:	e2 18 00 02 	andl	r8,0x2,COH
80026ef8:	c0 e0       	breq	80026f14 <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80026efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026efe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f02:	30 19       	mov	r9,1
80026f04:	f2 08 09 48 	lsl	r8,r9,r8
80026f08:	10 99       	mov	r9,r8
80026f0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f0e:	f1 49 00 54 	st.w	r8[84],r9
80026f12:	c0 d8       	rjmp	80026f2c <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80026f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f18:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f1c:	30 19       	mov	r9,1
80026f1e:	f2 08 09 48 	lsl	r8,r9,r8
80026f22:	10 99       	mov	r9,r8
80026f24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f28:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80026f2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f34:	30 19       	mov	r9,1
80026f36:	f2 08 09 48 	lsl	r8,r9,r8
80026f3a:	10 99       	mov	r9,r8
80026f3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f40:	f1 49 00 44 	st.w	r8[68],r9
80026f44:	c0 d8       	rjmp	80026f5e <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80026f46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f4e:	30 19       	mov	r9,1
80026f50:	f2 08 09 48 	lsl	r8,r9,r8
80026f54:	10 99       	mov	r9,r8
80026f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f5a:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80026f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f66:	30 19       	mov	r9,1
80026f68:	f2 08 09 48 	lsl	r8,r9,r8
80026f6c:	10 99       	mov	r9,r8
80026f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f72:	91 19       	st.w	r8[0x4],r9
}
80026f74:	2f dd       	sub	sp,-12
80026f76:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f7a <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
80026f7a:	eb cd 40 80 	pushm	r7,lr
80026f7e:	1a 97       	mov	r7,sp
80026f80:	20 4d       	sub	sp,16
80026f82:	ef 4c ff f8 	st.w	r7[-8],r12
80026f86:	ef 4b ff f4 	st.w	r7[-12],r11
80026f8a:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
80026f8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f92:	a9 78       	lsl	r8,0x9
80026f94:	e0 28 e0 00 	sub	r8,57344
80026f98:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
80026f9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fa0:	e2 18 00 08 	andl	r8,0x8,COH
80026fa4:	c0 80       	breq	80026fb4 <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
80026fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026faa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fae:	f1 49 00 84 	st.w	r8[132],r9
80026fb2:	c0 78       	rjmp	80026fc0 <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
80026fb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fbc:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026fc0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fc4:	e2 18 00 04 	andl	r8,0x4,COH
80026fc8:	c0 80       	breq	80026fd8 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
80026fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fce:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fd2:	f1 49 00 74 	st.w	r8[116],r9
80026fd6:	c0 78       	rjmp	80026fe4 <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
80026fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fdc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fe0:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
80026fe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fe8:	e2 18 00 40 	andl	r8,0x40,COH
80026fec:	c0 80       	breq	80026ffc <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
80026fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ff2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ff6:	f1 49 00 e4 	st.w	r8[228],r9
80026ffa:	c0 78       	rjmp	80027008 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
80026ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027000:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027004:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80027008:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002700c:	e2 18 00 40 	andl	r8,0x40,COH
80027010:	c0 80       	breq	80027020 <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
80027012:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027016:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002701a:	f1 49 00 84 	st.w	r8[132],r9
8002701e:	c0 78       	rjmp	8002702c <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
80027020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027024:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027028:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
8002702c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027030:	e2 18 00 10 	andl	r8,0x10,COH
80027034:	c0 80       	breq	80027044 <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
80027036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002703a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002703e:	f1 49 01 04 	st.w	r8[260],r9
80027042:	c0 78       	rjmp	80027050 <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
80027044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027048:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002704c:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80027050:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027054:	e2 18 00 20 	andl	r8,0x20,COH
80027058:	c0 80       	breq	80027068 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
8002705a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002705e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027062:	f1 49 01 14 	st.w	r8[276],r9
80027066:	c0 78       	rjmp	80027074 <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
80027068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002706c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027070:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80027074:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027078:	e2 18 00 80 	andl	r8,0x80,COH
8002707c:	c3 60       	breq	800270e8 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
8002707e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027082:	e2 18 01 80 	andl	r8,0x180,COH
80027086:	c0 e0       	breq	800270a2 <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
80027088:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002708c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027090:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
80027094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027098:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002709c:	f1 49 00 b8 	st.w	r8[184],r9
800270a0:	c2 48       	rjmp	800270e8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
800270a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270a6:	e2 18 02 80 	andl	r8,0x280,COH
800270aa:	c0 e0       	breq	800270c6 <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
800270ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270b4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
800270b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270c0:	f1 49 00 b8 	st.w	r8[184],r9
800270c4:	c1 28       	rjmp	800270e8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
800270c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270ca:	e2 18 03 80 	andl	r8,0x380,COH
800270ce:	c0 d0       	breq	800270e8 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
800270d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270d8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
800270dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270e4:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800270e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800270f0:	5c 58       	castu.b	r8
800270f2:	c1 a0       	breq	80027126 <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
800270f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800270f8:	e2 18 00 02 	andl	r8,0x2,COH
800270fc:	c0 80       	breq	8002710c <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
800270fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027102:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027106:	f1 49 00 54 	st.w	r8[84],r9
8002710a:	c0 78       	rjmp	80027118 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
8002710c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027110:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027114:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80027118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002711c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027120:	f1 49 00 44 	st.w	r8[68],r9
80027124:	c0 78       	rjmp	80027132 <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80027126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002712a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002712e:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
80027132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027136:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002713a:	91 19       	st.w	r8[0x4],r9
}
8002713c:	2f cd       	sub	sp,-16
8002713e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027142 <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
80027142:	eb cd 40 80 	pushm	r7,lr
80027146:	1a 97       	mov	r7,sp
80027148:	20 2d       	sub	sp,8
8002714a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002714e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027152:	a5 98       	lsr	r8,0x5
80027154:	a9 78       	lsl	r8,0x9
80027156:	e0 28 e0 00 	sub	r8,57344
8002715a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8002715e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027162:	71 89       	ld.w	r9,r8[0x60]
80027164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027168:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002716c:	f2 08 0a 48 	lsr	r8,r9,r8
80027170:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027174:	10 9c       	mov	r12,r8
80027176:	2f ed       	sub	sp,-8
80027178:	e3 cd 80 80 	ldm	sp++,r7,pc

8002717c <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
8002717c:	eb cd 40 80 	pushm	r7,lr
80027180:	1a 97       	mov	r7,sp
80027182:	20 2d       	sub	sp,8
80027184:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002718c:	a5 98       	lsr	r8,0x5
8002718e:	a9 78       	lsl	r8,0x9
80027190:	e0 28 e0 00 	sub	r8,57344
80027194:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
80027198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002719c:	71 49       	ld.w	r9,r8[0x50]
8002719e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271a6:	f2 08 0a 48 	lsr	r8,r9,r8
800271aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800271ae:	10 9c       	mov	r12,r8
800271b0:	2f ed       	sub	sp,-8
800271b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800271b6 <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
800271b6:	eb cd 40 80 	pushm	r7,lr
800271ba:	1a 97       	mov	r7,sp
800271bc:	20 2d       	sub	sp,8
800271be:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800271c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271c6:	a5 98       	lsr	r8,0x5
800271c8:	a9 78       	lsl	r8,0x9
800271ca:	e0 28 e0 00 	sub	r8,57344
800271ce:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
800271d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271d6:	71 09       	ld.w	r9,r8[0x40]
800271d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271e0:	f2 08 0a 48 	lsr	r8,r9,r8
800271e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800271e8:	5f 08       	sreq	r8
}
800271ea:	10 9c       	mov	r12,r8
800271ec:	2f ed       	sub	sp,-8
800271ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800271f2 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
800271f2:	eb cd 40 80 	pushm	r7,lr
800271f6:	1a 97       	mov	r7,sp
800271f8:	20 2d       	sub	sp,8
800271fa:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800271fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027202:	a5 98       	lsr	r8,0x5
80027204:	a9 78       	lsl	r8,0x9
80027206:	e0 28 e0 00 	sub	r8,57344
8002720a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8002720e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027212:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027216:	30 19       	mov	r9,1
80027218:	f2 08 09 48 	lsl	r8,r9,r8
8002721c:	10 99       	mov	r9,r8
8002721e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027222:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002722a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002722e:	30 19       	mov	r9,1
80027230:	f2 08 09 48 	lsl	r8,r9,r8
80027234:	10 99       	mov	r9,r8
80027236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002723a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002723e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027242:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027246:	30 19       	mov	r9,1
80027248:	f2 08 09 48 	lsl	r8,r9,r8
8002724c:	10 99       	mov	r9,r8
8002724e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027252:	91 19       	st.w	r8[0x4],r9
}
80027254:	2f ed       	sub	sp,-8
80027256:	e3 cd 80 80 	ldm	sp++,r7,pc

8002725a <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
8002725a:	eb cd 40 80 	pushm	r7,lr
8002725e:	1a 97       	mov	r7,sp
80027260:	20 2d       	sub	sp,8
80027262:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002726a:	a5 98       	lsr	r8,0x5
8002726c:	a9 78       	lsl	r8,0x9
8002726e:	e0 28 e0 00 	sub	r8,57344
80027272:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80027276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002727a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002727e:	30 19       	mov	r9,1
80027280:	f2 08 09 48 	lsl	r8,r9,r8
80027284:	10 99       	mov	r9,r8
80027286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002728a:	f1 49 00 54 	st.w	r8[84],r9
}
8002728e:	2f ed       	sub	sp,-8
80027290:	e3 cd 80 80 	ldm	sp++,r7,pc

80027294 <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
80027294:	eb cd 40 80 	pushm	r7,lr
80027298:	1a 97       	mov	r7,sp
8002729a:	20 3d       	sub	sp,12
8002729c:	ef 4c ff f8 	st.w	r7[-8],r12
800272a0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
800272a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272a8:	a9 78       	lsl	r8,0x9
800272aa:	e0 28 e0 00 	sub	r8,57344
800272ae:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
800272b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800272ba:	f1 49 00 54 	st.w	r8[84],r9
}
800272be:	2f dd       	sub	sp,-12
800272c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800272c4 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
800272c4:	eb cd 40 80 	pushm	r7,lr
800272c8:	1a 97       	mov	r7,sp
800272ca:	20 2d       	sub	sp,8
800272cc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800272d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272d4:	a5 98       	lsr	r8,0x5
800272d6:	a9 78       	lsl	r8,0x9
800272d8:	e0 28 e0 00 	sub	r8,57344
800272dc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800272e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272e8:	30 19       	mov	r9,1
800272ea:	f2 08 09 48 	lsl	r8,r9,r8
800272ee:	10 99       	mov	r9,r8
800272f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272f4:	f1 49 00 58 	st.w	r8[88],r9
}
800272f8:	2f ed       	sub	sp,-8
800272fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800272fe <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
800272fe:	eb cd 40 80 	pushm	r7,lr
80027302:	1a 97       	mov	r7,sp
80027304:	20 2d       	sub	sp,8
80027306:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002730a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002730e:	a5 98       	lsr	r8,0x5
80027310:	a9 78       	lsl	r8,0x9
80027312:	e0 28 e0 00 	sub	r8,57344
80027316:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002731a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002731e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027322:	30 19       	mov	r9,1
80027324:	f2 08 09 48 	lsl	r8,r9,r8
80027328:	10 99       	mov	r9,r8
8002732a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002732e:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027332:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027336:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002733a:	30 19       	mov	r9,1
8002733c:	f2 08 09 48 	lsl	r8,r9,r8
80027340:	10 99       	mov	r9,r8
80027342:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027346:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8002734a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002734e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027352:	30 19       	mov	r9,1
80027354:	f2 08 09 48 	lsl	r8,r9,r8
80027358:	10 99       	mov	r9,r8
8002735a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002735e:	91 19       	st.w	r8[0x4],r9
}
80027360:	2f ed       	sub	sp,-8
80027362:	e3 cd 80 80 	ldm	sp++,r7,pc

80027366 <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
80027366:	eb cd 40 80 	pushm	r7,lr
8002736a:	1a 97       	mov	r7,sp
8002736c:	20 3d       	sub	sp,12
8002736e:	ef 4c ff f8 	st.w	r7[-8],r12
80027372:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002737a:	a9 78       	lsl	r8,0x9
8002737c:	e0 28 e0 00 	sub	r8,57344
80027380:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
80027384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027388:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002738c:	f1 49 00 58 	st.w	r8[88],r9
}
80027390:	2f dd       	sub	sp,-12
80027392:	e3 cd 80 80 	ldm	sp++,r7,pc

80027396 <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
80027396:	eb cd 40 80 	pushm	r7,lr
8002739a:	1a 97       	mov	r7,sp
8002739c:	20 2d       	sub	sp,8
8002739e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800273a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273a6:	a5 98       	lsr	r8,0x5
800273a8:	a9 78       	lsl	r8,0x9
800273aa:	e0 28 e0 00 	sub	r8,57344
800273ae:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800273b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273ba:	30 19       	mov	r9,1
800273bc:	f2 08 09 48 	lsl	r8,r9,r8
800273c0:	10 99       	mov	r9,r8
800273c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273c6:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800273ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273d2:	30 19       	mov	r9,1
800273d4:	f2 08 09 48 	lsl	r8,r9,r8
800273d8:	10 99       	mov	r9,r8
800273da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273de:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800273e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273ea:	30 19       	mov	r9,1
800273ec:	f2 08 09 48 	lsl	r8,r9,r8
800273f0:	10 99       	mov	r9,r8
800273f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273f6:	91 19       	st.w	r8[0x4],r9
}
800273f8:	2f ed       	sub	sp,-8
800273fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800273fe <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
800273fe:	eb cd 40 80 	pushm	r7,lr
80027402:	1a 97       	mov	r7,sp
80027404:	20 2d       	sub	sp,8
80027406:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002740a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002740e:	a5 98       	lsr	r8,0x5
80027410:	a9 78       	lsl	r8,0x9
80027412:	e0 28 e0 00 	sub	r8,57344
80027416:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8002741a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002741e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027422:	30 19       	mov	r9,1
80027424:	f2 08 09 48 	lsl	r8,r9,r8
80027428:	10 99       	mov	r9,r8
8002742a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002742e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027432:	2f ed       	sub	sp,-8
80027434:	e3 cd 80 80 	ldm	sp++,r7,pc

80027438 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
80027438:	eb cd 40 80 	pushm	r7,lr
8002743c:	1a 97       	mov	r7,sp
8002743e:	20 3d       	sub	sp,12
80027440:	ef 4c ff f8 	st.w	r7[-8],r12
80027444:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027448:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002744c:	a9 78       	lsl	r8,0x9
8002744e:	e0 28 e0 00 	sub	r8,57344
80027452:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
80027456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002745a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002745e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027462:	2f dd       	sub	sp,-12
80027464:	e3 cd 80 80 	ldm	sp++,r7,pc

80027468 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
80027468:	eb cd 40 80 	pushm	r7,lr
8002746c:	1a 97       	mov	r7,sp
8002746e:	20 2d       	sub	sp,8
80027470:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027478:	a5 98       	lsr	r8,0x5
8002747a:	a9 78       	lsl	r8,0x9
8002747c:	e0 28 e0 00 	sub	r8,57344
80027480:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
80027484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027488:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002748c:	30 19       	mov	r9,1
8002748e:	f2 08 09 48 	lsl	r8,r9,r8
80027492:	10 99       	mov	r9,r8
80027494:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027498:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002749c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274a4:	30 19       	mov	r9,1
800274a6:	f2 08 09 48 	lsl	r8,r9,r8
800274aa:	10 99       	mov	r9,r8
800274ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274b0:	91 19       	st.w	r8[0x4],r9
}
800274b2:	2f ed       	sub	sp,-8
800274b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800274b8 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
800274b8:	eb cd 40 80 	pushm	r7,lr
800274bc:	1a 97       	mov	r7,sp
800274be:	20 2d       	sub	sp,8
800274c0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800274c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274c8:	a5 98       	lsr	r8,0x5
800274ca:	a9 78       	lsl	r8,0x9
800274cc:	e0 28 e0 00 	sub	r8,57344
800274d0:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800274d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274dc:	30 19       	mov	r9,1
800274de:	f2 08 09 48 	lsl	r8,r9,r8
800274e2:	10 99       	mov	r9,r8
800274e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274e8:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800274ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800274f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800274f4:	30 19       	mov	r9,1
800274f6:	f2 08 09 48 	lsl	r8,r9,r8
800274fa:	10 99       	mov	r9,r8
800274fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027500:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80027504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027508:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002750c:	30 19       	mov	r9,1
8002750e:	f2 08 09 48 	lsl	r8,r9,r8
80027512:	10 99       	mov	r9,r8
80027514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027518:	91 19       	st.w	r8[0x4],r9
}
8002751a:	2f ed       	sub	sp,-8
8002751c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027520 <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
80027520:	eb cd 40 80 	pushm	r7,lr
80027524:	1a 97       	mov	r7,sp
80027526:	20 2d       	sub	sp,8
80027528:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002752c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027530:	a5 98       	lsr	r8,0x5
80027532:	a9 78       	lsl	r8,0x9
80027534:	e0 28 e0 00 	sub	r8,57344
80027538:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
8002753c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027540:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027544:	30 19       	mov	r9,1
80027546:	f2 08 09 48 	lsl	r8,r9,r8
8002754a:	10 99       	mov	r9,r8
8002754c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027550:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
80027554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027558:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002755c:	30 19       	mov	r9,1
8002755e:	f2 08 09 48 	lsl	r8,r9,r8
80027562:	10 99       	mov	r9,r8
80027564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027568:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002756c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027570:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027574:	30 19       	mov	r9,1
80027576:	f2 08 09 48 	lsl	r8,r9,r8
8002757a:	10 99       	mov	r9,r8
8002757c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027580:	91 19       	st.w	r8[0x4],r9
}
80027582:	2f ed       	sub	sp,-8
80027584:	e3 cd 80 80 	ldm	sp++,r7,pc

80027588 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
80027588:	eb cd 40 80 	pushm	r7,lr
8002758c:	1a 97       	mov	r7,sp
8002758e:	20 2d       	sub	sp,8
80027590:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027598:	a5 98       	lsr	r8,0x5
8002759a:	a9 78       	lsl	r8,0x9
8002759c:	e0 28 e0 00 	sub	r8,57344
800275a0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
800275a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275ac:	30 19       	mov	r9,1
800275ae:	f2 08 09 48 	lsl	r8,r9,r8
800275b2:	10 99       	mov	r9,r8
800275b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275b8:	f1 49 00 c4 	st.w	r8[196],r9
}
800275bc:	2f ed       	sub	sp,-8
800275be:	e3 cd 80 80 	ldm	sp++,r7,pc

800275c2 <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
800275c2:	eb cd 40 80 	pushm	r7,lr
800275c6:	1a 97       	mov	r7,sp
800275c8:	20 2d       	sub	sp,8
800275ca:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800275ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275d2:	a5 98       	lsr	r8,0x5
800275d4:	a9 78       	lsl	r8,0x9
800275d6:	e0 28 e0 00 	sub	r8,57344
800275da:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
800275de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275e6:	30 19       	mov	r9,1
800275e8:	f2 08 09 48 	lsl	r8,r9,r8
800275ec:	10 99       	mov	r9,r8
800275ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275f2:	f1 49 00 c8 	st.w	r8[200],r9
}
800275f6:	2f ed       	sub	sp,-8
800275f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800275fc <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
800275fc:	eb cd 40 80 	pushm	r7,lr
80027600:	1a 97       	mov	r7,sp
80027602:	20 3d       	sub	sp,12
80027604:	ef 4c ff f8 	st.w	r7[-8],r12
80027608:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002760c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027610:	a5 98       	lsr	r8,0x5
80027612:	a9 78       	lsl	r8,0x9
80027614:	e0 28 e0 00 	sub	r8,57344
80027618:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
8002761c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027620:	58 18       	cp.w	r8,1
80027622:	c1 e0       	breq	8002765e <gpio_configure_edge_detector+0x62>
80027624:	c0 43       	brcs	8002762c <gpio_configure_edge_detector+0x30>
80027626:	58 28       	cp.w	r8,2
80027628:	c3 40       	breq	80027690 <gpio_configure_edge_detector+0x94>
8002762a:	c4 c8       	rjmp	800276c2 <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8002762c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027630:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027634:	30 19       	mov	r9,1
80027636:	f2 08 09 48 	lsl	r8,r9,r8
8002763a:	10 99       	mov	r9,r8
8002763c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027640:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027648:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002764c:	30 19       	mov	r9,1
8002764e:	f2 08 09 48 	lsl	r8,r9,r8
80027652:	10 99       	mov	r9,r8
80027654:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027658:	f1 49 00 b8 	st.w	r8[184],r9
    break;
8002765c:	c3 58       	rjmp	800276c6 <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
8002765e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027662:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027666:	30 19       	mov	r9,1
80027668:	f2 08 09 48 	lsl	r8,r9,r8
8002766c:	10 99       	mov	r9,r8
8002766e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027672:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002767a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002767e:	30 19       	mov	r9,1
80027680:	f2 08 09 48 	lsl	r8,r9,r8
80027684:	10 99       	mov	r9,r8
80027686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002768a:	f1 49 00 b8 	st.w	r8[184],r9
    break;
8002768e:	c1 c8       	rjmp	800276c6 <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80027690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027694:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027698:	30 19       	mov	r9,1
8002769a:	f2 08 09 48 	lsl	r8,r9,r8
8002769e:	10 99       	mov	r9,r8
800276a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276a4:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800276a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276b0:	30 19       	mov	r9,1
800276b2:	f2 08 09 48 	lsl	r8,r9,r8
800276b6:	10 99       	mov	r9,r8
800276b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276bc:	f1 49 00 b4 	st.w	r8[180],r9
    break;
800276c0:	c0 38       	rjmp	800276c6 <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
800276c2:	30 18       	mov	r8,1
800276c4:	c0 28       	rjmp	800276c8 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
800276c6:	30 08       	mov	r8,0
}
800276c8:	10 9c       	mov	r12,r8
800276ca:	2f dd       	sub	sp,-12
800276cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800276d0 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
800276d0:	eb cd 40 c0 	pushm	r6-r7,lr
800276d4:	1a 97       	mov	r7,sp
800276d6:	20 3d       	sub	sp,12
800276d8:	49 b6       	lddpc	r6,80027744 <gpio_enable_pin_interrupt+0x74>
800276da:	1e 26       	rsub	r6,pc
800276dc:	ef 4c ff f8 	st.w	r7[-8],r12
800276e0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
800276e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276e8:	a5 98       	lsr	r8,0x5
800276ea:	a9 78       	lsl	r8,0x9
800276ec:	e0 28 e0 00 	sub	r8,57344
800276f0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
800276f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276fc:	30 19       	mov	r9,1
800276fe:	f2 08 09 48 	lsl	r8,r9,r8
80027702:	10 99       	mov	r9,r8
80027704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027708:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
8002770c:	ee fb ff f4 	ld.w	r11,r7[-12]
80027710:	ee fc ff f8 	ld.w	r12,r7[-8]
80027714:	c7 4f       	rcall	800275fc <gpio_configure_edge_detector>
80027716:	18 98       	mov	r8,r12
80027718:	58 18       	cp.w	r8,1
8002771a:	c0 31       	brne	80027720 <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
8002771c:	30 18       	mov	r8,1
8002771e:	c0 e8       	rjmp	8002773a <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80027720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027724:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027728:	30 19       	mov	r9,1
8002772a:	f2 08 09 48 	lsl	r8,r9,r8
8002772e:	10 99       	mov	r9,r8
80027730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027734:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
80027738:	30 08       	mov	r8,0
}
8002773a:	10 9c       	mov	r12,r8
8002773c:	2f dd       	sub	sp,-12
8002773e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027742:	00 00       	add	r0,r0
80027744:	80 02       	ld.sh	r2,r0[0x0]
80027746:	75 5e       	ld.w	lr,r10[0x54]

80027748 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
80027748:	eb cd 40 80 	pushm	r7,lr
8002774c:	1a 97       	mov	r7,sp
8002774e:	20 2d       	sub	sp,8
80027750:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027758:	a5 98       	lsr	r8,0x5
8002775a:	a9 78       	lsl	r8,0x9
8002775c:	e0 28 e0 00 	sub	r8,57344
80027760:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
80027764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027768:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002776c:	30 19       	mov	r9,1
8002776e:	f2 08 09 48 	lsl	r8,r9,r8
80027772:	10 99       	mov	r9,r8
80027774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027778:	f1 49 00 98 	st.w	r8[152],r9
}
8002777c:	2f ed       	sub	sp,-8
8002777e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027782 <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
80027782:	eb cd 40 80 	pushm	r7,lr
80027786:	1a 97       	mov	r7,sp
80027788:	20 2d       	sub	sp,8
8002778a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002778e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027792:	a5 98       	lsr	r8,0x5
80027794:	a9 78       	lsl	r8,0x9
80027796:	e0 28 e0 00 	sub	r8,57344
8002779a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8002779e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277a2:	f0 f9 00 d0 	ld.w	r9,r8[208]
800277a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277ae:	f2 08 0a 48 	lsr	r8,r9,r8
800277b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800277b6:	10 9c       	mov	r12,r8
800277b8:	2f ed       	sub	sp,-8
800277ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800277be <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
800277be:	eb cd 40 80 	pushm	r7,lr
800277c2:	1a 97       	mov	r7,sp
800277c4:	20 2d       	sub	sp,8
800277c6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800277ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277ce:	a5 98       	lsr	r8,0x5
800277d0:	a9 78       	lsl	r8,0x9
800277d2:	e0 28 e0 00 	sub	r8,57344
800277d6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800277da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277e2:	30 19       	mov	r9,1
800277e4:	f2 08 09 48 	lsl	r8,r9,r8
800277e8:	10 99       	mov	r9,r8
800277ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277ee:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
800277f2:	2f ed       	sub	sp,-8
800277f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800277f8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800277f8:	eb cd 40 c0 	pushm	r6-r7,lr
800277fc:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
800277fe:	c0 08       	rjmp	800277fe <_unhandled_interrupt+0x6>

80027800 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80027800:	eb cd 40 c0 	pushm	r6-r7,lr
80027804:	1a 97       	mov	r7,sp
80027806:	20 3d       	sub	sp,12
80027808:	49 a6       	lddpc	r6,80027870 <_get_interrupt_handler+0x70>
8002780a:	1e 26       	rsub	r6,pc
8002780c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80027810:	fe 78 00 00 	mov	r8,-65536
80027814:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027818:	f2 09 11 03 	rsub	r9,r9,3
8002781c:	28 09       	sub	r9,-128
8002781e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027822:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80027826:	fe 78 00 00 	mov	r8,-65536
8002782a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002782e:	2c 09       	sub	r9,-64
80027830:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027834:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80027838:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002783c:	58 08       	cp.w	r8,0
8002783e:	c1 40       	breq	80027866 <_get_interrupt_handler+0x66>
80027840:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027844:	ec f8 02 60 	ld.w	r8,r6[608]
80027848:	a1 79       	lsl	r9,0x1
8002784a:	2f f9       	sub	r9,-1
8002784c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027854:	f0 08 12 00 	clz	r8,r8
80027858:	f0 08 11 1f 	rsub	r8,r8,31
8002785c:	a3 68       	lsl	r8,0x2
8002785e:	f2 08 00 08 	add	r8,r9,r8
80027862:	70 08       	ld.w	r8,r8[0x0]
80027864:	c0 28       	rjmp	80027868 <_get_interrupt_handler+0x68>
80027866:	30 08       	mov	r8,0
}
80027868:	10 9c       	mov	r12,r8
8002786a:	2f dd       	sub	sp,-12
8002786c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027870:	80 02       	ld.sh	r2,r0[0x0]
80027872:	76 8e       	ld.w	lr,r11[0x20]

80027874 <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
80027874:	eb cd 40 c0 	pushm	r6-r7,lr
80027878:	1a 97       	mov	r7,sp
8002787a:	48 56       	lddpc	r6,8002788c <INTC_init_evba+0x18>
8002787c:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
8002787e:	ec f8 07 6c 	ld.w	r8,r6[1900]
80027882:	e3 b8 00 01 	mtsr	0x4,r8
}
80027886:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002788a:	00 00       	add	r0,r0
8002788c:	80 02       	ld.sh	r2,r0[0x0]
8002788e:	77 00       	ld.w	r0,r11[0x40]

80027890 <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
80027890:	eb cd 40 c0 	pushm	r6-r7,lr
80027894:	1a 97       	mov	r7,sp
80027896:	20 2d       	sub	sp,8
80027898:	4a 16       	lddpc	r6,8002791c <INTC_init_interrupts+0x8c>
8002789a:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
8002789c:	ce cf       	rcall	80027874 <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8002789e:	30 08       	mov	r8,0
800278a0:	ef 48 ff f8 	st.w	r7[-8],r8
800278a4:	c3 38       	rjmp	8002790a <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800278a6:	30 08       	mov	r8,0
800278a8:	ef 48 ff fc 	st.w	r7[-4],r8
800278ac:	c1 68       	rjmp	800278d8 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800278ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800278b2:	ec f8 02 60 	ld.w	r8,r6[608]
800278b6:	a1 79       	lsl	r9,0x1
800278b8:	2f f9       	sub	r9,-1
800278ba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800278be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278c2:	a3 68       	lsl	r8,0x2
800278c4:	f2 08 00 08 	add	r8,r9,r8
800278c8:	fe c9 00 d0 	sub	r9,pc,208
800278cc:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800278ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278d2:	2f f8       	sub	r8,-1
800278d4:	ef 48 ff fc 	st.w	r7[-4],r8
800278d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800278dc:	ec f8 02 60 	ld.w	r8,r6[608]
800278e0:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
800278e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278e8:	10 39       	cp.w	r9,r8
800278ea:	fe 9b ff e2 	brhi	800278ae <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800278ee:	fe 78 00 00 	mov	r8,-65536
800278f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800278f6:	ec fa 03 b8 	ld.w	r10,r6[952]
800278fa:	74 0a       	ld.w	r10,r10[0x0]
800278fc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027904:	2f f8       	sub	r8,-1
80027906:	ef 48 ff f8 	st.w	r7[-8],r8
8002790a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002790e:	e0 48 00 2e 	cp.w	r8,46
80027912:	fe 98 ff ca 	brls	800278a6 <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80027916:	2f ed       	sub	sp,-8
80027918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002791c:	80 02       	ld.sh	r2,r0[0x0]
8002791e:	77 1e       	ld.w	lr,r11[0x44]

80027920 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80027920:	eb cd 40 c0 	pushm	r6-r7,lr
80027924:	1a 97       	mov	r7,sp
80027926:	20 4d       	sub	sp,16
80027928:	49 86       	lddpc	r6,80027988 <INTC_register_interrupt+0x68>
8002792a:	1e 26       	rsub	r6,pc
8002792c:	ef 4c ff f8 	st.w	r7[-8],r12
80027930:	ef 4b ff f4 	st.w	r7[-12],r11
80027934:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80027938:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002793c:	a5 98       	lsr	r8,0x5
8002793e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80027942:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027946:	ec f8 02 60 	ld.w	r8,r6[608]
8002794a:	a1 79       	lsl	r9,0x1
8002794c:	2f f9       	sub	r9,-1
8002794e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027952:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027956:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002795a:	a3 68       	lsl	r8,0x2
8002795c:	f2 08 00 08 	add	r8,r9,r8
80027960:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027964:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80027966:	fe 78 00 00 	mov	r8,-65536
8002796a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002796e:	ee fa ff f0 	ld.w	r10,r7[-16]
80027972:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80027976:	ec fa 03 b8 	ld.w	r10,r6[952]
8002797a:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002797e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80027982:	2f cd       	sub	sp,-16
80027984:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027988:	80 02       	ld.sh	r2,r0[0x0]
8002798a:	77 ae       	ld.w	lr,r11[0x68]

8002798c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002798c:	eb cd 40 80 	pushm	r7,lr
80027990:	1a 97       	mov	r7,sp
80027992:	20 1d       	sub	sp,4
80027994:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80027998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002799c:	e6 18 00 01 	andh	r8,0x1,COH
800279a0:	5f 08       	sreq	r8
800279a2:	5c 58       	castu.b	r8
}
800279a4:	10 9c       	mov	r12,r8
800279a6:	2f fd       	sub	sp,-4
800279a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800279ac <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
800279ac:	eb cd 40 80 	pushm	r7,lr
800279b0:	1a 97       	mov	r7,sp
800279b2:	20 2d       	sub	sp,8
800279b4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800279b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800279bc:	a7 68       	lsl	r8,0x6
800279be:	e2 38 00 00 	sub	r8,196608
800279c2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800279c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800279ca:	58 f8       	cp.w	r8,15
800279cc:	e0 88 00 04 	brls	800279d4 <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
800279d0:	3f f8       	mov	r8,-1
800279d2:	c0 38       	rjmp	800279d8 <pdca_get_handler+0x2c>

  return pdca_channel;
800279d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800279d8:	10 9c       	mov	r12,r8
800279da:	2f ed       	sub	sp,-8
800279dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800279e0 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
800279e0:	eb cd 40 c0 	pushm	r6-r7,lr
800279e4:	1a 97       	mov	r7,sp
800279e6:	20 4d       	sub	sp,16
800279e8:	4b 26       	lddpc	r6,80027ab0 <pdca_init_channel+0xd0>
800279ea:	1e 26       	rsub	r6,pc
800279ec:	ef 4c ff f4 	st.w	r7[-12],r12
800279f0:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800279f4:	ee fc ff f4 	ld.w	r12,r7[-12]
800279f8:	f0 16 00 25 	mcall	r6[148]
800279fc:	18 98       	mov	r8,r12
800279fe:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80027a02:	ee fc ff f4 	ld.w	r12,r7[-12]
80027a06:	f0 16 00 92 	mcall	r6[584]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
80027a0a:	ee fc ff f4 	ld.w	r12,r7[-12]
80027a0e:	f0 16 01 f9 	mcall	r6[2020]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027a12:	e1 b8 00 00 	mfsr	r8,0x0
80027a16:	10 9c       	mov	r12,r8
80027a18:	cb af       	rcall	8002798c <cpu_irq_is_enabled_flags>
80027a1a:	18 98       	mov	r8,r12
80027a1c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027a20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a24:	30 08       	mov	r8,0
80027a26:	f0 09 18 00 	cp.b	r9,r8
80027a2a:	c0 20       	breq	80027a2e <pdca_init_channel+0x4e>
80027a2c:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
80027a2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a32:	70 08       	ld.w	r8,r8[0x0]
80027a34:	10 99       	mov	r9,r8
80027a36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a3a:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
80027a3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a40:	70 19       	ld.w	r9,r8[0x4]
80027a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a46:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80027a48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a4c:	70 49       	ld.w	r9,r8[0x10]
80027a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a52:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
80027a54:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a58:	70 28       	ld.w	r8,r8[0x8]
80027a5a:	10 99       	mov	r9,r8
80027a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a60:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
80027a62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a66:	70 39       	ld.w	r9,r8[0xc]
80027a68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a6c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027a6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a72:	f1 38 00 18 	ld.ub	r8,r8[24]
80027a76:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027a78:	10 99       	mov	r9,r8
80027a7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027a7e:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027a80:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a86:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a8c:	e0 69 01 00 	mov	r9,256
80027a90:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a96:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027a98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a9c:	30 08       	mov	r8,0
80027a9e:	f0 09 18 00 	cp.b	r9,r8
80027aa2:	c0 20       	breq	80027aa6 <pdca_init_channel+0xc6>
80027aa4:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
80027aa6:	30 08       	mov	r8,0
}
80027aa8:	10 9c       	mov	r12,r8
80027aaa:	2f cd       	sub	sp,-16
80027aac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ab0:	80 02       	ld.sh	r2,r0[0x0]
80027ab2:	78 6e       	ld.w	lr,r12[0x18]

80027ab4 <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
80027ab4:	eb cd 40 c0 	pushm	r6-r7,lr
80027ab8:	1a 97       	mov	r7,sp
80027aba:	20 2d       	sub	sp,8
80027abc:	48 a6       	lddpc	r6,80027ae4 <pdca_get_channel_status+0x30>
80027abe:	1e 26       	rsub	r6,pc
80027ac0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ac4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027ac8:	f0 16 00 25 	mcall	r6[148]
80027acc:	18 98       	mov	r8,r12
80027ace:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
80027ad2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ad6:	70 78       	ld.w	r8,r8[0x1c]
80027ad8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027adc:	10 9c       	mov	r12,r8
80027ade:	2f ed       	sub	sp,-8
80027ae0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ae4:	80 02       	ld.sh	r2,r0[0x0]
80027ae6:	79 42       	ld.w	r2,r12[0x50]

80027ae8 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
80027ae8:	eb cd 40 c0 	pushm	r6-r7,lr
80027aec:	1a 97       	mov	r7,sp
80027aee:	20 2d       	sub	sp,8
80027af0:	48 96       	lddpc	r6,80027b14 <pdca_disable+0x2c>
80027af2:	1e 26       	rsub	r6,pc
80027af4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027af8:	ee fc ff f8 	ld.w	r12,r7[-8]
80027afc:	f0 16 00 25 	mcall	r6[148]
80027b00:	18 98       	mov	r8,r12
80027b02:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80027b06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b0a:	30 29       	mov	r9,2
80027b0c:	91 59       	st.w	r8[0x14],r9

}
80027b0e:	2f ed       	sub	sp,-8
80027b10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b14:	80 02       	ld.sh	r2,r0[0x0]
80027b16:	79 76       	ld.w	r6,r12[0x5c]

80027b18 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80027b18:	eb cd 40 c0 	pushm	r6-r7,lr
80027b1c:	1a 97       	mov	r7,sp
80027b1e:	20 2d       	sub	sp,8
80027b20:	48 96       	lddpc	r6,80027b44 <pdca_enable+0x2c>
80027b22:	1e 26       	rsub	r6,pc
80027b24:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b28:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b2c:	f0 16 00 25 	mcall	r6[148]
80027b30:	18 98       	mov	r8,r12
80027b32:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80027b36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b3a:	30 19       	mov	r9,1
80027b3c:	91 59       	st.w	r8[0x14],r9
}
80027b3e:	2f ed       	sub	sp,-8
80027b40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b44:	80 02       	ld.sh	r2,r0[0x0]
80027b46:	79 a6       	ld.w	r6,r12[0x68]

80027b48 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80027b48:	eb cd 40 c0 	pushm	r6-r7,lr
80027b4c:	1a 97       	mov	r7,sp
80027b4e:	20 2d       	sub	sp,8
80027b50:	48 96       	lddpc	r6,80027b74 <pdca_get_load_size+0x2c>
80027b52:	1e 26       	rsub	r6,pc
80027b54:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b58:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b5c:	f0 16 00 25 	mcall	r6[148]
80027b60:	18 98       	mov	r8,r12
80027b62:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80027b66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b6a:	70 28       	ld.w	r8,r8[0x8]
}
80027b6c:	10 9c       	mov	r12,r8
80027b6e:	2f ed       	sub	sp,-8
80027b70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b74:	80 02       	ld.sh	r2,r0[0x0]
80027b76:	79 d6       	ld.w	r6,r12[0x74]

80027b78 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027b78:	eb cd 40 c0 	pushm	r6-r7,lr
80027b7c:	1a 97       	mov	r7,sp
80027b7e:	20 5d       	sub	sp,20
80027b80:	49 d6       	lddpc	r6,80027bf4 <pdca_load_channel+0x7c>
80027b82:	1e 26       	rsub	r6,pc
80027b84:	ef 4c ff f4 	st.w	r7[-12],r12
80027b88:	ef 4b ff f0 	st.w	r7[-16],r11
80027b8c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b90:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b94:	f0 16 00 25 	mcall	r6[148]
80027b98:	18 98       	mov	r8,r12
80027b9a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027b9e:	e1 b8 00 00 	mfsr	r8,0x0
80027ba2:	10 9c       	mov	r12,r8
80027ba4:	cf 4e       	rcall	8002798c <cpu_irq_is_enabled_flags>
80027ba6:	18 98       	mov	r8,r12
80027ba8:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027bac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027bb0:	30 08       	mov	r8,0
80027bb2:	f0 09 18 00 	cp.b	r9,r8
80027bb6:	c0 20       	breq	80027bba <pdca_load_channel+0x42>
80027bb8:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80027bba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bc2:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
80027bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bc8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027bcc:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bd2:	e0 69 01 00 	mov	r9,256
80027bd6:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bdc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027bde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027be2:	30 08       	mov	r8,0
80027be4:	f0 09 18 00 	cp.b	r9,r8
80027be8:	c0 20       	breq	80027bec <pdca_load_channel+0x74>
80027bea:	d5 03       	csrf	0x10
}
80027bec:	2f bd       	sub	sp,-20
80027bee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027bf2:	00 00       	add	r0,r0
80027bf4:	80 02       	ld.sh	r2,r0[0x0]
80027bf6:	7a 06       	ld.w	r6,sp[0x0]

80027bf8 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80027bf8:	eb cd 40 c0 	pushm	r6-r7,lr
80027bfc:	1a 97       	mov	r7,sp
80027bfe:	20 2d       	sub	sp,8
80027c00:	48 96       	lddpc	r6,80027c24 <pdca_get_reload_size+0x2c>
80027c02:	1e 26       	rsub	r6,pc
80027c04:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c08:	ee fc ff f8 	ld.w	r12,r7[-8]
80027c0c:	f0 16 00 25 	mcall	r6[148]
80027c10:	18 98       	mov	r8,r12
80027c12:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
80027c16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c1a:	70 48       	ld.w	r8,r8[0x10]
}
80027c1c:	10 9c       	mov	r12,r8
80027c1e:	2f ed       	sub	sp,-8
80027c20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c24:	80 02       	ld.sh	r2,r0[0x0]
80027c26:	7a 86       	ld.w	r6,sp[0x20]

80027c28 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027c28:	eb cd 40 c0 	pushm	r6-r7,lr
80027c2c:	1a 97       	mov	r7,sp
80027c2e:	20 5d       	sub	sp,20
80027c30:	49 d6       	lddpc	r6,80027ca4 <pdca_reload_channel+0x7c>
80027c32:	1e 26       	rsub	r6,pc
80027c34:	ef 4c ff f4 	st.w	r7[-12],r12
80027c38:	ef 4b ff f0 	st.w	r7[-16],r11
80027c3c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027c40:	ee fc ff f4 	ld.w	r12,r7[-12]
80027c44:	f0 16 00 25 	mcall	r6[148]
80027c48:	18 98       	mov	r8,r12
80027c4a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027c4e:	e1 b8 00 00 	mfsr	r8,0x0
80027c52:	10 9c       	mov	r12,r8
80027c54:	c9 ce       	rcall	8002798c <cpu_irq_is_enabled_flags>
80027c56:	18 98       	mov	r8,r12
80027c58:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027c5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027c60:	30 08       	mov	r8,0
80027c62:	f0 09 18 00 	cp.b	r9,r8
80027c66:	c0 20       	breq	80027c6a <pdca_reload_channel+0x42>
80027c68:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
80027c6a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027c6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c72:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
80027c74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c78:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027c7c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c82:	e0 69 01 00 	mov	r9,256
80027c86:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c8c:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027c8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027c92:	30 08       	mov	r8,0
80027c94:	f0 09 18 00 	cp.b	r9,r8
80027c98:	c0 20       	breq	80027c9c <pdca_reload_channel+0x74>
80027c9a:	d5 03       	csrf	0x10
}
80027c9c:	2f bd       	sub	sp,-20
80027c9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ca2:	00 00       	add	r0,r0
80027ca4:	80 02       	ld.sh	r2,r0[0x0]
80027ca6:	7a b6       	ld.w	r6,sp[0x2c]

80027ca8 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
80027ca8:	eb cd 40 c0 	pushm	r6-r7,lr
80027cac:	1a 97       	mov	r7,sp
80027cae:	20 3d       	sub	sp,12
80027cb0:	48 b6       	lddpc	r6,80027cdc <pdca_set_peripheral_select+0x34>
80027cb2:	1e 26       	rsub	r6,pc
80027cb4:	ef 4c ff f8 	st.w	r7[-8],r12
80027cb8:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027cbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80027cc0:	f0 16 00 25 	mcall	r6[148]
80027cc4:	18 98       	mov	r8,r12
80027cc6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
80027cca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cce:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027cd2:	91 19       	st.w	r8[0x4],r9
}
80027cd4:	2f dd       	sub	sp,-12
80027cd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027cda:	00 00       	add	r0,r0
80027cdc:	80 02       	ld.sh	r2,r0[0x0]
80027cde:	7b 36       	ld.w	r6,sp[0x4c]

80027ce0 <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
80027ce0:	eb cd 40 c0 	pushm	r6-r7,lr
80027ce4:	1a 97       	mov	r7,sp
80027ce6:	20 3d       	sub	sp,12
80027ce8:	48 e6       	lddpc	r6,80027d20 <pdca_set_transfer_size+0x40>
80027cea:	1e 26       	rsub	r6,pc
80027cec:	ef 4c ff f8 	st.w	r7[-8],r12
80027cf0:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027cf4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027cf8:	f0 16 00 25 	mcall	r6[148]
80027cfc:	18 98       	mov	r8,r12
80027cfe:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
80027d02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d06:	70 68       	ld.w	r8,r8[0x18]
80027d08:	10 99       	mov	r9,r8
80027d0a:	e0 19 ff fc 	andl	r9,0xfffc
80027d0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027d12:	10 49       	or	r9,r8
80027d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d18:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
80027d1a:	2f dd       	sub	sp,-12
80027d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d20:	80 02       	ld.sh	r2,r0[0x0]
80027d22:	7b 6e       	ld.w	lr,sp[0x58]

80027d24 <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
80027d24:	eb cd 40 c0 	pushm	r6-r7,lr
80027d28:	1a 97       	mov	r7,sp
80027d2a:	20 2d       	sub	sp,8
80027d2c:	48 b6       	lddpc	r6,80027d58 <pdca_disable_event_trigger+0x34>
80027d2e:	1e 26       	rsub	r6,pc
80027d30:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d34:	ee fc ff f8 	ld.w	r12,r7[-8]
80027d38:	f0 16 00 25 	mcall	r6[148]
80027d3c:	18 98       	mov	r8,r12
80027d3e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
80027d42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d46:	70 68       	ld.w	r8,r8[0x18]
80027d48:	10 99       	mov	r9,r8
80027d4a:	a3 c9       	cbr	r9,0x2
80027d4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d50:	91 69       	st.w	r8[0x18],r9
}
80027d52:	2f ed       	sub	sp,-8
80027d54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d58:	80 02       	ld.sh	r2,r0[0x0]
80027d5a:	7b b2       	ld.w	r2,sp[0x6c]

80027d5c <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
80027d5c:	eb cd 40 c0 	pushm	r6-r7,lr
80027d60:	1a 97       	mov	r7,sp
80027d62:	20 2d       	sub	sp,8
80027d64:	48 b6       	lddpc	r6,80027d90 <pdca_enable_event_trigger+0x34>
80027d66:	1e 26       	rsub	r6,pc
80027d68:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027d6c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027d70:	f0 16 00 25 	mcall	r6[148]
80027d74:	18 98       	mov	r8,r12
80027d76:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
80027d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d7e:	70 68       	ld.w	r8,r8[0x18]
80027d80:	10 99       	mov	r9,r8
80027d82:	a3 a9       	sbr	r9,0x2
80027d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d88:	91 69       	st.w	r8[0x18],r9
}
80027d8a:	2f ed       	sub	sp,-8
80027d8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d90:	80 02       	ld.sh	r2,r0[0x0]
80027d92:	7b ea       	ld.w	r10,sp[0x78]

80027d94 <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027d94:	eb cd 40 c0 	pushm	r6-r7,lr
80027d98:	1a 97       	mov	r7,sp
80027d9a:	20 3d       	sub	sp,12
80027d9c:	49 66       	lddpc	r6,80027df4 <pdca_disable_interrupt_transfer_error+0x60>
80027d9e:	1e 26       	rsub	r6,pc
80027da0:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027da4:	ee fc ff f4 	ld.w	r12,r7[-12]
80027da8:	f0 16 00 25 	mcall	r6[148]
80027dac:	18 98       	mov	r8,r12
80027dae:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027db2:	e1 b8 00 00 	mfsr	r8,0x0
80027db6:	10 9c       	mov	r12,r8
80027db8:	fe b0 fd ea 	rcall	8002798c <cpu_irq_is_enabled_flags>
80027dbc:	18 98       	mov	r8,r12
80027dbe:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027dc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027dc6:	30 08       	mov	r8,0
80027dc8:	f0 09 18 00 	cp.b	r9,r8
80027dcc:	c0 20       	breq	80027dd0 <pdca_disable_interrupt_transfer_error+0x3c>
80027dce:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
80027dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dd4:	30 49       	mov	r9,4
80027dd6:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027dd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ddc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027dde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027de2:	30 08       	mov	r8,0
80027de4:	f0 09 18 00 	cp.b	r9,r8
80027de8:	c0 20       	breq	80027dec <pdca_disable_interrupt_transfer_error+0x58>
80027dea:	d5 03       	csrf	0x10
}
80027dec:	2f dd       	sub	sp,-12
80027dee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027df2:	00 00       	add	r0,r0
80027df4:	80 02       	ld.sh	r2,r0[0x0]
80027df6:	7c 22       	ld.w	r2,lr[0x8]

80027df8 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027df8:	eb cd 40 c0 	pushm	r6-r7,lr
80027dfc:	1a 97       	mov	r7,sp
80027dfe:	20 2d       	sub	sp,8
80027e00:	48 96       	lddpc	r6,80027e24 <pdca_enable_interrupt_transfer_error+0x2c>
80027e02:	1e 26       	rsub	r6,pc
80027e04:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e08:	ee fc ff f8 	ld.w	r12,r7[-8]
80027e0c:	f0 16 00 25 	mcall	r6[148]
80027e10:	18 98       	mov	r8,r12
80027e12:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80027e16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e1a:	30 49       	mov	r9,4
80027e1c:	91 89       	st.w	r8[0x20],r9
}
80027e1e:	2f ed       	sub	sp,-8
80027e20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e24:	80 02       	ld.sh	r2,r0[0x0]
80027e26:	7c 86       	ld.w	r6,lr[0x20]

80027e28 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027e28:	eb cd 40 c0 	pushm	r6-r7,lr
80027e2c:	1a 97       	mov	r7,sp
80027e2e:	20 3d       	sub	sp,12
80027e30:	49 66       	lddpc	r6,80027e88 <pdca_disable_interrupt_transfer_complete+0x60>
80027e32:	1e 26       	rsub	r6,pc
80027e34:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e38:	ee fc ff f4 	ld.w	r12,r7[-12]
80027e3c:	f0 16 00 25 	mcall	r6[148]
80027e40:	18 98       	mov	r8,r12
80027e42:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027e46:	e1 b8 00 00 	mfsr	r8,0x0
80027e4a:	10 9c       	mov	r12,r8
80027e4c:	fe b0 fd a0 	rcall	8002798c <cpu_irq_is_enabled_flags>
80027e50:	18 98       	mov	r8,r12
80027e52:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027e56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027e5a:	30 08       	mov	r8,0
80027e5c:	f0 09 18 00 	cp.b	r9,r8
80027e60:	c0 20       	breq	80027e64 <pdca_disable_interrupt_transfer_complete+0x3c>
80027e62:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80027e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e68:	30 29       	mov	r9,2
80027e6a:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e70:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027e72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027e76:	30 08       	mov	r8,0
80027e78:	f0 09 18 00 	cp.b	r9,r8
80027e7c:	c0 20       	breq	80027e80 <pdca_disable_interrupt_transfer_complete+0x58>
80027e7e:	d5 03       	csrf	0x10
}
80027e80:	2f dd       	sub	sp,-12
80027e82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e86:	00 00       	add	r0,r0
80027e88:	80 02       	ld.sh	r2,r0[0x0]
80027e8a:	7c b6       	ld.w	r6,lr[0x2c]

80027e8c <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027e8c:	eb cd 40 c0 	pushm	r6-r7,lr
80027e90:	1a 97       	mov	r7,sp
80027e92:	20 2d       	sub	sp,8
80027e94:	48 96       	lddpc	r6,80027eb8 <pdca_enable_interrupt_transfer_complete+0x2c>
80027e96:	1e 26       	rsub	r6,pc
80027e98:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027e9c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027ea0:	f0 16 00 25 	mcall	r6[148]
80027ea4:	18 98       	mov	r8,r12
80027ea6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80027eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027eae:	30 29       	mov	r9,2
80027eb0:	91 89       	st.w	r8[0x20],r9
}
80027eb2:	2f ed       	sub	sp,-8
80027eb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027eb8:	80 02       	ld.sh	r2,r0[0x0]
80027eba:	7d 1a       	ld.w	r10,lr[0x44]

80027ebc <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80027ec0:	1a 97       	mov	r7,sp
80027ec2:	20 3d       	sub	sp,12
80027ec4:	49 66       	lddpc	r6,80027f1c <pdca_disable_interrupt_reload_counter_zero+0x60>
80027ec6:	1e 26       	rsub	r6,pc
80027ec8:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ecc:	ee fc ff f4 	ld.w	r12,r7[-12]
80027ed0:	f0 16 00 25 	mcall	r6[148]
80027ed4:	18 98       	mov	r8,r12
80027ed6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027eda:	e1 b8 00 00 	mfsr	r8,0x0
80027ede:	10 9c       	mov	r12,r8
80027ee0:	fe b0 fd 56 	rcall	8002798c <cpu_irq_is_enabled_flags>
80027ee4:	18 98       	mov	r8,r12
80027ee6:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027eea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027eee:	30 08       	mov	r8,0
80027ef0:	f0 09 18 00 	cp.b	r9,r8
80027ef4:	c0 20       	breq	80027ef8 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80027ef6:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80027ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027efc:	30 19       	mov	r9,1
80027efe:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027f00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f04:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027f06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027f0a:	30 08       	mov	r8,0
80027f0c:	f0 09 18 00 	cp.b	r9,r8
80027f10:	c0 20       	breq	80027f14 <pdca_disable_interrupt_reload_counter_zero+0x58>
80027f12:	d5 03       	csrf	0x10
}
80027f14:	2f dd       	sub	sp,-12
80027f16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f1a:	00 00       	add	r0,r0
80027f1c:	80 02       	ld.sh	r2,r0[0x0]
80027f1e:	7d 4a       	ld.w	r10,lr[0x50]

80027f20 <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027f20:	eb cd 40 c0 	pushm	r6-r7,lr
80027f24:	1a 97       	mov	r7,sp
80027f26:	20 2d       	sub	sp,8
80027f28:	48 96       	lddpc	r6,80027f4c <pdca_enable_interrupt_reload_counter_zero+0x2c>
80027f2a:	1e 26       	rsub	r6,pc
80027f2c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f30:	ee fc ff f8 	ld.w	r12,r7[-8]
80027f34:	f0 16 00 25 	mcall	r6[148]
80027f38:	18 98       	mov	r8,r12
80027f3a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
80027f3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f42:	30 19       	mov	r9,1
80027f44:	91 89       	st.w	r8[0x20],r9
}
80027f46:	2f ed       	sub	sp,-8
80027f48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f4c:	80 02       	ld.sh	r2,r0[0x0]
80027f4e:	7d ae       	ld.w	lr,lr[0x68]

80027f50 <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
80027f50:	eb cd 40 c0 	pushm	r6-r7,lr
80027f54:	1a 97       	mov	r7,sp
80027f56:	20 2d       	sub	sp,8
80027f58:	48 96       	lddpc	r6,80027f7c <pdca_get_transfer_status+0x2c>
80027f5a:	1e 26       	rsub	r6,pc
80027f5c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f60:	ee fc ff f8 	ld.w	r12,r7[-8]
80027f64:	f0 16 00 25 	mcall	r6[148]
80027f68:	18 98       	mov	r8,r12
80027f6a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
80027f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f72:	70 b8       	ld.w	r8,r8[0x2c]
}
80027f74:	10 9c       	mov	r12,r8
80027f76:	2f ed       	sub	sp,-8
80027f78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f7c:	80 02       	ld.sh	r2,r0[0x0]
80027f7e:	7d de       	ld.w	lr,lr[0x74]

80027f80 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
80027f80:	eb cd 40 80 	pushm	r7,lr
80027f84:	1a 97       	mov	r7,sp
80027f86:	20 4d       	sub	sp,16
80027f88:	ef 4c ff fc 	st.w	r7[-4],r12
80027f8c:	14 98       	mov	r8,r10
80027f8e:	ef 49 ff f0 	st.w	r7[-16],r9
80027f92:	16 99       	mov	r9,r11
80027f94:	ef 59 ff f8 	st.h	r7[-8],r9
80027f98:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
80027f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fa0:	58 08       	cp.w	r8,0
80027fa2:	c6 90       	breq	80028074 <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
80027fa4:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80027fa8:	32 18       	mov	r8,33
80027faa:	f0 09 19 00 	cp.h	r9,r8
80027fae:	e0 8b 00 61 	brhi	80028070 <pevc_channel_configure+0xf0>
80027fb2:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027fb6:	31 58       	mov	r8,21
80027fb8:	f0 09 19 00 	cp.h	r9,r8
80027fbc:	e0 8b 00 5a 	brhi	80028070 <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
80027fc0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80027fc4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80027fc8:	5c 58       	castu.b	r8
80027fca:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80027fce:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027fd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027fd6:	2c 0a       	sub	r10,-64
80027fd8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027fdc:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
80027fe0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80027fe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027fe8:	58 08       	cp.w	r8,0
80027fea:	c4 10       	breq	8002806c <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
80027fec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027ff0:	11 88       	ld.ub	r8,r8[0x0]
80027ff2:	10 99       	mov	r9,r8
80027ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ff8:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
80027ffa:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027ffe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028002:	70 18       	ld.w	r8,r8[0x4]
80028004:	5c 58       	castu.b	r8
80028006:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002800a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002800e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028012:	28 0a       	sub	r10,-128
80028014:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028018:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
8002801c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
80028020:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80028024:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028028:	70 28       	ld.w	r8,r8[0x8]
8002802a:	5c 58       	castu.b	r8
8002802c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028030:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80028034:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028038:	28 0a       	sub	r10,-128
8002803a:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002803e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80028042:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
80028046:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002804a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002804e:	70 38       	ld.w	r8,r8[0xc]
80028050:	5c 58       	castu.b	r8
80028052:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028056:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002805a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002805e:	28 0a       	sub	r10,-128
80028060:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028064:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80028068:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
8002806c:	30 08       	mov	r8,0
8002806e:	c0 48       	rjmp	80028076 <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
80028070:	30 18       	mov	r8,1
80028072:	c0 28       	rjmp	80028076 <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
80028074:	30 18       	mov	r8,1
}
80028076:	10 9c       	mov	r12,r8
80028078:	2f cd       	sub	sp,-16
8002807a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002807e <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
8002807e:	eb cd 40 80 	pushm	r7,lr
80028082:	1a 97       	mov	r7,sp
80028084:	20 2d       	sub	sp,8
80028086:	ef 4c ff fc 	st.w	r7[-4],r12
8002808a:	16 98       	mov	r8,r11
8002808c:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
80028090:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80028094:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80028098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002809c:	91 29       	st.w	r8[0x8],r9
}
8002809e:	2f ed       	sub	sp,-8
800280a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800280a4 <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
800280a4:	eb cd 40 80 	pushm	r7,lr
800280a8:	1a 97       	mov	r7,sp
800280aa:	20 3d       	sub	sp,12
800280ac:	ef 4c ff fc 	st.w	r7[-4],r12
800280b0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
800280b4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800280b8:	fc 1a 80 00 	movh	r10,0x8000
800280bc:	30 0b       	mov	r11,0
800280be:	14 38       	cp.w	r8,r10
800280c0:	f6 09 13 00 	cpc	r9,r11
800280c4:	e0 8b 00 08 	brhi	800280d4 <pevc_channels_enable+0x30>
800280c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280d0:	91 89       	st.w	r8[0x20],r9
800280d2:	c0 68       	rjmp	800280de <pevc_channels_enable+0x3a>
800280d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280dc:	91 99       	st.w	r8[0x24],r9
}
800280de:	2f dd       	sub	sp,-12
800280e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800280e4 <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
800280e4:	eb cd 40 80 	pushm	r7,lr
800280e8:	1a 97       	mov	r7,sp
800280ea:	20 3d       	sub	sp,12
800280ec:	ef 4c ff fc 	st.w	r7[-4],r12
800280f0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
800280f4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800280f8:	fc 1a 80 00 	movh	r10,0x8000
800280fc:	30 0b       	mov	r11,0
800280fe:	14 38       	cp.w	r8,r10
80028100:	f6 09 13 00 	cpc	r9,r11
80028104:	e0 8b 00 08 	brhi	80028114 <pevc_channels_disable+0x30>
80028108:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002810c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028110:	91 c9       	st.w	r8[0x30],r9
80028112:	c0 68       	rjmp	8002811e <pevc_channels_disable+0x3a>
80028114:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002811c:	91 d9       	st.w	r8[0x34],r9
}
8002811e:	2f dd       	sub	sp,-12
80028120:	e3 cd 80 80 	ldm	sp++,r7,pc

80028124 <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80028124:	eb cd 40 80 	pushm	r7,lr
80028128:	1a 97       	mov	r7,sp
8002812a:	20 2d       	sub	sp,8
8002812c:	ef 4c ff fc 	st.w	r7[-4],r12
80028130:	16 98       	mov	r8,r11
80028132:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028136:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002813a:	31 f8       	mov	r8,31
8002813c:	f0 09 19 00 	cp.h	r9,r8
80028140:	e0 8b 00 12 	brhi	80028164 <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
80028144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028148:	70 49       	ld.w	r9,r8[0x10]
8002814a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002814e:	30 1a       	mov	r10,1
80028150:	f4 08 09 48 	lsl	r8,r10,r8
80028154:	10 69       	and	r9,r8
80028156:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002815a:	f2 08 0a 48 	lsr	r8,r9,r8
8002815e:	5f 18       	srne	r8
80028160:	5c 58       	castu.b	r8
80028162:	c1 28       	rjmp	80028186 <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80028164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028168:	70 59       	ld.w	r9,r8[0x14]
8002816a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002816e:	22 08       	sub	r8,32
80028170:	30 1a       	mov	r10,1
80028172:	f4 08 09 48 	lsl	r8,r10,r8
80028176:	10 69       	and	r9,r8
80028178:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002817c:	22 08       	sub	r8,32
8002817e:	f2 08 0a 48 	lsr	r8,r9,r8
80028182:	5f 18       	srne	r8
80028184:	5c 58       	castu.b	r8
}
80028186:	10 9c       	mov	r12,r8
80028188:	2f ed       	sub	sp,-8
8002818a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002818e <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
8002818e:	eb cd 40 80 	pushm	r7,lr
80028192:	1a 97       	mov	r7,sp
80028194:	20 2d       	sub	sp,8
80028196:	ef 4c ff fc 	st.w	r7[-4],r12
8002819a:	16 98       	mov	r8,r11
8002819c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800281a0:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800281a4:	31 f8       	mov	r8,31
800281a6:	f0 09 19 00 	cp.h	r9,r8
800281aa:	e0 8b 00 12 	brhi	800281ce <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
800281ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281b2:	71 49       	ld.w	r9,r8[0x50]
800281b4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281b8:	30 1a       	mov	r10,1
800281ba:	f4 08 09 48 	lsl	r8,r10,r8
800281be:	10 69       	and	r9,r8
800281c0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281c4:	f2 08 0a 48 	lsr	r8,r9,r8
800281c8:	5f 18       	srne	r8
800281ca:	5c 58       	castu.b	r8
800281cc:	c1 28       	rjmp	800281f0 <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
800281ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281d2:	71 59       	ld.w	r9,r8[0x54]
800281d4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281d8:	22 08       	sub	r8,32
800281da:	30 1a       	mov	r10,1
800281dc:	f4 08 09 48 	lsl	r8,r10,r8
800281e0:	10 69       	and	r9,r8
800281e2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281e6:	22 08       	sub	r8,32
800281e8:	f2 08 0a 48 	lsr	r8,r9,r8
800281ec:	5f 18       	srne	r8
800281ee:	5c 58       	castu.b	r8
}
800281f0:	10 9c       	mov	r12,r8
800281f2:	2f ed       	sub	sp,-8
800281f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800281f8 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
800281f8:	eb cd 40 80 	pushm	r7,lr
800281fc:	1a 97       	mov	r7,sp
800281fe:	20 2d       	sub	sp,8
80028200:	ef 4c ff fc 	st.w	r7[-4],r12
80028204:	16 98       	mov	r8,r11
80028206:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
8002820a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002820e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028212:	f0 ca ff c0 	sub	r10,r8,-64
80028216:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002821a:	30 1b       	mov	r11,1
8002821c:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028220:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80028224:	2f ed       	sub	sp,-8
80028226:	e3 cd 80 80 	ldm	sp++,r7,pc

8002822a <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002822a:	eb cd 40 80 	pushm	r7,lr
8002822e:	1a 97       	mov	r7,sp
80028230:	20 3d       	sub	sp,12
80028232:	ef 4c ff fc 	st.w	r7[-4],r12
80028236:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
8002823a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002823e:	fc 1a 80 00 	movh	r10,0x8000
80028242:	30 0b       	mov	r11,0
80028244:	14 38       	cp.w	r8,r10
80028246:	f6 09 13 00 	cpc	r9,r11
8002824a:	e0 8b 00 09 	brhi	8002825c <pevc_channels_trigger_sev+0x32>
8002824e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028256:	f1 49 00 40 	st.w	r8[64],r9
8002825a:	c0 78       	rjmp	80028268 <pevc_channels_trigger_sev+0x3e>
8002825c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028264:	f1 49 00 44 	st.w	r8[68],r9
}
80028268:	2f dd       	sub	sp,-12
8002826a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002826e <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
8002826e:	eb cd 40 80 	pushm	r7,lr
80028272:	1a 97       	mov	r7,sp
80028274:	20 2d       	sub	sp,8
80028276:	ef 4c ff fc 	st.w	r7[-4],r12
8002827a:	16 98       	mov	r8,r11
8002827c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
80028280:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028284:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028288:	f0 ca ff c0 	sub	r10,r8,-64
8002828c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028290:	30 0b       	mov	r11,0
80028292:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028296:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
8002829a:	2f ed       	sub	sp,-8
8002829c:	e3 cd 80 80 	ldm	sp++,r7,pc

800282a0 <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800282a0:	eb cd 40 80 	pushm	r7,lr
800282a4:	1a 97       	mov	r7,sp
800282a6:	20 3d       	sub	sp,12
800282a8:	ef 4c ff fc 	st.w	r7[-4],r12
800282ac:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800282b0:	ee e8 ff f4 	ld.d	r8,r7[-12]
800282b4:	fc 1a 80 00 	movh	r10,0x8000
800282b8:	30 0b       	mov	r11,0
800282ba:	14 38       	cp.w	r8,r10
800282bc:	f6 09 13 00 	cpc	r9,r11
800282c0:	e0 8b 00 09 	brhi	800282d2 <pevc_channels_enable_trigger_interrupt+0x32>
800282c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800282c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282cc:	f1 49 00 90 	st.w	r8[144],r9
800282d0:	c0 78       	rjmp	800282de <pevc_channels_enable_trigger_interrupt+0x3e>
800282d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800282d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282da:	f1 49 00 94 	st.w	r8[148],r9
}
800282de:	2f dd       	sub	sp,-12
800282e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800282e4 <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800282e4:	eb cd 40 80 	pushm	r7,lr
800282e8:	1a 97       	mov	r7,sp
800282ea:	20 3d       	sub	sp,12
800282ec:	ef 4c ff fc 	st.w	r7[-4],r12
800282f0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800282f4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800282f8:	fc 1a 80 00 	movh	r10,0x8000
800282fc:	30 0b       	mov	r11,0
800282fe:	14 38       	cp.w	r8,r10
80028300:	f6 09 13 00 	cpc	r9,r11
80028304:	e0 8b 00 09 	brhi	80028316 <pevc_channels_disable_trigger_interrupt+0x32>
80028308:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002830c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028310:	f1 49 00 a0 	st.w	r8[160],r9
80028314:	c0 78       	rjmp	80028322 <pevc_channels_disable_trigger_interrupt+0x3e>
80028316:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002831a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002831e:	f1 49 00 a4 	st.w	r8[164],r9
}
80028322:	2f dd       	sub	sp,-12
80028324:	e3 cd 80 80 	ldm	sp++,r7,pc

80028328 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028328:	eb cd 40 80 	pushm	r7,lr
8002832c:	1a 97       	mov	r7,sp
8002832e:	20 2d       	sub	sp,8
80028330:	ef 4c ff fc 	st.w	r7[-4],r12
80028334:	16 98       	mov	r8,r11
80028336:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002833a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002833e:	31 f8       	mov	r8,31
80028340:	f0 09 19 00 	cp.h	r9,r8
80028344:	e0 8b 00 13 	brhi	8002836a <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
80028348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002834c:	f0 f9 00 80 	ld.w	r9,r8[128]
80028350:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028354:	30 1a       	mov	r10,1
80028356:	f4 08 09 48 	lsl	r8,r10,r8
8002835a:	10 69       	and	r9,r8
8002835c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028360:	f2 08 0a 48 	lsr	r8,r9,r8
80028364:	5f 18       	srne	r8
80028366:	5c 58       	castu.b	r8
80028368:	c1 38       	rjmp	8002838e <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002836a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002836e:	f0 f9 00 84 	ld.w	r9,r8[132]
80028372:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028376:	22 08       	sub	r8,32
80028378:	30 1a       	mov	r10,1
8002837a:	f4 08 09 48 	lsl	r8,r10,r8
8002837e:	10 69       	and	r9,r8
80028380:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028384:	22 08       	sub	r8,32
80028386:	f2 08 0a 48 	lsr	r8,r9,r8
8002838a:	5f 18       	srne	r8
8002838c:	5c 58       	castu.b	r8
}
8002838e:	10 9c       	mov	r12,r8
80028390:	2f ed       	sub	sp,-8
80028392:	e3 cd 80 80 	ldm	sp++,r7,pc

80028396 <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028396:	eb cd 40 80 	pushm	r7,lr
8002839a:	1a 97       	mov	r7,sp
8002839c:	20 2d       	sub	sp,8
8002839e:	ef 4c ff fc 	st.w	r7[-4],r12
800283a2:	16 98       	mov	r8,r11
800283a4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800283a8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800283ac:	31 f8       	mov	r8,31
800283ae:	f0 09 19 00 	cp.h	r9,r8
800283b2:	e0 8b 00 12 	brhi	800283d6 <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
800283b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283ba:	71 89       	ld.w	r9,r8[0x60]
800283bc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800283c0:	30 1a       	mov	r10,1
800283c2:	f4 08 09 48 	lsl	r8,r10,r8
800283c6:	10 69       	and	r9,r8
800283c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800283cc:	f2 08 0a 48 	lsr	r8,r9,r8
800283d0:	5f 18       	srne	r8
800283d2:	5c 58       	castu.b	r8
800283d4:	c1 28       	rjmp	800283f8 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800283d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283da:	71 99       	ld.w	r9,r8[0x64]
800283dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800283e0:	22 08       	sub	r8,32
800283e2:	30 1a       	mov	r10,1
800283e4:	f4 08 09 48 	lsl	r8,r10,r8
800283e8:	10 69       	and	r9,r8
800283ea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800283ee:	22 08       	sub	r8,32
800283f0:	f2 08 0a 48 	lsr	r8,r9,r8
800283f4:	5f 18       	srne	r8
800283f6:	5c 58       	castu.b	r8
}
800283f8:	10 9c       	mov	r12,r8
800283fa:	2f ed       	sub	sp,-8
800283fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80028400 <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028400:	eb cd 40 80 	pushm	r7,lr
80028404:	1a 97       	mov	r7,sp
80028406:	20 2d       	sub	sp,8
80028408:	ef 4c ff fc 	st.w	r7[-4],r12
8002840c:	16 98       	mov	r8,r11
8002840e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028412:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028416:	31 f8       	mov	r8,31
80028418:	f0 09 19 00 	cp.h	r9,r8
8002841c:	e0 8b 00 0d 	brhi	80028436 <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
80028420:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028424:	30 19       	mov	r9,1
80028426:	f2 08 09 48 	lsl	r8,r9,r8
8002842a:	10 99       	mov	r9,r8
8002842c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028430:	f1 49 00 70 	st.w	r8[112],r9
80028434:	c0 c8       	rjmp	8002844c <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
80028436:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002843a:	22 08       	sub	r8,32
8002843c:	30 19       	mov	r9,1
8002843e:	f2 08 09 48 	lsl	r8,r9,r8
80028442:	10 99       	mov	r9,r8
80028444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028448:	f1 49 00 74 	st.w	r8[116],r9
}
8002844c:	2f ed       	sub	sp,-8
8002844e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028452 <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028452:	eb cd 40 80 	pushm	r7,lr
80028456:	1a 97       	mov	r7,sp
80028458:	20 3d       	sub	sp,12
8002845a:	ef 4c ff fc 	st.w	r7[-4],r12
8002845e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80028462:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028466:	fc 1a 80 00 	movh	r10,0x8000
8002846a:	30 0b       	mov	r11,0
8002846c:	14 38       	cp.w	r8,r10
8002846e:	f6 09 13 00 	cpc	r9,r11
80028472:	e0 8b 00 09 	brhi	80028484 <pevc_channels_enable_overrun_interrupt+0x32>
80028476:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002847a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002847e:	f1 49 00 e0 	st.w	r8[224],r9
80028482:	c0 78       	rjmp	80028490 <pevc_channels_enable_overrun_interrupt+0x3e>
80028484:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002848c:	f1 49 00 e4 	st.w	r8[228],r9
}
80028490:	2f dd       	sub	sp,-12
80028492:	e3 cd 80 80 	ldm	sp++,r7,pc

80028496 <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028496:	eb cd 40 80 	pushm	r7,lr
8002849a:	1a 97       	mov	r7,sp
8002849c:	20 3d       	sub	sp,12
8002849e:	ef 4c ff fc 	st.w	r7[-4],r12
800284a2:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
800284a6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800284aa:	fc 1a 80 00 	movh	r10,0x8000
800284ae:	30 0b       	mov	r11,0
800284b0:	14 38       	cp.w	r8,r10
800284b2:	f6 09 13 00 	cpc	r9,r11
800284b6:	e0 8b 00 09 	brhi	800284c8 <pevc_channels_disable_overrun_interrupt+0x32>
800284ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800284be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284c2:	f1 49 00 f0 	st.w	r8[240],r9
800284c6:	c0 78       	rjmp	800284d4 <pevc_channels_disable_overrun_interrupt+0x3e>
800284c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800284cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284d0:	f1 49 00 f4 	st.w	r8[244],r9
}
800284d4:	2f dd       	sub	sp,-12
800284d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800284da <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800284da:	eb cd 40 80 	pushm	r7,lr
800284de:	1a 97       	mov	r7,sp
800284e0:	20 2d       	sub	sp,8
800284e2:	ef 4c ff fc 	st.w	r7[-4],r12
800284e6:	16 98       	mov	r8,r11
800284e8:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800284ec:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800284f0:	31 f8       	mov	r8,31
800284f2:	f0 09 19 00 	cp.h	r9,r8
800284f6:	e0 8b 00 13 	brhi	8002851c <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
800284fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284fe:	f0 f9 00 d0 	ld.w	r9,r8[208]
80028502:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028506:	30 1a       	mov	r10,1
80028508:	f4 08 09 48 	lsl	r8,r10,r8
8002850c:	10 69       	and	r9,r8
8002850e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028512:	f2 08 0a 48 	lsr	r8,r9,r8
80028516:	5f 18       	srne	r8
80028518:	5c 58       	castu.b	r8
8002851a:	c1 38       	rjmp	80028540 <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002851c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028520:	f0 f9 00 d4 	ld.w	r9,r8[212]
80028524:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028528:	22 08       	sub	r8,32
8002852a:	30 1a       	mov	r10,1
8002852c:	f4 08 09 48 	lsl	r8,r10,r8
80028530:	10 69       	and	r9,r8
80028532:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028536:	22 08       	sub	r8,32
80028538:	f2 08 0a 48 	lsr	r8,r9,r8
8002853c:	5f 18       	srne	r8
8002853e:	5c 58       	castu.b	r8
}
80028540:	10 9c       	mov	r12,r8
80028542:	2f ed       	sub	sp,-8
80028544:	e3 cd 80 80 	ldm	sp++,r7,pc

80028548 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028548:	eb cd 40 80 	pushm	r7,lr
8002854c:	1a 97       	mov	r7,sp
8002854e:	20 2d       	sub	sp,8
80028550:	ef 4c ff fc 	st.w	r7[-4],r12
80028554:	16 98       	mov	r8,r11
80028556:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002855a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002855e:	31 f8       	mov	r8,31
80028560:	f0 09 19 00 	cp.h	r9,r8
80028564:	e0 8b 00 13 	brhi	8002858a <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
80028568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002856c:	f0 f9 00 b0 	ld.w	r9,r8[176]
80028570:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028574:	30 1a       	mov	r10,1
80028576:	f4 08 09 48 	lsl	r8,r10,r8
8002857a:	10 69       	and	r9,r8
8002857c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028580:	f2 08 0a 48 	lsr	r8,r9,r8
80028584:	5f 18       	srne	r8
80028586:	5c 58       	castu.b	r8
80028588:	c1 38       	rjmp	800285ae <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002858a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002858e:	f0 f9 00 b4 	ld.w	r9,r8[180]
80028592:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028596:	22 08       	sub	r8,32
80028598:	30 1a       	mov	r10,1
8002859a:	f4 08 09 48 	lsl	r8,r10,r8
8002859e:	10 69       	and	r9,r8
800285a0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285a4:	22 08       	sub	r8,32
800285a6:	f2 08 0a 48 	lsr	r8,r9,r8
800285aa:	5f 18       	srne	r8
800285ac:	5c 58       	castu.b	r8
}
800285ae:	10 9c       	mov	r12,r8
800285b0:	2f ed       	sub	sp,-8
800285b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800285b6 <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800285b6:	eb cd 40 80 	pushm	r7,lr
800285ba:	1a 97       	mov	r7,sp
800285bc:	20 2d       	sub	sp,8
800285be:	ef 4c ff fc 	st.w	r7[-4],r12
800285c2:	16 98       	mov	r8,r11
800285c4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800285c8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800285cc:	31 f8       	mov	r8,31
800285ce:	f0 09 19 00 	cp.h	r9,r8
800285d2:	e0 8b 00 0d 	brhi	800285ec <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
800285d6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285da:	30 19       	mov	r9,1
800285dc:	f2 08 09 48 	lsl	r8,r9,r8
800285e0:	10 99       	mov	r9,r8
800285e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285e6:	f1 49 00 c0 	st.w	r8[192],r9
800285ea:	c0 c8       	rjmp	80028602 <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
800285ec:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285f0:	22 08       	sub	r8,32
800285f2:	30 19       	mov	r9,1
800285f4:	f2 08 09 48 	lsl	r8,r9,r8
800285f8:	10 99       	mov	r9,r8
800285fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285fe:	f1 49 00 c4 	st.w	r8[196],r9
}
80028602:	2f ed       	sub	sp,-8
80028604:	e3 cd 80 80 	ldm	sp++,r7,pc

80028608 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80028608:	eb cd 40 80 	pushm	r7,lr
8002860c:	1a 97       	mov	r7,sp
8002860e:	20 1d       	sub	sp,4
80028610:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80028614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028618:	e6 18 00 01 	andh	r8,0x1,COH
8002861c:	5f 08       	sreq	r8
8002861e:	5c 58       	castu.b	r8
}
80028620:	10 9c       	mov	r12,r8
80028622:	2f fd       	sub	sp,-4
80028624:	e3 cd 80 80 	ldm	sp++,r7,pc

80028628 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80028628:	eb cd 40 80 	pushm	r7,lr
8002862c:	1a 97       	mov	r7,sp
8002862e:	20 2d       	sub	sp,8
80028630:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80028634:	e0 78 86 a0 	mov	r8,100000
80028638:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
8002863c:	c0 c8       	rjmp	80028654 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
8002863e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028642:	20 18       	sub	r8,1
80028644:	ef 48 ff fc 	st.w	r7[-4],r8
80028648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002864c:	58 08       	cp.w	r8,0
8002864e:	c0 31       	brne	80028654 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80028650:	3f f8       	mov	r8,-1
80028652:	c0 a8       	rjmp	80028666 <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028654:	fe 78 08 00 	mov	r8,-63488
80028658:	70 59       	ld.w	r9,r8[0x14]
8002865a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002865e:	f3 e8 00 08 	and	r8,r9,r8
80028662:	ce e0       	breq	8002863e <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80028664:	30 08       	mov	r8,0
}
80028666:	10 9c       	mov	r12,r8
80028668:	2f ed       	sub	sp,-8
8002866a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002866e <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
8002866e:	eb cd 40 80 	pushm	r7,lr
80028672:	1a 97       	mov	r7,sp
80028674:	20 1d       	sub	sp,4
80028676:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
8002867a:	fe 78 08 00 	mov	r8,-63488
8002867e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028682:	2e 99       	sub	r9,-23
80028684:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
80028688:	10 9c       	mov	r12,r8
8002868a:	2f fd       	sub	sp,-4
8002868c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028690 <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
80028690:	eb cd 40 80 	pushm	r7,lr
80028694:	1a 97       	mov	r7,sp
80028696:	20 2d       	sub	sp,8
80028698:	ef 4c ff fc 	st.w	r7[-4],r12
8002869c:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
800286a0:	fe 78 08 00 	mov	r8,-63488
800286a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800286a8:	2e 99       	sub	r9,-23
800286aa:	a3 69       	lsl	r9,0x2
800286ac:	ea 19 aa 00 	orh	r9,0xaa00
800286b0:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
800286b2:	fe 78 08 00 	mov	r8,-63488
800286b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800286ba:	2e 99       	sub	r9,-23
800286bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800286c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800286c4:	2f ed       	sub	sp,-8
800286c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800286ca <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
800286ca:	eb cd 40 c0 	pushm	r6-r7,lr
800286ce:	1a 97       	mov	r7,sp
800286d0:	20 6d       	sub	sp,24
800286d2:	4c c6       	lddpc	r6,80028800 <scif_start_osc+0x136>
800286d4:	1e 26       	rsub	r6,pc
800286d6:	ef 4c ff f0 	st.w	r7[-16],r12
800286da:	ef 4b ff ec 	st.w	r7[-20],r11
800286de:	14 98       	mov	r8,r10
800286e0:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
800286e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800286e8:	fe 79 08 00 	mov	r9,-63488
800286ec:	ee fa ff f0 	ld.w	r10,r7[-16]
800286f0:	a3 68       	lsl	r8,0x2
800286f2:	ee 08 00 08 	add	r8,r7,r8
800286f6:	2f 7a       	sub	r10,-9
800286f8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800286fc:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
80028700:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028704:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028708:	70 18       	ld.w	r8,r8[0x4]
8002870a:	5c 58       	castu.b	r8
8002870c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028710:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028714:	f2 08 15 02 	lsl	r8,r9,0x2
80028718:	ee 08 00 08 	add	r8,r7,r8
8002871c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028720:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028724:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80028728:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002872c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028730:	f1 38 00 09 	ld.ub	r8,r8[9]
80028734:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028738:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002873c:	f2 08 15 02 	lsl	r8,r9,0x2
80028740:	ee 08 00 08 	add	r8,r7,r8
80028744:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028748:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
8002874c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
80028750:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028754:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028758:	f1 38 00 08 	ld.ub	r8,r8[8]
8002875c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028760:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028764:	f2 08 15 02 	lsl	r8,r9,0x2
80028768:	ee 08 00 08 	add	r8,r7,r8
8002876c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028770:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028774:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028778:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002877c:	a3 68       	lsl	r8,0x2
8002877e:	ee 08 00 08 	add	r8,r7,r8
80028782:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028786:	30 1a       	mov	r10,1
80028788:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
8002878c:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028790:	e1 b8 00 00 	mfsr	r8,0x0
80028794:	10 9c       	mov	r12,r8
80028796:	c3 9f       	rcall	80028608 <cpu_irq_is_enabled_flags>
80028798:	18 98       	mov	r8,r12
8002879a:	ef 68 ff ff 	st.b	r7[-1],r8
8002879e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
800287a0:	fe 78 08 00 	mov	r8,-63488
800287a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800287a8:	2f 79       	sub	r9,-9
800287aa:	a3 69       	lsl	r9,0x2
800287ac:	ea 19 aa 00 	orh	r9,0xaa00
800287b0:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800287b2:	fe 79 08 00 	mov	r9,-63488
800287b6:	ee fa ff f0 	ld.w	r10,r7[-16]
800287ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800287be:	2f 7a       	sub	r10,-9
800287c0:	a3 68       	lsl	r8,0x2
800287c2:	ee 08 00 08 	add	r8,r7,r8
800287c6:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800287ca:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800287ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800287d2:	30 08       	mov	r8,0
800287d4:	f0 09 18 00 	cp.b	r9,r8
800287d8:	c0 20       	breq	800287dc <scif_start_osc+0x112>
800287da:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800287dc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800287e0:	30 08       	mov	r8,0
800287e2:	f0 09 18 00 	cp.b	r9,r8
800287e6:	c0 80       	breq	800287f6 <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
800287e8:	30 1c       	mov	r12,1
800287ea:	c1 ff       	rcall	80028628 <scif_pclksr_statushigh_wait>
800287ec:	18 98       	mov	r8,r12
800287ee:	58 08       	cp.w	r8,0
800287f0:	c0 30       	breq	800287f6 <scif_start_osc+0x12c>
      return -1;
800287f2:	3f f8       	mov	r8,-1
800287f4:	c0 28       	rjmp	800287f8 <scif_start_osc+0x12e>
  }
  return PASS;
800287f6:	30 08       	mov	r8,0
}
800287f8:	10 9c       	mov	r12,r8
800287fa:	2f ad       	sub	sp,-24
800287fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028800:	80 02       	ld.sh	r2,r0[0x0]
80028802:	85 58       	st.w	r2[0x14],r8

80028804 <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
80028804:	eb cd 40 80 	pushm	r7,lr
80028808:	1a 97       	mov	r7,sp
8002880a:	20 1d       	sub	sp,4
8002880c:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80028810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028814:	58 08       	cp.w	r8,0
80028816:	c0 81       	brne	80028826 <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80028818:	fe 78 08 00 	mov	r8,-63488
8002881c:	70 58       	ld.w	r8,r8[0x14]
8002881e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028822:	5c 58       	castu.b	r8
80028824:	c0 98       	rjmp	80028836 <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
80028826:	fe 78 08 00 	mov	r8,-63488
8002882a:	70 58       	ld.w	r8,r8[0x14]
8002882c:	e2 18 00 02 	andl	r8,0x2,COH
80028830:	a1 98       	lsr	r8,0x1
80028832:	5f 18       	srne	r8
80028834:	5c 58       	castu.b	r8
  }
}
80028836:	10 9c       	mov	r12,r8
80028838:	2f fd       	sub	sp,-4
8002883a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002883e <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
8002883e:	eb cd 40 c0 	pushm	r6-r7,lr
80028842:	1a 97       	mov	r7,sp
80028844:	20 3d       	sub	sp,12
80028846:	49 d6       	lddpc	r6,800288b8 <scif_stop_osc+0x7a>
80028848:	1e 26       	rsub	r6,pc
8002884a:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
8002884e:	fe 78 08 00 	mov	r8,-63488
80028852:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028856:	2f 79       	sub	r9,-9
80028858:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002885c:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80028860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028864:	b1 c8       	cbr	r8,0x10
80028866:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8002886a:	e1 b8 00 00 	mfsr	r8,0x0
8002886e:	10 9c       	mov	r12,r8
80028870:	cc ce       	rcall	80028608 <cpu_irq_is_enabled_flags>
80028872:	18 98       	mov	r8,r12
80028874:	ef 68 ff ff 	st.b	r7[-1],r8
80028878:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
8002887a:	fe 78 08 00 	mov	r8,-63488
8002887e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028882:	2f 79       	sub	r9,-9
80028884:	a3 69       	lsl	r9,0x2
80028886:	ea 19 aa 00 	orh	r9,0xaa00
8002888a:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
8002888c:	fe 78 08 00 	mov	r8,-63488
80028890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028894:	2f 79       	sub	r9,-9
80028896:	ee fa ff f8 	ld.w	r10,r7[-8]
8002889a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
8002889e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800288a2:	30 08       	mov	r8,0
800288a4:	f0 09 18 00 	cp.b	r9,r8
800288a8:	c0 20       	breq	800288ac <scif_stop_osc+0x6e>
800288aa:	d5 03       	csrf	0x10
      
  return PASS;
800288ac:	30 08       	mov	r8,0
}
800288ae:	10 9c       	mov	r12,r8
800288b0:	2f dd       	sub	sp,-12
800288b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800288b6:	00 00       	add	r0,r0
800288b8:	80 02       	ld.sh	r2,r0[0x0]
800288ba:	86 cc       	ld.uh	r12,r3[0x8]

800288bc <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
800288bc:	eb cd 40 c0 	pushm	r6-r7,lr
800288c0:	1a 97       	mov	r7,sp
800288c2:	20 5d       	sub	sp,20
800288c4:	4d 46       	lddpc	r6,80028a14 <scif_configure_osc_crystalmode+0x158>
800288c6:	1e 26       	rsub	r6,pc
800288c8:	ef 4c ff f0 	st.w	r7[-16],r12
800288cc:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
800288d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800288d4:	58 08       	cp.w	r8,0
800288d6:	c4 e1       	brne	80028972 <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
800288d8:	fe 78 08 00 	mov	r8,-63488
800288dc:	70 98       	ld.w	r8,r8[0x24]
800288de:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800288e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800288e6:	30 19       	mov	r9,1
800288e8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800288ec:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
800288f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800288f4:	ec 58 bb 9f 	cp.w	r8,899999
800288f8:	e0 88 00 1b 	brls	8002892e <scif_configure_osc_crystalmode+0x72>
800288fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028900:	e0 69 c6 bf 	mov	r9,50879
80028904:	ea 19 00 2d 	orh	r9,0x2d
80028908:	12 38       	cp.w	r8,r9
8002890a:	e0 88 00 0f 	brls	80028928 <scif_configure_osc_crystalmode+0x6c>
8002890e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028912:	e0 69 11 ff 	mov	r9,4607
80028916:	ea 19 00 7a 	orh	r9,0x7a
8002891a:	12 38       	cp.w	r8,r9
8002891c:	e0 8b 00 04 	brhi	80028924 <scif_configure_osc_crystalmode+0x68>
80028920:	30 28       	mov	r8,2
80028922:	c0 28       	rjmp	80028926 <scif_configure_osc_crystalmode+0x6a>
80028924:	30 38       	mov	r8,3
80028926:	c0 28       	rjmp	8002892a <scif_configure_osc_crystalmode+0x6e>
80028928:	30 18       	mov	r8,1
8002892a:	10 99       	mov	r9,r8
8002892c:	c0 28       	rjmp	80028930 <scif_configure_osc_crystalmode+0x74>
8002892e:	30 09       	mov	r9,0
80028930:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028934:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028938:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8002893c:	e1 b8 00 00 	mfsr	r8,0x0
80028940:	10 9c       	mov	r12,r8
80028942:	c6 3e       	rcall	80028608 <cpu_irq_is_enabled_flags>
80028944:	18 98       	mov	r8,r12
80028946:	ef 68 ff fe 	st.b	r7[-2],r8
8002894a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
8002894c:	fe 78 08 00 	mov	r8,-63488
80028950:	32 49       	mov	r9,36
80028952:	ea 19 aa 00 	orh	r9,0xaa00
80028956:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80028958:	fe 78 08 00 	mov	r8,-63488
8002895c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028960:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028962:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80028966:	30 08       	mov	r8,0
80028968:	f0 09 18 00 	cp.b	r9,r8
8002896c:	c4 f0       	breq	80028a0a <scif_configure_osc_crystalmode+0x14e>
8002896e:	d5 03       	csrf	0x10
80028970:	c4 d8       	rjmp	80028a0a <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
80028972:	fe 78 08 00 	mov	r8,-63488
80028976:	70 a8       	ld.w	r8,r8[0x28]
80028978:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8002897c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028980:	30 19       	mov	r9,1
80028982:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028986:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
8002898a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002898e:	ec 58 bb 9f 	cp.w	r8,899999
80028992:	e0 88 00 1b 	brls	800289c8 <scif_configure_osc_crystalmode+0x10c>
80028996:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002899a:	e0 69 c6 bf 	mov	r9,50879
8002899e:	ea 19 00 2d 	orh	r9,0x2d
800289a2:	12 38       	cp.w	r8,r9
800289a4:	e0 88 00 0f 	brls	800289c2 <scif_configure_osc_crystalmode+0x106>
800289a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800289ac:	e0 69 11 ff 	mov	r9,4607
800289b0:	ea 19 00 7a 	orh	r9,0x7a
800289b4:	12 38       	cp.w	r8,r9
800289b6:	e0 8b 00 04 	brhi	800289be <scif_configure_osc_crystalmode+0x102>
800289ba:	30 28       	mov	r8,2
800289bc:	c0 28       	rjmp	800289c0 <scif_configure_osc_crystalmode+0x104>
800289be:	30 38       	mov	r8,3
800289c0:	c0 28       	rjmp	800289c4 <scif_configure_osc_crystalmode+0x108>
800289c2:	30 18       	mov	r8,1
800289c4:	10 99       	mov	r9,r8
800289c6:	c0 28       	rjmp	800289ca <scif_configure_osc_crystalmode+0x10e>
800289c8:	30 09       	mov	r9,0
800289ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800289ce:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
800289d2:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
800289d6:	e1 b8 00 00 	mfsr	r8,0x0
800289da:	10 9c       	mov	r12,r8
800289dc:	c1 6e       	rcall	80028608 <cpu_irq_is_enabled_flags>
800289de:	18 98       	mov	r8,r12
800289e0:	ef 68 ff ff 	st.b	r7[-1],r8
800289e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
800289e6:	fe 78 08 00 	mov	r8,-63488
800289ea:	32 89       	mov	r9,40
800289ec:	ea 19 aa 00 	orh	r9,0xaa00
800289f0:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
800289f2:	fe 78 08 00 	mov	r8,-63488
800289f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800289fa:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
800289fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028a00:	30 08       	mov	r8,0
80028a02:	f0 09 18 00 	cp.b	r9,r8
80028a06:	c0 20       	breq	80028a0a <scif_configure_osc_crystalmode+0x14e>
80028a08:	d5 03       	csrf	0x10
  }

  return PASS;
80028a0a:	30 08       	mov	r8,0
}
80028a0c:	10 9c       	mov	r12,r8
80028a0e:	2f bd       	sub	sp,-20
80028a10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028a14:	80 02       	ld.sh	r2,r0[0x0]
80028a16:	87 4a       	st.w	r3[0x10],r10

80028a18 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80028a18:	eb cd 40 c0 	pushm	r6-r7,lr
80028a1c:	1a 97       	mov	r7,sp
80028a1e:	20 4d       	sub	sp,16
80028a20:	4a 56       	lddpc	r6,80028ab4 <scif_configure_osc_extmode+0x9c>
80028a22:	1e 26       	rsub	r6,pc
80028a24:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028a28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a2c:	fe 79 08 00 	mov	r9,-63488
80028a30:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a34:	a3 68       	lsl	r8,0x2
80028a36:	ee 08 00 08 	add	r8,r7,r8
80028a3a:	2f 7a       	sub	r10,-9
80028a3c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028a40:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80028a44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a48:	a3 68       	lsl	r8,0x2
80028a4a:	ee 08 00 08 	add	r8,r7,r8
80028a4e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028a52:	30 0a       	mov	r10,0
80028a54:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028a58:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028a5c:	e1 b8 00 00 	mfsr	r8,0x0
80028a60:	10 9c       	mov	r12,r8
80028a62:	fe b0 fd d3 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028a66:	18 98       	mov	r8,r12
80028a68:	ef 68 ff ff 	st.b	r7[-1],r8
80028a6c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028a6e:	fe 78 08 00 	mov	r8,-63488
80028a72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028a76:	2f 79       	sub	r9,-9
80028a78:	a3 69       	lsl	r9,0x2
80028a7a:	ea 19 aa 00 	orh	r9,0xaa00
80028a7e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028a80:	fe 79 08 00 	mov	r9,-63488
80028a84:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a8c:	2f 7a       	sub	r10,-9
80028a8e:	a3 68       	lsl	r8,0x2
80028a90:	ee 08 00 08 	add	r8,r7,r8
80028a94:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028a98:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028a9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028aa0:	30 08       	mov	r8,0
80028aa2:	f0 09 18 00 	cp.b	r9,r8
80028aa6:	c0 20       	breq	80028aaa <scif_configure_osc_extmode+0x92>
80028aa8:	d5 03       	csrf	0x10

  return PASS;
80028aaa:	30 08       	mov	r8,0
}
80028aac:	10 9c       	mov	r12,r8
80028aae:	2f cd       	sub	sp,-16
80028ab0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ab4:	80 02       	ld.sh	r2,r0[0x0]
80028ab6:	88 a6       	ld.uh	r6,r4[0x4]

80028ab8 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80028ab8:	eb cd 40 c0 	pushm	r6-r7,lr
80028abc:	1a 97       	mov	r7,sp
80028abe:	20 6d       	sub	sp,24
80028ac0:	4b 86       	lddpc	r6,80028ba0 <scif_enable_osc+0xe8>
80028ac2:	1e 26       	rsub	r6,pc
80028ac4:	ef 4c ff f0 	st.w	r7[-16],r12
80028ac8:	ef 4b ff ec 	st.w	r7[-20],r11
80028acc:	14 98       	mov	r8,r10
80028ace:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
80028ad2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ad6:	fe 79 08 00 	mov	r9,-63488
80028ada:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ade:	a3 68       	lsl	r8,0x2
80028ae0:	ee 08 00 08 	add	r8,r7,r8
80028ae4:	2f 7a       	sub	r10,-9
80028ae6:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028aea:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80028aee:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028af2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028af6:	5c 58       	castu.b	r8
80028af8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028afc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028b00:	f2 08 15 02 	lsl	r8,r9,0x2
80028b04:	ee 08 00 08 	add	r8,r7,r8
80028b08:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b0c:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028b10:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028b14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b18:	a3 68       	lsl	r8,0x2
80028b1a:	ee 08 00 08 	add	r8,r7,r8
80028b1e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b22:	30 1a       	mov	r10,1
80028b24:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028b28:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028b2c:	e1 b8 00 00 	mfsr	r8,0x0
80028b30:	10 9c       	mov	r12,r8
80028b32:	fe b0 fd 6b 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028b36:	18 98       	mov	r8,r12
80028b38:	ef 68 ff ff 	st.b	r7[-1],r8
80028b3c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028b3e:	fe 78 08 00 	mov	r8,-63488
80028b42:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b46:	2f 79       	sub	r9,-9
80028b48:	a3 69       	lsl	r9,0x2
80028b4a:	ea 19 aa 00 	orh	r9,0xaa00
80028b4e:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028b50:	fe 79 08 00 	mov	r9,-63488
80028b54:	ee fa ff f0 	ld.w	r10,r7[-16]
80028b58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b5c:	2f 7a       	sub	r10,-9
80028b5e:	a3 68       	lsl	r8,0x2
80028b60:	ee 08 00 08 	add	r8,r7,r8
80028b64:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028b68:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028b6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028b70:	30 08       	mov	r8,0
80028b72:	f0 09 18 00 	cp.b	r9,r8
80028b76:	c0 20       	breq	80028b7a <scif_enable_osc+0xc2>
80028b78:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028b7a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028b7e:	30 08       	mov	r8,0
80028b80:	f0 09 18 00 	cp.b	r9,r8
80028b84:	c0 90       	breq	80028b96 <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028b86:	30 1c       	mov	r12,1
80028b88:	fe b0 fd 50 	rcall	80028628 <scif_pclksr_statushigh_wait>
80028b8c:	18 98       	mov	r8,r12
80028b8e:	58 08       	cp.w	r8,0
80028b90:	c0 30       	breq	80028b96 <scif_enable_osc+0xde>
      return -1;
80028b92:	3f f8       	mov	r8,-1
80028b94:	c0 28       	rjmp	80028b98 <scif_enable_osc+0xe0>
  }
      
  return PASS;
80028b96:	30 08       	mov	r8,0
}
80028b98:	10 9c       	mov	r12,r8
80028b9a:	2f ad       	sub	sp,-24
80028b9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ba0:	80 02       	ld.sh	r2,r0[0x0]
80028ba2:	89 46       	st.w	r4[0x10],r6

80028ba4 <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
80028ba4:	eb cd 40 c0 	pushm	r6-r7,lr
80028ba8:	1a 97       	mov	r7,sp
80028baa:	20 4d       	sub	sp,16
80028bac:	4a 56       	lddpc	r6,80028c40 <scif_enable_extosc+0x9c>
80028bae:	1e 26       	rsub	r6,pc
80028bb0:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
80028bb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028bb8:	fe 79 08 00 	mov	r9,-63488
80028bbc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028bc0:	a3 68       	lsl	r8,0x2
80028bc2:	ee 08 00 08 	add	r8,r7,r8
80028bc6:	2f 7a       	sub	r10,-9
80028bc8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028bcc:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028bd4:	a3 68       	lsl	r8,0x2
80028bd6:	ee 08 00 08 	add	r8,r7,r8
80028bda:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028bde:	30 1a       	mov	r10,1
80028be0:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028be4:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028be8:	e1 b8 00 00 	mfsr	r8,0x0
80028bec:	10 9c       	mov	r12,r8
80028bee:	fe b0 fd 0d 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028bf2:	18 98       	mov	r8,r12
80028bf4:	ef 68 ff ff 	st.b	r7[-1],r8
80028bf8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028bfa:	fe 78 08 00 	mov	r8,-63488
80028bfe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c02:	2f 79       	sub	r9,-9
80028c04:	a3 69       	lsl	r9,0x2
80028c06:	ea 19 aa 00 	orh	r9,0xaa00
80028c0a:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028c0c:	fe 79 08 00 	mov	r9,-63488
80028c10:	ee fa ff f0 	ld.w	r10,r7[-16]
80028c14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028c18:	2f 7a       	sub	r10,-9
80028c1a:	a3 68       	lsl	r8,0x2
80028c1c:	ee 08 00 08 	add	r8,r7,r8
80028c20:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028c24:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028c28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c2c:	30 08       	mov	r8,0
80028c2e:	f0 09 18 00 	cp.b	r9,r8
80028c32:	c0 20       	breq	80028c36 <scif_enable_extosc+0x92>
80028c34:	d5 03       	csrf	0x10
  
  return PASS;
80028c36:	30 08       	mov	r8,0
}
80028c38:	10 9c       	mov	r12,r8
80028c3a:	2f cd       	sub	sp,-16
80028c3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c40:	80 02       	ld.sh	r2,r0[0x0]
80028c42:	8a 32       	ld.sh	r2,r5[0x6]

80028c44 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
80028c44:	eb cd 40 c0 	pushm	r6-r7,lr
80028c48:	1a 97       	mov	r7,sp
80028c4a:	20 4d       	sub	sp,16
80028c4c:	4d 46       	lddpc	r6,80028d9c <scif_pll_setup+0x158>
80028c4e:	1e 26       	rsub	r6,pc
80028c50:	ee c8 ff f4 	sub	r8,r7,-12
80028c54:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028c58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028c5c:	fe 7a 08 00 	mov	r10,-63488
80028c60:	ee fb ff f0 	ld.w	r11,r7[-16]
80028c64:	a3 69       	lsl	r9,0x2
80028c66:	ee 09 00 09 	add	r9,r7,r9
80028c6a:	2f 9b       	sub	r11,-7
80028c6c:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028c70:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
80028c74:	ee fa ff f0 	ld.w	r10,r7[-16]
80028c78:	f1 39 00 10 	ld.ub	r9,r8[16]
80028c7c:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80028c80:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028c84:	f4 09 15 02 	lsl	r9,r10,0x2
80028c88:	ee 09 00 09 	add	r9,r7,r9
80028c8c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028c90:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
80028c94:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80028c98:	ee fc ff f0 	ld.w	r12,r7[-16]
80028c9c:	11 89       	ld.ub	r9,r8[0x0]
80028c9e:	12 9a       	mov	r10,r9
80028ca0:	11 a9       	ld.ub	r9,r8[0x2]
80028ca2:	a1 79       	lsl	r9,0x1
80028ca4:	5c 59       	castu.b	r9
80028ca6:	f5 e9 10 09 	or	r9,r10,r9
80028caa:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
80028cae:	11 99       	ld.ub	r9,r8[0x1]
80028cb0:	a3 69       	lsl	r9,0x2
80028cb2:	5c 59       	castu.b	r9
80028cb4:	f5 e9 10 09 	or	r9,r10,r9
80028cb8:	5c 59       	castu.b	r9
80028cba:	5c 59       	castu.b	r9
80028cbc:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80028cc0:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028cc4:	f8 09 15 02 	lsl	r9,r12,0x2
80028cc8:	ee 09 00 09 	add	r9,r7,r9
80028ccc:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028cd0:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80028cd4:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80028cd8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028cdc:	70 29       	ld.w	r9,r8[0x8]
80028cde:	5c 59       	castu.b	r9
80028ce0:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028ce4:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028ce8:	f4 09 15 02 	lsl	r9,r10,0x2
80028cec:	ee 09 00 09 	add	r9,r7,r9
80028cf0:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028cf4:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80028cf8:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80028cfc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d00:	70 19       	ld.w	r9,r8[0x4]
80028d02:	5c 59       	castu.b	r9
80028d04:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028d08:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028d0c:	f4 09 15 02 	lsl	r9,r10,0x2
80028d10:	ee 09 00 09 	add	r9,r7,r9
80028d14:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028d18:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028d1c:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80028d20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028d24:	70 38       	ld.w	r8,r8[0xc]
80028d26:	5c 58       	castu.b	r8
80028d28:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028d2c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028d30:	f2 08 15 02 	lsl	r8,r9,0x2
80028d34:	ee 08 00 08 	add	r8,r7,r8
80028d38:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028d3c:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80028d40:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028d44:	e1 b8 00 00 	mfsr	r8,0x0
80028d48:	10 9c       	mov	r12,r8
80028d4a:	fe b0 fc 5f 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028d4e:	18 98       	mov	r8,r12
80028d50:	ef 68 ff ff 	st.b	r7[-1],r8
80028d54:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028d56:	fe 78 08 00 	mov	r8,-63488
80028d5a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028d5e:	2f 99       	sub	r9,-7
80028d60:	a3 69       	lsl	r9,0x2
80028d62:	ea 19 aa 00 	orh	r9,0xaa00
80028d66:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028d68:	fe 79 08 00 	mov	r9,-63488
80028d6c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028d70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028d74:	2f 9a       	sub	r10,-7
80028d76:	a3 68       	lsl	r8,0x2
80028d78:	ee 08 00 08 	add	r8,r7,r8
80028d7c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028d80:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028d84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d88:	30 08       	mov	r8,0
80028d8a:	f0 09 18 00 	cp.b	r9,r8
80028d8e:	c0 20       	breq	80028d92 <scif_pll_setup+0x14e>
80028d90:	d5 03       	csrf	0x10

  return PASS;
80028d92:	30 08       	mov	r8,0
}
80028d94:	10 9c       	mov	r12,r8
80028d96:	2f cd       	sub	sp,-16
80028d98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d9c:	80 02       	ld.sh	r2,r0[0x0]
80028d9e:	8a d2       	ld.uh	r2,r5[0xa]

80028da0 <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
80028da0:	eb cd 40 c0 	pushm	r6-r7,lr
80028da4:	1a 97       	mov	r7,sp
80028da6:	20 4d       	sub	sp,16
80028da8:	4a 56       	lddpc	r6,80028e3c <scif_pll_enable+0x9c>
80028daa:	1e 26       	rsub	r6,pc
80028dac:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028db0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028db4:	fe 79 08 00 	mov	r9,-63488
80028db8:	ee fa ff f0 	ld.w	r10,r7[-16]
80028dbc:	a3 68       	lsl	r8,0x2
80028dbe:	ee 08 00 08 	add	r8,r7,r8
80028dc2:	2f 9a       	sub	r10,-7
80028dc4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028dc8:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80028dcc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028dd0:	a3 68       	lsl	r8,0x2
80028dd2:	ee 08 00 08 	add	r8,r7,r8
80028dd6:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028dda:	30 1a       	mov	r10,1
80028ddc:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028de0:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028de4:	e1 b8 00 00 	mfsr	r8,0x0
80028de8:	10 9c       	mov	r12,r8
80028dea:	fe b0 fc 0f 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028dee:	18 98       	mov	r8,r12
80028df0:	ef 68 ff ff 	st.b	r7[-1],r8
80028df4:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028df6:	fe 78 08 00 	mov	r8,-63488
80028dfa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028dfe:	2f 99       	sub	r9,-7
80028e00:	a3 69       	lsl	r9,0x2
80028e02:	ea 19 aa 00 	orh	r9,0xaa00
80028e06:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028e08:	fe 79 08 00 	mov	r9,-63488
80028e0c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e14:	2f 9a       	sub	r10,-7
80028e16:	a3 68       	lsl	r8,0x2
80028e18:	ee 08 00 08 	add	r8,r7,r8
80028e1c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028e20:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028e24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028e28:	30 08       	mov	r8,0
80028e2a:	f0 09 18 00 	cp.b	r9,r8
80028e2e:	c0 20       	breq	80028e32 <scif_pll_enable+0x92>
80028e30:	d5 03       	csrf	0x10
  
  return PASS;
80028e32:	30 08       	mov	r8,0
}
80028e34:	10 9c       	mov	r12,r8
80028e36:	2f cd       	sub	sp,-16
80028e38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028e3c:	80 02       	ld.sh	r2,r0[0x0]
80028e3e:	8c 2e       	ld.sh	lr,r6[0x4]

80028e40 <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
80028e40:	eb cd 40 c0 	pushm	r6-r7,lr
80028e44:	1a 97       	mov	r7,sp
80028e46:	20 4d       	sub	sp,16
80028e48:	4a 56       	lddpc	r6,80028edc <scif_pll_disable+0x9c>
80028e4a:	1e 26       	rsub	r6,pc
80028e4c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028e50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e54:	fe 79 08 00 	mov	r9,-63488
80028e58:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e5c:	a3 68       	lsl	r8,0x2
80028e5e:	ee 08 00 08 	add	r8,r7,r8
80028e62:	2f 9a       	sub	r10,-7
80028e64:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028e68:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
80028e6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e70:	a3 68       	lsl	r8,0x2
80028e72:	ee 08 00 08 	add	r8,r7,r8
80028e76:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028e7a:	30 0a       	mov	r10,0
80028e7c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028e80:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028e84:	e1 b8 00 00 	mfsr	r8,0x0
80028e88:	10 9c       	mov	r12,r8
80028e8a:	fe b0 fb bf 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028e8e:	18 98       	mov	r8,r12
80028e90:	ef 68 ff ff 	st.b	r7[-1],r8
80028e94:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028e96:	fe 78 08 00 	mov	r8,-63488
80028e9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028e9e:	2f 99       	sub	r9,-7
80028ea0:	a3 69       	lsl	r9,0x2
80028ea2:	ea 19 aa 00 	orh	r9,0xaa00
80028ea6:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028ea8:	fe 79 08 00 	mov	r9,-63488
80028eac:	ee fa ff f0 	ld.w	r10,r7[-16]
80028eb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028eb4:	2f 9a       	sub	r10,-7
80028eb6:	a3 68       	lsl	r8,0x2
80028eb8:	ee 08 00 08 	add	r8,r7,r8
80028ebc:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028ec0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028ec4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ec8:	30 08       	mov	r8,0
80028eca:	f0 09 18 00 	cp.b	r9,r8
80028ece:	c0 20       	breq	80028ed2 <scif_pll_disable+0x92>
80028ed0:	d5 03       	csrf	0x10

  return PASS;
80028ed2:	30 08       	mov	r8,0
}
80028ed4:	10 9c       	mov	r12,r8
80028ed6:	2f cd       	sub	sp,-16
80028ed8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028edc:	80 02       	ld.sh	r2,r0[0x0]
80028ede:	8c ce       	ld.uh	lr,r6[0x8]

80028ee0 <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
80028ee0:	eb cd 40 80 	pushm	r7,lr
80028ee4:	1a 97       	mov	r7,sp
80028ee6:	20 1d       	sub	sp,4
80028ee8:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
80028eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ef0:	58 08       	cp.w	r8,0
80028ef2:	c0 81       	brne	80028f02 <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80028ef4:	fe 78 08 00 	mov	r8,-63488
80028ef8:	70 58       	ld.w	r8,r8[0x14]
80028efa:	e2 18 00 10 	andl	r8,0x10,COH
80028efe:	cf b0       	breq	80028ef4 <scif_wait_for_pll_locked+0x14>
80028f00:	c0 78       	rjmp	80028f0e <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80028f02:	fe 78 08 00 	mov	r8,-63488
80028f06:	70 58       	ld.w	r8,r8[0x14]
80028f08:	e2 18 00 20 	andl	r8,0x20,COH
80028f0c:	cf b0       	breq	80028f02 <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
80028f0e:	30 08       	mov	r8,0
}
80028f10:	10 9c       	mov	r12,r8
80028f12:	2f fd       	sub	sp,-4
80028f14:	e3 cd 80 80 	ldm	sp++,r7,pc

80028f18 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
80028f18:	eb cd 40 c0 	pushm	r6-r7,lr
80028f1c:	1a 97       	mov	r7,sp
80028f1e:	20 4d       	sub	sp,16
80028f20:	4a f6       	lddpc	r6,80028fdc <scif_start_osc32+0xc4>
80028f22:	1e 26       	rsub	r6,pc
80028f24:	ef 4c ff f4 	st.w	r7[-12],r12
80028f28:	16 98       	mov	r8,r11
80028f2a:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
80028f2e:	fe 78 08 00 	mov	r8,-63488
80028f32:	71 38       	ld.w	r8,r8[0x4c]
80028f34:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
80028f38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028f3c:	70 18       	ld.w	r8,r8[0x4]
80028f3e:	5c 58       	castu.b	r8
80028f40:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028f44:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f4c:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80028f50:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
80028f54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028f58:	f1 38 00 08 	ld.ub	r8,r8[8]
80028f5c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80028f60:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f68:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80028f6c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
80028f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f74:	30 19       	mov	r9,1
80028f76:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028f7a:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
80028f7e:	e1 b8 00 00 	mfsr	r8,0x0
80028f82:	10 9c       	mov	r12,r8
80028f84:	fe b0 fb 42 	rcall	80028608 <cpu_irq_is_enabled_flags>
80028f88:	18 98       	mov	r8,r12
80028f8a:	ef 68 ff ff 	st.b	r7[-1],r8
80028f8e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80028f90:	fe 78 08 00 	mov	r8,-63488
80028f94:	34 c9       	mov	r9,76
80028f96:	ea 19 aa 00 	orh	r9,0xaa00
80028f9a:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
80028f9c:	fe 78 08 00 	mov	r8,-63488
80028fa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028fa4:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028fa8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028fac:	30 08       	mov	r8,0
80028fae:	f0 09 18 00 	cp.b	r9,r8
80028fb2:	c0 20       	breq	80028fb6 <scif_start_osc32+0x9e>
80028fb4:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028fb6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028fba:	30 08       	mov	r8,0
80028fbc:	f0 09 18 00 	cp.b	r9,r8
80028fc0:	c0 90       	breq	80028fd2 <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
80028fc2:	30 4c       	mov	r12,4
80028fc4:	fe b0 fb 32 	rcall	80028628 <scif_pclksr_statushigh_wait>
80028fc8:	18 98       	mov	r8,r12
80028fca:	58 08       	cp.w	r8,0
80028fcc:	c0 30       	breq	80028fd2 <scif_start_osc32+0xba>
      return -1;
80028fce:	3f f8       	mov	r8,-1
80028fd0:	c0 28       	rjmp	80028fd4 <scif_start_osc32+0xbc>
  }
  
  return PASS;
80028fd2:	30 08       	mov	r8,0
}
80028fd4:	10 9c       	mov	r12,r8
80028fd6:	2f cd       	sub	sp,-16
80028fd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028fdc:	80 02       	ld.sh	r2,r0[0x0]
80028fde:	8d a6       	st.w	r6[0x28],r6

80028fe0 <scif_stop_osc32>:


long scif_stop_osc32()
{
80028fe0:	eb cd 40 c0 	pushm	r6-r7,lr
80028fe4:	1a 97       	mov	r7,sp
80028fe6:	20 2d       	sub	sp,8
80028fe8:	49 76       	lddpc	r6,80029044 <scif_stop_osc32+0x64>
80028fea:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
80028fec:	fe 78 08 00 	mov	r8,-63488
80028ff0:	71 38       	ld.w	r8,r8[0x4c]
80028ff2:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
80028ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ffa:	a1 c8       	cbr	r8,0x0
80028ffc:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029000:	e1 b8 00 00 	mfsr	r8,0x0
80029004:	10 9c       	mov	r12,r8
80029006:	fe b0 fb 01 	rcall	80028608 <cpu_irq_is_enabled_flags>
8002900a:	18 98       	mov	r8,r12
8002900c:	ef 68 ff ff 	st.b	r7[-1],r8
80029010:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80029012:	fe 78 08 00 	mov	r8,-63488
80029016:	34 c9       	mov	r9,76
80029018:	ea 19 aa 00 	orh	r9,0xaa00
8002901c:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
8002901e:	fe 78 08 00 	mov	r8,-63488
80029022:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029026:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002902a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002902e:	30 08       	mov	r8,0
80029030:	f0 09 18 00 	cp.b	r9,r8
80029034:	c0 20       	breq	80029038 <scif_stop_osc32+0x58>
80029036:	d5 03       	csrf	0x10

  return PASS;
80029038:	30 08       	mov	r8,0
}
8002903a:	10 9c       	mov	r12,r8
8002903c:	2f ed       	sub	sp,-8
8002903e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029042:	00 00       	add	r0,r0
80029044:	80 02       	ld.sh	r2,r0[0x0]
80029046:	8e 6e       	ld.sh	lr,r7[0xc]

80029048 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80029048:	eb cd 40 c0 	pushm	r6-r7,lr
8002904c:	1a 97       	mov	r7,sp
8002904e:	20 2d       	sub	sp,8
80029050:	49 66       	lddpc	r6,800290a8 <scif_start_rc8M+0x60>
80029052:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80029054:	e0 68 02 00 	mov	r8,512
80029058:	ea 18 80 80 	orh	r8,0x8080
8002905c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80029060:	e1 b8 00 00 	mfsr	r8,0x0
80029064:	10 9c       	mov	r12,r8
80029066:	fe b0 fa d1 	rcall	80028608 <cpu_irq_is_enabled_flags>
8002906a:	18 98       	mov	r8,r12
8002906c:	ef 68 ff ff 	st.b	r7[-1],r8
80029070:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80029072:	fe 78 08 00 	mov	r8,-63488
80029076:	34 89       	mov	r9,72
80029078:	ea 19 aa 00 	orh	r9,0xaa00
8002907c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002907e:	fe 78 08 00 	mov	r8,-63488
80029082:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029086:	72 09       	ld.w	r9,r9[0x0]
80029088:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
8002908c:	b9 a9       	sbr	r9,0x18
8002908e:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029092:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029096:	30 08       	mov	r8,0
80029098:	f0 09 18 00 	cp.b	r9,r8
8002909c:	c0 20       	breq	800290a0 <scif_start_rc8M+0x58>
8002909e:	d5 03       	csrf	0x10
}
800290a0:	2f ed       	sub	sp,-8
800290a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800290a6:	00 00       	add	r0,r0
800290a8:	80 02       	ld.sh	r2,r0[0x0]
800290aa:	8e d6       	ld.uh	r6,r7[0xa]

800290ac <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
800290ac:	eb cd 40 c0 	pushm	r6-r7,lr
800290b0:	1a 97       	mov	r7,sp
800290b2:	20 2d       	sub	sp,8
800290b4:	49 66       	lddpc	r6,8002910c <scif_stop_rc8M+0x60>
800290b6:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
800290b8:	fe 78 08 00 	mov	r8,-63488
800290bc:	71 28       	ld.w	r8,r8[0x48]
800290be:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
800290c2:	e1 b8 00 00 	mfsr	r8,0x0
800290c6:	10 9c       	mov	r12,r8
800290c8:	fe b0 fa a0 	rcall	80028608 <cpu_irq_is_enabled_flags>
800290cc:	18 98       	mov	r8,r12
800290ce:	ef 68 ff ff 	st.b	r7[-1],r8
800290d2:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
800290d4:	fe 78 08 00 	mov	r8,-63488
800290d8:	34 89       	mov	r9,72
800290da:	ea 19 aa 00 	orh	r9,0xaa00
800290de:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
800290e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800290e4:	b9 c8       	cbr	r8,0x18
800290e6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
800290ea:	fe 78 08 00 	mov	r8,-63488
800290ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800290f2:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800290f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290fa:	30 08       	mov	r8,0
800290fc:	f0 09 18 00 	cp.b	r9,r8
80029100:	c0 20       	breq	80029104 <scif_stop_rc8M+0x58>
80029102:	d5 03       	csrf	0x10
}
80029104:	2f ed       	sub	sp,-8
80029106:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002910a:	00 00       	add	r0,r0
8002910c:	80 02       	ld.sh	r2,r0[0x0]
8002910e:	8f 3a       	st.w	r7[0xc],r10

80029110 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80029110:	eb cd 40 c0 	pushm	r6-r7,lr
80029114:	1a 97       	mov	r7,sp
80029116:	20 1d       	sub	sp,4
80029118:	49 06       	lddpc	r6,80029158 <scif_start_rc120M+0x48>
8002911a:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
8002911c:	e1 b8 00 00 	mfsr	r8,0x0
80029120:	10 9c       	mov	r12,r8
80029122:	fe b0 fa 73 	rcall	80028608 <cpu_irq_is_enabled_flags>
80029126:	18 98       	mov	r8,r12
80029128:	ef 68 ff ff 	st.b	r7[-1],r8
8002912c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002912e:	fe 78 08 00 	mov	r8,-63488
80029132:	35 89       	mov	r9,88
80029134:	ea 19 aa 00 	orh	r9,0xaa00
80029138:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8002913a:	fe 78 08 00 	mov	r8,-63488
8002913e:	30 19       	mov	r9,1
80029140:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029144:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029148:	30 08       	mov	r8,0
8002914a:	f0 09 18 00 	cp.b	r9,r8
8002914e:	c0 20       	breq	80029152 <scif_start_rc120M+0x42>
80029150:	d5 03       	csrf	0x10
}
80029152:	2f fd       	sub	sp,-4
80029154:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029158:	80 02       	ld.sh	r2,r0[0x0]
8002915a:	8f 9e       	st.w	r7[0x24],lr

8002915c <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
8002915c:	eb cd 40 c0 	pushm	r6-r7,lr
80029160:	1a 97       	mov	r7,sp
80029162:	20 2d       	sub	sp,8
80029164:	49 66       	lddpc	r6,800291bc <scif_stop_rc120M+0x60>
80029166:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
80029168:	fe 78 08 00 	mov	r8,-63488
8002916c:	71 68       	ld.w	r8,r8[0x58]
8002916e:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029172:	e1 b8 00 00 	mfsr	r8,0x0
80029176:	10 9c       	mov	r12,r8
80029178:	fe b0 fa 48 	rcall	80028608 <cpu_irq_is_enabled_flags>
8002917c:	18 98       	mov	r8,r12
8002917e:	ef 68 ff ff 	st.b	r7[-1],r8
80029182:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80029184:	fe 78 08 00 	mov	r8,-63488
80029188:	35 89       	mov	r9,88
8002918a:	ea 19 aa 00 	orh	r9,0xaa00
8002918e:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
80029190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029194:	a1 c8       	cbr	r8,0x0
80029196:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
8002919a:	fe 78 08 00 	mov	r8,-63488
8002919e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800291a2:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800291a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800291aa:	30 08       	mov	r8,0
800291ac:	f0 09 18 00 	cp.b	r9,r8
800291b0:	c0 20       	breq	800291b4 <scif_stop_rc120M+0x58>
800291b2:	d5 03       	csrf	0x10
}
800291b4:	2f ed       	sub	sp,-8
800291b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291ba:	00 00       	add	r0,r0
800291bc:	80 02       	ld.sh	r2,r0[0x0]
800291be:	8f ea       	st.w	r7[0x38],r10

800291c0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800291c0:	eb cd 40 80 	pushm	r7,lr
800291c4:	1a 97       	mov	r7,sp
800291c6:	20 2d       	sub	sp,8
800291c8:	ef 4c ff fc 	st.w	r7[-4],r12
800291cc:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800291d0:	fe 78 08 00 	mov	r8,-63488
800291d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800291d8:	2e 79       	sub	r9,-25
800291da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800291de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800291e2:	5c 58       	castu.b	r8
800291e4:	c0 30       	breq	800291ea <scif_start_gclk+0x2a>
    return -1;
800291e6:	3f f8       	mov	r8,-1
800291e8:	c2 08       	rjmp	80029228 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800291ea:	fe 78 08 00 	mov	r8,-63488
800291ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800291f2:	ee fa ff f8 	ld.w	r10,r7[-8]
800291f6:	74 1a       	ld.w	r10,r10[0x4]
800291f8:	b1 6a       	lsl	r10,0x10
800291fa:	14 9b       	mov	r11,r10
800291fc:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80029200:	ee fa ff f8 	ld.w	r10,r7[-8]
80029204:	74 2a       	ld.w	r10,r10[0x8]
80029206:	a1 7a       	lsl	r10,0x1
80029208:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002920c:	14 4b       	or	r11,r10
8002920e:	ee fa ff f8 	ld.w	r10,r7[-8]
80029212:	74 0a       	ld.w	r10,r10[0x0]
80029214:	a9 6a       	lsl	r10,0x8
80029216:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8002921a:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002921e:	a1 aa       	sbr	r10,0x0
80029220:	2e 79       	sub	r9,-25
80029222:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80029226:	30 08       	mov	r8,0
}
80029228:	10 9c       	mov	r12,r8
8002922a:	2f ed       	sub	sp,-8
8002922c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029230 <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
80029230:	eb cd 40 80 	pushm	r7,lr
80029234:	1a 97       	mov	r7,sp
80029236:	20 2d       	sub	sp,8
80029238:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002923c:	e0 78 86 a0 	mov	r8,100000
80029240:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80029244:	fe 78 08 00 	mov	r8,-63488
80029248:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002924c:	fe 7a 08 00 	mov	r10,-63488
80029250:	ee fb ff f8 	ld.w	r11,r7[-8]
80029254:	2e 7b       	sub	r11,-25
80029256:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002925a:	a1 ca       	cbr	r10,0x0
8002925c:	2e 79       	sub	r9,-25
8002925e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80029262:	c0 c8       	rjmp	8002927a <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
80029264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029268:	20 18       	sub	r8,1
8002926a:	ef 48 ff fc 	st.w	r7[-4],r8
8002926e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029272:	58 08       	cp.w	r8,0
80029274:	c0 31       	brne	8002927a <scif_stop_gclk+0x4a>
      return -1;
80029276:	3f f8       	mov	r8,-1
80029278:	c0 d8       	rjmp	80029292 <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002927a:	fe 78 08 00 	mov	r8,-63488
8002927e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029282:	2e 79       	sub	r9,-25
80029284:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80029288:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002928c:	5c 58       	castu.b	r8
8002928e:	ce b1       	brne	80029264 <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
80029290:	30 08       	mov	r8,0
}
80029292:	10 9c       	mov	r12,r8
80029294:	2f ed       	sub	sp,-8
80029296:	e3 cd 80 80 	ldm	sp++,r7,pc

8002929a <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
8002929a:	eb cd 40 c0 	pushm	r6-r7,lr
8002929e:	1a 97       	mov	r7,sp
800292a0:	20 5d       	sub	sp,20
800292a2:	4a f6       	lddpc	r6,8002935c <scif_gc_setup+0xc2>
800292a4:	1e 26       	rsub	r6,pc
800292a6:	ef 4c ff f8 	st.w	r7[-8],r12
800292aa:	ef 4b ff f4 	st.w	r7[-12],r11
800292ae:	ef 4a ff f0 	st.w	r7[-16],r10
800292b2:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
800292b6:	30 08       	mov	r8,0
800292b8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
800292bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800292c0:	a1 98       	lsr	r8,0x1
800292c2:	20 18       	sub	r8,1
800292c4:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800292c8:	fe 78 08 00 	mov	r8,-63488
800292cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800292d0:	2e 79       	sub	r9,-25
800292d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800292d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800292da:	5c 58       	castu.b	r8
800292dc:	c0 d0       	breq	800292f6 <scif_gc_setup+0x5c>
  {
    restart_gc = true;
800292de:	30 18       	mov	r8,1
800292e0:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
800292e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800292e8:	f0 16 02 14 	mcall	r6[2128]
800292ec:	18 98       	mov	r8,r12
800292ee:	58 08       	cp.w	r8,0
800292f0:	c0 34       	brge	800292f6 <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
800292f2:	3f f8       	mov	r8,-1
800292f4:	c2 f8       	rjmp	80029352 <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800292f6:	fe 78 08 00 	mov	r8,-63488
800292fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800292fe:	ee fa ff ec 	ld.w	r10,r7[-20]
80029302:	b1 6a       	lsl	r10,0x10
80029304:	14 9b       	mov	r11,r10
80029306:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8002930a:	ee fa ff f0 	ld.w	r10,r7[-16]
8002930e:	a1 7a       	lsl	r10,0x1
80029310:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
80029314:	14 4b       	or	r11,r10
80029316:	ee fa ff f4 	ld.w	r10,r7[-12]
8002931a:	a9 6a       	lsl	r10,0x8
8002931c:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80029320:	f7 ea 10 0a 	or	r10,r11,r10
80029324:	2e 79       	sub	r9,-25
80029326:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
8002932a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002932e:	58 18       	cp.w	r8,1
80029330:	c1 01       	brne	80029350 <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
80029332:	fe 78 08 00 	mov	r8,-63488
80029336:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002933a:	fe 7a 08 00 	mov	r10,-63488
8002933e:	ee fb ff f8 	ld.w	r11,r7[-8]
80029342:	2e 7b       	sub	r11,-25
80029344:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029348:	a1 aa       	sbr	r10,0x0
8002934a:	2e 79       	sub	r9,-25
8002934c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
80029350:	30 08       	mov	r8,0
}
80029352:	10 9c       	mov	r12,r8
80029354:	2f bd       	sub	sp,-20
80029356:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002935a:	00 00       	add	r0,r0
8002935c:	80 02       	ld.sh	r2,r0[0x0]
8002935e:	91 28       	st.w	r8[0x8],r8

80029360 <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
80029360:	eb cd 40 80 	pushm	r7,lr
80029364:	1a 97       	mov	r7,sp
80029366:	20 1d       	sub	sp,4
80029368:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
8002936c:	fe 78 08 00 	mov	r8,-63488
80029370:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029374:	2e 79       	sub	r9,-25
80029376:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002937a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002937e:	c1 01       	brne	8002939e <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
80029380:	fe 78 08 00 	mov	r8,-63488
80029384:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029388:	fe 7a 08 00 	mov	r10,-63488
8002938c:	ee fb ff fc 	ld.w	r11,r7[-4]
80029390:	2e 7b       	sub	r11,-25
80029392:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029396:	a1 aa       	sbr	r10,0x0
80029398:	2e 79       	sub	r9,-25
8002939a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
8002939e:	30 08       	mov	r8,0

}
800293a0:	10 9c       	mov	r12,r8
800293a2:	2f fd       	sub	sp,-4
800293a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800293a8 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
800293a8:	eb cd 40 80 	pushm	r7,lr
800293ac:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
800293ae:	fe 78 08 00 	mov	r8,-63488
800293b2:	34 09       	mov	r9,64
800293b4:	91 09       	st.w	r8[0x0],r9
}
800293b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800293ba <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
800293ba:	eb cd 40 c0 	pushm	r6-r7,lr
800293be:	1a 97       	mov	r7,sp
800293c0:	20 1d       	sub	sp,4
800293c2:	49 26       	lddpc	r6,80029408 <scif_bod18_disable_irq+0x4e>
800293c4:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800293c6:	e1 b8 00 00 	mfsr	r8,0x0
800293ca:	10 9c       	mov	r12,r8
800293cc:	fe b0 f9 1e 	rcall	80028608 <cpu_irq_is_enabled_flags>
800293d0:	18 98       	mov	r8,r12
800293d2:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800293d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800293da:	30 08       	mov	r8,0
800293dc:	f0 09 18 00 	cp.b	r9,r8
800293e0:	c0 20       	breq	800293e4 <scif_bod18_disable_irq+0x2a>
800293e2:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
800293e4:	fe 78 08 00 	mov	r8,-63488
800293e8:	34 09       	mov	r9,64
800293ea:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800293ec:	fe 78 08 00 	mov	r8,-63488
800293f0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800293f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800293f6:	30 08       	mov	r8,0
800293f8:	f0 09 18 00 	cp.b	r9,r8
800293fc:	c0 20       	breq	80029400 <scif_bod18_disable_irq+0x46>
800293fe:	d5 03       	csrf	0x10
}
80029400:	2f fd       	sub	sp,-4
80029402:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029406:	00 00       	add	r0,r0
80029408:	80 02       	ld.sh	r2,r0[0x0]
8002940a:	92 48       	ld.sh	r8,r9[0x8]

8002940c <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
8002940c:	eb cd 40 80 	pushm	r7,lr
80029410:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
80029412:	fe 78 08 00 	mov	r8,-63488
80029416:	34 09       	mov	r9,64
80029418:	91 49       	st.w	r8[0x10],r9
}
8002941a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002941e <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
8002941e:	eb cd 40 80 	pushm	r7,lr
80029422:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
80029424:	fe 78 08 00 	mov	r8,-63488
80029428:	70 38       	ld.w	r8,r8[0xc]
8002942a:	e2 18 00 40 	andl	r8,0x40,COH
8002942e:	5f 18       	srne	r8
}
80029430:	10 9c       	mov	r12,r8
80029432:	e3 cd 80 80 	ldm	sp++,r7,pc

80029436 <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
80029436:	eb cd 40 80 	pushm	r7,lr
8002943a:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
8002943c:	fe 78 08 00 	mov	r8,-63488
80029440:	70 28       	ld.w	r8,r8[0x8]
80029442:	e2 18 00 40 	andl	r8,0x40,COH
80029446:	5f 18       	srne	r8
}
80029448:	10 9c       	mov	r12,r8
8002944a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002944e <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
8002944e:	eb cd 40 80 	pushm	r7,lr
80029452:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
80029454:	fe 78 08 00 	mov	r8,-63488
80029458:	70 b8       	ld.w	r8,r8[0x2c]
8002945a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002945e:	10 9c       	mov	r12,r8
80029460:	e3 cd 80 80 	ldm	sp++,r7,pc

80029464 <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
80029464:	eb cd 40 80 	pushm	r7,lr
80029468:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
8002946a:	fe 78 08 00 	mov	r8,-63488
8002946e:	e0 69 00 80 	mov	r9,128
80029472:	91 09       	st.w	r8[0x0],r9
}
80029474:	e3 cd 80 80 	ldm	sp++,r7,pc

80029478 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
80029478:	eb cd 40 c0 	pushm	r6-r7,lr
8002947c:	1a 97       	mov	r7,sp
8002947e:	20 1d       	sub	sp,4
80029480:	49 26       	lddpc	r6,800294c8 <scif_bod33_disable_irq+0x50>
80029482:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029484:	e1 b8 00 00 	mfsr	r8,0x0
80029488:	10 9c       	mov	r12,r8
8002948a:	fe b0 f8 bf 	rcall	80028608 <cpu_irq_is_enabled_flags>
8002948e:	18 98       	mov	r8,r12
80029490:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029494:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029498:	30 08       	mov	r8,0
8002949a:	f0 09 18 00 	cp.b	r9,r8
8002949e:	c0 20       	breq	800294a2 <scif_bod33_disable_irq+0x2a>
800294a0:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
800294a2:	fe 78 08 00 	mov	r8,-63488
800294a6:	e0 69 00 80 	mov	r9,128
800294aa:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800294ac:	fe 78 08 00 	mov	r8,-63488
800294b0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800294b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800294b6:	30 08       	mov	r8,0
800294b8:	f0 09 18 00 	cp.b	r9,r8
800294bc:	c0 20       	breq	800294c0 <scif_bod33_disable_irq+0x48>
800294be:	d5 03       	csrf	0x10
}
800294c0:	2f fd       	sub	sp,-4
800294c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800294c6:	00 00       	add	r0,r0
800294c8:	80 02       	ld.sh	r2,r0[0x0]
800294ca:	93 06       	st.w	r9[0x0],r6

800294cc <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
800294cc:	eb cd 40 80 	pushm	r7,lr
800294d0:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
800294d2:	fe 78 08 00 	mov	r8,-63488
800294d6:	e0 69 00 80 	mov	r9,128
800294da:	91 49       	st.w	r8[0x10],r9
}
800294dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800294e0 <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
800294e0:	eb cd 40 80 	pushm	r7,lr
800294e4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
800294e6:	fe 78 08 00 	mov	r8,-63488
800294ea:	70 38       	ld.w	r8,r8[0xc]
800294ec:	e2 18 00 80 	andl	r8,0x80,COH
800294f0:	5f 18       	srne	r8
}
800294f2:	10 9c       	mov	r12,r8
800294f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800294f8 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
800294f8:	eb cd 40 80 	pushm	r7,lr
800294fc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
800294fe:	fe 78 08 00 	mov	r8,-63488
80029502:	70 28       	ld.w	r8,r8[0x8]
80029504:	e2 18 00 80 	andl	r8,0x80,COH
80029508:	5f 18       	srne	r8
}
8002950a:	10 9c       	mov	r12,r8
8002950c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029510 <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
80029510:	eb cd 40 80 	pushm	r7,lr
80029514:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
80029516:	fe 78 08 00 	mov	r8,-63488
8002951a:	70 d8       	ld.w	r8,r8[0x34]
8002951c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029520:	10 9c       	mov	r12,r8
80029522:	e3 cd 80 80 	ldm	sp++,r7,pc

80029526 <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
80029526:	eb cd 40 80 	pushm	r7,lr
8002952a:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
8002952c:	fe 78 08 00 	mov	r8,-63488
80029530:	e0 69 01 00 	mov	r9,256
80029534:	91 09       	st.w	r8[0x0],r9
}
80029536:	e3 cd 80 80 	ldm	sp++,r7,pc

8002953a <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
8002953a:	eb cd 40 c0 	pushm	r6-r7,lr
8002953e:	1a 97       	mov	r7,sp
80029540:	20 1d       	sub	sp,4
80029542:	49 26       	lddpc	r6,80029588 <scif_bod50_disable_irq+0x4e>
80029544:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029546:	e1 b8 00 00 	mfsr	r8,0x0
8002954a:	10 9c       	mov	r12,r8
8002954c:	fe b0 f8 5e 	rcall	80028608 <cpu_irq_is_enabled_flags>
80029550:	18 98       	mov	r8,r12
80029552:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029556:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002955a:	30 08       	mov	r8,0
8002955c:	f0 09 18 00 	cp.b	r9,r8
80029560:	c0 20       	breq	80029564 <scif_bod50_disable_irq+0x2a>
80029562:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
80029564:	fe 78 08 00 	mov	r8,-63488
80029568:	e0 69 01 00 	mov	r9,256
8002956c:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002956e:	fe 78 08 00 	mov	r8,-63488
80029572:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
80029574:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029578:	30 08       	mov	r8,0
8002957a:	f0 09 18 00 	cp.b	r9,r8
8002957e:	c0 20       	breq	80029582 <scif_bod50_disable_irq+0x48>
80029580:	d5 03       	csrf	0x10
}
80029582:	2f fd       	sub	sp,-4
80029584:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029588:	80 02       	ld.sh	r2,r0[0x0]
8002958a:	93 c8       	st.w	r9[0x30],r8

8002958c <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
8002958c:	eb cd 40 80 	pushm	r7,lr
80029590:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
80029592:	fe 78 08 00 	mov	r8,-63488
80029596:	e0 69 01 00 	mov	r9,256
8002959a:	91 49       	st.w	r8[0x10],r9
}
8002959c:	e3 cd 80 80 	ldm	sp++,r7,pc

800295a0 <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
800295a0:	eb cd 40 80 	pushm	r7,lr
800295a4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
800295a6:	fe 78 08 00 	mov	r8,-63488
800295aa:	70 38       	ld.w	r8,r8[0xc]
800295ac:	e2 18 01 00 	andl	r8,0x100,COH
800295b0:	5f 18       	srne	r8
}
800295b2:	10 9c       	mov	r12,r8
800295b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800295b8 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
800295b8:	eb cd 40 80 	pushm	r7,lr
800295bc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
800295be:	fe 78 08 00 	mov	r8,-63488
800295c2:	70 28       	ld.w	r8,r8[0x8]
800295c4:	e2 18 01 00 	andl	r8,0x100,COH
800295c8:	5f 18       	srne	r8
}
800295ca:	10 9c       	mov	r12,r8
800295cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800295d0 <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
800295d0:	eb cd 40 80 	pushm	r7,lr
800295d4:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
800295d6:	fe 78 08 00 	mov	r8,-63488
800295da:	70 e8       	ld.w	r8,r8[0x38]
800295dc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
800295e0:	10 9c       	mov	r12,r8
800295e2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800295e8 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
800295e8:	eb cd 40 80 	pushm	r7,lr
800295ec:	1a 97       	mov	r7,sp
800295ee:	20 3d       	sub	sp,12
800295f0:	ef 4c ff f8 	st.w	r7[-8],r12
800295f4:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
800295f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800295fc:	f0 09 16 01 	lsr	r9,r8,0x1
80029600:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029604:	f2 08 00 08 	add	r8,r9,r8
80029608:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002960c:	f0 09 0d 08 	divu	r8,r8,r9
80029610:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
80029614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029618:	58 08       	cp.w	r8,0
8002961a:	e0 8a 00 08 	brle	8002962a <getBaudDiv+0x42>
8002961e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029622:	e0 48 00 ff 	cp.w	r8,255
80029626:	e0 8a 00 04 	brle	8002962e <getBaudDiv+0x46>
    return -1;
8002962a:	3f f8       	mov	r8,-1
8002962c:	c0 48       	rjmp	80029634 <getBaudDiv+0x4c>
  }

  return baudDiv;
8002962e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029632:	5c 88       	casts.h	r8
}
80029634:	10 9c       	mov	r12,r8
80029636:	2f dd       	sub	sp,-12
80029638:	e3 cd 80 80 	ldm	sp++,r7,pc

8002963c <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
8002963c:	eb cd 40 80 	pushm	r7,lr
80029640:	1a 97       	mov	r7,sp
80029642:	20 3d       	sub	sp,12
80029644:	ef 4c ff fc 	st.w	r7[-4],r12
80029648:	16 99       	mov	r9,r11
8002964a:	14 98       	mov	r8,r10
8002964c:	ef 69 ff f8 	st.b	r7[-8],r9
80029650:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
80029654:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029658:	30 38       	mov	r8,3
8002965a:	f0 09 18 00 	cp.b	r9,r8
8002965e:	e0 8b 00 10 	brhi	8002967e <spi_initSlave+0x42>
80029662:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029666:	30 78       	mov	r8,7
80029668:	f0 09 18 00 	cp.b	r9,r8
8002966c:	e0 88 00 09 	brls	8002967e <spi_initSlave+0x42>
80029670:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029674:	31 08       	mov	r8,16
80029676:	f0 09 18 00 	cp.b	r9,r8
8002967a:	e0 88 00 04 	brls	80029682 <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
8002967e:	30 28       	mov	r8,2
80029680:	c1 f8       	rjmp	800296be <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029686:	e0 69 00 80 	mov	r9,128
8002968a:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
8002968c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029690:	a1 98       	lsr	r8,0x1
80029692:	5c 58       	castu.b	r8
80029694:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
80029696:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002969a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002969e:	c0 31       	brne	800296a4 <spi_initSlave+0x68>
800296a0:	30 28       	mov	r8,2
800296a2:	c0 28       	rjmp	800296a6 <spi_initSlave+0x6a>
800296a4:	30 08       	mov	r8,0
800296a6:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
800296a8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800296ac:	20 88       	sub	r8,8
800296ae:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800296b0:	f3 e8 10 08 	or	r8,r9,r8
800296b4:	10 99       	mov	r9,r8
800296b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296ba:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
800296bc:	30 08       	mov	r8,0
}
800296be:	10 9c       	mov	r12,r8
800296c0:	2f dd       	sub	sp,-12
800296c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800296c6 <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
800296c6:	eb cd 40 80 	pushm	r7,lr
800296ca:	1a 97       	mov	r7,sp
800296cc:	20 1d       	sub	sp,4
800296ce:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800296d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296d6:	e0 69 00 80 	mov	r9,128
800296da:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
800296dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296e0:	70 18       	ld.w	r8,r8[0x4]
800296e2:	10 99       	mov	r9,r8
800296e4:	e8 19 00 81 	orl	r9,0x81
800296e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296ec:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
800296ee:	30 08       	mov	r8,0
}
800296f0:	10 9c       	mov	r12,r8
800296f2:	2f fd       	sub	sp,-4
800296f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800296f8 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
800296f8:	eb cd 40 80 	pushm	r7,lr
800296fc:	1a 97       	mov	r7,sp
800296fe:	20 3d       	sub	sp,12
80029700:	ef 4c ff f8 	st.w	r7[-8],r12
80029704:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80029708:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002970c:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029710:	30 18       	mov	r8,1
80029712:	f0 09 18 00 	cp.b	r9,r8
80029716:	e0 88 00 04 	brls	8002971e <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
8002971a:	30 28       	mov	r8,2
8002971c:	c3 48       	rjmp	80029784 <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002971e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029722:	e0 69 00 80 	mov	r9,128
80029726:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80029728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002972c:	70 18       	ld.w	r8,r8[0x4]
8002972e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
80029732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029736:	30 19       	mov	r9,1
80029738:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002973c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80029740:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029744:	f1 38 00 0d 	ld.ub	r8,r8[13]
80029748:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002974c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029754:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80029758:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
8002975c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029760:	30 09       	mov	r9,0
80029762:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80029766:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8002976a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002976e:	30 f9       	mov	r9,15
80029770:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80029774:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029778:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002977c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029780:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029782:	30 08       	mov	r8,0
}
80029784:	10 9c       	mov	r12,r8
80029786:	2f dd       	sub	sp,-12
80029788:	e3 cd 80 80 	ldm	sp++,r7,pc

8002978c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8002978c:	eb cd 40 80 	pushm	r7,lr
80029790:	1a 97       	mov	r7,sp
80029792:	20 5d       	sub	sp,20
80029794:	ef 4c ff f8 	st.w	r7[-8],r12
80029798:	12 98       	mov	r8,r9
8002979a:	16 99       	mov	r9,r11
8002979c:	ef 69 ff f4 	st.b	r7[-12],r9
800297a0:	14 99       	mov	r9,r10
800297a2:	ef 69 ff f0 	st.b	r7[-16],r9
800297a6:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800297aa:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800297ae:	30 18       	mov	r8,1
800297b0:	f0 09 18 00 	cp.b	r9,r8
800297b4:	e0 8b 00 09 	brhi	800297c6 <spi_selectionMode+0x3a>
800297b8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800297bc:	30 18       	mov	r8,1
800297be:	f0 09 18 00 	cp.b	r9,r8
800297c2:	e0 88 00 04 	brls	800297ca <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
800297c6:	30 28       	mov	r8,2
800297c8:	c2 88       	rjmp	80029818 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
800297ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800297ce:	70 18       	ld.w	r8,r8[0x4]
800297d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
800297d4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800297d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800297dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800297e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297e4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800297e8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800297ec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800297f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800297f4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800297f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297fc:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029800:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80029804:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029808:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
8002980c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029814:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029816:	30 08       	mov	r8,0
}
80029818:	10 9c       	mov	r12,r8
8002981a:	2f bd       	sub	sp,-20
8002981c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029820 <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029820:	eb cd 40 80 	pushm	r7,lr
80029824:	1a 97       	mov	r7,sp
80029826:	20 2d       	sub	sp,8
80029828:	ef 4c ff fc 	st.w	r7[-4],r12
8002982c:	16 98       	mov	r8,r11
8002982e:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029832:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029836:	70 18       	ld.w	r8,r8[0x4]
80029838:	10 99       	mov	r9,r8
8002983a:	ea 19 00 0f 	orh	r9,0xf
8002983e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029842:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80029844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029848:	70 18       	ld.w	r8,r8[0x4]
8002984a:	e2 18 00 04 	andl	r8,0x4,COH
8002984e:	c1 90       	breq	80029880 <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80029850:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029854:	30 e8       	mov	r8,14
80029856:	f0 09 18 00 	cp.b	r9,r8
8002985a:	e0 88 00 04 	brls	80029862 <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
8002985e:	30 28       	mov	r8,2
80029860:	c2 88       	rjmp	800298b0 <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80029862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029866:	70 19       	ld.w	r9,r8[0x4]
80029868:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002986c:	b1 68       	lsl	r8,0x10
8002986e:	ea 18 ff f0 	orh	r8,0xfff0
80029872:	e8 18 ff ff 	orl	r8,0xffff
80029876:	10 69       	and	r9,r8
80029878:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002987c:	91 19       	st.w	r8[0x4],r9
8002987e:	c1 88       	rjmp	800298ae <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
80029880:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029884:	30 38       	mov	r8,3
80029886:	f0 09 18 00 	cp.b	r9,r8
8002988a:	e0 88 00 04 	brls	80029892 <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
8002988e:	30 28       	mov	r8,2
80029890:	c1 08       	rjmp	800298b0 <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80029892:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029896:	70 19       	ld.w	r9,r8[0x4]
80029898:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002989c:	2f 08       	sub	r8,-16
8002989e:	30 1a       	mov	r10,1
800298a0:	f4 08 09 48 	lsl	r8,r10,r8
800298a4:	5c d8       	com	r8
800298a6:	10 69       	and	r9,r8
800298a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298ac:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
800298ae:	30 08       	mov	r8,0
}
800298b0:	10 9c       	mov	r12,r8
800298b2:	2f ed       	sub	sp,-8
800298b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800298b8 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800298b8:	eb cd 40 80 	pushm	r7,lr
800298bc:	1a 97       	mov	r7,sp
800298be:	20 3d       	sub	sp,12
800298c0:	ef 4c ff f8 	st.w	r7[-8],r12
800298c4:	16 98       	mov	r8,r11
800298c6:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800298ca:	e0 68 3a 98 	mov	r8,15000
800298ce:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800298d2:	c0 f8       	rjmp	800298f0 <spi_unselectChip+0x38>
    if (!timeout--) {
800298d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298d8:	58 08       	cp.w	r8,0
800298da:	5f 08       	sreq	r8
800298dc:	5c 58       	castu.b	r8
800298de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800298e2:	20 19       	sub	r9,1
800298e4:	ef 49 ff fc 	st.w	r7[-4],r9
800298e8:	58 08       	cp.w	r8,0
800298ea:	c0 30       	breq	800298f0 <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
800298ec:	30 18       	mov	r8,1
800298ee:	c1 68       	rjmp	8002991a <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800298f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298f4:	70 48       	ld.w	r8,r8[0x10]
800298f6:	e2 18 02 00 	andl	r8,0x200,COH
800298fa:	ce d0       	breq	800298d4 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800298fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029900:	70 18       	ld.w	r8,r8[0x4]
80029902:	10 99       	mov	r9,r8
80029904:	ea 19 00 0f 	orh	r9,0xf
80029908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002990c:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8002990e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029912:	fc 19 01 00 	movh	r9,0x100
80029916:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
80029918:	30 08       	mov	r8,0
}
8002991a:	10 9c       	mov	r12,r8
8002991c:	2f dd       	sub	sp,-12
8002991e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029922 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
80029922:	eb cd 40 c0 	pushm	r6-r7,lr
80029926:	1a 97       	mov	r7,sp
80029928:	20 5d       	sub	sp,20
8002992a:	4e 06       	lddpc	r6,80029aa8 <spi_setupChipReg+0x186>
8002992c:	1e 26       	rsub	r6,pc
8002992e:	ef 4c ff f4 	st.w	r7[-12],r12
80029932:	ef 4b ff f0 	st.w	r7[-16],r11
80029936:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002993a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002993e:	f1 39 00 0c 	ld.ub	r9,r8[12]
80029942:	30 38       	mov	r8,3
80029944:	f0 09 18 00 	cp.b	r9,r8
80029948:	e0 8b 00 1d 	brhi	80029982 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
8002994c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029950:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029954:	30 18       	mov	r8,1
80029956:	f0 09 18 00 	cp.b	r9,r8
8002995a:	e0 8b 00 14 	brhi	80029982 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8002995e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029962:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029966:	30 78       	mov	r8,7
80029968:	f0 09 18 00 	cp.b	r9,r8
8002996c:	e0 88 00 0b 	brls	80029982 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029970:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029974:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029978:	31 08       	mov	r8,16
8002997a:	f0 09 18 00 	cp.b	r9,r8
8002997e:	e0 88 00 04 	brls	80029986 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
80029982:	30 28       	mov	r8,2
80029984:	c8 d8       	rjmp	80029a9e <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
80029986:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002998a:	70 18       	ld.w	r8,r8[0x4]
8002998c:	ee fb ff ec 	ld.w	r11,r7[-20]
80029990:	10 9c       	mov	r12,r8
80029992:	f0 16 01 1b 	mcall	r6[1132]
80029996:	18 98       	mov	r8,r12
80029998:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
8002999c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299a0:	58 08       	cp.w	r8,0
800299a2:	c0 34       	brge	800299a8 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
800299a4:	30 28       	mov	r8,2
800299a6:	c7 c8       	rjmp	80029a9e <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800299a8:	30 08       	mov	r8,0
800299aa:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800299ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800299b2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800299b6:	a1 98       	lsr	r8,0x1
800299b8:	5c 58       	castu.b	r8
800299ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800299be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800299c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800299c6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800299ca:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800299ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800299d2:	f1 38 00 0c 	ld.ub	r8,r8[12]
800299d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800299da:	5f 08       	sreq	r8
800299dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800299e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800299e4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800299e8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800299ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800299f0:	f1 38 00 0b 	ld.ub	r8,r8[11]
800299f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800299f8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800299fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a00:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80029a04:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80029a08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a0c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029a10:	20 88       	sub	r8,8
80029a12:	5c 58       	castu.b	r8
80029a14:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029a18:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029a20:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80029a24:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80029a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a2c:	5c 58       	castu.b	r8
80029a2e:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80029a32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a36:	f1 38 00 09 	ld.ub	r8,r8[9]
80029a3a:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80029a3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a42:	f1 38 00 0a 	ld.ub	r8,r8[10]
80029a46:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
80029a4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a4e:	11 88       	ld.ub	r8,r8[0x0]
80029a50:	58 18       	cp.w	r8,1
80029a52:	c1 10       	breq	80029a74 <spi_setupChipReg+0x152>
80029a54:	e0 89 00 05 	brgt	80029a5e <spi_setupChipReg+0x13c>
80029a58:	58 08       	cp.w	r8,0
80029a5a:	c0 70       	breq	80029a68 <spi_setupChipReg+0x146>
80029a5c:	c1 e8       	rjmp	80029a98 <spi_setupChipReg+0x176>
80029a5e:	58 28       	cp.w	r8,2
80029a60:	c1 00       	breq	80029a80 <spi_setupChipReg+0x15e>
80029a62:	58 38       	cp.w	r8,3
80029a64:	c1 40       	breq	80029a8c <spi_setupChipReg+0x16a>
80029a66:	c1 98       	rjmp	80029a98 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80029a68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029a6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029a70:	91 c9       	st.w	r8[0x30],r9
      break;
80029a72:	c1 58       	rjmp	80029a9c <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80029a74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029a78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029a7c:	91 d9       	st.w	r8[0x34],r9
      break;
80029a7e:	c0 f8       	rjmp	80029a9c <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80029a80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029a84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029a88:	91 e9       	st.w	r8[0x38],r9
      break;
80029a8a:	c0 98       	rjmp	80029a9c <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80029a8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029a90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029a94:	91 f9       	st.w	r8[0x3c],r9
      break;
80029a96:	c0 38       	rjmp	80029a9c <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
80029a98:	30 28       	mov	r8,2
80029a9a:	c0 28       	rjmp	80029a9e <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
80029a9c:	30 08       	mov	r8,0
}
80029a9e:	10 9c       	mov	r12,r8
80029aa0:	2f bd       	sub	sp,-20
80029aa2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029aa6:	00 00       	add	r0,r0
80029aa8:	80 02       	ld.sh	r2,r0[0x0]
80029aaa:	97 b0       	st.w	r11[0x2c],r0

80029aac <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80029aac:	eb cd 40 80 	pushm	r7,lr
80029ab0:	1a 97       	mov	r7,sp
80029ab2:	20 1d       	sub	sp,4
80029ab4:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80029ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029abc:	30 19       	mov	r9,1
80029abe:	91 09       	st.w	r8[0x0],r9
}
80029ac0:	2f fd       	sub	sp,-4
80029ac2:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ac6 <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
80029ac6:	eb cd 40 80 	pushm	r7,lr
80029aca:	1a 97       	mov	r7,sp
80029acc:	20 1d       	sub	sp,4
80029ace:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
80029ad2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ad6:	30 29       	mov	r9,2
80029ad8:	91 09       	st.w	r8[0x0],r9
}
80029ada:	2f fd       	sub	sp,-4
80029adc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ae0 <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
80029ae0:	eb cd 40 80 	pushm	r7,lr
80029ae4:	1a 97       	mov	r7,sp
80029ae6:	20 1d       	sub	sp,4
80029ae8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
80029aec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029af0:	70 48       	ld.w	r8,r8[0x10]
80029af2:	e6 18 00 01 	andh	r8,0x1,COH
80029af6:	5f 18       	srne	r8
}
80029af8:	10 9c       	mov	r12,r8
80029afa:	2f fd       	sub	sp,-4
80029afc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b00 <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
80029b00:	eb cd 40 80 	pushm	r7,lr
80029b04:	1a 97       	mov	r7,sp
80029b06:	20 1d       	sub	sp,4
80029b08:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
80029b0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b10:	70 48       	ld.w	r8,r8[0x10]
80029b12:	e2 18 00 02 	andl	r8,0x2,COH
80029b16:	5f 18       	srne	r8
}
80029b18:	10 9c       	mov	r12,r8
80029b1a:	2f fd       	sub	sp,-4
80029b1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b20 <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80029b20:	eb cd 40 80 	pushm	r7,lr
80029b24:	1a 97       	mov	r7,sp
80029b26:	20 3d       	sub	sp,12
80029b28:	ef 4c ff f8 	st.w	r7[-8],r12
80029b2c:	16 98       	mov	r8,r11
80029b2e:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029b32:	e0 68 3a 98 	mov	r8,15000
80029b36:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029b3a:	c0 f8       	rjmp	80029b58 <spi_write+0x38>
    if (!timeout--) {
80029b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b40:	58 08       	cp.w	r8,0
80029b42:	5f 08       	sreq	r8
80029b44:	5c 58       	castu.b	r8
80029b46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029b4a:	20 19       	sub	r9,1
80029b4c:	ef 49 ff fc 	st.w	r7[-4],r9
80029b50:	58 08       	cp.w	r8,0
80029b52:	c0 30       	breq	80029b58 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
80029b54:	30 18       	mov	r8,1
80029b56:	c0 d8       	rjmp	80029b70 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b5c:	70 48       	ld.w	r8,r8[0x10]
80029b5e:	e2 18 00 02 	andl	r8,0x2,COH
80029b62:	ce d0       	breq	80029b3c <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80029b64:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b6c:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
80029b6e:	30 08       	mov	r8,0
}
80029b70:	10 9c       	mov	r12,r8
80029b72:	2f dd       	sub	sp,-12
80029b74:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b78 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
80029b78:	eb cd 40 80 	pushm	r7,lr
80029b7c:	1a 97       	mov	r7,sp
80029b7e:	20 5d       	sub	sp,20
80029b80:	ef 4c ff f8 	st.w	r7[-8],r12
80029b84:	12 98       	mov	r8,r9
80029b86:	16 99       	mov	r9,r11
80029b88:	ef 59 ff f4 	st.h	r7[-12],r9
80029b8c:	14 99       	mov	r9,r10
80029b8e:	ef 69 ff f0 	st.b	r7[-16],r9
80029b92:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
80029b96:	e0 68 3a 98 	mov	r8,15000
80029b9a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
80029b9e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029ba2:	30 e8       	mov	r8,14
80029ba4:	f0 09 18 00 	cp.b	r9,r8
80029ba8:	e0 8b 00 09 	brhi	80029bba <spi_variableSlaveWrite+0x42>
80029bac:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029bb0:	30 18       	mov	r8,1
80029bb2:	f0 09 18 00 	cp.b	r9,r8
80029bb6:	e0 88 00 12 	brls	80029bda <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
80029bba:	30 28       	mov	r8,2
80029bbc:	c2 68       	rjmp	80029c08 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80029bbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bc2:	58 08       	cp.w	r8,0
80029bc4:	5f 08       	sreq	r8
80029bc6:	5c 58       	castu.b	r8
80029bc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029bcc:	20 19       	sub	r9,1
80029bce:	ef 49 ff fc 	st.w	r7[-4],r9
80029bd2:	58 08       	cp.w	r8,0
80029bd4:	c0 40       	breq	80029bdc <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
80029bd6:	30 18       	mov	r8,1
80029bd8:	c1 88       	rjmp	80029c08 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029bda:	d7 03       	nop
80029bdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029be0:	70 48       	ld.w	r8,r8[0x10]
80029be2:	e2 18 00 02 	andl	r8,0x2,COH
80029be6:	ce c0       	breq	80029bbe <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029be8:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
80029bec:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029bf0:	b1 68       	lsl	r8,0x10
80029bf2:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
80029bf4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029bf8:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029bfa:	f3 e8 10 08 	or	r8,r9,r8
80029bfe:	10 99       	mov	r9,r8
80029c00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c04:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
80029c06:	30 08       	mov	r8,0
}
80029c08:	10 9c       	mov	r12,r8
80029c0a:	2f bd       	sub	sp,-20
80029c0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c10 <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
80029c10:	eb cd 40 80 	pushm	r7,lr
80029c14:	1a 97       	mov	r7,sp
80029c16:	20 1d       	sub	sp,4
80029c18:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
80029c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c20:	70 48       	ld.w	r8,r8[0x10]
80029c22:	e2 18 02 00 	andl	r8,0x200,COH
80029c26:	5f 18       	srne	r8
}
80029c28:	10 9c       	mov	r12,r8
80029c2a:	2f fd       	sub	sp,-4
80029c2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c30 <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
80029c30:	eb cd 40 80 	pushm	r7,lr
80029c34:	1a 97       	mov	r7,sp
80029c36:	20 1d       	sub	sp,4
80029c38:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80029c3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c40:	70 48       	ld.w	r8,r8[0x10]
80029c42:	5c 58       	castu.b	r8
80029c44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80029c48:	10 9c       	mov	r12,r8
80029c4a:	2f fd       	sub	sp,-4
80029c4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c50 <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80029c50:	eb cd 40 80 	pushm	r7,lr
80029c54:	1a 97       	mov	r7,sp
80029c56:	20 3d       	sub	sp,12
80029c58:	ef 4c ff f8 	st.w	r7[-8],r12
80029c5c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80029c60:	e0 68 3a 98 	mov	r8,15000
80029c64:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029c68:	c0 f8       	rjmp	80029c86 <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80029c6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c6e:	58 08       	cp.w	r8,0
80029c70:	5f 08       	sreq	r8
80029c72:	5c 58       	castu.b	r8
80029c74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029c78:	20 19       	sub	r9,1
80029c7a:	ef 49 ff fc 	st.w	r7[-4],r9
80029c7e:	58 08       	cp.w	r8,0
80029c80:	c0 30       	breq	80029c86 <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
80029c82:	30 18       	mov	r8,1
80029c84:	c1 18       	rjmp	80029ca6 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80029c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c8a:	70 48       	ld.w	r8,r8[0x10]
80029c8c:	e2 18 02 01 	andl	r8,0x201,COH
80029c90:	e0 48 02 01 	cp.w	r8,513
80029c94:	ce b1       	brne	80029c6a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80029c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c9a:	70 28       	ld.w	r8,r8[0x8]
80029c9c:	5c 88       	casts.h	r8
80029c9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029ca2:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
80029ca4:	30 08       	mov	r8,0
}
80029ca6:	10 9c       	mov	r12,r8
80029ca8:	2f dd       	sub	sp,-12
80029caa:	e3 cd 80 80 	ldm	sp++,r7,pc

80029cae <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
80029cae:	eb cd 40 80 	pushm	r7,lr
80029cb2:	1a 97       	mov	r7,sp
80029cb4:	20 3d       	sub	sp,12
80029cb6:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
80029cba:	30 08       	mov	r8,0
80029cbc:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
80029cc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029cc4:	70 48       	ld.w	r8,r8[0x10]
80029cc6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
80029cca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cce:	e2 18 00 08 	andl	r8,0x8,COH
80029cd2:	c0 40       	breq	80029cda <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
80029cd4:	30 38       	mov	r8,3
80029cd6:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
80029cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cde:	e2 18 00 04 	andl	r8,0x4,COH
80029ce2:	c0 60       	breq	80029cee <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
80029ce4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ce8:	2f c8       	sub	r8,-4
80029cea:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
80029cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cf2:	58 78       	cp.w	r8,7
80029cf4:	c0 31       	brne	80029cfa <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
80029cf6:	30 58       	mov	r8,5
80029cf8:	c0 b8       	rjmp	80029d0e <spi_getStatus+0x60>
  }
  else if (ret > 0) {
80029cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cfe:	58 08       	cp.w	r8,0
80029d00:	e0 8a 00 06 	brle	80029d0c <spi_getStatus+0x5e>
    return ret;
80029d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d08:	5c 58       	castu.b	r8
80029d0a:	c0 28       	rjmp	80029d0e <spi_getStatus+0x60>
  } else {
    return SPI_OK;
80029d0c:	30 08       	mov	r8,0
  }
}
80029d0e:	10 9c       	mov	r12,r8
80029d10:	2f dd       	sub	sp,-12
80029d12:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029d18 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80029d18:	eb cd 40 80 	pushm	r7,lr
80029d1c:	1a 97       	mov	r7,sp
80029d1e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80029d20:	e1 b8 00 00 	mfsr	r8,0x0
80029d24:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80029d28:	d3 03       	ssrf	0x10

	return flags;
80029d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80029d2e:	10 9c       	mov	r12,r8
80029d30:	2f fd       	sub	sp,-4
80029d32:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d36 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80029d36:	eb cd 40 80 	pushm	r7,lr
80029d3a:	1a 97       	mov	r7,sp
80029d3c:	20 1d       	sub	sp,4
80029d3e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80029d42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d46:	e6 18 00 01 	andh	r8,0x1,COH
80029d4a:	5f 08       	sreq	r8
80029d4c:	5c 58       	castu.b	r8
}
80029d4e:	10 9c       	mov	r12,r8
80029d50:	2f fd       	sub	sp,-4
80029d52:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d56 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80029d56:	eb cd 40 80 	pushm	r7,lr
80029d5a:	1a 97       	mov	r7,sp
80029d5c:	20 1d       	sub	sp,4
80029d5e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80029d62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d66:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80029d6a:	2f fd       	sub	sp,-4
80029d6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d70 <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029d70:	eb cd 40 c0 	pushm	r6-r7,lr
80029d74:	1a 97       	mov	r7,sp
80029d76:	20 1d       	sub	sp,4
80029d78:	4d 96       	lddpc	r6,80029edc <twim_master_interrupt_handler+0x16c>
80029d7a:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029d7c:	ec f8 00 40 	ld.w	r8,r6[64]
80029d80:	70 08       	ld.w	r8,r8[0x0]
80029d82:	70 79       	ld.w	r9,r8[0x1c]
80029d84:	ec f8 00 fc 	ld.w	r8,r6[252]
80029d88:	70 08       	ld.w	r8,r8[0x0]
80029d8a:	f3 e8 00 08 	and	r8,r9,r8
80029d8e:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d96:	e2 18 07 00 	andl	r8,0x700,COH
80029d9a:	c2 30       	breq	80029de0 <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029da0:	e2 18 03 00 	andl	r8,0x300,COH
80029da4:	c0 30       	breq	80029daa <twim_master_interrupt_handler+0x3a>
80029da6:	3f c8       	mov	r8,-4
80029da8:	c0 28       	rjmp	80029dac <twim_master_interrupt_handler+0x3c>
80029daa:	3f e8       	mov	r8,-2
80029dac:	ec f9 00 70 	ld.w	r9,r6[112]
80029db0:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029db2:	ec f8 00 40 	ld.w	r8,r6[64]
80029db6:	70 09       	ld.w	r9,r8[0x0]
80029db8:	72 38       	ld.w	r8,r9[0xc]
80029dba:	30 0a       	mov	r10,0
80029dbc:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029dc0:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029dc2:	ec f8 00 40 	ld.w	r8,r6[64]
80029dc6:	70 08       	ld.w	r8,r8[0x0]
80029dc8:	3f f9       	mov	r9,-1
80029dca:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029dcc:	ec f8 00 40 	ld.w	r8,r6[64]
80029dd0:	70 08       	ld.w	r8,r8[0x0]
80029dd2:	3f f9       	mov	r9,-1
80029dd4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029dd6:	ec f9 00 b4 	ld.w	r9,r6[180]
80029dda:	30 08       	mov	r8,0
80029ddc:	b2 88       	st.b	r9[0x0],r8
80029dde:	c7 a8       	rjmp	80029ed2 <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029de0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029de4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029de8:	5c 58       	castu.b	r8
80029dea:	c2 d0       	breq	80029e44 <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029dec:	ec f8 00 b8 	ld.w	r8,r6[184]
80029df0:	70 09       	ld.w	r9,r8[0x0]
80029df2:	ec f8 00 40 	ld.w	r8,r6[64]
80029df6:	70 08       	ld.w	r8,r8[0x0]
80029df8:	70 58       	ld.w	r8,r8[0x14]
80029dfa:	5c 58       	castu.b	r8
80029dfc:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029dfe:	ec f8 00 b8 	ld.w	r8,r6[184]
80029e02:	70 08       	ld.w	r8,r8[0x0]
80029e04:	f0 c9 ff ff 	sub	r9,r8,-1
80029e08:	ec f8 00 b8 	ld.w	r8,r6[184]
80029e0c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029e0e:	ec f8 01 40 	ld.w	r8,r6[320]
80029e12:	70 08       	ld.w	r8,r8[0x0]
80029e14:	f0 c9 00 01 	sub	r9,r8,1
80029e18:	ec f8 01 40 	ld.w	r8,r6[320]
80029e1c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029e1e:	ec f8 01 40 	ld.w	r8,r6[320]
80029e22:	70 08       	ld.w	r8,r8[0x0]
80029e24:	58 08       	cp.w	r8,0
80029e26:	c5 61       	brne	80029ed2 <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029e28:	ec f8 00 40 	ld.w	r8,r6[64]
80029e2c:	70 08       	ld.w	r8,r8[0x0]
80029e2e:	30 19       	mov	r9,1
80029e30:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029e32:	ec f9 00 b4 	ld.w	r9,r6[180]
80029e36:	30 08       	mov	r8,0
80029e38:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
80029e3a:	ec f8 00 70 	ld.w	r8,r6[112]
80029e3e:	30 19       	mov	r9,1
80029e40:	91 09       	st.w	r8[0x0],r9
80029e42:	c4 88       	rjmp	80029ed2 <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e48:	e2 18 00 02 	andl	r8,0x2,COH
80029e4c:	c4 30       	breq	80029ed2 <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029e4e:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e52:	70 08       	ld.w	r8,r8[0x0]
80029e54:	58 08       	cp.w	r8,0
80029e56:	c0 b1       	brne	80029e6c <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029e58:	ec f8 00 40 	ld.w	r8,r6[64]
80029e5c:	70 08       	ld.w	r8,r8[0x0]
80029e5e:	30 29       	mov	r9,2
80029e60:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029e62:	ec f9 00 b4 	ld.w	r9,r6[180]
80029e66:	30 08       	mov	r8,0
80029e68:	b2 88       	st.b	r9[0x0],r8
80029e6a:	c3 48       	rjmp	80029ed2 <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029e6c:	ec f8 00 40 	ld.w	r8,r6[64]
80029e70:	70 0a       	ld.w	r10,r8[0x0]
80029e72:	ec f8 00 90 	ld.w	r8,r6[144]
80029e76:	70 08       	ld.w	r8,r8[0x0]
80029e78:	11 89       	ld.ub	r9,r8[0x0]
80029e7a:	5c 59       	castu.b	r9
80029e7c:	95 69       	st.w	r10[0x18],r9
80029e7e:	f0 c9 ff ff 	sub	r9,r8,-1
80029e82:	ec f8 00 90 	ld.w	r8,r6[144]
80029e86:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029e88:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e8c:	70 08       	ld.w	r8,r8[0x0]
80029e8e:	f0 c9 00 01 	sub	r9,r8,1
80029e92:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e96:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029e98:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e9c:	70 08       	ld.w	r8,r8[0x0]
80029e9e:	58 08       	cp.w	r8,0
80029ea0:	c1 91       	brne	80029ed2 <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
80029ea2:	ec f8 00 b4 	ld.w	r8,r6[180]
80029ea6:	11 88       	ld.ub	r8,r8[0x0]
80029ea8:	5c 58       	castu.b	r8
80029eaa:	c1 40       	breq	80029ed2 <twim_master_interrupt_handler+0x162>
					twim_next = false;
80029eac:	ec f9 00 b4 	ld.w	r9,r6[180]
80029eb0:	30 08       	mov	r8,0
80029eb2:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029eb4:	ec f8 01 ec 	ld.w	r8,r6[492]
80029eb8:	70 08       	ld.w	r8,r8[0x0]
80029eba:	70 49       	ld.w	r9,r8[0x10]
80029ebc:	ec f8 00 7c 	ld.w	r8,r6[124]
80029ec0:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029ec2:	ec f8 01 ec 	ld.w	r8,r6[492]
80029ec6:	70 08       	ld.w	r8,r8[0x0]
80029ec8:	70 38       	ld.w	r8,r8[0xc]
80029eca:	10 99       	mov	r9,r8
80029ecc:	ec f8 00 90 	ld.w	r8,r6[144]
80029ed0:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029ed2:	2f fd       	sub	sp,-4
80029ed4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029ed8:	d6 03       	rete
80029eda:	00 00       	add	r0,r0
80029edc:	80 02       	ld.sh	r2,r0[0x0]
80029ede:	9b fe       	st.w	sp[0x3c],lr

80029ee0 <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029ee0:	eb cd 40 c0 	pushm	r6-r7,lr
80029ee4:	1a 97       	mov	r7,sp
80029ee6:	20 1d       	sub	sp,4
80029ee8:	4d 76       	lddpc	r6,8002a044 <twim_master_interrupt_handler2+0x164>
80029eea:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029eec:	ec f8 00 40 	ld.w	r8,r6[64]
80029ef0:	70 08       	ld.w	r8,r8[0x0]
80029ef2:	70 79       	ld.w	r9,r8[0x1c]
80029ef4:	ec f8 00 fc 	ld.w	r8,r6[252]
80029ef8:	70 08       	ld.w	r8,r8[0x0]
80029efa:	f3 e8 00 08 	and	r8,r9,r8
80029efe:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f06:	e2 18 07 00 	andl	r8,0x700,COH
80029f0a:	c2 30       	breq	80029f50 <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029f0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f10:	e2 18 03 00 	andl	r8,0x300,COH
80029f14:	c0 30       	breq	80029f1a <twim_master_interrupt_handler2+0x3a>
80029f16:	3f c8       	mov	r8,-4
80029f18:	c0 28       	rjmp	80029f1c <twim_master_interrupt_handler2+0x3c>
80029f1a:	3f e8       	mov	r8,-2
80029f1c:	ec f9 00 70 	ld.w	r9,r6[112]
80029f20:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029f22:	ec f8 00 40 	ld.w	r8,r6[64]
80029f26:	70 09       	ld.w	r9,r8[0x0]
80029f28:	72 38       	ld.w	r8,r9[0xc]
80029f2a:	30 0a       	mov	r10,0
80029f2c:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029f30:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029f32:	ec f8 00 40 	ld.w	r8,r6[64]
80029f36:	70 08       	ld.w	r8,r8[0x0]
80029f38:	3f f9       	mov	r9,-1
80029f3a:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029f3c:	ec f8 00 40 	ld.w	r8,r6[64]
80029f40:	70 08       	ld.w	r8,r8[0x0]
80029f42:	3f f9       	mov	r9,-1
80029f44:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029f46:	ec f9 00 b4 	ld.w	r9,r6[180]
80029f4a:	30 08       	mov	r8,0
80029f4c:	b2 88       	st.b	r9[0x0],r8
80029f4e:	c7 68       	rjmp	8002a03a <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029f50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029f58:	5c 58       	castu.b	r8
80029f5a:	c2 90       	breq	80029fac <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029f5c:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f60:	70 09       	ld.w	r9,r8[0x0]
80029f62:	ec f8 00 40 	ld.w	r8,r6[64]
80029f66:	70 08       	ld.w	r8,r8[0x0]
80029f68:	70 58       	ld.w	r8,r8[0x14]
80029f6a:	5c 58       	castu.b	r8
80029f6c:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029f6e:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f72:	70 08       	ld.w	r8,r8[0x0]
80029f74:	f0 c9 ff ff 	sub	r9,r8,-1
80029f78:	ec f8 00 b8 	ld.w	r8,r6[184]
80029f7c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029f7e:	ec f8 01 40 	ld.w	r8,r6[320]
80029f82:	70 08       	ld.w	r8,r8[0x0]
80029f84:	f0 c9 00 01 	sub	r9,r8,1
80029f88:	ec f8 01 40 	ld.w	r8,r6[320]
80029f8c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029f8e:	ec f8 01 40 	ld.w	r8,r6[320]
80029f92:	70 08       	ld.w	r8,r8[0x0]
80029f94:	58 08       	cp.w	r8,0
80029f96:	c5 21       	brne	8002a03a <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029f98:	ec f8 00 40 	ld.w	r8,r6[64]
80029f9c:	70 08       	ld.w	r8,r8[0x0]
80029f9e:	30 19       	mov	r9,1
80029fa0:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029fa2:	ec f9 00 b4 	ld.w	r9,r6[180]
80029fa6:	30 08       	mov	r8,0
80029fa8:	b2 88       	st.b	r9[0x0],r8
80029faa:	c4 88       	rjmp	8002a03a <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029fac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029fb0:	e2 18 00 02 	andl	r8,0x2,COH
80029fb4:	c4 30       	breq	8002a03a <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029fb6:	ec f8 00 7c 	ld.w	r8,r6[124]
80029fba:	70 08       	ld.w	r8,r8[0x0]
80029fbc:	58 08       	cp.w	r8,0
80029fbe:	c0 b1       	brne	80029fd4 <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029fc0:	ec f8 00 40 	ld.w	r8,r6[64]
80029fc4:	70 08       	ld.w	r8,r8[0x0]
80029fc6:	30 29       	mov	r9,2
80029fc8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029fca:	ec f9 00 b4 	ld.w	r9,r6[180]
80029fce:	30 08       	mov	r8,0
80029fd0:	b2 88       	st.b	r9[0x0],r8
80029fd2:	c3 48       	rjmp	8002a03a <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029fd4:	ec f8 00 40 	ld.w	r8,r6[64]
80029fd8:	70 0a       	ld.w	r10,r8[0x0]
80029fda:	ec f8 00 90 	ld.w	r8,r6[144]
80029fde:	70 08       	ld.w	r8,r8[0x0]
80029fe0:	11 89       	ld.ub	r9,r8[0x0]
80029fe2:	5c 59       	castu.b	r9
80029fe4:	95 69       	st.w	r10[0x18],r9
80029fe6:	f0 c9 ff ff 	sub	r9,r8,-1
80029fea:	ec f8 00 90 	ld.w	r8,r6[144]
80029fee:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029ff0:	ec f8 00 7c 	ld.w	r8,r6[124]
80029ff4:	70 08       	ld.w	r8,r8[0x0]
80029ff6:	f0 c9 00 01 	sub	r9,r8,1
80029ffa:	ec f8 00 7c 	ld.w	r8,r6[124]
80029ffe:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002a000:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a004:	70 08       	ld.w	r8,r8[0x0]
8002a006:	58 08       	cp.w	r8,0
8002a008:	c1 91       	brne	8002a03a <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
8002a00a:	ec f8 00 b4 	ld.w	r8,r6[180]
8002a00e:	11 88       	ld.ub	r8,r8[0x0]
8002a010:	5c 58       	castu.b	r8
8002a012:	c1 40       	breq	8002a03a <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
8002a014:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a018:	30 08       	mov	r8,0
8002a01a:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002a01c:	ec f8 01 ec 	ld.w	r8,r6[492]
8002a020:	70 08       	ld.w	r8,r8[0x0]
8002a022:	70 49       	ld.w	r9,r8[0x10]
8002a024:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a028:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002a02a:	ec f8 01 ec 	ld.w	r8,r6[492]
8002a02e:	70 08       	ld.w	r8,r8[0x0]
8002a030:	70 38       	ld.w	r8,r8[0xc]
8002a032:	10 99       	mov	r9,r8
8002a034:	ec f8 00 90 	ld.w	r8,r6[144]
8002a038:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002a03a:	2f fd       	sub	sp,-4
8002a03c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002a040:	d6 03       	rete
8002a042:	00 00       	add	r0,r0
8002a044:	80 02       	ld.sh	r2,r0[0x0]
8002a046:	9d 6e       	st.w	lr[0x18],lr

8002a048 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8002a048:	eb cd 40 80 	pushm	r7,lr
8002a04c:	1a 97       	mov	r7,sp
8002a04e:	20 5d       	sub	sp,20
8002a050:	ef 4c ff f4 	st.w	r7[-12],r12
8002a054:	ef 4b ff f0 	st.w	r7[-16],r11
8002a058:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
8002a05c:	30 08       	mov	r8,0
8002a05e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8002a062:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a066:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a06a:	f0 09 0d 08 	divu	r8,r8,r9
8002a06e:	a1 98       	lsr	r8,0x1
8002a070:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a074:	c0 b8       	rjmp	8002a08a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
8002a076:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a07a:	2f f8       	sub	r8,-1
8002a07c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8002a080:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a084:	a1 98       	lsr	r8,0x1
8002a086:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a08e:	e0 48 00 ff 	cp.w	r8,255
8002a092:	e0 88 00 09 	brls	8002a0a4 <twim_set_speed+0x5c>
8002a096:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a09a:	30 78       	mov	r8,7
8002a09c:	f0 09 18 00 	cp.b	r9,r8
8002a0a0:	fe 98 ff eb 	brls	8002a076 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8002a0a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a0a8:	30 78       	mov	r8,7
8002a0aa:	f0 09 18 00 	cp.b	r9,r8
8002a0ae:	e0 88 00 04 	brls	8002a0b6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8002a0b2:	3f 88       	mov	r8,-8
8002a0b4:	c1 a8       	rjmp	8002a0e8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a0b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0ba:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8002a0be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0c2:	a1 98       	lsr	r8,0x1
8002a0c4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a0c8:	f4 08 01 08 	sub	r8,r10,r8
8002a0cc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
8002a0ce:	10 49       	or	r9,r8
8002a0d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a0d4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
8002a0d6:	10 49       	or	r9,r8
8002a0d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0dc:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a0de:	10 49       	or	r9,r8
8002a0e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a0e4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
8002a0e6:	30 08       	mov	r8,0
}
8002a0e8:	10 9c       	mov	r12,r8
8002a0ea:	2f bd       	sub	sp,-20
8002a0ec:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a0f0 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8002a0f0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a0f4:	1a 97       	mov	r7,sp
8002a0f6:	20 4d       	sub	sp,16
8002a0f8:	4c 06       	lddpc	r6,8002a1f8 <twim_master_init+0x108>
8002a0fa:	1e 26       	rsub	r6,pc
8002a0fc:	ef 4c ff f4 	st.w	r7[-12],r12
8002a100:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a104:	e1 b8 00 00 	mfsr	r8,0x0
8002a108:	10 9c       	mov	r12,r8
8002a10a:	c1 6e       	rcall	80029d36 <cpu_irq_is_enabled_flags>
8002a10c:	18 98       	mov	r8,r12
8002a10e:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a112:	ec f8 00 70 	ld.w	r8,r6[112]
8002a116:	30 09       	mov	r9,0
8002a118:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8002a11a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a11e:	30 08       	mov	r8,0
8002a120:	f0 09 18 00 	cp.b	r9,r8
8002a124:	c0 20       	breq	8002a128 <twim_master_init+0x38>
		cpu_irq_disable ();
8002a126:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8002a128:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a12c:	3f f9       	mov	r9,-1
8002a12e:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a130:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a134:	30 19       	mov	r9,1
8002a136:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a13c:	e0 69 00 80 	mov	r9,128
8002a140:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8002a142:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a146:	30 08       	mov	r8,0
8002a148:	f0 09 18 00 	cp.b	r9,r8
8002a14c:	c0 20       	breq	8002a150 <twim_master_init+0x60>
		cpu_irq_enable ();
8002a14e:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8002a150:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a154:	3f f9       	mov	r9,-1
8002a156:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
8002a158:	fe b0 fd e0 	rcall	80029d18 <cpu_irq_save>
8002a15c:	18 98       	mov	r8,r12
8002a15e:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8002a162:	30 1a       	mov	r10,1
8002a164:	e0 6b 03 20 	mov	r11,800
8002a168:	fe cc 03 f8 	sub	r12,pc,1016
8002a16c:	f0 16 00 38 	mcall	r6[224]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
8002a170:	30 1a       	mov	r10,1
8002a172:	e0 6b 03 40 	mov	r11,832
8002a176:	fe cc 02 96 	sub	r12,pc,662
8002a17a:	f0 16 00 38 	mcall	r6[224]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8002a17e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a182:	fe b0 fd ea 	rcall	80029d56 <cpu_irq_restore>
	
	if (opt->smbus) {
8002a186:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a18a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a18e:	58 08       	cp.w	r8,0
8002a190:	c0 90       	breq	8002a1a2 <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8002a192:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a196:	31 09       	mov	r9,16
8002a198:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8002a19a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a19e:	3f f9       	mov	r9,-1
8002a1a0:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
8002a1a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a1a6:	70 09       	ld.w	r9,r8[0x0]
8002a1a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a1ac:	70 18       	ld.w	r8,r8[0x4]
8002a1ae:	12 9a       	mov	r10,r9
8002a1b0:	10 9b       	mov	r11,r8
8002a1b2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a1b6:	f0 16 01 29 	mcall	r6[1188]
8002a1ba:	18 98       	mov	r8,r12
8002a1bc:	5b 88       	cp.w	r8,-8
8002a1be:	c0 31       	brne	8002a1c4 <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
8002a1c0:	3f 88       	mov	r8,-8
8002a1c2:	c1 68       	rjmp	8002a1ee <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8002a1c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a1c8:	70 28       	ld.w	r8,r8[0x8]
8002a1ca:	10 9b       	mov	r11,r8
8002a1cc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a1d0:	f0 16 01 02 	mcall	r6[1032]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a1d4:	ec f8 00 70 	ld.w	r8,r6[112]
8002a1d8:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a1da:	5b c8       	cp.w	r8,-4
8002a1dc:	c0 60       	breq	8002a1e8 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a1de:	ec f8 00 70 	ld.w	r8,r6[112]
8002a1e2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a1e4:	5b e8       	cp.w	r8,-2
8002a1e6:	c0 31       	brne	8002a1ec <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a1e8:	3f f8       	mov	r8,-1
8002a1ea:	c0 28       	rjmp	8002a1ee <twim_master_init+0xfe>
	}
	return STATUS_OK;
8002a1ec:	30 08       	mov	r8,0
}
8002a1ee:	10 9c       	mov	r12,r8
8002a1f0:	2f cd       	sub	sp,-16
8002a1f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a1f6:	00 00       	add	r0,r0
8002a1f8:	80 02       	ld.sh	r2,r0[0x0]
8002a1fa:	9f 7e       	st.w	pc[0x1c],lr

8002a1fc <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8002a1fc:	eb cd 40 c0 	pushm	r6-r7,lr
8002a200:	1a 97       	mov	r7,sp
8002a202:	20 2d       	sub	sp,8
8002a204:	48 f6       	lddpc	r6,8002a240 <twim_disable_interrupt+0x44>
8002a206:	1e 26       	rsub	r6,pc
8002a208:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a20c:	e1 b8 00 00 	mfsr	r8,0x0
8002a210:	10 9c       	mov	r12,r8
8002a212:	fe b0 fd 92 	rcall	80029d36 <cpu_irq_is_enabled_flags>
8002a216:	18 98       	mov	r8,r12
8002a218:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8002a21c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a220:	30 08       	mov	r8,0
8002a222:	f0 09 18 00 	cp.b	r9,r8
8002a226:	c0 20       	breq	8002a22a <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
8002a228:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8002a22a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a22e:	3f f9       	mov	r9,-1
8002a230:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8002a232:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a236:	3f f9       	mov	r9,-1
8002a238:	91 b9       	st.w	r8[0x2c],r9
}
8002a23a:	2f ed       	sub	sp,-8
8002a23c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a240:	80 02       	ld.sh	r2,r0[0x0]
8002a242:	a0 8a       	st.b	r0[0x0],r10

8002a244 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8002a244:	eb cd 40 c0 	pushm	r6-r7,lr
8002a248:	1a 97       	mov	r7,sp
8002a24a:	20 3d       	sub	sp,12
8002a24c:	48 c6       	lddpc	r6,8002a27c <twim_probe+0x38>
8002a24e:	1e 26       	rsub	r6,pc
8002a250:	ef 4c ff f8 	st.w	r7[-8],r12
8002a254:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
8002a258:	30 08       	mov	r8,0
8002a25a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8002a25e:	ee cb 00 04 	sub	r11,r7,4
8002a262:	30 08       	mov	r8,0
8002a264:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a268:	30 0a       	mov	r10,0
8002a26a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002a26e:	f0 16 00 39 	mcall	r6[228]
8002a272:	18 98       	mov	r8,r12
}
8002a274:	10 9c       	mov	r12,r8
8002a276:	2f dd       	sub	sp,-12
8002a278:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a27c:	80 02       	ld.sh	r2,r0[0x0]
8002a27e:	a0 d2       	st.b	r0[0x5],r2

8002a280 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a280:	eb cd 40 c0 	pushm	r6-r7,lr
8002a284:	1a 97       	mov	r7,sp
8002a286:	20 2d       	sub	sp,8
8002a288:	4e 76       	lddpc	r6,8002a424 <twim_read_packet+0x1a4>
8002a28a:	1e 26       	rsub	r6,pc
8002a28c:	ef 4c ff fc 	st.w	r7[-4],r12
8002a290:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a294:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a298:	30 29       	mov	r9,2
8002a29a:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a29c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a2a4:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a2a6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2aa:	70 08       	ld.w	r8,r8[0x0]
8002a2ac:	10 9c       	mov	r12,r8
8002a2ae:	f0 16 00 79 	mcall	r6[484]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8002a2b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2b6:	70 38       	ld.w	r8,r8[0xc]
8002a2b8:	10 99       	mov	r9,r8
8002a2ba:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a2be:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8002a2c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2c4:	70 49       	ld.w	r9,r8[0x10]
8002a2c6:	ec f8 01 40 	ld.w	r8,r6[320]
8002a2ca:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8002a2cc:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a2d0:	30 08       	mov	r8,0
8002a2d2:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a2d4:	ec f8 00 70 	ld.w	r8,r6[112]
8002a2d8:	30 09       	mov	r9,0
8002a2da:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
8002a2dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2e0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a2e4:	58 08       	cp.w	r8,0
8002a2e6:	c5 60       	breq	8002a392 <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a2e8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2ec:	70 08       	ld.w	r8,r8[0x0]
8002a2ee:	30 19       	mov	r9,1
8002a2f0:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a2f2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2f6:	70 08       	ld.w	r8,r8[0x0]
8002a2f8:	e0 69 00 80 	mov	r9,128
8002a2fc:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a2fe:	ec f8 00 40 	ld.w	r8,r6[64]
8002a302:	70 08       	ld.w	r8,r8[0x0]
8002a304:	30 29       	mov	r9,2
8002a306:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a30c:	2f c8       	sub	r8,-4
8002a30e:	10 99       	mov	r9,r8
8002a310:	ec f8 00 90 	ld.w	r8,r6[144]
8002a314:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a316:	ec f8 00 90 	ld.w	r8,r6[144]
8002a31a:	70 09       	ld.w	r9,r8[0x0]
8002a31c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a320:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a324:	f0 08 11 04 	rsub	r8,r8,4
8002a328:	10 09       	add	r9,r8
8002a32a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a32e:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a330:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a334:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a338:	10 99       	mov	r9,r8
8002a33a:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a33e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
8002a340:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a344:	e0 69 07 03 	mov	r9,1795
8002a348:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a34a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a34e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a350:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a354:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a356:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a35a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a35e:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a362:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a364:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a368:	e8 19 a0 00 	orl	r9,0xa000
8002a36c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a36e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a372:	70 08       	ld.w	r8,r8[0x0]
8002a374:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a378:	72 09       	ld.w	r9,r9[0x0]
8002a37a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a37e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a382:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a384:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a386:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a38a:	e8 19 e0 01 	orl	r9,0xe001
8002a38e:	91 49       	st.w	r8[0x10],r9
8002a390:	c1 b8       	rjmp	8002a3c6 <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8002a392:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a396:	30 09       	mov	r9,0
8002a398:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a39a:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a39e:	e0 69 07 01 	mov	r9,1793
8002a3a2:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3a4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3a8:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a3ae:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3b0:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a3b8:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a3ba:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3bc:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3c0:	e8 19 e0 01 	orl	r9,0xe001
8002a3c4:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a3c6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3ca:	70 08       	ld.w	r8,r8[0x0]
8002a3cc:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a3d0:	72 09       	ld.w	r9,r9[0x0]
8002a3d2:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a3d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3d8:	30 19       	mov	r9,1
8002a3da:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a3dc:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a3de:	c0 38       	rjmp	8002a3e4 <twim_read_packet+0x164>
		cpu_relax();
8002a3e0:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a3e4:	ec f8 00 70 	ld.w	r8,r6[112]
8002a3e8:	70 08       	ld.w	r8,r8[0x0]
8002a3ea:	58 08       	cp.w	r8,0
8002a3ec:	c0 61       	brne	8002a3f8 <twim_read_packet+0x178>
8002a3ee:	f0 16 00 6a 	mcall	r6[424]
8002a3f2:	18 98       	mov	r8,r12
8002a3f4:	58 08       	cp.w	r8,0
8002a3f6:	cf 50       	breq	8002a3e0 <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a3f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3fc:	30 29       	mov	r9,2
8002a3fe:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a400:	ec f8 00 70 	ld.w	r8,r6[112]
8002a404:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a406:	5b c8       	cp.w	r8,-4
8002a408:	c0 60       	breq	8002a414 <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a40a:	ec f8 00 70 	ld.w	r8,r6[112]
8002a40e:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a410:	5b e8       	cp.w	r8,-2
8002a412:	c0 31       	brne	8002a418 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a414:	3f f8       	mov	r8,-1
8002a416:	c0 28       	rjmp	8002a41a <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002a418:	30 08       	mov	r8,0
}
8002a41a:	10 9c       	mov	r12,r8
8002a41c:	2f ed       	sub	sp,-8
8002a41e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a422:	00 00       	add	r0,r0
8002a424:	80 02       	ld.sh	r2,r0[0x0]
8002a426:	a1 0e       	ld.d	lr,r0

8002a428 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a428:	eb cd 40 c0 	pushm	r6-r7,lr
8002a42c:	1a 97       	mov	r7,sp
8002a42e:	20 5d       	sub	sp,20
8002a430:	4c c6       	lddpc	r6,8002a560 <twim_read+0x138>
8002a432:	1e 26       	rsub	r6,pc
8002a434:	ef 4c ff fc 	st.w	r7[-4],r12
8002a438:	ef 4b ff f8 	st.w	r7[-8],r11
8002a43c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a440:	ef 49 ff f0 	st.w	r7[-16],r9
8002a444:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a448:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a44c:	30 19       	mov	r9,1
8002a44e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a450:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a454:	e0 69 00 80 	mov	r9,128
8002a458:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a45a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a45e:	30 29       	mov	r9,2
8002a460:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a462:	ec f8 00 40 	ld.w	r8,r6[64]
8002a466:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a46a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a46c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a470:	70 08       	ld.w	r8,r8[0x0]
8002a472:	10 9c       	mov	r12,r8
8002a474:	f0 16 00 79 	mcall	r6[484]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002a478:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a47c:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a480:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002a482:	ec f8 01 40 	ld.w	r8,r6[320]
8002a486:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a48a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a48c:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a490:	30 08       	mov	r8,0
8002a492:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a494:	ec f8 00 70 	ld.w	r8,r6[112]
8002a498:	30 09       	mov	r9,0
8002a49a:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002a49c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a4a0:	30 08       	mov	r8,0
8002a4a2:	f0 09 18 00 	cp.b	r9,r8
8002a4a6:	c1 a0       	breq	8002a4da <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4ac:	70 08       	ld.w	r8,r8[0x0]
8002a4ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a4b2:	a1 79       	lsl	r9,0x1
8002a4b4:	e8 19 a8 00 	orl	r9,0xa800
8002a4b8:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4ba:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4be:	70 08       	ld.w	r8,r8[0x0]
8002a4c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a4c4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a4c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a4cc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4ce:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4d2:	e8 19 f8 01 	orl	r9,0xf801
8002a4d6:	91 49       	st.w	r8[0x10],r9
8002a4d8:	c1 08       	rjmp	8002a4f8 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4da:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4de:	70 08       	ld.w	r8,r8[0x0]
8002a4e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a4e4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a4e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a4ec:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4ee:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4f2:	e8 19 e0 01 	orl	r9,0xe001
8002a4f6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a4f8:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a4fc:	e0 69 07 01 	mov	r9,1793
8002a500:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a502:	ec f8 00 40 	ld.w	r8,r6[64]
8002a506:	70 08       	ld.w	r8,r8[0x0]
8002a508:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a50c:	72 09       	ld.w	r9,r9[0x0]
8002a50e:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a510:	ec f8 00 40 	ld.w	r8,r6[64]
8002a514:	70 08       	ld.w	r8,r8[0x0]
8002a516:	30 19       	mov	r9,1
8002a518:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a51a:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a51c:	c0 38       	rjmp	8002a522 <twim_read+0xfa>
		cpu_relax();
8002a51e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a522:	ec f8 00 70 	ld.w	r8,r6[112]
8002a526:	70 08       	ld.w	r8,r8[0x0]
8002a528:	58 08       	cp.w	r8,0
8002a52a:	c0 61       	brne	8002a536 <twim_read+0x10e>
8002a52c:	f0 16 00 6a 	mcall	r6[424]
8002a530:	18 98       	mov	r8,r12
8002a532:	58 08       	cp.w	r8,0
8002a534:	cf 50       	breq	8002a51e <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a53a:	30 29       	mov	r9,2
8002a53c:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a53e:	ec f8 00 70 	ld.w	r8,r6[112]
8002a542:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a544:	5b c8       	cp.w	r8,-4
8002a546:	c0 60       	breq	8002a552 <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a548:	ec f8 00 70 	ld.w	r8,r6[112]
8002a54c:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a54e:	5b e8       	cp.w	r8,-2
8002a550:	c0 31       	brne	8002a556 <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a552:	3f f8       	mov	r8,-1
8002a554:	c0 28       	rjmp	8002a558 <twim_read+0x130>
	}
	return STATUS_OK;
8002a556:	30 08       	mov	r8,0
}
8002a558:	10 9c       	mov	r12,r8
8002a55a:	2f bd       	sub	sp,-20
8002a55c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a560:	80 02       	ld.sh	r2,r0[0x0]
8002a562:	a2 b6       	st.b	r1[0x3],r6

8002a564 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a564:	eb cd 40 c0 	pushm	r6-r7,lr
8002a568:	1a 97       	mov	r7,sp
8002a56a:	20 2d       	sub	sp,8
8002a56c:	4f 16       	lddpc	r6,8002a730 <twim_write_packet+0x1cc>
8002a56e:	1e 26       	rsub	r6,pc
8002a570:	ef 4c ff fc 	st.w	r7[-4],r12
8002a574:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a57c:	30 19       	mov	r9,1
8002a57e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a584:	e0 69 00 80 	mov	r9,128
8002a588:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a58a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a58e:	30 29       	mov	r9,2
8002a590:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a592:	ec f8 00 40 	ld.w	r8,r6[64]
8002a596:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a59a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a59c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a5a0:	70 08       	ld.w	r8,r8[0x0]
8002a5a2:	10 9c       	mov	r12,r8
8002a5a4:	f0 16 00 79 	mcall	r6[484]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a5a8:	ec f8 00 70 	ld.w	r8,r6[112]
8002a5ac:	30 09       	mov	r9,0
8002a5ae:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a5b0:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a5b4:	e0 69 07 02 	mov	r9,1794
8002a5b8:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a5ba:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a5be:	30 08       	mov	r8,0
8002a5c0:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002a5c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5c6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a5ca:	58 08       	cp.w	r8,0
8002a5cc:	c6 40       	breq	8002a694 <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a5ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5d2:	2f c8       	sub	r8,-4
8002a5d4:	10 99       	mov	r9,r8
8002a5d6:	ec f8 00 90 	ld.w	r8,r6[144]
8002a5da:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a5dc:	ec f8 00 90 	ld.w	r8,r6[144]
8002a5e0:	70 09       	ld.w	r9,r8[0x0]
8002a5e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5e6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a5ea:	f0 08 11 04 	rsub	r8,r8,4
8002a5ee:	10 09       	add	r9,r8
8002a5f0:	ec f8 00 90 	ld.w	r8,r6[144]
8002a5f4:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a5f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5fa:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a5fe:	10 99       	mov	r9,r8
8002a600:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a604:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a606:	ec f8 00 40 	ld.w	r8,r6[64]
8002a60a:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a60c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a610:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a612:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a616:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a61a:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a61e:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a620:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a624:	e8 19 a0 00 	orl	r9,0xa000
8002a628:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002a62a:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a62e:	30 18       	mov	r8,1
8002a630:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002a632:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a636:	ec f8 01 ec 	ld.w	r8,r6[492]
8002a63a:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a63c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a640:	70 08       	ld.w	r8,r8[0x0]
8002a642:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a646:	72 09       	ld.w	r9,r9[0x0]
8002a648:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a64c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a650:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a652:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a654:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a658:	e8 19 e0 00 	orl	r9,0xe000
8002a65c:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002a65e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a662:	70 08       	ld.w	r8,r8[0x0]
8002a664:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a668:	72 09       	ld.w	r9,r9[0x0]
8002a66a:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a66c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a670:	70 08       	ld.w	r8,r8[0x0]
8002a672:	30 19       	mov	r9,1
8002a674:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002a676:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a678:	c0 38       	rjmp	8002a67e <twim_write_packet+0x11a>
		cpu_relax();
8002a67a:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a67e:	ec f8 00 70 	ld.w	r8,r6[112]
8002a682:	70 08       	ld.w	r8,r8[0x0]
8002a684:	58 08       	cp.w	r8,0
8002a686:	c3 f1       	brne	8002a704 <twim_write_packet+0x1a0>
8002a688:	f0 16 00 6a 	mcall	r6[424]
8002a68c:	18 98       	mov	r8,r12
8002a68e:	58 08       	cp.w	r8,0
8002a690:	cf 50       	breq	8002a67a <twim_write_packet+0x116>
8002a692:	c3 98       	rjmp	8002a704 <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002a694:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a698:	70 38       	ld.w	r8,r8[0xc]
8002a69a:	10 99       	mov	r9,r8
8002a69c:	ec f8 00 90 	ld.w	r8,r6[144]
8002a6a0:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002a6a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6a6:	70 49       	ld.w	r9,r8[0x10]
8002a6a8:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a6ac:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a6ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6b2:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a6b4:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a6b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6bc:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a6be:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a6c0:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a6c4:	10 99       	mov	r9,r8
8002a6c6:	e8 19 e0 00 	orl	r9,0xe000
8002a6ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6ce:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a6d0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6d4:	70 08       	ld.w	r8,r8[0x0]
8002a6d6:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a6da:	72 09       	ld.w	r9,r9[0x0]
8002a6dc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a6de:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6e2:	70 08       	ld.w	r8,r8[0x0]
8002a6e4:	30 19       	mov	r9,1
8002a6e6:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a6e8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a6ea:	c0 38       	rjmp	8002a6f0 <twim_write_packet+0x18c>
		cpu_relax();
8002a6ec:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a6f0:	ec f8 00 70 	ld.w	r8,r6[112]
8002a6f4:	70 08       	ld.w	r8,r8[0x0]
8002a6f6:	58 08       	cp.w	r8,0
8002a6f8:	c0 61       	brne	8002a704 <twim_write_packet+0x1a0>
8002a6fa:	f0 16 00 6a 	mcall	r6[424]
8002a6fe:	18 98       	mov	r8,r12
8002a700:	58 08       	cp.w	r8,0
8002a702:	cf 50       	breq	8002a6ec <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a704:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a708:	30 29       	mov	r9,2
8002a70a:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a70c:	ec f8 00 70 	ld.w	r8,r6[112]
8002a710:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a712:	5b c8       	cp.w	r8,-4
8002a714:	c0 60       	breq	8002a720 <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a716:	ec f8 00 70 	ld.w	r8,r6[112]
8002a71a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a71c:	5b e8       	cp.w	r8,-2
8002a71e:	c0 31       	brne	8002a724 <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a720:	3f f8       	mov	r8,-1
8002a722:	c0 28       	rjmp	8002a726 <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002a724:	30 08       	mov	r8,0
}
8002a726:	10 9c       	mov	r12,r8
8002a728:	2f ed       	sub	sp,-8
8002a72a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a72e:	00 00       	add	r0,r0
8002a730:	80 02       	ld.sh	r2,r0[0x0]
8002a732:	a3 f2       	*unknown*

8002a734 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a734:	eb cd 40 c0 	pushm	r6-r7,lr
8002a738:	1a 97       	mov	r7,sp
8002a73a:	20 5d       	sub	sp,20
8002a73c:	4b f6       	lddpc	r6,8002a838 <twim_write+0x104>
8002a73e:	1e 26       	rsub	r6,pc
8002a740:	ef 4c ff fc 	st.w	r7[-4],r12
8002a744:	ef 4b ff f8 	st.w	r7[-8],r11
8002a748:	ef 4a ff f4 	st.w	r7[-12],r10
8002a74c:	ef 49 ff f0 	st.w	r7[-16],r9
8002a750:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a754:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a758:	30 19       	mov	r9,1
8002a75a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a75c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a760:	e0 69 00 80 	mov	r9,128
8002a764:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a76a:	30 29       	mov	r9,2
8002a76c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a76e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a772:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a776:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a778:	ec f8 00 40 	ld.w	r8,r6[64]
8002a77c:	70 08       	ld.w	r8,r8[0x0]
8002a77e:	10 9c       	mov	r12,r8
8002a780:	f0 16 00 79 	mcall	r6[484]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002a784:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a788:	ec f8 00 90 	ld.w	r8,r6[144]
8002a78c:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002a78e:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a792:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a796:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a798:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a79c:	30 08       	mov	r8,0
8002a79e:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a7a0:	ec f8 00 70 	ld.w	r8,r6[112]
8002a7a4:	30 09       	mov	r9,0
8002a7a6:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7ac:	70 08       	ld.w	r8,r8[0x0]
8002a7ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a7b2:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a7b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a7ba:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7bc:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a7be:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a7c2:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7c4:	f5 e9 10 09 	or	r9,r10,r9
8002a7c8:	e8 19 e0 00 	orl	r9,0xe000
8002a7cc:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a7ce:	ec f8 00 fc 	ld.w	r8,r6[252]
8002a7d2:	e0 69 03 02 	mov	r9,770
8002a7d6:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a7d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7dc:	70 08       	ld.w	r8,r8[0x0]
8002a7de:	ec f9 00 fc 	ld.w	r9,r6[252]
8002a7e2:	72 09       	ld.w	r9,r9[0x0]
8002a7e4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a7e6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7ea:	70 08       	ld.w	r8,r8[0x0]
8002a7ec:	30 19       	mov	r9,1
8002a7ee:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a7f0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a7f2:	c0 38       	rjmp	8002a7f8 <twim_write+0xc4>
		cpu_relax();
8002a7f4:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a7f8:	ec f8 00 70 	ld.w	r8,r6[112]
8002a7fc:	70 08       	ld.w	r8,r8[0x0]
8002a7fe:	58 08       	cp.w	r8,0
8002a800:	c0 61       	brne	8002a80c <twim_write+0xd8>
8002a802:	f0 16 00 6a 	mcall	r6[424]
8002a806:	18 98       	mov	r8,r12
8002a808:	58 08       	cp.w	r8,0
8002a80a:	cf 50       	breq	8002a7f4 <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a80c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a810:	30 29       	mov	r9,2
8002a812:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a814:	ec f8 00 70 	ld.w	r8,r6[112]
8002a818:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a81a:	5b c8       	cp.w	r8,-4
8002a81c:	c0 60       	breq	8002a828 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a81e:	ec f8 00 70 	ld.w	r8,r6[112]
8002a822:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a824:	5b e8       	cp.w	r8,-2
8002a826:	c0 31       	brne	8002a82c <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a828:	3f f8       	mov	r8,-1
8002a82a:	c0 28       	rjmp	8002a82e <twim_write+0xfa>
	}
	return STATUS_OK;
8002a82c:	30 08       	mov	r8,0
}
8002a82e:	10 9c       	mov	r12,r8
8002a830:	2f bd       	sub	sp,-20
8002a832:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a836:	00 00       	add	r0,r0
8002a838:	80 02       	ld.sh	r2,r0[0x0]
8002a83a:	a5 c2       	cbr	r2,0x4

8002a83c <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002a83c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a840:	1a 97       	mov	r7,sp
8002a842:	20 4d       	sub	sp,16
8002a844:	fe f6 03 4c 	ld.w	r6,pc[844]
8002a848:	1e 26       	rsub	r6,pc
8002a84a:	ef 4c ff fc 	st.w	r7[-4],r12
8002a84e:	ef 4b ff f8 	st.w	r7[-8],r11
8002a852:	ef 4a ff f4 	st.w	r7[-12],r10
8002a856:	12 98       	mov	r8,r9
8002a858:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a85c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a860:	30 19       	mov	r9,1
8002a862:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a864:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a868:	e0 69 00 80 	mov	r9,128
8002a86c:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a86e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a872:	30 29       	mov	r9,2
8002a874:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a876:	ec f8 00 40 	ld.w	r8,r6[64]
8002a87a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a87e:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a880:	ec f8 00 40 	ld.w	r8,r6[64]
8002a884:	70 08       	ld.w	r8,r8[0x0]
8002a886:	10 9c       	mov	r12,r8
8002a888:	f0 16 00 79 	mcall	r6[484]
	// Set next transfer to false
	twim_next = false;
8002a88c:	ec f9 00 b4 	ld.w	r9,r6[180]
8002a890:	30 08       	mov	r8,0
8002a892:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002a894:	ec f8 00 70 	ld.w	r8,r6[112]
8002a898:	30 09       	mov	r9,0
8002a89a:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002a89c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a8a0:	30 08       	mov	r8,0
8002a8a2:	f0 09 18 00 	cp.b	r9,r8
8002a8a6:	c3 00       	breq	8002a906 <twim_chained_transfer+0xca>
8002a8a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8ac:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a8b0:	5c 58       	castu.b	r8
8002a8b2:	c2 a0       	breq	8002a906 <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8b8:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8ba:	a1 78       	lsl	r8,0x1
8002a8bc:	10 99       	mov	r9,r8
8002a8be:	e8 19 a8 00 	orl	r9,0xa800
8002a8c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8c6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8cc:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8ce:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8d6:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a8d8:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8da:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8de:	10 99       	mov	r9,r8
8002a8e0:	e8 19 b8 01 	orl	r9,0xb801
8002a8e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8e8:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a8ea:	c0 38       	rjmp	8002a8f0 <twim_chained_transfer+0xb4>
			cpu_relax();
8002a8ec:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a8f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8f4:	70 78       	ld.w	r8,r8[0x1c]
8002a8f6:	e2 18 00 08 	andl	r8,0x8,COH
8002a8fa:	cf 90       	breq	8002a8ec <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002a8fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a900:	30 89       	mov	r9,8
8002a902:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002a904:	c1 c8       	rjmp	8002a93c <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a90a:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a90c:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a910:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a914:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a916:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a918:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a91a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a91e:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a920:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a922:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a926:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a92a:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a92c:	f3 e8 10 08 	or	r8,r9,r8
8002a930:	10 99       	mov	r9,r8
8002a932:	e8 19 a0 00 	orl	r9,0xa000
8002a936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a93a:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a93c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a940:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a942:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a946:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a94a:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a94c:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a94e:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a950:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a954:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a956:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002a95a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a95e:	30 08       	mov	r8,0
8002a960:	f0 09 18 00 	cp.b	r9,r8
8002a964:	c0 90       	breq	8002a976 <twim_chained_transfer+0x13a>
8002a966:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a96a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a96e:	5c 58       	castu.b	r8
8002a970:	c0 30       	breq	8002a976 <twim_chained_transfer+0x13a>
8002a972:	30 18       	mov	r8,1
8002a974:	c0 28       	rjmp	8002a978 <twim_chained_transfer+0x13c>
8002a976:	30 08       	mov	r8,0
8002a978:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a97a:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a97e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a982:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a986:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a988:	f3 e8 10 08 	or	r8,r9,r8
8002a98c:	10 99       	mov	r9,r8
8002a98e:	e8 19 e0 00 	orl	r9,0xe000
8002a992:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a996:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002a998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a99c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a9a0:	5c 58       	castu.b	r8
8002a9a2:	c3 80       	breq	8002aa12 <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002a9a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9a8:	70 18       	ld.w	r8,r8[0x4]
8002a9aa:	10 99       	mov	r9,r8
8002a9ac:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a9b0:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a9b2:	c1 58       	rjmp	8002a9dc <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a9b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9b8:	70 78       	ld.w	r8,r8[0x1c]
8002a9ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a9be:	5c 58       	castu.b	r8
8002a9c0:	c0 e0       	breq	8002a9dc <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002a9c2:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a9c6:	70 08       	ld.w	r8,r8[0x0]
8002a9c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a9cc:	72 59       	ld.w	r9,r9[0x14]
8002a9ce:	5c 59       	castu.b	r9
8002a9d0:	b0 89       	st.b	r8[0x0],r9
8002a9d2:	f0 c9 ff ff 	sub	r9,r8,-1
8002a9d6:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a9da:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a9dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9e0:	70 78       	ld.w	r8,r8[0x1c]
8002a9e2:	e2 18 00 08 	andl	r8,0x8,COH
8002a9e6:	ce 70       	breq	8002a9b4 <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a9e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9ec:	70 78       	ld.w	r8,r8[0x1c]
8002a9ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a9f2:	5c 58       	castu.b	r8
8002a9f4:	c4 40       	breq	8002aa7c <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002a9f6:	ec f8 00 b8 	ld.w	r8,r6[184]
8002a9fa:	70 08       	ld.w	r8,r8[0x0]
8002a9fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa00:	72 59       	ld.w	r9,r9[0x14]
8002aa02:	5c 59       	castu.b	r9
8002aa04:	b0 89       	st.b	r8[0x0],r9
8002aa06:	f0 c9 ff ff 	sub	r9,r8,-1
8002aa0a:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aa0e:	91 09       	st.w	r8[0x0],r9
8002aa10:	c3 68       	rjmp	8002aa7c <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002aa12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa16:	70 18       	ld.w	r8,r8[0x4]
8002aa18:	10 99       	mov	r9,r8
8002aa1a:	ec f8 00 90 	ld.w	r8,r6[144]
8002aa1e:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002aa20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa24:	70 29       	ld.w	r9,r8[0x8]
8002aa26:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aa2a:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aa2c:	c2 28       	rjmp	8002aa70 <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002aa2e:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aa32:	70 08       	ld.w	r8,r8[0x0]
8002aa34:	58 08       	cp.w	r8,0
8002aa36:	c1 d0       	breq	8002aa70 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002aa38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa3c:	70 78       	ld.w	r8,r8[0x1c]
8002aa3e:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002aa42:	c1 70       	breq	8002aa70 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002aa44:	ec f8 00 90 	ld.w	r8,r6[144]
8002aa48:	70 08       	ld.w	r8,r8[0x0]
8002aa4a:	11 89       	ld.ub	r9,r8[0x0]
8002aa4c:	5c 59       	castu.b	r9
8002aa4e:	12 9a       	mov	r10,r9
8002aa50:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa54:	93 6a       	st.w	r9[0x18],r10
8002aa56:	f0 c9 ff ff 	sub	r9,r8,-1
8002aa5a:	ec f8 00 90 	ld.w	r8,r6[144]
8002aa5e:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002aa60:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aa64:	70 08       	ld.w	r8,r8[0x0]
8002aa66:	f0 c9 00 01 	sub	r9,r8,1
8002aa6a:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aa6e:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002aa70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa74:	70 78       	ld.w	r8,r8[0x1c]
8002aa76:	e2 18 00 08 	andl	r8,0x8,COH
8002aa7a:	cd a0       	breq	8002aa2e <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002aa7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa80:	30 89       	mov	r9,8
8002aa82:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002aa84:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa88:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aa8c:	5c 58       	castu.b	r8
8002aa8e:	c2 40       	breq	8002aad6 <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002aa90:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa94:	70 18       	ld.w	r8,r8[0x4]
8002aa96:	10 99       	mov	r9,r8
8002aa98:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aa9c:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aa9e:	c1 58       	rjmp	8002aac8 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002aaa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaa4:	70 78       	ld.w	r8,r8[0x1c]
8002aaa6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002aaaa:	5c 58       	castu.b	r8
8002aaac:	c0 e0       	breq	8002aac8 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002aaae:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aab2:	70 08       	ld.w	r8,r8[0x0]
8002aab4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aab8:	72 59       	ld.w	r9,r9[0x14]
8002aaba:	5c 59       	castu.b	r9
8002aabc:	b0 89       	st.b	r8[0x0],r9
8002aabe:	f0 c9 ff ff 	sub	r9,r8,-1
8002aac2:	ec f8 00 b8 	ld.w	r8,r6[184]
8002aac6:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aacc:	70 78       	ld.w	r8,r8[0x1c]
8002aace:	e2 18 00 10 	andl	r8,0x10,COH
8002aad2:	ce 70       	breq	8002aaa0 <twim_chained_transfer+0x264>
8002aad4:	c3 68       	rjmp	8002ab40 <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002aad6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aada:	70 18       	ld.w	r8,r8[0x4]
8002aadc:	10 99       	mov	r9,r8
8002aade:	ec f8 00 90 	ld.w	r8,r6[144]
8002aae2:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002aae4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aae8:	70 29       	ld.w	r9,r8[0x8]
8002aaea:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aaee:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aaf0:	c2 28       	rjmp	8002ab34 <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002aaf2:	ec f8 00 7c 	ld.w	r8,r6[124]
8002aaf6:	70 08       	ld.w	r8,r8[0x0]
8002aaf8:	58 08       	cp.w	r8,0
8002aafa:	c1 d0       	breq	8002ab34 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002aafc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab00:	70 78       	ld.w	r8,r8[0x1c]
8002ab02:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002ab06:	c1 70       	breq	8002ab34 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002ab08:	ec f8 00 90 	ld.w	r8,r6[144]
8002ab0c:	70 08       	ld.w	r8,r8[0x0]
8002ab0e:	11 89       	ld.ub	r9,r8[0x0]
8002ab10:	5c 59       	castu.b	r9
8002ab12:	12 9a       	mov	r10,r9
8002ab14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ab18:	93 6a       	st.w	r9[0x18],r10
8002ab1a:	f0 c9 ff ff 	sub	r9,r8,-1
8002ab1e:	ec f8 00 90 	ld.w	r8,r6[144]
8002ab22:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002ab24:	ec f8 00 7c 	ld.w	r8,r6[124]
8002ab28:	70 08       	ld.w	r8,r8[0x0]
8002ab2a:	f0 c9 00 01 	sub	r9,r8,1
8002ab2e:	ec f8 00 7c 	ld.w	r8,r6[124]
8002ab32:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002ab34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab38:	70 78       	ld.w	r8,r8[0x1c]
8002ab3a:	e2 18 00 10 	andl	r8,0x10,COH
8002ab3e:	cd a0       	breq	8002aaf2 <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002ab40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab44:	70 78       	ld.w	r8,r8[0x1c]
8002ab46:	e2 18 04 00 	andl	r8,0x400,COH
8002ab4a:	c0 80       	breq	8002ab5a <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002ab4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab50:	e0 69 04 00 	mov	r9,1024
8002ab54:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002ab56:	3f f8       	mov	r8,-1
8002ab58:	c1 88       	rjmp	8002ab88 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002ab5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab5e:	70 78       	ld.w	r8,r8[0x1c]
8002ab60:	e2 18 03 00 	andl	r8,0x300,COH
8002ab64:	c1 10       	breq	8002ab86 <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002ab66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab6a:	70 38       	ld.w	r8,r8[0xc]
8002ab6c:	10 99       	mov	r9,r8
8002ab6e:	ec 19 80 00 	eorl	r9,0x8000
8002ab72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab76:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002ab78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab7c:	e0 69 03 00 	mov	r9,768
8002ab80:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002ab82:	3f f8       	mov	r8,-1
8002ab84:	c0 28       	rjmp	8002ab88 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002ab86:	30 08       	mov	r8,0
}
8002ab88:	10 9c       	mov	r12,r8
8002ab8a:	2f cd       	sub	sp,-16
8002ab8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab90:	80 02       	ld.sh	r2,r0[0x0]
8002ab92:	a6 cc       	st.b	r3[0x4],r12

8002ab94 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002ab94:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab98:	1a 97       	mov	r7,sp
8002ab9a:	20 1d       	sub	sp,4
8002ab9c:	48 a6       	lddpc	r6,8002abc4 <twim_status+0x30>
8002ab9e:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002aba0:	ec f8 00 40 	ld.w	r8,r6[64]
8002aba4:	70 08       	ld.w	r8,r8[0x0]
8002aba6:	70 78       	ld.w	r8,r8[0x1c]
8002aba8:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002abac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abb0:	e2 18 00 10 	andl	r8,0x10,COH
8002abb4:	c0 30       	breq	8002abba <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002abb6:	30 18       	mov	r8,1
8002abb8:	c0 28       	rjmp	8002abbc <twim_status+0x28>
	} else {
		return 0;
8002abba:	30 08       	mov	r8,0
	}
}
8002abbc:	10 9c       	mov	r12,r8
8002abbe:	2f fd       	sub	sp,-4
8002abc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002abc4:	80 02       	ld.sh	r2,r0[0x0]
8002abc6:	aa 22       	st.h	r5[0x4],r2

8002abc8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002abc8:	eb cd 40 80 	pushm	r7,lr
8002abcc:	1a 97       	mov	r7,sp
8002abce:	20 1d       	sub	sp,4
8002abd0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002abd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abd8:	e6 18 00 01 	andh	r8,0x1,COH
8002abdc:	5f 08       	sreq	r8
8002abde:	5c 58       	castu.b	r8
}
8002abe0:	10 9c       	mov	r12,r8
8002abe2:	2f fd       	sub	sp,-4
8002abe4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002abe8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002abe8:	eb cd 40 80 	pushm	r7,lr
8002abec:	1a 97       	mov	r7,sp
8002abee:	20 7d       	sub	sp,28
8002abf0:	ef 4c ff ec 	st.w	r7[-20],r12
8002abf4:	ef 4b ff e8 	st.w	r7[-24],r11
8002abf8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002abfc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ac00:	f0 09 15 04 	lsl	r9,r8,0x4
8002ac04:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ac08:	10 39       	cp.w	r9,r8
8002ac0a:	e0 8b 00 04 	brhi	8002ac12 <usart_set_async_baudrate+0x2a>
8002ac0e:	31 08       	mov	r8,16
8002ac10:	c0 28       	rjmp	8002ac14 <usart_set_async_baudrate+0x2c>
8002ac12:	30 88       	mov	r8,8
8002ac14:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002ac18:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002ac1c:	f0 09 15 03 	lsl	r9,r8,0x3
8002ac20:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ac24:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002ac28:	f4 08 02 48 	mul	r8,r10,r8
8002ac2c:	a1 98       	lsr	r8,0x1
8002ac2e:	f2 08 00 08 	add	r8,r9,r8
8002ac32:	ee fa ff f0 	ld.w	r10,r7[-16]
8002ac36:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002ac3a:	f4 09 02 49 	mul	r9,r10,r9
8002ac3e:	f0 09 0d 08 	divu	r8,r8,r9
8002ac42:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002ac46:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac4a:	a3 98       	lsr	r8,0x3
8002ac4c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002ac50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac54:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002ac58:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ac5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac60:	58 08       	cp.w	r8,0
8002ac62:	c0 70       	breq	8002ac70 <usart_set_async_baudrate+0x88>
8002ac64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac68:	e0 48 ff ff 	cp.w	r8,65535
8002ac6c:	e0 88 00 04 	brls	8002ac74 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002ac70:	30 18       	mov	r8,1
8002ac72:	c2 08       	rjmp	8002acb2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002ac74:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ac78:	70 18       	ld.w	r8,r8[0x4]
8002ac7a:	10 99       	mov	r9,r8
8002ac7c:	e4 19 ff f7 	andh	r9,0xfff7
8002ac80:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002ac84:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac88:	59 08       	cp.w	r8,16
8002ac8a:	c0 40       	breq	8002ac92 <usart_set_async_baudrate+0xaa>
8002ac8c:	e8 68 00 00 	mov	r8,524288
8002ac90:	c0 28       	rjmp	8002ac94 <usart_set_async_baudrate+0xac>
8002ac92:	30 08       	mov	r8,0
8002ac94:	10 49       	or	r9,r8
8002ac96:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ac9a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002ac9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aca0:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002aca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aca8:	10 49       	or	r9,r8
8002acaa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002acae:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002acb0:	30 08       	mov	r8,0
}
8002acb2:	10 9c       	mov	r12,r8
8002acb4:	2f 9d       	sub	sp,-28
8002acb6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002acba <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002acba:	eb cd 40 80 	pushm	r7,lr
8002acbe:	1a 97       	mov	r7,sp
8002acc0:	20 4d       	sub	sp,16
8002acc2:	ef 4c ff f8 	st.w	r7[-8],r12
8002acc6:	ef 4b ff f4 	st.w	r7[-12],r11
8002acca:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002acce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002acd2:	f0 09 16 01 	lsr	r9,r8,0x1
8002acd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002acda:	f2 08 00 08 	add	r8,r9,r8
8002acde:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ace2:	f0 09 0d 08 	divu	r8,r8,r9
8002ace6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002acea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acee:	58 08       	cp.w	r8,0
8002acf0:	c0 70       	breq	8002acfe <usart_set_sync_master_baudrate+0x44>
8002acf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acf6:	e0 48 ff ff 	cp.w	r8,65535
8002acfa:	e0 88 00 04 	brls	8002ad02 <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002acfe:	30 18       	mov	r8,1
8002ad00:	c1 18       	rjmp	8002ad22 <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ad02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad06:	70 18       	ld.w	r8,r8[0x4]
8002ad08:	e0 18 fe cf 	andl	r8,0xfecf
8002ad0c:	10 99       	mov	r9,r8
8002ad0e:	a9 a9       	sbr	r9,0x8
8002ad10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad14:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002ad16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ad1e:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002ad20:	30 08       	mov	r8,0
}
8002ad22:	10 9c       	mov	r12,r8
8002ad24:	2f cd       	sub	sp,-16
8002ad26:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad2a <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002ad2a:	eb cd 40 80 	pushm	r7,lr
8002ad2e:	1a 97       	mov	r7,sp
8002ad30:	20 1d       	sub	sp,4
8002ad32:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ad36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad3a:	70 18       	ld.w	r8,r8[0x4]
8002ad3c:	10 99       	mov	r9,r8
8002ad3e:	e8 19 01 30 	orl	r9,0x130
8002ad42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad46:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002ad48:	30 08       	mov	r8,0
}
8002ad4a:	10 9c       	mov	r12,r8
8002ad4c:	2f fd       	sub	sp,-4
8002ad4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad52 <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002ad52:	eb cd 40 80 	pushm	r7,lr
8002ad56:	1a 97       	mov	r7,sp
8002ad58:	20 4d       	sub	sp,16
8002ad5a:	ef 4c ff f8 	st.w	r7[-8],r12
8002ad5e:	ef 4b ff f4 	st.w	r7[-12],r11
8002ad62:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002ad66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad6a:	f0 09 16 01 	lsr	r9,r8,0x1
8002ad6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ad72:	f2 08 00 08 	add	r8,r9,r8
8002ad76:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ad7a:	f0 09 0d 08 	divu	r8,r8,r9
8002ad7e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002ad82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad86:	58 08       	cp.w	r8,0
8002ad88:	c0 70       	breq	8002ad96 <usart_set_iso7816_clock+0x44>
8002ad8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad8e:	e0 48 ff ff 	cp.w	r8,65535
8002ad92:	e0 88 00 04 	brls	8002ad9a <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002ad96:	30 18       	mov	r8,1
8002ad98:	c1 28       	rjmp	8002adbc <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002ad9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad9e:	70 18       	ld.w	r8,r8[0x4]
8002ada0:	10 99       	mov	r9,r8
8002ada2:	e4 19 ff f7 	andh	r9,0xfff7
8002ada6:	e0 19 fe cf 	andl	r9,0xfecf
8002adaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adae:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002adb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002adb8:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002adba:	30 08       	mov	r8,0
}
8002adbc:	10 9c       	mov	r12,r8
8002adbe:	2f cd       	sub	sp,-16
8002adc0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002adc4 <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002adc4:	eb cd 40 80 	pushm	r7,lr
8002adc8:	1a 97       	mov	r7,sp
8002adca:	20 4d       	sub	sp,16
8002adcc:	ef 4c ff f8 	st.w	r7[-8],r12
8002add0:	ef 4b ff f4 	st.w	r7[-12],r11
8002add4:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002add8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002addc:	f0 09 16 01 	lsr	r9,r8,0x1
8002ade0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ade4:	f2 08 00 08 	add	r8,r9,r8
8002ade8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002adec:	f0 09 0d 08 	divu	r8,r8,r9
8002adf0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002adf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adf8:	58 38       	cp.w	r8,3
8002adfa:	e0 88 00 08 	brls	8002ae0a <usart_set_spi_master_baudrate+0x46>
8002adfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae02:	e0 48 ff ff 	cp.w	r8,65535
8002ae06:	e0 88 00 04 	brls	8002ae0e <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002ae0a:	30 18       	mov	r8,1
8002ae0c:	c1 08       	rjmp	8002ae2c <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ae0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae12:	70 18       	ld.w	r8,r8[0x4]
8002ae14:	10 99       	mov	r9,r8
8002ae16:	e0 19 ff cf 	andl	r9,0xffcf
8002ae1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae1e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002ae20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae24:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ae28:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002ae2a:	30 08       	mov	r8,0
}
8002ae2c:	10 9c       	mov	r12,r8
8002ae2e:	2f cd       	sub	sp,-16
8002ae30:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae34 <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002ae34:	eb cd 40 80 	pushm	r7,lr
8002ae38:	1a 97       	mov	r7,sp
8002ae3a:	20 1d       	sub	sp,4
8002ae3c:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002ae40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae44:	70 18       	ld.w	r8,r8[0x4]
8002ae46:	10 99       	mov	r9,r8
8002ae48:	e8 19 00 30 	orl	r9,0x30
8002ae4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae50:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002ae52:	30 08       	mov	r8,0
}
8002ae54:	10 9c       	mov	r12,r8
8002ae56:	2f fd       	sub	sp,-4
8002ae58:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae5c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002ae5c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ae60:	1a 97       	mov	r7,sp
8002ae62:	20 2d       	sub	sp,8
8002ae64:	49 a6       	lddpc	r6,8002aecc <usart_reset+0x70>
8002ae66:	1e 26       	rsub	r6,pc
8002ae68:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002ae6c:	e1 b8 00 00 	mfsr	r8,0x0
8002ae70:	10 9c       	mov	r12,r8
8002ae72:	ca be       	rcall	8002abc8 <cpu_irq_is_enabled_flags>
8002ae74:	18 98       	mov	r8,r12
8002ae76:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002ae7a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002ae7e:	30 08       	mov	r8,0
8002ae80:	f0 09 18 00 	cp.b	r9,r8
8002ae84:	c0 20       	breq	8002ae88 <usart_reset+0x2c>
8002ae86:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002ae88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae8c:	3f f9       	mov	r9,-1
8002ae8e:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002ae90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae94:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002ae96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002ae9a:	30 08       	mov	r8,0
8002ae9c:	f0 09 18 00 	cp.b	r9,r8
8002aea0:	c0 20       	breq	8002aea4 <usart_reset+0x48>
8002aea2:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002aea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aea8:	30 09       	mov	r9,0
8002aeaa:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002aeac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeb0:	30 09       	mov	r9,0
8002aeb2:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002aeb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeb8:	30 09       	mov	r9,0
8002aeba:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002aebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aec0:	ea 69 61 0c 	mov	r9,680204
8002aec4:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002aec6:	2f ed       	sub	sp,-8
8002aec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002aecc:	80 02       	ld.sh	r2,r0[0x0]
8002aece:	ac ea       	st.b	r6[0x6],r10

8002aed0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002aed0:	eb cd 40 c0 	pushm	r6-r7,lr
8002aed4:	1a 97       	mov	r7,sp
8002aed6:	20 3d       	sub	sp,12
8002aed8:	4d 86       	lddpc	r6,8002b038 <usart_init_rs232+0x168>
8002aeda:	1e 26       	rsub	r6,pc
8002aedc:	ef 4c ff fc 	st.w	r7[-4],r12
8002aee0:	ef 4b ff f8 	st.w	r7[-8],r11
8002aee4:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002aee8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002aeec:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002aef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aef4:	58 08       	cp.w	r8,0
8002aef6:	c3 80       	breq	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002aef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aefc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aefe:	30 48       	mov	r8,4
8002af00:	f0 09 18 00 	cp.b	r9,r8
8002af04:	e0 88 00 31 	brls	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002af08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af0c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af0e:	30 98       	mov	r8,9
8002af10:	f0 09 18 00 	cp.b	r9,r8
8002af14:	e0 8b 00 29 	brhi	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002af18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af1c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af1e:	30 78       	mov	r8,7
8002af20:	f0 09 18 00 	cp.b	r9,r8
8002af24:	e0 8b 00 21 	brhi	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002af28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af2c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af2e:	e0 68 01 01 	mov	r8,257
8002af32:	f0 09 19 00 	cp.h	r9,r8
8002af36:	e0 8b 00 18 	brhi	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002af3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af3e:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af42:	30 38       	mov	r8,3
8002af44:	f0 09 18 00 	cp.b	r9,r8
8002af48:	e0 8b 00 0f 	brhi	8002af66 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002af4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002af50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af54:	70 08       	ld.w	r8,r8[0x0]
8002af56:	12 9a       	mov	r10,r9
8002af58:	10 9b       	mov	r11,r8
8002af5a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002af5e:	c4 5e       	rcall	8002abe8 <usart_set_async_baudrate>
8002af60:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af62:	58 18       	cp.w	r8,1
8002af64:	c0 31       	brne	8002af6a <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002af66:	30 18       	mov	r8,1
8002af68:	c6 48       	rjmp	8002b030 <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002af6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af6e:	11 c9       	ld.ub	r9,r8[0x4]
8002af70:	30 98       	mov	r8,9
8002af72:	f0 09 18 00 	cp.b	r9,r8
8002af76:	c0 a1       	brne	8002af8a <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002af78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af7c:	70 18       	ld.w	r8,r8[0x4]
8002af7e:	10 99       	mov	r9,r8
8002af80:	b1 b9       	sbr	r9,0x11
8002af82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af86:	91 19       	st.w	r8[0x4],r9
8002af88:	c0 d8       	rjmp	8002afa2 <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002af8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af8e:	70 19       	ld.w	r9,r8[0x4]
8002af90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af94:	11 c8       	ld.ub	r8,r8[0x4]
8002af96:	20 58       	sub	r8,5
8002af98:	a7 68       	lsl	r8,0x6
8002af9a:	10 49       	or	r9,r8
8002af9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afa0:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002afa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afa6:	70 19       	ld.w	r9,r8[0x4]
8002afa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afac:	11 d8       	ld.ub	r8,r8[0x5]
8002afae:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002afb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afb6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002afba:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002afbc:	f5 e8 10 08 	or	r8,r10,r8
8002afc0:	10 49       	or	r9,r8
8002afc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afc6:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002afc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afcc:	90 39       	ld.sh	r9,r8[0x6]
8002afce:	30 28       	mov	r8,2
8002afd0:	f0 09 19 00 	cp.h	r9,r8
8002afd4:	e0 88 00 14 	brls	8002affc <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002afd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afdc:	70 18       	ld.w	r8,r8[0x4]
8002afde:	10 99       	mov	r9,r8
8002afe0:	ad b9       	sbr	r9,0xd
8002afe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afe6:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002afe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afec:	90 38       	ld.sh	r8,r8[0x6]
8002afee:	5c 78       	castu.h	r8
8002aff0:	20 28       	sub	r8,2
8002aff2:	10 99       	mov	r9,r8
8002aff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aff8:	91 a9       	st.w	r8[0x28],r9
8002affa:	c0 d8       	rjmp	8002b014 <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002affc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b000:	70 19       	ld.w	r9,r8[0x4]
8002b002:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b006:	90 38       	ld.sh	r8,r8[0x6]
8002b008:	5c 78       	castu.h	r8
8002b00a:	ad 68       	lsl	r8,0xc
8002b00c:	10 49       	or	r9,r8
8002b00e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b012:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b014:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b018:	70 18       	ld.w	r8,r8[0x4]
8002b01a:	10 99       	mov	r9,r8
8002b01c:	e0 19 ff f0 	andl	r9,0xfff0
8002b020:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b024:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b02a:	35 09       	mov	r9,80
8002b02c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b02e:	30 08       	mov	r8,0
}
8002b030:	10 9c       	mov	r12,r8
8002b032:	2f dd       	sub	sp,-12
8002b034:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b038:	80 02       	ld.sh	r2,r0[0x0]
8002b03a:	ad 5e       	asr	lr,0xd

8002b03c <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b03c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b040:	1a 97       	mov	r7,sp
8002b042:	20 3d       	sub	sp,12
8002b044:	4d c6       	lddpc	r6,8002b1b4 <usart_init_rs232_tx_only+0x178>
8002b046:	1e 26       	rsub	r6,pc
8002b048:	ef 4c ff fc 	st.w	r7[-4],r12
8002b04c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b050:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b054:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b058:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b05c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b060:	58 08       	cp.w	r8,0
8002b062:	c4 00       	breq	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b064:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b068:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b06a:	30 48       	mov	r8,4
8002b06c:	f0 09 18 00 	cp.b	r9,r8
8002b070:	e0 88 00 39 	brls	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b074:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b078:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b07a:	30 98       	mov	r8,9
8002b07c:	f0 09 18 00 	cp.b	r9,r8
8002b080:	e0 8b 00 31 	brhi	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b084:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b088:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b08a:	30 78       	mov	r8,7
8002b08c:	f0 09 18 00 	cp.b	r9,r8
8002b090:	e0 8b 00 29 	brhi	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b094:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b098:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b09a:	30 18       	mov	r8,1
8002b09c:	f0 09 19 00 	cp.h	r9,r8
8002b0a0:	c2 10       	breq	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b0a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0a6:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b0a8:	e0 68 01 01 	mov	r8,257
8002b0ac:	f0 09 19 00 	cp.h	r9,r8
8002b0b0:	e0 8b 00 19 	brhi	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b0b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0b8:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b0bc:	30 38       	mov	r8,3
8002b0be:	f0 09 18 00 	cp.b	r9,r8
8002b0c2:	e0 8b 00 10 	brhi	8002b0e2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b0c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b0ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0ce:	70 08       	ld.w	r8,r8[0x0]
8002b0d0:	12 9a       	mov	r10,r9
8002b0d2:	10 9b       	mov	r11,r8
8002b0d4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b0d8:	fe b0 fd f1 	rcall	8002acba <usart_set_sync_master_baudrate>
8002b0dc:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b0de:	58 18       	cp.w	r8,1
8002b0e0:	c0 31       	brne	8002b0e6 <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b0e2:	30 18       	mov	r8,1
8002b0e4:	c6 48       	rjmp	8002b1ac <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002b0e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0ea:	11 c9       	ld.ub	r9,r8[0x4]
8002b0ec:	30 98       	mov	r8,9
8002b0ee:	f0 09 18 00 	cp.b	r9,r8
8002b0f2:	c0 a1       	brne	8002b106 <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b0f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0f8:	70 18       	ld.w	r8,r8[0x4]
8002b0fa:	10 99       	mov	r9,r8
8002b0fc:	b1 b9       	sbr	r9,0x11
8002b0fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b102:	91 19       	st.w	r8[0x4],r9
8002b104:	c0 d8       	rjmp	8002b11e <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b10a:	70 19       	ld.w	r9,r8[0x4]
8002b10c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b110:	11 c8       	ld.ub	r8,r8[0x4]
8002b112:	20 58       	sub	r8,5
8002b114:	a7 68       	lsl	r8,0x6
8002b116:	10 49       	or	r9,r8
8002b118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b11c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b11e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b122:	70 19       	ld.w	r9,r8[0x4]
8002b124:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b128:	11 d8       	ld.ub	r8,r8[0x5]
8002b12a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b12e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b132:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b136:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b138:	f5 e8 10 08 	or	r8,r10,r8
8002b13c:	10 49       	or	r9,r8
8002b13e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b142:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b144:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b148:	90 39       	ld.sh	r9,r8[0x6]
8002b14a:	30 28       	mov	r8,2
8002b14c:	f0 09 19 00 	cp.h	r9,r8
8002b150:	e0 88 00 14 	brls	8002b178 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b154:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b158:	70 18       	ld.w	r8,r8[0x4]
8002b15a:	10 99       	mov	r9,r8
8002b15c:	ad b9       	sbr	r9,0xd
8002b15e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b162:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b164:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b168:	90 38       	ld.sh	r8,r8[0x6]
8002b16a:	5c 78       	castu.h	r8
8002b16c:	20 28       	sub	r8,2
8002b16e:	10 99       	mov	r9,r8
8002b170:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b174:	91 a9       	st.w	r8[0x28],r9
8002b176:	c0 d8       	rjmp	8002b190 <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b17c:	70 19       	ld.w	r9,r8[0x4]
8002b17e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b182:	90 38       	ld.sh	r8,r8[0x6]
8002b184:	5c 78       	castu.h	r8
8002b186:	ad 68       	lsl	r8,0xc
8002b188:	10 49       	or	r9,r8
8002b18a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b18e:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b190:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b194:	70 18       	ld.w	r8,r8[0x4]
8002b196:	10 99       	mov	r9,r8
8002b198:	e0 19 ff f0 	andl	r9,0xfff0
8002b19c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1a0:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002b1a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1a6:	34 09       	mov	r9,64
8002b1a8:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b1aa:	30 08       	mov	r8,0
}
8002b1ac:	10 9c       	mov	r12,r8
8002b1ae:	2f dd       	sub	sp,-12
8002b1b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b1b4:	80 02       	ld.sh	r2,r0[0x0]
8002b1b6:	ae ca       	st.b	r7[0x4],r10

8002b1b8 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b1b8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b1bc:	1a 97       	mov	r7,sp
8002b1be:	20 3d       	sub	sp,12
8002b1c0:	49 26       	lddpc	r6,8002b208 <usart_init_hw_handshaking+0x50>
8002b1c2:	1e 26       	rsub	r6,pc
8002b1c4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b1c8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b1cc:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b1d0:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b1d4:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b1d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b1dc:	f0 16 00 62 	mcall	r6[392]
8002b1e0:	18 98       	mov	r8,r12
8002b1e2:	58 18       	cp.w	r8,1
8002b1e4:	c0 31       	brne	8002b1ea <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002b1e6:	30 18       	mov	r8,1
8002b1e8:	c0 c8       	rjmp	8002b200 <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b1ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1ee:	70 18       	ld.w	r8,r8[0x4]
8002b1f0:	e0 18 ff f0 	andl	r8,0xfff0
8002b1f4:	10 99       	mov	r9,r8
8002b1f6:	a1 b9       	sbr	r9,0x1
8002b1f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1fc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b1fe:	30 08       	mov	r8,0
}
8002b200:	10 9c       	mov	r12,r8
8002b202:	2f dd       	sub	sp,-12
8002b204:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b208:	80 02       	ld.sh	r2,r0[0x0]
8002b20a:	b0 46       	st.h	r8[0x8],r6

8002b20c <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b20c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b210:	1a 97       	mov	r7,sp
8002b212:	20 3d       	sub	sp,12
8002b214:	49 36       	lddpc	r6,8002b260 <usart_init_modem+0x54>
8002b216:	1e 26       	rsub	r6,pc
8002b218:	ef 4c ff fc 	st.w	r7[-4],r12
8002b21c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b220:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b224:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b228:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b22c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b230:	f0 16 00 62 	mcall	r6[392]
8002b234:	18 98       	mov	r8,r12
8002b236:	58 18       	cp.w	r8,1
8002b238:	c0 31       	brne	8002b23e <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002b23a:	30 18       	mov	r8,1
8002b23c:	c0 d8       	rjmp	8002b256 <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b23e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b242:	70 18       	ld.w	r8,r8[0x4]
8002b244:	e0 18 ff f0 	andl	r8,0xfff0
8002b248:	10 99       	mov	r9,r8
8002b24a:	e8 19 00 03 	orl	r9,0x3
8002b24e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b252:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b254:	30 08       	mov	r8,0
}
8002b256:	10 9c       	mov	r12,r8
8002b258:	2f dd       	sub	sp,-12
8002b25a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b25e:	00 00       	add	r0,r0
8002b260:	80 02       	ld.sh	r2,r0[0x0]
8002b262:	b0 9a       	st.b	r8[0x1],r10

8002b264 <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b264:	eb cd 40 c0 	pushm	r6-r7,lr
8002b268:	1a 97       	mov	r7,sp
8002b26a:	20 3d       	sub	sp,12
8002b26c:	4d e6       	lddpc	r6,8002b3e4 <usart_init_sync_master+0x180>
8002b26e:	1e 26       	rsub	r6,pc
8002b270:	ef 4c ff fc 	st.w	r7[-4],r12
8002b274:	ef 4b ff f8 	st.w	r7[-8],r11
8002b278:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b27c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b280:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b284:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b288:	58 08       	cp.w	r8,0
8002b28a:	c4 00       	breq	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b28c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b290:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b292:	30 48       	mov	r8,4
8002b294:	f0 09 18 00 	cp.b	r9,r8
8002b298:	e0 88 00 39 	brls	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b29c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2a0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2a2:	30 98       	mov	r8,9
8002b2a4:	f0 09 18 00 	cp.b	r9,r8
8002b2a8:	e0 8b 00 31 	brhi	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b2ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2b0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2b2:	30 78       	mov	r8,7
8002b2b4:	f0 09 18 00 	cp.b	r9,r8
8002b2b8:	e0 8b 00 29 	brhi	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b2bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2c0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2c2:	30 18       	mov	r8,1
8002b2c4:	f0 09 19 00 	cp.h	r9,r8
8002b2c8:	c2 10       	breq	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b2ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2ce:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2d0:	e0 68 01 01 	mov	r8,257
8002b2d4:	f0 09 19 00 	cp.h	r9,r8
8002b2d8:	e0 8b 00 19 	brhi	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b2dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2e0:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2e4:	30 38       	mov	r8,3
8002b2e6:	f0 09 18 00 	cp.b	r9,r8
8002b2ea:	e0 8b 00 10 	brhi	8002b30a <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b2ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b2f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2f6:	70 08       	ld.w	r8,r8[0x0]
8002b2f8:	12 9a       	mov	r10,r9
8002b2fa:	10 9b       	mov	r11,r8
8002b2fc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b300:	fe b0 fc dd 	rcall	8002acba <usart_set_sync_master_baudrate>
8002b304:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b306:	58 18       	cp.w	r8,1
8002b308:	c0 31       	brne	8002b30e <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b30a:	30 18       	mov	r8,1
8002b30c:	c6 78       	rjmp	8002b3da <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002b30e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b312:	11 c9       	ld.ub	r9,r8[0x4]
8002b314:	30 98       	mov	r8,9
8002b316:	f0 09 18 00 	cp.b	r9,r8
8002b31a:	c0 a1       	brne	8002b32e <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b31c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b320:	70 18       	ld.w	r8,r8[0x4]
8002b322:	10 99       	mov	r9,r8
8002b324:	b1 b9       	sbr	r9,0x11
8002b326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b32a:	91 19       	st.w	r8[0x4],r9
8002b32c:	c0 d8       	rjmp	8002b346 <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b32e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b332:	70 19       	ld.w	r9,r8[0x4]
8002b334:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b338:	11 c8       	ld.ub	r8,r8[0x4]
8002b33a:	20 58       	sub	r8,5
8002b33c:	a7 68       	lsl	r8,0x6
8002b33e:	10 49       	or	r9,r8
8002b340:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b344:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b34a:	70 19       	ld.w	r9,r8[0x4]
8002b34c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b350:	11 d8       	ld.ub	r8,r8[0x5]
8002b352:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b35a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b35e:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b360:	f5 e8 10 08 	or	r8,r10,r8
8002b364:	10 49       	or	r9,r8
8002b366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b36a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b36c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b370:	90 39       	ld.sh	r9,r8[0x6]
8002b372:	30 28       	mov	r8,2
8002b374:	f0 09 19 00 	cp.h	r9,r8
8002b378:	e0 88 00 14 	brls	8002b3a0 <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b37c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b380:	70 18       	ld.w	r8,r8[0x4]
8002b382:	10 99       	mov	r9,r8
8002b384:	ad b9       	sbr	r9,0xd
8002b386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b38a:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b38c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b390:	90 38       	ld.sh	r8,r8[0x6]
8002b392:	5c 78       	castu.h	r8
8002b394:	20 28       	sub	r8,2
8002b396:	10 99       	mov	r9,r8
8002b398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b39c:	91 a9       	st.w	r8[0x28],r9
8002b39e:	c0 d8       	rjmp	8002b3b8 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b3a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3a4:	70 19       	ld.w	r9,r8[0x4]
8002b3a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3aa:	90 38       	ld.sh	r8,r8[0x6]
8002b3ac:	5c 78       	castu.h	r8
8002b3ae:	ad 68       	lsl	r8,0xc
8002b3b0:	10 49       	or	r9,r8
8002b3b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3b6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b3b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3bc:	70 18       	ld.w	r8,r8[0x4]
8002b3be:	e4 18 ff fb 	andh	r8,0xfffb
8002b3c2:	e0 18 ff f0 	andl	r8,0xfff0
8002b3c6:	10 99       	mov	r9,r8
8002b3c8:	b3 a9       	sbr	r9,0x12
8002b3ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3ce:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b3d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3d4:	35 09       	mov	r9,80
8002b3d6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b3d8:	30 08       	mov	r8,0
}
8002b3da:	10 9c       	mov	r12,r8
8002b3dc:	2f dd       	sub	sp,-12
8002b3de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b3e2:	00 00       	add	r0,r0
8002b3e4:	80 02       	ld.sh	r2,r0[0x0]
8002b3e6:	b0 f2       	st.b	r8[0x7],r2

8002b3e8 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b3e8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b3ec:	1a 97       	mov	r7,sp
8002b3ee:	20 3d       	sub	sp,12
8002b3f0:	4d 96       	lddpc	r6,8002b554 <usart_init_sync_slave+0x16c>
8002b3f2:	1e 26       	rsub	r6,pc
8002b3f4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b3f8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b3fc:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b400:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b404:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b40c:	58 08       	cp.w	r8,0
8002b40e:	c3 90       	breq	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b410:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b414:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b416:	30 48       	mov	r8,4
8002b418:	f0 09 18 00 	cp.b	r9,r8
8002b41c:	e0 88 00 32 	brls	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b420:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b424:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b426:	30 98       	mov	r8,9
8002b428:	f0 09 18 00 	cp.b	r9,r8
8002b42c:	e0 8b 00 2a 	brhi	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b430:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b434:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b436:	30 78       	mov	r8,7
8002b438:	f0 09 18 00 	cp.b	r9,r8
8002b43c:	e0 8b 00 22 	brhi	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b440:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b444:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b446:	30 18       	mov	r8,1
8002b448:	f0 09 19 00 	cp.h	r9,r8
8002b44c:	c1 a0       	breq	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b44e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b452:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b454:	e0 68 01 01 	mov	r8,257
8002b458:	f0 09 19 00 	cp.h	r9,r8
8002b45c:	e0 8b 00 12 	brhi	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b460:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b464:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b468:	30 38       	mov	r8,3
8002b46a:	f0 09 18 00 	cp.b	r9,r8
8002b46e:	e0 8b 00 09 	brhi	8002b480 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b472:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b476:	fe b0 fc 5a 	rcall	8002ad2a <usart_set_sync_slave_baudrate>
8002b47a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b47c:	58 18       	cp.w	r8,1
8002b47e:	c0 31       	brne	8002b484 <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b480:	30 18       	mov	r8,1
8002b482:	c6 48       	rjmp	8002b54a <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002b484:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b488:	11 c9       	ld.ub	r9,r8[0x4]
8002b48a:	30 98       	mov	r8,9
8002b48c:	f0 09 18 00 	cp.b	r9,r8
8002b490:	c0 a1       	brne	8002b4a4 <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b492:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b496:	70 18       	ld.w	r8,r8[0x4]
8002b498:	10 99       	mov	r9,r8
8002b49a:	b1 b9       	sbr	r9,0x11
8002b49c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4a0:	91 19       	st.w	r8[0x4],r9
8002b4a2:	c0 d8       	rjmp	8002b4bc <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b4a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4a8:	70 19       	ld.w	r9,r8[0x4]
8002b4aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4ae:	11 c8       	ld.ub	r8,r8[0x4]
8002b4b0:	20 58       	sub	r8,5
8002b4b2:	a7 68       	lsl	r8,0x6
8002b4b4:	10 49       	or	r9,r8
8002b4b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4ba:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b4bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4c0:	70 19       	ld.w	r9,r8[0x4]
8002b4c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4c6:	11 d8       	ld.ub	r8,r8[0x5]
8002b4c8:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b4cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4d0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b4d4:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b4d6:	f5 e8 10 08 	or	r8,r10,r8
8002b4da:	10 49       	or	r9,r8
8002b4dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4e0:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b4e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4e6:	90 39       	ld.sh	r9,r8[0x6]
8002b4e8:	30 28       	mov	r8,2
8002b4ea:	f0 09 19 00 	cp.h	r9,r8
8002b4ee:	e0 88 00 14 	brls	8002b516 <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b4f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f6:	70 18       	ld.w	r8,r8[0x4]
8002b4f8:	10 99       	mov	r9,r8
8002b4fa:	ad b9       	sbr	r9,0xd
8002b4fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b500:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b502:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b506:	90 38       	ld.sh	r8,r8[0x6]
8002b508:	5c 78       	castu.h	r8
8002b50a:	20 28       	sub	r8,2
8002b50c:	10 99       	mov	r9,r8
8002b50e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b512:	91 a9       	st.w	r8[0x28],r9
8002b514:	c0 d8       	rjmp	8002b52e <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b51a:	70 19       	ld.w	r9,r8[0x4]
8002b51c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b520:	90 38       	ld.sh	r8,r8[0x6]
8002b522:	5c 78       	castu.h	r8
8002b524:	ad 68       	lsl	r8,0xc
8002b526:	10 49       	or	r9,r8
8002b528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b52c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b52e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b532:	70 18       	ld.w	r8,r8[0x4]
8002b534:	10 99       	mov	r9,r8
8002b536:	e0 19 ff f0 	andl	r9,0xfff0
8002b53a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b53e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b540:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b544:	35 09       	mov	r9,80
8002b546:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b548:	30 08       	mov	r8,0
}
8002b54a:	10 9c       	mov	r12,r8
8002b54c:	2f dd       	sub	sp,-12
8002b54e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b552:	00 00       	add	r0,r0
8002b554:	80 02       	ld.sh	r2,r0[0x0]
8002b556:	b2 76       	st.h	r9[0xe],r6

8002b558 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b558:	eb cd 40 c0 	pushm	r6-r7,lr
8002b55c:	1a 97       	mov	r7,sp
8002b55e:	20 3d       	sub	sp,12
8002b560:	49 26       	lddpc	r6,8002b5a8 <usart_init_rs485+0x50>
8002b562:	1e 26       	rsub	r6,pc
8002b564:	ef 4c ff fc 	st.w	r7[-4],r12
8002b568:	ef 4b ff f8 	st.w	r7[-8],r11
8002b56c:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b570:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b574:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b578:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b57c:	f0 16 00 62 	mcall	r6[392]
8002b580:	18 98       	mov	r8,r12
8002b582:	58 18       	cp.w	r8,1
8002b584:	c0 31       	brne	8002b58a <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002b586:	30 18       	mov	r8,1
8002b588:	c0 c8       	rjmp	8002b5a0 <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b58a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b58e:	70 18       	ld.w	r8,r8[0x4]
8002b590:	e0 18 ff f0 	andl	r8,0xfff0
8002b594:	10 99       	mov	r9,r8
8002b596:	a1 a9       	sbr	r9,0x0
8002b598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b59c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b59e:	30 08       	mov	r8,0
}
8002b5a0:	10 9c       	mov	r12,r8
8002b5a2:	2f dd       	sub	sp,-12
8002b5a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b5a8:	80 02       	ld.sh	r2,r0[0x0]
8002b5aa:	b3 e6       	*unknown*

8002b5ac <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002b5ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002b5b0:	1a 97       	mov	r7,sp
8002b5b2:	20 4d       	sub	sp,16
8002b5b4:	49 96       	lddpc	r6,8002b618 <usart_init_IrDA+0x6c>
8002b5b6:	1e 26       	rsub	r6,pc
8002b5b8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b5bc:	ef 4b ff f8 	st.w	r7[-8],r11
8002b5c0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b5c4:	12 98       	mov	r8,r9
8002b5c6:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b5ca:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b5ce:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b5d2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b5d6:	f0 16 00 62 	mcall	r6[392]
8002b5da:	18 98       	mov	r8,r12
8002b5dc:	58 18       	cp.w	r8,1
8002b5de:	c0 31       	brne	8002b5e4 <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002b5e0:	30 18       	mov	r8,1
8002b5e2:	c1 78       	rjmp	8002b610 <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002b5e4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b5e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5ec:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b5f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5f4:	70 18       	ld.w	r8,r8[0x4]
8002b5f6:	e4 18 ef ff 	andh	r8,0xefff
8002b5fa:	e0 18 ff f0 	andl	r8,0xfff0
8002b5fe:	10 99       	mov	r9,r8
8002b600:	ea 19 10 00 	orh	r9,0x1000
8002b604:	e8 19 00 08 	orl	r9,0x8
8002b608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b60c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002b60e:	30 08       	mov	r8,0
}
8002b610:	10 9c       	mov	r12,r8
8002b612:	2f cd       	sub	sp,-16
8002b614:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b618:	80 02       	ld.sh	r2,r0[0x0]
8002b61a:	b4 3a       	st.h	r10[0x6],r10

8002b61c <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002b61c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b620:	1a 97       	mov	r7,sp
8002b622:	20 5d       	sub	sp,20
8002b624:	4c 46       	lddpc	r6,8002b734 <usart_init_iso7816+0x118>
8002b626:	1e 26       	rsub	r6,pc
8002b628:	ef 4c ff f8 	st.w	r7[-8],r12
8002b62c:	ef 4b ff f4 	st.w	r7[-12],r11
8002b630:	ef 4a ff f0 	st.w	r7[-16],r10
8002b634:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b638:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b63c:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b640:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b644:	58 08       	cp.w	r8,0
8002b646:	c0 90       	breq	8002b658 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002b648:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b64c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b64e:	30 18       	mov	r8,1
8002b650:	f0 09 18 00 	cp.b	r9,r8
8002b654:	e0 88 00 04 	brls	8002b65c <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002b658:	30 18       	mov	r8,1
8002b65a:	c6 98       	rjmp	8002b72c <usart_init_iso7816+0x110>

  if (t == 0)
8002b65c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b660:	58 08       	cp.w	r8,0
8002b662:	c0 c1       	brne	8002b67a <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b664:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b668:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002b66a:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b66c:	e8 18 20 04 	orl	r8,0x2004
8002b670:	10 99       	mov	r9,r8
8002b672:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b676:	91 19       	st.w	r8[0x4],r9
8002b678:	c1 98       	rjmp	8002b6aa <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002b67a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b67e:	58 18       	cp.w	r8,1
8002b680:	c1 31       	brne	8002b6a6 <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b682:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b686:	70 58       	ld.w	r8,r8[0x14]
8002b688:	58 08       	cp.w	r8,0
8002b68a:	c0 71       	brne	8002b698 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002b68c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b690:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b694:	58 08       	cp.w	r8,0
8002b696:	c0 30       	breq	8002b69c <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002b698:	30 18       	mov	r8,1
8002b69a:	c4 98       	rjmp	8002b72c <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002b69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6a0:	30 69       	mov	r9,6
8002b6a2:	91 19       	st.w	r8[0x4],r9
8002b6a4:	c0 38       	rjmp	8002b6aa <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002b6a6:	30 18       	mov	r8,1
8002b6a8:	c4 28       	rjmp	8002b72c <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002b6aa:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002b6ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6b2:	70 08       	ld.w	r8,r8[0x0]
8002b6b4:	12 9a       	mov	r10,r9
8002b6b6:	10 9b       	mov	r11,r8
8002b6b8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b6bc:	fe b0 fb 4b 	rcall	8002ad52 <usart_set_iso7816_clock>
8002b6c0:	18 98       	mov	r8,r12
8002b6c2:	58 18       	cp.w	r8,1
8002b6c4:	c0 31       	brne	8002b6ca <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002b6c6:	30 18       	mov	r8,1
8002b6c8:	c3 28       	rjmp	8002b72c <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002b6ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6ce:	90 28       	ld.sh	r8,r8[0x4]
8002b6d0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002b6d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6d8:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b6dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6e0:	70 19       	ld.w	r9,r8[0x4]
8002b6e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6e6:	11 e8       	ld.ub	r8,r8[0x6]
8002b6e8:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002b6ea:	10 9a       	mov	r10,r8
8002b6ec:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002b6ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6f2:	70 28       	ld.w	r8,r8[0x8]
8002b6f4:	b5 68       	lsl	r8,0x14
8002b6f6:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002b6f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6fc:	70 38       	ld.w	r8,r8[0xc]
8002b6fe:	b5 78       	lsl	r8,0x15
8002b700:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002b702:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b706:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b70a:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b70c:	f5 e8 10 08 	or	r8,r10,r8
8002b710:	10 49       	or	r9,r8
8002b712:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b716:	91 19       	st.w	r8[0x4],r9
8002b718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b71c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002b720:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b724:	e0 69 00 90 	mov	r9,144
8002b728:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002b72a:	30 08       	mov	r8,0
}
8002b72c:	10 9c       	mov	r12,r8
8002b72e:	2f bd       	sub	sp,-20
8002b730:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b734:	80 02       	ld.sh	r2,r0[0x0]
8002b736:	b4 aa       	st.b	r10[0x2],r10

8002b738 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b738:	eb cd 40 c0 	pushm	r6-r7,lr
8002b73c:	1a 97       	mov	r7,sp
8002b73e:	20 3d       	sub	sp,12
8002b740:	49 66       	lddpc	r6,8002b798 <usart_init_lin_master+0x60>
8002b742:	1e 26       	rsub	r6,pc
8002b744:	ef 4c ff fc 	st.w	r7[-4],r12
8002b748:	ef 4b ff f8 	st.w	r7[-8],r11
8002b74c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b750:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b754:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b758:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b75c:	10 9a       	mov	r10,r8
8002b75e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b762:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b766:	fe b0 fa 41 	rcall	8002abe8 <usart_set_async_baudrate>
8002b76a:	18 98       	mov	r8,r12
8002b76c:	58 18       	cp.w	r8,1
8002b76e:	c0 31       	brne	8002b774 <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002b770:	30 18       	mov	r8,1
8002b772:	c0 f8       	rjmp	8002b790 <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002b774:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b778:	70 18       	ld.w	r8,r8[0x4]
8002b77a:	10 99       	mov	r9,r8
8002b77c:	e8 19 00 0a 	orl	r9,0xa
8002b780:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b784:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b78a:	35 09       	mov	r9,80
8002b78c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b78e:	30 08       	mov	r8,0
}
8002b790:	10 9c       	mov	r12,r8
8002b792:	2f dd       	sub	sp,-12
8002b794:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b798:	80 02       	ld.sh	r2,r0[0x0]
8002b79a:	b5 c6       	cbr	r6,0x14

8002b79c <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b79c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b7a0:	1a 97       	mov	r7,sp
8002b7a2:	20 3d       	sub	sp,12
8002b7a4:	49 66       	lddpc	r6,8002b7fc <usart_init_lin_slave+0x60>
8002b7a6:	1e 26       	rsub	r6,pc
8002b7a8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b7ac:	ef 4b ff f8 	st.w	r7[-8],r11
8002b7b0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b7b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b7b8:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b7bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b7c0:	10 9a       	mov	r10,r8
8002b7c2:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b7c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b7ca:	fe b0 fa 0f 	rcall	8002abe8 <usart_set_async_baudrate>
8002b7ce:	18 98       	mov	r8,r12
8002b7d0:	58 18       	cp.w	r8,1
8002b7d2:	c0 31       	brne	8002b7d8 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002b7d4:	30 18       	mov	r8,1
8002b7d6:	c0 f8       	rjmp	8002b7f4 <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002b7d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7dc:	70 18       	ld.w	r8,r8[0x4]
8002b7de:	10 99       	mov	r9,r8
8002b7e0:	e8 19 00 0b 	orl	r9,0xb
8002b7e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7e8:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b7ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7ee:	35 09       	mov	r9,80
8002b7f0:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b7f2:	30 08       	mov	r8,0
}
8002b7f4:	10 9c       	mov	r12,r8
8002b7f6:	2f dd       	sub	sp,-12
8002b7f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7fc:	80 02       	ld.sh	r2,r0[0x0]
8002b7fe:	b6 2a       	st.h	r11[0x4],r10

8002b800 <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b800:	eb cd 40 c0 	pushm	r6-r7,lr
8002b804:	1a 97       	mov	r7,sp
8002b806:	20 3d       	sub	sp,12
8002b808:	4c 46       	lddpc	r6,8002b918 <usart_init_spi_master+0x118>
8002b80a:	1e 26       	rsub	r6,pc
8002b80c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b810:	ef 4b ff f8 	st.w	r7[-8],r11
8002b814:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b818:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b81c:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b820:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b824:	58 08       	cp.w	r8,0
8002b826:	c2 f0       	breq	8002b884 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b82c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b82e:	30 48       	mov	r8,4
8002b830:	f0 09 18 00 	cp.b	r9,r8
8002b834:	e0 88 00 28 	brls	8002b884 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b83c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b83e:	30 98       	mov	r8,9
8002b840:	f0 09 18 00 	cp.b	r9,r8
8002b844:	e0 8b 00 20 	brhi	8002b884 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b84c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b84e:	30 38       	mov	r8,3
8002b850:	f0 09 18 00 	cp.b	r9,r8
8002b854:	e0 8b 00 18 	brhi	8002b884 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b85c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b85e:	30 38       	mov	r8,3
8002b860:	f0 09 18 00 	cp.b	r9,r8
8002b864:	e0 8b 00 10 	brhi	8002b884 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b868:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b86c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b870:	70 08       	ld.w	r8,r8[0x0]
8002b872:	12 9a       	mov	r10,r9
8002b874:	10 9b       	mov	r11,r8
8002b876:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b87a:	fe b0 fa a5 	rcall	8002adc4 <usart_set_spi_master_baudrate>
8002b87e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b880:	58 18       	cp.w	r8,1
8002b882:	c0 31       	brne	8002b888 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b884:	30 18       	mov	r8,1
8002b886:	c4 48       	rjmp	8002b90e <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002b888:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b88c:	11 c9       	ld.ub	r9,r8[0x4]
8002b88e:	30 98       	mov	r8,9
8002b890:	f0 09 18 00 	cp.b	r9,r8
8002b894:	c0 a1       	brne	8002b8a8 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b896:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b89a:	70 18       	ld.w	r8,r8[0x4]
8002b89c:	10 99       	mov	r9,r8
8002b89e:	b1 b9       	sbr	r9,0x11
8002b8a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8a4:	91 19       	st.w	r8[0x4],r9
8002b8a6:	c0 d8       	rjmp	8002b8c0 <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b8a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8ac:	70 19       	ld.w	r9,r8[0x4]
8002b8ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8b2:	11 c8       	ld.ub	r8,r8[0x4]
8002b8b4:	20 58       	sub	r8,5
8002b8b6:	a7 68       	lsl	r8,0x6
8002b8b8:	10 49       	or	r9,r8
8002b8ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8be:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b8c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8c4:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b8c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8ca:	11 d8       	ld.ub	r8,r8[0x5]
8002b8cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b8d0:	c0 41       	brne	8002b8d8 <usart_init_spi_master+0xd8>
8002b8d2:	e0 68 01 0e 	mov	r8,270
8002b8d6:	c0 28       	rjmp	8002b8da <usart_init_spi_master+0xda>
8002b8d8:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b8da:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b8de:	15 ea       	ld.ub	r10,r10[0x6]
8002b8e0:	af 6a       	lsl	r10,0xe
8002b8e2:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002b8e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8ea:	11 d8       	ld.ub	r8,r8[0x5]
8002b8ec:	a1 98       	lsr	r8,0x1
8002b8ee:	5c 58       	castu.b	r8
8002b8f0:	b1 68       	lsl	r8,0x10
8002b8f2:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b8f6:	f3 e8 10 08 	or	r8,r9,r8
8002b8fa:	10 99       	mov	r9,r8
8002b8fc:	b3 a9       	sbr	r9,0x12
8002b8fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b902:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b908:	35 09       	mov	r9,80
8002b90a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b90c:	30 08       	mov	r8,0
}
8002b90e:	10 9c       	mov	r12,r8
8002b910:	2f dd       	sub	sp,-12
8002b912:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b916:	00 00       	add	r0,r0
8002b918:	80 02       	ld.sh	r2,r0[0x0]
8002b91a:	b6 8e       	st.b	r11[0x0],lr

8002b91c <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b91c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b920:	1a 97       	mov	r7,sp
8002b922:	20 3d       	sub	sp,12
8002b924:	4b f6       	lddpc	r6,8002ba20 <usart_init_spi_slave+0x104>
8002b926:	1e 26       	rsub	r6,pc
8002b928:	ef 4c ff fc 	st.w	r7[-4],r12
8002b92c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b930:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b934:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b938:	f0 16 00 4a 	mcall	r6[296]

  // Check input values.
  if (!opt || // Null pointer.
8002b93c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b940:	58 08       	cp.w	r8,0
8002b942:	c2 80       	breq	8002b992 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b944:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b948:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b94a:	30 48       	mov	r8,4
8002b94c:	f0 09 18 00 	cp.b	r9,r8
8002b950:	e0 88 00 21 	brls	8002b992 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b954:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b958:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b95a:	30 98       	mov	r8,9
8002b95c:	f0 09 18 00 	cp.b	r9,r8
8002b960:	e0 8b 00 19 	brhi	8002b992 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b964:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b968:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b96a:	30 38       	mov	r8,3
8002b96c:	f0 09 18 00 	cp.b	r9,r8
8002b970:	e0 8b 00 11 	brhi	8002b992 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b974:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b978:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b97a:	30 38       	mov	r8,3
8002b97c:	f0 09 18 00 	cp.b	r9,r8
8002b980:	e0 8b 00 09 	brhi	8002b992 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b984:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b988:	fe b0 fa 56 	rcall	8002ae34 <usart_set_spi_slave_baudrate>
8002b98c:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b98e:	58 18       	cp.w	r8,1
8002b990:	c0 31       	brne	8002b996 <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b992:	30 18       	mov	r8,1
8002b994:	c4 18       	rjmp	8002ba16 <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002b996:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b99a:	11 c9       	ld.ub	r9,r8[0x4]
8002b99c:	30 98       	mov	r8,9
8002b99e:	f0 09 18 00 	cp.b	r9,r8
8002b9a2:	c0 a1       	brne	8002b9b6 <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b9a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9a8:	70 18       	ld.w	r8,r8[0x4]
8002b9aa:	10 99       	mov	r9,r8
8002b9ac:	b1 b9       	sbr	r9,0x11
8002b9ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9b2:	91 19       	st.w	r8[0x4],r9
8002b9b4:	c0 d8       	rjmp	8002b9ce <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b9b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9ba:	70 19       	ld.w	r9,r8[0x4]
8002b9bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9c0:	11 c8       	ld.ub	r8,r8[0x4]
8002b9c2:	20 58       	sub	r8,5
8002b9c4:	a7 68       	lsl	r8,0x6
8002b9c6:	10 49       	or	r9,r8
8002b9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9cc:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002b9ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9d2:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b9d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9d8:	11 d8       	ld.ub	r8,r8[0x5]
8002b9da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b9de:	c0 41       	brne	8002b9e6 <usart_init_spi_slave+0xca>
8002b9e0:	e0 68 01 0f 	mov	r8,271
8002b9e4:	c0 28       	rjmp	8002b9e8 <usart_init_spi_slave+0xcc>
8002b9e6:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b9e8:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b9ec:	15 ea       	ld.ub	r10,r10[0x6]
8002b9ee:	af 6a       	lsl	r10,0xe
8002b9f0:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002b9f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9f8:	11 d8       	ld.ub	r8,r8[0x5]
8002b9fa:	a1 98       	lsr	r8,0x1
8002b9fc:	5c 58       	castu.b	r8
8002b9fe:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002ba00:	f5 e8 10 08 	or	r8,r10,r8
8002ba04:	10 49       	or	r9,r8
8002ba06:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba0a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002ba0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba10:	35 09       	mov	r9,80
8002ba12:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002ba14:	30 08       	mov	r8,0
}
8002ba16:	10 9c       	mov	r12,r8
8002ba18:	2f dd       	sub	sp,-12
8002ba1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ba1e:	00 00       	add	r0,r0
8002ba20:	80 02       	ld.sh	r2,r0[0x0]
8002ba22:	b7 aa       	sbr	r10,0x16

8002ba24 <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002ba24:	eb cd 40 80 	pushm	r7,lr
8002ba28:	1a 97       	mov	r7,sp
8002ba2a:	20 1d       	sub	sp,4
8002ba2c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002ba30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba34:	e4 69 00 00 	mov	r9,262144
8002ba38:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002ba3a:	30 08       	mov	r8,0
}
8002ba3c:	10 9c       	mov	r12,r8
8002ba3e:	2f fd       	sub	sp,-4
8002ba40:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ba44 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002ba44:	eb cd 40 80 	pushm	r7,lr
8002ba48:	1a 97       	mov	r7,sp
8002ba4a:	20 3d       	sub	sp,12
8002ba4c:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002ba50:	e0 68 27 10 	mov	r8,10000
8002ba54:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002ba58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba5c:	58 08       	cp.w	r8,0
8002ba5e:	5f 08       	sreq	r8
8002ba60:	5c 58       	castu.b	r8
8002ba62:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ba66:	20 19       	sub	r9,1
8002ba68:	ef 49 ff f8 	st.w	r7[-8],r9
8002ba6c:	58 08       	cp.w	r8,0
8002ba6e:	c0 30       	breq	8002ba74 <usart_spi_unselectChip+0x30>
8002ba70:	3f f8       	mov	r8,-1
8002ba72:	c1 38       	rjmp	8002ba98 <usart_spi_unselectChip+0x54>
8002ba74:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba78:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002ba7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba80:	70 58       	ld.w	r8,r8[0x14]
8002ba82:	e2 18 02 00 	andl	r8,0x200,COH
8002ba86:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002ba88:	58 08       	cp.w	r8,0
8002ba8a:	ce 70       	breq	8002ba58 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002ba8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba90:	e8 69 00 00 	mov	r9,524288
8002ba94:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002ba96:	30 08       	mov	r8,0
}
8002ba98:	10 9c       	mov	r12,r8
8002ba9a:	2f dd       	sub	sp,-12
8002ba9c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002baa0 <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002baa0:	eb cd 40 c0 	pushm	r6-r7,lr
8002baa4:	1a 97       	mov	r7,sp
8002baa6:	20 5d       	sub	sp,20
8002baa8:	49 96       	lddpc	r6,8002bb0c <usart_send_address+0x6c>
8002baaa:	1e 26       	rsub	r6,pc
8002baac:	ef 4c ff f0 	st.w	r7[-16],r12
8002bab0:	ef 4b ff ec 	st.w	r7[-20],r11
8002bab4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bab8:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002babc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bac0:	70 18       	ld.w	r8,r8[0x4]
8002bac2:	a9 98       	lsr	r8,0x9
8002bac4:	e2 18 00 06 	andl	r8,0x6,COH
8002bac8:	58 68       	cp.w	r8,6
8002baca:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002bacc:	58 08       	cp.w	r8,0
8002bace:	c0 31       	brne	8002bad4 <usart_send_address+0x34>
8002bad0:	30 58       	mov	r8,5
8002bad2:	c1 88       	rjmp	8002bb02 <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002bad4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bad8:	e0 69 10 00 	mov	r9,4096
8002badc:	91 09       	st.w	r8[0x0],r9
8002bade:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bae2:	ef 48 ff fc 	st.w	r7[-4],r8
8002bae6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002baea:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002baee:	ee fb ff f8 	ld.w	r11,r7[-8]
8002baf2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002baf6:	f0 16 01 0e 	mcall	r6[1080]
8002bafa:	18 98       	mov	r8,r12
8002bafc:	58 08       	cp.w	r8,0
8002bafe:	cf 81       	brne	8002baee <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002bb00:	30 08       	mov	r8,0
}
8002bb02:	10 9c       	mov	r12,r8
8002bb04:	2f bd       	sub	sp,-20
8002bb06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb0a:	00 00       	add	r0,r0
8002bb0c:	80 02       	ld.sh	r2,r0[0x0]
8002bb0e:	b9 2e       	st.d	r12++,lr

8002bb10 <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002bb10:	eb cd 40 80 	pushm	r7,lr
8002bb14:	1a 97       	mov	r7,sp
8002bb16:	20 3d       	sub	sp,12
8002bb18:	ef 4c ff f8 	st.w	r7[-8],r12
8002bb1c:	ef 4b ff f4 	st.w	r7[-12],r11
8002bb20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb24:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002bb28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb2c:	70 58       	ld.w	r8,r8[0x14]
8002bb2e:	e2 18 00 02 	andl	r8,0x2,COH
8002bb32:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002bb34:	58 08       	cp.w	r8,0
8002bb36:	c0 a0       	breq	8002bb4a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002bb38:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bb3c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bb40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb44:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002bb46:	30 08       	mov	r8,0
8002bb48:	c0 28       	rjmp	8002bb4c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002bb4a:	30 28       	mov	r8,2
}
8002bb4c:	10 9c       	mov	r12,r8
8002bb4e:	2f dd       	sub	sp,-12
8002bb50:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb54 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002bb54:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb58:	1a 97       	mov	r7,sp
8002bb5a:	20 3d       	sub	sp,12
8002bb5c:	49 36       	lddpc	r6,8002bba8 <usart_putchar+0x54>
8002bb5e:	1e 26       	rsub	r6,pc
8002bb60:	ef 4c ff f8 	st.w	r7[-8],r12
8002bb64:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002bb68:	e0 68 27 10 	mov	r8,10000
8002bb6c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002bb70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb74:	58 08       	cp.w	r8,0
8002bb76:	5f 08       	sreq	r8
8002bb78:	5c 58       	castu.b	r8
8002bb7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bb7e:	20 19       	sub	r9,1
8002bb80:	ef 49 ff fc 	st.w	r7[-4],r9
8002bb84:	58 08       	cp.w	r8,0
8002bb86:	c0 30       	breq	8002bb8c <usart_putchar+0x38>
8002bb88:	3f f8       	mov	r8,-1
8002bb8a:	c0 b8       	rjmp	8002bba0 <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002bb8c:	ee fb ff f4 	ld.w	r11,r7[-12]
8002bb90:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bb94:	f0 16 01 0e 	mcall	r6[1080]
8002bb98:	18 98       	mov	r8,r12
8002bb9a:	58 08       	cp.w	r8,0
8002bb9c:	ce a1       	brne	8002bb70 <usart_putchar+0x1c>

  return USART_SUCCESS;
8002bb9e:	30 08       	mov	r8,0
}
8002bba0:	10 9c       	mov	r12,r8
8002bba2:	2f dd       	sub	sp,-12
8002bba4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bba8:	80 02       	ld.sh	r2,r0[0x0]
8002bbaa:	b9 e2       	*unknown*

8002bbac <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002bbac:	eb cd 40 80 	pushm	r7,lr
8002bbb0:	1a 97       	mov	r7,sp
8002bbb2:	20 3d       	sub	sp,12
8002bbb4:	ef 4c ff f8 	st.w	r7[-8],r12
8002bbb8:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002bbbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbc0:	70 58       	ld.w	r8,r8[0x14]
8002bbc2:	e2 18 00 e0 	andl	r8,0xe0,COH
8002bbc6:	c0 30       	breq	8002bbcc <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002bbc8:	30 48       	mov	r8,4
8002bbca:	c1 68       	rjmp	8002bbf6 <usart_read_char+0x4a>
8002bbcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbd0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002bbd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbd8:	70 58       	ld.w	r8,r8[0x14]
8002bbda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002bbde:	c0 b0       	breq	8002bbf4 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002bbe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbe4:	70 68       	ld.w	r8,r8[0x18]
8002bbe6:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bbea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbee:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002bbf0:	30 08       	mov	r8,0
8002bbf2:	c0 28       	rjmp	8002bbf6 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002bbf4:	30 38       	mov	r8,3
}
8002bbf6:	10 9c       	mov	r12,r8
8002bbf8:	2f dd       	sub	sp,-12
8002bbfa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bbfe <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002bbfe:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc02:	1a 97       	mov	r7,sp
8002bc04:	20 3d       	sub	sp,12
8002bc06:	49 06       	lddpc	r6,8002bc44 <usart_getchar+0x46>
8002bc08:	1e 26       	rsub	r6,pc
8002bc0a:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002bc0e:	ee c8 00 08 	sub	r8,r7,8
8002bc12:	10 9b       	mov	r11,r8
8002bc14:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bc18:	f0 16 01 f4 	mcall	r6[2000]
8002bc1c:	18 98       	mov	r8,r12
8002bc1e:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc26:	58 38       	cp.w	r8,3
8002bc28:	cf 30       	breq	8002bc0e <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002bc2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc2e:	58 48       	cp.w	r8,4
8002bc30:	c0 31       	brne	8002bc36 <usart_getchar+0x38>
    return USART_FAILURE;
8002bc32:	3f f8       	mov	r8,-1
8002bc34:	c0 38       	rjmp	8002bc3a <usart_getchar+0x3c>

  return c;
8002bc36:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002bc3a:	10 9c       	mov	r12,r8
8002bc3c:	2f dd       	sub	sp,-12
8002bc3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc42:	00 00       	add	r0,r0
8002bc44:	80 02       	ld.sh	r2,r0[0x0]
8002bc46:	ba 8c       	st.b	sp[0x0],r12

8002bc48 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002bc48:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc4c:	1a 97       	mov	r7,sp
8002bc4e:	20 2d       	sub	sp,8
8002bc50:	48 e6       	lddpc	r6,8002bc88 <usart_write_line+0x40>
8002bc52:	1e 26       	rsub	r6,pc
8002bc54:	ef 4c ff fc 	st.w	r7[-4],r12
8002bc58:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002bc5c:	c0 e8       	rjmp	8002bc78 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002bc5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc62:	11 88       	ld.ub	r8,r8[0x0]
8002bc64:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bc68:	2f f9       	sub	r9,-1
8002bc6a:	ef 49 ff f8 	st.w	r7[-8],r9
8002bc6e:	10 9b       	mov	r11,r8
8002bc70:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc74:	f0 16 00 9e 	mcall	r6[632]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002bc78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc7c:	11 88       	ld.ub	r8,r8[0x0]
8002bc7e:	58 08       	cp.w	r8,0
8002bc80:	ce f1       	brne	8002bc5e <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002bc82:	2f ed       	sub	sp,-8
8002bc84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc88:	80 02       	ld.sh	r2,r0[0x0]
8002bc8a:	ba d6       	st.b	sp[0x5],r6
8002bc8c:	45 72       	lddsp	r2,sp[0x15c]
8002bc8e:	72 6f       	ld.w	pc,r9[0x18]
8002bc90:	72 21       	ld.w	r1,r9[0x8]
8002bc92:	21 21       	sub	r1,18
8002bc94:	0d 0a       	ld.w	r10,r6++
	...

8002bc98 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002bc98:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc9c:	1a 97       	mov	r7,sp
8002bc9e:	20 3d       	sub	sp,12
8002bca0:	49 e6       	lddpc	r6,8002bd18 <usart_get_echo_line+0x80>
8002bca2:	1e 26       	rsub	r6,pc
8002bca4:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002bca8:	30 08       	mov	r8,0
8002bcaa:	ef 48 ff fc 	st.w	r7[-4],r8
8002bcae:	c0 28       	rjmp	8002bcb2 <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002bcb0:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002bcb2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bcb6:	f0 16 01 c1 	mcall	r6[1796]
8002bcba:	18 98       	mov	r8,r12
8002bcbc:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002bcc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcc4:	5b f8       	cp.w	r8,-1
8002bcc6:	c0 b1       	brne	8002bcdc <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002bcc8:	fe cb 00 3c 	sub	r11,pc,60
8002bccc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bcd0:	f0 16 01 56 	mcall	r6[1368]
      retval = USART_FAILURE;
8002bcd4:	3f f8       	mov	r8,-1
8002bcd6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002bcda:	c1 98       	rjmp	8002bd0c <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002bcdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bce0:	58 38       	cp.w	r8,3
8002bce2:	c0 51       	brne	8002bcec <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002bce4:	3f f8       	mov	r8,-1
8002bce6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002bcea:	c1 18       	rjmp	8002bd0c <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002bcec:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bcf0:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bcf4:	f0 16 00 9e 	mcall	r6[632]
    if (rx_char == '\r')
8002bcf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcfc:	58 d8       	cp.w	r8,13
8002bcfe:	cd 91       	brne	8002bcb0 <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002bd00:	30 ab       	mov	r11,10
8002bd02:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bd06:	f0 16 00 9e 	mcall	r6[632]
      break;
8002bd0a:	d7 03       	nop
    }
  }

  return retval;
8002bd0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bd10:	10 9c       	mov	r12,r8
8002bd12:	2f dd       	sub	sp,-12
8002bd14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd18:	80 02       	ld.sh	r2,r0[0x0]
8002bd1a:	bb 26       	st.d	sp++,r6

8002bd1c <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002bd1c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd20:	1a 97       	mov	r7,sp
8002bd22:	20 1d       	sub	sp,4
8002bd24:	48 66       	lddpc	r6,8002bd3c <delay_init+0x20>
8002bd26:	1e 26       	rsub	r6,pc
8002bd28:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002bd2c:	ec f8 04 a8 	ld.w	r8,r6[1192]
8002bd30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd34:	91 09       	st.w	r8[0x0],r9
#endif
}
8002bd36:	2f fd       	sub	sp,-4
8002bd38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd3c:	80 02       	ld.sh	r2,r0[0x0]
8002bd3e:	bb aa       	sbr	r10,0x1a

8002bd40 <delay_ms>:


void delay_ms(unsigned long delay)
{
8002bd40:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd44:	1a 97       	mov	r7,sp
8002bd46:	20 cd       	sub	sp,48
8002bd48:	4d 36       	lddpc	r6,8002be94 <delay_ms+0x154>
8002bd4a:	1e 26       	rsub	r6,pc
8002bd4c:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002bd50:	ec fc 04 a8 	ld.w	r12,r6[1192]
8002bd54:	78 0c       	ld.w	r12,r12[0x0]
8002bd56:	ee fe ff d0 	ld.w	lr,r7[-48]
8002bd5a:	ef 4e ff e4 	st.w	r7[-28],lr
8002bd5e:	ef 4c ff e0 	st.w	r7[-32],r12
8002bd62:	ee fc ff e4 	ld.w	r12,r7[-28]
8002bd66:	ef 4c ff ec 	st.w	r7[-20],r12
8002bd6a:	ee fc ff e0 	ld.w	r12,r7[-32]
8002bd6e:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002bd72:	ee fa ff ec 	ld.w	r10,r7[-20]
8002bd76:	30 0b       	mov	r11,0
8002bd78:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002bd7c:	30 09       	mov	r9,0
8002bd7e:	f6 08 02 4c 	mul	r12,r11,r8
8002bd82:	f2 0a 02 4e 	mul	lr,r9,r10
8002bd86:	1c 0c       	add	r12,lr
8002bd88:	f4 08 06 48 	mulu.d	r8,r10,r8
8002bd8c:	12 0c       	add	r12,r9
8002bd8e:	18 99       	mov	r9,r12
8002bd90:	e0 6a 03 e7 	mov	r10,999
8002bd94:	30 0b       	mov	r11,0
8002bd96:	f0 0a 00 0a 	add	r10,r8,r10
8002bd9a:	f2 0b 00 4b 	adc	r11,r9,r11
8002bd9e:	e0 68 03 e8 	mov	r8,1000
8002bda2:	30 09       	mov	r9,0
8002bda4:	f0 16 00 fb 	mcall	r6[1004]
8002bda8:	14 98       	mov	r8,r10
8002bdaa:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002bdac:	ef 48 ff f4 	st.w	r7[-12],r8
8002bdb0:	ee c8 00 2c 	sub	r8,r7,44
8002bdb4:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002bdb8:	e1 b8 00 42 	mfsr	r8,0x108
8002bdbc:	10 99       	mov	r9,r8
8002bdbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bdc2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002bdc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bdc8:	70 09       	ld.w	r9,r8[0x0]
8002bdca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bdce:	10 09       	add	r9,r8
8002bdd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bdd4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002bdd6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002bdda:	30 08       	mov	r8,0
8002bddc:	f3 68 00 08 	st.b	r9[8],r8
8002bde0:	ee c8 00 2c 	sub	r8,r7,44
8002bde4:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002bde8:	e1 b8 00 42 	mfsr	r8,0x108
8002bdec:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002bdf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bdf4:	f1 39 00 08 	ld.ub	r9,r8[8]
8002bdf8:	30 28       	mov	r8,2
8002bdfa:	f0 09 18 00 	cp.b	r9,r8
8002bdfe:	c0 31       	brne	8002be04 <delay_ms+0xc4>
    return false;
8002be00:	30 08       	mov	r8,0
8002be02:	c4 38       	rjmp	8002be88 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002be04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be08:	f1 39 00 08 	ld.ub	r9,r8[8]
8002be0c:	30 18       	mov	r8,1
8002be0e:	f0 09 18 00 	cp.b	r9,r8
8002be12:	c0 31       	brne	8002be18 <delay_ms+0xd8>
    return true;
8002be14:	30 18       	mov	r8,1
8002be16:	c3 98       	rjmp	8002be88 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002be18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be1c:	70 09       	ld.w	r9,r8[0x0]
8002be1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be22:	70 18       	ld.w	r8,r8[0x4]
8002be24:	10 39       	cp.w	r9,r8
8002be26:	e0 88 00 1a 	brls	8002be5a <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002be2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be2e:	70 08       	ld.w	r8,r8[0x0]
8002be30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be34:	10 39       	cp.w	r9,r8
8002be36:	c1 02       	brcc	8002be56 <delay_ms+0x116>
8002be38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be3c:	70 18       	ld.w	r8,r8[0x4]
8002be3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be42:	10 39       	cp.w	r9,r8
8002be44:	e0 88 00 09 	brls	8002be56 <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002be48:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002be4c:	30 18       	mov	r8,1
8002be4e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002be52:	30 18       	mov	r8,1
8002be54:	c1 a8       	rjmp	8002be88 <delay_ms+0x148>
    }
    return false;
8002be56:	30 08       	mov	r8,0
8002be58:	c1 88       	rjmp	8002be88 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002be5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be5e:	70 08       	ld.w	r8,r8[0x0]
8002be60:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be64:	10 39       	cp.w	r9,r8
8002be66:	c0 93       	brcs	8002be78 <delay_ms+0x138>
8002be68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be6c:	70 18       	ld.w	r8,r8[0x4]
8002be6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be72:	10 39       	cp.w	r9,r8
8002be74:	e0 88 00 09 	brls	8002be86 <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002be78:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002be7c:	30 18       	mov	r8,1
8002be7e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002be82:	30 18       	mov	r8,1
8002be84:	c0 28       	rjmp	8002be88 <delay_ms+0x148>
    }
    return false;
8002be86:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002be88:	58 08       	cp.w	r8,0
8002be8a:	ca b0       	breq	8002bde0 <delay_ms+0xa0>
#endif
}
8002be8c:	2f 4d       	sub	sp,-48
8002be8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be92:	00 00       	add	r0,r0
8002be94:	80 02       	ld.sh	r2,r0[0x0]
8002be96:	bb ce       	cbr	lr,0x1a

8002be98 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002be98:	48 dd       	lddpc	sp,8002becc <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002be9a:	fe c0 a0 9a 	sub	r0,pc,-24422
  mtsr    AVR32_EVBA, r0
8002be9e:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002bea2:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002bea4:	48 b0       	lddpc	r0,8002bed0 <udata_clear_loop_end+0x8>
  cp      r0, r1
8002bea6:	48 c1       	lddpc	r1,8002bed4 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002bea8:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002beaa:	c0 62       	brcc	8002beb6 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002beac:	48 b2       	lddpc	r2,8002bed8 <udata_clear_loop_end+0x10>

8002beae <idata_load_loop>:
  st.d    r0++, r4
8002beae:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002beb0:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002beb2:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002beb4:	cf d3       	brcs	8002beae <idata_load_loop>

8002beb6 <idata_load_loop_end>:
  lda.w   r1, _end
8002beb6:	48 a0       	lddpc	r0,8002bedc <udata_clear_loop_end+0x14>
  cp      r0, r1
8002beb8:	48 a1       	lddpc	r1,8002bee0 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002beba:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002bebc:	c0 62       	brcc	8002bec8 <udata_clear_loop_end>
  mov     r3, 0
8002bebe:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002bec0:	30 03       	mov	r3,0

8002bec2 <udata_clear_loop>:
  cp      r0, r1
8002bec2:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002bec4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002bec6:	cf e3       	brcs	8002bec2 <udata_clear_loop>

8002bec8 <udata_clear_loop_end>:
8002bec8:	fe cf e6 ec 	sub	pc,pc,-6420
8002becc:	00 01       	add	r1,r0
8002bece:	00 00       	add	r0,r0
8002bed0:	00 00       	add	r0,r0
8002bed2:	00 04       	add	r4,r0
8002bed4:	00 00       	add	r0,r0
8002bed6:	23 20       	sub	r0,50
8002bed8:	80 03       	ld.sh	r3,r0[0x0]
8002beda:	26 50       	sub	r0,101
8002bedc:	00 00       	add	r0,r0
8002bede:	23 20       	sub	r0,50
8002bee0:	00 00       	add	r0,r0
8002bee2:	97 a8       	st.w	r11[0x28],r8

8002bee4 <board_init>:
8002bee4:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002bee8:	1a 97       	mov	r7,sp
8002beea:	48 76       	lddpc	r6,8002bf04 <board_init+0x20>
8002beec:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002beee:	30 1b       	mov	r11,1
8002bef0:	32 0c       	mov	r12,32
8002bef2:	f0 16 00 3a 	mcall	r6[232]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002bef6:	30 1b       	mov	r11,1
8002bef8:	32 1c       	mov	r12,33
8002befa:	f0 16 00 3a 	mcall	r6[232]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002befe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf02:	00 00       	add	r0,r0
8002bf04:	80 02       	ld.sh	r2,r0[0x0]
8002bf06:	bd 70       	lsl	r0,0x1d

8002bf08 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002bf08:	eb cd 40 80 	pushm	r7,lr
8002bf0c:	1a 97       	mov	r7,sp
8002bf0e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002bf10:	e1 b8 00 00 	mfsr	r8,0x0
8002bf14:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002bf18:	d3 03       	ssrf	0x10

	return flags;
8002bf1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bf1e:	10 9c       	mov	r12,r8
8002bf20:	2f fd       	sub	sp,-4
8002bf22:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf26 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002bf26:	eb cd 40 80 	pushm	r7,lr
8002bf2a:	1a 97       	mov	r7,sp
8002bf2c:	20 1d       	sub	sp,4
8002bf2e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002bf32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf36:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002bf3a:	2f fd       	sub	sp,-4
8002bf3c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf40 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002bf40:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf44:	1a 97       	mov	r7,sp
8002bf46:	20 1d       	sub	sp,4
8002bf48:	48 c6       	lddpc	r6,8002bf78 <osc_priv_enable_osc0+0x38>
8002bf4a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bf4c:	cd ef       	rcall	8002bf08 <cpu_irq_save>
8002bf4e:	18 98       	mov	r8,r12
8002bf50:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002bf54:	fe 78 08 00 	mov	r8,-63488
8002bf58:	32 49       	mov	r9,36
8002bf5a:	ea 19 aa 00 	orh	r9,0xaa00
8002bf5e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002bf60:	fe 78 08 00 	mov	r8,-63488
8002bf64:	e0 79 0c 07 	mov	r9,68615
8002bf68:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002bf6a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bf6e:	cd cf       	rcall	8002bf26 <cpu_irq_restore>
}
8002bf70:	2f fd       	sub	sp,-4
8002bf72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf76:	00 00       	add	r0,r0
8002bf78:	80 02       	ld.sh	r2,r0[0x0]
8002bf7a:	bd ce       	cbr	lr,0x1c

8002bf7c <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002bf7c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf80:	1a 97       	mov	r7,sp
8002bf82:	20 1d       	sub	sp,4
8002bf84:	48 b6       	lddpc	r6,8002bfb0 <osc_priv_disable_osc0+0x34>
8002bf86:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bf88:	cc 0f       	rcall	8002bf08 <cpu_irq_save>
8002bf8a:	18 98       	mov	r8,r12
8002bf8c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002bf90:	fe 78 08 00 	mov	r8,-63488
8002bf94:	32 49       	mov	r9,36
8002bf96:	ea 19 aa 00 	orh	r9,0xaa00
8002bf9a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002bf9c:	fe 78 08 00 	mov	r8,-63488
8002bfa0:	30 09       	mov	r9,0
8002bfa2:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002bfa4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bfa8:	cb ff       	rcall	8002bf26 <cpu_irq_restore>
}
8002bfaa:	2f fd       	sub	sp,-4
8002bfac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bfb0:	80 02       	ld.sh	r2,r0[0x0]
8002bfb2:	be 0a       	st.h	pc[0x0],r10

8002bfb4 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002bfb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002bfb8:	1a 97       	mov	r7,sp
8002bfba:	20 1d       	sub	sp,4
8002bfbc:	48 c6       	lddpc	r6,8002bfec <osc_priv_enable_osc32+0x38>
8002bfbe:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bfc0:	ca 4f       	rcall	8002bf08 <cpu_irq_save>
8002bfc2:	18 98       	mov	r8,r12
8002bfc4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002bfc8:	fe 78 08 00 	mov	r8,-63488
8002bfcc:	34 c9       	mov	r9,76
8002bfce:	ea 19 aa 00 	orh	r9,0xaa00
8002bfd2:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002bfd4:	fe 78 08 00 	mov	r8,-63488
8002bfd8:	e2 69 01 01 	mov	r9,131329
8002bfdc:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002bfe0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bfe4:	ca 1f       	rcall	8002bf26 <cpu_irq_restore>
}
8002bfe6:	2f fd       	sub	sp,-4
8002bfe8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bfec:	80 02       	ld.sh	r2,r0[0x0]
8002bfee:	be 42       	st.h	pc[0x8],r2

8002bff0 <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002bff0:	eb cd 40 c0 	pushm	r6-r7,lr
8002bff4:	1a 97       	mov	r7,sp
8002bff6:	20 1d       	sub	sp,4
8002bff8:	48 c6       	lddpc	r6,8002c028 <osc_priv_disable_osc32+0x38>
8002bffa:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bffc:	c8 6f       	rcall	8002bf08 <cpu_irq_save>
8002bffe:	18 98       	mov	r8,r12
8002c000:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002c004:	fe 78 08 00 	mov	r8,-63488
8002c008:	34 c9       	mov	r9,76
8002c00a:	ea 19 aa 00 	orh	r9,0xaa00
8002c00e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002c010:	fe 78 08 00 	mov	r8,-63488
8002c014:	30 09       	mov	r9,0
8002c016:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002c01a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c01e:	c8 4f       	rcall	8002bf26 <cpu_irq_restore>
}
8002c020:	2f fd       	sub	sp,-4
8002c022:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c026:	00 00       	add	r0,r0
8002c028:	80 02       	ld.sh	r2,r0[0x0]
8002c02a:	be 7e       	st.h	pc[0xe],lr

8002c02c <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002c02c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c030:	1a 97       	mov	r7,sp
8002c032:	20 3d       	sub	sp,12
8002c034:	49 d6       	lddpc	r6,8002c0a8 <osc_priv_enable_rc8m+0x7c>
8002c036:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002c038:	e0 68 02 00 	mov	r8,512
8002c03c:	ea 18 80 80 	orh	r8,0x8080
8002c040:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002c044:	fe 78 08 00 	mov	r8,-63488
8002c048:	71 28       	ld.w	r8,r8[0x48]
8002c04a:	e6 18 00 01 	andh	r8,0x1,COH
8002c04e:	cf b0       	breq	8002c044 <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c050:	c5 cf       	rcall	8002bf08 <cpu_irq_save>
8002c052:	18 98       	mov	r8,r12
8002c054:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c058:	fe 78 08 00 	mov	r8,-63488
8002c05c:	71 28       	ld.w	r8,r8[0x48]
8002c05e:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002c062:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c066:	70 08       	ld.w	r8,r8[0x0]
8002c068:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002c06c:	b1 a8       	sbr	r8,0x10
8002c06e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c072:	f3 e8 00 08 	and	r8,r9,r8
8002c076:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002c07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c07e:	b9 a8       	sbr	r8,0x18
8002c080:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c084:	fe 78 08 00 	mov	r8,-63488
8002c088:	34 89       	mov	r9,72
8002c08a:	ea 19 aa 00 	orh	r9,0xaa00
8002c08e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c090:	fe 78 08 00 	mov	r8,-63488
8002c094:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c098:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c09c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c0a0:	c4 3f       	rcall	8002bf26 <cpu_irq_restore>
}
8002c0a2:	2f dd       	sub	sp,-12
8002c0a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c0a8:	80 02       	ld.sh	r2,r0[0x0]
8002c0aa:	be ba       	st.b	pc[0x3],r10

8002c0ac <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002c0ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0b0:	1a 97       	mov	r7,sp
8002c0b2:	20 2d       	sub	sp,8
8002c0b4:	49 36       	lddpc	r6,8002c100 <osc_priv_disable_rc8m+0x54>
8002c0b6:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c0b8:	c2 8f       	rcall	8002bf08 <cpu_irq_save>
8002c0ba:	18 98       	mov	r8,r12
8002c0bc:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c0c0:	fe 78 08 00 	mov	r8,-63488
8002c0c4:	71 28       	ld.w	r8,r8[0x48]
8002c0c6:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002c0ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0ce:	e4 18 00 01 	andh	r8,0x1
8002c0d2:	e0 18 00 ff 	andl	r8,0xff
8002c0d6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c0da:	fe 78 08 00 	mov	r8,-63488
8002c0de:	34 89       	mov	r9,72
8002c0e0:	ea 19 aa 00 	orh	r9,0xaa00
8002c0e4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c0e6:	fe 78 08 00 	mov	r8,-63488
8002c0ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c0ee:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c0f2:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c0f6:	c1 8f       	rcall	8002bf26 <cpu_irq_restore>
}
8002c0f8:	2f ed       	sub	sp,-8
8002c0fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c0fe:	00 00       	add	r0,r0
8002c100:	80 02       	ld.sh	r2,r0[0x0]
8002c102:	bf 3a       	mul	r10,pc

8002c104 <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002c104:	eb cd 40 c0 	pushm	r6-r7,lr
8002c108:	1a 97       	mov	r7,sp
8002c10a:	20 1d       	sub	sp,4
8002c10c:	48 c6       	lddpc	r6,8002c13c <osc_priv_enable_rc120m+0x38>
8002c10e:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c110:	cf ce       	rcall	8002bf08 <cpu_irq_save>
8002c112:	18 98       	mov	r8,r12
8002c114:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c118:	fe 78 08 00 	mov	r8,-63488
8002c11c:	35 89       	mov	r9,88
8002c11e:	ea 19 aa 00 	orh	r9,0xaa00
8002c122:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002c124:	fe 78 08 00 	mov	r8,-63488
8002c128:	30 19       	mov	r9,1
8002c12a:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c12e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c132:	cf ae       	rcall	8002bf26 <cpu_irq_restore>
}
8002c134:	2f fd       	sub	sp,-4
8002c136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c13a:	00 00       	add	r0,r0
8002c13c:	80 02       	ld.sh	r2,r0[0x0]
8002c13e:	bf 92       	lsr	r2,0x1f

8002c140 <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002c140:	eb cd 40 c0 	pushm	r6-r7,lr
8002c144:	1a 97       	mov	r7,sp
8002c146:	20 1d       	sub	sp,4
8002c148:	48 c6       	lddpc	r6,8002c178 <osc_priv_disable_rc120m+0x38>
8002c14a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c14c:	cd ee       	rcall	8002bf08 <cpu_irq_save>
8002c14e:	18 98       	mov	r8,r12
8002c150:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c154:	fe 78 08 00 	mov	r8,-63488
8002c158:	35 89       	mov	r9,88
8002c15a:	ea 19 aa 00 	orh	r9,0xaa00
8002c15e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002c160:	fe 78 08 00 	mov	r8,-63488
8002c164:	30 09       	mov	r9,0
8002c166:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c16a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c16e:	cd ce       	rcall	8002bf26 <cpu_irq_restore>
}
8002c170:	2f fd       	sub	sp,-4
8002c172:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c176:	00 00       	add	r0,r0
8002c178:	80 02       	ld.sh	r2,r0[0x0]
8002c17a:	bf ce       	cbr	lr,0x1e

8002c17c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c17c:	eb cd 40 80 	pushm	r7,lr
8002c180:	1a 97       	mov	r7,sp
8002c182:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c184:	e1 b8 00 00 	mfsr	r8,0x0
8002c188:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c18c:	d3 03       	ssrf	0x10

	return flags;
8002c18e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c192:	10 9c       	mov	r12,r8
8002c194:	2f fd       	sub	sp,-4
8002c196:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c19a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c19a:	eb cd 40 80 	pushm	r7,lr
8002c19e:	1a 97       	mov	r7,sp
8002c1a0:	20 1d       	sub	sp,4
8002c1a2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c1a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1aa:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c1ae:	2f fd       	sub	sp,-4
8002c1b0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1b4 <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002c1b4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1b8:	1a 97       	mov	r7,sp
8002c1ba:	20 3d       	sub	sp,12
8002c1bc:	49 26       	lddpc	r6,8002c204 <pll_config_write+0x50>
8002c1be:	1e 26       	rsub	r6,pc
8002c1c0:	ef 4c ff f8 	st.w	r7[-8],r12
8002c1c4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c1c8:	cd af       	rcall	8002c17c <cpu_irq_save>
8002c1ca:	18 98       	mov	r8,r12
8002c1cc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c1d0:	fe 78 08 00 	mov	r8,-63488
8002c1d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c1d8:	2f 99       	sub	r9,-7
8002c1da:	a3 69       	lsl	r9,0x2
8002c1dc:	ea 19 aa 00 	orh	r9,0xaa00
8002c1e0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002c1e2:	fe 78 08 00 	mov	r8,-63488
8002c1e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c1ea:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c1ee:	74 0a       	ld.w	r10,r10[0x0]
8002c1f0:	2f 99       	sub	r9,-7
8002c1f2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c1f6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c1fa:	cd 0f       	rcall	8002c19a <cpu_irq_restore>
}
8002c1fc:	2f dd       	sub	sp,-12
8002c1fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c202:	00 00       	add	r0,r0
8002c204:	80 02       	ld.sh	r2,r0[0x0]
8002c206:	c0 42       	brcc	8002c20e <pll_enable+0x6>

8002c208 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002c208:	eb cd 40 c0 	pushm	r6-r7,lr
8002c20c:	1a 97       	mov	r7,sp
8002c20e:	20 3d       	sub	sp,12
8002c210:	49 26       	lddpc	r6,8002c258 <pll_enable+0x50>
8002c212:	1e 26       	rsub	r6,pc
8002c214:	ef 4c ff f8 	st.w	r7[-8],r12
8002c218:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c21c:	cb 0f       	rcall	8002c17c <cpu_irq_save>
8002c21e:	18 98       	mov	r8,r12
8002c220:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c224:	fe 78 08 00 	mov	r8,-63488
8002c228:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c22c:	2f 99       	sub	r9,-7
8002c22e:	a3 69       	lsl	r9,0x2
8002c230:	ea 19 aa 00 	orh	r9,0xaa00
8002c234:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002c236:	fe 78 08 00 	mov	r8,-63488
8002c23a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c23e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c242:	74 0a       	ld.w	r10,r10[0x0]
8002c244:	a1 aa       	sbr	r10,0x0
8002c246:	2f 99       	sub	r9,-7
8002c248:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c24c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c250:	ca 5f       	rcall	8002c19a <cpu_irq_restore>
}
8002c252:	2f dd       	sub	sp,-12
8002c254:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c258:	80 02       	ld.sh	r2,r0[0x0]
8002c25a:	c0 96       	brmi	8002c26c <pll_disable+0x10>

8002c25c <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002c25c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c260:	1a 97       	mov	r7,sp
8002c262:	20 2d       	sub	sp,8
8002c264:	49 06       	lddpc	r6,8002c2a4 <pll_disable+0x48>
8002c266:	1e 26       	rsub	r6,pc
8002c268:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c26c:	c8 8f       	rcall	8002c17c <cpu_irq_save>
8002c26e:	18 98       	mov	r8,r12
8002c270:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c274:	fe 78 08 00 	mov	r8,-63488
8002c278:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c27c:	2f 99       	sub	r9,-7
8002c27e:	a3 69       	lsl	r9,0x2
8002c280:	ea 19 aa 00 	orh	r9,0xaa00
8002c284:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002c286:	fe 78 08 00 	mov	r8,-63488
8002c28a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c28e:	2f 99       	sub	r9,-7
8002c290:	30 0a       	mov	r10,0
8002c292:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c296:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c29a:	c8 0f       	rcall	8002c19a <cpu_irq_restore>
}
8002c29c:	2f ed       	sub	sp,-8
8002c29e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c2a2:	00 00       	add	r0,r0
8002c2a4:	80 02       	ld.sh	r2,r0[0x0]
8002c2a6:	c0 ea       	rjmp	8002bec2 <udata_clear_loop>

8002c2a8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c2a8:	eb cd 40 80 	pushm	r7,lr
8002c2ac:	1a 97       	mov	r7,sp
8002c2ae:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c2b0:	e1 b8 00 00 	mfsr	r8,0x0
8002c2b4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c2b8:	d3 03       	ssrf	0x10

	return flags;
8002c2ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c2be:	10 9c       	mov	r12,r8
8002c2c0:	2f fd       	sub	sp,-4
8002c2c2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2c6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c2c6:	eb cd 40 80 	pushm	r7,lr
8002c2ca:	1a 97       	mov	r7,sp
8002c2cc:	20 1d       	sub	sp,4
8002c2ce:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c2d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2d6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c2da:	2f fd       	sub	sp,-4
8002c2dc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2e0 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002c2e0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c2e4:	1a 97       	mov	r7,sp
8002c2e6:	20 1d       	sub	sp,4
8002c2e8:	49 16       	lddpc	r6,8002c32c <osc_enable+0x4c>
8002c2ea:	1e 26       	rsub	r6,pc
8002c2ec:	18 98       	mov	r8,r12
8002c2ee:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c2f2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c2f6:	58 28       	cp.w	r8,2
8002c2f8:	c1 10       	breq	8002c31a <osc_enable+0x3a>
8002c2fa:	e0 89 00 05 	brgt	8002c304 <osc_enable+0x24>
8002c2fe:	58 08       	cp.w	r8,0
8002c300:	c0 70       	breq	8002c30e <osc_enable+0x2e>
8002c302:	c1 18       	rjmp	8002c324 <osc_enable+0x44>
8002c304:	58 38       	cp.w	r8,3
8002c306:	c0 70       	breq	8002c314 <osc_enable+0x34>
8002c308:	58 48       	cp.w	r8,4
8002c30a:	c0 b0       	breq	8002c320 <osc_enable+0x40>
8002c30c:	c0 c8       	rjmp	8002c324 <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002c30e:	f0 16 01 de 	mcall	r6[1912]
		break;
8002c312:	c0 98       	rjmp	8002c324 <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002c314:	f0 16 01 d4 	mcall	r6[1872]
		break;
8002c318:	c0 68       	rjmp	8002c324 <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002c31a:	f0 16 01 67 	mcall	r6[1436]
		break;
8002c31e:	c0 38       	rjmp	8002c324 <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002c320:	f0 16 01 92 	mcall	r6[1608]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002c324:	2f fd       	sub	sp,-4
8002c326:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c32a:	00 00       	add	r0,r0
8002c32c:	80 02       	ld.sh	r2,r0[0x0]
8002c32e:	c1 6e       	rcall	8002bf5a <osc_priv_enable_osc0+0x1a>

8002c330 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002c330:	eb cd 40 80 	pushm	r7,lr
8002c334:	1a 97       	mov	r7,sp
8002c336:	20 1d       	sub	sp,4
8002c338:	18 98       	mov	r8,r12
8002c33a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c33e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c342:	58 38       	cp.w	r8,3
8002c344:	c1 50       	breq	8002c36e <osc_is_ready+0x3e>
8002c346:	e0 89 00 07 	brgt	8002c354 <osc_is_ready+0x24>
8002c34a:	58 08       	cp.w	r8,0
8002c34c:	c0 90       	breq	8002c35e <osc_is_ready+0x2e>
8002c34e:	58 28       	cp.w	r8,2
8002c350:	c1 70       	breq	8002c37e <osc_is_ready+0x4e>
8002c352:	c2 88       	rjmp	8002c3a2 <osc_is_ready+0x72>
8002c354:	58 48       	cp.w	r8,4
8002c356:	c1 c0       	breq	8002c38e <osc_is_ready+0x5e>
8002c358:	58 58       	cp.w	r8,5
8002c35a:	c2 20       	breq	8002c39e <osc_is_ready+0x6e>
8002c35c:	c2 38       	rjmp	8002c3a2 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002c35e:	fe 78 08 00 	mov	r8,-63488
8002c362:	70 58       	ld.w	r8,r8[0x14]
8002c364:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c368:	5f 18       	srne	r8
8002c36a:	5c 58       	castu.b	r8
8002c36c:	c1 c8       	rjmp	8002c3a4 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002c36e:	fe 78 08 00 	mov	r8,-63488
8002c372:	70 58       	ld.w	r8,r8[0x14]
8002c374:	e2 18 00 04 	andl	r8,0x4,COH
8002c378:	5f 18       	srne	r8
8002c37a:	5c 58       	castu.b	r8
8002c37c:	c1 48       	rjmp	8002c3a4 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002c37e:	fe 78 08 00 	mov	r8,-63488
8002c382:	70 58       	ld.w	r8,r8[0x14]
8002c384:	e2 18 00 08 	andl	r8,0x8,COH
8002c388:	5f 18       	srne	r8
8002c38a:	5c 58       	castu.b	r8
8002c38c:	c0 c8       	rjmp	8002c3a4 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002c38e:	fe 78 08 00 	mov	r8,-63488
8002c392:	71 68       	ld.w	r8,r8[0x58]
8002c394:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c398:	5f 18       	srne	r8
8002c39a:	5c 58       	castu.b	r8
8002c39c:	c0 48       	rjmp	8002c3a4 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002c39e:	30 18       	mov	r8,1
8002c3a0:	c0 28       	rjmp	8002c3a4 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002c3a2:	30 08       	mov	r8,0
	}
}
8002c3a4:	10 9c       	mov	r12,r8
8002c3a6:	2f fd       	sub	sp,-4
8002c3a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c3ac <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c3ac:	eb cd 40 80 	pushm	r7,lr
8002c3b0:	1a 97       	mov	r7,sp
8002c3b2:	20 1d       	sub	sp,4
8002c3b4:	18 98       	mov	r8,r12
8002c3b6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c3ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c3be:	58 38       	cp.w	r8,3
8002c3c0:	c1 20       	breq	8002c3e4 <osc_get_rate+0x38>
8002c3c2:	e0 89 00 07 	brgt	8002c3d0 <osc_get_rate+0x24>
8002c3c6:	58 08       	cp.w	r8,0
8002c3c8:	c0 90       	breq	8002c3da <osc_get_rate+0x2e>
8002c3ca:	58 28       	cp.w	r8,2
8002c3cc:	c0 f0       	breq	8002c3ea <osc_get_rate+0x3e>
8002c3ce:	c1 b8       	rjmp	8002c404 <osc_get_rate+0x58>
8002c3d0:	58 48       	cp.w	r8,4
8002c3d2:	c1 10       	breq	8002c3f4 <osc_get_rate+0x48>
8002c3d4:	58 58       	cp.w	r8,5
8002c3d6:	c1 40       	breq	8002c3fe <osc_get_rate+0x52>
8002c3d8:	c1 68       	rjmp	8002c404 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c3da:	e0 68 24 00 	mov	r8,9216
8002c3de:	ea 18 00 f4 	orh	r8,0xf4
8002c3e2:	c1 28       	rjmp	8002c406 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c3e4:	e0 68 80 00 	mov	r8,32768
8002c3e8:	c0 f8       	rjmp	8002c406 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c3ea:	e0 68 12 00 	mov	r8,4608
8002c3ee:	ea 18 00 7a 	orh	r8,0x7a
8002c3f2:	c0 a8       	rjmp	8002c406 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c3f4:	e0 68 0e 00 	mov	r8,3584
8002c3f8:	ea 18 07 27 	orh	r8,0x727
8002c3fc:	c0 58       	rjmp	8002c406 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c3fe:	e0 78 c1 38 	mov	r8,115000
8002c402:	c0 28       	rjmp	8002c406 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c404:	30 08       	mov	r8,0
	}
}
8002c406:	10 9c       	mov	r12,r8
8002c408:	2f fd       	sub	sp,-4
8002c40a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c40e <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002c40e:	eb cd 40 c0 	pushm	r6-r7,lr
8002c412:	1a 97       	mov	r7,sp
8002c414:	20 1d       	sub	sp,4
8002c416:	48 96       	lddpc	r6,8002c438 <osc_wait_ready+0x2a>
8002c418:	1e 26       	rsub	r6,pc
8002c41a:	18 98       	mov	r8,r12
8002c41c:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002c420:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c424:	10 9c       	mov	r12,r8
8002c426:	c8 5f       	rcall	8002c330 <osc_is_ready>
8002c428:	18 98       	mov	r8,r12
8002c42a:	ec 18 00 01 	eorl	r8,0x1
8002c42e:	5c 58       	castu.b	r8
8002c430:	cf 81       	brne	8002c420 <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002c432:	2f fd       	sub	sp,-4
8002c434:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c438:	80 02       	ld.sh	r2,r0[0x0]
8002c43a:	c2 9c       	rcall	8002c48c <pll_config_init+0x20>

8002c43c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002c43c:	eb cd 40 80 	pushm	r7,lr
8002c440:	1a 97       	mov	r7,sp
8002c442:	20 2d       	sub	sp,8
8002c444:	ef 4c ff fc 	st.w	r7[-4],r12
8002c448:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002c44c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c450:	70 09       	ld.w	r9,r8[0x0]
8002c452:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c456:	2f d8       	sub	r8,-3
8002c458:	30 1a       	mov	r10,1
8002c45a:	f4 08 09 48 	lsl	r8,r10,r8
8002c45e:	10 49       	or	r9,r8
8002c460:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c464:	91 09       	st.w	r8[0x0],r9
}
8002c466:	2f ed       	sub	sp,-8
8002c468:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c46c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002c46c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c470:	1a 97       	mov	r7,sp
8002c472:	20 5d       	sub	sp,20
8002c474:	4b 46       	lddpc	r6,8002c544 <pll_config_init+0xd8>
8002c476:	1e 26       	rsub	r6,pc
8002c478:	ef 4c ff f8 	st.w	r7[-8],r12
8002c47c:	ef 4b ff f4 	st.w	r7[-12],r11
8002c480:	ef 4a ff f0 	st.w	r7[-16],r10
8002c484:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002c488:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c48c:	5c 58       	castu.b	r8
8002c48e:	10 9c       	mov	r12,r8
8002c490:	c8 ef       	rcall	8002c3ac <osc_get_rate>
8002c492:	18 99       	mov	r9,r12
8002c494:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c498:	f2 08 02 48 	mul	r8,r9,r8
8002c49c:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002c4a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c4a8:	f0 09 0d 08 	divu	r8,r8,r9
8002c4ac:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002c4b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c4b4:	30 09       	mov	r9,0
8002c4b6:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002c4b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4bc:	e0 69 b3 ff 	mov	r9,46079
8002c4c0:	ea 19 04 c4 	orh	r9,0x4c4
8002c4c4:	12 38       	cp.w	r8,r9
8002c4c6:	e0 8b 00 15 	brhi	8002c4f0 <pll_config_init+0x84>
8002c4ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c4ce:	58 88       	cp.w	r8,8
8002c4d0:	e0 8b 00 10 	brhi	8002c4f0 <pll_config_init+0x84>
		mul *= 2;
8002c4d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c4d8:	a1 78       	lsl	r8,0x1
8002c4da:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002c4de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4e2:	a1 78       	lsl	r8,0x1
8002c4e4:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002c4e8:	30 1b       	mov	r11,1
8002c4ea:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c4ee:	ca 7f       	rcall	8002c43c <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002c4f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4f4:	e0 69 fe 7f 	mov	r9,65151
8002c4f8:	ea 19 0a 21 	orh	r9,0xa21
8002c4fc:	12 38       	cp.w	r8,r9
8002c4fe:	e0 8b 00 06 	brhi	8002c50a <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002c502:	30 0b       	mov	r11,0
8002c504:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c508:	c9 af       	rcall	8002c43c <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c50a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c50e:	70 09       	ld.w	r9,r8[0x0]
8002c510:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c514:	20 18       	sub	r8,1
8002c516:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002c51a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c51e:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002c520:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002c522:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c526:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c528:	f5 e8 10 08 	or	r8,r10,r8
8002c52c:	f3 e8 10 08 	or	r8,r9,r8
8002c530:	10 99       	mov	r9,r8
8002c532:	ea 19 3f 00 	orh	r9,0x3f00
8002c536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c53a:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002c53c:	2f bd       	sub	sp,-20
8002c53e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c542:	00 00       	add	r0,r0
8002c544:	80 02       	ld.sh	r2,r0[0x0]
8002c546:	c2 fa       	rjmp	8002c1a4 <cpu_irq_restore+0xa>

8002c548 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002c548:	eb cd 40 80 	pushm	r7,lr
8002c54c:	1a 97       	mov	r7,sp
8002c54e:	20 1d       	sub	sp,4
8002c550:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002c554:	fe 78 08 00 	mov	r8,-63488
8002c558:	70 59       	ld.w	r9,r8[0x14]
8002c55a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c55e:	2f c8       	sub	r8,-4
8002c560:	30 1a       	mov	r10,1
8002c562:	f4 08 09 48 	lsl	r8,r10,r8
8002c566:	f3 e8 00 08 	and	r8,r9,r8
8002c56a:	5f 18       	srne	r8
8002c56c:	5c 58       	castu.b	r8
}
8002c56e:	10 9c       	mov	r12,r8
8002c570:	2f fd       	sub	sp,-4
8002c572:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c576 <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002c576:	eb cd 40 c0 	pushm	r6-r7,lr
8002c57a:	1a 97       	mov	r7,sp
8002c57c:	20 1d       	sub	sp,4
8002c57e:	49 06       	lddpc	r6,8002c5bc <pll_enable_source_sync+0x46>
8002c580:	1e 26       	rsub	r6,pc
8002c582:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002c586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c58a:	58 18       	cp.w	r8,1
8002c58c:	e0 88 00 05 	brls	8002c596 <pll_enable_source_sync+0x20>
8002c590:	58 28       	cp.w	r8,2
8002c592:	c0 d0       	breq	8002c5ac <pll_enable_source_sync+0x36>
8002c594:	c1 08       	rjmp	8002c5b4 <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002c596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c59a:	5c 58       	castu.b	r8
8002c59c:	10 9c       	mov	r12,r8
8002c59e:	ca 1e       	rcall	8002c2e0 <osc_enable>
		osc_wait_ready(src);
8002c5a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5a4:	5c 58       	castu.b	r8
8002c5a6:	10 9c       	mov	r12,r8
8002c5a8:	c3 3f       	rcall	8002c40e <osc_wait_ready>
		break;
8002c5aa:	c0 58       	rjmp	8002c5b4 <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002c5ac:	30 2c       	mov	r12,2
8002c5ae:	c9 9e       	rcall	8002c2e0 <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002c5b0:	30 2c       	mov	r12,2
8002c5b2:	c2 ef       	rcall	8002c40e <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002c5b4:	2f fd       	sub	sp,-4
8002c5b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c5ba:	00 00       	add	r0,r0
8002c5bc:	80 02       	ld.sh	r2,r0[0x0]
8002c5be:	c4 04       	brge	8002c63e <genclk_config_set_divider>

8002c5c0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002c5c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5c4:	1a 97       	mov	r7,sp
8002c5c6:	20 1d       	sub	sp,4
8002c5c8:	48 96       	lddpc	r6,8002c5ec <pll_wait_for_lock+0x2c>
8002c5ca:	1e 26       	rsub	r6,pc
8002c5cc:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002c5d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c5d4:	cb af       	rcall	8002c548 <pll_is_locked>
8002c5d6:	18 98       	mov	r8,r12
8002c5d8:	ec 18 00 01 	eorl	r8,0x1
8002c5dc:	5c 58       	castu.b	r8
8002c5de:	cf 91       	brne	8002c5d0 <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002c5e0:	30 08       	mov	r8,0
}
8002c5e2:	10 9c       	mov	r12,r8
8002c5e4:	2f fd       	sub	sp,-4
8002c5e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c5ea:	00 00       	add	r0,r0
8002c5ec:	80 02       	ld.sh	r2,r0[0x0]
8002c5ee:	c4 4e       	rcall	8002c276 <pll_disable+0x1a>

8002c5f0 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002c5f0:	eb cd 40 80 	pushm	r7,lr
8002c5f4:	1a 97       	mov	r7,sp
8002c5f6:	20 2d       	sub	sp,8
8002c5f8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c5fc:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002c600:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c604:	30 09       	mov	r9,0
8002c606:	91 09       	st.w	r8[0x0],r9
}
8002c608:	2f ed       	sub	sp,-8
8002c60a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c60e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002c60e:	eb cd 40 80 	pushm	r7,lr
8002c612:	1a 97       	mov	r7,sp
8002c614:	20 2d       	sub	sp,8
8002c616:	ef 4c ff fc 	st.w	r7[-4],r12
8002c61a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c61e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c622:	70 08       	ld.w	r8,r8[0x0]
8002c624:	10 99       	mov	r9,r8
8002c626:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002c62a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c62e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c630:	10 49       	or	r9,r8
8002c632:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c636:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002c638:	2f ed       	sub	sp,-8
8002c63a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c63e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002c63e:	eb cd 40 80 	pushm	r7,lr
8002c642:	1a 97       	mov	r7,sp
8002c644:	20 2d       	sub	sp,8
8002c646:	ef 4c ff fc 	st.w	r7[-4],r12
8002c64a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002c64e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c652:	70 08       	ld.w	r8,r8[0x0]
8002c654:	10 99       	mov	r9,r8
8002c656:	e4 19 ff 00 	andh	r9,0xff00
8002c65a:	e0 19 ff fd 	andl	r9,0xfffd
8002c65e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c662:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002c664:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c668:	58 18       	cp.w	r8,1
8002c66a:	e0 88 00 17 	brls	8002c698 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002c66e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c672:	70 08       	ld.w	r8,r8[0x0]
8002c674:	10 99       	mov	r9,r8
8002c676:	a1 b9       	sbr	r9,0x1
8002c678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c67c:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002c67e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c682:	70 09       	ld.w	r9,r8[0x0]
8002c684:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c688:	2f f8       	sub	r8,-1
8002c68a:	a1 98       	lsr	r8,0x1
8002c68c:	20 18       	sub	r8,1
8002c68e:	b1 68       	lsl	r8,0x10
8002c690:	10 49       	or	r9,r8
8002c692:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c696:	91 09       	st.w	r8[0x0],r9
	}
}
8002c698:	2f ed       	sub	sp,-8
8002c69a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c69e <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002c69e:	eb cd 40 80 	pushm	r7,lr
8002c6a2:	1a 97       	mov	r7,sp
8002c6a4:	20 2d       	sub	sp,8
8002c6a6:	ef 4c ff fc 	st.w	r7[-4],r12
8002c6aa:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002c6ae:	fe 78 08 00 	mov	r8,-63488
8002c6b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c6b6:	ee fa ff fc 	ld.w	r10,r7[-4]
8002c6ba:	74 0a       	ld.w	r10,r10[0x0]
8002c6bc:	a1 aa       	sbr	r10,0x0
8002c6be:	2e 79       	sub	r9,-25
8002c6c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c6c4:	2f ed       	sub	sp,-8
8002c6c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c6ca <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002c6ca:	eb cd 40 80 	pushm	r7,lr
8002c6ce:	1a 97       	mov	r7,sp
8002c6d0:	20 1d       	sub	sp,4
8002c6d2:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002c6d6:	fe 78 08 00 	mov	r8,-63488
8002c6da:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c6de:	2e 79       	sub	r9,-25
8002c6e0:	30 0a       	mov	r10,0
8002c6e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c6e6:	2f fd       	sub	sp,-4
8002c6e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c6ec <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c6ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002c6f0:	1a 97       	mov	r7,sp
8002c6f2:	48 56       	lddpc	r6,8002c704 <sysclk_get_main_hz+0x18>
8002c6f4:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c6f6:	30 0c       	mov	r12,0
8002c6f8:	c5 ae       	rcall	8002c3ac <osc_get_rate>
8002c6fa:	18 98       	mov	r8,r12
8002c6fc:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c6fe:	10 9c       	mov	r12,r8
8002c700:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c704:	80 02       	ld.sh	r2,r0[0x0]
8002c706:	c5 78       	rjmp	8002c7b4 <sysclk_priv_disable_module+0x2c>

8002c708 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002c708:	eb cd 40 c0 	pushm	r6-r7,lr
8002c70c:	1a 97       	mov	r7,sp
8002c70e:	20 4d       	sub	sp,16
8002c710:	49 d6       	lddpc	r6,8002c784 <sysclk_priv_enable_module+0x7c>
8002c712:	1e 26       	rsub	r6,pc
8002c714:	ef 4c ff f4 	st.w	r7[-12],r12
8002c718:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c71c:	fe b0 fd c6 	rcall	8002c2a8 <cpu_irq_save>
8002c720:	18 98       	mov	r8,r12
8002c722:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c726:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c72a:	a3 68       	lsl	r8,0x2
8002c72c:	e0 28 fb e0 	sub	r8,64480
8002c730:	70 08       	ld.w	r8,r8[0x0]
8002c732:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002c736:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c73a:	30 19       	mov	r9,1
8002c73c:	f2 08 09 48 	lsl	r8,r9,r8
8002c740:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c744:	f3 e8 10 08 	or	r8,r9,r8
8002c748:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c74c:	fe 78 04 00 	mov	r8,-64512
8002c750:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c754:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c758:	32 09       	mov	r9,32
8002c75a:	ea 19 aa 00 	orh	r9,0xaa00
8002c75e:	f4 09 00 09 	add	r9,r10,r9
8002c762:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c766:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c76a:	a3 68       	lsl	r8,0x2
8002c76c:	e0 28 fb e0 	sub	r8,64480
8002c770:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c774:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c776:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c77a:	fe b0 fd a6 	rcall	8002c2c6 <cpu_irq_restore>
}
8002c77e:	2f cd       	sub	sp,-16
8002c780:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c784:	80 02       	ld.sh	r2,r0[0x0]
8002c786:	c5 96       	brmi	8002c838 <sysclk_set_prescalers+0x2c>

8002c788 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002c788:	eb cd 40 c0 	pushm	r6-r7,lr
8002c78c:	1a 97       	mov	r7,sp
8002c78e:	20 4d       	sub	sp,16
8002c790:	49 e6       	lddpc	r6,8002c808 <sysclk_priv_disable_module+0x80>
8002c792:	1e 26       	rsub	r6,pc
8002c794:	ef 4c ff f4 	st.w	r7[-12],r12
8002c798:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c79c:	fe b0 fd 86 	rcall	8002c2a8 <cpu_irq_save>
8002c7a0:	18 98       	mov	r8,r12
8002c7a2:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c7a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c7aa:	a3 68       	lsl	r8,0x2
8002c7ac:	e0 28 fb e0 	sub	r8,64480
8002c7b0:	70 08       	ld.w	r8,r8[0x0]
8002c7b2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002c7b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c7ba:	30 19       	mov	r9,1
8002c7bc:	f2 08 09 48 	lsl	r8,r9,r8
8002c7c0:	5c d8       	com	r8
8002c7c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7c6:	f3 e8 00 08 	and	r8,r9,r8
8002c7ca:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c7ce:	fe 78 04 00 	mov	r8,-64512
8002c7d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c7d6:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c7da:	32 09       	mov	r9,32
8002c7dc:	ea 19 aa 00 	orh	r9,0xaa00
8002c7e0:	f4 09 00 09 	add	r9,r10,r9
8002c7e4:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c7e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c7ec:	a3 68       	lsl	r8,0x2
8002c7ee:	e0 28 fb e0 	sub	r8,64480
8002c7f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7f6:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c7f8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c7fc:	fe b0 fd 65 	rcall	8002c2c6 <cpu_irq_restore>
}
8002c800:	2f cd       	sub	sp,-16
8002c802:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c806:	00 00       	add	r0,r0
8002c808:	80 02       	ld.sh	r2,r0[0x0]
8002c80a:	c6 16       	brmi	8002c8cc <sysclk_set_prescalers+0xc0>

8002c80c <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002c80c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c810:	1a 97       	mov	r7,sp
8002c812:	20 9d       	sub	sp,36
8002c814:	4b f6       	lddpc	r6,8002c910 <sysclk_set_prescalers+0x104>
8002c816:	1e 26       	rsub	r6,pc
8002c818:	ef 4c ff e8 	st.w	r7[-24],r12
8002c81c:	ef 4b ff e4 	st.w	r7[-28],r11
8002c820:	ef 4a ff e0 	st.w	r7[-32],r10
8002c824:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002c828:	30 08       	mov	r8,0
8002c82a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002c82e:	30 08       	mov	r8,0
8002c830:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002c834:	30 08       	mov	r8,0
8002c836:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002c83a:	30 08       	mov	r8,0
8002c83c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002c840:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c844:	58 08       	cp.w	r8,0
8002c846:	c0 80       	breq	8002c856 <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002c848:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c84c:	20 18       	sub	r8,1
8002c84e:	a5 68       	lsl	r8,0x4
8002c850:	a7 b8       	sbr	r8,0x7
8002c852:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002c856:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c85a:	58 08       	cp.w	r8,0
8002c85c:	c0 80       	breq	8002c86c <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002c85e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c862:	20 18       	sub	r8,1
8002c864:	ad 68       	lsl	r8,0xc
8002c866:	a7 b8       	sbr	r8,0x7
8002c868:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002c86c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c870:	58 08       	cp.w	r8,0
8002c872:	c0 80       	breq	8002c882 <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002c874:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c878:	20 18       	sub	r8,1
8002c87a:	b1 68       	lsl	r8,0x10
8002c87c:	a7 b8       	sbr	r8,0x7
8002c87e:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002c882:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c886:	58 08       	cp.w	r8,0
8002c888:	c0 80       	breq	8002c898 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002c88a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c88e:	20 18       	sub	r8,1
8002c890:	b5 68       	lsl	r8,0x14
8002c892:	a7 b8       	sbr	r8,0x7
8002c894:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002c898:	fe b0 fd 08 	rcall	8002c2a8 <cpu_irq_save>
8002c89c:	18 98       	mov	r8,r12
8002c89e:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002c8a2:	fe 78 04 00 	mov	r8,-64512
8002c8a6:	30 49       	mov	r9,4
8002c8a8:	ea 19 aa 00 	orh	r9,0xaa00
8002c8ac:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002c8b0:	fe 78 04 00 	mov	r8,-64512
8002c8b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c8b8:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002c8ba:	fe 78 04 00 	mov	r8,-64512
8002c8be:	30 c9       	mov	r9,12
8002c8c0:	ea 19 aa 00 	orh	r9,0xaa00
8002c8c4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002c8c8:	fe 78 04 00 	mov	r8,-64512
8002c8cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c8d0:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002c8d2:	fe 78 04 00 	mov	r8,-64512
8002c8d6:	31 09       	mov	r9,16
8002c8d8:	ea 19 aa 00 	orh	r9,0xaa00
8002c8dc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002c8e0:	fe 78 04 00 	mov	r8,-64512
8002c8e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c8e8:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002c8ea:	fe 78 04 00 	mov	r8,-64512
8002c8ee:	31 49       	mov	r9,20
8002c8f0:	ea 19 aa 00 	orh	r9,0xaa00
8002c8f4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002c8f8:	fe 78 04 00 	mov	r8,-64512
8002c8fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c900:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002c902:	ee fc ff ec 	ld.w	r12,r7[-20]
8002c906:	fe b0 fc e0 	rcall	8002c2c6 <cpu_irq_restore>
}
8002c90a:	2f 7d       	sub	sp,-36
8002c90c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c910:	80 02       	ld.sh	r2,r0[0x0]
8002c912:	c6 9a       	rjmp	8002c5e4 <pll_wait_for_lock+0x24>

8002c914 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002c914:	eb cd 40 c0 	pushm	r6-r7,lr
8002c918:	1a 97       	mov	r7,sp
8002c91a:	20 2d       	sub	sp,8
8002c91c:	48 e6       	lddpc	r6,8002c954 <sysclk_set_source+0x40>
8002c91e:	1e 26       	rsub	r6,pc
8002c920:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002c924:	fe b0 fc c2 	rcall	8002c2a8 <cpu_irq_save>
8002c928:	18 98       	mov	r8,r12
8002c92a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002c92e:	fe 78 04 00 	mov	r8,-64512
8002c932:	fc 19 aa 00 	movh	r9,0xaa00
8002c936:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002c93a:	fe 78 04 00 	mov	r8,-64512
8002c93e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c942:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002c944:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c948:	fe b0 fc bf 	rcall	8002c2c6 <cpu_irq_restore>
}
8002c94c:	2f ed       	sub	sp,-8
8002c94e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c952:	00 00       	add	r0,r0
8002c954:	80 02       	ld.sh	r2,r0[0x0]
8002c956:	c7 a2       	brcc	8002ca4a <sysclk_init+0x76>

8002c958 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002c958:	eb cd 40 c0 	pushm	r6-r7,lr
8002c95c:	1a 97       	mov	r7,sp
8002c95e:	20 3d       	sub	sp,12
8002c960:	49 66       	lddpc	r6,8002c9b8 <sysclk_enable_usb+0x60>
8002c962:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002c964:	ee c8 00 04 	sub	r8,r7,4
8002c968:	30 0b       	mov	r11,0
8002c96a:	10 9c       	mov	r12,r8
8002c96c:	c4 2e       	rcall	8002c5f0 <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002c96e:	30 0c       	mov	r12,0
8002c970:	c0 3e       	rcall	8002c576 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002c972:	ee c8 00 0c 	sub	r8,r7,12
8002c976:	30 39       	mov	r9,3
8002c978:	30 1a       	mov	r10,1
8002c97a:	30 0b       	mov	r11,0
8002c97c:	10 9c       	mov	r12,r8
8002c97e:	fe b0 fd 77 	rcall	8002c46c <pll_config_init>
		pll_enable(&pllcfg, 1);
8002c982:	ee c8 00 0c 	sub	r8,r7,12
8002c986:	30 1b       	mov	r11,1
8002c988:	10 9c       	mov	r12,r8
8002c98a:	f0 16 00 a7 	mcall	r6[668]
		pll_wait_for_lock(1);
8002c98e:	30 1c       	mov	r12,1
8002c990:	c1 8e       	rcall	8002c5c0 <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002c992:	ee c8 00 04 	sub	r8,r7,4
8002c996:	30 6b       	mov	r11,6
8002c998:	10 9c       	mov	r12,r8
8002c99a:	c3 ae       	rcall	8002c60e <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002c99c:	ee c8 00 04 	sub	r8,r7,4
8002c9a0:	30 1b       	mov	r11,1
8002c9a2:	10 9c       	mov	r12,r8
8002c9a4:	c4 de       	rcall	8002c63e <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002c9a6:	ee c8 00 04 	sub	r8,r7,4
8002c9aa:	30 0b       	mov	r11,0
8002c9ac:	10 9c       	mov	r12,r8
8002c9ae:	c7 8e       	rcall	8002c69e <genclk_enable>
}
8002c9b0:	2f dd       	sub	sp,-12
8002c9b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9b6:	00 00       	add	r0,r0
8002c9b8:	80 02       	ld.sh	r2,r0[0x0]
8002c9ba:	c7 e6       	brmi	8002cab6 <sysclk_get_main_hz+0x8>

8002c9bc <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002c9bc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9c0:	1a 97       	mov	r7,sp
8002c9c2:	48 46       	lddpc	r6,8002c9d0 <sysclk_disable_usb+0x14>
8002c9c4:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002c9c6:	30 0c       	mov	r12,0
8002c9c8:	c8 1e       	rcall	8002c6ca <genclk_disable>
}
8002c9ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9ce:	00 00       	add	r0,r0
8002c9d0:	80 02       	ld.sh	r2,r0[0x0]
8002c9d2:	c8 48       	rjmp	8002cada <sysclk_get_pba_hz+0xe>

8002c9d4 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002c9d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9d8:	1a 97       	mov	r7,sp
8002c9da:	20 2d       	sub	sp,8
8002c9dc:	49 b6       	lddpc	r6,8002ca48 <sysclk_init+0x74>
8002c9de:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002c9e0:	30 0c       	mov	r12,0
8002c9e2:	fe b0 fd ca 	rcall	8002c576 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002c9e6:	ee c8 00 04 	sub	r8,r7,4
8002c9ea:	30 49       	mov	r9,4
8002c9ec:	30 1a       	mov	r10,1
8002c9ee:	30 0b       	mov	r11,0
8002c9f0:	10 9c       	mov	r12,r8
8002c9f2:	fe b0 fd 3d 	rcall	8002c46c <pll_config_init>
		pll_enable(&pllcfg, 0);
8002c9f6:	ee c8 00 04 	sub	r8,r7,4
8002c9fa:	30 0b       	mov	r11,0
8002c9fc:	10 9c       	mov	r12,r8
8002c9fe:	f0 16 00 a7 	mcall	r6[668]
		pll_wait_for_lock(0);
8002ca02:	30 0c       	mov	r12,0
8002ca04:	fe b0 fd de 	rcall	8002c5c0 <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002ca08:	30 0c       	mov	r12,0
8002ca0a:	fe b0 fd b6 	rcall	8002c576 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002ca0e:	ee c8 00 08 	sub	r8,r7,8
8002ca12:	30 39       	mov	r9,3
8002ca14:	30 1a       	mov	r10,1
8002ca16:	30 0b       	mov	r11,0
8002ca18:	10 9c       	mov	r12,r8
8002ca1a:	fe b0 fd 29 	rcall	8002c46c <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002ca1e:	ee c8 00 08 	sub	r8,r7,8
8002ca22:	30 1b       	mov	r11,1
8002ca24:	10 9c       	mov	r12,r8
8002ca26:	f0 16 00 a7 	mcall	r6[668]
		pll_wait_for_lock(1);
8002ca2a:	30 1c       	mov	r12,1
8002ca2c:	fe b0 fd ca 	rcall	8002c5c0 <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002ca30:	c5 ee       	rcall	8002c6ec <sysclk_get_main_hz>
8002ca32:	18 98       	mov	r8,r12
8002ca34:	10 9c       	mov	r12,r8
8002ca36:	f0 16 01 5a 	mcall	r6[1384]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002ca3a:	30 3c       	mov	r12,3
8002ca3c:	f0 16 01 c0 	mcall	r6[1792]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002ca40:	2f ed       	sub	sp,-8
8002ca42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca46:	00 00       	add	r0,r0
8002ca48:	80 02       	ld.sh	r2,r0[0x0]
8002ca4a:	c8 62       	brcc	8002c956 <sysclk_set_source+0x42>

8002ca4c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002ca4c:	eb cd 40 80 	pushm	r7,lr
8002ca50:	1a 97       	mov	r7,sp
8002ca52:	20 1d       	sub	sp,4
8002ca54:	18 98       	mov	r8,r12
8002ca56:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002ca5a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002ca5e:	58 38       	cp.w	r8,3
8002ca60:	c1 20       	breq	8002ca84 <osc_get_rate+0x38>
8002ca62:	e0 89 00 07 	brgt	8002ca70 <osc_get_rate+0x24>
8002ca66:	58 08       	cp.w	r8,0
8002ca68:	c0 90       	breq	8002ca7a <osc_get_rate+0x2e>
8002ca6a:	58 28       	cp.w	r8,2
8002ca6c:	c0 f0       	breq	8002ca8a <osc_get_rate+0x3e>
8002ca6e:	c1 b8       	rjmp	8002caa4 <osc_get_rate+0x58>
8002ca70:	58 48       	cp.w	r8,4
8002ca72:	c1 10       	breq	8002ca94 <osc_get_rate+0x48>
8002ca74:	58 58       	cp.w	r8,5
8002ca76:	c1 40       	breq	8002ca9e <osc_get_rate+0x52>
8002ca78:	c1 68       	rjmp	8002caa4 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002ca7a:	e0 68 24 00 	mov	r8,9216
8002ca7e:	ea 18 00 f4 	orh	r8,0xf4
8002ca82:	c1 28       	rjmp	8002caa6 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002ca84:	e0 68 80 00 	mov	r8,32768
8002ca88:	c0 f8       	rjmp	8002caa6 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002ca8a:	e0 68 12 00 	mov	r8,4608
8002ca8e:	ea 18 00 7a 	orh	r8,0x7a
8002ca92:	c0 a8       	rjmp	8002caa6 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002ca94:	e0 68 0e 00 	mov	r8,3584
8002ca98:	ea 18 07 27 	orh	r8,0x727
8002ca9c:	c0 58       	rjmp	8002caa6 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002ca9e:	e0 78 c1 38 	mov	r8,115000
8002caa2:	c0 28       	rjmp	8002caa6 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002caa4:	30 08       	mov	r8,0
	}
}
8002caa6:	10 9c       	mov	r12,r8
8002caa8:	2f fd       	sub	sp,-4
8002caaa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002caae <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002caae:	eb cd 40 c0 	pushm	r6-r7,lr
8002cab2:	1a 97       	mov	r7,sp
8002cab4:	48 56       	lddpc	r6,8002cac8 <sysclk_get_main_hz+0x1a>
8002cab6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cab8:	30 0c       	mov	r12,0
8002caba:	cc 9f       	rcall	8002ca4c <osc_get_rate>
8002cabc:	18 98       	mov	r8,r12
8002cabe:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002cac0:	10 9c       	mov	r12,r8
8002cac2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cac6:	00 00       	add	r0,r0
8002cac8:	80 02       	ld.sh	r2,r0[0x0]
8002caca:	c9 3a       	rjmp	8002c7f0 <sysclk_priv_disable_module+0x68>

8002cacc <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002cacc:	eb cd 40 c0 	pushm	r6-r7,lr
8002cad0:	1a 97       	mov	r7,sp
8002cad2:	48 46       	lddpc	r6,8002cae0 <sysclk_get_pba_hz+0x14>
8002cad4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002cad6:	ce cf       	rcall	8002caae <sysclk_get_main_hz>
8002cad8:	18 98       	mov	r8,r12
}
8002cada:	10 9c       	mov	r12,r8
8002cadc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cae0:	80 02       	ld.sh	r2,r0[0x0]
8002cae2:	c9 58       	rjmp	8002cc0c <spi_set_bits_per_transfer+0x28>

8002cae4 <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002cae4:	eb cd 40 80 	pushm	r7,lr
8002cae8:	1a 97       	mov	r7,sp
8002caea:	20 3d       	sub	sp,12
8002caec:	ef 4c ff fc 	st.w	r7[-4],r12
8002caf0:	16 99       	mov	r9,r11
8002caf2:	14 98       	mov	r8,r10
8002caf4:	ef 69 ff f8 	st.b	r7[-8],r9
8002caf8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002cafc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cb00:	58 18       	cp.w	r8,1
8002cb02:	c1 40       	breq	8002cb2a <spi_set_chipselect_delay_bct+0x46>
8002cb04:	e0 89 00 05 	brgt	8002cb0e <spi_set_chipselect_delay_bct+0x2a>
8002cb08:	58 08       	cp.w	r8,0
8002cb0a:	c0 70       	breq	8002cb18 <spi_set_chipselect_delay_bct+0x34>
8002cb0c:	c2 98       	rjmp	8002cb5e <spi_set_chipselect_delay_bct+0x7a>
8002cb0e:	58 28       	cp.w	r8,2
8002cb10:	c1 60       	breq	8002cb3c <spi_set_chipselect_delay_bct+0x58>
8002cb12:	58 38       	cp.w	r8,3
8002cb14:	c1 d0       	breq	8002cb4e <spi_set_chipselect_delay_bct+0x6a>
8002cb16:	c2 48       	rjmp	8002cb5e <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002cb18:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb1c:	72 c8       	ld.w	r8,r9[0x30]
8002cb1e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cb22:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cb26:	93 c8       	st.w	r9[0x30],r8
      break;
8002cb28:	c1 b8       	rjmp	8002cb5e <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002cb2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb2e:	72 d8       	ld.w	r8,r9[0x34]
8002cb30:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cb34:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cb38:	93 d8       	st.w	r9[0x34],r8
      break;
8002cb3a:	c1 28       	rjmp	8002cb5e <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002cb3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb40:	72 e8       	ld.w	r8,r9[0x38]
8002cb42:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cb46:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cb4a:	93 e8       	st.w	r9[0x38],r8
      break;
8002cb4c:	c0 98       	rjmp	8002cb5e <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002cb4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb52:	72 f8       	ld.w	r8,r9[0x3c]
8002cb54:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cb58:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cb5c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cb5e:	2f dd       	sub	sp,-12
8002cb60:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb64 <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002cb64:	eb cd 40 80 	pushm	r7,lr
8002cb68:	1a 97       	mov	r7,sp
8002cb6a:	20 3d       	sub	sp,12
8002cb6c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb70:	16 99       	mov	r9,r11
8002cb72:	14 98       	mov	r8,r10
8002cb74:	ef 69 ff f8 	st.b	r7[-8],r9
8002cb78:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002cb7c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cb80:	58 18       	cp.w	r8,1
8002cb82:	c1 40       	breq	8002cbaa <spi_set_chipselect_delay_bs+0x46>
8002cb84:	e0 89 00 05 	brgt	8002cb8e <spi_set_chipselect_delay_bs+0x2a>
8002cb88:	58 08       	cp.w	r8,0
8002cb8a:	c0 70       	breq	8002cb98 <spi_set_chipselect_delay_bs+0x34>
8002cb8c:	c2 98       	rjmp	8002cbde <spi_set_chipselect_delay_bs+0x7a>
8002cb8e:	58 28       	cp.w	r8,2
8002cb90:	c1 60       	breq	8002cbbc <spi_set_chipselect_delay_bs+0x58>
8002cb92:	58 38       	cp.w	r8,3
8002cb94:	c1 d0       	breq	8002cbce <spi_set_chipselect_delay_bs+0x6a>
8002cb96:	c2 48       	rjmp	8002cbde <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002cb98:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb9c:	72 c8       	ld.w	r8,r9[0x30]
8002cb9e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cba2:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cba6:	93 c8       	st.w	r9[0x30],r8
      break;
8002cba8:	c1 b8       	rjmp	8002cbde <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002cbaa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbae:	72 d8       	ld.w	r8,r9[0x34]
8002cbb0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbb4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cbb8:	93 d8       	st.w	r9[0x34],r8
      break;
8002cbba:	c1 28       	rjmp	8002cbde <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002cbbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbc0:	72 e8       	ld.w	r8,r9[0x38]
8002cbc2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbc6:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cbca:	93 e8       	st.w	r9[0x38],r8
      break;
8002cbcc:	c0 98       	rjmp	8002cbde <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002cbce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbd2:	72 f8       	ld.w	r8,r9[0x3c]
8002cbd4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cbd8:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cbdc:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cbde:	2f dd       	sub	sp,-12
8002cbe0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cbe4 <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002cbe4:	eb cd 40 80 	pushm	r7,lr
8002cbe8:	1a 97       	mov	r7,sp
8002cbea:	20 3d       	sub	sp,12
8002cbec:	ef 4c ff fc 	st.w	r7[-4],r12
8002cbf0:	16 99       	mov	r9,r11
8002cbf2:	14 98       	mov	r8,r10
8002cbf4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cbf8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002cbfc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cc00:	58 18       	cp.w	r8,1
8002cc02:	c1 a0       	breq	8002cc36 <spi_set_bits_per_transfer+0x52>
8002cc04:	e0 89 00 05 	brgt	8002cc0e <spi_set_bits_per_transfer+0x2a>
8002cc08:	58 08       	cp.w	r8,0
8002cc0a:	c0 70       	breq	8002cc18 <spi_set_bits_per_transfer+0x34>
8002cc0c:	c4 18       	rjmp	8002cc8e <spi_set_bits_per_transfer+0xaa>
8002cc0e:	58 28       	cp.w	r8,2
8002cc10:	c2 20       	breq	8002cc54 <spi_set_bits_per_transfer+0x70>
8002cc12:	58 38       	cp.w	r8,3
8002cc14:	c2 f0       	breq	8002cc72 <spi_set_bits_per_transfer+0x8e>
8002cc16:	c3 c8       	rjmp	8002cc8e <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002cc18:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cc1c:	20 88       	sub	r8,8
8002cc1e:	5c 58       	castu.b	r8
8002cc20:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cc24:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cc28:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc2c:	72 c8       	ld.w	r8,r9[0x30]
8002cc2e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cc32:	93 c8       	st.w	r9[0x30],r8
      break;
8002cc34:	c2 d8       	rjmp	8002cc8e <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002cc36:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cc3a:	20 88       	sub	r8,8
8002cc3c:	5c 58       	castu.b	r8
8002cc3e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cc42:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cc46:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc4a:	72 d8       	ld.w	r8,r9[0x34]
8002cc4c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cc50:	93 d8       	st.w	r9[0x34],r8
      break;
8002cc52:	c1 e8       	rjmp	8002cc8e <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002cc54:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cc58:	20 88       	sub	r8,8
8002cc5a:	5c 58       	castu.b	r8
8002cc5c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cc60:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cc64:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc68:	72 e8       	ld.w	r8,r9[0x38]
8002cc6a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cc6e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cc70:	c0 f8       	rjmp	8002cc8e <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002cc72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cc76:	20 88       	sub	r8,8
8002cc78:	5c 58       	castu.b	r8
8002cc7a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002cc7e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cc82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cc86:	72 f8       	ld.w	r8,r9[0x3c]
8002cc88:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002cc8c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cc8e:	2f dd       	sub	sp,-12
8002cc90:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cc94 <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002cc94:	eb cd 40 80 	pushm	r7,lr
8002cc98:	1a 97       	mov	r7,sp
8002cc9a:	20 3d       	sub	sp,12
8002cc9c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cca0:	16 99       	mov	r9,r11
8002cca2:	14 98       	mov	r8,r10
8002cca4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cca8:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002ccac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ccb0:	58 18       	cp.w	r8,1
8002ccb2:	c1 40       	breq	8002ccda <spi_set_baudrate_register+0x46>
8002ccb4:	e0 89 00 05 	brgt	8002ccbe <spi_set_baudrate_register+0x2a>
8002ccb8:	58 08       	cp.w	r8,0
8002ccba:	c0 70       	breq	8002ccc8 <spi_set_baudrate_register+0x34>
8002ccbc:	c2 98       	rjmp	8002cd0e <spi_set_baudrate_register+0x7a>
8002ccbe:	58 28       	cp.w	r8,2
8002ccc0:	c1 60       	breq	8002ccec <spi_set_baudrate_register+0x58>
8002ccc2:	58 38       	cp.w	r8,3
8002ccc4:	c1 d0       	breq	8002ccfe <spi_set_baudrate_register+0x6a>
8002ccc6:	c2 48       	rjmp	8002cd0e <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002ccc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cccc:	72 c8       	ld.w	r8,r9[0x30]
8002ccce:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ccd2:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002ccd6:	93 c8       	st.w	r9[0x30],r8
      break;
8002ccd8:	c1 b8       	rjmp	8002cd0e <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002ccda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccde:	72 d8       	ld.w	r8,r9[0x34]
8002cce0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cce4:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cce8:	93 d8       	st.w	r9[0x34],r8
      break;
8002ccea:	c1 28       	rjmp	8002cd0e <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002ccec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccf0:	72 e8       	ld.w	r8,r9[0x38]
8002ccf2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ccf6:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002ccfa:	93 e8       	st.w	r9[0x38],r8
      break;
8002ccfc:	c0 98       	rjmp	8002cd0e <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002ccfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd02:	72 f8       	ld.w	r8,r9[0x3c]
8002cd04:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cd08:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002cd0c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cd0e:	2f dd       	sub	sp,-12
8002cd10:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cd14 <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002cd14:	eb cd 40 80 	pushm	r7,lr
8002cd18:	1a 97       	mov	r7,sp
8002cd1a:	20 2d       	sub	sp,8
8002cd1c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cd20:	16 98       	mov	r8,r11
8002cd22:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002cd26:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cd2a:	58 18       	cp.w	r8,1
8002cd2c:	c1 30       	breq	8002cd52 <spi_enable_active_mode+0x3e>
8002cd2e:	e0 89 00 05 	brgt	8002cd38 <spi_enable_active_mode+0x24>
8002cd32:	58 08       	cp.w	r8,0
8002cd34:	c0 70       	breq	8002cd42 <spi_enable_active_mode+0x2e>
8002cd36:	c2 58       	rjmp	8002cd80 <spi_enable_active_mode+0x6c>
8002cd38:	58 28       	cp.w	r8,2
8002cd3a:	c1 40       	breq	8002cd62 <spi_enable_active_mode+0x4e>
8002cd3c:	58 38       	cp.w	r8,3
8002cd3e:	c1 a0       	breq	8002cd72 <spi_enable_active_mode+0x5e>
8002cd40:	c2 08       	rjmp	8002cd80 <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002cd42:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd46:	72 c8       	ld.w	r8,r9[0x30]
8002cd48:	30 1a       	mov	r10,1
8002cd4a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cd4e:	93 c8       	st.w	r9[0x30],r8
      break;
8002cd50:	c1 88       	rjmp	8002cd80 <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002cd52:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd56:	72 d8       	ld.w	r8,r9[0x34]
8002cd58:	30 1a       	mov	r10,1
8002cd5a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cd5e:	93 d8       	st.w	r9[0x34],r8
      break;
8002cd60:	c1 08       	rjmp	8002cd80 <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002cd62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd66:	72 e8       	ld.w	r8,r9[0x38]
8002cd68:	30 1a       	mov	r10,1
8002cd6a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cd6e:	93 e8       	st.w	r9[0x38],r8
      break;
8002cd70:	c0 88       	rjmp	8002cd80 <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002cd72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cd76:	72 f8       	ld.w	r8,r9[0x3c]
8002cd78:	30 1a       	mov	r10,1
8002cd7a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002cd7e:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cd80:	2f ed       	sub	sp,-8
8002cd82:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cd86 <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002cd86:	eb cd 40 80 	pushm	r7,lr
8002cd8a:	1a 97       	mov	r7,sp
8002cd8c:	20 3d       	sub	sp,12
8002cd8e:	ef 4c ff fc 	st.w	r7[-4],r12
8002cd92:	16 99       	mov	r9,r11
8002cd94:	14 98       	mov	r8,r10
8002cd96:	ef 69 ff f8 	st.b	r7[-8],r9
8002cd9a:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002cd9e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cda2:	58 18       	cp.w	r8,1
8002cda4:	c2 70       	breq	8002cdf2 <spi_set_mode+0x6c>
8002cda6:	e0 89 00 05 	brgt	8002cdb0 <spi_set_mode+0x2a>
8002cdaa:	58 08       	cp.w	r8,0
8002cdac:	c0 70       	breq	8002cdba <spi_set_mode+0x34>
8002cdae:	c7 58       	rjmp	8002ce98 <spi_set_mode+0x112>
8002cdb0:	58 28       	cp.w	r8,2
8002cdb2:	c3 c0       	breq	8002ce2a <spi_set_mode+0xa4>
8002cdb4:	58 38       	cp.w	r8,3
8002cdb6:	c5 60       	breq	8002ce62 <spi_set_mode+0xdc>
8002cdb8:	c7 08       	rjmp	8002ce98 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002cdba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cdbe:	a1 98       	lsr	r8,0x1
8002cdc0:	5c 58       	castu.b	r8
8002cdc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cdc6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cdca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cdce:	72 c8       	ld.w	r8,r9[0x30]
8002cdd0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cdd4:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002cdd6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cdda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cdde:	5f 08       	sreq	r8
8002cde0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cde4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cde8:	72 c8       	ld.w	r8,r9[0x30]
8002cdea:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cdee:	93 c8       	st.w	r9[0x30],r8
      break;
8002cdf0:	c5 48       	rjmp	8002ce98 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002cdf2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cdf6:	a1 98       	lsr	r8,0x1
8002cdf8:	5c 58       	castu.b	r8
8002cdfa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cdfe:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce02:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce06:	72 d8       	ld.w	r8,r9[0x34]
8002ce08:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ce0c:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002ce0e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ce12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ce16:	5f 08       	sreq	r8
8002ce18:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce20:	72 d8       	ld.w	r8,r9[0x34]
8002ce22:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ce26:	93 d8       	st.w	r9[0x34],r8
      break;
8002ce28:	c3 88       	rjmp	8002ce98 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002ce2a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ce2e:	a1 98       	lsr	r8,0x1
8002ce30:	5c 58       	castu.b	r8
8002ce32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ce36:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce3e:	72 e8       	ld.w	r8,r9[0x38]
8002ce40:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ce44:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002ce46:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ce4a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ce4e:	5f 08       	sreq	r8
8002ce50:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce54:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce58:	72 e8       	ld.w	r8,r9[0x38]
8002ce5a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ce5e:	93 e8       	st.w	r9[0x38],r8
      break;
8002ce60:	c1 c8       	rjmp	8002ce98 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002ce62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ce66:	a1 98       	lsr	r8,0x1
8002ce68:	5c 58       	castu.b	r8
8002ce6a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ce6e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce76:	72 f8       	ld.w	r8,r9[0x3c]
8002ce78:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ce7c:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002ce7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ce82:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ce86:	5f 08       	sreq	r8
8002ce88:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ce8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ce90:	72 f8       	ld.w	r8,r9[0x3c]
8002ce92:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ce96:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002ce98:	2f dd       	sub	sp,-12
8002ce9a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce9e <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002ce9e:	eb cd 40 80 	pushm	r7,lr
8002cea2:	1a 97       	mov	r7,sp
8002cea4:	20 2d       	sub	sp,8
8002cea6:	ef 4c ff fc 	st.w	r7[-4],r12
8002ceaa:	16 98       	mov	r8,r11
8002ceac:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002ceb0:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002ceb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ceb8:	91 39       	st.w	r8[0xc],r9
}
8002ceba:	2f ed       	sub	sp,-8
8002cebc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cec0 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002cec0:	eb cd 40 80 	pushm	r7,lr
8002cec4:	1a 97       	mov	r7,sp
8002cec6:	20 1d       	sub	sp,4
8002cec8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002cecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ced0:	70 28       	ld.w	r8,r8[0x8]
8002ced2:	5c 88       	casts.h	r8
}
8002ced4:	10 9c       	mov	r12,r8
8002ced6:	2f fd       	sub	sp,-4
8002ced8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cedc <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002cedc:	eb cd 40 80 	pushm	r7,lr
8002cee0:	1a 97       	mov	r7,sp
8002cee2:	20 1d       	sub	sp,4
8002cee4:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002cee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ceec:	70 48       	ld.w	r8,r8[0x10]
8002ceee:	e2 18 00 02 	andl	r8,0x2,COH
8002cef2:	5f 18       	srne	r8
8002cef4:	5c 58       	castu.b	r8
}
8002cef6:	10 9c       	mov	r12,r8
8002cef8:	2f fd       	sub	sp,-4
8002cefa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cefe <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002cefe:	eb cd 40 80 	pushm	r7,lr
8002cf02:	1a 97       	mov	r7,sp
8002cf04:	20 1d       	sub	sp,4
8002cf06:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002cf0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cf0e:	70 48       	ld.w	r8,r8[0x10]
8002cf10:	e2 18 02 01 	andl	r8,0x201,COH
8002cf14:	e0 48 02 01 	cp.w	r8,513
8002cf18:	5f 08       	sreq	r8
8002cf1a:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002cf1c:	10 9c       	mov	r12,r8
8002cf1e:	2f fd       	sub	sp,-4
8002cf20:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cf24 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002cf24:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf28:	1a 97       	mov	r7,sp
8002cf2a:	20 2d       	sub	sp,8
8002cf2c:	48 86       	lddpc	r6,8002cf4c <spi_write_single+0x28>
8002cf2e:	1e 26       	rsub	r6,pc
8002cf30:	ef 4c ff fc 	st.w	r7[-4],r12
8002cf34:	16 98       	mov	r8,r11
8002cf36:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002cf3a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cf3e:	10 9b       	mov	r11,r8
8002cf40:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cf44:	ca df       	rcall	8002ce9e <spi_put>
}
8002cf46:	2f ed       	sub	sp,-8
8002cf48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf4c:	80 02       	ld.sh	r2,r0[0x0]
8002cf4e:	cd b2       	brcc	8002cf04 <spi_is_rx_ready+0x6>

8002cf50 <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002cf50:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf54:	1a 97       	mov	r7,sp
8002cf56:	20 2d       	sub	sp,8
8002cf58:	48 96       	lddpc	r6,8002cf7c <spi_read_single+0x2c>
8002cf5a:	1e 26       	rsub	r6,pc
8002cf5c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cf60:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002cf64:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cf68:	ca cf       	rcall	8002cec0 <spi_get>
8002cf6a:	18 98       	mov	r8,r12
8002cf6c:	5c 88       	casts.h	r8
8002cf6e:	5c 58       	castu.b	r8
8002cf70:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cf74:	b2 88       	st.b	r9[0x0],r8
}
8002cf76:	2f ed       	sub	sp,-8
8002cf78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf7c:	80 02       	ld.sh	r2,r0[0x0]
8002cf7e:	cd de       	rcall	8002cd38 <spi_enable_active_mode+0x24>

8002cf80 <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002cf80:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf84:	1a 97       	mov	r7,sp
8002cf86:	20 5d       	sub	sp,20
8002cf88:	4a 76       	lddpc	r6,8002d024 <spi_master_setup_device+0xa4>
8002cf8a:	1e 26       	rsub	r6,pc
8002cf8c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cf90:	ef 4b ff f8 	st.w	r7[-8],r11
8002cf94:	ef 49 ff f0 	st.w	r7[-16],r9
8002cf98:	14 99       	mov	r9,r10
8002cf9a:	ef 69 ff f4 	st.b	r7[-12],r9
8002cf9e:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002cfa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cfa6:	11 88       	ld.ub	r8,r8[0x0]
8002cfa8:	30 0a       	mov	r10,0
8002cfaa:	10 9b       	mov	r11,r8
8002cfac:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cfb0:	fe b0 fd 9a 	rcall	8002cae4 <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002cfb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cfb8:	11 88       	ld.ub	r8,r8[0x0]
8002cfba:	30 0a       	mov	r10,0
8002cfbc:	10 9b       	mov	r11,r8
8002cfbe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cfc2:	fe b0 fd d1 	rcall	8002cb64 <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002cfc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cfca:	11 88       	ld.ub	r8,r8[0x0]
8002cfcc:	30 8a       	mov	r10,8
8002cfce:	10 9b       	mov	r11,r8
8002cfd0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cfd4:	c0 8e       	rcall	8002cbe4 <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002cfd6:	fe b0 fd 7b 	rcall	8002cacc <sysclk_get_pba_hz>
8002cfda:	18 98       	mov	r8,r12
8002cfdc:	10 9b       	mov	r11,r8
8002cfde:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cfe2:	f0 16 01 1b 	mcall	r6[1132]
8002cfe6:	18 98       	mov	r8,r12
8002cfe8:	5c 58       	castu.b	r8
8002cfea:	10 99       	mov	r9,r8
8002cfec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cff0:	11 88       	ld.ub	r8,r8[0x0]
8002cff2:	12 9a       	mov	r10,r9
8002cff4:	10 9b       	mov	r11,r8
8002cff6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cffa:	c4 de       	rcall	8002cc94 <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002cffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d000:	11 88       	ld.ub	r8,r8[0x0]
8002d002:	10 9b       	mov	r11,r8
8002d004:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d008:	c8 6e       	rcall	8002cd14 <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002d00a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002d00e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d012:	11 88       	ld.ub	r8,r8[0x0]
8002d014:	12 9a       	mov	r10,r9
8002d016:	10 9b       	mov	r11,r8
8002d018:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d01c:	cb 5e       	rcall	8002cd86 <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002d01e:	2f bd       	sub	sp,-20
8002d020:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d024:	80 02       	ld.sh	r2,r0[0x0]
8002d026:	ce 0e       	rcall	8002cde6 <spi_set_mode+0x60>

8002d028 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002d028:	eb cd 40 c0 	pushm	r6-r7,lr
8002d02c:	1a 97       	mov	r7,sp
8002d02e:	20 6d       	sub	sp,24
8002d030:	4b 66       	lddpc	r6,8002d108 <spi_read_packet+0xe0>
8002d032:	1e 26       	rsub	r6,pc
8002d034:	ef 4c ff f0 	st.w	r7[-16],r12
8002d038:	ef 4b ff ec 	st.w	r7[-20],r11
8002d03c:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d040:	e0 68 3a 98 	mov	r8,15000
8002d044:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002d048:	30 08       	mov	r8,0
8002d04a:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002d04e:	c5 48       	rjmp	8002d0f6 <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002d050:	e0 68 3a 98 	mov	r8,15000
8002d054:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002d058:	c0 f8       	rjmp	8002d076 <spi_read_packet+0x4e>
       if (!timeout--) {
8002d05a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d05e:	58 08       	cp.w	r8,0
8002d060:	5f 08       	sreq	r8
8002d062:	5c 58       	castu.b	r8
8002d064:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d068:	20 19       	sub	r9,1
8002d06a:	ef 49 ff f8 	st.w	r7[-8],r9
8002d06e:	58 08       	cp.w	r8,0
8002d070:	c0 30       	breq	8002d076 <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002d072:	3f d8       	mov	r8,-3
8002d074:	c4 68       	rjmp	8002d100 <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d076:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d07a:	c3 1f       	rcall	8002cedc <spi_is_tx_ready>
8002d07c:	18 98       	mov	r8,r12
8002d07e:	ec 18 00 01 	eorl	r8,0x1
8002d082:	5c 58       	castu.b	r8
8002d084:	ce b1       	brne	8002d05a <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002d086:	e0 6b 00 ff 	mov	r11,255
8002d08a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d08e:	c4 bf       	rcall	8002cf24 <spi_write_single>
     timeout = SPI_TIMEOUT;
8002d090:	e0 68 3a 98 	mov	r8,15000
8002d094:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002d098:	c0 f8       	rjmp	8002d0b6 <spi_read_packet+0x8e>
       if (!timeout--) {
8002d09a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d09e:	58 08       	cp.w	r8,0
8002d0a0:	5f 08       	sreq	r8
8002d0a2:	5c 58       	castu.b	r8
8002d0a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d0a8:	20 19       	sub	r9,1
8002d0aa:	ef 49 ff f8 	st.w	r7[-8],r9
8002d0ae:	58 08       	cp.w	r8,0
8002d0b0:	c0 30       	breq	8002d0b6 <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002d0b2:	3f d8       	mov	r8,-3
8002d0b4:	c2 68       	rjmp	8002d100 <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002d0b6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d0ba:	c2 2f       	rcall	8002cefe <spi_is_rx_ready>
8002d0bc:	18 98       	mov	r8,r12
8002d0be:	ec 18 00 01 	eorl	r8,0x1
8002d0c2:	5c 58       	castu.b	r8
8002d0c4:	ce b1       	brne	8002d09a <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002d0c6:	ee c8 00 09 	sub	r8,r7,9
8002d0ca:	10 9b       	mov	r11,r8
8002d0cc:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d0d0:	c4 0f       	rcall	8002cf50 <spi_read_single>
     data[i] = val;
8002d0d2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d0d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d0da:	10 09       	add	r9,r8
8002d0dc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002d0e0:	b2 88       	st.b	r9[0x0],r8
     i++;
8002d0e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d0e6:	2f f8       	sub	r8,-1
8002d0e8:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002d0ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d0f0:	20 18       	sub	r8,1
8002d0f2:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002d0f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d0fa:	58 08       	cp.w	r8,0
8002d0fc:	ca a1       	brne	8002d050 <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002d0fe:	30 08       	mov	r8,0
}
8002d100:	10 9c       	mov	r12,r8
8002d102:	2f ad       	sub	sp,-24
8002d104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d108:	80 02       	ld.sh	r2,r0[0x0]
8002d10a:	ce b6       	brmi	8002d0e0 <spi_read_packet+0xb8>

8002d10c <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002d10c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d110:	1a 97       	mov	r7,sp
8002d112:	20 6d       	sub	sp,24
8002d114:	4a 76       	lddpc	r6,8002d1b0 <spi_write_packet+0xa4>
8002d116:	1e 26       	rsub	r6,pc
8002d118:	ef 4c ff f0 	st.w	r7[-16],r12
8002d11c:	ef 4b ff ec 	st.w	r7[-20],r11
8002d120:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d124:	e0 68 3a 98 	mov	r8,15000
8002d128:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002d12c:	30 08       	mov	r8,0
8002d12e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002d132:	c3 58       	rjmp	8002d19c <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002d134:	e0 68 3a 98 	mov	r8,15000
8002d138:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002d13c:	c0 f8       	rjmp	8002d15a <spi_write_packet+0x4e>
       if (!timeout--) {
8002d13e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d142:	58 08       	cp.w	r8,0
8002d144:	5f 08       	sreq	r8
8002d146:	5c 58       	castu.b	r8
8002d148:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d14c:	20 19       	sub	r9,1
8002d14e:	ef 49 ff f4 	st.w	r7[-12],r9
8002d152:	58 08       	cp.w	r8,0
8002d154:	c0 30       	breq	8002d15a <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002d156:	3f d8       	mov	r8,-3
8002d158:	c2 78       	rjmp	8002d1a6 <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d15a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d15e:	cb fe       	rcall	8002cedc <spi_is_tx_ready>
8002d160:	18 98       	mov	r8,r12
8002d162:	ec 18 00 01 	eorl	r8,0x1
8002d166:	5c 58       	castu.b	r8
8002d168:	ce b1       	brne	8002d13e <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002d16a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d16e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d172:	f2 08 00 08 	add	r8,r9,r8
8002d176:	11 88       	ld.ub	r8,r8[0x0]
8002d178:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002d17c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d180:	10 9b       	mov	r11,r8
8002d182:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d186:	cc fe       	rcall	8002cf24 <spi_write_single>
     i++;
8002d188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d18c:	2f f8       	sub	r8,-1
8002d18e:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002d192:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d196:	20 18       	sub	r8,1
8002d198:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002d19c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d1a0:	58 08       	cp.w	r8,0
8002d1a2:	cc 91       	brne	8002d134 <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002d1a4:	30 08       	mov	r8,0
}
8002d1a6:	10 9c       	mov	r12,r8
8002d1a8:	2f ad       	sub	sp,-24
8002d1aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d1ae:	00 00       	add	r0,r0
8002d1b0:	80 02       	ld.sh	r2,r0[0x0]
8002d1b2:	cf 9a       	rjmp	8002cfa4 <spi_master_setup_device+0x24>

8002d1b4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d1b4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d1b8:	1a 97       	mov	r7,sp
8002d1ba:	20 6d       	sub	sp,24
8002d1bc:	49 e6       	lddpc	r6,8002d234 <interpolate+0x80>
8002d1be:	1e 26       	rsub	r6,pc
8002d1c0:	ef 4c ff f8 	st.w	r7[-8],r12
8002d1c4:	ef 4b ff f4 	st.w	r7[-12],r11
8002d1c8:	ef 4a ff f0 	st.w	r7[-16],r10
8002d1cc:	ef 49 ff ec 	st.w	r7[-20],r9
8002d1d0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d1d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d1d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d1dc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d1e0:	c0 41       	brne	8002d1e8 <interpolate+0x34>
	{
		return y1;
8002d1e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d1e6:	c2 38       	rjmp	8002d22c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d1e8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d1ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d1f0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d1f4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d1f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d1fc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d200:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d204:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d208:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d20c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d210:	12 9b       	mov	r11,r9
8002d212:	10 9c       	mov	r12,r8
8002d214:	f0 16 00 08 	mcall	r6[32]
8002d218:	18 98       	mov	r8,r12
8002d21a:	10 99       	mov	r9,r8
8002d21c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d220:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d224:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d228:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d22c:	10 9c       	mov	r12,r8
8002d22e:	2f ad       	sub	sp,-24
8002d230:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d234:	80 02       	ld.sh	r2,r0[0x0]
8002d236:	d0 42       	popm	r8-r9

8002d238 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d238:	eb cd 40 c0 	pushm	r6-r7,lr
8002d23c:	1a 97       	mov	r7,sp
8002d23e:	20 3d       	sub	sp,12
8002d240:	49 06       	lddpc	r6,8002d280 <mav_array_memcpy+0x48>
8002d242:	1e 26       	rsub	r6,pc
8002d244:	ef 4c ff fc 	st.w	r7[-4],r12
8002d248:	ef 4b ff f8 	st.w	r7[-8],r11
8002d24c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d250:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d254:	58 08       	cp.w	r8,0
8002d256:	c0 91       	brne	8002d268 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d258:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d25c:	30 0b       	mov	r11,0
8002d25e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d262:	f0 16 00 2f 	mcall	r6[188]
8002d266:	c0 98       	rjmp	8002d278 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d268:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d26c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d270:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d274:	f0 16 00 1e 	mcall	r6[120]
	}
}
8002d278:	2f dd       	sub	sp,-12
8002d27a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d27e:	00 00       	add	r0,r0
8002d280:	80 02       	ld.sh	r2,r0[0x0]
8002d282:	d0 c6       	*unknown*

8002d284 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002d284:	eb cd 40 80 	pushm	r7,lr
8002d288:	1a 97       	mov	r7,sp
8002d28a:	20 1d       	sub	sp,4
8002d28c:	18 98       	mov	r8,r12
8002d28e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d292:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d296:	58 38       	cp.w	r8,3
8002d298:	c1 20       	breq	8002d2bc <osc_get_rate+0x38>
8002d29a:	e0 89 00 07 	brgt	8002d2a8 <osc_get_rate+0x24>
8002d29e:	58 08       	cp.w	r8,0
8002d2a0:	c0 90       	breq	8002d2b2 <osc_get_rate+0x2e>
8002d2a2:	58 28       	cp.w	r8,2
8002d2a4:	c0 f0       	breq	8002d2c2 <osc_get_rate+0x3e>
8002d2a6:	c1 b8       	rjmp	8002d2dc <osc_get_rate+0x58>
8002d2a8:	58 48       	cp.w	r8,4
8002d2aa:	c1 10       	breq	8002d2cc <osc_get_rate+0x48>
8002d2ac:	58 58       	cp.w	r8,5
8002d2ae:	c1 40       	breq	8002d2d6 <osc_get_rate+0x52>
8002d2b0:	c1 68       	rjmp	8002d2dc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002d2b2:	e0 68 24 00 	mov	r8,9216
8002d2b6:	ea 18 00 f4 	orh	r8,0xf4
8002d2ba:	c1 28       	rjmp	8002d2de <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002d2bc:	e0 68 80 00 	mov	r8,32768
8002d2c0:	c0 f8       	rjmp	8002d2de <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002d2c2:	e0 68 12 00 	mov	r8,4608
8002d2c6:	ea 18 00 7a 	orh	r8,0x7a
8002d2ca:	c0 a8       	rjmp	8002d2de <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002d2cc:	e0 68 0e 00 	mov	r8,3584
8002d2d0:	ea 18 07 27 	orh	r8,0x727
8002d2d4:	c0 58       	rjmp	8002d2de <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002d2d6:	e0 78 c1 38 	mov	r8,115000
8002d2da:	c0 28       	rjmp	8002d2de <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002d2dc:	30 08       	mov	r8,0
	}
}
8002d2de:	10 9c       	mov	r12,r8
8002d2e0:	2f fd       	sub	sp,-4
8002d2e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d2e6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002d2e6:	eb cd 40 c0 	pushm	r6-r7,lr
8002d2ea:	1a 97       	mov	r7,sp
8002d2ec:	48 56       	lddpc	r6,8002d300 <sysclk_get_main_hz+0x1a>
8002d2ee:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002d2f0:	30 0c       	mov	r12,0
8002d2f2:	cc 9f       	rcall	8002d284 <osc_get_rate>
8002d2f4:	18 98       	mov	r8,r12
8002d2f6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002d2f8:	10 9c       	mov	r12,r8
8002d2fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d2fe:	00 00       	add	r0,r0
8002d300:	80 02       	ld.sh	r2,r0[0x0]
8002d302:	d1 72       	popm	r0-r9,r11

8002d304 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002d304:	eb cd 40 c0 	pushm	r6-r7,lr
8002d308:	1a 97       	mov	r7,sp
8002d30a:	48 46       	lddpc	r6,8002d318 <sysclk_get_cpu_hz+0x14>
8002d30c:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002d30e:	ce cf       	rcall	8002d2e6 <sysclk_get_main_hz>
8002d310:	18 98       	mov	r8,r12
}
8002d312:	10 9c       	mov	r12,r8
8002d314:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d318:	80 02       	ld.sh	r2,r0[0x0]
8002d31a:	d1 90       	acall	0x19

8002d31c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002d31c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d320:	1a 97       	mov	r7,sp
8002d322:	20 1d       	sub	sp,4
8002d324:	49 06       	lddpc	r6,8002d364 <sleepmgr_init+0x48>
8002d326:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d328:	30 08       	mov	r8,0
8002d32a:	ef 68 ff ff 	st.b	r7[-1],r8
8002d32e:	c0 d8       	rjmp	8002d348 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002d330:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d334:	ec fa 03 e0 	ld.w	r10,r6[992]
8002d338:	30 08       	mov	r8,0
8002d33a:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d33e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d342:	2f f8       	sub	r8,-1
8002d344:	ef 68 ff ff 	st.b	r7[-1],r8
8002d348:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d34c:	30 58       	mov	r8,5
8002d34e:	f0 09 18 00 	cp.b	r9,r8
8002d352:	fe 98 ff ef 	brls	8002d330 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002d356:	ec f9 03 e0 	ld.w	r9,r6[992]
8002d35a:	30 18       	mov	r8,1
8002d35c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002d35e:	2f fd       	sub	sp,-4
8002d360:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d364:	80 02       	ld.sh	r2,r0[0x0]
8002d366:	d1 aa       	popm	r4-r7,r10-r11
8002d368:	42 6f       	lddsp	pc,sp[0x98]
8002d36a:	61 72       	ld.w	r2,r0[0x5c]
8002d36c:	64 20       	ld.w	r0,r2[0x8]
8002d36e:	69 6e       	ld.w	lr,r4[0x58]
8002d370:	69 74       	ld.w	r4,r4[0x5c]
8002d372:	69 61       	ld.w	r1,r4[0x58]
8002d374:	6c 69       	ld.w	r9,r6[0x18]
8002d376:	73 65       	ld.w	r5,r9[0x58]
8002d378:	64 2e       	ld.w	lr,r2[0x8]
8002d37a:	0a 00       	add	r0,r5

8002d37c <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002d37c:	eb cd 40 e0 	pushm	r5-r7,lr
8002d380:	1a 97       	mov	r7,sp
8002d382:	20 3d       	sub	sp,12
8002d384:	4f 66       	lddpc	r6,8002d55c <initialise_board+0x1e0>
8002d386:	1e 26       	rsub	r6,pc
8002d388:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d38c:	30 88       	mov	r8,8
8002d38e:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002d392:	f0 16 01 14 	mcall	r6[1104]
	cpu_irq_enable();
8002d396:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002d398:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002d39a:	cc 1f       	rcall	8002d31c <sleepmgr_init>
	sysclk_init();
8002d39c:	f0 16 01 46 	mcall	r6[1304]
	board_init();
8002d3a0:	f0 16 01 9f 	mcall	r6[1660]
	delay_init(sysclk_get_cpu_hz());
8002d3a4:	cb 0f       	rcall	8002d304 <sysclk_get_cpu_hz>
8002d3a6:	18 98       	mov	r8,r12
8002d3a8:	10 9c       	mov	r12,r8
8002d3aa:	f0 16 01 b1 	mcall	r6[1732]
	init_time_keeper();
8002d3ae:	f0 16 01 f7 	mcall	r6[2012]
		
	INTC_init_interrupts();
8002d3b2:	f0 16 01 14 	mcall	r6[1104]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002d3b6:	30 0c       	mov	r12,0
8002d3b8:	f0 16 00 dd 	mcall	r6[884]
8002d3bc:	18 98       	mov	r8,r12
8002d3be:	58 08       	cp.w	r8,0
8002d3c0:	c0 20       	breq	8002d3c4 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d3c2:	c0 08       	rjmp	8002d3c2 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002d3c4:	30 1c       	mov	r12,1
8002d3c6:	f0 16 00 dd 	mcall	r6[884]
8002d3ca:	18 98       	mov	r8,r12
8002d3cc:	58 08       	cp.w	r8,0
8002d3ce:	c0 20       	breq	8002d3d2 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d3d0:	c0 08       	rjmp	8002d3d0 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002d3d2:	30 2c       	mov	r12,2
8002d3d4:	f0 16 01 65 	mcall	r6[1428]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002d3d8:	f0 16 02 1e 	mcall	r6[2168]
	set_servos(&servo_failsafe);
8002d3dc:	ec fc 08 84 	ld.w	r12,r6[2180]
8002d3e0:	f0 16 00 a4 	mcall	r6[656]
	
		
	init_UART_int(0);
8002d3e4:	30 0c       	mov	r12,0
8002d3e6:	f0 16 00 a0 	mcall	r6[640]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002d3ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d3ee:	f0 c5 f7 cc 	sub	r5,r8,-2100
8002d3f2:	30 0c       	mov	r12,0
8002d3f4:	f0 16 00 63 	mcall	r6[396]
8002d3f8:	18 98       	mov	r8,r12
8002d3fa:	0a 9b       	mov	r11,r5
8002d3fc:	10 9c       	mov	r12,r8
8002d3fe:	f0 16 00 ce 	mcall	r6[824]
				
		
	init_UART_int(3);
8002d402:	30 3c       	mov	r12,3
8002d404:	f0 16 00 a0 	mcall	r6[640]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002d408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d40c:	f0 c9 f6 68 	sub	r9,r8,-2456
8002d410:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d414:	f0 c8 f7 6c 	sub	r8,r8,-2196
8002d418:	12 9b       	mov	r11,r9
8002d41a:	10 9c       	mov	r12,r8
8002d41c:	f0 16 01 68 	mcall	r6[1440]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002d420:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d424:	f0 c5 f6 68 	sub	r5,r8,-2456
8002d428:	30 3c       	mov	r12,3
8002d42a:	f0 16 00 63 	mcall	r6[396]
8002d42e:	18 98       	mov	r8,r12
8002d430:	0a 9b       	mov	r11,r5
8002d432:	10 9c       	mov	r12,r8
8002d434:	f0 16 00 bd 	mcall	r6[756]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002d438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d43c:	f0 c5 f6 50 	sub	r5,r8,-2480
8002d440:	30 3c       	mov	r12,3
8002d442:	f0 16 00 63 	mcall	r6[396]
8002d446:	18 98       	mov	r8,r12
8002d448:	0a 9b       	mov	r11,r5
8002d44a:	10 9c       	mov	r12,r8
8002d44c:	f0 16 00 ce 	mcall	r6[824]
		
	init_UART_int(4);
8002d450:	30 4c       	mov	r12,4
8002d452:	f0 16 00 a0 	mcall	r6[640]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d456:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d45a:	f0 c5 f7 9c 	sub	r5,r8,-2148
8002d45e:	30 4c       	mov	r12,4
8002d460:	f0 16 00 63 	mcall	r6[396]
8002d464:	18 98       	mov	r8,r12
8002d466:	0a 9b       	mov	r11,r5
8002d468:	10 9c       	mov	r12,r8
8002d46a:	f0 16 00 ce 	mcall	r6[824]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d46e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d472:	f0 c9 f7 b4 	sub	r9,r8,-2124
8002d476:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d47a:	f0 c8 f9 d4 	sub	r8,r8,-1580
8002d47e:	12 9b       	mov	r11,r9
8002d480:	10 9c       	mov	r12,r8
8002d482:	f0 16 00 eb 	mcall	r6[940]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d486:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d48a:	f0 c9 f7 84 	sub	r9,r8,-2172
8002d48e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d492:	f0 c8 f8 d1 	sub	r8,r8,-1839
8002d496:	12 9b       	mov	r11,r9
8002d498:	10 9c       	mov	r12,r8
8002d49a:	f0 16 00 eb 	mcall	r6[940]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d49e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4a2:	f0 c5 f7 84 	sub	r5,r8,-2172
8002d4a6:	30 4c       	mov	r12,4
8002d4a8:	f0 16 00 63 	mcall	r6[396]
8002d4ac:	18 98       	mov	r8,r12
8002d4ae:	0a 9b       	mov	r11,r5
8002d4b0:	10 9c       	mov	r12,r8
8002d4b2:	f0 16 00 bd 	mcall	r6[756]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d4b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4ba:	f0 c5 f7 b4 	sub	r5,r8,-2124
8002d4be:	30 0c       	mov	r12,0
8002d4c0:	f0 16 00 63 	mcall	r6[396]
8002d4c4:	18 98       	mov	r8,r12
8002d4c6:	0a 9b       	mov	r11,r5
8002d4c8:	10 9c       	mov	r12,r8
8002d4ca:	f0 16 00 bd 	mcall	r6[756]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d4ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4d2:	f0 c9 f7 cc 	sub	r9,r8,-2100
8002d4d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4da:	f1 49 0c bc 	st.w	r8[3260],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d4de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4e2:	f0 c9 f7 b4 	sub	r9,r8,-2124
8002d4e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4ea:	f1 49 0c c0 	st.w	r8[3264],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d4ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4f2:	f0 c9 f7 9c 	sub	r9,r8,-2148
8002d4f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d4fa:	f1 49 0c c4 	st.w	r8[3268],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d4fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d502:	f0 c9 f7 84 	sub	r9,r8,-2172
8002d506:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d50a:	f1 49 0c c8 	st.w	r8[3272],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d50e:	f0 16 01 bc 	mcall	r6[1776]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d512:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d516:	f0 f9 0c c0 	ld.w	r9,r8[3264]
8002d51a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d51e:	f0 f8 0c bc 	ld.w	r8,r8[3260]
8002d522:	32 ca       	mov	r10,44
8002d524:	12 9b       	mov	r11,r9
8002d526:	10 9c       	mov	r12,r8
8002d528:	f0 16 01 ca 	mcall	r6[1832]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d52c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d530:	f0 f8 0c c4 	ld.w	r8,r8[3268]
8002d534:	10 9c       	mov	r12,r8
8002d536:	f0 16 01 5f 	mcall	r6[1404]
		
	init_imu(&(centralData->imu1));
8002d53a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d53e:	10 9c       	mov	r12,r8
8002d540:	f0 16 01 6a 	mcall	r6[1448]
	init_bmp085();
8002d544:	f0 16 01 e5 	mcall	r6[1940]

	rc_init();
8002d548:	f0 16 01 35 	mcall	r6[1236]


	Enable_global_interrupt();
8002d54c:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d54e:	fe cc 01 e6 	sub	r12,pc,486
8002d552:	f0 16 00 01 	mcall	r6[4]
}
8002d556:	2f dd       	sub	sp,-12
8002d558:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d55c:	80 02       	ld.sh	r2,r0[0x0]
8002d55e:	d2 0a       	popm	r12

8002d560 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d560:	eb cd 40 c0 	pushm	r6-r7,lr
8002d564:	1a 97       	mov	r7,sp
8002d566:	20 6d       	sub	sp,24
8002d568:	49 e6       	lddpc	r6,8002d5e0 <interpolate+0x80>
8002d56a:	1e 26       	rsub	r6,pc
8002d56c:	ef 4c ff f8 	st.w	r7[-8],r12
8002d570:	ef 4b ff f4 	st.w	r7[-12],r11
8002d574:	ef 4a ff f0 	st.w	r7[-16],r10
8002d578:	ef 49 ff ec 	st.w	r7[-20],r9
8002d57c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d580:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d584:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d588:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d58c:	c0 41       	brne	8002d594 <interpolate+0x34>
	{
		return y1;
8002d58e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d592:	c2 38       	rjmp	8002d5d8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d594:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d598:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d59c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d5a0:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d5a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5a8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d5ac:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d5b0:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d5b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d5b8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d5bc:	12 9b       	mov	r11,r9
8002d5be:	10 9c       	mov	r12,r8
8002d5c0:	f0 16 00 08 	mcall	r6[32]
8002d5c4:	18 98       	mov	r8,r12
8002d5c6:	10 99       	mov	r9,r8
8002d5c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d5cc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d5d0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d5d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d5d8:	10 9c       	mov	r12,r8
8002d5da:	2f ad       	sub	sp,-24
8002d5dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d5e0:	80 02       	ld.sh	r2,r0[0x0]
8002d5e2:	d3 ee       	*unknown*

8002d5e4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d5e4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d5e8:	1a 97       	mov	r7,sp
8002d5ea:	20 3d       	sub	sp,12
8002d5ec:	49 06       	lddpc	r6,8002d62c <mav_array_memcpy+0x48>
8002d5ee:	1e 26       	rsub	r6,pc
8002d5f0:	ef 4c ff fc 	st.w	r7[-4],r12
8002d5f4:	ef 4b ff f8 	st.w	r7[-8],r11
8002d5f8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d5fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d600:	58 08       	cp.w	r8,0
8002d602:	c0 91       	brne	8002d614 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d604:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d608:	30 0b       	mov	r11,0
8002d60a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d60e:	f0 16 00 2f 	mcall	r6[188]
8002d612:	c0 98       	rjmp	8002d624 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d614:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d618:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d61c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d620:	f0 16 00 1e 	mcall	r6[120]
	}
}
8002d624:	2f dd       	sub	sp,-12
8002d626:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d62a:	00 00       	add	r0,r0
8002d62c:	80 02       	ld.sh	r2,r0[0x0]
8002d62e:	d4 72       	popm	r0-r9,lr
8002d630:	44 65       	lddsp	r5,sp[0x118]
8002d632:	62 75       	ld.w	r5,r1[0x1c]
8002d634:	67 20       	ld.w	r0,r3[0x48]
8002d636:	73 74       	ld.w	r4,r9[0x5c]
8002d638:	72 65       	ld.w	r5,r9[0x18]
8002d63a:	61 6d       	ld.w	sp,r0[0x58]
8002d63c:	20 69       	sub	r9,6
8002d63e:	6e 69       	ld.w	r9,r7[0x18]
8002d640:	74 69       	ld.w	r9,r10[0x18]
8002d642:	61 6c       	ld.w	r12,r0[0x58]
8002d644:	69 73       	ld.w	r3,r4[0x5c]
8002d646:	65 64       	ld.w	r4,r2[0x58]
8002d648:	0a 00       	add	r0,r5

8002d64a <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002d64a:	eb cd 40 c0 	pushm	r6-r7,lr
8002d64e:	1a 97       	mov	r7,sp
8002d650:	20 2d       	sub	sp,8
8002d652:	4e 26       	lddpc	r6,8002d7d8 <initialisation+0x18e>
8002d654:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d656:	30 88       	mov	r8,8
8002d658:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002d65c:	f0 16 00 31 	mcall	r6[196]
8002d660:	18 99       	mov	r9,r12
8002d662:	ec f8 00 00 	ld.w	r8,r6[0]
8002d666:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002d668:	ec f8 00 00 	ld.w	r8,r6[0]
8002d66c:	70 08       	ld.w	r8,r8[0x0]
8002d66e:	10 9c       	mov	r12,r8
8002d670:	f0 16 02 1b 	mcall	r6[2156]
	initialise_central_data();
8002d674:	f0 16 01 b3 	mcall	r6[1740]
	

	init_radar_modules();
8002d678:	f0 16 01 66 	mcall	r6[1432]
	dbg_print("Debug stream initialised\n");
8002d67c:	fe cc 00 4c 	sub	r12,pc,76
8002d680:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002d684:	ec fc 08 80 	ld.w	r12,r6[2176]
8002d688:	f0 16 00 a4 	mcall	r6[656]

	init_onboard_parameters();
8002d68c:	f0 16 01 e3 	mcall	r6[1932]
	init_mavlink_actions();
8002d690:	f0 16 01 d2 	mcall	r6[1864]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002d694:	ec f8 00 00 	ld.w	r8,r6[0]
8002d698:	70 08       	ld.w	r8,r8[0x0]
8002d69a:	f0 ca f6 38 	sub	r10,r8,-2504
8002d69e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6a2:	70 08       	ld.w	r8,r8[0x0]
8002d6a4:	f0 c9 f0 7c 	sub	r9,r8,-3972
8002d6a8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6ac:	70 08       	ld.w	r8,r8[0x0]
8002d6ae:	f0 c8 f4 04 	sub	r8,r8,-3068
8002d6b2:	12 9b       	mov	r11,r9
8002d6b4:	10 9c       	mov	r12,r8
8002d6b6:	f0 16 01 6c 	mcall	r6[1456]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002d6ba:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6be:	70 09       	ld.w	r9,r8[0x0]
8002d6c0:	30 18       	mov	r8,1
8002d6c2:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002d6c6:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6ca:	70 09       	ld.w	r9,r8[0x0]
8002d6cc:	30 28       	mov	r8,2
8002d6ce:	f3 68 0f 7d 	st.b	r9[3965],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002d6d2:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6d6:	70 09       	ld.w	r9,r8[0x0]
8002d6d8:	30 08       	mov	r8,0
8002d6da:	f3 68 0f 7c 	st.b	r9[3964],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d6de:	e0 68 01 90 	mov	r8,400
8002d6e2:	ef 48 ff f8 	st.w	r7[-8],r8
8002d6e6:	c2 68       	rjmp	8002d732 <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002d6e8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6ec:	70 08       	ld.w	r8,r8[0x0]
8002d6ee:	10 9c       	mov	r12,r8
8002d6f0:	f0 16 00 90 	mcall	r6[576]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002d6f4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d6f8:	70 08       	ld.w	r8,r8[0x0]
8002d6fa:	f0 c9 f6 38 	sub	r9,r8,-2504
8002d6fe:	ec f8 00 00 	ld.w	r8,r6[0]
8002d702:	70 08       	ld.w	r8,r8[0x0]
8002d704:	f0 ca f0 7c 	sub	r10,r8,-3972
8002d708:	ec f8 00 00 	ld.w	r8,r6[0]
8002d70c:	70 08       	ld.w	r8,r8[0x0]
8002d70e:	f0 cb f4 04 	sub	r11,r8,-3068
8002d712:	ec f8 00 00 	ld.w	r8,r6[0]
8002d716:	70 08       	ld.w	r8,r8[0x0]
8002d718:	10 9c       	mov	r12,r8
8002d71a:	f0 16 00 91 	mcall	r6[580]
		mavlink_protocol_update();	
8002d71e:	f0 16 00 db 	mcall	r6[876]
		delay_ms(5);
8002d722:	30 5c       	mov	r12,5
8002d724:	f0 16 00 fd 	mcall	r6[1012]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d72c:	20 18       	sub	r8,1
8002d72e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d732:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d736:	58 08       	cp.w	r8,0
8002d738:	e0 8c 00 04 	brvs	8002d740 <initialisation+0xf6>
8002d73c:	fe 99 ff d6 	brgt	8002d6e8 <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002d740:	ec f8 00 00 	ld.w	r8,r6[0]
8002d744:	70 09       	ld.w	r9,r8[0x0]
8002d746:	30 08       	mov	r8,0
8002d748:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002d74c:	30 08       	mov	r8,0
8002d74e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d752:	c2 48       	rjmp	8002d79a <initialisation+0x150>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002d754:	ec f8 00 00 	ld.w	r8,r6[0]
8002d758:	70 08       	ld.w	r8,r8[0x0]
8002d75a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d75e:	f2 c9 fc f6 	sub	r9,r9,-778
8002d762:	30 0a       	mov	r10,0
8002d764:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002d768:	ec f8 00 00 	ld.w	r8,r6[0]
8002d76c:	70 08       	ld.w	r8,r8[0x0]
8002d76e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d772:	f2 c9 fc f3 	sub	r9,r9,-781
8002d776:	30 0a       	mov	r10,0
8002d778:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002d77c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d780:	70 08       	ld.w	r8,r8[0x0]
8002d782:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d786:	f2 c9 fc e9 	sub	r9,r9,-791
8002d78a:	30 0a       	mov	r10,0
8002d78c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002d790:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d794:	2f f8       	sub	r8,-1
8002d796:	ef 48 ff f8 	st.w	r7[-8],r8
8002d79a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d79e:	58 28       	cp.w	r8,2
8002d7a0:	fe 9a ff da 	brle	8002d754 <initialisation+0x10a>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002d7a4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7a8:	70 09       	ld.w	r9,r8[0x0]
8002d7aa:	30 38       	mov	r8,3
8002d7ac:	f3 68 0f 7d 	st.b	r9[3965],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002d7b0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7b4:	70 09       	ld.w	r9,r8[0x0]
8002d7b6:	34 08       	mov	r8,64
8002d7b8:	f3 68 0f 7c 	st.b	r9[3964],r8
	init_nav();
8002d7bc:	f0 16 01 ba 	mcall	r6[1768]
	init_waypoint_handler();
8002d7c0:	f0 16 01 57 	mcall	r6[1372]
	//e_init();
	
	init_neighbors();
8002d7c4:	f0 16 01 87 	mcall	r6[1564]
	init_orca();
8002d7c8:	f0 16 02 03 	mcall	r6[2060]
	
	LED_On(LED1);
8002d7cc:	30 2c       	mov	r12,2
8002d7ce:	f0 16 01 40 	mcall	r6[1280]
}
8002d7d2:	2f ed       	sub	sp,-8
8002d7d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d7d8:	80 02       	ld.sh	r2,r0[0x0]
8002d7da:	d4 d8       	*unknown*

8002d7dc <main>:



void main (void)
{
8002d7dc:	eb cd 40 c0 	pushm	r6-r7,lr
8002d7e0:	1a 97       	mov	r7,sp
8002d7e2:	48 b6       	lddpc	r6,8002d80c <main+0x30>
8002d7e4:	1e 26       	rsub	r6,pc
	
	initialisation();
8002d7e6:	f0 16 01 d6 	mcall	r6[1880]
	
	create_tasks();
8002d7ea:	f0 16 02 10 	mcall	r6[2112]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002d7ee:	ec f8 00 00 	ld.w	r8,r6[0]
8002d7f2:	70 08       	ld.w	r8,r8[0x0]
8002d7f4:	30 19       	mov	r9,1
8002d7f6:	f1 49 0f 80 	st.w	r8[3968],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002d7fa:	f0 16 00 fe 	mcall	r6[1016]
8002d7fe:	18 98       	mov	r8,r12
8002d800:	30 0b       	mov	r11,0
8002d802:	10 9c       	mov	r12,r8
8002d804:	f0 16 00 e7 	mcall	r6[924]
		
		//LED_On(LED1);

		
	}		
8002d808:	cf 9b       	rjmp	8002d7fa <main+0x1e>
8002d80a:	00 00       	add	r0,r0
8002d80c:	80 02       	ld.sh	r2,r0[0x0]
8002d80e:	d6 68       	*unknown*

8002d810 <cos>:
8002d810:	d4 21       	pushm	r4-r7,lr
8002d812:	20 4d       	sub	sp,16
8002d814:	e0 6e 21 fb 	mov	lr,8699
8002d818:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d81c:	14 98       	mov	r8,r10
8002d81e:	16 99       	mov	r9,r11
8002d820:	16 95       	mov	r5,r11
8002d822:	14 96       	mov	r6,r10
8002d824:	16 97       	mov	r7,r11
8002d826:	16 94       	mov	r4,r11
8002d828:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d82c:	1c 3c       	cp.w	r12,lr
8002d82e:	e0 89 00 05 	brgt	8002d838 <cos+0x28>
8002d832:	30 08       	mov	r8,0
8002d834:	30 09       	mov	r9,0
8002d836:	c1 a8       	rjmp	8002d86a <cos+0x5a>
8002d838:	e0 65 ff ff 	mov	r5,65535
8002d83c:	ea 15 7f ef 	orh	r5,0x7fef
8002d840:	0a 3c       	cp.w	r12,r5
8002d842:	e0 8a 00 05 	brle	8002d84c <cos+0x3c>
8002d846:	e0 a0 1a 49 	rcall	80030cd8 <__avr32_f64_sub>
8002d84a:	c2 68       	rjmp	8002d896 <cos+0x86>
8002d84c:	1a 9c       	mov	r12,sp
8002d84e:	e0 a0 0b 91 	rcall	8002ef70 <__ieee754_rem_pio2>
8002d852:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d856:	58 1c       	cp.w	r12,1
8002d858:	c0 c0       	breq	8002d870 <cos+0x60>
8002d85a:	58 2c       	cp.w	r12,2
8002d85c:	c1 10       	breq	8002d87e <cos+0x6e>
8002d85e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d862:	fa ea 00 00 	ld.d	r10,sp[0]
8002d866:	58 0c       	cp.w	r12,0
8002d868:	c1 41       	brne	8002d890 <cos+0x80>
8002d86a:	e0 a0 10 b7 	rcall	8002f9d8 <__kernel_cos>
8002d86e:	c1 48       	rjmp	8002d896 <cos+0x86>
8002d870:	fa e8 00 08 	ld.d	r8,sp[8]
8002d874:	fa ea 00 00 	ld.d	r10,sp[0]
8002d878:	e0 a0 15 14 	rcall	800302a0 <__kernel_sin>
8002d87c:	c0 78       	rjmp	8002d88a <cos+0x7a>
8002d87e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d882:	fa ea 00 00 	ld.d	r10,sp[0]
8002d886:	e0 a0 10 a9 	rcall	8002f9d8 <__kernel_cos>
8002d88a:	ee 1b 80 00 	eorh	r11,0x8000
8002d88e:	c0 48       	rjmp	8002d896 <cos+0x86>
8002d890:	30 1c       	mov	r12,1
8002d892:	e0 a0 15 07 	rcall	800302a0 <__kernel_sin>
8002d896:	2f cd       	sub	sp,-16
8002d898:	d8 22       	popm	r4-r7,pc
8002d89a:	d7 03       	nop

8002d89c <sin>:
8002d89c:	d4 21       	pushm	r4-r7,lr
8002d89e:	20 4d       	sub	sp,16
8002d8a0:	e0 6e 21 fb 	mov	lr,8699
8002d8a4:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d8a8:	14 98       	mov	r8,r10
8002d8aa:	16 99       	mov	r9,r11
8002d8ac:	16 95       	mov	r5,r11
8002d8ae:	14 96       	mov	r6,r10
8002d8b0:	16 97       	mov	r7,r11
8002d8b2:	16 94       	mov	r4,r11
8002d8b4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d8b8:	1c 3c       	cp.w	r12,lr
8002d8ba:	e0 89 00 06 	brgt	8002d8c6 <sin+0x2a>
8002d8be:	30 0c       	mov	r12,0
8002d8c0:	30 08       	mov	r8,0
8002d8c2:	30 09       	mov	r9,0
8002d8c4:	c1 b8       	rjmp	8002d8fa <sin+0x5e>
8002d8c6:	e0 65 ff ff 	mov	r5,65535
8002d8ca:	ea 15 7f ef 	orh	r5,0x7fef
8002d8ce:	0a 3c       	cp.w	r12,r5
8002d8d0:	e0 8a 00 05 	brle	8002d8da <sin+0x3e>
8002d8d4:	e0 a0 1a 02 	rcall	80030cd8 <__avr32_f64_sub>
8002d8d8:	c2 78       	rjmp	8002d926 <sin+0x8a>
8002d8da:	1a 9c       	mov	r12,sp
8002d8dc:	e0 a0 0b 4a 	rcall	8002ef70 <__ieee754_rem_pio2>
8002d8e0:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d8e4:	58 1c       	cp.w	r12,1
8002d8e6:	c0 d0       	breq	8002d900 <sin+0x64>
8002d8e8:	58 2c       	cp.w	r12,2
8002d8ea:	c1 20       	breq	8002d90e <sin+0x72>
8002d8ec:	fa e8 00 08 	ld.d	r8,sp[8]
8002d8f0:	fa ea 00 00 	ld.d	r10,sp[0]
8002d8f4:	58 0c       	cp.w	r12,0
8002d8f6:	c1 41       	brne	8002d91e <sin+0x82>
8002d8f8:	30 1c       	mov	r12,1
8002d8fa:	e0 a0 14 d3 	rcall	800302a0 <__kernel_sin>
8002d8fe:	c1 48       	rjmp	8002d926 <sin+0x8a>
8002d900:	fa e8 00 08 	ld.d	r8,sp[8]
8002d904:	fa ea 00 00 	ld.d	r10,sp[0]
8002d908:	e0 a0 10 68 	rcall	8002f9d8 <__kernel_cos>
8002d90c:	c0 d8       	rjmp	8002d926 <sin+0x8a>
8002d90e:	30 1c       	mov	r12,1
8002d910:	fa e8 00 08 	ld.d	r8,sp[8]
8002d914:	fa ea 00 00 	ld.d	r10,sp[0]
8002d918:	e0 a0 14 c4 	rcall	800302a0 <__kernel_sin>
8002d91c:	c0 38       	rjmp	8002d922 <sin+0x86>
8002d91e:	e0 a0 10 5d 	rcall	8002f9d8 <__kernel_cos>
8002d922:	ee 1b 80 00 	eorh	r11,0x8000
8002d926:	2f cd       	sub	sp,-16
8002d928:	d8 22       	popm	r4-r7,pc
8002d92a:	d7 03       	nop

8002d92c <asin>:
8002d92c:	d4 31       	pushm	r0-r7,lr
8002d92e:	20 9d       	sub	sp,36
8002d930:	4a 17       	lddpc	r7,8002d9b4 <asin+0x88>
8002d932:	14 94       	mov	r4,r10
8002d934:	16 95       	mov	r5,r11
8002d936:	e0 a0 02 3d 	rcall	8002ddb0 <__ieee754_asin>
8002d93a:	6e 08       	ld.w	r8,r7[0x0]
8002d93c:	14 92       	mov	r2,r10
8002d93e:	16 93       	mov	r3,r11
8002d940:	5b f8       	cp.w	r8,-1
8002d942:	c3 50       	breq	8002d9ac <asin+0x80>
8002d944:	08 9a       	mov	r10,r4
8002d946:	0a 9b       	mov	r11,r5
8002d948:	e0 a0 17 b8 	rcall	800308b8 <__isnand>
8002d94c:	18 96       	mov	r6,r12
8002d94e:	c2 f1       	brne	8002d9ac <asin+0x80>
8002d950:	08 9a       	mov	r10,r4
8002d952:	0a 9b       	mov	r11,r5
8002d954:	e0 a0 17 16 	rcall	80030780 <fabs>
8002d958:	14 98       	mov	r8,r10
8002d95a:	16 99       	mov	r9,r11
8002d95c:	30 0a       	mov	r10,0
8002d95e:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d962:	e0 a0 1b e1 	rcall	80031124 <__avr32_f64_cmp_lt>
8002d966:	c2 30       	breq	8002d9ac <asin+0x80>
8002d968:	30 18       	mov	r8,1
8002d96a:	50 08       	stdsp	sp[0x0],r8
8002d96c:	49 38       	lddpc	r8,8002d9b8 <asin+0x8c>
8002d96e:	50 86       	stdsp	sp[0x20],r6
8002d970:	50 18       	stdsp	sp[0x4],r8
8002d972:	fa e5 00 08 	st.d	sp[8],r4
8002d976:	fa e5 00 10 	st.d	sp[16],r4
8002d97a:	49 1c       	lddpc	r12,8002d9bc <asin+0x90>
8002d97c:	e0 a0 17 ad 	rcall	800308d6 <nan>
8002d980:	fa eb 00 18 	st.d	sp[24],r10
8002d984:	6e 08       	ld.w	r8,r7[0x0]
8002d986:	58 28       	cp.w	r8,2
8002d988:	c0 50       	breq	8002d992 <asin+0x66>
8002d98a:	1a 9c       	mov	r12,sp
8002d98c:	e0 a0 17 a4 	rcall	800308d4 <matherr>
8002d990:	c0 51       	brne	8002d99a <asin+0x6e>
8002d992:	e0 a0 21 2b 	rcall	80031be8 <__errno>
8002d996:	32 18       	mov	r8,33
8002d998:	99 08       	st.w	r12[0x0],r8
8002d99a:	40 88       	lddsp	r8,sp[0x20]
8002d99c:	58 08       	cp.w	r8,0
8002d99e:	c0 50       	breq	8002d9a8 <asin+0x7c>
8002d9a0:	e0 a0 21 24 	rcall	80031be8 <__errno>
8002d9a4:	40 88       	lddsp	r8,sp[0x20]
8002d9a6:	99 08       	st.w	r12[0x0],r8
8002d9a8:	fa e2 00 18 	ld.d	r2,sp[24]
8002d9ac:	04 9a       	mov	r10,r2
8002d9ae:	06 9b       	mov	r11,r3
8002d9b0:	2f 7d       	sub	sp,-36
8002d9b2:	d8 32       	popm	r0-r7,pc
8002d9b4:	00 00       	add	r0,r0
8002d9b6:	22 28       	sub	r8,34
8002d9b8:	80 03       	ld.sh	r3,r0[0x0]
8002d9ba:	23 74       	sub	r4,55
8002d9bc:	80 03       	ld.sh	r3,r0[0x0]
8002d9be:	23 78       	sub	r8,55

8002d9c0 <atan2>:
8002d9c0:	d4 01       	pushm	lr
8002d9c2:	e0 a0 04 6f 	rcall	8002e2a0 <__ieee754_atan2>
8002d9c6:	d8 02       	popm	pc

8002d9c8 <pow>:
8002d9c8:	d4 31       	pushm	r0-r7,lr
8002d9ca:	20 cd       	sub	sp,48
8002d9cc:	10 94       	mov	r4,r8
8002d9ce:	14 92       	mov	r2,r10
8002d9d0:	16 93       	mov	r3,r11
8002d9d2:	12 95       	mov	r5,r9
8002d9d4:	e0 a0 05 7c 	rcall	8002e4cc <__ieee754_pow>
8002d9d8:	4b f6       	lddpc	r6,8002dad4 <pow+0x10c>
8002d9da:	14 90       	mov	r0,r10
8002d9dc:	16 91       	mov	r1,r11
8002d9de:	6c 08       	ld.w	r8,r6[0x0]
8002d9e0:	5b f8       	cp.w	r8,-1
8002d9e2:	e0 80 01 46 	breq	8002dc6e <pow+0x2a6>
8002d9e6:	08 9a       	mov	r10,r4
8002d9e8:	0a 9b       	mov	r11,r5
8002d9ea:	e0 a0 17 67 	rcall	800308b8 <__isnand>
8002d9ee:	50 2c       	stdsp	sp[0x8],r12
8002d9f0:	e0 81 01 3f 	brne	8002dc6e <pow+0x2a6>
8002d9f4:	04 9a       	mov	r10,r2
8002d9f6:	06 9b       	mov	r11,r3
8002d9f8:	e0 a0 17 60 	rcall	800308b8 <__isnand>
8002d9fc:	18 97       	mov	r7,r12
8002d9fe:	c2 40       	breq	8002da46 <pow+0x7e>
8002da00:	30 08       	mov	r8,0
8002da02:	30 09       	mov	r9,0
8002da04:	08 9a       	mov	r10,r4
8002da06:	0a 9b       	mov	r11,r5
8002da08:	e0 a0 1b 47 	rcall	80031096 <__avr32_f64_cmp_eq>
8002da0c:	e0 80 01 31 	breq	8002dc6e <pow+0x2a6>
8002da10:	30 18       	mov	r8,1
8002da12:	50 38       	stdsp	sp[0xc],r8
8002da14:	4b 18       	lddpc	r8,8002dad8 <pow+0x110>
8002da16:	40 2c       	lddsp	r12,sp[0x8]
8002da18:	50 48       	stdsp	sp[0x10],r8
8002da1a:	fc 19 3f f0 	movh	r9,0x3ff0
8002da1e:	30 08       	mov	r8,0
8002da20:	fa e3 00 14 	st.d	sp[20],r2
8002da24:	fa e5 00 1c 	st.d	sp[28],r4
8002da28:	50 bc       	stdsp	sp[0x2c],r12
8002da2a:	fa e9 00 24 	st.d	sp[36],r8
8002da2e:	6c 0a       	ld.w	r10,r6[0x0]
8002da30:	5b fa       	cp.w	r10,-1
8002da32:	5f 0b       	sreq	r11
8002da34:	58 2a       	cp.w	r10,2
8002da36:	5f 0a       	sreq	r10
8002da38:	f5 eb 10 0b 	or	r11,r10,r11
8002da3c:	f8 0b 18 00 	cp.b	r11,r12
8002da40:	e0 81 01 0e 	brne	8002dc5c <pow+0x294>
8002da44:	c8 08       	rjmp	8002db44 <pow+0x17c>
8002da46:	30 08       	mov	r8,0
8002da48:	30 09       	mov	r9,0
8002da4a:	04 9a       	mov	r10,r2
8002da4c:	06 9b       	mov	r11,r3
8002da4e:	e0 a0 1b 24 	rcall	80031096 <__avr32_f64_cmp_eq>
8002da52:	c4 50       	breq	8002dadc <pow+0x114>
8002da54:	30 08       	mov	r8,0
8002da56:	30 09       	mov	r9,0
8002da58:	08 9a       	mov	r10,r4
8002da5a:	0a 9b       	mov	r11,r5
8002da5c:	e0 a0 1b 1d 	rcall	80031096 <__avr32_f64_cmp_eq>
8002da60:	c1 70       	breq	8002da8e <pow+0xc6>
8002da62:	30 18       	mov	r8,1
8002da64:	50 38       	stdsp	sp[0xc],r8
8002da66:	49 d8       	lddpc	r8,8002dad8 <pow+0x110>
8002da68:	30 09       	mov	r9,0
8002da6a:	50 48       	stdsp	sp[0x10],r8
8002da6c:	50 b7       	stdsp	sp[0x2c],r7
8002da6e:	30 08       	mov	r8,0
8002da70:	fa e3 00 14 	st.d	sp[20],r2
8002da74:	fa e9 00 24 	st.d	sp[36],r8
8002da78:	fa e5 00 1c 	st.d	sp[28],r4
8002da7c:	6c 08       	ld.w	r8,r6[0x0]
8002da7e:	58 08       	cp.w	r8,0
8002da80:	c6 20       	breq	8002db44 <pow+0x17c>
8002da82:	30 08       	mov	r8,0
8002da84:	fc 19 3f f0 	movh	r9,0x3ff0
8002da88:	fa e9 00 24 	st.d	sp[36],r8
8002da8c:	ce 88       	rjmp	8002dc5c <pow+0x294>
8002da8e:	08 9a       	mov	r10,r4
8002da90:	0a 9b       	mov	r11,r5
8002da92:	e0 a0 16 7b 	rcall	80030788 <finite>
8002da96:	e0 80 00 ec 	breq	8002dc6e <pow+0x2a6>
8002da9a:	30 08       	mov	r8,0
8002da9c:	30 09       	mov	r9,0
8002da9e:	08 9a       	mov	r10,r4
8002daa0:	0a 9b       	mov	r11,r5
8002daa2:	e0 a0 1b 41 	rcall	80031124 <__avr32_f64_cmp_lt>
8002daa6:	e0 80 00 e4 	breq	8002dc6e <pow+0x2a6>
8002daaa:	30 18       	mov	r8,1
8002daac:	50 b7       	stdsp	sp[0x2c],r7
8002daae:	50 38       	stdsp	sp[0xc],r8
8002dab0:	fa e3 00 14 	st.d	sp[20],r2
8002dab4:	48 98       	lddpc	r8,8002dad8 <pow+0x110>
8002dab6:	fa e5 00 1c 	st.d	sp[28],r4
8002daba:	50 48       	stdsp	sp[0x10],r8
8002dabc:	6c 08       	ld.w	r8,r6[0x0]
8002dabe:	58 08       	cp.w	r8,0
8002dac0:	c3 30       	breq	8002db26 <pow+0x15e>
8002dac2:	30 0a       	mov	r10,0
8002dac4:	f0 6b 00 00 	mov	r11,-1048576
8002dac8:	fa eb 00 24 	st.d	sp[36],r10
8002dacc:	58 28       	cp.w	r8,2
8002dace:	c4 10       	breq	8002db50 <pow+0x188>
8002dad0:	c3 a8       	rjmp	8002db44 <pow+0x17c>
8002dad2:	d7 03       	nop
8002dad4:	00 00       	add	r0,r0
8002dad6:	22 28       	sub	r8,34
8002dad8:	80 03       	ld.sh	r3,r0[0x0]
8002dada:	23 7c       	sub	r12,55
8002dadc:	00 9a       	mov	r10,r0
8002dade:	02 9b       	mov	r11,r1
8002dae0:	e0 a0 16 54 	rcall	80030788 <finite>
8002dae4:	18 97       	mov	r7,r12
8002dae6:	e0 81 00 8f 	brne	8002dc04 <pow+0x23c>
8002daea:	04 9a       	mov	r10,r2
8002daec:	06 9b       	mov	r11,r3
8002daee:	e0 a0 16 4d 	rcall	80030788 <finite>
8002daf2:	e0 80 00 89 	breq	8002dc04 <pow+0x23c>
8002daf6:	08 9a       	mov	r10,r4
8002daf8:	0a 9b       	mov	r11,r5
8002dafa:	e0 a0 16 47 	rcall	80030788 <finite>
8002dafe:	e0 80 00 83 	breq	8002dc04 <pow+0x23c>
8002db02:	00 9a       	mov	r10,r0
8002db04:	02 9b       	mov	r11,r1
8002db06:	e0 a0 16 d9 	rcall	800308b8 <__isnand>
8002db0a:	4b e8       	lddpc	r8,8002dc00 <pow+0x238>
8002db0c:	58 0c       	cp.w	r12,0
8002db0e:	c2 50       	breq	8002db58 <pow+0x190>
8002db10:	50 48       	stdsp	sp[0x10],r8
8002db12:	50 b7       	stdsp	sp[0x2c],r7
8002db14:	30 18       	mov	r8,1
8002db16:	fa e3 00 14 	st.d	sp[20],r2
8002db1a:	fa e5 00 1c 	st.d	sp[28],r4
8002db1e:	50 38       	stdsp	sp[0xc],r8
8002db20:	6c 07       	ld.w	r7,r6[0x0]
8002db22:	58 07       	cp.w	r7,0
8002db24:	c0 61       	brne	8002db30 <pow+0x168>
8002db26:	30 08       	mov	r8,0
8002db28:	30 09       	mov	r9,0
8002db2a:	fa e9 00 24 	st.d	sp[36],r8
8002db2e:	c0 b8       	rjmp	8002db44 <pow+0x17c>
8002db30:	30 08       	mov	r8,0
8002db32:	30 09       	mov	r9,0
8002db34:	10 9a       	mov	r10,r8
8002db36:	12 9b       	mov	r11,r9
8002db38:	e0 a0 1b 44 	rcall	800311c0 <__avr32_f64_div>
8002db3c:	fa eb 00 24 	st.d	sp[36],r10
8002db40:	58 27       	cp.w	r7,2
8002db42:	c0 70       	breq	8002db50 <pow+0x188>
8002db44:	fa cc ff f4 	sub	r12,sp,-12
8002db48:	e0 a0 16 c6 	rcall	800308d4 <matherr>
8002db4c:	e0 81 00 88 	brne	8002dc5c <pow+0x294>
8002db50:	e0 a0 20 4c 	rcall	80031be8 <__errno>
8002db54:	32 18       	mov	r8,33
8002db56:	c8 28       	rjmp	8002dc5a <pow+0x292>
8002db58:	50 48       	stdsp	sp[0x10],r8
8002db5a:	50 bc       	stdsp	sp[0x2c],r12
8002db5c:	30 38       	mov	r8,3
8002db5e:	fa e3 00 14 	st.d	sp[20],r2
8002db62:	50 38       	stdsp	sp[0xc],r8
8002db64:	fa e5 00 1c 	st.d	sp[28],r4
8002db68:	6c 08       	ld.w	r8,r6[0x0]
8002db6a:	58 08       	cp.w	r8,0
8002db6c:	c2 81       	brne	8002dbbc <pow+0x1f4>
8002db6e:	fc 18 e0 00 	movh	r8,0xe000
8002db72:	e0 69 ff ff 	mov	r9,65535
8002db76:	ea 19 47 ef 	orh	r9,0x47ef
8002db7a:	04 9a       	mov	r10,r2
8002db7c:	fa e9 00 24 	st.d	sp[36],r8
8002db80:	06 9b       	mov	r11,r3
8002db82:	30 08       	mov	r8,0
8002db84:	30 09       	mov	r9,0
8002db86:	e0 a0 1a cf 	rcall	80031124 <__avr32_f64_cmp_lt>
8002db8a:	c5 c0       	breq	8002dc42 <pow+0x27a>
8002db8c:	fc 19 3f e0 	movh	r9,0x3fe0
8002db90:	30 08       	mov	r8,0
8002db92:	08 9a       	mov	r10,r4
8002db94:	0a 9b       	mov	r11,r5
8002db96:	e0 a0 17 b5 	rcall	80030b00 <__avr32_f64_mul>
8002db9a:	16 99       	mov	r9,r11
8002db9c:	50 0a       	stdsp	sp[0x0],r10
8002db9e:	50 19       	stdsp	sp[0x4],r9
8002dba0:	e0 a0 16 a0 	rcall	800308e0 <rint>
8002dba4:	40 19       	lddsp	r9,sp[0x4]
8002dba6:	40 08       	lddsp	r8,sp[0x0]
8002dba8:	e0 a0 1a 77 	rcall	80031096 <__avr32_f64_cmp_eq>
8002dbac:	c4 b1       	brne	8002dc42 <pow+0x27a>
8002dbae:	fc 18 e0 00 	movh	r8,0xe000
8002dbb2:	e0 69 ff ff 	mov	r9,65535
8002dbb6:	ea 19 c7 ef 	orh	r9,0xc7ef
8002dbba:	c4 28       	rjmp	8002dc3e <pow+0x276>
8002dbbc:	30 08       	mov	r8,0
8002dbbe:	fc 19 7f f0 	movh	r9,0x7ff0
8002dbc2:	04 9a       	mov	r10,r2
8002dbc4:	fa e9 00 24 	st.d	sp[36],r8
8002dbc8:	06 9b       	mov	r11,r3
8002dbca:	30 08       	mov	r8,0
8002dbcc:	30 09       	mov	r9,0
8002dbce:	e0 a0 1a ab 	rcall	80031124 <__avr32_f64_cmp_lt>
8002dbd2:	c3 80       	breq	8002dc42 <pow+0x27a>
8002dbd4:	fc 19 3f e0 	movh	r9,0x3fe0
8002dbd8:	30 08       	mov	r8,0
8002dbda:	08 9a       	mov	r10,r4
8002dbdc:	0a 9b       	mov	r11,r5
8002dbde:	e0 a0 17 91 	rcall	80030b00 <__avr32_f64_mul>
8002dbe2:	16 99       	mov	r9,r11
8002dbe4:	50 0a       	stdsp	sp[0x0],r10
8002dbe6:	50 19       	stdsp	sp[0x4],r9
8002dbe8:	e0 a0 16 7c 	rcall	800308e0 <rint>
8002dbec:	40 19       	lddsp	r9,sp[0x4]
8002dbee:	40 08       	lddsp	r8,sp[0x0]
8002dbf0:	e0 a0 1a 53 	rcall	80031096 <__avr32_f64_cmp_eq>
8002dbf4:	c2 71       	brne	8002dc42 <pow+0x27a>
8002dbf6:	30 08       	mov	r8,0
8002dbf8:	f0 69 00 00 	mov	r9,-1048576
8002dbfc:	c2 18       	rjmp	8002dc3e <pow+0x276>
8002dbfe:	d7 03       	nop
8002dc00:	80 03       	ld.sh	r3,r0[0x0]
8002dc02:	23 7c       	sub	r12,55
8002dc04:	30 08       	mov	r8,0
8002dc06:	30 09       	mov	r9,0
8002dc08:	00 9a       	mov	r10,r0
8002dc0a:	02 9b       	mov	r11,r1
8002dc0c:	e0 a0 1a 45 	rcall	80031096 <__avr32_f64_cmp_eq>
8002dc10:	c2 f0       	breq	8002dc6e <pow+0x2a6>
8002dc12:	04 9a       	mov	r10,r2
8002dc14:	06 9b       	mov	r11,r3
8002dc16:	e0 a0 15 b9 	rcall	80030788 <finite>
8002dc1a:	c2 a0       	breq	8002dc6e <pow+0x2a6>
8002dc1c:	08 9a       	mov	r10,r4
8002dc1e:	0a 9b       	mov	r11,r5
8002dc20:	e0 a0 15 b4 	rcall	80030788 <finite>
8002dc24:	c2 50       	breq	8002dc6e <pow+0x2a6>
8002dc26:	30 48       	mov	r8,4
8002dc28:	50 38       	stdsp	sp[0xc],r8
8002dc2a:	49 48       	lddpc	r8,8002dc78 <pow+0x2b0>
8002dc2c:	50 48       	stdsp	sp[0x10],r8
8002dc2e:	30 08       	mov	r8,0
8002dc30:	fa e3 00 14 	st.d	sp[20],r2
8002dc34:	50 b8       	stdsp	sp[0x2c],r8
8002dc36:	fa e5 00 1c 	st.d	sp[28],r4
8002dc3a:	30 08       	mov	r8,0
8002dc3c:	30 09       	mov	r9,0
8002dc3e:	fa e9 00 24 	st.d	sp[36],r8
8002dc42:	48 f8       	lddpc	r8,8002dc7c <pow+0x2b4>
8002dc44:	70 08       	ld.w	r8,r8[0x0]
8002dc46:	58 28       	cp.w	r8,2
8002dc48:	c0 60       	breq	8002dc54 <pow+0x28c>
8002dc4a:	fa cc ff f4 	sub	r12,sp,-12
8002dc4e:	e0 a0 16 43 	rcall	800308d4 <matherr>
8002dc52:	c0 51       	brne	8002dc5c <pow+0x294>
8002dc54:	e0 a0 1f ca 	rcall	80031be8 <__errno>
8002dc58:	32 28       	mov	r8,34
8002dc5a:	99 08       	st.w	r12[0x0],r8
8002dc5c:	40 b8       	lddsp	r8,sp[0x2c]
8002dc5e:	58 08       	cp.w	r8,0
8002dc60:	c0 50       	breq	8002dc6a <pow+0x2a2>
8002dc62:	e0 a0 1f c3 	rcall	80031be8 <__errno>
8002dc66:	40 b8       	lddsp	r8,sp[0x2c]
8002dc68:	99 08       	st.w	r12[0x0],r8
8002dc6a:	fa e0 00 24 	ld.d	r0,sp[36]
8002dc6e:	00 9a       	mov	r10,r0
8002dc70:	02 9b       	mov	r11,r1
8002dc72:	2f 4d       	sub	sp,-48
8002dc74:	d8 32       	popm	r0-r7,pc
8002dc76:	d7 03       	nop
8002dc78:	80 03       	ld.sh	r3,r0[0x0]
8002dc7a:	23 7c       	sub	r12,55
8002dc7c:	00 00       	add	r0,r0
8002dc7e:	22 28       	sub	r8,34

8002dc80 <sqrt>:
8002dc80:	d4 31       	pushm	r0-r7,lr
8002dc82:	20 9d       	sub	sp,36
8002dc84:	4a 47       	lddpc	r7,8002dd14 <sqrt+0x94>
8002dc86:	14 94       	mov	r4,r10
8002dc88:	16 95       	mov	r5,r11
8002dc8a:	e0 a0 0b ab 	rcall	8002f3e0 <__ieee754_sqrt>
8002dc8e:	6e 08       	ld.w	r8,r7[0x0]
8002dc90:	14 92       	mov	r2,r10
8002dc92:	16 93       	mov	r3,r11
8002dc94:	5b f8       	cp.w	r8,-1
8002dc96:	c3 a0       	breq	8002dd0a <sqrt+0x8a>
8002dc98:	08 9a       	mov	r10,r4
8002dc9a:	0a 9b       	mov	r11,r5
8002dc9c:	e0 a0 16 0e 	rcall	800308b8 <__isnand>
8002dca0:	18 96       	mov	r6,r12
8002dca2:	c3 41       	brne	8002dd0a <sqrt+0x8a>
8002dca4:	30 08       	mov	r8,0
8002dca6:	30 09       	mov	r9,0
8002dca8:	08 9a       	mov	r10,r4
8002dcaa:	0a 9b       	mov	r11,r5
8002dcac:	e0 a0 1a 3c 	rcall	80031124 <__avr32_f64_cmp_lt>
8002dcb0:	c2 d0       	breq	8002dd0a <sqrt+0x8a>
8002dcb2:	30 18       	mov	r8,1
8002dcb4:	50 86       	stdsp	sp[0x20],r6
8002dcb6:	50 08       	stdsp	sp[0x0],r8
8002dcb8:	fa e5 00 08 	st.d	sp[8],r4
8002dcbc:	49 78       	lddpc	r8,8002dd18 <sqrt+0x98>
8002dcbe:	fa e5 00 10 	st.d	sp[16],r4
8002dcc2:	50 18       	stdsp	sp[0x4],r8
8002dcc4:	6e 07       	ld.w	r7,r7[0x0]
8002dcc6:	58 07       	cp.w	r7,0
8002dcc8:	c0 61       	brne	8002dcd4 <sqrt+0x54>
8002dcca:	30 08       	mov	r8,0
8002dccc:	30 09       	mov	r9,0
8002dcce:	fa e9 00 18 	st.d	sp[24],r8
8002dcd2:	c0 b8       	rjmp	8002dce8 <sqrt+0x68>
8002dcd4:	30 08       	mov	r8,0
8002dcd6:	30 09       	mov	r9,0
8002dcd8:	10 9a       	mov	r10,r8
8002dcda:	12 9b       	mov	r11,r9
8002dcdc:	e0 a0 1a 72 	rcall	800311c0 <__avr32_f64_div>
8002dce0:	fa eb 00 18 	st.d	sp[24],r10
8002dce4:	58 27       	cp.w	r7,2
8002dce6:	c0 50       	breq	8002dcf0 <sqrt+0x70>
8002dce8:	1a 9c       	mov	r12,sp
8002dcea:	e0 a0 15 f5 	rcall	800308d4 <matherr>
8002dcee:	c0 51       	brne	8002dcf8 <sqrt+0x78>
8002dcf0:	e0 a0 1f 7c 	rcall	80031be8 <__errno>
8002dcf4:	32 18       	mov	r8,33
8002dcf6:	99 08       	st.w	r12[0x0],r8
8002dcf8:	40 88       	lddsp	r8,sp[0x20]
8002dcfa:	58 08       	cp.w	r8,0
8002dcfc:	c0 50       	breq	8002dd06 <sqrt+0x86>
8002dcfe:	e0 a0 1f 75 	rcall	80031be8 <__errno>
8002dd02:	40 88       	lddsp	r8,sp[0x20]
8002dd04:	99 08       	st.w	r12[0x0],r8
8002dd06:	fa e2 00 18 	ld.d	r2,sp[24]
8002dd0a:	04 9a       	mov	r10,r2
8002dd0c:	06 9b       	mov	r11,r3
8002dd0e:	2f 7d       	sub	sp,-36
8002dd10:	d8 32       	popm	r0-r7,pc
8002dd12:	d7 03       	nop
8002dd14:	00 00       	add	r0,r0
8002dd16:	22 28       	sub	r8,34
8002dd18:	80 03       	ld.sh	r3,r0[0x0]
8002dd1a:	23 80       	sub	r0,56

8002dd1c <acosf>:
8002dd1c:	d4 21       	pushm	r4-r7,lr
8002dd1e:	20 9d       	sub	sp,36
8002dd20:	4a 17       	lddpc	r7,8002dda4 <acosf+0x88>
8002dd22:	18 96       	mov	r6,r12
8002dd24:	e0 a0 0c 24 	rcall	8002f56c <__ieee754_acosf>
8002dd28:	6e 08       	ld.w	r8,r7[0x0]
8002dd2a:	18 95       	mov	r5,r12
8002dd2c:	5b f8       	cp.w	r8,-1
8002dd2e:	c3 70       	breq	8002dd9c <acosf+0x80>
8002dd30:	0c 9c       	mov	r12,r6
8002dd32:	e0 a0 16 d4 	rcall	80030ada <isnanf>
8002dd36:	18 94       	mov	r4,r12
8002dd38:	c3 21       	brne	8002dd9c <acosf+0x80>
8002dd3a:	0c 9c       	mov	r12,r6
8002dd3c:	e0 a0 16 cc 	rcall	80030ad4 <fabsf>
8002dd40:	18 9b       	mov	r11,r12
8002dd42:	fc 1c 3f 80 	movh	r12,0x3f80
8002dd46:	e0 a0 1a 23 	rcall	8003118c <__avr32_f32_cmp_lt>
8002dd4a:	c2 90       	breq	8002dd9c <acosf+0x80>
8002dd4c:	30 18       	mov	r8,1
8002dd4e:	50 08       	stdsp	sp[0x0],r8
8002dd50:	49 68       	lddpc	r8,8002dda8 <acosf+0x8c>
8002dd52:	0c 9c       	mov	r12,r6
8002dd54:	50 18       	stdsp	sp[0x4],r8
8002dd56:	50 84       	stdsp	sp[0x20],r4
8002dd58:	e0 a0 1d a1 	rcall	8003189a <__avr32_f32_to_f64>
8002dd5c:	49 4c       	lddpc	r12,8002ddac <acosf+0x90>
8002dd5e:	fa eb 00 08 	st.d	sp[8],r10
8002dd62:	fa eb 00 10 	st.d	sp[16],r10
8002dd66:	e0 a0 15 b8 	rcall	800308d6 <nan>
8002dd6a:	fa eb 00 18 	st.d	sp[24],r10
8002dd6e:	6e 08       	ld.w	r8,r7[0x0]
8002dd70:	58 28       	cp.w	r8,2
8002dd72:	c0 50       	breq	8002dd7c <acosf+0x60>
8002dd74:	1a 9c       	mov	r12,sp
8002dd76:	e0 a0 15 af 	rcall	800308d4 <matherr>
8002dd7a:	c0 51       	brne	8002dd84 <acosf+0x68>
8002dd7c:	e0 a0 1f 36 	rcall	80031be8 <__errno>
8002dd80:	32 18       	mov	r8,33
8002dd82:	99 08       	st.w	r12[0x0],r8
8002dd84:	40 88       	lddsp	r8,sp[0x20]
8002dd86:	58 08       	cp.w	r8,0
8002dd88:	c0 50       	breq	8002dd92 <acosf+0x76>
8002dd8a:	e0 a0 1f 2f 	rcall	80031be8 <__errno>
8002dd8e:	40 88       	lddsp	r8,sp[0x20]
8002dd90:	99 08       	st.w	r12[0x0],r8
8002dd92:	fa ea 00 18 	ld.d	r10,sp[24]
8002dd96:	e0 a0 1d b2 	rcall	800318fa <__avr32_f64_to_f32>
8002dd9a:	18 95       	mov	r5,r12
8002dd9c:	0a 9c       	mov	r12,r5
8002dd9e:	2f 7d       	sub	sp,-36
8002dda0:	d8 22       	popm	r4-r7,pc
8002dda2:	d7 03       	nop
8002dda4:	00 00       	add	r0,r0
8002dda6:	22 28       	sub	r8,34
8002dda8:	80 03       	ld.sh	r3,r0[0x0]
8002ddaa:	23 88       	sub	r8,56
8002ddac:	80 03       	ld.sh	r3,r0[0x0]
8002ddae:	23 78       	sub	r8,55

8002ddb0 <__ieee754_asin>:
8002ddb0:	d4 31       	pushm	r0-r7,lr
8002ddb2:	20 5d       	sub	sp,20
8002ddb4:	50 0b       	stdsp	sp[0x0],r11
8002ddb6:	16 96       	mov	r6,r11
8002ddb8:	14 97       	mov	r7,r10
8002ddba:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002ddbe:	e0 68 ff ff 	mov	r8,65535
8002ddc2:	ea 18 3f ef 	orh	r8,0x3fef
8002ddc6:	10 35       	cp.w	r5,r8
8002ddc8:	e0 8a 00 32 	brle	8002de2c <__ieee754_asin+0x7c>
8002ddcc:	fc 1a c0 10 	movh	r10,0xc010
8002ddd0:	14 05       	add	r5,r10
8002ddd2:	0e 45       	or	r5,r7
8002ddd4:	c1 f1       	brne	8002de12 <__ieee754_asin+0x62>
8002ddd6:	e0 68 2d 18 	mov	r8,11544
8002ddda:	ea 18 54 44 	orh	r8,0x5444
8002ddde:	e0 69 21 fb 	mov	r9,8699
8002dde2:	ea 19 3f f9 	orh	r9,0x3ff9
8002dde6:	0e 9a       	mov	r10,r7
8002dde8:	e0 a0 16 8c 	rcall	80030b00 <__avr32_f64_mul>
8002ddec:	e0 68 5c 07 	mov	r8,23559
8002ddf0:	ea 18 33 14 	orh	r8,0x3314
8002ddf4:	14 94       	mov	r4,r10
8002ddf6:	16 95       	mov	r5,r11
8002ddf8:	e0 69 a6 26 	mov	r9,42534
8002ddfc:	ea 19 3c 91 	orh	r9,0x3c91
8002de00:	0c 9b       	mov	r11,r6
8002de02:	0e 9a       	mov	r10,r7
8002de04:	e0 a0 16 7e 	rcall	80030b00 <__avr32_f64_mul>
8002de08:	14 98       	mov	r8,r10
8002de0a:	16 99       	mov	r9,r11
8002de0c:	08 9a       	mov	r10,r4
8002de0e:	0a 9b       	mov	r11,r5
8002de10:	ce 48       	rjmp	8002dfd8 <__ieee754_asin+0x228>
8002de12:	0c 99       	mov	r9,r6
8002de14:	0e 98       	mov	r8,r7
8002de16:	0e 9a       	mov	r10,r7
8002de18:	e0 a0 17 60 	rcall	80030cd8 <__avr32_f64_sub>
8002de1c:	14 98       	mov	r8,r10
8002de1e:	16 99       	mov	r9,r11
8002de20:	e0 a0 19 d0 	rcall	800311c0 <__avr32_f64_div>
8002de24:	16 96       	mov	r6,r11
8002de26:	14 97       	mov	r7,r10
8002de28:	e0 8f 02 37 	bral	8002e296 <__ieee754_asin+0x4e6>
8002de2c:	e0 68 ff ff 	mov	r8,65535
8002de30:	ea 18 3f df 	orh	r8,0x3fdf
8002de34:	10 35       	cp.w	r5,r8
8002de36:	e0 89 00 d4 	brgt	8002dfde <__ieee754_asin+0x22e>
8002de3a:	e0 68 ff ff 	mov	r8,65535
8002de3e:	ea 18 3e 3f 	orh	r8,0x3e3f
8002de42:	10 35       	cp.w	r5,r8
8002de44:	e0 89 00 17 	brgt	8002de72 <__ieee754_asin+0xc2>
8002de48:	e0 68 75 9c 	mov	r8,30108
8002de4c:	ea 18 88 00 	orh	r8,0x8800
8002de50:	e0 69 e4 3c 	mov	r9,58428
8002de54:	ea 19 7e 37 	orh	r9,0x7e37
8002de58:	e0 a0 18 0e 	rcall	80030e74 <__avr32_f64_add>
8002de5c:	14 98       	mov	r8,r10
8002de5e:	16 99       	mov	r9,r11
8002de60:	30 0a       	mov	r10,0
8002de62:	fc 1b 3f f0 	movh	r11,0x3ff0
8002de66:	e0 a0 19 5f 	rcall	80031124 <__avr32_f64_cmp_lt>
8002de6a:	e0 80 00 ba 	breq	8002dfde <__ieee754_asin+0x22e>
8002de6e:	e0 8f 02 14 	bral	8002e296 <__ieee754_asin+0x4e6>
8002de72:	16 99       	mov	r9,r11
8002de74:	14 98       	mov	r8,r10
8002de76:	e0 a0 16 45 	rcall	80030b00 <__avr32_f64_mul>
8002de7a:	e0 68 f7 09 	mov	r8,63241
8002de7e:	ea 18 0d fd 	orh	r8,0xdfd
8002de82:	14 94       	mov	r4,r10
8002de84:	16 95       	mov	r5,r11
8002de86:	e0 69 3d e1 	mov	r9,15841
8002de8a:	ea 19 3f 02 	orh	r9,0x3f02
8002de8e:	e0 a0 16 39 	rcall	80030b00 <__avr32_f64_mul>
8002de92:	e0 68 b2 88 	mov	r8,45704
8002de96:	ea 18 75 01 	orh	r8,0x7501
8002de9a:	e0 69 ef e0 	mov	r9,61408
8002de9e:	ea 19 3f 49 	orh	r9,0x3f49
8002dea2:	e0 a0 17 e9 	rcall	80030e74 <__avr32_f64_add>
8002dea6:	14 98       	mov	r8,r10
8002dea8:	16 99       	mov	r9,r11
8002deaa:	08 9a       	mov	r10,r4
8002deac:	0a 9b       	mov	r11,r5
8002deae:	e0 a0 16 29 	rcall	80030b00 <__avr32_f64_mul>
8002deb2:	e0 68 8f 3b 	mov	r8,36667
8002deb6:	ea 18 b5 68 	orh	r8,0xb568
8002deba:	e0 69 82 28 	mov	r9,33320
8002debe:	ea 19 3f a4 	orh	r9,0x3fa4
8002dec2:	e0 a0 17 0b 	rcall	80030cd8 <__avr32_f64_sub>
8002dec6:	14 98       	mov	r8,r10
8002dec8:	16 99       	mov	r9,r11
8002deca:	08 9a       	mov	r10,r4
8002decc:	0a 9b       	mov	r11,r5
8002dece:	e0 a0 16 19 	rcall	80030b00 <__avr32_f64_mul>
8002ded2:	e0 68 44 55 	mov	r8,17493
8002ded6:	ea 18 0e 88 	orh	r8,0xe88
8002deda:	e0 69 c1 55 	mov	r9,49493
8002dede:	ea 19 3f c9 	orh	r9,0x3fc9
8002dee2:	e0 a0 17 c9 	rcall	80030e74 <__avr32_f64_add>
8002dee6:	14 98       	mov	r8,r10
8002dee8:	16 99       	mov	r9,r11
8002deea:	08 9a       	mov	r10,r4
8002deec:	0a 9b       	mov	r11,r5
8002deee:	e0 a0 16 09 	rcall	80030b00 <__avr32_f64_mul>
8002def2:	e0 68 6f 7d 	mov	r8,28541
8002def6:	ea 18 03 eb 	orh	r8,0x3eb
8002defa:	e0 69 d6 12 	mov	r9,54802
8002defe:	ea 19 3f d4 	orh	r9,0x3fd4
8002df02:	e0 a0 16 eb 	rcall	80030cd8 <__avr32_f64_sub>
8002df06:	14 98       	mov	r8,r10
8002df08:	16 99       	mov	r9,r11
8002df0a:	08 9a       	mov	r10,r4
8002df0c:	0a 9b       	mov	r11,r5
8002df0e:	e0 a0 15 f9 	rcall	80030b00 <__avr32_f64_mul>
8002df12:	e0 68 55 55 	mov	r8,21845
8002df16:	ea 18 55 55 	orh	r8,0x5555
8002df1a:	e0 69 55 55 	mov	r9,21845
8002df1e:	ea 19 3f c5 	orh	r9,0x3fc5
8002df22:	e0 a0 17 a9 	rcall	80030e74 <__avr32_f64_add>
8002df26:	14 98       	mov	r8,r10
8002df28:	16 99       	mov	r9,r11
8002df2a:	08 9a       	mov	r10,r4
8002df2c:	0a 9b       	mov	r11,r5
8002df2e:	e0 a0 15 e9 	rcall	80030b00 <__avr32_f64_mul>
8002df32:	e0 68 92 82 	mov	r8,37506
8002df36:	ea 18 b1 2e 	orh	r8,0xb12e
8002df3a:	14 92       	mov	r2,r10
8002df3c:	16 93       	mov	r3,r11
8002df3e:	e0 69 b8 c5 	mov	r9,47301
8002df42:	ea 19 3f b3 	orh	r9,0x3fb3
8002df46:	08 9a       	mov	r10,r4
8002df48:	0a 9b       	mov	r11,r5
8002df4a:	e0 a0 15 db 	rcall	80030b00 <__avr32_f64_mul>
8002df4e:	e0 68 01 59 	mov	r8,345
8002df52:	ea 18 1b 8d 	orh	r8,0x1b8d
8002df56:	e0 69 06 6c 	mov	r9,1644
8002df5a:	ea 19 3f e6 	orh	r9,0x3fe6
8002df5e:	e0 a0 16 bd 	rcall	80030cd8 <__avr32_f64_sub>
8002df62:	14 98       	mov	r8,r10
8002df64:	16 99       	mov	r9,r11
8002df66:	08 9a       	mov	r10,r4
8002df68:	0a 9b       	mov	r11,r5
8002df6a:	e0 a0 15 cb 	rcall	80030b00 <__avr32_f64_mul>
8002df6e:	e0 68 8a c8 	mov	r8,35528
8002df72:	ea 18 9c 59 	orh	r8,0x9c59
8002df76:	e0 69 2a e5 	mov	r9,10981
8002df7a:	ea 19 40 00 	orh	r9,0x4000
8002df7e:	e0 a0 17 7b 	rcall	80030e74 <__avr32_f64_add>
8002df82:	14 98       	mov	r8,r10
8002df84:	16 99       	mov	r9,r11
8002df86:	08 9a       	mov	r10,r4
8002df88:	0a 9b       	mov	r11,r5
8002df8a:	e0 a0 15 bb 	rcall	80030b00 <__avr32_f64_mul>
8002df8e:	e0 68 2d 4b 	mov	r8,11595
8002df92:	ea 18 1c 8a 	orh	r8,0x1c8a
8002df96:	e0 69 3a 27 	mov	r9,14887
8002df9a:	ea 19 40 03 	orh	r9,0x4003
8002df9e:	e0 a0 16 9d 	rcall	80030cd8 <__avr32_f64_sub>
8002dfa2:	14 98       	mov	r8,r10
8002dfa4:	16 99       	mov	r9,r11
8002dfa6:	08 9a       	mov	r10,r4
8002dfa8:	0a 9b       	mov	r11,r5
8002dfaa:	e0 a0 15 ab 	rcall	80030b00 <__avr32_f64_mul>
8002dfae:	30 08       	mov	r8,0
8002dfb0:	fc 19 3f f0 	movh	r9,0x3ff0
8002dfb4:	e0 a0 17 60 	rcall	80030e74 <__avr32_f64_add>
8002dfb8:	14 98       	mov	r8,r10
8002dfba:	16 99       	mov	r9,r11
8002dfbc:	04 9a       	mov	r10,r2
8002dfbe:	06 9b       	mov	r11,r3
8002dfc0:	e0 a0 19 00 	rcall	800311c0 <__avr32_f64_div>
8002dfc4:	14 98       	mov	r8,r10
8002dfc6:	16 99       	mov	r9,r11
8002dfc8:	0e 9a       	mov	r10,r7
8002dfca:	0c 9b       	mov	r11,r6
8002dfcc:	e0 a0 15 9a 	rcall	80030b00 <__avr32_f64_mul>
8002dfd0:	14 98       	mov	r8,r10
8002dfd2:	16 99       	mov	r9,r11
8002dfd4:	0e 9a       	mov	r10,r7
8002dfd6:	0c 9b       	mov	r11,r6
8002dfd8:	e0 a0 17 4e 	rcall	80030e74 <__avr32_f64_add>
8002dfdc:	c2 4b       	rjmp	8002de24 <__ieee754_asin+0x74>
8002dfde:	0c 9b       	mov	r11,r6
8002dfe0:	0e 9a       	mov	r10,r7
8002dfe2:	e0 a0 13 cf 	rcall	80030780 <fabs>
8002dfe6:	14 98       	mov	r8,r10
8002dfe8:	16 99       	mov	r9,r11
8002dfea:	30 0a       	mov	r10,0
8002dfec:	fc 1b 3f f0 	movh	r11,0x3ff0
8002dff0:	e0 a0 16 74 	rcall	80030cd8 <__avr32_f64_sub>
8002dff4:	30 08       	mov	r8,0
8002dff6:	fc 19 3f e0 	movh	r9,0x3fe0
8002dffa:	e0 a0 15 83 	rcall	80030b00 <__avr32_f64_mul>
8002dffe:	e0 68 f7 09 	mov	r8,63241
8002e002:	ea 18 0d fd 	orh	r8,0xdfd
8002e006:	16 97       	mov	r7,r11
8002e008:	14 96       	mov	r6,r10
8002e00a:	e0 69 3d e1 	mov	r9,15841
8002e00e:	ea 19 3f 02 	orh	r9,0x3f02
8002e012:	e0 a0 15 77 	rcall	80030b00 <__avr32_f64_mul>
8002e016:	e0 68 b2 88 	mov	r8,45704
8002e01a:	ea 18 75 01 	orh	r8,0x7501
8002e01e:	e0 69 ef e0 	mov	r9,61408
8002e022:	ea 19 3f 49 	orh	r9,0x3f49
8002e026:	e0 a0 17 27 	rcall	80030e74 <__avr32_f64_add>
8002e02a:	14 98       	mov	r8,r10
8002e02c:	16 99       	mov	r9,r11
8002e02e:	0c 9a       	mov	r10,r6
8002e030:	0e 9b       	mov	r11,r7
8002e032:	e0 a0 15 67 	rcall	80030b00 <__avr32_f64_mul>
8002e036:	e0 68 8f 3b 	mov	r8,36667
8002e03a:	ea 18 b5 68 	orh	r8,0xb568
8002e03e:	e0 69 82 28 	mov	r9,33320
8002e042:	ea 19 3f a4 	orh	r9,0x3fa4
8002e046:	e0 a0 16 49 	rcall	80030cd8 <__avr32_f64_sub>
8002e04a:	14 98       	mov	r8,r10
8002e04c:	16 99       	mov	r9,r11
8002e04e:	0c 9a       	mov	r10,r6
8002e050:	0e 9b       	mov	r11,r7
8002e052:	e0 a0 15 57 	rcall	80030b00 <__avr32_f64_mul>
8002e056:	e0 68 44 55 	mov	r8,17493
8002e05a:	ea 18 0e 88 	orh	r8,0xe88
8002e05e:	e0 69 c1 55 	mov	r9,49493
8002e062:	ea 19 3f c9 	orh	r9,0x3fc9
8002e066:	e0 a0 17 07 	rcall	80030e74 <__avr32_f64_add>
8002e06a:	14 98       	mov	r8,r10
8002e06c:	16 99       	mov	r9,r11
8002e06e:	0c 9a       	mov	r10,r6
8002e070:	0e 9b       	mov	r11,r7
8002e072:	e0 a0 15 47 	rcall	80030b00 <__avr32_f64_mul>
8002e076:	e0 68 6f 7d 	mov	r8,28541
8002e07a:	ea 18 03 eb 	orh	r8,0x3eb
8002e07e:	e0 69 d6 12 	mov	r9,54802
8002e082:	ea 19 3f d4 	orh	r9,0x3fd4
8002e086:	e0 a0 16 29 	rcall	80030cd8 <__avr32_f64_sub>
8002e08a:	14 98       	mov	r8,r10
8002e08c:	16 99       	mov	r9,r11
8002e08e:	0c 9a       	mov	r10,r6
8002e090:	0e 9b       	mov	r11,r7
8002e092:	e0 a0 15 37 	rcall	80030b00 <__avr32_f64_mul>
8002e096:	e0 68 55 55 	mov	r8,21845
8002e09a:	ea 18 55 55 	orh	r8,0x5555
8002e09e:	e0 69 55 55 	mov	r9,21845
8002e0a2:	ea 19 3f c5 	orh	r9,0x3fc5
8002e0a6:	e0 a0 16 e7 	rcall	80030e74 <__avr32_f64_add>
8002e0aa:	14 98       	mov	r8,r10
8002e0ac:	16 99       	mov	r9,r11
8002e0ae:	0c 9a       	mov	r10,r6
8002e0b0:	0e 9b       	mov	r11,r7
8002e0b2:	e0 a0 15 27 	rcall	80030b00 <__avr32_f64_mul>
8002e0b6:	e0 68 92 82 	mov	r8,37506
8002e0ba:	ea 18 b1 2e 	orh	r8,0xb12e
8002e0be:	e0 69 b8 c5 	mov	r9,47301
8002e0c2:	ea 19 3f b3 	orh	r9,0x3fb3
8002e0c6:	14 90       	mov	r0,r10
8002e0c8:	16 91       	mov	r1,r11
8002e0ca:	0c 9a       	mov	r10,r6
8002e0cc:	0e 9b       	mov	r11,r7
8002e0ce:	e0 a0 15 19 	rcall	80030b00 <__avr32_f64_mul>
8002e0d2:	e0 68 01 59 	mov	r8,345
8002e0d6:	ea 18 1b 8d 	orh	r8,0x1b8d
8002e0da:	e0 69 06 6c 	mov	r9,1644
8002e0de:	ea 19 3f e6 	orh	r9,0x3fe6
8002e0e2:	e0 a0 15 fb 	rcall	80030cd8 <__avr32_f64_sub>
8002e0e6:	14 98       	mov	r8,r10
8002e0e8:	16 99       	mov	r9,r11
8002e0ea:	0c 9a       	mov	r10,r6
8002e0ec:	0e 9b       	mov	r11,r7
8002e0ee:	e0 a0 15 09 	rcall	80030b00 <__avr32_f64_mul>
8002e0f2:	e0 68 8a c8 	mov	r8,35528
8002e0f6:	ea 18 9c 59 	orh	r8,0x9c59
8002e0fa:	e0 69 2a e5 	mov	r9,10981
8002e0fe:	ea 19 40 00 	orh	r9,0x4000
8002e102:	e0 a0 16 b9 	rcall	80030e74 <__avr32_f64_add>
8002e106:	14 98       	mov	r8,r10
8002e108:	16 99       	mov	r9,r11
8002e10a:	0c 9a       	mov	r10,r6
8002e10c:	0e 9b       	mov	r11,r7
8002e10e:	e0 a0 14 f9 	rcall	80030b00 <__avr32_f64_mul>
8002e112:	e0 68 2d 4b 	mov	r8,11595
8002e116:	ea 18 1c 8a 	orh	r8,0x1c8a
8002e11a:	e0 69 3a 27 	mov	r9,14887
8002e11e:	ea 19 40 03 	orh	r9,0x4003
8002e122:	e0 a0 15 db 	rcall	80030cd8 <__avr32_f64_sub>
8002e126:	14 98       	mov	r8,r10
8002e128:	16 99       	mov	r9,r11
8002e12a:	0c 9a       	mov	r10,r6
8002e12c:	0e 9b       	mov	r11,r7
8002e12e:	e0 a0 14 e9 	rcall	80030b00 <__avr32_f64_mul>
8002e132:	30 08       	mov	r8,0
8002e134:	fc 19 3f f0 	movh	r9,0x3ff0
8002e138:	e0 a0 16 9e 	rcall	80030e74 <__avr32_f64_add>
8002e13c:	fa eb 00 04 	st.d	sp[4],r10
8002e140:	0c 9a       	mov	r10,r6
8002e142:	0e 9b       	mov	r11,r7
8002e144:	e0 a0 09 4e 	rcall	8002f3e0 <__ieee754_sqrt>
8002e148:	e0 68 33 32 	mov	r8,13106
8002e14c:	ea 18 3f ef 	orh	r8,0x3fef
8002e150:	14 92       	mov	r2,r10
8002e152:	16 93       	mov	r3,r11
8002e154:	10 35       	cp.w	r5,r8
8002e156:	e0 8a 00 2d 	brle	8002e1b0 <__ieee754_asin+0x400>
8002e15a:	fa e8 00 04 	ld.d	r8,sp[4]
8002e15e:	00 9a       	mov	r10,r0
8002e160:	02 9b       	mov	r11,r1
8002e162:	e0 a0 18 2f 	rcall	800311c0 <__avr32_f64_div>
8002e166:	14 98       	mov	r8,r10
8002e168:	16 99       	mov	r9,r11
8002e16a:	04 9a       	mov	r10,r2
8002e16c:	06 9b       	mov	r11,r3
8002e16e:	e0 a0 14 c9 	rcall	80030b00 <__avr32_f64_mul>
8002e172:	14 98       	mov	r8,r10
8002e174:	16 99       	mov	r9,r11
8002e176:	04 9a       	mov	r10,r2
8002e178:	06 9b       	mov	r11,r3
8002e17a:	e0 a0 16 7d 	rcall	80030e74 <__avr32_f64_add>
8002e17e:	14 98       	mov	r8,r10
8002e180:	16 99       	mov	r9,r11
8002e182:	e0 a0 16 79 	rcall	80030e74 <__avr32_f64_add>
8002e186:	e0 68 5c 07 	mov	r8,23559
8002e18a:	ea 18 33 14 	orh	r8,0x3314
8002e18e:	e0 69 a6 26 	mov	r9,42534
8002e192:	ea 19 3c 91 	orh	r9,0x3c91
8002e196:	e0 a0 15 a1 	rcall	80030cd8 <__avr32_f64_sub>
8002e19a:	14 98       	mov	r8,r10
8002e19c:	16 99       	mov	r9,r11
8002e19e:	e0 6a 2d 18 	mov	r10,11544
8002e1a2:	ea 1a 54 44 	orh	r10,0x5444
8002e1a6:	e0 6b 21 fb 	mov	r11,8699
8002e1aa:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e1ae:	c6 98       	rjmp	8002e280 <__ieee754_asin+0x4d0>
8002e1b0:	14 98       	mov	r8,r10
8002e1b2:	06 99       	mov	r9,r3
8002e1b4:	e0 a0 16 60 	rcall	80030e74 <__avr32_f64_add>
8002e1b8:	fa e8 00 04 	ld.d	r8,sp[4]
8002e1bc:	fa eb 00 0c 	st.d	sp[12],r10
8002e1c0:	00 9a       	mov	r10,r0
8002e1c2:	02 9b       	mov	r11,r1
8002e1c4:	e0 a0 17 fe 	rcall	800311c0 <__avr32_f64_div>
8002e1c8:	14 98       	mov	r8,r10
8002e1ca:	16 99       	mov	r9,r11
8002e1cc:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e1d0:	e0 a0 14 98 	rcall	80030b00 <__avr32_f64_mul>
8002e1d4:	30 04       	mov	r4,0
8002e1d6:	14 90       	mov	r0,r10
8002e1d8:	16 91       	mov	r1,r11
8002e1da:	08 98       	mov	r8,r4
8002e1dc:	06 99       	mov	r9,r3
8002e1de:	08 9a       	mov	r10,r4
8002e1e0:	06 9b       	mov	r11,r3
8002e1e2:	e0 a0 14 8f 	rcall	80030b00 <__avr32_f64_mul>
8002e1e6:	14 98       	mov	r8,r10
8002e1e8:	16 99       	mov	r9,r11
8002e1ea:	0c 9a       	mov	r10,r6
8002e1ec:	0e 9b       	mov	r11,r7
8002e1ee:	e0 a0 15 75 	rcall	80030cd8 <__avr32_f64_sub>
8002e1f2:	08 98       	mov	r8,r4
8002e1f4:	16 97       	mov	r7,r11
8002e1f6:	14 96       	mov	r6,r10
8002e1f8:	06 99       	mov	r9,r3
8002e1fa:	04 9a       	mov	r10,r2
8002e1fc:	06 9b       	mov	r11,r3
8002e1fe:	e0 a0 16 3b 	rcall	80030e74 <__avr32_f64_add>
8002e202:	14 98       	mov	r8,r10
8002e204:	16 99       	mov	r9,r11
8002e206:	0c 9a       	mov	r10,r6
8002e208:	0e 9b       	mov	r11,r7
8002e20a:	e0 a0 17 db 	rcall	800311c0 <__avr32_f64_div>
8002e20e:	30 08       	mov	r8,0
8002e210:	fc 19 c0 00 	movh	r9,0xc000
8002e214:	e0 a0 14 76 	rcall	80030b00 <__avr32_f64_mul>
8002e218:	e0 68 5c 07 	mov	r8,23559
8002e21c:	ea 18 33 14 	orh	r8,0x3314
8002e220:	e0 69 a6 26 	mov	r9,42534
8002e224:	ea 19 3c 91 	orh	r9,0x3c91
8002e228:	e0 a0 16 26 	rcall	80030e74 <__avr32_f64_add>
8002e22c:	14 98       	mov	r8,r10
8002e22e:	16 99       	mov	r9,r11
8002e230:	00 9a       	mov	r10,r0
8002e232:	02 9b       	mov	r11,r1
8002e234:	e0 a0 15 52 	rcall	80030cd8 <__avr32_f64_sub>
8002e238:	30 08       	mov	r8,0
8002e23a:	16 97       	mov	r7,r11
8002e23c:	14 96       	mov	r6,r10
8002e23e:	fc 19 c0 00 	movh	r9,0xc000
8002e242:	08 9a       	mov	r10,r4
8002e244:	06 9b       	mov	r11,r3
8002e246:	e0 a0 14 5d 	rcall	80030b00 <__avr32_f64_mul>
8002e24a:	e0 68 2d 18 	mov	r8,11544
8002e24e:	ea 18 54 44 	orh	r8,0x5444
8002e252:	e0 69 21 fb 	mov	r9,8699
8002e256:	ea 19 3f e9 	orh	r9,0x3fe9
8002e25a:	e0 a0 16 0d 	rcall	80030e74 <__avr32_f64_add>
8002e25e:	14 98       	mov	r8,r10
8002e260:	16 99       	mov	r9,r11
8002e262:	0c 9a       	mov	r10,r6
8002e264:	0e 9b       	mov	r11,r7
8002e266:	e0 a0 15 39 	rcall	80030cd8 <__avr32_f64_sub>
8002e26a:	06 95       	mov	r5,r3
8002e26c:	14 98       	mov	r8,r10
8002e26e:	16 99       	mov	r9,r11
8002e270:	e0 6a 2d 18 	mov	r10,11544
8002e274:	ea 1a 54 44 	orh	r10,0x5444
8002e278:	e0 6b 21 fb 	mov	r11,8699
8002e27c:	ea 1b 3f e9 	orh	r11,0x3fe9
8002e280:	e0 a0 15 2c 	rcall	80030cd8 <__avr32_f64_sub>
8002e284:	40 08       	lddsp	r8,sp[0x0]
8002e286:	16 96       	mov	r6,r11
8002e288:	14 97       	mov	r7,r10
8002e28a:	ee 16 80 00 	eorh	r6,0x8000
8002e28e:	58 08       	cp.w	r8,0
8002e290:	e0 8a 00 03 	brle	8002e296 <__ieee754_asin+0x4e6>
8002e294:	16 96       	mov	r6,r11
8002e296:	0c 9b       	mov	r11,r6
8002e298:	0e 9a       	mov	r10,r7
8002e29a:	2f bd       	sub	sp,-20
8002e29c:	d8 32       	popm	r0-r7,pc
8002e29e:	d7 03       	nop

8002e2a0 <__ieee754_atan2>:
8002e2a0:	d4 31       	pushm	r0-r7,lr
8002e2a2:	20 2d       	sub	sp,8
8002e2a4:	50 0b       	stdsp	sp[0x0],r11
8002e2a6:	10 96       	mov	r6,r8
8002e2a8:	10 92       	mov	r2,r8
8002e2aa:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002e2ae:	5c 38       	neg	r8
8002e2b0:	14 94       	mov	r4,r10
8002e2b2:	0c 48       	or	r8,r6
8002e2b4:	16 95       	mov	r5,r11
8002e2b6:	12 93       	mov	r3,r9
8002e2b8:	14 90       	mov	r0,r10
8002e2ba:	16 91       	mov	r1,r11
8002e2bc:	12 9c       	mov	r12,r9
8002e2be:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002e2c2:	fc 17 7f f0 	movh	r7,0x7ff0
8002e2c6:	0e 38       	cp.w	r8,r7
8002e2c8:	e0 8b 00 0e 	brhi	8002e2e4 <__ieee754_atan2+0x44>
8002e2cc:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002e2d0:	f4 07 11 00 	rsub	r7,r10,0
8002e2d4:	fc 10 7f f0 	movh	r0,0x7ff0
8002e2d8:	14 47       	or	r7,r10
8002e2da:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002e2de:	00 37       	cp.w	r7,r0
8002e2e0:	e0 88 00 09 	brls	8002e2f2 <__ieee754_atan2+0x52>
8002e2e4:	04 98       	mov	r8,r2
8002e2e6:	06 99       	mov	r9,r3
8002e2e8:	08 9a       	mov	r10,r4
8002e2ea:	0a 9b       	mov	r11,r5
8002e2ec:	e0 a0 15 c4 	rcall	80030e74 <__avr32_f64_add>
8002e2f0:	ce 88       	rjmp	8002e4c0 <__ieee754_atan2+0x220>
8002e2f2:	fc 17 c0 10 	movh	r7,0xc010
8002e2f6:	f8 07 00 07 	add	r7,r12,r7
8002e2fa:	0c 47       	or	r7,r6
8002e2fc:	c0 41       	brne	8002e304 <__ieee754_atan2+0x64>
8002e2fe:	e0 a0 10 9b 	rcall	80030434 <atan>
8002e302:	cd f8       	rjmp	8002e4c0 <__ieee754_atan2+0x220>
8002e304:	f8 07 14 1e 	asr	r7,r12,0x1e
8002e308:	f1 ea 10 09 	or	r9,r8,r10
8002e30c:	e2 17 00 02 	andl	r7,0x2,COH
8002e310:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002e314:	58 09       	cp.w	r9,0
8002e316:	c0 71       	brne	8002e324 <__ieee754_atan2+0x84>
8002e318:	58 27       	cp.w	r7,2
8002e31a:	c5 10       	breq	8002e3bc <__ieee754_atan2+0x11c>
8002e31c:	e0 8a 00 d4 	brle	8002e4c4 <__ieee754_atan2+0x224>
8002e320:	58 37       	cp.w	r7,3
8002e322:	c5 60       	breq	8002e3ce <__ieee754_atan2+0x12e>
8002e324:	fd e6 10 06 	or	r6,lr,r6
8002e328:	c6 00       	breq	8002e3e8 <__ieee754_atan2+0x148>
8002e32a:	fc 19 7f f0 	movh	r9,0x7ff0
8002e32e:	12 3e       	cp.w	lr,r9
8002e330:	c5 81       	brne	8002e3e0 <__ieee754_atan2+0x140>
8002e332:	12 38       	cp.w	r8,r9
8002e334:	c3 11       	brne	8002e396 <__ieee754_atan2+0xf6>
8002e336:	58 17       	cp.w	r7,1
8002e338:	c0 b0       	breq	8002e34e <__ieee754_atan2+0xae>
8002e33a:	e0 89 00 05 	brgt	8002e344 <__ieee754_atan2+0xa4>
8002e33e:	58 07       	cp.w	r7,0
8002e340:	c1 00       	breq	8002e360 <__ieee754_atan2+0xc0>
8002e342:	c5 38       	rjmp	8002e3e8 <__ieee754_atan2+0x148>
8002e344:	58 27       	cp.w	r7,2
8002e346:	c1 60       	breq	8002e372 <__ieee754_atan2+0xd2>
8002e348:	58 37       	cp.w	r7,3
8002e34a:	c4 f1       	brne	8002e3e8 <__ieee754_atan2+0x148>
8002e34c:	c1 c8       	rjmp	8002e384 <__ieee754_atan2+0xe4>
8002e34e:	e0 64 2d 18 	mov	r4,11544
8002e352:	ea 14 54 44 	orh	r4,0x5444
8002e356:	e0 65 21 fb 	mov	r5,8699
8002e35a:	ea 15 bf e9 	orh	r5,0xbfe9
8002e35e:	cb 38       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e360:	e0 64 2d 18 	mov	r4,11544
8002e364:	ea 14 54 44 	orh	r4,0x5444
8002e368:	e0 65 21 fb 	mov	r5,8699
8002e36c:	ea 15 3f e9 	orh	r5,0x3fe9
8002e370:	ca a8       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e372:	e0 64 21 d2 	mov	r4,8658
8002e376:	ea 14 7f 33 	orh	r4,0x7f33
8002e37a:	e0 65 d9 7c 	mov	r5,55676
8002e37e:	ea 15 40 02 	orh	r5,0x4002
8002e382:	ca 18       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e384:	e0 64 21 d2 	mov	r4,8658
8002e388:	ea 14 7f 33 	orh	r4,0x7f33
8002e38c:	e0 65 d9 7c 	mov	r5,55676
8002e390:	ea 15 c0 02 	orh	r5,0xc002
8002e394:	c9 88       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e396:	58 17       	cp.w	r7,1
8002e398:	c0 b0       	breq	8002e3ae <__ieee754_atan2+0x10e>
8002e39a:	e0 89 00 05 	brgt	8002e3a4 <__ieee754_atan2+0x104>
8002e39e:	58 07       	cp.w	r7,0
8002e3a0:	c0 b0       	breq	8002e3b6 <__ieee754_atan2+0x116>
8002e3a2:	c1 f8       	rjmp	8002e3e0 <__ieee754_atan2+0x140>
8002e3a4:	58 27       	cp.w	r7,2
8002e3a6:	c0 b0       	breq	8002e3bc <__ieee754_atan2+0x11c>
8002e3a8:	58 37       	cp.w	r7,3
8002e3aa:	c1 b1       	brne	8002e3e0 <__ieee754_atan2+0x140>
8002e3ac:	c1 18       	rjmp	8002e3ce <__ieee754_atan2+0x12e>
8002e3ae:	30 04       	mov	r4,0
8002e3b0:	fc 15 80 00 	movh	r5,0x8000
8002e3b4:	c8 88       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e3b6:	30 04       	mov	r4,0
8002e3b8:	30 05       	mov	r5,0
8002e3ba:	c8 58       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e3bc:	e0 64 2d 18 	mov	r4,11544
8002e3c0:	ea 14 54 44 	orh	r4,0x5444
8002e3c4:	e0 65 21 fb 	mov	r5,8699
8002e3c8:	ea 15 40 09 	orh	r5,0x4009
8002e3cc:	c7 c8       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e3ce:	e0 64 2d 18 	mov	r4,11544
8002e3d2:	ea 14 54 44 	orh	r4,0x5444
8002e3d6:	e0 65 21 fb 	mov	r5,8699
8002e3da:	ea 15 c0 09 	orh	r5,0xc009
8002e3de:	c7 38       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e3e0:	fc 10 7f f0 	movh	r0,0x7ff0
8002e3e4:	00 38       	cp.w	r8,r0
8002e3e6:	c1 51       	brne	8002e410 <__ieee754_atan2+0x170>
8002e3e8:	58 01       	cp.w	r1,0
8002e3ea:	c0 a5       	brlt	8002e3fe <__ieee754_atan2+0x15e>
8002e3ec:	e0 64 2d 18 	mov	r4,11544
8002e3f0:	ea 14 54 44 	orh	r4,0x5444
8002e3f4:	e0 65 21 fb 	mov	r5,8699
8002e3f8:	ea 15 3f f9 	orh	r5,0x3ff9
8002e3fc:	c6 48       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e3fe:	e0 64 2d 18 	mov	r4,11544
8002e402:	ea 14 54 44 	orh	r4,0x5444
8002e406:	e0 65 21 fb 	mov	r5,8699
8002e40a:	ea 15 bf f9 	orh	r5,0xbff9
8002e40e:	c5 b8       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e410:	1c 18       	sub	r8,lr
8002e412:	b5 48       	asr	r8,0x14
8002e414:	e0 48 00 3c 	cp.w	r8,60
8002e418:	e0 8a 00 0b 	brle	8002e42e <__ieee754_atan2+0x18e>
8002e41c:	e0 6a 2d 18 	mov	r10,11544
8002e420:	ea 1a 54 44 	orh	r10,0x5444
8002e424:	e0 6b 21 fb 	mov	r11,8699
8002e428:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e42c:	c1 48       	rjmp	8002e454 <__ieee754_atan2+0x1b4>
8002e42e:	fe 58 ff c4 	cp.w	r8,-60
8002e432:	5f 58       	srlt	r8
8002e434:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002e438:	c0 40       	breq	8002e440 <__ieee754_atan2+0x1a0>
8002e43a:	30 0a       	mov	r10,0
8002e43c:	30 0b       	mov	r11,0
8002e43e:	c0 b8       	rjmp	8002e454 <__ieee754_atan2+0x1b4>
8002e440:	04 98       	mov	r8,r2
8002e442:	06 99       	mov	r9,r3
8002e444:	08 9a       	mov	r10,r4
8002e446:	0a 9b       	mov	r11,r5
8002e448:	e0 a0 16 bc 	rcall	800311c0 <__avr32_f64_div>
8002e44c:	e0 a0 11 9a 	rcall	80030780 <fabs>
8002e450:	e0 a0 0f f2 	rcall	80030434 <atan>
8002e454:	58 17       	cp.w	r7,1
8002e456:	c0 60       	breq	8002e462 <__ieee754_atan2+0x1c2>
8002e458:	58 27       	cp.w	r7,2
8002e45a:	c0 a0       	breq	8002e46e <__ieee754_atan2+0x1ce>
8002e45c:	58 07       	cp.w	r7,0
8002e45e:	c1 d1       	brne	8002e498 <__ieee754_atan2+0x1f8>
8002e460:	c3 08       	rjmp	8002e4c0 <__ieee754_atan2+0x220>
8002e462:	fc 18 80 00 	movh	r8,0x8000
8002e466:	14 94       	mov	r4,r10
8002e468:	f6 08 00 05 	add	r5,r11,r8
8002e46c:	c2 c8       	rjmp	8002e4c4 <__ieee754_atan2+0x224>
8002e46e:	e0 68 5c 07 	mov	r8,23559
8002e472:	ea 18 33 14 	orh	r8,0x3314
8002e476:	e0 69 a6 26 	mov	r9,42534
8002e47a:	ea 19 3c a1 	orh	r9,0x3ca1
8002e47e:	e0 a0 14 2d 	rcall	80030cd8 <__avr32_f64_sub>
8002e482:	14 98       	mov	r8,r10
8002e484:	16 99       	mov	r9,r11
8002e486:	e0 6a 2d 18 	mov	r10,11544
8002e48a:	ea 1a 54 44 	orh	r10,0x5444
8002e48e:	e0 6b 21 fb 	mov	r11,8699
8002e492:	ea 1b 40 09 	orh	r11,0x4009
8002e496:	c1 38       	rjmp	8002e4bc <__ieee754_atan2+0x21c>
8002e498:	e0 68 5c 07 	mov	r8,23559
8002e49c:	ea 18 33 14 	orh	r8,0x3314
8002e4a0:	e0 69 a6 26 	mov	r9,42534
8002e4a4:	ea 19 3c a1 	orh	r9,0x3ca1
8002e4a8:	e0 a0 14 18 	rcall	80030cd8 <__avr32_f64_sub>
8002e4ac:	e0 68 2d 18 	mov	r8,11544
8002e4b0:	ea 18 54 44 	orh	r8,0x5444
8002e4b4:	e0 69 21 fb 	mov	r9,8699
8002e4b8:	ea 19 40 09 	orh	r9,0x4009
8002e4bc:	e0 a0 14 0e 	rcall	80030cd8 <__avr32_f64_sub>
8002e4c0:	14 94       	mov	r4,r10
8002e4c2:	16 95       	mov	r5,r11
8002e4c4:	08 9a       	mov	r10,r4
8002e4c6:	0a 9b       	mov	r11,r5
8002e4c8:	2f ed       	sub	sp,-8
8002e4ca:	d8 32       	popm	r0-r7,pc

8002e4cc <__ieee754_pow>:
8002e4cc:	d4 31       	pushm	r0-r7,lr
8002e4ce:	20 ed       	sub	sp,56
8002e4d0:	10 94       	mov	r4,r8
8002e4d2:	12 95       	mov	r5,r9
8002e4d4:	50 7b       	stdsp	sp[0x1c],r11
8002e4d6:	fa e5 00 0c 	st.d	sp[12],r4
8002e4da:	12 97       	mov	r7,r9
8002e4dc:	10 96       	mov	r6,r8
8002e4de:	40 31       	lddsp	r1,sp[0xc]
8002e4e0:	40 49       	lddsp	r9,sp[0x10]
8002e4e2:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002e4e6:	16 90       	mov	r0,r11
8002e4e8:	14 93       	mov	r3,r10
8002e4ea:	14 98       	mov	r8,r10
8002e4ec:	e5 e9 10 0c 	or	r12,r2,r9
8002e4f0:	e0 80 05 33 	breq	8002ef56 <__ieee754_pow+0xa8a>
8002e4f4:	50 1b       	stdsp	sp[0x4],r11
8002e4f6:	16 9e       	mov	lr,r11
8002e4f8:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002e4fc:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e500:	18 34       	cp.w	r4,r12
8002e502:	e0 89 00 1a 	brgt	8002e536 <__ieee754_pow+0x6a>
8002e506:	5f 05       	sreq	r5
8002e508:	50 55       	stdsp	sp[0x14],r5
8002e50a:	30 0c       	mov	r12,0
8002e50c:	58 0a       	cp.w	r10,0
8002e50e:	5f 15       	srne	r5
8002e510:	40 5e       	lddsp	lr,sp[0x14]
8002e512:	fd e5 00 05 	and	r5,lr,r5
8002e516:	f8 05 18 00 	cp.b	r5,r12
8002e51a:	c0 e1       	brne	8002e536 <__ieee754_pow+0x6a>
8002e51c:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e520:	18 32       	cp.w	r2,r12
8002e522:	e0 89 00 0a 	brgt	8002e536 <__ieee754_pow+0x6a>
8002e526:	5f 0c       	sreq	r12
8002e528:	58 09       	cp.w	r9,0
8002e52a:	5f 1e       	srne	lr
8002e52c:	f9 ee 00 0e 	and	lr,r12,lr
8002e530:	ea 0e 18 00 	cp.b	lr,r5
8002e534:	c0 d0       	breq	8002e54e <__ieee754_pow+0x82>
8002e536:	fc 19 c0 10 	movh	r9,0xc010
8002e53a:	12 04       	add	r4,r9
8002e53c:	e9 e8 10 08 	or	r8,r4,r8
8002e540:	e0 80 05 0b 	breq	8002ef56 <__ieee754_pow+0xa8a>
8002e544:	4d 6c       	lddpc	r12,8002e69c <__ieee754_pow+0x1d0>
8002e546:	e0 a0 11 c8 	rcall	800308d6 <nan>
8002e54a:	e0 8f 05 03 	bral	8002ef50 <__ieee754_pow+0xa84>
8002e54e:	58 0b       	cp.w	r11,0
8002e550:	c3 64       	brge	8002e5bc <__ieee754_pow+0xf0>
8002e552:	e0 6b ff ff 	mov	r11,65535
8002e556:	ea 1b 43 3f 	orh	r11,0x433f
8002e55a:	16 32       	cp.w	r2,r11
8002e55c:	e0 8a 00 04 	brle	8002e564 <__ieee754_pow+0x98>
8002e560:	30 25       	mov	r5,2
8002e562:	c2 e8       	rjmp	8002e5be <__ieee754_pow+0xf2>
8002e564:	e0 6a ff ff 	mov	r10,65535
8002e568:	ea 1a 3f ef 	orh	r10,0x3fef
8002e56c:	14 32       	cp.w	r2,r10
8002e56e:	e0 8a 00 27 	brle	8002e5bc <__ieee754_pow+0xf0>
8002e572:	e4 0a 14 14 	asr	r10,r2,0x14
8002e576:	f4 ca 03 ff 	sub	r10,r10,1023
8002e57a:	59 4a       	cp.w	r10,20
8002e57c:	e0 8a 00 0f 	brle	8002e59a <__ieee754_pow+0xce>
8002e580:	f4 0a 11 34 	rsub	r10,r10,52
8002e584:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e588:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e58c:	12 3a       	cp.w	r10,r9
8002e58e:	c1 71       	brne	8002e5bc <__ieee754_pow+0xf0>
8002e590:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e594:	ea 05 11 02 	rsub	r5,r5,2
8002e598:	c1 38       	rjmp	8002e5be <__ieee754_pow+0xf2>
8002e59a:	40 49       	lddsp	r9,sp[0x10]
8002e59c:	58 09       	cp.w	r9,0
8002e59e:	c5 01       	brne	8002e63e <__ieee754_pow+0x172>
8002e5a0:	f4 0a 11 14 	rsub	r10,r10,20
8002e5a4:	e4 0a 08 45 	asr	r5,r2,r10
8002e5a8:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e5ac:	04 3a       	cp.w	r10,r2
8002e5ae:	e0 81 04 de 	brne	8002ef6a <__ieee754_pow+0xa9e>
8002e5b2:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e5b6:	ea 05 11 02 	rsub	r5,r5,2
8002e5ba:	c0 48       	rjmp	8002e5c2 <__ieee754_pow+0xf6>
8002e5bc:	30 05       	mov	r5,0
8002e5be:	58 09       	cp.w	r9,0
8002e5c0:	c4 01       	brne	8002e640 <__ieee754_pow+0x174>
8002e5c2:	58 0c       	cp.w	r12,0
8002e5c4:	c1 90       	breq	8002e5f6 <__ieee754_pow+0x12a>
8002e5c6:	fc 19 c0 10 	movh	r9,0xc010
8002e5ca:	e8 09 00 09 	add	r9,r4,r9
8002e5ce:	f3 e8 10 08 	or	r8,r9,r8
8002e5d2:	e0 80 04 c2 	breq	8002ef56 <__ieee754_pow+0xa8a>
8002e5d6:	e0 68 ff ff 	mov	r8,65535
8002e5da:	ea 18 3f ef 	orh	r8,0x3fef
8002e5de:	10 34       	cp.w	r4,r8
8002e5e0:	e0 8a 00 07 	brle	8002e5ee <__ieee754_pow+0x122>
8002e5e4:	58 01       	cp.w	r1,0
8002e5e6:	e0 84 04 be 	brge	8002ef62 <__ieee754_pow+0xa96>
8002e5ea:	e0 8f 04 ba 	bral	8002ef5e <__ieee754_pow+0xa92>
8002e5ee:	58 01       	cp.w	r1,0
8002e5f0:	e0 84 04 b7 	brge	8002ef5e <__ieee754_pow+0xa92>
8002e5f4:	c5 98       	rjmp	8002e6a6 <__ieee754_pow+0x1da>
8002e5f6:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e5fa:	1c 32       	cp.w	r2,lr
8002e5fc:	c0 d1       	brne	8002e616 <__ieee754_pow+0x14a>
8002e5fe:	58 01       	cp.w	r1,0
8002e600:	c0 55       	brlt	8002e60a <__ieee754_pow+0x13e>
8002e602:	00 97       	mov	r7,r0
8002e604:	06 96       	mov	r6,r3
8002e606:	e0 8f 04 ae 	bral	8002ef62 <__ieee754_pow+0xa96>
8002e60a:	00 99       	mov	r9,r0
8002e60c:	06 98       	mov	r8,r3
8002e60e:	30 0a       	mov	r10,0
8002e610:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e614:	c5 c8       	rjmp	8002e6cc <__ieee754_pow+0x200>
8002e616:	fc 1c 40 00 	movh	r12,0x4000
8002e61a:	18 31       	cp.w	r1,r12
8002e61c:	c0 41       	brne	8002e624 <__ieee754_pow+0x158>
8002e61e:	00 99       	mov	r9,r0
8002e620:	06 98       	mov	r8,r3
8002e622:	c8 68       	rjmp	8002e72e <__ieee754_pow+0x262>
8002e624:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e628:	16 31       	cp.w	r1,r11
8002e62a:	c0 b1       	brne	8002e640 <__ieee754_pow+0x174>
8002e62c:	40 1a       	lddsp	r10,sp[0x4]
8002e62e:	58 0a       	cp.w	r10,0
8002e630:	c0 85       	brlt	8002e640 <__ieee754_pow+0x174>
8002e632:	00 9b       	mov	r11,r0
8002e634:	06 9a       	mov	r10,r3
8002e636:	e0 a0 06 d5 	rcall	8002f3e0 <__ieee754_sqrt>
8002e63a:	e0 8f 04 8b 	bral	8002ef50 <__ieee754_pow+0xa84>
8002e63e:	30 05       	mov	r5,0
8002e640:	50 08       	stdsp	sp[0x0],r8
8002e642:	00 9b       	mov	r11,r0
8002e644:	06 9a       	mov	r10,r3
8002e646:	e0 a0 10 9d 	rcall	80030780 <fabs>
8002e64a:	40 08       	lddsp	r8,sp[0x0]
8002e64c:	58 08       	cp.w	r8,0
8002e64e:	c3 01       	brne	8002e6ae <__ieee754_pow+0x1e2>
8002e650:	58 04       	cp.w	r4,0
8002e652:	5f 09       	sreq	r9
8002e654:	40 5e       	lddsp	lr,sp[0x14]
8002e656:	fd e9 10 09 	or	r9,lr,r9
8002e65a:	f0 09 18 00 	cp.b	r9,r8
8002e65e:	c0 51       	brne	8002e668 <__ieee754_pow+0x19c>
8002e660:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e664:	18 34       	cp.w	r4,r12
8002e666:	c2 41       	brne	8002e6ae <__ieee754_pow+0x1e2>
8002e668:	58 01       	cp.w	r1,0
8002e66a:	c0 84       	brge	8002e67a <__ieee754_pow+0x1ae>
8002e66c:	16 99       	mov	r9,r11
8002e66e:	14 98       	mov	r8,r10
8002e670:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e674:	30 0a       	mov	r10,0
8002e676:	e0 a0 15 a5 	rcall	800311c0 <__avr32_f64_div>
8002e67a:	16 97       	mov	r7,r11
8002e67c:	14 96       	mov	r6,r10
8002e67e:	40 1b       	lddsp	r11,sp[0x4]
8002e680:	58 0b       	cp.w	r11,0
8002e682:	e0 84 04 70 	brge	8002ef62 <__ieee754_pow+0xa96>
8002e686:	fc 18 c0 10 	movh	r8,0xc010
8002e68a:	10 04       	add	r4,r8
8002e68c:	eb e4 10 04 	or	r4,r5,r4
8002e690:	c0 81       	brne	8002e6a0 <__ieee754_pow+0x1d4>
8002e692:	0e 9b       	mov	r11,r7
8002e694:	0e 99       	mov	r9,r7
8002e696:	0c 98       	mov	r8,r6
8002e698:	c1 68       	rjmp	8002e6c4 <__ieee754_pow+0x1f8>
8002e69a:	d7 03       	nop
8002e69c:	80 03       	ld.sh	r3,r0[0x0]
8002e69e:	23 78       	sub	r8,55
8002e6a0:	58 15       	cp.w	r5,1
8002e6a2:	e0 81 04 60 	brne	8002ef62 <__ieee754_pow+0xa96>
8002e6a6:	ee 17 80 00 	eorh	r7,0x8000
8002e6aa:	e0 8f 04 5c 	bral	8002ef62 <__ieee754_pow+0xa96>
8002e6ae:	40 78       	lddsp	r8,sp[0x1c]
8002e6b0:	bf 98       	lsr	r8,0x1f
8002e6b2:	20 18       	sub	r8,1
8002e6b4:	50 d8       	stdsp	sp[0x34],r8
8002e6b6:	eb e8 10 08 	or	r8,r5,r8
8002e6ba:	c0 d1       	brne	8002e6d4 <__ieee754_pow+0x208>
8002e6bc:	00 99       	mov	r9,r0
8002e6be:	06 98       	mov	r8,r3
8002e6c0:	06 9a       	mov	r10,r3
8002e6c2:	00 9b       	mov	r11,r0
8002e6c4:	e0 a0 13 0a 	rcall	80030cd8 <__avr32_f64_sub>
8002e6c8:	14 98       	mov	r8,r10
8002e6ca:	16 99       	mov	r9,r11
8002e6cc:	e0 a0 15 7a 	rcall	800311c0 <__avr32_f64_div>
8002e6d0:	e0 8f 04 40 	bral	8002ef50 <__ieee754_pow+0xa84>
8002e6d4:	fc 19 41 e0 	movh	r9,0x41e0
8002e6d8:	12 32       	cp.w	r2,r9
8002e6da:	e0 8a 00 9f 	brle	8002e818 <__ieee754_pow+0x34c>
8002e6de:	fc 18 43 f0 	movh	r8,0x43f0
8002e6e2:	10 32       	cp.w	r2,r8
8002e6e4:	e0 8a 00 0a 	brle	8002e6f8 <__ieee754_pow+0x22c>
8002e6e8:	e0 65 ff ff 	mov	r5,65535
8002e6ec:	ea 15 3f ef 	orh	r5,0x3fef
8002e6f0:	0a 34       	cp.w	r4,r5
8002e6f2:	e0 89 00 13 	brgt	8002e718 <__ieee754_pow+0x24c>
8002e6f6:	c0 88       	rjmp	8002e706 <__ieee754_pow+0x23a>
8002e6f8:	e0 60 ff fe 	mov	r0,65534
8002e6fc:	ea 10 3f ef 	orh	r0,0x3fef
8002e700:	00 34       	cp.w	r4,r0
8002e702:	e0 89 00 06 	brgt	8002e70e <__ieee754_pow+0x242>
8002e706:	58 01       	cp.w	r1,0
8002e708:	e0 84 04 2b 	brge	8002ef5e <__ieee754_pow+0xa92>
8002e70c:	c0 98       	rjmp	8002e71e <__ieee754_pow+0x252>
8002e70e:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e712:	1c 34       	cp.w	r4,lr
8002e714:	e0 8a 00 11 	brle	8002e736 <__ieee754_pow+0x26a>
8002e718:	58 01       	cp.w	r1,0
8002e71a:	e0 8a 04 22 	brle	8002ef5e <__ieee754_pow+0xa92>
8002e71e:	e0 68 75 9c 	mov	r8,30108
8002e722:	ea 18 88 00 	orh	r8,0x8800
8002e726:	e0 69 e4 3c 	mov	r9,58428
8002e72a:	ea 19 7e 37 	orh	r9,0x7e37
8002e72e:	10 9a       	mov	r10,r8
8002e730:	12 9b       	mov	r11,r9
8002e732:	e0 8f 04 0d 	bral	8002ef4c <__ieee754_pow+0xa80>
8002e736:	30 08       	mov	r8,0
8002e738:	fc 19 3f f0 	movh	r9,0x3ff0
8002e73c:	e0 a0 12 ce 	rcall	80030cd8 <__avr32_f64_sub>
8002e740:	fc 18 60 00 	movh	r8,0x6000
8002e744:	14 92       	mov	r2,r10
8002e746:	16 93       	mov	r3,r11
8002e748:	e0 69 15 47 	mov	r9,5447
8002e74c:	ea 19 3f f7 	orh	r9,0x3ff7
8002e750:	e0 a0 11 d8 	rcall	80030b00 <__avr32_f64_mul>
8002e754:	e0 68 df 44 	mov	r8,57156
8002e758:	ea 18 f8 5d 	orh	r8,0xf85d
8002e75c:	fa eb 00 0c 	st.d	sp[12],r10
8002e760:	e0 69 ae 0b 	mov	r9,44555
8002e764:	ea 19 3e 54 	orh	r9,0x3e54
8002e768:	04 9a       	mov	r10,r2
8002e76a:	06 9b       	mov	r11,r3
8002e76c:	e0 a0 11 ca 	rcall	80030b00 <__avr32_f64_mul>
8002e770:	04 98       	mov	r8,r2
8002e772:	fa eb 00 04 	st.d	sp[4],r10
8002e776:	06 99       	mov	r9,r3
8002e778:	04 9a       	mov	r10,r2
8002e77a:	06 9b       	mov	r11,r3
8002e77c:	e0 a0 11 c2 	rcall	80030b00 <__avr32_f64_mul>
8002e780:	30 08       	mov	r8,0
8002e782:	14 90       	mov	r0,r10
8002e784:	16 91       	mov	r1,r11
8002e786:	fc 19 bf d0 	movh	r9,0xbfd0
8002e78a:	04 9a       	mov	r10,r2
8002e78c:	06 9b       	mov	r11,r3
8002e78e:	e0 a0 11 b9 	rcall	80030b00 <__avr32_f64_mul>
8002e792:	e0 68 55 55 	mov	r8,21845
8002e796:	ea 18 55 55 	orh	r8,0x5555
8002e79a:	e0 69 55 55 	mov	r9,21845
8002e79e:	ea 19 3f d5 	orh	r9,0x3fd5
8002e7a2:	e0 a0 13 69 	rcall	80030e74 <__avr32_f64_add>
8002e7a6:	14 98       	mov	r8,r10
8002e7a8:	16 99       	mov	r9,r11
8002e7aa:	04 9a       	mov	r10,r2
8002e7ac:	06 9b       	mov	r11,r3
8002e7ae:	e0 a0 11 a9 	rcall	80030b00 <__avr32_f64_mul>
8002e7b2:	14 98       	mov	r8,r10
8002e7b4:	16 99       	mov	r9,r11
8002e7b6:	30 0a       	mov	r10,0
8002e7b8:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e7bc:	e0 a0 12 8e 	rcall	80030cd8 <__avr32_f64_sub>
8002e7c0:	14 98       	mov	r8,r10
8002e7c2:	16 99       	mov	r9,r11
8002e7c4:	00 9a       	mov	r10,r0
8002e7c6:	02 9b       	mov	r11,r1
8002e7c8:	e0 a0 11 9c 	rcall	80030b00 <__avr32_f64_mul>
8002e7cc:	e0 68 82 fe 	mov	r8,33534
8002e7d0:	ea 18 65 2b 	orh	r8,0x652b
8002e7d4:	e0 69 15 47 	mov	r9,5447
8002e7d8:	ea 19 bf f7 	orh	r9,0xbff7
8002e7dc:	e0 a0 11 92 	rcall	80030b00 <__avr32_f64_mul>
8002e7e0:	14 98       	mov	r8,r10
8002e7e2:	16 99       	mov	r9,r11
8002e7e4:	fa ea 00 04 	ld.d	r10,sp[4]
8002e7e8:	e0 a0 13 46 	rcall	80030e74 <__avr32_f64_add>
8002e7ec:	16 91       	mov	r1,r11
8002e7ee:	14 98       	mov	r8,r10
8002e7f0:	14 90       	mov	r0,r10
8002e7f2:	02 99       	mov	r9,r1
8002e7f4:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e7f8:	e0 a0 13 3e 	rcall	80030e74 <__avr32_f64_add>
8002e7fc:	fa e8 00 0c 	ld.d	r8,sp[12]
8002e800:	16 93       	mov	r3,r11
8002e802:	30 02       	mov	r2,0
8002e804:	06 9b       	mov	r11,r3
8002e806:	04 9a       	mov	r10,r2
8002e808:	e0 a0 12 68 	rcall	80030cd8 <__avr32_f64_sub>
8002e80c:	14 98       	mov	r8,r10
8002e80e:	16 99       	mov	r9,r11
8002e810:	00 9a       	mov	r10,r0
8002e812:	02 9b       	mov	r11,r1
8002e814:	e0 8f 01 c6 	bral	8002eba0 <__ieee754_pow+0x6d4>
8002e818:	ee 54 ff ff 	cp.w	r4,1048575
8002e81c:	e0 8a 00 04 	brle	8002e824 <__ieee754_pow+0x358>
8002e820:	30 0c       	mov	r12,0
8002e822:	c0 98       	rjmp	8002e834 <__ieee754_pow+0x368>
8002e824:	fc 19 43 40 	movh	r9,0x4340
8002e828:	30 08       	mov	r8,0
8002e82a:	e0 a0 11 6b 	rcall	80030b00 <__avr32_f64_mul>
8002e82e:	3c bc       	mov	r12,-53
8002e830:	16 99       	mov	r9,r11
8002e832:	12 94       	mov	r4,r9
8002e834:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002e838:	f8 cc 03 ff 	sub	r12,r12,1023
8002e83c:	b5 44       	asr	r4,0x14
8002e83e:	10 93       	mov	r3,r8
8002e840:	08 0c       	add	r12,r4
8002e842:	ea 13 3f f0 	orh	r3,0x3ff0
8002e846:	e2 58 98 8e 	cp.w	r8,235662
8002e84a:	e0 8a 00 0c 	brle	8002e862 <__ieee754_pow+0x396>
8002e84e:	ea 58 b6 79 	cp.w	r8,767609
8002e852:	e0 89 00 04 	brgt	8002e85a <__ieee754_pow+0x38e>
8002e856:	30 14       	mov	r4,1
8002e858:	c0 68       	rjmp	8002e864 <__ieee754_pow+0x398>
8002e85a:	f0 68 00 00 	mov	r8,-1048576
8002e85e:	2f fc       	sub	r12,-1
8002e860:	10 03       	add	r3,r8
8002e862:	30 04       	mov	r4,0
8002e864:	14 98       	mov	r8,r10
8002e866:	06 99       	mov	r9,r3
8002e868:	4d ea       	lddpc	r10,8002e9e0 <__ieee754_pow+0x514>
8002e86a:	50 0c       	stdsp	sp[0x0],r12
8002e86c:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002e870:	fa e9 00 14 	st.d	sp[20],r8
8002e874:	fa e1 00 1c 	st.d	sp[28],r0
8002e878:	00 98       	mov	r8,r0
8002e87a:	02 99       	mov	r9,r1
8002e87c:	fa ea 00 14 	ld.d	r10,sp[20]
8002e880:	e0 a0 12 2c 	rcall	80030cd8 <__avr32_f64_sub>
8002e884:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e888:	fa eb 00 24 	st.d	sp[36],r10
8002e88c:	fa ea 00 14 	ld.d	r10,sp[20]
8002e890:	e0 a0 12 f2 	rcall	80030e74 <__avr32_f64_add>
8002e894:	14 98       	mov	r8,r10
8002e896:	16 99       	mov	r9,r11
8002e898:	30 0a       	mov	r10,0
8002e89a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e89e:	e0 a0 14 91 	rcall	800311c0 <__avr32_f64_div>
8002e8a2:	14 98       	mov	r8,r10
8002e8a4:	16 99       	mov	r9,r11
8002e8a6:	fa eb 00 2c 	st.d	sp[44],r10
8002e8aa:	fa ea 00 24 	ld.d	r10,sp[36]
8002e8ae:	e0 a0 11 29 	rcall	80030b00 <__avr32_f64_mul>
8002e8b2:	30 09       	mov	r9,0
8002e8b4:	fa eb 00 0c 	st.d	sp[12],r10
8002e8b8:	fa eb 00 04 	st.d	sp[4],r10
8002e8bc:	a1 53       	asr	r3,0x1
8002e8be:	30 0a       	mov	r10,0
8002e8c0:	bd b3       	sbr	r3,0x1d
8002e8c2:	e8 08 15 12 	lsl	r8,r4,0x12
8002e8c6:	f8 28 00 00 	sub	r8,-524288
8002e8ca:	f0 03 00 0b 	add	r11,r8,r3
8002e8ce:	50 49       	stdsp	sp[0x10],r9
8002e8d0:	14 92       	mov	r2,r10
8002e8d2:	fa e0 00 0c 	ld.d	r0,sp[12]
8002e8d6:	16 93       	mov	r3,r11
8002e8d8:	14 98       	mov	r8,r10
8002e8da:	16 99       	mov	r9,r11
8002e8dc:	00 9a       	mov	r10,r0
8002e8de:	02 9b       	mov	r11,r1
8002e8e0:	e0 a0 11 10 	rcall	80030b00 <__avr32_f64_mul>
8002e8e4:	14 98       	mov	r8,r10
8002e8e6:	16 99       	mov	r9,r11
8002e8e8:	fa ea 00 24 	ld.d	r10,sp[36]
8002e8ec:	e0 a0 11 f6 	rcall	80030cd8 <__avr32_f64_sub>
8002e8f0:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e8f4:	fa eb 00 24 	st.d	sp[36],r10
8002e8f8:	04 9a       	mov	r10,r2
8002e8fa:	06 9b       	mov	r11,r3
8002e8fc:	e0 a0 11 ee 	rcall	80030cd8 <__avr32_f64_sub>
8002e900:	14 98       	mov	r8,r10
8002e902:	16 99       	mov	r9,r11
8002e904:	fa ea 00 14 	ld.d	r10,sp[20]
8002e908:	e0 a0 11 e8 	rcall	80030cd8 <__avr32_f64_sub>
8002e90c:	14 98       	mov	r8,r10
8002e90e:	16 99       	mov	r9,r11
8002e910:	00 9a       	mov	r10,r0
8002e912:	02 9b       	mov	r11,r1
8002e914:	e0 a0 10 f6 	rcall	80030b00 <__avr32_f64_mul>
8002e918:	14 98       	mov	r8,r10
8002e91a:	16 99       	mov	r9,r11
8002e91c:	fa ea 00 24 	ld.d	r10,sp[36]
8002e920:	e0 a0 11 dc 	rcall	80030cd8 <__avr32_f64_sub>
8002e924:	14 98       	mov	r8,r10
8002e926:	16 99       	mov	r9,r11
8002e928:	fa ea 00 2c 	ld.d	r10,sp[44]
8002e92c:	e0 a0 10 ea 	rcall	80030b00 <__avr32_f64_mul>
8002e930:	fa e8 00 04 	ld.d	r8,sp[4]
8002e934:	fa eb 00 14 	st.d	sp[20],r10
8002e938:	10 9a       	mov	r10,r8
8002e93a:	12 9b       	mov	r11,r9
8002e93c:	e0 a0 10 e2 	rcall	80030b00 <__avr32_f64_mul>
8002e940:	16 93       	mov	r3,r11
8002e942:	14 92       	mov	r2,r10
8002e944:	06 99       	mov	r9,r3
8002e946:	14 98       	mov	r8,r10
8002e948:	e0 a0 10 dc 	rcall	80030b00 <__avr32_f64_mul>
8002e94c:	e0 68 4e ef 	mov	r8,20207
8002e950:	ea 18 4a 45 	orh	r8,0x4a45
8002e954:	fa eb 00 1c 	st.d	sp[28],r10
8002e958:	e0 69 7e 28 	mov	r9,32296
8002e95c:	ea 19 3f ca 	orh	r9,0x3fca
8002e960:	04 9a       	mov	r10,r2
8002e962:	06 9b       	mov	r11,r3
8002e964:	e0 a0 10 ce 	rcall	80030b00 <__avr32_f64_mul>
8002e968:	e0 68 db 65 	mov	r8,56165
8002e96c:	ea 18 93 c9 	orh	r8,0x93c9
8002e970:	e0 69 86 4a 	mov	r9,34378
8002e974:	ea 19 3f cd 	orh	r9,0x3fcd
8002e978:	e0 a0 12 7e 	rcall	80030e74 <__avr32_f64_add>
8002e97c:	14 98       	mov	r8,r10
8002e97e:	16 99       	mov	r9,r11
8002e980:	04 9a       	mov	r10,r2
8002e982:	06 9b       	mov	r11,r3
8002e984:	e0 a0 10 be 	rcall	80030b00 <__avr32_f64_mul>
8002e988:	e0 68 41 01 	mov	r8,16641
8002e98c:	ea 18 a9 1d 	orh	r8,0xa91d
8002e990:	e0 69 74 60 	mov	r9,29792
8002e994:	ea 19 3f d1 	orh	r9,0x3fd1
8002e998:	e0 a0 12 6e 	rcall	80030e74 <__avr32_f64_add>
8002e99c:	14 98       	mov	r8,r10
8002e99e:	16 99       	mov	r9,r11
8002e9a0:	04 9a       	mov	r10,r2
8002e9a2:	06 9b       	mov	r11,r3
8002e9a4:	e0 a0 10 ae 	rcall	80030b00 <__avr32_f64_mul>
8002e9a8:	e0 68 26 4d 	mov	r8,9805
8002e9ac:	ea 18 51 8f 	orh	r8,0x518f
8002e9b0:	e0 69 55 55 	mov	r9,21845
8002e9b4:	ea 19 3f d5 	orh	r9,0x3fd5
8002e9b8:	e0 a0 12 5e 	rcall	80030e74 <__avr32_f64_add>
8002e9bc:	14 98       	mov	r8,r10
8002e9be:	16 99       	mov	r9,r11
8002e9c0:	04 9a       	mov	r10,r2
8002e9c2:	06 9b       	mov	r11,r3
8002e9c4:	e0 a0 10 9e 	rcall	80030b00 <__avr32_f64_mul>
8002e9c8:	e0 68 ab ff 	mov	r8,44031
8002e9cc:	ea 18 db 6f 	orh	r8,0xdb6f
8002e9d0:	e0 69 6d b6 	mov	r9,28086
8002e9d4:	ea 19 3f db 	orh	r9,0x3fdb
8002e9d8:	e0 a0 12 4e 	rcall	80030e74 <__avr32_f64_add>
8002e9dc:	c0 48       	rjmp	8002e9e4 <__ieee754_pow+0x518>
8002e9de:	d7 03       	nop
8002e9e0:	80 03       	ld.sh	r3,r0[0x0]
8002e9e2:	23 b0       	sub	r0,59
8002e9e4:	14 98       	mov	r8,r10
8002e9e6:	16 99       	mov	r9,r11
8002e9e8:	04 9a       	mov	r10,r2
8002e9ea:	06 9b       	mov	r11,r3
8002e9ec:	e0 a0 10 8a 	rcall	80030b00 <__avr32_f64_mul>
8002e9f0:	e0 68 33 03 	mov	r8,13059
8002e9f4:	ea 18 33 33 	orh	r8,0x3333
8002e9f8:	e0 69 33 33 	mov	r9,13107
8002e9fc:	ea 19 3f e3 	orh	r9,0x3fe3
8002ea00:	e0 a0 12 3a 	rcall	80030e74 <__avr32_f64_add>
8002ea04:	14 98       	mov	r8,r10
8002ea06:	16 99       	mov	r9,r11
8002ea08:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ea0c:	e0 a0 10 7a 	rcall	80030b00 <__avr32_f64_mul>
8002ea10:	fa e8 00 04 	ld.d	r8,sp[4]
8002ea14:	14 92       	mov	r2,r10
8002ea16:	16 93       	mov	r3,r11
8002ea18:	00 9a       	mov	r10,r0
8002ea1a:	02 9b       	mov	r11,r1
8002ea1c:	e0 a0 12 2c 	rcall	80030e74 <__avr32_f64_add>
8002ea20:	14 98       	mov	r8,r10
8002ea22:	16 99       	mov	r9,r11
8002ea24:	fa ea 00 14 	ld.d	r10,sp[20]
8002ea28:	e0 a0 10 6c 	rcall	80030b00 <__avr32_f64_mul>
8002ea2c:	14 98       	mov	r8,r10
8002ea2e:	16 99       	mov	r9,r11
8002ea30:	04 9a       	mov	r10,r2
8002ea32:	06 9b       	mov	r11,r3
8002ea34:	e0 a0 12 20 	rcall	80030e74 <__avr32_f64_add>
8002ea38:	00 98       	mov	r8,r0
8002ea3a:	fa eb 00 1c 	st.d	sp[28],r10
8002ea3e:	02 99       	mov	r9,r1
8002ea40:	00 9a       	mov	r10,r0
8002ea42:	02 9b       	mov	r11,r1
8002ea44:	e0 a0 10 5e 	rcall	80030b00 <__avr32_f64_mul>
8002ea48:	30 08       	mov	r8,0
8002ea4a:	fc 19 40 08 	movh	r9,0x4008
8002ea4e:	fa eb 00 2c 	st.d	sp[44],r10
8002ea52:	e0 a0 12 11 	rcall	80030e74 <__avr32_f64_add>
8002ea56:	fa e8 00 1c 	ld.d	r8,sp[28]
8002ea5a:	e0 a0 12 0d 	rcall	80030e74 <__avr32_f64_add>
8002ea5e:	40 48       	lddsp	r8,sp[0x10]
8002ea60:	16 93       	mov	r3,r11
8002ea62:	10 92       	mov	r2,r8
8002ea64:	06 99       	mov	r9,r3
8002ea66:	00 9a       	mov	r10,r0
8002ea68:	02 9b       	mov	r11,r1
8002ea6a:	e0 a0 10 4b 	rcall	80030b00 <__avr32_f64_mul>
8002ea6e:	04 98       	mov	r8,r2
8002ea70:	06 99       	mov	r9,r3
8002ea72:	fa eb 00 24 	st.d	sp[36],r10
8002ea76:	fa ea 00 14 	ld.d	r10,sp[20]
8002ea7a:	e0 a0 10 43 	rcall	80030b00 <__avr32_f64_mul>
8002ea7e:	30 08       	mov	r8,0
8002ea80:	14 90       	mov	r0,r10
8002ea82:	16 91       	mov	r1,r11
8002ea84:	04 9a       	mov	r10,r2
8002ea86:	06 9b       	mov	r11,r3
8002ea88:	fc 19 40 08 	movh	r9,0x4008
8002ea8c:	e0 a0 11 26 	rcall	80030cd8 <__avr32_f64_sub>
8002ea90:	fa e8 00 2c 	ld.d	r8,sp[44]
8002ea94:	e0 a0 11 22 	rcall	80030cd8 <__avr32_f64_sub>
8002ea98:	14 98       	mov	r8,r10
8002ea9a:	16 99       	mov	r9,r11
8002ea9c:	fa ea 00 1c 	ld.d	r10,sp[28]
8002eaa0:	e0 a0 11 1c 	rcall	80030cd8 <__avr32_f64_sub>
8002eaa4:	fa e8 00 04 	ld.d	r8,sp[4]
8002eaa8:	e0 a0 10 2c 	rcall	80030b00 <__avr32_f64_mul>
8002eaac:	14 98       	mov	r8,r10
8002eaae:	16 99       	mov	r9,r11
8002eab0:	00 9a       	mov	r10,r0
8002eab2:	02 9b       	mov	r11,r1
8002eab4:	e0 a0 11 e0 	rcall	80030e74 <__avr32_f64_add>
8002eab8:	16 91       	mov	r1,r11
8002eaba:	14 90       	mov	r0,r10
8002eabc:	14 98       	mov	r8,r10
8002eabe:	02 99       	mov	r9,r1
8002eac0:	fa ea 00 24 	ld.d	r10,sp[36]
8002eac4:	e0 a0 11 d8 	rcall	80030e74 <__avr32_f64_add>
8002eac8:	40 4e       	lddsp	lr,sp[0x10]
8002eaca:	16 93       	mov	r3,r11
8002eacc:	1c 92       	mov	r2,lr
8002eace:	1c 9a       	mov	r10,lr
8002ead0:	fc 18 e0 00 	movh	r8,0xe000
8002ead4:	e0 69 c7 09 	mov	r9,50953
8002ead8:	ea 19 3f ee 	orh	r9,0x3fee
8002eadc:	06 9b       	mov	r11,r3
8002eade:	e0 a0 10 11 	rcall	80030b00 <__avr32_f64_mul>
8002eae2:	e0 68 01 f5 	mov	r8,501
8002eae6:	ea 18 14 5b 	orh	r8,0x145b
8002eaea:	fa eb 00 14 	st.d	sp[20],r10
8002eaee:	e0 69 2f e0 	mov	r9,12256
8002eaf2:	ea 19 be 3e 	orh	r9,0xbe3e
8002eaf6:	04 9a       	mov	r10,r2
8002eaf8:	06 9b       	mov	r11,r3
8002eafa:	e0 a0 10 03 	rcall	80030b00 <__avr32_f64_mul>
8002eafe:	fa e8 00 24 	ld.d	r8,sp[36]
8002eb02:	fa eb 00 04 	st.d	sp[4],r10
8002eb06:	04 9a       	mov	r10,r2
8002eb08:	06 9b       	mov	r11,r3
8002eb0a:	e0 a0 10 e7 	rcall	80030cd8 <__avr32_f64_sub>
8002eb0e:	14 98       	mov	r8,r10
8002eb10:	16 99       	mov	r9,r11
8002eb12:	00 9a       	mov	r10,r0
8002eb14:	02 9b       	mov	r11,r1
8002eb16:	e0 a0 10 e1 	rcall	80030cd8 <__avr32_f64_sub>
8002eb1a:	e0 68 03 fd 	mov	r8,1021
8002eb1e:	ea 18 dc 3a 	orh	r8,0xdc3a
8002eb22:	e0 69 c7 09 	mov	r9,50953
8002eb26:	ea 19 3f ee 	orh	r9,0x3fee
8002eb2a:	e0 a0 0f eb 	rcall	80030b00 <__avr32_f64_mul>
8002eb2e:	14 98       	mov	r8,r10
8002eb30:	16 99       	mov	r9,r11
8002eb32:	fa ea 00 04 	ld.d	r10,sp[4]
8002eb36:	e0 a0 11 9f 	rcall	80030e74 <__avr32_f64_add>
8002eb3a:	4a 18       	lddpc	r8,8002ebbc <__ieee754_pow+0x6f0>
8002eb3c:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002eb40:	e0 a0 11 9a 	rcall	80030e74 <__avr32_f64_add>
8002eb44:	40 0c       	lddsp	r12,sp[0x0]
8002eb46:	fa eb 00 1c 	st.d	sp[28],r10
8002eb4a:	e0 a0 12 36 	rcall	80030fb6 <__avr32_s32_to_f64>
8002eb4e:	49 d8       	lddpc	r8,8002ebc0 <__ieee754_pow+0x6f4>
8002eb50:	14 90       	mov	r0,r10
8002eb52:	16 91       	mov	r1,r11
8002eb54:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002eb58:	fa e8 00 1c 	ld.d	r8,sp[28]
8002eb5c:	fa eb 00 04 	st.d	sp[4],r10
8002eb60:	fa ea 00 14 	ld.d	r10,sp[20]
8002eb64:	e0 a0 11 88 	rcall	80030e74 <__avr32_f64_add>
8002eb68:	fa e8 00 04 	ld.d	r8,sp[4]
8002eb6c:	e0 a0 11 84 	rcall	80030e74 <__avr32_f64_add>
8002eb70:	00 98       	mov	r8,r0
8002eb72:	02 99       	mov	r9,r1
8002eb74:	e0 a0 11 80 	rcall	80030e74 <__avr32_f64_add>
8002eb78:	00 98       	mov	r8,r0
8002eb7a:	02 99       	mov	r9,r1
8002eb7c:	40 4a       	lddsp	r10,sp[0x10]
8002eb7e:	16 93       	mov	r3,r11
8002eb80:	14 92       	mov	r2,r10
8002eb82:	06 9b       	mov	r11,r3
8002eb84:	e0 a0 10 aa 	rcall	80030cd8 <__avr32_f64_sub>
8002eb88:	fa e8 00 04 	ld.d	r8,sp[4]
8002eb8c:	e0 a0 10 a6 	rcall	80030cd8 <__avr32_f64_sub>
8002eb90:	fa e8 00 14 	ld.d	r8,sp[20]
8002eb94:	e0 a0 10 a2 	rcall	80030cd8 <__avr32_f64_sub>
8002eb98:	14 98       	mov	r8,r10
8002eb9a:	16 99       	mov	r9,r11
8002eb9c:	fa ea 00 1c 	ld.d	r10,sp[28]
8002eba0:	e0 a0 10 9c 	rcall	80030cd8 <__avr32_f64_sub>
8002eba4:	20 15       	sub	r5,1
8002eba6:	40 d9       	lddsp	r9,sp[0x34]
8002eba8:	14 90       	mov	r0,r10
8002ebaa:	16 91       	mov	r1,r11
8002ebac:	12 45       	or	r5,r9
8002ebae:	c0 b0       	breq	8002ebc4 <__ieee754_pow+0x6f8>
8002ebb0:	30 04       	mov	r4,0
8002ebb2:	fc 15 3f f0 	movh	r5,0x3ff0
8002ebb6:	fa e5 00 0c 	st.d	sp[12],r4
8002ebba:	c0 a8       	rjmp	8002ebce <__ieee754_pow+0x702>
8002ebbc:	80 03       	ld.sh	r3,r0[0x0]
8002ebbe:	23 a0       	sub	r0,58
8002ebc0:	80 03       	ld.sh	r3,r0[0x0]
8002ebc2:	23 90       	sub	r0,57
8002ebc4:	30 0a       	mov	r10,0
8002ebc6:	fc 1b bf f0 	movh	r11,0xbff0
8002ebca:	fa eb 00 0c 	st.d	sp[12],r10
8002ebce:	0e 99       	mov	r9,r7
8002ebd0:	30 08       	mov	r8,0
8002ebd2:	0e 9b       	mov	r11,r7
8002ebd4:	fa e9 00 04 	st.d	sp[4],r8
8002ebd8:	0c 9a       	mov	r10,r6
8002ebda:	e0 a0 10 7f 	rcall	80030cd8 <__avr32_f64_sub>
8002ebde:	04 98       	mov	r8,r2
8002ebe0:	06 99       	mov	r9,r3
8002ebe2:	e0 a0 0f 8f 	rcall	80030b00 <__avr32_f64_mul>
8002ebe6:	00 98       	mov	r8,r0
8002ebe8:	14 94       	mov	r4,r10
8002ebea:	16 95       	mov	r5,r11
8002ebec:	02 99       	mov	r9,r1
8002ebee:	0e 9b       	mov	r11,r7
8002ebf0:	0c 9a       	mov	r10,r6
8002ebf2:	e0 a0 0f 87 	rcall	80030b00 <__avr32_f64_mul>
8002ebf6:	14 98       	mov	r8,r10
8002ebf8:	16 99       	mov	r9,r11
8002ebfa:	08 9a       	mov	r10,r4
8002ebfc:	0a 9b       	mov	r11,r5
8002ebfe:	e0 a0 11 3b 	rcall	80030e74 <__avr32_f64_add>
8002ec02:	04 98       	mov	r8,r2
8002ec04:	06 99       	mov	r9,r3
8002ec06:	14 90       	mov	r0,r10
8002ec08:	16 91       	mov	r1,r11
8002ec0a:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec0e:	e0 a0 0f 79 	rcall	80030b00 <__avr32_f64_mul>
8002ec12:	14 94       	mov	r4,r10
8002ec14:	16 95       	mov	r5,r11
8002ec16:	08 98       	mov	r8,r4
8002ec18:	00 9a       	mov	r10,r0
8002ec1a:	02 9b       	mov	r11,r1
8002ec1c:	0a 99       	mov	r9,r5
8002ec1e:	fa e5 00 04 	st.d	sp[4],r4
8002ec22:	e0 a0 11 29 	rcall	80030e74 <__avr32_f64_add>
8002ec26:	e0 6e ff ff 	mov	lr,65535
8002ec2a:	ea 1e 40 8f 	orh	lr,0x408f
8002ec2e:	16 93       	mov	r3,r11
8002ec30:	14 92       	mov	r2,r10
8002ec32:	06 97       	mov	r7,r3
8002ec34:	06 98       	mov	r8,r3
8002ec36:	1c 33       	cp.w	r3,lr
8002ec38:	e0 8a 00 36 	brle	8002eca4 <__ieee754_pow+0x7d8>
8002ec3c:	fc 1a bf 70 	movh	r10,0xbf70
8002ec40:	14 08       	add	r8,r10
8002ec42:	f1 e2 10 09 	or	r9,r8,r2
8002ec46:	c1 a1       	brne	8002ec7a <__ieee754_pow+0x7ae>
8002ec48:	e0 68 82 fe 	mov	r8,33534
8002ec4c:	ea 18 65 2b 	orh	r8,0x652b
8002ec50:	e0 69 15 47 	mov	r9,5447
8002ec54:	ea 19 3c 97 	orh	r9,0x3c97
8002ec58:	00 9a       	mov	r10,r0
8002ec5a:	02 9b       	mov	r11,r1
8002ec5c:	e0 a0 11 0c 	rcall	80030e74 <__avr32_f64_add>
8002ec60:	08 98       	mov	r8,r4
8002ec62:	fa eb 00 14 	st.d	sp[20],r10
8002ec66:	0a 99       	mov	r9,r5
8002ec68:	04 9a       	mov	r10,r2
8002ec6a:	06 9b       	mov	r11,r3
8002ec6c:	e0 a0 10 36 	rcall	80030cd8 <__avr32_f64_sub>
8002ec70:	fa e8 00 14 	ld.d	r8,sp[20]
8002ec74:	e0 a0 12 58 	rcall	80031124 <__avr32_f64_cmp_lt>
8002ec78:	c4 40       	breq	8002ed00 <__ieee754_pow+0x834>
8002ec7a:	e0 68 75 9c 	mov	r8,30108
8002ec7e:	ea 18 88 00 	orh	r8,0x8800
8002ec82:	e0 69 e4 3c 	mov	r9,58428
8002ec86:	ea 19 7e 37 	orh	r9,0x7e37
8002ec8a:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ec8e:	e0 a0 0f 39 	rcall	80030b00 <__avr32_f64_mul>
8002ec92:	e0 68 75 9c 	mov	r8,30108
8002ec96:	ea 18 88 00 	orh	r8,0x8800
8002ec9a:	e0 69 e4 3c 	mov	r9,58428
8002ec9e:	ea 19 7e 37 	orh	r9,0x7e37
8002eca2:	c5 59       	rjmp	8002ef4c <__ieee754_pow+0xa80>
8002eca4:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002eca8:	e0 6e cb ff 	mov	lr,52223
8002ecac:	ea 1e 40 90 	orh	lr,0x4090
8002ecb0:	1c 3c       	cp.w	r12,lr
8002ecb2:	e0 8a 00 27 	brle	8002ed00 <__ieee754_pow+0x834>
8002ecb6:	e0 6c 34 00 	mov	r12,13312
8002ecba:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002ecbe:	18 08       	add	r8,r12
8002ecc0:	14 48       	or	r8,r10
8002ecc2:	c0 a1       	brne	8002ecd6 <__ieee754_pow+0x80a>
8002ecc4:	08 98       	mov	r8,r4
8002ecc6:	0a 99       	mov	r9,r5
8002ecc8:	e0 a0 10 08 	rcall	80030cd8 <__avr32_f64_sub>
8002eccc:	00 98       	mov	r8,r0
8002ecce:	02 99       	mov	r9,r1
8002ecd0:	e0 a0 11 f6 	rcall	800310bc <__avr32_f64_cmp_ge>
8002ecd4:	c1 60       	breq	8002ed00 <__ieee754_pow+0x834>
8002ecd6:	e0 68 f3 59 	mov	r8,62297
8002ecda:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ecde:	e0 69 6e 1f 	mov	r9,28191
8002ece2:	ea 19 01 a5 	orh	r9,0x1a5
8002ece6:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ecea:	e0 a0 0f 0b 	rcall	80030b00 <__avr32_f64_mul>
8002ecee:	e0 68 f3 59 	mov	r8,62297
8002ecf2:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ecf6:	e0 69 6e 1f 	mov	r9,28191
8002ecfa:	ea 19 01 a5 	orh	r9,0x1a5
8002ecfe:	c2 79       	rjmp	8002ef4c <__ieee754_pow+0xa80>
8002ed00:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002ed04:	fc 1c 3f e0 	movh	r12,0x3fe0
8002ed08:	18 38       	cp.w	r8,r12
8002ed0a:	e0 89 00 04 	brgt	8002ed12 <__ieee754_pow+0x846>
8002ed0e:	30 06       	mov	r6,0
8002ed10:	c2 78       	rjmp	8002ed5e <__ieee754_pow+0x892>
8002ed12:	fc 19 00 10 	movh	r9,0x10
8002ed16:	b5 48       	asr	r8,0x14
8002ed18:	f0 c8 03 fe 	sub	r8,r8,1022
8002ed1c:	f2 08 08 48 	asr	r8,r9,r8
8002ed20:	0e 08       	add	r8,r7
8002ed22:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002ed26:	b5 a9       	sbr	r9,0x14
8002ed28:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002ed2c:	30 0a       	mov	r10,0
8002ed2e:	f8 cc 03 ff 	sub	r12,r12,1023
8002ed32:	f8 06 11 14 	rsub	r6,r12,20
8002ed36:	f2 06 08 46 	asr	r6,r9,r6
8002ed3a:	ee 79 ff ff 	mov	r9,1048575
8002ed3e:	f2 0c 08 4c 	asr	r12,r9,r12
8002ed42:	5c dc       	com	r12
8002ed44:	f9 e8 00 0b 	and	r11,r12,r8
8002ed48:	58 07       	cp.w	r7,0
8002ed4a:	fb b6 05 00 	rsublt	r6,0
8002ed4e:	14 98       	mov	r8,r10
8002ed50:	16 99       	mov	r9,r11
8002ed52:	08 9a       	mov	r10,r4
8002ed54:	0a 9b       	mov	r11,r5
8002ed56:	e0 a0 0f c1 	rcall	80030cd8 <__avr32_f64_sub>
8002ed5a:	fa eb 00 04 	st.d	sp[4],r10
8002ed5e:	fa e8 00 04 	ld.d	r8,sp[4]
8002ed62:	00 9a       	mov	r10,r0
8002ed64:	02 9b       	mov	r11,r1
8002ed66:	e0 a0 10 87 	rcall	80030e74 <__avr32_f64_add>
8002ed6a:	30 04       	mov	r4,0
8002ed6c:	16 95       	mov	r5,r11
8002ed6e:	30 08       	mov	r8,0
8002ed70:	e0 69 2e 43 	mov	r9,11843
8002ed74:	ea 19 3f e6 	orh	r9,0x3fe6
8002ed78:	08 9a       	mov	r10,r4
8002ed7a:	0a 9b       	mov	r11,r5
8002ed7c:	e0 a0 0e c2 	rcall	80030b00 <__avr32_f64_mul>
8002ed80:	fa e8 00 04 	ld.d	r8,sp[4]
8002ed84:	fa eb 00 14 	st.d	sp[20],r10
8002ed88:	08 9a       	mov	r10,r4
8002ed8a:	0a 9b       	mov	r11,r5
8002ed8c:	e0 a0 0f a6 	rcall	80030cd8 <__avr32_f64_sub>
8002ed90:	14 98       	mov	r8,r10
8002ed92:	16 99       	mov	r9,r11
8002ed94:	00 9a       	mov	r10,r0
8002ed96:	02 9b       	mov	r11,r1
8002ed98:	e0 a0 0f a0 	rcall	80030cd8 <__avr32_f64_sub>
8002ed9c:	e0 68 39 ef 	mov	r8,14831
8002eda0:	ea 18 fe fa 	orh	r8,0xfefa
8002eda4:	e0 69 2e 42 	mov	r9,11842
8002eda8:	ea 19 3f e6 	orh	r9,0x3fe6
8002edac:	e0 a0 0e aa 	rcall	80030b00 <__avr32_f64_mul>
8002edb0:	e0 68 6c 39 	mov	r8,27705
8002edb4:	ea 18 0c a8 	orh	r8,0xca8
8002edb8:	14 92       	mov	r2,r10
8002edba:	16 93       	mov	r3,r11
8002edbc:	08 9a       	mov	r10,r4
8002edbe:	0a 9b       	mov	r11,r5
8002edc0:	e0 69 5c 61 	mov	r9,23649
8002edc4:	ea 19 be 20 	orh	r9,0xbe20
8002edc8:	e0 a0 0e 9c 	rcall	80030b00 <__avr32_f64_mul>
8002edcc:	14 98       	mov	r8,r10
8002edce:	16 99       	mov	r9,r11
8002edd0:	04 9a       	mov	r10,r2
8002edd2:	06 9b       	mov	r11,r3
8002edd4:	e0 a0 10 50 	rcall	80030e74 <__avr32_f64_add>
8002edd8:	16 93       	mov	r3,r11
8002edda:	14 92       	mov	r2,r10
8002eddc:	14 98       	mov	r8,r10
8002edde:	06 99       	mov	r9,r3
8002ede0:	fa ea 00 14 	ld.d	r10,sp[20]
8002ede4:	e0 a0 10 48 	rcall	80030e74 <__avr32_f64_add>
8002ede8:	fa e8 00 14 	ld.d	r8,sp[20]
8002edec:	14 94       	mov	r4,r10
8002edee:	16 95       	mov	r5,r11
8002edf0:	e0 a0 0f 74 	rcall	80030cd8 <__avr32_f64_sub>
8002edf4:	14 98       	mov	r8,r10
8002edf6:	16 99       	mov	r9,r11
8002edf8:	04 9a       	mov	r10,r2
8002edfa:	06 9b       	mov	r11,r3
8002edfc:	e0 a0 0f 6e 	rcall	80030cd8 <__avr32_f64_sub>
8002ee00:	08 98       	mov	r8,r4
8002ee02:	fa eb 00 04 	st.d	sp[4],r10
8002ee06:	0a 99       	mov	r9,r5
8002ee08:	08 9a       	mov	r10,r4
8002ee0a:	0a 9b       	mov	r11,r5
8002ee0c:	e0 a0 0e 7a 	rcall	80030b00 <__avr32_f64_mul>
8002ee10:	e0 68 a4 d0 	mov	r8,42192
8002ee14:	ea 18 72 be 	orh	r8,0x72be
8002ee18:	14 92       	mov	r2,r10
8002ee1a:	16 93       	mov	r3,r11
8002ee1c:	e0 69 37 69 	mov	r9,14185
8002ee20:	ea 19 3e 66 	orh	r9,0x3e66
8002ee24:	e0 a0 0e 6e 	rcall	80030b00 <__avr32_f64_mul>
8002ee28:	e0 68 6b f1 	mov	r8,27633
8002ee2c:	ea 18 c5 d2 	orh	r8,0xc5d2
8002ee30:	e0 69 bd 41 	mov	r9,48449
8002ee34:	ea 19 3e bb 	orh	r9,0x3ebb
8002ee38:	e0 a0 0f 50 	rcall	80030cd8 <__avr32_f64_sub>
8002ee3c:	14 98       	mov	r8,r10
8002ee3e:	16 99       	mov	r9,r11
8002ee40:	04 9a       	mov	r10,r2
8002ee42:	06 9b       	mov	r11,r3
8002ee44:	e0 a0 0e 5e 	rcall	80030b00 <__avr32_f64_mul>
8002ee48:	e0 68 de 2c 	mov	r8,56876
8002ee4c:	ea 18 af 25 	orh	r8,0xaf25
8002ee50:	e0 69 56 6a 	mov	r9,22122
8002ee54:	ea 19 3f 11 	orh	r9,0x3f11
8002ee58:	e0 a0 10 0e 	rcall	80030e74 <__avr32_f64_add>
8002ee5c:	14 98       	mov	r8,r10
8002ee5e:	16 99       	mov	r9,r11
8002ee60:	04 9a       	mov	r10,r2
8002ee62:	06 9b       	mov	r11,r3
8002ee64:	e0 a0 0e 4e 	rcall	80030b00 <__avr32_f64_mul>
8002ee68:	e0 68 bd 93 	mov	r8,48531
8002ee6c:	ea 18 16 be 	orh	r8,0x16be
8002ee70:	e0 69 c1 6c 	mov	r9,49516
8002ee74:	ea 19 3f 66 	orh	r9,0x3f66
8002ee78:	e0 a0 0f 30 	rcall	80030cd8 <__avr32_f64_sub>
8002ee7c:	14 98       	mov	r8,r10
8002ee7e:	16 99       	mov	r9,r11
8002ee80:	04 9a       	mov	r10,r2
8002ee82:	06 9b       	mov	r11,r3
8002ee84:	e0 a0 0e 3e 	rcall	80030b00 <__avr32_f64_mul>
8002ee88:	e0 68 55 3e 	mov	r8,21822
8002ee8c:	ea 18 55 55 	orh	r8,0x5555
8002ee90:	e0 69 55 55 	mov	r9,21845
8002ee94:	ea 19 3f c5 	orh	r9,0x3fc5
8002ee98:	e0 a0 0f ee 	rcall	80030e74 <__avr32_f64_add>
8002ee9c:	14 98       	mov	r8,r10
8002ee9e:	16 99       	mov	r9,r11
8002eea0:	04 9a       	mov	r10,r2
8002eea2:	06 9b       	mov	r11,r3
8002eea4:	e0 a0 0e 2e 	rcall	80030b00 <__avr32_f64_mul>
8002eea8:	14 98       	mov	r8,r10
8002eeaa:	16 99       	mov	r9,r11
8002eeac:	08 9a       	mov	r10,r4
8002eeae:	0a 9b       	mov	r11,r5
8002eeb0:	e0 a0 0f 14 	rcall	80030cd8 <__avr32_f64_sub>
8002eeb4:	16 93       	mov	r3,r11
8002eeb6:	14 92       	mov	r2,r10
8002eeb8:	14 98       	mov	r8,r10
8002eeba:	06 99       	mov	r9,r3
8002eebc:	08 9a       	mov	r10,r4
8002eebe:	0a 9b       	mov	r11,r5
8002eec0:	e0 a0 0e 20 	rcall	80030b00 <__avr32_f64_mul>
8002eec4:	30 08       	mov	r8,0
8002eec6:	14 90       	mov	r0,r10
8002eec8:	16 91       	mov	r1,r11
8002eeca:	04 9a       	mov	r10,r2
8002eecc:	06 9b       	mov	r11,r3
8002eece:	fc 19 40 00 	movh	r9,0x4000
8002eed2:	e0 a0 0f 03 	rcall	80030cd8 <__avr32_f64_sub>
8002eed6:	14 98       	mov	r8,r10
8002eed8:	16 99       	mov	r9,r11
8002eeda:	00 9a       	mov	r10,r0
8002eedc:	02 9b       	mov	r11,r1
8002eede:	e0 a0 11 71 	rcall	800311c0 <__avr32_f64_div>
8002eee2:	fa e8 00 04 	ld.d	r8,sp[4]
8002eee6:	14 92       	mov	r2,r10
8002eee8:	16 93       	mov	r3,r11
8002eeea:	08 9a       	mov	r10,r4
8002eeec:	0a 9b       	mov	r11,r5
8002eeee:	e0 a0 0e 09 	rcall	80030b00 <__avr32_f64_mul>
8002eef2:	14 98       	mov	r8,r10
8002eef4:	16 99       	mov	r9,r11
8002eef6:	fa ea 00 04 	ld.d	r10,sp[4]
8002eefa:	e0 a0 0f bd 	rcall	80030e74 <__avr32_f64_add>
8002eefe:	14 98       	mov	r8,r10
8002ef00:	16 99       	mov	r9,r11
8002ef02:	04 9a       	mov	r10,r2
8002ef04:	06 9b       	mov	r11,r3
8002ef06:	e0 a0 0e e9 	rcall	80030cd8 <__avr32_f64_sub>
8002ef0a:	08 98       	mov	r8,r4
8002ef0c:	0a 99       	mov	r9,r5
8002ef0e:	e0 a0 0e e5 	rcall	80030cd8 <__avr32_f64_sub>
8002ef12:	14 98       	mov	r8,r10
8002ef14:	16 99       	mov	r9,r11
8002ef16:	30 0a       	mov	r10,0
8002ef18:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ef1c:	e0 a0 0e de 	rcall	80030cd8 <__avr32_f64_sub>
8002ef20:	ec 0c 15 14 	lsl	r12,r6,0x14
8002ef24:	16 95       	mov	r5,r11
8002ef26:	14 94       	mov	r4,r10
8002ef28:	f8 05 00 08 	add	r8,r12,r5
8002ef2c:	f0 09 14 14 	asr	r9,r8,0x14
8002ef30:	58 09       	cp.w	r9,0
8002ef32:	e0 89 00 08 	brgt	8002ef42 <__ieee754_pow+0xa76>
8002ef36:	0c 9c       	mov	r12,r6
8002ef38:	e0 a0 0d 60 	rcall	800309f8 <scalbn>
8002ef3c:	14 98       	mov	r8,r10
8002ef3e:	16 99       	mov	r9,r11
8002ef40:	c0 48       	rjmp	8002ef48 <__ieee754_pow+0xa7c>
8002ef42:	10 95       	mov	r5,r8
8002ef44:	14 98       	mov	r8,r10
8002ef46:	0a 99       	mov	r9,r5
8002ef48:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ef4c:	e0 a0 0d da 	rcall	80030b00 <__avr32_f64_mul>
8002ef50:	16 97       	mov	r7,r11
8002ef52:	14 96       	mov	r6,r10
8002ef54:	c0 78       	rjmp	8002ef62 <__ieee754_pow+0xa96>
8002ef56:	fc 17 3f f0 	movh	r7,0x3ff0
8002ef5a:	30 06       	mov	r6,0
8002ef5c:	c0 38       	rjmp	8002ef62 <__ieee754_pow+0xa96>
8002ef5e:	30 07       	mov	r7,0
8002ef60:	0e 96       	mov	r6,r7
8002ef62:	0e 9b       	mov	r11,r7
8002ef64:	0c 9a       	mov	r10,r6
8002ef66:	2f 2d       	sub	sp,-56
8002ef68:	d8 32       	popm	r0-r7,pc
8002ef6a:	30 05       	mov	r5,0
8002ef6c:	fe 9f fb 2b 	bral	8002e5c2 <__ieee754_pow+0xf6>

8002ef70 <__ieee754_rem_pio2>:
8002ef70:	d4 31       	pushm	r0-r7,lr
8002ef72:	20 ad       	sub	sp,40
8002ef74:	50 3b       	stdsp	sp[0xc],r11
8002ef76:	18 96       	mov	r6,r12
8002ef78:	14 98       	mov	r8,r10
8002ef7a:	16 99       	mov	r9,r11
8002ef7c:	14 92       	mov	r2,r10
8002ef7e:	16 93       	mov	r3,r11
8002ef80:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002ef84:	e0 6c 21 fb 	mov	r12,8699
8002ef88:	ea 1c 3f e9 	orh	r12,0x3fe9
8002ef8c:	18 35       	cp.w	r5,r12
8002ef8e:	e0 89 00 0b 	brgt	8002efa4 <__ieee754_rem_pio2+0x34>
8002ef92:	ec e9 00 00 	st.d	r6[0],r8
8002ef96:	30 07       	mov	r7,0
8002ef98:	30 08       	mov	r8,0
8002ef9a:	30 09       	mov	r9,0
8002ef9c:	ec e9 00 08 	st.d	r6[8],r8
8002efa0:	e0 8f 02 1b 	bral	8002f3d6 <__ieee754_rem_pio2+0x466>
8002efa4:	e0 6c d9 7b 	mov	r12,55675
8002efa8:	ea 1c 40 02 	orh	r12,0x4002
8002efac:	18 35       	cp.w	r5,r12
8002efae:	e0 89 00 b6 	brgt	8002f11a <__ieee754_rem_pio2+0x1aa>
8002efb2:	58 0b       	cp.w	r11,0
8002efb4:	e0 8a 00 59 	brle	8002f066 <__ieee754_rem_pio2+0xf6>
8002efb8:	fc 18 54 40 	movh	r8,0x5440
8002efbc:	e0 69 21 fb 	mov	r9,8699
8002efc0:	ea 19 3f f9 	orh	r9,0x3ff9
8002efc4:	e0 a0 0e 8a 	rcall	80030cd8 <__avr32_f64_sub>
8002efc8:	e0 68 21 fb 	mov	r8,8699
8002efcc:	ea 18 3f f9 	orh	r8,0x3ff9
8002efd0:	14 92       	mov	r2,r10
8002efd2:	16 93       	mov	r3,r11
8002efd4:	10 35       	cp.w	r5,r8
8002efd6:	c1 e0       	breq	8002f012 <__ieee754_rem_pio2+0xa2>
8002efd8:	e0 68 63 31 	mov	r8,25393
8002efdc:	ea 18 1a 62 	orh	r8,0x1a62
8002efe0:	e0 69 b4 61 	mov	r9,46177
8002efe4:	ea 19 3d d0 	orh	r9,0x3dd0
8002efe8:	e0 a0 0e 78 	rcall	80030cd8 <__avr32_f64_sub>
8002efec:	14 94       	mov	r4,r10
8002efee:	16 95       	mov	r5,r11
8002eff0:	08 98       	mov	r8,r4
8002eff2:	0a 99       	mov	r9,r5
8002eff4:	04 9a       	mov	r10,r2
8002eff6:	06 9b       	mov	r11,r3
8002eff8:	ec e5 00 00 	st.d	r6[0],r4
8002effc:	e0 a0 0e 6e 	rcall	80030cd8 <__avr32_f64_sub>
8002f000:	e0 68 63 31 	mov	r8,25393
8002f004:	ea 18 1a 62 	orh	r8,0x1a62
8002f008:	e0 69 b4 61 	mov	r9,46177
8002f00c:	ea 19 3d d0 	orh	r9,0x3dd0
8002f010:	c2 78       	rjmp	8002f05e <__ieee754_rem_pio2+0xee>
8002f012:	fc 18 1a 60 	movh	r8,0x1a60
8002f016:	e0 69 b4 61 	mov	r9,46177
8002f01a:	ea 19 3d d0 	orh	r9,0x3dd0
8002f01e:	e0 a0 0e 5d 	rcall	80030cd8 <__avr32_f64_sub>
8002f022:	e0 68 70 73 	mov	r8,28787
8002f026:	ea 18 2e 03 	orh	r8,0x2e03
8002f02a:	14 94       	mov	r4,r10
8002f02c:	16 95       	mov	r5,r11
8002f02e:	e0 69 19 8a 	mov	r9,6538
8002f032:	ea 19 3b a3 	orh	r9,0x3ba3
8002f036:	e0 a0 0e 51 	rcall	80030cd8 <__avr32_f64_sub>
8002f03a:	14 92       	mov	r2,r10
8002f03c:	16 93       	mov	r3,r11
8002f03e:	04 98       	mov	r8,r2
8002f040:	06 99       	mov	r9,r3
8002f042:	08 9a       	mov	r10,r4
8002f044:	0a 9b       	mov	r11,r5
8002f046:	ec e3 00 00 	st.d	r6[0],r2
8002f04a:	e0 a0 0e 47 	rcall	80030cd8 <__avr32_f64_sub>
8002f04e:	e0 68 70 73 	mov	r8,28787
8002f052:	ea 18 2e 03 	orh	r8,0x2e03
8002f056:	e0 69 19 8a 	mov	r9,6538
8002f05a:	ea 19 3b a3 	orh	r9,0x3ba3
8002f05e:	30 17       	mov	r7,1
8002f060:	e0 a0 0e 3c 	rcall	80030cd8 <__avr32_f64_sub>
8002f064:	c3 08       	rjmp	8002f0c4 <__ieee754_rem_pio2+0x154>
8002f066:	fc 18 54 40 	movh	r8,0x5440
8002f06a:	e0 69 21 fb 	mov	r9,8699
8002f06e:	ea 19 3f f9 	orh	r9,0x3ff9
8002f072:	e0 a0 0f 01 	rcall	80030e74 <__avr32_f64_add>
8002f076:	e0 6c 21 fb 	mov	r12,8699
8002f07a:	ea 1c 3f f9 	orh	r12,0x3ff9
8002f07e:	14 92       	mov	r2,r10
8002f080:	16 93       	mov	r3,r11
8002f082:	18 35       	cp.w	r5,r12
8002f084:	c2 40       	breq	8002f0cc <__ieee754_rem_pio2+0x15c>
8002f086:	e0 68 63 31 	mov	r8,25393
8002f08a:	ea 18 1a 62 	orh	r8,0x1a62
8002f08e:	e0 69 b4 61 	mov	r9,46177
8002f092:	ea 19 3d d0 	orh	r9,0x3dd0
8002f096:	e0 a0 0e ef 	rcall	80030e74 <__avr32_f64_add>
8002f09a:	14 94       	mov	r4,r10
8002f09c:	16 95       	mov	r5,r11
8002f09e:	08 98       	mov	r8,r4
8002f0a0:	0a 99       	mov	r9,r5
8002f0a2:	04 9a       	mov	r10,r2
8002f0a4:	06 9b       	mov	r11,r3
8002f0a6:	ec e5 00 00 	st.d	r6[0],r4
8002f0aa:	e0 a0 0e 17 	rcall	80030cd8 <__avr32_f64_sub>
8002f0ae:	e0 68 63 31 	mov	r8,25393
8002f0b2:	ea 18 1a 62 	orh	r8,0x1a62
8002f0b6:	e0 69 b4 61 	mov	r9,46177
8002f0ba:	ea 19 3d d0 	orh	r9,0x3dd0
8002f0be:	3f f7       	mov	r7,-1
8002f0c0:	e0 a0 0e da 	rcall	80030e74 <__avr32_f64_add>
8002f0c4:	ec eb 00 08 	st.d	r6[8],r10
8002f0c8:	e0 8f 01 87 	bral	8002f3d6 <__ieee754_rem_pio2+0x466>
8002f0cc:	fc 18 1a 60 	movh	r8,0x1a60
8002f0d0:	e0 69 b4 61 	mov	r9,46177
8002f0d4:	ea 19 3d d0 	orh	r9,0x3dd0
8002f0d8:	e0 a0 0e ce 	rcall	80030e74 <__avr32_f64_add>
8002f0dc:	e0 68 70 73 	mov	r8,28787
8002f0e0:	ea 18 2e 03 	orh	r8,0x2e03
8002f0e4:	14 94       	mov	r4,r10
8002f0e6:	16 95       	mov	r5,r11
8002f0e8:	e0 69 19 8a 	mov	r9,6538
8002f0ec:	ea 19 3b a3 	orh	r9,0x3ba3
8002f0f0:	e0 a0 0e c2 	rcall	80030e74 <__avr32_f64_add>
8002f0f4:	14 92       	mov	r2,r10
8002f0f6:	16 93       	mov	r3,r11
8002f0f8:	04 98       	mov	r8,r2
8002f0fa:	06 99       	mov	r9,r3
8002f0fc:	08 9a       	mov	r10,r4
8002f0fe:	0a 9b       	mov	r11,r5
8002f100:	ec e3 00 00 	st.d	r6[0],r2
8002f104:	e0 a0 0d ea 	rcall	80030cd8 <__avr32_f64_sub>
8002f108:	e0 68 70 73 	mov	r8,28787
8002f10c:	ea 18 2e 03 	orh	r8,0x2e03
8002f110:	e0 69 19 8a 	mov	r9,6538
8002f114:	ea 19 3b a3 	orh	r9,0x3ba3
8002f118:	cd 3b       	rjmp	8002f0be <__ieee754_rem_pio2+0x14e>
8002f11a:	e0 6c 21 fb 	mov	r12,8699
8002f11e:	ea 1c 41 39 	orh	r12,0x4139
8002f122:	18 35       	cp.w	r5,r12
8002f124:	e0 89 00 f4 	brgt	8002f30c <__ieee754_rem_pio2+0x39c>
8002f128:	e0 a0 0b 2c 	rcall	80030780 <fabs>
8002f12c:	e0 68 c8 83 	mov	r8,51331
8002f130:	ea 18 6d c9 	orh	r8,0x6dc9
8002f134:	14 92       	mov	r2,r10
8002f136:	16 93       	mov	r3,r11
8002f138:	e0 69 5f 30 	mov	r9,24368
8002f13c:	ea 19 3f e4 	orh	r9,0x3fe4
8002f140:	e0 a0 0c e0 	rcall	80030b00 <__avr32_f64_mul>
8002f144:	30 08       	mov	r8,0
8002f146:	fc 19 3f e0 	movh	r9,0x3fe0
8002f14a:	e0 a0 0e 95 	rcall	80030e74 <__avr32_f64_add>
8002f14e:	e0 a0 0f 1d 	rcall	80030f88 <__avr32_f64_to_s32>
8002f152:	18 97       	mov	r7,r12
8002f154:	e0 a0 0f 31 	rcall	80030fb6 <__avr32_s32_to_f64>
8002f158:	fc 18 54 40 	movh	r8,0x5440
8002f15c:	e0 69 21 fb 	mov	r9,8699
8002f160:	ea 19 bf f9 	orh	r9,0xbff9
8002f164:	fa eb 00 04 	st.d	sp[4],r10
8002f168:	e0 a0 0c cc 	rcall	80030b00 <__avr32_f64_mul>
8002f16c:	14 98       	mov	r8,r10
8002f16e:	16 99       	mov	r9,r11
8002f170:	04 9a       	mov	r10,r2
8002f172:	06 9b       	mov	r11,r3
8002f174:	e0 a0 0e 80 	rcall	80030e74 <__avr32_f64_add>
8002f178:	e0 68 63 31 	mov	r8,25393
8002f17c:	ea 18 1a 62 	orh	r8,0x1a62
8002f180:	14 92       	mov	r2,r10
8002f182:	16 93       	mov	r3,r11
8002f184:	e0 69 b4 61 	mov	r9,46177
8002f188:	ea 19 3d d0 	orh	r9,0x3dd0
8002f18c:	fa ea 00 04 	ld.d	r10,sp[4]
8002f190:	e0 a0 0c b8 	rcall	80030b00 <__avr32_f64_mul>
8002f194:	14 90       	mov	r0,r10
8002f196:	16 91       	mov	r1,r11
8002f198:	59 f7       	cp.w	r7,31
8002f19a:	e0 89 00 0a 	brgt	8002f1ae <__ieee754_rem_pio2+0x23e>
8002f19e:	ee c9 00 01 	sub	r9,r7,1
8002f1a2:	4d a8       	lddpc	r8,8002f308 <__ieee754_rem_pio2+0x398>
8002f1a4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002f1a8:	10 35       	cp.w	r5,r8
8002f1aa:	e0 81 00 8b 	brne	8002f2c0 <__ieee754_rem_pio2+0x350>
8002f1ae:	00 98       	mov	r8,r0
8002f1b0:	02 99       	mov	r9,r1
8002f1b2:	04 9a       	mov	r10,r2
8002f1b4:	06 9b       	mov	r11,r3
8002f1b6:	e0 a0 0d 91 	rcall	80030cd8 <__avr32_f64_sub>
8002f1ba:	ec eb 00 00 	st.d	r6[0],r10
8002f1be:	ea 0c 14 14 	asr	r12,r5,0x14
8002f1c2:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f1c6:	f8 0b 01 0b 	sub	r11,r12,r11
8002f1ca:	59 0b       	cp.w	r11,16
8002f1cc:	e0 8a 00 82 	brle	8002f2d0 <__ieee754_rem_pio2+0x360>
8002f1d0:	50 0c       	stdsp	sp[0x0],r12
8002f1d2:	fc 18 1a 60 	movh	r8,0x1a60
8002f1d6:	e0 69 b4 61 	mov	r9,46177
8002f1da:	ea 19 3d d0 	orh	r9,0x3dd0
8002f1de:	fa ea 00 04 	ld.d	r10,sp[4]
8002f1e2:	e0 a0 0c 8f 	rcall	80030b00 <__avr32_f64_mul>
8002f1e6:	16 91       	mov	r1,r11
8002f1e8:	14 90       	mov	r0,r10
8002f1ea:	14 98       	mov	r8,r10
8002f1ec:	02 99       	mov	r9,r1
8002f1ee:	04 9a       	mov	r10,r2
8002f1f0:	06 9b       	mov	r11,r3
8002f1f2:	e0 a0 0d 73 	rcall	80030cd8 <__avr32_f64_sub>
8002f1f6:	16 95       	mov	r5,r11
8002f1f8:	14 98       	mov	r8,r10
8002f1fa:	14 94       	mov	r4,r10
8002f1fc:	0a 99       	mov	r9,r5
8002f1fe:	04 9a       	mov	r10,r2
8002f200:	06 9b       	mov	r11,r3
8002f202:	e0 a0 0d 6b 	rcall	80030cd8 <__avr32_f64_sub>
8002f206:	00 98       	mov	r8,r0
8002f208:	02 99       	mov	r9,r1
8002f20a:	e0 a0 0d 67 	rcall	80030cd8 <__avr32_f64_sub>
8002f20e:	e0 68 70 73 	mov	r8,28787
8002f212:	ea 18 2e 03 	orh	r8,0x2e03
8002f216:	14 92       	mov	r2,r10
8002f218:	16 93       	mov	r3,r11
8002f21a:	e0 69 19 8a 	mov	r9,6538
8002f21e:	ea 19 3b a3 	orh	r9,0x3ba3
8002f222:	fa ea 00 04 	ld.d	r10,sp[4]
8002f226:	e0 a0 0c 6d 	rcall	80030b00 <__avr32_f64_mul>
8002f22a:	04 98       	mov	r8,r2
8002f22c:	06 99       	mov	r9,r3
8002f22e:	e0 a0 0d 55 	rcall	80030cd8 <__avr32_f64_sub>
8002f232:	16 91       	mov	r1,r11
8002f234:	14 98       	mov	r8,r10
8002f236:	14 90       	mov	r0,r10
8002f238:	02 99       	mov	r9,r1
8002f23a:	08 9a       	mov	r10,r4
8002f23c:	0a 9b       	mov	r11,r5
8002f23e:	e0 a0 0d 4d 	rcall	80030cd8 <__avr32_f64_sub>
8002f242:	ec eb 00 00 	st.d	r6[0],r10
8002f246:	40 0c       	lddsp	r12,sp[0x0]
8002f248:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f24c:	16 1c       	sub	r12,r11
8002f24e:	e0 4c 00 31 	cp.w	r12,49
8002f252:	e0 89 00 05 	brgt	8002f25c <__ieee754_rem_pio2+0x2ec>
8002f256:	08 92       	mov	r2,r4
8002f258:	0a 93       	mov	r3,r5
8002f25a:	c3 b8       	rjmp	8002f2d0 <__ieee754_rem_pio2+0x360>
8002f25c:	fc 18 2e 00 	movh	r8,0x2e00
8002f260:	e0 69 19 8a 	mov	r9,6538
8002f264:	ea 19 3b a3 	orh	r9,0x3ba3
8002f268:	fa ea 00 04 	ld.d	r10,sp[4]
8002f26c:	e0 a0 0c 4a 	rcall	80030b00 <__avr32_f64_mul>
8002f270:	16 91       	mov	r1,r11
8002f272:	14 90       	mov	r0,r10
8002f274:	14 98       	mov	r8,r10
8002f276:	02 99       	mov	r9,r1
8002f278:	08 9a       	mov	r10,r4
8002f27a:	0a 9b       	mov	r11,r5
8002f27c:	e0 a0 0d 2e 	rcall	80030cd8 <__avr32_f64_sub>
8002f280:	14 98       	mov	r8,r10
8002f282:	16 93       	mov	r3,r11
8002f284:	14 92       	mov	r2,r10
8002f286:	06 99       	mov	r9,r3
8002f288:	08 9a       	mov	r10,r4
8002f28a:	0a 9b       	mov	r11,r5
8002f28c:	e0 a0 0d 26 	rcall	80030cd8 <__avr32_f64_sub>
8002f290:	00 98       	mov	r8,r0
8002f292:	02 99       	mov	r9,r1
8002f294:	e0 a0 0d 22 	rcall	80030cd8 <__avr32_f64_sub>
8002f298:	e0 68 49 c1 	mov	r8,18881
8002f29c:	ea 18 25 20 	orh	r8,0x2520
8002f2a0:	14 94       	mov	r4,r10
8002f2a2:	16 95       	mov	r5,r11
8002f2a4:	e0 69 83 9a 	mov	r9,33690
8002f2a8:	ea 19 39 7b 	orh	r9,0x397b
8002f2ac:	fa ea 00 04 	ld.d	r10,sp[4]
8002f2b0:	e0 a0 0c 28 	rcall	80030b00 <__avr32_f64_mul>
8002f2b4:	08 98       	mov	r8,r4
8002f2b6:	0a 99       	mov	r9,r5
8002f2b8:	e0 a0 0d 10 	rcall	80030cd8 <__avr32_f64_sub>
8002f2bc:	14 90       	mov	r0,r10
8002f2be:	16 91       	mov	r1,r11
8002f2c0:	00 98       	mov	r8,r0
8002f2c2:	02 99       	mov	r9,r1
8002f2c4:	04 9a       	mov	r10,r2
8002f2c6:	06 9b       	mov	r11,r3
8002f2c8:	e0 a0 0d 08 	rcall	80030cd8 <__avr32_f64_sub>
8002f2cc:	ec eb 00 00 	st.d	r6[0],r10
8002f2d0:	ec e8 00 00 	ld.d	r8,r6[0]
8002f2d4:	04 9a       	mov	r10,r2
8002f2d6:	06 9b       	mov	r11,r3
8002f2d8:	e0 a0 0d 00 	rcall	80030cd8 <__avr32_f64_sub>
8002f2dc:	00 98       	mov	r8,r0
8002f2de:	ec c5 ff f8 	sub	r5,r6,-8
8002f2e2:	02 99       	mov	r9,r1
8002f2e4:	e0 a0 0c fa 	rcall	80030cd8 <__avr32_f64_sub>
8002f2e8:	ea eb 00 00 	st.d	r5[0],r10
8002f2ec:	40 38       	lddsp	r8,sp[0xc]
8002f2ee:	58 08       	cp.w	r8,0
8002f2f0:	c7 34       	brge	8002f3d6 <__ieee754_rem_pio2+0x466>
8002f2f2:	6c 08       	ld.w	r8,r6[0x0]
8002f2f4:	ee 18 80 00 	eorh	r8,0x8000
8002f2f8:	8d 08       	st.w	r6[0x0],r8
8002f2fa:	5c 37       	neg	r7
8002f2fc:	6a 08       	ld.w	r8,r5[0x0]
8002f2fe:	ee 18 80 00 	eorh	r8,0x8000
8002f302:	8b 08       	st.w	r5[0x0],r8
8002f304:	c6 98       	rjmp	8002f3d6 <__ieee754_rem_pio2+0x466>
8002f306:	d7 03       	nop
8002f308:	80 03       	ld.sh	r3,r0[0x0]
8002f30a:	23 c0       	sub	r0,60
8002f30c:	e0 6c ff ff 	mov	r12,65535
8002f310:	ea 1c 7f ef 	orh	r12,0x7fef
8002f314:	18 35       	cp.w	r5,r12
8002f316:	e0 8a 00 08 	brle	8002f326 <__ieee754_rem_pio2+0x3b6>
8002f31a:	30 07       	mov	r7,0
8002f31c:	e0 a0 0c de 	rcall	80030cd8 <__avr32_f64_sub>
8002f320:	ec eb 00 00 	st.d	r6[0],r10
8002f324:	cd 0a       	rjmp	8002f0c4 <__ieee754_rem_pio2+0x154>
8002f326:	ea 03 14 14 	asr	r3,r5,0x14
8002f32a:	e6 c3 04 16 	sub	r3,r3,1046
8002f32e:	e6 08 15 14 	lsl	r8,r3,0x14
8002f332:	ea 08 01 01 	sub	r1,r5,r8
8002f336:	02 9b       	mov	r11,r1
8002f338:	e0 a0 0e 28 	rcall	80030f88 <__avr32_f64_to_s32>
8002f33c:	e0 a0 0e 3d 	rcall	80030fb6 <__avr32_s32_to_f64>
8002f340:	14 94       	mov	r4,r10
8002f342:	16 95       	mov	r5,r11
8002f344:	08 98       	mov	r8,r4
8002f346:	0a 99       	mov	r9,r5
8002f348:	fa e5 00 10 	st.d	sp[16],r4
8002f34c:	02 9b       	mov	r11,r1
8002f34e:	04 9a       	mov	r10,r2
8002f350:	e0 a0 0c c4 	rcall	80030cd8 <__avr32_f64_sub>
8002f354:	30 08       	mov	r8,0
8002f356:	fc 19 41 70 	movh	r9,0x4170
8002f35a:	e0 a0 0b d3 	rcall	80030b00 <__avr32_f64_mul>
8002f35e:	14 90       	mov	r0,r10
8002f360:	16 91       	mov	r1,r11
8002f362:	e0 a0 0e 13 	rcall	80030f88 <__avr32_f64_to_s32>
8002f366:	e0 a0 0e 28 	rcall	80030fb6 <__avr32_s32_to_f64>
8002f36a:	16 95       	mov	r5,r11
8002f36c:	14 94       	mov	r4,r10
8002f36e:	0a 99       	mov	r9,r5
8002f370:	08 98       	mov	r8,r4
8002f372:	fa e5 00 18 	st.d	sp[24],r4
8002f376:	00 9a       	mov	r10,r0
8002f378:	02 9b       	mov	r11,r1
8002f37a:	e0 a0 0c af 	rcall	80030cd8 <__avr32_f64_sub>
8002f37e:	30 08       	mov	r8,0
8002f380:	fc 19 41 70 	movh	r9,0x4170
8002f384:	30 35       	mov	r5,3
8002f386:	e0 a0 0b bd 	rcall	80030b00 <__avr32_f64_mul>
8002f38a:	fa c7 ff d8 	sub	r7,sp,-40
8002f38e:	af 2b       	st.d	--r7,r10
8002f390:	ee ea 00 00 	ld.d	r10,r7[0]
8002f394:	0a 91       	mov	r1,r5
8002f396:	20 87       	sub	r7,8
8002f398:	20 15       	sub	r5,1
8002f39a:	30 08       	mov	r8,0
8002f39c:	30 09       	mov	r9,0
8002f39e:	e0 a0 0e 7c 	rcall	80031096 <__avr32_f64_cmp_eq>
8002f3a2:	cf 71       	brne	8002f390 <__ieee754_rem_pio2+0x420>
8002f3a4:	48 e8       	lddpc	r8,8002f3dc <__ieee754_rem_pio2+0x46c>
8002f3a6:	02 99       	mov	r9,r1
8002f3a8:	1a d8       	st.w	--sp,r8
8002f3aa:	06 9a       	mov	r10,r3
8002f3ac:	30 28       	mov	r8,2
8002f3ae:	fa cc ff ec 	sub	r12,sp,-20
8002f3b2:	0c 9b       	mov	r11,r6
8002f3b4:	e0 a0 04 06 	rcall	8002fbc0 <__kernel_rem_pio2>
8002f3b8:	2f fd       	sub	sp,-4
8002f3ba:	18 97       	mov	r7,r12
8002f3bc:	40 38       	lddsp	r8,sp[0xc]
8002f3be:	58 08       	cp.w	r8,0
8002f3c0:	c0 b4       	brge	8002f3d6 <__ieee754_rem_pio2+0x466>
8002f3c2:	6c 08       	ld.w	r8,r6[0x0]
8002f3c4:	ee 18 80 00 	eorh	r8,0x8000
8002f3c8:	8d 08       	st.w	r6[0x0],r8
8002f3ca:	5c 37       	neg	r7
8002f3cc:	2f 86       	sub	r6,-8
8002f3ce:	6c 08       	ld.w	r8,r6[0x0]
8002f3d0:	ee 18 80 00 	eorh	r8,0x8000
8002f3d4:	8d 08       	st.w	r6[0x0],r8
8002f3d6:	0e 9c       	mov	r12,r7
8002f3d8:	2f 6d       	sub	sp,-40
8002f3da:	d8 32       	popm	r0-r7,pc
8002f3dc:	80 03       	ld.sh	r3,r0[0x0]
8002f3de:	24 40       	sub	r0,68

8002f3e0 <__ieee754_sqrt>:
8002f3e0:	d4 31       	pushm	r0-r7,lr
8002f3e2:	fc 1e 7f f0 	movh	lr,0x7ff0
8002f3e6:	16 9c       	mov	r12,r11
8002f3e8:	14 96       	mov	r6,r10
8002f3ea:	16 97       	mov	r7,r11
8002f3ec:	14 94       	mov	r4,r10
8002f3ee:	16 95       	mov	r5,r11
8002f3f0:	16 99       	mov	r9,r11
8002f3f2:	14 98       	mov	r8,r10
8002f3f4:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002f3f8:	1c 3c       	cp.w	r12,lr
8002f3fa:	c0 c1       	brne	8002f412 <__ieee754_sqrt+0x32>
8002f3fc:	14 98       	mov	r8,r10
8002f3fe:	16 99       	mov	r9,r11
8002f400:	e0 a0 0b 80 	rcall	80030b00 <__avr32_f64_mul>
8002f404:	14 98       	mov	r8,r10
8002f406:	16 99       	mov	r9,r11
8002f408:	0c 9a       	mov	r10,r6
8002f40a:	0e 9b       	mov	r11,r7
8002f40c:	e0 a0 0d 34 	rcall	80030e74 <__avr32_f64_add>
8002f410:	c1 38       	rjmp	8002f436 <__ieee754_sqrt+0x56>
8002f412:	58 0b       	cp.w	r11,0
8002f414:	e0 89 00 14 	brgt	8002f43c <__ieee754_sqrt+0x5c>
8002f418:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002f41c:	14 4c       	or	r12,r10
8002f41e:	e0 80 00 a3 	breq	8002f564 <__ieee754_sqrt+0x184>
8002f422:	58 0b       	cp.w	r11,0
8002f424:	c0 c0       	breq	8002f43c <__ieee754_sqrt+0x5c>
8002f426:	14 98       	mov	r8,r10
8002f428:	16 99       	mov	r9,r11
8002f42a:	e0 a0 0c 57 	rcall	80030cd8 <__avr32_f64_sub>
8002f42e:	14 98       	mov	r8,r10
8002f430:	16 99       	mov	r9,r11
8002f432:	e0 a0 0e c7 	rcall	800311c0 <__avr32_f64_div>
8002f436:	14 96       	mov	r6,r10
8002f438:	16 97       	mov	r7,r11
8002f43a:	c9 58       	rjmp	8002f564 <__ieee754_sqrt+0x184>
8002f43c:	f2 0a 14 14 	asr	r10,r9,0x14
8002f440:	c0 60       	breq	8002f44c <__ieee754_sqrt+0x6c>
8002f442:	c1 88       	rjmp	8002f472 <__ieee754_sqrt+0x92>
8002f444:	f0 09 16 0b 	lsr	r9,r8,0xb
8002f448:	21 5a       	sub	r10,21
8002f44a:	b5 78       	lsl	r8,0x15
8002f44c:	58 09       	cp.w	r9,0
8002f44e:	cf b0       	breq	8002f444 <__ieee754_sqrt+0x64>
8002f450:	30 0b       	mov	r11,0
8002f452:	c0 38       	rjmp	8002f458 <__ieee754_sqrt+0x78>
8002f454:	a1 79       	lsl	r9,0x1
8002f456:	2f fb       	sub	r11,-1
8002f458:	ed b9 00 14 	bld	r9,0x14
8002f45c:	cf c1       	brne	8002f454 <__ieee754_sqrt+0x74>
8002f45e:	2f fa       	sub	r10,-1
8002f460:	f6 0c 11 20 	rsub	r12,r11,32
8002f464:	16 1a       	sub	r10,r11
8002f466:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002f46a:	f0 0b 09 48 	lsl	r8,r8,r11
8002f46e:	f9 e9 10 09 	or	r9,r12,r9
8002f472:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002f476:	f4 c6 03 ff 	sub	r6,r10,1023
8002f47a:	b5 a9       	sbr	r9,0x14
8002f47c:	ed b6 00 00 	bld	r6,0x0
8002f480:	c0 61       	brne	8002f48c <__ieee754_sqrt+0xac>
8002f482:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002f486:	a1 78       	lsl	r8,0x1
8002f488:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002f48c:	30 07       	mov	r7,0
8002f48e:	f0 0a 15 01 	lsl	r10,r8,0x1
8002f492:	0e 9c       	mov	r12,r7
8002f494:	bf 98       	lsr	r8,0x1f
8002f496:	fc 1b 00 20 	movh	r11,0x20
8002f49a:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002f49e:	0e 99       	mov	r9,r7
8002f4a0:	f2 0b 00 0e 	add	lr,r9,r11
8002f4a4:	2f f7       	sub	r7,-1
8002f4a6:	10 3e       	cp.w	lr,r8
8002f4a8:	f1 de ea 18 	suble	r8,r8,lr
8002f4ac:	f9 db ea 0c 	addle	r12,r12,r11
8002f4b0:	fd db ea 09 	addle	r9,lr,r11
8002f4b4:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f4b8:	a1 9b       	lsr	r11,0x1
8002f4ba:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f4be:	a1 7a       	lsl	r10,0x1
8002f4c0:	59 67       	cp.w	r7,22
8002f4c2:	ce f1       	brne	8002f4a0 <__ieee754_sqrt+0xc0>
8002f4c4:	30 07       	mov	r7,0
8002f4c6:	fc 15 80 00 	movh	r5,0x8000
8002f4ca:	0e 9b       	mov	r11,r7
8002f4cc:	0e 94       	mov	r4,r7
8002f4ce:	0e 92       	mov	r2,r7
8002f4d0:	ea 04 00 0e 	add	lr,r5,r4
8002f4d4:	10 39       	cp.w	r9,r8
8002f4d6:	c0 95       	brlt	8002f4e8 <__ieee754_sqrt+0x108>
8002f4d8:	5f 03       	sreq	r3
8002f4da:	14 3e       	cp.w	lr,r10
8002f4dc:	5f 81       	srls	r1
8002f4de:	e3 e3 00 03 	and	r3,r1,r3
8002f4e2:	e4 03 18 00 	cp.b	r3,r2
8002f4e6:	c1 70       	breq	8002f514 <__ieee754_sqrt+0x134>
8002f4e8:	1c 93       	mov	r3,lr
8002f4ea:	fc 05 00 04 	add	r4,lr,r5
8002f4ee:	e6 13 80 00 	andh	r3,0x8000,COH
8002f4f2:	fc 11 80 00 	movh	r1,0x8000
8002f4f6:	02 33       	cp.w	r3,r1
8002f4f8:	c0 61       	brne	8002f504 <__ieee754_sqrt+0x124>
8002f4fa:	58 04       	cp.w	r4,0
8002f4fc:	c0 45       	brlt	8002f504 <__ieee754_sqrt+0x124>
8002f4fe:	f2 c3 ff ff 	sub	r3,r9,-1
8002f502:	c0 28       	rjmp	8002f506 <__ieee754_sqrt+0x126>
8002f504:	12 93       	mov	r3,r9
8002f506:	12 18       	sub	r8,r9
8002f508:	0a 0b       	add	r11,r5
8002f50a:	1c 3a       	cp.w	r10,lr
8002f50c:	f7 b8 03 01 	sublo	r8,1
8002f510:	06 99       	mov	r9,r3
8002f512:	1c 1a       	sub	r10,lr
8002f514:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f518:	a1 95       	lsr	r5,0x1
8002f51a:	2f f7       	sub	r7,-1
8002f51c:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f520:	a1 7a       	lsl	r10,0x1
8002f522:	e0 47 00 20 	cp.w	r7,32
8002f526:	cd 51       	brne	8002f4d0 <__ieee754_sqrt+0xf0>
8002f528:	14 48       	or	r8,r10
8002f52a:	c0 a0       	breq	8002f53e <__ieee754_sqrt+0x15e>
8002f52c:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002f530:	5b fb       	cp.w	r11,-1
8002f532:	f7 bc 00 ff 	subeq	r12,-1
8002f536:	f9 bb 00 00 	moveq	r11,0
8002f53a:	f1 db e1 0b 	addne	r11,r8,r11
8002f53e:	a1 9b       	lsr	r11,0x1
8002f540:	16 99       	mov	r9,r11
8002f542:	bf b9       	sbr	r9,0x1f
8002f544:	ec 0a 14 01 	asr	r10,r6,0x1
8002f548:	f8 08 14 01 	asr	r8,r12,0x1
8002f54c:	b5 6a       	lsl	r10,0x14
8002f54e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002f552:	f2 0b 17 10 	movne	r11,r9
8002f556:	fc 19 3f e0 	movh	r9,0x3fe0
8002f55a:	16 96       	mov	r6,r11
8002f55c:	12 0a       	add	r10,r9
8002f55e:	f4 08 00 08 	add	r8,r10,r8
8002f562:	10 97       	mov	r7,r8
8002f564:	0c 9a       	mov	r10,r6
8002f566:	0e 9b       	mov	r11,r7
8002f568:	d8 32       	popm	r0-r7,pc
8002f56a:	d7 03       	nop

8002f56c <__ieee754_acosf>:
8002f56c:	d4 21       	pushm	r4-r7,lr
8002f56e:	fc 1a 3f 80 	movh	r10,0x3f80
8002f572:	18 96       	mov	r6,r12
8002f574:	f1 dc c0 1f 	bfextu	r8,r12,0x0,0x1f
8002f578:	14 38       	cp.w	r8,r10
8002f57a:	c0 a1       	brne	8002f58e <__ieee754_acosf+0x22>
8002f57c:	e0 6c 0f db 	mov	r12,4059
8002f580:	ea 1c 40 49 	orh	r12,0x4049
8002f584:	30 08       	mov	r8,0
8002f586:	58 06       	cp.w	r6,0
8002f588:	f0 0c 17 90 	movgt	r12,r8
8002f58c:	d8 22       	popm	r4-r7,pc
8002f58e:	fc 1a 3f 80 	movh	r10,0x3f80
8002f592:	14 38       	cp.w	r8,r10
8002f594:	e0 8a 00 09 	brle	8002f5a6 <__ieee754_acosf+0x3a>
8002f598:	18 9b       	mov	r11,r12
8002f59a:	e0 a0 10 51 	rcall	8003163c <__avr32_f32_sub>
8002f59e:	18 9b       	mov	r11,r12
8002f5a0:	e0 a0 0f 9c 	rcall	800314d8 <__avr32_f32_div>
8002f5a4:	d8 22       	popm	r4-r7,pc
8002f5a6:	e0 6a ff ff 	mov	r10,65535
8002f5aa:	ea 1a 3e ff 	orh	r10,0x3eff
8002f5ae:	14 38       	cp.w	r8,r10
8002f5b0:	e0 89 00 8d 	brgt	8002f6ca <__ieee754_acosf+0x15e>
8002f5b4:	fc 19 23 00 	movh	r9,0x2300
8002f5b8:	12 38       	cp.w	r8,r9
8002f5ba:	e0 89 00 07 	brgt	8002f5c8 <__ieee754_acosf+0x5c>
8002f5be:	e0 6c 0f db 	mov	r12,4059
8002f5c2:	ea 1c 3f c9 	orh	r12,0x3fc9
8002f5c6:	d8 22       	popm	r4-r7,pc
8002f5c8:	18 9b       	mov	r11,r12
8002f5ca:	e0 a0 10 f7 	rcall	800317b8 <__avr32_f32_mul>
8002f5ce:	e0 6b ef 08 	mov	r11,61192
8002f5d2:	ea 1b 38 11 	orh	r11,0x3811
8002f5d6:	18 97       	mov	r7,r12
8002f5d8:	e0 a0 10 f0 	rcall	800317b8 <__avr32_f32_mul>
8002f5dc:	e0 6b 7f 04 	mov	r11,32516
8002f5e0:	ea 1b 3a 4f 	orh	r11,0x3a4f
8002f5e4:	e0 a0 10 94 	rcall	8003170c <__avr32_f32_add>
8002f5e8:	18 9b       	mov	r11,r12
8002f5ea:	0e 9c       	mov	r12,r7
8002f5ec:	e0 a0 10 e6 	rcall	800317b8 <__avr32_f32_mul>
8002f5f0:	e0 6b 11 46 	mov	r11,4422
8002f5f4:	ea 1b 3d 24 	orh	r11,0x3d24
8002f5f8:	e0 a0 10 22 	rcall	8003163c <__avr32_f32_sub>
8002f5fc:	18 9b       	mov	r11,r12
8002f5fe:	0e 9c       	mov	r12,r7
8002f600:	e0 a0 10 dc 	rcall	800317b8 <__avr32_f32_mul>
8002f604:	e0 6b 0a a8 	mov	r11,2728
8002f608:	ea 1b 3e 4e 	orh	r11,0x3e4e
8002f60c:	e0 a0 10 80 	rcall	8003170c <__avr32_f32_add>
8002f610:	18 9b       	mov	r11,r12
8002f612:	0e 9c       	mov	r12,r7
8002f614:	e0 a0 10 d2 	rcall	800317b8 <__avr32_f32_mul>
8002f618:	e0 6b b0 90 	mov	r11,45200
8002f61c:	ea 1b 3e a6 	orh	r11,0x3ea6
8002f620:	e0 a0 10 0e 	rcall	8003163c <__avr32_f32_sub>
8002f624:	18 9b       	mov	r11,r12
8002f626:	0e 9c       	mov	r12,r7
8002f628:	e0 a0 10 c8 	rcall	800317b8 <__avr32_f32_mul>
8002f62c:	e0 6b aa ab 	mov	r11,43691
8002f630:	ea 1b 3e 2a 	orh	r11,0x3e2a
8002f634:	e0 a0 10 6c 	rcall	8003170c <__avr32_f32_add>
8002f638:	18 9b       	mov	r11,r12
8002f63a:	0e 9c       	mov	r12,r7
8002f63c:	e0 a0 10 be 	rcall	800317b8 <__avr32_f32_mul>
8002f640:	e0 6b c6 2e 	mov	r11,50734
8002f644:	ea 1b 3d 9d 	orh	r11,0x3d9d
8002f648:	18 95       	mov	r5,r12
8002f64a:	0e 9c       	mov	r12,r7
8002f64c:	e0 a0 10 b6 	rcall	800317b8 <__avr32_f32_mul>
8002f650:	e0 6b 33 61 	mov	r11,13153
8002f654:	ea 1b 3f 30 	orh	r11,0x3f30
8002f658:	e0 a0 0f f2 	rcall	8003163c <__avr32_f32_sub>
8002f65c:	18 9b       	mov	r11,r12
8002f65e:	0e 9c       	mov	r12,r7
8002f660:	e0 a0 10 ac 	rcall	800317b8 <__avr32_f32_mul>
8002f664:	e0 6b 57 2d 	mov	r11,22317
8002f668:	ea 1b 40 01 	orh	r11,0x4001
8002f66c:	e0 a0 10 50 	rcall	8003170c <__avr32_f32_add>
8002f670:	18 9b       	mov	r11,r12
8002f672:	0e 9c       	mov	r12,r7
8002f674:	e0 a0 10 a2 	rcall	800317b8 <__avr32_f32_mul>
8002f678:	e0 6b d1 39 	mov	r11,53561
8002f67c:	ea 1b 40 19 	orh	r11,0x4019
8002f680:	e0 a0 0f de 	rcall	8003163c <__avr32_f32_sub>
8002f684:	18 9b       	mov	r11,r12
8002f686:	0e 9c       	mov	r12,r7
8002f688:	e0 a0 10 98 	rcall	800317b8 <__avr32_f32_mul>
8002f68c:	fc 1b 3f 80 	movh	r11,0x3f80
8002f690:	e0 a0 10 3e 	rcall	8003170c <__avr32_f32_add>
8002f694:	18 9b       	mov	r11,r12
8002f696:	0a 9c       	mov	r12,r5
8002f698:	e0 a0 0f 20 	rcall	800314d8 <__avr32_f32_div>
8002f69c:	18 9b       	mov	r11,r12
8002f69e:	0c 9c       	mov	r12,r6
8002f6a0:	e0 a0 10 8c 	rcall	800317b8 <__avr32_f32_mul>
8002f6a4:	18 9b       	mov	r11,r12
8002f6a6:	e0 6c 21 68 	mov	r12,8552
8002f6aa:	ea 1c 33 a2 	orh	r12,0x33a2
8002f6ae:	e0 a0 0f c7 	rcall	8003163c <__avr32_f32_sub>
8002f6b2:	18 9b       	mov	r11,r12
8002f6b4:	0c 9c       	mov	r12,r6
8002f6b6:	e0 a0 0f c3 	rcall	8003163c <__avr32_f32_sub>
8002f6ba:	18 9b       	mov	r11,r12
8002f6bc:	e0 6c 0f da 	mov	r12,4058
8002f6c0:	ea 1c 3f c9 	orh	r12,0x3fc9
8002f6c4:	e0 a0 0f bc 	rcall	8003163c <__avr32_f32_sub>
8002f6c8:	d8 22       	popm	r4-r7,pc
8002f6ca:	58 0c       	cp.w	r12,0
8002f6cc:	e0 84 00 8c 	brge	8002f7e4 <__ieee754_acosf+0x278>
8002f6d0:	fc 1b 3f 80 	movh	r11,0x3f80
8002f6d4:	e0 a0 10 1c 	rcall	8003170c <__avr32_f32_add>
8002f6d8:	fc 1b 3f 00 	movh	r11,0x3f00
8002f6dc:	e0 a0 10 6e 	rcall	800317b8 <__avr32_f32_mul>
8002f6e0:	18 97       	mov	r7,r12
8002f6e2:	c1 9d       	rcall	8002f914 <__ieee754_sqrtf>
8002f6e4:	e0 6b ef 08 	mov	r11,61192
8002f6e8:	ea 1b 38 11 	orh	r11,0x3811
8002f6ec:	18 96       	mov	r6,r12
8002f6ee:	0e 9c       	mov	r12,r7
8002f6f0:	e0 a0 10 64 	rcall	800317b8 <__avr32_f32_mul>
8002f6f4:	e0 6b 7f 04 	mov	r11,32516
8002f6f8:	ea 1b 3a 4f 	orh	r11,0x3a4f
8002f6fc:	e0 a0 10 08 	rcall	8003170c <__avr32_f32_add>
8002f700:	18 9b       	mov	r11,r12
8002f702:	0e 9c       	mov	r12,r7
8002f704:	e0 a0 10 5a 	rcall	800317b8 <__avr32_f32_mul>
8002f708:	e0 6b 11 46 	mov	r11,4422
8002f70c:	ea 1b 3d 24 	orh	r11,0x3d24
8002f710:	e0 a0 0f 96 	rcall	8003163c <__avr32_f32_sub>
8002f714:	18 9b       	mov	r11,r12
8002f716:	0e 9c       	mov	r12,r7
8002f718:	e0 a0 10 50 	rcall	800317b8 <__avr32_f32_mul>
8002f71c:	e0 6b 0a a8 	mov	r11,2728
8002f720:	ea 1b 3e 4e 	orh	r11,0x3e4e
8002f724:	e0 a0 0f f4 	rcall	8003170c <__avr32_f32_add>
8002f728:	18 9b       	mov	r11,r12
8002f72a:	0e 9c       	mov	r12,r7
8002f72c:	e0 a0 10 46 	rcall	800317b8 <__avr32_f32_mul>
8002f730:	e0 6b b0 90 	mov	r11,45200
8002f734:	ea 1b 3e a6 	orh	r11,0x3ea6
8002f738:	e0 a0 0f 82 	rcall	8003163c <__avr32_f32_sub>
8002f73c:	18 9b       	mov	r11,r12
8002f73e:	0e 9c       	mov	r12,r7
8002f740:	e0 a0 10 3c 	rcall	800317b8 <__avr32_f32_mul>
8002f744:	e0 6b aa ab 	mov	r11,43691
8002f748:	ea 1b 3e 2a 	orh	r11,0x3e2a
8002f74c:	e0 a0 0f e0 	rcall	8003170c <__avr32_f32_add>
8002f750:	18 9b       	mov	r11,r12
8002f752:	0e 9c       	mov	r12,r7
8002f754:	e0 a0 10 32 	rcall	800317b8 <__avr32_f32_mul>
8002f758:	e0 6b c6 2e 	mov	r11,50734
8002f75c:	ea 1b 3d 9d 	orh	r11,0x3d9d
8002f760:	18 95       	mov	r5,r12
8002f762:	0e 9c       	mov	r12,r7
8002f764:	e0 a0 10 2a 	rcall	800317b8 <__avr32_f32_mul>
8002f768:	e0 6b 33 61 	mov	r11,13153
8002f76c:	ea 1b 3f 30 	orh	r11,0x3f30
8002f770:	e0 a0 0f 66 	rcall	8003163c <__avr32_f32_sub>
8002f774:	18 9b       	mov	r11,r12
8002f776:	0e 9c       	mov	r12,r7
8002f778:	e0 a0 10 20 	rcall	800317b8 <__avr32_f32_mul>
8002f77c:	e0 6b 57 2d 	mov	r11,22317
8002f780:	ea 1b 40 01 	orh	r11,0x4001
8002f784:	e0 a0 0f c4 	rcall	8003170c <__avr32_f32_add>
8002f788:	18 9b       	mov	r11,r12
8002f78a:	0e 9c       	mov	r12,r7
8002f78c:	e0 a0 10 16 	rcall	800317b8 <__avr32_f32_mul>
8002f790:	e0 6b d1 39 	mov	r11,53561
8002f794:	ea 1b 40 19 	orh	r11,0x4019
8002f798:	e0 a0 0f 52 	rcall	8003163c <__avr32_f32_sub>
8002f79c:	18 9b       	mov	r11,r12
8002f79e:	0e 9c       	mov	r12,r7
8002f7a0:	e0 a0 10 0c 	rcall	800317b8 <__avr32_f32_mul>
8002f7a4:	fc 1b 3f 80 	movh	r11,0x3f80
8002f7a8:	e0 a0 0f b2 	rcall	8003170c <__avr32_f32_add>
8002f7ac:	18 9b       	mov	r11,r12
8002f7ae:	0a 9c       	mov	r12,r5
8002f7b0:	e0 a0 0e 94 	rcall	800314d8 <__avr32_f32_div>
8002f7b4:	0c 9b       	mov	r11,r6
8002f7b6:	e0 a0 10 01 	rcall	800317b8 <__avr32_f32_mul>
8002f7ba:	e0 6b 21 68 	mov	r11,8552
8002f7be:	ea 1b 33 a2 	orh	r11,0x33a2
8002f7c2:	e0 a0 0f 3d 	rcall	8003163c <__avr32_f32_sub>
8002f7c6:	18 9b       	mov	r11,r12
8002f7c8:	0c 9c       	mov	r12,r6
8002f7ca:	e0 a0 0f a1 	rcall	8003170c <__avr32_f32_add>
8002f7ce:	fc 1b c0 00 	movh	r11,0xc000
8002f7d2:	e0 a0 0f f3 	rcall	800317b8 <__avr32_f32_mul>
8002f7d6:	e0 6b 0f da 	mov	r11,4058
8002f7da:	ea 1b 40 49 	orh	r11,0x4049
8002f7de:	e0 a0 0f 97 	rcall	8003170c <__avr32_f32_add>
8002f7e2:	d8 22       	popm	r4-r7,pc
8002f7e4:	18 9b       	mov	r11,r12
8002f7e6:	fc 1c 3f 80 	movh	r12,0x3f80
8002f7ea:	e0 a0 0f 29 	rcall	8003163c <__avr32_f32_sub>
8002f7ee:	fc 1b 3f 00 	movh	r11,0x3f00
8002f7f2:	e0 a0 0f e3 	rcall	800317b8 <__avr32_f32_mul>
8002f7f6:	18 97       	mov	r7,r12
8002f7f8:	c8 ec       	rcall	8002f914 <__ieee754_sqrtf>
8002f7fa:	e0 6b ef 08 	mov	r11,61192
8002f7fe:	ea 1b 38 11 	orh	r11,0x3811
8002f802:	18 95       	mov	r5,r12
8002f804:	0e 9c       	mov	r12,r7
8002f806:	e0 a0 0f d9 	rcall	800317b8 <__avr32_f32_mul>
8002f80a:	e0 6b 7f 04 	mov	r11,32516
8002f80e:	ea 1b 3a 4f 	orh	r11,0x3a4f
8002f812:	e0 a0 0f 7d 	rcall	8003170c <__avr32_f32_add>
8002f816:	18 9b       	mov	r11,r12
8002f818:	0e 9c       	mov	r12,r7
8002f81a:	e0 a0 0f cf 	rcall	800317b8 <__avr32_f32_mul>
8002f81e:	e0 6b 11 46 	mov	r11,4422
8002f822:	ea 1b 3d 24 	orh	r11,0x3d24
8002f826:	e0 a0 0f 0b 	rcall	8003163c <__avr32_f32_sub>
8002f82a:	18 9b       	mov	r11,r12
8002f82c:	0e 9c       	mov	r12,r7
8002f82e:	e0 a0 0f c5 	rcall	800317b8 <__avr32_f32_mul>
8002f832:	e0 6b 0a a8 	mov	r11,2728
8002f836:	ea 1b 3e 4e 	orh	r11,0x3e4e
8002f83a:	e0 a0 0f 69 	rcall	8003170c <__avr32_f32_add>
8002f83e:	18 9b       	mov	r11,r12
8002f840:	0e 9c       	mov	r12,r7
8002f842:	e0 a0 0f bb 	rcall	800317b8 <__avr32_f32_mul>
8002f846:	e0 6b b0 90 	mov	r11,45200
8002f84a:	ea 1b 3e a6 	orh	r11,0x3ea6
8002f84e:	e0 a0 0e f7 	rcall	8003163c <__avr32_f32_sub>
8002f852:	18 9b       	mov	r11,r12
8002f854:	0e 9c       	mov	r12,r7
8002f856:	e0 a0 0f b1 	rcall	800317b8 <__avr32_f32_mul>
8002f85a:	e0 6b aa ab 	mov	r11,43691
8002f85e:	ea 1b 3e 2a 	orh	r11,0x3e2a
8002f862:	e0 a0 0f 55 	rcall	8003170c <__avr32_f32_add>
8002f866:	18 9b       	mov	r11,r12
8002f868:	0e 9c       	mov	r12,r7
8002f86a:	e0 a0 0f a7 	rcall	800317b8 <__avr32_f32_mul>
8002f86e:	e0 6b c6 2e 	mov	r11,50734
8002f872:	ea 1b 3d 9d 	orh	r11,0x3d9d
8002f876:	18 94       	mov	r4,r12
8002f878:	0e 9c       	mov	r12,r7
8002f87a:	e0 a0 0f 9f 	rcall	800317b8 <__avr32_f32_mul>
8002f87e:	e0 6b 33 61 	mov	r11,13153
8002f882:	ea 1b 3f 30 	orh	r11,0x3f30
8002f886:	e0 a0 0e db 	rcall	8003163c <__avr32_f32_sub>
8002f88a:	18 9b       	mov	r11,r12
8002f88c:	0e 9c       	mov	r12,r7
8002f88e:	e0 a0 0f 95 	rcall	800317b8 <__avr32_f32_mul>
8002f892:	e0 6b 57 2d 	mov	r11,22317
8002f896:	ea 1b 40 01 	orh	r11,0x4001
8002f89a:	e0 a0 0f 39 	rcall	8003170c <__avr32_f32_add>
8002f89e:	18 9b       	mov	r11,r12
8002f8a0:	0e 9c       	mov	r12,r7
8002f8a2:	e0 a0 0f 8b 	rcall	800317b8 <__avr32_f32_mul>
8002f8a6:	e0 6b d1 39 	mov	r11,53561
8002f8aa:	ea 1b 40 19 	orh	r11,0x4019
8002f8ae:	e0 a0 0e c7 	rcall	8003163c <__avr32_f32_sub>
8002f8b2:	18 9b       	mov	r11,r12
8002f8b4:	0e 9c       	mov	r12,r7
8002f8b6:	e0 a0 0f 81 	rcall	800317b8 <__avr32_f32_mul>
8002f8ba:	fc 1b 3f 80 	movh	r11,0x3f80
8002f8be:	e0 a0 0f 27 	rcall	8003170c <__avr32_f32_add>
8002f8c2:	18 9b       	mov	r11,r12
8002f8c4:	08 9c       	mov	r12,r4
8002f8c6:	e0 a0 0e 09 	rcall	800314d8 <__avr32_f32_div>
8002f8ca:	0a 9b       	mov	r11,r5
8002f8cc:	e0 a0 0f 76 	rcall	800317b8 <__avr32_f32_mul>
8002f8d0:	0a 96       	mov	r6,r5
8002f8d2:	18 94       	mov	r4,r12
8002f8d4:	e0 16 f0 00 	andl	r6,0xf000
8002f8d8:	0c 9b       	mov	r11,r6
8002f8da:	0c 9c       	mov	r12,r6
8002f8dc:	e0 a0 0f 6e 	rcall	800317b8 <__avr32_f32_mul>
8002f8e0:	18 9b       	mov	r11,r12
8002f8e2:	0e 9c       	mov	r12,r7
8002f8e4:	e0 a0 0e ac 	rcall	8003163c <__avr32_f32_sub>
8002f8e8:	0c 9b       	mov	r11,r6
8002f8ea:	18 97       	mov	r7,r12
8002f8ec:	0a 9c       	mov	r12,r5
8002f8ee:	e0 a0 0f 0f 	rcall	8003170c <__avr32_f32_add>
8002f8f2:	18 9b       	mov	r11,r12
8002f8f4:	0e 9c       	mov	r12,r7
8002f8f6:	e0 a0 0d f1 	rcall	800314d8 <__avr32_f32_div>
8002f8fa:	18 9b       	mov	r11,r12
8002f8fc:	08 9c       	mov	r12,r4
8002f8fe:	e0 a0 0f 07 	rcall	8003170c <__avr32_f32_add>
8002f902:	18 9b       	mov	r11,r12
8002f904:	0c 9c       	mov	r12,r6
8002f906:	e0 a0 0f 03 	rcall	8003170c <__avr32_f32_add>
8002f90a:	18 9b       	mov	r11,r12
8002f90c:	e0 a0 0f 00 	rcall	8003170c <__avr32_f32_add>
8002f910:	d8 22       	popm	r4-r7,pc
8002f912:	d7 03       	nop

8002f914 <__ieee754_sqrtf>:
8002f914:	d4 21       	pushm	r4-r7,lr
8002f916:	e0 6b ff ff 	mov	r11,65535
8002f91a:	ea 1b 7f 7f 	orh	r11,0x7f7f
8002f91e:	18 97       	mov	r7,r12
8002f920:	18 98       	mov	r8,r12
8002f922:	f3 dc c0 1f 	bfextu	r9,r12,0x0,0x1f
8002f926:	16 39       	cp.w	r9,r11
8002f928:	e0 88 00 0a 	brls	8002f93c <__ieee754_sqrtf+0x28>
8002f92c:	18 9b       	mov	r11,r12
8002f92e:	e0 a0 0f 45 	rcall	800317b8 <__avr32_f32_mul>
8002f932:	18 9b       	mov	r11,r12
8002f934:	0e 9c       	mov	r12,r7
8002f936:	e0 a0 0e eb 	rcall	8003170c <__avr32_f32_add>
8002f93a:	c0 b8       	rjmp	8002f950 <__ieee754_sqrtf+0x3c>
8002f93c:	58 09       	cp.w	r9,0
8002f93e:	c4 a0       	breq	8002f9d2 <__ieee754_sqrtf+0xbe>
8002f940:	58 0c       	cp.w	r12,0
8002f942:	c0 94       	brge	8002f954 <__ieee754_sqrtf+0x40>
8002f944:	18 9b       	mov	r11,r12
8002f946:	e0 a0 0e 7b 	rcall	8003163c <__avr32_f32_sub>
8002f94a:	18 9b       	mov	r11,r12
8002f94c:	e0 a0 0d c6 	rcall	800314d8 <__avr32_f32_div>
8002f950:	18 97       	mov	r7,r12
8002f952:	c4 08       	rjmp	8002f9d2 <__ieee754_sqrtf+0xbe>
8002f954:	f8 0a 14 17 	asr	r10,r12,0x17
8002f958:	e0 6b ff ff 	mov	r11,65535
8002f95c:	ea 1b 00 7f 	orh	r11,0x7f
8002f960:	16 39       	cp.w	r9,r11
8002f962:	e0 8b 00 0b 	brhi	8002f978 <__ieee754_sqrtf+0x64>
8002f966:	30 09       	mov	r9,0
8002f968:	c0 38       	rjmp	8002f96e <__ieee754_sqrtf+0x5a>
8002f96a:	a1 78       	lsl	r8,0x1
8002f96c:	2f f9       	sub	r9,-1
8002f96e:	ed b8 00 17 	bld	r8,0x17
8002f972:	cf c1       	brne	8002f96a <__ieee754_sqrtf+0x56>
8002f974:	2f fa       	sub	r10,-1
8002f976:	12 1a       	sub	r10,r9
8002f978:	f4 cc 00 7f 	sub	r12,r10,127
8002f97c:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
8002f980:	30 0a       	mov	r10,0
8002f982:	f1 d8 c0 17 	bfextu	r8,r8,0x0,0x17
8002f986:	14 97       	mov	r7,r10
8002f988:	b7 b8       	sbr	r8,0x17
8002f98a:	14 9e       	mov	lr,r10
8002f98c:	f0 0b 15 01 	lsl	r11,r8,0x1
8002f990:	14 39       	cp.w	r9,r10
8002f992:	f6 08 17 10 	movne	r8,r11
8002f996:	fc 19 01 00 	movh	r9,0x100
8002f99a:	a1 78       	lsl	r8,0x1
8002f99c:	fc 09 00 0b 	add	r11,lr,r9
8002f9a0:	2f fa       	sub	r10,-1
8002f9a2:	10 3b       	cp.w	r11,r8
8002f9a4:	f1 db ea 18 	suble	r8,r8,r11
8002f9a8:	ef d9 ea 07 	addle	r7,r7,r9
8002f9ac:	f7 d9 ea 0e 	addle	lr,r11,r9
8002f9b0:	a1 78       	lsl	r8,0x1
8002f9b2:	a1 99       	lsr	r9,0x1
8002f9b4:	59 9a       	cp.w	r10,25
8002f9b6:	cf 31       	brne	8002f99c <__ieee754_sqrtf+0x88>
8002f9b8:	f3 d7 c0 01 	bfextu	r9,r7,0x0,0x1
8002f9bc:	58 08       	cp.w	r8,0
8002f9be:	f3 d7 e1 07 	addne	r7,r9,r7
8002f9c2:	a1 57       	asr	r7,0x1
8002f9c4:	a1 5c       	asr	r12,0x1
8002f9c6:	fc 18 3f 00 	movh	r8,0x3f00
8002f9ca:	b7 7c       	lsl	r12,0x17
8002f9cc:	10 0c       	add	r12,r8
8002f9ce:	0e 0c       	add	r12,r7
8002f9d0:	18 97       	mov	r7,r12
8002f9d2:	0e 9c       	mov	r12,r7
8002f9d4:	d8 22       	popm	r4-r7,pc
8002f9d6:	d7 03       	nop

8002f9d8 <__kernel_cos>:
8002f9d8:	d4 31       	pushm	r0-r7,lr
8002f9da:	20 6d       	sub	sp,24
8002f9dc:	fa e9 00 08 	st.d	sp[8],r8
8002f9e0:	14 92       	mov	r2,r10
8002f9e2:	16 93       	mov	r3,r11
8002f9e4:	14 96       	mov	r6,r10
8002f9e6:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f9ea:	e0 69 ff ff 	mov	r9,65535
8002f9ee:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f9f2:	12 37       	cp.w	r7,r9
8002f9f4:	e0 89 00 09 	brgt	8002fa06 <__kernel_cos+0x2e>
8002f9f8:	e0 a0 0a c8 	rcall	80030f88 <__avr32_f64_to_s32>
8002f9fc:	c0 51       	brne	8002fa06 <__kernel_cos+0x2e>
8002f9fe:	30 0a       	mov	r10,0
8002fa00:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fa04:	cd b8       	rjmp	8002fbba <__kernel_cos+0x1e2>
8002fa06:	04 98       	mov	r8,r2
8002fa08:	06 99       	mov	r9,r3
8002fa0a:	04 9a       	mov	r10,r2
8002fa0c:	06 9b       	mov	r11,r3
8002fa0e:	e0 a0 08 79 	rcall	80030b00 <__avr32_f64_mul>
8002fa12:	e0 68 38 d4 	mov	r8,14548
8002fa16:	ea 18 be 88 	orh	r8,0xbe88
8002fa1a:	14 94       	mov	r4,r10
8002fa1c:	16 95       	mov	r5,r11
8002fa1e:	e0 69 fa e9 	mov	r9,64233
8002fa22:	ea 19 bd a8 	orh	r9,0xbda8
8002fa26:	e0 a0 08 6d 	rcall	80030b00 <__avr32_f64_mul>
8002fa2a:	e0 68 b1 c4 	mov	r8,45508
8002fa2e:	ea 18 bd b4 	orh	r8,0xbdb4
8002fa32:	e0 69 ee 9e 	mov	r9,61086
8002fa36:	ea 19 3e 21 	orh	r9,0x3e21
8002fa3a:	e0 a0 0a 1d 	rcall	80030e74 <__avr32_f64_add>
8002fa3e:	14 98       	mov	r8,r10
8002fa40:	16 99       	mov	r9,r11
8002fa42:	08 9a       	mov	r10,r4
8002fa44:	0a 9b       	mov	r11,r5
8002fa46:	e0 a0 08 5d 	rcall	80030b00 <__avr32_f64_mul>
8002fa4a:	e0 68 52 ad 	mov	r8,21165
8002fa4e:	ea 18 80 9c 	orh	r8,0x809c
8002fa52:	e0 69 7e 4f 	mov	r9,32335
8002fa56:	ea 19 3e 92 	orh	r9,0x3e92
8002fa5a:	e0 a0 09 3f 	rcall	80030cd8 <__avr32_f64_sub>
8002fa5e:	14 98       	mov	r8,r10
8002fa60:	16 99       	mov	r9,r11
8002fa62:	08 9a       	mov	r10,r4
8002fa64:	0a 9b       	mov	r11,r5
8002fa66:	e0 a0 08 4d 	rcall	80030b00 <__avr32_f64_mul>
8002fa6a:	e0 68 15 90 	mov	r8,5520
8002fa6e:	ea 18 19 cb 	orh	r8,0x19cb
8002fa72:	e0 69 01 a0 	mov	r9,416
8002fa76:	ea 19 3e fa 	orh	r9,0x3efa
8002fa7a:	e0 a0 09 fd 	rcall	80030e74 <__avr32_f64_add>
8002fa7e:	14 98       	mov	r8,r10
8002fa80:	16 99       	mov	r9,r11
8002fa82:	08 9a       	mov	r10,r4
8002fa84:	0a 9b       	mov	r11,r5
8002fa86:	e0 a0 08 3d 	rcall	80030b00 <__avr32_f64_mul>
8002fa8a:	e0 68 51 77 	mov	r8,20855
8002fa8e:	ea 18 16 c1 	orh	r8,0x16c1
8002fa92:	e0 69 c1 6c 	mov	r9,49516
8002fa96:	ea 19 3f 56 	orh	r9,0x3f56
8002fa9a:	e0 a0 09 1f 	rcall	80030cd8 <__avr32_f64_sub>
8002fa9e:	14 98       	mov	r8,r10
8002faa0:	16 99       	mov	r9,r11
8002faa2:	08 9a       	mov	r10,r4
8002faa4:	0a 9b       	mov	r11,r5
8002faa6:	e0 a0 08 2d 	rcall	80030b00 <__avr32_f64_mul>
8002faaa:	e0 68 55 4c 	mov	r8,21836
8002faae:	ea 18 55 55 	orh	r8,0x5555
8002fab2:	e0 69 55 55 	mov	r9,21845
8002fab6:	ea 19 3f a5 	orh	r9,0x3fa5
8002faba:	e0 a0 09 dd 	rcall	80030e74 <__avr32_f64_add>
8002fabe:	14 98       	mov	r8,r10
8002fac0:	16 99       	mov	r9,r11
8002fac2:	08 9a       	mov	r10,r4
8002fac4:	0a 9b       	mov	r11,r5
8002fac6:	e0 a0 08 1d 	rcall	80030b00 <__avr32_f64_mul>
8002faca:	fa eb 00 00 	st.d	sp[0],r10
8002face:	e0 68 33 32 	mov	r8,13106
8002fad2:	ea 18 3f d3 	orh	r8,0x3fd3
8002fad6:	10 37       	cp.w	r7,r8
8002fad8:	e0 89 00 2b 	brgt	8002fb2e <__kernel_cos+0x156>
8002fadc:	30 08       	mov	r8,0
8002fade:	fc 19 3f e0 	movh	r9,0x3fe0
8002fae2:	08 9a       	mov	r10,r4
8002fae4:	0a 9b       	mov	r11,r5
8002fae6:	e0 a0 08 0d 	rcall	80030b00 <__avr32_f64_mul>
8002faea:	fa e8 00 00 	ld.d	r8,sp[0]
8002faee:	14 90       	mov	r0,r10
8002faf0:	16 91       	mov	r1,r11
8002faf2:	08 9a       	mov	r10,r4
8002faf4:	0a 9b       	mov	r11,r5
8002faf6:	e0 a0 08 05 	rcall	80030b00 <__avr32_f64_mul>
8002fafa:	fa e8 00 08 	ld.d	r8,sp[8]
8002fafe:	16 97       	mov	r7,r11
8002fb00:	14 96       	mov	r6,r10
8002fb02:	06 9b       	mov	r11,r3
8002fb04:	04 9a       	mov	r10,r2
8002fb06:	e0 a0 07 fd 	rcall	80030b00 <__avr32_f64_mul>
8002fb0a:	14 98       	mov	r8,r10
8002fb0c:	16 99       	mov	r9,r11
8002fb0e:	0c 9a       	mov	r10,r6
8002fb10:	0e 9b       	mov	r11,r7
8002fb12:	e0 a0 08 e3 	rcall	80030cd8 <__avr32_f64_sub>
8002fb16:	14 98       	mov	r8,r10
8002fb18:	16 99       	mov	r9,r11
8002fb1a:	00 9a       	mov	r10,r0
8002fb1c:	02 9b       	mov	r11,r1
8002fb1e:	e0 a0 08 dd 	rcall	80030cd8 <__avr32_f64_sub>
8002fb22:	14 98       	mov	r8,r10
8002fb24:	16 99       	mov	r9,r11
8002fb26:	30 0a       	mov	r10,0
8002fb28:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fb2c:	c4 58       	rjmp	8002fbb6 <__kernel_cos+0x1de>
8002fb2e:	fc 19 3f e9 	movh	r9,0x3fe9
8002fb32:	12 37       	cp.w	r7,r9
8002fb34:	e0 8a 00 06 	brle	8002fb40 <__kernel_cos+0x168>
8002fb38:	30 06       	mov	r6,0
8002fb3a:	fc 17 3f d2 	movh	r7,0x3fd2
8002fb3e:	c0 88       	rjmp	8002fb4e <__kernel_cos+0x176>
8002fb40:	fc 1a ff e0 	movh	r10,0xffe0
8002fb44:	30 08       	mov	r8,0
8002fb46:	ee 0a 00 09 	add	r9,r7,r10
8002fb4a:	10 96       	mov	r6,r8
8002fb4c:	12 97       	mov	r7,r9
8002fb4e:	0c 98       	mov	r8,r6
8002fb50:	0e 99       	mov	r9,r7
8002fb52:	30 0a       	mov	r10,0
8002fb54:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fb58:	e0 a0 08 c0 	rcall	80030cd8 <__avr32_f64_sub>
8002fb5c:	30 08       	mov	r8,0
8002fb5e:	fa eb 00 10 	st.d	sp[16],r10
8002fb62:	fc 19 3f e0 	movh	r9,0x3fe0
8002fb66:	08 9a       	mov	r10,r4
8002fb68:	0a 9b       	mov	r11,r5
8002fb6a:	e0 a0 07 cb 	rcall	80030b00 <__avr32_f64_mul>
8002fb6e:	0c 98       	mov	r8,r6
8002fb70:	0e 99       	mov	r9,r7
8002fb72:	e0 a0 08 b3 	rcall	80030cd8 <__avr32_f64_sub>
8002fb76:	fa e8 00 00 	ld.d	r8,sp[0]
8002fb7a:	14 90       	mov	r0,r10
8002fb7c:	16 91       	mov	r1,r11
8002fb7e:	08 9a       	mov	r10,r4
8002fb80:	0a 9b       	mov	r11,r5
8002fb82:	e0 a0 07 bf 	rcall	80030b00 <__avr32_f64_mul>
8002fb86:	fa e8 00 08 	ld.d	r8,sp[8]
8002fb8a:	16 97       	mov	r7,r11
8002fb8c:	14 96       	mov	r6,r10
8002fb8e:	06 9b       	mov	r11,r3
8002fb90:	04 9a       	mov	r10,r2
8002fb92:	e0 a0 07 b7 	rcall	80030b00 <__avr32_f64_mul>
8002fb96:	14 98       	mov	r8,r10
8002fb98:	16 99       	mov	r9,r11
8002fb9a:	0c 9a       	mov	r10,r6
8002fb9c:	0e 9b       	mov	r11,r7
8002fb9e:	e0 a0 08 9d 	rcall	80030cd8 <__avr32_f64_sub>
8002fba2:	14 98       	mov	r8,r10
8002fba4:	16 99       	mov	r9,r11
8002fba6:	00 9a       	mov	r10,r0
8002fba8:	02 9b       	mov	r11,r1
8002fbaa:	e0 a0 08 97 	rcall	80030cd8 <__avr32_f64_sub>
8002fbae:	14 98       	mov	r8,r10
8002fbb0:	16 99       	mov	r9,r11
8002fbb2:	fa ea 00 10 	ld.d	r10,sp[16]
8002fbb6:	e0 a0 08 91 	rcall	80030cd8 <__avr32_f64_sub>
8002fbba:	2f ad       	sub	sp,-24
8002fbbc:	d8 32       	popm	r0-r7,pc
8002fbbe:	d7 03       	nop

8002fbc0 <__kernel_rem_pio2>:
8002fbc0:	d4 31       	pushm	r0-r7,lr
8002fbc2:	fa cd 02 70 	sub	sp,sp,624
8002fbc6:	50 b9       	stdsp	sp[0x2c],r9
8002fbc8:	fa f9 02 94 	ld.w	r9,sp[660]
8002fbcc:	50 68       	stdsp	sp[0x18],r8
8002fbce:	50 c9       	stdsp	sp[0x30],r9
8002fbd0:	16 94       	mov	r4,r11
8002fbd2:	40 b8       	lddsp	r8,sp[0x2c]
8002fbd4:	4b e9       	lddpc	r9,8002fccc <__kernel_rem_pio2+0x10c>
8002fbd6:	20 18       	sub	r8,1
8002fbd8:	40 6b       	lddsp	r11,sp[0x18]
8002fbda:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002fbde:	50 58       	stdsp	sp[0x14],r8
8002fbe0:	50 39       	stdsp	sp[0xc],r9
8002fbe2:	30 08       	mov	r8,0
8002fbe4:	f4 c9 00 03 	sub	r9,r10,3
8002fbe8:	10 97       	mov	r7,r8
8002fbea:	31 83       	mov	r3,24
8002fbec:	f2 03 0c 02 	divs	r2,r9,r3
8002fbf0:	f0 02 0c 48 	max	r8,r8,r2
8002fbf4:	40 59       	lddsp	r9,sp[0x14]
8002fbf6:	10 96       	mov	r6,r8
8002fbf8:	10 93       	mov	r3,r8
8002fbfa:	50 78       	stdsp	sp[0x1c],r8
8002fbfc:	40 31       	lddsp	r1,sp[0xc]
8002fbfe:	5c d6       	com	r6
8002fc00:	12 13       	sub	r3,r9
8002fc02:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002fc06:	40 c8       	lddsp	r8,sp[0x30]
8002fc08:	50 ac       	stdsp	sp[0x28],r12
8002fc0a:	12 01       	add	r1,r9
8002fc0c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002fc10:	fa c2 fe 80 	sub	r2,sp,-384
8002fc14:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002fc18:	c0 d8       	rjmp	8002fc32 <__kernel_rem_pio2+0x72>
8002fc1a:	ee 03 00 08 	add	r8,r7,r3
8002fc1e:	c0 47       	brpl	8002fc26 <__kernel_rem_pio2+0x66>
8002fc20:	30 0a       	mov	r10,0
8002fc22:	30 0b       	mov	r11,0
8002fc24:	c0 48       	rjmp	8002fc2c <__kernel_rem_pio2+0x6c>
8002fc26:	6a 0c       	ld.w	r12,r5[0x0]
8002fc28:	e0 a0 09 c7 	rcall	80030fb6 <__avr32_s32_to_f64>
8002fc2c:	a5 2a       	st.d	r2++,r10
8002fc2e:	2f f7       	sub	r7,-1
8002fc30:	2f c5       	sub	r5,-4
8002fc32:	02 37       	cp.w	r7,r1
8002fc34:	fe 9a ff f3 	brle	8002fc1a <__kernel_rem_pio2+0x5a>
8002fc38:	fa c0 ff c0 	sub	r0,sp,-64
8002fc3c:	40 53       	lddsp	r3,sp[0x14]
8002fc3e:	30 02       	mov	r2,0
8002fc40:	fa cc fe 80 	sub	r12,sp,-384
8002fc44:	0c 95       	mov	r5,r6
8002fc46:	c1 b8       	rjmp	8002fc7c <__kernel_rem_pio2+0xbc>
8002fc48:	ee e8 00 00 	ld.d	r8,r7[0]
8002fc4c:	50 0c       	stdsp	sp[0x0],r12
8002fc4e:	20 87       	sub	r7,8
8002fc50:	a3 0b       	ld.d	r10,r1++
8002fc52:	e0 a0 07 57 	rcall	80030b00 <__avr32_f64_mul>
8002fc56:	14 98       	mov	r8,r10
8002fc58:	16 99       	mov	r9,r11
8002fc5a:	fa ea 00 04 	ld.d	r10,sp[4]
8002fc5e:	e0 a0 09 0b 	rcall	80030e74 <__avr32_f64_add>
8002fc62:	2f f6       	sub	r6,-1
8002fc64:	fa eb 00 04 	st.d	sp[4],r10
8002fc68:	40 0c       	lddsp	r12,sp[0x0]
8002fc6a:	40 5b       	lddsp	r11,sp[0x14]
8002fc6c:	16 36       	cp.w	r6,r11
8002fc6e:	fe 9a ff ed 	brle	8002fc48 <__kernel_rem_pio2+0x88>
8002fc72:	fa e8 00 04 	ld.d	r8,sp[4]
8002fc76:	2f f2       	sub	r2,-1
8002fc78:	a1 28       	st.d	r0++,r8
8002fc7a:	2f f3       	sub	r3,-1
8002fc7c:	40 38       	lddsp	r8,sp[0xc]
8002fc7e:	10 32       	cp.w	r2,r8
8002fc80:	e0 89 00 0b 	brgt	8002fc96 <__kernel_rem_pio2+0xd6>
8002fc84:	30 0a       	mov	r10,0
8002fc86:	30 0b       	mov	r11,0
8002fc88:	40 a1       	lddsp	r1,sp[0x28]
8002fc8a:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002fc8e:	fa eb 00 04 	st.d	sp[4],r10
8002fc92:	30 06       	mov	r6,0
8002fc94:	ce bb       	rjmp	8002fc6a <__kernel_rem_pio2+0xaa>
8002fc96:	40 38       	lddsp	r8,sp[0xc]
8002fc98:	fa ca fd e0 	sub	r10,sp,-544
8002fc9c:	20 18       	sub	r8,1
8002fc9e:	0a 96       	mov	r6,r5
8002fca0:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002fca4:	40 37       	lddsp	r7,sp[0xc]
8002fca6:	50 fa       	stdsp	sp[0x3c],r10
8002fca8:	50 e4       	stdsp	sp[0x38],r4
8002fcaa:	fa c9 fd 90 	sub	r9,sp,-624
8002fcae:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002fcb2:	ee c5 00 01 	sub	r5,r7,1
8002fcb6:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002fcba:	fa c1 fd e0 	sub	r1,sp,-544
8002fcbe:	fa c8 ff c0 	sub	r8,sp,-64
8002fcc2:	50 11       	stdsp	sp[0x4],r1
8002fcc4:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002fcc8:	0e 90       	mov	r0,r7
8002fcca:	c2 58       	rjmp	8002fd14 <__kernel_rem_pio2+0x154>
8002fccc:	80 03       	ld.sh	r3,r0[0x0]
8002fcce:	25 48       	sub	r8,84
8002fcd0:	e0 a0 07 18 	rcall	80030b00 <__avr32_f64_mul>
8002fcd4:	e0 a0 09 5a 	rcall	80030f88 <__avr32_f64_to_s32>
8002fcd8:	e0 a0 09 6f 	rcall	80030fb6 <__avr32_s32_to_f64>
8002fcdc:	30 08       	mov	r8,0
8002fcde:	fc 19 c1 70 	movh	r9,0xc170
8002fce2:	fa eb 00 20 	st.d	sp[32],r10
8002fce6:	e0 a0 07 0d 	rcall	80030b00 <__avr32_f64_mul>
8002fcea:	14 98       	mov	r8,r10
8002fcec:	16 99       	mov	r9,r11
8002fcee:	04 9a       	mov	r10,r2
8002fcf0:	06 9b       	mov	r11,r3
8002fcf2:	e0 a0 08 c1 	rcall	80030e74 <__avr32_f64_add>
8002fcf6:	e0 a0 09 49 	rcall	80030f88 <__avr32_f64_to_s32>
8002fcfa:	40 1a       	lddsp	r10,sp[0x4]
8002fcfc:	14 ac       	st.w	r10++,r12
8002fcfe:	e8 e8 00 00 	ld.d	r8,r4[0]
8002fd02:	50 1a       	stdsp	sp[0x4],r10
8002fd04:	20 10       	sub	r0,1
8002fd06:	fa ea 00 20 	ld.d	r10,sp[32]
8002fd0a:	20 84       	sub	r4,8
8002fd0c:	e0 a0 08 b4 	rcall	80030e74 <__avr32_f64_add>
8002fd10:	14 92       	mov	r2,r10
8002fd12:	16 93       	mov	r3,r11
8002fd14:	30 08       	mov	r8,0
8002fd16:	fc 19 3e 70 	movh	r9,0x3e70
8002fd1a:	04 9a       	mov	r10,r2
8002fd1c:	06 9b       	mov	r11,r3
8002fd1e:	58 00       	cp.w	r0,0
8002fd20:	fe 99 ff d8 	brgt	8002fcd0 <__kernel_rem_pio2+0x110>
8002fd24:	0c 9c       	mov	r12,r6
8002fd26:	e0 a0 06 69 	rcall	800309f8 <scalbn>
8002fd2a:	30 08       	mov	r8,0
8002fd2c:	fc 19 3f c0 	movh	r9,0x3fc0
8002fd30:	14 92       	mov	r2,r10
8002fd32:	16 93       	mov	r3,r11
8002fd34:	e0 a0 06 e6 	rcall	80030b00 <__avr32_f64_mul>
8002fd38:	e0 a0 05 30 	rcall	80030798 <floor>
8002fd3c:	30 08       	mov	r8,0
8002fd3e:	fc 19 c0 20 	movh	r9,0xc020
8002fd42:	e0 a0 06 df 	rcall	80030b00 <__avr32_f64_mul>
8002fd46:	14 98       	mov	r8,r10
8002fd48:	16 99       	mov	r9,r11
8002fd4a:	04 9a       	mov	r10,r2
8002fd4c:	06 9b       	mov	r11,r3
8002fd4e:	e0 a0 08 93 	rcall	80030e74 <__avr32_f64_add>
8002fd52:	14 92       	mov	r2,r10
8002fd54:	16 93       	mov	r3,r11
8002fd56:	e0 a0 09 19 	rcall	80030f88 <__avr32_f64_to_s32>
8002fd5a:	18 90       	mov	r0,r12
8002fd5c:	e0 a0 09 2d 	rcall	80030fb6 <__avr32_s32_to_f64>
8002fd60:	14 98       	mov	r8,r10
8002fd62:	16 99       	mov	r9,r11
8002fd64:	04 9a       	mov	r10,r2
8002fd66:	06 9b       	mov	r11,r3
8002fd68:	e0 a0 07 b8 	rcall	80030cd8 <__avr32_f64_sub>
8002fd6c:	fa eb 00 04 	st.d	sp[4],r10
8002fd70:	58 06       	cp.w	r6,0
8002fd72:	e0 8a 00 18 	brle	8002fda2 <__kernel_rem_pio2+0x1e2>
8002fd76:	fa c8 fd 90 	sub	r8,sp,-624
8002fd7a:	ec 0b 11 18 	rsub	r11,r6,24
8002fd7e:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002fd82:	ec 0c 11 17 	rsub	r12,r6,23
8002fd86:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002fd8a:	f4 0b 08 48 	asr	r8,r10,r11
8002fd8e:	f0 0b 09 4b 	lsl	r11,r8,r11
8002fd92:	10 00       	add	r0,r8
8002fd94:	f4 0b 01 0b 	sub	r11,r10,r11
8002fd98:	f3 4b ff b0 	st.w	r9[-80],r11
8002fd9c:	f6 0c 08 44 	asr	r4,r11,r12
8002fda0:	c1 58       	rjmp	8002fdca <__kernel_rem_pio2+0x20a>
8002fda2:	58 06       	cp.w	r6,0
8002fda4:	c0 91       	brne	8002fdb6 <__kernel_rem_pio2+0x1f6>
8002fda6:	fa cb fd 90 	sub	r11,sp,-624
8002fdaa:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002fdae:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002fdb2:	b7 54       	asr	r4,0x17
8002fdb4:	c0 b8       	rjmp	8002fdca <__kernel_rem_pio2+0x20a>
8002fdb6:	30 08       	mov	r8,0
8002fdb8:	fc 19 3f e0 	movh	r9,0x3fe0
8002fdbc:	e0 a0 09 80 	rcall	800310bc <__avr32_f64_cmp_ge>
8002fdc0:	c0 31       	brne	8002fdc6 <__kernel_rem_pio2+0x206>
8002fdc2:	30 04       	mov	r4,0
8002fdc4:	c5 58       	rjmp	8002fe6e <__kernel_rem_pio2+0x2ae>
8002fdc6:	30 24       	mov	r4,2
8002fdc8:	c0 48       	rjmp	8002fdd0 <__kernel_rem_pio2+0x210>
8002fdca:	58 04       	cp.w	r4,0
8002fdcc:	e0 8a 00 51 	brle	8002fe6e <__kernel_rem_pio2+0x2ae>
8002fdd0:	30 08       	mov	r8,0
8002fdd2:	2f f0       	sub	r0,-1
8002fdd4:	10 93       	mov	r3,r8
8002fdd6:	c1 48       	rjmp	8002fdfe <__kernel_rem_pio2+0x23e>
8002fdd8:	62 09       	ld.w	r9,r1[0x0]
8002fdda:	58 03       	cp.w	r3,0
8002fddc:	c0 81       	brne	8002fdec <__kernel_rem_pio2+0x22c>
8002fdde:	58 09       	cp.w	r9,0
8002fde0:	c0 d0       	breq	8002fdfa <__kernel_rem_pio2+0x23a>
8002fde2:	fc 1a 01 00 	movh	r10,0x100
8002fde6:	12 1a       	sub	r10,r9
8002fde8:	83 0a       	st.w	r1[0x0],r10
8002fdea:	c0 78       	rjmp	8002fdf8 <__kernel_rem_pio2+0x238>
8002fdec:	e0 6b ff ff 	mov	r11,65535
8002fdf0:	ea 1b 00 ff 	orh	r11,0xff
8002fdf4:	12 1b       	sub	r11,r9
8002fdf6:	83 0b       	st.w	r1[0x0],r11
8002fdf8:	30 13       	mov	r3,1
8002fdfa:	2f f8       	sub	r8,-1
8002fdfc:	2f c1       	sub	r1,-4
8002fdfe:	0e 38       	cp.w	r8,r7
8002fe00:	ce c5       	brlt	8002fdd8 <__kernel_rem_pio2+0x218>
8002fe02:	58 06       	cp.w	r6,0
8002fe04:	e0 8a 00 1a 	brle	8002fe38 <__kernel_rem_pio2+0x278>
8002fe08:	58 16       	cp.w	r6,1
8002fe0a:	c0 40       	breq	8002fe12 <__kernel_rem_pio2+0x252>
8002fe0c:	58 26       	cp.w	r6,2
8002fe0e:	c1 51       	brne	8002fe38 <__kernel_rem_pio2+0x278>
8002fe10:	c0 a8       	rjmp	8002fe24 <__kernel_rem_pio2+0x264>
8002fe12:	fa ca fd 90 	sub	r10,sp,-624
8002fe16:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002fe1a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fe1e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002fe22:	c0 98       	rjmp	8002fe34 <__kernel_rem_pio2+0x274>
8002fe24:	fa c9 fd 90 	sub	r9,sp,-624
8002fe28:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002fe2c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fe30:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002fe34:	f1 49 ff b0 	st.w	r8[-80],r9
8002fe38:	58 24       	cp.w	r4,2
8002fe3a:	c1 a1       	brne	8002fe6e <__kernel_rem_pio2+0x2ae>
8002fe3c:	fa e8 00 04 	ld.d	r8,sp[4]
8002fe40:	30 0a       	mov	r10,0
8002fe42:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fe46:	e0 a0 07 49 	rcall	80030cd8 <__avr32_f64_sub>
8002fe4a:	fa eb 00 04 	st.d	sp[4],r10
8002fe4e:	58 03       	cp.w	r3,0
8002fe50:	c0 f0       	breq	8002fe6e <__kernel_rem_pio2+0x2ae>
8002fe52:	0c 9c       	mov	r12,r6
8002fe54:	30 0a       	mov	r10,0
8002fe56:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fe5a:	e0 a0 05 cf 	rcall	800309f8 <scalbn>
8002fe5e:	14 98       	mov	r8,r10
8002fe60:	16 99       	mov	r9,r11
8002fe62:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe66:	e0 a0 07 39 	rcall	80030cd8 <__avr32_f64_sub>
8002fe6a:	fa eb 00 04 	st.d	sp[4],r10
8002fe6e:	30 08       	mov	r8,0
8002fe70:	30 09       	mov	r9,0
8002fe72:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe76:	e0 a0 09 10 	rcall	80031096 <__avr32_f64_cmp_eq>
8002fe7a:	c6 40       	breq	8002ff42 <__kernel_rem_pio2+0x382>
8002fe7c:	fa c8 fd e0 	sub	r8,sp,-544
8002fe80:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002fe84:	30 08       	mov	r8,0
8002fe86:	c0 58       	rjmp	8002fe90 <__kernel_rem_pio2+0x2d0>
8002fe88:	72 0a       	ld.w	r10,r9[0x0]
8002fe8a:	20 15       	sub	r5,1
8002fe8c:	14 48       	or	r8,r10
8002fe8e:	20 49       	sub	r9,4
8002fe90:	40 3b       	lddsp	r11,sp[0xc]
8002fe92:	16 35       	cp.w	r5,r11
8002fe94:	cf a4       	brge	8002fe88 <__kernel_rem_pio2+0x2c8>
8002fe96:	58 08       	cp.w	r8,0
8002fe98:	c5 b1       	brne	8002ff4e <__kernel_rem_pio2+0x38e>
8002fe9a:	40 f9       	lddsp	r9,sp[0x3c]
8002fe9c:	30 18       	mov	r8,1
8002fe9e:	c0 28       	rjmp	8002fea2 <__kernel_rem_pio2+0x2e2>
8002fea0:	2f f8       	sub	r8,-1
8002fea2:	72 0a       	ld.w	r10,r9[0x0]
8002fea4:	20 49       	sub	r9,4
8002fea6:	58 0a       	cp.w	r10,0
8002fea8:	cf c0       	breq	8002fea0 <__kernel_rem_pio2+0x2e0>
8002feaa:	0e 08       	add	r8,r7
8002feac:	40 ba       	lddsp	r10,sp[0x2c]
8002feae:	50 d8       	stdsp	sp[0x34],r8
8002feb0:	ee 0a 00 02 	add	r2,r7,r10
8002feb4:	fa c8 fe 80 	sub	r8,sp,-384
8002feb8:	04 91       	mov	r1,r2
8002feba:	ee c5 ff ff 	sub	r5,r7,-1
8002febe:	40 73       	lddsp	r3,sp[0x1c]
8002fec0:	40 c9       	lddsp	r9,sp[0x30]
8002fec2:	2f f3       	sub	r3,-1
8002fec4:	fa cb ff c0 	sub	r11,sp,-64
8002fec8:	0e 03       	add	r3,r7
8002feca:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002fece:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002fed2:	50 8b       	stdsp	sp[0x20],r11
8002fed4:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002fed8:	0c 94       	mov	r4,r6
8002feda:	c2 d8       	rjmp	8002ff34 <__kernel_rem_pio2+0x374>
8002fedc:	66 0c       	ld.w	r12,r3[0x0]
8002fede:	e0 a0 08 6c 	rcall	80030fb6 <__avr32_s32_to_f64>
8002fee2:	30 08       	mov	r8,0
8002fee4:	e4 eb 00 00 	st.d	r2[0],r10
8002fee8:	30 09       	mov	r9,0
8002feea:	fa ca fe 80 	sub	r10,sp,-384
8002feee:	40 a0       	lddsp	r0,sp[0x28]
8002fef0:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002fef4:	30 06       	mov	r6,0
8002fef6:	fa e9 00 04 	st.d	sp[4],r8
8002fefa:	c1 08       	rjmp	8002ff1a <__kernel_rem_pio2+0x35a>
8002fefc:	ee e8 00 00 	ld.d	r8,r7[0]
8002ff00:	a1 0b       	ld.d	r10,r0++
8002ff02:	20 87       	sub	r7,8
8002ff04:	e0 a0 05 fe 	rcall	80030b00 <__avr32_f64_mul>
8002ff08:	2f f6       	sub	r6,-1
8002ff0a:	14 98       	mov	r8,r10
8002ff0c:	16 99       	mov	r9,r11
8002ff0e:	fa ea 00 04 	ld.d	r10,sp[4]
8002ff12:	e0 a0 07 b1 	rcall	80030e74 <__avr32_f64_add>
8002ff16:	fa eb 00 04 	st.d	sp[4],r10
8002ff1a:	40 58       	lddsp	r8,sp[0x14]
8002ff1c:	10 36       	cp.w	r6,r8
8002ff1e:	fe 9a ff ef 	brle	8002fefc <__kernel_rem_pio2+0x33c>
8002ff22:	40 89       	lddsp	r9,sp[0x20]
8002ff24:	fa ea 00 04 	ld.d	r10,sp[4]
8002ff28:	2f f5       	sub	r5,-1
8002ff2a:	b3 2a       	st.d	r9++,r10
8002ff2c:	2f c3       	sub	r3,-4
8002ff2e:	50 89       	stdsp	sp[0x20],r9
8002ff30:	2f 82       	sub	r2,-8
8002ff32:	2f f1       	sub	r1,-1
8002ff34:	40 d8       	lddsp	r8,sp[0x34]
8002ff36:	10 35       	cp.w	r5,r8
8002ff38:	fe 9a ff d2 	brle	8002fedc <__kernel_rem_pio2+0x31c>
8002ff3c:	08 96       	mov	r6,r4
8002ff3e:	10 97       	mov	r7,r8
8002ff40:	cb 5a       	rjmp	8002fcaa <__kernel_rem_pio2+0xea>
8002ff42:	50 50       	stdsp	sp[0x14],r0
8002ff44:	08 95       	mov	r5,r4
8002ff46:	40 e4       	lddsp	r4,sp[0x38]
8002ff48:	58 0c       	cp.w	r12,0
8002ff4a:	c1 30       	breq	8002ff70 <__kernel_rem_pio2+0x3b0>
8002ff4c:	c0 48       	rjmp	8002ff54 <__kernel_rem_pio2+0x394>
8002ff4e:	08 95       	mov	r5,r4
8002ff50:	50 50       	stdsp	sp[0x14],r0
8002ff52:	40 e4       	lddsp	r4,sp[0x38]
8002ff54:	20 17       	sub	r7,1
8002ff56:	fa c8 fd e0 	sub	r8,sp,-544
8002ff5a:	21 86       	sub	r6,24
8002ff5c:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002ff60:	c0 38       	rjmp	8002ff66 <__kernel_rem_pio2+0x3a6>
8002ff62:	20 17       	sub	r7,1
8002ff64:	21 86       	sub	r6,24
8002ff66:	70 09       	ld.w	r9,r8[0x0]
8002ff68:	20 48       	sub	r8,4
8002ff6a:	58 09       	cp.w	r9,0
8002ff6c:	cf b0       	breq	8002ff62 <__kernel_rem_pio2+0x3a2>
8002ff6e:	c4 48       	rjmp	8002fff6 <__kernel_rem_pio2+0x436>
8002ff70:	fa ea 00 04 	ld.d	r10,sp[4]
8002ff74:	ec 0c 11 00 	rsub	r12,r6,0
8002ff78:	e0 a0 05 40 	rcall	800309f8 <scalbn>
8002ff7c:	30 08       	mov	r8,0
8002ff7e:	14 90       	mov	r0,r10
8002ff80:	16 91       	mov	r1,r11
8002ff82:	fc 19 41 70 	movh	r9,0x4170
8002ff86:	ee 03 15 02 	lsl	r3,r7,0x2
8002ff8a:	e0 a0 08 99 	rcall	800310bc <__avr32_f64_cmp_ge>
8002ff8e:	c2 a0       	breq	8002ffe2 <__kernel_rem_pio2+0x422>
8002ff90:	30 08       	mov	r8,0
8002ff92:	fc 19 3e 70 	movh	r9,0x3e70
8002ff96:	00 9a       	mov	r10,r0
8002ff98:	02 9b       	mov	r11,r1
8002ff9a:	e0 a0 05 b3 	rcall	80030b00 <__avr32_f64_mul>
8002ff9e:	e0 a0 07 f5 	rcall	80030f88 <__avr32_f64_to_s32>
8002ffa2:	e0 a0 08 0a 	rcall	80030fb6 <__avr32_s32_to_f64>
8002ffa6:	30 08       	mov	r8,0
8002ffa8:	fc 19 c1 70 	movh	r9,0xc170
8002ffac:	fa eb 00 04 	st.d	sp[4],r10
8002ffb0:	e0 a0 05 a8 	rcall	80030b00 <__avr32_f64_mul>
8002ffb4:	16 99       	mov	r9,r11
8002ffb6:	14 98       	mov	r8,r10
8002ffb8:	02 9b       	mov	r11,r1
8002ffba:	00 9a       	mov	r10,r0
8002ffbc:	e0 a0 07 5c 	rcall	80030e74 <__avr32_f64_add>
8002ffc0:	e0 a0 07 e4 	rcall	80030f88 <__avr32_f64_to_s32>
8002ffc4:	fa cb fd 90 	sub	r11,sp,-624
8002ffc8:	f6 03 00 03 	add	r3,r11,r3
8002ffcc:	2f f7       	sub	r7,-1
8002ffce:	e7 4c ff b0 	st.w	r3[-80],r12
8002ffd2:	fa c9 fd 90 	sub	r9,sp,-624
8002ffd6:	fa ea 00 04 	ld.d	r10,sp[4]
8002ffda:	2e 86       	sub	r6,-24
8002ffdc:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002ffe0:	c0 78       	rjmp	8002ffee <__kernel_rem_pio2+0x42e>
8002ffe2:	fa c8 fd 90 	sub	r8,sp,-624
8002ffe6:	00 9a       	mov	r10,r0
8002ffe8:	f0 03 00 03 	add	r3,r8,r3
8002ffec:	02 9b       	mov	r11,r1
8002ffee:	e0 a0 07 cd 	rcall	80030f88 <__avr32_f64_to_s32>
8002fff2:	e7 4c ff b0 	st.w	r3[-80],r12
8002fff6:	0c 9c       	mov	r12,r6
8002fff8:	30 0a       	mov	r10,0
8002fffa:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fffe:	fa c3 fd e0 	sub	r3,sp,-544
80030002:	e0 a0 04 fb 	rcall	800309f8 <scalbn>
80030006:	fa c2 ff c0 	sub	r2,sp,-64
8003000a:	0e 96       	mov	r6,r7
8003000c:	14 90       	mov	r0,r10
8003000e:	16 91       	mov	r1,r11
80030010:	e6 07 00 23 	add	r3,r3,r7<<0x2
80030014:	e4 07 00 32 	add	r2,r2,r7<<0x3
80030018:	c1 88       	rjmp	80030048 <__kernel_rem_pio2+0x488>
8003001a:	66 0c       	ld.w	r12,r3[0x0]
8003001c:	e0 a0 07 cd 	rcall	80030fb6 <__avr32_s32_to_f64>
80030020:	14 98       	mov	r8,r10
80030022:	16 99       	mov	r9,r11
80030024:	00 9a       	mov	r10,r0
80030026:	02 9b       	mov	r11,r1
80030028:	e0 a0 05 6c 	rcall	80030b00 <__avr32_f64_mul>
8003002c:	30 08       	mov	r8,0
8003002e:	e4 eb 00 00 	st.d	r2[0],r10
80030032:	fc 19 3e 70 	movh	r9,0x3e70
80030036:	00 9a       	mov	r10,r0
80030038:	02 9b       	mov	r11,r1
8003003a:	20 16       	sub	r6,1
8003003c:	e0 a0 05 62 	rcall	80030b00 <__avr32_f64_mul>
80030040:	20 43       	sub	r3,4
80030042:	20 82       	sub	r2,8
80030044:	14 90       	mov	r0,r10
80030046:	16 91       	mov	r1,r11
80030048:	58 06       	cp.w	r6,0
8003004a:	ce 84       	brge	8003001a <__kernel_rem_pio2+0x45a>
8003004c:	fa cc ff 20 	sub	r12,sp,-224
80030050:	0a 91       	mov	r1,r5
80030052:	0e 93       	mov	r3,r7
80030054:	30 02       	mov	r2,0
80030056:	18 96       	mov	r6,r12
80030058:	0e 95       	mov	r5,r7
8003005a:	c1 c8       	rjmp	80030092 <__kernel_rem_pio2+0x4d2>
8003005c:	ad 09       	ld.d	r8,r6++
8003005e:	2f f7       	sub	r7,-1
80030060:	a1 0b       	ld.d	r10,r0++
80030062:	e0 a0 05 4f 	rcall	80030b00 <__avr32_f64_mul>
80030066:	14 98       	mov	r8,r10
80030068:	16 99       	mov	r9,r11
8003006a:	fa ea 00 04 	ld.d	r10,sp[4]
8003006e:	e0 a0 07 03 	rcall	80030e74 <__avr32_f64_add>
80030072:	fa eb 00 04 	st.d	sp[4],r10
80030076:	40 3b       	lddsp	r11,sp[0xc]
80030078:	16 37       	cp.w	r7,r11
8003007a:	e0 89 00 05 	brgt	80030084 <__kernel_rem_pio2+0x4c4>
8003007e:	04 37       	cp.w	r7,r2
80030080:	fe 9a ff ee 	brle	8003005c <__kernel_rem_pio2+0x49c>
80030084:	06 96       	mov	r6,r3
80030086:	fa e8 00 04 	ld.d	r8,sp[4]
8003008a:	40 73       	lddsp	r3,sp[0x1c]
8003008c:	ad 28       	st.d	r6++,r8
8003008e:	20 13       	sub	r3,1
80030090:	2f f2       	sub	r2,-1
80030092:	58 03       	cp.w	r3,0
80030094:	c0 f5       	brlt	800300b2 <__kernel_rem_pio2+0x4f2>
80030096:	fa c8 ff c0 	sub	r8,sp,-64
8003009a:	30 0a       	mov	r10,0
8003009c:	f0 03 00 3c 	add	r12,r8,r3<<0x3
800300a0:	30 0b       	mov	r11,0
800300a2:	50 73       	stdsp	sp[0x1c],r3
800300a4:	4d 00       	lddpc	r0,800301e4 <__kernel_rem_pio2+0x624>
800300a6:	0c 93       	mov	r3,r6
800300a8:	fa eb 00 04 	st.d	sp[4],r10
800300ac:	30 07       	mov	r7,0
800300ae:	18 96       	mov	r6,r12
800300b0:	ce 3b       	rjmp	80030076 <__kernel_rem_pio2+0x4b6>
800300b2:	0a 97       	mov	r7,r5
800300b4:	40 6a       	lddsp	r10,sp[0x18]
800300b6:	02 95       	mov	r5,r1
800300b8:	58 2a       	cp.w	r10,2
800300ba:	e0 89 00 07 	brgt	800300c8 <__kernel_rem_pio2+0x508>
800300be:	58 1a       	cp.w	r10,1
800300c0:	c1 14       	brge	800300e2 <__kernel_rem_pio2+0x522>
800300c2:	58 0a       	cp.w	r10,0
800300c4:	c1 70       	breq	800300f2 <__kernel_rem_pio2+0x532>
800300c6:	ce 68       	rjmp	80030292 <__kernel_rem_pio2+0x6d2>
800300c8:	40 69       	lddsp	r9,sp[0x18]
800300ca:	58 39       	cp.w	r9,3
800300cc:	e0 81 00 e3 	brne	80030292 <__kernel_rem_pio2+0x6d2>
800300d0:	ee c6 00 01 	sub	r6,r7,1
800300d4:	fa c8 ff 20 	sub	r8,sp,-224
800300d8:	0e 92       	mov	r2,r7
800300da:	f0 06 00 36 	add	r6,r8,r6<<0x3
800300de:	0c 93       	mov	r3,r6
800300e0:	c7 d8       	rjmp	800301da <__kernel_rem_pio2+0x61a>
800300e2:	fa c6 ff 20 	sub	r6,sp,-224
800300e6:	30 0c       	mov	r12,0
800300e8:	ec 07 00 36 	add	r6,r6,r7<<0x3
800300ec:	0e 93       	mov	r3,r7
800300ee:	18 9a       	mov	r10,r12
800300f0:	c2 98       	rjmp	80030142 <__kernel_rem_pio2+0x582>
800300f2:	40 6c       	lddsp	r12,sp[0x18]
800300f4:	0e 96       	mov	r6,r7
800300f6:	fa c8 ff 20 	sub	r8,sp,-224
800300fa:	18 9a       	mov	r10,r12
800300fc:	f0 07 00 37 	add	r7,r8,r7<<0x3
80030100:	c0 a8       	rjmp	80030114 <__kernel_rem_pio2+0x554>
80030102:	ee e8 00 00 	ld.d	r8,r7[0]
80030106:	18 9b       	mov	r11,r12
80030108:	20 87       	sub	r7,8
8003010a:	06 9a       	mov	r10,r3
8003010c:	20 16       	sub	r6,1
8003010e:	e0 a0 06 b3 	rcall	80030e74 <__avr32_f64_add>
80030112:	16 9c       	mov	r12,r11
80030114:	14 93       	mov	r3,r10
80030116:	58 06       	cp.w	r6,0
80030118:	cf 54       	brge	80030102 <__kernel_rem_pio2+0x542>
8003011a:	18 98       	mov	r8,r12
8003011c:	ee 18 80 00 	eorh	r8,0x8000
80030120:	58 05       	cp.w	r5,0
80030122:	f0 0c 17 10 	movne	r12,r8
80030126:	14 98       	mov	r8,r10
80030128:	18 99       	mov	r9,r12
8003012a:	e8 e9 00 00 	st.d	r4[0],r8
8003012e:	cb 28       	rjmp	80030292 <__kernel_rem_pio2+0x6d2>
80030130:	ec e8 00 00 	ld.d	r8,r6[0]
80030134:	18 9b       	mov	r11,r12
80030136:	04 9a       	mov	r10,r2
80030138:	20 13       	sub	r3,1
8003013a:	e0 a0 06 9d 	rcall	80030e74 <__avr32_f64_add>
8003013e:	20 86       	sub	r6,8
80030140:	16 9c       	mov	r12,r11
80030142:	14 92       	mov	r2,r10
80030144:	58 03       	cp.w	r3,0
80030146:	cf 54       	brge	80030130 <__kernel_rem_pio2+0x570>
80030148:	18 9b       	mov	r11,r12
8003014a:	18 98       	mov	r8,r12
8003014c:	ee 18 80 00 	eorh	r8,0x8000
80030150:	58 05       	cp.w	r5,0
80030152:	f0 0c 17 10 	movne	r12,r8
80030156:	18 93       	mov	r3,r12
80030158:	14 92       	mov	r2,r10
8003015a:	16 99       	mov	r9,r11
8003015c:	e8 e3 00 00 	st.d	r4[0],r2
80030160:	14 98       	mov	r8,r10
80030162:	fa c3 ff 18 	sub	r3,sp,-232
80030166:	fa ea 00 e0 	ld.d	r10,sp[224]
8003016a:	30 16       	mov	r6,1
8003016c:	e0 a0 05 b6 	rcall	80030cd8 <__avr32_f64_sub>
80030170:	c0 78       	rjmp	8003017e <__kernel_rem_pio2+0x5be>
80030172:	2f f6       	sub	r6,-1
80030174:	a7 09       	ld.d	r8,r3++
80030176:	18 9b       	mov	r11,r12
80030178:	04 9a       	mov	r10,r2
8003017a:	e0 a0 06 7d 	rcall	80030e74 <__avr32_f64_add>
8003017e:	16 9c       	mov	r12,r11
80030180:	14 92       	mov	r2,r10
80030182:	0e 36       	cp.w	r6,r7
80030184:	fe 9a ff f7 	brle	80030172 <__kernel_rem_pio2+0x5b2>
80030188:	16 98       	mov	r8,r11
8003018a:	ee 18 80 00 	eorh	r8,0x8000
8003018e:	58 05       	cp.w	r5,0
80030190:	f0 0c 17 10 	movne	r12,r8
80030194:	14 98       	mov	r8,r10
80030196:	18 99       	mov	r9,r12
80030198:	e8 e9 00 08 	st.d	r4[8],r8
8003019c:	c7 b8       	rjmp	80030292 <__kernel_rem_pio2+0x6d2>
8003019e:	e6 e0 00 00 	ld.d	r0,r3[0]
800301a2:	e6 e8 00 08 	ld.d	r8,r3[8]
800301a6:	00 9a       	mov	r10,r0
800301a8:	02 9b       	mov	r11,r1
800301aa:	e0 a0 06 65 	rcall	80030e74 <__avr32_f64_add>
800301ae:	fa eb 00 0c 	st.d	sp[12],r10
800301b2:	14 98       	mov	r8,r10
800301b4:	16 99       	mov	r9,r11
800301b6:	00 9a       	mov	r10,r0
800301b8:	02 9b       	mov	r11,r1
800301ba:	e0 a0 05 8f 	rcall	80030cd8 <__avr32_f64_sub>
800301be:	14 98       	mov	r8,r10
800301c0:	16 99       	mov	r9,r11
800301c2:	e6 ea 00 08 	ld.d	r10,r3[8]
800301c6:	e0 a0 06 57 	rcall	80030e74 <__avr32_f64_add>
800301ca:	fa e8 00 0c 	ld.d	r8,sp[12]
800301ce:	e6 eb 00 08 	st.d	r3[8],r10
800301d2:	e6 e9 00 00 	st.d	r3[0],r8
800301d6:	20 12       	sub	r2,1
800301d8:	20 83       	sub	r3,8
800301da:	58 02       	cp.w	r2,0
800301dc:	fe 99 ff e1 	brgt	8003019e <__kernel_rem_pio2+0x5de>
800301e0:	0e 93       	mov	r3,r7
800301e2:	c2 18       	rjmp	80030224 <__kernel_rem_pio2+0x664>
800301e4:	80 03       	ld.sh	r3,r0[0x0]
800301e6:	25 58       	sub	r8,85
800301e8:	ec e0 00 00 	ld.d	r0,r6[0]
800301ec:	ec e8 00 08 	ld.d	r8,r6[8]
800301f0:	00 9a       	mov	r10,r0
800301f2:	02 9b       	mov	r11,r1
800301f4:	e0 a0 06 40 	rcall	80030e74 <__avr32_f64_add>
800301f8:	fa eb 00 0c 	st.d	sp[12],r10
800301fc:	14 98       	mov	r8,r10
800301fe:	16 99       	mov	r9,r11
80030200:	00 9a       	mov	r10,r0
80030202:	02 9b       	mov	r11,r1
80030204:	e0 a0 05 6a 	rcall	80030cd8 <__avr32_f64_sub>
80030208:	14 98       	mov	r8,r10
8003020a:	16 99       	mov	r9,r11
8003020c:	ec ea 00 08 	ld.d	r10,r6[8]
80030210:	e0 a0 06 32 	rcall	80030e74 <__avr32_f64_add>
80030214:	fa e8 00 0c 	ld.d	r8,sp[12]
80030218:	ec eb 00 08 	st.d	r6[8],r10
8003021c:	ec e9 00 00 	st.d	r6[0],r8
80030220:	20 13       	sub	r3,1
80030222:	20 86       	sub	r6,8
80030224:	58 13       	cp.w	r3,1
80030226:	fe 99 ff e1 	brgt	800301e8 <__kernel_rem_pio2+0x628>
8003022a:	0e 96       	mov	r6,r7
8003022c:	fa c8 ff 20 	sub	r8,sp,-224
80030230:	30 0c       	mov	r12,0
80030232:	f0 07 00 37 	add	r7,r8,r7<<0x3
80030236:	18 9a       	mov	r10,r12
80030238:	c0 a8       	rjmp	8003024c <__kernel_rem_pio2+0x68c>
8003023a:	ee e8 00 00 	ld.d	r8,r7[0]
8003023e:	18 9b       	mov	r11,r12
80030240:	20 87       	sub	r7,8
80030242:	06 9a       	mov	r10,r3
80030244:	20 16       	sub	r6,1
80030246:	e0 a0 06 17 	rcall	80030e74 <__avr32_f64_add>
8003024a:	16 9c       	mov	r12,r11
8003024c:	14 93       	mov	r3,r10
8003024e:	58 16       	cp.w	r6,1
80030250:	fe 99 ff f5 	brgt	8003023a <__kernel_rem_pio2+0x67a>
80030254:	58 05       	cp.w	r5,0
80030256:	c0 e1       	brne	80030272 <__kernel_rem_pio2+0x6b2>
80030258:	fa e8 00 e0 	ld.d	r8,sp[224]
8003025c:	e8 e9 00 00 	st.d	r4[0],r8
80030260:	fa e8 00 e8 	ld.d	r8,sp[232]
80030264:	e8 e9 00 08 	st.d	r4[8],r8
80030268:	18 99       	mov	r9,r12
8003026a:	14 98       	mov	r8,r10
8003026c:	e8 e9 00 10 	st.d	r4[16],r8
80030270:	c1 18       	rjmp	80030292 <__kernel_rem_pio2+0x6d2>
80030272:	89 5a       	st.w	r4[0x14],r10
80030274:	ee 1c 80 00 	eorh	r12,0x8000
80030278:	89 4c       	st.w	r4[0x10],r12
8003027a:	43 88       	lddsp	r8,sp[0xe0]
8003027c:	ee 18 80 00 	eorh	r8,0x8000
80030280:	89 08       	st.w	r4[0x0],r8
80030282:	43 98       	lddsp	r8,sp[0xe4]
80030284:	89 18       	st.w	r4[0x4],r8
80030286:	43 a8       	lddsp	r8,sp[0xe8]
80030288:	ee 18 80 00 	eorh	r8,0x8000
8003028c:	89 28       	st.w	r4[0x8],r8
8003028e:	43 b8       	lddsp	r8,sp[0xec]
80030290:	89 38       	st.w	r4[0xc],r8
80030292:	40 58       	lddsp	r8,sp[0x14]
80030294:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80030298:	fe 3d fd 90 	sub	sp,-624
8003029c:	d8 32       	popm	r0-r7,pc
8003029e:	d7 03       	nop

800302a0 <__kernel_sin>:
800302a0:	d4 31       	pushm	r0-r7,lr
800302a2:	20 4d       	sub	sp,16
800302a4:	fa e9 00 08 	st.d	sp[8],r8
800302a8:	50 0c       	stdsp	sp[0x0],r12
800302aa:	14 96       	mov	r6,r10
800302ac:	16 97       	mov	r7,r11
800302ae:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
800302b2:	e0 69 ff ff 	mov	r9,65535
800302b6:	ea 19 3e 3f 	orh	r9,0x3e3f
800302ba:	12 38       	cp.w	r8,r9
800302bc:	e0 89 00 06 	brgt	800302c8 <__kernel_sin+0x28>
800302c0:	e0 a0 06 64 	rcall	80030f88 <__avr32_f64_to_s32>
800302c4:	e0 80 00 b3 	breq	8003042a <__kernel_sin+0x18a>
800302c8:	0c 98       	mov	r8,r6
800302ca:	0e 99       	mov	r9,r7
800302cc:	0c 9a       	mov	r10,r6
800302ce:	0e 9b       	mov	r11,r7
800302d0:	e0 a0 04 18 	rcall	80030b00 <__avr32_f64_mul>
800302d4:	0c 98       	mov	r8,r6
800302d6:	14 94       	mov	r4,r10
800302d8:	16 95       	mov	r5,r11
800302da:	0e 99       	mov	r9,r7
800302dc:	e0 a0 04 12 	rcall	80030b00 <__avr32_f64_mul>
800302e0:	e0 68 d5 7c 	mov	r8,54652
800302e4:	ea 18 5a cf 	orh	r8,0x5acf
800302e8:	e0 69 d9 3a 	mov	r9,55610
800302ec:	ea 19 3d e5 	orh	r9,0x3de5
800302f0:	14 90       	mov	r0,r10
800302f2:	16 91       	mov	r1,r11
800302f4:	08 9a       	mov	r10,r4
800302f6:	0a 9b       	mov	r11,r5
800302f8:	e0 a0 04 04 	rcall	80030b00 <__avr32_f64_mul>
800302fc:	e0 68 9c eb 	mov	r8,40171
80030300:	ea 18 8a 2b 	orh	r8,0x8a2b
80030304:	e0 69 e5 e6 	mov	r9,58854
80030308:	ea 19 3e 5a 	orh	r9,0x3e5a
8003030c:	e0 a0 04 e6 	rcall	80030cd8 <__avr32_f64_sub>
80030310:	14 98       	mov	r8,r10
80030312:	16 99       	mov	r9,r11
80030314:	08 9a       	mov	r10,r4
80030316:	0a 9b       	mov	r11,r5
80030318:	e0 a0 03 f4 	rcall	80030b00 <__avr32_f64_mul>
8003031c:	e0 68 fe 7d 	mov	r8,65149
80030320:	ea 18 57 b1 	orh	r8,0x57b1
80030324:	e0 69 1d e3 	mov	r9,7651
80030328:	ea 19 3e c7 	orh	r9,0x3ec7
8003032c:	e0 a0 05 a4 	rcall	80030e74 <__avr32_f64_add>
80030330:	14 98       	mov	r8,r10
80030332:	16 99       	mov	r9,r11
80030334:	08 9a       	mov	r10,r4
80030336:	0a 9b       	mov	r11,r5
80030338:	e0 a0 03 e4 	rcall	80030b00 <__avr32_f64_mul>
8003033c:	e0 68 61 d5 	mov	r8,25045
80030340:	ea 18 19 c1 	orh	r8,0x19c1
80030344:	e0 69 01 a0 	mov	r9,416
80030348:	ea 19 3f 2a 	orh	r9,0x3f2a
8003034c:	e0 a0 04 c6 	rcall	80030cd8 <__avr32_f64_sub>
80030350:	14 98       	mov	r8,r10
80030352:	16 99       	mov	r9,r11
80030354:	08 9a       	mov	r10,r4
80030356:	0a 9b       	mov	r11,r5
80030358:	e0 a0 03 d4 	rcall	80030b00 <__avr32_f64_mul>
8003035c:	e0 68 f8 a6 	mov	r8,63654
80030360:	ea 18 11 10 	orh	r8,0x1110
80030364:	e0 69 11 11 	mov	r9,4369
80030368:	ea 19 3f 81 	orh	r9,0x3f81
8003036c:	e0 a0 05 84 	rcall	80030e74 <__avr32_f64_add>
80030370:	40 08       	lddsp	r8,sp[0x0]
80030372:	14 92       	mov	r2,r10
80030374:	16 93       	mov	r3,r11
80030376:	58 08       	cp.w	r8,0
80030378:	c1 e1       	brne	800303b4 <__kernel_sin+0x114>
8003037a:	14 98       	mov	r8,r10
8003037c:	06 99       	mov	r9,r3
8003037e:	08 9a       	mov	r10,r4
80030380:	0a 9b       	mov	r11,r5
80030382:	e0 a0 03 bf 	rcall	80030b00 <__avr32_f64_mul>
80030386:	e0 68 55 49 	mov	r8,21833
8003038a:	ea 18 55 55 	orh	r8,0x5555
8003038e:	e0 69 55 55 	mov	r9,21845
80030392:	ea 19 3f c5 	orh	r9,0x3fc5
80030396:	e0 a0 04 a1 	rcall	80030cd8 <__avr32_f64_sub>
8003039a:	14 98       	mov	r8,r10
8003039c:	16 99       	mov	r9,r11
8003039e:	00 9a       	mov	r10,r0
800303a0:	02 9b       	mov	r11,r1
800303a2:	e0 a0 03 af 	rcall	80030b00 <__avr32_f64_mul>
800303a6:	14 98       	mov	r8,r10
800303a8:	16 99       	mov	r9,r11
800303aa:	0c 9a       	mov	r10,r6
800303ac:	0e 9b       	mov	r11,r7
800303ae:	e0 a0 05 63 	rcall	80030e74 <__avr32_f64_add>
800303b2:	c3 a8       	rjmp	80030426 <__kernel_sin+0x186>
800303b4:	30 08       	mov	r8,0
800303b6:	fc 19 3f e0 	movh	r9,0x3fe0
800303ba:	fa ea 00 08 	ld.d	r10,sp[8]
800303be:	e0 a0 03 a1 	rcall	80030b00 <__avr32_f64_mul>
800303c2:	04 98       	mov	r8,r2
800303c4:	fa eb 00 00 	st.d	sp[0],r10
800303c8:	06 99       	mov	r9,r3
800303ca:	00 9a       	mov	r10,r0
800303cc:	02 9b       	mov	r11,r1
800303ce:	e0 a0 03 99 	rcall	80030b00 <__avr32_f64_mul>
800303d2:	14 98       	mov	r8,r10
800303d4:	16 99       	mov	r9,r11
800303d6:	fa ea 00 00 	ld.d	r10,sp[0]
800303da:	e0 a0 04 7f 	rcall	80030cd8 <__avr32_f64_sub>
800303de:	14 98       	mov	r8,r10
800303e0:	16 99       	mov	r9,r11
800303e2:	08 9a       	mov	r10,r4
800303e4:	0a 9b       	mov	r11,r5
800303e6:	e0 a0 03 8d 	rcall	80030b00 <__avr32_f64_mul>
800303ea:	fa e8 00 08 	ld.d	r8,sp[8]
800303ee:	e0 a0 04 75 	rcall	80030cd8 <__avr32_f64_sub>
800303f2:	e0 68 55 49 	mov	r8,21833
800303f6:	ea 18 55 55 	orh	r8,0x5555
800303fa:	14 94       	mov	r4,r10
800303fc:	16 95       	mov	r5,r11
800303fe:	e0 69 55 55 	mov	r9,21845
80030402:	ea 19 3f c5 	orh	r9,0x3fc5
80030406:	00 9a       	mov	r10,r0
80030408:	02 9b       	mov	r11,r1
8003040a:	e0 a0 03 7b 	rcall	80030b00 <__avr32_f64_mul>
8003040e:	14 98       	mov	r8,r10
80030410:	16 99       	mov	r9,r11
80030412:	08 9a       	mov	r10,r4
80030414:	0a 9b       	mov	r11,r5
80030416:	e0 a0 05 2f 	rcall	80030e74 <__avr32_f64_add>
8003041a:	14 98       	mov	r8,r10
8003041c:	16 99       	mov	r9,r11
8003041e:	0c 9a       	mov	r10,r6
80030420:	0e 9b       	mov	r11,r7
80030422:	e0 a0 04 5b 	rcall	80030cd8 <__avr32_f64_sub>
80030426:	14 96       	mov	r6,r10
80030428:	16 97       	mov	r7,r11
8003042a:	0c 9a       	mov	r10,r6
8003042c:	0e 9b       	mov	r11,r7
8003042e:	2f cd       	sub	sp,-16
80030430:	d8 32       	popm	r0-r7,pc
80030432:	d7 03       	nop

80030434 <atan>:
80030434:	d4 31       	pushm	r0-r7,lr
80030436:	20 1d       	sub	sp,4
80030438:	50 0b       	stdsp	sp[0x0],r11
8003043a:	16 96       	mov	r6,r11
8003043c:	14 97       	mov	r7,r10
8003043e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
80030442:	e0 68 ff ff 	mov	r8,65535
80030446:	ea 18 44 0f 	orh	r8,0x440f
8003044a:	10 33       	cp.w	r3,r8
8003044c:	e0 8a 00 24 	brle	80030494 <atan+0x60>
80030450:	fc 1c 7f f0 	movh	r12,0x7ff0
80030454:	18 33       	cp.w	r3,r12
80030456:	e0 89 00 08 	brgt	80030466 <atan+0x32>
8003045a:	5f 0c       	sreq	r12
8003045c:	58 0a       	cp.w	r10,0
8003045e:	5f 18       	srne	r8
80030460:	f9 e8 00 08 	and	r8,r12,r8
80030464:	c0 80       	breq	80030474 <atan+0x40>
80030466:	0c 9b       	mov	r11,r6
80030468:	0e 9a       	mov	r10,r7
8003046a:	0c 99       	mov	r9,r6
8003046c:	0e 98       	mov	r8,r7
8003046e:	e0 a0 05 03 	rcall	80030e74 <__avr32_f64_add>
80030472:	c5 a9       	rjmp	80030726 <atan+0x2f2>
80030474:	e0 68 21 fb 	mov	r8,8699
80030478:	ea 18 bf f9 	orh	r8,0xbff9
8003047c:	e0 66 21 fb 	mov	r6,8699
80030480:	ea 16 3f f9 	orh	r6,0x3ff9
80030484:	e0 67 2d 18 	mov	r7,11544
80030488:	ea 17 54 44 	orh	r7,0x5444
8003048c:	58 0b       	cp.w	r11,0
8003048e:	f0 06 17 a0 	movle	r6,r8
80030492:	c6 e9       	rjmp	8003076e <atan+0x33a>
80030494:	e0 68 ff ff 	mov	r8,65535
80030498:	ea 18 3f db 	orh	r8,0x3fdb
8003049c:	10 33       	cp.w	r3,r8
8003049e:	e0 89 00 1d 	brgt	800304d8 <atan+0xa4>
800304a2:	e0 6c ff ff 	mov	r12,65535
800304a6:	ea 1c 3e 1f 	orh	r12,0x3e1f
800304aa:	18 33       	cp.w	r3,r12
800304ac:	e0 89 00 73 	brgt	80030592 <atan+0x15e>
800304b0:	e0 68 75 9c 	mov	r8,30108
800304b4:	ea 18 88 00 	orh	r8,0x8800
800304b8:	e0 69 e4 3c 	mov	r9,58428
800304bc:	ea 19 7e 37 	orh	r9,0x7e37
800304c0:	0c 9b       	mov	r11,r6
800304c2:	e0 a0 04 d9 	rcall	80030e74 <__avr32_f64_add>
800304c6:	14 98       	mov	r8,r10
800304c8:	16 99       	mov	r9,r11
800304ca:	30 0a       	mov	r10,0
800304cc:	fc 1b 3f f0 	movh	r11,0x3ff0
800304d0:	e0 a0 06 2a 	rcall	80031124 <__avr32_f64_cmp_lt>
800304d4:	c5 f0       	breq	80030592 <atan+0x15e>
800304d6:	c4 c9       	rjmp	8003076e <atan+0x33a>
800304d8:	0c 9b       	mov	r11,r6
800304da:	c5 3d       	rcall	80030780 <fabs>
800304dc:	e0 68 ff ff 	mov	r8,65535
800304e0:	ea 18 3f f2 	orh	r8,0x3ff2
800304e4:	14 94       	mov	r4,r10
800304e6:	16 95       	mov	r5,r11
800304e8:	10 33       	cp.w	r3,r8
800304ea:	e0 89 00 33 	brgt	80030550 <atan+0x11c>
800304ee:	e0 6c ff ff 	mov	r12,65535
800304f2:	ea 1c 3f e5 	orh	r12,0x3fe5
800304f6:	18 33       	cp.w	r3,r12
800304f8:	e0 89 00 14 	brgt	80030520 <atan+0xec>
800304fc:	0a 99       	mov	r9,r5
800304fe:	14 98       	mov	r8,r10
80030500:	e0 a0 04 ba 	rcall	80030e74 <__avr32_f64_add>
80030504:	30 08       	mov	r8,0
80030506:	fc 19 3f f0 	movh	r9,0x3ff0
8003050a:	e0 a0 03 e7 	rcall	80030cd8 <__avr32_f64_sub>
8003050e:	30 08       	mov	r8,0
80030510:	14 96       	mov	r6,r10
80030512:	16 97       	mov	r7,r11
80030514:	08 9a       	mov	r10,r4
80030516:	0a 9b       	mov	r11,r5
80030518:	fc 19 40 00 	movh	r9,0x4000
8003051c:	30 05       	mov	r5,0
8003051e:	c0 e8       	rjmp	8003053a <atan+0x106>
80030520:	30 08       	mov	r8,0
80030522:	fc 19 3f f0 	movh	r9,0x3ff0
80030526:	e0 a0 03 d9 	rcall	80030cd8 <__avr32_f64_sub>
8003052a:	30 08       	mov	r8,0
8003052c:	14 96       	mov	r6,r10
8003052e:	16 97       	mov	r7,r11
80030530:	08 9a       	mov	r10,r4
80030532:	0a 9b       	mov	r11,r5
80030534:	fc 19 3f f0 	movh	r9,0x3ff0
80030538:	30 15       	mov	r5,1
8003053a:	e0 a0 04 9d 	rcall	80030e74 <__avr32_f64_add>
8003053e:	14 98       	mov	r8,r10
80030540:	16 99       	mov	r9,r11
80030542:	0c 9a       	mov	r10,r6
80030544:	0e 9b       	mov	r11,r7
80030546:	e0 a0 06 3d 	rcall	800311c0 <__avr32_f64_div>
8003054a:	16 96       	mov	r6,r11
8003054c:	14 97       	mov	r7,r10
8003054e:	c2 38       	rjmp	80030594 <atan+0x160>
80030550:	e0 68 7f ff 	mov	r8,32767
80030554:	ea 18 40 03 	orh	r8,0x4003
80030558:	10 33       	cp.w	r3,r8
8003055a:	e0 89 00 15 	brgt	80030584 <atan+0x150>
8003055e:	30 08       	mov	r8,0
80030560:	fc 19 3f f8 	movh	r9,0x3ff8
80030564:	e0 a0 03 ba 	rcall	80030cd8 <__avr32_f64_sub>
80030568:	30 08       	mov	r8,0
8003056a:	16 97       	mov	r7,r11
8003056c:	fc 19 3f f8 	movh	r9,0x3ff8
80030570:	0a 9b       	mov	r11,r5
80030572:	14 96       	mov	r6,r10
80030574:	08 9a       	mov	r10,r4
80030576:	e0 a0 02 c5 	rcall	80030b00 <__avr32_f64_mul>
8003057a:	30 08       	mov	r8,0
8003057c:	fc 19 3f f0 	movh	r9,0x3ff0
80030580:	30 25       	mov	r5,2
80030582:	cd cb       	rjmp	8003053a <atan+0x106>
80030584:	14 98       	mov	r8,r10
80030586:	0a 99       	mov	r9,r5
80030588:	30 0a       	mov	r10,0
8003058a:	fc 1b bf f0 	movh	r11,0xbff0
8003058e:	30 35       	mov	r5,3
80030590:	cd bb       	rjmp	80030546 <atan+0x112>
80030592:	3f f5       	mov	r5,-1
80030594:	0c 99       	mov	r9,r6
80030596:	0e 98       	mov	r8,r7
80030598:	0c 9b       	mov	r11,r6
8003059a:	0e 9a       	mov	r10,r7
8003059c:	e0 a0 02 b2 	rcall	80030b00 <__avr32_f64_mul>
800305a0:	16 91       	mov	r1,r11
800305a2:	14 90       	mov	r0,r10
800305a4:	02 99       	mov	r9,r1
800305a6:	14 98       	mov	r8,r10
800305a8:	e0 a0 02 ac 	rcall	80030b00 <__avr32_f64_mul>
800305ac:	e0 68 da 11 	mov	r8,55825
800305b0:	ea 18 e3 22 	orh	r8,0xe322
800305b4:	14 92       	mov	r2,r10
800305b6:	16 93       	mov	r3,r11
800305b8:	e0 69 ad 3a 	mov	r9,44346
800305bc:	ea 19 3f 90 	orh	r9,0x3f90
800305c0:	e0 a0 02 a0 	rcall	80030b00 <__avr32_f64_mul>
800305c4:	e0 68 0d eb 	mov	r8,3563
800305c8:	ea 18 24 76 	orh	r8,0x2476
800305cc:	e0 69 7b 4b 	mov	r9,31563
800305d0:	ea 19 3f a9 	orh	r9,0x3fa9
800305d4:	e0 a0 04 50 	rcall	80030e74 <__avr32_f64_add>
800305d8:	14 98       	mov	r8,r10
800305da:	16 99       	mov	r9,r11
800305dc:	04 9a       	mov	r10,r2
800305de:	06 9b       	mov	r11,r3
800305e0:	e0 a0 02 90 	rcall	80030b00 <__avr32_f64_mul>
800305e4:	e0 68 3d 51 	mov	r8,15697
800305e8:	ea 18 a0 d0 	orh	r8,0xa0d0
800305ec:	e0 69 0d 66 	mov	r9,3430
800305f0:	ea 19 3f b1 	orh	r9,0x3fb1
800305f4:	e0 a0 04 40 	rcall	80030e74 <__avr32_f64_add>
800305f8:	14 98       	mov	r8,r10
800305fa:	16 99       	mov	r9,r11
800305fc:	04 9a       	mov	r10,r2
800305fe:	06 9b       	mov	r11,r3
80030600:	e0 a0 02 80 	rcall	80030b00 <__avr32_f64_mul>
80030604:	e0 68 20 6e 	mov	r8,8302
80030608:	ea 18 c5 4c 	orh	r8,0xc54c
8003060c:	e0 69 45 cd 	mov	r9,17869
80030610:	ea 19 3f b7 	orh	r9,0x3fb7
80030614:	e0 a0 04 30 	rcall	80030e74 <__avr32_f64_add>
80030618:	14 98       	mov	r8,r10
8003061a:	16 99       	mov	r9,r11
8003061c:	04 9a       	mov	r10,r2
8003061e:	06 9b       	mov	r11,r3
80030620:	e0 a0 02 70 	rcall	80030b00 <__avr32_f64_mul>
80030624:	e0 68 83 ff 	mov	r8,33791
80030628:	ea 18 92 00 	orh	r8,0x9200
8003062c:	e0 69 49 24 	mov	r9,18724
80030630:	ea 19 3f c2 	orh	r9,0x3fc2
80030634:	e0 a0 04 20 	rcall	80030e74 <__avr32_f64_add>
80030638:	14 98       	mov	r8,r10
8003063a:	16 99       	mov	r9,r11
8003063c:	04 9a       	mov	r10,r2
8003063e:	06 9b       	mov	r11,r3
80030640:	e0 a0 02 60 	rcall	80030b00 <__avr32_f64_mul>
80030644:	e0 68 55 0d 	mov	r8,21773
80030648:	ea 18 55 55 	orh	r8,0x5555
8003064c:	e0 69 55 55 	mov	r9,21845
80030650:	ea 19 3f d5 	orh	r9,0x3fd5
80030654:	e0 a0 04 10 	rcall	80030e74 <__avr32_f64_add>
80030658:	14 98       	mov	r8,r10
8003065a:	16 99       	mov	r9,r11
8003065c:	00 9a       	mov	r10,r0
8003065e:	02 9b       	mov	r11,r1
80030660:	e0 a0 02 50 	rcall	80030b00 <__avr32_f64_mul>
80030664:	e0 68 6c 2f 	mov	r8,27695
80030668:	ea 18 2c 6a 	orh	r8,0x2c6a
8003066c:	e0 69 b4 44 	mov	r9,46148
80030670:	ea 19 bf a2 	orh	r9,0xbfa2
80030674:	14 90       	mov	r0,r10
80030676:	16 91       	mov	r1,r11
80030678:	04 9a       	mov	r10,r2
8003067a:	06 9b       	mov	r11,r3
8003067c:	e0 a0 02 42 	rcall	80030b00 <__avr32_f64_mul>
80030680:	e0 68 fd 9a 	mov	r8,64922
80030684:	ea 18 52 de 	orh	r8,0x52de
80030688:	e0 69 de 2d 	mov	r9,56877
8003068c:	ea 19 3f ad 	orh	r9,0x3fad
80030690:	e0 a0 03 24 	rcall	80030cd8 <__avr32_f64_sub>
80030694:	14 98       	mov	r8,r10
80030696:	16 99       	mov	r9,r11
80030698:	04 9a       	mov	r10,r2
8003069a:	06 9b       	mov	r11,r3
8003069c:	e0 a0 02 32 	rcall	80030b00 <__avr32_f64_mul>
800306a0:	e0 68 9a 6d 	mov	r8,39533
800306a4:	ea 18 af 74 	orh	r8,0xaf74
800306a8:	e0 69 b0 f2 	mov	r9,45298
800306ac:	ea 19 3f b3 	orh	r9,0x3fb3
800306b0:	e0 a0 03 14 	rcall	80030cd8 <__avr32_f64_sub>
800306b4:	14 98       	mov	r8,r10
800306b6:	16 99       	mov	r9,r11
800306b8:	04 9a       	mov	r10,r2
800306ba:	06 9b       	mov	r11,r3
800306bc:	e0 a0 02 22 	rcall	80030b00 <__avr32_f64_mul>
800306c0:	e0 68 16 71 	mov	r8,5745
800306c4:	ea 18 fe 23 	orh	r8,0xfe23
800306c8:	e0 69 71 c6 	mov	r9,29126
800306cc:	ea 19 3f bc 	orh	r9,0x3fbc
800306d0:	e0 a0 03 04 	rcall	80030cd8 <__avr32_f64_sub>
800306d4:	14 98       	mov	r8,r10
800306d6:	16 99       	mov	r9,r11
800306d8:	04 9a       	mov	r10,r2
800306da:	06 9b       	mov	r11,r3
800306dc:	e0 a0 02 12 	rcall	80030b00 <__avr32_f64_mul>
800306e0:	e0 68 eb c4 	mov	r8,60356
800306e4:	ea 18 99 98 	orh	r8,0x9998
800306e8:	e0 69 99 99 	mov	r9,39321
800306ec:	ea 19 3f c9 	orh	r9,0x3fc9
800306f0:	e0 a0 02 f4 	rcall	80030cd8 <__avr32_f64_sub>
800306f4:	14 98       	mov	r8,r10
800306f6:	16 99       	mov	r9,r11
800306f8:	04 9a       	mov	r10,r2
800306fa:	06 9b       	mov	r11,r3
800306fc:	e0 a0 02 02 	rcall	80030b00 <__avr32_f64_mul>
80030700:	14 98       	mov	r8,r10
80030702:	16 99       	mov	r9,r11
80030704:	5b f5       	cp.w	r5,-1
80030706:	c1 31       	brne	8003072c <atan+0x2f8>
80030708:	00 9a       	mov	r10,r0
8003070a:	02 9b       	mov	r11,r1
8003070c:	e0 a0 03 b4 	rcall	80030e74 <__avr32_f64_add>
80030710:	14 98       	mov	r8,r10
80030712:	16 99       	mov	r9,r11
80030714:	0e 9a       	mov	r10,r7
80030716:	0c 9b       	mov	r11,r6
80030718:	cf 4d       	rcall	80030b00 <__avr32_f64_mul>
8003071a:	14 98       	mov	r8,r10
8003071c:	16 99       	mov	r9,r11
8003071e:	0e 9a       	mov	r10,r7
80030720:	0c 9b       	mov	r11,r6
80030722:	e0 a0 02 db 	rcall	80030cd8 <__avr32_f64_sub>
80030726:	16 96       	mov	r6,r11
80030728:	14 97       	mov	r7,r10
8003072a:	c2 28       	rjmp	8003076e <atan+0x33a>
8003072c:	00 9a       	mov	r10,r0
8003072e:	02 9b       	mov	r11,r1
80030730:	e0 a0 03 a2 	rcall	80030e74 <__avr32_f64_add>
80030734:	14 98       	mov	r8,r10
80030736:	16 99       	mov	r9,r11
80030738:	0e 9a       	mov	r10,r7
8003073a:	0c 9b       	mov	r11,r6
8003073c:	ce 2d       	rcall	80030b00 <__avr32_f64_mul>
8003073e:	48 f8       	lddpc	r8,80030778 <atan+0x344>
80030740:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
80030744:	e0 a0 02 ca 	rcall	80030cd8 <__avr32_f64_sub>
80030748:	0c 99       	mov	r9,r6
8003074a:	0e 98       	mov	r8,r7
8003074c:	e0 a0 02 c6 	rcall	80030cd8 <__avr32_f64_sub>
80030750:	14 98       	mov	r8,r10
80030752:	16 99       	mov	r9,r11
80030754:	48 aa       	lddpc	r10,8003077c <atan+0x348>
80030756:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
8003075a:	e0 a0 02 bf 	rcall	80030cd8 <__avr32_f64_sub>
8003075e:	40 0c       	lddsp	r12,sp[0x0]
80030760:	16 96       	mov	r6,r11
80030762:	14 97       	mov	r7,r10
80030764:	ee 16 80 00 	eorh	r6,0x8000
80030768:	58 0c       	cp.w	r12,0
8003076a:	c0 25       	brlt	8003076e <atan+0x33a>
8003076c:	16 96       	mov	r6,r11
8003076e:	0c 9b       	mov	r11,r6
80030770:	0e 9a       	mov	r10,r7
80030772:	2f fd       	sub	sp,-4
80030774:	d8 32       	popm	r0-r7,pc
80030776:	d7 03       	nop
80030778:	80 03       	ld.sh	r3,r0[0x0]
8003077a:	25 98       	sub	r8,89
8003077c:	80 03       	ld.sh	r3,r0[0x0]
8003077e:	25 b8       	sub	r8,91

80030780 <fabs>:
80030780:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030784:	12 9b       	mov	r11,r9
80030786:	5e fc       	retal	r12

80030788 <finite>:
80030788:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8003078c:	fc 18 80 10 	movh	r8,0x8010
80030790:	f6 08 00 0c 	add	r12,r11,r8
80030794:	bf 9c       	lsr	r12,0x1f
80030796:	5e fc       	retal	r12

80030798 <floor>:
80030798:	d4 31       	pushm	r0-r7,lr
8003079a:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8003079e:	14 98       	mov	r8,r10
800307a0:	16 99       	mov	r9,r11
800307a2:	14 92       	mov	r2,r10
800307a4:	16 93       	mov	r3,r11
800307a6:	16 97       	mov	r7,r11
800307a8:	14 91       	mov	r1,r10
800307aa:	14 96       	mov	r6,r10
800307ac:	e8 c5 03 ff 	sub	r5,r4,1023
800307b0:	59 35       	cp.w	r5,19
800307b2:	e0 89 00 48 	brgt	80030842 <floor+0xaa>
800307b6:	58 05       	cp.w	r5,0
800307b8:	c2 04       	brge	800307f8 <floor+0x60>
800307ba:	e0 68 75 9c 	mov	r8,30108
800307be:	ea 18 88 00 	orh	r8,0x8800
800307c2:	e0 69 e4 3c 	mov	r9,58428
800307c6:	ea 19 7e 37 	orh	r9,0x7e37
800307ca:	e0 a0 03 55 	rcall	80030e74 <__avr32_f64_add>
800307ce:	14 98       	mov	r8,r10
800307d0:	16 99       	mov	r9,r11
800307d2:	30 0a       	mov	r10,0
800307d4:	30 0b       	mov	r11,0
800307d6:	e0 a0 04 a7 	rcall	80031124 <__avr32_f64_cmp_lt>
800307da:	c6 a0       	breq	800308ae <floor+0x116>
800307dc:	58 03       	cp.w	r3,0
800307de:	c0 45       	brlt	800307e6 <floor+0x4e>
800307e0:	30 06       	mov	r6,0
800307e2:	0c 97       	mov	r7,r6
800307e4:	c6 58       	rjmp	800308ae <floor+0x116>
800307e6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800307ea:	f1 e2 10 06 	or	r6,r8,r2
800307ee:	fc 18 bf f0 	movh	r8,0xbff0
800307f2:	f0 07 17 10 	movne	r7,r8
800307f6:	c2 48       	rjmp	8003083e <floor+0xa6>
800307f8:	ee 74 ff ff 	mov	r4,1048575
800307fc:	e8 05 08 44 	asr	r4,r4,r5
80030800:	e9 eb 00 0c 	and	r12,r4,r11
80030804:	f9 ea 10 01 	or	r1,r12,r10
80030808:	c5 50       	breq	800308b2 <floor+0x11a>
8003080a:	e0 68 75 9c 	mov	r8,30108
8003080e:	ea 18 88 00 	orh	r8,0x8800
80030812:	e0 69 e4 3c 	mov	r9,58428
80030816:	ea 19 7e 37 	orh	r9,0x7e37
8003081a:	e0 a0 03 2d 	rcall	80030e74 <__avr32_f64_add>
8003081e:	14 98       	mov	r8,r10
80030820:	16 99       	mov	r9,r11
80030822:	30 0a       	mov	r10,0
80030824:	30 0b       	mov	r11,0
80030826:	e0 a0 04 7f 	rcall	80031124 <__avr32_f64_cmp_lt>
8003082a:	c4 20       	breq	800308ae <floor+0x116>
8003082c:	58 03       	cp.w	r3,0
8003082e:	c0 64       	brge	8003083a <floor+0xa2>
80030830:	fc 18 00 10 	movh	r8,0x10
80030834:	f0 05 08 45 	asr	r5,r8,r5
80030838:	0a 07       	add	r7,r5
8003083a:	5c d4       	com	r4
8003083c:	08 67       	and	r7,r4
8003083e:	30 06       	mov	r6,0
80030840:	c3 78       	rjmp	800308ae <floor+0x116>
80030842:	e0 45 00 33 	cp.w	r5,51
80030846:	e0 8a 00 0a 	brle	8003085a <floor+0xc2>
8003084a:	e0 45 04 00 	cp.w	r5,1024
8003084e:	c3 21       	brne	800308b2 <floor+0x11a>
80030850:	e0 a0 03 12 	rcall	80030e74 <__avr32_f64_add>
80030854:	14 98       	mov	r8,r10
80030856:	16 99       	mov	r9,r11
80030858:	c2 d8       	rjmp	800308b2 <floor+0x11a>
8003085a:	3f fc       	mov	r12,-1
8003085c:	e8 c4 04 13 	sub	r4,r4,1043
80030860:	f8 04 0a 44 	lsr	r4,r12,r4
80030864:	e9 ea 00 0c 	and	r12,r4,r10
80030868:	c2 50       	breq	800308b2 <floor+0x11a>
8003086a:	e0 68 75 9c 	mov	r8,30108
8003086e:	ea 18 88 00 	orh	r8,0x8800
80030872:	e0 69 e4 3c 	mov	r9,58428
80030876:	ea 19 7e 37 	orh	r9,0x7e37
8003087a:	e0 a0 02 fd 	rcall	80030e74 <__avr32_f64_add>
8003087e:	14 98       	mov	r8,r10
80030880:	16 99       	mov	r9,r11
80030882:	30 0a       	mov	r10,0
80030884:	30 0b       	mov	r11,0
80030886:	e0 a0 04 4f 	rcall	80031124 <__avr32_f64_cmp_lt>
8003088a:	c1 20       	breq	800308ae <floor+0x116>
8003088c:	58 03       	cp.w	r3,0
8003088e:	c0 e4       	brge	800308aa <floor+0x112>
80030890:	59 45       	cp.w	r5,20
80030892:	c0 31       	brne	80030898 <floor+0x100>
80030894:	2f f7       	sub	r7,-1
80030896:	c0 a8       	rjmp	800308aa <floor+0x112>
80030898:	30 18       	mov	r8,1
8003089a:	ea 05 11 34 	rsub	r5,r5,52
8003089e:	f0 05 09 45 	lsl	r5,r8,r5
800308a2:	0a 06       	add	r6,r5
800308a4:	04 36       	cp.w	r6,r2
800308a6:	e7 d8 e3 07 	addcs	r7,r3,r8
800308aa:	5c d4       	com	r4
800308ac:	08 66       	and	r6,r4
800308ae:	0e 99       	mov	r9,r7
800308b0:	0c 98       	mov	r8,r6
800308b2:	10 9a       	mov	r10,r8
800308b4:	12 9b       	mov	r11,r9
800308b6:	d8 32       	popm	r0-r7,pc

800308b8 <__isnand>:
800308b8:	14 98       	mov	r8,r10
800308ba:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800308be:	f0 0c 11 00 	rsub	r12,r8,0
800308c2:	10 4c       	or	r12,r8
800308c4:	fc 18 7f f0 	movh	r8,0x7ff0
800308c8:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800308cc:	f0 0c 01 0c 	sub	r12,r8,r12
800308d0:	bf 9c       	lsr	r12,0x1f
800308d2:	5e fc       	retal	r12

800308d4 <matherr>:
800308d4:	5e fd       	retal	0

800308d6 <nan>:
800308d6:	30 0a       	mov	r10,0
800308d8:	fc 1b 7f f8 	movh	r11,0x7ff8
800308dc:	5e fc       	retal	r12
800308de:	d7 03       	nop

800308e0 <rint>:
800308e0:	d4 21       	pushm	r4-r7,lr
800308e2:	20 2d       	sub	sp,8
800308e4:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
800308e8:	14 94       	mov	r4,r10
800308ea:	16 95       	mov	r5,r11
800308ec:	14 98       	mov	r8,r10
800308ee:	16 9e       	mov	lr,r11
800308f0:	16 9c       	mov	r12,r11
800308f2:	f6 07 16 1f 	lsr	r7,r11,0x1f
800308f6:	ec c9 03 ff 	sub	r9,r6,1023
800308fa:	59 39       	cp.w	r9,19
800308fc:	e0 89 00 49 	brgt	8003098e <rint+0xae>
80030900:	58 09       	cp.w	r9,0
80030902:	c2 b4       	brge	80030958 <rint+0x78>
80030904:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030908:	14 49       	or	r9,r10
8003090a:	c7 10       	breq	800309ec <rint+0x10c>
8003090c:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
80030910:	4b 9c       	lddpc	r12,800309f4 <rint+0x114>
80030912:	fd e4 10 08 	or	r8,lr,r4
80030916:	16 99       	mov	r9,r11
80030918:	f0 0e 11 00 	rsub	lr,r8,0
8003091c:	e6 19 ff fe 	andh	r9,0xfffe,COH
80030920:	fd e8 10 08 	or	r8,lr,r8
80030924:	ad 88       	lsr	r8,0xc
80030926:	e6 18 00 08 	andh	r8,0x8,COH
8003092a:	f1 e9 10 0b 	or	r11,r8,r9
8003092e:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
80030932:	14 98       	mov	r8,r10
80030934:	16 99       	mov	r9,r11
80030936:	08 9a       	mov	r10,r4
80030938:	0a 9b       	mov	r11,r5
8003093a:	e0 a0 02 9d 	rcall	80030e74 <__avr32_f64_add>
8003093e:	08 98       	mov	r8,r4
80030940:	fa eb 00 00 	st.d	sp[0],r10
80030944:	0a 99       	mov	r9,r5
80030946:	fa ea 00 00 	ld.d	r10,sp[0]
8003094a:	cc 7d       	rcall	80030cd8 <__avr32_f64_sub>
8003094c:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030950:	14 94       	mov	r4,r10
80030952:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80030956:	c4 b8       	rjmp	800309ec <rint+0x10c>
80030958:	ee 7a ff ff 	mov	r10,1048575
8003095c:	f4 09 08 4a 	asr	r10,r10,r9
80030960:	f5 eb 00 0b 	and	r11,r10,r11
80030964:	08 4b       	or	r11,r4
80030966:	c4 30       	breq	800309ec <rint+0x10c>
80030968:	a1 9a       	lsr	r10,0x1
8003096a:	f5 e5 00 0b 	and	r11,r10,r5
8003096e:	08 4b       	or	r11,r4
80030970:	c0 31       	brne	80030976 <rint+0x96>
80030972:	16 98       	mov	r8,r11
80030974:	c2 b8       	rjmp	800309ca <rint+0xea>
80030976:	59 39       	cp.w	r9,19
80030978:	c0 41       	brne	80030980 <rint+0xa0>
8003097a:	fc 18 40 00 	movh	r8,0x4000
8003097e:	c2 68       	rjmp	800309ca <rint+0xea>
80030980:	14 8c       	andn	r12,r10
80030982:	e2 6a 00 00 	mov	r10,131072
80030986:	f4 09 08 49 	asr	r9,r10,r9
8003098a:	12 4c       	or	r12,r9
8003098c:	c1 f8       	rjmp	800309ca <rint+0xea>
8003098e:	e0 49 00 33 	cp.w	r9,51
80030992:	e0 8a 00 0a 	brle	800309a6 <rint+0xc6>
80030996:	e0 49 04 00 	cp.w	r9,1024
8003099a:	c2 91       	brne	800309ec <rint+0x10c>
8003099c:	14 98       	mov	r8,r10
8003099e:	16 99       	mov	r9,r11
800309a0:	e0 a0 02 6a 	rcall	80030e74 <__avr32_f64_add>
800309a4:	c2 28       	rjmp	800309e8 <rint+0x108>
800309a6:	ec c6 04 13 	sub	r6,r6,1043
800309aa:	3f f9       	mov	r9,-1
800309ac:	f2 06 0a 49 	lsr	r9,r9,r6
800309b0:	f3 ea 00 0a 	and	r10,r9,r10
800309b4:	c1 c0       	breq	800309ec <rint+0x10c>
800309b6:	a1 99       	lsr	r9,0x1
800309b8:	f3 e4 00 0a 	and	r10,r9,r4
800309bc:	c0 70       	breq	800309ca <rint+0xea>
800309be:	12 88       	andn	r8,r9
800309c0:	fc 19 40 00 	movh	r9,0x4000
800309c4:	f2 06 08 46 	asr	r6,r9,r6
800309c8:	0c 48       	or	r8,r6
800309ca:	48 ba       	lddpc	r10,800309f4 <rint+0x114>
800309cc:	18 99       	mov	r9,r12
800309ce:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
800309d2:	0c 9a       	mov	r10,r6
800309d4:	0e 9b       	mov	r11,r7
800309d6:	e0 a0 02 4f 	rcall	80030e74 <__avr32_f64_add>
800309da:	0c 98       	mov	r8,r6
800309dc:	fa eb 00 00 	st.d	sp[0],r10
800309e0:	0e 99       	mov	r9,r7
800309e2:	fa ea 00 00 	ld.d	r10,sp[0]
800309e6:	c7 9d       	rcall	80030cd8 <__avr32_f64_sub>
800309e8:	14 94       	mov	r4,r10
800309ea:	16 95       	mov	r5,r11
800309ec:	08 9a       	mov	r10,r4
800309ee:	0a 9b       	mov	r11,r5
800309f0:	2f ed       	sub	sp,-8
800309f2:	d8 22       	popm	r4-r7,pc
800309f4:	80 03       	ld.sh	r3,r0[0x0]
800309f6:	25 d8       	sub	r8,93

800309f8 <scalbn>:
800309f8:	d4 21       	pushm	r4-r7,lr
800309fa:	18 97       	mov	r7,r12
800309fc:	14 98       	mov	r8,r10
800309fe:	16 99       	mov	r9,r11
80030a00:	14 94       	mov	r4,r10
80030a02:	16 95       	mov	r5,r11
80030a04:	14 96       	mov	r6,r10
80030a06:	16 9c       	mov	r12,r11
80030a08:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80030a0c:	c1 11       	brne	80030a2e <scalbn+0x36>
80030a0e:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80030a12:	14 4c       	or	r12,r10
80030a14:	c5 c0       	breq	80030acc <scalbn+0xd4>
80030a16:	30 08       	mov	r8,0
80030a18:	fc 19 43 50 	movh	r9,0x4350
80030a1c:	c7 2c       	rcall	80030b00 <__avr32_f64_mul>
80030a1e:	16 99       	mov	r9,r11
80030a20:	14 98       	mov	r8,r10
80030a22:	14 94       	mov	r4,r10
80030a24:	12 95       	mov	r5,r9
80030a26:	fe 57 3c b0 	cp.w	r7,-50000
80030a2a:	c0 84       	brge	80030a3a <scalbn+0x42>
80030a2c:	c3 a8       	rjmp	80030aa0 <scalbn+0xa8>
80030a2e:	e0 4e 07 ff 	cp.w	lr,2047
80030a32:	c0 81       	brne	80030a42 <scalbn+0x4a>
80030a34:	e0 a0 02 20 	rcall	80030e74 <__avr32_f64_add>
80030a38:	c4 88       	rjmp	80030ac8 <scalbn+0xd0>
80030a3a:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
80030a3e:	12 9c       	mov	r12,r9
80030a40:	23 6e       	sub	lr,54
80030a42:	0e 0e       	add	lr,r7
80030a44:	e0 4e 07 fe 	cp.w	lr,2046
80030a48:	e0 89 00 11 	brgt	80030a6a <scalbn+0x72>
80030a4c:	58 0e       	cp.w	lr,0
80030a4e:	e0 8a 00 07 	brle	80030a5c <scalbn+0x64>
80030a52:	e4 1c 80 0f 	andh	r12,0x800f
80030a56:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030a5a:	c3 98       	rjmp	80030acc <scalbn+0xd4>
80030a5c:	fe 5e ff cb 	cp.w	lr,-53
80030a60:	c2 94       	brge	80030ab2 <scalbn+0xba>
80030a62:	e0 47 c3 50 	cp.w	r7,50000
80030a66:	e0 8a 00 14 	brle	80030a8e <scalbn+0x96>
80030a6a:	e0 6a 75 9c 	mov	r10,30108
80030a6e:	ea 1a 88 00 	orh	r10,0x8800
80030a72:	e0 6b e4 3c 	mov	r11,58428
80030a76:	ea 1b 7e 37 	orh	r11,0x7e37
80030a7a:	c3 7c       	rcall	80030ae8 <copysign>
80030a7c:	e0 68 75 9c 	mov	r8,30108
80030a80:	ea 18 88 00 	orh	r8,0x8800
80030a84:	e0 69 e4 3c 	mov	r9,58428
80030a88:	ea 19 7e 37 	orh	r9,0x7e37
80030a8c:	c1 d8       	rjmp	80030ac6 <scalbn+0xce>
80030a8e:	e0 6a f3 59 	mov	r10,62297
80030a92:	ea 1a c2 f8 	orh	r10,0xc2f8
80030a96:	e0 6b 6e 1f 	mov	r11,28191
80030a9a:	ea 1b 01 a5 	orh	r11,0x1a5
80030a9e:	c2 5c       	rcall	80030ae8 <copysign>
80030aa0:	e0 68 f3 59 	mov	r8,62297
80030aa4:	ea 18 c2 f8 	orh	r8,0xc2f8
80030aa8:	e0 69 6e 1f 	mov	r9,28191
80030aac:	ea 19 01 a5 	orh	r9,0x1a5
80030ab0:	c0 b8       	rjmp	80030ac6 <scalbn+0xce>
80030ab2:	2c ae       	sub	lr,-54
80030ab4:	e4 1c 80 0f 	andh	r12,0x800f
80030ab8:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030abc:	10 9a       	mov	r10,r8
80030abe:	12 9b       	mov	r11,r9
80030ac0:	30 08       	mov	r8,0
80030ac2:	fc 19 3c 90 	movh	r9,0x3c90
80030ac6:	c1 dc       	rcall	80030b00 <__avr32_f64_mul>
80030ac8:	14 98       	mov	r8,r10
80030aca:	16 99       	mov	r9,r11
80030acc:	10 9a       	mov	r10,r8
80030ace:	12 9b       	mov	r11,r9
80030ad0:	d8 22       	popm	r4-r7,pc
80030ad2:	d7 03       	nop

80030ad4 <fabsf>:
80030ad4:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80030ad8:	5e fc       	retal	r12

80030ada <isnanf>:
80030ada:	fc 18 7f 80 	movh	r8,0x7f80
80030ade:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80030ae2:	10 3c       	cp.w	r12,r8
80030ae4:	5f 9c       	srgt	r12
80030ae6:	5e fc       	retal	r12

80030ae8 <copysign>:
80030ae8:	d4 21       	pushm	r4-r7,lr
80030aea:	e6 19 80 00 	andh	r9,0x8000,COH
80030aee:	16 95       	mov	r5,r11
80030af0:	14 94       	mov	r4,r10
80030af2:	14 96       	mov	r6,r10
80030af4:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030af8:	f3 eb 10 0b 	or	r11,r9,r11
80030afc:	16 97       	mov	r7,r11
80030afe:	d8 22       	popm	r4-r7,pc

80030b00 <__avr32_f64_mul>:
80030b00:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80030b04:	e0 80 00 dc 	breq	80030cbc <__avr32_f64_mul_op1_zero>
80030b08:	d4 21       	pushm	r4-r7,lr
80030b0a:	f7 e9 20 0e 	eor	lr,r11,r9
80030b0e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030b12:	30 15       	mov	r5,1
80030b14:	c4 30       	breq	80030b9a <__avr32_f64_mul_op1_subnormal>
80030b16:	ab 6b       	lsl	r11,0xa
80030b18:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80030b1c:	ab 6a       	lsl	r10,0xa
80030b1e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80030b22:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030b26:	c5 c0       	breq	80030bde <__avr32_f64_mul_op2_subnormal>
80030b28:	a1 78       	lsl	r8,0x1
80030b2a:	5c f9       	rol	r9
80030b2c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030b30:	e0 47 07 ff 	cp.w	r7,2047
80030b34:	c7 70       	breq	80030c22 <__avr32_f64_mul_op_nan_or_inf>
80030b36:	e0 46 07 ff 	cp.w	r6,2047
80030b3a:	c7 40       	breq	80030c22 <__avr32_f64_mul_op_nan_or_inf>
80030b3c:	ee 06 00 0c 	add	r12,r7,r6
80030b40:	e0 2c 03 fe 	sub	r12,1022
80030b44:	f6 08 06 44 	mulu.d	r4,r11,r8
80030b48:	f4 09 07 44 	macu.d	r4,r10,r9
80030b4c:	f4 08 06 46 	mulu.d	r6,r10,r8
80030b50:	f6 09 06 4a 	mulu.d	r10,r11,r9
80030b54:	08 07       	add	r7,r4
80030b56:	f4 05 00 4a 	adc	r10,r10,r5
80030b5a:	5c 0b       	acr	r11
80030b5c:	ed bb 00 14 	bld	r11,0x14
80030b60:	c0 50       	breq	80030b6a <__avr32_f64_mul+0x6a>
80030b62:	a1 77       	lsl	r7,0x1
80030b64:	5c fa       	rol	r10
80030b66:	5c fb       	rol	r11
80030b68:	20 1c       	sub	r12,1
80030b6a:	58 0c       	cp.w	r12,0
80030b6c:	e0 8a 00 6f 	brle	80030c4a <__avr32_f64_mul_res_subnormal>
80030b70:	e0 4c 07 ff 	cp.w	r12,2047
80030b74:	e0 84 00 9c 	brge	80030cac <__avr32_f64_mul_res_inf>
80030b78:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80030b7c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80030b80:	ef e6 12 17 	or	r7,r7,r6>>0x1
80030b84:	ee 17 80 00 	eorh	r7,0x8000
80030b88:	f1 b7 04 20 	satu	r7,0x1
80030b8c:	0e 0a       	add	r10,r7
80030b8e:	5c 0b       	acr	r11
80030b90:	ed be 00 1f 	bld	lr,0x1f
80030b94:	ef bb 00 1f 	bst	r11,0x1f
80030b98:	d8 22       	popm	r4-r7,pc

80030b9a <__avr32_f64_mul_op1_subnormal>:
80030b9a:	e4 1b 00 0f 	andh	r11,0xf
80030b9e:	f4 0c 12 00 	clz	r12,r10
80030ba2:	f6 06 12 00 	clz	r6,r11
80030ba6:	f7 bc 03 e1 	sublo	r12,-31
80030baa:	f8 06 17 30 	movlo	r6,r12
80030bae:	f7 b6 02 01 	subhs	r6,1
80030bb2:	e0 46 00 20 	cp.w	r6,32
80030bb6:	c0 d4       	brge	80030bd0 <__avr32_f64_mul_op1_subnormal+0x36>
80030bb8:	ec 0c 11 20 	rsub	r12,r6,32
80030bbc:	f6 06 09 4b 	lsl	r11,r11,r6
80030bc0:	f4 0c 0a 4c 	lsr	r12,r10,r12
80030bc4:	18 4b       	or	r11,r12
80030bc6:	f4 06 09 4a 	lsl	r10,r10,r6
80030bca:	20 b6       	sub	r6,11
80030bcc:	0c 17       	sub	r7,r6
80030bce:	ca ab       	rjmp	80030b22 <__avr32_f64_mul+0x22>
80030bd0:	f4 06 09 4b 	lsl	r11,r10,r6
80030bd4:	c6 40       	breq	80030c9c <__avr32_f64_mul_res_zero>
80030bd6:	30 0a       	mov	r10,0
80030bd8:	20 b6       	sub	r6,11
80030bda:	0c 17       	sub	r7,r6
80030bdc:	ca 3b       	rjmp	80030b22 <__avr32_f64_mul+0x22>

80030bde <__avr32_f64_mul_op2_subnormal>:
80030bde:	e4 19 00 0f 	andh	r9,0xf
80030be2:	f0 0c 12 00 	clz	r12,r8
80030be6:	f2 05 12 00 	clz	r5,r9
80030bea:	f7 bc 03 ea 	sublo	r12,-22
80030bee:	f8 05 17 30 	movlo	r5,r12
80030bf2:	f7 b5 02 0a 	subhs	r5,10
80030bf6:	e0 45 00 20 	cp.w	r5,32
80030bfa:	c0 d4       	brge	80030c14 <__avr32_f64_mul_op2_subnormal+0x36>
80030bfc:	ea 0c 11 20 	rsub	r12,r5,32
80030c00:	f2 05 09 49 	lsl	r9,r9,r5
80030c04:	f0 0c 0a 4c 	lsr	r12,r8,r12
80030c08:	18 49       	or	r9,r12
80030c0a:	f0 05 09 48 	lsl	r8,r8,r5
80030c0e:	20 25       	sub	r5,2
80030c10:	0a 16       	sub	r6,r5
80030c12:	c8 fb       	rjmp	80030b30 <__avr32_f64_mul+0x30>
80030c14:	f0 05 09 49 	lsl	r9,r8,r5
80030c18:	c4 20       	breq	80030c9c <__avr32_f64_mul_res_zero>
80030c1a:	30 08       	mov	r8,0
80030c1c:	20 25       	sub	r5,2
80030c1e:	0a 16       	sub	r6,r5
80030c20:	c8 8b       	rjmp	80030b30 <__avr32_f64_mul+0x30>

80030c22 <__avr32_f64_mul_op_nan_or_inf>:
80030c22:	e4 19 00 0f 	andh	r9,0xf
80030c26:	e4 1b 00 0f 	andh	r11,0xf
80030c2a:	14 4b       	or	r11,r10
80030c2c:	10 49       	or	r9,r8
80030c2e:	e0 47 07 ff 	cp.w	r7,2047
80030c32:	c0 91       	brne	80030c44 <__avr32_f64_mul_op1_not_naninf>
80030c34:	58 0b       	cp.w	r11,0
80030c36:	c3 81       	brne	80030ca6 <__avr32_f64_mul_res_nan>
80030c38:	e0 46 07 ff 	cp.w	r6,2047
80030c3c:	c3 81       	brne	80030cac <__avr32_f64_mul_res_inf>
80030c3e:	58 09       	cp.w	r9,0
80030c40:	c3 60       	breq	80030cac <__avr32_f64_mul_res_inf>
80030c42:	c3 28       	rjmp	80030ca6 <__avr32_f64_mul_res_nan>

80030c44 <__avr32_f64_mul_op1_not_naninf>:
80030c44:	58 09       	cp.w	r9,0
80030c46:	c3 30       	breq	80030cac <__avr32_f64_mul_res_inf>
80030c48:	c2 f8       	rjmp	80030ca6 <__avr32_f64_mul_res_nan>

80030c4a <__avr32_f64_mul_res_subnormal>:
80030c4a:	5c 3c       	neg	r12
80030c4c:	2f fc       	sub	r12,-1
80030c4e:	f1 bc 04 c0 	satu	r12,0x6
80030c52:	e0 4c 00 20 	cp.w	r12,32
80030c56:	c1 14       	brge	80030c78 <__avr32_f64_mul_res_subnormal+0x2e>
80030c58:	f8 08 11 20 	rsub	r8,r12,32
80030c5c:	0e 46       	or	r6,r7
80030c5e:	ee 0c 0a 47 	lsr	r7,r7,r12
80030c62:	f4 08 09 49 	lsl	r9,r10,r8
80030c66:	12 47       	or	r7,r9
80030c68:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030c6c:	f6 08 09 49 	lsl	r9,r11,r8
80030c70:	12 4a       	or	r10,r9
80030c72:	f6 0c 0a 4b 	lsr	r11,r11,r12
80030c76:	c8 3b       	rjmp	80030b7c <__avr32_f64_mul+0x7c>
80030c78:	f8 08 11 20 	rsub	r8,r12,32
80030c7c:	f9 b9 00 00 	moveq	r9,0
80030c80:	c0 30       	breq	80030c86 <__avr32_f64_mul_res_subnormal+0x3c>
80030c82:	f6 08 09 49 	lsl	r9,r11,r8
80030c86:	0e 46       	or	r6,r7
80030c88:	ed ea 10 16 	or	r6,r6,r10<<0x1
80030c8c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030c90:	f3 ea 10 07 	or	r7,r9,r10
80030c94:	f6 0c 0a 4a 	lsr	r10,r11,r12
80030c98:	30 0b       	mov	r11,0
80030c9a:	c7 1b       	rjmp	80030b7c <__avr32_f64_mul+0x7c>

80030c9c <__avr32_f64_mul_res_zero>:
80030c9c:	1c 9b       	mov	r11,lr
80030c9e:	e6 1b 80 00 	andh	r11,0x8000,COH
80030ca2:	30 0a       	mov	r10,0
80030ca4:	d8 22       	popm	r4-r7,pc

80030ca6 <__avr32_f64_mul_res_nan>:
80030ca6:	3f fb       	mov	r11,-1
80030ca8:	3f fa       	mov	r10,-1
80030caa:	d8 22       	popm	r4-r7,pc

80030cac <__avr32_f64_mul_res_inf>:
80030cac:	f0 6b 00 00 	mov	r11,-1048576
80030cb0:	ed be 00 1f 	bld	lr,0x1f
80030cb4:	ef bb 00 1f 	bst	r11,0x1f
80030cb8:	30 0a       	mov	r10,0
80030cba:	d8 22       	popm	r4-r7,pc

80030cbc <__avr32_f64_mul_op1_zero>:
80030cbc:	f7 e9 20 0b 	eor	r11,r11,r9
80030cc0:	e6 1b 80 00 	andh	r11,0x8000,COH
80030cc4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80030cc8:	e0 4c 07 ff 	cp.w	r12,2047
80030ccc:	5e 1c       	retne	r12
80030cce:	3f fa       	mov	r10,-1
80030cd0:	3f fb       	mov	r11,-1
80030cd2:	5e fc       	retal	r12

80030cd4 <__avr32_f64_sub_from_add>:
80030cd4:	ee 19 80 00 	eorh	r9,0x8000

80030cd8 <__avr32_f64_sub>:
80030cd8:	f7 e9 20 0c 	eor	r12,r11,r9
80030cdc:	e0 86 00 ca 	brmi	80030e70 <__avr32_f64_add_from_sub>
80030ce0:	eb cd 40 e0 	pushm	r5-r7,lr
80030ce4:	16 9c       	mov	r12,r11
80030ce6:	e6 1c 80 00 	andh	r12,0x8000,COH
80030cea:	bf db       	cbr	r11,0x1f
80030cec:	bf d9       	cbr	r9,0x1f
80030cee:	10 3a       	cp.w	r10,r8
80030cf0:	f2 0b 13 00 	cpc	r11,r9
80030cf4:	c0 92       	brcc	80030d06 <__avr32_f64_sub+0x2e>
80030cf6:	16 97       	mov	r7,r11
80030cf8:	12 9b       	mov	r11,r9
80030cfa:	0e 99       	mov	r9,r7
80030cfc:	14 97       	mov	r7,r10
80030cfe:	10 9a       	mov	r10,r8
80030d00:	0e 98       	mov	r8,r7
80030d02:	ee 1c 80 00 	eorh	r12,0x8000
80030d06:	f6 07 16 14 	lsr	r7,r11,0x14
80030d0a:	ab 7b       	lsl	r11,0xb
80030d0c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030d10:	ab 7a       	lsl	r10,0xb
80030d12:	bf bb       	sbr	r11,0x1f
80030d14:	f2 06 16 14 	lsr	r6,r9,0x14
80030d18:	c4 40       	breq	80030da0 <__avr32_f64_sub_opL_subnormal>
80030d1a:	ab 79       	lsl	r9,0xb
80030d1c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030d20:	ab 78       	lsl	r8,0xb
80030d22:	bf b9       	sbr	r9,0x1f

80030d24 <__avr32_f64_sub_opL_subnormal_done>:
80030d24:	e0 47 07 ff 	cp.w	r7,2047
80030d28:	c4 f0       	breq	80030dc6 <__avr32_f64_sub_opH_nan_or_inf>
80030d2a:	0e 26       	rsub	r6,r7
80030d2c:	c1 20       	breq	80030d50 <__avr32_f64_sub_shift_done>
80030d2e:	ec 05 11 20 	rsub	r5,r6,32
80030d32:	e0 46 00 20 	cp.w	r6,32
80030d36:	c7 c2       	brcc	80030e2e <__avr32_f64_sub_longshift>
80030d38:	f0 05 09 4e 	lsl	lr,r8,r5
80030d3c:	f2 05 09 45 	lsl	r5,r9,r5
80030d40:	f0 06 0a 48 	lsr	r8,r8,r6
80030d44:	f2 06 0a 49 	lsr	r9,r9,r6
80030d48:	0a 48       	or	r8,r5
80030d4a:	58 0e       	cp.w	lr,0
80030d4c:	5f 1e       	srne	lr
80030d4e:	1c 48       	or	r8,lr

80030d50 <__avr32_f64_sub_shift_done>:
80030d50:	10 1a       	sub	r10,r8
80030d52:	f6 09 01 4b 	sbc	r11,r11,r9
80030d56:	f6 06 12 00 	clz	r6,r11
80030d5a:	c0 e0       	breq	80030d76 <__avr32_f64_sub_longnormalize_done>
80030d5c:	c7 83       	brcs	80030e4c <__avr32_f64_sub_longnormalize>
80030d5e:	ec 0e 11 20 	rsub	lr,r6,32
80030d62:	f6 06 09 4b 	lsl	r11,r11,r6
80030d66:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030d6a:	1c 4b       	or	r11,lr
80030d6c:	f4 06 09 4a 	lsl	r10,r10,r6
80030d70:	0c 17       	sub	r7,r6
80030d72:	e0 8a 00 39 	brle	80030de4 <__avr32_f64_sub_subnormal_result>

80030d76 <__avr32_f64_sub_longnormalize_done>:
80030d76:	f4 09 15 15 	lsl	r9,r10,0x15
80030d7a:	ab 9a       	lsr	r10,0xb
80030d7c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030d80:	ab 9b       	lsr	r11,0xb
80030d82:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030d86:	18 4b       	or	r11,r12

80030d88 <__avr32_f64_sub_round>:
80030d88:	fc 17 80 00 	movh	r7,0x8000
80030d8c:	ed ba 00 00 	bld	r10,0x0
80030d90:	f7 b7 01 ff 	subne	r7,-1
80030d94:	0e 39       	cp.w	r9,r7
80030d96:	5f 29       	srhs	r9
80030d98:	12 0a       	add	r10,r9
80030d9a:	5c 0b       	acr	r11
80030d9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030da0 <__avr32_f64_sub_opL_subnormal>:
80030da0:	ab 79       	lsl	r9,0xb
80030da2:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030da6:	ab 78       	lsl	r8,0xb
80030da8:	f3 e8 10 0e 	or	lr,r9,r8
80030dac:	f9 b6 01 01 	movne	r6,1
80030db0:	ee 0e 11 00 	rsub	lr,r7,0
80030db4:	f9 b7 00 01 	moveq	r7,1
80030db8:	ef bb 00 1f 	bst	r11,0x1f
80030dbc:	f7 ea 10 0e 	or	lr,r11,r10
80030dc0:	f9 b7 00 00 	moveq	r7,0
80030dc4:	cb 0b       	rjmp	80030d24 <__avr32_f64_sub_opL_subnormal_done>

80030dc6 <__avr32_f64_sub_opH_nan_or_inf>:
80030dc6:	bf db       	cbr	r11,0x1f
80030dc8:	f7 ea 10 0e 	or	lr,r11,r10
80030dcc:	c0 81       	brne	80030ddc <__avr32_f64_sub_return_nan>
80030dce:	e0 46 07 ff 	cp.w	r6,2047
80030dd2:	c0 50       	breq	80030ddc <__avr32_f64_sub_return_nan>
80030dd4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80030dd8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030ddc <__avr32_f64_sub_return_nan>:
80030ddc:	3f fa       	mov	r10,-1
80030dde:	3f fb       	mov	r11,-1
80030de0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030de4 <__avr32_f64_sub_subnormal_result>:
80030de4:	5c 37       	neg	r7
80030de6:	2f f7       	sub	r7,-1
80030de8:	f1 b7 04 c0 	satu	r7,0x6
80030dec:	e0 47 00 20 	cp.w	r7,32
80030df0:	c1 14       	brge	80030e12 <__avr32_f64_sub_subnormal_result+0x2e>
80030df2:	ee 08 11 20 	rsub	r8,r7,32
80030df6:	f4 08 09 49 	lsl	r9,r10,r8
80030dfa:	5f 16       	srne	r6
80030dfc:	f4 07 0a 4a 	lsr	r10,r10,r7
80030e00:	0c 4a       	or	r10,r6
80030e02:	f6 08 09 49 	lsl	r9,r11,r8
80030e06:	f5 e9 10 0a 	or	r10,r10,r9
80030e0a:	f4 07 0a 4b 	lsr	r11,r10,r7
80030e0e:	30 07       	mov	r7,0
80030e10:	cb 3b       	rjmp	80030d76 <__avr32_f64_sub_longnormalize_done>
80030e12:	ee 08 11 40 	rsub	r8,r7,64
80030e16:	f6 08 09 49 	lsl	r9,r11,r8
80030e1a:	14 49       	or	r9,r10
80030e1c:	5f 16       	srne	r6
80030e1e:	f6 07 0a 4a 	lsr	r10,r11,r7
80030e22:	0c 4a       	or	r10,r6
80030e24:	30 0b       	mov	r11,0
80030e26:	30 07       	mov	r7,0
80030e28:	ca 7b       	rjmp	80030d76 <__avr32_f64_sub_longnormalize_done>
80030e2a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030e2e <__avr32_f64_sub_longshift>:
80030e2e:	f1 b6 04 c0 	satu	r6,0x6
80030e32:	f0 0e 17 00 	moveq	lr,r8
80030e36:	c0 40       	breq	80030e3e <__avr32_f64_sub_longshift+0x10>
80030e38:	f2 05 09 4e 	lsl	lr,r9,r5
80030e3c:	10 4e       	or	lr,r8
80030e3e:	f2 06 0a 48 	lsr	r8,r9,r6
80030e42:	30 09       	mov	r9,0
80030e44:	58 0e       	cp.w	lr,0
80030e46:	5f 1e       	srne	lr
80030e48:	1c 48       	or	r8,lr
80030e4a:	c8 3b       	rjmp	80030d50 <__avr32_f64_sub_shift_done>

80030e4c <__avr32_f64_sub_longnormalize>:
80030e4c:	f4 06 12 00 	clz	r6,r10
80030e50:	f9 b7 03 00 	movlo	r7,0
80030e54:	f9 b6 03 00 	movlo	r6,0
80030e58:	f9 bc 03 00 	movlo	r12,0
80030e5c:	f7 b6 02 e0 	subhs	r6,-32
80030e60:	f4 06 09 4b 	lsl	r11,r10,r6
80030e64:	30 0a       	mov	r10,0
80030e66:	0c 17       	sub	r7,r6
80030e68:	fe 9a ff be 	brle	80030de4 <__avr32_f64_sub_subnormal_result>
80030e6c:	c8 5b       	rjmp	80030d76 <__avr32_f64_sub_longnormalize_done>
80030e6e:	d7 03       	nop

80030e70 <__avr32_f64_add_from_sub>:
80030e70:	ee 19 80 00 	eorh	r9,0x8000

80030e74 <__avr32_f64_add>:
80030e74:	f7 e9 20 0c 	eor	r12,r11,r9
80030e78:	fe 96 ff 2e 	brmi	80030cd4 <__avr32_f64_sub_from_add>
80030e7c:	eb cd 40 e0 	pushm	r5-r7,lr
80030e80:	16 9c       	mov	r12,r11
80030e82:	e6 1c 80 00 	andh	r12,0x8000,COH
80030e86:	bf db       	cbr	r11,0x1f
80030e88:	bf d9       	cbr	r9,0x1f
80030e8a:	12 3b       	cp.w	r11,r9
80030e8c:	c0 72       	brcc	80030e9a <__avr32_f64_add+0x26>
80030e8e:	16 97       	mov	r7,r11
80030e90:	12 9b       	mov	r11,r9
80030e92:	0e 99       	mov	r9,r7
80030e94:	14 97       	mov	r7,r10
80030e96:	10 9a       	mov	r10,r8
80030e98:	0e 98       	mov	r8,r7
80030e9a:	30 0e       	mov	lr,0
80030e9c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030ea0:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80030ea4:	b5 ab       	sbr	r11,0x14
80030ea6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030eaa:	c6 20       	breq	80030f6e <__avr32_f64_add_op2_subnormal>
80030eac:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80030eb0:	b5 a9       	sbr	r9,0x14
80030eb2:	e0 47 07 ff 	cp.w	r7,2047
80030eb6:	c2 80       	breq	80030f06 <__avr32_f64_add_opH_nan_or_inf>
80030eb8:	0e 26       	rsub	r6,r7
80030eba:	c1 20       	breq	80030ede <__avr32_f64_add_shift_done>
80030ebc:	e0 46 00 36 	cp.w	r6,54
80030ec0:	c1 52       	brcc	80030eea <__avr32_f64_add_res_of_done>
80030ec2:	ec 05 11 20 	rsub	r5,r6,32
80030ec6:	e0 46 00 20 	cp.w	r6,32
80030eca:	c3 52       	brcc	80030f34 <__avr32_f64_add_longshift>
80030ecc:	f0 05 09 4e 	lsl	lr,r8,r5
80030ed0:	f2 05 09 45 	lsl	r5,r9,r5
80030ed4:	f0 06 0a 48 	lsr	r8,r8,r6
80030ed8:	f2 06 0a 49 	lsr	r9,r9,r6
80030edc:	0a 48       	or	r8,r5

80030ede <__avr32_f64_add_shift_done>:
80030ede:	10 0a       	add	r10,r8
80030ee0:	f6 09 00 4b 	adc	r11,r11,r9
80030ee4:	ed bb 00 15 	bld	r11,0x15
80030ee8:	c3 40       	breq	80030f50 <__avr32_f64_add_res_of>

80030eea <__avr32_f64_add_res_of_done>:
80030eea:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030eee:	18 4b       	or	r11,r12

80030ef0 <__avr32_f64_add_round>:
80030ef0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80030ef4:	18 4e       	or	lr,r12
80030ef6:	ee 1e 80 00 	eorh	lr,0x8000
80030efa:	f1 be 04 20 	satu	lr,0x1
80030efe:	1c 0a       	add	r10,lr
80030f00:	5c 0b       	acr	r11
80030f02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030f06 <__avr32_f64_add_opH_nan_or_inf>:
80030f06:	b5 cb       	cbr	r11,0x14
80030f08:	f7 ea 10 0e 	or	lr,r11,r10
80030f0c:	c1 01       	brne	80030f2c <__avr32_f64_add_return_nan>
80030f0e:	e0 46 07 ff 	cp.w	r6,2047
80030f12:	c0 30       	breq	80030f18 <__avr32_f64_add_opL_nan_or_inf>
80030f14:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030f18 <__avr32_f64_add_opL_nan_or_inf>:
80030f18:	b5 c9       	cbr	r9,0x14
80030f1a:	f3 e8 10 0e 	or	lr,r9,r8
80030f1e:	c0 71       	brne	80030f2c <__avr32_f64_add_return_nan>
80030f20:	30 0a       	mov	r10,0
80030f22:	fc 1b 7f f0 	movh	r11,0x7ff0
80030f26:	18 4b       	or	r11,r12
80030f28:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030f2c <__avr32_f64_add_return_nan>:
80030f2c:	3f fa       	mov	r10,-1
80030f2e:	3f fb       	mov	r11,-1
80030f30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030f34 <__avr32_f64_add_longshift>:
80030f34:	f1 b6 04 c0 	satu	r6,0x6
80030f38:	f0 0e 17 00 	moveq	lr,r8
80030f3c:	c0 60       	breq	80030f48 <__avr32_f64_add_longshift+0x14>
80030f3e:	f2 05 09 4e 	lsl	lr,r9,r5
80030f42:	58 08       	cp.w	r8,0
80030f44:	5f 18       	srne	r8
80030f46:	10 4e       	or	lr,r8
80030f48:	f2 06 0a 48 	lsr	r8,r9,r6
80030f4c:	30 09       	mov	r9,0
80030f4e:	cc 8b       	rjmp	80030ede <__avr32_f64_add_shift_done>

80030f50 <__avr32_f64_add_res_of>:
80030f50:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80030f54:	a1 9b       	lsr	r11,0x1
80030f56:	5d 0a       	ror	r10
80030f58:	5d 0e       	ror	lr
80030f5a:	2f f7       	sub	r7,-1
80030f5c:	e0 47 07 ff 	cp.w	r7,2047
80030f60:	f9 ba 00 00 	moveq	r10,0
80030f64:	f9 bb 00 00 	moveq	r11,0
80030f68:	f9 be 00 00 	moveq	lr,0
80030f6c:	cb fb       	rjmp	80030eea <__avr32_f64_add_res_of_done>

80030f6e <__avr32_f64_add_op2_subnormal>:
80030f6e:	30 16       	mov	r6,1
80030f70:	58 07       	cp.w	r7,0
80030f72:	ca 01       	brne	80030eb2 <__avr32_f64_add+0x3e>
80030f74:	b5 cb       	cbr	r11,0x14
80030f76:	10 0a       	add	r10,r8
80030f78:	f6 09 00 4b 	adc	r11,r11,r9
80030f7c:	18 4b       	or	r11,r12
80030f7e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80030f82:	d7 03       	nop

80030f84 <__avr32_f64_to_u32>:
80030f84:	58 0b       	cp.w	r11,0
80030f86:	5e 6d       	retmi	0

80030f88 <__avr32_f64_to_s32>:
80030f88:	f6 0c 15 01 	lsl	r12,r11,0x1
80030f8c:	b5 9c       	lsr	r12,0x15
80030f8e:	e0 2c 03 ff 	sub	r12,1023
80030f92:	5e 3d       	retlo	0
80030f94:	f8 0c 11 1f 	rsub	r12,r12,31
80030f98:	16 99       	mov	r9,r11
80030f9a:	ab 7b       	lsl	r11,0xb
80030f9c:	bf bb       	sbr	r11,0x1f
80030f9e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030fa2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80030fa6:	a1 79       	lsl	r9,0x1
80030fa8:	5e 2b       	reths	r11
80030faa:	5c 3b       	neg	r11
80030fac:	5e fb       	retal	r11

80030fae <__avr32_u32_to_f64>:
80030fae:	f8 cb 00 00 	sub	r11,r12,0
80030fb2:	30 0c       	mov	r12,0
80030fb4:	c0 38       	rjmp	80030fba <__avr32_s32_to_f64+0x4>

80030fb6 <__avr32_s32_to_f64>:
80030fb6:	18 9b       	mov	r11,r12
80030fb8:	5c 4b       	abs	r11
80030fba:	30 0a       	mov	r10,0
80030fbc:	5e 0b       	reteq	r11
80030fbe:	d4 01       	pushm	lr
80030fc0:	e0 69 04 1e 	mov	r9,1054
80030fc4:	f6 08 12 00 	clz	r8,r11
80030fc8:	c1 70       	breq	80030ff6 <__avr32_s32_to_f64+0x40>
80030fca:	c0 c3       	brcs	80030fe2 <__avr32_s32_to_f64+0x2c>
80030fcc:	f0 0e 11 20 	rsub	lr,r8,32
80030fd0:	f6 08 09 4b 	lsl	r11,r11,r8
80030fd4:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030fd8:	1c 4b       	or	r11,lr
80030fda:	f4 08 09 4a 	lsl	r10,r10,r8
80030fde:	10 19       	sub	r9,r8
80030fe0:	c0 b8       	rjmp	80030ff6 <__avr32_s32_to_f64+0x40>
80030fe2:	f4 08 12 00 	clz	r8,r10
80030fe6:	f9 b8 03 00 	movlo	r8,0
80030fea:	f7 b8 02 e0 	subhs	r8,-32
80030fee:	f4 08 09 4b 	lsl	r11,r10,r8
80030ff2:	30 0a       	mov	r10,0
80030ff4:	10 19       	sub	r9,r8
80030ff6:	58 09       	cp.w	r9,0
80030ff8:	e0 89 00 30 	brgt	80031058 <__avr32_s32_to_f64+0xa2>
80030ffc:	5c 39       	neg	r9
80030ffe:	2f f9       	sub	r9,-1
80031000:	e0 49 00 36 	cp.w	r9,54
80031004:	c0 43       	brcs	8003100c <__avr32_s32_to_f64+0x56>
80031006:	30 0b       	mov	r11,0
80031008:	30 0a       	mov	r10,0
8003100a:	c2 68       	rjmp	80031056 <__avr32_s32_to_f64+0xa0>
8003100c:	2f 69       	sub	r9,-10
8003100e:	f2 08 11 20 	rsub	r8,r9,32
80031012:	e0 49 00 20 	cp.w	r9,32
80031016:	c0 b2       	brcc	8003102c <__avr32_s32_to_f64+0x76>
80031018:	f4 08 09 4e 	lsl	lr,r10,r8
8003101c:	f6 08 09 48 	lsl	r8,r11,r8
80031020:	f4 09 0a 4a 	lsr	r10,r10,r9
80031024:	f6 09 0a 4b 	lsr	r11,r11,r9
80031028:	10 4b       	or	r11,r8
8003102a:	c0 88       	rjmp	8003103a <__avr32_s32_to_f64+0x84>
8003102c:	f6 08 09 4e 	lsl	lr,r11,r8
80031030:	14 4e       	or	lr,r10
80031032:	16 9a       	mov	r10,r11
80031034:	30 0b       	mov	r11,0
80031036:	f4 09 0a 4a 	lsr	r10,r10,r9
8003103a:	ed ba 00 00 	bld	r10,0x0
8003103e:	c0 92       	brcc	80031050 <__avr32_s32_to_f64+0x9a>
80031040:	1c 7e       	tst	lr,lr
80031042:	c0 41       	brne	8003104a <__avr32_s32_to_f64+0x94>
80031044:	ed ba 00 01 	bld	r10,0x1
80031048:	c0 42       	brcc	80031050 <__avr32_s32_to_f64+0x9a>
8003104a:	2f fa       	sub	r10,-1
8003104c:	f7 bb 02 ff 	subhs	r11,-1
80031050:	5c fc       	rol	r12
80031052:	5d 0b       	ror	r11
80031054:	5d 0a       	ror	r10
80031056:	d8 02       	popm	pc
80031058:	e0 68 03 ff 	mov	r8,1023
8003105c:	ed ba 00 0b 	bld	r10,0xb
80031060:	f7 b8 00 ff 	subeq	r8,-1
80031064:	10 0a       	add	r10,r8
80031066:	5c 0b       	acr	r11
80031068:	f7 b9 03 fe 	sublo	r9,-2
8003106c:	e0 49 07 ff 	cp.w	r9,2047
80031070:	c0 55       	brlt	8003107a <__avr32_s32_to_f64+0xc4>
80031072:	30 0a       	mov	r10,0
80031074:	fc 1b ff e0 	movh	r11,0xffe0
80031078:	c0 c8       	rjmp	80031090 <__floatsidf_return_op1>
8003107a:	ed bb 00 1f 	bld	r11,0x1f
8003107e:	f7 b9 01 01 	subne	r9,1
80031082:	ab 9a       	lsr	r10,0xb
80031084:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80031088:	a1 7b       	lsl	r11,0x1
8003108a:	ab 9b       	lsr	r11,0xb
8003108c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80031090 <__floatsidf_return_op1>:
80031090:	a1 7c       	lsl	r12,0x1
80031092:	5d 0b       	ror	r11
80031094:	d8 02       	popm	pc

80031096 <__avr32_f64_cmp_eq>:
80031096:	10 3a       	cp.w	r10,r8
80031098:	f2 0b 13 00 	cpc	r11,r9
8003109c:	c0 80       	breq	800310ac <__avr32_f64_cmp_eq+0x16>
8003109e:	a1 7b       	lsl	r11,0x1
800310a0:	a1 79       	lsl	r9,0x1
800310a2:	14 4b       	or	r11,r10
800310a4:	12 4b       	or	r11,r9
800310a6:	10 4b       	or	r11,r8
800310a8:	5e 0f       	reteq	1
800310aa:	5e fd       	retal	0
800310ac:	a1 7b       	lsl	r11,0x1
800310ae:	fc 1c ff e0 	movh	r12,0xffe0
800310b2:	58 0a       	cp.w	r10,0
800310b4:	f8 0b 13 00 	cpc	r11,r12
800310b8:	5e 8f       	retls	1
800310ba:	5e fd       	retal	0

800310bc <__avr32_f64_cmp_ge>:
800310bc:	1a de       	st.w	--sp,lr
800310be:	1a d7       	st.w	--sp,r7
800310c0:	a1 7b       	lsl	r11,0x1
800310c2:	5f 3c       	srlo	r12
800310c4:	a1 79       	lsl	r9,0x1
800310c6:	5f 37       	srlo	r7
800310c8:	5c fc       	rol	r12
800310ca:	fc 1e ff e0 	movh	lr,0xffe0
800310ce:	58 0a       	cp.w	r10,0
800310d0:	fc 0b 13 00 	cpc	r11,lr
800310d4:	e0 8b 00 1d 	brhi	8003110e <__avr32_f64_cmp_ge+0x52>
800310d8:	58 08       	cp.w	r8,0
800310da:	fc 09 13 00 	cpc	r9,lr
800310de:	e0 8b 00 18 	brhi	8003110e <__avr32_f64_cmp_ge+0x52>
800310e2:	58 0b       	cp.w	r11,0
800310e4:	f5 ba 00 00 	subfeq	r10,0
800310e8:	c1 50       	breq	80031112 <__avr32_f64_cmp_ge+0x56>
800310ea:	1b 07       	ld.w	r7,sp++
800310ec:	1b 0e       	ld.w	lr,sp++
800310ee:	58 3c       	cp.w	r12,3
800310f0:	c0 a0       	breq	80031104 <__avr32_f64_cmp_ge+0x48>
800310f2:	58 1c       	cp.w	r12,1
800310f4:	c0 33       	brcs	800310fa <__avr32_f64_cmp_ge+0x3e>
800310f6:	5e 0f       	reteq	1
800310f8:	5e 1d       	retne	0
800310fa:	10 3a       	cp.w	r10,r8
800310fc:	f2 0b 13 00 	cpc	r11,r9
80031100:	5e 2f       	reths	1
80031102:	5e 3d       	retlo	0
80031104:	14 38       	cp.w	r8,r10
80031106:	f6 09 13 00 	cpc	r9,r11
8003110a:	5e 2f       	reths	1
8003110c:	5e 3d       	retlo	0
8003110e:	1b 07       	ld.w	r7,sp++
80031110:	d8 0a       	popm	pc,r12=0
80031112:	58 17       	cp.w	r7,1
80031114:	5f 0c       	sreq	r12
80031116:	58 09       	cp.w	r9,0
80031118:	f5 b8 00 00 	subfeq	r8,0
8003111c:	1b 07       	ld.w	r7,sp++
8003111e:	1b 0e       	ld.w	lr,sp++
80031120:	5e 0f       	reteq	1
80031122:	5e fc       	retal	r12

80031124 <__avr32_f64_cmp_lt>:
80031124:	1a de       	st.w	--sp,lr
80031126:	1a d7       	st.w	--sp,r7
80031128:	a1 7b       	lsl	r11,0x1
8003112a:	5f 3c       	srlo	r12
8003112c:	a1 79       	lsl	r9,0x1
8003112e:	5f 37       	srlo	r7
80031130:	5c fc       	rol	r12
80031132:	fc 1e ff e0 	movh	lr,0xffe0
80031136:	58 0a       	cp.w	r10,0
80031138:	fc 0b 13 00 	cpc	r11,lr
8003113c:	e0 8b 00 1d 	brhi	80031176 <__avr32_f64_cmp_lt+0x52>
80031140:	58 08       	cp.w	r8,0
80031142:	fc 09 13 00 	cpc	r9,lr
80031146:	e0 8b 00 18 	brhi	80031176 <__avr32_f64_cmp_lt+0x52>
8003114a:	58 0b       	cp.w	r11,0
8003114c:	f5 ba 00 00 	subfeq	r10,0
80031150:	c1 50       	breq	8003117a <__avr32_f64_cmp_lt+0x56>
80031152:	1b 07       	ld.w	r7,sp++
80031154:	1b 0e       	ld.w	lr,sp++
80031156:	58 3c       	cp.w	r12,3
80031158:	c0 a0       	breq	8003116c <__avr32_f64_cmp_lt+0x48>
8003115a:	58 1c       	cp.w	r12,1
8003115c:	c0 33       	brcs	80031162 <__avr32_f64_cmp_lt+0x3e>
8003115e:	5e 0d       	reteq	0
80031160:	5e 1f       	retne	1
80031162:	10 3a       	cp.w	r10,r8
80031164:	f2 0b 13 00 	cpc	r11,r9
80031168:	5e 2d       	reths	0
8003116a:	5e 3f       	retlo	1
8003116c:	14 38       	cp.w	r8,r10
8003116e:	f6 09 13 00 	cpc	r9,r11
80031172:	5e 2d       	reths	0
80031174:	5e 3f       	retlo	1
80031176:	1b 07       	ld.w	r7,sp++
80031178:	d8 0a       	popm	pc,r12=0
8003117a:	58 17       	cp.w	r7,1
8003117c:	5f 1c       	srne	r12
8003117e:	58 09       	cp.w	r9,0
80031180:	f5 b8 00 00 	subfeq	r8,0
80031184:	1b 07       	ld.w	r7,sp++
80031186:	1b 0e       	ld.w	lr,sp++
80031188:	5e 0d       	reteq	0
8003118a:	5e fc       	retal	r12

8003118c <__avr32_f32_cmp_lt>:
8003118c:	f8 0a 15 01 	lsl	r10,r12,0x1
80031190:	f6 09 15 01 	lsl	r9,r11,0x1
80031194:	f5 ba 00 00 	subfeq	r10,0
80031198:	5e 0d       	reteq	0
8003119a:	fc 18 ff 00 	movh	r8,0xff00
8003119e:	10 3a       	cp.w	r10,r8
800311a0:	5e bd       	rethi	0
800311a2:	10 39       	cp.w	r9,r8
800311a4:	5e bd       	rethi	0
800311a6:	f7 ec 20 08 	eor	r8,r11,r12
800311aa:	ed bc 00 1f 	bld	r12,0x1f
800311ae:	5f 38       	srlo	r8
800311b0:	5e 68       	retmi	r8
800311b2:	c0 43       	brcs	800311ba <__avr32_f32_cmp_lt+0x2e>
800311b4:	16 3c       	cp.w	r12,r11
800311b6:	5e 2d       	reths	0
800311b8:	5e 3f       	retlo	1
800311ba:	18 3b       	cp.w	r11,r12
800311bc:	5e 2d       	reths	0
800311be:	5e 3f       	retlo	1

800311c0 <__avr32_f64_div>:
800311c0:	eb cd 40 ff 	pushm	r0-r7,lr
800311c4:	f7 e9 20 0e 	eor	lr,r11,r9
800311c8:	f6 07 16 14 	lsr	r7,r11,0x14
800311cc:	a9 7b       	lsl	r11,0x9
800311ce:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800311d2:	a9 7a       	lsl	r10,0x9
800311d4:	bd bb       	sbr	r11,0x1d
800311d6:	e4 1b 3f ff 	andh	r11,0x3fff
800311da:	ab d7       	cbr	r7,0xb
800311dc:	e0 80 00 cc 	breq	80031374 <__avr32_f64_div_round_subnormal+0x54>
800311e0:	e0 47 07 ff 	cp.w	r7,2047
800311e4:	e0 84 00 b5 	brge	8003134e <__avr32_f64_div_round_subnormal+0x2e>
800311e8:	f2 06 16 14 	lsr	r6,r9,0x14
800311ec:	a9 79       	lsl	r9,0x9
800311ee:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800311f2:	a9 78       	lsl	r8,0x9
800311f4:	bd b9       	sbr	r9,0x1d
800311f6:	e4 19 3f ff 	andh	r9,0x3fff
800311fa:	ab d6       	cbr	r6,0xb
800311fc:	e0 80 00 e2 	breq	800313c0 <__avr32_f64_div_round_subnormal+0xa0>
80031200:	e0 46 07 ff 	cp.w	r6,2047
80031204:	e0 84 00 b2 	brge	80031368 <__avr32_f64_div_round_subnormal+0x48>
80031208:	0c 17       	sub	r7,r6
8003120a:	fe 37 fc 01 	sub	r7,-1023
8003120e:	fc 1c 80 00 	movh	r12,0x8000
80031212:	f8 03 16 01 	lsr	r3,r12,0x1
80031216:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8003121a:	5c d4       	com	r4
8003121c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80031220:	e6 09 06 44 	mulu.d	r4,r3,r9
80031224:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80031228:	e6 05 06 44 	mulu.d	r4,r3,r5
8003122c:	ea 03 15 02 	lsl	r3,r5,0x2
80031230:	e6 09 06 44 	mulu.d	r4,r3,r9
80031234:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80031238:	e6 05 06 44 	mulu.d	r4,r3,r5
8003123c:	ea 03 15 02 	lsl	r3,r5,0x2
80031240:	e6 09 06 44 	mulu.d	r4,r3,r9
80031244:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80031248:	e6 05 06 44 	mulu.d	r4,r3,r5
8003124c:	ea 03 15 02 	lsl	r3,r5,0x2
80031250:	e6 08 06 40 	mulu.d	r0,r3,r8
80031254:	e4 09 07 40 	macu.d	r0,r2,r9
80031258:	e6 09 06 44 	mulu.d	r4,r3,r9
8003125c:	02 04       	add	r4,r1
8003125e:	5c 05       	acr	r5
80031260:	a3 65       	lsl	r5,0x2
80031262:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80031266:	a3 64       	lsl	r4,0x2
80031268:	5c 34       	neg	r4
8003126a:	f8 05 01 45 	sbc	r5,r12,r5
8003126e:	e6 04 06 40 	mulu.d	r0,r3,r4
80031272:	e4 05 07 40 	macu.d	r0,r2,r5
80031276:	e6 05 06 44 	mulu.d	r4,r3,r5
8003127a:	02 04       	add	r4,r1
8003127c:	5c 05       	acr	r5
8003127e:	ea 03 15 02 	lsl	r3,r5,0x2
80031282:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80031286:	e8 02 15 02 	lsl	r2,r4,0x2
8003128a:	e6 08 06 40 	mulu.d	r0,r3,r8
8003128e:	e4 09 07 40 	macu.d	r0,r2,r9
80031292:	e6 09 06 44 	mulu.d	r4,r3,r9
80031296:	02 04       	add	r4,r1
80031298:	5c 05       	acr	r5
8003129a:	a3 65       	lsl	r5,0x2
8003129c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800312a0:	a3 64       	lsl	r4,0x2
800312a2:	5c 34       	neg	r4
800312a4:	f8 05 01 45 	sbc	r5,r12,r5
800312a8:	e6 04 06 40 	mulu.d	r0,r3,r4
800312ac:	e4 05 07 40 	macu.d	r0,r2,r5
800312b0:	e6 05 06 44 	mulu.d	r4,r3,r5
800312b4:	02 04       	add	r4,r1
800312b6:	5c 05       	acr	r5
800312b8:	ea 03 15 02 	lsl	r3,r5,0x2
800312bc:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800312c0:	e8 02 15 02 	lsl	r2,r4,0x2
800312c4:	e6 0a 06 40 	mulu.d	r0,r3,r10
800312c8:	e4 0b 07 40 	macu.d	r0,r2,r11
800312cc:	e6 0b 06 42 	mulu.d	r2,r3,r11
800312d0:	02 02       	add	r2,r1
800312d2:	5c 03       	acr	r3
800312d4:	ed b3 00 1c 	bld	r3,0x1c
800312d8:	c0 90       	breq	800312ea <__avr32_f64_div+0x12a>
800312da:	a1 72       	lsl	r2,0x1
800312dc:	5c f3       	rol	r3
800312de:	20 17       	sub	r7,1
800312e0:	a3 9a       	lsr	r10,0x3
800312e2:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800312e6:	a3 9b       	lsr	r11,0x3
800312e8:	c0 58       	rjmp	800312f2 <__avr32_f64_div+0x132>
800312ea:	a5 8a       	lsr	r10,0x4
800312ec:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800312f0:	a5 8b       	lsr	r11,0x4
800312f2:	58 07       	cp.w	r7,0
800312f4:	e0 8a 00 8b 	brle	8003140a <__avr32_f64_div_res_subnormal>
800312f8:	e0 12 ff 00 	andl	r2,0xff00
800312fc:	e8 12 00 80 	orl	r2,0x80
80031300:	e6 08 06 40 	mulu.d	r0,r3,r8
80031304:	e4 09 07 40 	macu.d	r0,r2,r9
80031308:	e4 08 06 44 	mulu.d	r4,r2,r8
8003130c:	e6 09 06 48 	mulu.d	r8,r3,r9
80031310:	00 05       	add	r5,r0
80031312:	f0 01 00 48 	adc	r8,r8,r1
80031316:	5c 09       	acr	r9
80031318:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8003131c:	58 04       	cp.w	r4,0
8003131e:	5c 25       	cpc	r5

80031320 <__avr32_f64_div_round_subnormal>:
80031320:	f4 08 13 00 	cpc	r8,r10
80031324:	f6 09 13 00 	cpc	r9,r11
80031328:	5f 36       	srlo	r6
8003132a:	f8 06 17 00 	moveq	r6,r12
8003132e:	e4 0a 16 08 	lsr	r10,r2,0x8
80031332:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80031336:	e6 0b 16 08 	lsr	r11,r3,0x8
8003133a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003133e:	ed be 00 1f 	bld	lr,0x1f
80031342:	ef bb 00 1f 	bst	r11,0x1f
80031346:	0c 0a       	add	r10,r6
80031348:	5c 0b       	acr	r11
8003134a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8003134e:	e4 1b 00 0f 	andh	r11,0xf
80031352:	14 4b       	or	r11,r10
80031354:	e0 81 00 a7 	brne	800314a2 <__avr32_f64_div_res_subnormal+0x98>
80031358:	f2 06 16 14 	lsr	r6,r9,0x14
8003135c:	ab d6       	cbr	r6,0xb
8003135e:	e0 46 07 ff 	cp.w	r6,2047
80031362:	e0 81 00 a4 	brne	800314aa <__avr32_f64_div_res_subnormal+0xa0>
80031366:	c9 e8       	rjmp	800314a2 <__avr32_f64_div_res_subnormal+0x98>
80031368:	e4 19 00 0f 	andh	r9,0xf
8003136c:	10 49       	or	r9,r8
8003136e:	e0 81 00 9a 	brne	800314a2 <__avr32_f64_div_res_subnormal+0x98>
80031372:	c9 28       	rjmp	80031496 <__avr32_f64_div_res_subnormal+0x8c>
80031374:	a3 7b       	lsl	r11,0x3
80031376:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8003137a:	a3 7a       	lsl	r10,0x3
8003137c:	f5 eb 10 04 	or	r4,r10,r11
80031380:	e0 80 00 a0 	breq	800314c0 <__avr32_f64_div_op1_zero>
80031384:	f6 04 12 00 	clz	r4,r11
80031388:	c1 70       	breq	800313b6 <__avr32_f64_div_round_subnormal+0x96>
8003138a:	c0 c3       	brcs	800313a2 <__avr32_f64_div_round_subnormal+0x82>
8003138c:	e8 05 11 20 	rsub	r5,r4,32
80031390:	f6 04 09 4b 	lsl	r11,r11,r4
80031394:	f4 05 0a 45 	lsr	r5,r10,r5
80031398:	0a 4b       	or	r11,r5
8003139a:	f4 04 09 4a 	lsl	r10,r10,r4
8003139e:	08 17       	sub	r7,r4
800313a0:	c0 b8       	rjmp	800313b6 <__avr32_f64_div_round_subnormal+0x96>
800313a2:	f4 04 12 00 	clz	r4,r10
800313a6:	f9 b4 03 00 	movlo	r4,0
800313aa:	f7 b4 02 e0 	subhs	r4,-32
800313ae:	f4 04 09 4b 	lsl	r11,r10,r4
800313b2:	30 0a       	mov	r10,0
800313b4:	08 17       	sub	r7,r4
800313b6:	a3 8a       	lsr	r10,0x2
800313b8:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800313bc:	a3 8b       	lsr	r11,0x2
800313be:	c1 1b       	rjmp	800311e0 <__avr32_f64_div+0x20>
800313c0:	a3 79       	lsl	r9,0x3
800313c2:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800313c6:	a3 78       	lsl	r8,0x3
800313c8:	f3 e8 10 04 	or	r4,r9,r8
800313cc:	c6 f0       	breq	800314aa <__avr32_f64_div_res_subnormal+0xa0>
800313ce:	f2 04 12 00 	clz	r4,r9
800313d2:	c1 70       	breq	80031400 <__avr32_f64_div_round_subnormal+0xe0>
800313d4:	c0 c3       	brcs	800313ec <__avr32_f64_div_round_subnormal+0xcc>
800313d6:	e8 05 11 20 	rsub	r5,r4,32
800313da:	f2 04 09 49 	lsl	r9,r9,r4
800313de:	f0 05 0a 45 	lsr	r5,r8,r5
800313e2:	0a 49       	or	r9,r5
800313e4:	f0 04 09 48 	lsl	r8,r8,r4
800313e8:	08 16       	sub	r6,r4
800313ea:	c0 b8       	rjmp	80031400 <__avr32_f64_div_round_subnormal+0xe0>
800313ec:	f0 04 12 00 	clz	r4,r8
800313f0:	f9 b4 03 00 	movlo	r4,0
800313f4:	f7 b4 02 e0 	subhs	r4,-32
800313f8:	f0 04 09 49 	lsl	r9,r8,r4
800313fc:	30 08       	mov	r8,0
800313fe:	08 16       	sub	r6,r4
80031400:	a3 88       	lsr	r8,0x2
80031402:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80031406:	a3 89       	lsr	r9,0x2
80031408:	cf ca       	rjmp	80031200 <__avr32_f64_div+0x40>

8003140a <__avr32_f64_div_res_subnormal>:
8003140a:	5c 37       	neg	r7
8003140c:	2f f7       	sub	r7,-1
8003140e:	f1 b7 04 c0 	satu	r7,0x6
80031412:	e0 47 00 20 	cp.w	r7,32
80031416:	c1 54       	brge	80031440 <__avr32_f64_div_res_subnormal+0x36>
80031418:	ee 06 11 20 	rsub	r6,r7,32
8003141c:	e4 07 0a 42 	lsr	r2,r2,r7
80031420:	e6 06 09 4c 	lsl	r12,r3,r6
80031424:	18 42       	or	r2,r12
80031426:	e6 07 0a 43 	lsr	r3,r3,r7
8003142a:	f4 06 09 41 	lsl	r1,r10,r6
8003142e:	f4 07 0a 4a 	lsr	r10,r10,r7
80031432:	f6 06 09 4c 	lsl	r12,r11,r6
80031436:	18 4a       	or	r10,r12
80031438:	f6 07 0a 4b 	lsr	r11,r11,r7
8003143c:	30 00       	mov	r0,0
8003143e:	c1 58       	rjmp	80031468 <__avr32_f64_div_res_subnormal+0x5e>
80031440:	ee 06 11 20 	rsub	r6,r7,32
80031444:	f9 b0 00 00 	moveq	r0,0
80031448:	f9 bc 00 00 	moveq	r12,0
8003144c:	c0 50       	breq	80031456 <__avr32_f64_div_res_subnormal+0x4c>
8003144e:	f4 06 09 40 	lsl	r0,r10,r6
80031452:	f6 06 09 4c 	lsl	r12,r11,r6
80031456:	e6 07 0a 42 	lsr	r2,r3,r7
8003145a:	30 03       	mov	r3,0
8003145c:	f4 07 0a 41 	lsr	r1,r10,r7
80031460:	18 41       	or	r1,r12
80031462:	f6 07 0a 4a 	lsr	r10,r11,r7
80031466:	30 0b       	mov	r11,0
80031468:	e0 12 ff 00 	andl	r2,0xff00
8003146c:	e8 12 00 80 	orl	r2,0x80
80031470:	e6 08 06 46 	mulu.d	r6,r3,r8
80031474:	e4 09 07 46 	macu.d	r6,r2,r9
80031478:	e4 08 06 44 	mulu.d	r4,r2,r8
8003147c:	e6 09 06 48 	mulu.d	r8,r3,r9
80031480:	0c 05       	add	r5,r6
80031482:	f0 07 00 48 	adc	r8,r8,r7
80031486:	5c 09       	acr	r9
80031488:	30 07       	mov	r7,0
8003148a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8003148e:	00 34       	cp.w	r4,r0
80031490:	e2 05 13 00 	cpc	r5,r1
80031494:	c4 6b       	rjmp	80031320 <__avr32_f64_div_round_subnormal>
80031496:	1c 9b       	mov	r11,lr
80031498:	e6 1b 80 00 	andh	r11,0x8000,COH
8003149c:	30 0a       	mov	r10,0
8003149e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800314a2:	3f fb       	mov	r11,-1
800314a4:	30 0a       	mov	r10,0
800314a6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800314aa:	f5 eb 10 04 	or	r4,r10,r11
800314ae:	c0 90       	breq	800314c0 <__avr32_f64_div_op1_zero>
800314b0:	1c 9b       	mov	r11,lr
800314b2:	e6 1b 80 00 	andh	r11,0x8000,COH
800314b6:	ea 1b 7f f0 	orh	r11,0x7ff0
800314ba:	30 0a       	mov	r10,0
800314bc:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800314c0 <__avr32_f64_div_op1_zero>:
800314c0:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800314c4:	ce f0       	breq	800314a2 <__avr32_f64_div_res_subnormal+0x98>
800314c6:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800314ca:	e0 44 07 ff 	cp.w	r4,2047
800314ce:	ce 41       	brne	80031496 <__avr32_f64_div_res_subnormal+0x8c>
800314d0:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800314d4:	ce 10       	breq	80031496 <__avr32_f64_div_res_subnormal+0x8c>
800314d6:	ce 6b       	rjmp	800314a2 <__avr32_f64_div_res_subnormal+0x98>

800314d8 <__avr32_f32_div>:
800314d8:	f7 ec 20 08 	eor	r8,r11,r12
800314dc:	a1 7c       	lsl	r12,0x1
800314de:	a1 7b       	lsl	r11,0x1
800314e0:	c7 a0       	breq	800315d4 <__divsf_return_op1+0x16>
800314e2:	18 7c       	tst	r12,r12
800314e4:	f9 b9 00 00 	moveq	r9,0
800314e8:	c0 90       	breq	800314fa <__avr32_f32_div+0x22>
800314ea:	f8 09 16 18 	lsr	r9,r12,0x18
800314ee:	c7 e0       	breq	800315ea <__divsf_return_op1+0x2c>
800314f0:	e0 49 00 ff 	cp.w	r9,255
800314f4:	c6 82       	brcc	800315c4 <__divsf_return_op1+0x6>
800314f6:	a7 7c       	lsl	r12,0x7
800314f8:	bf bc       	sbr	r12,0x1f
800314fa:	f6 0a 16 18 	lsr	r10,r11,0x18
800314fe:	c7 e0       	breq	800315fa <__divsf_return_op1+0x3c>
80031500:	e0 4a 00 ff 	cp.w	r10,255
80031504:	c6 62       	brcc	800315d0 <__divsf_return_op1+0x12>
80031506:	a7 7b       	lsl	r11,0x7
80031508:	bf bb       	sbr	r11,0x1f
8003150a:	58 09       	cp.w	r9,0
8003150c:	f5 bc 00 00 	subfeq	r12,0
80031510:	5e 0d       	reteq	0
80031512:	1a d5       	st.w	--sp,r5
80031514:	bb 27       	st.d	--sp,r6
80031516:	14 19       	sub	r9,r10
80031518:	28 19       	sub	r9,-127
8003151a:	fc 1a 80 00 	movh	r10,0x8000
8003151e:	a3 8c       	lsr	r12,0x2
80031520:	f6 05 16 02 	lsr	r5,r11,0x2
80031524:	f4 0b 16 01 	lsr	r11,r10,0x1
80031528:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8003152c:	5c d6       	com	r6
8003152e:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80031532:	f6 05 06 46 	mulu.d	r6,r11,r5
80031536:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003153a:	f6 07 06 46 	mulu.d	r6,r11,r7
8003153e:	ee 0b 15 02 	lsl	r11,r7,0x2
80031542:	f6 05 06 46 	mulu.d	r6,r11,r5
80031546:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003154a:	f6 07 06 46 	mulu.d	r6,r11,r7
8003154e:	ee 0b 15 02 	lsl	r11,r7,0x2
80031552:	f6 05 06 46 	mulu.d	r6,r11,r5
80031556:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003155a:	f6 07 06 46 	mulu.d	r6,r11,r7
8003155e:	ee 0b 15 02 	lsl	r11,r7,0x2
80031562:	f6 05 06 46 	mulu.d	r6,r11,r5
80031566:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003156a:	f6 07 06 46 	mulu.d	r6,r11,r7
8003156e:	ee 0b 15 02 	lsl	r11,r7,0x2
80031572:	f6 0c 06 46 	mulu.d	r6,r11,r12
80031576:	a5 8c       	lsr	r12,0x4
80031578:	ed b7 00 1c 	bld	r7,0x1c
8003157c:	c0 40       	breq	80031584 <__avr32_f32_div+0xac>
8003157e:	a1 77       	lsl	r7,0x1
80031580:	20 19       	sub	r9,1
80031582:	a1 7c       	lsl	r12,0x1
80031584:	58 09       	cp.w	r9,0
80031586:	e0 8a 00 42 	brle	8003160a <__avr32_f32_div_res_subnormal>
8003158a:	e0 17 ff e0 	andl	r7,0xffe0
8003158e:	e8 17 00 10 	orl	r7,0x10
80031592:	ea 07 06 4a 	mulu.d	r10,r5,r7
80031596:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8003159a:	58 0a       	cp.w	r10,0

8003159c <__avr32_f32_div_round_subnormal>:
8003159c:	f8 0b 13 00 	cpc	r11,r12
800315a0:	5f 3b       	srlo	r11
800315a2:	ea 0b 17 00 	moveq	r11,r5
800315a6:	ee 0c 16 05 	lsr	r12,r7,0x5
800315aa:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
800315ae:	bb 07       	ld.d	r6,sp++
800315b0:	1b 05       	ld.w	r5,sp++
800315b2:	ed b8 00 1f 	bld	r8,0x1f
800315b6:	ef bc 00 1f 	bst	r12,0x1f
800315ba:	16 0c       	add	r12,r11
800315bc:	5e fc       	retal	r12

800315be <__divsf_return_op1>:
800315be:	a1 78       	lsl	r8,0x1
800315c0:	5d 0c       	ror	r12
800315c2:	5e fc       	retal	r12
800315c4:	5e 1e       	retne	-1
800315c6:	fc 19 ff 00 	movh	r9,0xff00
800315ca:	12 3b       	cp.w	r11,r9
800315cc:	cf 93       	brcs	800315be <__divsf_return_op1>
800315ce:	5e fe       	retal	-1
800315d0:	5e 0d       	reteq	0
800315d2:	5e fe       	retal	-1
800315d4:	18 7c       	tst	r12,r12
800315d6:	5e 0e       	reteq	-1
800315d8:	f8 09 16 18 	lsr	r9,r12,0x18
800315dc:	c0 70       	breq	800315ea <__divsf_return_op1+0x2c>
800315de:	e0 49 00 ff 	cp.w	r9,255
800315e2:	cf 12       	brcc	800315c4 <__divsf_return_op1+0x6>
800315e4:	fc 1c ff 00 	movh	r12,0xff00
800315e8:	ce bb       	rjmp	800315be <__divsf_return_op1>
800315ea:	a7 7c       	lsl	r12,0x7
800315ec:	f8 09 12 00 	clz	r9,r12
800315f0:	f8 09 09 4c 	lsl	r12,r12,r9
800315f4:	f2 09 11 01 	rsub	r9,r9,1
800315f8:	c8 1b       	rjmp	800314fa <__avr32_f32_div+0x22>
800315fa:	a7 7b       	lsl	r11,0x7
800315fc:	f6 0a 12 00 	clz	r10,r11
80031600:	f6 0a 09 4b 	lsl	r11,r11,r10
80031604:	f4 0a 11 01 	rsub	r10,r10,1
80031608:	c8 5b       	rjmp	80031512 <__avr32_f32_div+0x3a>

8003160a <__avr32_f32_div_res_subnormal>:
8003160a:	5c 39       	neg	r9
8003160c:	2f f9       	sub	r9,-1
8003160e:	f1 b9 04 a0 	satu	r9,0x5
80031612:	f2 0a 11 20 	rsub	r10,r9,32
80031616:	ee 09 0a 47 	lsr	r7,r7,r9
8003161a:	f8 0a 09 46 	lsl	r6,r12,r10
8003161e:	f8 09 0a 4c 	lsr	r12,r12,r9
80031622:	e0 17 ff e0 	andl	r7,0xffe0
80031626:	e8 17 00 10 	orl	r7,0x10
8003162a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8003162e:	30 09       	mov	r9,0
80031630:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80031634:	0c 3a       	cp.w	r10,r6
80031636:	cb 3b       	rjmp	8003159c <__avr32_f32_div_round_subnormal>

80031638 <__avr32_f32_sub_from_add>:
80031638:	ee 1b 80 00 	eorh	r11,0x8000

8003163c <__avr32_f32_sub>:
8003163c:	f7 ec 20 08 	eor	r8,r11,r12
80031640:	c6 46       	brmi	80031708 <__avr32_f32_add_from_sub>
80031642:	18 98       	mov	r8,r12
80031644:	e6 1c 80 00 	andh	r12,0x8000,COH
80031648:	bf db       	cbr	r11,0x1f
8003164a:	bf d8       	cbr	r8,0x1f
8003164c:	f0 0b 0c 4a 	max	r10,r8,r11
80031650:	f0 0b 0d 49 	min	r9,r8,r11
80031654:	10 3a       	cp.w	r10,r8
80031656:	f7 bc 01 01 	subne	r12,1
8003165a:	e6 1c 80 00 	andh	r12,0x8000,COH
8003165e:	f4 08 15 08 	lsl	r8,r10,0x8
80031662:	bf b8       	sbr	r8,0x1f
80031664:	b7 9a       	lsr	r10,0x17
80031666:	e0 4a 00 ff 	cp.w	r10,255
8003166a:	c3 80       	breq	800316da <__avr32_f32_sub_op1_nan_or_inf>
8003166c:	f2 0b 15 08 	lsl	r11,r9,0x8
80031670:	bf bb       	sbr	r11,0x1f
80031672:	b7 99       	lsr	r9,0x17
80031674:	1a dc       	st.w	--sp,r12
80031676:	c2 90       	breq	800316c8 <__avr32_f32_sub_op2_subnormal>
80031678:	f4 09 01 0c 	sub	r12,r10,r9
8003167c:	c0 c0       	breq	80031694 <__avr32_f32_sub_shift_done>
8003167e:	f1 bc 04 a0 	satu	r12,0x5
80031682:	f8 09 11 20 	rsub	r9,r12,32
80031686:	f6 09 09 49 	lsl	r9,r11,r9
8003168a:	f7 b8 01 01 	subne	r8,1
8003168e:	5f 19       	srne	r9
80031690:	f6 0c 0a 4b 	lsr	r11,r11,r12

80031694 <__avr32_f32_sub_shift_done>:
80031694:	16 18       	sub	r8,r11
80031696:	1b 0c       	ld.w	r12,sp++
80031698:	f0 0b 12 00 	clz	r11,r8
8003169c:	5e 3d       	retlo	0
8003169e:	f0 0b 09 48 	lsl	r8,r8,r11
800316a2:	16 1a       	sub	r10,r11
800316a4:	e0 8a 00 26 	brle	800316f0 <__avr32_f32_sub_subnormal_result>
800316a8:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800316ac:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
800316b0:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

800316b4 <__avr32_f32_sub_round>:
800316b4:	fc 1a 80 00 	movh	r10,0x8000
800316b8:	ed bc 00 00 	bld	r12,0x0
800316bc:	f7 ba 01 ff 	subne	r10,-1
800316c0:	14 39       	cp.w	r9,r10
800316c2:	f7 bc 02 ff 	subhs	r12,-1
800316c6:	5e fc       	retal	r12

800316c8 <__avr32_f32_sub_op2_subnormal>:
800316c8:	bf db       	cbr	r11,0x1f
800316ca:	f9 b9 01 01 	movne	r9,1
800316ce:	58 0a       	cp.w	r10,0
800316d0:	cd 41       	brne	80031678 <__avr32_f32_sub+0x3c>
800316d2:	bf d8       	cbr	r8,0x1f
800316d4:	f9 ba 01 01 	movne	r10,1
800316d8:	cd 0b       	rjmp	80031678 <__avr32_f32_sub+0x3c>

800316da <__avr32_f32_sub_op1_nan_or_inf>:
800316da:	f0 0b 15 01 	lsl	r11,r8,0x1
800316de:	5e 1e       	retne	-1
800316e0:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800316e4:	f2 0b 16 17 	lsr	r11,r9,0x17
800316e8:	e0 4b 00 ff 	cp.w	r11,255
800316ec:	5e 1c       	retne	r12
800316ee:	5e fe       	retal	-1

800316f0 <__avr32_f32_sub_subnormal_result>:
800316f0:	f4 0a 11 09 	rsub	r10,r10,9
800316f4:	f4 0b 11 20 	rsub	r11,r10,32
800316f8:	5e 3d       	retlo	0
800316fa:	f0 0a 0a 4a 	lsr	r10,r8,r10
800316fe:	14 4c       	or	r12,r10
80031700:	f0 0b 09 48 	lsl	r8,r8,r11
80031704:	10 49       	or	r9,r8
80031706:	cd 7b       	rjmp	800316b4 <__avr32_f32_sub_round>

80031708 <__avr32_f32_add_from_sub>:
80031708:	ee 1b 80 00 	eorh	r11,0x8000

8003170c <__avr32_f32_add>:
8003170c:	f7 ec 20 08 	eor	r8,r11,r12
80031710:	c9 46       	brmi	80031638 <__avr32_f32_sub_from_add>
80031712:	18 98       	mov	r8,r12
80031714:	e6 1c 80 00 	andh	r12,0x8000,COH
80031718:	bf db       	cbr	r11,0x1f
8003171a:	bf d8       	cbr	r8,0x1f
8003171c:	f0 0b 0c 4a 	max	r10,r8,r11
80031720:	f0 0b 0d 49 	min	r9,r8,r11
80031724:	f4 08 15 08 	lsl	r8,r10,0x8
80031728:	bf b8       	sbr	r8,0x1f
8003172a:	b7 9a       	lsr	r10,0x17
8003172c:	e0 4a 00 ff 	cp.w	r10,255
80031730:	c2 d0       	breq	8003178a <__avr32_f32_add_op1_nan_or_inf>
80031732:	f2 0b 15 08 	lsl	r11,r9,0x8
80031736:	bf bb       	sbr	r11,0x1f
80031738:	b7 99       	lsr	r9,0x17
8003173a:	c1 e0       	breq	80031776 <__avr32_f32_add_op2_subnormal>
8003173c:	1a dc       	st.w	--sp,r12
8003173e:	14 29       	rsub	r9,r10
80031740:	f1 b9 04 a0 	satu	r9,0x5
80031744:	f6 09 0a 4c 	lsr	r12,r11,r9
80031748:	f2 09 11 18 	rsub	r9,r9,24
8003174c:	f6 09 09 4b 	lsl	r11,r11,r9
80031750:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80031754:	18 08       	add	r8,r12
80031756:	1b 0c       	ld.w	r12,sp++
80031758:	c2 63       	brcs	800317a4 <__avr32_f32_add_res_of>
8003175a:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
8003175e:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80031762:	fc 1a 80 00 	movh	r10,0x8000
80031766:	ed bc 00 00 	bld	r12,0x0
8003176a:	f7 ba 01 ff 	subne	r10,-1
8003176e:	14 3b       	cp.w	r11,r10
80031770:	f7 bc 02 ff 	subhs	r12,-1
80031774:	5e fc       	retal	r12

80031776 <__avr32_f32_add_op2_subnormal>:
80031776:	bf db       	cbr	r11,0x1f
80031778:	f9 b9 01 01 	movne	r9,1
8003177c:	58 0a       	cp.w	r10,0
8003177e:	cd f1       	brne	8003173c <__avr32_f32_add+0x30>
80031780:	bf d8       	cbr	r8,0x1f
80031782:	10 0b       	add	r11,r8
80031784:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80031788:	5e fc       	retal	r12

8003178a <__avr32_f32_add_op1_nan_or_inf>:
8003178a:	f0 0b 15 01 	lsl	r11,r8,0x1
8003178e:	5e 1e       	retne	-1
80031790:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80031794:	f2 0b 16 17 	lsr	r11,r9,0x17
80031798:	e0 4b 00 ff 	cp.w	r11,255
8003179c:	5e 1c       	retne	r12
8003179e:	a9 79       	lsl	r9,0x9
800317a0:	5e 0c       	reteq	r12
800317a2:	5e fe       	retal	-1

800317a4 <__avr32_f32_add_res_of>:
800317a4:	a1 98       	lsr	r8,0x1
800317a6:	2f fa       	sub	r10,-1
800317a8:	e0 4a 00 ff 	cp.w	r10,255
800317ac:	f9 b8 00 00 	moveq	r8,0
800317b0:	f9 bb 00 00 	moveq	r11,0
800317b4:	cd 3b       	rjmp	8003175a <__avr32_f32_add+0x4e>
800317b6:	d7 03       	nop

800317b8 <__avr32_f32_mul>:
800317b8:	18 98       	mov	r8,r12
800317ba:	16 5c       	eor	r12,r11
800317bc:	e6 1c 80 00 	andh	r12,0x8000,COH
800317c0:	bf d8       	cbr	r8,0x1f
800317c2:	c6 60       	breq	8003188e <__avr32_f32_mul_op1_zero>
800317c4:	bf db       	cbr	r11,0x1f
800317c6:	f0 0b 0c 4a 	max	r10,r8,r11
800317ca:	f0 0b 0d 49 	min	r9,r8,r11
800317ce:	f4 08 15 08 	lsl	r8,r10,0x8
800317d2:	bf b8       	sbr	r8,0x1f
800317d4:	b7 9a       	lsr	r10,0x17
800317d6:	e0 4a 00 ff 	cp.w	r10,255
800317da:	c3 d0       	breq	80031854 <__avr32_f32_mul_op1_nan_or_inf>
800317dc:	f2 0b 15 08 	lsl	r11,r9,0x8
800317e0:	bf bb       	sbr	r11,0x1f
800317e2:	b7 99       	lsr	r9,0x17
800317e4:	c2 40       	breq	8003182c <__avr32_f32_mul_op2_subnormal>
800317e6:	14 09       	add	r9,r10
800317e8:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800317ec:	f6 08 15 01 	lsl	r8,r11,0x1
800317f0:	f0 0b 17 20 	movhs	r11,r8
800317f4:	f7 b9 02 01 	subhs	r9,1
800317f8:	a9 8a       	lsr	r10,0x8
800317fa:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
800317fe:	27 e9       	sub	r9,126
80031800:	e0 8a 00 39 	brle	80031872 <__avr32_f32_mul_res_subnormal>
80031804:	e0 49 00 ff 	cp.w	r9,255
80031808:	c0 f4       	brge	80031826 <__avr32_f32_mul_round+0x14>
8003180a:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8003180e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80031812 <__avr32_f32_mul_round>:
80031812:	fc 18 80 00 	movh	r8,0x8000
80031816:	ed bc 00 00 	bld	r12,0x0
8003181a:	f7 b8 01 ff 	subne	r8,-1
8003181e:	10 3a       	cp.w	r10,r8
80031820:	f7 bc 02 ff 	subhs	r12,-1
80031824:	5e fc       	retal	r12
80031826:	ea 1c 7f 80 	orh	r12,0x7f80
8003182a:	5e fc       	retal	r12

8003182c <__avr32_f32_mul_op2_subnormal>:
8003182c:	bf db       	cbr	r11,0x1f
8003182e:	f6 09 12 00 	clz	r9,r11
80031832:	5e 3d       	retlo	0
80031834:	20 89       	sub	r9,8
80031836:	f6 09 09 4b 	lsl	r11,r11,r9
8003183a:	f2 09 11 01 	rsub	r9,r9,1
8003183e:	14 7a       	tst	r10,r10
80031840:	cd 31       	brne	800317e6 <__avr32_f32_mul+0x2e>
80031842:	bf d8       	cbr	r8,0x1f
80031844:	f6 0a 12 00 	clz	r10,r11
80031848:	5e 3d       	retlo	0
8003184a:	f0 0a 09 48 	lsl	r8,r8,r10
8003184e:	f4 0a 11 01 	rsub	r10,r10,1
80031852:	cc ab       	rjmp	800317e6 <__avr32_f32_mul+0x2e>

80031854 <__avr32_f32_mul_op1_nan_or_inf>:
80031854:	f0 0b 15 01 	lsl	r11,r8,0x1
80031858:	5e 1e       	retne	-1
8003185a:	12 79       	tst	r9,r9
8003185c:	5e 0e       	reteq	-1
8003185e:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80031862:	f2 0b 16 17 	lsr	r11,r9,0x17
80031866:	e0 4b 00 ff 	cp.w	r11,255
8003186a:	5e 1c       	retne	r12
8003186c:	a9 79       	lsl	r9,0x9
8003186e:	5e 0c       	reteq	r12
80031870:	5e fe       	retal	-1

80031872 <__avr32_f32_mul_res_subnormal>:
80031872:	f2 09 11 09 	rsub	r9,r9,9
80031876:	f2 08 11 20 	rsub	r8,r9,32
8003187a:	5e 3d       	retlo	0
8003187c:	f6 09 0a 49 	lsr	r9,r11,r9
80031880:	12 4c       	or	r12,r9
80031882:	f6 08 09 4b 	lsl	r11,r11,r8
80031886:	e4 1a 00 ff 	andh	r10,0xff
8003188a:	16 4a       	or	r10,r11
8003188c:	cc 3b       	rjmp	80031812 <__avr32_f32_mul_round>

8003188e <__avr32_f32_mul_op1_zero>:
8003188e:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80031892:	e0 4a 00 ff 	cp.w	r10,255
80031896:	5e 1c       	retne	r12
80031898:	5e 0e       	reteq	-1

8003189a <__avr32_f32_to_f64>:
8003189a:	f8 0b 15 01 	lsl	r11,r12,0x1
8003189e:	f9 ba 00 00 	moveq	r10,0
800318a2:	5e 0b       	reteq	r11
800318a4:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800318a8:	e0 49 00 ff 	cp.w	r9,255
800318ac:	c1 e0       	breq	800318e8 <__extendsfdf_return_op1+0x6>
800318ae:	a7 7b       	lsl	r11,0x7
800318b0:	30 0a       	mov	r10,0
800318b2:	58 09       	cp.w	r9,0
800318b4:	f7 b9 00 ff 	subeq	r9,-1
800318b8:	5f 18       	srne	r8
800318ba:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800318be:	fe 39 fc 80 	sub	r9,-896
800318c2:	f6 08 12 00 	clz	r8,r11
800318c6:	10 19       	sub	r9,r8
800318c8:	f6 08 09 4b 	lsl	r11,r11,r8
800318cc:	ed bb 00 1f 	bld	r11,0x1f
800318d0:	f7 b9 01 01 	subne	r9,1
800318d4:	ab 9a       	lsr	r10,0xb
800318d6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800318da:	a1 7b       	lsl	r11,0x1
800318dc:	ab 9b       	lsr	r11,0xb
800318de:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800318e2 <__extendsfdf_return_op1>:
800318e2:	a1 7c       	lsl	r12,0x1
800318e4:	5d 0b       	ror	r11
800318e6:	5e fb       	retal	r11
800318e8:	fc 1a ff e0 	movh	r10,0xffe0
800318ec:	a9 6b       	lsl	r11,0x8
800318ee:	f9 bb 01 ff 	movne	r11,-1
800318f2:	f4 0b 17 00 	moveq	r11,r10
800318f6:	30 0a       	mov	r10,0
800318f8:	cf 5b       	rjmp	800318e2 <__extendsfdf_return_op1>

800318fa <__avr32_f64_to_f32>:
800318fa:	f6 09 15 01 	lsl	r9,r11,0x1
800318fe:	b5 99       	lsr	r9,0x15
80031900:	5e 0d       	reteq	0
80031902:	f6 08 15 0a 	lsl	r8,r11,0xa
80031906:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8003190a:	ab 6a       	lsl	r10,0xa
8003190c:	5c 3a       	neg	r10
8003190e:	5c fc       	rol	r12
80031910:	e0 49 07 ff 	cp.w	r9,2047
80031914:	c1 a0       	breq	80031948 <__truncdfsf_return_op1+0x6>
80031916:	e0 29 03 80 	sub	r9,896
8003191a:	bf bc       	sbr	r12,0x1f
8003191c:	58 09       	cp.w	r9,0
8003191e:	e0 8a 00 1a 	brle	80031952 <__truncdfsf_return_op1+0x10>
80031922:	37 fa       	mov	r10,127
80031924:	ed bc 00 08 	bld	r12,0x8
80031928:	f7 ba 00 ff 	subeq	r10,-1
8003192c:	14 0c       	add	r12,r10
8003192e:	f7 b9 03 fe 	sublo	r9,-2
80031932:	ed bc 00 1f 	bld	r12,0x1f
80031936:	f7 b9 01 01 	subne	r9,1
8003193a:	f8 0c 16 07 	lsr	r12,r12,0x7
8003193e:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80031942 <__truncdfsf_return_op1>:
80031942:	a1 7b       	lsl	r11,0x1
80031944:	5d 0c       	ror	r12
80031946:	5e fc       	retal	r12
80031948:	bf dc       	cbr	r12,0x1f
8003194a:	5e 1e       	retne	-1
8003194c:	fc 1c 7f 80 	movh	r12,0x7f80
80031950:	5e fc       	retal	r12
80031952:	f2 09 11 01 	rsub	r9,r9,1
80031956:	59 99       	cp.w	r9,25
80031958:	f9 bc 02 00 	movhs	r12,0
8003195c:	c1 32       	brcc	80031982 <__truncdfsf_return_op1+0x40>
8003195e:	f2 0a 11 20 	rsub	r10,r9,32
80031962:	f8 0a 09 4a 	lsl	r10,r12,r10
80031966:	5f 1a       	srne	r10
80031968:	f8 09 0a 4c 	lsr	r12,r12,r9
8003196c:	14 4c       	or	r12,r10
8003196e:	37 fa       	mov	r10,127
80031970:	ed bc 00 08 	bld	r12,0x8
80031974:	f7 ba 00 ff 	subeq	r10,-1
80031978:	14 0c       	add	r12,r10
8003197a:	f8 0c 16 07 	lsr	r12,r12,0x7
8003197e:	a1 7b       	lsl	r11,0x1
80031980:	5d 0c       	ror	r12
80031982:	5e fc       	retal	r12

80031984 <__avr32_udiv64>:
80031984:	d4 31       	pushm	r0-r7,lr
80031986:	1a 97       	mov	r7,sp
80031988:	20 3d       	sub	sp,12
8003198a:	10 9c       	mov	r12,r8
8003198c:	12 9e       	mov	lr,r9
8003198e:	14 93       	mov	r3,r10
80031990:	58 09       	cp.w	r9,0
80031992:	e0 81 00 bd 	brne	80031b0c <__avr32_udiv64+0x188>
80031996:	16 38       	cp.w	r8,r11
80031998:	e0 88 00 40 	brls	80031a18 <__avr32_udiv64+0x94>
8003199c:	f0 08 12 00 	clz	r8,r8
800319a0:	c0 d0       	breq	800319ba <__avr32_udiv64+0x36>
800319a2:	f6 08 09 4b 	lsl	r11,r11,r8
800319a6:	f0 09 11 20 	rsub	r9,r8,32
800319aa:	f8 08 09 4c 	lsl	r12,r12,r8
800319ae:	f4 09 0a 49 	lsr	r9,r10,r9
800319b2:	f4 08 09 43 	lsl	r3,r10,r8
800319b6:	f3 eb 10 0b 	or	r11,r9,r11
800319ba:	f8 0e 16 10 	lsr	lr,r12,0x10
800319be:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800319c2:	f6 0e 0d 00 	divu	r0,r11,lr
800319c6:	e6 0b 16 10 	lsr	r11,r3,0x10
800319ca:	00 99       	mov	r9,r0
800319cc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800319d0:	e0 0a 02 48 	mul	r8,r0,r10
800319d4:	10 3b       	cp.w	r11,r8
800319d6:	c0 a2       	brcc	800319ea <__avr32_udiv64+0x66>
800319d8:	20 19       	sub	r9,1
800319da:	18 0b       	add	r11,r12
800319dc:	18 3b       	cp.w	r11,r12
800319de:	c0 63       	brcs	800319ea <__avr32_udiv64+0x66>
800319e0:	10 3b       	cp.w	r11,r8
800319e2:	f7 b9 03 01 	sublo	r9,1
800319e6:	f7 dc e3 0b 	addcs	r11,r11,r12
800319ea:	f6 08 01 01 	sub	r1,r11,r8
800319ee:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800319f2:	e2 0e 0d 00 	divu	r0,r1,lr
800319f6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800319fa:	00 98       	mov	r8,r0
800319fc:	e0 0a 02 4a 	mul	r10,r0,r10
80031a00:	14 33       	cp.w	r3,r10
80031a02:	c0 82       	brcc	80031a12 <__avr32_udiv64+0x8e>
80031a04:	20 18       	sub	r8,1
80031a06:	18 03       	add	r3,r12
80031a08:	18 33       	cp.w	r3,r12
80031a0a:	c0 43       	brcs	80031a12 <__avr32_udiv64+0x8e>
80031a0c:	14 33       	cp.w	r3,r10
80031a0e:	f7 b8 03 01 	sublo	r8,1
80031a12:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80031a16:	cd f8       	rjmp	80031bd4 <__avr32_udiv64+0x250>
80031a18:	58 08       	cp.w	r8,0
80031a1a:	c0 51       	brne	80031a24 <__avr32_udiv64+0xa0>
80031a1c:	30 19       	mov	r9,1
80031a1e:	f2 08 0d 08 	divu	r8,r9,r8
80031a22:	10 9c       	mov	r12,r8
80031a24:	f8 06 12 00 	clz	r6,r12
80031a28:	c0 41       	brne	80031a30 <__avr32_udiv64+0xac>
80031a2a:	18 1b       	sub	r11,r12
80031a2c:	30 19       	mov	r9,1
80031a2e:	c4 08       	rjmp	80031aae <__avr32_udiv64+0x12a>
80031a30:	ec 01 11 20 	rsub	r1,r6,32
80031a34:	f4 01 0a 49 	lsr	r9,r10,r1
80031a38:	f8 06 09 4c 	lsl	r12,r12,r6
80031a3c:	f6 06 09 48 	lsl	r8,r11,r6
80031a40:	f6 01 0a 41 	lsr	r1,r11,r1
80031a44:	f3 e8 10 08 	or	r8,r9,r8
80031a48:	f8 03 16 10 	lsr	r3,r12,0x10
80031a4c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80031a50:	e2 03 0d 00 	divu	r0,r1,r3
80031a54:	f0 0b 16 10 	lsr	r11,r8,0x10
80031a58:	00 9e       	mov	lr,r0
80031a5a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031a5e:	e0 05 02 49 	mul	r9,r0,r5
80031a62:	12 3b       	cp.w	r11,r9
80031a64:	c0 a2       	brcc	80031a78 <__avr32_udiv64+0xf4>
80031a66:	20 1e       	sub	lr,1
80031a68:	18 0b       	add	r11,r12
80031a6a:	18 3b       	cp.w	r11,r12
80031a6c:	c0 63       	brcs	80031a78 <__avr32_udiv64+0xf4>
80031a6e:	12 3b       	cp.w	r11,r9
80031a70:	f7 be 03 01 	sublo	lr,1
80031a74:	f7 dc e3 0b 	addcs	r11,r11,r12
80031a78:	12 1b       	sub	r11,r9
80031a7a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80031a7e:	f6 03 0d 02 	divu	r2,r11,r3
80031a82:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80031a86:	04 99       	mov	r9,r2
80031a88:	e4 05 02 4b 	mul	r11,r2,r5
80031a8c:	16 38       	cp.w	r8,r11
80031a8e:	c0 a2       	brcc	80031aa2 <__avr32_udiv64+0x11e>
80031a90:	20 19       	sub	r9,1
80031a92:	18 08       	add	r8,r12
80031a94:	18 38       	cp.w	r8,r12
80031a96:	c0 63       	brcs	80031aa2 <__avr32_udiv64+0x11e>
80031a98:	16 38       	cp.w	r8,r11
80031a9a:	f7 b9 03 01 	sublo	r9,1
80031a9e:	f1 dc e3 08 	addcs	r8,r8,r12
80031aa2:	f4 06 09 43 	lsl	r3,r10,r6
80031aa6:	f0 0b 01 0b 	sub	r11,r8,r11
80031aaa:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80031aae:	f8 06 16 10 	lsr	r6,r12,0x10
80031ab2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80031ab6:	f6 06 0d 00 	divu	r0,r11,r6
80031aba:	e6 0b 16 10 	lsr	r11,r3,0x10
80031abe:	00 9a       	mov	r10,r0
80031ac0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031ac4:	e0 0e 02 48 	mul	r8,r0,lr
80031ac8:	10 3b       	cp.w	r11,r8
80031aca:	c0 a2       	brcc	80031ade <__avr32_udiv64+0x15a>
80031acc:	20 1a       	sub	r10,1
80031ace:	18 0b       	add	r11,r12
80031ad0:	18 3b       	cp.w	r11,r12
80031ad2:	c0 63       	brcs	80031ade <__avr32_udiv64+0x15a>
80031ad4:	10 3b       	cp.w	r11,r8
80031ad6:	f7 ba 03 01 	sublo	r10,1
80031ada:	f7 dc e3 0b 	addcs	r11,r11,r12
80031ade:	f6 08 01 01 	sub	r1,r11,r8
80031ae2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031ae6:	e2 06 0d 00 	divu	r0,r1,r6
80031aea:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80031aee:	00 98       	mov	r8,r0
80031af0:	e0 0e 02 4b 	mul	r11,r0,lr
80031af4:	16 33       	cp.w	r3,r11
80031af6:	c0 82       	brcc	80031b06 <__avr32_udiv64+0x182>
80031af8:	20 18       	sub	r8,1
80031afa:	18 03       	add	r3,r12
80031afc:	18 33       	cp.w	r3,r12
80031afe:	c0 43       	brcs	80031b06 <__avr32_udiv64+0x182>
80031b00:	16 33       	cp.w	r3,r11
80031b02:	f7 b8 03 01 	sublo	r8,1
80031b06:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80031b0a:	c6 98       	rjmp	80031bdc <__avr32_udiv64+0x258>
80031b0c:	16 39       	cp.w	r9,r11
80031b0e:	e0 8b 00 65 	brhi	80031bd8 <__avr32_udiv64+0x254>
80031b12:	f2 09 12 00 	clz	r9,r9
80031b16:	c0 b1       	brne	80031b2c <__avr32_udiv64+0x1a8>
80031b18:	10 3a       	cp.w	r10,r8
80031b1a:	5f 2a       	srhs	r10
80031b1c:	1c 3b       	cp.w	r11,lr
80031b1e:	5f b8       	srhi	r8
80031b20:	10 4a       	or	r10,r8
80031b22:	f2 0a 18 00 	cp.b	r10,r9
80031b26:	c5 90       	breq	80031bd8 <__avr32_udiv64+0x254>
80031b28:	30 18       	mov	r8,1
80031b2a:	c5 98       	rjmp	80031bdc <__avr32_udiv64+0x258>
80031b2c:	f0 09 09 46 	lsl	r6,r8,r9
80031b30:	f2 03 11 20 	rsub	r3,r9,32
80031b34:	fc 09 09 4e 	lsl	lr,lr,r9
80031b38:	f0 03 0a 48 	lsr	r8,r8,r3
80031b3c:	f6 09 09 4c 	lsl	r12,r11,r9
80031b40:	f4 03 0a 42 	lsr	r2,r10,r3
80031b44:	ef 46 ff f4 	st.w	r7[-12],r6
80031b48:	f6 03 0a 43 	lsr	r3,r11,r3
80031b4c:	18 42       	or	r2,r12
80031b4e:	f1 ee 10 0c 	or	r12,r8,lr
80031b52:	f8 01 16 10 	lsr	r1,r12,0x10
80031b56:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80031b5a:	e6 01 0d 04 	divu	r4,r3,r1
80031b5e:	e4 03 16 10 	lsr	r3,r2,0x10
80031b62:	08 9e       	mov	lr,r4
80031b64:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80031b68:	e8 06 02 48 	mul	r8,r4,r6
80031b6c:	10 33       	cp.w	r3,r8
80031b6e:	c0 a2       	brcc	80031b82 <__avr32_udiv64+0x1fe>
80031b70:	20 1e       	sub	lr,1
80031b72:	18 03       	add	r3,r12
80031b74:	18 33       	cp.w	r3,r12
80031b76:	c0 63       	brcs	80031b82 <__avr32_udiv64+0x1fe>
80031b78:	10 33       	cp.w	r3,r8
80031b7a:	f7 be 03 01 	sublo	lr,1
80031b7e:	e7 dc e3 03 	addcs	r3,r3,r12
80031b82:	10 13       	sub	r3,r8
80031b84:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80031b88:	e6 01 0d 00 	divu	r0,r3,r1
80031b8c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031b90:	00 98       	mov	r8,r0
80031b92:	e0 06 02 46 	mul	r6,r0,r6
80031b96:	0c 3b       	cp.w	r11,r6
80031b98:	c0 a2       	brcc	80031bac <__avr32_udiv64+0x228>
80031b9a:	20 18       	sub	r8,1
80031b9c:	18 0b       	add	r11,r12
80031b9e:	18 3b       	cp.w	r11,r12
80031ba0:	c0 63       	brcs	80031bac <__avr32_udiv64+0x228>
80031ba2:	0c 3b       	cp.w	r11,r6
80031ba4:	f7 dc e3 0b 	addcs	r11,r11,r12
80031ba8:	f7 b8 03 01 	sublo	r8,1
80031bac:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80031bb0:	ee f4 ff f4 	ld.w	r4,r7[-12]
80031bb4:	0c 1b       	sub	r11,r6
80031bb6:	f0 04 06 42 	mulu.d	r2,r8,r4
80031bba:	06 95       	mov	r5,r3
80031bbc:	16 35       	cp.w	r5,r11
80031bbe:	e0 8b 00 0a 	brhi	80031bd2 <__avr32_udiv64+0x24e>
80031bc2:	5f 0b       	sreq	r11
80031bc4:	f4 09 09 49 	lsl	r9,r10,r9
80031bc8:	12 32       	cp.w	r2,r9
80031bca:	5f b9       	srhi	r9
80031bcc:	f7 e9 00 09 	and	r9,r11,r9
80031bd0:	c0 60       	breq	80031bdc <__avr32_udiv64+0x258>
80031bd2:	20 18       	sub	r8,1
80031bd4:	30 09       	mov	r9,0
80031bd6:	c0 38       	rjmp	80031bdc <__avr32_udiv64+0x258>
80031bd8:	30 09       	mov	r9,0
80031bda:	12 98       	mov	r8,r9
80031bdc:	10 9a       	mov	r10,r8
80031bde:	12 93       	mov	r3,r9
80031be0:	10 92       	mov	r2,r8
80031be2:	12 9b       	mov	r11,r9
80031be4:	2f dd       	sub	sp,-12
80031be6:	d8 32       	popm	r0-r7,pc

80031be8 <__errno>:
80031be8:	48 28       	lddpc	r8,80031bf0 <__errno+0x8>
80031bea:	70 0c       	ld.w	r12,r8[0x0]
80031bec:	2f 4c       	sub	r12,-12
80031bee:	5e fc       	retal	r12
80031bf0:	00 00       	add	r0,r0
80031bf2:	23 1c       	sub	r12,49

80031bf4 <memcpy>:
80031bf4:	58 8a       	cp.w	r10,8
80031bf6:	c2 f5       	brlt	80031c54 <memcpy+0x60>
80031bf8:	f9 eb 10 09 	or	r9,r12,r11
80031bfc:	e2 19 00 03 	andl	r9,0x3,COH
80031c00:	e0 81 00 97 	brne	80031d2e <memcpy+0x13a>
80031c04:	e0 4a 00 20 	cp.w	r10,32
80031c08:	c3 b4       	brge	80031c7e <memcpy+0x8a>
80031c0a:	f4 08 14 02 	asr	r8,r10,0x2
80031c0e:	f0 09 11 08 	rsub	r9,r8,8
80031c12:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80031c16:	76 69       	ld.w	r9,r11[0x18]
80031c18:	99 69       	st.w	r12[0x18],r9
80031c1a:	76 59       	ld.w	r9,r11[0x14]
80031c1c:	99 59       	st.w	r12[0x14],r9
80031c1e:	76 49       	ld.w	r9,r11[0x10]
80031c20:	99 49       	st.w	r12[0x10],r9
80031c22:	76 39       	ld.w	r9,r11[0xc]
80031c24:	99 39       	st.w	r12[0xc],r9
80031c26:	76 29       	ld.w	r9,r11[0x8]
80031c28:	99 29       	st.w	r12[0x8],r9
80031c2a:	76 19       	ld.w	r9,r11[0x4]
80031c2c:	99 19       	st.w	r12[0x4],r9
80031c2e:	76 09       	ld.w	r9,r11[0x0]
80031c30:	99 09       	st.w	r12[0x0],r9
80031c32:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80031c36:	f8 08 00 28 	add	r8,r12,r8<<0x2
80031c3a:	e0 1a 00 03 	andl	r10,0x3
80031c3e:	f4 0a 11 04 	rsub	r10,r10,4
80031c42:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80031c46:	17 a9       	ld.ub	r9,r11[0x2]
80031c48:	b0 a9       	st.b	r8[0x2],r9
80031c4a:	17 99       	ld.ub	r9,r11[0x1]
80031c4c:	b0 99       	st.b	r8[0x1],r9
80031c4e:	17 89       	ld.ub	r9,r11[0x0]
80031c50:	b0 89       	st.b	r8[0x0],r9
80031c52:	5e fc       	retal	r12
80031c54:	f4 0a 11 09 	rsub	r10,r10,9
80031c58:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80031c5c:	17 f9       	ld.ub	r9,r11[0x7]
80031c5e:	b8 f9       	st.b	r12[0x7],r9
80031c60:	17 e9       	ld.ub	r9,r11[0x6]
80031c62:	b8 e9       	st.b	r12[0x6],r9
80031c64:	17 d9       	ld.ub	r9,r11[0x5]
80031c66:	b8 d9       	st.b	r12[0x5],r9
80031c68:	17 c9       	ld.ub	r9,r11[0x4]
80031c6a:	b8 c9       	st.b	r12[0x4],r9
80031c6c:	17 b9       	ld.ub	r9,r11[0x3]
80031c6e:	b8 b9       	st.b	r12[0x3],r9
80031c70:	17 a9       	ld.ub	r9,r11[0x2]
80031c72:	b8 a9       	st.b	r12[0x2],r9
80031c74:	17 99       	ld.ub	r9,r11[0x1]
80031c76:	b8 99       	st.b	r12[0x1],r9
80031c78:	17 89       	ld.ub	r9,r11[0x0]
80031c7a:	b8 89       	st.b	r12[0x0],r9
80031c7c:	5e fc       	retal	r12
80031c7e:	eb cd 40 c0 	pushm	r6-r7,lr
80031c82:	18 99       	mov	r9,r12
80031c84:	22 0a       	sub	r10,32
80031c86:	b7 07       	ld.d	r6,r11++
80031c88:	b3 26       	st.d	r9++,r6
80031c8a:	b7 07       	ld.d	r6,r11++
80031c8c:	b3 26       	st.d	r9++,r6
80031c8e:	b7 07       	ld.d	r6,r11++
80031c90:	b3 26       	st.d	r9++,r6
80031c92:	b7 07       	ld.d	r6,r11++
80031c94:	b3 26       	st.d	r9++,r6
80031c96:	22 0a       	sub	r10,32
80031c98:	cf 74       	brge	80031c86 <memcpy+0x92>
80031c9a:	2f 0a       	sub	r10,-16
80031c9c:	c0 65       	brlt	80031ca8 <memcpy+0xb4>
80031c9e:	b7 07       	ld.d	r6,r11++
80031ca0:	b3 26       	st.d	r9++,r6
80031ca2:	b7 07       	ld.d	r6,r11++
80031ca4:	b3 26       	st.d	r9++,r6
80031ca6:	21 0a       	sub	r10,16
80031ca8:	5c 3a       	neg	r10
80031caa:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80031cae:	d7 03       	nop
80031cb0:	d7 03       	nop
80031cb2:	f7 36 00 0e 	ld.ub	r6,r11[14]
80031cb6:	f3 66 00 0e 	st.b	r9[14],r6
80031cba:	f7 36 00 0d 	ld.ub	r6,r11[13]
80031cbe:	f3 66 00 0d 	st.b	r9[13],r6
80031cc2:	f7 36 00 0c 	ld.ub	r6,r11[12]
80031cc6:	f3 66 00 0c 	st.b	r9[12],r6
80031cca:	f7 36 00 0b 	ld.ub	r6,r11[11]
80031cce:	f3 66 00 0b 	st.b	r9[11],r6
80031cd2:	f7 36 00 0a 	ld.ub	r6,r11[10]
80031cd6:	f3 66 00 0a 	st.b	r9[10],r6
80031cda:	f7 36 00 09 	ld.ub	r6,r11[9]
80031cde:	f3 66 00 09 	st.b	r9[9],r6
80031ce2:	f7 36 00 08 	ld.ub	r6,r11[8]
80031ce6:	f3 66 00 08 	st.b	r9[8],r6
80031cea:	f7 36 00 07 	ld.ub	r6,r11[7]
80031cee:	f3 66 00 07 	st.b	r9[7],r6
80031cf2:	f7 36 00 06 	ld.ub	r6,r11[6]
80031cf6:	f3 66 00 06 	st.b	r9[6],r6
80031cfa:	f7 36 00 05 	ld.ub	r6,r11[5]
80031cfe:	f3 66 00 05 	st.b	r9[5],r6
80031d02:	f7 36 00 04 	ld.ub	r6,r11[4]
80031d06:	f3 66 00 04 	st.b	r9[4],r6
80031d0a:	f7 36 00 03 	ld.ub	r6,r11[3]
80031d0e:	f3 66 00 03 	st.b	r9[3],r6
80031d12:	f7 36 00 02 	ld.ub	r6,r11[2]
80031d16:	f3 66 00 02 	st.b	r9[2],r6
80031d1a:	f7 36 00 01 	ld.ub	r6,r11[1]
80031d1e:	f3 66 00 01 	st.b	r9[1],r6
80031d22:	f7 36 00 00 	ld.ub	r6,r11[0]
80031d26:	f3 66 00 00 	st.b	r9[0],r6
80031d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80031d2e:	20 1a       	sub	r10,1
80031d30:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80031d34:	f8 0a 0b 09 	st.b	r12[r10],r9
80031d38:	cf b1       	brne	80031d2e <memcpy+0x13a>
80031d3a:	5e fc       	retal	r12

80031d3c <memset>:
80031d3c:	18 98       	mov	r8,r12
80031d3e:	c0 38       	rjmp	80031d44 <memset+0x8>
80031d40:	10 cb       	st.b	r8++,r11
80031d42:	20 1a       	sub	r10,1
80031d44:	58 0a       	cp.w	r10,0
80031d46:	cf d1       	brne	80031d40 <memset+0x4>
80031d48:	5e fc       	retal	r12

80031d4a <strcpy>:
80031d4a:	30 08       	mov	r8,0
80031d4c:	f6 08 07 09 	ld.ub	r9,r11[r8]
80031d50:	f8 08 0b 09 	st.b	r12[r8],r9
80031d54:	2f f8       	sub	r8,-1
80031d56:	58 09       	cp.w	r9,0
80031d58:	cf a1       	brne	80031d4c <strcpy+0x2>
80031d5a:	5e fc       	retal	r12

80031d5c <strlen>:
80031d5c:	30 09       	mov	r9,0
80031d5e:	18 98       	mov	r8,r12
80031d60:	c0 28       	rjmp	80031d64 <strlen+0x8>
80031d62:	2f f8       	sub	r8,-1
80031d64:	11 8a       	ld.ub	r10,r8[0x0]
80031d66:	f2 0a 18 00 	cp.b	r10,r9
80031d6a:	cf c1       	brne	80031d62 <strlen+0x6>
80031d6c:	f0 0c 01 0c 	sub	r12,r8,r12
80031d70:	5e fc       	retal	r12

Disassembly of section .exception:

80031e00 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80031e00:	c0 08       	rjmp	80031e00 <_evba>
	...

80031e04 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80031e04:	c0 08       	rjmp	80031e04 <_handle_TLB_Multiple_Hit>
	...

80031e08 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80031e08:	c0 08       	rjmp	80031e08 <_handle_Bus_Error_Data_Fetch>
	...

80031e0c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
80031e0c:	c0 08       	rjmp	80031e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80031e10 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80031e10:	4c ff       	lddpc	pc,80031f4c <ipr_val+0x10>
	...

80031e14 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80031e14:	c0 08       	rjmp	80031e14 <_handle_Instruction_Address>
	...

80031e18 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80031e18:	c0 08       	rjmp	80031e18 <_handle_ITLB_Protection>
	...

80031e1c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
80031e1c:	c0 08       	rjmp	80031e1c <_handle_Breakpoint>
	...

80031e20 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80031e20:	c0 08       	rjmp	80031e20 <_handle_Illegal_Opcode>
	...

80031e24 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80031e24:	c0 08       	rjmp	80031e24 <_handle_Unimplemented_Instruction>
	...

80031e28 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80031e28:	c0 08       	rjmp	80031e28 <_handle_Privilege_Violation>
	...

80031e2c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
80031e2c:	c0 08       	rjmp	80031e2c <_handle_Floating_Point>
	...

80031e30 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80031e30:	c0 08       	rjmp	80031e30 <_handle_Coprocessor_Absent>
	...

80031e34 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80031e34:	c0 08       	rjmp	80031e34 <_handle_Data_Address_Read>
	...

80031e38 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80031e38:	c0 08       	rjmp	80031e38 <_handle_Data_Address_Write>
	...

80031e3c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
80031e3c:	c0 08       	rjmp	80031e3c <_handle_DTLB_Protection_Read>
	...

80031e40 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80031e40:	c0 08       	rjmp	80031e40 <_handle_DTLB_Protection_Write>
	...

80031e44 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80031e44:	c0 08       	rjmp	80031e44 <_handle_DTLB_Modified>
	...

80031e50 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80031e50:	c0 08       	rjmp	80031e50 <_handle_ITLB_Miss>
	...

80031e60 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80031e60:	c0 08       	rjmp	80031e60 <_handle_DTLB_Miss_Read>
	...

80031e70 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80031e70:	c0 08       	rjmp	80031e70 <_handle_DTLB_Miss_Write>
	...

80031f00 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80031f00:	c0 08       	rjmp	80031f00 <_handle_Supervisor_Call>
80031f02:	d7 03       	nop

80031f04 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80031f04:	30 0c       	mov	r12,0
80031f06:	fe b0 ac 7d 	rcall	80027800 <_get_interrupt_handler>
80031f0a:	58 0c       	cp.w	r12,0
80031f0c:	f8 0f 17 10 	movne	pc,r12
80031f10:	d6 03       	rete

80031f12 <_int1>:
80031f12:	30 1c       	mov	r12,1
80031f14:	fe b0 ac 76 	rcall	80027800 <_get_interrupt_handler>
80031f18:	58 0c       	cp.w	r12,0
80031f1a:	f8 0f 17 10 	movne	pc,r12
80031f1e:	d6 03       	rete

80031f20 <_int2>:
80031f20:	30 2c       	mov	r12,2
80031f22:	fe b0 ac 6f 	rcall	80027800 <_get_interrupt_handler>
80031f26:	58 0c       	cp.w	r12,0
80031f28:	f8 0f 17 10 	movne	pc,r12
80031f2c:	d6 03       	rete

80031f2e <_int3>:
80031f2e:	30 3c       	mov	r12,3
80031f30:	fe b0 ac 68 	rcall	80027800 <_get_interrupt_handler>
80031f34:	58 0c       	cp.w	r12,0
80031f36:	f8 0f 17 10 	movne	pc,r12
80031f3a:	d6 03       	rete

80031f3c <ipr_val>:
80031f3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80031f4c:	80 01 59 64 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..Yd............
80031f5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031f6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031f7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031f8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031f9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031fac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031fbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031fcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031fdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031fec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031ffc:	d7 03 d7 03                                         ....
