
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002ea0e  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80030c00  80030c00  00031000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80030e00  80030e00  00031200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80031444  80031444  00031844  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80031448  00031c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000900  0000017c  800315c0  00031d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019f4  00000a7c  80031ec0  0003267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007630  00002470  800338b4  00034070  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c08  00000000  00000000  000340a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007a96  00000000  00000000  00034ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005dbb1  00000000  00000000  0003c73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000090e5  00000000  00000000  0009a2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011529  00000000  00000000  000a33d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000085c8  00000000  00000000  000b4900  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ed08  00000000  00000000  000bcec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000d650  00000000  00000000  000cbbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 000005d8  00000000  00000000  000d9220  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	b3 f4       	*unknown*

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 30 	mcall	r6[192]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 21 	mcall	r6[132]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	48 96       	lddpc	r6,8000241c <init_neighbors+0x28>
800023fc:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
800023fe:	f0 16 00 32 	mcall	r6[200]
80002402:	18 99       	mov	r9,r12
80002404:	ec f8 00 00 	ld.w	r8,r6[0]
80002408:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000240a:	ec f8 00 00 	ld.w	r8,r6[0]
8000240e:	70 09       	ld.w	r9,r8[0x0]
80002410:	30 08       	mov	r8,0
80002412:	f3 68 10 fc 	st.b	r9[4348],r8
}
80002416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000241a:	00 00       	add	r0,r0
8000241c:	80 00       	ld.sh	r0,r0[0x0]
8000241e:	22 80       	sub	r0,40
80002420:	54 68       	stdsp	sp[0x118],r8
80002422:	65 72       	ld.w	r2,r2[0x5c]
80002424:	65 20       	ld.w	r0,r2[0x48]
80002426:	69 73       	ld.w	r3,r4[0x5c]
80002428:	20 6d       	sub	sp,24
8000242a:	6f 72       	ld.w	r2,r7[0x5c]
8000242c:	65 20       	ld.w	r0,r2[0x48]
8000242e:	6e 65       	ld.w	r5,r7[0x18]
80002430:	69 67       	ld.w	r7,r4[0x58]
80002432:	68 62       	ld.w	r2,r4[0x18]
80002434:	6f 72       	ld.w	r2,r7[0x5c]
80002436:	73 20       	ld.w	r0,r9[0x48]
80002438:	74 68       	ld.w	r8,r10[0x18]
8000243a:	61 6e       	ld.w	lr,r0[0x58]
8000243c:	20 70       	sub	r0,7
8000243e:	6c 61       	ld.w	r1,r6[0x18]
80002440:	6e 6e       	ld.w	lr,r7[0x18]
80002442:	65 64       	ld.w	r4,r2[0x58]
80002444:	21 0a       	sub	r10,16
	...

80002448 <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
80002448:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000244c:	1a 97       	mov	r7,sp
8000244e:	fa cd 00 a0 	sub	sp,sp,160
80002452:	fe f6 03 66 	ld.w	r6,pc[870]
80002456:	1e 26       	rsub	r6,pc
80002458:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
8000245c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002460:	ee c9 00 20 	sub	r9,r7,32
80002464:	12 9b       	mov	r11,r9
80002466:	10 9c       	mov	r12,r8
80002468:	c7 2f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
8000246a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000246e:	11 d9       	ld.ub	r9,r8[0x5]
80002470:	ec f8 00 70 	ld.w	r8,r6[112]
80002474:	11 88       	ld.ub	r8,r8[0x0]
80002476:	f0 09 18 00 	cp.b	r9,r8
8000247a:	e0 80 01 9c 	breq	800027b2 <read_msg_from_neighbors+0x36a>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
8000247e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002482:	10 9c       	mov	r12,r8
80002484:	f0 16 00 1a 	mcall	r6[104]
80002488:	30 08       	mov	r8,0
8000248a:	e0 69 12 d0 	mov	r9,4816
8000248e:	ea 19 41 63 	orh	r9,0x4163
80002492:	f0 16 00 0c 	mcall	r6[48]
80002496:	14 98       	mov	r8,r10
80002498:	16 99       	mov	r9,r11
8000249a:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
8000249e:	ee f8 ff e4 	ld.w	r8,r7[-28]
800024a2:	10 9c       	mov	r12,r8
800024a4:	f0 16 00 1a 	mcall	r6[104]
800024a8:	30 08       	mov	r8,0
800024aa:	e0 69 12 d0 	mov	r9,4816
800024ae:	ea 19 41 63 	orh	r9,0x4163
800024b2:	f0 16 00 0c 	mcall	r6[48]
800024b6:	14 98       	mov	r8,r10
800024b8:	16 99       	mov	r9,r11
800024ba:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
800024be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800024c2:	10 9c       	mov	r12,r8
800024c4:	f0 16 00 1a 	mcall	r6[104]
800024c8:	30 08       	mov	r8,0
800024ca:	e0 69 40 00 	mov	r9,16384
800024ce:	ea 19 40 8f 	orh	r9,0x408f
800024d2:	f0 16 00 0c 	mcall	r6[48]
800024d6:	14 98       	mov	r8,r10
800024d8:	16 99       	mov	r9,r11
800024da:	10 9a       	mov	r10,r8
800024dc:	12 9b       	mov	r11,r9
800024de:	f0 16 00 08 	mcall	r6[32]
800024e2:	18 98       	mov	r8,r12
800024e4:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
800024e8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800024ec:	5c 78       	castu.h	r8
800024ee:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
800024f2:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
800024f6:	ec f8 00 00 	ld.w	r8,r6[0]
800024fa:	70 08       	ld.w	r8,r8[0x0]
800024fc:	ee cc 00 a0 	sub	r12,r7,160
80002500:	20 7d       	sub	sp,28
80002502:	1a 99       	mov	r9,sp
80002504:	12 9a       	mov	r10,r9
80002506:	f0 cb f2 54 	sub	r11,r8,-3500
8000250a:	f4 c8 00 00 	sub	r8,r10,0
8000250e:	f6 c9 00 00 	sub	r9,r11,0
80002512:	72 0e       	ld.w	lr,r9[0x0]
80002514:	91 0e       	st.w	r8[0x0],lr
80002516:	72 1e       	ld.w	lr,r9[0x4]
80002518:	91 1e       	st.w	r8[0x4],lr
8000251a:	72 2e       	ld.w	lr,r9[0x8]
8000251c:	91 2e       	st.w	r8[0x8],lr
8000251e:	72 39       	ld.w	r9,r9[0xc]
80002520:	91 39       	st.w	r8[0xc],r9
80002522:	f6 e8 00 10 	ld.d	r8,r11[16]
80002526:	f4 e9 00 10 	st.d	r10[16],r8
8000252a:	76 68       	ld.w	r8,r11[0x18]
8000252c:	95 68       	st.w	r10[0x18],r8
8000252e:	20 7d       	sub	sp,28
80002530:	1a 98       	mov	r8,sp
80002532:	10 9a       	mov	r10,r8
80002534:	ee cb 00 3c 	sub	r11,r7,60
80002538:	f4 c8 00 00 	sub	r8,r10,0
8000253c:	f6 c9 00 00 	sub	r9,r11,0
80002540:	72 0e       	ld.w	lr,r9[0x0]
80002542:	91 0e       	st.w	r8[0x0],lr
80002544:	72 1e       	ld.w	lr,r9[0x4]
80002546:	91 1e       	st.w	r8[0x4],lr
80002548:	72 2e       	ld.w	lr,r9[0x8]
8000254a:	91 2e       	st.w	r8[0x8],lr
8000254c:	72 39       	ld.w	r9,r9[0xc]
8000254e:	91 39       	st.w	r8[0xc],r9
80002550:	f6 e8 00 10 	ld.d	r8,r11[16]
80002554:	f4 e9 00 10 	st.d	r10[16],r8
80002558:	76 68       	ld.w	r8,r11[0x18]
8000255a:	95 68       	st.w	r10[0x18],r8
8000255c:	f0 16 00 7a 	mcall	r6[488]
80002560:	2f 2d       	sub	sp,-56
80002562:	ee cb 00 6c 	sub	r11,r7,108
80002566:	ee ca 00 a0 	sub	r10,r7,160
8000256a:	f6 c8 00 00 	sub	r8,r11,0
8000256e:	f4 c9 00 00 	sub	r9,r10,0
80002572:	72 0c       	ld.w	r12,r9[0x0]
80002574:	91 0c       	st.w	r8[0x0],r12
80002576:	72 1c       	ld.w	r12,r9[0x4]
80002578:	91 1c       	st.w	r8[0x4],r12
8000257a:	72 2c       	ld.w	r12,r9[0x8]
8000257c:	91 2c       	st.w	r8[0x8],r12
8000257e:	72 39       	ld.w	r9,r9[0xc]
80002580:	91 39       	st.w	r8[0xc],r9
80002582:	f6 c8 ff f0 	sub	r8,r11,-16
80002586:	f4 c9 ff f0 	sub	r9,r10,-16
8000258a:	72 0c       	ld.w	r12,r9[0x0]
8000258c:	91 0c       	st.w	r8[0x0],r12
8000258e:	72 1c       	ld.w	r12,r9[0x4]
80002590:	91 1c       	st.w	r8[0x4],r12
80002592:	72 2c       	ld.w	r12,r9[0x8]
80002594:	91 2c       	st.w	r8[0x8],r12
80002596:	72 39       	ld.w	r9,r9[0xc]
80002598:	91 39       	st.w	r8[0xc],r9
8000259a:	f6 c8 ff e0 	sub	r8,r11,-32
8000259e:	f4 c9 ff e0 	sub	r9,r10,-32
800025a2:	72 0a       	ld.w	r10,r9[0x0]
800025a4:	91 0a       	st.w	r8[0x0],r10
800025a6:	72 1a       	ld.w	r10,r9[0x4]
800025a8:	91 1a       	st.w	r8[0x4],r10
800025aa:	72 2a       	ld.w	r10,r9[0x8]
800025ac:	91 2a       	st.w	r8[0x8],r10
800025ae:	72 39       	ld.w	r9,r9[0xc]
800025b0:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
800025b2:	30 08       	mov	r8,0
800025b4:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
800025b8:	30 08       	mov	r8,0
800025ba:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025be:	c1 b8       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
800025c0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025c4:	11 d9       	ld.ub	r9,r8[0x5]
800025c6:	ec f8 00 00 	ld.w	r8,r6[0]
800025ca:	70 0a       	ld.w	r10,r8[0x0]
800025cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025d0:	a5 78       	lsl	r8,0x5
800025d2:	f4 08 00 08 	add	r8,r10,r8
800025d6:	f0 c8 ee fc 	sub	r8,r8,-4356
800025da:	11 88       	ld.ub	r8,r8[0x0]
800025dc:	f0 09 18 00 	cp.b	r9,r8
800025e0:	c0 51       	brne	800025ea <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
800025e2:	30 18       	mov	r8,1
800025e4:	ef 68 ff ff 	st.b	r7[-1],r8
800025e8:	c0 68       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
800025ea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025ee:	2f f8       	sub	r8,-1
800025f0:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025f8:	ec 18 00 01 	eorl	r8,0x1
800025fc:	5c 58       	castu.b	r8
800025fe:	c0 b0       	breq	80002614 <read_msg_from_neighbors+0x1cc>
80002600:	ec f8 00 00 	ld.w	r8,r6[0]
80002604:	70 08       	ld.w	r8,r8[0x0]
80002606:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000260a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000260e:	f0 09 18 00 	cp.b	r9,r8
80002612:	cd 73       	brcs	800025c0 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002614:	ec f8 00 00 	ld.w	r8,r6[0]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000261e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002622:	f0 09 18 00 	cp.b	r9,r8
80002626:	c2 93       	brcs	80002678 <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
80002628:	ec f8 00 00 	ld.w	r8,r6[0]
8000262c:	70 08       	ld.w	r8,r8[0x0]
8000262e:	f1 39 10 fc 	ld.ub	r9,r8[4348]
80002632:	30 e8       	mov	r8,14
80002634:	f0 09 18 00 	cp.b	r9,r8
80002638:	e0 8b 00 13 	brhi	8000265e <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
8000263c:	ec f8 00 00 	ld.w	r8,r6[0]
80002640:	70 08       	ld.w	r8,r8[0x0]
80002642:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80002646:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 08       	ld.w	r8,r8[0x0]
80002650:	f1 39 10 fc 	ld.ub	r9,r8[4348]
80002654:	2f f9       	sub	r9,-1
80002656:	5c 59       	castu.b	r9
80002658:	f1 69 10 fc 	st.b	r8[4348],r9
8000265c:	c1 28       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
8000265e:	fe cc 02 3e 	sub	r12,pc,574
80002662:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
80002666:	ec f8 00 00 	ld.w	r8,r6[0]
8000266a:	70 08       	ld.w	r8,r8[0x0]
8000266c:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80002670:	20 18       	sub	r8,1
80002672:	ef 68 ff fe 	st.b	r7[-2],r8
80002676:	c0 58       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
80002678:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000267c:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002680:	ec f8 00 00 	ld.w	r8,r6[0]
80002684:	70 0a       	ld.w	r10,r8[0x0]
80002686:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000268a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000268e:	11 d8       	ld.ub	r8,r8[0x5]
80002690:	a5 79       	lsl	r9,0x5
80002692:	f4 09 00 09 	add	r9,r10,r9
80002696:	f2 c9 ee fc 	sub	r9,r9,-4356
8000269a:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
8000269c:	30 08       	mov	r8,0
8000269e:	ef 68 ff fd 	st.b	r7[-3],r8
800026a2:	c1 b8       	rjmp	800026d8 <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
800026a4:	ec f8 00 00 	ld.w	r8,r6[0]
800026a8:	70 09       	ld.w	r9,r8[0x0]
800026aa:	ef 3c ff fe 	ld.ub	r12,r7[-2]
800026ae:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800026b2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026b6:	a3 68       	lsl	r8,0x2
800026b8:	ee 08 00 08 	add	r8,r7,r8
800026bc:	f0 fa ff 94 	ld.w	r10,r8[-108]
800026c0:	f8 08 15 03 	lsl	r8,r12,0x3
800026c4:	16 08       	add	r8,r11
800026c6:	f0 c8 fb be 	sub	r8,r8,-1090
800026ca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
800026ce:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026d2:	2f f8       	sub	r8,-1
800026d4:	ef 68 ff fd 	st.b	r7[-3],r8
800026d8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026dc:	30 28       	mov	r8,2
800026de:	f0 09 18 00 	cp.b	r9,r8
800026e2:	fe 98 ff e1 	brls	800026a4 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
800026e6:	ec f8 00 00 	ld.w	r8,r6[0]
800026ea:	70 05       	ld.w	r5,r8[0x0]
800026ec:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800026f0:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800026f4:	10 9c       	mov	r12,r8
800026f6:	f0 16 00 1a 	mcall	r6[104]
800026fa:	30 08       	mov	r8,0
800026fc:	fc 19 40 59 	movh	r9,0x4059
80002700:	f0 16 00 0c 	mcall	r6[48]
80002704:	14 98       	mov	r8,r10
80002706:	16 99       	mov	r9,r11
80002708:	10 9a       	mov	r10,r8
8000270a:	12 9b       	mov	r11,r9
8000270c:	f0 16 00 08 	mcall	r6[32]
80002710:	18 99       	mov	r9,r12
80002712:	e6 08 15 01 	lsl	r8,r3,0x1
80002716:	2f f8       	sub	r8,-1
80002718:	a5 68       	lsl	r8,0x4
8000271a:	ea 08 00 08 	add	r8,r5,r8
8000271e:	f0 c8 ee fc 	sub	r8,r8,-4356
80002722:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
80002724:	ec f8 00 00 	ld.w	r8,r6[0]
80002728:	70 05       	ld.w	r5,r8[0x0]
8000272a:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000272e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002732:	10 9c       	mov	r12,r8
80002734:	f0 16 00 1a 	mcall	r6[104]
80002738:	30 08       	mov	r8,0
8000273a:	fc 19 40 59 	movh	r9,0x4059
8000273e:	f0 16 00 0c 	mcall	r6[48]
80002742:	14 98       	mov	r8,r10
80002744:	16 99       	mov	r9,r11
80002746:	10 9a       	mov	r10,r8
80002748:	12 9b       	mov	r11,r9
8000274a:	f0 16 00 08 	mcall	r6[32]
8000274e:	18 99       	mov	r9,r12
80002750:	e6 08 15 05 	lsl	r8,r3,0x5
80002754:	ea 08 00 08 	add	r8,r5,r8
80002758:	f0 c8 ee e8 	sub	r8,r8,-4376
8000275c:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
8000275e:	ec f8 00 00 	ld.w	r8,r6[0]
80002762:	70 05       	ld.w	r5,r8[0x0]
80002764:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002768:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000276c:	10 9c       	mov	r12,r8
8000276e:	f0 16 00 1a 	mcall	r6[104]
80002772:	30 08       	mov	r8,0
80002774:	fc 19 40 59 	movh	r9,0x4059
80002778:	f0 16 00 0c 	mcall	r6[48]
8000277c:	14 98       	mov	r8,r10
8000277e:	16 99       	mov	r9,r11
80002780:	10 9a       	mov	r10,r8
80002782:	12 9b       	mov	r11,r9
80002784:	f0 16 00 08 	mcall	r6[32]
80002788:	18 99       	mov	r9,r12
8000278a:	e6 08 15 05 	lsl	r8,r3,0x5
8000278e:	ea 08 00 08 	add	r8,r5,r8
80002792:	f0 c8 ee e4 	sub	r8,r8,-4380
80002796:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
80002798:	ec f8 00 00 	ld.w	r8,r6[0]
8000279c:	70 09       	ld.w	r9,r8[0x0]
8000279e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800027a2:	f0 c8 ff 77 	sub	r8,r8,-137
800027a6:	a5 78       	lsl	r8,0x5
800027a8:	f2 08 00 08 	add	r8,r9,r8
800027ac:	fc 19 40 a0 	movh	r9,0x40a0
800027b0:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
800027b2:	2d 8d       	sub	sp,-160
800027b4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800027b8:	80 00       	ld.sh	r0,r0[0x0]
800027ba:	22 da       	sub	r10,45

800027bc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800027bc:	eb cd 40 c0 	pushm	r6-r7,lr
800027c0:	1a 97       	mov	r7,sp
800027c2:	20 3d       	sub	sp,12
800027c4:	49 06       	lddpc	r6,80002804 <mav_array_memcpy+0x48>
800027c6:	1e 26       	rsub	r6,pc
800027c8:	ef 4c ff fc 	st.w	r7[-4],r12
800027cc:	ef 4b ff f8 	st.w	r7[-8],r11
800027d0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800027d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d8:	58 08       	cp.w	r8,0
800027da:	c0 91       	brne	800027ec <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800027dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e0:	30 0b       	mov	r11,0
800027e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800027e6:	f0 16 00 30 	mcall	r6[192]
800027ea:	c0 98       	rjmp	800027fc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800027ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800027f0:	ee fb ff f8 	ld.w	r11,r7[-8]
800027f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800027f8:	f0 16 00 21 	mcall	r6[132]
	}
}
800027fc:	2f dd       	sub	sp,-12
800027fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002802:	00 00       	add	r0,r0
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	26 4a       	sub	r10,100

80002808 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80002808:	eb cd 40 80 	pushm	r7,lr
8000280c:	1a 97       	mov	r7,sp
8000280e:	20 3d       	sub	sp,12
80002810:	ef 4c ff f8 	st.w	r7[-8],r12
80002814:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80002818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000281c:	70 09       	ld.w	r9,r8[0x0]
8000281e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002822:	70 08       	ld.w	r8,r8[0x0]
80002824:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80002828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000282c:	2f c8       	sub	r8,-4
8000282e:	70 0a       	ld.w	r10,r8[0x0]
80002830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002834:	2f c8       	sub	r8,-4
80002836:	70 08       	ld.w	r8,r8[0x0]
80002838:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000283c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002844:	2f 88       	sub	r8,-8
80002846:	70 0a       	ld.w	r10,r8[0x0]
80002848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000284c:	2f 88       	sub	r8,-8
8000284e:	70 08       	ld.w	r8,r8[0x0]
80002850:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80002854:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002858:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000285c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002860:	10 9c       	mov	r12,r8
80002862:	2f dd       	sub	sp,-12
80002864:	e3 cd 80 80 	ldm	sp++,r7,pc

80002868 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80002868:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 7d       	sub	sp,28
80002870:	4b d6       	lddpc	r6,80002964 <quat_multi+0xfc>
80002872:	1e 26       	rsub	r6,pc
80002874:	ee c8 ff ec 	sub	r8,r7,-20
80002878:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000287a:	70 2a       	ld.w	r10,r8[0x8]
8000287c:	70 79       	ld.w	r9,r8[0x1c]
8000287e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002882:	70 3b       	ld.w	r11,r8[0xc]
80002884:	70 69       	ld.w	r9,r8[0x18]
80002886:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000288a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000288e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002892:	70 3a       	ld.w	r10,r8[0xc]
80002894:	70 59       	ld.w	r9,r8[0x14]
80002896:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000289a:	70 1b       	ld.w	r11,r8[0x4]
8000289c:	70 79       	ld.w	r9,r8[0x1c]
8000289e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028a6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800028aa:	70 1a       	ld.w	r10,r8[0x4]
800028ac:	70 69       	ld.w	r9,r8[0x18]
800028ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028b2:	70 2b       	ld.w	r11,r8[0x8]
800028b4:	70 59       	ld.w	r9,r8[0x14]
800028b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028ba:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028be:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800028c2:	70 4a       	ld.w	r10,r8[0x10]
800028c4:	70 19       	ld.w	r9,r8[0x4]
800028c6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ca:	70 0b       	ld.w	r11,r8[0x0]
800028cc:	70 59       	ld.w	r9,r8[0x14]
800028ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028d2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800028da:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028de:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800028e2:	70 4a       	ld.w	r10,r8[0x10]
800028e4:	70 29       	ld.w	r9,r8[0x8]
800028e6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ea:	70 0b       	ld.w	r11,r8[0x0]
800028ec:	70 69       	ld.w	r9,r8[0x18]
800028ee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028f2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028fa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028fe:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002902:	70 4a       	ld.w	r10,r8[0x10]
80002904:	70 39       	ld.w	r9,r8[0xc]
80002906:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000290a:	70 0b       	ld.w	r11,r8[0x0]
8000290c:	70 79       	ld.w	r9,r8[0x1c]
8000290e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002912:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80002916:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000291a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000291e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80002922:	70 0a       	ld.w	r10,r8[0x0]
80002924:	70 49       	ld.w	r9,r8[0x10]
80002926:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000292a:	f0 c9 ff f0 	sub	r9,r8,-16
8000292e:	2f c9       	sub	r9,-4
80002930:	2f c8       	sub	r8,-4
80002932:	12 9b       	mov	r11,r9
80002934:	10 9c       	mov	r12,r8
80002936:	c6 9f       	rcall	80002808 <scalar_product>
80002938:	18 98       	mov	r8,r12
8000293a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000293e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80002942:	0a 98       	mov	r8,r5
80002944:	ee c9 00 1c 	sub	r9,r7,28
80002948:	20 08       	sub	r8,0
8000294a:	20 09       	sub	r9,0
8000294c:	72 0a       	ld.w	r10,r9[0x0]
8000294e:	91 0a       	st.w	r8[0x0],r10
80002950:	72 1a       	ld.w	r10,r9[0x4]
80002952:	91 1a       	st.w	r8[0x4],r10
80002954:	72 2a       	ld.w	r10,r9[0x8]
80002956:	91 2a       	st.w	r8[0x8],r10
80002958:	72 39       	ld.w	r9,r9[0xc]
8000295a:	91 39       	st.w	r8[0xc],r9
}
8000295c:	0a 9c       	mov	r12,r5
8000295e:	2f 9d       	sub	sp,-28
80002960:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	26 f6       	sub	r6,111

80002968 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80002968:	eb cd 40 80 	pushm	r7,lr
8000296c:	1a 97       	mov	r7,sp
8000296e:	20 5d       	sub	sp,20
80002970:	ee c9 ff f8 	sub	r9,r7,-8
80002974:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80002976:	72 08       	ld.w	r8,r9[0x0]
80002978:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000297c:	30 08       	mov	r8,0
8000297e:	ef 48 ff fc 	st.w	r7[-4],r8
80002982:	c1 58       	rjmp	800029ac <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002988:	ee fb ff fc 	ld.w	r11,r7[-4]
8000298c:	2f fb       	sub	r11,-1
8000298e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002992:	ee 1b 80 00 	eorh	r11,0x8000
80002996:	2f f8       	sub	r8,-1
80002998:	a3 68       	lsl	r8,0x2
8000299a:	ee 08 00 08 	add	r8,r7,r8
8000299e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800029a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029a6:	2f f8       	sub	r8,-1
800029a8:	ef 48 ff fc 	st.w	r7[-4],r8
800029ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b0:	58 28       	cp.w	r8,2
800029b2:	fe 9a ff e9 	brle	80002984 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800029b6:	14 98       	mov	r8,r10
800029b8:	ee c9 00 14 	sub	r9,r7,20
800029bc:	20 08       	sub	r8,0
800029be:	20 09       	sub	r9,0
800029c0:	72 0b       	ld.w	r11,r9[0x0]
800029c2:	91 0b       	st.w	r8[0x0],r11
800029c4:	72 1b       	ld.w	r11,r9[0x4]
800029c6:	91 1b       	st.w	r8[0x4],r11
800029c8:	72 2b       	ld.w	r11,r9[0x8]
800029ca:	91 2b       	st.w	r8[0x8],r11
800029cc:	72 39       	ld.w	r9,r9[0xc]
800029ce:	91 39       	st.w	r8[0xc],r9
}
800029d0:	14 9c       	mov	r12,r10
800029d2:	2f bd       	sub	sp,-20
800029d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029d8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800029d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 cd       	sub	sp,48
800029e0:	4b c6       	lddpc	r6,80002ad0 <quat_global_to_local+0xf8>
800029e2:	1e 26       	rsub	r6,pc
800029e4:	ee c5 ff ec 	sub	r5,r7,-20
800029e8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800029ea:	ee ca 00 10 	sub	r10,r7,16
800029ee:	20 4d       	sub	sp,16
800029f0:	1a 98       	mov	r8,sp
800029f2:	0a 99       	mov	r9,r5
800029f4:	20 08       	sub	r8,0
800029f6:	20 09       	sub	r9,0
800029f8:	72 0b       	ld.w	r11,r9[0x0]
800029fa:	91 0b       	st.w	r8[0x0],r11
800029fc:	72 1b       	ld.w	r11,r9[0x4]
800029fe:	91 1b       	st.w	r8[0x4],r11
80002a00:	72 2b       	ld.w	r11,r9[0x8]
80002a02:	91 2b       	st.w	r8[0x8],r11
80002a04:	72 39       	ld.w	r9,r9[0xc]
80002a06:	91 39       	st.w	r8[0xc],r9
80002a08:	14 9c       	mov	r12,r10
80002a0a:	ca ff       	rcall	80002968 <quat_inv>
80002a0c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a0e:	ee ca 00 20 	sub	r10,r7,32
80002a12:	20 4d       	sub	sp,16
80002a14:	1a 98       	mov	r8,sp
80002a16:	ea c9 ff f0 	sub	r9,r5,-16
80002a1a:	20 08       	sub	r8,0
80002a1c:	20 09       	sub	r9,0
80002a1e:	72 0b       	ld.w	r11,r9[0x0]
80002a20:	91 0b       	st.w	r8[0x0],r11
80002a22:	72 1b       	ld.w	r11,r9[0x4]
80002a24:	91 1b       	st.w	r8[0x4],r11
80002a26:	72 2b       	ld.w	r11,r9[0x8]
80002a28:	91 2b       	st.w	r8[0x8],r11
80002a2a:	72 39       	ld.w	r9,r9[0xc]
80002a2c:	91 39       	st.w	r8[0xc],r9
80002a2e:	20 4d       	sub	sp,16
80002a30:	1a 98       	mov	r8,sp
80002a32:	ee c9 00 10 	sub	r9,r7,16
80002a36:	20 08       	sub	r8,0
80002a38:	20 09       	sub	r9,0
80002a3a:	72 0b       	ld.w	r11,r9[0x0]
80002a3c:	91 0b       	st.w	r8[0x0],r11
80002a3e:	72 1b       	ld.w	r11,r9[0x4]
80002a40:	91 1b       	st.w	r8[0x4],r11
80002a42:	72 2b       	ld.w	r11,r9[0x8]
80002a44:	91 2b       	st.w	r8[0x8],r11
80002a46:	72 39       	ld.w	r9,r9[0xc]
80002a48:	91 39       	st.w	r8[0xc],r9
80002a4a:	14 9c       	mov	r12,r10
80002a4c:	c0 ef       	rcall	80002868 <quat_multi>
80002a4e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002a50:	ee ca 00 30 	sub	r10,r7,48
80002a54:	20 4d       	sub	sp,16
80002a56:	1a 98       	mov	r8,sp
80002a58:	0a 99       	mov	r9,r5
80002a5a:	20 08       	sub	r8,0
80002a5c:	20 09       	sub	r9,0
80002a5e:	72 0b       	ld.w	r11,r9[0x0]
80002a60:	91 0b       	st.w	r8[0x0],r11
80002a62:	72 1b       	ld.w	r11,r9[0x4]
80002a64:	91 1b       	st.w	r8[0x4],r11
80002a66:	72 2b       	ld.w	r11,r9[0x8]
80002a68:	91 2b       	st.w	r8[0x8],r11
80002a6a:	72 39       	ld.w	r9,r9[0xc]
80002a6c:	91 39       	st.w	r8[0xc],r9
80002a6e:	20 4d       	sub	sp,16
80002a70:	1a 98       	mov	r8,sp
80002a72:	ee c9 00 20 	sub	r9,r7,32
80002a76:	20 08       	sub	r8,0
80002a78:	20 09       	sub	r9,0
80002a7a:	72 0b       	ld.w	r11,r9[0x0]
80002a7c:	91 0b       	st.w	r8[0x0],r11
80002a7e:	72 1b       	ld.w	r11,r9[0x4]
80002a80:	91 1b       	st.w	r8[0x4],r11
80002a82:	72 2b       	ld.w	r11,r9[0x8]
80002a84:	91 2b       	st.w	r8[0x8],r11
80002a86:	72 39       	ld.w	r9,r9[0xc]
80002a88:	91 39       	st.w	r8[0xc],r9
80002a8a:	14 9c       	mov	r12,r10
80002a8c:	ce ee       	rcall	80002868 <quat_multi>
80002a8e:	2f 8d       	sub	sp,-32
80002a90:	ee c8 00 20 	sub	r8,r7,32
80002a94:	ee c9 00 30 	sub	r9,r7,48
80002a98:	20 08       	sub	r8,0
80002a9a:	20 09       	sub	r9,0
80002a9c:	72 0a       	ld.w	r10,r9[0x0]
80002a9e:	91 0a       	st.w	r8[0x0],r10
80002aa0:	72 1a       	ld.w	r10,r9[0x4]
80002aa2:	91 1a       	st.w	r8[0x4],r10
80002aa4:	72 2a       	ld.w	r10,r9[0x8]
80002aa6:	91 2a       	st.w	r8[0x8],r10
80002aa8:	72 39       	ld.w	r9,r9[0xc]
80002aaa:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002aac:	06 98       	mov	r8,r3
80002aae:	ee c9 00 20 	sub	r9,r7,32
80002ab2:	20 08       	sub	r8,0
80002ab4:	20 09       	sub	r9,0
80002ab6:	72 0a       	ld.w	r10,r9[0x0]
80002ab8:	91 0a       	st.w	r8[0x0],r10
80002aba:	72 1a       	ld.w	r10,r9[0x4]
80002abc:	91 1a       	st.w	r8[0x4],r10
80002abe:	72 2a       	ld.w	r10,r9[0x8]
80002ac0:	91 2a       	st.w	r8[0x8],r10
80002ac2:	72 39       	ld.w	r9,r9[0xc]
80002ac4:	91 39       	st.w	r8[0xc],r9
}
80002ac6:	06 9c       	mov	r12,r3
80002ac8:	2f 4d       	sub	sp,-48
80002aca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002ace:	00 00       	add	r0,r0
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	28 66       	sub	r6,-122

80002ad4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ad8:	1a 97       	mov	r7,sp
80002ada:	20 2d       	sub	sp,8
80002adc:	4b 26       	lddpc	r6,80002ba4 <fast_sqrt+0xd0>
80002ade:	1e 26       	rsub	r6,pc
80002ae0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002ae4:	30 18       	mov	r8,1
80002ae6:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aea:	30 09       	mov	r9,0
80002aec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002af0:	e0 8c 00 03 	brvs	80002af6 <fast_sqrt+0x22>
80002af4:	c0 25       	brlt	80002af8 <fast_sqrt+0x24>
80002af6:	30 08       	mov	r8,0
80002af8:	5c 58       	castu.b	r8
80002afa:	c0 30       	breq	80002b00 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002afc:	30 08       	mov	r8,0
80002afe:	c4 f8       	rjmp	80002b9c <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b00:	fc 18 3f 80 	movh	r8,0x3f80
80002b04:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b08:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b10:	f0 16 00 0a 	mcall	r6[40]
80002b14:	18 98       	mov	r8,r12
80002b16:	10 99       	mov	r9,r8
80002b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b1c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b20:	fc 18 3f 00 	movh	r8,0x3f00
80002b24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b28:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b2c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b30:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b34:	f0 16 00 0a 	mcall	r6[40]
80002b38:	18 98       	mov	r8,r12
80002b3a:	10 99       	mov	r9,r8
80002b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b40:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b44:	fc 18 3f 00 	movh	r8,0x3f00
80002b48:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b4c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b50:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b54:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b58:	f0 16 00 0a 	mcall	r6[40]
80002b5c:	18 98       	mov	r8,r12
80002b5e:	10 99       	mov	r9,r8
80002b60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b64:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b68:	fc 18 3f 00 	movh	r8,0x3f00
80002b6c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b70:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b74:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b78:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b7c:	f0 16 00 0a 	mcall	r6[40]
80002b80:	18 98       	mov	r8,r12
80002b82:	10 99       	mov	r9,r8
80002b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b88:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b8c:	fc 18 3f 00 	movh	r8,0x3f00
80002b90:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b94:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002b9c:	10 9c       	mov	r12,r8
80002b9e:	2f ed       	sub	sp,-8
80002ba0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	29 62       	sub	r2,-106

80002ba8 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bac:	1a 97       	mov	r7,sp
80002bae:	20 2d       	sub	sp,8
80002bb0:	48 96       	lddpc	r6,80002bd4 <vector_norm_sqr+0x2c>
80002bb2:	1e 26       	rsub	r6,pc
80002bb4:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002bb8:	ee fb ff f8 	ld.w	r11,r7[-8]
80002bbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc0:	c2 4e       	rcall	80002808 <scalar_product>
80002bc2:	18 98       	mov	r8,r12
80002bc4:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002bcc:	10 9c       	mov	r12,r8
80002bce:	2f ed       	sub	sp,-8
80002bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	2a 36       	sub	r6,-93

80002bd8 <vector_norm>:

float static inline vector_norm(float u[])
{
80002bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bdc:	1a 97       	mov	r7,sp
80002bde:	20 1d       	sub	sp,4
80002be0:	48 86       	lddpc	r6,80002c00 <vector_norm+0x28>
80002be2:	1e 26       	rsub	r6,pc
80002be4:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002be8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bec:	cd ef       	rcall	80002ba8 <vector_norm_sqr>
80002bee:	18 98       	mov	r8,r12
80002bf0:	10 9c       	mov	r12,r8
80002bf2:	c7 1f       	rcall	80002ad4 <fast_sqrt>
80002bf4:	18 98       	mov	r8,r12
}
80002bf6:	10 9c       	mov	r12,r8
80002bf8:	2f fd       	sub	sp,-4
80002bfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bfe:	00 00       	add	r0,r0
80002c00:	80 00       	ld.sh	r0,r0[0x0]
80002c02:	2a 66       	sub	r6,-90

80002c04 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c04:	eb cd 40 80 	pushm	r7,lr
80002c08:	1a 97       	mov	r7,sp
80002c0a:	20 2d       	sub	sp,8
80002c0c:	ef 4c ff fc 	st.w	r7[-4],r12
80002c10:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c14:	30 18       	mov	r8,1
80002c16:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c1e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c22:	e0 8c 00 04 	brvs	80002c2a <f_min+0x26>
80002c26:	e0 8a 00 03 	brle	80002c2c <f_min+0x28>
80002c2a:	30 08       	mov	r8,0
80002c2c:	5c 58       	castu.b	r8
80002c2e:	c0 40       	breq	80002c36 <f_min+0x32>
	{
		return a;
80002c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c34:	c0 38       	rjmp	80002c3a <f_min+0x36>
	}else{
		return b;
80002c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c3a:	10 9c       	mov	r12,r8
80002c3c:	2f ed       	sub	sp,-8
80002c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c42 <f_max>:

static inline float f_max(const float a, const float b){
80002c42:	eb cd 40 80 	pushm	r7,lr
80002c46:	1a 97       	mov	r7,sp
80002c48:	20 2d       	sub	sp,8
80002c4a:	ef 4c ff fc 	st.w	r7[-4],r12
80002c4e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002c52:	30 18       	mov	r8,1
80002c54:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c5c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c60:	e0 8c 00 03 	brvs	80002c66 <f_max+0x24>
80002c64:	c0 24       	brge	80002c68 <f_max+0x26>
80002c66:	30 08       	mov	r8,0
80002c68:	5c 58       	castu.b	r8
80002c6a:	c0 40       	breq	80002c72 <f_max+0x30>
	{
		return a;
80002c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c70:	c0 38       	rjmp	80002c76 <f_max+0x34>
	}else{
		return b;
80002c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c76:	10 9c       	mov	r12,r8
80002c78:	2f ed       	sub	sp,-8
80002c7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c7e <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002c7e:	eb cd 40 c0 	pushm	r6-r7,lr
80002c82:	1a 97       	mov	r7,sp
80002c84:	49 26       	lddpc	r6,80002ccc <init_orca+0x4e>
80002c86:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002c88:	f0 16 00 32 	mcall	r6[200]
80002c8c:	18 99       	mov	r9,r12
80002c8e:	ec f8 00 00 	ld.w	r8,r6[0]
80002c92:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002c94:	ec f8 00 00 	ld.w	r8,r6[0]
80002c98:	70 08       	ld.w	r8,r8[0x0]
80002c9a:	fc 19 40 a0 	movh	r9,0x40a0
80002c9e:	f1 49 11 00 	st.w	r8[4352],r9
		
	timeHorizon = 8.0;
80002ca2:	ec f8 04 2c 	ld.w	r8,r6[1068]
80002ca6:	fc 19 41 00 	movh	r9,0x4100
80002caa:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002cac:	ec f8 04 2c 	ld.w	r8,r6[1068]
80002cb0:	70 08       	ld.w	r8,r8[0x0]
80002cb2:	10 9b       	mov	r11,r8
80002cb4:	fc 1c 3f 80 	movh	r12,0x3f80
80002cb8:	f0 16 00 0a 	mcall	r6[40]
80002cbc:	18 98       	mov	r8,r12
80002cbe:	10 99       	mov	r9,r8
80002cc0:	ec f8 02 b4 	ld.w	r8,r6[692]
80002cc4:	91 09       	st.w	r8[0x0],r9
}
80002cc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002cca:	00 00       	add	r0,r0
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2b 0a       	sub	r10,-80
80002cd0:	43 6f       	lddsp	pc,sp[0xd8]
80002cd2:	6c 6c       	ld.w	r12,r6[0x18]
80002cd4:	69 73       	ld.w	r3,r4[0x5c]
80002cd6:	69 6f       	ld.w	pc,r4[0x58]
80002cd8:	6e 21       	ld.w	r1,r7[0x8]
80002cda:	20 00       	sub	r0,0
80002cdc:	44 69       	lddsp	r9,sp[0x118]
80002cde:	73 74       	ld.w	r4,r9[0x5c]
80002ce0:	61 6e       	ld.w	lr,r0[0x58]
80002ce2:	63 65       	ld.w	r5,r1[0x58]
80002ce4:	20 77       	sub	r7,7
80002ce6:	69 74       	ld.w	r4,r4[0x5c]
80002ce8:	68 20       	ld.w	r0,r4[0x8]
80002cea:	6e 65       	ld.w	r5,r7[0x18]
80002cec:	69 67       	ld.w	r7,r4[0x58]
80002cee:	68 62       	ld.w	r2,r4[0x18]
80002cf0:	6f 72       	ld.w	r2,r7[0x5c]
80002cf2:	20 00       	sub	r0,0
80002cf4:	28 78       	sub	r8,-121
80002cf6:	31 30       	mov	r0,19
80002cf8:	30 29       	mov	r9,2
80002cfa:	3a 00       	mov	r0,-96
80002cfc:	0a 00       	add	r0,r5
80002cfe:	00 00       	add	r0,r0
80002d00:	4f 72       	lddpc	r2,80002edc <computeNewVelocity+0x1b8>
80002d02:	63 61       	ld.w	r1,r1[0x58]
80002d04:	20 64       	sub	r4,6
80002d06:	69 66       	ld.w	r6,r4[0x58]
80002d08:	66 76       	ld.w	r6,r3[0x1c]
80002d0a:	65 6c       	ld.w	r12,r2[0x58]
80002d0c:	3a 00       	mov	r0,-96
80002d0e:	00 00       	add	r0,r0
80002d10:	2c 20       	sub	r0,-62
80002d12:	4f 70       	lddpc	r0,80002eec <computeNewVelocity+0x1c8>
80002d14:	74 69       	ld.w	r9,r10[0x18]
80002d16:	6d 61       	ld.w	r1,r6[0x58]
80002d18:	6c 3a       	ld.w	r10,r6[0xc]
80002d1a:	00 00       	add	r0,r0
80002d1c:	2c 20       	sub	r0,-62
80002d1e:	4e 65       	lddpc	r5,80002eb4 <computeNewVelocity+0x190>
80002d20:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002d24 <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002d24:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002d28:	1a 97       	mov	r7,sp
80002d2a:	fa cd 02 34 	sub	sp,sp,564
80002d2e:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002d32:	1e 26       	rsub	r6,pc
80002d34:	ef 4c fd e0 	st.w	r7[-544],r12
80002d38:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d3c:	30 08       	mov	r8,0
80002d3e:	ef 68 ff cf 	st.b	r7[-49],r8
80002d42:	c1 68       	rjmp	80002d6e <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002d44:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d48:	a3 68       	lsl	r8,0x2
80002d4a:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002d4e:	f2 08 00 08 	add	r8,r9,r8
80002d52:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002d56:	a3 69       	lsl	r9,0x2
80002d58:	ee fa fd e0 	ld.w	r10,r7[-544]
80002d5c:	f4 09 00 09 	add	r9,r10,r9
80002d60:	72 09       	ld.w	r9,r9[0x0]
80002d62:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d64:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002d68:	2f f8       	sub	r8,-1
80002d6a:	ef 68 ff cf 	st.b	r7[-49],r8
80002d6e:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002d72:	30 28       	mov	r8,2
80002d74:	f0 09 18 00 	cp.b	r9,r8
80002d78:	fe 9a ff e6 	brle	80002d44 <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002d7c:	30 08       	mov	r8,0
80002d7e:	ef 68 ff ce 	st.b	r7[-50],r8
80002d82:	e0 8f 04 22 	bral	800035c6 <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002d86:	30 08       	mov	r8,0
80002d88:	ef 68 ff cf 	st.b	r7[-49],r8
80002d8c:	c4 68       	rjmp	80002e18 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002d8e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d92:	ec f9 00 00 	ld.w	r9,r6[0]
80002d96:	72 09       	ld.w	r9,r9[0x0]
80002d98:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002d9c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002da0:	a3 7b       	lsl	r11,0x3
80002da2:	f6 0a 00 0a 	add	r10,r11,r10
80002da6:	f4 ca fb be 	sub	r10,r10,-1090
80002daa:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002dae:	ec f9 00 00 	ld.w	r9,r6[0]
80002db2:	72 09       	ld.w	r9,r9[0x0]
80002db4:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002db8:	f6 cb fc 99 	sub	r11,r11,-871
80002dbc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002dc0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002dc4:	a3 68       	lsl	r8,0x2
80002dc6:	ee 08 00 08 	add	r8,r7,r8
80002dca:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002dce:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002dd2:	ec f9 00 00 	ld.w	r9,r6[0]
80002dd6:	72 09       	ld.w	r9,r9[0x0]
80002dd8:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ddc:	f4 ca fc a3 	sub	r10,r10,-861
80002de0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002de4:	ec f9 00 00 	ld.w	r9,r6[0]
80002de8:	72 09       	ld.w	r9,r9[0x0]
80002dea:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002dee:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002df2:	a3 7c       	lsl	r12,0x3
80002df4:	f8 0b 00 0b 	add	r11,r12,r11
80002df8:	f6 cb fb bb 	sub	r11,r11,-1093
80002dfc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002e00:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002e04:	a3 68       	lsl	r8,0x2
80002e06:	ee 08 00 08 	add	r8,r7,r8
80002e0a:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e0e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e12:	2f f8       	sub	r8,-1
80002e14:	ef 68 ff cf 	st.b	r7[-49],r8
80002e18:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e1c:	30 28       	mov	r8,2
80002e1e:	f0 09 18 00 	cp.b	r9,r8
80002e22:	fe 9a ff b6 	brle	80002d8e <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002e26:	30 08       	mov	r8,0
80002e28:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002e2c:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002e30:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002e34:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002e38:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002e3c:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002e40:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002e44:	ec f8 00 00 	ld.w	r8,r6[0]
80002e48:	70 0b       	ld.w	r11,r8[0x0]
80002e4a:	ee ca 01 bc 	sub	r10,r7,444
80002e4e:	20 4d       	sub	sp,16
80002e50:	1a 98       	mov	r8,sp
80002e52:	ee c9 01 ac 	sub	r9,r7,428
80002e56:	20 08       	sub	r8,0
80002e58:	20 09       	sub	r9,0
80002e5a:	72 0c       	ld.w	r12,r9[0x0]
80002e5c:	91 0c       	st.w	r8[0x0],r12
80002e5e:	72 1c       	ld.w	r12,r9[0x4]
80002e60:	91 1c       	st.w	r8[0x4],r12
80002e62:	72 2c       	ld.w	r12,r9[0x8]
80002e64:	91 2c       	st.w	r8[0x8],r12
80002e66:	72 39       	ld.w	r9,r9[0xc]
80002e68:	91 39       	st.w	r8[0xc],r9
80002e6a:	20 4d       	sub	sp,16
80002e6c:	1a 98       	mov	r8,sp
80002e6e:	16 99       	mov	r9,r11
80002e70:	20 08       	sub	r8,0
80002e72:	20 09       	sub	r9,0
80002e74:	72 0b       	ld.w	r11,r9[0x0]
80002e76:	91 0b       	st.w	r8[0x0],r11
80002e78:	72 1b       	ld.w	r11,r9[0x4]
80002e7a:	91 1b       	st.w	r8[0x4],r11
80002e7c:	72 2b       	ld.w	r11,r9[0x8]
80002e7e:	91 2b       	st.w	r8[0x8],r11
80002e80:	72 39       	ld.w	r9,r9[0xc]
80002e82:	91 39       	st.w	r8[0xc],r9
80002e84:	14 9c       	mov	r12,r10
80002e86:	fe b0 fd a9 	rcall	800029d8 <quat_global_to_local>
80002e8a:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002e8c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002e90:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002e94:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002e98:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002e9c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002ea0:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002ea4:	30 08       	mov	r8,0
80002ea6:	ef 68 ff cf 	st.b	r7[-49],r8
80002eaa:	c1 58       	rjmp	80002ed4 <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002eac:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002eb0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eb4:	a3 68       	lsl	r8,0x2
80002eb6:	ee 08 00 08 	add	r8,r7,r8
80002eba:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002ebe:	f4 08 15 02 	lsl	r8,r10,0x2
80002ec2:	ee 08 00 08 	add	r8,r7,r8
80002ec6:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002eca:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002ece:	2f f8       	sub	r8,-1
80002ed0:	ef 68 ff cf 	st.b	r7[-49],r8
80002ed4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002ed8:	30 28       	mov	r8,2
80002eda:	f0 09 18 00 	cp.b	r9,r8
80002ede:	fe 9a ff e7 	brle	80002eac <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002ee2:	30 08       	mov	r8,0
80002ee4:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ee8:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002eec:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ef0:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ef4:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80002ef8:	ee f8 fe 40 	ld.w	r8,r7[-448]
80002efc:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f00:	ec f8 00 00 	ld.w	r8,r6[0]
80002f04:	70 0b       	ld.w	r11,r8[0x0]
80002f06:	ee ca 02 34 	sub	r10,r7,564
80002f0a:	20 4d       	sub	sp,16
80002f0c:	1a 98       	mov	r8,sp
80002f0e:	ee c9 01 ac 	sub	r9,r7,428
80002f12:	20 08       	sub	r8,0
80002f14:	20 09       	sub	r9,0
80002f16:	72 0c       	ld.w	r12,r9[0x0]
80002f18:	91 0c       	st.w	r8[0x0],r12
80002f1a:	72 1c       	ld.w	r12,r9[0x4]
80002f1c:	91 1c       	st.w	r8[0x4],r12
80002f1e:	72 2c       	ld.w	r12,r9[0x8]
80002f20:	91 2c       	st.w	r8[0x8],r12
80002f22:	72 39       	ld.w	r9,r9[0xc]
80002f24:	91 39       	st.w	r8[0xc],r9
80002f26:	20 4d       	sub	sp,16
80002f28:	1a 98       	mov	r8,sp
80002f2a:	16 99       	mov	r9,r11
80002f2c:	20 08       	sub	r8,0
80002f2e:	20 09       	sub	r9,0
80002f30:	72 0b       	ld.w	r11,r9[0x0]
80002f32:	91 0b       	st.w	r8[0x0],r11
80002f34:	72 1b       	ld.w	r11,r9[0x4]
80002f36:	91 1b       	st.w	r8[0x4],r11
80002f38:	72 2b       	ld.w	r11,r9[0x8]
80002f3a:	91 2b       	st.w	r8[0x8],r11
80002f3c:	72 39       	ld.w	r9,r9[0xc]
80002f3e:	91 39       	st.w	r8[0xc],r9
80002f40:	14 9c       	mov	r12,r10
80002f42:	fe b0 fd 4b 	rcall	800029d8 <quat_global_to_local>
80002f46:	2f 8d       	sub	sp,-32
80002f48:	ee c8 01 bc 	sub	r8,r7,444
80002f4c:	ee c9 02 34 	sub	r9,r7,564
80002f50:	20 08       	sub	r8,0
80002f52:	20 09       	sub	r9,0
80002f54:	72 0a       	ld.w	r10,r9[0x0]
80002f56:	91 0a       	st.w	r8[0x0],r10
80002f58:	72 1a       	ld.w	r10,r9[0x4]
80002f5a:	91 1a       	st.w	r8[0x4],r10
80002f5c:	72 2a       	ld.w	r10,r9[0x8]
80002f5e:	91 2a       	st.w	r8[0x8],r10
80002f60:	72 39       	ld.w	r9,r9[0xc]
80002f62:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f64:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f68:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f6c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002f70:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002f74:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002f78:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002f7c:	30 08       	mov	r8,0
80002f7e:	ef 68 ff cf 	st.b	r7[-49],r8
80002f82:	c1 58       	rjmp	80002fac <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
80002f84:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002f88:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002f8c:	a3 68       	lsl	r8,0x2
80002f8e:	ee 08 00 08 	add	r8,r7,r8
80002f92:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002f96:	f4 08 15 02 	lsl	r8,r10,0x2
80002f9a:	ee 08 00 08 	add	r8,r7,r8
80002f9e:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fa2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fa6:	2f f8       	sub	r8,-1
80002fa8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fac:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fb0:	30 28       	mov	r8,2
80002fb2:	f0 09 18 00 	cp.b	r9,r8
80002fb6:	fe 9a ff e7 	brle	80002f84 <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
80002fba:	ee c8 01 c8 	sub	r8,r7,456
80002fbe:	10 9c       	mov	r12,r8
80002fc0:	fe b0 fd f4 	rcall	80002ba8 <vector_norm_sqr>
80002fc4:	18 98       	mov	r8,r12
80002fc6:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
80002fca:	ec f8 00 00 	ld.w	r8,r6[0]
80002fce:	70 08       	ld.w	r8,r8[0x0]
80002fd0:	f0 f9 11 00 	ld.w	r9,r8[4352]
80002fd4:	ec f8 00 00 	ld.w	r8,r6[0]
80002fd8:	70 0a       	ld.w	r10,r8[0x0]
80002fda:	ef 28 ff ce 	ld.sb	r8,r7[-50]
80002fde:	f0 c8 ff 77 	sub	r8,r8,-137
80002fe2:	a5 78       	lsl	r8,0x5
80002fe4:	f4 08 00 08 	add	r8,r10,r8
80002fe8:	70 08       	ld.w	r8,r8[0x0]
80002fea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002fee:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
80002ff2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ff6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ffa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002ffe:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
80003002:	30 18       	mov	r8,1
80003004:	ee fa ff d4 	ld.w	r10,r7[-44]
80003008:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000300c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003010:	e0 8c 00 04 	brvs	80003018 <computeNewVelocity+0x2f4>
80003014:	e0 89 00 03 	brgt	8000301a <computeNewVelocity+0x2f6>
80003018:	30 08       	mov	r8,0
8000301a:	5c 58       	castu.b	r8
8000301c:	e0 80 01 c7 	breq	800033aa <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003020:	30 08       	mov	r8,0
80003022:	ef 68 ff cf 	st.b	r7[-49],r8
80003026:	c2 38       	rjmp	8000306c <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003028:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000302c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003030:	a3 68       	lsl	r8,0x2
80003032:	ee 08 00 08 	add	r8,r7,r8
80003036:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
8000303a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000303e:	a3 68       	lsl	r8,0x2
80003040:	ee 08 00 08 	add	r8,r7,r8
80003044:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003048:	ec f8 02 b4 	ld.w	r8,r6[692]
8000304c:	70 08       	ld.w	r8,r8[0x0]
8000304e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003052:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003056:	f4 08 15 02 	lsl	r8,r10,0x2
8000305a:	ee 08 00 08 	add	r8,r7,r8
8000305e:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
80003062:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003066:	2f f8       	sub	r8,-1
80003068:	ef 68 ff cf 	st.b	r7[-49],r8
8000306c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003070:	30 28       	mov	r8,2
80003072:	f0 09 18 00 	cp.b	r9,r8
80003076:	fe 9a ff d9 	brle	80003028 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
8000307a:	ee c8 01 e0 	sub	r8,r7,480
8000307e:	10 9c       	mov	r12,r8
80003080:	fe b0 fd 94 	rcall	80002ba8 <vector_norm_sqr>
80003084:	18 98       	mov	r8,r12
80003086:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
8000308a:	ee c9 01 c8 	sub	r9,r7,456
8000308e:	ee c8 01 e0 	sub	r8,r7,480
80003092:	12 9b       	mov	r11,r9
80003094:	10 9c       	mov	r12,r8
80003096:	fe b0 fb b9 	rcall	80002808 <scalar_product>
8000309a:	18 98       	mov	r8,r12
8000309c:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800030a0:	30 18       	mov	r8,1
800030a2:	ee fa ff dc 	ld.w	r10,r7[-36]
800030a6:	30 09       	mov	r9,0
800030a8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030ac:	e0 8c 00 03 	brvs	800030b2 <computeNewVelocity+0x38e>
800030b0:	c0 25       	brlt	800030b4 <computeNewVelocity+0x390>
800030b2:	30 08       	mov	r8,0
800030b4:	5c 58       	castu.b	r8
800030b6:	c7 70       	breq	800031a4 <computeNewVelocity+0x480>
800030b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800030bc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800030c0:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800030c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800030c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800030cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800030d0:	30 18       	mov	r8,1
800030d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030d6:	e0 8c 00 04 	brvs	800030de <computeNewVelocity+0x3ba>
800030da:	e0 89 00 03 	brgt	800030e0 <computeNewVelocity+0x3bc>
800030de:	30 08       	mov	r8,0
800030e0:	5c 58       	castu.b	r8
800030e2:	c6 10       	breq	800031a4 <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800030e4:	ee fc ff e4 	ld.w	r12,r7[-28]
800030e8:	fe b0 fc f6 	rcall	80002ad4 <fast_sqrt>
800030ec:	18 98       	mov	r8,r12
800030ee:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800030f2:	30 08       	mov	r8,0
800030f4:	ef 68 ff cf 	st.b	r7[-49],r8
800030f8:	c4 d8       	rjmp	80003192 <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
800030fa:	ef 25 ff cf 	ld.sb	r5,r7[-49]
800030fe:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003102:	a3 68       	lsl	r8,0x2
80003104:	ee 08 00 08 	add	r8,r7,r8
80003108:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000310c:	ee fb ff e0 	ld.w	r11,r7[-32]
80003110:	10 9c       	mov	r12,r8
80003112:	f0 16 00 0a 	mcall	r6[40]
80003116:	18 98       	mov	r8,r12
80003118:	10 99       	mov	r9,r8
8000311a:	ea 08 15 02 	lsl	r8,r5,0x2
8000311e:	ee 08 00 08 	add	r8,r7,r8
80003122:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003126:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000312a:	ef 2b ff cf 	ld.sb	r11,r7[-49]
8000312e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003132:	a3 68       	lsl	r8,0x2
80003134:	ee 08 00 08 	add	r8,r7,r8
80003138:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000313c:	12 98       	mov	r8,r9
8000313e:	a1 78       	lsl	r8,0x1
80003140:	12 08       	add	r8,r9
80003142:	a1 78       	lsl	r8,0x1
80003144:	16 08       	add	r8,r11
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003150:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003154:	ec f8 02 b4 	ld.w	r8,r6[692]
80003158:	70 09       	ld.w	r9,r8[0x0]
8000315a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000315e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003166:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000316a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000316e:	a3 68       	lsl	r8,0x2
80003170:	ee 08 00 08 	add	r8,r7,r8
80003174:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003178:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000317c:	f4 08 15 02 	lsl	r8,r10,0x2
80003180:	ee 08 00 08 	add	r8,r7,r8
80003184:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003188:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000318c:	2f f8       	sub	r8,-1
8000318e:	ef 68 ff cf 	st.b	r7[-49],r8
80003192:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003196:	30 28       	mov	r8,2
80003198:	f0 09 18 00 	cp.b	r9,r8
8000319c:	fe 9a ff af 	brle	800030fa <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a0:	e0 8f 01 c5 	bral	8000352a <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800031a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031a8:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800031ac:	ee c9 01 d4 	sub	r9,r7,468
800031b0:	ee c8 01 c8 	sub	r8,r7,456
800031b4:	12 9b       	mov	r11,r9
800031b6:	10 9c       	mov	r12,r8
800031b8:	fe b0 fb 28 	rcall	80002808 <scalar_product>
800031bc:	18 98       	mov	r8,r12
800031be:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800031c2:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800031c6:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031ca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ce:	ee fa fe 40 	ld.w	r10,r7[-448]
800031d2:	ee f8 fe 30 	ld.w	r8,r7[-464]
800031d6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031de:	ef 48 fd e4 	st.w	r7[-540],r8
800031e2:	ee f9 fe 40 	ld.w	r9,r7[-448]
800031e6:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800031ea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ee:	ee fa fe 38 	ld.w	r10,r7[-456]
800031f2:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031fa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031fe:	ef 48 fd e8 	st.w	r7[-536],r8
80003202:	ee f9 fe 38 	ld.w	r9,r7[-456]
80003206:	ee f8 fe 30 	ld.w	r8,r7[-464]
8000320a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000320e:	ee fa fe 3c 	ld.w	r10,r7[-452]
80003212:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80003216:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000321a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000321e:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
80003222:	ee c8 01 d4 	sub	r8,r7,468
80003226:	10 9c       	mov	r12,r8
80003228:	fe b0 fc c0 	rcall	80002ba8 <vector_norm_sqr>
8000322c:	18 95       	mov	r5,r12
8000322e:	ee c8 02 1c 	sub	r8,r7,540
80003232:	10 9c       	mov	r12,r8
80003234:	fe b0 fc ba 	rcall	80002ba8 <vector_norm_sqr>
80003238:	18 98       	mov	r8,r12
8000323a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000323e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003242:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003246:	12 9b       	mov	r11,r9
80003248:	10 9c       	mov	r12,r8
8000324a:	f0 16 00 0a 	mcall	r6[40]
8000324e:	18 98       	mov	r8,r12
80003250:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
80003254:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003258:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000325c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003260:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003264:	ee fa ff ec 	ld.w	r10,r7[-20]
80003268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000326c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003270:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003274:	10 9c       	mov	r12,r8
80003276:	fe b0 fc 2f 	rcall	80002ad4 <fast_sqrt>
8000327a:	18 99       	mov	r9,r12
8000327c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003280:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80003284:	ee fb ff ec 	ld.w	r11,r7[-20]
80003288:	10 9c       	mov	r12,r8
8000328a:	f0 16 00 0a 	mcall	r6[40]
8000328e:	18 98       	mov	r8,r12
80003290:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
80003294:	30 08       	mov	r8,0
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	c2 28       	rjmp	800032de <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
8000329c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800032a0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032a4:	a3 68       	lsl	r8,0x2
800032a6:	ee 08 00 08 	add	r8,r7,r8
800032aa:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800032ae:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032b2:	a3 68       	lsl	r8,0x2
800032b4:	ee 08 00 08 	add	r8,r7,r8
800032b8:	f0 fb fe 38 	ld.w	r11,r8[-456]
800032bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800032c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800032c8:	f4 08 15 02 	lsl	r8,r10,0x2
800032cc:	ee 08 00 08 	add	r8,r7,r8
800032d0:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800032d4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800032d8:	2f f8       	sub	r8,-1
800032da:	ef 68 ff cf 	st.b	r7[-49],r8
800032de:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800032e2:	30 28       	mov	r8,2
800032e4:	f0 09 18 00 	cp.b	r9,r8
800032e8:	fe 9a ff da 	brle	8000329c <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800032ec:	ee c8 01 e0 	sub	r8,r7,480
800032f0:	10 9c       	mov	r12,r8
800032f2:	fe b0 fc 73 	rcall	80002bd8 <vector_norm>
800032f6:	18 98       	mov	r8,r12
800032f8:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800032fc:	30 08       	mov	r8,0
800032fe:	ef 68 ff cf 	st.b	r7[-49],r8
80003302:	c4 c8       	rjmp	8000339a <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
80003304:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003308:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000330c:	a3 68       	lsl	r8,0x2
8000330e:	ee 08 00 08 	add	r8,r7,r8
80003312:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003316:	ee fb ff e0 	ld.w	r11,r7[-32]
8000331a:	10 9c       	mov	r12,r8
8000331c:	f0 16 00 0a 	mcall	r6[40]
80003320:	18 98       	mov	r8,r12
80003322:	10 99       	mov	r9,r8
80003324:	ea 08 15 02 	lsl	r8,r5,0x2
80003328:	ee 08 00 08 	add	r8,r7,r8
8000332c:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003330:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003334:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003338:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000333c:	a3 68       	lsl	r8,0x2
8000333e:	ee 08 00 08 	add	r8,r7,r8
80003342:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003346:	12 98       	mov	r8,r9
80003348:	a1 78       	lsl	r8,0x1
8000334a:	12 08       	add	r8,r9
8000334c:	a1 78       	lsl	r8,0x1
8000334e:	16 08       	add	r8,r11
80003350:	a3 68       	lsl	r8,0x2
80003352:	ee 08 00 08 	add	r8,r7,r8
80003356:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
8000335a:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000335e:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003366:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000336e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003372:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003376:	a3 68       	lsl	r8,0x2
80003378:	ee 08 00 08 	add	r8,r7,r8
8000337c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003380:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003384:	f4 08 15 02 	lsl	r8,r10,0x2
80003388:	ee 08 00 08 	add	r8,r7,r8
8000338c:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003390:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003394:	2f f8       	sub	r8,-1
80003396:	ef 68 ff cf 	st.b	r7[-49],r8
8000339a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000339e:	30 28       	mov	r8,2
800033a0:	f0 09 18 00 	cp.b	r9,r8
800033a4:	fe 9a ff b0 	brle	80003304 <computeNewVelocity+0x5e0>
800033a8:	cc 18       	rjmp	8000352a <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800033aa:	fe cc 06 da 	sub	r12,pc,1754
800033ae:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800033b2:	fe cc 06 d6 	sub	r12,pc,1750
800033b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800033ba:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800033be:	30 ab       	mov	r11,10
800033c0:	10 9c       	mov	r12,r8
800033c2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800033c6:	fe cc 06 d2 	sub	r12,pc,1746
800033ca:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800033ce:	ee fc ff d4 	ld.w	r12,r7[-44]
800033d2:	f0 16 00 02 	mcall	r6[8]
800033d6:	14 98       	mov	r8,r10
800033d8:	16 99       	mov	r9,r11
800033da:	10 9a       	mov	r10,r8
800033dc:	12 9b       	mov	r11,r9
800033de:	f0 16 00 6b 	mcall	r6[428]
800033e2:	30 08       	mov	r8,0
800033e4:	fc 19 40 59 	movh	r9,0x4059
800033e8:	f0 16 00 03 	mcall	r6[12]
800033ec:	14 98       	mov	r8,r10
800033ee:	16 99       	mov	r9,r11
800033f0:	10 9a       	mov	r10,r8
800033f2:	12 9b       	mov	r11,r9
800033f4:	f0 16 00 14 	mcall	r6[80]
800033f8:	18 98       	mov	r8,r12
800033fa:	30 ab       	mov	r11,10
800033fc:	10 9c       	mov	r12,r8
800033fe:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80003402:	fe cc 07 06 	sub	r12,pc,1798
80003406:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
8000340a:	e0 68 cc cd 	mov	r8,52429
8000340e:	ea 18 3d cc 	orh	r8,0x3dcc
80003412:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
80003416:	30 08       	mov	r8,0
80003418:	ef 68 ff cf 	st.b	r7[-49],r8
8000341c:	c2 28       	rjmp	80003460 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
8000341e:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003422:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003426:	a3 68       	lsl	r8,0x2
80003428:	ee 08 00 08 	add	r8,r7,r8
8000342c:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003430:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003434:	a3 68       	lsl	r8,0x2
80003436:	ee 08 00 08 	add	r8,r7,r8
8000343a:	f0 fb fe 38 	ld.w	r11,r8[-456]
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003446:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000344a:	f4 08 15 02 	lsl	r8,r10,0x2
8000344e:	ee 08 00 08 	add	r8,r7,r8
80003452:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
80003456:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000345a:	2f f8       	sub	r8,-1
8000345c:	ef 68 ff cf 	st.b	r7[-49],r8
80003460:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003464:	30 28       	mov	r8,2
80003466:	f0 09 18 00 	cp.b	r9,r8
8000346a:	fe 9a ff da 	brle	8000341e <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
8000346e:	ee c8 01 e0 	sub	r8,r7,480
80003472:	10 9c       	mov	r12,r8
80003474:	fe b0 fb b2 	rcall	80002bd8 <vector_norm>
80003478:	18 98       	mov	r8,r12
8000347a:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
8000347e:	30 08       	mov	r8,0
80003480:	ef 68 ff cf 	st.b	r7[-49],r8
80003484:	c4 c8       	rjmp	8000351c <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
80003486:	ef 25 ff cf 	ld.sb	r5,r7[-49]
8000348a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000348e:	a3 68       	lsl	r8,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003498:	ee fb ff e0 	ld.w	r11,r7[-32]
8000349c:	10 9c       	mov	r12,r8
8000349e:	f0 16 00 0a 	mcall	r6[40]
800034a2:	18 98       	mov	r8,r12
800034a4:	10 99       	mov	r9,r8
800034a6:	ea 08 15 02 	lsl	r8,r5,0x2
800034aa:	ee 08 00 08 	add	r8,r7,r8
800034ae:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800034b2:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800034b6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800034ba:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034be:	a3 68       	lsl	r8,0x2
800034c0:	ee 08 00 08 	add	r8,r7,r8
800034c4:	f0 fa fe 14 	ld.w	r10,r8[-492]
800034c8:	12 98       	mov	r8,r9
800034ca:	a1 78       	lsl	r8,0x1
800034cc:	12 08       	add	r8,r9
800034ce:	a1 78       	lsl	r8,0x1
800034d0:	16 08       	add	r8,r11
800034d2:	a3 68       	lsl	r8,0x2
800034d4:	ee 08 00 08 	add	r8,r7,r8
800034d8:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800034dc:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800034e0:	ee f9 ff d0 	ld.w	r9,r7[-48]
800034e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800034ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800034f0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800034f4:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034f8:	a3 68       	lsl	r8,0x2
800034fa:	ee 08 00 08 	add	r8,r7,r8
800034fe:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003502:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003506:	f4 08 15 02 	lsl	r8,r10,0x2
8000350a:	ee 08 00 08 	add	r8,r7,r8
8000350e:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
80003512:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003516:	2f f8       	sub	r8,-1
80003518:	ef 68 ff cf 	st.b	r7[-49],r8
8000351c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003520:	30 28       	mov	r8,2
80003522:	f0 09 18 00 	cp.b	r9,r8
80003526:	fe 9a ff b0 	brle	80003486 <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
8000352a:	30 08       	mov	r8,0
8000352c:	ef 68 ff cf 	st.b	r7[-49],r8
80003530:	c3 f8       	rjmp	800035ae <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
80003532:	ef 25 ff ce 	ld.sb	r5,r7[-50]
80003536:	ef 21 ff cf 	ld.sb	r1,r7[-49]
8000353a:	ec f8 00 00 	ld.w	r8,r6[0]
8000353e:	70 08       	ld.w	r8,r8[0x0]
80003540:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003544:	f2 c9 fc a6 	sub	r9,r9,-858
80003548:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000354c:	10 9c       	mov	r12,r8
8000354e:	f0 16 00 02 	mcall	r6[8]
80003552:	14 92       	mov	r2,r10
80003554:	16 93       	mov	r3,r11
80003556:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000355a:	a3 68       	lsl	r8,0x2
8000355c:	ee 08 00 08 	add	r8,r7,r8
80003560:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80003564:	10 9c       	mov	r12,r8
80003566:	f0 16 00 02 	mcall	r6[8]
8000356a:	30 08       	mov	r8,0
8000356c:	fc 19 3f e0 	movh	r9,0x3fe0
80003570:	f0 16 00 03 	mcall	r6[12]
80003574:	14 98       	mov	r8,r10
80003576:	16 99       	mov	r9,r11
80003578:	04 9a       	mov	r10,r2
8000357a:	06 9b       	mov	r11,r3
8000357c:	f0 16 00 05 	mcall	r6[20]
80003580:	14 98       	mov	r8,r10
80003582:	16 99       	mov	r9,r11
80003584:	10 9a       	mov	r10,r8
80003586:	12 9b       	mov	r11,r9
80003588:	f0 16 00 08 	mcall	r6[32]
8000358c:	18 99       	mov	r9,r12
8000358e:	0a 98       	mov	r8,r5
80003590:	a1 78       	lsl	r8,0x1
80003592:	0a 08       	add	r8,r5
80003594:	a1 78       	lsl	r8,0x1
80003596:	02 08       	add	r8,r1
80003598:	2f d8       	sub	r8,-3
8000359a:	a3 68       	lsl	r8,0x2
8000359c:	ee 08 00 08 	add	r8,r7,r8
800035a0:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800035a4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800035a8:	2f f8       	sub	r8,-1
800035aa:	ef 68 ff cf 	st.b	r7[-49],r8
800035ae:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800035b2:	30 28       	mov	r8,2
800035b4:	f0 09 18 00 	cp.b	r9,r8
800035b8:	fe 9a ff bd 	brle	80003532 <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800035bc:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800035c0:	2f f8       	sub	r8,-1
800035c2:	ef 68 ff ce 	st.b	r7[-50],r8
800035c6:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035ca:	ec f8 00 00 	ld.w	r8,r6[0]
800035ce:	70 08       	ld.w	r8,r8[0x0]
800035d0:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800035d4:	10 39       	cp.w	r9,r8
800035d6:	fe 95 fb d8 	brlt	80002d86 <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800035da:	ee cc 01 9c 	sub	r12,r7,412
800035de:	30 08       	mov	r8,0
800035e0:	ee f9 fd dc 	ld.w	r9,r7[-548]
800035e4:	fc 1a 40 90 	movh	r10,0x4090
800035e8:	ee fb fd e0 	ld.w	r11,r7[-544]
800035ec:	f0 16 01 0d 	mcall	r6[1076]
800035f0:	18 98       	mov	r8,r12
800035f2:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800035f6:	ec f8 00 00 	ld.w	r8,r6[0]
800035fa:	70 08       	ld.w	r8,r8[0x0]
800035fc:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80003600:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
80003604:	30 18       	mov	r8,1
80003606:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000360a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000360e:	e0 8c 00 04 	brvs	80003616 <computeNewVelocity+0x8f2>
80003612:	e0 89 00 03 	brgt	80003618 <computeNewVelocity+0x8f4>
80003616:	30 08       	mov	r8,0
80003618:	5c 58       	castu.b	r8
8000361a:	c1 10       	breq	8000363c <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
8000361c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003620:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80003624:	5c 58       	castu.b	r8
80003626:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
8000362a:	ee c8 01 9c 	sub	r8,r7,412
8000362e:	ee f9 fd dc 	ld.w	r9,r7[-548]
80003632:	fc 1a 40 90 	movh	r10,0x4090
80003636:	10 9c       	mov	r12,r8
80003638:	f0 16 02 0e 	mcall	r6[2104]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
8000363c:	ec f8 02 38 	ld.w	r8,r6[568]
80003640:	11 89       	ld.ub	r9,r8[0x0]
80003642:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
80003646:	e0 6a 85 1f 	mov	r10,34079
8000364a:	ea 1a 51 eb 	orh	r10,0x51eb
8000364e:	f0 0a 04 4a 	muls.d	r10,r8,r10
80003652:	a5 5b       	asr	r11,0x5
80003654:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003658:	f6 0a 01 0a 	sub	r10,r11,r10
8000365c:	f4 0a 10 64 	mul	r10,r10,100
80003660:	14 18       	sub	r8,r10
80003662:	5c 58       	castu.b	r8
80003664:	ec fa 02 38 	ld.w	r10,r6[568]
80003668:	b4 88       	st.b	r10[0x0],r8
8000366a:	f2 c8 ff ff 	sub	r8,r9,-1
8000366e:	5c 58       	castu.b	r8
80003670:	ec f9 02 38 	ld.w	r9,r6[568]
80003674:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
80003676:	30 08       	mov	r8,0
80003678:	ef 68 ff cf 	st.b	r7[-49],r8
8000367c:	c1 f8       	rjmp	800036ba <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
8000367e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003682:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003686:	a3 69       	lsl	r9,0x2
80003688:	ee fa fd e0 	ld.w	r10,r7[-544]
8000368c:	f4 09 00 09 	add	r9,r10,r9
80003690:	72 0a       	ld.w	r10,r9[0x0]
80003692:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003696:	a3 69       	lsl	r9,0x2
80003698:	ee fb fd dc 	ld.w	r11,r7[-548]
8000369c:	f6 09 00 09 	add	r9,r11,r9
800036a0:	72 09       	ld.w	r9,r9[0x0]
800036a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800036a6:	a3 68       	lsl	r8,0x2
800036a8:	ee 08 00 08 	add	r8,r7,r8
800036ac:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800036b0:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b4:	2f f8       	sub	r8,-1
800036b6:	ef 68 ff cf 	st.b	r7[-49],r8
800036ba:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036be:	30 28       	mov	r8,2
800036c0:	f0 09 18 00 	cp.b	r9,r8
800036c4:	fe 9a ff dd 	brle	8000367e <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800036c8:	ec f8 02 38 	ld.w	r8,r6[568]
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	58 08       	cp.w	r8,0
800036d0:	c2 11       	brne	80003712 <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800036d2:	fe cc 09 d2 	sub	r12,pc,2514
800036d6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800036da:	ee c8 02 10 	sub	r8,r7,528
800036de:	30 2b       	mov	r11,2
800036e0:	10 9c       	mov	r12,r8
800036e2:	f0 16 00 cd 	mcall	r6[820]
		dbg_print(", Optimal:");
800036e6:	fe cc 09 d6 	sub	r12,pc,2518
800036ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800036ee:	30 2b       	mov	r11,2
800036f0:	ee fc fd e0 	ld.w	r12,r7[-544]
800036f4:	f0 16 00 cd 	mcall	r6[820]
		dbg_print(", New:");
800036f8:	fe cc 09 dc 	sub	r12,pc,2524
800036fc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003700:	30 2b       	mov	r11,2
80003702:	ee fc fd dc 	ld.w	r12,r7[-548]
80003706:	f0 16 00 cd 	mcall	r6[820]
		dbg_print("\n");
8000370a:	fe cc 0a 0e 	sub	r12,pc,2574
8000370e:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
80003712:	fe 3d fd cc 	sub	sp,-564
80003716:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000371a:	00 00       	add	r0,r0
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	2b b6       	sub	r6,-69

80003720 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003720:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003724:	1a 97       	mov	r7,sp
80003726:	21 7d       	sub	sp,92
80003728:	fe f6 04 a8 	ld.w	r6,pc[1192]
8000372c:	1e 26       	rsub	r6,pc
8000372e:	ee c5 ff ec 	sub	r5,r7,-20
80003732:	ef 4c ff b8 	st.w	r7[-72],r12
80003736:	ef 4a ff b0 	st.w	r7[-80],r10
8000373a:	ef 49 ff ac 	st.w	r7[-84],r9
8000373e:	ef 48 ff a8 	st.w	r7[-88],r8
80003742:	6a 68       	ld.w	r8,r5[0x18]
80003744:	16 99       	mov	r9,r11
80003746:	ef 69 ff b4 	st.b	r7[-76],r9
8000374a:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
8000374e:	ea c8 ff f4 	sub	r8,r5,-12
80003752:	0a 9b       	mov	r11,r5
80003754:	10 9c       	mov	r12,r8
80003756:	fe b0 f8 59 	rcall	80002808 <scalar_product>
8000375a:	18 98       	mov	r8,r12
8000375c:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003760:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003764:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003768:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000376c:	ee fa ff b0 	ld.w	r10,r7[-80]
80003770:	ee f8 ff b0 	ld.w	r8,r7[-80]
80003774:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003778:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
8000377c:	ea c8 ff f4 	sub	r8,r5,-12
80003780:	10 9c       	mov	r12,r8
80003782:	fe b0 fa 13 	rcall	80002ba8 <vector_norm_sqr>
80003786:	18 98       	mov	r8,r12
80003788:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000378c:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003790:	30 18       	mov	r8,1
80003792:	ee fa ff dc 	ld.w	r10,r7[-36]
80003796:	30 09       	mov	r9,0
80003798:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000379c:	e0 8c 00 03 	brvs	800037a2 <linearProgram1+0x82>
800037a0:	c0 25       	brlt	800037a4 <linearProgram1+0x84>
800037a2:	30 08       	mov	r8,0
800037a4:	5c 58       	castu.b	r8
800037a6:	c0 40       	breq	800037ae <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800037a8:	30 08       	mov	r8,0
800037aa:	e0 8f 02 0e 	bral	80003bc6 <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800037ae:	ee fc ff dc 	ld.w	r12,r7[-36]
800037b2:	fe b0 f9 91 	rcall	80002ad4 <fast_sqrt>
800037b6:	18 98       	mov	r8,r12
800037b8:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800037bc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037c0:	10 99       	mov	r9,r8
800037c2:	ee 19 80 00 	eorh	r9,0x8000
800037c6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037ca:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037ce:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800037d2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800037d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037de:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800037e2:	30 08       	mov	r8,0
800037e4:	ef 68 ff ef 	st.b	r7[-17],r8
800037e8:	cb e8       	rjmp	80003964 <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800037ea:	30 08       	mov	r8,0
800037ec:	ef 68 ff d7 	st.b	r7[-41],r8
800037f0:	c2 48       	rjmp	80003838 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800037f2:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800037f6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800037fa:	12 98       	mov	r8,r9
800037fc:	a1 78       	lsl	r8,0x1
800037fe:	12 08       	add	r8,r9
80003800:	a3 78       	lsl	r8,0x3
80003802:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003806:	f2 08 00 08 	add	r8,r9,r8
8000380a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
8000380e:	2f d9       	sub	r9,-3
80003810:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003814:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003818:	2f d8       	sub	r8,-3
8000381a:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
8000381e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003822:	f4 08 15 02 	lsl	r8,r10,0x2
80003826:	ee 08 00 08 	add	r8,r7,r8
8000382a:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
8000382e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003832:	2f f8       	sub	r8,-1
80003834:	ef 68 ff d7 	st.b	r7[-41],r8
80003838:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000383c:	30 28       	mov	r8,2
8000383e:	f0 09 18 00 	cp.b	r9,r8
80003842:	fe 9a ff d8 	brle	800037f2 <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
80003846:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000384a:	12 98       	mov	r8,r9
8000384c:	a1 78       	lsl	r8,0x1
8000384e:	12 08       	add	r8,r9
80003850:	a3 78       	lsl	r8,0x3
80003852:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003856:	f2 08 00 08 	add	r8,r9,r8
8000385a:	10 99       	mov	r9,r8
8000385c:	ee c8 00 38 	sub	r8,r7,56
80003860:	12 9b       	mov	r11,r9
80003862:	10 9c       	mov	r12,r8
80003864:	fe b0 f7 d2 	rcall	80002808 <scalar_product>
80003868:	18 98       	mov	r8,r12
8000386a:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
8000386e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003872:	12 98       	mov	r8,r9
80003874:	a1 78       	lsl	r8,0x1
80003876:	12 08       	add	r8,r9
80003878:	a3 78       	lsl	r8,0x3
8000387a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000387e:	f2 08 00 08 	add	r8,r9,r8
80003882:	10 9b       	mov	r11,r8
80003884:	0a 9c       	mov	r12,r5
80003886:	fe b0 f7 c1 	rcall	80002808 <scalar_product>
8000388a:	18 98       	mov	r8,r12
8000388c:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003898:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000389c:	10 9c       	mov	r12,r8
8000389e:	f0 16 00 02 	mcall	r6[8]
800038a2:	14 98       	mov	r8,r10
800038a4:	16 99       	mov	r9,r11
800038a6:	30 03       	mov	r3,0
800038a8:	e0 6a 43 2d 	mov	r10,17197
800038ac:	ea 1a eb 1c 	orh	r10,0xeb1c
800038b0:	e0 6b 36 e2 	mov	r11,14050
800038b4:	ea 1b 3f 1a 	orh	r11,0x3f1a
800038b8:	f0 16 00 7d 	mcall	r6[500]
800038bc:	18 98       	mov	r8,r12
800038be:	58 08       	cp.w	r8,0
800038c0:	c0 20       	breq	800038c4 <linearProgram1+0x1a4>
800038c2:	30 13       	mov	r3,1
800038c4:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800038c8:	c1 00       	breq	800038e8 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800038ca:	30 18       	mov	r8,1
800038cc:	ee fa ff f0 	ld.w	r10,r7[-16]
800038d0:	30 09       	mov	r9,0
800038d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038d6:	e0 8c 00 04 	brvs	800038de <linearProgram1+0x1be>
800038da:	e0 89 00 03 	brgt	800038e0 <linearProgram1+0x1c0>
800038de:	30 08       	mov	r8,0
800038e0:	5c 58       	castu.b	r8
800038e2:	c3 b0       	breq	80003958 <linearProgram1+0x238>
			{
				return false;
800038e4:	30 08       	mov	r8,0
800038e6:	c7 09       	rjmp	80003bc6 <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800038e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800038ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800038f0:	f0 16 00 0a 	mcall	r6[40]
800038f4:	18 98       	mov	r8,r12
800038f6:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
800038fa:	30 18       	mov	r8,1
800038fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80003900:	30 09       	mov	r9,0
80003902:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003906:	e0 8c 00 03 	brvs	8000390c <linearProgram1+0x1ec>
8000390a:	c0 24       	brge	8000390e <linearProgram1+0x1ee>
8000390c:	30 08       	mov	r8,0
8000390e:	5c 58       	castu.b	r8
80003910:	c0 b0       	breq	80003926 <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003912:	ee fb ff f8 	ld.w	r11,r7[-8]
80003916:	ee fc ff e4 	ld.w	r12,r7[-28]
8000391a:	fe b0 f9 94 	rcall	80002c42 <f_max>
8000391e:	18 98       	mov	r8,r12
80003920:	ef 48 ff e4 	st.w	r7[-28],r8
80003924:	c0 a8       	rjmp	80003938 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003926:	ee fb ff f8 	ld.w	r11,r7[-8]
8000392a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000392e:	fe b0 f9 6b 	rcall	80002c04 <f_min>
80003932:	18 98       	mov	r8,r12
80003934:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003938:	30 18       	mov	r8,1
8000393a:	ee fa ff e4 	ld.w	r10,r7[-28]
8000393e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003942:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003946:	e0 8c 00 04 	brvs	8000394e <linearProgram1+0x22e>
8000394a:	e0 89 00 03 	brgt	80003950 <linearProgram1+0x230>
8000394e:	30 08       	mov	r8,0
80003950:	5c 58       	castu.b	r8
80003952:	c0 40       	breq	8000395a <linearProgram1+0x23a>
		{
			return false;
80003954:	30 08       	mov	r8,0
80003956:	c3 89       	rjmp	80003bc6 <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003958:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
8000395a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000395e:	2f f8       	sub	r8,-1
80003960:	ef 68 ff ef 	st.b	r7[-17],r8
80003964:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003968:	ef 38 ff b4 	ld.ub	r8,r7[-76]
8000396c:	f0 09 18 00 	cp.b	r9,r8
80003970:	fe 95 ff 3d 	brlt	800037ea <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003974:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003978:	30 08       	mov	r8,0
8000397a:	f0 09 18 00 	cp.b	r9,r8
8000397e:	c6 20       	breq	80003a42 <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003980:	0a 9b       	mov	r11,r5
80003982:	ee fc ff ac 	ld.w	r12,r7[-84]
80003986:	fe b0 f7 41 	rcall	80002808 <scalar_product>
8000398a:	18 9a       	mov	r10,r12
8000398c:	30 18       	mov	r8,1
8000398e:	30 09       	mov	r9,0
80003990:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003994:	e0 8c 00 04 	brvs	8000399c <linearProgram1+0x27c>
80003998:	e0 89 00 03 	brgt	8000399e <linearProgram1+0x27e>
8000399c:	30 08       	mov	r8,0
8000399e:	5c 58       	castu.b	r8
800039a0:	c2 90       	breq	800039f2 <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039a2:	30 08       	mov	r8,0
800039a4:	ef 68 ff d7 	st.b	r7[-41],r8
800039a8:	c1 d8       	rjmp	800039e2 <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
800039aa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039ae:	a3 68       	lsl	r8,0x2
800039b0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800039b4:	f2 08 00 08 	add	r8,r9,r8
800039b8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039bc:	2f d9       	sub	r9,-3
800039be:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800039c2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039c6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
800039ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800039ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800039d2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800039d6:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039d8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800039dc:	2f f8       	sub	r8,-1
800039de:	ef 68 ff d7 	st.b	r7[-41],r8
800039e2:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800039e6:	30 28       	mov	r8,2
800039e8:	f0 09 18 00 	cp.b	r9,r8
800039ec:	fe 9a ff df 	brle	800039aa <linearProgram1+0x28a>
800039f0:	ce a8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
800039f2:	30 08       	mov	r8,0
800039f4:	ef 68 ff d7 	st.b	r7[-41],r8
800039f8:	c1 d8       	rjmp	80003a32 <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
800039fa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039fe:	a3 68       	lsl	r8,0x2
80003a00:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003a04:	f2 08 00 08 	add	r8,r9,r8
80003a08:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a0c:	2f d9       	sub	r9,-3
80003a0e:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003a12:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a16:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003a1a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003a1e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003a22:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003a26:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003a28:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a2c:	2f f8       	sub	r8,-1
80003a2e:	ef 68 ff d7 	st.b	r7[-41],r8
80003a32:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a36:	30 28       	mov	r8,2
80003a38:	f0 09 18 00 	cp.b	r9,r8
80003a3c:	fe 9a ff df 	brle	800039fa <linearProgram1+0x2da>
80003a40:	cc 28       	rjmp	80003bc4 <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a42:	30 08       	mov	r8,0
80003a44:	ef 68 ff d7 	st.b	r7[-41],r8
80003a48:	c1 c8       	rjmp	80003a80 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003a4a:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003a4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a52:	a3 69       	lsl	r9,0x2
80003a54:	ee fa ff ac 	ld.w	r10,r7[-84]
80003a58:	f4 09 00 09 	add	r9,r10,r9
80003a5c:	72 0a       	ld.w	r10,r9[0x0]
80003a5e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a62:	2f d9       	sub	r9,-3
80003a64:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003a68:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003a6c:	a3 68       	lsl	r8,0x2
80003a6e:	ee 08 00 08 	add	r8,r7,r8
80003a72:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a76:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a7a:	2f f8       	sub	r8,-1
80003a7c:	ef 68 ff d7 	st.b	r7[-41],r8
80003a80:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 18 00 	cp.b	r9,r8
80003a8a:	fe 9a ff e0 	brle	80003a4a <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003a8e:	ee c8 00 44 	sub	r8,r7,68
80003a92:	10 9b       	mov	r11,r8
80003a94:	0a 9c       	mov	r12,r5
80003a96:	fe b0 f6 b9 	rcall	80002808 <scalar_product>
80003a9a:	18 98       	mov	r8,r12
80003a9c:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003aa0:	30 18       	mov	r8,1
80003aa2:	ee fa ff fc 	ld.w	r10,r7[-4]
80003aa6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003aaa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003aae:	e0 8c 00 03 	brvs	80003ab4 <linearProgram1+0x394>
80003ab2:	c0 25       	brlt	80003ab6 <linearProgram1+0x396>
80003ab4:	30 08       	mov	r8,0
80003ab6:	5c 58       	castu.b	r8
80003ab8:	c2 90       	breq	80003b0a <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003aba:	30 08       	mov	r8,0
80003abc:	ef 68 ff d7 	st.b	r7[-41],r8
80003ac0:	c1 d8       	rjmp	80003afa <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003ac2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ac6:	a3 68       	lsl	r8,0x2
80003ac8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003acc:	f2 08 00 08 	add	r8,r9,r8
80003ad0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ad4:	2f d9       	sub	r9,-3
80003ad6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003ada:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ade:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ae2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003ae6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003aea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003aee:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003af0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003af4:	2f f8       	sub	r8,-1
80003af6:	ef 68 ff d7 	st.b	r7[-41],r8
80003afa:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003afe:	30 28       	mov	r8,2
80003b00:	f0 09 18 00 	cp.b	r9,r8
80003b04:	fe 9a ff df 	brle	80003ac2 <linearProgram1+0x3a2>
80003b08:	c5 e8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003b0a:	30 18       	mov	r8,1
80003b0c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003b10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b14:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003b18:	e0 8c 00 04 	brvs	80003b20 <linearProgram1+0x400>
80003b1c:	e0 89 00 03 	brgt	80003b22 <linearProgram1+0x402>
80003b20:	30 08       	mov	r8,0
80003b22:	5c 58       	castu.b	r8
80003b24:	c2 90       	breq	80003b76 <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003b26:	30 08       	mov	r8,0
80003b28:	ef 68 ff d7 	st.b	r7[-41],r8
80003b2c:	c1 d8       	rjmp	80003b66 <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003b2e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b32:	a3 68       	lsl	r8,0x2
80003b34:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b38:	f2 08 00 08 	add	r8,r9,r8
80003b3c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b40:	2f d9       	sub	r9,-3
80003b42:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b46:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b4a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b4e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b52:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b56:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b5a:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003b5c:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b60:	2f f8       	sub	r8,-1
80003b62:	ef 68 ff d7 	st.b	r7[-41],r8
80003b66:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b6a:	30 28       	mov	r8,2
80003b6c:	f0 09 18 00 	cp.b	r9,r8
80003b70:	fe 9a ff df 	brle	80003b2e <linearProgram1+0x40e>
80003b74:	c2 88       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003b76:	30 08       	mov	r8,0
80003b78:	ef 68 ff d7 	st.b	r7[-41],r8
80003b7c:	c1 d8       	rjmp	80003bb6 <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003b7e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b82:	a3 68       	lsl	r8,0x2
80003b84:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b88:	f2 08 00 08 	add	r8,r9,r8
80003b8c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b90:	2f d9       	sub	r9,-3
80003b92:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b96:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b9a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ba2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ba6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003baa:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003bac:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bb0:	2f f8       	sub	r8,-1
80003bb2:	ef 68 ff d7 	st.b	r7[-41],r8
80003bb6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003bba:	30 28       	mov	r8,2
80003bbc:	f0 09 18 00 	cp.b	r9,r8
80003bc0:	fe 9a ff df 	brle	80003b7e <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003bc4:	30 18       	mov	r8,1
}
80003bc6:	10 9c       	mov	r12,r8
80003bc8:	2e 9d       	sub	sp,-92
80003bca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003bce:	00 00       	add	r0,r0
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	35 b0       	mov	r0,91

80003bd4 <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003bd4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003bd8:	1a 97       	mov	r7,sp
80003bda:	fa cd 00 cc 	sub	sp,sp,204
80003bde:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003be2:	1e 26       	rsub	r6,pc
80003be4:	ee ce ff ec 	sub	lr,r7,-20
80003be8:	ef 4c ff 48 	st.w	r7[-184],r12
80003bec:	ef 4a ff 40 	st.w	r7[-192],r10
80003bf0:	ef 49 ff 3c 	st.w	r7[-196],r9
80003bf4:	ef 48 ff 38 	st.w	r7[-200],r8
80003bf8:	7c 08       	ld.w	r8,lr[0x0]
80003bfa:	16 99       	mov	r9,r11
80003bfc:	ef 69 ff 44 	st.b	r7[-188],r9
80003c00:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003c04:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c08:	12 98       	mov	r8,r9
80003c0a:	a1 78       	lsl	r8,0x1
80003c0c:	12 08       	add	r8,r9
80003c0e:	a3 78       	lsl	r8,0x3
80003c10:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c14:	f2 08 00 08 	add	r8,r9,r8
80003c18:	10 9a       	mov	r10,r8
80003c1a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c1e:	12 98       	mov	r8,r9
80003c20:	a1 78       	lsl	r8,0x1
80003c22:	12 08       	add	r8,r9
80003c24:	a3 78       	lsl	r8,0x3
80003c26:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c2a:	f2 08 00 08 	add	r8,r9,r8
80003c2e:	2f 48       	sub	r8,-12
80003c30:	14 9b       	mov	r11,r10
80003c32:	10 9c       	mov	r12,r8
80003c34:	fe b0 f5 ea 	rcall	80002808 <scalar_product>
80003c38:	18 98       	mov	r8,r12
80003c3a:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003c3e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003c42:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003c46:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c4a:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003c4e:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003c52:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003c56:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c5a:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003c5e:	30 18       	mov	r8,1
80003c60:	ee fa ff cc 	ld.w	r10,r7[-52]
80003c64:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c68:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c6c:	e0 8c 00 04 	brvs	80003c74 <linearProgram2+0xa0>
80003c70:	e0 89 00 03 	brgt	80003c76 <linearProgram2+0xa2>
80003c74:	30 08       	mov	r8,0
80003c76:	5c 58       	castu.b	r8
80003c78:	c0 40       	breq	80003c80 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003c7a:	30 08       	mov	r8,0
80003c7c:	e0 8f 04 64 	bral	80004544 <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003c80:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c84:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003c88:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003c8c:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003c90:	30 08       	mov	r8,0
80003c92:	ef 68 ff c7 	st.b	r7[-57],r8
80003c96:	c2 08       	rjmp	80003cd6 <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003c98:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003c9c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ca0:	12 98       	mov	r8,r9
80003ca2:	a1 78       	lsl	r8,0x1
80003ca4:	12 08       	add	r8,r9
80003ca6:	a3 78       	lsl	r8,0x3
80003ca8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003cac:	f2 08 00 08 	add	r8,r9,r8
80003cb0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003cb4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003cb8:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003cbc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003cc0:	f4 08 15 02 	lsl	r8,r10,0x2
80003cc4:	ee 08 00 08 	add	r8,r7,r8
80003cc8:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003ccc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003cd0:	2f f8       	sub	r8,-1
80003cd2:	ef 68 ff c7 	st.b	r7[-57],r8
80003cd6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003cda:	30 28       	mov	r8,2
80003cdc:	f0 09 18 00 	cp.b	r9,r8
80003ce0:	fe 9a ff dc 	brle	80003c98 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003ce4:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003ce8:	30 08       	mov	r8,0
80003cea:	f0 09 18 00 	cp.b	r9,r8
80003cee:	e0 80 00 c0 	breq	80003e6e <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003cf2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003cf6:	12 98       	mov	r8,r9
80003cf8:	a1 78       	lsl	r8,0x1
80003cfa:	12 08       	add	r8,r9
80003cfc:	a3 78       	lsl	r8,0x3
80003cfe:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d02:	f2 08 00 08 	add	r8,r9,r8
80003d06:	10 9b       	mov	r11,r8
80003d08:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003d0c:	fe b0 f5 7e 	rcall	80002808 <scalar_product>
80003d10:	18 98       	mov	r8,r12
80003d12:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003d16:	30 08       	mov	r8,0
80003d18:	ef 68 ff c7 	st.b	r7[-57],r8
80003d1c:	c2 a8       	rjmp	80003d70 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003d1e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003d22:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003d26:	a3 68       	lsl	r8,0x2
80003d28:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003d2c:	f2 08 00 08 	add	r8,r9,r8
80003d30:	70 0b       	ld.w	r11,r8[0x0]
80003d32:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d36:	12 98       	mov	r8,r9
80003d38:	a1 78       	lsl	r8,0x1
80003d3a:	12 08       	add	r8,r9
80003d3c:	a3 78       	lsl	r8,0x3
80003d3e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d42:	f2 08 00 08 	add	r8,r9,r8
80003d46:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003d4a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d4e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003d52:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d56:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003d5a:	f4 08 15 02 	lsl	r8,r10,0x2
80003d5e:	ee 08 00 08 	add	r8,r7,r8
80003d62:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003d66:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003d6a:	2f f8       	sub	r8,-1
80003d6c:	ef 68 ff c7 	st.b	r7[-57],r8
80003d70:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003d74:	30 28       	mov	r8,2
80003d76:	f0 09 18 00 	cp.b	r9,r8
80003d7a:	fe 9a ff d2 	brle	80003d1e <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003d7e:	ee c8 00 54 	sub	r8,r7,84
80003d82:	10 9c       	mov	r12,r8
80003d84:	fe b0 f7 12 	rcall	80002ba8 <vector_norm_sqr>
80003d88:	18 98       	mov	r8,r12
80003d8a:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003d8e:	ee fc ff e0 	ld.w	r12,r7[-32]
80003d92:	f0 16 00 02 	mcall	r6[8]
80003d96:	14 98       	mov	r8,r10
80003d98:	16 99       	mov	r9,r11
80003d9a:	30 05       	mov	r5,0
80003d9c:	e0 6a 43 2d 	mov	r10,17197
80003da0:	ea 1a eb 1c 	orh	r10,0xeb1c
80003da4:	e0 6b 36 e2 	mov	r11,14050
80003da8:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003dac:	f0 16 00 7d 	mcall	r6[500]
80003db0:	18 98       	mov	r8,r12
80003db2:	58 08       	cp.w	r8,0
80003db4:	c0 20       	breq	80003db8 <linearProgram2+0x1e4>
80003db6:	30 15       	mov	r5,1
80003db8:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003dbc:	c2 00       	breq	80003dfc <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003dbe:	30 08       	mov	r8,0
80003dc0:	ef 68 ff c7 	st.b	r7[-57],r8
80003dc4:	c1 48       	rjmp	80003dec <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003dc6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dca:	a3 68       	lsl	r8,0x2
80003dcc:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003dd0:	10 09       	add	r9,r8
80003dd2:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dd6:	a3 68       	lsl	r8,0x2
80003dd8:	ee 08 00 08 	add	r8,r7,r8
80003ddc:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003de0:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003de2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003de6:	2f f8       	sub	r8,-1
80003de8:	ef 68 ff c7 	st.b	r7[-57],r8
80003dec:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003df0:	30 28       	mov	r8,2
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	fe 9a ff e8 	brle	80003dc6 <linearProgram2+0x1f2>
80003dfa:	c2 d9       	rjmp	80004054 <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003dfc:	ee fb ff e0 	ld.w	r11,r7[-32]
80003e00:	ee fc ff d4 	ld.w	r12,r7[-44]
80003e04:	f0 16 00 0a 	mcall	r6[40]
80003e08:	18 98       	mov	r8,r12
80003e0a:	10 9c       	mov	r12,r8
80003e0c:	fe b0 f6 64 	rcall	80002ad4 <fast_sqrt>
80003e10:	18 98       	mov	r8,r12
80003e12:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003e16:	30 08       	mov	r8,0
80003e18:	ef 68 ff c7 	st.b	r7[-57],r8
80003e1c:	c2 18       	rjmp	80003e5e <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003e1e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e22:	a3 68       	lsl	r8,0x2
80003e24:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003e28:	10 09       	add	r9,r8
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee 08 00 08 	add	r8,r7,r8
80003e34:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003e38:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e3c:	a3 68       	lsl	r8,0x2
80003e3e:	ee 08 00 08 	add	r8,r7,r8
80003e42:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003e46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003e4a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003e4e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003e52:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003e54:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e58:	2f f8       	sub	r8,-1
80003e5a:	ef 68 ff c7 	st.b	r7[-57],r8
80003e5e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e62:	30 28       	mov	r8,2
80003e64:	f0 09 18 00 	cp.b	r9,r8
80003e68:	fe 9a ff db 	brle	80003e1e <linearProgram2+0x24a>
80003e6c:	cf 48       	rjmp	80004054 <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003e6e:	30 08       	mov	r8,0
80003e70:	ef 68 ff c7 	st.b	r7[-57],r8
80003e74:	c2 78       	rjmp	80003ec2 <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003e76:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e7a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e7e:	12 98       	mov	r8,r9
80003e80:	a1 78       	lsl	r8,0x1
80003e82:	12 08       	add	r8,r9
80003e84:	a3 78       	lsl	r8,0x3
80003e86:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e8a:	f2 08 00 08 	add	r8,r9,r8
80003e8e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e92:	2f d9       	sub	r9,-3
80003e94:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e98:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e9c:	a3 68       	lsl	r8,0x2
80003e9e:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003ea2:	f6 08 00 08 	add	r8,r11,r8
80003ea6:	70 08       	ld.w	r8,r8[0x0]
80003ea8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003eac:	f4 08 15 02 	lsl	r8,r10,0x2
80003eb0:	ee 08 00 08 	add	r8,r7,r8
80003eb4:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003eb8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003ebc:	2f f8       	sub	r8,-1
80003ebe:	ef 68 ff c7 	st.b	r7[-57],r8
80003ec2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ec6:	30 28       	mov	r8,2
80003ec8:	f0 09 18 00 	cp.b	r9,r8
80003ecc:	fe 9a ff d5 	brle	80003e76 <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003ed0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ed4:	12 98       	mov	r8,r9
80003ed6:	a1 78       	lsl	r8,0x1
80003ed8:	12 08       	add	r8,r9
80003eda:	a3 78       	lsl	r8,0x3
80003edc:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003ee0:	f2 08 00 08 	add	r8,r9,r8
80003ee4:	10 99       	mov	r9,r8
80003ee6:	ee c8 00 60 	sub	r8,r7,96
80003eea:	12 9b       	mov	r11,r9
80003eec:	10 9c       	mov	r12,r8
80003eee:	fe b0 f4 8d 	rcall	80002808 <scalar_product>
80003ef2:	18 98       	mov	r8,r12
80003ef4:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80003ef8:	30 08       	mov	r8,0
80003efa:	ef 68 ff c7 	st.b	r7[-57],r8
80003efe:	c2 a8       	rjmp	80003f52 <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80003f00:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f04:	a3 68       	lsl	r8,0x2
80003f06:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f0a:	f2 08 00 0a 	add	r10,r9,r8
80003f0e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f12:	a3 68       	lsl	r8,0x2
80003f14:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003f18:	f2 08 00 08 	add	r8,r9,r8
80003f1c:	70 0b       	ld.w	r11,r8[0x0]
80003f1e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f22:	12 98       	mov	r8,r9
80003f24:	a1 78       	lsl	r8,0x1
80003f26:	12 08       	add	r8,r9
80003f28:	a3 78       	lsl	r8,0x3
80003f2a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f2e:	f2 08 00 08 	add	r8,r9,r8
80003f32:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003f3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003f3e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003f42:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
80003f46:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80003f48:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f4c:	2f f8       	sub	r8,-1
80003f4e:	ef 68 ff c7 	st.b	r7[-57],r8
80003f52:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f56:	30 28       	mov	r8,2
80003f58:	f0 09 18 00 	cp.b	r9,r8
80003f5c:	fe 9a ff d2 	brle	80003f00 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80003f60:	ee fc ff 38 	ld.w	r12,r7[-200]
80003f64:	fe b0 f6 22 	rcall	80002ba8 <vector_norm_sqr>
80003f68:	18 9a       	mov	r10,r12
80003f6a:	30 18       	mov	r8,1
80003f6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003f70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003f74:	e0 8c 00 04 	brvs	80003f7c <linearProgram2+0x3a8>
80003f78:	e0 89 00 03 	brgt	80003f7e <linearProgram2+0x3aa>
80003f7c:	30 08       	mov	r8,0
80003f7e:	5c 58       	castu.b	r8
80003f80:	c6 a0       	breq	80004054 <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
80003f82:	30 08       	mov	r8,0
80003f84:	ef 68 ff c7 	st.b	r7[-57],r8
80003f88:	c1 f8       	rjmp	80003fc6 <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80003f8a:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f8e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f92:	a3 68       	lsl	r8,0x2
80003f94:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f98:	f2 08 00 08 	add	r8,r9,r8
80003f9c:	70 09       	ld.w	r9,r8[0x0]
80003f9e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa2:	a3 68       	lsl	r8,0x2
80003fa4:	ee 08 00 08 	add	r8,r7,r8
80003fa8:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003fac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb0:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb4:	ee 08 00 08 	add	r8,r7,r8
80003fb8:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
80003fbc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc0:	2f f8       	sub	r8,-1
80003fc2:	ef 68 ff c7 	st.b	r7[-57],r8
80003fc6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fca:	30 28       	mov	r8,2
80003fcc:	f0 09 18 00 	cp.b	r9,r8
80003fd0:	fe 9a ff dd 	brle	80003f8a <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
80003fd4:	ee c8 00 6c 	sub	r8,r7,108
80003fd8:	10 9c       	mov	r12,r8
80003fda:	fe b0 f5 e7 	rcall	80002ba8 <vector_norm_sqr>
80003fde:	18 98       	mov	r8,r12
80003fe0:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
80003fe4:	ee fb ff ec 	ld.w	r11,r7[-20]
80003fe8:	ee fc ff d4 	ld.w	r12,r7[-44]
80003fec:	f0 16 00 0a 	mcall	r6[40]
80003ff0:	18 98       	mov	r8,r12
80003ff2:	10 9c       	mov	r12,r8
80003ff4:	fe b0 f5 70 	rcall	80002ad4 <fast_sqrt>
80003ff8:	18 98       	mov	r8,r12
80003ffa:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80003ffe:	30 08       	mov	r8,0
80004000:	ef 68 ff c7 	st.b	r7[-57],r8
80004004:	c2 18       	rjmp	80004046 <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
80004006:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400a:	a3 68       	lsl	r8,0x2
8000400c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004010:	10 09       	add	r9,r8
80004012:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004016:	a3 68       	lsl	r8,0x2
80004018:	ee 08 00 08 	add	r8,r7,r8
8000401c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004020:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004024:	a3 68       	lsl	r8,0x2
80004026:	ee 08 00 08 	add	r8,r7,r8
8000402a:	f0 fb ff 94 	ld.w	r11,r8[-108]
8000402e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004032:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004036:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000403a:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
8000403c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004040:	2f f8       	sub	r8,-1
80004042:	ef 68 ff c7 	st.b	r7[-57],r8
80004046:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000404a:	30 28       	mov	r8,2
8000404c:	f0 09 18 00 	cp.b	r9,r8
80004050:	fe 9a ff db 	brle	80004006 <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004054:	30 08       	mov	r8,0
80004056:	ef 68 ff db 	st.b	r7[-37],r8
8000405a:	e0 8f 02 6c 	bral	80004532 <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
8000405e:	30 08       	mov	r8,0
80004060:	ef 68 ff c7 	st.b	r7[-57],r8
80004064:	c2 78       	rjmp	800040b2 <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
80004066:	ef 2a ff c7 	ld.sb	r10,r7[-57]
8000406a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000406e:	12 98       	mov	r8,r9
80004070:	a1 78       	lsl	r8,0x1
80004072:	12 08       	add	r8,r9
80004074:	a3 78       	lsl	r8,0x3
80004076:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000407a:	f2 08 00 08 	add	r8,r9,r8
8000407e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004082:	2f d9       	sub	r9,-3
80004084:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004088:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000408c:	a3 68       	lsl	r8,0x2
8000408e:	ee fb ff 38 	ld.w	r11,r7[-200]
80004092:	f6 08 00 08 	add	r8,r11,r8
80004096:	70 08       	ld.w	r8,r8[0x0]
80004098:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000409c:	f4 08 15 02 	lsl	r8,r10,0x2
800040a0:	ee 08 00 08 	add	r8,r7,r8
800040a4:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800040a8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040ac:	2f f8       	sub	r8,-1
800040ae:	ef 68 ff c7 	st.b	r7[-57],r8
800040b2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040b6:	30 28       	mov	r8,2
800040b8:	f0 09 18 00 	cp.b	r9,r8
800040bc:	fe 9a ff d5 	brle	80004066 <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800040c0:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040c4:	12 98       	mov	r8,r9
800040c6:	a1 78       	lsl	r8,0x1
800040c8:	12 08       	add	r8,r9
800040ca:	a3 78       	lsl	r8,0x3
800040cc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800040d0:	f2 08 00 08 	add	r8,r9,r8
800040d4:	ee c9 00 78 	sub	r9,r7,120
800040d8:	12 9b       	mov	r11,r9
800040da:	10 9c       	mov	r12,r8
800040dc:	fe b0 f3 96 	rcall	80002808 <scalar_product>
800040e0:	18 9a       	mov	r10,r12
800040e2:	30 18       	mov	r8,1
800040e4:	30 09       	mov	r9,0
800040e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800040ea:	e0 8c 00 04 	brvs	800040f2 <linearProgram2+0x51e>
800040ee:	e0 89 00 03 	brgt	800040f4 <linearProgram2+0x520>
800040f2:	30 08       	mov	r8,0
800040f4:	5c 58       	castu.b	r8
800040f6:	e0 80 02 19 	breq	80004528 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
800040fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040fe:	12 98       	mov	r8,r9
80004100:	a1 78       	lsl	r8,0x1
80004102:	12 08       	add	r8,r9
80004104:	a3 78       	lsl	r8,0x3
80004106:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000410a:	f2 08 00 08 	add	r8,r9,r8
8000410e:	70 1a       	ld.w	r10,r8[0x4]
80004110:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004114:	12 98       	mov	r8,r9
80004116:	a1 78       	lsl	r8,0x1
80004118:	12 08       	add	r8,r9
8000411a:	a3 78       	lsl	r8,0x3
8000411c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004120:	f2 08 00 08 	add	r8,r9,r8
80004124:	70 28       	ld.w	r8,r8[0x8]
80004126:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000412a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000412e:	12 98       	mov	r8,r9
80004130:	a1 78       	lsl	r8,0x1
80004132:	12 08       	add	r8,r9
80004134:	a3 78       	lsl	r8,0x3
80004136:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000413a:	f2 08 00 08 	add	r8,r9,r8
8000413e:	70 2b       	ld.w	r11,r8[0x8]
80004140:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004144:	12 98       	mov	r8,r9
80004146:	a1 78       	lsl	r8,0x1
80004148:	12 08       	add	r8,r9
8000414a:	a3 78       	lsl	r8,0x3
8000414c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004150:	f2 08 00 08 	add	r8,r9,r8
80004154:	70 18       	ld.w	r8,r8[0x4]
80004156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000415a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000415e:	ef 48 ff 7c 	st.w	r7[-132],r8
80004162:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004166:	12 98       	mov	r8,r9
80004168:	a1 78       	lsl	r8,0x1
8000416a:	12 08       	add	r8,r9
8000416c:	a3 78       	lsl	r8,0x3
8000416e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004172:	f2 08 00 08 	add	r8,r9,r8
80004176:	70 2a       	ld.w	r10,r8[0x8]
80004178:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000417c:	12 98       	mov	r8,r9
8000417e:	a1 78       	lsl	r8,0x1
80004180:	12 08       	add	r8,r9
80004182:	a3 78       	lsl	r8,0x3
80004184:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004188:	f2 08 00 08 	add	r8,r9,r8
8000418c:	70 08       	ld.w	r8,r8[0x0]
8000418e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004192:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004196:	12 98       	mov	r8,r9
80004198:	a1 78       	lsl	r8,0x1
8000419a:	12 08       	add	r8,r9
8000419c:	a3 78       	lsl	r8,0x3
8000419e:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041a2:	f2 08 00 08 	add	r8,r9,r8
800041a6:	70 0b       	ld.w	r11,r8[0x0]
800041a8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041ac:	12 98       	mov	r8,r9
800041ae:	a1 78       	lsl	r8,0x1
800041b0:	12 08       	add	r8,r9
800041b2:	a3 78       	lsl	r8,0x3
800041b4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041b8:	f2 08 00 08 	add	r8,r9,r8
800041bc:	70 28       	ld.w	r8,r8[0x8]
800041be:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800041c2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800041c6:	ef 48 ff 80 	st.w	r7[-128],r8
800041ca:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041ce:	12 98       	mov	r8,r9
800041d0:	a1 78       	lsl	r8,0x1
800041d2:	12 08       	add	r8,r9
800041d4:	a3 78       	lsl	r8,0x3
800041d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041da:	f2 08 00 08 	add	r8,r9,r8
800041de:	70 0a       	ld.w	r10,r8[0x0]
800041e0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041e4:	12 98       	mov	r8,r9
800041e6:	a1 78       	lsl	r8,0x1
800041e8:	12 08       	add	r8,r9
800041ea:	a3 78       	lsl	r8,0x3
800041ec:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041f0:	f2 08 00 08 	add	r8,r9,r8
800041f4:	70 18       	ld.w	r8,r8[0x4]
800041f6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800041fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041fe:	12 98       	mov	r8,r9
80004200:	a1 78       	lsl	r8,0x1
80004202:	12 08       	add	r8,r9
80004204:	a3 78       	lsl	r8,0x3
80004206:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000420a:	f2 08 00 08 	add	r8,r9,r8
8000420e:	70 1b       	ld.w	r11,r8[0x4]
80004210:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004214:	12 98       	mov	r8,r9
80004216:	a1 78       	lsl	r8,0x1
80004218:	12 08       	add	r8,r9
8000421a:	a3 78       	lsl	r8,0x3
8000421c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004220:	f2 08 00 08 	add	r8,r9,r8
80004224:	70 08       	ld.w	r8,r8[0x0]
80004226:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000422a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000422e:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
80004232:	ee c8 00 84 	sub	r8,r7,132
80004236:	10 9c       	mov	r12,r8
80004238:	fe b0 f4 b8 	rcall	80002ba8 <vector_norm_sqr>
8000423c:	18 98       	mov	r8,r12
8000423e:	10 9c       	mov	r12,r8
80004240:	f0 16 00 02 	mcall	r6[8]
80004244:	14 98       	mov	r8,r10
80004246:	16 99       	mov	r9,r11
80004248:	30 05       	mov	r5,0
8000424a:	e0 6a 43 2d 	mov	r10,17197
8000424e:	ea 1a eb 1c 	orh	r10,0xeb1c
80004252:	e0 6b 36 e2 	mov	r11,14050
80004256:	ea 1b 3f 1a 	orh	r11,0x3f1a
8000425a:	f0 16 00 7d 	mcall	r6[500]
8000425e:	18 98       	mov	r8,r12
80004260:	58 08       	cp.w	r8,0
80004262:	c0 20       	breq	80004266 <linearProgram2+0x692>
80004264:	30 15       	mov	r5,1
80004266:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000426a:	c0 30       	breq	80004270 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
8000426c:	30 08       	mov	r8,0
8000426e:	c6 b9       	rjmp	80004544 <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004270:	ee c8 00 84 	sub	r8,r7,132
80004274:	10 9c       	mov	r12,r8
80004276:	fe b0 f4 b1 	rcall	80002bd8 <vector_norm>
8000427a:	18 98       	mov	r8,r12
8000427c:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004280:	30 08       	mov	r8,0
80004282:	ef 68 ff c7 	st.b	r7[-57],r8
80004286:	c1 c8       	rjmp	800042be <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004288:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000428c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004290:	a3 68       	lsl	r8,0x2
80004292:	ee 08 00 08 	add	r8,r7,r8
80004296:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
8000429a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000429e:	10 9c       	mov	r12,r8
800042a0:	f0 16 00 0a 	mcall	r6[40]
800042a4:	18 98       	mov	r8,r12
800042a6:	10 99       	mov	r9,r8
800042a8:	ea 08 15 02 	lsl	r8,r5,0x2
800042ac:	ee 08 00 08 	add	r8,r7,r8
800042b0:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800042b4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800042b8:	2f f8       	sub	r8,-1
800042ba:	ef 68 ff c7 	st.b	r7[-57],r8
800042be:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800042c2:	30 28       	mov	r8,2
800042c4:	f0 09 18 00 	cp.b	r9,r8
800042c8:	fe 9a ff e0 	brle	80004288 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800042cc:	ee fa ff 68 	ld.w	r10,r7[-152]
800042d0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042d4:	12 98       	mov	r8,r9
800042d6:	a1 78       	lsl	r8,0x1
800042d8:	12 08       	add	r8,r9
800042da:	a3 78       	lsl	r8,0x3
800042dc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e0:	f2 08 00 08 	add	r8,r9,r8
800042e4:	70 28       	ld.w	r8,r8[0x8]
800042e6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800042ea:	ee fb ff 6c 	ld.w	r11,r7[-148]
800042ee:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042f2:	12 98       	mov	r8,r9
800042f4:	a1 78       	lsl	r8,0x1
800042f6:	12 08       	add	r8,r9
800042f8:	a3 78       	lsl	r8,0x3
800042fa:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042fe:	f2 08 00 08 	add	r8,r9,r8
80004302:	70 18       	ld.w	r8,r8[0x4]
80004304:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004308:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000430c:	ef 48 ff 58 	st.w	r7[-168],r8
80004310:	ee fa ff 6c 	ld.w	r10,r7[-148]
80004314:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004318:	12 98       	mov	r8,r9
8000431a:	a1 78       	lsl	r8,0x1
8000431c:	12 08       	add	r8,r9
8000431e:	a3 78       	lsl	r8,0x3
80004320:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004324:	f2 08 00 08 	add	r8,r9,r8
80004328:	70 08       	ld.w	r8,r8[0x0]
8000432a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000432e:	ee fb ff 64 	ld.w	r11,r7[-156]
80004332:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004336:	12 98       	mov	r8,r9
80004338:	a1 78       	lsl	r8,0x1
8000433a:	12 08       	add	r8,r9
8000433c:	a3 78       	lsl	r8,0x3
8000433e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004342:	f2 08 00 08 	add	r8,r9,r8
80004346:	70 28       	ld.w	r8,r8[0x8]
80004348:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000434c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004350:	ef 48 ff 5c 	st.w	r7[-164],r8
80004354:	ee fa ff 64 	ld.w	r10,r7[-156]
80004358:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000435c:	12 98       	mov	r8,r9
8000435e:	a1 78       	lsl	r8,0x1
80004360:	12 08       	add	r8,r9
80004362:	a3 78       	lsl	r8,0x3
80004364:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004368:	f2 08 00 08 	add	r8,r9,r8
8000436c:	70 18       	ld.w	r8,r8[0x4]
8000436e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004372:	ee fb ff 68 	ld.w	r11,r7[-152]
80004376:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000437a:	12 98       	mov	r8,r9
8000437c:	a1 78       	lsl	r8,0x1
8000437e:	12 08       	add	r8,r9
80004380:	a3 78       	lsl	r8,0x3
80004382:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004386:	f2 08 00 08 	add	r8,r9,r8
8000438a:	70 08       	ld.w	r8,r8[0x0]
8000438c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004390:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004394:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
80004398:	30 08       	mov	r8,0
8000439a:	ef 68 ff c7 	st.b	r7[-57],r8
8000439e:	c2 e8       	rjmp	800043fa <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800043a0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800043a4:	ef 29 ff db 	ld.sb	r9,r7[-37]
800043a8:	12 98       	mov	r8,r9
800043aa:	a1 78       	lsl	r8,0x1
800043ac:	12 08       	add	r8,r9
800043ae:	a3 78       	lsl	r8,0x3
800043b0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043b4:	f2 08 00 08 	add	r8,r9,r8
800043b8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043bc:	2f d9       	sub	r9,-3
800043be:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800043c2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043c6:	12 98       	mov	r8,r9
800043c8:	a1 78       	lsl	r8,0x1
800043ca:	12 08       	add	r8,r9
800043cc:	a3 78       	lsl	r8,0x3
800043ce:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043d2:	f2 08 00 08 	add	r8,r9,r8
800043d6:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043da:	2f d9       	sub	r9,-3
800043dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800043e0:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800043e4:	f4 08 15 02 	lsl	r8,r10,0x2
800043e8:	ee 08 00 08 	add	r8,r7,r8
800043ec:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800043f0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043f4:	2f f8       	sub	r8,-1
800043f6:	ef 68 ff c7 	st.b	r7[-57],r8
800043fa:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043fe:	30 28       	mov	r8,2
80004400:	f0 09 18 00 	cp.b	r9,r8
80004404:	fe 9a ff ce 	brle	800043a0 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004408:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000440c:	12 98       	mov	r8,r9
8000440e:	a1 78       	lsl	r8,0x1
80004410:	12 08       	add	r8,r9
80004412:	a3 78       	lsl	r8,0x3
80004414:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004418:	f2 08 00 08 	add	r8,r9,r8
8000441c:	10 99       	mov	r9,r8
8000441e:	ee c8 00 b4 	sub	r8,r7,180
80004422:	12 9b       	mov	r11,r9
80004424:	10 9c       	mov	r12,r8
80004426:	fe b0 f1 f1 	rcall	80002808 <scalar_product>
8000442a:	18 98       	mov	r8,r12
8000442c:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004430:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004434:	12 98       	mov	r8,r9
80004436:	a1 78       	lsl	r8,0x1
80004438:	12 08       	add	r8,r9
8000443a:	a3 78       	lsl	r8,0x3
8000443c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004440:	f2 08 00 08 	add	r8,r9,r8
80004444:	10 99       	mov	r9,r8
80004446:	ee c8 00 a8 	sub	r8,r7,168
8000444a:	12 9b       	mov	r11,r9
8000444c:	10 9c       	mov	r12,r8
8000444e:	fe b0 f1 dd 	rcall	80002808 <scalar_product>
80004452:	18 98       	mov	r8,r12
80004454:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004458:	30 08       	mov	r8,0
8000445a:	ef 68 ff c7 	st.b	r7[-57],r8
8000445e:	c3 18       	rjmp	800044c0 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004460:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004464:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004468:	12 98       	mov	r8,r9
8000446a:	a1 78       	lsl	r8,0x1
8000446c:	12 08       	add	r8,r9
8000446e:	a3 78       	lsl	r8,0x3
80004470:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004474:	f2 08 00 08 	add	r8,r9,r8
80004478:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000447c:	2f d9       	sub	r9,-3
8000447e:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004482:	ee fb ff fc 	ld.w	r11,r7[-4]
80004486:	ee fc ff f8 	ld.w	r12,r7[-8]
8000448a:	f0 16 00 0a 	mcall	r6[40]
8000448e:	18 98       	mov	r8,r12
80004490:	10 99       	mov	r9,r8
80004492:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004496:	a3 68       	lsl	r8,0x2
80004498:	ee 08 00 08 	add	r8,r7,r8
8000449c:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800044a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800044a4:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800044a8:	ea c8 ff fd 	sub	r8,r5,-3
800044ac:	a3 68       	lsl	r8,0x2
800044ae:	ee 08 00 08 	add	r8,r7,r8
800044b2:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800044b6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044ba:	2f f8       	sub	r8,-1
800044bc:	ef 68 ff c7 	st.b	r7[-57],r8
800044c0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800044c4:	30 28       	mov	r8,2
800044c6:	f0 09 18 00 	cp.b	r9,r8
800044ca:	fe 9a ff cb 	brle	80004460 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800044ce:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800044d2:	ef 2c ff db 	ld.sb	r12,r7[-37]
800044d6:	1a d8       	st.w	--sp,r8
800044d8:	20 6d       	sub	sp,24
800044da:	1a 98       	mov	r8,sp
800044dc:	10 9a       	mov	r10,r8
800044de:	ee cb 00 9c 	sub	r11,r7,156
800044e2:	f4 c8 00 00 	sub	r8,r10,0
800044e6:	f6 c9 00 00 	sub	r9,r11,0
800044ea:	72 0e       	ld.w	lr,r9[0x0]
800044ec:	91 0e       	st.w	r8[0x0],lr
800044ee:	72 1e       	ld.w	lr,r9[0x4]
800044f0:	91 1e       	st.w	r8[0x4],lr
800044f2:	72 2e       	ld.w	lr,r9[0x8]
800044f4:	91 2e       	st.w	r8[0x8],lr
800044f6:	72 39       	ld.w	r9,r9[0xc]
800044f8:	91 39       	st.w	r8[0xc],r9
800044fa:	f6 e8 00 10 	ld.d	r8,r11[16]
800044fe:	f4 e9 00 10 	st.d	r10[16],r8
80004502:	ee f8 ff 38 	ld.w	r8,r7[-200]
80004506:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000450a:	ee fa ff 40 	ld.w	r10,r7[-192]
8000450e:	18 9b       	mov	r11,r12
80004510:	ee fc ff 48 	ld.w	r12,r7[-184]
80004514:	f0 16 01 d0 	mcall	r6[1856]
80004518:	2f 9d       	sub	sp,-28
8000451a:	18 98       	mov	r8,r12
8000451c:	ec 18 00 01 	eorl	r8,0x1
80004520:	5c 58       	castu.b	r8
80004522:	c0 30       	breq	80004528 <linearProgram2+0x954>
			{
				return false;
80004524:	30 08       	mov	r8,0
80004526:	c0 f8       	rjmp	80004544 <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004528:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000452c:	2f f8       	sub	r8,-1
8000452e:	ef 68 ff db 	st.b	r7[-37],r8
80004532:	ef 39 ff db 	ld.ub	r9,r7[-37]
80004536:	ef 38 ff 44 	ld.ub	r8,r7[-188]
8000453a:	f0 09 18 00 	cp.b	r9,r8
8000453e:	fe 95 fd 90 	brlt	8000405e <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
80004542:	30 18       	mov	r8,1
}
80004544:	10 9c       	mov	r12,r8
80004546:	2c dd       	sub	sp,-204
80004548:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000454c:	80 00       	ld.sh	r0,r0[0x0]
8000454e:	3a 66       	mov	r6,-90

80004550 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004550:	eb cd 40 e0 	pushm	r5-r7,lr
80004554:	1a 97       	mov	r7,sp
80004556:	20 ed       	sub	sp,56
80004558:	fe f6 02 e0 	ld.w	r6,pc[736]
8000455c:	1e 26       	rsub	r6,pc
8000455e:	ef 4c ff d8 	st.w	r7[-40],r12
80004562:	ef 4b ff d4 	st.w	r7[-44],r11
80004566:	ef 4a ff d0 	st.w	r7[-48],r10
8000456a:	ef 49 ff cc 	st.w	r7[-52],r9
8000456e:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
80004572:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80004576:	30 08       	mov	r8,0
80004578:	f0 09 18 00 	cp.b	r9,r8
8000457c:	c3 40       	breq	800045e4 <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000457e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004582:	fe b0 f3 2b 	rcall	80002bd8 <vector_norm>
80004586:	18 98       	mov	r8,r12
80004588:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
8000458c:	30 08       	mov	r8,0
8000458e:	ef 68 ff f6 	st.b	r7[-10],r8
80004592:	c2 18       	rjmp	800045d4 <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004594:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004598:	a3 68       	lsl	r8,0x2
8000459a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000459e:	f2 08 00 05 	add	r5,r9,r8
800045a2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800045a6:	a3 68       	lsl	r8,0x2
800045a8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800045ac:	f2 08 00 08 	add	r8,r9,r8
800045b0:	70 08       	ld.w	r8,r8[0x0]
800045b2:	ee fb ff f8 	ld.w	r11,r7[-8]
800045b6:	10 9c       	mov	r12,r8
800045b8:	f0 16 00 0a 	mcall	r6[40]
800045bc:	18 98       	mov	r8,r12
800045be:	10 99       	mov	r9,r8
800045c0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045c8:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800045ca:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800045ce:	2f f8       	sub	r8,-1
800045d0:	ef 68 ff f6 	st.b	r7[-10],r8
800045d4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800045d8:	30 28       	mov	r8,2
800045da:	f0 09 18 00 	cp.b	r9,r8
800045de:	fe 9a ff db 	brle	80004594 <linearProgram3+0x44>
800045e2:	c6 98       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800045e4:	ee fc ff d4 	ld.w	r12,r7[-44]
800045e8:	fe b0 f2 e0 	rcall	80002ba8 <vector_norm_sqr>
800045ec:	18 9a       	mov	r10,r12
800045ee:	ee f9 ff d0 	ld.w	r9,r7[-48]
800045f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045f6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800045fa:	30 18       	mov	r8,1
800045fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004600:	e0 8c 00 04 	brvs	80004608 <linearProgram3+0xb8>
80004604:	e0 89 00 03 	brgt	8000460a <linearProgram3+0xba>
80004608:	30 08       	mov	r8,0
8000460a:	5c 58       	castu.b	r8
8000460c:	c3 40       	breq	80004674 <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000460e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004612:	fe b0 f2 e3 	rcall	80002bd8 <vector_norm>
80004616:	18 98       	mov	r8,r12
80004618:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
8000461c:	30 08       	mov	r8,0
8000461e:	ef 68 ff f6 	st.b	r7[-10],r8
80004622:	c2 18       	rjmp	80004664 <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004624:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004628:	a3 68       	lsl	r8,0x2
8000462a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000462e:	f2 08 00 05 	add	r5,r9,r8
80004632:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004636:	a3 68       	lsl	r8,0x2
80004638:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000463c:	f2 08 00 08 	add	r8,r9,r8
80004640:	70 08       	ld.w	r8,r8[0x0]
80004642:	ee fb ff fc 	ld.w	r11,r7[-4]
80004646:	10 9c       	mov	r12,r8
80004648:	f0 16 00 0a 	mcall	r6[40]
8000464c:	18 98       	mov	r8,r12
8000464e:	10 99       	mov	r9,r8
80004650:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004654:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004658:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
8000465a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000465e:	2f f8       	sub	r8,-1
80004660:	ef 68 ff f6 	st.b	r7[-10],r8
80004664:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004668:	30 28       	mov	r8,2
8000466a:	f0 09 18 00 	cp.b	r9,r8
8000466e:	fe 9a ff db 	brle	80004624 <linearProgram3+0xd4>
80004672:	c2 18       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
80004674:	30 08       	mov	r8,0
80004676:	ef 68 ff f6 	st.b	r7[-10],r8
8000467a:	c1 68       	rjmp	800046a6 <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
8000467c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004680:	a3 68       	lsl	r8,0x2
80004682:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004686:	f2 08 00 08 	add	r8,r9,r8
8000468a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000468e:	a3 69       	lsl	r9,0x2
80004690:	ee fa ff d4 	ld.w	r10,r7[-44]
80004694:	f4 09 00 09 	add	r9,r10,r9
80004698:	72 09       	ld.w	r9,r9[0x0]
8000469a:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000469c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046a0:	2f f8       	sub	r8,-1
800046a2:	ef 68 ff f6 	st.b	r7[-10],r8
800046a6:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046aa:	30 28       	mov	r8,2
800046ac:	f0 09 18 00 	cp.b	r9,r8
800046b0:	fe 9a ff e6 	brle	8000467c <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800046b4:	30 08       	mov	r8,0
800046b6:	ef 68 ff f7 	st.b	r7[-9],r8
800046ba:	ca a8       	rjmp	8000480e <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800046bc:	30 08       	mov	r8,0
800046be:	ef 68 ff f6 	st.b	r7[-10],r8
800046c2:	c2 78       	rjmp	80004710 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800046c4:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800046c8:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800046cc:	12 98       	mov	r8,r9
800046ce:	a1 78       	lsl	r8,0x1
800046d0:	12 08       	add	r8,r9
800046d2:	a3 78       	lsl	r8,0x3
800046d4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800046d8:	f2 08 00 08 	add	r8,r9,r8
800046dc:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800046e0:	2f d9       	sub	r9,-3
800046e2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800046e6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ea:	a3 68       	lsl	r8,0x2
800046ec:	ee fb ff cc 	ld.w	r11,r7[-52]
800046f0:	f6 08 00 08 	add	r8,r11,r8
800046f4:	70 08       	ld.w	r8,r8[0x0]
800046f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800046fa:	f4 08 15 02 	lsl	r8,r10,0x2
800046fe:	ee 08 00 08 	add	r8,r7,r8
80004702:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004706:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000470a:	2f f8       	sub	r8,-1
8000470c:	ef 68 ff f6 	st.b	r7[-10],r8
80004710:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004714:	30 28       	mov	r8,2
80004716:	f0 09 18 00 	cp.b	r9,r8
8000471a:	fe 9a ff d5 	brle	800046c4 <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
8000471e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004722:	12 98       	mov	r8,r9
80004724:	a1 78       	lsl	r8,0x1
80004726:	12 08       	add	r8,r9
80004728:	a3 78       	lsl	r8,0x3
8000472a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000472e:	f2 08 00 08 	add	r8,r9,r8
80004732:	ee c9 00 18 	sub	r9,r7,24
80004736:	12 9b       	mov	r11,r9
80004738:	10 9c       	mov	r12,r8
8000473a:	fe b0 f0 67 	rcall	80002808 <scalar_product>
8000473e:	18 9a       	mov	r10,r12
80004740:	30 18       	mov	r8,1
80004742:	30 09       	mov	r9,0
80004744:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004748:	e0 8c 00 04 	brvs	80004750 <linearProgram3+0x200>
8000474c:	e0 89 00 03 	brgt	80004752 <linearProgram3+0x202>
80004750:	30 08       	mov	r8,0
80004752:	5c 58       	castu.b	r8
80004754:	c5 80       	breq	80004804 <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004756:	30 08       	mov	r8,0
80004758:	ef 68 ff f6 	st.b	r7[-10],r8
8000475c:	c1 58       	rjmp	80004786 <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
8000475e:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004762:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004766:	a3 69       	lsl	r9,0x2
80004768:	ee fa ff cc 	ld.w	r10,r7[-52]
8000476c:	f4 09 00 09 	add	r9,r10,r9
80004770:	72 09       	ld.w	r9,r9[0x0]
80004772:	a3 68       	lsl	r8,0x2
80004774:	ee 08 00 08 	add	r8,r7,r8
80004778:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000477c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004780:	2f f8       	sub	r8,-1
80004782:	ef 68 ff f6 	st.b	r7[-10],r8
80004786:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000478a:	30 28       	mov	r8,2
8000478c:	f0 09 18 00 	cp.b	r9,r8
80004790:	fe 9a ff e7 	brle	8000475e <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
80004794:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004798:	ef 2b ff f7 	ld.sb	r11,r7[-9]
8000479c:	1a d8       	st.w	--sp,r8
8000479e:	ee f8 ff cc 	ld.w	r8,r7[-52]
800047a2:	ee f9 ff d4 	ld.w	r9,r7[-44]
800047a6:	ee fa ff d0 	ld.w	r10,r7[-48]
800047aa:	ee fc ff d8 	ld.w	r12,r7[-40]
800047ae:	f0 16 01 82 	mcall	r6[1544]
800047b2:	2f fd       	sub	sp,-4
800047b4:	18 98       	mov	r8,r12
800047b6:	ec 18 00 01 	eorl	r8,0x1
800047ba:	5c 58       	castu.b	r8
800047bc:	c2 40       	breq	80004804 <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800047be:	30 08       	mov	r8,0
800047c0:	ef 68 ff f6 	st.b	r7[-10],r8
800047c4:	c1 48       	rjmp	800047ec <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800047c6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047ca:	a3 68       	lsl	r8,0x2
800047cc:	ee f9 ff cc 	ld.w	r9,r7[-52]
800047d0:	10 09       	add	r9,r8
800047d2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047d6:	a3 68       	lsl	r8,0x2
800047d8:	ee 08 00 08 	add	r8,r7,r8
800047dc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800047e0:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800047e2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047e6:	2f f8       	sub	r8,-1
800047e8:	ef 68 ff f6 	st.b	r7[-10],r8
800047ec:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047f0:	30 28       	mov	r8,2
800047f2:	f0 09 18 00 	cp.b	r9,r8
800047f6:	fe 9a ff e8 	brle	800047c6 <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
800047fa:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800047fe:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80004802:	c1 78       	rjmp	80004830 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
80004804:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004808:	2f f8       	sub	r8,-1
8000480a:	ef 68 ff f7 	st.b	r7[-9],r8
8000480e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004812:	ec f8 00 00 	ld.w	r8,r6[0]
80004816:	70 08       	ld.w	r8,r8[0x0]
80004818:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000481c:	10 39       	cp.w	r9,r8
8000481e:	fe 95 ff 4f 	brlt	800046bc <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
80004822:	ec f8 00 00 	ld.w	r8,r6[0]
80004826:	70 08       	ld.w	r8,r8[0x0]
80004828:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000482c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004830:	10 9c       	mov	r12,r8
80004832:	2f 2d       	sub	sp,-56
80004834:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004838:	80 00       	ld.sh	r0,r0[0x0]
8000483a:	43 e0       	lddsp	r0,sp[0xf8]

8000483c <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
8000483c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004840:	1a 97       	mov	r7,sp
80004842:	fa cd 01 ec 	sub	sp,sp,492
80004846:	fe f6 07 7a 	ld.w	r6,pc[1914]
8000484a:	1e 26       	rsub	r6,pc
8000484c:	ef 4c fe 20 	st.w	r7[-480],r12
80004850:	16 98       	mov	r8,r11
80004852:	ef 4a fe 18 	st.w	r7[-488],r10
80004856:	ef 49 fe 14 	st.w	r7[-492],r9
8000485a:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
8000485e:	30 08       	mov	r8,0
80004860:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004864:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004868:	ef 68 ff ee 	st.b	r7[-18],r8
8000486c:	e0 8f 03 9c 	bral	80004fa4 <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004870:	30 08       	mov	r8,0
80004872:	ef 68 ff ed 	st.b	r7[-19],r8
80004876:	c2 78       	rjmp	800048c4 <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004878:	ef 2a ff ed 	ld.sb	r10,r7[-19]
8000487c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004880:	12 98       	mov	r8,r9
80004882:	a1 78       	lsl	r8,0x1
80004884:	12 08       	add	r8,r9
80004886:	a3 78       	lsl	r8,0x3
80004888:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000488c:	f2 08 00 08 	add	r8,r9,r8
80004890:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004894:	2f d9       	sub	r9,-3
80004896:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000489a:	ef 28 ff ed 	ld.sb	r8,r7[-19]
8000489e:	a3 68       	lsl	r8,0x2
800048a0:	ee fb fe 14 	ld.w	r11,r7[-492]
800048a4:	f6 08 00 08 	add	r8,r11,r8
800048a8:	70 08       	ld.w	r8,r8[0x0]
800048aa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800048ae:	f4 08 15 02 	lsl	r8,r10,0x2
800048b2:	ee 08 00 08 	add	r8,r7,r8
800048b6:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800048ba:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800048be:	2f f8       	sub	r8,-1
800048c0:	ef 68 ff ed 	st.b	r7[-19],r8
800048c4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800048c8:	30 28       	mov	r8,2
800048ca:	f0 09 18 00 	cp.b	r9,r8
800048ce:	fe 9a ff d5 	brle	80004878 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800048d2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800048d6:	12 98       	mov	r8,r9
800048d8:	a1 78       	lsl	r8,0x1
800048da:	12 08       	add	r8,r9
800048dc:	a3 78       	lsl	r8,0x3
800048de:	ee f9 fe 20 	ld.w	r9,r7[-480]
800048e2:	f2 08 00 08 	add	r8,r9,r8
800048e6:	ee c9 01 88 	sub	r9,r7,392
800048ea:	12 9b       	mov	r11,r9
800048ec:	10 9c       	mov	r12,r8
800048ee:	fe b0 ef 8d 	rcall	80002808 <scalar_product>
800048f2:	18 9a       	mov	r10,r12
800048f4:	30 18       	mov	r8,1
800048f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800048fa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800048fe:	e0 8c 00 04 	brvs	80004906 <linearProgram4+0xca>
80004902:	e0 89 00 03 	brgt	80004908 <linearProgram4+0xcc>
80004906:	30 08       	mov	r8,0
80004908:	5c 58       	castu.b	r8
8000490a:	e0 80 03 48 	breq	80004f9a <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
8000490e:	30 08       	mov	r8,0
80004910:	ef 68 ff ef 	st.b	r7[-17],r8
80004914:	e0 8f 02 98 	bral	80004e44 <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004918:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000491c:	12 98       	mov	r8,r9
8000491e:	a1 78       	lsl	r8,0x1
80004920:	12 08       	add	r8,r9
80004922:	a3 78       	lsl	r8,0x3
80004924:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004928:	f2 08 00 08 	add	r8,r9,r8
8000492c:	70 1a       	ld.w	r10,r8[0x4]
8000492e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004932:	12 98       	mov	r8,r9
80004934:	a1 78       	lsl	r8,0x1
80004936:	12 08       	add	r8,r9
80004938:	a3 78       	lsl	r8,0x3
8000493a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000493e:	f2 08 00 08 	add	r8,r9,r8
80004942:	70 28       	ld.w	r8,r8[0x8]
80004944:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004948:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000494c:	12 98       	mov	r8,r9
8000494e:	a1 78       	lsl	r8,0x1
80004950:	12 08       	add	r8,r9
80004952:	a3 78       	lsl	r8,0x3
80004954:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004958:	f2 08 00 08 	add	r8,r9,r8
8000495c:	70 2b       	ld.w	r11,r8[0x8]
8000495e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004962:	12 98       	mov	r8,r9
80004964:	a1 78       	lsl	r8,0x1
80004966:	12 08       	add	r8,r9
80004968:	a3 78       	lsl	r8,0x3
8000496a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000496e:	f2 08 00 08 	add	r8,r9,r8
80004972:	70 18       	ld.w	r8,r8[0x4]
80004974:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004978:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000497c:	ef 48 fe 3c 	st.w	r7[-452],r8
80004980:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004984:	12 98       	mov	r8,r9
80004986:	a1 78       	lsl	r8,0x1
80004988:	12 08       	add	r8,r9
8000498a:	a3 78       	lsl	r8,0x3
8000498c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004990:	f2 08 00 08 	add	r8,r9,r8
80004994:	70 2a       	ld.w	r10,r8[0x8]
80004996:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000499a:	12 98       	mov	r8,r9
8000499c:	a1 78       	lsl	r8,0x1
8000499e:	12 08       	add	r8,r9
800049a0:	a3 78       	lsl	r8,0x3
800049a2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049a6:	f2 08 00 08 	add	r8,r9,r8
800049aa:	70 08       	ld.w	r8,r8[0x0]
800049ac:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800049b0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049b4:	12 98       	mov	r8,r9
800049b6:	a1 78       	lsl	r8,0x1
800049b8:	12 08       	add	r8,r9
800049ba:	a3 78       	lsl	r8,0x3
800049bc:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049c0:	f2 08 00 08 	add	r8,r9,r8
800049c4:	70 0b       	ld.w	r11,r8[0x0]
800049c6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049ca:	12 98       	mov	r8,r9
800049cc:	a1 78       	lsl	r8,0x1
800049ce:	12 08       	add	r8,r9
800049d0:	a3 78       	lsl	r8,0x3
800049d2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049d6:	f2 08 00 08 	add	r8,r9,r8
800049da:	70 28       	ld.w	r8,r8[0x8]
800049dc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800049e0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800049e4:	ef 48 fe 40 	st.w	r7[-448],r8
800049e8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049ec:	12 98       	mov	r8,r9
800049ee:	a1 78       	lsl	r8,0x1
800049f0:	12 08       	add	r8,r9
800049f2:	a3 78       	lsl	r8,0x3
800049f4:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049f8:	f2 08 00 08 	add	r8,r9,r8
800049fc:	70 0a       	ld.w	r10,r8[0x0]
800049fe:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a02:	12 98       	mov	r8,r9
80004a04:	a1 78       	lsl	r8,0x1
80004a06:	12 08       	add	r8,r9
80004a08:	a3 78       	lsl	r8,0x3
80004a0a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a0e:	f2 08 00 08 	add	r8,r9,r8
80004a12:	70 18       	ld.w	r8,r8[0x4]
80004a14:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a18:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a1c:	12 98       	mov	r8,r9
80004a1e:	a1 78       	lsl	r8,0x1
80004a20:	12 08       	add	r8,r9
80004a22:	a3 78       	lsl	r8,0x3
80004a24:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a28:	f2 08 00 08 	add	r8,r9,r8
80004a2c:	70 1b       	ld.w	r11,r8[0x4]
80004a2e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a32:	12 98       	mov	r8,r9
80004a34:	a1 78       	lsl	r8,0x1
80004a36:	12 08       	add	r8,r9
80004a38:	a3 78       	lsl	r8,0x3
80004a3a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a3e:	f2 08 00 08 	add	r8,r9,r8
80004a42:	70 08       	ld.w	r8,r8[0x0]
80004a44:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a48:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a4c:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004a50:	ee c8 01 c4 	sub	r8,r7,452
80004a54:	10 9c       	mov	r12,r8
80004a56:	fe b0 f0 a9 	rcall	80002ba8 <vector_norm_sqr>
80004a5a:	18 98       	mov	r8,r12
80004a5c:	10 9c       	mov	r12,r8
80004a5e:	f0 16 00 02 	mcall	r6[8]
80004a62:	14 98       	mov	r8,r10
80004a64:	16 99       	mov	r9,r11
80004a66:	30 05       	mov	r5,0
80004a68:	e0 6a 43 2d 	mov	r10,17197
80004a6c:	ea 1a eb 1c 	orh	r10,0xeb1c
80004a70:	e0 6b 36 e2 	mov	r11,14050
80004a74:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004a78:	f0 16 00 7d 	mcall	r6[500]
80004a7c:	18 98       	mov	r8,r12
80004a7e:	58 08       	cp.w	r8,0
80004a80:	c0 20       	breq	80004a84 <linearProgram4+0x248>
80004a82:	30 15       	mov	r5,1
80004a84:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004a88:	c6 50       	breq	80004b52 <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004a8a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8e:	12 98       	mov	r8,r9
80004a90:	a1 78       	lsl	r8,0x1
80004a92:	12 08       	add	r8,r9
80004a94:	a3 78       	lsl	r8,0x3
80004a96:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a9a:	f2 08 00 08 	add	r8,r9,r8
80004a9e:	10 9a       	mov	r10,r8
80004aa0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa4:	12 98       	mov	r8,r9
80004aa6:	a1 78       	lsl	r8,0x1
80004aa8:	12 08       	add	r8,r9
80004aaa:	a3 78       	lsl	r8,0x3
80004aac:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ab0:	f2 08 00 08 	add	r8,r9,r8
80004ab4:	14 9b       	mov	r11,r10
80004ab6:	10 9c       	mov	r12,r8
80004ab8:	fe b0 ee a8 	rcall	80002808 <scalar_product>
80004abc:	18 9a       	mov	r10,r12
80004abe:	30 18       	mov	r8,1
80004ac0:	30 09       	mov	r9,0
80004ac2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004ac6:	e0 8c 00 04 	brvs	80004ace <linearProgram4+0x292>
80004aca:	e0 89 00 03 	brgt	80004ad0 <linearProgram4+0x294>
80004ace:	30 08       	mov	r8,0
80004ad0:	5c 58       	castu.b	r8
80004ad2:	e0 81 01 b3 	brne	80004e38 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004ad6:	30 08       	mov	r8,0
80004ad8:	ef 68 ff ed 	st.b	r7[-19],r8
80004adc:	c3 38       	rjmp	80004b42 <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004ade:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004ae2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ae6:	12 98       	mov	r8,r9
80004ae8:	a1 78       	lsl	r8,0x1
80004aea:	12 08       	add	r8,r9
80004aec:	a3 78       	lsl	r8,0x3
80004aee:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004af2:	f2 08 00 08 	add	r8,r9,r8
80004af6:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004afa:	2f d9       	sub	r9,-3
80004afc:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004b00:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b04:	12 98       	mov	r8,r9
80004b06:	a1 78       	lsl	r8,0x1
80004b08:	12 08       	add	r8,r9
80004b0a:	a3 78       	lsl	r8,0x3
80004b0c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b10:	f2 08 00 08 	add	r8,r9,r8
80004b14:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004b18:	2f d9       	sub	r9,-3
80004b1a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b1e:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004b22:	fc 18 3f 00 	movh	r8,0x3f00
80004b26:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004b2a:	f4 c8 ff fd 	sub	r8,r10,-3
80004b2e:	a3 68       	lsl	r8,0x2
80004b30:	ee 08 00 08 	add	r8,r7,r8
80004b34:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004b38:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004b3c:	2f f8       	sub	r8,-1
80004b3e:	ef 68 ff ed 	st.b	r7[-19],r8
80004b42:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004b46:	30 28       	mov	r8,2
80004b48:	f0 09 18 00 	cp.b	r9,r8
80004b4c:	fe 9a ff c9 	brle	80004ade <linearProgram4+0x2a2>
80004b50:	c5 69       	rjmp	80004dfc <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004b52:	ee fa fe 40 	ld.w	r10,r7[-448]
80004b56:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b5a:	12 98       	mov	r8,r9
80004b5c:	a1 78       	lsl	r8,0x1
80004b5e:	12 08       	add	r8,r9
80004b60:	a3 78       	lsl	r8,0x3
80004b62:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b66:	f2 08 00 08 	add	r8,r9,r8
80004b6a:	70 28       	ld.w	r8,r8[0x8]
80004b6c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b70:	ee fb fe 44 	ld.w	r11,r7[-444]
80004b74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b78:	12 98       	mov	r8,r9
80004b7a:	a1 78       	lsl	r8,0x1
80004b7c:	12 08       	add	r8,r9
80004b7e:	a3 78       	lsl	r8,0x3
80004b80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b84:	f2 08 00 08 	add	r8,r9,r8
80004b88:	70 18       	ld.w	r8,r8[0x4]
80004b8a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b8e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b92:	ef 48 fe 30 	st.w	r7[-464],r8
80004b96:	ee fa fe 44 	ld.w	r10,r7[-444]
80004b9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b9e:	12 98       	mov	r8,r9
80004ba0:	a1 78       	lsl	r8,0x1
80004ba2:	12 08       	add	r8,r9
80004ba4:	a3 78       	lsl	r8,0x3
80004ba6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004baa:	f2 08 00 08 	add	r8,r9,r8
80004bae:	70 08       	ld.w	r8,r8[0x0]
80004bb0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bb4:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004bb8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bbc:	12 98       	mov	r8,r9
80004bbe:	a1 78       	lsl	r8,0x1
80004bc0:	12 08       	add	r8,r9
80004bc2:	a3 78       	lsl	r8,0x3
80004bc4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bc8:	f2 08 00 08 	add	r8,r9,r8
80004bcc:	70 28       	ld.w	r8,r8[0x8]
80004bce:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004bd2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004bd6:	ef 48 fe 34 	st.w	r7[-460],r8
80004bda:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004bde:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004be2:	12 98       	mov	r8,r9
80004be4:	a1 78       	lsl	r8,0x1
80004be6:	12 08       	add	r8,r9
80004be8:	a3 78       	lsl	r8,0x3
80004bea:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bee:	f2 08 00 08 	add	r8,r9,r8
80004bf2:	70 18       	ld.w	r8,r8[0x4]
80004bf4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bf8:	ee fb fe 40 	ld.w	r11,r7[-448]
80004bfc:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c00:	12 98       	mov	r8,r9
80004c02:	a1 78       	lsl	r8,0x1
80004c04:	12 08       	add	r8,r9
80004c06:	a3 78       	lsl	r8,0x3
80004c08:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c0c:	f2 08 00 08 	add	r8,r9,r8
80004c10:	70 08       	ld.w	r8,r8[0x0]
80004c12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c16:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c1a:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c1e:	30 08       	mov	r8,0
80004c20:	ef 68 ff ed 	st.b	r7[-19],r8
80004c24:	c2 e8       	rjmp	80004c80 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004c26:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004c2a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c2e:	12 98       	mov	r8,r9
80004c30:	a1 78       	lsl	r8,0x1
80004c32:	12 08       	add	r8,r9
80004c34:	a3 78       	lsl	r8,0x3
80004c36:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c3a:	f2 08 00 08 	add	r8,r9,r8
80004c3e:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c42:	2f d9       	sub	r9,-3
80004c44:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c48:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c4c:	12 98       	mov	r8,r9
80004c4e:	a1 78       	lsl	r8,0x1
80004c50:	12 08       	add	r8,r9
80004c52:	a3 78       	lsl	r8,0x3
80004c54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c58:	f2 08 00 08 	add	r8,r9,r8
80004c5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c60:	2f d9       	sub	r9,-3
80004c62:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c66:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004c6a:	f4 08 15 02 	lsl	r8,r10,0x2
80004c6e:	ee 08 00 08 	add	r8,r7,r8
80004c72:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c76:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c7a:	2f f8       	sub	r8,-1
80004c7c:	ef 68 ff ed 	st.b	r7[-19],r8
80004c80:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c84:	30 28       	mov	r8,2
80004c86:	f0 09 18 00 	cp.b	r9,r8
80004c8a:	fe 9a ff ce 	brle	80004c26 <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004c8e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c92:	12 98       	mov	r8,r9
80004c94:	a1 78       	lsl	r8,0x1
80004c96:	12 08       	add	r8,r9
80004c98:	a3 78       	lsl	r8,0x3
80004c9a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c9e:	f2 08 00 08 	add	r8,r9,r8
80004ca2:	10 99       	mov	r9,r8
80004ca4:	ee c8 01 dc 	sub	r8,r7,476
80004ca8:	12 9b       	mov	r11,r9
80004caa:	10 9c       	mov	r12,r8
80004cac:	fe b0 ed ae 	rcall	80002808 <scalar_product>
80004cb0:	18 98       	mov	r8,r12
80004cb2:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004cb6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004cba:	12 98       	mov	r8,r9
80004cbc:	a1 78       	lsl	r8,0x1
80004cbe:	12 08       	add	r8,r9
80004cc0:	a3 78       	lsl	r8,0x3
80004cc2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cc6:	f2 08 00 08 	add	r8,r9,r8
80004cca:	10 99       	mov	r9,r8
80004ccc:	ee c8 01 d0 	sub	r8,r7,464
80004cd0:	12 9b       	mov	r11,r9
80004cd2:	10 9c       	mov	r12,r8
80004cd4:	fe b0 ed 9a 	rcall	80002808 <scalar_product>
80004cd8:	18 98       	mov	r8,r12
80004cda:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004cde:	30 08       	mov	r8,0
80004ce0:	ef 68 ff ed 	st.b	r7[-19],r8
80004ce4:	c5 78       	rjmp	80004d92 <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004ce6:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004cea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cee:	12 98       	mov	r8,r9
80004cf0:	a1 78       	lsl	r8,0x1
80004cf2:	12 08       	add	r8,r9
80004cf4:	a3 78       	lsl	r8,0x3
80004cf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cfa:	f2 08 00 08 	add	r8,r9,r8
80004cfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d02:	2f d9       	sub	r9,-3
80004d04:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004d08:	ee fb ff f8 	ld.w	r11,r7[-8]
80004d0c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004d10:	f0 16 00 0a 	mcall	r6[40]
80004d14:	18 98       	mov	r8,r12
80004d16:	10 99       	mov	r9,r8
80004d18:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004d1c:	a3 68       	lsl	r8,0x2
80004d1e:	ee 08 00 08 	add	r8,r7,r8
80004d22:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004d26:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004d2a:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004d2e:	ea c8 ff fd 	sub	r8,r5,-3
80004d32:	a3 68       	lsl	r8,0x2
80004d34:	ee 08 00 08 	add	r8,r7,r8
80004d38:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004d3c:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d40:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d44:	12 98       	mov	r8,r9
80004d46:	a1 78       	lsl	r8,0x1
80004d48:	12 08       	add	r8,r9
80004d4a:	a3 78       	lsl	r8,0x3
80004d4c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d50:	f2 08 00 08 	add	r8,r9,r8
80004d54:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d58:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d5c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d60:	12 98       	mov	r8,r9
80004d62:	a1 78       	lsl	r8,0x1
80004d64:	12 08       	add	r8,r9
80004d66:	a3 78       	lsl	r8,0x3
80004d68:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d6c:	f2 08 00 08 	add	r8,r9,r8
80004d70:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d78:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d7c:	f4 08 15 02 	lsl	r8,r10,0x2
80004d80:	ee 08 00 08 	add	r8,r7,r8
80004d84:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004d88:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d8c:	2f f8       	sub	r8,-1
80004d8e:	ef 68 ff ed 	st.b	r7[-19],r8
80004d92:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d96:	30 28       	mov	r8,2
80004d98:	f0 09 18 00 	cp.b	r9,r8
80004d9c:	fe 9a ff a5 	brle	80004ce6 <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004da0:	ee c8 01 b8 	sub	r8,r7,440
80004da4:	10 9c       	mov	r12,r8
80004da6:	fe b0 ef 19 	rcall	80002bd8 <vector_norm>
80004daa:	18 98       	mov	r8,r12
80004dac:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004db0:	30 08       	mov	r8,0
80004db2:	ef 68 ff ed 	st.b	r7[-19],r8
80004db6:	c1 c8       	rjmp	80004dee <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004db8:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004dbc:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004dc0:	a3 68       	lsl	r8,0x2
80004dc2:	ee 08 00 08 	add	r8,r7,r8
80004dc6:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004dca:	ee fb ff fc 	ld.w	r11,r7[-4]
80004dce:	10 9c       	mov	r12,r8
80004dd0:	f0 16 00 0a 	mcall	r6[40]
80004dd4:	18 98       	mov	r8,r12
80004dd6:	10 99       	mov	r9,r8
80004dd8:	ea 08 15 02 	lsl	r8,r5,0x2
80004ddc:	ee 08 00 08 	add	r8,r7,r8
80004de0:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004de4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004de8:	2f f8       	sub	r8,-1
80004dea:	ef 68 ff ed 	st.b	r7[-19],r8
80004dee:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004df2:	30 28       	mov	r8,2
80004df4:	f0 09 18 00 	cp.b	r9,r8
80004df8:	fe 9a ff e0 	brle	80004db8 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004dfc:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e00:	12 98       	mov	r8,r9
80004e02:	a1 78       	lsl	r8,0x1
80004e04:	12 08       	add	r8,r9
80004e06:	a3 78       	lsl	r8,0x3
80004e08:	ee 08 00 08 	add	r8,r7,r8
80004e0c:	f0 c8 01 7c 	sub	r8,r8,380
80004e10:	10 9a       	mov	r10,r8
80004e12:	ee cb 01 b8 	sub	r11,r7,440
80004e16:	f4 c8 00 00 	sub	r8,r10,0
80004e1a:	f6 c9 00 00 	sub	r9,r11,0
80004e1e:	72 0c       	ld.w	r12,r9[0x0]
80004e20:	91 0c       	st.w	r8[0x0],r12
80004e22:	72 1c       	ld.w	r12,r9[0x4]
80004e24:	91 1c       	st.w	r8[0x4],r12
80004e26:	72 2c       	ld.w	r12,r9[0x8]
80004e28:	91 2c       	st.w	r8[0x8],r12
80004e2a:	72 39       	ld.w	r9,r9[0xc]
80004e2c:	91 39       	st.w	r8[0xc],r9
80004e2e:	f6 e8 00 10 	ld.d	r8,r11[16]
80004e32:	f4 e9 00 10 	st.d	r10[16],r8
80004e36:	c0 28       	rjmp	80004e3a <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004e38:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004e3a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004e3e:	2f f8       	sub	r8,-1
80004e40:	ef 68 ff ef 	st.b	r7[-17],r8
80004e44:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004e48:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004e4c:	f0 09 18 00 	cp.b	r9,r8
80004e50:	fe 95 fd 64 	brlt	80004918 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e54:	30 08       	mov	r8,0
80004e56:	ef 68 ff ed 	st.b	r7[-19],r8
80004e5a:	c1 58       	rjmp	80004e84 <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004e5c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e60:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e64:	a3 69       	lsl	r9,0x2
80004e66:	ee fa fe 14 	ld.w	r10,r7[-492]
80004e6a:	f4 09 00 09 	add	r9,r10,r9
80004e6e:	72 09       	ld.w	r9,r9[0x0]
80004e70:	a3 68       	lsl	r8,0x2
80004e72:	ee 08 00 08 	add	r8,r7,r8
80004e76:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e7a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e7e:	2f f8       	sub	r8,-1
80004e80:	ef 68 ff ed 	st.b	r7[-19],r8
80004e84:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e88:	30 28       	mov	r8,2
80004e8a:	f0 09 18 00 	cp.b	r9,r8
80004e8e:	fe 9a ff e7 	brle	80004e5c <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004e92:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e96:	12 98       	mov	r8,r9
80004e98:	a1 78       	lsl	r8,0x1
80004e9a:	12 08       	add	r8,r9
80004e9c:	a3 78       	lsl	r8,0x3
80004e9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ea2:	f2 08 00 08 	add	r8,r9,r8
80004ea6:	10 9b       	mov	r11,r8
80004ea8:	ee cc 01 7c 	sub	r12,r7,380
80004eac:	30 18       	mov	r8,1
80004eae:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004eb2:	ee fa fe 18 	ld.w	r10,r7[-488]
80004eb6:	f0 16 01 0d 	mcall	r6[1076]
80004eba:	18 9a       	mov	r10,r12
80004ebc:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004ec0:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004ec4:	30 18       	mov	r8,1
80004ec6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004eca:	e0 8c 00 03 	brvs	80004ed0 <linearProgram4+0x694>
80004ece:	c0 25       	brlt	80004ed2 <linearProgram4+0x696>
80004ed0:	30 08       	mov	r8,0
80004ed2:	5c 58       	castu.b	r8
80004ed4:	c1 f0       	breq	80004f12 <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004ed6:	30 08       	mov	r8,0
80004ed8:	ef 68 ff ed 	st.b	r7[-19],r8
80004edc:	c1 48       	rjmp	80004f04 <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004ede:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ee2:	a3 68       	lsl	r8,0x2
80004ee4:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ee8:	10 09       	add	r9,r8
80004eea:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004eee:	a3 68       	lsl	r8,0x2
80004ef0:	ee 08 00 08 	add	r8,r7,r8
80004ef4:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80004ef8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80004efa:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004efe:	2f f8       	sub	r8,-1
80004f00:	ef 68 ff ed 	st.b	r7[-19],r8
80004f04:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f08:	30 28       	mov	r8,2
80004f0a:	f0 09 18 00 	cp.b	r9,r8
80004f0e:	fe 9a ff e8 	brle	80004ede <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f12:	30 08       	mov	r8,0
80004f14:	ef 68 ff ed 	st.b	r7[-19],r8
80004f18:	c2 78       	rjmp	80004f66 <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004f1a:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004f1e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f22:	12 98       	mov	r8,r9
80004f24:	a1 78       	lsl	r8,0x1
80004f26:	12 08       	add	r8,r9
80004f28:	a3 78       	lsl	r8,0x3
80004f2a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f2e:	f2 08 00 08 	add	r8,r9,r8
80004f32:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f36:	2f d9       	sub	r9,-3
80004f38:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004f3c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f40:	a3 68       	lsl	r8,0x2
80004f42:	ee fb fe 14 	ld.w	r11,r7[-492]
80004f46:	f6 08 00 08 	add	r8,r11,r8
80004f4a:	70 08       	ld.w	r8,r8[0x0]
80004f4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004f50:	f4 08 15 02 	lsl	r8,r10,0x2
80004f54:	ee 08 00 08 	add	r8,r7,r8
80004f58:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f5c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f60:	2f f8       	sub	r8,-1
80004f62:	ef 68 ff ed 	st.b	r7[-19],r8
80004f66:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f6a:	30 28       	mov	r8,2
80004f6c:	f0 09 18 00 	cp.b	r9,r8
80004f70:	fe 9a ff d5 	brle	80004f1a <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
80004f74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f78:	12 98       	mov	r8,r9
80004f7a:	a1 78       	lsl	r8,0x1
80004f7c:	12 08       	add	r8,r9
80004f7e:	a3 78       	lsl	r8,0x3
80004f80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f84:	f2 08 00 08 	add	r8,r9,r8
80004f88:	ee c9 01 a0 	sub	r9,r7,416
80004f8c:	12 9b       	mov	r11,r9
80004f8e:	10 9c       	mov	r12,r8
80004f90:	fe b0 ec 3c 	rcall	80002808 <scalar_product>
80004f94:	18 98       	mov	r8,r12
80004f96:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004f9a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f9e:	2f f8       	sub	r8,-1
80004fa0:	ef 68 ff ee 	st.b	r7[-18],r8
80004fa4:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004fa8:	ec f8 00 00 	ld.w	r8,r6[0]
80004fac:	70 08       	ld.w	r8,r8[0x0]
80004fae:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004fb2:	10 39       	cp.w	r9,r8
80004fb4:	fe 95 fc 5e 	brlt	80004870 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
80004fb8:	28 5d       	sub	sp,-492
80004fba:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004fbe:	00 00       	add	r0,r0
80004fc0:	80 00       	ld.sh	r0,r0[0x0]
80004fc2:	46 ce       	lddsp	lr,sp[0x1b0]

80004fc4 <clip>:


static float inline clip(float input_value, float clip_value) {
80004fc4:	eb cd 40 80 	pushm	r7,lr
80004fc8:	1a 97       	mov	r7,sp
80004fca:	20 2d       	sub	sp,8
80004fcc:	ef 4c ff fc 	st.w	r7[-4],r12
80004fd0:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
80004fd4:	30 18       	mov	r8,1
80004fd6:	ee fa ff fc 	ld.w	r10,r7[-4]
80004fda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fde:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fe2:	e0 8c 00 04 	brvs	80004fea <clip+0x26>
80004fe6:	e0 89 00 03 	brgt	80004fec <clip+0x28>
80004fea:	30 08       	mov	r8,0
80004fec:	5c 58       	castu.b	r8
80004fee:	c0 40       	breq	80004ff6 <clip+0x32>
80004ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ff4:	c1 98       	rjmp	80005026 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
80004ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ffa:	10 9a       	mov	r10,r8
80004ffc:	ee 1a 80 00 	eorh	r10,0x8000
80005000:	30 18       	mov	r8,1
80005002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005006:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000500a:	e0 8c 00 04 	brvs	80005012 <clip+0x4e>
8000500e:	e0 89 00 03 	brgt	80005014 <clip+0x50>
80005012:	30 08       	mov	r8,0
80005014:	5c 58       	castu.b	r8
80005016:	c0 60       	breq	80005022 <clip+0x5e>
80005018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000501c:	ee 18 80 00 	eorh	r8,0x8000
80005020:	c0 38       	rjmp	80005026 <clip+0x62>
	return input_value;
80005022:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005026:	10 9c       	mov	r12,r8
80005028:	2f ed       	sub	sp,-8
8000502a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000502e <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
8000502e:	eb cd 40 e0 	pushm	r5-r7,lr
80005032:	1a 97       	mov	r7,sp
80005034:	20 2d       	sub	sp,8
80005036:	4a 16       	lddpc	r6,800050b8 <soft_zone+0x8a>
80005038:	1e 26       	rsub	r6,pc
8000503a:	ef 4c ff fc 	st.w	r7[-4],r12
8000503e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
80005042:	ee fc ff f8 	ld.w	r12,r7[-8]
80005046:	f0 16 00 02 	mcall	r6[8]
8000504a:	30 05       	mov	r5,0
8000504c:	e0 68 af 48 	mov	r8,44872
80005050:	ea 18 9a bc 	orh	r8,0x9abc
80005054:	e0 69 d7 f2 	mov	r9,55282
80005058:	ea 19 3e 7a 	orh	r9,0x3e7a
8000505c:	f0 16 00 1d 	mcall	r6[116]
80005060:	18 98       	mov	r8,r12
80005062:	58 08       	cp.w	r8,0
80005064:	c0 20       	breq	80005068 <soft_zone+0x3a>
80005066:	30 15       	mov	r5,1
80005068:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000506c:	c0 40       	breq	80005074 <soft_zone+0x46>
8000506e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005072:	c1 e8       	rjmp	800050ae <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
80005074:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005084:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005088:	ee fa ff f8 	ld.w	r10,r7[-8]
8000508c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005090:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005094:	ee fb ff fc 	ld.w	r11,r7[-4]
80005098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509c:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800050a0:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800050a4:	12 9b       	mov	r11,r9
800050a6:	10 9c       	mov	r12,r8
800050a8:	f0 16 00 0a 	mcall	r6[40]
800050ac:	18 98       	mov	r8,r12
	}
};
800050ae:	10 9c       	mov	r12,r8
800050b0:	2f ed       	sub	sp,-8
800050b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800050b6:	00 00       	add	r0,r0
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	4e bc       	lddpc	r12,80005264 <differentiate+0x22>

800050bc <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
800050bc:	eb cd 40 e0 	pushm	r5-r7,lr
800050c0:	1a 97       	mov	r7,sp
800050c2:	21 1d       	sub	sp,68
800050c4:	49 e6       	lddpc	r6,8000513c <passthroughController+0x80>
800050c6:	1e 26       	rsub	r6,pc
800050c8:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
800050ca:	fc 18 3f 80 	movh	r8,0x3f80
800050ce:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
800050d2:	f0 16 00 4d 	mcall	r6[308]
800050d6:	18 98       	mov	r8,r12
800050d8:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
800050dc:	e0 68 40 00 	mov	r8,16384
800050e0:	ea 18 c6 1c 	orh	r8,0xc61c
800050e4:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
800050e8:	e0 68 40 00 	mov	r8,16384
800050ec:	ea 18 46 1c 	orh	r8,0x461c
800050f0:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
800050f4:	30 08       	mov	r8,0
800050f6:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
800050fa:	30 08       	mov	r8,0
800050fc:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
80005100:	ee c8 00 44 	sub	r8,r7,68
80005104:	2e 08       	sub	r8,-32
80005106:	30 09       	mov	r9,0
80005108:	30 0a       	mov	r10,0
8000510a:	30 0b       	mov	r11,0
8000510c:	10 9c       	mov	r12,r8
8000510e:	f0 16 01 47 	mcall	r6[1308]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
80005112:	ee c8 00 44 	sub	r8,r7,68
80005116:	2f 48       	sub	r8,-12
80005118:	30 09       	mov	r9,0
8000511a:	30 0a       	mov	r10,0
8000511c:	30 0b       	mov	r11,0
8000511e:	10 9c       	mov	r12,r8
80005120:	f0 16 01 90 	mcall	r6[1600]
	return out;
80005124:	0a 98       	mov	r8,r5
80005126:	ee c9 00 44 	sub	r9,r7,68
8000512a:	34 4a       	mov	r10,68
8000512c:	12 9b       	mov	r11,r9
8000512e:	10 9c       	mov	r12,r8
80005130:	f0 16 00 21 	mcall	r6[132]
}
80005134:	0a 9c       	mov	r12,r5
80005136:	2e fd       	sub	sp,-68
80005138:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	4f 4a       	lddpc	r10,8000530c <pid_update+0x28>

80005140 <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
80005140:	eb cd 40 c0 	pushm	r6-r7,lr
80005144:	1a 97       	mov	r7,sp
80005146:	20 3d       	sub	sp,12
80005148:	49 76       	lddpc	r6,800051a4 <integrate+0x64>
8000514a:	1e 26       	rsub	r6,pc
8000514c:	ef 4c ff fc 	st.w	r7[-4],r12
80005150:	ef 4b ff f8 	st.w	r7[-8],r11
80005154:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
80005158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000515c:	70 39       	ld.w	r9,r8[0xc]
8000515e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005162:	70 2a       	ld.w	r10,r8[0x8]
80005164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005168:	70 0b       	ld.w	r11,r8[0x0]
8000516a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000516e:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
80005172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005176:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000517a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000517e:	12 9b       	mov	r11,r9
80005180:	10 9c       	mov	r12,r8
80005182:	c2 1f       	rcall	80004fc4 <clip>
80005184:	18 99       	mov	r9,r12
80005186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518a:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
8000518c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005190:	70 19       	ld.w	r9,r8[0x4]
80005192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005196:	70 28       	ld.w	r8,r8[0x8]
80005198:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
8000519c:	10 9c       	mov	r12,r8
8000519e:	2f dd       	sub	sp,-12
800051a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800051a4:	80 00       	ld.sh	r0,r0[0x0]
800051a6:	4f ce       	lddpc	lr,80005394 <pid_update+0xb0>

800051a8 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
800051a8:	eb cd 40 80 	pushm	r7,lr
800051ac:	1a 97       	mov	r7,sp
800051ae:	20 4d       	sub	sp,16
800051b0:	ef 4c ff fc 	st.w	r7[-4],r12
800051b4:	ef 4b ff f8 	st.w	r7[-8],r11
800051b8:	ef 4a ff f4 	st.w	r7[-12],r10
800051bc:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
800051c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051c8:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
800051ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051d2:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
800051d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800051dc:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
800051de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051e2:	30 09       	mov	r9,0
800051e4:	91 29       	st.w	r8[0x8],r9

}
800051e6:	2f cd       	sub	sp,-16
800051e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800051ec <resetInt>:
void resetInt(Integrator_t *integrator) {
800051ec:	eb cd 40 80 	pushm	r7,lr
800051f0:	1a 97       	mov	r7,sp
800051f2:	20 1d       	sub	sp,4
800051f4:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
800051f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051fc:	30 09       	mov	r9,0
800051fe:	91 29       	st.w	r8[0x8],r9
}
80005200:	2f fd       	sub	sp,-4
80005202:	e3 cd 80 80 	ldm	sp++,r7,pc

80005206 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80005206:	eb cd 40 80 	pushm	r7,lr
8000520a:	1a 97       	mov	r7,sp
8000520c:	20 4d       	sub	sp,16
8000520e:	ef 4c ff fc 	st.w	r7[-4],r12
80005212:	ef 4b ff f8 	st.w	r7[-8],r11
80005216:	ef 4a ff f4 	st.w	r7[-12],r10
8000521a:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
8000521e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005226:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
80005228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000522c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005230:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
80005232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005236:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000523a:	91 39       	st.w	r8[0xc],r9
}
8000523c:	2f cd       	sub	sp,-16
8000523e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005242 <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
80005242:	eb cd 40 e0 	pushm	r5-r7,lr
80005246:	1a 97       	mov	r7,sp
80005248:	20 4d       	sub	sp,16
8000524a:	4a 66       	lddpc	r6,800052e0 <differentiate+0x9e>
8000524c:	1e 26       	rsub	r6,pc
8000524e:	ef 4c ff f8 	st.w	r7[-8],r12
80005252:	ef 4b ff f4 	st.w	r7[-12],r11
80005256:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
8000525a:	30 08       	mov	r8,0
8000525c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
80005260:	ee fc ff f0 	ld.w	r12,r7[-16]
80005264:	f0 16 00 02 	mcall	r6[8]
80005268:	30 05       	mov	r5,0
8000526a:	e0 68 ed 8d 	mov	r8,60813
8000526e:	ea 18 a0 b5 	orh	r8,0xa0b5
80005272:	e0 69 c6 f7 	mov	r9,50935
80005276:	ea 19 3e b0 	orh	r9,0x3eb0
8000527a:	f0 16 00 1d 	mcall	r6[116]
8000527e:	18 98       	mov	r8,r12
80005280:	58 08       	cp.w	r8,0
80005282:	c0 20       	breq	80005286 <differentiate+0x44>
80005284:	30 15       	mov	r5,1
80005286:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000528a:	c0 50       	breq	80005294 <differentiate+0x52>
		output=0.0; 
8000528c:	30 08       	mov	r8,0
8000528e:	ef 48 ff fc 	st.w	r7[-4],r8
80005292:	c1 c8       	rjmp	800052ca <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80005294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005298:	70 35       	ld.w	r5,r8[0xc]
8000529a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000529e:	70 09       	ld.w	r9,r8[0x0]
800052a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052a4:	70 18       	ld.w	r8,r8[0x4]
800052a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800052aa:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800052ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800052b2:	ee fb ff f0 	ld.w	r11,r7[-16]
800052b6:	10 9c       	mov	r12,r8
800052b8:	f0 16 00 0a 	mcall	r6[40]
800052bc:	18 98       	mov	r8,r12
800052be:	0a 9b       	mov	r11,r5
800052c0:	10 9c       	mov	r12,r8
800052c2:	c8 1e       	rcall	80004fc4 <clip>
800052c4:	18 98       	mov	r8,r12
800052c6:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
800052ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800052d2:	91 19       	st.w	r8[0x4],r9
	return output;
800052d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800052d8:	10 9c       	mov	r12,r8
800052da:	2f cd       	sub	sp,-16
800052dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052e0:	80 00       	ld.sh	r0,r0[0x0]
800052e2:	50 d0       	stdsp	sp[0x34],r0

800052e4 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
800052e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800052e8:	1a 97       	mov	r7,sp
800052ea:	20 3d       	sub	sp,12
800052ec:	4c 36       	lddpc	r6,800053f8 <pid_update+0x114>
800052ee:	1e 26       	rsub	r6,pc
800052f0:	ef 4c ff f8 	st.w	r7[-8],r12
800052f4:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
800052f8:	f0 16 00 4d 	mcall	r6[308]
800052fc:	18 98       	mov	r8,r12
800052fe:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
80005302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005306:	71 08       	ld.w	r8,r8[0x40]
80005308:	10 9b       	mov	r11,r8
8000530a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000530e:	c9 0e       	rcall	8000502e <soft_zone>
80005310:	18 99       	mov	r9,r12
80005312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005316:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
80005318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000531c:	70 e8       	ld.w	r8,r8[0x38]
8000531e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005322:	f2 08 01 08 	sub	r8,r9,r8
80005326:	10 9c       	mov	r12,r8
80005328:	f0 16 00 b9 	mcall	r6[740]
8000532c:	18 99       	mov	r9,r12
8000532e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005332:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
80005334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000533c:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
8000533e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005342:	70 05       	ld.w	r5,r8[0x0]
80005344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005348:	70 d3       	ld.w	r3,r8[0x34]
8000534a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000534e:	70 fa       	ld.w	r10,r8[0x3c]
80005350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005354:	70 d9       	ld.w	r9,r8[0x34]
80005356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535a:	2f 48       	sub	r8,-12
8000535c:	12 9b       	mov	r11,r9
8000535e:	10 9c       	mov	r12,r8
80005360:	f0 16 00 dc 	mcall	r6[880]
80005364:	18 98       	mov	r8,r12
80005366:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
8000536a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000536e:	70 fa       	ld.w	r10,r8[0x3c]
80005370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005374:	70 d9       	ld.w	r9,r8[0x34]
80005376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000537a:	2e 08       	sub	r8,-32
8000537c:	12 9b       	mov	r11,r9
8000537e:	10 9c       	mov	r12,r8
80005380:	f0 16 01 0a 	mcall	r6[1064]
80005384:	18 98       	mov	r8,r12
80005386:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000538a:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000538e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005392:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005398:	70 ca       	ld.w	r10,r8[0x30]
8000539a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539e:	70 19       	ld.w	r9,r8[0x4]
800053a0:	30 18       	mov	r8,1
800053a2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053a6:	e0 8c 00 03 	brvs	800053ac <pid_update+0xc8>
800053aa:	c0 25       	brlt	800053ae <pid_update+0xca>
800053ac:	30 08       	mov	r8,0
800053ae:	5c 58       	castu.b	r8
800053b0:	c0 70       	breq	800053be <pid_update+0xda>
800053b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b6:	70 19       	ld.w	r9,r8[0x4]
800053b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053bc:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800053be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c2:	70 ca       	ld.w	r10,r8[0x30]
800053c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c8:	70 29       	ld.w	r9,r8[0x8]
800053ca:	30 18       	mov	r8,1
800053cc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053d0:	e0 8c 00 04 	brvs	800053d8 <pid_update+0xf4>
800053d4:	e0 89 00 03 	brgt	800053da <pid_update+0xf6>
800053d8:	30 08       	mov	r8,0
800053da:	5c 58       	castu.b	r8
800053dc:	c0 70       	breq	800053ea <pid_update+0x106>
800053de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e2:	70 29       	ld.w	r9,r8[0x8]
800053e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e8:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800053ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ee:	70 c8       	ld.w	r8,r8[0x30]
}
800053f0:	10 9c       	mov	r12,r8
800053f2:	2f dd       	sub	sp,-12
800053f4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	51 72       	stdsp	sp[0x5c],r2

800053fc <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
800053fc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005400:	1a 97       	mov	r7,sp
80005402:	20 3d       	sub	sp,12
80005404:	4b b6       	lddpc	r6,800054f0 <pid_update_dt+0xf4>
80005406:	1e 26       	rsub	r6,pc
80005408:	ef 4c ff fc 	st.w	r7[-4],r12
8000540c:	ef 4b ff f8 	st.w	r7[-8],r11
80005410:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
80005414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005418:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000541c:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
8000541e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005422:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005426:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
80005428:	f0 16 00 4d 	mcall	r6[308]
8000542c:	18 99       	mov	r9,r12
8000542e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005432:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
80005434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005438:	70 05       	ld.w	r5,r8[0x0]
8000543a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000543e:	70 d3       	ld.w	r3,r8[0x34]
80005440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005444:	70 fa       	ld.w	r10,r8[0x3c]
80005446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000544a:	70 d9       	ld.w	r9,r8[0x34]
8000544c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005450:	2f 48       	sub	r8,-12
80005452:	12 9b       	mov	r11,r9
80005454:	10 9c       	mov	r12,r8
80005456:	f0 16 00 dc 	mcall	r6[880]
8000545a:	18 98       	mov	r8,r12
8000545c:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	70 fa       	ld.w	r10,r8[0x3c]
80005466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546a:	70 d9       	ld.w	r9,r8[0x34]
8000546c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005470:	2e 08       	sub	r8,-32
80005472:	12 9b       	mov	r11,r9
80005474:	10 9c       	mov	r12,r8
80005476:	f0 16 01 0a 	mcall	r6[1064]
8000547a:	18 98       	mov	r8,r12
8000547c:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005480:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005488:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
8000548a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000548e:	70 ca       	ld.w	r10,r8[0x30]
80005490:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005494:	70 19       	ld.w	r9,r8[0x4]
80005496:	30 18       	mov	r8,1
80005498:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000549c:	e0 8c 00 03 	brvs	800054a2 <pid_update_dt+0xa6>
800054a0:	c0 25       	brlt	800054a4 <pid_update_dt+0xa8>
800054a2:	30 08       	mov	r8,0
800054a4:	5c 58       	castu.b	r8
800054a6:	c0 70       	breq	800054b4 <pid_update_dt+0xb8>
800054a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054ac:	70 19       	ld.w	r9,r8[0x4]
800054ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b2:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800054b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b8:	70 ca       	ld.w	r10,r8[0x30]
800054ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054be:	70 29       	ld.w	r9,r8[0x8]
800054c0:	30 18       	mov	r8,1
800054c2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800054c6:	e0 8c 00 04 	brvs	800054ce <pid_update_dt+0xd2>
800054ca:	e0 89 00 03 	brgt	800054d0 <pid_update_dt+0xd4>
800054ce:	30 08       	mov	r8,0
800054d0:	5c 58       	castu.b	r8
800054d2:	c0 70       	breq	800054e0 <pid_update_dt+0xe4>
800054d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054d8:	70 29       	ld.w	r9,r8[0x8]
800054da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054de:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800054e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054e4:	70 c8       	ld.w	r8,r8[0x30]
}
800054e6:	10 9c       	mov	r12,r8
800054e8:	2f dd       	sub	sp,-12
800054ea:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800054ee:	00 00       	add	r0,r0
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	52 8a       	stdsp	sp[0xa0],r10

800054f4 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
800054f4:	eb cd 40 e0 	pushm	r5-r7,lr
800054f8:	1a 97       	mov	r7,sp
800054fa:	20 2d       	sub	sp,8
800054fc:	4b 56       	lddpc	r6,800055d0 <calc_smaller_angle+0xdc>
800054fe:	1e 26       	rsub	r6,pc
80005500:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
80005504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005508:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
8000550c:	c1 88       	rjmp	8000553c <calc_smaller_angle+0x48>
8000550e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005512:	f0 16 00 02 	mcall	r6[8]
80005516:	e0 68 2d 18 	mov	r8,11544
8000551a:	ea 18 54 44 	orh	r8,0x5444
8000551e:	e0 69 21 fb 	mov	r9,8699
80005522:	ea 19 40 19 	orh	r9,0x4019
80005526:	f0 16 00 05 	mcall	r6[20]
8000552a:	14 98       	mov	r8,r10
8000552c:	16 99       	mov	r9,r11
8000552e:	10 9a       	mov	r10,r8
80005530:	12 9b       	mov	r11,r9
80005532:	f0 16 00 08 	mcall	r6[32]
80005536:	18 98       	mov	r8,r12
80005538:	ef 48 ff fc 	st.w	r7[-4],r8
8000553c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005540:	f0 16 00 02 	mcall	r6[8]
80005544:	30 05       	mov	r5,0
80005546:	e0 68 2d 18 	mov	r8,11544
8000554a:	ea 18 54 44 	orh	r8,0x5444
8000554e:	e0 69 21 fb 	mov	r9,8699
80005552:	ea 19 c0 09 	orh	r9,0xc009
80005556:	f0 16 00 1d 	mcall	r6[116]
8000555a:	18 98       	mov	r8,r12
8000555c:	58 08       	cp.w	r8,0
8000555e:	c0 20       	breq	80005562 <calc_smaller_angle+0x6e>
80005560:	30 15       	mov	r5,1
80005562:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005566:	cd 41       	brne	8000550e <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
80005568:	c1 88       	rjmp	80005598 <calc_smaller_angle+0xa4>
8000556a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000556e:	f0 16 00 02 	mcall	r6[8]
80005572:	e0 68 2d 18 	mov	r8,11544
80005576:	ea 18 54 44 	orh	r8,0x5444
8000557a:	e0 69 21 fb 	mov	r9,8699
8000557e:	ea 19 40 19 	orh	r9,0x4019
80005582:	f0 16 00 11 	mcall	r6[68]
80005586:	14 98       	mov	r8,r10
80005588:	16 99       	mov	r9,r11
8000558a:	10 9a       	mov	r10,r8
8000558c:	12 9b       	mov	r11,r9
8000558e:	f0 16 00 08 	mcall	r6[32]
80005592:	18 98       	mov	r8,r12
80005594:	ef 48 ff fc 	st.w	r7[-4],r8
80005598:	ee fc ff fc 	ld.w	r12,r7[-4]
8000559c:	f0 16 00 02 	mcall	r6[8]
800055a0:	30 05       	mov	r5,0
800055a2:	e0 68 2d 18 	mov	r8,11544
800055a6:	ea 18 54 44 	orh	r8,0x5444
800055aa:	e0 69 21 fb 	mov	r9,8699
800055ae:	ea 19 40 09 	orh	r9,0x4009
800055b2:	f0 16 00 7d 	mcall	r6[500]
800055b6:	18 98       	mov	r8,r12
800055b8:	58 08       	cp.w	r8,0
800055ba:	c0 20       	breq	800055be <calc_smaller_angle+0xca>
800055bc:	30 15       	mov	r5,1
800055be:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800055c2:	cd 41       	brne	8000556a <calc_smaller_angle+0x76>
	return out;
800055c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800055c8:	10 9c       	mov	r12,r8
800055ca:	2f ed       	sub	sp,-8
800055cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800055d0:	80 00       	ld.sh	r0,r0[0x0]
800055d2:	53 82       	stdsp	sp[0xe0],r2

800055d4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
800055d4:	eb cd 40 c0 	pushm	r6-r7,lr
800055d8:	1a 97       	mov	r7,sp
800055da:	20 2d       	sub	sp,8
800055dc:	4b 26       	lddpc	r6,800056a4 <fast_sqrt+0xd0>
800055de:	1e 26       	rsub	r6,pc
800055e0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
800055e4:	30 18       	mov	r8,1
800055e6:	ee fa ff f8 	ld.w	r10,r7[-8]
800055ea:	30 09       	mov	r9,0
800055ec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800055f0:	e0 8c 00 03 	brvs	800055f6 <fast_sqrt+0x22>
800055f4:	c0 25       	brlt	800055f8 <fast_sqrt+0x24>
800055f6:	30 08       	mov	r8,0
800055f8:	5c 58       	castu.b	r8
800055fa:	c0 30       	breq	80005600 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
800055fc:	30 08       	mov	r8,0
800055fe:	c4 f8       	rjmp	8000569c <fast_sqrt+0xc8>
	}
	float result=1.0;
80005600:	fc 18 3f 80 	movh	r8,0x3f80
80005604:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005608:	ee fb ff fc 	ld.w	r11,r7[-4]
8000560c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005610:	f0 16 00 0a 	mcall	r6[40]
80005614:	18 98       	mov	r8,r12
80005616:	10 99       	mov	r9,r8
80005618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005620:	fc 18 3f 00 	movh	r8,0x3f00
80005624:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005628:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000562c:	ee fb ff fc 	ld.w	r11,r7[-4]
80005630:	ee fc ff f8 	ld.w	r12,r7[-8]
80005634:	f0 16 00 0a 	mcall	r6[40]
80005638:	18 98       	mov	r8,r12
8000563a:	10 99       	mov	r9,r8
8000563c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005640:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005644:	fc 18 3f 00 	movh	r8,0x3f00
80005648:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000564c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005650:	ee fb ff fc 	ld.w	r11,r7[-4]
80005654:	ee fc ff f8 	ld.w	r12,r7[-8]
80005658:	f0 16 00 0a 	mcall	r6[40]
8000565c:	18 98       	mov	r8,r12
8000565e:	10 99       	mov	r9,r8
80005660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005664:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005668:	fc 18 3f 00 	movh	r8,0x3f00
8000566c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005670:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005674:	ee fb ff fc 	ld.w	r11,r7[-4]
80005678:	ee fc ff f8 	ld.w	r12,r7[-8]
8000567c:	f0 16 00 0a 	mcall	r6[40]
80005680:	18 98       	mov	r8,r12
80005682:	10 99       	mov	r9,r8
80005684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005688:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000568c:	fc 18 3f 00 	movh	r8,0x3f00
80005690:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005694:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005698:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000569c:	10 9c       	mov	r12,r8
8000569e:	2f ed       	sub	sp,-8
800056a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	54 62       	stdsp	sp[0x118],r2

800056a8 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
800056a8:	eb cd 40 c0 	pushm	r6-r7,lr
800056ac:	1a 97       	mov	r7,sp
800056ae:	20 1d       	sub	sp,4
800056b0:	48 e6       	lddpc	r6,800056e8 <sigmoid+0x40>
800056b2:	1e 26       	rsub	r6,pc
800056b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
800056b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800056c4:	fc 18 3f 80 	movh	r8,0x3f80
800056c8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800056cc:	10 9c       	mov	r12,r8
800056ce:	c8 3f       	rcall	800055d4 <fast_sqrt>
800056d0:	18 98       	mov	r8,r12
800056d2:	10 9b       	mov	r11,r8
800056d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056d8:	f0 16 00 0a 	mcall	r6[40]
800056dc:	18 98       	mov	r8,r12
};
800056de:	10 9c       	mov	r12,r8
800056e0:	2f fd       	sub	sp,-4
800056e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056e6:	00 00       	add	r0,r0
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	55 36       	stdsp	sp[0x14c],r6

800056ec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800056ec:	eb cd 40 c0 	pushm	r6-r7,lr
800056f0:	1a 97       	mov	r7,sp
800056f2:	20 3d       	sub	sp,12
800056f4:	49 06       	lddpc	r6,80005734 <mav_array_memcpy+0x48>
800056f6:	1e 26       	rsub	r6,pc
800056f8:	ef 4c ff fc 	st.w	r7[-4],r12
800056fc:	ef 4b ff f8 	st.w	r7[-8],r11
80005700:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	58 08       	cp.w	r8,0
8000570a:	c0 91       	brne	8000571c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000570c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005710:	30 0b       	mov	r11,0
80005712:	ee fc ff fc 	ld.w	r12,r7[-4]
80005716:	f0 16 00 30 	mcall	r6[192]
8000571a:	c0 98       	rjmp	8000572c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000571c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005720:	ee fb ff f8 	ld.w	r11,r7[-8]
80005724:	ee fc ff fc 	ld.w	r12,r7[-4]
80005728:	f0 16 00 21 	mcall	r6[132]
	}
}
8000572c:	2f dd       	sub	sp,-12
8000572e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005732:	00 00       	add	r0,r0
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	55 7a       	stdsp	sp[0x15c],r10

80005738 <init_stabilisation_copter>:
// 	initInt(&((stabiliser->thrust_controller).integrator), 1.5, 1.0, 1.0); // 1.0 1.0 0.5
		
// }

void init_stabilisation_copter(Stabiliser_Stack_copter_t* stabiliser_stack)
{
80005738:	eb cd 40 c0 	pushm	r6-r7,lr
8000573c:	1a 97       	mov	r7,sp
8000573e:	20 1d       	sub	sp,4
80005740:	49 56       	lddpc	r6,80005794 <init_stabilisation_copter+0x5c>
80005742:	1e 26       	rsub	r6,pc
80005744:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80005748:	f0 16 00 32 	mcall	r6[200]
8000574c:	18 99       	mov	r9,r12
8000574e:	ec f8 00 00 	ld.w	r8,r6[0]
80005752:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode = MOTORS_OFF;
80005754:	ec f8 00 00 	ld.w	r8,r6[0]
80005758:	70 08       	ld.w	r8,r8[0x0]
8000575a:	30 09       	mov	r9,0
8000575c:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80005760:	ec f8 00 00 	ld.w	r8,r6[0]
80005764:	70 08       	ld.w	r8,r8[0x0]
80005766:	30 19       	mov	r9,1
80005768:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode = YAW_RELATIVE;
8000576c:	ec f8 00 00 	ld.w	r8,r6[0]
80005770:	70 08       	ld.w	r8,r8[0x0]
80005772:	30 09       	mov	r9,0
80005774:	f1 49 01 6c 	st.w	r8[364],r9

	*stabiliser_stack = stabiliser_defaults;
80005778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000577c:	ec f9 08 fc 	ld.w	r9,r6[2300]
80005780:	e0 6a 03 b8 	mov	r10,952
80005784:	12 9b       	mov	r11,r9
80005786:	10 9c       	mov	r12,r8
80005788:	f0 16 00 21 	mcall	r6[132]
}
8000578c:	2f fd       	sub	sp,-4
8000578e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005792:	00 00       	add	r0,r0
80005794:	80 00       	ld.sh	r0,r0[0x0]
80005796:	55 c6       	stdsp	sp[0x170],r6

80005798 <cascade_stabilise_copter>:


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
80005798:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000579c:	1a 97       	mov	r7,sp
8000579e:	21 5d       	sub	sp,84
800057a0:	fe f6 03 70 	ld.w	r6,pc[880]
800057a4:	1e 26       	rsub	r6,pc
800057a6:	ef 4c ff b4 	st.w	r7[-76],r12
800057aa:	ef 4b ff b0 	st.w	r7[-80],r11
800057ae:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
800057b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800057b6:	ee c8 00 48 	sub	r8,r7,72
800057ba:	f0 ca 00 00 	sub	r10,r8,0
800057be:	f2 cb 00 00 	sub	r11,r9,0
800057c2:	76 0c       	ld.w	r12,r11[0x0]
800057c4:	95 0c       	st.w	r10[0x0],r12
800057c6:	76 1c       	ld.w	r12,r11[0x4]
800057c8:	95 1c       	st.w	r10[0x4],r12
800057ca:	76 2c       	ld.w	r12,r11[0x8]
800057cc:	95 2c       	st.w	r10[0x8],r12
800057ce:	76 3b       	ld.w	r11,r11[0xc]
800057d0:	95 3b       	st.w	r10[0xc],r11
800057d2:	f0 ca ff f0 	sub	r10,r8,-16
800057d6:	f2 cb ff f0 	sub	r11,r9,-16
800057da:	76 0c       	ld.w	r12,r11[0x0]
800057dc:	95 0c       	st.w	r10[0x0],r12
800057de:	76 1c       	ld.w	r12,r11[0x4]
800057e0:	95 1c       	st.w	r10[0x4],r12
800057e2:	76 2c       	ld.w	r12,r11[0x8]
800057e4:	95 2c       	st.w	r10[0x8],r12
800057e6:	76 3b       	ld.w	r11,r11[0xc]
800057e8:	95 3b       	st.w	r10[0xc],r11
800057ea:	f2 ea 00 20 	ld.d	r10,r9[32]
800057ee:	f0 eb 00 20 	st.d	r8[32],r10
800057f2:	72 a9       	ld.w	r9,r9[0x28]
800057f4:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
800057f6:	ee f8 ff ac 	ld.w	r8,r7[-84]
800057fa:	70 88       	ld.w	r8,r8[0x20]
800057fc:	58 18       	cp.w	r8,1
800057fe:	e0 80 00 df 	breq	800059bc <cascade_stabilise_copter+0x224>
80005802:	c0 63       	brcs	8000580e <cascade_stabilise_copter+0x76>
80005804:	58 28       	cp.w	r8,2
80005806:	e0 80 01 40 	breq	80005a86 <cascade_stabilise_copter+0x2ee>
8000580a:	e0 8f 01 78 	bral	80005afa <cascade_stabilise_copter+0x362>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL]  =   input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
8000580e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005812:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005816:	70 c8       	ld.w	r8,r8[0x30]
80005818:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000581c:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH] = -(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80005820:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005824:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005828:	70 b8       	ld.w	r8,r8[0x2c]
8000582a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000582e:	ee 18 80 00 	eorh	r8,0x8000
80005832:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]     = -(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80005836:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000583a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000583e:	71 08       	ld.w	r8,r8[0x40]
80005840:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005844:	ee 18 80 00 	eorh	r8,0x8000
80005848:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
8000584c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005850:	70 98       	ld.w	r8,r8[0x24]
80005852:	58 28       	cp.w	r8,2
80005854:	c5 61       	brne	80005900 <cascade_stabilise_copter+0x168>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80005856:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000585a:	70 b8       	ld.w	r8,r8[0x2c]
8000585c:	10 9c       	mov	r12,r8
8000585e:	f0 16 00 02 	mcall	r6[8]
80005862:	14 92       	mov	r2,r10
80005864:	16 93       	mov	r3,r11
80005866:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000586a:	70 c8       	ld.w	r8,r8[0x30]
8000586c:	10 9c       	mov	r12,r8
8000586e:	f0 16 00 02 	mcall	r6[8]
80005872:	04 98       	mov	r8,r2
80005874:	06 99       	mov	r9,r3
80005876:	f0 16 00 52 	mcall	r6[328]
8000587a:	14 98       	mov	r8,r10
8000587c:	16 99       	mov	r9,r11
8000587e:	10 9a       	mov	r10,r8
80005880:	12 9b       	mov	r11,r9
80005882:	f0 16 00 08 	mcall	r6[32]
80005886:	18 98       	mov	r8,r12
80005888:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
8000588c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005890:	70 b9       	ld.w	r9,r8[0x2c]
80005892:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005896:	70 b8       	ld.w	r8,r8[0x2c]
80005898:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000589c:	ee f8 ff b0 	ld.w	r8,r7[-80]
800058a0:	70 ca       	ld.w	r10,r8[0x30]
800058a2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800058a6:	70 c8       	ld.w	r8,r8[0x30]
800058a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800058ac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800058b0:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(centralData->stabiliser_stack.yaw_coordination_velocity)) {
800058b4:	ec f8 00 00 	ld.w	r8,r6[0]
800058b8:	70 08       	ld.w	r8,r8[0x0]
800058ba:	f0 f9 05 54 	ld.w	r9,r8[1364]
800058be:	ec f8 00 00 	ld.w	r8,r6[0]
800058c2:	70 08       	ld.w	r8,r8[0x0]
800058c4:	f0 f8 05 54 	ld.w	r8,r8[1364]
800058c8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800058cc:	30 18       	mov	r8,1
800058ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800058d6:	e0 8c 00 03 	brvs	800058dc <cascade_stabilise_copter+0x144>
800058da:	c0 25       	brlt	800058de <cascade_stabilise_copter+0x146>
800058dc:	30 08       	mov	r8,0
800058de:	5c 58       	castu.b	r8
800058e0:	c1 00       	breq	80005900 <cascade_stabilise_copter+0x168>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
800058e2:	ee f5 ff c0 	ld.w	r5,r7[-64]
800058e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800058ea:	fc 18 40 40 	movh	r8,0x4040
800058ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800058f2:	10 9c       	mov	r12,r8
800058f4:	cd ae       	rcall	800056a8 <sigmoid>
800058f6:	18 98       	mov	r8,r12
800058f8:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
800058fc:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
80005900:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005904:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&centralData->stabiliser_stack.velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80005908:	ec f8 00 00 	ld.w	r8,r6[0]
8000590c:	70 08       	ld.w	r8,r8[0x0]
8000590e:	f0 f9 01 40 	ld.w	r9,r8[320]
80005912:	ec f8 00 00 	ld.w	r8,r6[0]
80005916:	70 08       	ld.w	r8,r8[0x0]
80005918:	f0 c8 fb e8 	sub	r8,r8,-1048
8000591c:	ee ca 00 1c 	sub	r10,r7,28
80005920:	12 9b       	mov	r11,r9
80005922:	10 9c       	mov	r12,r8
80005924:	f0 16 00 ca 	mcall	r6[808]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		centralData->stabiliser_stack.velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
80005928:	ec f8 00 00 	ld.w	r8,r6[0]
8000592c:	70 05       	ld.w	r5,r8[0x0]
8000592e:	ec f8 00 00 	ld.w	r8,r6[0]
80005932:	70 08       	ld.w	r8,r8[0x0]
80005934:	f0 f8 05 34 	ld.w	r8,r8[1332]
80005938:	10 9c       	mov	r12,r8
8000593a:	f0 16 00 02 	mcall	r6[8]
8000593e:	e0 68 33 33 	mov	r8,13107
80005942:	ea 18 33 33 	orh	r8,0x3333
80005946:	e0 69 33 33 	mov	r9,13107
8000594a:	ea 19 3f d3 	orh	r9,0x3fd3
8000594e:	f0 16 00 11 	mcall	r6[68]
80005952:	14 98       	mov	r8,r10
80005954:	16 99       	mov	r9,r11
80005956:	10 9a       	mov	r10,r8
80005958:	12 9b       	mov	r11,r9
8000595a:	f0 16 00 08 	mcall	r6[32]
8000595e:	18 98       	mov	r8,r12
80005960:	eb 48 05 34 	st.w	r5[1332],r8
		centralData->stabiliser_stack.velocity_stabiliser.output.theading = input.theading;
80005964:	ec f8 00 00 	ld.w	r8,r6[0]
80005968:	70 08       	ld.w	r8,r8[0x0]
8000596a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000596e:	f1 49 05 44 	st.w	r8[1348],r9
		input = centralData->stabiliser_stack.velocity_stabiliser.output;
80005972:	ec f8 00 00 	ld.w	r8,r6[0]
80005976:	70 09       	ld.w	r9,r8[0x0]
80005978:	ee c8 00 48 	sub	r8,r7,72
8000597c:	f2 c9 fa d8 	sub	r9,r9,-1320
80005980:	f0 ca 00 00 	sub	r10,r8,0
80005984:	f2 cb 00 00 	sub	r11,r9,0
80005988:	76 0c       	ld.w	r12,r11[0x0]
8000598a:	95 0c       	st.w	r10[0x0],r12
8000598c:	76 1c       	ld.w	r12,r11[0x4]
8000598e:	95 1c       	st.w	r10[0x4],r12
80005990:	76 2c       	ld.w	r12,r11[0x8]
80005992:	95 2c       	st.w	r10[0x8],r12
80005994:	76 3b       	ld.w	r11,r11[0xc]
80005996:	95 3b       	st.w	r10[0xc],r11
80005998:	f0 ca ff f0 	sub	r10,r8,-16
8000599c:	f2 cb ff f0 	sub	r11,r9,-16
800059a0:	76 0c       	ld.w	r12,r11[0x0]
800059a2:	95 0c       	st.w	r10[0x0],r12
800059a4:	76 1c       	ld.w	r12,r11[0x4]
800059a6:	95 1c       	st.w	r10[0x4],r12
800059a8:	76 2c       	ld.w	r12,r11[0x8]
800059aa:	95 2c       	st.w	r10[0x8],r12
800059ac:	76 3b       	ld.w	r11,r11[0xc]
800059ae:	95 3b       	st.w	r10[0xc],r11
800059b0:	f2 ea 00 20 	ld.d	r10,r9[32]
800059b4:	f0 eb 00 20 	st.d	r8[32],r10
800059b8:	72 a9       	ld.w	r9,r9[0x28]
800059ba:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
800059bc:	ee f9 ff b8 	ld.w	r9,r7[-72]
800059c0:	ee f8 ff b4 	ld.w	r8,r7[-76]
800059c4:	70 68       	ld.w	r8,r8[0x18]
800059c6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800059ca:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
800059ce:	ee f9 ff bc 	ld.w	r9,r7[-68]
800059d2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800059d6:	70 58       	ld.w	r8,r8[0x14]
800059d8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800059dc:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
800059e0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800059e4:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
800059e8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800059ec:	70 98       	ld.w	r8,r8[0x24]
800059ee:	58 18       	cp.w	r8,1
800059f0:	c1 21       	brne	80005a14 <cascade_stabilise_copter+0x27c>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
800059f2:	ee f5 ff ec 	ld.w	r5,r7[-20]
800059f6:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059fa:	ee f8 ff b0 	ld.w	r8,r7[-80]
800059fe:	71 b8       	ld.w	r8,r8[0x6c]
80005a00:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a04:	10 9c       	mov	r12,r8
80005a06:	fe b0 fd 77 	rcall	800054f4 <calc_smaller_angle>
80005a0a:	18 98       	mov	r8,r12
80005a0c:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005a10:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80005a14:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005a18:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
80005a1c:	ec f8 00 00 	ld.w	r8,r6[0]
80005a20:	70 08       	ld.w	r8,r8[0x0]
80005a22:	f0 f9 01 40 	ld.w	r9,r8[320]
80005a26:	ec f8 00 00 	ld.w	r8,r6[0]
80005a2a:	70 08       	ld.w	r8,r8[0x0]
80005a2c:	f0 c8 fd 24 	sub	r8,r8,-732
80005a30:	ee ca 00 1c 	sub	r10,r7,28
80005a34:	12 9b       	mov	r11,r9
80005a36:	10 9c       	mov	r12,r8
80005a38:	f0 16 00 ca 	mcall	r6[808]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
80005a3c:	ec f8 00 00 	ld.w	r8,r6[0]
80005a40:	70 09       	ld.w	r9,r8[0x0]
80005a42:	ee c8 00 48 	sub	r8,r7,72
80005a46:	f2 c9 fc 14 	sub	r9,r9,-1004
80005a4a:	f0 ca 00 00 	sub	r10,r8,0
80005a4e:	f2 cb 00 00 	sub	r11,r9,0
80005a52:	76 0c       	ld.w	r12,r11[0x0]
80005a54:	95 0c       	st.w	r10[0x0],r12
80005a56:	76 1c       	ld.w	r12,r11[0x4]
80005a58:	95 1c       	st.w	r10[0x4],r12
80005a5a:	76 2c       	ld.w	r12,r11[0x8]
80005a5c:	95 2c       	st.w	r10[0x8],r12
80005a5e:	76 3b       	ld.w	r11,r11[0xc]
80005a60:	95 3b       	st.w	r10[0xc],r11
80005a62:	f0 ca ff f0 	sub	r10,r8,-16
80005a66:	f2 cb ff f0 	sub	r11,r9,-16
80005a6a:	76 0c       	ld.w	r12,r11[0x0]
80005a6c:	95 0c       	st.w	r10[0x0],r12
80005a6e:	76 1c       	ld.w	r12,r11[0x4]
80005a70:	95 1c       	st.w	r10[0x4],r12
80005a72:	76 2c       	ld.w	r12,r11[0x8]
80005a74:	95 2c       	st.w	r10[0x8],r12
80005a76:	76 3b       	ld.w	r11,r11[0xc]
80005a78:	95 3b       	st.w	r10[0xc],r11
80005a7a:	f2 ea 00 20 	ld.d	r10,r9[32]
80005a7e:	f0 eb 00 20 	st.d	r8[32],r10
80005a82:	72 a9       	ld.w	r9,r9[0x28]
80005a84:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005a86:	30 08       	mov	r8,0
80005a88:	ef 48 ff f4 	st.w	r7[-12],r8
80005a8c:	c1 e8       	rjmp	80005ac8 <cascade_stabilise_copter+0x330>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80005a8e:	ee fa ff f4 	ld.w	r10,r7[-12]
80005a92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a96:	a3 68       	lsl	r8,0x2
80005a98:	ee 08 00 08 	add	r8,r7,r8
80005a9c:	f0 f9 ff b8 	ld.w	r9,r8[-72]
80005aa0:	ee fb ff f4 	ld.w	r11,r7[-12]
80005aa4:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005aa8:	2e 2b       	sub	r11,-30
80005aaa:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80005aae:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005ab2:	f4 08 15 02 	lsl	r8,r10,0x2
80005ab6:	ee 08 00 08 	add	r8,r7,r8
80005aba:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005abe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ac2:	2f f8       	sub	r8,-1
80005ac4:	ef 48 ff f4 	st.w	r7[-12],r8
80005ac8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005acc:	58 28       	cp.w	r8,2
80005ace:	fe 9a ff e0 	brle	80005a8e <cascade_stabilise_copter+0x2f6>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
80005ad2:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005ad6:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
80005ada:	ec f8 00 00 	ld.w	r8,r6[0]
80005ade:	70 08       	ld.w	r8,r8[0x0]
80005ae0:	f0 f9 01 40 	ld.w	r9,r8[320]
80005ae4:	ec f8 00 00 	ld.w	r8,r6[0]
80005ae8:	70 08       	ld.w	r8,r8[0x0]
80005aea:	f0 c8 fe 60 	sub	r8,r8,-416
80005aee:	ee ca 00 1c 	sub	r10,r7,28
80005af2:	12 9b       	mov	r11,r9
80005af4:	10 9c       	mov	r12,r8
80005af6:	f0 16 00 ca 	mcall	r6[808]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
80005afa:	ec f8 00 00 	ld.w	r8,r6[0]
80005afe:	70 08       	ld.w	r8,r8[0x0]
80005b00:	f0 c8 fd 50 	sub	r8,r8,-688
80005b04:	10 9c       	mov	r12,r8
80005b06:	f0 16 01 e6 	mcall	r6[1944]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
	#endif
	#endif
	
}
80005b0a:	2e bd       	sub	sp,-84
80005b0c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80005b10:	80 00       	ld.sh	r0,r0[0x0]
80005b12:	56 28       	stdsp	sp[0x188],r8

80005b14 <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
80005b14:	eb cd 40 e0 	pushm	r5-r7,lr
80005b18:	1a 97       	mov	r7,sp
80005b1a:	20 6d       	sub	sp,24
80005b1c:	4e 96       	lddpc	r6,80005cc0 <mix_to_servos_diag_quad+0x1ac>
80005b1e:	1e 26       	rsub	r6,pc
80005b20:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80005b24:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b28:	70 39       	ld.w	r9,r8[0xc]
80005b2a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b2e:	70 1a       	ld.w	r10,r8[0x4]
80005b30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b34:	70 08       	ld.w	r8,r8[0x0]
80005b36:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005b3a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b42:	70 28       	ld.w	r8,r8[0x8]
80005b44:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005b48:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
80005b4c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b50:	70 39       	ld.w	r9,r8[0xc]
80005b52:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b56:	70 0a       	ld.w	r10,r8[0x0]
80005b58:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b5c:	70 18       	ld.w	r8,r8[0x4]
80005b5e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005b62:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b66:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b6a:	70 28       	ld.w	r8,r8[0x8]
80005b6c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005b70:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80005b74:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b78:	70 39       	ld.w	r9,r8[0xc]
80005b7a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b7e:	70 08       	ld.w	r8,r8[0x0]
80005b80:	10 9a       	mov	r10,r8
80005b82:	ee 1a 80 00 	eorh	r10,0x8000
80005b86:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b8a:	70 18       	ld.w	r8,r8[0x4]
80005b8c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005b90:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b94:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005b98:	70 28       	ld.w	r8,r8[0x8]
80005b9a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005b9e:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
80005ba2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ba6:	70 39       	ld.w	r9,r8[0xc]
80005ba8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005bac:	70 0a       	ld.w	r10,r8[0x0]
80005bae:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005bb2:	70 18       	ld.w	r8,r8[0x4]
80005bb4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005bb8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005bbc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005bc0:	70 28       	ld.w	r8,r8[0x8]
80005bc2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005bc6:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005bca:	30 08       	mov	r8,0
80005bcc:	ef 48 ff fc 	st.w	r7[-4],r8
80005bd0:	c4 98       	rjmp	80005c62 <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005bd6:	a3 68       	lsl	r8,0x2
80005bd8:	ee 08 00 08 	add	r8,r7,r8
80005bdc:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005be0:	10 9c       	mov	r12,r8
80005be2:	f0 16 00 02 	mcall	r6[8]
80005be6:	30 05       	mov	r5,0
80005be8:	e0 68 cc cd 	mov	r8,52429
80005bec:	ea 18 cc cc 	orh	r8,0xcccc
80005bf0:	e0 69 cc cc 	mov	r9,52428
80005bf4:	ea 19 bf ec 	orh	r9,0xbfec
80005bf8:	f0 16 00 1d 	mcall	r6[116]
80005bfc:	18 98       	mov	r8,r12
80005bfe:	58 08       	cp.w	r8,0
80005c00:	c0 20       	breq	80005c04 <mix_to_servos_diag_quad+0xf0>
80005c02:	30 15       	mov	r5,1
80005c04:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005c08:	c0 c0       	breq	80005c20 <mix_to_servos_diag_quad+0x10c>
80005c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c0e:	a3 68       	lsl	r8,0x2
80005c10:	ee 08 00 08 	add	r8,r7,r8
80005c14:	e0 69 66 66 	mov	r9,26214
80005c18:	ea 19 bf 66 	orh	r9,0xbf66
80005c1c:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c24:	a3 68       	lsl	r8,0x2
80005c26:	ee 08 00 08 	add	r8,r7,r8
80005c2a:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005c2e:	30 18       	mov	r8,1
80005c30:	fc 19 3f 80 	movh	r9,0x3f80
80005c34:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005c38:	e0 8c 00 04 	brvs	80005c40 <mix_to_servos_diag_quad+0x12c>
80005c3c:	e0 89 00 03 	brgt	80005c42 <mix_to_servos_diag_quad+0x12e>
80005c40:	30 08       	mov	r8,0
80005c42:	5c 58       	castu.b	r8
80005c44:	c0 a0       	breq	80005c58 <mix_to_servos_diag_quad+0x144>
80005c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c4a:	a3 68       	lsl	r8,0x2
80005c4c:	ee 08 00 08 	add	r8,r7,r8
80005c50:	fc 19 3f 80 	movh	r9,0x3f80
80005c54:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c5c:	2f f8       	sub	r8,-1
80005c5e:	ef 48 ff fc 	st.w	r7[-4],r8
80005c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c66:	58 38       	cp.w	r8,3
80005c68:	fe 9a ff b5 	brle	80005bd2 <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005c6c:	30 08       	mov	r8,0
80005c6e:	ef 48 ff fc 	st.w	r7[-4],r8
80005c72:	c1 f8       	rjmp	80005cb0 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80005c74:	ec f8 00 00 	ld.w	r8,r6[0]
80005c78:	70 0a       	ld.w	r10,r8[0x0]
80005c7a:	ee fb ff fc 	ld.w	r11,r7[-4]
80005c7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c82:	a3 68       	lsl	r8,0x2
80005c84:	ee 08 00 08 	add	r8,r7,r8
80005c88:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80005c8c:	fc 18 43 fa 	movh	r8,0x43fa
80005c90:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005c94:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80005c98:	f6 08 15 04 	lsl	r8,r11,0x4
80005c9c:	f4 08 00 08 	add	r8,r10,r8
80005ca0:	f0 c8 f9 14 	sub	r8,r8,-1772
80005ca4:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005ca6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005caa:	2f f8       	sub	r8,-1
80005cac:	ef 48 ff fc 	st.w	r7[-4],r8
80005cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cb4:	58 38       	cp.w	r8,3
80005cb6:	fe 9a ff df 	brle	80005c74 <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
80005cba:	2f ad       	sub	sp,-24
80005cbc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005cc0:	80 00       	ld.sh	r0,r0[0x0]
80005cc2:	59 a2       	cp.w	r2,26

80005cc4 <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
80005cc4:	eb cd 40 e0 	pushm	r5-r7,lr
80005cc8:	1a 97       	mov	r7,sp
80005cca:	20 6d       	sub	sp,24
80005ccc:	4d e6       	lddpc	r6,80005e44 <mix_to_servos_cross_quad+0x180>
80005cce:	1e 26       	rsub	r6,pc
80005cd0:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
80005cd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cd8:	70 39       	ld.w	r9,r8[0xc]
80005cda:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cde:	70 18       	ld.w	r8,r8[0x4]
80005ce0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005ce4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ce8:	70 28       	ld.w	r8,r8[0x8]
80005cea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005cee:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
80005cf2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cf6:	70 39       	ld.w	r9,r8[0xc]
80005cf8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005cfc:	70 08       	ld.w	r8,r8[0x0]
80005cfe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005d02:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d06:	70 28       	ld.w	r8,r8[0x8]
80005d08:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d0c:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80005d10:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d14:	70 39       	ld.w	r9,r8[0xc]
80005d16:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d1a:	70 18       	ld.w	r8,r8[0x4]
80005d1c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005d20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d24:	70 28       	ld.w	r8,r8[0x8]
80005d26:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005d2a:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80005d2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d32:	70 39       	ld.w	r9,r8[0xc]
80005d34:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d38:	70 08       	ld.w	r8,r8[0x0]
80005d3a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d42:	70 28       	ld.w	r8,r8[0x8]
80005d44:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d48:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005d4c:	30 08       	mov	r8,0
80005d4e:	ef 48 ff fc 	st.w	r7[-4],r8
80005d52:	c4 98       	rjmp	80005de4 <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005d54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d58:	a3 68       	lsl	r8,0x2
80005d5a:	ee 08 00 08 	add	r8,r7,r8
80005d5e:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005d62:	10 9c       	mov	r12,r8
80005d64:	f0 16 00 02 	mcall	r6[8]
80005d68:	30 05       	mov	r5,0
80005d6a:	e0 68 cc cd 	mov	r8,52429
80005d6e:	ea 18 cc cc 	orh	r8,0xcccc
80005d72:	e0 69 cc cc 	mov	r9,52428
80005d76:	ea 19 bf ec 	orh	r9,0xbfec
80005d7a:	f0 16 00 1d 	mcall	r6[116]
80005d7e:	18 98       	mov	r8,r12
80005d80:	58 08       	cp.w	r8,0
80005d82:	c0 20       	breq	80005d86 <mix_to_servos_cross_quad+0xc2>
80005d84:	30 15       	mov	r5,1
80005d86:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005d8a:	c0 c0       	breq	80005da2 <mix_to_servos_cross_quad+0xde>
80005d8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d90:	a3 68       	lsl	r8,0x2
80005d92:	ee 08 00 08 	add	r8,r7,r8
80005d96:	e0 69 66 66 	mov	r9,26214
80005d9a:	ea 19 bf 66 	orh	r9,0xbf66
80005d9e:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005da6:	a3 68       	lsl	r8,0x2
80005da8:	ee 08 00 08 	add	r8,r7,r8
80005dac:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005db0:	30 18       	mov	r8,1
80005db2:	fc 19 3f 80 	movh	r9,0x3f80
80005db6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005dba:	e0 8c 00 04 	brvs	80005dc2 <mix_to_servos_cross_quad+0xfe>
80005dbe:	e0 89 00 03 	brgt	80005dc4 <mix_to_servos_cross_quad+0x100>
80005dc2:	30 08       	mov	r8,0
80005dc4:	5c 58       	castu.b	r8
80005dc6:	c0 a0       	breq	80005dda <mix_to_servos_cross_quad+0x116>
80005dc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005dcc:	a3 68       	lsl	r8,0x2
80005dce:	ee 08 00 08 	add	r8,r7,r8
80005dd2:	fc 19 3f 80 	movh	r9,0x3f80
80005dd6:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005dda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005dde:	2f f8       	sub	r8,-1
80005de0:	ef 48 ff fc 	st.w	r7[-4],r8
80005de4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005de8:	58 38       	cp.w	r8,3
80005dea:	fe 9a ff b5 	brle	80005d54 <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005dee:	30 08       	mov	r8,0
80005df0:	ef 48 ff fc 	st.w	r7[-4],r8
80005df4:	c1 f8       	rjmp	80005e32 <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80005df6:	ec f8 00 00 	ld.w	r8,r6[0]
80005dfa:	70 0a       	ld.w	r10,r8[0x0]
80005dfc:	ee fb ff fc 	ld.w	r11,r7[-4]
80005e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e04:	a3 68       	lsl	r8,0x2
80005e06:	ee 08 00 08 	add	r8,r7,r8
80005e0a:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80005e0e:	fc 18 43 fa 	movh	r8,0x43fa
80005e12:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005e16:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80005e1a:	f6 08 15 04 	lsl	r8,r11,0x4
80005e1e:	f4 08 00 08 	add	r8,r10,r8
80005e22:	f0 c8 f9 14 	sub	r8,r8,-1772
80005e26:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e2c:	2f f8       	sub	r8,-1
80005e2e:	ef 48 ff fc 	st.w	r7[-4],r8
80005e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e36:	58 38       	cp.w	r8,3
80005e38:	fe 9a ff df 	brle	80005df6 <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
80005e3c:	2f ad       	sub	sp,-24
80005e3e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005e42:	00 00       	add	r0,r0
80005e44:	80 00       	ld.sh	r0,r0[0x0]
80005e46:	5b 52       	cp.w	r2,-11

80005e48 <init_analog_monitor>:
80005e48:	eb cd 40 c0 	pushm	r6-r7,lr
80005e4c:	1a 97       	mov	r7,sp
80005e4e:	49 06       	lddpc	r6,80005e8c <init_analog_monitor+0x44>
80005e50:	1e 26       	rsub	r6,pc
80005e52:	30 49       	mov	r9,4
80005e54:	31 0a       	mov	r10,16
80005e56:	30 1b       	mov	r11,1
80005e58:	e0 7c 86 a0 	mov	r12,100000
80005e5c:	f0 16 02 0d 	mcall	r6[2100]
80005e60:	30 0a       	mov	r10,0
80005e62:	30 9b       	mov	r11,9
80005e64:	30 6c       	mov	r12,6
80005e66:	f0 16 00 91 	mcall	r6[580]
80005e6a:	30 0a       	mov	r10,0
80005e6c:	30 9b       	mov	r11,9
80005e6e:	30 7c       	mov	r12,7
80005e70:	f0 16 00 91 	mcall	r6[580]
80005e74:	30 0a       	mov	r10,0
80005e76:	30 2b       	mov	r11,2
80005e78:	30 ac       	mov	r12,10
80005e7a:	f0 16 00 91 	mcall	r6[580]
80005e7e:	30 0a       	mov	r10,0
80005e80:	30 3b       	mov	r11,3
80005e82:	30 ac       	mov	r12,10
80005e84:	f0 16 00 91 	mcall	r6[580]
80005e88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005e8c:	80 00       	ld.sh	r0,r0[0x0]
80005e8e:	5c d4       	com	r4

80005e90 <trigger_analog_monitor>:
80005e90:	eb cd 40 c0 	pushm	r6-r7,lr
80005e94:	1a 97       	mov	r7,sp
80005e96:	48 76       	lddpc	r6,80005eb0 <trigger_analog_monitor+0x20>
80005e98:	1e 26       	rsub	r6,pc
80005e9a:	30 08       	mov	r8,0
80005e9c:	36 49       	mov	r9,100
80005e9e:	30 aa       	mov	r10,10
80005ea0:	30 4b       	mov	r11,4
80005ea2:	ec fc 03 b8 	ld.w	r12,r6[952]
80005ea6:	f0 16 01 8e 	mcall	r6[1592]
80005eaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005eae:	00 00       	add	r0,r0
80005eb0:	80 00       	ld.sh	r0,r0[0x0]
80005eb2:	5d 1c       	icall	r12

80005eb4 <get_monitored_avg>:
80005eb4:	eb cd 40 c0 	pushm	r6-r7,lr
80005eb8:	1a 97       	mov	r7,sp
80005eba:	20 3d       	sub	sp,12
80005ebc:	49 c6       	lddpc	r6,80005f2c <get_monitored_avg+0x78>
80005ebe:	1e 26       	rsub	r6,pc
80005ec0:	ef 4c ff f4 	st.w	r7[-12],r12
80005ec4:	30 08       	mov	r8,0
80005ec6:	ef 48 ff f8 	st.w	r7[-8],r8
80005eca:	30 08       	mov	r8,0
80005ecc:	ef 48 ff fc 	st.w	r7[-4],r8
80005ed0:	c1 98       	rjmp	80005f02 <get_monitored_avg+0x4e>
80005ed2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ed6:	f0 09 15 02 	lsl	r9,r8,0x2
80005eda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ede:	10 09       	add	r9,r8
80005ee0:	ec f8 03 b8 	ld.w	r8,r6[952]
80005ee4:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80005ee8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80005eec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ef0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005ef4:	ef 48 ff f8 	st.w	r7[-8],r8
80005ef8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005efc:	2f f8       	sub	r8,-1
80005efe:	ef 48 ff fc 	st.w	r7[-4],r8
80005f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f06:	58 98       	cp.w	r8,9
80005f08:	fe 9a ff e5 	brle	80005ed2 <get_monitored_avg+0x1e>
80005f0c:	fc 1b 41 20 	movh	r11,0x4120
80005f10:	ee fc ff f8 	ld.w	r12,r7[-8]
80005f14:	f0 16 00 0a 	mcall	r6[40]
80005f18:	18 98       	mov	r8,r12
80005f1a:	ef 48 ff f8 	st.w	r7[-8],r8
80005f1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f22:	10 9c       	mov	r12,r8
80005f24:	2f dd       	sub	sp,-12
80005f26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005f2a:	00 00       	add	r0,r0
80005f2c:	80 00       	ld.sh	r0,r0[0x0]
80005f2e:	5d 42       	*unknown*

80005f30 <get_battery_rail>:
80005f30:	eb cd 40 c0 	pushm	r6-r7,lr
80005f34:	1a 97       	mov	r7,sp
80005f36:	48 f6       	lddpc	r6,80005f70 <get_battery_rail+0x40>
80005f38:	1e 26       	rsub	r6,pc
80005f3a:	30 3c       	mov	r12,3
80005f3c:	f0 16 00 87 	mcall	r6[540]
80005f40:	18 98       	mov	r8,r12
80005f42:	10 9c       	mov	r12,r8
80005f44:	f0 16 00 02 	mcall	r6[8]
80005f48:	e0 68 67 a1 	mov	r8,26529
80005f4c:	ea 18 ea b3 	orh	r8,0xeab3
80005f50:	e0 69 b5 73 	mov	r9,46451
80005f54:	ea 19 bf 65 	orh	r9,0xbf65
80005f58:	f0 16 00 03 	mcall	r6[12]
80005f5c:	14 98       	mov	r8,r10
80005f5e:	16 99       	mov	r9,r11
80005f60:	10 9a       	mov	r10,r8
80005f62:	12 9b       	mov	r11,r9
80005f64:	f0 16 00 08 	mcall	r6[32]
80005f68:	18 98       	mov	r8,r12
80005f6a:	10 9c       	mov	r12,r8
80005f6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005f70:	80 00       	ld.sh	r0,r0[0x0]
80005f72:	5d bc       	*unknown*

80005f74 <get_internal_rail>:
80005f74:	eb cd 40 c0 	pushm	r6-r7,lr
80005f78:	1a 97       	mov	r7,sp
80005f7a:	48 f6       	lddpc	r6,80005fb4 <get_internal_rail+0x40>
80005f7c:	1e 26       	rsub	r6,pc
80005f7e:	30 2c       	mov	r12,2
80005f80:	f0 16 00 87 	mcall	r6[540]
80005f84:	18 98       	mov	r8,r12
80005f86:	10 9c       	mov	r12,r8
80005f88:	f0 16 00 02 	mcall	r6[8]
80005f8c:	e0 68 67 a1 	mov	r8,26529
80005f90:	ea 18 ea b3 	orh	r8,0xeab3
80005f94:	e0 69 b5 73 	mov	r9,46451
80005f98:	ea 19 bf 65 	orh	r9,0xbf65
80005f9c:	f0 16 00 03 	mcall	r6[12]
80005fa0:	14 98       	mov	r8,r10
80005fa2:	16 99       	mov	r9,r11
80005fa4:	10 9a       	mov	r10,r8
80005fa6:	12 9b       	mov	r11,r9
80005fa8:	f0 16 00 08 	mcall	r6[32]
80005fac:	18 98       	mov	r8,r12
80005fae:	10 9c       	mov	r12,r8
80005fb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005fb4:	80 00       	ld.sh	r0,r0[0x0]
80005fb6:	5e 00       	reteq	r0

80005fb8 <get_6V_analog_rail>:
80005fb8:	eb cd 40 c0 	pushm	r6-r7,lr
80005fbc:	1a 97       	mov	r7,sp
80005fbe:	48 f6       	lddpc	r6,80005ff8 <get_6V_analog_rail+0x40>
80005fc0:	1e 26       	rsub	r6,pc
80005fc2:	30 0c       	mov	r12,0
80005fc4:	f0 16 00 87 	mcall	r6[540]
80005fc8:	18 98       	mov	r8,r12
80005fca:	10 9c       	mov	r12,r8
80005fcc:	f0 16 00 02 	mcall	r6[8]
80005fd0:	e0 68 61 13 	mov	r8,24851
80005fd4:	ea 18 d3 c3 	orh	r8,0xd3c3
80005fd8:	e0 69 65 2b 	mov	r9,25899
80005fdc:	ea 19 3f 59 	orh	r9,0x3f59
80005fe0:	f0 16 00 03 	mcall	r6[12]
80005fe4:	14 98       	mov	r8,r10
80005fe6:	16 99       	mov	r9,r11
80005fe8:	10 9a       	mov	r10,r8
80005fea:	12 9b       	mov	r11,r9
80005fec:	f0 16 00 08 	mcall	r6[32]
80005ff0:	18 98       	mov	r8,r12
80005ff2:	10 9c       	mov	r12,r8
80005ff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005ff8:	80 00       	ld.sh	r0,r0[0x0]
80005ffa:	5e 44       	retge	r4

80005ffc <get_5V_analog_rail>:
80005ffc:	eb cd 40 c0 	pushm	r6-r7,lr
80006000:	1a 97       	mov	r7,sp
80006002:	48 f6       	lddpc	r6,8000603c <get_5V_analog_rail+0x40>
80006004:	1e 26       	rsub	r6,pc
80006006:	30 1c       	mov	r12,1
80006008:	f0 16 00 87 	mcall	r6[540]
8000600c:	18 98       	mov	r8,r12
8000600e:	10 9c       	mov	r12,r8
80006010:	f0 16 00 02 	mcall	r6[8]
80006014:	e0 68 61 13 	mov	r8,24851
80006018:	ea 18 d3 c3 	orh	r8,0xd3c3
8000601c:	e0 69 65 2b 	mov	r9,25899
80006020:	ea 19 3f 59 	orh	r9,0x3f59
80006024:	f0 16 00 03 	mcall	r6[12]
80006028:	14 98       	mov	r8,r10
8000602a:	16 99       	mov	r9,r11
8000602c:	10 9a       	mov	r10,r8
8000602e:	12 9b       	mov	r11,r9
80006030:	f0 16 00 08 	mcall	r6[32]
80006034:	18 98       	mov	r8,r12
80006036:	10 9c       	mov	r12,r8
80006038:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000603c:	80 00       	ld.sh	r0,r0[0x0]
8000603e:	5e 88       	retls	r8

80006040 <init_time_keeper>:
80006040:	eb cd 40 c0 	pushm	r6-r7,lr
80006044:	1a 97       	mov	r7,sp
80006046:	48 86       	lddpc	r6,80006064 <init_time_keeper+0x24>
80006048:	1e 26       	rsub	r6,pc
8000604a:	30 09       	mov	r9,0
8000604c:	30 5a       	mov	r10,5
8000604e:	30 2b       	mov	r11,2
80006050:	fe 7c 0c 00 	mov	r12,-62464
80006054:	f0 16 01 7b 	mcall	r6[1516]
80006058:	fe 7c 0c 00 	mov	r12,-62464
8000605c:	f0 16 01 dd 	mcall	r6[1908]
80006060:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006064:	80 00       	ld.sh	r0,r0[0x0]
80006066:	5e cc       	retvs	r12

80006068 <get_time>:
80006068:	eb cd 40 c0 	pushm	r6-r7,lr
8000606c:	1a 97       	mov	r7,sp
8000606e:	48 a6       	lddpc	r6,80006094 <get_time+0x2c>
80006070:	1e 26       	rsub	r6,pc
80006072:	f0 16 00 4d 	mcall	r6[308]
80006076:	18 98       	mov	r8,r12
80006078:	10 9c       	mov	r12,r8
8000607a:	f0 16 00 b9 	mcall	r6[740]
8000607e:	18 98       	mov	r8,r12
80006080:	10 9c       	mov	r12,r8
80006082:	f0 16 00 02 	mcall	r6[8]
80006086:	14 98       	mov	r8,r10
80006088:	16 99       	mov	r9,r11
8000608a:	10 9a       	mov	r10,r8
8000608c:	12 9b       	mov	r11,r9
8000608e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006092:	00 00       	add	r0,r0
80006094:	80 00       	ld.sh	r0,r0[0x0]
80006096:	5e f4       	retal	r4

80006098 <get_millis>:
80006098:	eb cd 40 c0 	pushm	r6-r7,lr
8000609c:	1a 97       	mov	r7,sp
8000609e:	48 96       	lddpc	r6,800060c0 <get_millis+0x28>
800060a0:	1e 26       	rsub	r6,pc
800060a2:	f0 16 00 4d 	mcall	r6[308]
800060a6:	18 99       	mov	r9,r12
800060a8:	e0 68 4d d3 	mov	r8,19923
800060ac:	ea 18 10 62 	orh	r8,0x1062
800060b0:	f2 08 06 48 	mulu.d	r8,r9,r8
800060b4:	f2 08 16 06 	lsr	r8,r9,0x6
800060b8:	10 9c       	mov	r12,r8
800060ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060be:	00 00       	add	r0,r0
800060c0:	80 00       	ld.sh	r0,r0[0x0]
800060c2:	5f 24       	srhs	r4

800060c4 <get_micros>:
800060c4:	eb cd 40 c0 	pushm	r6-r7,lr
800060c8:	1a 97       	mov	r7,sp
800060ca:	48 56       	lddpc	r6,800060dc <get_micros+0x18>
800060cc:	1e 26       	rsub	r6,pc
800060ce:	f0 16 00 4d 	mcall	r6[308]
800060d2:	18 98       	mov	r8,r12
800060d4:	10 9c       	mov	r12,r8
800060d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060da:	00 00       	add	r0,r0
800060dc:	80 00       	ld.sh	r0,r0[0x0]
800060de:	5f 50       	srlt	r0

800060e0 <get_time_ticks>:
800060e0:	eb cd 40 c0 	pushm	r6-r7,lr
800060e4:	1a 97       	mov	r7,sp
800060e6:	48 66       	lddpc	r6,800060fc <get_time_ticks+0x1c>
800060e8:	1e 26       	rsub	r6,pc
800060ea:	fe 7c 0c 00 	mov	r12,-62464
800060ee:	f0 16 02 10 	mcall	r6[2112]
800060f2:	18 98       	mov	r8,r12
800060f4:	10 9c       	mov	r12,r8
800060f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060fa:	00 00       	add	r0,r0
800060fc:	80 00       	ld.sh	r0,r0[0x0]
800060fe:	5f 6c       	srmi	r12

80006100 <ticks_to_seconds>:
80006100:	eb cd 40 c0 	pushm	r6-r7,lr
80006104:	1a 97       	mov	r7,sp
80006106:	20 1d       	sub	sp,4
80006108:	48 d6       	lddpc	r6,8000613c <ticks_to_seconds+0x3c>
8000610a:	1e 26       	rsub	r6,pc
8000610c:	ef 4c ff fc 	st.w	r7[-4],r12
80006110:	ee fc ff fc 	ld.w	r12,r7[-4]
80006114:	f0 16 00 51 	mcall	r6[324]
80006118:	30 08       	mov	r8,0
8000611a:	e0 69 84 80 	mov	r9,33920
8000611e:	ea 19 41 2e 	orh	r9,0x412e
80006122:	f0 16 00 0c 	mcall	r6[48]
80006126:	14 98       	mov	r8,r10
80006128:	16 99       	mov	r9,r11
8000612a:	10 9a       	mov	r10,r8
8000612c:	12 9b       	mov	r11,r9
8000612e:	f0 16 00 08 	mcall	r6[32]
80006132:	18 98       	mov	r8,r12
80006134:	10 9c       	mov	r12,r8
80006136:	2f fd       	sub	sp,-4
80006138:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000613c:	80 00       	ld.sh	r0,r0[0x0]
8000613e:	5f 8e       	srls	lr

80006140 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80006140:	eb cd 40 c0 	pushm	r6-r7,lr
80006144:	1a 97       	mov	r7,sp
80006146:	20 3d       	sub	sp,12
80006148:	49 06       	lddpc	r6,80006188 <mav_array_memcpy+0x48>
8000614a:	1e 26       	rsub	r6,pc
8000614c:	ef 4c ff fc 	st.w	r7[-4],r12
80006150:	ef 4b ff f8 	st.w	r7[-8],r11
80006154:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80006158:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000615c:	58 08       	cp.w	r8,0
8000615e:	c0 91       	brne	80006170 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80006160:	ee fa ff f4 	ld.w	r10,r7[-12]
80006164:	30 0b       	mov	r11,0
80006166:	ee fc ff fc 	ld.w	r12,r7[-4]
8000616a:	f0 16 00 30 	mcall	r6[192]
8000616e:	c0 98       	rjmp	80006180 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80006170:	ee fa ff f4 	ld.w	r10,r7[-12]
80006174:	ee fb ff f8 	ld.w	r11,r7[-8]
80006178:	ee fc ff fc 	ld.w	r12,r7[-4]
8000617c:	f0 16 00 21 	mcall	r6[132]
	}
}
80006180:	2f dd       	sub	sp,-12
80006182:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006186:	00 00       	add	r0,r0
80006188:	80 00       	ld.sh	r0,r0[0x0]
8000618a:	5f ce       	srvs	lr

8000618c <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
8000618c:	eb cd 40 c0 	pushm	r6-r7,lr
80006190:	1a 97       	mov	r7,sp
80006192:	fe f6 02 06 	ld.w	r6,pc[518]
80006196:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80006198:	f0 16 00 32 	mcall	r6[200]
8000619c:	18 99       	mov	r9,r12
8000619e:	ec f8 00 00 	ld.w	r8,r6[0]
800061a2:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
800061a4:	fc 1b 41 20 	movh	r11,0x4120
800061a8:	30 0c       	mov	r12,0
800061aa:	f0 16 00 c3 	mcall	r6[780]
	e_kalman_init(Y,INIT_Y_P);
800061ae:	fc 1b 41 20 	movh	r11,0x4120
800061b2:	30 1c       	mov	r12,1
800061b4:	f0 16 00 c3 	mcall	r6[780]
	e_kalman_init(Z,INIT_Z_P);
800061b8:	fc 1b 41 20 	movh	r11,0x4120
800061bc:	30 2c       	mov	r12,2
800061be:	f0 16 00 c3 	mcall	r6[780]
	Q[0][0]=Q_X0;
800061c2:	ec fa 00 dc 	ld.w	r10,r6[220]
800061c6:	e0 68 a9 fc 	mov	r8,43516
800061ca:	ea 18 d2 f1 	orh	r8,0xd2f1
800061ce:	e0 69 62 4d 	mov	r9,25165
800061d2:	ea 19 3f 50 	orh	r9,0x3f50
800061d6:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800061da:	ec fa 00 dc 	ld.w	r10,r6[220]
800061de:	30 08       	mov	r8,0
800061e0:	30 09       	mov	r9,0
800061e2:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800061e6:	ec fa 00 dc 	ld.w	r10,r6[220]
800061ea:	30 08       	mov	r8,0
800061ec:	30 09       	mov	r9,0
800061ee:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800061f2:	ec fa 00 dc 	ld.w	r10,r6[220]
800061f6:	30 08       	mov	r8,0
800061f8:	30 09       	mov	r9,0
800061fa:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
800061fe:	ec fa 00 dc 	ld.w	r10,r6[220]
80006202:	e0 68 a9 fc 	mov	r8,43516
80006206:	ea 18 d2 f1 	orh	r8,0xd2f1
8000620a:	e0 69 62 4d 	mov	r9,25165
8000620e:	ea 19 3f 50 	orh	r9,0x3f50
80006212:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
80006216:	ec fa 00 dc 	ld.w	r10,r6[220]
8000621a:	30 08       	mov	r8,0
8000621c:	30 09       	mov	r9,0
8000621e:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
80006222:	ec fa 00 dc 	ld.w	r10,r6[220]
80006226:	30 08       	mov	r8,0
80006228:	30 09       	mov	r9,0
8000622a:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
8000622e:	ec fa 00 dc 	ld.w	r10,r6[220]
80006232:	30 08       	mov	r8,0
80006234:	30 09       	mov	r9,0
80006236:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
8000623a:	ec fa 00 dc 	ld.w	r10,r6[220]
8000623e:	e0 68 a9 fc 	mov	r8,43516
80006242:	ea 18 d2 f1 	orh	r8,0xd2f1
80006246:	e0 69 62 4d 	mov	r9,25165
8000624a:	ea 19 3f 50 	orh	r9,0x3f50
8000624e:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
80006252:	ec fa 01 68 	ld.w	r10,r6[360]
80006256:	e0 68 b0 21 	mov	r8,45089
8000625a:	ea 18 68 72 	orh	r8,0x6872
8000625e:	e0 69 ed 91 	mov	r9,60817
80006262:	ea 19 3f d8 	orh	r9,0x3fd8
80006266:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
8000626a:	ec fa 01 68 	ld.w	r10,r6[360]
8000626e:	e0 68 a1 62 	mov	r8,41314
80006272:	ea 18 34 d6 	orh	r8,0x34d6
80006276:	e0 69 38 ef 	mov	r9,14575
8000627a:	ea 19 3f e3 	orh	r9,0x3fe3
8000627e:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
80006282:	ec fa 01 68 	ld.w	r10,r6[360]
80006286:	e0 68 6e 2f 	mov	r8,28207
8000628a:	ea 18 01 a3 	orh	r8,0x1a3
8000628e:	e0 69 05 bc 	mov	r9,1468
80006292:	ea 19 40 05 	orh	r9,0x4005
80006296:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
8000629a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000629e:	e0 68 a9 fc 	mov	r8,43516
800062a2:	ea 18 d2 f1 	orh	r8,0xd2f1
800062a6:	e0 69 62 4d 	mov	r9,25165
800062aa:	ea 19 3f 50 	orh	r9,0x3f50
800062ae:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
800062b2:	ec fa 00 e0 	ld.w	r10,r6[224]
800062b6:	30 08       	mov	r8,0
800062b8:	30 09       	mov	r9,0
800062ba:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800062be:	ec fa 00 e0 	ld.w	r10,r6[224]
800062c2:	30 08       	mov	r8,0
800062c4:	30 09       	mov	r9,0
800062c6:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800062ca:	ec fa 00 e0 	ld.w	r10,r6[224]
800062ce:	30 08       	mov	r8,0
800062d0:	30 09       	mov	r9,0
800062d2:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800062d6:	ec fa 00 e0 	ld.w	r10,r6[224]
800062da:	e0 68 a9 fc 	mov	r8,43516
800062de:	ea 18 d2 f1 	orh	r8,0xd2f1
800062e2:	e0 69 62 4d 	mov	r9,25165
800062e6:	ea 19 3f 50 	orh	r9,0x3f50
800062ea:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800062ee:	ec fa 00 e0 	ld.w	r10,r6[224]
800062f2:	30 08       	mov	r8,0
800062f4:	30 09       	mov	r9,0
800062f6:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
800062fa:	ec fa 00 e0 	ld.w	r10,r6[224]
800062fe:	30 08       	mov	r8,0
80006300:	30 09       	mov	r9,0
80006302:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
80006306:	ec fa 00 e0 	ld.w	r10,r6[224]
8000630a:	30 08       	mov	r8,0
8000630c:	30 09       	mov	r9,0
8000630e:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
80006312:	ec fa 00 e0 	ld.w	r10,r6[224]
80006316:	e0 68 a9 fc 	mov	r8,43516
8000631a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000631e:	e0 69 62 4d 	mov	r9,25165
80006322:	ea 19 3f 50 	orh	r9,0x3f50
80006326:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
8000632a:	ec fa 01 64 	ld.w	r10,r6[356]
8000632e:	e0 68 b0 21 	mov	r8,45089
80006332:	ea 18 68 72 	orh	r8,0x6872
80006336:	e0 69 ed 91 	mov	r9,60817
8000633a:	ea 19 3f d8 	orh	r9,0x3fd8
8000633e:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
80006342:	ec fa 01 64 	ld.w	r10,r6[356]
80006346:	e0 68 a1 62 	mov	r8,41314
8000634a:	ea 18 34 d6 	orh	r8,0x34d6
8000634e:	e0 69 38 ef 	mov	r9,14575
80006352:	ea 19 3f e3 	orh	r9,0x3fe3
80006356:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
8000635a:	ec fa 01 64 	ld.w	r10,r6[356]
8000635e:	e0 68 6e 2f 	mov	r8,28207
80006362:	ea 18 01 a3 	orh	r8,0x1a3
80006366:	e0 69 05 bc 	mov	r9,1468
8000636a:	ea 19 40 05 	orh	r9,0x4005
8000636e:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
80006372:	ec f8 00 00 	ld.w	r8,r6[0]
80006376:	70 09       	ld.w	r9,r8[0x0]
80006378:	30 08       	mov	r8,0
8000637a:	f3 68 0d 64 	st.b	r9[3428],r8
	
	timeLastGpsMsgEstimator = 0;
8000637e:	ec f8 02 90 	ld.w	r8,r6[656]
80006382:	30 09       	mov	r9,0
80006384:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
80006386:	ec f9 02 d4 	ld.w	r9,r6[724]
8000638a:	30 08       	mov	r8,0
8000638c:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
8000638e:	f0 16 01 14 	mcall	r6[1104]
}
80006392:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006396:	00 00       	add	r0,r0
80006398:	80 00       	ld.sh	r0,r0[0x0]
8000639a:	60 1a       	ld.w	r10,r0[0x4]
8000639c:	47 50       	lddsp	r0,sp[0x1d4]
8000639e:	53 20       	stdsp	sp[0xc8],r0
800063a0:	70 6f       	ld.w	pc,r8[0x18]
800063a2:	73 69       	ld.w	r9,r9[0x58]
800063a4:	74 69       	ld.w	r9,r10[0x18]
800063a6:	6f 6e       	ld.w	lr,r7[0x58]
800063a8:	20 69       	sub	r9,6
800063aa:	6e 69       	ld.w	r9,r7[0x18]
800063ac:	74 69       	ld.w	r9,r10[0x18]
800063ae:	61 6c       	ld.w	r12,r0[0x58]
800063b0:	69 7a       	ld.w	r10,r4[0x5c]
800063b2:	65 64       	ld.w	r4,r2[0x58]
800063b4:	21 0a       	sub	r10,16
	...

800063b8 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
800063b8:	eb cd 40 c0 	pushm	r6-r7,lr
800063bc:	1a 97       	mov	r7,sp
800063be:	49 f6       	lddpc	r6,80006438 <init_pos_gps_estimator+0x80>
800063c0:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
800063c2:	ec fc 02 90 	ld.w	r12,r6[656]
800063c6:	f0 16 00 94 	mcall	r6[592]
800063ca:	18 98       	mov	r8,r12
800063cc:	58 08       	cp.w	r8,0
800063ce:	c3 20       	breq	80006432 <init_pos_gps_estimator+0x7a>
800063d0:	ec f8 00 00 	ld.w	r8,r6[0]
800063d4:	70 08       	ld.w	r8,r8[0x0]
800063d6:	f1 38 0d 64 	ld.ub	r8,r8[3428]
800063da:	ec 18 00 01 	eorl	r8,0x1
800063de:	5c 58       	castu.b	r8
800063e0:	c2 90       	breq	80006432 <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
800063e2:	ec f8 00 00 	ld.w	r8,r6[0]
800063e6:	70 09       	ld.w	r9,r8[0x0]
800063e8:	30 18       	mov	r8,1
800063ea:	f3 68 0d 64 	st.b	r9[3428],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
800063ee:	ec f8 00 00 	ld.w	r8,r6[0]
800063f2:	70 0a       	ld.w	r10,r8[0x0]
800063f4:	ec f8 00 00 	ld.w	r8,r6[0]
800063f8:	70 08       	ld.w	r8,r8[0x0]
800063fa:	f0 e8 0b 10 	ld.d	r8,r8[2832]
800063fe:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
80006402:	ec f8 00 00 	ld.w	r8,r6[0]
80006406:	70 0a       	ld.w	r10,r8[0x0]
80006408:	ec f8 00 00 	ld.w	r8,r6[0]
8000640c:	70 08       	ld.w	r8,r8[0x0]
8000640e:	f0 e8 0b 08 	ld.d	r8,r8[2824]
80006412:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
80006416:	ec f8 00 00 	ld.w	r8,r6[0]
8000641a:	70 08       	ld.w	r8,r8[0x0]
8000641c:	ec f9 00 00 	ld.w	r9,r6[0]
80006420:	72 09       	ld.w	r9,r9[0x0]
80006422:	f2 f9 0b 18 	ld.w	r9,r9[2840]
80006426:	f1 49 0d bc 	st.w	r8[3516],r9
		
		dbg_print("GPS position initialized!\n");
8000642a:	fe cc 00 8e 	sub	r12,pc,142
8000642e:	f0 16 00 01 	mcall	r6[4]
	}
}
80006432:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006436:	00 00       	add	r0,r0
80006438:	80 00       	ld.sh	r0,r0[0x0]
8000643a:	62 44       	ld.w	r4,r1[0x10]

8000643c <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
8000643c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80006440:	1a 97       	mov	r7,sp
80006442:	20 4d       	sub	sp,16
80006444:	4d e6       	lddpc	r6,800065bc <e_kalman_init+0x180>
80006446:	1e 26       	rsub	r6,pc
80006448:	ef 4c ff f4 	st.w	r7[-12],r12
8000644c:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80006450:	ec f8 00 00 	ld.w	r8,r6[0]
80006454:	70 0a       	ld.w	r10,r8[0x0]
80006456:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000645a:	12 98       	mov	r8,r9
8000645c:	a1 78       	lsl	r8,0x1
8000645e:	12 08       	add	r8,r9
80006460:	a3 78       	lsl	r8,0x3
80006462:	f4 08 00 08 	add	r8,r10,r8
80006466:	f0 ca f4 a4 	sub	r10,r8,-2908
8000646a:	30 08       	mov	r8,0
8000646c:	30 09       	mov	r9,0
8000646e:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
80006472:	ec f8 00 00 	ld.w	r8,r6[0]
80006476:	70 0a       	ld.w	r10,r8[0x0]
80006478:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000647c:	12 98       	mov	r8,r9
8000647e:	a1 78       	lsl	r8,0x1
80006480:	12 08       	add	r8,r9
80006482:	2f f8       	sub	r8,-1
80006484:	a3 78       	lsl	r8,0x3
80006486:	f4 08 00 08 	add	r8,r10,r8
8000648a:	30 0a       	mov	r10,0
8000648c:	30 0b       	mov	r11,0
8000648e:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
80006492:	ec f8 00 00 	ld.w	r8,r6[0]
80006496:	70 03       	ld.w	r3,r8[0x0]
80006498:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000649c:	ec f8 00 00 	ld.w	r8,r6[0]
800064a0:	70 08       	ld.w	r8,r8[0x0]
800064a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800064a6:	2f d9       	sub	r9,-3
800064a8:	2f 49       	sub	r9,-12
800064aa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800064ae:	10 9c       	mov	r12,r8
800064b0:	f0 16 00 02 	mcall	r6[8]
800064b4:	0a 98       	mov	r8,r5
800064b6:	a1 78       	lsl	r8,0x1
800064b8:	0a 08       	add	r8,r5
800064ba:	a3 78       	lsl	r8,0x3
800064bc:	e6 08 00 08 	add	r8,r3,r8
800064c0:	f0 c8 f4 94 	sub	r8,r8,-2924
800064c4:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
800064c8:	30 08       	mov	r8,0
800064ca:	ef 48 ff f8 	st.w	r7[-8],r8
800064ce:	c6 e8       	rjmp	800065aa <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
800064d0:	30 08       	mov	r8,0
800064d2:	ef 48 ff fc 	st.w	r7[-4],r8
800064d6:	c3 28       	rjmp	8000653a <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
800064d8:	ee fa ff f4 	ld.w	r10,r7[-12]
800064dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800064e4:	ec fb 00 18 	ld.w	r11,r6[24]
800064e8:	10 99       	mov	r9,r8
800064ea:	a1 79       	lsl	r9,0x1
800064ec:	10 09       	add	r9,r8
800064ee:	14 98       	mov	r8,r10
800064f0:	a3 78       	lsl	r8,0x3
800064f2:	14 08       	add	r8,r10
800064f4:	f2 08 00 08 	add	r8,r9,r8
800064f8:	f0 0c 00 0a 	add	r10,r8,r12
800064fc:	30 08       	mov	r8,0
800064fe:	30 09       	mov	r9,0
80006500:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80006504:	ee fa ff f4 	ld.w	r10,r7[-12]
80006508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000650c:	ee fc ff fc 	ld.w	r12,r7[-4]
80006510:	ec fb 00 1c 	ld.w	r11,r6[28]
80006514:	10 99       	mov	r9,r8
80006516:	a1 79       	lsl	r9,0x1
80006518:	10 09       	add	r9,r8
8000651a:	14 98       	mov	r8,r10
8000651c:	a3 78       	lsl	r8,0x3
8000651e:	14 08       	add	r8,r10
80006520:	f2 08 00 08 	add	r8,r9,r8
80006524:	f0 0c 00 0a 	add	r10,r8,r12
80006528:	30 08       	mov	r8,0
8000652a:	30 09       	mov	r9,0
8000652c:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80006530:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006534:	2f f8       	sub	r8,-1
80006536:	ef 48 ff fc 	st.w	r7[-4],r8
8000653a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000653e:	58 28       	cp.w	r8,2
80006540:	fe 9a ff cc 	brle	800064d8 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
80006544:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006548:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000654c:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006550:	ee fc ff f0 	ld.w	r12,r7[-16]
80006554:	f0 16 00 02 	mcall	r6[8]
80006558:	ec fc 00 18 	ld.w	r12,r6[24]
8000655c:	06 99       	mov	r9,r3
8000655e:	a1 79       	lsl	r9,0x1
80006560:	06 09       	add	r9,r3
80006562:	0a 98       	mov	r8,r5
80006564:	a3 78       	lsl	r8,0x3
80006566:	0a 08       	add	r8,r5
80006568:	f2 08 00 08 	add	r8,r9,r8
8000656c:	04 08       	add	r8,r2
8000656e:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
80006572:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006576:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000657a:	ee f2 ff f8 	ld.w	r2,r7[-8]
8000657e:	ee fc ff f0 	ld.w	r12,r7[-16]
80006582:	f0 16 00 02 	mcall	r6[8]
80006586:	ec fc 00 1c 	ld.w	r12,r6[28]
8000658a:	06 99       	mov	r9,r3
8000658c:	a1 79       	lsl	r9,0x1
8000658e:	06 09       	add	r9,r3
80006590:	0a 98       	mov	r8,r5
80006592:	a3 78       	lsl	r8,0x3
80006594:	0a 08       	add	r8,r5
80006596:	f2 08 00 08 	add	r8,r9,r8
8000659a:	04 08       	add	r8,r2
8000659c:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
800065a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065a4:	2f f8       	sub	r8,-1
800065a6:	ef 48 ff f8 	st.w	r7[-8],r8
800065aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065ae:	58 28       	cp.w	r8,2
800065b0:	fe 9a ff 90 	brle	800064d0 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
800065b4:	2f cd       	sub	sp,-16
800065b6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800065ba:	00 00       	add	r0,r0
800065bc:	80 00       	ld.sh	r0,r0[0x0]
800065be:	62 ca       	ld.w	r10,r1[0x30]

800065c0 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
800065c0:	eb cd 40 c0 	pushm	r6-r7,lr
800065c4:	1a 97       	mov	r7,sp
800065c6:	21 9d       	sub	sp,100
800065c8:	fe f6 03 00 	ld.w	r6,pc[768]
800065cc:	1e 26       	rsub	r6,pc
800065ce:	ef 4c ff a4 	st.w	r7[-92],r12
800065d2:	ef 4b ff a0 	st.w	r7[-96],r11
800065d6:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
800065da:	ee f9 ff a4 	ld.w	r9,r7[-92]
800065de:	ee c8 00 40 	sub	r8,r7,64
800065e2:	20 08       	sub	r8,0
800065e4:	20 09       	sub	r9,0
800065e6:	72 0a       	ld.w	r10,r9[0x0]
800065e8:	91 0a       	st.w	r8[0x0],r10
800065ea:	72 1a       	ld.w	r10,r9[0x4]
800065ec:	91 1a       	st.w	r8[0x4],r10
800065ee:	72 2a       	ld.w	r10,r9[0x8]
800065f0:	91 2a       	st.w	r8[0x8],r10
800065f2:	72 39       	ld.w	r9,r9[0xc]
800065f4:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
800065f6:	30 08       	mov	r8,0
800065f8:	ef 48 ff f0 	st.w	r7[-16],r8
800065fc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006600:	70 08       	ld.w	r8,r8[0x0]
80006602:	ef 48 ff f4 	st.w	r7[-12],r8
80006606:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000660a:	2f c8       	sub	r8,-4
8000660c:	70 08       	ld.w	r8,r8[0x0]
8000660e:	ef 48 ff f8 	st.w	r7[-8],r8
80006612:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006616:	2f 88       	sub	r8,-8
80006618:	70 08       	ld.w	r8,r8[0x0]
8000661a:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
8000661e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006626:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000662a:	ee fa ff cc 	ld.w	r10,r7[-52]
8000662e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006632:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006636:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000663a:	ef 48 ff b4 	st.w	r7[-76],r8
8000663e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006642:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006646:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000664a:	ee fa ff c4 	ld.w	r10,r7[-60]
8000664e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006652:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006656:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000665a:	ef 48 ff b8 	st.w	r7[-72],r8
8000665e:	ee f9 ff c4 	ld.w	r9,r7[-60]
80006662:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006666:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000666a:	ee fa ff c8 	ld.w	r10,r7[-56]
8000666e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006672:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006676:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000667a:	ef 48 ff bc 	st.w	r7[-68],r8
8000667e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006682:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006686:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000668a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000668e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006692:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006696:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000669a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000669e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800066a2:	ef 48 ff e4 	st.w	r7[-28],r8
800066a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800066aa:	ee f8 ff c8 	ld.w	r8,r7[-56]
800066ae:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800066b2:	ee fa ff c0 	ld.w	r10,r7[-64]
800066b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066ba:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800066be:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800066c2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800066c6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800066ca:	ef 48 ff e8 	st.w	r7[-24],r8
800066ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800066d2:	ee f8 ff cc 	ld.w	r8,r7[-52]
800066d6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800066da:	ee fa ff c0 	ld.w	r10,r7[-64]
800066de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066e2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800066e6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800066ea:	ee f8 ff bc 	ld.w	r8,r7[-68]
800066ee:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800066f2:	ef 48 ff ec 	st.w	r7[-20],r8
800066f6:	ee f9 ff c0 	ld.w	r9,r7[-64]
800066fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800066fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006702:	ee fa ff c4 	ld.w	r10,r7[-60]
80006706:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000670a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000670e:	ee fb ff c8 	ld.w	r11,r7[-56]
80006712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006716:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000671a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000671e:	ee fb ff cc 	ld.w	r11,r7[-52]
80006722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006726:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000672a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000672e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006732:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80006736:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000673a:	ef 48 ff f0 	st.w	r7[-16],r8
8000673e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006742:	ee 18 80 00 	eorh	r8,0x8000
80006746:	ef 48 ff f4 	st.w	r7[-12],r8
8000674a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000674e:	ee 18 80 00 	eorh	r8,0x8000
80006752:	ef 48 ff f8 	st.w	r7[-8],r8
80006756:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000675a:	ee 18 80 00 	eorh	r8,0x8000
8000675e:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80006762:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000676a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000676e:	ee fa ff ec 	ld.w	r10,r7[-20]
80006772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006776:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000677a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000677e:	ef 48 ff b4 	st.w	r7[-76],r8
80006782:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006786:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000678a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000678e:	ee fa ff e4 	ld.w	r10,r7[-28]
80006792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006796:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000679a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000679e:	ef 48 ff b8 	st.w	r7[-72],r8
800067a2:	ee f9 ff e4 	ld.w	r9,r7[-28]
800067a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800067aa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800067ae:	ee fa ff e8 	ld.w	r10,r7[-24]
800067b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800067b6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800067ba:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800067be:	ef 48 ff bc 	st.w	r7[-68],r8
800067c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800067c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800067ca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800067ce:	ee fa ff e0 	ld.w	r10,r7[-32]
800067d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800067d6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800067da:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800067de:	ee f8 ff b4 	ld.w	r8,r7[-76]
800067e2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800067e6:	ef 48 ff d4 	st.w	r7[-44],r8
800067ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800067ee:	ee f8 ff e8 	ld.w	r8,r7[-24]
800067f2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800067f6:	ee fa ff e0 	ld.w	r10,r7[-32]
800067fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800067fe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006802:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006806:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000680a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000680e:	ef 48 ff d8 	st.w	r7[-40],r8
80006812:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006816:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000681a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000681e:	ee fa ff e0 	ld.w	r10,r7[-32]
80006822:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006826:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000682a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000682e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006832:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006836:	ef 48 ff dc 	st.w	r7[-36],r8
8000683a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000683e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006842:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006846:	ee fa ff e4 	ld.w	r10,r7[-28]
8000684a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000684e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006852:	ee fb ff e8 	ld.w	r11,r7[-24]
80006856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000685a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000685e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006862:	ee fb ff ec 	ld.w	r11,r7[-20]
80006866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000686a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000686e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006872:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006876:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
8000687a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000687e:	ef 48 ff a8 	st.w	r7[-88],r8
80006882:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006886:	ef 48 ff ac 	st.w	r7[-84],r8
8000688a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000688e:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80006892:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006896:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000689a:	10 9b       	mov	r11,r8
8000689c:	30 0c       	mov	r12,0
8000689e:	f0 16 00 c8 	mcall	r6[800]
	e_kalman_predict(Y,acc_glo[Y],dt);
800068a2:	ee f8 ff ac 	ld.w	r8,r7[-84]
800068a6:	ee fa ff 9c 	ld.w	r10,r7[-100]
800068aa:	10 9b       	mov	r11,r8
800068ac:	30 1c       	mov	r12,1
800068ae:	f0 16 00 c8 	mcall	r6[800]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
800068b2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800068b6:	ee fa ff 9c 	ld.w	r10,r7[-100]
800068ba:	10 9b       	mov	r11,r8
800068bc:	30 2c       	mov	r12,2
800068be:	f0 16 00 c8 	mcall	r6[800]
}
800068c2:	2e 7d       	sub	sp,-100
800068c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800068c8:	80 00       	ld.sh	r0,r0[0x0]
800068ca:	64 50       	ld.w	r0,r2[0x14]

800068cc <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
800068cc:	eb cd 40 80 	pushm	r7,lr
800068d0:	1a 97       	mov	r7,sp
800068d2:	20 8d       	sub	sp,32
800068d4:	ef 4c ff e4 	st.w	r7[-28],r12
800068d8:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
800068dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800068e0:	70 29       	ld.w	r9,r8[0x8]
800068e2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800068e6:	2f 88       	sub	r8,-8
800068e8:	70 08       	ld.w	r8,r8[0x0]
800068ea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800068ee:	ee f8 ff e4 	ld.w	r8,r7[-28]
800068f2:	70 3a       	ld.w	r10,r8[0xc]
800068f4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800068f8:	2f c8       	sub	r8,-4
800068fa:	70 08       	ld.w	r8,r8[0x0]
800068fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006900:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006904:	ef 48 ff f4 	st.w	r7[-12],r8
80006908:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000690c:	70 39       	ld.w	r9,r8[0xc]
8000690e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006912:	70 08       	ld.w	r8,r8[0x0]
80006914:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006918:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000691c:	70 1a       	ld.w	r10,r8[0x4]
8000691e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006922:	2f 88       	sub	r8,-8
80006924:	70 08       	ld.w	r8,r8[0x0]
80006926:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000692a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000692e:	ef 48 ff f8 	st.w	r7[-8],r8
80006932:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006936:	70 19       	ld.w	r9,r8[0x4]
80006938:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000693c:	2f c8       	sub	r8,-4
8000693e:	70 08       	ld.w	r8,r8[0x0]
80006940:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006944:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006948:	70 2a       	ld.w	r10,r8[0x8]
8000694a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000694e:	70 08       	ld.w	r8,r8[0x0]
80006950:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006954:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006958:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
8000695c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006960:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006964:	70 0a       	ld.w	r10,r8[0x0]
80006966:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000696a:	70 08       	ld.w	r8,r8[0x0]
8000696c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006970:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006974:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80006978:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000697c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006980:	70 0a       	ld.w	r10,r8[0x0]
80006982:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006986:	2f c8       	sub	r8,-4
80006988:	70 08       	ld.w	r8,r8[0x0]
8000698a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000698e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006992:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80006996:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000699a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000699e:	70 0a       	ld.w	r10,r8[0x0]
800069a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800069a4:	2f 88       	sub	r8,-8
800069a6:	70 08       	ld.w	r8,r8[0x0]
800069a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800069ac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800069b0:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
800069b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800069b8:	70 29       	ld.w	r9,r8[0x8]
800069ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069be:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800069c2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800069c6:	70 3a       	ld.w	r10,r8[0xc]
800069c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800069d0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800069d4:	ef 48 ff e8 	st.w	r7[-24],r8
800069d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800069dc:	70 39       	ld.w	r9,r8[0xc]
800069de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800069e2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800069e6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800069ea:	70 1a       	ld.w	r10,r8[0x4]
800069ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069f0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800069f4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800069f8:	ef 48 ff ec 	st.w	r7[-20],r8
800069fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006a00:	70 19       	ld.w	r9,r8[0x4]
80006a02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a0a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006a0e:	70 2a       	ld.w	r10,r8[0x8]
80006a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a14:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a18:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a1c:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80006a20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006a24:	70 09       	ld.w	r9,r8[0x0]
80006a26:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006a2a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006a2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006a32:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006a36:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006a3a:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80006a3c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006a40:	2f c8       	sub	r8,-4
80006a42:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006a46:	2f c9       	sub	r9,-4
80006a48:	72 0a       	ld.w	r10,r9[0x0]
80006a4a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006a4e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006a52:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006a56:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006a5a:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80006a5c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006a60:	2f 88       	sub	r8,-8
80006a62:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006a66:	2f 89       	sub	r9,-8
80006a68:	72 0a       	ld.w	r10,r9[0x0]
80006a6a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a6e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006a72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a76:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006a7a:	91 09       	st.w	r8[0x0],r9
}
80006a7c:	2f 8d       	sub	sp,-32
80006a7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80006a82 <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80006a82:	d4 31       	pushm	r0-r7,lr
80006a84:	1a 97       	mov	r7,sp
80006a86:	fa cd 00 cc 	sub	sp,sp,204
80006a8a:	fe f6 0d 02 	ld.w	r6,pc[3330]
80006a8e:	1e 26       	rsub	r6,pc
80006a90:	ef 4c ff ac 	st.w	r7[-84],r12
80006a94:	ef 4b ff a8 	st.w	r7[-88],r11
80006a98:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80006a9c:	ec f8 00 00 	ld.w	r8,r6[0]
80006aa0:	70 01       	ld.w	r1,r8[0x0]
80006aa2:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006aa6:	ec f8 00 00 	ld.w	r8,r6[0]
80006aaa:	70 0a       	ld.w	r10,r8[0x0]
80006aac:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ab0:	12 98       	mov	r8,r9
80006ab2:	a1 78       	lsl	r8,0x1
80006ab4:	12 08       	add	r8,r9
80006ab6:	2f f8       	sub	r8,-1
80006ab8:	a3 78       	lsl	r8,0x3
80006aba:	f4 08 00 08 	add	r8,r10,r8
80006abe:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80006ac2:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006ac6:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006aca:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006ace:	10 9c       	mov	r12,r8
80006ad0:	f0 16 00 02 	mcall	r6[8]
80006ad4:	14 98       	mov	r8,r10
80006ad6:	16 99       	mov	r9,r11
80006ad8:	04 9a       	mov	r10,r2
80006ada:	06 9b       	mov	r11,r3
80006adc:	f0 16 00 05 	mcall	r6[20]
80006ae0:	14 98       	mov	r8,r10
80006ae2:	16 99       	mov	r9,r11
80006ae4:	10 9a       	mov	r10,r8
80006ae6:	12 9b       	mov	r11,r9
80006ae8:	0a 98       	mov	r8,r5
80006aea:	a1 78       	lsl	r8,0x1
80006aec:	0a 08       	add	r8,r5
80006aee:	2f f8       	sub	r8,-1
80006af0:	a3 78       	lsl	r8,0x3
80006af2:	e2 08 00 08 	add	r8,r1,r8
80006af6:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80006afa:	ec f8 00 00 	ld.w	r8,r6[0]
80006afe:	70 01       	ld.w	r1,r8[0x0]
80006b00:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006b04:	ec f8 00 00 	ld.w	r8,r6[0]
80006b08:	70 0a       	ld.w	r10,r8[0x0]
80006b0a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006b0e:	12 98       	mov	r8,r9
80006b10:	a1 78       	lsl	r8,0x1
80006b12:	12 08       	add	r8,r9
80006b14:	a3 78       	lsl	r8,0x3
80006b16:	f4 08 00 08 	add	r8,r10,r8
80006b1a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80006b1e:	f0 e2 00 00 	ld.d	r2,r8[0]
80006b22:	ee fc ff a4 	ld.w	r12,r7[-92]
80006b26:	f0 16 00 02 	mcall	r6[8]
80006b2a:	ec f8 00 00 	ld.w	r8,r6[0]
80006b2e:	70 0c       	ld.w	r12,r8[0x0]
80006b30:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006b34:	12 98       	mov	r8,r9
80006b36:	a1 78       	lsl	r8,0x1
80006b38:	12 08       	add	r8,r9
80006b3a:	2f f8       	sub	r8,-1
80006b3c:	a3 78       	lsl	r8,0x3
80006b3e:	f8 08 00 08 	add	r8,r12,r8
80006b42:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80006b46:	f0 16 00 03 	mcall	r6[12]
80006b4a:	14 98       	mov	r8,r10
80006b4c:	16 99       	mov	r9,r11
80006b4e:	04 9a       	mov	r10,r2
80006b50:	06 9b       	mov	r11,r3
80006b52:	f0 16 00 05 	mcall	r6[20]
80006b56:	14 98       	mov	r8,r10
80006b58:	16 99       	mov	r9,r11
80006b5a:	10 9a       	mov	r10,r8
80006b5c:	12 9b       	mov	r11,r9
80006b5e:	0a 98       	mov	r8,r5
80006b60:	a1 78       	lsl	r8,0x1
80006b62:	0a 08       	add	r8,r5
80006b64:	a3 78       	lsl	r8,0x3
80006b66:	e2 08 00 08 	add	r8,r1,r8
80006b6a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80006b6e:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80006b72:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006b76:	ec fa 00 18 	ld.w	r10,r6[24]
80006b7a:	12 98       	mov	r8,r9
80006b7c:	a3 78       	lsl	r8,0x3
80006b7e:	12 08       	add	r8,r9
80006b80:	a3 78       	lsl	r8,0x3
80006b82:	f4 08 00 08 	add	r8,r10,r8
80006b86:	f0 ea 00 00 	ld.d	r10,r8[0]
80006b8a:	ee eb ff 34 	st.d	r7[-204],r10
80006b8e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006b92:	f0 16 00 02 	mcall	r6[8]
80006b96:	14 90       	mov	r0,r10
80006b98:	16 91       	mov	r1,r11
80006b9a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006b9e:	ec fa 00 18 	ld.w	r10,r6[24]
80006ba2:	12 98       	mov	r8,r9
80006ba4:	a3 78       	lsl	r8,0x3
80006ba6:	12 08       	add	r8,r9
80006ba8:	a3 78       	lsl	r8,0x3
80006baa:	f4 08 00 08 	add	r8,r10,r8
80006bae:	2e 88       	sub	r8,-24
80006bb0:	f0 ea 00 00 	ld.d	r10,r8[0]
80006bb4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006bb8:	ec fc 00 18 	ld.w	r12,r6[24]
80006bbc:	12 98       	mov	r8,r9
80006bbe:	a3 78       	lsl	r8,0x3
80006bc0:	12 08       	add	r8,r9
80006bc2:	2f f8       	sub	r8,-1
80006bc4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80006bc8:	f0 16 00 05 	mcall	r6[20]
80006bcc:	14 98       	mov	r8,r10
80006bce:	16 99       	mov	r9,r11
80006bd0:	10 92       	mov	r2,r8
80006bd2:	12 93       	mov	r3,r9
80006bd4:	ee fc ff a4 	ld.w	r12,r7[-92]
80006bd8:	f0 16 00 02 	mcall	r6[8]
80006bdc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006be0:	ec fc 00 18 	ld.w	r12,r6[24]
80006be4:	12 98       	mov	r8,r9
80006be6:	a3 78       	lsl	r8,0x3
80006be8:	12 08       	add	r8,r9
80006bea:	a3 78       	lsl	r8,0x3
80006bec:	f8 08 00 08 	add	r8,r12,r8
80006bf0:	2e 08       	sub	r8,-32
80006bf2:	f0 e8 00 00 	ld.d	r8,r8[0]
80006bf6:	f0 16 00 03 	mcall	r6[12]
80006bfa:	14 98       	mov	r8,r10
80006bfc:	16 99       	mov	r9,r11
80006bfe:	04 9a       	mov	r10,r2
80006c00:	06 9b       	mov	r11,r3
80006c02:	f0 16 00 05 	mcall	r6[20]
80006c06:	14 98       	mov	r8,r10
80006c08:	16 99       	mov	r9,r11
80006c0a:	00 9a       	mov	r10,r0
80006c0c:	02 9b       	mov	r11,r1
80006c0e:	f0 16 00 03 	mcall	r6[12]
80006c12:	14 98       	mov	r8,r10
80006c14:	16 99       	mov	r9,r11
80006c16:	ee ea ff 34 	ld.d	r10,r7[-204]
80006c1a:	f0 16 00 05 	mcall	r6[20]
80006c1e:	14 98       	mov	r8,r10
80006c20:	16 99       	mov	r9,r11
80006c22:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
80006c26:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006c2a:	ec fa 00 18 	ld.w	r10,r6[24]
80006c2e:	12 98       	mov	r8,r9
80006c30:	a3 78       	lsl	r8,0x3
80006c32:	12 08       	add	r8,r9
80006c34:	2f f8       	sub	r8,-1
80006c36:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80006c3a:	ee e5 ff 3c 	st.d	r7[-196],r4
80006c3e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006c42:	f0 16 00 02 	mcall	r6[8]
80006c46:	14 90       	mov	r0,r10
80006c48:	16 91       	mov	r1,r11
80006c4a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006c4e:	ec fa 00 18 	ld.w	r10,r6[24]
80006c52:	12 98       	mov	r8,r9
80006c54:	a3 78       	lsl	r8,0x3
80006c56:	12 08       	add	r8,r9
80006c58:	a3 78       	lsl	r8,0x3
80006c5a:	f4 08 00 08 	add	r8,r10,r8
80006c5e:	2e 08       	sub	r8,-32
80006c60:	f0 ea 00 00 	ld.d	r10,r8[0]
80006c64:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006c68:	ec fc 00 18 	ld.w	r12,r6[24]
80006c6c:	12 98       	mov	r8,r9
80006c6e:	a3 78       	lsl	r8,0x3
80006c70:	12 08       	add	r8,r9
80006c72:	a3 78       	lsl	r8,0x3
80006c74:	f8 08 00 08 	add	r8,r12,r8
80006c78:	2f 08       	sub	r8,-16
80006c7a:	f0 e8 00 00 	ld.d	r8,r8[0]
80006c7e:	f0 16 00 11 	mcall	r6[68]
80006c82:	14 98       	mov	r8,r10
80006c84:	16 99       	mov	r9,r11
80006c86:	10 92       	mov	r2,r8
80006c88:	12 93       	mov	r3,r9
80006c8a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006c8e:	f0 16 00 02 	mcall	r6[8]
80006c92:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006c96:	ec fc 00 18 	ld.w	r12,r6[24]
80006c9a:	12 98       	mov	r8,r9
80006c9c:	a3 78       	lsl	r8,0x3
80006c9e:	12 08       	add	r8,r9
80006ca0:	a3 78       	lsl	r8,0x3
80006ca2:	f8 08 00 08 	add	r8,r12,r8
80006ca6:	2d 88       	sub	r8,-40
80006ca8:	f0 e8 00 00 	ld.d	r8,r8[0]
80006cac:	f0 16 00 03 	mcall	r6[12]
80006cb0:	14 98       	mov	r8,r10
80006cb2:	16 99       	mov	r9,r11
80006cb4:	04 9a       	mov	r10,r2
80006cb6:	06 9b       	mov	r11,r3
80006cb8:	f0 16 00 11 	mcall	r6[68]
80006cbc:	14 98       	mov	r8,r10
80006cbe:	16 99       	mov	r9,r11
80006cc0:	00 9a       	mov	r10,r0
80006cc2:	02 9b       	mov	r11,r1
80006cc4:	f0 16 00 03 	mcall	r6[12]
80006cc8:	14 98       	mov	r8,r10
80006cca:	16 99       	mov	r9,r11
80006ccc:	ee ea ff 3c 	ld.d	r10,r7[-196]
80006cd0:	f0 16 00 05 	mcall	r6[20]
80006cd4:	14 98       	mov	r8,r10
80006cd6:	16 99       	mov	r9,r11
80006cd8:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
80006cdc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ce0:	ec fa 00 18 	ld.w	r10,r6[24]
80006ce4:	12 98       	mov	r8,r9
80006ce6:	a3 78       	lsl	r8,0x3
80006ce8:	12 08       	add	r8,r9
80006cea:	a3 78       	lsl	r8,0x3
80006cec:	f4 08 00 08 	add	r8,r10,r8
80006cf0:	2f 08       	sub	r8,-16
80006cf2:	f0 e2 00 00 	ld.d	r2,r8[0]
80006cf6:	ee fc ff a4 	ld.w	r12,r7[-92]
80006cfa:	f0 16 00 02 	mcall	r6[8]
80006cfe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006d02:	ec fc 00 18 	ld.w	r12,r6[24]
80006d06:	12 98       	mov	r8,r9
80006d08:	a3 78       	lsl	r8,0x3
80006d0a:	12 08       	add	r8,r9
80006d0c:	a3 78       	lsl	r8,0x3
80006d0e:	f8 08 00 08 	add	r8,r12,r8
80006d12:	2d 88       	sub	r8,-40
80006d14:	f0 e8 00 00 	ld.d	r8,r8[0]
80006d18:	f0 16 00 03 	mcall	r6[12]
80006d1c:	14 98       	mov	r8,r10
80006d1e:	16 99       	mov	r9,r11
80006d20:	04 9a       	mov	r10,r2
80006d22:	06 9b       	mov	r11,r3
80006d24:	f0 16 00 05 	mcall	r6[20]
80006d28:	14 98       	mov	r8,r10
80006d2a:	16 99       	mov	r9,r11
80006d2c:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80006d30:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006d34:	ec fa 00 18 	ld.w	r10,r6[24]
80006d38:	12 98       	mov	r8,r9
80006d3a:	a3 78       	lsl	r8,0x3
80006d3c:	12 08       	add	r8,r9
80006d3e:	a3 78       	lsl	r8,0x3
80006d40:	f4 08 00 08 	add	r8,r10,r8
80006d44:	2e 88       	sub	r8,-24
80006d46:	f0 ea 00 00 	ld.d	r10,r8[0]
80006d4a:	ee eb ff 44 	st.d	r7[-188],r10
80006d4e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006d52:	f0 16 00 02 	mcall	r6[8]
80006d56:	14 90       	mov	r0,r10
80006d58:	16 91       	mov	r1,r11
80006d5a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006d5e:	ec fa 00 18 	ld.w	r10,r6[24]
80006d62:	12 98       	mov	r8,r9
80006d64:	a3 78       	lsl	r8,0x3
80006d66:	12 08       	add	r8,r9
80006d68:	a3 78       	lsl	r8,0x3
80006d6a:	f4 08 00 08 	add	r8,r10,r8
80006d6e:	2e 08       	sub	r8,-32
80006d70:	f0 ea 00 00 	ld.d	r10,r8[0]
80006d74:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006d78:	ec fc 00 18 	ld.w	r12,r6[24]
80006d7c:	12 98       	mov	r8,r9
80006d7e:	a3 78       	lsl	r8,0x3
80006d80:	12 08       	add	r8,r9
80006d82:	a3 78       	lsl	r8,0x3
80006d84:	f8 08 00 08 	add	r8,r12,r8
80006d88:	2d 08       	sub	r8,-48
80006d8a:	f0 e8 00 00 	ld.d	r8,r8[0]
80006d8e:	f0 16 00 11 	mcall	r6[68]
80006d92:	14 98       	mov	r8,r10
80006d94:	16 99       	mov	r9,r11
80006d96:	10 92       	mov	r2,r8
80006d98:	12 93       	mov	r3,r9
80006d9a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006d9e:	f0 16 00 02 	mcall	r6[8]
80006da2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006da6:	ec fc 00 18 	ld.w	r12,r6[24]
80006daa:	12 98       	mov	r8,r9
80006dac:	a3 78       	lsl	r8,0x3
80006dae:	12 08       	add	r8,r9
80006db0:	a3 78       	lsl	r8,0x3
80006db2:	f8 08 00 08 	add	r8,r12,r8
80006db6:	2c 88       	sub	r8,-56
80006db8:	f0 e8 00 00 	ld.d	r8,r8[0]
80006dbc:	f0 16 00 03 	mcall	r6[12]
80006dc0:	14 98       	mov	r8,r10
80006dc2:	16 99       	mov	r9,r11
80006dc4:	04 9a       	mov	r10,r2
80006dc6:	06 9b       	mov	r11,r3
80006dc8:	f0 16 00 11 	mcall	r6[68]
80006dcc:	14 98       	mov	r8,r10
80006dce:	16 99       	mov	r9,r11
80006dd0:	00 9a       	mov	r10,r0
80006dd2:	02 9b       	mov	r11,r1
80006dd4:	f0 16 00 03 	mcall	r6[12]
80006dd8:	14 98       	mov	r8,r10
80006dda:	16 99       	mov	r9,r11
80006ddc:	ee ea ff 44 	ld.d	r10,r7[-188]
80006de0:	f0 16 00 05 	mcall	r6[20]
80006de4:	14 98       	mov	r8,r10
80006de6:	16 99       	mov	r9,r11
80006de8:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
80006dec:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006df0:	ec fa 00 18 	ld.w	r10,r6[24]
80006df4:	12 98       	mov	r8,r9
80006df6:	a3 78       	lsl	r8,0x3
80006df8:	12 08       	add	r8,r9
80006dfa:	a3 78       	lsl	r8,0x3
80006dfc:	f4 08 00 08 	add	r8,r10,r8
80006e00:	2e 08       	sub	r8,-32
80006e02:	f0 e4 00 00 	ld.d	r4,r8[0]
80006e06:	ee e5 ff 4c 	st.d	r7[-180],r4
80006e0a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006e0e:	f0 16 00 02 	mcall	r6[8]
80006e12:	14 90       	mov	r0,r10
80006e14:	16 91       	mov	r1,r11
80006e16:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e1a:	ec fa 00 18 	ld.w	r10,r6[24]
80006e1e:	12 98       	mov	r8,r9
80006e20:	a3 78       	lsl	r8,0x3
80006e22:	12 08       	add	r8,r9
80006e24:	a3 78       	lsl	r8,0x3
80006e26:	f4 08 00 08 	add	r8,r10,r8
80006e2a:	2c 88       	sub	r8,-56
80006e2c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e30:	12 94       	mov	r4,r9
80006e32:	ee 14 80 00 	eorh	r4,0x8000
80006e36:	ef 44 ff 54 	st.w	r7[-172],r4
80006e3a:	10 9c       	mov	r12,r8
80006e3c:	ef 4c ff 58 	st.w	r7[-168],r12
80006e40:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e44:	ec fa 00 18 	ld.w	r10,r6[24]
80006e48:	12 98       	mov	r8,r9
80006e4a:	a3 78       	lsl	r8,0x3
80006e4c:	12 08       	add	r8,r9
80006e4e:	a3 78       	lsl	r8,0x3
80006e50:	f4 08 00 08 	add	r8,r10,r8
80006e54:	2d 88       	sub	r8,-40
80006e56:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e5a:	ee ea ff 54 	ld.d	r10,r7[-172]
80006e5e:	f0 16 00 11 	mcall	r6[68]
80006e62:	14 98       	mov	r8,r10
80006e64:	16 99       	mov	r9,r11
80006e66:	10 92       	mov	r2,r8
80006e68:	12 93       	mov	r3,r9
80006e6a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006e6e:	f0 16 00 02 	mcall	r6[8]
80006e72:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e76:	ec fc 00 18 	ld.w	r12,r6[24]
80006e7a:	12 98       	mov	r8,r9
80006e7c:	a3 78       	lsl	r8,0x3
80006e7e:	12 08       	add	r8,r9
80006e80:	a3 78       	lsl	r8,0x3
80006e82:	f8 08 00 08 	add	r8,r12,r8
80006e86:	2c 08       	sub	r8,-64
80006e88:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e8c:	f0 16 00 03 	mcall	r6[12]
80006e90:	14 98       	mov	r8,r10
80006e92:	16 99       	mov	r9,r11
80006e94:	04 9a       	mov	r10,r2
80006e96:	06 9b       	mov	r11,r3
80006e98:	f0 16 00 05 	mcall	r6[20]
80006e9c:	14 98       	mov	r8,r10
80006e9e:	16 99       	mov	r9,r11
80006ea0:	00 9a       	mov	r10,r0
80006ea2:	02 9b       	mov	r11,r1
80006ea4:	f0 16 00 03 	mcall	r6[12]
80006ea8:	14 98       	mov	r8,r10
80006eaa:	16 99       	mov	r9,r11
80006eac:	ee ea ff 4c 	ld.d	r10,r7[-180]
80006eb0:	f0 16 00 05 	mcall	r6[20]
80006eb4:	14 98       	mov	r8,r10
80006eb6:	16 99       	mov	r9,r11
80006eb8:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
80006ebc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ec0:	ec fa 00 18 	ld.w	r10,r6[24]
80006ec4:	12 98       	mov	r8,r9
80006ec6:	a3 78       	lsl	r8,0x3
80006ec8:	12 08       	add	r8,r9
80006eca:	a3 78       	lsl	r8,0x3
80006ecc:	f4 08 00 08 	add	r8,r10,r8
80006ed0:	2d 88       	sub	r8,-40
80006ed2:	f0 e0 00 00 	ld.d	r0,r8[0]
80006ed6:	ee fc ff a4 	ld.w	r12,r7[-92]
80006eda:	f0 16 00 02 	mcall	r6[8]
80006ede:	14 92       	mov	r2,r10
80006ee0:	16 93       	mov	r3,r11
80006ee2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ee6:	ec fa 00 18 	ld.w	r10,r6[24]
80006eea:	12 98       	mov	r8,r9
80006eec:	a3 78       	lsl	r8,0x3
80006eee:	12 08       	add	r8,r9
80006ef0:	a3 78       	lsl	r8,0x3
80006ef2:	f4 08 00 08 	add	r8,r10,r8
80006ef6:	2c 08       	sub	r8,-64
80006ef8:	f0 e8 00 00 	ld.d	r8,r8[0]
80006efc:	12 9b       	mov	r11,r9
80006efe:	ee 1b 80 00 	eorh	r11,0x8000
80006f02:	ef 4b ff 5c 	st.w	r7[-164],r11
80006f06:	10 9a       	mov	r10,r8
80006f08:	ef 4a ff 60 	st.w	r7[-160],r10
80006f0c:	ee e8 ff 5c 	ld.d	r8,r7[-164]
80006f10:	04 9a       	mov	r10,r2
80006f12:	06 9b       	mov	r11,r3
80006f14:	f0 16 00 03 	mcall	r6[12]
80006f18:	14 98       	mov	r8,r10
80006f1a:	16 99       	mov	r9,r11
80006f1c:	00 9a       	mov	r10,r0
80006f1e:	02 9b       	mov	r11,r1
80006f20:	f0 16 00 05 	mcall	r6[20]
80006f24:	14 98       	mov	r8,r10
80006f26:	16 99       	mov	r9,r11
80006f28:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
80006f2c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f30:	ec fa 00 18 	ld.w	r10,r6[24]
80006f34:	12 98       	mov	r8,r9
80006f36:	a3 78       	lsl	r8,0x3
80006f38:	12 08       	add	r8,r9
80006f3a:	a3 78       	lsl	r8,0x3
80006f3c:	f4 08 00 08 	add	r8,r10,r8
80006f40:	2d 08       	sub	r8,-48
80006f42:	f0 e2 00 00 	ld.d	r2,r8[0]
80006f46:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f4a:	f0 16 00 02 	mcall	r6[8]
80006f4e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f52:	ec fc 00 18 	ld.w	r12,r6[24]
80006f56:	12 98       	mov	r8,r9
80006f58:	a3 78       	lsl	r8,0x3
80006f5a:	12 08       	add	r8,r9
80006f5c:	a3 78       	lsl	r8,0x3
80006f5e:	f8 08 00 08 	add	r8,r12,r8
80006f62:	2c 88       	sub	r8,-56
80006f64:	f0 e8 00 00 	ld.d	r8,r8[0]
80006f68:	f0 16 00 03 	mcall	r6[12]
80006f6c:	14 98       	mov	r8,r10
80006f6e:	16 99       	mov	r9,r11
80006f70:	04 9a       	mov	r10,r2
80006f72:	06 9b       	mov	r11,r3
80006f74:	f0 16 00 05 	mcall	r6[20]
80006f78:	14 98       	mov	r8,r10
80006f7a:	16 99       	mov	r9,r11
80006f7c:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80006f80:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f84:	ec fa 00 18 	ld.w	r10,r6[24]
80006f88:	12 98       	mov	r8,r9
80006f8a:	a3 78       	lsl	r8,0x3
80006f8c:	12 08       	add	r8,r9
80006f8e:	a3 78       	lsl	r8,0x3
80006f90:	f4 08 00 08 	add	r8,r10,r8
80006f94:	2c 88       	sub	r8,-56
80006f96:	f0 e2 00 00 	ld.d	r2,r8[0]
80006f9a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f9e:	f0 16 00 02 	mcall	r6[8]
80006fa2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006fa6:	ec fc 00 18 	ld.w	r12,r6[24]
80006faa:	12 98       	mov	r8,r9
80006fac:	a3 78       	lsl	r8,0x3
80006fae:	12 08       	add	r8,r9
80006fb0:	a3 78       	lsl	r8,0x3
80006fb2:	f8 08 00 08 	add	r8,r12,r8
80006fb6:	2c 08       	sub	r8,-64
80006fb8:	f0 e8 00 00 	ld.d	r8,r8[0]
80006fbc:	12 95       	mov	r5,r9
80006fbe:	ee 15 80 00 	eorh	r5,0x8000
80006fc2:	ef 45 ff 64 	st.w	r7[-156],r5
80006fc6:	10 94       	mov	r4,r8
80006fc8:	ef 44 ff 68 	st.w	r7[-152],r4
80006fcc:	ee e8 ff 64 	ld.d	r8,r7[-156]
80006fd0:	f0 16 00 03 	mcall	r6[12]
80006fd4:	14 98       	mov	r8,r10
80006fd6:	16 99       	mov	r9,r11
80006fd8:	04 9a       	mov	r10,r2
80006fda:	06 9b       	mov	r11,r3
80006fdc:	f0 16 00 05 	mcall	r6[20]
80006fe0:	14 98       	mov	r8,r10
80006fe2:	16 99       	mov	r9,r11
80006fe4:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
80006fe8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006fec:	ec fa 00 18 	ld.w	r10,r6[24]
80006ff0:	12 98       	mov	r8,r9
80006ff2:	a3 78       	lsl	r8,0x3
80006ff4:	12 08       	add	r8,r9
80006ff6:	a3 78       	lsl	r8,0x3
80006ff8:	f4 08 00 08 	add	r8,r10,r8
80006ffc:	2c 08       	sub	r8,-64
80006ffe:	f0 e8 00 00 	ld.d	r8,r8[0]
80007002:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007006:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000700a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000700e:	ec fa 00 dc 	ld.w	r10,r6[220]
80007012:	12 98       	mov	r8,r9
80007014:	a1 78       	lsl	r8,0x1
80007016:	12 08       	add	r8,r9
80007018:	a3 78       	lsl	r8,0x3
8000701a:	f4 08 00 08 	add	r8,r10,r8
8000701e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007022:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007026:	f0 16 00 05 	mcall	r6[20]
8000702a:	14 98       	mov	r8,r10
8000702c:	16 99       	mov	r9,r11
8000702e:	10 9a       	mov	r10,r8
80007030:	12 9b       	mov	r11,r9
80007032:	ec f9 00 18 	ld.w	r9,r6[24]
80007036:	0a 98       	mov	r8,r5
80007038:	a3 78       	lsl	r8,0x3
8000703a:	0a 08       	add	r8,r5
8000703c:	a3 78       	lsl	r8,0x3
8000703e:	f2 08 00 08 	add	r8,r9,r8
80007042:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007046:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000704a:	ec fa 00 18 	ld.w	r10,r6[24]
8000704e:	12 98       	mov	r8,r9
80007050:	a3 78       	lsl	r8,0x3
80007052:	12 08       	add	r8,r9
80007054:	f0 cb ff ff 	sub	r11,r8,-1
80007058:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000705c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
80007060:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007064:	ec fa 00 18 	ld.w	r10,r6[24]
80007068:	12 98       	mov	r8,r9
8000706a:	a3 78       	lsl	r8,0x3
8000706c:	12 08       	add	r8,r9
8000706e:	a3 78       	lsl	r8,0x3
80007070:	f4 08 00 08 	add	r8,r10,r8
80007074:	f0 ca ff f0 	sub	r10,r8,-16
80007078:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000707c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80007080:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007084:	ec fa 00 18 	ld.w	r10,r6[24]
80007088:	12 98       	mov	r8,r9
8000708a:	a3 78       	lsl	r8,0x3
8000708c:	12 08       	add	r8,r9
8000708e:	a3 78       	lsl	r8,0x3
80007090:	f4 08 00 08 	add	r8,r10,r8
80007094:	f0 ca ff e8 	sub	r10,r8,-24
80007098:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000709c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800070a0:	ee f5 ff ac 	ld.w	r5,r7[-84]
800070a4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070a8:	ec fa 00 dc 	ld.w	r10,r6[220]
800070ac:	12 98       	mov	r8,r9
800070ae:	a1 78       	lsl	r8,0x1
800070b0:	12 08       	add	r8,r9
800070b2:	2f f8       	sub	r8,-1
800070b4:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800070b8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800070bc:	f0 16 00 05 	mcall	r6[20]
800070c0:	14 98       	mov	r8,r10
800070c2:	16 99       	mov	r9,r11
800070c4:	10 9a       	mov	r10,r8
800070c6:	12 9b       	mov	r11,r9
800070c8:	ec f9 00 18 	ld.w	r9,r6[24]
800070cc:	0a 98       	mov	r8,r5
800070ce:	a3 78       	lsl	r8,0x3
800070d0:	0a 08       	add	r8,r5
800070d2:	a3 78       	lsl	r8,0x3
800070d4:	f2 08 00 08 	add	r8,r9,r8
800070d8:	2e 08       	sub	r8,-32
800070da:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800070de:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070e2:	ec fa 00 18 	ld.w	r10,r6[24]
800070e6:	12 98       	mov	r8,r9
800070e8:	a3 78       	lsl	r8,0x3
800070ea:	12 08       	add	r8,r9
800070ec:	a3 78       	lsl	r8,0x3
800070ee:	f4 08 00 08 	add	r8,r10,r8
800070f2:	f0 ca ff d8 	sub	r10,r8,-40
800070f6:	ee e8 ff e0 	ld.d	r8,r7[-32]
800070fa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
800070fe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007102:	ec fa 00 18 	ld.w	r10,r6[24]
80007106:	12 98       	mov	r8,r9
80007108:	a3 78       	lsl	r8,0x3
8000710a:	12 08       	add	r8,r9
8000710c:	a3 78       	lsl	r8,0x3
8000710e:	f4 08 00 08 	add	r8,r10,r8
80007112:	f0 ca ff d0 	sub	r10,r8,-48
80007116:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000711a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
8000711e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007122:	ec fa 00 18 	ld.w	r10,r6[24]
80007126:	12 98       	mov	r8,r9
80007128:	a3 78       	lsl	r8,0x3
8000712a:	12 08       	add	r8,r9
8000712c:	a3 78       	lsl	r8,0x3
8000712e:	f4 08 00 08 	add	r8,r10,r8
80007132:	f0 ca ff c8 	sub	r10,r8,-56
80007136:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000713a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
8000713e:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007142:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007146:	ec fa 00 dc 	ld.w	r10,r6[220]
8000714a:	12 98       	mov	r8,r9
8000714c:	a1 78       	lsl	r8,0x1
8000714e:	12 08       	add	r8,r9
80007150:	a3 78       	lsl	r8,0x3
80007152:	f4 08 00 08 	add	r8,r10,r8
80007156:	2f 08       	sub	r8,-16
80007158:	f0 ea 00 00 	ld.d	r10,r8[0]
8000715c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007160:	f0 16 00 05 	mcall	r6[20]
80007164:	14 98       	mov	r8,r10
80007166:	16 99       	mov	r9,r11
80007168:	10 9a       	mov	r10,r8
8000716a:	12 9b       	mov	r11,r9
8000716c:	ec f9 00 18 	ld.w	r9,r6[24]
80007170:	0a 98       	mov	r8,r5
80007172:	a3 78       	lsl	r8,0x3
80007174:	0a 08       	add	r8,r5
80007176:	a3 78       	lsl	r8,0x3
80007178:	f2 08 00 08 	add	r8,r9,r8
8000717c:	2c 08       	sub	r8,-64
8000717e:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
80007182:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007186:	ec fa 00 1c 	ld.w	r10,r6[28]
8000718a:	12 98       	mov	r8,r9
8000718c:	a3 78       	lsl	r8,0x3
8000718e:	12 08       	add	r8,r9
80007190:	a3 78       	lsl	r8,0x3
80007192:	f4 08 00 08 	add	r8,r10,r8
80007196:	f0 ea 00 00 	ld.d	r10,r8[0]
8000719a:	ee eb ff 6c 	st.d	r7[-148],r10
8000719e:	ee fc ff a4 	ld.w	r12,r7[-92]
800071a2:	f0 16 00 02 	mcall	r6[8]
800071a6:	14 90       	mov	r0,r10
800071a8:	16 91       	mov	r1,r11
800071aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071ae:	ec fa 00 1c 	ld.w	r10,r6[28]
800071b2:	12 98       	mov	r8,r9
800071b4:	a3 78       	lsl	r8,0x3
800071b6:	12 08       	add	r8,r9
800071b8:	a3 78       	lsl	r8,0x3
800071ba:	f4 08 00 08 	add	r8,r10,r8
800071be:	2e 88       	sub	r8,-24
800071c0:	f0 ea 00 00 	ld.d	r10,r8[0]
800071c4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071c8:	ec fc 00 1c 	ld.w	r12,r6[28]
800071cc:	12 98       	mov	r8,r9
800071ce:	a3 78       	lsl	r8,0x3
800071d0:	12 08       	add	r8,r9
800071d2:	2f f8       	sub	r8,-1
800071d4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800071d8:	f0 16 00 05 	mcall	r6[20]
800071dc:	14 98       	mov	r8,r10
800071de:	16 99       	mov	r9,r11
800071e0:	10 92       	mov	r2,r8
800071e2:	12 93       	mov	r3,r9
800071e4:	ee fc ff a4 	ld.w	r12,r7[-92]
800071e8:	f0 16 00 02 	mcall	r6[8]
800071ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071f0:	ec fc 00 1c 	ld.w	r12,r6[28]
800071f4:	12 98       	mov	r8,r9
800071f6:	a3 78       	lsl	r8,0x3
800071f8:	12 08       	add	r8,r9
800071fa:	a3 78       	lsl	r8,0x3
800071fc:	f8 08 00 08 	add	r8,r12,r8
80007200:	2e 08       	sub	r8,-32
80007202:	f0 e8 00 00 	ld.d	r8,r8[0]
80007206:	f0 16 00 03 	mcall	r6[12]
8000720a:	14 98       	mov	r8,r10
8000720c:	16 99       	mov	r9,r11
8000720e:	04 9a       	mov	r10,r2
80007210:	06 9b       	mov	r11,r3
80007212:	f0 16 00 05 	mcall	r6[20]
80007216:	14 98       	mov	r8,r10
80007218:	16 99       	mov	r9,r11
8000721a:	00 9a       	mov	r10,r0
8000721c:	02 9b       	mov	r11,r1
8000721e:	f0 16 00 03 	mcall	r6[12]
80007222:	14 98       	mov	r8,r10
80007224:	16 99       	mov	r9,r11
80007226:	ee ea ff 6c 	ld.d	r10,r7[-148]
8000722a:	f0 16 00 05 	mcall	r6[20]
8000722e:	14 98       	mov	r8,r10
80007230:	16 99       	mov	r9,r11
80007232:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
80007236:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000723a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000723e:	12 98       	mov	r8,r9
80007240:	a3 78       	lsl	r8,0x3
80007242:	12 08       	add	r8,r9
80007244:	2f f8       	sub	r8,-1
80007246:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
8000724a:	ee e5 ff 74 	st.d	r7[-140],r4
8000724e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007252:	f0 16 00 02 	mcall	r6[8]
80007256:	14 90       	mov	r0,r10
80007258:	16 91       	mov	r1,r11
8000725a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000725e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007262:	12 98       	mov	r8,r9
80007264:	a3 78       	lsl	r8,0x3
80007266:	12 08       	add	r8,r9
80007268:	a3 78       	lsl	r8,0x3
8000726a:	f4 08 00 08 	add	r8,r10,r8
8000726e:	2e 08       	sub	r8,-32
80007270:	f0 ea 00 00 	ld.d	r10,r8[0]
80007274:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007278:	ec fc 00 1c 	ld.w	r12,r6[28]
8000727c:	12 98       	mov	r8,r9
8000727e:	a3 78       	lsl	r8,0x3
80007280:	12 08       	add	r8,r9
80007282:	a3 78       	lsl	r8,0x3
80007284:	f8 08 00 08 	add	r8,r12,r8
80007288:	2f 08       	sub	r8,-16
8000728a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000728e:	f0 16 00 11 	mcall	r6[68]
80007292:	14 98       	mov	r8,r10
80007294:	16 99       	mov	r9,r11
80007296:	10 92       	mov	r2,r8
80007298:	12 93       	mov	r3,r9
8000729a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000729e:	f0 16 00 02 	mcall	r6[8]
800072a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072a6:	ec fc 00 1c 	ld.w	r12,r6[28]
800072aa:	12 98       	mov	r8,r9
800072ac:	a3 78       	lsl	r8,0x3
800072ae:	12 08       	add	r8,r9
800072b0:	a3 78       	lsl	r8,0x3
800072b2:	f8 08 00 08 	add	r8,r12,r8
800072b6:	2d 88       	sub	r8,-40
800072b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800072bc:	f0 16 00 03 	mcall	r6[12]
800072c0:	14 98       	mov	r8,r10
800072c2:	16 99       	mov	r9,r11
800072c4:	04 9a       	mov	r10,r2
800072c6:	06 9b       	mov	r11,r3
800072c8:	f0 16 00 11 	mcall	r6[68]
800072cc:	14 98       	mov	r8,r10
800072ce:	16 99       	mov	r9,r11
800072d0:	00 9a       	mov	r10,r0
800072d2:	02 9b       	mov	r11,r1
800072d4:	f0 16 00 03 	mcall	r6[12]
800072d8:	14 98       	mov	r8,r10
800072da:	16 99       	mov	r9,r11
800072dc:	ee ea ff 74 	ld.d	r10,r7[-140]
800072e0:	f0 16 00 05 	mcall	r6[20]
800072e4:	14 98       	mov	r8,r10
800072e6:	16 99       	mov	r9,r11
800072e8:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
800072ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072f0:	ec fa 00 1c 	ld.w	r10,r6[28]
800072f4:	12 98       	mov	r8,r9
800072f6:	a3 78       	lsl	r8,0x3
800072f8:	12 08       	add	r8,r9
800072fa:	a3 78       	lsl	r8,0x3
800072fc:	f4 08 00 08 	add	r8,r10,r8
80007300:	2f 08       	sub	r8,-16
80007302:	f0 e2 00 00 	ld.d	r2,r8[0]
80007306:	ee fc ff a4 	ld.w	r12,r7[-92]
8000730a:	f0 16 00 02 	mcall	r6[8]
8000730e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007312:	ec fc 00 1c 	ld.w	r12,r6[28]
80007316:	12 98       	mov	r8,r9
80007318:	a3 78       	lsl	r8,0x3
8000731a:	12 08       	add	r8,r9
8000731c:	a3 78       	lsl	r8,0x3
8000731e:	f8 08 00 08 	add	r8,r12,r8
80007322:	2d 88       	sub	r8,-40
80007324:	f0 e8 00 00 	ld.d	r8,r8[0]
80007328:	f0 16 00 03 	mcall	r6[12]
8000732c:	14 98       	mov	r8,r10
8000732e:	16 99       	mov	r9,r11
80007330:	04 9a       	mov	r10,r2
80007332:	06 9b       	mov	r11,r3
80007334:	f0 16 00 05 	mcall	r6[20]
80007338:	14 98       	mov	r8,r10
8000733a:	16 99       	mov	r9,r11
8000733c:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80007340:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007344:	ec fa 00 1c 	ld.w	r10,r6[28]
80007348:	12 98       	mov	r8,r9
8000734a:	a3 78       	lsl	r8,0x3
8000734c:	12 08       	add	r8,r9
8000734e:	a3 78       	lsl	r8,0x3
80007350:	f4 08 00 08 	add	r8,r10,r8
80007354:	2e 88       	sub	r8,-24
80007356:	f0 ea 00 00 	ld.d	r10,r8[0]
8000735a:	ee eb ff 7c 	st.d	r7[-132],r10
8000735e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007362:	f0 16 00 02 	mcall	r6[8]
80007366:	14 90       	mov	r0,r10
80007368:	16 91       	mov	r1,r11
8000736a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000736e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007372:	12 98       	mov	r8,r9
80007374:	a3 78       	lsl	r8,0x3
80007376:	12 08       	add	r8,r9
80007378:	a3 78       	lsl	r8,0x3
8000737a:	f4 08 00 08 	add	r8,r10,r8
8000737e:	2e 08       	sub	r8,-32
80007380:	f0 ea 00 00 	ld.d	r10,r8[0]
80007384:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007388:	ec fc 00 1c 	ld.w	r12,r6[28]
8000738c:	12 98       	mov	r8,r9
8000738e:	a3 78       	lsl	r8,0x3
80007390:	12 08       	add	r8,r9
80007392:	a3 78       	lsl	r8,0x3
80007394:	f8 08 00 08 	add	r8,r12,r8
80007398:	2d 08       	sub	r8,-48
8000739a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000739e:	f0 16 00 11 	mcall	r6[68]
800073a2:	14 98       	mov	r8,r10
800073a4:	16 99       	mov	r9,r11
800073a6:	10 92       	mov	r2,r8
800073a8:	12 93       	mov	r3,r9
800073aa:	ee fc ff a4 	ld.w	r12,r7[-92]
800073ae:	f0 16 00 02 	mcall	r6[8]
800073b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073b6:	ec fc 00 1c 	ld.w	r12,r6[28]
800073ba:	12 98       	mov	r8,r9
800073bc:	a3 78       	lsl	r8,0x3
800073be:	12 08       	add	r8,r9
800073c0:	a3 78       	lsl	r8,0x3
800073c2:	f8 08 00 08 	add	r8,r12,r8
800073c6:	2c 88       	sub	r8,-56
800073c8:	f0 e8 00 00 	ld.d	r8,r8[0]
800073cc:	f0 16 00 03 	mcall	r6[12]
800073d0:	14 98       	mov	r8,r10
800073d2:	16 99       	mov	r9,r11
800073d4:	04 9a       	mov	r10,r2
800073d6:	06 9b       	mov	r11,r3
800073d8:	f0 16 00 11 	mcall	r6[68]
800073dc:	14 98       	mov	r8,r10
800073de:	16 99       	mov	r9,r11
800073e0:	00 9a       	mov	r10,r0
800073e2:	02 9b       	mov	r11,r1
800073e4:	f0 16 00 03 	mcall	r6[12]
800073e8:	14 98       	mov	r8,r10
800073ea:	16 99       	mov	r9,r11
800073ec:	ee ea ff 7c 	ld.d	r10,r7[-132]
800073f0:	f0 16 00 05 	mcall	r6[20]
800073f4:	14 98       	mov	r8,r10
800073f6:	16 99       	mov	r9,r11
800073f8:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
800073fc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007400:	ec fa 00 1c 	ld.w	r10,r6[28]
80007404:	12 98       	mov	r8,r9
80007406:	a3 78       	lsl	r8,0x3
80007408:	12 08       	add	r8,r9
8000740a:	a3 78       	lsl	r8,0x3
8000740c:	f4 08 00 08 	add	r8,r10,r8
80007410:	2e 08       	sub	r8,-32
80007412:	f0 e0 00 00 	ld.d	r0,r8[0]
80007416:	ee fc ff a4 	ld.w	r12,r7[-92]
8000741a:	f0 16 00 02 	mcall	r6[8]
8000741e:	ee eb ff 84 	st.d	r7[-124],r10
80007422:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007426:	ec fa 00 1c 	ld.w	r10,r6[28]
8000742a:	12 98       	mov	r8,r9
8000742c:	a3 78       	lsl	r8,0x3
8000742e:	12 08       	add	r8,r9
80007430:	a3 78       	lsl	r8,0x3
80007432:	f4 08 00 08 	add	r8,r10,r8
80007436:	2c 88       	sub	r8,-56
80007438:	f0 e8 00 00 	ld.d	r8,r8[0]
8000743c:	12 9a       	mov	r10,r9
8000743e:	ee 1a 80 00 	eorh	r10,0x8000
80007442:	ef 4a ff 8c 	st.w	r7[-116],r10
80007446:	10 95       	mov	r5,r8
80007448:	ef 45 ff 90 	st.w	r7[-112],r5
8000744c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007450:	ec fa 00 1c 	ld.w	r10,r6[28]
80007454:	12 98       	mov	r8,r9
80007456:	a3 78       	lsl	r8,0x3
80007458:	12 08       	add	r8,r9
8000745a:	a3 78       	lsl	r8,0x3
8000745c:	f4 08 00 08 	add	r8,r10,r8
80007460:	2d 88       	sub	r8,-40
80007462:	f0 e8 00 00 	ld.d	r8,r8[0]
80007466:	ee ea ff 8c 	ld.d	r10,r7[-116]
8000746a:	f0 16 00 11 	mcall	r6[68]
8000746e:	14 98       	mov	r8,r10
80007470:	16 99       	mov	r9,r11
80007472:	10 92       	mov	r2,r8
80007474:	12 93       	mov	r3,r9
80007476:	ee fc ff a4 	ld.w	r12,r7[-92]
8000747a:	f0 16 00 02 	mcall	r6[8]
8000747e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007482:	ec fc 00 1c 	ld.w	r12,r6[28]
80007486:	12 98       	mov	r8,r9
80007488:	a3 78       	lsl	r8,0x3
8000748a:	12 08       	add	r8,r9
8000748c:	a3 78       	lsl	r8,0x3
8000748e:	f8 08 00 08 	add	r8,r12,r8
80007492:	2c 08       	sub	r8,-64
80007494:	f0 e8 00 00 	ld.d	r8,r8[0]
80007498:	f0 16 00 03 	mcall	r6[12]
8000749c:	14 98       	mov	r8,r10
8000749e:	16 99       	mov	r9,r11
800074a0:	04 9a       	mov	r10,r2
800074a2:	06 9b       	mov	r11,r3
800074a4:	f0 16 00 05 	mcall	r6[20]
800074a8:	14 98       	mov	r8,r10
800074aa:	16 99       	mov	r9,r11
800074ac:	ee ea ff 84 	ld.d	r10,r7[-124]
800074b0:	f0 16 00 03 	mcall	r6[12]
800074b4:	14 98       	mov	r8,r10
800074b6:	16 99       	mov	r9,r11
800074b8:	00 9a       	mov	r10,r0
800074ba:	02 9b       	mov	r11,r1
800074bc:	f0 16 00 05 	mcall	r6[20]
800074c0:	14 98       	mov	r8,r10
800074c2:	16 99       	mov	r9,r11
800074c4:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
800074c8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074cc:	ec fa 00 1c 	ld.w	r10,r6[28]
800074d0:	12 98       	mov	r8,r9
800074d2:	a3 78       	lsl	r8,0x3
800074d4:	12 08       	add	r8,r9
800074d6:	a3 78       	lsl	r8,0x3
800074d8:	f4 08 00 08 	add	r8,r10,r8
800074dc:	2d 88       	sub	r8,-40
800074de:	f0 e2 00 00 	ld.d	r2,r8[0]
800074e2:	ee fc ff a4 	ld.w	r12,r7[-92]
800074e6:	f0 16 00 02 	mcall	r6[8]
800074ea:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074ee:	ec fc 00 1c 	ld.w	r12,r6[28]
800074f2:	12 98       	mov	r8,r9
800074f4:	a3 78       	lsl	r8,0x3
800074f6:	12 08       	add	r8,r9
800074f8:	a3 78       	lsl	r8,0x3
800074fa:	f8 08 00 08 	add	r8,r12,r8
800074fe:	2c 08       	sub	r8,-64
80007500:	f0 e8 00 00 	ld.d	r8,r8[0]
80007504:	12 94       	mov	r4,r9
80007506:	ee 14 80 00 	eorh	r4,0x8000
8000750a:	ef 44 ff 94 	st.w	r7[-108],r4
8000750e:	10 9c       	mov	r12,r8
80007510:	ef 4c ff 98 	st.w	r7[-104],r12
80007514:	ee e8 ff 94 	ld.d	r8,r7[-108]
80007518:	f0 16 00 03 	mcall	r6[12]
8000751c:	14 98       	mov	r8,r10
8000751e:	16 99       	mov	r9,r11
80007520:	04 9a       	mov	r10,r2
80007522:	06 9b       	mov	r11,r3
80007524:	f0 16 00 05 	mcall	r6[20]
80007528:	14 98       	mov	r8,r10
8000752a:	16 99       	mov	r9,r11
8000752c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80007530:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007534:	ec fa 00 1c 	ld.w	r10,r6[28]
80007538:	12 98       	mov	r8,r9
8000753a:	a3 78       	lsl	r8,0x3
8000753c:	12 08       	add	r8,r9
8000753e:	a3 78       	lsl	r8,0x3
80007540:	f4 08 00 08 	add	r8,r10,r8
80007544:	2d 08       	sub	r8,-48
80007546:	f0 e2 00 00 	ld.d	r2,r8[0]
8000754a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000754e:	f0 16 00 02 	mcall	r6[8]
80007552:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007556:	ec fc 00 1c 	ld.w	r12,r6[28]
8000755a:	12 98       	mov	r8,r9
8000755c:	a3 78       	lsl	r8,0x3
8000755e:	12 08       	add	r8,r9
80007560:	a3 78       	lsl	r8,0x3
80007562:	f8 08 00 08 	add	r8,r12,r8
80007566:	2c 88       	sub	r8,-56
80007568:	f0 e8 00 00 	ld.d	r8,r8[0]
8000756c:	f0 16 00 03 	mcall	r6[12]
80007570:	14 98       	mov	r8,r10
80007572:	16 99       	mov	r9,r11
80007574:	04 9a       	mov	r10,r2
80007576:	06 9b       	mov	r11,r3
80007578:	f0 16 00 05 	mcall	r6[20]
8000757c:	14 98       	mov	r8,r10
8000757e:	16 99       	mov	r9,r11
80007580:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
80007584:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007588:	ec fa 00 1c 	ld.w	r10,r6[28]
8000758c:	12 98       	mov	r8,r9
8000758e:	a3 78       	lsl	r8,0x3
80007590:	12 08       	add	r8,r9
80007592:	a3 78       	lsl	r8,0x3
80007594:	f4 08 00 08 	add	r8,r10,r8
80007598:	2c 88       	sub	r8,-56
8000759a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000759e:	ee fc ff a4 	ld.w	r12,r7[-92]
800075a2:	f0 16 00 02 	mcall	r6[8]
800075a6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075aa:	ec fc 00 1c 	ld.w	r12,r6[28]
800075ae:	12 98       	mov	r8,r9
800075b0:	a3 78       	lsl	r8,0x3
800075b2:	12 08       	add	r8,r9
800075b4:	a3 78       	lsl	r8,0x3
800075b6:	f8 08 00 08 	add	r8,r12,r8
800075ba:	2c 08       	sub	r8,-64
800075bc:	f0 e8 00 00 	ld.d	r8,r8[0]
800075c0:	12 95       	mov	r5,r9
800075c2:	ee 15 80 00 	eorh	r5,0x8000
800075c6:	ef 45 ff 9c 	st.w	r7[-100],r5
800075ca:	10 94       	mov	r4,r8
800075cc:	ef 44 ff a0 	st.w	r7[-96],r4
800075d0:	ee e8 ff 9c 	ld.d	r8,r7[-100]
800075d4:	f0 16 00 03 	mcall	r6[12]
800075d8:	14 98       	mov	r8,r10
800075da:	16 99       	mov	r9,r11
800075dc:	04 9a       	mov	r10,r2
800075de:	06 9b       	mov	r11,r3
800075e0:	f0 16 00 05 	mcall	r6[20]
800075e4:	14 98       	mov	r8,r10
800075e6:	16 99       	mov	r9,r11
800075e8:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
800075ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075f0:	ec fa 00 1c 	ld.w	r10,r6[28]
800075f4:	12 98       	mov	r8,r9
800075f6:	a3 78       	lsl	r8,0x3
800075f8:	12 08       	add	r8,r9
800075fa:	a3 78       	lsl	r8,0x3
800075fc:	f4 08 00 08 	add	r8,r10,r8
80007600:	2c 08       	sub	r8,-64
80007602:	f0 e8 00 00 	ld.d	r8,r8[0]
80007606:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
8000760a:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000760e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007612:	ec fa 00 e0 	ld.w	r10,r6[224]
80007616:	12 98       	mov	r8,r9
80007618:	a1 78       	lsl	r8,0x1
8000761a:	12 08       	add	r8,r9
8000761c:	a3 78       	lsl	r8,0x3
8000761e:	f4 08 00 08 	add	r8,r10,r8
80007622:	f0 ea 00 00 	ld.d	r10,r8[0]
80007626:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000762a:	f0 16 00 05 	mcall	r6[20]
8000762e:	14 98       	mov	r8,r10
80007630:	16 99       	mov	r9,r11
80007632:	10 9a       	mov	r10,r8
80007634:	12 9b       	mov	r11,r9
80007636:	ec f9 00 1c 	ld.w	r9,r6[28]
8000763a:	0a 98       	mov	r8,r5
8000763c:	a3 78       	lsl	r8,0x3
8000763e:	0a 08       	add	r8,r5
80007640:	a3 78       	lsl	r8,0x3
80007642:	f2 08 00 08 	add	r8,r9,r8
80007646:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
8000764a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000764e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007652:	12 98       	mov	r8,r9
80007654:	a3 78       	lsl	r8,0x3
80007656:	12 08       	add	r8,r9
80007658:	f0 cb ff ff 	sub	r11,r8,-1
8000765c:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007660:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
80007664:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007668:	ec fa 00 1c 	ld.w	r10,r6[28]
8000766c:	12 98       	mov	r8,r9
8000766e:	a3 78       	lsl	r8,0x3
80007670:	12 08       	add	r8,r9
80007672:	a3 78       	lsl	r8,0x3
80007674:	f4 08 00 08 	add	r8,r10,r8
80007678:	f0 ca ff f0 	sub	r10,r8,-16
8000767c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007680:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007684:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007688:	ec fa 00 1c 	ld.w	r10,r6[28]
8000768c:	12 98       	mov	r8,r9
8000768e:	a3 78       	lsl	r8,0x3
80007690:	12 08       	add	r8,r9
80007692:	a3 78       	lsl	r8,0x3
80007694:	f4 08 00 08 	add	r8,r10,r8
80007698:	f0 ca ff e8 	sub	r10,r8,-24
8000769c:	ee e8 ff d0 	ld.d	r8,r7[-48]
800076a0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800076a4:	ee f5 ff ac 	ld.w	r5,r7[-84]
800076a8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076ac:	ec fa 00 e0 	ld.w	r10,r6[224]
800076b0:	12 98       	mov	r8,r9
800076b2:	a1 78       	lsl	r8,0x1
800076b4:	12 08       	add	r8,r9
800076b6:	2f f8       	sub	r8,-1
800076b8:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800076bc:	ee e8 ff d8 	ld.d	r8,r7[-40]
800076c0:	f0 16 00 05 	mcall	r6[20]
800076c4:	14 98       	mov	r8,r10
800076c6:	16 99       	mov	r9,r11
800076c8:	10 9a       	mov	r10,r8
800076ca:	12 9b       	mov	r11,r9
800076cc:	ec f9 00 1c 	ld.w	r9,r6[28]
800076d0:	0a 98       	mov	r8,r5
800076d2:	a3 78       	lsl	r8,0x3
800076d4:	0a 08       	add	r8,r5
800076d6:	a3 78       	lsl	r8,0x3
800076d8:	f2 08 00 08 	add	r8,r9,r8
800076dc:	2e 08       	sub	r8,-32
800076de:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
800076e2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076e6:	ec fa 00 1c 	ld.w	r10,r6[28]
800076ea:	12 98       	mov	r8,r9
800076ec:	a3 78       	lsl	r8,0x3
800076ee:	12 08       	add	r8,r9
800076f0:	a3 78       	lsl	r8,0x3
800076f2:	f4 08 00 08 	add	r8,r10,r8
800076f6:	f0 ca ff d8 	sub	r10,r8,-40
800076fa:	ee e8 ff e0 	ld.d	r8,r7[-32]
800076fe:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007702:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007706:	ec fa 00 1c 	ld.w	r10,r6[28]
8000770a:	12 98       	mov	r8,r9
8000770c:	a3 78       	lsl	r8,0x3
8000770e:	12 08       	add	r8,r9
80007710:	a3 78       	lsl	r8,0x3
80007712:	f4 08 00 08 	add	r8,r10,r8
80007716:	f0 ca ff d0 	sub	r10,r8,-48
8000771a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000771e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80007722:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007726:	ec fa 00 1c 	ld.w	r10,r6[28]
8000772a:	12 98       	mov	r8,r9
8000772c:	a3 78       	lsl	r8,0x3
8000772e:	12 08       	add	r8,r9
80007730:	a3 78       	lsl	r8,0x3
80007732:	f4 08 00 08 	add	r8,r10,r8
80007736:	f0 ca ff c8 	sub	r10,r8,-56
8000773a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000773e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80007742:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007746:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000774a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000774e:	12 98       	mov	r8,r9
80007750:	a1 78       	lsl	r8,0x1
80007752:	12 08       	add	r8,r9
80007754:	a3 78       	lsl	r8,0x3
80007756:	f4 08 00 08 	add	r8,r10,r8
8000775a:	2f 08       	sub	r8,-16
8000775c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007760:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007764:	f0 16 00 05 	mcall	r6[20]
80007768:	14 98       	mov	r8,r10
8000776a:	16 99       	mov	r9,r11
8000776c:	10 9a       	mov	r10,r8
8000776e:	12 9b       	mov	r11,r9
80007770:	ec f9 00 1c 	ld.w	r9,r6[28]
80007774:	0a 98       	mov	r8,r5
80007776:	a3 78       	lsl	r8,0x3
80007778:	0a 08       	add	r8,r5
8000777a:	a3 78       	lsl	r8,0x3
8000777c:	f2 08 00 08 	add	r8,r9,r8
80007780:	2c 08       	sub	r8,-64
80007782:	f0 eb 00 00 	st.d	r8[0],r10
}
80007786:	2c dd       	sub	sp,-204
80007788:	d8 32       	popm	r0-r7,pc
8000778a:	00 00       	add	r0,r0
8000778c:	80 00       	ld.sh	r0,r0[0x0]
8000778e:	69 12       	ld.w	r2,r4[0x44]

80007790 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007790:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007794:	1a 97       	mov	r7,sp
80007796:	20 fd       	sub	sp,60
80007798:	fe f6 05 88 	ld.w	r6,pc[1416]
8000779c:	1e 26       	rsub	r6,pc
8000779e:	ef 4c ff dc 	st.w	r7[-36],r12
800077a2:	ef 4b ff d8 	st.w	r7[-40],r11
800077a6:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
800077aa:	ec f8 00 00 	ld.w	r8,r6[0]
800077ae:	70 01       	ld.w	r1,r8[0x0]
800077b0:	ee f5 ff dc 	ld.w	r5,r7[-36]
800077b4:	ec f8 00 00 	ld.w	r8,r6[0]
800077b8:	70 0a       	ld.w	r10,r8[0x0]
800077ba:	ee f9 ff dc 	ld.w	r9,r7[-36]
800077be:	12 98       	mov	r8,r9
800077c0:	a1 78       	lsl	r8,0x1
800077c2:	12 08       	add	r8,r9
800077c4:	a3 78       	lsl	r8,0x3
800077c6:	f4 08 00 08 	add	r8,r10,r8
800077ca:	f0 c8 f4 a4 	sub	r8,r8,-2908
800077ce:	f0 e2 00 00 	ld.d	r2,r8[0]
800077d2:	ee fc ff d4 	ld.w	r12,r7[-44]
800077d6:	f0 16 00 02 	mcall	r6[8]
800077da:	ec f8 00 00 	ld.w	r8,r6[0]
800077de:	70 0c       	ld.w	r12,r8[0x0]
800077e0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800077e4:	12 98       	mov	r8,r9
800077e6:	a1 78       	lsl	r8,0x1
800077e8:	12 08       	add	r8,r9
800077ea:	2f f8       	sub	r8,-1
800077ec:	a3 78       	lsl	r8,0x3
800077ee:	f8 08 00 08 	add	r8,r12,r8
800077f2:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
800077f6:	f0 16 00 03 	mcall	r6[12]
800077fa:	14 98       	mov	r8,r10
800077fc:	16 99       	mov	r9,r11
800077fe:	04 9a       	mov	r10,r2
80007800:	06 9b       	mov	r11,r3
80007802:	f0 16 00 05 	mcall	r6[20]
80007806:	14 98       	mov	r8,r10
80007808:	16 99       	mov	r9,r11
8000780a:	10 92       	mov	r2,r8
8000780c:	12 93       	mov	r3,r9
8000780e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007812:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007816:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000781a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000781e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007822:	10 9c       	mov	r12,r8
80007824:	f0 16 00 02 	mcall	r6[8]
80007828:	14 98       	mov	r8,r10
8000782a:	16 99       	mov	r9,r11
8000782c:	04 9a       	mov	r10,r2
8000782e:	06 9b       	mov	r11,r3
80007830:	f0 16 00 05 	mcall	r6[20]
80007834:	14 98       	mov	r8,r10
80007836:	16 99       	mov	r9,r11
80007838:	10 9a       	mov	r10,r8
8000783a:	12 9b       	mov	r11,r9
8000783c:	0a 98       	mov	r8,r5
8000783e:	a1 78       	lsl	r8,0x1
80007840:	0a 08       	add	r8,r5
80007842:	a3 78       	lsl	r8,0x3
80007844:	e2 08 00 08 	add	r8,r1,r8
80007848:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000784c:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80007850:	ec f8 00 00 	ld.w	r8,r6[0]
80007854:	70 01       	ld.w	r1,r8[0x0]
80007856:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000785a:	ec f8 00 00 	ld.w	r8,r6[0]
8000785e:	70 0a       	ld.w	r10,r8[0x0]
80007860:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007864:	12 98       	mov	r8,r9
80007866:	a1 78       	lsl	r8,0x1
80007868:	12 08       	add	r8,r9
8000786a:	a3 78       	lsl	r8,0x3
8000786c:	f4 08 00 08 	add	r8,r10,r8
80007870:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007874:	f0 e2 00 00 	ld.d	r2,r8[0]
80007878:	ee fc ff d4 	ld.w	r12,r7[-44]
8000787c:	f0 16 00 02 	mcall	r6[8]
80007880:	ec f8 00 00 	ld.w	r8,r6[0]
80007884:	70 0c       	ld.w	r12,r8[0x0]
80007886:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000788a:	12 98       	mov	r8,r9
8000788c:	a1 78       	lsl	r8,0x1
8000788e:	12 08       	add	r8,r9
80007890:	2f f8       	sub	r8,-1
80007892:	a3 78       	lsl	r8,0x3
80007894:	f8 08 00 08 	add	r8,r12,r8
80007898:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000789c:	f0 16 00 03 	mcall	r6[12]
800078a0:	14 98       	mov	r8,r10
800078a2:	16 99       	mov	r9,r11
800078a4:	04 9a       	mov	r10,r2
800078a6:	06 9b       	mov	r11,r3
800078a8:	f0 16 00 05 	mcall	r6[20]
800078ac:	14 98       	mov	r8,r10
800078ae:	16 99       	mov	r9,r11
800078b0:	10 9a       	mov	r10,r8
800078b2:	12 9b       	mov	r11,r9
800078b4:	0a 98       	mov	r8,r5
800078b6:	a1 78       	lsl	r8,0x1
800078b8:	0a 08       	add	r8,r5
800078ba:	a3 78       	lsl	r8,0x3
800078bc:	e2 08 00 08 	add	r8,r1,r8
800078c0:	f0 c8 f4 a4 	sub	r8,r8,-2908
800078c4:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
800078c8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800078cc:	ec fa 00 18 	ld.w	r10,r6[24]
800078d0:	12 98       	mov	r8,r9
800078d2:	a3 78       	lsl	r8,0x3
800078d4:	12 08       	add	r8,r9
800078d6:	a3 78       	lsl	r8,0x3
800078d8:	f4 08 00 08 	add	r8,r10,r8
800078dc:	f0 e2 00 00 	ld.d	r2,r8[0]
800078e0:	ee fc ff d4 	ld.w	r12,r7[-44]
800078e4:	f0 16 00 02 	mcall	r6[8]
800078e8:	14 90       	mov	r0,r10
800078ea:	16 91       	mov	r1,r11
800078ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
800078f0:	ec fa 00 18 	ld.w	r10,r6[24]
800078f4:	12 98       	mov	r8,r9
800078f6:	a3 78       	lsl	r8,0x3
800078f8:	12 08       	add	r8,r9
800078fa:	a3 78       	lsl	r8,0x3
800078fc:	f4 08 00 08 	add	r8,r10,r8
80007900:	2e 88       	sub	r8,-24
80007902:	f0 ea 00 00 	ld.d	r10,r8[0]
80007906:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000790a:	ec fc 00 18 	ld.w	r12,r6[24]
8000790e:	12 98       	mov	r8,r9
80007910:	a3 78       	lsl	r8,0x3
80007912:	12 08       	add	r8,r9
80007914:	2f f8       	sub	r8,-1
80007916:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000791a:	f0 16 00 05 	mcall	r6[20]
8000791e:	14 98       	mov	r8,r10
80007920:	16 99       	mov	r9,r11
80007922:	ee e9 ff c4 	st.d	r7[-60],r8
80007926:	ee fc ff d4 	ld.w	r12,r7[-44]
8000792a:	f0 16 00 02 	mcall	r6[8]
8000792e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007932:	ec fc 00 18 	ld.w	r12,r6[24]
80007936:	12 98       	mov	r8,r9
80007938:	a3 78       	lsl	r8,0x3
8000793a:	12 08       	add	r8,r9
8000793c:	a3 78       	lsl	r8,0x3
8000793e:	f8 08 00 08 	add	r8,r12,r8
80007942:	2e 08       	sub	r8,-32
80007944:	f0 e8 00 00 	ld.d	r8,r8[0]
80007948:	f0 16 00 03 	mcall	r6[12]
8000794c:	14 98       	mov	r8,r10
8000794e:	16 99       	mov	r9,r11
80007950:	ee ea ff c4 	ld.d	r10,r7[-60]
80007954:	f0 16 00 05 	mcall	r6[20]
80007958:	14 98       	mov	r8,r10
8000795a:	16 99       	mov	r9,r11
8000795c:	00 9a       	mov	r10,r0
8000795e:	02 9b       	mov	r11,r1
80007960:	f0 16 00 03 	mcall	r6[12]
80007964:	14 98       	mov	r8,r10
80007966:	16 99       	mov	r9,r11
80007968:	04 9a       	mov	r10,r2
8000796a:	06 9b       	mov	r11,r3
8000796c:	f0 16 00 05 	mcall	r6[20]
80007970:	14 98       	mov	r8,r10
80007972:	16 99       	mov	r9,r11
80007974:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80007978:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000797c:	ec fa 00 18 	ld.w	r10,r6[24]
80007980:	12 98       	mov	r8,r9
80007982:	a3 78       	lsl	r8,0x3
80007984:	12 08       	add	r8,r9
80007986:	2f f8       	sub	r8,-1
80007988:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
8000798c:	ee fc ff d4 	ld.w	r12,r7[-44]
80007990:	f0 16 00 02 	mcall	r6[8]
80007994:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007998:	ec fc 00 18 	ld.w	r12,r6[24]
8000799c:	12 98       	mov	r8,r9
8000799e:	a3 78       	lsl	r8,0x3
800079a0:	12 08       	add	r8,r9
800079a2:	a3 78       	lsl	r8,0x3
800079a4:	f8 08 00 08 	add	r8,r12,r8
800079a8:	2e 08       	sub	r8,-32
800079aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800079ae:	f0 16 00 03 	mcall	r6[12]
800079b2:	14 98       	mov	r8,r10
800079b4:	16 99       	mov	r9,r11
800079b6:	04 9a       	mov	r10,r2
800079b8:	06 9b       	mov	r11,r3
800079ba:	f0 16 00 05 	mcall	r6[20]
800079be:	14 98       	mov	r8,r10
800079c0:	16 99       	mov	r9,r11
800079c2:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
800079c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800079ca:	ec fa 00 18 	ld.w	r10,r6[24]
800079ce:	12 98       	mov	r8,r9
800079d0:	a3 78       	lsl	r8,0x3
800079d2:	12 08       	add	r8,r9
800079d4:	a3 78       	lsl	r8,0x3
800079d6:	f4 08 00 08 	add	r8,r10,r8
800079da:	2e 88       	sub	r8,-24
800079dc:	f0 e2 00 00 	ld.d	r2,r8[0]
800079e0:	ee fc ff d4 	ld.w	r12,r7[-44]
800079e4:	f0 16 00 02 	mcall	r6[8]
800079e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800079ec:	ec fc 00 18 	ld.w	r12,r6[24]
800079f0:	12 98       	mov	r8,r9
800079f2:	a3 78       	lsl	r8,0x3
800079f4:	12 08       	add	r8,r9
800079f6:	a3 78       	lsl	r8,0x3
800079f8:	f8 08 00 08 	add	r8,r12,r8
800079fc:	2e 08       	sub	r8,-32
800079fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a02:	f0 16 00 03 	mcall	r6[12]
80007a06:	14 98       	mov	r8,r10
80007a08:	16 99       	mov	r9,r11
80007a0a:	04 9a       	mov	r10,r2
80007a0c:	06 9b       	mov	r11,r3
80007a0e:	f0 16 00 05 	mcall	r6[20]
80007a12:	14 98       	mov	r8,r10
80007a14:	16 99       	mov	r9,r11
80007a16:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80007a1a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a1e:	ec fa 00 18 	ld.w	r10,r6[24]
80007a22:	12 98       	mov	r8,r9
80007a24:	a3 78       	lsl	r8,0x3
80007a26:	12 08       	add	r8,r9
80007a28:	a3 78       	lsl	r8,0x3
80007a2a:	f4 08 00 08 	add	r8,r10,r8
80007a2e:	2e 08       	sub	r8,-32
80007a30:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a34:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007a38:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007a3c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a40:	ec fa 00 dc 	ld.w	r10,r6[220]
80007a44:	12 98       	mov	r8,r9
80007a46:	a1 78       	lsl	r8,0x1
80007a48:	12 08       	add	r8,r9
80007a4a:	a3 78       	lsl	r8,0x3
80007a4c:	f4 08 00 08 	add	r8,r10,r8
80007a50:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a54:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007a58:	f0 16 00 05 	mcall	r6[20]
80007a5c:	14 98       	mov	r8,r10
80007a5e:	16 99       	mov	r9,r11
80007a60:	10 9a       	mov	r10,r8
80007a62:	12 9b       	mov	r11,r9
80007a64:	ec f9 00 18 	ld.w	r9,r6[24]
80007a68:	0a 98       	mov	r8,r5
80007a6a:	a3 78       	lsl	r8,0x3
80007a6c:	0a 08       	add	r8,r5
80007a6e:	a3 78       	lsl	r8,0x3
80007a70:	f2 08 00 08 	add	r8,r9,r8
80007a74:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007a78:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a7c:	ec fa 00 18 	ld.w	r10,r6[24]
80007a80:	12 98       	mov	r8,r9
80007a82:	a3 78       	lsl	r8,0x3
80007a84:	12 08       	add	r8,r9
80007a86:	f0 cb ff ff 	sub	r11,r8,-1
80007a8a:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007a8e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
80007a92:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a96:	ec fa 00 18 	ld.w	r10,r6[24]
80007a9a:	12 98       	mov	r8,r9
80007a9c:	a3 78       	lsl	r8,0x3
80007a9e:	12 08       	add	r8,r9
80007aa0:	a3 78       	lsl	r8,0x3
80007aa2:	f4 08 00 08 	add	r8,r10,r8
80007aa6:	f0 ca ff e8 	sub	r10,r8,-24
80007aaa:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007aae:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007ab2:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007ab6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007aba:	ec fa 00 dc 	ld.w	r10,r6[220]
80007abe:	12 98       	mov	r8,r9
80007ac0:	a1 78       	lsl	r8,0x1
80007ac2:	12 08       	add	r8,r9
80007ac4:	2f f8       	sub	r8,-1
80007ac6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007aca:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007ace:	f0 16 00 05 	mcall	r6[20]
80007ad2:	14 98       	mov	r8,r10
80007ad4:	16 99       	mov	r9,r11
80007ad6:	10 9a       	mov	r10,r8
80007ad8:	12 9b       	mov	r11,r9
80007ada:	ec f9 00 18 	ld.w	r9,r6[24]
80007ade:	0a 98       	mov	r8,r5
80007ae0:	a3 78       	lsl	r8,0x3
80007ae2:	0a 08       	add	r8,r5
80007ae4:	a3 78       	lsl	r8,0x3
80007ae6:	f2 08 00 08 	add	r8,r9,r8
80007aea:	2e 08       	sub	r8,-32
80007aec:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
80007af0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007af4:	ec fa 00 1c 	ld.w	r10,r6[28]
80007af8:	12 98       	mov	r8,r9
80007afa:	a3 78       	lsl	r8,0x3
80007afc:	12 08       	add	r8,r9
80007afe:	a3 78       	lsl	r8,0x3
80007b00:	f4 08 00 08 	add	r8,r10,r8
80007b04:	f0 e2 00 00 	ld.d	r2,r8[0]
80007b08:	ee fc ff d4 	ld.w	r12,r7[-44]
80007b0c:	f0 16 00 02 	mcall	r6[8]
80007b10:	14 90       	mov	r0,r10
80007b12:	16 91       	mov	r1,r11
80007b14:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b18:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b1c:	12 98       	mov	r8,r9
80007b1e:	a3 78       	lsl	r8,0x3
80007b20:	12 08       	add	r8,r9
80007b22:	a3 78       	lsl	r8,0x3
80007b24:	f4 08 00 08 	add	r8,r10,r8
80007b28:	2e 88       	sub	r8,-24
80007b2a:	f0 ea 00 00 	ld.d	r10,r8[0]
80007b2e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b32:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b36:	12 98       	mov	r8,r9
80007b38:	a3 78       	lsl	r8,0x3
80007b3a:	12 08       	add	r8,r9
80007b3c:	2f f8       	sub	r8,-1
80007b3e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007b42:	f0 16 00 05 	mcall	r6[20]
80007b46:	14 98       	mov	r8,r10
80007b48:	16 99       	mov	r9,r11
80007b4a:	ee e9 ff cc 	st.d	r7[-52],r8
80007b4e:	ee fc ff d4 	ld.w	r12,r7[-44]
80007b52:	f0 16 00 02 	mcall	r6[8]
80007b56:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b5a:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b5e:	12 98       	mov	r8,r9
80007b60:	a3 78       	lsl	r8,0x3
80007b62:	12 08       	add	r8,r9
80007b64:	a3 78       	lsl	r8,0x3
80007b66:	f8 08 00 08 	add	r8,r12,r8
80007b6a:	2e 08       	sub	r8,-32
80007b6c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b70:	f0 16 00 03 	mcall	r6[12]
80007b74:	14 98       	mov	r8,r10
80007b76:	16 99       	mov	r9,r11
80007b78:	ee ea ff cc 	ld.d	r10,r7[-52]
80007b7c:	f0 16 00 05 	mcall	r6[20]
80007b80:	14 98       	mov	r8,r10
80007b82:	16 99       	mov	r9,r11
80007b84:	00 9a       	mov	r10,r0
80007b86:	02 9b       	mov	r11,r1
80007b88:	f0 16 00 03 	mcall	r6[12]
80007b8c:	14 98       	mov	r8,r10
80007b8e:	16 99       	mov	r9,r11
80007b90:	04 9a       	mov	r10,r2
80007b92:	06 9b       	mov	r11,r3
80007b94:	f0 16 00 05 	mcall	r6[20]
80007b98:	14 98       	mov	r8,r10
80007b9a:	16 99       	mov	r9,r11
80007b9c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
80007ba0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ba4:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ba8:	12 98       	mov	r8,r9
80007baa:	a3 78       	lsl	r8,0x3
80007bac:	12 08       	add	r8,r9
80007bae:	2f f8       	sub	r8,-1
80007bb0:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80007bb4:	ee fc ff d4 	ld.w	r12,r7[-44]
80007bb8:	f0 16 00 02 	mcall	r6[8]
80007bbc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007bc0:	ec fc 00 1c 	ld.w	r12,r6[28]
80007bc4:	12 98       	mov	r8,r9
80007bc6:	a3 78       	lsl	r8,0x3
80007bc8:	12 08       	add	r8,r9
80007bca:	a3 78       	lsl	r8,0x3
80007bcc:	f8 08 00 08 	add	r8,r12,r8
80007bd0:	2e 08       	sub	r8,-32
80007bd2:	f0 e8 00 00 	ld.d	r8,r8[0]
80007bd6:	f0 16 00 03 	mcall	r6[12]
80007bda:	14 98       	mov	r8,r10
80007bdc:	16 99       	mov	r9,r11
80007bde:	04 9a       	mov	r10,r2
80007be0:	06 9b       	mov	r11,r3
80007be2:	f0 16 00 05 	mcall	r6[20]
80007be6:	14 98       	mov	r8,r10
80007be8:	16 99       	mov	r9,r11
80007bea:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
80007bee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007bf2:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bf6:	12 98       	mov	r8,r9
80007bf8:	a3 78       	lsl	r8,0x3
80007bfa:	12 08       	add	r8,r9
80007bfc:	a3 78       	lsl	r8,0x3
80007bfe:	f4 08 00 08 	add	r8,r10,r8
80007c02:	2e 88       	sub	r8,-24
80007c04:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c08:	ee fc ff d4 	ld.w	r12,r7[-44]
80007c0c:	f0 16 00 02 	mcall	r6[8]
80007c10:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c14:	ec fc 00 1c 	ld.w	r12,r6[28]
80007c18:	12 98       	mov	r8,r9
80007c1a:	a3 78       	lsl	r8,0x3
80007c1c:	12 08       	add	r8,r9
80007c1e:	a3 78       	lsl	r8,0x3
80007c20:	f8 08 00 08 	add	r8,r12,r8
80007c24:	2e 08       	sub	r8,-32
80007c26:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c2a:	f0 16 00 03 	mcall	r6[12]
80007c2e:	14 98       	mov	r8,r10
80007c30:	16 99       	mov	r9,r11
80007c32:	04 9a       	mov	r10,r2
80007c34:	06 9b       	mov	r11,r3
80007c36:	f0 16 00 05 	mcall	r6[20]
80007c3a:	14 98       	mov	r8,r10
80007c3c:	16 99       	mov	r9,r11
80007c3e:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
80007c42:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c46:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c4a:	12 98       	mov	r8,r9
80007c4c:	a3 78       	lsl	r8,0x3
80007c4e:	12 08       	add	r8,r9
80007c50:	a3 78       	lsl	r8,0x3
80007c52:	f4 08 00 08 	add	r8,r10,r8
80007c56:	2e 08       	sub	r8,-32
80007c58:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c5c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80007c60:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007c64:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c68:	ec fa 00 e0 	ld.w	r10,r6[224]
80007c6c:	12 98       	mov	r8,r9
80007c6e:	a1 78       	lsl	r8,0x1
80007c70:	12 08       	add	r8,r9
80007c72:	a3 78       	lsl	r8,0x3
80007c74:	f4 08 00 08 	add	r8,r10,r8
80007c78:	f0 ea 00 00 	ld.d	r10,r8[0]
80007c7c:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007c80:	f0 16 00 05 	mcall	r6[20]
80007c84:	14 98       	mov	r8,r10
80007c86:	16 99       	mov	r9,r11
80007c88:	10 9a       	mov	r10,r8
80007c8a:	12 9b       	mov	r11,r9
80007c8c:	ec f9 00 1c 	ld.w	r9,r6[28]
80007c90:	0a 98       	mov	r8,r5
80007c92:	a3 78       	lsl	r8,0x3
80007c94:	0a 08       	add	r8,r5
80007c96:	a3 78       	lsl	r8,0x3
80007c98:	f2 08 00 08 	add	r8,r9,r8
80007c9c:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007ca0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ca4:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ca8:	12 98       	mov	r8,r9
80007caa:	a3 78       	lsl	r8,0x3
80007cac:	12 08       	add	r8,r9
80007cae:	f0 cb ff ff 	sub	r11,r8,-1
80007cb2:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007cb6:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
80007cba:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cbe:	ec fa 00 1c 	ld.w	r10,r6[28]
80007cc2:	12 98       	mov	r8,r9
80007cc4:	a3 78       	lsl	r8,0x3
80007cc6:	12 08       	add	r8,r9
80007cc8:	a3 78       	lsl	r8,0x3
80007cca:	f4 08 00 08 	add	r8,r10,r8
80007cce:	f0 ca ff e8 	sub	r10,r8,-24
80007cd2:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007cd6:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007cda:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007cde:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ce2:	ec fa 00 e0 	ld.w	r10,r6[224]
80007ce6:	12 98       	mov	r8,r9
80007ce8:	a1 78       	lsl	r8,0x1
80007cea:	12 08       	add	r8,r9
80007cec:	2f f8       	sub	r8,-1
80007cee:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007cf2:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007cf6:	f0 16 00 05 	mcall	r6[20]
80007cfa:	14 98       	mov	r8,r10
80007cfc:	16 99       	mov	r9,r11
80007cfe:	10 9a       	mov	r10,r8
80007d00:	12 9b       	mov	r11,r9
80007d02:	ec f9 00 1c 	ld.w	r9,r6[28]
80007d06:	0a 98       	mov	r8,r5
80007d08:	a3 78       	lsl	r8,0x3
80007d0a:	0a 08       	add	r8,r5
80007d0c:	a3 78       	lsl	r8,0x3
80007d0e:	f2 08 00 08 	add	r8,r9,r8
80007d12:	2e 08       	sub	r8,-32
80007d14:	f0 eb 00 00 	st.d	r8[0],r10
}
80007d18:	2f 1d       	sub	sp,-60
80007d1a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80007d1e:	00 00       	add	r0,r0
80007d20:	80 00       	ld.sh	r0,r0[0x0]
80007d22:	76 20       	ld.w	r0,r11[0x8]

80007d24 <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
80007d24:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80007d28:	1a 97       	mov	r7,sp
80007d2a:	fa cd 00 e4 	sub	sp,sp,228
80007d2e:	fe f6 0b fe 	ld.w	r6,pc[3070]
80007d32:	1e 26       	rsub	r6,pc
80007d34:	ef 4c ff 84 	st.w	r7[-124],r12
80007d38:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80007d3c:	ec f8 00 00 	ld.w	r8,r6[0]
80007d40:	70 0a       	ld.w	r10,r8[0x0]
80007d42:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007d46:	12 98       	mov	r8,r9
80007d48:	a1 78       	lsl	r8,0x1
80007d4a:	12 08       	add	r8,r9
80007d4c:	a3 78       	lsl	r8,0x3
80007d4e:	f4 08 00 08 	add	r8,r10,r8
80007d52:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007d56:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d5a:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007d5e:	f0 16 00 11 	mcall	r6[68]
80007d62:	14 98       	mov	r8,r10
80007d64:	16 99       	mov	r9,r11
80007d66:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80007d6a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007d6e:	ec fa 00 18 	ld.w	r10,r6[24]
80007d72:	12 98       	mov	r8,r9
80007d74:	a3 78       	lsl	r8,0x3
80007d76:	12 08       	add	r8,r9
80007d78:	a3 78       	lsl	r8,0x3
80007d7a:	f4 08 00 08 	add	r8,r10,r8
80007d7e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007d82:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007d86:	ec f8 01 68 	ld.w	r8,r6[360]
80007d8a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80007d8e:	f0 16 00 05 	mcall	r6[20]
80007d92:	14 98       	mov	r8,r10
80007d94:	16 99       	mov	r9,r11
80007d96:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
80007d9a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007d9e:	ec fa 00 18 	ld.w	r10,r6[24]
80007da2:	12 98       	mov	r8,r9
80007da4:	a3 78       	lsl	r8,0x3
80007da6:	12 08       	add	r8,r9
80007da8:	a3 78       	lsl	r8,0x3
80007daa:	f4 08 00 08 	add	r8,r10,r8
80007dae:	f0 ea 00 00 	ld.d	r10,r8[0]
80007db2:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007db6:	f0 16 00 0c 	mcall	r6[48]
80007dba:	14 98       	mov	r8,r10
80007dbc:	16 99       	mov	r9,r11
80007dbe:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
80007dc2:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007dc6:	ec fa 00 18 	ld.w	r10,r6[24]
80007dca:	12 98       	mov	r8,r9
80007dcc:	a3 78       	lsl	r8,0x3
80007dce:	12 08       	add	r8,r9
80007dd0:	a3 78       	lsl	r8,0x3
80007dd2:	f4 08 00 08 	add	r8,r10,r8
80007dd6:	2e 88       	sub	r8,-24
80007dd8:	f0 ea 00 00 	ld.d	r10,r8[0]
80007ddc:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007de0:	f0 16 00 0c 	mcall	r6[48]
80007de4:	14 98       	mov	r8,r10
80007de6:	16 99       	mov	r9,r11
80007de8:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
80007dec:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007df0:	ec fa 00 18 	ld.w	r10,r6[24]
80007df4:	12 98       	mov	r8,r9
80007df6:	a3 78       	lsl	r8,0x3
80007df8:	12 08       	add	r8,r9
80007dfa:	a3 78       	lsl	r8,0x3
80007dfc:	f4 08 00 08 	add	r8,r10,r8
80007e00:	2d 08       	sub	r8,-48
80007e02:	f0 ea 00 00 	ld.d	r10,r8[0]
80007e06:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007e0a:	f0 16 00 0c 	mcall	r6[48]
80007e0e:	14 98       	mov	r8,r10
80007e10:	16 99       	mov	r9,r11
80007e12:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
80007e16:	ec f8 00 00 	ld.w	r8,r6[0]
80007e1a:	70 01       	ld.w	r1,r8[0x0]
80007e1c:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007e20:	ec f8 00 00 	ld.w	r8,r6[0]
80007e24:	70 0a       	ld.w	r10,r8[0x0]
80007e26:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007e2a:	12 98       	mov	r8,r9
80007e2c:	a1 78       	lsl	r8,0x1
80007e2e:	12 08       	add	r8,r9
80007e30:	a3 78       	lsl	r8,0x3
80007e32:	f4 08 00 08 	add	r8,r10,r8
80007e36:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007e3a:	f0 e2 00 00 	ld.d	r2,r8[0]
80007e3e:	ee e8 ff 88 	ld.d	r8,r7[-120]
80007e42:	ee ea ff a0 	ld.d	r10,r7[-96]
80007e46:	f0 16 00 03 	mcall	r6[12]
80007e4a:	14 98       	mov	r8,r10
80007e4c:	16 99       	mov	r9,r11
80007e4e:	04 9a       	mov	r10,r2
80007e50:	06 9b       	mov	r11,r3
80007e52:	f0 16 00 05 	mcall	r6[20]
80007e56:	14 98       	mov	r8,r10
80007e58:	16 99       	mov	r9,r11
80007e5a:	10 9a       	mov	r10,r8
80007e5c:	12 9b       	mov	r11,r9
80007e5e:	0a 98       	mov	r8,r5
80007e60:	a1 78       	lsl	r8,0x1
80007e62:	0a 08       	add	r8,r5
80007e64:	a3 78       	lsl	r8,0x3
80007e66:	e2 08 00 08 	add	r8,r1,r8
80007e6a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007e6e:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
80007e72:	ec f8 00 00 	ld.w	r8,r6[0]
80007e76:	70 01       	ld.w	r1,r8[0x0]
80007e78:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007e7c:	ec f8 00 00 	ld.w	r8,r6[0]
80007e80:	70 0a       	ld.w	r10,r8[0x0]
80007e82:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007e86:	12 98       	mov	r8,r9
80007e88:	a1 78       	lsl	r8,0x1
80007e8a:	12 08       	add	r8,r9
80007e8c:	2f f8       	sub	r8,-1
80007e8e:	a3 78       	lsl	r8,0x3
80007e90:	f4 08 00 08 	add	r8,r10,r8
80007e94:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80007e98:	ee e8 ff 88 	ld.d	r8,r7[-120]
80007e9c:	ee ea ff a8 	ld.d	r10,r7[-88]
80007ea0:	f0 16 00 03 	mcall	r6[12]
80007ea4:	14 98       	mov	r8,r10
80007ea6:	16 99       	mov	r9,r11
80007ea8:	04 9a       	mov	r10,r2
80007eaa:	06 9b       	mov	r11,r3
80007eac:	f0 16 00 05 	mcall	r6[20]
80007eb0:	14 98       	mov	r8,r10
80007eb2:	16 99       	mov	r9,r11
80007eb4:	10 9a       	mov	r10,r8
80007eb6:	12 9b       	mov	r11,r9
80007eb8:	0a 98       	mov	r8,r5
80007eba:	a1 78       	lsl	r8,0x1
80007ebc:	0a 08       	add	r8,r5
80007ebe:	2f f8       	sub	r8,-1
80007ec0:	a3 78       	lsl	r8,0x3
80007ec2:	e2 08 00 08 	add	r8,r1,r8
80007ec6:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
80007eca:	ec f8 00 00 	ld.w	r8,r6[0]
80007ece:	70 01       	ld.w	r1,r8[0x0]
80007ed0:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007ed4:	ec f8 00 00 	ld.w	r8,r6[0]
80007ed8:	70 0a       	ld.w	r10,r8[0x0]
80007eda:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007ede:	12 98       	mov	r8,r9
80007ee0:	a1 78       	lsl	r8,0x1
80007ee2:	12 08       	add	r8,r9
80007ee4:	a3 78       	lsl	r8,0x3
80007ee6:	f4 08 00 08 	add	r8,r10,r8
80007eea:	f0 c8 f4 94 	sub	r8,r8,-2924
80007eee:	f0 e2 00 00 	ld.d	r2,r8[0]
80007ef2:	ee e8 ff 88 	ld.d	r8,r7[-120]
80007ef6:	ee ea ff b0 	ld.d	r10,r7[-80]
80007efa:	f0 16 00 03 	mcall	r6[12]
80007efe:	14 98       	mov	r8,r10
80007f00:	16 99       	mov	r9,r11
80007f02:	04 9a       	mov	r10,r2
80007f04:	06 9b       	mov	r11,r3
80007f06:	f0 16 00 05 	mcall	r6[20]
80007f0a:	14 98       	mov	r8,r10
80007f0c:	16 99       	mov	r9,r11
80007f0e:	10 9a       	mov	r10,r8
80007f10:	12 9b       	mov	r11,r9
80007f12:	0a 98       	mov	r8,r5
80007f14:	a1 78       	lsl	r8,0x1
80007f16:	0a 08       	add	r8,r5
80007f18:	a3 78       	lsl	r8,0x3
80007f1a:	e2 08 00 08 	add	r8,r1,r8
80007f1e:	f0 c8 f4 94 	sub	r8,r8,-2924
80007f22:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
80007f26:	ee e8 ff a0 	ld.d	r8,r7[-96]
80007f2a:	30 0a       	mov	r10,0
80007f2c:	fc 1b 3f f0 	movh	r11,0x3ff0
80007f30:	f0 16 00 11 	mcall	r6[68]
80007f34:	14 98       	mov	r8,r10
80007f36:	16 99       	mov	r9,r11
80007f38:	10 9a       	mov	r10,r8
80007f3a:	12 9b       	mov	r11,r9
80007f3c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007f40:	ec fc 00 18 	ld.w	r12,r6[24]
80007f44:	12 98       	mov	r8,r9
80007f46:	a3 78       	lsl	r8,0x3
80007f48:	12 08       	add	r8,r9
80007f4a:	a3 78       	lsl	r8,0x3
80007f4c:	f8 08 00 08 	add	r8,r12,r8
80007f50:	f0 e8 00 00 	ld.d	r8,r8[0]
80007f54:	f0 16 00 03 	mcall	r6[12]
80007f58:	14 98       	mov	r8,r10
80007f5a:	16 99       	mov	r9,r11
80007f5c:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
80007f60:	ee e8 ff a0 	ld.d	r8,r7[-96]
80007f64:	30 0a       	mov	r10,0
80007f66:	fc 1b 3f f0 	movh	r11,0x3ff0
80007f6a:	f0 16 00 11 	mcall	r6[68]
80007f6e:	14 98       	mov	r8,r10
80007f70:	16 99       	mov	r9,r11
80007f72:	10 9a       	mov	r10,r8
80007f74:	12 9b       	mov	r11,r9
80007f76:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007f7a:	ec fc 00 18 	ld.w	r12,r6[24]
80007f7e:	12 98       	mov	r8,r9
80007f80:	a3 78       	lsl	r8,0x3
80007f82:	12 08       	add	r8,r9
80007f84:	2f f8       	sub	r8,-1
80007f86:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007f8a:	f0 16 00 03 	mcall	r6[12]
80007f8e:	14 98       	mov	r8,r10
80007f90:	16 99       	mov	r9,r11
80007f92:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
80007f96:	ee e8 ff a0 	ld.d	r8,r7[-96]
80007f9a:	30 0a       	mov	r10,0
80007f9c:	fc 1b 3f f0 	movh	r11,0x3ff0
80007fa0:	f0 16 00 11 	mcall	r6[68]
80007fa4:	14 98       	mov	r8,r10
80007fa6:	16 99       	mov	r9,r11
80007fa8:	10 9a       	mov	r10,r8
80007faa:	12 9b       	mov	r11,r9
80007fac:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007fb0:	ec fc 00 18 	ld.w	r12,r6[24]
80007fb4:	12 98       	mov	r8,r9
80007fb6:	a3 78       	lsl	r8,0x3
80007fb8:	12 08       	add	r8,r9
80007fba:	a3 78       	lsl	r8,0x3
80007fbc:	f8 08 00 08 	add	r8,r12,r8
80007fc0:	2f 08       	sub	r8,-16
80007fc2:	f0 e8 00 00 	ld.d	r8,r8[0]
80007fc6:	f0 16 00 03 	mcall	r6[12]
80007fca:	14 98       	mov	r8,r10
80007fcc:	16 99       	mov	r9,r11
80007fce:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80007fd2:	ee f8 ff a8 	ld.w	r8,r7[-88]
80007fd6:	10 99       	mov	r9,r8
80007fd8:	ee 19 80 00 	eorh	r9,0x8000
80007fdc:	ef 49 ff 1c 	st.w	r7[-228],r9
80007fe0:	ee f8 ff ac 	ld.w	r8,r7[-84]
80007fe4:	ef 48 ff 20 	st.w	r7[-224],r8
80007fe8:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007fec:	ec fa 00 18 	ld.w	r10,r6[24]
80007ff0:	12 98       	mov	r8,r9
80007ff2:	a3 78       	lsl	r8,0x3
80007ff4:	12 08       	add	r8,r9
80007ff6:	a3 78       	lsl	r8,0x3
80007ff8:	f4 08 00 08 	add	r8,r10,r8
80007ffc:	f0 e8 00 00 	ld.d	r8,r8[0]
80008000:	ee ea ff 1c 	ld.d	r10,r7[-228]
80008004:	f0 16 00 03 	mcall	r6[12]
80008008:	14 98       	mov	r8,r10
8000800a:	16 99       	mov	r9,r11
8000800c:	10 9a       	mov	r10,r8
8000800e:	12 9b       	mov	r11,r9
80008010:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008014:	ec fc 00 18 	ld.w	r12,r6[24]
80008018:	12 98       	mov	r8,r9
8000801a:	a3 78       	lsl	r8,0x3
8000801c:	12 08       	add	r8,r9
8000801e:	a3 78       	lsl	r8,0x3
80008020:	f8 08 00 08 	add	r8,r12,r8
80008024:	2e 88       	sub	r8,-24
80008026:	f0 e8 00 00 	ld.d	r8,r8[0]
8000802a:	f0 16 00 05 	mcall	r6[20]
8000802e:	14 98       	mov	r8,r10
80008030:	16 99       	mov	r9,r11
80008032:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80008036:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000803a:	10 99       	mov	r9,r8
8000803c:	ee 19 80 00 	eorh	r9,0x8000
80008040:	ef 49 ff 24 	st.w	r7[-220],r9
80008044:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008048:	ef 48 ff 28 	st.w	r7[-216],r8
8000804c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008050:	ec fa 00 18 	ld.w	r10,r6[24]
80008054:	12 98       	mov	r8,r9
80008056:	a3 78       	lsl	r8,0x3
80008058:	12 08       	add	r8,r9
8000805a:	2f f8       	sub	r8,-1
8000805c:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008060:	ee ea ff 24 	ld.d	r10,r7[-220]
80008064:	f0 16 00 03 	mcall	r6[12]
80008068:	14 98       	mov	r8,r10
8000806a:	16 99       	mov	r9,r11
8000806c:	10 9a       	mov	r10,r8
8000806e:	12 9b       	mov	r11,r9
80008070:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008074:	ec fc 00 18 	ld.w	r12,r6[24]
80008078:	12 98       	mov	r8,r9
8000807a:	a3 78       	lsl	r8,0x3
8000807c:	12 08       	add	r8,r9
8000807e:	a3 78       	lsl	r8,0x3
80008080:	f8 08 00 08 	add	r8,r12,r8
80008084:	2e 08       	sub	r8,-32
80008086:	f0 e8 00 00 	ld.d	r8,r8[0]
8000808a:	f0 16 00 05 	mcall	r6[20]
8000808e:	14 98       	mov	r8,r10
80008090:	16 99       	mov	r9,r11
80008092:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
80008096:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000809a:	10 99       	mov	r9,r8
8000809c:	ee 19 80 00 	eorh	r9,0x8000
800080a0:	ef 49 ff 2c 	st.w	r7[-212],r9
800080a4:	ee f8 ff ac 	ld.w	r8,r7[-84]
800080a8:	ef 48 ff 30 	st.w	r7[-208],r8
800080ac:	ee f9 ff 84 	ld.w	r9,r7[-124]
800080b0:	ec fa 00 18 	ld.w	r10,r6[24]
800080b4:	12 98       	mov	r8,r9
800080b6:	a3 78       	lsl	r8,0x3
800080b8:	12 08       	add	r8,r9
800080ba:	a3 78       	lsl	r8,0x3
800080bc:	f4 08 00 08 	add	r8,r10,r8
800080c0:	2f 08       	sub	r8,-16
800080c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800080c6:	ee ea ff 2c 	ld.d	r10,r7[-212]
800080ca:	f0 16 00 03 	mcall	r6[12]
800080ce:	14 98       	mov	r8,r10
800080d0:	16 99       	mov	r9,r11
800080d2:	10 9a       	mov	r10,r8
800080d4:	12 9b       	mov	r11,r9
800080d6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800080da:	ec fc 00 18 	ld.w	r12,r6[24]
800080de:	12 98       	mov	r8,r9
800080e0:	a3 78       	lsl	r8,0x3
800080e2:	12 08       	add	r8,r9
800080e4:	a3 78       	lsl	r8,0x3
800080e6:	f8 08 00 08 	add	r8,r12,r8
800080ea:	2d 88       	sub	r8,-40
800080ec:	f0 e8 00 00 	ld.d	r8,r8[0]
800080f0:	f0 16 00 05 	mcall	r6[20]
800080f4:	14 98       	mov	r8,r10
800080f6:	16 99       	mov	r9,r11
800080f8:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
800080fc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008100:	10 99       	mov	r9,r8
80008102:	ee 19 80 00 	eorh	r9,0x8000
80008106:	ef 49 ff 34 	st.w	r7[-204],r9
8000810a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000810e:	ef 48 ff 38 	st.w	r7[-200],r8
80008112:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008116:	ec fa 00 18 	ld.w	r10,r6[24]
8000811a:	12 98       	mov	r8,r9
8000811c:	a3 78       	lsl	r8,0x3
8000811e:	12 08       	add	r8,r9
80008120:	a3 78       	lsl	r8,0x3
80008122:	f4 08 00 08 	add	r8,r10,r8
80008126:	f0 e8 00 00 	ld.d	r8,r8[0]
8000812a:	ee ea ff 34 	ld.d	r10,r7[-204]
8000812e:	f0 16 00 03 	mcall	r6[12]
80008132:	14 98       	mov	r8,r10
80008134:	16 99       	mov	r9,r11
80008136:	10 9a       	mov	r10,r8
80008138:	12 9b       	mov	r11,r9
8000813a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000813e:	ec fc 00 18 	ld.w	r12,r6[24]
80008142:	12 98       	mov	r8,r9
80008144:	a3 78       	lsl	r8,0x3
80008146:	12 08       	add	r8,r9
80008148:	a3 78       	lsl	r8,0x3
8000814a:	f8 08 00 08 	add	r8,r12,r8
8000814e:	2d 08       	sub	r8,-48
80008150:	f0 e8 00 00 	ld.d	r8,r8[0]
80008154:	f0 16 00 05 	mcall	r6[20]
80008158:	14 98       	mov	r8,r10
8000815a:	16 99       	mov	r9,r11
8000815c:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
80008160:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008164:	10 99       	mov	r9,r8
80008166:	ee 19 80 00 	eorh	r9,0x8000
8000816a:	ef 49 ff 3c 	st.w	r7[-196],r9
8000816e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008172:	ef 48 ff 40 	st.w	r7[-192],r8
80008176:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000817a:	ec fa 00 18 	ld.w	r10,r6[24]
8000817e:	12 98       	mov	r8,r9
80008180:	a3 78       	lsl	r8,0x3
80008182:	12 08       	add	r8,r9
80008184:	2f f8       	sub	r8,-1
80008186:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000818a:	ee ea ff 3c 	ld.d	r10,r7[-196]
8000818e:	f0 16 00 03 	mcall	r6[12]
80008192:	14 98       	mov	r8,r10
80008194:	16 99       	mov	r9,r11
80008196:	10 9a       	mov	r10,r8
80008198:	12 9b       	mov	r11,r9
8000819a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000819e:	ec fc 00 18 	ld.w	r12,r6[24]
800081a2:	12 98       	mov	r8,r9
800081a4:	a3 78       	lsl	r8,0x3
800081a6:	12 08       	add	r8,r9
800081a8:	a3 78       	lsl	r8,0x3
800081aa:	f8 08 00 08 	add	r8,r12,r8
800081ae:	2c 88       	sub	r8,-56
800081b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800081b4:	f0 16 00 05 	mcall	r6[20]
800081b8:	14 98       	mov	r8,r10
800081ba:	16 99       	mov	r9,r11
800081bc:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800081c0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800081c4:	10 99       	mov	r9,r8
800081c6:	ee 19 80 00 	eorh	r9,0x8000
800081ca:	ef 49 ff 44 	st.w	r7[-188],r9
800081ce:	ee f8 ff b4 	ld.w	r8,r7[-76]
800081d2:	ef 48 ff 48 	st.w	r7[-184],r8
800081d6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800081da:	ec fa 00 18 	ld.w	r10,r6[24]
800081de:	12 98       	mov	r8,r9
800081e0:	a3 78       	lsl	r8,0x3
800081e2:	12 08       	add	r8,r9
800081e4:	a3 78       	lsl	r8,0x3
800081e6:	f4 08 00 08 	add	r8,r10,r8
800081ea:	2f 08       	sub	r8,-16
800081ec:	f0 e8 00 00 	ld.d	r8,r8[0]
800081f0:	ee ea ff 44 	ld.d	r10,r7[-188]
800081f4:	f0 16 00 03 	mcall	r6[12]
800081f8:	14 98       	mov	r8,r10
800081fa:	16 99       	mov	r9,r11
800081fc:	10 9a       	mov	r10,r8
800081fe:	12 9b       	mov	r11,r9
80008200:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008204:	ec fc 00 18 	ld.w	r12,r6[24]
80008208:	12 98       	mov	r8,r9
8000820a:	a3 78       	lsl	r8,0x3
8000820c:	12 08       	add	r8,r9
8000820e:	a3 78       	lsl	r8,0x3
80008210:	f8 08 00 08 	add	r8,r12,r8
80008214:	2c 08       	sub	r8,-64
80008216:	f0 e8 00 00 	ld.d	r8,r8[0]
8000821a:	f0 16 00 05 	mcall	r6[20]
8000821e:	14 98       	mov	r8,r10
80008220:	16 99       	mov	r9,r11
80008222:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80008226:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000822a:	ec fa 00 18 	ld.w	r10,r6[24]
8000822e:	12 98       	mov	r8,r9
80008230:	a3 78       	lsl	r8,0x3
80008232:	12 08       	add	r8,r9
80008234:	a3 78       	lsl	r8,0x3
80008236:	10 0a       	add	r10,r8
80008238:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000823c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008240:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008244:	ec fb 00 18 	ld.w	r11,r6[24]
80008248:	12 98       	mov	r8,r9
8000824a:	a3 78       	lsl	r8,0x3
8000824c:	12 08       	add	r8,r9
8000824e:	f0 ca ff ff 	sub	r10,r8,-1
80008252:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008256:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000825a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000825e:	ec fa 00 18 	ld.w	r10,r6[24]
80008262:	12 98       	mov	r8,r9
80008264:	a3 78       	lsl	r8,0x3
80008266:	12 08       	add	r8,r9
80008268:	a3 78       	lsl	r8,0x3
8000826a:	f4 08 00 08 	add	r8,r10,r8
8000826e:	f0 ca ff f0 	sub	r10,r8,-16
80008272:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008276:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000827a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000827e:	ec fa 00 18 	ld.w	r10,r6[24]
80008282:	12 98       	mov	r8,r9
80008284:	a3 78       	lsl	r8,0x3
80008286:	12 08       	add	r8,r9
80008288:	a3 78       	lsl	r8,0x3
8000828a:	f4 08 00 08 	add	r8,r10,r8
8000828e:	f0 ca ff e8 	sub	r10,r8,-24
80008292:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008296:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000829a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000829e:	ec fa 00 18 	ld.w	r10,r6[24]
800082a2:	12 98       	mov	r8,r9
800082a4:	a3 78       	lsl	r8,0x3
800082a6:	12 08       	add	r8,r9
800082a8:	a3 78       	lsl	r8,0x3
800082aa:	f4 08 00 08 	add	r8,r10,r8
800082ae:	f0 ca ff e0 	sub	r10,r8,-32
800082b2:	ee e8 ff d8 	ld.d	r8,r7[-40]
800082b6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800082ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082be:	ec fa 00 18 	ld.w	r10,r6[24]
800082c2:	12 98       	mov	r8,r9
800082c4:	a3 78       	lsl	r8,0x3
800082c6:	12 08       	add	r8,r9
800082c8:	a3 78       	lsl	r8,0x3
800082ca:	f4 08 00 08 	add	r8,r10,r8
800082ce:	f0 ca ff d8 	sub	r10,r8,-40
800082d2:	ee e8 ff e0 	ld.d	r8,r7[-32]
800082d6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800082da:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082de:	ec fa 00 18 	ld.w	r10,r6[24]
800082e2:	12 98       	mov	r8,r9
800082e4:	a3 78       	lsl	r8,0x3
800082e6:	12 08       	add	r8,r9
800082e8:	a3 78       	lsl	r8,0x3
800082ea:	f4 08 00 08 	add	r8,r10,r8
800082ee:	f0 ca ff d0 	sub	r10,r8,-48
800082f2:	ee e8 ff e8 	ld.d	r8,r7[-24]
800082f6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800082fa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082fe:	ec fa 00 18 	ld.w	r10,r6[24]
80008302:	12 98       	mov	r8,r9
80008304:	a3 78       	lsl	r8,0x3
80008306:	12 08       	add	r8,r9
80008308:	a3 78       	lsl	r8,0x3
8000830a:	f4 08 00 08 	add	r8,r10,r8
8000830e:	f0 ca ff c8 	sub	r10,r8,-56
80008312:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008316:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000831a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000831e:	ec fa 00 18 	ld.w	r10,r6[24]
80008322:	12 98       	mov	r8,r9
80008324:	a3 78       	lsl	r8,0x3
80008326:	12 08       	add	r8,r9
80008328:	a3 78       	lsl	r8,0x3
8000832a:	f4 08 00 08 	add	r8,r10,r8
8000832e:	f0 ca ff c0 	sub	r10,r8,-64
80008332:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008336:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
8000833a:	ec f8 00 00 	ld.w	r8,r6[0]
8000833e:	70 09       	ld.w	r9,r8[0x0]
80008340:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008344:	f0 c8 fc 99 	sub	r8,r8,-871
80008348:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000834c:	10 9c       	mov	r12,r8
8000834e:	f0 16 00 02 	mcall	r6[8]
80008352:	14 98       	mov	r8,r10
80008354:	16 99       	mov	r9,r11
80008356:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000835a:	f0 16 00 11 	mcall	r6[68]
8000835e:	14 98       	mov	r8,r10
80008360:	16 99       	mov	r9,r11
80008362:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
80008366:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000836a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000836e:	12 98       	mov	r8,r9
80008370:	a3 78       	lsl	r8,0x3
80008372:	12 08       	add	r8,r9
80008374:	a3 78       	lsl	r8,0x3
80008376:	f4 08 00 08 	add	r8,r10,r8
8000837a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000837e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008382:	ec f8 01 64 	ld.w	r8,r6[356]
80008386:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000838a:	f0 16 00 05 	mcall	r6[20]
8000838e:	14 98       	mov	r8,r10
80008390:	16 99       	mov	r9,r11
80008392:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
80008396:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000839a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000839e:	12 98       	mov	r8,r9
800083a0:	a3 78       	lsl	r8,0x3
800083a2:	12 08       	add	r8,r9
800083a4:	a3 78       	lsl	r8,0x3
800083a6:	f4 08 00 08 	add	r8,r10,r8
800083aa:	f0 ea 00 00 	ld.d	r10,r8[0]
800083ae:	ee e8 ff 98 	ld.d	r8,r7[-104]
800083b2:	f0 16 00 0c 	mcall	r6[48]
800083b6:	14 98       	mov	r8,r10
800083b8:	16 99       	mov	r9,r11
800083ba:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
800083be:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083c2:	ec fa 00 1c 	ld.w	r10,r6[28]
800083c6:	12 98       	mov	r8,r9
800083c8:	a3 78       	lsl	r8,0x3
800083ca:	12 08       	add	r8,r9
800083cc:	a3 78       	lsl	r8,0x3
800083ce:	f4 08 00 08 	add	r8,r10,r8
800083d2:	2e 88       	sub	r8,-24
800083d4:	f0 ea 00 00 	ld.d	r10,r8[0]
800083d8:	ee e8 ff 98 	ld.d	r8,r7[-104]
800083dc:	f0 16 00 0c 	mcall	r6[48]
800083e0:	14 98       	mov	r8,r10
800083e2:	16 99       	mov	r9,r11
800083e4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
800083e8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083ec:	ec fa 00 1c 	ld.w	r10,r6[28]
800083f0:	12 98       	mov	r8,r9
800083f2:	a3 78       	lsl	r8,0x3
800083f4:	12 08       	add	r8,r9
800083f6:	a3 78       	lsl	r8,0x3
800083f8:	f4 08 00 08 	add	r8,r10,r8
800083fc:	2d 08       	sub	r8,-48
800083fe:	f0 ea 00 00 	ld.d	r10,r8[0]
80008402:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008406:	f0 16 00 0c 	mcall	r6[48]
8000840a:	14 98       	mov	r8,r10
8000840c:	16 99       	mov	r9,r11
8000840e:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
80008412:	ec f8 00 00 	ld.w	r8,r6[0]
80008416:	70 01       	ld.w	r1,r8[0x0]
80008418:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000841c:	ec f8 00 00 	ld.w	r8,r6[0]
80008420:	70 09       	ld.w	r9,r8[0x0]
80008422:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008426:	f0 c8 fc 99 	sub	r8,r8,-871
8000842a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000842e:	10 9c       	mov	r12,r8
80008430:	f0 16 00 02 	mcall	r6[8]
80008434:	14 92       	mov	r2,r10
80008436:	16 93       	mov	r3,r11
80008438:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000843c:	ee ea ff a0 	ld.d	r10,r7[-96]
80008440:	f0 16 00 03 	mcall	r6[12]
80008444:	14 98       	mov	r8,r10
80008446:	16 99       	mov	r9,r11
80008448:	04 9a       	mov	r10,r2
8000844a:	06 9b       	mov	r11,r3
8000844c:	f0 16 00 05 	mcall	r6[20]
80008450:	14 98       	mov	r8,r10
80008452:	16 99       	mov	r9,r11
80008454:	10 9a       	mov	r10,r8
80008456:	12 9b       	mov	r11,r9
80008458:	f0 16 00 08 	mcall	r6[32]
8000845c:	18 99       	mov	r9,r12
8000845e:	ea c8 fc 99 	sub	r8,r5,-871
80008462:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
80008466:	ec f8 00 00 	ld.w	r8,r6[0]
8000846a:	70 01       	ld.w	r1,r8[0x0]
8000846c:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008470:	ec f8 00 00 	ld.w	r8,r6[0]
80008474:	70 09       	ld.w	r9,r8[0x0]
80008476:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000847a:	f0 c8 fc a3 	sub	r8,r8,-861
8000847e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008482:	10 9c       	mov	r12,r8
80008484:	f0 16 00 02 	mcall	r6[8]
80008488:	14 92       	mov	r2,r10
8000848a:	16 93       	mov	r3,r11
8000848c:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008490:	ee ea ff a8 	ld.d	r10,r7[-88]
80008494:	f0 16 00 03 	mcall	r6[12]
80008498:	14 98       	mov	r8,r10
8000849a:	16 99       	mov	r9,r11
8000849c:	04 9a       	mov	r10,r2
8000849e:	06 9b       	mov	r11,r3
800084a0:	f0 16 00 05 	mcall	r6[20]
800084a4:	14 98       	mov	r8,r10
800084a6:	16 99       	mov	r9,r11
800084a8:	10 9a       	mov	r10,r8
800084aa:	12 9b       	mov	r11,r9
800084ac:	f0 16 00 08 	mcall	r6[32]
800084b0:	18 99       	mov	r9,r12
800084b2:	ea c8 fc a3 	sub	r8,r5,-861
800084b6:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
800084ba:	ec f8 00 00 	ld.w	r8,r6[0]
800084be:	70 01       	ld.w	r1,r8[0x0]
800084c0:	ee f8 ff 84 	ld.w	r8,r7[-124]
800084c4:	f0 c5 ff fd 	sub	r5,r8,-3
800084c8:	ec f8 00 00 	ld.w	r8,r6[0]
800084cc:	70 09       	ld.w	r9,r8[0x0]
800084ce:	ee f8 ff 84 	ld.w	r8,r7[-124]
800084d2:	2f d8       	sub	r8,-3
800084d4:	2f 48       	sub	r8,-12
800084d6:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800084da:	10 9c       	mov	r12,r8
800084dc:	f0 16 00 02 	mcall	r6[8]
800084e0:	14 92       	mov	r2,r10
800084e2:	16 93       	mov	r3,r11
800084e4:	ee e8 ff 88 	ld.d	r8,r7[-120]
800084e8:	ee ea ff b0 	ld.d	r10,r7[-80]
800084ec:	f0 16 00 03 	mcall	r6[12]
800084f0:	14 98       	mov	r8,r10
800084f2:	16 99       	mov	r9,r11
800084f4:	04 9a       	mov	r10,r2
800084f6:	06 9b       	mov	r11,r3
800084f8:	f0 16 00 05 	mcall	r6[20]
800084fc:	14 98       	mov	r8,r10
800084fe:	16 99       	mov	r9,r11
80008500:	10 9a       	mov	r10,r8
80008502:	12 9b       	mov	r11,r9
80008504:	f0 16 00 08 	mcall	r6[32]
80008508:	18 99       	mov	r9,r12
8000850a:	ea c8 ff f4 	sub	r8,r5,-12
8000850e:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
80008512:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008516:	30 0a       	mov	r10,0
80008518:	fc 1b 3f f0 	movh	r11,0x3ff0
8000851c:	f0 16 00 11 	mcall	r6[68]
80008520:	14 98       	mov	r8,r10
80008522:	16 99       	mov	r9,r11
80008524:	10 9a       	mov	r10,r8
80008526:	12 9b       	mov	r11,r9
80008528:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000852c:	ec fc 00 1c 	ld.w	r12,r6[28]
80008530:	12 98       	mov	r8,r9
80008532:	a3 78       	lsl	r8,0x3
80008534:	12 08       	add	r8,r9
80008536:	a3 78       	lsl	r8,0x3
80008538:	f8 08 00 08 	add	r8,r12,r8
8000853c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008540:	f0 16 00 03 	mcall	r6[12]
80008544:	14 98       	mov	r8,r10
80008546:	16 99       	mov	r9,r11
80008548:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000854c:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008550:	30 0a       	mov	r10,0
80008552:	fc 1b 3f f0 	movh	r11,0x3ff0
80008556:	f0 16 00 11 	mcall	r6[68]
8000855a:	14 98       	mov	r8,r10
8000855c:	16 99       	mov	r9,r11
8000855e:	10 9a       	mov	r10,r8
80008560:	12 9b       	mov	r11,r9
80008562:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008566:	ec fc 00 1c 	ld.w	r12,r6[28]
8000856a:	12 98       	mov	r8,r9
8000856c:	a3 78       	lsl	r8,0x3
8000856e:	12 08       	add	r8,r9
80008570:	2f f8       	sub	r8,-1
80008572:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008576:	f0 16 00 03 	mcall	r6[12]
8000857a:	14 98       	mov	r8,r10
8000857c:	16 99       	mov	r9,r11
8000857e:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
80008582:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008586:	30 0a       	mov	r10,0
80008588:	fc 1b 3f f0 	movh	r11,0x3ff0
8000858c:	f0 16 00 11 	mcall	r6[68]
80008590:	14 98       	mov	r8,r10
80008592:	16 99       	mov	r9,r11
80008594:	10 9a       	mov	r10,r8
80008596:	12 9b       	mov	r11,r9
80008598:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000859c:	ec fc 00 1c 	ld.w	r12,r6[28]
800085a0:	12 98       	mov	r8,r9
800085a2:	a3 78       	lsl	r8,0x3
800085a4:	12 08       	add	r8,r9
800085a6:	a3 78       	lsl	r8,0x3
800085a8:	f8 08 00 08 	add	r8,r12,r8
800085ac:	2f 08       	sub	r8,-16
800085ae:	f0 e8 00 00 	ld.d	r8,r8[0]
800085b2:	f0 16 00 03 	mcall	r6[12]
800085b6:	14 98       	mov	r8,r10
800085b8:	16 99       	mov	r9,r11
800085ba:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
800085be:	ee f8 ff a8 	ld.w	r8,r7[-88]
800085c2:	10 99       	mov	r9,r8
800085c4:	ee 19 80 00 	eorh	r9,0x8000
800085c8:	ef 49 ff 4c 	st.w	r7[-180],r9
800085cc:	ee f8 ff ac 	ld.w	r8,r7[-84]
800085d0:	ef 48 ff 50 	st.w	r7[-176],r8
800085d4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800085dc:	12 98       	mov	r8,r9
800085de:	a3 78       	lsl	r8,0x3
800085e0:	12 08       	add	r8,r9
800085e2:	a3 78       	lsl	r8,0x3
800085e4:	f4 08 00 08 	add	r8,r10,r8
800085e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800085ec:	ee ea ff 4c 	ld.d	r10,r7[-180]
800085f0:	f0 16 00 03 	mcall	r6[12]
800085f4:	14 98       	mov	r8,r10
800085f6:	16 99       	mov	r9,r11
800085f8:	10 9a       	mov	r10,r8
800085fa:	12 9b       	mov	r11,r9
800085fc:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008600:	ec fc 00 1c 	ld.w	r12,r6[28]
80008604:	12 98       	mov	r8,r9
80008606:	a3 78       	lsl	r8,0x3
80008608:	12 08       	add	r8,r9
8000860a:	a3 78       	lsl	r8,0x3
8000860c:	f8 08 00 08 	add	r8,r12,r8
80008610:	2e 88       	sub	r8,-24
80008612:	f0 e8 00 00 	ld.d	r8,r8[0]
80008616:	f0 16 00 05 	mcall	r6[20]
8000861a:	14 98       	mov	r8,r10
8000861c:	16 99       	mov	r9,r11
8000861e:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008622:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008626:	10 99       	mov	r9,r8
80008628:	ee 19 80 00 	eorh	r9,0x8000
8000862c:	ef 49 ff 54 	st.w	r7[-172],r9
80008630:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008634:	ef 48 ff 58 	st.w	r7[-168],r8
80008638:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000863c:	ec fa 00 1c 	ld.w	r10,r6[28]
80008640:	12 98       	mov	r8,r9
80008642:	a3 78       	lsl	r8,0x3
80008644:	12 08       	add	r8,r9
80008646:	2f f8       	sub	r8,-1
80008648:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000864c:	ee ea ff 54 	ld.d	r10,r7[-172]
80008650:	f0 16 00 03 	mcall	r6[12]
80008654:	14 98       	mov	r8,r10
80008656:	16 99       	mov	r9,r11
80008658:	10 9a       	mov	r10,r8
8000865a:	12 9b       	mov	r11,r9
8000865c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008660:	ec fc 00 1c 	ld.w	r12,r6[28]
80008664:	12 98       	mov	r8,r9
80008666:	a3 78       	lsl	r8,0x3
80008668:	12 08       	add	r8,r9
8000866a:	a3 78       	lsl	r8,0x3
8000866c:	f8 08 00 08 	add	r8,r12,r8
80008670:	2e 08       	sub	r8,-32
80008672:	f0 e8 00 00 	ld.d	r8,r8[0]
80008676:	f0 16 00 05 	mcall	r6[20]
8000867a:	14 98       	mov	r8,r10
8000867c:	16 99       	mov	r9,r11
8000867e:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008682:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008686:	10 99       	mov	r9,r8
80008688:	ee 19 80 00 	eorh	r9,0x8000
8000868c:	ef 49 ff 5c 	st.w	r7[-164],r9
80008690:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008694:	ef 48 ff 60 	st.w	r7[-160],r8
80008698:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000869c:	ec fa 00 1c 	ld.w	r10,r6[28]
800086a0:	12 98       	mov	r8,r9
800086a2:	a3 78       	lsl	r8,0x3
800086a4:	12 08       	add	r8,r9
800086a6:	a3 78       	lsl	r8,0x3
800086a8:	f4 08 00 08 	add	r8,r10,r8
800086ac:	2f 08       	sub	r8,-16
800086ae:	f0 e8 00 00 	ld.d	r8,r8[0]
800086b2:	ee ea ff 5c 	ld.d	r10,r7[-164]
800086b6:	f0 16 00 03 	mcall	r6[12]
800086ba:	14 98       	mov	r8,r10
800086bc:	16 99       	mov	r9,r11
800086be:	10 9a       	mov	r10,r8
800086c0:	12 9b       	mov	r11,r9
800086c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086c6:	ec fc 00 1c 	ld.w	r12,r6[28]
800086ca:	12 98       	mov	r8,r9
800086cc:	a3 78       	lsl	r8,0x3
800086ce:	12 08       	add	r8,r9
800086d0:	a3 78       	lsl	r8,0x3
800086d2:	f8 08 00 08 	add	r8,r12,r8
800086d6:	2d 88       	sub	r8,-40
800086d8:	f0 e8 00 00 	ld.d	r8,r8[0]
800086dc:	f0 16 00 05 	mcall	r6[20]
800086e0:	14 98       	mov	r8,r10
800086e2:	16 99       	mov	r9,r11
800086e4:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
800086e8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086ec:	10 99       	mov	r9,r8
800086ee:	ee 19 80 00 	eorh	r9,0x8000
800086f2:	ef 49 ff 64 	st.w	r7[-156],r9
800086f6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800086fa:	ef 48 ff 68 	st.w	r7[-152],r8
800086fe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008702:	ec fa 00 1c 	ld.w	r10,r6[28]
80008706:	12 98       	mov	r8,r9
80008708:	a3 78       	lsl	r8,0x3
8000870a:	12 08       	add	r8,r9
8000870c:	a3 78       	lsl	r8,0x3
8000870e:	f4 08 00 08 	add	r8,r10,r8
80008712:	f0 e8 00 00 	ld.d	r8,r8[0]
80008716:	ee ea ff 64 	ld.d	r10,r7[-156]
8000871a:	f0 16 00 03 	mcall	r6[12]
8000871e:	14 98       	mov	r8,r10
80008720:	16 99       	mov	r9,r11
80008722:	10 9a       	mov	r10,r8
80008724:	12 9b       	mov	r11,r9
80008726:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000872a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000872e:	12 98       	mov	r8,r9
80008730:	a3 78       	lsl	r8,0x3
80008732:	12 08       	add	r8,r9
80008734:	a3 78       	lsl	r8,0x3
80008736:	f8 08 00 08 	add	r8,r12,r8
8000873a:	2d 08       	sub	r8,-48
8000873c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008740:	f0 16 00 05 	mcall	r6[20]
80008744:	14 98       	mov	r8,r10
80008746:	16 99       	mov	r9,r11
80008748:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
8000874c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008750:	10 99       	mov	r9,r8
80008752:	ee 19 80 00 	eorh	r9,0x8000
80008756:	ef 49 ff 6c 	st.w	r7[-148],r9
8000875a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000875e:	ef 48 ff 70 	st.w	r7[-144],r8
80008762:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008766:	ec fa 00 1c 	ld.w	r10,r6[28]
8000876a:	12 98       	mov	r8,r9
8000876c:	a3 78       	lsl	r8,0x3
8000876e:	12 08       	add	r8,r9
80008770:	2f f8       	sub	r8,-1
80008772:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008776:	ee ea ff 6c 	ld.d	r10,r7[-148]
8000877a:	f0 16 00 03 	mcall	r6[12]
8000877e:	14 98       	mov	r8,r10
80008780:	16 99       	mov	r9,r11
80008782:	10 9a       	mov	r10,r8
80008784:	12 9b       	mov	r11,r9
80008786:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000878a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000878e:	12 98       	mov	r8,r9
80008790:	a3 78       	lsl	r8,0x3
80008792:	12 08       	add	r8,r9
80008794:	a3 78       	lsl	r8,0x3
80008796:	f8 08 00 08 	add	r8,r12,r8
8000879a:	2c 88       	sub	r8,-56
8000879c:	f0 e8 00 00 	ld.d	r8,r8[0]
800087a0:	f0 16 00 05 	mcall	r6[20]
800087a4:	14 98       	mov	r8,r10
800087a6:	16 99       	mov	r9,r11
800087a8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
800087ac:	ee f8 ff b0 	ld.w	r8,r7[-80]
800087b0:	10 99       	mov	r9,r8
800087b2:	ee 19 80 00 	eorh	r9,0x8000
800087b6:	ef 49 ff 74 	st.w	r7[-140],r9
800087ba:	ee f8 ff b4 	ld.w	r8,r7[-76]
800087be:	ef 48 ff 78 	st.w	r7[-136],r8
800087c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087c6:	ec fa 00 1c 	ld.w	r10,r6[28]
800087ca:	12 98       	mov	r8,r9
800087cc:	a3 78       	lsl	r8,0x3
800087ce:	12 08       	add	r8,r9
800087d0:	a3 78       	lsl	r8,0x3
800087d2:	f4 08 00 08 	add	r8,r10,r8
800087d6:	2f 08       	sub	r8,-16
800087d8:	f0 e8 00 00 	ld.d	r8,r8[0]
800087dc:	ee ea ff 74 	ld.d	r10,r7[-140]
800087e0:	f0 16 00 03 	mcall	r6[12]
800087e4:	14 98       	mov	r8,r10
800087e6:	16 99       	mov	r9,r11
800087e8:	10 9a       	mov	r10,r8
800087ea:	12 9b       	mov	r11,r9
800087ec:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087f0:	ec fc 00 1c 	ld.w	r12,r6[28]
800087f4:	12 98       	mov	r8,r9
800087f6:	a3 78       	lsl	r8,0x3
800087f8:	12 08       	add	r8,r9
800087fa:	a3 78       	lsl	r8,0x3
800087fc:	f8 08 00 08 	add	r8,r12,r8
80008800:	2c 08       	sub	r8,-64
80008802:	f0 e8 00 00 	ld.d	r8,r8[0]
80008806:	f0 16 00 05 	mcall	r6[20]
8000880a:	14 98       	mov	r8,r10
8000880c:	16 99       	mov	r9,r11
8000880e:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008812:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008816:	ec fa 00 1c 	ld.w	r10,r6[28]
8000881a:	12 98       	mov	r8,r9
8000881c:	a3 78       	lsl	r8,0x3
8000881e:	12 08       	add	r8,r9
80008820:	a3 78       	lsl	r8,0x3
80008822:	10 0a       	add	r10,r8
80008824:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008828:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000882c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008830:	ec fa 00 1c 	ld.w	r10,r6[28]
80008834:	12 98       	mov	r8,r9
80008836:	a3 78       	lsl	r8,0x3
80008838:	12 08       	add	r8,r9
8000883a:	f0 cb ff ff 	sub	r11,r8,-1
8000883e:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008842:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008846:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000884a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000884e:	12 98       	mov	r8,r9
80008850:	a3 78       	lsl	r8,0x3
80008852:	12 08       	add	r8,r9
80008854:	a3 78       	lsl	r8,0x3
80008856:	f4 08 00 08 	add	r8,r10,r8
8000885a:	f0 ca ff f0 	sub	r10,r8,-16
8000885e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008862:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008866:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000886a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000886e:	12 98       	mov	r8,r9
80008870:	a3 78       	lsl	r8,0x3
80008872:	12 08       	add	r8,r9
80008874:	a3 78       	lsl	r8,0x3
80008876:	f4 08 00 08 	add	r8,r10,r8
8000887a:	f0 ca ff e8 	sub	r10,r8,-24
8000887e:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008882:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008886:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000888a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000888e:	12 98       	mov	r8,r9
80008890:	a3 78       	lsl	r8,0x3
80008892:	12 08       	add	r8,r9
80008894:	a3 78       	lsl	r8,0x3
80008896:	f4 08 00 08 	add	r8,r10,r8
8000889a:	f0 ca ff e0 	sub	r10,r8,-32
8000889e:	ee e8 ff d8 	ld.d	r8,r7[-40]
800088a2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
800088a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088aa:	ec fa 00 1c 	ld.w	r10,r6[28]
800088ae:	12 98       	mov	r8,r9
800088b0:	a3 78       	lsl	r8,0x3
800088b2:	12 08       	add	r8,r9
800088b4:	a3 78       	lsl	r8,0x3
800088b6:	f4 08 00 08 	add	r8,r10,r8
800088ba:	f0 ca ff d8 	sub	r10,r8,-40
800088be:	ee e8 ff e0 	ld.d	r8,r7[-32]
800088c2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
800088c6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088ca:	ec fa 00 1c 	ld.w	r10,r6[28]
800088ce:	12 98       	mov	r8,r9
800088d0:	a3 78       	lsl	r8,0x3
800088d2:	12 08       	add	r8,r9
800088d4:	a3 78       	lsl	r8,0x3
800088d6:	f4 08 00 08 	add	r8,r10,r8
800088da:	f0 ca ff d0 	sub	r10,r8,-48
800088de:	ee e8 ff e8 	ld.d	r8,r7[-24]
800088e2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
800088e6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088ea:	ec fa 00 1c 	ld.w	r10,r6[28]
800088ee:	12 98       	mov	r8,r9
800088f0:	a3 78       	lsl	r8,0x3
800088f2:	12 08       	add	r8,r9
800088f4:	a3 78       	lsl	r8,0x3
800088f6:	f4 08 00 08 	add	r8,r10,r8
800088fa:	f0 ca ff c8 	sub	r10,r8,-56
800088fe:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008902:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80008906:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000890a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000890e:	12 98       	mov	r8,r9
80008910:	a3 78       	lsl	r8,0x3
80008912:	12 08       	add	r8,r9
80008914:	a3 78       	lsl	r8,0x3
80008916:	f4 08 00 08 	add	r8,r10,r8
8000891a:	f0 ca ff c0 	sub	r10,r8,-64
8000891e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008922:	f4 e9 00 00 	st.d	r10[0],r8
}
80008926:	2c 7d       	sub	sp,-228
80008928:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000892c:	80 00       	ld.sh	r0,r0[0x0]
8000892e:	7b b6       	ld.w	r6,sp[0x6c]

80008930 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80008930:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008934:	1a 97       	mov	r7,sp
80008936:	fa cd 00 d8 	sub	sp,sp,216
8000893a:	fe f6 0c 1a 	ld.w	r6,pc[3098]
8000893e:	1e 26       	rsub	r6,pc
80008940:	ef 4c ff 8c 	st.w	r7[-116],r12
80008944:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80008948:	ee fc ff 88 	ld.w	r12,r7[-120]
8000894c:	f0 16 00 02 	mcall	r6[8]
80008950:	ec f8 00 00 	ld.w	r8,r6[0]
80008954:	70 0c       	ld.w	r12,r8[0x0]
80008956:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000895a:	12 98       	mov	r8,r9
8000895c:	a1 78       	lsl	r8,0x1
8000895e:	12 08       	add	r8,r9
80008960:	2f f8       	sub	r8,-1
80008962:	a3 78       	lsl	r8,0x3
80008964:	f8 08 00 08 	add	r8,r12,r8
80008968:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000896c:	f0 16 00 11 	mcall	r6[68]
80008970:	14 98       	mov	r8,r10
80008972:	16 99       	mov	r9,r11
80008974:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80008978:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000897c:	ec fa 00 18 	ld.w	r10,r6[24]
80008980:	12 98       	mov	r8,r9
80008982:	a3 78       	lsl	r8,0x3
80008984:	12 08       	add	r8,r9
80008986:	a3 78       	lsl	r8,0x3
80008988:	f4 08 00 08 	add	r8,r10,r8
8000898c:	2e 08       	sub	r8,-32
8000898e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008992:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008996:	ec f8 01 68 	ld.w	r8,r6[360]
8000899a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000899e:	f0 16 00 05 	mcall	r6[20]
800089a2:	14 98       	mov	r8,r10
800089a4:	16 99       	mov	r9,r11
800089a6:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
800089aa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800089ae:	ec fa 00 18 	ld.w	r10,r6[24]
800089b2:	12 98       	mov	r8,r9
800089b4:	a3 78       	lsl	r8,0x3
800089b6:	12 08       	add	r8,r9
800089b8:	2f f8       	sub	r8,-1
800089ba:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800089be:	ee e8 ff 98 	ld.d	r8,r7[-104]
800089c2:	f0 16 00 0c 	mcall	r6[48]
800089c6:	14 98       	mov	r8,r10
800089c8:	16 99       	mov	r9,r11
800089ca:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
800089ce:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800089d2:	ec fa 00 18 	ld.w	r10,r6[24]
800089d6:	12 98       	mov	r8,r9
800089d8:	a3 78       	lsl	r8,0x3
800089da:	12 08       	add	r8,r9
800089dc:	a3 78       	lsl	r8,0x3
800089de:	f4 08 00 08 	add	r8,r10,r8
800089e2:	2e 08       	sub	r8,-32
800089e4:	f0 ea 00 00 	ld.d	r10,r8[0]
800089e8:	ee e8 ff 98 	ld.d	r8,r7[-104]
800089ec:	f0 16 00 0c 	mcall	r6[48]
800089f0:	14 98       	mov	r8,r10
800089f2:	16 99       	mov	r9,r11
800089f4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
800089f8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800089fc:	ec fa 00 18 	ld.w	r10,r6[24]
80008a00:	12 98       	mov	r8,r9
80008a02:	a3 78       	lsl	r8,0x3
80008a04:	12 08       	add	r8,r9
80008a06:	a3 78       	lsl	r8,0x3
80008a08:	f4 08 00 08 	add	r8,r10,r8
80008a0c:	2c 88       	sub	r8,-56
80008a0e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008a12:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008a16:	f0 16 00 0c 	mcall	r6[48]
80008a1a:	14 98       	mov	r8,r10
80008a1c:	16 99       	mov	r9,r11
80008a1e:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
80008a22:	ec f8 00 00 	ld.w	r8,r6[0]
80008a26:	70 01       	ld.w	r1,r8[0x0]
80008a28:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008a2c:	ec f8 00 00 	ld.w	r8,r6[0]
80008a30:	70 0a       	ld.w	r10,r8[0x0]
80008a32:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008a36:	12 98       	mov	r8,r9
80008a38:	a1 78       	lsl	r8,0x1
80008a3a:	12 08       	add	r8,r9
80008a3c:	a3 78       	lsl	r8,0x3
80008a3e:	f4 08 00 08 	add	r8,r10,r8
80008a42:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008a46:	f0 e2 00 00 	ld.d	r2,r8[0]
80008a4a:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008a4e:	ee ea ff a0 	ld.d	r10,r7[-96]
80008a52:	f0 16 00 03 	mcall	r6[12]
80008a56:	14 98       	mov	r8,r10
80008a58:	16 99       	mov	r9,r11
80008a5a:	04 9a       	mov	r10,r2
80008a5c:	06 9b       	mov	r11,r3
80008a5e:	f0 16 00 05 	mcall	r6[20]
80008a62:	14 98       	mov	r8,r10
80008a64:	16 99       	mov	r9,r11
80008a66:	10 9a       	mov	r10,r8
80008a68:	12 9b       	mov	r11,r9
80008a6a:	0a 98       	mov	r8,r5
80008a6c:	a1 78       	lsl	r8,0x1
80008a6e:	0a 08       	add	r8,r5
80008a70:	a3 78       	lsl	r8,0x3
80008a72:	e2 08 00 08 	add	r8,r1,r8
80008a76:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008a7a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
80008a7e:	ec f8 00 00 	ld.w	r8,r6[0]
80008a82:	70 01       	ld.w	r1,r8[0x0]
80008a84:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008a88:	ec f8 00 00 	ld.w	r8,r6[0]
80008a8c:	70 0a       	ld.w	r10,r8[0x0]
80008a8e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008a92:	12 98       	mov	r8,r9
80008a94:	a1 78       	lsl	r8,0x1
80008a96:	12 08       	add	r8,r9
80008a98:	2f f8       	sub	r8,-1
80008a9a:	a3 78       	lsl	r8,0x3
80008a9c:	f4 08 00 08 	add	r8,r10,r8
80008aa0:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80008aa4:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008aa8:	ee ea ff a8 	ld.d	r10,r7[-88]
80008aac:	f0 16 00 03 	mcall	r6[12]
80008ab0:	14 98       	mov	r8,r10
80008ab2:	16 99       	mov	r9,r11
80008ab4:	04 9a       	mov	r10,r2
80008ab6:	06 9b       	mov	r11,r3
80008ab8:	f0 16 00 05 	mcall	r6[20]
80008abc:	14 98       	mov	r8,r10
80008abe:	16 99       	mov	r9,r11
80008ac0:	10 9a       	mov	r10,r8
80008ac2:	12 9b       	mov	r11,r9
80008ac4:	0a 98       	mov	r8,r5
80008ac6:	a1 78       	lsl	r8,0x1
80008ac8:	0a 08       	add	r8,r5
80008aca:	2f f8       	sub	r8,-1
80008acc:	a3 78       	lsl	r8,0x3
80008ace:	e2 08 00 08 	add	r8,r1,r8
80008ad2:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
80008ad6:	ec f8 00 00 	ld.w	r8,r6[0]
80008ada:	70 01       	ld.w	r1,r8[0x0]
80008adc:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008ae0:	ec f8 00 00 	ld.w	r8,r6[0]
80008ae4:	70 0a       	ld.w	r10,r8[0x0]
80008ae6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008aea:	12 98       	mov	r8,r9
80008aec:	a1 78       	lsl	r8,0x1
80008aee:	12 08       	add	r8,r9
80008af0:	a3 78       	lsl	r8,0x3
80008af2:	f4 08 00 08 	add	r8,r10,r8
80008af6:	f0 c8 f4 94 	sub	r8,r8,-2924
80008afa:	f0 e2 00 00 	ld.d	r2,r8[0]
80008afe:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008b02:	ee ea ff b0 	ld.d	r10,r7[-80]
80008b06:	f0 16 00 03 	mcall	r6[12]
80008b0a:	14 98       	mov	r8,r10
80008b0c:	16 99       	mov	r9,r11
80008b0e:	04 9a       	mov	r10,r2
80008b10:	06 9b       	mov	r11,r3
80008b12:	f0 16 00 05 	mcall	r6[20]
80008b16:	14 98       	mov	r8,r10
80008b18:	16 99       	mov	r9,r11
80008b1a:	10 9a       	mov	r10,r8
80008b1c:	12 9b       	mov	r11,r9
80008b1e:	0a 98       	mov	r8,r5
80008b20:	a1 78       	lsl	r8,0x1
80008b22:	0a 08       	add	r8,r5
80008b24:	a3 78       	lsl	r8,0x3
80008b26:	e2 08 00 08 	add	r8,r1,r8
80008b2a:	f0 c8 f4 94 	sub	r8,r8,-2924
80008b2e:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80008b32:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008b36:	10 99       	mov	r9,r8
80008b38:	ee 19 80 00 	eorh	r9,0x8000
80008b3c:	ef 49 ff 28 	st.w	r7[-216],r9
80008b40:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008b44:	ef 48 ff 2c 	st.w	r7[-212],r8
80008b48:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008b4c:	ec fa 00 18 	ld.w	r10,r6[24]
80008b50:	12 98       	mov	r8,r9
80008b52:	a3 78       	lsl	r8,0x3
80008b54:	12 08       	add	r8,r9
80008b56:	a3 78       	lsl	r8,0x3
80008b58:	f4 08 00 08 	add	r8,r10,r8
80008b5c:	2e 88       	sub	r8,-24
80008b5e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b62:	ee ea ff 28 	ld.d	r10,r7[-216]
80008b66:	f0 16 00 03 	mcall	r6[12]
80008b6a:	14 98       	mov	r8,r10
80008b6c:	16 99       	mov	r9,r11
80008b6e:	10 9a       	mov	r10,r8
80008b70:	12 9b       	mov	r11,r9
80008b72:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008b76:	ec fc 00 18 	ld.w	r12,r6[24]
80008b7a:	12 98       	mov	r8,r9
80008b7c:	a3 78       	lsl	r8,0x3
80008b7e:	12 08       	add	r8,r9
80008b80:	a3 78       	lsl	r8,0x3
80008b82:	f8 08 00 08 	add	r8,r12,r8
80008b86:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b8a:	f0 16 00 05 	mcall	r6[20]
80008b8e:	14 98       	mov	r8,r10
80008b90:	16 99       	mov	r9,r11
80008b92:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80008b96:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008b9a:	10 99       	mov	r9,r8
80008b9c:	ee 19 80 00 	eorh	r9,0x8000
80008ba0:	ef 49 ff 30 	st.w	r7[-208],r9
80008ba4:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008ba8:	ef 48 ff 34 	st.w	r7[-204],r8
80008bac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008bb0:	ec fa 00 18 	ld.w	r10,r6[24]
80008bb4:	12 98       	mov	r8,r9
80008bb6:	a3 78       	lsl	r8,0x3
80008bb8:	12 08       	add	r8,r9
80008bba:	a3 78       	lsl	r8,0x3
80008bbc:	f4 08 00 08 	add	r8,r10,r8
80008bc0:	2e 08       	sub	r8,-32
80008bc2:	f0 e8 00 00 	ld.d	r8,r8[0]
80008bc6:	ee ea ff 30 	ld.d	r10,r7[-208]
80008bca:	f0 16 00 03 	mcall	r6[12]
80008bce:	14 98       	mov	r8,r10
80008bd0:	16 99       	mov	r9,r11
80008bd2:	10 9a       	mov	r10,r8
80008bd4:	12 9b       	mov	r11,r9
80008bd6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008bda:	ec fc 00 18 	ld.w	r12,r6[24]
80008bde:	12 98       	mov	r8,r9
80008be0:	a3 78       	lsl	r8,0x3
80008be2:	12 08       	add	r8,r9
80008be4:	2f f8       	sub	r8,-1
80008be6:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008bea:	f0 16 00 05 	mcall	r6[20]
80008bee:	14 98       	mov	r8,r10
80008bf0:	16 99       	mov	r9,r11
80008bf2:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
80008bf6:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008bfa:	10 99       	mov	r9,r8
80008bfc:	ee 19 80 00 	eorh	r9,0x8000
80008c00:	ef 49 ff 38 	st.w	r7[-200],r9
80008c04:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008c08:	ef 48 ff 3c 	st.w	r7[-196],r8
80008c0c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c10:	ec fa 00 18 	ld.w	r10,r6[24]
80008c14:	12 98       	mov	r8,r9
80008c16:	a3 78       	lsl	r8,0x3
80008c18:	12 08       	add	r8,r9
80008c1a:	a3 78       	lsl	r8,0x3
80008c1c:	f4 08 00 08 	add	r8,r10,r8
80008c20:	2d 88       	sub	r8,-40
80008c22:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c26:	ee ea ff 38 	ld.d	r10,r7[-200]
80008c2a:	f0 16 00 03 	mcall	r6[12]
80008c2e:	14 98       	mov	r8,r10
80008c30:	16 99       	mov	r9,r11
80008c32:	10 9a       	mov	r10,r8
80008c34:	12 9b       	mov	r11,r9
80008c36:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c3a:	ec fc 00 18 	ld.w	r12,r6[24]
80008c3e:	12 98       	mov	r8,r9
80008c40:	a3 78       	lsl	r8,0x3
80008c42:	12 08       	add	r8,r9
80008c44:	a3 78       	lsl	r8,0x3
80008c46:	f8 08 00 08 	add	r8,r12,r8
80008c4a:	2f 08       	sub	r8,-16
80008c4c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c50:	f0 16 00 05 	mcall	r6[20]
80008c54:	14 98       	mov	r8,r10
80008c56:	16 99       	mov	r9,r11
80008c58:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80008c5c:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008c60:	30 0a       	mov	r10,0
80008c62:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c66:	f0 16 00 11 	mcall	r6[68]
80008c6a:	14 98       	mov	r8,r10
80008c6c:	16 99       	mov	r9,r11
80008c6e:	10 9a       	mov	r10,r8
80008c70:	12 9b       	mov	r11,r9
80008c72:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c76:	ec fc 00 18 	ld.w	r12,r6[24]
80008c7a:	12 98       	mov	r8,r9
80008c7c:	a3 78       	lsl	r8,0x3
80008c7e:	12 08       	add	r8,r9
80008c80:	a3 78       	lsl	r8,0x3
80008c82:	f8 08 00 08 	add	r8,r12,r8
80008c86:	2e 88       	sub	r8,-24
80008c88:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c8c:	f0 16 00 03 	mcall	r6[12]
80008c90:	14 98       	mov	r8,r10
80008c92:	16 99       	mov	r9,r11
80008c94:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80008c98:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008c9c:	30 0a       	mov	r10,0
80008c9e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008ca2:	f0 16 00 11 	mcall	r6[68]
80008ca6:	14 98       	mov	r8,r10
80008ca8:	16 99       	mov	r9,r11
80008caa:	10 9a       	mov	r10,r8
80008cac:	12 9b       	mov	r11,r9
80008cae:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008cb2:	ec fc 00 18 	ld.w	r12,r6[24]
80008cb6:	12 98       	mov	r8,r9
80008cb8:	a3 78       	lsl	r8,0x3
80008cba:	12 08       	add	r8,r9
80008cbc:	a3 78       	lsl	r8,0x3
80008cbe:	f8 08 00 08 	add	r8,r12,r8
80008cc2:	2e 08       	sub	r8,-32
80008cc4:	f0 e8 00 00 	ld.d	r8,r8[0]
80008cc8:	f0 16 00 03 	mcall	r6[12]
80008ccc:	14 98       	mov	r8,r10
80008cce:	16 99       	mov	r9,r11
80008cd0:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
80008cd4:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008cd8:	30 0a       	mov	r10,0
80008cda:	fc 1b 3f f0 	movh	r11,0x3ff0
80008cde:	f0 16 00 11 	mcall	r6[68]
80008ce2:	14 98       	mov	r8,r10
80008ce4:	16 99       	mov	r9,r11
80008ce6:	10 9a       	mov	r10,r8
80008ce8:	12 9b       	mov	r11,r9
80008cea:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008cee:	ec fc 00 18 	ld.w	r12,r6[24]
80008cf2:	12 98       	mov	r8,r9
80008cf4:	a3 78       	lsl	r8,0x3
80008cf6:	12 08       	add	r8,r9
80008cf8:	a3 78       	lsl	r8,0x3
80008cfa:	f8 08 00 08 	add	r8,r12,r8
80008cfe:	2d 88       	sub	r8,-40
80008d00:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d04:	f0 16 00 03 	mcall	r6[12]
80008d08:	14 98       	mov	r8,r10
80008d0a:	16 99       	mov	r9,r11
80008d0c:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
80008d10:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008d14:	10 99       	mov	r9,r8
80008d16:	ee 19 80 00 	eorh	r9,0x8000
80008d1a:	ef 49 ff 40 	st.w	r7[-192],r9
80008d1e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008d22:	ef 48 ff 44 	st.w	r7[-188],r8
80008d26:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d2a:	ec fa 00 18 	ld.w	r10,r6[24]
80008d2e:	12 98       	mov	r8,r9
80008d30:	a3 78       	lsl	r8,0x3
80008d32:	12 08       	add	r8,r9
80008d34:	a3 78       	lsl	r8,0x3
80008d36:	f4 08 00 08 	add	r8,r10,r8
80008d3a:	2e 88       	sub	r8,-24
80008d3c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d40:	ee ea ff 40 	ld.d	r10,r7[-192]
80008d44:	f0 16 00 03 	mcall	r6[12]
80008d48:	14 98       	mov	r8,r10
80008d4a:	16 99       	mov	r9,r11
80008d4c:	10 9a       	mov	r10,r8
80008d4e:	12 9b       	mov	r11,r9
80008d50:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d54:	ec fc 00 18 	ld.w	r12,r6[24]
80008d58:	12 98       	mov	r8,r9
80008d5a:	a3 78       	lsl	r8,0x3
80008d5c:	12 08       	add	r8,r9
80008d5e:	a3 78       	lsl	r8,0x3
80008d60:	f8 08 00 08 	add	r8,r12,r8
80008d64:	2d 08       	sub	r8,-48
80008d66:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d6a:	f0 16 00 05 	mcall	r6[20]
80008d6e:	14 98       	mov	r8,r10
80008d70:	16 99       	mov	r9,r11
80008d72:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
80008d76:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008d7a:	10 99       	mov	r9,r8
80008d7c:	ee 19 80 00 	eorh	r9,0x8000
80008d80:	ef 49 ff 48 	st.w	r7[-184],r9
80008d84:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008d88:	ef 48 ff 4c 	st.w	r7[-180],r8
80008d8c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d90:	ec fa 00 18 	ld.w	r10,r6[24]
80008d94:	12 98       	mov	r8,r9
80008d96:	a3 78       	lsl	r8,0x3
80008d98:	12 08       	add	r8,r9
80008d9a:	a3 78       	lsl	r8,0x3
80008d9c:	f4 08 00 08 	add	r8,r10,r8
80008da0:	2e 08       	sub	r8,-32
80008da2:	f0 e8 00 00 	ld.d	r8,r8[0]
80008da6:	ee ea ff 48 	ld.d	r10,r7[-184]
80008daa:	f0 16 00 03 	mcall	r6[12]
80008dae:	14 98       	mov	r8,r10
80008db0:	16 99       	mov	r9,r11
80008db2:	10 9a       	mov	r10,r8
80008db4:	12 9b       	mov	r11,r9
80008db6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008dba:	ec fc 00 18 	ld.w	r12,r6[24]
80008dbe:	12 98       	mov	r8,r9
80008dc0:	a3 78       	lsl	r8,0x3
80008dc2:	12 08       	add	r8,r9
80008dc4:	a3 78       	lsl	r8,0x3
80008dc6:	f8 08 00 08 	add	r8,r12,r8
80008dca:	2c 88       	sub	r8,-56
80008dcc:	f0 e8 00 00 	ld.d	r8,r8[0]
80008dd0:	f0 16 00 05 	mcall	r6[20]
80008dd4:	14 98       	mov	r8,r10
80008dd6:	16 99       	mov	r9,r11
80008dd8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
80008ddc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008de0:	10 99       	mov	r9,r8
80008de2:	ee 19 80 00 	eorh	r9,0x8000
80008de6:	ef 49 ff 50 	st.w	r7[-176],r9
80008dea:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008dee:	ef 48 ff 54 	st.w	r7[-172],r8
80008df2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008df6:	ec fa 00 18 	ld.w	r10,r6[24]
80008dfa:	12 98       	mov	r8,r9
80008dfc:	a3 78       	lsl	r8,0x3
80008dfe:	12 08       	add	r8,r9
80008e00:	a3 78       	lsl	r8,0x3
80008e02:	f4 08 00 08 	add	r8,r10,r8
80008e06:	2d 88       	sub	r8,-40
80008e08:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e0c:	ee ea ff 50 	ld.d	r10,r7[-176]
80008e10:	f0 16 00 03 	mcall	r6[12]
80008e14:	14 98       	mov	r8,r10
80008e16:	16 99       	mov	r9,r11
80008e18:	10 9a       	mov	r10,r8
80008e1a:	12 9b       	mov	r11,r9
80008e1c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e20:	ec fc 00 18 	ld.w	r12,r6[24]
80008e24:	12 98       	mov	r8,r9
80008e26:	a3 78       	lsl	r8,0x3
80008e28:	12 08       	add	r8,r9
80008e2a:	a3 78       	lsl	r8,0x3
80008e2c:	f8 08 00 08 	add	r8,r12,r8
80008e30:	2c 08       	sub	r8,-64
80008e32:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e36:	f0 16 00 05 	mcall	r6[20]
80008e3a:	14 98       	mov	r8,r10
80008e3c:	16 99       	mov	r9,r11
80008e3e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80008e42:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e46:	ec fa 00 18 	ld.w	r10,r6[24]
80008e4a:	12 98       	mov	r8,r9
80008e4c:	a3 78       	lsl	r8,0x3
80008e4e:	12 08       	add	r8,r9
80008e50:	a3 78       	lsl	r8,0x3
80008e52:	10 0a       	add	r10,r8
80008e54:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008e58:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008e5c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e60:	ec fb 00 18 	ld.w	r11,r6[24]
80008e64:	12 98       	mov	r8,r9
80008e66:	a3 78       	lsl	r8,0x3
80008e68:	12 08       	add	r8,r9
80008e6a:	f0 ca ff ff 	sub	r10,r8,-1
80008e6e:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008e72:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80008e76:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e7a:	ec fa 00 18 	ld.w	r10,r6[24]
80008e7e:	12 98       	mov	r8,r9
80008e80:	a3 78       	lsl	r8,0x3
80008e82:	12 08       	add	r8,r9
80008e84:	a3 78       	lsl	r8,0x3
80008e86:	f4 08 00 08 	add	r8,r10,r8
80008e8a:	f0 ca ff f0 	sub	r10,r8,-16
80008e8e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008e92:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80008e96:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e9a:	ec fa 00 18 	ld.w	r10,r6[24]
80008e9e:	12 98       	mov	r8,r9
80008ea0:	a3 78       	lsl	r8,0x3
80008ea2:	12 08       	add	r8,r9
80008ea4:	a3 78       	lsl	r8,0x3
80008ea6:	f4 08 00 08 	add	r8,r10,r8
80008eaa:	f0 ca ff e8 	sub	r10,r8,-24
80008eae:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008eb2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80008eb6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008eba:	ec fa 00 18 	ld.w	r10,r6[24]
80008ebe:	12 98       	mov	r8,r9
80008ec0:	a3 78       	lsl	r8,0x3
80008ec2:	12 08       	add	r8,r9
80008ec4:	a3 78       	lsl	r8,0x3
80008ec6:	f4 08 00 08 	add	r8,r10,r8
80008eca:	f0 ca ff e0 	sub	r10,r8,-32
80008ece:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008ed2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
80008ed6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008eda:	ec fa 00 18 	ld.w	r10,r6[24]
80008ede:	12 98       	mov	r8,r9
80008ee0:	a3 78       	lsl	r8,0x3
80008ee2:	12 08       	add	r8,r9
80008ee4:	a3 78       	lsl	r8,0x3
80008ee6:	f4 08 00 08 	add	r8,r10,r8
80008eea:	f0 ca ff d8 	sub	r10,r8,-40
80008eee:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008ef2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
80008ef6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008efa:	ec fa 00 18 	ld.w	r10,r6[24]
80008efe:	12 98       	mov	r8,r9
80008f00:	a3 78       	lsl	r8,0x3
80008f02:	12 08       	add	r8,r9
80008f04:	a3 78       	lsl	r8,0x3
80008f06:	f4 08 00 08 	add	r8,r10,r8
80008f0a:	f0 ca ff d0 	sub	r10,r8,-48
80008f0e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008f12:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
80008f16:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f1a:	ec fa 00 18 	ld.w	r10,r6[24]
80008f1e:	12 98       	mov	r8,r9
80008f20:	a3 78       	lsl	r8,0x3
80008f22:	12 08       	add	r8,r9
80008f24:	a3 78       	lsl	r8,0x3
80008f26:	f4 08 00 08 	add	r8,r10,r8
80008f2a:	f0 ca ff c8 	sub	r10,r8,-56
80008f2e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008f32:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80008f36:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f3a:	ec fa 00 18 	ld.w	r10,r6[24]
80008f3e:	12 98       	mov	r8,r9
80008f40:	a3 78       	lsl	r8,0x3
80008f42:	12 08       	add	r8,r9
80008f44:	a3 78       	lsl	r8,0x3
80008f46:	f4 08 00 08 	add	r8,r10,r8
80008f4a:	f0 ca ff c0 	sub	r10,r8,-64
80008f4e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008f52:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
80008f56:	ec f8 00 00 	ld.w	r8,r6[0]
80008f5a:	70 09       	ld.w	r9,r8[0x0]
80008f5c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008f60:	f0 c8 fc a3 	sub	r8,r8,-861
80008f64:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80008f68:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008f6c:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80008f70:	10 9c       	mov	r12,r8
80008f72:	f0 16 00 02 	mcall	r6[8]
80008f76:	14 98       	mov	r8,r10
80008f78:	16 99       	mov	r9,r11
80008f7a:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
80008f7e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f82:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f86:	12 98       	mov	r8,r9
80008f88:	a3 78       	lsl	r8,0x3
80008f8a:	12 08       	add	r8,r9
80008f8c:	a3 78       	lsl	r8,0x3
80008f8e:	f4 08 00 08 	add	r8,r10,r8
80008f92:	2e 08       	sub	r8,-32
80008f94:	f0 ea 00 00 	ld.d	r10,r8[0]
80008f98:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f9c:	ec f8 01 64 	ld.w	r8,r6[356]
80008fa0:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008fa4:	f0 16 00 05 	mcall	r6[20]
80008fa8:	14 98       	mov	r8,r10
80008faa:	16 99       	mov	r9,r11
80008fac:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
80008fb0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008fb4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fb8:	12 98       	mov	r8,r9
80008fba:	a3 78       	lsl	r8,0x3
80008fbc:	12 08       	add	r8,r9
80008fbe:	2f f8       	sub	r8,-1
80008fc0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80008fc4:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008fc8:	f0 16 00 0c 	mcall	r6[48]
80008fcc:	14 98       	mov	r8,r10
80008fce:	16 99       	mov	r9,r11
80008fd0:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
80008fd4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008fd8:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fdc:	12 98       	mov	r8,r9
80008fde:	a3 78       	lsl	r8,0x3
80008fe0:	12 08       	add	r8,r9
80008fe2:	a3 78       	lsl	r8,0x3
80008fe4:	f4 08 00 08 	add	r8,r10,r8
80008fe8:	2e 08       	sub	r8,-32
80008fea:	f0 ea 00 00 	ld.d	r10,r8[0]
80008fee:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008ff2:	f0 16 00 0c 	mcall	r6[48]
80008ff6:	14 98       	mov	r8,r10
80008ff8:	16 99       	mov	r9,r11
80008ffa:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
80008ffe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009002:	ec fa 00 1c 	ld.w	r10,r6[28]
80009006:	12 98       	mov	r8,r9
80009008:	a3 78       	lsl	r8,0x3
8000900a:	12 08       	add	r8,r9
8000900c:	a3 78       	lsl	r8,0x3
8000900e:	f4 08 00 08 	add	r8,r10,r8
80009012:	2c 88       	sub	r8,-56
80009014:	f0 ea 00 00 	ld.d	r10,r8[0]
80009018:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000901c:	f0 16 00 0c 	mcall	r6[48]
80009020:	14 98       	mov	r8,r10
80009022:	16 99       	mov	r9,r11
80009024:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80009028:	ec f8 00 00 	ld.w	r8,r6[0]
8000902c:	70 01       	ld.w	r1,r8[0x0]
8000902e:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009032:	ec f8 00 00 	ld.w	r8,r6[0]
80009036:	70 09       	ld.w	r9,r8[0x0]
80009038:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000903c:	f0 c8 fc 99 	sub	r8,r8,-871
80009040:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009044:	10 9c       	mov	r12,r8
80009046:	f0 16 00 02 	mcall	r6[8]
8000904a:	14 92       	mov	r2,r10
8000904c:	16 93       	mov	r3,r11
8000904e:	ee e8 ff 90 	ld.d	r8,r7[-112]
80009052:	ee ea ff a0 	ld.d	r10,r7[-96]
80009056:	f0 16 00 03 	mcall	r6[12]
8000905a:	14 98       	mov	r8,r10
8000905c:	16 99       	mov	r9,r11
8000905e:	04 9a       	mov	r10,r2
80009060:	06 9b       	mov	r11,r3
80009062:	f0 16 00 05 	mcall	r6[20]
80009066:	14 98       	mov	r8,r10
80009068:	16 99       	mov	r9,r11
8000906a:	10 9a       	mov	r10,r8
8000906c:	12 9b       	mov	r11,r9
8000906e:	f0 16 00 08 	mcall	r6[32]
80009072:	18 99       	mov	r9,r12
80009074:	ea c8 fc 99 	sub	r8,r5,-871
80009078:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
8000907c:	ec f8 00 00 	ld.w	r8,r6[0]
80009080:	70 01       	ld.w	r1,r8[0x0]
80009082:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009086:	ec f8 00 00 	ld.w	r8,r6[0]
8000908a:	70 09       	ld.w	r9,r8[0x0]
8000908c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009090:	f0 c8 fc a3 	sub	r8,r8,-861
80009094:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009098:	10 9c       	mov	r12,r8
8000909a:	f0 16 00 02 	mcall	r6[8]
8000909e:	14 92       	mov	r2,r10
800090a0:	16 93       	mov	r3,r11
800090a2:	ee e8 ff 90 	ld.d	r8,r7[-112]
800090a6:	ee ea ff a8 	ld.d	r10,r7[-88]
800090aa:	f0 16 00 03 	mcall	r6[12]
800090ae:	14 98       	mov	r8,r10
800090b0:	16 99       	mov	r9,r11
800090b2:	04 9a       	mov	r10,r2
800090b4:	06 9b       	mov	r11,r3
800090b6:	f0 16 00 05 	mcall	r6[20]
800090ba:	14 98       	mov	r8,r10
800090bc:	16 99       	mov	r9,r11
800090be:	10 9a       	mov	r10,r8
800090c0:	12 9b       	mov	r11,r9
800090c2:	f0 16 00 08 	mcall	r6[32]
800090c6:	18 99       	mov	r9,r12
800090c8:	ea c8 fc a3 	sub	r8,r5,-861
800090cc:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800090d0:	ec f8 00 00 	ld.w	r8,r6[0]
800090d4:	70 01       	ld.w	r1,r8[0x0]
800090d6:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800090da:	f0 c5 ff fd 	sub	r5,r8,-3
800090de:	ec f8 00 00 	ld.w	r8,r6[0]
800090e2:	70 09       	ld.w	r9,r8[0x0]
800090e4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800090e8:	2f d8       	sub	r8,-3
800090ea:	2f 48       	sub	r8,-12
800090ec:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800090f0:	10 9c       	mov	r12,r8
800090f2:	f0 16 00 02 	mcall	r6[8]
800090f6:	14 92       	mov	r2,r10
800090f8:	16 93       	mov	r3,r11
800090fa:	ee e8 ff 90 	ld.d	r8,r7[-112]
800090fe:	ee ea ff b0 	ld.d	r10,r7[-80]
80009102:	f0 16 00 03 	mcall	r6[12]
80009106:	14 98       	mov	r8,r10
80009108:	16 99       	mov	r9,r11
8000910a:	04 9a       	mov	r10,r2
8000910c:	06 9b       	mov	r11,r3
8000910e:	f0 16 00 05 	mcall	r6[20]
80009112:	14 98       	mov	r8,r10
80009114:	16 99       	mov	r9,r11
80009116:	10 9a       	mov	r10,r8
80009118:	12 9b       	mov	r11,r9
8000911a:	f0 16 00 08 	mcall	r6[32]
8000911e:	18 99       	mov	r9,r12
80009120:	ea c8 ff f4 	sub	r8,r5,-12
80009124:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009128:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000912c:	10 99       	mov	r9,r8
8000912e:	ee 19 80 00 	eorh	r9,0x8000
80009132:	ef 49 ff 58 	st.w	r7[-168],r9
80009136:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000913a:	ef 48 ff 5c 	st.w	r7[-164],r8
8000913e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009142:	ec fa 00 1c 	ld.w	r10,r6[28]
80009146:	12 98       	mov	r8,r9
80009148:	a3 78       	lsl	r8,0x3
8000914a:	12 08       	add	r8,r9
8000914c:	a3 78       	lsl	r8,0x3
8000914e:	f4 08 00 08 	add	r8,r10,r8
80009152:	2e 88       	sub	r8,-24
80009154:	f0 e8 00 00 	ld.d	r8,r8[0]
80009158:	ee ea ff 58 	ld.d	r10,r7[-168]
8000915c:	f0 16 00 03 	mcall	r6[12]
80009160:	14 98       	mov	r8,r10
80009162:	16 99       	mov	r9,r11
80009164:	10 9a       	mov	r10,r8
80009166:	12 9b       	mov	r11,r9
80009168:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000916c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009170:	12 98       	mov	r8,r9
80009172:	a3 78       	lsl	r8,0x3
80009174:	12 08       	add	r8,r9
80009176:	a3 78       	lsl	r8,0x3
80009178:	f8 08 00 08 	add	r8,r12,r8
8000917c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009180:	f0 16 00 05 	mcall	r6[20]
80009184:	14 98       	mov	r8,r10
80009186:	16 99       	mov	r9,r11
80009188:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000918c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009190:	10 99       	mov	r9,r8
80009192:	ee 19 80 00 	eorh	r9,0x8000
80009196:	ef 49 ff 60 	st.w	r7[-160],r9
8000919a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000919e:	ef 48 ff 64 	st.w	r7[-156],r8
800091a2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091a6:	ec fa 00 1c 	ld.w	r10,r6[28]
800091aa:	12 98       	mov	r8,r9
800091ac:	a3 78       	lsl	r8,0x3
800091ae:	12 08       	add	r8,r9
800091b0:	a3 78       	lsl	r8,0x3
800091b2:	f4 08 00 08 	add	r8,r10,r8
800091b6:	2e 08       	sub	r8,-32
800091b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800091bc:	ee ea ff 60 	ld.d	r10,r7[-160]
800091c0:	f0 16 00 03 	mcall	r6[12]
800091c4:	14 98       	mov	r8,r10
800091c6:	16 99       	mov	r9,r11
800091c8:	10 9a       	mov	r10,r8
800091ca:	12 9b       	mov	r11,r9
800091cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091d0:	ec fc 00 1c 	ld.w	r12,r6[28]
800091d4:	12 98       	mov	r8,r9
800091d6:	a3 78       	lsl	r8,0x3
800091d8:	12 08       	add	r8,r9
800091da:	2f f8       	sub	r8,-1
800091dc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800091e0:	f0 16 00 05 	mcall	r6[20]
800091e4:	14 98       	mov	r8,r10
800091e6:	16 99       	mov	r9,r11
800091e8:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800091ec:	ee f8 ff a0 	ld.w	r8,r7[-96]
800091f0:	10 99       	mov	r9,r8
800091f2:	ee 19 80 00 	eorh	r9,0x8000
800091f6:	ef 49 ff 68 	st.w	r7[-152],r9
800091fa:	ee f8 ff a4 	ld.w	r8,r7[-92]
800091fe:	ef 48 ff 6c 	st.w	r7[-148],r8
80009202:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009206:	ec fa 00 1c 	ld.w	r10,r6[28]
8000920a:	12 98       	mov	r8,r9
8000920c:	a3 78       	lsl	r8,0x3
8000920e:	12 08       	add	r8,r9
80009210:	a3 78       	lsl	r8,0x3
80009212:	f4 08 00 08 	add	r8,r10,r8
80009216:	2d 88       	sub	r8,-40
80009218:	f0 e8 00 00 	ld.d	r8,r8[0]
8000921c:	ee ea ff 68 	ld.d	r10,r7[-152]
80009220:	f0 16 00 03 	mcall	r6[12]
80009224:	14 98       	mov	r8,r10
80009226:	16 99       	mov	r9,r11
80009228:	10 9a       	mov	r10,r8
8000922a:	12 9b       	mov	r11,r9
8000922c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009230:	ec fc 00 1c 	ld.w	r12,r6[28]
80009234:	12 98       	mov	r8,r9
80009236:	a3 78       	lsl	r8,0x3
80009238:	12 08       	add	r8,r9
8000923a:	a3 78       	lsl	r8,0x3
8000923c:	f8 08 00 08 	add	r8,r12,r8
80009240:	2f 08       	sub	r8,-16
80009242:	f0 e8 00 00 	ld.d	r8,r8[0]
80009246:	f0 16 00 05 	mcall	r6[20]
8000924a:	14 98       	mov	r8,r10
8000924c:	16 99       	mov	r9,r11
8000924e:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
80009252:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009256:	30 0a       	mov	r10,0
80009258:	fc 1b 3f f0 	movh	r11,0x3ff0
8000925c:	f0 16 00 11 	mcall	r6[68]
80009260:	14 98       	mov	r8,r10
80009262:	16 99       	mov	r9,r11
80009264:	10 9a       	mov	r10,r8
80009266:	12 9b       	mov	r11,r9
80009268:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000926c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009270:	12 98       	mov	r8,r9
80009272:	a3 78       	lsl	r8,0x3
80009274:	12 08       	add	r8,r9
80009276:	a3 78       	lsl	r8,0x3
80009278:	f8 08 00 08 	add	r8,r12,r8
8000927c:	2e 88       	sub	r8,-24
8000927e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009282:	f0 16 00 03 	mcall	r6[12]
80009286:	14 98       	mov	r8,r10
80009288:	16 99       	mov	r9,r11
8000928a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
8000928e:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009292:	30 0a       	mov	r10,0
80009294:	fc 1b 3f f0 	movh	r11,0x3ff0
80009298:	f0 16 00 11 	mcall	r6[68]
8000929c:	14 98       	mov	r8,r10
8000929e:	16 99       	mov	r9,r11
800092a0:	10 9a       	mov	r10,r8
800092a2:	12 9b       	mov	r11,r9
800092a4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092a8:	ec fc 00 1c 	ld.w	r12,r6[28]
800092ac:	12 98       	mov	r8,r9
800092ae:	a3 78       	lsl	r8,0x3
800092b0:	12 08       	add	r8,r9
800092b2:	a3 78       	lsl	r8,0x3
800092b4:	f8 08 00 08 	add	r8,r12,r8
800092b8:	2e 08       	sub	r8,-32
800092ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800092be:	f0 16 00 03 	mcall	r6[12]
800092c2:	14 98       	mov	r8,r10
800092c4:	16 99       	mov	r9,r11
800092c6:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
800092ca:	ee e8 ff a8 	ld.d	r8,r7[-88]
800092ce:	30 0a       	mov	r10,0
800092d0:	fc 1b 3f f0 	movh	r11,0x3ff0
800092d4:	f0 16 00 11 	mcall	r6[68]
800092d8:	14 98       	mov	r8,r10
800092da:	16 99       	mov	r9,r11
800092dc:	10 9a       	mov	r10,r8
800092de:	12 9b       	mov	r11,r9
800092e0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092e4:	ec fc 00 1c 	ld.w	r12,r6[28]
800092e8:	12 98       	mov	r8,r9
800092ea:	a3 78       	lsl	r8,0x3
800092ec:	12 08       	add	r8,r9
800092ee:	a3 78       	lsl	r8,0x3
800092f0:	f8 08 00 08 	add	r8,r12,r8
800092f4:	2d 88       	sub	r8,-40
800092f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800092fa:	f0 16 00 03 	mcall	r6[12]
800092fe:	14 98       	mov	r8,r10
80009300:	16 99       	mov	r9,r11
80009302:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
80009306:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000930a:	10 99       	mov	r9,r8
8000930c:	ee 19 80 00 	eorh	r9,0x8000
80009310:	ef 49 ff 70 	st.w	r7[-144],r9
80009314:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009318:	ef 48 ff 74 	st.w	r7[-140],r8
8000931c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009320:	ec fa 00 1c 	ld.w	r10,r6[28]
80009324:	12 98       	mov	r8,r9
80009326:	a3 78       	lsl	r8,0x3
80009328:	12 08       	add	r8,r9
8000932a:	a3 78       	lsl	r8,0x3
8000932c:	f4 08 00 08 	add	r8,r10,r8
80009330:	2e 88       	sub	r8,-24
80009332:	f0 e8 00 00 	ld.d	r8,r8[0]
80009336:	ee ea ff 70 	ld.d	r10,r7[-144]
8000933a:	f0 16 00 03 	mcall	r6[12]
8000933e:	14 98       	mov	r8,r10
80009340:	16 99       	mov	r9,r11
80009342:	10 9a       	mov	r10,r8
80009344:	12 9b       	mov	r11,r9
80009346:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000934a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000934e:	12 98       	mov	r8,r9
80009350:	a3 78       	lsl	r8,0x3
80009352:	12 08       	add	r8,r9
80009354:	a3 78       	lsl	r8,0x3
80009356:	f8 08 00 08 	add	r8,r12,r8
8000935a:	2d 08       	sub	r8,-48
8000935c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009360:	f0 16 00 05 	mcall	r6[20]
80009364:	14 98       	mov	r8,r10
80009366:	16 99       	mov	r9,r11
80009368:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
8000936c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009370:	10 99       	mov	r9,r8
80009372:	ee 19 80 00 	eorh	r9,0x8000
80009376:	ef 49 ff 78 	st.w	r7[-136],r9
8000937a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000937e:	ef 48 ff 7c 	st.w	r7[-132],r8
80009382:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009386:	ec fa 00 1c 	ld.w	r10,r6[28]
8000938a:	12 98       	mov	r8,r9
8000938c:	a3 78       	lsl	r8,0x3
8000938e:	12 08       	add	r8,r9
80009390:	a3 78       	lsl	r8,0x3
80009392:	f4 08 00 08 	add	r8,r10,r8
80009396:	2e 08       	sub	r8,-32
80009398:	f0 e8 00 00 	ld.d	r8,r8[0]
8000939c:	ee ea ff 78 	ld.d	r10,r7[-136]
800093a0:	f0 16 00 03 	mcall	r6[12]
800093a4:	14 98       	mov	r8,r10
800093a6:	16 99       	mov	r9,r11
800093a8:	10 9a       	mov	r10,r8
800093aa:	12 9b       	mov	r11,r9
800093ac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093b0:	ec fc 00 1c 	ld.w	r12,r6[28]
800093b4:	12 98       	mov	r8,r9
800093b6:	a3 78       	lsl	r8,0x3
800093b8:	12 08       	add	r8,r9
800093ba:	a3 78       	lsl	r8,0x3
800093bc:	f8 08 00 08 	add	r8,r12,r8
800093c0:	2c 88       	sub	r8,-56
800093c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800093c6:	f0 16 00 05 	mcall	r6[20]
800093ca:	14 98       	mov	r8,r10
800093cc:	16 99       	mov	r9,r11
800093ce:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
800093d2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800093d6:	10 99       	mov	r9,r8
800093d8:	ee 19 80 00 	eorh	r9,0x8000
800093dc:	ef 49 ff 80 	st.w	r7[-128],r9
800093e0:	ee f8 ff b4 	ld.w	r8,r7[-76]
800093e4:	ef 48 ff 84 	st.w	r7[-124],r8
800093e8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093ec:	ec fa 00 1c 	ld.w	r10,r6[28]
800093f0:	12 98       	mov	r8,r9
800093f2:	a3 78       	lsl	r8,0x3
800093f4:	12 08       	add	r8,r9
800093f6:	a3 78       	lsl	r8,0x3
800093f8:	f4 08 00 08 	add	r8,r10,r8
800093fc:	2d 88       	sub	r8,-40
800093fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009402:	ee ea ff 80 	ld.d	r10,r7[-128]
80009406:	f0 16 00 03 	mcall	r6[12]
8000940a:	14 98       	mov	r8,r10
8000940c:	16 99       	mov	r9,r11
8000940e:	10 9a       	mov	r10,r8
80009410:	12 9b       	mov	r11,r9
80009412:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009416:	ec fc 00 1c 	ld.w	r12,r6[28]
8000941a:	12 98       	mov	r8,r9
8000941c:	a3 78       	lsl	r8,0x3
8000941e:	12 08       	add	r8,r9
80009420:	a3 78       	lsl	r8,0x3
80009422:	f8 08 00 08 	add	r8,r12,r8
80009426:	2c 08       	sub	r8,-64
80009428:	f0 e8 00 00 	ld.d	r8,r8[0]
8000942c:	f0 16 00 05 	mcall	r6[20]
80009430:	14 98       	mov	r8,r10
80009432:	16 99       	mov	r9,r11
80009434:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009438:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000943c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009440:	12 98       	mov	r8,r9
80009442:	a3 78       	lsl	r8,0x3
80009444:	12 08       	add	r8,r9
80009446:	a3 78       	lsl	r8,0x3
80009448:	10 0a       	add	r10,r8
8000944a:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000944e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009452:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009456:	ec fa 00 1c 	ld.w	r10,r6[28]
8000945a:	12 98       	mov	r8,r9
8000945c:	a3 78       	lsl	r8,0x3
8000945e:	12 08       	add	r8,r9
80009460:	f0 cb ff ff 	sub	r11,r8,-1
80009464:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009468:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
8000946c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009470:	ec fa 00 1c 	ld.w	r10,r6[28]
80009474:	12 98       	mov	r8,r9
80009476:	a3 78       	lsl	r8,0x3
80009478:	12 08       	add	r8,r9
8000947a:	a3 78       	lsl	r8,0x3
8000947c:	f4 08 00 08 	add	r8,r10,r8
80009480:	f0 ca ff f0 	sub	r10,r8,-16
80009484:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009488:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
8000948c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009490:	ec fa 00 1c 	ld.w	r10,r6[28]
80009494:	12 98       	mov	r8,r9
80009496:	a3 78       	lsl	r8,0x3
80009498:	12 08       	add	r8,r9
8000949a:	a3 78       	lsl	r8,0x3
8000949c:	f4 08 00 08 	add	r8,r10,r8
800094a0:	f0 ca ff e8 	sub	r10,r8,-24
800094a4:	ee e8 ff d0 	ld.d	r8,r7[-48]
800094a8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
800094ac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094b0:	ec fa 00 1c 	ld.w	r10,r6[28]
800094b4:	12 98       	mov	r8,r9
800094b6:	a3 78       	lsl	r8,0x3
800094b8:	12 08       	add	r8,r9
800094ba:	a3 78       	lsl	r8,0x3
800094bc:	f4 08 00 08 	add	r8,r10,r8
800094c0:	f0 ca ff e0 	sub	r10,r8,-32
800094c4:	ee e8 ff d8 	ld.d	r8,r7[-40]
800094c8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
800094cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094d0:	ec fa 00 1c 	ld.w	r10,r6[28]
800094d4:	12 98       	mov	r8,r9
800094d6:	a3 78       	lsl	r8,0x3
800094d8:	12 08       	add	r8,r9
800094da:	a3 78       	lsl	r8,0x3
800094dc:	f4 08 00 08 	add	r8,r10,r8
800094e0:	f0 ca ff d8 	sub	r10,r8,-40
800094e4:	ee e8 ff e0 	ld.d	r8,r7[-32]
800094e8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
800094ec:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094f0:	ec fa 00 1c 	ld.w	r10,r6[28]
800094f4:	12 98       	mov	r8,r9
800094f6:	a3 78       	lsl	r8,0x3
800094f8:	12 08       	add	r8,r9
800094fa:	a3 78       	lsl	r8,0x3
800094fc:	f4 08 00 08 	add	r8,r10,r8
80009500:	f0 ca ff d0 	sub	r10,r8,-48
80009504:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009508:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
8000950c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009510:	ec fa 00 1c 	ld.w	r10,r6[28]
80009514:	12 98       	mov	r8,r9
80009516:	a3 78       	lsl	r8,0x3
80009518:	12 08       	add	r8,r9
8000951a:	a3 78       	lsl	r8,0x3
8000951c:	f4 08 00 08 	add	r8,r10,r8
80009520:	f0 ca ff c8 	sub	r10,r8,-56
80009524:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009528:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
8000952c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009530:	ec fa 00 1c 	ld.w	r10,r6[28]
80009534:	12 98       	mov	r8,r9
80009536:	a3 78       	lsl	r8,0x3
80009538:	12 08       	add	r8,r9
8000953a:	a3 78       	lsl	r8,0x3
8000953c:	f4 08 00 08 	add	r8,r10,r8
80009540:	f0 ca ff c0 	sub	r10,r8,-64
80009544:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009548:	f4 e9 00 00 	st.d	r10[0],r8
}
8000954c:	2c ad       	sub	sp,-216
8000954e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009552:	00 00       	add	r0,r0
80009554:	80 00       	ld.sh	r0,r0[0x0]
80009556:	87 c2       	st.w	r3[0x30],r2

80009558 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80009558:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000955c:	1a 97       	mov	r7,sp
8000955e:	21 bd       	sub	sp,108
80009560:	fe f6 05 80 	ld.w	r6,pc[1408]
80009564:	1e 26       	rsub	r6,pc
80009566:	ef 4c ff bc 	st.w	r7[-68],r12
8000956a:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
8000956e:	ec f8 00 00 	ld.w	r8,r6[0]
80009572:	70 0a       	ld.w	r10,r8[0x0]
80009574:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009578:	12 98       	mov	r8,r9
8000957a:	a1 78       	lsl	r8,0x1
8000957c:	12 08       	add	r8,r9
8000957e:	a3 78       	lsl	r8,0x3
80009580:	f4 08 00 08 	add	r8,r10,r8
80009584:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009588:	f0 e8 00 00 	ld.d	r8,r8[0]
8000958c:	ee ea ff b4 	ld.d	r10,r7[-76]
80009590:	f0 16 00 11 	mcall	r6[68]
80009594:	14 98       	mov	r8,r10
80009596:	16 99       	mov	r9,r11
80009598:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
8000959c:	ee f9 ff bc 	ld.w	r9,r7[-68]
800095a0:	ec fa 00 18 	ld.w	r10,r6[24]
800095a4:	12 98       	mov	r8,r9
800095a6:	a3 78       	lsl	r8,0x3
800095a8:	12 08       	add	r8,r9
800095aa:	a3 78       	lsl	r8,0x3
800095ac:	f4 08 00 08 	add	r8,r10,r8
800095b0:	f0 ea 00 00 	ld.d	r10,r8[0]
800095b4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800095b8:	ec f8 01 68 	ld.w	r8,r6[360]
800095bc:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800095c0:	f0 16 00 05 	mcall	r6[20]
800095c4:	14 98       	mov	r8,r10
800095c6:	16 99       	mov	r9,r11
800095c8:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
800095cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800095d0:	ec fa 00 18 	ld.w	r10,r6[24]
800095d4:	12 98       	mov	r8,r9
800095d6:	a3 78       	lsl	r8,0x3
800095d8:	12 08       	add	r8,r9
800095da:	a3 78       	lsl	r8,0x3
800095dc:	f4 08 00 08 	add	r8,r10,r8
800095e0:	f0 ea 00 00 	ld.d	r10,r8[0]
800095e4:	ee e8 ff c8 	ld.d	r8,r7[-56]
800095e8:	f0 16 00 0c 	mcall	r6[48]
800095ec:	14 98       	mov	r8,r10
800095ee:	16 99       	mov	r9,r11
800095f0:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
800095f4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800095f8:	ec fa 00 18 	ld.w	r10,r6[24]
800095fc:	12 98       	mov	r8,r9
800095fe:	a3 78       	lsl	r8,0x3
80009600:	12 08       	add	r8,r9
80009602:	a3 78       	lsl	r8,0x3
80009604:	f4 08 00 08 	add	r8,r10,r8
80009608:	2e 88       	sub	r8,-24
8000960a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000960e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009612:	f0 16 00 0c 	mcall	r6[48]
80009616:	14 98       	mov	r8,r10
80009618:	16 99       	mov	r9,r11
8000961a:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
8000961e:	ec f8 00 00 	ld.w	r8,r6[0]
80009622:	70 08       	ld.w	r8,r8[0x0]
80009624:	ef 48 ff 94 	st.w	r7[-108],r8
80009628:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000962c:	ec f8 00 00 	ld.w	r8,r6[0]
80009630:	70 0a       	ld.w	r10,r8[0x0]
80009632:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009636:	12 98       	mov	r8,r9
80009638:	a1 78       	lsl	r8,0x1
8000963a:	12 08       	add	r8,r9
8000963c:	a3 78       	lsl	r8,0x3
8000963e:	f4 08 00 08 	add	r8,r10,r8
80009642:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009646:	f0 e2 00 00 	ld.d	r2,r8[0]
8000964a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000964e:	ee ea ff d0 	ld.d	r10,r7[-48]
80009652:	f0 16 00 03 	mcall	r6[12]
80009656:	14 98       	mov	r8,r10
80009658:	16 99       	mov	r9,r11
8000965a:	04 9a       	mov	r10,r2
8000965c:	06 9b       	mov	r11,r3
8000965e:	f0 16 00 05 	mcall	r6[20]
80009662:	14 98       	mov	r8,r10
80009664:	16 99       	mov	r9,r11
80009666:	10 9a       	mov	r10,r8
80009668:	12 9b       	mov	r11,r9
8000966a:	0a 98       	mov	r8,r5
8000966c:	a1 78       	lsl	r8,0x1
8000966e:	0a 08       	add	r8,r5
80009670:	a3 78       	lsl	r8,0x3
80009672:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009676:	f2 08 00 08 	add	r8,r9,r8
8000967a:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000967e:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009682:	ec f8 00 00 	ld.w	r8,r6[0]
80009686:	70 08       	ld.w	r8,r8[0x0]
80009688:	ef 48 ff 98 	st.w	r7[-104],r8
8000968c:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009690:	ec f8 00 00 	ld.w	r8,r6[0]
80009694:	70 0a       	ld.w	r10,r8[0x0]
80009696:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000969a:	12 98       	mov	r8,r9
8000969c:	a1 78       	lsl	r8,0x1
8000969e:	12 08       	add	r8,r9
800096a0:	2f f8       	sub	r8,-1
800096a2:	a3 78       	lsl	r8,0x3
800096a4:	f4 08 00 08 	add	r8,r10,r8
800096a8:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
800096ac:	ee e8 ff c0 	ld.d	r8,r7[-64]
800096b0:	ee ea ff d8 	ld.d	r10,r7[-40]
800096b4:	f0 16 00 03 	mcall	r6[12]
800096b8:	14 98       	mov	r8,r10
800096ba:	16 99       	mov	r9,r11
800096bc:	04 9a       	mov	r10,r2
800096be:	06 9b       	mov	r11,r3
800096c0:	f0 16 00 05 	mcall	r6[20]
800096c4:	14 98       	mov	r8,r10
800096c6:	16 99       	mov	r9,r11
800096c8:	10 9a       	mov	r10,r8
800096ca:	12 9b       	mov	r11,r9
800096cc:	0a 98       	mov	r8,r5
800096ce:	a1 78       	lsl	r8,0x1
800096d0:	0a 08       	add	r8,r5
800096d2:	2f f8       	sub	r8,-1
800096d4:	a3 78       	lsl	r8,0x3
800096d6:	ee f9 ff 98 	ld.w	r9,r7[-104]
800096da:	f2 08 00 08 	add	r8,r9,r8
800096de:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	P11 = (1. - K1) * P[axis][0][0];
800096e2:	ee e8 ff d0 	ld.d	r8,r7[-48]
800096e6:	30 0a       	mov	r10,0
800096e8:	fc 1b 3f f0 	movh	r11,0x3ff0
800096ec:	f0 16 00 11 	mcall	r6[68]
800096f0:	14 98       	mov	r8,r10
800096f2:	16 99       	mov	r9,r11
800096f4:	10 9a       	mov	r10,r8
800096f6:	12 9b       	mov	r11,r9
800096f8:	ee f9 ff bc 	ld.w	r9,r7[-68]
800096fc:	ec fc 00 18 	ld.w	r12,r6[24]
80009700:	12 98       	mov	r8,r9
80009702:	a3 78       	lsl	r8,0x3
80009704:	12 08       	add	r8,r9
80009706:	a3 78       	lsl	r8,0x3
80009708:	f8 08 00 08 	add	r8,r12,r8
8000970c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009710:	f0 16 00 03 	mcall	r6[12]
80009714:	14 98       	mov	r8,r10
80009716:	16 99       	mov	r9,r11
80009718:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
8000971c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009720:	30 0a       	mov	r10,0
80009722:	fc 1b 3f f0 	movh	r11,0x3ff0
80009726:	f0 16 00 11 	mcall	r6[68]
8000972a:	14 98       	mov	r8,r10
8000972c:	16 99       	mov	r9,r11
8000972e:	10 9a       	mov	r10,r8
80009730:	12 9b       	mov	r11,r9
80009732:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009736:	ec fc 00 18 	ld.w	r12,r6[24]
8000973a:	12 98       	mov	r8,r9
8000973c:	a3 78       	lsl	r8,0x3
8000973e:	12 08       	add	r8,r9
80009740:	2f f8       	sub	r8,-1
80009742:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009746:	f0 16 00 03 	mcall	r6[12]
8000974a:	14 98       	mov	r8,r10
8000974c:	16 99       	mov	r9,r11
8000974e:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80009752:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009756:	10 99       	mov	r9,r8
80009758:	ee 19 80 00 	eorh	r9,0x8000
8000975c:	ef 49 ff 9c 	st.w	r7[-100],r9
80009760:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009764:	ef 48 ff a0 	st.w	r7[-96],r8
80009768:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000976c:	ec fa 00 18 	ld.w	r10,r6[24]
80009770:	12 98       	mov	r8,r9
80009772:	a3 78       	lsl	r8,0x3
80009774:	12 08       	add	r8,r9
80009776:	a3 78       	lsl	r8,0x3
80009778:	f4 08 00 08 	add	r8,r10,r8
8000977c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009780:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009784:	f0 16 00 03 	mcall	r6[12]
80009788:	14 98       	mov	r8,r10
8000978a:	16 99       	mov	r9,r11
8000978c:	10 9a       	mov	r10,r8
8000978e:	12 9b       	mov	r11,r9
80009790:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009794:	ec fc 00 18 	ld.w	r12,r6[24]
80009798:	12 98       	mov	r8,r9
8000979a:	a3 78       	lsl	r8,0x3
8000979c:	12 08       	add	r8,r9
8000979e:	a3 78       	lsl	r8,0x3
800097a0:	f8 08 00 08 	add	r8,r12,r8
800097a4:	2e 88       	sub	r8,-24
800097a6:	f0 e8 00 00 	ld.d	r8,r8[0]
800097aa:	f0 16 00 05 	mcall	r6[20]
800097ae:	14 98       	mov	r8,r10
800097b0:	16 99       	mov	r9,r11
800097b2:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
800097b6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800097ba:	10 99       	mov	r9,r8
800097bc:	ee 19 80 00 	eorh	r9,0x8000
800097c0:	ef 49 ff a4 	st.w	r7[-92],r9
800097c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800097c8:	ef 48 ff a8 	st.w	r7[-88],r8
800097cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800097d0:	ec fa 00 18 	ld.w	r10,r6[24]
800097d4:	12 98       	mov	r8,r9
800097d6:	a3 78       	lsl	r8,0x3
800097d8:	12 08       	add	r8,r9
800097da:	2f f8       	sub	r8,-1
800097dc:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
800097e0:	ee ea ff a4 	ld.d	r10,r7[-92]
800097e4:	f0 16 00 03 	mcall	r6[12]
800097e8:	14 98       	mov	r8,r10
800097ea:	16 99       	mov	r9,r11
800097ec:	10 9a       	mov	r10,r8
800097ee:	12 9b       	mov	r11,r9
800097f0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800097f4:	ec fc 00 18 	ld.w	r12,r6[24]
800097f8:	12 98       	mov	r8,r9
800097fa:	a3 78       	lsl	r8,0x3
800097fc:	12 08       	add	r8,r9
800097fe:	a3 78       	lsl	r8,0x3
80009800:	f8 08 00 08 	add	r8,r12,r8
80009804:	2e 08       	sub	r8,-32
80009806:	f0 e8 00 00 	ld.d	r8,r8[0]
8000980a:	f0 16 00 05 	mcall	r6[20]
8000980e:	14 98       	mov	r8,r10
80009810:	16 99       	mov	r9,r11
80009812:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009816:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000981a:	ec fa 00 18 	ld.w	r10,r6[24]
8000981e:	12 98       	mov	r8,r9
80009820:	a3 78       	lsl	r8,0x3
80009822:	12 08       	add	r8,r9
80009824:	a3 78       	lsl	r8,0x3
80009826:	10 0a       	add	r10,r8
80009828:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000982c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009830:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009834:	ec fa 00 18 	ld.w	r10,r6[24]
80009838:	12 98       	mov	r8,r9
8000983a:	a3 78       	lsl	r8,0x3
8000983c:	12 08       	add	r8,r9
8000983e:	f0 cb ff ff 	sub	r11,r8,-1
80009842:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009846:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
8000984a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000984e:	ec fa 00 18 	ld.w	r10,r6[24]
80009852:	12 98       	mov	r8,r9
80009854:	a3 78       	lsl	r8,0x3
80009856:	12 08       	add	r8,r9
80009858:	a3 78       	lsl	r8,0x3
8000985a:	f4 08 00 08 	add	r8,r10,r8
8000985e:	f0 ca ff e8 	sub	r10,r8,-24
80009862:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009866:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000986a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000986e:	ec fa 00 18 	ld.w	r10,r6[24]
80009872:	12 98       	mov	r8,r9
80009874:	a3 78       	lsl	r8,0x3
80009876:	12 08       	add	r8,r9
80009878:	a3 78       	lsl	r8,0x3
8000987a:	f4 08 00 08 	add	r8,r10,r8
8000987e:	f0 ca ff e0 	sub	r10,r8,-32
80009882:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009886:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
8000988a:	ec f8 00 00 	ld.w	r8,r6[0]
8000988e:	70 08       	ld.w	r8,r8[0x0]
80009890:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009894:	f2 c9 fc 99 	sub	r9,r9,-871
80009898:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000989c:	10 9c       	mov	r12,r8
8000989e:	f0 16 00 02 	mcall	r6[8]
800098a2:	14 98       	mov	r8,r10
800098a4:	16 99       	mov	r9,r11
800098a6:	ee ea ff b4 	ld.d	r10,r7[-76]
800098aa:	f0 16 00 11 	mcall	r6[68]
800098ae:	14 98       	mov	r8,r10
800098b0:	16 99       	mov	r9,r11
800098b2:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
800098b6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800098ba:	ec fa 00 1c 	ld.w	r10,r6[28]
800098be:	12 98       	mov	r8,r9
800098c0:	a3 78       	lsl	r8,0x3
800098c2:	12 08       	add	r8,r9
800098c4:	a3 78       	lsl	r8,0x3
800098c6:	f4 08 00 08 	add	r8,r10,r8
800098ca:	f0 ea 00 00 	ld.d	r10,r8[0]
800098ce:	ee f9 ff bc 	ld.w	r9,r7[-68]
800098d2:	ec f8 01 64 	ld.w	r8,r6[356]
800098d6:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800098da:	f0 16 00 05 	mcall	r6[20]
800098de:	14 98       	mov	r8,r10
800098e0:	16 99       	mov	r9,r11
800098e2:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
800098e6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800098ea:	ec fa 00 1c 	ld.w	r10,r6[28]
800098ee:	12 98       	mov	r8,r9
800098f0:	a3 78       	lsl	r8,0x3
800098f2:	12 08       	add	r8,r9
800098f4:	a3 78       	lsl	r8,0x3
800098f6:	f4 08 00 08 	add	r8,r10,r8
800098fa:	f0 ea 00 00 	ld.d	r10,r8[0]
800098fe:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009902:	f0 16 00 0c 	mcall	r6[48]
80009906:	14 98       	mov	r8,r10
80009908:	16 99       	mov	r9,r11
8000990a:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
8000990e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009912:	ec fa 00 1c 	ld.w	r10,r6[28]
80009916:	12 98       	mov	r8,r9
80009918:	a3 78       	lsl	r8,0x3
8000991a:	12 08       	add	r8,r9
8000991c:	a3 78       	lsl	r8,0x3
8000991e:	f4 08 00 08 	add	r8,r10,r8
80009922:	2e 88       	sub	r8,-24
80009924:	f0 ea 00 00 	ld.d	r10,r8[0]
80009928:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000992c:	f0 16 00 0c 	mcall	r6[48]
80009930:	14 98       	mov	r8,r10
80009932:	16 99       	mov	r9,r11
80009934:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
80009938:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000993c:	30 0a       	mov	r10,0
8000993e:	fc 1b 3f f0 	movh	r11,0x3ff0
80009942:	f0 16 00 11 	mcall	r6[68]
80009946:	14 98       	mov	r8,r10
80009948:	16 99       	mov	r9,r11
8000994a:	10 9a       	mov	r10,r8
8000994c:	12 9b       	mov	r11,r9
8000994e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009952:	ec fc 00 1c 	ld.w	r12,r6[28]
80009956:	12 98       	mov	r8,r9
80009958:	a3 78       	lsl	r8,0x3
8000995a:	12 08       	add	r8,r9
8000995c:	a3 78       	lsl	r8,0x3
8000995e:	f8 08 00 08 	add	r8,r12,r8
80009962:	f0 e8 00 00 	ld.d	r8,r8[0]
80009966:	f0 16 00 03 	mcall	r6[12]
8000996a:	14 98       	mov	r8,r10
8000996c:	16 99       	mov	r9,r11
8000996e:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
80009972:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009976:	30 0a       	mov	r10,0
80009978:	fc 1b 3f f0 	movh	r11,0x3ff0
8000997c:	f0 16 00 11 	mcall	r6[68]
80009980:	14 98       	mov	r8,r10
80009982:	16 99       	mov	r9,r11
80009984:	10 9a       	mov	r10,r8
80009986:	12 9b       	mov	r11,r9
80009988:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000998c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009990:	12 98       	mov	r8,r9
80009992:	a3 78       	lsl	r8,0x3
80009994:	12 08       	add	r8,r9
80009996:	2f f8       	sub	r8,-1
80009998:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000999c:	f0 16 00 03 	mcall	r6[12]
800099a0:	14 98       	mov	r8,r10
800099a2:	16 99       	mov	r9,r11
800099a4:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
800099a8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800099ac:	10 99       	mov	r9,r8
800099ae:	ee 19 80 00 	eorh	r9,0x8000
800099b2:	ef 49 ff ac 	st.w	r7[-84],r9
800099b6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800099ba:	ef 48 ff b0 	st.w	r7[-80],r8
800099be:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099c2:	ec fa 00 1c 	ld.w	r10,r6[28]
800099c6:	12 98       	mov	r8,r9
800099c8:	a3 78       	lsl	r8,0x3
800099ca:	12 08       	add	r8,r9
800099cc:	a3 78       	lsl	r8,0x3
800099ce:	f4 08 00 08 	add	r8,r10,r8
800099d2:	f0 e8 00 00 	ld.d	r8,r8[0]
800099d6:	ee ea ff ac 	ld.d	r10,r7[-84]
800099da:	f0 16 00 03 	mcall	r6[12]
800099de:	14 98       	mov	r8,r10
800099e0:	16 99       	mov	r9,r11
800099e2:	10 9a       	mov	r10,r8
800099e4:	12 9b       	mov	r11,r9
800099e6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099ea:	ec fc 00 1c 	ld.w	r12,r6[28]
800099ee:	12 98       	mov	r8,r9
800099f0:	a3 78       	lsl	r8,0x3
800099f2:	12 08       	add	r8,r9
800099f4:	a3 78       	lsl	r8,0x3
800099f6:	f8 08 00 08 	add	r8,r12,r8
800099fa:	2e 88       	sub	r8,-24
800099fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a00:	f0 16 00 05 	mcall	r6[20]
80009a04:	14 98       	mov	r8,r10
80009a06:	16 99       	mov	r9,r11
80009a08:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80009a0c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009a10:	10 91       	mov	r1,r8
80009a12:	ee 11 80 00 	eorh	r1,0x8000
80009a16:	ee f0 ff dc 	ld.w	r0,r7[-36]
80009a1a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a1e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a22:	12 98       	mov	r8,r9
80009a24:	a3 78       	lsl	r8,0x3
80009a26:	12 08       	add	r8,r9
80009a28:	2f f8       	sub	r8,-1
80009a2a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009a2e:	00 9a       	mov	r10,r0
80009a30:	02 9b       	mov	r11,r1
80009a32:	f0 16 00 03 	mcall	r6[12]
80009a36:	14 98       	mov	r8,r10
80009a38:	16 99       	mov	r9,r11
80009a3a:	10 9a       	mov	r10,r8
80009a3c:	12 9b       	mov	r11,r9
80009a3e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a42:	ec fc 00 1c 	ld.w	r12,r6[28]
80009a46:	12 98       	mov	r8,r9
80009a48:	a3 78       	lsl	r8,0x3
80009a4a:	12 08       	add	r8,r9
80009a4c:	a3 78       	lsl	r8,0x3
80009a4e:	f8 08 00 08 	add	r8,r12,r8
80009a52:	2e 08       	sub	r8,-32
80009a54:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a58:	f0 16 00 05 	mcall	r6[20]
80009a5c:	14 98       	mov	r8,r10
80009a5e:	16 99       	mov	r9,r11
80009a60:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009a64:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a68:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a6c:	12 98       	mov	r8,r9
80009a6e:	a3 78       	lsl	r8,0x3
80009a70:	12 08       	add	r8,r9
80009a72:	a3 78       	lsl	r8,0x3
80009a74:	10 0a       	add	r10,r8
80009a76:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009a7a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009a7e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a82:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a86:	12 98       	mov	r8,r9
80009a88:	a3 78       	lsl	r8,0x3
80009a8a:	12 08       	add	r8,r9
80009a8c:	f0 cb ff ff 	sub	r11,r8,-1
80009a90:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009a94:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
80009a98:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a9c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009aa0:	12 98       	mov	r8,r9
80009aa2:	a3 78       	lsl	r8,0x3
80009aa4:	12 08       	add	r8,r9
80009aa6:	a3 78       	lsl	r8,0x3
80009aa8:	f4 08 00 08 	add	r8,r10,r8
80009aac:	f0 ca ff e8 	sub	r10,r8,-24
80009ab0:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009ab4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009ab8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009abc:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ac0:	12 98       	mov	r8,r9
80009ac2:	a3 78       	lsl	r8,0x3
80009ac4:	12 08       	add	r8,r9
80009ac6:	a3 78       	lsl	r8,0x3
80009ac8:	f4 08 00 08 	add	r8,r10,r8
80009acc:	f0 ca ff e0 	sub	r10,r8,-32
80009ad0:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009ad4:	f4 e9 00 00 	st.d	r10[0],r8
}
80009ad8:	2e 5d       	sub	sp,-108
80009ada:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80009ade:	00 00       	add	r0,r0
80009ae0:	80 00       	ld.sh	r0,r0[0x0]
80009ae2:	93 e8       	st.w	r9[0x38],r8

80009ae4 <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
80009ae4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009ae8:	1a 97       	mov	r7,sp
80009aea:	21 ad       	sub	sp,104
80009aec:	fe f6 05 88 	ld.w	r6,pc[1416]
80009af0:	1e 26       	rsub	r6,pc
80009af2:	ef 4c ff bc 	st.w	r7[-68],r12
80009af6:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
80009afa:	ee fc ff b8 	ld.w	r12,r7[-72]
80009afe:	f0 16 00 02 	mcall	r6[8]
80009b02:	ec f8 00 00 	ld.w	r8,r6[0]
80009b06:	70 0c       	ld.w	r12,r8[0x0]
80009b08:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b0c:	12 98       	mov	r8,r9
80009b0e:	a1 78       	lsl	r8,0x1
80009b10:	12 08       	add	r8,r9
80009b12:	2f f8       	sub	r8,-1
80009b14:	a3 78       	lsl	r8,0x3
80009b16:	f8 08 00 08 	add	r8,r12,r8
80009b1a:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80009b1e:	f0 16 00 11 	mcall	r6[68]
80009b22:	14 98       	mov	r8,r10
80009b24:	16 99       	mov	r9,r11
80009b26:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
80009b2a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b2e:	ec fa 00 18 	ld.w	r10,r6[24]
80009b32:	12 98       	mov	r8,r9
80009b34:	a3 78       	lsl	r8,0x3
80009b36:	12 08       	add	r8,r9
80009b38:	a3 78       	lsl	r8,0x3
80009b3a:	f4 08 00 08 	add	r8,r10,r8
80009b3e:	2e 08       	sub	r8,-32
80009b40:	f0 ea 00 00 	ld.d	r10,r8[0]
80009b44:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b48:	ec f8 01 68 	ld.w	r8,r6[360]
80009b4c:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009b50:	f0 16 00 05 	mcall	r6[20]
80009b54:	14 98       	mov	r8,r10
80009b56:	16 99       	mov	r9,r11
80009b58:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
80009b5c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b60:	ec fa 00 18 	ld.w	r10,r6[24]
80009b64:	12 98       	mov	r8,r9
80009b66:	a3 78       	lsl	r8,0x3
80009b68:	12 08       	add	r8,r9
80009b6a:	2f f8       	sub	r8,-1
80009b6c:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009b70:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009b74:	f0 16 00 0c 	mcall	r6[48]
80009b78:	14 98       	mov	r8,r10
80009b7a:	16 99       	mov	r9,r11
80009b7c:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
80009b80:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b84:	ec fa 00 18 	ld.w	r10,r6[24]
80009b88:	12 98       	mov	r8,r9
80009b8a:	a3 78       	lsl	r8,0x3
80009b8c:	12 08       	add	r8,r9
80009b8e:	a3 78       	lsl	r8,0x3
80009b90:	f4 08 00 08 	add	r8,r10,r8
80009b94:	2e 08       	sub	r8,-32
80009b96:	f0 ea 00 00 	ld.d	r10,r8[0]
80009b9a:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009b9e:	f0 16 00 0c 	mcall	r6[48]
80009ba2:	14 98       	mov	r8,r10
80009ba4:	16 99       	mov	r9,r11
80009ba6:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
80009baa:	ec f8 00 00 	ld.w	r8,r6[0]
80009bae:	70 08       	ld.w	r8,r8[0x0]
80009bb0:	ef 48 ff 98 	st.w	r7[-104],r8
80009bb4:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009bb8:	ec f8 00 00 	ld.w	r8,r6[0]
80009bbc:	70 0a       	ld.w	r10,r8[0x0]
80009bbe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009bc2:	12 98       	mov	r8,r9
80009bc4:	a1 78       	lsl	r8,0x1
80009bc6:	12 08       	add	r8,r9
80009bc8:	a3 78       	lsl	r8,0x3
80009bca:	f4 08 00 08 	add	r8,r10,r8
80009bce:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009bd2:	f0 e2 00 00 	ld.d	r2,r8[0]
80009bd6:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009bda:	ee ea ff d0 	ld.d	r10,r7[-48]
80009bde:	f0 16 00 03 	mcall	r6[12]
80009be2:	14 98       	mov	r8,r10
80009be4:	16 99       	mov	r9,r11
80009be6:	04 9a       	mov	r10,r2
80009be8:	06 9b       	mov	r11,r3
80009bea:	f0 16 00 05 	mcall	r6[20]
80009bee:	14 98       	mov	r8,r10
80009bf0:	16 99       	mov	r9,r11
80009bf2:	10 9a       	mov	r10,r8
80009bf4:	12 9b       	mov	r11,r9
80009bf6:	0a 98       	mov	r8,r5
80009bf8:	a1 78       	lsl	r8,0x1
80009bfa:	0a 08       	add	r8,r5
80009bfc:	a3 78       	lsl	r8,0x3
80009bfe:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009c02:	f2 08 00 08 	add	r8,r9,r8
80009c06:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009c0a:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
80009c0e:	ec f8 00 00 	ld.w	r8,r6[0]
80009c12:	70 08       	ld.w	r8,r8[0x0]
80009c14:	ef 48 ff 9c 	st.w	r7[-100],r8
80009c18:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009c1c:	ec f8 00 00 	ld.w	r8,r6[0]
80009c20:	70 0a       	ld.w	r10,r8[0x0]
80009c22:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c26:	12 98       	mov	r8,r9
80009c28:	a1 78       	lsl	r8,0x1
80009c2a:	12 08       	add	r8,r9
80009c2c:	2f f8       	sub	r8,-1
80009c2e:	a3 78       	lsl	r8,0x3
80009c30:	f4 08 00 08 	add	r8,r10,r8
80009c34:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009c38:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009c3c:	ee ea ff d8 	ld.d	r10,r7[-40]
80009c40:	f0 16 00 03 	mcall	r6[12]
80009c44:	14 98       	mov	r8,r10
80009c46:	16 99       	mov	r9,r11
80009c48:	04 9a       	mov	r10,r2
80009c4a:	06 9b       	mov	r11,r3
80009c4c:	f0 16 00 05 	mcall	r6[20]
80009c50:	14 98       	mov	r8,r10
80009c52:	16 99       	mov	r9,r11
80009c54:	10 9a       	mov	r10,r8
80009c56:	12 9b       	mov	r11,r9
80009c58:	0a 98       	mov	r8,r5
80009c5a:	a1 78       	lsl	r8,0x1
80009c5c:	0a 08       	add	r8,r5
80009c5e:	2f f8       	sub	r8,-1
80009c60:	a3 78       	lsl	r8,0x3
80009c62:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009c66:	f2 08 00 08 	add	r8,r9,r8
80009c6a:	f0 eb 0b 5c 	st.d	r8[2908],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80009c6e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009c72:	10 99       	mov	r9,r8
80009c74:	ee 19 80 00 	eorh	r9,0x8000
80009c78:	ef 49 ff a0 	st.w	r7[-96],r9
80009c7c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009c80:	ef 48 ff a4 	st.w	r7[-92],r8
80009c84:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c88:	ec fa 00 18 	ld.w	r10,r6[24]
80009c8c:	12 98       	mov	r8,r9
80009c8e:	a3 78       	lsl	r8,0x3
80009c90:	12 08       	add	r8,r9
80009c92:	a3 78       	lsl	r8,0x3
80009c94:	f4 08 00 08 	add	r8,r10,r8
80009c98:	2e 88       	sub	r8,-24
80009c9a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c9e:	ee ea ff a0 	ld.d	r10,r7[-96]
80009ca2:	f0 16 00 03 	mcall	r6[12]
80009ca6:	14 98       	mov	r8,r10
80009ca8:	16 99       	mov	r9,r11
80009caa:	10 9a       	mov	r10,r8
80009cac:	12 9b       	mov	r11,r9
80009cae:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cb2:	ec fc 00 18 	ld.w	r12,r6[24]
80009cb6:	12 98       	mov	r8,r9
80009cb8:	a3 78       	lsl	r8,0x3
80009cba:	12 08       	add	r8,r9
80009cbc:	a3 78       	lsl	r8,0x3
80009cbe:	f8 08 00 08 	add	r8,r12,r8
80009cc2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009cc6:	f0 16 00 05 	mcall	r6[20]
80009cca:	14 98       	mov	r8,r10
80009ccc:	16 99       	mov	r9,r11
80009cce:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80009cd2:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009cd6:	10 99       	mov	r9,r8
80009cd8:	ee 19 80 00 	eorh	r9,0x8000
80009cdc:	ef 49 ff a8 	st.w	r7[-88],r9
80009ce0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009ce4:	ef 48 ff ac 	st.w	r7[-84],r8
80009ce8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cec:	ec fa 00 18 	ld.w	r10,r6[24]
80009cf0:	12 98       	mov	r8,r9
80009cf2:	a3 78       	lsl	r8,0x3
80009cf4:	12 08       	add	r8,r9
80009cf6:	a3 78       	lsl	r8,0x3
80009cf8:	f4 08 00 08 	add	r8,r10,r8
80009cfc:	2e 08       	sub	r8,-32
80009cfe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d02:	ee ea ff a8 	ld.d	r10,r7[-88]
80009d06:	f0 16 00 03 	mcall	r6[12]
80009d0a:	14 98       	mov	r8,r10
80009d0c:	16 99       	mov	r9,r11
80009d0e:	10 9a       	mov	r10,r8
80009d10:	12 9b       	mov	r11,r9
80009d12:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d16:	ec fc 00 18 	ld.w	r12,r6[24]
80009d1a:	12 98       	mov	r8,r9
80009d1c:	a3 78       	lsl	r8,0x3
80009d1e:	12 08       	add	r8,r9
80009d20:	2f f8       	sub	r8,-1
80009d22:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009d26:	f0 16 00 05 	mcall	r6[20]
80009d2a:	14 98       	mov	r8,r10
80009d2c:	16 99       	mov	r9,r11
80009d2e:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
80009d32:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009d36:	30 0a       	mov	r10,0
80009d38:	fc 1b 3f f0 	movh	r11,0x3ff0
80009d3c:	f0 16 00 11 	mcall	r6[68]
80009d40:	14 98       	mov	r8,r10
80009d42:	16 99       	mov	r9,r11
80009d44:	10 9a       	mov	r10,r8
80009d46:	12 9b       	mov	r11,r9
80009d48:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d4c:	ec fc 00 18 	ld.w	r12,r6[24]
80009d50:	12 98       	mov	r8,r9
80009d52:	a3 78       	lsl	r8,0x3
80009d54:	12 08       	add	r8,r9
80009d56:	a3 78       	lsl	r8,0x3
80009d58:	f8 08 00 08 	add	r8,r12,r8
80009d5c:	2e 88       	sub	r8,-24
80009d5e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d62:	f0 16 00 03 	mcall	r6[12]
80009d66:	14 98       	mov	r8,r10
80009d68:	16 99       	mov	r9,r11
80009d6a:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
80009d6e:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009d72:	30 0a       	mov	r10,0
80009d74:	fc 1b 3f f0 	movh	r11,0x3ff0
80009d78:	f0 16 00 11 	mcall	r6[68]
80009d7c:	14 98       	mov	r8,r10
80009d7e:	16 99       	mov	r9,r11
80009d80:	10 9a       	mov	r10,r8
80009d82:	12 9b       	mov	r11,r9
80009d84:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d88:	ec fc 00 18 	ld.w	r12,r6[24]
80009d8c:	12 98       	mov	r8,r9
80009d8e:	a3 78       	lsl	r8,0x3
80009d90:	12 08       	add	r8,r9
80009d92:	a3 78       	lsl	r8,0x3
80009d94:	f8 08 00 08 	add	r8,r12,r8
80009d98:	2e 08       	sub	r8,-32
80009d9a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d9e:	f0 16 00 03 	mcall	r6[12]
80009da2:	14 98       	mov	r8,r10
80009da4:	16 99       	mov	r9,r11
80009da6:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
80009daa:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dae:	ec fa 00 18 	ld.w	r10,r6[24]
80009db2:	12 98       	mov	r8,r9
80009db4:	a3 78       	lsl	r8,0x3
80009db6:	12 08       	add	r8,r9
80009db8:	a3 78       	lsl	r8,0x3
80009dba:	10 0a       	add	r10,r8
80009dbc:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009dc0:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
80009dc4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dc8:	ec fa 00 18 	ld.w	r10,r6[24]
80009dcc:	12 98       	mov	r8,r9
80009dce:	a3 78       	lsl	r8,0x3
80009dd0:	12 08       	add	r8,r9
80009dd2:	f0 cb ff ff 	sub	r11,r8,-1
80009dd6:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009dda:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
80009dde:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009de2:	ec fa 00 18 	ld.w	r10,r6[24]
80009de6:	12 98       	mov	r8,r9
80009de8:	a3 78       	lsl	r8,0x3
80009dea:	12 08       	add	r8,r9
80009dec:	a3 78       	lsl	r8,0x3
80009dee:	f4 08 00 08 	add	r8,r10,r8
80009df2:	f0 ca ff e8 	sub	r10,r8,-24
80009df6:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009dfa:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
80009dfe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e02:	ec fa 00 18 	ld.w	r10,r6[24]
80009e06:	12 98       	mov	r8,r9
80009e08:	a3 78       	lsl	r8,0x3
80009e0a:	12 08       	add	r8,r9
80009e0c:	a3 78       	lsl	r8,0x3
80009e0e:	f4 08 00 08 	add	r8,r10,r8
80009e12:	f0 ca ff e0 	sub	r10,r8,-32
80009e16:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009e1a:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
80009e1e:	ec f8 00 00 	ld.w	r8,r6[0]
80009e22:	70 08       	ld.w	r8,r8[0x0]
80009e24:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e28:	f2 c9 fc a3 	sub	r9,r9,-861
80009e2c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009e30:	ee f9 ff b8 	ld.w	r9,r7[-72]
80009e34:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009e38:	10 9c       	mov	r12,r8
80009e3a:	f0 16 00 02 	mcall	r6[8]
80009e3e:	14 98       	mov	r8,r10
80009e40:	16 99       	mov	r9,r11
80009e42:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
80009e46:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e4a:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e4e:	12 98       	mov	r8,r9
80009e50:	a3 78       	lsl	r8,0x3
80009e52:	12 08       	add	r8,r9
80009e54:	a3 78       	lsl	r8,0x3
80009e56:	f4 08 00 08 	add	r8,r10,r8
80009e5a:	2e 08       	sub	r8,-32
80009e5c:	f0 ea 00 00 	ld.d	r10,r8[0]
80009e60:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e64:	ec f8 01 64 	ld.w	r8,r6[356]
80009e68:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009e6c:	f0 16 00 05 	mcall	r6[20]
80009e70:	14 98       	mov	r8,r10
80009e72:	16 99       	mov	r9,r11
80009e74:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
80009e78:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e7c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009e80:	12 98       	mov	r8,r9
80009e82:	a3 78       	lsl	r8,0x3
80009e84:	12 08       	add	r8,r9
80009e86:	2f f8       	sub	r8,-1
80009e88:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009e8c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009e90:	f0 16 00 0c 	mcall	r6[48]
80009e94:	14 98       	mov	r8,r10
80009e96:	16 99       	mov	r9,r11
80009e98:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
80009e9c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ea0:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ea4:	12 98       	mov	r8,r9
80009ea6:	a3 78       	lsl	r8,0x3
80009ea8:	12 08       	add	r8,r9
80009eaa:	a3 78       	lsl	r8,0x3
80009eac:	f4 08 00 08 	add	r8,r10,r8
80009eb0:	2e 08       	sub	r8,-32
80009eb2:	f0 ea 00 00 	ld.d	r10,r8[0]
80009eb6:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009eba:	f0 16 00 0c 	mcall	r6[48]
80009ebe:	14 98       	mov	r8,r10
80009ec0:	16 99       	mov	r9,r11
80009ec2:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009ec6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009eca:	10 99       	mov	r9,r8
80009ecc:	ee 19 80 00 	eorh	r9,0x8000
80009ed0:	ef 49 ff b0 	st.w	r7[-80],r9
80009ed4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009ed8:	ef 48 ff b4 	st.w	r7[-76],r8
80009edc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ee0:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ee4:	12 98       	mov	r8,r9
80009ee6:	a3 78       	lsl	r8,0x3
80009ee8:	12 08       	add	r8,r9
80009eea:	a3 78       	lsl	r8,0x3
80009eec:	f4 08 00 08 	add	r8,r10,r8
80009ef0:	2e 88       	sub	r8,-24
80009ef2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009ef6:	ee ea ff b0 	ld.d	r10,r7[-80]
80009efa:	f0 16 00 03 	mcall	r6[12]
80009efe:	14 98       	mov	r8,r10
80009f00:	16 99       	mov	r9,r11
80009f02:	10 9a       	mov	r10,r8
80009f04:	12 9b       	mov	r11,r9
80009f06:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f0a:	ec fc 00 1c 	ld.w	r12,r6[28]
80009f0e:	12 98       	mov	r8,r9
80009f10:	a3 78       	lsl	r8,0x3
80009f12:	12 08       	add	r8,r9
80009f14:	a3 78       	lsl	r8,0x3
80009f16:	f8 08 00 08 	add	r8,r12,r8
80009f1a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f1e:	f0 16 00 05 	mcall	r6[20]
80009f22:	14 98       	mov	r8,r10
80009f24:	16 99       	mov	r9,r11
80009f26:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009f2a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009f2e:	10 91       	mov	r1,r8
80009f30:	ee 11 80 00 	eorh	r1,0x8000
80009f34:	ee f0 ff d4 	ld.w	r0,r7[-44]
80009f38:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f3c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009f40:	12 98       	mov	r8,r9
80009f42:	a3 78       	lsl	r8,0x3
80009f44:	12 08       	add	r8,r9
80009f46:	a3 78       	lsl	r8,0x3
80009f48:	f4 08 00 08 	add	r8,r10,r8
80009f4c:	2e 08       	sub	r8,-32
80009f4e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f52:	00 9a       	mov	r10,r0
80009f54:	02 9b       	mov	r11,r1
80009f56:	f0 16 00 03 	mcall	r6[12]
80009f5a:	14 98       	mov	r8,r10
80009f5c:	16 99       	mov	r9,r11
80009f5e:	10 9a       	mov	r10,r8
80009f60:	12 9b       	mov	r11,r9
80009f62:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f66:	ec fc 00 1c 	ld.w	r12,r6[28]
80009f6a:	12 98       	mov	r8,r9
80009f6c:	a3 78       	lsl	r8,0x3
80009f6e:	12 08       	add	r8,r9
80009f70:	2f f8       	sub	r8,-1
80009f72:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009f76:	f0 16 00 05 	mcall	r6[20]
80009f7a:	14 98       	mov	r8,r10
80009f7c:	16 99       	mov	r9,r11
80009f7e:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
80009f82:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009f86:	30 0a       	mov	r10,0
80009f88:	fc 1b 3f f0 	movh	r11,0x3ff0
80009f8c:	f0 16 00 11 	mcall	r6[68]
80009f90:	14 98       	mov	r8,r10
80009f92:	16 99       	mov	r9,r11
80009f94:	10 9a       	mov	r10,r8
80009f96:	12 9b       	mov	r11,r9
80009f98:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f9c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009fa0:	12 98       	mov	r8,r9
80009fa2:	a3 78       	lsl	r8,0x3
80009fa4:	12 08       	add	r8,r9
80009fa6:	a3 78       	lsl	r8,0x3
80009fa8:	f8 08 00 08 	add	r8,r12,r8
80009fac:	2e 88       	sub	r8,-24
80009fae:	f0 e8 00 00 	ld.d	r8,r8[0]
80009fb2:	f0 16 00 03 	mcall	r6[12]
80009fb6:	14 98       	mov	r8,r10
80009fb8:	16 99       	mov	r9,r11
80009fba:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
80009fbe:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009fc2:	30 0a       	mov	r10,0
80009fc4:	fc 1b 3f f0 	movh	r11,0x3ff0
80009fc8:	f0 16 00 11 	mcall	r6[68]
80009fcc:	14 98       	mov	r8,r10
80009fce:	16 99       	mov	r9,r11
80009fd0:	10 9a       	mov	r10,r8
80009fd2:	12 9b       	mov	r11,r9
80009fd4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fd8:	ec fc 00 1c 	ld.w	r12,r6[28]
80009fdc:	12 98       	mov	r8,r9
80009fde:	a3 78       	lsl	r8,0x3
80009fe0:	12 08       	add	r8,r9
80009fe2:	a3 78       	lsl	r8,0x3
80009fe4:	f8 08 00 08 	add	r8,r12,r8
80009fe8:	2e 08       	sub	r8,-32
80009fea:	f0 e8 00 00 	ld.d	r8,r8[0]
80009fee:	f0 16 00 03 	mcall	r6[12]
80009ff2:	14 98       	mov	r8,r10
80009ff4:	16 99       	mov	r9,r11
80009ff6:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
80009ffa:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ffe:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a002:	12 98       	mov	r8,r9
8000a004:	a3 78       	lsl	r8,0x3
8000a006:	12 08       	add	r8,r9
8000a008:	a3 78       	lsl	r8,0x3
8000a00a:	10 0a       	add	r10,r8
8000a00c:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a010:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a014:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a018:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a01c:	12 98       	mov	r8,r9
8000a01e:	a3 78       	lsl	r8,0x3
8000a020:	12 08       	add	r8,r9
8000a022:	f0 cb ff ff 	sub	r11,r8,-1
8000a026:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a02a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a02e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a032:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a036:	12 98       	mov	r8,r9
8000a038:	a3 78       	lsl	r8,0x3
8000a03a:	12 08       	add	r8,r9
8000a03c:	a3 78       	lsl	r8,0x3
8000a03e:	f4 08 00 08 	add	r8,r10,r8
8000a042:	f0 ca ff e8 	sub	r10,r8,-24
8000a046:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a04a:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a04e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a052:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a056:	12 98       	mov	r8,r9
8000a058:	a3 78       	lsl	r8,0x3
8000a05a:	12 08       	add	r8,r9
8000a05c:	a3 78       	lsl	r8,0x3
8000a05e:	f4 08 00 08 	add	r8,r10,r8
8000a062:	f0 ca ff e0 	sub	r10,r8,-32
8000a066:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a06a:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a06e:	2e 6d       	sub	sp,-104
8000a070:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a074:	80 00       	ld.sh	r0,r0[0x0]
8000a076:	99 74       	st.w	r12[0x1c],r4

8000a078 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a078:	eb cd 40 e0 	pushm	r5-r7,lr
8000a07c:	1a 97       	mov	r7,sp
8000a07e:	21 dd       	sub	sp,116
8000a080:	fe f6 02 00 	ld.w	r6,pc[512]
8000a084:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a086:	ec f8 00 00 	ld.w	r8,r6[0]
8000a08a:	70 08       	ld.w	r8,r8[0x0]
8000a08c:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a090:	ec 18 00 01 	eorl	r8,0x1
8000a094:	5c 58       	castu.b	r8
8000a096:	c0 30       	breq	8000a09c <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a098:	f0 16 01 14 	mcall	r6[1104]
	}

	if(!filter_init_delta_t)
8000a09c:	ec f8 02 d4 	ld.w	r8,r6[724]
8000a0a0:	11 88       	ld.ub	r8,r8[0x0]
8000a0a2:	ec 18 00 01 	eorl	r8,0x1
8000a0a6:	5c 58       	castu.b	r8
8000a0a8:	c0 c0       	breq	8000a0c0 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a0aa:	ec f9 02 d4 	ld.w	r9,r6[724]
8000a0ae:	30 18       	mov	r8,1
8000a0b0:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a0b2:	f0 16 00 29 	mcall	r6[164]
8000a0b6:	18 99       	mov	r9,r12
8000a0b8:	ec f8 02 d0 	ld.w	r8,r6[720]
8000a0bc:	91 09       	st.w	r8[0x0],r9
8000a0be:	cd e8       	rjmp	8000a27a <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a0c0:	f0 16 00 29 	mcall	r6[164]
8000a0c4:	18 98       	mov	r8,r12
8000a0c6:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a0ca:	ec f8 00 00 	ld.w	r8,r6[0]
8000a0ce:	70 08       	ld.w	r8,r8[0x0]
8000a0d0:	ec f9 02 d0 	ld.w	r9,r6[720]
8000a0d4:	72 09       	ld.w	r9,r9[0x0]
8000a0d6:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a0da:	f4 09 01 09 	sub	r9,r10,r9
8000a0de:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a0e2:	f1 49 0b a4 	st.w	r8[2980],r9
		prev_time = actual_time;
8000a0e6:	ec f8 02 d0 	ld.w	r8,r6[720]
8000a0ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a0ee:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a0f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000a0f4:	70 05       	ld.w	r5,r8[0x0]
8000a0f6:	ec f8 00 00 	ld.w	r8,r6[0]
8000a0fa:	70 08       	ld.w	r8,r8[0x0]
8000a0fc:	f0 f8 0b a4 	ld.w	r8,r8[2980]
8000a100:	e0 6b 24 00 	mov	r11,9216
8000a104:	ea 1b 49 74 	orh	r11,0x4974
8000a108:	10 9c       	mov	r12,r8
8000a10a:	f0 16 00 0a 	mcall	r6[40]
8000a10e:	18 98       	mov	r8,r12
8000a110:	eb 48 0b a4 	st.w	r5[2980],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a114:	ec f8 00 00 	ld.w	r8,r6[0]
8000a118:	70 08       	ld.w	r8,r8[0x0]
8000a11a:	f0 fa 0b a4 	ld.w	r10,r8[2980]
8000a11e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a122:	70 08       	ld.w	r8,r8[0x0]
8000a124:	f0 c9 ff 40 	sub	r9,r8,-192
8000a128:	ec f8 00 00 	ld.w	r8,r6[0]
8000a12c:	70 08       	ld.w	r8,r8[0x0]
8000a12e:	12 9b       	mov	r11,r9
8000a130:	10 9c       	mov	r12,r8
8000a132:	f0 16 01 db 	mcall	r6[1900]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a136:	ec fc 02 90 	ld.w	r12,r6[656]
8000a13a:	f0 16 00 94 	mcall	r6[592]
8000a13e:	18 98       	mov	r8,r12
8000a140:	58 08       	cp.w	r8,0
8000a142:	e0 80 00 9c 	breq	8000a27a <estimator_loop+0x202>
8000a146:	ec f8 00 00 	ld.w	r8,r6[0]
8000a14a:	70 08       	ld.w	r8,r8[0x0]
8000a14c:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a150:	58 08       	cp.w	r8,0
8000a152:	e0 80 00 94 	breq	8000a27a <estimator_loop+0x202>
8000a156:	ec f8 00 00 	ld.w	r8,r6[0]
8000a15a:	70 08       	ld.w	r8,r8[0x0]
8000a15c:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8000a160:	58 08       	cp.w	r8,0
8000a162:	e0 81 00 8c 	brne	8000a27a <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a166:	ec f8 00 00 	ld.w	r8,r6[0]
8000a16a:	70 08       	ld.w	r8,r8[0x0]
8000a16c:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000a170:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a174:	ec f8 00 00 	ld.w	r8,r6[0]
8000a178:	70 08       	ld.w	r8,r8[0x0]
8000a17a:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000a17e:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a182:	ec f8 00 00 	ld.w	r8,r6[0]
8000a186:	70 08       	ld.w	r8,r8[0x0]
8000a188:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000a18c:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a190:	ec f8 00 00 	ld.w	r8,r6[0]
8000a194:	70 08       	ld.w	r8,r8[0x0]
8000a196:	ee cc 00 74 	sub	r12,r7,116
8000a19a:	20 7d       	sub	sp,28
8000a19c:	1a 99       	mov	r9,sp
8000a19e:	12 9a       	mov	r10,r9
8000a1a0:	f0 cb f2 54 	sub	r11,r8,-3500
8000a1a4:	f4 c8 00 00 	sub	r8,r10,0
8000a1a8:	f6 c9 00 00 	sub	r9,r11,0
8000a1ac:	72 0e       	ld.w	lr,r9[0x0]
8000a1ae:	91 0e       	st.w	r8[0x0],lr
8000a1b0:	72 1e       	ld.w	lr,r9[0x4]
8000a1b2:	91 1e       	st.w	r8[0x4],lr
8000a1b4:	72 2e       	ld.w	lr,r9[0x8]
8000a1b6:	91 2e       	st.w	r8[0x8],lr
8000a1b8:	72 39       	ld.w	r9,r9[0xc]
8000a1ba:	91 39       	st.w	r8[0xc],r9
8000a1bc:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a1c0:	f4 e9 00 10 	st.d	r10[16],r8
8000a1c4:	76 68       	ld.w	r8,r11[0x18]
8000a1c6:	95 68       	st.w	r10[0x18],r8
8000a1c8:	20 7d       	sub	sp,28
8000a1ca:	1a 98       	mov	r8,sp
8000a1cc:	10 9a       	mov	r10,r8
8000a1ce:	ee cb 00 44 	sub	r11,r7,68
8000a1d2:	f4 c8 00 00 	sub	r8,r10,0
8000a1d6:	f6 c9 00 00 	sub	r9,r11,0
8000a1da:	72 0e       	ld.w	lr,r9[0x0]
8000a1dc:	91 0e       	st.w	r8[0x0],lr
8000a1de:	72 1e       	ld.w	lr,r9[0x4]
8000a1e0:	91 1e       	st.w	r8[0x4],lr
8000a1e2:	72 2e       	ld.w	lr,r9[0x8]
8000a1e4:	91 2e       	st.w	r8[0x8],lr
8000a1e6:	72 39       	ld.w	r9,r9[0xc]
8000a1e8:	91 39       	st.w	r8[0xc],r9
8000a1ea:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a1ee:	f4 e9 00 10 	st.d	r10[16],r8
8000a1f2:	76 68       	ld.w	r8,r11[0x18]
8000a1f4:	95 68       	st.w	r10[0x18],r8
8000a1f6:	f0 16 00 7a 	mcall	r6[488]
8000a1fa:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a1fc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a200:	10 9c       	mov	r12,r8
8000a202:	f0 16 00 02 	mcall	r6[8]
8000a206:	14 98       	mov	r8,r10
8000a208:	16 99       	mov	r9,r11
8000a20a:	10 9a       	mov	r10,r8
8000a20c:	12 9b       	mov	r11,r9
8000a20e:	30 0c       	mov	r12,0
8000a210:	f0 16 00 cc 	mcall	r6[816]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000a214:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000a218:	10 9c       	mov	r12,r8
8000a21a:	f0 16 00 02 	mcall	r6[8]
8000a21e:	14 98       	mov	r8,r10
8000a220:	16 99       	mov	r9,r11
8000a222:	10 9a       	mov	r10,r8
8000a224:	12 9b       	mov	r11,r9
8000a226:	30 1c       	mov	r12,1
8000a228:	f0 16 00 cc 	mcall	r6[816]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000a22c:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a230:	10 9c       	mov	r12,r8
8000a232:	f0 16 00 02 	mcall	r6[8]
8000a236:	14 98       	mov	r8,r10
8000a238:	16 99       	mov	r9,r11
8000a23a:	10 9a       	mov	r10,r8
8000a23c:	12 9b       	mov	r11,r9
8000a23e:	30 2c       	mov	r12,2
8000a240:	f0 16 00 cc 	mcall	r6[816]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000a244:	ec f8 00 00 	ld.w	r8,r6[0]
8000a248:	70 08       	ld.w	r8,r8[0x0]
8000a24a:	f0 f8 0b 28 	ld.w	r8,r8[2856]
8000a24e:	10 9b       	mov	r11,r8
8000a250:	30 0c       	mov	r12,0
8000a252:	f0 16 00 a8 	mcall	r6[672]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000a256:	ec f8 00 00 	ld.w	r8,r6[0]
8000a25a:	70 08       	ld.w	r8,r8[0x0]
8000a25c:	f0 f8 0b 2c 	ld.w	r8,r8[2860]
8000a260:	10 9b       	mov	r11,r8
8000a262:	30 1c       	mov	r12,1
8000a264:	f0 16 00 a8 	mcall	r6[672]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000a268:	ec f8 00 00 	ld.w	r8,r6[0]
8000a26c:	70 08       	ld.w	r8,r8[0x0]
8000a26e:	f0 f8 0b 30 	ld.w	r8,r8[2864]
8000a272:	10 9b       	mov	r11,r8
8000a274:	30 2c       	mov	r12,2
8000a276:	f0 16 00 a8 	mcall	r6[672]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000a27a:	2e 3d       	sub	sp,-116
8000a27c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a280:	80 00       	ld.sh	r0,r0[0x0]
8000a282:	9f 08       	st.w	pc[0x0],r8

8000a284 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a284:	eb cd 40 80 	pushm	r7,lr
8000a288:	1a 97       	mov	r7,sp
8000a28a:	20 3d       	sub	sp,12
8000a28c:	ef 4c ff f8 	st.w	r7[-8],r12
8000a290:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a294:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a298:	70 09       	ld.w	r9,r8[0x0]
8000a29a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a29e:	70 08       	ld.w	r8,r8[0x0]
8000a2a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a2a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a2a8:	2f c8       	sub	r8,-4
8000a2aa:	70 0a       	ld.w	r10,r8[0x0]
8000a2ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a2b0:	2f c8       	sub	r8,-4
8000a2b2:	70 08       	ld.w	r8,r8[0x0]
8000a2b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a2b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a2bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a2c0:	2f 88       	sub	r8,-8
8000a2c2:	70 0a       	ld.w	r10,r8[0x0]
8000a2c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a2c8:	2f 88       	sub	r8,-8
8000a2ca:	70 08       	ld.w	r8,r8[0x0]
8000a2cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a2d0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a2d4:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a2d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a2dc:	10 9c       	mov	r12,r8
8000a2de:	2f dd       	sub	sp,-12
8000a2e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a2e4 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a2e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a2e8:	1a 97       	mov	r7,sp
8000a2ea:	20 7d       	sub	sp,28
8000a2ec:	4b d6       	lddpc	r6,8000a3e0 <quat_multi+0xfc>
8000a2ee:	1e 26       	rsub	r6,pc
8000a2f0:	ee c8 ff ec 	sub	r8,r7,-20
8000a2f4:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a2f6:	70 2a       	ld.w	r10,r8[0x8]
8000a2f8:	70 79       	ld.w	r9,r8[0x1c]
8000a2fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a2fe:	70 3b       	ld.w	r11,r8[0xc]
8000a300:	70 69       	ld.w	r9,r8[0x18]
8000a302:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a306:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a30a:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000a30e:	70 3a       	ld.w	r10,r8[0xc]
8000a310:	70 59       	ld.w	r9,r8[0x14]
8000a312:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a316:	70 1b       	ld.w	r11,r8[0x4]
8000a318:	70 79       	ld.w	r9,r8[0x1c]
8000a31a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a31e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a322:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000a326:	70 1a       	ld.w	r10,r8[0x4]
8000a328:	70 69       	ld.w	r9,r8[0x18]
8000a32a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a32e:	70 2b       	ld.w	r11,r8[0x8]
8000a330:	70 59       	ld.w	r9,r8[0x14]
8000a332:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a336:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a33a:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000a33e:	70 4a       	ld.w	r10,r8[0x10]
8000a340:	70 19       	ld.w	r9,r8[0x4]
8000a342:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a346:	70 0b       	ld.w	r11,r8[0x0]
8000a348:	70 59       	ld.w	r9,r8[0x14]
8000a34a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a34e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a352:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a356:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a35a:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000a35e:	70 4a       	ld.w	r10,r8[0x10]
8000a360:	70 29       	ld.w	r9,r8[0x8]
8000a362:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a366:	70 0b       	ld.w	r11,r8[0x0]
8000a368:	70 69       	ld.w	r9,r8[0x18]
8000a36a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a36e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a372:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a376:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a37a:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000a37e:	70 4a       	ld.w	r10,r8[0x10]
8000a380:	70 39       	ld.w	r9,r8[0xc]
8000a382:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a386:	70 0b       	ld.w	r11,r8[0x0]
8000a388:	70 79       	ld.w	r9,r8[0x1c]
8000a38a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a38e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a392:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a396:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a39a:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000a39e:	70 0a       	ld.w	r10,r8[0x0]
8000a3a0:	70 49       	ld.w	r9,r8[0x10]
8000a3a2:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000a3a6:	f0 c9 ff f0 	sub	r9,r8,-16
8000a3aa:	2f c9       	sub	r9,-4
8000a3ac:	2f c8       	sub	r8,-4
8000a3ae:	12 9b       	mov	r11,r9
8000a3b0:	10 9c       	mov	r12,r8
8000a3b2:	c6 9f       	rcall	8000a284 <scalar_product>
8000a3b4:	18 98       	mov	r8,r12
8000a3b6:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000a3ba:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000a3be:	0a 98       	mov	r8,r5
8000a3c0:	ee c9 00 1c 	sub	r9,r7,28
8000a3c4:	20 08       	sub	r8,0
8000a3c6:	20 09       	sub	r9,0
8000a3c8:	72 0a       	ld.w	r10,r9[0x0]
8000a3ca:	91 0a       	st.w	r8[0x0],r10
8000a3cc:	72 1a       	ld.w	r10,r9[0x4]
8000a3ce:	91 1a       	st.w	r8[0x4],r10
8000a3d0:	72 2a       	ld.w	r10,r9[0x8]
8000a3d2:	91 2a       	st.w	r8[0x8],r10
8000a3d4:	72 39       	ld.w	r9,r9[0xc]
8000a3d6:	91 39       	st.w	r8[0xc],r9
}
8000a3d8:	0a 9c       	mov	r12,r5
8000a3da:	2f 9d       	sub	sp,-28
8000a3dc:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a3e0:	80 00       	ld.sh	r0,r0[0x0]
8000a3e2:	a1 72       	lsl	r2,0x1

8000a3e4 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000a3e4:	eb cd 40 80 	pushm	r7,lr
8000a3e8:	1a 97       	mov	r7,sp
8000a3ea:	20 5d       	sub	sp,20
8000a3ec:	ee c9 ff f8 	sub	r9,r7,-8
8000a3f0:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000a3f2:	72 08       	ld.w	r8,r9[0x0]
8000a3f4:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000a3f8:	30 08       	mov	r8,0
8000a3fa:	ef 48 ff fc 	st.w	r7[-4],r8
8000a3fe:	c1 58       	rjmp	8000a428 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000a400:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a404:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a408:	2f fb       	sub	r11,-1
8000a40a:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000a40e:	ee 1b 80 00 	eorh	r11,0x8000
8000a412:	2f f8       	sub	r8,-1
8000a414:	a3 68       	lsl	r8,0x2
8000a416:	ee 08 00 08 	add	r8,r7,r8
8000a41a:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000a41e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a422:	2f f8       	sub	r8,-1
8000a424:	ef 48 ff fc 	st.w	r7[-4],r8
8000a428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a42c:	58 28       	cp.w	r8,2
8000a42e:	fe 9a ff e9 	brle	8000a400 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000a432:	14 98       	mov	r8,r10
8000a434:	ee c9 00 14 	sub	r9,r7,20
8000a438:	20 08       	sub	r8,0
8000a43a:	20 09       	sub	r9,0
8000a43c:	72 0b       	ld.w	r11,r9[0x0]
8000a43e:	91 0b       	st.w	r8[0x0],r11
8000a440:	72 1b       	ld.w	r11,r9[0x4]
8000a442:	91 1b       	st.w	r8[0x4],r11
8000a444:	72 2b       	ld.w	r11,r9[0x8]
8000a446:	91 2b       	st.w	r8[0x8],r11
8000a448:	72 39       	ld.w	r9,r9[0xc]
8000a44a:	91 39       	st.w	r8[0xc],r9
}
8000a44c:	14 9c       	mov	r12,r10
8000a44e:	2f bd       	sub	sp,-20
8000a450:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a454 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000a454:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a458:	1a 97       	mov	r7,sp
8000a45a:	20 cd       	sub	sp,48
8000a45c:	4b c6       	lddpc	r6,8000a54c <quat_global_to_local+0xf8>
8000a45e:	1e 26       	rsub	r6,pc
8000a460:	ee c5 ff ec 	sub	r5,r7,-20
8000a464:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a466:	ee ca 00 10 	sub	r10,r7,16
8000a46a:	20 4d       	sub	sp,16
8000a46c:	1a 98       	mov	r8,sp
8000a46e:	0a 99       	mov	r9,r5
8000a470:	20 08       	sub	r8,0
8000a472:	20 09       	sub	r9,0
8000a474:	72 0b       	ld.w	r11,r9[0x0]
8000a476:	91 0b       	st.w	r8[0x0],r11
8000a478:	72 1b       	ld.w	r11,r9[0x4]
8000a47a:	91 1b       	st.w	r8[0x4],r11
8000a47c:	72 2b       	ld.w	r11,r9[0x8]
8000a47e:	91 2b       	st.w	r8[0x8],r11
8000a480:	72 39       	ld.w	r9,r9[0xc]
8000a482:	91 39       	st.w	r8[0xc],r9
8000a484:	14 9c       	mov	r12,r10
8000a486:	ca ff       	rcall	8000a3e4 <quat_inv>
8000a488:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000a48a:	ee ca 00 20 	sub	r10,r7,32
8000a48e:	20 4d       	sub	sp,16
8000a490:	1a 98       	mov	r8,sp
8000a492:	ea c9 ff f0 	sub	r9,r5,-16
8000a496:	20 08       	sub	r8,0
8000a498:	20 09       	sub	r9,0
8000a49a:	72 0b       	ld.w	r11,r9[0x0]
8000a49c:	91 0b       	st.w	r8[0x0],r11
8000a49e:	72 1b       	ld.w	r11,r9[0x4]
8000a4a0:	91 1b       	st.w	r8[0x4],r11
8000a4a2:	72 2b       	ld.w	r11,r9[0x8]
8000a4a4:	91 2b       	st.w	r8[0x8],r11
8000a4a6:	72 39       	ld.w	r9,r9[0xc]
8000a4a8:	91 39       	st.w	r8[0xc],r9
8000a4aa:	20 4d       	sub	sp,16
8000a4ac:	1a 98       	mov	r8,sp
8000a4ae:	ee c9 00 10 	sub	r9,r7,16
8000a4b2:	20 08       	sub	r8,0
8000a4b4:	20 09       	sub	r9,0
8000a4b6:	72 0b       	ld.w	r11,r9[0x0]
8000a4b8:	91 0b       	st.w	r8[0x0],r11
8000a4ba:	72 1b       	ld.w	r11,r9[0x4]
8000a4bc:	91 1b       	st.w	r8[0x4],r11
8000a4be:	72 2b       	ld.w	r11,r9[0x8]
8000a4c0:	91 2b       	st.w	r8[0x8],r11
8000a4c2:	72 39       	ld.w	r9,r9[0xc]
8000a4c4:	91 39       	st.w	r8[0xc],r9
8000a4c6:	14 9c       	mov	r12,r10
8000a4c8:	c0 ef       	rcall	8000a2e4 <quat_multi>
8000a4ca:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000a4cc:	ee ca 00 30 	sub	r10,r7,48
8000a4d0:	20 4d       	sub	sp,16
8000a4d2:	1a 98       	mov	r8,sp
8000a4d4:	0a 99       	mov	r9,r5
8000a4d6:	20 08       	sub	r8,0
8000a4d8:	20 09       	sub	r9,0
8000a4da:	72 0b       	ld.w	r11,r9[0x0]
8000a4dc:	91 0b       	st.w	r8[0x0],r11
8000a4de:	72 1b       	ld.w	r11,r9[0x4]
8000a4e0:	91 1b       	st.w	r8[0x4],r11
8000a4e2:	72 2b       	ld.w	r11,r9[0x8]
8000a4e4:	91 2b       	st.w	r8[0x8],r11
8000a4e6:	72 39       	ld.w	r9,r9[0xc]
8000a4e8:	91 39       	st.w	r8[0xc],r9
8000a4ea:	20 4d       	sub	sp,16
8000a4ec:	1a 98       	mov	r8,sp
8000a4ee:	ee c9 00 20 	sub	r9,r7,32
8000a4f2:	20 08       	sub	r8,0
8000a4f4:	20 09       	sub	r9,0
8000a4f6:	72 0b       	ld.w	r11,r9[0x0]
8000a4f8:	91 0b       	st.w	r8[0x0],r11
8000a4fa:	72 1b       	ld.w	r11,r9[0x4]
8000a4fc:	91 1b       	st.w	r8[0x4],r11
8000a4fe:	72 2b       	ld.w	r11,r9[0x8]
8000a500:	91 2b       	st.w	r8[0x8],r11
8000a502:	72 39       	ld.w	r9,r9[0xc]
8000a504:	91 39       	st.w	r8[0xc],r9
8000a506:	14 9c       	mov	r12,r10
8000a508:	ce ee       	rcall	8000a2e4 <quat_multi>
8000a50a:	2f 8d       	sub	sp,-32
8000a50c:	ee c8 00 20 	sub	r8,r7,32
8000a510:	ee c9 00 30 	sub	r9,r7,48
8000a514:	20 08       	sub	r8,0
8000a516:	20 09       	sub	r9,0
8000a518:	72 0a       	ld.w	r10,r9[0x0]
8000a51a:	91 0a       	st.w	r8[0x0],r10
8000a51c:	72 1a       	ld.w	r10,r9[0x4]
8000a51e:	91 1a       	st.w	r8[0x4],r10
8000a520:	72 2a       	ld.w	r10,r9[0x8]
8000a522:	91 2a       	st.w	r8[0x8],r10
8000a524:	72 39       	ld.w	r9,r9[0xc]
8000a526:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000a528:	06 98       	mov	r8,r3
8000a52a:	ee c9 00 20 	sub	r9,r7,32
8000a52e:	20 08       	sub	r8,0
8000a530:	20 09       	sub	r9,0
8000a532:	72 0a       	ld.w	r10,r9[0x0]
8000a534:	91 0a       	st.w	r8[0x0],r10
8000a536:	72 1a       	ld.w	r10,r9[0x4]
8000a538:	91 1a       	st.w	r8[0x4],r10
8000a53a:	72 2a       	ld.w	r10,r9[0x8]
8000a53c:	91 2a       	st.w	r8[0x8],r10
8000a53e:	72 39       	ld.w	r9,r9[0xc]
8000a540:	91 39       	st.w	r8[0xc],r9
}
8000a542:	06 9c       	mov	r12,r3
8000a544:	2f 4d       	sub	sp,-48
8000a546:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a54a:	00 00       	add	r0,r0
8000a54c:	80 00       	ld.sh	r0,r0[0x0]
8000a54e:	a2 e2       	st.b	r1[0x6],r2

8000a550 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000a550:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a554:	1a 97       	mov	r7,sp
8000a556:	20 cd       	sub	sp,48
8000a558:	4b c6       	lddpc	r6,8000a648 <quat_local_to_global+0xf8>
8000a55a:	1e 26       	rsub	r6,pc
8000a55c:	ee c5 ff ec 	sub	r5,r7,-20
8000a560:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a562:	ee ca 00 10 	sub	r10,r7,16
8000a566:	20 4d       	sub	sp,16
8000a568:	1a 98       	mov	r8,sp
8000a56a:	0a 99       	mov	r9,r5
8000a56c:	20 08       	sub	r8,0
8000a56e:	20 09       	sub	r9,0
8000a570:	72 0b       	ld.w	r11,r9[0x0]
8000a572:	91 0b       	st.w	r8[0x0],r11
8000a574:	72 1b       	ld.w	r11,r9[0x4]
8000a576:	91 1b       	st.w	r8[0x4],r11
8000a578:	72 2b       	ld.w	r11,r9[0x8]
8000a57a:	91 2b       	st.w	r8[0x8],r11
8000a57c:	72 39       	ld.w	r9,r9[0xc]
8000a57e:	91 39       	st.w	r8[0xc],r9
8000a580:	14 9c       	mov	r12,r10
8000a582:	c3 1f       	rcall	8000a3e4 <quat_inv>
8000a584:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000a586:	ee ca 00 20 	sub	r10,r7,32
8000a58a:	20 4d       	sub	sp,16
8000a58c:	1a 98       	mov	r8,sp
8000a58e:	ea c9 ff f0 	sub	r9,r5,-16
8000a592:	20 08       	sub	r8,0
8000a594:	20 09       	sub	r9,0
8000a596:	72 0b       	ld.w	r11,r9[0x0]
8000a598:	91 0b       	st.w	r8[0x0],r11
8000a59a:	72 1b       	ld.w	r11,r9[0x4]
8000a59c:	91 1b       	st.w	r8[0x4],r11
8000a59e:	72 2b       	ld.w	r11,r9[0x8]
8000a5a0:	91 2b       	st.w	r8[0x8],r11
8000a5a2:	72 39       	ld.w	r9,r9[0xc]
8000a5a4:	91 39       	st.w	r8[0xc],r9
8000a5a6:	20 4d       	sub	sp,16
8000a5a8:	1a 98       	mov	r8,sp
8000a5aa:	0a 99       	mov	r9,r5
8000a5ac:	20 08       	sub	r8,0
8000a5ae:	20 09       	sub	r9,0
8000a5b0:	72 0b       	ld.w	r11,r9[0x0]
8000a5b2:	91 0b       	st.w	r8[0x0],r11
8000a5b4:	72 1b       	ld.w	r11,r9[0x4]
8000a5b6:	91 1b       	st.w	r8[0x4],r11
8000a5b8:	72 2b       	ld.w	r11,r9[0x8]
8000a5ba:	91 2b       	st.w	r8[0x8],r11
8000a5bc:	72 39       	ld.w	r9,r9[0xc]
8000a5be:	91 39       	st.w	r8[0xc],r9
8000a5c0:	14 9c       	mov	r12,r10
8000a5c2:	c9 1e       	rcall	8000a2e4 <quat_multi>
8000a5c4:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000a5c6:	ee ca 00 30 	sub	r10,r7,48
8000a5ca:	20 4d       	sub	sp,16
8000a5cc:	1a 98       	mov	r8,sp
8000a5ce:	ee c9 00 10 	sub	r9,r7,16
8000a5d2:	20 08       	sub	r8,0
8000a5d4:	20 09       	sub	r9,0
8000a5d6:	72 0b       	ld.w	r11,r9[0x0]
8000a5d8:	91 0b       	st.w	r8[0x0],r11
8000a5da:	72 1b       	ld.w	r11,r9[0x4]
8000a5dc:	91 1b       	st.w	r8[0x4],r11
8000a5de:	72 2b       	ld.w	r11,r9[0x8]
8000a5e0:	91 2b       	st.w	r8[0x8],r11
8000a5e2:	72 39       	ld.w	r9,r9[0xc]
8000a5e4:	91 39       	st.w	r8[0xc],r9
8000a5e6:	20 4d       	sub	sp,16
8000a5e8:	1a 98       	mov	r8,sp
8000a5ea:	ee c9 00 20 	sub	r9,r7,32
8000a5ee:	20 08       	sub	r8,0
8000a5f0:	20 09       	sub	r9,0
8000a5f2:	72 0b       	ld.w	r11,r9[0x0]
8000a5f4:	91 0b       	st.w	r8[0x0],r11
8000a5f6:	72 1b       	ld.w	r11,r9[0x4]
8000a5f8:	91 1b       	st.w	r8[0x4],r11
8000a5fa:	72 2b       	ld.w	r11,r9[0x8]
8000a5fc:	91 2b       	st.w	r8[0x8],r11
8000a5fe:	72 39       	ld.w	r9,r9[0xc]
8000a600:	91 39       	st.w	r8[0xc],r9
8000a602:	14 9c       	mov	r12,r10
8000a604:	c7 0e       	rcall	8000a2e4 <quat_multi>
8000a606:	2f 8d       	sub	sp,-32
8000a608:	ee c8 00 20 	sub	r8,r7,32
8000a60c:	ee c9 00 30 	sub	r9,r7,48
8000a610:	20 08       	sub	r8,0
8000a612:	20 09       	sub	r9,0
8000a614:	72 0a       	ld.w	r10,r9[0x0]
8000a616:	91 0a       	st.w	r8[0x0],r10
8000a618:	72 1a       	ld.w	r10,r9[0x4]
8000a61a:	91 1a       	st.w	r8[0x4],r10
8000a61c:	72 2a       	ld.w	r10,r9[0x8]
8000a61e:	91 2a       	st.w	r8[0x8],r10
8000a620:	72 39       	ld.w	r9,r9[0xc]
8000a622:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000a624:	06 98       	mov	r8,r3
8000a626:	ee c9 00 20 	sub	r9,r7,32
8000a62a:	20 08       	sub	r8,0
8000a62c:	20 09       	sub	r9,0
8000a62e:	72 0a       	ld.w	r10,r9[0x0]
8000a630:	91 0a       	st.w	r8[0x0],r10
8000a632:	72 1a       	ld.w	r10,r9[0x4]
8000a634:	91 1a       	st.w	r8[0x4],r10
8000a636:	72 2a       	ld.w	r10,r9[0x8]
8000a638:	91 2a       	st.w	r8[0x8],r10
8000a63a:	72 39       	ld.w	r9,r9[0xc]
8000a63c:	91 39       	st.w	r8[0xc],r9
}
8000a63e:	06 9c       	mov	r12,r3
8000a640:	2f 4d       	sub	sp,-48
8000a642:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a646:	00 00       	add	r0,r0
8000a648:	80 00       	ld.sh	r0,r0[0x0]
8000a64a:	a3 de       	cbr	lr,0x3

8000a64c <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000a64c:	eb cd 40 c0 	pushm	r6-r7,lr
8000a650:	1a 97       	mov	r7,sp
8000a652:	20 3d       	sub	sp,12
8000a654:	4a 66       	lddpc	r6,8000a6ec <init_pos_integration+0xa0>
8000a656:	1e 26       	rsub	r6,pc
8000a658:	ef 4c ff fc 	st.w	r7[-4],r12
8000a65c:	ef 4b ff f8 	st.w	r7[-8],r11
8000a660:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000a664:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a668:	30 08       	mov	r8,0
8000a66a:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000a66e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a672:	30 08       	mov	r8,0
8000a674:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000a678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a67c:	30 09       	mov	r9,0
8000a67e:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000a680:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a684:	30 09       	mov	r9,0
8000a686:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000a688:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a68c:	fc 19 40 00 	movh	r9,0x4000
8000a690:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000a692:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a696:	fc 19 40 00 	movh	r9,0x4000
8000a69a:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000a69c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6a0:	fc 19 3f 80 	movh	r9,0x3f80
8000a6a4:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000a6a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6aa:	fc 19 3f 80 	movh	r9,0x3f80
8000a6ae:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000a6b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6b4:	fc 19 3f 80 	movh	r9,0x3f80
8000a6b8:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000a6ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6be:	fc 19 3f 00 	movh	r9,0x3f00
8000a6c2:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000a6c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6c8:	fc 19 40 00 	movh	r9,0x4000
8000a6cc:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000a6ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6d2:	fc 19 3f 80 	movh	r9,0x3f80
8000a6d6:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000a6d8:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a6dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a6e0:	f0 16 00 e3 	mcall	r6[908]
}
8000a6e4:	2f dd       	sub	sp,-12
8000a6e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a6ea:	00 00       	add	r0,r0
8000a6ec:	80 00       	ld.sh	r0,r0[0x0]
8000a6ee:	a4 da       	st.b	r2[0x5],r10
8000a6f0:	47 50       	lddsp	r0,sp[0x1d4]
8000a6f2:	53 20       	stdsp	sp[0xc8],r0
8000a6f4:	70 6f       	ld.w	pc,r8[0x18]
8000a6f6:	73 69       	ld.w	r9,r9[0x58]
8000a6f8:	74 69       	ld.w	r9,r10[0x18]
8000a6fa:	6f 6e       	ld.w	lr,r7[0x58]
8000a6fc:	20 69       	sub	r9,6
8000a6fe:	6e 69       	ld.w	r9,r7[0x18]
8000a700:	74 69       	ld.w	r9,r10[0x18]
8000a702:	61 6c       	ld.w	r12,r0[0x58]
8000a704:	69 7a       	ld.w	r10,r4[0x5c]
8000a706:	65 64       	ld.w	r4,r2[0x58]
8000a708:	21 0a       	sub	r10,16
	...

8000a70c <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000a70c:	eb cd 40 c0 	pushm	r6-r7,lr
8000a710:	1a 97       	mov	r7,sp
8000a712:	20 3d       	sub	sp,12
8000a714:	4d 16       	lddpc	r6,8000a858 <init_pos_gps+0x14c>
8000a716:	1e 26       	rsub	r6,pc
8000a718:	ef 4c ff f8 	st.w	r7[-8],r12
8000a71c:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000a720:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a724:	2e 08       	sub	r8,-32
8000a726:	10 9c       	mov	r12,r8
8000a728:	f0 16 00 94 	mcall	r6[592]
8000a72c:	18 98       	mov	r8,r12
8000a72e:	58 08       	cp.w	r8,0
8000a730:	e0 80 00 91 	breq	8000a852 <init_pos_gps+0x146>
8000a734:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a738:	f1 38 00 28 	ld.ub	r8,r8[40]
8000a73c:	ec 18 00 01 	eorl	r8,0x1
8000a740:	5c 58       	castu.b	r8
8000a742:	e0 80 00 88 	breq	8000a852 <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000a746:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a74a:	30 18       	mov	r8,1
8000a74c:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000a750:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a754:	f0 e8 00 08 	ld.d	r8,r8[8]
8000a758:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a75c:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000a760:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a764:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a768:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a76c:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000a770:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a774:	70 49       	ld.w	r9,r8[0x10]
8000a776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a77a:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000a77e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a782:	71 19       	ld.w	r9,r8[0x44]
8000a784:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a788:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000a78c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a790:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a794:	f2 cb ff 70 	sub	r11,r9,-144
8000a798:	f0 ca ff a0 	sub	r10,r8,-96
8000a79c:	f6 c8 00 00 	sub	r8,r11,0
8000a7a0:	f4 c9 00 00 	sub	r9,r10,0
8000a7a4:	72 0c       	ld.w	r12,r9[0x0]
8000a7a6:	91 0c       	st.w	r8[0x0],r12
8000a7a8:	72 1c       	ld.w	r12,r9[0x4]
8000a7aa:	91 1c       	st.w	r8[0x4],r12
8000a7ac:	72 2c       	ld.w	r12,r9[0x8]
8000a7ae:	91 2c       	st.w	r8[0x8],r12
8000a7b0:	72 39       	ld.w	r9,r9[0xc]
8000a7b2:	91 39       	st.w	r8[0xc],r9
8000a7b4:	f6 c8 ff f0 	sub	r8,r11,-16
8000a7b8:	f4 c9 ff f0 	sub	r9,r10,-16
8000a7bc:	72 0c       	ld.w	r12,r9[0x0]
8000a7be:	91 0c       	st.w	r8[0x0],r12
8000a7c0:	72 1c       	ld.w	r12,r9[0x4]
8000a7c2:	91 1c       	st.w	r8[0x4],r12
8000a7c4:	72 2c       	ld.w	r12,r9[0x8]
8000a7c6:	91 2c       	st.w	r8[0x8],r12
8000a7c8:	72 39       	ld.w	r9,r9[0xc]
8000a7ca:	91 39       	st.w	r8[0xc],r9
8000a7cc:	f6 c8 ff e0 	sub	r8,r11,-32
8000a7d0:	f4 c9 ff e0 	sub	r9,r10,-32
8000a7d4:	72 0a       	ld.w	r10,r9[0x0]
8000a7d6:	91 0a       	st.w	r8[0x0],r10
8000a7d8:	72 1a       	ld.w	r10,r9[0x4]
8000a7da:	91 1a       	st.w	r8[0x4],r10
8000a7dc:	72 2a       	ld.w	r10,r9[0x8]
8000a7de:	91 2a       	st.w	r8[0x8],r10
8000a7e0:	72 39       	ld.w	r9,r9[0xc]
8000a7e2:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000a7e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7e8:	30 09       	mov	r9,0
8000a7ea:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000a7ee:	30 08       	mov	r8,0
8000a7f0:	ef 48 ff fc 	st.w	r7[-4],r8
8000a7f4:	c2 68       	rjmp	8000a840 <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000a7f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a7fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7fe:	2e f9       	sub	r9,-17
8000a800:	30 0a       	mov	r10,0
8000a802:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000a806:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a80a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a80e:	2e b9       	sub	r9,-21
8000a810:	30 0a       	mov	r10,0
8000a812:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000a816:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a81a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a81e:	2e 89       	sub	r9,-24
8000a820:	30 0a       	mov	r10,0
8000a822:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000a826:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a82a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a82e:	2f 29       	sub	r9,-14
8000a830:	30 0a       	mov	r10,0
8000a832:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000a836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a83a:	2f f8       	sub	r8,-1
8000a83c:	ef 48 ff fc 	st.w	r7[-4],r8
8000a840:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a844:	58 28       	cp.w	r8,2
8000a846:	fe 9a ff d8 	brle	8000a7f6 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000a84a:	fe cc 01 5a 	sub	r12,pc,346
8000a84e:	f0 16 00 01 	mcall	r6[4]
	}
}
8000a852:	2f dd       	sub	sp,-12
8000a854:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a858:	80 00       	ld.sh	r0,r0[0x0]
8000a85a:	a5 9a       	lsr	r10,0x5
8000a85c:	4f 66       	lddpc	r6,8000aa34 <position_reset_home_altitude+0xac>
8000a85e:	66 73       	ld.w	r3,r3[0x1c]
8000a860:	65 74       	ld.w	r4,r2[0x5c]
8000a862:	20 6f       	sub	pc,6
8000a864:	66 20       	ld.w	r0,r3[0x8]
8000a866:	74 68       	ld.w	r8,r10[0x18]
8000a868:	65 20       	ld.w	r0,r2[0x48]
8000a86a:	62 61       	ld.w	r1,r1[0x18]
8000a86c:	72 6f       	ld.w	pc,r9[0x18]
8000a86e:	6d 65       	ld.w	r5,r6[0x58]
8000a870:	74 65       	ld.w	r5,r10[0x18]
8000a872:	72 20       	ld.w	r0,r9[0x8]
8000a874:	73 65       	ld.w	r5,r9[0x58]
8000a876:	74 20       	ld.w	r0,r10[0x8]
8000a878:	74 6f       	ld.w	pc,r10[0x18]
8000a87a:	20 74       	sub	r4,7
8000a87c:	68 65       	ld.w	r5,r4[0x18]
8000a87e:	20 47       	sub	r7,4
8000a880:	50 53       	stdsp	sp[0x14],r3
8000a882:	20 61       	sub	r1,6
8000a884:	6c 74       	ld.w	r4,r6[0x1c]
8000a886:	69 74       	ld.w	r4,r4[0x5c]
8000a888:	75 64       	ld.w	r4,r10[0x58]
8000a88a:	65 2c       	ld.w	r12,r2[0x48]
8000a88c:	20 6f       	sub	pc,6
8000a88e:	66 66       	ld.w	r6,r3[0x18]
8000a890:	73 65       	ld.w	r5,r9[0x58]
8000a892:	74 20       	ld.w	r0,r10[0x8]
8000a894:	76 61       	ld.w	r1,r11[0x18]
8000a896:	6c 75       	ld.w	r5,r6[0x1c]
8000a898:	65 20       	ld.w	r0,r2[0x48]
8000a89a:	6f 66       	ld.w	r6,r7[0x58]
8000a89c:	3a 00       	mov	r0,-96
8000a89e:	00 00       	add	r0,r0
8000a8a0:	20 3d       	sub	sp,12
8000a8a2:	20 2d       	sub	sp,8
8000a8a4:	00 00       	add	r0,r0
8000a8a6:	00 00       	add	r0,r0
8000a8a8:	20 2d       	sub	sp,8
8000a8aa:	20 00       	sub	r0,0
8000a8ac:	20 2b       	sub	r11,2
8000a8ae:	20 00       	sub	r0,0
8000a8b0:	0a 00       	add	r0,r5

8000a8b2 <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000a8b2:	eb cd 40 c0 	pushm	r6-r7,lr
8000a8b6:	1a 97       	mov	r7,sp
8000a8b8:	20 3d       	sub	sp,12
8000a8ba:	4b 36       	lddpc	r6,8000a984 <init_barometer_offset+0xd2>
8000a8bc:	1e 26       	rsub	r6,pc
8000a8be:	ef 4c ff f8 	st.w	r7[-8],r12
8000a8c2:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000a8c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a8ca:	2d c8       	sub	r8,-36
8000a8cc:	10 9c       	mov	r12,r8
8000a8ce:	f0 16 00 e4 	mcall	r6[912]
8000a8d2:	18 98       	mov	r8,r12
8000a8d4:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000a8d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a8dc:	30 08       	mov	r8,0
8000a8de:	f0 09 18 00 	cp.b	r9,r8
8000a8e2:	c4 e0       	breq	8000a97e <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000a8e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a8e8:	70 79       	ld.w	r9,r8[0x1c]
8000a8ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a8ee:	f0 f8 00 80 	ld.w	r8,r8[128]
8000a8f2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a8f6:	10 99       	mov	r9,r8
8000a8f8:	ee 19 80 00 	eorh	r9,0x8000
8000a8fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a900:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000a902:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a906:	30 18       	mov	r8,1
8000a908:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000a90c:	fe cc 00 b0 	sub	r12,pc,176
8000a910:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000a914:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a918:	70 88       	ld.w	r8,r8[0x20]
8000a91a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000a91e:	30 ab       	mov	r11,10
8000a920:	10 9c       	mov	r12,r8
8000a922:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000a926:	fe cc 00 86 	sub	r12,pc,134
8000a92a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000a92e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a932:	70 78       	ld.w	r8,r8[0x1c]
8000a934:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000a938:	30 ab       	mov	r11,10
8000a93a:	10 9c       	mov	r12,r8
8000a93c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000a940:	fe cc 00 98 	sub	r12,pc,152
8000a944:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000a948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a94c:	71 a8       	ld.w	r8,r8[0x68]
8000a94e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000a952:	30 ab       	mov	r11,10
8000a954:	10 9c       	mov	r12,r8
8000a956:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000a95a:	fe cc 00 ae 	sub	r12,pc,174
8000a95e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000a962:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a966:	f0 f8 00 80 	ld.w	r8,r8[128]
8000a96a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000a96e:	30 ab       	mov	r11,10
8000a970:	10 9c       	mov	r12,r8
8000a972:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000a976:	fe cc 00 c6 	sub	r12,pc,198
8000a97a:	f0 16 00 01 	mcall	r6[4]
	}
}
8000a97e:	2f dd       	sub	sp,-12
8000a980:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a984:	80 00       	ld.sh	r0,r0[0x0]
8000a986:	a7 40       	asr	r0,0x6

8000a988 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000a988:	eb cd 40 c0 	pushm	r6-r7,lr
8000a98c:	1a 97       	mov	r7,sp
8000a98e:	20 4d       	sub	sp,16
8000a990:	4f 06       	lddpc	r6,8000ab50 <position_reset_home_altitude+0x1c8>
8000a992:	1e 26       	rsub	r6,pc
8000a994:	ef 4c ff f8 	st.w	r7[-8],r12
8000a998:	ef 4b ff f4 	st.w	r7[-12],r11
8000a99c:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000a9a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9a4:	f1 38 00 28 	ld.ub	r8,r8[40]
8000a9a8:	58 08       	cp.w	r8,0
8000a9aa:	c4 b0       	breq	8000aa40 <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000a9ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9b0:	f0 e8 00 08 	ld.d	r8,r8[8]
8000a9b4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a9b8:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000a9bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9c0:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a9c4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a9c8:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000a9cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9d0:	70 49       	ld.w	r9,r8[0x10]
8000a9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9d6:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000a9da:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9de:	71 19       	ld.w	r9,r8[0x44]
8000a9e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9e4:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000a9e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a9ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9f0:	f2 cb ff 70 	sub	r11,r9,-144
8000a9f4:	f0 ca ff a0 	sub	r10,r8,-96
8000a9f8:	f6 c8 00 00 	sub	r8,r11,0
8000a9fc:	f4 c9 00 00 	sub	r9,r10,0
8000aa00:	72 0c       	ld.w	r12,r9[0x0]
8000aa02:	91 0c       	st.w	r8[0x0],r12
8000aa04:	72 1c       	ld.w	r12,r9[0x4]
8000aa06:	91 1c       	st.w	r8[0x4],r12
8000aa08:	72 2c       	ld.w	r12,r9[0x8]
8000aa0a:	91 2c       	st.w	r8[0x8],r12
8000aa0c:	72 39       	ld.w	r9,r9[0xc]
8000aa0e:	91 39       	st.w	r8[0xc],r9
8000aa10:	f6 c8 ff f0 	sub	r8,r11,-16
8000aa14:	f4 c9 ff f0 	sub	r9,r10,-16
8000aa18:	72 0c       	ld.w	r12,r9[0x0]
8000aa1a:	91 0c       	st.w	r8[0x0],r12
8000aa1c:	72 1c       	ld.w	r12,r9[0x4]
8000aa1e:	91 1c       	st.w	r8[0x4],r12
8000aa20:	72 2c       	ld.w	r12,r9[0x8]
8000aa22:	91 2c       	st.w	r8[0x8],r12
8000aa24:	72 39       	ld.w	r9,r9[0xc]
8000aa26:	91 39       	st.w	r8[0xc],r9
8000aa28:	f6 c8 ff e0 	sub	r8,r11,-32
8000aa2c:	f4 c9 ff e0 	sub	r9,r10,-32
8000aa30:	72 0a       	ld.w	r10,r9[0x0]
8000aa32:	91 0a       	st.w	r8[0x0],r10
8000aa34:	72 1a       	ld.w	r10,r9[0x4]
8000aa36:	91 1a       	st.w	r8[0x4],r10
8000aa38:	72 2a       	ld.w	r10,r9[0x8]
8000aa3a:	91 2a       	st.w	r8[0x8],r10
8000aa3c:	72 39       	ld.w	r9,r9[0xc]
8000aa3e:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000aa40:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa44:	70 79       	ld.w	r9,r8[0x1c]
8000aa46:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa4a:	70 88       	ld.w	r8,r8[0x20]
8000aa4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000aa50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa54:	f0 f8 00 80 	ld.w	r8,r8[128]
8000aa58:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000aa5c:	10 99       	mov	r9,r8
8000aa5e:	ee 19 80 00 	eorh	r9,0x8000
8000aa62:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa66:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000aa68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa6c:	30 18       	mov	r8,1
8000aa6e:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000aa72:	fe cc 02 16 	sub	r12,pc,534
8000aa76:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000aa7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa7e:	70 88       	ld.w	r8,r8[0x20]
8000aa80:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000aa84:	30 ab       	mov	r11,10
8000aa86:	10 9c       	mov	r12,r8
8000aa88:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000aa8c:	fe cc 01 ec 	sub	r12,pc,492
8000aa90:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000aa94:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa98:	70 78       	ld.w	r8,r8[0x1c]
8000aa9a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000aa9e:	30 ab       	mov	r11,10
8000aaa0:	10 9c       	mov	r12,r8
8000aaa2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000aaa6:	fe cc 01 fe 	sub	r12,pc,510
8000aaaa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000aaae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aab2:	71 a8       	ld.w	r8,r8[0x68]
8000aab4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000aab8:	30 ab       	mov	r11,10
8000aaba:	10 9c       	mov	r12,r8
8000aabc:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000aac0:	fe cc 02 14 	sub	r12,pc,532
8000aac4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000aac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aacc:	f0 f8 00 80 	ld.w	r8,r8[128]
8000aad0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000aad4:	30 ab       	mov	r11,10
8000aad6:	10 9c       	mov	r12,r8
8000aad8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000aadc:	fe cc 02 2c 	sub	r12,pc,556
8000aae0:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000aae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aae8:	30 09       	mov	r9,0
8000aaea:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000aaee:	30 08       	mov	r8,0
8000aaf0:	ef 48 ff fc 	st.w	r7[-4],r8
8000aaf4:	c2 68       	rjmp	8000ab40 <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000aaf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aafa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aafe:	2e f9       	sub	r9,-17
8000ab00:	30 0a       	mov	r10,0
8000ab02:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000ab06:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab0e:	2e b9       	sub	r9,-21
8000ab10:	30 0a       	mov	r10,0
8000ab12:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000ab16:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab1e:	2e 89       	sub	r9,-24
8000ab20:	30 0a       	mov	r10,0
8000ab22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000ab26:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab2e:	2f 29       	sub	r9,-14
8000ab30:	30 0a       	mov	r10,0
8000ab32:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000ab36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab3a:	2f f8       	sub	r8,-1
8000ab3c:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab44:	58 28       	cp.w	r8,2
8000ab46:	fe 9a ff d8 	brle	8000aaf6 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000ab4a:	2f cd       	sub	sp,-16
8000ab4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ab50:	80 00       	ld.sh	r0,r0[0x0]
8000ab52:	a8 16       	st.h	r4[0x2],r6

8000ab54 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000ab54:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ab58:	1a 97       	mov	r7,sp
8000ab5a:	21 fd       	sub	sp,124
8000ab5c:	fe f6 03 64 	ld.w	r6,pc[868]
8000ab60:	1e 26       	rsub	r6,pc
8000ab62:	ef 4c ff 9c 	st.w	r7[-100],r12
8000ab66:	ef 4b ff 98 	st.w	r7[-104],r11
8000ab6a:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000ab6e:	30 08       	mov	r8,0
8000ab70:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000ab74:	30 08       	mov	r8,0
8000ab76:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab7a:	c1 58       	rjmp	8000aba4 <position_integration+0x50>
8000ab7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab80:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ab84:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000ab88:	2f 2a       	sub	r10,-14
8000ab8a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000ab8e:	2f f8       	sub	r8,-1
8000ab90:	a3 68       	lsl	r8,0x2
8000ab92:	ee 08 00 08 	add	r8,r7,r8
8000ab96:	f1 49 ff dc 	st.w	r8[-36],r9
8000ab9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab9e:	2f f8       	sub	r8,-1
8000aba0:	ef 48 ff fc 	st.w	r7[-4],r8
8000aba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aba8:	58 28       	cp.w	r8,2
8000abaa:	fe 9a ff e9 	brle	8000ab7c <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000abae:	ee ca 00 7c 	sub	r10,r7,124
8000abb2:	20 4d       	sub	sp,16
8000abb4:	1a 98       	mov	r8,sp
8000abb6:	ee c9 00 24 	sub	r9,r7,36
8000abba:	20 08       	sub	r8,0
8000abbc:	20 09       	sub	r9,0
8000abbe:	72 0b       	ld.w	r11,r9[0x0]
8000abc0:	91 0b       	st.w	r8[0x0],r11
8000abc2:	72 1b       	ld.w	r11,r9[0x4]
8000abc4:	91 1b       	st.w	r8[0x4],r11
8000abc6:	72 2b       	ld.w	r11,r9[0x8]
8000abc8:	91 2b       	st.w	r8[0x8],r11
8000abca:	72 39       	ld.w	r9,r9[0xc]
8000abcc:	91 39       	st.w	r8[0xc],r9
8000abce:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000abd2:	20 4d       	sub	sp,16
8000abd4:	1a 98       	mov	r8,sp
8000abd6:	20 08       	sub	r8,0
8000abd8:	20 09       	sub	r9,0
8000abda:	72 0b       	ld.w	r11,r9[0x0]
8000abdc:	91 0b       	st.w	r8[0x0],r11
8000abde:	72 1b       	ld.w	r11,r9[0x4]
8000abe0:	91 1b       	st.w	r8[0x4],r11
8000abe2:	72 2b       	ld.w	r11,r9[0x8]
8000abe4:	91 2b       	st.w	r8[0x8],r11
8000abe6:	72 39       	ld.w	r9,r9[0xc]
8000abe8:	91 39       	st.w	r8[0xc],r9
8000abea:	14 9c       	mov	r12,r10
8000abec:	fe b0 fc 34 	rcall	8000a454 <quat_global_to_local>
8000abf0:	2f 8d       	sub	sp,-32
8000abf2:	ee c8 00 14 	sub	r8,r7,20
8000abf6:	ee c9 00 7c 	sub	r9,r7,124
8000abfa:	20 08       	sub	r8,0
8000abfc:	20 09       	sub	r9,0
8000abfe:	72 0a       	ld.w	r10,r9[0x0]
8000ac00:	91 0a       	st.w	r8[0x0],r10
8000ac02:	72 1a       	ld.w	r10,r9[0x4]
8000ac04:	91 1a       	st.w	r8[0x4],r10
8000ac06:	72 2a       	ld.w	r10,r9[0x8]
8000ac08:	91 2a       	st.w	r8[0x8],r10
8000ac0a:	72 39       	ld.w	r9,r9[0xc]
8000ac0c:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000ac0e:	30 08       	mov	r8,0
8000ac10:	ef 48 ff fc 	st.w	r7[-4],r8
8000ac14:	c8 c8       	rjmp	8000ad2c <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000ac16:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ac1e:	2f f8       	sub	r8,-1
8000ac20:	a3 68       	lsl	r8,0x2
8000ac22:	ee 08 00 08 	add	r8,r7,r8
8000ac26:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000ac2a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ac2e:	2f 59       	sub	r9,-11
8000ac30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000ac34:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000ac38:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac3c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000ac40:	2d f9       	sub	r9,-33
8000ac42:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000ac46:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ac4a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000ac4e:	2f ba       	sub	r10,-5
8000ac50:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000ac54:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ac58:	10 9c       	mov	r12,r8
8000ac5a:	f0 16 00 02 	mcall	r6[8]
8000ac5e:	e0 68 85 1f 	mov	r8,34079
8000ac62:	ea 18 51 eb 	orh	r8,0x51eb
8000ac66:	e0 69 9e b8 	mov	r9,40632
8000ac6a:	ea 19 40 23 	orh	r9,0x4023
8000ac6e:	f0 16 00 03 	mcall	r6[12]
8000ac72:	14 98       	mov	r8,r10
8000ac74:	16 99       	mov	r9,r11
8000ac76:	10 9a       	mov	r10,r8
8000ac78:	12 9b       	mov	r11,r9
8000ac7a:	f0 16 00 08 	mcall	r6[32]
8000ac7e:	18 9a       	mov	r10,r12
8000ac80:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000ac84:	ea c9 ff d0 	sub	r9,r5,-48
8000ac88:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000ac8c:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000ac90:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ac94:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ac98:	2f 59       	sub	r9,-11
8000ac9a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000ac9e:	10 9c       	mov	r12,r8
8000aca0:	f0 16 00 02 	mcall	r6[8]
8000aca4:	14 92       	mov	r2,r10
8000aca6:	16 93       	mov	r3,r11
8000aca8:	ee fc ff 94 	ld.w	r12,r7[-108]
8000acac:	f0 16 00 02 	mcall	r6[8]
8000acb0:	30 08       	mov	r8,0
8000acb2:	fc 19 80 00 	movh	r9,0x8000
8000acb6:	f0 16 00 03 	mcall	r6[12]
8000acba:	14 98       	mov	r8,r10
8000acbc:	16 99       	mov	r9,r11
8000acbe:	10 9a       	mov	r10,r8
8000acc0:	12 9b       	mov	r11,r9
8000acc2:	30 08       	mov	r8,0
8000acc4:	fc 19 3f f0 	movh	r9,0x3ff0
8000acc8:	f0 16 00 05 	mcall	r6[20]
8000accc:	14 98       	mov	r8,r10
8000acce:	16 99       	mov	r9,r11
8000acd0:	04 9a       	mov	r10,r2
8000acd2:	06 9b       	mov	r11,r3
8000acd4:	f0 16 00 03 	mcall	r6[12]
8000acd8:	14 98       	mov	r8,r10
8000acda:	16 99       	mov	r9,r11
8000acdc:	10 92       	mov	r2,r8
8000acde:	12 93       	mov	r3,r9
8000ace0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ace4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000ace8:	2d 09       	sub	r9,-48
8000acea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000acee:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000acf2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000acf6:	10 9c       	mov	r12,r8
8000acf8:	f0 16 00 02 	mcall	r6[8]
8000acfc:	14 98       	mov	r8,r10
8000acfe:	16 99       	mov	r9,r11
8000ad00:	04 9a       	mov	r10,r2
8000ad02:	06 9b       	mov	r11,r3
8000ad04:	f0 16 00 05 	mcall	r6[20]
8000ad08:	14 98       	mov	r8,r10
8000ad0a:	16 99       	mov	r9,r11
8000ad0c:	10 9a       	mov	r10,r8
8000ad0e:	12 9b       	mov	r11,r9
8000ad10:	f0 16 00 08 	mcall	r6[32]
8000ad14:	18 9a       	mov	r10,r12
8000ad16:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ad1a:	ea c9 ff f5 	sub	r9,r5,-11
8000ad1e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000ad22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad26:	2f f8       	sub	r8,-1
8000ad28:	ef 48 ff fc 	st.w	r7[-4],r8
8000ad2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad30:	58 28       	cp.w	r8,2
8000ad32:	fe 9a ff 72 	brle	8000ac16 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000ad36:	30 08       	mov	r8,0
8000ad38:	ef 48 ff ec 	st.w	r7[-20],r8
8000ad3c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ad40:	70 b8       	ld.w	r8,r8[0x2c]
8000ad42:	ef 48 ff f0 	st.w	r7[-16],r8
8000ad46:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ad4a:	70 c8       	ld.w	r8,r8[0x30]
8000ad4c:	ef 48 ff f4 	st.w	r7[-12],r8
8000ad50:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ad54:	70 d8       	ld.w	r8,r8[0x34]
8000ad56:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000ad5a:	ee ca 00 7c 	sub	r10,r7,124
8000ad5e:	20 4d       	sub	sp,16
8000ad60:	1a 98       	mov	r8,sp
8000ad62:	ee c9 00 14 	sub	r9,r7,20
8000ad66:	20 08       	sub	r8,0
8000ad68:	20 09       	sub	r9,0
8000ad6a:	72 0b       	ld.w	r11,r9[0x0]
8000ad6c:	91 0b       	st.w	r8[0x0],r11
8000ad6e:	72 1b       	ld.w	r11,r9[0x4]
8000ad70:	91 1b       	st.w	r8[0x4],r11
8000ad72:	72 2b       	ld.w	r11,r9[0x8]
8000ad74:	91 2b       	st.w	r8[0x8],r11
8000ad76:	72 39       	ld.w	r9,r9[0xc]
8000ad78:	91 39       	st.w	r8[0xc],r9
8000ad7a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000ad7e:	20 4d       	sub	sp,16
8000ad80:	1a 98       	mov	r8,sp
8000ad82:	20 08       	sub	r8,0
8000ad84:	20 09       	sub	r9,0
8000ad86:	72 0b       	ld.w	r11,r9[0x0]
8000ad88:	91 0b       	st.w	r8[0x0],r11
8000ad8a:	72 1b       	ld.w	r11,r9[0x4]
8000ad8c:	91 1b       	st.w	r8[0x4],r11
8000ad8e:	72 2b       	ld.w	r11,r9[0x8]
8000ad90:	91 2b       	st.w	r8[0x8],r11
8000ad92:	72 39       	ld.w	r9,r9[0xc]
8000ad94:	91 39       	st.w	r8[0xc],r9
8000ad96:	14 9c       	mov	r12,r10
8000ad98:	fe b0 fb dc 	rcall	8000a550 <quat_local_to_global>
8000ad9c:	2f 8d       	sub	sp,-32
8000ad9e:	ee c8 00 24 	sub	r8,r7,36
8000ada2:	ee c9 00 7c 	sub	r9,r7,124
8000ada6:	20 08       	sub	r8,0
8000ada8:	20 09       	sub	r9,0
8000adaa:	72 0a       	ld.w	r10,r9[0x0]
8000adac:	91 0a       	st.w	r8[0x0],r10
8000adae:	72 1a       	ld.w	r10,r9[0x4]
8000adb0:	91 1a       	st.w	r8[0x4],r10
8000adb2:	72 2a       	ld.w	r10,r9[0x8]
8000adb4:	91 2a       	st.w	r8[0x8],r10
8000adb6:	72 39       	ld.w	r9,r9[0xc]
8000adb8:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000adba:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000adbe:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000adc2:	91 e9       	st.w	r8[0x38],r9
8000adc4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000adc8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000adcc:	91 f9       	st.w	r8[0x3c],r9
8000adce:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000add2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000add6:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000adda:	30 08       	mov	r8,0
8000addc:	ef 48 ff fc 	st.w	r7[-4],r8
8000ade0:	c6 78       	rjmp	8000aeae <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000ade2:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000ade6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000adea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000adee:	2e 89       	sub	r9,-24
8000adf0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000adf4:	10 9c       	mov	r12,r8
8000adf6:	f0 16 00 02 	mcall	r6[8]
8000adfa:	14 92       	mov	r2,r10
8000adfc:	16 93       	mov	r3,r11
8000adfe:	ee fc ff 94 	ld.w	r12,r7[-108]
8000ae02:	f0 16 00 02 	mcall	r6[8]
8000ae06:	30 08       	mov	r8,0
8000ae08:	fc 19 80 00 	movh	r9,0x8000
8000ae0c:	f0 16 00 03 	mcall	r6[12]
8000ae10:	14 98       	mov	r8,r10
8000ae12:	16 99       	mov	r9,r11
8000ae14:	10 9a       	mov	r10,r8
8000ae16:	12 9b       	mov	r11,r9
8000ae18:	30 08       	mov	r8,0
8000ae1a:	fc 19 3f f0 	movh	r9,0x3ff0
8000ae1e:	f0 16 00 05 	mcall	r6[20]
8000ae22:	14 98       	mov	r8,r10
8000ae24:	16 99       	mov	r9,r11
8000ae26:	04 9a       	mov	r10,r2
8000ae28:	06 9b       	mov	r11,r3
8000ae2a:	f0 16 00 03 	mcall	r6[12]
8000ae2e:	14 98       	mov	r8,r10
8000ae30:	16 99       	mov	r9,r11
8000ae32:	10 92       	mov	r2,r8
8000ae34:	12 93       	mov	r3,r9
8000ae36:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ae3a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ae3e:	2f 29       	sub	r9,-14
8000ae40:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000ae44:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000ae48:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ae4c:	10 9c       	mov	r12,r8
8000ae4e:	f0 16 00 02 	mcall	r6[8]
8000ae52:	14 98       	mov	r8,r10
8000ae54:	16 99       	mov	r9,r11
8000ae56:	04 9a       	mov	r10,r2
8000ae58:	06 9b       	mov	r11,r3
8000ae5a:	f0 16 00 05 	mcall	r6[20]
8000ae5e:	14 98       	mov	r8,r10
8000ae60:	16 99       	mov	r9,r11
8000ae62:	10 9a       	mov	r10,r8
8000ae64:	12 9b       	mov	r11,r9
8000ae66:	f0 16 00 08 	mcall	r6[32]
8000ae6a:	18 9a       	mov	r10,r12
8000ae6c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000ae70:	ea c9 ff e8 	sub	r9,r5,-24
8000ae74:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000ae78:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000ae7c:	20 4d       	sub	sp,16
8000ae7e:	1a 98       	mov	r8,sp
8000ae80:	20 08       	sub	r8,0
8000ae82:	20 09       	sub	r9,0
8000ae84:	72 0a       	ld.w	r10,r9[0x0]
8000ae86:	91 0a       	st.w	r8[0x0],r10
8000ae88:	72 1a       	ld.w	r10,r9[0x4]
8000ae8a:	91 1a       	st.w	r8[0x4],r10
8000ae8c:	72 2a       	ld.w	r10,r9[0x8]
8000ae8e:	91 2a       	st.w	r8[0x8],r10
8000ae90:	72 39       	ld.w	r9,r9[0xc]
8000ae92:	91 39       	st.w	r8[0xc],r9
8000ae94:	f0 16 01 12 	mcall	r6[1096]
8000ae98:	2f cd       	sub	sp,-16
8000ae9a:	18 99       	mov	r9,r12
8000ae9c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000aea0:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000aea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aea8:	2f f8       	sub	r8,-1
8000aeaa:	ef 48 ff fc 	st.w	r7[-4],r8
8000aeae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aeb2:	58 28       	cp.w	r8,2
8000aeb4:	fe 9a ff 97 	brle	8000ade2 <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000aeb8:	2e 1d       	sub	sp,-124
8000aeba:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000aebe:	00 00       	add	r0,r0
8000aec0:	80 00       	ld.sh	r0,r0[0x0]
8000aec2:	a9 e4       	*unknown*
8000aec4:	47 50       	lddsp	r0,sp[0x1d4]
8000aec6:	53 20       	stdsp	sp[0xc8],r0
8000aec8:	64 74       	ld.w	r4,r2[0x1c]
8000aeca:	20 69       	sub	r9,6
8000aecc:	73 20       	ld.w	r0,r9[0x48]
8000aece:	74 6f       	ld.w	pc,r10[0x18]
8000aed0:	6f 20       	ld.w	r0,r7[0x48]
8000aed2:	73 6d       	ld.w	sp,r9[0x58]
8000aed4:	61 6c       	ld.w	r12,r0[0x58]
8000aed6:	6c 21       	ld.w	r1,r6[0x8]
	...

8000aeda <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000aeda:	eb cd 40 e0 	pushm	r5-r7,lr
8000aede:	1a 97       	mov	r7,sp
8000aee0:	fa cd 00 e4 	sub	sp,sp,228
8000aee4:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000aee8:	1e 26       	rsub	r6,pc
8000aeea:	ef 4c ff 58 	st.w	r7[-168],r12
8000aeee:	ef 4b ff 54 	st.w	r7[-172],r11
8000aef2:	ef 4a ff 50 	st.w	r7[-176],r10
8000aef6:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000aefa:	30 08       	mov	r8,0
8000aefc:	ef 48 ff 84 	st.w	r7[-124],r8
8000af00:	30 08       	mov	r8,0
8000af02:	ef 48 ff 88 	st.w	r7[-120],r8
8000af06:	30 08       	mov	r8,0
8000af08:	ef 48 ff 8c 	st.w	r7[-116],r8
8000af0c:	fc 18 3f 80 	movh	r8,0x3f80
8000af10:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000af14:	30 08       	mov	r8,0
8000af16:	ef 48 ff 74 	st.w	r7[-140],r8
8000af1a:	30 08       	mov	r8,0
8000af1c:	ef 48 ff 78 	st.w	r7[-136],r8
8000af20:	30 08       	mov	r8,0
8000af22:	ef 48 ff 7c 	st.w	r7[-132],r8
8000af26:	fc 18 3f 80 	movh	r8,0x3f80
8000af2a:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000af2e:	30 08       	mov	r8,0
8000af30:	ef 48 ff 68 	st.w	r7[-152],r8
8000af34:	30 08       	mov	r8,0
8000af36:	ef 48 ff 6c 	st.w	r7[-148],r8
8000af3a:	30 08       	mov	r8,0
8000af3c:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000af40:	30 08       	mov	r8,0
8000af42:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000af46:	30 08       	mov	r8,0
8000af48:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000af4c:	30 08       	mov	r8,0
8000af4e:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000af52:	30 08       	mov	r8,0
8000af54:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000af58:	30 08       	mov	r8,0
8000af5a:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000af5e:	30 08       	mov	r8,0
8000af60:	ef 48 ff 5c 	st.w	r7[-164],r8
8000af64:	30 08       	mov	r8,0
8000af66:	ef 48 ff 60 	st.w	r7[-160],r8
8000af6a:	30 08       	mov	r8,0
8000af6c:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000af70:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000af74:	f1 38 00 29 	ld.ub	r8,r8[41]
8000af78:	58 08       	cp.w	r8,0
8000af7a:	c6 40       	breq	8000b042 <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000af7c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000af80:	2d c8       	sub	r8,-36
8000af82:	10 9c       	mov	r12,r8
8000af84:	f0 16 00 e4 	mcall	r6[912]
8000af88:	18 98       	mov	r8,r12
8000af8a:	58 08       	cp.w	r8,0
8000af8c:	c2 70       	breq	8000afda <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000af8e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000af92:	f0 f9 00 80 	ld.w	r9,r8[128]
8000af96:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000af9a:	70 78       	ld.w	r8,r8[0x1c]
8000af9c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000afa0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000afa4:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000afa8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000afac:	70 78       	ld.w	r8,r8[0x1c]
8000afae:	10 99       	mov	r9,r8
8000afb0:	ee 19 80 00 	eorh	r9,0x8000
8000afb4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000afb8:	71 a8       	ld.w	r8,r8[0x68]
8000afba:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000afbe:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000afc2:	f0 f8 00 80 	ld.w	r8,r8[128]
8000afc6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000afca:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000afce:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000afd2:	70 a9       	ld.w	r9,r8[0x28]
8000afd4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000afd8:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000afda:	f0 16 00 29 	mcall	r6[164]
8000afde:	18 99       	mov	r9,r12
8000afe0:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000afe4:	70 a8       	ld.w	r8,r8[0x28]
8000afe6:	f2 08 01 08 	sub	r8,r9,r8
8000afea:	10 9c       	mov	r12,r8
8000afec:	f0 16 00 51 	mcall	r6[324]
8000aff0:	30 08       	mov	r8,0
8000aff2:	e0 69 40 00 	mov	r9,16384
8000aff6:	ea 19 40 8f 	orh	r9,0x408f
8000affa:	f0 16 00 0c 	mcall	r6[48]
8000affe:	14 98       	mov	r8,r10
8000b000:	16 99       	mov	r9,r11
8000b002:	10 9a       	mov	r10,r8
8000b004:	12 9b       	mov	r11,r9
8000b006:	f0 16 00 7b 	mcall	r6[492]
8000b00a:	18 98       	mov	r8,r12
8000b00c:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b010:	fc 18 3f 80 	movh	r8,0x3f80
8000b014:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b018:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b01c:	71 49       	ld.w	r9,r8[0x50]
8000b01e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b022:	71 a8       	ld.w	r8,r8[0x68]
8000b024:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b028:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b02c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b030:	70 99       	ld.w	r9,r8[0x24]
8000b032:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b036:	71 08       	ld.w	r8,r8[0x40]
8000b038:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b03c:	ef 48 ff e4 	st.w	r7[-28],r8
8000b040:	c0 78       	rjmp	8000b04e <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b042:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b046:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b04a:	f0 16 02 08 	mcall	r6[2080]
		}
	
		if (pos_est->init_gps_position)
8000b04e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b052:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b056:	58 08       	cp.w	r8,0
8000b058:	e0 80 01 9c 	breq	8000b390 <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b05c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b060:	2e 08       	sub	r8,-32
8000b062:	10 9c       	mov	r12,r8
8000b064:	f0 16 00 94 	mcall	r6[592]
8000b068:	18 98       	mov	r8,r12
8000b06a:	58 08       	cp.w	r8,0
8000b06c:	e0 80 01 07 	breq	8000b27a <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b070:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b074:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b078:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b07c:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b080:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b084:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b088:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b08c:	70 48       	ld.w	r8,r8[0x10]
8000b08e:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b092:	30 08       	mov	r8,0
8000b094:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b098:	ee cc 00 e4 	sub	r12,r7,228
8000b09c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b0a0:	20 7d       	sub	sp,28
8000b0a2:	1a 99       	mov	r9,sp
8000b0a4:	12 9a       	mov	r10,r9
8000b0a6:	f0 cb ff 90 	sub	r11,r8,-112
8000b0aa:	f4 c8 00 00 	sub	r8,r10,0
8000b0ae:	f6 c9 00 00 	sub	r9,r11,0
8000b0b2:	72 0e       	ld.w	lr,r9[0x0]
8000b0b4:	91 0e       	st.w	r8[0x0],lr
8000b0b6:	72 1e       	ld.w	lr,r9[0x4]
8000b0b8:	91 1e       	st.w	r8[0x4],lr
8000b0ba:	72 2e       	ld.w	lr,r9[0x8]
8000b0bc:	91 2e       	st.w	r8[0x8],lr
8000b0be:	72 39       	ld.w	r9,r9[0xc]
8000b0c0:	91 39       	st.w	r8[0xc],r9
8000b0c2:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b0c6:	f4 e9 00 10 	st.d	r10[16],r8
8000b0ca:	76 68       	ld.w	r8,r11[0x18]
8000b0cc:	95 68       	st.w	r10[0x18],r8
8000b0ce:	20 7d       	sub	sp,28
8000b0d0:	1a 98       	mov	r8,sp
8000b0d2:	10 9a       	mov	r10,r8
8000b0d4:	ee cb 00 3c 	sub	r11,r7,60
8000b0d8:	f4 c8 00 00 	sub	r8,r10,0
8000b0dc:	f6 c9 00 00 	sub	r9,r11,0
8000b0e0:	72 0e       	ld.w	lr,r9[0x0]
8000b0e2:	91 0e       	st.w	r8[0x0],lr
8000b0e4:	72 1e       	ld.w	lr,r9[0x4]
8000b0e6:	91 1e       	st.w	r8[0x4],lr
8000b0e8:	72 2e       	ld.w	lr,r9[0x8]
8000b0ea:	91 2e       	st.w	r8[0x8],lr
8000b0ec:	72 39       	ld.w	r9,r9[0xc]
8000b0ee:	91 39       	st.w	r8[0xc],r9
8000b0f0:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b0f4:	f4 e9 00 10 	st.d	r10[16],r8
8000b0f8:	76 68       	ld.w	r8,r11[0x18]
8000b0fa:	95 68       	st.w	r10[0x18],r8
8000b0fc:	f0 16 00 7a 	mcall	r6[488]
8000b100:	2f 2d       	sub	sp,-56
8000b102:	ee cb 00 6c 	sub	r11,r7,108
8000b106:	ee ca 00 e4 	sub	r10,r7,228
8000b10a:	f6 c8 00 00 	sub	r8,r11,0
8000b10e:	f4 c9 00 00 	sub	r9,r10,0
8000b112:	72 0c       	ld.w	r12,r9[0x0]
8000b114:	91 0c       	st.w	r8[0x0],r12
8000b116:	72 1c       	ld.w	r12,r9[0x4]
8000b118:	91 1c       	st.w	r8[0x4],r12
8000b11a:	72 2c       	ld.w	r12,r9[0x8]
8000b11c:	91 2c       	st.w	r8[0x8],r12
8000b11e:	72 39       	ld.w	r9,r9[0xc]
8000b120:	91 39       	st.w	r8[0xc],r9
8000b122:	f6 c8 ff f0 	sub	r8,r11,-16
8000b126:	f4 c9 ff f0 	sub	r9,r10,-16
8000b12a:	72 0c       	ld.w	r12,r9[0x0]
8000b12c:	91 0c       	st.w	r8[0x0],r12
8000b12e:	72 1c       	ld.w	r12,r9[0x4]
8000b130:	91 1c       	st.w	r8[0x4],r12
8000b132:	72 2c       	ld.w	r12,r9[0x8]
8000b134:	91 2c       	st.w	r8[0x8],r12
8000b136:	72 39       	ld.w	r9,r9[0xc]
8000b138:	91 39       	st.w	r8[0xc],r9
8000b13a:	f6 c8 ff e0 	sub	r8,r11,-32
8000b13e:	f4 c9 ff e0 	sub	r9,r10,-32
8000b142:	72 0a       	ld.w	r10,r9[0x0]
8000b144:	91 0a       	st.w	r8[0x0],r10
8000b146:	72 1a       	ld.w	r10,r9[0x4]
8000b148:	91 1a       	st.w	r8[0x4],r10
8000b14a:	72 2a       	ld.w	r10,r9[0x8]
8000b14c:	91 2a       	st.w	r8[0x8],r10
8000b14e:	72 39       	ld.w	r9,r9[0xc]
8000b150:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b152:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b156:	71 18       	ld.w	r8,r8[0x44]
8000b158:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b15c:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b160:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b164:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b168:	f2 08 01 08 	sub	r8,r9,r8
8000b16c:	10 9c       	mov	r12,r8
8000b16e:	f0 16 00 51 	mcall	r6[324]
8000b172:	30 08       	mov	r8,0
8000b174:	e0 69 40 00 	mov	r9,16384
8000b178:	ea 19 40 8f 	orh	r9,0x408f
8000b17c:	f0 16 00 0c 	mcall	r6[48]
8000b180:	14 98       	mov	r8,r10
8000b182:	16 99       	mov	r9,r11
8000b184:	10 9a       	mov	r10,r8
8000b186:	12 9b       	mov	r11,r9
8000b188:	f0 16 00 08 	mcall	r6[32]
8000b18c:	18 98       	mov	r8,r12
8000b18e:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000b192:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b196:	f0 16 00 02 	mcall	r6[8]
8000b19a:	14 98       	mov	r8,r10
8000b19c:	16 99       	mov	r9,r11
8000b19e:	30 05       	mov	r5,0
8000b1a0:	e0 6a a9 fc 	mov	r10,43516
8000b1a4:	ea 1a d2 f1 	orh	r10,0xd2f1
8000b1a8:	e0 6b 62 4d 	mov	r11,25165
8000b1ac:	ea 1b 3f 50 	orh	r11,0x3f50
8000b1b0:	f0 16 00 1d 	mcall	r6[116]
8000b1b4:	18 98       	mov	r8,r12
8000b1b6:	58 08       	cp.w	r8,0
8000b1b8:	c0 20       	breq	8000b1bc <position_correction+0x2e2>
8000b1ba:	30 15       	mov	r5,1
8000b1bc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b1c0:	c5 90       	breq	8000b272 <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000b1c2:	30 08       	mov	r8,0
8000b1c4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1c8:	c2 58       	rjmp	8000b212 <position_correction+0x338>
8000b1ca:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b1ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b1d2:	a3 68       	lsl	r8,0x2
8000b1d4:	ee 08 00 08 	add	r8,r7,r8
8000b1d8:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000b1dc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b1e0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b1e4:	2d ca       	sub	r10,-36
8000b1e6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b1ea:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b1ee:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b1f2:	10 9c       	mov	r12,r8
8000b1f4:	f0 16 00 0a 	mcall	r6[40]
8000b1f8:	18 98       	mov	r8,r12
8000b1fa:	10 9a       	mov	r10,r8
8000b1fc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b200:	ea c9 ff eb 	sub	r9,r5,-21
8000b204:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b20c:	2f f8       	sub	r8,-1
8000b20e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b212:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b216:	58 28       	cp.w	r8,2
8000b218:	fe 9a ff d9 	brle	8000b1ca <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000b21c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b220:	f0 cb ff 70 	sub	r11,r8,-144
8000b224:	ee ca 00 6c 	sub	r10,r7,108
8000b228:	f6 c8 00 00 	sub	r8,r11,0
8000b22c:	f4 c9 00 00 	sub	r9,r10,0
8000b230:	72 0c       	ld.w	r12,r9[0x0]
8000b232:	91 0c       	st.w	r8[0x0],r12
8000b234:	72 1c       	ld.w	r12,r9[0x4]
8000b236:	91 1c       	st.w	r8[0x4],r12
8000b238:	72 2c       	ld.w	r12,r9[0x8]
8000b23a:	91 2c       	st.w	r8[0x8],r12
8000b23c:	72 39       	ld.w	r9,r9[0xc]
8000b23e:	91 39       	st.w	r8[0xc],r9
8000b240:	f6 c8 ff f0 	sub	r8,r11,-16
8000b244:	f4 c9 ff f0 	sub	r9,r10,-16
8000b248:	72 0c       	ld.w	r12,r9[0x0]
8000b24a:	91 0c       	st.w	r8[0x0],r12
8000b24c:	72 1c       	ld.w	r12,r9[0x4]
8000b24e:	91 1c       	st.w	r8[0x4],r12
8000b250:	72 2c       	ld.w	r12,r9[0x8]
8000b252:	91 2c       	st.w	r8[0x8],r12
8000b254:	72 39       	ld.w	r9,r9[0xc]
8000b256:	91 39       	st.w	r8[0xc],r9
8000b258:	f6 c8 ff e0 	sub	r8,r11,-32
8000b25c:	f4 c9 ff e0 	sub	r9,r10,-32
8000b260:	72 0a       	ld.w	r10,r9[0x0]
8000b262:	91 0a       	st.w	r8[0x0],r10
8000b264:	72 1a       	ld.w	r10,r9[0x4]
8000b266:	91 1a       	st.w	r8[0x4],r10
8000b268:	72 2a       	ld.w	r10,r9[0x8]
8000b26a:	91 2a       	st.w	r8[0x8],r10
8000b26c:	72 39       	ld.w	r9,r9[0xc]
8000b26e:	91 39       	st.w	r8[0xc],r9
8000b270:	c0 58       	rjmp	8000b27a <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000b272:	fe cc 03 ae 	sub	r12,pc,942
8000b276:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000b27a:	f0 16 00 0f 	mcall	r6[60]
8000b27e:	18 99       	mov	r9,r12
8000b280:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b284:	71 18       	ld.w	r8,r8[0x44]
8000b286:	10 19       	sub	r9,r8
8000b288:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000b28c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b290:	f0 16 00 51 	mcall	r6[324]
8000b294:	30 08       	mov	r8,0
8000b296:	e0 69 40 00 	mov	r9,16384
8000b29a:	ea 19 c0 8f 	orh	r9,0xc08f
8000b29e:	f0 16 00 0c 	mcall	r6[48]
8000b2a2:	14 98       	mov	r8,r10
8000b2a4:	16 99       	mov	r9,r11
8000b2a6:	10 9a       	mov	r10,r8
8000b2a8:	12 9b       	mov	r11,r9
8000b2aa:	30 08       	mov	r8,0
8000b2ac:	fc 19 3f f0 	movh	r9,0x3ff0
8000b2b0:	f0 16 00 05 	mcall	r6[20]
8000b2b4:	14 98       	mov	r8,r10
8000b2b6:	16 99       	mov	r9,r11
8000b2b8:	30 05       	mov	r5,0
8000b2ba:	30 0a       	mov	r10,0
8000b2bc:	30 0b       	mov	r11,0
8000b2be:	f0 16 00 1d 	mcall	r6[116]
8000b2c2:	18 98       	mov	r8,r12
8000b2c4:	58 08       	cp.w	r8,0
8000b2c6:	c0 20       	breq	8000b2ca <position_correction+0x3f0>
8000b2c8:	30 15       	mov	r5,1
8000b2ca:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b2ce:	c1 d0       	breq	8000b308 <position_correction+0x42e>
8000b2d0:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b2d4:	f0 16 00 51 	mcall	r6[324]
8000b2d8:	30 08       	mov	r8,0
8000b2da:	e0 69 40 00 	mov	r9,16384
8000b2de:	ea 19 c0 8f 	orh	r9,0xc08f
8000b2e2:	f0 16 00 0c 	mcall	r6[48]
8000b2e6:	14 98       	mov	r8,r10
8000b2e8:	16 99       	mov	r9,r11
8000b2ea:	10 9a       	mov	r10,r8
8000b2ec:	12 9b       	mov	r11,r9
8000b2ee:	30 08       	mov	r8,0
8000b2f0:	fc 19 3f f0 	movh	r9,0x3ff0
8000b2f4:	f0 16 00 05 	mcall	r6[20]
8000b2f8:	14 98       	mov	r8,r10
8000b2fa:	16 99       	mov	r9,r11
8000b2fc:	10 9a       	mov	r10,r8
8000b2fe:	12 9b       	mov	r11,r9
8000b300:	f0 16 00 08 	mcall	r6[32]
8000b304:	18 98       	mov	r8,r12
8000b306:	c0 28       	rjmp	8000b30a <position_correction+0x430>
8000b308:	30 08       	mov	r8,0
8000b30a:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000b30e:	fc 18 3f 80 	movh	r8,0x3f80
8000b312:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000b316:	30 08       	mov	r8,0
8000b318:	ef 48 ff fc 	st.w	r7[-4],r8
8000b31c:	c3 48       	rjmp	8000b384 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000b31e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b322:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b326:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b32a:	2d ca       	sub	r10,-36
8000b32c:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b330:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b334:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b338:	2e 8b       	sub	r11,-24
8000b33a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b33e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b342:	a3 68       	lsl	r8,0x2
8000b344:	ee 08 00 08 	add	r8,r7,r8
8000b348:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000b34c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b350:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b354:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b358:	2e ba       	sub	r10,-21
8000b35a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b35e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b362:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b366:	2f 2b       	sub	r11,-14
8000b368:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b36c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b370:	a3 68       	lsl	r8,0x2
8000b372:	ee 08 00 08 	add	r8,r7,r8
8000b376:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000b37a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b37e:	2f f8       	sub	r8,-1
8000b380:	ef 48 ff fc 	st.w	r7[-4],r8
8000b384:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b388:	58 28       	cp.w	r8,2
8000b38a:	fe 9a ff ca 	brle	8000b31e <position_correction+0x444>
8000b38e:	c2 b8       	rjmp	8000b3e4 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000b390:	ee fb ff 50 	ld.w	r11,r7[-176]
8000b394:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b398:	f0 16 00 e3 	mcall	r6[908]
			for (i=0;i<2;i++){
8000b39c:	30 08       	mov	r8,0
8000b39e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3a2:	c1 68       	rjmp	8000b3ce <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000b3a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3a8:	a3 68       	lsl	r8,0x2
8000b3aa:	ee 08 00 08 	add	r8,r7,r8
8000b3ae:	30 09       	mov	r9,0
8000b3b0:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000b3b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3b8:	a3 68       	lsl	r8,0x2
8000b3ba:	ee 08 00 08 	add	r8,r7,r8
8000b3be:	30 09       	mov	r9,0
8000b3c0:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000b3c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3c8:	2f f8       	sub	r8,-1
8000b3ca:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3d2:	58 18       	cp.w	r8,1
8000b3d4:	fe 9a ff e8 	brle	8000b3a4 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000b3d8:	e0 68 cc cd 	mov	r8,52429
8000b3dc:	ea 18 3d cc 	orh	r8,0x3dcc
8000b3e0:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b3e4:	30 08       	mov	r8,0
8000b3e6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b3ea:	c2 e8       	rjmp	8000b446 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000b3ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3f0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b3f4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b3f8:	2e 8a       	sub	r10,-24
8000b3fa:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b3fe:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b402:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b406:	2f db       	sub	r11,-3
8000b408:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b40c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b410:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b414:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b418:	a3 68       	lsl	r8,0x2
8000b41a:	ee 08 00 08 	add	r8,r7,r8
8000b41e:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000b422:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b426:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b42a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b42e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b432:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b436:	2e 89       	sub	r9,-24
8000b438:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b43c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b440:	2f f8       	sub	r8,-1
8000b442:	ef 48 ff fc 	st.w	r7[-4],r8
8000b446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b44a:	58 28       	cp.w	r8,2
8000b44c:	fe 9a ff d0 	brle	8000b3ec <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000b450:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b454:	71 a9       	ld.w	r9,r8[0x68]
8000b456:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b45a:	70 6a       	ld.w	r10,r8[0x18]
8000b45c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b460:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b464:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000b468:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b46c:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b470:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b474:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b478:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b47c:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000b480:	30 08       	mov	r8,0
8000b482:	ef 48 ff fc 	st.w	r7[-4],r8
8000b486:	c1 68       	rjmp	8000b4b2 <position_correction+0x5d8>
8000b488:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b48c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b490:	a3 68       	lsl	r8,0x2
8000b492:	ee 08 00 08 	add	r8,r7,r8
8000b496:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000b49a:	f4 c8 ff ff 	sub	r8,r10,-1
8000b49e:	a3 68       	lsl	r8,0x2
8000b4a0:	ee 08 00 08 	add	r8,r7,r8
8000b4a4:	f1 49 ff 74 	st.w	r8[-140],r9
8000b4a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4ac:	2f f8       	sub	r8,-1
8000b4ae:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4b6:	58 28       	cp.w	r8,2
8000b4b8:	fe 9a ff e8 	brle	8000b488 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b4bc:	30 08       	mov	r8,0
8000b4be:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4c2:	c2 e8       	rjmp	8000b51e <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000b4c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4c8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b4cc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4d0:	2f 2a       	sub	r10,-14
8000b4d2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b4d6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b4da:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4de:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b4e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b4e6:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b4ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4ee:	2f f8       	sub	r8,-1
8000b4f0:	a3 68       	lsl	r8,0x2
8000b4f2:	ee 08 00 08 	add	r8,r7,r8
8000b4f6:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000b4fa:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b4fe:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b502:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b506:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b50a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b50e:	2f 29       	sub	r9,-14
8000b510:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b514:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b518:	2f f8       	sub	r8,-1
8000b51a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b51e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b522:	58 28       	cp.w	r8,2
8000b524:	fe 9a ff d0 	brle	8000b4c4 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000b528:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b52c:	71 09       	ld.w	r9,r8[0x40]
8000b52e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b532:	70 7a       	ld.w	r10,r8[0x1c]
8000b534:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b538:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b53c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b540:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b544:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b548:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b54c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b550:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b554:	f1 49 00 40 	st.w	r8[64],r9

	}
8000b558:	2c 7d       	sub	sp,-228
8000b55a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b55e:	00 00       	add	r0,r0
8000b560:	80 00       	ld.sh	r0,r0[0x0]
8000b562:	ad 6c       	lsl	r12,0xc

8000b564 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000b564:	eb cd 40 80 	pushm	r7,lr
8000b568:	1a 97       	mov	r7,sp
8000b56a:	20 5d       	sub	sp,20
8000b56c:	18 9a       	mov	r10,r12
8000b56e:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000b572:	30 08       	mov	r8,0
8000b574:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000b578:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b57c:	70 08       	ld.w	r8,r8[0x0]
8000b57e:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000b582:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b586:	2f c8       	sub	r8,-4
8000b588:	70 08       	ld.w	r8,r8[0x0]
8000b58a:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000b58e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b592:	2f 88       	sub	r8,-8
8000b594:	70 08       	ld.w	r8,r8[0x0]
8000b596:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000b59a:	14 98       	mov	r8,r10
8000b59c:	ee c9 00 10 	sub	r9,r7,16
8000b5a0:	20 08       	sub	r8,0
8000b5a2:	20 09       	sub	r9,0
8000b5a4:	72 0b       	ld.w	r11,r9[0x0]
8000b5a6:	91 0b       	st.w	r8[0x0],r11
8000b5a8:	72 1b       	ld.w	r11,r9[0x4]
8000b5aa:	91 1b       	st.w	r8[0x4],r11
8000b5ac:	72 2b       	ld.w	r11,r9[0x8]
8000b5ae:	91 2b       	st.w	r8[0x8],r11
8000b5b0:	72 39       	ld.w	r9,r9[0xc]
8000b5b2:	91 39       	st.w	r8[0xc],r9
}
8000b5b4:	14 9c       	mov	r12,r10
8000b5b6:	2f bd       	sub	sp,-20
8000b5b8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b5bc <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000b5bc:	eb cd 40 80 	pushm	r7,lr
8000b5c0:	1a 97       	mov	r7,sp
8000b5c2:	20 3d       	sub	sp,12
8000b5c4:	ef 4c ff f8 	st.w	r7[-8],r12
8000b5c8:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000b5cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b5d0:	70 09       	ld.w	r9,r8[0x0]
8000b5d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5d6:	70 08       	ld.w	r8,r8[0x0]
8000b5d8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b5dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b5e0:	2f c8       	sub	r8,-4
8000b5e2:	70 0a       	ld.w	r10,r8[0x0]
8000b5e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5e8:	2f c8       	sub	r8,-4
8000b5ea:	70 08       	ld.w	r8,r8[0x0]
8000b5ec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b5f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b5f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b5f8:	2f 88       	sub	r8,-8
8000b5fa:	70 0a       	ld.w	r10,r8[0x0]
8000b5fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b600:	2f 88       	sub	r8,-8
8000b602:	70 08       	ld.w	r8,r8[0x0]
8000b604:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b608:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b60c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000b610:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b614:	10 9c       	mov	r12,r8
8000b616:	2f dd       	sub	sp,-12
8000b618:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b61c <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000b61c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000b620:	1a 97       	mov	r7,sp
8000b622:	20 7d       	sub	sp,28
8000b624:	4b d6       	lddpc	r6,8000b718 <quat_multi+0xfc>
8000b626:	1e 26       	rsub	r6,pc
8000b628:	ee c8 ff ec 	sub	r8,r7,-20
8000b62c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000b62e:	70 2a       	ld.w	r10,r8[0x8]
8000b630:	70 79       	ld.w	r9,r8[0x1c]
8000b632:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b636:	70 3b       	ld.w	r11,r8[0xc]
8000b638:	70 69       	ld.w	r9,r8[0x18]
8000b63a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b63e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b642:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000b646:	70 3a       	ld.w	r10,r8[0xc]
8000b648:	70 59       	ld.w	r9,r8[0x14]
8000b64a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b64e:	70 1b       	ld.w	r11,r8[0x4]
8000b650:	70 79       	ld.w	r9,r8[0x1c]
8000b652:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b656:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b65a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000b65e:	70 1a       	ld.w	r10,r8[0x4]
8000b660:	70 69       	ld.w	r9,r8[0x18]
8000b662:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b666:	70 2b       	ld.w	r11,r8[0x8]
8000b668:	70 59       	ld.w	r9,r8[0x14]
8000b66a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b66e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b672:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000b676:	70 4a       	ld.w	r10,r8[0x10]
8000b678:	70 19       	ld.w	r9,r8[0x4]
8000b67a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b67e:	70 0b       	ld.w	r11,r8[0x0]
8000b680:	70 59       	ld.w	r9,r8[0x14]
8000b682:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b686:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b68a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b68e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b692:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000b696:	70 4a       	ld.w	r10,r8[0x10]
8000b698:	70 29       	ld.w	r9,r8[0x8]
8000b69a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b69e:	70 0b       	ld.w	r11,r8[0x0]
8000b6a0:	70 69       	ld.w	r9,r8[0x18]
8000b6a2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b6a6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b6aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b6ae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b6b2:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000b6b6:	70 4a       	ld.w	r10,r8[0x10]
8000b6b8:	70 39       	ld.w	r9,r8[0xc]
8000b6ba:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b6be:	70 0b       	ld.w	r11,r8[0x0]
8000b6c0:	70 79       	ld.w	r9,r8[0x1c]
8000b6c2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b6c6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b6ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b6ce:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b6d2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000b6d6:	70 0a       	ld.w	r10,r8[0x0]
8000b6d8:	70 49       	ld.w	r9,r8[0x10]
8000b6da:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000b6de:	f0 c9 ff f0 	sub	r9,r8,-16
8000b6e2:	2f c9       	sub	r9,-4
8000b6e4:	2f c8       	sub	r8,-4
8000b6e6:	12 9b       	mov	r11,r9
8000b6e8:	10 9c       	mov	r12,r8
8000b6ea:	c6 9f       	rcall	8000b5bc <scalar_product>
8000b6ec:	18 98       	mov	r8,r12
8000b6ee:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000b6f2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000b6f6:	0a 98       	mov	r8,r5
8000b6f8:	ee c9 00 1c 	sub	r9,r7,28
8000b6fc:	20 08       	sub	r8,0
8000b6fe:	20 09       	sub	r9,0
8000b700:	72 0a       	ld.w	r10,r9[0x0]
8000b702:	91 0a       	st.w	r8[0x0],r10
8000b704:	72 1a       	ld.w	r10,r9[0x4]
8000b706:	91 1a       	st.w	r8[0x4],r10
8000b708:	72 2a       	ld.w	r10,r9[0x8]
8000b70a:	91 2a       	st.w	r8[0x8],r10
8000b70c:	72 39       	ld.w	r9,r9[0xc]
8000b70e:	91 39       	st.w	r8[0xc],r9
}
8000b710:	0a 9c       	mov	r12,r5
8000b712:	2f 9d       	sub	sp,-28
8000b714:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000b718:	80 00       	ld.sh	r0,r0[0x0]
8000b71a:	b4 aa       	st.b	r10[0x2],r10

8000b71c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000b71c:	eb cd 40 80 	pushm	r7,lr
8000b720:	1a 97       	mov	r7,sp
8000b722:	20 5d       	sub	sp,20
8000b724:	ee c9 ff f8 	sub	r9,r7,-8
8000b728:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000b72a:	72 08       	ld.w	r8,r9[0x0]
8000b72c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000b730:	30 08       	mov	r8,0
8000b732:	ef 48 ff fc 	st.w	r7[-4],r8
8000b736:	c1 58       	rjmp	8000b760 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000b738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b73c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b740:	2f fb       	sub	r11,-1
8000b742:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000b746:	ee 1b 80 00 	eorh	r11,0x8000
8000b74a:	2f f8       	sub	r8,-1
8000b74c:	a3 68       	lsl	r8,0x2
8000b74e:	ee 08 00 08 	add	r8,r7,r8
8000b752:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000b756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b75a:	2f f8       	sub	r8,-1
8000b75c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b760:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b764:	58 28       	cp.w	r8,2
8000b766:	fe 9a ff e9 	brle	8000b738 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000b76a:	14 98       	mov	r8,r10
8000b76c:	ee c9 00 14 	sub	r9,r7,20
8000b770:	20 08       	sub	r8,0
8000b772:	20 09       	sub	r9,0
8000b774:	72 0b       	ld.w	r11,r9[0x0]
8000b776:	91 0b       	st.w	r8[0x0],r11
8000b778:	72 1b       	ld.w	r11,r9[0x4]
8000b77a:	91 1b       	st.w	r8[0x4],r11
8000b77c:	72 2b       	ld.w	r11,r9[0x8]
8000b77e:	91 2b       	st.w	r8[0x8],r11
8000b780:	72 39       	ld.w	r9,r9[0xc]
8000b782:	91 39       	st.w	r8[0xc],r9
}
8000b784:	14 9c       	mov	r12,r10
8000b786:	2f bd       	sub	sp,-20
8000b788:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b78c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000b78c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000b790:	1a 97       	mov	r7,sp
8000b792:	20 cd       	sub	sp,48
8000b794:	4b c6       	lddpc	r6,8000b884 <quat_global_to_local+0xf8>
8000b796:	1e 26       	rsub	r6,pc
8000b798:	ee c5 ff ec 	sub	r5,r7,-20
8000b79c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000b79e:	ee ca 00 10 	sub	r10,r7,16
8000b7a2:	20 4d       	sub	sp,16
8000b7a4:	1a 98       	mov	r8,sp
8000b7a6:	0a 99       	mov	r9,r5
8000b7a8:	20 08       	sub	r8,0
8000b7aa:	20 09       	sub	r9,0
8000b7ac:	72 0b       	ld.w	r11,r9[0x0]
8000b7ae:	91 0b       	st.w	r8[0x0],r11
8000b7b0:	72 1b       	ld.w	r11,r9[0x4]
8000b7b2:	91 1b       	st.w	r8[0x4],r11
8000b7b4:	72 2b       	ld.w	r11,r9[0x8]
8000b7b6:	91 2b       	st.w	r8[0x8],r11
8000b7b8:	72 39       	ld.w	r9,r9[0xc]
8000b7ba:	91 39       	st.w	r8[0xc],r9
8000b7bc:	14 9c       	mov	r12,r10
8000b7be:	ca ff       	rcall	8000b71c <quat_inv>
8000b7c0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000b7c2:	ee ca 00 20 	sub	r10,r7,32
8000b7c6:	20 4d       	sub	sp,16
8000b7c8:	1a 98       	mov	r8,sp
8000b7ca:	ea c9 ff f0 	sub	r9,r5,-16
8000b7ce:	20 08       	sub	r8,0
8000b7d0:	20 09       	sub	r9,0
8000b7d2:	72 0b       	ld.w	r11,r9[0x0]
8000b7d4:	91 0b       	st.w	r8[0x0],r11
8000b7d6:	72 1b       	ld.w	r11,r9[0x4]
8000b7d8:	91 1b       	st.w	r8[0x4],r11
8000b7da:	72 2b       	ld.w	r11,r9[0x8]
8000b7dc:	91 2b       	st.w	r8[0x8],r11
8000b7de:	72 39       	ld.w	r9,r9[0xc]
8000b7e0:	91 39       	st.w	r8[0xc],r9
8000b7e2:	20 4d       	sub	sp,16
8000b7e4:	1a 98       	mov	r8,sp
8000b7e6:	ee c9 00 10 	sub	r9,r7,16
8000b7ea:	20 08       	sub	r8,0
8000b7ec:	20 09       	sub	r9,0
8000b7ee:	72 0b       	ld.w	r11,r9[0x0]
8000b7f0:	91 0b       	st.w	r8[0x0],r11
8000b7f2:	72 1b       	ld.w	r11,r9[0x4]
8000b7f4:	91 1b       	st.w	r8[0x4],r11
8000b7f6:	72 2b       	ld.w	r11,r9[0x8]
8000b7f8:	91 2b       	st.w	r8[0x8],r11
8000b7fa:	72 39       	ld.w	r9,r9[0xc]
8000b7fc:	91 39       	st.w	r8[0xc],r9
8000b7fe:	14 9c       	mov	r12,r10
8000b800:	c0 ef       	rcall	8000b61c <quat_multi>
8000b802:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000b804:	ee ca 00 30 	sub	r10,r7,48
8000b808:	20 4d       	sub	sp,16
8000b80a:	1a 98       	mov	r8,sp
8000b80c:	0a 99       	mov	r9,r5
8000b80e:	20 08       	sub	r8,0
8000b810:	20 09       	sub	r9,0
8000b812:	72 0b       	ld.w	r11,r9[0x0]
8000b814:	91 0b       	st.w	r8[0x0],r11
8000b816:	72 1b       	ld.w	r11,r9[0x4]
8000b818:	91 1b       	st.w	r8[0x4],r11
8000b81a:	72 2b       	ld.w	r11,r9[0x8]
8000b81c:	91 2b       	st.w	r8[0x8],r11
8000b81e:	72 39       	ld.w	r9,r9[0xc]
8000b820:	91 39       	st.w	r8[0xc],r9
8000b822:	20 4d       	sub	sp,16
8000b824:	1a 98       	mov	r8,sp
8000b826:	ee c9 00 20 	sub	r9,r7,32
8000b82a:	20 08       	sub	r8,0
8000b82c:	20 09       	sub	r9,0
8000b82e:	72 0b       	ld.w	r11,r9[0x0]
8000b830:	91 0b       	st.w	r8[0x0],r11
8000b832:	72 1b       	ld.w	r11,r9[0x4]
8000b834:	91 1b       	st.w	r8[0x4],r11
8000b836:	72 2b       	ld.w	r11,r9[0x8]
8000b838:	91 2b       	st.w	r8[0x8],r11
8000b83a:	72 39       	ld.w	r9,r9[0xc]
8000b83c:	91 39       	st.w	r8[0xc],r9
8000b83e:	14 9c       	mov	r12,r10
8000b840:	ce ee       	rcall	8000b61c <quat_multi>
8000b842:	2f 8d       	sub	sp,-32
8000b844:	ee c8 00 20 	sub	r8,r7,32
8000b848:	ee c9 00 30 	sub	r9,r7,48
8000b84c:	20 08       	sub	r8,0
8000b84e:	20 09       	sub	r9,0
8000b850:	72 0a       	ld.w	r10,r9[0x0]
8000b852:	91 0a       	st.w	r8[0x0],r10
8000b854:	72 1a       	ld.w	r10,r9[0x4]
8000b856:	91 1a       	st.w	r8[0x4],r10
8000b858:	72 2a       	ld.w	r10,r9[0x8]
8000b85a:	91 2a       	st.w	r8[0x8],r10
8000b85c:	72 39       	ld.w	r9,r9[0xc]
8000b85e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000b860:	06 98       	mov	r8,r3
8000b862:	ee c9 00 20 	sub	r9,r7,32
8000b866:	20 08       	sub	r8,0
8000b868:	20 09       	sub	r9,0
8000b86a:	72 0a       	ld.w	r10,r9[0x0]
8000b86c:	91 0a       	st.w	r8[0x0],r10
8000b86e:	72 1a       	ld.w	r10,r9[0x4]
8000b870:	91 1a       	st.w	r8[0x4],r10
8000b872:	72 2a       	ld.w	r10,r9[0x8]
8000b874:	91 2a       	st.w	r8[0x8],r10
8000b876:	72 39       	ld.w	r9,r9[0xc]
8000b878:	91 39       	st.w	r8[0xc],r9
}
8000b87a:	06 9c       	mov	r12,r3
8000b87c:	2f 4d       	sub	sp,-48
8000b87e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000b882:	00 00       	add	r0,r0
8000b884:	80 00       	ld.sh	r0,r0[0x0]
8000b886:	b6 1a       	st.h	r11[0x2],r10

8000b888 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000b888:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000b88c:	1a 97       	mov	r7,sp
8000b88e:	20 cd       	sub	sp,48
8000b890:	4b c6       	lddpc	r6,8000b980 <quat_local_to_global+0xf8>
8000b892:	1e 26       	rsub	r6,pc
8000b894:	ee c5 ff ec 	sub	r5,r7,-20
8000b898:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000b89a:	ee ca 00 10 	sub	r10,r7,16
8000b89e:	20 4d       	sub	sp,16
8000b8a0:	1a 98       	mov	r8,sp
8000b8a2:	0a 99       	mov	r9,r5
8000b8a4:	20 08       	sub	r8,0
8000b8a6:	20 09       	sub	r9,0
8000b8a8:	72 0b       	ld.w	r11,r9[0x0]
8000b8aa:	91 0b       	st.w	r8[0x0],r11
8000b8ac:	72 1b       	ld.w	r11,r9[0x4]
8000b8ae:	91 1b       	st.w	r8[0x4],r11
8000b8b0:	72 2b       	ld.w	r11,r9[0x8]
8000b8b2:	91 2b       	st.w	r8[0x8],r11
8000b8b4:	72 39       	ld.w	r9,r9[0xc]
8000b8b6:	91 39       	st.w	r8[0xc],r9
8000b8b8:	14 9c       	mov	r12,r10
8000b8ba:	c3 1f       	rcall	8000b71c <quat_inv>
8000b8bc:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000b8be:	ee ca 00 20 	sub	r10,r7,32
8000b8c2:	20 4d       	sub	sp,16
8000b8c4:	1a 98       	mov	r8,sp
8000b8c6:	ea c9 ff f0 	sub	r9,r5,-16
8000b8ca:	20 08       	sub	r8,0
8000b8cc:	20 09       	sub	r9,0
8000b8ce:	72 0b       	ld.w	r11,r9[0x0]
8000b8d0:	91 0b       	st.w	r8[0x0],r11
8000b8d2:	72 1b       	ld.w	r11,r9[0x4]
8000b8d4:	91 1b       	st.w	r8[0x4],r11
8000b8d6:	72 2b       	ld.w	r11,r9[0x8]
8000b8d8:	91 2b       	st.w	r8[0x8],r11
8000b8da:	72 39       	ld.w	r9,r9[0xc]
8000b8dc:	91 39       	st.w	r8[0xc],r9
8000b8de:	20 4d       	sub	sp,16
8000b8e0:	1a 98       	mov	r8,sp
8000b8e2:	0a 99       	mov	r9,r5
8000b8e4:	20 08       	sub	r8,0
8000b8e6:	20 09       	sub	r9,0
8000b8e8:	72 0b       	ld.w	r11,r9[0x0]
8000b8ea:	91 0b       	st.w	r8[0x0],r11
8000b8ec:	72 1b       	ld.w	r11,r9[0x4]
8000b8ee:	91 1b       	st.w	r8[0x4],r11
8000b8f0:	72 2b       	ld.w	r11,r9[0x8]
8000b8f2:	91 2b       	st.w	r8[0x8],r11
8000b8f4:	72 39       	ld.w	r9,r9[0xc]
8000b8f6:	91 39       	st.w	r8[0xc],r9
8000b8f8:	14 9c       	mov	r12,r10
8000b8fa:	c9 1e       	rcall	8000b61c <quat_multi>
8000b8fc:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000b8fe:	ee ca 00 30 	sub	r10,r7,48
8000b902:	20 4d       	sub	sp,16
8000b904:	1a 98       	mov	r8,sp
8000b906:	ee c9 00 10 	sub	r9,r7,16
8000b90a:	20 08       	sub	r8,0
8000b90c:	20 09       	sub	r9,0
8000b90e:	72 0b       	ld.w	r11,r9[0x0]
8000b910:	91 0b       	st.w	r8[0x0],r11
8000b912:	72 1b       	ld.w	r11,r9[0x4]
8000b914:	91 1b       	st.w	r8[0x4],r11
8000b916:	72 2b       	ld.w	r11,r9[0x8]
8000b918:	91 2b       	st.w	r8[0x8],r11
8000b91a:	72 39       	ld.w	r9,r9[0xc]
8000b91c:	91 39       	st.w	r8[0xc],r9
8000b91e:	20 4d       	sub	sp,16
8000b920:	1a 98       	mov	r8,sp
8000b922:	ee c9 00 20 	sub	r9,r7,32
8000b926:	20 08       	sub	r8,0
8000b928:	20 09       	sub	r9,0
8000b92a:	72 0b       	ld.w	r11,r9[0x0]
8000b92c:	91 0b       	st.w	r8[0x0],r11
8000b92e:	72 1b       	ld.w	r11,r9[0x4]
8000b930:	91 1b       	st.w	r8[0x4],r11
8000b932:	72 2b       	ld.w	r11,r9[0x8]
8000b934:	91 2b       	st.w	r8[0x8],r11
8000b936:	72 39       	ld.w	r9,r9[0xc]
8000b938:	91 39       	st.w	r8[0xc],r9
8000b93a:	14 9c       	mov	r12,r10
8000b93c:	c7 0e       	rcall	8000b61c <quat_multi>
8000b93e:	2f 8d       	sub	sp,-32
8000b940:	ee c8 00 20 	sub	r8,r7,32
8000b944:	ee c9 00 30 	sub	r9,r7,48
8000b948:	20 08       	sub	r8,0
8000b94a:	20 09       	sub	r9,0
8000b94c:	72 0a       	ld.w	r10,r9[0x0]
8000b94e:	91 0a       	st.w	r8[0x0],r10
8000b950:	72 1a       	ld.w	r10,r9[0x4]
8000b952:	91 1a       	st.w	r8[0x4],r10
8000b954:	72 2a       	ld.w	r10,r9[0x8]
8000b956:	91 2a       	st.w	r8[0x8],r10
8000b958:	72 39       	ld.w	r9,r9[0xc]
8000b95a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000b95c:	06 98       	mov	r8,r3
8000b95e:	ee c9 00 20 	sub	r9,r7,32
8000b962:	20 08       	sub	r8,0
8000b964:	20 09       	sub	r9,0
8000b966:	72 0a       	ld.w	r10,r9[0x0]
8000b968:	91 0a       	st.w	r8[0x0],r10
8000b96a:	72 1a       	ld.w	r10,r9[0x4]
8000b96c:	91 1a       	st.w	r8[0x4],r10
8000b96e:	72 2a       	ld.w	r10,r9[0x8]
8000b970:	91 2a       	st.w	r8[0x8],r10
8000b972:	72 39       	ld.w	r9,r9[0xc]
8000b974:	91 39       	st.w	r8[0xc],r9
}
8000b976:	06 9c       	mov	r12,r3
8000b978:	2f 4d       	sub	sp,-48
8000b97a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000b97e:	00 00       	add	r0,r0
8000b980:	80 00       	ld.sh	r0,r0[0x0]
8000b982:	b7 16       	ld.d	r6,--r11

8000b984 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000b984:	eb cd 40 c0 	pushm	r6-r7,lr
8000b988:	1a 97       	mov	r7,sp
8000b98a:	20 2d       	sub	sp,8
8000b98c:	4b 26       	lddpc	r6,8000ba54 <fast_sqrt+0xd0>
8000b98e:	1e 26       	rsub	r6,pc
8000b990:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000b994:	30 18       	mov	r8,1
8000b996:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b99a:	30 09       	mov	r9,0
8000b99c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000b9a0:	e0 8c 00 03 	brvs	8000b9a6 <fast_sqrt+0x22>
8000b9a4:	c0 25       	brlt	8000b9a8 <fast_sqrt+0x24>
8000b9a6:	30 08       	mov	r8,0
8000b9a8:	5c 58       	castu.b	r8
8000b9aa:	c0 30       	breq	8000b9b0 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000b9ac:	30 08       	mov	r8,0
8000b9ae:	c4 f8       	rjmp	8000ba4c <fast_sqrt+0xc8>
	}
	float result=1.0;
8000b9b0:	fc 18 3f 80 	movh	r8,0x3f80
8000b9b4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000b9b8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b9bc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b9c0:	f0 16 00 0a 	mcall	r6[40]
8000b9c4:	18 98       	mov	r8,r12
8000b9c6:	10 99       	mov	r9,r8
8000b9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9d0:	fc 18 3f 00 	movh	r8,0x3f00
8000b9d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b9d8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000b9dc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b9e0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b9e4:	f0 16 00 0a 	mcall	r6[40]
8000b9e8:	18 98       	mov	r8,r12
8000b9ea:	10 99       	mov	r9,r8
8000b9ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b9f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9f4:	fc 18 3f 00 	movh	r8,0x3f00
8000b9f8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b9fc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000ba00:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba04:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ba08:	f0 16 00 0a 	mcall	r6[40]
8000ba0c:	18 98       	mov	r8,r12
8000ba0e:	10 99       	mov	r9,r8
8000ba10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba14:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ba18:	fc 18 3f 00 	movh	r8,0x3f00
8000ba1c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ba20:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000ba24:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba28:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ba2c:	f0 16 00 0a 	mcall	r6[40]
8000ba30:	18 98       	mov	r8,r12
8000ba32:	10 99       	mov	r9,r8
8000ba34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba38:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ba3c:	fc 18 3f 00 	movh	r8,0x3f00
8000ba40:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ba44:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000ba48:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ba4c:	10 9c       	mov	r12,r8
8000ba4e:	2f ed       	sub	sp,-8
8000ba50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ba54:	80 00       	ld.sh	r0,r0[0x0]
8000ba56:	b8 12       	st.h	r12[0x2],r2
8000ba58:	49 6e       	lddpc	lr,8000bab0 <qfInit+0x12>
8000ba5a:	69 74       	ld.w	r4,r4[0x5c]
8000ba5c:	69 61       	ld.w	r1,r4[0x58]
8000ba5e:	6c 20       	ld.w	r0,r6[0x8]
8000ba60:	79 61       	ld.w	r1,r12[0x58]
8000ba62:	77 3a       	ld.w	r10,r11[0x4c]
8000ba64:	00 00       	add	r0,r0
8000ba66:	00 00       	add	r0,r0
8000ba68:	20 3d       	sub	sp,12
8000ba6a:	20 61       	sub	r1,6
8000ba6c:	74 61       	ld.w	r1,r10[0x18]
8000ba6e:	6e 32       	ld.w	r2,r7[0xc]
8000ba70:	28 6d       	sub	sp,-488
8000ba72:	61 67       	ld.w	r7,r0[0x58]
8000ba74:	5f 79       	srpl	r9
8000ba76:	2c 6d       	sub	sp,-232
8000ba78:	61 67       	ld.w	r7,r0[0x58]
8000ba7a:	5f 78       	srpl	r8
8000ba7c:	29 20       	sub	r0,-110
8000ba7e:	3d 00       	mov	r0,-48
8000ba80:	20 2c       	sub	r12,2
8000ba82:	00 00       	add	r0,r0
8000ba84:	0a 00       	add	r0,r5
8000ba86:	00 00       	add	r0,r0
8000ba88:	46 72       	lddsp	r2,sp[0x19c]
8000ba8a:	6f 6e       	ld.w	lr,r7[0x58]
8000ba8c:	74 20       	ld.w	r0,r10[0x8]
8000ba8e:	6d 61       	ld.w	r1,r6[0x58]
8000ba90:	67 28       	ld.w	r8,r3[0x48]
8000ba92:	7a 29       	ld.w	r9,sp[0x8]
8000ba94:	20 28       	sub	r8,2
8000ba96:	2a 31       	sub	r1,-93
8000ba98:	30 30       	mov	r0,3
8000ba9a:	29 3a       	sub	r10,-109
	...

8000ba9e <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000ba9e:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000baa2:	1a 97       	mov	r7,sp
8000baa4:	20 5d       	sub	sp,20
8000baa6:	fe f6 03 46 	ld.w	r6,pc[838]
8000baaa:	1e 26       	rsub	r6,pc
8000baac:	ef 4c ff f4 	st.w	r7[-12],r12
8000bab0:	ef 4b ff f0 	st.w	r7[-16],r11
8000bab4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000bab8:	30 08       	mov	r8,0
8000baba:	ef 68 ff fb 	st.b	r7[-5],r8
8000babe:	c2 c8       	rjmp	8000bb16 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000bac0:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000bac4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bac8:	a3 68       	lsl	r8,0x2
8000baca:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bace:	f2 08 00 08 	add	r8,r9,r8
8000bad2:	70 08       	ld.w	r8,r8[0x0]
8000bad4:	10 9b       	mov	r11,r8
8000bad6:	fc 1c 3f 80 	movh	r12,0x3f80
8000bada:	f0 16 00 0a 	mcall	r6[40]
8000bade:	18 98       	mov	r8,r12
8000bae0:	10 9a       	mov	r10,r8
8000bae2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bae6:	ea c9 ff eb 	sub	r9,r5,-21
8000baea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000baee:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000baf2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000baf6:	a3 68       	lsl	r8,0x2
8000baf8:	ee fa ff ec 	ld.w	r10,r7[-20]
8000bafc:	f4 08 00 08 	add	r8,r10,r8
8000bb00:	70 0a       	ld.w	r10,r8[0x0]
8000bb02:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb06:	2f 49       	sub	r9,-12
8000bb08:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000bb0c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bb10:	2f f8       	sub	r8,-1
8000bb12:	ef 68 ff fb 	st.b	r7[-5],r8
8000bb16:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bb1a:	30 88       	mov	r8,8
8000bb1c:	f0 09 18 00 	cp.b	r9,r8
8000bb20:	fe 98 ff d0 	brls	8000bac0 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000bb24:	30 08       	mov	r8,0
8000bb26:	ef 68 ff fb 	st.b	r7[-5],r8
8000bb2a:	c0 e8       	rjmp	8000bb46 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000bb2c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bb30:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb34:	2d 09       	sub	r9,-48
8000bb36:	30 0a       	mov	r10,0
8000bb38:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000bb3c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bb40:	2f f8       	sub	r8,-1
8000bb42:	ef 68 ff fb 	st.b	r7[-5],r8
8000bb46:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bb4a:	30 28       	mov	r8,2
8000bb4c:	f0 09 18 00 	cp.b	r9,r8
8000bb50:	fe 98 ff ee 	brls	8000bb2c <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000bb54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb58:	fc 19 3f 80 	movh	r9,0x3f80
8000bb5c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000bb5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb62:	30 09       	mov	r9,0
8000bb64:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000bb66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb6a:	30 09       	mov	r9,0
8000bb6c:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000bb6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb72:	30 09       	mov	r9,0
8000bb74:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000bb76:	30 08       	mov	r8,0
8000bb78:	ef 68 ff fb 	st.b	r7[-5],r8
8000bb7c:	c2 a8       	rjmp	8000bbd0 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000bb7e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bb82:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000bb86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb8a:	2d 5a       	sub	r10,-43
8000bb8c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bb90:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bb94:	f0 cb ff fa 	sub	r11,r8,-6
8000bb98:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb9c:	2e bb       	sub	r11,-21
8000bb9e:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000bba2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bba6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bbaa:	f0 cb ff fa 	sub	r11,r8,-6
8000bbae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bbb2:	2f 4b       	sub	r11,-12
8000bbb4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000bbb8:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000bbbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bbc0:	2d c9       	sub	r9,-36
8000bbc2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000bbc6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bbca:	2f f8       	sub	r8,-1
8000bbcc:	ef 68 ff fb 	st.b	r7[-5],r8
8000bbd0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bbd4:	30 28       	mov	r8,2
8000bbd6:	f0 09 18 00 	cp.b	r9,r8
8000bbda:	fe 98 ff d2 	brls	8000bb7e <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000bbde:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bbe2:	f0 f8 00 90 	ld.w	r8,r8[144]
8000bbe6:	10 9c       	mov	r12,r8
8000bbe8:	f0 16 00 02 	mcall	r6[8]
8000bbec:	14 92       	mov	r2,r10
8000bbee:	16 93       	mov	r3,r11
8000bbf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bbf4:	f0 f8 00 94 	ld.w	r8,r8[148]
8000bbf8:	ee 18 80 00 	eorh	r8,0x8000
8000bbfc:	10 9c       	mov	r12,r8
8000bbfe:	f0 16 00 02 	mcall	r6[8]
8000bc02:	04 98       	mov	r8,r2
8000bc04:	06 99       	mov	r9,r3
8000bc06:	f0 16 00 52 	mcall	r6[328]
8000bc0a:	14 98       	mov	r8,r10
8000bc0c:	16 99       	mov	r9,r11
8000bc0e:	10 9a       	mov	r10,r8
8000bc10:	12 9b       	mov	r11,r9
8000bc12:	f0 16 00 08 	mcall	r6[32]
8000bc16:	18 98       	mov	r8,r12
8000bc18:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000bc1c:	fe cc 01 c4 	sub	r12,pc,452
8000bc20:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000bc24:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bc28:	f0 16 00 02 	mcall	r6[8]
8000bc2c:	30 08       	mov	r8,0
8000bc2e:	fc 19 40 59 	movh	r9,0x4059
8000bc32:	f0 16 00 03 	mcall	r6[12]
8000bc36:	14 98       	mov	r8,r10
8000bc38:	16 99       	mov	r9,r11
8000bc3a:	10 9a       	mov	r10,r8
8000bc3c:	12 9b       	mov	r11,r9
8000bc3e:	f0 16 00 14 	mcall	r6[80]
8000bc42:	18 98       	mov	r8,r12
8000bc44:	30 ab       	mov	r11,10
8000bc46:	10 9c       	mov	r12,r8
8000bc48:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000bc4c:	fe cc 01 e4 	sub	r12,pc,484
8000bc50:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000bc54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bc58:	f0 f8 00 94 	ld.w	r8,r8[148]
8000bc5c:	10 9c       	mov	r12,r8
8000bc5e:	f0 16 00 02 	mcall	r6[8]
8000bc62:	30 08       	mov	r8,0
8000bc64:	fc 19 40 59 	movh	r9,0x4059
8000bc68:	f0 16 00 03 	mcall	r6[12]
8000bc6c:	14 98       	mov	r8,r10
8000bc6e:	16 99       	mov	r9,r11
8000bc70:	10 9a       	mov	r10,r8
8000bc72:	12 9b       	mov	r11,r9
8000bc74:	f0 16 00 14 	mcall	r6[80]
8000bc78:	18 98       	mov	r8,r12
8000bc7a:	30 ab       	mov	r11,10
8000bc7c:	10 9c       	mov	r12,r8
8000bc7e:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000bc82:	fe cc 02 02 	sub	r12,pc,514
8000bc86:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000bc8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bc8e:	f0 f8 00 90 	ld.w	r8,r8[144]
8000bc92:	10 9c       	mov	r12,r8
8000bc94:	f0 16 00 02 	mcall	r6[8]
8000bc98:	30 08       	mov	r8,0
8000bc9a:	fc 19 40 59 	movh	r9,0x4059
8000bc9e:	f0 16 00 03 	mcall	r6[12]
8000bca2:	14 98       	mov	r8,r10
8000bca4:	16 99       	mov	r9,r11
8000bca6:	10 9a       	mov	r10,r8
8000bca8:	12 9b       	mov	r11,r9
8000bcaa:	f0 16 00 14 	mcall	r6[80]
8000bcae:	18 98       	mov	r8,r12
8000bcb0:	30 ab       	mov	r11,10
8000bcb2:	10 9c       	mov	r12,r8
8000bcb4:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000bcb8:	fe cc 02 34 	sub	r12,pc,564
8000bcbc:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000bcc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcc4:	f0 f9 00 98 	ld.w	r9,r8[152]
8000bcc8:	ec f8 03 9c 	ld.w	r8,r6[924]
8000bccc:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000bcce:	fe cc 02 46 	sub	r12,pc,582
8000bcd2:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000bcd6:	ec f8 03 9c 	ld.w	r8,r6[924]
8000bcda:	70 08       	ld.w	r8,r8[0x0]
8000bcdc:	10 9c       	mov	r12,r8
8000bcde:	f0 16 00 02 	mcall	r6[8]
8000bce2:	30 08       	mov	r8,0
8000bce4:	fc 19 40 59 	movh	r9,0x4059
8000bce8:	f0 16 00 03 	mcall	r6[12]
8000bcec:	14 98       	mov	r8,r10
8000bcee:	16 99       	mov	r9,r11
8000bcf0:	10 9a       	mov	r10,r8
8000bcf2:	12 9b       	mov	r11,r9
8000bcf4:	f0 16 00 14 	mcall	r6[80]
8000bcf8:	18 98       	mov	r8,r12
8000bcfa:	30 ab       	mov	r11,10
8000bcfc:	10 9c       	mov	r12,r8
8000bcfe:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000bd02:	fe cc 02 7e 	sub	r12,pc,638
8000bd06:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000bd0a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bd0e:	f0 16 00 02 	mcall	r6[8]
8000bd12:	30 08       	mov	r8,0
8000bd14:	fc 19 40 00 	movh	r9,0x4000
8000bd18:	f0 16 00 0c 	mcall	r6[48]
8000bd1c:	14 98       	mov	r8,r10
8000bd1e:	16 99       	mov	r9,r11
8000bd20:	10 9a       	mov	r10,r8
8000bd22:	12 9b       	mov	r11,r9
8000bd24:	f0 16 00 ba 	mcall	r6[744]
8000bd28:	14 98       	mov	r8,r10
8000bd2a:	16 99       	mov	r9,r11
8000bd2c:	10 9a       	mov	r10,r8
8000bd2e:	12 9b       	mov	r11,r9
8000bd30:	f0 16 00 08 	mcall	r6[32]
8000bd34:	18 99       	mov	r9,r12
8000bd36:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd3a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000bd3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd40:	30 09       	mov	r9,0
8000bd42:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000bd44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd48:	30 09       	mov	r9,0
8000bd4a:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000bd4c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bd50:	f0 16 00 02 	mcall	r6[8]
8000bd54:	30 08       	mov	r8,0
8000bd56:	fc 19 40 00 	movh	r9,0x4000
8000bd5a:	f0 16 00 0c 	mcall	r6[48]
8000bd5e:	14 98       	mov	r8,r10
8000bd60:	16 99       	mov	r9,r11
8000bd62:	10 9a       	mov	r10,r8
8000bd64:	12 9b       	mov	r11,r9
8000bd66:	f0 16 00 b8 	mcall	r6[736]
8000bd6a:	14 98       	mov	r8,r10
8000bd6c:	16 99       	mov	r9,r11
8000bd6e:	10 9a       	mov	r10,r8
8000bd70:	12 9b       	mov	r11,r9
8000bd72:	f0 16 00 08 	mcall	r6[32]
8000bd76:	18 99       	mov	r9,r12
8000bd78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd7c:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000bd7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd82:	e0 69 51 ec 	mov	r9,20972
8000bd86:	ea 19 3d b8 	orh	r9,0x3db8
8000bd8a:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000bd8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd92:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bd96:	fc 1b 41 70 	movh	r11,0x4170
8000bd9a:	10 9c       	mov	r12,r8
8000bd9c:	f0 16 00 0a 	mcall	r6[40]
8000bda0:	18 98       	mov	r8,r12
8000bda2:	10 99       	mov	r9,r8
8000bda4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bda8:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000bdac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdb0:	e0 69 cc cd 	mov	r9,52429
8000bdb4:	ea 19 3d cc 	orh	r9,0x3dcc
8000bdb8:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000bdbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdc0:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000bdc4:	fc 1b 41 70 	movh	r11,0x4170
8000bdc8:	10 9c       	mov	r12,r8
8000bdca:	f0 16 00 0a 	mcall	r6[40]
8000bdce:	18 98       	mov	r8,r12
8000bdd0:	10 99       	mov	r9,r8
8000bdd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdd6:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000bdda:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bdde:	30 18       	mov	r8,1
8000bde0:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000bde4:	2f bd       	sub	sp,-20
8000bde6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000bdea:	00 00       	add	r0,r0
8000bdec:	80 00       	ld.sh	r0,r0[0x0]
8000bdee:	b9 2e       	st.d	r12++,lr

8000bdf0 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000bdf0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000bdf4:	1a 97       	mov	r7,sp
8000bdf6:	fa cd 01 04 	sub	sp,sp,260
8000bdfa:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000bdfe:	1e 26       	rsub	r6,pc
8000be00:	ef 4c ff 18 	st.w	r7[-232],r12
8000be04:	ef 4b ff 14 	st.w	r7[-236],r11
8000be08:	ef 4a ff 10 	st.w	r7[-240],r10
8000be0c:	12 98       	mov	r8,r9
8000be0e:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000be12:	30 08       	mov	r8,0
8000be14:	ef 48 ff 1c 	st.w	r7[-228],r8
8000be18:	fc 18 3f 80 	movh	r8,0x3f80
8000be1c:	ef 48 ff 20 	st.w	r7[-224],r8
8000be20:	30 08       	mov	r8,0
8000be22:	ef 48 ff 24 	st.w	r7[-220],r8
8000be26:	30 08       	mov	r8,0
8000be28:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000be2c:	30 08       	mov	r8,0
8000be2e:	ef 68 ff df 	st.b	r7[-33],r8
8000be32:	c0 c9       	rjmp	8000c04a <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000be34:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000be38:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000be3c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000be40:	2e 29       	sub	r9,-30
8000be42:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000be46:	10 9c       	mov	r12,r8
8000be48:	f0 16 00 02 	mcall	r6[8]
8000be4c:	e0 68 cc cd 	mov	r8,52429
8000be50:	ea 18 cc cc 	orh	r8,0xcccc
8000be54:	e0 69 cc cc 	mov	r9,52428
8000be58:	ea 19 3f ec 	orh	r9,0x3fec
8000be5c:	f0 16 00 03 	mcall	r6[12]
8000be60:	14 98       	mov	r8,r10
8000be62:	16 99       	mov	r9,r11
8000be64:	10 92       	mov	r2,r8
8000be66:	12 93       	mov	r3,r9
8000be68:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000be6c:	a3 68       	lsl	r8,0x2
8000be6e:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000be72:	f2 08 00 08 	add	r8,r9,r8
8000be76:	70 09       	ld.w	r9,r8[0x0]
8000be78:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000be7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000be80:	2f 4a       	sub	r10,-12
8000be82:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000be86:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000be8a:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000be8e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000be92:	2e ba       	sub	r10,-21
8000be94:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000be98:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000be9c:	10 9c       	mov	r12,r8
8000be9e:	f0 16 00 02 	mcall	r6[8]
8000bea2:	e0 68 99 9a 	mov	r8,39322
8000bea6:	ea 18 99 99 	orh	r8,0x9999
8000beaa:	e0 69 99 99 	mov	r9,39321
8000beae:	ea 19 3f b9 	orh	r9,0x3fb9
8000beb2:	f0 16 00 03 	mcall	r6[12]
8000beb6:	14 98       	mov	r8,r10
8000beb8:	16 99       	mov	r9,r11
8000beba:	04 9a       	mov	r10,r2
8000bebc:	06 9b       	mov	r11,r3
8000bebe:	f0 16 00 05 	mcall	r6[20]
8000bec2:	14 98       	mov	r8,r10
8000bec4:	16 99       	mov	r9,r11
8000bec6:	10 9a       	mov	r10,r8
8000bec8:	12 9b       	mov	r11,r9
8000beca:	f0 16 00 08 	mcall	r6[32]
8000bece:	18 9a       	mov	r10,r12
8000bed0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bed4:	ea c9 ff e2 	sub	r9,r5,-30
8000bed8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000bedc:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000bee0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000bee4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bee8:	2d f9       	sub	r9,-33
8000beea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000beee:	10 9c       	mov	r12,r8
8000bef0:	f0 16 00 02 	mcall	r6[8]
8000bef4:	e0 68 8f 5c 	mov	r8,36700
8000bef8:	ea 18 f5 c2 	orh	r8,0xf5c2
8000befc:	e0 69 5c 28 	mov	r9,23592
8000bf00:	ea 19 3f ef 	orh	r9,0x3fef
8000bf04:	f0 16 00 03 	mcall	r6[12]
8000bf08:	14 98       	mov	r8,r10
8000bf0a:	16 99       	mov	r9,r11
8000bf0c:	10 92       	mov	r2,r8
8000bf0e:	12 93       	mov	r3,r9
8000bf10:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bf14:	2f d8       	sub	r8,-3
8000bf16:	a3 68       	lsl	r8,0x2
8000bf18:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000bf1c:	f2 08 00 08 	add	r8,r9,r8
8000bf20:	70 09       	ld.w	r9,r8[0x0]
8000bf22:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bf26:	f0 ca ff fd 	sub	r10,r8,-3
8000bf2a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bf2e:	2f 4a       	sub	r10,-12
8000bf30:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000bf34:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000bf38:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bf3c:	f0 ca ff fd 	sub	r10,r8,-3
8000bf40:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bf44:	2e ba       	sub	r10,-21
8000bf46:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000bf4a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bf4e:	10 9c       	mov	r12,r8
8000bf50:	f0 16 00 02 	mcall	r6[8]
8000bf54:	e0 68 14 7b 	mov	r8,5243
8000bf58:	ea 18 47 ae 	orh	r8,0x47ae
8000bf5c:	e0 69 7a e1 	mov	r9,31457
8000bf60:	ea 19 3f 94 	orh	r9,0x3f94
8000bf64:	f0 16 00 03 	mcall	r6[12]
8000bf68:	14 98       	mov	r8,r10
8000bf6a:	16 99       	mov	r9,r11
8000bf6c:	04 9a       	mov	r10,r2
8000bf6e:	06 9b       	mov	r11,r3
8000bf70:	f0 16 00 05 	mcall	r6[20]
8000bf74:	14 98       	mov	r8,r10
8000bf76:	16 99       	mov	r9,r11
8000bf78:	10 9a       	mov	r10,r8
8000bf7a:	12 9b       	mov	r11,r9
8000bf7c:	f0 16 00 08 	mcall	r6[32]
8000bf80:	18 9a       	mov	r10,r12
8000bf82:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bf86:	ea c9 ff df 	sub	r9,r5,-33
8000bf8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000bf8e:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000bf92:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000bf96:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bf9a:	2d c9       	sub	r9,-36
8000bf9c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000bfa0:	10 9c       	mov	r12,r8
8000bfa2:	f0 16 00 02 	mcall	r6[8]
8000bfa6:	e0 68 cc cd 	mov	r8,52429
8000bfaa:	ea 18 cc cc 	orh	r8,0xcccc
8000bfae:	e0 69 cc cc 	mov	r9,52428
8000bfb2:	ea 19 3f ec 	orh	r9,0x3fec
8000bfb6:	f0 16 00 03 	mcall	r6[12]
8000bfba:	14 98       	mov	r8,r10
8000bfbc:	16 99       	mov	r9,r11
8000bfbe:	10 92       	mov	r2,r8
8000bfc0:	12 93       	mov	r3,r9
8000bfc2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bfc6:	2f a8       	sub	r8,-6
8000bfc8:	a3 68       	lsl	r8,0x2
8000bfca:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000bfce:	f2 08 00 08 	add	r8,r9,r8
8000bfd2:	70 09       	ld.w	r9,r8[0x0]
8000bfd4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bfd8:	f0 ca ff fa 	sub	r10,r8,-6
8000bfdc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bfe0:	2f 4a       	sub	r10,-12
8000bfe2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000bfe6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000bfea:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000bfee:	f0 ca ff fa 	sub	r10,r8,-6
8000bff2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bff6:	2e ba       	sub	r10,-21
8000bff8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000bffc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c000:	10 9c       	mov	r12,r8
8000c002:	f0 16 00 02 	mcall	r6[8]
8000c006:	e0 68 99 9a 	mov	r8,39322
8000c00a:	ea 18 99 99 	orh	r8,0x9999
8000c00e:	e0 69 99 99 	mov	r9,39321
8000c012:	ea 19 3f b9 	orh	r9,0x3fb9
8000c016:	f0 16 00 03 	mcall	r6[12]
8000c01a:	14 98       	mov	r8,r10
8000c01c:	16 99       	mov	r9,r11
8000c01e:	04 9a       	mov	r10,r2
8000c020:	06 9b       	mov	r11,r3
8000c022:	f0 16 00 05 	mcall	r6[20]
8000c026:	14 98       	mov	r8,r10
8000c028:	16 99       	mov	r9,r11
8000c02a:	10 9a       	mov	r10,r8
8000c02c:	12 9b       	mov	r11,r9
8000c02e:	f0 16 00 08 	mcall	r6[32]
8000c032:	18 9a       	mov	r10,r12
8000c034:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c038:	ea c9 ff dc 	sub	r9,r5,-36
8000c03c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c040:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c044:	2f f8       	sub	r8,-1
8000c046:	ef 68 ff df 	st.b	r7[-33],r8
8000c04a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c04e:	30 28       	mov	r8,2
8000c050:	f0 09 18 00 	cp.b	r9,r8
8000c054:	fe 98 fe f0 	brls	8000be34 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c058:	30 08       	mov	r8,0
8000c05a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c05e:	30 08       	mov	r8,0
8000c060:	ef 48 ff 80 	st.w	r7[-128],r8
8000c064:	30 08       	mov	r8,0
8000c066:	ef 48 ff 84 	st.w	r7[-124],r8
8000c06a:	fc 18 bf 80 	movh	r8,0xbf80
8000c06e:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c072:	ee ca 00 94 	sub	r10,r7,148
8000c076:	20 4d       	sub	sp,16
8000c078:	1a 98       	mov	r8,sp
8000c07a:	ee c9 00 84 	sub	r9,r7,132
8000c07e:	20 08       	sub	r8,0
8000c080:	20 09       	sub	r9,0
8000c082:	72 0b       	ld.w	r11,r9[0x0]
8000c084:	91 0b       	st.w	r8[0x0],r11
8000c086:	72 1b       	ld.w	r11,r9[0x4]
8000c088:	91 1b       	st.w	r8[0x4],r11
8000c08a:	72 2b       	ld.w	r11,r9[0x8]
8000c08c:	91 2b       	st.w	r8[0x8],r11
8000c08e:	72 39       	ld.w	r9,r9[0xc]
8000c090:	91 39       	st.w	r8[0xc],r9
8000c092:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c096:	20 4d       	sub	sp,16
8000c098:	1a 98       	mov	r8,sp
8000c09a:	20 08       	sub	r8,0
8000c09c:	20 09       	sub	r9,0
8000c09e:	72 0b       	ld.w	r11,r9[0x0]
8000c0a0:	91 0b       	st.w	r8[0x0],r11
8000c0a2:	72 1b       	ld.w	r11,r9[0x4]
8000c0a4:	91 1b       	st.w	r8[0x4],r11
8000c0a6:	72 2b       	ld.w	r11,r9[0x8]
8000c0a8:	91 2b       	st.w	r8[0x8],r11
8000c0aa:	72 39       	ld.w	r9,r9[0xc]
8000c0ac:	91 39       	st.w	r8[0xc],r9
8000c0ae:	14 9c       	mov	r12,r10
8000c0b0:	fe b0 fb 6e 	rcall	8000b78c <quat_global_to_local>
8000c0b4:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c0b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0ba:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c0be:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0c2:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c0c6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c0ca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0ce:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c0d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0d6:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c0da:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c0de:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c0e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0e6:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c0ea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c0ee:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c0f2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c0f6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c0fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c0fe:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c102:	f0 16 00 02 	mcall	r6[8]
8000c106:	14 98       	mov	r8,r10
8000c108:	16 99       	mov	r9,r11
8000c10a:	30 05       	mov	r5,0
8000c10c:	e0 6a 8f 5b 	mov	r10,36699
8000c110:	ea 1a f5 c2 	orh	r10,0xf5c2
8000c114:	e0 6b 5c 28 	mov	r11,23592
8000c118:	ea 1b 3f df 	orh	r11,0x3fdf
8000c11c:	f0 16 00 1d 	mcall	r6[116]
8000c120:	18 98       	mov	r8,r12
8000c122:	58 08       	cp.w	r8,0
8000c124:	c0 20       	breq	8000c128 <qfilter+0x338>
8000c126:	30 15       	mov	r5,1
8000c128:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c12c:	c7 30       	breq	8000c212 <qfilter+0x422>
8000c12e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c132:	f0 16 00 02 	mcall	r6[8]
8000c136:	30 05       	mov	r5,0
8000c138:	e0 68 d7 0b 	mov	r8,55051
8000c13c:	ea 18 70 a3 	orh	r8,0x70a3
8000c140:	e0 69 0a 3d 	mov	r9,2621
8000c144:	ea 19 3f fb 	orh	r9,0x3ffb
8000c148:	f0 16 00 1d 	mcall	r6[116]
8000c14c:	18 98       	mov	r8,r12
8000c14e:	58 08       	cp.w	r8,0
8000c150:	c0 20       	breq	8000c154 <qfilter+0x364>
8000c152:	30 15       	mov	r5,1
8000c154:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c158:	c5 d0       	breq	8000c212 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000c15a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c15e:	fe b0 fc 13 	rcall	8000b984 <fast_sqrt>
8000c162:	18 98       	mov	r8,r12
8000c164:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000c168:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c16c:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c170:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c174:	10 9c       	mov	r12,r8
8000c176:	f0 16 00 0a 	mcall	r6[40]
8000c17a:	18 98       	mov	r8,r12
8000c17c:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000c180:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c184:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c188:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c18c:	10 9c       	mov	r12,r8
8000c18e:	f0 16 00 0a 	mcall	r6[40]
8000c192:	18 98       	mov	r8,r12
8000c194:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000c198:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c19c:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c1a0:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c1a4:	10 9c       	mov	r12,r8
8000c1a6:	f0 16 00 0a 	mcall	r6[40]
8000c1aa:	18 98       	mov	r8,r12
8000c1ac:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000c1b0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000c1b4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c1b8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c1bc:	ee fa ff b4 	ld.w	r10,r7[-76]
8000c1c0:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c1c4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c1c8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c1cc:	ef 48 ff d0 	st.w	r7[-48],r8
8000c1d0:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000c1d4:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c1d8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c1dc:	ee fa ff ac 	ld.w	r10,r7[-84]
8000c1e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c1e4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c1e8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c1ec:	ef 48 ff d4 	st.w	r7[-44],r8
8000c1f0:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000c1f4:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c1f8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c1fc:	ee fa ff b0 	ld.w	r10,r7[-80]
8000c200:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c204:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c208:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c20c:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c210:	c0 a8       	rjmp	8000c224 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000c212:	30 08       	mov	r8,0
8000c214:	ef 48 ff d0 	st.w	r7[-48],r8
8000c218:	30 08       	mov	r8,0
8000c21a:	ef 48 ff d4 	st.w	r7[-44],r8
8000c21e:	30 08       	mov	r8,0
8000c220:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000c224:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c228:	f0 c9 ff 70 	sub	r9,r8,-144
8000c22c:	ee c8 01 04 	sub	r8,r7,260
8000c230:	12 9b       	mov	r11,r9
8000c232:	10 9c       	mov	r12,r8
8000c234:	fe b0 f9 98 	rcall	8000b564 <quat_from_vector>
8000c238:	ee c8 00 74 	sub	r8,r7,116
8000c23c:	ee c9 01 04 	sub	r9,r7,260
8000c240:	20 08       	sub	r8,0
8000c242:	20 09       	sub	r9,0
8000c244:	72 0a       	ld.w	r10,r9[0x0]
8000c246:	91 0a       	st.w	r8[0x0],r10
8000c248:	72 1a       	ld.w	r10,r9[0x4]
8000c24a:	91 1a       	st.w	r8[0x4],r10
8000c24c:	72 2a       	ld.w	r10,r9[0x8]
8000c24e:	91 2a       	st.w	r8[0x8],r10
8000c250:	72 39       	ld.w	r9,r9[0xc]
8000c252:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000c254:	ee ca 00 c4 	sub	r10,r7,196
8000c258:	20 4d       	sub	sp,16
8000c25a:	1a 98       	mov	r8,sp
8000c25c:	ee c9 00 74 	sub	r9,r7,116
8000c260:	20 08       	sub	r8,0
8000c262:	20 09       	sub	r9,0
8000c264:	72 0b       	ld.w	r11,r9[0x0]
8000c266:	91 0b       	st.w	r8[0x0],r11
8000c268:	72 1b       	ld.w	r11,r9[0x4]
8000c26a:	91 1b       	st.w	r8[0x4],r11
8000c26c:	72 2b       	ld.w	r11,r9[0x8]
8000c26e:	91 2b       	st.w	r8[0x8],r11
8000c270:	72 39       	ld.w	r9,r9[0xc]
8000c272:	91 39       	st.w	r8[0xc],r9
8000c274:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c278:	20 4d       	sub	sp,16
8000c27a:	1a 98       	mov	r8,sp
8000c27c:	20 08       	sub	r8,0
8000c27e:	20 09       	sub	r9,0
8000c280:	72 0b       	ld.w	r11,r9[0x0]
8000c282:	91 0b       	st.w	r8[0x0],r11
8000c284:	72 1b       	ld.w	r11,r9[0x4]
8000c286:	91 1b       	st.w	r8[0x4],r11
8000c288:	72 2b       	ld.w	r11,r9[0x8]
8000c28a:	91 2b       	st.w	r8[0x8],r11
8000c28c:	72 39       	ld.w	r9,r9[0xc]
8000c28e:	91 39       	st.w	r8[0xc],r9
8000c290:	14 9c       	mov	r12,r10
8000c292:	fe b0 fa fb 	rcall	8000b888 <quat_local_to_global>
8000c296:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000c298:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000c29c:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c2a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c2a4:	ee fa ff 44 	ld.w	r10,r7[-188]
8000c2a8:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c2ac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c2b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c2b4:	ee fa ff 48 	ld.w	r10,r7[-184]
8000c2b8:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000c2bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c2c0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c2c4:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c2c8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c2cc:	f0 16 00 02 	mcall	r6[8]
8000c2d0:	14 98       	mov	r8,r10
8000c2d2:	16 99       	mov	r9,r11
8000c2d4:	30 05       	mov	r5,0
8000c2d6:	e0 6a 14 7c 	mov	r10,5244
8000c2da:	ea 1a 47 ae 	orh	r10,0x47ae
8000c2de:	e0 6b 7a e1 	mov	r11,31457
8000c2e2:	ea 1b 3f c4 	orh	r11,0x3fc4
8000c2e6:	f0 16 00 1d 	mcall	r6[116]
8000c2ea:	18 98       	mov	r8,r12
8000c2ec:	58 08       	cp.w	r8,0
8000c2ee:	c0 20       	breq	8000c2f2 <qfilter+0x502>
8000c2f0:	30 15       	mov	r5,1
8000c2f2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c2f6:	e0 80 00 c2 	breq	8000c47a <qfilter+0x68a>
8000c2fa:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c2fe:	f0 16 00 02 	mcall	r6[8]
8000c302:	30 05       	mov	r5,0
8000c304:	e0 68 51 ec 	mov	r8,20972
8000c308:	ea 18 1e b8 	orh	r8,0x1eb8
8000c30c:	e0 69 eb 85 	mov	r9,60293
8000c310:	ea 19 40 09 	orh	r9,0x4009
8000c314:	f0 16 00 1d 	mcall	r6[116]
8000c318:	18 98       	mov	r8,r12
8000c31a:	58 08       	cp.w	r8,0
8000c31c:	c0 20       	breq	8000c320 <qfilter+0x530>
8000c31e:	30 15       	mov	r5,1
8000c320:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c324:	e0 80 00 ab 	breq	8000c47a <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000c328:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c32c:	fe b0 fb 2c 	rcall	8000b984 <fast_sqrt>
8000c330:	18 98       	mov	r8,r12
8000c332:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000c336:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c33a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c33e:	10 9c       	mov	r12,r8
8000c340:	f0 16 00 0a 	mcall	r6[40]
8000c344:	18 98       	mov	r8,r12
8000c346:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000c34a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c34e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c352:	10 9c       	mov	r12,r8
8000c354:	f0 16 00 0a 	mcall	r6[40]
8000c358:	18 98       	mov	r8,r12
8000c35a:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000c35e:	30 08       	mov	r8,0
8000c360:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000c364:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000c368:	ee ca 01 04 	sub	r10,r7,260
8000c36c:	20 4d       	sub	sp,16
8000c36e:	1a 98       	mov	r8,sp
8000c370:	ee c9 00 e4 	sub	r9,r7,228
8000c374:	20 08       	sub	r8,0
8000c376:	20 09       	sub	r9,0
8000c378:	72 0b       	ld.w	r11,r9[0x0]
8000c37a:	91 0b       	st.w	r8[0x0],r11
8000c37c:	72 1b       	ld.w	r11,r9[0x4]
8000c37e:	91 1b       	st.w	r8[0x4],r11
8000c380:	72 2b       	ld.w	r11,r9[0x8]
8000c382:	91 2b       	st.w	r8[0x8],r11
8000c384:	72 39       	ld.w	r9,r9[0xc]
8000c386:	91 39       	st.w	r8[0xc],r9
8000c388:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c38c:	20 4d       	sub	sp,16
8000c38e:	1a 98       	mov	r8,sp
8000c390:	20 08       	sub	r8,0
8000c392:	20 09       	sub	r9,0
8000c394:	72 0b       	ld.w	r11,r9[0x0]
8000c396:	91 0b       	st.w	r8[0x0],r11
8000c398:	72 1b       	ld.w	r11,r9[0x4]
8000c39a:	91 1b       	st.w	r8[0x4],r11
8000c39c:	72 2b       	ld.w	r11,r9[0x8]
8000c39e:	91 2b       	st.w	r8[0x8],r11
8000c3a0:	72 39       	ld.w	r9,r9[0xc]
8000c3a2:	91 39       	st.w	r8[0xc],r9
8000c3a4:	14 9c       	mov	r12,r10
8000c3a6:	fe b0 f9 f3 	rcall	8000b78c <quat_global_to_local>
8000c3aa:	2f 8d       	sub	sp,-32
8000c3ac:	ea c8 ff e0 	sub	r8,r5,-32
8000c3b0:	ee c9 01 04 	sub	r9,r7,260
8000c3b4:	20 08       	sub	r8,0
8000c3b6:	20 09       	sub	r9,0
8000c3b8:	72 0a       	ld.w	r10,r9[0x0]
8000c3ba:	91 0a       	st.w	r8[0x0],r10
8000c3bc:	72 1a       	ld.w	r10,r9[0x4]
8000c3be:	91 1a       	st.w	r8[0x4],r10
8000c3c0:	72 2a       	ld.w	r10,r9[0x8]
8000c3c2:	91 2a       	st.w	r8[0x8],r10
8000c3c4:	72 39       	ld.w	r9,r9[0xc]
8000c3c6:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000c3c8:	ee ca 00 d4 	sub	r10,r7,212
8000c3cc:	20 4d       	sub	sp,16
8000c3ce:	1a 98       	mov	r8,sp
8000c3d0:	ee c9 00 c4 	sub	r9,r7,196
8000c3d4:	20 08       	sub	r8,0
8000c3d6:	20 09       	sub	r9,0
8000c3d8:	72 0b       	ld.w	r11,r9[0x0]
8000c3da:	91 0b       	st.w	r8[0x0],r11
8000c3dc:	72 1b       	ld.w	r11,r9[0x4]
8000c3de:	91 1b       	st.w	r8[0x4],r11
8000c3e0:	72 2b       	ld.w	r11,r9[0x8]
8000c3e2:	91 2b       	st.w	r8[0x8],r11
8000c3e4:	72 39       	ld.w	r9,r9[0xc]
8000c3e6:	91 39       	st.w	r8[0xc],r9
8000c3e8:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c3ec:	20 4d       	sub	sp,16
8000c3ee:	1a 98       	mov	r8,sp
8000c3f0:	20 08       	sub	r8,0
8000c3f2:	20 09       	sub	r9,0
8000c3f4:	72 0b       	ld.w	r11,r9[0x0]
8000c3f6:	91 0b       	st.w	r8[0x0],r11
8000c3f8:	72 1b       	ld.w	r11,r9[0x4]
8000c3fa:	91 1b       	st.w	r8[0x4],r11
8000c3fc:	72 2b       	ld.w	r11,r9[0x8]
8000c3fe:	91 2b       	st.w	r8[0x8],r11
8000c400:	72 39       	ld.w	r9,r9[0xc]
8000c402:	91 39       	st.w	r8[0xc],r9
8000c404:	14 9c       	mov	r12,r10
8000c406:	fe b0 f9 c3 	rcall	8000b78c <quat_global_to_local>
8000c40a:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000c40c:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000c410:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c414:	70 b8       	ld.w	r8,r8[0x2c]
8000c416:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c41a:	ee fa ff 38 	ld.w	r10,r7[-200]
8000c41e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c422:	70 a8       	ld.w	r8,r8[0x28]
8000c424:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c428:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c42c:	ef 48 ff c4 	st.w	r7[-60],r8
8000c430:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000c434:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c438:	70 98       	ld.w	r8,r8[0x24]
8000c43a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c43e:	ee fa ff 30 	ld.w	r10,r7[-208]
8000c442:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c446:	70 b8       	ld.w	r8,r8[0x2c]
8000c448:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c44c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c450:	ef 48 ff c8 	st.w	r7[-56],r8
8000c454:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000c458:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c45c:	70 a8       	ld.w	r8,r8[0x28]
8000c45e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c462:	ee fa ff 34 	ld.w	r10,r7[-204]
8000c466:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c46a:	70 98       	ld.w	r8,r8[0x24]
8000c46c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c470:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c474:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c478:	c0 a8       	rjmp	8000c48c <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000c47a:	30 08       	mov	r8,0
8000c47c:	ef 48 ff c4 	st.w	r7[-60],r8
8000c480:	30 08       	mov	r8,0
8000c482:	ef 48 ff c8 	st.w	r7[-56],r8
8000c486:	30 08       	mov	r8,0
8000c488:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000c48c:	30 08       	mov	r8,0
8000c48e:	ef 68 ff df 	st.b	r7[-33],r8
8000c492:	c3 48       	rjmp	8000c4fa <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000c494:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c498:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c49c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c4a0:	2e 29       	sub	r9,-30
8000c4a2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000c4a6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c4aa:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000c4ae:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4b2:	a3 68       	lsl	r8,0x2
8000c4b4:	ee 08 00 08 	add	r8,r7,r8
8000c4b8:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000c4bc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c4c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c4c4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c4c8:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000c4cc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4d0:	a3 68       	lsl	r8,0x2
8000c4d2:	ee 08 00 08 	add	r8,r7,r8
8000c4d6:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000c4da:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c4de:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c4e2:	f4 c8 ff ff 	sub	r8,r10,-1
8000c4e6:	a3 68       	lsl	r8,0x2
8000c4e8:	ee 08 00 08 	add	r8,r7,r8
8000c4ec:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000c4f0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c4f4:	2f f8       	sub	r8,-1
8000c4f6:	ef 68 ff df 	st.b	r7[-33],r8
8000c4fa:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c4fe:	30 28       	mov	r8,2
8000c500:	f0 09 18 00 	cp.b	r9,r8
8000c504:	fe 98 ff c8 	brls	8000c494 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000c508:	30 08       	mov	r8,0
8000c50a:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000c50e:	ee ca 00 64 	sub	r10,r7,100
8000c512:	20 4d       	sub	sp,16
8000c514:	1a 98       	mov	r8,sp
8000c516:	ee c9 00 74 	sub	r9,r7,116
8000c51a:	20 08       	sub	r8,0
8000c51c:	20 09       	sub	r9,0
8000c51e:	72 0b       	ld.w	r11,r9[0x0]
8000c520:	91 0b       	st.w	r8[0x0],r11
8000c522:	72 1b       	ld.w	r11,r9[0x4]
8000c524:	91 1b       	st.w	r8[0x4],r11
8000c526:	72 2b       	ld.w	r11,r9[0x8]
8000c528:	91 2b       	st.w	r8[0x8],r11
8000c52a:	72 39       	ld.w	r9,r9[0xc]
8000c52c:	91 39       	st.w	r8[0xc],r9
8000c52e:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c532:	20 4d       	sub	sp,16
8000c534:	1a 98       	mov	r8,sp
8000c536:	20 08       	sub	r8,0
8000c538:	20 09       	sub	r9,0
8000c53a:	72 0b       	ld.w	r11,r9[0x0]
8000c53c:	91 0b       	st.w	r8[0x0],r11
8000c53e:	72 1b       	ld.w	r11,r9[0x4]
8000c540:	91 1b       	st.w	r8[0x4],r11
8000c542:	72 2b       	ld.w	r11,r9[0x8]
8000c544:	91 2b       	st.w	r8[0x8],r11
8000c546:	72 39       	ld.w	r9,r9[0xc]
8000c548:	91 39       	st.w	r8[0xc],r9
8000c54a:	14 9c       	mov	r12,r10
8000c54c:	fe b0 f8 68 	rcall	8000b61c <quat_multi>
8000c550:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000c552:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c556:	70 09       	ld.w	r9,r8[0x0]
8000c558:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000c55c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c560:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c564:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c568:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c56c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000c56e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c572:	70 19       	ld.w	r9,r8[0x4]
8000c574:	ee fa ff a0 	ld.w	r10,r7[-96]
8000c578:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c57c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c580:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c584:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c588:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000c58a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c58e:	70 29       	ld.w	r9,r8[0x8]
8000c590:	ee fa ff a4 	ld.w	r10,r7[-92]
8000c594:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c598:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c59c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c5a0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5a4:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000c5a6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5aa:	70 39       	ld.w	r9,r8[0xc]
8000c5ac:	ee fa ff a8 	ld.w	r10,r7[-88]
8000c5b0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c5b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c5bc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5c0:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000c5c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5c6:	70 09       	ld.w	r9,r8[0x0]
8000c5c8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5cc:	70 08       	ld.w	r8,r8[0x0]
8000c5ce:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c5d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5d6:	70 1a       	ld.w	r10,r8[0x4]
8000c5d8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5dc:	70 18       	ld.w	r8,r8[0x4]
8000c5de:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5e2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c5e6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5ea:	70 2a       	ld.w	r10,r8[0x8]
8000c5ec:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5f0:	70 28       	ld.w	r8,r8[0x8]
8000c5f2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5f6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c5fa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5fe:	70 3a       	ld.w	r10,r8[0xc]
8000c600:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c604:	70 38       	ld.w	r8,r8[0xc]
8000c606:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c60a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c60e:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000c612:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c616:	f0 16 00 02 	mcall	r6[8]
8000c61a:	30 05       	mov	r5,0
8000c61c:	e0 68 43 2d 	mov	r8,17197
8000c620:	ea 18 eb 1c 	orh	r8,0xeb1c
8000c624:	e0 69 36 e2 	mov	r9,14050
8000c628:	ea 19 3f 1a 	orh	r9,0x3f1a
8000c62c:	f0 16 00 1d 	mcall	r6[116]
8000c630:	18 98       	mov	r8,r12
8000c632:	58 08       	cp.w	r8,0
8000c634:	c0 20       	breq	8000c638 <qfilter+0x848>
8000c636:	30 15       	mov	r5,1
8000c638:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c63c:	c0 80       	breq	8000c64c <qfilter+0x85c>
8000c63e:	e0 68 d7 0a 	mov	r8,55050
8000c642:	ea 18 3c 23 	orh	r8,0x3c23
8000c646:	ef 48 ff e4 	st.w	r7[-28],r8
8000c64a:	c0 88       	rjmp	8000c65a <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000c64c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c650:	fe b0 f9 9a 	rcall	8000b984 <fast_sqrt>
8000c654:	18 98       	mov	r8,r12
8000c656:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000c65a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c65e:	70 08       	ld.w	r8,r8[0x0]
8000c660:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c664:	10 9c       	mov	r12,r8
8000c666:	f0 16 00 0a 	mcall	r6[40]
8000c66a:	18 98       	mov	r8,r12
8000c66c:	10 99       	mov	r9,r8
8000c66e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c672:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000c674:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c678:	70 18       	ld.w	r8,r8[0x4]
8000c67a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c67e:	10 9c       	mov	r12,r8
8000c680:	f0 16 00 0a 	mcall	r6[40]
8000c684:	18 98       	mov	r8,r12
8000c686:	10 99       	mov	r9,r8
8000c688:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c68c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000c68e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c692:	70 28       	ld.w	r8,r8[0x8]
8000c694:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c698:	10 9c       	mov	r12,r8
8000c69a:	f0 16 00 0a 	mcall	r6[40]
8000c69e:	18 98       	mov	r8,r12
8000c6a0:	10 99       	mov	r9,r8
8000c6a2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6a6:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000c6a8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6ac:	70 38       	ld.w	r8,r8[0xc]
8000c6ae:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c6b2:	10 9c       	mov	r12,r8
8000c6b4:	f0 16 00 0a 	mcall	r6[40]
8000c6b8:	18 98       	mov	r8,r12
8000c6ba:	10 99       	mov	r9,r8
8000c6bc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6c0:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000c6c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6c6:	70 c5       	ld.w	r5,r8[0x30]
8000c6c8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c6cc:	10 99       	mov	r9,r8
8000c6ce:	ee 19 80 00 	eorh	r9,0x8000
8000c6d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6d6:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000c6da:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c6de:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000c6e2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c6e6:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c6ea:	73 59       	ld.w	r9,r9[0x54]
8000c6ec:	12 9b       	mov	r11,r9
8000c6ee:	10 9c       	mov	r12,r8
8000c6f0:	f0 16 00 0a 	mcall	r6[40]
8000c6f4:	18 98       	mov	r8,r12
8000c6f6:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000c6fa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6fe:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000c700:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c704:	70 d5       	ld.w	r5,r8[0x34]
8000c706:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c70a:	10 99       	mov	r9,r8
8000c70c:	ee 19 80 00 	eorh	r9,0x8000
8000c710:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c714:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000c718:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c71c:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000c720:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c724:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c728:	73 69       	ld.w	r9,r9[0x58]
8000c72a:	12 9b       	mov	r11,r9
8000c72c:	10 9c       	mov	r12,r8
8000c72e:	f0 16 00 0a 	mcall	r6[40]
8000c732:	18 98       	mov	r8,r12
8000c734:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000c738:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c73c:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000c73e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c742:	70 e5       	ld.w	r5,r8[0x38]
8000c744:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c748:	10 99       	mov	r9,r8
8000c74a:	ee 19 80 00 	eorh	r9,0x8000
8000c74e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c752:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000c756:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c75a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000c75e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c762:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c766:	73 79       	ld.w	r9,r9[0x5c]
8000c768:	12 9b       	mov	r11,r9
8000c76a:	10 9c       	mov	r12,r8
8000c76c:	f0 16 00 0a 	mcall	r6[40]
8000c770:	18 98       	mov	r8,r12
8000c772:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000c776:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c77a:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000c77c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c780:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000c784:	58 18       	cp.w	r8,1
8000c786:	c1 c0       	breq	8000c7be <qfilter+0x9ce>
8000c788:	58 28       	cp.w	r8,2
8000c78a:	c3 00       	breq	8000c7ea <qfilter+0x9fa>
8000c78c:	58 08       	cp.w	r8,0
8000c78e:	e0 81 00 94 	brne	8000c8b6 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000c792:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c796:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c79a:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000c79e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7a2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c7a6:	fc 1b 41 70 	movh	r11,0x4170
8000c7aa:	10 9c       	mov	r12,r8
8000c7ac:	f0 16 00 0a 	mcall	r6[40]
8000c7b0:	18 98       	mov	r8,r12
8000c7b2:	10 99       	mov	r9,r8
8000c7b4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7b8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000c7bc:	c9 28       	rjmp	8000c8e0 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000c7be:	e0 68 99 9a 	mov	r8,39322
8000c7c2:	ea 18 3e 99 	orh	r8,0x3e99
8000c7c6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000c7ca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ce:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c7d2:	fc 1b 41 20 	movh	r11,0x4120
8000c7d6:	10 9c       	mov	r12,r8
8000c7d8:	f0 16 00 0a 	mcall	r6[40]
8000c7dc:	18 98       	mov	r8,r12
8000c7de:	10 99       	mov	r9,r8
8000c7e0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7e4:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000c7e8:	c7 c8       	rjmp	8000c8e0 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000c7ea:	e0 68 99 9a 	mov	r8,39322
8000c7ee:	ea 18 3e 99 	orh	r8,0x3e99
8000c7f2:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000c7f6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7fa:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c7fe:	fc 1b 41 20 	movh	r11,0x4120
8000c802:	10 9c       	mov	r12,r8
8000c804:	f0 16 00 0a 	mcall	r6[40]
8000c808:	18 98       	mov	r8,r12
8000c80a:	10 99       	mov	r9,r8
8000c80c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c810:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000c814:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c818:	70 f9       	ld.w	r9,r8[0x3c]
8000c81a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c81e:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000c822:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c826:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c82a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c82e:	f0 fb 00 84 	ld.w	r11,r8[132]
8000c832:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c836:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000c83a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c83e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c842:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c846:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000c848:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c84c:	71 09       	ld.w	r9,r8[0x40]
8000c84e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c852:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000c856:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c85a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c85e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c862:	f0 fb 00 88 	ld.w	r11,r8[136]
8000c866:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c86a:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000c86e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c872:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c876:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c87a:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000c87e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c882:	71 19       	ld.w	r9,r8[0x44]
8000c884:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c888:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000c88c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c890:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c894:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c898:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000c89c:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c8a0:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000c8a4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c8a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c8ac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8b0:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000c8b4:	c1 68       	rjmp	8000c8e0 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000c8b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8ba:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c8be:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000c8c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8c6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c8ca:	fc 1b 41 70 	movh	r11,0x4170
8000c8ce:	10 9c       	mov	r12,r8
8000c8d0:	f0 16 00 0a 	mcall	r6[40]
8000c8d4:	18 98       	mov	r8,r12
8000c8d6:	10 99       	mov	r9,r8
8000c8d8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8dc:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000c8e0:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000c8e4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8e8:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000c8ea:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000c8ee:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8f2:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000c8f4:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000c8f8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8fc:	91 79       	st.w	r8[0x1c],r9
	
}
8000c8fe:	2b fd       	sub	sp,-260
8000c900:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c904:	80 00       	ld.sh	r0,r0[0x0]
8000c906:	bc 82       	st.b	lr[0x0],r2

8000c908 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000c908:	eb cd 40 c0 	pushm	r6-r7,lr
8000c90c:	1a 97       	mov	r7,sp
8000c90e:	20 3d       	sub	sp,12
8000c910:	49 06       	lddpc	r6,8000c950 <mav_array_memcpy+0x48>
8000c912:	1e 26       	rsub	r6,pc
8000c914:	ef 4c ff fc 	st.w	r7[-4],r12
8000c918:	ef 4b ff f8 	st.w	r7[-8],r11
8000c91c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000c920:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c924:	58 08       	cp.w	r8,0
8000c926:	c0 91       	brne	8000c938 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000c928:	ee fa ff f4 	ld.w	r10,r7[-12]
8000c92c:	30 0b       	mov	r11,0
8000c92e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c932:	f0 16 00 30 	mcall	r6[192]
8000c936:	c0 98       	rjmp	8000c948 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000c938:	ee fa ff f4 	ld.w	r10,r7[-12]
8000c93c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c940:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c944:	f0 16 00 21 	mcall	r6[132]
	}
}
8000c948:	2f dd       	sub	sp,-12
8000c94a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c94e:	00 00       	add	r0,r0
8000c950:	80 00       	ld.sh	r0,r0[0x0]
8000c952:	c7 96       	brmi	8000ca44 <initialise_central_data+0xf0>

8000c954 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000c954:	eb cd 40 c0 	pushm	r6-r7,lr
8000c958:	1a 97       	mov	r7,sp
8000c95a:	4d 86       	lddpc	r6,8000cab8 <initialise_central_data+0x164>
8000c95c:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
8000c95e:	ec f8 00 64 	ld.w	r8,r6[100]
8000c962:	30 09       	mov	r9,0
8000c964:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000c968:	ec f8 00 64 	ld.w	r8,r6[100]
8000c96c:	30 09       	mov	r9,0
8000c96e:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000c972:	ec f8 00 64 	ld.w	r8,r6[100]
8000c976:	30 09       	mov	r9,0
8000c978:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000c97c:	ec f8 00 64 	ld.w	r8,r6[100]
8000c980:	fc 19 bf 80 	movh	r9,0xbf80
8000c984:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_copter(&centralData.stabiliser_stack);
8000c988:	ec f8 00 64 	ld.w	r8,r6[100]
8000c98c:	f0 c8 fe 60 	sub	r8,r8,-416
8000c990:	10 9c       	mov	r12,r8
8000c992:	f0 16 01 7a 	mcall	r6[1512]
		// centralData.stabilisers_stack = 

		centralData.simulation_mode=0;
8000c996:	ec f8 00 64 	ld.w	r8,r6[100]
8000c99a:	30 09       	mov	r9,0
8000c99c:	f1 49 10 c0 	st.w	r8[4288],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
8000c9a0:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9a4:	30 08       	mov	r8,0
8000c9a6:	f3 58 10 1c 	st.h	r9[4124],r8
		centralData.waypoint_set = false;
8000c9aa:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9ae:	30 08       	mov	r8,0
8000c9b0:	f3 68 10 b4 	st.b	r9[4276],r8
		centralData.waypoint_sending = false;
8000c9b4:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9b8:	30 08       	mov	r8,0
8000c9ba:	f3 68 10 b5 	st.b	r9[4277],r8
		centralData.waypoint_receiving = false;
8000c9be:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9c2:	30 08       	mov	r8,0
8000c9c4:	f3 68 10 b6 	st.b	r9[4278],r8
		centralData.waypoint_hold_init = false;
8000c9c8:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9cc:	30 08       	mov	r8,0
8000c9ce:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData.critical_landing = false;
8000c9d2:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9d6:	30 08       	mov	r8,0
8000c9d8:	f3 68 10 b8 	st.b	r9[4280],r8
		centralData.critical_init = false;
8000c9dc:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9e0:	30 08       	mov	r8,0
8000c9e2:	f3 68 10 b9 	st.b	r9[4281],r8
		centralData.collision_avoidance = false;
8000c9e6:	ec f9 00 64 	ld.w	r9,r6[100]
8000c9ea:	30 08       	mov	r8,0
8000c9ec:	f3 68 10 bb 	st.b	r9[4283],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000c9f0:	ec fa 00 64 	ld.w	r10,r6[100]
8000c9f4:	e0 68 33 27 	mov	r8,13095
8000c9f8:	ea 18 3f a0 	orh	r8,0x3fa0
8000c9fc:	e0 69 43 a1 	mov	r9,17313
8000ca00:	ea 19 40 1a 	orh	r9,0x401a
8000ca04:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000ca08:	ec fa 00 64 	ld.w	r10,r6[100]
8000ca0c:	e0 68 f8 9c 	mov	r8,63644
8000ca10:	ea 18 f0 d4 	orh	r8,0xf0d4
8000ca14:	e0 69 42 5e 	mov	r9,16990
8000ca18:	ea 19 40 47 	orh	r9,0x4047
8000ca1c:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000ca20:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca24:	fc 19 43 c8 	movh	r9,0x43c8
8000ca28:	f1 49 0d bc 	st.w	r8[3516],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000ca2c:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca30:	30 09       	mov	r9,0
8000ca32:	f1 49 0d 9c 	st.w	r8[3484],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000ca36:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca3a:	30 09       	mov	r9,0
8000ca3c:	f1 49 0d a0 	st.w	r8[3488],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000ca40:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca44:	30 09       	mov	r9,0
8000ca46:	f1 49 0d a4 	st.w	r8[3492],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000ca4a:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca4e:	f0 c8 f4 58 	sub	r8,r8,-2984
8000ca52:	ec fb 00 64 	ld.w	r11,r6[100]
8000ca56:	10 9c       	mov	r12,r8
8000ca58:	f0 16 01 e2 	mcall	r6[1928]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000ca5c:	ec f9 00 64 	ld.w	r9,r6[100]
8000ca60:	ec f8 00 64 	ld.w	r8,r6[100]
8000ca64:	f2 cb f3 44 	sub	r11,r9,-3260
8000ca68:	f0 ca f2 64 	sub	r10,r8,-3484
8000ca6c:	f6 c8 00 00 	sub	r8,r11,0
8000ca70:	f4 c9 00 00 	sub	r9,r10,0
8000ca74:	72 0c       	ld.w	r12,r9[0x0]
8000ca76:	91 0c       	st.w	r8[0x0],r12
8000ca78:	72 1c       	ld.w	r12,r9[0x4]
8000ca7a:	91 1c       	st.w	r8[0x4],r12
8000ca7c:	72 2c       	ld.w	r12,r9[0x8]
8000ca7e:	91 2c       	st.w	r8[0x8],r12
8000ca80:	72 39       	ld.w	r9,r9[0xc]
8000ca82:	91 39       	st.w	r8[0xc],r9
8000ca84:	f6 c8 ff f0 	sub	r8,r11,-16
8000ca88:	f4 c9 ff f0 	sub	r9,r10,-16
8000ca8c:	72 0c       	ld.w	r12,r9[0x0]
8000ca8e:	91 0c       	st.w	r8[0x0],r12
8000ca90:	72 1c       	ld.w	r12,r9[0x4]
8000ca92:	91 1c       	st.w	r8[0x4],r12
8000ca94:	72 2c       	ld.w	r12,r9[0x8]
8000ca96:	91 2c       	st.w	r8[0x8],r12
8000ca98:	72 39       	ld.w	r9,r9[0xc]
8000ca9a:	91 39       	st.w	r8[0xc],r9
8000ca9c:	f6 c8 ff e0 	sub	r8,r11,-32
8000caa0:	f4 c9 ff e0 	sub	r9,r10,-32
8000caa4:	72 0a       	ld.w	r10,r9[0x0]
8000caa6:	91 0a       	st.w	r8[0x0],r10
8000caa8:	72 1a       	ld.w	r10,r9[0x4]
8000caaa:	91 1a       	st.w	r8[0x4],r10
8000caac:	72 2a       	ld.w	r10,r9[0x8]
8000caae:	91 2a       	st.w	r8[0x8],r10
8000cab0:	72 39       	ld.w	r9,r9[0xc]
8000cab2:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000cab4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cab8:	80 00       	ld.sh	r0,r0[0x0]
8000caba:	c7 e0       	breq	8000cbb6 <crc_accumulate+0x5a>

8000cabc <get_central_data>:

central_data_t* get_central_data(void)
{
8000cabc:	eb cd 40 c0 	pushm	r6-r7,lr
8000cac0:	1a 97       	mov	r7,sp
8000cac2:	48 46       	lddpc	r6,8000cad0 <get_central_data+0x14>
8000cac4:	1e 26       	rsub	r6,pc
	return &centralData;
8000cac6:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000caca:	10 9c       	mov	r12,r8
8000cacc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cad0:	80 00       	ld.sh	r0,r0[0x0]
8000cad2:	c9 48       	rjmp	8000cbfa <crc_init+0x14>

8000cad4 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000cad4:	eb cd 40 c0 	pushm	r6-r7,lr
8000cad8:	1a 97       	mov	r7,sp
8000cada:	48 56       	lddpc	r6,8000caec <get_telemetry_upstream+0x18>
8000cadc:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000cade:	ec f8 00 64 	ld.w	r8,r6[100]
8000cae2:	f0 f8 0e 00 	ld.w	r8,r8[3584]
}
8000cae6:	10 9c       	mov	r12,r8
8000cae8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000caec:	80 00       	ld.sh	r0,r0[0x0]
8000caee:	c9 60       	breq	8000ca1a <initialise_central_data+0xc6>

8000caf0 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000caf0:	eb cd 40 c0 	pushm	r6-r7,lr
8000caf4:	1a 97       	mov	r7,sp
8000caf6:	48 56       	lddpc	r6,8000cb08 <get_telemetry_downstream+0x18>
8000caf8:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000cafa:	ec f8 00 64 	ld.w	r8,r6[100]
8000cafe:	f0 f8 0d fc 	ld.w	r8,r8[3580]
}
8000cb02:	10 9c       	mov	r12,r8
8000cb04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cb08:	80 00       	ld.sh	r0,r0[0x0]
8000cb0a:	c9 7c       	rcall	8000cc38 <crc_calculate+0x38>

8000cb0c <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000cb0c:	eb cd 40 c0 	pushm	r6-r7,lr
8000cb10:	1a 97       	mov	r7,sp
8000cb12:	48 56       	lddpc	r6,8000cb24 <get_debug_stream+0x18>
8000cb14:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000cb16:	ec f8 00 64 	ld.w	r8,r6[100]
8000cb1a:	f0 f8 0e 04 	ld.w	r8,r8[3588]
}
8000cb1e:	10 9c       	mov	r12,r8
8000cb20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cb24:	80 00       	ld.sh	r0,r0[0x0]
8000cb26:	c9 98       	rjmp	8000cc58 <crc_calculate+0x58>

8000cb28 <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000cb28:	eb cd 40 c0 	pushm	r6-r7,lr
8000cb2c:	1a 97       	mov	r7,sp
8000cb2e:	48 46       	lddpc	r6,8000cb3c <get_imu_data+0x14>
8000cb30:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000cb32:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000cb36:	10 9c       	mov	r12,r8
8000cb38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cb3c:	80 00       	ld.sh	r0,r0[0x0]
8000cb3e:	c9 b4       	brge	8000ca74 <initialise_central_data+0x120>

8000cb40 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000cb40:	eb cd 40 c0 	pushm	r6-r7,lr
8000cb44:	1a 97       	mov	r7,sp
8000cb46:	48 56       	lddpc	r6,8000cb58 <get_control_inputs_data+0x18>
8000cb48:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000cb4a:	ec f8 00 64 	ld.w	r8,r6[100]
8000cb4e:	f0 c8 fe b8 	sub	r8,r8,-328
8000cb52:	10 9c       	mov	r12,r8
8000cb54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cb58:	80 00       	ld.sh	r0,r0[0x0]
8000cb5a:	c9 cc       	rcall	8000cc92 <crc_accumulate_buffer+0x2a>

8000cb5c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000cb5c:	eb cd 40 80 	pushm	r7,lr
8000cb60:	1a 97       	mov	r7,sp
8000cb62:	20 3d       	sub	sp,12
8000cb64:	18 98       	mov	r8,r12
8000cb66:	ef 4b ff f4 	st.w	r7[-12],r11
8000cb6a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000cb6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cb72:	90 08       	ld.sh	r8,r8[0x0]
8000cb74:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000cb78:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb7c:	f3 e8 20 08 	eor	r8,r9,r8
8000cb80:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000cb84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb88:	a5 68       	lsl	r8,0x4
8000cb8a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000cb8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb92:	f3 e8 20 08 	eor	r8,r9,r8
8000cb96:	5c 58       	castu.b	r8
8000cb98:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000cb9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cba0:	90 08       	ld.sh	r8,r8[0x0]
8000cba2:	5c 78       	castu.h	r8
8000cba4:	a9 88       	lsr	r8,0x8
8000cba6:	5c 88       	casts.h	r8
8000cba8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cbac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbb0:	a9 68       	lsl	r8,0x8
8000cbb2:	5c 88       	casts.h	r8
8000cbb4:	f3 e8 20 08 	eor	r8,r9,r8
8000cbb8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cbbc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbc0:	a3 78       	lsl	r8,0x3
8000cbc2:	5c 88       	casts.h	r8
8000cbc4:	f3 e8 20 08 	eor	r8,r9,r8
8000cbc8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cbcc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbd0:	a5 88       	lsr	r8,0x4
8000cbd2:	5c 58       	castu.b	r8
8000cbd4:	f3 e8 20 08 	eor	r8,r9,r8
8000cbd8:	5c 88       	casts.h	r8
8000cbda:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000cbde:	b2 08       	st.h	r9[0x0],r8
}
8000cbe0:	2f dd       	sub	sp,-12
8000cbe2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000cbe6 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000cbe6:	eb cd 40 80 	pushm	r7,lr
8000cbea:	1a 97       	mov	r7,sp
8000cbec:	20 1d       	sub	sp,4
8000cbee:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000cbf2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cbf6:	3f f8       	mov	r8,-1
8000cbf8:	b2 08       	st.h	r9[0x0],r8
}
8000cbfa:	2f fd       	sub	sp,-4
8000cbfc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000cc00 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000cc00:	eb cd 40 c0 	pushm	r6-r7,lr
8000cc04:	1a 97       	mov	r7,sp
8000cc06:	20 3d       	sub	sp,12
8000cc08:	49 76       	lddpc	r6,8000cc64 <crc_calculate+0x64>
8000cc0a:	1e 26       	rsub	r6,pc
8000cc0c:	ef 4c ff f8 	st.w	r7[-8],r12
8000cc10:	16 98       	mov	r8,r11
8000cc12:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000cc16:	ee c8 00 02 	sub	r8,r7,2
8000cc1a:	10 9c       	mov	r12,r8
8000cc1c:	ce 5f       	rcall	8000cbe6 <crc_init>
	while (length--) {
8000cc1e:	c0 e8       	rjmp	8000cc3a <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000cc20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cc24:	11 88       	ld.ub	r8,r8[0x0]
8000cc26:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000cc2a:	2f f9       	sub	r9,-1
8000cc2c:	ef 49 ff f8 	st.w	r7[-8],r9
8000cc30:	ee c9 00 02 	sub	r9,r7,2
8000cc34:	12 9b       	mov	r11,r9
8000cc36:	10 9c       	mov	r12,r8
8000cc38:	c9 2f       	rcall	8000cb5c <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000cc3a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000cc3e:	30 08       	mov	r8,0
8000cc40:	f0 09 19 00 	cp.h	r9,r8
8000cc44:	5f 18       	srne	r8
8000cc46:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000cc4a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000cc4e:	20 18       	sub	r8,1
8000cc50:	ef 58 ff f4 	st.h	r7[-12],r8
8000cc54:	58 09       	cp.w	r9,0
8000cc56:	ce 51       	brne	8000cc20 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000cc58:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000cc5c:	10 9c       	mov	r12,r8
8000cc5e:	2f dd       	sub	sp,-12
8000cc60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cc64:	80 00       	ld.sh	r0,r0[0x0]
8000cc66:	ca 8e       	rcall	8000c9b6 <initialise_central_data+0x62>

8000cc68 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000cc68:	eb cd 40 c0 	pushm	r6-r7,lr
8000cc6c:	1a 97       	mov	r7,sp
8000cc6e:	20 4d       	sub	sp,16
8000cc70:	49 66       	lddpc	r6,8000ccc8 <crc_accumulate_buffer+0x60>
8000cc72:	1e 26       	rsub	r6,pc
8000cc74:	ef 4c ff f8 	st.w	r7[-8],r12
8000cc78:	ef 4b ff f4 	st.w	r7[-12],r11
8000cc7c:	14 98       	mov	r8,r10
8000cc7e:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000cc82:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cc86:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000cc8a:	c0 d8       	rjmp	8000cca4 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000cc8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cc90:	11 88       	ld.ub	r8,r8[0x0]
8000cc92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cc96:	2f f9       	sub	r9,-1
8000cc98:	ef 49 ff fc 	st.w	r7[-4],r9
8000cc9c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000cca0:	10 9c       	mov	r12,r8
8000cca2:	c5 df       	rcall	8000cb5c <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000cca4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cca8:	30 08       	mov	r8,0
8000ccaa:	f0 09 18 00 	cp.b	r9,r8
8000ccae:	5f 18       	srne	r8
8000ccb0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000ccb4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000ccb8:	20 18       	sub	r8,1
8000ccba:	ef 68 ff f0 	st.b	r7[-16],r8
8000ccbe:	58 09       	cp.w	r9,0
8000ccc0:	ce 61       	brne	8000cc8c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000ccc2:	2f cd       	sub	sp,-16
8000ccc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ccc8:	80 00       	ld.sh	r0,r0[0x0]
8000ccca:	ca f6       	brmi	8000cc28 <crc_calculate+0x28>

8000cccc <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000cccc:	eb cd 40 c0 	pushm	r6-r7,lr
8000ccd0:	1a 97       	mov	r7,sp
8000ccd2:	20 1d       	sub	sp,4
8000ccd4:	48 96       	lddpc	r6,8000ccf8 <mavlink_get_channel_status+0x2c>
8000ccd6:	1e 26       	rsub	r6,pc
8000ccd8:	18 98       	mov	r8,r12
8000ccda:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000ccde:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000cce2:	f0 09 15 04 	lsl	r9,r8,0x4
8000cce6:	ec f8 08 f8 	ld.w	r8,r6[2296]
8000ccea:	f2 08 00 08 	add	r8,r9,r8
}
8000ccee:	10 9c       	mov	r12,r8
8000ccf0:	2f fd       	sub	sp,-4
8000ccf2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ccf6:	00 00       	add	r0,r0
8000ccf8:	80 00       	ld.sh	r0,r0[0x0]
8000ccfa:	cb 5a       	rjmp	8000ca64 <initialise_central_data+0x110>

8000ccfc <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000ccfc:	eb cd 40 c0 	pushm	r6-r7,lr
8000cd00:	1a 97       	mov	r7,sp
8000cd02:	20 9d       	sub	sp,36
8000cd04:	4b d6       	lddpc	r6,8000cdf8 <_mav_finalize_message_chan_send+0xfc>
8000cd06:	1e 26       	rsub	r6,pc
8000cd08:	ef 4c ff ec 	st.w	r7[-20],r12
8000cd0c:	ef 4a ff e4 	st.w	r7[-28],r10
8000cd10:	16 9a       	mov	r10,r11
8000cd12:	ef 6a ff e8 	st.b	r7[-24],r10
8000cd16:	ef 69 ff e0 	st.b	r7[-32],r9
8000cd1a:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000cd1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000cd22:	5c 58       	castu.b	r8
8000cd24:	10 9c       	mov	r12,r8
8000cd26:	cd 3f       	rcall	8000cccc <mavlink_get_channel_status>
8000cd28:	18 98       	mov	r8,r12
8000cd2a:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000cd2e:	3f e8       	mov	r8,-2
8000cd30:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000cd34:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000cd38:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000cd3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cd40:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000cd44:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000cd48:	ec f8 00 70 	ld.w	r8,r6[112]
8000cd4c:	11 88       	ld.ub	r8,r8[0x0]
8000cd4e:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000cd52:	ec f8 00 70 	ld.w	r8,r6[112]
8000cd56:	11 98       	ld.ub	r8,r8[0x1]
8000cd58:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000cd5c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000cd60:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000cd64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cd68:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000cd6c:	2f f8       	sub	r8,-1
8000cd6e:	5c 58       	castu.b	r8
8000cd70:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cd74:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000cd78:	ee c8 00 0c 	sub	r8,r7,12
8000cd7c:	2f f8       	sub	r8,-1
8000cd7e:	30 5b       	mov	r11,5
8000cd80:	10 9c       	mov	r12,r8
8000cd82:	c3 ff       	rcall	8000cc00 <crc_calculate>
8000cd84:	18 98       	mov	r8,r12
8000cd86:	5c 88       	casts.h	r8
8000cd88:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000cd8c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000cd90:	ee c8 00 06 	sub	r8,r7,6
8000cd94:	12 9a       	mov	r10,r9
8000cd96:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd9a:	10 9c       	mov	r12,r8
8000cd9c:	c6 6f       	rcall	8000cc68 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000cd9e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000cda2:	ee c9 00 06 	sub	r9,r7,6
8000cda6:	12 9b       	mov	r11,r9
8000cda8:	10 9c       	mov	r12,r8
8000cdaa:	cd 9e       	rcall	8000cb5c <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000cdac:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000cdb0:	5c 58       	castu.b	r8
8000cdb2:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000cdb6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000cdba:	5c 78       	castu.h	r8
8000cdbc:	a9 88       	lsr	r8,0x8
8000cdbe:	5c 88       	casts.h	r8
8000cdc0:	5c 58       	castu.b	r8
8000cdc2:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000cdc6:	ee c8 00 0c 	sub	r8,r7,12
8000cdca:	30 6a       	mov	r10,6
8000cdcc:	10 9b       	mov	r11,r8
8000cdce:	ee fc ff ec 	ld.w	r12,r7[-20]
8000cdd2:	c1 5c       	rcall	8000cdfc <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000cdd4:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000cdd8:	10 9a       	mov	r10,r8
8000cdda:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cdde:	ee fc ff ec 	ld.w	r12,r7[-20]
8000cde2:	c0 dc       	rcall	8000cdfc <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000cde4:	ee c8 00 10 	sub	r8,r7,16
8000cde8:	30 2a       	mov	r10,2
8000cdea:	10 9b       	mov	r11,r8
8000cdec:	ee fc ff ec 	ld.w	r12,r7[-20]
8000cdf0:	c0 6c       	rcall	8000cdfc <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000cdf2:	2f 7d       	sub	sp,-36
8000cdf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cdf8:	80 00       	ld.sh	r0,r0[0x0]
8000cdfa:	cb 8a       	rjmp	8000cb6a <crc_accumulate+0xe>

8000cdfc <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000cdfc:	eb cd 40 c0 	pushm	r6-r7,lr
8000ce00:	1a 97       	mov	r7,sp
8000ce02:	20 4d       	sub	sp,16
8000ce04:	49 46       	lddpc	r6,8000ce54 <_mavlink_send_uart+0x58>
8000ce06:	1e 26       	rsub	r6,pc
8000ce08:	ef 4c ff f8 	st.w	r7[-8],r12
8000ce0c:	ef 4b ff f4 	st.w	r7[-12],r11
8000ce10:	14 98       	mov	r8,r10
8000ce12:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000ce16:	30 08       	mov	r8,0
8000ce18:	ef 58 ff fe 	st.h	r7[-2],r8
8000ce1c:	c1 28       	rjmp	8000ce40 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000ce1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000ce22:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ce26:	f2 08 00 08 	add	r8,r9,r8
8000ce2a:	11 88       	ld.ub	r8,r8[0x0]
8000ce2c:	10 9b       	mov	r11,r8
8000ce2e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ce32:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000ce36:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000ce3a:	2f f8       	sub	r8,-1
8000ce3c:	ef 58 ff fe 	st.h	r7[-2],r8
8000ce40:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000ce44:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000ce48:	f0 09 19 00 	cp.h	r9,r8
8000ce4c:	ce 93       	brcs	8000ce1e <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000ce4e:	2f cd       	sub	sp,-16
8000ce50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ce54:	80 00       	ld.sh	r0,r0[0x0]
8000ce56:	cc 8a       	rjmp	8000cbe6 <crc_init>

8000ce58 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000ce58:	eb cd 40 80 	pushm	r7,lr
8000ce5c:	1a 97       	mov	r7,sp
8000ce5e:	20 2d       	sub	sp,8
8000ce60:	ef 4c ff fc 	st.w	r7[-4],r12
8000ce64:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000ce68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce6c:	2f f8       	sub	r8,-1
8000ce6e:	11 88       	ld.ub	r8,r8[0x0]
8000ce70:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ce74:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000ce76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ce7a:	f0 c9 ff ff 	sub	r9,r8,-1
8000ce7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ce82:	11 88       	ld.ub	r8,r8[0x0]
8000ce84:	b2 88       	st.b	r9[0x0],r8
}
8000ce86:	2f ed       	sub	sp,-8
8000ce88:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ce8c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000ce8c:	eb cd 40 80 	pushm	r7,lr
8000ce90:	1a 97       	mov	r7,sp
8000ce92:	20 2d       	sub	sp,8
8000ce94:	ef 4c ff fc 	st.w	r7[-4],r12
8000ce98:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000ce9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cea0:	2f d8       	sub	r8,-3
8000cea2:	11 88       	ld.ub	r8,r8[0x0]
8000cea4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cea8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000ceaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ceae:	f0 c9 ff ff 	sub	r9,r8,-1
8000ceb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ceb6:	2f e8       	sub	r8,-2
8000ceb8:	11 88       	ld.ub	r8,r8[0x0]
8000ceba:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000cebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cec0:	f0 c9 ff fe 	sub	r9,r8,-2
8000cec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cec8:	2f f8       	sub	r8,-1
8000ceca:	11 88       	ld.ub	r8,r8[0x0]
8000cecc:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000cece:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ced2:	f0 c9 ff fd 	sub	r9,r8,-3
8000ced6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ceda:	11 88       	ld.ub	r8,r8[0x0]
8000cedc:	b2 88       	st.b	r9[0x0],r8
}
8000cede:	2f ed       	sub	sp,-8
8000cee0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000cee4 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000cee4:	eb cd 40 80 	pushm	r7,lr
8000cee8:	1a 97       	mov	r7,sp
8000ceea:	20 2d       	sub	sp,8
8000ceec:	ef 4c ff fc 	st.w	r7[-4],r12
8000cef0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000cef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cef8:	2f 98       	sub	r8,-7
8000cefa:	11 88       	ld.ub	r8,r8[0x0]
8000cefc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cf00:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000cf02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf06:	f0 c9 ff ff 	sub	r9,r8,-1
8000cf0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf0e:	2f a8       	sub	r8,-6
8000cf10:	11 88       	ld.ub	r8,r8[0x0]
8000cf12:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000cf14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf18:	f0 c9 ff fe 	sub	r9,r8,-2
8000cf1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf20:	2f b8       	sub	r8,-5
8000cf22:	11 88       	ld.ub	r8,r8[0x0]
8000cf24:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000cf26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf2a:	f0 c9 ff fd 	sub	r9,r8,-3
8000cf2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf32:	2f c8       	sub	r8,-4
8000cf34:	11 88       	ld.ub	r8,r8[0x0]
8000cf36:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000cf38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf3c:	f0 c9 ff fc 	sub	r9,r8,-4
8000cf40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf44:	2f d8       	sub	r8,-3
8000cf46:	11 88       	ld.ub	r8,r8[0x0]
8000cf48:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000cf4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf4e:	f0 c9 ff fb 	sub	r9,r8,-5
8000cf52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf56:	2f e8       	sub	r8,-2
8000cf58:	11 88       	ld.ub	r8,r8[0x0]
8000cf5a:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000cf5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf60:	f0 c9 ff fa 	sub	r9,r8,-6
8000cf64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf68:	2f f8       	sub	r8,-1
8000cf6a:	11 88       	ld.ub	r8,r8[0x0]
8000cf6c:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000cf6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf72:	f0 c9 ff f9 	sub	r9,r8,-7
8000cf76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cf7a:	11 88       	ld.ub	r8,r8[0x0]
8000cf7c:	b2 88       	st.b	r9[0x0],r8
}
8000cf7e:	2f ed       	sub	sp,-8
8000cf80:	e3 cd 80 80 	ldm	sp++,r7,pc

8000cf84 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000cf84:	eb cd 40 c0 	pushm	r6-r7,lr
8000cf88:	1a 97       	mov	r7,sp
8000cf8a:	20 3d       	sub	sp,12
8000cf8c:	49 06       	lddpc	r6,8000cfcc <mav_array_memcpy+0x48>
8000cf8e:	1e 26       	rsub	r6,pc
8000cf90:	ef 4c ff fc 	st.w	r7[-4],r12
8000cf94:	ef 4b ff f8 	st.w	r7[-8],r11
8000cf98:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000cf9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cfa0:	58 08       	cp.w	r8,0
8000cfa2:	c0 91       	brne	8000cfb4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000cfa4:	ee fa ff f4 	ld.w	r10,r7[-12]
8000cfa8:	30 0b       	mov	r11,0
8000cfaa:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cfae:	f0 16 00 30 	mcall	r6[192]
8000cfb2:	c0 98       	rjmp	8000cfc4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000cfb4:	ee fa ff f4 	ld.w	r10,r7[-12]
8000cfb8:	ee fb ff f8 	ld.w	r11,r7[-8]
8000cfbc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cfc0:	f0 16 00 21 	mcall	r6[132]
	}
}
8000cfc4:	2f dd       	sub	sp,-12
8000cfc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cfca:	00 00       	add	r0,r0
8000cfcc:	80 00       	ld.sh	r0,r0[0x0]
8000cfce:	ce 12       	brcc	8000cf90 <mav_array_memcpy+0xc>

8000cfd0 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000cfd0:	eb cd 40 c0 	pushm	r6-r7,lr
8000cfd4:	1a 97       	mov	r7,sp
8000cfd6:	20 4d       	sub	sp,16
8000cfd8:	48 e6       	lddpc	r6,8000d010 <_mav_put_char_array+0x40>
8000cfda:	1e 26       	rsub	r6,pc
8000cfdc:	ef 4c ff fc 	st.w	r7[-4],r12
8000cfe0:	ef 4a ff f4 	st.w	r7[-12],r10
8000cfe4:	12 98       	mov	r8,r9
8000cfe6:	16 99       	mov	r9,r11
8000cfe8:	ef 69 ff f8 	st.b	r7[-8],r9
8000cfec:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000cff0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cff4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cff8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000cffc:	f4 08 00 08 	add	r8,r10,r8
8000d000:	12 9a       	mov	r10,r9
8000d002:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d006:	10 9c       	mov	r12,r8
8000d008:	cb ef       	rcall	8000cf84 <mav_array_memcpy>

}
8000d00a:	2f cd       	sub	sp,-16
8000d00c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d010:	80 00       	ld.sh	r0,r0[0x0]
8000d012:	ce 5e       	rcall	8000cddc <_mav_finalize_message_chan_send+0xe0>

8000d014 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000d014:	eb cd 40 c0 	pushm	r6-r7,lr
8000d018:	1a 97       	mov	r7,sp
8000d01a:	20 9d       	sub	sp,36
8000d01c:	49 b6       	lddpc	r6,8000d088 <mavlink_msg_heartbeat_send+0x74>
8000d01e:	1e 26       	rsub	r6,pc
8000d020:	ee ce ff f4 	sub	lr,r7,-12
8000d024:	ef 4c ff f0 	st.w	r7[-16],r12
8000d028:	ef 48 ff e0 	st.w	r7[-32],r8
8000d02c:	7c 08       	ld.w	r8,lr[0x0]
8000d02e:	ef 6b ff ec 	st.b	r7[-20],r11
8000d032:	ef 6a ff e8 	st.b	r7[-24],r10
8000d036:	ef 69 ff e4 	st.b	r7[-28],r9
8000d03a:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000d03e:	ee c9 00 20 	sub	r9,r7,32
8000d042:	ee c8 00 0c 	sub	r8,r7,12
8000d046:	12 9b       	mov	r11,r9
8000d048:	10 9c       	mov	r12,r8
8000d04a:	c2 1f       	rcall	8000ce8c <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000d04c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d050:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000d054:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d058:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000d05c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000d060:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000d064:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d068:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000d06c:	30 38       	mov	r8,3
8000d06e:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000d072:	ee ca 00 0c 	sub	r10,r7,12
8000d076:	33 28       	mov	r8,50
8000d078:	30 99       	mov	r9,9
8000d07a:	30 0b       	mov	r11,0
8000d07c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d080:	c3 ee       	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000d082:	2f 7d       	sub	sp,-36
8000d084:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d088:	80 00       	ld.sh	r0,r0[0x0]
8000d08a:	ce a2       	brcc	8000d05e <mavlink_msg_heartbeat_send+0x4a>

8000d08c <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000d08c:	eb cd 40 e0 	pushm	r5-r7,lr
8000d090:	1a 97       	mov	r7,sp
8000d092:	21 2d       	sub	sp,72
8000d094:	4b 76       	lddpc	r6,8000d170 <mavlink_msg_gps_raw_int_send+0xe4>
8000d096:	1e 26       	rsub	r6,pc
8000d098:	ee c5 ff f0 	sub	r5,r7,-16
8000d09c:	ef 4c ff dc 	st.w	r7[-36],r12
8000d0a0:	ee eb ff d4 	st.d	r7[-44],r10
8000d0a4:	12 9e       	mov	lr,r9
8000d0a6:	ef 48 ff cc 	st.w	r7[-52],r8
8000d0aa:	6a 2c       	ld.w	r12,r5[0x8]
8000d0ac:	6a 3b       	ld.w	r11,r5[0xc]
8000d0ae:	6a 4a       	ld.w	r10,r5[0x10]
8000d0b0:	6a 59       	ld.w	r9,r5[0x14]
8000d0b2:	6a 68       	ld.w	r8,r5[0x18]
8000d0b4:	ef 6e ff d0 	st.b	r7[-48],lr
8000d0b8:	ef 5c ff c8 	st.h	r7[-56],r12
8000d0bc:	ef 5b ff c4 	st.h	r7[-60],r11
8000d0c0:	ef 5a ff c0 	st.h	r7[-64],r10
8000d0c4:	ef 59 ff bc 	st.h	r7[-68],r9
8000d0c8:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d0cc:	ee c9 00 2c 	sub	r9,r7,44
8000d0d0:	ee c8 00 20 	sub	r8,r7,32
8000d0d4:	12 9b       	mov	r11,r9
8000d0d6:	10 9c       	mov	r12,r8
8000d0d8:	c0 6f       	rcall	8000cee4 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000d0da:	ee c9 00 34 	sub	r9,r7,52
8000d0de:	ee c8 00 20 	sub	r8,r7,32
8000d0e2:	2f 88       	sub	r8,-8
8000d0e4:	12 9b       	mov	r11,r9
8000d0e6:	10 9c       	mov	r12,r8
8000d0e8:	cd 2e       	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000d0ea:	0a 99       	mov	r9,r5
8000d0ec:	ee c8 00 20 	sub	r8,r7,32
8000d0f0:	2f 48       	sub	r8,-12
8000d0f2:	12 9b       	mov	r11,r9
8000d0f4:	10 9c       	mov	r12,r8
8000d0f6:	cc be       	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000d0f8:	ea c9 ff fc 	sub	r9,r5,-4
8000d0fc:	ee c8 00 20 	sub	r8,r7,32
8000d100:	2f 08       	sub	r8,-16
8000d102:	12 9b       	mov	r11,r9
8000d104:	10 9c       	mov	r12,r8
8000d106:	cc 3e       	rcall	8000ce8c <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000d108:	ee c9 00 38 	sub	r9,r7,56
8000d10c:	ee c8 00 20 	sub	r8,r7,32
8000d110:	2e c8       	sub	r8,-20
8000d112:	12 9b       	mov	r11,r9
8000d114:	10 9c       	mov	r12,r8
8000d116:	ca 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000d118:	ee c9 00 3c 	sub	r9,r7,60
8000d11c:	ee c8 00 20 	sub	r8,r7,32
8000d120:	2e a8       	sub	r8,-22
8000d122:	12 9b       	mov	r11,r9
8000d124:	10 9c       	mov	r12,r8
8000d126:	c9 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000d128:	ee c9 00 40 	sub	r9,r7,64
8000d12c:	ee c8 00 20 	sub	r8,r7,32
8000d130:	2e 88       	sub	r8,-24
8000d132:	12 9b       	mov	r11,r9
8000d134:	10 9c       	mov	r12,r8
8000d136:	c9 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000d138:	ee c9 00 44 	sub	r9,r7,68
8000d13c:	ee c8 00 20 	sub	r8,r7,32
8000d140:	2e 68       	sub	r8,-26
8000d142:	12 9b       	mov	r11,r9
8000d144:	10 9c       	mov	r12,r8
8000d146:	c8 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000d148:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000d14c:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000d150:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d154:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000d158:	ee ca 00 20 	sub	r10,r7,32
8000d15c:	31 88       	mov	r8,24
8000d15e:	31 e9       	mov	r9,30
8000d160:	31 8b       	mov	r11,24
8000d162:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d166:	fe b0 fd cb 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000d16a:	2e ed       	sub	sp,-72
8000d16c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d170:	80 00       	ld.sh	r0,r0[0x0]
8000d172:	cf 1a       	rjmp	8000cf54 <byte_swap_8+0x70>

8000d174 <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d174:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d178:	1a 97       	mov	r7,sp
8000d17a:	21 1d       	sub	sp,68
8000d17c:	4c 26       	lddpc	r6,8000d284 <mavlink_msg_scaled_imu_send+0x110>
8000d17e:	1e 26       	rsub	r6,pc
8000d180:	ee ce ff e4 	sub	lr,r7,-28
8000d184:	ef 4c ff e4 	st.w	r7[-28],r12
8000d188:	ef 4b ff e0 	st.w	r7[-32],r11
8000d18c:	14 91       	mov	r1,r10
8000d18e:	12 92       	mov	r2,r9
8000d190:	10 93       	mov	r3,r8
8000d192:	7c 05       	ld.w	r5,lr[0x0]
8000d194:	7c 1c       	ld.w	r12,lr[0x4]
8000d196:	7c 2b       	ld.w	r11,lr[0x8]
8000d198:	7c 3a       	ld.w	r10,lr[0xc]
8000d19a:	7c 49       	ld.w	r9,lr[0x10]
8000d19c:	7c 58       	ld.w	r8,lr[0x14]
8000d19e:	02 9e       	mov	lr,r1
8000d1a0:	ef 5e ff dc 	st.h	r7[-36],lr
8000d1a4:	04 9e       	mov	lr,r2
8000d1a6:	ef 5e ff d8 	st.h	r7[-40],lr
8000d1aa:	06 9e       	mov	lr,r3
8000d1ac:	ef 5e ff d4 	st.h	r7[-44],lr
8000d1b0:	0a 9e       	mov	lr,r5
8000d1b2:	ef 5e ff d0 	st.h	r7[-48],lr
8000d1b6:	ef 5c ff cc 	st.h	r7[-52],r12
8000d1ba:	ef 5b ff c8 	st.h	r7[-56],r11
8000d1be:	ef 5a ff c4 	st.h	r7[-60],r10
8000d1c2:	ef 59 ff c0 	st.h	r7[-64],r9
8000d1c6:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d1ca:	ee c9 00 20 	sub	r9,r7,32
8000d1ce:	ee c8 00 18 	sub	r8,r7,24
8000d1d2:	12 9b       	mov	r11,r9
8000d1d4:	10 9c       	mov	r12,r8
8000d1d6:	c5 be       	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000d1d8:	ee c9 00 24 	sub	r9,r7,36
8000d1dc:	ee c8 00 18 	sub	r8,r7,24
8000d1e0:	2f c8       	sub	r8,-4
8000d1e2:	12 9b       	mov	r11,r9
8000d1e4:	10 9c       	mov	r12,r8
8000d1e6:	c3 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000d1e8:	ee c9 00 28 	sub	r9,r7,40
8000d1ec:	ee c8 00 18 	sub	r8,r7,24
8000d1f0:	2f a8       	sub	r8,-6
8000d1f2:	12 9b       	mov	r11,r9
8000d1f4:	10 9c       	mov	r12,r8
8000d1f6:	c3 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000d1f8:	ee c9 00 2c 	sub	r9,r7,44
8000d1fc:	ee c8 00 18 	sub	r8,r7,24
8000d200:	2f 88       	sub	r8,-8
8000d202:	12 9b       	mov	r11,r9
8000d204:	10 9c       	mov	r12,r8
8000d206:	c2 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000d208:	ee c9 00 30 	sub	r9,r7,48
8000d20c:	ee c8 00 18 	sub	r8,r7,24
8000d210:	2f 68       	sub	r8,-10
8000d212:	12 9b       	mov	r11,r9
8000d214:	10 9c       	mov	r12,r8
8000d216:	c2 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000d218:	ee c9 00 34 	sub	r9,r7,52
8000d21c:	ee c8 00 18 	sub	r8,r7,24
8000d220:	2f 48       	sub	r8,-12
8000d222:	12 9b       	mov	r11,r9
8000d224:	10 9c       	mov	r12,r8
8000d226:	c1 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000d228:	ee c9 00 38 	sub	r9,r7,56
8000d22c:	ee c8 00 18 	sub	r8,r7,24
8000d230:	2f 28       	sub	r8,-14
8000d232:	12 9b       	mov	r11,r9
8000d234:	10 9c       	mov	r12,r8
8000d236:	c1 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000d238:	ee c9 00 3c 	sub	r9,r7,60
8000d23c:	ee c8 00 18 	sub	r8,r7,24
8000d240:	2f 08       	sub	r8,-16
8000d242:	12 9b       	mov	r11,r9
8000d244:	10 9c       	mov	r12,r8
8000d246:	c0 9e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000d248:	ee c9 00 40 	sub	r9,r7,64
8000d24c:	ee c8 00 18 	sub	r8,r7,24
8000d250:	2e e8       	sub	r8,-18
8000d252:	12 9b       	mov	r11,r9
8000d254:	10 9c       	mov	r12,r8
8000d256:	c0 1e       	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000d258:	ee c9 00 44 	sub	r9,r7,68
8000d25c:	ee c8 00 18 	sub	r8,r7,24
8000d260:	2e c8       	sub	r8,-20
8000d262:	12 9b       	mov	r11,r9
8000d264:	10 9c       	mov	r12,r8
8000d266:	fe b0 fd f9 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000d26a:	ee ca 00 18 	sub	r10,r7,24
8000d26e:	e0 68 00 aa 	mov	r8,170
8000d272:	31 69       	mov	r9,22
8000d274:	31 ab       	mov	r11,26
8000d276:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d27a:	fe b0 fd 41 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000d27e:	2e fd       	sub	sp,-68
8000d280:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d284:	80 00       	ld.sh	r0,r0[0x0]
8000d286:	d0 02       	popm	

8000d288 <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d288:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d28c:	1a 97       	mov	r7,sp
8000d28e:	21 3d       	sub	sp,76
8000d290:	4c 76       	lddpc	r6,8000d3ac <mavlink_msg_raw_imu_send+0x124>
8000d292:	1e 26       	rsub	r6,pc
8000d294:	ee ce ff e4 	sub	lr,r7,-28
8000d298:	ef 4c ff e0 	st.w	r7[-32],r12
8000d29c:	ee eb ff d8 	st.d	r7[-40],r10
8000d2a0:	12 91       	mov	r1,r9
8000d2a2:	10 92       	mov	r2,r8
8000d2a4:	7c 03       	ld.w	r3,lr[0x0]
8000d2a6:	7c 15       	ld.w	r5,lr[0x4]
8000d2a8:	7c 2c       	ld.w	r12,lr[0x8]
8000d2aa:	7c 3b       	ld.w	r11,lr[0xc]
8000d2ac:	7c 4a       	ld.w	r10,lr[0x10]
8000d2ae:	7c 59       	ld.w	r9,lr[0x14]
8000d2b0:	7c 68       	ld.w	r8,lr[0x18]
8000d2b2:	02 9e       	mov	lr,r1
8000d2b4:	ef 5e ff d4 	st.h	r7[-44],lr
8000d2b8:	04 9e       	mov	lr,r2
8000d2ba:	ef 5e ff d0 	st.h	r7[-48],lr
8000d2be:	06 9e       	mov	lr,r3
8000d2c0:	ef 5e ff cc 	st.h	r7[-52],lr
8000d2c4:	0a 9e       	mov	lr,r5
8000d2c6:	ef 5e ff c8 	st.h	r7[-56],lr
8000d2ca:	ef 5c ff c4 	st.h	r7[-60],r12
8000d2ce:	ef 5b ff c0 	st.h	r7[-64],r11
8000d2d2:	ef 5a ff bc 	st.h	r7[-68],r10
8000d2d6:	ef 59 ff b8 	st.h	r7[-72],r9
8000d2da:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d2de:	ee c9 00 28 	sub	r9,r7,40
8000d2e2:	ee c8 00 1c 	sub	r8,r7,28
8000d2e6:	12 9b       	mov	r11,r9
8000d2e8:	10 9c       	mov	r12,r8
8000d2ea:	fe b0 fd fd 	rcall	8000cee4 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000d2ee:	ee c9 00 2c 	sub	r9,r7,44
8000d2f2:	ee c8 00 1c 	sub	r8,r7,28
8000d2f6:	2f 88       	sub	r8,-8
8000d2f8:	12 9b       	mov	r11,r9
8000d2fa:	10 9c       	mov	r12,r8
8000d2fc:	fe b0 fd ae 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000d300:	ee c9 00 30 	sub	r9,r7,48
8000d304:	ee c8 00 1c 	sub	r8,r7,28
8000d308:	2f 68       	sub	r8,-10
8000d30a:	12 9b       	mov	r11,r9
8000d30c:	10 9c       	mov	r12,r8
8000d30e:	fe b0 fd a5 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000d312:	ee c9 00 34 	sub	r9,r7,52
8000d316:	ee c8 00 1c 	sub	r8,r7,28
8000d31a:	2f 48       	sub	r8,-12
8000d31c:	12 9b       	mov	r11,r9
8000d31e:	10 9c       	mov	r12,r8
8000d320:	fe b0 fd 9c 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000d324:	ee c9 00 38 	sub	r9,r7,56
8000d328:	ee c8 00 1c 	sub	r8,r7,28
8000d32c:	2f 28       	sub	r8,-14
8000d32e:	12 9b       	mov	r11,r9
8000d330:	10 9c       	mov	r12,r8
8000d332:	fe b0 fd 93 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000d336:	ee c9 00 3c 	sub	r9,r7,60
8000d33a:	ee c8 00 1c 	sub	r8,r7,28
8000d33e:	2f 08       	sub	r8,-16
8000d340:	12 9b       	mov	r11,r9
8000d342:	10 9c       	mov	r12,r8
8000d344:	fe b0 fd 8a 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000d348:	ee c9 00 40 	sub	r9,r7,64
8000d34c:	ee c8 00 1c 	sub	r8,r7,28
8000d350:	2e e8       	sub	r8,-18
8000d352:	12 9b       	mov	r11,r9
8000d354:	10 9c       	mov	r12,r8
8000d356:	fe b0 fd 81 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000d35a:	ee c9 00 44 	sub	r9,r7,68
8000d35e:	ee c8 00 1c 	sub	r8,r7,28
8000d362:	2e c8       	sub	r8,-20
8000d364:	12 9b       	mov	r11,r9
8000d366:	10 9c       	mov	r12,r8
8000d368:	fe b0 fd 78 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000d36c:	ee c9 00 48 	sub	r9,r7,72
8000d370:	ee c8 00 1c 	sub	r8,r7,28
8000d374:	2e a8       	sub	r8,-22
8000d376:	12 9b       	mov	r11,r9
8000d378:	10 9c       	mov	r12,r8
8000d37a:	fe b0 fd 6f 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000d37e:	ee c9 00 4c 	sub	r9,r7,76
8000d382:	ee c8 00 1c 	sub	r8,r7,28
8000d386:	2e 88       	sub	r8,-24
8000d388:	12 9b       	mov	r11,r9
8000d38a:	10 9c       	mov	r12,r8
8000d38c:	fe b0 fd 66 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000d390:	ee ca 00 1c 	sub	r10,r7,28
8000d394:	e0 68 00 90 	mov	r8,144
8000d398:	31 a9       	mov	r9,26
8000d39a:	31 bb       	mov	r11,27
8000d39c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d3a0:	fe b0 fc ae 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000d3a4:	2e dd       	sub	sp,-76
8000d3a6:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d3aa:	00 00       	add	r0,r0
8000d3ac:	80 00       	ld.sh	r0,r0[0x0]
8000d3ae:	d1 16       	*unknown*

8000d3b0 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000d3b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3b4:	1a 97       	mov	r7,sp
8000d3b6:	20 9d       	sub	sp,36
8000d3b8:	49 e6       	lddpc	r6,8000d430 <mavlink_msg_scaled_pressure_send+0x80>
8000d3ba:	1e 26       	rsub	r6,pc
8000d3bc:	ef 4c ff ec 	st.w	r7[-20],r12
8000d3c0:	ef 4b ff e8 	st.w	r7[-24],r11
8000d3c4:	ef 4a ff e4 	st.w	r7[-28],r10
8000d3c8:	ef 49 ff e0 	st.w	r7[-32],r9
8000d3cc:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d3d0:	ee c9 00 18 	sub	r9,r7,24
8000d3d4:	ee c8 00 10 	sub	r8,r7,16
8000d3d8:	12 9b       	mov	r11,r9
8000d3da:	10 9c       	mov	r12,r8
8000d3dc:	fe b0 fd 58 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000d3e0:	ee c9 00 1c 	sub	r9,r7,28
8000d3e4:	ee c8 00 10 	sub	r8,r7,16
8000d3e8:	2f c8       	sub	r8,-4
8000d3ea:	12 9b       	mov	r11,r9
8000d3ec:	10 9c       	mov	r12,r8
8000d3ee:	fe b0 fd 4f 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000d3f2:	ee c9 00 20 	sub	r9,r7,32
8000d3f6:	ee c8 00 10 	sub	r8,r7,16
8000d3fa:	2f 88       	sub	r8,-8
8000d3fc:	12 9b       	mov	r11,r9
8000d3fe:	10 9c       	mov	r12,r8
8000d400:	fe b0 fd 46 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000d404:	ee c9 00 24 	sub	r9,r7,36
8000d408:	ee c8 00 10 	sub	r8,r7,16
8000d40c:	2f 48       	sub	r8,-12
8000d40e:	12 9b       	mov	r11,r9
8000d410:	10 9c       	mov	r12,r8
8000d412:	fe b0 fd 23 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000d416:	ee ca 00 10 	sub	r10,r7,16
8000d41a:	37 38       	mov	r8,115
8000d41c:	30 e9       	mov	r9,14
8000d41e:	31 db       	mov	r11,29
8000d420:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d424:	fe b0 fc 6c 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000d428:	2f 7d       	sub	sp,-36
8000d42a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d42e:	00 00       	add	r0,r0
8000d430:	80 00       	ld.sh	r0,r0[0x0]
8000d432:	d2 3e       	*unknown*

8000d434 <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000d434:	eb cd 40 e0 	pushm	r5-r7,lr
8000d438:	1a 97       	mov	r7,sp
8000d43a:	20 cd       	sub	sp,48
8000d43c:	4a c6       	lddpc	r6,8000d4ec <mavlink_msg_attitude_send+0xb8>
8000d43e:	1e 26       	rsub	r6,pc
8000d440:	ee c5 ff f0 	sub	r5,r7,-16
8000d444:	ef 4c ff e0 	st.w	r7[-32],r12
8000d448:	ef 4b ff dc 	st.w	r7[-36],r11
8000d44c:	ef 4a ff d8 	st.w	r7[-40],r10
8000d450:	ef 49 ff d4 	st.w	r7[-44],r9
8000d454:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d458:	ee c9 00 24 	sub	r9,r7,36
8000d45c:	ee c8 00 1c 	sub	r8,r7,28
8000d460:	12 9b       	mov	r11,r9
8000d462:	10 9c       	mov	r12,r8
8000d464:	fe b0 fd 14 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000d468:	ee c9 00 28 	sub	r9,r7,40
8000d46c:	ee c8 00 1c 	sub	r8,r7,28
8000d470:	2f c8       	sub	r8,-4
8000d472:	12 9b       	mov	r11,r9
8000d474:	10 9c       	mov	r12,r8
8000d476:	fe b0 fd 0b 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000d47a:	ee c9 00 2c 	sub	r9,r7,44
8000d47e:	ee c8 00 1c 	sub	r8,r7,28
8000d482:	2f 88       	sub	r8,-8
8000d484:	12 9b       	mov	r11,r9
8000d486:	10 9c       	mov	r12,r8
8000d488:	fe b0 fd 02 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000d48c:	ee c9 00 30 	sub	r9,r7,48
8000d490:	ee c8 00 1c 	sub	r8,r7,28
8000d494:	2f 48       	sub	r8,-12
8000d496:	12 9b       	mov	r11,r9
8000d498:	10 9c       	mov	r12,r8
8000d49a:	fe b0 fc f9 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000d49e:	0a 99       	mov	r9,r5
8000d4a0:	ee c8 00 1c 	sub	r8,r7,28
8000d4a4:	2f 08       	sub	r8,-16
8000d4a6:	12 9b       	mov	r11,r9
8000d4a8:	10 9c       	mov	r12,r8
8000d4aa:	fe b0 fc f1 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000d4ae:	ea c9 ff fc 	sub	r9,r5,-4
8000d4b2:	ee c8 00 1c 	sub	r8,r7,28
8000d4b6:	2e c8       	sub	r8,-20
8000d4b8:	12 9b       	mov	r11,r9
8000d4ba:	10 9c       	mov	r12,r8
8000d4bc:	fe b0 fc e8 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000d4c0:	ea c9 ff f8 	sub	r9,r5,-8
8000d4c4:	ee c8 00 1c 	sub	r8,r7,28
8000d4c8:	2e 88       	sub	r8,-24
8000d4ca:	12 9b       	mov	r11,r9
8000d4cc:	10 9c       	mov	r12,r8
8000d4ce:	fe b0 fc df 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000d4d2:	ee ca 00 1c 	sub	r10,r7,28
8000d4d6:	32 78       	mov	r8,39
8000d4d8:	31 c9       	mov	r9,28
8000d4da:	31 eb       	mov	r11,30
8000d4dc:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d4e0:	fe b0 fc 0e 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000d4e4:	2f 4d       	sub	sp,-48
8000d4e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d4ea:	00 00       	add	r0,r0
8000d4ec:	80 00       	ld.sh	r0,r0[0x0]
8000d4ee:	d2 c2       	popm	r8-r10,r12

8000d4f0 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000d4f0:	eb cd 40 e0 	pushm	r5-r7,lr
8000d4f4:	1a 97       	mov	r7,sp
8000d4f6:	20 dd       	sub	sp,52
8000d4f8:	4b 16       	lddpc	r6,8000d5bc <mavlink_msg_attitude_quaternion_send+0xcc>
8000d4fa:	1e 26       	rsub	r6,pc
8000d4fc:	ee c5 ff f0 	sub	r5,r7,-16
8000d500:	ef 4c ff dc 	st.w	r7[-36],r12
8000d504:	ef 4b ff d8 	st.w	r7[-40],r11
8000d508:	ef 4a ff d4 	st.w	r7[-44],r10
8000d50c:	ef 49 ff d0 	st.w	r7[-48],r9
8000d510:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d514:	ee c9 00 28 	sub	r9,r7,40
8000d518:	ee c8 00 20 	sub	r8,r7,32
8000d51c:	12 9b       	mov	r11,r9
8000d51e:	10 9c       	mov	r12,r8
8000d520:	fe b0 fc b6 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000d524:	ee c9 00 2c 	sub	r9,r7,44
8000d528:	ee c8 00 20 	sub	r8,r7,32
8000d52c:	2f c8       	sub	r8,-4
8000d52e:	12 9b       	mov	r11,r9
8000d530:	10 9c       	mov	r12,r8
8000d532:	fe b0 fc ad 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000d536:	ee c9 00 30 	sub	r9,r7,48
8000d53a:	ee c8 00 20 	sub	r8,r7,32
8000d53e:	2f 88       	sub	r8,-8
8000d540:	12 9b       	mov	r11,r9
8000d542:	10 9c       	mov	r12,r8
8000d544:	fe b0 fc a4 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000d548:	ee c9 00 34 	sub	r9,r7,52
8000d54c:	ee c8 00 20 	sub	r8,r7,32
8000d550:	2f 48       	sub	r8,-12
8000d552:	12 9b       	mov	r11,r9
8000d554:	10 9c       	mov	r12,r8
8000d556:	fe b0 fc 9b 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000d55a:	0a 99       	mov	r9,r5
8000d55c:	ee c8 00 20 	sub	r8,r7,32
8000d560:	2f 08       	sub	r8,-16
8000d562:	12 9b       	mov	r11,r9
8000d564:	10 9c       	mov	r12,r8
8000d566:	fe b0 fc 93 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000d56a:	ea c9 ff fc 	sub	r9,r5,-4
8000d56e:	ee c8 00 20 	sub	r8,r7,32
8000d572:	2e c8       	sub	r8,-20
8000d574:	12 9b       	mov	r11,r9
8000d576:	10 9c       	mov	r12,r8
8000d578:	fe b0 fc 8a 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000d57c:	ea c9 ff f8 	sub	r9,r5,-8
8000d580:	ee c8 00 20 	sub	r8,r7,32
8000d584:	2e 88       	sub	r8,-24
8000d586:	12 9b       	mov	r11,r9
8000d588:	10 9c       	mov	r12,r8
8000d58a:	fe b0 fc 81 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000d58e:	ea c9 ff f4 	sub	r9,r5,-12
8000d592:	ee c8 00 20 	sub	r8,r7,32
8000d596:	2e 48       	sub	r8,-28
8000d598:	12 9b       	mov	r11,r9
8000d59a:	10 9c       	mov	r12,r8
8000d59c:	fe b0 fc 78 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000d5a0:	ee ca 00 20 	sub	r10,r7,32
8000d5a4:	e0 68 00 f6 	mov	r8,246
8000d5a8:	32 09       	mov	r9,32
8000d5aa:	31 fb       	mov	r11,31
8000d5ac:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d5b0:	fe b0 fb a6 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000d5b4:	2f 3d       	sub	sp,-52
8000d5b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d5ba:	00 00       	add	r0,r0
8000d5bc:	80 00       	ld.sh	r0,r0[0x0]
8000d5be:	d3 7e       	*unknown*

8000d5c0 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000d5c0:	eb cd 40 e0 	pushm	r5-r7,lr
8000d5c4:	1a 97       	mov	r7,sp
8000d5c6:	20 cd       	sub	sp,48
8000d5c8:	4a c6       	lddpc	r6,8000d678 <mavlink_msg_local_position_ned_send+0xb8>
8000d5ca:	1e 26       	rsub	r6,pc
8000d5cc:	ee c5 ff f0 	sub	r5,r7,-16
8000d5d0:	ef 4c ff e0 	st.w	r7[-32],r12
8000d5d4:	ef 4b ff dc 	st.w	r7[-36],r11
8000d5d8:	ef 4a ff d8 	st.w	r7[-40],r10
8000d5dc:	ef 49 ff d4 	st.w	r7[-44],r9
8000d5e0:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d5e4:	ee c9 00 24 	sub	r9,r7,36
8000d5e8:	ee c8 00 1c 	sub	r8,r7,28
8000d5ec:	12 9b       	mov	r11,r9
8000d5ee:	10 9c       	mov	r12,r8
8000d5f0:	fe b0 fc 4e 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000d5f4:	ee c9 00 28 	sub	r9,r7,40
8000d5f8:	ee c8 00 1c 	sub	r8,r7,28
8000d5fc:	2f c8       	sub	r8,-4
8000d5fe:	12 9b       	mov	r11,r9
8000d600:	10 9c       	mov	r12,r8
8000d602:	fe b0 fc 45 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000d606:	ee c9 00 2c 	sub	r9,r7,44
8000d60a:	ee c8 00 1c 	sub	r8,r7,28
8000d60e:	2f 88       	sub	r8,-8
8000d610:	12 9b       	mov	r11,r9
8000d612:	10 9c       	mov	r12,r8
8000d614:	fe b0 fc 3c 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000d618:	ee c9 00 30 	sub	r9,r7,48
8000d61c:	ee c8 00 1c 	sub	r8,r7,28
8000d620:	2f 48       	sub	r8,-12
8000d622:	12 9b       	mov	r11,r9
8000d624:	10 9c       	mov	r12,r8
8000d626:	fe b0 fc 33 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000d62a:	0a 99       	mov	r9,r5
8000d62c:	ee c8 00 1c 	sub	r8,r7,28
8000d630:	2f 08       	sub	r8,-16
8000d632:	12 9b       	mov	r11,r9
8000d634:	10 9c       	mov	r12,r8
8000d636:	fe b0 fc 2b 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000d63a:	ea c9 ff fc 	sub	r9,r5,-4
8000d63e:	ee c8 00 1c 	sub	r8,r7,28
8000d642:	2e c8       	sub	r8,-20
8000d644:	12 9b       	mov	r11,r9
8000d646:	10 9c       	mov	r12,r8
8000d648:	fe b0 fc 22 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000d64c:	ea c9 ff f8 	sub	r9,r5,-8
8000d650:	ee c8 00 1c 	sub	r8,r7,28
8000d654:	2e 88       	sub	r8,-24
8000d656:	12 9b       	mov	r11,r9
8000d658:	10 9c       	mov	r12,r8
8000d65a:	fe b0 fc 19 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000d65e:	ee ca 00 1c 	sub	r10,r7,28
8000d662:	e0 68 00 b9 	mov	r8,185
8000d666:	31 c9       	mov	r9,28
8000d668:	32 0b       	mov	r11,32
8000d66a:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d66e:	fe b0 fb 47 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000d672:	2f 4d       	sub	sp,-48
8000d674:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d678:	80 00       	ld.sh	r0,r0[0x0]
8000d67a:	d4 4e       	*unknown*

8000d67c <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000d67c:	eb cd 40 e0 	pushm	r5-r7,lr
8000d680:	1a 97       	mov	r7,sp
8000d682:	21 0d       	sub	sp,64
8000d684:	4b b6       	lddpc	r6,8000d770 <mavlink_msg_global_position_int_send+0xf4>
8000d686:	1e 26       	rsub	r6,pc
8000d688:	ee c5 ff f0 	sub	r5,r7,-16
8000d68c:	ef 4c ff e0 	st.w	r7[-32],r12
8000d690:	ef 4b ff dc 	st.w	r7[-36],r11
8000d694:	ef 4a ff d8 	st.w	r7[-40],r10
8000d698:	ef 49 ff d4 	st.w	r7[-44],r9
8000d69c:	ef 48 ff d0 	st.w	r7[-48],r8
8000d6a0:	6a 1b       	ld.w	r11,r5[0x4]
8000d6a2:	6a 2a       	ld.w	r10,r5[0x8]
8000d6a4:	6a 39       	ld.w	r9,r5[0xc]
8000d6a6:	6a 48       	ld.w	r8,r5[0x10]
8000d6a8:	ef 5b ff cc 	st.h	r7[-52],r11
8000d6ac:	ef 5a ff c8 	st.h	r7[-56],r10
8000d6b0:	ef 59 ff c4 	st.h	r7[-60],r9
8000d6b4:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d6b8:	ee c9 00 24 	sub	r9,r7,36
8000d6bc:	ee c8 00 1c 	sub	r8,r7,28
8000d6c0:	12 9b       	mov	r11,r9
8000d6c2:	10 9c       	mov	r12,r8
8000d6c4:	fe b0 fb e4 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000d6c8:	ee c9 00 28 	sub	r9,r7,40
8000d6cc:	ee c8 00 1c 	sub	r8,r7,28
8000d6d0:	2f c8       	sub	r8,-4
8000d6d2:	12 9b       	mov	r11,r9
8000d6d4:	10 9c       	mov	r12,r8
8000d6d6:	fe b0 fb db 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000d6da:	ee c9 00 2c 	sub	r9,r7,44
8000d6de:	ee c8 00 1c 	sub	r8,r7,28
8000d6e2:	2f 88       	sub	r8,-8
8000d6e4:	12 9b       	mov	r11,r9
8000d6e6:	10 9c       	mov	r12,r8
8000d6e8:	fe b0 fb d2 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000d6ec:	ee c9 00 30 	sub	r9,r7,48
8000d6f0:	ee c8 00 1c 	sub	r8,r7,28
8000d6f4:	2f 48       	sub	r8,-12
8000d6f6:	12 9b       	mov	r11,r9
8000d6f8:	10 9c       	mov	r12,r8
8000d6fa:	fe b0 fb c9 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000d6fe:	0a 99       	mov	r9,r5
8000d700:	ee c8 00 1c 	sub	r8,r7,28
8000d704:	2f 08       	sub	r8,-16
8000d706:	12 9b       	mov	r11,r9
8000d708:	10 9c       	mov	r12,r8
8000d70a:	fe b0 fb c1 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000d70e:	ee c9 00 34 	sub	r9,r7,52
8000d712:	ee c8 00 1c 	sub	r8,r7,28
8000d716:	2e c8       	sub	r8,-20
8000d718:	12 9b       	mov	r11,r9
8000d71a:	10 9c       	mov	r12,r8
8000d71c:	fe b0 fb 9e 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000d720:	ee c9 00 38 	sub	r9,r7,56
8000d724:	ee c8 00 1c 	sub	r8,r7,28
8000d728:	2e a8       	sub	r8,-22
8000d72a:	12 9b       	mov	r11,r9
8000d72c:	10 9c       	mov	r12,r8
8000d72e:	fe b0 fb 95 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000d732:	ee c9 00 3c 	sub	r9,r7,60
8000d736:	ee c8 00 1c 	sub	r8,r7,28
8000d73a:	2e 88       	sub	r8,-24
8000d73c:	12 9b       	mov	r11,r9
8000d73e:	10 9c       	mov	r12,r8
8000d740:	fe b0 fb 8c 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000d744:	ee c9 00 40 	sub	r9,r7,64
8000d748:	ee c8 00 1c 	sub	r8,r7,28
8000d74c:	2e 68       	sub	r8,-26
8000d74e:	12 9b       	mov	r11,r9
8000d750:	10 9c       	mov	r12,r8
8000d752:	fe b0 fb 83 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000d756:	ee ca 00 1c 	sub	r10,r7,28
8000d75a:	36 88       	mov	r8,104
8000d75c:	31 c9       	mov	r9,28
8000d75e:	32 1b       	mov	r11,33
8000d760:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d764:	fe b0 fa cc 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000d768:	2f 0d       	sub	sp,-64
8000d76a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d76e:	00 00       	add	r0,r0
8000d770:	80 00       	ld.sh	r0,r0[0x0]
8000d772:	d5 0a       	popm	r11,lr

8000d774 <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000d774:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d778:	1a 97       	mov	r7,sp
8000d77a:	21 2d       	sub	sp,72
8000d77c:	4c 86       	lddpc	r6,8000d89c <mavlink_msg_rc_channels_scaled_send+0x128>
8000d77e:	1e 26       	rsub	r6,pc
8000d780:	ee ce ff e0 	sub	lr,r7,-32
8000d784:	ef 4c ff e4 	st.w	r7[-28],r12
8000d788:	ef 4b ff e0 	st.w	r7[-32],r11
8000d78c:	14 90       	mov	r0,r10
8000d78e:	12 91       	mov	r1,r9
8000d790:	10 92       	mov	r2,r8
8000d792:	7c 03       	ld.w	r3,lr[0x0]
8000d794:	7c 15       	ld.w	r5,lr[0x4]
8000d796:	7c 2c       	ld.w	r12,lr[0x8]
8000d798:	7c 3b       	ld.w	r11,lr[0xc]
8000d79a:	7c 4a       	ld.w	r10,lr[0x10]
8000d79c:	7c 59       	ld.w	r9,lr[0x14]
8000d79e:	7c 68       	ld.w	r8,lr[0x18]
8000d7a0:	00 9e       	mov	lr,r0
8000d7a2:	ef 6e ff dc 	st.b	r7[-36],lr
8000d7a6:	02 9e       	mov	lr,r1
8000d7a8:	ef 5e ff d8 	st.h	r7[-40],lr
8000d7ac:	04 9e       	mov	lr,r2
8000d7ae:	ef 5e ff d4 	st.h	r7[-44],lr
8000d7b2:	06 9e       	mov	lr,r3
8000d7b4:	ef 5e ff d0 	st.h	r7[-48],lr
8000d7b8:	0a 9e       	mov	lr,r5
8000d7ba:	ef 5e ff cc 	st.h	r7[-52],lr
8000d7be:	ef 5c ff c8 	st.h	r7[-56],r12
8000d7c2:	ef 5b ff c4 	st.h	r7[-60],r11
8000d7c6:	ef 5a ff c0 	st.h	r7[-64],r10
8000d7ca:	ef 59 ff bc 	st.h	r7[-68],r9
8000d7ce:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d7d2:	ee c9 00 20 	sub	r9,r7,32
8000d7d6:	ee c8 00 18 	sub	r8,r7,24
8000d7da:	12 9b       	mov	r11,r9
8000d7dc:	10 9c       	mov	r12,r8
8000d7de:	fe b0 fb 57 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000d7e2:	ee c9 00 28 	sub	r9,r7,40
8000d7e6:	ee c8 00 18 	sub	r8,r7,24
8000d7ea:	2f c8       	sub	r8,-4
8000d7ec:	12 9b       	mov	r11,r9
8000d7ee:	10 9c       	mov	r12,r8
8000d7f0:	fe b0 fb 34 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000d7f4:	ee c9 00 2c 	sub	r9,r7,44
8000d7f8:	ee c8 00 18 	sub	r8,r7,24
8000d7fc:	2f a8       	sub	r8,-6
8000d7fe:	12 9b       	mov	r11,r9
8000d800:	10 9c       	mov	r12,r8
8000d802:	fe b0 fb 2b 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000d806:	ee c9 00 30 	sub	r9,r7,48
8000d80a:	ee c8 00 18 	sub	r8,r7,24
8000d80e:	2f 88       	sub	r8,-8
8000d810:	12 9b       	mov	r11,r9
8000d812:	10 9c       	mov	r12,r8
8000d814:	fe b0 fb 22 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000d818:	ee c9 00 34 	sub	r9,r7,52
8000d81c:	ee c8 00 18 	sub	r8,r7,24
8000d820:	2f 68       	sub	r8,-10
8000d822:	12 9b       	mov	r11,r9
8000d824:	10 9c       	mov	r12,r8
8000d826:	fe b0 fb 19 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000d82a:	ee c9 00 38 	sub	r9,r7,56
8000d82e:	ee c8 00 18 	sub	r8,r7,24
8000d832:	2f 48       	sub	r8,-12
8000d834:	12 9b       	mov	r11,r9
8000d836:	10 9c       	mov	r12,r8
8000d838:	fe b0 fb 10 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000d83c:	ee c9 00 3c 	sub	r9,r7,60
8000d840:	ee c8 00 18 	sub	r8,r7,24
8000d844:	2f 28       	sub	r8,-14
8000d846:	12 9b       	mov	r11,r9
8000d848:	10 9c       	mov	r12,r8
8000d84a:	fe b0 fb 07 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000d84e:	ee c9 00 40 	sub	r9,r7,64
8000d852:	ee c8 00 18 	sub	r8,r7,24
8000d856:	2f 08       	sub	r8,-16
8000d858:	12 9b       	mov	r11,r9
8000d85a:	10 9c       	mov	r12,r8
8000d85c:	fe b0 fa fe 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000d860:	ee c9 00 44 	sub	r9,r7,68
8000d864:	ee c8 00 18 	sub	r8,r7,24
8000d868:	2e e8       	sub	r8,-18
8000d86a:	12 9b       	mov	r11,r9
8000d86c:	10 9c       	mov	r12,r8
8000d86e:	fe b0 fa f5 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000d872:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d876:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000d87a:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d87e:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000d882:	ee ca 00 18 	sub	r10,r7,24
8000d886:	e0 68 00 ed 	mov	r8,237
8000d88a:	31 69       	mov	r9,22
8000d88c:	32 2b       	mov	r11,34
8000d88e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d892:	fe b0 fa 35 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000d896:	2e ed       	sub	sp,-72
8000d898:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d89c:	80 00       	ld.sh	r0,r0[0x0]
8000d89e:	d6 02       	popm	r12,lr

8000d8a0 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000d8a0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d8a4:	1a 97       	mov	r7,sp
8000d8a6:	21 2d       	sub	sp,72
8000d8a8:	4c 86       	lddpc	r6,8000d9c8 <mavlink_msg_rc_channels_raw_send+0x128>
8000d8aa:	1e 26       	rsub	r6,pc
8000d8ac:	ee ce ff e0 	sub	lr,r7,-32
8000d8b0:	ef 4c ff e4 	st.w	r7[-28],r12
8000d8b4:	ef 4b ff e0 	st.w	r7[-32],r11
8000d8b8:	14 90       	mov	r0,r10
8000d8ba:	12 91       	mov	r1,r9
8000d8bc:	10 92       	mov	r2,r8
8000d8be:	7c 03       	ld.w	r3,lr[0x0]
8000d8c0:	7c 15       	ld.w	r5,lr[0x4]
8000d8c2:	7c 2c       	ld.w	r12,lr[0x8]
8000d8c4:	7c 3b       	ld.w	r11,lr[0xc]
8000d8c6:	7c 4a       	ld.w	r10,lr[0x10]
8000d8c8:	7c 59       	ld.w	r9,lr[0x14]
8000d8ca:	7c 68       	ld.w	r8,lr[0x18]
8000d8cc:	00 9e       	mov	lr,r0
8000d8ce:	ef 6e ff dc 	st.b	r7[-36],lr
8000d8d2:	02 9e       	mov	lr,r1
8000d8d4:	ef 5e ff d8 	st.h	r7[-40],lr
8000d8d8:	04 9e       	mov	lr,r2
8000d8da:	ef 5e ff d4 	st.h	r7[-44],lr
8000d8de:	06 9e       	mov	lr,r3
8000d8e0:	ef 5e ff d0 	st.h	r7[-48],lr
8000d8e4:	0a 9e       	mov	lr,r5
8000d8e6:	ef 5e ff cc 	st.h	r7[-52],lr
8000d8ea:	ef 5c ff c8 	st.h	r7[-56],r12
8000d8ee:	ef 5b ff c4 	st.h	r7[-60],r11
8000d8f2:	ef 5a ff c0 	st.h	r7[-64],r10
8000d8f6:	ef 59 ff bc 	st.h	r7[-68],r9
8000d8fa:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d8fe:	ee c9 00 20 	sub	r9,r7,32
8000d902:	ee c8 00 18 	sub	r8,r7,24
8000d906:	12 9b       	mov	r11,r9
8000d908:	10 9c       	mov	r12,r8
8000d90a:	fe b0 fa c1 	rcall	8000ce8c <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000d90e:	ee c9 00 28 	sub	r9,r7,40
8000d912:	ee c8 00 18 	sub	r8,r7,24
8000d916:	2f c8       	sub	r8,-4
8000d918:	12 9b       	mov	r11,r9
8000d91a:	10 9c       	mov	r12,r8
8000d91c:	fe b0 fa 9e 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000d920:	ee c9 00 2c 	sub	r9,r7,44
8000d924:	ee c8 00 18 	sub	r8,r7,24
8000d928:	2f a8       	sub	r8,-6
8000d92a:	12 9b       	mov	r11,r9
8000d92c:	10 9c       	mov	r12,r8
8000d92e:	fe b0 fa 95 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000d932:	ee c9 00 30 	sub	r9,r7,48
8000d936:	ee c8 00 18 	sub	r8,r7,24
8000d93a:	2f 88       	sub	r8,-8
8000d93c:	12 9b       	mov	r11,r9
8000d93e:	10 9c       	mov	r12,r8
8000d940:	fe b0 fa 8c 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000d944:	ee c9 00 34 	sub	r9,r7,52
8000d948:	ee c8 00 18 	sub	r8,r7,24
8000d94c:	2f 68       	sub	r8,-10
8000d94e:	12 9b       	mov	r11,r9
8000d950:	10 9c       	mov	r12,r8
8000d952:	fe b0 fa 83 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000d956:	ee c9 00 38 	sub	r9,r7,56
8000d95a:	ee c8 00 18 	sub	r8,r7,24
8000d95e:	2f 48       	sub	r8,-12
8000d960:	12 9b       	mov	r11,r9
8000d962:	10 9c       	mov	r12,r8
8000d964:	fe b0 fa 7a 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000d968:	ee c9 00 3c 	sub	r9,r7,60
8000d96c:	ee c8 00 18 	sub	r8,r7,24
8000d970:	2f 28       	sub	r8,-14
8000d972:	12 9b       	mov	r11,r9
8000d974:	10 9c       	mov	r12,r8
8000d976:	fe b0 fa 71 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000d97a:	ee c9 00 40 	sub	r9,r7,64
8000d97e:	ee c8 00 18 	sub	r8,r7,24
8000d982:	2f 08       	sub	r8,-16
8000d984:	12 9b       	mov	r11,r9
8000d986:	10 9c       	mov	r12,r8
8000d988:	fe b0 fa 68 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000d98c:	ee c9 00 44 	sub	r9,r7,68
8000d990:	ee c8 00 18 	sub	r8,r7,24
8000d994:	2e e8       	sub	r8,-18
8000d996:	12 9b       	mov	r11,r9
8000d998:	10 9c       	mov	r12,r8
8000d99a:	fe b0 fa 5f 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000d99e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d9a2:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000d9a6:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d9aa:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000d9ae:	ee ca 00 18 	sub	r10,r7,24
8000d9b2:	e0 68 00 f4 	mov	r8,244
8000d9b6:	31 69       	mov	r9,22
8000d9b8:	32 3b       	mov	r11,35
8000d9ba:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d9be:	fe b0 f9 9f 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000d9c2:	2e ed       	sub	sp,-72
8000d9c4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d9c8:	80 00       	ld.sh	r0,r0[0x0]
8000d9ca:	d7 2e       	*unknown*

8000d9cc <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000d9cc:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d9d0:	1a 97       	mov	r7,sp
8000d9d2:	21 1d       	sub	sp,68
8000d9d4:	4c 46       	lddpc	r6,8000dae4 <mavlink_msg_servo_output_raw_send+0x118>
8000d9d6:	1e 26       	rsub	r6,pc
8000d9d8:	ee ce ff e4 	sub	lr,r7,-28
8000d9dc:	ef 4c ff e4 	st.w	r7[-28],r12
8000d9e0:	ef 4b ff e0 	st.w	r7[-32],r11
8000d9e4:	14 91       	mov	r1,r10
8000d9e6:	12 92       	mov	r2,r9
8000d9e8:	10 93       	mov	r3,r8
8000d9ea:	7c 05       	ld.w	r5,lr[0x0]
8000d9ec:	7c 1c       	ld.w	r12,lr[0x4]
8000d9ee:	7c 2b       	ld.w	r11,lr[0x8]
8000d9f0:	7c 3a       	ld.w	r10,lr[0xc]
8000d9f2:	7c 49       	ld.w	r9,lr[0x10]
8000d9f4:	7c 58       	ld.w	r8,lr[0x14]
8000d9f6:	02 9e       	mov	lr,r1
8000d9f8:	ef 6e ff dc 	st.b	r7[-36],lr
8000d9fc:	04 9e       	mov	lr,r2
8000d9fe:	ef 5e ff d8 	st.h	r7[-40],lr
8000da02:	06 9e       	mov	lr,r3
8000da04:	ef 5e ff d4 	st.h	r7[-44],lr
8000da08:	0a 9e       	mov	lr,r5
8000da0a:	ef 5e ff d0 	st.h	r7[-48],lr
8000da0e:	ef 5c ff cc 	st.h	r7[-52],r12
8000da12:	ef 5b ff c8 	st.h	r7[-56],r11
8000da16:	ef 5a ff c4 	st.h	r7[-60],r10
8000da1a:	ef 59 ff c0 	st.h	r7[-64],r9
8000da1e:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000da22:	ee c9 00 20 	sub	r9,r7,32
8000da26:	ee c8 00 18 	sub	r8,r7,24
8000da2a:	12 9b       	mov	r11,r9
8000da2c:	10 9c       	mov	r12,r8
8000da2e:	fe b0 fa 2f 	rcall	8000ce8c <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000da32:	ee c9 00 28 	sub	r9,r7,40
8000da36:	ee c8 00 18 	sub	r8,r7,24
8000da3a:	2f c8       	sub	r8,-4
8000da3c:	12 9b       	mov	r11,r9
8000da3e:	10 9c       	mov	r12,r8
8000da40:	fe b0 fa 0c 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000da44:	ee c9 00 2c 	sub	r9,r7,44
8000da48:	ee c8 00 18 	sub	r8,r7,24
8000da4c:	2f a8       	sub	r8,-6
8000da4e:	12 9b       	mov	r11,r9
8000da50:	10 9c       	mov	r12,r8
8000da52:	fe b0 fa 03 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000da56:	ee c9 00 30 	sub	r9,r7,48
8000da5a:	ee c8 00 18 	sub	r8,r7,24
8000da5e:	2f 88       	sub	r8,-8
8000da60:	12 9b       	mov	r11,r9
8000da62:	10 9c       	mov	r12,r8
8000da64:	fe b0 f9 fa 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000da68:	ee c9 00 34 	sub	r9,r7,52
8000da6c:	ee c8 00 18 	sub	r8,r7,24
8000da70:	2f 68       	sub	r8,-10
8000da72:	12 9b       	mov	r11,r9
8000da74:	10 9c       	mov	r12,r8
8000da76:	fe b0 f9 f1 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000da7a:	ee c9 00 38 	sub	r9,r7,56
8000da7e:	ee c8 00 18 	sub	r8,r7,24
8000da82:	2f 48       	sub	r8,-12
8000da84:	12 9b       	mov	r11,r9
8000da86:	10 9c       	mov	r12,r8
8000da88:	fe b0 f9 e8 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000da8c:	ee c9 00 3c 	sub	r9,r7,60
8000da90:	ee c8 00 18 	sub	r8,r7,24
8000da94:	2f 28       	sub	r8,-14
8000da96:	12 9b       	mov	r11,r9
8000da98:	10 9c       	mov	r12,r8
8000da9a:	fe b0 f9 df 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000da9e:	ee c9 00 40 	sub	r9,r7,64
8000daa2:	ee c8 00 18 	sub	r8,r7,24
8000daa6:	2f 08       	sub	r8,-16
8000daa8:	12 9b       	mov	r11,r9
8000daaa:	10 9c       	mov	r12,r8
8000daac:	fe b0 f9 d6 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000dab0:	ee c9 00 44 	sub	r9,r7,68
8000dab4:	ee c8 00 18 	sub	r8,r7,24
8000dab8:	2e e8       	sub	r8,-18
8000daba:	12 9b       	mov	r11,r9
8000dabc:	10 9c       	mov	r12,r8
8000dabe:	fe b0 f9 cd 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000dac2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000dac6:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000daca:	ee ca 00 18 	sub	r10,r7,24
8000dace:	e0 68 00 de 	mov	r8,222
8000dad2:	31 59       	mov	r9,21
8000dad4:	32 4b       	mov	r11,36
8000dad6:	ee fc ff e4 	ld.w	r12,r7[-28]
8000dada:	fe b0 f9 11 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000dade:	2e fd       	sub	sp,-68
8000dae0:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000dae4:	80 00       	ld.sh	r0,r0[0x0]
8000dae6:	d8 5a       	popm	r0-r3,r8-r9,pc,r12=0

8000dae8 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000dae8:	eb cd 40 e0 	pushm	r5-r7,lr
8000daec:	1a 97       	mov	r7,sp
8000daee:	20 ad       	sub	sp,40
8000daf0:	4a 36       	lddpc	r6,8000db7c <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000daf2:	1e 26       	rsub	r6,pc
8000daf4:	ee c5 ff f0 	sub	r5,r7,-16
8000daf8:	ef 4c ff e8 	st.w	r7[-24],r12
8000dafc:	ef 4b ff e4 	st.w	r7[-28],r11
8000db00:	ef 4a ff e0 	st.w	r7[-32],r10
8000db04:	ef 49 ff dc 	st.w	r7[-36],r9
8000db08:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000db0c:	ee c9 00 1c 	sub	r9,r7,28
8000db10:	ee c8 00 14 	sub	r8,r7,20
8000db14:	12 9b       	mov	r11,r9
8000db16:	10 9c       	mov	r12,r8
8000db18:	fe b0 f9 ba 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000db1c:	ee c9 00 20 	sub	r9,r7,32
8000db20:	ee c8 00 14 	sub	r8,r7,20
8000db24:	2f c8       	sub	r8,-4
8000db26:	12 9b       	mov	r11,r9
8000db28:	10 9c       	mov	r12,r8
8000db2a:	fe b0 f9 b1 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000db2e:	ee c9 00 24 	sub	r9,r7,36
8000db32:	ee c8 00 14 	sub	r8,r7,20
8000db36:	2f 88       	sub	r8,-8
8000db38:	12 9b       	mov	r11,r9
8000db3a:	10 9c       	mov	r12,r8
8000db3c:	fe b0 f9 a8 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000db40:	ee c9 00 28 	sub	r9,r7,40
8000db44:	ee c8 00 14 	sub	r8,r7,20
8000db48:	2f 48       	sub	r8,-12
8000db4a:	12 9b       	mov	r11,r9
8000db4c:	10 9c       	mov	r12,r8
8000db4e:	fe b0 f9 9f 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000db52:	0a 99       	mov	r9,r5
8000db54:	ee c8 00 14 	sub	r8,r7,20
8000db58:	2f 08       	sub	r8,-16
8000db5a:	12 9b       	mov	r11,r9
8000db5c:	10 9c       	mov	r12,r8
8000db5e:	fe b0 f9 97 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000db62:	ee ca 00 14 	sub	r10,r7,20
8000db66:	e0 68 00 ef 	mov	r8,239
8000db6a:	31 49       	mov	r9,20
8000db6c:	33 ab       	mov	r11,58
8000db6e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000db72:	fe b0 f8 c5 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000db76:	2f 6d       	sub	sp,-40
8000db78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000db7c:	80 00       	ld.sh	r0,r0[0x0]
8000db7e:	d9 76       	*unknown*

8000db80 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000db80:	eb cd 40 e0 	pushm	r5-r7,lr
8000db84:	1a 97       	mov	r7,sp
8000db86:	20 ad       	sub	sp,40
8000db88:	4a 36       	lddpc	r6,8000dc14 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000db8a:	1e 26       	rsub	r6,pc
8000db8c:	ee c5 ff f0 	sub	r5,r7,-16
8000db90:	ef 4c ff e8 	st.w	r7[-24],r12
8000db94:	ef 4b ff e4 	st.w	r7[-28],r11
8000db98:	ef 4a ff e0 	st.w	r7[-32],r10
8000db9c:	ef 49 ff dc 	st.w	r7[-36],r9
8000dba0:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dba4:	ee c9 00 1c 	sub	r9,r7,28
8000dba8:	ee c8 00 14 	sub	r8,r7,20
8000dbac:	12 9b       	mov	r11,r9
8000dbae:	10 9c       	mov	r12,r8
8000dbb0:	fe b0 f9 6e 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000dbb4:	ee c9 00 20 	sub	r9,r7,32
8000dbb8:	ee c8 00 14 	sub	r8,r7,20
8000dbbc:	2f c8       	sub	r8,-4
8000dbbe:	12 9b       	mov	r11,r9
8000dbc0:	10 9c       	mov	r12,r8
8000dbc2:	fe b0 f9 65 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000dbc6:	ee c9 00 24 	sub	r9,r7,36
8000dbca:	ee c8 00 14 	sub	r8,r7,20
8000dbce:	2f 88       	sub	r8,-8
8000dbd0:	12 9b       	mov	r11,r9
8000dbd2:	10 9c       	mov	r12,r8
8000dbd4:	fe b0 f9 5c 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000dbd8:	ee c9 00 28 	sub	r9,r7,40
8000dbdc:	ee c8 00 14 	sub	r8,r7,20
8000dbe0:	2f 48       	sub	r8,-12
8000dbe2:	12 9b       	mov	r11,r9
8000dbe4:	10 9c       	mov	r12,r8
8000dbe6:	fe b0 f9 53 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000dbea:	0a 99       	mov	r9,r5
8000dbec:	ee c8 00 14 	sub	r8,r7,20
8000dbf0:	2f 08       	sub	r8,-16
8000dbf2:	12 9b       	mov	r11,r9
8000dbf4:	10 9c       	mov	r12,r8
8000dbf6:	fe b0 f9 4b 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000dbfa:	ee ca 00 14 	sub	r10,r7,20
8000dbfe:	e0 68 00 ee 	mov	r8,238
8000dc02:	31 49       	mov	r9,20
8000dc04:	33 bb       	mov	r11,59
8000dc06:	ee fc ff e8 	ld.w	r12,r7[-24]
8000dc0a:	fe b0 f8 79 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000dc0e:	2f 6d       	sub	sp,-40
8000dc10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dc14:	80 00       	ld.sh	r0,r0[0x0]
8000dc16:	da 0e       	*unknown*

8000dc18 <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000dc18:	eb cd 40 e0 	pushm	r5-r7,lr
8000dc1c:	1a 97       	mov	r7,sp
8000dc1e:	20 ad       	sub	sp,40
8000dc20:	4a 76       	lddpc	r6,8000dcbc <mavlink_msg_vfr_hud_send+0xa4>
8000dc22:	1e 26       	rsub	r6,pc
8000dc24:	ee c5 ff f0 	sub	r5,r7,-16
8000dc28:	ef 4c ff e8 	st.w	r7[-24],r12
8000dc2c:	ef 4b ff e4 	st.w	r7[-28],r11
8000dc30:	ef 4a ff e0 	st.w	r7[-32],r10
8000dc34:	ef 59 ff dc 	st.h	r7[-36],r9
8000dc38:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000dc3c:	ee c9 00 1c 	sub	r9,r7,28
8000dc40:	ee c8 00 14 	sub	r8,r7,20
8000dc44:	12 9b       	mov	r11,r9
8000dc46:	10 9c       	mov	r12,r8
8000dc48:	fe b0 f9 22 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000dc4c:	ee c9 00 20 	sub	r9,r7,32
8000dc50:	ee c8 00 14 	sub	r8,r7,20
8000dc54:	2f c8       	sub	r8,-4
8000dc56:	12 9b       	mov	r11,r9
8000dc58:	10 9c       	mov	r12,r8
8000dc5a:	fe b0 f9 19 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000dc5e:	0a 99       	mov	r9,r5
8000dc60:	ee c8 00 14 	sub	r8,r7,20
8000dc64:	2f 88       	sub	r8,-8
8000dc66:	12 9b       	mov	r11,r9
8000dc68:	10 9c       	mov	r12,r8
8000dc6a:	fe b0 f9 11 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000dc6e:	ea c9 ff fc 	sub	r9,r5,-4
8000dc72:	ee c8 00 14 	sub	r8,r7,20
8000dc76:	2f 48       	sub	r8,-12
8000dc78:	12 9b       	mov	r11,r9
8000dc7a:	10 9c       	mov	r12,r8
8000dc7c:	fe b0 f9 08 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000dc80:	ee c9 00 24 	sub	r9,r7,36
8000dc84:	ee c8 00 14 	sub	r8,r7,20
8000dc88:	2f 08       	sub	r8,-16
8000dc8a:	12 9b       	mov	r11,r9
8000dc8c:	10 9c       	mov	r12,r8
8000dc8e:	fe b0 f8 e5 	rcall	8000ce58 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000dc92:	ee c9 00 28 	sub	r9,r7,40
8000dc96:	ee c8 00 14 	sub	r8,r7,20
8000dc9a:	2e e8       	sub	r8,-18
8000dc9c:	12 9b       	mov	r11,r9
8000dc9e:	10 9c       	mov	r12,r8
8000dca0:	fe b0 f8 dc 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000dca4:	ee ca 00 14 	sub	r10,r7,20
8000dca8:	31 48       	mov	r8,20
8000dcaa:	31 49       	mov	r9,20
8000dcac:	34 ab       	mov	r11,74
8000dcae:	ee fc ff e8 	ld.w	r12,r7[-24]
8000dcb2:	fe b0 f8 25 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000dcb6:	2f 6d       	sub	sp,-40
8000dcb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dcbc:	80 00       	ld.sh	r0,r0[0x0]
8000dcbe:	da a6       	*unknown*

8000dcc0 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000dcc0:	eb cd 40 e0 	pushm	r5-r7,lr
8000dcc4:	1a 97       	mov	r7,sp
8000dcc6:	20 ad       	sub	sp,40
8000dcc8:	4a 36       	lddpc	r6,8000dd54 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000dcca:	1e 26       	rsub	r6,pc
8000dccc:	ee c5 ff f0 	sub	r5,r7,-16
8000dcd0:	ef 4c ff e8 	st.w	r7[-24],r12
8000dcd4:	ef 4b ff e4 	st.w	r7[-28],r11
8000dcd8:	ef 4a ff e0 	st.w	r7[-32],r10
8000dcdc:	ef 49 ff dc 	st.w	r7[-36],r9
8000dce0:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dce4:	ee c9 00 1c 	sub	r9,r7,28
8000dce8:	ee c8 00 14 	sub	r8,r7,20
8000dcec:	12 9b       	mov	r11,r9
8000dcee:	10 9c       	mov	r12,r8
8000dcf0:	fe b0 f8 ce 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000dcf4:	ee c9 00 20 	sub	r9,r7,32
8000dcf8:	ee c8 00 14 	sub	r8,r7,20
8000dcfc:	2f c8       	sub	r8,-4
8000dcfe:	12 9b       	mov	r11,r9
8000dd00:	10 9c       	mov	r12,r8
8000dd02:	fe b0 f8 c5 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000dd06:	ee c9 00 24 	sub	r9,r7,36
8000dd0a:	ee c8 00 14 	sub	r8,r7,20
8000dd0e:	2f 88       	sub	r8,-8
8000dd10:	12 9b       	mov	r11,r9
8000dd12:	10 9c       	mov	r12,r8
8000dd14:	fe b0 f8 bc 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000dd18:	ee c9 00 28 	sub	r9,r7,40
8000dd1c:	ee c8 00 14 	sub	r8,r7,20
8000dd20:	2f 48       	sub	r8,-12
8000dd22:	12 9b       	mov	r11,r9
8000dd24:	10 9c       	mov	r12,r8
8000dd26:	fe b0 f8 b3 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000dd2a:	0a 99       	mov	r9,r5
8000dd2c:	ee c8 00 14 	sub	r8,r7,20
8000dd30:	2f 08       	sub	r8,-16
8000dd32:	12 9b       	mov	r11,r9
8000dd34:	10 9c       	mov	r12,r8
8000dd36:	fe b0 f8 ab 	rcall	8000ce8c <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000dd3a:	ee ca 00 14 	sub	r10,r7,20
8000dd3e:	37 f8       	mov	r8,127
8000dd40:	31 49       	mov	r9,20
8000dd42:	35 0b       	mov	r11,80
8000dd44:	ee fc ff e8 	ld.w	r12,r7[-24]
8000dd48:	fe b0 f7 da 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000dd4c:	2f 6d       	sub	sp,-40
8000dd4e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dd52:	00 00       	add	r0,r0
8000dd54:	80 00       	ld.sh	r0,r0[0x0]
8000dd56:	db 4e       	*unknown*

8000dd58 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000dd58:	eb cd 40 e0 	pushm	r5-r7,lr
8000dd5c:	1a 97       	mov	r7,sp
8000dd5e:	21 9d       	sub	sp,100
8000dd60:	4d d6       	lddpc	r6,8000ded4 <mavlink_msg_hil_state_send+0x17c>
8000dd62:	1e 26       	rsub	r6,pc
8000dd64:	ee c5 ff f0 	sub	r5,r7,-16
8000dd68:	ef 4c ff c4 	st.w	r7[-60],r12
8000dd6c:	ee eb ff bc 	st.d	r7[-68],r10
8000dd70:	ef 49 ff b8 	st.w	r7[-72],r9
8000dd74:	ef 48 ff b4 	st.w	r7[-76],r8
8000dd78:	6a 7e       	ld.w	lr,r5[0x1c]
8000dd7a:	6a 8c       	ld.w	r12,r5[0x20]
8000dd7c:	6a 9b       	ld.w	r11,r5[0x24]
8000dd7e:	6a aa       	ld.w	r10,r5[0x28]
8000dd80:	6a b9       	ld.w	r9,r5[0x2c]
8000dd82:	6a c8       	ld.w	r8,r5[0x30]
8000dd84:	ef 5e ff b0 	st.h	r7[-80],lr
8000dd88:	ef 5c ff ac 	st.h	r7[-84],r12
8000dd8c:	ef 5b ff a8 	st.h	r7[-88],r11
8000dd90:	ef 5a ff a4 	st.h	r7[-92],r10
8000dd94:	ef 59 ff a0 	st.h	r7[-96],r9
8000dd98:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000dd9c:	ee c9 00 44 	sub	r9,r7,68
8000dda0:	ee c8 00 38 	sub	r8,r7,56
8000dda4:	12 9b       	mov	r11,r9
8000dda6:	10 9c       	mov	r12,r8
8000dda8:	fe b0 f8 9e 	rcall	8000cee4 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000ddac:	ee c9 00 48 	sub	r9,r7,72
8000ddb0:	ee c8 00 38 	sub	r8,r7,56
8000ddb4:	2f 88       	sub	r8,-8
8000ddb6:	12 9b       	mov	r11,r9
8000ddb8:	10 9c       	mov	r12,r8
8000ddba:	fe b0 f8 69 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000ddbe:	ee c9 00 4c 	sub	r9,r7,76
8000ddc2:	ee c8 00 38 	sub	r8,r7,56
8000ddc6:	2f 48       	sub	r8,-12
8000ddc8:	12 9b       	mov	r11,r9
8000ddca:	10 9c       	mov	r12,r8
8000ddcc:	fe b0 f8 60 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000ddd0:	0a 99       	mov	r9,r5
8000ddd2:	ee c8 00 38 	sub	r8,r7,56
8000ddd6:	2f 08       	sub	r8,-16
8000ddd8:	12 9b       	mov	r11,r9
8000ddda:	10 9c       	mov	r12,r8
8000dddc:	fe b0 f8 58 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000dde0:	ea c9 ff fc 	sub	r9,r5,-4
8000dde4:	ee c8 00 38 	sub	r8,r7,56
8000dde8:	2e c8       	sub	r8,-20
8000ddea:	12 9b       	mov	r11,r9
8000ddec:	10 9c       	mov	r12,r8
8000ddee:	fe b0 f8 4f 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000ddf2:	ea c9 ff f8 	sub	r9,r5,-8
8000ddf6:	ee c8 00 38 	sub	r8,r7,56
8000ddfa:	2e 88       	sub	r8,-24
8000ddfc:	12 9b       	mov	r11,r9
8000ddfe:	10 9c       	mov	r12,r8
8000de00:	fe b0 f8 46 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000de04:	ea c9 ff f4 	sub	r9,r5,-12
8000de08:	ee c8 00 38 	sub	r8,r7,56
8000de0c:	2e 48       	sub	r8,-28
8000de0e:	12 9b       	mov	r11,r9
8000de10:	10 9c       	mov	r12,r8
8000de12:	fe b0 f8 3d 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000de16:	ea c9 ff f0 	sub	r9,r5,-16
8000de1a:	ee c8 00 38 	sub	r8,r7,56
8000de1e:	2e 08       	sub	r8,-32
8000de20:	12 9b       	mov	r11,r9
8000de22:	10 9c       	mov	r12,r8
8000de24:	fe b0 f8 34 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000de28:	ea c9 ff ec 	sub	r9,r5,-20
8000de2c:	ee c8 00 38 	sub	r8,r7,56
8000de30:	2d c8       	sub	r8,-36
8000de32:	12 9b       	mov	r11,r9
8000de34:	10 9c       	mov	r12,r8
8000de36:	fe b0 f8 2b 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000de3a:	ea c9 ff e8 	sub	r9,r5,-24
8000de3e:	ee c8 00 38 	sub	r8,r7,56
8000de42:	2d 88       	sub	r8,-40
8000de44:	12 9b       	mov	r11,r9
8000de46:	10 9c       	mov	r12,r8
8000de48:	fe b0 f8 22 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000de4c:	ee c9 00 50 	sub	r9,r7,80
8000de50:	ee c8 00 38 	sub	r8,r7,56
8000de54:	2d 48       	sub	r8,-44
8000de56:	12 9b       	mov	r11,r9
8000de58:	10 9c       	mov	r12,r8
8000de5a:	fe b0 f7 ff 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000de5e:	ee c9 00 54 	sub	r9,r7,84
8000de62:	ee c8 00 38 	sub	r8,r7,56
8000de66:	2d 28       	sub	r8,-46
8000de68:	12 9b       	mov	r11,r9
8000de6a:	10 9c       	mov	r12,r8
8000de6c:	fe b0 f7 f6 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000de70:	ee c9 00 58 	sub	r9,r7,88
8000de74:	ee c8 00 38 	sub	r8,r7,56
8000de78:	2d 08       	sub	r8,-48
8000de7a:	12 9b       	mov	r11,r9
8000de7c:	10 9c       	mov	r12,r8
8000de7e:	fe b0 f7 ed 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000de82:	ee c9 00 5c 	sub	r9,r7,92
8000de86:	ee c8 00 38 	sub	r8,r7,56
8000de8a:	2c e8       	sub	r8,-50
8000de8c:	12 9b       	mov	r11,r9
8000de8e:	10 9c       	mov	r12,r8
8000de90:	fe b0 f7 e4 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000de94:	ee c9 00 60 	sub	r9,r7,96
8000de98:	ee c8 00 38 	sub	r8,r7,56
8000de9c:	2c c8       	sub	r8,-52
8000de9e:	12 9b       	mov	r11,r9
8000dea0:	10 9c       	mov	r12,r8
8000dea2:	fe b0 f7 db 	rcall	8000ce58 <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000dea6:	ee c9 00 64 	sub	r9,r7,100
8000deaa:	ee c8 00 38 	sub	r8,r7,56
8000deae:	2c a8       	sub	r8,-54
8000deb0:	12 9b       	mov	r11,r9
8000deb2:	10 9c       	mov	r12,r8
8000deb4:	fe b0 f7 d2 	rcall	8000ce58 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000deb8:	ee ca 00 38 	sub	r10,r7,56
8000debc:	e0 68 00 b7 	mov	r8,183
8000dec0:	33 89       	mov	r9,56
8000dec2:	35 ab       	mov	r11,90
8000dec4:	ee fc ff c4 	ld.w	r12,r7[-60]
8000dec8:	fe b0 f7 1a 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000decc:	2e 7d       	sub	sp,-100
8000dece:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000ded2:	00 00       	add	r0,r0
8000ded4:	80 00       	ld.sh	r0,r0[0x0]
8000ded6:	db e6       	*unknown*

8000ded8 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000ded8:	eb cd 40 c0 	pushm	r6-r7,lr
8000dedc:	1a 97       	mov	r7,sp
8000dede:	20 9d       	sub	sp,36
8000dee0:	49 96       	lddpc	r6,8000df44 <mavlink_msg_named_value_float_send+0x6c>
8000dee2:	1e 26       	rsub	r6,pc
8000dee4:	ef 4c ff e8 	st.w	r7[-24],r12
8000dee8:	ef 4b ff e4 	st.w	r7[-28],r11
8000deec:	ef 4a ff e0 	st.w	r7[-32],r10
8000def0:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000def4:	ee c9 00 1c 	sub	r9,r7,28
8000def8:	ee c8 00 14 	sub	r8,r7,20
8000defc:	12 9b       	mov	r11,r9
8000defe:	10 9c       	mov	r12,r8
8000df00:	fe b0 f7 c6 	rcall	8000ce8c <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000df04:	ee c9 00 24 	sub	r9,r7,36
8000df08:	ee c8 00 14 	sub	r8,r7,20
8000df0c:	2f c8       	sub	r8,-4
8000df0e:	12 9b       	mov	r11,r9
8000df10:	10 9c       	mov	r12,r8
8000df12:	fe b0 f7 bd 	rcall	8000ce8c <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000df16:	ee c8 00 14 	sub	r8,r7,20
8000df1a:	30 a9       	mov	r9,10
8000df1c:	ee fa ff e0 	ld.w	r10,r7[-32]
8000df20:	30 8b       	mov	r11,8
8000df22:	10 9c       	mov	r12,r8
8000df24:	fe b0 f8 56 	rcall	8000cfd0 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000df28:	ee ca 00 14 	sub	r10,r7,20
8000df2c:	e0 68 00 aa 	mov	r8,170
8000df30:	31 29       	mov	r9,18
8000df32:	e0 6b 00 fb 	mov	r11,251
8000df36:	ee fc ff e8 	ld.w	r12,r7[-24]
8000df3a:	fe b0 f6 e1 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000df3e:	2f 7d       	sub	sp,-36
8000df40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000df44:	80 00       	ld.sh	r0,r0[0x0]
8000df46:	dd 66       	*unknown*

8000df48 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000df48:	eb cd 40 c0 	pushm	r6-r7,lr
8000df4c:	1a 97       	mov	r7,sp
8000df4e:	20 9d       	sub	sp,36
8000df50:	49 96       	lddpc	r6,8000dfb4 <mavlink_msg_named_value_int_send+0x6c>
8000df52:	1e 26       	rsub	r6,pc
8000df54:	ef 4c ff e8 	st.w	r7[-24],r12
8000df58:	ef 4b ff e4 	st.w	r7[-28],r11
8000df5c:	ef 4a ff e0 	st.w	r7[-32],r10
8000df60:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000df64:	ee c9 00 1c 	sub	r9,r7,28
8000df68:	ee c8 00 14 	sub	r8,r7,20
8000df6c:	12 9b       	mov	r11,r9
8000df6e:	10 9c       	mov	r12,r8
8000df70:	fe b0 f7 8e 	rcall	8000ce8c <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000df74:	ee c9 00 24 	sub	r9,r7,36
8000df78:	ee c8 00 14 	sub	r8,r7,20
8000df7c:	2f c8       	sub	r8,-4
8000df7e:	12 9b       	mov	r11,r9
8000df80:	10 9c       	mov	r12,r8
8000df82:	fe b0 f7 85 	rcall	8000ce8c <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000df86:	ee c8 00 14 	sub	r8,r7,20
8000df8a:	30 a9       	mov	r9,10
8000df8c:	ee fa ff e0 	ld.w	r10,r7[-32]
8000df90:	30 8b       	mov	r11,8
8000df92:	10 9c       	mov	r12,r8
8000df94:	fe b0 f8 1e 	rcall	8000cfd0 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000df98:	ee ca 00 14 	sub	r10,r7,20
8000df9c:	32 c8       	mov	r8,44
8000df9e:	31 29       	mov	r9,18
8000dfa0:	e0 6b 00 fc 	mov	r11,252
8000dfa4:	ee fc ff e8 	ld.w	r12,r7[-24]
8000dfa8:	fe b0 f6 aa 	rcall	8000ccfc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000dfac:	2f 7d       	sub	sp,-36
8000dfae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000dfb2:	00 00       	add	r0,r0
8000dfb4:	80 00       	ld.sh	r0,r0[0x0]
8000dfb6:	dd d6       	*unknown*

8000dfb8 <mavlink_send_heartbeat>:
#include "analog_monitor.h"
#include "tasks.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000dfb8:	eb cd 40 c0 	pushm	r6-r7,lr
8000dfbc:	1a 97       	mov	r7,sp
8000dfbe:	20 1d       	sub	sp,4
8000dfc0:	48 e6       	lddpc	r6,8000dff8 <mavlink_send_heartbeat+0x40>
8000dfc2:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000dfc4:	f0 16 00 32 	mcall	r6[200]
8000dfc8:	18 98       	mov	r8,r12
8000dfca:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000dfce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfd2:	f1 38 10 bd 	ld.ub	r8,r8[4285]
8000dfd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000dfda:	f3 39 10 bc 	ld.ub	r9,r9[4284]
8000dfde:	1a d8       	st.w	--sp,r8
8000dfe0:	30 08       	mov	r8,0
8000dfe2:	30 0a       	mov	r10,0
8000dfe4:	30 2b       	mov	r11,2
8000dfe6:	30 0c       	mov	r12,0
8000dfe8:	fe b0 f8 16 	rcall	8000d014 <mavlink_msg_heartbeat_send>
8000dfec:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000dfee:	f0 16 01 f2 	mcall	r6[1992]
	
	//dbg_print("Send hearbeat.\n");
}
8000dff2:	2f fd       	sub	sp,-4
8000dff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000dff8:	80 00       	ld.sh	r0,r0[0x0]
8000dffa:	de 46       	*unknown*

8000dffc <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000dffc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e000:	1a 97       	mov	r7,sp
8000e002:	20 6d       	sub	sp,24
8000e004:	4b e6       	lddpc	r6,8000e0fc <mavlink_send_raw_imu+0x100>
8000e006:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000e008:	ec f8 00 00 	ld.w	r8,r6[0]
8000e00c:	70 08       	ld.w	r8,r8[0x0]
8000e00e:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e012:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e016:	5c 88       	casts.h	r8
8000e018:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000e01c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e020:	70 08       	ld.w	r8,r8[0x0]
8000e022:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e026:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e02a:	5c 88       	casts.h	r8
8000e02c:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000e030:	ec f8 00 00 	ld.w	r8,r6[0]
8000e034:	70 08       	ld.w	r8,r8[0x0]
8000e036:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e03a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e03e:	5c 88       	casts.h	r8
8000e040:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000e044:	ec f8 00 00 	ld.w	r8,r6[0]
8000e048:	70 08       	ld.w	r8,r8[0x0]
8000e04a:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e04e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e052:	5c 88       	casts.h	r8
8000e054:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000e058:	ec f8 00 00 	ld.w	r8,r6[0]
8000e05c:	70 08       	ld.w	r8,r8[0x0]
8000e05e:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e062:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e066:	5c 88       	casts.h	r8
8000e068:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000e06c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e070:	70 08       	ld.w	r8,r8[0x0]
8000e072:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e076:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e07a:	5c 88       	casts.h	r8
8000e07c:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000e080:	ec f8 00 00 	ld.w	r8,r6[0]
8000e084:	70 08       	ld.w	r8,r8[0x0]
8000e086:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e08a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e08e:	5c 88       	casts.h	r8
8000e090:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000e092:	ec f8 00 00 	ld.w	r8,r6[0]
8000e096:	70 08       	ld.w	r8,r8[0x0]
8000e098:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e09c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e0a0:	5c 88       	casts.h	r8
8000e0a2:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000e0a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e0a8:	70 08       	ld.w	r8,r8[0x0]
8000e0aa:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e0ae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e0b2:	5c 88       	casts.h	r8
8000e0b4:	10 95       	mov	r5,r8
8000e0b6:	f0 16 00 29 	mcall	r6[164]
8000e0ba:	18 98       	mov	r8,r12
8000e0bc:	10 92       	mov	r2,r8
8000e0be:	30 03       	mov	r3,0
8000e0c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e0c4:	1a d8       	st.w	--sp,r8
8000e0c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e0ca:	1a d8       	st.w	--sp,r8
8000e0cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e0d0:	1a d8       	st.w	--sp,r8
8000e0d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e0d6:	1a d8       	st.w	--sp,r8
8000e0d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e0dc:	1a d8       	st.w	--sp,r8
8000e0de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e0e2:	1a d8       	st.w	--sp,r8
8000e0e4:	1a d0       	st.w	--sp,r0
8000e0e6:	02 98       	mov	r8,r1
8000e0e8:	0a 99       	mov	r9,r5
8000e0ea:	04 9a       	mov	r10,r2
8000e0ec:	06 9b       	mov	r11,r3
8000e0ee:	30 0c       	mov	r12,0
8000e0f0:	fe b0 f8 cc 	rcall	8000d288 <mavlink_msg_raw_imu_send>
8000e0f4:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000e0f6:	2f ad       	sub	sp,-24
8000e0f8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e0fc:	80 00       	ld.sh	r0,r0[0x0]
8000e0fe:	de 8a       	popm	r10,pc,r12=-1

8000e100 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000e100:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e104:	1a 97       	mov	r7,sp
8000e106:	20 4d       	sub	sp,16
8000e108:	4c 96       	lddpc	r6,8000e22c <mavlink_send_scaled_imu+0x12c>
8000e10a:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000e10c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e110:	70 08       	ld.w	r8,r8[0x0]
8000e112:	70 b9       	ld.w	r9,r8[0x2c]
8000e114:	fc 18 44 7a 	movh	r8,0x447a
8000e118:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e11c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e120:	5c 88       	casts.h	r8
8000e122:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000e126:	ec f8 00 00 	ld.w	r8,r6[0]
8000e12a:	70 08       	ld.w	r8,r8[0x0]
8000e12c:	70 a9       	ld.w	r9,r8[0x28]
8000e12e:	fc 18 44 7a 	movh	r8,0x447a
8000e132:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e136:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e13a:	5c 88       	casts.h	r8
8000e13c:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000e140:	ec f8 00 00 	ld.w	r8,r6[0]
8000e144:	70 08       	ld.w	r8,r8[0x0]
8000e146:	70 99       	ld.w	r9,r8[0x24]
8000e148:	fc 18 44 7a 	movh	r8,0x447a
8000e14c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e150:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e154:	5c 88       	casts.h	r8
8000e156:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000e15a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e15e:	70 08       	ld.w	r8,r8[0x0]
8000e160:	f0 f9 00 80 	ld.w	r9,r8[128]
8000e164:	fc 18 44 7a 	movh	r8,0x447a
8000e168:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e16c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e170:	5c 88       	casts.h	r8
8000e172:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000e176:	ec f8 00 00 	ld.w	r8,r6[0]
8000e17a:	70 08       	ld.w	r8,r8[0x0]
8000e17c:	71 f9       	ld.w	r9,r8[0x7c]
8000e17e:	fc 18 44 7a 	movh	r8,0x447a
8000e182:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e186:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e18a:	5c 88       	casts.h	r8
8000e18c:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000e18e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e192:	70 08       	ld.w	r8,r8[0x0]
8000e194:	71 e9       	ld.w	r9,r8[0x78]
8000e196:	fc 18 44 7a 	movh	r8,0x447a
8000e19a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e19e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e1a2:	5c 88       	casts.h	r8
8000e1a4:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000e1a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e1aa:	70 08       	ld.w	r8,r8[0x0]
8000e1ac:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000e1b0:	fc 18 44 7a 	movh	r8,0x447a
8000e1b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e1b8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e1bc:	5c 88       	casts.h	r8
8000e1be:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000e1c0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e1c4:	70 08       	ld.w	r8,r8[0x0]
8000e1c6:	f0 f9 00 88 	ld.w	r9,r8[136]
8000e1ca:	fc 18 44 7a 	movh	r8,0x447a
8000e1ce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e1d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e1d6:	5c 88       	casts.h	r8
8000e1d8:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000e1da:	ec f8 00 00 	ld.w	r8,r6[0]
8000e1de:	70 08       	ld.w	r8,r8[0x0]
8000e1e0:	f0 f9 00 84 	ld.w	r9,r8[132]
8000e1e4:	fc 18 44 7a 	movh	r8,0x447a
8000e1e8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e1ec:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e1f0:	5c 88       	casts.h	r8
8000e1f2:	10 95       	mov	r5,r8
8000e1f4:	f0 16 00 0f 	mcall	r6[60]
8000e1f8:	18 9b       	mov	r11,r12
8000e1fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e1fe:	1a d8       	st.w	--sp,r8
8000e200:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e204:	1a d8       	st.w	--sp,r8
8000e206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e20a:	1a d8       	st.w	--sp,r8
8000e20c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e210:	1a d8       	st.w	--sp,r8
8000e212:	1a d0       	st.w	--sp,r0
8000e214:	1a d1       	st.w	--sp,r1
8000e216:	04 98       	mov	r8,r2
8000e218:	06 99       	mov	r9,r3
8000e21a:	0a 9a       	mov	r10,r5
8000e21c:	30 0c       	mov	r12,0
8000e21e:	fe b0 f7 ab 	rcall	8000d174 <mavlink_msg_scaled_imu_send>
8000e222:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000e224:	2f cd       	sub	sp,-16
8000e226:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e22a:	00 00       	add	r0,r0
8000e22c:	80 00       	ld.sh	r0,r0[0x0]
8000e22e:	df 8e       	*unknown*

8000e230 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000e230:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e234:	1a 97       	mov	r7,sp
8000e236:	20 1d       	sub	sp,4
8000e238:	49 16       	lddpc	r6,8000e27c <mavlink_send_rpy_rates_error+0x4c>
8000e23a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e23c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e240:	70 08       	ld.w	r8,r8[0x0]
8000e242:	f0 c8 fe 60 	sub	r8,r8,-416
8000e246:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000e24a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e24e:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000e252:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e256:	71 e3       	ld.w	r3,r8[0x78]
8000e258:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e25c:	70 d5       	ld.w	r5,r8[0x34]
8000e25e:	f0 16 00 0f 	mcall	r6[60]
8000e262:	18 9b       	mov	r11,r12
8000e264:	30 08       	mov	r8,0
8000e266:	1a d8       	st.w	--sp,r8
8000e268:	04 98       	mov	r8,r2
8000e26a:	06 99       	mov	r9,r3
8000e26c:	0a 9a       	mov	r10,r5
8000e26e:	30 0c       	mov	r12,0
8000e270:	fe b0 fd 28 	rcall	8000dcc0 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000e274:	2f fd       	sub	sp,-4
}
8000e276:	2f fd       	sub	sp,-4
8000e278:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e27c:	80 00       	ld.sh	r0,r0[0x0]
8000e27e:	e0 be       	*unknown*

8000e280 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000e280:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e284:	1a 97       	mov	r7,sp
8000e286:	20 1d       	sub	sp,4
8000e288:	49 16       	lddpc	r6,8000e2cc <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8000e28a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e28c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e290:	70 08       	ld.w	r8,r8[0x0]
8000e292:	f0 c8 fe 60 	sub	r8,r8,-416
8000e296:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000e29a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e29e:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000e2a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2a6:	71 d3       	ld.w	r3,r8[0x74]
8000e2a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e2ac:	70 c5       	ld.w	r5,r8[0x30]
8000e2ae:	f0 16 00 0f 	mcall	r6[60]
8000e2b2:	18 9b       	mov	r11,r12
8000e2b4:	30 08       	mov	r8,0
8000e2b6:	1a d8       	st.w	--sp,r8
8000e2b8:	04 98       	mov	r8,r2
8000e2ba:	06 99       	mov	r9,r3
8000e2bc:	0a 9a       	mov	r10,r5
8000e2be:	30 0c       	mov	r12,0
8000e2c0:	fe b0 fc 60 	rcall	8000db80 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000e2c4:	2f fd       	sub	sp,-4
}
8000e2c6:	2f fd       	sub	sp,-4
8000e2c8:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e2cc:	80 00       	ld.sh	r0,r0[0x0]
8000e2ce:	e1 0e eb cd 	ld.sh	lr,r0[-5171]

8000e2d0 <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000e2d0:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e2d4:	1a 97       	mov	r7,sp
8000e2d6:	49 26       	lddpc	r6,8000e31c <mavlink_send_rpy_thrust_setpoint+0x4c>
8000e2d8:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000e2da:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2de:	70 08       	ld.w	r8,r8[0x0]
8000e2e0:	f0 f1 01 54 	ld.w	r1,r8[340]
8000e2e4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2e8:	70 08       	ld.w	r8,r8[0x0]
8000e2ea:	f0 f2 01 50 	ld.w	r2,r8[336]
8000e2ee:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2f2:	70 08       	ld.w	r8,r8[0x0]
8000e2f4:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000e2f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2fc:	70 08       	ld.w	r8,r8[0x0]
8000e2fe:	f0 f5 01 48 	ld.w	r5,r8[328]
8000e302:	f0 16 00 0f 	mcall	r6[60]
8000e306:	18 9b       	mov	r11,r12
8000e308:	1a d1       	st.w	--sp,r1
8000e30a:	04 98       	mov	r8,r2
8000e30c:	06 99       	mov	r9,r3
8000e30e:	0a 9a       	mov	r10,r5
8000e310:	30 0c       	mov	r12,0
8000e312:	fe b0 fb eb 	rcall	8000dae8 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000e316:	2f fd       	sub	sp,-4
}
8000e318:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000e31c:	80 00       	ld.sh	r0,r0[0x0]
8000e31e:	e1 5c eb cd 	st.h	r0[-5171],r12

8000e320 <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000e320:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e324:	1a 97       	mov	r7,sp
8000e326:	20 4d       	sub	sp,16
8000e328:	4c b6       	lddpc	r6,8000e454 <mavlink_send_servo_output+0x134>
8000e32a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e32c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e330:	70 08       	ld.w	r8,r8[0x0]
8000e332:	f0 c8 fe 60 	sub	r8,r8,-416
8000e336:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000e33a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e33e:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000e342:	fc 18 44 7a 	movh	r8,0x447a
8000e346:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000e34a:	fc 18 44 7a 	movh	r8,0x447a
8000e34e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e352:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e356:	5c 88       	casts.h	r8
8000e358:	5c 78       	castu.h	r8
8000e35a:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000e35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e362:	f0 f9 01 18 	ld.w	r9,r8[280]
8000e366:	fc 18 44 7a 	movh	r8,0x447a
8000e36a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000e36e:	fc 18 44 7a 	movh	r8,0x447a
8000e372:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e376:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e37a:	5c 88       	casts.h	r8
8000e37c:	5c 78       	castu.h	r8
8000e37e:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000e382:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e386:	f0 f9 01 14 	ld.w	r9,r8[276]
8000e38a:	fc 18 44 7a 	movh	r8,0x447a
8000e38e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000e392:	fc 18 44 7a 	movh	r8,0x447a
8000e396:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e39a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e39e:	5c 88       	casts.h	r8
8000e3a0:	5c 78       	castu.h	r8
8000e3a2:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000e3a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e3aa:	f0 f9 01 10 	ld.w	r9,r8[272]
8000e3ae:	fc 18 44 7a 	movh	r8,0x447a
8000e3b2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000e3b6:	fc 18 44 7a 	movh	r8,0x447a
8000e3ba:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e3be:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e3c2:	5c 88       	casts.h	r8
8000e3c4:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000e3c8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e3cc:	70 08       	ld.w	r8,r8[0x0]
8000e3ce:	f0 f8 07 1c 	ld.w	r8,r8[1820]
8000e3d2:	5c 88       	casts.h	r8
8000e3d4:	f0 c8 fa 24 	sub	r8,r8,-1500
8000e3d8:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e3da:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000e3de:	ec f8 00 00 	ld.w	r8,r6[0]
8000e3e2:	70 08       	ld.w	r8,r8[0x0]
8000e3e4:	f0 f8 07 0c 	ld.w	r8,r8[1804]
8000e3e8:	5c 88       	casts.h	r8
8000e3ea:	f0 c8 fa 24 	sub	r8,r8,-1500
8000e3ee:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e3f0:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000e3f4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e3f8:	70 08       	ld.w	r8,r8[0x0]
8000e3fa:	f0 f8 06 fc 	ld.w	r8,r8[1788]
8000e3fe:	5c 88       	casts.h	r8
8000e400:	f0 c8 fa 24 	sub	r8,r8,-1500
8000e404:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e406:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000e40a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e40e:	70 08       	ld.w	r8,r8[0x0]
8000e410:	f0 f8 06 ec 	ld.w	r8,r8[1772]
8000e414:	5c 88       	casts.h	r8
8000e416:	f0 c8 fa 24 	sub	r8,r8,-1500
8000e41a:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000e41c:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e420:	f0 16 00 29 	mcall	r6[164]
8000e424:	18 9b       	mov	r11,r12
8000e426:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e42a:	1a d8       	st.w	--sp,r8
8000e42c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e430:	1a d8       	st.w	--sp,r8
8000e432:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e436:	1a d8       	st.w	--sp,r8
8000e438:	1a d0       	st.w	--sp,r0
8000e43a:	1a d1       	st.w	--sp,r1
8000e43c:	1a d2       	st.w	--sp,r2
8000e43e:	06 98       	mov	r8,r3
8000e440:	0a 99       	mov	r9,r5
8000e442:	30 0a       	mov	r10,0
8000e444:	30 0c       	mov	r12,0
8000e446:	fe b0 fa c3 	rcall	8000d9cc <mavlink_msg_servo_output_raw_send>
8000e44a:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000e44c:	2f cd       	sub	sp,-16
8000e44e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e452:	00 00       	add	r0,r0
8000e454:	80 00       	ld.sh	r0,r0[0x0]
8000e456:	e1 ae eb cd 	cop	cp7,cr11,cr12,cr13,0x1c

8000e458 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000e458:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e45c:	1a 97       	mov	r7,sp
8000e45e:	20 2d       	sub	sp,8
8000e460:	49 c6       	lddpc	r6,8000e4d0 <mavlink_send_attitude_quaternion+0x78>
8000e462:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000e464:	ec f8 00 00 	ld.w	r8,r6[0]
8000e468:	70 08       	ld.w	r8,r8[0x0]
8000e46a:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e46e:	ef 48 ff f8 	st.w	r7[-8],r8
8000e472:	ec f8 00 00 	ld.w	r8,r6[0]
8000e476:	70 08       	ld.w	r8,r8[0x0]
8000e478:	71 f8       	ld.w	r8,r8[0x7c]
8000e47a:	ef 48 ff fc 	st.w	r7[-4],r8
8000e47e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e482:	70 08       	ld.w	r8,r8[0x0]
8000e484:	71 e0       	ld.w	r0,r8[0x78]
8000e486:	ec f8 00 00 	ld.w	r8,r6[0]
8000e48a:	70 08       	ld.w	r8,r8[0x0]
8000e48c:	70 31       	ld.w	r1,r8[0xc]
8000e48e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e492:	70 08       	ld.w	r8,r8[0x0]
8000e494:	70 22       	ld.w	r2,r8[0x8]
8000e496:	ec f8 00 00 	ld.w	r8,r6[0]
8000e49a:	70 08       	ld.w	r8,r8[0x0]
8000e49c:	70 13       	ld.w	r3,r8[0x4]
8000e49e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e4a2:	70 08       	ld.w	r8,r8[0x0]
8000e4a4:	70 05       	ld.w	r5,r8[0x0]
8000e4a6:	f0 16 00 0f 	mcall	r6[60]
8000e4aa:	18 9b       	mov	r11,r12
8000e4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4b0:	1a d8       	st.w	--sp,r8
8000e4b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e4b6:	1a d8       	st.w	--sp,r8
8000e4b8:	1a d0       	st.w	--sp,r0
8000e4ba:	1a d1       	st.w	--sp,r1
8000e4bc:	04 98       	mov	r8,r2
8000e4be:	06 99       	mov	r9,r3
8000e4c0:	0a 9a       	mov	r10,r5
8000e4c2:	30 0c       	mov	r12,0
8000e4c4:	fe b0 f8 16 	rcall	8000d4f0 <mavlink_msg_attitude_quaternion_send>
8000e4c8:	2f cd       	sub	sp,-16
}
8000e4ca:	2f ed       	sub	sp,-8
8000e4cc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e4d0:	80 00       	ld.sh	r0,r0[0x0]
8000e4d2:	e2 e6 eb cd 	ld.d	r6,r1[-5171]

8000e4d4 <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000e4d4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e4d8:	1a 97       	mov	r7,sp
8000e4da:	20 4d       	sub	sp,16
8000e4dc:	49 f6       	lddpc	r6,8000e558 <mavlink_send_attitude+0x84>
8000e4de:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000e4e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e4e4:	70 09       	ld.w	r9,r8[0x0]
8000e4e6:	ee ca 00 0c 	sub	r10,r7,12
8000e4ea:	20 4d       	sub	sp,16
8000e4ec:	1a 98       	mov	r8,sp
8000e4ee:	20 08       	sub	r8,0
8000e4f0:	20 09       	sub	r9,0
8000e4f2:	72 0b       	ld.w	r11,r9[0x0]
8000e4f4:	91 0b       	st.w	r8[0x0],r11
8000e4f6:	72 1b       	ld.w	r11,r9[0x4]
8000e4f8:	91 1b       	st.w	r8[0x4],r11
8000e4fa:	72 2b       	ld.w	r11,r9[0x8]
8000e4fc:	91 2b       	st.w	r8[0x8],r11
8000e4fe:	72 39       	ld.w	r9,r9[0xc]
8000e500:	91 39       	st.w	r8[0xc],r9
8000e502:	14 9c       	mov	r12,r10
8000e504:	f0 16 00 6d 	mcall	r6[436]
8000e508:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000e50a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e50e:	70 08       	ld.w	r8,r8[0x0]
8000e510:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e514:	ef 48 ff f0 	st.w	r7[-16],r8
8000e518:	ec f8 00 00 	ld.w	r8,r6[0]
8000e51c:	70 08       	ld.w	r8,r8[0x0]
8000e51e:	71 f0       	ld.w	r0,r8[0x7c]
8000e520:	ec f8 00 00 	ld.w	r8,r6[0]
8000e524:	70 08       	ld.w	r8,r8[0x0]
8000e526:	71 e1       	ld.w	r1,r8[0x78]
8000e528:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000e52c:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000e530:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000e534:	f0 16 00 0f 	mcall	r6[60]
8000e538:	18 9b       	mov	r11,r12
8000e53a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e53e:	1a d8       	st.w	--sp,r8
8000e540:	1a d0       	st.w	--sp,r0
8000e542:	1a d1       	st.w	--sp,r1
8000e544:	04 98       	mov	r8,r2
8000e546:	06 99       	mov	r9,r3
8000e548:	0a 9a       	mov	r10,r5
8000e54a:	30 0c       	mov	r12,0
8000e54c:	fe b0 f7 74 	rcall	8000d434 <mavlink_msg_attitude_send>
8000e550:	2f dd       	sub	sp,-12
}
8000e552:	2f cd       	sub	sp,-16
8000e554:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e558:	80 00       	ld.sh	r0,r0[0x0]
8000e55a:	e3 62 eb cd 	st.b	r1[-5171],r2

8000e55c <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000e55c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e560:	1a 97       	mov	r7,sp
8000e562:	20 9d       	sub	sp,36
8000e564:	4e 66       	lddpc	r6,8000e6fc <mavlink_send_global_position+0x1a0>
8000e566:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000e568:	ec f8 00 00 	ld.w	r8,r6[0]
8000e56c:	70 08       	ld.w	r8,r8[0x0]
8000e56e:	ee cc 00 1c 	sub	r12,r7,28
8000e572:	20 cd       	sub	sp,48
8000e574:	1a 99       	mov	r9,sp
8000e576:	12 9b       	mov	r11,r9
8000e578:	f0 ca f2 64 	sub	r10,r8,-3484
8000e57c:	f6 c8 00 00 	sub	r8,r11,0
8000e580:	f4 c9 00 00 	sub	r9,r10,0
8000e584:	72 0e       	ld.w	lr,r9[0x0]
8000e586:	91 0e       	st.w	r8[0x0],lr
8000e588:	72 1e       	ld.w	lr,r9[0x4]
8000e58a:	91 1e       	st.w	r8[0x4],lr
8000e58c:	72 2e       	ld.w	lr,r9[0x8]
8000e58e:	91 2e       	st.w	r8[0x8],lr
8000e590:	72 39       	ld.w	r9,r9[0xc]
8000e592:	91 39       	st.w	r8[0xc],r9
8000e594:	f6 c8 ff f0 	sub	r8,r11,-16
8000e598:	f4 c9 ff f0 	sub	r9,r10,-16
8000e59c:	72 0e       	ld.w	lr,r9[0x0]
8000e59e:	91 0e       	st.w	r8[0x0],lr
8000e5a0:	72 1e       	ld.w	lr,r9[0x4]
8000e5a2:	91 1e       	st.w	r8[0x4],lr
8000e5a4:	72 2e       	ld.w	lr,r9[0x8]
8000e5a6:	91 2e       	st.w	r8[0x8],lr
8000e5a8:	72 39       	ld.w	r9,r9[0xc]
8000e5aa:	91 39       	st.w	r8[0xc],r9
8000e5ac:	f6 c8 ff e0 	sub	r8,r11,-32
8000e5b0:	f4 c9 ff e0 	sub	r9,r10,-32
8000e5b4:	72 0a       	ld.w	r10,r9[0x0]
8000e5b6:	91 0a       	st.w	r8[0x0],r10
8000e5b8:	72 1a       	ld.w	r10,r9[0x4]
8000e5ba:	91 1a       	st.w	r8[0x4],r10
8000e5bc:	72 2a       	ld.w	r10,r9[0x8]
8000e5be:	91 2a       	st.w	r8[0x8],r10
8000e5c0:	72 39       	ld.w	r9,r9[0xc]
8000e5c2:	91 39       	st.w	r8[0xc],r9
8000e5c4:	f0 16 00 88 	mcall	r6[544]
8000e5c8:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000e5ca:	ec f8 00 00 	ld.w	r8,r6[0]
8000e5ce:	70 08       	ld.w	r8,r8[0x0]
8000e5d0:	f0 f8 00 80 	ld.w	r8,r8[128]
8000e5d4:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e5d8:	5c 88       	casts.h	r8
8000e5da:	5c 78       	castu.h	r8
8000e5dc:	ef 48 ff dc 	st.w	r7[-36],r8
8000e5e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e5e4:	70 08       	ld.w	r8,r8[0x0]
8000e5e6:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000e5ea:	10 9c       	mov	r12,r8
8000e5ec:	f0 16 00 02 	mcall	r6[8]
8000e5f0:	30 08       	mov	r8,0
8000e5f2:	fc 19 40 59 	movh	r9,0x4059
8000e5f6:	f0 16 00 03 	mcall	r6[12]
8000e5fa:	14 98       	mov	r8,r10
8000e5fc:	16 99       	mov	r9,r11
8000e5fe:	10 9a       	mov	r10,r8
8000e600:	12 9b       	mov	r11,r9
8000e602:	f0 16 00 14 	mcall	r6[80]
8000e606:	18 98       	mov	r8,r12
8000e608:	5c 88       	casts.h	r8
8000e60a:	ef 48 ff e0 	st.w	r7[-32],r8
8000e60e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e612:	70 08       	ld.w	r8,r8[0x0]
8000e614:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000e618:	10 9c       	mov	r12,r8
8000e61a:	f0 16 00 02 	mcall	r6[8]
8000e61e:	30 08       	mov	r8,0
8000e620:	fc 19 40 59 	movh	r9,0x4059
8000e624:	f0 16 00 03 	mcall	r6[12]
8000e628:	14 98       	mov	r8,r10
8000e62a:	16 99       	mov	r9,r11
8000e62c:	10 9a       	mov	r10,r8
8000e62e:	12 9b       	mov	r11,r9
8000e630:	f0 16 00 14 	mcall	r6[80]
8000e634:	18 98       	mov	r8,r12
8000e636:	5c 88       	casts.h	r8
8000e638:	10 90       	mov	r0,r8
8000e63a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e63e:	70 08       	ld.w	r8,r8[0x0]
8000e640:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000e644:	10 9c       	mov	r12,r8
8000e646:	f0 16 00 02 	mcall	r6[8]
8000e64a:	30 08       	mov	r8,0
8000e64c:	fc 19 40 59 	movh	r9,0x4059
8000e650:	f0 16 00 03 	mcall	r6[12]
8000e654:	14 98       	mov	r8,r10
8000e656:	16 99       	mov	r9,r11
8000e658:	10 9a       	mov	r10,r8
8000e65a:	12 9b       	mov	r11,r9
8000e65c:	f0 16 00 14 	mcall	r6[80]
8000e660:	18 98       	mov	r8,r12
8000e662:	5c 88       	casts.h	r8
8000e664:	10 91       	mov	r1,r8
8000e666:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e66a:	10 9c       	mov	r12,r8
8000e66c:	f0 16 00 02 	mcall	r6[8]
8000e670:	30 08       	mov	r8,0
8000e672:	e0 69 40 00 	mov	r9,16384
8000e676:	ea 19 40 8f 	orh	r9,0x408f
8000e67a:	f0 16 00 03 	mcall	r6[12]
8000e67e:	14 98       	mov	r8,r10
8000e680:	16 99       	mov	r9,r11
8000e682:	10 9a       	mov	r10,r8
8000e684:	12 9b       	mov	r11,r9
8000e686:	f0 16 00 14 	mcall	r6[80]
8000e68a:	18 92       	mov	r2,r12
8000e68c:	ee ea ff e4 	ld.d	r10,r7[-28]
8000e690:	30 08       	mov	r8,0
8000e692:	e0 69 12 d0 	mov	r9,4816
8000e696:	ea 19 41 63 	orh	r9,0x4163
8000e69a:	f0 16 00 03 	mcall	r6[12]
8000e69e:	14 98       	mov	r8,r10
8000e6a0:	16 99       	mov	r9,r11
8000e6a2:	10 9a       	mov	r10,r8
8000e6a4:	12 9b       	mov	r11,r9
8000e6a6:	f0 16 00 14 	mcall	r6[80]
8000e6aa:	18 93       	mov	r3,r12
8000e6ac:	ee ea ff ec 	ld.d	r10,r7[-20]
8000e6b0:	30 08       	mov	r8,0
8000e6b2:	e0 69 12 d0 	mov	r9,4816
8000e6b6:	ea 19 41 63 	orh	r9,0x4163
8000e6ba:	f0 16 00 03 	mcall	r6[12]
8000e6be:	14 98       	mov	r8,r10
8000e6c0:	16 99       	mov	r9,r11
8000e6c2:	10 9a       	mov	r10,r8
8000e6c4:	12 9b       	mov	r11,r9
8000e6c6:	f0 16 00 14 	mcall	r6[80]
8000e6ca:	18 95       	mov	r5,r12
8000e6cc:	f0 16 00 0f 	mcall	r6[60]
8000e6d0:	18 9b       	mov	r11,r12
8000e6d2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000e6d6:	1a d8       	st.w	--sp,r8
8000e6d8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000e6dc:	1a d8       	st.w	--sp,r8
8000e6de:	1a d0       	st.w	--sp,r0
8000e6e0:	1a d1       	st.w	--sp,r1
8000e6e2:	30 18       	mov	r8,1
8000e6e4:	1a d8       	st.w	--sp,r8
8000e6e6:	04 98       	mov	r8,r2
8000e6e8:	06 99       	mov	r9,r3
8000e6ea:	0a 9a       	mov	r10,r5
8000e6ec:	30 0c       	mov	r12,0
8000e6ee:	fe b0 f7 c7 	rcall	8000d67c <mavlink_msg_global_position_int_send>
8000e6f2:	2f bd       	sub	sp,-20
   //} 
}
8000e6f4:	2f 7d       	sub	sp,-36
8000e6f6:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e6fa:	00 00       	add	r0,r0
8000e6fc:	80 00       	ld.sh	r0,r0[0x0]
8000e6fe:	e3 ea eb cd 	sthh.w	sp[0x2f0],r1:t,r10:b

8000e700 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000e700:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e704:	1a 97       	mov	r7,sp
8000e706:	20 5d       	sub	sp,20
8000e708:	4d 46       	lddpc	r6,8000e858 <mavlink_send_hud+0x158>
8000e70a:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000e70c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e710:	70 08       	ld.w	r8,r8[0x0]
8000e712:	f0 f9 0d 74 	ld.w	r9,r8[3444]
8000e716:	ec f8 00 00 	ld.w	r8,r6[0]
8000e71a:	70 08       	ld.w	r8,r8[0x0]
8000e71c:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000e720:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000e724:	ec f8 00 00 	ld.w	r8,r6[0]
8000e728:	70 08       	ld.w	r8,r8[0x0]
8000e72a:	f0 fa 0d 78 	ld.w	r10,r8[3448]
8000e72e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e732:	70 08       	ld.w	r8,r8[0x0]
8000e734:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000e738:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000e73c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000e740:	10 9c       	mov	r12,r8
8000e742:	f0 16 00 02 	mcall	r6[8]
8000e746:	14 98       	mov	r8,r10
8000e748:	16 99       	mov	r9,r11
8000e74a:	10 9a       	mov	r10,r8
8000e74c:	12 9b       	mov	r11,r9
8000e74e:	f0 16 00 6b 	mcall	r6[428]
8000e752:	14 98       	mov	r8,r10
8000e754:	16 99       	mov	r9,r11
8000e756:	10 9a       	mov	r10,r8
8000e758:	12 9b       	mov	r11,r9
8000e75a:	f0 16 00 08 	mcall	r6[32]
8000e75e:	18 98       	mov	r8,r12
8000e760:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000e764:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e768:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000e76c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e770:	70 09       	ld.w	r9,r8[0x0]
8000e772:	ee ca 00 14 	sub	r10,r7,20
8000e776:	20 4d       	sub	sp,16
8000e778:	1a 98       	mov	r8,sp
8000e77a:	20 08       	sub	r8,0
8000e77c:	20 09       	sub	r9,0
8000e77e:	72 0b       	ld.w	r11,r9[0x0]
8000e780:	91 0b       	st.w	r8[0x0],r11
8000e782:	72 1b       	ld.w	r11,r9[0x4]
8000e784:	91 1b       	st.w	r8[0x4],r11
8000e786:	72 2b       	ld.w	r11,r9[0x8]
8000e788:	91 2b       	st.w	r8[0x8],r11
8000e78a:	72 39       	ld.w	r9,r9[0xc]
8000e78c:	91 39       	st.w	r8[0xc],r9
8000e78e:	14 9c       	mov	r12,r10
8000e790:	f0 16 00 6d 	mcall	r6[436]
8000e794:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000e796:	ec f8 00 00 	ld.w	r8,r6[0]
8000e79a:	70 08       	ld.w	r8,r8[0x0]
8000e79c:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000e7a0:	10 92       	mov	r2,r8
8000e7a2:	ee 12 80 00 	eorh	r2,0x8000
8000e7a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7aa:	70 08       	ld.w	r8,r8[0x0]
8000e7ac:	f0 f8 0d a4 	ld.w	r8,r8[3492]
8000e7b0:	10 93       	mov	r3,r8
8000e7b2:	ee 13 80 00 	eorh	r3,0x8000
8000e7b6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7ba:	70 08       	ld.w	r8,r8[0x0]
8000e7bc:	f0 f8 01 54 	ld.w	r8,r8[340]
8000e7c0:	10 9c       	mov	r12,r8
8000e7c2:	f0 16 00 02 	mcall	r6[8]
8000e7c6:	30 08       	mov	r8,0
8000e7c8:	fc 19 3f f0 	movh	r9,0x3ff0
8000e7cc:	f0 16 00 05 	mcall	r6[20]
8000e7d0:	14 98       	mov	r8,r10
8000e7d2:	16 99       	mov	r9,r11
8000e7d4:	10 9a       	mov	r10,r8
8000e7d6:	12 9b       	mov	r11,r9
8000e7d8:	30 08       	mov	r8,0
8000e7da:	fc 19 40 49 	movh	r9,0x4049
8000e7de:	f0 16 00 03 	mcall	r6[12]
8000e7e2:	14 98       	mov	r8,r10
8000e7e4:	16 99       	mov	r9,r11
8000e7e6:	10 9a       	mov	r10,r8
8000e7e8:	12 9b       	mov	r11,r9
8000e7ea:	f0 16 00 14 	mcall	r6[80]
8000e7ee:	18 98       	mov	r8,r12
8000e7f0:	5c 88       	casts.h	r8
8000e7f2:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e7f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e7fa:	10 9c       	mov	r12,r8
8000e7fc:	f0 16 00 02 	mcall	r6[8]
8000e800:	30 08       	mov	r8,0
8000e802:	e0 69 80 00 	mov	r9,32768
8000e806:	ea 19 40 66 	orh	r9,0x4066
8000e80a:	f0 16 00 03 	mcall	r6[12]
8000e80e:	14 98       	mov	r8,r10
8000e810:	16 99       	mov	r9,r11
8000e812:	10 9a       	mov	r10,r8
8000e814:	12 9b       	mov	r11,r9
8000e816:	e0 68 2d 18 	mov	r8,11544
8000e81a:	ea 18 54 44 	orh	r8,0x5444
8000e81e:	e0 69 21 fb 	mov	r9,8699
8000e822:	ea 19 40 09 	orh	r9,0x4009
8000e826:	f0 16 00 0c 	mcall	r6[48]
8000e82a:	14 98       	mov	r8,r10
8000e82c:	16 99       	mov	r9,r11
8000e82e:	10 9a       	mov	r10,r8
8000e830:	12 9b       	mov	r11,r9
8000e832:	f0 16 00 14 	mcall	r6[80]
8000e836:	18 98       	mov	r8,r12
8000e838:	5c 88       	casts.h	r8
8000e83a:	10 99       	mov	r9,r8
8000e83c:	1a d2       	st.w	--sp,r2
8000e83e:	1a d3       	st.w	--sp,r3
8000e840:	0a 98       	mov	r8,r5
8000e842:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e846:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e84a:	30 0c       	mov	r12,0
8000e84c:	fe b0 f9 e6 	rcall	8000dc18 <mavlink_msg_vfr_hud_send>
8000e850:	2f ed       	sub	sp,-8

	
}
8000e852:	2f bd       	sub	sp,-20
8000e854:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e858:	80 00       	ld.sh	r0,r0[0x0]
8000e85a:	e5 8e       	*unknown*

8000e85c <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000e85c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e860:	1a 97       	mov	r7,sp
8000e862:	20 4d       	sub	sp,16
8000e864:	4f d6       	lddpc	r6,8000ea58 <mavlink_send_gps_raw+0x1fc>
8000e866:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000e868:	ec f8 00 00 	ld.w	r8,r6[0]
8000e86c:	70 08       	ld.w	r8,r8[0x0]
8000e86e:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8000e872:	30 28       	mov	r8,2
8000e874:	f0 09 18 00 	cp.b	r9,r8
8000e878:	e0 81 00 c0 	brne	8000e9f8 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000e87c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e880:	70 08       	ld.w	r8,r8[0x0]
8000e882:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000e886:	ef 48 ff f0 	st.w	r7[-16],r8
8000e88a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e88e:	70 08       	ld.w	r8,r8[0x0]
8000e890:	f0 f8 0b 34 	ld.w	r8,r8[2868]
8000e894:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000e898:	5c 88       	casts.h	r8
8000e89a:	5c 78       	castu.h	r8
8000e89c:	ef 48 ff f4 	st.w	r7[-12],r8
8000e8a0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8a4:	70 08       	ld.w	r8,r8[0x0]
8000e8a6:	f0 f8 0b 24 	ld.w	r8,r8[2852]
8000e8aa:	10 9c       	mov	r12,r8
8000e8ac:	f0 16 00 02 	mcall	r6[8]
8000e8b0:	30 08       	mov	r8,0
8000e8b2:	fc 19 40 59 	movh	r9,0x4059
8000e8b6:	f0 16 00 03 	mcall	r6[12]
8000e8ba:	14 98       	mov	r8,r10
8000e8bc:	16 99       	mov	r9,r11
8000e8be:	10 9a       	mov	r10,r8
8000e8c0:	12 9b       	mov	r11,r9
8000e8c2:	f0 16 00 7b 	mcall	r6[492]
8000e8c6:	18 98       	mov	r8,r12
8000e8c8:	5c 88       	casts.h	r8
8000e8ca:	5c 78       	castu.h	r8
8000e8cc:	ef 48 ff f8 	st.w	r7[-8],r8
8000e8d0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8d4:	70 08       	ld.w	r8,r8[0x0]
8000e8d6:	f0 f8 0b 40 	ld.w	r8,r8[2880]
8000e8da:	10 9c       	mov	r12,r8
8000e8dc:	f0 16 00 02 	mcall	r6[8]
8000e8e0:	30 08       	mov	r8,0
8000e8e2:	fc 19 40 59 	movh	r9,0x4059
8000e8e6:	f0 16 00 03 	mcall	r6[12]
8000e8ea:	14 98       	mov	r8,r10
8000e8ec:	16 99       	mov	r9,r11
8000e8ee:	10 9a       	mov	r10,r8
8000e8f0:	12 9b       	mov	r11,r9
8000e8f2:	f0 16 00 7b 	mcall	r6[492]
8000e8f6:	18 98       	mov	r8,r12
8000e8f8:	5c 88       	casts.h	r8
8000e8fa:	5c 78       	castu.h	r8
8000e8fc:	ef 48 ff fc 	st.w	r7[-4],r8
8000e900:	ec f8 00 00 	ld.w	r8,r6[0]
8000e904:	70 08       	ld.w	r8,r8[0x0]
8000e906:	f1 08 0b 4a 	ld.sh	r8,r8[2890]
8000e90a:	5c 78       	castu.h	r8
8000e90c:	10 9c       	mov	r12,r8
8000e90e:	f0 16 00 1a 	mcall	r6[104]
8000e912:	30 08       	mov	r8,0
8000e914:	fc 19 40 59 	movh	r9,0x4059
8000e918:	f0 16 00 03 	mcall	r6[12]
8000e91c:	14 98       	mov	r8,r10
8000e91e:	16 99       	mov	r9,r11
8000e920:	10 9a       	mov	r10,r8
8000e922:	12 9b       	mov	r11,r9
8000e924:	f0 16 00 7b 	mcall	r6[492]
8000e928:	18 98       	mov	r8,r12
8000e92a:	5c 88       	casts.h	r8
8000e92c:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000e930:	ec f8 00 00 	ld.w	r8,r6[0]
8000e934:	70 08       	ld.w	r8,r8[0x0]
8000e936:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000e93a:	10 9c       	mov	r12,r8
8000e93c:	f0 16 00 02 	mcall	r6[8]
8000e940:	30 08       	mov	r8,0
8000e942:	e0 69 40 00 	mov	r9,16384
8000e946:	ea 19 40 8f 	orh	r9,0x408f
8000e94a:	f0 16 00 03 	mcall	r6[12]
8000e94e:	14 98       	mov	r8,r10
8000e950:	16 99       	mov	r9,r11
8000e952:	10 9a       	mov	r10,r8
8000e954:	12 9b       	mov	r11,r9
8000e956:	f0 16 00 14 	mcall	r6[80]
8000e95a:	18 93       	mov	r3,r12
8000e95c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e960:	70 08       	ld.w	r8,r8[0x0]
8000e962:	f0 ea 0b 10 	ld.d	r10,r8[2832]
8000e966:	30 08       	mov	r8,0
8000e968:	e0 69 12 d0 	mov	r9,4816
8000e96c:	ea 19 41 63 	orh	r9,0x4163
8000e970:	f0 16 00 03 	mcall	r6[12]
8000e974:	14 98       	mov	r8,r10
8000e976:	16 99       	mov	r9,r11
8000e978:	10 9a       	mov	r10,r8
8000e97a:	12 9b       	mov	r11,r9
8000e97c:	f0 16 00 14 	mcall	r6[80]
8000e980:	18 95       	mov	r5,r12
8000e982:	ec f8 00 00 	ld.w	r8,r6[0]
8000e986:	70 08       	ld.w	r8,r8[0x0]
8000e988:	f0 ea 0b 08 	ld.d	r10,r8[2824]
8000e98c:	30 08       	mov	r8,0
8000e98e:	e0 69 12 d0 	mov	r9,4816
8000e992:	ea 19 41 63 	orh	r9,0x4163
8000e996:	f0 16 00 03 	mcall	r6[12]
8000e99a:	14 98       	mov	r8,r10
8000e99c:	16 99       	mov	r9,r11
8000e99e:	10 9a       	mov	r10,r8
8000e9a0:	12 9b       	mov	r11,r9
8000e9a2:	f0 16 00 14 	mcall	r6[80]
8000e9a6:	18 9a       	mov	r10,r12
8000e9a8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9ac:	70 08       	ld.w	r8,r8[0x0]
8000e9ae:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000e9b2:	10 99       	mov	r9,r8
8000e9b4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9b8:	70 08       	ld.w	r8,r8[0x0]
8000e9ba:	f0 fb 0b 4c 	ld.w	r11,r8[2892]
8000e9be:	e0 68 03 e8 	mov	r8,1000
8000e9c2:	f6 08 02 48 	mul	r8,r11,r8
8000e9c6:	10 90       	mov	r0,r8
8000e9c8:	30 01       	mov	r1,0
8000e9ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e9ce:	1a d8       	st.w	--sp,r8
8000e9d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e9d4:	1a d8       	st.w	--sp,r8
8000e9d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e9da:	1a d8       	st.w	--sp,r8
8000e9dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9e0:	1a d8       	st.w	--sp,r8
8000e9e2:	1a d2       	st.w	--sp,r2
8000e9e4:	1a d3       	st.w	--sp,r3
8000e9e6:	1a d5       	st.w	--sp,r5
8000e9e8:	14 98       	mov	r8,r10
8000e9ea:	00 9a       	mov	r10,r0
8000e9ec:	02 9b       	mov	r11,r1
8000e9ee:	30 0c       	mov	r12,0
8000e9f0:	fe b0 f3 4e 	rcall	8000d08c <mavlink_msg_gps_raw_int_send>
8000e9f4:	2f 9d       	sub	sp,-28
8000e9f6:	c2 e8       	rjmp	8000ea52 <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000e9f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9fc:	70 08       	ld.w	r8,r8[0x0]
8000e9fe:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000ea02:	10 91       	mov	r1,r8
8000ea04:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea08:	70 08       	ld.w	r8,r8[0x0]
8000ea0a:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000ea0e:	10 95       	mov	r5,r8
8000ea10:	f0 16 00 29 	mcall	r6[164]
8000ea14:	18 98       	mov	r8,r12
8000ea16:	10 92       	mov	r2,r8
8000ea18:	30 03       	mov	r3,0
8000ea1a:	1a d1       	st.w	--sp,r1
8000ea1c:	30 08       	mov	r8,0
8000ea1e:	1a d8       	st.w	--sp,r8
8000ea20:	30 08       	mov	r8,0
8000ea22:	1a d8       	st.w	--sp,r8
8000ea24:	30 08       	mov	r8,0
8000ea26:	1a d8       	st.w	--sp,r8
8000ea28:	30 08       	mov	r8,0
8000ea2a:	1a d8       	st.w	--sp,r8
8000ea2c:	e6 68 1a 80 	mov	r8,400000
8000ea30:	1a d8       	st.w	--sp,r8
8000ea32:	e0 68 c0 0c 	mov	r8,49164
8000ea36:	ea 18 03 e9 	orh	r8,0x3e9
8000ea3a:	1a d8       	st.w	--sp,r8
8000ea3c:	e0 68 48 28 	mov	r8,18472
8000ea40:	ea 18 1b ba 	orh	r8,0x1bba
8000ea44:	0a 99       	mov	r9,r5
8000ea46:	04 9a       	mov	r10,r2
8000ea48:	06 9b       	mov	r11,r3
8000ea4a:	30 0c       	mov	r12,0
8000ea4c:	fe b0 f3 20 	rcall	8000d08c <mavlink_msg_gps_raw_int_send>
8000ea50:	2f 9d       	sub	sp,-28
	}
}
8000ea52:	2f cd       	sub	sp,-16
8000ea54:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ea58:	80 00       	ld.sh	r0,r0[0x0]
8000ea5a:	e6 ea 70 72 	ld.d	r10,r3[28786]
8000ea5e:	65 73       	ld.w	r3,r2[0x5c]
8000ea60:	73 41       	ld.w	r1,r9[0x50]
8000ea62:	6c 74       	ld.w	r4,r6[0x1c]
8000ea64:	00 00       	add	r0,r0
8000ea66:	00 00       	add	r0,r0
8000ea68:	6c 61       	ld.w	r1,r6[0x18]
8000ea6a:	73 74       	ld.w	r4,r9[0x5c]
8000ea6c:	41 6c       	lddsp	r12,sp[0x58]
8000ea6e:	74 00       	ld.w	r0,r10[0x0]
8000ea70:	62 61       	ld.w	r1,r1[0x18]
8000ea72:	72 6f       	ld.w	pc,r9[0x18]
8000ea74:	5f 64       	srmi	r4
8000ea76:	74 00       	ld.w	r0,r10[0x0]

8000ea78 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000ea78:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ea7c:	1a 97       	mov	r7,sp
8000ea7e:	4b 56       	lddpc	r6,8000eb50 <mavlink_send_pressure+0xd8>
8000ea80:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000ea82:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea86:	70 08       	ld.w	r8,r8[0x0]
8000ea88:	f0 f8 10 d0 	ld.w	r8,r8[4304]
8000ea8c:	10 9c       	mov	r12,r8
8000ea8e:	f0 16 00 02 	mcall	r6[8]
8000ea92:	30 08       	mov	r8,0
8000ea94:	fc 19 40 59 	movh	r9,0x4059
8000ea98:	f0 16 00 03 	mcall	r6[12]
8000ea9c:	14 98       	mov	r8,r10
8000ea9e:	16 99       	mov	r9,r11
8000eaa0:	10 9a       	mov	r10,r8
8000eaa2:	12 9b       	mov	r11,r9
8000eaa4:	f0 16 00 14 	mcall	r6[80]
8000eaa8:	18 98       	mov	r8,r12
8000eaaa:	5c 88       	casts.h	r8
8000eaac:	10 92       	mov	r2,r8
8000eaae:	ec f8 00 00 	ld.w	r8,r6[0]
8000eab2:	70 08       	ld.w	r8,r8[0x0]
8000eab4:	f0 f3 10 e8 	ld.w	r3,r8[4328]
8000eab8:	ec f8 00 00 	ld.w	r8,r6[0]
8000eabc:	70 08       	ld.w	r8,r8[0x0]
8000eabe:	f0 f8 10 cc 	ld.w	r8,r8[4300]
8000eac2:	fc 1b 42 c8 	movh	r11,0x42c8
8000eac6:	10 9c       	mov	r12,r8
8000eac8:	f0 16 00 0a 	mcall	r6[40]
8000eacc:	18 98       	mov	r8,r12
8000eace:	10 95       	mov	r5,r8
8000ead0:	f0 16 00 0f 	mcall	r6[60]
8000ead4:	18 9b       	mov	r11,r12
8000ead6:	04 98       	mov	r8,r2
8000ead8:	06 99       	mov	r9,r3
8000eada:	0a 9a       	mov	r10,r5
8000eadc:	30 0c       	mov	r12,0
8000eade:	fe b0 f4 69 	rcall	8000d3b0 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000eae2:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000eae6:	ec f8 00 00 	ld.w	r8,r6[0]
8000eaea:	70 08       	ld.w	r8,r8[0x0]
8000eaec:	f0 f5 10 e0 	ld.w	r5,r8[4320]
8000eaf0:	f0 16 00 0f 	mcall	r6[60]
8000eaf4:	18 98       	mov	r8,r12
8000eaf6:	0a 99       	mov	r9,r5
8000eaf8:	fe ca 00 9c 	sub	r10,pc,156
8000eafc:	10 9b       	mov	r11,r8
8000eafe:	30 0c       	mov	r12,0
8000eb00:	fe b0 f9 ec 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000eb04:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000eb08:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb0c:	70 08       	ld.w	r8,r8[0x0]
8000eb0e:	f0 f5 0d 8c 	ld.w	r5,r8[3468]
8000eb12:	f0 16 00 0f 	mcall	r6[60]
8000eb16:	18 98       	mov	r8,r12
8000eb18:	0a 99       	mov	r9,r5
8000eb1a:	fe ca 00 b2 	sub	r10,pc,178
8000eb1e:	10 9b       	mov	r11,r8
8000eb20:	30 0c       	mov	r12,0
8000eb22:	fe b0 f9 db 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000eb26:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000eb2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb2e:	70 08       	ld.w	r8,r8[0x0]
8000eb30:	f0 f5 10 f8 	ld.w	r5,r8[4344]
8000eb34:	f0 16 00 0f 	mcall	r6[60]
8000eb38:	18 98       	mov	r8,r12
8000eb3a:	0a 99       	mov	r9,r5
8000eb3c:	fe ca 00 cc 	sub	r10,pc,204
8000eb40:	10 9b       	mov	r11,r8
8000eb42:	30 0c       	mov	r12,0
8000eb44:	fe b0 f9 ca 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000eb48:	f0 16 00 3b 	mcall	r6[236]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000eb4c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000eb50:	80 00       	ld.sh	r0,r0[0x0]
8000eb52:	e9 04 52 61 	ld.sh	r4,r4[21089]
8000eb56:	64 61       	ld.w	r1,r2[0x18]
8000eb58:	72 5f       	ld.w	pc,r9[0x14]
8000eb5a:	76 65       	ld.w	r5,r11[0x18]
8000eb5c:	6c 6f       	ld.w	pc,r6[0x18]
8000eb5e:	63 69       	ld.w	r9,r1[0x58]
8000eb60:	74 79       	ld.w	r9,r10[0x1c]
8000eb62:	00 00       	add	r0,r0
8000eb64:	52 61       	stdsp	sp[0x98],r1
8000eb66:	64 61       	ld.w	r1,r2[0x18]
8000eb68:	72 5f       	ld.w	pc,r9[0x14]
8000eb6a:	61 6d       	ld.w	sp,r0[0x58]
8000eb6c:	70 6c       	ld.w	r12,r8[0x18]
8000eb6e:	69 74       	ld.w	r4,r4[0x5c]
8000eb70:	75 64       	ld.w	r4,r10[0x58]
8000eb72:	65 00       	ld.w	r0,r2[0x40]

8000eb74 <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000eb74:	eb cd 40 e0 	pushm	r5-r7,lr
8000eb78:	1a 97       	mov	r7,sp
8000eb7a:	20 1d       	sub	sp,4
8000eb7c:	49 76       	lddpc	r6,8000ebd8 <mavlink_send_radar+0x64>
8000eb7e:	1e 26       	rsub	r6,pc
	read_radar();
8000eb80:	f0 16 01 9e 	mcall	r6[1656]
	radar_target *target=get_radar_main_target();
8000eb84:	f0 16 01 a8 	mcall	r6[1696]
8000eb88:	18 98       	mov	r8,r12
8000eb8a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000eb8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb92:	70 05       	ld.w	r5,r8[0x0]
8000eb94:	f0 16 00 0f 	mcall	r6[60]
8000eb98:	18 98       	mov	r8,r12
8000eb9a:	0a 99       	mov	r9,r5
8000eb9c:	fe ca 00 48 	sub	r10,pc,72
8000eba0:	10 9b       	mov	r11,r8
8000eba2:	30 0c       	mov	r12,0
8000eba4:	fe b0 f9 9a 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000eba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ebac:	70 18       	ld.w	r8,r8[0x4]
8000ebae:	fc 1b 44 7a 	movh	r11,0x447a
8000ebb2:	10 9c       	mov	r12,r8
8000ebb4:	f0 16 00 0a 	mcall	r6[40]
8000ebb8:	18 98       	mov	r8,r12
8000ebba:	10 95       	mov	r5,r8
8000ebbc:	f0 16 00 0f 	mcall	r6[60]
8000ebc0:	18 98       	mov	r8,r12
8000ebc2:	0a 99       	mov	r9,r5
8000ebc4:	fe ca 00 60 	sub	r10,pc,96
8000ebc8:	10 9b       	mov	r11,r8
8000ebca:	30 0c       	mov	r12,0
8000ebcc:	fe b0 f9 86 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
}
8000ebd0:	2f fd       	sub	sp,-4
8000ebd2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000ebd6:	00 00       	add	r0,r0
8000ebd8:	80 00       	ld.sh	r0,r0[0x0]
8000ebda:	ea 02       	*unknown*

8000ebdc <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000ebdc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ebe0:	1a 97       	mov	r7,sp
8000ebe2:	20 1d       	sub	sp,4
8000ebe4:	49 a6       	lddpc	r6,8000ec4c <mavlink_send_estimator+0x70>
8000ebe6:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000ebe8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebec:	70 08       	ld.w	r8,r8[0x0]
8000ebee:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000ebf2:	ef 48 ff fc 	st.w	r7[-4],r8
8000ebf6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebfa:	70 08       	ld.w	r8,r8[0x0]
8000ebfc:	f0 f0 0d 78 	ld.w	r0,r8[3448]
8000ec00:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec04:	70 08       	ld.w	r8,r8[0x0]
8000ec06:	f0 f1 0d 74 	ld.w	r1,r8[3444]
8000ec0a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec0e:	70 08       	ld.w	r8,r8[0x0]
8000ec10:	f0 f2 0d a4 	ld.w	r2,r8[3492]
8000ec14:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec18:	70 08       	ld.w	r8,r8[0x0]
8000ec1a:	f0 f3 0d a0 	ld.w	r3,r8[3488]
8000ec1e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec22:	70 08       	ld.w	r8,r8[0x0]
8000ec24:	f0 f5 0d 9c 	ld.w	r5,r8[3484]
8000ec28:	f0 16 00 0f 	mcall	r6[60]
8000ec2c:	18 9b       	mov	r11,r12
8000ec2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec32:	1a d8       	st.w	--sp,r8
8000ec34:	1a d0       	st.w	--sp,r0
8000ec36:	1a d1       	st.w	--sp,r1
8000ec38:	04 98       	mov	r8,r2
8000ec3a:	06 99       	mov	r9,r3
8000ec3c:	0a 9a       	mov	r10,r5
8000ec3e:	30 0c       	mov	r12,0
8000ec40:	fe b0 f4 c0 	rcall	8000d5c0 <mavlink_msg_local_position_ned_send>
8000ec44:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000ec46:	2f fd       	sub	sp,-4
8000ec48:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ec4c:	80 00       	ld.sh	r0,r0[0x0]
8000ec4e:	ea 6a 65 73 	mov	r10,681331
8000ec52:	74 69       	ld.w	r9,r10[0x18]
8000ec54:	58 00       	cp.w	r0,0
8000ec56:	00 00       	add	r0,r0
8000ec58:	65 73       	ld.w	r3,r2[0x5c]
8000ec5a:	74 69       	ld.w	r9,r10[0x18]
8000ec5c:	59 00       	cp.w	r0,16
8000ec5e:	00 00       	add	r0,r0
8000ec60:	65 73       	ld.w	r3,r2[0x5c]
8000ec62:	74 69       	ld.w	r9,r10[0x18]
8000ec64:	5a 00       	cp.w	r0,-32
8000ec66:	00 00       	add	r0,r0
8000ec68:	65 73       	ld.w	r3,r2[0x5c]
8000ec6a:	74 69       	ld.w	r9,r10[0x18]
8000ec6c:	56 78       	stdsp	sp[0x19c],r8
8000ec6e:	00 00       	add	r0,r0
8000ec70:	65 73       	ld.w	r3,r2[0x5c]
8000ec72:	74 69       	ld.w	r9,r10[0x18]
8000ec74:	56 79       	stdsp	sp[0x19c],r9
8000ec76:	00 00       	add	r0,r0
8000ec78:	65 73       	ld.w	r3,r2[0x5c]
8000ec7a:	74 69       	ld.w	r9,r10[0x18]
8000ec7c:	56 7a       	stdsp	sp[0x19c],r10
8000ec7e:	00 00       	add	r0,r0
8000ec80:	65 73       	ld.w	r3,r2[0x5c]
8000ec82:	74 69       	ld.w	r9,r10[0x18]
8000ec84:	62 69       	ld.w	r9,r1[0x18]
8000ec86:	61 69       	ld.w	r9,r0[0x58]
8000ec88:	73 58       	ld.w	r8,r9[0x54]
8000ec8a:	00 00       	add	r0,r0
8000ec8c:	65 73       	ld.w	r3,r2[0x5c]
8000ec8e:	74 69       	ld.w	r9,r10[0x18]
8000ec90:	62 69       	ld.w	r9,r1[0x18]
8000ec92:	61 69       	ld.w	r9,r0[0x58]
8000ec94:	73 59       	ld.w	r9,r9[0x54]
8000ec96:	00 00       	add	r0,r0
8000ec98:	65 73       	ld.w	r3,r2[0x5c]
8000ec9a:	74 69       	ld.w	r9,r10[0x18]
8000ec9c:	62 69       	ld.w	r9,r1[0x18]
8000ec9e:	61 69       	ld.w	r9,r0[0x58]
8000eca0:	73 5a       	ld.w	r10,r9[0x54]
	...

8000eca4 <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000eca4:	eb cd 40 e0 	pushm	r5-r7,lr
8000eca8:	1a 97       	mov	r7,sp
8000ecaa:	4d d6       	lddpc	r6,8000ee1c <mavlink_send_kalman_estimator+0x178>
8000ecac:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000ecae:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecb2:	70 08       	ld.w	r8,r8[0x0]
8000ecb4:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000ecb8:	10 9a       	mov	r10,r8
8000ecba:	12 9b       	mov	r11,r9
8000ecbc:	f0 16 00 08 	mcall	r6[32]
8000ecc0:	18 95       	mov	r5,r12
8000ecc2:	f0 16 00 0f 	mcall	r6[60]
8000ecc6:	18 98       	mov	r8,r12
8000ecc8:	0a 99       	mov	r9,r5
8000ecca:	fe ca 00 7a 	sub	r10,pc,122
8000ecce:	10 9b       	mov	r11,r8
8000ecd0:	30 0c       	mov	r12,0
8000ecd2:	fe b0 f9 03 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000ecd6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecda:	70 08       	ld.w	r8,r8[0x0]
8000ecdc:	f0 e8 0b 74 	ld.d	r8,r8[2932]
8000ece0:	10 9a       	mov	r10,r8
8000ece2:	12 9b       	mov	r11,r9
8000ece4:	f0 16 00 08 	mcall	r6[32]
8000ece8:	18 95       	mov	r5,r12
8000ecea:	f0 16 00 0f 	mcall	r6[60]
8000ecee:	18 98       	mov	r8,r12
8000ecf0:	0a 99       	mov	r9,r5
8000ecf2:	fe ca 00 9a 	sub	r10,pc,154
8000ecf6:	10 9b       	mov	r11,r8
8000ecf8:	30 0c       	mov	r12,0
8000ecfa:	fe b0 f8 ef 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000ecfe:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed02:	70 08       	ld.w	r8,r8[0x0]
8000ed04:	f0 e8 0b 8c 	ld.d	r8,r8[2956]
8000ed08:	10 9a       	mov	r10,r8
8000ed0a:	12 9b       	mov	r11,r9
8000ed0c:	f0 16 00 08 	mcall	r6[32]
8000ed10:	18 95       	mov	r5,r12
8000ed12:	f0 16 00 0f 	mcall	r6[60]
8000ed16:	18 98       	mov	r8,r12
8000ed18:	0a 99       	mov	r9,r5
8000ed1a:	fe ca 00 ba 	sub	r10,pc,186
8000ed1e:	10 9b       	mov	r11,r8
8000ed20:	30 0c       	mov	r12,0
8000ed22:	fe b0 f8 db 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000ed26:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed2a:	70 08       	ld.w	r8,r8[0x0]
8000ed2c:	f0 e8 0b 64 	ld.d	r8,r8[2916]
8000ed30:	10 9a       	mov	r10,r8
8000ed32:	12 9b       	mov	r11,r9
8000ed34:	f0 16 00 08 	mcall	r6[32]
8000ed38:	18 95       	mov	r5,r12
8000ed3a:	f0 16 00 0f 	mcall	r6[60]
8000ed3e:	18 98       	mov	r8,r12
8000ed40:	0a 99       	mov	r9,r5
8000ed42:	fe ca 00 da 	sub	r10,pc,218
8000ed46:	10 9b       	mov	r11,r8
8000ed48:	30 0c       	mov	r12,0
8000ed4a:	fe b0 f8 c7 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000ed4e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed52:	70 08       	ld.w	r8,r8[0x0]
8000ed54:	f0 e8 0b 7c 	ld.d	r8,r8[2940]
8000ed58:	10 9a       	mov	r10,r8
8000ed5a:	12 9b       	mov	r11,r9
8000ed5c:	f0 16 00 08 	mcall	r6[32]
8000ed60:	18 95       	mov	r5,r12
8000ed62:	f0 16 00 0f 	mcall	r6[60]
8000ed66:	18 98       	mov	r8,r12
8000ed68:	0a 99       	mov	r9,r5
8000ed6a:	fe ca 00 fa 	sub	r10,pc,250
8000ed6e:	10 9b       	mov	r11,r8
8000ed70:	30 0c       	mov	r12,0
8000ed72:	fe b0 f8 b3 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000ed76:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed7a:	70 08       	ld.w	r8,r8[0x0]
8000ed7c:	f0 e8 0b 94 	ld.d	r8,r8[2964]
8000ed80:	10 9a       	mov	r10,r8
8000ed82:	12 9b       	mov	r11,r9
8000ed84:	f0 16 00 08 	mcall	r6[32]
8000ed88:	18 95       	mov	r5,r12
8000ed8a:	f0 16 00 0f 	mcall	r6[60]
8000ed8e:	18 98       	mov	r8,r12
8000ed90:	0a 99       	mov	r9,r5
8000ed92:	fe ca 01 1a 	sub	r10,pc,282
8000ed96:	10 9b       	mov	r11,r8
8000ed98:	30 0c       	mov	r12,0
8000ed9a:	fe b0 f8 9f 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000ed9e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eda2:	70 08       	ld.w	r8,r8[0x0]
8000eda4:	f0 e8 0b 6c 	ld.d	r8,r8[2924]
8000eda8:	10 9a       	mov	r10,r8
8000edaa:	12 9b       	mov	r11,r9
8000edac:	f0 16 00 08 	mcall	r6[32]
8000edb0:	18 95       	mov	r5,r12
8000edb2:	f0 16 00 0f 	mcall	r6[60]
8000edb6:	18 98       	mov	r8,r12
8000edb8:	0a 99       	mov	r9,r5
8000edba:	fe ca 01 3a 	sub	r10,pc,314
8000edbe:	10 9b       	mov	r11,r8
8000edc0:	30 0c       	mov	r12,0
8000edc2:	fe b0 f8 8b 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000edc6:	ec f8 00 00 	ld.w	r8,r6[0]
8000edca:	70 08       	ld.w	r8,r8[0x0]
8000edcc:	f0 e8 0b 84 	ld.d	r8,r8[2948]
8000edd0:	10 9a       	mov	r10,r8
8000edd2:	12 9b       	mov	r11,r9
8000edd4:	f0 16 00 08 	mcall	r6[32]
8000edd8:	18 95       	mov	r5,r12
8000edda:	f0 16 00 0f 	mcall	r6[60]
8000edde:	18 98       	mov	r8,r12
8000ede0:	0a 99       	mov	r9,r5
8000ede2:	fe ca 01 56 	sub	r10,pc,342
8000ede6:	10 9b       	mov	r11,r8
8000ede8:	30 0c       	mov	r12,0
8000edea:	fe b0 f8 77 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000edee:	ec f8 00 00 	ld.w	r8,r6[0]
8000edf2:	70 08       	ld.w	r8,r8[0x0]
8000edf4:	f0 e8 0b 9c 	ld.d	r8,r8[2972]
8000edf8:	10 9a       	mov	r10,r8
8000edfa:	12 9b       	mov	r11,r9
8000edfc:	f0 16 00 08 	mcall	r6[32]
8000ee00:	18 95       	mov	r5,r12
8000ee02:	f0 16 00 0f 	mcall	r6[60]
8000ee06:	18 98       	mov	r8,r12
8000ee08:	0a 99       	mov	r9,r5
8000ee0a:	fe ca 01 72 	sub	r10,pc,370
8000ee0e:	10 9b       	mov	r11,r8
8000ee10:	30 0c       	mov	r12,0
8000ee12:	fe b0 f8 63 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000ee16:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000ee1a:	00 00       	add	r0,r0
8000ee1c:	80 00       	ld.sh	r0,r0[0x0]
8000ee1e:	eb 30 eb cd 	ld.ub	r0,r5[-5171]

8000ee20 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000ee20:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ee24:	1a 97       	mov	r7,sp
8000ee26:	20 4d       	sub	sp,16
8000ee28:	4b 86       	lddpc	r6,8000ef08 <mavlink_send_raw_rc_channels+0xe8>
8000ee2a:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000ee2c:	f0 16 00 a7 	mcall	r6[668]
8000ee30:	18 98       	mov	r8,r12
8000ee32:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000ee34:	5c 58       	castu.b	r8
8000ee36:	ef 48 ff f0 	st.w	r7[-16],r8
8000ee3a:	30 7c       	mov	r12,7
8000ee3c:	f0 16 00 1b 	mcall	r6[108]
8000ee40:	18 98       	mov	r8,r12
8000ee42:	f0 c8 fc 18 	sub	r8,r8,-1000
8000ee46:	5c 88       	casts.h	r8
8000ee48:	5c 78       	castu.h	r8
8000ee4a:	ef 48 ff f4 	st.w	r7[-12],r8
8000ee4e:	30 6c       	mov	r12,6
8000ee50:	f0 16 00 1b 	mcall	r6[108]
8000ee54:	18 98       	mov	r8,r12
8000ee56:	f0 c8 fc 18 	sub	r8,r8,-1000
8000ee5a:	5c 88       	casts.h	r8
8000ee5c:	5c 78       	castu.h	r8
8000ee5e:	ef 48 ff f8 	st.w	r7[-8],r8
8000ee62:	30 5c       	mov	r12,5
8000ee64:	f0 16 00 1b 	mcall	r6[108]
8000ee68:	18 98       	mov	r8,r12
8000ee6a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000ee6e:	5c 88       	casts.h	r8
8000ee70:	5c 78       	castu.h	r8
8000ee72:	ef 48 ff fc 	st.w	r7[-4],r8
8000ee76:	30 4c       	mov	r12,4
8000ee78:	f0 16 00 1b 	mcall	r6[108]
8000ee7c:	18 98       	mov	r8,r12
8000ee7e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000ee82:	5c 88       	casts.h	r8
8000ee84:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000ee88:	30 3c       	mov	r12,3
8000ee8a:	f0 16 00 1b 	mcall	r6[108]
8000ee8e:	18 98       	mov	r8,r12
8000ee90:	f0 c8 fc 18 	sub	r8,r8,-1000
8000ee94:	5c 88       	casts.h	r8
8000ee96:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000ee9a:	30 2c       	mov	r12,2
8000ee9c:	f0 16 00 1b 	mcall	r6[108]
8000eea0:	18 98       	mov	r8,r12
8000eea2:	f0 c8 fc 18 	sub	r8,r8,-1000
8000eea6:	5c 88       	casts.h	r8
8000eea8:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000eeac:	30 1c       	mov	r12,1
8000eeae:	f0 16 00 1b 	mcall	r6[108]
8000eeb2:	18 98       	mov	r8,r12
8000eeb4:	f0 c8 fc 18 	sub	r8,r8,-1000
8000eeb8:	5c 88       	casts.h	r8
8000eeba:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000eebe:	30 0c       	mov	r12,0
8000eec0:	f0 16 00 1b 	mcall	r6[108]
8000eec4:	18 98       	mov	r8,r12
8000eec6:	f0 c8 fc 18 	sub	r8,r8,-1000
8000eeca:	5c 88       	casts.h	r8
8000eecc:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000eed0:	f0 16 00 0f 	mcall	r6[60]
8000eed4:	18 9b       	mov	r11,r12
8000eed6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000eeda:	1a d8       	st.w	--sp,r8
8000eedc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eee0:	1a d8       	st.w	--sp,r8
8000eee2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eee6:	1a d8       	st.w	--sp,r8
8000eee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eeec:	1a d8       	st.w	--sp,r8
8000eeee:	1a d0       	st.w	--sp,r0
8000eef0:	1a d1       	st.w	--sp,r1
8000eef2:	1a d2       	st.w	--sp,r2
8000eef4:	06 98       	mov	r8,r3
8000eef6:	0a 99       	mov	r9,r5
8000eef8:	30 1a       	mov	r10,1
8000eefa:	30 0c       	mov	r12,0
8000eefc:	fe b0 f4 d2 	rcall	8000d8a0 <mavlink_msg_rc_channels_raw_send>
8000ef00:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000ef02:	2f cd       	sub	sp,-16
8000ef04:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ef08:	80 00       	ld.sh	r0,r0[0x0]
8000ef0a:	ec ae       	*unknown*
8000ef0c:	43 6f       	lddsp	pc,sp[0xd8]
8000ef0e:	6c 6c       	ld.w	r12,r6[0x18]
8000ef10:	5f 41       	srge	r1
8000ef12:	76 6f       	ld.w	pc,r11[0x18]
8000ef14:	69 64       	ld.w	r4,r4[0x58]
8000ef16:	61 6e       	ld.w	lr,r0[0x58]
8000ef18:	63 65       	ld.w	r5,r1[0x58]
	...

8000ef1c <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000ef1c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ef20:	1a 97       	mov	r7,sp
8000ef22:	20 4d       	sub	sp,16
8000ef24:	fe f6 02 94 	ld.w	r6,pc[660]
8000ef28:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000ef2a:	f0 16 00 a7 	mcall	r6[668]
8000ef2e:	18 98       	mov	r8,r12
8000ef30:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000ef32:	5c 58       	castu.b	r8
8000ef34:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000ef38:	30 7c       	mov	r12,7
8000ef3a:	f0 16 00 1b 	mcall	r6[108]
8000ef3e:	18 98       	mov	r8,r12
8000ef40:	10 9c       	mov	r12,r8
8000ef42:	f0 16 00 1a 	mcall	r6[104]
8000ef46:	30 08       	mov	r8,0
8000ef48:	e0 69 40 00 	mov	r9,16384
8000ef4c:	ea 19 40 8f 	orh	r9,0x408f
8000ef50:	f0 16 00 03 	mcall	r6[12]
8000ef54:	14 98       	mov	r8,r10
8000ef56:	16 99       	mov	r9,r11
8000ef58:	10 9a       	mov	r10,r8
8000ef5a:	12 9b       	mov	r11,r9
8000ef5c:	30 08       	mov	r8,0
8000ef5e:	e0 69 60 00 	mov	r9,24576
8000ef62:	ea 19 40 7b 	orh	r9,0x407b
8000ef66:	f0 16 00 0c 	mcall	r6[48]
8000ef6a:	14 98       	mov	r8,r10
8000ef6c:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000ef6e:	10 9a       	mov	r10,r8
8000ef70:	12 9b       	mov	r11,r9
8000ef72:	f0 16 00 14 	mcall	r6[80]
8000ef76:	18 98       	mov	r8,r12
8000ef78:	5c 88       	casts.h	r8
8000ef7a:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000ef7e:	30 6c       	mov	r12,6
8000ef80:	f0 16 00 1b 	mcall	r6[108]
8000ef84:	18 98       	mov	r8,r12
8000ef86:	10 9c       	mov	r12,r8
8000ef88:	f0 16 00 1a 	mcall	r6[104]
8000ef8c:	30 08       	mov	r8,0
8000ef8e:	e0 69 40 00 	mov	r9,16384
8000ef92:	ea 19 40 8f 	orh	r9,0x408f
8000ef96:	f0 16 00 03 	mcall	r6[12]
8000ef9a:	14 98       	mov	r8,r10
8000ef9c:	16 99       	mov	r9,r11
8000ef9e:	10 9a       	mov	r10,r8
8000efa0:	12 9b       	mov	r11,r9
8000efa2:	30 08       	mov	r8,0
8000efa4:	e0 69 60 00 	mov	r9,24576
8000efa8:	ea 19 40 7b 	orh	r9,0x407b
8000efac:	f0 16 00 0c 	mcall	r6[48]
8000efb0:	14 98       	mov	r8,r10
8000efb2:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000efb4:	10 9a       	mov	r10,r8
8000efb6:	12 9b       	mov	r11,r9
8000efb8:	f0 16 00 14 	mcall	r6[80]
8000efbc:	18 98       	mov	r8,r12
8000efbe:	5c 88       	casts.h	r8
8000efc0:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000efc4:	30 5c       	mov	r12,5
8000efc6:	f0 16 00 1b 	mcall	r6[108]
8000efca:	18 98       	mov	r8,r12
8000efcc:	10 9c       	mov	r12,r8
8000efce:	f0 16 00 1a 	mcall	r6[104]
8000efd2:	30 08       	mov	r8,0
8000efd4:	e0 69 40 00 	mov	r9,16384
8000efd8:	ea 19 40 8f 	orh	r9,0x408f
8000efdc:	f0 16 00 03 	mcall	r6[12]
8000efe0:	14 98       	mov	r8,r10
8000efe2:	16 99       	mov	r9,r11
8000efe4:	10 9a       	mov	r10,r8
8000efe6:	12 9b       	mov	r11,r9
8000efe8:	30 08       	mov	r8,0
8000efea:	e0 69 60 00 	mov	r9,24576
8000efee:	ea 19 40 7b 	orh	r9,0x407b
8000eff2:	f0 16 00 0c 	mcall	r6[48]
8000eff6:	14 98       	mov	r8,r10
8000eff8:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000effa:	10 9a       	mov	r10,r8
8000effc:	12 9b       	mov	r11,r9
8000effe:	f0 16 00 14 	mcall	r6[80]
8000f002:	18 98       	mov	r8,r12
8000f004:	5c 88       	casts.h	r8
8000f006:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000f00a:	30 4c       	mov	r12,4
8000f00c:	f0 16 00 1b 	mcall	r6[108]
8000f010:	18 98       	mov	r8,r12
8000f012:	10 9c       	mov	r12,r8
8000f014:	f0 16 00 1a 	mcall	r6[104]
8000f018:	30 08       	mov	r8,0
8000f01a:	e0 69 40 00 	mov	r9,16384
8000f01e:	ea 19 40 8f 	orh	r9,0x408f
8000f022:	f0 16 00 03 	mcall	r6[12]
8000f026:	14 98       	mov	r8,r10
8000f028:	16 99       	mov	r9,r11
8000f02a:	10 9a       	mov	r10,r8
8000f02c:	12 9b       	mov	r11,r9
8000f02e:	30 08       	mov	r8,0
8000f030:	e0 69 60 00 	mov	r9,24576
8000f034:	ea 19 40 7b 	orh	r9,0x407b
8000f038:	f0 16 00 0c 	mcall	r6[48]
8000f03c:	14 98       	mov	r8,r10
8000f03e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f040:	10 9a       	mov	r10,r8
8000f042:	12 9b       	mov	r11,r9
8000f044:	f0 16 00 14 	mcall	r6[80]
8000f048:	18 98       	mov	r8,r12
8000f04a:	5c 88       	casts.h	r8
8000f04c:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000f04e:	30 3c       	mov	r12,3
8000f050:	f0 16 00 1b 	mcall	r6[108]
8000f054:	18 98       	mov	r8,r12
8000f056:	10 9c       	mov	r12,r8
8000f058:	f0 16 00 1a 	mcall	r6[104]
8000f05c:	30 08       	mov	r8,0
8000f05e:	e0 69 40 00 	mov	r9,16384
8000f062:	ea 19 40 8f 	orh	r9,0x408f
8000f066:	f0 16 00 03 	mcall	r6[12]
8000f06a:	14 98       	mov	r8,r10
8000f06c:	16 99       	mov	r9,r11
8000f06e:	10 9a       	mov	r10,r8
8000f070:	12 9b       	mov	r11,r9
8000f072:	30 08       	mov	r8,0
8000f074:	e0 69 60 00 	mov	r9,24576
8000f078:	ea 19 40 7b 	orh	r9,0x407b
8000f07c:	f0 16 00 0c 	mcall	r6[48]
8000f080:	14 98       	mov	r8,r10
8000f082:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f084:	10 9a       	mov	r10,r8
8000f086:	12 9b       	mov	r11,r9
8000f088:	f0 16 00 14 	mcall	r6[80]
8000f08c:	18 98       	mov	r8,r12
8000f08e:	5c 88       	casts.h	r8
8000f090:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000f092:	30 2c       	mov	r12,2
8000f094:	f0 16 00 1b 	mcall	r6[108]
8000f098:	18 98       	mov	r8,r12
8000f09a:	10 9c       	mov	r12,r8
8000f09c:	f0 16 00 1a 	mcall	r6[104]
8000f0a0:	30 08       	mov	r8,0
8000f0a2:	e0 69 40 00 	mov	r9,16384
8000f0a6:	ea 19 40 8f 	orh	r9,0x408f
8000f0aa:	f0 16 00 03 	mcall	r6[12]
8000f0ae:	14 98       	mov	r8,r10
8000f0b0:	16 99       	mov	r9,r11
8000f0b2:	10 9a       	mov	r10,r8
8000f0b4:	12 9b       	mov	r11,r9
8000f0b6:	30 08       	mov	r8,0
8000f0b8:	e0 69 60 00 	mov	r9,24576
8000f0bc:	ea 19 40 7b 	orh	r9,0x407b
8000f0c0:	f0 16 00 0c 	mcall	r6[48]
8000f0c4:	14 98       	mov	r8,r10
8000f0c6:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f0c8:	10 9a       	mov	r10,r8
8000f0ca:	12 9b       	mov	r11,r9
8000f0cc:	f0 16 00 14 	mcall	r6[80]
8000f0d0:	18 98       	mov	r8,r12
8000f0d2:	5c 88       	casts.h	r8
8000f0d4:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000f0d6:	30 1c       	mov	r12,1
8000f0d8:	f0 16 00 1b 	mcall	r6[108]
8000f0dc:	18 98       	mov	r8,r12
8000f0de:	10 9c       	mov	r12,r8
8000f0e0:	f0 16 00 1a 	mcall	r6[104]
8000f0e4:	30 08       	mov	r8,0
8000f0e6:	e0 69 40 00 	mov	r9,16384
8000f0ea:	ea 19 40 8f 	orh	r9,0x408f
8000f0ee:	f0 16 00 03 	mcall	r6[12]
8000f0f2:	14 98       	mov	r8,r10
8000f0f4:	16 99       	mov	r9,r11
8000f0f6:	10 9a       	mov	r10,r8
8000f0f8:	12 9b       	mov	r11,r9
8000f0fa:	30 08       	mov	r8,0
8000f0fc:	e0 69 60 00 	mov	r9,24576
8000f100:	ea 19 40 7b 	orh	r9,0x407b
8000f104:	f0 16 00 0c 	mcall	r6[48]
8000f108:	14 98       	mov	r8,r10
8000f10a:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f10c:	10 9a       	mov	r10,r8
8000f10e:	12 9b       	mov	r11,r9
8000f110:	f0 16 00 14 	mcall	r6[80]
8000f114:	18 98       	mov	r8,r12
8000f116:	5c 88       	casts.h	r8
8000f118:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000f11a:	30 0c       	mov	r12,0
8000f11c:	f0 16 00 1b 	mcall	r6[108]
8000f120:	18 98       	mov	r8,r12
8000f122:	10 9c       	mov	r12,r8
8000f124:	f0 16 00 1a 	mcall	r6[104]
8000f128:	30 08       	mov	r8,0
8000f12a:	e0 69 40 00 	mov	r9,16384
8000f12e:	ea 19 40 8f 	orh	r9,0x408f
8000f132:	f0 16 00 03 	mcall	r6[12]
8000f136:	14 98       	mov	r8,r10
8000f138:	16 99       	mov	r9,r11
8000f13a:	10 9a       	mov	r10,r8
8000f13c:	12 9b       	mov	r11,r9
8000f13e:	30 08       	mov	r8,0
8000f140:	e0 69 60 00 	mov	r9,24576
8000f144:	ea 19 40 7b 	orh	r9,0x407b
8000f148:	f0 16 00 0c 	mcall	r6[48]
8000f14c:	14 98       	mov	r8,r10
8000f14e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f150:	10 9a       	mov	r10,r8
8000f152:	12 9b       	mov	r11,r9
8000f154:	f0 16 00 14 	mcall	r6[80]
8000f158:	18 98       	mov	r8,r12
8000f15a:	5c 88       	casts.h	r8
8000f15c:	10 95       	mov	r5,r8
8000f15e:	f0 16 00 0f 	mcall	r6[60]
8000f162:	18 9b       	mov	r11,r12
8000f164:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f168:	1a d8       	st.w	--sp,r8
8000f16a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f16e:	1a d8       	st.w	--sp,r8
8000f170:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f174:	1a d8       	st.w	--sp,r8
8000f176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f17a:	1a d8       	st.w	--sp,r8
8000f17c:	1a d0       	st.w	--sp,r0
8000f17e:	1a d1       	st.w	--sp,r1
8000f180:	1a d2       	st.w	--sp,r2
8000f182:	06 98       	mov	r8,r3
8000f184:	0a 99       	mov	r9,r5
8000f186:	30 1a       	mov	r10,1
8000f188:	30 0c       	mov	r12,0
8000f18a:	fe b0 f2 f5 	rcall	8000d774 <mavlink_msg_rc_channels_scaled_send>
8000f18e:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000f190:	ec f8 00 00 	ld.w	r8,r6[0]
8000f194:	70 08       	ld.w	r8,r8[0x0]
8000f196:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8000f19a:	10 95       	mov	r5,r8
8000f19c:	f0 16 00 0f 	mcall	r6[60]
8000f1a0:	18 98       	mov	r8,r12
8000f1a2:	0a 99       	mov	r9,r5
8000f1a4:	fe ca 02 98 	sub	r10,pc,664
8000f1a8:	10 9b       	mov	r11,r8
8000f1aa:	30 0c       	mov	r12,0
8000f1ac:	fe b0 f6 ce 	rcall	8000df48 <mavlink_msg_named_value_int_send>
}
8000f1b0:	2f cd       	sub	sp,-16
8000f1b2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f1b6:	00 00       	add	r0,r0
8000f1b8:	80 00       	ld.sh	r0,r0[0x0]
8000f1ba:	ed ac 72 6f 	stcm.w	cp3,--r12,cr0-cr3,cr5-cr6
8000f1be:	6c 6c       	ld.w	r12,r6[0x18]
8000f1c0:	74 6f       	ld.w	pc,r10[0x18]
8000f1c2:	72 71       	ld.w	r1,r9[0x1c]
8000f1c4:	75 65       	ld.w	r5,r10[0x58]
8000f1c6:	00 00       	add	r0,r0
8000f1c8:	70 69       	ld.w	r9,r8[0x18]
8000f1ca:	74 63       	ld.w	r3,r10[0x18]
8000f1cc:	68 74       	ld.w	r4,r4[0x1c]
8000f1ce:	6f 72       	ld.w	r2,r7[0x5c]
8000f1d0:	71 75       	ld.w	r5,r8[0x5c]
8000f1d2:	65 00       	ld.w	r0,r2[0x40]
8000f1d4:	79 61       	ld.w	r1,r12[0x58]
8000f1d6:	77 74       	ld.w	r4,r11[0x5c]
8000f1d8:	6f 72       	ld.w	r2,r7[0x5c]
8000f1da:	71 75       	ld.w	r5,r8[0x5c]
8000f1dc:	65 00       	ld.w	r0,r2[0x40]
8000f1de:	00 00       	add	r0,r0
8000f1e0:	74 68       	ld.w	r8,r10[0x18]
8000f1e2:	72 75       	ld.w	r5,r9[0x1c]
8000f1e4:	73 74       	ld.w	r4,r9[0x5c]
8000f1e6:	00 00       	add	r0,r0
8000f1e8:	72 70       	ld.w	r0,r9[0x1c]
8000f1ea:	6d 31       	ld.w	r1,r6[0x4c]
8000f1ec:	00 00       	add	r0,r0
8000f1ee:	00 00       	add	r0,r0
8000f1f0:	72 70       	ld.w	r0,r9[0x1c]
8000f1f2:	6d 32       	ld.w	r2,r6[0x4c]
8000f1f4:	00 00       	add	r0,r0
8000f1f6:	00 00       	add	r0,r0
8000f1f8:	72 70       	ld.w	r0,r9[0x1c]
8000f1fa:	6d 33       	ld.w	r3,r6[0x4c]
8000f1fc:	00 00       	add	r0,r0
8000f1fe:	00 00       	add	r0,r0
8000f200:	72 70       	ld.w	r0,r9[0x1c]
8000f202:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000f206 <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000f206:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f20a:	1a 97       	mov	r7,sp
8000f20c:	21 6d       	sub	sp,88
8000f20e:	fe f6 03 66 	ld.w	r6,pc[870]
8000f212:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000f214:	ec f8 00 00 	ld.w	r8,r6[0]
8000f218:	70 09       	ld.w	r9,r8[0x0]
8000f21a:	ee ca 00 0c 	sub	r10,r7,12
8000f21e:	20 4d       	sub	sp,16
8000f220:	1a 98       	mov	r8,sp
8000f222:	f2 c9 f4 10 	sub	r9,r9,-3056
8000f226:	20 08       	sub	r8,0
8000f228:	20 09       	sub	r9,0
8000f22a:	72 0b       	ld.w	r11,r9[0x0]
8000f22c:	91 0b       	st.w	r8[0x0],r11
8000f22e:	72 1b       	ld.w	r11,r9[0x4]
8000f230:	91 1b       	st.w	r8[0x4],r11
8000f232:	72 2b       	ld.w	r11,r9[0x8]
8000f234:	91 2b       	st.w	r8[0x8],r11
8000f236:	72 39       	ld.w	r9,r9[0xc]
8000f238:	91 39       	st.w	r8[0xc],r9
8000f23a:	14 9c       	mov	r12,r10
8000f23c:	f0 16 00 6d 	mcall	r6[436]
8000f240:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000f242:	ec f8 00 00 	ld.w	r8,r6[0]
8000f246:	70 08       	ld.w	r8,r8[0x0]
8000f248:	ee cc 00 28 	sub	r12,r7,40
8000f24c:	20 cd       	sub	sp,48
8000f24e:	1a 99       	mov	r9,sp
8000f250:	12 9b       	mov	r11,r9
8000f252:	f0 ca f3 44 	sub	r10,r8,-3260
8000f256:	f6 c8 00 00 	sub	r8,r11,0
8000f25a:	f4 c9 00 00 	sub	r9,r10,0
8000f25e:	72 0e       	ld.w	lr,r9[0x0]
8000f260:	91 0e       	st.w	r8[0x0],lr
8000f262:	72 1e       	ld.w	lr,r9[0x4]
8000f264:	91 1e       	st.w	r8[0x4],lr
8000f266:	72 2e       	ld.w	lr,r9[0x8]
8000f268:	91 2e       	st.w	r8[0x8],lr
8000f26a:	72 39       	ld.w	r9,r9[0xc]
8000f26c:	91 39       	st.w	r8[0xc],r9
8000f26e:	f6 c8 ff f0 	sub	r8,r11,-16
8000f272:	f4 c9 ff f0 	sub	r9,r10,-16
8000f276:	72 0e       	ld.w	lr,r9[0x0]
8000f278:	91 0e       	st.w	r8[0x0],lr
8000f27a:	72 1e       	ld.w	lr,r9[0x4]
8000f27c:	91 1e       	st.w	r8[0x4],lr
8000f27e:	72 2e       	ld.w	lr,r9[0x8]
8000f280:	91 2e       	st.w	r8[0x8],lr
8000f282:	72 39       	ld.w	r9,r9[0xc]
8000f284:	91 39       	st.w	r8[0xc],r9
8000f286:	f6 c8 ff e0 	sub	r8,r11,-32
8000f28a:	f4 c9 ff e0 	sub	r9,r10,-32
8000f28e:	72 0a       	ld.w	r10,r9[0x0]
8000f290:	91 0a       	st.w	r8[0x0],r10
8000f292:	72 1a       	ld.w	r10,r9[0x4]
8000f294:	91 1a       	st.w	r8[0x4],r10
8000f296:	72 2a       	ld.w	r10,r9[0x8]
8000f298:	91 2a       	st.w	r8[0x8],r10
8000f29a:	72 39       	ld.w	r9,r9[0xc]
8000f29c:	91 39       	st.w	r8[0xc],r9
8000f29e:	f0 16 00 88 	mcall	r6[544]
8000f2a2:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f2a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2a8:	70 08       	ld.w	r8,r8[0x0]
8000f2aa:	f0 f9 0b c8 	ld.w	r9,r8[3016]
8000f2ae:	fc 18 44 7a 	movh	r8,0x447a
8000f2b2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f2b6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f2ba:	5c 88       	casts.h	r8
8000f2bc:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f2c0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2c4:	70 08       	ld.w	r8,r8[0x0]
8000f2c6:	f0 f9 0b c4 	ld.w	r9,r8[3012]
8000f2ca:	fc 18 44 7a 	movh	r8,0x447a
8000f2ce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f2d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f2d6:	5c 88       	casts.h	r8
8000f2d8:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f2dc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2e0:	70 08       	ld.w	r8,r8[0x0]
8000f2e2:	f0 f9 0b c0 	ld.w	r9,r8[3008]
8000f2e6:	fc 18 44 7a 	movh	r8,0x447a
8000f2ea:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f2ee:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f2f2:	5c 88       	casts.h	r8
8000f2f4:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f2f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2fc:	70 08       	ld.w	r8,r8[0x0]
8000f2fe:	f0 f9 0b e0 	ld.w	r9,r8[3040]
8000f302:	fc 18 42 c8 	movh	r8,0x42c8
8000f306:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f30a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f30e:	5c 88       	casts.h	r8
8000f310:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f314:	ec f8 00 00 	ld.w	r8,r6[0]
8000f318:	70 08       	ld.w	r8,r8[0x0]
8000f31a:	f0 f9 0b dc 	ld.w	r9,r8[3036]
8000f31e:	fc 18 42 c8 	movh	r8,0x42c8
8000f322:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f326:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f32a:	5c 88       	casts.h	r8
8000f32c:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f330:	ec f8 00 00 	ld.w	r8,r6[0]
8000f334:	70 08       	ld.w	r8,r8[0x0]
8000f336:	f0 f9 0b d8 	ld.w	r9,r8[3032]
8000f33a:	fc 18 42 c8 	movh	r8,0x42c8
8000f33e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f342:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f346:	5c 88       	casts.h	r8
8000f348:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000f34c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000f350:	10 9c       	mov	r12,r8
8000f352:	f0 16 00 02 	mcall	r6[8]
8000f356:	30 08       	mov	r8,0
8000f358:	e0 69 40 00 	mov	r9,16384
8000f35c:	ea 19 40 8f 	orh	r9,0x408f
8000f360:	f0 16 00 03 	mcall	r6[12]
8000f364:	14 98       	mov	r8,r10
8000f366:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f368:	10 9a       	mov	r10,r8
8000f36a:	12 9b       	mov	r11,r9
8000f36c:	f0 16 00 14 	mcall	r6[80]
8000f370:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000f374:	ee ea ff d8 	ld.d	r10,r7[-40]
8000f378:	30 08       	mov	r8,0
8000f37a:	e0 69 12 d0 	mov	r9,4816
8000f37e:	ea 19 41 63 	orh	r9,0x4163
8000f382:	f0 16 00 03 	mcall	r6[12]
8000f386:	14 98       	mov	r8,r10
8000f388:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f38a:	10 9a       	mov	r10,r8
8000f38c:	12 9b       	mov	r11,r9
8000f38e:	f0 16 00 14 	mcall	r6[80]
8000f392:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000f396:	ee ea ff e0 	ld.d	r10,r7[-32]
8000f39a:	30 08       	mov	r8,0
8000f39c:	e0 69 12 d0 	mov	r9,4816
8000f3a0:	ea 19 41 63 	orh	r9,0x4163
8000f3a4:	f0 16 00 03 	mcall	r6[12]
8000f3a8:	14 98       	mov	r8,r10
8000f3aa:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f3ac:	10 9a       	mov	r10,r8
8000f3ae:	12 9b       	mov	r11,r9
8000f3b0:	f0 16 00 14 	mcall	r6[80]
8000f3b4:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000f3b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3bc:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f3be:	f0 f8 0b bc 	ld.w	r8,r8[3004]
8000f3c2:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000f3c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3ca:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f3cc:	f0 f8 0b b8 	ld.w	r8,r8[3000]
8000f3d0:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000f3d4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3d8:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f3da:	f0 f8 0b b4 	ld.w	r8,r8[2996]
8000f3de:	ef 48 ff d4 	st.w	r7[-44],r8
8000f3e2:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000f3e6:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000f3ea:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000f3ee:	f0 16 00 29 	mcall	r6[164]
8000f3f2:	18 98       	mov	r8,r12
8000f3f4:	10 92       	mov	r2,r8
8000f3f6:	30 03       	mov	r3,0
8000f3f8:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000f3fc:	1a d8       	st.w	--sp,r8
8000f3fe:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000f402:	1a d8       	st.w	--sp,r8
8000f404:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000f408:	1a d8       	st.w	--sp,r8
8000f40a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000f40e:	1a d8       	st.w	--sp,r8
8000f410:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000f414:	1a d8       	st.w	--sp,r8
8000f416:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000f41a:	1a d8       	st.w	--sp,r8
8000f41c:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000f420:	1a d8       	st.w	--sp,r8
8000f422:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000f426:	1a d8       	st.w	--sp,r8
8000f428:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000f42c:	1a d8       	st.w	--sp,r8
8000f42e:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000f432:	1a d8       	st.w	--sp,r8
8000f434:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000f438:	1a d8       	st.w	--sp,r8
8000f43a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000f43e:	1a d8       	st.w	--sp,r8
8000f440:	1a d0       	st.w	--sp,r0
8000f442:	02 98       	mov	r8,r1
8000f444:	0a 99       	mov	r9,r5
8000f446:	04 9a       	mov	r10,r2
8000f448:	06 9b       	mov	r11,r3
8000f44a:	30 0c       	mov	r12,0
8000f44c:	fe b0 f4 86 	rcall	8000dd58 <mavlink_msg_hil_state_send>
8000f450:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000f452:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000f456:	ec f8 00 00 	ld.w	r8,r6[0]
8000f45a:	70 08       	ld.w	r8,r8[0x0]
8000f45c:	f0 f8 0b a8 	ld.w	r8,r8[2984]
8000f460:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000f464:	f0 16 00 0f 	mcall	r6[60]
8000f468:	18 98       	mov	r8,r12
8000f46a:	0a 99       	mov	r9,r5
8000f46c:	fe ca 02 b0 	sub	r10,pc,688
8000f470:	10 9b       	mov	r11,r8
8000f472:	30 0c       	mov	r12,0
8000f474:	fe b0 f5 6a 	rcall	8000df48 <mavlink_msg_named_value_int_send>
8000f478:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000f47c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f480:	70 08       	ld.w	r8,r8[0x0]
8000f482:	f0 f8 0b ac 	ld.w	r8,r8[2988]
8000f486:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000f48a:	f0 16 00 0f 	mcall	r6[60]
8000f48e:	18 98       	mov	r8,r12
8000f490:	0a 99       	mov	r9,r5
8000f492:	fe ca 02 ca 	sub	r10,pc,714
8000f496:	10 9b       	mov	r11,r8
8000f498:	30 0c       	mov	r12,0
8000f49a:	fe b0 f5 57 	rcall	8000df48 <mavlink_msg_named_value_int_send>
8000f49e:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000f4a2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4a6:	70 08       	ld.w	r8,r8[0x0]
8000f4a8:	f0 f8 0b b0 	ld.w	r8,r8[2992]
8000f4ac:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000f4b0:	f0 16 00 0f 	mcall	r6[60]
8000f4b4:	18 98       	mov	r8,r12
8000f4b6:	0a 99       	mov	r9,r5
8000f4b8:	fe ca 02 e4 	sub	r10,pc,740
8000f4bc:	10 9b       	mov	r11,r8
8000f4be:	30 0c       	mov	r12,0
8000f4c0:	fe b0 f5 44 	rcall	8000df48 <mavlink_msg_named_value_int_send>
8000f4c4:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000f4c8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4cc:	70 08       	ld.w	r8,r8[0x0]
8000f4ce:	f0 f5 0b c8 	ld.w	r5,r8[3016]
8000f4d2:	f0 16 00 0f 	mcall	r6[60]
8000f4d6:	18 98       	mov	r8,r12
8000f4d8:	0a 99       	mov	r9,r5
8000f4da:	fe ca 02 fa 	sub	r10,pc,762
8000f4de:	10 9b       	mov	r11,r8
8000f4e0:	30 0c       	mov	r12,0
8000f4e2:	fe b0 f4 fb 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
8000f4e6:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000f4ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4ee:	70 08       	ld.w	r8,r8[0x0]
8000f4f0:	f0 f5 0c ec 	ld.w	r5,r8[3308]
8000f4f4:	f0 16 00 0f 	mcall	r6[60]
8000f4f8:	18 98       	mov	r8,r12
8000f4fa:	0a 99       	mov	r9,r5
8000f4fc:	fe ca 03 14 	sub	r10,pc,788
8000f500:	10 9b       	mov	r11,r8
8000f502:	30 0c       	mov	r12,0
8000f504:	fe b0 f4 ea 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
8000f508:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000f50c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f510:	70 08       	ld.w	r8,r8[0x0]
8000f512:	f0 f5 0c f0 	ld.w	r5,r8[3312]
8000f516:	f0 16 00 0f 	mcall	r6[60]
8000f51a:	18 98       	mov	r8,r12
8000f51c:	0a 99       	mov	r9,r5
8000f51e:	fe ca 03 2e 	sub	r10,pc,814
8000f522:	10 9b       	mov	r11,r8
8000f524:	30 0c       	mov	r12,0
8000f526:	fe b0 f4 d9 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
8000f52a:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000f52e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f532:	70 08       	ld.w	r8,r8[0x0]
8000f534:	f0 f5 0c f4 	ld.w	r5,r8[3316]
8000f538:	f0 16 00 0f 	mcall	r6[60]
8000f53c:	18 98       	mov	r8,r12
8000f53e:	0a 99       	mov	r9,r5
8000f540:	fe ca 03 48 	sub	r10,pc,840
8000f544:	10 9b       	mov	r11,r8
8000f546:	30 0c       	mov	r12,0
8000f548:	fe b0 f4 c8 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
8000f54c:	f0 16 00 3b 	mcall	r6[236]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000f550:	ec f8 00 00 	ld.w	r8,r6[0]
8000f554:	70 08       	ld.w	r8,r8[0x0]
8000f556:	f0 f5 0c f8 	ld.w	r5,r8[3320]
8000f55a:	f0 16 00 0f 	mcall	r6[60]
8000f55e:	18 98       	mov	r8,r12
8000f560:	0a 99       	mov	r9,r5
8000f562:	fe ca 03 62 	sub	r10,pc,866
8000f566:	10 9b       	mov	r11,r8
8000f568:	30 0c       	mov	r12,0
8000f56a:	fe b0 f4 b7 	rcall	8000ded8 <mavlink_msg_named_value_float_send>

	
}
8000f56e:	2e ad       	sub	sp,-88
8000f570:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f574:	80 00       	ld.sh	r0,r0[0x0]
8000f576:	f0 96 73 74 	brmi	7fe3dc5e <_estack+0x7fe2dc5e>
8000f57a:	61 62       	ld.w	r2,r0[0x58]
8000f57c:	41 76       	lddsp	r6,sp[0x5c]
8000f57e:	67 44       	ld.w	r4,r3[0x50]
8000f580:	65 6c       	ld.w	r12,r2[0x58]
8000f582:	61 79       	ld.w	r9,r0[0x5c]
8000f584:	00 00       	add	r0,r0
8000f586:	00 00       	add	r0,r0
8000f588:	73 74       	ld.w	r4,r9[0x5c]
8000f58a:	61 62       	ld.w	r2,r0[0x58]
8000f58c:	44 65       	lddsp	r5,sp[0x118]
8000f58e:	6c 61       	ld.w	r1,r6[0x18]
8000f590:	79 56       	ld.w	r6,r12[0x54]
8000f592:	61 72       	ld.w	r2,r0[0x5c]
8000f594:	00 00       	add	r0,r0
8000f596:	00 00       	add	r0,r0
8000f598:	73 74       	ld.w	r4,r9[0x5c]
8000f59a:	61 62       	ld.w	r2,r0[0x58]
8000f59c:	4d 61       	lddpc	r1,8000f6f4 <send_rt_stats+0x110>
8000f59e:	78 44       	ld.w	r4,r12[0x10]
8000f5a0:	65 6c       	ld.w	r12,r2[0x58]
8000f5a2:	61 79       	ld.w	r9,r0[0x5c]
8000f5a4:	00 00       	add	r0,r0
8000f5a6:	00 00       	add	r0,r0
8000f5a8:	73 74       	ld.w	r4,r9[0x5c]
8000f5aa:	61 62       	ld.w	r2,r0[0x58]
8000f5ac:	52 54       	stdsp	sp[0x94],r4
8000f5ae:	76 69       	ld.w	r9,r11[0x18]
8000f5b0:	6f 00       	ld.w	r0,r7[0x40]
8000f5b2:	00 00       	add	r0,r0
8000f5b4:	62 61       	ld.w	r1,r1[0x18]
8000f5b6:	72 6f       	ld.w	pc,r9[0x18]
8000f5b8:	41 76       	lddsp	r6,sp[0x5c]
8000f5ba:	67 44       	ld.w	r4,r3[0x50]
8000f5bc:	65 6c       	ld.w	r12,r2[0x58]
8000f5be:	61 79       	ld.w	r9,r0[0x5c]
8000f5c0:	00 00       	add	r0,r0
8000f5c2:	00 00       	add	r0,r0
8000f5c4:	69 6d       	ld.w	sp,r4[0x58]
8000f5c6:	75 45       	ld.w	r5,r10[0x50]
8000f5c8:	78 54       	ld.w	r4,r12[0x14]
8000f5ca:	69 6d       	ld.w	sp,r4[0x58]
8000f5cc:	65 00       	ld.w	r0,r2[0x40]
8000f5ce:	00 00       	add	r0,r0
8000f5d0:	6e 61       	ld.w	r1,r7[0x18]
8000f5d2:	76 45       	ld.w	r5,r11[0x10]
8000f5d4:	78 54       	ld.w	r4,r12[0x14]
8000f5d6:	69 6d       	ld.w	sp,r4[0x58]
8000f5d8:	65 00       	ld.w	r0,r2[0x40]
8000f5da:	00 00       	add	r0,r0
8000f5dc:	69 6d       	ld.w	sp,r4[0x58]
8000f5de:	75 5f       	ld.w	pc,r10[0x54]
8000f5e0:	64 74       	ld.w	r4,r2[0x1c]
	...

8000f5e4 <send_rt_stats>:

task_return_t send_rt_stats() {
8000f5e4:	eb cd 40 e0 	pushm	r5-r7,lr
8000f5e8:	1a 97       	mov	r7,sp
8000f5ea:	20 1d       	sub	sp,4
8000f5ec:	4c e6       	lddpc	r6,8000f724 <send_rt_stats+0x140>
8000f5ee:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000f5f0:	f0 16 01 03 	mcall	r6[1036]
8000f5f4:	18 98       	mov	r8,r12
8000f5f6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000f5fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f5fe:	70 c8       	ld.w	r8,r8[0x30]
8000f600:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f604:	f0 16 00 0f 	mcall	r6[60]
8000f608:	18 98       	mov	r8,r12
8000f60a:	0a 99       	mov	r9,r5
8000f60c:	fe ca 00 94 	sub	r10,pc,148
8000f610:	10 9b       	mov	r11,r8
8000f612:	30 0c       	mov	r12,0
8000f614:	fe b0 f4 62 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000f618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f61c:	70 d8       	ld.w	r8,r8[0x34]
8000f61e:	10 9c       	mov	r12,r8
8000f620:	f0 16 00 51 	mcall	r6[324]
8000f624:	14 98       	mov	r8,r10
8000f626:	16 99       	mov	r9,r11
8000f628:	10 9a       	mov	r10,r8
8000f62a:	12 9b       	mov	r11,r9
8000f62c:	f0 16 00 6b 	mcall	r6[428]
8000f630:	14 98       	mov	r8,r10
8000f632:	16 99       	mov	r9,r11
8000f634:	10 9a       	mov	r10,r8
8000f636:	12 9b       	mov	r11,r9
8000f638:	f0 16 00 08 	mcall	r6[32]
8000f63c:	18 95       	mov	r5,r12
8000f63e:	f0 16 00 0f 	mcall	r6[60]
8000f642:	18 98       	mov	r8,r12
8000f644:	0a 99       	mov	r9,r5
8000f646:	fe ca 00 be 	sub	r10,pc,190
8000f64a:	10 9b       	mov	r11,r8
8000f64c:	30 0c       	mov	r12,0
8000f64e:	fe b0 f4 45 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000f652:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f656:	70 b8       	ld.w	r8,r8[0x2c]
8000f658:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f65c:	f0 16 00 0f 	mcall	r6[60]
8000f660:	18 98       	mov	r8,r12
8000f662:	0a 99       	mov	r9,r5
8000f664:	fe ca 00 cc 	sub	r10,pc,204
8000f668:	10 9b       	mov	r11,r8
8000f66a:	30 0c       	mov	r12,0
8000f66c:	fe b0 f4 36 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000f670:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f674:	70 e8       	ld.w	r8,r8[0x38]
8000f676:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f67a:	f0 16 00 0f 	mcall	r6[60]
8000f67e:	18 98       	mov	r8,r12
8000f680:	0a 99       	mov	r9,r5
8000f682:	fe ca 00 da 	sub	r10,pc,218
8000f686:	10 9b       	mov	r11,r8
8000f688:	30 0c       	mov	r12,0
8000f68a:	fe b0 f4 27 	rcall	8000ded8 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000f68e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f692:	71 88       	ld.w	r8,r8[0x60]
8000f694:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f698:	f0 16 00 0f 	mcall	r6[60]
8000f69c:	18 98       	mov	r8,r12
8000f69e:	0a 99       	mov	r9,r5
8000f6a0:	fe ca 00 ec 	sub	r10,pc,236
8000f6a4:	10 9b       	mov	r11,r8
8000f6a6:	30 0c       	mov	r12,0
8000f6a8:	fe b0 f4 18 	rcall	8000ded8 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000f6ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6b0:	70 a8       	ld.w	r8,r8[0x28]
8000f6b2:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f6b6:	f0 16 00 0f 	mcall	r6[60]
8000f6ba:	18 98       	mov	r8,r12
8000f6bc:	0a 99       	mov	r9,r5
8000f6be:	fe ca 00 fa 	sub	r10,pc,250
8000f6c2:	10 9b       	mov	r11,r8
8000f6c4:	30 0c       	mov	r12,0
8000f6c6:	fe b0 f4 09 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000f6ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f6ce:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000f6d2:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000f6d6:	f0 16 00 0f 	mcall	r6[60]
8000f6da:	18 98       	mov	r8,r12
8000f6dc:	0a 99       	mov	r9,r5
8000f6de:	fe ca 01 0e 	sub	r10,pc,270
8000f6e2:	10 9b       	mov	r11,r8
8000f6e4:	30 0c       	mov	r12,0
8000f6e6:	fe b0 f3 f9 	rcall	8000ded8 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000f6ea:	f0 16 00 32 	mcall	r6[200]
8000f6ee:	18 98       	mov	r8,r12
8000f6f0:	f0 f5 01 40 	ld.w	r5,r8[320]
8000f6f4:	f0 16 00 0f 	mcall	r6[60]
8000f6f8:	18 98       	mov	r8,r12
8000f6fa:	0a 99       	mov	r9,r5
8000f6fc:	fe ca 01 20 	sub	r10,pc,288
8000f700:	10 9b       	mov	r11,r8
8000f702:	30 0c       	mov	r12,0
8000f704:	fe b0 f3 ea 	rcall	8000ded8 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000f708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f70c:	30 09       	mov	r9,0
8000f70e:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
8000f712:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f716:	30 09       	mov	r9,0
8000f718:	f1 49 00 5c 	st.w	r8[92],r9

}
8000f71c:	2f fd       	sub	sp,-4
8000f71e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f722:	00 00       	add	r0,r0
8000f724:	80 00       	ld.sh	r0,r0[0x0]
8000f726:	f4 72 53 69 	mov	r2,-699543
8000f72a:	6d 5f       	ld.w	pc,r6[0x54]
8000f72c:	6d 6f       	ld.w	pc,r6[0x58]
8000f72e:	64 65       	ld.w	r5,r2[0x18]
8000f730:	00 00       	add	r0,r0
8000f732:	00 00       	add	r0,r0
8000f734:	52 6f       	stdsp	sp[0x98],pc
8000f736:	6c 6c       	ld.w	r12,r6[0x18]
8000f738:	52 50       	stdsp	sp[0x94],r0
8000f73a:	69 64       	ld.w	r4,r4[0x58]
8000f73c:	5f 50       	srlt	r0
8000f73e:	5f 47       	srge	r7
8000f740:	00 00       	add	r0,r0
8000f742:	00 00       	add	r0,r0
8000f744:	52 6f       	stdsp	sp[0x98],pc
8000f746:	6c 6c       	ld.w	r12,r6[0x18]
8000f748:	52 50       	stdsp	sp[0x94],r0
8000f74a:	69 64       	ld.w	r4,r4[0x58]
8000f74c:	5f 49       	srge	r9
8000f74e:	5f 50       	srlt	r0
8000f750:	73 74       	ld.w	r4,r9[0x5c]
8000f752:	47 00       	lddsp	r0,sp[0x1c0]
8000f754:	52 6f       	stdsp	sp[0x98],pc
8000f756:	6c 6c       	ld.w	r12,r6[0x18]
8000f758:	52 50       	stdsp	sp[0x94],r0
8000f75a:	69 64       	ld.w	r4,r4[0x58]
8000f75c:	5f 49       	srge	r9
8000f75e:	5f 50       	srlt	r0
8000f760:	72 65       	ld.w	r5,r9[0x18]
8000f762:	47 00       	lddsp	r0,sp[0x1c0]
8000f764:	52 6f       	stdsp	sp[0x98],pc
8000f766:	6c 6c       	ld.w	r12,r6[0x18]
8000f768:	52 50       	stdsp	sp[0x94],r0
8000f76a:	69 64       	ld.w	r4,r4[0x58]
8000f76c:	5f 44       	srge	r4
8000f76e:	5f 47       	srge	r7
8000f770:	61 69       	ld.w	r9,r0[0x58]
8000f772:	6e 00       	ld.w	r0,r7[0x0]
8000f774:	52 6f       	stdsp	sp[0x98],pc
8000f776:	6c 6c       	ld.w	r12,r6[0x18]
8000f778:	41 50       	lddsp	r0,sp[0x54]
8000f77a:	69 64       	ld.w	r4,r4[0x58]
8000f77c:	5f 50       	srlt	r0
8000f77e:	5f 47       	srge	r7
8000f780:	00 00       	add	r0,r0
8000f782:	00 00       	add	r0,r0
8000f784:	52 6f       	stdsp	sp[0x98],pc
8000f786:	6c 6c       	ld.w	r12,r6[0x18]
8000f788:	41 50       	lddsp	r0,sp[0x54]
8000f78a:	69 64       	ld.w	r4,r4[0x58]
8000f78c:	5f 49       	srge	r9
8000f78e:	5f 50       	srlt	r0
8000f790:	73 74       	ld.w	r4,r9[0x5c]
8000f792:	47 00       	lddsp	r0,sp[0x1c0]
8000f794:	52 6f       	stdsp	sp[0x98],pc
8000f796:	6c 6c       	ld.w	r12,r6[0x18]
8000f798:	41 50       	lddsp	r0,sp[0x54]
8000f79a:	69 64       	ld.w	r4,r4[0x58]
8000f79c:	5f 49       	srge	r9
8000f79e:	5f 50       	srlt	r0
8000f7a0:	72 65       	ld.w	r5,r9[0x18]
8000f7a2:	47 00       	lddsp	r0,sp[0x1c0]
8000f7a4:	52 6f       	stdsp	sp[0x98],pc
8000f7a6:	6c 6c       	ld.w	r12,r6[0x18]
8000f7a8:	41 50       	lddsp	r0,sp[0x54]
8000f7aa:	69 64       	ld.w	r4,r4[0x58]
8000f7ac:	5f 44       	srge	r4
8000f7ae:	5f 47       	srge	r7
8000f7b0:	61 69       	ld.w	r9,r0[0x58]
8000f7b2:	6e 00       	ld.w	r0,r7[0x0]
8000f7b4:	50 69       	stdsp	sp[0x18],r9
8000f7b6:	74 63       	ld.w	r3,r10[0x18]
8000f7b8:	68 52       	ld.w	r2,r4[0x14]
8000f7ba:	50 69       	stdsp	sp[0x18],r9
8000f7bc:	64 5f       	ld.w	pc,r2[0x14]
8000f7be:	50 5f       	stdsp	sp[0x14],pc
8000f7c0:	47 00       	lddsp	r0,sp[0x1c0]
8000f7c2:	00 00       	add	r0,r0
8000f7c4:	50 69       	stdsp	sp[0x18],r9
8000f7c6:	74 63       	ld.w	r3,r10[0x18]
8000f7c8:	68 52       	ld.w	r2,r4[0x14]
8000f7ca:	50 69       	stdsp	sp[0x18],r9
8000f7cc:	64 5f       	ld.w	pc,r2[0x14]
8000f7ce:	49 5f       	lddpc	pc,8000f820 <send_rt_stats+0x23c>
8000f7d0:	50 73       	stdsp	sp[0x1c],r3
8000f7d2:	74 47       	ld.w	r7,r10[0x10]
8000f7d4:	00 00       	add	r0,r0
8000f7d6:	00 00       	add	r0,r0
8000f7d8:	50 69       	stdsp	sp[0x18],r9
8000f7da:	74 63       	ld.w	r3,r10[0x18]
8000f7dc:	68 52       	ld.w	r2,r4[0x14]
8000f7de:	50 69       	stdsp	sp[0x18],r9
8000f7e0:	64 5f       	ld.w	pc,r2[0x14]
8000f7e2:	49 5f       	lddpc	pc,8000f834 <send_rt_stats+0x250>
8000f7e4:	50 72       	stdsp	sp[0x1c],r2
8000f7e6:	65 47       	ld.w	r7,r2[0x50]
8000f7e8:	00 00       	add	r0,r0
8000f7ea:	00 00       	add	r0,r0
8000f7ec:	50 69       	stdsp	sp[0x18],r9
8000f7ee:	74 63       	ld.w	r3,r10[0x18]
8000f7f0:	68 52       	ld.w	r2,r4[0x14]
8000f7f2:	50 69       	stdsp	sp[0x18],r9
8000f7f4:	64 5f       	ld.w	pc,r2[0x14]
8000f7f6:	44 5f       	lddsp	pc,sp[0x114]
8000f7f8:	47 61       	lddsp	r1,sp[0x1d8]
8000f7fa:	69 6e       	ld.w	lr,r4[0x58]
8000f7fc:	00 00       	add	r0,r0
8000f7fe:	00 00       	add	r0,r0
8000f800:	50 69       	stdsp	sp[0x18],r9
8000f802:	74 63       	ld.w	r3,r10[0x18]
8000f804:	68 41       	ld.w	r1,r4[0x10]
8000f806:	50 69       	stdsp	sp[0x18],r9
8000f808:	64 5f       	ld.w	pc,r2[0x14]
8000f80a:	50 5f       	stdsp	sp[0x14],pc
8000f80c:	47 00       	lddsp	r0,sp[0x1c0]
8000f80e:	00 00       	add	r0,r0
8000f810:	50 69       	stdsp	sp[0x18],r9
8000f812:	74 63       	ld.w	r3,r10[0x18]
8000f814:	68 41       	ld.w	r1,r4[0x10]
8000f816:	50 69       	stdsp	sp[0x18],r9
8000f818:	64 5f       	ld.w	pc,r2[0x14]
8000f81a:	49 5f       	lddpc	pc,8000f86c <send_rt_stats+0x288>
8000f81c:	50 73       	stdsp	sp[0x1c],r3
8000f81e:	74 47       	ld.w	r7,r10[0x10]
8000f820:	00 00       	add	r0,r0
8000f822:	00 00       	add	r0,r0
8000f824:	50 69       	stdsp	sp[0x18],r9
8000f826:	74 63       	ld.w	r3,r10[0x18]
8000f828:	68 41       	ld.w	r1,r4[0x10]
8000f82a:	50 69       	stdsp	sp[0x18],r9
8000f82c:	64 5f       	ld.w	pc,r2[0x14]
8000f82e:	49 5f       	lddpc	pc,8000f880 <send_rt_stats+0x29c>
8000f830:	50 72       	stdsp	sp[0x1c],r2
8000f832:	65 47       	ld.w	r7,r2[0x50]
8000f834:	00 00       	add	r0,r0
8000f836:	00 00       	add	r0,r0
8000f838:	50 69       	stdsp	sp[0x18],r9
8000f83a:	74 63       	ld.w	r3,r10[0x18]
8000f83c:	68 41       	ld.w	r1,r4[0x10]
8000f83e:	50 69       	stdsp	sp[0x18],r9
8000f840:	64 5f       	ld.w	pc,r2[0x14]
8000f842:	44 5f       	lddsp	pc,sp[0x114]
8000f844:	47 61       	lddsp	r1,sp[0x1d8]
8000f846:	69 6e       	ld.w	lr,r4[0x58]
8000f848:	00 00       	add	r0,r0
8000f84a:	00 00       	add	r0,r0
8000f84c:	59 61       	cp.w	r1,22
8000f84e:	77 52       	ld.w	r2,r11[0x54]
8000f850:	50 69       	stdsp	sp[0x18],r9
8000f852:	64 5f       	ld.w	pc,r2[0x14]
8000f854:	50 5f       	stdsp	sp[0x14],pc
8000f856:	47 00       	lddsp	r0,sp[0x1c0]
8000f858:	59 61       	cp.w	r1,22
8000f85a:	77 52       	ld.w	r2,r11[0x54]
8000f85c:	50 69       	stdsp	sp[0x18],r9
8000f85e:	64 5f       	ld.w	pc,r2[0x14]
8000f860:	49 5f       	lddpc	pc,8000f8b4 <send_rt_stats+0x2d0>
8000f862:	50 73       	stdsp	sp[0x1c],r3
8000f864:	74 47       	ld.w	r7,r10[0x10]
8000f866:	00 00       	add	r0,r0
8000f868:	59 61       	cp.w	r1,22
8000f86a:	77 52       	ld.w	r2,r11[0x54]
8000f86c:	50 69       	stdsp	sp[0x18],r9
8000f86e:	64 5f       	ld.w	pc,r2[0x14]
8000f870:	49 5f       	lddpc	pc,8000f8c4 <send_rt_stats+0x2e0>
8000f872:	50 72       	stdsp	sp[0x1c],r2
8000f874:	65 47       	ld.w	r7,r2[0x50]
8000f876:	00 00       	add	r0,r0
8000f878:	59 61       	cp.w	r1,22
8000f87a:	77 52       	ld.w	r2,r11[0x54]
8000f87c:	50 69       	stdsp	sp[0x18],r9
8000f87e:	64 5f       	ld.w	pc,r2[0x14]
8000f880:	44 5f       	lddsp	pc,sp[0x114]
8000f882:	47 61       	lddsp	r1,sp[0x1d8]
8000f884:	69 6e       	ld.w	lr,r4[0x58]
8000f886:	00 00       	add	r0,r0
8000f888:	59 61       	cp.w	r1,22
8000f88a:	77 41       	ld.w	r1,r11[0x50]
8000f88c:	50 69       	stdsp	sp[0x18],r9
8000f88e:	64 5f       	ld.w	pc,r2[0x14]
8000f890:	50 5f       	stdsp	sp[0x14],pc
8000f892:	47 00       	lddsp	r0,sp[0x1c0]
8000f894:	59 61       	cp.w	r1,22
8000f896:	77 41       	ld.w	r1,r11[0x50]
8000f898:	50 69       	stdsp	sp[0x18],r9
8000f89a:	64 5f       	ld.w	pc,r2[0x14]
8000f89c:	49 5f       	lddpc	pc,8000f8f0 <send_rt_stats+0x30c>
8000f89e:	50 73       	stdsp	sp[0x1c],r3
8000f8a0:	74 47       	ld.w	r7,r10[0x10]
8000f8a2:	00 00       	add	r0,r0
8000f8a4:	59 61       	cp.w	r1,22
8000f8a6:	77 41       	ld.w	r1,r11[0x50]
8000f8a8:	50 69       	stdsp	sp[0x18],r9
8000f8aa:	64 5f       	ld.w	pc,r2[0x14]
8000f8ac:	49 5f       	lddpc	pc,8000f900 <send_rt_stats+0x31c>
8000f8ae:	50 72       	stdsp	sp[0x1c],r2
8000f8b0:	65 47       	ld.w	r7,r2[0x50]
8000f8b2:	00 00       	add	r0,r0
8000f8b4:	59 61       	cp.w	r1,22
8000f8b6:	77 41       	ld.w	r1,r11[0x50]
8000f8b8:	50 69       	stdsp	sp[0x18],r9
8000f8ba:	64 5f       	ld.w	pc,r2[0x14]
8000f8bc:	44 5f       	lddsp	pc,sp[0x114]
8000f8be:	47 61       	lddsp	r1,sp[0x1d8]
8000f8c0:	69 6e       	ld.w	lr,r4[0x58]
8000f8c2:	00 00       	add	r0,r0
8000f8c4:	52 6f       	stdsp	sp[0x98],pc
8000f8c6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8c8:	56 50       	stdsp	sp[0x194],r0
8000f8ca:	69 64       	ld.w	r4,r4[0x58]
8000f8cc:	5f 50       	srlt	r0
8000f8ce:	5f 47       	srge	r7
8000f8d0:	00 00       	add	r0,r0
8000f8d2:	00 00       	add	r0,r0
8000f8d4:	52 6f       	stdsp	sp[0x98],pc
8000f8d6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8d8:	56 50       	stdsp	sp[0x194],r0
8000f8da:	69 64       	ld.w	r4,r4[0x58]
8000f8dc:	5f 49       	srge	r9
8000f8de:	5f 50       	srlt	r0
8000f8e0:	73 74       	ld.w	r4,r9[0x5c]
8000f8e2:	47 00       	lddsp	r0,sp[0x1c0]
8000f8e4:	52 6f       	stdsp	sp[0x98],pc
8000f8e6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8e8:	56 50       	stdsp	sp[0x194],r0
8000f8ea:	69 64       	ld.w	r4,r4[0x58]
8000f8ec:	5f 49       	srge	r9
8000f8ee:	5f 50       	srlt	r0
8000f8f0:	72 65       	ld.w	r5,r9[0x18]
8000f8f2:	47 00       	lddsp	r0,sp[0x1c0]
8000f8f4:	52 6f       	stdsp	sp[0x98],pc
8000f8f6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8f8:	56 50       	stdsp	sp[0x194],r0
8000f8fa:	69 64       	ld.w	r4,r4[0x58]
8000f8fc:	5f 44       	srge	r4
8000f8fe:	5f 47       	srge	r7
8000f900:	61 69       	ld.w	r9,r0[0x58]
8000f902:	6e 00       	ld.w	r0,r7[0x0]
8000f904:	50 69       	stdsp	sp[0x18],r9
8000f906:	74 63       	ld.w	r3,r10[0x18]
8000f908:	68 56       	ld.w	r6,r4[0x14]
8000f90a:	50 69       	stdsp	sp[0x18],r9
8000f90c:	64 5f       	ld.w	pc,r2[0x14]
8000f90e:	50 5f       	stdsp	sp[0x14],pc
8000f910:	47 00       	lddsp	r0,sp[0x1c0]
8000f912:	00 00       	add	r0,r0
8000f914:	50 69       	stdsp	sp[0x18],r9
8000f916:	74 63       	ld.w	r3,r10[0x18]
8000f918:	68 56       	ld.w	r6,r4[0x14]
8000f91a:	50 69       	stdsp	sp[0x18],r9
8000f91c:	64 5f       	ld.w	pc,r2[0x14]
8000f91e:	49 5f       	lddpc	pc,8000f970 <send_rt_stats+0x38c>
8000f920:	50 73       	stdsp	sp[0x1c],r3
8000f922:	74 47       	ld.w	r7,r10[0x10]
8000f924:	00 00       	add	r0,r0
8000f926:	00 00       	add	r0,r0
8000f928:	50 69       	stdsp	sp[0x18],r9
8000f92a:	74 63       	ld.w	r3,r10[0x18]
8000f92c:	68 56       	ld.w	r6,r4[0x14]
8000f92e:	50 69       	stdsp	sp[0x18],r9
8000f930:	64 5f       	ld.w	pc,r2[0x14]
8000f932:	49 5f       	lddpc	pc,8000f984 <send_rt_stats+0x3a0>
8000f934:	50 72       	stdsp	sp[0x1c],r2
8000f936:	65 47       	ld.w	r7,r2[0x50]
8000f938:	00 00       	add	r0,r0
8000f93a:	00 00       	add	r0,r0
8000f93c:	50 69       	stdsp	sp[0x18],r9
8000f93e:	74 63       	ld.w	r3,r10[0x18]
8000f940:	68 56       	ld.w	r6,r4[0x14]
8000f942:	50 69       	stdsp	sp[0x18],r9
8000f944:	64 5f       	ld.w	pc,r2[0x14]
8000f946:	44 5f       	lddsp	pc,sp[0x114]
8000f948:	47 61       	lddsp	r1,sp[0x1d8]
8000f94a:	69 6e       	ld.w	lr,r4[0x58]
8000f94c:	00 00       	add	r0,r0
8000f94e:	00 00       	add	r0,r0
8000f950:	54 68       	stdsp	sp[0x118],r8
8000f952:	72 56       	ld.w	r6,r9[0x14]
8000f954:	50 69       	stdsp	sp[0x18],r9
8000f956:	64 5f       	ld.w	pc,r2[0x14]
8000f958:	50 5f       	stdsp	sp[0x14],pc
8000f95a:	47 00       	lddsp	r0,sp[0x1c0]
8000f95c:	54 68       	stdsp	sp[0x118],r8
8000f95e:	72 56       	ld.w	r6,r9[0x14]
8000f960:	50 69       	stdsp	sp[0x18],r9
8000f962:	64 5f       	ld.w	pc,r2[0x14]
8000f964:	49 5f       	lddpc	pc,8000f9b8 <send_rt_stats+0x3d4>
8000f966:	50 73       	stdsp	sp[0x1c],r3
8000f968:	74 47       	ld.w	r7,r10[0x10]
8000f96a:	00 00       	add	r0,r0
8000f96c:	54 68       	stdsp	sp[0x118],r8
8000f96e:	72 56       	ld.w	r6,r9[0x14]
8000f970:	50 69       	stdsp	sp[0x18],r9
8000f972:	64 5f       	ld.w	pc,r2[0x14]
8000f974:	49 5f       	lddpc	pc,8000f9c8 <send_rt_stats+0x3e4>
8000f976:	50 72       	stdsp	sp[0x1c],r2
8000f978:	65 47       	ld.w	r7,r2[0x50]
8000f97a:	00 00       	add	r0,r0
8000f97c:	54 68       	stdsp	sp[0x118],r8
8000f97e:	72 56       	ld.w	r6,r9[0x14]
8000f980:	50 69       	stdsp	sp[0x18],r9
8000f982:	64 5f       	ld.w	pc,r2[0x14]
8000f984:	44 5f       	lddsp	pc,sp[0x114]
8000f986:	47 61       	lddsp	r1,sp[0x1d8]
8000f988:	69 6e       	ld.w	lr,r4[0x58]
8000f98a:	00 00       	add	r0,r0
8000f98c:	54 68       	stdsp	sp[0x118],r8
8000f98e:	72 56       	ld.w	r6,r9[0x14]
8000f990:	50 69       	stdsp	sp[0x18],r9
8000f992:	64 5f       	ld.w	pc,r2[0x14]
8000f994:	44 5f       	lddsp	pc,sp[0x114]
8000f996:	4c 50       	lddpc	r0,8000faa8 <send_rt_stats+0x4c4>
8000f998:	46 00       	lddsp	r0,sp[0x180]
8000f99a:	00 00       	add	r0,r0
8000f99c:	54 68       	stdsp	sp[0x118],r8
8000f99e:	72 56       	ld.w	r6,r9[0x14]
8000f9a0:	50 69       	stdsp	sp[0x18],r9
8000f9a2:	64 5f       	ld.w	pc,r2[0x14]
8000f9a4:	73 6f       	ld.w	pc,r9[0x58]
8000f9a6:	66 74       	ld.w	r4,r3[0x1c]
8000f9a8:	00 00       	add	r0,r0
8000f9aa:	00 00       	add	r0,r0
8000f9ac:	51 46       	stdsp	sp[0x50],r6
8000f9ae:	5f 6b       	srmi	r11
8000f9b0:	70 5f       	ld.w	pc,r8[0x14]
8000f9b2:	61 63       	ld.w	r3,r0[0x58]
8000f9b4:	63 00       	ld.w	r0,r1[0x40]
8000f9b6:	00 00       	add	r0,r0
8000f9b8:	51 46       	stdsp	sp[0x50],r6
8000f9ba:	5f 6b       	srmi	r11
8000f9bc:	70 5f       	ld.w	pc,r8[0x14]
8000f9be:	6d 61       	ld.w	r1,r6[0x58]
8000f9c0:	67 00       	ld.w	r0,r3[0x40]
8000f9c2:	00 00       	add	r0,r0
8000f9c4:	42 69       	lddsp	r9,sp[0x98]
8000f9c6:	61 73       	ld.w	r3,r0[0x5c]
8000f9c8:	5f 47       	srge	r7
8000f9ca:	79 72       	ld.w	r2,r12[0x5c]
8000f9cc:	6f 5f       	ld.w	pc,r7[0x54]
8000f9ce:	58 00       	cp.w	r0,0
8000f9d0:	42 69       	lddsp	r9,sp[0x98]
8000f9d2:	61 73       	ld.w	r3,r0[0x5c]
8000f9d4:	5f 47       	srge	r7
8000f9d6:	79 72       	ld.w	r2,r12[0x5c]
8000f9d8:	6f 5f       	ld.w	pc,r7[0x54]
8000f9da:	59 00       	cp.w	r0,16
8000f9dc:	42 69       	lddsp	r9,sp[0x98]
8000f9de:	61 73       	ld.w	r3,r0[0x5c]
8000f9e0:	5f 47       	srge	r7
8000f9e2:	79 72       	ld.w	r2,r12[0x5c]
8000f9e4:	6f 5f       	ld.w	pc,r7[0x54]
8000f9e6:	5a 00       	cp.w	r0,-32
8000f9e8:	42 69       	lddsp	r9,sp[0x98]
8000f9ea:	61 73       	ld.w	r3,r0[0x5c]
8000f9ec:	5f 41       	srge	r1
8000f9ee:	63 63       	ld.w	r3,r1[0x58]
8000f9f0:	5f 58       	srlt	r8
8000f9f2:	00 00       	add	r0,r0
8000f9f4:	42 69       	lddsp	r9,sp[0x98]
8000f9f6:	61 73       	ld.w	r3,r0[0x5c]
8000f9f8:	5f 41       	srge	r1
8000f9fa:	63 63       	ld.w	r3,r1[0x58]
8000f9fc:	5f 59       	srlt	r9
8000f9fe:	00 00       	add	r0,r0
8000fa00:	42 69       	lddsp	r9,sp[0x98]
8000fa02:	61 73       	ld.w	r3,r0[0x5c]
8000fa04:	5f 41       	srge	r1
8000fa06:	63 63       	ld.w	r3,r1[0x58]
8000fa08:	5f 5a       	srlt	r10
8000fa0a:	00 00       	add	r0,r0
8000fa0c:	42 69       	lddsp	r9,sp[0x98]
8000fa0e:	61 73       	ld.w	r3,r0[0x5c]
8000fa10:	5f 4d       	srge	sp
8000fa12:	61 67       	ld.w	r7,r0[0x58]
8000fa14:	5f 58       	srlt	r8
8000fa16:	00 00       	add	r0,r0
8000fa18:	42 69       	lddsp	r9,sp[0x98]
8000fa1a:	61 73       	ld.w	r3,r0[0x5c]
8000fa1c:	5f 4d       	srge	sp
8000fa1e:	61 67       	ld.w	r7,r0[0x58]
8000fa20:	5f 59       	srlt	r9
8000fa22:	00 00       	add	r0,r0
8000fa24:	42 69       	lddsp	r9,sp[0x98]
8000fa26:	61 73       	ld.w	r3,r0[0x5c]
8000fa28:	5f 4d       	srge	sp
8000fa2a:	61 67       	ld.w	r7,r0[0x58]
8000fa2c:	5f 5a       	srlt	r10
8000fa2e:	00 00       	add	r0,r0
8000fa30:	53 63       	stdsp	sp[0xd8],r3
8000fa32:	61 6c       	ld.w	r12,r0[0x58]
8000fa34:	65 5f       	ld.w	pc,r2[0x54]
8000fa36:	47 79       	lddsp	r9,sp[0x1dc]
8000fa38:	72 6f       	ld.w	pc,r9[0x18]
8000fa3a:	5f 58       	srlt	r8
8000fa3c:	00 00       	add	r0,r0
8000fa3e:	00 00       	add	r0,r0
8000fa40:	53 63       	stdsp	sp[0xd8],r3
8000fa42:	61 6c       	ld.w	r12,r0[0x58]
8000fa44:	65 5f       	ld.w	pc,r2[0x54]
8000fa46:	47 79       	lddsp	r9,sp[0x1dc]
8000fa48:	72 6f       	ld.w	pc,r9[0x18]
8000fa4a:	5f 59       	srlt	r9
8000fa4c:	00 00       	add	r0,r0
8000fa4e:	00 00       	add	r0,r0
8000fa50:	53 63       	stdsp	sp[0xd8],r3
8000fa52:	61 6c       	ld.w	r12,r0[0x58]
8000fa54:	65 5f       	ld.w	pc,r2[0x54]
8000fa56:	47 79       	lddsp	r9,sp[0x1dc]
8000fa58:	72 6f       	ld.w	pc,r9[0x18]
8000fa5a:	5f 5a       	srlt	r10
8000fa5c:	00 00       	add	r0,r0
8000fa5e:	00 00       	add	r0,r0
8000fa60:	53 63       	stdsp	sp[0xd8],r3
8000fa62:	61 6c       	ld.w	r12,r0[0x58]
8000fa64:	65 5f       	ld.w	pc,r2[0x54]
8000fa66:	41 63       	lddsp	r3,sp[0x58]
8000fa68:	63 5f       	ld.w	pc,r1[0x54]
8000fa6a:	58 00       	cp.w	r0,0
8000fa6c:	53 63       	stdsp	sp[0xd8],r3
8000fa6e:	61 6c       	ld.w	r12,r0[0x58]
8000fa70:	65 5f       	ld.w	pc,r2[0x54]
8000fa72:	41 63       	lddsp	r3,sp[0x58]
8000fa74:	63 5f       	ld.w	pc,r1[0x54]
8000fa76:	59 00       	cp.w	r0,16
8000fa78:	53 63       	stdsp	sp[0xd8],r3
8000fa7a:	61 6c       	ld.w	r12,r0[0x58]
8000fa7c:	65 5f       	ld.w	pc,r2[0x54]
8000fa7e:	41 63       	lddsp	r3,sp[0x58]
8000fa80:	63 5f       	ld.w	pc,r1[0x54]
8000fa82:	5a 00       	cp.w	r0,-32
8000fa84:	53 63       	stdsp	sp[0xd8],r3
8000fa86:	61 6c       	ld.w	r12,r0[0x58]
8000fa88:	65 5f       	ld.w	pc,r2[0x54]
8000fa8a:	4d 61       	lddpc	r1,8000fbe0 <add_PID_parameters+0xe4>
8000fa8c:	67 5f       	ld.w	pc,r3[0x54]
8000fa8e:	58 00       	cp.w	r0,0
8000fa90:	53 63       	stdsp	sp[0xd8],r3
8000fa92:	61 6c       	ld.w	r12,r0[0x58]
8000fa94:	65 5f       	ld.w	pc,r2[0x54]
8000fa96:	4d 61       	lddpc	r1,8000fbec <add_PID_parameters+0xf0>
8000fa98:	67 5f       	ld.w	pc,r3[0x54]
8000fa9a:	59 00       	cp.w	r0,16
8000fa9c:	53 63       	stdsp	sp[0xd8],r3
8000fa9e:	61 6c       	ld.w	r12,r0[0x58]
8000faa0:	65 5f       	ld.w	pc,r2[0x54]
8000faa2:	4d 61       	lddpc	r1,8000fbf8 <add_PID_parameters+0xfc>
8000faa4:	67 5f       	ld.w	pc,r3[0x54]
8000faa6:	5a 00       	cp.w	r0,-32
8000faa8:	49 44       	lddpc	r4,8000faf8 <send_rt_stats+0x514>
8000faaa:	5f 53       	srlt	r3
8000faac:	79 73       	ld.w	r3,r12[0x5c]
8000faae:	74 65       	ld.w	r5,r10[0x18]
8000fab0:	6d 00       	ld.w	r0,r6[0x40]
8000fab2:	00 00       	add	r0,r0
8000fab4:	49 44       	lddpc	r4,8000fb04 <add_PID_parameters+0x8>
8000fab6:	5f 50       	srlt	r0
8000fab8:	6c 61       	ld.w	r1,r6[0x18]
8000faba:	6e 6e       	ld.w	lr,r7[0x18]
8000fabc:	65 72       	ld.w	r2,r2[0x5c]
8000fabe:	00 00       	add	r0,r0
8000fac0:	50 6f       	stdsp	sp[0x18],pc
8000fac2:	73 5f       	ld.w	pc,r9[0x54]
8000fac4:	6b 70       	ld.w	r0,r5[0x5c]
8000fac6:	5f 61       	srmi	r1
8000fac8:	6c 74       	ld.w	r4,r6[0x1c]
8000faca:	00 00       	add	r0,r0
8000facc:	50 6f       	stdsp	sp[0x18],pc
8000face:	73 5f       	ld.w	pc,r9[0x54]
8000fad0:	6b 70       	ld.w	r0,r5[0x5c]
8000fad2:	5f 76       	srpl	r6
8000fad4:	65 6c       	ld.w	r12,r2[0x58]
8000fad6:	62 00       	ld.w	r0,r1[0x0]
8000fad8:	50 6f       	stdsp	sp[0x18],pc
8000fada:	73 5f       	ld.w	pc,r9[0x54]
8000fadc:	6b 70       	ld.w	r0,r5[0x5c]
8000fade:	5f 70       	srpl	r0
8000fae0:	6f 73       	ld.w	r3,r7[0x5c]
8000fae2:	30 00       	mov	r0,0
8000fae4:	50 6f       	stdsp	sp[0x18],pc
8000fae6:	73 5f       	ld.w	pc,r9[0x54]
8000fae8:	6b 70       	ld.w	r0,r5[0x5c]
8000faea:	5f 70       	srpl	r0
8000faec:	6f 73       	ld.w	r3,r7[0x5c]
8000faee:	31 00       	mov	r0,16
8000faf0:	50 6f       	stdsp	sp[0x18],pc
8000faf2:	73 5f       	ld.w	pc,r9[0x54]
8000faf4:	6b 70       	ld.w	r0,r5[0x5c]
8000faf6:	5f 70       	srpl	r0
8000faf8:	6f 73       	ld.w	r3,r7[0x5c]
8000fafa:	32 00       	mov	r0,32

8000fafc <add_PID_parameters>:


void add_PID_parameters(void) {
8000fafc:	eb cd 40 c0 	pushm	r6-r7,lr
8000fb00:	1a 97       	mov	r7,sp
8000fb02:	20 3d       	sub	sp,12
8000fb04:	fe f6 04 cc 	ld.w	r6,pc[1228]
8000fb08:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
8000fb0a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb0e:	70 08       	ld.w	r8,r8[0x0]
8000fb10:	f0 c8 fe 60 	sub	r8,r8,-416
8000fb14:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
8000fb18:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb1c:	70 08       	ld.w	r8,r8[0x0]
8000fb1e:	f0 c8 fd 24 	sub	r8,r8,-732
8000fb22:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;
8000fb26:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb2a:	70 08       	ld.w	r8,r8[0x0]
8000fb2c:	f0 c8 fb e8 	sub	r8,r8,-1048
8000fb30:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
8000fb34:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb38:	70 08       	ld.w	r8,r8[0x0]
8000fb3a:	f0 c8 ef 40 	sub	r8,r8,-4288
8000fb3e:	fe cb 04 16 	sub	r11,pc,1046
8000fb42:	10 9c       	mov	r12,r8
8000fb44:	f0 16 02 02 	mcall	r6[2056]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
8000fb48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb4c:	fe cb 04 18 	sub	r11,pc,1048
8000fb50:	10 9c       	mov	r12,r8
8000fb52:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
8000fb56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb5a:	2f 08       	sub	r8,-16
8000fb5c:	fe cb 04 18 	sub	r11,pc,1048
8000fb60:	10 9c       	mov	r12,r8
8000fb62:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
8000fb66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb6a:	2f 48       	sub	r8,-12
8000fb6c:	fe cb 04 18 	sub	r11,pc,1048
8000fb70:	10 9c       	mov	r12,r8
8000fb72:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
8000fb76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fb7a:	2e 08       	sub	r8,-32
8000fb7c:	fe cb 04 18 	sub	r11,pc,1048
8000fb80:	10 9c       	mov	r12,r8
8000fb82:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
8000fb86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fb8a:	fe cb 04 16 	sub	r11,pc,1046
8000fb8e:	10 9c       	mov	r12,r8
8000fb90:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
8000fb94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fb98:	2f 08       	sub	r8,-16
8000fb9a:	fe cb 04 16 	sub	r11,pc,1046
8000fb9e:	10 9c       	mov	r12,r8
8000fba0:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
8000fba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fba8:	2f 48       	sub	r8,-12
8000fbaa:	fe cb 04 16 	sub	r11,pc,1046
8000fbae:	10 9c       	mov	r12,r8
8000fbb0:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
8000fbb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fbb8:	2e 08       	sub	r8,-32
8000fbba:	fe cb 04 16 	sub	r11,pc,1046
8000fbbe:	10 9c       	mov	r12,r8
8000fbc0:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
8000fbc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fbc8:	2b c8       	sub	r8,-68
8000fbca:	fe cb 04 16 	sub	r11,pc,1046
8000fbce:	10 9c       	mov	r12,r8
8000fbd0:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
8000fbd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fbd8:	2a c8       	sub	r8,-84
8000fbda:	fe cb 04 16 	sub	r11,pc,1046
8000fbde:	10 9c       	mov	r12,r8
8000fbe0:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
8000fbe4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fbe8:	2b 08       	sub	r8,-80
8000fbea:	fe cb 04 12 	sub	r11,pc,1042
8000fbee:	10 9c       	mov	r12,r8
8000fbf0:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
8000fbf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fbf8:	29 c8       	sub	r8,-100
8000fbfa:	fe cb 04 0e 	sub	r11,pc,1038
8000fbfe:	10 9c       	mov	r12,r8
8000fc00:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
8000fc04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fc08:	2b c8       	sub	r8,-68
8000fc0a:	fe cb 04 0a 	sub	r11,pc,1034
8000fc0e:	10 9c       	mov	r12,r8
8000fc10:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
8000fc14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fc18:	2a c8       	sub	r8,-84
8000fc1a:	fe cb 04 0a 	sub	r11,pc,1034
8000fc1e:	10 9c       	mov	r12,r8
8000fc20:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
8000fc24:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fc28:	2b 08       	sub	r8,-80
8000fc2a:	fe cb 04 06 	sub	r11,pc,1030
8000fc2e:	10 9c       	mov	r12,r8
8000fc30:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
8000fc34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fc38:	29 c8       	sub	r8,-100
8000fc3a:	fe cb 04 02 	sub	r11,pc,1026
8000fc3e:	10 9c       	mov	r12,r8
8000fc40:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
8000fc44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fc48:	f0 c8 ff 78 	sub	r8,r8,-136
8000fc4c:	fe cb 04 00 	sub	r11,pc,1024
8000fc50:	10 9c       	mov	r12,r8
8000fc52:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
8000fc56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fc5a:	f0 c8 ff 68 	sub	r8,r8,-152
8000fc5e:	fe cb 04 06 	sub	r11,pc,1030
8000fc62:	10 9c       	mov	r12,r8
8000fc64:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
8000fc68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fc6c:	f0 c8 ff 6c 	sub	r8,r8,-148
8000fc70:	fe cb 04 08 	sub	r11,pc,1032
8000fc74:	10 9c       	mov	r12,r8
8000fc76:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
8000fc7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000fc7e:	f0 c8 ff 58 	sub	r8,r8,-168
8000fc82:	fe cb 04 0a 	sub	r11,pc,1034
8000fc86:	10 9c       	mov	r12,r8
8000fc88:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
8000fc8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fc90:	f0 c8 ff 78 	sub	r8,r8,-136
8000fc94:	fe cb 04 0c 	sub	r11,pc,1036
8000fc98:	10 9c       	mov	r12,r8
8000fc9a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
8000fc9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fca2:	f0 c8 ff 68 	sub	r8,r8,-152
8000fca6:	fe cb 04 12 	sub	r11,pc,1042
8000fcaa:	10 9c       	mov	r12,r8
8000fcac:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
8000fcb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fcb4:	f0 c8 ff 6c 	sub	r8,r8,-148
8000fcb8:	fe cb 04 14 	sub	r11,pc,1044
8000fcbc:	10 9c       	mov	r12,r8
8000fcbe:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8000fcc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fcc6:	f0 c8 ff 58 	sub	r8,r8,-168
8000fcca:	fe cb 04 16 	sub	r11,pc,1046
8000fcce:	10 9c       	mov	r12,r8
8000fcd0:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
8000fcd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fcd8:	fe cb 04 14 	sub	r11,pc,1044
8000fcdc:	10 9c       	mov	r12,r8
8000fcde:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
8000fce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fce6:	2f 08       	sub	r8,-16
8000fce8:	fe cb 04 14 	sub	r11,pc,1044
8000fcec:	10 9c       	mov	r12,r8
8000fcee:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
8000fcf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fcf6:	2f 48       	sub	r8,-12
8000fcf8:	fe cb 04 14 	sub	r11,pc,1044
8000fcfc:	10 9c       	mov	r12,r8
8000fcfe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
8000fd02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd06:	2e 08       	sub	r8,-32
8000fd08:	fe cb 04 14 	sub	r11,pc,1044
8000fd0c:	10 9c       	mov	r12,r8
8000fd0e:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
8000fd12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd16:	2b c8       	sub	r8,-68
8000fd18:	fe cb 04 14 	sub	r11,pc,1044
8000fd1c:	10 9c       	mov	r12,r8
8000fd1e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
8000fd22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd26:	2a c8       	sub	r8,-84
8000fd28:	fe cb 04 14 	sub	r11,pc,1044
8000fd2c:	10 9c       	mov	r12,r8
8000fd2e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
8000fd32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd36:	2b 08       	sub	r8,-80
8000fd38:	fe cb 04 10 	sub	r11,pc,1040
8000fd3c:	10 9c       	mov	r12,r8
8000fd3e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
8000fd42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd46:	29 c8       	sub	r8,-100
8000fd48:	fe cb 04 0c 	sub	r11,pc,1036
8000fd4c:	10 9c       	mov	r12,r8
8000fd4e:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
8000fd52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd56:	f0 c8 ff 34 	sub	r8,r8,-204
8000fd5a:	fe cb 04 0a 	sub	r11,pc,1034
8000fd5e:	10 9c       	mov	r12,r8
8000fd60:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
8000fd64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd68:	f0 c8 ff 24 	sub	r8,r8,-220
8000fd6c:	fe cb 04 10 	sub	r11,pc,1040
8000fd70:	10 9c       	mov	r12,r8
8000fd72:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
8000fd76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd7a:	f0 c8 ff 28 	sub	r8,r8,-216
8000fd7e:	fe cb 04 12 	sub	r11,pc,1042
8000fd82:	10 9c       	mov	r12,r8
8000fd84:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
8000fd88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd8c:	f0 c8 ff 14 	sub	r8,r8,-236
8000fd90:	fe cb 04 14 	sub	r11,pc,1044
8000fd94:	10 9c       	mov	r12,r8
8000fd96:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
8000fd9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd9e:	f0 c8 ff 0c 	sub	r8,r8,-244
8000fda2:	fe cb 04 16 	sub	r11,pc,1046
8000fda6:	10 9c       	mov	r12,r8
8000fda8:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
8000fdac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdb0:	f0 c8 fe f4 	sub	r8,r8,-268
8000fdb4:	fe cb 04 18 	sub	r11,pc,1048
8000fdb8:	10 9c       	mov	r12,r8
8000fdba:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
8000fdbe:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdc2:	70 08       	ld.w	r8,r8[0x0]
8000fdc4:	f0 c8 ff 64 	sub	r8,r8,-156
8000fdc8:	fe cb 04 1c 	sub	r11,pc,1052
8000fdcc:	10 9c       	mov	r12,r8
8000fdce:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
8000fdd2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdd6:	70 08       	ld.w	r8,r8[0x0]
8000fdd8:	f0 c8 ff 5c 	sub	r8,r8,-164
8000fddc:	fe cb 04 24 	sub	r11,pc,1060
8000fde0:	10 9c       	mov	r12,r8
8000fde2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8000fde6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000fdea:	f0 c8 ff 58 	sub	r8,r8,-168
8000fdee:	fe cb 05 3a 	sub	r11,pc,1338
8000fdf2:	10 9c       	mov	r12,r8
8000fdf4:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
8000fdf8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdfc:	70 08       	ld.w	r8,r8[0x0]
8000fdfe:	2d 08       	sub	r8,-48
8000fe00:	fe cb 04 3c 	sub	r11,pc,1084
8000fe04:	10 9c       	mov	r12,r8
8000fe06:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
8000fe0a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe0e:	70 08       	ld.w	r8,r8[0x0]
8000fe10:	2c c8       	sub	r8,-52
8000fe12:	fe cb 04 42 	sub	r11,pc,1090
8000fe16:	10 9c       	mov	r12,r8
8000fe18:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
8000fe1c:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe20:	70 08       	ld.w	r8,r8[0x0]
8000fe22:	2c 88       	sub	r8,-56
8000fe24:	fe cb 04 48 	sub	r11,pc,1096
8000fe28:	10 9c       	mov	r12,r8
8000fe2a:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
8000fe2e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe32:	70 08       	ld.w	r8,r8[0x0]
8000fe34:	2c 48       	sub	r8,-60
8000fe36:	fe cb 04 4e 	sub	r11,pc,1102
8000fe3a:	10 9c       	mov	r12,r8
8000fe3c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
8000fe40:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe44:	70 08       	ld.w	r8,r8[0x0]
8000fe46:	2c 08       	sub	r8,-64
8000fe48:	fe cb 04 54 	sub	r11,pc,1108
8000fe4c:	10 9c       	mov	r12,r8
8000fe4e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
8000fe52:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe56:	70 08       	ld.w	r8,r8[0x0]
8000fe58:	2b c8       	sub	r8,-68
8000fe5a:	fe cb 04 5a 	sub	r11,pc,1114
8000fe5e:	10 9c       	mov	r12,r8
8000fe60:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
8000fe64:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe68:	70 08       	ld.w	r8,r8[0x0]
8000fe6a:	2b 88       	sub	r8,-72
8000fe6c:	fe cb 04 60 	sub	r11,pc,1120
8000fe70:	10 9c       	mov	r12,r8
8000fe72:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
8000fe76:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe7a:	70 08       	ld.w	r8,r8[0x0]
8000fe7c:	2b 48       	sub	r8,-76
8000fe7e:	fe cb 04 66 	sub	r11,pc,1126
8000fe82:	10 9c       	mov	r12,r8
8000fe84:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
8000fe88:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe8c:	70 08       	ld.w	r8,r8[0x0]
8000fe8e:	2b 08       	sub	r8,-80
8000fe90:	fe cb 04 6c 	sub	r11,pc,1132
8000fe94:	10 9c       	mov	r12,r8
8000fe96:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
8000fe9a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe9e:	70 08       	ld.w	r8,r8[0x0]
8000fea0:	f0 c8 fe ec 	sub	r8,r8,-276
8000fea4:	fe cb 04 74 	sub	r11,pc,1140
8000fea8:	10 9c       	mov	r12,r8
8000feaa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
8000feae:	ec f8 00 00 	ld.w	r8,r6[0]
8000feb2:	70 08       	ld.w	r8,r8[0x0]
8000feb4:	f0 c8 fe e8 	sub	r8,r8,-280
8000feb8:	fe cb 04 78 	sub	r11,pc,1144
8000febc:	10 9c       	mov	r12,r8
8000febe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
8000fec2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fec6:	70 08       	ld.w	r8,r8[0x0]
8000fec8:	f0 c8 fe e4 	sub	r8,r8,-284
8000fecc:	fe cb 04 7c 	sub	r11,pc,1148
8000fed0:	10 9c       	mov	r12,r8
8000fed2:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
8000fed6:	ec f8 00 00 	ld.w	r8,r6[0]
8000feda:	70 08       	ld.w	r8,r8[0x0]
8000fedc:	f0 c8 fe e0 	sub	r8,r8,-288
8000fee0:	fe cb 04 80 	sub	r11,pc,1152
8000fee4:	10 9c       	mov	r12,r8
8000fee6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
8000feea:	ec f8 00 00 	ld.w	r8,r6[0]
8000feee:	70 08       	ld.w	r8,r8[0x0]
8000fef0:	f0 c8 fe dc 	sub	r8,r8,-292
8000fef4:	fe cb 04 88 	sub	r11,pc,1160
8000fef8:	10 9c       	mov	r12,r8
8000fefa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
8000fefe:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff02:	70 08       	ld.w	r8,r8[0x0]
8000ff04:	f0 c8 fe d8 	sub	r8,r8,-296
8000ff08:	fe cb 04 90 	sub	r11,pc,1168
8000ff0c:	10 9c       	mov	r12,r8
8000ff0e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
8000ff12:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff16:	70 08       	ld.w	r8,r8[0x0]
8000ff18:	f0 c8 fe d4 	sub	r8,r8,-300
8000ff1c:	fe cb 04 98 	sub	r11,pc,1176
8000ff20:	10 9c       	mov	r12,r8
8000ff22:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
8000ff26:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff2a:	70 08       	ld.w	r8,r8[0x0]
8000ff2c:	f0 c8 fe d0 	sub	r8,r8,-304
8000ff30:	fe cb 04 a0 	sub	r11,pc,1184
8000ff34:	10 9c       	mov	r12,r8
8000ff36:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
8000ff3a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff3e:	70 08       	ld.w	r8,r8[0x0]
8000ff40:	f0 c8 fe cc 	sub	r8,r8,-308
8000ff44:	fe cb 04 a8 	sub	r11,pc,1192
8000ff48:	10 9c       	mov	r12,r8
8000ff4a:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
8000ff4e:	fe cb 04 a6 	sub	r11,pc,1190
8000ff52:	ec fc 00 70 	ld.w	r12,r6[112]
8000ff56:	f0 16 00 df 	mcall	r6[892]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
8000ff5a:	fe cb 04 a6 	sub	r11,pc,1190
8000ff5e:	ec fc 00 c4 	ld.w	r12,r6[196]
8000ff62:	f0 16 00 df 	mcall	r6[892]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
8000ff66:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff6a:	70 08       	ld.w	r8,r8[0x0]
8000ff6c:	f0 c8 f2 ac 	sub	r8,r8,-3412
8000ff70:	fe cb 04 b0 	sub	r11,pc,1200
8000ff74:	10 9c       	mov	r12,r8
8000ff76:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
8000ff7a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff7e:	70 08       	ld.w	r8,r8[0x0]
8000ff80:	f0 c8 f2 a8 	sub	r8,r8,-3416
8000ff84:	fe cb 04 b8 	sub	r11,pc,1208
8000ff88:	10 9c       	mov	r12,r8
8000ff8a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
8000ff8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff92:	70 08       	ld.w	r8,r8[0x0]
8000ff94:	f0 c8 f2 b8 	sub	r8,r8,-3400
8000ff98:	fe cb 04 c0 	sub	r11,pc,1216
8000ff9c:	10 9c       	mov	r12,r8
8000ff9e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
8000ffa2:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffa6:	70 08       	ld.w	r8,r8[0x0]
8000ffa8:	f0 c8 f2 b4 	sub	r8,r8,-3404
8000ffac:	fe cb 04 c8 	sub	r11,pc,1224
8000ffb0:	10 9c       	mov	r12,r8
8000ffb2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
8000ffb6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffba:	70 08       	ld.w	r8,r8[0x0]
8000ffbc:	f0 c8 f2 b0 	sub	r8,r8,-3408
8000ffc0:	fe cb 04 d0 	sub	r11,pc,1232
8000ffc4:	10 9c       	mov	r12,r8
8000ffc6:	f0 16 00 0e 	mcall	r6[56]
}
8000ffca:	2f dd       	sub	sp,-12
8000ffcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ffd0:	80 00       	ld.sh	r0,r0[0x0]
8000ffd2:	f9 8c       	*unknown*

8000ffd4 <init_mavlink_actions>:

void init_mavlink_actions(void) {
8000ffd4:	eb cd 40 e0 	pushm	r5-r7,lr
8000ffd8:	1a 97       	mov	r7,sp
8000ffda:	4e e6       	lddpc	r6,80010190 <init_mavlink_actions+0x1bc>
8000ffdc:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
8000ffde:	f0 16 00 32 	mcall	r6[200]
8000ffe2:	18 99       	mov	r9,r12
8000ffe4:	ec f8 00 00 	ld.w	r8,r6[0]
8000ffe8:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
8000ffea:	f0 16 01 99 	mcall	r6[1636]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
8000ffee:	f0 16 01 18 	mcall	r6[1120]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
8000fff2:	ec f5 06 bc 	ld.w	r5,r6[1724]
8000fff6:	f0 16 00 26 	mcall	r6[152]
8000fffa:	30 08       	mov	r8,0
8000fffc:	0a 99       	mov	r9,r5
8000fffe:	30 2a       	mov	r10,2
80010000:	e6 7b a1 20 	mov	r11,500000
80010004:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
80010008:	ec f5 07 50 	ld.w	r5,r6[1872]
8001000c:	f0 16 00 26 	mcall	r6[152]
80010010:	31 f8       	mov	r8,31
80010012:	0a 99       	mov	r9,r5
80010014:	30 0a       	mov	r10,0
80010016:	ee 7b 42 40 	mov	r11,1000000
8001001a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
8001001e:	ec f5 07 b8 	ld.w	r5,r6[1976]
80010022:	f0 16 00 26 	mcall	r6[152]
80010026:	31 e8       	mov	r8,30
80010028:	0a 99       	mov	r9,r5
8001002a:	30 2a       	mov	r10,2
8001002c:	e2 7b 0d 40 	mov	r11,200000
80010030:	f0 16 00 25 	mcall	r6[148]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
80010034:	ec f5 06 34 	ld.w	r5,r6[1588]
80010038:	f0 16 00 26 	mcall	r6[152]
8001003c:	34 a8       	mov	r8,74
8001003e:	0a 99       	mov	r9,r5
80010040:	30 2a       	mov	r10,2
80010042:	e6 7b a1 20 	mov	r11,500000
80010046:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
8001004a:	ec f5 04 f0 	ld.w	r5,r6[1264]
8001004e:	f0 16 00 26 	mcall	r6[152]
80010052:	31 d8       	mov	r8,29
80010054:	0a 99       	mov	r9,r5
80010056:	30 2a       	mov	r10,2
80010058:	e6 7b a1 20 	mov	r11,500000
8001005c:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
80010060:	ec f5 04 ec 	ld.w	r5,r6[1260]
80010064:	f0 16 00 26 	mcall	r6[152]
80010068:	31 a8       	mov	r8,26
8001006a:	0a 99       	mov	r9,r5
8001006c:	30 2a       	mov	r10,2
8001006e:	e2 7b 0d 40 	mov	r11,200000
80010072:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
80010076:	ec f5 04 f4 	ld.w	r5,r6[1268]
8001007a:	f0 16 00 26 	mcall	r6[152]
8001007e:	31 b8       	mov	r8,27
80010080:	0a 99       	mov	r9,r5
80010082:	30 2a       	mov	r10,2
80010084:	e6 7b a1 20 	mov	r11,500000
80010088:	f0 16 00 25 	mcall	r6[148]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
8001008c:	ec f5 05 84 	ld.w	r5,r6[1412]
80010090:	f0 16 00 26 	mcall	r6[152]
80010094:	35 08       	mov	r8,80
80010096:	0a 99       	mov	r9,r5
80010098:	30 0a       	mov	r10,0
8001009a:	e2 7b 0d 40 	mov	r11,200000
8001009e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
800100a2:	ec f5 05 74 	ld.w	r5,r6[1396]
800100a6:	f0 16 00 26 	mcall	r6[152]
800100aa:	33 b8       	mov	r8,59
800100ac:	0a 99       	mov	r9,r5
800100ae:	30 0a       	mov	r10,0
800100b0:	e2 7b 0d 40 	mov	r11,200000
800100b4:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
800100b8:	ec f5 05 18 	ld.w	r5,r6[1304]
800100bc:	f0 16 00 26 	mcall	r6[152]
800100c0:	33 a8       	mov	r8,58
800100c2:	0a 99       	mov	r9,r5
800100c4:	30 0a       	mov	r10,0
800100c6:	e2 7b 0d 40 	mov	r11,200000
800100ca:	f0 16 00 25 	mcall	r6[148]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
800100ce:	ec f5 07 44 	ld.w	r5,r6[1860]
800100d2:	f0 16 00 26 	mcall	r6[152]
800100d6:	32 48       	mov	r8,36
800100d8:	0a 99       	mov	r9,r5
800100da:	30 2a       	mov	r10,2
800100dc:	e2 7b d0 90 	mov	r11,250000
800100e0:	f0 16 00 25 	mcall	r6[148]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
800100e4:	ec f5 06 d8 	ld.w	r5,r6[1752]
800100e8:	f0 16 00 26 	mcall	r6[152]
800100ec:	32 08       	mov	r8,32
800100ee:	0a 99       	mov	r9,r5
800100f0:	30 2a       	mov	r10,2
800100f2:	e2 7b 0d 40 	mov	r11,200000
800100f6:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
800100fa:	ec f5 07 38 	ld.w	r5,r6[1848]
800100fe:	f0 16 00 26 	mcall	r6[152]
80010102:	32 18       	mov	r8,33
80010104:	0a 99       	mov	r9,r5
80010106:	30 2a       	mov	r10,2
80010108:	e2 7b 0d 40 	mov	r11,200000
8001010c:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
80010110:	ec f5 07 68 	ld.w	r5,r6[1896]
80010114:	f0 16 00 26 	mcall	r6[152]
80010118:	31 88       	mov	r8,24
8001011a:	0a 99       	mov	r9,r5
8001011c:	30 2a       	mov	r10,2
8001011e:	e2 7b d0 90 	mov	r11,250000
80010122:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
80010126:	ec f5 06 18 	ld.w	r5,r6[1560]
8001012a:	f0 16 00 26 	mcall	r6[152]
8001012e:	32 38       	mov	r8,35
80010130:	0a 99       	mov	r9,r5
80010132:	30 2a       	mov	r10,2
80010134:	e2 7b 0d 40 	mov	r11,200000
80010138:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
8001013c:	ec f5 07 3c 	ld.w	r5,r6[1852]
80010140:	f0 16 00 26 	mcall	r6[152]
80010144:	32 28       	mov	r8,34
80010146:	0a 99       	mov	r9,r5
80010148:	30 2a       	mov	r10,2
8001014a:	e2 7b d0 90 	mov	r11,250000
8001014e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
80010152:	ec f5 07 cc 	ld.w	r5,r6[1996]
80010156:	f0 16 00 26 	mcall	r6[152]
8001015a:	35 a8       	mov	r8,90
8001015c:	0a 99       	mov	r9,r5
8001015e:	30 2a       	mov	r10,2
80010160:	e6 7b a1 20 	mov	r11,500000
80010164:	f0 16 00 25 	mcall	r6[148]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
80010168:	ec f5 06 7c 	ld.w	r5,r6[1660]
8001016c:	f0 16 00 26 	mcall	r6[152]
80010170:	e0 68 00 fb 	mov	r8,251
80010174:	0a 99       	mov	r9,r5
80010176:	30 0a       	mov	r10,0
80010178:	e2 7b d0 90 	mov	r11,250000
8001017c:	f0 16 00 25 	mcall	r6[148]
	
	sort_taskset_by_period(get_mavlink_taskset());
80010180:	f0 16 00 26 	mcall	r6[152]
80010184:	18 98       	mov	r8,r12
80010186:	10 9c       	mov	r12,r8
80010188:	f0 16 01 a3 	mcall	r6[1676]
}
8001018c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010190:	80 00       	ld.sh	r0,r0[0x0]
80010192:	fe 60 eb cd 	mov	r0,-70707

80010194 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
80010194:	eb cd 40 c0 	pushm	r6-r7,lr
80010198:	1a 97       	mov	r7,sp
8001019a:	48 e6       	lddpc	r6,800101d0 <get_roll_from_remote+0x3c>
8001019c:	1e 26       	rsub	r6,pc
8001019e:	30 1c       	mov	r12,1
800101a0:	f0 16 00 bf 	mcall	r6[764]
800101a4:	18 98       	mov	r8,r12
800101a6:	10 9c       	mov	r12,r8
800101a8:	f0 16 00 1a 	mcall	r6[104]
800101ac:	30 08       	mov	r8,0
800101ae:	e0 69 60 00 	mov	r9,24576
800101b2:	ea 19 40 7b 	orh	r9,0x407b
800101b6:	f0 16 00 0c 	mcall	r6[48]
800101ba:	14 98       	mov	r8,r10
800101bc:	16 99       	mov	r9,r11
800101be:	10 9a       	mov	r10,r8
800101c0:	12 9b       	mov	r11,r9
800101c2:	f0 16 00 08 	mcall	r6[32]
800101c6:	18 98       	mov	r8,r12
800101c8:	10 9c       	mov	r12,r8
800101ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800101ce:	00 00       	add	r0,r0
800101d0:	80 01       	ld.sh	r1,r0[0x0]
800101d2:	00 20       	rsub	r0,r0

800101d4 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
800101d4:	eb cd 40 c0 	pushm	r6-r7,lr
800101d8:	1a 97       	mov	r7,sp
800101da:	48 e6       	lddpc	r6,80010210 <get_pitch_from_remote+0x3c>
800101dc:	1e 26       	rsub	r6,pc
800101de:	30 2c       	mov	r12,2
800101e0:	f0 16 00 bf 	mcall	r6[764]
800101e4:	18 98       	mov	r8,r12
800101e6:	5c 38       	neg	r8
800101e8:	10 9c       	mov	r12,r8
800101ea:	f0 16 00 1a 	mcall	r6[104]
800101ee:	30 08       	mov	r8,0
800101f0:	e0 69 60 00 	mov	r9,24576
800101f4:	ea 19 40 7b 	orh	r9,0x407b
800101f8:	f0 16 00 0c 	mcall	r6[48]
800101fc:	14 98       	mov	r8,r10
800101fe:	16 99       	mov	r9,r11
80010200:	10 9a       	mov	r10,r8
80010202:	12 9b       	mov	r11,r9
80010204:	f0 16 00 08 	mcall	r6[32]
80010208:	18 98       	mov	r8,r12
8001020a:	10 9c       	mov	r12,r8
8001020c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010210:	80 01       	ld.sh	r1,r0[0x0]
80010212:	00 60       	and	r0,r0

80010214 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
80010214:	eb cd 40 c0 	pushm	r6-r7,lr
80010218:	1a 97       	mov	r7,sp
8001021a:	48 e6       	lddpc	r6,80010250 <get_yaw_from_remote+0x3c>
8001021c:	1e 26       	rsub	r6,pc
8001021e:	30 3c       	mov	r12,3
80010220:	f0 16 00 bf 	mcall	r6[764]
80010224:	18 98       	mov	r8,r12
80010226:	10 9c       	mov	r12,r8
80010228:	f0 16 00 1a 	mcall	r6[104]
8001022c:	30 08       	mov	r8,0
8001022e:	e0 69 60 00 	mov	r9,24576
80010232:	ea 19 40 7b 	orh	r9,0x407b
80010236:	f0 16 00 0c 	mcall	r6[48]
8001023a:	14 98       	mov	r8,r10
8001023c:	16 99       	mov	r9,r11
8001023e:	10 9a       	mov	r10,r8
80010240:	12 9b       	mov	r11,r9
80010242:	f0 16 00 08 	mcall	r6[32]
80010246:	18 98       	mov	r8,r12
80010248:	10 9c       	mov	r12,r8
8001024a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001024e:	00 00       	add	r0,r0
80010250:	80 01       	ld.sh	r1,r0[0x0]
80010252:	00 a0       	st.w	r0++,r0

80010254 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80010254:	eb cd 40 c0 	pushm	r6-r7,lr
80010258:	1a 97       	mov	r7,sp
8001025a:	48 e6       	lddpc	r6,80010290 <get_thrust_from_remote+0x3c>
8001025c:	1e 26       	rsub	r6,pc
8001025e:	30 0c       	mov	r12,0
80010260:	f0 16 00 1b 	mcall	r6[108]
80010264:	18 98       	mov	r8,r12
80010266:	10 9c       	mov	r12,r8
80010268:	f0 16 00 1a 	mcall	r6[104]
8001026c:	30 08       	mov	r8,0
8001026e:	e0 69 60 00 	mov	r9,24576
80010272:	ea 19 40 7b 	orh	r9,0x407b
80010276:	f0 16 00 0c 	mcall	r6[48]
8001027a:	14 98       	mov	r8,r10
8001027c:	16 99       	mov	r9,r11
8001027e:	10 9a       	mov	r10,r8
80010280:	12 9b       	mov	r11,r9
80010282:	f0 16 00 08 	mcall	r6[32]
80010286:	18 98       	mov	r8,r12
80010288:	10 9c       	mov	r12,r8
8001028a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001028e:	00 00       	add	r0,r0
80010290:	80 01       	ld.sh	r1,r0[0x0]
80010292:	00 e0       	st.h	--r0,r0

80010294 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
80010294:	eb cd 40 e0 	pushm	r5-r7,lr
80010298:	1a 97       	mov	r7,sp
8001029a:	20 bd       	sub	sp,44
8001029c:	4b a6       	lddpc	r6,80010384 <get_command_from_remote+0xf0>
8001029e:	1e 26       	rsub	r6,pc
800102a0:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
800102a2:	c7 9f       	rcall	80010194 <get_roll_from_remote>
800102a4:	18 98       	mov	r8,r12
800102a6:	10 9c       	mov	r12,r8
800102a8:	f0 16 00 02 	mcall	r6[8]
800102ac:	e0 68 99 9a 	mov	r8,39322
800102b0:	ea 18 99 99 	orh	r8,0x9999
800102b4:	e0 69 99 99 	mov	r9,39321
800102b8:	ea 19 3f e9 	orh	r9,0x3fe9
800102bc:	f0 16 00 03 	mcall	r6[12]
800102c0:	14 98       	mov	r8,r10
800102c2:	16 99       	mov	r9,r11
800102c4:	10 9a       	mov	r10,r8
800102c6:	12 9b       	mov	r11,r9
800102c8:	f0 16 00 08 	mcall	r6[32]
800102cc:	18 98       	mov	r8,r12
800102ce:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
800102d2:	c8 1f       	rcall	800101d4 <get_pitch_from_remote>
800102d4:	18 98       	mov	r8,r12
800102d6:	10 9c       	mov	r12,r8
800102d8:	f0 16 00 02 	mcall	r6[8]
800102dc:	e0 68 99 9a 	mov	r8,39322
800102e0:	ea 18 99 99 	orh	r8,0x9999
800102e4:	e0 69 99 99 	mov	r9,39321
800102e8:	ea 19 3f e9 	orh	r9,0x3fe9
800102ec:	f0 16 00 03 	mcall	r6[12]
800102f0:	14 98       	mov	r8,r10
800102f2:	16 99       	mov	r9,r11
800102f4:	10 9a       	mov	r10,r8
800102f6:	12 9b       	mov	r11,r9
800102f8:	f0 16 00 08 	mcall	r6[32]
800102fc:	18 98       	mov	r8,r12
800102fe:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
80010302:	c8 9f       	rcall	80010214 <get_yaw_from_remote>
80010304:	18 98       	mov	r8,r12
80010306:	10 9c       	mov	r12,r8
80010308:	f0 16 00 02 	mcall	r6[8]
8001030c:	e0 68 99 9a 	mov	r8,39322
80010310:	ea 18 99 99 	orh	r8,0x9999
80010314:	e0 69 99 99 	mov	r9,39321
80010318:	ea 19 3f e9 	orh	r9,0x3fe9
8001031c:	f0 16 00 03 	mcall	r6[12]
80010320:	14 98       	mov	r8,r10
80010322:	16 99       	mov	r9,r11
80010324:	10 9a       	mov	r10,r8
80010326:	12 9b       	mov	r11,r9
80010328:	f0 16 00 08 	mcall	r6[32]
8001032c:	18 98       	mov	r8,r12
8001032e:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80010332:	c9 1f       	rcall	80010254 <get_thrust_from_remote>
80010334:	18 98       	mov	r8,r12
80010336:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
8001033a:	0a 98       	mov	r8,r5
8001033c:	ee c9 00 2c 	sub	r9,r7,44
80010340:	f0 ca 00 00 	sub	r10,r8,0
80010344:	f2 cb 00 00 	sub	r11,r9,0
80010348:	76 0c       	ld.w	r12,r11[0x0]
8001034a:	95 0c       	st.w	r10[0x0],r12
8001034c:	76 1c       	ld.w	r12,r11[0x4]
8001034e:	95 1c       	st.w	r10[0x4],r12
80010350:	76 2c       	ld.w	r12,r11[0x8]
80010352:	95 2c       	st.w	r10[0x8],r12
80010354:	76 3b       	ld.w	r11,r11[0xc]
80010356:	95 3b       	st.w	r10[0xc],r11
80010358:	f0 ca ff f0 	sub	r10,r8,-16
8001035c:	f2 cb ff f0 	sub	r11,r9,-16
80010360:	76 0c       	ld.w	r12,r11[0x0]
80010362:	95 0c       	st.w	r10[0x0],r12
80010364:	76 1c       	ld.w	r12,r11[0x4]
80010366:	95 1c       	st.w	r10[0x4],r12
80010368:	76 2c       	ld.w	r12,r11[0x8]
8001036a:	95 2c       	st.w	r10[0x8],r12
8001036c:	76 3b       	ld.w	r11,r11[0xc]
8001036e:	95 3b       	st.w	r10[0xc],r11
80010370:	f2 ea 00 20 	ld.d	r10,r9[32]
80010374:	f0 eb 00 20 	st.d	r8[32],r10
80010378:	72 a9       	ld.w	r9,r9[0x28]
8001037a:	91 a9       	st.w	r8[0x28],r9
}
8001037c:	0a 9c       	mov	r12,r5
8001037e:	2f 5d       	sub	sp,-44
80010380:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010384:	80 01       	ld.sh	r1,r0[0x0]
80010386:	01 22       	ld.uh	r2,r0++

80010388 <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
80010388:	eb cd 40 c0 	pushm	r6-r7,lr
8001038c:	1a 97       	mov	r7,sp
8001038e:	20 1d       	sub	sp,4
80010390:	4a d6       	lddpc	r6,80010444 <get_channel_mode+0xbc>
80010392:	1e 26       	rsub	r6,pc
80010394:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
80010398:	30 4c       	mov	r12,4
8001039a:	f0 16 00 1b 	mcall	r6[108]
8001039e:	18 98       	mov	r8,r12
800103a0:	10 99       	mov	r9,r8
800103a2:	30 08       	mov	r8,0
800103a4:	f0 09 19 00 	cp.h	r9,r8
800103a8:	c0 84       	brge	800103b8 <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
800103aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103ae:	11 88       	ld.ub	r8,r8[0x0]
800103b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800103b4:	b2 88       	st.b	r9[0x0],r8
800103b6:	c4 38       	rjmp	8001043c <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
800103b8:	30 4c       	mov	r12,4
800103ba:	f0 16 00 1b 	mcall	r6[108]
800103be:	18 98       	mov	r8,r12
800103c0:	10 99       	mov	r9,r8
800103c2:	30 08       	mov	r8,0
800103c4:	f0 09 19 00 	cp.h	r9,r8
800103c8:	e0 8a 00 14 	brle	800103f0 <get_channel_mode+0x68>
800103cc:	30 5c       	mov	r12,5
800103ce:	f0 16 00 1b 	mcall	r6[108]
800103d2:	18 98       	mov	r8,r12
800103d4:	10 99       	mov	r9,r8
800103d6:	30 08       	mov	r8,0
800103d8:	f0 09 19 00 	cp.h	r9,r8
800103dc:	c0 a4       	brge	800103f0 <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
800103de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103e2:	11 88       	ld.ub	r8,r8[0x0]
800103e4:	a1 a8       	sbr	r8,0x0
800103e6:	5c 58       	castu.b	r8
800103e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800103ec:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
800103ee:	c2 78       	rjmp	8001043c <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
800103f0:	30 4c       	mov	r12,4
800103f2:	f0 16 00 1b 	mcall	r6[108]
800103f6:	18 98       	mov	r8,r12
800103f8:	10 99       	mov	r9,r8
800103fa:	30 08       	mov	r8,0
800103fc:	f0 09 19 00 	cp.h	r9,r8
80010400:	e0 8a 00 16 	brle	8001042c <get_channel_mode+0xa4>
80010404:	30 5c       	mov	r12,5
80010406:	f0 16 00 1b 	mcall	r6[108]
8001040a:	18 98       	mov	r8,r12
8001040c:	10 99       	mov	r9,r8
8001040e:	31 48       	mov	r8,20
80010410:	f0 09 19 00 	cp.h	r9,r8
80010414:	e0 8a 00 0c 	brle	8001042c <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
80010418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001041c:	11 88       	ld.ub	r8,r8[0x0]
8001041e:	e8 18 00 03 	orl	r8,0x3
80010422:	5c 58       	castu.b	r8
80010424:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010428:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
8001042a:	c0 98       	rjmp	8001043c <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
8001042c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010430:	11 88       	ld.ub	r8,r8[0x0]
80010432:	a1 b8       	sbr	r8,0x1
80010434:	5c 58       	castu.b	r8
80010436:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001043a:	b2 88       	st.b	r9[0x0],r8
		}
	}
8001043c:	2f fd       	sub	sp,-4
8001043e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010442:	00 00       	add	r0,r0
80010444:	80 01       	ld.sh	r1,r0[0x0]
80010446:	02 16       	sub	r6,r1

80010448 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80010448:	eb cd 40 c0 	pushm	r6-r7,lr
8001044c:	1a 97       	mov	r7,sp
8001044e:	20 3d       	sub	sp,12
80010450:	49 06       	lddpc	r6,80010490 <mav_array_memcpy+0x48>
80010452:	1e 26       	rsub	r6,pc
80010454:	ef 4c ff fc 	st.w	r7[-4],r12
80010458:	ef 4b ff f8 	st.w	r7[-8],r11
8001045c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80010460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010464:	58 08       	cp.w	r8,0
80010466:	c0 91       	brne	80010478 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80010468:	ee fa ff f4 	ld.w	r10,r7[-12]
8001046c:	30 0b       	mov	r11,0
8001046e:	ee fc ff fc 	ld.w	r12,r7[-4]
80010472:	f0 16 00 30 	mcall	r6[192]
80010476:	c0 98       	rjmp	80010488 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80010478:	ee fa ff f4 	ld.w	r10,r7[-12]
8001047c:	ee fb ff f8 	ld.w	r11,r7[-8]
80010480:	ee fc ff fc 	ld.w	r12,r7[-4]
80010484:	f0 16 00 21 	mcall	r6[132]
	}
}
80010488:	2f dd       	sub	sp,-12
8001048a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001048e:	00 00       	add	r0,r0
80010490:	80 01       	ld.sh	r1,r0[0x0]
80010492:	02 d6       	st.w	--r1,r6

80010494 <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
80010494:	eb cd 40 c0 	pushm	r6-r7,lr
80010498:	1a 97       	mov	r7,sp
8001049a:	48 46       	lddpc	r6,800104a8 <get_main_taskset+0x14>
8001049c:	1e 26       	rsub	r6,pc
	return &main_tasks;
8001049e:	ec f8 01 2c 	ld.w	r8,r6[300]
}
800104a2:	10 9c       	mov	r12,r8
800104a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800104a8:	80 01       	ld.sh	r1,r0[0x0]
800104aa:	03 20       	ld.uh	r0,r1++

800104ac <run_imu_update>:

task_return_t run_imu_update() {
800104ac:	eb cd 40 c0 	pushm	r6-r7,lr
800104b0:	1a 97       	mov	r7,sp
800104b2:	48 d6       	lddpc	r6,800104e4 <run_imu_update+0x38>
800104b4:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
800104b6:	ec f8 00 00 	ld.w	r8,r6[0]
800104ba:	70 08       	ld.w	r8,r8[0x0]
800104bc:	f0 c9 f4 f8 	sub	r9,r8,-2824
800104c0:	ec f8 00 00 	ld.w	r8,r6[0]
800104c4:	70 08       	ld.w	r8,r8[0x0]
800104c6:	f0 ca ef 3c 	sub	r10,r8,-4292
800104ca:	ec f8 00 00 	ld.w	r8,r6[0]
800104ce:	70 08       	ld.w	r8,r8[0x0]
800104d0:	f0 cb f2 c4 	sub	r11,r8,-3388
800104d4:	ec f8 00 00 	ld.w	r8,r6[0]
800104d8:	70 08       	ld.w	r8,r8[0x0]
800104da:	10 9c       	mov	r12,r8
800104dc:	f0 16 00 96 	mcall	r6[600]
}	
800104e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800104e4:	80 01       	ld.sh	r1,r0[0x0]
800104e6:	03 38       	ld.ub	r8,r1++
800104e8:	6d 6f       	ld.w	pc,r6[0x58]
800104ea:	74 6f       	ld.w	pc,r10[0x18]
800104ec:	72 20       	ld.w	r0,r9[0x8]
800104ee:	6f 6e       	ld.w	lr,r7[0x58]
800104f0:	3a 20       	mov	r0,-94
800104f2:	79 61       	ld.w	r1,r12[0x58]
800104f4:	77 3d       	ld.w	sp,r11[0x4c]
800104f6:	0a 00       	add	r0,r5

800104f8 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
800104f8:	eb cd 40 e0 	pushm	r5-r7,lr
800104fc:	1a 97       	mov	r7,sp
800104fe:	20 3d       	sub	sp,12
80010500:	4c f6       	lddpc	r6,8001063c <rc_user_channels+0x144>
80010502:	1e 26       	rsub	r6,pc
80010504:	ef 4c ff fc 	st.w	r7[-4],r12
80010508:	ef 4b ff f8 	st.w	r7[-8],r11
8001050c:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80010510:	ee fc ff fc 	ld.w	r12,r7[-4]
80010514:	c3 af       	rcall	80010388 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010516:	c9 fe       	rcall	80010254 <get_thrust_from_remote>
80010518:	18 98       	mov	r8,r12
8001051a:	10 9c       	mov	r12,r8
8001051c:	f0 16 00 02 	mcall	r6[8]
80010520:	30 05       	mov	r5,0
80010522:	e0 68 66 66 	mov	r8,26214
80010526:	ea 18 66 66 	orh	r8,0x6666
8001052a:	e0 69 66 66 	mov	r9,26214
8001052e:	ea 19 bf ee 	orh	r9,0xbfee
80010532:	f0 16 00 1d 	mcall	r6[116]
80010536:	18 98       	mov	r8,r12
80010538:	58 08       	cp.w	r8,0
8001053a:	c0 20       	breq	8001053e <rc_user_channels+0x46>
8001053c:	30 15       	mov	r5,1
8001053e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010542:	c2 90       	breq	80010594 <rc_user_channels+0x9c>
80010544:	c6 8e       	rcall	80010214 <get_yaw_from_remote>
80010546:	18 98       	mov	r8,r12
80010548:	10 9c       	mov	r12,r8
8001054a:	f0 16 00 02 	mcall	r6[8]
8001054e:	14 98       	mov	r8,r10
80010550:	16 99       	mov	r9,r11
80010552:	30 05       	mov	r5,0
80010554:	e0 6a cc cd 	mov	r10,52429
80010558:	ea 1a cc cc 	orh	r10,0xcccc
8001055c:	e0 6b cc cc 	mov	r11,52428
80010560:	ea 1b 3f ec 	orh	r11,0x3fec
80010564:	f0 16 00 1d 	mcall	r6[116]
80010568:	18 98       	mov	r8,r12
8001056a:	58 08       	cp.w	r8,0
8001056c:	c0 20       	breq	80010570 <rc_user_channels+0x78>
8001056e:	30 15       	mov	r5,1
80010570:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010574:	c1 00       	breq	80010594 <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80010576:	fe cc 00 8e 	sub	r12,pc,142
8001057a:	f0 16 00 01 	mcall	r6[4]
8001057e:	c4 be       	rcall	80010214 <get_yaw_from_remote>
80010580:	18 98       	mov	r8,r12
80010582:	30 2b       	mov	r11,2
80010584:	10 9c       	mov	r12,r8
80010586:	f0 16 02 0a 	mcall	r6[2088]
		*motorbool = 1;
8001058a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001058e:	30 18       	mov	r8,1
80010590:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010592:	c3 88       	rjmp	80010602 <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80010594:	c6 0e       	rcall	80010254 <get_thrust_from_remote>
80010596:	18 98       	mov	r8,r12
80010598:	10 9c       	mov	r12,r8
8001059a:	f0 16 00 02 	mcall	r6[8]
8001059e:	30 05       	mov	r5,0
800105a0:	e0 68 66 66 	mov	r8,26214
800105a4:	ea 18 66 66 	orh	r8,0x6666
800105a8:	e0 69 66 66 	mov	r9,26214
800105ac:	ea 19 bf ee 	orh	r9,0xbfee
800105b0:	f0 16 00 1d 	mcall	r6[116]
800105b4:	18 98       	mov	r8,r12
800105b6:	58 08       	cp.w	r8,0
800105b8:	c0 20       	breq	800105bc <rc_user_channels+0xc4>
800105ba:	30 15       	mov	r5,1
800105bc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800105c0:	c1 d0       	breq	800105fa <rc_user_channels+0x102>
800105c2:	c2 9e       	rcall	80010214 <get_yaw_from_remote>
800105c4:	18 98       	mov	r8,r12
800105c6:	10 9c       	mov	r12,r8
800105c8:	f0 16 00 02 	mcall	r6[8]
800105cc:	30 05       	mov	r5,0
800105ce:	e0 68 cc cd 	mov	r8,52429
800105d2:	ea 18 cc cc 	orh	r8,0xcccc
800105d6:	e0 69 cc cc 	mov	r9,52428
800105da:	ea 19 bf ec 	orh	r9,0xbfec
800105de:	f0 16 00 1d 	mcall	r6[116]
800105e2:	18 98       	mov	r8,r12
800105e4:	58 08       	cp.w	r8,0
800105e6:	c0 20       	breq	800105ea <rc_user_channels+0xf2>
800105e8:	30 15       	mov	r5,1
800105ea:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800105ee:	c0 60       	breq	800105fa <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
800105f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800105f4:	3f f8       	mov	r8,-1
800105f6:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
800105f8:	c0 58       	rjmp	80010602 <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
800105fa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800105fe:	30 08       	mov	r8,0
80010600:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80010602:	f0 16 00 a7 	mcall	r6[668]
80010606:	18 98       	mov	r8,r12
80010608:	5c 58       	castu.b	r8
8001060a:	5c 68       	casts.b	r8
8001060c:	5b f8       	cp.w	r8,-1
8001060e:	c0 b0       	breq	80010624 <rc_user_channels+0x12c>
80010610:	58 18       	cp.w	r8,1
80010612:	c0 40       	breq	8001061a <rc_user_channels+0x122>
80010614:	5b e8       	cp.w	r8,-2
80010616:	c0 c0       	breq	8001062e <rc_user_channels+0x136>
80010618:	c0 f8       	rjmp	80010636 <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
8001061a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001061e:	30 18       	mov	r8,1
80010620:	b2 88       	st.b	r9[0x0],r8
		break;
80010622:	c0 a8       	rjmp	80010636 <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
80010624:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010628:	3f f8       	mov	r8,-1
8001062a:	b2 88       	st.b	r9[0x0],r8
		break;
8001062c:	c0 58       	rjmp	80010636 <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
8001062e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010632:	3f e8       	mov	r8,-2
80010634:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
80010636:	2f dd       	sub	sp,-12
80010638:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001063c:	80 01       	ld.sh	r1,r0[0x0]
8001063e:	03 86       	ld.ub	r6,r1[0x0]
80010640:	53 77       	stdsp	sp[0xdc],r7
80010642:	69 74       	ld.w	r4,r4[0x5c]
80010644:	63 68       	ld.w	r8,r1[0x58]
80010646:	69 6e       	ld.w	lr,r4[0x58]
80010648:	67 20       	ld.w	r0,r3[0x48]
8001064a:	6f 6e       	ld.w	lr,r7[0x58]
8001064c:	20 74       	sub	r4,7
8001064e:	68 65       	ld.w	r5,r4[0x18]
80010650:	20 6d       	sub	sp,24
80010652:	6f 74       	ld.w	r4,r7[0x5c]
80010654:	6f 72       	ld.w	r2,r7[0x5c]
80010656:	73 21       	ld.w	r1,r9[0x48]
80010658:	0a 00       	add	r0,r5
8001065a:	00 00       	add	r0,r0
8001065c:	53 77       	stdsp	sp[0xdc],r7
8001065e:	69 74       	ld.w	r4,r4[0x5c]
80010660:	63 68       	ld.w	r8,r1[0x58]
80010662:	65 73       	ld.w	r3,r2[0x5c]
80010664:	20 6e       	sub	lr,6
80010666:	6f 74       	ld.w	r4,r7[0x5c]
80010668:	20 72       	sub	r2,7
8001066a:	65 61       	ld.w	r1,r2[0x58]
8001066c:	64 79       	ld.w	r9,r2[0x1c]
8001066e:	2c 20       	sub	r0,-62
80010670:	62 6f       	ld.w	pc,r1[0x18]
80010672:	74 68       	ld.w	r8,r10[0x18]
80010674:	20 73       	sub	r3,7
80010676:	68 6f       	ld.w	pc,r4[0x18]
80010678:	75 6c       	ld.w	r12,r10[0x58]
8001067a:	64 20       	ld.w	r0,r2[0x8]
8001067c:	62 65       	ld.w	r5,r1[0x18]
8001067e:	20 70       	sub	r0,7
80010680:	75 73       	ld.w	r3,r10[0x5c]
80010682:	68 65       	ld.w	r5,r4[0x18]
80010684:	64 21       	ld.w	r1,r2[0x8]
80010686:	0a 00       	add	r0,r5
80010688:	53 77       	stdsp	sp[0xdc],r7
8001068a:	69 74       	ld.w	r4,r4[0x5c]
8001068c:	63 68       	ld.w	r8,r1[0x58]
8001068e:	69 6e       	ld.w	lr,r4[0x58]
80010690:	67 20       	ld.w	r0,r3[0x48]
80010692:	6f 66       	ld.w	r6,r7[0x58]
80010694:	66 20       	ld.w	r0,r3[0x8]
80010696:	6d 6f       	ld.w	pc,r6[0x58]
80010698:	74 6f       	ld.w	pc,r10[0x18]
8001069a:	72 73       	ld.w	r3,r9[0x1c]
8001069c:	21 0a       	sub	r10,16
	...

800106a0 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
800106a0:	eb cd 40 c0 	pushm	r6-r7,lr
800106a4:	1a 97       	mov	r7,sp
800106a6:	20 1d       	sub	sp,4
800106a8:	fe f6 03 9c 	ld.w	r6,pc[924]
800106ac:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
800106ae:	30 08       	mov	r8,0
800106b0:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
800106b4:	30 08       	mov	r8,0
800106b6:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
800106ba:	30 08       	mov	r8,0
800106bc:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
800106c0:	30 2c       	mov	r12,2
800106c2:	f0 16 01 c7 	mcall	r6[1820]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
800106c6:	ee ca 00 03 	sub	r10,r7,3
800106ca:	ee c9 00 02 	sub	r9,r7,2
800106ce:	ee c8 00 01 	sub	r8,r7,1
800106d2:	12 9b       	mov	r11,r9
800106d4:	10 9c       	mov	r12,r8
800106d6:	f0 16 01 54 	mcall	r6[1360]
	
	switch(centralData->mav_state)
800106da:	ec f8 00 00 	ld.w	r8,r6[0]
800106de:	70 08       	ld.w	r8,r8[0x0]
800106e0:	f1 38 10 bd 	ld.ub	r8,r8[4285]
800106e4:	58 48       	cp.w	r8,4
800106e6:	c6 50       	breq	800107b0 <set_mav_mode_n_state+0x110>
800106e8:	e0 89 00 09 	brgt	800106fa <set_mav_mode_n_state+0x5a>
800106ec:	58 28       	cp.w	r8,2
800106ee:	e0 80 01 a2 	breq	80010a32 <set_mav_mode_n_state+0x392>
800106f2:	58 38       	cp.w	r8,3
800106f4:	c0 b0       	breq	8001070a <set_mav_mode_n_state+0x6a>
800106f6:	e0 8f 01 a3 	bral	80010a3c <set_mav_mode_n_state+0x39c>
800106fa:	58 58       	cp.w	r8,5
800106fc:	e0 80 00 fa 	breq	800108f0 <set_mav_mode_n_state+0x250>
80010700:	58 68       	cp.w	r8,6
80010702:	e0 80 01 70 	breq	800109e2 <set_mav_mode_n_state+0x342>
80010706:	e0 8f 01 9b 	bral	80010a3c <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
8001070a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8001070e:	30 18       	mov	r8,1
80010710:	f0 09 18 00 	cp.b	r9,r8
80010714:	e0 81 01 91 	brne	80010a36 <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
80010718:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001071c:	58 18       	cp.w	r8,1
8001071e:	c3 70       	breq	8001078c <set_mav_mode_n_state+0xec>
80010720:	e0 89 00 06 	brgt	8001072c <set_mav_mode_n_state+0x8c>
80010724:	58 08       	cp.w	r8,0
80010726:	c0 90       	breq	80010738 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010728:	e0 8f 01 8a 	bral	80010a3c <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
8001072c:	58 28       	cp.w	r8,2
8001072e:	c3 40       	breq	80010796 <set_mav_mode_n_state+0xf6>
80010730:	58 38       	cp.w	r8,3
80010732:	c3 70       	breq	800107a0 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010734:	e0 8f 01 84 	bral	80010a3c <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
80010738:	fe cc 00 f8 	sub	r12,pc,248
8001073c:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80010740:	ec f8 00 00 	ld.w	r8,r6[0]
80010744:	70 08       	ld.w	r8,r8[0x0]
80010746:	f0 ca f4 f8 	sub	r10,r8,-2824
8001074a:	ec f8 00 00 	ld.w	r8,r6[0]
8001074e:	70 08       	ld.w	r8,r8[0x0]
80010750:	f0 c9 ef 3c 	sub	r9,r8,-4292
80010754:	ec f8 00 00 	ld.w	r8,r6[0]
80010758:	70 08       	ld.w	r8,r8[0x0]
8001075a:	f0 c8 f2 c4 	sub	r8,r8,-3388
8001075e:	12 9b       	mov	r11,r9
80010760:	10 9c       	mov	r12,r8
80010762:	f0 16 02 06 	mcall	r6[2072]
						centralData->controls.run_mode = MOTORS_ON;
80010766:	ec f8 00 00 	ld.w	r8,r6[0]
8001076a:	70 08       	ld.w	r8,r8[0x0]
8001076c:	30 19       	mov	r9,1
8001076e:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
80010772:	ec f8 00 00 	ld.w	r8,r6[0]
80010776:	70 09       	ld.w	r9,r8[0x0]
80010778:	30 48       	mov	r8,4
8001077a:	f3 68 10 bd 	st.b	r9[4285],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
8001077e:	ec f8 00 00 	ld.w	r8,r6[0]
80010782:	70 09       	ld.w	r9,r8[0x0]
80010784:	3c 08       	mov	r8,-64
80010786:	f3 68 10 bc 	st.b	r9[4284],r8
						break;
8001078a:	c1 18       	rjmp	800107ac <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
8001078c:	fe cc 01 30 	sub	r12,pc,304
80010790:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80010794:	c0 c8       	rjmp	800107ac <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80010796:	fe cc 01 3a 	sub	r12,pc,314
8001079a:	f0 16 00 01 	mcall	r6[4]
						break;
8001079e:	c0 78       	rjmp	800107ac <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
800107a0:	fe cc 01 44 	sub	r12,pc,324
800107a4:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
800107a8:	e0 8f 01 4a 	bral	80010a3c <set_mav_mode_n_state+0x39c>
800107ac:	e0 8f 01 48 	bral	80010a3c <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
800107b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107b4:	58 18       	cp.w	r8,1
800107b6:	c1 80       	breq	800107e6 <set_mav_mode_n_state+0x146>
800107b8:	e0 89 00 05 	brgt	800107c2 <set_mav_mode_n_state+0x122>
800107bc:	58 08       	cp.w	r8,0
800107be:	c0 70       	breq	800107cc <set_mav_mode_n_state+0x12c>
800107c0:	c2 d8       	rjmp	8001081a <set_mav_mode_n_state+0x17a>
800107c2:	58 28       	cp.w	r8,2
800107c4:	c1 e0       	breq	80010800 <set_mav_mode_n_state+0x160>
800107c6:	58 38       	cp.w	r8,3
800107c8:	c2 30       	breq	8001080e <set_mav_mode_n_state+0x16e>
800107ca:	c2 88       	rjmp	8001081a <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
800107cc:	ec f8 00 00 	ld.w	r8,r6[0]
800107d0:	70 09       	ld.w	r9,r8[0x0]
800107d2:	30 08       	mov	r8,0
800107d4:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
800107d8:	ec f8 00 00 	ld.w	r8,r6[0]
800107dc:	70 09       	ld.w	r9,r8[0x0]
800107de:	3c 08       	mov	r8,-64
800107e0:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800107e4:	c1 b8       	rjmp	8001081a <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
800107e6:	ec f8 00 00 	ld.w	r8,r6[0]
800107ea:	70 09       	ld.w	r9,r8[0x0]
800107ec:	30 08       	mov	r8,0
800107ee:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
800107f2:	ec f8 00 00 	ld.w	r8,r6[0]
800107f6:	70 09       	ld.w	r9,r8[0x0]
800107f8:	3d 08       	mov	r8,-48
800107fa:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800107fe:	c0 e8       	rjmp	8001081a <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80010800:	ec f8 00 00 	ld.w	r8,r6[0]
80010804:	70 09       	ld.w	r9,r8[0x0]
80010806:	3d 88       	mov	r8,-40
80010808:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001080c:	c0 78       	rjmp	8001081a <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8001080e:	ec f8 00 00 	ld.w	r8,r6[0]
80010812:	70 09       	ld.w	r9,r8[0x0]
80010814:	3d c8       	mov	r8,-36
80010816:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			
			switch (centralData->mav_mode)
8001081a:	ec f8 00 00 	ld.w	r8,r6[0]
8001081e:	70 08       	ld.w	r8,r8[0x0]
80010820:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80010824:	e0 48 00 d0 	cp.w	r8,208
80010828:	c1 50       	breq	80010852 <set_mav_mode_n_state+0x1b2>
8001082a:	e0 89 00 06 	brgt	80010836 <set_mav_mode_n_state+0x196>
8001082e:	e0 48 00 c0 	cp.w	r8,192
80010832:	c0 90       	breq	80010844 <set_mav_mode_n_state+0x1a4>
80010834:	c2 88       	rjmp	80010884 <set_mav_mode_n_state+0x1e4>
80010836:	e0 48 00 d8 	cp.w	r8,216
8001083a:	c1 30       	breq	80010860 <set_mav_mode_n_state+0x1c0>
8001083c:	e0 48 00 dc 	cp.w	r8,220
80010840:	c1 30       	breq	80010866 <set_mav_mode_n_state+0x1c6>
80010842:	c2 18       	rjmp	80010884 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
80010844:	ec f8 00 00 	ld.w	r8,r6[0]
80010848:	70 09       	ld.w	r9,r8[0x0]
8001084a:	30 08       	mov	r8,0
8001084c:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
80010850:	c1 a8       	rjmp	80010884 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
80010852:	ec f8 00 00 	ld.w	r8,r6[0]
80010856:	70 09       	ld.w	r9,r8[0x0]
80010858:	30 08       	mov	r8,0
8001085a:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
8001085e:	c1 38       	rjmp	80010884 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
80010860:	f0 16 01 bc 	mcall	r6[1776]
					break;
80010864:	c1 08       	rjmp	80010884 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
80010866:	ec f8 00 00 	ld.w	r8,r6[0]
8001086a:	70 08       	ld.w	r8,r8[0x0]
8001086c:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80010870:	58 08       	cp.w	r8,0
80010872:	c0 70       	breq	80010880 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80010874:	ec f8 00 00 	ld.w	r8,r6[0]
80010878:	70 09       	ld.w	r9,r8[0x0]
8001087a:	30 08       	mov	r8,0
8001087c:	f3 68 10 b7 	st.b	r9[4279],r8
					}
					waypoint_navigation_handler();
80010880:	f0 16 02 0b 	mcall	r6[2092]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80010884:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010888:	3f f8       	mov	r8,-1
8001088a:	f0 09 18 00 	cp.b	r9,r8
8001088e:	c1 71       	brne	800108bc <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
80010890:	fe cc 02 08 	sub	r12,pc,520
80010894:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80010898:	ec f8 00 00 	ld.w	r8,r6[0]
8001089c:	70 08       	ld.w	r8,r8[0x0]
8001089e:	30 09       	mov	r9,0
800108a0:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
800108a4:	ec f8 00 00 	ld.w	r8,r6[0]
800108a8:	70 09       	ld.w	r9,r8[0x0]
800108aa:	30 38       	mov	r8,3
800108ac:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
800108b0:	ec f8 00 00 	ld.w	r8,r6[0]
800108b4:	70 09       	ld.w	r9,r8[0x0]
800108b6:	34 08       	mov	r8,64
800108b8:	f3 68 10 bc 	st.b	r9[4284],r8
			}
		
			switch (RC_check)
800108bc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800108c0:	5c 68       	casts.b	r8
800108c2:	5b f8       	cp.w	r8,-1
800108c4:	c0 70       	breq	800108d2 <set_mav_mode_n_state+0x232>
800108c6:	58 18       	cp.w	r8,1
800108c8:	c0 40       	breq	800108d0 <set_mav_mode_n_state+0x230>
800108ca:	5b e8       	cp.w	r8,-2
800108cc:	c0 a0       	breq	800108e0 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
800108ce:	cb 78       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
800108d0:	c0 f8       	rjmp	800108ee <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
800108d2:	ec f8 00 00 	ld.w	r8,r6[0]
800108d6:	70 09       	ld.w	r9,r8[0x0]
800108d8:	30 58       	mov	r8,5
800108da:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
800108de:	c0 88       	rjmp	800108ee <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
800108e0:	ec f8 00 00 	ld.w	r8,r6[0]
800108e4:	70 09       	ld.w	r9,r8[0x0]
800108e6:	30 58       	mov	r8,5
800108e8:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
			}
			break;
800108ec:	ca 88       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
800108ee:	ca 78       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
800108f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800108f4:	58 18       	cp.w	r8,1
800108f6:	c1 20       	breq	8001091a <set_mav_mode_n_state+0x27a>
800108f8:	e0 89 00 05 	brgt	80010902 <set_mav_mode_n_state+0x262>
800108fc:	58 08       	cp.w	r8,0
800108fe:	c0 70       	breq	8001090c <set_mav_mode_n_state+0x26c>
80010900:	c2 18       	rjmp	80010942 <set_mav_mode_n_state+0x2a2>
80010902:	58 28       	cp.w	r8,2
80010904:	c1 20       	breq	80010928 <set_mav_mode_n_state+0x288>
80010906:	58 38       	cp.w	r8,3
80010908:	c1 70       	breq	80010936 <set_mav_mode_n_state+0x296>
8001090a:	c1 c8       	rjmp	80010942 <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
8001090c:	ec f8 00 00 	ld.w	r8,r6[0]
80010910:	70 09       	ld.w	r9,r8[0x0]
80010912:	3c 08       	mov	r8,-64
80010914:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010918:	c1 58       	rjmp	80010942 <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
8001091a:	ec f8 00 00 	ld.w	r8,r6[0]
8001091e:	70 09       	ld.w	r9,r8[0x0]
80010920:	3d 08       	mov	r8,-48
80010922:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010926:	c0 e8       	rjmp	80010942 <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80010928:	ec f8 00 00 	ld.w	r8,r6[0]
8001092c:	70 09       	ld.w	r9,r8[0x0]
8001092e:	3d 88       	mov	r8,-40
80010930:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010934:	c0 78       	rjmp	80010942 <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80010936:	ec f8 00 00 	ld.w	r8,r6[0]
8001093a:	70 09       	ld.w	r9,r8[0x0]
8001093c:	3d c8       	mov	r8,-36
8001093e:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			if (motor_switch == -1)
80010942:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010946:	3f f8       	mov	r8,-1
80010948:	f0 09 18 00 	cp.b	r9,r8
8001094c:	c1 71       	brne	8001097a <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
8001094e:	fe cc 02 c6 	sub	r12,pc,710
80010952:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80010956:	ec f8 00 00 	ld.w	r8,r6[0]
8001095a:	70 08       	ld.w	r8,r8[0x0]
8001095c:	30 09       	mov	r9,0
8001095e:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80010962:	ec f8 00 00 	ld.w	r8,r6[0]
80010966:	70 09       	ld.w	r9,r8[0x0]
80010968:	30 38       	mov	r8,3
8001096a:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8001096e:	ec f8 00 00 	ld.w	r8,r6[0]
80010972:	70 09       	ld.w	r9,r8[0x0]
80010974:	34 08       	mov	r8,64
80010976:	f3 68 10 bc 	st.b	r9[4284],r8
			}
			
			switch (centralData->mav_mode)
8001097a:	ec f8 00 00 	ld.w	r8,r6[0]
8001097e:	70 08       	ld.w	r8,r8[0x0]
80010980:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80010984:	e0 48 00 d8 	cp.w	r8,216
80010988:	c0 40       	breq	80010990 <set_mav_mode_n_state+0x2f0>
8001098a:	e0 48 00 dc 	cp.w	r8,220
8001098e:	c0 31       	brne	80010994 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
80010990:	f0 16 01 d8 	mcall	r6[1888]
					break;
			}
			
			switch (RC_check)
80010994:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80010998:	5c 68       	casts.b	r8
8001099a:	5b f8       	cp.w	r8,-1
8001099c:	c1 30       	breq	800109c2 <set_mav_mode_n_state+0x322>
8001099e:	58 18       	cp.w	r8,1
800109a0:	c0 40       	breq	800109a8 <set_mav_mode_n_state+0x308>
800109a2:	5b e8       	cp.w	r8,-2
800109a4:	c1 00       	breq	800109c4 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
800109a6:	c4 b8       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
800109a8:	ec f8 00 00 	ld.w	r8,r6[0]
800109ac:	70 09       	ld.w	r9,r8[0x0]
800109ae:	30 48       	mov	r8,4
800109b0:	f3 68 10 bd 	st.b	r9[4285],r8
					centralData->critical_init = false;
800109b4:	ec f8 00 00 	ld.w	r8,r6[0]
800109b8:	70 09       	ld.w	r9,r8[0x0]
800109ba:	30 08       	mov	r8,0
800109bc:	f3 68 10 b9 	st.b	r9[4281],r8
					break;
800109c0:	c1 08       	rjmp	800109e0 <set_mav_mode_n_state+0x340>
				case -1:
					break;
800109c2:	c0 f8       	rjmp	800109e0 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
800109c4:	ec f8 00 00 	ld.w	r8,r6[0]
800109c8:	70 08       	ld.w	r8,r8[0x0]
800109ca:	f1 38 10 b8 	ld.ub	r8,r8[4280]
800109ce:	58 08       	cp.w	r8,0
800109d0:	c3 50       	breq	80010a3a <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
800109d2:	ec f8 00 00 	ld.w	r8,r6[0]
800109d6:	70 09       	ld.w	r9,r8[0x0]
800109d8:	30 68       	mov	r8,6
800109da:	f3 68 10 bd 	st.b	r9[4285],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
800109de:	c2 f8       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
800109e0:	c2 e8       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
800109e2:	ec f8 00 00 	ld.w	r8,r6[0]
800109e6:	70 08       	ld.w	r8,r8[0x0]
800109e8:	f0 fa 0d a4 	ld.w	r10,r8[3492]
800109ec:	30 18       	mov	r8,1
800109ee:	fc 19 3f 80 	movh	r9,0x3f80
800109f2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800109f6:	e0 8c 00 03 	brvs	800109fc <set_mav_mode_n_state+0x35c>
800109fa:	c0 25       	brlt	800109fe <set_mav_mode_n_state+0x35e>
800109fc:	30 08       	mov	r8,0
800109fe:	5c 58       	castu.b	r8
80010a00:	c1 e0       	breq	80010a3c <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80010a02:	ec f8 00 00 	ld.w	r8,r6[0]
80010a06:	70 09       	ld.w	r9,r8[0x0]
80010a08:	34 08       	mov	r8,64
80010a0a:	f3 68 10 bc 	st.b	r9[4284],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80010a0e:	ec f8 00 00 	ld.w	r8,r6[0]
80010a12:	70 08       	ld.w	r8,r8[0x0]
80010a14:	30 19       	mov	r9,1
80010a16:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
80010a1a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80010a1e:	5c 68       	casts.b	r8
80010a20:	58 18       	cp.w	r8,1
80010a22:	c0 d1       	brne	80010a3c <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
80010a24:	ec f8 00 00 	ld.w	r8,r6[0]
80010a28:	70 09       	ld.w	r9,r8[0x0]
80010a2a:	30 38       	mov	r8,3
80010a2c:	f3 68 10 bd 	st.b	r9[4285],r8
80010a30:	c0 68       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
80010a32:	d7 03       	nop
80010a34:	c0 48       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010a36:	d7 03       	nop
80010a38:	c0 28       	rjmp	80010a3c <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80010a3a:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
80010a3c:	2f fd       	sub	sp,-4
80010a3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010a42:	00 00       	add	r0,r0
80010a44:	80 01       	ld.sh	r1,r0[0x0]
80010a46:	05 30       	ld.ub	r0,r2++

80010a48 <run_stabilisation>:

task_return_t run_stabilisation() {
80010a48:	eb cd 40 e0 	pushm	r5-r7,lr
80010a4c:	1a 97       	mov	r7,sp
80010a4e:	20 cd       	sub	sp,48
80010a50:	fe f6 04 18 	ld.w	r6,pc[1048]
80010a54:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
80010a56:	ec f8 00 00 	ld.w	r8,r6[0]
80010a5a:	70 08       	ld.w	r8,r8[0x0]
80010a5c:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80010a60:	58 18       	cp.w	r8,1
80010a62:	c2 d1       	brne	80010abc <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
80010a64:	ec f8 00 00 	ld.w	r8,r6[0]
80010a68:	70 08       	ld.w	r8,r8[0x0]
80010a6a:	f0 c9 f2 c4 	sub	r9,r8,-3388
80010a6e:	ec f8 00 00 	ld.w	r8,r6[0]
80010a72:	70 08       	ld.w	r8,r8[0x0]
80010a74:	10 9a       	mov	r10,r8
80010a76:	ec f8 00 00 	ld.w	r8,r6[0]
80010a7a:	70 08       	ld.w	r8,r8[0x0]
80010a7c:	f0 cb f9 14 	sub	r11,r8,-1772
80010a80:	ec f8 00 00 	ld.w	r8,r6[0]
80010a84:	70 08       	ld.w	r8,r8[0x0]
80010a86:	f0 c8 f4 58 	sub	r8,r8,-2984
80010a8a:	10 9c       	mov	r12,r8
80010a8c:	f0 16 01 9b 	mcall	r6[1644]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
80010a90:	ec f8 00 00 	ld.w	r8,r6[0]
80010a94:	70 08       	ld.w	r8,r8[0x0]
80010a96:	f0 c9 f4 f8 	sub	r9,r8,-2824
80010a9a:	ec f8 00 00 	ld.w	r8,r6[0]
80010a9e:	70 08       	ld.w	r8,r8[0x0]
80010aa0:	f0 ca ef 3c 	sub	r10,r8,-4292
80010aa4:	ec f8 00 00 	ld.w	r8,r6[0]
80010aa8:	70 08       	ld.w	r8,r8[0x0]
80010aaa:	f0 cb f2 c4 	sub	r11,r8,-3388
80010aae:	ec f8 00 00 	ld.w	r8,r6[0]
80010ab2:	70 08       	ld.w	r8,r8[0x0]
80010ab4:	10 9c       	mov	r12,r8
80010ab6:	f0 16 00 96 	mcall	r6[600]
80010aba:	c1 c8       	rjmp	80010af2 <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
80010abc:	ec f8 00 00 	ld.w	r8,r6[0]
80010ac0:	70 08       	ld.w	r8,r8[0x0]
80010ac2:	10 9c       	mov	r12,r8
80010ac4:	f0 16 00 95 	mcall	r6[596]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80010ac8:	ec f8 00 00 	ld.w	r8,r6[0]
80010acc:	70 08       	ld.w	r8,r8[0x0]
80010ace:	f0 c9 f4 f8 	sub	r9,r8,-2824
80010ad2:	ec f8 00 00 	ld.w	r8,r6[0]
80010ad6:	70 08       	ld.w	r8,r8[0x0]
80010ad8:	f0 ca ef 3c 	sub	r10,r8,-4292
80010adc:	ec f8 00 00 	ld.w	r8,r6[0]
80010ae0:	70 08       	ld.w	r8,r8[0x0]
80010ae2:	f0 cb f2 c4 	sub	r11,r8,-3388
80010ae6:	ec f8 00 00 	ld.w	r8,r6[0]
80010aea:	70 08       	ld.w	r8,r8[0x0]
80010aec:	10 9c       	mov	r12,r8
80010aee:	f0 16 00 96 	mcall	r6[600]
	}

	switch(centralData->mav_mode)
80010af2:	ec f8 00 00 	ld.w	r8,r6[0]
80010af6:	70 08       	ld.w	r8,r8[0x0]
80010af8:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80010afc:	e0 48 00 5c 	cp.w	r8,92
80010b00:	e0 80 01 73 	breq	80010de6 <run_stabilisation+0x39e>
80010b04:	e0 89 00 17 	brgt	80010b32 <run_stabilisation+0xea>
80010b08:	e0 48 00 40 	cp.w	r8,64
80010b0c:	e0 80 01 6d 	breq	80010de6 <run_stabilisation+0x39e>
80010b10:	e0 89 00 07 	brgt	80010b1e <run_stabilisation+0xd6>
80010b14:	58 08       	cp.w	r8,0
80010b16:	e0 80 01 68 	breq	80010de6 <run_stabilisation+0x39e>
80010b1a:	e0 8f 01 95 	bral	80010e44 <run_stabilisation+0x3fc>
80010b1e:	e0 48 00 50 	cp.w	r8,80
80010b22:	e0 80 01 62 	breq	80010de6 <run_stabilisation+0x39e>
80010b26:	e0 48 00 58 	cp.w	r8,88
80010b2a:	e0 80 01 5e 	breq	80010de6 <run_stabilisation+0x39e>
80010b2e:	e0 8f 01 8b 	bral	80010e44 <run_stabilisation+0x3fc>
80010b32:	e0 48 00 d0 	cp.w	r8,208
80010b36:	c5 a0       	breq	80010bea <run_stabilisation+0x1a2>
80010b38:	e0 89 00 07 	brgt	80010b46 <run_stabilisation+0xfe>
80010b3c:	e0 48 00 c0 	cp.w	r8,192
80010b40:	c0 d0       	breq	80010b5a <run_stabilisation+0x112>
80010b42:	e0 8f 01 81 	bral	80010e44 <run_stabilisation+0x3fc>
80010b46:	e0 48 00 d8 	cp.w	r8,216
80010b4a:	e0 80 00 c2 	breq	80010cce <run_stabilisation+0x286>
80010b4e:	e0 48 00 dc 	cp.w	r8,220
80010b52:	e0 80 01 04 	breq	80010d5a <run_stabilisation+0x312>
80010b56:	e0 8f 01 77 	bral	80010e44 <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80010b5a:	ec f8 00 00 	ld.w	r8,r6[0]
80010b5e:	70 05       	ld.w	r5,r8[0x0]
80010b60:	ee c8 00 30 	sub	r8,r7,48
80010b64:	10 9c       	mov	r12,r8
80010b66:	fe b0 fb 97 	rcall	80010294 <get_command_from_remote>
80010b6a:	ea c8 fe b8 	sub	r8,r5,-328
80010b6e:	ee c9 00 30 	sub	r9,r7,48
80010b72:	f0 ca 00 00 	sub	r10,r8,0
80010b76:	f2 cb 00 00 	sub	r11,r9,0
80010b7a:	76 0c       	ld.w	r12,r11[0x0]
80010b7c:	95 0c       	st.w	r10[0x0],r12
80010b7e:	76 1c       	ld.w	r12,r11[0x4]
80010b80:	95 1c       	st.w	r10[0x4],r12
80010b82:	76 2c       	ld.w	r12,r11[0x8]
80010b84:	95 2c       	st.w	r10[0x8],r12
80010b86:	76 3b       	ld.w	r11,r11[0xc]
80010b88:	95 3b       	st.w	r10[0xc],r11
80010b8a:	f0 ca ff f0 	sub	r10,r8,-16
80010b8e:	f2 cb ff f0 	sub	r11,r9,-16
80010b92:	76 0c       	ld.w	r12,r11[0x0]
80010b94:	95 0c       	st.w	r10[0x0],r12
80010b96:	76 1c       	ld.w	r12,r11[0x4]
80010b98:	95 1c       	st.w	r10[0x4],r12
80010b9a:	76 2c       	ld.w	r12,r11[0x8]
80010b9c:	95 2c       	st.w	r10[0x8],r12
80010b9e:	76 3b       	ld.w	r11,r11[0xc]
80010ba0:	95 3b       	st.w	r10[0xc],r11
80010ba2:	f2 ea 00 20 	ld.d	r10,r9[32]
80010ba6:	f0 eb 00 20 	st.d	r8[32],r10
80010baa:	72 a9       	ld.w	r9,r9[0x28]
80010bac:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
80010bae:	ec f8 00 00 	ld.w	r8,r6[0]
80010bb2:	70 08       	ld.w	r8,r8[0x0]
80010bb4:	30 09       	mov	r9,0
80010bb6:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80010bba:	ec f8 00 00 	ld.w	r8,r6[0]
80010bbe:	70 08       	ld.w	r8,r8[0x0]
80010bc0:	30 19       	mov	r9,1
80010bc2:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010bc6:	ec f8 00 00 	ld.w	r8,r6[0]
80010bca:	70 08       	ld.w	r8,r8[0x0]
80010bcc:	f0 ca fe b8 	sub	r10,r8,-328
80010bd0:	ec f8 00 00 	ld.w	r8,r6[0]
80010bd4:	70 08       	ld.w	r8,r8[0x0]
80010bd6:	f0 c9 f2 c4 	sub	r9,r8,-3388
80010bda:	ec f8 00 00 	ld.w	r8,r6[0]
80010bde:	70 08       	ld.w	r8,r8[0x0]
80010be0:	12 9b       	mov	r11,r9
80010be2:	10 9c       	mov	r12,r8
80010be4:	f0 16 00 97 	mcall	r6[604]
			break;
80010be8:	c2 e9       	rjmp	80010e44 <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
80010bea:	ec f8 00 00 	ld.w	r8,r6[0]
80010bee:	70 05       	ld.w	r5,r8[0x0]
80010bf0:	ee c8 00 30 	sub	r8,r7,48
80010bf4:	10 9c       	mov	r12,r8
80010bf6:	fe b0 fb 4f 	rcall	80010294 <get_command_from_remote>
80010bfa:	ea c8 fe b8 	sub	r8,r5,-328
80010bfe:	ee c9 00 30 	sub	r9,r7,48
80010c02:	f0 ca 00 00 	sub	r10,r8,0
80010c06:	f2 cb 00 00 	sub	r11,r9,0
80010c0a:	76 0c       	ld.w	r12,r11[0x0]
80010c0c:	95 0c       	st.w	r10[0x0],r12
80010c0e:	76 1c       	ld.w	r12,r11[0x4]
80010c10:	95 1c       	st.w	r10[0x4],r12
80010c12:	76 2c       	ld.w	r12,r11[0x8]
80010c14:	95 2c       	st.w	r10[0x8],r12
80010c16:	76 3b       	ld.w	r11,r11[0xc]
80010c18:	95 3b       	st.w	r10[0xc],r11
80010c1a:	f0 ca ff f0 	sub	r10,r8,-16
80010c1e:	f2 cb ff f0 	sub	r11,r9,-16
80010c22:	76 0c       	ld.w	r12,r11[0x0]
80010c24:	95 0c       	st.w	r10[0x0],r12
80010c26:	76 1c       	ld.w	r12,r11[0x4]
80010c28:	95 1c       	st.w	r10[0x4],r12
80010c2a:	76 2c       	ld.w	r12,r11[0x8]
80010c2c:	95 2c       	st.w	r10[0x8],r12
80010c2e:	76 3b       	ld.w	r11,r11[0xc]
80010c30:	95 3b       	st.w	r10[0xc],r11
80010c32:	f2 ea 00 20 	ld.d	r10,r9[32]
80010c36:	f0 eb 00 20 	st.d	r8[32],r10
80010c3a:	72 a9       	ld.w	r9,r9[0x28]
80010c3c:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80010c3e:	ec f8 00 00 	ld.w	r8,r6[0]
80010c42:	70 08       	ld.w	r8,r8[0x0]
80010c44:	30 09       	mov	r9,0
80010c46:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
80010c4a:	ec f8 00 00 	ld.w	r8,r6[0]
80010c4e:	70 08       	ld.w	r8,r8[0x0]
80010c50:	30 09       	mov	r9,0
80010c52:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
80010c56:	ec f8 00 00 	ld.w	r8,r6[0]
80010c5a:	70 08       	ld.w	r8,r8[0x0]
80010c5c:	ec f9 00 00 	ld.w	r9,r6[0]
80010c60:	72 09       	ld.w	r9,r9[0x0]
80010c62:	f2 fa 01 4c 	ld.w	r10,r9[332]
80010c66:	fc 19 c1 20 	movh	r9,0xc120
80010c6a:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80010c6e:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
80010c72:	ec f8 00 00 	ld.w	r8,r6[0]
80010c76:	70 08       	ld.w	r8,r8[0x0]
80010c78:	ec f9 00 00 	ld.w	r9,r6[0]
80010c7c:	72 09       	ld.w	r9,r9[0x0]
80010c7e:	f2 fa 01 48 	ld.w	r10,r9[328]
80010c82:	fc 19 41 20 	movh	r9,0x4120
80010c86:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80010c8a:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
80010c8e:	ec f8 00 00 	ld.w	r8,r6[0]
80010c92:	70 08       	ld.w	r8,r8[0x0]
80010c94:	ec f9 00 00 	ld.w	r9,r6[0]
80010c98:	72 09       	ld.w	r9,r9[0x0]
80010c9a:	f2 fa 01 54 	ld.w	r10,r9[340]
80010c9e:	fc 19 bf c0 	movh	r9,0xbfc0
80010ca2:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80010ca6:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010caa:	ec f8 00 00 	ld.w	r8,r6[0]
80010cae:	70 08       	ld.w	r8,r8[0x0]
80010cb0:	f0 ca fe b8 	sub	r10,r8,-328
80010cb4:	ec f8 00 00 	ld.w	r8,r6[0]
80010cb8:	70 08       	ld.w	r8,r8[0x0]
80010cba:	f0 c9 f2 c4 	sub	r9,r8,-3388
80010cbe:	ec f8 00 00 	ld.w	r8,r6[0]
80010cc2:	70 08       	ld.w	r8,r8[0x0]
80010cc4:	12 9b       	mov	r11,r9
80010cc6:	10 9c       	mov	r12,r8
80010cc8:	f0 16 00 97 	mcall	r6[604]
			
			break;
80010ccc:	cb c8       	rjmp	80010e44 <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
80010cce:	ec f8 00 00 	ld.w	r8,r6[0]
80010cd2:	70 08       	ld.w	r8,r8[0x0]
80010cd4:	ec f9 00 00 	ld.w	r9,r6[0]
80010cd8:	72 09       	ld.w	r9,r9[0x0]
80010cda:	f0 c8 fe b8 	sub	r8,r8,-328
80010cde:	f2 c9 fe 8c 	sub	r9,r9,-372
80010ce2:	f0 ca 00 00 	sub	r10,r8,0
80010ce6:	f2 cb 00 00 	sub	r11,r9,0
80010cea:	76 0c       	ld.w	r12,r11[0x0]
80010cec:	95 0c       	st.w	r10[0x0],r12
80010cee:	76 1c       	ld.w	r12,r11[0x4]
80010cf0:	95 1c       	st.w	r10[0x4],r12
80010cf2:	76 2c       	ld.w	r12,r11[0x8]
80010cf4:	95 2c       	st.w	r10[0x8],r12
80010cf6:	76 3b       	ld.w	r11,r11[0xc]
80010cf8:	95 3b       	st.w	r10[0xc],r11
80010cfa:	f0 ca ff f0 	sub	r10,r8,-16
80010cfe:	f2 cb ff f0 	sub	r11,r9,-16
80010d02:	76 0c       	ld.w	r12,r11[0x0]
80010d04:	95 0c       	st.w	r10[0x0],r12
80010d06:	76 1c       	ld.w	r12,r11[0x4]
80010d08:	95 1c       	st.w	r10[0x4],r12
80010d0a:	76 2c       	ld.w	r12,r11[0x8]
80010d0c:	95 2c       	st.w	r10[0x8],r12
80010d0e:	76 3b       	ld.w	r11,r11[0xc]
80010d10:	95 3b       	st.w	r10[0xc],r11
80010d12:	f2 ea 00 20 	ld.d	r10,r9[32]
80010d16:	f0 eb 00 20 	st.d	r8[32],r10
80010d1a:	72 a9       	ld.w	r9,r9[0x28]
80010d1c:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80010d1e:	ec f8 00 00 	ld.w	r8,r6[0]
80010d22:	70 08       	ld.w	r8,r8[0x0]
80010d24:	30 09       	mov	r9,0
80010d26:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80010d2a:	ec f8 00 00 	ld.w	r8,r6[0]
80010d2e:	70 08       	ld.w	r8,r8[0x0]
80010d30:	30 19       	mov	r9,1
80010d32:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010d36:	ec f8 00 00 	ld.w	r8,r6[0]
80010d3a:	70 08       	ld.w	r8,r8[0x0]
80010d3c:	f0 ca fe b8 	sub	r10,r8,-328
80010d40:	ec f8 00 00 	ld.w	r8,r6[0]
80010d44:	70 08       	ld.w	r8,r8[0x0]
80010d46:	f0 c9 f2 c4 	sub	r9,r8,-3388
80010d4a:	ec f8 00 00 	ld.w	r8,r6[0]
80010d4e:	70 08       	ld.w	r8,r8[0x0]
80010d50:	12 9b       	mov	r11,r9
80010d52:	10 9c       	mov	r12,r8
80010d54:	f0 16 00 97 	mcall	r6[604]
			break;
80010d58:	c7 68       	rjmp	80010e44 <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80010d5a:	ec f8 00 00 	ld.w	r8,r6[0]
80010d5e:	70 08       	ld.w	r8,r8[0x0]
80010d60:	ec f9 00 00 	ld.w	r9,r6[0]
80010d64:	72 09       	ld.w	r9,r9[0x0]
80010d66:	f0 c8 fe b8 	sub	r8,r8,-328
80010d6a:	f2 c9 fe 8c 	sub	r9,r9,-372
80010d6e:	f0 ca 00 00 	sub	r10,r8,0
80010d72:	f2 cb 00 00 	sub	r11,r9,0
80010d76:	76 0c       	ld.w	r12,r11[0x0]
80010d78:	95 0c       	st.w	r10[0x0],r12
80010d7a:	76 1c       	ld.w	r12,r11[0x4]
80010d7c:	95 1c       	st.w	r10[0x4],r12
80010d7e:	76 2c       	ld.w	r12,r11[0x8]
80010d80:	95 2c       	st.w	r10[0x8],r12
80010d82:	76 3b       	ld.w	r11,r11[0xc]
80010d84:	95 3b       	st.w	r10[0xc],r11
80010d86:	f0 ca ff f0 	sub	r10,r8,-16
80010d8a:	f2 cb ff f0 	sub	r11,r9,-16
80010d8e:	76 0c       	ld.w	r12,r11[0x0]
80010d90:	95 0c       	st.w	r10[0x0],r12
80010d92:	76 1c       	ld.w	r12,r11[0x4]
80010d94:	95 1c       	st.w	r10[0x4],r12
80010d96:	76 2c       	ld.w	r12,r11[0x8]
80010d98:	95 2c       	st.w	r10[0x8],r12
80010d9a:	76 3b       	ld.w	r11,r11[0xc]
80010d9c:	95 3b       	st.w	r10[0xc],r11
80010d9e:	f2 ea 00 20 	ld.d	r10,r9[32]
80010da2:	f0 eb 00 20 	st.d	r8[32],r10
80010da6:	72 a9       	ld.w	r9,r9[0x28]
80010da8:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
80010daa:	ec f8 00 00 	ld.w	r8,r6[0]
80010dae:	70 08       	ld.w	r8,r8[0x0]
80010db0:	30 09       	mov	r9,0
80010db2:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
80010db6:	ec f8 00 00 	ld.w	r8,r6[0]
80010dba:	70 08       	ld.w	r8,r8[0x0]
80010dbc:	30 29       	mov	r9,2
80010dbe:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010dc2:	ec f8 00 00 	ld.w	r8,r6[0]
80010dc6:	70 08       	ld.w	r8,r8[0x0]
80010dc8:	f0 ca fe b8 	sub	r10,r8,-328
80010dcc:	ec f8 00 00 	ld.w	r8,r6[0]
80010dd0:	70 08       	ld.w	r8,r8[0x0]
80010dd2:	f0 c9 f2 c4 	sub	r9,r8,-3388
80010dd6:	ec f8 00 00 	ld.w	r8,r6[0]
80010dda:	70 08       	ld.w	r8,r8[0x0]
80010ddc:	12 9b       	mov	r11,r9
80010dde:	10 9c       	mov	r12,r8
80010de0:	f0 16 00 97 	mcall	r6[604]
			break;
80010de4:	c3 08       	rjmp	80010e44 <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
80010de6:	ec f8 00 00 	ld.w	r8,r6[0]
80010dea:	70 08       	ld.w	r8,r8[0x0]
80010dec:	30 09       	mov	r9,0
80010dee:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80010df2:	30 08       	mov	r8,0
80010df4:	ef 48 ff fc 	st.w	r7[-4],r8
80010df8:	c2 18       	rjmp	80010e3a <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
80010dfa:	ec f8 00 00 	ld.w	r8,r6[0]
80010dfe:	70 0a       	ld.w	r10,r8[0x0]
80010e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010e08:	a5 68       	lsl	r8,0x4
80010e0a:	f4 08 00 08 	add	r8,r10,r8
80010e0e:	f0 c8 f9 14 	sub	r8,r8,-1772
80010e12:	ec fa 08 f4 	ld.w	r10,r6[2292]
80010e16:	a5 69       	lsl	r9,0x4
80010e18:	f4 09 00 09 	add	r9,r10,r9
80010e1c:	20 08       	sub	r8,0
80010e1e:	20 09       	sub	r9,0
80010e20:	72 0a       	ld.w	r10,r9[0x0]
80010e22:	91 0a       	st.w	r8[0x0],r10
80010e24:	72 1a       	ld.w	r10,r9[0x4]
80010e26:	91 1a       	st.w	r8[0x4],r10
80010e28:	72 2a       	ld.w	r10,r9[0x8]
80010e2a:	91 2a       	st.w	r8[0x8],r10
80010e2c:	72 39       	ld.w	r9,r9[0xc]
80010e2e:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80010e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e34:	2f f8       	sub	r8,-1
80010e36:	ef 48 ff fc 	st.w	r7[-4],r8
80010e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e3e:	58 78       	cp.w	r8,7
80010e40:	fe 9a ff dd 	brle	80010dfa <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
80010e44:	ec f8 00 00 	ld.w	r8,r6[0]
80010e48:	70 08       	ld.w	r8,r8[0x0]
80010e4a:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80010e4e:	58 18       	cp.w	r8,1
80010e50:	c0 90       	breq	80010e62 <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
80010e52:	ec f8 00 00 	ld.w	r8,r6[0]
80010e56:	70 08       	ld.w	r8,r8[0x0]
80010e58:	f0 c8 f9 14 	sub	r8,r8,-1772
80010e5c:	10 9c       	mov	r12,r8
80010e5e:	f0 16 00 a9 	mcall	r6[676]
	}
		

}
80010e62:	2f 4d       	sub	sp,-48
80010e64:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010e68:	80 01       	ld.sh	r1,r0[0x0]
80010e6a:	08 d8       	st.w	--r4,r8

80010e6c <gps_task>:

task_return_t gps_task() {
80010e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80010e70:	1a 97       	mov	r7,sp
80010e72:	20 1d       	sub	sp,4
80010e74:	49 16       	lddpc	r6,80010eb8 <gps_task+0x4c>
80010e76:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80010e78:	f0 16 00 0f 	mcall	r6[60]
80010e7c:	18 98       	mov	r8,r12
80010e7e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
80010e82:	ec f8 00 00 	ld.w	r8,r6[0]
80010e86:	70 08       	ld.w	r8,r8[0x0]
80010e88:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80010e8c:	58 18       	cp.w	r8,1
80010e8e:	c1 01       	brne	80010eae <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80010e90:	ec f8 00 00 	ld.w	r8,r6[0]
80010e94:	70 08       	ld.w	r8,r8[0x0]
80010e96:	f0 c9 f4 f8 	sub	r9,r8,-2824
80010e9a:	ec f8 00 00 	ld.w	r8,r6[0]
80010e9e:	70 08       	ld.w	r8,r8[0x0]
80010ea0:	f0 c8 f4 58 	sub	r8,r8,-2984
80010ea4:	12 9b       	mov	r11,r9
80010ea6:	10 9c       	mov	r12,r8
80010ea8:	f0 16 01 49 	mcall	r6[1316]
80010eac:	c0 38       	rjmp	80010eb2 <gps_task+0x46>
	} else {
		gps_update();
80010eae:	f0 16 01 fc 	mcall	r6[2032]
	}
}
80010eb2:	2f fd       	sub	sp,-4
80010eb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010eb8:	80 01       	ld.sh	r1,r0[0x0]
80010eba:	0c fa       	st.b	--r6,r10

80010ebc <run_estimator>:

task_return_t run_estimator()
{
80010ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80010ec0:	1a 97       	mov	r7,sp
80010ec2:	48 46       	lddpc	r6,80010ed0 <run_estimator+0x14>
80010ec4:	1e 26       	rsub	r6,pc
	estimator_loop();
80010ec6:	f0 16 01 65 	mcall	r6[1428]
}
80010eca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010ece:	00 00       	add	r0,r0
80010ed0:	80 01       	ld.sh	r1,r0[0x0]
80010ed2:	0d 48       	ld.w	r8,--r6

80010ed4 <run_navigation_task>:

task_return_t run_navigation_task()
{
80010ed4:	eb cd 40 c0 	pushm	r6-r7,lr
80010ed8:	1a 97       	mov	r7,sp
80010eda:	20 1d       	sub	sp,4
80010edc:	fe f6 02 20 	ld.w	r6,pc[544]
80010ee0:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
80010ee2:	ec f8 00 00 	ld.w	r8,r6[0]
80010ee6:	70 08       	ld.w	r8,r8[0x0]
80010ee8:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80010eec:	58 48       	cp.w	r8,4
80010eee:	c0 50       	breq	80010ef8 <run_navigation_task+0x24>
80010ef0:	58 58       	cp.w	r8,5
80010ef2:	e0 80 00 b5 	breq	8001105c <run_navigation_task+0x188>
80010ef6:	cf f8       	rjmp	800110f4 <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
80010ef8:	ec f8 00 00 	ld.w	r8,r6[0]
80010efc:	70 08       	ld.w	r8,r8[0x0]
80010efe:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80010f02:	e0 48 00 d8 	cp.w	r8,216
80010f06:	c7 40       	breq	80010fee <run_navigation_task+0x11a>
80010f08:	e0 48 00 dc 	cp.w	r8,220
80010f0c:	e0 81 00 f1 	brne	800110ee <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80010f10:	ec f8 00 00 	ld.w	r8,r6[0]
80010f14:	70 08       	ld.w	r8,r8[0x0]
80010f16:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80010f1a:	58 08       	cp.w	r8,0
80010f1c:	c3 10       	breq	80010f7e <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80010f1e:	ec f8 00 00 	ld.w	r8,r6[0]
80010f22:	70 08       	ld.w	r8,r8[0x0]
80010f24:	20 cd       	sub	sp,48
80010f26:	1a 99       	mov	r9,sp
80010f28:	12 9b       	mov	r11,r9
80010f2a:	f0 ca ef e0 	sub	r10,r8,-4128
80010f2e:	f6 c8 00 00 	sub	r8,r11,0
80010f32:	f4 c9 00 00 	sub	r9,r10,0
80010f36:	72 0c       	ld.w	r12,r9[0x0]
80010f38:	91 0c       	st.w	r8[0x0],r12
80010f3a:	72 1c       	ld.w	r12,r9[0x4]
80010f3c:	91 1c       	st.w	r8[0x4],r12
80010f3e:	72 2c       	ld.w	r12,r9[0x8]
80010f40:	91 2c       	st.w	r8[0x8],r12
80010f42:	72 39       	ld.w	r9,r9[0xc]
80010f44:	91 39       	st.w	r8[0xc],r9
80010f46:	f6 c8 ff f0 	sub	r8,r11,-16
80010f4a:	f4 c9 ff f0 	sub	r9,r10,-16
80010f4e:	72 0c       	ld.w	r12,r9[0x0]
80010f50:	91 0c       	st.w	r8[0x0],r12
80010f52:	72 1c       	ld.w	r12,r9[0x4]
80010f54:	91 1c       	st.w	r8[0x4],r12
80010f56:	72 2c       	ld.w	r12,r9[0x8]
80010f58:	91 2c       	st.w	r8[0x8],r12
80010f5a:	72 39       	ld.w	r9,r9[0xc]
80010f5c:	91 39       	st.w	r8[0xc],r9
80010f5e:	f6 c8 ff e0 	sub	r8,r11,-32
80010f62:	f4 c9 ff e0 	sub	r9,r10,-32
80010f66:	72 0a       	ld.w	r10,r9[0x0]
80010f68:	91 0a       	st.w	r8[0x0],r10
80010f6a:	72 1a       	ld.w	r10,r9[0x4]
80010f6c:	91 1a       	st.w	r8[0x4],r10
80010f6e:	72 2a       	ld.w	r10,r9[0x8]
80010f70:	91 2a       	st.w	r8[0x8],r10
80010f72:	72 39       	ld.w	r9,r9[0xc]
80010f74:	91 39       	st.w	r8[0xc],r9
80010f76:	f0 16 00 8a 	mcall	r6[552]
80010f7a:	2f 4d       	sub	sp,-48
80010f7c:	c3 78       	rjmp	80010fea <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80010f7e:	ec f8 00 00 	ld.w	r8,r6[0]
80010f82:	70 08       	ld.w	r8,r8[0x0]
80010f84:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80010f88:	58 08       	cp.w	r8,0
80010f8a:	c3 00       	breq	80010fea <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80010f8c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f90:	70 08       	ld.w	r8,r8[0x0]
80010f92:	20 cd       	sub	sp,48
80010f94:	1a 99       	mov	r9,sp
80010f96:	12 9b       	mov	r11,r9
80010f98:	f0 ca ef b0 	sub	r10,r8,-4176
80010f9c:	f6 c8 00 00 	sub	r8,r11,0
80010fa0:	f4 c9 00 00 	sub	r9,r10,0
80010fa4:	72 0c       	ld.w	r12,r9[0x0]
80010fa6:	91 0c       	st.w	r8[0x0],r12
80010fa8:	72 1c       	ld.w	r12,r9[0x4]
80010faa:	91 1c       	st.w	r8[0x4],r12
80010fac:	72 2c       	ld.w	r12,r9[0x8]
80010fae:	91 2c       	st.w	r8[0x8],r12
80010fb0:	72 39       	ld.w	r9,r9[0xc]
80010fb2:	91 39       	st.w	r8[0xc],r9
80010fb4:	f6 c8 ff f0 	sub	r8,r11,-16
80010fb8:	f4 c9 ff f0 	sub	r9,r10,-16
80010fbc:	72 0c       	ld.w	r12,r9[0x0]
80010fbe:	91 0c       	st.w	r8[0x0],r12
80010fc0:	72 1c       	ld.w	r12,r9[0x4]
80010fc2:	91 1c       	st.w	r8[0x4],r12
80010fc4:	72 2c       	ld.w	r12,r9[0x8]
80010fc6:	91 2c       	st.w	r8[0x8],r12
80010fc8:	72 39       	ld.w	r9,r9[0xc]
80010fca:	91 39       	st.w	r8[0xc],r9
80010fcc:	f6 c8 ff e0 	sub	r8,r11,-32
80010fd0:	f4 c9 ff e0 	sub	r9,r10,-32
80010fd4:	72 0a       	ld.w	r10,r9[0x0]
80010fd6:	91 0a       	st.w	r8[0x0],r10
80010fd8:	72 1a       	ld.w	r10,r9[0x4]
80010fda:	91 1a       	st.w	r8[0x4],r10
80010fdc:	72 2a       	ld.w	r10,r9[0x8]
80010fde:	91 2a       	st.w	r8[0x8],r10
80010fe0:	72 39       	ld.w	r9,r9[0xc]
80010fe2:	91 39       	st.w	r8[0xc],r9
80010fe4:	f0 16 00 8a 	mcall	r6[552]
80010fe8:	2f 4d       	sub	sp,-48
						}
						break;
80010fea:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
80010fec:	c8 48       	rjmp	800110f4 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
80010fee:	ec f8 00 00 	ld.w	r8,r6[0]
80010ff2:	70 08       	ld.w	r8,r8[0x0]
80010ff4:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80010ff8:	58 08       	cp.w	r8,0
80010ffa:	c7 c0       	breq	800110f2 <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80010ffc:	ec f8 00 00 	ld.w	r8,r6[0]
80011000:	70 08       	ld.w	r8,r8[0x0]
80011002:	20 cd       	sub	sp,48
80011004:	1a 99       	mov	r9,sp
80011006:	12 9b       	mov	r11,r9
80011008:	f0 ca ef b0 	sub	r10,r8,-4176
8001100c:	f6 c8 00 00 	sub	r8,r11,0
80011010:	f4 c9 00 00 	sub	r9,r10,0
80011014:	72 0c       	ld.w	r12,r9[0x0]
80011016:	91 0c       	st.w	r8[0x0],r12
80011018:	72 1c       	ld.w	r12,r9[0x4]
8001101a:	91 1c       	st.w	r8[0x4],r12
8001101c:	72 2c       	ld.w	r12,r9[0x8]
8001101e:	91 2c       	st.w	r8[0x8],r12
80011020:	72 39       	ld.w	r9,r9[0xc]
80011022:	91 39       	st.w	r8[0xc],r9
80011024:	f6 c8 ff f0 	sub	r8,r11,-16
80011028:	f4 c9 ff f0 	sub	r9,r10,-16
8001102c:	72 0c       	ld.w	r12,r9[0x0]
8001102e:	91 0c       	st.w	r8[0x0],r12
80011030:	72 1c       	ld.w	r12,r9[0x4]
80011032:	91 1c       	st.w	r8[0x4],r12
80011034:	72 2c       	ld.w	r12,r9[0x8]
80011036:	91 2c       	st.w	r8[0x8],r12
80011038:	72 39       	ld.w	r9,r9[0xc]
8001103a:	91 39       	st.w	r8[0xc],r9
8001103c:	f6 c8 ff e0 	sub	r8,r11,-32
80011040:	f4 c9 ff e0 	sub	r9,r10,-32
80011044:	72 0a       	ld.w	r10,r9[0x0]
80011046:	91 0a       	st.w	r8[0x0],r10
80011048:	72 1a       	ld.w	r10,r9[0x4]
8001104a:	91 1a       	st.w	r8[0x4],r10
8001104c:	72 2a       	ld.w	r10,r9[0x8]
8001104e:	91 2a       	st.w	r8[0x8],r10
80011050:	72 39       	ld.w	r9,r9[0xc]
80011052:	91 39       	st.w	r8[0xc],r9
80011054:	f0 16 00 8a 	mcall	r6[552]
80011058:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
8001105a:	c4 d8       	rjmp	800110f4 <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
8001105c:	ec f8 00 00 	ld.w	r8,r6[0]
80011060:	70 08       	ld.w	r8,r8[0x0]
80011062:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80011066:	3d 88       	mov	r8,-40
80011068:	f0 09 18 00 	cp.b	r9,r8
8001106c:	c0 a0       	breq	80011080 <run_navigation_task+0x1ac>
8001106e:	ec f8 00 00 	ld.w	r8,r6[0]
80011072:	70 08       	ld.w	r8,r8[0x0]
80011074:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80011078:	3d c8       	mov	r8,-36
8001107a:	f0 09 18 00 	cp.b	r9,r8
8001107e:	c3 b1       	brne	800110f4 <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80011080:	ec f8 00 00 	ld.w	r8,r6[0]
80011084:	70 08       	ld.w	r8,r8[0x0]
80011086:	f1 38 10 b9 	ld.ub	r8,r8[4281]
8001108a:	58 08       	cp.w	r8,0
8001108c:	c3 40       	breq	800110f4 <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
8001108e:	ec f8 00 00 	ld.w	r8,r6[0]
80011092:	70 08       	ld.w	r8,r8[0x0]
80011094:	20 cd       	sub	sp,48
80011096:	1a 99       	mov	r9,sp
80011098:	12 9b       	mov	r11,r9
8001109a:	f0 ca ef 80 	sub	r10,r8,-4224
8001109e:	f6 c8 00 00 	sub	r8,r11,0
800110a2:	f4 c9 00 00 	sub	r9,r10,0
800110a6:	72 0c       	ld.w	r12,r9[0x0]
800110a8:	91 0c       	st.w	r8[0x0],r12
800110aa:	72 1c       	ld.w	r12,r9[0x4]
800110ac:	91 1c       	st.w	r8[0x4],r12
800110ae:	72 2c       	ld.w	r12,r9[0x8]
800110b0:	91 2c       	st.w	r8[0x8],r12
800110b2:	72 39       	ld.w	r9,r9[0xc]
800110b4:	91 39       	st.w	r8[0xc],r9
800110b6:	f6 c8 ff f0 	sub	r8,r11,-16
800110ba:	f4 c9 ff f0 	sub	r9,r10,-16
800110be:	72 0c       	ld.w	r12,r9[0x0]
800110c0:	91 0c       	st.w	r8[0x0],r12
800110c2:	72 1c       	ld.w	r12,r9[0x4]
800110c4:	91 1c       	st.w	r8[0x4],r12
800110c6:	72 2c       	ld.w	r12,r9[0x8]
800110c8:	91 2c       	st.w	r8[0x8],r12
800110ca:	72 39       	ld.w	r9,r9[0xc]
800110cc:	91 39       	st.w	r8[0xc],r9
800110ce:	f6 c8 ff e0 	sub	r8,r11,-32
800110d2:	f4 c9 ff e0 	sub	r9,r10,-32
800110d6:	72 0a       	ld.w	r10,r9[0x0]
800110d8:	91 0a       	st.w	r8[0x0],r10
800110da:	72 1a       	ld.w	r10,r9[0x4]
800110dc:	91 1a       	st.w	r8[0x4],r10
800110de:	72 2a       	ld.w	r10,r9[0x8]
800110e0:	91 2a       	st.w	r8[0x8],r10
800110e2:	72 39       	ld.w	r9,r9[0xc]
800110e4:	91 39       	st.w	r8[0xc],r9
800110e6:	f0 16 00 8a 	mcall	r6[552]
800110ea:	2f 4d       	sub	sp,-48
800110ec:	c0 48       	rjmp	800110f4 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800110ee:	d7 03       	nop
800110f0:	c0 28       	rjmp	800110f4 <run_navigation_task+0x220>
800110f2:	d7 03       	nop
					}
				}
				break;
		}
	
}
800110f4:	2f fd       	sub	sp,-4
800110f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800110fa:	00 00       	add	r0,r0
800110fc:	80 01       	ld.sh	r1,r0[0x0]
800110fe:	0d 64       	ld.uh	r4,--r6

80011100 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
80011100:	eb cd 40 c0 	pushm	r6-r7,lr
80011104:	1a 97       	mov	r7,sp
80011106:	20 3d       	sub	sp,12
80011108:	4a d6       	lddpc	r6,800111bc <run_barometer+0xbc>
8001110a:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
8001110c:	f0 16 00 29 	mcall	r6[164]
80011110:	18 98       	mov	r8,r12
80011112:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
80011116:	f0 16 00 32 	mcall	r6[200]
8001111a:	18 98       	mov	r8,r12
8001111c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80011120:	ec f8 00 00 	ld.w	r8,r6[0]
80011124:	70 08       	ld.w	r8,r8[0x0]
80011126:	f0 f8 10 e4 	ld.w	r8,r8[4324]
8001112a:	10 9c       	mov	r12,r8
8001112c:	f0 16 01 ba 	mcall	r6[1768]
80011130:	18 98       	mov	r8,r12
80011132:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
80011136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001113a:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8001113e:	58 18       	cp.w	r8,1
80011140:	c0 b1       	brne	80011156 <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
80011142:	ec f8 00 00 	ld.w	r8,r6[0]
80011146:	70 08       	ld.w	r8,r8[0x0]
80011148:	f0 c8 f4 58 	sub	r8,r8,-2984
8001114c:	ee fb ff fc 	ld.w	r11,r7[-4]
80011150:	10 9c       	mov	r12,r8
80011152:	f0 16 01 94 	mcall	r6[1616]
	} 
	centralData->pressure=*pressure;
80011156:	ec f8 00 00 	ld.w	r8,r6[0]
8001115a:	70 08       	ld.w	r8,r8[0x0]
8001115c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011160:	f0 c8 ef 3c 	sub	r8,r8,-4292
80011164:	f0 ca 00 00 	sub	r10,r8,0
80011168:	f2 cb 00 00 	sub	r11,r9,0
8001116c:	76 0c       	ld.w	r12,r11[0x0]
8001116e:	95 0c       	st.w	r10[0x0],r12
80011170:	76 1c       	ld.w	r12,r11[0x4]
80011172:	95 1c       	st.w	r10[0x4],r12
80011174:	76 2c       	ld.w	r12,r11[0x8]
80011176:	95 2c       	st.w	r10[0x8],r12
80011178:	76 3b       	ld.w	r11,r11[0xc]
8001117a:	95 3b       	st.w	r10[0xc],r11
8001117c:	f0 ca ff f0 	sub	r10,r8,-16
80011180:	f2 cb ff f0 	sub	r11,r9,-16
80011184:	76 0c       	ld.w	r12,r11[0x0]
80011186:	95 0c       	st.w	r10[0x0],r12
80011188:	76 1c       	ld.w	r12,r11[0x4]
8001118a:	95 1c       	st.w	r10[0x4],r12
8001118c:	76 2c       	ld.w	r12,r11[0x8]
8001118e:	95 2c       	st.w	r10[0x8],r12
80011190:	76 3b       	ld.w	r11,r11[0xc]
80011192:	95 3b       	st.w	r10[0xc],r11
80011194:	f0 ca ff e0 	sub	r10,r8,-32
80011198:	f2 cb ff e0 	sub	r11,r9,-32
8001119c:	76 0c       	ld.w	r12,r11[0x0]
8001119e:	95 0c       	st.w	r10[0x0],r12
800111a0:	76 1c       	ld.w	r12,r11[0x4]
800111a2:	95 1c       	st.w	r10[0x4],r12
800111a4:	76 2c       	ld.w	r12,r11[0x8]
800111a6:	95 2c       	st.w	r10[0x8],r12
800111a8:	76 3b       	ld.w	r11,r11[0xc]
800111aa:	95 3b       	st.w	r10[0xc],r11
800111ac:	f2 ea 00 30 	ld.d	r10,r9[48]
800111b0:	f0 eb 00 30 	st.d	r8[48],r10
	
}
800111b4:	2f dd       	sub	sp,-12
800111b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800111ba:	00 00       	add	r0,r0
800111bc:	80 01       	ld.sh	r1,r0[0x0]
800111be:	0f 8e       	ld.ub	lr,r7[0x0]

800111c0 <create_tasks>:


void create_tasks() {
800111c0:	eb cd 40 c0 	pushm	r6-r7,lr
800111c4:	1a 97       	mov	r7,sp
800111c6:	4a 96       	lddpc	r6,80011268 <create_tasks+0xa8>
800111c8:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800111ca:	ec f8 01 2c 	ld.w	r8,r6[300]
800111ce:	10 9c       	mov	r12,r8
800111d0:	f0 16 01 09 	mcall	r6[1060]
	
	centralData = get_central_data();
800111d4:	f0 16 00 32 	mcall	r6[200]
800111d8:	18 99       	mov	r9,r12
800111da:	ec f8 00 00 	ld.w	r8,r6[0]
800111de:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800111e0:	ec f8 08 64 	ld.w	r8,r6[2148]
800111e4:	ec fc 01 2c 	ld.w	r12,r6[300]
800111e8:	30 29       	mov	r9,2
800111ea:	e0 6a 0f a0 	mov	r10,4000
800111ee:	30 0b       	mov	r11,0
800111f0:	f0 16 00 61 	mcall	r6[388]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800111f4:	ec f8 07 2c 	ld.w	r8,r6[1836]
800111f8:	ec fc 01 2c 	ld.w	r12,r6[300]
800111fc:	30 29       	mov	r9,2
800111fe:	e0 6a 3a 98 	mov	r10,15000
80011202:	30 1b       	mov	r11,1
80011204:	f0 16 00 61 	mcall	r6[388]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80011208:	ec f8 01 2c 	ld.w	r8,r6[300]
8001120c:	30 19       	mov	r9,1
8001120e:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
80011212:	ec f8 07 b0 	ld.w	r8,r6[1968]
80011216:	ec fc 01 2c 	ld.w	r12,r6[300]
8001121a:	30 29       	mov	r9,2
8001121c:	e0 7a 86 a0 	mov	r10,100000
80011220:	30 2b       	mov	r11,2
80011222:	f0 16 00 61 	mcall	r6[388]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
80011226:	ec f8 06 b8 	ld.w	r8,r6[1720]
8001122a:	ec fc 01 2c 	ld.w	r12,r6[300]
8001122e:	30 29       	mov	r9,2
80011230:	e0 6a 27 10 	mov	r10,10000
80011234:	30 3b       	mov	r11,3
80011236:	f0 16 00 61 	mcall	r6[388]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
8001123a:	ec f8 07 08 	ld.w	r8,r6[1800]
8001123e:	ec fc 01 2c 	ld.w	r12,r6[300]
80011242:	30 29       	mov	r9,2
80011244:	e2 7a 0d 40 	mov	r10,200000
80011248:	30 4b       	mov	r11,4
8001124a:	f0 16 00 61 	mcall	r6[388]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
8001124e:	ec f8 03 84 	ld.w	r8,r6[900]
80011252:	ec fc 01 2c 	ld.w	r12,r6[300]
80011256:	30 29       	mov	r9,2
80011258:	e0 6a 0f a0 	mov	r10,4000
8001125c:	30 5b       	mov	r11,5
8001125e:	f0 16 00 61 	mcall	r6[388]

80011262:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011266:	00 00       	add	r0,r0
80011268:	80 01       	ld.sh	r1,r0[0x0]
8001126a:	10 4c       	or	r12,r8

8001126c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001126c:	eb cd 40 80 	pushm	r7,lr
80011270:	1a 97       	mov	r7,sp
80011272:	20 3d       	sub	sp,12
80011274:	18 98       	mov	r8,r12
80011276:	ef 4b ff f4 	st.w	r7[-12],r11
8001127a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001127e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011282:	90 08       	ld.sh	r8,r8[0x0]
80011284:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80011288:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001128c:	f3 e8 20 08 	eor	r8,r9,r8
80011290:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80011294:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011298:	a5 68       	lsl	r8,0x4
8001129a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001129e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800112a2:	f3 e8 20 08 	eor	r8,r9,r8
800112a6:	5c 58       	castu.b	r8
800112a8:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800112ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800112b0:	90 08       	ld.sh	r8,r8[0x0]
800112b2:	5c 78       	castu.h	r8
800112b4:	a9 88       	lsr	r8,0x8
800112b6:	5c 88       	casts.h	r8
800112b8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800112bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800112c0:	a9 68       	lsl	r8,0x8
800112c2:	5c 88       	casts.h	r8
800112c4:	f3 e8 20 08 	eor	r8,r9,r8
800112c8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800112cc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800112d0:	a3 78       	lsl	r8,0x3
800112d2:	5c 88       	casts.h	r8
800112d4:	f3 e8 20 08 	eor	r8,r9,r8
800112d8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800112dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800112e0:	a5 88       	lsr	r8,0x4
800112e2:	5c 58       	castu.b	r8
800112e4:	f3 e8 20 08 	eor	r8,r9,r8
800112e8:	5c 88       	casts.h	r8
800112ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800112ee:	b2 08       	st.h	r9[0x0],r8
}
800112f0:	2f dd       	sub	sp,-12
800112f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800112f6 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800112f6:	eb cd 40 80 	pushm	r7,lr
800112fa:	1a 97       	mov	r7,sp
800112fc:	20 1d       	sub	sp,4
800112fe:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80011302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011306:	3f f8       	mov	r8,-1
80011308:	b2 08       	st.h	r9[0x0],r8
}
8001130a:	2f fd       	sub	sp,-4
8001130c:	e3 cd 80 80 	ldm	sp++,r7,pc

80011310 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80011310:	eb cd 40 c0 	pushm	r6-r7,lr
80011314:	1a 97       	mov	r7,sp
80011316:	20 1d       	sub	sp,4
80011318:	48 96       	lddpc	r6,8001133c <mavlink_get_channel_status+0x2c>
8001131a:	1e 26       	rsub	r6,pc
8001131c:	18 98       	mov	r8,r12
8001131e:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80011322:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80011326:	f0 09 15 04 	lsl	r9,r8,0x4
8001132a:	ec f8 08 f0 	ld.w	r8,r6[2288]
8001132e:	f2 08 00 08 	add	r8,r9,r8
}
80011332:	10 9c       	mov	r12,r8
80011334:	2f fd       	sub	sp,-4
80011336:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001133a:	00 00       	add	r0,r0
8001133c:	80 01       	ld.sh	r1,r0[0x0]
8001133e:	11 9e       	ld.ub	lr,r8[0x1]

80011340 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80011340:	eb cd 40 c0 	pushm	r6-r7,lr
80011344:	1a 97       	mov	r7,sp
80011346:	20 1d       	sub	sp,4
80011348:	48 a6       	lddpc	r6,80011370 <mavlink_get_channel_buffer+0x30>
8001134a:	1e 26       	rsub	r6,pc
8001134c:	18 98       	mov	r8,r12
8001134e:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
80011352:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80011356:	12 98       	mov	r8,r9
80011358:	a5 68       	lsl	r8,0x4
8001135a:	12 08       	add	r8,r9
8001135c:	a5 68       	lsl	r8,0x4
8001135e:	10 99       	mov	r9,r8
80011360:	ec f8 08 ec 	ld.w	r8,r6[2284]
80011364:	f2 08 00 08 	add	r8,r9,r8
}
80011368:	10 9c       	mov	r12,r8
8001136a:	2f fd       	sub	sp,-4
8001136c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011370:	80 01       	ld.sh	r1,r0[0x0]
80011372:	11 ce       	ld.ub	lr,r8[0x4]

80011374 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80011374:	eb cd 40 c0 	pushm	r6-r7,lr
80011378:	1a 97       	mov	r7,sp
8001137a:	20 1d       	sub	sp,4
8001137c:	48 66       	lddpc	r6,80011394 <mavlink_start_checksum+0x20>
8001137e:	1e 26       	rsub	r6,pc
80011380:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80011384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011388:	10 9c       	mov	r12,r8
8001138a:	cb 6f       	rcall	800112f6 <crc_init>
}
8001138c:	2f fd       	sub	sp,-4
8001138e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011392:	00 00       	add	r0,r0
80011394:	80 01       	ld.sh	r1,r0[0x0]
80011396:	12 02       	add	r2,r9

80011398 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80011398:	eb cd 40 c0 	pushm	r6-r7,lr
8001139c:	1a 97       	mov	r7,sp
8001139e:	20 2d       	sub	sp,8
800113a0:	48 96       	lddpc	r6,800113c4 <mavlink_update_checksum+0x2c>
800113a2:	1e 26       	rsub	r6,pc
800113a4:	ef 4c ff fc 	st.w	r7[-4],r12
800113a8:	16 98       	mov	r8,r11
800113aa:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
800113ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800113b2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800113b6:	12 9b       	mov	r11,r9
800113b8:	10 9c       	mov	r12,r8
800113ba:	c5 9f       	rcall	8001126c <crc_accumulate>
}
800113bc:	2f ed       	sub	sp,-8
800113be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800113c2:	00 00       	add	r0,r0
800113c4:	80 01       	ld.sh	r1,r0[0x0]
800113c6:	12 26       	rsub	r6,r9

800113c8 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
800113c8:	eb cd 40 c0 	pushm	r6-r7,lr
800113cc:	1a 97       	mov	r7,sp
800113ce:	20 7d       	sub	sp,28
800113d0:	fe f6 03 b8 	ld.w	r6,pc[952]
800113d4:	1e 26       	rsub	r6,pc
800113d6:	16 98       	mov	r8,r11
800113d8:	ef 4a ff e8 	st.w	r7[-24],r10
800113dc:	ef 49 ff e4 	st.w	r7[-28],r9
800113e0:	18 99       	mov	r9,r12
800113e2:	ef 69 ff f0 	st.b	r7[-16],r9
800113e6:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
800113ea:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800113ee:	10 9c       	mov	r12,r8
800113f0:	ca 8f       	rcall	80011340 <mavlink_get_channel_buffer>
800113f2:	18 98       	mov	r8,r12
800113f4:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
800113f8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800113fc:	10 9c       	mov	r12,r8
800113fe:	c8 9f       	rcall	80011310 <mavlink_get_channel_status>
80011400:	18 98       	mov	r8,r12
80011402:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
80011406:	30 08       	mov	r8,0
80011408:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
8001140c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011410:	30 08       	mov	r8,0
80011412:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
80011414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011418:	70 18       	ld.w	r8,r8[0x4]
8001141a:	58 98       	cp.w	r8,9
8001141c:	e0 8b 01 70 	brhi	800116fc <mavlink_parse_char+0x334>
80011420:	fe c9 ff f8 	sub	r9,pc,-8
80011424:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80011428:	e0 8f 00 14 	bral	80011450 <mavlink_parse_char+0x88>
8001142c:	e0 8f 00 12 	bral	80011450 <mavlink_parse_char+0x88>
80011430:	e0 8f 00 28 	bral	80011480 <mavlink_parse_char+0xb8>
80011434:	e0 8f 00 69 	bral	80011506 <mavlink_parse_char+0x13e>
80011438:	e0 8f 00 57 	bral	800114e6 <mavlink_parse_char+0x11e>
8001143c:	e0 8f 00 75 	bral	80011526 <mavlink_parse_char+0x15e>
80011440:	e0 8f 00 83 	bral	80011546 <mavlink_parse_char+0x17e>
80011444:	e0 8f 00 9b 	bral	8001157a <mavlink_parse_char+0x1b2>
80011448:	e0 8f 00 c2 	bral	800115cc <mavlink_parse_char+0x204>
8001144c:	e0 8f 01 08 	bral	8001165c <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80011450:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011454:	3f e8       	mov	r8,-2
80011456:	f0 09 18 00 	cp.b	r9,r8
8001145a:	e0 81 01 4c 	brne	800116f2 <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
8001145e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011462:	30 29       	mov	r9,2
80011464:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
80011466:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001146a:	30 08       	mov	r8,0
8001146c:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
8001146e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011472:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011476:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80011478:	ee fc ff f4 	ld.w	r12,r7[-12]
8001147c:	c7 cf       	rcall	80011374 <mavlink_start_checksum>
		}
		break;
8001147e:	c3 f9       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80011480:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011484:	11 88       	ld.ub	r8,r8[0x0]
80011486:	58 08       	cp.w	r8,0
80011488:	c1 a0       	breq	800114bc <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
8001148a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001148e:	11 98       	ld.ub	r8,r8[0x1]
80011490:	2f f8       	sub	r8,-1
80011492:	5c 58       	castu.b	r8
80011494:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011498:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
8001149a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001149e:	11 a8       	ld.ub	r8,r8[0x2]
800114a0:	2f f8       	sub	r8,-1
800114a2:	5c 58       	castu.b	r8
800114a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800114a8:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
800114aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800114ae:	30 08       	mov	r8,0
800114b0:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800114b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800114b6:	30 19       	mov	r9,1
800114b8:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
800114ba:	c2 19       	rjmp	800116fc <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
800114bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800114c0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800114c4:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
800114c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800114ca:	30 08       	mov	r8,0
800114cc:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
800114d0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800114d4:	10 9b       	mov	r11,r8
800114d6:	ee fc ff f4 	ld.w	r12,r7[-12]
800114da:	c5 ff       	rcall	80011398 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
800114dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800114e0:	30 49       	mov	r9,4
800114e2:	91 19       	st.w	r8[0x4],r9
		}
		break;
800114e4:	c0 c9       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
800114e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800114ea:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800114ee:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
800114f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800114f4:	10 9b       	mov	r11,r8
800114f6:	ee fc ff f4 	ld.w	r12,r7[-12]
800114fa:	c4 ff       	rcall	80011398 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
800114fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011500:	30 39       	mov	r9,3
80011502:	91 19       	st.w	r8[0x4],r9
		break;
80011504:	cf c8       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80011506:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001150a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001150e:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80011510:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011514:	10 9b       	mov	r11,r8
80011516:	ee fc ff f4 	ld.w	r12,r7[-12]
8001151a:	c3 ff       	rcall	80011398 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
8001151c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011520:	30 59       	mov	r9,5
80011522:	91 19       	st.w	r8[0x4],r9
		break;
80011524:	ce c8       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
80011526:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001152a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001152e:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80011530:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011534:	10 9b       	mov	r11,r8
80011536:	ee fc ff f4 	ld.w	r12,r7[-12]
8001153a:	c2 ff       	rcall	80011398 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
8001153c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011540:	30 69       	mov	r9,6
80011542:	91 19       	st.w	r8[0x4],r9
		break;
80011544:	cd c8       	rjmp	800116fc <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
80011546:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001154a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001154e:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80011550:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011554:	10 9b       	mov	r11,r8
80011556:	ee fc ff f4 	ld.w	r12,r7[-12]
8001155a:	c1 ff       	rcall	80011398 <mavlink_update_checksum>
		if (rxmsg->len == 0)
8001155c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011560:	11 b8       	ld.ub	r8,r8[0x3]
80011562:	58 08       	cp.w	r8,0
80011564:	c0 61       	brne	80011570 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80011566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001156a:	30 89       	mov	r9,8
8001156c:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
8001156e:	cc 78       	rjmp	800116fc <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80011570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011574:	30 79       	mov	r9,7
80011576:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011578:	cc 28       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
8001157a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001157e:	2f 88       	sub	r8,-8
80011580:	10 9a       	mov	r10,r8
80011582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011586:	f1 38 00 08 	ld.ub	r8,r8[8]
8001158a:	10 99       	mov	r9,r8
8001158c:	12 0a       	add	r10,r9
8001158e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011592:	b4 89       	st.b	r10[0x0],r9
80011594:	2f f8       	sub	r8,-1
80011596:	5c 58       	castu.b	r8
80011598:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001159c:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
800115a0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800115a4:	10 9b       	mov	r11,r8
800115a6:	ee fc ff f4 	ld.w	r12,r7[-12]
800115aa:	cf 7e       	rcall	80011398 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
800115ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800115b0:	f1 39 00 08 	ld.ub	r9,r8[8]
800115b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800115b8:	11 b8       	ld.ub	r8,r8[0x3]
800115ba:	f0 09 18 00 	cp.b	r9,r8
800115be:	e0 81 00 9c 	brne	800116f6 <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
800115c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800115c6:	30 89       	mov	r9,8
800115c8:	91 19       	st.w	r8[0x4],r9
		}
		break;
800115ca:	c9 98       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
800115cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800115d0:	11 f8       	ld.ub	r8,r8[0x7]
800115d2:	ec f9 08 e8 	ld.w	r9,r6[2280]
800115d6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800115da:	10 9b       	mov	r11,r8
800115dc:	ee fc ff f4 	ld.w	r12,r7[-12]
800115e0:	cd ce       	rcall	80011398 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
800115e2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800115e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800115ea:	90 08       	ld.sh	r8,r8[0x0]
800115ec:	5c 78       	castu.h	r8
800115ee:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800115f2:	10 39       	cp.w	r9,r8
800115f4:	c2 30       	breq	8001163a <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
800115f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800115fa:	11 a8       	ld.ub	r8,r8[0x2]
800115fc:	2f f8       	sub	r8,-1
800115fe:	5c 58       	castu.b	r8
80011600:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011604:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011606:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001160a:	30 08       	mov	r8,0
8001160c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001160e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011612:	30 19       	mov	r9,1
80011614:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011616:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8001161a:	3f e8       	mov	r8,-2
8001161c:	f0 09 18 00 	cp.b	r9,r8
80011620:	c6 d1       	brne	800116fa <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011626:	30 29       	mov	r9,2
80011628:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
8001162a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001162e:	30 08       	mov	r8,0
80011630:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80011632:	ee fc ff f4 	ld.w	r12,r7[-12]
80011636:	c9 fe       	rcall	80011374 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80011638:	c6 28       	rjmp	800116fc <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
8001163a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001163e:	30 99       	mov	r9,9
80011640:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80011642:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011646:	2f 88       	sub	r8,-8
80011648:	10 99       	mov	r9,r8
8001164a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001164e:	f1 38 00 08 	ld.ub	r8,r8[8]
80011652:	10 09       	add	r9,r8
80011654:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011658:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001165a:	c5 18       	rjmp	800116fc <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
8001165c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011660:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011664:	90 08       	ld.sh	r8,r8[0x0]
80011666:	5c 78       	castu.h	r8
80011668:	a9 88       	lsr	r8,0x8
8001166a:	5c 88       	casts.h	r8
8001166c:	f0 09 19 00 	cp.h	r9,r8
80011670:	c2 30       	breq	800116b6 <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80011672:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011676:	11 a8       	ld.ub	r8,r8[0x2]
80011678:	2f f8       	sub	r8,-1
8001167a:	5c 58       	castu.b	r8
8001167c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011680:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011682:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011686:	30 08       	mov	r8,0
80011688:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001168a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001168e:	30 19       	mov	r9,1
80011690:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011692:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011696:	3f e8       	mov	r8,-2
80011698:	f0 09 18 00 	cp.b	r9,r8
8001169c:	c3 01       	brne	800116fc <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
8001169e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800116a2:	30 29       	mov	r9,2
800116a4:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
800116a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800116aa:	30 08       	mov	r8,0
800116ac:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
800116ae:	ee fc ff f4 	ld.w	r12,r7[-12]
800116b2:	c6 1e       	rcall	80011374 <mavlink_start_checksum>
800116b4:	c2 48       	rjmp	800116fc <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
800116b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800116ba:	30 18       	mov	r8,1
800116bc:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800116be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800116c2:	30 19       	mov	r9,1
800116c4:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
800116c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800116ca:	2f 88       	sub	r8,-8
800116cc:	10 99       	mov	r9,r8
800116ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800116d2:	f1 38 00 08 	ld.ub	r8,r8[8]
800116d6:	2f f8       	sub	r8,-1
800116d8:	10 09       	add	r9,r8
800116da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800116de:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
800116e0:	e0 6a 01 10 	mov	r10,272
800116e4:	ee fb ff f4 	ld.w	r11,r7[-12]
800116e8:	ee fc ff e8 	ld.w	r12,r7[-24]
800116ec:	f0 16 00 21 	mcall	r6[132]
800116f0:	c0 68       	rjmp	800116fc <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
800116f2:	d7 03       	nop
800116f4:	c0 48       	rjmp	800116fc <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
800116f6:	d7 03       	nop
800116f8:	c0 28       	rjmp	800116fc <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
800116fa:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
800116fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011700:	2f f8       	sub	r8,-1
80011702:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80011706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001170a:	11 89       	ld.ub	r9,r8[0x0]
8001170c:	30 18       	mov	r8,1
8001170e:	f0 09 18 00 	cp.b	r9,r8
80011712:	c1 91       	brne	80011744 <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80011714:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011718:	11 c8       	ld.ub	r8,r8[0x4]
8001171a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001171e:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80011722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011726:	90 68       	ld.sh	r8,r8[0xc]
80011728:	58 08       	cp.w	r8,0
8001172a:	c0 51       	brne	80011734 <mavlink_parse_char+0x36c>
8001172c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011730:	30 08       	mov	r8,0
80011732:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80011734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011738:	90 68       	ld.sh	r8,r8[0xc]
8001173a:	2f f8       	sub	r8,-1
8001173c:	5c 88       	casts.h	r8
8001173e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011742:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80011744:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011748:	f1 38 00 09 	ld.ub	r8,r8[9]
8001174c:	2f f8       	sub	r8,-1
8001174e:	5c 58       	castu.b	r8
80011750:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011754:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
80011758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001175c:	90 68       	ld.sh	r8,r8[0xc]
8001175e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011762:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80011764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011768:	11 a8       	ld.ub	r8,r8[0x2]
8001176a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001176e:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80011770:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011774:	30 08       	mov	r8,0
80011776:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80011778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001177c:	11 88       	ld.ub	r8,r8[0x0]
}
8001177e:	10 9c       	mov	r12,r8
80011780:	2f 9d       	sub	sp,-28
80011782:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011786:	00 00       	add	r0,r0
80011788:	80 01       	ld.sh	r1,r0[0x0]
8001178a:	12 58       	eor	r8,r9

8001178c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001178c:	eb cd 40 80 	pushm	r7,lr
80011790:	1a 97       	mov	r7,sp
80011792:	20 2d       	sub	sp,8
80011794:	ef 4c ff fc 	st.w	r7[-4],r12
80011798:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001179c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800117a0:	2f f8       	sub	r8,-1
800117a2:	11 88       	ld.ub	r8,r8[0x0]
800117a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800117a8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800117aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800117ae:	f0 c9 ff ff 	sub	r9,r8,-1
800117b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800117b6:	11 88       	ld.ub	r8,r8[0x0]
800117b8:	b2 88       	st.b	r9[0x0],r8
}
800117ba:	2f ed       	sub	sp,-8
800117bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800117c0 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800117c0:	eb cd 40 80 	pushm	r7,lr
800117c4:	1a 97       	mov	r7,sp
800117c6:	20 2d       	sub	sp,8
800117c8:	ef 4c ff fc 	st.w	r7[-4],r12
800117cc:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800117d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800117d4:	2f d8       	sub	r8,-3
800117d6:	11 88       	ld.ub	r8,r8[0x0]
800117d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800117dc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800117de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800117e2:	f0 c9 ff ff 	sub	r9,r8,-1
800117e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800117ea:	2f e8       	sub	r8,-2
800117ec:	11 88       	ld.ub	r8,r8[0x0]
800117ee:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
800117f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800117f4:	f0 c9 ff fe 	sub	r9,r8,-2
800117f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800117fc:	2f f8       	sub	r8,-1
800117fe:	11 88       	ld.ub	r8,r8[0x0]
80011800:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80011802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011806:	f0 c9 ff fd 	sub	r9,r8,-3
8001180a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001180e:	11 88       	ld.ub	r8,r8[0x0]
80011810:	b2 88       	st.b	r9[0x0],r8
}
80011812:	2f ed       	sub	sp,-8
80011814:	e3 cd 80 80 	ldm	sp++,r7,pc

80011818 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80011818:	eb cd 40 c0 	pushm	r6-r7,lr
8001181c:	1a 97       	mov	r7,sp
8001181e:	20 3d       	sub	sp,12
80011820:	49 06       	lddpc	r6,80011860 <mav_array_memcpy+0x48>
80011822:	1e 26       	rsub	r6,pc
80011824:	ef 4c ff fc 	st.w	r7[-4],r12
80011828:	ef 4b ff f8 	st.w	r7[-8],r11
8001182c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80011830:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011834:	58 08       	cp.w	r8,0
80011836:	c0 91       	brne	80011848 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80011838:	ee fa ff f4 	ld.w	r10,r7[-12]
8001183c:	30 0b       	mov	r11,0
8001183e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011842:	f0 16 00 30 	mcall	r6[192]
80011846:	c0 98       	rjmp	80011858 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80011848:	ee fa ff f4 	ld.w	r10,r7[-12]
8001184c:	ee fb ff f8 	ld.w	r11,r7[-8]
80011850:	ee fc ff fc 	ld.w	r12,r7[-4]
80011854:	f0 16 00 21 	mcall	r6[132]
	}
}
80011858:	2f dd       	sub	sp,-12
8001185a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001185e:	00 00       	add	r0,r0
80011860:	80 01       	ld.sh	r1,r0[0x0]
80011862:	16 a6       	st.w	r11++,r6

80011864 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80011864:	eb cd 40 c0 	pushm	r6-r7,lr
80011868:	1a 97       	mov	r7,sp
8001186a:	20 3d       	sub	sp,12
8001186c:	48 d6       	lddpc	r6,800118a0 <_MAV_RETURN_uint16_t+0x3c>
8001186e:	1e 26       	rsub	r6,pc
80011870:	ef 4c ff f8 	st.w	r7[-8],r12
80011874:	16 98       	mov	r8,r11
80011876:	ef 68 ff f4 	st.b	r7[-12],r8
8001187a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001187e:	2f 88       	sub	r8,-8
80011880:	10 99       	mov	r9,r8
80011882:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011886:	10 09       	add	r9,r8
80011888:	ee c8 00 02 	sub	r8,r7,2
8001188c:	12 9b       	mov	r11,r9
8001188e:	10 9c       	mov	r12,r8
80011890:	c7 ef       	rcall	8001178c <byte_swap_2>
80011892:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80011896:	10 9c       	mov	r12,r8
80011898:	2f dd       	sub	sp,-12
8001189a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001189e:	00 00       	add	r0,r0
800118a0:	80 01       	ld.sh	r1,r0[0x0]
800118a2:	16 f2       	st.b	--r11,r2

800118a4 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
800118a4:	eb cd 40 c0 	pushm	r6-r7,lr
800118a8:	1a 97       	mov	r7,sp
800118aa:	20 3d       	sub	sp,12
800118ac:	48 d6       	lddpc	r6,800118e0 <_MAV_RETURN_int16_t+0x3c>
800118ae:	1e 26       	rsub	r6,pc
800118b0:	ef 4c ff f8 	st.w	r7[-8],r12
800118b4:	16 98       	mov	r8,r11
800118b6:	ef 68 ff f4 	st.b	r7[-12],r8
800118ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800118be:	2f 88       	sub	r8,-8
800118c0:	10 99       	mov	r9,r8
800118c2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800118c6:	10 09       	add	r9,r8
800118c8:	ee c8 00 02 	sub	r8,r7,2
800118cc:	12 9b       	mov	r11,r9
800118ce:	10 9c       	mov	r12,r8
800118d0:	c5 ef       	rcall	8001178c <byte_swap_2>
800118d2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800118d6:	10 9c       	mov	r12,r8
800118d8:	2f dd       	sub	sp,-12
800118da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800118de:	00 00       	add	r0,r0
800118e0:	80 01       	ld.sh	r1,r0[0x0]
800118e2:	17 32       	ld.ub	r2,r11++

800118e4 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
800118e4:	eb cd 40 c0 	pushm	r6-r7,lr
800118e8:	1a 97       	mov	r7,sp
800118ea:	20 3d       	sub	sp,12
800118ec:	48 d6       	lddpc	r6,80011920 <_MAV_RETURN_float+0x3c>
800118ee:	1e 26       	rsub	r6,pc
800118f0:	ef 4c ff f8 	st.w	r7[-8],r12
800118f4:	16 98       	mov	r8,r11
800118f6:	ef 68 ff f4 	st.b	r7[-12],r8
800118fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800118fe:	2f 88       	sub	r8,-8
80011900:	10 99       	mov	r9,r8
80011902:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011906:	10 09       	add	r9,r8
80011908:	ee c8 00 04 	sub	r8,r7,4
8001190c:	12 9b       	mov	r11,r9
8001190e:	10 9c       	mov	r12,r8
80011910:	c5 8f       	rcall	800117c0 <byte_swap_4>
80011912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011916:	10 9c       	mov	r12,r8
80011918:	2f dd       	sub	sp,-12
8001191a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001191e:	00 00       	add	r0,r0
80011920:	80 01       	ld.sh	r1,r0[0x0]
80011922:	17 72       	ld.ub	r2,--r11

80011924 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80011924:	eb cd 40 c0 	pushm	r6-r7,lr
80011928:	1a 97       	mov	r7,sp
8001192a:	20 4d       	sub	sp,16
8001192c:	49 16       	lddpc	r6,80011970 <_MAV_RETURN_char_array+0x4c>
8001192e:	1e 26       	rsub	r6,pc
80011930:	ef 4c ff fc 	st.w	r7[-4],r12
80011934:	ef 4b ff f8 	st.w	r7[-8],r11
80011938:	12 98       	mov	r8,r9
8001193a:	14 99       	mov	r9,r10
8001193c:	ef 69 ff f4 	st.b	r7[-12],r9
80011940:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80011944:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80011948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001194c:	f0 ca ff f8 	sub	r10,r8,-8
80011950:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80011954:	f4 08 00 08 	add	r8,r10,r8
80011958:	12 9a       	mov	r10,r9
8001195a:	10 9b       	mov	r11,r8
8001195c:	ee fc ff f8 	ld.w	r12,r7[-8]
80011960:	f0 16 00 21 	mcall	r6[132]
	return array_length;
80011964:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80011968:	10 9c       	mov	r12,r8
8001196a:	2f cd       	sub	sp,-16
8001196c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011970:	80 01       	ld.sh	r1,r0[0x0]
80011972:	17 b2       	ld.ub	r2,r11[0x3]

80011974 <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
80011974:	eb cd 40 80 	pushm	r7,lr
80011978:	1a 97       	mov	r7,sp
8001197a:	20 1d       	sub	sp,4
8001197c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80011980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011984:	2f 88       	sub	r8,-8
80011986:	2f e8       	sub	r8,-2
80011988:	11 88       	ld.ub	r8,r8[0x0]
}
8001198a:	10 9c       	mov	r12,r8
8001198c:	2f fd       	sub	sp,-4
8001198e:	e3 cd 80 80 	ldm	sp++,r7,pc

80011992 <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
80011992:	eb cd 40 80 	pushm	r7,lr
80011996:	1a 97       	mov	r7,sp
80011998:	20 1d       	sub	sp,4
8001199a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001199e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800119a2:	2f 88       	sub	r8,-8
800119a4:	2f d8       	sub	r8,-3
800119a6:	11 88       	ld.ub	r8,r8[0x0]
}
800119a8:	10 9c       	mov	r12,r8
800119aa:	2f fd       	sub	sp,-4
800119ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800119b0 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800119b0:	eb cd 40 c0 	pushm	r6-r7,lr
800119b4:	1a 97       	mov	r7,sp
800119b6:	20 2d       	sub	sp,8
800119b8:	48 a6       	lddpc	r6,800119e0 <mavlink_msg_param_request_read_get_param_id+0x30>
800119ba:	1e 26       	rsub	r6,pc
800119bc:	ef 4c ff fc 	st.w	r7[-4],r12
800119c0:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
800119c4:	30 49       	mov	r9,4
800119c6:	31 0a       	mov	r10,16
800119c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800119cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800119d0:	ca af       	rcall	80011924 <_MAV_RETURN_char_array>
800119d2:	18 98       	mov	r8,r12
800119d4:	5c 88       	casts.h	r8
800119d6:	5c 88       	casts.h	r8
}
800119d8:	10 9c       	mov	r12,r8
800119da:	2f ed       	sub	sp,-8
800119dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800119e0:	80 01       	ld.sh	r1,r0[0x0]
800119e2:	18 3e       	cp.w	lr,r12

800119e4 <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
800119e4:	eb cd 40 c0 	pushm	r6-r7,lr
800119e8:	1a 97       	mov	r7,sp
800119ea:	20 1d       	sub	sp,4
800119ec:	48 76       	lddpc	r6,80011a08 <mavlink_msg_param_request_read_get_param_index+0x24>
800119ee:	1e 26       	rsub	r6,pc
800119f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
800119f4:	30 0b       	mov	r11,0
800119f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800119fa:	c5 5f       	rcall	800118a4 <_MAV_RETURN_int16_t>
800119fc:	18 98       	mov	r8,r12
}
800119fe:	10 9c       	mov	r12,r8
80011a00:	2f fd       	sub	sp,-4
80011a02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a06:	00 00       	add	r0,r0
80011a08:	80 01       	ld.sh	r1,r0[0x0]
80011a0a:	18 72       	tst	r2,r12

80011a0c <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80011a0c:	eb cd 40 c0 	pushm	r6-r7,lr
80011a10:	1a 97       	mov	r7,sp
80011a12:	20 2d       	sub	sp,8
80011a14:	49 36       	lddpc	r6,80011a60 <mavlink_msg_param_request_read_decode+0x54>
80011a16:	1e 26       	rsub	r6,pc
80011a18:	ef 4c ff fc 	st.w	r7[-4],r12
80011a1c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80011a20:	ee fc ff fc 	ld.w	r12,r7[-4]
80011a24:	ce 0f       	rcall	800119e4 <mavlink_msg_param_request_read_get_param_index>
80011a26:	18 98       	mov	r8,r12
80011a28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011a2c:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80011a2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011a32:	ca 1f       	rcall	80011974 <mavlink_msg_param_request_read_get_target_system>
80011a34:	18 98       	mov	r8,r12
80011a36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011a3a:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80011a3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011a40:	ca 9f       	rcall	80011992 <mavlink_msg_param_request_read_get_target_component>
80011a42:	18 98       	mov	r8,r12
80011a44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011a48:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80011a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011a4e:	2f c8       	sub	r8,-4
80011a50:	10 9b       	mov	r11,r8
80011a52:	ee fc ff fc 	ld.w	r12,r7[-4]
80011a56:	ca df       	rcall	800119b0 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80011a58:	2f ed       	sub	sp,-8
80011a5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a5e:	00 00       	add	r0,r0
80011a60:	80 01       	ld.sh	r1,r0[0x0]
80011a62:	18 9a       	mov	r10,r12

80011a64 <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80011a64:	eb cd 40 80 	pushm	r7,lr
80011a68:	1a 97       	mov	r7,sp
80011a6a:	20 1d       	sub	sp,4
80011a6c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80011a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a74:	2f 88       	sub	r8,-8
80011a76:	11 88       	ld.ub	r8,r8[0x0]
}
80011a78:	10 9c       	mov	r12,r8
80011a7a:	2f fd       	sub	sp,-4
80011a7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80011a80 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80011a80:	eb cd 40 80 	pushm	r7,lr
80011a84:	1a 97       	mov	r7,sp
80011a86:	20 1d       	sub	sp,4
80011a88:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80011a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a90:	2f 88       	sub	r8,-8
80011a92:	2f f8       	sub	r8,-1
80011a94:	11 88       	ld.ub	r8,r8[0x0]
}
80011a96:	10 9c       	mov	r12,r8
80011a98:	2f fd       	sub	sp,-4
80011a9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80011a9e <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
80011a9e:	eb cd 40 c0 	pushm	r6-r7,lr
80011aa2:	1a 97       	mov	r7,sp
80011aa4:	20 2d       	sub	sp,8
80011aa6:	48 c6       	lddpc	r6,80011ad4 <mavlink_msg_param_request_list_decode+0x36>
80011aa8:	1e 26       	rsub	r6,pc
80011aaa:	ef 4c ff fc 	st.w	r7[-4],r12
80011aae:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
80011ab2:	ee fc ff fc 	ld.w	r12,r7[-4]
80011ab6:	cd 7f       	rcall	80011a64 <mavlink_msg_param_request_list_get_target_system>
80011ab8:	18 98       	mov	r8,r12
80011aba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011abe:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
80011ac0:	ee fc ff fc 	ld.w	r12,r7[-4]
80011ac4:	cd ef       	rcall	80011a80 <mavlink_msg_param_request_list_get_target_component>
80011ac6:	18 98       	mov	r8,r12
80011ac8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011acc:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
80011ace:	2f ed       	sub	sp,-8
80011ad0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011ad4:	80 01       	ld.sh	r1,r0[0x0]
80011ad6:	19 2c       	ld.uh	r12,r12++

80011ad8 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
80011ad8:	eb cd 40 80 	pushm	r7,lr
80011adc:	1a 97       	mov	r7,sp
80011ade:	20 1d       	sub	sp,4
80011ae0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80011ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ae8:	2f 88       	sub	r8,-8
80011aea:	2f e8       	sub	r8,-2
80011aec:	11 88       	ld.ub	r8,r8[0x0]
}
80011aee:	10 9c       	mov	r12,r8
80011af0:	2f fd       	sub	sp,-4
80011af2:	e3 cd 80 80 	ldm	sp++,r7,pc

80011af6 <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
80011af6:	eb cd 40 80 	pushm	r7,lr
80011afa:	1a 97       	mov	r7,sp
80011afc:	20 1d       	sub	sp,4
80011afe:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80011b02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b06:	2f 88       	sub	r8,-8
80011b08:	2f d8       	sub	r8,-3
80011b0a:	11 88       	ld.ub	r8,r8[0x0]
}
80011b0c:	10 9c       	mov	r12,r8
80011b0e:	2f fd       	sub	sp,-4
80011b10:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b14 <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
80011b14:	eb cd 40 80 	pushm	r7,lr
80011b18:	1a 97       	mov	r7,sp
80011b1a:	20 1d       	sub	sp,4
80011b1c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80011b20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b24:	2f 88       	sub	r8,-8
80011b26:	2f c8       	sub	r8,-4
80011b28:	11 88       	ld.ub	r8,r8[0x0]
}
80011b2a:	10 9c       	mov	r12,r8
80011b2c:	2f fd       	sub	sp,-4
80011b2e:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b32 <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
80011b32:	eb cd 40 c0 	pushm	r6-r7,lr
80011b36:	1a 97       	mov	r7,sp
80011b38:	20 1d       	sub	sp,4
80011b3a:	48 86       	lddpc	r6,80011b58 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80011b3c:	1e 26       	rsub	r6,pc
80011b3e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80011b42:	30 0b       	mov	r11,0
80011b44:	ee fc ff fc 	ld.w	r12,r7[-4]
80011b48:	c8 ee       	rcall	80011864 <_MAV_RETURN_uint16_t>
80011b4a:	18 98       	mov	r8,r12
80011b4c:	5c 88       	casts.h	r8
80011b4e:	5c 88       	casts.h	r8
}
80011b50:	10 9c       	mov	r12,r8
80011b52:	2f fd       	sub	sp,-4
80011b54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011b58:	80 01       	ld.sh	r1,r0[0x0]
80011b5a:	19 c0       	ld.ub	r0,r12[0x4]

80011b5c <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80011b5c:	eb cd 40 80 	pushm	r7,lr
80011b60:	1a 97       	mov	r7,sp
80011b62:	20 1d       	sub	sp,4
80011b64:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80011b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011b6c:	2f 88       	sub	r8,-8
80011b6e:	2f b8       	sub	r8,-5
80011b70:	11 88       	ld.ub	r8,r8[0x0]
}
80011b72:	10 9c       	mov	r12,r8
80011b74:	2f fd       	sub	sp,-4
80011b76:	e3 cd 80 80 	ldm	sp++,r7,pc

80011b7a <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
80011b7a:	eb cd 40 c0 	pushm	r6-r7,lr
80011b7e:	1a 97       	mov	r7,sp
80011b80:	20 2d       	sub	sp,8
80011b82:	49 76       	lddpc	r6,80011bdc <mavlink_msg_request_data_stream_decode+0x62>
80011b84:	1e 26       	rsub	r6,pc
80011b86:	ef 4c ff fc 	st.w	r7[-4],r12
80011b8a:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
80011b8e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011b92:	cd 0f       	rcall	80011b32 <mavlink_msg_request_data_stream_get_req_message_rate>
80011b94:	18 98       	mov	r8,r12
80011b96:	5c 88       	casts.h	r8
80011b98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b9c:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
80011b9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011ba2:	c9 bf       	rcall	80011ad8 <mavlink_msg_request_data_stream_get_target_system>
80011ba4:	18 98       	mov	r8,r12
80011ba6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011baa:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
80011bac:	ee fc ff fc 	ld.w	r12,r7[-4]
80011bb0:	ca 3f       	rcall	80011af6 <mavlink_msg_request_data_stream_get_target_component>
80011bb2:	18 98       	mov	r8,r12
80011bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011bb8:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
80011bba:	ee fc ff fc 	ld.w	r12,r7[-4]
80011bbe:	ca bf       	rcall	80011b14 <mavlink_msg_request_data_stream_get_req_stream_id>
80011bc0:	18 98       	mov	r8,r12
80011bc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011bc6:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
80011bc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80011bcc:	cc 8f       	rcall	80011b5c <mavlink_msg_request_data_stream_get_start_stop>
80011bce:	18 98       	mov	r8,r12
80011bd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011bd4:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
80011bd6:	2f ed       	sub	sp,-8
80011bd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011bdc:	80 01       	ld.sh	r1,r0[0x0]
80011bde:	1a 08       	add	r8,sp

80011be0 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
80011be0:	eb cd 40 80 	pushm	r7,lr
80011be4:	1a 97       	mov	r7,sp
80011be6:	20 1d       	sub	sp,4
80011be8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
80011bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011bf0:	2f 88       	sub	r8,-8
80011bf2:	2e 28       	sub	r8,-30
80011bf4:	11 88       	ld.ub	r8,r8[0x0]
}
80011bf6:	10 9c       	mov	r12,r8
80011bf8:	2f fd       	sub	sp,-4
80011bfa:	e3 cd 80 80 	ldm	sp++,r7,pc

80011bfe <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
80011bfe:	eb cd 40 80 	pushm	r7,lr
80011c02:	1a 97       	mov	r7,sp
80011c04:	20 1d       	sub	sp,4
80011c06:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
80011c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011c0e:	2f 88       	sub	r8,-8
80011c10:	2e 18       	sub	r8,-31
80011c12:	11 88       	ld.ub	r8,r8[0x0]
}
80011c14:	10 9c       	mov	r12,r8
80011c16:	2f fd       	sub	sp,-4
80011c18:	e3 cd 80 80 	ldm	sp++,r7,pc

80011c1c <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
80011c1c:	eb cd 40 c0 	pushm	r6-r7,lr
80011c20:	1a 97       	mov	r7,sp
80011c22:	20 1d       	sub	sp,4
80011c24:	48 86       	lddpc	r6,80011c44 <mavlink_msg_command_long_get_command+0x28>
80011c26:	1e 26       	rsub	r6,pc
80011c28:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80011c2c:	31 cb       	mov	r11,28
80011c2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c32:	c1 9e       	rcall	80011864 <_MAV_RETURN_uint16_t>
80011c34:	18 98       	mov	r8,r12
80011c36:	5c 88       	casts.h	r8
80011c38:	5c 88       	casts.h	r8
}
80011c3a:	10 9c       	mov	r12,r8
80011c3c:	2f fd       	sub	sp,-4
80011c3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c42:	00 00       	add	r0,r0
80011c44:	80 01       	ld.sh	r1,r0[0x0]
80011c46:	1a aa       	st.w	sp++,r10

80011c48 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
80011c48:	eb cd 40 80 	pushm	r7,lr
80011c4c:	1a 97       	mov	r7,sp
80011c4e:	20 1d       	sub	sp,4
80011c50:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
80011c54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011c58:	2f 88       	sub	r8,-8
80011c5a:	2e 08       	sub	r8,-32
80011c5c:	11 88       	ld.ub	r8,r8[0x0]
}
80011c5e:	10 9c       	mov	r12,r8
80011c60:	2f fd       	sub	sp,-4
80011c62:	e3 cd 80 80 	ldm	sp++,r7,pc

80011c66 <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
80011c66:	eb cd 40 c0 	pushm	r6-r7,lr
80011c6a:	1a 97       	mov	r7,sp
80011c6c:	20 1d       	sub	sp,4
80011c6e:	48 76       	lddpc	r6,80011c88 <mavlink_msg_command_long_get_param1+0x22>
80011c70:	1e 26       	rsub	r6,pc
80011c72:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80011c76:	30 0b       	mov	r11,0
80011c78:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c7c:	c3 4e       	rcall	800118e4 <_MAV_RETURN_float>
80011c7e:	18 98       	mov	r8,r12
}
80011c80:	10 9c       	mov	r12,r8
80011c82:	2f fd       	sub	sp,-4
80011c84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c88:	80 01       	ld.sh	r1,r0[0x0]
80011c8a:	1a f4       	st.b	--sp,r4

80011c8c <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
80011c8c:	eb cd 40 c0 	pushm	r6-r7,lr
80011c90:	1a 97       	mov	r7,sp
80011c92:	20 1d       	sub	sp,4
80011c94:	48 76       	lddpc	r6,80011cb0 <mavlink_msg_command_long_get_param2+0x24>
80011c96:	1e 26       	rsub	r6,pc
80011c98:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
80011c9c:	30 4b       	mov	r11,4
80011c9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011ca2:	c2 1e       	rcall	800118e4 <_MAV_RETURN_float>
80011ca4:	18 98       	mov	r8,r12
}
80011ca6:	10 9c       	mov	r12,r8
80011ca8:	2f fd       	sub	sp,-4
80011caa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011cae:	00 00       	add	r0,r0
80011cb0:	80 01       	ld.sh	r1,r0[0x0]
80011cb2:	1b 1a       	ld.sh	r10,sp++

80011cb4 <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
80011cb4:	eb cd 40 c0 	pushm	r6-r7,lr
80011cb8:	1a 97       	mov	r7,sp
80011cba:	20 1d       	sub	sp,4
80011cbc:	48 76       	lddpc	r6,80011cd8 <mavlink_msg_command_long_get_param3+0x24>
80011cbe:	1e 26       	rsub	r6,pc
80011cc0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
80011cc4:	30 8b       	mov	r11,8
80011cc6:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cca:	c0 de       	rcall	800118e4 <_MAV_RETURN_float>
80011ccc:	18 98       	mov	r8,r12
}
80011cce:	10 9c       	mov	r12,r8
80011cd0:	2f fd       	sub	sp,-4
80011cd2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011cd6:	00 00       	add	r0,r0
80011cd8:	80 01       	ld.sh	r1,r0[0x0]
80011cda:	1b 42       	ld.w	r2,--sp

80011cdc <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
80011cdc:	eb cd 40 c0 	pushm	r6-r7,lr
80011ce0:	1a 97       	mov	r7,sp
80011ce2:	20 1d       	sub	sp,4
80011ce4:	48 76       	lddpc	r6,80011d00 <mavlink_msg_command_long_get_param4+0x24>
80011ce6:	1e 26       	rsub	r6,pc
80011ce8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
80011cec:	30 cb       	mov	r11,12
80011cee:	ee fc ff fc 	ld.w	r12,r7[-4]
80011cf2:	fe b0 fd f9 	rcall	800118e4 <_MAV_RETURN_float>
80011cf6:	18 98       	mov	r8,r12
}
80011cf8:	10 9c       	mov	r12,r8
80011cfa:	2f fd       	sub	sp,-4
80011cfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011d00:	80 01       	ld.sh	r1,r0[0x0]
80011d02:	1b 6a       	ld.uh	r10,--sp

80011d04 <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
80011d04:	eb cd 40 c0 	pushm	r6-r7,lr
80011d08:	1a 97       	mov	r7,sp
80011d0a:	20 1d       	sub	sp,4
80011d0c:	48 76       	lddpc	r6,80011d28 <mavlink_msg_command_long_get_param5+0x24>
80011d0e:	1e 26       	rsub	r6,pc
80011d10:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
80011d14:	31 0b       	mov	r11,16
80011d16:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d1a:	fe b0 fd e5 	rcall	800118e4 <_MAV_RETURN_float>
80011d1e:	18 98       	mov	r8,r12
}
80011d20:	10 9c       	mov	r12,r8
80011d22:	2f fd       	sub	sp,-4
80011d24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011d28:	80 01       	ld.sh	r1,r0[0x0]
80011d2a:	1b 92       	ld.ub	r2,sp[0x1]

80011d2c <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
80011d2c:	eb cd 40 c0 	pushm	r6-r7,lr
80011d30:	1a 97       	mov	r7,sp
80011d32:	20 1d       	sub	sp,4
80011d34:	48 76       	lddpc	r6,80011d50 <mavlink_msg_command_long_get_param6+0x24>
80011d36:	1e 26       	rsub	r6,pc
80011d38:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80011d3c:	31 4b       	mov	r11,20
80011d3e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d42:	fe b0 fd d1 	rcall	800118e4 <_MAV_RETURN_float>
80011d46:	18 98       	mov	r8,r12
}
80011d48:	10 9c       	mov	r12,r8
80011d4a:	2f fd       	sub	sp,-4
80011d4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011d50:	80 01       	ld.sh	r1,r0[0x0]
80011d52:	1b ba       	ld.ub	r10,sp[0x3]

80011d54 <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
80011d54:	eb cd 40 c0 	pushm	r6-r7,lr
80011d58:	1a 97       	mov	r7,sp
80011d5a:	20 1d       	sub	sp,4
80011d5c:	48 76       	lddpc	r6,80011d78 <mavlink_msg_command_long_get_param7+0x24>
80011d5e:	1e 26       	rsub	r6,pc
80011d60:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
80011d64:	31 8b       	mov	r11,24
80011d66:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d6a:	fe b0 fd bd 	rcall	800118e4 <_MAV_RETURN_float>
80011d6e:	18 98       	mov	r8,r12
}
80011d70:	10 9c       	mov	r12,r8
80011d72:	2f fd       	sub	sp,-4
80011d74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011d78:	80 01       	ld.sh	r1,r0[0x0]
80011d7a:	1b e2       	ld.ub	r2,sp[0x6]

80011d7c <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
80011d7c:	eb cd 40 c0 	pushm	r6-r7,lr
80011d80:	1a 97       	mov	r7,sp
80011d82:	20 2d       	sub	sp,8
80011d84:	4a e6       	lddpc	r6,80011e3c <mavlink_msg_command_long_decode+0xc0>
80011d86:	1e 26       	rsub	r6,pc
80011d88:	ef 4c ff fc 	st.w	r7[-4],r12
80011d8c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
80011d90:	ee fc ff fc 	ld.w	r12,r7[-4]
80011d94:	c6 9f       	rcall	80011c66 <mavlink_msg_command_long_get_param1>
80011d96:	18 99       	mov	r9,r12
80011d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d9c:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
80011d9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011da2:	c7 5f       	rcall	80011c8c <mavlink_msg_command_long_get_param2>
80011da4:	18 99       	mov	r9,r12
80011da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011daa:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
80011dac:	ee fc ff fc 	ld.w	r12,r7[-4]
80011db0:	c8 2f       	rcall	80011cb4 <mavlink_msg_command_long_get_param3>
80011db2:	18 99       	mov	r9,r12
80011db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011db8:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
80011dba:	ee fc ff fc 	ld.w	r12,r7[-4]
80011dbe:	c8 ff       	rcall	80011cdc <mavlink_msg_command_long_get_param4>
80011dc0:	18 99       	mov	r9,r12
80011dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011dc6:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
80011dc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80011dcc:	c9 cf       	rcall	80011d04 <mavlink_msg_command_long_get_param5>
80011dce:	18 99       	mov	r9,r12
80011dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011dd4:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
80011dd6:	ee fc ff fc 	ld.w	r12,r7[-4]
80011dda:	ca 9f       	rcall	80011d2c <mavlink_msg_command_long_get_param6>
80011ddc:	18 99       	mov	r9,r12
80011dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011de2:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
80011de4:	ee fc ff fc 	ld.w	r12,r7[-4]
80011de8:	cb 6f       	rcall	80011d54 <mavlink_msg_command_long_get_param7>
80011dea:	18 99       	mov	r9,r12
80011dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011df0:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
80011df2:	ee fc ff fc 	ld.w	r12,r7[-4]
80011df6:	c1 3f       	rcall	80011c1c <mavlink_msg_command_long_get_command>
80011df8:	18 98       	mov	r8,r12
80011dfa:	5c 88       	casts.h	r8
80011dfc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e00:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
80011e04:	ee fc ff fc 	ld.w	r12,r7[-4]
80011e08:	ce ce       	rcall	80011be0 <mavlink_msg_command_long_get_target_system>
80011e0a:	18 98       	mov	r8,r12
80011e0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e10:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
80011e14:	ee fc ff fc 	ld.w	r12,r7[-4]
80011e18:	cf 3e       	rcall	80011bfe <mavlink_msg_command_long_get_target_component>
80011e1a:	18 98       	mov	r8,r12
80011e1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e20:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
80011e24:	ee fc ff fc 	ld.w	r12,r7[-4]
80011e28:	c1 0f       	rcall	80011c48 <mavlink_msg_command_long_get_confirmation>
80011e2a:	18 98       	mov	r8,r12
80011e2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e30:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
80011e34:	2f ed       	sub	sp,-8
80011e36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011e3a:	00 00       	add	r0,r0
80011e3c:	80 01       	ld.sh	r1,r0[0x0]
80011e3e:	1c 0a       	add	r10,lr

80011e40 <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
80011e40:	eb cd 40 c0 	pushm	r6-r7,lr
80011e44:	1a 97       	mov	r7,sp
80011e46:	20 2d       	sub	sp,8
80011e48:	48 e6       	lddpc	r6,80011e80 <comm_send_ch+0x40>
80011e4a:	1e 26       	rsub	r6,pc
80011e4c:	ef 4c ff fc 	st.w	r7[-4],r12
80011e50:	16 98       	mov	r8,r11
80011e52:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
80011e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011e5a:	58 08       	cp.w	r8,0
80011e5c:	c0 e1       	brne	80011e78 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
80011e5e:	ec f8 01 60 	ld.w	r8,r6[352]
80011e62:	70 08       	ld.w	r8,r8[0x0]
80011e64:	70 18       	ld.w	r8,r8[0x4]
80011e66:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80011e6a:	ec f9 01 60 	ld.w	r9,r6[352]
80011e6e:	72 09       	ld.w	r9,r9[0x0]
80011e70:	72 59       	ld.w	r9,r9[0x14]
80011e72:	14 9b       	mov	r11,r10
80011e74:	12 9c       	mov	r12,r9
80011e76:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80011e78:	2f ed       	sub	sp,-8
80011e7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011e7e:	00 00       	add	r0,r0
80011e80:	80 01       	ld.sh	r1,r0[0x0]
80011e82:	1c ce       	st.b	lr++,lr
80011e84:	0a 20       	rsub	r0,r5
80011e86:	52 65       	stdsp	sp[0x98],r5
80011e88:	63 65       	ld.w	r5,r1[0x58]
80011e8a:	69 76       	ld.w	r6,r4[0x5c]
80011e8c:	65 64       	ld.w	r4,r2[0x58]
80011e8e:	20 6d       	sub	sp,24
80011e90:	65 73       	ld.w	r3,r2[0x5c]
80011e92:	73 61       	ld.w	r1,r9[0x58]
80011e94:	67 65       	ld.w	r5,r3[0x58]
80011e96:	20 77       	sub	r7,7
80011e98:	69 74       	ld.w	r4,r4[0x5c]
80011e9a:	68 20       	ld.w	r0,r4[0x8]
80011e9c:	49 44       	lddpc	r4,80011eec <mavlink_receive_handler+0x2a>
80011e9e:	00 00       	add	r0,r0
80011ea0:	20 66       	sub	r6,6
80011ea2:	72 6f       	ld.w	pc,r9[0x18]
80011ea4:	6d 20       	ld.w	r0,r6[0x48]
80011ea6:	73 79       	ld.w	r9,r9[0x5c]
80011ea8:	73 74       	ld.w	r4,r9[0x5c]
80011eaa:	65 6d       	ld.w	sp,r2[0x58]
80011eac:	00 00       	add	r0,r0
80011eae:	00 00       	add	r0,r0
80011eb0:	20 66       	sub	r6,6
80011eb2:	6f 72       	ld.w	r2,r7[0x5c]
80011eb4:	20 63       	sub	r3,6
80011eb6:	6f 6d       	ld.w	sp,r7[0x58]
80011eb8:	70 6f       	ld.w	pc,r8[0x18]
80011eba:	6e 65       	ld.w	r5,r7[0x18]
80011ebc:	6e 74       	ld.w	r4,r7[0x1c]
80011ebe:	00 00       	add	r0,r0
80011ec0:	0a 00       	add	r0,r5

80011ec2 <mavlink_receive_handler>:

void mavlink_receive_handler() {
80011ec2:	eb cd 40 c0 	pushm	r6-r7,lr
80011ec6:	1a 97       	mov	r7,sp
80011ec8:	fa cd 01 20 	sub	sp,sp,288
80011ecc:	4a 56       	lddpc	r6,80011f60 <mavlink_receive_handler+0x9e>
80011ece:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
80011ed0:	ec f8 04 d8 	ld.w	r8,r6[1240]
80011ed4:	70 08       	ld.w	r8,r8[0x0]
80011ed6:	ee c9 01 20 	sub	r9,r7,288
80011eda:	12 9b       	mov	r11,r9
80011edc:	10 9c       	mov	r12,r8
80011ede:	f0 16 01 44 	mcall	r6[1296]
80011ee2:	18 98       	mov	r8,r12
80011ee4:	58 08       	cp.w	r8,0
80011ee6:	c3 a0       	breq	80011f5a <mavlink_receive_handler+0x98>
		dbg_print("\n Received message with ID");
80011ee8:	fe cc 00 64 	sub	r12,pc,100
80011eec:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
80011ef0:	ef 38 fe e7 	ld.ub	r8,r7[-281]
80011ef4:	30 ab       	mov	r11,10
80011ef6:	10 9c       	mov	r12,r8
80011ef8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
80011efc:	fe cc 00 5c 	sub	r12,pc,92
80011f00:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
80011f04:	ef 38 fe e5 	ld.ub	r8,r7[-283]
80011f08:	30 ab       	mov	r11,10
80011f0a:	10 9c       	mov	r12,r8
80011f0c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
80011f10:	fe cc 00 60 	sub	r12,pc,96
80011f14:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
80011f18:	ef 38 fe e6 	ld.ub	r8,r7[-282]
80011f1c:	30 ab       	mov	r11,10
80011f1e:	10 9c       	mov	r12,r8
80011f20:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
80011f24:	fe cc 00 64 	sub	r12,pc,100
80011f28:	f0 16 00 01 	mcall	r6[4]
		if (rec.msg.sysid == MAVLINK_BASE_STATION_ID)
80011f2c:	ef 39 fe e5 	ld.ub	r9,r7[-283]
80011f30:	3f f8       	mov	r8,-1
80011f32:	f0 09 18 00 	cp.b	r9,r8
80011f36:	c0 71       	brne	80011f44 <mavlink_receive_handler+0x82>
		{
			handle_mavlink_message(&rec);
80011f38:	ee c8 01 20 	sub	r8,r7,288
80011f3c:	10 9c       	mov	r12,r8
80011f3e:	f0 16 01 78 	mcall	r6[1504]
80011f42:	c0 c8       	rjmp	80011f5a <mavlink_receive_handler+0x98>
		}else if (rec.msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
80011f44:	ef 39 fe e7 	ld.ub	r9,r7[-281]
80011f48:	32 18       	mov	r8,33
80011f4a:	f0 09 18 00 	cp.b	r9,r8
80011f4e:	c0 61       	brne	80011f5a <mavlink_receive_handler+0x98>
			//dbg_print_num(rec.msg.sysid, 10);
			//dbg_print(" for component");
			//dbg_print_num(rec.msg.compid,10);
			//dbg_print( "\n");
			
			read_msg_from_neighbors(&rec);
80011f50:	ee c8 01 20 	sub	r8,r7,288
80011f54:	10 9c       	mov	r12,r8
80011f56:	f0 16 01 3e 	mcall	r6[1272]
		}
		
	}
}
80011f5a:	2b 8d       	sub	sp,-288
80011f5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f60:	80 01       	ld.sh	r1,r0[0x0]
80011f62:	1d 52       	ld.sh	r2,--lr

80011f64 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
80011f64:	eb cd 40 c0 	pushm	r6-r7,lr
80011f68:	1a 97       	mov	r7,sp
80011f6a:	20 3d       	sub	sp,12
80011f6c:	4a 36       	lddpc	r6,80011ff8 <init_mavlink+0x94>
80011f6e:	1e 26       	rsub	r6,pc
80011f70:	ef 4c ff fc 	st.w	r7[-4],r12
80011f74:	ef 4b ff f8 	st.w	r7[-8],r11
80011f78:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80011f7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011f80:	5c 58       	castu.b	r8
80011f82:	ec f9 00 70 	ld.w	r9,r6[112]
80011f86:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80011f88:	ec f9 00 70 	ld.w	r9,r6[112]
80011f8c:	33 28       	mov	r8,50
80011f8e:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
80011f90:	ec f9 00 70 	ld.w	r9,r6[112]
80011f94:	30 28       	mov	r8,2
80011f96:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80011f98:	ec f8 00 70 	ld.w	r8,r6[112]
80011f9c:	11 88       	ld.ub	r8,r8[0x0]
80011f9e:	ec f9 00 c4 	ld.w	r9,r6[196]
80011fa2:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80011fa4:	ec f9 00 c4 	ld.w	r9,r6[196]
80011fa8:	3b e8       	mov	r8,-66
80011faa:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80011fac:	ec f9 00 c4 	ld.w	r9,r6[196]
80011fb0:	30 28       	mov	r8,2
80011fb2:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80011fb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011fb8:	ec f8 01 60 	ld.w	r8,r6[352]
80011fbc:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
80011fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011fc2:	ec f8 04 d8 	ld.w	r8,r6[1240]
80011fc6:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
80011fc8:	ec f8 01 28 	ld.w	r8,r6[296]
80011fcc:	10 9c       	mov	r12,r8
80011fce:	f0 16 01 09 	mcall	r6[1060]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
80011fd2:	ec f9 05 34 	ld.w	r9,r6[1332]
80011fd6:	ec fc 01 28 	ld.w	r12,r6[296]
80011fda:	31 68       	mov	r8,22
80011fdc:	30 2a       	mov	r10,2
80011fde:	e0 7b 86 a0 	mov	r11,100000
80011fe2:	f0 16 00 25 	mcall	r6[148]

	centralData = get_central_data();
80011fe6:	f0 16 00 32 	mcall	r6[200]
80011fea:	18 99       	mov	r9,r12
80011fec:	ec f8 00 00 	ld.w	r8,r6[0]
80011ff0:	91 09       	st.w	r8[0x0],r9
}
80011ff2:	2f dd       	sub	sp,-12
80011ff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011ff8:	80 01       	ld.sh	r1,r0[0x0]
80011ffa:	1d f2       	ld.ub	r2,lr[0x7]

80011ffc <flush_mavlink>:

void flush_mavlink() {
80011ffc:	eb cd 40 c0 	pushm	r6-r7,lr
80012000:	1a 97       	mov	r7,sp
80012002:	48 b6       	lddpc	r6,8001202c <flush_mavlink+0x30>
80012004:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
80012006:	ec f8 01 60 	ld.w	r8,r6[352]
8001200a:	70 08       	ld.w	r8,r8[0x0]
8001200c:	70 28       	ld.w	r8,r8[0x8]
8001200e:	58 08       	cp.w	r8,0
80012010:	c0 b0       	breq	80012026 <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
80012012:	ec f8 01 60 	ld.w	r8,r6[352]
80012016:	70 08       	ld.w	r8,r8[0x0]
80012018:	70 28       	ld.w	r8,r8[0x8]
8001201a:	ec f9 01 60 	ld.w	r9,r6[352]
8001201e:	72 09       	ld.w	r9,r9[0x0]
80012020:	72 59       	ld.w	r9,r9[0x14]
80012022:	12 9c       	mov	r12,r9
80012024:	5d 18       	icall	r8
	
	}
}
80012026:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001202a:	00 00       	add	r0,r0
8001202c:	80 01       	ld.sh	r1,r0[0x0]
8001202e:	1e 88       	andn	r8,pc

80012030 <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
80012030:	eb cd 40 c0 	pushm	r6-r7,lr
80012034:	1a 97       	mov	r7,sp
80012036:	20 1d       	sub	sp,4
80012038:	49 c6       	lddpc	r6,800120a8 <mavlink_protocol_update+0x78>
8001203a:	1e 26       	rsub	r6,pc
	task_return_t result=0;
8001203c:	30 08       	mov	r8,0
8001203e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
80012042:	f0 16 02 22 	mcall	r6[2184]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
80012046:	ec f8 01 60 	ld.w	r8,r6[352]
8001204a:	70 08       	ld.w	r8,r8[0x0]
8001204c:	70 38       	ld.w	r8,r8[0xc]
8001204e:	ec f9 01 60 	ld.w	r9,r6[352]
80012052:	72 09       	ld.w	r9,r9[0x0]
80012054:	72 59       	ld.w	r9,r9[0x14]
80012056:	12 9c       	mov	r12,r9
80012058:	5d 18       	icall	r8
8001205a:	18 98       	mov	r8,r12
8001205c:	58 18       	cp.w	r8,1
8001205e:	c0 c1       	brne	80012076 <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
80012060:	ec f8 01 28 	ld.w	r8,r6[296]
80012064:	30 0b       	mov	r11,0
80012066:	10 9c       	mov	r12,r8
80012068:	f0 16 00 ec 	mcall	r6[944]
8001206c:	18 98       	mov	r8,r12
8001206e:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
80012072:	f0 16 00 3b 	mcall	r6[236]
	}
	
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012076:	ec f8 00 00 	ld.w	r8,r6[0]
8001207a:	70 08       	ld.w	r8,r8[0x0]
8001207c:	f0 ca ef 4b 	sub	r10,r8,-4277
80012080:	ec f8 00 00 	ld.w	r8,r6[0]
80012084:	70 08       	ld.w	r8,r8[0x0]
80012086:	f0 c9 ef 4a 	sub	r9,r8,-4278
8001208a:	ec f8 00 00 	ld.w	r8,r6[0]
8001208e:	70 08       	ld.w	r8,r8[0x0]
80012090:	f0 c8 ef e4 	sub	r8,r8,-4124
80012094:	12 9b       	mov	r11,r9
80012096:	10 9c       	mov	r12,r8
80012098:	f0 16 02 0c 	mcall	r6[2096]
	
	
	return result;
8001209c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800120a0:	10 9c       	mov	r12,r8
800120a2:	2f fd       	sub	sp,-4
800120a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120a8:	80 01       	ld.sh	r1,r0[0x0]
800120aa:	1e be       	st.h	pc++,lr

800120ac <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
800120ac:	eb cd 40 c0 	pushm	r6-r7,lr
800120b0:	1a 97       	mov	r7,sp
800120b2:	48 46       	lddpc	r6,800120c0 <get_mavlink_taskset+0x14>
800120b4:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
800120b6:	ec f8 01 28 	ld.w	r8,r6[296]
}
800120ba:	10 9c       	mov	r12,r8
800120bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120c0:	80 01       	ld.sh	r1,r0[0x0]
800120c2:	1f 38       	ld.ub	r8,pc++

800120c4 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
800120c4:	eb cd 40 c0 	pushm	r6-r7,lr
800120c8:	1a 97       	mov	r7,sp
800120ca:	20 2d       	sub	sp,8
800120cc:	49 56       	lddpc	r6,80012120 <suspend_downstream+0x5c>
800120ce:	1e 26       	rsub	r6,pc
800120d0:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800120d4:	30 08       	mov	r8,0
800120d6:	ef 48 ff fc 	st.w	r7[-4],r8
800120da:	c1 78       	rjmp	80012108 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
800120dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800120e0:	12 98       	mov	r8,r9
800120e2:	a1 78       	lsl	r8,0x1
800120e4:	12 08       	add	r8,r9
800120e6:	a5 68       	lsl	r8,0x4
800120e8:	10 99       	mov	r9,r8
800120ea:	ec f8 01 28 	ld.w	r8,r6[296]
800120ee:	2f c8       	sub	r8,-4
800120f0:	f2 08 00 08 	add	r8,r9,r8
800120f4:	ee fb ff f8 	ld.w	r11,r7[-8]
800120f8:	10 9c       	mov	r12,r8
800120fa:	f0 16 01 bd 	mcall	r6[1780]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800120fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012102:	2f f8       	sub	r8,-1
80012104:	ef 48 ff fc 	st.w	r7[-4],r8
80012108:	ec f8 01 28 	ld.w	r8,r6[296]
8001210c:	11 88       	ld.ub	r8,r8[0x0]
8001210e:	10 99       	mov	r9,r8
80012110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012114:	10 39       	cp.w	r9,r8
80012116:	fe 99 ff e3 	brgt	800120dc <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
8001211a:	2f ed       	sub	sp,-8
8001211c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012120:	80 01       	ld.sh	r1,r0[0x0]
80012122:	1f 52       	ld.sh	r2,--pc

80012124 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80012124:	eb cd 40 c0 	pushm	r6-r7,lr
80012128:	1a 97       	mov	r7,sp
8001212a:	20 3d       	sub	sp,12
8001212c:	49 a6       	lddpc	r6,80012194 <mavlink_receive+0x70>
8001212e:	1e 26       	rsub	r6,pc
80012130:	ef 4c ff f8 	st.w	r7[-8],r12
80012134:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012138:	c1 d8       	rjmp	80012172 <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
8001213a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001213e:	70 08       	ld.w	r8,r8[0x0]
80012140:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012144:	72 59       	ld.w	r9,r9[0x14]
80012146:	12 9c       	mov	r12,r9
80012148:	5d 18       	icall	r8
8001214a:	18 98       	mov	r8,r12
8001214c:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
80012150:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012154:	f0 c9 fe f0 	sub	r9,r8,-272
80012158:	ee fa ff f4 	ld.w	r10,r7[-12]
8001215c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012160:	10 9b       	mov	r11,r8
80012162:	30 0c       	mov	r12,0
80012164:	fe b0 f9 32 	rcall	800113c8 <mavlink_parse_char>
80012168:	18 98       	mov	r8,r12
8001216a:	58 08       	cp.w	r8,0
8001216c:	c0 30       	breq	80012172 <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
8001216e:	30 18       	mov	r8,1
80012170:	c0 e8       	rjmp	8001218c <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012176:	70 48       	ld.w	r8,r8[0x10]
80012178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001217c:	72 59       	ld.w	r9,r9[0x14]
8001217e:	12 9c       	mov	r12,r9
80012180:	5d 18       	icall	r8
80012182:	18 98       	mov	r8,r12
80012184:	58 08       	cp.w	r8,0
80012186:	fe 99 ff da 	brgt	8001213a <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
8001218a:	30 08       	mov	r8,0
}
8001218c:	10 9c       	mov	r12,r8
8001218e:	2f dd       	sub	sp,-12
80012190:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012194:	80 01       	ld.sh	r1,r0[0x0]
80012196:	1f b2       	ld.ub	r2,pc[0x3]
80012198:	6d 73       	ld.w	r3,r6[0x5c]
8001219a:	67 20       	ld.w	r0,r3[0x48]
8001219c:	63 6f       	ld.w	pc,r1[0x58]
8001219e:	6d 70       	ld.w	r0,r6[0x5c]
800121a0:	20 69       	sub	r9,6
800121a2:	64 3a       	ld.w	r10,r2[0xc]
800121a4:	00 00       	add	r0,r0
800121a6:	00 00       	add	r0,r0
800121a8:	73 74       	ld.w	r4,r9[0x5c]
800121aa:	72 65       	ld.w	r5,r9[0x18]
800121ac:	61 6d       	ld.w	sp,r0[0x58]
800121ae:	20 72       	sub	r2,7
800121b0:	65 71       	ld.w	r1,r2[0x5c]
800121b2:	75 65       	ld.w	r5,r10[0x58]
800121b4:	73 74       	ld.w	r4,r9[0x5c]
800121b6:	3a 00       	mov	r0,-96
800121b8:	73 65       	ld.w	r5,r9[0x58]
800121ba:	6e 64       	ld.w	r4,r7[0x18]
800121bc:	20 61       	sub	r1,6
800121be:	6c 6c       	ld.w	r12,r6[0x18]
800121c0:	0a 00       	add	r0,r5
800121c2:	00 00       	add	r0,r0
800121c4:	20 73       	sub	r3,7
800121c6:	74 72       	ld.w	r2,r10[0x1c]
800121c8:	65 61       	ld.w	r1,r2[0x58]
800121ca:	6d 3d       	ld.w	sp,r6[0x4c]
800121cc:	00 00       	add	r0,r0
800121ce:	00 00       	add	r0,r0
800121d0:	20 73       	sub	r3,7
800121d2:	74 61       	ld.w	r1,r10[0x18]
800121d4:	72 74       	ld.w	r4,r9[0x1c]
800121d6:	5f 73       	srpl	r3
800121d8:	74 6f       	ld.w	pc,r10[0x18]
800121da:	70 3d       	ld.w	sp,r8[0xc]
800121dc:	00 00       	add	r0,r0
800121de:	00 00       	add	r0,r0
800121e0:	20 72       	sub	r2,7
800121e2:	61 74       	ld.w	r4,r0[0x5c]
800121e4:	65 3d       	ld.w	sp,r2[0x4c]
	...

800121e8 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
800121e8:	eb cd 40 c0 	pushm	r6-r7,lr
800121ec:	1a 97       	mov	r7,sp
800121ee:	20 cd       	sub	sp,48
800121f0:	fe f6 04 90 	ld.w	r6,pc[1168]
800121f4:	1e 26       	rsub	r6,pc
800121f6:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
800121fa:	ee f8 ff d0 	ld.w	r8,r7[-48]
800121fe:	11 f8       	ld.ub	r8,r8[0x7]
80012200:	20 b8       	sub	r8,11
80012202:	e0 48 00 41 	cp.w	r8,65
80012206:	e0 8b 02 3a 	brhi	8001267a <handle_mavlink_message+0x492>
8001220a:	fe c9 ff f6 	sub	r9,pc,-10
8001220e:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80012212:	00 00       	add	r0,r0
80012214:	e0 8f 01 6b 	bral	800124ea <handle_mavlink_message+0x302>
80012218:	e0 8f 02 31 	bral	8001267a <handle_mavlink_message+0x492>
8001221c:	e0 8f 02 2f 	bral	8001267a <handle_mavlink_message+0x492>
80012220:	e0 8f 02 2d 	bral	8001267a <handle_mavlink_message+0x492>
80012224:	e0 8f 02 2b 	bral	8001267a <handle_mavlink_message+0x492>
80012228:	e0 8f 02 29 	bral	8001267a <handle_mavlink_message+0x492>
8001222c:	e0 8f 02 27 	bral	8001267a <handle_mavlink_message+0x492>
80012230:	e0 8f 02 25 	bral	8001267a <handle_mavlink_message+0x492>
80012234:	e0 8f 02 23 	bral	8001267a <handle_mavlink_message+0x492>
80012238:	e0 8f 00 95 	bral	80012362 <handle_mavlink_message+0x17a>
8001223c:	e0 8f 00 70 	bral	8001231c <handle_mavlink_message+0x134>
80012240:	e0 8f 02 1d 	bral	8001267a <handle_mavlink_message+0x492>
80012244:	e0 8f 00 b0 	bral	800123a4 <handle_mavlink_message+0x1bc>
80012248:	e0 8f 02 19 	bral	8001267a <handle_mavlink_message+0x492>
8001224c:	e0 8f 02 17 	bral	8001267a <handle_mavlink_message+0x492>
80012250:	e0 8f 02 15 	bral	8001267a <handle_mavlink_message+0x492>
80012254:	e0 8f 02 13 	bral	8001267a <handle_mavlink_message+0x492>
80012258:	e0 8f 02 11 	bral	8001267a <handle_mavlink_message+0x492>
8001225c:	e0 8f 02 0f 	bral	8001267a <handle_mavlink_message+0x492>
80012260:	e0 8f 02 0d 	bral	8001267a <handle_mavlink_message+0x492>
80012264:	e0 8f 02 0b 	bral	8001267a <handle_mavlink_message+0x492>
80012268:	e0 8f 02 09 	bral	8001267a <handle_mavlink_message+0x492>
8001226c:	e0 8f 02 07 	bral	8001267a <handle_mavlink_message+0x492>
80012270:	e0 8f 02 05 	bral	8001267a <handle_mavlink_message+0x492>
80012274:	e0 8f 02 03 	bral	8001267a <handle_mavlink_message+0x492>
80012278:	e0 8f 02 01 	bral	8001267a <handle_mavlink_message+0x492>
8001227c:	e0 8f 01 ff 	bral	8001267a <handle_mavlink_message+0x492>
80012280:	e0 8f 01 fd 	bral	8001267a <handle_mavlink_message+0x492>
80012284:	e0 8f 00 9a 	bral	800123b8 <handle_mavlink_message+0x1d0>
80012288:	e0 8f 00 b4 	bral	800123f0 <handle_mavlink_message+0x208>
8001228c:	e0 8f 00 cd 	bral	80012426 <handle_mavlink_message+0x23e>
80012290:	e0 8f 01 f5 	bral	8001267a <handle_mavlink_message+0x492>
80012294:	e0 8f 00 dc 	bral	8001244c <handle_mavlink_message+0x264>
80012298:	e0 8f 00 f4 	bral	80012480 <handle_mavlink_message+0x298>
8001229c:	e0 8f 01 0b 	bral	800124b2 <handle_mavlink_message+0x2ca>
800122a0:	e0 8f 01 ed 	bral	8001267a <handle_mavlink_message+0x492>
800122a4:	e0 8f 01 18 	bral	800124d4 <handle_mavlink_message+0x2ec>
800122a8:	e0 8f 01 e9 	bral	8001267a <handle_mavlink_message+0x492>
800122ac:	e0 8f 01 e7 	bral	8001267a <handle_mavlink_message+0x492>
800122b0:	e0 8f 01 e5 	bral	8001267a <handle_mavlink_message+0x492>
800122b4:	e0 8f 01 e3 	bral	8001267a <handle_mavlink_message+0x492>
800122b8:	e0 8f 01 e1 	bral	8001267a <handle_mavlink_message+0x492>
800122bc:	e0 8f 01 df 	bral	8001267a <handle_mavlink_message+0x492>
800122c0:	e0 8f 01 dd 	bral	8001267a <handle_mavlink_message+0x492>
800122c4:	e0 8f 01 db 	bral	8001267a <handle_mavlink_message+0x492>
800122c8:	e0 8f 01 d9 	bral	8001267a <handle_mavlink_message+0x492>
800122cc:	e0 8f 01 d7 	bral	8001267a <handle_mavlink_message+0x492>
800122d0:	e0 8f 01 d5 	bral	8001267a <handle_mavlink_message+0x492>
800122d4:	e0 8f 01 d3 	bral	8001267a <handle_mavlink_message+0x492>
800122d8:	e0 8f 01 d1 	bral	8001267a <handle_mavlink_message+0x492>
800122dc:	e0 8f 01 cf 	bral	8001267a <handle_mavlink_message+0x492>
800122e0:	e0 8f 01 cd 	bral	8001267a <handle_mavlink_message+0x492>
800122e4:	e0 8f 01 cb 	bral	8001267a <handle_mavlink_message+0x492>
800122e8:	e0 8f 01 c9 	bral	8001267a <handle_mavlink_message+0x492>
800122ec:	e0 8f 01 c7 	bral	8001267a <handle_mavlink_message+0x492>
800122f0:	e0 8f 01 19 	bral	80012522 <handle_mavlink_message+0x33a>
800122f4:	e0 8f 01 c3 	bral	8001267a <handle_mavlink_message+0x492>
800122f8:	e0 8f 01 c1 	bral	8001267a <handle_mavlink_message+0x492>
800122fc:	e0 8f 01 bf 	bral	8001267a <handle_mavlink_message+0x492>
80012300:	e0 8f 01 bd 	bral	8001267a <handle_mavlink_message+0x492>
80012304:	e0 8f 01 bb 	bral	8001267a <handle_mavlink_message+0x492>
80012308:	e0 8f 01 b9 	bral	8001267a <handle_mavlink_message+0x492>
8001230c:	e0 8f 01 b7 	bral	8001267a <handle_mavlink_message+0x492>
80012310:	e0 8f 01 b5 	bral	8001267a <handle_mavlink_message+0x492>
80012314:	e0 8f 01 b3 	bral	8001267a <handle_mavlink_message+0x492>
80012318:	e0 8f 01 00 	bral	80012518 <handle_mavlink_message+0x330>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
8001231c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012320:	ee c9 00 12 	sub	r9,r7,18
80012324:	12 9b       	mov	r11,r9
80012326:	10 9c       	mov	r12,r8
80012328:	fe b0 fb bb 	rcall	80011a9e <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
8001232c:	fe cc 01 94 	sub	r12,pc,404
80012330:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
80012334:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80012338:	30 ab       	mov	r11,10
8001233a:	10 9c       	mov	r12,r8
8001233c:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80012340:	fe cc 04 80 	sub	r12,pc,1152
80012344:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80012348:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8001234c:	ec f8 00 70 	ld.w	r8,r6[112]
80012350:	11 88       	ld.ub	r8,r8[0x0]
80012352:	f0 09 18 00 	cp.b	r9,r8
80012356:	e0 81 01 8d 	brne	80012670 <handle_mavlink_message+0x488>
				send_all_parameters();
8001235a:	f0 16 01 55 	mcall	r6[1364]
			}				
		}
		break;
8001235e:	e0 8f 01 8e 	bral	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80012362:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012366:	ee c9 00 26 	sub	r9,r7,38
8001236a:	12 9b       	mov	r11,r9
8001236c:	10 9c       	mov	r12,r8
8001236e:	fe b0 fb 4f 	rcall	80011a0c <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012372:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80012376:	ec f8 00 70 	ld.w	r8,r6[112]
8001237a:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001237c:	f0 09 18 00 	cp.b	r9,r8
80012380:	e0 81 01 7a 	brne	80012674 <handle_mavlink_message+0x48c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012384:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80012388:	ec f8 00 70 	ld.w	r8,r6[112]
8001238c:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001238e:	f0 09 18 00 	cp.b	r9,r8
80012392:	e0 81 01 73 	brne	80012678 <handle_mavlink_message+0x490>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
80012396:	ee c8 00 26 	sub	r8,r7,38
8001239a:	10 9c       	mov	r12,r8
8001239c:	f0 16 01 50 	mcall	r6[1344]
			}				
		}
		break;
800123a0:	e0 8f 01 6d 	bral	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
800123a4:	e0 7c 86 a0 	mov	r12,100000
800123a8:	f0 16 00 78 	mcall	r6[480]
			receive_parameter(rec);
800123ac:	ee fc ff d0 	ld.w	r12,r7[-48]
800123b0:	f0 16 01 77 	mcall	r6[1500]
		}
		break;
800123b4:	e0 8f 01 63 	bral	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
			suspend_downstream(500000);
800123b8:	e6 7c a1 20 	mov	r12,500000
800123bc:	f0 16 00 78 	mcall	r6[480]
			receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
800123c0:	ec f8 00 00 	ld.w	r8,r6[0]
800123c4:	70 08       	ld.w	r8,r8[0x0]
800123c6:	f0 c9 ef 4a 	sub	r9,r8,-4278
800123ca:	ec f8 00 00 	ld.w	r8,r6[0]
800123ce:	70 08       	ld.w	r8,r8[0x0]
800123d0:	f1 08 10 1c 	ld.sh	r8,r8[4124]
800123d4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800123d8:	ec f8 00 00 	ld.w	r8,r6[0]
800123dc:	70 08       	ld.w	r8,r8[0x0]
800123de:	f0 c8 f1 f4 	sub	r8,r8,-3596
800123e2:	10 9b       	mov	r11,r8
800123e4:	ee fc ff d0 	ld.w	r12,r7[-48]
800123e8:	f0 16 01 68 	mcall	r6[1440]
		}
		break;
800123ec:	e0 8f 01 47 	bral	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
			suspend_downstream(500000);
800123f0:	e6 7c a1 20 	mov	r12,500000
800123f4:	f0 16 00 78 	mcall	r6[480]
			send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
800123f8:	ec f8 00 00 	ld.w	r8,r6[0]
800123fc:	70 08       	ld.w	r8,r8[0x0]
800123fe:	f0 c9 ef 4b 	sub	r9,r8,-4277
80012402:	ec f8 00 00 	ld.w	r8,r6[0]
80012406:	70 08       	ld.w	r8,r8[0x0]
80012408:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001240c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80012410:	ec f8 00 00 	ld.w	r8,r6[0]
80012414:	70 08       	ld.w	r8,r8[0x0]
80012416:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001241a:	10 9b       	mov	r11,r8
8001241c:	ee fc ff d0 	ld.w	r12,r7[-48]
80012420:	f0 16 01 89 	mcall	r6[1572]
		}
		break;
80012424:	c2 b9       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
			set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
80012426:	ec f8 00 00 	ld.w	r8,r6[0]
8001242a:	70 08       	ld.w	r8,r8[0x0]
8001242c:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012430:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012434:	ec f8 00 00 	ld.w	r8,r6[0]
80012438:	70 08       	ld.w	r8,r8[0x0]
8001243a:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001243e:	12 9a       	mov	r10,r9
80012440:	10 9b       	mov	r11,r8
80012442:	ee fc ff d0 	ld.w	r12,r7[-48]
80012446:	f0 16 01 74 	mcall	r6[1488]
		}
		break;
8001244a:	c1 89       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
			// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
8001244c:	e6 7c a1 20 	mov	r12,500000
80012450:	f0 16 00 78 	mcall	r6[480]
			send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012454:	ec f8 00 00 	ld.w	r8,r6[0]
80012458:	70 08       	ld.w	r8,r8[0x0]
8001245a:	f0 c9 ef 4b 	sub	r9,r8,-4277
8001245e:	ec f8 00 00 	ld.w	r8,r6[0]
80012462:	70 08       	ld.w	r8,r8[0x0]
80012464:	f0 ca ef 4a 	sub	r10,r8,-4278
80012468:	ec f8 00 00 	ld.w	r8,r6[0]
8001246c:	70 08       	ld.w	r8,r8[0x0]
8001246e:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012472:	5c 78       	castu.h	r8
80012474:	10 9b       	mov	r11,r8
80012476:	ee fc ff d0 	ld.w	r12,r7[-48]
8001247a:	f0 16 01 a7 	mcall	r6[1692]
		}
		break;
8001247e:	cf e8       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
			// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80012480:	e6 7c a1 20 	mov	r12,500000
80012484:	f0 16 00 78 	mcall	r6[480]
			receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012488:	ec f8 00 00 	ld.w	r8,r6[0]
8001248c:	70 08       	ld.w	r8,r8[0x0]
8001248e:	f0 c9 ef 4b 	sub	r9,r8,-4277
80012492:	ec f8 00 00 	ld.w	r8,r6[0]
80012496:	70 08       	ld.w	r8,r8[0x0]
80012498:	f0 ca ef 4a 	sub	r10,r8,-4278
8001249c:	ec f8 00 00 	ld.w	r8,r6[0]
800124a0:	70 08       	ld.w	r8,r8[0x0]
800124a2:	f0 c8 ef e4 	sub	r8,r8,-4124
800124a6:	10 9b       	mov	r11,r8
800124a8:	ee fc ff d0 	ld.w	r12,r7[-48]
800124ac:	f0 16 02 1f 	mcall	r6[2172]
		}
		break;
800124b0:	ce 58       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
			clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
800124b2:	ec f8 00 00 	ld.w	r8,r6[0]
800124b6:	70 08       	ld.w	r8,r8[0x0]
800124b8:	f0 c9 ef 4c 	sub	r9,r8,-4276
800124bc:	ec f8 00 00 	ld.w	r8,r6[0]
800124c0:	70 08       	ld.w	r8,r8[0x0]
800124c2:	f0 c8 ef e4 	sub	r8,r8,-4124
800124c6:	12 9a       	mov	r10,r9
800124c8:	10 9b       	mov	r11,r8
800124ca:	ee fc ff d0 	ld.w	r12,r7[-48]
800124ce:	f0 16 01 7e 	mcall	r6[1528]
		}
		break;
800124d2:	cd 48       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ACK : { // 47
			receive_ack_msg(rec,&centralData->waypoint_sending);
800124d4:	ec f8 00 00 	ld.w	r8,r6[0]
800124d8:	70 08       	ld.w	r8,r8[0x0]
800124da:	f0 c8 ef 4b 	sub	r8,r8,-4277
800124de:	10 9b       	mov	r11,r8
800124e0:	ee fc ff d0 	ld.w	r12,r7[-48]
800124e4:	f0 16 01 f0 	mcall	r6[1984]
		}
		break;
800124e8:	cc 98       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_SET_MODE : { // 11
			set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
800124ea:	ec f8 00 00 	ld.w	r8,r6[0]
800124ee:	70 08       	ld.w	r8,r8[0x0]
800124f0:	f0 f8 10 c0 	ld.w	r8,r8[4288]
800124f4:	5c 58       	castu.b	r8
800124f6:	10 99       	mov	r9,r8
800124f8:	ec f8 00 00 	ld.w	r8,r6[0]
800124fc:	70 08       	ld.w	r8,r8[0x0]
800124fe:	f0 ca ef 43 	sub	r10,r8,-4285
80012502:	ec f8 00 00 	ld.w	r8,r6[0]
80012506:	70 08       	ld.w	r8,r8[0x0]
80012508:	f0 c8 ef 44 	sub	r8,r8,-4284
8001250c:	10 9b       	mov	r11,r8
8001250e:	ee fc ff d0 	ld.w	r12,r7[-48]
80012512:	f0 16 01 cc 	mcall	r6[1840]
		}
		break;
80012516:	cb 28       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
			receive_message_long(rec);
80012518:	ee fc ff d0 	ld.w	r12,r7[-48]
8001251c:	f0 16 01 84 	mcall	r6[1552]
		}
		break;		
80012520:	ca d8       	rjmp	8001267a <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80012522:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012526:	ee c9 00 2c 	sub	r9,r7,44
8001252a:	12 9b       	mov	r11,r9
8001252c:	10 9c       	mov	r12,r8
8001252e:	fe b0 fb 26 	rcall	80011b7a <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012532:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80012536:	ec f8 00 70 	ld.w	r8,r6[112]
8001253a:	11 88       	ld.ub	r8,r8[0x0]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001253c:	f0 09 18 00 	cp.b	r9,r8
80012540:	e0 81 00 9d 	brne	8001267a <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012544:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80012548:	ec f8 00 70 	ld.w	r8,r6[112]
8001254c:	11 98       	ld.ub	r8,r8[0x1]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001254e:	f0 09 18 00 	cp.b	r9,r8
80012552:	e0 81 00 94 	brne	8001267a <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80012556:	fe cc 03 ae 	sub	r12,pc,942
8001255a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
8001255e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80012562:	30 ab       	mov	r11,10
80012564:	10 9c       	mov	r12,r8
80012566:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
8001256a:	ef 39 ff d8 	ld.ub	r9,r7[-40]
8001256e:	3f f8       	mov	r8,-1
80012570:	f0 09 18 00 	cp.b	r9,r8
80012574:	c2 a1       	brne	800125c8 <handle_mavlink_message+0x3e0>
					int i;
					dbg_print("send all\n");
80012576:	fe cc 03 be 	sub	r12,pc,958
8001257a:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
8001257e:	30 08       	mov	r8,0
80012580:	ef 48 ff f0 	st.w	r7[-16],r8
80012584:	c1 88       	rjmp	800125b4 <handle_mavlink_message+0x3cc>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80012586:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001258a:	5c 88       	casts.h	r8
8001258c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012590:	ec f8 01 28 	ld.w	r8,r6[296]
80012594:	12 9b       	mov	r11,r9
80012596:	10 9c       	mov	r12,r8
80012598:	f0 16 01 b2 	mcall	r6[1736]
8001259c:	18 98       	mov	r8,r12
8001259e:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
800125a2:	ee fc ff f4 	ld.w	r12,r7[-12]
800125a6:	f0 16 00 ff 	mcall	r6[1020]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800125aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800125ae:	2f f8       	sub	r8,-1
800125b0:	ef 48 ff f0 	st.w	r7[-16],r8
800125b4:	ec f8 01 28 	ld.w	r8,r6[296]
800125b8:	11 88       	ld.ub	r8,r8[0x0]
800125ba:	10 99       	mov	r9,r8
800125bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800125c0:	10 39       	cp.w	r9,r8
800125c2:	fe 99 ff e2 	brgt	80012586 <handle_mavlink_message+0x39e>
800125c6:	c5 a8       	rjmp	8001267a <handle_mavlink_message+0x492>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
800125c8:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800125cc:	10 99       	mov	r9,r8
800125ce:	ec f8 01 28 	ld.w	r8,r6[296]
800125d2:	12 9b       	mov	r11,r9
800125d4:	10 9c       	mov	r12,r8
800125d6:	f0 16 01 b4 	mcall	r6[1744]
800125da:	18 98       	mov	r8,r12
800125dc:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
800125e0:	fe cc 04 1c 	sub	r12,pc,1052
800125e4:	f0 16 00 01 	mcall	r6[4]
800125e8:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800125ec:	30 ab       	mov	r11,10
800125ee:	10 9c       	mov	r12,r8
800125f0:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
800125f4:	fe cc 04 24 	sub	r12,pc,1060
800125f8:	f0 16 00 01 	mcall	r6[4]
800125fc:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012600:	30 ab       	mov	r11,10
80012602:	10 9c       	mov	r12,r8
80012604:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80012608:	fe cc 04 28 	sub	r12,pc,1064
8001260c:	f0 16 00 01 	mcall	r6[4]
80012610:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012614:	5c 78       	castu.h	r8
80012616:	30 ab       	mov	r11,10
80012618:	10 9c       	mov	r12,r8
8001261a:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001261e:	fe cc 07 5e 	sub	r12,pc,1886
80012622:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80012626:	fe cc 07 66 	sub	r12,pc,1894
8001262a:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
8001262e:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012632:	58 08       	cp.w	r8,0
80012634:	c0 70       	breq	80012642 <handle_mavlink_message+0x45a>
						change_run_mode(task, RUN_REGULAR);
80012636:	30 2b       	mov	r11,2
80012638:	ee fc ff fc 	ld.w	r12,r7[-4]
8001263c:	f0 16 00 ab 	mcall	r6[684]
80012640:	c0 68       	rjmp	8001264c <handle_mavlink_message+0x464>
					}else {
						change_run_mode(task, RUN_NEVER);
80012642:	30 0b       	mov	r11,0
80012644:	ee fc ff fc 	ld.w	r12,r7[-4]
80012648:	f0 16 00 ab 	mcall	r6[684]
					}
					if (request.req_message_rate>0) {
8001264c:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012650:	58 08       	cp.w	r8,0
80012652:	c1 40       	breq	8001267a <handle_mavlink_message+0x492>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
80012654:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012658:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001265c:	ee 78 42 40 	mov	r8,1000000
80012660:	f0 09 0d 08 	divu	r8,r8,r9
80012664:	10 9b       	mov	r11,r8
80012666:	ee fc ff fc 	ld.w	r12,r7[-4]
8001266a:	f0 16 01 9c 	mcall	r6[1648]
8001266e:	c0 68       	rjmp	8001267a <handle_mavlink_message+0x492>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80012670:	d7 03       	nop
80012672:	c0 48       	rjmp	8001267a <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80012674:	d7 03       	nop
80012676:	c0 28       	rjmp	8001267a <handle_mavlink_message+0x492>
80012678:	d7 03       	nop
		}		
		/* 
		TODO : add other cases
		*/
	}
}			
8001267a:	2f 4d       	sub	sp,-48
8001267c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012680:	80 01       	ld.sh	r1,r0[0x0]
80012682:	20 78       	sub	r8,7
80012684:	70 61       	ld.w	r1,r8[0x18]
80012686:	72 61       	ld.w	r1,r9[0x18]
80012688:	6d 65       	ld.w	r5,r6[0x58]
8001268a:	74 65       	ld.w	r5,r10[0x18]
8001268c:	72 73       	ld.w	r3,r9[0x1c]
8001268e:	3a 00       	mov	r0,-96
80012690:	2c 20       	sub	r0,-62
80012692:	63 6f       	ld.w	pc,r1[0x58]
80012694:	6d 6d       	ld.w	sp,r6[0x58]
80012696:	61 6e       	ld.w	lr,r0[0x58]
80012698:	64 20       	ld.w	r0,r2[0x8]
8001269a:	69 64       	ld.w	r4,r4[0x58]
8001269c:	3a 00       	mov	r0,-96
8001269e:	00 00       	add	r0,r0
800126a0:	2c 20       	sub	r0,-62
800126a2:	63 6f       	ld.w	pc,r1[0x58]
800126a4:	6e 66       	ld.w	r6,r7[0x18]
800126a6:	69 72       	ld.w	r2,r4[0x5c]
800126a8:	6d 61       	ld.w	r1,r6[0x58]
800126aa:	74 69       	ld.w	r9,r10[0x18]
800126ac:	6f 6e       	ld.w	lr,r7[0x58]
800126ae:	3a 00       	mov	r0,-96
800126b0:	52 65       	stdsp	sp[0x98],r5
800126b2:	61 64       	ld.w	r4,r0[0x58]
800126b4:	69 6e       	ld.w	lr,r4[0x58]
800126b6:	67 20       	ld.w	r0,r3[0x48]
800126b8:	66 72       	ld.w	r2,r3[0x1c]
800126ba:	6f 6d       	ld.w	sp,r7[0x58]
800126bc:	20 66       	sub	r6,6
800126be:	6c 61       	ld.w	r1,r6[0x18]
800126c0:	73 68       	ld.w	r8,r9[0x58]
800126c2:	63 2e       	ld.w	lr,r1[0x48]
800126c4:	2e 2e       	sub	lr,-30
800126c6:	0a 00       	add	r0,r5
800126c8:	57 72       	stdsp	sp[0x1dc],r2
800126ca:	69 74       	ld.w	r4,r4[0x5c]
800126cc:	74 69       	ld.w	r9,r10[0x18]
800126ce:	6e 67       	ld.w	r7,r7[0x18]
800126d0:	20 74       	sub	r4,7
800126d2:	6f 20       	ld.w	r0,r7[0x48]
800126d4:	66 6c       	ld.w	r12,r3[0x18]
800126d6:	61 73       	ld.w	r3,r0[0x5c]
800126d8:	68 63       	ld.w	r3,r4[0x18]
800126da:	0a 00       	add	r0,r5

800126dc <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
800126dc:	eb cd 40 c0 	pushm	r6-r7,lr
800126e0:	1a 97       	mov	r7,sp
800126e2:	20 ad       	sub	sp,40
800126e4:	fe f6 04 cc 	ld.w	r6,pc[1228]
800126e8:	1e 26       	rsub	r6,pc
800126ea:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
800126ee:	ee f8 ff d8 	ld.w	r8,r7[-40]
800126f2:	ee c9 00 24 	sub	r9,r7,36
800126f6:	12 9b       	mov	r11,r9
800126f8:	10 9c       	mov	r12,r8
800126fa:	fe b0 fb 41 	rcall	80011d7c <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
800126fe:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80012702:	ec f8 00 70 	ld.w	r8,r6[112]
80012706:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012708:	f0 09 18 00 	cp.b	r9,r8
8001270c:	e0 81 02 4e 	brne	80012ba8 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80012710:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012714:	58 08       	cp.w	r8,0
80012716:	e0 81 02 49 	brne	80012ba8 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
8001271a:	fe cc 00 96 	sub	r12,pc,150
8001271e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80012722:	ee f8 ff dc 	ld.w	r8,r7[-36]
80012726:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001272a:	30 ab       	mov	r11,10
8001272c:	10 9c       	mov	r12,r8
8001272e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80012732:	ee f8 ff e0 	ld.w	r8,r7[-32]
80012736:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001273a:	30 ab       	mov	r11,10
8001273c:	10 9c       	mov	r12,r8
8001273e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80012742:	ee f8 ff e4 	ld.w	r8,r7[-28]
80012746:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001274a:	30 ab       	mov	r11,10
8001274c:	10 9c       	mov	r12,r8
8001274e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80012752:	ee f8 ff e8 	ld.w	r8,r7[-24]
80012756:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001275a:	30 ab       	mov	r11,10
8001275c:	10 9c       	mov	r12,r8
8001275e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80012762:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012766:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001276a:	30 ab       	mov	r11,10
8001276c:	10 9c       	mov	r12,r8
8001276e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80012772:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012776:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001277a:	30 ab       	mov	r11,10
8001277c:	10 9c       	mov	r12,r8
8001277e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80012782:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012786:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001278a:	30 ab       	mov	r11,10
8001278c:	10 9c       	mov	r12,r8
8001278e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80012792:	fe cc 01 02 	sub	r12,pc,258
80012796:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
8001279a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8001279e:	5c 78       	castu.h	r8
800127a0:	30 ab       	mov	r11,10
800127a2:	10 9c       	mov	r12,r8
800127a4:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
800127a8:	fe cc 01 08 	sub	r12,pc,264
800127ac:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
800127b0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800127b4:	30 ab       	mov	r11,10
800127b6:	10 9c       	mov	r12,r8
800127b8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
800127bc:	fe cc 08 fc 	sub	r12,pc,2300
800127c0:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
800127c4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800127c8:	5c 78       	castu.h	r8
800127ca:	21 08       	sub	r8,16
800127cc:	e0 48 00 e5 	cp.w	r8,229
800127d0:	e0 8b 01 ec 	brhi	80012ba8 <receive_message_long+0x4cc>
800127d4:	fe c9 ff f8 	sub	r9,pc,-8
800127d8:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800127dc:	e0 8f 01 e6 	bral	80012ba8 <receive_message_long+0x4cc>
800127e0:	e0 8f 01 e4 	bral	80012ba8 <receive_message_long+0x4cc>
800127e4:	e0 8f 01 e2 	bral	80012ba8 <receive_message_long+0x4cc>
800127e8:	e0 8f 01 e0 	bral	80012ba8 <receive_message_long+0x4cc>
800127ec:	e0 8f 01 de 	bral	80012ba8 <receive_message_long+0x4cc>
800127f0:	e0 8f 01 dc 	bral	80012ba8 <receive_message_long+0x4cc>
800127f4:	e0 8f 01 da 	bral	80012ba8 <receive_message_long+0x4cc>
800127f8:	e0 8f 01 d8 	bral	80012ba8 <receive_message_long+0x4cc>
800127fc:	e0 8f 01 d6 	bral	80012ba8 <receive_message_long+0x4cc>
80012800:	e0 8f 01 d4 	bral	80012ba8 <receive_message_long+0x4cc>
80012804:	e0 8f 01 d2 	bral	80012ba8 <receive_message_long+0x4cc>
80012808:	e0 8f 01 d0 	bral	80012ba8 <receive_message_long+0x4cc>
8001280c:	e0 8f 01 ce 	bral	80012ba8 <receive_message_long+0x4cc>
80012810:	e0 8f 01 cc 	bral	80012ba8 <receive_message_long+0x4cc>
80012814:	e0 8f 01 ca 	bral	80012ba8 <receive_message_long+0x4cc>
80012818:	e0 8f 01 c8 	bral	80012ba8 <receive_message_long+0x4cc>
8001281c:	e0 8f 01 c6 	bral	80012ba8 <receive_message_long+0x4cc>
80012820:	e0 8f 01 c4 	bral	80012ba8 <receive_message_long+0x4cc>
80012824:	e0 8f 01 c2 	bral	80012ba8 <receive_message_long+0x4cc>
80012828:	e0 8f 01 c0 	bral	80012ba8 <receive_message_long+0x4cc>
8001282c:	e0 8f 01 be 	bral	80012ba8 <receive_message_long+0x4cc>
80012830:	e0 8f 01 bc 	bral	80012ba8 <receive_message_long+0x4cc>
80012834:	e0 8f 01 ba 	bral	80012ba8 <receive_message_long+0x4cc>
80012838:	e0 8f 01 b8 	bral	80012ba8 <receive_message_long+0x4cc>
8001283c:	e0 8f 01 b6 	bral	80012ba8 <receive_message_long+0x4cc>
80012840:	e0 8f 01 b4 	bral	80012ba8 <receive_message_long+0x4cc>
80012844:	e0 8f 01 b2 	bral	80012ba8 <receive_message_long+0x4cc>
80012848:	e0 8f 01 b0 	bral	80012ba8 <receive_message_long+0x4cc>
8001284c:	e0 8f 01 ae 	bral	80012ba8 <receive_message_long+0x4cc>
80012850:	e0 8f 01 ac 	bral	80012ba8 <receive_message_long+0x4cc>
80012854:	e0 8f 01 aa 	bral	80012ba8 <receive_message_long+0x4cc>
80012858:	e0 8f 01 a8 	bral	80012ba8 <receive_message_long+0x4cc>
8001285c:	e0 8f 01 a6 	bral	80012ba8 <receive_message_long+0x4cc>
80012860:	e0 8f 01 a4 	bral	80012ba8 <receive_message_long+0x4cc>
80012864:	e0 8f 01 a2 	bral	80012ba8 <receive_message_long+0x4cc>
80012868:	e0 8f 01 a0 	bral	80012ba8 <receive_message_long+0x4cc>
8001286c:	e0 8f 01 9e 	bral	80012ba8 <receive_message_long+0x4cc>
80012870:	e0 8f 01 9c 	bral	80012ba8 <receive_message_long+0x4cc>
80012874:	e0 8f 01 9a 	bral	80012ba8 <receive_message_long+0x4cc>
80012878:	e0 8f 01 98 	bral	80012ba8 <receive_message_long+0x4cc>
8001287c:	e0 8f 01 96 	bral	80012ba8 <receive_message_long+0x4cc>
80012880:	e0 8f 01 94 	bral	80012ba8 <receive_message_long+0x4cc>
80012884:	e0 8f 01 92 	bral	80012ba8 <receive_message_long+0x4cc>
80012888:	e0 8f 01 90 	bral	80012ba8 <receive_message_long+0x4cc>
8001288c:	e0 8f 01 8e 	bral	80012ba8 <receive_message_long+0x4cc>
80012890:	e0 8f 01 8c 	bral	80012ba8 <receive_message_long+0x4cc>
80012894:	e0 8f 01 8a 	bral	80012ba8 <receive_message_long+0x4cc>
80012898:	e0 8f 01 88 	bral	80012ba8 <receive_message_long+0x4cc>
8001289c:	e0 8f 01 86 	bral	80012ba8 <receive_message_long+0x4cc>
800128a0:	e0 8f 01 84 	bral	80012ba8 <receive_message_long+0x4cc>
800128a4:	e0 8f 01 82 	bral	80012ba8 <receive_message_long+0x4cc>
800128a8:	e0 8f 01 80 	bral	80012ba8 <receive_message_long+0x4cc>
800128ac:	e0 8f 01 7e 	bral	80012ba8 <receive_message_long+0x4cc>
800128b0:	e0 8f 01 7c 	bral	80012ba8 <receive_message_long+0x4cc>
800128b4:	e0 8f 01 7a 	bral	80012ba8 <receive_message_long+0x4cc>
800128b8:	e0 8f 01 78 	bral	80012ba8 <receive_message_long+0x4cc>
800128bc:	e0 8f 01 76 	bral	80012ba8 <receive_message_long+0x4cc>
800128c0:	e0 8f 01 74 	bral	80012ba8 <receive_message_long+0x4cc>
800128c4:	e0 8f 01 72 	bral	80012ba8 <receive_message_long+0x4cc>
800128c8:	e0 8f 01 70 	bral	80012ba8 <receive_message_long+0x4cc>
800128cc:	e0 8f 01 6e 	bral	80012ba8 <receive_message_long+0x4cc>
800128d0:	e0 8f 01 6c 	bral	80012ba8 <receive_message_long+0x4cc>
800128d4:	e0 8f 01 6a 	bral	80012ba8 <receive_message_long+0x4cc>
800128d8:	e0 8f 01 68 	bral	80012ba8 <receive_message_long+0x4cc>
800128dc:	e0 8f 01 66 	bral	80012ba8 <receive_message_long+0x4cc>
800128e0:	e0 8f 01 64 	bral	80012ba8 <receive_message_long+0x4cc>
800128e4:	e0 8f 01 62 	bral	80012ba8 <receive_message_long+0x4cc>
800128e8:	e0 8f 01 60 	bral	80012ba8 <receive_message_long+0x4cc>
800128ec:	e0 8f 01 5e 	bral	80012ba8 <receive_message_long+0x4cc>
800128f0:	e0 8f 01 5c 	bral	80012ba8 <receive_message_long+0x4cc>
800128f4:	e0 8f 01 5a 	bral	80012ba8 <receive_message_long+0x4cc>
800128f8:	e0 8f 01 58 	bral	80012ba8 <receive_message_long+0x4cc>
800128fc:	e0 8f 01 56 	bral	80012ba8 <receive_message_long+0x4cc>
80012900:	e0 8f 01 54 	bral	80012ba8 <receive_message_long+0x4cc>
80012904:	e0 8f 01 52 	bral	80012ba8 <receive_message_long+0x4cc>
80012908:	e0 8f 01 50 	bral	80012ba8 <receive_message_long+0x4cc>
8001290c:	e0 8f 01 4e 	bral	80012ba8 <receive_message_long+0x4cc>
80012910:	e0 8f 01 4c 	bral	80012ba8 <receive_message_long+0x4cc>
80012914:	e0 8f 01 4a 	bral	80012ba8 <receive_message_long+0x4cc>
80012918:	e0 8f 01 48 	bral	80012ba8 <receive_message_long+0x4cc>
8001291c:	e0 8f 01 46 	bral	80012ba8 <receive_message_long+0x4cc>
80012920:	e0 8f 01 44 	bral	80012ba8 <receive_message_long+0x4cc>
80012924:	e0 8f 01 42 	bral	80012ba8 <receive_message_long+0x4cc>
80012928:	e0 8f 01 40 	bral	80012ba8 <receive_message_long+0x4cc>
8001292c:	e0 8f 01 3e 	bral	80012ba8 <receive_message_long+0x4cc>
80012930:	e0 8f 01 3c 	bral	80012ba8 <receive_message_long+0x4cc>
80012934:	e0 8f 01 3a 	bral	80012ba8 <receive_message_long+0x4cc>
80012938:	e0 8f 01 38 	bral	80012ba8 <receive_message_long+0x4cc>
8001293c:	e0 8f 01 36 	bral	80012ba8 <receive_message_long+0x4cc>
80012940:	e0 8f 01 34 	bral	80012ba8 <receive_message_long+0x4cc>
80012944:	e0 8f 01 32 	bral	80012ba8 <receive_message_long+0x4cc>
80012948:	e0 8f 01 30 	bral	80012ba8 <receive_message_long+0x4cc>
8001294c:	e0 8f 01 2e 	bral	80012ba8 <receive_message_long+0x4cc>
80012950:	e0 8f 01 2c 	bral	80012ba8 <receive_message_long+0x4cc>
80012954:	e0 8f 01 2a 	bral	80012ba8 <receive_message_long+0x4cc>
80012958:	e0 8f 01 28 	bral	80012ba8 <receive_message_long+0x4cc>
8001295c:	e0 8f 01 26 	bral	80012ba8 <receive_message_long+0x4cc>
80012960:	e0 8f 01 24 	bral	80012ba8 <receive_message_long+0x4cc>
80012964:	e0 8f 01 22 	bral	80012ba8 <receive_message_long+0x4cc>
80012968:	e0 8f 01 20 	bral	80012ba8 <receive_message_long+0x4cc>
8001296c:	e0 8f 01 1e 	bral	80012ba8 <receive_message_long+0x4cc>
80012970:	e0 8f 01 1c 	bral	80012ba8 <receive_message_long+0x4cc>
80012974:	e0 8f 01 1a 	bral	80012ba8 <receive_message_long+0x4cc>
80012978:	e0 8f 01 18 	bral	80012ba8 <receive_message_long+0x4cc>
8001297c:	e0 8f 01 16 	bral	80012ba8 <receive_message_long+0x4cc>
80012980:	e0 8f 01 14 	bral	80012ba8 <receive_message_long+0x4cc>
80012984:	e0 8f 01 12 	bral	80012ba8 <receive_message_long+0x4cc>
80012988:	e0 8f 01 10 	bral	80012ba8 <receive_message_long+0x4cc>
8001298c:	e0 8f 01 0e 	bral	80012ba8 <receive_message_long+0x4cc>
80012990:	e0 8f 01 0c 	bral	80012ba8 <receive_message_long+0x4cc>
80012994:	e0 8f 01 0a 	bral	80012ba8 <receive_message_long+0x4cc>
80012998:	e0 8f 01 08 	bral	80012ba8 <receive_message_long+0x4cc>
8001299c:	e0 8f 01 06 	bral	80012ba8 <receive_message_long+0x4cc>
800129a0:	e0 8f 01 04 	bral	80012ba8 <receive_message_long+0x4cc>
800129a4:	e0 8f 01 02 	bral	80012ba8 <receive_message_long+0x4cc>
800129a8:	e0 8f 01 00 	bral	80012ba8 <receive_message_long+0x4cc>
800129ac:	e0 8f 00 fe 	bral	80012ba8 <receive_message_long+0x4cc>
800129b0:	e0 8f 00 fc 	bral	80012ba8 <receive_message_long+0x4cc>
800129b4:	e0 8f 00 fa 	bral	80012ba8 <receive_message_long+0x4cc>
800129b8:	e0 8f 00 f8 	bral	80012ba8 <receive_message_long+0x4cc>
800129bc:	e0 8f 00 f6 	bral	80012ba8 <receive_message_long+0x4cc>
800129c0:	e0 8f 00 f4 	bral	80012ba8 <receive_message_long+0x4cc>
800129c4:	e0 8f 00 f2 	bral	80012ba8 <receive_message_long+0x4cc>
800129c8:	e0 8f 00 f0 	bral	80012ba8 <receive_message_long+0x4cc>
800129cc:	e0 8f 00 ee 	bral	80012ba8 <receive_message_long+0x4cc>
800129d0:	e0 8f 00 ec 	bral	80012ba8 <receive_message_long+0x4cc>
800129d4:	e0 8f 00 ea 	bral	80012ba8 <receive_message_long+0x4cc>
800129d8:	e0 8f 00 e8 	bral	80012ba8 <receive_message_long+0x4cc>
800129dc:	e0 8f 00 e6 	bral	80012ba8 <receive_message_long+0x4cc>
800129e0:	e0 8f 00 e4 	bral	80012ba8 <receive_message_long+0x4cc>
800129e4:	e0 8f 00 e2 	bral	80012ba8 <receive_message_long+0x4cc>
800129e8:	e0 8f 00 e0 	bral	80012ba8 <receive_message_long+0x4cc>
800129ec:	e0 8f 00 de 	bral	80012ba8 <receive_message_long+0x4cc>
800129f0:	e0 8f 00 dc 	bral	80012ba8 <receive_message_long+0x4cc>
800129f4:	e0 8f 00 da 	bral	80012ba8 <receive_message_long+0x4cc>
800129f8:	e0 8f 00 d8 	bral	80012ba8 <receive_message_long+0x4cc>
800129fc:	e0 8f 00 d6 	bral	80012ba8 <receive_message_long+0x4cc>
80012a00:	e0 8f 00 d4 	bral	80012ba8 <receive_message_long+0x4cc>
80012a04:	e0 8f 00 d2 	bral	80012ba8 <receive_message_long+0x4cc>
80012a08:	e0 8f 00 d0 	bral	80012ba8 <receive_message_long+0x4cc>
80012a0c:	e0 8f 00 ce 	bral	80012ba8 <receive_message_long+0x4cc>
80012a10:	e0 8f 00 cc 	bral	80012ba8 <receive_message_long+0x4cc>
80012a14:	e0 8f 00 ca 	bral	80012ba8 <receive_message_long+0x4cc>
80012a18:	e0 8f 00 c8 	bral	80012ba8 <receive_message_long+0x4cc>
80012a1c:	e0 8f 00 c6 	bral	80012ba8 <receive_message_long+0x4cc>
80012a20:	e0 8f 00 c4 	bral	80012ba8 <receive_message_long+0x4cc>
80012a24:	e0 8f 00 c2 	bral	80012ba8 <receive_message_long+0x4cc>
80012a28:	e0 8f 00 c0 	bral	80012ba8 <receive_message_long+0x4cc>
80012a2c:	e0 8f 00 be 	bral	80012ba8 <receive_message_long+0x4cc>
80012a30:	e0 8f 00 bc 	bral	80012ba8 <receive_message_long+0x4cc>
80012a34:	e0 8f 00 ba 	bral	80012ba8 <receive_message_long+0x4cc>
80012a38:	e0 8f 00 b8 	bral	80012ba8 <receive_message_long+0x4cc>
80012a3c:	e0 8f 00 b6 	bral	80012ba8 <receive_message_long+0x4cc>
80012a40:	e0 8f 00 b4 	bral	80012ba8 <receive_message_long+0x4cc>
80012a44:	e0 8f 00 b2 	bral	80012ba8 <receive_message_long+0x4cc>
80012a48:	e0 8f 00 b0 	bral	80012ba8 <receive_message_long+0x4cc>
80012a4c:	e0 8f 00 ae 	bral	80012ba8 <receive_message_long+0x4cc>
80012a50:	e0 8f 00 ac 	bral	80012ba8 <receive_message_long+0x4cc>
80012a54:	e0 8f 00 aa 	bral	80012ba8 <receive_message_long+0x4cc>
80012a58:	e0 8f 00 a8 	bral	80012ba8 <receive_message_long+0x4cc>
80012a5c:	e0 8f 00 a6 	bral	80012ba8 <receive_message_long+0x4cc>
80012a60:	e0 8f 00 a4 	bral	80012ba8 <receive_message_long+0x4cc>
80012a64:	e0 8f 00 a2 	bral	80012ba8 <receive_message_long+0x4cc>
80012a68:	e0 8f 00 a0 	bral	80012ba8 <receive_message_long+0x4cc>
80012a6c:	e0 8f 00 9e 	bral	80012ba8 <receive_message_long+0x4cc>
80012a70:	e0 8f 00 9c 	bral	80012ba8 <receive_message_long+0x4cc>
80012a74:	e0 8f 00 9a 	bral	80012ba8 <receive_message_long+0x4cc>
80012a78:	e0 8f 00 98 	bral	80012ba8 <receive_message_long+0x4cc>
80012a7c:	e0 8f 00 96 	bral	80012ba8 <receive_message_long+0x4cc>
80012a80:	e0 8f 00 94 	bral	80012ba8 <receive_message_long+0x4cc>
80012a84:	e0 8f 00 92 	bral	80012ba8 <receive_message_long+0x4cc>
80012a88:	e0 8f 00 90 	bral	80012ba8 <receive_message_long+0x4cc>
80012a8c:	e0 8f 00 8e 	bral	80012ba8 <receive_message_long+0x4cc>
80012a90:	e0 8f 00 8c 	bral	80012ba8 <receive_message_long+0x4cc>
80012a94:	e0 8f 00 8a 	bral	80012ba8 <receive_message_long+0x4cc>
80012a98:	e0 8f 00 88 	bral	80012ba8 <receive_message_long+0x4cc>
80012a9c:	e0 8f 00 86 	bral	80012ba8 <receive_message_long+0x4cc>
80012aa0:	e0 8f 00 84 	bral	80012ba8 <receive_message_long+0x4cc>
80012aa4:	e0 8f 00 82 	bral	80012ba8 <receive_message_long+0x4cc>
80012aa8:	e0 8f 00 80 	bral	80012ba8 <receive_message_long+0x4cc>
80012aac:	e0 8f 00 7e 	bral	80012ba8 <receive_message_long+0x4cc>
80012ab0:	e0 8f 00 7c 	bral	80012ba8 <receive_message_long+0x4cc>
80012ab4:	e0 8f 00 7a 	bral	80012ba8 <receive_message_long+0x4cc>
80012ab8:	e0 8f 00 78 	bral	80012ba8 <receive_message_long+0x4cc>
80012abc:	e0 8f 00 76 	bral	80012ba8 <receive_message_long+0x4cc>
80012ac0:	e0 8f 00 74 	bral	80012ba8 <receive_message_long+0x4cc>
80012ac4:	e0 8f 00 72 	bral	80012ba8 <receive_message_long+0x4cc>
80012ac8:	e0 8f 00 70 	bral	80012ba8 <receive_message_long+0x4cc>
80012acc:	e0 8f 00 6e 	bral	80012ba8 <receive_message_long+0x4cc>
80012ad0:	e0 8f 00 6c 	bral	80012ba8 <receive_message_long+0x4cc>
80012ad4:	e0 8f 00 6a 	bral	80012ba8 <receive_message_long+0x4cc>
80012ad8:	e0 8f 00 68 	bral	80012ba8 <receive_message_long+0x4cc>
80012adc:	e0 8f 00 66 	bral	80012ba8 <receive_message_long+0x4cc>
80012ae0:	e0 8f 00 64 	bral	80012ba8 <receive_message_long+0x4cc>
80012ae4:	e0 8f 00 62 	bral	80012ba8 <receive_message_long+0x4cc>
80012ae8:	e0 8f 00 60 	bral	80012ba8 <receive_message_long+0x4cc>
80012aec:	e0 8f 00 5e 	bral	80012ba8 <receive_message_long+0x4cc>
80012af0:	e0 8f 00 5c 	bral	80012ba8 <receive_message_long+0x4cc>
80012af4:	e0 8f 00 5a 	bral	80012ba8 <receive_message_long+0x4cc>
80012af8:	e0 8f 00 58 	bral	80012ba8 <receive_message_long+0x4cc>
80012afc:	e0 8f 00 56 	bral	80012ba8 <receive_message_long+0x4cc>
80012b00:	e0 8f 00 54 	bral	80012ba8 <receive_message_long+0x4cc>
80012b04:	e0 8f 00 52 	bral	80012ba8 <receive_message_long+0x4cc>
80012b08:	e0 8f 00 50 	bral	80012ba8 <receive_message_long+0x4cc>
80012b0c:	e0 8f 00 4e 	bral	80012ba8 <receive_message_long+0x4cc>
80012b10:	e0 8f 00 4c 	bral	80012ba8 <receive_message_long+0x4cc>
80012b14:	e0 8f 00 4a 	bral	80012ba8 <receive_message_long+0x4cc>
80012b18:	e0 8f 00 48 	bral	80012ba8 <receive_message_long+0x4cc>
80012b1c:	e0 8f 00 46 	bral	80012ba8 <receive_message_long+0x4cc>
80012b20:	e0 8f 00 44 	bral	80012ba8 <receive_message_long+0x4cc>
80012b24:	e0 8f 00 42 	bral	80012ba8 <receive_message_long+0x4cc>
80012b28:	e0 8f 00 40 	bral	80012ba8 <receive_message_long+0x4cc>
80012b2c:	e0 8f 00 3e 	bral	80012ba8 <receive_message_long+0x4cc>
80012b30:	e0 8f 00 3c 	bral	80012ba8 <receive_message_long+0x4cc>
80012b34:	e0 8f 00 3a 	bral	80012ba8 <receive_message_long+0x4cc>
80012b38:	e0 8f 00 38 	bral	80012ba8 <receive_message_long+0x4cc>
80012b3c:	e0 8f 00 36 	bral	80012ba8 <receive_message_long+0x4cc>
80012b40:	e0 8f 00 34 	bral	80012ba8 <receive_message_long+0x4cc>
80012b44:	e0 8f 00 32 	bral	80012ba8 <receive_message_long+0x4cc>
80012b48:	e0 8f 00 30 	bral	80012ba8 <receive_message_long+0x4cc>
80012b4c:	e0 8f 00 2e 	bral	80012ba8 <receive_message_long+0x4cc>
80012b50:	e0 8f 00 2c 	bral	80012ba8 <receive_message_long+0x4cc>
80012b54:	e0 8f 00 2a 	bral	80012ba8 <receive_message_long+0x4cc>
80012b58:	e0 8f 00 28 	bral	80012ba8 <receive_message_long+0x4cc>
80012b5c:	e0 8f 00 26 	bral	80012ba8 <receive_message_long+0x4cc>
80012b60:	e0 8f 00 24 	bral	80012ba8 <receive_message_long+0x4cc>
80012b64:	e0 8f 00 22 	bral	80012ba8 <receive_message_long+0x4cc>
80012b68:	e0 8f 00 20 	bral	80012ba8 <receive_message_long+0x4cc>
80012b6c:	e0 8f 00 1e 	bral	80012ba8 <receive_message_long+0x4cc>
80012b70:	e0 8f 00 02 	bral	80012b74 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80012b74:	ee f9 ff dc 	ld.w	r9,r7[-36]
80012b78:	30 08       	mov	r8,0
80012b7a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80012b7e:	c0 81       	brne	80012b8e <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80012b80:	fe cc 04 d0 	sub	r12,pc,1232
80012b84:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80012b88:	f0 16 01 18 	mcall	r6[1120]
80012b8c:	c0 e8       	rjmp	80012ba8 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80012b8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80012b92:	fc 18 3f 80 	movh	r8,0x3f80
80012b96:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80012b9a:	c0 71       	brne	80012ba8 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80012b9c:	fe cc 04 d4 	sub	r12,pc,1236
80012ba0:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80012ba4:	f0 16 01 c6 	mcall	r6[1816]
				/*  | */
			}
			break;
		}
	}
}
80012ba8:	2f 6d       	sub	sp,-40
80012baa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012bae:	00 00       	add	r0,r0
80012bb0:	80 01       	ld.sh	r1,r0[0x0]
80012bb2:	25 6c       	sub	r12,86

80012bb4 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80012bb4:	eb cd 40 80 	pushm	r7,lr
80012bb8:	1a 97       	mov	r7,sp
80012bba:	20 3d       	sub	sp,12
80012bbc:	18 98       	mov	r8,r12
80012bbe:	ef 4b ff f4 	st.w	r7[-12],r11
80012bc2:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80012bc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012bca:	90 08       	ld.sh	r8,r8[0x0]
80012bcc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012bd0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012bd4:	f3 e8 20 08 	eor	r8,r9,r8
80012bd8:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80012bdc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012be0:	a5 68       	lsl	r8,0x4
80012be2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012be6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012bea:	f3 e8 20 08 	eor	r8,r9,r8
80012bee:	5c 58       	castu.b	r8
80012bf0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80012bf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012bf8:	90 08       	ld.sh	r8,r8[0x0]
80012bfa:	5c 78       	castu.h	r8
80012bfc:	a9 88       	lsr	r8,0x8
80012bfe:	5c 88       	casts.h	r8
80012c00:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80012c04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012c08:	a9 68       	lsl	r8,0x8
80012c0a:	5c 88       	casts.h	r8
80012c0c:	f3 e8 20 08 	eor	r8,r9,r8
80012c10:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80012c14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012c18:	a3 78       	lsl	r8,0x3
80012c1a:	5c 88       	casts.h	r8
80012c1c:	f3 e8 20 08 	eor	r8,r9,r8
80012c20:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80012c24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012c28:	a5 88       	lsr	r8,0x4
80012c2a:	5c 58       	castu.b	r8
80012c2c:	f3 e8 20 08 	eor	r8,r9,r8
80012c30:	5c 88       	casts.h	r8
80012c32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012c36:	b2 08       	st.h	r9[0x0],r8
}
80012c38:	2f dd       	sub	sp,-12
80012c3a:	e3 cd 80 80 	ldm	sp++,r7,pc

80012c3e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80012c3e:	eb cd 40 80 	pushm	r7,lr
80012c42:	1a 97       	mov	r7,sp
80012c44:	20 1d       	sub	sp,4
80012c46:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80012c4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012c4e:	3f f8       	mov	r8,-1
80012c50:	b2 08       	st.h	r9[0x0],r8
}
80012c52:	2f fd       	sub	sp,-4
80012c54:	e3 cd 80 80 	ldm	sp++,r7,pc

80012c58 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80012c58:	eb cd 40 c0 	pushm	r6-r7,lr
80012c5c:	1a 97       	mov	r7,sp
80012c5e:	20 3d       	sub	sp,12
80012c60:	49 76       	lddpc	r6,80012cbc <crc_calculate+0x64>
80012c62:	1e 26       	rsub	r6,pc
80012c64:	ef 4c ff f8 	st.w	r7[-8],r12
80012c68:	16 98       	mov	r8,r11
80012c6a:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
80012c6e:	ee c8 00 02 	sub	r8,r7,2
80012c72:	10 9c       	mov	r12,r8
80012c74:	ce 5f       	rcall	80012c3e <crc_init>
	while (length--) {
80012c76:	c0 e8       	rjmp	80012c92 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80012c78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012c7c:	11 88       	ld.ub	r8,r8[0x0]
80012c7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012c82:	2f f9       	sub	r9,-1
80012c84:	ef 49 ff f8 	st.w	r7[-8],r9
80012c88:	ee c9 00 02 	sub	r9,r7,2
80012c8c:	12 9b       	mov	r11,r9
80012c8e:	10 9c       	mov	r12,r8
80012c90:	c9 2f       	rcall	80012bb4 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
80012c92:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80012c96:	30 08       	mov	r8,0
80012c98:	f0 09 19 00 	cp.h	r9,r8
80012c9c:	5f 18       	srne	r8
80012c9e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012ca2:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80012ca6:	20 18       	sub	r8,1
80012ca8:	ef 58 ff f4 	st.h	r7[-12],r8
80012cac:	58 09       	cp.w	r9,0
80012cae:	ce 51       	brne	80012c78 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80012cb0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80012cb4:	10 9c       	mov	r12,r8
80012cb6:	2f dd       	sub	sp,-12
80012cb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012cbc:	80 01       	ld.sh	r1,r0[0x0]
80012cbe:	2a e6       	sub	r6,-82

80012cc0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80012cc0:	eb cd 40 c0 	pushm	r6-r7,lr
80012cc4:	1a 97       	mov	r7,sp
80012cc6:	20 4d       	sub	sp,16
80012cc8:	49 66       	lddpc	r6,80012d20 <crc_accumulate_buffer+0x60>
80012cca:	1e 26       	rsub	r6,pc
80012ccc:	ef 4c ff f8 	st.w	r7[-8],r12
80012cd0:	ef 4b ff f4 	st.w	r7[-12],r11
80012cd4:	14 98       	mov	r8,r10
80012cd6:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
80012cda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012cde:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
80012ce2:	c0 d8       	rjmp	80012cfc <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
80012ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ce8:	11 88       	ld.ub	r8,r8[0x0]
80012cea:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012cee:	2f f9       	sub	r9,-1
80012cf0:	ef 49 ff fc 	st.w	r7[-4],r9
80012cf4:	ee fb ff f8 	ld.w	r11,r7[-8]
80012cf8:	10 9c       	mov	r12,r8
80012cfa:	c5 df       	rcall	80012bb4 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
80012cfc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80012d00:	30 08       	mov	r8,0
80012d02:	f0 09 18 00 	cp.b	r9,r8
80012d06:	5f 18       	srne	r8
80012d08:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012d0c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80012d10:	20 18       	sub	r8,1
80012d12:	ef 68 ff f0 	st.b	r7[-16],r8
80012d16:	58 09       	cp.w	r9,0
80012d18:	ce 61       	brne	80012ce4 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
80012d1a:	2f cd       	sub	sp,-16
80012d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d20:	80 01       	ld.sh	r1,r0[0x0]
80012d22:	2b 4e       	sub	lr,-76

80012d24 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80012d24:	eb cd 40 c0 	pushm	r6-r7,lr
80012d28:	1a 97       	mov	r7,sp
80012d2a:	20 1d       	sub	sp,4
80012d2c:	48 96       	lddpc	r6,80012d50 <mavlink_get_channel_status+0x2c>
80012d2e:	1e 26       	rsub	r6,pc
80012d30:	18 98       	mov	r8,r12
80012d32:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80012d36:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80012d3a:	f0 09 15 04 	lsl	r9,r8,0x4
80012d3e:	ec f8 08 e4 	ld.w	r8,r6[2276]
80012d42:	f2 08 00 08 	add	r8,r9,r8
}
80012d46:	10 9c       	mov	r12,r8
80012d48:	2f fd       	sub	sp,-4
80012d4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d4e:	00 00       	add	r0,r0
80012d50:	80 01       	ld.sh	r1,r0[0x0]
80012d52:	2b b2       	sub	r2,-69

80012d54 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80012d54:	eb cd 40 c0 	pushm	r6-r7,lr
80012d58:	1a 97       	mov	r7,sp
80012d5a:	20 9d       	sub	sp,36
80012d5c:	4b d6       	lddpc	r6,80012e50 <_mav_finalize_message_chan_send+0xfc>
80012d5e:	1e 26       	rsub	r6,pc
80012d60:	ef 4c ff ec 	st.w	r7[-20],r12
80012d64:	ef 4a ff e4 	st.w	r7[-28],r10
80012d68:	16 9a       	mov	r10,r11
80012d6a:	ef 6a ff e8 	st.b	r7[-24],r10
80012d6e:	ef 69 ff e0 	st.b	r7[-32],r9
80012d72:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80012d76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012d7a:	5c 58       	castu.b	r8
80012d7c:	10 9c       	mov	r12,r8
80012d7e:	cd 3f       	rcall	80012d24 <mavlink_get_channel_status>
80012d80:	18 98       	mov	r8,r12
80012d82:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80012d86:	3f e8       	mov	r8,-2
80012d88:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80012d8c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80012d90:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80012d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012d98:	f1 38 00 0a 	ld.ub	r8,r8[10]
80012d9c:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80012da0:	ec f8 00 70 	ld.w	r8,r6[112]
80012da4:	11 88       	ld.ub	r8,r8[0x0]
80012da6:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
80012daa:	ec f8 00 70 	ld.w	r8,r6[112]
80012dae:	11 98       	ld.ub	r8,r8[0x1]
80012db0:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80012db4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80012db8:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80012dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012dc0:	f1 38 00 0a 	ld.ub	r8,r8[10]
80012dc4:	2f f8       	sub	r8,-1
80012dc6:	5c 58       	castu.b	r8
80012dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012dcc:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80012dd0:	ee c8 00 0c 	sub	r8,r7,12
80012dd4:	2f f8       	sub	r8,-1
80012dd6:	30 5b       	mov	r11,5
80012dd8:	10 9c       	mov	r12,r8
80012dda:	c3 ff       	rcall	80012c58 <crc_calculate>
80012ddc:	18 98       	mov	r8,r12
80012dde:	5c 88       	casts.h	r8
80012de0:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
80012de4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80012de8:	ee c8 00 06 	sub	r8,r7,6
80012dec:	12 9a       	mov	r10,r9
80012dee:	ee fb ff e4 	ld.w	r11,r7[-28]
80012df2:	10 9c       	mov	r12,r8
80012df4:	c6 6f       	rcall	80012cc0 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
80012df6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80012dfa:	ee c9 00 06 	sub	r9,r7,6
80012dfe:	12 9b       	mov	r11,r9
80012e00:	10 9c       	mov	r12,r8
80012e02:	cd 9e       	rcall	80012bb4 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
80012e04:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80012e08:	5c 58       	castu.b	r8
80012e0a:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80012e0e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80012e12:	5c 78       	castu.h	r8
80012e14:	a9 88       	lsr	r8,0x8
80012e16:	5c 88       	casts.h	r8
80012e18:	5c 58       	castu.b	r8
80012e1a:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80012e1e:	ee c8 00 0c 	sub	r8,r7,12
80012e22:	30 6a       	mov	r10,6
80012e24:	10 9b       	mov	r11,r8
80012e26:	ee fc ff ec 	ld.w	r12,r7[-20]
80012e2a:	c1 5c       	rcall	80012e54 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80012e2c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80012e30:	10 9a       	mov	r10,r8
80012e32:	ee fb ff e4 	ld.w	r11,r7[-28]
80012e36:	ee fc ff ec 	ld.w	r12,r7[-20]
80012e3a:	c0 dc       	rcall	80012e54 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80012e3c:	ee c8 00 10 	sub	r8,r7,16
80012e40:	30 2a       	mov	r10,2
80012e42:	10 9b       	mov	r11,r8
80012e44:	ee fc ff ec 	ld.w	r12,r7[-20]
80012e48:	c0 6c       	rcall	80012e54 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80012e4a:	2f 7d       	sub	sp,-36
80012e4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e50:	80 01       	ld.sh	r1,r0[0x0]
80012e52:	2b e2       	sub	r2,-66

80012e54 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80012e54:	eb cd 40 c0 	pushm	r6-r7,lr
80012e58:	1a 97       	mov	r7,sp
80012e5a:	20 4d       	sub	sp,16
80012e5c:	49 46       	lddpc	r6,80012eac <_mavlink_send_uart+0x58>
80012e5e:	1e 26       	rsub	r6,pc
80012e60:	ef 4c ff f8 	st.w	r7[-8],r12
80012e64:	ef 4b ff f4 	st.w	r7[-12],r11
80012e68:	14 98       	mov	r8,r10
80012e6a:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80012e6e:	30 08       	mov	r8,0
80012e70:	ef 58 ff fe 	st.h	r7[-2],r8
80012e74:	c1 28       	rjmp	80012e98 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80012e76:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80012e7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012e7e:	f2 08 00 08 	add	r8,r9,r8
80012e82:	11 88       	ld.ub	r8,r8[0x0]
80012e84:	10 9b       	mov	r11,r8
80012e86:	ee fc ff f8 	ld.w	r12,r7[-8]
80012e8a:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80012e8e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012e92:	2f f8       	sub	r8,-1
80012e94:	ef 58 ff fe 	st.h	r7[-2],r8
80012e98:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80012e9c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80012ea0:	f0 09 19 00 	cp.h	r9,r8
80012ea4:	ce 93       	brcs	80012e76 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80012ea6:	2f cd       	sub	sp,-16
80012ea8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012eac:	80 01       	ld.sh	r1,r0[0x0]
80012eae:	2c e2       	sub	r2,-50

80012eb0 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80012eb0:	eb cd 40 80 	pushm	r7,lr
80012eb4:	1a 97       	mov	r7,sp
80012eb6:	20 2d       	sub	sp,8
80012eb8:	ef 4c ff fc 	st.w	r7[-4],r12
80012ebc:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80012ec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012ec4:	2f f8       	sub	r8,-1
80012ec6:	11 88       	ld.ub	r8,r8[0x0]
80012ec8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012ecc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80012ece:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ed2:	f0 c9 ff ff 	sub	r9,r8,-1
80012ed6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012eda:	11 88       	ld.ub	r8,r8[0x0]
80012edc:	b2 88       	st.b	r9[0x0],r8
}
80012ede:	2f ed       	sub	sp,-8
80012ee0:	e3 cd 80 80 	ldm	sp++,r7,pc

80012ee4 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80012ee4:	eb cd 40 80 	pushm	r7,lr
80012ee8:	1a 97       	mov	r7,sp
80012eea:	20 2d       	sub	sp,8
80012eec:	ef 4c ff fc 	st.w	r7[-4],r12
80012ef0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80012ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012ef8:	2f d8       	sub	r8,-3
80012efa:	11 88       	ld.ub	r8,r8[0x0]
80012efc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012f00:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80012f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012f06:	f0 c9 ff ff 	sub	r9,r8,-1
80012f0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f0e:	2f e8       	sub	r8,-2
80012f10:	11 88       	ld.ub	r8,r8[0x0]
80012f12:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80012f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012f18:	f0 c9 ff fe 	sub	r9,r8,-2
80012f1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f20:	2f f8       	sub	r8,-1
80012f22:	11 88       	ld.ub	r8,r8[0x0]
80012f24:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80012f26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012f2a:	f0 c9 ff fd 	sub	r9,r8,-3
80012f2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f32:	11 88       	ld.ub	r8,r8[0x0]
80012f34:	b2 88       	st.b	r9[0x0],r8
}
80012f36:	2f ed       	sub	sp,-8
80012f38:	e3 cd 80 80 	ldm	sp++,r7,pc

80012f3c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80012f3c:	eb cd 40 c0 	pushm	r6-r7,lr
80012f40:	1a 97       	mov	r7,sp
80012f42:	20 3d       	sub	sp,12
80012f44:	49 06       	lddpc	r6,80012f84 <mav_array_memcpy+0x48>
80012f46:	1e 26       	rsub	r6,pc
80012f48:	ef 4c ff fc 	st.w	r7[-4],r12
80012f4c:	ef 4b ff f8 	st.w	r7[-8],r11
80012f50:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80012f54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f58:	58 08       	cp.w	r8,0
80012f5a:	c0 91       	brne	80012f6c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80012f5c:	ee fa ff f4 	ld.w	r10,r7[-12]
80012f60:	30 0b       	mov	r11,0
80012f62:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f66:	f0 16 00 30 	mcall	r6[192]
80012f6a:	c0 98       	rjmp	80012f7c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80012f6c:	ee fa ff f4 	ld.w	r10,r7[-12]
80012f70:	ee fb ff f8 	ld.w	r11,r7[-8]
80012f74:	ee fc ff fc 	ld.w	r12,r7[-4]
80012f78:	f0 16 00 21 	mcall	r6[132]
	}
}
80012f7c:	2f dd       	sub	sp,-12
80012f7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012f82:	00 00       	add	r0,r0
80012f84:	80 01       	ld.sh	r1,r0[0x0]
80012f86:	2d ca       	sub	r10,-36

80012f88 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80012f88:	eb cd 40 c0 	pushm	r6-r7,lr
80012f8c:	1a 97       	mov	r7,sp
80012f8e:	20 4d       	sub	sp,16
80012f90:	48 e6       	lddpc	r6,80012fc8 <_mav_put_char_array+0x40>
80012f92:	1e 26       	rsub	r6,pc
80012f94:	ef 4c ff fc 	st.w	r7[-4],r12
80012f98:	ef 4a ff f4 	st.w	r7[-12],r10
80012f9c:	12 98       	mov	r8,r9
80012f9e:	16 99       	mov	r9,r11
80012fa0:	ef 69 ff f8 	st.b	r7[-8],r9
80012fa4:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80012fa8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80012fac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012fb0:	ee fa ff fc 	ld.w	r10,r7[-4]
80012fb4:	f4 08 00 08 	add	r8,r10,r8
80012fb8:	12 9a       	mov	r10,r9
80012fba:	ee fb ff f4 	ld.w	r11,r7[-12]
80012fbe:	10 9c       	mov	r12,r8
80012fc0:	cb ef       	rcall	80012f3c <mav_array_memcpy>

}
80012fc2:	2f cd       	sub	sp,-16
80012fc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012fc8:	80 01       	ld.sh	r1,r0[0x0]
80012fca:	2e 16       	sub	r6,-31

80012fcc <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80012fcc:	eb cd 40 c0 	pushm	r6-r7,lr
80012fd0:	1a 97       	mov	r7,sp
80012fd2:	20 3d       	sub	sp,12
80012fd4:	48 d6       	lddpc	r6,80013008 <_MAV_RETURN_float+0x3c>
80012fd6:	1e 26       	rsub	r6,pc
80012fd8:	ef 4c ff f8 	st.w	r7[-8],r12
80012fdc:	16 98       	mov	r8,r11
80012fde:	ef 68 ff f4 	st.b	r7[-12],r8
80012fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012fe6:	2f 88       	sub	r8,-8
80012fe8:	10 99       	mov	r9,r8
80012fea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80012fee:	10 09       	add	r9,r8
80012ff0:	ee c8 00 04 	sub	r8,r7,4
80012ff4:	12 9b       	mov	r11,r9
80012ff6:	10 9c       	mov	r12,r8
80012ff8:	c7 6f       	rcall	80012ee4 <byte_swap_4>
80012ffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ffe:	10 9c       	mov	r12,r8
80013000:	2f dd       	sub	sp,-12
80013002:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013006:	00 00       	add	r0,r0
80013008:	80 01       	ld.sh	r1,r0[0x0]
8001300a:	2e 5a       	sub	r10,-27

8001300c <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
8001300c:	eb cd 40 c0 	pushm	r6-r7,lr
80013010:	1a 97       	mov	r7,sp
80013012:	20 4d       	sub	sp,16
80013014:	49 16       	lddpc	r6,80013058 <_MAV_RETURN_char_array+0x4c>
80013016:	1e 26       	rsub	r6,pc
80013018:	ef 4c ff fc 	st.w	r7[-4],r12
8001301c:	ef 4b ff f8 	st.w	r7[-8],r11
80013020:	12 98       	mov	r8,r9
80013022:	14 99       	mov	r9,r10
80013024:	ef 69 ff f4 	st.b	r7[-12],r9
80013028:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
8001302c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80013030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013034:	f0 ca ff f8 	sub	r10,r8,-8
80013038:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001303c:	f4 08 00 08 	add	r8,r10,r8
80013040:	12 9a       	mov	r10,r9
80013042:	10 9b       	mov	r11,r8
80013044:	ee fc ff f8 	ld.w	r12,r7[-8]
80013048:	f0 16 00 21 	mcall	r6[132]
	return array_length;
8001304c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80013050:	10 9c       	mov	r12,r8
80013052:	2f cd       	sub	sp,-16
80013054:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013058:	80 01       	ld.sh	r1,r0[0x0]
8001305a:	2e 9a       	sub	r10,-23

8001305c <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
8001305c:	eb cd 40 c0 	pushm	r6-r7,lr
80013060:	1a 97       	mov	r7,sp
80013062:	20 dd       	sub	sp,52
80013064:	4a 16       	lddpc	r6,800130e8 <mavlink_msg_param_value_send+0x8c>
80013066:	1e 26       	rsub	r6,pc
80013068:	ee ce ff f4 	sub	lr,r7,-12
8001306c:	ef 4c ff e0 	st.w	r7[-32],r12
80013070:	ef 4b ff dc 	st.w	r7[-36],r11
80013074:	ef 4a ff d8 	st.w	r7[-40],r10
80013078:	12 9a       	mov	r10,r9
8001307a:	10 99       	mov	r9,r8
8001307c:	7c 08       	ld.w	r8,lr[0x0]
8001307e:	ef 6a ff d4 	st.b	r7[-44],r10
80013082:	ef 59 ff d0 	st.h	r7[-48],r9
80013086:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
8001308a:	ee c9 00 28 	sub	r9,r7,40
8001308e:	ee c8 00 1c 	sub	r8,r7,28
80013092:	12 9b       	mov	r11,r9
80013094:	10 9c       	mov	r12,r8
80013096:	c2 7f       	rcall	80012ee4 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80013098:	ee c9 00 30 	sub	r9,r7,48
8001309c:	ee c8 00 1c 	sub	r8,r7,28
800130a0:	2f c8       	sub	r8,-4
800130a2:	12 9b       	mov	r11,r9
800130a4:	10 9c       	mov	r12,r8
800130a6:	c0 5f       	rcall	80012eb0 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
800130a8:	ee c9 00 34 	sub	r9,r7,52
800130ac:	ee c8 00 1c 	sub	r8,r7,28
800130b0:	2f a8       	sub	r8,-6
800130b2:	12 9b       	mov	r11,r9
800130b4:	10 9c       	mov	r12,r8
800130b6:	cf de       	rcall	80012eb0 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
800130b8:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800130bc:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
800130c0:	ee c8 00 1c 	sub	r8,r7,28
800130c4:	31 09       	mov	r9,16
800130c6:	ee fa ff dc 	ld.w	r10,r7[-36]
800130ca:	30 8b       	mov	r11,8
800130cc:	10 9c       	mov	r12,r8
800130ce:	c5 df       	rcall	80012f88 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
800130d0:	ee ca 00 1c 	sub	r10,r7,28
800130d4:	e0 68 00 dc 	mov	r8,220
800130d8:	31 99       	mov	r9,25
800130da:	31 6b       	mov	r11,22
800130dc:	ee fc ff e0 	ld.w	r12,r7[-32]
800130e0:	c3 ae       	rcall	80012d54 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
800130e2:	2f 3d       	sub	sp,-52
800130e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800130e8:	80 01       	ld.sh	r1,r0[0x0]
800130ea:	2e ea       	sub	r10,-18

800130ec <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800130ec:	eb cd 40 80 	pushm	r7,lr
800130f0:	1a 97       	mov	r7,sp
800130f2:	20 1d       	sub	sp,4
800130f4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800130f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800130fc:	2f 88       	sub	r8,-8
800130fe:	2f c8       	sub	r8,-4
80013100:	11 88       	ld.ub	r8,r8[0x0]
}
80013102:	10 9c       	mov	r12,r8
80013104:	2f fd       	sub	sp,-4
80013106:	e3 cd 80 80 	ldm	sp++,r7,pc

8001310a <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
8001310a:	eb cd 40 80 	pushm	r7,lr
8001310e:	1a 97       	mov	r7,sp
80013110:	20 1d       	sub	sp,4
80013112:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80013116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001311a:	2f 88       	sub	r8,-8
8001311c:	2f b8       	sub	r8,-5
8001311e:	11 88       	ld.ub	r8,r8[0x0]
}
80013120:	10 9c       	mov	r12,r8
80013122:	2f fd       	sub	sp,-4
80013124:	e3 cd 80 80 	ldm	sp++,r7,pc

80013128 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80013128:	eb cd 40 c0 	pushm	r6-r7,lr
8001312c:	1a 97       	mov	r7,sp
8001312e:	20 2d       	sub	sp,8
80013130:	48 a6       	lddpc	r6,80013158 <mavlink_msg_param_set_get_param_id+0x30>
80013132:	1e 26       	rsub	r6,pc
80013134:	ef 4c ff fc 	st.w	r7[-4],r12
80013138:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
8001313c:	30 69       	mov	r9,6
8001313e:	31 0a       	mov	r10,16
80013140:	ee fb ff f8 	ld.w	r11,r7[-8]
80013144:	ee fc ff fc 	ld.w	r12,r7[-4]
80013148:	c6 2f       	rcall	8001300c <_MAV_RETURN_char_array>
8001314a:	18 98       	mov	r8,r12
8001314c:	5c 88       	casts.h	r8
8001314e:	5c 88       	casts.h	r8
}
80013150:	10 9c       	mov	r12,r8
80013152:	2f ed       	sub	sp,-8
80013154:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013158:	80 01       	ld.sh	r1,r0[0x0]
8001315a:	2f b6       	sub	r6,-5

8001315c <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
8001315c:	eb cd 40 c0 	pushm	r6-r7,lr
80013160:	1a 97       	mov	r7,sp
80013162:	20 1d       	sub	sp,4
80013164:	48 76       	lddpc	r6,80013180 <mavlink_msg_param_set_get_param_value+0x24>
80013166:	1e 26       	rsub	r6,pc
80013168:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001316c:	30 0b       	mov	r11,0
8001316e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013172:	c2 df       	rcall	80012fcc <_MAV_RETURN_float>
80013174:	18 98       	mov	r8,r12
}
80013176:	10 9c       	mov	r12,r8
80013178:	2f fd       	sub	sp,-4
8001317a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001317e:	00 00       	add	r0,r0
80013180:	80 01       	ld.sh	r1,r0[0x0]
80013182:	2f ea       	sub	r10,-2

80013184 <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
80013184:	eb cd 40 80 	pushm	r7,lr
80013188:	1a 97       	mov	r7,sp
8001318a:	20 1d       	sub	sp,4
8001318c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
80013190:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013194:	2f 88       	sub	r8,-8
80013196:	2e a8       	sub	r8,-22
80013198:	11 88       	ld.ub	r8,r8[0x0]
}
8001319a:	10 9c       	mov	r12,r8
8001319c:	2f fd       	sub	sp,-4
8001319e:	e3 cd 80 80 	ldm	sp++,r7,pc

800131a2 <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
800131a2:	eb cd 40 c0 	pushm	r6-r7,lr
800131a6:	1a 97       	mov	r7,sp
800131a8:	20 2d       	sub	sp,8
800131aa:	49 76       	lddpc	r6,80013204 <mavlink_msg_param_set_decode+0x62>
800131ac:	1e 26       	rsub	r6,pc
800131ae:	ef 4c ff fc 	st.w	r7[-4],r12
800131b2:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
800131b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800131ba:	cd 1f       	rcall	8001315c <mavlink_msg_param_set_get_param_value>
800131bc:	18 99       	mov	r9,r12
800131be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800131c2:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
800131c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800131c8:	c9 2f       	rcall	800130ec <mavlink_msg_param_set_get_target_system>
800131ca:	18 98       	mov	r8,r12
800131cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800131d0:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
800131d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800131d6:	c9 af       	rcall	8001310a <mavlink_msg_param_set_get_target_component>
800131d8:	18 98       	mov	r8,r12
800131da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800131de:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
800131e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800131e4:	2f a8       	sub	r8,-6
800131e6:	10 9b       	mov	r11,r8
800131e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800131ec:	c9 ef       	rcall	80013128 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800131ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800131f2:	cc 9f       	rcall	80013184 <mavlink_msg_param_set_get_param_type>
800131f4:	18 98       	mov	r8,r12
800131f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800131fa:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800131fe:	2f ed       	sub	sp,-8
80013200:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013204:	80 01       	ld.sh	r1,r0[0x0]
80013206:	30 30       	mov	r0,3

80013208 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80013208:	eb cd 40 c0 	pushm	r6-r7,lr
8001320c:	1a 97       	mov	r7,sp
8001320e:	48 a6       	lddpc	r6,80013234 <init_onboard_parameters+0x2c>
80013210:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
80013212:	ec f8 00 24 	ld.w	r8,r6[36]
80013216:	30 09       	mov	r9,0
80013218:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
8001321c:	ec f9 00 24 	ld.w	r9,r6[36]
80013220:	30 08       	mov	r8,0
80013222:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
80013226:	ec f8 00 24 	ld.w	r8,r6[36]
8001322a:	30 09       	mov	r9,0
8001322c:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
80013230:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013234:	80 01       	ld.sh	r1,r0[0x0]
80013236:	30 94       	mov	r4,9

80013238 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013238:	eb cd 40 e0 	pushm	r5-r7,lr
8001323c:	1a 97       	mov	r7,sp
8001323e:	20 2d       	sub	sp,8
80013240:	4b 66       	lddpc	r6,80013318 <add_parameter_uint8+0xe0>
80013242:	1e 26       	rsub	r6,pc
80013244:	ef 4c ff fc 	st.w	r7[-4],r12
80013248:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
8001324c:	ec f8 00 24 	ld.w	r8,r6[36]
80013250:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013254:	ee fa ff fc 	ld.w	r10,r7[-4]
80013258:	ec fb 00 24 	ld.w	r11,r6[36]
8001325c:	12 98       	mov	r8,r9
8001325e:	a3 78       	lsl	r8,0x3
80013260:	12 18       	sub	r8,r9
80013262:	a3 68       	lsl	r8,0x2
80013264:	f6 08 00 08 	add	r8,r11,r8
80013268:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
8001326a:	ec f8 00 24 	ld.w	r8,r6[36]
8001326e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013272:	12 98       	mov	r8,r9
80013274:	a3 78       	lsl	r8,0x3
80013276:	12 18       	sub	r8,r9
80013278:	2f f8       	sub	r8,-1
8001327a:	f0 09 15 02 	lsl	r9,r8,0x2
8001327e:	ec f8 00 24 	ld.w	r8,r6[36]
80013282:	f2 08 00 08 	add	r8,r9,r8
80013286:	ee fb ff f8 	ld.w	r11,r7[-8]
8001328a:	10 9c       	mov	r12,r8
8001328c:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
80013290:	ec f8 00 24 	ld.w	r8,r6[36]
80013294:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013298:	ec fa 00 24 	ld.w	r10,r6[36]
8001329c:	12 98       	mov	r8,r9
8001329e:	a3 78       	lsl	r8,0x3
800132a0:	12 18       	sub	r8,r9
800132a2:	a3 68       	lsl	r8,0x2
800132a4:	f4 08 00 08 	add	r8,r10,r8
800132a8:	2e c8       	sub	r8,-20
800132aa:	30 19       	mov	r9,1
800132ac:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800132ae:	ec f8 00 24 	ld.w	r8,r6[36]
800132b2:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800132b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800132ba:	f0 16 00 85 	mcall	r6[532]
800132be:	18 98       	mov	r8,r12
800132c0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132c4:	ec fa 00 24 	ld.w	r10,r6[36]
800132c8:	0a 98       	mov	r8,r5
800132ca:	a3 78       	lsl	r8,0x3
800132cc:	0a 18       	sub	r8,r5
800132ce:	a3 68       	lsl	r8,0x2
800132d0:	f4 08 00 08 	add	r8,r10,r8
800132d4:	f0 ca ff e8 	sub	r10,r8,-24
800132d8:	12 98       	mov	r8,r9
800132da:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800132dc:	ec f8 00 24 	ld.w	r8,r6[36]
800132e0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800132e4:	ec fa 00 24 	ld.w	r10,r6[36]
800132e8:	12 98       	mov	r8,r9
800132ea:	a3 78       	lsl	r8,0x3
800132ec:	12 18       	sub	r8,r9
800132ee:	a3 68       	lsl	r8,0x2
800132f0:	f4 08 00 08 	add	r8,r10,r8
800132f4:	f0 c9 ff e8 	sub	r9,r8,-24
800132f8:	30 18       	mov	r8,1
800132fa:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800132fc:	ec f8 00 24 	ld.w	r8,r6[36]
80013300:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013304:	f0 c9 ff ff 	sub	r9,r8,-1
80013308:	ec f8 00 24 	ld.w	r8,r6[36]
8001330c:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013310:	2f ed       	sub	sp,-8
80013312:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013316:	00 00       	add	r0,r0
80013318:	80 01       	ld.sh	r1,r0[0x0]
8001331a:	30 c6       	mov	r6,12

8001331c <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
8001331c:	eb cd 40 e0 	pushm	r5-r7,lr
80013320:	1a 97       	mov	r7,sp
80013322:	20 2d       	sub	sp,8
80013324:	4b 66       	lddpc	r6,800133fc <add_parameter_uint32+0xe0>
80013326:	1e 26       	rsub	r6,pc
80013328:	ef 4c ff fc 	st.w	r7[-4],r12
8001332c:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013330:	ec f8 00 24 	ld.w	r8,r6[36]
80013334:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013338:	ee fa ff fc 	ld.w	r10,r7[-4]
8001333c:	ec fb 00 24 	ld.w	r11,r6[36]
80013340:	12 98       	mov	r8,r9
80013342:	a3 78       	lsl	r8,0x3
80013344:	12 18       	sub	r8,r9
80013346:	a3 68       	lsl	r8,0x2
80013348:	f6 08 00 08 	add	r8,r11,r8
8001334c:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
8001334e:	ec f8 00 24 	ld.w	r8,r6[36]
80013352:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013356:	12 98       	mov	r8,r9
80013358:	a3 78       	lsl	r8,0x3
8001335a:	12 18       	sub	r8,r9
8001335c:	2f f8       	sub	r8,-1
8001335e:	f0 09 15 02 	lsl	r9,r8,0x2
80013362:	ec f8 00 24 	ld.w	r8,r6[36]
80013366:	f2 08 00 08 	add	r8,r9,r8
8001336a:	ee fb ff f8 	ld.w	r11,r7[-8]
8001336e:	10 9c       	mov	r12,r8
80013370:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
80013374:	ec f8 00 24 	ld.w	r8,r6[36]
80013378:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001337c:	ec fa 00 24 	ld.w	r10,r6[36]
80013380:	12 98       	mov	r8,r9
80013382:	a3 78       	lsl	r8,0x3
80013384:	12 18       	sub	r8,r9
80013386:	a3 68       	lsl	r8,0x2
80013388:	f4 08 00 08 	add	r8,r10,r8
8001338c:	2e c8       	sub	r8,-20
8001338e:	30 59       	mov	r9,5
80013390:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013392:	ec f8 00 24 	ld.w	r8,r6[36]
80013396:	f0 f5 0d 20 	ld.w	r5,r8[3360]
8001339a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001339e:	f0 16 00 85 	mcall	r6[532]
800133a2:	18 98       	mov	r8,r12
800133a4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800133a8:	ec fa 00 24 	ld.w	r10,r6[36]
800133ac:	0a 98       	mov	r8,r5
800133ae:	a3 78       	lsl	r8,0x3
800133b0:	0a 18       	sub	r8,r5
800133b2:	a3 68       	lsl	r8,0x2
800133b4:	f4 08 00 08 	add	r8,r10,r8
800133b8:	f0 ca ff e8 	sub	r10,r8,-24
800133bc:	12 98       	mov	r8,r9
800133be:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800133c0:	ec f8 00 24 	ld.w	r8,r6[36]
800133c4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800133c8:	ec fa 00 24 	ld.w	r10,r6[36]
800133cc:	12 98       	mov	r8,r9
800133ce:	a3 78       	lsl	r8,0x3
800133d0:	12 18       	sub	r8,r9
800133d2:	a3 68       	lsl	r8,0x2
800133d4:	f4 08 00 08 	add	r8,r10,r8
800133d8:	f0 c9 ff e8 	sub	r9,r8,-24
800133dc:	30 18       	mov	r8,1
800133de:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800133e0:	ec f8 00 24 	ld.w	r8,r6[36]
800133e4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800133e8:	f0 c9 ff ff 	sub	r9,r8,-1
800133ec:	ec f8 00 24 	ld.w	r8,r6[36]
800133f0:	f1 49 0d 20 	st.w	r8[3360],r9
}
800133f4:	2f ed       	sub	sp,-8
800133f6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800133fa:	00 00       	add	r0,r0
800133fc:	80 01       	ld.sh	r1,r0[0x0]
800133fe:	31 aa       	mov	r10,26

80013400 <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80013400:	eb cd 40 e0 	pushm	r5-r7,lr
80013404:	1a 97       	mov	r7,sp
80013406:	20 2d       	sub	sp,8
80013408:	4b 66       	lddpc	r6,800134e0 <add_parameter_int32+0xe0>
8001340a:	1e 26       	rsub	r6,pc
8001340c:	ef 4c ff fc 	st.w	r7[-4],r12
80013410:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013414:	ec f8 00 24 	ld.w	r8,r6[36]
80013418:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001341c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013420:	ec fb 00 24 	ld.w	r11,r6[36]
80013424:	12 98       	mov	r8,r9
80013426:	a3 78       	lsl	r8,0x3
80013428:	12 18       	sub	r8,r9
8001342a:	a3 68       	lsl	r8,0x2
8001342c:	f6 08 00 08 	add	r8,r11,r8
80013430:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013432:	ec f8 00 24 	ld.w	r8,r6[36]
80013436:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001343a:	12 98       	mov	r8,r9
8001343c:	a3 78       	lsl	r8,0x3
8001343e:	12 18       	sub	r8,r9
80013440:	2f f8       	sub	r8,-1
80013442:	f0 09 15 02 	lsl	r9,r8,0x2
80013446:	ec f8 00 24 	ld.w	r8,r6[36]
8001344a:	f2 08 00 08 	add	r8,r9,r8
8001344e:	ee fb ff f8 	ld.w	r11,r7[-8]
80013452:	10 9c       	mov	r12,r8
80013454:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80013458:	ec f8 00 24 	ld.w	r8,r6[36]
8001345c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013460:	ec fa 00 24 	ld.w	r10,r6[36]
80013464:	12 98       	mov	r8,r9
80013466:	a3 78       	lsl	r8,0x3
80013468:	12 18       	sub	r8,r9
8001346a:	a3 68       	lsl	r8,0x2
8001346c:	f4 08 00 08 	add	r8,r10,r8
80013470:	2e c8       	sub	r8,-20
80013472:	30 69       	mov	r9,6
80013474:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013476:	ec f8 00 24 	ld.w	r8,r6[36]
8001347a:	f0 f5 0d 20 	ld.w	r5,r8[3360]
8001347e:	ee fc ff f8 	ld.w	r12,r7[-8]
80013482:	f0 16 00 85 	mcall	r6[532]
80013486:	18 98       	mov	r8,r12
80013488:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001348c:	ec fa 00 24 	ld.w	r10,r6[36]
80013490:	0a 98       	mov	r8,r5
80013492:	a3 78       	lsl	r8,0x3
80013494:	0a 18       	sub	r8,r5
80013496:	a3 68       	lsl	r8,0x2
80013498:	f4 08 00 08 	add	r8,r10,r8
8001349c:	f0 ca ff e8 	sub	r10,r8,-24
800134a0:	12 98       	mov	r8,r9
800134a2:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800134a4:	ec f8 00 24 	ld.w	r8,r6[36]
800134a8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800134ac:	ec fa 00 24 	ld.w	r10,r6[36]
800134b0:	12 98       	mov	r8,r9
800134b2:	a3 78       	lsl	r8,0x3
800134b4:	12 18       	sub	r8,r9
800134b6:	a3 68       	lsl	r8,0x2
800134b8:	f4 08 00 08 	add	r8,r10,r8
800134bc:	f0 c9 ff e8 	sub	r9,r8,-24
800134c0:	30 18       	mov	r8,1
800134c2:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800134c4:	ec f8 00 24 	ld.w	r8,r6[36]
800134c8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800134cc:	f0 c9 ff ff 	sub	r9,r8,-1
800134d0:	ec f8 00 24 	ld.w	r8,r6[36]
800134d4:	f1 49 0d 20 	st.w	r8[3360],r9
}
800134d8:	2f ed       	sub	sp,-8
800134da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800134de:	00 00       	add	r0,r0
800134e0:	80 01       	ld.sh	r1,r0[0x0]
800134e2:	32 8e       	mov	lr,40

800134e4 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
800134e4:	eb cd 40 e0 	pushm	r5-r7,lr
800134e8:	1a 97       	mov	r7,sp
800134ea:	20 2d       	sub	sp,8
800134ec:	4b 66       	lddpc	r6,800135c4 <add_parameter_float+0xe0>
800134ee:	1e 26       	rsub	r6,pc
800134f0:	ef 4c ff fc 	st.w	r7[-4],r12
800134f4:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
800134f8:	ec f8 00 24 	ld.w	r8,r6[36]
800134fc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013500:	ec fa 00 24 	ld.w	r10,r6[36]
80013504:	12 98       	mov	r8,r9
80013506:	a3 78       	lsl	r8,0x3
80013508:	12 18       	sub	r8,r9
8001350a:	a3 68       	lsl	r8,0x2
8001350c:	f4 08 00 08 	add	r8,r10,r8
80013510:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013514:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013516:	ec f8 00 24 	ld.w	r8,r6[36]
8001351a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001351e:	12 98       	mov	r8,r9
80013520:	a3 78       	lsl	r8,0x3
80013522:	12 18       	sub	r8,r9
80013524:	2f f8       	sub	r8,-1
80013526:	f0 09 15 02 	lsl	r9,r8,0x2
8001352a:	ec f8 00 24 	ld.w	r8,r6[36]
8001352e:	f2 08 00 08 	add	r8,r9,r8
80013532:	ee fb ff f8 	ld.w	r11,r7[-8]
80013536:	10 9c       	mov	r12,r8
80013538:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
8001353c:	ec f8 00 24 	ld.w	r8,r6[36]
80013540:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013544:	ec fa 00 24 	ld.w	r10,r6[36]
80013548:	12 98       	mov	r8,r9
8001354a:	a3 78       	lsl	r8,0x3
8001354c:	12 18       	sub	r8,r9
8001354e:	a3 68       	lsl	r8,0x2
80013550:	f4 08 00 08 	add	r8,r10,r8
80013554:	2e c8       	sub	r8,-20
80013556:	30 99       	mov	r9,9
80013558:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
8001355a:	ec f8 00 24 	ld.w	r8,r6[36]
8001355e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013562:	ee fc ff f8 	ld.w	r12,r7[-8]
80013566:	f0 16 00 85 	mcall	r6[532]
8001356a:	18 98       	mov	r8,r12
8001356c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013570:	ec fa 00 24 	ld.w	r10,r6[36]
80013574:	0a 98       	mov	r8,r5
80013576:	a3 78       	lsl	r8,0x3
80013578:	0a 18       	sub	r8,r5
8001357a:	a3 68       	lsl	r8,0x2
8001357c:	f4 08 00 08 	add	r8,r10,r8
80013580:	f0 ca ff e8 	sub	r10,r8,-24
80013584:	12 98       	mov	r8,r9
80013586:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013588:	ec f8 00 24 	ld.w	r8,r6[36]
8001358c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013590:	ec fa 00 24 	ld.w	r10,r6[36]
80013594:	12 98       	mov	r8,r9
80013596:	a3 78       	lsl	r8,0x3
80013598:	12 18       	sub	r8,r9
8001359a:	a3 68       	lsl	r8,0x2
8001359c:	f4 08 00 08 	add	r8,r10,r8
800135a0:	f0 c9 ff e8 	sub	r9,r8,-24
800135a4:	30 18       	mov	r8,1
800135a6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800135a8:	ec f8 00 24 	ld.w	r8,r6[36]
800135ac:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800135b0:	f0 c9 ff ff 	sub	r9,r8,-1
800135b4:	ec f8 00 24 	ld.w	r8,r6[36]
800135b8:	f1 49 0d 20 	st.w	r8[3360],r9
}
800135bc:	2f ed       	sub	sp,-8
800135be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800135c2:	00 00       	add	r0,r0
800135c4:	80 01       	ld.sh	r1,r0[0x0]
800135c6:	33 72       	mov	r2,55

800135c8 <send_all_parameters>:

void send_all_parameters() {
800135c8:	eb cd 40 c0 	pushm	r6-r7,lr
800135cc:	1a 97       	mov	r7,sp
800135ce:	20 1d       	sub	sp,4
800135d0:	49 26       	lddpc	r6,80013618 <send_all_parameters+0x50>
800135d2:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800135d4:	30 08       	mov	r8,0
800135d6:	ef 68 ff ff 	st.b	r7[-1],r8
800135da:	c1 48       	rjmp	80013602 <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
800135dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800135e0:	ec fa 00 24 	ld.w	r10,r6[36]
800135e4:	12 98       	mov	r8,r9
800135e6:	a3 78       	lsl	r8,0x3
800135e8:	12 18       	sub	r8,r9
800135ea:	a3 68       	lsl	r8,0x2
800135ec:	f4 08 00 08 	add	r8,r10,r8
800135f0:	f0 c9 ff e8 	sub	r9,r8,-24
800135f4:	30 18       	mov	r8,1
800135f6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800135f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800135fc:	2f f8       	sub	r8,-1
800135fe:	ef 68 ff ff 	st.b	r7[-1],r8
80013602:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013606:	ec f8 00 24 	ld.w	r8,r6[36]
8001360a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001360e:	10 39       	cp.w	r9,r8
80013610:	ce 65       	brlt	800135dc <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80013612:	2f fd       	sub	sp,-4
80013614:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013618:	80 01       	ld.sh	r1,r0[0x0]
8001361a:	34 56       	mov	r6,69

8001361c <send_all_parameters_now>:

void send_all_parameters_now() {
8001361c:	eb cd 40 e0 	pushm	r5-r7,lr
80013620:	1a 97       	mov	r7,sp
80013622:	20 1d       	sub	sp,4
80013624:	4a d6       	lddpc	r6,800136d8 <send_all_parameters_now+0xbc>
80013626:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013628:	30 08       	mov	r8,0
8001362a:	ef 68 ff ff 	st.b	r7[-1],r8
8001362e:	c4 a8       	rjmp	800136c2 <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013630:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013634:	ec f8 00 24 	ld.w	r8,r6[36]
80013638:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001363c:	5c 88       	casts.h	r8
8001363e:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013642:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013646:	ec fa 00 24 	ld.w	r10,r6[36]
8001364a:	12 98       	mov	r8,r9
8001364c:	a3 78       	lsl	r8,0x3
8001364e:	12 18       	sub	r8,r9
80013650:	a3 68       	lsl	r8,0x2
80013652:	f4 08 00 08 	add	r8,r10,r8
80013656:	2e c8       	sub	r8,-20
80013658:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001365a:	5c 58       	castu.b	r8
8001365c:	10 9c       	mov	r12,r8
8001365e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013662:	ec fa 00 24 	ld.w	r10,r6[36]
80013666:	12 98       	mov	r8,r9
80013668:	a3 78       	lsl	r8,0x3
8001366a:	12 18       	sub	r8,r9
8001366c:	a3 68       	lsl	r8,0x2
8001366e:	f4 08 00 08 	add	r8,r10,r8
80013672:	70 08       	ld.w	r8,r8[0x0]
80013674:	70 0a       	ld.w	r10,r8[0x0]
80013676:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001367a:	12 98       	mov	r8,r9
8001367c:	a3 78       	lsl	r8,0x3
8001367e:	12 18       	sub	r8,r9
80013680:	2f f8       	sub	r8,-1
80013682:	f0 09 15 02 	lsl	r9,r8,0x2
80013686:	ec f8 00 24 	ld.w	r8,r6[36]
8001368a:	f2 08 00 0b 	add	r11,r9,r8
8001368e:	1a d5       	st.w	--sp,r5
80013690:	1c 98       	mov	r8,lr
80013692:	18 99       	mov	r9,r12
80013694:	30 0c       	mov	r12,0
80013696:	fe b0 fc e3 	rcall	8001305c <mavlink_msg_param_value_send>
8001369a:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
8001369c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800136a0:	ec fa 00 24 	ld.w	r10,r6[36]
800136a4:	12 98       	mov	r8,r9
800136a6:	a3 78       	lsl	r8,0x3
800136a8:	12 18       	sub	r8,r9
800136aa:	a3 68       	lsl	r8,0x2
800136ac:	f4 08 00 08 	add	r8,r10,r8
800136b0:	f0 c9 ff e8 	sub	r9,r8,-24
800136b4:	30 08       	mov	r8,0
800136b6:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800136b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800136bc:	2f f8       	sub	r8,-1
800136be:	ef 68 ff ff 	st.b	r7[-1],r8
800136c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800136c6:	ec f8 00 24 	ld.w	r8,r6[36]
800136ca:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800136ce:	10 39       	cp.w	r9,r8
800136d0:	cb 05       	brlt	80013630 <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
800136d2:	2f fd       	sub	sp,-4
800136d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800136d8:	80 01       	ld.sh	r1,r0[0x0]
800136da:	34 aa       	mov	r10,74

800136dc <send_scheduled_parameters>:


void send_scheduled_parameters() {
800136dc:	eb cd 40 e0 	pushm	r5-r7,lr
800136e0:	1a 97       	mov	r7,sp
800136e2:	20 1d       	sub	sp,4
800136e4:	4b 56       	lddpc	r6,800137b8 <send_scheduled_parameters+0xdc>
800136e6:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
800136e8:	30 08       	mov	r8,0
800136ea:	ef 68 ff ff 	st.b	r7[-1],r8
800136ee:	c5 98       	rjmp	800137a0 <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
800136f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800136f4:	ec fa 00 24 	ld.w	r10,r6[36]
800136f8:	12 98       	mov	r8,r9
800136fa:	a3 78       	lsl	r8,0x3
800136fc:	12 18       	sub	r8,r9
800136fe:	a3 68       	lsl	r8,0x2
80013700:	f4 08 00 08 	add	r8,r10,r8
80013704:	2e 88       	sub	r8,-24
80013706:	11 a8       	ld.ub	r8,r8[0x2]
80013708:	58 08       	cp.w	r8,0
8001370a:	c4 60       	breq	80013796 <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
8001370c:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013710:	ec f8 00 24 	ld.w	r8,r6[36]
80013714:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013718:	5c 88       	casts.h	r8
8001371a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
8001371e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013722:	ec fa 00 24 	ld.w	r10,r6[36]
80013726:	12 98       	mov	r8,r9
80013728:	a3 78       	lsl	r8,0x3
8001372a:	12 18       	sub	r8,r9
8001372c:	a3 68       	lsl	r8,0x2
8001372e:	f4 08 00 08 	add	r8,r10,r8
80013732:	2e c8       	sub	r8,-20
80013734:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013736:	5c 58       	castu.b	r8
80013738:	10 9c       	mov	r12,r8
8001373a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001373e:	ec fa 00 24 	ld.w	r10,r6[36]
80013742:	12 98       	mov	r8,r9
80013744:	a3 78       	lsl	r8,0x3
80013746:	12 18       	sub	r8,r9
80013748:	a3 68       	lsl	r8,0x2
8001374a:	f4 08 00 08 	add	r8,r10,r8
8001374e:	70 08       	ld.w	r8,r8[0x0]
80013750:	70 0a       	ld.w	r10,r8[0x0]
80013752:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013756:	12 98       	mov	r8,r9
80013758:	a3 78       	lsl	r8,0x3
8001375a:	12 18       	sub	r8,r9
8001375c:	2f f8       	sub	r8,-1
8001375e:	f0 09 15 02 	lsl	r9,r8,0x2
80013762:	ec f8 00 24 	ld.w	r8,r6[36]
80013766:	f2 08 00 0b 	add	r11,r9,r8
8001376a:	1a d5       	st.w	--sp,r5
8001376c:	1c 98       	mov	r8,lr
8001376e:	18 99       	mov	r9,r12
80013770:	30 0c       	mov	r12,0
80013772:	fe b0 fc 75 	rcall	8001305c <mavlink_msg_param_value_send>
80013776:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80013778:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001377c:	ec fa 00 24 	ld.w	r10,r6[36]
80013780:	12 98       	mov	r8,r9
80013782:	a3 78       	lsl	r8,0x3
80013784:	12 18       	sub	r8,r9
80013786:	a3 68       	lsl	r8,0x2
80013788:	f4 08 00 08 	add	r8,r10,r8
8001378c:	f0 c9 ff e8 	sub	r9,r8,-24
80013790:	30 08       	mov	r8,0
80013792:	b2 a8       	st.b	r9[0x2],r8
			return;
80013794:	c0 e8       	rjmp	800137b0 <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013796:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001379a:	2f f8       	sub	r8,-1
8001379c:	ef 68 ff ff 	st.b	r7[-1],r8
800137a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800137a4:	ec f8 00 24 	ld.w	r8,r6[36]
800137a8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800137ac:	10 39       	cp.w	r9,r8
800137ae:	ca 15       	brlt	800136f0 <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
800137b0:	2f fd       	sub	sp,-4
800137b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800137b6:	00 00       	add	r0,r0
800137b8:	80 01       	ld.sh	r1,r0[0x0]
800137ba:	35 6a       	mov	r10,86

800137bc <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
800137bc:	eb cd 40 c0 	pushm	r6-r7,lr
800137c0:	1a 97       	mov	r7,sp
800137c2:	20 4d       	sub	sp,16
800137c4:	4d 26       	lddpc	r6,8001390c <send_parameter+0x150>
800137c6:	1e 26       	rsub	r6,pc
800137c8:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
800137cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800137d0:	90 09       	ld.sh	r9,r8[0x0]
800137d2:	3f f8       	mov	r8,-1
800137d4:	f0 09 19 00 	cp.h	r9,r8
800137d8:	c1 d0       	breq	80013812 <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
800137da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800137de:	90 08       	ld.sh	r8,r8[0x0]
800137e0:	10 99       	mov	r9,r8
800137e2:	ec f8 00 24 	ld.w	r8,r6[36]
800137e6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800137ea:	10 39       	cp.w	r9,r8
800137ec:	e0 89 00 8b 	brgt	80013902 <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
800137f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800137f4:	90 08       	ld.sh	r8,r8[0x0]
800137f6:	10 99       	mov	r9,r8
800137f8:	ec fa 00 24 	ld.w	r10,r6[36]
800137fc:	12 98       	mov	r8,r9
800137fe:	a3 78       	lsl	r8,0x3
80013800:	12 18       	sub	r8,r9
80013802:	a3 68       	lsl	r8,0x2
80013804:	f4 08 00 08 	add	r8,r10,r8
80013808:	f0 c9 ff e8 	sub	r9,r8,-24
8001380c:	30 18       	mov	r8,1
8001380e:	b2 a8       	st.b	r9[0x2],r8
80013810:	c7 a8       	rjmp	80013904 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80013812:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013816:	2f c8       	sub	r8,-4
80013818:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
8001381c:	30 08       	mov	r8,0
8001381e:	ef 58 ff fa 	st.h	r7[-6],r8
80013822:	c6 78       	rjmp	800138f0 <send_parameter+0x134>
			bool match = true;
80013824:	30 18       	mov	r8,1
80013826:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
8001382a:	30 08       	mov	r8,0
8001382c:	ef 58 ff fe 	st.h	r7[-2],r8
80013830:	c3 38       	rjmp	80013896 <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013832:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013836:	ef 1a ff fe 	ld.uh	r10,r7[-2]
8001383a:	ec fb 00 24 	ld.w	r11,r6[36]
8001383e:	12 98       	mov	r8,r9
80013840:	a3 78       	lsl	r8,0x3
80013842:	12 18       	sub	r8,r9
80013844:	a3 68       	lsl	r8,0x2
80013846:	f6 08 00 08 	add	r8,r11,r8
8001384a:	14 08       	add	r8,r10
8001384c:	2f c8       	sub	r8,-4
8001384e:	11 89       	ld.ub	r9,r8[0x0]
80013850:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013854:	ee fa ff f4 	ld.w	r10,r7[-12]
80013858:	f4 08 00 08 	add	r8,r10,r8
8001385c:	11 88       	ld.ub	r8,r8[0x0]
8001385e:	f0 09 18 00 	cp.b	r9,r8
80013862:	c0 40       	breq	8001386a <send_parameter+0xae>
					match = false;
80013864:	30 08       	mov	r8,0
80013866:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
8001386a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001386e:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013872:	ec fb 00 24 	ld.w	r11,r6[36]
80013876:	12 98       	mov	r8,r9
80013878:	a3 78       	lsl	r8,0x3
8001387a:	12 18       	sub	r8,r9
8001387c:	a3 68       	lsl	r8,0x2
8001387e:	f6 08 00 08 	add	r8,r11,r8
80013882:	14 08       	add	r8,r10
80013884:	2f c8       	sub	r8,-4
80013886:	11 88       	ld.ub	r8,r8[0x0]
80013888:	58 08       	cp.w	r8,0
8001388a:	c1 80       	breq	800138ba <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
8001388c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013890:	2f f8       	sub	r8,-1
80013892:	ef 58 ff fe 	st.h	r7[-2],r8
80013896:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001389a:	ec fa 00 24 	ld.w	r10,r6[36]
8001389e:	12 98       	mov	r8,r9
800138a0:	a3 78       	lsl	r8,0x3
800138a2:	12 18       	sub	r8,r9
800138a4:	a3 68       	lsl	r8,0x2
800138a6:	f4 08 00 08 	add	r8,r10,r8
800138aa:	2e 88       	sub	r8,-24
800138ac:	11 88       	ld.ub	r8,r8[0x0]
800138ae:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800138b2:	f0 09 19 00 	cp.h	r9,r8
800138b6:	cb e3       	brcs	80013832 <send_parameter+0x76>
800138b8:	c0 28       	rjmp	800138bc <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800138ba:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800138bc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800138c0:	30 08       	mov	r8,0
800138c2:	f0 09 18 00 	cp.b	r9,r8
800138c6:	c1 00       	breq	800138e6 <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
800138c8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800138cc:	ec fa 00 24 	ld.w	r10,r6[36]
800138d0:	12 98       	mov	r8,r9
800138d2:	a3 78       	lsl	r8,0x3
800138d4:	12 18       	sub	r8,r9
800138d6:	a3 68       	lsl	r8,0x2
800138d8:	f4 08 00 08 	add	r8,r10,r8
800138dc:	f0 c9 ff e8 	sub	r9,r8,-24
800138e0:	30 18       	mov	r8,1
800138e2:	b2 a8       	st.b	r9[0x2],r8

				break;
800138e4:	c1 08       	rjmp	80013904 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
800138e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800138ea:	2f f8       	sub	r8,-1
800138ec:	ef 58 ff fa 	st.h	r7[-6],r8
800138f0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800138f4:	ec f8 00 24 	ld.w	r8,r6[36]
800138f8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800138fc:	10 39       	cp.w	r9,r8
800138fe:	c9 35       	brlt	80013824 <send_parameter+0x68>
80013900:	c0 28       	rjmp	80013904 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013902:	d7 03       	nop

				break;
			}					
		}
	}
}
80013904:	2f cd       	sub	sp,-16
80013906:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001390a:	00 00       	add	r0,r0
8001390c:	80 01       	ld.sh	r1,r0[0x0]
8001390e:	36 4a       	mov	r10,100

80013910 <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80013910:	eb cd 40 c0 	pushm	r6-r7,lr
80013914:	1a 97       	mov	r7,sp
80013916:	20 ad       	sub	sp,40
80013918:	4e 76       	lddpc	r6,80013ab4 <receive_parameter+0x1a4>
8001391a:	1e 26       	rsub	r6,pc
8001391c:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80013920:	ee f8 ff d8 	ld.w	r8,r7[-40]
80013924:	ee c9 00 24 	sub	r9,r7,36
80013928:	12 9b       	mov	r11,r9
8001392a:	10 9c       	mov	r12,r8
8001392c:	fe b0 fc 3b 	rcall	800131a2 <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80013930:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80013934:	ec f8 00 70 	ld.w	r8,r6[112]
80013938:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
8001393a:	f0 09 18 00 	cp.b	r9,r8
8001393e:	e0 81 00 b7 	brne	80013aac <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80013942:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80013946:	ec f8 00 70 	ld.w	r8,r6[112]
8001394a:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
8001394c:	f0 09 18 00 	cp.b	r9,r8
80013950:	e0 81 00 ae 	brne	80013aac <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80013954:	ee c8 00 24 	sub	r8,r7,36
80013958:	2f a8       	sub	r8,-6
8001395a:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
8001395e:	30 08       	mov	r8,0
80013960:	ef 58 ff fa 	st.h	r7[-6],r8
80013964:	c9 78       	rjmp	80013a92 <receive_parameter+0x182>
			bool match = true;
80013966:	30 18       	mov	r8,1
80013968:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
8001396c:	30 08       	mov	r8,0
8001396e:	ef 58 ff fe 	st.h	r7[-2],r8
80013972:	c3 38       	rjmp	800139d8 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013974:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013978:	ef 1a ff fe 	ld.uh	r10,r7[-2]
8001397c:	ec fb 00 24 	ld.w	r11,r6[36]
80013980:	12 98       	mov	r8,r9
80013982:	a3 78       	lsl	r8,0x3
80013984:	12 18       	sub	r8,r9
80013986:	a3 68       	lsl	r8,0x2
80013988:	f6 08 00 08 	add	r8,r11,r8
8001398c:	14 08       	add	r8,r10
8001398e:	2f c8       	sub	r8,-4
80013990:	11 89       	ld.ub	r9,r8[0x0]
80013992:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013996:	ee fa ff f4 	ld.w	r10,r7[-12]
8001399a:	f4 08 00 08 	add	r8,r10,r8
8001399e:	11 88       	ld.ub	r8,r8[0x0]
800139a0:	f0 09 18 00 	cp.b	r9,r8
800139a4:	c0 40       	breq	800139ac <receive_parameter+0x9c>
					match = false;
800139a6:	30 08       	mov	r8,0
800139a8:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
800139ac:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800139b0:	ef 1a ff fe 	ld.uh	r10,r7[-2]
800139b4:	ec fb 00 24 	ld.w	r11,r6[36]
800139b8:	12 98       	mov	r8,r9
800139ba:	a3 78       	lsl	r8,0x3
800139bc:	12 18       	sub	r8,r9
800139be:	a3 68       	lsl	r8,0x2
800139c0:	f6 08 00 08 	add	r8,r11,r8
800139c4:	14 08       	add	r8,r10
800139c6:	2f c8       	sub	r8,-4
800139c8:	11 88       	ld.ub	r8,r8[0x0]
800139ca:	58 08       	cp.w	r8,0
800139cc:	c1 80       	breq	800139fc <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
800139ce:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800139d2:	2f f8       	sub	r8,-1
800139d4:	ef 58 ff fe 	st.h	r7[-2],r8
800139d8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800139dc:	ec fa 00 24 	ld.w	r10,r6[36]
800139e0:	12 98       	mov	r8,r9
800139e2:	a3 78       	lsl	r8,0x3
800139e4:	12 18       	sub	r8,r9
800139e6:	a3 68       	lsl	r8,0x2
800139e8:	f4 08 00 08 	add	r8,r10,r8
800139ec:	2e 88       	sub	r8,-24
800139ee:	11 88       	ld.ub	r8,r8[0x0]
800139f0:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800139f4:	f0 09 19 00 	cp.h	r9,r8
800139f8:	cb e3       	brcs	80013974 <receive_parameter+0x64>
800139fa:	c0 28       	rjmp	800139fe <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800139fc:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800139fe:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013a02:	30 08       	mov	r8,0
80013a04:	f0 09 18 00 	cp.b	r9,r8
80013a08:	c4 00       	breq	80013a88 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
80013a0a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013a0e:	ec fa 00 24 	ld.w	r10,r6[36]
80013a12:	12 98       	mov	r8,r9
80013a14:	a3 78       	lsl	r8,0x3
80013a16:	12 18       	sub	r8,r9
80013a18:	a3 68       	lsl	r8,0x2
80013a1a:	f4 08 00 08 	add	r8,r10,r8
80013a1e:	70 08       	ld.w	r8,r8[0x0]
80013a20:	70 09       	ld.w	r9,r8[0x0]
80013a22:	ee f8 ff dc 	ld.w	r8,r7[-36]
80013a26:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013a2a:	c3 e0       	breq	80013aa6 <receive_parameter+0x196>
80013a2c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80013a30:	10 9a       	mov	r10,r8
80013a32:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013a36:	ec fb 00 24 	ld.w	r11,r6[36]
80013a3a:	12 98       	mov	r8,r9
80013a3c:	a3 78       	lsl	r8,0x3
80013a3e:	12 18       	sub	r8,r9
80013a40:	a3 68       	lsl	r8,0x2
80013a42:	f6 08 00 08 	add	r8,r11,r8
80013a46:	2e c8       	sub	r8,-20
80013a48:	70 08       	ld.w	r8,r8[0x0]
80013a4a:	10 3a       	cp.w	r10,r8
80013a4c:	c2 f1       	brne	80013aaa <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80013a4e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013a52:	ec fa 00 24 	ld.w	r10,r6[36]
80013a56:	12 98       	mov	r8,r9
80013a58:	a3 78       	lsl	r8,0x3
80013a5a:	12 18       	sub	r8,r9
80013a5c:	a3 68       	lsl	r8,0x2
80013a5e:	f4 08 00 08 	add	r8,r10,r8
80013a62:	70 08       	ld.w	r8,r8[0x0]
80013a64:	ee f9 ff dc 	ld.w	r9,r7[-36]
80013a68:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80013a6a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013a6e:	ec fa 00 24 	ld.w	r10,r6[36]
80013a72:	12 98       	mov	r8,r9
80013a74:	a3 78       	lsl	r8,0x3
80013a76:	12 18       	sub	r8,r9
80013a78:	a3 68       	lsl	r8,0x2
80013a7a:	f4 08 00 08 	add	r8,r10,r8
80013a7e:	f0 c9 ff e8 	sub	r9,r8,-24
80013a82:	30 18       	mov	r8,1
80013a84:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
80013a86:	c1 38       	rjmp	80013aac <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013a88:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013a8c:	2f f8       	sub	r8,-1
80013a8e:	ef 58 ff fa 	st.h	r7[-6],r8
80013a92:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013a96:	ec f8 00 24 	ld.w	r8,r6[36]
80013a9a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013a9e:	10 39       	cp.w	r9,r8
80013aa0:	fe 95 ff 63 	brlt	80013966 <receive_parameter+0x56>
80013aa4:	c0 48       	rjmp	80013aac <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
80013aa6:	d7 03       	nop
80013aa8:	c0 28       	rjmp	80013aac <receive_parameter+0x19c>
80013aaa:	d7 03       	nop
			}
		}
	}
}
80013aac:	2f 6d       	sub	sp,-40
80013aae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013ab2:	00 00       	add	r0,r0
80013ab4:	80 01       	ld.sh	r1,r0[0x0]
80013ab6:	37 9e       	mov	lr,121
80013ab8:	46 6c       	lddsp	r12,sp[0x198]
80013aba:	61 73       	ld.w	r3,r0[0x5c]
80013abc:	68 20       	ld.w	r0,r4[0x8]
80013abe:	72 65       	ld.w	r5,r9[0x18]
80013ac0:	61 64       	ld.w	r4,r0[0x58]
80013ac2:	20 73       	sub	r3,7
80013ac4:	75 63       	ld.w	r3,r10[0x58]
80013ac6:	63 65       	ld.w	r5,r1[0x58]
80013ac8:	73 73       	ld.w	r3,r9[0x5c]
80013aca:	66 75       	ld.w	r5,r3[0x1c]
80013acc:	6c 21       	ld.w	r1,r6[0x8]
80013ace:	20 4e       	sub	lr,4
80013ad0:	65 77       	ld.w	r7,r2[0x5c]
80013ad2:	20 50       	sub	r0,5
80013ad4:	61 72       	ld.w	r2,r0[0x5c]
80013ad6:	61 6d       	ld.w	sp,r0[0x58]
80013ad8:	65 74       	ld.w	r4,r2[0x5c]
80013ada:	65 72       	ld.w	r2,r2[0x5c]
80013adc:	73 20       	ld.w	r0,r9[0x48]
80013ade:	69 6e       	ld.w	lr,r4[0x58]
80013ae0:	73 65       	ld.w	r5,r9[0x58]
80013ae2:	72 74       	ld.w	r4,r9[0x1c]
80013ae4:	65 64       	ld.w	r4,r2[0x58]
80013ae6:	2e 20       	sub	r0,-30
80013ae8:	0a 00       	add	r0,r5
80013aea:	00 00       	add	r0,r0
80013aec:	46 6c       	lddsp	r12,sp[0x198]
80013aee:	61 73       	ld.w	r3,r0[0x5c]
80013af0:	68 20       	ld.w	r0,r4[0x8]
80013af2:	6d 65       	ld.w	r5,r6[0x58]
80013af4:	6d 6f       	ld.w	pc,r6[0x58]
80013af6:	72 79       	ld.w	r9,r9[0x1c]
80013af8:	20 63       	sub	r3,6
80013afa:	6f 72       	ld.w	r2,r7[0x5c]
80013afc:	72 75       	ld.w	r5,r9[0x1c]
80013afe:	70 74       	ld.w	r4,r8[0x1c]
80013b00:	65 64       	ld.w	r4,r2[0x58]
80013b02:	21 20       	sub	r0,18
80013b04:	48 61       	lddpc	r1,80013b1c <receive_parameter+0x20c>
80013b06:	72 64       	ld.w	r4,r9[0x18]
80013b08:	63 6f       	ld.w	pc,r1[0x58]
80013b0a:	64 65       	ld.w	r5,r2[0x18]
80013b0c:	64 20       	ld.w	r0,r2[0x8]
80013b0e:	76 61       	ld.w	r1,r11[0x18]
80013b10:	6c 75       	ld.w	r5,r6[0x1c]
80013b12:	65 73       	ld.w	r3,r2[0x5c]
80013b14:	20 74       	sub	r4,7
80013b16:	61 6b       	ld.w	r11,r0[0x58]
80013b18:	65 6e       	ld.w	lr,r2[0x58]
80013b1a:	2e 0a       	sub	r10,-32
	...

80013b1e <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
80013b1e:	eb cd 40 c0 	pushm	r6-r7,lr
80013b22:	1a 97       	mov	r7,sp
80013b24:	fa cd 01 f8 	sub	sp,sp,504
80013b28:	4d 06       	lddpc	r6,80013c68 <read_parameters_from_flashc+0x14a>
80013b2a:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80013b2c:	ec f8 01 94 	ld.w	r8,r6[404]
80013b30:	30 49       	mov	r9,4
80013b32:	ea 19 80 80 	orh	r9,0x8080
80013b36:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80013b38:	30 08       	mov	r8,0
80013b3a:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
80013b3e:	30 08       	mov	r8,0
80013b40:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80013b44:	30 08       	mov	r8,0
80013b46:	ef 68 ff f7 	st.b	r7[-9],r8
80013b4a:	c2 98       	rjmp	80013b9c <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80013b4c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013b50:	ec f9 01 94 	ld.w	r9,r6[404]
80013b54:	72 09       	ld.w	r9,r9[0x0]
80013b56:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80013b5a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80013b5e:	a3 68       	lsl	r8,0x2
80013b60:	ee 08 00 08 	add	r8,r7,r8
80013b64:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80013b68:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013b6c:	a3 68       	lsl	r8,0x2
80013b6e:	ee 08 00 08 	add	r8,r7,r8
80013b72:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80013b76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013b7a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013b7e:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
80013b82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013b8a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013b8e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
80013b92:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013b96:	2f f8       	sub	r8,-1
80013b98:	ef 68 ff f7 	st.b	r7[-9],r8
80013b9c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80013ba0:	ec f8 00 24 	ld.w	r8,r6[36]
80013ba4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ba8:	2f f8       	sub	r8,-1
80013baa:	10 39       	cp.w	r9,r8
80013bac:	cd 05       	brlt	80013b4c <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80013bae:	ec f8 00 24 	ld.w	r8,r6[36]
80013bb2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013bb6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80013bba:	ee f8 fe 08 	ld.w	r8,r7[-504]
80013bbe:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013bc2:	c4 b1       	brne	80013c58 <read_parameters_from_flashc+0x13a>
80013bc4:	ec f8 01 94 	ld.w	r8,r6[404]
80013bc8:	70 08       	ld.w	r8,r8[0x0]
80013bca:	ec f9 00 24 	ld.w	r9,r6[36]
80013bce:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80013bd2:	2f f9       	sub	r9,-1
80013bd4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80013bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013bdc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013be0:	c3 c1       	brne	80013c58 <read_parameters_from_flashc+0x13a>
80013be2:	ec f8 01 94 	ld.w	r8,r6[404]
80013be6:	70 08       	ld.w	r8,r8[0x0]
80013be8:	ec f9 00 24 	ld.w	r9,r6[36]
80013bec:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80013bf0:	2f e9       	sub	r9,-2
80013bf2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80013bf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013bfa:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013bfe:	c2 d1       	brne	80013c58 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
80013c00:	fe cc 01 48 	sub	r12,pc,328
80013c04:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
80013c08:	30 18       	mov	r8,1
80013c0a:	ef 68 ff f7 	st.b	r7[-9],r8
80013c0e:	c1 b8       	rjmp	80013c44 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80013c10:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013c14:	f0 c9 00 01 	sub	r9,r8,1
80013c18:	ec fa 00 24 	ld.w	r10,r6[36]
80013c1c:	12 98       	mov	r8,r9
80013c1e:	a3 78       	lsl	r8,0x3
80013c20:	12 18       	sub	r8,r9
80013c22:	a3 68       	lsl	r8,0x2
80013c24:	f4 08 00 08 	add	r8,r10,r8
80013c28:	70 09       	ld.w	r9,r8[0x0]
80013c2a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013c2e:	a3 68       	lsl	r8,0x2
80013c30:	ee 08 00 08 	add	r8,r7,r8
80013c34:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80013c38:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80013c3a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013c3e:	2f f8       	sub	r8,-1
80013c40:	ef 68 ff f7 	st.b	r7[-9],r8
80013c44:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80013c48:	ec f8 00 24 	ld.w	r8,r6[36]
80013c4c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013c50:	2f f8       	sub	r8,-1
80013c52:	10 39       	cp.w	r9,r8
80013c54:	cd e5       	brlt	80013c10 <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80013c56:	c0 58       	rjmp	80013c60 <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80013c58:	fe cc 01 6c 	sub	r12,pc,364
80013c5c:	f0 16 00 01 	mcall	r6[4]
	}
}
80013c60:	28 2d       	sub	sp,-504
80013c62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013c66:	00 00       	add	r0,r0
80013c68:	80 01       	ld.sh	r1,r0[0x0]
80013c6a:	39 ae       	mov	lr,-102
80013c6c:	42 65       	lddsp	r5,sp[0x98]
80013c6e:	67 69       	ld.w	r9,r3[0x58]
80013c70:	6e 20       	ld.w	r0,r7[0x8]
80013c72:	77 72       	ld.w	r2,r11[0x5c]
80013c74:	69 74       	ld.w	r4,r4[0x5c]
80013c76:	65 20       	ld.w	r0,r2[0x48]
80013c78:	74 6f       	ld.w	pc,r10[0x18]
80013c7a:	20 66       	sub	r6,6
80013c7c:	6c 61       	ld.w	r1,r6[0x18]
80013c7e:	73 68       	ld.w	r8,r9[0x58]
80013c80:	63 2e       	ld.w	lr,r1[0x48]
80013c82:	2e 2e       	sub	lr,-30
80013c84:	0a 00       	add	r0,r5
80013c86:	00 00       	add	r0,r0
80013c88:	57 72       	stdsp	sp[0x1dc],r2
80013c8a:	69 74       	ld.w	r4,r4[0x5c]
80013c8c:	65 20       	ld.w	r0,r2[0x48]
80013c8e:	74 6f       	ld.w	pc,r10[0x18]
80013c90:	20 66       	sub	r6,6
80013c92:	61 6c       	ld.w	r12,r0[0x58]
80013c94:	73 68       	ld.w	r8,r9[0x58]
80013c96:	63 20       	ld.w	r0,r1[0x48]
80013c98:	63 6f       	ld.w	pc,r1[0x58]
80013c9a:	6d 70       	ld.w	r0,r6[0x5c]
80013c9c:	6c 65       	ld.w	r5,r6[0x18]
80013c9e:	74 65       	ld.w	r5,r10[0x18]
80013ca0:	64 2e       	ld.w	lr,r2[0x8]
80013ca2:	0a 00       	add	r0,r5

80013ca4 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
80013ca4:	eb cd 40 c0 	pushm	r6-r7,lr
80013ca8:	1a 97       	mov	r7,sp
80013caa:	fa cd 01 f8 	sub	sp,sp,504
80013cae:	4c 96       	lddpc	r6,80013dd0 <write_parameters_to_flashc+0x12c>
80013cb0:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
80013cb2:	30 08       	mov	r8,0
80013cb4:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
80013cb8:	30 08       	mov	r8,0
80013cba:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80013cbe:	ec f8 01 94 	ld.w	r8,r6[404]
80013cc2:	30 49       	mov	r9,4
80013cc4:	ea 19 80 80 	orh	r9,0x8080
80013cc8:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
80013cca:	ec f8 00 24 	ld.w	r8,r6[36]
80013cce:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013cd2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80013cd6:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
80013cda:	ee f8 fe 08 	ld.w	r8,r7[-504]
80013cde:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013ce2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013ce6:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
80013cea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013cee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013cf2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013cf6:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
80013cfa:	fe cc 00 8e 	sub	r12,pc,142
80013cfe:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
80013d02:	30 18       	mov	r8,1
80013d04:	ef 68 ff ff 	st.b	r7[-1],r8
80013d08:	c3 18       	rjmp	80013d6a <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
80013d0a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80013d0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013d12:	f0 c9 00 01 	sub	r9,r8,1
80013d16:	ec fb 00 24 	ld.w	r11,r6[36]
80013d1a:	12 98       	mov	r8,r9
80013d1c:	a3 78       	lsl	r8,0x3
80013d1e:	12 18       	sub	r8,r9
80013d20:	a3 68       	lsl	r8,0x2
80013d22:	f6 08 00 08 	add	r8,r11,r8
80013d26:	70 08       	ld.w	r8,r8[0x0]
80013d28:	70 09       	ld.w	r9,r8[0x0]
80013d2a:	f4 08 15 02 	lsl	r8,r10,0x2
80013d2e:	ee 08 00 08 	add	r8,r7,r8
80013d32:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80013d36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013d3a:	a3 68       	lsl	r8,0x2
80013d3c:	ee 08 00 08 	add	r8,r7,r8
80013d40:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80013d44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013d48:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013d4c:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80013d50:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013d54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013d58:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013d5c:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
80013d60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013d64:	2f f8       	sub	r8,-1
80013d66:	ef 68 ff ff 	st.b	r7[-1],r8
80013d6a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d6e:	ec f8 00 24 	ld.w	r8,r6[36]
80013d72:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d76:	2f f8       	sub	r8,-1
80013d78:	10 39       	cp.w	r9,r8
80013d7a:	cc 85       	brlt	80013d0a <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
80013d7c:	ec f8 00 24 	ld.w	r8,r6[36]
80013d80:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d84:	2f f8       	sub	r8,-1
80013d86:	a3 68       	lsl	r8,0x2
80013d88:	ee 08 00 08 	add	r8,r7,r8
80013d8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013d90:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
80013d94:	ec f8 00 24 	ld.w	r8,r6[36]
80013d98:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d9c:	2f e8       	sub	r8,-2
80013d9e:	a3 68       	lsl	r8,0x2
80013da0:	ee 08 00 08 	add	r8,r7,r8
80013da4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013da8:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
80013dac:	ec f8 01 94 	ld.w	r8,r6[404]
80013db0:	70 08       	ld.w	r8,r8[0x0]
80013db2:	ee cb 01 f8 	sub	r11,r7,504
80013db6:	30 19       	mov	r9,1
80013db8:	e0 6a 01 ec 	mov	r10,492
80013dbc:	10 9c       	mov	r12,r8
80013dbe:	f0 16 01 5a 	mcall	r6[1384]
	dbg_print("Write to falshc completed.\n");
80013dc2:	fe cc 01 3a 	sub	r12,pc,314
80013dc6:	f0 16 00 01 	mcall	r6[4]
80013dca:	28 2d       	sub	sp,-504
80013dcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013dd0:	80 01       	ld.sh	r1,r0[0x0]
80013dd2:	3b 34       	mov	r4,-77

80013dd4 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
80013dd4:	eb cd 40 80 	pushm	r7,lr
80013dd8:	1a 97       	mov	r7,sp
80013dda:	20 5d       	sub	sp,20
80013ddc:	18 9a       	mov	r10,r12
80013dde:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
80013de2:	30 08       	mov	r8,0
80013de4:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80013de8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013dec:	70 08       	ld.w	r8,r8[0x0]
80013dee:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
80013df2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013df6:	2f c8       	sub	r8,-4
80013df8:	70 08       	ld.w	r8,r8[0x0]
80013dfa:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
80013dfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013e02:	2f 88       	sub	r8,-8
80013e04:	70 08       	ld.w	r8,r8[0x0]
80013e06:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80013e0a:	14 98       	mov	r8,r10
80013e0c:	ee c9 00 10 	sub	r9,r7,16
80013e10:	20 08       	sub	r8,0
80013e12:	20 09       	sub	r9,0
80013e14:	72 0b       	ld.w	r11,r9[0x0]
80013e16:	91 0b       	st.w	r8[0x0],r11
80013e18:	72 1b       	ld.w	r11,r9[0x4]
80013e1a:	91 1b       	st.w	r8[0x4],r11
80013e1c:	72 2b       	ld.w	r11,r9[0x8]
80013e1e:	91 2b       	st.w	r8[0x8],r11
80013e20:	72 39       	ld.w	r9,r9[0xc]
80013e22:	91 39       	st.w	r8[0xc],r9
}
80013e24:	14 9c       	mov	r12,r10
80013e26:	2f bd       	sub	sp,-20
80013e28:	e3 cd 80 80 	ldm	sp++,r7,pc

80013e2c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80013e2c:	eb cd 40 80 	pushm	r7,lr
80013e30:	1a 97       	mov	r7,sp
80013e32:	20 3d       	sub	sp,12
80013e34:	ef 4c ff f8 	st.w	r7[-8],r12
80013e38:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80013e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e40:	70 09       	ld.w	r9,r8[0x0]
80013e42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e46:	70 08       	ld.w	r8,r8[0x0]
80013e48:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80013e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e50:	2f c8       	sub	r8,-4
80013e52:	70 0a       	ld.w	r10,r8[0x0]
80013e54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e58:	2f c8       	sub	r8,-4
80013e5a:	70 08       	ld.w	r8,r8[0x0]
80013e5c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80013e60:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80013e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e68:	2f 88       	sub	r8,-8
80013e6a:	70 0a       	ld.w	r10,r8[0x0]
80013e6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e70:	2f 88       	sub	r8,-8
80013e72:	70 08       	ld.w	r8,r8[0x0]
80013e74:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80013e78:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013e7c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80013e80:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80013e84:	10 9c       	mov	r12,r8
80013e86:	2f dd       	sub	sp,-12
80013e88:	e3 cd 80 80 	ldm	sp++,r7,pc

80013e8c <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80013e8c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80013e90:	1a 97       	mov	r7,sp
80013e92:	20 7d       	sub	sp,28
80013e94:	4b d6       	lddpc	r6,80013f88 <quat_multi+0xfc>
80013e96:	1e 26       	rsub	r6,pc
80013e98:	ee c8 ff ec 	sub	r8,r7,-20
80013e9c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
80013e9e:	70 2a       	ld.w	r10,r8[0x8]
80013ea0:	70 79       	ld.w	r9,r8[0x1c]
80013ea2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013ea6:	70 3b       	ld.w	r11,r8[0xc]
80013ea8:	70 69       	ld.w	r9,r8[0x18]
80013eaa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013eae:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013eb2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80013eb6:	70 3a       	ld.w	r10,r8[0xc]
80013eb8:	70 59       	ld.w	r9,r8[0x14]
80013eba:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013ebe:	70 1b       	ld.w	r11,r8[0x4]
80013ec0:	70 79       	ld.w	r9,r8[0x1c]
80013ec2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013ec6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013eca:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
80013ece:	70 1a       	ld.w	r10,r8[0x4]
80013ed0:	70 69       	ld.w	r9,r8[0x18]
80013ed2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013ed6:	70 2b       	ld.w	r11,r8[0x8]
80013ed8:	70 59       	ld.w	r9,r8[0x14]
80013eda:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013ede:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013ee2:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80013ee6:	70 4a       	ld.w	r10,r8[0x10]
80013ee8:	70 19       	ld.w	r9,r8[0x4]
80013eea:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013eee:	70 0b       	ld.w	r11,r8[0x0]
80013ef0:	70 59       	ld.w	r9,r8[0x14]
80013ef2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013ef6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013efa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013efe:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013f02:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80013f06:	70 4a       	ld.w	r10,r8[0x10]
80013f08:	70 29       	ld.w	r9,r8[0x8]
80013f0a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013f0e:	70 0b       	ld.w	r11,r8[0x0]
80013f10:	70 69       	ld.w	r9,r8[0x18]
80013f12:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013f16:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013f1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013f1e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013f22:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80013f26:	70 4a       	ld.w	r10,r8[0x10]
80013f28:	70 39       	ld.w	r9,r8[0xc]
80013f2a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013f2e:	70 0b       	ld.w	r11,r8[0x0]
80013f30:	70 79       	ld.w	r9,r8[0x1c]
80013f32:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013f36:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013f3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013f3e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013f42:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80013f46:	70 0a       	ld.w	r10,r8[0x0]
80013f48:	70 49       	ld.w	r9,r8[0x10]
80013f4a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
80013f4e:	f0 c9 ff f0 	sub	r9,r8,-16
80013f52:	2f c9       	sub	r9,-4
80013f54:	2f c8       	sub	r8,-4
80013f56:	12 9b       	mov	r11,r9
80013f58:	10 9c       	mov	r12,r8
80013f5a:	c6 9f       	rcall	80013e2c <scalar_product>
80013f5c:	18 98       	mov	r8,r12
80013f5e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80013f62:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80013f66:	0a 98       	mov	r8,r5
80013f68:	ee c9 00 1c 	sub	r9,r7,28
80013f6c:	20 08       	sub	r8,0
80013f6e:	20 09       	sub	r9,0
80013f70:	72 0a       	ld.w	r10,r9[0x0]
80013f72:	91 0a       	st.w	r8[0x0],r10
80013f74:	72 1a       	ld.w	r10,r9[0x4]
80013f76:	91 1a       	st.w	r8[0x4],r10
80013f78:	72 2a       	ld.w	r10,r9[0x8]
80013f7a:	91 2a       	st.w	r8[0x8],r10
80013f7c:	72 39       	ld.w	r9,r9[0xc]
80013f7e:	91 39       	st.w	r8[0xc],r9
}
80013f80:	0a 9c       	mov	r12,r5
80013f82:	2f 9d       	sub	sp,-28
80013f84:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80013f88:	80 01       	ld.sh	r1,r0[0x0]
80013f8a:	3d 1a       	mov	r10,-47

80013f8c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80013f8c:	eb cd 40 80 	pushm	r7,lr
80013f90:	1a 97       	mov	r7,sp
80013f92:	20 5d       	sub	sp,20
80013f94:	ee c9 ff f8 	sub	r9,r7,-8
80013f98:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80013f9a:	72 08       	ld.w	r8,r9[0x0]
80013f9c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80013fa0:	30 08       	mov	r8,0
80013fa2:	ef 48 ff fc 	st.w	r7[-4],r8
80013fa6:	c1 58       	rjmp	80013fd0 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80013fa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fac:	ee fb ff fc 	ld.w	r11,r7[-4]
80013fb0:	2f fb       	sub	r11,-1
80013fb2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80013fb6:	ee 1b 80 00 	eorh	r11,0x8000
80013fba:	2f f8       	sub	r8,-1
80013fbc:	a3 68       	lsl	r8,0x2
80013fbe:	ee 08 00 08 	add	r8,r7,r8
80013fc2:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80013fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fca:	2f f8       	sub	r8,-1
80013fcc:	ef 48 ff fc 	st.w	r7[-4],r8
80013fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013fd4:	58 28       	cp.w	r8,2
80013fd6:	fe 9a ff e9 	brle	80013fa8 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80013fda:	14 98       	mov	r8,r10
80013fdc:	ee c9 00 14 	sub	r9,r7,20
80013fe0:	20 08       	sub	r8,0
80013fe2:	20 09       	sub	r9,0
80013fe4:	72 0b       	ld.w	r11,r9[0x0]
80013fe6:	91 0b       	st.w	r8[0x0],r11
80013fe8:	72 1b       	ld.w	r11,r9[0x4]
80013fea:	91 1b       	st.w	r8[0x4],r11
80013fec:	72 2b       	ld.w	r11,r9[0x8]
80013fee:	91 2b       	st.w	r8[0x8],r11
80013ff0:	72 39       	ld.w	r9,r9[0xc]
80013ff2:	91 39       	st.w	r8[0xc],r9
}
80013ff4:	14 9c       	mov	r12,r10
80013ff6:	2f bd       	sub	sp,-20
80013ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80013ffc <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80013ffc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014000:	1a 97       	mov	r7,sp
80014002:	20 cd       	sub	sp,48
80014004:	4b c6       	lddpc	r6,800140f4 <quat_global_to_local+0xf8>
80014006:	1e 26       	rsub	r6,pc
80014008:	ee c5 ff ec 	sub	r5,r7,-20
8001400c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001400e:	ee ca 00 10 	sub	r10,r7,16
80014012:	20 4d       	sub	sp,16
80014014:	1a 98       	mov	r8,sp
80014016:	0a 99       	mov	r9,r5
80014018:	20 08       	sub	r8,0
8001401a:	20 09       	sub	r9,0
8001401c:	72 0b       	ld.w	r11,r9[0x0]
8001401e:	91 0b       	st.w	r8[0x0],r11
80014020:	72 1b       	ld.w	r11,r9[0x4]
80014022:	91 1b       	st.w	r8[0x4],r11
80014024:	72 2b       	ld.w	r11,r9[0x8]
80014026:	91 2b       	st.w	r8[0x8],r11
80014028:	72 39       	ld.w	r9,r9[0xc]
8001402a:	91 39       	st.w	r8[0xc],r9
8001402c:	14 9c       	mov	r12,r10
8001402e:	ca ff       	rcall	80013f8c <quat_inv>
80014030:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80014032:	ee ca 00 20 	sub	r10,r7,32
80014036:	20 4d       	sub	sp,16
80014038:	1a 98       	mov	r8,sp
8001403a:	ea c9 ff f0 	sub	r9,r5,-16
8001403e:	20 08       	sub	r8,0
80014040:	20 09       	sub	r9,0
80014042:	72 0b       	ld.w	r11,r9[0x0]
80014044:	91 0b       	st.w	r8[0x0],r11
80014046:	72 1b       	ld.w	r11,r9[0x4]
80014048:	91 1b       	st.w	r8[0x4],r11
8001404a:	72 2b       	ld.w	r11,r9[0x8]
8001404c:	91 2b       	st.w	r8[0x8],r11
8001404e:	72 39       	ld.w	r9,r9[0xc]
80014050:	91 39       	st.w	r8[0xc],r9
80014052:	20 4d       	sub	sp,16
80014054:	1a 98       	mov	r8,sp
80014056:	ee c9 00 10 	sub	r9,r7,16
8001405a:	20 08       	sub	r8,0
8001405c:	20 09       	sub	r9,0
8001405e:	72 0b       	ld.w	r11,r9[0x0]
80014060:	91 0b       	st.w	r8[0x0],r11
80014062:	72 1b       	ld.w	r11,r9[0x4]
80014064:	91 1b       	st.w	r8[0x4],r11
80014066:	72 2b       	ld.w	r11,r9[0x8]
80014068:	91 2b       	st.w	r8[0x8],r11
8001406a:	72 39       	ld.w	r9,r9[0xc]
8001406c:	91 39       	st.w	r8[0xc],r9
8001406e:	14 9c       	mov	r12,r10
80014070:	c0 ef       	rcall	80013e8c <quat_multi>
80014072:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80014074:	ee ca 00 30 	sub	r10,r7,48
80014078:	20 4d       	sub	sp,16
8001407a:	1a 98       	mov	r8,sp
8001407c:	0a 99       	mov	r9,r5
8001407e:	20 08       	sub	r8,0
80014080:	20 09       	sub	r9,0
80014082:	72 0b       	ld.w	r11,r9[0x0]
80014084:	91 0b       	st.w	r8[0x0],r11
80014086:	72 1b       	ld.w	r11,r9[0x4]
80014088:	91 1b       	st.w	r8[0x4],r11
8001408a:	72 2b       	ld.w	r11,r9[0x8]
8001408c:	91 2b       	st.w	r8[0x8],r11
8001408e:	72 39       	ld.w	r9,r9[0xc]
80014090:	91 39       	st.w	r8[0xc],r9
80014092:	20 4d       	sub	sp,16
80014094:	1a 98       	mov	r8,sp
80014096:	ee c9 00 20 	sub	r9,r7,32
8001409a:	20 08       	sub	r8,0
8001409c:	20 09       	sub	r9,0
8001409e:	72 0b       	ld.w	r11,r9[0x0]
800140a0:	91 0b       	st.w	r8[0x0],r11
800140a2:	72 1b       	ld.w	r11,r9[0x4]
800140a4:	91 1b       	st.w	r8[0x4],r11
800140a6:	72 2b       	ld.w	r11,r9[0x8]
800140a8:	91 2b       	st.w	r8[0x8],r11
800140aa:	72 39       	ld.w	r9,r9[0xc]
800140ac:	91 39       	st.w	r8[0xc],r9
800140ae:	14 9c       	mov	r12,r10
800140b0:	ce ee       	rcall	80013e8c <quat_multi>
800140b2:	2f 8d       	sub	sp,-32
800140b4:	ee c8 00 20 	sub	r8,r7,32
800140b8:	ee c9 00 30 	sub	r9,r7,48
800140bc:	20 08       	sub	r8,0
800140be:	20 09       	sub	r9,0
800140c0:	72 0a       	ld.w	r10,r9[0x0]
800140c2:	91 0a       	st.w	r8[0x0],r10
800140c4:	72 1a       	ld.w	r10,r9[0x4]
800140c6:	91 1a       	st.w	r8[0x4],r10
800140c8:	72 2a       	ld.w	r10,r9[0x8]
800140ca:	91 2a       	st.w	r8[0x8],r10
800140cc:	72 39       	ld.w	r9,r9[0xc]
800140ce:	91 39       	st.w	r8[0xc],r9

	return qtmp;
800140d0:	06 98       	mov	r8,r3
800140d2:	ee c9 00 20 	sub	r9,r7,32
800140d6:	20 08       	sub	r8,0
800140d8:	20 09       	sub	r9,0
800140da:	72 0a       	ld.w	r10,r9[0x0]
800140dc:	91 0a       	st.w	r8[0x0],r10
800140de:	72 1a       	ld.w	r10,r9[0x4]
800140e0:	91 1a       	st.w	r8[0x4],r10
800140e2:	72 2a       	ld.w	r10,r9[0x8]
800140e4:	91 2a       	st.w	r8[0x8],r10
800140e6:	72 39       	ld.w	r9,r9[0xc]
800140e8:	91 39       	st.w	r8[0xc],r9
}
800140ea:	06 9c       	mov	r12,r3
800140ec:	2f 4d       	sub	sp,-48
800140ee:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800140f2:	00 00       	add	r0,r0
800140f4:	80 01       	ld.sh	r1,r0[0x0]
800140f6:	3e 8a       	mov	r10,-24

800140f8 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
800140f8:	eb cd 40 c0 	pushm	r6-r7,lr
800140fc:	1a 97       	mov	r7,sp
800140fe:	20 2d       	sub	sp,8
80014100:	48 96       	lddpc	r6,80014124 <vector_norm_sqr+0x2c>
80014102:	1e 26       	rsub	r6,pc
80014104:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80014108:	ee fb ff f8 	ld.w	r11,r7[-8]
8001410c:	ee fc ff f8 	ld.w	r12,r7[-8]
80014110:	c8 ee       	rcall	80013e2c <scalar_product>
80014112:	18 98       	mov	r8,r12
80014114:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80014118:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001411c:	10 9c       	mov	r12,r8
8001411e:	2f ed       	sub	sp,-8
80014120:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014124:	80 01       	ld.sh	r1,r0[0x0]
80014126:	3f 86       	mov	r6,-8

80014128 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80014128:	eb cd 40 80 	pushm	r7,lr
8001412c:	1a 97       	mov	r7,sp
8001412e:	20 1d       	sub	sp,4
80014130:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80014134:	30 18       	mov	r8,1
80014136:	ee fa ff fc 	ld.w	r10,r7[-4]
8001413a:	30 09       	mov	r9,0
8001413c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014140:	e0 8c 00 03 	brvs	80014146 <f_abs+0x1e>
80014144:	c0 24       	brge	80014148 <f_abs+0x20>
80014146:	30 08       	mov	r8,0
80014148:	5c 58       	castu.b	r8
8001414a:	c0 40       	breq	80014152 <f_abs+0x2a>
	{
		return a;
8001414c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014150:	c0 58       	rjmp	8001415a <f_abs+0x32>
	}else{
		return -a;
80014152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014156:	ee 18 80 00 	eorh	r8,0x8000
	}
}
8001415a:	10 9c       	mov	r12,r8
8001415c:	2f fd       	sub	sp,-4
8001415e:	e3 cd 80 80 	ldm	sp++,r7,pc

80014162 <f_min>:

static inline float f_min(const float a, const float b){
80014162:	eb cd 40 80 	pushm	r7,lr
80014166:	1a 97       	mov	r7,sp
80014168:	20 2d       	sub	sp,8
8001416a:	ef 4c ff fc 	st.w	r7[-4],r12
8001416e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80014172:	30 18       	mov	r8,1
80014174:	ee fa ff fc 	ld.w	r10,r7[-4]
80014178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001417c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014180:	e0 8c 00 04 	brvs	80014188 <f_min+0x26>
80014184:	e0 8a 00 03 	brle	8001418a <f_min+0x28>
80014188:	30 08       	mov	r8,0
8001418a:	5c 58       	castu.b	r8
8001418c:	c0 40       	breq	80014194 <f_min+0x32>
	{
		return a;
8001418e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014192:	c0 38       	rjmp	80014198 <f_min+0x36>
	}else{
		return b;
80014194:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80014198:	10 9c       	mov	r12,r8
8001419a:	2f ed       	sub	sp,-8
8001419c:	e3 cd 80 80 	ldm	sp++,r7,pc

800141a0 <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
800141a0:	eb cd 40 c0 	pushm	r6-r7,lr
800141a4:	1a 97       	mov	r7,sp
800141a6:	20 1d       	sub	sp,4
800141a8:	48 c6       	lddpc	r6,800141d8 <center_window_2+0x38>
800141aa:	1e 26       	rsub	r6,pc
800141ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
800141b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800141b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800141b8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800141bc:	fc 18 3f 80 	movh	r8,0x3f80
800141c0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800141c4:	10 9b       	mov	r11,r8
800141c6:	fc 1c 3f 80 	movh	r12,0x3f80
800141ca:	f0 16 00 0a 	mcall	r6[40]
800141ce:	18 98       	mov	r8,r12
}
800141d0:	10 9c       	mov	r12,r8
800141d2:	2f fd       	sub	sp,-4
800141d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800141d8:	80 01       	ld.sh	r1,r0[0x0]
800141da:	40 2e       	lddsp	lr,sp[0x8]

800141dc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800141dc:	eb cd 40 c0 	pushm	r6-r7,lr
800141e0:	1a 97       	mov	r7,sp
800141e2:	20 3d       	sub	sp,12
800141e4:	49 06       	lddpc	r6,80014224 <mav_array_memcpy+0x48>
800141e6:	1e 26       	rsub	r6,pc
800141e8:	ef 4c ff fc 	st.w	r7[-4],r12
800141ec:	ef 4b ff f8 	st.w	r7[-8],r11
800141f0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800141f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800141f8:	58 08       	cp.w	r8,0
800141fa:	c0 91       	brne	8001420c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800141fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80014200:	30 0b       	mov	r11,0
80014202:	ee fc ff fc 	ld.w	r12,r7[-4]
80014206:	f0 16 00 30 	mcall	r6[192]
8001420a:	c0 98       	rjmp	8001421c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001420c:	ee fa ff f4 	ld.w	r10,r7[-12]
80014210:	ee fb ff f8 	ld.w	r11,r7[-8]
80014214:	ee fc ff fc 	ld.w	r12,r7[-4]
80014218:	f0 16 00 21 	mcall	r6[132]
	}
}
8001421c:	2f dd       	sub	sp,-12
8001421e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014222:	00 00       	add	r0,r0
80014224:	80 01       	ld.sh	r1,r0[0x0]
80014226:	40 6a       	lddsp	r10,sp[0x18]

80014228 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80014228:	eb cd 40 c0 	pushm	r6-r7,lr
8001422c:	1a 97       	mov	r7,sp
8001422e:	20 1d       	sub	sp,4
80014230:	49 46       	lddpc	r6,80014280 <init_nav+0x58>
80014232:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80014234:	f0 16 00 32 	mcall	r6[200]
80014238:	18 99       	mov	r9,r12
8001423a:	ec f8 00 00 	ld.w	r8,r6[0]
8001423e:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80014240:	ec f8 00 00 	ld.w	r8,r6[0]
80014244:	70 08       	ld.w	r8,r8[0x0]
80014246:	30 09       	mov	r9,0
80014248:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
8001424c:	ec f8 00 00 	ld.w	r8,r6[0]
80014250:	70 08       	ld.w	r8,r8[0x0]
80014252:	30 09       	mov	r9,0
80014254:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80014258:	ec f8 00 00 	ld.w	r8,r6[0]
8001425c:	70 08       	ld.w	r8,r8[0x0]
8001425e:	30 09       	mov	r9,0
80014260:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80014264:	ec f8 00 00 	ld.w	r8,r6[0]
80014268:	70 08       	ld.w	r8,r8[0x0]
8001426a:	30 09       	mov	r9,0
8001426c:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80014270:	ec f8 07 7c 	ld.w	r8,r6[1916]
80014274:	30 09       	mov	r9,0
80014276:	91 09       	st.w	r8[0x0],r9
}
80014278:	2f fd       	sub	sp,-4
8001427a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001427e:	00 00       	add	r0,r0
80014280:	80 01       	ld.sh	r1,r0[0x0]
80014282:	40 b6       	lddsp	r6,sp[0x2c]

80014284 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80014284:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014288:	1a 97       	mov	r7,sp
8001428a:	20 8d       	sub	sp,32
8001428c:	49 26       	lddpc	r6,800142d4 <run_navigation+0x50>
8001428e:	1e 26       	rsub	r6,pc
80014290:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80014294:	ec f8 00 00 	ld.w	r8,r6[0]
80014298:	70 03       	ld.w	r3,r8[0x0]
8001429a:	ee c8 00 20 	sub	r8,r7,32
8001429e:	10 9b       	mov	r11,r8
800142a0:	0a 9c       	mov	r12,r5
800142a2:	f0 16 01 a1 	mcall	r6[1668]
800142a6:	18 98       	mov	r8,r12
800142a8:	e7 48 10 b0 	st.w	r3[4272],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
800142ac:	ec f8 00 00 	ld.w	r8,r6[0]
800142b0:	70 08       	ld.w	r8,r8[0x0]
800142b2:	f0 f9 10 b0 	ld.w	r9,r8[4272]
800142b6:	ee c8 00 20 	sub	r8,r7,32
800142ba:	12 9b       	mov	r11,r9
800142bc:	10 9c       	mov	r12,r8
800142be:	f0 16 01 52 	mcall	r6[1352]
	
	centralData->controls_nav.theading=waypoint_input.heading;
800142c2:	ec f8 00 00 	ld.w	r8,r6[0]
800142c6:	70 08       	ld.w	r8,r8[0x0]
800142c8:	6a 39       	ld.w	r9,r5[0xc]
800142ca:	f1 49 01 90 	st.w	r8[400],r9
}
800142ce:	2f 8d       	sub	sp,-32
800142d0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800142d4:	80 01       	ld.sh	r1,r0[0x0]
800142d6:	41 12       	lddsp	r2,sp[0x44]

800142d8 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
800142d8:	eb cd 40 c0 	pushm	r6-r7,lr
800142dc:	1a 97       	mov	r7,sp
800142de:	20 3d       	sub	sp,12
800142e0:	49 f6       	lddpc	r6,8001435c <set_rel_pos_n_dist2wp+0x84>
800142e2:	1e 26       	rsub	r6,pc
800142e4:	ef 4c ff f8 	st.w	r7[-8],r12
800142e8:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
800142ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800142f0:	70 09       	ld.w	r9,r8[0x0]
800142f2:	ec f8 00 00 	ld.w	r8,r6[0]
800142f6:	70 08       	ld.w	r8,r8[0x0]
800142f8:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
800142fc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014300:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014304:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
80014306:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001430a:	2f c8       	sub	r8,-4
8001430c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014310:	2f c9       	sub	r9,-4
80014312:	72 0a       	ld.w	r10,r9[0x0]
80014314:	ec f9 00 00 	ld.w	r9,r6[0]
80014318:	72 09       	ld.w	r9,r9[0x0]
8001431a:	f2 f9 0d a0 	ld.w	r9,r9[3488]
8001431e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014322:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80014324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014328:	2f 88       	sub	r8,-8
8001432a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001432e:	2f 89       	sub	r9,-8
80014330:	72 0a       	ld.w	r10,r9[0x0]
80014332:	ec f9 00 00 	ld.w	r9,r6[0]
80014336:	72 09       	ld.w	r9,r9[0x0]
80014338:	f2 f9 0d a4 	ld.w	r9,r9[3492]
8001433c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014340:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014342:	ee fc ff f4 	ld.w	r12,r7[-12]
80014346:	cd 9e       	rcall	800140f8 <vector_norm_sqr>
80014348:	18 98       	mov	r8,r12
8001434a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
8001434e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014352:	10 9c       	mov	r12,r8
80014354:	2f dd       	sub	sp,-12
80014356:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001435a:	00 00       	add	r0,r0
8001435c:	80 01       	ld.sh	r1,r0[0x0]
8001435e:	41 66       	lddsp	r6,sp[0x58]

80014360 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80014360:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014364:	1a 97       	mov	r7,sp
80014366:	21 7d       	sub	sp,92
80014368:	fe f6 02 ec 	ld.w	r6,pc[748]
8001436c:	1e 26       	rsub	r6,pc
8001436e:	ef 4c ff a8 	st.w	r7[-88],r12
80014372:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80014376:	ee fc ff a4 	ld.w	r12,r7[-92]
8001437a:	f0 16 00 02 	mcall	r6[8]
8001437e:	14 98       	mov	r8,r10
80014380:	16 99       	mov	r9,r11
80014382:	10 9a       	mov	r10,r8
80014384:	12 9b       	mov	r11,r9
80014386:	f0 16 00 6b 	mcall	r6[428]
8001438a:	14 98       	mov	r8,r10
8001438c:	16 99       	mov	r9,r11
8001438e:	10 9a       	mov	r10,r8
80014390:	12 9b       	mov	r11,r9
80014392:	f0 16 00 08 	mcall	r6[32]
80014396:	18 98       	mov	r8,r12
80014398:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
8001439c:	ee fc ff f4 	ld.w	r12,r7[-12]
800143a0:	f0 16 00 02 	mcall	r6[8]
800143a4:	30 05       	mov	r5,0
800143a6:	e0 68 a9 fc 	mov	r8,43516
800143aa:	ea 18 d2 f1 	orh	r8,0xd2f1
800143ae:	e0 69 62 4d 	mov	r9,25165
800143b2:	ea 19 3f 40 	orh	r9,0x3f40
800143b6:	f0 16 00 1d 	mcall	r6[116]
800143ba:	18 98       	mov	r8,r12
800143bc:	58 08       	cp.w	r8,0
800143be:	c0 20       	breq	800143c2 <set_speed_command+0x62>
800143c0:	30 15       	mov	r5,1
800143c2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800143c6:	c1 80       	breq	800143f6 <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
800143c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800143cc:	f0 16 00 02 	mcall	r6[8]
800143d0:	e0 68 a9 fc 	mov	r8,43516
800143d4:	ea 18 d2 f1 	orh	r8,0xd2f1
800143d8:	e0 69 62 4d 	mov	r9,25165
800143dc:	ea 19 3f 40 	orh	r9,0x3f40
800143e0:	f0 16 00 05 	mcall	r6[20]
800143e4:	14 98       	mov	r8,r10
800143e6:	16 99       	mov	r9,r11
800143e8:	10 9a       	mov	r10,r8
800143ea:	12 9b       	mov	r11,r9
800143ec:	f0 16 00 08 	mcall	r6[32]
800143f0:	18 98       	mov	r8,r12
800143f2:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
800143f6:	ee c8 00 20 	sub	r8,r7,32
800143fa:	ee fb ff a8 	ld.w	r11,r7[-88]
800143fe:	10 9c       	mov	r12,r8
80014400:	fe b0 fc ea 	rcall	80013dd4 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
80014404:	ec f8 00 00 	ld.w	r8,r6[0]
80014408:	70 0b       	ld.w	r11,r8[0x0]
8001440a:	ee ca 00 30 	sub	r10,r7,48
8001440e:	20 4d       	sub	sp,16
80014410:	1a 98       	mov	r8,sp
80014412:	ee c9 00 20 	sub	r9,r7,32
80014416:	20 08       	sub	r8,0
80014418:	20 09       	sub	r9,0
8001441a:	72 0c       	ld.w	r12,r9[0x0]
8001441c:	91 0c       	st.w	r8[0x0],r12
8001441e:	72 1c       	ld.w	r12,r9[0x4]
80014420:	91 1c       	st.w	r8[0x4],r12
80014422:	72 2c       	ld.w	r12,r9[0x8]
80014424:	91 2c       	st.w	r8[0x8],r12
80014426:	72 39       	ld.w	r9,r9[0xc]
80014428:	91 39       	st.w	r8[0xc],r9
8001442a:	20 4d       	sub	sp,16
8001442c:	1a 98       	mov	r8,sp
8001442e:	16 99       	mov	r9,r11
80014430:	20 08       	sub	r8,0
80014432:	20 09       	sub	r9,0
80014434:	72 0b       	ld.w	r11,r9[0x0]
80014436:	91 0b       	st.w	r8[0x0],r11
80014438:	72 1b       	ld.w	r11,r9[0x4]
8001443a:	91 1b       	st.w	r8[0x4],r11
8001443c:	72 2b       	ld.w	r11,r9[0x8]
8001443e:	91 2b       	st.w	r8[0x8],r11
80014440:	72 39       	ld.w	r9,r9[0xc]
80014442:	91 39       	st.w	r8[0xc],r9
80014444:	14 9c       	mov	r12,r10
80014446:	fe b0 fd db 	rcall	80013ffc <quat_global_to_local>
8001444a:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
8001444c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80014450:	ef 48 ff c4 	st.w	r7[-60],r8
80014454:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014458:	ef 48 ff c8 	st.w	r7[-56],r8
8001445c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014460:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80014464:	ee f8 ff a8 	ld.w	r8,r7[-88]
80014468:	2f 88       	sub	r8,-8
8001446a:	70 08       	ld.w	r8,r8[0x0]
8001446c:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80014470:	ee fc ff fc 	ld.w	r12,r7[-4]
80014474:	c9 6e       	rcall	800141a0 <center_window_2>
80014476:	18 98       	mov	r8,r12
80014478:	10 9c       	mov	r12,r8
8001447a:	f0 16 00 02 	mcall	r6[8]
8001447e:	e0 68 33 33 	mov	r8,13107
80014482:	ea 18 33 33 	orh	r8,0x3333
80014486:	e0 69 33 33 	mov	r9,13107
8001448a:	ea 19 3f d3 	orh	r9,0x3fd3
8001448e:	f0 16 00 03 	mcall	r6[12]
80014492:	14 98       	mov	r8,r10
80014494:	16 99       	mov	r9,r11
80014496:	10 92       	mov	r2,r8
80014498:	12 93       	mov	r3,r9
8001449a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001449e:	f0 16 00 02 	mcall	r6[8]
800144a2:	14 98       	mov	r8,r10
800144a4:	16 99       	mov	r9,r11
800144a6:	04 9a       	mov	r10,r2
800144a8:	06 9b       	mov	r11,r3
800144aa:	f0 16 00 03 	mcall	r6[12]
800144ae:	14 98       	mov	r8,r10
800144b0:	16 99       	mov	r9,r11
800144b2:	10 9a       	mov	r10,r8
800144b4:	12 9b       	mov	r11,r9
800144b6:	f0 16 00 08 	mcall	r6[32]
800144ba:	18 98       	mov	r8,r12
800144bc:	10 9b       	mov	r11,r8
800144be:	fc 1c 40 40 	movh	r12,0x4040
800144c2:	c5 0e       	rcall	80014162 <f_min>
800144c4:	18 98       	mov	r8,r12
800144c6:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
800144ca:	ee f8 ff cc 	ld.w	r8,r7[-52]
800144ce:	10 9c       	mov	r12,r8
800144d0:	c2 ce       	rcall	80014128 <f_abs>
800144d2:	18 99       	mov	r9,r12
800144d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800144d8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800144dc:	30 18       	mov	r8,1
800144de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800144e2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800144e6:	e0 8c 00 04 	brvs	800144ee <set_speed_command+0x18e>
800144ea:	e0 89 00 03 	brgt	800144f0 <set_speed_command+0x190>
800144ee:	30 08       	mov	r8,0
800144f0:	5c 58       	castu.b	r8
800144f2:	c0 e0       	breq	8001450e <set_speed_command+0x1ae>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
800144f4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800144f8:	10 9c       	mov	r12,r8
800144fa:	c1 7e       	rcall	80014128 <f_abs>
800144fc:	18 98       	mov	r8,r12
800144fe:	10 9b       	mov	r11,r8
80014500:	ee fc ff f4 	ld.w	r12,r7[-12]
80014504:	f0 16 00 0a 	mcall	r6[40]
80014508:	18 98       	mov	r8,r12
8001450a:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
8001450e:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014516:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001451a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001451e:	10 9c       	mov	r12,r8
80014520:	f0 16 00 0a 	mcall	r6[40]
80014524:	18 98       	mov	r8,r12
80014526:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
8001452a:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001452e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014532:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014536:	ee fb ff f4 	ld.w	r11,r7[-12]
8001453a:	10 9c       	mov	r12,r8
8001453c:	f0 16 00 0a 	mcall	r6[40]
80014540:	18 98       	mov	r8,r12
80014542:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80014546:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001454a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001454e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014552:	ee fb ff f4 	ld.w	r11,r7[-12]
80014556:	10 9c       	mov	r12,r8
80014558:	f0 16 00 0a 	mcall	r6[40]
8001455c:	18 98       	mov	r8,r12
8001455e:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014562:	30 08       	mov	r8,0
80014564:	ef 68 ff f3 	st.b	r7[-13],r8
80014568:	c1 58       	rjmp	80014592 <set_speed_command+0x232>
	{
		new_velocity[i] = dir_desired_bf[i];
8001456a:	ef 3a ff f3 	ld.ub	r10,r7[-13]
8001456e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014572:	a3 68       	lsl	r8,0x2
80014574:	ee 08 00 08 	add	r8,r7,r8
80014578:	f0 f9 ff c4 	ld.w	r9,r8[-60]
8001457c:	f4 08 15 02 	lsl	r8,r10,0x2
80014580:	ee 08 00 08 	add	r8,r7,r8
80014584:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014588:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8001458c:	2f f8       	sub	r8,-1
8001458e:	ef 68 ff f3 	st.b	r7[-13],r8
80014592:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80014596:	30 28       	mov	r8,2
80014598:	f0 09 18 00 	cp.b	r9,r8
8001459c:	fe 98 ff e7 	brls	8001456a <set_speed_command+0x20a>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
800145a0:	ec f8 00 00 	ld.w	r8,r6[0]
800145a4:	70 08       	ld.w	r8,r8[0x0]
800145a6:	f1 38 10 bb 	ld.ub	r8,r8[4283]
800145aa:	58 08       	cp.w	r8,0
800145ac:	c0 90       	breq	800145be <set_speed_command+0x25e>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
800145ae:	ee c9 00 54 	sub	r9,r7,84
800145b2:	ee c8 00 3c 	sub	r8,r7,60
800145b6:	12 9b       	mov	r11,r9
800145b8:	10 9c       	mov	r12,r8
800145ba:	f0 16 01 9a 	mcall	r6[1640]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
800145be:	ee f8 ff ac 	ld.w	r8,r7[-84]
800145c2:	10 9c       	mov	r12,r8
800145c4:	f0 16 00 02 	mcall	r6[8]
800145c8:	14 92       	mov	r2,r10
800145ca:	16 93       	mov	r3,r11
800145cc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800145d0:	10 9c       	mov	r12,r8
800145d2:	f0 16 00 02 	mcall	r6[8]
800145d6:	04 98       	mov	r8,r2
800145d8:	06 99       	mov	r9,r3
800145da:	f0 16 00 52 	mcall	r6[328]
800145de:	14 98       	mov	r8,r10
800145e0:	16 99       	mov	r9,r11
800145e2:	10 9a       	mov	r10,r8
800145e4:	12 9b       	mov	r11,r9
800145e6:	f0 16 00 08 	mcall	r6[32]
800145ea:	18 98       	mov	r8,r12
800145ec:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
800145f0:	ec f8 00 00 	ld.w	r8,r6[0]
800145f4:	70 08       	ld.w	r8,r8[0x0]
800145f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800145fa:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
800145fe:	ec f8 00 00 	ld.w	r8,r6[0]
80014602:	70 08       	ld.w	r8,r8[0x0]
80014604:	ee f9 ff b0 	ld.w	r9,r7[-80]
80014608:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
8001460c:	ec f8 00 00 	ld.w	r8,r6[0]
80014610:	70 08       	ld.w	r8,r8[0x0]
80014612:	ee f9 ff b4 	ld.w	r9,r7[-76]
80014616:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
8001461a:	ec f8 00 00 	ld.w	r8,r6[0]
8001461e:	70 05       	ld.w	r5,r8[0x0]
80014620:	ee fc ff fc 	ld.w	r12,r7[-4]
80014624:	f0 16 00 02 	mcall	r6[8]
80014628:	e0 68 99 9a 	mov	r8,39322
8001462c:	ea 18 99 99 	orh	r8,0x9999
80014630:	e0 69 99 99 	mov	r9,39321
80014634:	ea 19 3f c9 	orh	r9,0x3fc9
80014638:	f0 16 00 03 	mcall	r6[12]
8001463c:	14 98       	mov	r8,r10
8001463e:	16 99       	mov	r9,r11
80014640:	10 9a       	mov	r10,r8
80014642:	12 9b       	mov	r11,r9
80014644:	f0 16 00 08 	mcall	r6[32]
80014648:	18 98       	mov	r8,r12
8001464a:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
8001464e:	2e 9d       	sub	sp,-92
80014650:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014654:	80 01       	ld.sh	r1,r0[0x0]
80014656:	41 f0       	lddsp	r0,sp[0x7c]

80014658 <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80014658:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001465c:	1a 97       	mov	r7,sp
8001465e:	20 4d       	sub	sp,16
80014660:	4f 06       	lddpc	r6,80014820 <low_speed_nav+0x1c8>
80014662:	1e 26       	rsub	r6,pc
80014664:	ef 4c ff f4 	st.w	r7[-12],r12
80014668:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
8001466c:	e0 68 d9 7c 	mov	r8,55676
80014670:	ea 18 3e a0 	orh	r8,0x3ea0
80014674:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014678:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001467c:	70 08       	ld.w	r8,r8[0x0]
8001467e:	10 9c       	mov	r12,r8
80014680:	fe b0 fd 54 	rcall	80014128 <f_abs>
80014684:	18 98       	mov	r8,r12
80014686:	10 9c       	mov	r12,r8
80014688:	f0 16 00 02 	mcall	r6[8]
8001468c:	30 05       	mov	r5,0
8001468e:	e0 68 a9 fc 	mov	r8,43516
80014692:	ea 18 d2 f1 	orh	r8,0xd2f1
80014696:	e0 69 62 4d 	mov	r9,25165
8001469a:	ea 19 3f 50 	orh	r9,0x3f50
8001469e:	f0 16 00 1d 	mcall	r6[116]
800146a2:	18 98       	mov	r8,r12
800146a4:	58 08       	cp.w	r8,0
800146a6:	c0 20       	breq	800146aa <low_speed_nav+0x52>
800146a8:	30 15       	mov	r5,1
800146aa:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800146ae:	c1 e0       	breq	800146ea <low_speed_nav+0x92>
800146b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800146b4:	2f c8       	sub	r8,-4
800146b6:	70 08       	ld.w	r8,r8[0x0]
800146b8:	10 9c       	mov	r12,r8
800146ba:	fe b0 fd 37 	rcall	80014128 <f_abs>
800146be:	18 98       	mov	r8,r12
800146c0:	10 9c       	mov	r12,r8
800146c2:	f0 16 00 02 	mcall	r6[8]
800146c6:	30 05       	mov	r5,0
800146c8:	e0 68 a9 fc 	mov	r8,43516
800146cc:	ea 18 d2 f1 	orh	r8,0xd2f1
800146d0:	e0 69 62 4d 	mov	r9,25165
800146d4:	ea 19 3f 50 	orh	r9,0x3f50
800146d8:	f0 16 00 1d 	mcall	r6[116]
800146dc:	18 98       	mov	r8,r12
800146de:	58 08       	cp.w	r8,0
800146e0:	c0 20       	breq	800146e4 <low_speed_nav+0x8c>
800146e2:	30 15       	mov	r5,1
800146e4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800146e8:	c1 61       	brne	80014714 <low_speed_nav+0xbc>
800146ea:	ec f8 00 00 	ld.w	r8,r6[0]
800146ee:	70 08       	ld.w	r8,r8[0x0]
800146f0:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800146f4:	58 08       	cp.w	r8,0
800146f6:	c0 f1       	brne	80014714 <low_speed_nav+0xbc>
800146f8:	30 18       	mov	r8,1
800146fa:	ee fa ff f0 	ld.w	r10,r7[-16]
800146fe:	fc 19 40 a0 	movh	r9,0x40a0
80014702:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014706:	e0 8c 00 04 	brvs	8001470e <low_speed_nav+0xb6>
8001470a:	e0 8a 00 03 	brle	80014710 <low_speed_nav+0xb8>
8001470e:	30 08       	mov	r8,0
80014710:	5c 58       	castu.b	r8
80014712:	c1 90       	breq	80014744 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014714:	ec f8 00 00 	ld.w	r8,r6[0]
80014718:	70 08       	ld.w	r8,r8[0x0]
8001471a:	30 09       	mov	r9,0
8001471c:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014720:	ec f8 00 00 	ld.w	r8,r6[0]
80014724:	70 08       	ld.w	r8,r8[0x0]
80014726:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001472a:	72 09       	ld.w	r9,r9[0x0]
8001472c:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014730:	ec f8 00 00 	ld.w	r8,r6[0]
80014734:	70 08       	ld.w	r8,r8[0x0]
80014736:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001473a:	2f c9       	sub	r9,-4
8001473c:	72 09       	ld.w	r9,r9[0x0]
8001473e:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014742:	c6 28       	rjmp	80014806 <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80014744:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014748:	70 08       	ld.w	r8,r8[0x0]
8001474a:	10 9c       	mov	r12,r8
8001474c:	f0 16 00 02 	mcall	r6[8]
80014750:	14 92       	mov	r2,r10
80014752:	16 93       	mov	r3,r11
80014754:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014758:	2f c8       	sub	r8,-4
8001475a:	70 08       	ld.w	r8,r8[0x0]
8001475c:	10 9c       	mov	r12,r8
8001475e:	f0 16 00 02 	mcall	r6[8]
80014762:	04 98       	mov	r8,r2
80014764:	06 99       	mov	r9,r3
80014766:	f0 16 00 52 	mcall	r6[328]
8001476a:	14 98       	mov	r8,r10
8001476c:	16 99       	mov	r9,r11
8001476e:	10 9a       	mov	r10,r8
80014770:	12 9b       	mov	r11,r9
80014772:	f0 16 00 08 	mcall	r6[32]
80014776:	18 98       	mov	r8,r12
80014778:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
8001477c:	30 18       	mov	r8,1
8001477e:	ee fa ff fc 	ld.w	r10,r7[-4]
80014782:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014786:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001478a:	e0 8c 00 03 	brvs	80014790 <low_speed_nav+0x138>
8001478e:	c0 24       	brge	80014792 <low_speed_nav+0x13a>
80014790:	30 08       	mov	r8,0
80014792:	5c 58       	castu.b	r8
80014794:	c0 e0       	breq	800147b0 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80014796:	ec f8 00 00 	ld.w	r8,r6[0]
8001479a:	70 08       	ld.w	r8,r8[0x0]
8001479c:	30 09       	mov	r9,0
8001479e:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
800147a2:	ec f8 00 00 	ld.w	r8,r6[0]
800147a6:	70 08       	ld.w	r8,r8[0x0]
800147a8:	30 09       	mov	r9,0
800147aa:	f1 49 01 88 	st.w	r8[392],r9
800147ae:	c1 28       	rjmp	800147d2 <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
800147b0:	ec f8 00 00 	ld.w	r8,r6[0]
800147b4:	70 08       	ld.w	r8,r8[0x0]
800147b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800147ba:	72 09       	ld.w	r9,r9[0x0]
800147bc:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
800147c0:	ec f8 00 00 	ld.w	r8,r6[0]
800147c4:	70 08       	ld.w	r8,r8[0x0]
800147c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800147ca:	2f c9       	sub	r9,-4
800147cc:	72 09       	ld.w	r9,r9[0x0]
800147ce:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
800147d2:	ec f8 00 00 	ld.w	r8,r6[0]
800147d6:	70 05       	ld.w	r5,r8[0x0]
800147d8:	ee fc ff fc 	ld.w	r12,r7[-4]
800147dc:	f0 16 00 02 	mcall	r6[8]
800147e0:	e0 68 99 9a 	mov	r8,39322
800147e4:	ea 18 99 99 	orh	r8,0x9999
800147e8:	e0 69 99 99 	mov	r9,39321
800147ec:	ea 19 3f c9 	orh	r9,0x3fc9
800147f0:	f0 16 00 03 	mcall	r6[12]
800147f4:	14 98       	mov	r8,r10
800147f6:	16 99       	mov	r9,r11
800147f8:	10 9a       	mov	r10,r8
800147fa:	12 9b       	mov	r11,r9
800147fc:	f0 16 00 08 	mcall	r6[32]
80014800:	18 98       	mov	r8,r12
80014802:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014806:	ec f8 00 00 	ld.w	r8,r6[0]
8001480a:	70 08       	ld.w	r8,r8[0x0]
8001480c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014810:	2f 89       	sub	r9,-8
80014812:	72 09       	ld.w	r9,r9[0x0]
80014814:	f1 49 01 8c 	st.w	r8[396],r9
}
80014818:	2f cd       	sub	sp,-16
8001481a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001481e:	00 00       	add	r0,r0
80014820:	80 01       	ld.sh	r1,r0[0x0]
80014822:	44 e6       	lddsp	r6,sp[0x138]

80014824 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80014824:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014828:	1a 97       	mov	r7,sp
8001482a:	20 1d       	sub	sp,4
8001482c:	4a 76       	lddpc	r6,800148c8 <high_speed_nav+0xa4>
8001482e:	1e 26       	rsub	r6,pc
80014830:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014834:	ec f8 00 00 	ld.w	r8,r6[0]
80014838:	70 08       	ld.w	r8,r8[0x0]
8001483a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001483e:	72 09       	ld.w	r9,r9[0x0]
80014840:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014844:	ec f8 00 00 	ld.w	r8,r6[0]
80014848:	70 08       	ld.w	r8,r8[0x0]
8001484a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001484e:	2f c9       	sub	r9,-4
80014850:	72 09       	ld.w	r9,r9[0x0]
80014852:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014856:	ec f8 00 00 	ld.w	r8,r6[0]
8001485a:	70 08       	ld.w	r8,r8[0x0]
8001485c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014860:	2f 89       	sub	r9,-8
80014862:	72 09       	ld.w	r9,r9[0x0]
80014864:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80014868:	ec f8 00 00 	ld.w	r8,r6[0]
8001486c:	70 05       	ld.w	r5,r8[0x0]
8001486e:	ec f8 00 00 	ld.w	r8,r6[0]
80014872:	70 08       	ld.w	r8,r8[0x0]
80014874:	f0 f8 0d 68 	ld.w	r8,r8[3432]
80014878:	10 9c       	mov	r12,r8
8001487a:	f0 16 00 02 	mcall	r6[8]
8001487e:	14 92       	mov	r2,r10
80014880:	16 93       	mov	r3,r11
80014882:	ec f8 00 00 	ld.w	r8,r6[0]
80014886:	70 08       	ld.w	r8,r8[0x0]
80014888:	f0 f8 0d 6c 	ld.w	r8,r8[3436]
8001488c:	10 9c       	mov	r12,r8
8001488e:	f0 16 00 02 	mcall	r6[8]
80014892:	04 98       	mov	r8,r2
80014894:	06 99       	mov	r9,r3
80014896:	f0 16 00 52 	mcall	r6[328]
8001489a:	e0 68 99 9a 	mov	r8,39322
8001489e:	ea 18 99 99 	orh	r8,0x9999
800148a2:	e0 69 99 99 	mov	r9,39321
800148a6:	ea 19 3f c9 	orh	r9,0x3fc9
800148aa:	f0 16 00 03 	mcall	r6[12]
800148ae:	14 98       	mov	r8,r10
800148b0:	16 99       	mov	r9,r11
800148b2:	10 9a       	mov	r10,r8
800148b4:	12 9b       	mov	r11,r9
800148b6:	f0 16 00 08 	mcall	r6[32]
800148ba:	18 98       	mov	r8,r12
800148bc:	eb 48 01 7c 	st.w	r5[380],r8
800148c0:	2f fd       	sub	sp,-4
800148c2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800148c6:	00 00       	add	r0,r0
800148c8:	80 01       	ld.sh	r1,r0[0x0]
800148ca:	46 b2       	lddsp	r2,sp[0x1ac]

800148cc <stabilise>:
#include "stabilisation.h"
#include "stabilisation_copter.h"
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
800148cc:	eb cd 40 e0 	pushm	r5-r7,lr
800148d0:	1a 97       	mov	r7,sp
800148d2:	20 4d       	sub	sp,16
800148d4:	4a 66       	lddpc	r6,8001496c <stabilise+0xa0>
800148d6:	1e 26       	rsub	r6,pc
800148d8:	ef 4c ff f8 	st.w	r7[-8],r12
800148dc:	ef 4b ff f4 	st.w	r7[-12],r11
800148e0:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < 3; i++) 
800148e4:	30 08       	mov	r8,0
800148e6:	ef 48 ff fc 	st.w	r7[-4],r8
800148ea:	c2 68       	rjmp	80014936 <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
800148ec:	ee f5 ff fc 	ld.w	r5,r7[-4]
800148f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800148f4:	a3 68       	lsl	r8,0x2
800148f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800148fa:	f2 08 00 08 	add	r8,r9,r8
800148fe:	70 0b       	ld.w	r11,r8[0x0]
80014900:	ee fa ff f8 	ld.w	r10,r7[-8]
80014904:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014908:	12 98       	mov	r8,r9
8001490a:	a5 68       	lsl	r8,0x4
8001490c:	12 08       	add	r8,r9
8001490e:	a3 68       	lsl	r8,0x2
80014910:	f4 08 00 08 	add	r8,r10,r8
80014914:	ee fa ff f4 	ld.w	r10,r7[-12]
80014918:	10 9c       	mov	r12,r8
8001491a:	f0 16 01 20 	mcall	r6[1152]
8001491e:	18 9a       	mov	r10,r12
80014920:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014924:	ea c9 ff bc 	sub	r9,r5,-68
80014928:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i = 0; i < 3; i++) 
8001492c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014930:	2f f8       	sub	r8,-1
80014932:	ef 48 ff fc 	st.w	r7[-4],r8
80014936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001493a:	58 28       	cp.w	r8,2
8001493c:	fe 9a ff d8 	brle	800148ec <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80014940:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014944:	2f 48       	sub	r8,-12
80014946:	70 09       	ld.w	r9,r8[0x0]
80014948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001494c:	f0 c8 ff 34 	sub	r8,r8,-204
80014950:	ee fa ff f4 	ld.w	r10,r7[-12]
80014954:	12 9b       	mov	r11,r9
80014956:	10 9c       	mov	r12,r8
80014958:	f0 16 01 20 	mcall	r6[1152]
8001495c:	18 99       	mov	r9,r12
8001495e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014962:	f1 49 01 1c 	st.w	r8[284],r9
80014966:	2f cd       	sub	sp,-16
80014968:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001496c:	80 01       	ld.sh	r1,r0[0x0]
8001496e:	47 5a       	lddsp	r10,sp[0x1d4]

80014970 <processData>:
80014970:	eb cd 40 c0 	pushm	r6-r7,lr
80014974:	1a 97       	mov	r7,sp
80014976:	20 2d       	sub	sp,8
80014978:	4f 96       	lddpc	r6,80014b5c <processData+0x1ec>
8001497a:	1e 26       	rsub	r6,pc
8001497c:	ec f8 01 1c 	ld.w	r8,r6[284]
80014980:	70 09       	ld.w	r9,r8[0x0]
80014982:	ec f8 03 64 	ld.w	r8,r6[868]
80014986:	70 08       	ld.w	r8,r8[0x0]
80014988:	10 39       	cp.w	r9,r8
8001498a:	c2 15       	brlt	800149cc <processData+0x5c>
8001498c:	ec f8 03 3c 	ld.w	r8,r6[828]
80014990:	11 88       	ld.ub	r8,r8[0x0]
80014992:	58 08       	cp.w	r8,0
80014994:	c0 e0       	breq	800149b0 <processData+0x40>
80014996:	ec f8 01 1c 	ld.w	r8,r6[284]
8001499a:	30 09       	mov	r9,0
8001499c:	91 09       	st.w	r8[0x0],r9
8001499e:	ec f8 01 90 	ld.w	r8,r6[400]
800149a2:	30 09       	mov	r9,0
800149a4:	91 09       	st.w	r8[0x0],r9
800149a6:	ec f8 01 3c 	ld.w	r8,r6[316]
800149aa:	30 09       	mov	r9,0
800149ac:	91 09       	st.w	r8[0x0],r9
800149ae:	cd 38       	rjmp	80014b54 <processData+0x1e4>
800149b0:	ec f8 01 18 	ld.w	r8,r6[280]
800149b4:	70 08       	ld.w	r8,r8[0x0]
800149b6:	30 1b       	mov	r11,1
800149b8:	10 9c       	mov	r12,r8
800149ba:	f0 16 01 1c 	mcall	r6[1136]
800149be:	ec f8 01 18 	ld.w	r8,r6[280]
800149c2:	70 08       	ld.w	r8,r8[0x0]
800149c4:	10 9c       	mov	r12,r8
800149c6:	f0 16 00 f9 	mcall	r6[996]
800149ca:	cc 58       	rjmp	80014b54 <processData+0x1e4>
800149cc:	ec f8 01 18 	ld.w	r8,r6[280]
800149d0:	70 08       	ld.w	r8,r8[0x0]
800149d2:	70 28       	ld.w	r8,r8[0x8]
800149d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800149d8:	e0 80 00 bd 	breq	80014b52 <processData+0x1e2>
800149dc:	ec f8 01 1c 	ld.w	r8,r6[284]
800149e0:	70 08       	ld.w	r8,r8[0x0]
800149e2:	58 08       	cp.w	r8,0
800149e4:	c4 85       	brlt	80014a74 <processData+0x104>
800149e6:	30 08       	mov	r8,0
800149e8:	ef 48 ff f8 	st.w	r7[-8],r8
800149ec:	c3 88       	rjmp	80014a5c <processData+0xec>
800149ee:	ec f8 01 18 	ld.w	r8,r6[280]
800149f2:	70 08       	ld.w	r8,r8[0x0]
800149f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800149f8:	2d f9       	sub	r9,-33
800149fa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800149fe:	ef 58 ff fe 	st.h	r7[-2],r8
80014a02:	ec f8 01 90 	ld.w	r8,r6[400]
80014a06:	70 08       	ld.w	r8,r8[0x0]
80014a08:	58 08       	cp.w	r8,0
80014a0a:	e0 89 00 0c 	brgt	80014a22 <processData+0xb2>
80014a0e:	ec f8 01 3c 	ld.w	r8,r6[316]
80014a12:	70 09       	ld.w	r9,r8[0x0]
80014a14:	ef 0a ff fe 	ld.sh	r10,r7[-2]
80014a18:	ec f8 02 2c 	ld.w	r8,r6[556]
80014a1c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80014a20:	c1 18       	rjmp	80014a42 <processData+0xd2>
80014a22:	ec f8 01 3c 	ld.w	r8,r6[316]
80014a26:	70 08       	ld.w	r8,r8[0x0]
80014a28:	10 99       	mov	r9,r8
80014a2a:	10 9a       	mov	r10,r8
80014a2c:	ec f8 02 2c 	ld.w	r8,r6[556]
80014a30:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80014a34:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80014a38:	10 0a       	add	r10,r8
80014a3a:	ec f8 02 2c 	ld.w	r8,r6[556]
80014a3e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80014a42:	ec f8 01 3c 	ld.w	r8,r6[316]
80014a46:	70 08       	ld.w	r8,r8[0x0]
80014a48:	f0 c9 ff ff 	sub	r9,r8,-1
80014a4c:	ec f8 01 3c 	ld.w	r8,r6[316]
80014a50:	91 09       	st.w	r8[0x0],r9
80014a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a56:	2f f8       	sub	r8,-1
80014a58:	ef 48 ff f8 	st.w	r7[-8],r8
80014a5c:	ec f8 01 20 	ld.w	r8,r6[288]
80014a60:	11 88       	ld.ub	r8,r8[0x0]
80014a62:	5c 58       	castu.b	r8
80014a64:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014a68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a6c:	10 39       	cp.w	r9,r8
80014a6e:	fe 99 ff c0 	brgt	800149ee <processData+0x7e>
80014a72:	c0 a8       	rjmp	80014a86 <processData+0x116>
80014a74:	ec f8 01 1c 	ld.w	r8,r6[284]
80014a78:	70 08       	ld.w	r8,r8[0x0]
80014a7a:	f0 c9 ff ff 	sub	r9,r8,-1
80014a7e:	ec f8 01 1c 	ld.w	r8,r6[284]
80014a82:	91 09       	st.w	r8[0x0],r9
80014a84:	c6 88       	rjmp	80014b54 <processData+0x1e4>
80014a86:	ec f8 02 10 	ld.w	r8,r6[528]
80014a8a:	11 88       	ld.ub	r8,r8[0x0]
80014a8c:	5c 58       	castu.b	r8
80014a8e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014a92:	ec f8 01 3c 	ld.w	r8,r6[316]
80014a96:	70 08       	ld.w	r8,r8[0x0]
80014a98:	10 39       	cp.w	r9,r8
80014a9a:	e0 89 00 0e 	brgt	80014ab6 <processData+0x146>
80014a9e:	ec f8 01 90 	ld.w	r8,r6[400]
80014aa2:	70 08       	ld.w	r8,r8[0x0]
80014aa4:	f0 c9 ff ff 	sub	r9,r8,-1
80014aa8:	ec f8 01 90 	ld.w	r8,r6[400]
80014aac:	91 09       	st.w	r8[0x0],r9
80014aae:	ec f8 01 3c 	ld.w	r8,r6[316]
80014ab2:	30 09       	mov	r9,0
80014ab4:	91 09       	st.w	r8[0x0],r9
80014ab6:	ec f8 01 90 	ld.w	r8,r6[400]
80014aba:	70 09       	ld.w	r9,r8[0x0]
80014abc:	ec f8 03 60 	ld.w	r8,r6[864]
80014ac0:	70 08       	ld.w	r8,r8[0x0]
80014ac2:	10 39       	cp.w	r9,r8
80014ac4:	c4 85       	brlt	80014b54 <processData+0x1e4>
80014ac6:	ec f8 01 90 	ld.w	r8,r6[400]
80014aca:	30 09       	mov	r9,0
80014acc:	91 09       	st.w	r8[0x0],r9
80014ace:	ec f8 01 3c 	ld.w	r8,r6[316]
80014ad2:	30 09       	mov	r9,0
80014ad4:	91 09       	st.w	r8[0x0],r9
80014ad6:	30 08       	mov	r8,0
80014ad8:	ef 48 ff f8 	st.w	r7[-8],r8
80014adc:	c2 78       	rjmp	80014b2a <processData+0x1ba>
80014ade:	ec f8 02 74 	ld.w	r8,r6[628]
80014ae2:	70 09       	ld.w	r9,r8[0x0]
80014ae4:	ec f8 02 10 	ld.w	r8,r6[528]
80014ae8:	11 88       	ld.ub	r8,r8[0x0]
80014aea:	5c 58       	castu.b	r8
80014aec:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80014af0:	ec f8 01 1c 	ld.w	r8,r6[284]
80014af4:	70 08       	ld.w	r8,r8[0x0]
80014af6:	b1 3a       	mul	r10,r8
80014af8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014afc:	f4 08 00 08 	add	r8,r10,r8
80014b00:	a1 78       	lsl	r8,0x1
80014b02:	f2 08 00 0a 	add	r10,r9,r8
80014b06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014b0a:	ec f8 02 2c 	ld.w	r8,r6[556]
80014b0e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80014b12:	ec f9 04 d4 	ld.w	r9,r6[1236]
80014b16:	72 09       	ld.w	r9,r9[0x0]
80014b18:	f0 09 0c 08 	divs	r8,r8,r9
80014b1c:	5c 88       	casts.h	r8
80014b1e:	b4 08       	st.h	r10[0x0],r8
80014b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b24:	2f f8       	sub	r8,-1
80014b26:	ef 48 ff f8 	st.w	r7[-8],r8
80014b2a:	ec f8 02 10 	ld.w	r8,r6[528]
80014b2e:	11 88       	ld.ub	r8,r8[0x0]
80014b30:	5c 58       	castu.b	r8
80014b32:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b3a:	10 39       	cp.w	r9,r8
80014b3c:	fe 99 ff d1 	brgt	80014ade <processData+0x16e>
80014b40:	ec f8 01 1c 	ld.w	r8,r6[284]
80014b44:	70 08       	ld.w	r8,r8[0x0]
80014b46:	f0 c9 ff ff 	sub	r9,r8,-1
80014b4a:	ec f8 01 1c 	ld.w	r8,r6[284]
80014b4e:	91 09       	st.w	r8[0x0],r9
80014b50:	c0 28       	rjmp	80014b54 <processData+0x1e4>
80014b52:	d7 03       	nop
80014b54:	2f ed       	sub	sp,-8
80014b56:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80014b5a:	d6 03       	rete
80014b5c:	80 01       	ld.sh	r1,r0[0x0]
80014b5e:	47 fe       	lddsp	lr,sp[0x1fc]

80014b60 <Init_ADCI>:
80014b60:	eb cd 40 c0 	pushm	r6-r7,lr
80014b64:	1a 97       	mov	r7,sp
80014b66:	20 4d       	sub	sp,16
80014b68:	4b 96       	lddpc	r6,80014c4c <Init_ADCI+0xec>
80014b6a:	1e 26       	rsub	r6,pc
80014b6c:	ef 4c ff fc 	st.w	r7[-4],r12
80014b70:	16 98       	mov	r8,r11
80014b72:	ef 4a ff f4 	st.w	r7[-12],r10
80014b76:	ef 49 ff f0 	st.w	r7[-16],r9
80014b7a:	ef 68 ff f8 	st.b	r7[-8],r8
80014b7e:	31 3b       	mov	r11,19
80014b80:	ec fc 08 e0 	ld.w	r12,r6[2272]
80014b84:	f0 16 00 92 	mcall	r6[584]
80014b88:	ec f8 01 08 	ld.w	r8,r6[264]
80014b8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014b90:	91 09       	st.w	r8[0x0],r9
80014b92:	ec f9 01 08 	ld.w	r9,r6[264]
80014b96:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80014b9a:	b2 c8       	st.b	r9[0x4],r8
80014b9c:	ec f8 01 18 	ld.w	r8,r6[280]
80014ba0:	70 08       	ld.w	r8,r8[0x0]
80014ba2:	ec fb 01 08 	ld.w	r11,r6[264]
80014ba6:	10 9c       	mov	r12,r8
80014ba8:	f0 16 02 01 	mcall	r6[2052]
80014bac:	ec f8 01 08 	ld.w	r8,r6[264]
80014bb0:	90 68       	ld.sh	r8,r8[0xc]
80014bb2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80014bb6:	3f f8       	mov	r8,-1
80014bb8:	f0 09 19 00 	cp.h	r9,r8
80014bbc:	c1 51       	brne	80014be6 <Init_ADCI+0x86>
80014bbe:	ec f9 01 08 	ld.w	r9,r6[264]
80014bc2:	33 b8       	mov	r8,59
80014bc4:	b2 68       	st.h	r9[0xc],r8
80014bc6:	ec f9 01 08 	ld.w	r9,r6[264]
80014bca:	e0 68 42 10 	mov	r8,16912
80014bce:	b2 58       	st.h	r9[0xa],r8
80014bd0:	ec f9 01 08 	ld.w	r9,r6[264]
80014bd4:	e0 68 02 10 	mov	r8,528
80014bd8:	b2 78       	st.h	r9[0xe],r8
80014bda:	ec f9 01 08 	ld.w	r9,r6[264]
80014bde:	e0 68 02 10 	mov	r8,528
80014be2:	f3 58 00 10 	st.h	r9[16],r8
80014be6:	ec f9 01 08 	ld.w	r9,r6[264]
80014bea:	33 b8       	mov	r8,59
80014bec:	b2 68       	st.h	r9[0xc],r8
80014bee:	ec f8 01 18 	ld.w	r8,r6[280]
80014bf2:	70 08       	ld.w	r8,r8[0x0]
80014bf4:	e0 6a 24 00 	mov	r10,9216
80014bf8:	ea 1a 00 f4 	orh	r10,0xf4
80014bfc:	ec fb 01 08 	ld.w	r11,r6[264]
80014c00:	10 9c       	mov	r12,r8
80014c02:	f0 16 02 1c 	mcall	r6[2160]
80014c06:	f0 16 01 fa 	mcall	r6[2024]
80014c0a:	ec f9 03 3c 	ld.w	r9,r6[828]
80014c0e:	30 08       	mov	r8,0
80014c10:	b2 88       	st.b	r9[0x0],r8
80014c12:	ec f8 01 18 	ld.w	r8,r6[280]
80014c16:	70 08       	ld.w	r8,r8[0x0]
80014c18:	3f fb       	mov	r11,-1
80014c1a:	10 9c       	mov	r12,r8
80014c1c:	f0 16 01 1c 	mcall	r6[1136]
80014c20:	fe c8 02 b0 	sub	r8,pc,688
80014c24:	30 1a       	mov	r10,1
80014c26:	e0 6b 04 80 	mov	r11,1152
80014c2a:	10 9c       	mov	r12,r8
80014c2c:	f0 16 00 3a 	mcall	r6[232]
80014c30:	ec f8 03 60 	ld.w	r8,r6[864]
80014c34:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014c38:	91 09       	st.w	r8[0x0],r9
80014c3a:	ec f8 04 d4 	ld.w	r8,r6[1236]
80014c3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014c42:	91 09       	st.w	r8[0x0],r9
80014c44:	2f cd       	sub	sp,-16
80014c46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014c4a:	00 00       	add	r0,r0
80014c4c:	80 01       	ld.sh	r1,r0[0x0]
80014c4e:	49 ee       	lddpc	lr,80014cc4 <adc_sequencer_add+0x48>

80014c50 <clear_adc_sequencer>:
80014c50:	eb cd 40 c0 	pushm	r6-r7,lr
80014c54:	1a 97       	mov	r7,sp
80014c56:	48 96       	lddpc	r6,80014c78 <clear_adc_sequencer+0x28>
80014c58:	1e 26       	rsub	r6,pc
80014c5a:	ec f9 01 20 	ld.w	r9,r6[288]
80014c5e:	30 08       	mov	r8,0
80014c60:	b2 88       	st.b	r9[0x0],r8
80014c62:	ec f8 01 20 	ld.w	r8,r6[288]
80014c66:	11 88       	ld.ub	r8,r8[0x0]
80014c68:	5c 58       	castu.b	r8
80014c6a:	5c 58       	castu.b	r8
80014c6c:	ec f9 02 b8 	ld.w	r9,r6[696]
80014c70:	b2 88       	st.b	r9[0x0],r8
80014c72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014c76:	00 00       	add	r0,r0
80014c78:	80 01       	ld.sh	r1,r0[0x0]
80014c7a:	4a dc       	lddpc	r12,80014d2c <adc_sequencer_add+0xb0>

80014c7c <adc_sequencer_add>:
80014c7c:	eb cd 40 c0 	pushm	r6-r7,lr
80014c80:	1a 97       	mov	r7,sp
80014c82:	20 3d       	sub	sp,12
80014c84:	4b 36       	lddpc	r6,80014d50 <adc_sequencer_add+0xd4>
80014c86:	1e 26       	rsub	r6,pc
80014c88:	16 99       	mov	r9,r11
80014c8a:	14 98       	mov	r8,r10
80014c8c:	18 9a       	mov	r10,r12
80014c8e:	ef 6a ff fc 	st.b	r7[-4],r10
80014c92:	ef 69 ff f8 	st.b	r7[-8],r9
80014c96:	ef 68 ff f4 	st.b	r7[-12],r8
80014c9a:	ec f8 01 20 	ld.w	r8,r6[288]
80014c9e:	11 88       	ld.ub	r8,r8[0x0]
80014ca0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80014ca4:	30 68       	mov	r8,6
80014ca6:	f0 09 18 00 	cp.b	r9,r8
80014caa:	e0 89 00 4c 	brgt	80014d42 <adc_sequencer_add+0xc6>
80014cae:	ec f8 01 20 	ld.w	r8,r6[288]
80014cb2:	11 88       	ld.ub	r8,r8[0x0]
80014cb4:	5c 58       	castu.b	r8
80014cb6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014cba:	ec fa 02 3c 	ld.w	r10,r6[572]
80014cbe:	12 98       	mov	r8,r9
80014cc0:	a1 78       	lsl	r8,0x1
80014cc2:	12 08       	add	r8,r9
80014cc4:	f4 08 00 09 	add	r9,r10,r8
80014cc8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80014ccc:	b2 88       	st.b	r9[0x0],r8
80014cce:	ec f8 01 20 	ld.w	r8,r6[288]
80014cd2:	11 88       	ld.ub	r8,r8[0x0]
80014cd4:	5c 58       	castu.b	r8
80014cd6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014cda:	ec fa 02 3c 	ld.w	r10,r6[572]
80014cde:	12 98       	mov	r8,r9
80014ce0:	a1 78       	lsl	r8,0x1
80014ce2:	12 08       	add	r8,r9
80014ce4:	f4 08 00 08 	add	r8,r10,r8
80014ce8:	f0 c9 ff ff 	sub	r9,r8,-1
80014cec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80014cf0:	b2 88       	st.b	r9[0x0],r8
80014cf2:	ec f8 01 20 	ld.w	r8,r6[288]
80014cf6:	11 88       	ld.ub	r8,r8[0x0]
80014cf8:	5c 58       	castu.b	r8
80014cfa:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80014cfe:	ec fa 02 3c 	ld.w	r10,r6[572]
80014d02:	12 98       	mov	r8,r9
80014d04:	a1 78       	lsl	r8,0x1
80014d06:	12 08       	add	r8,r9
80014d08:	f4 08 00 08 	add	r8,r10,r8
80014d0c:	f0 c9 ff fe 	sub	r9,r8,-2
80014d10:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80014d14:	b2 88       	st.b	r9[0x0],r8
80014d16:	ec f8 01 20 	ld.w	r8,r6[288]
80014d1a:	11 88       	ld.ub	r8,r8[0x0]
80014d1c:	5c 58       	castu.b	r8
80014d1e:	2f f8       	sub	r8,-1
80014d20:	5c 58       	castu.b	r8
80014d22:	ec f9 01 20 	ld.w	r9,r6[288]
80014d26:	b2 88       	st.b	r9[0x0],r8
80014d28:	ec f8 01 20 	ld.w	r8,r6[288]
80014d2c:	11 88       	ld.ub	r8,r8[0x0]
80014d2e:	5c 58       	castu.b	r8
80014d30:	5c 58       	castu.b	r8
80014d32:	ec f9 02 b8 	ld.w	r9,r6[696]
80014d36:	b2 88       	st.b	r9[0x0],r8
80014d38:	ec f8 01 20 	ld.w	r8,r6[288]
80014d3c:	11 88       	ld.ub	r8,r8[0x0]
80014d3e:	5c 58       	castu.b	r8
80014d40:	c0 38       	rjmp	80014d46 <adc_sequencer_add+0xca>
80014d42:	e0 68 00 ff 	mov	r8,255
80014d46:	10 9c       	mov	r12,r8
80014d48:	2f dd       	sub	sp,-12
80014d4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014d4e:	00 00       	add	r0,r0
80014d50:	80 01       	ld.sh	r1,r0[0x0]
80014d52:	4b 0a       	lddpc	r10,80014e10 <ADCI_Start_Sampling+0xbc>

80014d54 <ADCI_Start_Sampling>:
80014d54:	eb cd 40 c0 	pushm	r6-r7,lr
80014d58:	1a 97       	mov	r7,sp
80014d5a:	20 6d       	sub	sp,24
80014d5c:	4a d6       	lddpc	r6,80014e10 <ADCI_Start_Sampling+0xbc>
80014d5e:	1e 26       	rsub	r6,pc
80014d60:	ef 4c ff f8 	st.w	r7[-8],r12
80014d64:	ef 4a ff f0 	st.w	r7[-16],r10
80014d68:	ef 49 ff ec 	st.w	r7[-20],r9
80014d6c:	16 99       	mov	r9,r11
80014d6e:	ef 69 ff f4 	st.b	r7[-12],r9
80014d72:	ef 68 ff e8 	st.b	r7[-24],r8
80014d76:	ec f8 01 18 	ld.w	r8,r6[280]
80014d7a:	70 08       	ld.w	r8,r8[0x0]
80014d7c:	ec f9 02 3c 	ld.w	r9,r6[572]
80014d80:	ec fa 02 b8 	ld.w	r10,r6[696]
80014d84:	30 0b       	mov	r11,0
80014d86:	10 9c       	mov	r12,r8
80014d88:	f0 16 01 c1 	mcall	r6[1796]
80014d8c:	ec f8 02 74 	ld.w	r8,r6[628]
80014d90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014d94:	91 09       	st.w	r8[0x0],r9
80014d96:	ec f8 01 08 	ld.w	r8,r6[264]
80014d9a:	70 08       	ld.w	r8,r8[0x0]
80014d9c:	ec f9 03 60 	ld.w	r9,r6[864]
80014da0:	72 0a       	ld.w	r10,r9[0x0]
80014da2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80014da6:	f4 09 02 49 	mul	r9,r10,r9
80014daa:	f0 09 0d 08 	divu	r8,r8,r9
80014dae:	ef 48 ff fc 	st.w	r7[-4],r8
80014db2:	ec f8 01 90 	ld.w	r8,r6[400]
80014db6:	30 09       	mov	r9,0
80014db8:	91 09       	st.w	r8[0x0],r9
80014dba:	ec f8 01 1c 	ld.w	r8,r6[284]
80014dbe:	3f 69       	mov	r9,-10
80014dc0:	91 09       	st.w	r8[0x0],r9
80014dc2:	ec f8 03 64 	ld.w	r8,r6[868]
80014dc6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014dca:	91 09       	st.w	r8[0x0],r9
80014dcc:	ec f9 03 3c 	ld.w	r9,r6[828]
80014dd0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80014dd4:	b2 88       	st.b	r9[0x0],r8
80014dd6:	ec f9 02 10 	ld.w	r9,r6[528]
80014dda:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80014dde:	b2 88       	st.b	r9[0x0],r8
80014de0:	ec f8 01 3c 	ld.w	r8,r6[316]
80014de4:	30 09       	mov	r9,0
80014de6:	91 09       	st.w	r8[0x0],r9
80014de8:	ec f8 01 18 	ld.w	r8,r6[280]
80014dec:	70 08       	ld.w	r8,r8[0x0]
80014dee:	30 1b       	mov	r11,1
80014df0:	10 9c       	mov	r12,r8
80014df2:	f0 16 01 4f 	mcall	r6[1340]
80014df6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014dfa:	ec f8 01 18 	ld.w	r8,r6[280]
80014dfe:	70 08       	ld.w	r8,r8[0x0]
80014e00:	12 9b       	mov	r11,r9
80014e02:	10 9c       	mov	r12,r8
80014e04:	f0 16 01 dc 	mcall	r6[1904]
80014e08:	2f ad       	sub	sp,-24
80014e0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e0e:	00 00       	add	r0,r0
80014e10:	80 01       	ld.sh	r1,r0[0x0]
80014e12:	4b e2       	lddpc	r2,80014f08 <genclk_config_set_source+0xe>

80014e14 <ADCI_Stop_Sampling>:
80014e14:	eb cd 40 c0 	pushm	r6-r7,lr
80014e18:	1a 97       	mov	r7,sp
80014e1a:	48 66       	lddpc	r6,80014e30 <ADCI_Stop_Sampling+0x1c>
80014e1c:	1e 26       	rsub	r6,pc
80014e1e:	ec f8 01 18 	ld.w	r8,r6[280]
80014e22:	70 08       	ld.w	r8,r8[0x0]
80014e24:	10 9c       	mov	r12,r8
80014e26:	f0 16 00 f9 	mcall	r6[996]
80014e2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e2e:	00 00       	add	r0,r0
80014e30:	80 01       	ld.sh	r1,r0[0x0]
80014e32:	4c a0       	lddpc	r0,80014f58 <genclk_config_set_divider+0x2e>

80014e34 <ADCI_Sampling_Complete>:
80014e34:	eb cd 40 c0 	pushm	r6-r7,lr
80014e38:	1a 97       	mov	r7,sp
80014e3a:	48 86       	lddpc	r6,80014e58 <ADCI_Sampling_Complete+0x24>
80014e3c:	1e 26       	rsub	r6,pc
80014e3e:	ec f8 01 1c 	ld.w	r8,r6[284]
80014e42:	70 0a       	ld.w	r10,r8[0x0]
80014e44:	ec f8 03 64 	ld.w	r8,r6[868]
80014e48:	70 09       	ld.w	r9,r8[0x0]
80014e4a:	30 18       	mov	r8,1
80014e4c:	12 3a       	cp.w	r10,r9
80014e4e:	c0 24       	brge	80014e52 <ADCI_Sampling_Complete+0x1e>
80014e50:	30 08       	mov	r8,0
80014e52:	10 9c       	mov	r12,r8
80014e54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014e58:	80 01       	ld.sh	r1,r0[0x0]
80014e5a:	4c c0       	lddpc	r0,80014f88 <genclk_config_set_divider+0x5e>

80014e5c <ADCI_get_sample>:
80014e5c:	eb cd 40 c0 	pushm	r6-r7,lr
80014e60:	1a 97       	mov	r7,sp
80014e62:	20 2d       	sub	sp,8
80014e64:	48 f6       	lddpc	r6,80014ea0 <ADCI_get_sample+0x44>
80014e66:	1e 26       	rsub	r6,pc
80014e68:	ef 4c ff fc 	st.w	r7[-4],r12
80014e6c:	ef 4b ff f8 	st.w	r7[-8],r11
80014e70:	ec f8 02 74 	ld.w	r8,r6[628]
80014e74:	70 09       	ld.w	r9,r8[0x0]
80014e76:	ec f8 02 10 	ld.w	r8,r6[528]
80014e7a:	11 88       	ld.ub	r8,r8[0x0]
80014e7c:	5c 58       	castu.b	r8
80014e7e:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80014e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014e86:	b1 3a       	mul	r10,r8
80014e88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014e8c:	f4 08 00 08 	add	r8,r10,r8
80014e90:	a1 78       	lsl	r8,0x1
80014e92:	f2 08 00 08 	add	r8,r9,r8
80014e96:	90 08       	ld.sh	r8,r8[0x0]
80014e98:	10 9c       	mov	r12,r8
80014e9a:	2f ed       	sub	sp,-8
80014e9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ea0:	80 01       	ld.sh	r1,r0[0x0]
80014ea2:	4c ea       	lddpc	r10,80014fd8 <get_interrupt_counter>

80014ea4 <ADCI_get_buffer>:
80014ea4:	eb cd 40 c0 	pushm	r6-r7,lr
80014ea8:	1a 97       	mov	r7,sp
80014eaa:	48 56       	lddpc	r6,80014ebc <ADCI_get_buffer+0x18>
80014eac:	1e 26       	rsub	r6,pc
80014eae:	ec f8 02 74 	ld.w	r8,r6[628]
80014eb2:	70 08       	ld.w	r8,r8[0x0]
80014eb4:	10 9c       	mov	r12,r8
80014eb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014eba:	00 00       	add	r0,r0
80014ebc:	80 01       	ld.sh	r1,r0[0x0]
80014ebe:	4d 30       	lddpc	r0,80015008 <processData+0x14>

80014ec0 <ADCI_get_sampling_status>:
80014ec0:	eb cd 40 c0 	pushm	r6-r7,lr
80014ec4:	1a 97       	mov	r7,sp
80014ec6:	48 56       	lddpc	r6,80014ed8 <ADCI_get_sampling_status+0x18>
80014ec8:	1e 26       	rsub	r6,pc
80014eca:	ec f8 01 1c 	ld.w	r8,r6[284]
80014ece:	70 08       	ld.w	r8,r8[0x0]
80014ed0:	10 9c       	mov	r12,r8
80014ed2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ed6:	00 00       	add	r0,r0
80014ed8:	80 01       	ld.sh	r1,r0[0x0]
80014eda:	4d 4c       	lddpc	r12,80015028 <processData+0x34>

80014edc <genclk_config_defaults>:
80014edc:	eb cd 40 80 	pushm	r7,lr
80014ee0:	1a 97       	mov	r7,sp
80014ee2:	20 2d       	sub	sp,8
80014ee4:	ef 4c ff fc 	st.w	r7[-4],r12
80014ee8:	ef 4b ff f8 	st.w	r7[-8],r11
80014eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014ef0:	30 09       	mov	r9,0
80014ef2:	91 09       	st.w	r8[0x0],r9
80014ef4:	2f ed       	sub	sp,-8
80014ef6:	e3 cd 80 80 	ldm	sp++,r7,pc

80014efa <genclk_config_set_source>:
80014efa:	eb cd 40 80 	pushm	r7,lr
80014efe:	1a 97       	mov	r7,sp
80014f00:	20 2d       	sub	sp,8
80014f02:	ef 4c ff fc 	st.w	r7[-4],r12
80014f06:	ef 4b ff f8 	st.w	r7[-8],r11
80014f0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f0e:	70 08       	ld.w	r8,r8[0x0]
80014f10:	10 99       	mov	r9,r8
80014f12:	e0 19 f0 ff 	andl	r9,0xf0ff
80014f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014f1a:	a9 68       	lsl	r8,0x8
80014f1c:	10 49       	or	r9,r8
80014f1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f22:	91 09       	st.w	r8[0x0],r9
80014f24:	2f ed       	sub	sp,-8
80014f26:	e3 cd 80 80 	ldm	sp++,r7,pc

80014f2a <genclk_config_set_divider>:
80014f2a:	eb cd 40 80 	pushm	r7,lr
80014f2e:	1a 97       	mov	r7,sp
80014f30:	20 2d       	sub	sp,8
80014f32:	ef 4c ff fc 	st.w	r7[-4],r12
80014f36:	ef 4b ff f8 	st.w	r7[-8],r11
80014f3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f3e:	70 08       	ld.w	r8,r8[0x0]
80014f40:	10 99       	mov	r9,r8
80014f42:	e4 19 ff 00 	andh	r9,0xff00
80014f46:	e0 19 ff fd 	andl	r9,0xfffd
80014f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f4e:	91 09       	st.w	r8[0x0],r9
80014f50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014f54:	58 18       	cp.w	r8,1
80014f56:	e0 88 00 17 	brls	80014f84 <genclk_config_set_divider+0x5a>
80014f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f5e:	70 08       	ld.w	r8,r8[0x0]
80014f60:	10 99       	mov	r9,r8
80014f62:	a1 b9       	sbr	r9,0x1
80014f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f68:	91 09       	st.w	r8[0x0],r9
80014f6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f6e:	70 09       	ld.w	r9,r8[0x0]
80014f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014f74:	2f f8       	sub	r8,-1
80014f76:	a1 98       	lsr	r8,0x1
80014f78:	20 18       	sub	r8,1
80014f7a:	b1 68       	lsl	r8,0x10
80014f7c:	10 49       	or	r9,r8
80014f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014f82:	91 09       	st.w	r8[0x0],r9
80014f84:	2f ed       	sub	sp,-8
80014f86:	e3 cd 80 80 	ldm	sp++,r7,pc

80014f8a <genclk_enable>:
80014f8a:	eb cd 40 80 	pushm	r7,lr
80014f8e:	1a 97       	mov	r7,sp
80014f90:	20 2d       	sub	sp,8
80014f92:	ef 4c ff fc 	st.w	r7[-4],r12
80014f96:	ef 4b ff f8 	st.w	r7[-8],r11
80014f9a:	fe 78 08 00 	mov	r8,-63488
80014f9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014fa2:	ee fa ff fc 	ld.w	r10,r7[-4]
80014fa6:	74 0a       	ld.w	r10,r10[0x0]
80014fa8:	a1 aa       	sbr	r10,0x0
80014faa:	2e 79       	sub	r9,-25
80014fac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80014fb0:	2f ed       	sub	sp,-8
80014fb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80014fb6 <genclk_disable>:
80014fb6:	eb cd 40 80 	pushm	r7,lr
80014fba:	1a 97       	mov	r7,sp
80014fbc:	20 1d       	sub	sp,4
80014fbe:	ef 4c ff fc 	st.w	r7[-4],r12
80014fc2:	fe 78 08 00 	mov	r8,-63488
80014fc6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fca:	2e 79       	sub	r9,-25
80014fcc:	30 0a       	mov	r10,0
80014fce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80014fd2:	2f fd       	sub	sp,-4
80014fd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80014fd8 <get_interrupt_counter>:
80014fd8:	eb cd 40 c0 	pushm	r6-r7,lr
80014fdc:	1a 97       	mov	r7,sp
80014fde:	48 56       	lddpc	r6,80014ff0 <get_interrupt_counter+0x18>
80014fe0:	1e 26       	rsub	r6,pc
80014fe2:	ec f8 08 dc 	ld.w	r8,r6[2268]
80014fe6:	70 08       	ld.w	r8,r8[0x0]
80014fe8:	10 9c       	mov	r12,r8
80014fea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014fee:	00 00       	add	r0,r0
80014ff0:	80 01       	ld.sh	r1,r0[0x0]
80014ff2:	4e 64       	lddpc	r4,80015188 <Init_ADC+0x14>

80014ff4 <processData>:
80014ff4:	eb cd 40 c0 	pushm	r6-r7,lr
80014ff8:	1a 97       	mov	r7,sp
80014ffa:	20 3d       	sub	sp,12
80014ffc:	4b e6       	lddpc	r6,800150f4 <processData+0x100>
80014ffe:	1e 26       	rsub	r6,pc
80015000:	ec f8 01 5c 	ld.w	r8,r6[348]
80015004:	70 08       	ld.w	r8,r8[0x0]
80015006:	e0 48 03 ff 	cp.w	r8,1023
8001500a:	e0 89 00 70 	brgt	800150ea <processData+0xf6>
8001500e:	30 0c       	mov	r12,0
80015010:	f0 16 01 ca 	mcall	r6[1832]
80015014:	18 98       	mov	r8,r12
80015016:	ef 48 ff fc 	st.w	r7[-4],r8
8001501a:	30 08       	mov	r8,0
8001501c:	ef 48 ff f4 	st.w	r7[-12],r8
80015020:	c4 48       	rjmp	800150a8 <processData+0xb4>
80015022:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015026:	12 98       	mov	r8,r9
80015028:	a1 78       	lsl	r8,0x1
8001502a:	12 08       	add	r8,r9
8001502c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015030:	f2 08 00 08 	add	r8,r9,r8
80015034:	11 88       	ld.ub	r8,r8[0x0]
80015036:	f0 0a 15 18 	lsl	r10,r8,0x18
8001503a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001503e:	12 98       	mov	r8,r9
80015040:	a1 78       	lsl	r8,0x1
80015042:	12 08       	add	r8,r9
80015044:	2f f8       	sub	r8,-1
80015046:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001504a:	f2 08 00 08 	add	r8,r9,r8
8001504e:	11 88       	ld.ub	r8,r8[0x0]
80015050:	b1 68       	lsl	r8,0x10
80015052:	10 0a       	add	r10,r8
80015054:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015058:	12 98       	mov	r8,r9
8001505a:	a1 78       	lsl	r8,0x1
8001505c:	12 08       	add	r8,r9
8001505e:	2f e8       	sub	r8,-2
80015060:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015064:	f2 08 00 08 	add	r8,r9,r8
80015068:	11 88       	ld.ub	r8,r8[0x0]
8001506a:	a9 68       	lsl	r8,0x8
8001506c:	f4 08 00 08 	add	r8,r10,r8
80015070:	ef 48 ff f8 	st.w	r7[-8],r8
80015074:	ee fb ff f4 	ld.w	r11,r7[-12]
80015078:	ec f8 01 5c 	ld.w	r8,r6[348]
8001507c:	70 09       	ld.w	r9,r8[0x0]
8001507e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015082:	f0 ca ff 01 	sub	r10,r8,-255
80015086:	58 08       	cp.w	r8,0
80015088:	f4 08 17 50 	movlt	r8,r10
8001508c:	a9 48       	asr	r8,0x8
8001508e:	10 9a       	mov	r10,r8
80015090:	ec f8 04 d0 	ld.w	r8,r6[1232]
80015094:	ab 6b       	lsl	r11,0xa
80015096:	f6 09 00 09 	add	r9,r11,r9
8001509a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8001509e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800150a2:	2f f8       	sub	r8,-1
800150a4:	ef 48 ff f4 	st.w	r7[-12],r8
800150a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800150ac:	58 38       	cp.w	r8,3
800150ae:	fe 9a ff ba 	brle	80015022 <processData+0x2e>
800150b2:	ec f8 02 84 	ld.w	r8,r6[644]
800150b6:	70 08       	ld.w	r8,r8[0x0]
800150b8:	58 08       	cp.w	r8,0
800150ba:	c0 f0       	breq	800150d8 <processData+0xe4>
800150bc:	ec f8 02 84 	ld.w	r8,r6[644]
800150c0:	70 08       	ld.w	r8,r8[0x0]
800150c2:	ec f9 01 5c 	ld.w	r9,r6[348]
800150c6:	72 09       	ld.w	r9,r9[0x0]
800150c8:	12 9c       	mov	r12,r9
800150ca:	5d 18       	icall	r8
800150cc:	18 98       	mov	r8,r12
800150ce:	5c 88       	casts.h	r8
800150d0:	5c 78       	castu.h	r8
800150d2:	10 9c       	mov	r12,r8
800150d4:	f0 16 01 b9 	mcall	r6[1764]
800150d8:	ec f8 01 5c 	ld.w	r8,r6[348]
800150dc:	70 08       	ld.w	r8,r8[0x0]
800150de:	f0 c9 ff ff 	sub	r9,r8,-1
800150e2:	ec f8 01 5c 	ld.w	r8,r6[348]
800150e6:	91 09       	st.w	r8[0x0],r9
800150e8:	c0 28       	rjmp	800150ec <processData+0xf8>
800150ea:	d7 03       	nop
800150ec:	2f dd       	sub	sp,-12
800150ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800150f2:	00 00       	add	r0,r0
800150f4:	80 01       	ld.sh	r1,r0[0x0]
800150f6:	4e 82       	lddpc	r2,80015294 <ADC_Switch_Clock+0x34>

800150f8 <set_DAC_generator_function>:
800150f8:	eb cd 40 c0 	pushm	r6-r7,lr
800150fc:	1a 97       	mov	r7,sp
800150fe:	20 1d       	sub	sp,4
80015100:	48 66       	lddpc	r6,80015118 <set_DAC_generator_function+0x20>
80015102:	1e 26       	rsub	r6,pc
80015104:	ef 4c ff fc 	st.w	r7[-4],r12
80015108:	ec f8 02 84 	ld.w	r8,r6[644]
8001510c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015110:	91 09       	st.w	r8[0x0],r9
80015112:	2f fd       	sub	sp,-4
80015114:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015118:	80 01       	ld.sh	r1,r0[0x0]
8001511a:	4f 86       	lddpc	r6,800152f8 <ADC_Start_Oneshot+0xe>

8001511c <get_sample>:
8001511c:	eb cd 40 c0 	pushm	r6-r7,lr
80015120:	1a 97       	mov	r7,sp
80015122:	20 2d       	sub	sp,8
80015124:	48 c6       	lddpc	r6,80015154 <get_sample+0x38>
80015126:	1e 26       	rsub	r6,pc
80015128:	ef 4c ff fc 	st.w	r7[-4],r12
8001512c:	ef 4b ff f8 	st.w	r7[-8],r11
80015130:	ee fa ff fc 	ld.w	r10,r7[-4]
80015134:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015138:	ec f8 04 d0 	ld.w	r8,r6[1232]
8001513c:	ab 6a       	lsl	r10,0xa
8001513e:	f4 09 00 09 	add	r9,r10,r9
80015142:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80015146:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001514a:	10 9c       	mov	r12,r8
8001514c:	2f ed       	sub	sp,-8
8001514e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015152:	00 00       	add	r0,r0
80015154:	80 01       	ld.sh	r1,r0[0x0]
80015156:	4f aa       	lddpc	r10,8001533c <eic_nmi_handler+0x24>

80015158 <get_sampling_status>:
80015158:	eb cd 40 c0 	pushm	r6-r7,lr
8001515c:	1a 97       	mov	r7,sp
8001515e:	48 56       	lddpc	r6,80015170 <get_sampling_status+0x18>
80015160:	1e 26       	rsub	r6,pc
80015162:	ec f8 01 5c 	ld.w	r8,r6[348]
80015166:	70 08       	ld.w	r8,r8[0x0]
80015168:	10 9c       	mov	r12,r8
8001516a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001516e:	00 00       	add	r0,r0
80015170:	80 01       	ld.sh	r1,r0[0x0]
80015172:	4f e4       	lddpc	r4,80015368 <init_adxl345+0x28>

80015174 <Init_ADC>:
80015174:	eb cd 40 c0 	pushm	r6-r7,lr
80015178:	1a 97       	mov	r7,sp
8001517a:	4b 96       	lddpc	r6,8001525c <Init_ADC+0xe8>
8001517c:	1e 26       	rsub	r6,pc
8001517e:	ec f8 02 84 	ld.w	r8,r6[644]
80015182:	30 09       	mov	r9,0
80015184:	91 09       	st.w	r8[0x0],r9
80015186:	30 3b       	mov	r11,3
80015188:	32 3c       	mov	r12,35
8001518a:	f0 16 00 3c 	mcall	r6[240]
8001518e:	30 1b       	mov	r11,1
80015190:	32 4c       	mov	r12,36
80015192:	f0 16 00 3c 	mcall	r6[240]
80015196:	30 3b       	mov	r11,3
80015198:	32 2c       	mov	r12,34
8001519a:	f0 16 00 3c 	mcall	r6[240]
8001519e:	30 1b       	mov	r11,1
800151a0:	32 1c       	mov	r12,33
800151a2:	f0 16 00 3c 	mcall	r6[240]
800151a6:	30 1b       	mov	r11,1
800151a8:	32 0c       	mov	r12,32
800151aa:	f0 16 00 3c 	mcall	r6[240]
800151ae:	30 3b       	mov	r11,3
800151b0:	34 0c       	mov	r12,64
800151b2:	f0 16 00 3c 	mcall	r6[240]
800151b6:	30 3b       	mov	r11,3
800151b8:	34 1c       	mov	r12,65
800151ba:	f0 16 00 3c 	mcall	r6[240]
800151be:	30 3b       	mov	r11,3
800151c0:	34 2c       	mov	r12,66
800151c2:	f0 16 00 3c 	mcall	r6[240]
800151c6:	30 3b       	mov	r11,3
800151c8:	34 3c       	mov	r12,67
800151ca:	f0 16 00 3c 	mcall	r6[240]
800151ce:	30 1c       	mov	r12,1
800151d0:	f0 16 01 58 	mcall	r6[1376]
800151d4:	ec f9 01 74 	ld.w	r9,r6[372]
800151d8:	30 08       	mov	r8,0
800151da:	b2 98       	st.b	r9[0x1],r8
800151dc:	ec f9 01 74 	ld.w	r9,r6[372]
800151e0:	30 08       	mov	r8,0
800151e2:	b2 a8       	st.b	r9[0x2],r8
800151e4:	ec f9 01 74 	ld.w	r9,r6[372]
800151e8:	30 08       	mov	r8,0
800151ea:	b2 d8       	st.b	r9[0x5],r8
800151ec:	ec f9 01 74 	ld.w	r9,r6[372]
800151f0:	30 08       	mov	r8,0
800151f2:	b2 88       	st.b	r9[0x0],r8
800151f4:	30 1b       	mov	r11,1
800151f6:	37 5c       	mov	r12,117
800151f8:	f0 16 00 3e 	mcall	r6[248]
800151fc:	30 1a       	mov	r10,1
800151fe:	ec fb 01 74 	ld.w	r11,r6[372]
80015202:	fe 7c 14 00 	mov	r12,-60416
80015206:	f0 16 01 b1 	mcall	r6[1732]
8001520a:	30 0b       	mov	r11,0
8001520c:	fc 7c 18 00 	mov	r12,-190464
80015210:	f0 16 01 41 	mcall	r6[1284]
80015214:	30 cb       	mov	r11,12
80015216:	30 0c       	mov	r12,0
80015218:	f0 16 01 a2 	mcall	r6[1672]
8001521c:	ec fb 06 ac 	ld.w	r11,r6[1708]
80015220:	30 0c       	mov	r12,0
80015222:	f0 16 01 85 	mcall	r6[1556]
80015226:	ec f8 01 74 	ld.w	r8,r6[372]
8001522a:	11 88       	ld.ub	r8,r8[0x0]
8001522c:	10 9b       	mov	r11,r8
8001522e:	fe 7c 14 00 	mov	r12,-60416
80015232:	f0 16 01 d2 	mcall	r6[1864]
80015236:	ec f8 01 74 	ld.w	r8,r6[372]
8001523a:	11 88       	ld.ub	r8,r8[0x0]
8001523c:	10 9b       	mov	r11,r8
8001523e:	fe 7c 14 00 	mov	r12,-60416
80015242:	f0 16 01 7f 	mcall	r6[1532]
80015246:	30 0b       	mov	r11,0
80015248:	fe 7c 14 00 	mov	r12,-60416
8001524c:	f0 16 00 db 	mcall	r6[876]
80015250:	30 3b       	mov	r11,3
80015252:	32 5c       	mov	r12,37
80015254:	f0 16 00 3c 	mcall	r6[240]
80015258:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001525c:	80 01       	ld.sh	r1,r0[0x0]
8001525e:	50 00       	stdsp	sp[0x0],r0

80015260 <ADC_Switch_Clock>:
80015260:	eb cd 40 c0 	pushm	r6-r7,lr
80015264:	1a 97       	mov	r7,sp
80015266:	20 1d       	sub	sp,4
80015268:	49 56       	lddpc	r6,800152bc <ADC_Switch_Clock+0x5c>
8001526a:	1e 26       	rsub	r6,pc
8001526c:	18 98       	mov	r8,r12
8001526e:	ef 68 ff fc 	st.b	r7[-4],r8
80015272:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80015276:	30 18       	mov	r8,1
80015278:	f0 09 18 00 	cp.b	r9,r8
8001527c:	c1 a1       	brne	800152b0 <ADC_Switch_Clock+0x50>
8001527e:	30 1b       	mov	r11,1
80015280:	35 4c       	mov	r12,84
80015282:	f0 16 00 3e 	mcall	r6[248]
80015286:	30 3b       	mov	r11,3
80015288:	32 5c       	mov	r12,37
8001528a:	f0 16 00 3c 	mcall	r6[240]
8001528e:	30 ab       	mov	r11,10
80015290:	ec fc 02 24 	ld.w	r12,r6[548]
80015294:	c2 4e       	rcall	80014edc <genclk_config_defaults>
80015296:	30 6b       	mov	r11,6
80015298:	ec fc 02 24 	ld.w	r12,r6[548]
8001529c:	c2 fe       	rcall	80014efa <genclk_config_set_source>
8001529e:	30 2b       	mov	r11,2
800152a0:	ec fc 02 24 	ld.w	r12,r6[548]
800152a4:	c4 3e       	rcall	80014f2a <genclk_config_set_divider>
800152a6:	30 ab       	mov	r11,10
800152a8:	ec fc 02 24 	ld.w	r12,r6[548]
800152ac:	c6 fe       	rcall	80014f8a <genclk_enable>
800152ae:	c0 38       	rjmp	800152b4 <ADC_Switch_Clock+0x54>
800152b0:	30 ac       	mov	r12,10
800152b2:	c8 2e       	rcall	80014fb6 <genclk_disable>
800152b4:	2f fd       	sub	sp,-4
800152b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800152ba:	00 00       	add	r0,r0
800152bc:	80 01       	ld.sh	r1,r0[0x0]
800152be:	50 ee       	stdsp	sp[0x38],lr

800152c0 <ADC_Switch_Channel>:
800152c0:	eb cd 40 80 	pushm	r7,lr
800152c4:	1a 97       	mov	r7,sp
800152c6:	20 2d       	sub	sp,8
800152c8:	ef 4c ff fc 	st.w	r7[-4],r12
800152cc:	16 98       	mov	r8,r11
800152ce:	ef 68 ff f8 	st.b	r7[-8],r8
800152d2:	2f ed       	sub	sp,-8
800152d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800152d8 <ADC_Set_Mode>:
800152d8:	eb cd 40 80 	pushm	r7,lr
800152dc:	1a 97       	mov	r7,sp
800152de:	20 1d       	sub	sp,4
800152e0:	ef 4c ff fc 	st.w	r7[-4],r12
800152e4:	2f fd       	sub	sp,-4
800152e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800152ea <ADC_Start_Oneshot>:
800152ea:	eb cd 40 c0 	pushm	r6-r7,lr
800152ee:	1a 97       	mov	r7,sp
800152f0:	48 46       	lddpc	r6,80015300 <ADC_Start_Oneshot+0x16>
800152f2:	1e 26       	rsub	r6,pc
800152f4:	ec f8 01 5c 	ld.w	r8,r6[348]
800152f8:	30 09       	mov	r9,0
800152fa:	91 09       	st.w	r8[0x0],r9
800152fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015300:	80 01       	ld.sh	r1,r0[0x0]
80015302:	51 76       	stdsp	sp[0x5c],r6

80015304 <ADC_Stop_Sampling>:
80015304:	eb cd 40 80 	pushm	r7,lr
80015308:	1a 97       	mov	r7,sp
8001530a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001530e <Sampling_Complete>:
8001530e:	eb cd 40 80 	pushm	r7,lr
80015312:	1a 97       	mov	r7,sp
80015314:	e3 cd 80 80 	ldm	sp++,r7,pc

80015318 <eic_nmi_handler>:
80015318:	d7 f1       	pushm	r0-r12,lr
8001531a:	ec f8 01 5c 	ld.w	r8,r6[348]
8001531e:	70 08       	ld.w	r8,r8[0x0]
80015320:	e0 48 03 ff 	cp.w	r8,1023
80015324:	e0 89 00 06 	brgt	80015330 <eic_nmi_handler+0x18>
80015328:	30 cb       	mov	r11,12
8001532a:	30 0c       	mov	r12,0
8001532c:	f0 16 01 87 	mcall	r6[1564]
80015330:	30 0b       	mov	r11,0
80015332:	fe 7c 14 00 	mov	r12,-60416
80015336:	f0 16 00 db 	mcall	r6[876]
8001533a:	d7 f2       	popm	r0-r12,lr
8001533c:	d6 03       	rete
	...

80015340 <init_adxl345>:

uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};


void init_adxl345(void) {
80015340:	eb cd 40 c0 	pushm	r6-r7,lr
80015344:	1a 97       	mov	r7,sp
80015346:	4b 06       	lddpc	r6,80015404 <init_adxl345+0xc4>
80015348:	1e 26       	rsub	r6,pc
	

	gyro_event.callback=0;
8001534a:	ec f8 00 8c 	ld.w	r8,r6[140]
8001534e:	30 09       	mov	r9,0
80015350:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80015352:	ec f8 00 8c 	ld.w	r8,r6[140]
80015356:	30 59       	mov	r9,5
80015358:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
8001535a:	ec f9 00 8c 	ld.w	r9,r6[140]
8001535e:	3f f8       	mov	r8,-1
80015360:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ADXL_ALT_SLAVE_ADDRESS;
80015364:	ec f9 00 8c 	ld.w	r9,r6[140]
80015368:	35 38       	mov	r8,83
8001536a:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
8001536c:	ec f9 00 8c 	ld.w	r9,r6[140]
80015370:	30 18       	mov	r8,1
80015372:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&acc_outputs.raw_data;
80015376:	ec f9 01 58 	ld.w	r9,r6[344]
8001537a:	ec f8 00 8c 	ld.w	r8,r6[140]
8001537e:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015380:	ec f8 00 8c 	ld.w	r8,r6[140]
80015384:	30 69       	mov	r9,6
80015386:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80015388:	ec f8 00 8c 	ld.w	r8,r6[140]
8001538c:	ec f9 01 40 	ld.w	r9,r6[320]
80015390:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=2;
80015392:	ec f8 00 8c 	ld.w	r8,r6[140]
80015396:	30 29       	mov	r9,2
80015398:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=400000;
8001539a:	ec f8 00 8c 	ld.w	r8,r6[140]
8001539e:	e6 69 1a 80 	mov	r9,400000
800153a2:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
800153a4:	ec fb 00 8c 	ld.w	r11,r6[140]
800153a8:	30 0c       	mov	r12,0
800153aa:	f0 16 01 10 	mcall	r6[1088]
	i2c_trigger_request(0, gyro_event.schedule_slot);
800153ae:	ec f8 00 8c 	ld.w	r8,r6[140]
800153b2:	f1 38 00 24 	ld.ub	r8,r8[36]
800153b6:	10 9b       	mov	r11,r8
800153b8:	30 0c       	mov	r12,0
800153ba:	f0 16 00 60 	mcall	r6[384]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
800153be:	ec f9 00 8c 	ld.w	r9,r6[140]
800153c2:	30 28       	mov	r8,2
800153c4:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
800153c8:	ec f9 00 8c 	ld.w	r9,r6[140]
800153cc:	33 28       	mov	r8,50
800153ce:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.read_data=&acc_outputs;
800153d2:	ec f8 00 8c 	ld.w	r8,r6[140]
800153d6:	ec f9 01 58 	ld.w	r9,r6[344]
800153da:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
800153dc:	ec f8 00 8c 	ld.w	r8,r6[140]
800153e0:	30 69       	mov	r9,6
800153e2:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
800153e4:	ec fb 00 8c 	ld.w	r11,r6[140]
800153e8:	30 0c       	mov	r12,0
800153ea:	f0 16 01 11 	mcall	r6[1092]
	i2c_trigger_request(0, gyro_event.schedule_slot);
800153ee:	ec f8 00 8c 	ld.w	r8,r6[140]
800153f2:	f1 38 00 24 	ld.ub	r8,r8[36]
800153f6:	10 9b       	mov	r11,r8
800153f8:	30 0c       	mov	r12,0
800153fa:	f0 16 00 60 	mcall	r6[384]
	/**/
}
800153fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015402:	00 00       	add	r0,r0
80015404:	80 01       	ld.sh	r1,r0[0x0]
80015406:	51 cc       	stdsp	sp[0x70],r12

80015408 <init_adxl345_slow>:

void init_adxl345_slow(void) {
80015408:	eb cd 40 c0 	pushm	r6-r7,lr
8001540c:	1a 97       	mov	r7,sp
8001540e:	48 f6       	lddpc	r6,80015448 <init_adxl345_slow+0x40>
80015410:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015412:	ec fb 08 d8 	ld.w	r11,r6[2264]
80015416:	fe 7c 38 00 	mov	r12,-51200
8001541a:	f0 16 00 70 	mcall	r6[448]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
8001541e:	30 08       	mov	r8,0
80015420:	35 39       	mov	r9,83
80015422:	30 2a       	mov	r10,2
80015424:	ec fb 01 40 	ld.w	r11,r6[320]
80015428:	fe 7c 38 00 	mov	r12,-51200
8001542c:	f0 16 00 35 	mcall	r6[212]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015430:	30 08       	mov	r8,0
80015432:	35 39       	mov	r9,83
80015434:	30 2a       	mov	r10,2
80015436:	ec fb 08 6c 	ld.w	r11,r6[2156]
8001543a:	fe 7c 38 00 	mov	r12,-51200
8001543e:	f0 16 00 35 	mcall	r6[212]
}
80015442:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015446:	00 00       	add	r0,r0
80015448:	80 01       	ld.sh	r1,r0[0x0]
8001544a:	52 94       	stdsp	sp[0xa4],r4

8001544c <get_acc_data>:

acc_data* get_acc_data(void) {
8001544c:	eb cd 40 c0 	pushm	r6-r7,lr
80015450:	1a 97       	mov	r7,sp
80015452:	48 86       	lddpc	r6,80015470 <get_acc_data+0x24>
80015454:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015456:	ec f8 00 8c 	ld.w	r8,r6[140]
8001545a:	f1 38 00 24 	ld.ub	r8,r8[36]
8001545e:	10 9b       	mov	r11,r8
80015460:	30 0c       	mov	r12,0
80015462:	f0 16 00 60 	mcall	r6[384]
	return &acc_outputs;
80015466:	ec f8 01 58 	ld.w	r8,r6[344]
}
8001546a:	10 9c       	mov	r12,r8
8001546c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015470:	80 01       	ld.sh	r1,r0[0x0]
80015472:	52 d8       	stdsp	sp[0xb4],r8

80015474 <get_acc_data_slow>:

acc_data* get_acc_data_slow(void) {
80015474:	eb cd 40 c0 	pushm	r6-r7,lr
80015478:	1a 97       	mov	r7,sp
8001547a:	20 1d       	sub	sp,4
8001547c:	4a 96       	lddpc	r6,80015520 <get_acc_data_slow+0xac>
8001547e:	1e 26       	rsub	r6,pc
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015480:	ec f9 00 8c 	ld.w	r9,r6[140]
80015484:	33 28       	mov	r8,50
80015486:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
8001548a:	ec f8 00 8c 	ld.w	r8,r6[140]
8001548e:	f0 cb ff f7 	sub	r11,r8,-9
80015492:	30 08       	mov	r8,0
80015494:	35 39       	mov	r9,83
80015496:	30 1a       	mov	r10,1
80015498:	fe 7c 38 00 	mov	r12,-51200
8001549c:	f0 16 00 35 	mcall	r6[212]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
800154a0:	30 08       	mov	r8,0
800154a2:	35 39       	mov	r9,83
800154a4:	30 6a       	mov	r10,6
800154a6:	ec fb 01 58 	ld.w	r11,r6[344]
800154aa:	fe 7c 38 00 	mov	r12,-51200
800154ae:	f0 16 00 5f 	mcall	r6[380]
	
	for (i=0; i<3; i++) {
800154b2:	30 08       	mov	r8,0
800154b4:	ef 48 ff fc 	st.w	r7[-4],r8
800154b8:	c2 98       	rjmp	8001550a <get_acc_data_slow+0x96>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
800154ba:	ee fb ff fc 	ld.w	r11,r7[-4]
800154be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800154c2:	a1 78       	lsl	r8,0x1
800154c4:	ec f9 01 58 	ld.w	r9,r6[344]
800154c8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800154cc:	5c 58       	castu.b	r8
800154ce:	10 99       	mov	r9,r8
800154d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800154d4:	a1 78       	lsl	r8,0x1
800154d6:	2f f8       	sub	r8,-1
800154d8:	ec fa 01 58 	ld.w	r10,r6[344]
800154dc:	f4 08 07 08 	ld.ub	r8,r10[r8]
800154e0:	5c 58       	castu.b	r8
800154e2:	a9 68       	lsl	r8,0x8
800154e4:	5c 88       	casts.h	r8
800154e6:	f2 08 00 08 	add	r8,r9,r8
800154ea:	5c 88       	casts.h	r8
800154ec:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800154f0:	ec fa 01 58 	ld.w	r10,r6[344]
800154f4:	f6 c8 ff fe 	sub	r8,r11,-2
800154f8:	a1 78       	lsl	r8,0x1
800154fa:	f4 08 00 08 	add	r8,r10,r8
800154fe:	b0 19       	st.h	r8[0x2],r9
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80015500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015504:	2f f8       	sub	r8,-1
80015506:	ef 48 ff fc 	st.w	r7[-4],r8
8001550a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001550e:	58 28       	cp.w	r8,2
80015510:	fe 9a ff d5 	brle	800154ba <get_acc_data_slow+0x46>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80015514:	ec f8 01 58 	ld.w	r8,r6[344]
80015518:	10 9c       	mov	r12,r8
8001551a:	2f fd       	sub	sp,-4
8001551c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015520:	80 01       	ld.sh	r1,r0[0x0]
80015522:	53 02       	stdsp	sp[0xc0],r2

80015524 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80015524:	eb cd 40 80 	pushm	r7,lr
80015528:	1a 97       	mov	r7,sp
8001552a:	20 1d       	sub	sp,4
8001552c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80015530:	30 18       	mov	r8,1
80015532:	ee fa ff fc 	ld.w	r10,r7[-4]
80015536:	30 09       	mov	r9,0
80015538:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001553c:	e0 8c 00 03 	brvs	80015542 <f_abs+0x1e>
80015540:	c0 24       	brge	80015544 <f_abs+0x20>
80015542:	30 08       	mov	r8,0
80015544:	5c 58       	castu.b	r8
80015546:	c0 40       	breq	8001554e <f_abs+0x2a>
	{
		return a;
80015548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001554c:	c0 58       	rjmp	80015556 <f_abs+0x32>
	}else{
		return -a;
8001554e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015552:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80015556:	10 9c       	mov	r12,r8
80015558:	2f fd       	sub	sp,-4
8001555a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001555e <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
8001555e:	eb cd 40 80 	pushm	r7,lr
80015562:	1a 97       	mov	r7,sp
80015564:	20 4d       	sub	sp,16
80015566:	ef 4c ff f8 	st.w	r7[-8],r12
8001556a:	ef 4b ff f4 	st.w	r7[-12],r11
8001556e:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80015572:	30 18       	mov	r8,1
80015574:	ee fa ff f8 	ld.w	r10,r7[-8]
80015578:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001557c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015580:	e0 8c 00 04 	brvs	80015588 <median_filter_3x+0x2a>
80015584:	e0 8a 00 03 	brle	8001558a <median_filter_3x+0x2c>
80015588:	30 08       	mov	r8,0
8001558a:	5c 58       	castu.b	r8
8001558c:	c2 50       	breq	800155d6 <median_filter_3x+0x78>
8001558e:	30 18       	mov	r8,1
80015590:	ee fa ff f8 	ld.w	r10,r7[-8]
80015594:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015598:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001559c:	e0 8c 00 04 	brvs	800155a4 <median_filter_3x+0x46>
800155a0:	e0 8a 00 03 	brle	800155a6 <median_filter_3x+0x48>
800155a4:	30 08       	mov	r8,0
800155a6:	5c 58       	castu.b	r8
800155a8:	c1 70       	breq	800155d6 <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
800155aa:	30 18       	mov	r8,1
800155ac:	ee fa ff f4 	ld.w	r10,r7[-12]
800155b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800155b4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800155b8:	e0 8c 00 04 	brvs	800155c0 <median_filter_3x+0x62>
800155bc:	e0 8a 00 03 	brle	800155c2 <median_filter_3x+0x64>
800155c0:	30 08       	mov	r8,0
800155c2:	5c 58       	castu.b	r8
800155c4:	c0 40       	breq	800155cc <median_filter_3x+0x6e>
800155c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800155ca:	c0 38       	rjmp	800155d0 <median_filter_3x+0x72>
800155cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800155d0:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
800155d4:	c4 88       	rjmp	80015664 <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
800155d6:	30 18       	mov	r8,1
800155d8:	ee fa ff f4 	ld.w	r10,r7[-12]
800155dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800155e0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800155e4:	e0 8c 00 04 	brvs	800155ec <median_filter_3x+0x8e>
800155e8:	e0 8a 00 03 	brle	800155ee <median_filter_3x+0x90>
800155ec:	30 08       	mov	r8,0
800155ee:	5c 58       	castu.b	r8
800155f0:	c2 50       	breq	8001563a <median_filter_3x+0xdc>
800155f2:	30 18       	mov	r8,1
800155f4:	ee fa ff f4 	ld.w	r10,r7[-12]
800155f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800155fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015600:	e0 8c 00 04 	brvs	80015608 <median_filter_3x+0xaa>
80015604:	e0 8a 00 03 	brle	8001560a <median_filter_3x+0xac>
80015608:	30 08       	mov	r8,0
8001560a:	5c 58       	castu.b	r8
8001560c:	c1 70       	breq	8001563a <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
8001560e:	30 18       	mov	r8,1
80015610:	ee fa ff f8 	ld.w	r10,r7[-8]
80015614:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015618:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001561c:	e0 8c 00 04 	brvs	80015624 <median_filter_3x+0xc6>
80015620:	e0 8a 00 03 	brle	80015626 <median_filter_3x+0xc8>
80015624:	30 08       	mov	r8,0
80015626:	5c 58       	castu.b	r8
80015628:	c0 40       	breq	80015630 <median_filter_3x+0xd2>
8001562a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001562e:	c0 38       	rjmp	80015634 <median_filter_3x+0xd6>
80015630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015634:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015638:	c1 68       	rjmp	80015664 <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
8001563a:	30 18       	mov	r8,1
8001563c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015640:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015644:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015648:	e0 8c 00 04 	brvs	80015650 <median_filter_3x+0xf2>
8001564c:	e0 8a 00 03 	brle	80015652 <median_filter_3x+0xf4>
80015650:	30 08       	mov	r8,0
80015652:	5c 58       	castu.b	r8
80015654:	c0 40       	breq	8001565c <median_filter_3x+0xfe>
80015656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001565a:	c0 38       	rjmp	80015660 <median_filter_3x+0x102>
8001565c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015660:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80015664:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80015668:	10 9c       	mov	r12,r8
8001566a:	2f cd       	sub	sp,-16
8001566c:	e3 cd 80 80 	ldm	sp++,r7,pc

80015670 <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80015670:	eb cd 40 c0 	pushm	r6-r7,lr
80015674:	1a 97       	mov	r7,sp
80015676:	20 2d       	sub	sp,8
80015678:	48 f6       	lddpc	r6,800156b4 <bmp085_read_int+0x44>
8001567a:	1e 26       	rsub	r6,pc
8001567c:	18 98       	mov	r8,r12
8001567e:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80015682:	ee cb 00 08 	sub	r11,r7,8
80015686:	30 08       	mov	r8,0
80015688:	37 79       	mov	r9,119
8001568a:	30 1a       	mov	r10,1
8001568c:	fe 7c 38 00 	mov	r12,-51200
80015690:	f0 16 00 35 	mcall	r6[212]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80015694:	ee cb 00 02 	sub	r11,r7,2
80015698:	30 08       	mov	r8,0
8001569a:	37 79       	mov	r9,119
8001569c:	30 2a       	mov	r10,2
8001569e:	fe 7c 38 00 	mov	r12,-51200
800156a2:	f0 16 00 5f 	mcall	r6[380]
	return result;
800156a6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800156aa:	10 9c       	mov	r12,r8
800156ac:	2f ed       	sub	sp,-8
800156ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800156b2:	00 00       	add	r0,r0
800156b4:	80 01       	ld.sh	r1,r0[0x0]
800156b6:	54 fe       	stdsp	sp[0x13c],lr

800156b8 <init_bmp085>:

void init_bmp085(){
800156b8:	eb cd 40 c0 	pushm	r6-r7,lr
800156bc:	1a 97       	mov	r7,sp
800156be:	20 1d       	sub	sp,4
800156c0:	49 36       	lddpc	r6,8001570c <init_bmp085+0x54>
800156c2:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
800156c4:	ec f8 00 48 	ld.w	r8,r6[72]
800156c8:	30 09       	mov	r9,0
800156ca:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
800156cc:	30 08       	mov	r8,0
800156ce:	ef 48 ff fc 	st.w	r7[-4],r8
800156d2:	c0 e8       	rjmp	800156ee <init_bmp085+0x36>
800156d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800156d8:	ec f8 00 48 	ld.w	r8,r6[72]
800156dc:	2f c9       	sub	r9,-4
800156de:	30 0a       	mov	r10,0
800156e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800156e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800156e8:	2f f8       	sub	r8,-1
800156ea:	ef 48 ff fc 	st.w	r7[-4],r8
800156ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800156f2:	58 28       	cp.w	r8,2
800156f4:	fe 9a ff f0 	brle	800156d4 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
800156f8:	ec f8 00 48 	ld.w	r8,r6[72]
800156fc:	30 09       	mov	r9,0
800156fe:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80015700:	f0 16 01 f1 	mcall	r6[1988]
}
80015704:	2f fd       	sub	sp,-4
80015706:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001570a:	00 00       	add	r0,r0
8001570c:	80 01       	ld.sh	r1,r0[0x0]
8001570e:	55 46       	stdsp	sp[0x150],r6
80015710:	42 4d       	lddsp	sp,sp[0x90]
80015712:	50 38       	stdsp	sp[0xc],r8
80015714:	35 2f       	mov	pc,82
80015716:	31 38       	mov	r8,19
80015718:	30 20       	mov	r0,2
8001571a:	70 72       	ld.w	r2,r8[0x1c]
8001571c:	65 73       	ld.w	r3,r2[0x5c]
8001571e:	73 75       	ld.w	r5,r9[0x5c]
80015720:	72 65       	ld.w	r5,r9[0x18]
80015722:	20 73       	sub	r3,7
80015724:	65 6e       	ld.w	lr,r2[0x58]
80015726:	73 6f       	ld.w	pc,r9[0x58]
80015728:	72 20       	ld.w	r0,r9[0x8]
8001572a:	66 6f       	ld.w	pc,r3[0x18]
8001572c:	75 6e       	ld.w	lr,r10[0x58]
8001572e:	64 20       	ld.w	r0,r2[0x8]
80015730:	28 30       	sub	r0,-125
80015732:	78 37       	ld.w	r7,r12[0xc]
80015734:	37 29       	mov	r9,114
80015736:	0a 00       	add	r0,r5
80015738:	42 4d       	lddsp	sp,sp[0x90]
8001573a:	50 38       	stdsp	sp[0xc],r8
8001573c:	35 2f       	mov	pc,82
8001573e:	31 38       	mov	r8,19
80015740:	30 20       	mov	r0,2
80015742:	70 72       	ld.w	r2,r8[0x1c]
80015744:	65 73       	ld.w	r3,r2[0x5c]
80015746:	73 75       	ld.w	r5,r9[0x5c]
80015748:	72 65       	ld.w	r5,r9[0x18]
8001574a:	20 73       	sub	r3,7
8001574c:	65 6e       	ld.w	lr,r2[0x58]
8001574e:	73 6f       	ld.w	pc,r9[0x58]
80015750:	72 20       	ld.w	r0,r9[0x8]
80015752:	6e 6f       	ld.w	pc,r7[0x18]
80015754:	74 20       	ld.w	r0,r10[0x8]
80015756:	72 65       	ld.w	r5,r9[0x18]
80015758:	73 70       	ld.w	r0,r9[0x5c]
8001575a:	6f 6e       	ld.w	lr,r7[0x58]
8001575c:	64 69       	ld.w	r9,r2[0x18]
8001575e:	6e 67       	ld.w	r7,r7[0x18]
80015760:	20 28       	sub	r8,2
80015762:	30 78       	mov	r8,7
80015764:	37 37       	mov	r7,115
80015766:	29 0a       	sub	r10,-112
	...

8001576a <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
8001576a:	eb cd 40 c0 	pushm	r6-r7,lr
8001576e:	1a 97       	mov	r7,sp
80015770:	4d 36       	lddpc	r6,800158bc <init_bmp085_slow+0x152>
80015772:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015774:	ec fb 08 d4 	ld.w	r11,r6[2260]
80015778:	fe 7c 38 00 	mov	r12,-51200
8001577c:	f0 16 00 70 	mcall	r6[448]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80015780:	37 7b       	mov	r11,119
80015782:	fe 7c 38 00 	mov	r12,-51200
80015786:	f0 16 01 07 	mcall	r6[1052]
8001578a:	18 98       	mov	r8,r12
8001578c:	58 08       	cp.w	r8,0
8001578e:	e0 81 00 8f 	brne	800158ac <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80015792:	fe cc 00 82 	sub	r12,pc,130
80015796:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
8001579a:	ec f9 03 38 	ld.w	r9,r6[824]
8001579e:	e0 68 01 98 	mov	r8,408
800157a2:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
800157a4:	ec f9 03 10 	ld.w	r9,r6[784]
800157a8:	3b 88       	mov	r8,-72
800157aa:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
800157ac:	ec f9 02 98 	ld.w	r9,r6[664]
800157b0:	fe 78 c7 d1 	mov	r8,-14383
800157b4:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
800157b6:	ec f9 02 f4 	ld.w	r9,r6[756]
800157ba:	e0 68 7f e5 	mov	r8,32741
800157be:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
800157c0:	ec f9 03 14 	ld.w	r9,r6[788]
800157c4:	e0 68 7f f5 	mov	r8,32757
800157c8:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
800157ca:	ec f9 03 24 	ld.w	r9,r6[804]
800157ce:	e0 68 5a 71 	mov	r8,23153
800157d2:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
800157d4:	ec f9 02 cc 	ld.w	r9,r6[716]
800157d8:	fe 78 dd f9 	mov	r8,-8711
800157dc:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
800157de:	ec f9 03 00 	ld.w	r9,r6[768]
800157e2:	e0 68 0b 34 	mov	r8,2868
800157e6:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
800157e8:	ec f9 03 2c 	ld.w	r9,r6[812]
800157ec:	e0 68 18 2e 	mov	r8,6190
800157f0:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
800157f2:	ec f9 03 48 	ld.w	r9,r6[840]
800157f6:	30 48       	mov	r8,4
800157f8:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
800157fa:	e0 6c 00 aa 	mov	r12,170
800157fe:	f0 16 00 45 	mcall	r6[276]
80015802:	18 98       	mov	r8,r12
80015804:	ec f9 03 38 	ld.w	r9,r6[824]
80015808:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
8001580a:	e0 6c 00 ac 	mov	r12,172
8001580e:	f0 16 00 45 	mcall	r6[276]
80015812:	18 98       	mov	r8,r12
80015814:	ec f9 03 10 	ld.w	r9,r6[784]
80015818:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
8001581a:	e0 6c 00 ae 	mov	r12,174
8001581e:	f0 16 00 45 	mcall	r6[276]
80015822:	18 98       	mov	r8,r12
80015824:	ec f9 02 98 	ld.w	r9,r6[664]
80015828:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
8001582a:	e0 6c 00 b0 	mov	r12,176
8001582e:	f0 16 00 45 	mcall	r6[276]
80015832:	18 98       	mov	r8,r12
80015834:	ec f9 02 f4 	ld.w	r9,r6[756]
80015838:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
8001583a:	e0 6c 00 b2 	mov	r12,178
8001583e:	f0 16 00 45 	mcall	r6[276]
80015842:	18 98       	mov	r8,r12
80015844:	ec f9 03 14 	ld.w	r9,r6[788]
80015848:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
8001584a:	e0 6c 00 b4 	mov	r12,180
8001584e:	f0 16 00 45 	mcall	r6[276]
80015852:	18 98       	mov	r8,r12
80015854:	ec f9 03 24 	ld.w	r9,r6[804]
80015858:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
8001585a:	e0 6c 00 b6 	mov	r12,182
8001585e:	f0 16 00 45 	mcall	r6[276]
80015862:	18 98       	mov	r8,r12
80015864:	ec f9 03 2c 	ld.w	r9,r6[812]
80015868:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
8001586a:	e0 6c 00 b8 	mov	r12,184
8001586e:	f0 16 00 45 	mcall	r6[276]
80015872:	18 98       	mov	r8,r12
80015874:	ec f9 03 48 	ld.w	r9,r6[840]
80015878:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
8001587a:	e0 6c 00 ba 	mov	r12,186
8001587e:	f0 16 00 45 	mcall	r6[276]
80015882:	18 98       	mov	r8,r12
80015884:	ec f9 08 10 	ld.w	r9,r6[2064]
80015888:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
8001588a:	e0 6c 00 bc 	mov	r12,188
8001588e:	f0 16 00 45 	mcall	r6[276]
80015892:	18 98       	mov	r8,r12
80015894:	ec f9 02 cc 	ld.w	r9,r6[716]
80015898:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
8001589a:	e0 6c 00 be 	mov	r12,190
8001589e:	f0 16 00 45 	mcall	r6[276]
800158a2:	18 98       	mov	r8,r12
800158a4:	ec f9 03 00 	ld.w	r9,r6[768]
800158a8:	b2 08       	st.h	r9[0x0],r8
800158aa:	c0 68       	rjmp	800158b6 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
800158ac:	fe cc 01 74 	sub	r12,pc,372
800158b0:	f0 16 00 01 	mcall	r6[4]
		return;
800158b4:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
800158b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800158ba:	00 00       	add	r0,r0
800158bc:	80 01       	ld.sh	r1,r0[0x0]
800158be:	55 f6       	stdsp	sp[0x17c],r6

800158c0 <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
800158c0:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800158c4:	1a 97       	mov	r7,sp
800158c6:	21 4d       	sub	sp,80
800158c8:	fe f6 06 2c 	ld.w	r6,pc[1580]
800158cc:	1e 26       	rsub	r6,pc
800158ce:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
800158d2:	ec f8 08 d0 	ld.w	r8,r6[2256]
800158d6:	90 08       	ld.sh	r8,r8[0x0]
800158d8:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
800158dc:	ec f8 08 cc 	ld.w	r8,r6[2252]
800158e0:	90 08       	ld.sh	r8,r8[0x0]
800158e2:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
800158e6:	e0 78 8b cd 	mov	r8,101325
800158ea:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
800158ee:	ec f8 00 48 	ld.w	r8,r6[72]
800158f2:	70 c8       	ld.w	r8,r8[0x30]
800158f4:	58 18       	cp.w	r8,1
800158f6:	c1 50       	breq	80015920 <get_pressure_data_slow+0x60>
800158f8:	c0 53       	brcs	80015902 <get_pressure_data_slow+0x42>
800158fa:	58 28       	cp.w	r8,2
800158fc:	c3 80       	breq	8001596c <get_pressure_data_slow+0xac>
800158fe:	e0 8f 02 e9 	bral	80015ed0 <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80015902:	ee cb 00 48 	sub	r11,r7,72
80015906:	30 08       	mov	r8,0
80015908:	37 79       	mov	r9,119
8001590a:	30 2a       	mov	r10,2
8001590c:	fe 7c 38 00 	mov	r12,-51200
80015910:	f0 16 00 35 	mcall	r6[212]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80015914:	ec f8 00 48 	ld.w	r8,r6[72]
80015918:	30 19       	mov	r9,1
8001591a:	91 c9       	st.w	r8[0x30],r9
			break;
8001591c:	e0 8f 02 da 	bral	80015ed0 <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80015920:	3f 68       	mov	r8,-10
80015922:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80015926:	ee cb 00 45 	sub	r11,r7,69
8001592a:	30 08       	mov	r8,0
8001592c:	37 79       	mov	r9,119
8001592e:	30 1a       	mov	r10,1
80015930:	fe 7c 38 00 	mov	r12,-51200
80015934:	f0 16 00 35 	mcall	r6[212]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80015938:	ec f8 00 48 	ld.w	r8,r6[72]
8001593c:	f0 cb ff fd 	sub	r11,r8,-3
80015940:	30 08       	mov	r8,0
80015942:	37 79       	mov	r9,119
80015944:	30 2a       	mov	r10,2
80015946:	fe 7c 38 00 	mov	r12,-51200
8001594a:	f0 16 00 5f 	mcall	r6[380]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
8001594e:	ee cb 00 4c 	sub	r11,r7,76
80015952:	30 08       	mov	r8,0
80015954:	37 79       	mov	r9,119
80015956:	30 2a       	mov	r10,2
80015958:	fe 7c 38 00 	mov	r12,-51200
8001595c:	f0 16 00 35 	mcall	r6[212]
			pressure_outputs.state=GET_PRESSURE;
80015960:	ec f8 00 48 	ld.w	r8,r6[72]
80015964:	30 29       	mov	r9,2
80015966:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80015968:	e0 8f 02 b4 	bral	80015ed0 <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
8001596c:	3f 68       	mov	r8,-10
8001596e:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80015972:	ee cb 00 45 	sub	r11,r7,69
80015976:	30 08       	mov	r8,0
80015978:	37 79       	mov	r9,119
8001597a:	30 1a       	mov	r10,1
8001597c:	fe 7c 38 00 	mov	r12,-51200
80015980:	f0 16 00 35 	mcall	r6[212]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
80015984:	30 08       	mov	r8,0
80015986:	37 79       	mov	r9,119
80015988:	30 3a       	mov	r10,3
8001598a:	ec fb 00 48 	ld.w	r11,r6[72]
8001598e:	fe 7c 38 00 	mov	r12,-51200
80015992:	f0 16 00 5f 	mcall	r6[380]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
80015996:	ec f8 00 48 	ld.w	r8,r6[72]
8001599a:	11 88       	ld.ub	r8,r8[0x0]
8001599c:	f0 09 15 10 	lsl	r9,r8,0x10
800159a0:	ec f8 00 48 	ld.w	r8,r6[72]
800159a4:	11 98       	ld.ub	r8,r8[0x1]
800159a6:	a9 68       	lsl	r8,0x8
800159a8:	10 49       	or	r9,r8
800159aa:	ec f8 00 48 	ld.w	r8,r6[72]
800159ae:	11 a8       	ld.ub	r8,r8[0x2]
800159b0:	f3 e8 10 08 	or	r8,r9,r8
800159b4:	a7 88       	lsr	r8,0x6
800159b6:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
800159ba:	ec f8 00 48 	ld.w	r8,r6[72]
800159be:	11 b8       	ld.ub	r8,r8[0x3]
800159c0:	f0 09 15 08 	lsl	r9,r8,0x8
800159c4:	ec f8 00 48 	ld.w	r8,r6[72]
800159c8:	11 c8       	ld.ub	r8,r8[0x4]
800159ca:	f3 e8 10 08 	or	r8,r9,r8
800159ce:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
800159d2:	ec f8 03 24 	ld.w	r8,r6[804]
800159d6:	90 08       	ld.sh	r8,r8[0x0]
800159d8:	5c 78       	castu.h	r8
800159da:	ee f9 ff c8 	ld.w	r9,r7[-56]
800159de:	10 19       	sub	r9,r8
800159e0:	ec f8 03 14 	ld.w	r8,r6[788]
800159e4:	90 08       	ld.sh	r8,r8[0x0]
800159e6:	5c 78       	castu.h	r8
800159e8:	f2 08 02 48 	mul	r8,r9,r8
800159ec:	10 9c       	mov	r12,r8
800159ee:	f0 16 00 1a 	mcall	r6[104]
800159f2:	30 08       	mov	r8,0
800159f4:	fc 19 40 e0 	movh	r9,0x40e0
800159f8:	f0 16 00 0c 	mcall	r6[48]
800159fc:	14 98       	mov	r8,r10
800159fe:	16 99       	mov	r9,r11
80015a00:	10 9a       	mov	r10,r8
80015a02:	12 9b       	mov	r11,r9
80015a04:	f0 16 00 14 	mcall	r6[80]
80015a08:	18 98       	mov	r8,r12
80015a0a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
80015a0e:	ec f8 02 cc 	ld.w	r8,r6[716]
80015a12:	90 08       	ld.sh	r8,r8[0x0]
80015a14:	10 9c       	mov	r12,r8
80015a16:	f0 16 00 1a 	mcall	r6[104]
80015a1a:	30 08       	mov	r8,0
80015a1c:	fc 19 40 a0 	movh	r9,0x40a0
80015a20:	f0 16 00 03 	mcall	r6[12]
80015a24:	14 98       	mov	r8,r10
80015a26:	16 99       	mov	r9,r11
80015a28:	10 92       	mov	r2,r8
80015a2a:	12 93       	mov	r3,r9
80015a2c:	ec f8 03 00 	ld.w	r8,r6[768]
80015a30:	90 08       	ld.sh	r8,r8[0x0]
80015a32:	10 99       	mov	r9,r8
80015a34:	ee f8 ff dc 	ld.w	r8,r7[-36]
80015a38:	f2 08 00 08 	add	r8,r9,r8
80015a3c:	10 9c       	mov	r12,r8
80015a3e:	f0 16 00 1a 	mcall	r6[104]
80015a42:	14 98       	mov	r8,r10
80015a44:	16 99       	mov	r9,r11
80015a46:	04 9a       	mov	r10,r2
80015a48:	06 9b       	mov	r11,r3
80015a4a:	f0 16 00 0c 	mcall	r6[48]
80015a4e:	14 98       	mov	r8,r10
80015a50:	16 99       	mov	r9,r11
80015a52:	10 9a       	mov	r10,r8
80015a54:	12 9b       	mov	r11,r9
80015a56:	f0 16 00 14 	mcall	r6[80]
80015a5a:	18 98       	mov	r8,r12
80015a5c:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
80015a60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80015a64:	ee f8 ff e0 	ld.w	r8,r7[-32]
80015a68:	f2 08 00 08 	add	r8,r9,r8
80015a6c:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
80015a70:	ee f8 ff d4 	ld.w	r8,r7[-44]
80015a74:	2f 88       	sub	r8,-8
80015a76:	10 9c       	mov	r12,r8
80015a78:	f0 16 00 1a 	mcall	r6[104]
80015a7c:	30 08       	mov	r8,0
80015a7e:	fc 19 40 30 	movh	r9,0x4030
80015a82:	f0 16 00 0c 	mcall	r6[48]
80015a86:	14 98       	mov	r8,r10
80015a88:	16 99       	mov	r9,r11
80015a8a:	10 9a       	mov	r10,r8
80015a8c:	12 9b       	mov	r11,r9
80015a8e:	f0 16 00 08 	mcall	r6[32]
80015a92:	18 99       	mov	r9,r12
80015a94:	ec f8 00 48 	ld.w	r8,r6[72]
80015a98:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
80015a9a:	ec f8 00 48 	ld.w	r8,r6[72]
80015a9e:	70 38       	ld.w	r8,r8[0xc]
80015aa0:	fc 1b 41 20 	movh	r11,0x4120
80015aa4:	10 9c       	mov	r12,r8
80015aa6:	f0 16 00 0a 	mcall	r6[40]
80015aaa:	18 98       	mov	r8,r12
80015aac:	10 99       	mov	r9,r8
80015aae:	ec f8 00 48 	ld.w	r8,r6[72]
80015ab2:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80015ab4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80015ab8:	f0 c8 0f a0 	sub	r8,r8,4000
80015abc:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
80015ac0:	ec f8 03 48 	ld.w	r8,r6[840]
80015ac4:	90 08       	ld.sh	r8,r8[0x0]
80015ac6:	10 99       	mov	r9,r8
80015ac8:	ee fa ff d8 	ld.w	r10,r7[-40]
80015acc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80015ad0:	f4 08 02 48 	mul	r8,r10,r8
80015ad4:	ad 48       	asr	r8,0xc
80015ad6:	f2 08 02 48 	mul	r8,r9,r8
80015ada:	ab 58       	asr	r8,0xb
80015adc:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
80015ae0:	ec f8 03 10 	ld.w	r8,r6[784]
80015ae4:	90 08       	ld.sh	r8,r8[0x0]
80015ae6:	10 99       	mov	r9,r8
80015ae8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80015aec:	f2 08 02 48 	mul	r8,r9,r8
80015af0:	ab 58       	asr	r8,0xb
80015af2:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
80015af6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80015afa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80015afe:	f2 08 00 08 	add	r8,r9,r8
80015b02:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
80015b06:	ec f8 03 38 	ld.w	r8,r6[824]
80015b0a:	90 08       	ld.sh	r8,r8[0x0]
80015b0c:	f0 09 15 02 	lsl	r9,r8,0x2
80015b10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015b14:	f2 08 00 08 	add	r8,r9,r8
80015b18:	a3 68       	lsl	r8,0x2
80015b1a:	2f e8       	sub	r8,-2
80015b1c:	f0 c9 ff fd 	sub	r9,r8,-3
80015b20:	58 08       	cp.w	r8,0
80015b22:	f2 08 17 50 	movlt	r8,r9
80015b26:	a3 48       	asr	r8,0x2
80015b28:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80015b2c:	ec f8 02 98 	ld.w	r8,r6[664]
80015b30:	90 08       	ld.sh	r8,r8[0x0]
80015b32:	10 99       	mov	r9,r8
80015b34:	ee f8 ff d8 	ld.w	r8,r7[-40]
80015b38:	f2 08 02 48 	mul	r8,r9,r8
80015b3c:	ad 58       	asr	r8,0xd
80015b3e:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
80015b42:	ec f8 03 2c 	ld.w	r8,r6[812]
80015b46:	90 08       	ld.sh	r8,r8[0x0]
80015b48:	10 99       	mov	r9,r8
80015b4a:	ee fa ff d8 	ld.w	r10,r7[-40]
80015b4e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80015b52:	f4 08 02 48 	mul	r8,r10,r8
80015b56:	ad 48       	asr	r8,0xc
80015b58:	f2 08 02 48 	mul	r8,r9,r8
80015b5c:	b1 48       	asr	r8,0x10
80015b5e:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
80015b62:	ee f9 ff dc 	ld.w	r9,r7[-36]
80015b66:	ee f8 ff e0 	ld.w	r8,r7[-32]
80015b6a:	f2 08 00 08 	add	r8,r9,r8
80015b6e:	2f e8       	sub	r8,-2
80015b70:	a3 48       	asr	r8,0x2
80015b72:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
80015b76:	ec f8 02 f4 	ld.w	r8,r6[756]
80015b7a:	90 08       	ld.sh	r8,r8[0x0]
80015b7c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80015b80:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015b84:	f0 c8 80 00 	sub	r8,r8,-32768
80015b88:	f2 08 02 48 	mul	r8,r9,r8
80015b8c:	af 98       	lsr	r8,0xf
80015b8e:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
80015b92:	ee f9 ff cc 	ld.w	r9,r7[-52]
80015b96:	ee f8 ff d0 	ld.w	r8,r7[-48]
80015b9a:	10 19       	sub	r9,r8
80015b9c:	e0 68 30 d4 	mov	r8,12500
80015ba0:	f2 08 02 48 	mul	r8,r9,r8
80015ba4:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80015ba8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015bac:	58 08       	cp.w	r8,0
80015bae:	c0 b5       	brlt	80015bc4 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
80015bb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015bb4:	a1 78       	lsl	r8,0x1
80015bb6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80015bba:	f0 09 0d 08 	divu	r8,r8,r9
80015bbe:	ef 48 ff e8 	st.w	r7[-24],r8
80015bc2:	c0 a8       	rjmp	80015bd6 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
80015bc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015bc8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80015bcc:	f0 09 0d 08 	divu	r8,r8,r9
80015bd0:	a1 78       	lsl	r8,0x1
80015bd2:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
80015bd6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015bda:	f0 09 14 08 	asr	r9,r8,0x8
80015bde:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015be2:	a9 48       	asr	r8,0x8
80015be4:	f2 08 02 48 	mul	r8,r9,r8
80015be8:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
80015bec:	ee f9 ff dc 	ld.w	r9,r7[-36]
80015bf0:	e0 68 0b de 	mov	r8,3038
80015bf4:	f2 08 02 48 	mul	r8,r9,r8
80015bf8:	b1 48       	asr	r8,0x10
80015bfa:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
80015bfe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015c02:	fe 78 e3 43 	mov	r8,-7357
80015c06:	f2 08 02 48 	mul	r8,r9,r8
80015c0a:	b1 48       	asr	r8,0x10
80015c0c:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
80015c10:	ee f9 ff dc 	ld.w	r9,r7[-36]
80015c14:	ee f8 ff e0 	ld.w	r8,r7[-32]
80015c18:	f2 08 00 08 	add	r8,r9,r8
80015c1c:	f0 c8 f1 31 	sub	r8,r8,-3791
80015c20:	a5 48       	asr	r8,0x4
80015c22:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015c26:	f2 08 00 08 	add	r8,r9,r8
80015c2a:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
80015c2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c32:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80015c36:	ec f8 00 48 	ld.w	r8,r6[72]
80015c3a:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80015c3c:	ec f8 00 48 	ld.w	r8,r6[72]
80015c40:	70 78       	ld.w	r8,r8[0x1c]
80015c42:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
80015c46:	ec f8 00 48 	ld.w	r8,r6[72]
80015c4a:	70 28       	ld.w	r8,r8[0x8]
80015c4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015c50:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80015c54:	12 9b       	mov	r11,r9
80015c56:	10 9c       	mov	r12,r8
80015c58:	f0 16 00 0a 	mcall	r6[40]
80015c5c:	18 98       	mov	r8,r12
80015c5e:	10 9c       	mov	r12,r8
80015c60:	f0 16 00 02 	mcall	r6[8]
80015c64:	e0 68 d1 24 	mov	r8,53540
80015c68:	ea 18 28 cb 	orh	r8,0x28cb
80015c6c:	e0 69 5b 96 	mov	r9,23446
80015c70:	ea 19 3f c8 	orh	r9,0x3fc8
80015c74:	f0 16 01 b0 	mcall	r6[1728]
80015c78:	14 98       	mov	r8,r10
80015c7a:	16 99       	mov	r9,r11
80015c7c:	30 0a       	mov	r10,0
80015c7e:	fc 1b 3f f0 	movh	r11,0x3ff0
80015c82:	f0 16 00 11 	mcall	r6[68]
80015c86:	14 98       	mov	r8,r10
80015c88:	16 99       	mov	r9,r11
80015c8a:	10 9a       	mov	r10,r8
80015c8c:	12 9b       	mov	r11,r9
80015c8e:	30 08       	mov	r8,0
80015c90:	e0 69 a5 40 	mov	r9,42304
80015c94:	ea 19 40 e5 	orh	r9,0x40e5
80015c98:	f0 16 00 03 	mcall	r6[12]
80015c9c:	14 98       	mov	r8,r10
80015c9e:	16 99       	mov	r9,r11
80015ca0:	10 92       	mov	r2,r8
80015ca2:	12 93       	mov	r3,r9
80015ca4:	ec f8 00 48 	ld.w	r8,r6[72]
80015ca8:	70 88       	ld.w	r8,r8[0x20]
80015caa:	10 9c       	mov	r12,r8
80015cac:	f0 16 00 02 	mcall	r6[8]
80015cb0:	14 98       	mov	r8,r10
80015cb2:	16 99       	mov	r9,r11
80015cb4:	04 9a       	mov	r10,r2
80015cb6:	06 9b       	mov	r11,r3
80015cb8:	f0 16 00 05 	mcall	r6[20]
80015cbc:	14 98       	mov	r8,r10
80015cbe:	16 99       	mov	r9,r11
80015cc0:	10 9a       	mov	r10,r8
80015cc2:	12 9b       	mov	r11,r9
80015cc4:	f0 16 00 08 	mcall	r6[32]
80015cc8:	18 98       	mov	r8,r12
80015cca:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
80015cce:	30 08       	mov	r8,0
80015cd0:	ef 48 ff bc 	st.w	r7[-68],r8
80015cd4:	c1 68       	rjmp	80015d00 <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
80015cd6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80015cda:	ee f8 ff bc 	ld.w	r8,r7[-68]
80015cde:	f0 ca ff ff 	sub	r10,r8,-1
80015ce2:	ec f8 00 48 	ld.w	r8,r6[72]
80015ce6:	2f ca       	sub	r10,-4
80015ce8:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80015cec:	ec f8 00 48 	ld.w	r8,r6[72]
80015cf0:	2f c9       	sub	r9,-4
80015cf2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
80015cf6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80015cfa:	2f f8       	sub	r8,-1
80015cfc:	ef 48 ff bc 	st.w	r7[-68],r8
80015d00:	ee f8 ff bc 	ld.w	r8,r7[-68]
80015d04:	58 18       	cp.w	r8,1
80015d06:	fe 9a ff e8 	brle	80015cd6 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
80015d0a:	ec f8 00 48 	ld.w	r8,r6[72]
80015d0e:	ee f9 ff c0 	ld.w	r9,r7[-64]
80015d12:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
80015d14:	ec f8 00 48 	ld.w	r8,r6[72]
80015d18:	70 6a       	ld.w	r10,r8[0x18]
80015d1a:	ec f8 00 48 	ld.w	r8,r6[72]
80015d1e:	70 59       	ld.w	r9,r8[0x14]
80015d20:	ec f8 00 48 	ld.w	r8,r6[72]
80015d24:	70 48       	ld.w	r8,r8[0x10]
80015d26:	12 9b       	mov	r11,r9
80015d28:	10 9c       	mov	r12,r8
80015d2a:	fe b0 fc 1a 	rcall	8001555e <median_filter_3x>
80015d2e:	18 98       	mov	r8,r12
80015d30:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80015d34:	ec f8 00 48 	ld.w	r8,r6[72]
80015d38:	70 78       	ld.w	r8,r8[0x1c]
80015d3a:	ee f9 ff c0 	ld.w	r9,r7[-64]
80015d3e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015d42:	10 9c       	mov	r12,r8
80015d44:	fe b0 fb f0 	rcall	80015524 <f_abs>
80015d48:	18 9a       	mov	r10,r12
80015d4a:	30 18       	mov	r8,1
80015d4c:	fc 19 41 70 	movh	r9,0x4170
80015d50:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d54:	e0 8c 00 03 	brvs	80015d5a <get_pressure_data_slow+0x49a>
80015d58:	c0 25       	brlt	80015d5c <get_pressure_data_slow+0x49c>
80015d5a:	30 08       	mov	r8,0
80015d5c:	5c 58       	castu.b	r8
80015d5e:	c3 40       	breq	80015dc6 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
80015d60:	ec f8 00 48 	ld.w	r8,r6[72]
80015d64:	70 78       	ld.w	r8,r8[0x1c]
80015d66:	10 9c       	mov	r12,r8
80015d68:	f0 16 00 02 	mcall	r6[8]
80015d6c:	e0 68 66 66 	mov	r8,26214
80015d70:	ea 18 66 66 	orh	r8,0x6666
80015d74:	e0 69 66 66 	mov	r9,26214
80015d78:	ea 19 3f ee 	orh	r9,0x3fee
80015d7c:	f0 16 00 03 	mcall	r6[12]
80015d80:	14 98       	mov	r8,r10
80015d82:	16 99       	mov	r9,r11
80015d84:	10 92       	mov	r2,r8
80015d86:	12 93       	mov	r3,r9
80015d88:	ee fc ff c0 	ld.w	r12,r7[-64]
80015d8c:	f0 16 00 02 	mcall	r6[8]
80015d90:	e0 68 99 a0 	mov	r8,39328
80015d94:	ea 18 99 99 	orh	r8,0x9999
80015d98:	e0 69 99 99 	mov	r9,39321
80015d9c:	ea 19 3f a9 	orh	r9,0x3fa9
80015da0:	f0 16 00 03 	mcall	r6[12]
80015da4:	14 98       	mov	r8,r10
80015da6:	16 99       	mov	r9,r11
80015da8:	04 9a       	mov	r10,r2
80015daa:	06 9b       	mov	r11,r3
80015dac:	f0 16 00 05 	mcall	r6[20]
80015db0:	14 98       	mov	r8,r10
80015db2:	16 99       	mov	r9,r11
80015db4:	10 9a       	mov	r10,r8
80015db6:	12 9b       	mov	r11,r9
80015db8:	f0 16 00 08 	mcall	r6[32]
80015dbc:	18 99       	mov	r9,r12
80015dbe:	ec f8 00 48 	ld.w	r8,r6[72]
80015dc2:	91 79       	st.w	r8[0x1c],r9
80015dc4:	c0 68       	rjmp	80015dd0 <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
80015dc6:	ec f8 00 48 	ld.w	r8,r6[72]
80015dca:	ee f9 ff c0 	ld.w	r9,r7[-64]
80015dce:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
80015dd0:	f0 16 00 29 	mcall	r6[164]
80015dd4:	18 99       	mov	r9,r12
80015dd6:	ec f8 00 48 	ld.w	r8,r6[72]
80015dda:	70 a8       	ld.w	r8,r8[0x28]
80015ddc:	f2 08 01 08 	sub	r8,r9,r8
80015de0:	10 9c       	mov	r12,r8
80015de2:	f0 16 00 51 	mcall	r6[324]
80015de6:	30 08       	mov	r8,0
80015de8:	e0 69 84 80 	mov	r9,33920
80015dec:	ea 19 41 2e 	orh	r9,0x412e
80015df0:	f0 16 00 0c 	mcall	r6[48]
80015df4:	14 98       	mov	r8,r10
80015df6:	16 99       	mov	r9,r11
80015df8:	10 9a       	mov	r10,r8
80015dfa:	12 9b       	mov	r11,r9
80015dfc:	f0 16 00 08 	mcall	r6[32]
80015e00:	18 98       	mov	r8,r12
80015e02:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
80015e06:	ec f8 00 48 	ld.w	r8,r6[72]
80015e0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015e0e:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
80015e10:	ec f8 00 48 	ld.w	r8,r6[72]
80015e14:	70 79       	ld.w	r9,r8[0x1c]
80015e16:	ee f8 ff c4 	ld.w	r8,r7[-60]
80015e1a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015e1e:	ee 18 80 00 	eorh	r8,0x8000
80015e22:	ee fb ff f8 	ld.w	r11,r7[-8]
80015e26:	10 9c       	mov	r12,r8
80015e28:	f0 16 00 0a 	mcall	r6[40]
80015e2c:	18 98       	mov	r8,r12
80015e2e:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
80015e32:	ee f8 ff c4 	ld.w	r8,r7[-60]
80015e36:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80015e3a:	ef 48 ff fc 	st.w	r7[-4],r8
80015e3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015e42:	5c 48       	abs	r8
80015e44:	ef 48 ff fc 	st.w	r7[-4],r8
80015e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015e4c:	59 48       	cp.w	r8,20
80015e4e:	e0 8a 00 05 	brle	80015e58 <get_pressure_data_slow+0x598>
80015e52:	30 08       	mov	r8,0
80015e54:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
80015e58:	ec f8 00 48 	ld.w	r8,r6[72]
80015e5c:	70 98       	ld.w	r8,r8[0x24]
80015e5e:	10 9c       	mov	r12,r8
80015e60:	f0 16 00 02 	mcall	r6[8]
80015e64:	e0 68 66 66 	mov	r8,26214
80015e68:	ea 18 66 66 	orh	r8,0x6666
80015e6c:	e0 69 66 66 	mov	r9,26214
80015e70:	ea 19 3f ee 	orh	r9,0x3fee
80015e74:	f0 16 00 03 	mcall	r6[12]
80015e78:	14 98       	mov	r8,r10
80015e7a:	16 99       	mov	r9,r11
80015e7c:	10 92       	mov	r2,r8
80015e7e:	12 93       	mov	r3,r9
80015e80:	ee fc ff c4 	ld.w	r12,r7[-60]
80015e84:	f0 16 00 02 	mcall	r6[8]
80015e88:	e0 68 99 a0 	mov	r8,39328
80015e8c:	ea 18 99 99 	orh	r8,0x9999
80015e90:	e0 69 99 99 	mov	r9,39321
80015e94:	ea 19 3f a9 	orh	r9,0x3fa9
80015e98:	f0 16 00 03 	mcall	r6[12]
80015e9c:	14 98       	mov	r8,r10
80015e9e:	16 99       	mov	r9,r11
80015ea0:	04 9a       	mov	r10,r2
80015ea2:	06 9b       	mov	r11,r3
80015ea4:	f0 16 00 05 	mcall	r6[20]
80015ea8:	14 98       	mov	r8,r10
80015eaa:	16 99       	mov	r9,r11
80015eac:	10 9a       	mov	r10,r8
80015eae:	12 9b       	mov	r11,r9
80015eb0:	f0 16 00 08 	mcall	r6[32]
80015eb4:	18 99       	mov	r9,r12
80015eb6:	ec f8 00 48 	ld.w	r8,r6[72]
80015eba:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
80015ebc:	f0 16 00 29 	mcall	r6[164]
80015ec0:	18 99       	mov	r9,r12
80015ec2:	ec f8 00 48 	ld.w	r8,r6[72]
80015ec6:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
80015ec8:	ec f8 00 48 	ld.w	r8,r6[72]
80015ecc:	30 09       	mov	r9,0
80015ece:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
80015ed0:	f0 16 00 29 	mcall	r6[164]
80015ed4:	18 99       	mov	r9,r12
80015ed6:	ec f8 00 48 	ld.w	r8,r6[72]
80015eda:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
80015edc:	ec f8 00 48 	ld.w	r8,r6[72]
80015ee0:	ee f9 ff b0 	ld.w	r9,r7[-80]
80015ee4:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
80015ee6:	ec f8 00 48 	ld.w	r8,r6[72]
}
80015eea:	10 9c       	mov	r12,r8
80015eec:	2e cd       	sub	sp,-80
80015eee:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80015ef2:	00 00       	add	r0,r0
80015ef4:	80 01       	ld.sh	r1,r0[0x0]
80015ef6:	57 50       	stdsp	sp[0x1d4],r0

80015ef8 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
80015ef8:	eb cd 40 c0 	pushm	r6-r7,lr
80015efc:	1a 97       	mov	r7,sp
80015efe:	20 1d       	sub	sp,4
80015f00:	48 d6       	lddpc	r6,80015f34 <newValidBarometer+0x3c>
80015f02:	1e 26       	rsub	r6,pc
80015f04:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
80015f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015f0c:	70 09       	ld.w	r9,r8[0x0]
80015f0e:	ec f8 00 48 	ld.w	r8,r6[72]
80015f12:	70 a8       	ld.w	r8,r8[0x28]
80015f14:	10 39       	cp.w	r9,r8
80015f16:	c0 92       	brcc	80015f28 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
80015f18:	ec f8 00 48 	ld.w	r8,r6[72]
80015f1c:	70 a9       	ld.w	r9,r8[0x28]
80015f1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015f22:	91 09       	st.w	r8[0x0],r9
		return true;
80015f24:	30 18       	mov	r8,1
80015f26:	c0 28       	rjmp	80015f2a <newValidBarometer+0x32>
	}else{
		return false;
80015f28:	30 08       	mov	r8,0
	}
	
80015f2a:	10 9c       	mov	r12,r8
80015f2c:	2f fd       	sub	sp,-4
80015f2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f32:	00 00       	add	r0,r0
80015f34:	80 01       	ld.sh	r1,r0[0x0]
80015f36:	5d 86       	*unknown*

80015f38 <init_hmc5883_slow>:
80015f38:	eb cd 40 c0 	pushm	r6-r7,lr
80015f3c:	1a 97       	mov	r7,sp
80015f3e:	48 a6       	lddpc	r6,80015f64 <init_hmc5883_slow+0x2c>
80015f40:	1e 26       	rsub	r6,pc
80015f42:	ec fb 08 c8 	ld.w	r11,r6[2248]
80015f46:	fe 7c 38 00 	mov	r12,-51200
80015f4a:	f0 16 00 70 	mcall	r6[448]
80015f4e:	30 08       	mov	r8,0
80015f50:	31 e9       	mov	r9,30
80015f52:	30 4a       	mov	r10,4
80015f54:	ec fb 08 c4 	ld.w	r11,r6[2244]
80015f58:	fe 7c 38 00 	mov	r12,-51200
80015f5c:	f0 16 00 35 	mcall	r6[212]
80015f60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f64:	80 01       	ld.sh	r1,r0[0x0]
80015f66:	5d c4       	*unknown*

80015f68 <get_compass_data_slow>:
80015f68:	eb cd 40 c0 	pushm	r6-r7,lr
80015f6c:	1a 97       	mov	r7,sp
80015f6e:	20 2d       	sub	sp,8
80015f70:	4a 76       	lddpc	r6,8001600c <get_compass_data_slow+0xa4>
80015f72:	1e 26       	rsub	r6,pc
80015f74:	30 38       	mov	r8,3
80015f76:	ef 68 ff fb 	st.b	r7[-5],r8
80015f7a:	ee cb 00 05 	sub	r11,r7,5
80015f7e:	30 08       	mov	r8,0
80015f80:	31 e9       	mov	r9,30
80015f82:	30 1a       	mov	r10,1
80015f84:	fe 7c 38 00 	mov	r12,-51200
80015f88:	f0 16 00 35 	mcall	r6[212]
80015f8c:	ec fb 02 0c 	ld.w	r11,r6[524]
80015f90:	30 08       	mov	r8,0
80015f92:	31 e9       	mov	r9,30
80015f94:	30 6a       	mov	r10,6
80015f96:	fe 7c 38 00 	mov	r12,-51200
80015f9a:	f0 16 00 5f 	mcall	r6[380]
80015f9e:	30 08       	mov	r8,0
80015fa0:	ef 48 ff fc 	st.w	r7[-4],r8
80015fa4:	c2 98       	rjmp	80015ff6 <get_compass_data_slow+0x8e>
80015fa6:	ee fb ff fc 	ld.w	r11,r7[-4]
80015faa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015fae:	a1 78       	lsl	r8,0x1
80015fb0:	ec f9 02 0c 	ld.w	r9,r6[524]
80015fb4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80015fb8:	5c 58       	castu.b	r8
80015fba:	a9 68       	lsl	r8,0x8
80015fbc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015fc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015fc4:	a1 78       	lsl	r8,0x1
80015fc6:	2f f8       	sub	r8,-1
80015fc8:	ec fa 02 0c 	ld.w	r10,r6[524]
80015fcc:	f4 08 07 08 	ld.ub	r8,r10[r8]
80015fd0:	5c 58       	castu.b	r8
80015fd2:	f2 08 00 08 	add	r8,r9,r8
80015fd6:	5c 88       	casts.h	r8
80015fd8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015fdc:	ec fa 02 0c 	ld.w	r10,r6[524]
80015fe0:	f6 c8 ff fe 	sub	r8,r11,-2
80015fe4:	a1 78       	lsl	r8,0x1
80015fe6:	f4 08 00 08 	add	r8,r10,r8
80015fea:	b0 19       	st.h	r8[0x2],r9
80015fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ff0:	2f f8       	sub	r8,-1
80015ff2:	ef 48 ff fc 	st.w	r7[-4],r8
80015ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ffa:	58 28       	cp.w	r8,2
80015ffc:	fe 9a ff d5 	brle	80015fa6 <get_compass_data_slow+0x3e>
80016000:	ec f8 02 0c 	ld.w	r8,r6[524]
80016004:	10 9c       	mov	r12,r8
80016006:	2f ed       	sub	sp,-8
80016008:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001600c:	80 01       	ld.sh	r1,r0[0x0]
8001600e:	5d f6       	*unknown*

80016010 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
80016010:	eb cd 40 c0 	pushm	r6-r7,lr
80016014:	1a 97       	mov	r7,sp
80016016:	49 a6       	lddpc	r6,8001607c <pdca_int_handler_dac+0x6c>
80016018:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
8001601a:	fc 78 00 00 	mov	r8,-196608
8001601e:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
80016022:	ec f8 04 cc 	ld.w	r8,r6[1228]
80016026:	70 08       	ld.w	r8,r8[0x0]
80016028:	58 08       	cp.w	r8,0
8001602a:	c0 81       	brne	8001603a <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
8001602c:	30 4c       	mov	r12,4
8001602e:	f0 16 00 7e 	mcall	r6[504]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016032:	30 4c       	mov	r12,4
80016034:	f0 16 00 98 	mcall	r6[608]
80016038:	c1 f8       	rjmp	80016076 <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
8001603a:	ec f8 02 80 	ld.w	r8,r6[640]
8001603e:	90 08       	ld.sh	r8,r8[0x0]
80016040:	5c 88       	casts.h	r8
80016042:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016046:	ec f8 01 8c 	ld.w	r8,r6[396]
8001604a:	90 08       	ld.sh	r8,r8[0x0]
8001604c:	5c 88       	casts.h	r8
8001604e:	5c 78       	castu.h	r8
80016050:	f2 08 01 08 	sub	r8,r9,r8
80016054:	10 99       	mov	r9,r8
80016056:	ec f8 03 5c 	ld.w	r8,r6[860]
8001605a:	70 0a       	ld.w	r10,r8[0x0]
8001605c:	ec f8 01 8c 	ld.w	r8,r6[396]
80016060:	90 08       	ld.sh	r8,r8[0x0]
80016062:	5c 88       	casts.h	r8
80016064:	5c 78       	castu.h	r8
80016066:	a1 78       	lsl	r8,0x1
80016068:	f4 08 00 08 	add	r8,r10,r8
8001606c:	12 9a       	mov	r10,r9
8001606e:	10 9b       	mov	r11,r8
80016070:	30 4c       	mov	r12,4
80016072:	f0 16 01 01 	mcall	r6[1028]
	}	   
		
}
80016076:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001607a:	d6 03       	rete
8001607c:	80 01       	ld.sh	r1,r0[0x0]
8001607e:	5e 9c       	retgt	r12

80016080 <init_pevc>:


void init_pevc(void)
{
80016080:	eb cd 40 c0 	pushm	r6-r7,lr
80016084:	1a 97       	mov	r7,sp
80016086:	48 c6       	lddpc	r6,800160b4 <init_pevc+0x34>
80016088:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
8001608a:	ec f8 03 94 	ld.w	r8,r6[916]
8001608e:	70 08       	ld.w	r8,r8[0x0]
80016090:	ec f9 08 c0 	ld.w	r9,r6[2240]
80016094:	31 0a       	mov	r10,16
80016096:	30 2b       	mov	r11,2
80016098:	10 9c       	mov	r12,r8
8001609a:	f0 16 01 a6 	mcall	r6[1688]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
8001609e:	ec f8 03 94 	ld.w	r8,r6[916]
800160a2:	70 08       	ld.w	r8,r8[0x0]
800160a4:	30 4a       	mov	r10,4
800160a6:	30 0b       	mov	r11,0
800160a8:	10 9c       	mov	r12,r8
800160aa:	f0 16 01 40 	mcall	r6[1280]
}
800160ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800160b2:	00 00       	add	r0,r0
800160b4:	80 01       	ld.sh	r1,r0[0x0]
800160b6:	5f 0c       	sreq	r12

800160b8 <init_gclk>:

void init_gclk(void)
{
800160b8:	eb cd 40 c0 	pushm	r6-r7,lr
800160bc:	1a 97       	mov	r7,sp
800160be:	48 76       	lddpc	r6,800160d8 <init_gclk+0x20>
800160c0:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
800160c2:	30 a9       	mov	r9,10
800160c4:	30 1a       	mov	r10,1
800160c6:	30 0b       	mov	r11,0
800160c8:	30 7c       	mov	r12,7
800160ca:	f0 16 02 00 	mcall	r6[2048]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
800160ce:	30 7c       	mov	r12,7
800160d0:	f0 16 01 f6 	mcall	r6[2008]
}
800160d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800160d8:	80 01       	ld.sh	r1,r0[0x0]
800160da:	5f 44       	srge	r4
800160dc:	65 72       	ld.w	r2,r2[0x5c]
800160de:	72 6f       	ld.w	pc,r9[0x18]
800160e0:	72 20       	ld.w	r0,r9[0x8]
800160e2:	63 6f       	ld.w	pc,r1[0x58]
800160e4:	6e 66       	ld.w	r6,r7[0x18]
800160e6:	69 67       	ld.w	r7,r4[0x58]
800160e8:	75 72       	ld.w	r2,r10[0x5c]
800160ea:	69 6e       	ld.w	lr,r4[0x58]
800160ec:	67 20       	ld.w	r0,r3[0x48]
800160ee:	44 41       	lddsp	r1,sp[0x110]
800160f0:	43 00       	lddsp	r0,sp[0xc0]
800160f2:	00 00       	add	r0,r0
800160f4:	65 72       	ld.w	r2,r2[0x5c]
800160f6:	72 6f       	ld.w	pc,r9[0x18]
800160f8:	72 20       	ld.w	r0,r9[0x8]
800160fa:	63 6f       	ld.w	pc,r1[0x58]
800160fc:	6e 66       	ld.w	r6,r7[0x18]
800160fe:	69 67       	ld.w	r7,r4[0x58]
80016100:	75 72       	ld.w	r2,r10[0x5c]
80016102:	69 6e       	ld.w	lr,r4[0x58]
80016104:	67 20       	ld.w	r0,r3[0x48]
80016106:	44 41       	lddsp	r1,sp[0x110]
80016108:	43 20       	lddsp	r0,sp[0xc8]
8001610a:	63 68       	ld.w	r8,r1[0x58]
8001610c:	61 6e       	ld.w	lr,r0[0x58]
8001610e:	6e 65       	ld.w	r5,r7[0x18]
80016110:	6c 00       	ld.w	r0,r6[0x0]

80016112 <Init_DAC>:



void Init_DAC(int trigger_mode) {
80016112:	eb cd 40 c0 	pushm	r6-r7,lr
80016116:	1a 97       	mov	r7,sp
80016118:	20 6d       	sub	sp,24
8001611a:	4b 36       	lddpc	r6,800161e4 <Init_DAC+0xd2>
8001611c:	1e 26       	rsub	r6,pc
8001611e:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
80016122:	ec f8 08 bc 	ld.w	r8,r6[2236]
80016126:	ee ca 00 0c 	sub	r10,r7,12
8001612a:	10 9b       	mov	r11,r8
8001612c:	f6 e8 00 00 	ld.d	r8,r11[0]
80016130:	f4 e9 00 00 	st.d	r10[0],r8
80016134:	76 28       	ld.w	r8,r11[0x8]
80016136:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80016138:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001613c:	5c 58       	castu.b	r8
8001613e:	30 19       	mov	r9,1
80016140:	ef 69 ff ef 	st.b	r7[-17],r9
80016144:	ef 68 ff f0 	st.b	r7[-16],r8
80016148:	30 08       	mov	r8,0
8001614a:	ef 68 ff f1 	st.b	r7[-15],r8
8001614e:	30 08       	mov	r8,0
80016150:	ef 68 ff f2 	st.b	r7[-14],r8
80016154:	30 08       	mov	r8,0
80016156:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
8001615a:	30 4b       	mov	r11,4
8001615c:	ec fc 08 b8 	ld.w	r12,r6[2232]
80016160:	f0 16 00 92 	mcall	r6[584]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80016164:	ec f8 02 64 	ld.w	r8,r6[612]
80016168:	70 08       	ld.w	r8,r8[0x0]
8001616a:	ee c9 00 0c 	sub	r9,r7,12
8001616e:	e0 6a 24 00 	mov	r10,9216
80016172:	ea 1a 00 f4 	orh	r10,0xf4
80016176:	12 9b       	mov	r11,r9
80016178:	10 9c       	mov	r12,r8
8001617a:	f0 16 01 73 	mcall	r6[1484]
8001617e:	18 98       	mov	r8,r12
80016180:	58 08       	cp.w	r8,0
80016182:	c0 61       	brne	8001618e <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80016184:	fe cc 00 a8 	sub	r12,pc,168
80016188:	f0 16 00 01 	mcall	r6[4]
				while (1);
8001618c:	c0 08       	rjmp	8001618c <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
8001618e:	ec f8 03 a0 	ld.w	r8,r6[928]
80016192:	11 88       	ld.ub	r8,r8[0x0]
80016194:	10 9b       	mov	r11,r8
80016196:	ec f8 02 64 	ld.w	r8,r6[612]
8001619a:	70 08       	ld.w	r8,r8[0x0]
8001619c:	ee ca 00 11 	sub	r10,r7,17
800161a0:	e0 69 4b 40 	mov	r9,19264
800161a4:	ea 19 00 4c 	orh	r9,0x4c
800161a8:	10 9c       	mov	r12,r8
800161aa:	f0 16 01 b3 	mcall	r6[1740]
800161ae:	18 98       	mov	r8,r12
800161b0:	58 08       	cp.w	r8,0
800161b2:	c0 61       	brne	800161be <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
800161b4:	fe cc 00 c0 	sub	r12,pc,192
800161b8:	f0 16 00 01 	mcall	r6[4]
				while (1);
800161bc:	c0 08       	rjmp	800161bc <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
800161be:	ec f8 03 a0 	ld.w	r8,r6[928]
800161c2:	11 88       	ld.ub	r8,r8[0x0]
800161c4:	10 99       	mov	r9,r8
800161c6:	ec f8 02 64 	ld.w	r8,r6[612]
800161ca:	70 08       	ld.w	r8,r8[0x0]
800161cc:	e0 6a 24 00 	mov	r10,9216
800161d0:	ea 1a 00 f4 	orh	r10,0xf4
800161d4:	12 9b       	mov	r11,r9
800161d6:	10 9c       	mov	r12,r8
800161d8:	f0 16 01 4c 	mcall	r6[1328]
                       dac_channel_audio,
                       FOSC0);


}
800161dc:	2f ad       	sub	sp,-24
800161de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800161e2:	00 00       	add	r0,r0
800161e4:	80 01       	ld.sh	r1,r0[0x0]
800161e6:	5f a0       	srle	r0

800161e8 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
800161e8:	eb cd 40 c0 	pushm	r6-r7,lr
800161ec:	1a 97       	mov	r7,sp
800161ee:	20 4d       	sub	sp,16
800161f0:	4a a6       	lddpc	r6,80016298 <DAC_load_buffer+0xb0>
800161f2:	1e 26       	rsub	r6,pc
800161f4:	ef 4c ff fc 	st.w	r7[-4],r12
800161f8:	ef 4b ff f8 	st.w	r7[-8],r11
800161fc:	ef 4a ff f4 	st.w	r7[-12],r10
80016200:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
80016204:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016208:	ec f8 03 5c 	ld.w	r8,r6[860]
8001620c:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
8001620e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016212:	5c 88       	casts.h	r8
80016214:	ec f9 01 8c 	ld.w	r9,r6[396]
80016218:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
8001621a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001621e:	5c 88       	casts.h	r8
80016220:	ec f9 02 80 	ld.w	r9,r6[640]
80016224:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
80016226:	ec f8 01 8c 	ld.w	r8,r6[396]
8001622a:	90 08       	ld.sh	r8,r8[0x0]
8001622c:	5c 88       	casts.h	r8
8001622e:	5c 78       	castu.h	r8
80016230:	a1 78       	lsl	r8,0x1
80016232:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016236:	10 09       	add	r9,r8
80016238:	ec f8 03 58 	ld.w	r8,r6[856]
8001623c:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
8001623e:	ec f8 02 80 	ld.w	r8,r6[640]
80016242:	90 08       	ld.sh	r8,r8[0x0]
80016244:	5c 88       	casts.h	r8
80016246:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001624a:	ec f8 01 8c 	ld.w	r8,r6[396]
8001624e:	90 08       	ld.sh	r8,r8[0x0]
80016250:	5c 88       	casts.h	r8
80016252:	5c 78       	castu.h	r8
80016254:	f2 08 01 08 	sub	r8,r9,r8
80016258:	10 99       	mov	r9,r8
8001625a:	ec f8 03 58 	ld.w	r8,r6[856]
8001625e:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
80016260:	f0 16 01 d6 	mcall	r6[1880]
  // Initialize Generic Clock
  init_gclk();
80016264:	f0 16 01 c9 	mcall	r6[1828]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80016268:	ec fb 03 58 	ld.w	r11,r6[856]
8001626c:	30 4c       	mov	r12,4
8001626e:	f0 16 00 75 	mcall	r6[468]

  autoplay=repeat;
80016272:	ec f8 04 cc 	ld.w	r8,r6[1228]
80016276:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001627a:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
8001627c:	30 0a       	mov	r10,0
8001627e:	e0 6b 00 80 	mov	r11,128
80016282:	fe cc 02 72 	sub	r12,pc,626
80016286:	f0 16 00 3a 	mcall	r6[232]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001628a:	30 4c       	mov	r12,4
8001628c:	f0 16 00 b6 	mcall	r6[728]
  //}  
} 
80016290:	2f cd       	sub	sp,-16
80016292:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016296:	00 00       	add	r0,r0
80016298:	80 01       	ld.sh	r1,r0[0x0]
8001629a:	60 76       	ld.w	r6,r0[0x1c]

8001629c <DAC_play>:

void DAC_play() {
8001629c:	eb cd 40 c0 	pushm	r6-r7,lr
800162a0:	1a 97       	mov	r7,sp
800162a2:	49 56       	lddpc	r6,800162f4 <DAC_play+0x58>
800162a4:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
800162a6:	30 4c       	mov	r12,4
800162a8:	f0 16 00 7e 	mcall	r6[504]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
800162ac:	ec f8 02 80 	ld.w	r8,r6[640]
800162b0:	90 08       	ld.sh	r8,r8[0x0]
800162b2:	5c 88       	casts.h	r8
800162b4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800162b8:	ec f8 01 8c 	ld.w	r8,r6[396]
800162bc:	90 08       	ld.sh	r8,r8[0x0]
800162be:	5c 88       	casts.h	r8
800162c0:	5c 78       	castu.h	r8
800162c2:	f2 08 01 08 	sub	r8,r9,r8
800162c6:	10 99       	mov	r9,r8
800162c8:	ec f8 03 5c 	ld.w	r8,r6[860]
800162cc:	70 0a       	ld.w	r10,r8[0x0]
800162ce:	ec f8 01 8c 	ld.w	r8,r6[396]
800162d2:	90 08       	ld.sh	r8,r8[0x0]
800162d4:	5c 88       	casts.h	r8
800162d6:	5c 78       	castu.h	r8
800162d8:	a1 78       	lsl	r8,0x1
800162da:	f4 08 00 08 	add	r8,r10,r8
800162de:	12 9a       	mov	r10,r9
800162e0:	10 9b       	mov	r11,r8
800162e2:	30 4c       	mov	r12,4
800162e4:	f0 16 01 01 	mcall	r6[1028]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
800162e8:	30 4c       	mov	r12,4
800162ea:	f0 16 00 90 	mcall	r6[576]

  
}
800162ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800162f2:	00 00       	add	r0,r0
800162f4:	80 01       	ld.sh	r1,r0[0x0]
800162f6:	61 28       	ld.w	r8,r0[0x48]

800162f8 <DAC_pause>:

void DAC_pause(void) {
800162f8:	eb cd 40 80 	pushm	r7,lr
800162fc:	1a 97       	mov	r7,sp

}
800162fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80016302 <DAC_resume>:

void DAC_resume(void) {
80016302:	eb cd 40 80 	pushm	r7,lr
80016306:	1a 97       	mov	r7,sp

}
80016308:	e3 cd 80 80 	ldm	sp++,r7,pc

8001630c <DAC_is_finished>:

int  DAC_is_finished(void) {
8001630c:	eb cd 40 80 	pushm	r7,lr
80016310:	1a 97       	mov	r7,sp
	return 0;
80016312:	30 08       	mov	r8,0
}
80016314:	10 9c       	mov	r12,r8
80016316:	e3 cd 80 80 	ldm	sp++,r7,pc

8001631a <DAC_set_value>:

void DAC_set_value(int32_t output) {
8001631a:	eb cd 40 c0 	pushm	r6-r7,lr
8001631e:	1a 97       	mov	r7,sp
80016320:	20 1d       	sub	sp,4
80016322:	48 76       	lddpc	r6,8001633c <DAC_set_value+0x22>
80016324:	1e 26       	rsub	r6,pc
80016326:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
8001632a:	ec f8 02 64 	ld.w	r8,r6[612]
8001632e:	70 08       	ld.w	r8,r8[0x0]
80016330:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016334:	91 b9       	st.w	r8[0x2c],r9
}
80016336:	2f fd       	sub	sp,-4
80016338:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001633c:	80 01       	ld.sh	r1,r0[0x0]
8001633e:	61 a8       	ld.w	r8,r0[0x68]

80016340 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80016340:	eb cd 40 80 	pushm	r7,lr
80016344:	1a 97       	mov	r7,sp
80016346:	20 1d       	sub	sp,4
80016348:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8001634c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016350:	e6 18 00 01 	andh	r8,0x1,COH
80016354:	5f 08       	sreq	r8
80016356:	5c 58       	castu.b	r8
}
80016358:	10 9c       	mov	r12,r8
8001635a:	2f fd       	sub	sp,-4
8001635c:	e3 cd 80 80 	ldm	sp++,r7,pc

80016360 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80016360:	eb cd 40 80 	pushm	r7,lr
80016364:	1a 97       	mov	r7,sp
80016366:	20 1d       	sub	sp,4
80016368:	18 98       	mov	r8,r12
8001636a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8001636e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016372:	58 38       	cp.w	r8,3
80016374:	c1 20       	breq	80016398 <osc_get_rate+0x38>
80016376:	e0 89 00 07 	brgt	80016384 <osc_get_rate+0x24>
8001637a:	58 08       	cp.w	r8,0
8001637c:	c0 90       	breq	8001638e <osc_get_rate+0x2e>
8001637e:	58 28       	cp.w	r8,2
80016380:	c0 f0       	breq	8001639e <osc_get_rate+0x3e>
80016382:	c1 b8       	rjmp	800163b8 <osc_get_rate+0x58>
80016384:	58 48       	cp.w	r8,4
80016386:	c1 10       	breq	800163a8 <osc_get_rate+0x48>
80016388:	58 58       	cp.w	r8,5
8001638a:	c1 40       	breq	800163b2 <osc_get_rate+0x52>
8001638c:	c1 68       	rjmp	800163b8 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8001638e:	e0 68 24 00 	mov	r8,9216
80016392:	ea 18 00 f4 	orh	r8,0xf4
80016396:	c1 28       	rjmp	800163ba <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80016398:	e0 68 80 00 	mov	r8,32768
8001639c:	c0 f8       	rjmp	800163ba <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8001639e:	e0 68 12 00 	mov	r8,4608
800163a2:	ea 18 00 7a 	orh	r8,0x7a
800163a6:	c0 a8       	rjmp	800163ba <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800163a8:	e0 68 0e 00 	mov	r8,3584
800163ac:	ea 18 07 27 	orh	r8,0x727
800163b0:	c0 58       	rjmp	800163ba <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800163b2:	e0 78 c1 38 	mov	r8,115000
800163b6:	c0 28       	rjmp	800163ba <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
800163b8:	30 08       	mov	r8,0
	}
}
800163ba:	10 9c       	mov	r12,r8
800163bc:	2f fd       	sub	sp,-4
800163be:	e3 cd 80 80 	ldm	sp++,r7,pc

800163c2 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800163c2:	eb cd 40 c0 	pushm	r6-r7,lr
800163c6:	1a 97       	mov	r7,sp
800163c8:	48 56       	lddpc	r6,800163dc <sysclk_get_main_hz+0x1a>
800163ca:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800163cc:	30 0c       	mov	r12,0
800163ce:	cc 9f       	rcall	80016360 <osc_get_rate>
800163d0:	18 98       	mov	r8,r12
800163d2:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800163d4:	10 9c       	mov	r12,r8
800163d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800163da:	00 00       	add	r0,r0
800163dc:	80 01       	ld.sh	r1,r0[0x0]
800163de:	62 4e       	ld.w	lr,r1[0x10]

800163e0 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
800163e0:	eb cd 40 c0 	pushm	r6-r7,lr
800163e4:	1a 97       	mov	r7,sp
800163e6:	48 46       	lddpc	r6,800163f4 <sysclk_get_pba_hz+0x14>
800163e8:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
800163ea:	ce cf       	rcall	800163c2 <sysclk_get_main_hz>
800163ec:	18 98       	mov	r8,r12
}
800163ee:	10 9c       	mov	r12,r8
800163f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800163f4:	80 01       	ld.sh	r1,r0[0x0]
800163f6:	62 6c       	ld.w	r12,r1[0x18]
800163f8:	21 00       	sub	r0,16

800163fa <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
800163fa:	eb cd 40 c0 	pushm	r6-r7,lr
800163fe:	1a 97       	mov	r7,sp
80016400:	4a 26       	lddpc	r6,80016488 <pdca_int_handler_i2c0+0x8e>
80016402:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80016404:	fe 78 38 00 	mov	r8,-51200
80016408:	30 29       	mov	r9,2
8001640a:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
8001640c:	30 2c       	mov	r12,2
8001640e:	f0 16 00 7e 	mcall	r6[504]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80016412:	30 2c       	mov	r12,2
80016414:	f0 16 00 98 	mcall	r6[608]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80016418:	ec f8 02 7c 	ld.w	r8,r6[636]
8001641c:	11 88       	ld.ub	r8,r8[0x0]
8001641e:	5c 58       	castu.b	r8
80016420:	10 99       	mov	r9,r8
80016422:	ec fa 01 38 	ld.w	r10,r6[312]
80016426:	12 98       	mov	r8,r9
80016428:	a3 68       	lsl	r8,0x2
8001642a:	12 08       	add	r8,r9
8001642c:	a3 78       	lsl	r8,0x3
8001642e:	f4 08 00 08 	add	r8,r10,r8
80016432:	f0 c9 ff e0 	sub	r9,r8,-32
80016436:	30 08       	mov	r8,0
80016438:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
8001643a:	ec f8 02 7c 	ld.w	r8,r6[636]
8001643e:	11 88       	ld.ub	r8,r8[0x0]
80016440:	5c 58       	castu.b	r8
80016442:	10 99       	mov	r9,r8
80016444:	ec fa 01 38 	ld.w	r10,r6[312]
80016448:	12 98       	mov	r8,r9
8001644a:	a3 68       	lsl	r8,0x2
8001644c:	12 08       	add	r8,r9
8001644e:	a3 78       	lsl	r8,0x3
80016450:	f4 08 00 08 	add	r8,r10,r8
80016454:	2d c8       	sub	r8,-36
80016456:	70 08       	ld.w	r8,r8[0x0]
80016458:	58 08       	cp.w	r8,0
8001645a:	c1 00       	breq	8001647a <pdca_int_handler_i2c0+0x80>
8001645c:	ec f8 02 7c 	ld.w	r8,r6[636]
80016460:	11 88       	ld.ub	r8,r8[0x0]
80016462:	5c 58       	castu.b	r8
80016464:	10 99       	mov	r9,r8
80016466:	ec fa 01 38 	ld.w	r10,r6[312]
8001646a:	12 98       	mov	r8,r9
8001646c:	a3 68       	lsl	r8,0x2
8001646e:	12 08       	add	r8,r9
80016470:	a3 78       	lsl	r8,0x3
80016472:	f4 08 00 08 	add	r8,r10,r8
80016476:	2d c8       	sub	r8,-36
80016478:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
8001647a:	fe cc 00 82 	sub	r12,pc,130
8001647e:	f0 16 00 01 	mcall	r6[4]
}
80016482:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016486:	d6 03       	rete
80016488:	80 01       	ld.sh	r1,r0[0x0]
8001648a:	62 86       	ld.w	r6,r1[0x20]

8001648c <init_i2c>:




int init_i2c(unsigned char i2c_device) {
8001648c:	eb cd 40 c0 	pushm	r6-r7,lr
80016490:	1a 97       	mov	r7,sp
80016492:	20 4d       	sub	sp,16
80016494:	4c b6       	lddpc	r6,800165c0 <init_i2c+0x134>
80016496:	1e 26       	rsub	r6,pc
80016498:	18 98       	mov	r8,r12
8001649a:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
8001649e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800164a2:	58 08       	cp.w	r8,0
800164a4:	c0 40       	breq	800164ac <init_i2c+0x20>
800164a6:	58 18       	cp.w	r8,1
800164a8:	c1 50       	breq	800164d2 <init_i2c+0x46>
800164aa:	c2 d8       	rjmp	80016504 <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
800164ac:	fe 78 38 00 	mov	r8,-51200
800164b0:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
800164b4:	30 0a       	mov	r10,0
800164b6:	36 2b       	mov	r11,98
800164b8:	fe cc 00 be 	sub	r12,pc,190
800164bc:	f0 16 00 3a 	mcall	r6[232]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
800164c0:	30 0b       	mov	r11,0
800164c2:	34 3c       	mov	r12,67
800164c4:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
800164c8:	30 0b       	mov	r11,0
800164ca:	34 2c       	mov	r12,66
800164cc:	f0 16 00 3e 	mcall	r6[248]

	break;
800164d0:	c1 c8       	rjmp	80016508 <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
800164d2:	fe 78 3c 00 	mov	r8,-50176
800164d6:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
800164da:	30 0a       	mov	r10,0
800164dc:	36 3b       	mov	r11,99
800164de:	fe cc 00 e4 	sub	r12,pc,228
800164e2:	f0 16 00 3a 	mcall	r6[232]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
800164e6:	30 0b       	mov	r11,0
800164e8:	34 5c       	mov	r12,69
800164ea:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
800164ee:	30 0b       	mov	r11,0
800164f0:	34 4c       	mov	r12,68
800164f2:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
800164f6:	34 5c       	mov	r12,69
800164f8:	f0 16 00 f7 	mcall	r6[988]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
800164fc:	34 4c       	mov	r12,68
800164fe:	f0 16 00 f7 	mcall	r6[988]
	break;
80016502:	c0 38       	rjmp	80016508 <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80016504:	3f f8       	mov	r8,-1
80016506:	c5 98       	rjmp	800165b8 <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016508:	30 08       	mov	r8,0
8001650a:	ef 48 ff f4 	st.w	r7[-12],r8
8001650e:	c1 b8       	rjmp	80016544 <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80016510:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80016514:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016518:	ec fa 01 38 	ld.w	r10,r6[312]
8001651c:	12 98       	mov	r8,r9
8001651e:	a3 68       	lsl	r8,0x2
80016520:	12 08       	add	r8,r9
80016522:	a3 78       	lsl	r8,0x3
80016524:	e0 69 01 90 	mov	r9,400
80016528:	f6 09 02 49 	mul	r9,r11,r9
8001652c:	12 08       	add	r8,r9
8001652e:	f4 08 00 08 	add	r8,r10,r8
80016532:	f0 c9 ff e0 	sub	r9,r8,-32
80016536:	3f f8       	mov	r8,-1
80016538:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
8001653a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001653e:	2f f8       	sub	r8,-1
80016540:	ef 48 ff f4 	st.w	r7[-12],r8
80016544:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016548:	58 98       	cp.w	r8,9
8001654a:	fe 9a ff e3 	brle	80016510 <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8001654e:	e1 b8 00 00 	mfsr	r8,0x0
80016552:	10 9c       	mov	r12,r8
80016554:	cf 6e       	rcall	80016340 <cpu_irq_is_enabled_flags>
80016556:	18 98       	mov	r8,r12
80016558:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8001655c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016560:	30 08       	mov	r8,0
80016562:	f0 09 18 00 	cp.b	r9,r8
80016566:	c0 20       	breq	8001656a <init_i2c+0xde>
		cpu_irq_disable ();
80016568:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8001656a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001656e:	3f f9       	mov	r9,-1
80016570:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016576:	30 19       	mov	r9,1
80016578:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8001657a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001657e:	e0 69 00 80 	mov	r9,128
80016582:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80016584:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016588:	30 08       	mov	r8,0
8001658a:	f0 09 18 00 	cp.b	r9,r8
8001658e:	c0 20       	breq	80016592 <init_i2c+0x106>
		cpu_irq_enable ();
80016590:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016592:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016596:	3f f9       	mov	r9,-1
80016598:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
8001659a:	c2 3f       	rcall	800163e0 <sysclk_get_pba_hz>
8001659c:	18 98       	mov	r8,r12
8001659e:	10 9a       	mov	r10,r8
800165a0:	e0 7b 86 a0 	mov	r11,100000
800165a4:	ee fc ff f8 	ld.w	r12,r7[-8]
800165a8:	f0 16 01 2f 	mcall	r6[1212]
800165ac:	18 98       	mov	r8,r12
800165ae:	5b 88       	cp.w	r8,-8
800165b0:	c0 31       	brne	800165b6 <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
800165b2:	3f 88       	mov	r8,-8
800165b4:	c0 28       	rjmp	800165b8 <init_i2c+0x12c>
	}
	return STATUS_OK;				
800165b6:	30 08       	mov	r8,0

}
800165b8:	10 9c       	mov	r12,r8
800165ba:	2f cd       	sub	sp,-16
800165bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800165c0:	80 01       	ld.sh	r1,r0[0x0]
800165c2:	63 1a       	ld.w	r10,r1[0x44]

800165c4 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
800165c4:	eb cd 40 c0 	pushm	r6-r7,lr
800165c8:	1a 97       	mov	r7,sp
800165ca:	20 3d       	sub	sp,12
800165cc:	4a 26       	lddpc	r6,80016654 <i2c_reset+0x90>
800165ce:	1e 26       	rsub	r6,pc
800165d0:	18 98       	mov	r8,r12
800165d2:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
800165d6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800165da:	58 08       	cp.w	r8,0
800165dc:	c0 40       	breq	800165e4 <i2c_reset+0x20>
800165de:	58 18       	cp.w	r8,1
800165e0:	c0 70       	breq	800165ee <i2c_reset+0x2a>
800165e2:	c0 b8       	rjmp	800165f8 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
800165e4:	fe 78 38 00 	mov	r8,-51200
800165e8:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800165ec:	c0 a8       	rjmp	80016600 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
800165ee:	fe 78 3c 00 	mov	r8,-50176
800165f2:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
800165f6:	c0 58       	rjmp	80016600 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
800165f8:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
800165fc:	10 9c       	mov	r12,r8
800165fe:	c2 78       	rjmp	8001664c <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016600:	e1 b8 00 00 	mfsr	r8,0x0
80016604:	10 9c       	mov	r12,r8
80016606:	c9 de       	rcall	80016340 <cpu_irq_is_enabled_flags>
80016608:	18 98       	mov	r8,r12
8001660a:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8001660e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016612:	30 08       	mov	r8,0
80016614:	f0 09 18 00 	cp.b	r9,r8
80016618:	c0 20       	breq	8001661c <i2c_reset+0x58>
		cpu_irq_disable ();
8001661a:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8001661c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016620:	3f f9       	mov	r9,-1
80016622:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016624:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016628:	30 19       	mov	r9,1
8001662a:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8001662c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016630:	e0 69 00 80 	mov	r9,128
80016634:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80016636:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001663a:	30 08       	mov	r8,0
8001663c:	f0 09 18 00 	cp.b	r9,r8
80016640:	c0 20       	breq	80016644 <i2c_reset+0x80>
		cpu_irq_enable ();
80016642:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016648:	3f f9       	mov	r9,-1
8001664a:	91 b9       	st.w	r8[0x2c],r9
}
8001664c:	2f dd       	sub	sp,-12
8001664e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016652:	00 00       	add	r0,r0
80016654:	80 01       	ld.sh	r1,r0[0x0]
80016656:	64 52       	ld.w	r2,r2[0x14]

80016658 <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016658:	eb cd 40 c0 	pushm	r6-r7,lr
8001665c:	1a 97       	mov	r7,sp
8001665e:	20 3d       	sub	sp,12
80016660:	4b f6       	lddpc	r6,8001675c <i2c_add_request+0x104>
80016662:	1e 26       	rsub	r6,pc
80016664:	18 98       	mov	r8,r12
80016666:	ef 4b ff f4 	st.w	r7[-12],r11
8001666a:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
8001666e:	30 08       	mov	r8,0
80016670:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
80016674:	30 08       	mov	r8,0
80016676:	ef 48 ff fc 	st.w	r7[-4],r8
8001667a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001667e:	58 98       	cp.w	r8,9
80016680:	e0 89 00 1b 	brgt	800166b6 <i2c_add_request+0x5e>
80016684:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016688:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001668c:	ec fa 01 38 	ld.w	r10,r6[312]
80016690:	12 98       	mov	r8,r9
80016692:	a3 68       	lsl	r8,0x2
80016694:	12 08       	add	r8,r9
80016696:	a3 78       	lsl	r8,0x3
80016698:	e0 69 01 90 	mov	r9,400
8001669c:	f6 09 02 49 	mul	r9,r11,r9
800166a0:	12 08       	add	r8,r9
800166a2:	f4 08 00 08 	add	r8,r10,r8
800166a6:	2e 08       	sub	r8,-32
800166a8:	11 98       	ld.ub	r8,r8[0x1]
800166aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166ae:	2f f8       	sub	r8,-1
800166b0:	ef 48 ff fc 	st.w	r7[-4],r8
800166b4:	ce 3b       	rjmp	8001667a <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
800166b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166ba:	58 98       	cp.w	r8,9
800166bc:	e0 89 00 45 	brgt	80016746 <i2c_add_request+0xee>
		new_event->schedule_slot=i;
800166c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166c4:	5c 58       	castu.b	r8
800166c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800166ca:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
800166ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800166d2:	30 08       	mov	r8,0
800166d4:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
800166d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800166dc:	30 18       	mov	r8,1
800166de:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
800166e2:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800166e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800166ea:	ec fa 01 38 	ld.w	r10,r6[312]
800166ee:	12 98       	mov	r8,r9
800166f0:	a3 68       	lsl	r8,0x2
800166f2:	12 08       	add	r8,r9
800166f4:	a3 78       	lsl	r8,0x3
800166f6:	e0 69 01 90 	mov	r9,400
800166fa:	f6 09 02 49 	mul	r9,r11,r9
800166fe:	12 08       	add	r8,r9
80016700:	f4 08 00 09 	add	r9,r10,r8
80016704:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016708:	12 9a       	mov	r10,r9
8001670a:	10 9b       	mov	r11,r8
8001670c:	f4 c8 00 00 	sub	r8,r10,0
80016710:	f6 c9 00 00 	sub	r9,r11,0
80016714:	72 0c       	ld.w	r12,r9[0x0]
80016716:	91 0c       	st.w	r8[0x0],r12
80016718:	72 1c       	ld.w	r12,r9[0x4]
8001671a:	91 1c       	st.w	r8[0x4],r12
8001671c:	72 2c       	ld.w	r12,r9[0x8]
8001671e:	91 2c       	st.w	r8[0x8],r12
80016720:	72 39       	ld.w	r9,r9[0xc]
80016722:	91 39       	st.w	r8[0xc],r9
80016724:	f4 c8 ff f0 	sub	r8,r10,-16
80016728:	f6 c9 ff f0 	sub	r9,r11,-16
8001672c:	72 0c       	ld.w	r12,r9[0x0]
8001672e:	91 0c       	st.w	r8[0x0],r12
80016730:	72 1c       	ld.w	r12,r9[0x4]
80016732:	91 1c       	st.w	r8[0x4],r12
80016734:	72 2c       	ld.w	r12,r9[0x8]
80016736:	91 2c       	st.w	r8[0x8],r12
80016738:	72 39       	ld.w	r9,r9[0xc]
8001673a:	91 39       	st.w	r8[0xc],r9
8001673c:	f6 e8 00 20 	ld.d	r8,r11[32]
80016740:	f4 e9 00 20 	st.d	r10[32],r8
80016744:	c0 48       	rjmp	8001674c <i2c_add_request+0xf4>
	} else i=-1;
80016746:	3f f8       	mov	r8,-1
80016748:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
8001674c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016750:	5c 58       	castu.b	r8
}
80016752:	10 9c       	mov	r12,r8
80016754:	2f dd       	sub	sp,-12
80016756:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001675a:	00 00       	add	r0,r0
8001675c:	80 01       	ld.sh	r1,r0[0x0]
8001675e:	64 e6       	ld.w	r6,r2[0x38]

80016760 <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016760:	eb cd 40 c0 	pushm	r6-r7,lr
80016764:	1a 97       	mov	r7,sp
80016766:	20 3d       	sub	sp,12
80016768:	4a a6       	lddpc	r6,80016810 <i2c_change_request+0xb0>
8001676a:	1e 26       	rsub	r6,pc
8001676c:	18 98       	mov	r8,r12
8001676e:	ef 4b ff f4 	st.w	r7[-12],r11
80016772:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
80016776:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001677a:	f1 38 00 18 	ld.ub	r8,r8[24]
8001677e:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
80016782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016786:	58 08       	cp.w	r8,0
80016788:	c4 15       	brlt	8001680a <i2c_change_request+0xaa>
8001678a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001678e:	58 98       	cp.w	r8,9
80016790:	e0 89 00 3d 	brgt	8001680a <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
80016794:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016798:	30 08       	mov	r8,0
8001679a:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
8001679e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800167a2:	30 18       	mov	r8,1
800167a4:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
800167a8:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800167ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800167b0:	ec fa 01 38 	ld.w	r10,r6[312]
800167b4:	12 98       	mov	r8,r9
800167b6:	a3 68       	lsl	r8,0x2
800167b8:	12 08       	add	r8,r9
800167ba:	a3 78       	lsl	r8,0x3
800167bc:	e0 69 01 90 	mov	r9,400
800167c0:	f6 09 02 49 	mul	r9,r11,r9
800167c4:	12 08       	add	r8,r9
800167c6:	f4 08 00 09 	add	r9,r10,r8
800167ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800167ce:	12 9a       	mov	r10,r9
800167d0:	10 9b       	mov	r11,r8
800167d2:	f4 c8 00 00 	sub	r8,r10,0
800167d6:	f6 c9 00 00 	sub	r9,r11,0
800167da:	72 0c       	ld.w	r12,r9[0x0]
800167dc:	91 0c       	st.w	r8[0x0],r12
800167de:	72 1c       	ld.w	r12,r9[0x4]
800167e0:	91 1c       	st.w	r8[0x4],r12
800167e2:	72 2c       	ld.w	r12,r9[0x8]
800167e4:	91 2c       	st.w	r8[0x8],r12
800167e6:	72 39       	ld.w	r9,r9[0xc]
800167e8:	91 39       	st.w	r8[0xc],r9
800167ea:	f4 c8 ff f0 	sub	r8,r10,-16
800167ee:	f6 c9 ff f0 	sub	r9,r11,-16
800167f2:	72 0c       	ld.w	r12,r9[0x0]
800167f4:	91 0c       	st.w	r8[0x0],r12
800167f6:	72 1c       	ld.w	r12,r9[0x4]
800167f8:	91 1c       	st.w	r8[0x4],r12
800167fa:	72 2c       	ld.w	r12,r9[0x8]
800167fc:	91 2c       	st.w	r8[0x8],r12
800167fe:	72 39       	ld.w	r9,r9[0xc]
80016800:	91 39       	st.w	r8[0xc],r9
80016802:	f6 e8 00 20 	ld.d	r8,r11[32]
80016806:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
8001680a:	2f dd       	sub	sp,-12
8001680c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016810:	80 01       	ld.sh	r1,r0[0x0]
80016812:	65 ee       	ld.w	lr,r2[0x78]
80016814:	77 72       	ld.w	r2,r11[0x5c]
80016816:	00 00       	add	r0,r0
80016818:	77 00       	ld.w	r0,r11[0x40]

8001681a <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
8001681a:	eb cd 40 c0 	pushm	r6-r7,lr
8001681e:	1a 97       	mov	r7,sp
80016820:	20 4d       	sub	sp,16
80016822:	fe f6 02 32 	ld.w	r6,pc[562]
80016826:	1e 26       	rsub	r6,pc
80016828:	18 99       	mov	r9,r12
8001682a:	16 98       	mov	r8,r11
8001682c:	ef 69 ff f4 	st.b	r7[-12],r9
80016830:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
80016834:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80016838:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001683c:	12 98       	mov	r8,r9
8001683e:	a3 68       	lsl	r8,0x2
80016840:	12 08       	add	r8,r9
80016842:	a3 78       	lsl	r8,0x3
80016844:	e0 69 01 90 	mov	r9,400
80016848:	f4 09 02 49 	mul	r9,r10,r9
8001684c:	f0 09 00 09 	add	r9,r8,r9
80016850:	ec f8 01 38 	ld.w	r8,r6[312]
80016854:	f2 08 00 08 	add	r8,r9,r8
80016858:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
8001685c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016860:	58 08       	cp.w	r8,0
80016862:	c0 40       	breq	8001686a <i2c_trigger_request+0x50>
80016864:	58 18       	cp.w	r8,1
80016866:	c5 90       	breq	80016918 <i2c_trigger_request+0xfe>
80016868:	c5 d8       	rjmp	80016922 <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
8001686a:	fe 78 38 00 	mov	r8,-51200
8001686e:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016876:	30 19       	mov	r9,1
80016878:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8001687a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001687e:	e0 69 00 80 	mov	r9,128
80016882:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80016884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016888:	30 29       	mov	r9,2
8001688a:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
8001688c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016890:	11 c8       	ld.ub	r8,r8[0x4]
80016892:	58 18       	cp.w	r8,1
80016894:	c1 b0       	breq	800168ca <i2c_trigger_request+0xb0>
80016896:	58 28       	cp.w	r8,2
80016898:	c0 30       	breq	8001689e <i2c_trigger_request+0x84>
8001689a:	58 08       	cp.w	r8,0
8001689c:	c3 71       	brne	8001690a <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
8001689e:	ec f8 01 54 	ld.w	r8,r6[340]
800168a2:	30 69       	mov	r9,6
800168a4:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
800168a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168aa:	70 49       	ld.w	r9,r8[0x10]
800168ac:	ec f8 01 54 	ld.w	r8,r6[340]
800168b0:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
800168b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168b6:	70 59       	ld.w	r9,r8[0x14]
800168b8:	ec f8 01 54 	ld.w	r8,r6[340]
800168bc:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
800168be:	ec fb 01 54 	ld.w	r11,r6[340]
800168c2:	30 2c       	mov	r12,2
800168c4:	f0 16 00 75 	mcall	r6[468]
			break;
800168c8:	c2 18       	rjmp	8001690a <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
800168ca:	ec f8 01 54 	ld.w	r8,r6[340]
800168ce:	31 19       	mov	r9,17
800168d0:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
800168d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168d6:	70 29       	ld.w	r9,r8[0x8]
800168d8:	ec f8 01 54 	ld.w	r8,r6[340]
800168dc:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
800168de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168e2:	70 39       	ld.w	r9,r8[0xc]
800168e4:	ec f8 01 54 	ld.w	r8,r6[340]
800168e8:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
800168ea:	ec fb 01 54 	ld.w	r11,r6[340]
800168ee:	30 2c       	mov	r12,2
800168f0:	f0 16 00 75 	mcall	r6[468]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
800168f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168f8:	70 39       	ld.w	r9,r8[0xc]
800168fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168fe:	70 28       	ld.w	r8,r8[0x8]
80016900:	12 9a       	mov	r10,r9
80016902:	10 9b       	mov	r11,r8
80016904:	30 2c       	mov	r12,2
80016906:	f0 16 00 b7 	mcall	r6[732]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
8001690a:	30 2c       	mov	r12,2
8001690c:	f0 16 00 b6 	mcall	r6[728]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
80016910:	30 2c       	mov	r12,2
80016912:	f0 16 02 1d 	mcall	r6[2164]
		
		
		break;
80016916:	c0 98       	rjmp	80016928 <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
80016918:	fe 78 3c 00 	mov	r8,-50176
8001691c:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016920:	c0 48       	rjmp	80016928 <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
80016922:	e0 68 00 ff 	mov	r8,255
80016926:	c9 38       	rjmp	80016a4c <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
80016928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001692c:	11 c8       	ld.ub	r8,r8[0x4]
8001692e:	58 18       	cp.w	r8,1
80016930:	c4 40       	breq	800169b8 <i2c_trigger_request+0x19e>
80016932:	58 28       	cp.w	r8,2
80016934:	c1 50       	breq	8001695e <i2c_trigger_request+0x144>
80016936:	58 08       	cp.w	r8,0
80016938:	c6 51       	brne	80016a02 <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001693a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001693e:	11 88       	ld.ub	r8,r8[0x0]
80016940:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
80016942:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80016944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016948:	70 58       	ld.w	r8,r8[0x14]
8001694a:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001694c:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80016950:	10 99       	mov	r9,r8
80016952:	e8 19 a0 00 	orl	r9,0xa000
80016956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001695a:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
8001695c:	c5 38       	rjmp	80016a02 <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
8001695e:	fe cc 01 4a 	sub	r12,pc,330
80016962:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80016966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001696a:	11 88       	ld.ub	r8,r8[0x0]
8001696c:	a1 78       	lsl	r8,0x1
8001696e:	ea 18 00 01 	orh	r8,0x1
80016972:	e8 18 a0 00 	orl	r8,0xa000
80016976:	10 99       	mov	r9,r8
80016978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001697c:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001697e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016982:	11 88       	ld.ub	r8,r8[0x0]
80016984:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
80016986:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80016988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001698c:	70 58       	ld.w	r8,r8[0x14]
8001698e:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80016990:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80016994:	10 99       	mov	r9,r8
80016996:	e8 19 a0 00 	orl	r9,0xa000
8001699a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001699e:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
800169a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800169a4:	11 d8       	ld.ub	r8,r8[0x5]
800169a6:	10 99       	mov	r9,r8
800169a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800169ac:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
800169ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800169b2:	30 19       	mov	r9,1
800169b4:	91 09       	st.w	r8[0x0],r9
			
			break;	
800169b6:	c2 68       	rjmp	80016a02 <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
800169b8:	fe cc 01 a0 	sub	r12,pc,416
800169bc:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800169c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800169c4:	11 88       	ld.ub	r8,r8[0x0]
800169c6:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800169c8:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800169ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800169ce:	70 38       	ld.w	r8,r8[0xc]
800169d0:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800169d2:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800169d6:	10 99       	mov	r9,r8
800169d8:	e8 19 a0 00 	orl	r9,0xa000
800169dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800169e0:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800169e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800169e6:	11 88       	ld.ub	r8,r8[0x0]
800169e8:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800169ea:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800169ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800169f0:	70 38       	ld.w	r8,r8[0xc]
800169f2:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800169f4:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800169f8:	10 99       	mov	r9,r8
800169fa:	ad b9       	sbr	r9,0xd
800169fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016a00:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
80016a02:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80016a06:	ec fa 02 7c 	ld.w	r10,r6[636]
80016a0a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016a0e:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
80016a12:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80016a16:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80016a1a:	ec fa 01 38 	ld.w	r10,r6[312]
80016a1e:	12 98       	mov	r8,r9
80016a20:	a3 68       	lsl	r8,0x2
80016a22:	12 08       	add	r8,r9
80016a24:	a3 78       	lsl	r8,0x3
80016a26:	e0 69 01 90 	mov	r9,400
80016a2a:	f6 09 02 49 	mul	r9,r11,r9
80016a2e:	12 08       	add	r8,r9
80016a30:	f4 08 00 08 	add	r8,r10,r8
80016a34:	f0 c9 ff e0 	sub	r9,r8,-32
80016a38:	30 18       	mov	r8,1
80016a3a:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016a40:	30 19       	mov	r9,1
80016a42:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
80016a44:	30 2c       	mov	r12,2
80016a46:	f0 16 00 90 	mcall	r6[576]
	return 0;
80016a4a:	30 08       	mov	r8,0
}
80016a4c:	10 9c       	mov	r12,r8
80016a4e:	2f cd       	sub	sp,-16
80016a50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a54:	80 01       	ld.sh	r1,r0[0x0]
80016a56:	66 aa       	ld.w	r10,r3[0x28]

80016a58 <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
80016a58:	eb cd 40 80 	pushm	r7,lr
80016a5c:	1a 97       	mov	r7,sp
80016a5e:	20 2d       	sub	sp,8
80016a60:	18 99       	mov	r9,r12
80016a62:	16 98       	mov	r8,r11
80016a64:	ef 69 ff fc 	st.b	r7[-4],r9
80016a68:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
80016a6c:	2f ed       	sub	sp,-8
80016a6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a72 <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
80016a72:	eb cd 40 80 	pushm	r7,lr
80016a76:	1a 97       	mov	r7,sp
80016a78:	20 2d       	sub	sp,8
80016a7a:	18 99       	mov	r9,r12
80016a7c:	16 98       	mov	r8,r11
80016a7e:	ef 69 ff fc 	st.b	r7[-4],r9
80016a82:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
80016a86:	30 08       	mov	r8,0
}
80016a88:	10 9c       	mov	r12,r8
80016a8a:	2f ed       	sub	sp,-8
80016a8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a90 <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
80016a90:	eb cd 40 80 	pushm	r7,lr
80016a94:	1a 97       	mov	r7,sp
80016a96:	20 2d       	sub	sp,8
80016a98:	18 99       	mov	r9,r12
80016a9a:	16 98       	mov	r8,r11
80016a9c:	ef 69 ff fc 	st.b	r7[-4],r9
80016aa0:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
80016aa4:	30 08       	mov	r8,0
}
80016aa6:	10 9c       	mov	r12,r8
80016aa8:	2f ed       	sub	sp,-8
80016aaa:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80016ab0 <init_itg3200>:
} gyro_config;

gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;

void init_itg3200(void) {
80016ab0:	eb cd 40 c0 	pushm	r6-r7,lr
80016ab4:	1a 97       	mov	r7,sp
80016ab6:	4b c6       	lddpc	r6,80016ba4 <init_itg3200+0xf4>
80016ab8:	1e 26       	rsub	r6,pc
	default_configuration.conf_start_reg_address=CONFIG_REG_ADDRESS;
80016aba:	ec f9 01 40 	ld.w	r9,r6[320]
80016abe:	31 58       	mov	r8,21
80016ac0:	b2 88       	st.b	r9[0x0],r8

	default_configuration.sample_div=4; //output frequency after filtering: 1khz/8khz /(sample_div +1)
80016ac2:	ec f9 01 40 	ld.w	r9,r6[320]
80016ac6:	30 48       	mov	r8,4
80016ac8:	b2 98       	st.b	r9[0x1],r8
	default_configuration.DLPF=DLPF_42HZ;
80016aca:	ec f9 01 40 	ld.w	r9,r6[320]
80016ace:	30 38       	mov	r8,3
80016ad0:	b2 a8       	st.b	r9[0x2],r8
	default_configuration.interrupts=0;
80016ad2:	ec f9 01 40 	ld.w	r9,r6[320]
80016ad6:	30 08       	mov	r8,0
80016ad8:	b2 b8       	st.b	r9[0x3],r8

	gyro_event.callback=0;
80016ada:	ec f8 00 7c 	ld.w	r8,r6[124]
80016ade:	30 09       	mov	r9,0
80016ae0:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80016ae2:	ec f8 00 7c 	ld.w	r8,r6[124]
80016ae6:	30 59       	mov	r9,5
80016ae8:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80016aea:	ec f9 00 7c 	ld.w	r9,r6[124]
80016aee:	3f f8       	mov	r8,-1
80016af0:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ITG3200_SLAVE_ADDRESS;
80016af4:	ec f9 00 7c 	ld.w	r9,r6[124]
80016af8:	36 88       	mov	r8,104
80016afa:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80016afc:	ec f9 00 7c 	ld.w	r9,r6[124]
80016b00:	30 18       	mov	r8,1
80016b02:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&gyro_outputs;
80016b06:	ec f9 02 08 	ld.w	r9,r6[520]
80016b0a:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b0e:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
80016b10:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b14:	30 89       	mov	r9,8
80016b16:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80016b18:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b1c:	ec f9 01 40 	ld.w	r9,r6[320]
80016b20:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=4;
80016b22:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b26:	30 49       	mov	r9,4
80016b28:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=100000;
80016b2a:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b2e:	e0 79 86 a0 	mov	r9,100000
80016b32:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80016b34:	ec fb 00 7c 	ld.w	r11,r6[124]
80016b38:	30 0c       	mov	r12,0
80016b3a:	f0 16 01 10 	mcall	r6[1088]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016b3e:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b42:	f1 38 00 24 	ld.ub	r8,r8[36]
80016b46:	10 9b       	mov	r11,r8
80016b48:	30 0c       	mov	r12,0
80016b4a:	f0 16 00 60 	mcall	r6[384]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80016b4e:	ec f9 00 7c 	ld.w	r9,r6[124]
80016b52:	30 28       	mov	r8,2
80016b54:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80016b58:	ec f9 00 7c 	ld.w	r9,r6[124]
80016b5c:	31 b8       	mov	r8,27
80016b5e:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.write_data=&read_preamble;
80016b62:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b66:	ec f9 07 a4 	ld.w	r9,r6[1956]
80016b6a:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=1;
80016b6c:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b70:	30 19       	mov	r9,1
80016b72:	91 49       	st.w	r8[0x10],r9
	
	gyro_event.config.read_data=&gyro_outputs;
80016b74:	ec f9 02 08 	ld.w	r9,r6[520]
80016b78:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b7c:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
80016b7e:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b82:	30 89       	mov	r9,8
80016b84:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80016b86:	ec fb 00 7c 	ld.w	r11,r6[124]
80016b8a:	30 0c       	mov	r12,0
80016b8c:	f0 16 01 11 	mcall	r6[1092]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016b90:	ec f8 00 7c 	ld.w	r8,r6[124]
80016b94:	f1 38 00 24 	ld.ub	r8,r8[36]
80016b98:	10 9b       	mov	r11,r8
80016b9a:	30 0c       	mov	r12,0
80016b9c:	f0 16 00 60 	mcall	r6[384]
	/**/
}
80016ba0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ba4:	80 01       	ld.sh	r1,r0[0x0]
80016ba6:	69 3c       	ld.w	r12,r4[0x4c]

80016ba8 <reconfigure_gyro>:

void reconfigure_gyro(void) {
80016ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80016bac:	1a 97       	mov	r7,sp
80016bae:	48 76       	lddpc	r6,80016bc8 <reconfigure_gyro+0x20>
80016bb0:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016bb2:	ec f8 00 7c 	ld.w	r8,r6[124]
80016bb6:	f1 38 00 24 	ld.ub	r8,r8[36]
80016bba:	10 9b       	mov	r11,r8
80016bbc:	30 0c       	mov	r12,0
80016bbe:	f0 16 00 60 	mcall	r6[384]
}
80016bc2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016bc6:	00 00       	add	r0,r0
80016bc8:	80 01       	ld.sh	r1,r0[0x0]
80016bca:	6a 34       	ld.w	r4,r5[0xc]

80016bcc <init_itg3200_slow>:

void init_itg3200_slow(void) {
80016bcc:	eb cd 40 c0 	pushm	r6-r7,lr
80016bd0:	1a 97       	mov	r7,sp
80016bd2:	48 a6       	lddpc	r6,80016bf8 <init_itg3200_slow+0x2c>
80016bd4:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016bd6:	ec fb 08 b4 	ld.w	r11,r6[2228]
80016bda:	fe 7c 38 00 	mov	r12,-51200
80016bde:	f0 16 00 70 	mcall	r6[448]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
80016be2:	30 08       	mov	r8,0
80016be4:	36 89       	mov	r9,104
80016be6:	30 4a       	mov	r10,4
80016be8:	ec fb 01 40 	ld.w	r11,r6[320]
80016bec:	fe 7c 38 00 	mov	r12,-51200
80016bf0:	f0 16 00 35 	mcall	r6[212]
}
80016bf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016bf8:	80 01       	ld.sh	r1,r0[0x0]
80016bfa:	6a 58       	ld.w	r8,r5[0x14]

80016bfc <get_gyro_data>:

gyro_data* get_gyro_data(void) {
80016bfc:	eb cd 40 c0 	pushm	r6-r7,lr
80016c00:	1a 97       	mov	r7,sp
80016c02:	48 86       	lddpc	r6,80016c20 <get_gyro_data+0x24>
80016c04:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016c06:	ec f8 00 7c 	ld.w	r8,r6[124]
80016c0a:	f1 38 00 24 	ld.ub	r8,r8[36]
80016c0e:	10 9b       	mov	r11,r8
80016c10:	30 0c       	mov	r12,0
80016c12:	f0 16 00 60 	mcall	r6[384]
	return &gyro_outputs;
80016c16:	ec f8 02 08 	ld.w	r8,r6[520]
}
80016c1a:	10 9c       	mov	r12,r8
80016c1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c20:	80 01       	ld.sh	r1,r0[0x0]
80016c22:	6a 88       	ld.w	r8,r5[0x20]

80016c24 <get_gyro_data_slow>:

gyro_data* get_gyro_data_slow(void) {
80016c24:	eb cd 40 c0 	pushm	r6-r7,lr
80016c28:	1a 97       	mov	r7,sp
80016c2a:	49 16       	lddpc	r6,80016c6c <get_gyro_data_slow+0x48>
80016c2c:	1e 26       	rsub	r6,pc
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80016c2e:	ec f9 00 7c 	ld.w	r9,r6[124]
80016c32:	31 b8       	mov	r8,27
80016c34:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
80016c38:	ec f8 00 7c 	ld.w	r8,r6[124]
80016c3c:	f0 cb ff f7 	sub	r11,r8,-9
80016c40:	30 08       	mov	r8,0
80016c42:	36 89       	mov	r9,104
80016c44:	30 1a       	mov	r10,1
80016c46:	fe 7c 38 00 	mov	r12,-51200
80016c4a:	f0 16 00 35 	mcall	r6[212]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
80016c4e:	ec fb 02 08 	ld.w	r11,r6[520]
80016c52:	30 08       	mov	r8,0
80016c54:	36 89       	mov	r9,104
80016c56:	30 8a       	mov	r10,8
80016c58:	fe 7c 38 00 	mov	r12,-51200
80016c5c:	f0 16 00 5f 	mcall	r6[380]
	
	
	return &gyro_outputs;
80016c60:	ec f8 02 08 	ld.w	r8,r6[520]
80016c64:	10 9c       	mov	r12,r8
80016c66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c6a:	00 00       	add	r0,r0
80016c6c:	80 01       	ld.sh	r1,r0[0x0]
80016c6e:	6a b0       	ld.w	r0,r5[0x2c]

80016c70 <LED_Read_Display>:
80016c70:	eb cd 40 c0 	pushm	r6-r7,lr
80016c74:	1a 97       	mov	r7,sp
80016c76:	48 56       	lddpc	r6,80016c88 <LED_Read_Display+0x18>
80016c78:	1e 26       	rsub	r6,pc
80016c7a:	ec f8 00 f4 	ld.w	r8,r6[244]
80016c7e:	70 08       	ld.w	r8,r8[0x0]
80016c80:	10 9c       	mov	r12,r8
80016c82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c86:	00 00       	add	r0,r0
80016c88:	80 01       	ld.sh	r1,r0[0x0]
80016c8a:	6a fc       	ld.w	r12,r5[0x3c]

80016c8c <LED_Display>:
80016c8c:	eb cd 40 c0 	pushm	r6-r7,lr
80016c90:	1a 97       	mov	r7,sp
80016c92:	20 3d       	sub	sp,12
80016c94:	4a 96       	lddpc	r6,80016d38 <LED_Display+0xac>
80016c96:	1e 26       	rsub	r6,pc
80016c98:	ef 4c ff f4 	st.w	r7[-12],r12
80016c9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016ca0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80016ca4:	ef 48 ff f4 	st.w	r7[-12],r8
80016ca8:	ec f8 00 f4 	ld.w	r8,r6[244]
80016cac:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016cb0:	91 09       	st.w	r8[0x0],r9
80016cb2:	ec f8 01 b0 	ld.w	r8,r6[432]
80016cb6:	ef 48 ff f8 	st.w	r7[-8],r8
80016cba:	c3 58       	rjmp	80016d24 <LED_Display+0x98>
80016cbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cc0:	70 08       	ld.w	r8,r8[0x0]
80016cc2:	a9 78       	lsl	r8,0x9
80016cc4:	e0 28 e0 00 	sub	r8,57344
80016cc8:	ef 48 ff fc 	st.w	r7[-4],r8
80016ccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016cd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80016cd4:	5c 58       	castu.b	r8
80016cd6:	c0 90       	breq	80016ce8 <LED_Display+0x5c>
80016cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cdc:	70 19       	ld.w	r9,r8[0x4]
80016cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ce2:	f1 49 00 58 	st.w	r8[88],r9
80016ce6:	c0 88       	rjmp	80016cf6 <LED_Display+0x6a>
80016ce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cec:	70 19       	ld.w	r9,r8[0x4]
80016cee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016cf2:	f1 49 00 54 	st.w	r8[84],r9
80016cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cfa:	70 19       	ld.w	r9,r8[0x4]
80016cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d00:	f1 49 00 44 	st.w	r8[68],r9
80016d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d08:	70 19       	ld.w	r9,r8[0x4]
80016d0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d0e:	91 19       	st.w	r8[0x4],r9
80016d10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016d14:	a1 98       	lsr	r8,0x1
80016d16:	ef 48 ff f4 	st.w	r7[-12],r8
80016d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d1e:	2f 08       	sub	r8,-16
80016d20:	ef 48 ff f8 	st.w	r7[-8],r8
80016d24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016d28:	ec f8 01 b0 	ld.w	r8,r6[432]
80016d2c:	2e 08       	sub	r8,-32
80016d2e:	10 39       	cp.w	r9,r8
80016d30:	cc 63       	brcs	80016cbc <LED_Display+0x30>
80016d32:	2f dd       	sub	sp,-12
80016d34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d38:	80 01       	ld.sh	r1,r0[0x0]
80016d3a:	6b 1a       	ld.w	r10,r5[0x44]

80016d3c <LED_Read_Display_Mask>:
80016d3c:	eb cd 40 c0 	pushm	r6-r7,lr
80016d40:	1a 97       	mov	r7,sp
80016d42:	20 1d       	sub	sp,4
80016d44:	48 86       	lddpc	r6,80016d64 <LED_Read_Display_Mask+0x28>
80016d46:	1e 26       	rsub	r6,pc
80016d48:	ef 4c ff fc 	st.w	r7[-4],r12
80016d4c:	ec f8 00 f4 	ld.w	r8,r6[244]
80016d50:	70 09       	ld.w	r9,r8[0x0]
80016d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d56:	f3 e8 00 08 	and	r8,r9,r8
80016d5a:	10 9c       	mov	r12,r8
80016d5c:	2f fd       	sub	sp,-4
80016d5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d62:	00 00       	add	r0,r0
80016d64:	80 01       	ld.sh	r1,r0[0x0]
80016d66:	6b ca       	ld.w	r10,r5[0x70]

80016d68 <LED_Display_Mask>:
80016d68:	eb cd 40 c0 	pushm	r6-r7,lr
80016d6c:	1a 97       	mov	r7,sp
80016d6e:	20 5d       	sub	sp,20
80016d70:	4b f6       	lddpc	r6,80016e6c <LED_Display_Mask+0x104>
80016d72:	1e 26       	rsub	r6,pc
80016d74:	ef 4c ff f0 	st.w	r7[-16],r12
80016d78:	ef 4b ff ec 	st.w	r7[-20],r11
80016d7c:	ec f8 01 b0 	ld.w	r8,r6[432]
80016d80:	21 08       	sub	r8,16
80016d82:	ef 48 ff f4 	st.w	r7[-12],r8
80016d86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d8a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80016d8e:	ef 48 ff f0 	st.w	r7[-16],r8
80016d92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d96:	f0 09 11 ff 	rsub	r9,r8,-1
80016d9a:	ec f8 00 f4 	ld.w	r8,r6[244]
80016d9e:	70 08       	ld.w	r8,r8[0x0]
80016da0:	10 69       	and	r9,r8
80016da2:	ee fa ff ec 	ld.w	r10,r7[-20]
80016da6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016daa:	f5 e8 00 08 	and	r8,r10,r8
80016dae:	10 49       	or	r9,r8
80016db0:	ec f8 00 f4 	ld.w	r8,r6[244]
80016db4:	91 09       	st.w	r8[0x0],r9
80016db6:	c5 38       	rjmp	80016e5c <LED_Display_Mask+0xf4>
80016db8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016dbc:	5c 98       	brev	r8
80016dbe:	f0 08 12 00 	clz	r8,r8
80016dc2:	5c 58       	castu.b	r8
80016dc4:	2f f8       	sub	r8,-1
80016dc6:	ef 68 ff ff 	st.b	r7[-1],r8
80016dca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016dce:	a5 68       	lsl	r8,0x4
80016dd0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016dd4:	f2 08 00 08 	add	r8,r9,r8
80016dd8:	ef 48 ff f4 	st.w	r7[-12],r8
80016ddc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016de0:	70 08       	ld.w	r8,r8[0x0]
80016de2:	a9 78       	lsl	r8,0x9
80016de4:	e0 28 e0 00 	sub	r8,57344
80016de8:	ef 48 ff f8 	st.w	r7[-8],r8
80016dec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016df0:	20 18       	sub	r8,1
80016df2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80016df6:	f2 08 0a 48 	lsr	r8,r9,r8
80016dfa:	ef 48 ff ec 	st.w	r7[-20],r8
80016dfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016e02:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80016e06:	5c 58       	castu.b	r8
80016e08:	c0 90       	breq	80016e1a <LED_Display_Mask+0xb2>
80016e0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e0e:	70 19       	ld.w	r9,r8[0x4]
80016e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016e14:	f1 49 00 58 	st.w	r8[88],r9
80016e18:	c0 88       	rjmp	80016e28 <LED_Display_Mask+0xc0>
80016e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e1e:	70 19       	ld.w	r9,r8[0x4]
80016e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016e24:	f1 49 00 54 	st.w	r8[84],r9
80016e28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e2c:	70 19       	ld.w	r9,r8[0x4]
80016e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016e32:	f1 49 00 44 	st.w	r8[68],r9
80016e36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e3a:	70 19       	ld.w	r9,r8[0x4]
80016e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016e40:	91 19       	st.w	r8[0x4],r9
80016e42:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016e46:	a1 98       	lsr	r8,0x1
80016e48:	ef 48 ff ec 	st.w	r7[-20],r8
80016e4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016e50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016e54:	f2 08 0a 48 	lsr	r8,r9,r8
80016e58:	ef 48 ff f0 	st.w	r7[-16],r8
80016e5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016e60:	58 08       	cp.w	r8,0
80016e62:	ca b1       	brne	80016db8 <LED_Display_Mask+0x50>
80016e64:	2f bd       	sub	sp,-20
80016e66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e6a:	00 00       	add	r0,r0
80016e6c:	80 01       	ld.sh	r1,r0[0x0]
80016e6e:	6b f6       	ld.w	r6,r5[0x7c]

80016e70 <LED_Test>:
80016e70:	eb cd 40 c0 	pushm	r6-r7,lr
80016e74:	1a 97       	mov	r7,sp
80016e76:	20 1d       	sub	sp,4
80016e78:	48 96       	lddpc	r6,80016e9c <LED_Test+0x2c>
80016e7a:	1e 26       	rsub	r6,pc
80016e7c:	ef 4c ff fc 	st.w	r7[-4],r12
80016e80:	ec f8 00 f4 	ld.w	r8,r6[244]
80016e84:	70 09       	ld.w	r9,r8[0x0]
80016e86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e8a:	f3 e8 00 08 	and	r8,r9,r8
80016e8e:	5f 18       	srne	r8
80016e90:	5c 58       	castu.b	r8
80016e92:	10 9c       	mov	r12,r8
80016e94:	2f fd       	sub	sp,-4
80016e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e9a:	00 00       	add	r0,r0
80016e9c:	80 01       	ld.sh	r1,r0[0x0]
80016e9e:	6c fe       	ld.w	lr,r6[0x3c]

80016ea0 <LED_Off>:
80016ea0:	eb cd 40 c0 	pushm	r6-r7,lr
80016ea4:	1a 97       	mov	r7,sp
80016ea6:	20 4d       	sub	sp,16
80016ea8:	4a b6       	lddpc	r6,80016f54 <LED_Off+0xb4>
80016eaa:	1e 26       	rsub	r6,pc
80016eac:	ef 4c ff f0 	st.w	r7[-16],r12
80016eb0:	ec f8 01 b0 	ld.w	r8,r6[432]
80016eb4:	21 08       	sub	r8,16
80016eb6:	ef 48 ff f4 	st.w	r7[-12],r8
80016eba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016ebe:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80016ec2:	ef 48 ff f0 	st.w	r7[-16],r8
80016ec6:	ec f8 00 f4 	ld.w	r8,r6[244]
80016eca:	70 09       	ld.w	r9,r8[0x0]
80016ecc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016ed0:	10 49       	or	r9,r8
80016ed2:	ec f8 00 f4 	ld.w	r8,r6[244]
80016ed6:	91 09       	st.w	r8[0x0],r9
80016ed8:	c3 78       	rjmp	80016f46 <LED_Off+0xa6>
80016eda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016ede:	5c 98       	brev	r8
80016ee0:	f0 08 12 00 	clz	r8,r8
80016ee4:	5c 58       	castu.b	r8
80016ee6:	2f f8       	sub	r8,-1
80016ee8:	ef 68 ff ff 	st.b	r7[-1],r8
80016eec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016ef0:	a5 68       	lsl	r8,0x4
80016ef2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016ef6:	f2 08 00 08 	add	r8,r9,r8
80016efa:	ef 48 ff f4 	st.w	r7[-12],r8
80016efe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f02:	70 08       	ld.w	r8,r8[0x0]
80016f04:	a9 78       	lsl	r8,0x9
80016f06:	e0 28 e0 00 	sub	r8,57344
80016f0a:	ef 48 ff f8 	st.w	r7[-8],r8
80016f0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f12:	70 19       	ld.w	r9,r8[0x4]
80016f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f18:	f1 49 00 54 	st.w	r8[84],r9
80016f1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f20:	70 19       	ld.w	r9,r8[0x4]
80016f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f26:	f1 49 00 44 	st.w	r8[68],r9
80016f2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f2e:	70 19       	ld.w	r9,r8[0x4]
80016f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f34:	91 19       	st.w	r8[0x4],r9
80016f36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016f3a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016f3e:	f2 08 0a 48 	lsr	r8,r9,r8
80016f42:	ef 48 ff f0 	st.w	r7[-16],r8
80016f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016f4a:	58 08       	cp.w	r8,0
80016f4c:	cc 71       	brne	80016eda <LED_Off+0x3a>
80016f4e:	2f cd       	sub	sp,-16
80016f50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016f54:	80 01       	ld.sh	r1,r0[0x0]
80016f56:	6d 2e       	ld.w	lr,r6[0x48]

80016f58 <LED_On>:
80016f58:	eb cd 40 c0 	pushm	r6-r7,lr
80016f5c:	1a 97       	mov	r7,sp
80016f5e:	20 4d       	sub	sp,16
80016f60:	4a c6       	lddpc	r6,80017010 <LED_On+0xb8>
80016f62:	1e 26       	rsub	r6,pc
80016f64:	ef 4c ff f0 	st.w	r7[-16],r12
80016f68:	ec f8 01 b0 	ld.w	r8,r6[432]
80016f6c:	21 08       	sub	r8,16
80016f6e:	ef 48 ff f4 	st.w	r7[-12],r8
80016f72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016f76:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80016f7a:	ef 48 ff f0 	st.w	r7[-16],r8
80016f7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016f82:	f0 09 11 ff 	rsub	r9,r8,-1
80016f86:	ec f8 00 f4 	ld.w	r8,r6[244]
80016f8a:	70 08       	ld.w	r8,r8[0x0]
80016f8c:	10 69       	and	r9,r8
80016f8e:	ec f8 00 f4 	ld.w	r8,r6[244]
80016f92:	91 09       	st.w	r8[0x0],r9
80016f94:	c3 78       	rjmp	80017002 <LED_On+0xaa>
80016f96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016f9a:	5c 98       	brev	r8
80016f9c:	f0 08 12 00 	clz	r8,r8
80016fa0:	5c 58       	castu.b	r8
80016fa2:	2f f8       	sub	r8,-1
80016fa4:	ef 68 ff ff 	st.b	r7[-1],r8
80016fa8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016fac:	a5 68       	lsl	r8,0x4
80016fae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016fb2:	f2 08 00 08 	add	r8,r9,r8
80016fb6:	ef 48 ff f4 	st.w	r7[-12],r8
80016fba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016fbe:	70 08       	ld.w	r8,r8[0x0]
80016fc0:	a9 78       	lsl	r8,0x9
80016fc2:	e0 28 e0 00 	sub	r8,57344
80016fc6:	ef 48 ff f8 	st.w	r7[-8],r8
80016fca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016fce:	70 19       	ld.w	r9,r8[0x4]
80016fd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fd4:	f1 49 00 58 	st.w	r8[88],r9
80016fd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016fdc:	70 19       	ld.w	r9,r8[0x4]
80016fde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016fe2:	f1 49 00 44 	st.w	r8[68],r9
80016fe6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016fea:	70 19       	ld.w	r9,r8[0x4]
80016fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016ff0:	91 19       	st.w	r8[0x4],r9
80016ff2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80016ff6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016ffa:	f2 08 0a 48 	lsr	r8,r9,r8
80016ffe:	ef 48 ff f0 	st.w	r7[-16],r8
80017002:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017006:	58 08       	cp.w	r8,0
80017008:	cc 71       	brne	80016f96 <LED_On+0x3e>
8001700a:	2f cd       	sub	sp,-16
8001700c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017010:	80 01       	ld.sh	r1,r0[0x0]
80017012:	6d e6       	ld.w	r6,r6[0x78]

80017014 <LED_Toggle>:
80017014:	eb cd 40 c0 	pushm	r6-r7,lr
80017018:	1a 97       	mov	r7,sp
8001701a:	20 4d       	sub	sp,16
8001701c:	4a b6       	lddpc	r6,800170c8 <LED_Toggle+0xb4>
8001701e:	1e 26       	rsub	r6,pc
80017020:	ef 4c ff f0 	st.w	r7[-16],r12
80017024:	ec f8 01 b0 	ld.w	r8,r6[432]
80017028:	21 08       	sub	r8,16
8001702a:	ef 48 ff f4 	st.w	r7[-12],r8
8001702e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017032:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017036:	ef 48 ff f0 	st.w	r7[-16],r8
8001703a:	ec f8 00 f4 	ld.w	r8,r6[244]
8001703e:	70 09       	ld.w	r9,r8[0x0]
80017040:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017044:	10 59       	eor	r9,r8
80017046:	ec f8 00 f4 	ld.w	r8,r6[244]
8001704a:	91 09       	st.w	r8[0x0],r9
8001704c:	c3 78       	rjmp	800170ba <LED_Toggle+0xa6>
8001704e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017052:	5c 98       	brev	r8
80017054:	f0 08 12 00 	clz	r8,r8
80017058:	5c 58       	castu.b	r8
8001705a:	2f f8       	sub	r8,-1
8001705c:	ef 68 ff ff 	st.b	r7[-1],r8
80017060:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017064:	a5 68       	lsl	r8,0x4
80017066:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001706a:	f2 08 00 08 	add	r8,r9,r8
8001706e:	ef 48 ff f4 	st.w	r7[-12],r8
80017072:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017076:	70 08       	ld.w	r8,r8[0x0]
80017078:	a9 78       	lsl	r8,0x9
8001707a:	e0 28 e0 00 	sub	r8,57344
8001707e:	ef 48 ff f8 	st.w	r7[-8],r8
80017082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017086:	70 19       	ld.w	r9,r8[0x4]
80017088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001708c:	f1 49 00 5c 	st.w	r8[92],r9
80017090:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017094:	70 19       	ld.w	r9,r8[0x4]
80017096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001709a:	f1 49 00 44 	st.w	r8[68],r9
8001709e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800170a2:	70 19       	ld.w	r9,r8[0x4]
800170a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170a8:	91 19       	st.w	r8[0x4],r9
800170aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800170ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
800170b2:	f2 08 0a 48 	lsr	r8,r9,r8
800170b6:	ef 48 ff f0 	st.w	r7[-16],r8
800170ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800170be:	58 08       	cp.w	r8,0
800170c0:	cc 71       	brne	8001704e <LED_Toggle+0x3a>
800170c2:	2f cd       	sub	sp,-16
800170c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800170c8:	80 01       	ld.sh	r1,r0[0x0]
800170ca:	6e a2       	ld.w	r2,r7[0x28]

800170cc <LED_Read_Display_Field>:
800170cc:	eb cd 40 c0 	pushm	r6-r7,lr
800170d0:	1a 97       	mov	r7,sp
800170d2:	20 1d       	sub	sp,4
800170d4:	48 b6       	lddpc	r6,80017100 <LED_Read_Display_Field+0x34>
800170d6:	1e 26       	rsub	r6,pc
800170d8:	ef 4c ff fc 	st.w	r7[-4],r12
800170dc:	ec f8 00 f4 	ld.w	r8,r6[244]
800170e0:	70 09       	ld.w	r9,r8[0x0]
800170e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170e6:	10 69       	and	r9,r8
800170e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170ec:	5c 98       	brev	r8
800170ee:	f0 08 12 00 	clz	r8,r8
800170f2:	f2 08 0a 48 	lsr	r8,r9,r8
800170f6:	10 9c       	mov	r12,r8
800170f8:	2f fd       	sub	sp,-4
800170fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800170fe:	00 00       	add	r0,r0
80017100:	80 01       	ld.sh	r1,r0[0x0]
80017102:	6f 5a       	ld.w	r10,r7[0x54]

80017104 <LED_Display_Field>:
80017104:	eb cd 40 c0 	pushm	r6-r7,lr
80017108:	1a 97       	mov	r7,sp
8001710a:	20 2d       	sub	sp,8
8001710c:	48 c6       	lddpc	r6,8001713c <LED_Display_Field+0x38>
8001710e:	1e 26       	rsub	r6,pc
80017110:	ef 4c ff fc 	st.w	r7[-4],r12
80017114:	ef 4b ff f8 	st.w	r7[-8],r11
80017118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001711c:	5c 98       	brev	r8
8001711e:	f0 08 12 00 	clz	r8,r8
80017122:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017126:	f2 08 09 48 	lsl	r8,r9,r8
8001712a:	10 9b       	mov	r11,r8
8001712c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017130:	f0 16 01 83 	mcall	r6[1548]
80017134:	2f ed       	sub	sp,-8
80017136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001713a:	00 00       	add	r0,r0
8001713c:	80 01       	ld.sh	r1,r0[0x0]
8001713e:	6f 92       	ld.w	r2,r7[0x64]

80017140 <LED_Get_Intensity>:
80017140:	eb cd 40 80 	pushm	r7,lr
80017144:	1a 97       	mov	r7,sp
80017146:	20 1d       	sub	sp,4
80017148:	ef 4c ff fc 	st.w	r7[-4],r12
8001714c:	30 08       	mov	r8,0
8001714e:	10 9c       	mov	r12,r8
80017150:	2f fd       	sub	sp,-4
80017152:	e3 cd 80 80 	ldm	sp++,r7,pc

80017156 <LED_Set_Intensity>:
80017156:	eb cd 40 80 	pushm	r7,lr
8001715a:	1a 97       	mov	r7,sp
8001715c:	20 2d       	sub	sp,8
8001715e:	ef 4c ff fc 	st.w	r7[-4],r12
80017162:	16 98       	mov	r8,r11
80017164:	ef 68 ff f8 	st.b	r7[-8],r8
80017168:	2f ed       	sub	sp,-8
8001716a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80017170 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80017170:	eb cd 40 c0 	pushm	r6-r7,lr
80017174:	1a 97       	mov	r7,sp
80017176:	48 66       	lddpc	r6,8001718c <init_radar_modules+0x1c>
80017178:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
8001717a:	ec fb 08 b0 	ld.w	r11,r6[2224]
8001717e:	fe 7c 3c 00 	mov	r12,-50176
80017182:	f0 16 00 70 	mcall	r6[448]
}
80017186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001718a:	00 00       	add	r0,r0
8001718c:	80 01       	ld.sh	r1,r0[0x0]
8001718e:	6f fc       	ld.w	r12,r7[0x7c]
80017190:	0a 00       	add	r0,r5

80017192 <read_radar>:


void read_radar() {
80017192:	eb cd 40 c0 	pushm	r6-r7,lr
80017196:	1a 97       	mov	r7,sp
80017198:	20 1d       	sub	sp,4
8001719a:	49 f6       	lddpc	r6,80017214 <read_radar+0x82>
8001719c:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
8001719e:	30 08       	mov	r8,0
800171a0:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
800171a4:	ee cb 00 01 	sub	r11,r7,1
800171a8:	30 08       	mov	r8,0
800171aa:	30 19       	mov	r9,1
800171ac:	30 1a       	mov	r10,1
800171ae:	fe 7c 3c 00 	mov	r12,-50176
800171b2:	f0 16 00 35 	mcall	r6[212]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
800171b6:	ec fb 02 68 	ld.w	r11,r6[616]
800171ba:	30 08       	mov	r8,0
800171bc:	30 19       	mov	r9,1
800171be:	30 ca       	mov	r10,12
800171c0:	fe 7c 3c 00 	mov	r12,-50176
800171c4:	f0 16 00 5f 	mcall	r6[380]
	
	dbg_print_num(main_target.velocity*100.0,10);
800171c8:	ec f8 02 68 	ld.w	r8,r6[616]
800171cc:	70 08       	ld.w	r8,r8[0x0]
800171ce:	10 9c       	mov	r12,r8
800171d0:	f0 16 00 02 	mcall	r6[8]
800171d4:	30 08       	mov	r8,0
800171d6:	fc 19 40 59 	movh	r9,0x4059
800171da:	f0 16 00 03 	mcall	r6[12]
800171de:	14 98       	mov	r8,r10
800171e0:	16 99       	mov	r9,r11
800171e2:	10 9a       	mov	r10,r8
800171e4:	12 9b       	mov	r11,r9
800171e6:	f0 16 00 14 	mcall	r6[80]
800171ea:	18 98       	mov	r8,r12
800171ec:	30 ab       	mov	r11,10
800171ee:	10 9c       	mov	r12,r8
800171f0:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
800171f4:	ec f8 02 68 	ld.w	r8,r6[616]
800171f8:	70 18       	ld.w	r8,r8[0x4]
800171fa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800171fe:	30 ab       	mov	r11,10
80017200:	10 9c       	mov	r12,r8
80017202:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
80017206:	fe cc 00 76 	sub	r12,pc,118
8001720a:	f0 16 00 01 	mcall	r6[4]
	
}
8001720e:	2f fd       	sub	sp,-4
80017210:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017214:	80 01       	ld.sh	r1,r0[0x0]
80017216:	70 20       	ld.w	r0,r8[0x8]

80017218 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80017218:	eb cd 40 c0 	pushm	r6-r7,lr
8001721c:	1a 97       	mov	r7,sp
8001721e:	48 46       	lddpc	r6,8001722c <get_radar_main_target+0x14>
80017220:	1e 26       	rsub	r6,pc
	return &main_target;
80017222:	ec f8 02 68 	ld.w	r8,r6[616]
	
}
80017226:	10 9c       	mov	r12,r8
80017228:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001722c:	80 01       	ld.sh	r1,r0[0x0]
8001722e:	70 a4       	ld.w	r4,r8[0x28]

80017230 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80017230:	eb cd 40 c0 	pushm	r6-r7,lr
80017234:	1a 97       	mov	r7,sp
80017236:	20 1d       	sub	sp,4
80017238:	4c b6       	lddpc	r6,80017364 <init_Servos+0x134>
8001723a:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001723c:	fe 78 4c 00 	mov	r8,-46080
80017240:	e0 69 4d 04 	mov	r9,19716
80017244:	ea 19 50 57 	orh	r9,0x5057
80017248:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001724c:	fe 78 4c 00 	mov	r8,-46080
80017250:	e0 69 4d 08 	mov	r9,19720
80017254:	ea 19 50 57 	orh	r9,0x5057
80017258:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001725c:	fe 78 4c 00 	mov	r8,-46080
80017260:	e0 69 4d 10 	mov	r9,19728
80017264:	ea 19 50 57 	orh	r9,0x5057
80017268:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
8001726c:	fe 78 4c 00 	mov	r8,-46080
80017270:	e0 69 4d 20 	mov	r9,19744
80017274:	ea 19 50 57 	orh	r9,0x5057
80017278:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
8001727c:	fe 78 4c 00 	mov	r8,-46080
80017280:	e0 69 06 01 	mov	r9,1537
80017284:	ea 19 06 01 	orh	r9,0x601
80017288:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
8001728a:	fe 78 4c 00 	mov	r8,-46080
8001728e:	30 fa       	mov	r10,15
80017290:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017294:	f4 09 09 4a 	lsl	r10,r10,r9
80017298:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001729c:	2f 09       	sub	r9,-16
8001729e:	30 fb       	mov	r11,15
800172a0:	f6 09 09 49 	lsl	r9,r11,r9
800172a4:	f5 e9 10 09 	or	r9,r10,r9
800172a8:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
800172ac:	fe 78 4c 00 	mov	r8,-46080
800172b0:	30 fa       	mov	r10,15
800172b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800172b6:	f4 09 09 4a 	lsl	r10,r10,r9
800172ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800172be:	2f 09       	sub	r9,-16
800172c0:	30 fb       	mov	r11,15
800172c2:	f6 09 09 49 	lsl	r9,r11,r9
800172c6:	f5 e9 10 09 	or	r9,r10,r9
800172ca:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
800172ce:	30 08       	mov	r8,0
800172d0:	ef 48 ff fc 	st.w	r7[-4],r8
800172d4:	c3 78       	rjmp	80017342 <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
800172d6:	fe 79 4c 00 	mov	r9,-46080
800172da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172de:	2f 08       	sub	r8,-16
800172e0:	a5 78       	lsl	r8,0x5
800172e2:	f2 08 00 08 	add	r8,r9,r8
800172e6:	e0 79 00 0b 	mov	r9,65547
800172ea:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
800172ec:	fe 79 4c 00 	mov	r9,-46080
800172f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172f4:	a5 78       	lsl	r8,0x5
800172f6:	f2 08 00 08 	add	r8,r9,r8
800172fa:	f0 c8 fd f4 	sub	r8,r8,-524
800172fe:	e0 69 27 10 	mov	r9,10000
80017302:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
80017304:	fe 79 4c 00 	mov	r9,-46080
80017308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001730c:	a5 78       	lsl	r8,0x5
8001730e:	f2 08 00 08 	add	r8,r9,r8
80017312:	f0 c8 fd fc 	sub	r8,r8,-516
80017316:	e0 69 0f a0 	mov	r9,4000
8001731a:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
8001731c:	fe 79 4c 00 	mov	r9,-46080
80017320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017324:	a5 78       	lsl	r8,0x5
80017326:	f2 08 00 08 	add	r8,r9,r8
8001732a:	f0 c8 fd e8 	sub	r8,r8,-536
8001732e:	e0 69 03 e8 	mov	r9,1000
80017332:	ea 19 03 e8 	orh	r9,0x3e8
80017336:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001733c:	2f f8       	sub	r8,-1
8001733e:	ef 48 ff fc 	st.w	r7[-4],r8
80017342:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017346:	58 38       	cp.w	r8,3
80017348:	fe 9a ff c7 	brle	800172d6 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
8001734c:	30 6b       	mov	r11,6
8001734e:	ec fc 08 ac 	ld.w	r12,r6[2220]
80017352:	f0 16 00 92 	mcall	r6[584]
	// enable
	AVR32_PWM.ena=0b1111;
80017356:	fe 78 4c 00 	mov	r8,-46080
8001735a:	30 f9       	mov	r9,15
8001735c:	91 19       	st.w	r8[0x4],r9
	
	
}
8001735e:	2f fd       	sub	sp,-4
80017360:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017364:	80 01       	ld.sh	r1,r0[0x0]
80017366:	70 be       	ld.w	lr,r8[0x2c]

80017368 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017368:	eb cd 40 80 	pushm	r7,lr
8001736c:	1a 97       	mov	r7,sp
8001736e:	20 6d       	sub	sp,24
80017370:	ef 4c ff f0 	st.w	r7[-16],r12
80017374:	ef 4b ff ec 	st.w	r7[-20],r11
80017378:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
8001737c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017380:	f0 c8 fa 24 	sub	r8,r8,-1500
80017384:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017388:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001738c:	f0 c8 fa 24 	sub	r8,r8,-1500
80017390:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017398:	e0 69 13 88 	mov	r9,5000
8001739c:	10 19       	sub	r9,r8
8001739e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173a2:	f2 08 01 08 	sub	r8,r9,r8
800173a6:	f0 09 16 1f 	lsr	r9,r8,0x1f
800173aa:	f2 08 00 08 	add	r8,r9,r8
800173ae:	a1 58       	asr	r8,0x1
800173b0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
800173b4:	fe 79 4c 00 	mov	r9,-46080
800173b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800173bc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800173c0:	a5 78       	lsl	r8,0x5
800173c2:	f2 08 00 08 	add	r8,r9,r8
800173c6:	f0 c8 fd f0 	sub	r8,r8,-528
800173ca:	e0 69 13 88 	mov	r9,5000
800173ce:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
800173d0:	fe 7a 4c 00 	mov	r10,-46080
800173d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800173d8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800173dc:	ee fb ff f4 	ld.w	r11,r7[-12]
800173e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800173e4:	f6 09 00 09 	add	r9,r11,r9
800173e8:	a5 78       	lsl	r8,0x5
800173ea:	f4 08 00 08 	add	r8,r10,r8
800173ee:	f0 c8 fd f8 	sub	r8,r8,-520
800173f2:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
800173f4:	fe 7a 4c 00 	mov	r10,-46080
800173f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800173fc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017400:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017404:	f2 0b 15 10 	lsl	r11,r9,0x10
80017408:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001740c:	f7 e9 10 09 	or	r9,r11,r9
80017410:	a5 78       	lsl	r8,0x5
80017412:	f4 08 00 08 	add	r8,r10,r8
80017416:	f0 c8 fd e4 	sub	r8,r8,-540
8001741a:	91 09       	st.w	r8[0x0],r9
}
8001741c:	2f ad       	sub	sp,-24
8001741e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017422 <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017422:	eb cd 40 c0 	pushm	r6-r7,lr
80017426:	1a 97       	mov	r7,sp
80017428:	20 1d       	sub	sp,4
8001742a:	49 76       	lddpc	r6,80017484 <set_servos+0x62>
8001742c:	1e 26       	rsub	r6,pc
8001742e:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017432:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017436:	2f 08       	sub	r8,-16
80017438:	70 09       	ld.w	r9,r8[0x0]
8001743a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001743e:	70 08       	ld.w	r8,r8[0x0]
80017440:	12 9a       	mov	r10,r9
80017442:	10 9b       	mov	r11,r8
80017444:	30 1c       	mov	r12,1
80017446:	f0 16 00 c1 	mcall	r6[772]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
8001744a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001744e:	2d 08       	sub	r8,-48
80017450:	70 09       	ld.w	r9,r8[0x0]
80017452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017456:	2e 08       	sub	r8,-32
80017458:	70 08       	ld.w	r8,r8[0x0]
8001745a:	12 9a       	mov	r10,r9
8001745c:	10 9b       	mov	r11,r8
8001745e:	30 2c       	mov	r12,2
80017460:	f0 16 00 c1 	mcall	r6[772]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017464:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017468:	2b 08       	sub	r8,-80
8001746a:	70 09       	ld.w	r9,r8[0x0]
8001746c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017470:	2c 08       	sub	r8,-64
80017472:	70 08       	ld.w	r8,r8[0x0]
80017474:	12 9a       	mov	r10,r9
80017476:	10 9b       	mov	r11,r8
80017478:	30 3c       	mov	r12,3
8001747a:	f0 16 00 c1 	mcall	r6[772]
	#endif
	
}
8001747e:	2f fd       	sub	sp,-4
80017480:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017484:	80 01       	ld.sh	r1,r0[0x0]
80017486:	72 b0       	ld.w	r0,r9[0x2c]

80017488 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017488:	eb cd 40 80 	pushm	r7,lr
8001748c:	1a 97       	mov	r7,sp
8001748e:	20 1d       	sub	sp,4
80017490:	18 98       	mov	r8,r12
80017492:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017496:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001749a:	58 38       	cp.w	r8,3
8001749c:	c1 20       	breq	800174c0 <osc_get_rate+0x38>
8001749e:	e0 89 00 07 	brgt	800174ac <osc_get_rate+0x24>
800174a2:	58 08       	cp.w	r8,0
800174a4:	c0 90       	breq	800174b6 <osc_get_rate+0x2e>
800174a6:	58 28       	cp.w	r8,2
800174a8:	c0 f0       	breq	800174c6 <osc_get_rate+0x3e>
800174aa:	c1 b8       	rjmp	800174e0 <osc_get_rate+0x58>
800174ac:	58 48       	cp.w	r8,4
800174ae:	c1 10       	breq	800174d0 <osc_get_rate+0x48>
800174b0:	58 58       	cp.w	r8,5
800174b2:	c1 40       	breq	800174da <osc_get_rate+0x52>
800174b4:	c1 68       	rjmp	800174e0 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800174b6:	e0 68 24 00 	mov	r8,9216
800174ba:	ea 18 00 f4 	orh	r8,0xf4
800174be:	c1 28       	rjmp	800174e2 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800174c0:	e0 68 80 00 	mov	r8,32768
800174c4:	c0 f8       	rjmp	800174e2 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
800174c6:	e0 68 12 00 	mov	r8,4608
800174ca:	ea 18 00 7a 	orh	r8,0x7a
800174ce:	c0 a8       	rjmp	800174e2 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
800174d0:	e0 68 0e 00 	mov	r8,3584
800174d4:	ea 18 07 27 	orh	r8,0x727
800174d8:	c0 58       	rjmp	800174e2 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
800174da:	e0 78 c1 38 	mov	r8,115000
800174de:	c0 28       	rjmp	800174e2 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
800174e0:	30 08       	mov	r8,0
	}
}
800174e2:	10 9c       	mov	r12,r8
800174e4:	2f fd       	sub	sp,-4
800174e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800174ea <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800174ea:	eb cd 40 c0 	pushm	r6-r7,lr
800174ee:	1a 97       	mov	r7,sp
800174f0:	48 56       	lddpc	r6,80017504 <sysclk_get_main_hz+0x1a>
800174f2:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800174f4:	30 0c       	mov	r12,0
800174f6:	cc 9f       	rcall	80017488 <osc_get_rate>
800174f8:	18 98       	mov	r8,r12
800174fa:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800174fc:	10 9c       	mov	r12,r8
800174fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017502:	00 00       	add	r0,r0
80017504:	80 01       	ld.sh	r1,r0[0x0]
80017506:	73 76       	ld.w	r6,r9[0x5c]

80017508 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80017508:	eb cd 40 c0 	pushm	r6-r7,lr
8001750c:	1a 97       	mov	r7,sp
8001750e:	48 46       	lddpc	r6,8001751c <sysclk_get_cpu_hz+0x14>
80017510:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80017512:	ce cf       	rcall	800174ea <sysclk_get_main_hz>
80017514:	18 98       	mov	r8,r12
}
80017516:	10 9c       	mov	r12,r8
80017518:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001751c:	80 01       	ld.sh	r1,r0[0x0]
8001751e:	73 94       	ld.w	r4,r9[0x64]

80017520 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80017520:	eb cd 40 c0 	pushm	r6-r7,lr
80017524:	1a 97       	mov	r7,sp
80017526:	20 3d       	sub	sp,12
80017528:	4c 36       	lddpc	r6,80017634 <spectrum_handler+0x114>
8001752a:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
8001752c:	f0 16 00 4d 	mcall	r6[308]
80017530:	18 98       	mov	r8,r12
80017532:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80017536:	fc 78 14 00 	mov	r8,-191488
8001753a:	70 58       	ld.w	r8,r8[0x14]
8001753c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017540:	5c 58       	castu.b	r8
80017542:	c7 50       	breq	8001762c <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80017544:	ec f8 00 80 	ld.w	r8,r6[128]
80017548:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001754c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017550:	10 19       	sub	r9,r8
80017552:	ec f8 00 80 	ld.w	r8,r6[128]
80017556:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
8001755a:	ec f8 00 80 	ld.w	r8,r6[128]
8001755e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017562:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80017566:	ec f8 00 80 	ld.w	r8,r6[128]
8001756a:	f0 f8 01 30 	ld.w	r8,r8[304]
8001756e:	e0 48 09 c4 	cp.w	r8,2500
80017572:	e0 88 00 06 	brls	8001757e <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80017576:	ec fc 00 80 	ld.w	r12,r6[128]
8001757a:	f0 16 01 ff 	mcall	r6[2044]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
8001757e:	fc 78 14 00 	mov	r8,-191488
80017582:	70 68       	ld.w	r8,r8[0x18]
80017584:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80017588:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001758c:	10 9b       	mov	r11,r8
8001758e:	ec fc 00 80 	ld.w	r12,r6[128]
80017592:	f0 16 00 53 	mcall	r6[332]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80017596:	ec fc 00 80 	ld.w	r12,r6[128]
8001759a:	f0 16 00 2d 	mcall	r6[180]
8001759e:	18 98       	mov	r8,r12
800175a0:	59 08       	cp.w	r8,16
800175a2:	c4 51       	brne	8001762c <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
800175a4:	30 08       	mov	r8,0
800175a6:	ef 68 ff f9 	st.b	r7[-7],r8
800175aa:	c3 a8       	rjmp	8001761e <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
800175ac:	ec fc 00 80 	ld.w	r12,r6[128]
800175b0:	f0 16 00 44 	mcall	r6[272]
800175b4:	18 98       	mov	r8,r12
800175b6:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
800175ba:	ec fc 00 80 	ld.w	r12,r6[128]
800175be:	f0 16 00 44 	mcall	r6[272]
800175c2:	18 98       	mov	r8,r12
800175c4:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
800175c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800175cc:	a9 68       	lsl	r8,0x8
800175ce:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800175d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800175d6:	f2 08 00 08 	add	r8,r9,r8
800175da:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
800175de:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800175e2:	e2 18 00 3c 	andl	r8,0x3c,COH
800175e6:	f0 0a 14 02 	asr	r10,r8,0x2
800175ea:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800175ee:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800175f2:	ec f9 00 80 	ld.w	r9,r6[128]
800175f6:	f4 ca ff 7e 	sub	r10,r10,-130
800175fa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
800175fe:	ec f9 00 80 	ld.w	r9,r6[128]
80017602:	30 18       	mov	r8,1
80017604:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80017608:	ec f8 00 80 	ld.w	r8,r6[128]
8001760c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017610:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017614:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80017618:	2f f8       	sub	r8,-1
8001761a:	ef 68 ff f9 	st.b	r7[-7],r8
8001761e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80017622:	30 78       	mov	r8,7
80017624:	f0 09 18 00 	cp.b	r9,r8
80017628:	fe 98 ff c2 	brls	800175ac <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
8001762c:	2f dd       	sub	sp,-12
8001762e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017632:	d6 03       	rete
80017634:	80 01       	ld.sh	r1,r0[0x0]
80017636:	73 ae       	ld.w	lr,r9[0x68]

80017638 <rc_init>:

void rc_init (void) {
80017638:	eb cd 40 c0 	pushm	r6-r7,lr
8001763c:	1a 97       	mov	r7,sp
8001763e:	20 1d       	sub	sp,4
80017640:	4a 96       	lddpc	r6,800176e4 <rc_init+0xac>
80017642:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017644:	30 08       	mov	r8,0
80017646:	ef 48 ff fc 	st.w	r7[-4],r8
8001764a:	c2 18       	rjmp	8001768c <rc_init+0x54>
		spRec1.channels[i]=500;
8001764c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017650:	ec f9 00 80 	ld.w	r9,r6[128]
80017654:	f0 ca ff 7e 	sub	r10,r8,-130
80017658:	e0 68 01 f4 	mov	r8,500
8001765c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80017660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017664:	ec f9 01 6c 	ld.w	r9,r6[364]
80017668:	f0 ca ff 7e 	sub	r10,r8,-130
8001766c:	e0 68 01 f4 	mov	r8,500
80017670:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80017674:	ee fa ff fc 	ld.w	r10,r7[-4]
80017678:	ec f9 02 bc 	ld.w	r9,r6[700]
8001767c:	30 08       	mov	r8,0
8001767e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017686:	2f f8       	sub	r8,-1
80017688:	ef 48 ff fc 	st.w	r7[-4],r8
8001768c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017690:	58 f8       	cp.w	r8,15
80017692:	fe 9a ff dd 	brle	8001764c <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80017696:	ec f9 00 80 	ld.w	r9,r6[128]
8001769a:	30 08       	mov	r8,0
8001769c:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
800176a0:	ec f9 01 6c 	ld.w	r9,r6[364]
800176a4:	30 08       	mov	r8,0
800176a6:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
800176aa:	30 2b       	mov	r11,2
800176ac:	ec fc 08 a8 	ld.w	r12,r6[2216]
800176b0:	f0 16 00 92 	mcall	r6[584]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
800176b4:	c2 af       	rcall	80017508 <sysclk_get_cpu_hz>
800176b6:	18 98       	mov	r8,r12
800176b8:	10 9a       	mov	r10,r8
800176ba:	ec fb 08 a4 	ld.w	r11,r6[2212]
800176be:	fc 7c 14 00 	mov	r12,-191488
800176c2:	f0 16 00 68 	mcall	r6[416]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
800176c6:	30 1a       	mov	r10,1
800176c8:	e0 6b 02 80 	mov	r11,640
800176cc:	fe cc 01 ac 	sub	r12,pc,428
800176d0:	f0 16 00 3a 	mcall	r6[232]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
800176d4:	fc 78 14 00 	mov	r8,-191488
800176d8:	30 19       	mov	r9,1
800176da:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
800176dc:	2f fd       	sub	sp,-4
800176de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176e2:	00 00       	add	r0,r0
800176e4:	80 01       	ld.sh	r1,r0[0x0]
800176e6:	74 c6       	ld.w	r6,r10[0x30]

800176e8 <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
800176e8:	eb cd 40 c0 	pushm	r6-r7,lr
800176ec:	1a 97       	mov	r7,sp
800176ee:	20 1d       	sub	sp,4
800176f0:	48 b6       	lddpc	r6,8001771c <rc_get_channel+0x34>
800176f2:	1e 26       	rsub	r6,pc
800176f4:	18 98       	mov	r8,r12
800176f6:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
800176fa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800176fe:	ec f8 00 80 	ld.w	r8,r6[128]
80017702:	f2 c9 ff 7e 	sub	r9,r9,-130
80017706:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8001770a:	f0 c8 01 f4 	sub	r8,r8,500
8001770e:	5c 88       	casts.h	r8
80017710:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80017712:	10 9c       	mov	r12,r8
80017714:	2f fd       	sub	sp,-4
80017716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001771a:	00 00       	add	r0,r0
8001771c:	80 01       	ld.sh	r1,r0[0x0]
8001771e:	75 76       	ld.w	r6,r10[0x5c]

80017720 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80017720:	eb cd 40 e0 	pushm	r5-r7,lr
80017724:	1a 97       	mov	r7,sp
80017726:	20 2d       	sub	sp,8
80017728:	4a 36       	lddpc	r6,800177b4 <rc_get_channel_neutral+0x94>
8001772a:	1e 26       	rsub	r6,pc
8001772c:	18 98       	mov	r8,r12
8001772e:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80017732:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017736:	10 9c       	mov	r12,r8
80017738:	f0 16 00 1b 	mcall	r6[108]
8001773c:	18 98       	mov	r8,r12
8001773e:	10 99       	mov	r9,r8
80017740:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017744:	ec f8 02 bc 	ld.w	r8,r6[700]
80017748:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
8001774c:	f2 08 01 08 	sub	r8,r9,r8
80017750:	5c 88       	casts.h	r8
80017752:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80017756:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001775a:	10 9c       	mov	r12,r8
8001775c:	f0 16 00 1a 	mcall	r6[104]
80017760:	14 98       	mov	r8,r10
80017762:	16 99       	mov	r9,r11
80017764:	30 05       	mov	r5,0
80017766:	30 0a       	mov	r10,0
80017768:	fc 1b c0 3e 	movh	r11,0xc03e
8001776c:	f0 16 00 1d 	mcall	r6[116]
80017770:	18 98       	mov	r8,r12
80017772:	58 08       	cp.w	r8,0
80017774:	c0 20       	breq	80017778 <rc_get_channel_neutral+0x58>
80017776:	30 15       	mov	r5,1
80017778:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001777c:	c1 60       	breq	800177a8 <rc_get_channel_neutral+0x88>
8001777e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017782:	10 9c       	mov	r12,r8
80017784:	f0 16 00 1a 	mcall	r6[104]
80017788:	30 05       	mov	r5,0
8001778a:	30 08       	mov	r8,0
8001778c:	fc 19 40 3e 	movh	r9,0x403e
80017790:	f0 16 00 1d 	mcall	r6[116]
80017794:	18 98       	mov	r8,r12
80017796:	58 08       	cp.w	r8,0
80017798:	c0 20       	breq	8001779c <rc_get_channel_neutral+0x7c>
8001779a:	30 15       	mov	r5,1
8001779c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800177a0:	c0 40       	breq	800177a8 <rc_get_channel_neutral+0x88>
800177a2:	30 08       	mov	r8,0
800177a4:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
800177a8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800177ac:	10 9c       	mov	r12,r8
800177ae:	2f ed       	sub	sp,-8
800177b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800177b4:	80 01       	ld.sh	r1,r0[0x0]
800177b6:	75 ae       	ld.w	lr,r10[0x68]

800177b8 <rc_center_channel>:

void rc_center_channel(uint8_t index){
800177b8:	eb cd 40 e0 	pushm	r5-r7,lr
800177bc:	1a 97       	mov	r7,sp
800177be:	20 1d       	sub	sp,4
800177c0:	48 a6       	lddpc	r6,800177e8 <rc_center_channel+0x30>
800177c2:	1e 26       	rsub	r6,pc
800177c4:	18 98       	mov	r8,r12
800177c6:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
800177ca:	ef 35 ff fc 	ld.ub	r5,r7[-4]
800177ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800177d2:	10 9c       	mov	r12,r8
800177d4:	f0 16 00 1b 	mcall	r6[108]
800177d8:	18 98       	mov	r8,r12
800177da:	ec f9 02 bc 	ld.w	r9,r6[700]
800177de:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
800177e2:	2f fd       	sub	sp,-4
800177e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800177e8:	80 01       	ld.sh	r1,r0[0x0]
800177ea:	76 46       	ld.w	r6,r11[0x10]

800177ec <checkReceiver1>:

int8_t checkReceiver1() {
800177ec:	eb cd 40 c0 	pushm	r6-r7,lr
800177f0:	1a 97       	mov	r7,sp
800177f2:	20 3d       	sub	sp,12
800177f4:	4b 56       	lddpc	r6,800178c8 <checkReceiver1+0xdc>
800177f6:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
800177f8:	f0 16 00 4d 	mcall	r6[308]
800177fc:	18 98       	mov	r8,r12
800177fe:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80017802:	ec f8 00 80 	ld.w	r8,r6[128]
80017806:	f0 f8 01 24 	ld.w	r8,r8[292]
8001780a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001780e:	10 19       	sub	r9,r8
80017810:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80017814:	ec f8 00 80 	ld.w	r8,r6[128]
80017818:	f1 38 01 28 	ld.ub	r8,r8[296]
8001781c:	58 08       	cp.w	r8,0
8001781e:	c0 41       	brne	80017826 <checkReceiver1+0x3a>
80017820:	e0 68 00 fe 	mov	r8,254
80017824:	c4 d8       	rjmp	800178be <checkReceiver1+0xd2>
	if (duration<100000) {
80017826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001782a:	e0 58 86 9f 	cp.w	r8,99999
8001782e:	e0 8b 00 04 	brhi	80017836 <checkReceiver1+0x4a>
		return 1;
80017832:	30 18       	mov	r8,1
80017834:	c4 58       	rjmp	800178be <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80017836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001783a:	e0 69 e3 5f 	mov	r9,58207
8001783e:	ea 19 00 16 	orh	r9,0x16
80017842:	12 38       	cp.w	r8,r9
80017844:	e0 8b 00 17 	brhi	80017872 <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80017848:	ec f9 00 80 	ld.w	r9,r6[128]
8001784c:	e0 68 01 f4 	mov	r8,500
80017850:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80017854:	ec f9 00 80 	ld.w	r9,r6[128]
80017858:	e0 68 01 f4 	mov	r8,500
8001785c:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80017860:	ec f9 00 80 	ld.w	r9,r6[128]
80017864:	e0 68 01 f4 	mov	r8,500
80017868:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
8001786c:	e0 68 00 ff 	mov	r8,255
80017870:	c2 78       	rjmp	800178be <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80017872:	ec f9 00 80 	ld.w	r9,r6[128]
80017876:	30 08       	mov	r8,0
80017878:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001787c:	30 18       	mov	r8,1
8001787e:	ef 68 ff f7 	st.b	r7[-9],r8
80017882:	c1 08       	rjmp	800178a2 <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80017884:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80017888:	ec f9 00 80 	ld.w	r9,r6[128]
8001788c:	f0 ca ff 7e 	sub	r10,r8,-130
80017890:	e0 68 01 f4 	mov	r8,500
80017894:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
80017898:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001789c:	2f f8       	sub	r8,-1
8001789e:	ef 68 ff f7 	st.b	r7[-9],r8
800178a2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800178a6:	30 78       	mov	r8,7
800178a8:	f0 09 18 00 	cp.b	r9,r8
800178ac:	fe 9a ff ec 	brle	80017884 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
800178b0:	ec f9 00 80 	ld.w	r9,r6[128]
800178b4:	30 08       	mov	r8,0
800178b6:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
800178ba:	e0 68 00 fe 	mov	r8,254

	}

}
800178be:	10 9c       	mov	r12,r8
800178c0:	2f dd       	sub	sp,-12
800178c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800178c6:	00 00       	add	r0,r0
800178c8:	80 01       	ld.sh	r1,r0[0x0]
800178ca:	76 7a       	ld.w	r10,r11[0x1c]

800178cc <checkReceiver2>:

int8_t checkReceiver2(){
800178cc:	eb cd 40 c0 	pushm	r6-r7,lr
800178d0:	1a 97       	mov	r7,sp
800178d2:	20 3d       	sub	sp,12
800178d4:	4a 96       	lddpc	r6,80017978 <checkReceiver2+0xac>
800178d6:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
800178d8:	30 08       	mov	r8,0
800178da:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
800178de:	ec f8 01 6c 	ld.w	r8,r6[364]
800178e2:	f0 f8 01 24 	ld.w	r8,r8[292]
800178e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800178ea:	10 19       	sub	r9,r8
800178ec:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
800178f0:	ec f8 01 6c 	ld.w	r8,r6[364]
800178f4:	f1 38 01 28 	ld.ub	r8,r8[296]
800178f8:	58 08       	cp.w	r8,0
800178fa:	c0 41       	brne	80017902 <checkReceiver2+0x36>
800178fc:	e0 68 00 fe 	mov	r8,254
80017900:	c3 88       	rjmp	80017970 <checkReceiver2+0xa4>
	if (duration < 200000) {
80017902:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017906:	e2 58 0d 3f 	cp.w	r8,199999
8001790a:	e0 8b 00 04 	brhi	80017912 <checkReceiver2+0x46>
		return 1;
8001790e:	30 18       	mov	r8,1
80017910:	c3 08       	rjmp	80017970 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80017912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017916:	e6 58 a1 1f 	cp.w	r8,499999
8001791a:	e0 8b 00 05 	brhi	80017924 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
8001791e:	e0 68 00 ff 	mov	r8,255
80017922:	c2 78       	rjmp	80017970 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
80017924:	ec f9 01 6c 	ld.w	r9,r6[364]
80017928:	30 08       	mov	r8,0
8001792a:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001792e:	30 18       	mov	r8,1
80017930:	ef 68 ff f7 	st.b	r7[-9],r8
80017934:	c1 08       	rjmp	80017954 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
80017936:	ef 28 ff f7 	ld.sb	r8,r7[-9]
8001793a:	ec f9 01 6c 	ld.w	r9,r6[364]
8001793e:	f0 ca ff 7e 	sub	r10,r8,-130
80017942:	e0 68 01 f4 	mov	r8,500
80017946:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
8001794a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001794e:	2f f8       	sub	r8,-1
80017950:	ef 68 ff f7 	st.b	r7[-9],r8
80017954:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017958:	30 78       	mov	r8,7
8001795a:	f0 09 18 00 	cp.b	r9,r8
8001795e:	fe 9a ff ec 	brle	80017936 <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
80017962:	ec f9 01 6c 	ld.w	r9,r6[364]
80017966:	30 08       	mov	r8,0
80017968:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001796c:	e0 68 00 fe 	mov	r8,254

	}

}
80017970:	10 9c       	mov	r12,r8
80017972:	2f dd       	sub	sp,-12
80017974:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017978:	80 01       	ld.sh	r1,r0[0x0]
8001797a:	77 5a       	ld.w	r10,r11[0x54]

8001797c <rc_check_receivers>:

int8_t rc_check_receivers() {
8001797c:	eb cd 40 c0 	pushm	r6-r7,lr
80017980:	1a 97       	mov	r7,sp
80017982:	48 66       	lddpc	r6,80017998 <rc_check_receivers+0x1c>
80017984:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
80017986:	f0 16 01 95 	mcall	r6[1620]
8001798a:	18 98       	mov	r8,r12
8001798c:	5c 58       	castu.b	r8
8001798e:	5c 58       	castu.b	r8
}
80017990:	10 9c       	mov	r12,r8
80017992:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017996:	00 00       	add	r0,r0
80017998:	80 01       	ld.sh	r1,r0[0x0]
8001799a:	78 08       	ld.w	r8,r12[0x0]

8001799c <sysclk_enable_pba_module>:
8001799c:	eb cd 40 c0 	pushm	r6-r7,lr
800179a0:	1a 97       	mov	r7,sp
800179a2:	20 1d       	sub	sp,4
800179a4:	48 66       	lddpc	r6,800179bc <sysclk_enable_pba_module+0x20>
800179a6:	1e 26       	rsub	r6,pc
800179a8:	ef 4c ff fc 	st.w	r7[-4],r12
800179ac:	ee fb ff fc 	ld.w	r11,r7[-4]
800179b0:	30 2c       	mov	r12,2
800179b2:	f0 16 01 ef 	mcall	r6[1980]
800179b6:	2f fd       	sub	sp,-4
800179b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800179bc:	80 01       	ld.sh	r1,r0[0x0]
800179be:	78 2a       	ld.w	r10,r12[0x8]

800179c0 <spi_reset>:
800179c0:	eb cd 40 80 	pushm	r7,lr
800179c4:	1a 97       	mov	r7,sp
800179c6:	20 1d       	sub	sp,4
800179c8:	ef 4c ff fc 	st.w	r7[-4],r12
800179cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179d0:	e0 69 00 80 	mov	r9,128
800179d4:	91 09       	st.w	r8[0x0],r9
800179d6:	2f fd       	sub	sp,-4
800179d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800179dc <spi_set_master_mode>:
800179dc:	eb cd 40 80 	pushm	r7,lr
800179e0:	1a 97       	mov	r7,sp
800179e2:	20 1d       	sub	sp,4
800179e4:	ef 4c ff fc 	st.w	r7[-4],r12
800179e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179ec:	72 18       	ld.w	r8,r9[0x4]
800179ee:	30 1a       	mov	r10,1
800179f0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
800179f4:	93 18       	st.w	r9[0x4],r8
800179f6:	2f fd       	sub	sp,-4
800179f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800179fc <spi_disable_modfault>:
800179fc:	eb cd 40 80 	pushm	r7,lr
80017a00:	1a 97       	mov	r7,sp
80017a02:	20 1d       	sub	sp,4
80017a04:	ef 4c ff fc 	st.w	r7[-4],r12
80017a08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a0c:	72 18       	ld.w	r8,r9[0x4]
80017a0e:	30 1a       	mov	r10,1
80017a10:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80017a14:	93 18       	st.w	r9[0x4],r8
80017a16:	2f fd       	sub	sp,-4
80017a18:	e3 cd 80 80 	ldm	sp++,r7,pc

80017a1c <spi_disable_loopback>:
80017a1c:	eb cd 40 80 	pushm	r7,lr
80017a20:	1a 97       	mov	r7,sp
80017a22:	20 1d       	sub	sp,4
80017a24:	ef 4c ff fc 	st.w	r7[-4],r12
80017a28:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a2c:	72 18       	ld.w	r8,r9[0x4]
80017a2e:	30 0a       	mov	r10,0
80017a30:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80017a34:	93 18       	st.w	r9[0x4],r8
80017a36:	2f fd       	sub	sp,-4
80017a38:	e3 cd 80 80 	ldm	sp++,r7,pc

80017a3c <spi_disable_chipselect_decoding>:
80017a3c:	eb cd 40 80 	pushm	r7,lr
80017a40:	1a 97       	mov	r7,sp
80017a42:	20 1d       	sub	sp,4
80017a44:	ef 4c ff fc 	st.w	r7[-4],r12
80017a48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a4c:	72 18       	ld.w	r8,r9[0x4]
80017a4e:	30 0a       	mov	r10,0
80017a50:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80017a54:	93 18       	st.w	r9[0x4],r8
80017a56:	2f fd       	sub	sp,-4
80017a58:	e3 cd 80 80 	ldm	sp++,r7,pc

80017a5c <spi_set_chipselect>:
80017a5c:	eb cd 40 80 	pushm	r7,lr
80017a60:	1a 97       	mov	r7,sp
80017a62:	20 2d       	sub	sp,8
80017a64:	ef 4c ff fc 	st.w	r7[-4],r12
80017a68:	16 98       	mov	r8,r11
80017a6a:	ef 68 ff f8 	st.b	r7[-8],r8
80017a6e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017a72:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80017a76:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80017a7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a7e:	72 18       	ld.w	r8,r9[0x4]
80017a80:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80017a84:	93 18       	st.w	r9[0x4],r8
80017a86:	2f ed       	sub	sp,-8
80017a88:	e3 cd 80 80 	ldm	sp++,r7,pc

80017a8c <spi_disable_variable_chipselect>:
80017a8c:	eb cd 40 80 	pushm	r7,lr
80017a90:	1a 97       	mov	r7,sp
80017a92:	20 1d       	sub	sp,4
80017a94:	ef 4c ff fc 	st.w	r7[-4],r12
80017a98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a9c:	72 18       	ld.w	r8,r9[0x4]
80017a9e:	30 0a       	mov	r10,0
80017aa0:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80017aa4:	93 18       	st.w	r9[0x4],r8
80017aa6:	2f fd       	sub	sp,-4
80017aa8:	e3 cd 80 80 	ldm	sp++,r7,pc

80017aac <spi_set_delay>:
80017aac:	eb cd 40 80 	pushm	r7,lr
80017ab0:	1a 97       	mov	r7,sp
80017ab2:	20 2d       	sub	sp,8
80017ab4:	ef 4c ff fc 	st.w	r7[-4],r12
80017ab8:	16 98       	mov	r8,r11
80017aba:	ef 68 ff f8 	st.b	r7[-8],r8
80017abe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ac2:	72 18       	ld.w	r8,r9[0x4]
80017ac4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017ac8:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80017acc:	93 18       	st.w	r9[0x4],r8
80017ace:	2f ed       	sub	sp,-8
80017ad0:	e3 cd 80 80 	ldm	sp++,r7,pc

80017ad4 <spi_master_init>:
80017ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80017ad8:	1a 97       	mov	r7,sp
80017ada:	20 1d       	sub	sp,4
80017adc:	49 86       	lddpc	r6,80017b3c <spi_master_init+0x68>
80017ade:	1e 26       	rsub	r6,pc
80017ae0:	ef 4c ff fc 	st.w	r7[-4],r12
80017ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ae8:	fc 58 18 00 	cp.w	r8,-190464
80017aec:	c0 41       	brne	80017af4 <spi_master_init+0x20>
80017aee:	30 3c       	mov	r12,3
80017af0:	c5 6f       	rcall	8001799c <sysclk_enable_pba_module>
80017af2:	c0 88       	rjmp	80017b02 <spi_master_init+0x2e>
80017af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017af8:	fe 58 34 00 	cp.w	r8,-52224
80017afc:	c0 31       	brne	80017b02 <spi_master_init+0x2e>
80017afe:	30 bc       	mov	r12,11
80017b00:	c4 ef       	rcall	8001799c <sysclk_enable_pba_module>
80017b02:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b06:	c5 df       	rcall	800179c0 <spi_reset>
80017b08:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b0c:	c6 8f       	rcall	800179dc <spi_set_master_mode>
80017b0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b12:	c7 5f       	rcall	800179fc <spi_disable_modfault>
80017b14:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b18:	c8 2f       	rcall	80017a1c <spi_disable_loopback>
80017b1a:	30 fb       	mov	r11,15
80017b1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b20:	c9 ef       	rcall	80017a5c <spi_set_chipselect>
80017b22:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b26:	cb 3f       	rcall	80017a8c <spi_disable_variable_chipselect>
80017b28:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b2c:	c8 8f       	rcall	80017a3c <spi_disable_chipselect_decoding>
80017b2e:	30 0b       	mov	r11,0
80017b30:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b34:	cb cf       	rcall	80017aac <spi_set_delay>
80017b36:	2f fd       	sub	sp,-4
80017b38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b3c:	80 01       	ld.sh	r1,r0[0x0]
80017b3e:	79 62       	ld.w	r2,r12[0x58]

80017b40 <spi_select_device>:
80017b40:	eb cd 40 c0 	pushm	r6-r7,lr
80017b44:	1a 97       	mov	r7,sp
80017b46:	20 2d       	sub	sp,8
80017b48:	48 96       	lddpc	r6,80017b6c <spi_select_device+0x2c>
80017b4a:	1e 26       	rsub	r6,pc
80017b4c:	ef 4c ff fc 	st.w	r7[-4],r12
80017b50:	ef 4b ff f8 	st.w	r7[-8],r11
80017b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017b58:	11 88       	ld.ub	r8,r8[0x0]
80017b5a:	10 9b       	mov	r11,r8
80017b5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b60:	f0 16 01 f9 	mcall	r6[2020]
80017b64:	2f ed       	sub	sp,-8
80017b66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b6a:	00 00       	add	r0,r0
80017b6c:	80 01       	ld.sh	r1,r0[0x0]
80017b6e:	79 ce       	ld.w	lr,r12[0x70]

80017b70 <spi_deselect_device>:
80017b70:	eb cd 40 c0 	pushm	r6-r7,lr
80017b74:	1a 97       	mov	r7,sp
80017b76:	20 2d       	sub	sp,8
80017b78:	48 96       	lddpc	r6,80017b9c <spi_deselect_device+0x2c>
80017b7a:	1e 26       	rsub	r6,pc
80017b7c:	ef 4c ff fc 	st.w	r7[-4],r12
80017b80:	ef 4b ff f8 	st.w	r7[-8],r11
80017b84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017b88:	11 88       	ld.ub	r8,r8[0x0]
80017b8a:	10 9b       	mov	r11,r8
80017b8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b90:	f0 16 01 48 	mcall	r6[1312]
80017b94:	2f ed       	sub	sp,-8
80017b96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b9a:	00 00       	add	r0,r0
80017b9c:	80 01       	ld.sh	r1,r0[0x0]
80017b9e:	79 fe       	ld.w	lr,r12[0x7c]

80017ba0 <get_spi_in_buffer>:
80017ba0:	eb cd 40 c0 	pushm	r6-r7,lr
80017ba4:	1a 97       	mov	r7,sp
80017ba6:	20 1d       	sub	sp,4
80017ba8:	48 96       	lddpc	r6,80017bcc <get_spi_in_buffer+0x2c>
80017baa:	1e 26       	rsub	r6,pc
80017bac:	ef 4c ff fc 	st.w	r7[-4],r12
80017bb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017bb4:	f0 08 10 54 	mul	r8,r8,84
80017bb8:	f0 c9 ff dc 	sub	r9,r8,-36
80017bbc:	ec f8 00 2c 	ld.w	r8,r6[44]
80017bc0:	f2 08 00 08 	add	r8,r9,r8
80017bc4:	10 9c       	mov	r12,r8
80017bc6:	2f fd       	sub	sp,-4
80017bc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bcc:	80 01       	ld.sh	r1,r0[0x0]
80017bce:	7a 2e       	ld.w	lr,sp[0x8]

80017bd0 <spi0_int_handler>:
80017bd0:	eb cd 40 c0 	pushm	r6-r7,lr
80017bd4:	1a 97       	mov	r7,sp
80017bd6:	48 56       	lddpc	r6,80017be8 <spi0_int_handler+0x18>
80017bd8:	1e 26       	rsub	r6,pc
80017bda:	30 0c       	mov	r12,0
80017bdc:	f0 16 01 23 	mcall	r6[1164]
80017be0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017be4:	d6 03       	rete
80017be6:	00 00       	add	r0,r0
80017be8:	80 01       	ld.sh	r1,r0[0x0]
80017bea:	7a 5c       	ld.w	r12,sp[0x14]

80017bec <spi1_int_handler>:
80017bec:	eb cd 40 c0 	pushm	r6-r7,lr
80017bf0:	1a 97       	mov	r7,sp
80017bf2:	48 56       	lddpc	r6,80017c04 <spi1_int_handler+0x18>
80017bf4:	1e 26       	rsub	r6,pc
80017bf6:	30 1c       	mov	r12,1
80017bf8:	f0 16 01 23 	mcall	r6[1164]
80017bfc:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017c00:	d6 03       	rete
80017c02:	00 00       	add	r0,r0
80017c04:	80 01       	ld.sh	r1,r0[0x0]
80017c06:	7a 78       	ld.w	r8,sp[0x1c]

80017c08 <pdca_int_handler_spi0>:
80017c08:	eb cd 40 c0 	pushm	r6-r7,lr
80017c0c:	1a 97       	mov	r7,sp
80017c0e:	49 b6       	lddpc	r6,80017c78 <pdca_int_handler_spi0+0x70>
80017c10:	1e 26       	rsub	r6,pc
80017c12:	fc 78 00 00 	mov	r8,-196608
80017c16:	71 b8       	ld.w	r8,r8[0x6c]
80017c18:	fc 78 00 00 	mov	r8,-196608
80017c1c:	70 b8       	ld.w	r8,r8[0x2c]
80017c1e:	30 1c       	mov	r12,1
80017c20:	f0 16 00 7e 	mcall	r6[504]
80017c24:	30 0c       	mov	r12,0
80017c26:	f0 16 00 7e 	mcall	r6[504]
80017c2a:	30 1c       	mov	r12,1
80017c2c:	f0 16 00 98 	mcall	r6[608]
80017c30:	ec f8 00 2c 	ld.w	r8,r6[44]
80017c34:	70 08       	ld.w	r8,r8[0x0]
80017c36:	ec f9 00 2c 	ld.w	r9,r6[44]
80017c3a:	2b 09       	sub	r9,-80
80017c3c:	12 9b       	mov	r11,r9
80017c3e:	10 9c       	mov	r12,r8
80017c40:	c9 8f       	rcall	80017b70 <spi_deselect_device>
80017c42:	ec f8 00 2c 	ld.w	r8,r6[44]
80017c46:	f1 38 00 4a 	ld.ub	r8,r8[74]
80017c4a:	5c 58       	castu.b	r8
80017c4c:	ec f9 00 2c 	ld.w	r9,r6[44]
80017c50:	f3 68 00 45 	st.b	r9[69],r8
80017c54:	ec f9 00 2c 	ld.w	r9,r6[44]
80017c58:	30 08       	mov	r8,0
80017c5a:	f3 68 00 4a 	st.b	r9[74],r8
80017c5e:	ec f8 00 2c 	ld.w	r8,r6[44]
80017c62:	71 38       	ld.w	r8,r8[0x4c]
80017c64:	58 08       	cp.w	r8,0
80017c66:	c0 50       	breq	80017c70 <pdca_int_handler_spi0+0x68>
80017c68:	ec f8 00 2c 	ld.w	r8,r6[44]
80017c6c:	71 38       	ld.w	r8,r8[0x4c]
80017c6e:	5d 18       	icall	r8
80017c70:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017c74:	d6 03       	rete
80017c76:	00 00       	add	r0,r0
80017c78:	80 01       	ld.sh	r1,r0[0x0]
80017c7a:	7a 94       	ld.w	r4,sp[0x24]

80017c7c <initSPI>:
80017c7c:	eb cd 40 c0 	pushm	r6-r7,lr
80017c80:	1a 97       	mov	r7,sp
80017c82:	20 2d       	sub	sp,8
80017c84:	4e 16       	lddpc	r6,80017e08 <initSPI+0x18c>
80017c86:	1e 26       	rsub	r6,pc
80017c88:	ef 4c ff fc 	st.w	r7[-4],r12
80017c8c:	ef 4b ff f8 	st.w	r7[-8],r11
80017c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017c94:	ec f9 00 2c 	ld.w	r9,r6[44]
80017c98:	f0 08 10 54 	mul	r8,r8,84
80017c9c:	f2 08 00 08 	add	r8,r9,r8
80017ca0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ca4:	91 09       	st.w	r8[0x0],r9
80017ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017caa:	ec f9 00 2c 	ld.w	r9,r6[44]
80017cae:	f0 08 10 54 	mul	r8,r8,84
80017cb2:	f2 08 00 08 	add	r8,r9,r8
80017cb6:	f0 c9 ff b0 	sub	r9,r8,-80
80017cba:	30 08       	mov	r8,0
80017cbc:	b2 88       	st.b	r9[0x0],r8
80017cbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017cc2:	ec f9 00 2c 	ld.w	r9,r6[44]
80017cc6:	f0 08 10 54 	mul	r8,r8,84
80017cca:	f2 08 00 08 	add	r8,r9,r8
80017cce:	70 08       	ld.w	r8,r8[0x0]
80017cd0:	10 9c       	mov	r12,r8
80017cd2:	c0 1f       	rcall	80017ad4 <spi_master_init>
80017cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017cd8:	f0 08 10 54 	mul	r8,r8,84
80017cdc:	f0 c9 ff b0 	sub	r9,r8,-80
80017ce0:	ec f8 00 2c 	ld.w	r8,r6[44]
80017ce4:	f2 08 00 0b 	add	r11,r9,r8
80017ce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017cec:	ec f9 00 2c 	ld.w	r9,r6[44]
80017cf0:	f0 08 10 54 	mul	r8,r8,84
80017cf4:	f2 08 00 08 	add	r8,r9,r8
80017cf8:	70 0c       	ld.w	r12,r8[0x0]
80017cfa:	30 08       	mov	r8,0
80017cfc:	e0 69 2d 00 	mov	r9,11520
80017d00:	ea 19 01 31 	orh	r9,0x131
80017d04:	30 0a       	mov	r10,0
80017d06:	f0 16 01 69 	mcall	r6[1444]
80017d0a:	30 0b       	mov	r11,0
80017d0c:	36 0c       	mov	r12,96
80017d0e:	f0 16 00 3e 	mcall	r6[248]
80017d12:	30 0b       	mov	r11,0
80017d14:	36 1c       	mov	r12,97
80017d16:	f0 16 00 3e 	mcall	r6[248]
80017d1a:	30 0b       	mov	r11,0
80017d1c:	36 2c       	mov	r12,98
80017d1e:	f0 16 00 3e 	mcall	r6[248]
80017d22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d26:	ec f9 00 2c 	ld.w	r9,r6[44]
80017d2a:	f0 08 10 54 	mul	r8,r8,84
80017d2e:	f2 08 00 08 	add	r8,r9,r8
80017d32:	f0 c9 ff bc 	sub	r9,r8,-68
80017d36:	30 08       	mov	r8,0
80017d38:	b2 88       	st.b	r9[0x0],r8
80017d3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d3e:	ec f9 00 2c 	ld.w	r9,r6[44]
80017d42:	f0 08 10 54 	mul	r8,r8,84
80017d46:	f2 08 00 08 	add	r8,r9,r8
80017d4a:	f0 c9 ff bc 	sub	r9,r8,-68
80017d4e:	30 08       	mov	r8,0
80017d50:	b2 98       	st.b	r9[0x1],r8
80017d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d56:	ec f9 00 2c 	ld.w	r9,r6[44]
80017d5a:	f0 08 10 54 	mul	r8,r8,84
80017d5e:	f2 08 00 08 	add	r8,r9,r8
80017d62:	f0 c9 ff bc 	sub	r9,r8,-68
80017d66:	30 08       	mov	r8,0
80017d68:	b2 a8       	st.b	r9[0x2],r8
80017d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d6e:	ec f9 00 2c 	ld.w	r9,r6[44]
80017d72:	f0 08 10 54 	mul	r8,r8,84
80017d76:	f2 08 00 08 	add	r8,r9,r8
80017d7a:	f0 c9 ff bc 	sub	r9,r8,-68
80017d7e:	30 08       	mov	r8,0
80017d80:	b2 b8       	st.b	r9[0x3],r8
80017d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d86:	ec f9 00 2c 	ld.w	r9,r6[44]
80017d8a:	f0 08 10 54 	mul	r8,r8,84
80017d8e:	f2 08 00 08 	add	r8,r9,r8
80017d92:	f0 c9 ff b8 	sub	r9,r8,-72
80017d96:	30 18       	mov	r8,1
80017d98:	b2 88       	st.b	r9[0x0],r8
80017d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017d9e:	ec f9 00 2c 	ld.w	r9,r6[44]
80017da2:	f0 08 10 54 	mul	r8,r8,84
80017da6:	f2 08 00 08 	add	r8,r9,r8
80017daa:	f0 c9 ff b8 	sub	r9,r8,-72
80017dae:	30 08       	mov	r8,0
80017db0:	b2 98       	st.b	r9[0x1],r8
80017db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017db6:	ec f9 00 2c 	ld.w	r9,r6[44]
80017dba:	f0 08 10 54 	mul	r8,r8,84
80017dbe:	f2 08 00 08 	add	r8,r9,r8
80017dc2:	f0 c9 ff b8 	sub	r9,r8,-72
80017dc6:	30 18       	mov	r8,1
80017dc8:	b2 b8       	st.b	r9[0x3],r8
80017dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017dce:	ec f9 00 2c 	ld.w	r9,r6[44]
80017dd2:	f0 08 10 54 	mul	r8,r8,84
80017dd6:	f2 08 00 08 	add	r8,r9,r8
80017dda:	2b 48       	sub	r8,-76
80017ddc:	30 09       	mov	r9,0
80017dde:	91 09       	st.w	r8[0x0],r9
80017de0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017de4:	ec f9 00 2c 	ld.w	r9,r6[44]
80017de8:	f0 08 10 54 	mul	r8,r8,84
80017dec:	f2 08 00 08 	add	r8,r9,r8
80017df0:	f0 c9 ff b8 	sub	r9,r8,-72
80017df4:	30 08       	mov	r8,0
80017df6:	b2 a8       	st.b	r9[0x2],r8
80017df8:	ee fc ff f8 	ld.w	r12,r7[-8]
80017dfc:	f0 16 01 aa 	mcall	r6[1704]
80017e00:	2f ed       	sub	sp,-8
80017e02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e06:	00 00       	add	r0,r0
80017e08:	80 01       	ld.sh	r1,r0[0x0]
80017e0a:	7b 0a       	ld.w	r10,sp[0x40]

80017e0c <enableSPI>:
80017e0c:	eb cd 40 c0 	pushm	r6-r7,lr
80017e10:	1a 97       	mov	r7,sp
80017e12:	20 1d       	sub	sp,4
80017e14:	48 a6       	lddpc	r6,80017e3c <enableSPI+0x30>
80017e16:	1e 26       	rsub	r6,pc
80017e18:	ef 4c ff fc 	st.w	r7[-4],r12
80017e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e20:	ec f9 00 2c 	ld.w	r9,r6[44]
80017e24:	f0 08 10 54 	mul	r8,r8,84
80017e28:	f2 08 00 08 	add	r8,r9,r8
80017e2c:	70 08       	ld.w	r8,r8[0x0]
80017e2e:	10 9c       	mov	r12,r8
80017e30:	f0 16 01 ac 	mcall	r6[1712]
80017e34:	2f fd       	sub	sp,-4
80017e36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e3a:	00 00       	add	r0,r0
80017e3c:	80 01       	ld.sh	r1,r0[0x0]
80017e3e:	7c 9a       	ld.w	r10,lr[0x24]

80017e40 <disableSPI>:
80017e40:	eb cd 40 c0 	pushm	r6-r7,lr
80017e44:	1a 97       	mov	r7,sp
80017e46:	20 1d       	sub	sp,4
80017e48:	48 a6       	lddpc	r6,80017e70 <disableSPI+0x30>
80017e4a:	1e 26       	rsub	r6,pc
80017e4c:	ef 4c ff fc 	st.w	r7[-4],r12
80017e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e54:	ec f9 00 2c 	ld.w	r9,r6[44]
80017e58:	f0 08 10 54 	mul	r8,r8,84
80017e5c:	f2 08 00 08 	add	r8,r9,r8
80017e60:	70 08       	ld.w	r8,r8[0x0]
80017e62:	10 9c       	mov	r12,r8
80017e64:	f0 16 01 51 	mcall	r6[1348]
80017e68:	2f fd       	sub	sp,-4
80017e6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e6e:	00 00       	add	r0,r0
80017e70:	80 01       	ld.sh	r1,r0[0x0]
80017e72:	7c ce       	ld.w	lr,lr[0x30]

80017e74 <spiInitDMA>:
80017e74:	eb cd 40 c0 	pushm	r6-r7,lr
80017e78:	1a 97       	mov	r7,sp
80017e7a:	20 2d       	sub	sp,8
80017e7c:	49 c6       	lddpc	r6,80017eec <spiInitDMA+0x78>
80017e7e:	1e 26       	rsub	r6,pc
80017e80:	ef 4c ff fc 	st.w	r7[-4],r12
80017e84:	ef 4b ff f8 	st.w	r7[-8],r11
80017e88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017e8c:	12 98       	mov	r8,r9
80017e8e:	a1 78       	lsl	r8,0x1
80017e90:	12 08       	add	r8,r9
80017e92:	f0 09 15 03 	lsl	r9,r8,0x3
80017e96:	10 19       	sub	r9,r8
80017e98:	f2 c8 ff ff 	sub	r8,r9,-1
80017e9c:	f0 09 15 02 	lsl	r9,r8,0x2
80017ea0:	ec f8 00 2c 	ld.w	r8,r6[44]
80017ea4:	10 09       	add	r9,r8
80017ea6:	ec f8 04 c8 	ld.w	r8,r6[1224]
80017eaa:	91 09       	st.w	r8[0x0],r9
80017eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017eb0:	f0 08 10 54 	mul	r8,r8,84
80017eb4:	f0 c9 ff dc 	sub	r9,r8,-36
80017eb8:	ec f8 00 2c 	ld.w	r8,r6[44]
80017ebc:	10 09       	add	r9,r8
80017ebe:	ec f8 04 c4 	ld.w	r8,r6[1220]
80017ec2:	91 09       	st.w	r8[0x0],r9
80017ec4:	ec fb 04 c8 	ld.w	r11,r6[1224]
80017ec8:	30 0c       	mov	r12,0
80017eca:	f0 16 00 75 	mcall	r6[468]
80017ece:	ec fb 04 c4 	ld.w	r11,r6[1220]
80017ed2:	30 1c       	mov	r12,1
80017ed4:	f0 16 00 75 	mcall	r6[468]
80017ed8:	30 0a       	mov	r10,0
80017eda:	36 1b       	mov	r11,97
80017edc:	fe cc 02 d4 	sub	r12,pc,724
80017ee0:	f0 16 00 3a 	mcall	r6[232]
80017ee4:	2f ed       	sub	sp,-8
80017ee6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017eea:	00 00       	add	r0,r0
80017eec:	80 01       	ld.sh	r1,r0[0x0]
80017eee:	7d 02       	ld.w	r2,lr[0x40]

80017ef0 <spiTriggerDMA>:
80017ef0:	eb cd 40 c0 	pushm	r6-r7,lr
80017ef4:	1a 97       	mov	r7,sp
80017ef6:	20 2d       	sub	sp,8
80017ef8:	4a 86       	lddpc	r6,80017f98 <spiTriggerDMA+0xa8>
80017efa:	1e 26       	rsub	r6,pc
80017efc:	ef 4c ff fc 	st.w	r7[-4],r12
80017f00:	ef 4b ff f8 	st.w	r7[-8],r11
80017f04:	ee fa ff f8 	ld.w	r10,r7[-8]
80017f08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017f0c:	12 98       	mov	r8,r9
80017f0e:	a1 78       	lsl	r8,0x1
80017f10:	12 08       	add	r8,r9
80017f12:	f0 09 15 03 	lsl	r9,r8,0x3
80017f16:	10 19       	sub	r9,r8
80017f18:	f2 c8 ff ff 	sub	r8,r9,-1
80017f1c:	f0 09 15 02 	lsl	r9,r8,0x2
80017f20:	ec f8 00 2c 	ld.w	r8,r6[44]
80017f24:	f2 08 00 08 	add	r8,r9,r8
80017f28:	10 9b       	mov	r11,r8
80017f2a:	30 0c       	mov	r12,0
80017f2c:	f0 16 00 b7 	mcall	r6[732]
80017f30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017f34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f38:	f0 08 10 54 	mul	r8,r8,84
80017f3c:	f0 ca ff dc 	sub	r10,r8,-36
80017f40:	ec f8 00 2c 	ld.w	r8,r6[44]
80017f44:	f4 08 00 08 	add	r8,r10,r8
80017f48:	12 9a       	mov	r10,r9
80017f4a:	10 9b       	mov	r11,r8
80017f4c:	30 1c       	mov	r12,1
80017f4e:	f0 16 00 b7 	mcall	r6[732]
80017f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f56:	f0 08 10 54 	mul	r8,r8,84
80017f5a:	f0 c9 ff b0 	sub	r9,r8,-80
80017f5e:	ec f8 00 2c 	ld.w	r8,r6[44]
80017f62:	10 09       	add	r9,r8
80017f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f68:	ec fa 00 2c 	ld.w	r10,r6[44]
80017f6c:	f0 08 10 54 	mul	r8,r8,84
80017f70:	f4 08 00 08 	add	r8,r10,r8
80017f74:	70 08       	ld.w	r8,r8[0x0]
80017f76:	12 9b       	mov	r11,r9
80017f78:	10 9c       	mov	r12,r8
80017f7a:	fe b0 fd e3 	rcall	80017b40 <spi_select_device>
80017f7e:	30 1c       	mov	r12,1
80017f80:	f0 16 00 b6 	mcall	r6[728]
80017f84:	30 1c       	mov	r12,1
80017f86:	f0 16 00 90 	mcall	r6[576]
80017f8a:	30 0c       	mov	r12,0
80017f8c:	f0 16 00 90 	mcall	r6[576]
80017f90:	2f ed       	sub	sp,-8
80017f92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017f96:	00 00       	add	r0,r0
80017f98:	80 01       	ld.sh	r1,r0[0x0]
80017f9a:	7d 7e       	ld.w	lr,lr[0x5c]

80017f9c <setSPIcallBack>:
80017f9c:	eb cd 40 c0 	pushm	r6-r7,lr
80017fa0:	1a 97       	mov	r7,sp
80017fa2:	20 2d       	sub	sp,8
80017fa4:	48 b6       	lddpc	r6,80017fd0 <setSPIcallBack+0x34>
80017fa6:	1e 26       	rsub	r6,pc
80017fa8:	ef 4c ff fc 	st.w	r7[-4],r12
80017fac:	ef 4b ff f8 	st.w	r7[-8],r11
80017fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fb4:	ec f9 00 2c 	ld.w	r9,r6[44]
80017fb8:	f0 08 10 54 	mul	r8,r8,84
80017fbc:	f2 08 00 08 	add	r8,r9,r8
80017fc0:	2b 48       	sub	r8,-76
80017fc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017fc6:	91 09       	st.w	r8[0x0],r9
80017fc8:	2f ed       	sub	sp,-8
80017fca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017fce:	00 00       	add	r0,r0
80017fd0:	80 01       	ld.sh	r1,r0[0x0]
80017fd2:	7e 2a       	ld.w	r10,pc[0x8]

80017fd4 <pauseSPI>:
80017fd4:	eb cd 40 c0 	pushm	r6-r7,lr
80017fd8:	1a 97       	mov	r7,sp
80017fda:	20 1d       	sub	sp,4
80017fdc:	48 a6       	lddpc	r6,80018004 <pauseSPI+0x30>
80017fde:	1e 26       	rsub	r6,pc
80017fe0:	ef 4c ff fc 	st.w	r7[-4],r12
80017fe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fe8:	ec f9 00 2c 	ld.w	r9,r6[44]
80017fec:	f0 08 10 54 	mul	r8,r8,84
80017ff0:	f2 08 00 08 	add	r8,r9,r8
80017ff4:	f0 c9 ff b8 	sub	r9,r8,-72
80017ff8:	30 08       	mov	r8,0
80017ffa:	b2 b8       	st.b	r9[0x3],r8
80017ffc:	2f fd       	sub	sp,-4
80017ffe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018002:	00 00       	add	r0,r0
80018004:	80 01       	ld.sh	r1,r0[0x0]
80018006:	7e 62       	ld.w	r2,pc[0x18]

80018008 <resumeSPI>:
80018008:	eb cd 40 c0 	pushm	r6-r7,lr
8001800c:	1a 97       	mov	r7,sp
8001800e:	20 1d       	sub	sp,4
80018010:	48 c6       	lddpc	r6,80018040 <resumeSPI+0x38>
80018012:	1e 26       	rsub	r6,pc
80018014:	ef 4c ff fc 	st.w	r7[-4],r12
80018018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001801c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018020:	f0 08 10 54 	mul	r8,r8,84
80018024:	f2 08 00 08 	add	r8,r9,r8
80018028:	f0 c9 ff b8 	sub	r9,r8,-72
8001802c:	30 18       	mov	r8,1
8001802e:	b2 b8       	st.b	r9[0x3],r8
80018030:	ee fc ff fc 	ld.w	r12,r7[-4]
80018034:	f0 16 00 eb 	mcall	r6[940]
80018038:	2f fd       	sub	sp,-4
8001803a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001803e:	00 00       	add	r0,r0
80018040:	80 01       	ld.sh	r1,r0[0x0]
80018042:	7e 96       	ld.w	r6,pc[0x24]

80018044 <activateReceiveSPI>:
80018044:	eb cd 40 c0 	pushm	r6-r7,lr
80018048:	1a 97       	mov	r7,sp
8001804a:	20 1d       	sub	sp,4
8001804c:	48 a6       	lddpc	r6,80018074 <activateReceiveSPI+0x30>
8001804e:	1e 26       	rsub	r6,pc
80018050:	ef 4c ff fc 	st.w	r7[-4],r12
80018054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018058:	ec f9 00 2c 	ld.w	r9,r6[44]
8001805c:	f0 08 10 54 	mul	r8,r8,84
80018060:	f2 08 00 08 	add	r8,r9,r8
80018064:	f0 c9 ff b8 	sub	r9,r8,-72
80018068:	30 18       	mov	r8,1
8001806a:	b2 88       	st.b	r9[0x0],r8
8001806c:	2f fd       	sub	sp,-4
8001806e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018072:	00 00       	add	r0,r0
80018074:	80 01       	ld.sh	r1,r0[0x0]
80018076:	7e d2       	ld.w	r2,pc[0x34]

80018078 <deactivateReceiveSPI>:
80018078:	eb cd 40 c0 	pushm	r6-r7,lr
8001807c:	1a 97       	mov	r7,sp
8001807e:	20 1d       	sub	sp,4
80018080:	48 a6       	lddpc	r6,800180a8 <deactivateReceiveSPI+0x30>
80018082:	1e 26       	rsub	r6,pc
80018084:	ef 4c ff fc 	st.w	r7[-4],r12
80018088:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001808c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018090:	f0 08 10 54 	mul	r8,r8,84
80018094:	f2 08 00 08 	add	r8,r9,r8
80018098:	f0 c9 ff b8 	sub	r9,r8,-72
8001809c:	30 08       	mov	r8,0
8001809e:	b2 88       	st.b	r9[0x0],r8
800180a0:	2f fd       	sub	sp,-4
800180a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800180a6:	00 00       	add	r0,r0
800180a8:	80 01       	ld.sh	r1,r0[0x0]
800180aa:	7f 06       	ld.w	r6,pc[0x40]

800180ac <getTraffic>:
800180ac:	eb cd 40 c0 	pushm	r6-r7,lr
800180b0:	1a 97       	mov	r7,sp
800180b2:	20 1d       	sub	sp,4
800180b4:	48 a6       	lddpc	r6,800180dc <getTraffic+0x30>
800180b6:	1e 26       	rsub	r6,pc
800180b8:	ef 4c ff fc 	st.w	r7[-4],r12
800180bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800180c0:	ec f9 00 2c 	ld.w	r9,r6[44]
800180c4:	f0 08 10 54 	mul	r8,r8,84
800180c8:	f2 08 00 08 	add	r8,r9,r8
800180cc:	2b 88       	sub	r8,-72
800180ce:	11 98       	ld.ub	r8,r8[0x1]
800180d0:	5c 58       	castu.b	r8
800180d2:	10 9c       	mov	r12,r8
800180d4:	2f fd       	sub	sp,-4
800180d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800180da:	00 00       	add	r0,r0
800180dc:	80 01       	ld.sh	r1,r0[0x0]
800180de:	7f 3a       	ld.w	r10,pc[0x4c]

800180e0 <readSPI>:
800180e0:	eb cd 40 c0 	pushm	r6-r7,lr
800180e4:	1a 97       	mov	r7,sp
800180e6:	20 2d       	sub	sp,8
800180e8:	4a b6       	lddpc	r6,80018194 <readSPI+0xb4>
800180ea:	1e 26       	rsub	r6,pc
800180ec:	ef 4c ff f8 	st.w	r7[-8],r12
800180f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180f4:	ec f9 00 2c 	ld.w	r9,r6[44]
800180f8:	f0 08 10 54 	mul	r8,r8,84
800180fc:	f2 08 00 08 	add	r8,r9,r8
80018100:	2b c8       	sub	r8,-68
80018102:	11 88       	ld.ub	r8,r8[0x0]
80018104:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001810c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018110:	f0 08 10 54 	mul	r8,r8,84
80018114:	f4 08 00 08 	add	r8,r10,r8
80018118:	2b c8       	sub	r8,-68
8001811a:	11 98       	ld.ub	r8,r8[0x1]
8001811c:	5c 58       	castu.b	r8
8001811e:	f0 09 18 00 	cp.b	r9,r8
80018122:	ce 70       	breq	800180f0 <readSPI+0x10>
80018124:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001812c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018130:	f0 08 10 54 	mul	r8,r8,84
80018134:	f4 08 00 08 	add	r8,r10,r8
80018138:	2b c8       	sub	r8,-68
8001813a:	11 98       	ld.ub	r8,r8[0x1]
8001813c:	5c 58       	castu.b	r8
8001813e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018142:	f2 09 10 54 	mul	r9,r9,84
80018146:	f4 09 00 09 	add	r9,r10,r9
8001814a:	f2 08 00 08 	add	r8,r9,r8
8001814e:	2d c8       	sub	r8,-36
80018150:	11 88       	ld.ub	r8,r8[0x0]
80018152:	ef 68 ff ff 	st.b	r7[-1],r8
80018156:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001815a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001815e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018162:	f0 08 10 54 	mul	r8,r8,84
80018166:	f4 08 00 08 	add	r8,r10,r8
8001816a:	2b c8       	sub	r8,-68
8001816c:	11 98       	ld.ub	r8,r8[0x1]
8001816e:	5c 58       	castu.b	r8
80018170:	2f f8       	sub	r8,-1
80018172:	5c 58       	castu.b	r8
80018174:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018178:	ec fa 00 2c 	ld.w	r10,r6[44]
8001817c:	f2 09 10 54 	mul	r9,r9,84
80018180:	f4 09 00 09 	add	r9,r10,r9
80018184:	2b c9       	sub	r9,-68
80018186:	b2 98       	st.b	r9[0x1],r8
80018188:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001818c:	10 9c       	mov	r12,r8
8001818e:	2f ed       	sub	sp,-8
80018190:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018194:	80 01       	ld.sh	r1,r0[0x0]
80018196:	7f 6e       	ld.w	lr,pc[0x58]

80018198 <clearSPIReadBuffer>:
80018198:	eb cd 40 c0 	pushm	r6-r7,lr
8001819c:	1a 97       	mov	r7,sp
8001819e:	20 1d       	sub	sp,4
800181a0:	48 e6       	lddpc	r6,800181d8 <clearSPIReadBuffer+0x40>
800181a2:	1e 26       	rsub	r6,pc
800181a4:	ef 4c ff fc 	st.w	r7[-4],r12
800181a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800181ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181b0:	ec fa 00 2c 	ld.w	r10,r6[44]
800181b4:	f0 08 10 54 	mul	r8,r8,84
800181b8:	f4 08 00 08 	add	r8,r10,r8
800181bc:	2b c8       	sub	r8,-68
800181be:	11 88       	ld.ub	r8,r8[0x0]
800181c0:	5c 58       	castu.b	r8
800181c2:	ec fa 00 2c 	ld.w	r10,r6[44]
800181c6:	f2 09 10 54 	mul	r9,r9,84
800181ca:	f4 09 00 09 	add	r9,r10,r9
800181ce:	2b c9       	sub	r9,-68
800181d0:	b2 98       	st.b	r9[0x1],r8
800181d2:	2f fd       	sub	sp,-4
800181d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800181d8:	80 01       	ld.sh	r1,r0[0x0]
800181da:	80 26       	ld.sh	r6,r0[0x4]

800181dc <writeSPI>:
800181dc:	eb cd 40 c0 	pushm	r6-r7,lr
800181e0:	1a 97       	mov	r7,sp
800181e2:	20 3d       	sub	sp,12
800181e4:	4a b6       	lddpc	r6,80018290 <writeSPI+0xb4>
800181e6:	1e 26       	rsub	r6,pc
800181e8:	ef 4c ff f8 	st.w	r7[-8],r12
800181ec:	16 98       	mov	r8,r11
800181ee:	ef 68 ff f4 	st.b	r7[-12],r8
800181f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800181f6:	ec f9 00 2c 	ld.w	r9,r6[44]
800181fa:	f0 08 10 54 	mul	r8,r8,84
800181fe:	f2 08 00 08 	add	r8,r9,r8
80018202:	2b c8       	sub	r8,-68
80018204:	11 a8       	ld.ub	r8,r8[0x2]
80018206:	5c 58       	castu.b	r8
80018208:	2f f8       	sub	r8,-1
8001820a:	5c 58       	castu.b	r8
8001820c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018210:	ef 68 ff ff 	st.b	r7[-1],r8
80018214:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018218:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001821c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018220:	f0 08 10 54 	mul	r8,r8,84
80018224:	f4 08 00 08 	add	r8,r10,r8
80018228:	2b c8       	sub	r8,-68
8001822a:	11 a8       	ld.ub	r8,r8[0x2]
8001822c:	5c 58       	castu.b	r8
8001822e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018232:	f2 09 10 54 	mul	r9,r9,84
80018236:	f4 09 00 09 	add	r9,r10,r9
8001823a:	f2 08 00 08 	add	r8,r9,r8
8001823e:	f0 c9 ff fc 	sub	r9,r8,-4
80018242:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80018246:	b2 88       	st.b	r9[0x0],r8
80018248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001824c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018250:	f0 08 10 54 	mul	r8,r8,84
80018254:	f2 08 00 08 	add	r8,r9,r8
80018258:	f0 c9 ff bc 	sub	r9,r8,-68
8001825c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018260:	b2 a8       	st.b	r9[0x2],r8
80018262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018266:	ec f9 00 2c 	ld.w	r9,r6[44]
8001826a:	f0 08 10 54 	mul	r8,r8,84
8001826e:	f2 08 00 08 	add	r8,r9,r8
80018272:	2b 88       	sub	r8,-72
80018274:	11 b8       	ld.ub	r8,r8[0x3]
80018276:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001827a:	30 18       	mov	r8,1
8001827c:	f0 09 18 00 	cp.b	r9,r8
80018280:	c0 51       	brne	8001828a <writeSPI+0xae>
80018282:	ee fc ff f8 	ld.w	r12,r7[-8]
80018286:	f0 16 00 eb 	mcall	r6[940]
8001828a:	2f dd       	sub	sp,-12
8001828c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018290:	80 01       	ld.sh	r1,r0[0x0]
80018292:	80 6a       	ld.sh	r10,r0[0xc]

80018294 <SPItransmit>:
80018294:	eb cd 40 c0 	pushm	r6-r7,lr
80018298:	1a 97       	mov	r7,sp
8001829a:	20 1d       	sub	sp,4
8001829c:	4d 66       	lddpc	r6,800183f4 <SPItransmit+0x160>
8001829e:	1e 26       	rsub	r6,pc
800182a0:	ef 4c ff fc 	st.w	r7[-4],r12
800182a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800182a8:	ec f9 00 2c 	ld.w	r9,r6[44]
800182ac:	f0 08 10 54 	mul	r8,r8,84
800182b0:	f2 08 00 08 	add	r8,r9,r8
800182b4:	2b c8       	sub	r8,-68
800182b6:	11 a8       	ld.ub	r8,r8[0x2]
800182b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800182bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800182c0:	ec fa 00 2c 	ld.w	r10,r6[44]
800182c4:	f0 08 10 54 	mul	r8,r8,84
800182c8:	f4 08 00 08 	add	r8,r10,r8
800182cc:	2b c8       	sub	r8,-68
800182ce:	11 b8       	ld.ub	r8,r8[0x3]
800182d0:	5c 58       	castu.b	r8
800182d2:	f0 09 18 00 	cp.b	r9,r8
800182d6:	c4 90       	breq	80018368 <SPItransmit+0xd4>
800182d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800182dc:	ec f9 00 2c 	ld.w	r9,r6[44]
800182e0:	f0 08 10 54 	mul	r8,r8,84
800182e4:	f2 08 00 08 	add	r8,r9,r8
800182e8:	70 09       	ld.w	r9,r8[0x0]
800182ea:	ee fa ff fc 	ld.w	r10,r7[-4]
800182ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800182f2:	ec fb 00 2c 	ld.w	r11,r6[44]
800182f6:	f0 08 10 54 	mul	r8,r8,84
800182fa:	f6 08 00 08 	add	r8,r11,r8
800182fe:	2b c8       	sub	r8,-68
80018300:	11 b8       	ld.ub	r8,r8[0x3]
80018302:	5c 58       	castu.b	r8
80018304:	ec fb 00 2c 	ld.w	r11,r6[44]
80018308:	f4 0a 10 54 	mul	r10,r10,84
8001830c:	f6 0a 00 0a 	add	r10,r11,r10
80018310:	f4 08 00 08 	add	r8,r10,r8
80018314:	2f c8       	sub	r8,-4
80018316:	11 88       	ld.ub	r8,r8[0x0]
80018318:	5c 58       	castu.b	r8
8001831a:	93 38       	st.w	r9[0xc],r8
8001831c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018320:	ec f9 00 2c 	ld.w	r9,r6[44]
80018324:	f0 08 10 54 	mul	r8,r8,84
80018328:	f2 08 00 08 	add	r8,r9,r8
8001832c:	f0 c9 ff b8 	sub	r9,r8,-72
80018330:	30 18       	mov	r8,1
80018332:	b2 a8       	st.b	r9[0x2],r8
80018334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001833c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018340:	f0 08 10 54 	mul	r8,r8,84
80018344:	f4 08 00 08 	add	r8,r10,r8
80018348:	2b c8       	sub	r8,-68
8001834a:	11 b8       	ld.ub	r8,r8[0x3]
8001834c:	5c 58       	castu.b	r8
8001834e:	2f f8       	sub	r8,-1
80018350:	5c 58       	castu.b	r8
80018352:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018356:	ec fa 00 2c 	ld.w	r10,r6[44]
8001835a:	f2 09 10 54 	mul	r9,r9,84
8001835e:	f4 09 00 09 	add	r9,r10,r9
80018362:	2b c9       	sub	r9,-68
80018364:	b2 b8       	st.b	r9[0x3],r8
80018366:	c4 38       	rjmp	800183ec <SPItransmit+0x158>
80018368:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001836c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018370:	ec fa 00 2c 	ld.w	r10,r6[44]
80018374:	f0 08 10 54 	mul	r8,r8,84
80018378:	f4 08 00 08 	add	r8,r10,r8
8001837c:	2b c8       	sub	r8,-68
8001837e:	11 a8       	ld.ub	r8,r8[0x2]
80018380:	5c 58       	castu.b	r8
80018382:	ec fa 00 2c 	ld.w	r10,r6[44]
80018386:	f2 09 10 54 	mul	r9,r9,84
8001838a:	f4 09 00 09 	add	r9,r10,r9
8001838e:	2b c9       	sub	r9,-68
80018390:	b2 b8       	st.b	r9[0x3],r8
80018392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018396:	f0 08 10 54 	mul	r8,r8,84
8001839a:	f0 c9 ff b0 	sub	r9,r8,-80
8001839e:	ec f8 00 2c 	ld.w	r8,r6[44]
800183a2:	10 09       	add	r9,r8
800183a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183a8:	ec fa 00 2c 	ld.w	r10,r6[44]
800183ac:	f0 08 10 54 	mul	r8,r8,84
800183b0:	f4 08 00 08 	add	r8,r10,r8
800183b4:	70 08       	ld.w	r8,r8[0x0]
800183b6:	12 9b       	mov	r11,r9
800183b8:	10 9c       	mov	r12,r8
800183ba:	fe b0 fb db 	rcall	80017b70 <spi_deselect_device>
800183be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183c2:	ec f9 00 2c 	ld.w	r9,r6[44]
800183c6:	f0 08 10 54 	mul	r8,r8,84
800183ca:	f2 08 00 08 	add	r8,r9,r8
800183ce:	f0 c9 ff b8 	sub	r9,r8,-72
800183d2:	30 08       	mov	r8,0
800183d4:	b2 a8       	st.b	r9[0x2],r8
800183d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183da:	ec f9 00 2c 	ld.w	r9,r6[44]
800183de:	f0 08 10 54 	mul	r8,r8,84
800183e2:	f2 08 00 08 	add	r8,r9,r8
800183e6:	70 08       	ld.w	r8,r8[0x0]
800183e8:	30 39       	mov	r9,3
800183ea:	91 69       	st.w	r8[0x18],r9
800183ec:	2f fd       	sub	sp,-4
800183ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800183f2:	00 00       	add	r0,r0
800183f4:	80 01       	ld.sh	r1,r0[0x0]
800183f6:	81 22       	st.w	r0[0x8],r2

800183f8 <startSPI>:
800183f8:	eb cd 40 c0 	pushm	r6-r7,lr
800183fc:	1a 97       	mov	r7,sp
800183fe:	20 1d       	sub	sp,4
80018400:	4a f6       	lddpc	r6,800184bc <startSPI+0xc4>
80018402:	1e 26       	rsub	r6,pc
80018404:	ef 4c ff fc 	st.w	r7[-4],r12
80018408:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001840c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018410:	f0 08 10 54 	mul	r8,r8,84
80018414:	f2 08 00 08 	add	r8,r9,r8
80018418:	2b 88       	sub	r8,-72
8001841a:	11 a8       	ld.ub	r8,r8[0x2]
8001841c:	5c 58       	castu.b	r8
8001841e:	c4 c1       	brne	800184b6 <startSPI+0xbe>
80018420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018424:	ec f9 00 2c 	ld.w	r9,r6[44]
80018428:	f0 08 10 54 	mul	r8,r8,84
8001842c:	f2 08 00 08 	add	r8,r9,r8
80018430:	2b c8       	sub	r8,-68
80018432:	11 a8       	ld.ub	r8,r8[0x2]
80018434:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001843c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018440:	f0 08 10 54 	mul	r8,r8,84
80018444:	f4 08 00 08 	add	r8,r10,r8
80018448:	2b c8       	sub	r8,-68
8001844a:	11 b8       	ld.ub	r8,r8[0x3]
8001844c:	5c 58       	castu.b	r8
8001844e:	f0 09 18 00 	cp.b	r9,r8
80018452:	c3 20       	breq	800184b6 <startSPI+0xbe>
80018454:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018458:	f0 08 10 54 	mul	r8,r8,84
8001845c:	f0 c9 ff b0 	sub	r9,r8,-80
80018460:	ec f8 00 2c 	ld.w	r8,r6[44]
80018464:	10 09       	add	r9,r8
80018466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001846a:	ec fa 00 2c 	ld.w	r10,r6[44]
8001846e:	f0 08 10 54 	mul	r8,r8,84
80018472:	f4 08 00 08 	add	r8,r10,r8
80018476:	70 08       	ld.w	r8,r8[0x0]
80018478:	12 9b       	mov	r11,r9
8001847a:	10 9c       	mov	r12,r8
8001847c:	fe b0 fb 62 	rcall	80017b40 <spi_select_device>
80018480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018484:	ec f9 00 2c 	ld.w	r9,r6[44]
80018488:	f0 08 10 54 	mul	r8,r8,84
8001848c:	f2 08 00 08 	add	r8,r9,r8
80018490:	f0 c9 ff b8 	sub	r9,r8,-72
80018494:	30 18       	mov	r8,1
80018496:	b2 a8       	st.b	r9[0x2],r8
80018498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001849c:	ec f9 00 2c 	ld.w	r9,r6[44]
800184a0:	f0 08 10 54 	mul	r8,r8,84
800184a4:	f2 08 00 08 	add	r8,r9,r8
800184a8:	70 08       	ld.w	r8,r8[0x0]
800184aa:	30 39       	mov	r9,3
800184ac:	91 59       	st.w	r8[0x14],r9
800184ae:	ee fc ff fc 	ld.w	r12,r7[-4]
800184b2:	f0 16 01 2d 	mcall	r6[1204]
800184b6:	2f fd       	sub	sp,-4
800184b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184bc:	80 01       	ld.sh	r1,r0[0x0]
800184be:	82 86       	ld.uh	r6,r1[0x0]

800184c0 <SPITransferFinished>:
800184c0:	eb cd 40 c0 	pushm	r6-r7,lr
800184c4:	1a 97       	mov	r7,sp
800184c6:	20 1d       	sub	sp,4
800184c8:	49 16       	lddpc	r6,8001850c <SPITransferFinished+0x4c>
800184ca:	1e 26       	rsub	r6,pc
800184cc:	ef 4c ff fc 	st.w	r7[-4],r12
800184d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800184d4:	ec f9 00 2c 	ld.w	r9,r6[44]
800184d8:	f0 08 10 54 	mul	r8,r8,84
800184dc:	f2 08 00 08 	add	r8,r9,r8
800184e0:	2b c8       	sub	r8,-68
800184e2:	11 a8       	ld.ub	r8,r8[0x2]
800184e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800184e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800184ec:	ec fa 00 2c 	ld.w	r10,r6[44]
800184f0:	f0 08 10 54 	mul	r8,r8,84
800184f4:	f4 08 00 08 	add	r8,r10,r8
800184f8:	2b c8       	sub	r8,-68
800184fa:	11 b8       	ld.ub	r8,r8[0x3]
800184fc:	5c 58       	castu.b	r8
800184fe:	f0 09 18 00 	cp.b	r9,r8
80018502:	5f 08       	sreq	r8
80018504:	10 9c       	mov	r12,r8
80018506:	2f fd       	sub	sp,-4
80018508:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001850c:	80 01       	ld.sh	r1,r0[0x0]
8001850e:	83 4e       	st.w	r1[0x10],lr

80018510 <SPIFlushBuffer>:
80018510:	eb cd 40 c0 	pushm	r6-r7,lr
80018514:	1a 97       	mov	r7,sp
80018516:	20 1d       	sub	sp,4
80018518:	49 36       	lddpc	r6,80018564 <SPIFlushBuffer+0x54>
8001851a:	1e 26       	rsub	r6,pc
8001851c:	ef 4c ff fc 	st.w	r7[-4],r12
80018520:	ee fc ff fc 	ld.w	r12,r7[-4]
80018524:	f0 16 01 eb 	mcall	r6[1964]
80018528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001852c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018530:	f0 08 10 54 	mul	r8,r8,84
80018534:	f2 08 00 08 	add	r8,r9,r8
80018538:	2b c8       	sub	r8,-68
8001853a:	11 a8       	ld.ub	r8,r8[0x2]
8001853c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018544:	ec fa 00 2c 	ld.w	r10,r6[44]
80018548:	f0 08 10 54 	mul	r8,r8,84
8001854c:	f4 08 00 08 	add	r8,r10,r8
80018550:	2b c8       	sub	r8,-68
80018552:	11 b8       	ld.ub	r8,r8[0x3]
80018554:	5c 58       	castu.b	r8
80018556:	f0 09 18 00 	cp.b	r9,r8
8001855a:	ce 71       	brne	80018528 <SPIFlushBuffer+0x18>
8001855c:	2f fd       	sub	sp,-4
8001855e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018562:	00 00       	add	r0,r0
80018564:	80 01       	ld.sh	r1,r0[0x0]
80018566:	83 9e       	st.w	r1[0x24],lr

80018568 <SPIBytesAvailable>:
80018568:	eb cd 40 c0 	pushm	r6-r7,lr
8001856c:	1a 97       	mov	r7,sp
8001856e:	20 1d       	sub	sp,4
80018570:	49 36       	lddpc	r6,800185bc <SPIBytesAvailable+0x54>
80018572:	1e 26       	rsub	r6,pc
80018574:	ef 4c ff fc 	st.w	r7[-4],r12
80018578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001857c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018580:	f0 08 10 54 	mul	r8,r8,84
80018584:	f2 08 00 08 	add	r8,r9,r8
80018588:	2b c8       	sub	r8,-68
8001858a:	11 88       	ld.ub	r8,r8[0x0]
8001858c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018594:	ec fa 00 2c 	ld.w	r10,r6[44]
80018598:	f0 08 10 54 	mul	r8,r8,84
8001859c:	f4 08 00 08 	add	r8,r10,r8
800185a0:	2b c8       	sub	r8,-68
800185a2:	11 98       	ld.ub	r8,r8[0x1]
800185a4:	5c 58       	castu.b	r8
800185a6:	f2 08 01 08 	sub	r8,r9,r8
800185aa:	5c 58       	castu.b	r8
800185ac:	2e 08       	sub	r8,-32
800185ae:	5c 58       	castu.b	r8
800185b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800185b4:	10 9c       	mov	r12,r8
800185b6:	2f fd       	sub	sp,-4
800185b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800185bc:	80 01       	ld.sh	r1,r0[0x0]
800185be:	83 f6       	st.w	r1[0x3c],r6

800185c0 <spi_handler>:
800185c0:	eb cd 40 c0 	pushm	r6-r7,lr
800185c4:	1a 97       	mov	r7,sp
800185c6:	20 2d       	sub	sp,8
800185c8:	4d e6       	lddpc	r6,80018740 <spi_handler+0x180>
800185ca:	1e 26       	rsub	r6,pc
800185cc:	ef 4c ff f8 	st.w	r7[-8],r12
800185d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185d4:	ec f9 00 2c 	ld.w	r9,r6[44]
800185d8:	f0 08 10 54 	mul	r8,r8,84
800185dc:	f2 08 00 08 	add	r8,r9,r8
800185e0:	70 08       	ld.w	r8,r8[0x0]
800185e2:	70 28       	ld.w	r8,r8[0x8]
800185e4:	ef 68 ff fe 	st.b	r7[-2],r8
800185e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185ec:	ec f9 00 2c 	ld.w	r9,r6[44]
800185f0:	f0 08 10 54 	mul	r8,r8,84
800185f4:	f2 08 00 08 	add	r8,r9,r8
800185f8:	70 08       	ld.w	r8,r8[0x0]
800185fa:	70 48       	ld.w	r8,r8[0x10]
800185fc:	e2 18 00 02 	andl	r8,0x2,COH
80018600:	c0 50       	breq	8001860a <spi_handler+0x4a>
80018602:	ee fc ff f8 	ld.w	r12,r7[-8]
80018606:	f0 16 01 2d 	mcall	r6[1204]
8001860a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001860e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018612:	f0 08 10 54 	mul	r8,r8,84
80018616:	f2 08 00 08 	add	r8,r9,r8
8001861a:	2b 88       	sub	r8,-72
8001861c:	11 88       	ld.ub	r8,r8[0x0]
8001861e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018622:	30 18       	mov	r8,1
80018624:	f0 09 18 00 	cp.b	r9,r8
80018628:	e0 81 00 88 	brne	80018738 <spi_handler+0x178>
8001862c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018630:	ec f9 00 2c 	ld.w	r9,r6[44]
80018634:	f0 08 10 54 	mul	r8,r8,84
80018638:	f2 08 00 08 	add	r8,r9,r8
8001863c:	70 08       	ld.w	r8,r8[0x0]
8001863e:	70 48       	ld.w	r8,r8[0x10]
80018640:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018644:	5c 58       	castu.b	r8
80018646:	c7 90       	breq	80018738 <spi_handler+0x178>
80018648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001864c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018650:	f0 09 10 54 	mul	r9,r8,84
80018654:	f4 09 00 09 	add	r9,r10,r9
80018658:	2b 89       	sub	r9,-72
8001865a:	13 99       	ld.ub	r9,r9[0x1]
8001865c:	5c 59       	castu.b	r9
8001865e:	2f f9       	sub	r9,-1
80018660:	5c 59       	castu.b	r9
80018662:	ec fa 00 2c 	ld.w	r10,r6[44]
80018666:	f0 08 10 54 	mul	r8,r8,84
8001866a:	f4 08 00 08 	add	r8,r10,r8
8001866e:	f0 ca ff b8 	sub	r10,r8,-72
80018672:	12 98       	mov	r8,r9
80018674:	b4 98       	st.b	r10[0x1],r8
80018676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001867a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001867e:	f0 08 10 54 	mul	r8,r8,84
80018682:	f2 08 00 08 	add	r8,r9,r8
80018686:	2b c8       	sub	r8,-68
80018688:	11 88       	ld.ub	r8,r8[0x0]
8001868a:	5c 58       	castu.b	r8
8001868c:	2f f8       	sub	r8,-1
8001868e:	5c 58       	castu.b	r8
80018690:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018694:	ef 68 ff ff 	st.b	r7[-1],r8
80018698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001869c:	ec f9 00 2c 	ld.w	r9,r6[44]
800186a0:	f0 08 10 54 	mul	r8,r8,84
800186a4:	f2 08 00 08 	add	r8,r9,r8
800186a8:	2b c8       	sub	r8,-68
800186aa:	11 98       	ld.ub	r8,r8[0x1]
800186ac:	5c 58       	castu.b	r8
800186ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800186b2:	f0 09 18 00 	cp.b	r9,r8
800186b6:	c1 a1       	brne	800186ea <spi_handler+0x12a>
800186b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800186bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800186c0:	ec fa 00 2c 	ld.w	r10,r6[44]
800186c4:	f0 08 10 54 	mul	r8,r8,84
800186c8:	f4 08 00 08 	add	r8,r10,r8
800186cc:	2b c8       	sub	r8,-68
800186ce:	11 98       	ld.ub	r8,r8[0x1]
800186d0:	5c 58       	castu.b	r8
800186d2:	2f f8       	sub	r8,-1
800186d4:	5c 58       	castu.b	r8
800186d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800186da:	ec fa 00 2c 	ld.w	r10,r6[44]
800186de:	f2 09 10 54 	mul	r9,r9,84
800186e2:	f4 09 00 09 	add	r9,r10,r9
800186e6:	2b c9       	sub	r9,-68
800186e8:	b2 98       	st.b	r9[0x1],r8
800186ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800186ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800186f2:	ec fa 00 2c 	ld.w	r10,r6[44]
800186f6:	f0 08 10 54 	mul	r8,r8,84
800186fa:	f4 08 00 08 	add	r8,r10,r8
800186fe:	2b c8       	sub	r8,-68
80018700:	11 88       	ld.ub	r8,r8[0x0]
80018702:	5c 58       	castu.b	r8
80018704:	ec fa 00 2c 	ld.w	r10,r6[44]
80018708:	f2 09 10 54 	mul	r9,r9,84
8001870c:	f4 09 00 09 	add	r9,r10,r9
80018710:	f2 08 00 08 	add	r8,r9,r8
80018714:	f0 c9 ff dc 	sub	r9,r8,-36
80018718:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001871c:	b2 88       	st.b	r9[0x0],r8
8001871e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018722:	ec f9 00 2c 	ld.w	r9,r6[44]
80018726:	f0 08 10 54 	mul	r8,r8,84
8001872a:	f2 08 00 08 	add	r8,r9,r8
8001872e:	f0 c9 ff bc 	sub	r9,r8,-68
80018732:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018736:	b2 88       	st.b	r9[0x0],r8
80018738:	2f ed       	sub	sp,-8
8001873a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001873e:	00 00       	add	r0,r0
80018740:	80 01       	ld.sh	r1,r0[0x0]
80018742:	84 4e       	ld.sh	lr,r2[0x8]

80018744 <osc_get_rate>:
80018744:	eb cd 40 80 	pushm	r7,lr
80018748:	1a 97       	mov	r7,sp
8001874a:	20 1d       	sub	sp,4
8001874c:	18 98       	mov	r8,r12
8001874e:	ef 68 ff fc 	st.b	r7[-4],r8
80018752:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018756:	58 38       	cp.w	r8,3
80018758:	c1 20       	breq	8001877c <osc_get_rate+0x38>
8001875a:	e0 89 00 07 	brgt	80018768 <osc_get_rate+0x24>
8001875e:	58 08       	cp.w	r8,0
80018760:	c0 90       	breq	80018772 <osc_get_rate+0x2e>
80018762:	58 28       	cp.w	r8,2
80018764:	c0 f0       	breq	80018782 <osc_get_rate+0x3e>
80018766:	c1 b8       	rjmp	8001879c <osc_get_rate+0x58>
80018768:	58 48       	cp.w	r8,4
8001876a:	c1 10       	breq	8001878c <osc_get_rate+0x48>
8001876c:	58 58       	cp.w	r8,5
8001876e:	c1 40       	breq	80018796 <osc_get_rate+0x52>
80018770:	c1 68       	rjmp	8001879c <osc_get_rate+0x58>
80018772:	e0 68 24 00 	mov	r8,9216
80018776:	ea 18 00 f4 	orh	r8,0xf4
8001877a:	c1 28       	rjmp	8001879e <osc_get_rate+0x5a>
8001877c:	e0 68 80 00 	mov	r8,32768
80018780:	c0 f8       	rjmp	8001879e <osc_get_rate+0x5a>
80018782:	e0 68 12 00 	mov	r8,4608
80018786:	ea 18 00 7a 	orh	r8,0x7a
8001878a:	c0 a8       	rjmp	8001879e <osc_get_rate+0x5a>
8001878c:	e0 68 0e 00 	mov	r8,3584
80018790:	ea 18 07 27 	orh	r8,0x727
80018794:	c0 58       	rjmp	8001879e <osc_get_rate+0x5a>
80018796:	e0 78 c1 38 	mov	r8,115000
8001879a:	c0 28       	rjmp	8001879e <osc_get_rate+0x5a>
8001879c:	30 08       	mov	r8,0
8001879e:	10 9c       	mov	r12,r8
800187a0:	2f fd       	sub	sp,-4
800187a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800187a6 <sysclk_get_main_hz>:
800187a6:	eb cd 40 c0 	pushm	r6-r7,lr
800187aa:	1a 97       	mov	r7,sp
800187ac:	48 56       	lddpc	r6,800187c0 <sysclk_get_main_hz+0x1a>
800187ae:	1e 26       	rsub	r6,pc
800187b0:	30 0c       	mov	r12,0
800187b2:	cc 9f       	rcall	80018744 <osc_get_rate>
800187b4:	18 98       	mov	r8,r12
800187b6:	a3 68       	lsl	r8,0x2
800187b8:	10 9c       	mov	r12,r8
800187ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187be:	00 00       	add	r0,r0
800187c0:	80 01       	ld.sh	r1,r0[0x0]
800187c2:	86 32       	ld.sh	r2,r3[0x6]

800187c4 <sysclk_get_cpu_hz>:
800187c4:	eb cd 40 c0 	pushm	r6-r7,lr
800187c8:	1a 97       	mov	r7,sp
800187ca:	48 46       	lddpc	r6,800187d8 <sysclk_get_cpu_hz+0x14>
800187cc:	1e 26       	rsub	r6,pc
800187ce:	ce cf       	rcall	800187a6 <sysclk_get_main_hz>
800187d0:	18 98       	mov	r8,r12
800187d2:	10 9c       	mov	r12,r8
800187d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187d8:	80 01       	ld.sh	r1,r0[0x0]
800187da:	86 50       	ld.sh	r0,r3[0xa]

800187dc <uart_handler_0>:
800187dc:	eb cd 40 c0 	pushm	r6-r7,lr
800187e0:	1a 97       	mov	r7,sp
800187e2:	20 2d       	sub	sp,8
800187e4:	4b 26       	lddpc	r6,800188ac <uart_handler_0+0xd0>
800187e6:	1e 26       	rsub	r6,pc
800187e8:	ec f8 00 34 	ld.w	r8,r6[52]
800187ec:	70 18       	ld.w	r8,r8[0x4]
800187ee:	70 58       	ld.w	r8,r8[0x14]
800187f0:	ef 48 ff fc 	st.w	r7[-4],r8
800187f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800187f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800187fc:	5c 58       	castu.b	r8
800187fe:	c2 70       	breq	8001884c <uart_handler_0+0x70>
80018800:	ec f8 00 34 	ld.w	r8,r6[52]
80018804:	70 18       	ld.w	r8,r8[0x4]
80018806:	70 68       	ld.w	r8,r8[0x18]
80018808:	ef 68 ff fb 	st.b	r7[-5],r8
8001880c:	ec f8 00 34 	ld.w	r8,r6[52]
80018810:	f0 f8 02 14 	ld.w	r8,r8[532]
80018814:	58 08       	cp.w	r8,0
80018816:	c0 c1       	brne	8001882e <uart_handler_0+0x52>
80018818:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001881c:	ec f8 00 34 	ld.w	r8,r6[52]
80018820:	f0 c8 fe f1 	sub	r8,r8,-271
80018824:	12 9b       	mov	r11,r9
80018826:	10 9c       	mov	r12,r8
80018828:	f0 16 00 53 	mcall	r6[332]
8001882c:	c1 08       	rjmp	8001884c <uart_handler_0+0x70>
8001882e:	ec f8 00 34 	ld.w	r8,r6[52]
80018832:	f0 f8 02 14 	ld.w	r8,r8[532]
80018836:	70 18       	ld.w	r8,r8[0x4]
80018838:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001883c:	ec f9 00 34 	ld.w	r9,r6[52]
80018840:	f2 f9 02 14 	ld.w	r9,r9[532]
80018844:	72 59       	ld.w	r9,r9[0x14]
80018846:	14 9b       	mov	r11,r10
80018848:	12 9c       	mov	r12,r9
8001884a:	5d 18       	icall	r8
8001884c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018850:	e2 18 00 02 	andl	r8,0x2,COH
80018854:	c2 80       	breq	800188a4 <uart_handler_0+0xc8>
80018856:	ec f8 00 34 	ld.w	r8,r6[52]
8001885a:	2f 48       	sub	r8,-12
8001885c:	10 9c       	mov	r12,r8
8001885e:	f0 16 00 2d 	mcall	r6[180]
80018862:	18 98       	mov	r8,r12
80018864:	58 08       	cp.w	r8,0
80018866:	e0 8a 00 11 	brle	80018888 <uart_handler_0+0xac>
8001886a:	ec f8 00 34 	ld.w	r8,r6[52]
8001886e:	2f 48       	sub	r8,-12
80018870:	10 9c       	mov	r12,r8
80018872:	f0 16 00 44 	mcall	r6[272]
80018876:	18 98       	mov	r8,r12
80018878:	ef 68 ff fb 	st.b	r7[-5],r8
8001887c:	ec f8 00 34 	ld.w	r8,r6[52]
80018880:	70 18       	ld.w	r8,r8[0x4]
80018882:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018886:	91 79       	st.w	r8[0x1c],r9
80018888:	ec f8 00 34 	ld.w	r8,r6[52]
8001888c:	2f 48       	sub	r8,-12
8001888e:	10 9c       	mov	r12,r8
80018890:	f0 16 00 2d 	mcall	r6[180]
80018894:	18 98       	mov	r8,r12
80018896:	58 08       	cp.w	r8,0
80018898:	c0 61       	brne	800188a4 <uart_handler_0+0xc8>
8001889a:	ec f8 00 34 	ld.w	r8,r6[52]
8001889e:	70 18       	ld.w	r8,r8[0x4]
800188a0:	30 29       	mov	r9,2
800188a2:	91 39       	st.w	r8[0xc],r9
800188a4:	2f ed       	sub	sp,-8
800188a6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800188aa:	d6 03       	rete
800188ac:	80 01       	ld.sh	r1,r0[0x0]
800188ae:	86 6a       	ld.sh	r10,r3[0xc]

800188b0 <uart_handler_1>:
800188b0:	eb cd 40 c0 	pushm	r6-r7,lr
800188b4:	1a 97       	mov	r7,sp
800188b6:	20 2d       	sub	sp,8
800188b8:	4b 66       	lddpc	r6,80018990 <uart_handler_1+0xe0>
800188ba:	1e 26       	rsub	r6,pc
800188bc:	ec f8 00 34 	ld.w	r8,r6[52]
800188c0:	f0 f8 02 2c 	ld.w	r8,r8[556]
800188c4:	70 58       	ld.w	r8,r8[0x14]
800188c6:	ef 48 ff fc 	st.w	r7[-4],r8
800188ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800188ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800188d2:	5c 58       	castu.b	r8
800188d4:	c2 80       	breq	80018924 <uart_handler_1+0x74>
800188d6:	ec f8 00 34 	ld.w	r8,r6[52]
800188da:	f0 f8 02 2c 	ld.w	r8,r8[556]
800188de:	70 68       	ld.w	r8,r8[0x18]
800188e0:	ef 68 ff fb 	st.b	r7[-5],r8
800188e4:	ec f8 00 34 	ld.w	r8,r6[52]
800188e8:	f0 f8 04 3c 	ld.w	r8,r8[1084]
800188ec:	58 08       	cp.w	r8,0
800188ee:	c0 c1       	brne	80018906 <uart_handler_1+0x56>
800188f0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800188f4:	ec f8 00 34 	ld.w	r8,r6[52]
800188f8:	f0 c8 fc c9 	sub	r8,r8,-823
800188fc:	12 9b       	mov	r11,r9
800188fe:	10 9c       	mov	r12,r8
80018900:	f0 16 00 53 	mcall	r6[332]
80018904:	c1 08       	rjmp	80018924 <uart_handler_1+0x74>
80018906:	ec f8 00 34 	ld.w	r8,r6[52]
8001890a:	f0 f8 04 3c 	ld.w	r8,r8[1084]
8001890e:	70 18       	ld.w	r8,r8[0x4]
80018910:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018914:	ec f9 00 34 	ld.w	r9,r6[52]
80018918:	f2 f9 04 3c 	ld.w	r9,r9[1084]
8001891c:	72 59       	ld.w	r9,r9[0x14]
8001891e:	14 9b       	mov	r11,r10
80018920:	12 9c       	mov	r12,r9
80018922:	5d 18       	icall	r8
80018924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018928:	e2 18 00 02 	andl	r8,0x2,COH
8001892c:	c2 d0       	breq	80018986 <uart_handler_1+0xd6>
8001892e:	ec f8 00 34 	ld.w	r8,r6[52]
80018932:	f0 c8 fd cc 	sub	r8,r8,-564
80018936:	10 9c       	mov	r12,r8
80018938:	f0 16 00 2d 	mcall	r6[180]
8001893c:	18 98       	mov	r8,r12
8001893e:	58 08       	cp.w	r8,0
80018940:	e0 8a 00 13 	brle	80018966 <uart_handler_1+0xb6>
80018944:	ec f8 00 34 	ld.w	r8,r6[52]
80018948:	f0 c8 fd cc 	sub	r8,r8,-564
8001894c:	10 9c       	mov	r12,r8
8001894e:	f0 16 00 44 	mcall	r6[272]
80018952:	18 98       	mov	r8,r12
80018954:	ef 68 ff fb 	st.b	r7[-5],r8
80018958:	ec f8 00 34 	ld.w	r8,r6[52]
8001895c:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018960:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018964:	91 79       	st.w	r8[0x1c],r9
80018966:	ec f8 00 34 	ld.w	r8,r6[52]
8001896a:	f0 c8 fd cc 	sub	r8,r8,-564
8001896e:	10 9c       	mov	r12,r8
80018970:	f0 16 00 2d 	mcall	r6[180]
80018974:	18 98       	mov	r8,r12
80018976:	58 08       	cp.w	r8,0
80018978:	c0 71       	brne	80018986 <uart_handler_1+0xd6>
8001897a:	ec f8 00 34 	ld.w	r8,r6[52]
8001897e:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018982:	30 29       	mov	r9,2
80018984:	91 39       	st.w	r8[0xc],r9
80018986:	2f ed       	sub	sp,-8
80018988:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001898c:	d6 03       	rete
8001898e:	00 00       	add	r0,r0
80018990:	80 01       	ld.sh	r1,r0[0x0]
80018992:	87 3e       	st.w	r3[0xc],lr

80018994 <uart_handler_2>:
80018994:	eb cd 40 c0 	pushm	r6-r7,lr
80018998:	1a 97       	mov	r7,sp
8001899a:	20 2d       	sub	sp,8
8001899c:	4b 66       	lddpc	r6,80018a74 <uart_handler_2+0xe0>
8001899e:	1e 26       	rsub	r6,pc
800189a0:	ec f8 00 34 	ld.w	r8,r6[52]
800189a4:	f0 f8 04 54 	ld.w	r8,r8[1108]
800189a8:	70 58       	ld.w	r8,r8[0x14]
800189aa:	ef 48 ff fc 	st.w	r7[-4],r8
800189ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800189b6:	5c 58       	castu.b	r8
800189b8:	c2 80       	breq	80018a08 <uart_handler_2+0x74>
800189ba:	ec f8 00 34 	ld.w	r8,r6[52]
800189be:	f0 f8 04 54 	ld.w	r8,r8[1108]
800189c2:	70 68       	ld.w	r8,r8[0x18]
800189c4:	ef 68 ff fb 	st.b	r7[-5],r8
800189c8:	ec f8 00 34 	ld.w	r8,r6[52]
800189cc:	f0 f8 06 64 	ld.w	r8,r8[1636]
800189d0:	58 08       	cp.w	r8,0
800189d2:	c0 c1       	brne	800189ea <uart_handler_2+0x56>
800189d4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800189d8:	ec f8 00 34 	ld.w	r8,r6[52]
800189dc:	f0 c8 fa a1 	sub	r8,r8,-1375
800189e0:	12 9b       	mov	r11,r9
800189e2:	10 9c       	mov	r12,r8
800189e4:	f0 16 00 53 	mcall	r6[332]
800189e8:	c1 08       	rjmp	80018a08 <uart_handler_2+0x74>
800189ea:	ec f8 00 34 	ld.w	r8,r6[52]
800189ee:	f0 f8 06 64 	ld.w	r8,r8[1636]
800189f2:	70 18       	ld.w	r8,r8[0x4]
800189f4:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800189f8:	ec f9 00 34 	ld.w	r9,r6[52]
800189fc:	f2 f9 06 64 	ld.w	r9,r9[1636]
80018a00:	72 59       	ld.w	r9,r9[0x14]
80018a02:	14 9b       	mov	r11,r10
80018a04:	12 9c       	mov	r12,r9
80018a06:	5d 18       	icall	r8
80018a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a0c:	e2 18 00 02 	andl	r8,0x2,COH
80018a10:	c2 d0       	breq	80018a6a <uart_handler_2+0xd6>
80018a12:	ec f8 00 34 	ld.w	r8,r6[52]
80018a16:	f0 c8 fb a4 	sub	r8,r8,-1116
80018a1a:	10 9c       	mov	r12,r8
80018a1c:	f0 16 00 2d 	mcall	r6[180]
80018a20:	18 98       	mov	r8,r12
80018a22:	58 08       	cp.w	r8,0
80018a24:	e0 8a 00 13 	brle	80018a4a <uart_handler_2+0xb6>
80018a28:	ec f8 00 34 	ld.w	r8,r6[52]
80018a2c:	f0 c8 fb a4 	sub	r8,r8,-1116
80018a30:	10 9c       	mov	r12,r8
80018a32:	f0 16 00 44 	mcall	r6[272]
80018a36:	18 98       	mov	r8,r12
80018a38:	ef 68 ff fb 	st.b	r7[-5],r8
80018a3c:	ec f8 00 34 	ld.w	r8,r6[52]
80018a40:	f0 f8 04 54 	ld.w	r8,r8[1108]
80018a44:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018a48:	91 79       	st.w	r8[0x1c],r9
80018a4a:	ec f8 00 34 	ld.w	r8,r6[52]
80018a4e:	f0 c8 fb a4 	sub	r8,r8,-1116
80018a52:	10 9c       	mov	r12,r8
80018a54:	f0 16 00 2d 	mcall	r6[180]
80018a58:	18 98       	mov	r8,r12
80018a5a:	58 08       	cp.w	r8,0
80018a5c:	c0 71       	brne	80018a6a <uart_handler_2+0xd6>
80018a5e:	ec f8 00 34 	ld.w	r8,r6[52]
80018a62:	f0 f8 04 54 	ld.w	r8,r8[1108]
80018a66:	30 29       	mov	r9,2
80018a68:	91 39       	st.w	r8[0xc],r9
80018a6a:	2f ed       	sub	sp,-8
80018a6c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018a70:	d6 03       	rete
80018a72:	00 00       	add	r0,r0
80018a74:	80 01       	ld.sh	r1,r0[0x0]
80018a76:	88 22       	ld.sh	r2,r4[0x4]

80018a78 <uart_handler_3>:
80018a78:	eb cd 40 c0 	pushm	r6-r7,lr
80018a7c:	1a 97       	mov	r7,sp
80018a7e:	20 2d       	sub	sp,8
80018a80:	4b 66       	lddpc	r6,80018b58 <uart_handler_3+0xe0>
80018a82:	1e 26       	rsub	r6,pc
80018a84:	ec f8 00 34 	ld.w	r8,r6[52]
80018a88:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80018a8c:	70 58       	ld.w	r8,r8[0x14]
80018a8e:	ef 48 ff fc 	st.w	r7[-4],r8
80018a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a96:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018a9a:	5c 58       	castu.b	r8
80018a9c:	c2 80       	breq	80018aec <uart_handler_3+0x74>
80018a9e:	ec f8 00 34 	ld.w	r8,r6[52]
80018aa2:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80018aa6:	70 68       	ld.w	r8,r8[0x18]
80018aa8:	ef 68 ff fb 	st.b	r7[-5],r8
80018aac:	ec f8 00 34 	ld.w	r8,r6[52]
80018ab0:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80018ab4:	58 08       	cp.w	r8,0
80018ab6:	c0 c1       	brne	80018ace <uart_handler_3+0x56>
80018ab8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018abc:	ec f8 00 34 	ld.w	r8,r6[52]
80018ac0:	f0 c8 f8 79 	sub	r8,r8,-1927
80018ac4:	12 9b       	mov	r11,r9
80018ac6:	10 9c       	mov	r12,r8
80018ac8:	f0 16 00 53 	mcall	r6[332]
80018acc:	c1 08       	rjmp	80018aec <uart_handler_3+0x74>
80018ace:	ec f8 00 34 	ld.w	r8,r6[52]
80018ad2:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80018ad6:	70 18       	ld.w	r8,r8[0x4]
80018ad8:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018adc:	ec f9 00 34 	ld.w	r9,r6[52]
80018ae0:	f2 f9 08 8c 	ld.w	r9,r9[2188]
80018ae4:	72 59       	ld.w	r9,r9[0x14]
80018ae6:	14 9b       	mov	r11,r10
80018ae8:	12 9c       	mov	r12,r9
80018aea:	5d 18       	icall	r8
80018aec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018af0:	e2 18 00 02 	andl	r8,0x2,COH
80018af4:	c2 d0       	breq	80018b4e <uart_handler_3+0xd6>
80018af6:	ec f8 00 34 	ld.w	r8,r6[52]
80018afa:	f0 c8 f9 7c 	sub	r8,r8,-1668
80018afe:	10 9c       	mov	r12,r8
80018b00:	f0 16 00 2d 	mcall	r6[180]
80018b04:	18 98       	mov	r8,r12
80018b06:	58 08       	cp.w	r8,0
80018b08:	e0 8a 00 13 	brle	80018b2e <uart_handler_3+0xb6>
80018b0c:	ec f8 00 34 	ld.w	r8,r6[52]
80018b10:	f0 c8 f9 7c 	sub	r8,r8,-1668
80018b14:	10 9c       	mov	r12,r8
80018b16:	f0 16 00 44 	mcall	r6[272]
80018b1a:	18 98       	mov	r8,r12
80018b1c:	ef 68 ff fb 	st.b	r7[-5],r8
80018b20:	ec f8 00 34 	ld.w	r8,r6[52]
80018b24:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80018b28:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018b2c:	91 79       	st.w	r8[0x1c],r9
80018b2e:	ec f8 00 34 	ld.w	r8,r6[52]
80018b32:	f0 c8 f9 7c 	sub	r8,r8,-1668
80018b36:	10 9c       	mov	r12,r8
80018b38:	f0 16 00 2d 	mcall	r6[180]
80018b3c:	18 98       	mov	r8,r12
80018b3e:	58 08       	cp.w	r8,0
80018b40:	c0 71       	brne	80018b4e <uart_handler_3+0xd6>
80018b42:	ec f8 00 34 	ld.w	r8,r6[52]
80018b46:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80018b4a:	30 29       	mov	r9,2
80018b4c:	91 39       	st.w	r8[0xc],r9
80018b4e:	2f ed       	sub	sp,-8
80018b50:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018b54:	d6 03       	rete
80018b56:	00 00       	add	r0,r0
80018b58:	80 01       	ld.sh	r1,r0[0x0]
80018b5a:	89 06       	st.w	r4[0x0],r6

80018b5c <uart_handler_4>:
80018b5c:	eb cd 40 c0 	pushm	r6-r7,lr
80018b60:	1a 97       	mov	r7,sp
80018b62:	20 2d       	sub	sp,8
80018b64:	4b 66       	lddpc	r6,80018c3c <uart_handler_4+0xe0>
80018b66:	1e 26       	rsub	r6,pc
80018b68:	ec f8 00 34 	ld.w	r8,r6[52]
80018b6c:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80018b70:	70 58       	ld.w	r8,r8[0x14]
80018b72:	ef 48 ff fc 	st.w	r7[-4],r8
80018b76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b7a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018b7e:	5c 58       	castu.b	r8
80018b80:	c2 80       	breq	80018bd0 <uart_handler_4+0x74>
80018b82:	ec f8 00 34 	ld.w	r8,r6[52]
80018b86:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80018b8a:	70 68       	ld.w	r8,r8[0x18]
80018b8c:	ef 68 ff fb 	st.b	r7[-5],r8
80018b90:	ec f8 00 34 	ld.w	r8,r6[52]
80018b94:	f0 f8 0a b4 	ld.w	r8,r8[2740]
80018b98:	58 08       	cp.w	r8,0
80018b9a:	c0 c1       	brne	80018bb2 <uart_handler_4+0x56>
80018b9c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018ba0:	ec f8 00 34 	ld.w	r8,r6[52]
80018ba4:	f0 c8 f6 51 	sub	r8,r8,-2479
80018ba8:	12 9b       	mov	r11,r9
80018baa:	10 9c       	mov	r12,r8
80018bac:	f0 16 00 53 	mcall	r6[332]
80018bb0:	c1 08       	rjmp	80018bd0 <uart_handler_4+0x74>
80018bb2:	ec f8 00 34 	ld.w	r8,r6[52]
80018bb6:	f0 f8 0a b4 	ld.w	r8,r8[2740]
80018bba:	70 18       	ld.w	r8,r8[0x4]
80018bbc:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018bc0:	ec f9 00 34 	ld.w	r9,r6[52]
80018bc4:	f2 f9 0a b4 	ld.w	r9,r9[2740]
80018bc8:	72 59       	ld.w	r9,r9[0x14]
80018bca:	14 9b       	mov	r11,r10
80018bcc:	12 9c       	mov	r12,r9
80018bce:	5d 18       	icall	r8
80018bd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bd4:	e2 18 00 02 	andl	r8,0x2,COH
80018bd8:	c2 d0       	breq	80018c32 <uart_handler_4+0xd6>
80018bda:	ec f8 00 34 	ld.w	r8,r6[52]
80018bde:	f0 c8 f7 54 	sub	r8,r8,-2220
80018be2:	10 9c       	mov	r12,r8
80018be4:	f0 16 00 2d 	mcall	r6[180]
80018be8:	18 98       	mov	r8,r12
80018bea:	58 08       	cp.w	r8,0
80018bec:	e0 8a 00 13 	brle	80018c12 <uart_handler_4+0xb6>
80018bf0:	ec f8 00 34 	ld.w	r8,r6[52]
80018bf4:	f0 c8 f7 54 	sub	r8,r8,-2220
80018bf8:	10 9c       	mov	r12,r8
80018bfa:	f0 16 00 44 	mcall	r6[272]
80018bfe:	18 98       	mov	r8,r12
80018c00:	ef 68 ff fb 	st.b	r7[-5],r8
80018c04:	ec f8 00 34 	ld.w	r8,r6[52]
80018c08:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80018c0c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018c10:	91 79       	st.w	r8[0x1c],r9
80018c12:	ec f8 00 34 	ld.w	r8,r6[52]
80018c16:	f0 c8 f7 54 	sub	r8,r8,-2220
80018c1a:	10 9c       	mov	r12,r8
80018c1c:	f0 16 00 2d 	mcall	r6[180]
80018c20:	18 98       	mov	r8,r12
80018c22:	58 08       	cp.w	r8,0
80018c24:	c0 71       	brne	80018c32 <uart_handler_4+0xd6>
80018c26:	ec f8 00 34 	ld.w	r8,r6[52]
80018c2a:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80018c2e:	30 29       	mov	r9,2
80018c30:	91 39       	st.w	r8[0xc],r9
80018c32:	2f ed       	sub	sp,-8
80018c34:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018c38:	d6 03       	rete
80018c3a:	00 00       	add	r0,r0
80018c3c:	80 01       	ld.sh	r1,r0[0x0]
80018c3e:	89 ea       	st.w	r4[0x38],r10

80018c40 <register_UART_handler>:
80018c40:	eb cd 40 c0 	pushm	r6-r7,lr
80018c44:	1a 97       	mov	r7,sp
80018c46:	20 1d       	sub	sp,4
80018c48:	4a 56       	lddpc	r6,80018cdc <register_UART_handler+0x9c>
80018c4a:	1e 26       	rsub	r6,pc
80018c4c:	ef 4c ff fc 	st.w	r7[-4],r12
80018c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c54:	58 28       	cp.w	r8,2
80018c56:	c2 00       	breq	80018c96 <register_UART_handler+0x56>
80018c58:	e0 89 00 07 	brgt	80018c66 <register_UART_handler+0x26>
80018c5c:	58 08       	cp.w	r8,0
80018c5e:	c0 90       	breq	80018c70 <register_UART_handler+0x30>
80018c60:	58 18       	cp.w	r8,1
80018c62:	c0 f0       	breq	80018c80 <register_UART_handler+0x40>
80018c64:	c3 98       	rjmp	80018cd6 <register_UART_handler+0x96>
80018c66:	58 38       	cp.w	r8,3
80018c68:	c2 20       	breq	80018cac <register_UART_handler+0x6c>
80018c6a:	58 48       	cp.w	r8,4
80018c6c:	c2 b0       	breq	80018cc2 <register_UART_handler+0x82>
80018c6e:	c3 48       	rjmp	80018cd6 <register_UART_handler+0x96>
80018c70:	30 1a       	mov	r10,1
80018c72:	e0 6b 02 60 	mov	r11,608
80018c76:	fe cc 04 9a 	sub	r12,pc,1178
80018c7a:	f0 16 00 3a 	mcall	r6[232]
80018c7e:	c2 c8       	rjmp	80018cd6 <register_UART_handler+0x96>
80018c80:	ec f8 00 34 	ld.w	r8,r6[52]
80018c84:	f0 f8 02 30 	ld.w	r8,r8[560]
80018c88:	30 1a       	mov	r10,1
80018c8a:	10 9b       	mov	r11,r8
80018c8c:	fe cc 03 dc 	sub	r12,pc,988
80018c90:	f0 16 00 3a 	mcall	r6[232]
80018c94:	c2 18       	rjmp	80018cd6 <register_UART_handler+0x96>
80018c96:	ec f8 00 34 	ld.w	r8,r6[52]
80018c9a:	f0 f8 04 58 	ld.w	r8,r8[1112]
80018c9e:	30 1a       	mov	r10,1
80018ca0:	10 9b       	mov	r11,r8
80018ca2:	fe cc 03 0e 	sub	r12,pc,782
80018ca6:	f0 16 00 3a 	mcall	r6[232]
80018caa:	c1 68       	rjmp	80018cd6 <register_UART_handler+0x96>
80018cac:	ec f8 00 34 	ld.w	r8,r6[52]
80018cb0:	f0 f8 06 80 	ld.w	r8,r8[1664]
80018cb4:	30 1a       	mov	r10,1
80018cb6:	10 9b       	mov	r11,r8
80018cb8:	fe cc 02 40 	sub	r12,pc,576
80018cbc:	f0 16 00 3a 	mcall	r6[232]
80018cc0:	c0 b8       	rjmp	80018cd6 <register_UART_handler+0x96>
80018cc2:	ec f8 00 34 	ld.w	r8,r6[52]
80018cc6:	f0 f8 08 a8 	ld.w	r8,r8[2216]
80018cca:	30 1a       	mov	r10,1
80018ccc:	10 9b       	mov	r11,r8
80018cce:	fe cc 01 72 	sub	r12,pc,370
80018cd2:	f0 16 00 3a 	mcall	r6[232]
80018cd6:	2f fd       	sub	sp,-4
80018cd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018cdc:	80 01       	ld.sh	r1,r0[0x0]
80018cde:	8a ce       	ld.uh	lr,r5[0x8]

80018ce0 <init_UART_int>:
80018ce0:	eb cd 40 c0 	pushm	r6-r7,lr
80018ce4:	1a 97       	mov	r7,sp
80018ce6:	20 1d       	sub	sp,4
80018ce8:	4e 16       	lddpc	r6,80018e6c <init_UART_int+0x18c>
80018cea:	1e 26       	rsub	r6,pc
80018cec:	ef 4c ff fc 	st.w	r7[-4],r12
80018cf0:	ee fa ff fc 	ld.w	r10,r7[-4]
80018cf4:	ec f9 00 34 	ld.w	r9,r6[52]
80018cf8:	e0 68 02 28 	mov	r8,552
80018cfc:	f4 08 02 48 	mul	r8,r10,r8
80018d00:	f2 08 00 08 	add	r8,r9,r8
80018d04:	70 08       	ld.w	r8,r8[0x0]
80018d06:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018d0a:	58 08       	cp.w	r8,0
80018d0c:	e0 8a 00 21 	brle	80018d4e <init_UART_int+0x6e>
80018d10:	ee fa ff fc 	ld.w	r10,r7[-4]
80018d14:	ec f9 00 34 	ld.w	r9,r6[52]
80018d18:	e0 68 02 28 	mov	r8,552
80018d1c:	f4 08 02 48 	mul	r8,r10,r8
80018d20:	f2 08 00 08 	add	r8,r9,r8
80018d24:	f0 c8 fd dc 	sub	r8,r8,-548
80018d28:	11 98       	ld.ub	r8,r8[0x1]
80018d2a:	10 99       	mov	r9,r8
80018d2c:	ee fb ff fc 	ld.w	r11,r7[-4]
80018d30:	ec fa 00 34 	ld.w	r10,r6[52]
80018d34:	e0 68 02 28 	mov	r8,552
80018d38:	f6 08 02 48 	mul	r8,r11,r8
80018d3c:	f4 08 00 08 	add	r8,r10,r8
80018d40:	f0 c8 fd dc 	sub	r8,r8,-548
80018d44:	11 88       	ld.ub	r8,r8[0x0]
80018d46:	12 9b       	mov	r11,r9
80018d48:	10 9c       	mov	r12,r8
80018d4a:	f0 16 00 3e 	mcall	r6[248]
80018d4e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018d52:	ec f9 00 34 	ld.w	r9,r6[52]
80018d56:	e0 68 02 28 	mov	r8,552
80018d5a:	f4 08 02 48 	mul	r8,r10,r8
80018d5e:	f2 08 00 08 	add	r8,r9,r8
80018d62:	70 08       	ld.w	r8,r8[0x0]
80018d64:	e2 18 00 02 	andl	r8,0x2,COH
80018d68:	58 08       	cp.w	r8,0
80018d6a:	e0 8a 00 21 	brle	80018dac <init_UART_int+0xcc>
80018d6e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018d72:	ec f9 00 34 	ld.w	r9,r6[52]
80018d76:	e0 68 02 28 	mov	r8,552
80018d7a:	f4 08 02 48 	mul	r8,r10,r8
80018d7e:	f2 08 00 08 	add	r8,r9,r8
80018d82:	f0 c8 fd dc 	sub	r8,r8,-548
80018d86:	11 b8       	ld.ub	r8,r8[0x3]
80018d88:	10 99       	mov	r9,r8
80018d8a:	ee fb ff fc 	ld.w	r11,r7[-4]
80018d8e:	ec fa 00 34 	ld.w	r10,r6[52]
80018d92:	e0 68 02 28 	mov	r8,552
80018d96:	f6 08 02 48 	mul	r8,r11,r8
80018d9a:	f4 08 00 08 	add	r8,r10,r8
80018d9e:	f0 c8 fd dc 	sub	r8,r8,-548
80018da2:	11 a8       	ld.ub	r8,r8[0x2]
80018da4:	12 9b       	mov	r11,r9
80018da6:	10 9c       	mov	r12,r8
80018da8:	f0 16 00 3e 	mcall	r6[248]
80018dac:	fe b0 fd 0c 	rcall	800187c4 <sysclk_get_cpu_hz>
80018db0:	18 98       	mov	r8,r12
80018db2:	10 9a       	mov	r10,r8
80018db4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018db8:	e0 68 02 28 	mov	r8,552
80018dbc:	f2 08 02 48 	mul	r8,r9,r8
80018dc0:	f0 c9 fd e8 	sub	r9,r8,-536
80018dc4:	ec f8 00 34 	ld.w	r8,r6[52]
80018dc8:	10 09       	add	r9,r8
80018dca:	ee fc ff fc 	ld.w	r12,r7[-4]
80018dce:	ec f8 00 34 	ld.w	r8,r6[52]
80018dd2:	e0 6b 00 8a 	mov	r11,138
80018dd6:	f8 0b 02 4b 	mul	r11,r12,r11
80018dda:	2f fb       	sub	r11,-1
80018ddc:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80018de0:	12 9b       	mov	r11,r9
80018de2:	10 9c       	mov	r12,r8
80018de4:	f0 16 00 68 	mcall	r6[416]
80018de8:	ee fc ff fc 	ld.w	r12,r7[-4]
80018dec:	f0 16 01 f7 	mcall	r6[2012]
80018df0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018df4:	e0 68 02 28 	mov	r8,552
80018df8:	f2 08 02 48 	mul	r8,r9,r8
80018dfc:	f0 c9 ff f4 	sub	r9,r8,-12
80018e00:	ec f8 00 34 	ld.w	r8,r6[52]
80018e04:	f2 08 00 08 	add	r8,r9,r8
80018e08:	10 9c       	mov	r12,r8
80018e0a:	f0 16 01 2c 	mcall	r6[1200]
80018e0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018e12:	e0 68 02 28 	mov	r8,552
80018e16:	f2 08 02 48 	mul	r8,r9,r8
80018e1a:	f0 c9 fe f4 	sub	r9,r8,-268
80018e1e:	ec f8 00 34 	ld.w	r8,r6[52]
80018e22:	f2 08 00 08 	add	r8,r9,r8
80018e26:	2f d8       	sub	r8,-3
80018e28:	10 9c       	mov	r12,r8
80018e2a:	f0 16 01 2c 	mcall	r6[1200]
80018e2e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018e32:	ec f9 00 34 	ld.w	r9,r6[52]
80018e36:	e0 68 02 28 	mov	r8,552
80018e3a:	f4 08 02 48 	mul	r8,r10,r8
80018e3e:	f2 08 00 08 	add	r8,r9,r8
80018e42:	70 08       	ld.w	r8,r8[0x0]
80018e44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018e48:	5c 58       	castu.b	r8
80018e4a:	c0 e0       	breq	80018e66 <init_UART_int+0x186>
80018e4c:	ee fa ff fc 	ld.w	r10,r7[-4]
80018e50:	ec f8 00 34 	ld.w	r8,r6[52]
80018e54:	e0 69 00 8a 	mov	r9,138
80018e58:	f4 09 02 49 	mul	r9,r10,r9
80018e5c:	2f f9       	sub	r9,-1
80018e5e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80018e62:	30 19       	mov	r9,1
80018e64:	91 29       	st.w	r8[0x8],r9
80018e66:	2f fd       	sub	sp,-4
80018e68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e6c:	80 01       	ld.sh	r1,r0[0x0]
80018e6e:	8b 6e       	st.w	r5[0x18],lr

80018e70 <uart_int_get_byte>:
80018e70:	eb cd 40 c0 	pushm	r6-r7,lr
80018e74:	1a 97       	mov	r7,sp
80018e76:	20 1d       	sub	sp,4
80018e78:	48 86       	lddpc	r6,80018e98 <uart_int_get_byte+0x28>
80018e7a:	1e 26       	rsub	r6,pc
80018e7c:	ef 4c ff fc 	st.w	r7[-4],r12
80018e80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e84:	f0 c8 fe f1 	sub	r8,r8,-271
80018e88:	10 9c       	mov	r12,r8
80018e8a:	f0 16 00 44 	mcall	r6[272]
80018e8e:	18 98       	mov	r8,r12
80018e90:	10 9c       	mov	r12,r8
80018e92:	2f fd       	sub	sp,-4
80018e94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e98:	80 01       	ld.sh	r1,r0[0x0]
80018e9a:	8c fe       	ld.uh	lr,r6[0xe]

80018e9c <uart_int_bytes_available>:
80018e9c:	eb cd 40 c0 	pushm	r6-r7,lr
80018ea0:	1a 97       	mov	r7,sp
80018ea2:	20 1d       	sub	sp,4
80018ea4:	48 86       	lddpc	r6,80018ec4 <uart_int_bytes_available+0x28>
80018ea6:	1e 26       	rsub	r6,pc
80018ea8:	ef 4c ff fc 	st.w	r7[-4],r12
80018eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018eb0:	f0 c8 fe f1 	sub	r8,r8,-271
80018eb4:	10 9c       	mov	r12,r8
80018eb6:	f0 16 00 2d 	mcall	r6[180]
80018eba:	18 98       	mov	r8,r12
80018ebc:	10 9c       	mov	r12,r8
80018ebe:	2f fd       	sub	sp,-4
80018ec0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ec4:	80 01       	ld.sh	r1,r0[0x0]
80018ec6:	8d 2a       	st.w	r6[0x8],r10

80018ec8 <uart_int_send_byte>:
80018ec8:	eb cd 40 c0 	pushm	r6-r7,lr
80018ecc:	1a 97       	mov	r7,sp
80018ece:	20 2d       	sub	sp,8
80018ed0:	49 56       	lddpc	r6,80018f24 <uart_int_send_byte+0x5c>
80018ed2:	1e 26       	rsub	r6,pc
80018ed4:	ef 4c ff fc 	st.w	r7[-4],r12
80018ed8:	16 98       	mov	r8,r11
80018eda:	ef 68 ff f8 	st.b	r7[-8],r8
80018ede:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80018ee2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ee6:	2f 48       	sub	r8,-12
80018ee8:	12 9b       	mov	r11,r9
80018eea:	10 9c       	mov	r12,r8
80018eec:	f0 16 00 53 	mcall	r6[332]
80018ef0:	18 98       	mov	r8,r12
80018ef2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018ef6:	30 08       	mov	r8,0
80018ef8:	f0 09 18 00 	cp.b	r9,r8
80018efc:	cf 15       	brlt	80018ede <uart_int_send_byte+0x16>
80018efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f02:	2f 48       	sub	r8,-12
80018f04:	10 9c       	mov	r12,r8
80018f06:	f0 16 00 2d 	mcall	r6[180]
80018f0a:	18 98       	mov	r8,r12
80018f0c:	58 08       	cp.w	r8,0
80018f0e:	e0 8a 00 07 	brle	80018f1c <uart_int_send_byte+0x54>
80018f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f16:	70 18       	ld.w	r8,r8[0x4]
80018f18:	30 29       	mov	r9,2
80018f1a:	91 29       	st.w	r8[0x8],r9
80018f1c:	2f ed       	sub	sp,-8
80018f1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f22:	00 00       	add	r0,r0
80018f24:	80 01       	ld.sh	r1,r0[0x0]
80018f26:	8d 56       	st.w	r6[0x14],r6

80018f28 <uart_int_flush>:
80018f28:	eb cd 40 c0 	pushm	r6-r7,lr
80018f2c:	1a 97       	mov	r7,sp
80018f2e:	20 1d       	sub	sp,4
80018f30:	48 b6       	lddpc	r6,80018f5c <uart_int_flush+0x34>
80018f32:	1e 26       	rsub	r6,pc
80018f34:	ef 4c ff fc 	st.w	r7[-4],r12
80018f38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f3c:	70 18       	ld.w	r8,r8[0x4]
80018f3e:	30 29       	mov	r9,2
80018f40:	91 29       	st.w	r8[0x8],r9
80018f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f46:	2f 48       	sub	r8,-12
80018f48:	10 9c       	mov	r12,r8
80018f4a:	f0 16 01 1e 	mcall	r6[1144]
80018f4e:	18 98       	mov	r8,r12
80018f50:	5c 58       	castu.b	r8
80018f52:	cf 80       	breq	80018f42 <uart_int_flush+0x1a>
80018f54:	2f fd       	sub	sp,-4
80018f56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f5a:	00 00       	add	r0,r0
80018f5c:	80 01       	ld.sh	r1,r0[0x0]
80018f5e:	8d b6       	st.w	r6[0x2c],r6

80018f60 <uart_out_buffer_empty>:
80018f60:	eb cd 40 c0 	pushm	r6-r7,lr
80018f64:	1a 97       	mov	r7,sp
80018f66:	20 1d       	sub	sp,4
80018f68:	48 96       	lddpc	r6,80018f8c <uart_out_buffer_empty+0x2c>
80018f6a:	1e 26       	rsub	r6,pc
80018f6c:	ef 4c ff fc 	st.w	r7[-4],r12
80018f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f74:	2f 48       	sub	r8,-12
80018f76:	10 9c       	mov	r12,r8
80018f78:	f0 16 01 1e 	mcall	r6[1144]
80018f7c:	18 98       	mov	r8,r12
80018f7e:	5c 58       	castu.b	r8
80018f80:	5c 68       	casts.b	r8
80018f82:	10 9c       	mov	r12,r8
80018f84:	2f fd       	sub	sp,-4
80018f86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f8a:	00 00       	add	r0,r0
80018f8c:	80 01       	ld.sh	r1,r0[0x0]
80018f8e:	8d ee       	st.w	r6[0x38],lr

80018f90 <get_UART_handle>:
80018f90:	eb cd 40 c0 	pushm	r6-r7,lr
80018f94:	1a 97       	mov	r7,sp
80018f96:	20 1d       	sub	sp,4
80018f98:	48 96       	lddpc	r6,80018fbc <get_UART_handle+0x2c>
80018f9a:	1e 26       	rsub	r6,pc
80018f9c:	ef 4c ff fc 	st.w	r7[-4],r12
80018fa0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018fa4:	e0 68 02 28 	mov	r8,552
80018fa8:	b1 39       	mul	r9,r8
80018faa:	ec f8 00 34 	ld.w	r8,r6[52]
80018fae:	f2 08 00 08 	add	r8,r9,r8
80018fb2:	10 9c       	mov	r12,r8
80018fb4:	2f fd       	sub	sp,-4
80018fb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018fba:	00 00       	add	r0,r0
80018fbc:	80 01       	ld.sh	r1,r0[0x0]
80018fbe:	8e 1e       	ld.sh	lr,r7[0x2]

80018fc0 <register_write_stream>:
80018fc0:	eb cd 40 c0 	pushm	r6-r7,lr
80018fc4:	1a 97       	mov	r7,sp
80018fc6:	20 2d       	sub	sp,8
80018fc8:	49 16       	lddpc	r6,8001900c <register_write_stream+0x4c>
80018fca:	1e 26       	rsub	r6,pc
80018fcc:	ef 4c ff fc 	st.w	r7[-4],r12
80018fd0:	ef 4b ff f8 	st.w	r7[-8],r11
80018fd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018fd8:	30 09       	mov	r9,0
80018fda:	91 09       	st.w	r8[0x0],r9
80018fdc:	ec f9 05 e4 	ld.w	r9,r6[1508]
80018fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018fe4:	91 19       	st.w	r8[0x4],r9
80018fe6:	ec f9 06 94 	ld.w	r9,r6[1684]
80018fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018fee:	91 29       	st.w	r8[0x8],r9
80018ff0:	ec f9 08 58 	ld.w	r9,r6[2136]
80018ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ff8:	91 39       	st.w	r8[0xc],r9
80018ffa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ffe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019002:	91 59       	st.w	r8[0x14],r9
80019004:	2f ed       	sub	sp,-8
80019006:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001900a:	00 00       	add	r0,r0
8001900c:	80 01       	ld.sh	r1,r0[0x0]
8001900e:	8e 4e       	ld.sh	lr,r7[0x8]

80019010 <register_read_stream>:
80019010:	eb cd 40 80 	pushm	r7,lr
80019014:	1a 97       	mov	r7,sp
80019016:	20 2d       	sub	sp,8
80019018:	ef 4c ff fc 	st.w	r7[-4],r12
8001901c:	ef 4b ff f8 	st.w	r7[-8],r11
80019020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019024:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019028:	f1 49 02 14 	st.w	r8[532],r9
8001902c:	2f ed       	sub	sp,-8
8001902e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80019034 <init_scheduler>:
80019034:	eb cd 40 80 	pushm	r7,lr
80019038:	1a 97       	mov	r7,sp
8001903a:	20 2d       	sub	sp,8
8001903c:	ef 4c ff f8 	st.w	r7[-8],r12
80019040:	30 08       	mov	r8,0
80019042:	ef 48 ff fc 	st.w	r7[-4],r8
80019046:	c2 18       	rjmp	80019088 <init_scheduler+0x54>
80019048:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001904c:	ee fa ff f8 	ld.w	r10,r7[-8]
80019050:	12 98       	mov	r8,r9
80019052:	a1 78       	lsl	r8,0x1
80019054:	12 08       	add	r8,r9
80019056:	2f f8       	sub	r8,-1
80019058:	a5 68       	lsl	r8,0x4
8001905a:	f4 08 00 08 	add	r8,r10,r8
8001905e:	30 09       	mov	r9,0
80019060:	91 09       	st.w	r8[0x0],r9
80019062:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019066:	ee fa ff f8 	ld.w	r10,r7[-8]
8001906a:	ee fb ff f8 	ld.w	r11,r7[-8]
8001906e:	12 98       	mov	r8,r9
80019070:	a1 78       	lsl	r8,0x1
80019072:	12 08       	add	r8,r9
80019074:	a5 68       	lsl	r8,0x4
80019076:	f6 08 00 08 	add	r8,r11,r8
8001907a:	2f 48       	sub	r8,-12
8001907c:	91 0a       	st.w	r8[0x0],r10
8001907e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019082:	2f f8       	sub	r8,-1
80019084:	ef 48 ff fc 	st.w	r7[-4],r8
80019088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001908c:	11 88       	ld.ub	r8,r8[0x0]
8001908e:	10 99       	mov	r9,r8
80019090:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019094:	10 39       	cp.w	r9,r8
80019096:	fe 99 ff d9 	brgt	80019048 <init_scheduler+0x14>
8001909a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001909e:	3f f9       	mov	r9,-1
800190a0:	91 19       	st.w	r8[0x4],r9
800190a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800190a6:	30 09       	mov	r9,0
800190a8:	91 29       	st.w	r8[0x8],r9
800190aa:	2f ed       	sub	sp,-8
800190ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800190b0 <register_task>:
800190b0:	eb cd 40 e0 	pushm	r5-r7,lr
800190b4:	1a 97       	mov	r7,sp
800190b6:	20 5d       	sub	sp,20
800190b8:	4d f6       	lddpc	r6,80019234 <register_task+0x184>
800190ba:	1e 26       	rsub	r6,pc
800190bc:	ef 4c ff fc 	st.w	r7[-4],r12
800190c0:	ef 4b ff f8 	st.w	r7[-8],r11
800190c4:	ef 4a ff f4 	st.w	r7[-12],r10
800190c8:	ef 49 ff f0 	st.w	r7[-16],r9
800190cc:	ef 48 ff ec 	st.w	r7[-20],r8
800190d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800190d4:	58 08       	cp.w	r8,0
800190d6:	c0 a5       	brlt	800190ea <register_task+0x3a>
800190d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190dc:	11 88       	ld.ub	r8,r8[0x0]
800190de:	10 99       	mov	r9,r8
800190e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800190e4:	10 39       	cp.w	r9,r8
800190e6:	e0 89 00 05 	brgt	800190f0 <register_task+0x40>
800190ea:	e0 68 00 ff 	mov	r8,255
800190ee:	c9 f8       	rjmp	8001922c <register_task+0x17c>
800190f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800190f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800190f8:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800190fc:	ee fb ff fc 	ld.w	r11,r7[-4]
80019100:	12 98       	mov	r8,r9
80019102:	a1 78       	lsl	r8,0x1
80019104:	12 08       	add	r8,r9
80019106:	a1 78       	lsl	r8,0x1
80019108:	2f f8       	sub	r8,-1
8001910a:	a3 78       	lsl	r8,0x3
8001910c:	f6 08 00 08 	add	r8,r11,r8
80019110:	14 99       	mov	r9,r10
80019112:	b0 69       	st.h	r8[0xc],r9
80019114:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019118:	ee fa ff ec 	ld.w	r10,r7[-20]
8001911c:	ee fb ff fc 	ld.w	r11,r7[-4]
80019120:	12 98       	mov	r8,r9
80019122:	a1 78       	lsl	r8,0x1
80019124:	12 08       	add	r8,r9
80019126:	2f f8       	sub	r8,-1
80019128:	a5 68       	lsl	r8,0x4
8001912a:	f6 08 00 08 	add	r8,r11,r8
8001912e:	91 0a       	st.w	r8[0x0],r10
80019130:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019134:	ee fa ff fc 	ld.w	r10,r7[-4]
80019138:	12 98       	mov	r8,r9
8001913a:	a1 78       	lsl	r8,0x1
8001913c:	12 08       	add	r8,r9
8001913e:	a5 68       	lsl	r8,0x4
80019140:	f4 08 00 08 	add	r8,r10,r8
80019144:	2e 88       	sub	r8,-24
80019146:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001914a:	91 09       	st.w	r8[0x0],r9
8001914c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019150:	ee fa ff fc 	ld.w	r10,r7[-4]
80019154:	12 98       	mov	r8,r9
80019156:	a1 78       	lsl	r8,0x1
80019158:	12 08       	add	r8,r9
8001915a:	a5 68       	lsl	r8,0x4
8001915c:	f4 08 00 08 	add	r8,r10,r8
80019160:	2e 08       	sub	r8,-32
80019162:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019166:	91 09       	st.w	r8[0x0],r9
80019168:	ee f5 ff f8 	ld.w	r5,r7[-8]
8001916c:	f0 16 00 29 	mcall	r6[164]
80019170:	18 99       	mov	r9,r12
80019172:	ee fa ff fc 	ld.w	r10,r7[-4]
80019176:	0a 98       	mov	r8,r5
80019178:	a1 78       	lsl	r8,0x1
8001917a:	0a 08       	add	r8,r5
8001917c:	a5 68       	lsl	r8,0x4
8001917e:	f4 08 00 08 	add	r8,r10,r8
80019182:	2d c8       	sub	r8,-36
80019184:	91 09       	st.w	r8[0x0],r9
80019186:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001918a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001918e:	12 98       	mov	r8,r9
80019190:	a1 78       	lsl	r8,0x1
80019192:	12 08       	add	r8,r9
80019194:	a5 68       	lsl	r8,0x4
80019196:	f4 08 00 08 	add	r8,r10,r8
8001919a:	2d 88       	sub	r8,-40
8001919c:	30 09       	mov	r9,0
8001919e:	91 09       	st.w	r8[0x0],r9
800191a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800191a4:	ee fa ff fc 	ld.w	r10,r7[-4]
800191a8:	12 98       	mov	r8,r9
800191aa:	a1 78       	lsl	r8,0x1
800191ac:	12 08       	add	r8,r9
800191ae:	2f f8       	sub	r8,-1
800191b0:	a5 68       	lsl	r8,0x4
800191b2:	f4 08 00 08 	add	r8,r10,r8
800191b6:	2f 48       	sub	r8,-12
800191b8:	30 09       	mov	r9,0
800191ba:	91 09       	st.w	r8[0x0],r9
800191bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800191c0:	ee fa ff fc 	ld.w	r10,r7[-4]
800191c4:	12 98       	mov	r8,r9
800191c6:	a1 78       	lsl	r8,0x1
800191c8:	12 08       	add	r8,r9
800191ca:	a5 68       	lsl	r8,0x4
800191cc:	f4 08 00 08 	add	r8,r10,r8
800191d0:	2d 48       	sub	r8,-44
800191d2:	30 09       	mov	r9,0
800191d4:	91 09       	st.w	r8[0x0],r9
800191d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800191da:	ee fa ff fc 	ld.w	r10,r7[-4]
800191de:	f0 c9 ff ff 	sub	r9,r8,-1
800191e2:	12 98       	mov	r8,r9
800191e4:	a1 78       	lsl	r8,0x1
800191e6:	12 08       	add	r8,r9
800191e8:	a5 68       	lsl	r8,0x4
800191ea:	f4 08 00 08 	add	r8,r10,r8
800191ee:	30 09       	mov	r9,0
800191f0:	91 09       	st.w	r8[0x0],r9
800191f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800191f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800191fa:	12 98       	mov	r8,r9
800191fc:	a1 78       	lsl	r8,0x1
800191fe:	12 08       	add	r8,r9
80019200:	a5 68       	lsl	r8,0x4
80019202:	f4 08 00 08 	add	r8,r10,r8
80019206:	2c c8       	sub	r8,-52
80019208:	30 09       	mov	r9,0
8001920a:	91 09       	st.w	r8[0x0],r9
8001920c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019210:	ee fa ff fc 	ld.w	r10,r7[-4]
80019214:	12 98       	mov	r8,r9
80019216:	a1 78       	lsl	r8,0x1
80019218:	12 08       	add	r8,r9
8001921a:	a5 68       	lsl	r8,0x4
8001921c:	f4 08 00 08 	add	r8,r10,r8
80019220:	2c 88       	sub	r8,-56
80019222:	30 09       	mov	r9,0
80019224:	91 09       	st.w	r8[0x0],r9
80019226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001922a:	5c 58       	castu.b	r8
8001922c:	10 9c       	mov	r12,r8
8001922e:	2f bd       	sub	sp,-20
80019230:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80019234:	80 01       	ld.sh	r1,r0[0x0]
80019236:	8f 3e       	st.w	r7[0xc],lr

80019238 <add_task>:
80019238:	eb cd 40 c0 	pushm	r6-r7,lr
8001923c:	1a 97       	mov	r7,sp
8001923e:	20 6d       	sub	sp,24
80019240:	4a d6       	lddpc	r6,800192f4 <add_task+0xbc>
80019242:	1e 26       	rsub	r6,pc
80019244:	ef 4c ff f8 	st.w	r7[-8],r12
80019248:	ef 4b ff f4 	st.w	r7[-12],r11
8001924c:	ef 4a ff f0 	st.w	r7[-16],r10
80019250:	ef 49 ff ec 	st.w	r7[-20],r9
80019254:	ef 48 ff e8 	st.w	r7[-24],r8
80019258:	30 08       	mov	r8,0
8001925a:	ef 48 ff fc 	st.w	r7[-4],r8
8001925e:	c0 68       	rjmp	8001926a <add_task+0x32>
80019260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019264:	2f f8       	sub	r8,-1
80019266:	ef 48 ff fc 	st.w	r7[-4],r8
8001926a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001926e:	11 88       	ld.ub	r8,r8[0x0]
80019270:	10 99       	mov	r9,r8
80019272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019276:	10 39       	cp.w	r9,r8
80019278:	e0 8a 00 10 	brle	80019298 <add_task+0x60>
8001927c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019280:	ee fa ff f8 	ld.w	r10,r7[-8]
80019284:	12 98       	mov	r8,r9
80019286:	a1 78       	lsl	r8,0x1
80019288:	12 08       	add	r8,r9
8001928a:	2f f8       	sub	r8,-1
8001928c:	a5 68       	lsl	r8,0x4
8001928e:	f4 08 00 08 	add	r8,r10,r8
80019292:	70 08       	ld.w	r8,r8[0x0]
80019294:	58 08       	cp.w	r8,0
80019296:	ce 51       	brne	80019260 <add_task+0x28>
80019298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001929c:	11 88       	ld.ub	r8,r8[0x0]
8001929e:	10 99       	mov	r9,r8
800192a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192a4:	10 39       	cp.w	r9,r8
800192a6:	e0 89 00 04 	brgt	800192ae <add_task+0x76>
800192aa:	30 08       	mov	r8,0
800192ac:	c2 08       	rjmp	800192ec <add_task+0xb4>
800192ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800192b2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800192b6:	ee fa ff f4 	ld.w	r10,r7[-12]
800192ba:	ee fb ff fc 	ld.w	r11,r7[-4]
800192be:	ee fc ff f8 	ld.w	r12,r7[-8]
800192c2:	f0 16 00 61 	mcall	r6[388]
800192c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800192ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800192ce:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800192d2:	ee fb ff f8 	ld.w	r11,r7[-8]
800192d6:	12 98       	mov	r8,r9
800192d8:	a1 78       	lsl	r8,0x1
800192da:	12 08       	add	r8,r9
800192dc:	a1 78       	lsl	r8,0x1
800192de:	2f f8       	sub	r8,-1
800192e0:	a3 78       	lsl	r8,0x3
800192e2:	f6 08 00 08 	add	r8,r11,r8
800192e6:	14 99       	mov	r9,r10
800192e8:	b0 69       	st.h	r8[0xc],r9
800192ea:	30 18       	mov	r8,1
800192ec:	10 9c       	mov	r12,r8
800192ee:	2f ad       	sub	sp,-24
800192f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800192f4:	80 01       	ld.sh	r1,r0[0x0]
800192f6:	90 c6       	ld.uh	r6,r8[0x8]

800192f8 <sort_taskset_by_period>:
800192f8:	eb cd 40 80 	pushm	r7,lr
800192fc:	1a 97       	mov	r7,sp
800192fe:	20 fd       	sub	sp,60
80019300:	ef 4c ff c4 	st.w	r7[-60],r12
80019304:	30 08       	mov	r8,0
80019306:	ef 68 ff ff 	st.b	r7[-1],r8
8001930a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001930e:	11 89       	ld.ub	r9,r8[0x0]
80019310:	30 18       	mov	r8,1
80019312:	f0 09 18 00 	cp.b	r9,r8
80019316:	e0 8b 01 1d 	brhi	80019550 <sort_taskset_by_period+0x258>
8001931a:	c2 39       	rjmp	80019560 <sort_taskset_by_period+0x268>
8001931c:	30 18       	mov	r8,1
8001931e:	ef 68 ff ff 	st.b	r7[-1],r8
80019322:	30 08       	mov	r8,0
80019324:	ef 48 ff f8 	st.w	r7[-8],r8
80019328:	c0 99       	rjmp	8001953a <sort_taskset_by_period+0x242>
8001932a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001932e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019332:	12 98       	mov	r8,r9
80019334:	a1 78       	lsl	r8,0x1
80019336:	12 08       	add	r8,r9
80019338:	2f f8       	sub	r8,-1
8001933a:	a5 68       	lsl	r8,0x4
8001933c:	f4 08 00 08 	add	r8,r10,r8
80019340:	70 08       	ld.w	r8,r8[0x0]
80019342:	58 08       	cp.w	r8,0
80019344:	c1 11       	brne	80019366 <sort_taskset_by_period+0x6e>
80019346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001934a:	f0 c9 ff ff 	sub	r9,r8,-1
8001934e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019352:	12 98       	mov	r8,r9
80019354:	a1 78       	lsl	r8,0x1
80019356:	12 08       	add	r8,r9
80019358:	2f f8       	sub	r8,-1
8001935a:	a5 68       	lsl	r8,0x4
8001935c:	f4 08 00 08 	add	r8,r10,r8
80019360:	70 08       	ld.w	r8,r8[0x0]
80019362:	58 08       	cp.w	r8,0
80019364:	c3 e1       	brne	800193e0 <sort_taskset_by_period+0xe8>
80019366:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001936a:	ee fa ff c4 	ld.w	r10,r7[-60]
8001936e:	12 98       	mov	r8,r9
80019370:	a1 78       	lsl	r8,0x1
80019372:	12 08       	add	r8,r9
80019374:	2f f8       	sub	r8,-1
80019376:	a5 68       	lsl	r8,0x4
80019378:	f4 08 00 08 	add	r8,r10,r8
8001937c:	70 08       	ld.w	r8,r8[0x0]
8001937e:	58 08       	cp.w	r8,0
80019380:	e0 80 00 d8 	breq	80019530 <sort_taskset_by_period+0x238>
80019384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019388:	f0 c9 ff ff 	sub	r9,r8,-1
8001938c:	ee fa ff c4 	ld.w	r10,r7[-60]
80019390:	12 98       	mov	r8,r9
80019392:	a1 78       	lsl	r8,0x1
80019394:	12 08       	add	r8,r9
80019396:	2f f8       	sub	r8,-1
80019398:	a5 68       	lsl	r8,0x4
8001939a:	f4 08 00 08 	add	r8,r10,r8
8001939e:	70 08       	ld.w	r8,r8[0x0]
800193a0:	58 08       	cp.w	r8,0
800193a2:	e0 80 00 c7 	breq	80019530 <sort_taskset_by_period+0x238>
800193a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800193aa:	ee fa ff c4 	ld.w	r10,r7[-60]
800193ae:	12 98       	mov	r8,r9
800193b0:	a1 78       	lsl	r8,0x1
800193b2:	12 08       	add	r8,r9
800193b4:	a5 68       	lsl	r8,0x4
800193b6:	f4 08 00 08 	add	r8,r10,r8
800193ba:	2e 08       	sub	r8,-32
800193bc:	70 0a       	ld.w	r10,r8[0x0]
800193be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800193c2:	f0 c9 ff ff 	sub	r9,r8,-1
800193c6:	ee fb ff c4 	ld.w	r11,r7[-60]
800193ca:	12 98       	mov	r8,r9
800193cc:	a1 78       	lsl	r8,0x1
800193ce:	12 08       	add	r8,r9
800193d0:	a5 68       	lsl	r8,0x4
800193d2:	f6 08 00 08 	add	r8,r11,r8
800193d6:	2e 08       	sub	r8,-32
800193d8:	70 08       	ld.w	r8,r8[0x0]
800193da:	10 3a       	cp.w	r10,r8
800193dc:	e0 88 00 aa 	brls	80019530 <sort_taskset_by_period+0x238>
800193e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800193e4:	ee fa ff c4 	ld.w	r10,r7[-60]
800193e8:	12 98       	mov	r8,r9
800193ea:	a1 78       	lsl	r8,0x1
800193ec:	12 08       	add	r8,r9
800193ee:	a5 68       	lsl	r8,0x4
800193f0:	f4 08 00 08 	add	r8,r10,r8
800193f4:	2f 48       	sub	r8,-12
800193f6:	ee cb 00 38 	sub	r11,r7,56
800193fa:	10 9a       	mov	r10,r8
800193fc:	f6 c8 00 00 	sub	r8,r11,0
80019400:	f4 c9 00 00 	sub	r9,r10,0
80019404:	72 0c       	ld.w	r12,r9[0x0]
80019406:	91 0c       	st.w	r8[0x0],r12
80019408:	72 1c       	ld.w	r12,r9[0x4]
8001940a:	91 1c       	st.w	r8[0x4],r12
8001940c:	72 2c       	ld.w	r12,r9[0x8]
8001940e:	91 2c       	st.w	r8[0x8],r12
80019410:	72 39       	ld.w	r9,r9[0xc]
80019412:	91 39       	st.w	r8[0xc],r9
80019414:	f6 c8 ff f0 	sub	r8,r11,-16
80019418:	f4 c9 ff f0 	sub	r9,r10,-16
8001941c:	72 0c       	ld.w	r12,r9[0x0]
8001941e:	91 0c       	st.w	r8[0x0],r12
80019420:	72 1c       	ld.w	r12,r9[0x4]
80019422:	91 1c       	st.w	r8[0x4],r12
80019424:	72 2c       	ld.w	r12,r9[0x8]
80019426:	91 2c       	st.w	r8[0x8],r12
80019428:	72 39       	ld.w	r9,r9[0xc]
8001942a:	91 39       	st.w	r8[0xc],r9
8001942c:	f6 c8 ff e0 	sub	r8,r11,-32
80019430:	f4 c9 ff e0 	sub	r9,r10,-32
80019434:	72 0a       	ld.w	r10,r9[0x0]
80019436:	91 0a       	st.w	r8[0x0],r10
80019438:	72 1a       	ld.w	r10,r9[0x4]
8001943a:	91 1a       	st.w	r8[0x4],r10
8001943c:	72 2a       	ld.w	r10,r9[0x8]
8001943e:	91 2a       	st.w	r8[0x8],r10
80019440:	72 39       	ld.w	r9,r9[0xc]
80019442:	91 39       	st.w	r8[0xc],r9
80019444:	ee fa ff f8 	ld.w	r10,r7[-8]
80019448:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001944c:	f0 c9 ff ff 	sub	r9,r8,-1
80019450:	ee fb ff c4 	ld.w	r11,r7[-60]
80019454:	14 98       	mov	r8,r10
80019456:	a1 78       	lsl	r8,0x1
80019458:	14 08       	add	r8,r10
8001945a:	a5 68       	lsl	r8,0x4
8001945c:	f6 08 00 08 	add	r8,r11,r8
80019460:	f0 ca ff f4 	sub	r10,r8,-12
80019464:	ee fb ff c4 	ld.w	r11,r7[-60]
80019468:	12 98       	mov	r8,r9
8001946a:	a1 78       	lsl	r8,0x1
8001946c:	12 08       	add	r8,r9
8001946e:	a5 68       	lsl	r8,0x4
80019470:	f6 08 00 08 	add	r8,r11,r8
80019474:	2f 48       	sub	r8,-12
80019476:	14 9b       	mov	r11,r10
80019478:	10 9a       	mov	r10,r8
8001947a:	f6 c8 00 00 	sub	r8,r11,0
8001947e:	f4 c9 00 00 	sub	r9,r10,0
80019482:	72 0c       	ld.w	r12,r9[0x0]
80019484:	91 0c       	st.w	r8[0x0],r12
80019486:	72 1c       	ld.w	r12,r9[0x4]
80019488:	91 1c       	st.w	r8[0x4],r12
8001948a:	72 2c       	ld.w	r12,r9[0x8]
8001948c:	91 2c       	st.w	r8[0x8],r12
8001948e:	72 39       	ld.w	r9,r9[0xc]
80019490:	91 39       	st.w	r8[0xc],r9
80019492:	f6 c8 ff f0 	sub	r8,r11,-16
80019496:	f4 c9 ff f0 	sub	r9,r10,-16
8001949a:	72 0c       	ld.w	r12,r9[0x0]
8001949c:	91 0c       	st.w	r8[0x0],r12
8001949e:	72 1c       	ld.w	r12,r9[0x4]
800194a0:	91 1c       	st.w	r8[0x4],r12
800194a2:	72 2c       	ld.w	r12,r9[0x8]
800194a4:	91 2c       	st.w	r8[0x8],r12
800194a6:	72 39       	ld.w	r9,r9[0xc]
800194a8:	91 39       	st.w	r8[0xc],r9
800194aa:	f6 c8 ff e0 	sub	r8,r11,-32
800194ae:	f4 c9 ff e0 	sub	r9,r10,-32
800194b2:	72 0a       	ld.w	r10,r9[0x0]
800194b4:	91 0a       	st.w	r8[0x0],r10
800194b6:	72 1a       	ld.w	r10,r9[0x4]
800194b8:	91 1a       	st.w	r8[0x4],r10
800194ba:	72 2a       	ld.w	r10,r9[0x8]
800194bc:	91 2a       	st.w	r8[0x8],r10
800194be:	72 39       	ld.w	r9,r9[0xc]
800194c0:	91 39       	st.w	r8[0xc],r9
800194c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800194c6:	f0 c9 ff ff 	sub	r9,r8,-1
800194ca:	ee fa ff c4 	ld.w	r10,r7[-60]
800194ce:	12 98       	mov	r8,r9
800194d0:	a1 78       	lsl	r8,0x1
800194d2:	12 08       	add	r8,r9
800194d4:	a5 68       	lsl	r8,0x4
800194d6:	f4 08 00 08 	add	r8,r10,r8
800194da:	2f 48       	sub	r8,-12
800194dc:	10 9b       	mov	r11,r8
800194de:	ee ca 00 38 	sub	r10,r7,56
800194e2:	f6 c8 00 00 	sub	r8,r11,0
800194e6:	f4 c9 00 00 	sub	r9,r10,0
800194ea:	72 0c       	ld.w	r12,r9[0x0]
800194ec:	91 0c       	st.w	r8[0x0],r12
800194ee:	72 1c       	ld.w	r12,r9[0x4]
800194f0:	91 1c       	st.w	r8[0x4],r12
800194f2:	72 2c       	ld.w	r12,r9[0x8]
800194f4:	91 2c       	st.w	r8[0x8],r12
800194f6:	72 39       	ld.w	r9,r9[0xc]
800194f8:	91 39       	st.w	r8[0xc],r9
800194fa:	f6 c8 ff f0 	sub	r8,r11,-16
800194fe:	f4 c9 ff f0 	sub	r9,r10,-16
80019502:	72 0c       	ld.w	r12,r9[0x0]
80019504:	91 0c       	st.w	r8[0x0],r12
80019506:	72 1c       	ld.w	r12,r9[0x4]
80019508:	91 1c       	st.w	r8[0x4],r12
8001950a:	72 2c       	ld.w	r12,r9[0x8]
8001950c:	91 2c       	st.w	r8[0x8],r12
8001950e:	72 39       	ld.w	r9,r9[0xc]
80019510:	91 39       	st.w	r8[0xc],r9
80019512:	f6 c8 ff e0 	sub	r8,r11,-32
80019516:	f4 c9 ff e0 	sub	r9,r10,-32
8001951a:	72 0a       	ld.w	r10,r9[0x0]
8001951c:	91 0a       	st.w	r8[0x0],r10
8001951e:	72 1a       	ld.w	r10,r9[0x4]
80019520:	91 1a       	st.w	r8[0x4],r10
80019522:	72 2a       	ld.w	r10,r9[0x8]
80019524:	91 2a       	st.w	r8[0x8],r10
80019526:	72 39       	ld.w	r9,r9[0xc]
80019528:	91 39       	st.w	r8[0xc],r9
8001952a:	30 08       	mov	r8,0
8001952c:	ef 68 ff ff 	st.b	r7[-1],r8
80019530:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019534:	2f f8       	sub	r8,-1
80019536:	ef 48 ff f8 	st.w	r7[-8],r8
8001953a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001953e:	11 88       	ld.ub	r8,r8[0x0]
80019540:	f0 c9 00 01 	sub	r9,r8,1
80019544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019548:	10 39       	cp.w	r9,r8
8001954a:	fe 99 fe f0 	brgt	8001932a <sort_taskset_by_period+0x32>
8001954e:	c0 28       	rjmp	80019552 <sort_taskset_by_period+0x25a>
80019550:	d7 03       	nop
80019552:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019556:	ec 18 00 01 	eorl	r8,0x1
8001955a:	5c 58       	castu.b	r8
8001955c:	fe 91 fe e0 	brne	8001931c <sort_taskset_by_period+0x24>
80019560:	2f 1d       	sub	sp,-60
80019562:	e3 cd 80 80 	ldm	sp++,r7,pc

80019566 <run_scheduler_update>:
80019566:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001956a:	1a 97       	mov	r7,sp
8001956c:	20 9d       	sub	sp,36
8001956e:	fe f6 04 0a 	ld.w	r6,pc[1034]
80019572:	1e 26       	rsub	r6,pc
80019574:	ef 4c ff e0 	st.w	r7[-32],r12
80019578:	16 98       	mov	r8,r11
8001957a:	ef 68 ff dc 	st.b	r7[-36],r8
8001957e:	30 08       	mov	r8,0
80019580:	ef 48 ff e8 	st.w	r7[-24],r8
80019584:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019588:	70 28       	ld.w	r8,r8[0x8]
8001958a:	ef 48 ff e4 	st.w	r7[-28],r8
8001958e:	e0 8f 01 e5 	bral	80019958 <run_scheduler_update+0x3f2>
80019592:	f0 16 00 29 	mcall	r6[164]
80019596:	18 98       	mov	r8,r12
80019598:	ef 48 ff f4 	st.w	r7[-12],r8
8001959c:	ee f9 ff e4 	ld.w	r9,r7[-28]
800195a0:	ee fa ff e0 	ld.w	r10,r7[-32]
800195a4:	12 98       	mov	r8,r9
800195a6:	a1 78       	lsl	r8,0x1
800195a8:	12 08       	add	r8,r9
800195aa:	2f f8       	sub	r8,-1
800195ac:	a5 68       	lsl	r8,0x4
800195ae:	f4 08 00 08 	add	r8,r10,r8
800195b2:	70 08       	ld.w	r8,r8[0x0]
800195b4:	58 08       	cp.w	r8,0
800195b6:	e0 80 01 cc 	breq	8001994e <run_scheduler_update+0x3e8>
800195ba:	ee f9 ff e4 	ld.w	r9,r7[-28]
800195be:	ee fa ff e0 	ld.w	r10,r7[-32]
800195c2:	12 98       	mov	r8,r9
800195c4:	a1 78       	lsl	r8,0x1
800195c6:	12 08       	add	r8,r9
800195c8:	a5 68       	lsl	r8,0x4
800195ca:	f4 08 00 08 	add	r8,r10,r8
800195ce:	2e 88       	sub	r8,-24
800195d0:	70 08       	ld.w	r8,r8[0x0]
800195d2:	58 08       	cp.w	r8,0
800195d4:	e0 80 01 bd 	breq	8001994e <run_scheduler_update+0x3e8>
800195d8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800195dc:	ee fa ff e0 	ld.w	r10,r7[-32]
800195e0:	12 98       	mov	r8,r9
800195e2:	a1 78       	lsl	r8,0x1
800195e4:	12 08       	add	r8,r9
800195e6:	a5 68       	lsl	r8,0x4
800195e8:	f4 08 00 08 	add	r8,r10,r8
800195ec:	2d c8       	sub	r8,-36
800195ee:	70 09       	ld.w	r9,r8[0x0]
800195f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800195f4:	10 39       	cp.w	r9,r8
800195f6:	e0 8b 01 ac 	brhi	8001994e <run_scheduler_update+0x3e8>
800195fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800195fe:	ee fa ff e0 	ld.w	r10,r7[-32]
80019602:	12 98       	mov	r8,r9
80019604:	a1 78       	lsl	r8,0x1
80019606:	12 08       	add	r8,r9
80019608:	a5 68       	lsl	r8,0x4
8001960a:	f4 08 00 08 	add	r8,r10,r8
8001960e:	2d c8       	sub	r8,-36
80019610:	70 08       	ld.w	r8,r8[0x0]
80019612:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019616:	10 19       	sub	r9,r8
80019618:	ef 49 ff f8 	st.w	r7[-8],r9
8001961c:	f0 16 00 29 	mcall	r6[164]
80019620:	18 98       	mov	r8,r12
80019622:	ef 48 ff fc 	st.w	r7[-4],r8
80019626:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001962a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001962e:	12 98       	mov	r8,r9
80019630:	a1 78       	lsl	r8,0x1
80019632:	12 08       	add	r8,r9
80019634:	2f f8       	sub	r8,-1
80019636:	a5 68       	lsl	r8,0x4
80019638:	f4 08 00 08 	add	r8,r10,r8
8001963c:	70 08       	ld.w	r8,r8[0x0]
8001963e:	ef 48 ff ec 	st.w	r7[-20],r8
80019642:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019646:	5d 18       	icall	r8
80019648:	18 98       	mov	r8,r12
8001964a:	ef 48 ff f0 	st.w	r7[-16],r8
8001964e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019652:	ee fa ff e0 	ld.w	r10,r7[-32]
80019656:	12 98       	mov	r8,r9
80019658:	a1 78       	lsl	r8,0x1
8001965a:	12 08       	add	r8,r9
8001965c:	2f f8       	sub	r8,-1
8001965e:	a5 68       	lsl	r8,0x4
80019660:	f4 08 00 08 	add	r8,r10,r8
80019664:	2f 48       	sub	r8,-12
80019666:	70 08       	ld.w	r8,r8[0x0]
80019668:	58 08       	cp.w	r8,0
8001966a:	c0 40       	breq	80019672 <run_scheduler_update+0x10c>
8001966c:	58 18       	cp.w	r8,1
8001966e:	c2 90       	breq	800196c0 <run_scheduler_update+0x15a>
80019670:	c4 58       	rjmp	800196fa <run_scheduler_update+0x194>
80019672:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019676:	ee fa ff e4 	ld.w	r10,r7[-28]
8001967a:	ee fb ff e0 	ld.w	r11,r7[-32]
8001967e:	14 98       	mov	r8,r10
80019680:	a1 78       	lsl	r8,0x1
80019682:	14 08       	add	r8,r10
80019684:	a5 68       	lsl	r8,0x4
80019686:	f6 08 00 08 	add	r8,r11,r8
8001968a:	2d c8       	sub	r8,-36
8001968c:	70 0b       	ld.w	r11,r8[0x0]
8001968e:	ee fa ff e4 	ld.w	r10,r7[-28]
80019692:	ee fc ff e0 	ld.w	r12,r7[-32]
80019696:	14 98       	mov	r8,r10
80019698:	a1 78       	lsl	r8,0x1
8001969a:	14 08       	add	r8,r10
8001969c:	a5 68       	lsl	r8,0x4
8001969e:	f8 08 00 08 	add	r8,r12,r8
800196a2:	2e 08       	sub	r8,-32
800196a4:	70 08       	ld.w	r8,r8[0x0]
800196a6:	f6 08 00 0a 	add	r10,r11,r8
800196aa:	ee fb ff e0 	ld.w	r11,r7[-32]
800196ae:	12 98       	mov	r8,r9
800196b0:	a1 78       	lsl	r8,0x1
800196b2:	12 08       	add	r8,r9
800196b4:	a5 68       	lsl	r8,0x4
800196b6:	f6 08 00 08 	add	r8,r11,r8
800196ba:	2d c8       	sub	r8,-36
800196bc:	91 0a       	st.w	r8[0x0],r10
800196be:	c1 e8       	rjmp	800196fa <run_scheduler_update+0x194>
800196c0:	ee f5 ff e4 	ld.w	r5,r7[-28]
800196c4:	f0 16 00 29 	mcall	r6[164]
800196c8:	18 9a       	mov	r10,r12
800196ca:	ee f9 ff e4 	ld.w	r9,r7[-28]
800196ce:	ee fb ff e0 	ld.w	r11,r7[-32]
800196d2:	12 98       	mov	r8,r9
800196d4:	a1 78       	lsl	r8,0x1
800196d6:	12 08       	add	r8,r9
800196d8:	a5 68       	lsl	r8,0x4
800196da:	f6 08 00 08 	add	r8,r11,r8
800196de:	2e 08       	sub	r8,-32
800196e0:	70 08       	ld.w	r8,r8[0x0]
800196e2:	f4 08 00 09 	add	r9,r10,r8
800196e6:	ee fa ff e0 	ld.w	r10,r7[-32]
800196ea:	0a 98       	mov	r8,r5
800196ec:	a1 78       	lsl	r8,0x1
800196ee:	0a 08       	add	r8,r5
800196f0:	a5 68       	lsl	r8,0x4
800196f2:	f4 08 00 08 	add	r8,r10,r8
800196f6:	2d c8       	sub	r8,-36
800196f8:	91 09       	st.w	r8[0x0],r9
800196fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800196fe:	ee fa ff e0 	ld.w	r10,r7[-32]
80019702:	12 98       	mov	r8,r9
80019704:	a1 78       	lsl	r8,0x1
80019706:	12 08       	add	r8,r9
80019708:	a5 68       	lsl	r8,0x4
8001970a:	f4 08 00 08 	add	r8,r10,r8
8001970e:	2e 88       	sub	r8,-24
80019710:	70 08       	ld.w	r8,r8[0x0]
80019712:	58 18       	cp.w	r8,1
80019714:	c0 e1       	brne	80019730 <run_scheduler_update+0x1ca>
80019716:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001971a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001971e:	12 98       	mov	r8,r9
80019720:	a1 78       	lsl	r8,0x1
80019722:	12 08       	add	r8,r9
80019724:	a5 68       	lsl	r8,0x4
80019726:	f4 08 00 08 	add	r8,r10,r8
8001972a:	2e 88       	sub	r8,-24
8001972c:	30 09       	mov	r9,0
8001972e:	91 09       	st.w	r8[0x0],r9
80019730:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019734:	ee fa ff e0 	ld.w	r10,r7[-32]
80019738:	12 98       	mov	r8,r9
8001973a:	a1 78       	lsl	r8,0x1
8001973c:	12 08       	add	r8,r9
8001973e:	a5 68       	lsl	r8,0x4
80019740:	f4 08 00 08 	add	r8,r10,r8
80019744:	2d c8       	sub	r8,-36
80019746:	70 09       	ld.w	r9,r8[0x0]
80019748:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001974c:	10 39       	cp.w	r9,r8
8001974e:	c3 92       	brcc	800197c0 <run_scheduler_update+0x25a>
80019750:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019754:	5c 38       	neg	r8
80019756:	ef 48 ff e8 	st.w	r7[-24],r8
8001975a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001975e:	ee fa ff e0 	ld.w	r10,r7[-32]
80019762:	12 98       	mov	r8,r9
80019764:	a1 78       	lsl	r8,0x1
80019766:	12 08       	add	r8,r9
80019768:	a5 68       	lsl	r8,0x4
8001976a:	f4 08 00 08 	add	r8,r10,r8
8001976e:	2c 88       	sub	r8,-56
80019770:	70 08       	ld.w	r8,r8[0x0]
80019772:	f0 ca ff ff 	sub	r10,r8,-1
80019776:	ee fb ff e0 	ld.w	r11,r7[-32]
8001977a:	12 98       	mov	r8,r9
8001977c:	a1 78       	lsl	r8,0x1
8001977e:	12 08       	add	r8,r9
80019780:	a5 68       	lsl	r8,0x4
80019782:	f6 08 00 08 	add	r8,r11,r8
80019786:	2c 88       	sub	r8,-56
80019788:	91 0a       	st.w	r8[0x0],r10
8001978a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001978e:	ee fa ff e4 	ld.w	r10,r7[-28]
80019792:	ee fb ff e0 	ld.w	r11,r7[-32]
80019796:	14 98       	mov	r8,r10
80019798:	a1 78       	lsl	r8,0x1
8001979a:	14 08       	add	r8,r10
8001979c:	a5 68       	lsl	r8,0x4
8001979e:	f6 08 00 08 	add	r8,r11,r8
800197a2:	2e 08       	sub	r8,-32
800197a4:	70 0a       	ld.w	r10,r8[0x0]
800197a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800197aa:	10 0a       	add	r10,r8
800197ac:	ee fb ff e0 	ld.w	r11,r7[-32]
800197b0:	12 98       	mov	r8,r9
800197b2:	a1 78       	lsl	r8,0x1
800197b4:	12 08       	add	r8,r9
800197b6:	a5 68       	lsl	r8,0x4
800197b8:	f6 08 00 08 	add	r8,r11,r8
800197bc:	2d c8       	sub	r8,-36
800197be:	91 0a       	st.w	r8[0x0],r10
800197c0:	ee fc ff e4 	ld.w	r12,r7[-28]
800197c4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800197c8:	ee fa ff e0 	ld.w	r10,r7[-32]
800197cc:	f0 c9 ff ff 	sub	r9,r8,-1
800197d0:	12 98       	mov	r8,r9
800197d2:	a1 78       	lsl	r8,0x1
800197d4:	12 08       	add	r8,r9
800197d6:	a5 68       	lsl	r8,0x4
800197d8:	f4 08 00 08 	add	r8,r10,r8
800197dc:	70 09       	ld.w	r9,r8[0x0]
800197de:	12 98       	mov	r8,r9
800197e0:	a3 78       	lsl	r8,0x3
800197e2:	f0 09 01 09 	sub	r9,r8,r9
800197e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197ea:	f2 08 00 08 	add	r8,r9,r8
800197ee:	f0 0a 16 03 	lsr	r10,r8,0x3
800197f2:	ee fb ff e0 	ld.w	r11,r7[-32]
800197f6:	f8 c9 ff ff 	sub	r9,r12,-1
800197fa:	12 98       	mov	r8,r9
800197fc:	a1 78       	lsl	r8,0x1
800197fe:	12 08       	add	r8,r9
80019800:	a5 68       	lsl	r8,0x4
80019802:	f6 08 00 08 	add	r8,r11,r8
80019806:	91 0a       	st.w	r8[0x0],r10
80019808:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001980c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019810:	12 98       	mov	r8,r9
80019812:	a1 78       	lsl	r8,0x1
80019814:	12 08       	add	r8,r9
80019816:	a5 68       	lsl	r8,0x4
80019818:	f4 08 00 08 	add	r8,r10,r8
8001981c:	2d 48       	sub	r8,-44
8001981e:	70 09       	ld.w	r9,r8[0x0]
80019820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019824:	10 39       	cp.w	r9,r8
80019826:	c0 f2       	brcc	80019844 <run_scheduler_update+0x2de>
80019828:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001982c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019830:	12 98       	mov	r8,r9
80019832:	a1 78       	lsl	r8,0x1
80019834:	12 08       	add	r8,r9
80019836:	a5 68       	lsl	r8,0x4
80019838:	f4 08 00 08 	add	r8,r10,r8
8001983c:	2d 48       	sub	r8,-44
8001983e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019842:	91 09       	st.w	r8[0x0],r9
80019844:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019848:	ee fa ff e4 	ld.w	r10,r7[-28]
8001984c:	ee fb ff e0 	ld.w	r11,r7[-32]
80019850:	14 98       	mov	r8,r10
80019852:	a1 78       	lsl	r8,0x1
80019854:	14 08       	add	r8,r10
80019856:	a5 68       	lsl	r8,0x4
80019858:	f6 08 00 08 	add	r8,r11,r8
8001985c:	2c c8       	sub	r8,-52
8001985e:	70 0a       	ld.w	r10,r8[0x0]
80019860:	14 98       	mov	r8,r10
80019862:	a5 68       	lsl	r8,0x4
80019864:	f0 0a 01 0b 	sub	r11,r8,r10
80019868:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001986c:	ee fc ff e0 	ld.w	r12,r7[-32]
80019870:	f0 ca ff ff 	sub	r10,r8,-1
80019874:	14 98       	mov	r8,r10
80019876:	a1 78       	lsl	r8,0x1
80019878:	14 08       	add	r8,r10
8001987a:	a5 68       	lsl	r8,0x4
8001987c:	f8 08 00 08 	add	r8,r12,r8
80019880:	70 08       	ld.w	r8,r8[0x0]
80019882:	ee fa ff f8 	ld.w	r10,r7[-8]
80019886:	f4 08 01 0c 	sub	r12,r10,r8
8001988a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001988e:	ee fe ff e0 	ld.w	lr,r7[-32]
80019892:	f0 ca ff ff 	sub	r10,r8,-1
80019896:	14 98       	mov	r8,r10
80019898:	a1 78       	lsl	r8,0x1
8001989a:	14 08       	add	r8,r10
8001989c:	a5 68       	lsl	r8,0x4
8001989e:	fc 08 00 08 	add	r8,lr,r8
800198a2:	70 08       	ld.w	r8,r8[0x0]
800198a4:	ee fa ff f8 	ld.w	r10,r7[-8]
800198a8:	f4 08 01 08 	sub	r8,r10,r8
800198ac:	f8 08 02 48 	mul	r8,r12,r8
800198b0:	f6 08 00 08 	add	r8,r11,r8
800198b4:	f0 0a 16 04 	lsr	r10,r8,0x4
800198b8:	ee fb ff e0 	ld.w	r11,r7[-32]
800198bc:	12 98       	mov	r8,r9
800198be:	a1 78       	lsl	r8,0x1
800198c0:	12 08       	add	r8,r9
800198c2:	a5 68       	lsl	r8,0x4
800198c4:	f6 08 00 08 	add	r8,r11,r8
800198c8:	2c c8       	sub	r8,-52
800198ca:	91 0a       	st.w	r8[0x0],r10
800198cc:	ee f5 ff e4 	ld.w	r5,r7[-28]
800198d0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800198d4:	ee fa ff e0 	ld.w	r10,r7[-32]
800198d8:	12 98       	mov	r8,r9
800198da:	a1 78       	lsl	r8,0x1
800198dc:	12 08       	add	r8,r9
800198de:	a5 68       	lsl	r8,0x4
800198e0:	f4 08 00 08 	add	r8,r10,r8
800198e4:	2d 88       	sub	r8,-40
800198e6:	70 09       	ld.w	r9,r8[0x0]
800198e8:	12 98       	mov	r8,r9
800198ea:	a3 78       	lsl	r8,0x3
800198ec:	f0 09 01 03 	sub	r3,r8,r9
800198f0:	f0 16 00 29 	mcall	r6[164]
800198f4:	18 99       	mov	r9,r12
800198f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800198fa:	f2 08 01 08 	sub	r8,r9,r8
800198fe:	e6 08 00 08 	add	r8,r3,r8
80019902:	f0 09 16 03 	lsr	r9,r8,0x3
80019906:	ee fa ff e0 	ld.w	r10,r7[-32]
8001990a:	0a 98       	mov	r8,r5
8001990c:	a1 78       	lsl	r8,0x1
8001990e:	0a 08       	add	r8,r5
80019910:	a5 68       	lsl	r8,0x4
80019912:	f4 08 00 08 	add	r8,r10,r8
80019916:	2d 88       	sub	r8,-40
80019918:	91 09       	st.w	r8[0x0],r9
8001991a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001991e:	58 18       	cp.w	r8,1
80019920:	c0 81       	brne	80019930 <run_scheduler_update+0x3ca>
80019922:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019926:	30 09       	mov	r9,0
80019928:	91 29       	st.w	r8[0x8],r9
8001992a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001992e:	c2 08       	rjmp	8001996e <run_scheduler_update+0x408>
80019930:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019934:	11 88       	ld.ub	r8,r8[0x0]
80019936:	10 99       	mov	r9,r8
80019938:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001993c:	10 39       	cp.w	r9,r8
8001993e:	c0 51       	brne	80019948 <run_scheduler_update+0x3e2>
80019940:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019944:	30 09       	mov	r9,0
80019946:	91 29       	st.w	r8[0x8],r9
80019948:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001994c:	c1 18       	rjmp	8001996e <run_scheduler_update+0x408>
8001994e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019952:	2f f8       	sub	r8,-1
80019954:	ef 48 ff e4 	st.w	r7[-28],r8
80019958:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001995c:	11 88       	ld.ub	r8,r8[0x0]
8001995e:	10 99       	mov	r9,r8
80019960:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019964:	10 39       	cp.w	r9,r8
80019966:	fe 99 fe 16 	brgt	80019592 <run_scheduler_update+0x2c>
8001996a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001996e:	10 9c       	mov	r12,r8
80019970:	2f 7d       	sub	sp,-36
80019972:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80019976:	00 00       	add	r0,r0
80019978:	80 01       	ld.sh	r1,r0[0x0]
8001997a:	93 f6       	st.w	r9[0x3c],r6

8001997c <get_task_by_id>:
8001997c:	eb cd 40 80 	pushm	r7,lr
80019980:	1a 97       	mov	r7,sp
80019982:	20 3d       	sub	sp,12
80019984:	ef 4c ff f8 	st.w	r7[-8],r12
80019988:	16 98       	mov	r8,r11
8001998a:	ef 58 ff f4 	st.h	r7[-12],r8
8001998e:	30 08       	mov	r8,0
80019990:	ef 48 ff fc 	st.w	r7[-4],r8
80019994:	30 08       	mov	r8,0
80019996:	ef 48 ff fc 	st.w	r7[-4],r8
8001999a:	c2 58       	rjmp	800199e4 <get_task_by_id+0x68>
8001999c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800199a0:	ee fa ff f8 	ld.w	r10,r7[-8]
800199a4:	12 98       	mov	r8,r9
800199a6:	a1 78       	lsl	r8,0x1
800199a8:	12 08       	add	r8,r9
800199aa:	a1 78       	lsl	r8,0x1
800199ac:	2f f8       	sub	r8,-1
800199ae:	a3 78       	lsl	r8,0x3
800199b0:	f4 08 00 08 	add	r8,r10,r8
800199b4:	90 68       	ld.sh	r8,r8[0xc]
800199b6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800199ba:	f0 09 19 00 	cp.h	r9,r8
800199be:	c0 e1       	brne	800199da <get_task_by_id+0x5e>
800199c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800199c4:	f0 ca ff f4 	sub	r10,r8,-12
800199c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800199cc:	12 98       	mov	r8,r9
800199ce:	a1 78       	lsl	r8,0x1
800199d0:	12 08       	add	r8,r9
800199d2:	a5 68       	lsl	r8,0x4
800199d4:	f4 08 00 08 	add	r8,r10,r8
800199d8:	c1 08       	rjmp	800199f8 <get_task_by_id+0x7c>
800199da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199de:	2f f8       	sub	r8,-1
800199e0:	ef 48 ff fc 	st.w	r7[-4],r8
800199e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800199e8:	11 88       	ld.ub	r8,r8[0x0]
800199ea:	10 99       	mov	r9,r8
800199ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199f0:	10 39       	cp.w	r9,r8
800199f2:	fe 99 ff d5 	brgt	8001999c <get_task_by_id+0x20>
800199f6:	30 08       	mov	r8,0
800199f8:	10 9c       	mov	r12,r8
800199fa:	2f dd       	sub	sp,-12
800199fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80019a00 <get_task_by_index>:
80019a00:	eb cd 40 80 	pushm	r7,lr
80019a04:	1a 97       	mov	r7,sp
80019a06:	20 2d       	sub	sp,8
80019a08:	ef 4c ff fc 	st.w	r7[-4],r12
80019a0c:	16 98       	mov	r8,r11
80019a0e:	ef 58 ff f8 	st.h	r7[-8],r8
80019a12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a16:	11 88       	ld.ub	r8,r8[0x0]
80019a18:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80019a1c:	f0 09 19 00 	cp.h	r9,r8
80019a20:	c0 e2       	brcc	80019a3c <get_task_by_index+0x3c>
80019a22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a26:	f0 ca ff f4 	sub	r10,r8,-12
80019a2a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
80019a2e:	12 98       	mov	r8,r9
80019a30:	a1 78       	lsl	r8,0x1
80019a32:	12 08       	add	r8,r9
80019a34:	a5 68       	lsl	r8,0x4
80019a36:	f4 08 00 08 	add	r8,r10,r8
80019a3a:	c0 28       	rjmp	80019a3e <get_task_by_index+0x3e>
80019a3c:	30 08       	mov	r8,0
80019a3e:	10 9c       	mov	r12,r8
80019a40:	2f ed       	sub	sp,-8
80019a42:	e3 cd 80 80 	ldm	sp++,r7,pc

80019a46 <change_run_mode>:
80019a46:	eb cd 40 80 	pushm	r7,lr
80019a4a:	1a 97       	mov	r7,sp
80019a4c:	20 2d       	sub	sp,8
80019a4e:	ef 4c ff fc 	st.w	r7[-4],r12
80019a52:	ef 4b ff f8 	st.w	r7[-8],r11
80019a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a5e:	91 39       	st.w	r8[0xc],r9
80019a60:	2f ed       	sub	sp,-8
80019a62:	e3 cd 80 80 	ldm	sp++,r7,pc

80019a66 <change_task_period>:
80019a66:	eb cd 40 c0 	pushm	r6-r7,lr
80019a6a:	1a 97       	mov	r7,sp
80019a6c:	20 2d       	sub	sp,8
80019a6e:	48 c6       	lddpc	r6,80019a9c <change_task_period+0x36>
80019a70:	1e 26       	rsub	r6,pc
80019a72:	ef 4c ff fc 	st.w	r7[-4],r12
80019a76:	ef 4b ff f8 	st.w	r7[-8],r11
80019a7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a82:	91 59       	st.w	r8[0x14],r9
80019a84:	30 2b       	mov	r11,2
80019a86:	ee fc ff fc 	ld.w	r12,r7[-4]
80019a8a:	f0 16 00 ab 	mcall	r6[684]
80019a8e:	ee fc ff fc 	ld.w	r12,r7[-4]
80019a92:	f0 16 00 ff 	mcall	r6[1020]
80019a96:	2f ed       	sub	sp,-8
80019a98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a9c:	80 01       	ld.sh	r1,r0[0x0]
80019a9e:	98 f4       	ld.uh	r4,r12[0xe]

80019aa0 <suspend_task>:
80019aa0:	eb cd 40 c0 	pushm	r6-r7,lr
80019aa4:	1a 97       	mov	r7,sp
80019aa6:	20 2d       	sub	sp,8
80019aa8:	48 96       	lddpc	r6,80019acc <suspend_task+0x2c>
80019aaa:	1e 26       	rsub	r6,pc
80019aac:	ef 4c ff fc 	st.w	r7[-4],r12
80019ab0:	ef 4b ff f8 	st.w	r7[-8],r11
80019ab4:	f0 16 00 29 	mcall	r6[164]
80019ab8:	18 99       	mov	r9,r12
80019aba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019abe:	10 09       	add	r9,r8
80019ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ac4:	91 69       	st.w	r8[0x18],r9
80019ac6:	2f ed       	sub	sp,-8
80019ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019acc:	80 01       	ld.sh	r1,r0[0x0]
80019ace:	99 2e       	st.w	r12[0x8],lr

80019ad0 <run_task_now>:
80019ad0:	eb cd 40 80 	pushm	r7,lr
80019ad4:	1a 97       	mov	r7,sp
80019ad6:	20 1d       	sub	sp,4
80019ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80019adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ae0:	70 38       	ld.w	r8,r8[0xc]
80019ae2:	58 08       	cp.w	r8,0
80019ae4:	c0 51       	brne	80019aee <run_task_now+0x1e>
80019ae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019aea:	30 19       	mov	r9,1
80019aec:	91 39       	st.w	r8[0xc],r9
80019aee:	2f fd       	sub	sp,-4
80019af0:	e3 cd 80 80 	ldm	sp++,r7,pc

80019af4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80019af4:	eb cd 40 c0 	pushm	r6-r7,lr
80019af8:	1a 97       	mov	r7,sp
80019afa:	20 3d       	sub	sp,12
80019afc:	49 06       	lddpc	r6,80019b3c <mav_array_memcpy+0x48>
80019afe:	1e 26       	rsub	r6,pc
80019b00:	ef 4c ff fc 	st.w	r7[-4],r12
80019b04:	ef 4b ff f8 	st.w	r7[-8],r11
80019b08:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80019b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b10:	58 08       	cp.w	r8,0
80019b12:	c0 91       	brne	80019b24 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80019b14:	ee fa ff f4 	ld.w	r10,r7[-12]
80019b18:	30 0b       	mov	r11,0
80019b1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80019b1e:	f0 16 00 30 	mcall	r6[192]
80019b22:	c0 98       	rjmp	80019b34 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80019b24:	ee fa ff f4 	ld.w	r10,r7[-12]
80019b28:	ee fb ff f8 	ld.w	r11,r7[-8]
80019b2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019b30:	f0 16 00 21 	mcall	r6[132]
	}
}
80019b34:	2f dd       	sub	sp,-12
80019b36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019b3a:	00 00       	add	r0,r0
80019b3c:	80 01       	ld.sh	r1,r0[0x0]
80019b3e:	99 82       	st.w	r12[0x20],r2

80019b40 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
80019b40:	eb cd 40 c0 	pushm	r6-r7,lr
80019b44:	1a 97       	mov	r7,sp
80019b46:	20 2d       	sub	sp,8
80019b48:	4a 26       	lddpc	r6,80019bd0 <init_gps_ubx+0x90>
80019b4a:	1e 26       	rsub	r6,pc
80019b4c:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
80019b50:	f0 16 00 32 	mcall	r6[200]
80019b54:	18 99       	mov	r9,r12
80019b56:	ec f8 00 00 	ld.w	r8,r6[0]
80019b5a:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
80019b5c:	30 18       	mov	r8,1
80019b5e:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
80019b62:	ec f8 04 20 	ld.w	r8,r6[1056]
80019b66:	e0 69 04 b0 	mov	r9,1200
80019b6a:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
80019b6c:	f0 16 01 80 	mcall	r6[1536]
	
	engine_nav_setting = _engine_nav_setting;
80019b70:	ec f8 01 d8 	ld.w	r8,r6[472]
80019b74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b78:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
80019b7a:	ec f8 00 00 	ld.w	r8,r6[0]
80019b7e:	70 09       	ld.w	r9,r8[0x0]
80019b80:	30 18       	mov	r8,1
80019b82:	f3 68 0b 54 	st.b	r9[2900],r8
	centralData->GPS_data.num_sats = 0;
80019b86:	ec f8 00 00 	ld.w	r8,r6[0]
80019b8a:	70 09       	ld.w	r9,r8[0x0]
80019b8c:	30 08       	mov	r8,0
80019b8e:	f3 68 0b 48 	st.b	r9[2888],r8
	
	next_fix = false;
80019b92:	ec f9 01 e4 	ld.w	r9,r6[484]
80019b96:	30 08       	mov	r8,0
80019b98:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
80019b9a:	ec f9 03 b4 	ld.w	r9,r6[948]
80019b9e:	30 08       	mov	r8,0
80019ba0:	b2 88       	st.b	r9[0x0],r8
	fix = false;
80019ba2:	ec f9 06 4c 	ld.w	r9,r6[1612]
80019ba6:	30 08       	mov	r8,0
80019ba8:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
80019baa:	ec f8 06 b4 	ld.w	r8,r6[1716]
80019bae:	30 09       	mov	r9,0
80019bb0:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
80019bb2:	ec f9 02 4c 	ld.w	r9,r6[588]
80019bb6:	30 08       	mov	r8,0
80019bb8:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
80019bba:	ec f9 02 18 	ld.w	r9,r6[536]
80019bbe:	30 08       	mov	r8,0
80019bc0:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
80019bc2:	ec f9 00 4c 	ld.w	r9,r6[76]
80019bc6:	30 08       	mov	r8,0
80019bc8:	b2 88       	st.b	r9[0x0],r8
	}
80019bca:	2f ed       	sub	sp,-8
80019bcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019bd0:	80 01       	ld.sh	r1,r0[0x0]
80019bd2:	99 ce       	st.w	r12[0x30],lr
80019bd4:	6c 61       	ld.w	r1,r6[0x18]
80019bd6:	72 67       	ld.w	r7,r9[0x18]
80019bd8:	65 20       	ld.w	r0,r2[0x48]
80019bda:	70 61       	ld.w	r1,r8[0x18]
80019bdc:	79 6c       	ld.w	r12,r12[0x58]
80019bde:	6f 61       	ld.w	r1,r7[0x58]
80019be0:	64 3a       	ld.w	r10,r2[0xc]
80019be2:	20 00       	sub	r0,0
80019be4:	0a 00       	add	r0,r5
80019be6:	00 00       	add	r0,r0
80019be8:	57 72       	stdsp	sp[0x1dc],r2
80019bea:	6f 6e       	ld.w	lr,r7[0x58]
80019bec:	67 20       	ld.w	r0,r3[0x48]
80019bee:	50 6f       	stdsp	sp[0x18],pc
80019bf0:	73 6c       	ld.w	r12,r9[0x58]
80019bf2:	6c 68       	ld.w	r8,r6[0x18]
80019bf4:	20 6d       	sub	sp,24
80019bf6:	65 73       	ld.w	r3,r2[0x5c]
80019bf8:	73 61       	ld.w	r1,r9[0x58]
80019bfa:	67 65       	ld.w	r5,r3[0x58]
80019bfc:	20 30       	sub	r0,3
80019bfe:	78 00       	ld.w	r0,r12[0x0]
80019c00:	20 4d       	sub	sp,16
80019c02:	73 67       	ld.w	r7,r9[0x58]
80019c04:	20 69       	sub	r9,6
80019c06:	64 3a       	ld.w	r10,r2[0xc]
80019c08:	20 30       	sub	r0,3
80019c0a:	78 00       	ld.w	r0,r12[0x0]
80019c0c:	20 52       	sub	r2,5
80019c0e:	65 63       	ld.w	r3,r2[0x58]
80019c10:	65 69       	ld.w	r9,r2[0x58]
80019c12:	76 65       	ld.w	r5,r11[0x18]
80019c14:	64 20       	ld.w	r0,r2[0x8]
80019c16:	73 69       	ld.w	r9,r9[0x58]
80019c18:	7a 65       	ld.w	r5,sp[0x18]
80019c1a:	3a 00       	mov	r0,-96
80019c1c:	20 73       	sub	r3,7
80019c1e:	68 6f       	ld.w	pc,r4[0x18]
80019c20:	75 6c       	ld.w	r12,r10[0x58]
80019c22:	64 20       	ld.w	r0,r2[0x8]
80019c24:	62 65       	ld.w	r5,r1[0x18]
80019c26:	3a 00       	mov	r0,-96
80019c28:	57 72       	stdsp	sp[0x1dc],r2
80019c2a:	6f 6e       	ld.w	lr,r7[0x58]
80019c2c:	67 20       	ld.w	r0,r3[0x48]
80019c2e:	4e 61       	lddpc	r1,80019dc4 <init_gps_ubx+0x284>
80019c30:	76 20       	ld.w	r0,r11[0x8]
80019c32:	53 74       	stdsp	sp[0xdc],r4
80019c34:	61 74       	ld.w	r4,r0[0x5c]
80019c36:	75 73       	ld.w	r3,r10[0x5c]
80019c38:	20 6d       	sub	sp,24
80019c3a:	65 73       	ld.w	r3,r2[0x5c]
80019c3c:	73 61       	ld.w	r1,r9[0x58]
80019c3e:	67 65       	ld.w	r5,r3[0x58]
80019c40:	20 30       	sub	r0,3
80019c42:	78 00       	ld.w	r0,r12[0x0]
80019c44:	57 72       	stdsp	sp[0x1dc],r2
80019c46:	6f 6e       	ld.w	lr,r7[0x58]
80019c48:	67 20       	ld.w	r0,r3[0x48]
80019c4a:	53 6f       	stdsp	sp[0xd8],pc
80019c4c:	6c 75       	ld.w	r5,r6[0x1c]
80019c4e:	74 69       	ld.w	r9,r10[0x18]
80019c50:	6f 6e       	ld.w	lr,r7[0x58]
80019c52:	20 6d       	sub	sp,24
80019c54:	65 73       	ld.w	r3,r2[0x5c]
80019c56:	73 61       	ld.w	r1,r9[0x58]
80019c58:	67 65       	ld.w	r5,r3[0x58]
80019c5a:	20 30       	sub	r0,3
80019c5c:	78 00       	ld.w	r0,r12[0x0]
80019c5e:	00 00       	add	r0,r0
80019c60:	57 72       	stdsp	sp[0x1dc],r2
80019c62:	6f 6e       	ld.w	lr,r7[0x58]
80019c64:	67 20       	ld.w	r0,r3[0x48]
80019c66:	56 65       	stdsp	sp[0x198],r5
80019c68:	6c 6e       	ld.w	lr,r6[0x18]
80019c6a:	65 64       	ld.w	r4,r2[0x58]
80019c6c:	20 6d       	sub	sp,24
80019c6e:	65 73       	ld.w	r3,r2[0x5c]
80019c70:	73 61       	ld.w	r1,r9[0x58]
80019c72:	67 65       	ld.w	r5,r3[0x58]
80019c74:	20 30       	sub	r0,3
80019c76:	78 00       	ld.w	r0,r12[0x0]
80019c78:	57 72       	stdsp	sp[0x1dc],r2
80019c7a:	6f 6e       	ld.w	lr,r7[0x58]
80019c7c:	67 20       	ld.w	r0,r3[0x48]
80019c7e:	53 56       	stdsp	sp[0xd4],r6
80019c80:	20 49       	sub	r9,4
80019c82:	6e 66       	ld.w	r6,r7[0x18]
80019c84:	6f 20       	ld.w	r0,r7[0x48]
80019c86:	6d 65       	ld.w	r5,r6[0x58]
80019c88:	73 73       	ld.w	r3,r9[0x5c]
80019c8a:	61 67       	ld.w	r7,r0[0x58]
80019c8c:	65 20       	ld.w	r0,r2[0x48]
80019c8e:	30 78       	mov	r8,7
80019c90:	00 00       	add	r0,r0
80019c92:	00 00       	add	r0,r0
80019c94:	55 6e       	stdsp	sp[0x158],lr
80019c96:	65 78       	ld.w	r8,r2[0x5c]
80019c98:	70 65       	ld.w	r5,r8[0x18]
80019c9a:	63 74       	ld.w	r4,r1[0x5c]
80019c9c:	65 64       	ld.w	r4,r2[0x58]
80019c9e:	20 4e       	sub	lr,4
80019ca0:	41 56       	lddsp	r6,sp[0x54]
80019ca2:	20 6d       	sub	sp,24
80019ca4:	65 73       	ld.w	r3,r2[0x5c]
80019ca6:	73 61       	ld.w	r1,r9[0x58]
80019ca8:	67 65       	ld.w	r5,r3[0x58]
80019caa:	2c 20       	sub	r0,-62
80019cac:	43 6c       	lddsp	r12,sp[0xd8]
80019cae:	61 73       	ld.w	r3,r0[0x5c]
80019cb0:	73 3a       	ld.w	r10,r9[0x4c]
80019cb2:	20 30       	sub	r0,3
80019cb4:	78 00       	ld.w	r0,r12[0x0]
80019cb6:	00 00       	add	r0,r0
80019cb8:	2c 20       	sub	r0,-62
80019cba:	6d 73       	ld.w	r3,r6[0x5c]
80019cbc:	67 20       	ld.w	r0,r3[0x48]
80019cbe:	69 64       	ld.w	r4,r4[0x58]
80019cc0:	3a 20       	mov	r0,-94
80019cc2:	30 78       	mov	r8,7
80019cc4:	00 00       	add	r0,r0
80019cc6:	00 00       	add	r0,r0
80019cc8:	20 6f       	sub	pc,6
80019cca:	66 20       	ld.w	r0,r3[0x8]
80019ccc:	73 69       	ld.w	r9,r9[0x58]
80019cce:	7a 65       	ld.w	r5,sp[0x18]
80019cd0:	20 00       	sub	r0,0
80019cd2:	00 00       	add	r0,r0
80019cd4:	57 72       	stdsp	sp[0x1dc],r2
80019cd6:	6f 6e       	ld.w	lr,r7[0x58]
80019cd8:	67 20       	ld.w	r0,r3[0x48]
80019cda:	4e 61       	lddpc	r1,80019e70 <ubx_read+0x32>
80019cdc:	76 20       	ld.w	r0,r11[0x8]
80019cde:	53 65       	stdsp	sp[0xd8],r5
80019ce0:	74 74       	ld.w	r4,r10[0x1c]
80019ce2:	69 6e       	ld.w	lr,r4[0x58]
80019ce4:	67 73       	ld.w	r3,r3[0x5c]
80019ce6:	20 6d       	sub	sp,24
80019ce8:	65 73       	ld.w	r3,r2[0x5c]
80019cea:	73 61       	ld.w	r1,r9[0x58]
80019cec:	67 65       	ld.w	r5,r3[0x58]
80019cee:	20 30       	sub	r0,3
80019cf0:	78 00       	ld.w	r0,r12[0x0]
80019cf2:	00 00       	add	r0,r0
80019cf4:	57 72       	stdsp	sp[0x1dc],r2
80019cf6:	6f 6e       	ld.w	lr,r7[0x58]
80019cf8:	67 20       	ld.w	r0,r3[0x48]
80019cfa:	43 46       	lddsp	r6,sp[0xd0]
80019cfc:	47 20       	lddsp	r0,sp[0x1c8]
80019cfe:	52 61       	stdsp	sp[0x98],r1
80019d00:	74 65       	ld.w	r5,r10[0x18]
80019d02:	20 6d       	sub	sp,24
80019d04:	65 73       	ld.w	r3,r2[0x5c]
80019d06:	73 61       	ld.w	r1,r9[0x58]
80019d08:	67 65       	ld.w	r5,r3[0x58]
80019d0a:	20 30       	sub	r0,3
80019d0c:	78 00       	ld.w	r0,r12[0x0]
80019d0e:	00 00       	add	r0,r0
80019d10:	57 72       	stdsp	sp[0x1dc],r2
80019d12:	6f 6e       	ld.w	lr,r7[0x58]
80019d14:	67 20       	ld.w	r0,r3[0x48]
80019d16:	43 46       	lddsp	r6,sp[0xd0]
80019d18:	47 20       	lddsp	r0,sp[0x1c8]
80019d1a:	53 65       	stdsp	sp[0xd8],r5
80019d1c:	74 2f       	ld.w	pc,r10[0x8]
80019d1e:	67 65       	ld.w	r5,r3[0x58]
80019d20:	74 20       	ld.w	r0,r10[0x8]
80019d22:	6d 65       	ld.w	r5,r6[0x58]
80019d24:	73 73       	ld.w	r3,r9[0x5c]
80019d26:	61 67       	ld.w	r7,r0[0x58]
80019d28:	65 20       	ld.w	r0,r2[0x48]
80019d2a:	30 78       	mov	r8,7
80019d2c:	00 00       	add	r0,r0
80019d2e:	00 00       	add	r0,r0
80019d30:	55 6e       	stdsp	sp[0x158],lr
80019d32:	65 78       	ld.w	r8,r2[0x5c]
80019d34:	70 65       	ld.w	r5,r8[0x18]
80019d36:	63 74       	ld.w	r4,r1[0x5c]
80019d38:	65 64       	ld.w	r4,r2[0x58]
80019d3a:	20 43       	sub	r3,4
80019d3c:	46 47       	lddsp	r7,sp[0x190]
80019d3e:	20 6d       	sub	sp,24
80019d40:	65 73       	ld.w	r3,r2[0x5c]
80019d42:	73 61       	ld.w	r1,r9[0x58]
80019d44:	67 65       	ld.w	r5,r3[0x58]
80019d46:	2c 20       	sub	r0,-62
80019d48:	43 6c       	lddsp	r12,sp[0xd8]
80019d4a:	61 73       	ld.w	r3,r0[0x5c]
80019d4c:	73 3a       	ld.w	r10,r9[0x4c]
80019d4e:	20 30       	sub	r0,3
80019d50:	78 00       	ld.w	r0,r12[0x0]
80019d52:	00 00       	add	r0,r0
80019d54:	57 72       	stdsp	sp[0x1dc],r2
80019d56:	6f 6e       	ld.w	lr,r7[0x58]
80019d58:	67 20       	ld.w	r0,r3[0x48]
80019d5a:	4d 4f       	lddpc	pc,80019ea8 <ubx_read+0x6a>
80019d5c:	4e 20       	lddpc	r0,80019ee4 <ubx_read+0xa6>
80019d5e:	52 58       	stdsp	sp[0x94],r8
80019d60:	52 20       	stdsp	sp[0x88],r0
80019d62:	6d 65       	ld.w	r5,r6[0x58]
80019d64:	73 73       	ld.w	r3,r9[0x5c]
80019d66:	61 67       	ld.w	r7,r0[0x58]
80019d68:	65 20       	ld.w	r0,r2[0x48]
80019d6a:	30 78       	mov	r8,7
80019d6c:	00 00       	add	r0,r0
80019d6e:	00 00       	add	r0,r0
80019d70:	55 6e       	stdsp	sp[0x158],lr
80019d72:	65 78       	ld.w	r8,r2[0x5c]
80019d74:	70 65       	ld.w	r5,r8[0x18]
80019d76:	63 74       	ld.w	r4,r1[0x5c]
80019d78:	65 64       	ld.w	r4,r2[0x58]
80019d7a:	20 54       	sub	r4,5
80019d7c:	49 4d       	lddpc	sp,80019dcc <init_gps_ubx+0x28c>
80019d7e:	20 6d       	sub	sp,24
80019d80:	65 73       	ld.w	r3,r2[0x5c]
80019d82:	73 61       	ld.w	r1,r9[0x58]
80019d84:	67 65       	ld.w	r5,r3[0x58]
80019d86:	2c 20       	sub	r0,-62
80019d88:	43 6c       	lddsp	r12,sp[0xd8]
80019d8a:	61 73       	ld.w	r3,r0[0x5c]
80019d8c:	73 3a       	ld.w	r10,r9[0x4c]
80019d8e:	20 30       	sub	r0,3
80019d90:	78 00       	ld.w	r0,r12[0x0]
80019d92:	00 00       	add	r0,r0
80019d94:	20 73       	sub	r3,7
80019d96:	68 6f       	ld.w	pc,r4[0x18]
80019d98:	75 6c       	ld.w	r12,r10[0x58]
80019d9a:	64 20       	ld.w	r0,r2[0x8]
80019d9c:	62 65       	ld.w	r5,r1[0x18]
80019d9e:	20 3a       	sub	r10,3
80019da0:	00 00       	add	r0,r0
80019da2:	00 00       	add	r0,r0
80019da4:	57 72       	stdsp	sp[0x1dc],r2
80019da6:	6f 6e       	ld.w	lr,r7[0x58]
80019da8:	67 20       	ld.w	r0,r3[0x48]
80019daa:	54 49       	stdsp	sp[0x110],r9
80019dac:	4d 20       	lddpc	r0,80019ef4 <ubx_read+0xb6>
80019dae:	54 50       	stdsp	sp[0x114],r0
80019db0:	20 6d       	sub	sp,24
80019db2:	65 73       	ld.w	r3,r2[0x5c]
80019db4:	73 61       	ld.w	r1,r9[0x58]
80019db6:	67 65       	ld.w	r5,r3[0x58]
80019db8:	20 30       	sub	r0,3
80019dba:	78 00       	ld.w	r0,r12[0x0]
80019dbc:	57 72       	stdsp	sp[0x1dc],r2
80019dbe:	6f 6e       	ld.w	lr,r7[0x58]
80019dc0:	67 20       	ld.w	r0,r3[0x48]
80019dc2:	54 49       	stdsp	sp[0x110],r9
80019dc4:	4d 20       	lddpc	r0,80019f0c <ubx_read+0xce>
80019dc6:	56 52       	stdsp	sp[0x194],r2
80019dc8:	46 59       	lddsp	r9,sp[0x194]
80019dca:	20 6d       	sub	sp,24
80019dcc:	65 73       	ld.w	r3,r2[0x5c]
80019dce:	73 61       	ld.w	r1,r9[0x58]
80019dd0:	67 65       	ld.w	r5,r3[0x58]
80019dd2:	20 30       	sub	r0,3
80019dd4:	78 00       	ld.w	r0,r12[0x0]
80019dd6:	00 00       	add	r0,r0
80019dd8:	55 6e       	stdsp	sp[0x158],lr
80019dda:	65 78       	ld.w	r8,r2[0x5c]
80019ddc:	70 65       	ld.w	r5,r8[0x18]
80019dde:	63 74       	ld.w	r4,r1[0x5c]
80019de0:	65 64       	ld.w	r4,r2[0x58]
80019de2:	20 6d       	sub	sp,24
80019de4:	65 73       	ld.w	r3,r2[0x5c]
80019de6:	73 61       	ld.w	r1,r9[0x58]
80019de8:	67 65       	ld.w	r5,r3[0x58]
80019dea:	2c 20       	sub	r0,-62
80019dec:	43 6c       	lddsp	r12,sp[0xd8]
80019dee:	61 73       	ld.w	r3,r0[0x5c]
80019df0:	73 3a       	ld.w	r10,r9[0x4c]
80019df2:	20 30       	sub	r0,3
80019df4:	78 00       	ld.w	r0,r12[0x0]
80019df6:	00 00       	add	r0,r0
80019df8:	62 61       	ld.w	r1,r1[0x18]
80019dfa:	64 20       	ld.w	r0,r2[0x8]
80019dfc:	63 6b       	ld.w	r11,r1[0x58]
80019dfe:	73 75       	ld.w	r5,r9[0x5c]
80019e00:	6d 5f       	ld.w	pc,r6[0x54]
80019e02:	61 20       	ld.w	r0,r0[0x48]
80019e04:	00 00       	add	r0,r0
80019e06:	00 00       	add	r0,r0
80019e08:	20 73       	sub	r3,7
80019e0a:	68 6f       	ld.w	pc,r4[0x18]
80019e0c:	75 6c       	ld.w	r12,r10[0x58]
80019e0e:	64 20       	ld.w	r0,r2[0x8]
80019e10:	62 65       	ld.w	r5,r1[0x18]
80019e12:	20 00       	sub	r0,0
80019e14:	20 63       	sub	r3,6
80019e16:	6c 61       	ld.w	r1,r6[0x18]
80019e18:	73 73       	ld.w	r3,r9[0x5c]
80019e1a:	20 3a       	sub	r10,3
80019e1c:	20 30       	sub	r0,3
80019e1e:	78 00       	ld.w	r0,r12[0x0]
80019e20:	20 6d       	sub	sp,24
80019e22:	73 67       	ld.w	r7,r9[0x58]
80019e24:	5f 69       	srmi	r9
80019e26:	64 20       	ld.w	r0,r2[0x8]
80019e28:	3a 20       	mov	r0,-94
80019e2a:	30 78       	mov	r8,7
80019e2c:	00 00       	add	r0,r0
80019e2e:	00 00       	add	r0,r0
80019e30:	62 61       	ld.w	r1,r1[0x18]
80019e32:	64 20       	ld.w	r0,r2[0x8]
80019e34:	63 6b       	ld.w	r11,r1[0x58]
80019e36:	73 75       	ld.w	r5,r9[0x5c]
80019e38:	6d 5f       	ld.w	pc,r6[0x54]
80019e3a:	62 20       	ld.w	r0,r1[0x8]
	...

80019e3e <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
80019e3e:	eb cd 40 c0 	pushm	r6-r7,lr
80019e42:	1a 97       	mov	r7,sp
80019e44:	20 2d       	sub	sp,8
80019e46:	fe f6 0c fa 	ld.w	r6,pc[3322]
80019e4a:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
80019e4c:	30 08       	mov	r8,0
80019e4e:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
80019e52:	e0 8f 06 64 	bral	8001ab1a <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
80019e56:	ec f8 00 00 	ld.w	r8,r6[0]
80019e5a:	70 08       	ld.w	r8,r8[0x0]
80019e5c:	f0 c8 f6 2c 	sub	r8,r8,-2516
80019e60:	10 9c       	mov	r12,r8
80019e62:	f0 16 00 44 	mcall	r6[272]
80019e66:	18 98       	mov	r8,r12
80019e68:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
80019e6c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019e70:	11 88       	ld.ub	r8,r8[0x0]
80019e72:	58 88       	cp.w	r8,8
80019e74:	e0 8b 06 53 	brhi	8001ab1a <ubx_read+0xcdc>
80019e78:	fe c9 ff f8 	sub	r9,pc,-8
80019e7c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80019e80:	e0 8f 00 26 	bral	80019ecc <ubx_read+0x8e>
80019e84:	e0 8f 00 10 	bral	80019ea4 <ubx_read+0x66>
80019e88:	e0 8f 00 38 	bral	80019ef8 <ubx_read+0xba>
80019e8c:	e0 8f 00 50 	bral	80019f2c <ubx_read+0xee>
80019e90:	e0 8f 00 74 	bral	80019f78 <ubx_read+0x13a>
80019e94:	e0 8f 00 98 	bral	80019fc4 <ubx_read+0x186>
80019e98:	e0 8f 05 68 	bral	8001a968 <ubx_read+0xb2a>
80019e9c:	e0 8f 05 ac 	bral	8001a9f4 <ubx_read+0xbb6>
80019ea0:	e0 8f 05 f0 	bral	8001aa80 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
80019ea4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80019ea8:	36 28       	mov	r8,98
80019eaa:	f0 09 18 00 	cp.b	r9,r8
80019eae:	c0 b1       	brne	80019ec4 <ubx_read+0x86>
			{
				step++;
80019eb0:	ec f8 00 4c 	ld.w	r8,r6[76]
80019eb4:	11 88       	ld.ub	r8,r8[0x0]
80019eb6:	2f f8       	sub	r8,-1
80019eb8:	5c 58       	castu.b	r8
80019eba:	ec f9 00 4c 	ld.w	r9,r6[76]
80019ebe:	b2 88       	st.b	r9[0x0],r8
				break;
80019ec0:	e0 8f 06 2d 	bral	8001ab1a <ubx_read+0xcdc>
			}
			step = 0;
80019ec4:	ec f9 00 4c 	ld.w	r9,r6[76]
80019ec8:	30 08       	mov	r8,0
80019eca:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
80019ecc:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80019ed0:	3b 58       	mov	r8,-75
80019ed2:	f0 09 18 00 	cp.b	r9,r8
80019ed6:	c0 b1       	brne	80019eec <ubx_read+0xae>
			{
				step++;
80019ed8:	ec f8 00 4c 	ld.w	r8,r6[76]
80019edc:	11 88       	ld.ub	r8,r8[0x0]
80019ede:	2f f8       	sub	r8,-1
80019ee0:	5c 58       	castu.b	r8
80019ee2:	ec f9 00 4c 	ld.w	r9,r6[76]
80019ee6:	b2 88       	st.b	r9[0x0],r8
				break;
80019ee8:	e0 8f 06 19 	bral	8001ab1a <ubx_read+0xcdc>
			}
			step = 0;
80019eec:	ec f9 00 4c 	ld.w	r9,r6[76]
80019ef0:	30 08       	mov	r8,0
80019ef2:	b2 88       	st.b	r9[0x0],r8
			break;
80019ef4:	e0 8f 06 13 	bral	8001ab1a <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
80019ef8:	ec f8 00 4c 	ld.w	r8,r6[76]
80019efc:	11 88       	ld.ub	r8,r8[0x0]
80019efe:	2f f8       	sub	r8,-1
80019f00:	5c 58       	castu.b	r8
80019f02:	ec f9 00 4c 	ld.w	r9,r6[76]
80019f06:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
80019f08:	ec f9 00 60 	ld.w	r9,r6[96]
80019f0c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80019f10:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
80019f12:	ec f9 00 b0 	ld.w	r9,r6[176]
80019f16:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80019f1a:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
80019f1c:	ec f8 00 b0 	ld.w	r8,r6[176]
80019f20:	11 88       	ld.ub	r8,r8[0x0]
80019f22:	ec f9 01 0c 	ld.w	r9,r6[268]
80019f26:	b2 88       	st.b	r9[0x0],r8
			break;
80019f28:	e0 8f 05 f9 	bral	8001ab1a <ubx_read+0xcdc>
		case 3:
			step++;
80019f2c:	ec f8 00 4c 	ld.w	r8,r6[76]
80019f30:	11 88       	ld.ub	r8,r8[0x0]
80019f32:	2f f8       	sub	r8,-1
80019f34:	5c 58       	castu.b	r8
80019f36:	ec f9 00 4c 	ld.w	r9,r6[76]
80019f3a:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
80019f3c:	ec f8 00 b0 	ld.w	r8,r6[176]
80019f40:	11 88       	ld.ub	r8,r8[0x0]
80019f42:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80019f46:	f2 08 00 08 	add	r8,r9,r8
80019f4a:	5c 58       	castu.b	r8
80019f4c:	ec f9 00 b0 	ld.w	r9,r6[176]
80019f50:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
80019f52:	ec f8 01 0c 	ld.w	r8,r6[268]
80019f56:	11 89       	ld.ub	r9,r8[0x0]
80019f58:	ec f8 00 b0 	ld.w	r8,r6[176]
80019f5c:	11 88       	ld.ub	r8,r8[0x0]
80019f5e:	f2 08 00 08 	add	r8,r9,r8
80019f62:	5c 58       	castu.b	r8
80019f64:	ec f9 01 0c 	ld.w	r9,r6[268]
80019f68:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
80019f6a:	ec f9 00 5c 	ld.w	r9,r6[92]
80019f6e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80019f72:	b2 88       	st.b	r9[0x0],r8
			break;
80019f74:	e0 8f 05 d3 	bral	8001ab1a <ubx_read+0xcdc>
		case 4:
			step++;
80019f78:	ec f8 00 4c 	ld.w	r8,r6[76]
80019f7c:	11 88       	ld.ub	r8,r8[0x0]
80019f7e:	2f f8       	sub	r8,-1
80019f80:	5c 58       	castu.b	r8
80019f82:	ec f9 00 4c 	ld.w	r9,r6[76]
80019f86:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
80019f88:	ec f8 00 b0 	ld.w	r8,r6[176]
80019f8c:	11 88       	ld.ub	r8,r8[0x0]
80019f8e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80019f92:	f2 08 00 08 	add	r8,r9,r8
80019f96:	5c 58       	castu.b	r8
80019f98:	ec f9 00 b0 	ld.w	r9,r6[176]
80019f9c:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
80019f9e:	ec f8 01 0c 	ld.w	r8,r6[268]
80019fa2:	11 89       	ld.ub	r9,r8[0x0]
80019fa4:	ec f8 00 b0 	ld.w	r8,r6[176]
80019fa8:	11 88       	ld.ub	r8,r8[0x0]
80019faa:	f2 08 00 08 	add	r8,r9,r8
80019fae:	5c 58       	castu.b	r8
80019fb0:	ec f9 01 0c 	ld.w	r9,r6[268]
80019fb4:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
80019fb6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80019fba:	ec f9 00 58 	ld.w	r9,r6[88]
80019fbe:	b2 08       	st.h	r9[0x0],r8
			break;
80019fc0:	e0 8f 05 ad 	bral	8001ab1a <ubx_read+0xcdc>
		case 5:
			step++;
80019fc4:	ec f8 00 4c 	ld.w	r8,r6[76]
80019fc8:	11 88       	ld.ub	r8,r8[0x0]
80019fca:	2f f8       	sub	r8,-1
80019fcc:	5c 58       	castu.b	r8
80019fce:	ec f9 00 4c 	ld.w	r9,r6[76]
80019fd2:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
80019fd4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80019fd8:	a9 68       	lsl	r8,0x8
80019fda:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80019fde:	ec f8 00 58 	ld.w	r8,r6[88]
80019fe2:	90 08       	ld.sh	r8,r8[0x0]
80019fe4:	5c 88       	casts.h	r8
80019fe6:	f3 e8 10 08 	or	r8,r9,r8
80019fea:	5c 88       	casts.h	r8
80019fec:	ec f9 00 58 	ld.w	r9,r6[88]
80019ff0:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
80019ff2:	ec f8 00 b0 	ld.w	r8,r6[176]
80019ff6:	11 88       	ld.ub	r8,r8[0x0]
80019ff8:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80019ffc:	f2 08 00 08 	add	r8,r9,r8
8001a000:	5c 58       	castu.b	r8
8001a002:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a006:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a008:	ec f8 01 0c 	ld.w	r8,r6[268]
8001a00c:	11 89       	ld.ub	r9,r8[0x0]
8001a00e:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a012:	11 88       	ld.ub	r8,r8[0x0]
8001a014:	f2 08 00 08 	add	r8,r9,r8
8001a018:	5c 58       	castu.b	r8
8001a01a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001a01e:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001a020:	ec f8 00 58 	ld.w	r8,r6[88]
8001a024:	90 09       	ld.sh	r9,r8[0x0]
8001a026:	e0 68 02 00 	mov	r8,512
8001a02a:	f0 09 19 00 	cp.h	r9,r8
8001a02e:	e0 88 00 1b 	brls	8001a064 <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001a032:	fe cc 04 5e 	sub	r12,pc,1118
8001a036:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a03a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a03e:	90 08       	ld.sh	r8,r8[0x0]
8001a040:	5c 78       	castu.h	r8
8001a042:	30 ab       	mov	r11,10
8001a044:	10 9c       	mov	r12,r8
8001a046:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a04a:	fe cc 04 66 	sub	r12,pc,1126
8001a04e:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001a052:	ec f9 00 58 	ld.w	r9,r6[88]
8001a056:	30 08       	mov	r8,0
8001a058:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001a05a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a05e:	30 08       	mov	r8,0
8001a060:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001a062:	c0 5b       	rjmp	80019e6c <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001a064:	ec f9 01 c8 	ld.w	r9,r6[456]
8001a068:	30 08       	mov	r8,0
8001a06a:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001a06c:	ec f8 00 60 	ld.w	r8,r6[96]
8001a070:	11 89       	ld.ub	r9,r8[0x0]
8001a072:	30 18       	mov	r8,1
8001a074:	f0 09 18 00 	cp.b	r9,r8
8001a078:	e0 81 01 c0 	brne	8001a3f8 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001a07c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a080:	11 88       	ld.ub	r8,r8[0x0]
8001a082:	58 68       	cp.w	r8,6
8001a084:	e0 80 00 ab 	breq	8001a1da <ubx_read+0x39c>
8001a088:	e0 89 00 08 	brgt	8001a098 <ubx_read+0x25a>
8001a08c:	58 28       	cp.w	r8,2
8001a08e:	c0 e0       	breq	8001a0aa <ubx_read+0x26c>
8001a090:	58 38       	cp.w	r8,3
8001a092:	c5 80       	breq	8001a142 <ubx_read+0x304>
8001a094:	e0 8f 01 84 	bral	8001a39c <ubx_read+0x55e>
8001a098:	59 28       	cp.w	r8,18
8001a09a:	e0 80 00 eb 	breq	8001a270 <ubx_read+0x432>
8001a09e:	e0 48 00 30 	cp.w	r8,48
8001a0a2:	e0 80 01 32 	breq	8001a306 <ubx_read+0x4c8>
8001a0a6:	e0 8f 01 7b 	bral	8001a39c <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001a0aa:	ec f8 00 58 	ld.w	r8,r6[88]
8001a0ae:	90 09       	ld.sh	r9,r8[0x0]
8001a0b0:	31 c8       	mov	r8,28
8001a0b2:	f0 09 19 00 	cp.h	r9,r8
8001a0b6:	c1 21       	brne	8001a0da <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001a0b8:	ec f9 07 90 	ld.w	r9,r6[1936]
8001a0bc:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a0c0:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001a0c2:	ec f9 03 74 	ld.w	r9,r6[884]
8001a0c6:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a0ca:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001a0cc:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a0d0:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001a0d4:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a0d6:	e0 8f 01 8f 	bral	8001a3f4 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001a0da:	fe cc 04 f2 	sub	r12,pc,1266
8001a0de:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a0e2:	ec f8 00 60 	ld.w	r8,r6[96]
8001a0e6:	11 88       	ld.ub	r8,r8[0x0]
8001a0e8:	31 0b       	mov	r11,16
8001a0ea:	10 9c       	mov	r12,r8
8001a0ec:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a0f0:	fe cc 04 f0 	sub	r12,pc,1264
8001a0f4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a0f8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a0fc:	11 88       	ld.ub	r8,r8[0x0]
8001a0fe:	31 0b       	mov	r11,16
8001a100:	10 9c       	mov	r12,r8
8001a102:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a106:	fe cc 04 fa 	sub	r12,pc,1274
8001a10a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a10e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a112:	90 08       	ld.sh	r8,r8[0x0]
8001a114:	5c 78       	castu.h	r8
8001a116:	30 ab       	mov	r11,10
8001a118:	10 9c       	mov	r12,r8
8001a11a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a11e:	fe cc 05 02 	sub	r12,pc,1282
8001a122:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001a126:	30 ab       	mov	r11,10
8001a128:	31 cc       	mov	r12,28
8001a12a:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a12e:	fe cc 05 4a 	sub	r12,pc,1354
8001a132:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a136:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a13a:	30 08       	mov	r8,0
8001a13c:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a13e:	fe 9f fe 97 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001a142:	ec f8 00 58 	ld.w	r8,r6[88]
8001a146:	90 09       	ld.sh	r9,r8[0x0]
8001a148:	31 08       	mov	r8,16
8001a14a:	f0 09 19 00 	cp.h	r9,r8
8001a14e:	c1 21       	brne	8001a172 <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001a150:	ec f9 06 2c 	ld.w	r9,r6[1580]
8001a154:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a158:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001a15a:	ec f9 03 78 	ld.w	r9,r6[888]
8001a15e:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a162:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001a164:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a168:	ec f9 04 3c 	ld.w	r9,r6[1084]
8001a16c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a16e:	e0 8f 01 43 	bral	8001a3f4 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001a172:	fe cc 05 4a 	sub	r12,pc,1354
8001a176:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a17a:	ec f8 00 60 	ld.w	r8,r6[96]
8001a17e:	11 88       	ld.ub	r8,r8[0x0]
8001a180:	31 0b       	mov	r11,16
8001a182:	10 9c       	mov	r12,r8
8001a184:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a188:	fe cc 05 88 	sub	r12,pc,1416
8001a18c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a190:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a194:	11 88       	ld.ub	r8,r8[0x0]
8001a196:	31 0b       	mov	r11,16
8001a198:	10 9c       	mov	r12,r8
8001a19a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a19e:	fe cc 05 92 	sub	r12,pc,1426
8001a1a2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a1a6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a1aa:	90 08       	ld.sh	r8,r8[0x0]
8001a1ac:	5c 78       	castu.h	r8
8001a1ae:	30 ab       	mov	r11,10
8001a1b0:	10 9c       	mov	r12,r8
8001a1b2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a1b6:	fe cc 05 9a 	sub	r12,pc,1434
8001a1ba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001a1be:	30 ab       	mov	r11,10
8001a1c0:	31 0c       	mov	r12,16
8001a1c2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a1c6:	fe cc 05 e2 	sub	r12,pc,1506
8001a1ca:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a1ce:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a1d2:	30 08       	mov	r8,0
8001a1d4:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a1d6:	fe 9f fe 4b 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001a1da:	ec f8 00 58 	ld.w	r8,r6[88]
8001a1de:	90 09       	ld.sh	r9,r8[0x0]
8001a1e0:	33 48       	mov	r8,52
8001a1e2:	f0 09 19 00 	cp.h	r9,r8
8001a1e6:	c1 11       	brne	8001a208 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001a1e8:	ec f9 07 d4 	ld.w	r9,r6[2004]
8001a1ec:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a1f0:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001a1f2:	ec f9 03 e0 	ld.w	r9,r6[992]
8001a1f6:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a1fa:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001a1fc:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a200:	ec f9 04 94 	ld.w	r9,r6[1172]
8001a204:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a206:	cf 78       	rjmp	8001a3f4 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001a208:	fe cc 05 c4 	sub	r12,pc,1476
8001a20c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a210:	ec f8 00 60 	ld.w	r8,r6[96]
8001a214:	11 88       	ld.ub	r8,r8[0x0]
8001a216:	31 0b       	mov	r11,16
8001a218:	10 9c       	mov	r12,r8
8001a21a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a21e:	fe cc 06 1e 	sub	r12,pc,1566
8001a222:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a226:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a22a:	11 88       	ld.ub	r8,r8[0x0]
8001a22c:	31 0b       	mov	r11,16
8001a22e:	10 9c       	mov	r12,r8
8001a230:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a234:	fe cc 06 28 	sub	r12,pc,1576
8001a238:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a23c:	ec f8 00 58 	ld.w	r8,r6[88]
8001a240:	90 08       	ld.sh	r8,r8[0x0]
8001a242:	5c 78       	castu.h	r8
8001a244:	30 ab       	mov	r11,10
8001a246:	10 9c       	mov	r12,r8
8001a248:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a24c:	fe cc 06 30 	sub	r12,pc,1584
8001a250:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001a254:	30 ab       	mov	r11,10
8001a256:	33 4c       	mov	r12,52
8001a258:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a25c:	fe cc 06 78 	sub	r12,pc,1656
8001a260:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a264:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a268:	30 08       	mov	r8,0
8001a26a:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a26c:	fe 9f fe 00 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001a270:	ec f8 00 58 	ld.w	r8,r6[88]
8001a274:	90 09       	ld.sh	r9,r8[0x0]
8001a276:	32 48       	mov	r8,36
8001a278:	f0 09 19 00 	cp.h	r9,r8
8001a27c:	c1 11       	brne	8001a29e <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001a27e:	ec f9 05 b8 	ld.w	r9,r6[1464]
8001a282:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a286:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001a288:	ec f9 04 90 	ld.w	r9,r6[1168]
8001a28c:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a290:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001a292:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a296:	ec f9 04 a0 	ld.w	r9,r6[1184]
8001a29a:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a29c:	ca c8       	rjmp	8001a3f4 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001a29e:	fe cc 06 3e 	sub	r12,pc,1598
8001a2a2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a2a6:	ec f8 00 60 	ld.w	r8,r6[96]
8001a2aa:	11 88       	ld.ub	r8,r8[0x0]
8001a2ac:	31 0b       	mov	r11,16
8001a2ae:	10 9c       	mov	r12,r8
8001a2b0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a2b4:	fe cc 06 b4 	sub	r12,pc,1716
8001a2b8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a2bc:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a2c0:	11 88       	ld.ub	r8,r8[0x0]
8001a2c2:	31 0b       	mov	r11,16
8001a2c4:	10 9c       	mov	r12,r8
8001a2c6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a2ca:	fe cc 06 be 	sub	r12,pc,1726
8001a2ce:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a2d2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a2d6:	90 08       	ld.sh	r8,r8[0x0]
8001a2d8:	5c 78       	castu.h	r8
8001a2da:	30 ab       	mov	r11,10
8001a2dc:	10 9c       	mov	r12,r8
8001a2de:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a2e2:	fe cc 06 c6 	sub	r12,pc,1734
8001a2e6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001a2ea:	30 ab       	mov	r11,10
8001a2ec:	32 4c       	mov	r12,36
8001a2ee:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a2f2:	fe cc 07 0e 	sub	r12,pc,1806
8001a2f6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a2fa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a2fe:	30 08       	mov	r8,0
8001a300:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a302:	fe 9f fd b5 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001a306:	ec f8 00 58 	ld.w	r8,r6[88]
8001a30a:	90 09       	ld.sh	r9,r8[0x0]
8001a30c:	31 e8       	mov	r8,30
8001a30e:	f0 09 19 00 	cp.h	r9,r8
8001a312:	c1 11       	brne	8001a334 <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001a314:	ec f9 04 e0 	ld.w	r9,r6[1248]
8001a318:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a31c:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001a31e:	ec f9 04 74 	ld.w	r9,r6[1140]
8001a322:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a326:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001a328:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a32c:	ec f9 03 a8 	ld.w	r9,r6[936]
8001a330:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a332:	c6 18       	rjmp	8001a3f4 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001a334:	fe cc 06 bc 	sub	r12,pc,1724
8001a338:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a33c:	ec f8 00 60 	ld.w	r8,r6[96]
8001a340:	11 88       	ld.ub	r8,r8[0x0]
8001a342:	31 0b       	mov	r11,16
8001a344:	10 9c       	mov	r12,r8
8001a346:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a34a:	fe cc 07 4a 	sub	r12,pc,1866
8001a34e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a352:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a356:	11 88       	ld.ub	r8,r8[0x0]
8001a358:	31 0b       	mov	r11,16
8001a35a:	10 9c       	mov	r12,r8
8001a35c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a360:	fe cc 07 54 	sub	r12,pc,1876
8001a364:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a368:	ec f8 00 58 	ld.w	r8,r6[88]
8001a36c:	90 08       	ld.sh	r8,r8[0x0]
8001a36e:	5c 78       	castu.h	r8
8001a370:	30 ab       	mov	r11,10
8001a372:	10 9c       	mov	r12,r8
8001a374:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a378:	fe cc 07 5c 	sub	r12,pc,1884
8001a37c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001a380:	30 ab       	mov	r11,10
8001a382:	31 ec       	mov	r12,30
8001a384:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a388:	fe cc 07 a4 	sub	r12,pc,1956
8001a38c:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a390:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a394:	30 08       	mov	r8,0
8001a396:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a398:	fe 9f fd 6a 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001a39c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a3a0:	30 08       	mov	r8,0
8001a3a2:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001a3a4:	fe cc 07 10 	sub	r12,pc,1808
8001a3a8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001a3ac:	ec f8 00 60 	ld.w	r8,r6[96]
8001a3b0:	11 88       	ld.ub	r8,r8[0x0]
8001a3b2:	31 0b       	mov	r11,16
8001a3b4:	10 9c       	mov	r12,r8
8001a3b6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001a3ba:	fe cc 07 02 	sub	r12,pc,1794
8001a3be:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001a3c2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a3c6:	11 88       	ld.ub	r8,r8[0x0]
8001a3c8:	31 0b       	mov	r11,16
8001a3ca:	10 9c       	mov	r12,r8
8001a3cc:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001a3d0:	fe cc 07 08 	sub	r12,pc,1800
8001a3d4:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001a3d8:	ec f8 00 58 	ld.w	r8,r6[88]
8001a3dc:	90 08       	ld.sh	r8,r8[0x0]
8001a3de:	5c 78       	castu.h	r8
8001a3e0:	30 ab       	mov	r11,10
8001a3e2:	10 9c       	mov	r12,r8
8001a3e4:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001a3e8:	fe cc 08 04 	sub	r12,pc,2052
8001a3ec:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001a3f0:	fe 9f fd 3e 	bral	80019e6c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001a3f4:	e0 8f 03 93 	bral	8001ab1a <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001a3f8:	ec f8 00 60 	ld.w	r8,r6[96]
8001a3fc:	11 89       	ld.ub	r9,r8[0x0]
8001a3fe:	30 68       	mov	r8,6
8001a400:	f0 09 18 00 	cp.b	r9,r8
8001a404:	e0 81 01 1d 	brne	8001a63e <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001a408:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a40c:	11 88       	ld.ub	r8,r8[0x0]
8001a40e:	58 88       	cp.w	r8,8
8001a410:	c5 30       	breq	8001a4b6 <ubx_read+0x678>
8001a412:	e0 48 00 24 	cp.w	r8,36
8001a416:	c0 50       	breq	8001a420 <ubx_read+0x5e2>
8001a418:	58 18       	cp.w	r8,1
8001a41a:	e0 80 00 99 	breq	8001a54c <ubx_read+0x70e>
8001a41e:	ce 28       	rjmp	8001a5e2 <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001a420:	ec f8 00 58 	ld.w	r8,r6[88]
8001a424:	90 09       	ld.sh	r9,r8[0x0]
8001a426:	32 48       	mov	r8,36
8001a428:	f0 09 19 00 	cp.h	r9,r8
8001a42c:	c1 11       	brne	8001a44e <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001a42e:	ec f9 05 8c 	ld.w	r9,r6[1420]
8001a432:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a436:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001a438:	ec f9 04 88 	ld.w	r9,r6[1160]
8001a43c:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a440:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001a442:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a446:	ec f9 04 58 	ld.w	r9,r6[1112]
8001a44a:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001a44c:	cf 78       	rjmp	8001a63a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001a44e:	fe cc 07 7a 	sub	r12,pc,1914
8001a452:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a456:	ec f8 00 60 	ld.w	r8,r6[96]
8001a45a:	11 88       	ld.ub	r8,r8[0x0]
8001a45c:	31 0b       	mov	r11,16
8001a45e:	10 9c       	mov	r12,r8
8001a460:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a464:	fe cc 08 64 	sub	r12,pc,2148
8001a468:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a46c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a470:	11 88       	ld.ub	r8,r8[0x0]
8001a472:	31 0b       	mov	r11,16
8001a474:	10 9c       	mov	r12,r8
8001a476:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a47a:	fe cc 08 6e 	sub	r12,pc,2158
8001a47e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a482:	ec f8 00 58 	ld.w	r8,r6[88]
8001a486:	90 08       	ld.sh	r8,r8[0x0]
8001a488:	5c 78       	castu.h	r8
8001a48a:	30 ab       	mov	r11,10
8001a48c:	10 9c       	mov	r12,r8
8001a48e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a492:	fe cc 08 76 	sub	r12,pc,2166
8001a496:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001a49a:	30 ab       	mov	r11,10
8001a49c:	32 4c       	mov	r12,36
8001a49e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a4a2:	fe cc 08 be 	sub	r12,pc,2238
8001a4a6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a4aa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a4ae:	30 08       	mov	r8,0
8001a4b0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a4b2:	fe 9f fc dd 	bral	80019e6c <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001a4b6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a4ba:	90 09       	ld.sh	r9,r8[0x0]
8001a4bc:	30 68       	mov	r8,6
8001a4be:	f0 09 19 00 	cp.h	r9,r8
8001a4c2:	c1 11       	brne	8001a4e4 <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001a4c4:	ec f9 06 28 	ld.w	r9,r6[1576]
8001a4c8:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a4cc:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001a4ce:	ec f9 08 60 	ld.w	r9,r6[2144]
8001a4d2:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a4d6:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001a4d8:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a4dc:	ec f9 06 e0 	ld.w	r9,r6[1760]
8001a4e0:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a4e2:	ca c8       	rjmp	8001a63a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001a4e4:	fe cc 07 f0 	sub	r12,pc,2032
8001a4e8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a4ec:	ec f8 00 60 	ld.w	r8,r6[96]
8001a4f0:	11 88       	ld.ub	r8,r8[0x0]
8001a4f2:	31 0b       	mov	r11,16
8001a4f4:	10 9c       	mov	r12,r8
8001a4f6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a4fa:	fe cc 08 fa 	sub	r12,pc,2298
8001a4fe:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a502:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a506:	11 88       	ld.ub	r8,r8[0x0]
8001a508:	31 0b       	mov	r11,16
8001a50a:	10 9c       	mov	r12,r8
8001a50c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a510:	fe cc 09 04 	sub	r12,pc,2308
8001a514:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a518:	ec f8 00 58 	ld.w	r8,r6[88]
8001a51c:	90 08       	ld.sh	r8,r8[0x0]
8001a51e:	5c 78       	castu.h	r8
8001a520:	30 ab       	mov	r11,10
8001a522:	10 9c       	mov	r12,r8
8001a524:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a528:	fe cc 09 0c 	sub	r12,pc,2316
8001a52c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001a530:	30 ab       	mov	r11,10
8001a532:	30 6c       	mov	r12,6
8001a534:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a538:	fe cc 09 54 	sub	r12,pc,2388
8001a53c:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a540:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a544:	30 08       	mov	r8,0
8001a546:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a548:	fe 9f fc 92 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001a54c:	ec f8 00 58 	ld.w	r8,r6[88]
8001a550:	90 09       	ld.sh	r9,r8[0x0]
8001a552:	30 38       	mov	r8,3
8001a554:	f0 09 19 00 	cp.h	r9,r8
8001a558:	c1 11       	brne	8001a57a <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001a55a:	ec f9 06 48 	ld.w	r9,r6[1608]
8001a55e:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a562:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001a564:	ec f9 03 f0 	ld.w	r9,r6[1008]
8001a568:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a56c:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001a56e:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a572:	ec f9 04 b8 	ld.w	r9,r6[1208]
8001a576:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a578:	c6 18       	rjmp	8001a63a <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001a57a:	fe cc 08 6a 	sub	r12,pc,2154
8001a57e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a582:	ec f8 00 60 	ld.w	r8,r6[96]
8001a586:	11 88       	ld.ub	r8,r8[0x0]
8001a588:	31 0b       	mov	r11,16
8001a58a:	10 9c       	mov	r12,r8
8001a58c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a590:	fe cc 09 90 	sub	r12,pc,2448
8001a594:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a598:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a59c:	11 88       	ld.ub	r8,r8[0x0]
8001a59e:	31 0b       	mov	r11,16
8001a5a0:	10 9c       	mov	r12,r8
8001a5a2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a5a6:	fe cc 09 9a 	sub	r12,pc,2458
8001a5aa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a5ae:	ec f8 00 58 	ld.w	r8,r6[88]
8001a5b2:	90 08       	ld.sh	r8,r8[0x0]
8001a5b4:	5c 78       	castu.h	r8
8001a5b6:	30 ab       	mov	r11,10
8001a5b8:	10 9c       	mov	r12,r8
8001a5ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a5be:	fe cc 09 a2 	sub	r12,pc,2466
8001a5c2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001a5c6:	30 ab       	mov	r11,10
8001a5c8:	30 3c       	mov	r12,3
8001a5ca:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a5ce:	fe cc 09 ea 	sub	r12,pc,2538
8001a5d2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a5d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5da:	30 08       	mov	r8,0
8001a5dc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a5de:	fe 9f fc 47 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001a5e2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5e6:	30 08       	mov	r8,0
8001a5e8:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001a5ea:	fe cc 08 ba 	sub	r12,pc,2234
8001a5ee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001a5f2:	ec f8 00 60 	ld.w	r8,r6[96]
8001a5f6:	11 88       	ld.ub	r8,r8[0x0]
8001a5f8:	31 0b       	mov	r11,16
8001a5fa:	10 9c       	mov	r12,r8
8001a5fc:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001a600:	fe cc 09 48 	sub	r12,pc,2376
8001a604:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001a608:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a60c:	11 88       	ld.ub	r8,r8[0x0]
8001a60e:	31 0b       	mov	r11,16
8001a610:	10 9c       	mov	r12,r8
8001a612:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001a616:	fe cc 09 4e 	sub	r12,pc,2382
8001a61a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001a61e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a622:	90 08       	ld.sh	r8,r8[0x0]
8001a624:	5c 78       	castu.h	r8
8001a626:	30 ab       	mov	r11,10
8001a628:	10 9c       	mov	r12,r8
8001a62a:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001a62e:	fe cc 0a 4a 	sub	r12,pc,2634
8001a632:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001a636:	fe 9f fc 1b 	bral	80019e6c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001a63a:	e0 8f 02 70 	bral	8001ab1a <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001a63e:	ec f8 00 60 	ld.w	r8,r6[96]
8001a642:	11 89       	ld.ub	r9,r8[0x0]
8001a644:	30 a8       	mov	r8,10
8001a646:	f0 09 18 00 	cp.b	r9,r8
8001a64a:	e0 81 00 88 	brne	8001a75a <ubx_read+0x91c>
			{
 				switch (msg_id)
8001a64e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a652:	11 88       	ld.ub	r8,r8[0x0]
8001a654:	e0 48 00 21 	cp.w	r8,33
8001a658:	c4 d1       	brne	8001a6f2 <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001a65a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a65e:	90 09       	ld.sh	r9,r8[0x0]
8001a660:	30 18       	mov	r8,1
8001a662:	f0 09 19 00 	cp.h	r9,r8
8001a666:	c1 21       	brne	8001a68a <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001a668:	ec f9 05 88 	ld.w	r9,r6[1416]
8001a66c:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a670:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001a672:	ec f9 03 d8 	ld.w	r9,r6[984]
8001a676:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a67a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001a67c:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a680:	ec f9 04 9c 	ld.w	r9,r6[1180]
8001a684:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001a686:	e0 8f 02 4a 	bral	8001ab1a <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001a68a:	fe cc 09 36 	sub	r12,pc,2358
8001a68e:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001a692:	ec f8 00 60 	ld.w	r8,r6[96]
8001a696:	11 88       	ld.ub	r8,r8[0x0]
8001a698:	31 0b       	mov	r11,16
8001a69a:	10 9c       	mov	r12,r8
8001a69c:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001a6a0:	fe cc 0a a0 	sub	r12,pc,2720
8001a6a4:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001a6a8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a6ac:	11 88       	ld.ub	r8,r8[0x0]
8001a6ae:	31 0b       	mov	r11,16
8001a6b0:	10 9c       	mov	r12,r8
8001a6b2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001a6b6:	fe cc 0a aa 	sub	r12,pc,2730
8001a6ba:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001a6be:	ec f8 00 58 	ld.w	r8,r6[88]
8001a6c2:	90 08       	ld.sh	r8,r8[0x0]
8001a6c4:	5c 78       	castu.h	r8
8001a6c6:	30 ab       	mov	r11,10
8001a6c8:	10 9c       	mov	r12,r8
8001a6ca:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001a6ce:	fe cc 0a b2 	sub	r12,pc,2738
8001a6d2:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001a6d6:	30 ab       	mov	r11,10
8001a6d8:	30 1c       	mov	r12,1
8001a6da:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001a6de:	fe cc 0a fa 	sub	r12,pc,2810
8001a6e2:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001a6e6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6ea:	30 08       	mov	r8,0
8001a6ec:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001a6ee:	fe 9f fb bf 	bral	80019e6c <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001a6f2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6f6:	30 08       	mov	r8,0
8001a6f8:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001a6fa:	fe cc 09 8a 	sub	r12,pc,2442
8001a6fe:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001a702:	ec f8 00 60 	ld.w	r8,r6[96]
8001a706:	11 88       	ld.ub	r8,r8[0x0]
8001a708:	31 0b       	mov	r11,16
8001a70a:	10 9c       	mov	r12,r8
8001a70c:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001a710:	fe cc 0a 58 	sub	r12,pc,2648
8001a714:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001a718:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a71c:	11 88       	ld.ub	r8,r8[0x0]
8001a71e:	31 0b       	mov	r11,16
8001a720:	10 9c       	mov	r12,r8
8001a722:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001a726:	fe cc 0a 5e 	sub	r12,pc,2654
8001a72a:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001a72e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a732:	90 08       	ld.sh	r8,r8[0x0]
8001a734:	5c 78       	castu.h	r8
8001a736:	30 ab       	mov	r11,10
8001a738:	10 9c       	mov	r12,r8
8001a73a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001a73e:	fe cc 09 aa 	sub	r12,pc,2474
8001a742:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001a746:	31 0b       	mov	r11,16
8001a748:	32 1c       	mov	r12,33
8001a74a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001a74e:	fe cc 0b 6a 	sub	r12,pc,2922
8001a752:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001a756:	fe 9f fb 8b 	bral	80019e6c <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001a75a:	ec f8 00 60 	ld.w	r8,r6[96]
8001a75e:	11 89       	ld.ub	r9,r8[0x0]
8001a760:	30 d8       	mov	r8,13
8001a762:	f0 09 18 00 	cp.b	r9,r8
8001a766:	e0 81 00 d5 	brne	8001a910 <ubx_read+0xad2>
			{
				switch(msg_id)
8001a76a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a76e:	11 88       	ld.ub	r8,r8[0x0]
8001a770:	58 18       	cp.w	r8,1
8001a772:	c0 40       	breq	8001a77a <ubx_read+0x93c>
8001a774:	58 68       	cp.w	r8,6
8001a776:	c4 d0       	breq	8001a810 <ubx_read+0x9d2>
8001a778:	c9 78       	rjmp	8001a8a6 <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001a77a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a77e:	90 09       	ld.sh	r9,r8[0x0]
8001a780:	31 08       	mov	r8,16
8001a782:	f0 09 19 00 	cp.h	r9,r8
8001a786:	c1 11       	brne	8001a7a8 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001a788:	ec f9 08 14 	ld.w	r9,r6[2068]
8001a78c:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a790:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001a792:	ec f9 04 18 	ld.w	r9,r6[1048]
8001a796:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a79a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001a79c:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a7a0:	ec f9 04 5c 	ld.w	r9,r6[1116]
8001a7a4:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a7a6:	cb 48       	rjmp	8001a90e <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001a7a8:	fe cc 0a 04 	sub	r12,pc,2564
8001a7ac:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a7b0:	ec f8 00 60 	ld.w	r8,r6[96]
8001a7b4:	11 88       	ld.ub	r8,r8[0x0]
8001a7b6:	31 0b       	mov	r11,16
8001a7b8:	10 9c       	mov	r12,r8
8001a7ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a7be:	fe cc 0b be 	sub	r12,pc,3006
8001a7c2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a7c6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a7ca:	11 88       	ld.ub	r8,r8[0x0]
8001a7cc:	31 0b       	mov	r11,16
8001a7ce:	10 9c       	mov	r12,r8
8001a7d0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a7d4:	fe cc 0b c8 	sub	r12,pc,3016
8001a7d8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a7dc:	ec f8 00 58 	ld.w	r8,r6[88]
8001a7e0:	90 08       	ld.sh	r8,r8[0x0]
8001a7e2:	5c 78       	castu.h	r8
8001a7e4:	30 ab       	mov	r11,10
8001a7e6:	10 9c       	mov	r12,r8
8001a7e8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a7ec:	fe cc 0b d0 	sub	r12,pc,3024
8001a7f0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001a7f4:	30 ab       	mov	r11,10
8001a7f6:	31 0c       	mov	r12,16
8001a7f8:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a7fc:	fe cc 0c 18 	sub	r12,pc,3096
8001a800:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a804:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a808:	30 08       	mov	r8,0
8001a80a:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a80c:	fe 9f fb 30 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001a810:	ec f8 00 58 	ld.w	r8,r6[88]
8001a814:	90 09       	ld.sh	r9,r8[0x0]
8001a816:	31 48       	mov	r8,20
8001a818:	f0 09 19 00 	cp.h	r9,r8
8001a81c:	c1 11       	brne	8001a83e <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001a81e:	ec f9 08 80 	ld.w	r9,r6[2176]
8001a822:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a826:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001a828:	ec f9 04 30 	ld.w	r9,r6[1072]
8001a82c:	ec f8 00 e4 	ld.w	r8,r6[228]
8001a830:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001a832:	ec f8 00 fc 	ld.w	r8,r6[252]
8001a836:	ec f9 04 64 	ld.w	r9,r6[1124]
8001a83a:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a83c:	c6 98       	rjmp	8001a90e <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001a83e:	fe cc 0a 82 	sub	r12,pc,2690
8001a842:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a846:	ec f8 00 60 	ld.w	r8,r6[96]
8001a84a:	11 88       	ld.ub	r8,r8[0x0]
8001a84c:	31 0b       	mov	r11,16
8001a84e:	10 9c       	mov	r12,r8
8001a850:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a854:	fe cc 0c 54 	sub	r12,pc,3156
8001a858:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a85c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a860:	11 88       	ld.ub	r8,r8[0x0]
8001a862:	31 0b       	mov	r11,16
8001a864:	10 9c       	mov	r12,r8
8001a866:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a86a:	fe cc 0c 5e 	sub	r12,pc,3166
8001a86e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a872:	ec f8 00 58 	ld.w	r8,r6[88]
8001a876:	90 08       	ld.sh	r8,r8[0x0]
8001a878:	5c 78       	castu.h	r8
8001a87a:	30 ab       	mov	r11,10
8001a87c:	10 9c       	mov	r12,r8
8001a87e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a882:	fe cc 0c 66 	sub	r12,pc,3174
8001a886:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001a88a:	30 ab       	mov	r11,10
8001a88c:	31 4c       	mov	r12,20
8001a88e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a892:	fe cc 0c ae 	sub	r12,pc,3246
8001a896:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a89a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a89e:	30 08       	mov	r8,0
8001a8a0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a8a2:	fe 9f fa e5 	bral	80019e6c <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001a8a6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a8aa:	30 08       	mov	r8,0
8001a8ac:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001a8ae:	fe cc 0b 3e 	sub	r12,pc,2878
8001a8b2:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001a8b6:	ec f8 00 60 	ld.w	r8,r6[96]
8001a8ba:	11 88       	ld.ub	r8,r8[0x0]
8001a8bc:	31 0b       	mov	r11,16
8001a8be:	10 9c       	mov	r12,r8
8001a8c0:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001a8c4:	fe cc 0c 0c 	sub	r12,pc,3084
8001a8c8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001a8cc:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a8d0:	11 88       	ld.ub	r8,r8[0x0]
8001a8d2:	31 0b       	mov	r11,16
8001a8d4:	10 9c       	mov	r12,r8
8001a8d6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001a8da:	fe cc 0c 12 	sub	r12,pc,3090
8001a8de:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001a8e2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8e6:	90 08       	ld.sh	r8,r8[0x0]
8001a8e8:	5c 78       	castu.h	r8
8001a8ea:	30 ab       	mov	r11,10
8001a8ec:	10 9c       	mov	r12,r8
8001a8ee:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001a8f2:	fe cc 0b 5e 	sub	r12,pc,2910
8001a8f6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001a8fa:	31 0b       	mov	r11,16
8001a8fc:	30 1c       	mov	r12,1
8001a8fe:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001a902:	fe cc 0d 1e 	sub	r12,pc,3358
8001a906:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001a90a:	fe 9f fa b1 	bral	80019e6c <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001a90e:	c0 69       	rjmp	8001ab1a <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001a910:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a914:	30 08       	mov	r8,0
8001a916:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001a918:	fe cc 0b 40 	sub	r12,pc,2880
8001a91c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001a920:	ec f8 00 60 	ld.w	r8,r6[96]
8001a924:	11 88       	ld.ub	r8,r8[0x0]
8001a926:	31 0b       	mov	r11,16
8001a928:	10 9c       	mov	r12,r8
8001a92a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001a92e:	fe cc 0c 76 	sub	r12,pc,3190
8001a932:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001a936:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a93a:	11 88       	ld.ub	r8,r8[0x0]
8001a93c:	31 0b       	mov	r11,16
8001a93e:	10 9c       	mov	r12,r8
8001a940:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001a944:	fe cc 0c 7c 	sub	r12,pc,3196
8001a948:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a94c:	ec f8 00 58 	ld.w	r8,r6[88]
8001a950:	90 08       	ld.sh	r8,r8[0x0]
8001a952:	5c 78       	castu.h	r8
8001a954:	30 ab       	mov	r11,10
8001a956:	10 9c       	mov	r12,r8
8001a958:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a95c:	fe cc 0d 78 	sub	r12,pc,3448
8001a960:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001a964:	fe 9f fa 84 	bral	80019e6c <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001a968:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a96c:	11 88       	ld.ub	r8,r8[0x0]
8001a96e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a972:	f2 08 00 08 	add	r8,r9,r8
8001a976:	5c 58       	castu.b	r8
8001a978:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a97c:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a97e:	ec f8 01 0c 	ld.w	r8,r6[268]
8001a982:	11 89       	ld.ub	r9,r8[0x0]
8001a984:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a988:	11 88       	ld.ub	r8,r8[0x0]
8001a98a:	f2 08 00 08 	add	r8,r9,r8
8001a98e:	5c 58       	castu.b	r8
8001a990:	ec f9 01 0c 	ld.w	r9,r6[268]
8001a994:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001a996:	ec f8 00 d8 	ld.w	r8,r6[216]
8001a99a:	70 08       	ld.w	r8,r8[0x0]
8001a99c:	70 09       	ld.w	r9,r8[0x0]
8001a99e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9a2:	90 08       	ld.sh	r8,r8[0x0]
8001a9a4:	5c 78       	castu.h	r8
8001a9a6:	f0 ca 00 01 	sub	r10,r8,1
8001a9aa:	ec f8 01 c8 	ld.w	r8,r6[456]
8001a9ae:	90 08       	ld.sh	r8,r8[0x0]
8001a9b0:	5c 78       	castu.h	r8
8001a9b2:	f4 08 01 08 	sub	r8,r10,r8
8001a9b6:	10 09       	add	r9,r8
8001a9b8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a9bc:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001a9be:	ec f8 01 c8 	ld.w	r8,r6[456]
8001a9c2:	90 08       	ld.sh	r8,r8[0x0]
8001a9c4:	2f f8       	sub	r8,-1
8001a9c6:	5c 88       	casts.h	r8
8001a9c8:	ec f9 01 c8 	ld.w	r9,r6[456]
8001a9cc:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001a9ce:	ec f8 01 c8 	ld.w	r8,r6[456]
8001a9d2:	90 09       	ld.sh	r9,r8[0x0]
8001a9d4:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9d8:	90 08       	ld.sh	r8,r8[0x0]
8001a9da:	f0 09 19 00 	cp.h	r9,r8
8001a9de:	e0 81 00 9b 	brne	8001ab14 <ubx_read+0xcd6>
			{
				step++;
8001a9e2:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a9e6:	11 88       	ld.ub	r8,r8[0x0]
8001a9e8:	2f f8       	sub	r8,-1
8001a9ea:	5c 58       	castu.b	r8
8001a9ec:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a9f0:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001a9f2:	c9 48       	rjmp	8001ab1a <ubx_read+0xcdc>
		case 7:
			step++;
8001a9f4:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a9f8:	11 88       	ld.ub	r8,r8[0x0]
8001a9fa:	2f f8       	sub	r8,-1
8001a9fc:	5c 58       	castu.b	r8
8001a9fe:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa02:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001aa04:	ec f8 00 b0 	ld.w	r8,r6[176]
8001aa08:	11 88       	ld.ub	r8,r8[0x0]
8001aa0a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001aa0e:	f0 09 18 00 	cp.b	r9,r8
8001aa12:	e0 80 00 83 	breq	8001ab18 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001aa16:	fe cc 0c 1e 	sub	r12,pc,3102
8001aa1a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001aa1e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001aa22:	31 0b       	mov	r11,16
8001aa24:	10 9c       	mov	r12,r8
8001aa26:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001aa2a:	fe cc 0c 22 	sub	r12,pc,3106
8001aa2e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001aa32:	ec f8 00 b0 	ld.w	r8,r6[176]
8001aa36:	11 88       	ld.ub	r8,r8[0x0]
8001aa38:	31 0b       	mov	r11,16
8001aa3a:	10 9c       	mov	r12,r8
8001aa3c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001aa40:	fe cc 0c 2c 	sub	r12,pc,3116
8001aa44:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001aa48:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa4c:	11 88       	ld.ub	r8,r8[0x0]
8001aa4e:	31 0b       	mov	r11,16
8001aa50:	10 9c       	mov	r12,r8
8001aa52:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001aa56:	fe cc 0c 36 	sub	r12,pc,3126
8001aa5a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001aa5e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aa62:	11 88       	ld.ub	r8,r8[0x0]
8001aa64:	31 0b       	mov	r11,16
8001aa66:	10 9c       	mov	r12,r8
8001aa68:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001aa6c:	fe cc 0e 88 	sub	r12,pc,3720
8001aa70:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001aa74:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa78:	30 08       	mov	r8,0
8001aa7a:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001aa7c:	fe 9f f9 f8 	bral	80019e6c <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001aa80:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa84:	30 08       	mov	r8,0
8001aa86:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001aa88:	ec f8 01 0c 	ld.w	r8,r6[268]
8001aa8c:	11 88       	ld.ub	r8,r8[0x0]
8001aa8e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001aa92:	f0 09 18 00 	cp.b	r9,r8
8001aa96:	c1 b0       	breq	8001aacc <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001aa98:	fe cc 0c 68 	sub	r12,pc,3176
8001aa9c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001aaa0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001aaa4:	31 0b       	mov	r11,16
8001aaa6:	10 9c       	mov	r12,r8
8001aaa8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001aaac:	fe cc 0c a4 	sub	r12,pc,3236
8001aab0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001aab4:	ec f8 01 0c 	ld.w	r8,r6[268]
8001aab8:	11 88       	ld.ub	r8,r8[0x0]
8001aaba:	31 0b       	mov	r11,16
8001aabc:	10 9c       	mov	r12,r8
8001aabe:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001aac2:	fe cc 0e de 	sub	r12,pc,3806
8001aac6:	f0 16 00 01 	mcall	r6[4]
				break;
8001aaca:	c2 88       	rjmp	8001ab1a <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001aacc:	ec f8 00 fc 	ld.w	r8,r6[252]
8001aad0:	70 08       	ld.w	r8,r8[0x0]
8001aad2:	90 09       	ld.sh	r9,r8[0x0]
8001aad4:	2f f9       	sub	r9,-1
8001aad6:	5c 89       	casts.h	r9
8001aad8:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001aada:	ec f8 00 d8 	ld.w	r8,r6[216]
8001aade:	70 08       	ld.w	r8,r8[0x0]
8001aae0:	70 08       	ld.w	r8,r8[0x0]
8001aae2:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001aae6:	ec f8 00 d8 	ld.w	r8,r6[216]
8001aaea:	70 08       	ld.w	r8,r8[0x0]
8001aaec:	ec f9 00 e4 	ld.w	r9,r6[228]
8001aaf0:	72 09       	ld.w	r9,r9[0x0]
8001aaf2:	72 09       	ld.w	r9,r9[0x0]
8001aaf4:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001aaf6:	ec f8 00 e4 	ld.w	r8,r6[228]
8001aafa:	70 08       	ld.w	r8,r8[0x0]
8001aafc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ab00:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001ab02:	f0 16 02 09 	mcall	r6[2084]
8001ab06:	18 98       	mov	r8,r12
8001ab08:	58 08       	cp.w	r8,0
8001ab0a:	c0 80       	breq	8001ab1a <ubx_read+0xcdc>
			{
				msg_ok = true;
8001ab0c:	30 18       	mov	r8,1
8001ab0e:	ef 68 ff fb 	st.b	r7[-5],r8
8001ab12:	c0 48       	rjmp	8001ab1a <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001ab14:	d7 03       	nop
8001ab16:	c0 28       	rjmp	8001ab1a <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001ab18:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001ab1a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ab1e:	70 08       	ld.w	r8,r8[0x0]
8001ab20:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001ab24:	10 9c       	mov	r12,r8
8001ab26:	f0 16 00 2d 	mcall	r6[180]
8001ab2a:	18 98       	mov	r8,r12
8001ab2c:	58 08       	cp.w	r8,0
8001ab2e:	fe 91 f9 94 	brne	80019e56 <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001ab32:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001ab36:	10 9c       	mov	r12,r8
8001ab38:	2f ed       	sub	sp,-8
8001ab3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ab3e:	00 00       	add	r0,r0
8001ab40:	80 01       	ld.sh	r1,r0[0x0]
8001ab42:	9c ce       	ld.uh	lr,lr[0x8]
8001ab44:	4d 53       	lddpc	r3,8001ac98 <ubx_read+0xe5a>
8001ab46:	47 5f       	lddsp	pc,sp[0x1d4]
8001ab48:	4d 4f       	lddpc	pc,8001ac98 <ubx_read+0xe5a>
8001ab4a:	4e 20       	lddpc	r0,8001acd0 <ubx_read+0xe92>
8001ab4c:	47 50       	lddsp	r0,sp[0x1d4]
8001ab4e:	53 20       	stdsp	sp[0xc8],r0
8001ab50:	61 77       	ld.w	r7,r0[0x5c]
8001ab52:	61 6b       	ld.w	r11,r0[0x58]
8001ab54:	65 0a       	ld.w	r10,r2[0x40]
8001ab56:	00 00       	add	r0,r0
8001ab58:	4d 53       	lddpc	r3,8001acac <ubx_read+0xe6e>
8001ab5a:	47 5f       	lddsp	pc,sp[0x1d4]
8001ab5c:	54 49       	stdsp	sp[0x110],r9
8001ab5e:	4d 5f       	lddpc	pc,8001acb0 <ubx_read+0xe72>
8001ab60:	54 50       	stdsp	sp[0x114],r0
8001ab62:	20 47       	sub	r7,4
8001ab64:	50 53       	stdsp	sp[0x14],r3
8001ab66:	20 61       	sub	r1,6
8001ab68:	77 61       	ld.w	r1,r11[0x58]
8001ab6a:	6b 65       	ld.w	r5,r5[0x58]
8001ab6c:	0a 00       	add	r0,r5
8001ab6e:	00 00       	add	r0,r0
8001ab70:	4d 53       	lddpc	r3,8001acc4 <ubx_read+0xe86>
8001ab72:	47 5f       	lddsp	pc,sp[0x1d4]
8001ab74:	54 49       	stdsp	sp[0x110],r9
8001ab76:	4d 5f       	lddpc	pc,8001acc8 <ubx_read+0xe8a>
8001ab78:	56 52       	stdsp	sp[0x194],r2
8001ab7a:	46 59       	lddsp	r9,sp[0x194]
8001ab7c:	00 00       	add	r0,r0
8001ab7e:	00 00       	add	r0,r0
8001ab80:	20 69       	sub	r9,6
8001ab82:	74 6f       	ld.w	pc,r10[0x18]
8001ab84:	77 20       	ld.w	r0,r11[0x48]
8001ab86:	3a 00       	mov	r0,-96
8001ab88:	20 66       	sub	r6,6
8001ab8a:	72 61       	ld.w	r1,r9[0x18]
8001ab8c:	63 20       	ld.w	r0,r1[0x48]
8001ab8e:	3a 00       	mov	r0,-96
8001ab90:	20 64       	sub	r4,6
8001ab92:	65 6c       	ld.w	r12,r2[0x58]
8001ab94:	74 61       	ld.w	r1,r10[0x18]
8001ab96:	4d 73       	lddpc	r3,8001acf0 <ubx_read+0xeb2>
8001ab98:	20 3a       	sub	r10,3
8001ab9a:	00 00       	add	r0,r0
8001ab9c:	20 64       	sub	r4,6
8001ab9e:	65 6c       	ld.w	r12,r2[0x58]
8001aba0:	74 61       	ld.w	r1,r10[0x18]
8001aba2:	4e 73       	lddpc	r3,8001ad3c <ubx_read+0xefe>
8001aba4:	20 3a       	sub	r10,3
8001aba6:	00 00       	add	r0,r0
8001aba8:	47 6f       	lddsp	pc,sp[0x1d8]
8001abaa:	74 20       	ld.w	r0,r10[0x8]
8001abac:	65 6e       	ld.w	lr,r2[0x58]
8001abae:	67 69       	ld.w	r9,r3[0x58]
8001abb0:	6e 65       	ld.w	r5,r7[0x18]
8001abb2:	20 73       	sub	r3,7
8001abb4:	65 74       	ld.w	r4,r2[0x5c]
8001abb6:	74 69       	ld.w	r9,r10[0x18]
8001abb8:	6e 67       	ld.w	r7,r7[0x18]
8001abba:	73 20       	ld.w	r0,r9[0x48]
8001abbc:	00 00       	add	r0,r0
8001abbe:	00 00       	add	r0,r0
8001abc0:	53 65       	stdsp	sp[0xd8],r5
8001abc2:	6e 64       	ld.w	r4,r7[0x18]
8001abc4:	20 4e       	sub	lr,4
8001abc6:	61 76       	ld.w	r6,r0[0x5c]
8001abc8:	20 73       	sub	r3,7
8001abca:	65 74       	ld.w	r4,r2[0x5c]
8001abcc:	74 69       	ld.w	r9,r10[0x18]
8001abce:	6e 67       	ld.w	r7,r7[0x18]
8001abd0:	73 00       	ld.w	r0,r9[0x40]
8001abd2:	00 00       	add	r0,r0
8001abd4:	4e 6f       	lddpc	pc,8001ad6c <ubx_read+0xf2e>
8001abd6:	20 65       	sub	r5,6
8001abd8:	6e 67       	ld.w	r7,r7[0x18]
8001abda:	69 6e       	ld.w	lr,r4[0x58]
8001abdc:	65 20       	ld.w	r0,r2[0x48]
8001abde:	73 65       	ld.w	r5,r9[0x58]
8001abe0:	74 74       	ld.w	r4,r10[0x1c]
8001abe2:	69 6e       	ld.w	lr,r4[0x58]
8001abe4:	67 73       	ld.w	r3,r3[0x5c]
8001abe6:	20 72       	sub	r2,7
8001abe8:	65 63       	ld.w	r3,r2[0x58]
8001abea:	65 69       	ld.w	r9,r2[0x58]
8001abec:	76 65       	ld.w	r5,r11[0x18]
8001abee:	64 20       	ld.w	r0,r2[0x8]
8001abf0:	00 00       	add	r0,r0
8001abf2:	00 00       	add	r0,r0
8001abf4:	4d 65       	lddpc	r5,8001ad4c <ubx_read+0xf0e>
8001abf6:	73 73       	ld.w	r3,r9[0x5c]
8001abf8:	61 67       	ld.w	r7,r0[0x58]
8001abfa:	65 20       	ld.w	r0,r2[0x48]
8001abfc:	43 46       	lddsp	r6,sp[0xd0]
8001abfe:	47 20       	lddsp	r0,sp[0x1c8]
8001ac00:	52 61       	stdsp	sp[0x98],r1
8001ac02:	74 65       	ld.w	r5,r10[0x18]
8001ac04:	20 30       	sub	r0,3
8001ac06:	78 00       	ld.w	r0,r12[0x0]
8001ac08:	55 6e       	stdsp	sp[0x158],lr
8001ac0a:	65 78       	ld.w	r8,r2[0x5c]
8001ac0c:	70 65       	ld.w	r5,r8[0x18]
8001ac0e:	63 74       	ld.w	r4,r1[0x5c]
8001ac10:	65 64       	ld.w	r4,r2[0x58]
8001ac12:	20 6d       	sub	sp,24
8001ac14:	65 73       	ld.w	r3,r2[0x5c]
8001ac16:	73 61       	ld.w	r1,r9[0x58]
8001ac18:	67 65       	ld.w	r5,r3[0x58]
8001ac1a:	20 30       	sub	r0,3
8001ac1c:	78 00       	ld.w	r0,r12[0x0]
8001ac1e:	00 00       	add	r0,r0
8001ac20:	30 32       	mov	r2,3
8001ac22:	78 20       	ld.w	r0,r12[0x8]
8001ac24:	30 78       	mov	r8,7
8001ac26:	00 00       	add	r0,r0
8001ac28:	30 32       	mov	r2,3
8001ac2a:	78 0a       	ld.w	r10,r12[0x0]
8001ac2c:	00 00       	add	r0,r0
8001ac2e:	00 00       	add	r0,r0
8001ac30:	44 69       	lddsp	r9,sp[0x118]
8001ac32:	73 61       	ld.w	r1,r9[0x58]
8001ac34:	62 6c       	ld.w	r12,r1[0x18]
8001ac36:	69 6e       	ld.w	lr,r4[0x58]
8001ac38:	67 20       	ld.w	r0,r3[0x48]
8001ac3a:	6d 65       	ld.w	r5,r6[0x58]
8001ac3c:	73 73       	ld.w	r3,r9[0x5c]
8001ac3e:	61 67       	ld.w	r7,r0[0x58]
8001ac40:	65 20       	ld.w	r0,r2[0x48]
8001ac42:	30 78       	mov	r8,7
8001ac44:	00 00       	add	r0,r0
8001ac46:	00 00       	add	r0,r0
8001ac48:	4d 53       	lddpc	r3,8001ad9c <ubx_read+0xf5e>
8001ac4a:	47 5f       	lddsp	pc,sp[0x1d4]
8001ac4c:	4e 41       	lddpc	r1,8001addc <ubx_read+0xf9e>
8001ac4e:	56 5f       	stdsp	sp[0x194],pc
8001ac50:	50 4f       	stdsp	sp[0x10],pc
8001ac52:	53 4c       	stdsp	sp[0xd0],r12
8001ac54:	4c 48       	lddpc	r8,8001ad64 <ubx_read+0xf26>
8001ac56:	00 00       	add	r0,r0
8001ac58:	20 6c       	sub	r12,6
8001ac5a:	6f 6e       	ld.w	lr,r7[0x58]
8001ac5c:	67 69       	ld.w	r9,r3[0x58]
8001ac5e:	74 75       	ld.w	r5,r10[0x1c]
8001ac60:	64 65       	ld.w	r5,r2[0x18]
8001ac62:	20 3a       	sub	r10,3
8001ac64:	00 00       	add	r0,r0
8001ac66:	00 00       	add	r0,r0
8001ac68:	20 6c       	sub	r12,6
8001ac6a:	61 74       	ld.w	r4,r0[0x5c]
8001ac6c:	69 74       	ld.w	r4,r4[0x5c]
8001ac6e:	75 64       	ld.w	r4,r10[0x58]
8001ac70:	65 20       	ld.w	r0,r2[0x48]
8001ac72:	3a 00       	mov	r0,-96
8001ac74:	20 61       	sub	r1,6
8001ac76:	6c 74       	ld.w	r4,r6[0x1c]
8001ac78:	5f 65       	srmi	r5
8001ac7a:	6c 6c       	ld.w	r12,r6[0x18]
8001ac7c:	69 70       	ld.w	r0,r4[0x5c]
8001ac7e:	73 20       	ld.w	r0,r9[0x48]
8001ac80:	3a 00       	mov	r0,-96
8001ac82:	00 00       	add	r0,r0
8001ac84:	20 61       	sub	r1,6
8001ac86:	6c 74       	ld.w	r4,r6[0x1c]
8001ac88:	5f 6d       	srmi	sp
8001ac8a:	73 6c       	ld.w	r12,r9[0x58]
8001ac8c:	20 3a       	sub	r10,3
8001ac8e:	00 00       	add	r0,r0
8001ac90:	20 68       	sub	r8,6
8001ac92:	6f 72       	ld.w	r2,r7[0x5c]
8001ac94:	7a 5f       	ld.w	pc,sp[0x14]
8001ac96:	61 63       	ld.w	r3,r0[0x58]
8001ac98:	63 20       	ld.w	r0,r1[0x48]
8001ac9a:	3a 00       	mov	r0,-96
8001ac9c:	20 76       	sub	r6,7
8001ac9e:	65 72       	ld.w	r2,r2[0x5c]
8001aca0:	74 5f       	ld.w	pc,r10[0x14]
8001aca2:	61 63       	ld.w	r3,r0[0x58]
8001aca4:	63 20       	ld.w	r0,r1[0x48]
8001aca6:	3a 00       	mov	r0,-96
8001aca8:	4d 53       	lddpc	r3,8001adfc <ubx_read+0xfbe>
8001acaa:	47 5f       	lddsp	pc,sp[0x1d4]
8001acac:	53 54       	stdsp	sp[0xd4],r4
8001acae:	41 54       	lddsp	r4,sp[0x54]
8001acb0:	55 53       	stdsp	sp[0x154],r3
8001acb2:	20 66       	sub	r6,6
8001acb4:	69 78       	ld.w	r8,r4[0x5c]
8001acb6:	5f 74       	srpl	r4
8001acb8:	79 70       	ld.w	r0,r12[0x5c]
8001acba:	65 20       	ld.w	r0,r2[0x48]
8001acbc:	3d 20       	mov	r0,-46
8001acbe:	30 78       	mov	r8,7
8001acc0:	00 00       	add	r0,r0
8001acc2:	00 00       	add	r0,r0
8001acc4:	2c 20       	sub	r0,-62
8001acc6:	75 70       	ld.w	r0,r10[0x5c]
8001acc8:	74 69       	ld.w	r9,r10[0x18]
8001acca:	6d 65       	ld.w	r5,r6[0x58]
8001accc:	20 3d       	sub	sp,12
8001acce:	00 00       	add	r0,r0
8001acd0:	4d 53       	lddpc	r3,8001ae24 <ubx_process_data+0xe>
8001acd2:	47 5f       	lddsp	pc,sp[0x1d4]
8001acd4:	53 4f       	stdsp	sp[0xd0],pc
8001acd6:	4c 20       	lddpc	r0,8001addc <ubx_read+0xf9e>
8001acd8:	00 00       	add	r0,r0
8001acda:	00 00       	add	r0,r0
8001acdc:	69 74       	ld.w	r4,r4[0x5c]
8001acde:	6f 77       	ld.w	r7,r7[0x5c]
8001ace0:	20 3a       	sub	r10,3
8001ace2:	00 00       	add	r0,r0
8001ace4:	20 77       	sub	r7,7
8001ace6:	65 65       	ld.w	r5,r2[0x58]
8001ace8:	6b 20       	ld.w	r0,r5[0x48]
8001acea:	3a 00       	mov	r0,-96
8001acec:	20 66       	sub	r6,6
8001acee:	69 78       	ld.w	r8,r4[0x5c]
8001acf0:	5f 74       	srpl	r4
8001acf2:	79 70       	ld.w	r0,r12[0x5c]
8001acf4:	65 20       	ld.w	r0,r2[0x48]
8001acf6:	3d 20       	mov	r0,-46
8001acf8:	30 78       	mov	r8,7
8001acfa:	30 00       	mov	r0,0
8001acfc:	20 70       	sub	r0,7
8001acfe:	6f 73       	ld.w	r3,r7[0x5c]
8001ad00:	5f 61       	srmi	r1
8001ad02:	63 63       	ld.w	r3,r1[0x58]
8001ad04:	5f 33       	srlo	r3
8001ad06:	64 20       	ld.w	r0,r2[0x8]
8001ad08:	3a 00       	mov	r0,-96
8001ad0a:	00 00       	add	r0,r0
8001ad0c:	20 65       	sub	r5,6
8001ad0e:	63 65       	ld.w	r5,r1[0x58]
8001ad10:	66 78       	ld.w	r8,r3[0x1c]
8001ad12:	20 3a       	sub	r10,3
8001ad14:	00 00       	add	r0,r0
8001ad16:	00 00       	add	r0,r0
8001ad18:	20 65       	sub	r5,6
8001ad1a:	63 65       	ld.w	r5,r1[0x58]
8001ad1c:	66 79       	ld.w	r9,r3[0x1c]
8001ad1e:	20 3a       	sub	r10,3
8001ad20:	00 00       	add	r0,r0
8001ad22:	00 00       	add	r0,r0
8001ad24:	20 65       	sub	r5,6
8001ad26:	63 65       	ld.w	r5,r1[0x58]
8001ad28:	66 7a       	ld.w	r10,r3[0x1c]
8001ad2a:	20 3a       	sub	r10,3
8001ad2c:	00 00       	add	r0,r0
8001ad2e:	00 00       	add	r0,r0
8001ad30:	20 70       	sub	r0,7
8001ad32:	6f 73       	ld.w	r3,r7[0x5c]
8001ad34:	5f 44       	srge	r4
8001ad36:	4f 50       	lddpc	r0,8001af08 <ubx_process_data+0xf2>
8001ad38:	20 3a       	sub	r10,3
8001ad3a:	00 00       	add	r0,r0
8001ad3c:	20 6e       	sub	lr,6
8001ad3e:	75 6d       	ld.w	sp,r10[0x58]
8001ad40:	20 73       	sub	r3,7
8001ad42:	61 74       	ld.w	r4,r0[0x5c]
8001ad44:	20 3a       	sub	r10,3
8001ad46:	00 00       	add	r0,r0
8001ad48:	4d 53       	lddpc	r3,8001ae9c <ubx_process_data+0x86>
8001ad4a:	47 5f       	lddsp	pc,sp[0x1d4]
8001ad4c:	4e 41       	lddpc	r1,8001aedc <ubx_process_data+0xc6>
8001ad4e:	56 5f       	stdsp	sp[0x194],pc
8001ad50:	56 45       	stdsp	sp[0x190],r5
8001ad52:	4c 4e       	lddpc	lr,8001ae60 <ubx_process_data+0x4a>
8001ad54:	45 44       	lddsp	r4,sp[0x150]
8001ad56:	20 00       	sub	r0,0
8001ad58:	20 6e       	sub	lr,6
8001ad5a:	65 64       	ld.w	r4,r2[0x58]
8001ad5c:	5f 6e       	srmi	lr
8001ad5e:	6f 72       	ld.w	r2,r7[0x5c]
8001ad60:	74 68       	ld.w	r8,r10[0x18]
8001ad62:	20 3a       	sub	r10,3
8001ad64:	00 00       	add	r0,r0
8001ad66:	00 00       	add	r0,r0
8001ad68:	20 6e       	sub	lr,6
8001ad6a:	65 64       	ld.w	r4,r2[0x58]
8001ad6c:	5f 65       	srmi	r5
8001ad6e:	61 73       	ld.w	r3,r0[0x5c]
8001ad70:	74 20       	ld.w	r0,r10[0x8]
8001ad72:	3a 00       	mov	r0,-96
8001ad74:	20 6e       	sub	lr,6
8001ad76:	65 64       	ld.w	r4,r2[0x58]
8001ad78:	5f 64       	srmi	r4
8001ad7a:	6f 77       	ld.w	r7,r7[0x5c]
8001ad7c:	6e 20       	ld.w	r0,r7[0x8]
8001ad7e:	3a 00       	mov	r0,-96
8001ad80:	20 73       	sub	r3,7
8001ad82:	70 65       	ld.w	r5,r8[0x18]
8001ad84:	65 64       	ld.w	r4,r2[0x58]
8001ad86:	5f 33       	srlo	r3
8001ad88:	64 20       	ld.w	r0,r2[0x8]
8001ad8a:	3a 00       	mov	r0,-96
8001ad8c:	20 68       	sub	r8,6
8001ad8e:	65 61       	ld.w	r1,r2[0x58]
8001ad90:	64 69       	ld.w	r9,r2[0x18]
8001ad92:	6e 67       	ld.w	r7,r7[0x18]
8001ad94:	5f 32       	srlo	r2
8001ad96:	64 20       	ld.w	r0,r2[0x8]
8001ad98:	3a 00       	mov	r0,-96
8001ad9a:	00 00       	add	r0,r0
8001ad9c:	20 73       	sub	r3,7
8001ad9e:	70 65       	ld.w	r5,r8[0x18]
8001ada0:	65 64       	ld.w	r4,r2[0x58]
8001ada2:	5f 61       	srmi	r1
8001ada4:	63 63       	ld.w	r3,r1[0x58]
8001ada6:	75 72       	ld.w	r2,r10[0x5c]
8001ada8:	61 63       	ld.w	r3,r0[0x58]
8001adaa:	79 20       	ld.w	r0,r12[0x48]
8001adac:	3a 00       	mov	r0,-96
8001adae:	00 00       	add	r0,r0
8001adb0:	20 68       	sub	r8,6
8001adb2:	65 61       	ld.w	r1,r2[0x58]
8001adb4:	64 69       	ld.w	r9,r2[0x18]
8001adb6:	6e 67       	ld.w	r7,r7[0x18]
8001adb8:	5f 61       	srmi	r1
8001adba:	63 63       	ld.w	r3,r1[0x58]
8001adbc:	75 72       	ld.w	r2,r10[0x5c]
8001adbe:	61 63       	ld.w	r3,r0[0x58]
8001adc0:	79 20       	ld.w	r0,r12[0x48]
8001adc2:	3a 00       	mov	r0,-96
8001adc4:	4d 53       	lddpc	r3,8001af18 <ubx_process_data+0x102>
8001adc6:	47 5f       	lddsp	pc,sp[0x1d4]
8001adc8:	4e 41       	lddpc	r1,8001af58 <ubx_process_data+0x142>
8001adca:	56 5f       	stdsp	sp[0x194],pc
8001adcc:	53 56       	stdsp	sp[0xd4],r6
8001adce:	49 4e       	lddpc	lr,8001ae1c <ubx_process_data+0x6>
8001add0:	46 4f       	lddsp	pc,sp[0x190]
8001add2:	2c 20       	sub	r0,-62
8001add4:	6e 75       	ld.w	r5,r7[0x1c]
8001add6:	6d 43       	ld.w	r3,r6[0x50]
8001add8:	68 61       	ld.w	r1,r4[0x18]
8001adda:	6e 6e       	ld.w	lr,r7[0x18]
8001addc:	65 6c       	ld.w	r12,r2[0x58]
8001adde:	3a 00       	mov	r0,-96
8001ade0:	55 6e       	stdsp	sp[0x158],lr
8001ade2:	65 78       	ld.w	r8,r2[0x5c]
8001ade4:	70 65       	ld.w	r5,r8[0x18]
8001ade6:	63 74       	ld.w	r4,r1[0x5c]
8001ade8:	65 64       	ld.w	r4,r2[0x58]
8001adea:	20 4e       	sub	lr,4
8001adec:	41 56       	lddsp	r6,sp[0x54]
8001adee:	20 6d       	sub	sp,24
8001adf0:	65 73       	ld.w	r3,r2[0x5c]
8001adf2:	73 61       	ld.w	r1,r9[0x58]
8001adf4:	67 65       	ld.w	r5,r3[0x58]
8001adf6:	20 30       	sub	r0,3
8001adf8:	78 00       	ld.w	r0,r12[0x0]
8001adfa:	00 00       	add	r0,r0
8001adfc:	44 69       	lddsp	r9,sp[0x118]
8001adfe:	73 61       	ld.w	r1,r9[0x58]
8001ae00:	62 6c       	ld.w	r12,r1[0x18]
8001ae02:	69 6e       	ld.w	lr,r4[0x58]
8001ae04:	67 20       	ld.w	r0,r3[0x48]
8001ae06:	4e 41       	lddpc	r1,8001af94 <ubx_process_data+0x17e>
8001ae08:	56 20       	stdsp	sp[0x188],r0
8001ae0a:	6d 65       	ld.w	r5,r6[0x58]
8001ae0c:	73 73       	ld.w	r3,r9[0x5c]
8001ae0e:	61 67       	ld.w	r7,r0[0x58]
8001ae10:	65 20       	ld.w	r0,r2[0x48]
8001ae12:	30 78       	mov	r8,7
	...

8001ae16 <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001ae16:	eb cd 40 e0 	pushm	r5-r7,lr
8001ae1a:	1a 97       	mov	r7,sp
8001ae1c:	20 ad       	sub	sp,40
8001ae1e:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001ae22:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001ae24:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae28:	11 89       	ld.ub	r9,r8[0x0]
8001ae2a:	30 58       	mov	r8,5
8001ae2c:	f0 09 18 00 	cp.b	r9,r8
8001ae30:	c0 f1       	brne	8001ae4e <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001ae32:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae36:	11 88       	ld.ub	r8,r8[0x0]
8001ae38:	30 ab       	mov	r11,10
8001ae3a:	10 9c       	mov	r12,r8
8001ae3c:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001ae40:	fe cc 12 5c 	sub	r12,pc,4700
8001ae44:	f0 16 00 01 	mcall	r6[4]
		return false;
8001ae48:	30 08       	mov	r8,0
8001ae4a:	e0 8f 05 58 	bral	8001b8fa <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001ae4e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae52:	11 89       	ld.ub	r9,r8[0x0]
8001ae54:	30 a8       	mov	r8,10
8001ae56:	f0 09 18 00 	cp.b	r9,r8
8001ae5a:	c1 11       	brne	8001ae7c <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001ae5c:	f0 16 02 0f 	mcall	r6[2108]
8001ae60:	18 98       	mov	r8,r12
8001ae62:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001ae66:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ae6a:	58 08       	cp.w	r8,0
8001ae6c:	c0 50       	breq	8001ae76 <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001ae6e:	fe cc 03 2a 	sub	r12,pc,810
8001ae72:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001ae76:	30 08       	mov	r8,0
8001ae78:	e0 8f 05 41 	bral	8001b8fa <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001ae7c:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae80:	11 89       	ld.ub	r9,r8[0x0]
8001ae82:	30 d8       	mov	r8,13
8001ae84:	f0 09 18 00 	cp.b	r9,r8
8001ae88:	e0 81 00 89 	brne	8001af9a <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001ae8c:	f0 16 01 4a 	mcall	r6[1320]
8001ae90:	18 98       	mov	r8,r12
8001ae92:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001ae96:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ae9a:	58 08       	cp.w	r8,0
8001ae9c:	c2 40       	breq	8001aee4 <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001ae9e:	ec f8 02 00 	ld.w	r8,r6[512]
8001aea2:	11 88       	ld.ub	r8,r8[0x0]
8001aea4:	2f f8       	sub	r8,-1
8001aea6:	5c 58       	castu.b	r8
8001aea8:	ec f9 02 00 	ld.w	r9,r6[512]
8001aeac:	b2 88       	st.b	r9[0x0],r8
8001aeae:	ec f8 02 00 	ld.w	r8,r6[512]
8001aeb2:	11 88       	ld.ub	r8,r8[0x0]
8001aeb4:	ec f9 01 98 	ld.w	r9,r6[408]
8001aeb8:	13 89       	ld.ub	r9,r9[0x0]
8001aeba:	f0 09 0d 08 	divu	r8,r8,r9
8001aebe:	12 98       	mov	r8,r9
8001aec0:	5c 58       	castu.b	r8
8001aec2:	ec f9 02 00 	ld.w	r9,r6[512]
8001aec6:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001aec8:	ec f8 01 88 	ld.w	r8,r6[392]
8001aecc:	11 88       	ld.ub	r8,r8[0x0]
8001aece:	58 08       	cp.w	r8,0
8001aed0:	c0 a0       	breq	8001aee4 <ubx_process_data+0xce>
8001aed2:	ec f8 02 00 	ld.w	r8,r6[512]
8001aed6:	11 88       	ld.ub	r8,r8[0x0]
8001aed8:	58 08       	cp.w	r8,0
8001aeda:	c0 51       	brne	8001aee4 <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001aedc:	fe cc 03 84 	sub	r12,pc,900
8001aee0:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001aee4:	f0 16 02 11 	mcall	r6[2116]
8001aee8:	18 98       	mov	r8,r12
8001aeea:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001aeee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001aef2:	58 08       	cp.w	r8,0
8001aef4:	c5 00       	breq	8001af94 <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001aef6:	ec f8 01 b8 	ld.w	r8,r6[440]
8001aefa:	11 88       	ld.ub	r8,r8[0x0]
8001aefc:	2f f8       	sub	r8,-1
8001aefe:	5c 58       	castu.b	r8
8001af00:	ec f9 01 b8 	ld.w	r9,r6[440]
8001af04:	b2 88       	st.b	r9[0x0],r8
8001af06:	ec f8 01 b8 	ld.w	r8,r6[440]
8001af0a:	11 88       	ld.ub	r8,r8[0x0]
8001af0c:	ec f9 01 98 	ld.w	r9,r6[408]
8001af10:	13 89       	ld.ub	r9,r9[0x0]
8001af12:	f0 09 0d 08 	divu	r8,r8,r9
8001af16:	12 98       	mov	r8,r9
8001af18:	5c 58       	castu.b	r8
8001af1a:	ec f9 01 b8 	ld.w	r9,r6[440]
8001af1e:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001af20:	ec f8 01 88 	ld.w	r8,r6[392]
8001af24:	11 88       	ld.ub	r8,r8[0x0]
8001af26:	58 08       	cp.w	r8,0
8001af28:	c3 60       	breq	8001af94 <ubx_process_data+0x17e>
8001af2a:	ec f8 01 b8 	ld.w	r8,r6[440]
8001af2e:	11 88       	ld.ub	r8,r8[0x0]
8001af30:	58 08       	cp.w	r8,0
8001af32:	c3 11       	brne	8001af94 <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001af34:	fe cc 03 c4 	sub	r12,pc,964
8001af38:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001af3c:	fe cc 03 bc 	sub	r12,pc,956
8001af40:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001af44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001af48:	70 48       	ld.w	r8,r8[0x10]
8001af4a:	30 ab       	mov	r11,10
8001af4c:	10 9c       	mov	r12,r8
8001af4e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001af52:	fe cc 03 ca 	sub	r12,pc,970
8001af56:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001af5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001af5e:	70 38       	ld.w	r8,r8[0xc]
8001af60:	30 ab       	mov	r11,10
8001af62:	10 9c       	mov	r12,r8
8001af64:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001af68:	fe cc 03 d8 	sub	r12,pc,984
8001af6c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001af70:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001af74:	70 28       	ld.w	r8,r8[0x8]
8001af76:	30 ab       	mov	r11,10
8001af78:	10 9c       	mov	r12,r8
8001af7a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001af7e:	fe cc 03 e2 	sub	r12,pc,994
8001af82:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001af86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001af8a:	70 18       	ld.w	r8,r8[0x4]
8001af8c:	30 ab       	mov	r11,10
8001af8e:	10 9c       	mov	r12,r8
8001af90:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001af94:	30 08       	mov	r8,0
8001af96:	e0 8f 04 b2 	bral	8001b8fa <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001af9a:	ec f8 00 60 	ld.w	r8,r6[96]
8001af9e:	11 89       	ld.ub	r9,r8[0x0]
8001afa0:	30 68       	mov	r8,6
8001afa2:	f0 09 18 00 	cp.b	r9,r8
8001afa6:	c5 b1       	brne	8001b05c <ubx_process_data+0x246>
8001afa8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afac:	11 89       	ld.ub	r9,r8[0x0]
8001afae:	32 48       	mov	r8,36
8001afb0:	f0 09 18 00 	cp.b	r9,r8
8001afb4:	c5 41       	brne	8001b05c <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001afb6:	f0 16 01 ea 	mcall	r6[1960]
8001afba:	18 98       	mov	r8,r12
8001afbc:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001afc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001afc4:	58 08       	cp.w	r8,0
8001afc6:	c1 20       	breq	8001afea <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001afc8:	fe cc 04 20 	sub	r12,pc,1056
8001afcc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001afd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001afd4:	f1 38 00 21 	ld.ub	r8,r8[33]
8001afd8:	31 0b       	mov	r11,16
8001afda:	10 9c       	mov	r12,r8
8001afdc:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001afe0:	fe cc 13 fc 	sub	r12,pc,5116
8001afe4:	f0 16 00 01 	mcall	r6[4]
8001afe8:	c3 78       	rjmp	8001b056 <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001afea:	ec f8 01 d8 	ld.w	r8,r6[472]
8001afee:	70 08       	ld.w	r8,r8[0x0]
8001aff0:	5b f8       	cp.w	r8,-1
8001aff2:	c2 30       	breq	8001b038 <ubx_process_data+0x222>
8001aff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aff8:	58 08       	cp.w	r8,0
8001affa:	c1 f1       	brne	8001b038 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001affc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b000:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b004:	10 99       	mov	r9,r8
8001b006:	ec f8 01 d8 	ld.w	r8,r6[472]
8001b00a:	70 08       	ld.w	r8,r8[0x0]
8001b00c:	10 39       	cp.w	r9,r8
8001b00e:	c1 50       	breq	8001b038 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001b010:	ec f8 01 d8 	ld.w	r8,r6[472]
8001b014:	70 08       	ld.w	r8,r8[0x0]
8001b016:	5c 58       	castu.b	r8
8001b018:	ec f9 03 98 	ld.w	r9,r6[920]
8001b01c:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001b020:	fe cc 04 60 	sub	r12,pc,1120
8001b024:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001b028:	ec f8 03 98 	ld.w	r8,r6[920]
8001b02c:	32 49       	mov	r9,36
8001b02e:	10 9a       	mov	r10,r8
8001b030:	32 4b       	mov	r11,36
8001b032:	30 6c       	mov	r12,6
8001b034:	f0 16 00 fb 	mcall	r6[1004]
				}				
			}
			dbg_print("No engine settings received ");
8001b038:	fe cc 04 64 	sub	r12,pc,1124
8001b03c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b040:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b044:	11 88       	ld.ub	r8,r8[0x0]
8001b046:	31 0b       	mov	r11,16
8001b048:	10 9c       	mov	r12,r8
8001b04a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b04e:	fe cc 14 6a 	sub	r12,pc,5226
8001b052:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001b056:	30 08       	mov	r8,0
8001b058:	e0 8f 04 51 	bral	8001b8fa <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001b05c:	ec f8 00 60 	ld.w	r8,r6[96]
8001b060:	11 89       	ld.ub	r9,r8[0x0]
8001b062:	30 68       	mov	r8,6
8001b064:	f0 09 18 00 	cp.b	r9,r8
8001b068:	c3 11       	brne	8001b0ca <ubx_process_data+0x2b4>
8001b06a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b06e:	11 89       	ld.ub	r9,r8[0x0]
8001b070:	30 18       	mov	r8,1
8001b072:	f0 09 18 00 	cp.b	r9,r8
8001b076:	c2 a1       	brne	8001b0ca <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001b078:	f0 16 01 91 	mcall	r6[1604]
8001b07c:	18 98       	mov	r8,r12
8001b07e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001b082:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b086:	58 08       	cp.w	r8,0
8001b088:	c1 e0       	breq	8001b0c4 <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001b08a:	fe cc 04 96 	sub	r12,pc,1174
8001b08e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001b092:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b096:	11 a8       	ld.ub	r8,r8[0x2]
8001b098:	31 0b       	mov	r11,16
8001b09a:	10 9c       	mov	r12,r8
8001b09c:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001b0a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b0a4:	11 98       	ld.ub	r8,r8[0x1]
8001b0a6:	31 0b       	mov	r11,16
8001b0a8:	10 9c       	mov	r12,r8
8001b0aa:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001b0ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b0b2:	11 88       	ld.ub	r8,r8[0x0]
8001b0b4:	30 ab       	mov	r11,10
8001b0b6:	10 9c       	mov	r12,r8
8001b0b8:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b0bc:	fe cc 14 d8 	sub	r12,pc,5336
8001b0c0:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001b0c4:	30 08       	mov	r8,0
8001b0c6:	e0 8f 04 1a 	bral	8001b8fa <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001b0ca:	ec f8 00 60 	ld.w	r8,r6[96]
8001b0ce:	11 89       	ld.ub	r9,r8[0x0]
8001b0d0:	30 18       	mov	r8,1
8001b0d2:	f0 09 18 00 	cp.b	r9,r8
8001b0d6:	c5 10       	breq	8001b178 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001b0d8:	fe cc 04 d0 	sub	r12,pc,1232
8001b0dc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001b0e0:	ec f8 00 60 	ld.w	r8,r6[96]
8001b0e4:	11 88       	ld.ub	r8,r8[0x0]
8001b0e6:	31 0b       	mov	r11,16
8001b0e8:	10 9c       	mov	r12,r8
8001b0ea:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001b0ee:	fe cc 04 ce 	sub	r12,pc,1230
8001b0f2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b0f6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b0fa:	11 88       	ld.ub	r8,r8[0x0]
8001b0fc:	30 ab       	mov	r11,10
8001b0fe:	10 9c       	mov	r12,r8
8001b100:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001b104:	fe cc 04 dc 	sub	r12,pc,1244
8001b108:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001b10c:	ec f8 01 9c 	ld.w	r8,r6[412]
8001b110:	11 88       	ld.ub	r8,r8[0x0]
8001b112:	2f f8       	sub	r8,-1
8001b114:	5c 58       	castu.b	r8
8001b116:	ec f9 01 9c 	ld.w	r9,r6[412]
8001b11a:	b2 88       	st.b	r9[0x0],r8
8001b11c:	ec f8 01 9c 	ld.w	r8,r6[412]
8001b120:	11 88       	ld.ub	r8,r8[0x0]
8001b122:	58 08       	cp.w	r8,0
8001b124:	c2 71       	brne	8001b172 <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001b126:	fe cc 04 f6 	sub	r12,pc,1270
8001b12a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001b12e:	ec f8 00 60 	ld.w	r8,r6[96]
8001b132:	11 88       	ld.ub	r8,r8[0x0]
8001b134:	31 0b       	mov	r11,16
8001b136:	10 9c       	mov	r12,r8
8001b138:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001b13c:	fe cc 05 1c 	sub	r12,pc,1308
8001b140:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b144:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b148:	11 88       	ld.ub	r8,r8[0x0]
8001b14a:	31 0b       	mov	r11,16
8001b14c:	10 9c       	mov	r12,r8
8001b14e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001b152:	fe cc 05 2a 	sub	r12,pc,1322
8001b156:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001b15a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b15e:	11 88       	ld.ub	r8,r8[0x0]
8001b160:	10 99       	mov	r9,r8
8001b162:	ec f8 00 60 	ld.w	r8,r6[96]
8001b166:	11 88       	ld.ub	r8,r8[0x0]
8001b168:	30 0a       	mov	r10,0
8001b16a:	12 9b       	mov	r11,r9
8001b16c:	10 9c       	mov	r12,r8
8001b16e:	f0 16 00 5c 	mcall	r6[368]
		}
		return false;
8001b172:	30 08       	mov	r8,0
8001b174:	e0 8f 03 c3 	bral	8001b8fa <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001b178:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b17c:	11 88       	ld.ub	r8,r8[0x0]
8001b17e:	58 68       	cp.w	r8,6
8001b180:	e0 80 01 6f 	breq	8001b45e <ubx_process_data+0x648>
8001b184:	e0 89 00 09 	brgt	8001b196 <ubx_process_data+0x380>
8001b188:	58 28       	cp.w	r8,2
8001b18a:	c0 f0       	breq	8001b1a8 <ubx_process_data+0x392>
8001b18c:	58 38       	cp.w	r8,3
8001b18e:	e0 80 01 01 	breq	8001b390 <ubx_process_data+0x57a>
8001b192:	e0 8f 03 63 	bral	8001b858 <ubx_process_data+0xa42>
8001b196:	59 28       	cp.w	r8,18
8001b198:	e0 80 02 2c 	breq	8001b5f0 <ubx_process_data+0x7da>
8001b19c:	e0 48 00 30 	cp.w	r8,48
8001b1a0:	e0 80 03 3e 	breq	8001b81c <ubx_process_data+0xa06>
8001b1a4:	e0 8f 03 5a 	bral	8001b858 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001b1a8:	f0 16 01 72 	mcall	r6[1480]
8001b1ac:	18 98       	mov	r8,r12
8001b1ae:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001b1b2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b1b6:	58 08       	cp.w	r8,0
8001b1b8:	e0 80 03 85 	breq	8001b8c2 <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001b1bc:	ec f8 01 f0 	ld.w	r8,r6[496]
8001b1c0:	11 88       	ld.ub	r8,r8[0x0]
8001b1c2:	2f f8       	sub	r8,-1
8001b1c4:	5c 58       	castu.b	r8
8001b1c6:	ec f9 01 f0 	ld.w	r9,r6[496]
8001b1ca:	b2 88       	st.b	r9[0x0],r8
8001b1cc:	ec f8 01 f0 	ld.w	r8,r6[496]
8001b1d0:	11 88       	ld.ub	r8,r8[0x0]
8001b1d2:	ec f9 01 98 	ld.w	r9,r6[408]
8001b1d6:	13 89       	ld.ub	r9,r9[0x0]
8001b1d8:	f0 09 0d 08 	divu	r8,r8,r9
8001b1dc:	12 98       	mov	r8,r9
8001b1de:	5c 58       	castu.b	r8
8001b1e0:	ec f9 01 f0 	ld.w	r9,r6[496]
8001b1e4:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001b1e6:	ec f8 01 88 	ld.w	r8,r6[392]
8001b1ea:	11 88       	ld.ub	r8,r8[0x0]
8001b1ec:	58 08       	cp.w	r8,0
8001b1ee:	c5 b0       	breq	8001b2a4 <ubx_process_data+0x48e>
8001b1f0:	ec f8 01 f0 	ld.w	r8,r6[496]
8001b1f4:	11 88       	ld.ub	r8,r8[0x0]
8001b1f6:	58 08       	cp.w	r8,0
8001b1f8:	c5 61       	brne	8001b2a4 <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001b1fa:	fe cc 05 b2 	sub	r12,pc,1458
8001b1fe:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b202:	fe cc 06 82 	sub	r12,pc,1666
8001b206:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001b20a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b20e:	70 68       	ld.w	r8,r8[0x18]
8001b210:	30 ab       	mov	r11,10
8001b212:	10 9c       	mov	r12,r8
8001b214:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001b218:	fe cc 05 c0 	sub	r12,pc,1472
8001b21c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001b220:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b224:	70 58       	ld.w	r8,r8[0x14]
8001b226:	30 ab       	mov	r11,10
8001b228:	10 9c       	mov	r12,r8
8001b22a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001b22e:	fe cc 05 c6 	sub	r12,pc,1478
8001b232:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001b236:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b23a:	70 48       	ld.w	r8,r8[0x10]
8001b23c:	30 ab       	mov	r11,10
8001b23e:	10 9c       	mov	r12,r8
8001b240:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001b244:	fe cc 05 d0 	sub	r12,pc,1488
8001b248:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001b24c:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b250:	70 38       	ld.w	r8,r8[0xc]
8001b252:	30 ab       	mov	r11,10
8001b254:	10 9c       	mov	r12,r8
8001b256:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001b25a:	fe cc 05 d6 	sub	r12,pc,1494
8001b25e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001b262:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b266:	70 28       	ld.w	r8,r8[0x8]
8001b268:	30 ab       	mov	r11,10
8001b26a:	10 9c       	mov	r12,r8
8001b26c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001b270:	fe cc 05 e0 	sub	r12,pc,1504
8001b274:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001b278:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b27c:	70 18       	ld.w	r8,r8[0x4]
8001b27e:	30 ab       	mov	r11,10
8001b280:	10 9c       	mov	r12,r8
8001b282:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001b286:	fe cc 05 ea 	sub	r12,pc,1514
8001b28a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001b28e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b292:	70 08       	ld.w	r8,r8[0x0]
8001b294:	30 ab       	mov	r11,10
8001b296:	10 9c       	mov	r12,r8
8001b298:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b29c:	fe cc 16 b8 	sub	r12,pc,5816
8001b2a0:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001b2a4:	ec f8 00 00 	ld.w	r8,r6[0]
8001b2a8:	70 08       	ld.w	r8,r8[0x0]
8001b2aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001b2ae:	72 69       	ld.w	r9,r9[0x18]
8001b2b0:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001b2b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001b2b8:	70 05       	ld.w	r5,r8[0x0]
8001b2ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b2be:	70 58       	ld.w	r8,r8[0x14]
8001b2c0:	10 9c       	mov	r12,r8
8001b2c2:	f0 16 00 1a 	mcall	r6[104]
8001b2c6:	30 08       	mov	r8,0
8001b2c8:	e0 69 12 d0 	mov	r9,4816
8001b2cc:	ea 19 41 63 	orh	r9,0x4163
8001b2d0:	f0 16 00 0c 	mcall	r6[48]
8001b2d4:	14 98       	mov	r8,r10
8001b2d6:	16 99       	mov	r9,r11
8001b2d8:	ea e9 0b 10 	st.d	r5[2832],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001b2dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001b2e0:	70 05       	ld.w	r5,r8[0x0]
8001b2e2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b2e6:	70 48       	ld.w	r8,r8[0x10]
8001b2e8:	10 9c       	mov	r12,r8
8001b2ea:	f0 16 00 1a 	mcall	r6[104]
8001b2ee:	30 08       	mov	r8,0
8001b2f0:	e0 69 12 d0 	mov	r9,4816
8001b2f4:	ea 19 41 63 	orh	r9,0x4163
8001b2f8:	f0 16 00 0c 	mcall	r6[48]
8001b2fc:	14 98       	mov	r8,r10
8001b2fe:	16 99       	mov	r9,r11
8001b300:	ea e9 0b 08 	st.d	r5[2824],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001b304:	ec f8 00 00 	ld.w	r8,r6[0]
8001b308:	70 05       	ld.w	r5,r8[0x0]
8001b30a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b30e:	70 38       	ld.w	r8,r8[0xc]
8001b310:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b314:	fc 1b 44 7a 	movh	r11,0x447a
8001b318:	10 9c       	mov	r12,r8
8001b31a:	f0 16 00 0a 	mcall	r6[40]
8001b31e:	18 98       	mov	r8,r12
8001b320:	eb 48 0b 1c 	st.w	r5[2844],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001b324:	ec f8 00 00 	ld.w	r8,r6[0]
8001b328:	70 05       	ld.w	r5,r8[0x0]
8001b32a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b32e:	70 28       	ld.w	r8,r8[0x8]
8001b330:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b334:	fc 1b 44 7a 	movh	r11,0x447a
8001b338:	10 9c       	mov	r12,r8
8001b33a:	f0 16 00 0a 	mcall	r6[40]
8001b33e:	18 98       	mov	r8,r12
8001b340:	eb 48 0b 18 	st.w	r5[2840],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001b344:	ec f8 00 00 	ld.w	r8,r6[0]
8001b348:	70 05       	ld.w	r5,r8[0x0]
8001b34a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b34e:	70 18       	ld.w	r8,r8[0x4]
8001b350:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001b354:	fc 1b 44 7a 	movh	r11,0x447a
8001b358:	10 9c       	mov	r12,r8
8001b35a:	f0 16 00 0a 	mcall	r6[40]
8001b35e:	18 98       	mov	r8,r12
8001b360:	eb 48 0b 38 	st.w	r5[2872],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001b364:	ec f8 00 00 	ld.w	r8,r6[0]
8001b368:	70 05       	ld.w	r5,r8[0x0]
8001b36a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b36e:	70 08       	ld.w	r8,r8[0x0]
8001b370:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001b374:	fc 1b 44 7a 	movh	r11,0x447a
8001b378:	10 9c       	mov	r12,r8
8001b37a:	f0 16 00 0a 	mcall	r6[40]
8001b37e:	18 98       	mov	r8,r12
8001b380:	eb 48 0b 3c 	st.w	r5[2876],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001b384:	ec f9 02 4c 	ld.w	r9,r6[588]
8001b388:	30 18       	mov	r8,1
8001b38a:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001b38c:	e0 8f 02 a2 	bral	8001b8d0 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001b390:	f0 16 01 4e 	mcall	r6[1336]
8001b394:	18 98       	mov	r8,r12
8001b396:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001b39a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001b39e:	58 08       	cp.w	r8,0
8001b3a0:	e0 80 02 93 	breq	8001b8c6 <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001b3a4:	ec f8 01 cc 	ld.w	r8,r6[460]
8001b3a8:	11 88       	ld.ub	r8,r8[0x0]
8001b3aa:	2f f8       	sub	r8,-1
8001b3ac:	5c 58       	castu.b	r8
8001b3ae:	ec f9 01 cc 	ld.w	r9,r6[460]
8001b3b2:	b2 88       	st.b	r9[0x0],r8
8001b3b4:	ec f8 01 cc 	ld.w	r8,r6[460]
8001b3b8:	11 88       	ld.ub	r8,r8[0x0]
8001b3ba:	ec f9 01 98 	ld.w	r9,r6[408]
8001b3be:	13 89       	ld.ub	r9,r9[0x0]
8001b3c0:	f0 09 0d 08 	divu	r8,r8,r9
8001b3c4:	12 98       	mov	r8,r9
8001b3c6:	5c 58       	castu.b	r8
8001b3c8:	ec f9 01 cc 	ld.w	r9,r6[460]
8001b3cc:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001b3ce:	ec f8 01 88 	ld.w	r8,r6[392]
8001b3d2:	11 88       	ld.ub	r8,r8[0x0]
8001b3d4:	58 08       	cp.w	r8,0
8001b3d6:	c2 10       	breq	8001b418 <ubx_process_data+0x602>
8001b3d8:	ec f8 01 cc 	ld.w	r8,r6[460]
8001b3dc:	11 88       	ld.ub	r8,r8[0x0]
8001b3de:	58 08       	cp.w	r8,0
8001b3e0:	c1 c1       	brne	8001b418 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001b3e2:	fe cc 07 3a 	sub	r12,pc,1850
8001b3e6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001b3ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001b3ee:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001b3f2:	31 0b       	mov	r11,16
8001b3f4:	10 9c       	mov	r12,r8
8001b3f6:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001b3fa:	fe cc 07 36 	sub	r12,pc,1846
8001b3fe:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001b402:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001b406:	70 08       	ld.w	r8,r8[0x0]
8001b408:	30 ab       	mov	r11,10
8001b40a:	10 9c       	mov	r12,r8
8001b40c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b410:	fe cc 18 2c 	sub	r12,pc,6188
8001b414:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001b418:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001b41c:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001b420:	30 38       	mov	r8,3
8001b422:	f0 09 18 00 	cp.b	r9,r8
8001b426:	5f 08       	sreq	r8
8001b428:	5c 58       	castu.b	r8
8001b42a:	ec f9 01 e4 	ld.w	r9,r6[484]
8001b42e:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001b430:	ec f8 01 e4 	ld.w	r8,r6[484]
8001b434:	11 88       	ld.ub	r8,r8[0x0]
8001b436:	ec 18 00 01 	eorl	r8,0x1
8001b43a:	5c 58       	castu.b	r8
8001b43c:	c0 90       	breq	8001b44e <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001b43e:	ec f8 00 00 	ld.w	r8,r6[0]
8001b442:	70 09       	ld.w	r9,r8[0x0]
8001b444:	30 18       	mov	r8,1
8001b446:	f3 68 0b 54 	st.b	r9[2900],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001b44a:	e0 8f 02 43 	bral	8001b8d0 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001b44e:	ec f8 00 00 	ld.w	r8,r6[0]
8001b452:	70 09       	ld.w	r9,r8[0x0]
8001b454:	30 28       	mov	r8,2
8001b456:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		}
		break;
8001b45a:	e0 8f 02 3b 	bral	8001b8d0 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001b45e:	f0 16 01 7d 	mcall	r6[1524]
8001b462:	18 98       	mov	r8,r12
8001b464:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001b468:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b46c:	58 08       	cp.w	r8,0
8001b46e:	e0 80 02 2e 	breq	8001b8ca <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001b472:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b476:	11 88       	ld.ub	r8,r8[0x0]
8001b478:	2f f8       	sub	r8,-1
8001b47a:	5c 58       	castu.b	r8
8001b47c:	ec f9 01 c4 	ld.w	r9,r6[452]
8001b480:	b2 88       	st.b	r9[0x0],r8
8001b482:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b486:	11 88       	ld.ub	r8,r8[0x0]
8001b488:	ec f9 01 98 	ld.w	r9,r6[408]
8001b48c:	13 89       	ld.ub	r9,r9[0x0]
8001b48e:	f0 09 0d 08 	divu	r8,r8,r9
8001b492:	12 98       	mov	r8,r9
8001b494:	5c 58       	castu.b	r8
8001b496:	ec f9 01 c4 	ld.w	r9,r6[452]
8001b49a:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001b49c:	ec f8 01 88 	ld.w	r8,r6[392]
8001b4a0:	11 88       	ld.ub	r8,r8[0x0]
8001b4a2:	58 08       	cp.w	r8,0
8001b4a4:	c7 40       	breq	8001b58c <ubx_process_data+0x776>
8001b4a6:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b4aa:	11 88       	ld.ub	r8,r8[0x0]
8001b4ac:	58 08       	cp.w	r8,0
8001b4ae:	c6 f1       	brne	8001b58c <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001b4b0:	fe cc 07 e0 	sub	r12,pc,2016
8001b4b4:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001b4b8:	fe cc 07 dc 	sub	r12,pc,2012
8001b4bc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001b4c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b4c4:	70 c8       	ld.w	r8,r8[0x30]
8001b4c6:	30 ab       	mov	r11,10
8001b4c8:	10 9c       	mov	r12,r8
8001b4ca:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001b4ce:	fe cc 07 ea 	sub	r12,pc,2026
8001b4d2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001b4d6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b4da:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001b4de:	30 ab       	mov	r11,10
8001b4e0:	10 9c       	mov	r12,r8
8001b4e2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001b4e6:	fe cc 07 fa 	sub	r12,pc,2042
8001b4ea:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001b4ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b4f2:	f1 38 00 29 	ld.ub	r8,r8[41]
8001b4f6:	31 0b       	mov	r11,16
8001b4f8:	10 9c       	mov	r12,r8
8001b4fa:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001b4fe:	fe cc 08 02 	sub	r12,pc,2050
8001b502:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001b506:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b50a:	70 68       	ld.w	r8,r8[0x18]
8001b50c:	30 ab       	mov	r11,10
8001b50e:	10 9c       	mov	r12,r8
8001b510:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001b514:	fe cc 08 08 	sub	r12,pc,2056
8001b518:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001b51c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b520:	70 98       	ld.w	r8,r8[0x24]
8001b522:	30 ab       	mov	r11,10
8001b524:	10 9c       	mov	r12,r8
8001b526:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001b52a:	fe cc 08 12 	sub	r12,pc,2066
8001b52e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001b532:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b536:	70 88       	ld.w	r8,r8[0x20]
8001b538:	30 ab       	mov	r11,10
8001b53a:	10 9c       	mov	r12,r8
8001b53c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001b540:	fe cc 08 1c 	sub	r12,pc,2076
8001b544:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001b548:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b54c:	70 78       	ld.w	r8,r8[0x1c]
8001b54e:	30 ab       	mov	r11,10
8001b550:	10 9c       	mov	r12,r8
8001b552:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001b556:	fe cc 08 26 	sub	r12,pc,2086
8001b55a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001b55e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b562:	90 38       	ld.sh	r8,r8[0x6]
8001b564:	5c 78       	castu.h	r8
8001b566:	30 ab       	mov	r11,10
8001b568:	10 9c       	mov	r12,r8
8001b56a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001b56e:	fe cc 08 32 	sub	r12,pc,2098
8001b572:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001b576:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b57a:	11 c8       	ld.ub	r8,r8[0x4]
8001b57c:	30 ab       	mov	r11,10
8001b57e:	10 9c       	mov	r12,r8
8001b580:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b584:	fe cc 19 a0 	sub	r12,pc,6560
8001b588:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001b58c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b590:	f1 39 00 29 	ld.ub	r9,r8[41]
8001b594:	30 38       	mov	r8,3
8001b596:	f0 09 18 00 	cp.b	r9,r8
8001b59a:	5f 08       	sreq	r8
8001b59c:	5c 58       	castu.b	r8
8001b59e:	ec f9 01 e4 	ld.w	r9,r6[484]
8001b5a2:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001b5a4:	ec f8 01 e4 	ld.w	r8,r6[484]
8001b5a8:	11 88       	ld.ub	r8,r8[0x0]
8001b5aa:	ec 18 00 01 	eorl	r8,0x1
8001b5ae:	5c 58       	castu.b	r8
8001b5b0:	c0 80       	breq	8001b5c0 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001b5b2:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5b6:	70 09       	ld.w	r9,r8[0x0]
8001b5b8:	30 18       	mov	r8,1
8001b5ba:	f3 68 0b 54 	st.b	r9[2900],r8
8001b5be:	c0 78       	rjmp	8001b5cc <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001b5c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5c4:	70 09       	ld.w	r9,r8[0x0]
8001b5c6:	30 28       	mov	r8,2
8001b5c8:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001b5cc:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5d0:	70 09       	ld.w	r9,r8[0x0]
8001b5d2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b5d6:	11 c8       	ld.ub	r8,r8[0x4]
8001b5d8:	f3 68 0b 48 	st.b	r9[2888],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001b5dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5e0:	70 09       	ld.w	r9,r8[0x0]
8001b5e2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b5e6:	90 38       	ld.sh	r8,r8[0x6]
8001b5e8:	f3 58 0b 4a 	st.h	r9[2890],r8
		}
		break;
8001b5ec:	e0 8f 01 72 	bral	8001b8d0 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001b5f0:	f0 16 01 5e 	mcall	r6[1400]
8001b5f4:	18 98       	mov	r8,r12
8001b5f6:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001b5fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b5fe:	58 08       	cp.w	r8,0
8001b600:	e0 80 01 67 	breq	8001b8ce <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001b604:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b608:	11 88       	ld.ub	r8,r8[0x0]
8001b60a:	2f f8       	sub	r8,-1
8001b60c:	5c 58       	castu.b	r8
8001b60e:	ec f9 01 d0 	ld.w	r9,r6[464]
8001b612:	b2 88       	st.b	r9[0x0],r8
8001b614:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b618:	11 88       	ld.ub	r8,r8[0x0]
8001b61a:	ec f9 01 98 	ld.w	r9,r6[408]
8001b61e:	13 89       	ld.ub	r9,r9[0x0]
8001b620:	f0 09 0d 08 	divu	r8,r8,r9
8001b624:	12 98       	mov	r8,r9
8001b626:	5c 58       	castu.b	r8
8001b628:	ec f9 01 d0 	ld.w	r9,r6[464]
8001b62c:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001b62e:	ec f8 01 88 	ld.w	r8,r6[392]
8001b632:	11 88       	ld.ub	r8,r8[0x0]
8001b634:	58 08       	cp.w	r8,0
8001b636:	c6 60       	breq	8001b702 <ubx_process_data+0x8ec>
8001b638:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b63c:	11 88       	ld.ub	r8,r8[0x0]
8001b63e:	58 08       	cp.w	r8,0
8001b640:	c6 11       	brne	8001b702 <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001b642:	fe cc 08 fa 	sub	r12,pc,2298
8001b646:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001b64a:	fe cc 09 6e 	sub	r12,pc,2414
8001b64e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001b652:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b656:	70 88       	ld.w	r8,r8[0x20]
8001b658:	30 ab       	mov	r11,10
8001b65a:	10 9c       	mov	r12,r8
8001b65c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001b660:	fe cc 09 08 	sub	r12,pc,2312
8001b664:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001b668:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b66c:	70 78       	ld.w	r8,r8[0x1c]
8001b66e:	30 ab       	mov	r11,10
8001b670:	10 9c       	mov	r12,r8
8001b672:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001b676:	fe cc 09 0e 	sub	r12,pc,2318
8001b67a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001b67e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b682:	70 68       	ld.w	r8,r8[0x18]
8001b684:	30 ab       	mov	r11,10
8001b686:	10 9c       	mov	r12,r8
8001b688:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001b68c:	fe cc 09 18 	sub	r12,pc,2328
8001b690:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001b694:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b698:	70 58       	ld.w	r8,r8[0x14]
8001b69a:	30 ab       	mov	r11,10
8001b69c:	10 9c       	mov	r12,r8
8001b69e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001b6a2:	fe cc 09 22 	sub	r12,pc,2338
8001b6a6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001b6aa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b6ae:	70 48       	ld.w	r8,r8[0x10]
8001b6b0:	30 ab       	mov	r11,10
8001b6b2:	10 9c       	mov	r12,r8
8001b6b4:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001b6b8:	fe cc 09 2c 	sub	r12,pc,2348
8001b6bc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001b6c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b6c4:	70 28       	ld.w	r8,r8[0x8]
8001b6c6:	30 ab       	mov	r11,10
8001b6c8:	10 9c       	mov	r12,r8
8001b6ca:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001b6ce:	fe cc 09 32 	sub	r12,pc,2354
8001b6d2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001b6d6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b6da:	70 18       	ld.w	r8,r8[0x4]
8001b6dc:	30 ab       	mov	r11,10
8001b6de:	10 9c       	mov	r12,r8
8001b6e0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001b6e4:	fe cc 09 34 	sub	r12,pc,2356
8001b6e8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001b6ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b6f0:	70 08       	ld.w	r8,r8[0x0]
8001b6f2:	30 ab       	mov	r11,10
8001b6f4:	10 9c       	mov	r12,r8
8001b6f6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b6fa:	fe cc 1b 16 	sub	r12,pc,6934
8001b6fe:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001b702:	ec f8 00 00 	ld.w	r8,r6[0]
8001b706:	70 08       	ld.w	r8,r8[0x0]
8001b708:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b70c:	72 89       	ld.w	r9,r9[0x20]
8001b70e:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001b712:	ec f8 00 00 	ld.w	r8,r6[0]
8001b716:	70 05       	ld.w	r5,r8[0x0]
8001b718:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b71c:	70 48       	ld.w	r8,r8[0x10]
8001b71e:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001b722:	fc 1b 42 c8 	movh	r11,0x42c8
8001b726:	10 9c       	mov	r12,r8
8001b728:	f0 16 00 0a 	mcall	r6[40]
8001b72c:	18 98       	mov	r8,r12
8001b72e:	eb 48 0b 20 	st.w	r5[2848],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001b732:	ec f8 00 00 	ld.w	r8,r6[0]
8001b736:	70 05       	ld.w	r5,r8[0x0]
8001b738:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b73c:	70 38       	ld.w	r8,r8[0xc]
8001b73e:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001b742:	fc 1b 42 c8 	movh	r11,0x42c8
8001b746:	10 9c       	mov	r12,r8
8001b748:	f0 16 00 0a 	mcall	r6[40]
8001b74c:	18 98       	mov	r8,r12
8001b74e:	eb 48 0b 24 	st.w	r5[2852],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001b752:	ec f8 00 00 	ld.w	r8,r6[0]
8001b756:	70 05       	ld.w	r5,r8[0x0]
8001b758:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b75c:	70 28       	ld.w	r8,r8[0x8]
8001b75e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b762:	e0 6b 50 00 	mov	r11,20480
8001b766:	ea 1b 47 c3 	orh	r11,0x47c3
8001b76a:	10 9c       	mov	r12,r8
8001b76c:	f0 16 00 0a 	mcall	r6[40]
8001b770:	18 98       	mov	r8,r12
8001b772:	eb 48 0b 34 	st.w	r5[2868],r8
			have_raw_velocity = true;
8001b776:	ec f9 03 b4 	ld.w	r9,r6[948]
8001b77a:	30 18       	mov	r8,1
8001b77c:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001b77e:	ec f8 00 00 	ld.w	r8,r6[0]
8001b782:	70 05       	ld.w	r5,r8[0x0]
8001b784:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b788:	70 78       	ld.w	r8,r8[0x1c]
8001b78a:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b78e:	fc 1b 42 c8 	movh	r11,0x42c8
8001b792:	10 9c       	mov	r12,r8
8001b794:	f0 16 00 0a 	mcall	r6[40]
8001b798:	18 98       	mov	r8,r12
8001b79a:	eb 48 0b 28 	st.w	r5[2856],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001b79e:	ec f8 00 00 	ld.w	r8,r6[0]
8001b7a2:	70 05       	ld.w	r5,r8[0x0]
8001b7a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b7a8:	70 68       	ld.w	r8,r8[0x18]
8001b7aa:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b7ae:	fc 1b 42 c8 	movh	r11,0x42c8
8001b7b2:	10 9c       	mov	r12,r8
8001b7b4:	f0 16 00 0a 	mcall	r6[40]
8001b7b8:	18 98       	mov	r8,r12
8001b7ba:	eb 48 0b 2c 	st.w	r5[2860],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001b7be:	ec f8 00 00 	ld.w	r8,r6[0]
8001b7c2:	70 05       	ld.w	r5,r8[0x0]
8001b7c4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b7c8:	70 58       	ld.w	r8,r8[0x14]
8001b7ca:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b7ce:	fc 1b 42 c8 	movh	r11,0x42c8
8001b7d2:	10 9c       	mov	r12,r8
8001b7d4:	f0 16 00 0a 	mcall	r6[40]
8001b7d8:	18 98       	mov	r8,r12
8001b7da:	eb 48 0b 30 	st.w	r5[2864],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001b7de:	ec f8 00 00 	ld.w	r8,r6[0]
8001b7e2:	70 05       	ld.w	r5,r8[0x0]
8001b7e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b7e8:	70 18       	ld.w	r8,r8[0x4]
8001b7ea:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001b7ee:	fc 1b 42 c8 	movh	r11,0x42c8
8001b7f2:	10 9c       	mov	r12,r8
8001b7f4:	f0 16 00 0a 	mcall	r6[40]
8001b7f8:	18 98       	mov	r8,r12
8001b7fa:	eb 48 0b 40 	st.w	r5[2880],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001b7fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001b802:	70 08       	ld.w	r8,r8[0x0]
8001b804:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b808:	72 09       	ld.w	r9,r9[0x0]
8001b80a:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001b80e:	f1 49 0b 44 	st.w	r8[2884],r9
			new_speed = true;
8001b812:	ec f9 02 18 	ld.w	r9,r6[536]
8001b816:	30 18       	mov	r8,1
8001b818:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001b81a:	c5 b8       	rjmp	8001b8d0 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001b81c:	f0 16 01 c8 	mcall	r6[1824]
8001b820:	18 98       	mov	r8,r12
8001b822:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001b826:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001b82a:	58 08       	cp.w	r8,0
8001b82c:	c1 60       	breq	8001b858 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001b82e:	ec f8 01 88 	ld.w	r8,r6[392]
8001b832:	11 88       	ld.ub	r8,r8[0x0]
8001b834:	58 08       	cp.w	r8,0
8001b836:	c1 10       	breq	8001b858 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001b838:	fe cc 0a 74 	sub	r12,pc,2676
8001b83c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001b840:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001b844:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001b848:	30 ab       	mov	r11,10
8001b84a:	10 9c       	mov	r12,r8
8001b84c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b850:	fe cc 1c 6c 	sub	r12,pc,7276
8001b854:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001b858:	fe cc 0a 78 	sub	r12,pc,2680
8001b85c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b860:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b864:	11 88       	ld.ub	r8,r8[0x0]
8001b866:	30 ab       	mov	r11,10
8001b868:	10 9c       	mov	r12,r8
8001b86a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001b86e:	fe cc 1c 8a 	sub	r12,pc,7306
8001b872:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001b876:	ec f8 01 9c 	ld.w	r8,r6[412]
8001b87a:	11 88       	ld.ub	r8,r8[0x0]
8001b87c:	2f f8       	sub	r8,-1
8001b87e:	5c 58       	castu.b	r8
8001b880:	ec f9 01 9c 	ld.w	r9,r6[412]
8001b884:	b2 88       	st.b	r9[0x0],r8
8001b886:	ec f8 01 9c 	ld.w	r8,r6[412]
8001b88a:	11 88       	ld.ub	r8,r8[0x0]
8001b88c:	58 08       	cp.w	r8,0
8001b88e:	c1 81       	brne	8001b8be <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001b890:	fe cc 0a 94 	sub	r12,pc,2708
8001b894:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b898:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b89c:	11 88       	ld.ub	r8,r8[0x0]
8001b89e:	31 0b       	mov	r11,16
8001b8a0:	10 9c       	mov	r12,r8
8001b8a2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b8a6:	fe cc 1c c2 	sub	r12,pc,7362
8001b8aa:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001b8ae:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b8b2:	11 88       	ld.ub	r8,r8[0x0]
8001b8b4:	30 0a       	mov	r10,0
8001b8b6:	10 9b       	mov	r11,r8
8001b8b8:	30 1c       	mov	r12,1
8001b8ba:	f0 16 00 5c 	mcall	r6[368]
		}
		return false;
8001b8be:	30 08       	mov	r8,0
8001b8c0:	c1 d8       	rjmp	8001b8fa <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001b8c2:	d7 03       	nop
8001b8c4:	c0 68       	rjmp	8001b8d0 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001b8c6:	d7 03       	nop
8001b8c8:	c0 48       	rjmp	8001b8d0 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001b8ca:	d7 03       	nop
8001b8cc:	c0 28       	rjmp	8001b8d0 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001b8ce:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001b8d0:	ec f8 02 4c 	ld.w	r8,r6[588]
8001b8d4:	11 88       	ld.ub	r8,r8[0x0]
8001b8d6:	58 08       	cp.w	r8,0
8001b8d8:	c1 00       	breq	8001b8f8 <ubx_process_data+0xae2>
8001b8da:	ec f8 02 18 	ld.w	r8,r6[536]
8001b8de:	11 88       	ld.ub	r8,r8[0x0]
8001b8e0:	58 08       	cp.w	r8,0
8001b8e2:	c0 b0       	breq	8001b8f8 <ubx_process_data+0xae2>
		new_speed = false;
8001b8e4:	ec f9 02 18 	ld.w	r9,r6[536]
8001b8e8:	30 08       	mov	r8,0
8001b8ea:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001b8ec:	ec f9 02 4c 	ld.w	r9,r6[588]
8001b8f0:	30 08       	mov	r8,0
8001b8f2:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001b8f4:	30 18       	mov	r8,1
8001b8f6:	c0 28       	rjmp	8001b8fa <ubx_process_data+0xae4>
	}
	return false;
8001b8f8:	30 08       	mov	r8,0
}
8001b8fa:	10 9c       	mov	r12,r8
8001b8fc:	2f 6d       	sub	sp,-40
8001b8fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001b902:	00 00       	add	r0,r0
8001b904:	80 01       	ld.sh	r1,r0[0x0]
8001b906:	ac a6       	st.b	r6[0x2],r6

8001b908 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001b908:	eb cd 40 80 	pushm	r7,lr
8001b90c:	1a 97       	mov	r7,sp
8001b90e:	20 4d       	sub	sp,16
8001b910:	ef 4c ff fc 	st.w	r7[-4],r12
8001b914:	16 98       	mov	r8,r11
8001b916:	ef 4a ff f4 	st.w	r7[-12],r10
8001b91a:	ef 49 ff f0 	st.w	r7[-16],r9
8001b91e:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001b922:	c1 e8       	rjmp	8001b95e <update_checksum+0x56>
		*ck_a += *data;
8001b924:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b928:	11 89       	ld.ub	r9,r8[0x0]
8001b92a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b92e:	11 88       	ld.ub	r8,r8[0x0]
8001b930:	f2 08 00 08 	add	r8,r9,r8
8001b934:	5c 58       	castu.b	r8
8001b936:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b93a:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001b93c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b940:	11 89       	ld.ub	r9,r8[0x0]
8001b942:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b946:	11 88       	ld.ub	r8,r8[0x0]
8001b948:	f2 08 00 08 	add	r8,r9,r8
8001b94c:	5c 58       	castu.b	r8
8001b94e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001b952:	b2 88       	st.b	r9[0x0],r8
		data++;
8001b954:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b958:	2f f8       	sub	r8,-1
8001b95a:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001b95e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001b962:	30 08       	mov	r8,0
8001b964:	f0 09 18 00 	cp.b	r9,r8
8001b968:	5f 18       	srne	r8
8001b96a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001b96e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001b972:	20 18       	sub	r8,1
8001b974:	ef 68 ff f8 	st.b	r7[-8],r8
8001b978:	58 09       	cp.w	r9,0
8001b97a:	cd 51       	brne	8001b924 <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001b97c:	2f cd       	sub	sp,-16
8001b97e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b982 <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001b982:	eb cd 40 80 	pushm	r7,lr
8001b986:	1a 97       	mov	r7,sp
8001b988:	20 1d       	sub	sp,4
8001b98a:	18 98       	mov	r8,r12
8001b98c:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001b990:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001b994:	5c 58       	castu.b	r8
}
8001b996:	10 9c       	mov	r12,r8
8001b998:	2f fd       	sub	sp,-4
8001b99a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b99e <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001b99e:	eb cd 40 80 	pushm	r7,lr
8001b9a2:	1a 97       	mov	r7,sp
8001b9a4:	20 1d       	sub	sp,4
8001b9a6:	18 98       	mov	r8,r12
8001b9a8:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001b9ac:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001b9b0:	a9 88       	lsr	r8,0x8
8001b9b2:	5c 88       	casts.h	r8
8001b9b4:	5c 58       	castu.b	r8
}
8001b9b6:	10 9c       	mov	r12,r8
8001b9b8:	2f fd       	sub	sp,-4
8001b9ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b9be <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001b9be:	eb cd 40 c0 	pushm	r6-r7,lr
8001b9c2:	1a 97       	mov	r7,sp
8001b9c4:	20 5d       	sub	sp,20
8001b9c6:	4b 76       	lddpc	r6,8001baa0 <ubx_send_header+0xe2>
8001b9c8:	1e 26       	rsub	r6,pc
8001b9ca:	16 99       	mov	r9,r11
8001b9cc:	14 98       	mov	r8,r10
8001b9ce:	18 9a       	mov	r10,r12
8001b9d0:	ef 6a ff f4 	st.b	r7[-12],r10
8001b9d4:	ef 69 ff f0 	st.b	r7[-16],r9
8001b9d8:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001b9dc:	3b 58       	mov	r8,-75
8001b9de:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001b9e2:	36 28       	mov	r8,98
8001b9e4:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001b9e8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001b9ec:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001b9f0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001b9f4:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001b9f8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001b9fc:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001ba00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ba04:	10 99       	mov	r9,r8
8001ba06:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba0a:	70 08       	ld.w	r8,r8[0x0]
8001ba0c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba10:	31 0a       	mov	r10,16
8001ba12:	12 9b       	mov	r11,r9
8001ba14:	10 9c       	mov	r12,r8
8001ba16:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001ba1a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001ba1e:	10 99       	mov	r9,r8
8001ba20:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba24:	70 08       	ld.w	r8,r8[0x0]
8001ba26:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba2a:	31 0a       	mov	r10,16
8001ba2c:	12 9b       	mov	r11,r9
8001ba2e:	10 9c       	mov	r12,r8
8001ba30:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001ba34:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001ba38:	10 99       	mov	r9,r8
8001ba3a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba3e:	70 08       	ld.w	r8,r8[0x0]
8001ba40:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba44:	30 aa       	mov	r10,10
8001ba46:	12 9b       	mov	r11,r9
8001ba48:	10 9c       	mov	r12,r8
8001ba4a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001ba4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001ba52:	10 99       	mov	r9,r8
8001ba54:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba58:	70 08       	ld.w	r8,r8[0x0]
8001ba5a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba5e:	31 0a       	mov	r10,16
8001ba60:	12 9b       	mov	r11,r9
8001ba62:	10 9c       	mov	r12,r8
8001ba64:	f0 16 00 28 	mcall	r6[160]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001ba68:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ba6c:	5c 58       	castu.b	r8
8001ba6e:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001ba72:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba76:	70 08       	ld.w	r8,r8[0x0]
8001ba78:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba7c:	31 0a       	mov	r10,16
8001ba7e:	12 9b       	mov	r11,r9
8001ba80:	10 9c       	mov	r12,r8
8001ba82:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001ba86:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba8a:	70 08       	ld.w	r8,r8[0x0]
8001ba8c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ba90:	31 0a       	mov	r10,16
8001ba92:	30 0b       	mov	r11,0
8001ba94:	10 9c       	mov	r12,r8
8001ba96:	f0 16 00 28 	mcall	r6[160]
	
}
8001ba9a:	2f bd       	sub	sp,-20
8001ba9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001baa0:	80 01       	ld.sh	r1,r0[0x0]
8001baa2:	b8 4c       	st.h	r12[0x8],r12

8001baa4 <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001baa4:	eb cd 40 c0 	pushm	r6-r7,lr
8001baa8:	1a 97       	mov	r7,sp
8001baaa:	20 2d       	sub	sp,8
8001baac:	49 26       	lddpc	r6,8001baf4 <ubx_send_cksum+0x50>
8001baae:	1e 26       	rsub	r6,pc
8001bab0:	18 99       	mov	r9,r12
8001bab2:	16 98       	mov	r8,r11
8001bab4:	ef 69 ff fc 	st.b	r7[-4],r9
8001bab8:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001babc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001bac0:	ec f8 00 00 	ld.w	r8,r6[0]
8001bac4:	70 08       	ld.w	r8,r8[0x0]
8001bac6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001baca:	31 0a       	mov	r10,16
8001bacc:	12 9b       	mov	r11,r9
8001bace:	10 9c       	mov	r12,r8
8001bad0:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001bad4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001bad8:	ec f8 00 00 	ld.w	r8,r6[0]
8001badc:	70 08       	ld.w	r8,r8[0x0]
8001bade:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bae2:	31 0a       	mov	r10,16
8001bae4:	12 9b       	mov	r11,r9
8001bae6:	10 9c       	mov	r12,r8
8001bae8:	f0 16 00 28 	mcall	r6[160]
}
8001baec:	2f ed       	sub	sp,-8
8001baee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001baf2:	00 00       	add	r0,r0
8001baf4:	80 01       	ld.sh	r1,r0[0x0]
8001baf6:	b9 32       	mul	r2,r12

8001baf8 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001baf8:	eb cd 40 c0 	pushm	r6-r7,lr
8001bafc:	1a 97       	mov	r7,sp
8001bafe:	20 6d       	sub	sp,24
8001bb00:	4b 56       	lddpc	r6,8001bbd4 <ubx_send_message+0xdc>
8001bb02:	1e 26       	rsub	r6,pc
8001bb04:	ef 4a ff ec 	st.w	r7[-20],r10
8001bb08:	12 98       	mov	r8,r9
8001bb0a:	18 99       	mov	r9,r12
8001bb0c:	ef 69 ff f4 	st.b	r7[-12],r9
8001bb10:	16 99       	mov	r9,r11
8001bb12:	ef 69 ff f0 	st.b	r7[-16],r9
8001bb16:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001bb1a:	30 08       	mov	r8,0
8001bb1c:	ef 68 ff f9 	st.b	r7[-7],r8
8001bb20:	30 08       	mov	r8,0
8001bb22:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001bb26:	3b 58       	mov	r8,-75
8001bb28:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001bb2c:	36 28       	mov	r8,98
8001bb2e:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001bb32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001bb36:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001bb3a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001bb3e:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001bb42:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001bb46:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001bb4a:	ee c9 00 08 	sub	r9,r7,8
8001bb4e:	ee ca 00 07 	sub	r10,r7,7
8001bb52:	ee c8 00 06 	sub	r8,r7,6
8001bb56:	2f d8       	sub	r8,-3
8001bb58:	30 4b       	mov	r11,4
8001bb5a:	10 9c       	mov	r12,r8
8001bb5c:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001bb60:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001bb64:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001bb68:	ee c9 00 08 	sub	r9,r7,8
8001bb6c:	ee ca 00 07 	sub	r10,r7,7
8001bb70:	10 9c       	mov	r12,r8
8001bb72:	f0 16 00 34 	mcall	r6[208]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001bb76:	ee c9 00 06 	sub	r9,r7,6
8001bb7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb7e:	70 08       	ld.w	r8,r8[0x0]
8001bb80:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bb84:	12 9b       	mov	r11,r9
8001bb86:	10 9c       	mov	r12,r8
8001bb88:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001bb8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001bb90:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb94:	70 08       	ld.w	r8,r8[0x0]
8001bb96:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bb9a:	12 9b       	mov	r11,r9
8001bb9c:	10 9c       	mov	r12,r8
8001bb9e:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001bba2:	ec f8 00 00 	ld.w	r8,r6[0]
8001bba6:	70 08       	ld.w	r8,r8[0x0]
8001bba8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bbac:	ee c9 00 07 	sub	r9,r7,7
8001bbb0:	12 9b       	mov	r11,r9
8001bbb2:	10 9c       	mov	r12,r8
8001bbb4:	f0 16 00 33 	mcall	r6[204]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001bbb8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bbbc:	70 08       	ld.w	r8,r8[0x0]
8001bbbe:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bbc2:	ee c9 00 08 	sub	r9,r7,8
8001bbc6:	12 9b       	mov	r11,r9
8001bbc8:	10 9c       	mov	r12,r8
8001bbca:	f0 16 00 33 	mcall	r6[204]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001bbce:	2f ad       	sub	sp,-24
8001bbd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bbd4:	80 01       	ld.sh	r1,r0[0x0]
8001bbd6:	b9 86       	lsr	r6,0x18

8001bbd8 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001bbd8:	eb cd 40 e0 	pushm	r5-r7,lr
8001bbdc:	1a 97       	mov	r7,sp
8001bbde:	20 4d       	sub	sp,16
8001bbe0:	4d d6       	lddpc	r6,8001bd54 <ubx_send_message_CFG_nav_rate+0x17c>
8001bbe2:	1e 26       	rsub	r6,pc
8001bbe4:	ee c5 ff f0 	sub	r5,r7,-16
8001bbe8:	16 99       	mov	r9,r11
8001bbea:	14 98       	mov	r8,r10
8001bbec:	18 9a       	mov	r10,r12
8001bbee:	ef 6a ff f8 	st.b	r7[-8],r10
8001bbf2:	ef 69 ff f4 	st.b	r7[-12],r9
8001bbf6:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001bbfa:	30 08       	mov	r8,0
8001bbfc:	ef 68 ff ff 	st.b	r7[-1],r8
8001bc00:	30 08       	mov	r8,0
8001bc02:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001bc06:	ee c9 00 02 	sub	r9,r7,2
8001bc0a:	ee ca 00 01 	sub	r10,r7,1
8001bc0e:	ee c8 00 08 	sub	r8,r7,8
8001bc12:	30 1b       	mov	r11,1
8001bc14:	10 9c       	mov	r12,r8
8001bc16:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001bc1a:	ee c9 00 02 	sub	r9,r7,2
8001bc1e:	ee ca 00 01 	sub	r10,r7,1
8001bc22:	ee c8 00 0c 	sub	r8,r7,12
8001bc26:	30 1b       	mov	r11,1
8001bc28:	10 9c       	mov	r12,r8
8001bc2a:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001bc2e:	ee c9 00 02 	sub	r9,r7,2
8001bc32:	ee ca 00 01 	sub	r10,r7,1
8001bc36:	ee c8 00 10 	sub	r8,r7,16
8001bc3a:	30 1b       	mov	r11,1
8001bc3c:	10 9c       	mov	r12,r8
8001bc3e:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001bc42:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001bc46:	10 9b       	mov	r11,r8
8001bc48:	0a 98       	mov	r8,r5
8001bc4a:	ee c9 00 02 	sub	r9,r7,2
8001bc4e:	ee ca 00 01 	sub	r10,r7,1
8001bc52:	10 9c       	mov	r12,r8
8001bc54:	f0 16 00 34 	mcall	r6[208]
	
	ubx_send_header(msg_class,_msg_id,size);
8001bc58:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001bc5c:	10 9a       	mov	r10,r8
8001bc5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001bc62:	10 99       	mov	r9,r8
8001bc64:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001bc68:	12 9b       	mov	r11,r9
8001bc6a:	10 9c       	mov	r12,r8
8001bc6c:	f0 16 00 be 	mcall	r6[760]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001bc70:	8a 08       	ld.sh	r8,r5[0x0]
8001bc72:	5c 78       	castu.h	r8
8001bc74:	10 9c       	mov	r12,r8
8001bc76:	f0 16 00 aa 	mcall	r6[680]
8001bc7a:	18 98       	mov	r8,r12
8001bc7c:	10 99       	mov	r9,r8
8001bc7e:	ec f8 00 00 	ld.w	r8,r6[0]
8001bc82:	70 08       	ld.w	r8,r8[0x0]
8001bc84:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bc88:	31 0a       	mov	r10,16
8001bc8a:	12 9b       	mov	r11,r9
8001bc8c:	10 9c       	mov	r12,r8
8001bc8e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001bc92:	8a 08       	ld.sh	r8,r5[0x0]
8001bc94:	5c 78       	castu.h	r8
8001bc96:	10 9c       	mov	r12,r8
8001bc98:	f0 16 00 b1 	mcall	r6[708]
8001bc9c:	18 98       	mov	r8,r12
8001bc9e:	10 99       	mov	r9,r8
8001bca0:	ec f8 00 00 	ld.w	r8,r6[0]
8001bca4:	70 08       	ld.w	r8,r8[0x0]
8001bca6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bcaa:	31 0a       	mov	r10,16
8001bcac:	12 9b       	mov	r11,r9
8001bcae:	10 9c       	mov	r12,r8
8001bcb0:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001bcb4:	8a 18       	ld.sh	r8,r5[0x2]
8001bcb6:	5c 78       	castu.h	r8
8001bcb8:	10 9c       	mov	r12,r8
8001bcba:	f0 16 00 aa 	mcall	r6[680]
8001bcbe:	18 98       	mov	r8,r12
8001bcc0:	10 99       	mov	r9,r8
8001bcc2:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcc6:	70 08       	ld.w	r8,r8[0x0]
8001bcc8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bccc:	31 0a       	mov	r10,16
8001bcce:	12 9b       	mov	r11,r9
8001bcd0:	10 9c       	mov	r12,r8
8001bcd2:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001bcd6:	8a 18       	ld.sh	r8,r5[0x2]
8001bcd8:	5c 78       	castu.h	r8
8001bcda:	10 9c       	mov	r12,r8
8001bcdc:	f0 16 00 b1 	mcall	r6[708]
8001bce0:	18 98       	mov	r8,r12
8001bce2:	10 99       	mov	r9,r8
8001bce4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bce8:	70 08       	ld.w	r8,r8[0x0]
8001bcea:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bcee:	31 0a       	mov	r10,16
8001bcf0:	12 9b       	mov	r11,r9
8001bcf2:	10 9c       	mov	r12,r8
8001bcf4:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001bcf8:	8a 28       	ld.sh	r8,r5[0x4]
8001bcfa:	5c 78       	castu.h	r8
8001bcfc:	10 9c       	mov	r12,r8
8001bcfe:	f0 16 00 aa 	mcall	r6[680]
8001bd02:	18 98       	mov	r8,r12
8001bd04:	10 99       	mov	r9,r8
8001bd06:	ec f8 00 00 	ld.w	r8,r6[0]
8001bd0a:	70 08       	ld.w	r8,r8[0x0]
8001bd0c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bd10:	31 0a       	mov	r10,16
8001bd12:	12 9b       	mov	r11,r9
8001bd14:	10 9c       	mov	r12,r8
8001bd16:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001bd1a:	8a 28       	ld.sh	r8,r5[0x4]
8001bd1c:	5c 78       	castu.h	r8
8001bd1e:	10 9c       	mov	r12,r8
8001bd20:	f0 16 00 b1 	mcall	r6[708]
8001bd24:	18 98       	mov	r8,r12
8001bd26:	10 99       	mov	r9,r8
8001bd28:	ec f8 00 00 	ld.w	r8,r6[0]
8001bd2c:	70 08       	ld.w	r8,r8[0x0]
8001bd2e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bd32:	31 0a       	mov	r10,16
8001bd34:	12 9b       	mov	r11,r9
8001bd36:	10 9c       	mov	r12,r8
8001bd38:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001bd3c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001bd40:	10 99       	mov	r9,r8
8001bd42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001bd46:	12 9b       	mov	r11,r9
8001bd48:	10 9c       	mov	r12,r8
8001bd4a:	f0 16 00 bc 	mcall	r6[752]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001bd4e:	2f cd       	sub	sp,-16
8001bd50:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001bd54:	80 01       	ld.sh	r1,r0[0x0]
8001bd56:	ba 66       	st.h	sp[0xc],r6

8001bd58 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001bd58:	eb cd 40 c0 	pushm	r6-r7,lr
8001bd5c:	1a 97       	mov	r7,sp
8001bd5e:	20 5d       	sub	sp,20
8001bd60:	4b 46       	lddpc	r6,8001be30 <ubx_send_message_nav_settings+0xd8>
8001bd62:	1e 26       	rsub	r6,pc
8001bd64:	ef 4a ff f0 	st.w	r7[-16],r10
8001bd68:	12 98       	mov	r8,r9
8001bd6a:	18 99       	mov	r9,r12
8001bd6c:	ef 69 ff f8 	st.b	r7[-8],r9
8001bd70:	16 99       	mov	r9,r11
8001bd72:	ef 69 ff f4 	st.b	r7[-12],r9
8001bd76:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001bd7a:	30 08       	mov	r8,0
8001bd7c:	ef 68 ff ff 	st.b	r7[-1],r8
8001bd80:	30 08       	mov	r8,0
8001bd82:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001bd86:	ee c9 00 02 	sub	r9,r7,2
8001bd8a:	ee ca 00 01 	sub	r10,r7,1
8001bd8e:	ee c8 00 08 	sub	r8,r7,8
8001bd92:	30 1b       	mov	r11,1
8001bd94:	10 9c       	mov	r12,r8
8001bd96:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001bd9a:	ee c9 00 02 	sub	r9,r7,2
8001bd9e:	ee ca 00 01 	sub	r10,r7,1
8001bda2:	ee c8 00 0c 	sub	r8,r7,12
8001bda6:	30 1b       	mov	r11,1
8001bda8:	10 9c       	mov	r12,r8
8001bdaa:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001bdae:	ee c9 00 02 	sub	r9,r7,2
8001bdb2:	ee ca 00 01 	sub	r10,r7,1
8001bdb6:	ee c8 00 14 	sub	r8,r7,20
8001bdba:	30 1b       	mov	r11,1
8001bdbc:	10 9c       	mov	r12,r8
8001bdbe:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001bdc2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001bdc6:	10 9a       	mov	r10,r8
8001bdc8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001bdcc:	10 99       	mov	r9,r8
8001bdce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001bdd2:	12 9b       	mov	r11,r9
8001bdd4:	10 9c       	mov	r12,r8
8001bdd6:	f0 16 00 be 	mcall	r6[760]
	
	if (engine_settings != NULL)
8001bdda:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001bdde:	58 08       	cp.w	r8,0
8001bde0:	c1 c0       	breq	8001be18 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001bde2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001bde6:	10 9b       	mov	r11,r8
8001bde8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001bdec:	ee c9 00 02 	sub	r9,r7,2
8001bdf0:	ee ca 00 01 	sub	r10,r7,1
8001bdf4:	10 9c       	mov	r12,r8
8001bdf6:	f0 16 00 34 	mcall	r6[208]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001bdfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001bdfe:	70 08       	ld.w	r8,r8[0x0]
8001be00:	5c 58       	castu.b	r8
8001be02:	10 99       	mov	r9,r8
8001be04:	ec f8 00 00 	ld.w	r8,r6[0]
8001be08:	70 08       	ld.w	r8,r8[0x0]
8001be0a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001be0e:	30 aa       	mov	r10,10
8001be10:	12 9b       	mov	r11,r9
8001be12:	10 9c       	mov	r12,r8
8001be14:	f0 16 00 28 	mcall	r6[160]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001be18:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001be1c:	10 99       	mov	r9,r8
8001be1e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001be22:	12 9b       	mov	r11,r9
8001be24:	10 9c       	mov	r12,r8
8001be26:	f0 16 00 bc 	mcall	r6[752]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001be2a:	2f bd       	sub	sp,-20
8001be2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001be30:	80 01       	ld.sh	r1,r0[0x0]
8001be32:	bb e6       	*unknown*

8001be34 <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001be34:	eb cd 40 c0 	pushm	r6-r7,lr
8001be38:	1a 97       	mov	r7,sp
8001be3a:	20 5d       	sub	sp,20
8001be3c:	4c 16       	lddpc	r6,8001bf40 <ubx_configure_message_rate+0x10c>
8001be3e:	1e 26       	rsub	r6,pc
8001be40:	16 99       	mov	r9,r11
8001be42:	14 98       	mov	r8,r10
8001be44:	18 9a       	mov	r10,r12
8001be46:	ef 6a ff f4 	st.b	r7[-12],r10
8001be4a:	ef 69 ff f0 	st.b	r7[-16],r9
8001be4e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001be52:	30 08       	mov	r8,0
8001be54:	ef 68 ff ff 	st.b	r7[-1],r8
8001be58:	30 08       	mov	r8,0
8001be5a:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001be5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001be62:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001be66:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001be6a:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001be6e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001be72:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001be76:	30 38       	mov	r8,3
8001be78:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001be7c:	ee c9 00 02 	sub	r9,r7,2
8001be80:	ee ca 00 01 	sub	r10,r7,1
8001be84:	ee c8 00 0c 	sub	r8,r7,12
8001be88:	30 1b       	mov	r11,1
8001be8a:	10 9c       	mov	r12,r8
8001be8c:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001be90:	ee c9 00 02 	sub	r9,r7,2
8001be94:	ee ca 00 01 	sub	r10,r7,1
8001be98:	ee c8 00 10 	sub	r8,r7,16
8001be9c:	30 1b       	mov	r11,1
8001be9e:	10 9c       	mov	r12,r8
8001bea0:	f0 16 00 34 	mcall	r6[208]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001bea4:	ee c9 00 02 	sub	r9,r7,2
8001bea8:	ee ca 00 01 	sub	r10,r7,1
8001beac:	ee c8 00 06 	sub	r8,r7,6
8001beb0:	30 1b       	mov	r11,1
8001beb2:	10 9c       	mov	r12,r8
8001beb4:	f0 16 00 34 	mcall	r6[208]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001beb8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001bebc:	10 9b       	mov	r11,r8
8001bebe:	ee c9 00 02 	sub	r9,r7,2
8001bec2:	ee ca 00 01 	sub	r10,r7,1
8001bec6:	ee c8 00 05 	sub	r8,r7,5
8001beca:	10 9c       	mov	r12,r8
8001becc:	f0 16 00 34 	mcall	r6[208]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001bed0:	30 3a       	mov	r10,3
8001bed2:	30 1b       	mov	r11,1
8001bed4:	30 6c       	mov	r12,6
8001bed6:	f0 16 00 be 	mcall	r6[760]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001beda:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001bede:	10 99       	mov	r9,r8
8001bee0:	ec f8 00 00 	ld.w	r8,r6[0]
8001bee4:	70 08       	ld.w	r8,r8[0x0]
8001bee6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001beea:	31 0a       	mov	r10,16
8001beec:	12 9b       	mov	r11,r9
8001beee:	10 9c       	mov	r12,r8
8001bef0:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001bef4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001bef8:	10 99       	mov	r9,r8
8001befa:	ec f8 00 00 	ld.w	r8,r6[0]
8001befe:	70 08       	ld.w	r8,r8[0x0]
8001bf00:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bf04:	31 0a       	mov	r10,16
8001bf06:	12 9b       	mov	r11,r9
8001bf08:	10 9c       	mov	r12,r8
8001bf0a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001bf0e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001bf12:	10 99       	mov	r9,r8
8001bf14:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf18:	70 08       	ld.w	r8,r8[0x0]
8001bf1a:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bf1e:	31 0a       	mov	r10,16
8001bf20:	12 9b       	mov	r11,r9
8001bf22:	10 9c       	mov	r12,r8
8001bf24:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001bf28:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001bf2c:	10 99       	mov	r9,r8
8001bf2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001bf32:	12 9b       	mov	r11,r9
8001bf34:	10 9c       	mov	r12,r8
8001bf36:	f0 16 00 bc 	mcall	r6[752]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001bf3a:	2f bd       	sub	sp,-20
8001bf3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001bf40:	80 01       	ld.sh	r1,r0[0x0]
8001bf42:	bc c2       	st.b	lr[0x4],r2
8001bf44:	24 50       	sub	r0,69
8001bf46:	55 42       	stdsp	sp[0x150],r2
8001bf48:	58 2c       	cp.w	r12,2
8001bf4a:	34 31       	mov	r1,67
8001bf4c:	2c 31       	sub	r1,-61
8001bf4e:	2c 30       	sub	r0,-61
8001bf50:	30 30       	mov	r0,3
8001bf52:	33 2c       	mov	r12,50
8001bf54:	30 30       	mov	r0,3
8001bf56:	30 31       	mov	r1,3
8001bf58:	2c 33       	sub	r3,-61
8001bf5a:	38 34       	mov	r4,-125
8001bf5c:	30 30       	mov	r0,3
8001bf5e:	2c 30       	sub	r0,-61
8001bf60:	2a 32       	sub	r2,-93
8001bf62:	35 0d       	mov	sp,80
8001bf64:	0a 00       	add	r0,r5

8001bf66 <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001bf66:	eb cd 40 c0 	pushm	r6-r7,lr
8001bf6a:	1a 97       	mov	r7,sp
8001bf6c:	20 3d       	sub	sp,12
8001bf6e:	4a 66       	lddpc	r6,8001c004 <configure_gps+0x9e>
8001bf70:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001bf72:	fe c8 00 2e 	sub	r8,pc,46
8001bf76:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001bf7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf7e:	70 08       	ld.w	r8,r8[0x0]
8001bf80:	f0 c8 f5 10 	sub	r8,r8,-2800
8001bf84:	ee fb ff fc 	ld.w	r11,r7[-4]
8001bf88:	10 9c       	mov	r12,r8
8001bf8a:	f0 16 00 33 	mcall	r6[204]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001bf8e:	e0 68 00 c8 	mov	r8,200
8001bf92:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001bf96:	30 18       	mov	r8,1
8001bf98:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001bf9c:	30 08       	mov	r8,0
8001bf9e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001bfa2:	20 2d       	sub	sp,8
8001bfa4:	1a 98       	mov	r8,sp
8001bfa6:	ee c9 00 0a 	sub	r9,r7,10
8001bfaa:	30 6a       	mov	r10,6
8001bfac:	12 9b       	mov	r11,r9
8001bfae:	10 9c       	mov	r12,r8
8001bfb0:	f0 16 00 21 	mcall	r6[132]
8001bfb4:	30 6a       	mov	r10,6
8001bfb6:	30 8b       	mov	r11,8
8001bfb8:	30 6c       	mov	r12,6
8001bfba:	f0 16 01 96 	mcall	r6[1624]
8001bfbe:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001bfc0:	30 1a       	mov	r10,1
8001bfc2:	30 2b       	mov	r11,2
8001bfc4:	30 1c       	mov	r12,1
8001bfc6:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001bfca:	30 1a       	mov	r10,1
8001bfcc:	30 3b       	mov	r11,3
8001bfce:	30 1c       	mov	r12,1
8001bfd0:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001bfd4:	30 1a       	mov	r10,1
8001bfd6:	30 6b       	mov	r11,6
8001bfd8:	30 1c       	mov	r12,1
8001bfda:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001bfde:	30 1a       	mov	r10,1
8001bfe0:	31 2b       	mov	r11,18
8001bfe2:	30 1c       	mov	r12,1
8001bfe4:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001bfe8:	30 1a       	mov	r10,1
8001bfea:	33 0b       	mov	r11,48
8001bfec:	30 1c       	mov	r12,1
8001bfee:	f0 16 00 5c 	mcall	r6[368]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001bff2:	30 09       	mov	r9,0
8001bff4:	30 0a       	mov	r10,0
8001bff6:	32 4b       	mov	r11,36
8001bff8:	30 6c       	mov	r12,6
8001bffa:	f0 16 00 fb 	mcall	r6[1004]
}
8001bffe:	2f dd       	sub	sp,-12
8001c000:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c004:	80 01       	ld.sh	r1,r0[0x0]
8001c006:	bd f4       	*unknown*

8001c008 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001c008:	eb cd 40 c0 	pushm	r6-r7,lr
8001c00c:	1a 97       	mov	r7,sp
8001c00e:	20 2d       	sub	sp,8
8001c010:	fe f6 02 08 	ld.w	r6,pc[520]
8001c014:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001c016:	f0 16 01 9d 	mcall	r6[1652]
8001c01a:	18 98       	mov	r8,r12
8001c01c:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001c020:	f0 16 00 0f 	mcall	r6[60]
8001c024:	18 98       	mov	r8,r12
8001c026:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001c02a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c02e:	ec 18 00 01 	eorl	r8,0x1
8001c032:	5c 58       	castu.b	r8
8001c034:	c1 f0       	breq	8001c072 <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001c036:	ec f8 03 1c 	ld.w	r8,r6[796]
8001c03a:	70 08       	ld.w	r8,r8[0x0]
8001c03c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c040:	10 19       	sub	r9,r8
8001c042:	ec f8 04 20 	ld.w	r8,r6[1056]
8001c046:	70 08       	ld.w	r8,r8[0x0]
8001c048:	10 39       	cp.w	r9,r8
8001c04a:	e0 88 00 e3 	brls	8001c210 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001c04e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c052:	70 09       	ld.w	r9,r8[0x0]
8001c054:	30 08       	mov	r8,0
8001c056:	f3 68 0b 54 	st.b	r9[2900],r8
			
			init_gps_ubx(engine_nav_setting);
8001c05a:	ec f8 01 d8 	ld.w	r8,r6[472]
8001c05e:	70 08       	ld.w	r8,r8[0x0]
8001c060:	10 9c       	mov	r12,r8
8001c062:	f0 16 01 66 	mcall	r6[1432]
			idleTimer = tnow;
8001c066:	ec f8 03 1c 	ld.w	r8,r6[796]
8001c06a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c06e:	91 09       	st.w	r8[0x0],r9
8001c070:	cd 08       	rjmp	8001c210 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001c072:	ec f8 03 1c 	ld.w	r8,r6[796]
8001c076:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c07a:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001c07c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c080:	70 08       	ld.w	r8,r8[0x0]
8001c082:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c086:	f1 49 0b 4c 	st.w	r8[2892],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001c08a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c08e:	70 08       	ld.w	r8,r8[0x0]
8001c090:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c094:	30 28       	mov	r8,2
8001c096:	f0 09 18 00 	cp.b	r9,r8
8001c09a:	e0 81 00 9d 	brne	8001c1d4 <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001c09e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0a2:	70 08       	ld.w	r8,r8[0x0]
8001c0a4:	f0 fa 0b 38 	ld.w	r10,r8[2872]
8001c0a8:	30 18       	mov	r8,1
8001c0aa:	fc 19 41 a0 	movh	r9,0x41a0
8001c0ae:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c0b2:	e0 8c 00 03 	brvs	8001c0b8 <gps_update+0xb0>
8001c0b6:	c0 25       	brlt	8001c0ba <gps_update+0xb2>
8001c0b8:	30 08       	mov	r8,0
8001c0ba:	5c 58       	castu.b	r8
8001c0bc:	c0 80       	breq	8001c0cc <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001c0be:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0c2:	70 09       	ld.w	r9,r8[0x0]
8001c0c4:	30 18       	mov	r8,1
8001c0c6:	f3 68 0b 55 	st.b	r9[2901],r8
8001c0ca:	c0 78       	rjmp	8001c0d8 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001c0cc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0d0:	70 09       	ld.w	r9,r8[0x0]
8001c0d2:	30 08       	mov	r8,0
8001c0d4:	f3 68 0b 55 	st.b	r9[2901],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001c0d8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0dc:	70 08       	ld.w	r8,r8[0x0]
8001c0de:	f0 fa 0b 3c 	ld.w	r10,r8[2876]
8001c0e2:	30 18       	mov	r8,1
8001c0e4:	fc 19 41 a0 	movh	r9,0x41a0
8001c0e8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c0ec:	e0 8c 00 03 	brvs	8001c0f2 <gps_update+0xea>
8001c0f0:	c0 25       	brlt	8001c0f4 <gps_update+0xec>
8001c0f2:	30 08       	mov	r8,0
8001c0f4:	5c 58       	castu.b	r8
8001c0f6:	c0 80       	breq	8001c106 <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001c0f8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0fc:	70 09       	ld.w	r9,r8[0x0]
8001c0fe:	30 18       	mov	r8,1
8001c100:	f3 68 0b 56 	st.b	r9[2902],r8
8001c104:	c0 78       	rjmp	8001c112 <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001c106:	ec f8 00 00 	ld.w	r8,r6[0]
8001c10a:	70 09       	ld.w	r9,r8[0x0]
8001c10c:	30 08       	mov	r8,0
8001c10e:	f3 68 0b 56 	st.b	r9[2902],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001c112:	ec f8 00 00 	ld.w	r8,r6[0]
8001c116:	70 08       	ld.w	r8,r8[0x0]
8001c118:	f0 fa 0b 40 	ld.w	r10,r8[2880]
8001c11c:	30 18       	mov	r8,1
8001c11e:	fc 19 40 a0 	movh	r9,0x40a0
8001c122:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c126:	e0 8c 00 03 	brvs	8001c12c <gps_update+0x124>
8001c12a:	c0 25       	brlt	8001c12e <gps_update+0x126>
8001c12c:	30 08       	mov	r8,0
8001c12e:	5c 58       	castu.b	r8
8001c130:	c0 80       	breq	8001c140 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001c132:	ec f8 00 00 	ld.w	r8,r6[0]
8001c136:	70 09       	ld.w	r9,r8[0x0]
8001c138:	30 18       	mov	r8,1
8001c13a:	f3 68 0b 57 	st.b	r9[2903],r8
8001c13e:	c0 78       	rjmp	8001c14c <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001c140:	ec f8 00 00 	ld.w	r8,r6[0]
8001c144:	70 09       	ld.w	r9,r8[0x0]
8001c146:	30 08       	mov	r8,0
8001c148:	f3 68 0b 57 	st.b	r9[2903],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001c14c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c150:	70 08       	ld.w	r8,r8[0x0]
8001c152:	f0 fa 0b 44 	ld.w	r10,r8[2884]
8001c156:	30 18       	mov	r8,1
8001c158:	e0 69 96 80 	mov	r9,38528
8001c15c:	ea 19 4a 98 	orh	r9,0x4a98
8001c160:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c164:	e0 8c 00 03 	brvs	8001c16a <gps_update+0x162>
8001c168:	c0 25       	brlt	8001c16c <gps_update+0x164>
8001c16a:	30 08       	mov	r8,0
8001c16c:	5c 58       	castu.b	r8
8001c16e:	c0 80       	breq	8001c17e <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001c170:	ec f8 00 00 	ld.w	r8,r6[0]
8001c174:	70 09       	ld.w	r9,r8[0x0]
8001c176:	30 18       	mov	r8,1
8001c178:	f3 68 0b 58 	st.b	r9[2904],r8
8001c17c:	c0 78       	rjmp	8001c18a <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001c17e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c182:	70 09       	ld.w	r9,r8[0x0]
8001c184:	30 08       	mov	r8,0
8001c186:	f3 68 0b 58 	st.b	r9[2904],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001c18a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c18e:	70 09       	ld.w	r9,r8[0x0]
8001c190:	ec f8 00 00 	ld.w	r8,r6[0]
8001c194:	70 08       	ld.w	r8,r8[0x0]
8001c196:	f1 3a 0b 55 	ld.ub	r10,r8[2901]
8001c19a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c19e:	70 08       	ld.w	r8,r8[0x0]
8001c1a0:	f1 38 0b 56 	ld.ub	r8,r8[2902]
8001c1a4:	f5 e8 00 08 	and	r8,r10,r8
8001c1a8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c1ac:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1b0:	70 08       	ld.w	r8,r8[0x0]
8001c1b2:	f1 38 0b 57 	ld.ub	r8,r8[2903]
8001c1b6:	f5 e8 00 08 	and	r8,r10,r8
8001c1ba:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c1be:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1c2:	70 08       	ld.w	r8,r8[0x0]
8001c1c4:	f1 38 0b 58 	ld.ub	r8,r8[2904]
8001c1c8:	f5 e8 00 08 	and	r8,r10,r8
8001c1cc:	5c 58       	castu.b	r8
8001c1ce:	f3 68 0b 59 	st.b	r9[2905],r8
8001c1d2:	c1 f8       	rjmp	8001c210 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001c1d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1d8:	70 09       	ld.w	r9,r8[0x0]
8001c1da:	30 08       	mov	r8,0
8001c1dc:	f3 68 0b 55 	st.b	r9[2901],r8
			centralData->GPS_data.altitudeStatus = 0;
8001c1e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1e4:	70 09       	ld.w	r9,r8[0x0]
8001c1e6:	30 08       	mov	r8,0
8001c1e8:	f3 68 0b 56 	st.b	r9[2902],r8
			centralData->GPS_data.speedStatus = 0;
8001c1ec:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1f0:	70 09       	ld.w	r9,r8[0x0]
8001c1f2:	30 08       	mov	r8,0
8001c1f4:	f3 68 0b 57 	st.b	r9[2903],r8
			centralData->GPS_data.courseStatus = 0;
8001c1f8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1fc:	70 09       	ld.w	r9,r8[0x0]
8001c1fe:	30 08       	mov	r8,0
8001c200:	f3 68 0b 58 	st.b	r9[2904],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001c204:	ec f8 00 00 	ld.w	r8,r6[0]
8001c208:	70 09       	ld.w	r9,r8[0x0]
8001c20a:	30 08       	mov	r8,0
8001c20c:	f3 68 0b 59 	st.b	r9[2905],r8
		}
	}
}
8001c210:	2f ed       	sub	sp,-8
8001c212:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c216:	00 00       	add	r0,r0
8001c218:	80 01       	ld.sh	r1,r0[0x0]
8001c21a:	be 98       	st.b	pc[0x1],r8

8001c21c <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001c21c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c220:	1a 97       	mov	r7,sp
8001c222:	20 1d       	sub	sp,4
8001c224:	49 36       	lddpc	r6,8001c270 <newValidGpsMsg+0x54>
8001c226:	1e 26       	rsub	r6,pc
8001c228:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001c22c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c230:	70 09       	ld.w	r9,r8[0x0]
8001c232:	ec f8 00 00 	ld.w	r8,r6[0]
8001c236:	70 08       	ld.w	r8,r8[0x0]
8001c238:	f0 f8 0b 4c 	ld.w	r8,r8[2892]
8001c23c:	10 39       	cp.w	r9,r8
8001c23e:	c1 40       	breq	8001c266 <newValidGpsMsg+0x4a>
8001c240:	ec f8 00 00 	ld.w	r8,r6[0]
8001c244:	70 08       	ld.w	r8,r8[0x0]
8001c246:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c24a:	30 28       	mov	r8,2
8001c24c:	f0 09 18 00 	cp.b	r9,r8
8001c250:	c0 b1       	brne	8001c266 <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001c252:	ec f8 00 00 	ld.w	r8,r6[0]
8001c256:	70 08       	ld.w	r8,r8[0x0]
8001c258:	f0 f9 0b 4c 	ld.w	r9,r8[2892]
8001c25c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c260:	91 09       	st.w	r8[0x0],r9
		return true;
8001c262:	30 18       	mov	r8,1
8001c264:	c0 28       	rjmp	8001c268 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001c266:	30 08       	mov	r8,0
	}
	
	
}
8001c268:	10 9c       	mov	r12,r8
8001c26a:	2f fd       	sub	sp,-4
8001c26c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c270:	80 01       	ld.sh	r1,r0[0x0]
8001c272:	c0 aa       	rjmp	8001be86 <ubx_configure_message_rate+0x52>

8001c274 <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001c274:	eb cd 40 c0 	pushm	r6-r7,lr
8001c278:	1a 97       	mov	r7,sp
8001c27a:	48 86       	lddpc	r6,8001c298 <ubx_GetPosllh+0x24>
8001c27c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001c27e:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001c282:	90 08       	ld.sh	r8,r8[0x0]
8001c284:	58 08       	cp.w	r8,0
8001c286:	c0 50       	breq	8001c290 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001c288:	ec f8 03 74 	ld.w	r8,r6[884]
8001c28c:	70 08       	ld.w	r8,r8[0x0]
8001c28e:	c0 28       	rjmp	8001c292 <ubx_GetPosllh+0x1e>
	else
	return 0;
8001c290:	30 08       	mov	r8,0
}
8001c292:	10 9c       	mov	r12,r8
8001c294:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c298:	80 01       	ld.sh	r1,r0[0x0]
8001c29a:	c1 00       	breq	8001c2ba <ubx_GetStatus+0x1e>

8001c29c <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001c29c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c2a0:	1a 97       	mov	r7,sp
8001c2a2:	48 86       	lddpc	r6,8001c2c0 <ubx_GetStatus+0x24>
8001c2a4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001c2a6:	ec f8 04 3c 	ld.w	r8,r6[1084]
8001c2aa:	90 08       	ld.sh	r8,r8[0x0]
8001c2ac:	58 08       	cp.w	r8,0
8001c2ae:	c0 50       	breq	8001c2b8 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001c2b0:	ec f8 03 78 	ld.w	r8,r6[888]
8001c2b4:	70 08       	ld.w	r8,r8[0x0]
8001c2b6:	c0 28       	rjmp	8001c2ba <ubx_GetStatus+0x1e>
	else
	return 0;
8001c2b8:	30 08       	mov	r8,0
}
8001c2ba:	10 9c       	mov	r12,r8
8001c2bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2c0:	80 01       	ld.sh	r1,r0[0x0]
8001c2c2:	c1 28       	rjmp	8001c2e6 <ubx_GetSolution+0x22>

8001c2c4 <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001c2c4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c2c8:	1a 97       	mov	r7,sp
8001c2ca:	48 86       	lddpc	r6,8001c2e8 <ubx_GetSolution+0x24>
8001c2cc:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001c2ce:	ec f8 04 94 	ld.w	r8,r6[1172]
8001c2d2:	90 08       	ld.sh	r8,r8[0x0]
8001c2d4:	58 08       	cp.w	r8,0
8001c2d6:	c0 50       	breq	8001c2e0 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001c2d8:	ec f8 03 e0 	ld.w	r8,r6[992]
8001c2dc:	70 08       	ld.w	r8,r8[0x0]
8001c2de:	c0 28       	rjmp	8001c2e2 <ubx_GetSolution+0x1e>
	else
	return 0;
8001c2e0:	30 08       	mov	r8,0
}
8001c2e2:	10 9c       	mov	r12,r8
8001c2e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2e8:	80 01       	ld.sh	r1,r0[0x0]
8001c2ea:	c1 50       	breq	8001c314 <ubx_GetSVInfo>

8001c2ec <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001c2ec:	eb cd 40 c0 	pushm	r6-r7,lr
8001c2f0:	1a 97       	mov	r7,sp
8001c2f2:	48 86       	lddpc	r6,8001c310 <ubx_GetVelned+0x24>
8001c2f4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001c2f6:	ec f8 04 a0 	ld.w	r8,r6[1184]
8001c2fa:	90 08       	ld.sh	r8,r8[0x0]
8001c2fc:	58 08       	cp.w	r8,0
8001c2fe:	c0 50       	breq	8001c308 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001c300:	ec f8 04 90 	ld.w	r8,r6[1168]
8001c304:	70 08       	ld.w	r8,r8[0x0]
8001c306:	c0 28       	rjmp	8001c30a <ubx_GetVelned+0x1e>
	else
	return 0;
8001c308:	30 08       	mov	r8,0
}
8001c30a:	10 9c       	mov	r12,r8
8001c30c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c310:	80 01       	ld.sh	r1,r0[0x0]
8001c312:	c1 78       	rjmp	8001c340 <ubx_GetNavSettings+0x4>

8001c314 <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001c314:	eb cd 40 c0 	pushm	r6-r7,lr
8001c318:	1a 97       	mov	r7,sp
8001c31a:	48 86       	lddpc	r6,8001c338 <ubx_GetSVInfo+0x24>
8001c31c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001c31e:	ec f8 03 a8 	ld.w	r8,r6[936]
8001c322:	90 08       	ld.sh	r8,r8[0x0]
8001c324:	58 08       	cp.w	r8,0
8001c326:	c0 50       	breq	8001c330 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001c328:	ec f8 04 74 	ld.w	r8,r6[1140]
8001c32c:	70 08       	ld.w	r8,r8[0x0]
8001c32e:	c0 28       	rjmp	8001c332 <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001c330:	30 08       	mov	r8,0
}
8001c332:	10 9c       	mov	r12,r8
8001c334:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c338:	80 01       	ld.sh	r1,r0[0x0]
8001c33a:	c1 a0       	breq	8001c36e <ubx_GetMsgRate+0xa>

8001c33c <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001c33c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c340:	1a 97       	mov	r7,sp
8001c342:	48 86       	lddpc	r6,8001c360 <ubx_GetNavSettings+0x24>
8001c344:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001c346:	ec f8 04 58 	ld.w	r8,r6[1112]
8001c34a:	90 08       	ld.sh	r8,r8[0x0]
8001c34c:	58 08       	cp.w	r8,0
8001c34e:	c0 50       	breq	8001c358 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001c350:	ec f8 04 88 	ld.w	r8,r6[1160]
8001c354:	70 08       	ld.w	r8,r8[0x0]
8001c356:	c0 28       	rjmp	8001c35a <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001c358:	30 08       	mov	r8,0
}
8001c35a:	10 9c       	mov	r12,r8
8001c35c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c360:	80 01       	ld.sh	r1,r0[0x0]
8001c362:	c1 c8       	rjmp	8001c39a <ubx_GetMonRXR+0xe>

8001c364 <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001c364:	eb cd 40 c0 	pushm	r6-r7,lr
8001c368:	1a 97       	mov	r7,sp
8001c36a:	48 86       	lddpc	r6,8001c388 <ubx_GetMsgRate+0x24>
8001c36c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001c36e:	ec f8 04 b8 	ld.w	r8,r6[1208]
8001c372:	90 08       	ld.sh	r8,r8[0x0]
8001c374:	58 08       	cp.w	r8,0
8001c376:	c0 50       	breq	8001c380 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001c378:	ec f8 03 f0 	ld.w	r8,r6[1008]
8001c37c:	70 08       	ld.w	r8,r8[0x0]
8001c37e:	c0 28       	rjmp	8001c382 <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001c380:	30 08       	mov	r8,0
}
8001c382:	10 9c       	mov	r12,r8
8001c384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c388:	80 01       	ld.sh	r1,r0[0x0]
8001c38a:	c1 f0       	breq	8001c3c8 <ubx_GetTimTP+0x14>

8001c38c <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001c38c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c390:	1a 97       	mov	r7,sp
8001c392:	48 86       	lddpc	r6,8001c3b0 <ubx_GetMonRXR+0x24>
8001c394:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001c396:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001c39a:	90 08       	ld.sh	r8,r8[0x0]
8001c39c:	58 08       	cp.w	r8,0
8001c39e:	c0 50       	breq	8001c3a8 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001c3a0:	ec f8 03 d8 	ld.w	r8,r6[984]
8001c3a4:	70 08       	ld.w	r8,r8[0x0]
8001c3a6:	c0 28       	rjmp	8001c3aa <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001c3a8:	30 08       	mov	r8,0
}
8001c3aa:	10 9c       	mov	r12,r8
8001c3ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c3b0:	80 01       	ld.sh	r1,r0[0x0]
8001c3b2:	c2 18       	rjmp	8001c3f4 <ubx_GetTimVRFY+0x18>

8001c3b4 <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001c3b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c3b8:	1a 97       	mov	r7,sp
8001c3ba:	48 86       	lddpc	r6,8001c3d8 <ubx_GetTimTP+0x24>
8001c3bc:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001c3be:	ec f8 04 5c 	ld.w	r8,r6[1116]
8001c3c2:	90 08       	ld.sh	r8,r8[0x0]
8001c3c4:	58 08       	cp.w	r8,0
8001c3c6:	c0 50       	breq	8001c3d0 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001c3c8:	ec f8 04 18 	ld.w	r8,r6[1048]
8001c3cc:	70 08       	ld.w	r8,r8[0x0]
8001c3ce:	c0 28       	rjmp	8001c3d2 <ubx_GetTimTP+0x1e>
	else
	return 0;
8001c3d0:	30 08       	mov	r8,0
}
8001c3d2:	10 9c       	mov	r12,r8
8001c3d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c3d8:	80 01       	ld.sh	r1,r0[0x0]
8001c3da:	c2 40       	breq	8001c422 <ToRad+0x1e>

8001c3dc <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001c3dc:	eb cd 40 c0 	pushm	r6-r7,lr
8001c3e0:	1a 97       	mov	r7,sp
8001c3e2:	48 86       	lddpc	r6,8001c400 <ubx_GetTimVRFY+0x24>
8001c3e4:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001c3e6:	ec f8 04 64 	ld.w	r8,r6[1124]
8001c3ea:	90 08       	ld.sh	r8,r8[0x0]
8001c3ec:	58 08       	cp.w	r8,0
8001c3ee:	c0 50       	breq	8001c3f8 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001c3f0:	ec f8 04 30 	ld.w	r8,r6[1072]
8001c3f4:	70 08       	ld.w	r8,r8[0x0]
8001c3f6:	c0 28       	rjmp	8001c3fa <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001c3f8:	30 08       	mov	r8,0
}
8001c3fa:	10 9c       	mov	r12,r8
8001c3fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c400:	80 01       	ld.sh	r1,r0[0x0]
8001c402:	c2 68       	rjmp	8001c44e <ToRad+0x4a>

8001c404 <ToRad>:

float ToRad(float numdeg)
{
8001c404:	eb cd 40 c0 	pushm	r6-r7,lr
8001c408:	1a 97       	mov	r7,sp
8001c40a:	20 1d       	sub	sp,4
8001c40c:	49 46       	lddpc	r6,8001c45c <ToRad+0x58>
8001c40e:	1e 26       	rsub	r6,pc
8001c410:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001c414:	ee fc ff fc 	ld.w	r12,r7[-4]
8001c418:	f0 16 00 02 	mcall	r6[8]
8001c41c:	e0 68 2d 18 	mov	r8,11544
8001c420:	ea 18 54 44 	orh	r8,0x5444
8001c424:	e0 69 21 fb 	mov	r9,8699
8001c428:	ea 19 40 09 	orh	r9,0x4009
8001c42c:	f0 16 00 03 	mcall	r6[12]
8001c430:	14 98       	mov	r8,r10
8001c432:	16 99       	mov	r9,r11
8001c434:	10 9a       	mov	r10,r8
8001c436:	12 9b       	mov	r11,r9
8001c438:	30 08       	mov	r8,0
8001c43a:	e0 69 80 00 	mov	r9,32768
8001c43e:	ea 19 40 66 	orh	r9,0x4066
8001c442:	f0 16 00 0c 	mcall	r6[48]
8001c446:	14 98       	mov	r8,r10
8001c448:	16 99       	mov	r9,r11
8001c44a:	10 9a       	mov	r10,r8
8001c44c:	12 9b       	mov	r11,r9
8001c44e:	f0 16 00 08 	mcall	r6[32]
8001c452:	18 98       	mov	r8,r12
8001c454:	10 9c       	mov	r12,r8
8001c456:	2f fd       	sub	sp,-4
8001c458:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c45c:	80 01       	ld.sh	r1,r0[0x0]
8001c45e:	c2 92       	brcc	8001c4b0 <init_imu+0x50>

8001c460 <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001c460:	eb cd 40 c0 	pushm	r6-r7,lr
8001c464:	1a 97       	mov	r7,sp
8001c466:	20 1d       	sub	sp,4
8001c468:	4d 36       	lddpc	r6,8001c5b4 <init_imu+0x154>
8001c46a:	1e 26       	rsub	r6,pc
8001c46c:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001c470:	f0 16 02 14 	mcall	r6[2128]
	init_adxl345_slow();
8001c474:	f0 16 01 70 	mcall	r6[1472]
	//init_lsm330();
	
	init_hmc5883_slow();
8001c478:	f0 16 01 ed 	mcall	r6[1972]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001c47c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c480:	e0 69 e0 00 	mov	r9,57344
8001c484:	ea 19 46 44 	orh	r9,0x4644
8001c488:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001c48c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c490:	e0 69 e0 00 	mov	r9,57344
8001c494:	ea 19 c6 44 	orh	r9,0xc644
8001c498:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001c49c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4a0:	e0 69 e0 00 	mov	r9,57344
8001c4a4:	ea 19 46 44 	orh	r9,0x4644
8001c4a8:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001c4ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4b0:	e0 69 75 6a 	mov	r9,30058
8001c4b4:	ea 19 43 81 	orh	r9,0x4381
8001c4b8:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001c4bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4c0:	e0 69 7e 1e 	mov	r9,32286
8001c4c4:	ea 19 43 81 	orh	r9,0x4381
8001c4c8:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001c4cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4d0:	e0 69 0a 9c 	mov	r9,2716
8001c4d4:	ea 19 43 81 	orh	r9,0x4381
8001c4d8:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001c4dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4e0:	e0 69 91 bc 	mov	r9,37308
8001c4e4:	ea 19 44 04 	orh	r9,0x4404
8001c4e8:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001c4ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c4f0:	e0 69 52 c7 	mov	r9,21191
8001c4f4:	ea 19 44 03 	orh	r9,0x4403
8001c4f8:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001c4fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c500:	e0 69 39 4b 	mov	r9,14667
8001c504:	ea 19 43 f9 	orh	r9,0x43f9
8001c508:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001c50c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c510:	30 09       	mov	r9,0
8001c512:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001c516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c51a:	30 09       	mov	r9,0
8001c51c:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001c520:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c524:	30 09       	mov	r9,0
8001c526:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001c52a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c52e:	fc 19 41 90 	movh	r9,0x4190
8001c532:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001c536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c53a:	fc 19 41 10 	movh	r9,0x4110
8001c53e:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001c542:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c546:	fc 19 c1 80 	movh	r9,0xc180
8001c54a:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001c54e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c552:	e0 69 c2 19 	mov	r9,49689
8001c556:	ea 19 43 03 	orh	r9,0x4303
8001c55a:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001c55e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c562:	e0 69 09 d5 	mov	r9,2517
8001c566:	ea 19 c1 d1 	orh	r9,0xc1d1
8001c56a:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001c56e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c572:	e0 69 a8 8d 	mov	r9,43149
8001c576:	ea 19 42 74 	orh	r9,0x4274
8001c57a:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001c57e:	ec f9 02 ec 	ld.w	r9,r6[748]
8001c582:	30 08       	mov	r8,0
8001c584:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001c586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c58a:	f0 ca ff 10 	sub	r10,r8,-240
8001c58e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c592:	f0 c9 fe ec 	sub	r9,r8,-276
8001c596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c59a:	12 9b       	mov	r11,r9
8001c59c:	10 9c       	mov	r12,r8
8001c59e:	f0 16 01 e7 	mcall	r6[1948]
	imu1->attitude.calibration_level=OFF;
8001c5a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c5a6:	30 08       	mov	r8,0
8001c5a8:	f3 68 00 b8 	st.b	r9[184],r8
}
8001c5ac:	2f fd       	sub	sp,-4
8001c5ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c5b2:	00 00       	add	r0,r0
8001c5b4:	80 01       	ld.sh	r1,r0[0x0]
8001c5b6:	c2 ee       	rcall	8001c212 <gps_update+0x20a>

8001c5b8 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001c5b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001c5bc:	1a 97       	mov	r7,sp
8001c5be:	20 5d       	sub	sp,20
8001c5c0:	4b 66       	lddpc	r6,8001c698 <imu_get_raw_data+0xe0>
8001c5c2:	1e 26       	rsub	r6,pc
8001c5c4:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001c5c8:	30 08       	mov	r8,0
8001c5ca:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001c5ce:	f0 16 01 d3 	mcall	r6[1868]
8001c5d2:	18 98       	mov	r8,r12
8001c5d4:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001c5d8:	f0 16 01 bf 	mcall	r6[1788]
8001c5dc:	18 98       	mov	r8,r12
8001c5de:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001c5e2:	f0 16 01 39 	mcall	r6[1252]
8001c5e6:	18 98       	mov	r8,r12
8001c5e8:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001c5ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c5f0:	90 28       	ld.sh	r8,r8[0x4]
8001c5f2:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c5f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c5fa:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001c5fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c602:	90 18       	ld.sh	r8,r8[0x2]
8001c604:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c608:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c60c:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001c610:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c614:	90 38       	ld.sh	r8,r8[0x6]
8001c616:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c61a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c61e:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001c622:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c626:	90 38       	ld.sh	r8,r8[0x6]
8001c628:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c62c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c630:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001c634:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c638:	90 48       	ld.sh	r8,r8[0x8]
8001c63a:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c63e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c642:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001c646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c64a:	90 58       	ld.sh	r8,r8[0xa]
8001c64c:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c650:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c654:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001c658:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c65c:	90 58       	ld.sh	r8,r8[0xa]
8001c65e:	5c 38       	neg	r8
8001c660:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c664:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c668:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001c66c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c670:	90 38       	ld.sh	r8,r8[0x6]
8001c672:	5c 38       	neg	r8
8001c674:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c678:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c67c:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001c680:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c684:	90 48       	ld.sh	r8,r8[0x8]
8001c686:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001c68a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c68e:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001c692:	2f bd       	sub	sp,-20
8001c694:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c698:	80 01       	ld.sh	r1,r0[0x0]
8001c69a:	c4 46       	brmi	8001c722 <calibrate_Gyros+0x86>

8001c69c <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001c69c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001c6a0:	1a 97       	mov	r7,sp
8001c6a2:	20 3d       	sub	sp,12
8001c6a4:	4e 86       	lddpc	r6,8001c844 <calibrate_Gyros+0x1a8>
8001c6a6:	1e 26       	rsub	r6,pc
8001c6a8:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001c6ac:	ee fc ff f4 	ld.w	r12,r7[-12]
8001c6b0:	f0 16 00 95 	mcall	r6[596]
	for (j=0; j<3; j++) {
8001c6b4:	30 08       	mov	r8,0
8001c6b6:	ef 48 ff fc 	st.w	r7[-4],r8
8001c6ba:	c1 48       	rjmp	8001c6e2 <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001c6bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c6c0:	ee fa ff fc 	ld.w	r10,r7[-4]
8001c6c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c6c8:	2c da       	sub	r10,-51
8001c6ca:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001c6ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c6d2:	2c 49       	sub	r9,-60
8001c6d4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001c6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c6dc:	2f f8       	sub	r8,-1
8001c6de:	ef 48 ff fc 	st.w	r7[-4],r8
8001c6e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c6e6:	58 28       	cp.w	r8,2
8001c6e8:	fe 9a ff ea 	brle	8001c6bc <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001c6ec:	30 08       	mov	r8,0
8001c6ee:	ef 48 ff f8 	st.w	r7[-8],r8
8001c6f2:	c9 f8       	rjmp	8001c830 <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001c6f4:	ee fc ff f4 	ld.w	r12,r7[-12]
8001c6f8:	f0 16 00 95 	mcall	r6[596]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001c6fc:	30 08       	mov	r8,0
8001c6fe:	ef 48 ff fc 	st.w	r7[-4],r8
8001c702:	c8 a8       	rjmp	8001c816 <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001c704:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001c708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c70c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c710:	2c 49       	sub	r9,-60
8001c712:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001c716:	10 9c       	mov	r12,r8
8001c718:	f0 16 00 02 	mcall	r6[8]
8001c71c:	e0 68 cc cd 	mov	r8,52429
8001c720:	ea 18 cc cc 	orh	r8,0xcccc
8001c724:	e0 69 cc cc 	mov	r9,52428
8001c728:	ea 19 3f ec 	orh	r9,0x3fec
8001c72c:	f0 16 00 03 	mcall	r6[12]
8001c730:	14 98       	mov	r8,r10
8001c732:	16 99       	mov	r9,r11
8001c734:	10 92       	mov	r2,r8
8001c736:	12 93       	mov	r3,r9
8001c738:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c73c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c740:	2c d9       	sub	r9,-51
8001c742:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001c746:	10 9c       	mov	r12,r8
8001c748:	f0 16 00 02 	mcall	r6[8]
8001c74c:	e0 68 99 9a 	mov	r8,39322
8001c750:	ea 18 99 99 	orh	r8,0x9999
8001c754:	e0 69 99 99 	mov	r9,39321
8001c758:	ea 19 3f b9 	orh	r9,0x3fb9
8001c75c:	f0 16 00 03 	mcall	r6[12]
8001c760:	14 98       	mov	r8,r10
8001c762:	16 99       	mov	r9,r11
8001c764:	04 9a       	mov	r10,r2
8001c766:	06 9b       	mov	r11,r3
8001c768:	f0 16 00 05 	mcall	r6[20]
8001c76c:	14 98       	mov	r8,r10
8001c76e:	16 99       	mov	r9,r11
8001c770:	10 9a       	mov	r10,r8
8001c772:	12 9b       	mov	r11,r9
8001c774:	f0 16 00 08 	mcall	r6[32]
8001c778:	18 9a       	mov	r10,r12
8001c77a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c77e:	ea c9 ff c4 	sub	r9,r5,-60
8001c782:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001c786:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001c78a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c78e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c792:	2d 59       	sub	r9,-43
8001c794:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001c798:	10 9c       	mov	r12,r8
8001c79a:	f0 16 00 02 	mcall	r6[8]
8001c79e:	e0 68 cc cd 	mov	r8,52429
8001c7a2:	ea 18 cc cc 	orh	r8,0xcccc
8001c7a6:	e0 69 cc cc 	mov	r9,52428
8001c7aa:	ea 19 3f ec 	orh	r9,0x3fec
8001c7ae:	f0 16 00 03 	mcall	r6[12]
8001c7b2:	14 98       	mov	r8,r10
8001c7b4:	16 99       	mov	r9,r11
8001c7b6:	10 92       	mov	r2,r8
8001c7b8:	12 93       	mov	r3,r9
8001c7ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c7be:	f0 c9 ff fa 	sub	r9,r8,-6
8001c7c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c7c6:	2c d9       	sub	r9,-51
8001c7c8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001c7cc:	10 9c       	mov	r12,r8
8001c7ce:	f0 16 00 02 	mcall	r6[8]
8001c7d2:	e0 68 99 9a 	mov	r8,39322
8001c7d6:	ea 18 99 99 	orh	r8,0x9999
8001c7da:	e0 69 99 99 	mov	r9,39321
8001c7de:	ea 19 3f b9 	orh	r9,0x3fb9
8001c7e2:	f0 16 00 03 	mcall	r6[12]
8001c7e6:	14 98       	mov	r8,r10
8001c7e8:	16 99       	mov	r9,r11
8001c7ea:	04 9a       	mov	r10,r2
8001c7ec:	06 9b       	mov	r11,r3
8001c7ee:	f0 16 00 05 	mcall	r6[20]
8001c7f2:	14 98       	mov	r8,r10
8001c7f4:	16 99       	mov	r9,r11
8001c7f6:	10 9a       	mov	r10,r8
8001c7f8:	12 9b       	mov	r11,r9
8001c7fa:	f0 16 00 08 	mcall	r6[32]
8001c7fe:	18 9a       	mov	r10,r12
8001c800:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c804:	ea c9 ff d5 	sub	r9,r5,-43
8001c808:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001c80c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c810:	2f f8       	sub	r8,-1
8001c812:	ef 48 ff fc 	st.w	r7[-4],r8
8001c816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c81a:	58 28       	cp.w	r8,2
8001c81c:	fe 9a ff 74 	brle	8001c704 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001c820:	30 4c       	mov	r12,4
8001c822:	f0 16 01 02 	mcall	r6[1032]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001c826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c82a:	2f f8       	sub	r8,-1
8001c82c:	ef 48 ff f8 	st.w	r7[-8],r8
8001c830:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c834:	e0 48 00 63 	cp.w	r8,99
8001c838:	fe 9a ff 5e 	brle	8001c6f4 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001c83c:	2f dd       	sub	sp,-12
8001c83e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001c842:	00 00       	add	r0,r0
8001c844:	80 01       	ld.sh	r1,r0[0x0]
8001c846:	c5 2a       	rjmp	8001c4ea <init_imu+0x8a>

8001c848 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001c848:	eb cd 40 c0 	pushm	r6-r7,lr
8001c84c:	1a 97       	mov	r7,sp
8001c84e:	20 5d       	sub	sp,20
8001c850:	4b 46       	lddpc	r6,8001c920 <imu_update+0xd8>
8001c852:	1e 26       	rsub	r6,pc
8001c854:	ef 4c ff f8 	st.w	r7[-8],r12
8001c858:	ef 4b ff f4 	st.w	r7[-12],r11
8001c85c:	ef 4a ff f0 	st.w	r7[-16],r10
8001c860:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001c864:	f0 16 00 4d 	mcall	r6[308]
8001c868:	18 98       	mov	r8,r12
8001c86a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001c86e:	ec f8 02 ec 	ld.w	r8,r6[748]
8001c872:	11 88       	ld.ub	r8,r8[0x0]
8001c874:	ec 18 00 01 	eorl	r8,0x1
8001c878:	5c 58       	castu.b	r8
8001c87a:	c0 c0       	breq	8001c892 <imu_update+0x4a>
	{
		imu1->last_update = t;
8001c87c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c880:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c884:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001c888:	ec f9 02 ec 	ld.w	r9,r6[748]
8001c88c:	30 18       	mov	r8,1
8001c88e:	b2 88       	st.b	r9[0x0],r8
8001c890:	c4 48       	rjmp	8001c918 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001c892:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c896:	f0 f8 01 38 	ld.w	r8,r8[312]
8001c89a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c89e:	f2 08 01 08 	sub	r8,r9,r8
8001c8a2:	10 9c       	mov	r12,r8
8001c8a4:	f0 16 00 b9 	mcall	r6[740]
8001c8a8:	18 99       	mov	r9,r12
8001c8aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8ae:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001c8b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c8ba:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001c8be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8c2:	f0 fa 01 40 	ld.w	r10,r8[320]
8001c8c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8ca:	f0 cb ff 34 	sub	r11,r8,-204
8001c8ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8d2:	30 09       	mov	r9,0
8001c8d4:	10 9c       	mov	r12,r8
8001c8d6:	f0 16 01 60 	mcall	r6[1408]
		if (imu1->attitude.calibration_level==OFF) {
8001c8da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8de:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001c8e2:	58 08       	cp.w	r8,0
8001c8e4:	c1 a1       	brne	8001c918 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001c8e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8ea:	f0 f9 01 40 	ld.w	r9,r8[320]
8001c8ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c8f2:	12 9a       	mov	r10,r9
8001c8f4:	10 9b       	mov	r11,r8
8001c8f6:	ee fc ff f4 	ld.w	r12,r7[-12]
8001c8fa:	f0 16 02 03 	mcall	r6[2060]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001c8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c902:	f0 f8 01 40 	ld.w	r8,r8[320]
8001c906:	10 99       	mov	r9,r8
8001c908:	ee fa ff ec 	ld.w	r10,r7[-20]
8001c90c:	ee fb ff f0 	ld.w	r11,r7[-16]
8001c910:	ee fc ff f4 	ld.w	r12,r7[-12]
8001c914:	f0 16 01 e3 	mcall	r6[1932]
		}
	}
}
8001c918:	2f bd       	sub	sp,-20
8001c91a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c91e:	00 00       	add	r0,r0
8001c920:	80 01       	ld.sh	r1,r0[0x0]
8001c922:	c6 d6       	brmi	8001c9fc <quat_multi+0x78>

8001c924 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001c924:	eb cd 40 80 	pushm	r7,lr
8001c928:	1a 97       	mov	r7,sp
8001c92a:	20 3d       	sub	sp,12
8001c92c:	ef 4c ff f8 	st.w	r7[-8],r12
8001c930:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001c934:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c938:	70 09       	ld.w	r9,r8[0x0]
8001c93a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c93e:	70 08       	ld.w	r8,r8[0x0]
8001c940:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001c944:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c948:	2f c8       	sub	r8,-4
8001c94a:	70 0a       	ld.w	r10,r8[0x0]
8001c94c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c950:	2f c8       	sub	r8,-4
8001c952:	70 08       	ld.w	r8,r8[0x0]
8001c954:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001c958:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001c95c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001c960:	2f 88       	sub	r8,-8
8001c962:	70 0a       	ld.w	r10,r8[0x0]
8001c964:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c968:	2f 88       	sub	r8,-8
8001c96a:	70 08       	ld.w	r8,r8[0x0]
8001c96c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001c970:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001c974:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001c978:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001c97c:	10 9c       	mov	r12,r8
8001c97e:	2f dd       	sub	sp,-12
8001c980:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c984 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001c984:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001c988:	1a 97       	mov	r7,sp
8001c98a:	20 7d       	sub	sp,28
8001c98c:	4b d6       	lddpc	r6,8001ca80 <quat_multi+0xfc>
8001c98e:	1e 26       	rsub	r6,pc
8001c990:	ee c8 ff ec 	sub	r8,r7,-20
8001c994:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001c996:	70 2a       	ld.w	r10,r8[0x8]
8001c998:	70 79       	ld.w	r9,r8[0x1c]
8001c99a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001c99e:	70 3b       	ld.w	r11,r8[0xc]
8001c9a0:	70 69       	ld.w	r9,r8[0x18]
8001c9a2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001c9a6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001c9aa:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001c9ae:	70 3a       	ld.w	r10,r8[0xc]
8001c9b0:	70 59       	ld.w	r9,r8[0x14]
8001c9b2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001c9b6:	70 1b       	ld.w	r11,r8[0x4]
8001c9b8:	70 79       	ld.w	r9,r8[0x1c]
8001c9ba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001c9be:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001c9c2:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001c9c6:	70 1a       	ld.w	r10,r8[0x4]
8001c9c8:	70 69       	ld.w	r9,r8[0x18]
8001c9ca:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001c9ce:	70 2b       	ld.w	r11,r8[0x8]
8001c9d0:	70 59       	ld.w	r9,r8[0x14]
8001c9d2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001c9d6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001c9da:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001c9de:	70 4a       	ld.w	r10,r8[0x10]
8001c9e0:	70 19       	ld.w	r9,r8[0x4]
8001c9e2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001c9e6:	70 0b       	ld.w	r11,r8[0x0]
8001c9e8:	70 59       	ld.w	r9,r8[0x14]
8001c9ea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001c9ee:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001c9f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c9f6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001c9fa:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001c9fe:	70 4a       	ld.w	r10,r8[0x10]
8001ca00:	70 29       	ld.w	r9,r8[0x8]
8001ca02:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001ca06:	70 0b       	ld.w	r11,r8[0x0]
8001ca08:	70 69       	ld.w	r9,r8[0x18]
8001ca0a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001ca0e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001ca12:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ca16:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001ca1a:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001ca1e:	70 4a       	ld.w	r10,r8[0x10]
8001ca20:	70 39       	ld.w	r9,r8[0xc]
8001ca22:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001ca26:	70 0b       	ld.w	r11,r8[0x0]
8001ca28:	70 79       	ld.w	r9,r8[0x1c]
8001ca2a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001ca2e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001ca32:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ca36:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001ca3a:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001ca3e:	70 0a       	ld.w	r10,r8[0x0]
8001ca40:	70 49       	ld.w	r9,r8[0x10]
8001ca42:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001ca46:	f0 c9 ff f0 	sub	r9,r8,-16
8001ca4a:	2f c9       	sub	r9,-4
8001ca4c:	2f c8       	sub	r8,-4
8001ca4e:	12 9b       	mov	r11,r9
8001ca50:	10 9c       	mov	r12,r8
8001ca52:	c6 9f       	rcall	8001c924 <scalar_product>
8001ca54:	18 98       	mov	r8,r12
8001ca56:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001ca5a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001ca5e:	0a 98       	mov	r8,r5
8001ca60:	ee c9 00 1c 	sub	r9,r7,28
8001ca64:	20 08       	sub	r8,0
8001ca66:	20 09       	sub	r9,0
8001ca68:	72 0a       	ld.w	r10,r9[0x0]
8001ca6a:	91 0a       	st.w	r8[0x0],r10
8001ca6c:	72 1a       	ld.w	r10,r9[0x4]
8001ca6e:	91 1a       	st.w	r8[0x4],r10
8001ca70:	72 2a       	ld.w	r10,r9[0x8]
8001ca72:	91 2a       	st.w	r8[0x8],r10
8001ca74:	72 39       	ld.w	r9,r9[0xc]
8001ca76:	91 39       	st.w	r8[0xc],r9
}
8001ca78:	0a 9c       	mov	r12,r5
8001ca7a:	2f 9d       	sub	sp,-28
8001ca7c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001ca80:	80 01       	ld.sh	r1,r0[0x0]
8001ca82:	c8 12       	brcc	8001c984 <quat_multi>

8001ca84 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001ca84:	eb cd 40 80 	pushm	r7,lr
8001ca88:	1a 97       	mov	r7,sp
8001ca8a:	20 5d       	sub	sp,20
8001ca8c:	ee c9 ff f8 	sub	r9,r7,-8
8001ca90:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001ca92:	72 08       	ld.w	r8,r9[0x0]
8001ca94:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001ca98:	30 08       	mov	r8,0
8001ca9a:	ef 48 ff fc 	st.w	r7[-4],r8
8001ca9e:	c1 58       	rjmp	8001cac8 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001caa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001caa4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001caa8:	2f fb       	sub	r11,-1
8001caaa:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001caae:	ee 1b 80 00 	eorh	r11,0x8000
8001cab2:	2f f8       	sub	r8,-1
8001cab4:	a3 68       	lsl	r8,0x2
8001cab6:	ee 08 00 08 	add	r8,r7,r8
8001caba:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001cabe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cac2:	2f f8       	sub	r8,-1
8001cac4:	ef 48 ff fc 	st.w	r7[-4],r8
8001cac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cacc:	58 28       	cp.w	r8,2
8001cace:	fe 9a ff e9 	brle	8001caa0 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001cad2:	14 98       	mov	r8,r10
8001cad4:	ee c9 00 14 	sub	r9,r7,20
8001cad8:	20 08       	sub	r8,0
8001cada:	20 09       	sub	r9,0
8001cadc:	72 0b       	ld.w	r11,r9[0x0]
8001cade:	91 0b       	st.w	r8[0x0],r11
8001cae0:	72 1b       	ld.w	r11,r9[0x4]
8001cae2:	91 1b       	st.w	r8[0x4],r11
8001cae4:	72 2b       	ld.w	r11,r9[0x8]
8001cae6:	91 2b       	st.w	r8[0x8],r11
8001cae8:	72 39       	ld.w	r9,r9[0xc]
8001caea:	91 39       	st.w	r8[0xc],r9
}
8001caec:	14 9c       	mov	r12,r10
8001caee:	2f bd       	sub	sp,-20
8001caf0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001caf4 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001caf4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001caf8:	1a 97       	mov	r7,sp
8001cafa:	20 cd       	sub	sp,48
8001cafc:	4b c6       	lddpc	r6,8001cbec <quat_global_to_local+0xf8>
8001cafe:	1e 26       	rsub	r6,pc
8001cb00:	ee c5 ff ec 	sub	r5,r7,-20
8001cb04:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001cb06:	ee ca 00 10 	sub	r10,r7,16
8001cb0a:	20 4d       	sub	sp,16
8001cb0c:	1a 98       	mov	r8,sp
8001cb0e:	0a 99       	mov	r9,r5
8001cb10:	20 08       	sub	r8,0
8001cb12:	20 09       	sub	r9,0
8001cb14:	72 0b       	ld.w	r11,r9[0x0]
8001cb16:	91 0b       	st.w	r8[0x0],r11
8001cb18:	72 1b       	ld.w	r11,r9[0x4]
8001cb1a:	91 1b       	st.w	r8[0x4],r11
8001cb1c:	72 2b       	ld.w	r11,r9[0x8]
8001cb1e:	91 2b       	st.w	r8[0x8],r11
8001cb20:	72 39       	ld.w	r9,r9[0xc]
8001cb22:	91 39       	st.w	r8[0xc],r9
8001cb24:	14 9c       	mov	r12,r10
8001cb26:	ca ff       	rcall	8001ca84 <quat_inv>
8001cb28:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001cb2a:	ee ca 00 20 	sub	r10,r7,32
8001cb2e:	20 4d       	sub	sp,16
8001cb30:	1a 98       	mov	r8,sp
8001cb32:	ea c9 ff f0 	sub	r9,r5,-16
8001cb36:	20 08       	sub	r8,0
8001cb38:	20 09       	sub	r9,0
8001cb3a:	72 0b       	ld.w	r11,r9[0x0]
8001cb3c:	91 0b       	st.w	r8[0x0],r11
8001cb3e:	72 1b       	ld.w	r11,r9[0x4]
8001cb40:	91 1b       	st.w	r8[0x4],r11
8001cb42:	72 2b       	ld.w	r11,r9[0x8]
8001cb44:	91 2b       	st.w	r8[0x8],r11
8001cb46:	72 39       	ld.w	r9,r9[0xc]
8001cb48:	91 39       	st.w	r8[0xc],r9
8001cb4a:	20 4d       	sub	sp,16
8001cb4c:	1a 98       	mov	r8,sp
8001cb4e:	ee c9 00 10 	sub	r9,r7,16
8001cb52:	20 08       	sub	r8,0
8001cb54:	20 09       	sub	r9,0
8001cb56:	72 0b       	ld.w	r11,r9[0x0]
8001cb58:	91 0b       	st.w	r8[0x0],r11
8001cb5a:	72 1b       	ld.w	r11,r9[0x4]
8001cb5c:	91 1b       	st.w	r8[0x4],r11
8001cb5e:	72 2b       	ld.w	r11,r9[0x8]
8001cb60:	91 2b       	st.w	r8[0x8],r11
8001cb62:	72 39       	ld.w	r9,r9[0xc]
8001cb64:	91 39       	st.w	r8[0xc],r9
8001cb66:	14 9c       	mov	r12,r10
8001cb68:	c0 ef       	rcall	8001c984 <quat_multi>
8001cb6a:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001cb6c:	ee ca 00 30 	sub	r10,r7,48
8001cb70:	20 4d       	sub	sp,16
8001cb72:	1a 98       	mov	r8,sp
8001cb74:	0a 99       	mov	r9,r5
8001cb76:	20 08       	sub	r8,0
8001cb78:	20 09       	sub	r9,0
8001cb7a:	72 0b       	ld.w	r11,r9[0x0]
8001cb7c:	91 0b       	st.w	r8[0x0],r11
8001cb7e:	72 1b       	ld.w	r11,r9[0x4]
8001cb80:	91 1b       	st.w	r8[0x4],r11
8001cb82:	72 2b       	ld.w	r11,r9[0x8]
8001cb84:	91 2b       	st.w	r8[0x8],r11
8001cb86:	72 39       	ld.w	r9,r9[0xc]
8001cb88:	91 39       	st.w	r8[0xc],r9
8001cb8a:	20 4d       	sub	sp,16
8001cb8c:	1a 98       	mov	r8,sp
8001cb8e:	ee c9 00 20 	sub	r9,r7,32
8001cb92:	20 08       	sub	r8,0
8001cb94:	20 09       	sub	r9,0
8001cb96:	72 0b       	ld.w	r11,r9[0x0]
8001cb98:	91 0b       	st.w	r8[0x0],r11
8001cb9a:	72 1b       	ld.w	r11,r9[0x4]
8001cb9c:	91 1b       	st.w	r8[0x4],r11
8001cb9e:	72 2b       	ld.w	r11,r9[0x8]
8001cba0:	91 2b       	st.w	r8[0x8],r11
8001cba2:	72 39       	ld.w	r9,r9[0xc]
8001cba4:	91 39       	st.w	r8[0xc],r9
8001cba6:	14 9c       	mov	r12,r10
8001cba8:	ce ee       	rcall	8001c984 <quat_multi>
8001cbaa:	2f 8d       	sub	sp,-32
8001cbac:	ee c8 00 20 	sub	r8,r7,32
8001cbb0:	ee c9 00 30 	sub	r9,r7,48
8001cbb4:	20 08       	sub	r8,0
8001cbb6:	20 09       	sub	r9,0
8001cbb8:	72 0a       	ld.w	r10,r9[0x0]
8001cbba:	91 0a       	st.w	r8[0x0],r10
8001cbbc:	72 1a       	ld.w	r10,r9[0x4]
8001cbbe:	91 1a       	st.w	r8[0x4],r10
8001cbc0:	72 2a       	ld.w	r10,r9[0x8]
8001cbc2:	91 2a       	st.w	r8[0x8],r10
8001cbc4:	72 39       	ld.w	r9,r9[0xc]
8001cbc6:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001cbc8:	06 98       	mov	r8,r3
8001cbca:	ee c9 00 20 	sub	r9,r7,32
8001cbce:	20 08       	sub	r8,0
8001cbd0:	20 09       	sub	r9,0
8001cbd2:	72 0a       	ld.w	r10,r9[0x0]
8001cbd4:	91 0a       	st.w	r8[0x0],r10
8001cbd6:	72 1a       	ld.w	r10,r9[0x4]
8001cbd8:	91 1a       	st.w	r8[0x4],r10
8001cbda:	72 2a       	ld.w	r10,r9[0x8]
8001cbdc:	91 2a       	st.w	r8[0x8],r10
8001cbde:	72 39       	ld.w	r9,r9[0xc]
8001cbe0:	91 39       	st.w	r8[0xc],r9
}
8001cbe2:	06 9c       	mov	r12,r3
8001cbe4:	2f 4d       	sub	sp,-48
8001cbe6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001cbea:	00 00       	add	r0,r0
8001cbec:	80 01       	ld.sh	r1,r0[0x0]
8001cbee:	c9 82       	brcc	8001cb1e <quat_global_to_local+0x2a>

8001cbf0 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001cbf0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001cbf4:	1a 97       	mov	r7,sp
8001cbf6:	20 cd       	sub	sp,48
8001cbf8:	4b c6       	lddpc	r6,8001cce8 <quat_local_to_global+0xf8>
8001cbfa:	1e 26       	rsub	r6,pc
8001cbfc:	ee c5 ff ec 	sub	r5,r7,-20
8001cc00:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001cc02:	ee ca 00 10 	sub	r10,r7,16
8001cc06:	20 4d       	sub	sp,16
8001cc08:	1a 98       	mov	r8,sp
8001cc0a:	0a 99       	mov	r9,r5
8001cc0c:	20 08       	sub	r8,0
8001cc0e:	20 09       	sub	r9,0
8001cc10:	72 0b       	ld.w	r11,r9[0x0]
8001cc12:	91 0b       	st.w	r8[0x0],r11
8001cc14:	72 1b       	ld.w	r11,r9[0x4]
8001cc16:	91 1b       	st.w	r8[0x4],r11
8001cc18:	72 2b       	ld.w	r11,r9[0x8]
8001cc1a:	91 2b       	st.w	r8[0x8],r11
8001cc1c:	72 39       	ld.w	r9,r9[0xc]
8001cc1e:	91 39       	st.w	r8[0xc],r9
8001cc20:	14 9c       	mov	r12,r10
8001cc22:	c3 1f       	rcall	8001ca84 <quat_inv>
8001cc24:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001cc26:	ee ca 00 20 	sub	r10,r7,32
8001cc2a:	20 4d       	sub	sp,16
8001cc2c:	1a 98       	mov	r8,sp
8001cc2e:	ea c9 ff f0 	sub	r9,r5,-16
8001cc32:	20 08       	sub	r8,0
8001cc34:	20 09       	sub	r9,0
8001cc36:	72 0b       	ld.w	r11,r9[0x0]
8001cc38:	91 0b       	st.w	r8[0x0],r11
8001cc3a:	72 1b       	ld.w	r11,r9[0x4]
8001cc3c:	91 1b       	st.w	r8[0x4],r11
8001cc3e:	72 2b       	ld.w	r11,r9[0x8]
8001cc40:	91 2b       	st.w	r8[0x8],r11
8001cc42:	72 39       	ld.w	r9,r9[0xc]
8001cc44:	91 39       	st.w	r8[0xc],r9
8001cc46:	20 4d       	sub	sp,16
8001cc48:	1a 98       	mov	r8,sp
8001cc4a:	0a 99       	mov	r9,r5
8001cc4c:	20 08       	sub	r8,0
8001cc4e:	20 09       	sub	r9,0
8001cc50:	72 0b       	ld.w	r11,r9[0x0]
8001cc52:	91 0b       	st.w	r8[0x0],r11
8001cc54:	72 1b       	ld.w	r11,r9[0x4]
8001cc56:	91 1b       	st.w	r8[0x4],r11
8001cc58:	72 2b       	ld.w	r11,r9[0x8]
8001cc5a:	91 2b       	st.w	r8[0x8],r11
8001cc5c:	72 39       	ld.w	r9,r9[0xc]
8001cc5e:	91 39       	st.w	r8[0xc],r9
8001cc60:	14 9c       	mov	r12,r10
8001cc62:	c9 1e       	rcall	8001c984 <quat_multi>
8001cc64:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001cc66:	ee ca 00 30 	sub	r10,r7,48
8001cc6a:	20 4d       	sub	sp,16
8001cc6c:	1a 98       	mov	r8,sp
8001cc6e:	ee c9 00 10 	sub	r9,r7,16
8001cc72:	20 08       	sub	r8,0
8001cc74:	20 09       	sub	r9,0
8001cc76:	72 0b       	ld.w	r11,r9[0x0]
8001cc78:	91 0b       	st.w	r8[0x0],r11
8001cc7a:	72 1b       	ld.w	r11,r9[0x4]
8001cc7c:	91 1b       	st.w	r8[0x4],r11
8001cc7e:	72 2b       	ld.w	r11,r9[0x8]
8001cc80:	91 2b       	st.w	r8[0x8],r11
8001cc82:	72 39       	ld.w	r9,r9[0xc]
8001cc84:	91 39       	st.w	r8[0xc],r9
8001cc86:	20 4d       	sub	sp,16
8001cc88:	1a 98       	mov	r8,sp
8001cc8a:	ee c9 00 20 	sub	r9,r7,32
8001cc8e:	20 08       	sub	r8,0
8001cc90:	20 09       	sub	r9,0
8001cc92:	72 0b       	ld.w	r11,r9[0x0]
8001cc94:	91 0b       	st.w	r8[0x0],r11
8001cc96:	72 1b       	ld.w	r11,r9[0x4]
8001cc98:	91 1b       	st.w	r8[0x4],r11
8001cc9a:	72 2b       	ld.w	r11,r9[0x8]
8001cc9c:	91 2b       	st.w	r8[0x8],r11
8001cc9e:	72 39       	ld.w	r9,r9[0xc]
8001cca0:	91 39       	st.w	r8[0xc],r9
8001cca2:	14 9c       	mov	r12,r10
8001cca4:	c7 0e       	rcall	8001c984 <quat_multi>
8001cca6:	2f 8d       	sub	sp,-32
8001cca8:	ee c8 00 20 	sub	r8,r7,32
8001ccac:	ee c9 00 30 	sub	r9,r7,48
8001ccb0:	20 08       	sub	r8,0
8001ccb2:	20 09       	sub	r9,0
8001ccb4:	72 0a       	ld.w	r10,r9[0x0]
8001ccb6:	91 0a       	st.w	r8[0x0],r10
8001ccb8:	72 1a       	ld.w	r10,r9[0x4]
8001ccba:	91 1a       	st.w	r8[0x4],r10
8001ccbc:	72 2a       	ld.w	r10,r9[0x8]
8001ccbe:	91 2a       	st.w	r8[0x8],r10
8001ccc0:	72 39       	ld.w	r9,r9[0xc]
8001ccc2:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001ccc4:	06 98       	mov	r8,r3
8001ccc6:	ee c9 00 20 	sub	r9,r7,32
8001ccca:	20 08       	sub	r8,0
8001cccc:	20 09       	sub	r9,0
8001ccce:	72 0a       	ld.w	r10,r9[0x0]
8001ccd0:	91 0a       	st.w	r8[0x0],r10
8001ccd2:	72 1a       	ld.w	r10,r9[0x4]
8001ccd4:	91 1a       	st.w	r8[0x4],r10
8001ccd6:	72 2a       	ld.w	r10,r9[0x8]
8001ccd8:	91 2a       	st.w	r8[0x8],r10
8001ccda:	72 39       	ld.w	r9,r9[0xc]
8001ccdc:	91 39       	st.w	r8[0xc],r9
}
8001ccde:	06 9c       	mov	r12,r3
8001cce0:	2f 4d       	sub	sp,-48
8001cce2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001cce6:	00 00       	add	r0,r0
8001cce8:	80 01       	ld.sh	r1,r0[0x0]
8001ccea:	ca 7e       	rcall	8001ca38 <quat_multi+0xb4>

8001ccec <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001ccec:	eb cd 40 c0 	pushm	r6-r7,lr
8001ccf0:	1a 97       	mov	r7,sp
8001ccf2:	20 2d       	sub	sp,8
8001ccf4:	4b 26       	lddpc	r6,8001cdbc <fast_sqrt+0xd0>
8001ccf6:	1e 26       	rsub	r6,pc
8001ccf8:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001ccfc:	30 18       	mov	r8,1
8001ccfe:	ee fa ff f8 	ld.w	r10,r7[-8]
8001cd02:	30 09       	mov	r9,0
8001cd04:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cd08:	e0 8c 00 03 	brvs	8001cd0e <fast_sqrt+0x22>
8001cd0c:	c0 25       	brlt	8001cd10 <fast_sqrt+0x24>
8001cd0e:	30 08       	mov	r8,0
8001cd10:	5c 58       	castu.b	r8
8001cd12:	c0 30       	breq	8001cd18 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001cd14:	30 08       	mov	r8,0
8001cd16:	c4 f8       	rjmp	8001cdb4 <fast_sqrt+0xc8>
	}
	float result=1.0;
8001cd18:	fc 18 3f 80 	movh	r8,0x3f80
8001cd1c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001cd20:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cd24:	ee fc ff f8 	ld.w	r12,r7[-8]
8001cd28:	f0 16 00 0a 	mcall	r6[40]
8001cd2c:	18 98       	mov	r8,r12
8001cd2e:	10 99       	mov	r9,r8
8001cd30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd34:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001cd38:	fc 18 3f 00 	movh	r8,0x3f00
8001cd3c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001cd40:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001cd44:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cd48:	ee fc ff f8 	ld.w	r12,r7[-8]
8001cd4c:	f0 16 00 0a 	mcall	r6[40]
8001cd50:	18 98       	mov	r8,r12
8001cd52:	10 99       	mov	r9,r8
8001cd54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd58:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001cd5c:	fc 18 3f 00 	movh	r8,0x3f00
8001cd60:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001cd64:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001cd68:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cd6c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001cd70:	f0 16 00 0a 	mcall	r6[40]
8001cd74:	18 98       	mov	r8,r12
8001cd76:	10 99       	mov	r9,r8
8001cd78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd7c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001cd80:	fc 18 3f 00 	movh	r8,0x3f00
8001cd84:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001cd88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001cd8c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cd90:	ee fc ff f8 	ld.w	r12,r7[-8]
8001cd94:	f0 16 00 0a 	mcall	r6[40]
8001cd98:	18 98       	mov	r8,r12
8001cd9a:	10 99       	mov	r9,r8
8001cd9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cda0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001cda4:	fc 18 3f 00 	movh	r8,0x3f00
8001cda8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001cdac:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001cdb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001cdb4:	10 9c       	mov	r12,r8
8001cdb6:	2f ed       	sub	sp,-8
8001cdb8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cdbc:	80 01       	ld.sh	r1,r0[0x0]
8001cdbe:	cb 7a       	rjmp	8001cb2c <quat_global_to_local+0x38>

8001cdc0 <quat_normalise>:
float static inline vector_norm(float u[])
{
	return fast_sqrt(vector_norm_sqr(u));
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001cdc0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001cdc4:	1a 97       	mov	r7,sp
8001cdc6:	20 6d       	sub	sp,24
8001cdc8:	4b f6       	lddpc	r6,8001cec4 <quat_normalise+0x104>
8001cdca:	1e 26       	rsub	r6,pc
8001cdcc:	ee c5 ff e8 	sub	r5,r7,-24
8001cdd0:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001cdd2:	fc 18 3f 80 	movh	r8,0x3f80
8001cdd6:	ef 48 ff e8 	st.w	r7[-24],r8
8001cdda:	30 08       	mov	r8,0
8001cddc:	ef 48 ff ec 	st.w	r7[-20],r8
8001cde0:	30 08       	mov	r8,0
8001cde2:	ef 48 ff f0 	st.w	r7[-16],r8
8001cde6:	30 08       	mov	r8,0
8001cde8:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001cdec:	6a 09       	ld.w	r9,r5[0x0]
8001cdee:	6a 08       	ld.w	r8,r5[0x0]
8001cdf0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001cdf4:	6a 1a       	ld.w	r10,r5[0x4]
8001cdf6:	6a 18       	ld.w	r8,r5[0x4]
8001cdf8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001cdfc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ce00:	6a 2a       	ld.w	r10,r5[0x8]
8001ce02:	6a 28       	ld.w	r8,r5[0x8]
8001ce04:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001ce08:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ce0c:	6a 3a       	ld.w	r10,r5[0xc]
8001ce0e:	6a 38       	ld.w	r8,r5[0xc]
8001ce10:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001ce14:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ce18:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001ce1c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ce20:	f0 16 00 02 	mcall	r6[8]
8001ce24:	14 98       	mov	r8,r10
8001ce26:	16 99       	mov	r9,r11
8001ce28:	30 03       	mov	r3,0
8001ce2a:	e0 6a af 48 	mov	r10,44872
8001ce2e:	ea 1a 9a bc 	orh	r10,0x9abc
8001ce32:	e0 6b d7 f2 	mov	r11,55282
8001ce36:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001ce3a:	f0 16 00 1d 	mcall	r6[116]
8001ce3e:	18 98       	mov	r8,r12
8001ce40:	58 08       	cp.w	r8,0
8001ce42:	c0 20       	breq	8001ce46 <quat_normalise+0x86>
8001ce44:	30 13       	mov	r3,1
8001ce46:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001ce4a:	c2 b0       	breq	8001cea0 <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001ce4c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ce50:	c4 ef       	rcall	8001ccec <fast_sqrt>
8001ce52:	18 98       	mov	r8,r12
8001ce54:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001ce58:	6a 08       	ld.w	r8,r5[0x0]
8001ce5a:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ce5e:	10 9c       	mov	r12,r8
8001ce60:	f0 16 00 0a 	mcall	r6[40]
8001ce64:	18 98       	mov	r8,r12
8001ce66:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001ce6a:	6a 18       	ld.w	r8,r5[0x4]
8001ce6c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ce70:	10 9c       	mov	r12,r8
8001ce72:	f0 16 00 0a 	mcall	r6[40]
8001ce76:	18 98       	mov	r8,r12
8001ce78:	ef 48 ff ec 	st.w	r7[-20],r8
8001ce7c:	6a 28       	ld.w	r8,r5[0x8]
8001ce7e:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ce82:	10 9c       	mov	r12,r8
8001ce84:	f0 16 00 0a 	mcall	r6[40]
8001ce88:	18 98       	mov	r8,r12
8001ce8a:	ef 48 ff f0 	st.w	r7[-16],r8
8001ce8e:	6a 38       	ld.w	r8,r5[0xc]
8001ce90:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ce94:	10 9c       	mov	r12,r8
8001ce96:	f0 16 00 0a 	mcall	r6[40]
8001ce9a:	18 98       	mov	r8,r12
8001ce9c:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001cea0:	04 98       	mov	r8,r2
8001cea2:	ee c9 00 18 	sub	r9,r7,24
8001cea6:	20 08       	sub	r8,0
8001cea8:	20 09       	sub	r9,0
8001ceaa:	72 0a       	ld.w	r10,r9[0x0]
8001ceac:	91 0a       	st.w	r8[0x0],r10
8001ceae:	72 1a       	ld.w	r10,r9[0x4]
8001ceb0:	91 1a       	st.w	r8[0x4],r10
8001ceb2:	72 2a       	ld.w	r10,r9[0x8]
8001ceb4:	91 2a       	st.w	r8[0x8],r10
8001ceb6:	72 39       	ld.w	r9,r9[0xc]
8001ceb8:	91 39       	st.w	r8[0xc],r9
}
8001ceba:	04 9c       	mov	r12,r2
8001cebc:	2f ad       	sub	sp,-24
8001cebe:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001cec2:	00 00       	add	r0,r0
8001cec4:	80 01       	ld.sh	r1,r0[0x0]
8001cec6:	cc 4e       	rcall	8001cc4e <quat_local_to_global+0x5e>

8001cec8 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001cec8:	eb cd 40 80 	pushm	r7,lr
8001cecc:	1a 97       	mov	r7,sp
8001cece:	20 2d       	sub	sp,8
8001ced0:	ef 4c ff fc 	st.w	r7[-4],r12
8001ced4:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001ced8:	30 18       	mov	r8,1
8001ceda:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cede:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001cee2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cee6:	e0 8c 00 04 	brvs	8001ceee <clip+0x26>
8001ceea:	e0 89 00 03 	brgt	8001cef0 <clip+0x28>
8001ceee:	30 08       	mov	r8,0
8001cef0:	5c 58       	castu.b	r8
8001cef2:	c0 40       	breq	8001cefa <clip+0x32>
8001cef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cef8:	c1 98       	rjmp	8001cf2a <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001cefa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cefe:	10 9a       	mov	r10,r8
8001cf00:	ee 1a 80 00 	eorh	r10,0x8000
8001cf04:	30 18       	mov	r8,1
8001cf06:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf0a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cf0e:	e0 8c 00 04 	brvs	8001cf16 <clip+0x4e>
8001cf12:	e0 89 00 03 	brgt	8001cf18 <clip+0x50>
8001cf16:	30 08       	mov	r8,0
8001cf18:	5c 58       	castu.b	r8
8001cf1a:	c0 60       	breq	8001cf26 <clip+0x5e>
8001cf1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf20:	ee 18 80 00 	eorh	r8,0x8000
8001cf24:	c0 38       	rjmp	8001cf2a <clip+0x62>
	return input_value;
8001cf26:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001cf2a:	10 9c       	mov	r12,r8
8001cf2c:	2f ed       	sub	sp,-8
8001cf2e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001cf32 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001cf32:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf36:	1a 97       	mov	r7,sp
8001cf38:	20 3d       	sub	sp,12
8001cf3a:	49 06       	lddpc	r6,8001cf78 <mav_array_memcpy+0x46>
8001cf3c:	1e 26       	rsub	r6,pc
8001cf3e:	ef 4c ff fc 	st.w	r7[-4],r12
8001cf42:	ef 4b ff f8 	st.w	r7[-8],r11
8001cf46:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001cf4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf4e:	58 08       	cp.w	r8,0
8001cf50:	c0 91       	brne	8001cf62 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001cf52:	ee fa ff f4 	ld.w	r10,r7[-12]
8001cf56:	30 0b       	mov	r11,0
8001cf58:	ee fc ff fc 	ld.w	r12,r7[-4]
8001cf5c:	f0 16 00 30 	mcall	r6[192]
8001cf60:	c0 98       	rjmp	8001cf72 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001cf62:	ee fa ff f4 	ld.w	r10,r7[-12]
8001cf66:	ee fb ff f8 	ld.w	r11,r7[-8]
8001cf6a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001cf6e:	f0 16 00 21 	mcall	r6[132]
	}
}
8001cf72:	2f dd       	sub	sp,-12
8001cf74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf78:	80 01       	ld.sh	r1,r0[0x0]
8001cf7a:	cd c0       	breq	8001cf32 <mav_array_memcpy>

8001cf7c <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001cf7c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf80:	1a 97       	mov	r7,sp
8001cf82:	20 3d       	sub	sp,12
8001cf84:	4b f6       	lddpc	r6,8001d080 <init_simulation+0x104>
8001cf86:	1e 26       	rsub	r6,pc
8001cf88:	ef 4c ff f8 	st.w	r7[-8],r12
8001cf8c:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001cf90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf94:	ec f9 08 a0 	ld.w	r9,r6[2208]
8001cf98:	e0 6a 01 94 	mov	r10,404
8001cf9c:	12 9b       	mov	r11,r9
8001cf9e:	10 9c       	mov	r12,r8
8001cfa0:	f0 16 00 21 	mcall	r6[132]
	for (i=0; i<3; i++) {
8001cfa4:	30 08       	mov	r8,0
8001cfa6:	ef 48 ff fc 	st.w	r7[-4],r8
8001cfaa:	c2 d8       	rjmp	8001d004 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001cfac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfb4:	2f d9       	sub	r9,-3
8001cfb6:	30 0a       	mov	r10,0
8001cfb8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001cfbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfc4:	30 0a       	mov	r10,0
8001cfc6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001cfca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfd2:	2f a9       	sub	r9,-6
8001cfd4:	30 0a       	mov	r10,0
8001cfd6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001cfda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfde:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfe2:	2f 79       	sub	r9,-9
8001cfe4:	30 0a       	mov	r10,0
8001cfe6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001cfea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cff2:	2f 19       	sub	r9,-15
8001cff4:	30 0a       	mov	r10,0
8001cff6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001cffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cffe:	2f f8       	sub	r8,-1
8001d000:	ef 48 ff fc 	st.w	r7[-4],r8
8001d004:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d008:	58 28       	cp.w	r8,2
8001d00a:	fe 9a ff d1 	brle	8001cfac <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001d00e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d012:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d016:	2b 88       	sub	r8,-72
8001d018:	e0 6a 00 cc 	mov	r10,204
8001d01c:	12 9b       	mov	r11,r9
8001d01e:	10 9c       	mov	r12,r8
8001d020:	f0 16 00 21 	mcall	r6[132]

	for (i=0; i<ROTORCOUNT; i++) {
8001d024:	30 08       	mov	r8,0
8001d026:	ef 48 ff fc 	st.w	r7[-4],r8
8001d02a:	c0 e8       	rjmp	8001d046 <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001d02c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d030:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d034:	2a f9       	sub	r9,-81
8001d036:	30 0a       	mov	r10,0
8001d038:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001d03c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d040:	2f f8       	sub	r8,-1
8001d042:	ef 48 ff fc 	st.w	r7[-4],r8
8001d046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d04a:	58 38       	cp.w	r8,3
8001d04c:	fe 9a ff f0 	brle	8001d02c <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001d050:	f0 16 01 fe 	mcall	r6[2040]
8001d054:	14 98       	mov	r8,r10
8001d056:	16 99       	mov	r9,r11
8001d058:	10 9a       	mov	r10,r8
8001d05a:	12 9b       	mov	r11,r9
8001d05c:	f0 16 00 7b 	mcall	r6[492]
8001d060:	18 99       	mov	r9,r12
8001d062:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d066:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001d06a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d06e:	e0 69 d7 0a 	mov	r9,55050
8001d072:	ea 19 3c 23 	orh	r9,0x3c23
8001d076:	f1 49 01 90 	st.w	r8[400],r9
}
8001d07a:	2f dd       	sub	sp,-12
8001d07c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d080:	80 01       	ld.sh	r1,r0[0x0]
8001d082:	ce 0a       	rjmp	8001ce42 <quat_normalise+0x82>

8001d084 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001d084:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d088:	1a 97       	mov	r7,sp
8001d08a:	20 6d       	sub	sp,24
8001d08c:	4e 26       	lddpc	r6,8001d214 <lift_drag_base+0x190>
8001d08e:	1e 26       	rsub	r6,pc
8001d090:	ef 4c ff f4 	st.w	r7[-12],r12
8001d094:	ef 4b ff f0 	st.w	r7[-16],r11
8001d098:	ef 4a ff ec 	st.w	r7[-20],r10
8001d09c:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001d0a0:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d0a4:	f0 16 00 02 	mcall	r6[8]
8001d0a8:	30 05       	mov	r5,0
8001d0aa:	e0 68 99 9a 	mov	r8,39322
8001d0ae:	ea 18 99 99 	orh	r8,0x9999
8001d0b2:	e0 69 99 99 	mov	r9,39321
8001d0b6:	ea 19 3f b9 	orh	r9,0x3fb9
8001d0ba:	f0 16 00 1d 	mcall	r6[116]
8001d0be:	18 98       	mov	r8,r12
8001d0c0:	58 08       	cp.w	r8,0
8001d0c2:	c0 20       	breq	8001d0c6 <lift_drag_base+0x42>
8001d0c4:	30 15       	mov	r5,1
8001d0c6:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001d0ca:	c0 30       	breq	8001d0d0 <lift_drag_base+0x4c>
8001d0cc:	30 08       	mov	r8,0
8001d0ce:	c9 f8       	rjmp	8001d20c <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001d0d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d0d4:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d0d8:	10 9c       	mov	r12,r8
8001d0da:	f0 16 00 02 	mcall	r6[8]
8001d0de:	e0 68 2d 18 	mov	r8,11544
8001d0e2:	ea 18 54 44 	orh	r8,0x5444
8001d0e6:	e0 69 21 fb 	mov	r9,8699
8001d0ea:	ea 19 40 09 	orh	r9,0x4009
8001d0ee:	f0 16 00 03 	mcall	r6[12]
8001d0f2:	14 98       	mov	r8,r10
8001d0f4:	16 99       	mov	r9,r11
8001d0f6:	10 92       	mov	r2,r8
8001d0f8:	12 93       	mov	r3,r9
8001d0fa:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d0fe:	f0 16 00 02 	mcall	r6[8]
8001d102:	14 98       	mov	r8,r10
8001d104:	16 99       	mov	r9,r11
8001d106:	04 9a       	mov	r10,r2
8001d108:	06 9b       	mov	r11,r3
8001d10a:	f0 16 00 03 	mcall	r6[12]
8001d10e:	14 98       	mov	r8,r10
8001d110:	16 99       	mov	r9,r11
8001d112:	10 9a       	mov	r10,r8
8001d114:	12 9b       	mov	r11,r9
8001d116:	30 08       	mov	r8,0
8001d118:	fc 19 40 4e 	movh	r9,0x404e
8001d11c:	f0 16 00 0c 	mcall	r6[48]
8001d120:	14 98       	mov	r8,r10
8001d122:	16 99       	mov	r9,r11
8001d124:	10 9a       	mov	r10,r8
8001d126:	12 9b       	mov	r11,r9
8001d128:	f0 16 00 08 	mcall	r6[32]
8001d12c:	18 98       	mov	r8,r12
8001d12e:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001d132:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d136:	f0 16 00 02 	mcall	r6[8]
8001d13a:	30 08       	mov	r8,0
8001d13c:	fc 19 40 4e 	movh	r9,0x404e
8001d140:	f0 16 00 0c 	mcall	r6[48]
8001d144:	14 98       	mov	r8,r10
8001d146:	16 99       	mov	r9,r11
8001d148:	10 92       	mov	r2,r8
8001d14a:	12 93       	mov	r3,r9
8001d14c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d150:	f0 f8 01 70 	ld.w	r8,r8[368]
8001d154:	10 9c       	mov	r12,r8
8001d156:	f0 16 00 02 	mcall	r6[8]
8001d15a:	14 98       	mov	r8,r10
8001d15c:	16 99       	mov	r9,r11
8001d15e:	04 9a       	mov	r10,r2
8001d160:	06 9b       	mov	r11,r3
8001d162:	f0 16 00 03 	mcall	r6[12]
8001d166:	14 98       	mov	r8,r10
8001d168:	16 99       	mov	r9,r11
8001d16a:	10 9a       	mov	r10,r8
8001d16c:	12 9b       	mov	r11,r9
8001d16e:	f0 16 00 08 	mcall	r6[32]
8001d172:	18 98       	mov	r8,r12
8001d174:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001d178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d17c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d180:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d184:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d188:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d18c:	10 9c       	mov	r12,r8
8001d18e:	f0 16 00 02 	mcall	r6[8]
8001d192:	e0 68 33 33 	mov	r8,13107
8001d196:	ea 18 33 33 	orh	r8,0x3333
8001d19a:	e0 69 33 33 	mov	r9,13107
8001d19e:	ea 19 3f e3 	orh	r9,0x3fe3
8001d1a2:	f0 16 00 03 	mcall	r6[12]
8001d1a6:	14 98       	mov	r8,r10
8001d1a8:	16 99       	mov	r9,r11
8001d1aa:	10 92       	mov	r2,r8
8001d1ac:	12 93       	mov	r3,r9
8001d1ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d1b2:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001d1b6:	10 9c       	mov	r12,r8
8001d1b8:	f0 16 00 02 	mcall	r6[8]
8001d1bc:	14 98       	mov	r8,r10
8001d1be:	16 99       	mov	r9,r11
8001d1c0:	04 9a       	mov	r10,r2
8001d1c2:	06 9b       	mov	r11,r3
8001d1c4:	f0 16 00 03 	mcall	r6[12]
8001d1c8:	14 98       	mov	r8,r10
8001d1ca:	16 99       	mov	r9,r11
8001d1cc:	10 92       	mov	r2,r8
8001d1ce:	12 93       	mov	r3,r9
8001d1d0:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d1d4:	ee fc ff e8 	ld.w	r12,r7[-24]
8001d1d8:	f0 16 00 0a 	mcall	r6[40]
8001d1dc:	18 98       	mov	r8,r12
8001d1de:	10 9c       	mov	r12,r8
8001d1e0:	f0 16 00 02 	mcall	r6[8]
8001d1e4:	14 98       	mov	r8,r10
8001d1e6:	16 99       	mov	r9,r11
8001d1e8:	30 0a       	mov	r10,0
8001d1ea:	fc 1b 3f f0 	movh	r11,0x3ff0
8001d1ee:	f0 16 00 11 	mcall	r6[68]
8001d1f2:	14 98       	mov	r8,r10
8001d1f4:	16 99       	mov	r9,r11
8001d1f6:	04 9a       	mov	r10,r2
8001d1f8:	06 9b       	mov	r11,r3
8001d1fa:	f0 16 00 03 	mcall	r6[12]
8001d1fe:	14 98       	mov	r8,r10
8001d200:	16 99       	mov	r9,r11
8001d202:	10 9a       	mov	r10,r8
8001d204:	12 9b       	mov	r11,r9
8001d206:	f0 16 00 08 	mcall	r6[32]
8001d20a:	18 98       	mov	r8,r12
}
8001d20c:	10 9c       	mov	r12,r8
8001d20e:	2f ad       	sub	sp,-24
8001d210:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d214:	80 01       	ld.sh	r1,r0[0x0]
8001d216:	cf 12       	brcc	8001d1f8 <lift_drag_base+0x174>

8001d218 <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001d218:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001d21c:	1a 97       	mov	r7,sp
8001d21e:	21 dd       	sub	sp,116
8001d220:	fe f6 04 54 	ld.w	r6,pc[1108]
8001d224:	1e 26       	rsub	r6,pc
8001d226:	ef 4c ff 90 	st.w	r7[-112],r12
8001d22a:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001d22e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d232:	70 99       	ld.w	r9,r8[0x24]
8001d234:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d238:	70 98       	ld.w	r8,r8[0x24]
8001d23a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d23e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d242:	70 aa       	ld.w	r10,r8[0x28]
8001d244:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d248:	70 a8       	ld.w	r8,r8[0x28]
8001d24a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001d24e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d252:	70 ab       	ld.w	r11,r8[0x28]
8001d254:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d258:	70 a8       	ld.w	r8,r8[0x28]
8001d25a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001d25e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d262:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d266:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001d26a:	ee fc ff ec 	ld.w	r12,r7[-20]
8001d26e:	f0 16 00 02 	mcall	r6[8]
8001d272:	14 98       	mov	r8,r10
8001d274:	16 99       	mov	r9,r11
8001d276:	10 9a       	mov	r10,r8
8001d278:	12 9b       	mov	r11,r9
8001d27a:	f0 16 00 6b 	mcall	r6[428]
8001d27e:	14 98       	mov	r8,r10
8001d280:	16 99       	mov	r9,r11
8001d282:	10 9a       	mov	r10,r8
8001d284:	12 9b       	mov	r11,r9
8001d286:	f0 16 00 08 	mcall	r6[32]
8001d28a:	18 98       	mov	r8,r12
8001d28c:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001d290:	30 08       	mov	r8,0
8001d292:	ef 48 ff e4 	st.w	r7[-28],r8
8001d296:	cb 28       	rjmp	8001d3fa <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001d298:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d29c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d2a0:	a5 68       	lsl	r8,0x4
8001d2a2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001d2a6:	f2 08 00 08 	add	r8,r9,r8
8001d2aa:	70 08       	ld.w	r8,r8[0x0]
8001d2ac:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d2b0:	fc 1b 43 fa 	movh	r11,0x43fa
8001d2b4:	10 9c       	mov	r12,r8
8001d2b6:	f0 16 00 0a 	mcall	r6[40]
8001d2ba:	18 98       	mov	r8,r12
8001d2bc:	10 99       	mov	r9,r8
8001d2be:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d2c2:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001d2c6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d2ca:	ea 08 15 02 	lsl	r8,r5,0x2
8001d2ce:	ee 08 00 08 	add	r8,r7,r8
8001d2d2:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001d2d6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d2da:	a3 68       	lsl	r8,0x2
8001d2dc:	ee 08 00 08 	add	r8,r7,r8
8001d2e0:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001d2e4:	30 18       	mov	r8,1
8001d2e6:	30 09       	mov	r9,0
8001d2e8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d2ec:	e0 8c 00 03 	brvs	8001d2f2 <forces_from_servos_diag_quad+0xda>
8001d2f0:	c0 25       	brlt	8001d2f4 <forces_from_servos_diag_quad+0xdc>
8001d2f2:	30 08       	mov	r8,0
8001d2f4:	5c 58       	castu.b	r8
8001d2f6:	c0 90       	breq	8001d308 <forces_from_servos_diag_quad+0xf0>
8001d2f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d2fc:	a3 68       	lsl	r8,0x2
8001d2fe:	ee 08 00 08 	add	r8,r7,r8
8001d302:	30 09       	mov	r9,0
8001d304:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001d308:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d30c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d310:	2a f9       	sub	r9,-81
8001d312:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d316:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001d31a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d31e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d322:	a3 68       	lsl	r8,0x2
8001d324:	ee 08 00 08 	add	r8,r7,r8
8001d328:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001d32c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d330:	f0 f8 01 58 	ld.w	r8,r8[344]
8001d334:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001d338:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d33c:	2a f9       	sub	r9,-81
8001d33e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001d342:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d346:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d34a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d34e:	2a f9       	sub	r9,-81
8001d350:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001d354:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d358:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001d35c:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001d360:	f2 f9 01 90 	ld.w	r9,r9[400]
8001d364:	12 9b       	mov	r11,r9
8001d366:	10 9c       	mov	r12,r8
8001d368:	f0 16 00 0a 	mcall	r6[40]
8001d36c:	18 98       	mov	r8,r12
8001d36e:	10 99       	mov	r9,r8
8001d370:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d374:	f0 f8 01 84 	ld.w	r8,r8[388]
8001d378:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d37c:	ea 08 15 02 	lsl	r8,r5,0x2
8001d380:	ee 08 00 08 	add	r8,r7,r8
8001d384:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001d388:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d38c:	70 b8       	ld.w	r8,r8[0x2c]
8001d38e:	10 99       	mov	r9,r8
8001d390:	ee 19 80 00 	eorh	r9,0x8000
8001d394:	ee fa ff e4 	ld.w	r10,r7[-28]
8001d398:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d39c:	2a fa       	sub	r10,-81
8001d39e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001d3a2:	ee fa ff ec 	ld.w	r10,r7[-20]
8001d3a6:	10 9b       	mov	r11,r8
8001d3a8:	ee fc ff 90 	ld.w	r12,r7[-112]
8001d3ac:	c6 ce       	rcall	8001d084 <lift_drag_base>
8001d3ae:	18 98       	mov	r8,r12
8001d3b0:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001d3b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d3b8:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001d3bc:	f2 fa 01 64 	ld.w	r10,r9[356]
8001d3c0:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d3c4:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001d3c8:	a3 68       	lsl	r8,0x2
8001d3ca:	ee 08 00 08 	add	r8,r7,r8
8001d3ce:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001d3d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d3d6:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001d3da:	f2 fa 01 60 	ld.w	r10,r9[352]
8001d3de:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d3e2:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001d3e6:	a3 68       	lsl	r8,0x2
8001d3e8:	ee 08 00 08 	add	r8,r7,r8
8001d3ec:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001d3f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d3f4:	2f f8       	sub	r8,-1
8001d3f6:	ef 48 ff e4 	st.w	r7[-28],r8
8001d3fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d3fe:	58 38       	cp.w	r8,3
8001d400:	fe 9a ff 4c 	brle	8001d298 <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001d404:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d408:	f0 f8 01 88 	ld.w	r8,r8[392]
8001d40c:	10 9c       	mov	r12,r8
8001d40e:	f0 16 00 02 	mcall	r6[8]
8001d412:	e0 68 0d 1b 	mov	r8,3355
8001d416:	ea 18 2d e0 	orh	r8,0x2de0
8001d41a:	e0 69 a0 90 	mov	r9,41104
8001d41e:	ea 19 3f f6 	orh	r9,0x3ff6
8001d422:	f0 16 00 0c 	mcall	r6[48]
8001d426:	14 98       	mov	r8,r10
8001d428:	16 99       	mov	r9,r11
8001d42a:	10 9a       	mov	r10,r8
8001d42c:	12 9b       	mov	r11,r9
8001d42e:	f0 16 00 08 	mcall	r6[32]
8001d432:	18 98       	mov	r8,r12
8001d434:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001d438:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d43c:	f0 f8 01 88 	ld.w	r8,r8[392]
8001d440:	10 9c       	mov	r12,r8
8001d442:	f0 16 00 02 	mcall	r6[8]
8001d446:	e0 68 0d 1b 	mov	r8,3355
8001d44a:	ea 18 2d e0 	orh	r8,0x2de0
8001d44e:	e0 69 a0 90 	mov	r9,41104
8001d452:	ea 19 3f f6 	orh	r9,0x3ff6
8001d456:	f0 16 00 0c 	mcall	r6[48]
8001d45a:	14 98       	mov	r8,r10
8001d45c:	16 99       	mov	r9,r11
8001d45e:	10 9a       	mov	r10,r8
8001d460:	12 9b       	mov	r11,r9
8001d462:	f0 16 00 08 	mcall	r6[32]
8001d466:	18 98       	mov	r8,r12
8001d468:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001d46c:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001d470:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001d474:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001d478:	ee fa ff c8 	ld.w	r10,r7[-56]
8001d47c:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001d480:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001d484:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d488:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d48c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d490:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d494:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001d496:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001d49a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001d49e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001d4a2:	ee fa ff d0 	ld.w	r10,r7[-48]
8001d4a6:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001d4aa:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001d4ae:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d4b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d4b6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d4ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d4be:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001d4c0:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001d4c4:	10 9c       	mov	r12,r8
8001d4c6:	f0 16 00 02 	mcall	r6[8]
8001d4ca:	30 08       	mov	r8,0
8001d4cc:	fc 19 40 24 	movh	r9,0x4024
8001d4d0:	f0 16 00 03 	mcall	r6[12]
8001d4d4:	14 98       	mov	r8,r10
8001d4d6:	16 99       	mov	r9,r11
8001d4d8:	10 92       	mov	r2,r8
8001d4da:	12 93       	mov	r3,r9
8001d4dc:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001d4e0:	10 9c       	mov	r12,r8
8001d4e2:	f0 16 00 02 	mcall	r6[8]
8001d4e6:	14 98       	mov	r8,r10
8001d4e8:	16 99       	mov	r9,r11
8001d4ea:	04 9a       	mov	r10,r2
8001d4ec:	06 9b       	mov	r11,r3
8001d4ee:	f0 16 00 05 	mcall	r6[20]
8001d4f2:	14 98       	mov	r8,r10
8001d4f4:	16 99       	mov	r9,r11
8001d4f6:	10 92       	mov	r2,r8
8001d4f8:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001d4fa:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001d4fe:	10 9c       	mov	r12,r8
8001d500:	f0 16 00 02 	mcall	r6[8]
8001d504:	30 08       	mov	r8,0
8001d506:	fc 19 40 24 	movh	r9,0x4024
8001d50a:	f0 16 00 03 	mcall	r6[12]
8001d50e:	14 98       	mov	r8,r10
8001d510:	16 99       	mov	r9,r11
8001d512:	10 90       	mov	r0,r8
8001d514:	12 91       	mov	r1,r9
8001d516:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001d51a:	10 9c       	mov	r12,r8
8001d51c:	f0 16 00 02 	mcall	r6[8]
8001d520:	14 98       	mov	r8,r10
8001d522:	16 99       	mov	r9,r11
8001d524:	00 9a       	mov	r10,r0
8001d526:	02 9b       	mov	r11,r1
8001d528:	f0 16 00 05 	mcall	r6[20]
8001d52c:	14 98       	mov	r8,r10
8001d52e:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001d530:	04 9a       	mov	r10,r2
8001d532:	06 9b       	mov	r11,r3
8001d534:	f0 16 00 11 	mcall	r6[68]
8001d538:	14 98       	mov	r8,r10
8001d53a:	16 99       	mov	r9,r11
8001d53c:	10 92       	mov	r2,r8
8001d53e:	12 93       	mov	r3,r9
8001d540:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001d544:	10 9c       	mov	r12,r8
8001d546:	f0 16 00 02 	mcall	r6[8]
8001d54a:	30 08       	mov	r8,0
8001d54c:	fc 19 40 24 	movh	r9,0x4024
8001d550:	f0 16 00 03 	mcall	r6[12]
8001d554:	14 98       	mov	r8,r10
8001d556:	16 99       	mov	r9,r11
8001d558:	10 90       	mov	r0,r8
8001d55a:	12 91       	mov	r1,r9
8001d55c:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001d560:	10 9c       	mov	r12,r8
8001d562:	f0 16 00 02 	mcall	r6[8]
8001d566:	14 98       	mov	r8,r10
8001d568:	16 99       	mov	r9,r11
8001d56a:	00 9a       	mov	r10,r0
8001d56c:	02 9b       	mov	r11,r1
8001d56e:	f0 16 00 05 	mcall	r6[20]
8001d572:	14 98       	mov	r8,r10
8001d574:	16 99       	mov	r9,r11
8001d576:	04 9a       	mov	r10,r2
8001d578:	06 9b       	mov	r11,r3
8001d57a:	f0 16 00 05 	mcall	r6[20]
8001d57e:	14 98       	mov	r8,r10
8001d580:	16 99       	mov	r9,r11
8001d582:	10 92       	mov	r2,r8
8001d584:	12 93       	mov	r3,r9
8001d586:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001d58a:	10 9c       	mov	r12,r8
8001d58c:	f0 16 00 02 	mcall	r6[8]
8001d590:	30 08       	mov	r8,0
8001d592:	fc 19 40 24 	movh	r9,0x4024
8001d596:	f0 16 00 03 	mcall	r6[12]
8001d59a:	14 98       	mov	r8,r10
8001d59c:	16 99       	mov	r9,r11
8001d59e:	10 90       	mov	r0,r8
8001d5a0:	12 91       	mov	r1,r9
8001d5a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001d5a6:	10 9c       	mov	r12,r8
8001d5a8:	f0 16 00 02 	mcall	r6[8]
8001d5ac:	14 98       	mov	r8,r10
8001d5ae:	16 99       	mov	r9,r11
8001d5b0:	00 9a       	mov	r10,r0
8001d5b2:	02 9b       	mov	r11,r1
8001d5b4:	f0 16 00 05 	mcall	r6[20]
8001d5b8:	14 98       	mov	r8,r10
8001d5ba:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001d5bc:	04 9a       	mov	r10,r2
8001d5be:	06 9b       	mov	r11,r3
8001d5c0:	f0 16 00 11 	mcall	r6[68]
8001d5c4:	14 98       	mov	r8,r10
8001d5c6:	16 99       	mov	r9,r11
8001d5c8:	10 92       	mov	r2,r8
8001d5ca:	12 93       	mov	r3,r9
8001d5cc:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d5d0:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d5d4:	10 9c       	mov	r12,r8
8001d5d6:	f0 16 00 02 	mcall	r6[8]
8001d5da:	14 98       	mov	r8,r10
8001d5dc:	16 99       	mov	r9,r11
8001d5de:	04 9a       	mov	r10,r2
8001d5e0:	06 9b       	mov	r11,r3
8001d5e2:	f0 16 00 03 	mcall	r6[12]
8001d5e6:	14 98       	mov	r8,r10
8001d5e8:	16 99       	mov	r9,r11
8001d5ea:	10 9a       	mov	r10,r8
8001d5ec:	12 9b       	mov	r11,r9
8001d5ee:	f0 16 00 08 	mcall	r6[32]
8001d5f2:	18 99       	mov	r9,r12
8001d5f4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d5f8:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001d5fa:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d5fe:	70 98       	ld.w	r8,r8[0x24]
8001d600:	10 99       	mov	r9,r8
8001d602:	ee 19 80 00 	eorh	r9,0x8000
8001d606:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d60a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d60e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d612:	f0 f8 01 78 	ld.w	r8,r8[376]
8001d616:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d61a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d61e:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001d620:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d624:	70 a8       	ld.w	r8,r8[0x28]
8001d626:	10 99       	mov	r9,r8
8001d628:	ee 19 80 00 	eorh	r9,0x8000
8001d62c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d630:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d634:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d638:	f0 f8 01 78 	ld.w	r8,r8[376]
8001d63c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d640:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d644:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001d646:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001d64a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001d64e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d652:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001d656:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d65a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001d65e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d662:	10 99       	mov	r9,r8
8001d664:	ee 19 80 00 	eorh	r9,0x8000
8001d668:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d66c:	91 89       	st.w	r8[0x20],r9

}
8001d66e:	2e 3d       	sub	sp,-116
8001d670:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001d674:	80 01       	ld.sh	r1,r0[0x0]
8001d676:	d0 a8       	*unknown*

8001d678 <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001d678:	eb cd 40 80 	pushm	r7,lr
8001d67c:	1a 97       	mov	r7,sp
8001d67e:	20 7d       	sub	sp,28
8001d680:	ef 4c ff e8 	st.w	r7[-24],r12
8001d684:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001d688:	2f 9d       	sub	sp,-28
8001d68a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d68e <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001d68e:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d692:	1a 97       	mov	r7,sp
8001d694:	21 fd       	sub	sp,124
8001d696:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001d69a:	1e 26       	rsub	r6,pc
8001d69c:	ef 4c ff a0 	st.w	r7[-96],r12
8001d6a0:	ef 4b ff 9c 	st.w	r7[-100],r11
8001d6a4:	ef 4a ff 98 	st.w	r7[-104],r10
8001d6a8:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001d6ac:	30 08       	mov	r8,0
8001d6ae:	ef 48 ff b4 	st.w	r7[-76],r8
8001d6b2:	fc 18 3f 80 	movh	r8,0x3f80
8001d6b6:	ef 48 ff b8 	st.w	r7[-72],r8
8001d6ba:	30 08       	mov	r8,0
8001d6bc:	ef 48 ff bc 	st.w	r7[-68],r8
8001d6c0:	30 08       	mov	r8,0
8001d6c2:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001d6c6:	30 08       	mov	r8,0
8001d6c8:	ef 48 ff a4 	st.w	r7[-92],r8
8001d6cc:	30 08       	mov	r8,0
8001d6ce:	ef 48 ff a8 	st.w	r7[-88],r8
8001d6d2:	30 08       	mov	r8,0
8001d6d4:	ef 48 ff ac 	st.w	r7[-84],r8
8001d6d8:	fc 18 bf 80 	movh	r8,0xbf80
8001d6dc:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001d6e0:	f0 16 00 29 	mcall	r6[164]
8001d6e4:	18 98       	mov	r8,r12
8001d6e6:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001d6ea:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d6ee:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001d6f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6f6:	f2 08 01 08 	sub	r8,r9,r8
8001d6fa:	10 9c       	mov	r12,r8
8001d6fc:	f0 16 00 51 	mcall	r6[324]
8001d700:	30 08       	mov	r8,0
8001d702:	e0 69 84 80 	mov	r9,33920
8001d706:	ea 19 41 2e 	orh	r9,0x412e
8001d70a:	f0 16 00 0c 	mcall	r6[48]
8001d70e:	14 98       	mov	r8,r10
8001d710:	16 99       	mov	r9,r11
8001d712:	10 9a       	mov	r10,r8
8001d714:	12 9b       	mov	r11,r9
8001d716:	f0 16 00 08 	mcall	r6[32]
8001d71a:	18 99       	mov	r9,r12
8001d71c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d720:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001d724:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d728:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d72c:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001d730:	f0 16 00 32 	mcall	r6[200]
8001d734:	18 98       	mov	r8,r12
8001d736:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001d73a:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001d73e:	ee fc ff a0 	ld.w	r12,r7[-96]
8001d742:	f0 16 01 e1 	mcall	r6[1924]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001d746:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d74a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001d74e:	10 9c       	mov	r12,r8
8001d750:	f0 16 00 02 	mcall	r6[8]
8001d754:	e0 68 99 9a 	mov	r8,39322
8001d758:	ea 18 99 99 	orh	r8,0x9999
8001d75c:	e0 69 99 99 	mov	r9,39321
8001d760:	ea 19 bf b9 	orh	r9,0xbfb9
8001d764:	f0 16 00 03 	mcall	r6[12]
8001d768:	14 98       	mov	r8,r10
8001d76a:	16 99       	mov	r9,r11
8001d76c:	10 9a       	mov	r10,r8
8001d76e:	12 9b       	mov	r11,r9
8001d770:	30 08       	mov	r8,0
8001d772:	fc 19 3f f0 	movh	r9,0x3ff0
8001d776:	f0 16 00 05 	mcall	r6[20]
8001d77a:	14 98       	mov	r8,r10
8001d77c:	16 99       	mov	r9,r11
8001d77e:	10 92       	mov	r2,r8
8001d780:	12 93       	mov	r3,r9
8001d782:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d786:	70 38       	ld.w	r8,r8[0xc]
8001d788:	10 9c       	mov	r12,r8
8001d78a:	f0 16 00 02 	mcall	r6[8]
8001d78e:	14 98       	mov	r8,r10
8001d790:	16 99       	mov	r9,r11
8001d792:	04 9a       	mov	r10,r2
8001d794:	06 9b       	mov	r11,r3
8001d796:	f0 16 00 03 	mcall	r6[12]
8001d79a:	14 98       	mov	r8,r10
8001d79c:	16 99       	mov	r9,r11
8001d79e:	10 92       	mov	r2,r8
8001d7a0:	12 93       	mov	r3,r9
8001d7a2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d7a6:	f0 f9 01 90 	ld.w	r9,r8[400]
8001d7aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d7ae:	70 08       	ld.w	r8,r8[0x0]
8001d7b0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d7b4:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001d7b8:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001d7bc:	12 9b       	mov	r11,r9
8001d7be:	10 9c       	mov	r12,r8
8001d7c0:	f0 16 00 0a 	mcall	r6[40]
8001d7c4:	18 98       	mov	r8,r12
8001d7c6:	10 9c       	mov	r12,r8
8001d7c8:	f0 16 00 02 	mcall	r6[8]
8001d7cc:	14 98       	mov	r8,r10
8001d7ce:	16 99       	mov	r9,r11
8001d7d0:	04 9a       	mov	r10,r2
8001d7d2:	06 9b       	mov	r11,r3
8001d7d4:	f0 16 00 05 	mcall	r6[20]
8001d7d8:	14 98       	mov	r8,r10
8001d7da:	16 99       	mov	r9,r11
8001d7dc:	10 9a       	mov	r10,r8
8001d7de:	12 9b       	mov	r11,r9
8001d7e0:	f0 16 00 08 	mcall	r6[32]
8001d7e4:	18 98       	mov	r8,r12
8001d7e6:	fc 1b 41 20 	movh	r11,0x4120
8001d7ea:	10 9c       	mov	r12,r8
8001d7ec:	fe b0 fb 6e 	rcall	8001cec8 <clip>
8001d7f0:	18 99       	mov	r9,r12
8001d7f2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d7f6:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001d7f8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d7fc:	f0 f8 01 90 	ld.w	r8,r8[400]
8001d800:	10 9c       	mov	r12,r8
8001d802:	f0 16 00 02 	mcall	r6[8]
8001d806:	e0 68 99 9a 	mov	r8,39322
8001d80a:	ea 18 99 99 	orh	r8,0x9999
8001d80e:	e0 69 99 99 	mov	r9,39321
8001d812:	ea 19 bf b9 	orh	r9,0xbfb9
8001d816:	f0 16 00 03 	mcall	r6[12]
8001d81a:	14 98       	mov	r8,r10
8001d81c:	16 99       	mov	r9,r11
8001d81e:	10 9a       	mov	r10,r8
8001d820:	12 9b       	mov	r11,r9
8001d822:	30 08       	mov	r8,0
8001d824:	fc 19 3f f0 	movh	r9,0x3ff0
8001d828:	f0 16 00 05 	mcall	r6[20]
8001d82c:	14 98       	mov	r8,r10
8001d82e:	16 99       	mov	r9,r11
8001d830:	10 92       	mov	r2,r8
8001d832:	12 93       	mov	r3,r9
8001d834:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d838:	70 48       	ld.w	r8,r8[0x10]
8001d83a:	10 9c       	mov	r12,r8
8001d83c:	f0 16 00 02 	mcall	r6[8]
8001d840:	14 98       	mov	r8,r10
8001d842:	16 99       	mov	r9,r11
8001d844:	04 9a       	mov	r10,r2
8001d846:	06 9b       	mov	r11,r3
8001d848:	f0 16 00 03 	mcall	r6[12]
8001d84c:	14 98       	mov	r8,r10
8001d84e:	16 99       	mov	r9,r11
8001d850:	10 92       	mov	r2,r8
8001d852:	12 93       	mov	r3,r9
8001d854:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d858:	f0 f9 01 90 	ld.w	r9,r8[400]
8001d85c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d860:	70 18       	ld.w	r8,r8[0x4]
8001d862:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d866:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001d86a:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001d86e:	12 9b       	mov	r11,r9
8001d870:	10 9c       	mov	r12,r8
8001d872:	f0 16 00 0a 	mcall	r6[40]
8001d876:	18 98       	mov	r8,r12
8001d878:	10 9c       	mov	r12,r8
8001d87a:	f0 16 00 02 	mcall	r6[8]
8001d87e:	14 98       	mov	r8,r10
8001d880:	16 99       	mov	r9,r11
8001d882:	04 9a       	mov	r10,r2
8001d884:	06 9b       	mov	r11,r3
8001d886:	f0 16 00 05 	mcall	r6[20]
8001d88a:	14 98       	mov	r8,r10
8001d88c:	16 99       	mov	r9,r11
8001d88e:	10 9a       	mov	r10,r8
8001d890:	12 9b       	mov	r11,r9
8001d892:	f0 16 00 08 	mcall	r6[32]
8001d896:	18 98       	mov	r8,r12
8001d898:	fc 1b 41 20 	movh	r11,0x4120
8001d89c:	10 9c       	mov	r12,r8
8001d89e:	fe b0 fb 15 	rcall	8001cec8 <clip>
8001d8a2:	18 99       	mov	r9,r12
8001d8a4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d8a8:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001d8aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d8ae:	f0 f8 01 90 	ld.w	r8,r8[400]
8001d8b2:	10 9c       	mov	r12,r8
8001d8b4:	f0 16 00 02 	mcall	r6[8]
8001d8b8:	e0 68 99 9a 	mov	r8,39322
8001d8bc:	ea 18 99 99 	orh	r8,0x9999
8001d8c0:	e0 69 99 99 	mov	r9,39321
8001d8c4:	ea 19 bf b9 	orh	r9,0xbfb9
8001d8c8:	f0 16 00 03 	mcall	r6[12]
8001d8cc:	14 98       	mov	r8,r10
8001d8ce:	16 99       	mov	r9,r11
8001d8d0:	10 9a       	mov	r10,r8
8001d8d2:	12 9b       	mov	r11,r9
8001d8d4:	30 08       	mov	r8,0
8001d8d6:	fc 19 3f f0 	movh	r9,0x3ff0
8001d8da:	f0 16 00 05 	mcall	r6[20]
8001d8de:	14 98       	mov	r8,r10
8001d8e0:	16 99       	mov	r9,r11
8001d8e2:	10 92       	mov	r2,r8
8001d8e4:	12 93       	mov	r3,r9
8001d8e6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d8ea:	70 58       	ld.w	r8,r8[0x14]
8001d8ec:	10 9c       	mov	r12,r8
8001d8ee:	f0 16 00 02 	mcall	r6[8]
8001d8f2:	14 98       	mov	r8,r10
8001d8f4:	16 99       	mov	r9,r11
8001d8f6:	04 9a       	mov	r10,r2
8001d8f8:	06 9b       	mov	r11,r3
8001d8fa:	f0 16 00 03 	mcall	r6[12]
8001d8fe:	14 98       	mov	r8,r10
8001d900:	16 99       	mov	r9,r11
8001d902:	10 92       	mov	r2,r8
8001d904:	12 93       	mov	r3,r9
8001d906:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d90a:	f0 f9 01 90 	ld.w	r9,r8[400]
8001d90e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d912:	70 28       	ld.w	r8,r8[0x8]
8001d914:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d918:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001d91c:	f2 f9 01 80 	ld.w	r9,r9[384]
8001d920:	12 9b       	mov	r11,r9
8001d922:	10 9c       	mov	r12,r8
8001d924:	f0 16 00 0a 	mcall	r6[40]
8001d928:	18 98       	mov	r8,r12
8001d92a:	10 9c       	mov	r12,r8
8001d92c:	f0 16 00 02 	mcall	r6[8]
8001d930:	14 98       	mov	r8,r10
8001d932:	16 99       	mov	r9,r11
8001d934:	04 9a       	mov	r10,r2
8001d936:	06 9b       	mov	r11,r3
8001d938:	f0 16 00 05 	mcall	r6[20]
8001d93c:	14 98       	mov	r8,r10
8001d93e:	16 99       	mov	r9,r11
8001d940:	10 9a       	mov	r10,r8
8001d942:	12 9b       	mov	r11,r9
8001d944:	f0 16 00 08 	mcall	r6[32]
8001d948:	18 98       	mov	r8,r12
8001d94a:	fc 1b 41 20 	movh	r11,0x4120
8001d94e:	10 9c       	mov	r12,r8
8001d950:	fe b0 fa bc 	rcall	8001cec8 <clip>
8001d954:	18 99       	mov	r9,r12
8001d956:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d95a:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001d95c:	30 08       	mov	r8,0
8001d95e:	ef 48 ff f4 	st.w	r7[-12],r8
8001d962:	c1 58       	rjmp	8001d98c <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001d964:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d968:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d96c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001d970:	2f da       	sub	r10,-3
8001d972:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001d976:	2f f8       	sub	r8,-1
8001d978:	a3 68       	lsl	r8,0x2
8001d97a:	ee 08 00 08 	add	r8,r7,r8
8001d97e:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001d982:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d986:	2f f8       	sub	r8,-1
8001d988:	ef 48 ff f4 	st.w	r7[-12],r8
8001d98c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d990:	58 28       	cp.w	r8,2
8001d992:	fe 9a ff e9 	brle	8001d964 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001d996:	30 08       	mov	r8,0
8001d998:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001d99c:	ee ca 00 3c 	sub	r10,r7,60
8001d9a0:	20 4d       	sub	sp,16
8001d9a2:	1a 98       	mov	r8,sp
8001d9a4:	ee c9 00 1c 	sub	r9,r7,28
8001d9a8:	20 08       	sub	r8,0
8001d9aa:	20 09       	sub	r9,0
8001d9ac:	72 0b       	ld.w	r11,r9[0x0]
8001d9ae:	91 0b       	st.w	r8[0x0],r11
8001d9b0:	72 1b       	ld.w	r11,r9[0x4]
8001d9b2:	91 1b       	st.w	r8[0x4],r11
8001d9b4:	72 2b       	ld.w	r11,r9[0x8]
8001d9b6:	91 2b       	st.w	r8[0x8],r11
8001d9b8:	72 39       	ld.w	r9,r9[0xc]
8001d9ba:	91 39       	st.w	r8[0xc],r9
8001d9bc:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001d9c0:	20 4d       	sub	sp,16
8001d9c2:	1a 98       	mov	r8,sp
8001d9c4:	2b 89       	sub	r9,-72
8001d9c6:	20 08       	sub	r8,0
8001d9c8:	20 09       	sub	r9,0
8001d9ca:	72 0b       	ld.w	r11,r9[0x0]
8001d9cc:	91 0b       	st.w	r8[0x0],r11
8001d9ce:	72 1b       	ld.w	r11,r9[0x4]
8001d9d0:	91 1b       	st.w	r8[0x4],r11
8001d9d2:	72 2b       	ld.w	r11,r9[0x8]
8001d9d4:	91 2b       	st.w	r8[0x8],r11
8001d9d6:	72 39       	ld.w	r9,r9[0xc]
8001d9d8:	91 39       	st.w	r8[0xc],r9
8001d9da:	14 9c       	mov	r12,r10
8001d9dc:	fe b0 f7 d4 	rcall	8001c984 <quat_multi>
8001d9e0:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001d9e2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d9e6:	71 29       	ld.w	r9,r8[0x48]
8001d9e8:	ee fa ff c4 	ld.w	r10,r7[-60]
8001d9ec:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001d9f0:	f0 f8 01 90 	ld.w	r8,r8[400]
8001d9f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d9f8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d9fc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da00:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001da04:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da08:	71 39       	ld.w	r9,r8[0x4c]
8001da0a:	ee fa ff c8 	ld.w	r10,r7[-56]
8001da0e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da12:	f0 f8 01 90 	ld.w	r8,r8[400]
8001da16:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da1a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da1e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da22:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001da26:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da2a:	71 49       	ld.w	r9,r8[0x50]
8001da2c:	ee fa ff cc 	ld.w	r10,r7[-52]
8001da30:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da34:	f0 f8 01 90 	ld.w	r8,r8[400]
8001da38:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da3c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da40:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da44:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001da48:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da4c:	71 59       	ld.w	r9,r8[0x54]
8001da4e:	ee fa ff d0 	ld.w	r10,r7[-48]
8001da52:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da56:	f0 f8 01 90 	ld.w	r8,r8[400]
8001da5a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da5e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da62:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001da66:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001da6a:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001da6e:	ee ca 00 7c 	sub	r10,r7,124
8001da72:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001da76:	20 4d       	sub	sp,16
8001da78:	1a 98       	mov	r8,sp
8001da7a:	2b 89       	sub	r9,-72
8001da7c:	20 08       	sub	r8,0
8001da7e:	20 09       	sub	r9,0
8001da80:	72 0b       	ld.w	r11,r9[0x0]
8001da82:	91 0b       	st.w	r8[0x0],r11
8001da84:	72 1b       	ld.w	r11,r9[0x4]
8001da86:	91 1b       	st.w	r8[0x4],r11
8001da88:	72 2b       	ld.w	r11,r9[0x8]
8001da8a:	91 2b       	st.w	r8[0x8],r11
8001da8c:	72 39       	ld.w	r9,r9[0xc]
8001da8e:	91 39       	st.w	r8[0xc],r9
8001da90:	14 9c       	mov	r12,r10
8001da92:	fe b0 f9 97 	rcall	8001cdc0 <quat_normalise>
8001da96:	2f cd       	sub	sp,-16
8001da98:	ea c8 ff b8 	sub	r8,r5,-72
8001da9c:	ee c9 00 7c 	sub	r9,r7,124
8001daa0:	20 08       	sub	r8,0
8001daa2:	20 09       	sub	r9,0
8001daa4:	72 0a       	ld.w	r10,r9[0x0]
8001daa6:	91 0a       	st.w	r8[0x0],r10
8001daa8:	72 1a       	ld.w	r10,r9[0x4]
8001daaa:	91 1a       	st.w	r8[0x4],r10
8001daac:	72 2a       	ld.w	r10,r9[0x8]
8001daae:	91 2a       	st.w	r8[0x8],r10
8001dab0:	72 39       	ld.w	r9,r9[0xc]
8001dab2:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001dab4:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001dab8:	ee ca 00 7c 	sub	r10,r7,124
8001dabc:	20 4d       	sub	sp,16
8001dabe:	1a 98       	mov	r8,sp
8001dac0:	ee c9 00 5c 	sub	r9,r7,92
8001dac4:	20 08       	sub	r8,0
8001dac6:	20 09       	sub	r9,0
8001dac8:	72 0b       	ld.w	r11,r9[0x0]
8001daca:	91 0b       	st.w	r8[0x0],r11
8001dacc:	72 1b       	ld.w	r11,r9[0x4]
8001dace:	91 1b       	st.w	r8[0x4],r11
8001dad0:	72 2b       	ld.w	r11,r9[0x8]
8001dad2:	91 2b       	st.w	r8[0x8],r11
8001dad4:	72 39       	ld.w	r9,r9[0xc]
8001dad6:	91 39       	st.w	r8[0xc],r9
8001dad8:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dadc:	20 4d       	sub	sp,16
8001dade:	1a 98       	mov	r8,sp
8001dae0:	2b 89       	sub	r9,-72
8001dae2:	20 08       	sub	r8,0
8001dae4:	20 09       	sub	r9,0
8001dae6:	72 0b       	ld.w	r11,r9[0x0]
8001dae8:	91 0b       	st.w	r8[0x0],r11
8001daea:	72 1b       	ld.w	r11,r9[0x4]
8001daec:	91 1b       	st.w	r8[0x4],r11
8001daee:	72 2b       	ld.w	r11,r9[0x8]
8001daf0:	91 2b       	st.w	r8[0x8],r11
8001daf2:	72 39       	ld.w	r9,r9[0xc]
8001daf4:	91 39       	st.w	r8[0xc],r9
8001daf6:	14 9c       	mov	r12,r10
8001daf8:	fe b0 f7 fe 	rcall	8001caf4 <quat_global_to_local>
8001dafc:	2f 8d       	sub	sp,-32
8001dafe:	ea c8 ff a8 	sub	r8,r5,-88
8001db02:	ee c9 00 7c 	sub	r9,r7,124
8001db06:	20 08       	sub	r8,0
8001db08:	20 09       	sub	r9,0
8001db0a:	72 0a       	ld.w	r10,r9[0x0]
8001db0c:	91 0a       	st.w	r8[0x0],r10
8001db0e:	72 1a       	ld.w	r10,r9[0x4]
8001db10:	91 1a       	st.w	r8[0x4],r10
8001db12:	72 2a       	ld.w	r10,r9[0x8]
8001db14:	91 2a       	st.w	r8[0x8],r10
8001db16:	72 39       	ld.w	r9,r9[0xc]
8001db18:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001db1a:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001db1e:	ee ca 00 7c 	sub	r10,r7,124
8001db22:	20 4d       	sub	sp,16
8001db24:	1a 98       	mov	r8,sp
8001db26:	ee c9 00 4c 	sub	r9,r7,76
8001db2a:	20 08       	sub	r8,0
8001db2c:	20 09       	sub	r9,0
8001db2e:	72 0b       	ld.w	r11,r9[0x0]
8001db30:	91 0b       	st.w	r8[0x0],r11
8001db32:	72 1b       	ld.w	r11,r9[0x4]
8001db34:	91 1b       	st.w	r8[0x4],r11
8001db36:	72 2b       	ld.w	r11,r9[0x8]
8001db38:	91 2b       	st.w	r8[0x8],r11
8001db3a:	72 39       	ld.w	r9,r9[0xc]
8001db3c:	91 39       	st.w	r8[0xc],r9
8001db3e:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001db42:	20 4d       	sub	sp,16
8001db44:	1a 98       	mov	r8,sp
8001db46:	2b 89       	sub	r9,-72
8001db48:	20 08       	sub	r8,0
8001db4a:	20 09       	sub	r9,0
8001db4c:	72 0b       	ld.w	r11,r9[0x0]
8001db4e:	91 0b       	st.w	r8[0x0],r11
8001db50:	72 1b       	ld.w	r11,r9[0x4]
8001db52:	91 1b       	st.w	r8[0x4],r11
8001db54:	72 2b       	ld.w	r11,r9[0x8]
8001db56:	91 2b       	st.w	r8[0x8],r11
8001db58:	72 39       	ld.w	r9,r9[0xc]
8001db5a:	91 39       	st.w	r8[0xc],r9
8001db5c:	14 9c       	mov	r12,r10
8001db5e:	fe b0 f7 cb 	rcall	8001caf4 <quat_global_to_local>
8001db62:	2f 8d       	sub	sp,-32
8001db64:	ea c8 ff 98 	sub	r8,r5,-104
8001db68:	ee c9 00 7c 	sub	r9,r7,124
8001db6c:	20 08       	sub	r8,0
8001db6e:	20 09       	sub	r9,0
8001db70:	72 0a       	ld.w	r10,r9[0x0]
8001db72:	91 0a       	st.w	r8[0x0],r10
8001db74:	72 1a       	ld.w	r10,r9[0x4]
8001db76:	91 1a       	st.w	r8[0x4],r10
8001db78:	72 2a       	ld.w	r10,r9[0x8]
8001db7a:	91 2a       	st.w	r8[0x8],r10
8001db7c:	72 39       	ld.w	r9,r9[0xc]
8001db7e:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001db80:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001db84:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001db88:	30 18       	mov	r8,1
8001db8a:	30 09       	mov	r9,0
8001db8c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db90:	e0 8c 00 04 	brvs	8001db98 <simu_update+0x50a>
8001db94:	e0 89 00 03 	brgt	8001db9a <simu_update+0x50c>
8001db98:	30 08       	mov	r8,0
8001db9a:	5c 58       	castu.b	r8
8001db9c:	e0 80 00 85 	breq	8001dca6 <simu_update+0x618>
		sim->vel[Z]=0.0;
8001dba0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dba4:	30 09       	mov	r9,0
8001dba6:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001dba8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dbac:	30 09       	mov	r9,0
8001dbae:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001dbb2:	30 08       	mov	r8,0
8001dbb4:	ef 48 ff f4 	st.w	r7[-12],r8
8001dbb8:	c4 18       	rjmp	8001dc3a <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001dbba:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001dbbe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dbc2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dbc6:	2f a9       	sub	r9,-6
8001dbc8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001dbcc:	10 9c       	mov	r12,r8
8001dbce:	f0 16 00 02 	mcall	r6[8]
8001dbd2:	14 92       	mov	r2,r10
8001dbd4:	16 93       	mov	r3,r11
8001dbd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dbda:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dbde:	2e 99       	sub	r9,-23
8001dbe0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001dbe4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dbe8:	f0 f8 01 74 	ld.w	r8,r8[372]
8001dbec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001dbf0:	10 9c       	mov	r12,r8
8001dbf2:	f0 16 00 02 	mcall	r6[8]
8001dbf6:	e0 68 85 1f 	mov	r8,34079
8001dbfa:	ea 18 51 eb 	orh	r8,0x51eb
8001dbfe:	e0 69 9e b8 	mov	r9,40632
8001dc02:	ea 19 40 23 	orh	r9,0x4023
8001dc06:	f0 16 00 03 	mcall	r6[12]
8001dc0a:	14 98       	mov	r8,r10
8001dc0c:	16 99       	mov	r9,r11
8001dc0e:	04 9a       	mov	r10,r2
8001dc10:	06 9b       	mov	r11,r3
8001dc12:	f0 16 00 05 	mcall	r6[20]
8001dc16:	14 98       	mov	r8,r10
8001dc18:	16 99       	mov	r9,r11
8001dc1a:	10 9a       	mov	r10,r8
8001dc1c:	12 9b       	mov	r11,r9
8001dc1e:	f0 16 00 08 	mcall	r6[32]
8001dc22:	18 9a       	mov	r10,r12
8001dc24:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dc28:	ea c9 ff fa 	sub	r9,r5,-6
8001dc2c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001dc30:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dc34:	2f f8       	sub	r8,-1
8001dc36:	ef 48 ff f4 	st.w	r7[-12],r8
8001dc3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dc3e:	58 28       	cp.w	r8,2
8001dc40:	fe 9a ff bd 	brle	8001dbba <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001dc44:	30 08       	mov	r8,0
8001dc46:	ef 48 ff f4 	st.w	r7[-12],r8
8001dc4a:	c2 98       	rjmp	8001dc9c <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001dc4c:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001dc50:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dc54:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dc58:	2f 79       	sub	r9,-9
8001dc5a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001dc5e:	10 9c       	mov	r12,r8
8001dc60:	f0 16 00 02 	mcall	r6[8]
8001dc64:	e0 68 66 66 	mov	r8,26214
8001dc68:	ea 18 66 66 	orh	r8,0x6666
8001dc6c:	e0 69 66 66 	mov	r9,26214
8001dc70:	ea 19 3f ee 	orh	r9,0x3fee
8001dc74:	f0 16 00 03 	mcall	r6[12]
8001dc78:	14 98       	mov	r8,r10
8001dc7a:	16 99       	mov	r9,r11
8001dc7c:	10 9a       	mov	r10,r8
8001dc7e:	12 9b       	mov	r11,r9
8001dc80:	f0 16 00 08 	mcall	r6[32]
8001dc84:	18 9a       	mov	r10,r12
8001dc86:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dc8a:	ea c9 ff f7 	sub	r9,r5,-9
8001dc8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001dc92:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dc96:	2f f8       	sub	r8,-1
8001dc98:	ef 48 ff f4 	st.w	r7[-12],r8
8001dc9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dca0:	58 28       	cp.w	r8,2
8001dca2:	fe 9a ff d5 	brle	8001dc4c <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001dca6:	30 08       	mov	r8,0
8001dca8:	ef 48 ff f4 	st.w	r7[-12],r8
8001dcac:	c1 58       	rjmp	8001dcd6 <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001dcae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dcb2:	ee fa ff f4 	ld.w	r10,r7[-12]
8001dcb6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dcba:	2f 4a       	sub	r10,-12
8001dcbc:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001dcc0:	2f f8       	sub	r8,-1
8001dcc2:	a3 68       	lsl	r8,0x2
8001dcc4:	ee 08 00 08 	add	r8,r7,r8
8001dcc8:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001dccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dcd0:	2f f8       	sub	r8,-1
8001dcd2:	ef 48 ff f4 	st.w	r7[-12],r8
8001dcd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dcda:	58 28       	cp.w	r8,2
8001dcdc:	fe 9a ff e9 	brle	8001dcae <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001dce0:	30 08       	mov	r8,0
8001dce2:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001dce6:	ee ca 00 7c 	sub	r10,r7,124
8001dcea:	20 4d       	sub	sp,16
8001dcec:	1a 98       	mov	r8,sp
8001dcee:	ee c9 00 1c 	sub	r9,r7,28
8001dcf2:	20 08       	sub	r8,0
8001dcf4:	20 09       	sub	r9,0
8001dcf6:	72 0b       	ld.w	r11,r9[0x0]
8001dcf8:	91 0b       	st.w	r8[0x0],r11
8001dcfa:	72 1b       	ld.w	r11,r9[0x4]
8001dcfc:	91 1b       	st.w	r8[0x4],r11
8001dcfe:	72 2b       	ld.w	r11,r9[0x8]
8001dd00:	91 2b       	st.w	r8[0x8],r11
8001dd02:	72 39       	ld.w	r9,r9[0xc]
8001dd04:	91 39       	st.w	r8[0xc],r9
8001dd06:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dd0a:	20 4d       	sub	sp,16
8001dd0c:	1a 98       	mov	r8,sp
8001dd0e:	2b 89       	sub	r9,-72
8001dd10:	20 08       	sub	r8,0
8001dd12:	20 09       	sub	r9,0
8001dd14:	72 0b       	ld.w	r11,r9[0x0]
8001dd16:	91 0b       	st.w	r8[0x0],r11
8001dd18:	72 1b       	ld.w	r11,r9[0x4]
8001dd1a:	91 1b       	st.w	r8[0x4],r11
8001dd1c:	72 2b       	ld.w	r11,r9[0x8]
8001dd1e:	91 2b       	st.w	r8[0x8],r11
8001dd20:	72 39       	ld.w	r9,r9[0xc]
8001dd22:	91 39       	st.w	r8[0xc],r9
8001dd24:	14 9c       	mov	r12,r10
8001dd26:	fe b0 f6 e7 	rcall	8001caf4 <quat_global_to_local>
8001dd2a:	2f 8d       	sub	sp,-32
8001dd2c:	ee c8 00 2c 	sub	r8,r7,44
8001dd30:	ee c9 00 7c 	sub	r9,r7,124
8001dd34:	20 08       	sub	r8,0
8001dd36:	20 09       	sub	r9,0
8001dd38:	72 0a       	ld.w	r10,r9[0x0]
8001dd3a:	91 0a       	st.w	r8[0x0],r10
8001dd3c:	72 1a       	ld.w	r10,r9[0x4]
8001dd3e:	91 1a       	st.w	r8[0x4],r10
8001dd40:	72 2a       	ld.w	r10,r9[0x8]
8001dd42:	91 2a       	st.w	r8[0x8],r10
8001dd44:	72 39       	ld.w	r9,r9[0xc]
8001dd46:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001dd48:	30 08       	mov	r8,0
8001dd4a:	ef 48 ff f4 	st.w	r7[-12],r8
8001dd4e:	c8 08       	rjmp	8001de4e <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001dd50:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dd54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dd58:	2f f8       	sub	r8,-1
8001dd5a:	a3 68       	lsl	r8,0x2
8001dd5c:	ee 08 00 08 	add	r8,r7,r8
8001dd60:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001dd64:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dd68:	2f 79       	sub	r9,-9
8001dd6a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001dd6e:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001dd72:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dd76:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dd7a:	2f a9       	sub	r9,-6
8001dd7c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001dd80:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dd84:	f2 f9 01 74 	ld.w	r9,r9[372]
8001dd88:	12 9b       	mov	r11,r9
8001dd8a:	10 9c       	mov	r12,r8
8001dd8c:	f0 16 00 0a 	mcall	r6[40]
8001dd90:	18 98       	mov	r8,r12
8001dd92:	10 9a       	mov	r10,r8
8001dd94:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dd98:	ea c9 ff cd 	sub	r9,r5,-51
8001dd9c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001dda0:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001dda4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dda8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ddac:	2c d9       	sub	r9,-51
8001ddae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ddb2:	10 9c       	mov	r12,r8
8001ddb4:	f0 16 00 02 	mcall	r6[8]
8001ddb8:	14 92       	mov	r2,r10
8001ddba:	16 93       	mov	r3,r11
8001ddbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ddc0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ddc4:	2e 99       	sub	r9,-23
8001ddc6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ddca:	10 9c       	mov	r12,r8
8001ddcc:	f0 16 00 02 	mcall	r6[8]
8001ddd0:	e0 68 85 1f 	mov	r8,34079
8001ddd4:	ea 18 51 eb 	orh	r8,0x51eb
8001ddd8:	e0 69 9e b8 	mov	r9,40632
8001dddc:	ea 19 c0 23 	orh	r9,0xc023
8001dde0:	f0 16 00 03 	mcall	r6[12]
8001dde4:	14 98       	mov	r8,r10
8001dde6:	16 99       	mov	r9,r11
8001dde8:	04 9a       	mov	r10,r2
8001ddea:	06 9b       	mov	r11,r3
8001ddec:	f0 16 00 05 	mcall	r6[20]
8001ddf0:	14 98       	mov	r8,r10
8001ddf2:	16 99       	mov	r9,r11
8001ddf4:	10 9a       	mov	r10,r8
8001ddf6:	12 9b       	mov	r11,r9
8001ddf8:	f0 16 00 08 	mcall	r6[32]
8001ddfc:	18 9a       	mov	r10,r12
8001ddfe:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de02:	ea c9 ff be 	sub	r9,r5,-66
8001de06:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001de0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001de0e:	ee fa ff f4 	ld.w	r10,r7[-12]
8001de12:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de16:	2f 7a       	sub	r10,-9
8001de18:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001de1c:	ee fb ff f4 	ld.w	r11,r7[-12]
8001de20:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de24:	2b eb       	sub	r11,-66
8001de26:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001de2a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de2e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001de32:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001de36:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001de3a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de3e:	2f 79       	sub	r9,-9
8001de40:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001de44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001de48:	2f f8       	sub	r8,-1
8001de4a:	ef 48 ff f4 	st.w	r7[-12],r8
8001de4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001de52:	58 28       	cp.w	r8,2
8001de54:	fe 9a ff 7e 	brle	8001dd50 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001de58:	30 08       	mov	r8,0
8001de5a:	ef 48 ff d4 	st.w	r7[-44],r8
8001de5e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de62:	70 98       	ld.w	r8,r8[0x24]
8001de64:	ef 48 ff d8 	st.w	r7[-40],r8
8001de68:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de6c:	70 a8       	ld.w	r8,r8[0x28]
8001de6e:	ef 48 ff dc 	st.w	r7[-36],r8
8001de72:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de76:	70 b8       	ld.w	r8,r8[0x2c]
8001de78:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001de7c:	ee ca 00 7c 	sub	r10,r7,124
8001de80:	20 4d       	sub	sp,16
8001de82:	1a 98       	mov	r8,sp
8001de84:	ee c9 00 2c 	sub	r9,r7,44
8001de88:	20 08       	sub	r8,0
8001de8a:	20 09       	sub	r9,0
8001de8c:	72 0b       	ld.w	r11,r9[0x0]
8001de8e:	91 0b       	st.w	r8[0x0],r11
8001de90:	72 1b       	ld.w	r11,r9[0x4]
8001de92:	91 1b       	st.w	r8[0x4],r11
8001de94:	72 2b       	ld.w	r11,r9[0x8]
8001de96:	91 2b       	st.w	r8[0x8],r11
8001de98:	72 39       	ld.w	r9,r9[0xc]
8001de9a:	91 39       	st.w	r8[0xc],r9
8001de9c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dea0:	20 4d       	sub	sp,16
8001dea2:	1a 98       	mov	r8,sp
8001dea4:	2b 89       	sub	r9,-72
8001dea6:	20 08       	sub	r8,0
8001dea8:	20 09       	sub	r9,0
8001deaa:	72 0b       	ld.w	r11,r9[0x0]
8001deac:	91 0b       	st.w	r8[0x0],r11
8001deae:	72 1b       	ld.w	r11,r9[0x4]
8001deb0:	91 1b       	st.w	r8[0x4],r11
8001deb2:	72 2b       	ld.w	r11,r9[0x8]
8001deb4:	91 2b       	st.w	r8[0x8],r11
8001deb6:	72 39       	ld.w	r9,r9[0xc]
8001deb8:	91 39       	st.w	r8[0xc],r9
8001deba:	14 9c       	mov	r12,r10
8001debc:	fe b0 f6 9a 	rcall	8001cbf0 <quat_local_to_global>
8001dec0:	2f 8d       	sub	sp,-32
8001dec2:	ee c8 00 1c 	sub	r8,r7,28
8001dec6:	ee c9 00 7c 	sub	r9,r7,124
8001deca:	20 08       	sub	r8,0
8001decc:	20 09       	sub	r9,0
8001dece:	72 0a       	ld.w	r10,r9[0x0]
8001ded0:	91 0a       	st.w	r8[0x0],r10
8001ded2:	72 1a       	ld.w	r10,r9[0x4]
8001ded4:	91 1a       	st.w	r8[0x4],r10
8001ded6:	72 2a       	ld.w	r10,r9[0x8]
8001ded8:	91 2a       	st.w	r8[0x8],r10
8001deda:	72 39       	ld.w	r9,r9[0xc]
8001dedc:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001dede:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dee2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dee6:	91 c9       	st.w	r8[0x30],r9
8001dee8:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001deec:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001def0:	91 d9       	st.w	r8[0x34],r9
8001def2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001def6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001defa:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001defc:	30 08       	mov	r8,0
8001defe:	ef 48 ff f4 	st.w	r7[-12],r8
8001df02:	c2 38       	rjmp	8001df48 <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001df04:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001df08:	ee fa ff f4 	ld.w	r10,r7[-12]
8001df0c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df10:	2b ba       	sub	r10,-69
8001df12:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001df16:	ee fb ff f4 	ld.w	r11,r7[-12]
8001df1a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df1e:	2f 4b       	sub	r11,-12
8001df20:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001df24:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df28:	f0 f8 01 90 	ld.w	r8,r8[400]
8001df2c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001df30:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001df34:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df38:	2b b9       	sub	r9,-69
8001df3a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001df3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001df42:	2f f8       	sub	r8,-1
8001df44:	ef 48 ff f4 	st.w	r7[-12],r8
8001df48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001df4c:	58 28       	cp.w	r8,2
8001df4e:	fe 9a ff db 	brle	8001df04 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001df52:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df56:	70 39       	ld.w	r9,r8[0xc]
8001df58:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df5c:	f0 f8 01 14 	ld.w	r8,r8[276]
8001df60:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df64:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df68:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001df6c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001df70:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df74:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001df78:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df7c:	70 49       	ld.w	r9,r8[0x10]
8001df7e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df82:	f0 f8 01 18 	ld.w	r8,r8[280]
8001df86:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df8a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df8e:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001df92:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001df96:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001df9a:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001df9e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfa2:	70 59       	ld.w	r9,r8[0x14]
8001dfa4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001dfa8:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001dfac:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dfb0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001dfb4:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001dfb8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001dfbc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001dfc0:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001dfc4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfc8:	70 68       	ld.w	r8,r8[0x18]
8001dfca:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dfce:	f2 f9 01 74 	ld.w	r9,r9[372]
8001dfd2:	12 9b       	mov	r11,r9
8001dfd4:	10 9c       	mov	r12,r8
8001dfd6:	f0 16 00 0a 	mcall	r6[40]
8001dfda:	18 98       	mov	r8,r12
8001dfdc:	10 9c       	mov	r12,r8
8001dfde:	f0 16 00 02 	mcall	r6[8]
8001dfe2:	e0 68 85 1f 	mov	r8,34079
8001dfe6:	ea 18 51 eb 	orh	r8,0x51eb
8001dfea:	e0 69 9e b8 	mov	r9,40632
8001dfee:	ea 19 40 23 	orh	r9,0x4023
8001dff2:	f0 16 00 0c 	mcall	r6[48]
8001dff6:	14 98       	mov	r8,r10
8001dff8:	16 99       	mov	r9,r11
8001dffa:	10 92       	mov	r2,r8
8001dffc:	12 93       	mov	r3,r9
8001dffe:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e002:	f0 f8 01 20 	ld.w	r8,r8[288]
8001e006:	10 9c       	mov	r12,r8
8001e008:	f0 16 00 02 	mcall	r6[8]
8001e00c:	14 98       	mov	r8,r10
8001e00e:	16 99       	mov	r9,r11
8001e010:	04 9a       	mov	r10,r2
8001e012:	06 9b       	mov	r11,r3
8001e014:	f0 16 00 03 	mcall	r6[12]
8001e018:	14 98       	mov	r8,r10
8001e01a:	16 99       	mov	r9,r11
8001e01c:	10 92       	mov	r2,r8
8001e01e:	12 93       	mov	r3,r9
8001e020:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e024:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001e028:	10 9c       	mov	r12,r8
8001e02a:	f0 16 00 02 	mcall	r6[8]
8001e02e:	14 98       	mov	r8,r10
8001e030:	16 99       	mov	r9,r11
8001e032:	04 9a       	mov	r10,r2
8001e034:	06 9b       	mov	r11,r3
8001e036:	f0 16 00 05 	mcall	r6[20]
8001e03a:	14 98       	mov	r8,r10
8001e03c:	16 99       	mov	r9,r11
8001e03e:	10 9a       	mov	r10,r8
8001e040:	12 9b       	mov	r11,r9
8001e042:	f0 16 00 08 	mcall	r6[32]
8001e046:	18 99       	mov	r9,r12
8001e048:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e04c:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001e050:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e054:	70 78       	ld.w	r8,r8[0x1c]
8001e056:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e05a:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e05e:	12 9b       	mov	r11,r9
8001e060:	10 9c       	mov	r12,r8
8001e062:	f0 16 00 0a 	mcall	r6[40]
8001e066:	18 98       	mov	r8,r12
8001e068:	10 9c       	mov	r12,r8
8001e06a:	f0 16 00 02 	mcall	r6[8]
8001e06e:	e0 68 85 1f 	mov	r8,34079
8001e072:	ea 18 51 eb 	orh	r8,0x51eb
8001e076:	e0 69 9e b8 	mov	r9,40632
8001e07a:	ea 19 40 23 	orh	r9,0x4023
8001e07e:	f0 16 00 0c 	mcall	r6[48]
8001e082:	14 98       	mov	r8,r10
8001e084:	16 99       	mov	r9,r11
8001e086:	10 92       	mov	r2,r8
8001e088:	12 93       	mov	r3,r9
8001e08a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e08e:	f0 f8 01 24 	ld.w	r8,r8[292]
8001e092:	10 9c       	mov	r12,r8
8001e094:	f0 16 00 02 	mcall	r6[8]
8001e098:	14 98       	mov	r8,r10
8001e09a:	16 99       	mov	r9,r11
8001e09c:	04 9a       	mov	r10,r2
8001e09e:	06 9b       	mov	r11,r3
8001e0a0:	f0 16 00 03 	mcall	r6[12]
8001e0a4:	14 98       	mov	r8,r10
8001e0a6:	16 99       	mov	r9,r11
8001e0a8:	10 92       	mov	r2,r8
8001e0aa:	12 93       	mov	r3,r9
8001e0ac:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e0b0:	f0 f8 01 00 	ld.w	r8,r8[256]
8001e0b4:	10 9c       	mov	r12,r8
8001e0b6:	f0 16 00 02 	mcall	r6[8]
8001e0ba:	14 98       	mov	r8,r10
8001e0bc:	16 99       	mov	r9,r11
8001e0be:	04 9a       	mov	r10,r2
8001e0c0:	06 9b       	mov	r11,r3
8001e0c2:	f0 16 00 05 	mcall	r6[20]
8001e0c6:	14 98       	mov	r8,r10
8001e0c8:	16 99       	mov	r9,r11
8001e0ca:	10 9a       	mov	r10,r8
8001e0cc:	12 9b       	mov	r11,r9
8001e0ce:	f0 16 00 08 	mcall	r6[32]
8001e0d2:	18 99       	mov	r9,r12
8001e0d4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e0d8:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001e0dc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0e0:	70 88       	ld.w	r8,r8[0x20]
8001e0e2:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e0e6:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e0ea:	12 9b       	mov	r11,r9
8001e0ec:	10 9c       	mov	r12,r8
8001e0ee:	f0 16 00 0a 	mcall	r6[40]
8001e0f2:	18 98       	mov	r8,r12
8001e0f4:	10 9c       	mov	r12,r8
8001e0f6:	f0 16 00 02 	mcall	r6[8]
8001e0fa:	e0 68 85 1f 	mov	r8,34079
8001e0fe:	ea 18 51 eb 	orh	r8,0x51eb
8001e102:	e0 69 9e b8 	mov	r9,40632
8001e106:	ea 19 40 23 	orh	r9,0x4023
8001e10a:	f0 16 00 0c 	mcall	r6[48]
8001e10e:	14 98       	mov	r8,r10
8001e110:	16 99       	mov	r9,r11
8001e112:	10 92       	mov	r2,r8
8001e114:	12 93       	mov	r3,r9
8001e116:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e11a:	f0 f8 01 28 	ld.w	r8,r8[296]
8001e11e:	10 9c       	mov	r12,r8
8001e120:	f0 16 00 02 	mcall	r6[8]
8001e124:	14 98       	mov	r8,r10
8001e126:	16 99       	mov	r9,r11
8001e128:	04 9a       	mov	r10,r2
8001e12a:	06 9b       	mov	r11,r3
8001e12c:	f0 16 00 03 	mcall	r6[12]
8001e130:	14 98       	mov	r8,r10
8001e132:	16 99       	mov	r9,r11
8001e134:	10 92       	mov	r2,r8
8001e136:	12 93       	mov	r3,r9
8001e138:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e13c:	f0 f8 01 04 	ld.w	r8,r8[260]
8001e140:	10 9c       	mov	r12,r8
8001e142:	f0 16 00 02 	mcall	r6[8]
8001e146:	14 98       	mov	r8,r10
8001e148:	16 99       	mov	r9,r11
8001e14a:	04 9a       	mov	r10,r2
8001e14c:	06 9b       	mov	r11,r3
8001e14e:	f0 16 00 05 	mcall	r6[20]
8001e152:	14 98       	mov	r8,r10
8001e154:	16 99       	mov	r9,r11
8001e156:	10 9a       	mov	r10,r8
8001e158:	12 9b       	mov	r11,r9
8001e15a:	f0 16 00 08 	mcall	r6[32]
8001e15e:	18 99       	mov	r9,r12
8001e160:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e164:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001e168:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e16c:	71 b9       	ld.w	r9,r8[0x6c]
8001e16e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e172:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001e176:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e17a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e17e:	f0 f8 01 08 	ld.w	r8,r8[264]
8001e182:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e186:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e18a:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001e18e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e192:	71 c9       	ld.w	r9,r8[0x70]
8001e194:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e198:	f0 f8 01 30 	ld.w	r8,r8[304]
8001e19c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e1a0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e1a4:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001e1a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e1ac:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e1b0:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001e1b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e1b8:	71 d9       	ld.w	r9,r8[0x74]
8001e1ba:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e1be:	f0 f8 01 34 	ld.w	r8,r8[308]
8001e1c2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e1c6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e1ca:	f0 f8 01 10 	ld.w	r8,r8[272]
8001e1ce:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e1d2:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e1d6:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001e1da:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e1de:	20 4d       	sub	sp,16
8001e1e0:	1a 98       	mov	r8,sp
8001e1e2:	2b 89       	sub	r9,-72
8001e1e4:	20 08       	sub	r8,0
8001e1e6:	20 09       	sub	r9,0
8001e1e8:	72 0a       	ld.w	r10,r9[0x0]
8001e1ea:	91 0a       	st.w	r8[0x0],r10
8001e1ec:	72 1a       	ld.w	r10,r9[0x4]
8001e1ee:	91 1a       	st.w	r8[0x4],r10
8001e1f0:	72 2a       	ld.w	r10,r9[0x8]
8001e1f2:	91 2a       	st.w	r8[0x8],r10
8001e1f4:	72 39       	ld.w	r9,r9[0xc]
8001e1f6:	91 39       	st.w	r8[0xc],r9
8001e1f8:	f0 16 01 12 	mcall	r6[1096]
8001e1fc:	2f cd       	sub	sp,-16
8001e1fe:	18 99       	mov	r9,r12
8001e200:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e204:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001e208:	2e 1d       	sub	sp,-124
8001e20a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001e20e:	00 00       	add	r0,r0
8001e210:	80 01       	ld.sh	r1,r0[0x0]
8001e212:	d5 1e       	*unknown*

8001e214 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001e214:	eb cd 40 c0 	pushm	r6-r7,lr
8001e218:	1a 97       	mov	r7,sp
8001e21a:	20 2d       	sub	sp,8
8001e21c:	49 36       	lddpc	r6,8001e268 <simulate_barometer+0x54>
8001e21e:	1e 26       	rsub	r6,pc
8001e220:	ef 4c ff fc 	st.w	r7[-4],r12
8001e224:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001e228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e22c:	f0 f9 01 34 	ld.w	r9,r8[308]
8001e230:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e234:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e238:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001e23c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e240:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001e242:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e246:	70 e9       	ld.w	r9,r8[0x38]
8001e248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e24c:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001e24e:	f0 16 00 0f 	mcall	r6[60]
8001e252:	18 99       	mov	r9,r12
8001e254:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e258:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001e25a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e25e:	30 09       	mov	r9,0
8001e260:	91 89       	st.w	r8[0x20],r9
		
	}
8001e262:	2f ed       	sub	sp,-8
8001e264:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e268:	80 01       	ld.sh	r1,r0[0x0]
8001e26a:	e0 a2       	*unknown*

8001e26c <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001e26c:	eb cd 40 c0 	pushm	r6-r7,lr
8001e270:	1a 97       	mov	r7,sp
8001e272:	20 9d       	sub	sp,36
8001e274:	4a b6       	lddpc	r6,8001e320 <simulate_gps+0xb4>
8001e276:	1e 26       	rsub	r6,pc
8001e278:	ef 4c ff e0 	st.w	r7[-32],r12
8001e27c:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001e280:	ee cc 00 1c 	sub	r12,r7,28
8001e284:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001e288:	20 cd       	sub	sp,48
8001e28a:	1a 99       	mov	r9,sp
8001e28c:	12 9b       	mov	r11,r9
8001e28e:	f0 ca fe ec 	sub	r10,r8,-276
8001e292:	f6 c8 00 00 	sub	r8,r11,0
8001e296:	f4 c9 00 00 	sub	r9,r10,0
8001e29a:	72 0e       	ld.w	lr,r9[0x0]
8001e29c:	91 0e       	st.w	r8[0x0],lr
8001e29e:	72 1e       	ld.w	lr,r9[0x4]
8001e2a0:	91 1e       	st.w	r8[0x4],lr
8001e2a2:	72 2e       	ld.w	lr,r9[0x8]
8001e2a4:	91 2e       	st.w	r8[0x8],lr
8001e2a6:	72 39       	ld.w	r9,r9[0xc]
8001e2a8:	91 39       	st.w	r8[0xc],r9
8001e2aa:	f6 c8 ff f0 	sub	r8,r11,-16
8001e2ae:	f4 c9 ff f0 	sub	r9,r10,-16
8001e2b2:	72 0e       	ld.w	lr,r9[0x0]
8001e2b4:	91 0e       	st.w	r8[0x0],lr
8001e2b6:	72 1e       	ld.w	lr,r9[0x4]
8001e2b8:	91 1e       	st.w	r8[0x4],lr
8001e2ba:	72 2e       	ld.w	lr,r9[0x8]
8001e2bc:	91 2e       	st.w	r8[0x8],lr
8001e2be:	72 39       	ld.w	r9,r9[0xc]
8001e2c0:	91 39       	st.w	r8[0xc],r9
8001e2c2:	f6 c8 ff e0 	sub	r8,r11,-32
8001e2c6:	f4 c9 ff e0 	sub	r9,r10,-32
8001e2ca:	72 0a       	ld.w	r10,r9[0x0]
8001e2cc:	91 0a       	st.w	r8[0x0],r10
8001e2ce:	72 1a       	ld.w	r10,r9[0x4]
8001e2d0:	91 1a       	st.w	r8[0x4],r10
8001e2d2:	72 2a       	ld.w	r10,r9[0x8]
8001e2d4:	91 2a       	st.w	r8[0x8],r10
8001e2d6:	72 39       	ld.w	r9,r9[0xc]
8001e2d8:	91 39       	st.w	r8[0xc],r9
8001e2da:	f0 16 00 88 	mcall	r6[544]
8001e2de:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001e2e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e2e4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001e2e8:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001e2ea:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001e2ee:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e2f2:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001e2f6:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001e2fa:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e2fe:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001e302:	f0 16 00 0f 	mcall	r6[60]
8001e306:	18 99       	mov	r9,r12
8001e308:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001e30c:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001e310:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001e314:	30 28       	mov	r8,2
8001e316:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001e31a:	2f 7d       	sub	sp,-36
8001e31c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e320:	80 01       	ld.sh	r1,r0[0x0]
8001e322:	e0 fa eb cd 	ld.w	r10,r0[-5171]

8001e324 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001e324:	eb cd 40 80 	pushm	r7,lr
8001e328:	1a 97       	mov	r7,sp
8001e32a:	20 3d       	sub	sp,12
8001e32c:	18 98       	mov	r8,r12
8001e32e:	ef 4b ff f4 	st.w	r7[-12],r11
8001e332:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001e336:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e33a:	90 08       	ld.sh	r8,r8[0x0]
8001e33c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001e340:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001e344:	f3 e8 20 08 	eor	r8,r9,r8
8001e348:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001e34c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001e350:	a5 68       	lsl	r8,0x4
8001e352:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001e356:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001e35a:	f3 e8 20 08 	eor	r8,r9,r8
8001e35e:	5c 58       	castu.b	r8
8001e360:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001e364:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e368:	90 08       	ld.sh	r8,r8[0x0]
8001e36a:	5c 78       	castu.h	r8
8001e36c:	a9 88       	lsr	r8,0x8
8001e36e:	5c 88       	casts.h	r8
8001e370:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001e374:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001e378:	a9 68       	lsl	r8,0x8
8001e37a:	5c 88       	casts.h	r8
8001e37c:	f3 e8 20 08 	eor	r8,r9,r8
8001e380:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001e384:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001e388:	a3 78       	lsl	r8,0x3
8001e38a:	5c 88       	casts.h	r8
8001e38c:	f3 e8 20 08 	eor	r8,r9,r8
8001e390:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001e394:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001e398:	a5 88       	lsr	r8,0x4
8001e39a:	5c 58       	castu.b	r8
8001e39c:	f3 e8 20 08 	eor	r8,r9,r8
8001e3a0:	5c 88       	casts.h	r8
8001e3a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e3a6:	b2 08       	st.h	r9[0x0],r8
}
8001e3a8:	2f dd       	sub	sp,-12
8001e3aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e3ae <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001e3ae:	eb cd 40 80 	pushm	r7,lr
8001e3b2:	1a 97       	mov	r7,sp
8001e3b4:	20 1d       	sub	sp,4
8001e3b6:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001e3ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e3be:	3f f8       	mov	r8,-1
8001e3c0:	b2 08       	st.h	r9[0x0],r8
}
8001e3c2:	2f fd       	sub	sp,-4
8001e3c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e3c8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001e3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001e3cc:	1a 97       	mov	r7,sp
8001e3ce:	20 3d       	sub	sp,12
8001e3d0:	49 76       	lddpc	r6,8001e42c <crc_calculate+0x64>
8001e3d2:	1e 26       	rsub	r6,pc
8001e3d4:	ef 4c ff f8 	st.w	r7[-8],r12
8001e3d8:	16 98       	mov	r8,r11
8001e3da:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001e3de:	ee c8 00 02 	sub	r8,r7,2
8001e3e2:	10 9c       	mov	r12,r8
8001e3e4:	ce 5f       	rcall	8001e3ae <crc_init>
	while (length--) {
8001e3e6:	c0 e8       	rjmp	8001e402 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001e3e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3ec:	11 88       	ld.ub	r8,r8[0x0]
8001e3ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001e3f2:	2f f9       	sub	r9,-1
8001e3f4:	ef 49 ff f8 	st.w	r7[-8],r9
8001e3f8:	ee c9 00 02 	sub	r9,r7,2
8001e3fc:	12 9b       	mov	r11,r9
8001e3fe:	10 9c       	mov	r12,r8
8001e400:	c9 2f       	rcall	8001e324 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001e402:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001e406:	30 08       	mov	r8,0
8001e408:	f0 09 19 00 	cp.h	r9,r8
8001e40c:	5f 18       	srne	r8
8001e40e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001e412:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001e416:	20 18       	sub	r8,1
8001e418:	ef 58 ff f4 	st.h	r7[-12],r8
8001e41c:	58 09       	cp.w	r9,0
8001e41e:	ce 51       	brne	8001e3e8 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001e420:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001e424:	10 9c       	mov	r12,r8
8001e426:	2f dd       	sub	sp,-12
8001e428:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e42c:	80 01       	ld.sh	r1,r0[0x0]
8001e42e:	e2 56 eb cd 	cp.w	r6,256973

8001e430 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001e430:	eb cd 40 c0 	pushm	r6-r7,lr
8001e434:	1a 97       	mov	r7,sp
8001e436:	20 4d       	sub	sp,16
8001e438:	49 66       	lddpc	r6,8001e490 <crc_accumulate_buffer+0x60>
8001e43a:	1e 26       	rsub	r6,pc
8001e43c:	ef 4c ff f8 	st.w	r7[-8],r12
8001e440:	ef 4b ff f4 	st.w	r7[-12],r11
8001e444:	14 98       	mov	r8,r10
8001e446:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001e44a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e44e:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001e452:	c0 d8       	rjmp	8001e46c <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001e454:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e458:	11 88       	ld.ub	r8,r8[0x0]
8001e45a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e45e:	2f f9       	sub	r9,-1
8001e460:	ef 49 ff fc 	st.w	r7[-4],r9
8001e464:	ee fb ff f8 	ld.w	r11,r7[-8]
8001e468:	10 9c       	mov	r12,r8
8001e46a:	c5 df       	rcall	8001e324 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001e46c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001e470:	30 08       	mov	r8,0
8001e472:	f0 09 18 00 	cp.b	r9,r8
8001e476:	5f 18       	srne	r8
8001e478:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001e47c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001e480:	20 18       	sub	r8,1
8001e482:	ef 68 ff f0 	st.b	r7[-16],r8
8001e486:	58 09       	cp.w	r9,0
8001e488:	ce 61       	brne	8001e454 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001e48a:	2f cd       	sub	sp,-16
8001e48c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e490:	80 01       	ld.sh	r1,r0[0x0]
8001e492:	e2 be       	*unknown*

8001e494 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001e494:	eb cd 40 c0 	pushm	r6-r7,lr
8001e498:	1a 97       	mov	r7,sp
8001e49a:	20 1d       	sub	sp,4
8001e49c:	48 96       	lddpc	r6,8001e4c0 <mavlink_get_channel_status+0x2c>
8001e49e:	1e 26       	rsub	r6,pc
8001e4a0:	18 98       	mov	r8,r12
8001e4a2:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001e4a6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001e4aa:	f0 09 15 04 	lsl	r9,r8,0x4
8001e4ae:	ec f8 08 9c 	ld.w	r8,r6[2204]
8001e4b2:	f2 08 00 08 	add	r8,r9,r8
}
8001e4b6:	10 9c       	mov	r12,r8
8001e4b8:	2f fd       	sub	sp,-4
8001e4ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e4be:	00 00       	add	r0,r0
8001e4c0:	80 01       	ld.sh	r1,r0[0x0]
8001e4c2:	e3 22 eb cd 	ld.sb	r2,r1[-5171]

8001e4c4 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001e4c4:	eb cd 40 c0 	pushm	r6-r7,lr
8001e4c8:	1a 97       	mov	r7,sp
8001e4ca:	20 9d       	sub	sp,36
8001e4cc:	4b d6       	lddpc	r6,8001e5c0 <_mav_finalize_message_chan_send+0xfc>
8001e4ce:	1e 26       	rsub	r6,pc
8001e4d0:	ef 4c ff ec 	st.w	r7[-20],r12
8001e4d4:	ef 4a ff e4 	st.w	r7[-28],r10
8001e4d8:	16 9a       	mov	r10,r11
8001e4da:	ef 6a ff e8 	st.b	r7[-24],r10
8001e4de:	ef 69 ff e0 	st.b	r7[-32],r9
8001e4e2:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001e4e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e4ea:	5c 58       	castu.b	r8
8001e4ec:	10 9c       	mov	r12,r8
8001e4ee:	cd 3f       	rcall	8001e494 <mavlink_get_channel_status>
8001e4f0:	18 98       	mov	r8,r12
8001e4f2:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001e4f6:	3f e8       	mov	r8,-2
8001e4f8:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001e4fc:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001e500:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001e504:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e508:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001e50c:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001e510:	ec f8 00 70 	ld.w	r8,r6[112]
8001e514:	11 88       	ld.ub	r8,r8[0x0]
8001e516:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001e51a:	ec f8 00 70 	ld.w	r8,r6[112]
8001e51e:	11 98       	ld.ub	r8,r8[0x1]
8001e520:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001e524:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001e528:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001e52c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e530:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001e534:	2f f8       	sub	r8,-1
8001e536:	5c 58       	castu.b	r8
8001e538:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e53c:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001e540:	ee c8 00 0c 	sub	r8,r7,12
8001e544:	2f f8       	sub	r8,-1
8001e546:	30 5b       	mov	r11,5
8001e548:	10 9c       	mov	r12,r8
8001e54a:	c3 ff       	rcall	8001e3c8 <crc_calculate>
8001e54c:	18 98       	mov	r8,r12
8001e54e:	5c 88       	casts.h	r8
8001e550:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001e554:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001e558:	ee c8 00 06 	sub	r8,r7,6
8001e55c:	12 9a       	mov	r10,r9
8001e55e:	ee fb ff e4 	ld.w	r11,r7[-28]
8001e562:	10 9c       	mov	r12,r8
8001e564:	c6 6f       	rcall	8001e430 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001e566:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001e56a:	ee c9 00 06 	sub	r9,r7,6
8001e56e:	12 9b       	mov	r11,r9
8001e570:	10 9c       	mov	r12,r8
8001e572:	cd 9e       	rcall	8001e324 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001e574:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001e578:	5c 58       	castu.b	r8
8001e57a:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001e57e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001e582:	5c 78       	castu.h	r8
8001e584:	a9 88       	lsr	r8,0x8
8001e586:	5c 88       	casts.h	r8
8001e588:	5c 58       	castu.b	r8
8001e58a:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001e58e:	ee c8 00 0c 	sub	r8,r7,12
8001e592:	30 6a       	mov	r10,6
8001e594:	10 9b       	mov	r11,r8
8001e596:	ee fc ff ec 	ld.w	r12,r7[-20]
8001e59a:	c1 5c       	rcall	8001e5c4 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001e59c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001e5a0:	10 9a       	mov	r10,r8
8001e5a2:	ee fb ff e4 	ld.w	r11,r7[-28]
8001e5a6:	ee fc ff ec 	ld.w	r12,r7[-20]
8001e5aa:	c0 dc       	rcall	8001e5c4 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001e5ac:	ee c8 00 10 	sub	r8,r7,16
8001e5b0:	30 2a       	mov	r10,2
8001e5b2:	10 9b       	mov	r11,r8
8001e5b4:	ee fc ff ec 	ld.w	r12,r7[-20]
8001e5b8:	c0 6c       	rcall	8001e5c4 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001e5ba:	2f 7d       	sub	sp,-36
8001e5bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e5c0:	80 01       	ld.sh	r1,r0[0x0]
8001e5c2:	e3 52 eb cd 	st.h	r1[-5171],r2

8001e5c4 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001e5c4:	eb cd 40 c0 	pushm	r6-r7,lr
8001e5c8:	1a 97       	mov	r7,sp
8001e5ca:	20 4d       	sub	sp,16
8001e5cc:	49 46       	lddpc	r6,8001e61c <_mavlink_send_uart+0x58>
8001e5ce:	1e 26       	rsub	r6,pc
8001e5d0:	ef 4c ff f8 	st.w	r7[-8],r12
8001e5d4:	ef 4b ff f4 	st.w	r7[-12],r11
8001e5d8:	14 98       	mov	r8,r10
8001e5da:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001e5de:	30 08       	mov	r8,0
8001e5e0:	ef 58 ff fe 	st.h	r7[-2],r8
8001e5e4:	c1 28       	rjmp	8001e608 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001e5e6:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001e5ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e5ee:	f2 08 00 08 	add	r8,r9,r8
8001e5f2:	11 88       	ld.ub	r8,r8[0x0]
8001e5f4:	10 9b       	mov	r11,r8
8001e5f6:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e5fa:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001e5fe:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001e602:	2f f8       	sub	r8,-1
8001e604:	ef 58 ff fe 	st.h	r7[-2],r8
8001e608:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001e60c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001e610:	f0 09 19 00 	cp.h	r9,r8
8001e614:	ce 93       	brcs	8001e5e6 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001e616:	2f cd       	sub	sp,-16
8001e618:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e61c:	80 01       	ld.sh	r1,r0[0x0]
8001e61e:	e4 52 eb cd 	cp.w	r2,388045

8001e620 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001e620:	eb cd 40 80 	pushm	r7,lr
8001e624:	1a 97       	mov	r7,sp
8001e626:	20 2d       	sub	sp,8
8001e628:	ef 4c ff fc 	st.w	r7[-4],r12
8001e62c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001e630:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e634:	2f f8       	sub	r8,-1
8001e636:	11 88       	ld.ub	r8,r8[0x0]
8001e638:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e63c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001e63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e642:	f0 c9 ff ff 	sub	r9,r8,-1
8001e646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e64a:	11 88       	ld.ub	r8,r8[0x0]
8001e64c:	b2 88       	st.b	r9[0x0],r8
}
8001e64e:	2f ed       	sub	sp,-8
8001e650:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e654 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001e654:	eb cd 40 80 	pushm	r7,lr
8001e658:	1a 97       	mov	r7,sp
8001e65a:	20 2d       	sub	sp,8
8001e65c:	ef 4c ff fc 	st.w	r7[-4],r12
8001e660:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001e664:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e668:	2f d8       	sub	r8,-3
8001e66a:	11 88       	ld.ub	r8,r8[0x0]
8001e66c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e670:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001e672:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e676:	f0 c9 ff ff 	sub	r9,r8,-1
8001e67a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e67e:	2f e8       	sub	r8,-2
8001e680:	11 88       	ld.ub	r8,r8[0x0]
8001e682:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001e684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e688:	f0 c9 ff fe 	sub	r9,r8,-2
8001e68c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e690:	2f f8       	sub	r8,-1
8001e692:	11 88       	ld.ub	r8,r8[0x0]
8001e694:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001e696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e69a:	f0 c9 ff fd 	sub	r9,r8,-3
8001e69e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e6a2:	11 88       	ld.ub	r8,r8[0x0]
8001e6a4:	b2 88       	st.b	r9[0x0],r8
}
8001e6a6:	2f ed       	sub	sp,-8
8001e6a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e6ac <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001e6ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001e6b0:	1a 97       	mov	r7,sp
8001e6b2:	20 3d       	sub	sp,12
8001e6b4:	49 06       	lddpc	r6,8001e6f4 <mav_array_memcpy+0x48>
8001e6b6:	1e 26       	rsub	r6,pc
8001e6b8:	ef 4c ff fc 	st.w	r7[-4],r12
8001e6bc:	ef 4b ff f8 	st.w	r7[-8],r11
8001e6c0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001e6c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e6c8:	58 08       	cp.w	r8,0
8001e6ca:	c0 91       	brne	8001e6dc <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001e6cc:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e6d0:	30 0b       	mov	r11,0
8001e6d2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e6d6:	f0 16 00 30 	mcall	r6[192]
8001e6da:	c0 98       	rjmp	8001e6ec <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001e6dc:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e6e0:	ee fb ff f8 	ld.w	r11,r7[-8]
8001e6e4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e6e8:	f0 16 00 21 	mcall	r6[132]
	}
}
8001e6ec:	2f dd       	sub	sp,-12
8001e6ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e6f2:	00 00       	add	r0,r0
8001e6f4:	80 01       	ld.sh	r1,r0[0x0]
8001e6f6:	e5 3a eb cd 	ld.ub	r10,r2[-5171]

8001e6f8 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001e6f8:	eb cd 40 c0 	pushm	r6-r7,lr
8001e6fc:	1a 97       	mov	r7,sp
8001e6fe:	20 3d       	sub	sp,12
8001e700:	48 d6       	lddpc	r6,8001e734 <_MAV_RETURN_uint16_t+0x3c>
8001e702:	1e 26       	rsub	r6,pc
8001e704:	ef 4c ff f8 	st.w	r7[-8],r12
8001e708:	16 98       	mov	r8,r11
8001e70a:	ef 68 ff f4 	st.b	r7[-12],r8
8001e70e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e712:	2f 88       	sub	r8,-8
8001e714:	10 99       	mov	r9,r8
8001e716:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001e71a:	10 09       	add	r9,r8
8001e71c:	ee c8 00 02 	sub	r8,r7,2
8001e720:	12 9b       	mov	r11,r9
8001e722:	10 9c       	mov	r12,r8
8001e724:	c7 ef       	rcall	8001e620 <byte_swap_2>
8001e726:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001e72a:	10 9c       	mov	r12,r8
8001e72c:	2f dd       	sub	sp,-12
8001e72e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e732:	00 00       	add	r0,r0
8001e734:	80 01       	ld.sh	r1,r0[0x0]
8001e736:	e5 86       	*unknown*

8001e738 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001e738:	eb cd 40 c0 	pushm	r6-r7,lr
8001e73c:	1a 97       	mov	r7,sp
8001e73e:	20 3d       	sub	sp,12
8001e740:	48 d6       	lddpc	r6,8001e774 <_MAV_RETURN_uint32_t+0x3c>
8001e742:	1e 26       	rsub	r6,pc
8001e744:	ef 4c ff f8 	st.w	r7[-8],r12
8001e748:	16 98       	mov	r8,r11
8001e74a:	ef 68 ff f4 	st.b	r7[-12],r8
8001e74e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e752:	2f 88       	sub	r8,-8
8001e754:	10 99       	mov	r9,r8
8001e756:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001e75a:	10 09       	add	r9,r8
8001e75c:	ee c8 00 04 	sub	r8,r7,4
8001e760:	12 9b       	mov	r11,r9
8001e762:	10 9c       	mov	r12,r8
8001e764:	c7 8f       	rcall	8001e654 <byte_swap_4>
8001e766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e76a:	10 9c       	mov	r12,r8
8001e76c:	2f dd       	sub	sp,-12
8001e76e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e772:	00 00       	add	r0,r0
8001e774:	80 01       	ld.sh	r1,r0[0x0]
8001e776:	e5 c6 eb cd 	ldmts	r6,r0,r2-r3,r6-r9,r11,sp-pc

8001e778 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001e778:	eb cd 40 c0 	pushm	r6-r7,lr
8001e77c:	1a 97       	mov	r7,sp
8001e77e:	20 3d       	sub	sp,12
8001e780:	48 d6       	lddpc	r6,8001e7b4 <_MAV_RETURN_float+0x3c>
8001e782:	1e 26       	rsub	r6,pc
8001e784:	ef 4c ff f8 	st.w	r7[-8],r12
8001e788:	16 98       	mov	r8,r11
8001e78a:	ef 68 ff f4 	st.b	r7[-12],r8
8001e78e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e792:	2f 88       	sub	r8,-8
8001e794:	10 99       	mov	r9,r8
8001e796:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001e79a:	10 09       	add	r9,r8
8001e79c:	ee c8 00 04 	sub	r8,r7,4
8001e7a0:	12 9b       	mov	r11,r9
8001e7a2:	10 9c       	mov	r12,r8
8001e7a4:	c5 8f       	rcall	8001e654 <byte_swap_4>
8001e7a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e7aa:	10 9c       	mov	r12,r8
8001e7ac:	2f dd       	sub	sp,-12
8001e7ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e7b2:	00 00       	add	r0,r0
8001e7b4:	80 01       	ld.sh	r1,r0[0x0]
8001e7b6:	e6 06       	*unknown*

8001e7b8 <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001e7b8:	eb cd 40 80 	pushm	r7,lr
8001e7bc:	1a 97       	mov	r7,sp
8001e7be:	20 1d       	sub	sp,4
8001e7c0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001e7c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e7c8:	2f 88       	sub	r8,-8
8001e7ca:	2f c8       	sub	r8,-4
8001e7cc:	11 88       	ld.ub	r8,r8[0x0]
}
8001e7ce:	10 9c       	mov	r12,r8
8001e7d0:	2f fd       	sub	sp,-4
8001e7d2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e7d6 <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001e7d6:	eb cd 40 80 	pushm	r7,lr
8001e7da:	1a 97       	mov	r7,sp
8001e7dc:	20 1d       	sub	sp,4
8001e7de:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001e7e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e7e6:	2f 88       	sub	r8,-8
8001e7e8:	2f b8       	sub	r8,-5
8001e7ea:	11 88       	ld.ub	r8,r8[0x0]
}
8001e7ec:	10 9c       	mov	r12,r8
8001e7ee:	2f fd       	sub	sp,-4
8001e7f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e7f4 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001e7f4:	eb cd 40 c0 	pushm	r6-r7,lr
8001e7f8:	1a 97       	mov	r7,sp
8001e7fa:	20 1d       	sub	sp,4
8001e7fc:	48 76       	lddpc	r6,8001e818 <mavlink_msg_set_mode_get_custom_mode+0x24>
8001e7fe:	1e 26       	rsub	r6,pc
8001e800:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001e804:	30 0b       	mov	r11,0
8001e806:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e80a:	c9 7f       	rcall	8001e738 <_MAV_RETURN_uint32_t>
8001e80c:	18 98       	mov	r8,r12
}
8001e80e:	10 9c       	mov	r12,r8
8001e810:	2f fd       	sub	sp,-4
8001e812:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e816:	00 00       	add	r0,r0
8001e818:	80 01       	ld.sh	r1,r0[0x0]
8001e81a:	e6 82 eb cd 	brhs	800fbfb4 <_data_lma+0xcab6c>

8001e81c <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001e81c:	eb cd 40 c0 	pushm	r6-r7,lr
8001e820:	1a 97       	mov	r7,sp
8001e822:	20 2d       	sub	sp,8
8001e824:	48 f6       	lddpc	r6,8001e860 <mavlink_msg_set_mode_decode+0x44>
8001e826:	1e 26       	rsub	r6,pc
8001e828:	ef 4c ff fc 	st.w	r7[-4],r12
8001e82c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001e830:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e834:	ce 0f       	rcall	8001e7f4 <mavlink_msg_set_mode_get_custom_mode>
8001e836:	18 99       	mov	r9,r12
8001e838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e83c:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001e83e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e842:	cb bf       	rcall	8001e7b8 <mavlink_msg_set_mode_get_target_system>
8001e844:	18 98       	mov	r8,r12
8001e846:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001e84a:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001e84c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e850:	cc 3f       	rcall	8001e7d6 <mavlink_msg_set_mode_get_base_mode>
8001e852:	18 98       	mov	r8,r12
8001e854:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001e858:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001e85a:	2f ed       	sub	sp,-8
8001e85c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e860:	80 01       	ld.sh	r1,r0[0x0]
8001e862:	e6 aa       	*unknown*

8001e864 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001e864:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001e868:	1a 97       	mov	r7,sp
8001e86a:	21 2d       	sub	sp,72
8001e86c:	4c 26       	lddpc	r6,8001e974 <mavlink_msg_mission_item_send+0x110>
8001e86e:	1e 26       	rsub	r6,pc
8001e870:	ee c5 ff ec 	sub	r5,r7,-20
8001e874:	ef 4c ff d4 	st.w	r7[-44],r12
8001e878:	16 93       	mov	r3,r11
8001e87a:	14 9e       	mov	lr,r10
8001e87c:	12 9c       	mov	r12,r9
8001e87e:	10 9b       	mov	r11,r8
8001e880:	6a 0a       	ld.w	r10,r5[0x0]
8001e882:	6a 19       	ld.w	r9,r5[0x4]
8001e884:	6a 28       	ld.w	r8,r5[0x8]
8001e886:	ef 63 ff d0 	st.b	r7[-48],r3
8001e88a:	ef 6e ff cc 	st.b	r7[-52],lr
8001e88e:	ef 5c ff c8 	st.h	r7[-56],r12
8001e892:	ef 6b ff c4 	st.b	r7[-60],r11
8001e896:	ef 5a ff c0 	st.h	r7[-64],r10
8001e89a:	ef 69 ff bc 	st.b	r7[-68],r9
8001e89e:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001e8a2:	ea c9 ff f4 	sub	r9,r5,-12
8001e8a6:	ee c8 00 28 	sub	r8,r7,40
8001e8aa:	12 9b       	mov	r11,r9
8001e8ac:	10 9c       	mov	r12,r8
8001e8ae:	cd 3e       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001e8b0:	ea c9 ff f0 	sub	r9,r5,-16
8001e8b4:	ee c8 00 28 	sub	r8,r7,40
8001e8b8:	2f c8       	sub	r8,-4
8001e8ba:	12 9b       	mov	r11,r9
8001e8bc:	10 9c       	mov	r12,r8
8001e8be:	cc be       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001e8c0:	ea c9 ff ec 	sub	r9,r5,-20
8001e8c4:	ee c8 00 28 	sub	r8,r7,40
8001e8c8:	2f 88       	sub	r8,-8
8001e8ca:	12 9b       	mov	r11,r9
8001e8cc:	10 9c       	mov	r12,r8
8001e8ce:	cc 3e       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001e8d0:	ea c9 ff e8 	sub	r9,r5,-24
8001e8d4:	ee c8 00 28 	sub	r8,r7,40
8001e8d8:	2f 48       	sub	r8,-12
8001e8da:	12 9b       	mov	r11,r9
8001e8dc:	10 9c       	mov	r12,r8
8001e8de:	cb be       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001e8e0:	ea c9 ff e4 	sub	r9,r5,-28
8001e8e4:	ee c8 00 28 	sub	r8,r7,40
8001e8e8:	2f 08       	sub	r8,-16
8001e8ea:	12 9b       	mov	r11,r9
8001e8ec:	10 9c       	mov	r12,r8
8001e8ee:	cb 3e       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001e8f0:	ea c9 ff e0 	sub	r9,r5,-32
8001e8f4:	ee c8 00 28 	sub	r8,r7,40
8001e8f8:	2e c8       	sub	r8,-20
8001e8fa:	12 9b       	mov	r11,r9
8001e8fc:	10 9c       	mov	r12,r8
8001e8fe:	ca be       	rcall	8001e654 <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001e900:	ea c9 ff dc 	sub	r9,r5,-36
8001e904:	ee c8 00 28 	sub	r8,r7,40
8001e908:	2e 88       	sub	r8,-24
8001e90a:	12 9b       	mov	r11,r9
8001e90c:	10 9c       	mov	r12,r8
8001e90e:	ca 3e       	rcall	8001e654 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001e910:	ee c9 00 38 	sub	r9,r7,56
8001e914:	ee c8 00 28 	sub	r8,r7,40
8001e918:	2e 48       	sub	r8,-28
8001e91a:	12 9b       	mov	r11,r9
8001e91c:	10 9c       	mov	r12,r8
8001e91e:	c8 1e       	rcall	8001e620 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001e920:	ee c9 00 40 	sub	r9,r7,64
8001e924:	ee c8 00 28 	sub	r8,r7,40
8001e928:	2e 28       	sub	r8,-30
8001e92a:	12 9b       	mov	r11,r9
8001e92c:	10 9c       	mov	r12,r8
8001e92e:	c7 9e       	rcall	8001e620 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001e930:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001e934:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001e938:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001e93c:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001e940:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001e944:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001e948:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001e94c:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001e950:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001e954:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001e958:	ee ca 00 28 	sub	r10,r7,40
8001e95c:	e0 68 00 fe 	mov	r8,254
8001e960:	32 59       	mov	r9,37
8001e962:	32 7b       	mov	r11,39
8001e964:	ee fc ff d4 	ld.w	r12,r7[-44]
8001e968:	fe b0 fd ae 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001e96c:	2e ed       	sub	sp,-72
8001e96e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001e972:	00 00       	add	r0,r0
8001e974:	80 01       	ld.sh	r1,r0[0x0]
8001e976:	e6 f2 eb cd 	ld.w	r2,r3[-5171]

8001e978 <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001e978:	eb cd 40 80 	pushm	r7,lr
8001e97c:	1a 97       	mov	r7,sp
8001e97e:	20 1d       	sub	sp,4
8001e980:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001e984:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e988:	2f 88       	sub	r8,-8
8001e98a:	2e 08       	sub	r8,-32
8001e98c:	11 88       	ld.ub	r8,r8[0x0]
}
8001e98e:	10 9c       	mov	r12,r8
8001e990:	2f fd       	sub	sp,-4
8001e992:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e996 <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001e996:	eb cd 40 80 	pushm	r7,lr
8001e99a:	1a 97       	mov	r7,sp
8001e99c:	20 1d       	sub	sp,4
8001e99e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001e9a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e9a6:	2f 88       	sub	r8,-8
8001e9a8:	2d f8       	sub	r8,-33
8001e9aa:	11 88       	ld.ub	r8,r8[0x0]
}
8001e9ac:	10 9c       	mov	r12,r8
8001e9ae:	2f fd       	sub	sp,-4
8001e9b0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e9b4 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001e9b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001e9b8:	1a 97       	mov	r7,sp
8001e9ba:	20 1d       	sub	sp,4
8001e9bc:	48 86       	lddpc	r6,8001e9dc <mavlink_msg_mission_item_get_seq+0x28>
8001e9be:	1e 26       	rsub	r6,pc
8001e9c0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001e9c4:	31 cb       	mov	r11,28
8001e9c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001e9ca:	c9 7e       	rcall	8001e6f8 <_MAV_RETURN_uint16_t>
8001e9cc:	18 98       	mov	r8,r12
8001e9ce:	5c 88       	casts.h	r8
8001e9d0:	5c 88       	casts.h	r8
}
8001e9d2:	10 9c       	mov	r12,r8
8001e9d4:	2f fd       	sub	sp,-4
8001e9d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e9da:	00 00       	add	r0,r0
8001e9dc:	80 01       	ld.sh	r1,r0[0x0]
8001e9de:	e8 42 eb cd 	cp.w	r2,584653

8001e9e0 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001e9e0:	eb cd 40 80 	pushm	r7,lr
8001e9e4:	1a 97       	mov	r7,sp
8001e9e6:	20 1d       	sub	sp,4
8001e9e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001e9ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e9f0:	2f 88       	sub	r8,-8
8001e9f2:	2d e8       	sub	r8,-34
8001e9f4:	11 88       	ld.ub	r8,r8[0x0]
}
8001e9f6:	10 9c       	mov	r12,r8
8001e9f8:	2f fd       	sub	sp,-4
8001e9fa:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e9fe <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001e9fe:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea02:	1a 97       	mov	r7,sp
8001ea04:	20 1d       	sub	sp,4
8001ea06:	48 86       	lddpc	r6,8001ea24 <mavlink_msg_mission_item_get_command+0x26>
8001ea08:	1e 26       	rsub	r6,pc
8001ea0a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001ea0e:	31 eb       	mov	r11,30
8001ea10:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ea14:	c7 2e       	rcall	8001e6f8 <_MAV_RETURN_uint16_t>
8001ea16:	18 98       	mov	r8,r12
8001ea18:	5c 88       	casts.h	r8
8001ea1a:	5c 88       	casts.h	r8
}
8001ea1c:	10 9c       	mov	r12,r8
8001ea1e:	2f fd       	sub	sp,-4
8001ea20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ea24:	80 01       	ld.sh	r1,r0[0x0]
8001ea26:	e8 8c eb cd 	brvs	8013c1c0 <_data_lma+0x10ad78>

8001ea28 <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001ea28:	eb cd 40 80 	pushm	r7,lr
8001ea2c:	1a 97       	mov	r7,sp
8001ea2e:	20 1d       	sub	sp,4
8001ea30:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001ea34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ea38:	2f 88       	sub	r8,-8
8001ea3a:	2d d8       	sub	r8,-35
8001ea3c:	11 88       	ld.ub	r8,r8[0x0]
}
8001ea3e:	10 9c       	mov	r12,r8
8001ea40:	2f fd       	sub	sp,-4
8001ea42:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ea46 <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001ea46:	eb cd 40 80 	pushm	r7,lr
8001ea4a:	1a 97       	mov	r7,sp
8001ea4c:	20 1d       	sub	sp,4
8001ea4e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001ea52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ea56:	2f 88       	sub	r8,-8
8001ea58:	2d c8       	sub	r8,-36
8001ea5a:	11 88       	ld.ub	r8,r8[0x0]
}
8001ea5c:	10 9c       	mov	r12,r8
8001ea5e:	2f fd       	sub	sp,-4
8001ea60:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ea64 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001ea64:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea68:	1a 97       	mov	r7,sp
8001ea6a:	20 1d       	sub	sp,4
8001ea6c:	48 76       	lddpc	r6,8001ea88 <mavlink_msg_mission_item_get_param1+0x24>
8001ea6e:	1e 26       	rsub	r6,pc
8001ea70:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001ea74:	30 0b       	mov	r11,0
8001ea76:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ea7a:	c7 fe       	rcall	8001e778 <_MAV_RETURN_float>
8001ea7c:	18 98       	mov	r8,r12
}
8001ea7e:	10 9c       	mov	r12,r8
8001ea80:	2f fd       	sub	sp,-4
8001ea82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ea86:	00 00       	add	r0,r0
8001ea88:	80 01       	ld.sh	r1,r0[0x0]
8001ea8a:	e8 f2 eb cd 	ld.w	r2,r4[-5171]

8001ea8c <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001ea8c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea90:	1a 97       	mov	r7,sp
8001ea92:	20 1d       	sub	sp,4
8001ea94:	48 76       	lddpc	r6,8001eab0 <mavlink_msg_mission_item_get_param2+0x24>
8001ea96:	1e 26       	rsub	r6,pc
8001ea98:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001ea9c:	30 4b       	mov	r11,4
8001ea9e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eaa2:	c6 be       	rcall	8001e778 <_MAV_RETURN_float>
8001eaa4:	18 98       	mov	r8,r12
}
8001eaa6:	10 9c       	mov	r12,r8
8001eaa8:	2f fd       	sub	sp,-4
8001eaaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eaae:	00 00       	add	r0,r0
8001eab0:	80 01       	ld.sh	r1,r0[0x0]
8001eab2:	e9 1a eb cd 	ld.uh	r10,r4[-5171]

8001eab4 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001eab4:	eb cd 40 c0 	pushm	r6-r7,lr
8001eab8:	1a 97       	mov	r7,sp
8001eaba:	20 1d       	sub	sp,4
8001eabc:	48 76       	lddpc	r6,8001ead8 <mavlink_msg_mission_item_get_param3+0x24>
8001eabe:	1e 26       	rsub	r6,pc
8001eac0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001eac4:	30 8b       	mov	r11,8
8001eac6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eaca:	c5 7e       	rcall	8001e778 <_MAV_RETURN_float>
8001eacc:	18 98       	mov	r8,r12
}
8001eace:	10 9c       	mov	r12,r8
8001ead0:	2f fd       	sub	sp,-4
8001ead2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ead6:	00 00       	add	r0,r0
8001ead8:	80 01       	ld.sh	r1,r0[0x0]
8001eada:	e9 42 eb cd 	st.w	r4[-5171],r2

8001eadc <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001eadc:	eb cd 40 c0 	pushm	r6-r7,lr
8001eae0:	1a 97       	mov	r7,sp
8001eae2:	20 1d       	sub	sp,4
8001eae4:	48 76       	lddpc	r6,8001eb00 <mavlink_msg_mission_item_get_param4+0x24>
8001eae6:	1e 26       	rsub	r6,pc
8001eae8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001eaec:	30 cb       	mov	r11,12
8001eaee:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eaf2:	c4 3e       	rcall	8001e778 <_MAV_RETURN_float>
8001eaf4:	18 98       	mov	r8,r12
}
8001eaf6:	10 9c       	mov	r12,r8
8001eaf8:	2f fd       	sub	sp,-4
8001eafa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eafe:	00 00       	add	r0,r0
8001eb00:	80 01       	ld.sh	r1,r0[0x0]
8001eb02:	e9 6a eb cd 	st.b	r4[-5171],r10

8001eb04 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001eb04:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb08:	1a 97       	mov	r7,sp
8001eb0a:	20 1d       	sub	sp,4
8001eb0c:	48 76       	lddpc	r6,8001eb28 <mavlink_msg_mission_item_get_x+0x24>
8001eb0e:	1e 26       	rsub	r6,pc
8001eb10:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001eb14:	31 0b       	mov	r11,16
8001eb16:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eb1a:	c2 fe       	rcall	8001e778 <_MAV_RETURN_float>
8001eb1c:	18 98       	mov	r8,r12
}
8001eb1e:	10 9c       	mov	r12,r8
8001eb20:	2f fd       	sub	sp,-4
8001eb22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb26:	00 00       	add	r0,r0
8001eb28:	80 01       	ld.sh	r1,r0[0x0]
8001eb2a:	e9 92       	*unknown*

8001eb2c <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001eb2c:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb30:	1a 97       	mov	r7,sp
8001eb32:	20 1d       	sub	sp,4
8001eb34:	48 76       	lddpc	r6,8001eb50 <mavlink_msg_mission_item_get_y+0x24>
8001eb36:	1e 26       	rsub	r6,pc
8001eb38:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001eb3c:	31 4b       	mov	r11,20
8001eb3e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eb42:	c1 be       	rcall	8001e778 <_MAV_RETURN_float>
8001eb44:	18 98       	mov	r8,r12
}
8001eb46:	10 9c       	mov	r12,r8
8001eb48:	2f fd       	sub	sp,-4
8001eb4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb4e:	00 00       	add	r0,r0
8001eb50:	80 01       	ld.sh	r1,r0[0x0]
8001eb52:	e9 ba       	*unknown*

8001eb54 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001eb54:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb58:	1a 97       	mov	r7,sp
8001eb5a:	20 1d       	sub	sp,4
8001eb5c:	48 76       	lddpc	r6,8001eb78 <mavlink_msg_mission_item_get_z+0x24>
8001eb5e:	1e 26       	rsub	r6,pc
8001eb60:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001eb64:	31 8b       	mov	r11,24
8001eb66:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eb6a:	c0 7e       	rcall	8001e778 <_MAV_RETURN_float>
8001eb6c:	18 98       	mov	r8,r12
}
8001eb6e:	10 9c       	mov	r12,r8
8001eb70:	2f fd       	sub	sp,-4
8001eb72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb76:	00 00       	add	r0,r0
8001eb78:	80 01       	ld.sh	r1,r0[0x0]
8001eb7a:	e9 e2 eb cd 	sthh.w	sp[0x2f0],r4:t,r2:b

8001eb7c <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001eb7c:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb80:	1a 97       	mov	r7,sp
8001eb82:	20 2d       	sub	sp,8
8001eb84:	4b a6       	lddpc	r6,8001ec6c <mavlink_msg_mission_item_decode+0xf0>
8001eb86:	1e 26       	rsub	r6,pc
8001eb88:	ef 4c ff fc 	st.w	r7[-4],r12
8001eb8c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001eb90:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eb94:	c6 8f       	rcall	8001ea64 <mavlink_msg_mission_item_get_param1>
8001eb96:	18 99       	mov	r9,r12
8001eb98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb9c:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001eb9e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eba2:	c7 5f       	rcall	8001ea8c <mavlink_msg_mission_item_get_param2>
8001eba4:	18 99       	mov	r9,r12
8001eba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebaa:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001ebac:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebb0:	c8 2f       	rcall	8001eab4 <mavlink_msg_mission_item_get_param3>
8001ebb2:	18 99       	mov	r9,r12
8001ebb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebb8:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001ebba:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebbe:	c8 ff       	rcall	8001eadc <mavlink_msg_mission_item_get_param4>
8001ebc0:	18 99       	mov	r9,r12
8001ebc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebc6:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001ebc8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebcc:	c9 cf       	rcall	8001eb04 <mavlink_msg_mission_item_get_x>
8001ebce:	18 99       	mov	r9,r12
8001ebd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebd4:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001ebd6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebda:	ca 9f       	rcall	8001eb2c <mavlink_msg_mission_item_get_y>
8001ebdc:	18 99       	mov	r9,r12
8001ebde:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebe2:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001ebe4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebe8:	cb 6f       	rcall	8001eb54 <mavlink_msg_mission_item_get_z>
8001ebea:	18 99       	mov	r9,r12
8001ebec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebf0:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001ebf2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ebf6:	cd fe       	rcall	8001e9b4 <mavlink_msg_mission_item_get_seq>
8001ebf8:	18 98       	mov	r8,r12
8001ebfa:	5c 88       	casts.h	r8
8001ebfc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec00:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001ec04:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec08:	cf be       	rcall	8001e9fe <mavlink_msg_mission_item_get_command>
8001ec0a:	18 98       	mov	r8,r12
8001ec0c:	5c 88       	casts.h	r8
8001ec0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec12:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001ec16:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec1a:	ca fe       	rcall	8001e978 <mavlink_msg_mission_item_get_target_system>
8001ec1c:	18 98       	mov	r8,r12
8001ec1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec22:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001ec26:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec2a:	cb 6e       	rcall	8001e996 <mavlink_msg_mission_item_get_target_component>
8001ec2c:	18 98       	mov	r8,r12
8001ec2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec32:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001ec36:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec3a:	cd 3e       	rcall	8001e9e0 <mavlink_msg_mission_item_get_frame>
8001ec3c:	18 98       	mov	r8,r12
8001ec3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec42:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001ec46:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec4a:	ce fe       	rcall	8001ea28 <mavlink_msg_mission_item_get_current>
8001ec4c:	18 98       	mov	r8,r12
8001ec4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec52:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001ec56:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ec5a:	cf 6e       	rcall	8001ea46 <mavlink_msg_mission_item_get_autocontinue>
8001ec5c:	18 98       	mov	r8,r12
8001ec5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ec62:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001ec66:	2f ed       	sub	sp,-8
8001ec68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ec6c:	80 01       	ld.sh	r1,r0[0x0]
8001ec6e:	ea 0a       	*unknown*

8001ec70 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001ec70:	eb cd 40 c0 	pushm	r6-r7,lr
8001ec74:	1a 97       	mov	r7,sp
8001ec76:	20 5d       	sub	sp,20
8001ec78:	49 56       	lddpc	r6,8001eccc <mavlink_msg_mission_request_send+0x5c>
8001ec7a:	1e 26       	rsub	r6,pc
8001ec7c:	ef 4c ff f8 	st.w	r7[-8],r12
8001ec80:	12 98       	mov	r8,r9
8001ec82:	16 99       	mov	r9,r11
8001ec84:	ef 69 ff f4 	st.b	r7[-12],r9
8001ec88:	14 99       	mov	r9,r10
8001ec8a:	ef 69 ff f0 	st.b	r7[-16],r9
8001ec8e:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001ec92:	ee c9 00 14 	sub	r9,r7,20
8001ec96:	ee c8 00 04 	sub	r8,r7,4
8001ec9a:	12 9b       	mov	r11,r9
8001ec9c:	10 9c       	mov	r12,r8
8001ec9e:	fe b0 fc c1 	rcall	8001e620 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001eca2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001eca6:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001ecaa:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001ecae:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001ecb2:	ee ca 00 04 	sub	r10,r7,4
8001ecb6:	e0 68 00 e6 	mov	r8,230
8001ecba:	30 49       	mov	r9,4
8001ecbc:	32 8b       	mov	r11,40
8001ecbe:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ecc2:	fe b0 fc 01 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001ecc6:	2f bd       	sub	sp,-20
8001ecc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eccc:	80 01       	ld.sh	r1,r0[0x0]
8001ecce:	ea fe eb cd 	ld.w	lr,r5[-5171]

8001ecd0 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001ecd0:	eb cd 40 80 	pushm	r7,lr
8001ecd4:	1a 97       	mov	r7,sp
8001ecd6:	20 1d       	sub	sp,4
8001ecd8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001ecdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ece0:	2f 88       	sub	r8,-8
8001ece2:	2f e8       	sub	r8,-2
8001ece4:	11 88       	ld.ub	r8,r8[0x0]
}
8001ece6:	10 9c       	mov	r12,r8
8001ece8:	2f fd       	sub	sp,-4
8001ecea:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ecee <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001ecee:	eb cd 40 80 	pushm	r7,lr
8001ecf2:	1a 97       	mov	r7,sp
8001ecf4:	20 1d       	sub	sp,4
8001ecf6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001ecfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ecfe:	2f 88       	sub	r8,-8
8001ed00:	2f d8       	sub	r8,-3
8001ed02:	11 88       	ld.ub	r8,r8[0x0]
}
8001ed04:	10 9c       	mov	r12,r8
8001ed06:	2f fd       	sub	sp,-4
8001ed08:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ed0c <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001ed0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ed10:	1a 97       	mov	r7,sp
8001ed12:	20 1d       	sub	sp,4
8001ed14:	48 86       	lddpc	r6,8001ed34 <mavlink_msg_mission_request_get_seq+0x28>
8001ed16:	1e 26       	rsub	r6,pc
8001ed18:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001ed1c:	30 0b       	mov	r11,0
8001ed1e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ed22:	fe b0 fc eb 	rcall	8001e6f8 <_MAV_RETURN_uint16_t>
8001ed26:	18 98       	mov	r8,r12
8001ed28:	5c 88       	casts.h	r8
8001ed2a:	5c 88       	casts.h	r8
}
8001ed2c:	10 9c       	mov	r12,r8
8001ed2e:	2f fd       	sub	sp,-4
8001ed30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ed34:	80 01       	ld.sh	r1,r0[0x0]
8001ed36:	eb 9a       	*unknown*

8001ed38 <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001ed38:	eb cd 40 c0 	pushm	r6-r7,lr
8001ed3c:	1a 97       	mov	r7,sp
8001ed3e:	20 2d       	sub	sp,8
8001ed40:	49 06       	lddpc	r6,8001ed80 <mavlink_msg_mission_request_decode+0x48>
8001ed42:	1e 26       	rsub	r6,pc
8001ed44:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed48:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001ed4c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ed50:	cd ef       	rcall	8001ed0c <mavlink_msg_mission_request_get_seq>
8001ed52:	18 98       	mov	r8,r12
8001ed54:	5c 88       	casts.h	r8
8001ed56:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ed5a:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001ed5c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ed60:	cb 8f       	rcall	8001ecd0 <mavlink_msg_mission_request_get_target_system>
8001ed62:	18 98       	mov	r8,r12
8001ed64:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ed68:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001ed6a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ed6e:	cc 0f       	rcall	8001ecee <mavlink_msg_mission_request_get_target_component>
8001ed70:	18 98       	mov	r8,r12
8001ed72:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ed76:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001ed78:	2f ed       	sub	sp,-8
8001ed7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ed7e:	00 00       	add	r0,r0
8001ed80:	80 01       	ld.sh	r1,r0[0x0]
8001ed82:	eb c6 eb cd 	stm	--r6,r0,r2-r3,r6-r9,r11,sp-pc

8001ed84 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001ed84:	eb cd 40 80 	pushm	r7,lr
8001ed88:	1a 97       	mov	r7,sp
8001ed8a:	20 1d       	sub	sp,4
8001ed8c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001ed90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed94:	2f 88       	sub	r8,-8
8001ed96:	2f e8       	sub	r8,-2
8001ed98:	11 88       	ld.ub	r8,r8[0x0]
}
8001ed9a:	10 9c       	mov	r12,r8
8001ed9c:	2f fd       	sub	sp,-4
8001ed9e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eda2 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001eda2:	eb cd 40 80 	pushm	r7,lr
8001eda6:	1a 97       	mov	r7,sp
8001eda8:	20 1d       	sub	sp,4
8001edaa:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001edae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001edb2:	2f 88       	sub	r8,-8
8001edb4:	2f d8       	sub	r8,-3
8001edb6:	11 88       	ld.ub	r8,r8[0x0]
}
8001edb8:	10 9c       	mov	r12,r8
8001edba:	2f fd       	sub	sp,-4
8001edbc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001edc0 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001edc0:	eb cd 40 c0 	pushm	r6-r7,lr
8001edc4:	1a 97       	mov	r7,sp
8001edc6:	20 1d       	sub	sp,4
8001edc8:	48 86       	lddpc	r6,8001ede8 <mavlink_msg_mission_set_current_get_seq+0x28>
8001edca:	1e 26       	rsub	r6,pc
8001edcc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001edd0:	30 0b       	mov	r11,0
8001edd2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001edd6:	fe b0 fc 91 	rcall	8001e6f8 <_MAV_RETURN_uint16_t>
8001edda:	18 98       	mov	r8,r12
8001eddc:	5c 88       	casts.h	r8
8001edde:	5c 88       	casts.h	r8
}
8001ede0:	10 9c       	mov	r12,r8
8001ede2:	2f fd       	sub	sp,-4
8001ede4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ede8:	80 01       	ld.sh	r1,r0[0x0]
8001edea:	ec 4e eb cd 	cp.w	lr,846797

8001edec <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001edec:	eb cd 40 c0 	pushm	r6-r7,lr
8001edf0:	1a 97       	mov	r7,sp
8001edf2:	20 2d       	sub	sp,8
8001edf4:	49 06       	lddpc	r6,8001ee34 <mavlink_msg_mission_set_current_decode+0x48>
8001edf6:	1e 26       	rsub	r6,pc
8001edf8:	ef 4c ff fc 	st.w	r7[-4],r12
8001edfc:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001ee00:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ee04:	cd ef       	rcall	8001edc0 <mavlink_msg_mission_set_current_get_seq>
8001ee06:	18 98       	mov	r8,r12
8001ee08:	5c 88       	casts.h	r8
8001ee0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ee0e:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001ee10:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ee14:	cb 8f       	rcall	8001ed84 <mavlink_msg_mission_set_current_get_target_system>
8001ee16:	18 98       	mov	r8,r12
8001ee18:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ee1c:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001ee1e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ee22:	cc 0f       	rcall	8001eda2 <mavlink_msg_mission_set_current_get_target_component>
8001ee24:	18 98       	mov	r8,r12
8001ee26:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ee2a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001ee2c:	2f ed       	sub	sp,-8
8001ee2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee32:	00 00       	add	r0,r0
8001ee34:	80 01       	ld.sh	r1,r0[0x0]
8001ee36:	ec 7a eb cd 	mov	r10,912333

8001ee38 <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001ee38:	eb cd 40 c0 	pushm	r6-r7,lr
8001ee3c:	1a 97       	mov	r7,sp
8001ee3e:	20 3d       	sub	sp,12
8001ee40:	48 e6       	lddpc	r6,8001ee78 <mavlink_msg_mission_current_send+0x40>
8001ee42:	1e 26       	rsub	r6,pc
8001ee44:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee48:	16 98       	mov	r8,r11
8001ee4a:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001ee4e:	ee c9 00 0c 	sub	r9,r7,12
8001ee52:	ee c8 00 04 	sub	r8,r7,4
8001ee56:	12 9b       	mov	r11,r9
8001ee58:	10 9c       	mov	r12,r8
8001ee5a:	fe b0 fb e3 	rcall	8001e620 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001ee5e:	ee ca 00 04 	sub	r10,r7,4
8001ee62:	31 c8       	mov	r8,28
8001ee64:	30 29       	mov	r9,2
8001ee66:	32 ab       	mov	r11,42
8001ee68:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ee6c:	fe b0 fb 2c 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001ee70:	2f dd       	sub	sp,-12
8001ee72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee76:	00 00       	add	r0,r0
8001ee78:	80 01       	ld.sh	r1,r0[0x0]
8001ee7a:	ec c6 eb cd 	sub	r6,r6,-5171

8001ee7c <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001ee7c:	eb cd 40 80 	pushm	r7,lr
8001ee80:	1a 97       	mov	r7,sp
8001ee82:	20 1d       	sub	sp,4
8001ee84:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001ee88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee8c:	2f 88       	sub	r8,-8
8001ee8e:	11 88       	ld.ub	r8,r8[0x0]
}
8001ee90:	10 9c       	mov	r12,r8
8001ee92:	2f fd       	sub	sp,-4
8001ee94:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ee98 <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001ee98:	eb cd 40 80 	pushm	r7,lr
8001ee9c:	1a 97       	mov	r7,sp
8001ee9e:	20 1d       	sub	sp,4
8001eea0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001eea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eea8:	2f 88       	sub	r8,-8
8001eeaa:	2f f8       	sub	r8,-1
8001eeac:	11 88       	ld.ub	r8,r8[0x0]
}
8001eeae:	10 9c       	mov	r12,r8
8001eeb0:	2f fd       	sub	sp,-4
8001eeb2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eeb6 <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001eeb6:	eb cd 40 c0 	pushm	r6-r7,lr
8001eeba:	1a 97       	mov	r7,sp
8001eebc:	20 2d       	sub	sp,8
8001eebe:	48 c6       	lddpc	r6,8001eeec <mavlink_msg_mission_request_list_decode+0x36>
8001eec0:	1e 26       	rsub	r6,pc
8001eec2:	ef 4c ff fc 	st.w	r7[-4],r12
8001eec6:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001eeca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eece:	cd 7f       	rcall	8001ee7c <mavlink_msg_mission_request_list_get_target_system>
8001eed0:	18 98       	mov	r8,r12
8001eed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001eed6:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001eed8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eedc:	cd ef       	rcall	8001ee98 <mavlink_msg_mission_request_list_get_target_component>
8001eede:	18 98       	mov	r8,r12
8001eee0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001eee4:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001eee6:	2f ed       	sub	sp,-8
8001eee8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eeec:	80 01       	ld.sh	r1,r0[0x0]
8001eeee:	ed 44 eb cd 	st.w	r6[-5171],r4

8001eef0 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001eef0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eef4:	1a 97       	mov	r7,sp
8001eef6:	20 5d       	sub	sp,20
8001eef8:	49 56       	lddpc	r6,8001ef4c <mavlink_msg_mission_count_send+0x5c>
8001eefa:	1e 26       	rsub	r6,pc
8001eefc:	ef 4c ff f8 	st.w	r7[-8],r12
8001ef00:	12 98       	mov	r8,r9
8001ef02:	16 99       	mov	r9,r11
8001ef04:	ef 69 ff f4 	st.b	r7[-12],r9
8001ef08:	14 99       	mov	r9,r10
8001ef0a:	ef 69 ff f0 	st.b	r7[-16],r9
8001ef0e:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001ef12:	ee c9 00 14 	sub	r9,r7,20
8001ef16:	ee c8 00 04 	sub	r8,r7,4
8001ef1a:	12 9b       	mov	r11,r9
8001ef1c:	10 9c       	mov	r12,r8
8001ef1e:	fe b0 fb 81 	rcall	8001e620 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001ef22:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ef26:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001ef2a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001ef2e:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001ef32:	ee ca 00 04 	sub	r10,r7,4
8001ef36:	e0 68 00 dd 	mov	r8,221
8001ef3a:	30 49       	mov	r9,4
8001ef3c:	32 cb       	mov	r11,44
8001ef3e:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ef42:	fe b0 fa c1 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001ef46:	2f bd       	sub	sp,-20
8001ef48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef4c:	80 01       	ld.sh	r1,r0[0x0]
8001ef4e:	ed 7e eb cd 	stcond	r6[-5171],lr

8001ef50 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001ef50:	eb cd 40 80 	pushm	r7,lr
8001ef54:	1a 97       	mov	r7,sp
8001ef56:	20 1d       	sub	sp,4
8001ef58:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001ef5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef60:	2f 88       	sub	r8,-8
8001ef62:	2f e8       	sub	r8,-2
8001ef64:	11 88       	ld.ub	r8,r8[0x0]
}
8001ef66:	10 9c       	mov	r12,r8
8001ef68:	2f fd       	sub	sp,-4
8001ef6a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ef6e <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001ef6e:	eb cd 40 80 	pushm	r7,lr
8001ef72:	1a 97       	mov	r7,sp
8001ef74:	20 1d       	sub	sp,4
8001ef76:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001ef7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef7e:	2f 88       	sub	r8,-8
8001ef80:	2f d8       	sub	r8,-3
8001ef82:	11 88       	ld.ub	r8,r8[0x0]
}
8001ef84:	10 9c       	mov	r12,r8
8001ef86:	2f fd       	sub	sp,-4
8001ef88:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ef8c <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001ef8c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef90:	1a 97       	mov	r7,sp
8001ef92:	20 1d       	sub	sp,4
8001ef94:	48 86       	lddpc	r6,8001efb4 <mavlink_msg_mission_count_get_count+0x28>
8001ef96:	1e 26       	rsub	r6,pc
8001ef98:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001ef9c:	30 0b       	mov	r11,0
8001ef9e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001efa2:	fe b0 fb ab 	rcall	8001e6f8 <_MAV_RETURN_uint16_t>
8001efa6:	18 98       	mov	r8,r12
8001efa8:	5c 88       	casts.h	r8
8001efaa:	5c 88       	casts.h	r8
}
8001efac:	10 9c       	mov	r12,r8
8001efae:	2f fd       	sub	sp,-4
8001efb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001efb4:	80 01       	ld.sh	r1,r0[0x0]
8001efb6:	ee 1a eb cd 	eorh	r10,0xebcd

8001efb8 <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001efb8:	eb cd 40 c0 	pushm	r6-r7,lr
8001efbc:	1a 97       	mov	r7,sp
8001efbe:	20 2d       	sub	sp,8
8001efc0:	49 06       	lddpc	r6,8001f000 <mavlink_msg_mission_count_decode+0x48>
8001efc2:	1e 26       	rsub	r6,pc
8001efc4:	ef 4c ff fc 	st.w	r7[-4],r12
8001efc8:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001efcc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001efd0:	cd ef       	rcall	8001ef8c <mavlink_msg_mission_count_get_count>
8001efd2:	18 98       	mov	r8,r12
8001efd4:	5c 88       	casts.h	r8
8001efd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001efda:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001efdc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001efe0:	cb 8f       	rcall	8001ef50 <mavlink_msg_mission_count_get_target_system>
8001efe2:	18 98       	mov	r8,r12
8001efe4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001efe8:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001efea:	ee fc ff fc 	ld.w	r12,r7[-4]
8001efee:	cc 0f       	rcall	8001ef6e <mavlink_msg_mission_count_get_target_component>
8001eff0:	18 98       	mov	r8,r12
8001eff2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001eff6:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001eff8:	2f ed       	sub	sp,-8
8001effa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001effe:	00 00       	add	r0,r0
8001f000:	80 01       	ld.sh	r1,r0[0x0]
8001f002:	ee 46 eb cd 	cp.w	r6,977869

8001f004 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001f004:	eb cd 40 80 	pushm	r7,lr
8001f008:	1a 97       	mov	r7,sp
8001f00a:	20 1d       	sub	sp,4
8001f00c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f010:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f014:	2f 88       	sub	r8,-8
8001f016:	11 88       	ld.ub	r8,r8[0x0]
}
8001f018:	10 9c       	mov	r12,r8
8001f01a:	2f fd       	sub	sp,-4
8001f01c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f020 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001f020:	eb cd 40 80 	pushm	r7,lr
8001f024:	1a 97       	mov	r7,sp
8001f026:	20 1d       	sub	sp,4
8001f028:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f02c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f030:	2f 88       	sub	r8,-8
8001f032:	2f f8       	sub	r8,-1
8001f034:	11 88       	ld.ub	r8,r8[0x0]
}
8001f036:	10 9c       	mov	r12,r8
8001f038:	2f fd       	sub	sp,-4
8001f03a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f03e <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001f03e:	eb cd 40 c0 	pushm	r6-r7,lr
8001f042:	1a 97       	mov	r7,sp
8001f044:	20 2d       	sub	sp,8
8001f046:	48 c6       	lddpc	r6,8001f074 <mavlink_msg_mission_clear_all_decode+0x36>
8001f048:	1e 26       	rsub	r6,pc
8001f04a:	ef 4c ff fc 	st.w	r7[-4],r12
8001f04e:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001f052:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f056:	cd 7f       	rcall	8001f004 <mavlink_msg_mission_clear_all_get_target_system>
8001f058:	18 98       	mov	r8,r12
8001f05a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f05e:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001f060:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f064:	cd ef       	rcall	8001f020 <mavlink_msg_mission_clear_all_get_target_component>
8001f066:	18 98       	mov	r8,r12
8001f068:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f06c:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001f06e:	2f ed       	sub	sp,-8
8001f070:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f074:	80 01       	ld.sh	r1,r0[0x0]
8001f076:	ee cc eb cd 	sub	r12,r7,-5171

8001f078 <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001f078:	eb cd 40 c0 	pushm	r6-r7,lr
8001f07c:	1a 97       	mov	r7,sp
8001f07e:	20 3d       	sub	sp,12
8001f080:	48 e6       	lddpc	r6,8001f0b8 <mavlink_msg_mission_item_reached_send+0x40>
8001f082:	1e 26       	rsub	r6,pc
8001f084:	ef 4c ff f8 	st.w	r7[-8],r12
8001f088:	16 98       	mov	r8,r11
8001f08a:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f08e:	ee c9 00 0c 	sub	r9,r7,12
8001f092:	ee c8 00 04 	sub	r8,r7,4
8001f096:	12 9b       	mov	r11,r9
8001f098:	10 9c       	mov	r12,r8
8001f09a:	fe b0 fa c3 	rcall	8001e620 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001f09e:	ee ca 00 04 	sub	r10,r7,4
8001f0a2:	30 b8       	mov	r8,11
8001f0a4:	30 29       	mov	r9,2
8001f0a6:	32 eb       	mov	r11,46
8001f0a8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f0ac:	fe b0 fa 0c 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001f0b0:	2f dd       	sub	sp,-12
8001f0b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f0b6:	00 00       	add	r0,r0
8001f0b8:	80 01       	ld.sh	r1,r0[0x0]
8001f0ba:	ef 06 eb cd 	ld.sh	r6,r7[-5171]

8001f0bc <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001f0bc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f0c0:	1a 97       	mov	r7,sp
8001f0c2:	20 5d       	sub	sp,20
8001f0c4:	49 36       	lddpc	r6,8001f110 <mavlink_msg_mission_ack_send+0x54>
8001f0c6:	1e 26       	rsub	r6,pc
8001f0c8:	ef 4c ff f8 	st.w	r7[-8],r12
8001f0cc:	12 98       	mov	r8,r9
8001f0ce:	16 99       	mov	r9,r11
8001f0d0:	ef 69 ff f4 	st.b	r7[-12],r9
8001f0d4:	14 99       	mov	r9,r10
8001f0d6:	ef 69 ff f0 	st.b	r7[-16],r9
8001f0da:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001f0de:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f0e2:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001f0e6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f0ea:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001f0ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001f0f2:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001f0f6:	ee ca 00 04 	sub	r10,r7,4
8001f0fa:	e0 68 00 99 	mov	r8,153
8001f0fe:	30 39       	mov	r9,3
8001f100:	32 fb       	mov	r11,47
8001f102:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f106:	fe b0 f9 df 	rcall	8001e4c4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001f10a:	2f bd       	sub	sp,-20
8001f10c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f110:	80 01       	ld.sh	r1,r0[0x0]
8001f112:	ef 4a eb cd 	st.w	r7[-5171],r10

8001f114 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001f114:	eb cd 40 80 	pushm	r7,lr
8001f118:	1a 97       	mov	r7,sp
8001f11a:	20 1d       	sub	sp,4
8001f11c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f120:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f124:	2f 88       	sub	r8,-8
8001f126:	11 88       	ld.ub	r8,r8[0x0]
}
8001f128:	10 9c       	mov	r12,r8
8001f12a:	2f fd       	sub	sp,-4
8001f12c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f130 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001f130:	eb cd 40 80 	pushm	r7,lr
8001f134:	1a 97       	mov	r7,sp
8001f136:	20 1d       	sub	sp,4
8001f138:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f13c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f140:	2f 88       	sub	r8,-8
8001f142:	2f f8       	sub	r8,-1
8001f144:	11 88       	ld.ub	r8,r8[0x0]
}
8001f146:	10 9c       	mov	r12,r8
8001f148:	2f fd       	sub	sp,-4
8001f14a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f14e <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001f14e:	eb cd 40 80 	pushm	r7,lr
8001f152:	1a 97       	mov	r7,sp
8001f154:	20 1d       	sub	sp,4
8001f156:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f15a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f15e:	2f 88       	sub	r8,-8
8001f160:	2f e8       	sub	r8,-2
8001f162:	11 88       	ld.ub	r8,r8[0x0]
}
8001f164:	10 9c       	mov	r12,r8
8001f166:	2f fd       	sub	sp,-4
8001f168:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f16c <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001f16c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f170:	1a 97       	mov	r7,sp
8001f172:	20 2d       	sub	sp,8
8001f174:	48 f6       	lddpc	r6,8001f1b0 <mavlink_msg_mission_ack_decode+0x44>
8001f176:	1e 26       	rsub	r6,pc
8001f178:	ef 4c ff fc 	st.w	r7[-4],r12
8001f17c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001f180:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f184:	cc 8f       	rcall	8001f114 <mavlink_msg_mission_ack_get_target_system>
8001f186:	18 98       	mov	r8,r12
8001f188:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f18c:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001f18e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f192:	cc ff       	rcall	8001f130 <mavlink_msg_mission_ack_get_target_component>
8001f194:	18 98       	mov	r8,r12
8001f196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f19a:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001f19c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1a0:	cd 7f       	rcall	8001f14e <mavlink_msg_mission_ack_get_type>
8001f1a2:	18 98       	mov	r8,r12
8001f1a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f1a8:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001f1aa:	2f ed       	sub	sp,-8
8001f1ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1b0:	80 01       	ld.sh	r1,r0[0x0]
8001f1b2:	ef fa eb cd 	st.wqs	r7[0x734],r10

8001f1b4 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001f1b4:	eb cd 40 80 	pushm	r7,lr
8001f1b8:	1a 97       	mov	r7,sp
8001f1ba:	20 3d       	sub	sp,12
8001f1bc:	ef 4c ff f8 	st.w	r7[-8],r12
8001f1c0:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001f1c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f1c8:	70 09       	ld.w	r9,r8[0x0]
8001f1ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f1ce:	70 08       	ld.w	r8,r8[0x0]
8001f1d0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f1d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f1d8:	2f c8       	sub	r8,-4
8001f1da:	70 0a       	ld.w	r10,r8[0x0]
8001f1dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f1e0:	2f c8       	sub	r8,-4
8001f1e2:	70 08       	ld.w	r8,r8[0x0]
8001f1e4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f1e8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f1ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f1f0:	2f 88       	sub	r8,-8
8001f1f2:	70 0a       	ld.w	r10,r8[0x0]
8001f1f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f1f8:	2f 88       	sub	r8,-8
8001f1fa:	70 08       	ld.w	r8,r8[0x0]
8001f1fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f200:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001f204:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001f208:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f20c:	10 9c       	mov	r12,r8
8001f20e:	2f dd       	sub	sp,-12
8001f210:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f214 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001f214:	eb cd 40 c0 	pushm	r6-r7,lr
8001f218:	1a 97       	mov	r7,sp
8001f21a:	20 2d       	sub	sp,8
8001f21c:	48 96       	lddpc	r6,8001f240 <vector_norm_sqr+0x2c>
8001f21e:	1e 26       	rsub	r6,pc
8001f220:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001f224:	ee fb ff f8 	ld.w	r11,r7[-8]
8001f228:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f22c:	cc 4f       	rcall	8001f1b4 <scalar_product>
8001f22e:	18 98       	mov	r8,r12
8001f230:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001f234:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f238:	10 9c       	mov	r12,r8
8001f23a:	2f ed       	sub	sp,-8
8001f23c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f240:	80 01       	ld.sh	r1,r0[0x0]
8001f242:	f0 a2       	*unknown*

8001f244 <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001f244:	eb cd 40 c0 	pushm	r6-r7,lr
8001f248:	1a 97       	mov	r7,sp
8001f24a:	48 e6       	lddpc	r6,8001f280 <get_thrust_from_remote+0x3c>
8001f24c:	1e 26       	rsub	r6,pc
8001f24e:	30 0c       	mov	r12,0
8001f250:	f0 16 00 1b 	mcall	r6[108]
8001f254:	18 98       	mov	r8,r12
8001f256:	10 9c       	mov	r12,r8
8001f258:	f0 16 00 1a 	mcall	r6[104]
8001f25c:	30 08       	mov	r8,0
8001f25e:	e0 69 60 00 	mov	r9,24576
8001f262:	ea 19 40 7b 	orh	r9,0x407b
8001f266:	f0 16 00 0c 	mcall	r6[48]
8001f26a:	14 98       	mov	r8,r10
8001f26c:	16 99       	mov	r9,r11
8001f26e:	10 9a       	mov	r10,r8
8001f270:	12 9b       	mov	r11,r9
8001f272:	f0 16 00 08 	mcall	r6[32]
8001f276:	18 98       	mov	r8,r12
8001f278:	10 9c       	mov	r12,r8
8001f27a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f27e:	00 00       	add	r0,r0
8001f280:	80 01       	ld.sh	r1,r0[0x0]
8001f282:	f0 d0 eb cd 	satsub.w	r0,r8,-5171

8001f284 <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8001f284:	eb cd 40 c0 	pushm	r6-r7,lr
8001f288:	1a 97       	mov	r7,sp
8001f28a:	49 c6       	lddpc	r6,8001f2f8 <init_waypoint_handler+0x74>
8001f28c:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
8001f28e:	f0 16 00 0f 	mcall	r6[60]
8001f292:	18 99       	mov	r9,r12
8001f294:	ec f8 01 78 	ld.w	r8,r6[376]
8001f298:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
8001f29a:	ec f8 04 14 	ld.w	r8,r6[1044]
8001f29e:	e0 69 27 10 	mov	r9,10000
8001f2a2:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8001f2a4:	f0 16 00 32 	mcall	r6[200]
8001f2a8:	18 99       	mov	r9,r12
8001f2aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2ae:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
8001f2b0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2b4:	70 08       	ld.w	r8,r8[0x0]
8001f2b6:	30 19       	mov	r9,1
8001f2b8:	f1 49 12 e4 	st.w	r8[4836],r9
	centralData->critical_init = false;
8001f2bc:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2c0:	70 09       	ld.w	r9,r8[0x0]
8001f2c2:	30 08       	mov	r8,0
8001f2c4:	f3 68 10 b9 	st.b	r9[4281],r8
	centralData->critical_next_state = false;
8001f2c8:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2cc:	70 09       	ld.w	r9,r8[0x0]
8001f2ce:	30 08       	mov	r8,0
8001f2d0:	f3 68 10 ba 	st.b	r9[4282],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8001f2d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2d8:	70 08       	ld.w	r8,r8[0x0]
8001f2da:	f0 c9 ef e4 	sub	r9,r8,-4124
8001f2de:	ec f8 00 00 	ld.w	r8,r6[0]
8001f2e2:	70 08       	ld.w	r8,r8[0x0]
8001f2e4:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001f2e8:	12 9b       	mov	r11,r9
8001f2ea:	10 9c       	mov	r12,r8
8001f2ec:	f0 16 01 59 	mcall	r6[1380]
	init_wp();
8001f2f0:	f0 16 00 8d 	mcall	r6[564]
}
8001f2f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f2f8:	80 01       	ld.sh	r1,r0[0x0]
8001f2fa:	f1 10 4e 61 	ld.uh	r0,r8[20065]
8001f2fe:	76 20       	ld.w	r0,r11[0x8]
8001f300:	69 6e       	ld.w	lr,r4[0x58]
8001f302:	69 74       	ld.w	r4,r4[0x5c]
8001f304:	0a 00       	add	r0,r5
8001f306:	00 00       	add	r0,r0
8001f308:	57 61       	stdsp	sp[0x1d8],r1
8001f30a:	79 70       	ld.w	r0,r12[0x5c]
8001f30c:	6f 69       	ld.w	r9,r7[0x58]
8001f30e:	6e 74       	ld.w	r4,r7[0x1c]
8001f310:	20 4e       	sub	lr,4
8001f312:	72 00       	ld.w	r0,r9[0x0]
8001f314:	20 73       	sub	r3,7
8001f316:	65 74       	ld.w	r4,r2[0x5c]
8001f318:	2c 0a       	sub	r10,-64
	...

8001f31c <init_wp>:

void init_wp()
{
8001f31c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001f320:	1a 97       	mov	r7,sp
8001f322:	21 0d       	sub	sp,64
8001f324:	fe f6 02 f8 	ld.w	r6,pc[760]
8001f328:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
8001f32a:	ec f8 03 44 	ld.w	r8,r6[836]
8001f32e:	70 08       	ld.w	r8,r8[0x0]
8001f330:	58 08       	cp.w	r8,0
8001f332:	c0 51       	brne	8001f33c <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8001f334:	fe cc 00 38 	sub	r12,pc,56
8001f338:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
8001f33c:	ec f8 03 44 	ld.w	r8,r6[836]
8001f340:	70 08       	ld.w	r8,r8[0x0]
8001f342:	f0 c9 ff ff 	sub	r9,r8,-1
8001f346:	e0 68 4d d3 	mov	r8,19923
8001f34a:	ea 18 10 62 	orh	r8,0x1062
8001f34e:	f2 08 04 4a 	muls.d	r10,r9,r8
8001f352:	f6 0a 14 06 	asr	r10,r11,0x6
8001f356:	f2 08 14 1f 	asr	r8,r9,0x1f
8001f35a:	f4 08 01 08 	sub	r8,r10,r8
8001f35e:	e0 6a 03 e8 	mov	r10,1000
8001f362:	b5 38       	mul	r8,r10
8001f364:	f2 08 01 08 	sub	r8,r9,r8
8001f368:	ec f9 03 44 	ld.w	r9,r6[836]
8001f36c:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
8001f36e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f372:	70 08       	ld.w	r8,r8[0x0]
8001f374:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001f378:	58 08       	cp.w	r8,0
8001f37a:	e0 80 01 4e 	breq	8001f616 <init_wp+0x2fa>
8001f37e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f382:	70 08       	ld.w	r8,r8[0x0]
8001f384:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8001f388:	58 08       	cp.w	r8,0
8001f38a:	c0 91       	brne	8001f39c <init_wp+0x80>
8001f38c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f390:	70 08       	ld.w	r8,r8[0x0]
8001f392:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8001f396:	58 08       	cp.w	r8,0
8001f398:	e0 80 01 3f 	breq	8001f616 <init_wp+0x2fa>
8001f39c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f3a0:	70 08       	ld.w	r8,r8[0x0]
8001f3a2:	f1 38 10 b6 	ld.ub	r8,r8[4278]
8001f3a6:	ec 18 00 01 	eorl	r8,0x1
8001f3aa:	5c 58       	castu.b	r8
8001f3ac:	e0 80 01 35 	breq	8001f616 <init_wp+0x2fa>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001f3b0:	30 08       	mov	r8,0
8001f3b2:	ef 68 ff fe 	st.b	r7[-2],r8
8001f3b6:	c2 59       	rjmp	8001f600 <init_wp+0x2e4>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
8001f3b8:	ec f8 00 00 	ld.w	r8,r6[0]
8001f3bc:	70 0a       	ld.w	r10,r8[0x0]
8001f3be:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001f3c2:	12 98       	mov	r8,r9
8001f3c4:	a1 78       	lsl	r8,0x1
8001f3c6:	12 08       	add	r8,r9
8001f3c8:	a5 68       	lsl	r8,0x4
8001f3ca:	f4 08 00 08 	add	r8,r10,r8
8001f3ce:	f0 c8 f1 f0 	sub	r8,r8,-3600
8001f3d2:	11 89       	ld.ub	r9,r8[0x0]
8001f3d4:	30 18       	mov	r8,1
8001f3d6:	f0 09 18 00 	cp.b	r9,r8
8001f3da:	e0 81 01 0e 	brne	8001f5f6 <init_wp+0x2da>
8001f3de:	ec f8 00 00 	ld.w	r8,r6[0]
8001f3e2:	70 08       	ld.w	r8,r8[0x0]
8001f3e4:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8001f3e8:	ec 18 00 01 	eorl	r8,0x1
8001f3ec:	5c 58       	castu.b	r8
8001f3ee:	e0 80 01 04 	breq	8001f5f6 <init_wp+0x2da>
			{
				centralData->current_wp_count = i;
8001f3f2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f3f6:	70 09       	ld.w	r9,r8[0x0]
8001f3f8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001f3fc:	f3 68 10 1e 	st.b	r9[4126],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
8001f400:	ec f8 00 00 	ld.w	r8,r6[0]
8001f404:	70 0a       	ld.w	r10,r8[0x0]
8001f406:	ec f8 00 00 	ld.w	r8,r6[0]
8001f40a:	70 0b       	ld.w	r11,r8[0x0]
8001f40c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f410:	70 08       	ld.w	r8,r8[0x0]
8001f412:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8001f416:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001f41a:	12 98       	mov	r8,r9
8001f41c:	a1 78       	lsl	r8,0x1
8001f41e:	12 08       	add	r8,r9
8001f420:	a5 68       	lsl	r8,0x4
8001f422:	f6 08 00 08 	add	r8,r11,r8
8001f426:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001f42a:	f4 cb f0 14 	sub	r11,r10,-4076
8001f42e:	10 9a       	mov	r10,r8
8001f430:	f6 c8 00 00 	sub	r8,r11,0
8001f434:	f4 c9 00 00 	sub	r9,r10,0
8001f438:	72 0c       	ld.w	r12,r9[0x0]
8001f43a:	91 0c       	st.w	r8[0x0],r12
8001f43c:	72 1c       	ld.w	r12,r9[0x4]
8001f43e:	91 1c       	st.w	r8[0x4],r12
8001f440:	72 2c       	ld.w	r12,r9[0x8]
8001f442:	91 2c       	st.w	r8[0x8],r12
8001f444:	72 39       	ld.w	r9,r9[0xc]
8001f446:	91 39       	st.w	r8[0xc],r9
8001f448:	f6 c8 ff f0 	sub	r8,r11,-16
8001f44c:	f4 c9 ff f0 	sub	r9,r10,-16
8001f450:	72 0c       	ld.w	r12,r9[0x0]
8001f452:	91 0c       	st.w	r8[0x0],r12
8001f454:	72 1c       	ld.w	r12,r9[0x4]
8001f456:	91 1c       	st.w	r8[0x4],r12
8001f458:	72 2c       	ld.w	r12,r9[0x8]
8001f45a:	91 2c       	st.w	r8[0x8],r12
8001f45c:	72 39       	ld.w	r9,r9[0xc]
8001f45e:	91 39       	st.w	r8[0xc],r9
8001f460:	f6 c8 ff e0 	sub	r8,r11,-32
8001f464:	f4 c9 ff e0 	sub	r9,r10,-32
8001f468:	72 0a       	ld.w	r10,r9[0x0]
8001f46a:	91 0a       	st.w	r8[0x0],r10
8001f46c:	72 1a       	ld.w	r10,r9[0x4]
8001f46e:	91 1a       	st.w	r8[0x4],r10
8001f470:	72 2a       	ld.w	r10,r9[0x8]
8001f472:	91 2a       	st.w	r8[0x8],r10
8001f474:	72 39       	ld.w	r9,r9[0xc]
8001f476:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8001f478:	ec f8 00 00 	ld.w	r8,r6[0]
8001f47c:	70 05       	ld.w	r5,r8[0x0]
8001f47e:	ec f8 00 00 	ld.w	r8,r6[0]
8001f482:	70 08       	ld.w	r8,r8[0x0]
8001f484:	ec f9 00 00 	ld.w	r9,r6[0]
8001f488:	72 0e       	ld.w	lr,r9[0x0]
8001f48a:	ee cc 00 40 	sub	r12,r7,64
8001f48e:	20 7d       	sub	sp,28
8001f490:	1a 99       	mov	r9,sp
8001f492:	12 9a       	mov	r10,r9
8001f494:	f0 cb f2 54 	sub	r11,r8,-3500
8001f498:	f4 c8 00 00 	sub	r8,r10,0
8001f49c:	f6 c9 00 00 	sub	r9,r11,0
8001f4a0:	72 03       	ld.w	r3,r9[0x0]
8001f4a2:	91 03       	st.w	r8[0x0],r3
8001f4a4:	72 13       	ld.w	r3,r9[0x4]
8001f4a6:	91 13       	st.w	r8[0x4],r3
8001f4a8:	72 23       	ld.w	r3,r9[0x8]
8001f4aa:	91 23       	st.w	r8[0x8],r3
8001f4ac:	72 39       	ld.w	r9,r9[0xc]
8001f4ae:	91 39       	st.w	r8[0xc],r9
8001f4b0:	f6 e8 00 10 	ld.d	r8,r11[16]
8001f4b4:	f4 e9 00 10 	st.d	r10[16],r8
8001f4b8:	76 68       	ld.w	r8,r11[0x18]
8001f4ba:	95 68       	st.w	r10[0x18],r8
8001f4bc:	20 cd       	sub	sp,48
8001f4be:	1a 98       	mov	r8,sp
8001f4c0:	10 9b       	mov	r11,r8
8001f4c2:	fc ca f0 14 	sub	r10,lr,-4076
8001f4c6:	f6 c8 00 00 	sub	r8,r11,0
8001f4ca:	f4 c9 00 00 	sub	r9,r10,0
8001f4ce:	72 0e       	ld.w	lr,r9[0x0]
8001f4d0:	91 0e       	st.w	r8[0x0],lr
8001f4d2:	72 1e       	ld.w	lr,r9[0x4]
8001f4d4:	91 1e       	st.w	r8[0x4],lr
8001f4d6:	72 2e       	ld.w	lr,r9[0x8]
8001f4d8:	91 2e       	st.w	r8[0x8],lr
8001f4da:	72 39       	ld.w	r9,r9[0xc]
8001f4dc:	91 39       	st.w	r8[0xc],r9
8001f4de:	f6 c8 ff f0 	sub	r8,r11,-16
8001f4e2:	f4 c9 ff f0 	sub	r9,r10,-16
8001f4e6:	72 0e       	ld.w	lr,r9[0x0]
8001f4e8:	91 0e       	st.w	r8[0x0],lr
8001f4ea:	72 1e       	ld.w	lr,r9[0x4]
8001f4ec:	91 1e       	st.w	r8[0x4],lr
8001f4ee:	72 2e       	ld.w	lr,r9[0x8]
8001f4f0:	91 2e       	st.w	r8[0x8],lr
8001f4f2:	72 39       	ld.w	r9,r9[0xc]
8001f4f4:	91 39       	st.w	r8[0xc],r9
8001f4f6:	f6 c8 ff e0 	sub	r8,r11,-32
8001f4fa:	f4 c9 ff e0 	sub	r9,r10,-32
8001f4fe:	72 0a       	ld.w	r10,r9[0x0]
8001f500:	91 0a       	st.w	r8[0x0],r10
8001f502:	72 1a       	ld.w	r10,r9[0x4]
8001f504:	91 1a       	st.w	r8[0x4],r10
8001f506:	72 2a       	ld.w	r10,r9[0x8]
8001f508:	91 2a       	st.w	r8[0x8],r10
8001f50a:	72 39       	ld.w	r9,r9[0xc]
8001f50c:	91 39       	st.w	r8[0xc],r9
8001f50e:	f0 16 00 fe 	mcall	r6[1016]
8001f512:	2e dd       	sub	sp,-76
8001f514:	ea cb ef e0 	sub	r11,r5,-4128
8001f518:	ee ca 00 40 	sub	r10,r7,64
8001f51c:	f6 c8 00 00 	sub	r8,r11,0
8001f520:	f4 c9 00 00 	sub	r9,r10,0
8001f524:	72 0c       	ld.w	r12,r9[0x0]
8001f526:	91 0c       	st.w	r8[0x0],r12
8001f528:	72 1c       	ld.w	r12,r9[0x4]
8001f52a:	91 1c       	st.w	r8[0x4],r12
8001f52c:	72 2c       	ld.w	r12,r9[0x8]
8001f52e:	91 2c       	st.w	r8[0x8],r12
8001f530:	72 39       	ld.w	r9,r9[0xc]
8001f532:	91 39       	st.w	r8[0xc],r9
8001f534:	f6 c8 ff f0 	sub	r8,r11,-16
8001f538:	f4 c9 ff f0 	sub	r9,r10,-16
8001f53c:	72 0c       	ld.w	r12,r9[0x0]
8001f53e:	91 0c       	st.w	r8[0x0],r12
8001f540:	72 1c       	ld.w	r12,r9[0x4]
8001f542:	91 1c       	st.w	r8[0x4],r12
8001f544:	72 2c       	ld.w	r12,r9[0x8]
8001f546:	91 2c       	st.w	r8[0x8],r12
8001f548:	72 39       	ld.w	r9,r9[0xc]
8001f54a:	91 39       	st.w	r8[0xc],r9
8001f54c:	f6 c8 ff e0 	sub	r8,r11,-32
8001f550:	f4 c9 ff e0 	sub	r9,r10,-32
8001f554:	72 0a       	ld.w	r10,r9[0x0]
8001f556:	91 0a       	st.w	r8[0x0],r10
8001f558:	72 1a       	ld.w	r10,r9[0x4]
8001f55a:	91 1a       	st.w	r8[0x4],r10
8001f55c:	72 2a       	ld.w	r10,r9[0x8]
8001f55e:	91 2a       	st.w	r8[0x8],r10
8001f560:	72 39       	ld.w	r9,r9[0xc]
8001f562:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
8001f564:	fe cc 02 5c 	sub	r12,pc,604
8001f568:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
8001f56c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001f570:	30 ab       	mov	r11,10
8001f572:	10 9c       	mov	r12,r8
8001f574:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8001f578:	fe cc 02 64 	sub	r12,pc,612
8001f57c:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
8001f580:	ec f8 00 00 	ld.w	r8,r6[0]
8001f584:	70 09       	ld.w	r9,r8[0x0]
8001f586:	30 18       	mov	r8,1
8001f588:	f3 68 10 b4 	st.b	r9[4276],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001f58c:	30 08       	mov	r8,0
8001f58e:	ef 68 ff ff 	st.b	r7[-1],r8
8001f592:	c2 18       	rjmp	8001f5d4 <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8001f594:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f598:	ec f9 00 00 	ld.w	r9,r6[0]
8001f59c:	72 09       	ld.w	r9,r9[0x0]
8001f59e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001f5a2:	f4 ca fb f8 	sub	r10,r10,-1032
8001f5a6:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001f5aa:	ec f9 00 00 	ld.w	r9,r6[0]
8001f5ae:	72 09       	ld.w	r9,r9[0x0]
8001f5b0:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8001f5b4:	f6 cb fc 99 	sub	r11,r11,-871
8001f5b8:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8001f5bc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001f5c0:	a3 68       	lsl	r8,0x2
8001f5c2:	ee 08 00 08 	add	r8,r7,r8
8001f5c6:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001f5ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f5ce:	2f f8       	sub	r8,-1
8001f5d0:	ef 68 ff ff 	st.b	r7[-1],r8
8001f5d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001f5d8:	30 28       	mov	r8,2
8001f5da:	f0 09 18 00 	cp.b	r9,r8
8001f5de:	fe 98 ff db 	brls	8001f594 <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8001f5e2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f5e6:	70 05       	ld.w	r5,r8[0x0]
8001f5e8:	ee c8 00 10 	sub	r8,r7,16
8001f5ec:	10 9c       	mov	r12,r8
8001f5ee:	c1 3e       	rcall	8001f214 <vector_norm_sqr>
8001f5f0:	18 98       	mov	r8,r12
8001f5f2:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001f5f6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001f5fa:	2f f8       	sub	r8,-1
8001f5fc:	ef 68 ff fe 	st.b	r7[-2],r8
8001f600:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001f604:	ec f8 00 00 	ld.w	r8,r6[0]
8001f608:	70 08       	ld.w	r8,r8[0x0]
8001f60a:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001f60e:	f0 09 19 00 	cp.h	r9,r8
8001f612:	fe 93 fe d3 	brlo	8001f3b8 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8001f616:	2f 0d       	sub	sp,-64
8001f618:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f61c:	80 01       	ld.sh	r1,r0[0x0]
8001f61e:	f1 ac 4e 75 	ldc0.w	cr14,r12[0x11d4]
8001f622:	6d 62       	ld.w	r2,r6[0x58]
8001f624:	65 72       	ld.w	r2,r2[0x5c]
8001f626:	20 6f       	sub	pc,6
8001f628:	66 20       	ld.w	r0,r3[0x8]
8001f62a:	57 61       	stdsp	sp[0x1d8],r1
8001f62c:	79 70       	ld.w	r0,r12[0x5c]
8001f62e:	6f 69       	ld.w	r9,r7[0x58]
8001f630:	6e 74       	ld.w	r4,r7[0x1c]
8001f632:	20 6f       	sub	pc,6
8001f634:	6e 62       	ld.w	r2,r7[0x18]
8001f636:	6f 61       	ld.w	r1,r7[0x58]
8001f638:	72 64       	ld.w	r4,r9[0x18]
8001f63a:	3a 00       	mov	r0,-96
8001f63c:	0a 00       	add	r0,r5

8001f63e <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
8001f63e:	eb cd 40 c0 	pushm	r6-r7,lr
8001f642:	1a 97       	mov	r7,sp
8001f644:	20 ed       	sub	sp,56
8001f646:	fe f6 03 1a 	ld.w	r6,pc[794]
8001f64a:	1e 26       	rsub	r6,pc
8001f64c:	ef 4c ff cc 	st.w	r7[-52],r12
8001f650:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8001f654:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001f658:	30 48       	mov	r8,4
8001f65a:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
8001f65c:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001f660:	90 08       	ld.sh	r8,r8[0x0]
8001f662:	ec f9 01 24 	ld.w	r9,r6[292]
8001f666:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001f668:	30 18       	mov	r8,1
8001f66a:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
8001f66e:	30 18       	mov	r8,1
8001f670:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001f674:	30 38       	mov	r8,3
8001f676:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001f67a:	31 08       	mov	r8,16
8001f67c:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8001f680:	e0 68 f5 80 	mov	r8,62848
8001f684:	ea 18 f0 d4 	orh	r8,0xf0d4
8001f688:	e0 69 42 5e 	mov	r9,16990
8001f68c:	ea 19 40 47 	orh	r9,0x4047
8001f690:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001f694:	fc 18 60 00 	movh	r8,0x6000
8001f698:	e0 69 44 aa 	mov	r9,17578
8001f69c:	ea 19 40 1a 	orh	r9,0x401a
8001f6a0:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001f6a4:	30 08       	mov	r8,0
8001f6a6:	fc 19 40 34 	movh	r9,0x4034
8001f6aa:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001f6ae:	fc 18 41 20 	movh	r8,0x4120
8001f6b2:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
8001f6b6:	fc 18 40 00 	movh	r8,0x4000
8001f6ba:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001f6be:	30 08       	mov	r8,0
8001f6c0:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001f6c4:	fc 18 42 b4 	movh	r8,0x42b4
8001f6c8:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
8001f6cc:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001f6d0:	10 9b       	mov	r11,r8
8001f6d2:	ee ca 00 30 	sub	r10,r7,48
8001f6d6:	f6 c8 00 00 	sub	r8,r11,0
8001f6da:	f4 c9 00 00 	sub	r9,r10,0
8001f6de:	72 0c       	ld.w	r12,r9[0x0]
8001f6e0:	91 0c       	st.w	r8[0x0],r12
8001f6e2:	72 1c       	ld.w	r12,r9[0x4]
8001f6e4:	91 1c       	st.w	r8[0x4],r12
8001f6e6:	72 2c       	ld.w	r12,r9[0x8]
8001f6e8:	91 2c       	st.w	r8[0x8],r12
8001f6ea:	72 39       	ld.w	r9,r9[0xc]
8001f6ec:	91 39       	st.w	r8[0xc],r9
8001f6ee:	f6 c8 ff f0 	sub	r8,r11,-16
8001f6f2:	f4 c9 ff f0 	sub	r9,r10,-16
8001f6f6:	72 0c       	ld.w	r12,r9[0x0]
8001f6f8:	91 0c       	st.w	r8[0x0],r12
8001f6fa:	72 1c       	ld.w	r12,r9[0x4]
8001f6fc:	91 1c       	st.w	r8[0x4],r12
8001f6fe:	72 2c       	ld.w	r12,r9[0x8]
8001f700:	91 2c       	st.w	r8[0x8],r12
8001f702:	72 39       	ld.w	r9,r9[0xc]
8001f704:	91 39       	st.w	r8[0xc],r9
8001f706:	f6 c8 ff e0 	sub	r8,r11,-32
8001f70a:	f4 c9 ff e0 	sub	r9,r10,-32
8001f70e:	72 0a       	ld.w	r10,r9[0x0]
8001f710:	91 0a       	st.w	r8[0x0],r10
8001f712:	72 1a       	ld.w	r10,r9[0x4]
8001f714:	91 1a       	st.w	r8[0x4],r10
8001f716:	72 2a       	ld.w	r10,r9[0x8]
8001f718:	91 2a       	st.w	r8[0x8],r10
8001f71a:	72 39       	ld.w	r9,r9[0xc]
8001f71c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001f71e:	30 18       	mov	r8,1
8001f720:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001f724:	30 08       	mov	r8,0
8001f726:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001f72a:	30 38       	mov	r8,3
8001f72c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001f730:	31 08       	mov	r8,16
8001f732:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001f736:	fc 18 20 00 	movh	r8,0x2000
8001f73a:	e0 69 42 64 	mov	r9,16996
8001f73e:	ea 19 40 47 	orh	r9,0x4047
8001f742:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001f746:	fc 18 60 00 	movh	r8,0x6000
8001f74a:	e0 69 44 aa 	mov	r9,17578
8001f74e:	ea 19 40 1a 	orh	r9,0x401a
8001f752:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001f756:	30 08       	mov	r8,0
8001f758:	fc 19 40 34 	movh	r9,0x4034
8001f75c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001f760:	fc 18 41 20 	movh	r8,0x4120
8001f764:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
8001f768:	fc 18 40 80 	movh	r8,0x4080
8001f76c:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001f770:	30 08       	mov	r8,0
8001f772:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001f776:	fc 18 42 b4 	movh	r8,0x42b4
8001f77a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8001f77e:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001f782:	2d 08       	sub	r8,-48
8001f784:	10 9b       	mov	r11,r8
8001f786:	ee ca 00 30 	sub	r10,r7,48
8001f78a:	f6 c8 00 00 	sub	r8,r11,0
8001f78e:	f4 c9 00 00 	sub	r9,r10,0
8001f792:	72 0c       	ld.w	r12,r9[0x0]
8001f794:	91 0c       	st.w	r8[0x0],r12
8001f796:	72 1c       	ld.w	r12,r9[0x4]
8001f798:	91 1c       	st.w	r8[0x4],r12
8001f79a:	72 2c       	ld.w	r12,r9[0x8]
8001f79c:	91 2c       	st.w	r8[0x8],r12
8001f79e:	72 39       	ld.w	r9,r9[0xc]
8001f7a0:	91 39       	st.w	r8[0xc],r9
8001f7a2:	f6 c8 ff f0 	sub	r8,r11,-16
8001f7a6:	f4 c9 ff f0 	sub	r9,r10,-16
8001f7aa:	72 0c       	ld.w	r12,r9[0x0]
8001f7ac:	91 0c       	st.w	r8[0x0],r12
8001f7ae:	72 1c       	ld.w	r12,r9[0x4]
8001f7b0:	91 1c       	st.w	r8[0x4],r12
8001f7b2:	72 2c       	ld.w	r12,r9[0x8]
8001f7b4:	91 2c       	st.w	r8[0x8],r12
8001f7b6:	72 39       	ld.w	r9,r9[0xc]
8001f7b8:	91 39       	st.w	r8[0xc],r9
8001f7ba:	f6 c8 ff e0 	sub	r8,r11,-32
8001f7be:	f4 c9 ff e0 	sub	r9,r10,-32
8001f7c2:	72 0a       	ld.w	r10,r9[0x0]
8001f7c4:	91 0a       	st.w	r8[0x0],r10
8001f7c6:	72 1a       	ld.w	r10,r9[0x4]
8001f7c8:	91 1a       	st.w	r8[0x4],r10
8001f7ca:	72 2a       	ld.w	r10,r9[0x8]
8001f7cc:	91 2a       	st.w	r8[0x8],r10
8001f7ce:	72 39       	ld.w	r9,r9[0xc]
8001f7d0:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001f7d2:	30 18       	mov	r8,1
8001f7d4:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001f7d8:	30 08       	mov	r8,0
8001f7da:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001f7de:	30 38       	mov	r8,3
8001f7e0:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001f7e4:	31 08       	mov	r8,16
8001f7e6:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001f7ea:	fc 18 20 00 	movh	r8,0x2000
8001f7ee:	e0 69 42 64 	mov	r9,16996
8001f7f2:	ea 19 40 47 	orh	r9,0x4047
8001f7f6:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001f7fa:	fc 18 80 00 	movh	r8,0x8000
8001f7fe:	e0 69 43 7d 	mov	r9,17277
8001f802:	ea 19 40 1a 	orh	r9,0x401a
8001f806:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
8001f80a:	30 08       	mov	r8,0
8001f80c:	fc 19 40 44 	movh	r9,0x4044
8001f810:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001f814:	fc 18 41 20 	movh	r8,0x4120
8001f818:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
8001f81c:	fc 18 41 70 	movh	r8,0x4170
8001f820:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001f824:	30 08       	mov	r8,0
8001f826:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001f82a:	fc 18 42 b4 	movh	r8,0x42b4
8001f82e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
8001f832:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001f836:	2a 08       	sub	r8,-96
8001f838:	10 9b       	mov	r11,r8
8001f83a:	ee ca 00 30 	sub	r10,r7,48
8001f83e:	f6 c8 00 00 	sub	r8,r11,0
8001f842:	f4 c9 00 00 	sub	r9,r10,0
8001f846:	72 0c       	ld.w	r12,r9[0x0]
8001f848:	91 0c       	st.w	r8[0x0],r12
8001f84a:	72 1c       	ld.w	r12,r9[0x4]
8001f84c:	91 1c       	st.w	r8[0x4],r12
8001f84e:	72 2c       	ld.w	r12,r9[0x8]
8001f850:	91 2c       	st.w	r8[0x8],r12
8001f852:	72 39       	ld.w	r9,r9[0xc]
8001f854:	91 39       	st.w	r8[0xc],r9
8001f856:	f6 c8 ff f0 	sub	r8,r11,-16
8001f85a:	f4 c9 ff f0 	sub	r9,r10,-16
8001f85e:	72 0c       	ld.w	r12,r9[0x0]
8001f860:	91 0c       	st.w	r8[0x0],r12
8001f862:	72 1c       	ld.w	r12,r9[0x4]
8001f864:	91 1c       	st.w	r8[0x4],r12
8001f866:	72 2c       	ld.w	r12,r9[0x8]
8001f868:	91 2c       	st.w	r8[0x8],r12
8001f86a:	72 39       	ld.w	r9,r9[0xc]
8001f86c:	91 39       	st.w	r8[0xc],r9
8001f86e:	f6 c8 ff e0 	sub	r8,r11,-32
8001f872:	f4 c9 ff e0 	sub	r9,r10,-32
8001f876:	72 0a       	ld.w	r10,r9[0x0]
8001f878:	91 0a       	st.w	r8[0x0],r10
8001f87a:	72 1a       	ld.w	r10,r9[0x4]
8001f87c:	91 1a       	st.w	r8[0x4],r10
8001f87e:	72 2a       	ld.w	r10,r9[0x8]
8001f880:	91 2a       	st.w	r8[0x8],r10
8001f882:	72 39       	ld.w	r9,r9[0xc]
8001f884:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001f886:	30 18       	mov	r8,1
8001f888:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001f88c:	30 08       	mov	r8,0
8001f88e:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001f892:	30 38       	mov	r8,3
8001f894:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001f898:	31 08       	mov	r8,16
8001f89a:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8001f89e:	30 08       	mov	r8,0
8001f8a0:	e0 69 42 55 	mov	r9,16981
8001f8a4:	ea 19 40 47 	orh	r9,0x4047
8001f8a8:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001f8ac:	fc 18 80 00 	movh	r8,0x8000
8001f8b0:	e0 69 43 7d 	mov	r9,17277
8001f8b4:	ea 19 40 1a 	orh	r9,0x401a
8001f8b8:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001f8bc:	30 08       	mov	r8,0
8001f8be:	fc 19 40 34 	movh	r9,0x4034
8001f8c2:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
8001f8c6:	fc 18 41 20 	movh	r8,0x4120
8001f8ca:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8001f8ce:	fc 18 41 40 	movh	r8,0x4140
8001f8d2:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001f8d6:	30 08       	mov	r8,0
8001f8d8:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001f8dc:	fc 18 42 b4 	movh	r8,0x42b4
8001f8e0:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
8001f8e4:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001f8e8:	f0 c8 ff 70 	sub	r8,r8,-144
8001f8ec:	10 9b       	mov	r11,r8
8001f8ee:	ee ca 00 30 	sub	r10,r7,48
8001f8f2:	f6 c8 00 00 	sub	r8,r11,0
8001f8f6:	f4 c9 00 00 	sub	r9,r10,0
8001f8fa:	72 0c       	ld.w	r12,r9[0x0]
8001f8fc:	91 0c       	st.w	r8[0x0],r12
8001f8fe:	72 1c       	ld.w	r12,r9[0x4]
8001f900:	91 1c       	st.w	r8[0x4],r12
8001f902:	72 2c       	ld.w	r12,r9[0x8]
8001f904:	91 2c       	st.w	r8[0x8],r12
8001f906:	72 39       	ld.w	r9,r9[0xc]
8001f908:	91 39       	st.w	r8[0xc],r9
8001f90a:	f6 c8 ff f0 	sub	r8,r11,-16
8001f90e:	f4 c9 ff f0 	sub	r9,r10,-16
8001f912:	72 0c       	ld.w	r12,r9[0x0]
8001f914:	91 0c       	st.w	r8[0x0],r12
8001f916:	72 1c       	ld.w	r12,r9[0x4]
8001f918:	91 1c       	st.w	r8[0x4],r12
8001f91a:	72 2c       	ld.w	r12,r9[0x8]
8001f91c:	91 2c       	st.w	r8[0x8],r12
8001f91e:	72 39       	ld.w	r9,r9[0xc]
8001f920:	91 39       	st.w	r8[0xc],r9
8001f922:	f6 c8 ff e0 	sub	r8,r11,-32
8001f926:	f4 c9 ff e0 	sub	r9,r10,-32
8001f92a:	72 0a       	ld.w	r10,r9[0x0]
8001f92c:	91 0a       	st.w	r8[0x0],r10
8001f92e:	72 1a       	ld.w	r10,r9[0x4]
8001f930:	91 1a       	st.w	r8[0x4],r10
8001f932:	72 2a       	ld.w	r10,r9[0x8]
8001f934:	91 2a       	st.w	r8[0x8],r10
8001f936:	72 39       	ld.w	r9,r9[0xc]
8001f938:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
8001f93a:	fe cc 03 1a 	sub	r12,pc,794
8001f93e:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
8001f942:	ec f8 01 24 	ld.w	r8,r6[292]
8001f946:	90 08       	ld.sh	r8,r8[0x0]
8001f948:	5c 78       	castu.h	r8
8001f94a:	30 ab       	mov	r11,10
8001f94c:	10 9c       	mov	r12,r8
8001f94e:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8001f952:	fe cc 03 16 	sub	r12,pc,790
8001f956:	f0 16 00 01 	mcall	r6[4]
	
}
8001f95a:	2f 2d       	sub	sp,-56
8001f95c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f960:	80 01       	ld.sh	r1,r0[0x0]
8001f962:	f4 ce 57 69 	sub	lr,r10,22377
8001f966:	6c 6c       	ld.w	r12,r6[0x18]
8001f968:	20 73       	sub	r3,7
8001f96a:	65 6e       	ld.w	lr,r2[0x58]
8001f96c:	64 20       	ld.w	r0,r2[0x8]
8001f96e:	00 00       	add	r0,r0
8001f970:	20 77       	sub	r7,7
8001f972:	61 79       	ld.w	r9,r0[0x5c]
8001f974:	70 6f       	ld.w	pc,r8[0x18]
8001f976:	69 6e       	ld.w	lr,r4[0x58]
8001f978:	74 73       	ld.w	r3,r10[0x1c]
8001f97a:	0a 00       	add	r0,r5

8001f97c <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
8001f97c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f980:	1a 97       	mov	r7,sp
8001f982:	20 5d       	sub	sp,20
8001f984:	4a d6       	lddpc	r6,8001fa38 <send_count+0xbc>
8001f986:	1e 26       	rsub	r6,pc
8001f988:	ef 4c ff f8 	st.w	r7[-8],r12
8001f98c:	16 98       	mov	r8,r11
8001f98e:	ef 4a ff f0 	st.w	r7[-16],r10
8001f992:	ef 49 ff ec 	st.w	r7[-20],r9
8001f996:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
8001f99a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f99e:	ee c9 00 02 	sub	r9,r7,2
8001f9a2:	12 9b       	mov	r11,r9
8001f9a4:	10 9c       	mov	r12,r8
8001f9a6:	fe b0 fa 88 	rcall	8001eeb6 <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001f9aa:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001f9ae:	ec f8 00 c4 	ld.w	r8,r6[196]
8001f9b2:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001f9b4:	f0 09 18 00 	cp.b	r9,r8
8001f9b8:	c3 c1       	brne	8001fa30 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001f9ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001f9be:	ec f8 00 c4 	ld.w	r8,r6[196]
8001f9c2:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001f9c4:	f0 09 18 00 	cp.b	r9,r8
8001f9c8:	c3 41       	brne	8001fa30 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
8001f9ca:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8001f9ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f9d2:	11 e8       	ld.ub	r8,r8[0x6]
8001f9d4:	10 9a       	mov	r10,r8
8001f9d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f9da:	11 d8       	ld.ub	r8,r8[0x5]
8001f9dc:	10 9b       	mov	r11,r8
8001f9de:	30 0c       	mov	r12,0
8001f9e0:	fe b0 fa 88 	rcall	8001eef0 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
8001f9e4:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001f9e8:	30 08       	mov	r8,0
8001f9ea:	f0 09 19 00 	cp.h	r9,r8
8001f9ee:	c0 f0       	breq	8001fa0c <send_count+0x90>
		{
			*waypoint_sending = true;
8001f9f0:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001f9f4:	30 18       	mov	r8,1
8001f9f6:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
8001f9f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001f9fc:	30 08       	mov	r8,0
8001f9fe:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
8001fa00:	f0 16 00 0f 	mcall	r6[60]
8001fa04:	18 99       	mov	r9,r12
8001fa06:	ec f8 01 78 	ld.w	r8,r6[376]
8001fa0a:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
8001fa0c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fa10:	30 09       	mov	r9,0
8001fa12:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
8001fa14:	fe cc 00 b0 	sub	r12,pc,176
8001fa18:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
8001fa1c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
8001fa20:	30 ab       	mov	r11,10
8001fa22:	10 9c       	mov	r12,r8
8001fa24:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
8001fa28:	fe cc 00 b8 	sub	r12,pc,184
8001fa2c:	f0 16 00 01 	mcall	r6[4]
	}
}
8001fa30:	2f bd       	sub	sp,-20
8001fa32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fa36:	00 00       	add	r0,r0
8001fa38:	80 01       	ld.sh	r1,r0[0x0]
8001fa3a:	f8 0a       	*unknown*
8001fa3c:	41 73       	lddsp	r3,sp[0x5c]
8001fa3e:	6b 69       	ld.w	r9,r5[0x58]
8001fa40:	6e 67       	ld.w	r7,r7[0x18]
8001fa42:	20 66       	sub	r6,6
8001fa44:	6f 72       	ld.w	r2,r7[0x5c]
8001fa46:	20 77       	sub	r7,7
8001fa48:	61 79       	ld.w	r9,r0[0x5c]
8001fa4a:	70 6f       	ld.w	pc,r8[0x18]
8001fa4c:	69 6e       	ld.w	lr,r4[0x58]
8001fa4e:	74 20       	ld.w	r0,r10[0x8]
8001fa50:	6e 75       	ld.w	r5,r7[0x1c]
8001fa52:	6d 62       	ld.w	r2,r6[0x58]
8001fa54:	65 72       	ld.w	r2,r2[0x5c]
8001fa56:	20 00       	sub	r0,0
8001fa58:	53 65       	stdsp	sp[0xd8],r5
8001fa5a:	6e 64       	ld.w	r4,r7[0x18]
8001fa5c:	69 6e       	ld.w	lr,r4[0x58]
8001fa5e:	67 20       	ld.w	r0,r3[0x48]
8001fa60:	77 61       	ld.w	r1,r11[0x58]
8001fa62:	79 70       	ld.w	r0,r12[0x5c]
8001fa64:	6f 69       	ld.w	r9,r7[0x58]
8001fa66:	6e 74       	ld.w	r4,r7[0x1c]
8001fa68:	20 00       	sub	r0,0

8001fa6a <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
8001fa6a:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001fa6e:	1a 97       	mov	r7,sp
8001fa70:	20 9d       	sub	sp,36
8001fa72:	fe f6 02 62 	ld.w	r6,pc[610]
8001fa76:	1e 26       	rsub	r6,pc
8001fa78:	ef 4c ff f8 	st.w	r7[-8],r12
8001fa7c:	ef 4b ff f4 	st.w	r7[-12],r11
8001fa80:	14 98       	mov	r8,r10
8001fa82:	ef 49 ff ec 	st.w	r7[-20],r9
8001fa86:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
8001fa8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001fa8e:	11 88       	ld.ub	r8,r8[0x0]
8001fa90:	58 08       	cp.w	r8,0
8001fa92:	e0 80 01 1e 	breq	8001fcce <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
8001fa96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fa9a:	ee c9 00 04 	sub	r9,r7,4
8001fa9e:	12 9b       	mov	r11,r9
8001faa0:	10 9c       	mov	r12,r8
8001faa2:	fe b0 f9 4b 	rcall	8001ed38 <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
8001faa6:	fe cc 00 6a 	sub	r12,pc,106
8001faaa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8001faae:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001fab2:	5c 78       	castu.h	r8
8001fab4:	30 ab       	mov	r11,10
8001fab6:	10 9c       	mov	r12,r8
8001fab8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001fabc:	fe cc 04 80 	sub	r12,pc,1152
8001fac0:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fac4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fac8:	ec f8 00 c4 	ld.w	r8,r6[196]
8001facc:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001face:	f0 09 18 00 	cp.b	r9,r8
8001fad2:	e0 81 00 fe 	brne	8001fcce <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fad6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001fada:	ec f8 00 c4 	ld.w	r8,r6[196]
8001fade:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001fae0:	f0 09 18 00 	cp.b	r9,r8
8001fae4:	e0 81 00 f5 	brne	8001fcce <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
8001fae8:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001faec:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001faf0:	ec f8 00 ac 	ld.w	r8,r6[172]
8001faf4:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
8001faf6:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8001fafa:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fafe:	70 08       	ld.w	r8,r8[0x0]
8001fb00:	10 39       	cp.w	r9,r8
8001fb02:	e0 8a 00 e6 	brle	8001fcce <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8001fb06:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fb0a:	70 08       	ld.w	r8,r8[0x0]
8001fb0c:	10 99       	mov	r9,r8
8001fb0e:	12 98       	mov	r8,r9
8001fb10:	a1 78       	lsl	r8,0x1
8001fb12:	12 08       	add	r8,r9
8001fb14:	a5 68       	lsl	r8,0x4
8001fb16:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fb1a:	f2 08 00 08 	add	r8,r9,r8
8001fb1e:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fb22:	10 9a       	mov	r10,r8
8001fb24:	12 9b       	mov	r11,r9
8001fb26:	f0 16 00 08 	mcall	r6[32]
8001fb2a:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8001fb2c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fb30:	70 08       	ld.w	r8,r8[0x0]
8001fb32:	10 99       	mov	r9,r8
8001fb34:	12 98       	mov	r8,r9
8001fb36:	a1 78       	lsl	r8,0x1
8001fb38:	12 08       	add	r8,r9
8001fb3a:	a5 68       	lsl	r8,0x4
8001fb3c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fb40:	f2 08 00 08 	add	r8,r9,r8
8001fb44:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fb48:	10 9a       	mov	r10,r8
8001fb4a:	12 9b       	mov	r11,r9
8001fb4c:	f0 16 00 08 	mcall	r6[32]
8001fb50:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8001fb54:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fb58:	70 08       	ld.w	r8,r8[0x0]
8001fb5a:	10 99       	mov	r9,r8
8001fb5c:	12 98       	mov	r8,r9
8001fb5e:	a1 78       	lsl	r8,0x1
8001fb60:	12 08       	add	r8,r9
8001fb62:	a5 68       	lsl	r8,0x4
8001fb64:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fb68:	f2 08 00 08 	add	r8,r9,r8
8001fb6c:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fb70:	10 9a       	mov	r10,r8
8001fb72:	12 9b       	mov	r11,r9
8001fb74:	f0 16 00 08 	mcall	r6[32]
8001fb78:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8001fb7c:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fb80:	70 08       	ld.w	r8,r8[0x0]
8001fb82:	10 99       	mov	r9,r8
8001fb84:	12 98       	mov	r8,r9
8001fb86:	a1 78       	lsl	r8,0x1
8001fb88:	12 08       	add	r8,r9
8001fb8a:	a5 68       	lsl	r8,0x4
8001fb8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fb90:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fb94:	70 58       	ld.w	r8,r8[0x14]
8001fb96:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8001fb9a:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fb9e:	70 08       	ld.w	r8,r8[0x0]
8001fba0:	10 99       	mov	r9,r8
8001fba2:	12 98       	mov	r8,r9
8001fba4:	a1 78       	lsl	r8,0x1
8001fba6:	12 08       	add	r8,r9
8001fba8:	a5 68       	lsl	r8,0x4
8001fbaa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fbae:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fbb2:	70 48       	ld.w	r8,r8[0x10]
8001fbb4:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8001fbb8:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fbbc:	70 08       	ld.w	r8,r8[0x0]
8001fbbe:	10 99       	mov	r9,r8
8001fbc0:	12 98       	mov	r8,r9
8001fbc2:	a1 78       	lsl	r8,0x1
8001fbc4:	12 08       	add	r8,r9
8001fbc6:	a5 68       	lsl	r8,0x4
8001fbc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fbcc:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fbd0:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8001fbd2:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fbd6:	70 08       	ld.w	r8,r8[0x0]
8001fbd8:	10 99       	mov	r9,r8
8001fbda:	12 98       	mov	r8,r9
8001fbdc:	a1 78       	lsl	r8,0x1
8001fbde:	12 08       	add	r8,r9
8001fbe0:	a5 68       	lsl	r8,0x4
8001fbe2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fbe6:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fbea:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
8001fbec:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fbf0:	70 08       	ld.w	r8,r8[0x0]
8001fbf2:	10 99       	mov	r9,r8
8001fbf4:	12 98       	mov	r8,r9
8001fbf6:	a1 78       	lsl	r8,0x1
8001fbf8:	12 08       	add	r8,r9
8001fbfa:	a5 68       	lsl	r8,0x4
8001fbfc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fc00:	f2 08 00 08 	add	r8,r9,r8
8001fc04:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fc06:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
8001fc08:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fc0c:	70 08       	ld.w	r8,r8[0x0]
8001fc0e:	10 99       	mov	r9,r8
8001fc10:	12 98       	mov	r8,r9
8001fc12:	a1 78       	lsl	r8,0x1
8001fc14:	12 08       	add	r8,r9
8001fc16:	a5 68       	lsl	r8,0x4
8001fc18:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fc1c:	f2 08 00 08 	add	r8,r9,r8
8001fc20:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fc22:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8001fc24:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fc28:	70 08       	ld.w	r8,r8[0x0]
8001fc2a:	10 99       	mov	r9,r8
8001fc2c:	12 98       	mov	r8,r9
8001fc2e:	a1 78       	lsl	r8,0x1
8001fc30:	12 08       	add	r8,r9
8001fc32:	a5 68       	lsl	r8,0x4
8001fc34:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fc38:	f2 08 00 08 	add	r8,r9,r8
8001fc3c:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fc3e:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8001fc42:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fc46:	70 08       	ld.w	r8,r8[0x0]
8001fc48:	10 99       	mov	r9,r8
8001fc4a:	12 98       	mov	r8,r9
8001fc4c:	a1 78       	lsl	r8,0x1
8001fc4e:	12 08       	add	r8,r9
8001fc50:	a5 68       	lsl	r8,0x4
8001fc52:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fc56:	f2 08 00 08 	add	r8,r9,r8
8001fc5a:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8001fc5c:	10 9c       	mov	r12,r8
8001fc5e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001fc62:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001fc66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fc6a:	11 e8       	ld.ub	r8,r8[0x6]
8001fc6c:	10 9a       	mov	r10,r8
8001fc6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fc72:	11 d8       	ld.ub	r8,r8[0x5]
8001fc74:	10 9b       	mov	r11,r8
8001fc76:	1a d5       	st.w	--sp,r5
8001fc78:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001fc7c:	1a d8       	st.w	--sp,r8
8001fc7e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001fc82:	1a d8       	st.w	--sp,r8
8001fc84:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001fc88:	1a d8       	st.w	--sp,r8
8001fc8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001fc8e:	1a d8       	st.w	--sp,r8
8001fc90:	1a d0       	st.w	--sp,r0
8001fc92:	1a d1       	st.w	--sp,r1
8001fc94:	1a d2       	st.w	--sp,r2
8001fc96:	1a d3       	st.w	--sp,r3
8001fc98:	1a de       	st.w	--sp,lr
8001fc9a:	18 98       	mov	r8,r12
8001fc9c:	30 0c       	mov	r12,0
8001fc9e:	fe b0 f5 e3 	rcall	8001e864 <mavlink_msg_mission_item_send>
8001fca2:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
8001fca4:	fe cc 02 4c 	sub	r12,pc,588
8001fca8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
8001fcac:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fcb0:	70 08       	ld.w	r8,r8[0x0]
8001fcb2:	30 ab       	mov	r11,10
8001fcb4:	10 9c       	mov	r12,r8
8001fcb6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001fcba:	fe cc 06 7e 	sub	r12,pc,1662
8001fcbe:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
8001fcc2:	f0 16 00 0f 	mcall	r6[60]
8001fcc6:	18 99       	mov	r9,r12
8001fcc8:	ec f8 01 78 	ld.w	r8,r6[376]
8001fccc:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
8001fcce:	2f 7d       	sub	sp,-36
8001fcd0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001fcd4:	80 01       	ld.sh	r1,r0[0x0]
8001fcd6:	f8 fa 41 63 	ld.w	r10,r12[16739]
8001fcda:	6b 6e       	ld.w	lr,r5[0x58]
8001fcdc:	6f 77       	ld.w	r7,r7[0x5c]
8001fcde:	6c 65       	ld.w	r5,r6[0x18]
8001fce0:	64 67       	ld.w	r7,r2[0x18]
8001fce2:	6d 65       	ld.w	r5,r6[0x58]
8001fce4:	6e 74       	ld.w	r4,r7[0x1c]
8001fce6:	20 72       	sub	r2,7
8001fce8:	65 63       	ld.w	r3,r2[0x58]
8001fcea:	65 69       	ld.w	r9,r2[0x58]
8001fcec:	76 65       	ld.w	r5,r11[0x18]
8001fcee:	64 2c       	ld.w	r12,r2[0x8]
8001fcf0:	20 65       	sub	r5,6
8001fcf2:	6e 64       	ld.w	r4,r7[0x18]
8001fcf4:	20 6f       	sub	pc,6
8001fcf6:	66 20       	ld.w	r0,r3[0x8]
8001fcf8:	77 61       	ld.w	r1,r11[0x58]
8001fcfa:	79 70       	ld.w	r0,r12[0x5c]
8001fcfc:	6f 69       	ld.w	r9,r7[0x58]
8001fcfe:	6e 74       	ld.w	r4,r7[0x1c]
8001fd00:	20 73       	sub	r3,7
8001fd02:	65 6e       	ld.w	lr,r2[0x58]
8001fd04:	64 69       	ld.w	r9,r2[0x18]
8001fd06:	6e 67       	ld.w	r7,r7[0x18]
8001fd08:	2e 0a       	sub	r10,-32
	...

8001fd0c <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
8001fd0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd10:	1a 97       	mov	r7,sp
8001fd12:	20 3d       	sub	sp,12
8001fd14:	49 76       	lddpc	r6,8001fd70 <receive_ack_msg+0x64>
8001fd16:	1e 26       	rsub	r6,pc
8001fd18:	ef 4c ff f8 	st.w	r7[-8],r12
8001fd1c:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
8001fd20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fd24:	ee c9 00 03 	sub	r9,r7,3
8001fd28:	12 9b       	mov	r11,r9
8001fd2a:	10 9c       	mov	r12,r8
8001fd2c:	fe b0 fa 20 	rcall	8001f16c <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fd30:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8001fd34:	ec f8 00 c4 	ld.w	r8,r6[196]
8001fd38:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001fd3a:	f0 09 18 00 	cp.b	r9,r8
8001fd3e:	c1 51       	brne	8001fd68 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fd40:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fd44:	ec f8 00 c4 	ld.w	r8,r6[196]
8001fd48:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001fd4a:	f0 09 18 00 	cp.b	r9,r8
8001fd4e:	c0 d1       	brne	8001fd68 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
8001fd50:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fd54:	30 08       	mov	r8,0
8001fd56:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
8001fd58:	ec f8 00 ac 	ld.w	r8,r6[172]
8001fd5c:	30 09       	mov	r9,0
8001fd5e:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
8001fd60:	fe cc 00 88 	sub	r12,pc,136
8001fd64:	f0 16 00 01 	mcall	r6[4]
	}
}
8001fd68:	2f dd       	sub	sp,-12
8001fd6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fd6e:	00 00       	add	r0,r0
8001fd70:	80 01       	ld.sh	r1,r0[0x0]
8001fd72:	fb 9a       	*unknown*
8001fd74:	52 65       	stdsp	sp[0x98],r5
8001fd76:	63 65       	ld.w	r5,r1[0x58]
8001fd78:	69 76       	ld.w	r6,r4[0x5c]
8001fd7a:	69 6e       	ld.w	lr,r4[0x58]
8001fd7c:	67 20       	ld.w	r0,r3[0x48]
8001fd7e:	00 00       	add	r0,r0
8001fd80:	20 6e       	sub	lr,6
8001fd82:	65 77       	ld.w	r7,r2[0x5c]
8001fd84:	20 77       	sub	r7,7
8001fd86:	61 79       	ld.w	r9,r0[0x5c]
8001fd88:	70 6f       	ld.w	pc,r8[0x18]
8001fd8a:	69 6e       	ld.w	lr,r4[0x58]
8001fd8c:	74 73       	ld.w	r3,r10[0x1c]
8001fd8e:	2e 20       	sub	r0,-30
8001fd90:	00 00       	add	r0,r0
8001fd92:	00 00       	add	r0,r0
8001fd94:	4e 65       	lddpc	r5,8001ff2c <receive_count+0x162>
8001fd96:	77 20       	ld.w	r0,r11[0x48]
8001fd98:	74 6f       	ld.w	pc,r10[0x18]
8001fd9a:	74 61       	ld.w	r1,r10[0x18]
8001fd9c:	6c 20       	ld.w	r0,r6[0x8]
8001fd9e:	6e 75       	ld.w	r5,r7[0x1c]
8001fda0:	6d 62       	ld.w	r2,r6[0x58]
8001fda2:	65 72       	ld.w	r2,r2[0x5c]
8001fda4:	20 6f       	sub	pc,6
8001fda6:	66 20       	ld.w	r0,r3[0x8]
8001fda8:	77 61       	ld.w	r1,r11[0x58]
8001fdaa:	79 70       	ld.w	r0,r12[0x5c]
8001fdac:	6f 69       	ld.w	r9,r7[0x58]
8001fdae:	6e 74       	ld.w	r4,r7[0x1c]
8001fdb0:	73 3a       	ld.w	r10,r9[0x4c]
8001fdb2:	00 00       	add	r0,r0
8001fdb4:	41 73       	lddsp	r3,sp[0x5c]
8001fdb6:	6b 69       	ld.w	r9,r5[0x58]
8001fdb8:	6e 67       	ld.w	r7,r7[0x18]
8001fdba:	20 66       	sub	r6,6
8001fdbc:	6f 72       	ld.w	r2,r7[0x5c]
8001fdbe:	20 77       	sub	r7,7
8001fdc0:	61 79       	ld.w	r9,r0[0x5c]
8001fdc2:	70 6f       	ld.w	pc,r8[0x18]
8001fdc4:	69 6e       	ld.w	lr,r4[0x58]
8001fdc6:	74 20       	ld.w	r0,r10[0x8]
	...

8001fdca <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
8001fdca:	eb cd 40 c0 	pushm	r6-r7,lr
8001fdce:	1a 97       	mov	r7,sp
8001fdd0:	20 5d       	sub	sp,20
8001fdd2:	4d 46       	lddpc	r6,8001ff20 <receive_count+0x156>
8001fdd4:	1e 26       	rsub	r6,pc
8001fdd6:	ef 4c ff f8 	st.w	r7[-8],r12
8001fdda:	ef 4b ff f4 	st.w	r7[-12],r11
8001fdde:	ef 4a ff f0 	st.w	r7[-16],r10
8001fde2:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
8001fde6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fdea:	ee c9 00 04 	sub	r9,r7,4
8001fdee:	12 9b       	mov	r11,r9
8001fdf0:	10 9c       	mov	r12,r8
8001fdf2:	fe b0 f8 e3 	rcall	8001efb8 <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fdf6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fdfa:	ec f8 00 c4 	ld.w	r8,r6[196]
8001fdfe:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001fe00:	f0 09 18 00 	cp.b	r9,r8
8001fe04:	e0 81 00 8b 	brne	8001ff1a <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fe08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001fe0c:	ec f8 00 c4 	ld.w	r8,r6[196]
8001fe10:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8001fe12:	f0 09 18 00 	cp.b	r9,r8
8001fe16:	e0 81 00 82 	brne	8001ff1a <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
8001fe1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001fe1e:	11 88       	ld.ub	r8,r8[0x0]
8001fe20:	ec 18 00 01 	eorl	r8,0x1
8001fe24:	5c 58       	castu.b	r8
8001fe26:	c5 a0       	breq	8001feda <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
8001fe28:	ec f9 01 24 	ld.w	r9,r6[292]
8001fe2c:	30 08       	mov	r8,0
8001fe2e:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
8001fe30:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fe34:	30 08       	mov	r8,0
8001fe36:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
8001fe38:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001fe3c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001fe40:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fe44:	90 08       	ld.sh	r8,r8[0x0]
8001fe46:	5c 78       	castu.h	r8
8001fe48:	f2 08 00 08 	add	r8,r9,r8
8001fe4c:	58 a8       	cp.w	r8,10
8001fe4e:	e0 8a 00 0a 	brle	8001fe62 <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
8001fe52:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fe56:	90 08       	ld.sh	r8,r8[0x0]
8001fe58:	f0 08 11 0a 	rsub	r8,r8,10
8001fe5c:	5c 88       	casts.h	r8
8001fe5e:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
8001fe62:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8001fe66:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fe6a:	90 08       	ld.sh	r8,r8[0x0]
8001fe6c:	f2 08 00 08 	add	r8,r9,r8
8001fe70:	5c 88       	casts.h	r8
8001fe72:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fe76:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
8001fe78:	fe cc 01 04 	sub	r12,pc,260
8001fe7c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
8001fe80:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001fe84:	5c 78       	castu.h	r8
8001fe86:	30 ab       	mov	r11,10
8001fe88:	10 9c       	mov	r12,r8
8001fe8a:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
8001fe8e:	fe cc 01 0e 	sub	r12,pc,270
8001fe92:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
8001fe96:	fe cc 01 02 	sub	r12,pc,258
8001fe9a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
8001fe9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fea2:	90 08       	ld.sh	r8,r8[0x0]
8001fea4:	5c 78       	castu.h	r8
8001fea6:	30 ab       	mov	r11,10
8001fea8:	10 9c       	mov	r12,r8
8001feaa:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001feae:	fe cc 08 72 	sub	r12,pc,2162
8001feb2:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
8001feb6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001feba:	30 18       	mov	r8,1
8001febc:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
8001febe:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001fec2:	30 08       	mov	r8,0
8001fec4:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
8001fec6:	ec f8 01 00 	ld.w	r8,r6[256]
8001feca:	30 09       	mov	r9,0
8001fecc:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
8001fece:	f0 16 00 0f 	mcall	r6[60]
8001fed2:	18 99       	mov	r9,r12
8001fed4:	ec f8 01 78 	ld.w	r8,r6[376]
8001fed8:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
8001feda:	ec f8 01 00 	ld.w	r8,r6[256]
8001fede:	70 08       	ld.w	r8,r8[0x0]
8001fee0:	5c 88       	casts.h	r8
8001fee2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001fee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001feea:	11 e8       	ld.ub	r8,r8[0x6]
8001feec:	10 9a       	mov	r10,r8
8001feee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fef2:	11 d8       	ld.ub	r8,r8[0x5]
8001fef4:	10 9b       	mov	r11,r8
8001fef6:	30 0c       	mov	r12,0
8001fef8:	fe b0 f6 bc 	rcall	8001ec70 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
8001fefc:	fe cc 01 48 	sub	r12,pc,328
8001ff00:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
8001ff04:	ec f8 01 00 	ld.w	r8,r6[256]
8001ff08:	70 08       	ld.w	r8,r8[0x0]
8001ff0a:	30 ab       	mov	r11,10
8001ff0c:	10 9c       	mov	r12,r8
8001ff0e:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
8001ff12:	fe cc 08 d6 	sub	r12,pc,2262
8001ff16:	f0 16 00 01 	mcall	r6[4]
	}
	
}
8001ff1a:	2f bd       	sub	sp,-20
8001ff1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ff20:	80 01       	ld.sh	r1,r0[0x0]
8001ff22:	fc 58 4e 65 	cp.w	r8,-176539
8001ff26:	77 20       	ld.w	r0,r11[0x48]
8001ff28:	77 61       	ld.w	r1,r11[0x58]
8001ff2a:	79 70       	ld.w	r0,r12[0x5c]
8001ff2c:	6f 69       	ld.w	r9,r7[0x58]
8001ff2e:	6e 74       	ld.w	r4,r7[0x1c]
8001ff30:	20 72       	sub	r2,7
8001ff32:	65 63       	ld.w	r3,r2[0x58]
8001ff34:	65 69       	ld.w	r9,r2[0x58]
8001ff36:	76 65       	ld.w	r5,r11[0x18]
8001ff38:	64 20       	ld.w	r0,r2[0x8]
8001ff3a:	00 00       	add	r0,r0
8001ff3c:	20 72       	sub	r2,7
8001ff3e:	65 71       	ld.w	r1,r2[0x5c]
8001ff40:	75 65       	ld.w	r5,r10[0x58]
8001ff42:	73 74       	ld.w	r4,r9[0x5c]
8001ff44:	65 64       	ld.w	r4,r2[0x58]
8001ff46:	20 6e       	sub	lr,6
8001ff48:	75 6d       	ld.w	sp,r10[0x58]
8001ff4a:	20 3a       	sub	r10,3
8001ff4c:	00 00       	add	r0,r0
8001ff4e:	00 00       	add	r0,r0
8001ff50:	20 72       	sub	r2,7
8001ff52:	65 63       	ld.w	r3,r2[0x58]
8001ff54:	65 69       	ld.w	r9,r2[0x58]
8001ff56:	76 69       	ld.w	r9,r11[0x18]
8001ff58:	6e 67       	ld.w	r7,r7[0x18]
8001ff5a:	20 6e       	sub	lr,6
8001ff5c:	75 6d       	ld.w	sp,r10[0x58]
8001ff5e:	20 3a       	sub	r10,3
8001ff60:	00 00       	add	r0,r0
8001ff62:	00 00       	add	r0,r0
8001ff64:	52 65       	stdsp	sp[0x98],r5
8001ff66:	63 65       	ld.w	r5,r1[0x58]
8001ff68:	69 76       	ld.w	r6,r4[0x5c]
8001ff6a:	69 6e       	ld.w	lr,r4[0x58]
8001ff6c:	67 20       	ld.w	r0,r3[0x48]
8001ff6e:	67 6f       	ld.w	pc,r3[0x58]
8001ff70:	6f 64       	ld.w	r4,r7[0x58]
8001ff72:	20 77       	sub	r7,7
8001ff74:	61 79       	ld.w	r9,r0[0x5c]
8001ff76:	70 6f       	ld.w	pc,r8[0x18]
8001ff78:	69 6e       	ld.w	lr,r4[0x58]
8001ff7a:	74 2c       	ld.w	r12,r10[0x8]
8001ff7c:	20 6e       	sub	lr,6
8001ff7e:	75 6d       	ld.w	sp,r10[0x58]
8001ff80:	62 65       	ld.w	r5,r1[0x18]
8001ff82:	72 20       	ld.w	r0,r9[0x8]
8001ff84:	00 00       	add	r0,r0
8001ff86:	00 00       	add	r0,r0
8001ff88:	20 6f       	sub	pc,6
8001ff8a:	66 20       	ld.w	r0,r3[0x8]
8001ff8c:	00 00       	add	r0,r0
8001ff8e:	00 00       	add	r0,r0
8001ff90:	66 6c       	ld.w	r12,r3[0x18]
8001ff92:	69 67       	ld.w	r7,r4[0x58]
8001ff94:	68 74       	ld.w	r4,r4[0x1c]
8001ff96:	20 70       	sub	r0,7
8001ff98:	6c 61       	ld.w	r1,r6[0x18]
8001ff9a:	6e 20       	ld.w	r0,r7[0x8]
8001ff9c:	72 65       	ld.w	r5,r9[0x18]
8001ff9e:	63 65       	ld.w	r5,r1[0x58]
8001ffa0:	69 76       	ld.w	r6,r4[0x5c]
8001ffa2:	65 64       	ld.w	r4,r2[0x58]
8001ffa4:	21 0a       	sub	r10,16
8001ffa6:	00 00       	add	r0,r0
8001ffa8:	41 63       	lddsp	r3,sp[0x58]
8001ffaa:	6b 20       	ld.w	r0,r5[0x48]
8001ffac:	6e 6f       	ld.w	pc,r7[0x18]
8001ffae:	74 20       	ld.w	r0,r10[0x8]
8001ffb0:	72 65       	ld.w	r5,r9[0x18]
8001ffb2:	63 65       	ld.w	r5,r1[0x58]
8001ffb4:	69 76       	ld.w	r6,r4[0x5c]
8001ffb6:	65 64       	ld.w	r4,r2[0x58]
8001ffb8:	21 00       	sub	r0,16

8001ffba <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
8001ffba:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffbe:	1a 97       	mov	r7,sp
8001ffc0:	21 bd       	sub	sp,108
8001ffc2:	fe f6 03 02 	ld.w	r6,pc[770]
8001ffc6:	1e 26       	rsub	r6,pc
8001ffc8:	ef 4c ff a0 	st.w	r7[-96],r12
8001ffcc:	ef 4b ff 9c 	st.w	r7[-100],r11
8001ffd0:	14 98       	mov	r8,r10
8001ffd2:	ef 49 ff 94 	st.w	r7[-108],r9
8001ffd6:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
8001ffda:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ffde:	ee c9 00 2c 	sub	r9,r7,44
8001ffe2:	12 9b       	mov	r11,r9
8001ffe4:	10 9c       	mov	r12,r8
8001ffe6:	fe b0 f5 cb 	rcall	8001eb7c <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001ffea:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8001ffee:	ec f8 00 70 	ld.w	r8,r6[112]
8001fff2:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
8001fff4:	f0 09 18 00 	cp.b	r9,r8
8001fff8:	e0 81 01 63 	brne	800202be <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8001fffc:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80020000:	ec f8 00 c4 	ld.w	r8,r6[196]
80020004:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020006:	f0 09 18 00 	cp.b	r9,r8
8002000a:	e0 81 01 5a 	brne	800202be <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
8002000e:	f0 16 00 0f 	mcall	r6[60]
80020012:	18 99       	mov	r9,r12
80020014:	ec f8 01 78 	ld.w	r8,r6[376]
80020018:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
8002001a:	ef 08 ff f2 	ld.sh	r8,r7[-14]
8002001e:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
80020022:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020026:	10 9c       	mov	r12,r8
80020028:	f0 16 00 02 	mcall	r6[8]
8002002c:	14 98       	mov	r8,r10
8002002e:	16 99       	mov	r9,r11
80020030:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
80020034:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020038:	10 9c       	mov	r12,r8
8002003a:	f0 16 00 02 	mcall	r6[8]
8002003e:	14 98       	mov	r8,r10
80020040:	16 99       	mov	r9,r11
80020042:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
80020046:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002004a:	10 9c       	mov	r12,r8
8002004c:	f0 16 00 02 	mcall	r6[8]
80020050:	14 98       	mov	r8,r10
80020052:	16 99       	mov	r9,r11
80020054:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80020058:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002005c:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
80020060:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80020064:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020068:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002006c:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80020070:	ee f8 ff d4 	ld.w	r8,r7[-44]
80020074:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020078:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002007c:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80020080:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020084:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020088:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002008c:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80020090:	fe cc 01 6c 	sub	r12,pc,364
80020094:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020098:	fe cc 01 5c 	sub	r12,pc,348
8002009c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
800200a0:	ec f8 01 00 	ld.w	r8,r6[256]
800200a4:	70 08       	ld.w	r8,r8[0x0]
800200a6:	30 ab       	mov	r11,10
800200a8:	10 9c       	mov	r12,r8
800200aa:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
800200ae:	fe cc 01 5e 	sub	r12,pc,350
800200b2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
800200b6:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800200ba:	5c 78       	castu.h	r8
800200bc:	30 ab       	mov	r11,10
800200be:	10 9c       	mov	r12,r8
800200c0:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
800200c4:	fe cc 0a 88 	sub	r12,pc,2696
800200c8:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
800200cc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800200d0:	30 28       	mov	r8,2
800200d2:	f0 09 18 00 	cp.b	r9,r8
800200d6:	c0 e1       	brne	800200f2 <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800200d8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800200dc:	11 e8       	ld.ub	r8,r8[0x6]
800200de:	10 9a       	mov	r10,r8
800200e0:	ee f8 ff a0 	ld.w	r8,r7[-96]
800200e4:	11 d8       	ld.ub	r8,r8[0x5]
800200e6:	30 19       	mov	r9,1
800200e8:	10 9b       	mov	r11,r8
800200ea:	30 0c       	mov	r12,0
800200ec:	fe b0 f7 e8 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
800200f0:	ce 78       	rjmp	800202be <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
800200f2:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800200f6:	30 38       	mov	r8,3
800200f8:	f0 09 18 00 	cp.b	r9,r8
800200fc:	c0 e1       	brne	80020118 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800200fe:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020102:	11 e8       	ld.ub	r8,r8[0x6]
80020104:	10 9a       	mov	r10,r8
80020106:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002010a:	11 d8       	ld.ub	r8,r8[0x5]
8002010c:	30 19       	mov	r9,1
8002010e:	10 9b       	mov	r11,r8
80020110:	30 0c       	mov	r12,0
80020112:	fe b0 f7 d5 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
80020116:	cd 48       	rjmp	800202be <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80020118:	ee f8 ff 94 	ld.w	r8,r7[-108]
8002011c:	11 88       	ld.ub	r8,r8[0x0]
8002011e:	58 08       	cp.w	r8,0
80020120:	e0 80 00 bb 	breq	80020296 <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80020124:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020128:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002012c:	ec f8 01 00 	ld.w	r8,r6[256]
80020130:	70 08       	ld.w	r8,r8[0x0]
80020132:	10 39       	cp.w	r9,r8
80020134:	e0 81 00 c5 	brne	800202be <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80020138:	fe cc 01 d4 	sub	r12,pc,468
8002013c:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80020140:	ec f8 01 00 	ld.w	r8,r6[256]
80020144:	70 08       	ld.w	r8,r8[0x0]
80020146:	30 ab       	mov	r11,10
80020148:	10 9c       	mov	r12,r8
8002014a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
8002014e:	fe cc 01 c6 	sub	r12,pc,454
80020152:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80020156:	ef 19 ff 98 	ld.uh	r9,r7[-104]
8002015a:	ec f8 01 24 	ld.w	r8,r6[292]
8002015e:	90 08       	ld.sh	r8,r8[0x0]
80020160:	5c 78       	castu.h	r8
80020162:	f2 08 01 08 	sub	r8,r9,r8
80020166:	30 ab       	mov	r11,10
80020168:	10 9c       	mov	r12,r8
8002016a:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8002016e:	fe cc 0b 32 	sub	r12,pc,2866
80020172:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80020176:	ec f8 01 24 	ld.w	r8,r6[292]
8002017a:	90 08       	ld.sh	r8,r8[0x0]
8002017c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020180:	ec f8 01 00 	ld.w	r8,r6[256]
80020184:	70 08       	ld.w	r8,r8[0x0]
80020186:	f2 08 00 08 	add	r8,r9,r8
8002018a:	10 99       	mov	r9,r8
8002018c:	12 98       	mov	r8,r9
8002018e:	a1 78       	lsl	r8,0x1
80020190:	12 08       	add	r8,r9
80020192:	a5 68       	lsl	r8,0x4
80020194:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020198:	f2 08 00 08 	add	r8,r9,r8
8002019c:	10 9b       	mov	r11,r8
8002019e:	ee ca 00 5c 	sub	r10,r7,92
800201a2:	f6 c8 00 00 	sub	r8,r11,0
800201a6:	f4 c9 00 00 	sub	r9,r10,0
800201aa:	72 0c       	ld.w	r12,r9[0x0]
800201ac:	91 0c       	st.w	r8[0x0],r12
800201ae:	72 1c       	ld.w	r12,r9[0x4]
800201b0:	91 1c       	st.w	r8[0x4],r12
800201b2:	72 2c       	ld.w	r12,r9[0x8]
800201b4:	91 2c       	st.w	r8[0x8],r12
800201b6:	72 39       	ld.w	r9,r9[0xc]
800201b8:	91 39       	st.w	r8[0xc],r9
800201ba:	f6 c8 ff f0 	sub	r8,r11,-16
800201be:	f4 c9 ff f0 	sub	r9,r10,-16
800201c2:	72 0c       	ld.w	r12,r9[0x0]
800201c4:	91 0c       	st.w	r8[0x0],r12
800201c6:	72 1c       	ld.w	r12,r9[0x4]
800201c8:	91 1c       	st.w	r8[0x4],r12
800201ca:	72 2c       	ld.w	r12,r9[0x8]
800201cc:	91 2c       	st.w	r8[0x8],r12
800201ce:	72 39       	ld.w	r9,r9[0xc]
800201d0:	91 39       	st.w	r8[0xc],r9
800201d2:	f6 c8 ff e0 	sub	r8,r11,-32
800201d6:	f4 c9 ff e0 	sub	r9,r10,-32
800201da:	72 0a       	ld.w	r10,r9[0x0]
800201dc:	91 0a       	st.w	r8[0x0],r10
800201de:	72 1a       	ld.w	r10,r9[0x4]
800201e0:	91 1a       	st.w	r8[0x4],r10
800201e2:	72 2a       	ld.w	r10,r9[0x8]
800201e4:	91 2a       	st.w	r8[0x8],r10
800201e6:	72 39       	ld.w	r9,r9[0xc]
800201e8:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
800201ea:	ec f8 01 00 	ld.w	r8,r6[256]
800201ee:	70 08       	ld.w	r8,r8[0x0]
800201f0:	f0 c9 ff ff 	sub	r9,r8,-1
800201f4:	ec f8 01 00 	ld.w	r8,r6[256]
800201f8:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
800201fa:	ec f8 01 24 	ld.w	r8,r6[292]
800201fe:	90 08       	ld.sh	r8,r8[0x0]
80020200:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020204:	ec f8 01 00 	ld.w	r8,r6[256]
80020208:	70 08       	ld.w	r8,r8[0x0]
8002020a:	10 09       	add	r9,r8
8002020c:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80020210:	10 39       	cp.w	r9,r8
80020212:	c2 11       	brne	80020254 <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80020214:	30 18       	mov	r8,1
80020216:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
8002021a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002021e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020222:	11 e8       	ld.ub	r8,r8[0x6]
80020224:	10 9a       	mov	r10,r8
80020226:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002022a:	11 d8       	ld.ub	r8,r8[0x5]
8002022c:	10 9b       	mov	r11,r8
8002022e:	30 0c       	mov	r12,0
80020230:	fe b0 f7 46 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80020234:	fe cc 02 a4 	sub	r12,pc,676
80020238:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
8002023c:	ee f9 ff 94 	ld.w	r9,r7[-108]
80020240:	30 08       	mov	r8,0
80020242:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80020244:	ec f9 01 24 	ld.w	r9,r6[292]
80020248:	ef 08 ff 98 	ld.sh	r8,r7[-104]
8002024c:	b2 08       	st.h	r9[0x0],r8
						init_wp();
8002024e:	f0 16 00 8d 	mcall	r6[564]
80020252:	c3 68       	rjmp	800202be <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020254:	ec f8 01 00 	ld.w	r8,r6[256]
80020258:	70 08       	ld.w	r8,r8[0x0]
8002025a:	5c 88       	casts.h	r8
8002025c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020260:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020264:	11 e8       	ld.ub	r8,r8[0x6]
80020266:	10 9a       	mov	r10,r8
80020268:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002026c:	11 d8       	ld.ub	r8,r8[0x5]
8002026e:	10 9b       	mov	r11,r8
80020270:	30 0c       	mov	r12,0
80020272:	fe b0 f4 ff 	rcall	8001ec70 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80020276:	fe cc 04 c2 	sub	r12,pc,1218
8002027a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
8002027e:	ec f8 01 00 	ld.w	r8,r6[256]
80020282:	70 08       	ld.w	r8,r8[0x0]
80020284:	30 ab       	mov	r11,10
80020286:	10 9c       	mov	r12,r8
80020288:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8002028c:	fe cc 0c 50 	sub	r12,pc,3152
80020290:	f0 16 00 01 	mcall	r6[4]
80020294:	c1 58       	rjmp	800202be <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80020296:	30 18       	mov	r8,1
80020298:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
8002029c:	fe cc 02 f4 	sub	r12,pc,756
800202a0:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
800202a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800202a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800202ac:	11 e8       	ld.ub	r8,r8[0x6]
800202ae:	10 9a       	mov	r10,r8
800202b0:	ee f8 ff a0 	ld.w	r8,r7[-96]
800202b4:	11 d8       	ld.ub	r8,r8[0x5]
800202b6:	10 9b       	mov	r11,r8
800202b8:	30 0c       	mov	r12,0
800202ba:	fe b0 f7 01 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
800202be:	2e 5d       	sub	sp,-108
800202c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800202c4:	80 01       	ld.sh	r1,r0[0x0]
800202c6:	fe 4a 73 65 	cp.w	r10,-101531
800202ca:	74 74       	ld.w	r4,r10[0x1c]
800202cc:	69 6e       	ld.w	lr,r4[0x58]
800202ce:	67 20       	ld.w	r0,r3[0x48]
800202d0:	63 75       	ld.w	r5,r1[0x5c]
800202d2:	72 72       	ld.w	r2,r9[0x1c]
800202d4:	65 6e       	ld.w	lr,r2[0x58]
800202d6:	74 20       	ld.w	r0,r10[0x8]
800202d8:	77 70       	ld.w	r0,r11[0x5c]
800202da:	00 00       	add	r0,r0
800202dc:	53 65       	stdsp	sp[0xd8],r5
800202de:	74 20       	ld.w	r0,r10[0x8]
800202e0:	63 75       	ld.w	r5,r1[0x5c]
800202e2:	72 72       	ld.w	r2,r9[0x1c]
800202e4:	65 6e       	ld.w	lr,r2[0x58]
800202e6:	74 20       	ld.w	r0,r10[0x8]
800202e8:	77 61       	ld.w	r1,r11[0x58]
800202ea:	79 70       	ld.w	r0,r12[0x5c]
800202ec:	6f 69       	ld.w	r9,r7[0x58]
800202ee:	6e 74       	ld.w	r4,r7[0x1c]
800202f0:	20 74       	sub	r4,7
800202f2:	6f 20       	ld.w	r0,r7[0x48]
800202f4:	6e 75       	ld.w	r5,r7[0x1c]
800202f6:	6d 62       	ld.w	r2,r6[0x58]
800202f8:	65 72       	ld.w	r2,r2[0x5c]
	...

800202fc <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
800202fc:	eb cd 40 c0 	pushm	r6-r7,lr
80020300:	1a 97       	mov	r7,sp
80020302:	20 5d       	sub	sp,20
80020304:	4c 06       	lddpc	r6,80020404 <set_current_wp+0x108>
80020306:	1e 26       	rsub	r6,pc
80020308:	ef 4c ff f4 	st.w	r7[-12],r12
8002030c:	ef 4b ff f0 	st.w	r7[-16],r11
80020310:	14 98       	mov	r8,r10
80020312:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
80020316:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002031a:	ee c9 00 08 	sub	r9,r7,8
8002031e:	12 9b       	mov	r11,r9
80020320:	10 9c       	mov	r12,r8
80020322:	fe b0 f5 65 	rcall	8001edec <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020326:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8002032a:	ec f8 00 70 	ld.w	r8,r6[112]
8002032e:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020330:	f0 09 18 00 	cp.b	r9,r8
80020334:	c6 41       	brne	800203fc <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020336:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002033a:	ec f8 00 c4 	ld.w	r8,r6[196]
8002033e:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020340:	f0 09 18 00 	cp.b	r9,r8
80020344:	c5 c1       	brne	800203fc <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80020346:	fe cc 00 7e 	sub	r12,pc,126
8002034a:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
8002034e:	30 08       	mov	r8,0
80020350:	ef 48 ff fc 	st.w	r7[-4],r8
80020354:	c1 08       	rjmp	80020374 <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80020356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002035a:	a3 68       	lsl	r8,0x2
8002035c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020360:	f2 08 00 08 	add	r8,r9,r8
80020364:	70 09       	ld.w	r9,r8[0x0]
80020366:	30 08       	mov	r8,0
80020368:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
8002036a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002036e:	2f f8       	sub	r8,-1
80020370:	ef 48 ff fc 	st.w	r7[-4],r8
80020374:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80020378:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002037c:	10 39       	cp.w	r9,r8
8002037e:	fe 99 ff ec 	brgt	80020356 <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80020382:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020386:	ef 09 ff ec 	ld.sh	r9,r7[-20]
8002038a:	f0 09 19 00 	cp.h	r9,r8
8002038e:	e0 88 00 2b 	brls	800203e4 <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80020392:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020396:	5c 78       	castu.h	r8
80020398:	a3 68       	lsl	r8,0x2
8002039a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002039e:	f2 08 00 08 	add	r8,r9,r8
800203a2:	70 09       	ld.w	r9,r8[0x0]
800203a4:	30 18       	mov	r8,1
800203a6:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
800203a8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800203ac:	5c 78       	castu.h	r8
800203ae:	a3 68       	lsl	r8,0x2
800203b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800203b4:	f2 08 00 08 	add	r8,r9,r8
800203b8:	70 08       	ld.w	r8,r8[0x0]
800203ba:	11 c8       	ld.ub	r8,r8[0x4]
800203bc:	10 9b       	mov	r11,r8
800203be:	30 0c       	mov	r12,0
800203c0:	fe b0 f5 3c 	rcall	8001ee38 <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
800203c4:	fe cc 00 e8 	sub	r12,pc,232
800203c8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
800203cc:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800203d0:	5c 78       	castu.h	r8
800203d2:	30 ab       	mov	r11,10
800203d4:	10 9c       	mov	r12,r8
800203d6:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
800203da:	fe cc 0d 9e 	sub	r12,pc,3486
800203de:	f0 16 00 01 	mcall	r6[4]
800203e2:	c0 d8       	rjmp	800203fc <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
800203e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800203e8:	11 e8       	ld.ub	r8,r8[0x6]
800203ea:	10 9a       	mov	r10,r8
800203ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800203f0:	11 d8       	ld.ub	r8,r8[0x5]
800203f2:	30 39       	mov	r9,3
800203f4:	10 9b       	mov	r11,r8
800203f6:	30 0c       	mov	r12,0
800203f8:	fe b0 f6 62 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
		}
	}
}
800203fc:	2f bd       	sub	sp,-20
800203fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020402:	00 00       	add	r0,r0
80020404:	80 02       	ld.sh	r2,r0[0x0]
80020406:	01 8a       	ld.ub	r10,r0[0x0]
80020408:	43 6c       	lddsp	r12,sp[0xd8]
8002040a:	65 61       	ld.w	r1,r2[0x58]
8002040c:	72 20       	ld.w	r0,r9[0x8]
8002040e:	57 61       	stdsp	sp[0x1d8],r1
80020410:	79 70       	ld.w	r0,r12[0x5c]
80020412:	6f 69       	ld.w	r9,r7[0x58]
80020414:	6e 74       	ld.w	r4,r7[0x1c]
80020416:	20 6c       	sub	r12,6
80020418:	69 73       	ld.w	r3,r4[0x5c]
8002041a:	74 00       	ld.w	r0,r10[0x0]

8002041c <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
8002041c:	eb cd 40 c0 	pushm	r6-r7,lr
80020420:	1a 97       	mov	r7,sp
80020422:	20 4d       	sub	sp,16
80020424:	4a 06       	lddpc	r6,800204a4 <clear_waypoint_list+0x88>
80020426:	1e 26       	rsub	r6,pc
80020428:	ef 4c ff f8 	st.w	r7[-8],r12
8002042c:	ef 4b ff f4 	st.w	r7[-12],r11
80020430:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
80020434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020438:	ee c9 00 02 	sub	r9,r7,2
8002043c:	12 9b       	mov	r11,r9
8002043e:	10 9c       	mov	r12,r8
80020440:	fe b0 f5 ff 	rcall	8001f03e <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020444:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020448:	ec f8 00 70 	ld.w	r8,r6[112]
8002044c:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
8002044e:	f0 09 18 00 	cp.b	r9,r8
80020452:	c2 51       	brne	8002049c <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020454:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020458:	ec f8 00 c4 	ld.w	r8,r6[196]
8002045c:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
8002045e:	f0 09 18 00 	cp.b	r9,r8
80020462:	c1 d1       	brne	8002049c <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
80020464:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020468:	30 08       	mov	r8,0
8002046a:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
8002046c:	ec f9 01 24 	ld.w	r9,r6[292]
80020470:	30 08       	mov	r8,0
80020472:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80020474:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020478:	30 08       	mov	r8,0
8002047a:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
8002047c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020480:	11 e8       	ld.ub	r8,r8[0x6]
80020482:	10 9a       	mov	r10,r8
80020484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020488:	11 d8       	ld.ub	r8,r8[0x5]
8002048a:	30 19       	mov	r9,1
8002048c:	10 9b       	mov	r11,r8
8002048e:	30 0c       	mov	r12,0
80020490:	fe b0 f6 16 	rcall	8001f0bc <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80020494:	fe cc 00 8c 	sub	r12,pc,140
80020498:	f0 16 00 01 	mcall	r6[4]
	}		
}
8002049c:	2f cd       	sub	sp,-16
8002049e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800204a2:	00 00       	add	r0,r0
800204a4:	80 02       	ld.sh	r2,r0[0x0]
800204a6:	02 aa       	st.w	r1++,r10
800204a8:	62 61       	ld.w	r1,r1[0x18]
800204aa:	73 65       	ld.w	r5,r9[0x58]
800204ac:	5f 6d       	srmi	sp
800204ae:	6f 64       	ld.w	r4,r7[0x58]
800204b0:	65 3a       	ld.w	r10,r2[0x4c]
800204b2:	00 00       	add	r0,r0
800204b4:	2c 20       	sub	r0,-62
800204b6:	63 75       	ld.w	r5,r1[0x5c]
800204b8:	73 74       	ld.w	r4,r9[0x5c]
800204ba:	6f 6d       	ld.w	sp,r7[0x58]
800204bc:	20 6d       	sub	sp,24
800204be:	6f 64       	ld.w	r4,r7[0x58]
800204c0:	65 3a       	ld.w	r10,r2[0x4c]
	...

800204c4 <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
800204c4:	eb cd 40 e0 	pushm	r5-r7,lr
800204c8:	1a 97       	mov	r7,sp
800204ca:	20 6d       	sub	sp,24
800204cc:	4e 26       	lddpc	r6,80020654 <set_mav_mode+0x190>
800204ce:	1e 26       	rsub	r6,pc
800204d0:	ef 4c ff f4 	st.w	r7[-12],r12
800204d4:	ef 4b ff f0 	st.w	r7[-16],r11
800204d8:	ef 4a ff ec 	st.w	r7[-20],r10
800204dc:	12 98       	mov	r8,r9
800204de:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
800204e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800204e6:	ee c9 00 08 	sub	r9,r7,8
800204ea:	12 9b       	mov	r11,r9
800204ec:	10 9c       	mov	r12,r8
800204ee:	fe b0 f1 97 	rcall	8001e81c <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
800204f2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800204f6:	ec f8 00 70 	ld.w	r8,r6[112]
800204fa:	11 88       	ld.ub	r8,r8[0x0]
800204fc:	f0 09 18 00 	cp.b	r9,r8
80020500:	e0 81 00 a6 	brne	8002064c <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80020504:	fe cc 00 5c 	sub	r12,pc,92
80020508:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
8002050c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020510:	30 ab       	mov	r11,10
80020512:	10 9c       	mov	r12,r8
80020514:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80020518:	fe cc 00 64 	sub	r12,pc,100
8002051c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80020520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020524:	30 ab       	mov	r11,10
80020526:	10 9c       	mov	r12,r8
80020528:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8002052c:	fe cc 0e f0 	sub	r12,pc,3824
80020530:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
80020534:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80020538:	30 08       	mov	r8,0
8002053a:	f0 09 18 00 	cp.b	r9,r8
8002053e:	c3 e1       	brne	800205ba <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80020540:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020544:	e0 48 00 58 	cp.w	r8,88
80020548:	c0 e0       	breq	80020564 <set_mav_mode+0xa0>
8002054a:	e0 89 00 06 	brgt	80020556 <set_mav_mode+0x92>
8002054e:	e0 48 00 50 	cp.w	r8,80
80020552:	c0 90       	breq	80020564 <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020554:	c7 c8       	rjmp	8002064c <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
80020556:	e0 48 00 5c 	cp.w	r8,92
8002055a:	c0 50       	breq	80020564 <set_mav_mode+0xa0>
8002055c:	e0 48 00 c0 	cp.w	r8,192
80020560:	c0 c0       	breq	80020578 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020562:	c7 58       	rjmp	8002064c <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020564:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020568:	30 38       	mov	r8,3
8002056a:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
8002056c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020570:	34 08       	mov	r8,64
80020572:	b2 88       	st.b	r9[0x0],r8
				break;
80020574:	d7 03       	nop
80020576:	c6 b8       	rjmp	8002064c <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80020578:	fe b0 f6 66 	rcall	8001f244 <get_thrust_from_remote>
8002057c:	18 98       	mov	r8,r12
8002057e:	10 9c       	mov	r12,r8
80020580:	f0 16 00 02 	mcall	r6[8]
80020584:	30 05       	mov	r5,0
80020586:	e0 68 66 66 	mov	r8,26214
8002058a:	ea 18 66 66 	orh	r8,0x6666
8002058e:	e0 69 66 66 	mov	r9,26214
80020592:	ea 19 bf ee 	orh	r9,0xbfee
80020596:	f0 16 00 1d 	mcall	r6[116]
8002059a:	18 98       	mov	r8,r12
8002059c:	58 08       	cp.w	r8,0
8002059e:	c0 20       	breq	800205a2 <set_mav_mode+0xde>
800205a0:	30 15       	mov	r5,1
800205a2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800205a6:	c5 20       	breq	8002064a <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
800205a8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800205ac:	30 48       	mov	r8,4
800205ae:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800205b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800205b4:	3c 08       	mov	r8,-64
800205b6:	b2 88       	st.b	r9[0x0],r8
800205b8:	c4 a8       	rjmp	8002064c <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
800205ba:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800205be:	e0 48 00 c0 	cp.w	r8,192
800205c2:	c2 00       	breq	80020602 <set_mav_mode+0x13e>
800205c4:	e0 89 00 0c 	brgt	800205dc <set_mav_mode+0x118>
800205c8:	e0 48 00 58 	cp.w	r8,88
800205cc:	c1 20       	breq	800205f0 <set_mav_mode+0x12c>
800205ce:	e0 48 00 5c 	cp.w	r8,92
800205d2:	c0 f0       	breq	800205f0 <set_mav_mode+0x12c>
800205d4:	e0 48 00 50 	cp.w	r8,80
800205d8:	c0 c0       	breq	800205f0 <set_mav_mode+0x12c>
800205da:	c3 98       	rjmp	8002064c <set_mav_mode+0x188>
800205dc:	e0 48 00 d8 	cp.w	r8,216
800205e0:	c2 30       	breq	80020626 <set_mav_mode+0x162>
800205e2:	e0 48 00 dc 	cp.w	r8,220
800205e6:	c2 90       	breq	80020638 <set_mav_mode+0x174>
800205e8:	e0 48 00 d0 	cp.w	r8,208
800205ec:	c1 40       	breq	80020614 <set_mav_mode+0x150>
800205ee:	c2 f8       	rjmp	8002064c <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
800205f0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800205f4:	30 38       	mov	r8,3
800205f6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
800205f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800205fc:	34 08       	mov	r8,64
800205fe:	b2 88       	st.b	r9[0x0],r8
				break;
80020600:	c2 68       	rjmp	8002064c <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020602:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020606:	30 48       	mov	r8,4
80020608:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
8002060a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002060e:	3c 08       	mov	r8,-64
80020610:	b2 88       	st.b	r9[0x0],r8
				break;
80020612:	c1 d8       	rjmp	8002064c <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020614:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020618:	30 48       	mov	r8,4
8002061a:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
8002061c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020620:	3d 08       	mov	r8,-48
80020622:	b2 88       	st.b	r9[0x0],r8
				break;
80020624:	c1 48       	rjmp	8002064c <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020626:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002062a:	30 48       	mov	r8,4
8002062c:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
8002062e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020632:	3d 88       	mov	r8,-40
80020634:	b2 88       	st.b	r9[0x0],r8
				break;
80020636:	c0 b8       	rjmp	8002064c <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020638:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002063c:	30 48       	mov	r8,4
8002063e:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80020640:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020644:	3d c8       	mov	r8,-36
80020646:	b2 88       	st.b	r9[0x0],r8
80020648:	c0 28       	rjmp	8002064c <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
8002064a:	d7 03       	nop
				break;
			}
		}
		
	}
}
8002064c:	2f ad       	sub	sp,-24
8002064e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80020652:	00 00       	add	r0,r0
80020654:	80 02       	ld.sh	r2,r0[0x0]
80020656:	03 52       	ld.sh	r2,--r1
80020658:	53 65       	stdsp	sp[0xd8],r5
8002065a:	6e 64       	ld.w	r4,r7[0x18]
8002065c:	69 6e       	ld.w	lr,r4[0x58]
8002065e:	67 20       	ld.w	r0,r3[0x48]
80020660:	77 61       	ld.w	r1,r11[0x58]
80020662:	79 70       	ld.w	r0,r12[0x5c]
80020664:	6f 69       	ld.w	r9,r7[0x58]
80020666:	6e 74       	ld.w	r4,r7[0x1c]
80020668:	20 74       	sub	r4,7
8002066a:	69 6d       	ld.w	sp,r4[0x58]
8002066c:	65 6f       	ld.w	pc,r2[0x58]
8002066e:	75 74       	ld.w	r4,r10[0x5c]
80020670:	00 00       	add	r0,r0
80020672:	00 00       	add	r0,r0
80020674:	52 65       	stdsp	sp[0x98],r5
80020676:	63 65       	ld.w	r5,r1[0x58]
80020678:	69 76       	ld.w	r6,r4[0x5c]
8002067a:	69 6e       	ld.w	lr,r4[0x58]
8002067c:	67 20       	ld.w	r0,r3[0x48]
8002067e:	77 61       	ld.w	r1,r11[0x58]
80020680:	79 70       	ld.w	r0,r12[0x5c]
80020682:	6f 69       	ld.w	r9,r7[0x58]
80020684:	6e 74       	ld.w	r4,r7[0x1c]
80020686:	20 74       	sub	r4,7
80020688:	69 6d       	ld.w	sp,r4[0x58]
8002068a:	65 6f       	ld.w	pc,r2[0x58]
8002068c:	75 74       	ld.w	r4,r10[0x5c]
	...

80020690 <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80020690:	eb cd 40 c0 	pushm	r6-r7,lr
80020694:	1a 97       	mov	r7,sp
80020696:	20 4d       	sub	sp,16
80020698:	4a 76       	lddpc	r6,80020734 <control_time_out_waypoint_msg+0xa4>
8002069a:	1e 26       	rsub	r6,pc
8002069c:	ef 4c ff f8 	st.w	r7[-8],r12
800206a0:	ef 4b ff f4 	st.w	r7[-12],r11
800206a4:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
800206a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800206ac:	11 88       	ld.ub	r8,r8[0x0]
800206ae:	58 08       	cp.w	r8,0
800206b0:	c0 61       	brne	800206bc <control_time_out_waypoint_msg+0x2c>
800206b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800206b6:	11 88       	ld.ub	r8,r8[0x0]
800206b8:	58 08       	cp.w	r8,0
800206ba:	c3 90       	breq	8002072c <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
800206bc:	f0 16 00 0f 	mcall	r6[60]
800206c0:	18 98       	mov	r8,r12
800206c2:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
800206c6:	ec f8 01 78 	ld.w	r8,r6[376]
800206ca:	70 08       	ld.w	r8,r8[0x0]
800206cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800206d0:	10 19       	sub	r9,r8
800206d2:	ec f8 04 14 	ld.w	r8,r6[1044]
800206d6:	70 08       	ld.w	r8,r8[0x0]
800206d8:	10 39       	cp.w	r9,r8
800206da:	e0 88 00 29 	brls	8002072c <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
800206de:	ec f8 01 78 	ld.w	r8,r6[376]
800206e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800206e6:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
800206e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800206ec:	11 88       	ld.ub	r8,r8[0x0]
800206ee:	58 08       	cp.w	r8,0
800206f0:	c0 90       	breq	80020702 <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
800206f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800206f6:	30 08       	mov	r8,0
800206f8:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
800206fa:	fe cc 00 a2 	sub	r12,pc,162
800206fe:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
80020702:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020706:	11 88       	ld.ub	r8,r8[0x0]
80020708:	58 08       	cp.w	r8,0
8002070a:	c1 10       	breq	8002072c <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
8002070c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020710:	30 08       	mov	r8,0
80020712:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
80020714:	fe cc 00 a0 	sub	r12,pc,160
80020718:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
8002071c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020720:	30 08       	mov	r8,0
80020722:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
80020724:	ec f9 01 24 	ld.w	r9,r6[292]
80020728:	30 08       	mov	r8,0
8002072a:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
8002072c:	2f cd       	sub	sp,-16
8002072e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020732:	00 00       	add	r0,r0
80020734:	80 02       	ld.sh	r2,r0[0x0]
80020736:	05 1e       	ld.sh	lr,r2++
80020738:	77 70       	ld.w	r0,r11[0x5c]
8002073a:	5f 67       	srmi	r7
8002073c:	6c 6f       	ld.w	pc,r6[0x18]
8002073e:	62 61       	ld.w	r1,r1[0x18]
80020740:	6c 3a       	ld.w	r10,r6[0xc]
80020742:	20 6c       	sub	r12,6
80020744:	61 74       	ld.w	r4,r0[0x5c]
80020746:	20 28       	sub	r8,2
80020748:	78 31       	ld.w	r1,r12[0xc]
8002074a:	65 37       	ld.w	r7,r2[0x4c]
8002074c:	29 3a       	sub	r10,-109
8002074e:	00 00       	add	r0,r0
80020750:	20 6c       	sub	r12,6
80020752:	6f 6e       	ld.w	lr,r7[0x58]
80020754:	67 20       	ld.w	r0,r3[0x48]
80020756:	28 78       	sub	r8,-121
80020758:	31 65       	mov	r5,22
8002075a:	37 29       	mov	r9,114
8002075c:	3a 00       	mov	r0,-96
8002075e:	00 00       	add	r0,r0
80020760:	20 61       	sub	r1,6
80020762:	6c 74       	ld.w	r4,r6[0x1c]
80020764:	20 28       	sub	r8,2
80020766:	78 31       	ld.w	r1,r12[0xc]
80020768:	30 30       	mov	r0,3
8002076a:	30 29       	mov	r9,2
8002076c:	3a 00       	mov	r0,-96
8002076e:	00 00       	add	r0,r0
80020770:	20 77       	sub	r7,7
80020772:	70 5f       	ld.w	pc,r8[0x14]
80020774:	63 6f       	ld.w	pc,r1[0x58]
80020776:	6f 72       	ld.w	r2,r7[0x5c]
80020778:	3a 20       	mov	r0,-94
8002077a:	78 20       	ld.w	r0,r12[0x8]
8002077c:	28 78       	sub	r8,-121
8002077e:	31 30       	mov	r0,19
80020780:	30 29       	mov	r9,2
80020782:	3a 00       	mov	r0,-96
80020784:	2c 20       	sub	r0,-62
80020786:	79 20       	ld.w	r0,r12[0x48]
80020788:	28 78       	sub	r8,-121
8002078a:	31 30       	mov	r0,19
8002078c:	30 29       	mov	r9,2
8002078e:	3a 00       	mov	r0,-96
80020790:	2c 20       	sub	r0,-62
80020792:	7a 20       	ld.w	r0,sp[0x8]
80020794:	28 78       	sub	r8,-121
80020796:	31 30       	mov	r0,19
80020798:	30 29       	mov	r9,2
8002079a:	3a 00       	mov	r0,-96
8002079c:	20 6c       	sub	r12,6
8002079e:	6f 63       	ld.w	r3,r7[0x58]
800207a0:	61 6c       	ld.w	r12,r0[0x58]
800207a2:	4f 72       	lddpc	r2,8002097c <set_waypoint_from_frame+0x192>
800207a4:	69 67       	ld.w	r7,r4[0x58]
800207a6:	69 6e       	ld.w	lr,r4[0x58]
800207a8:	20 6c       	sub	r12,6
800207aa:	61 74       	ld.w	r4,r0[0x5c]
800207ac:	20 28       	sub	r8,2
800207ae:	78 31       	ld.w	r1,r12[0xc]
800207b0:	65 37       	ld.w	r7,r2[0x4c]
800207b2:	29 3a       	sub	r10,-109
800207b4:	00 00       	add	r0,r0
800207b6:	00 00       	add	r0,r0
800207b8:	4c 6f       	lddpc	pc,800208d0 <set_waypoint_from_frame+0xe6>
800207ba:	63 61       	ld.w	r1,r1[0x58]
800207bc:	6c 4f       	ld.w	pc,r6[0x10]
800207be:	72 69       	ld.w	r9,r9[0x18]
800207c0:	67 69       	ld.w	r9,r3[0x58]
800207c2:	6e 3a       	ld.w	r10,r7[0xc]
800207c4:	20 6c       	sub	r12,6
800207c6:	61 74       	ld.w	r4,r0[0x5c]
800207c8:	20 28       	sub	r8,2
800207ca:	78 31       	ld.w	r1,r12[0xc]
800207cc:	65 37       	ld.w	r7,r2[0x4c]
800207ce:	29 3a       	sub	r10,-109
800207d0:	00 00       	add	r0,r0
800207d2:	00 00       	add	r0,r0
800207d4:	20 67       	sub	r7,6
800207d6:	6c 6f       	ld.w	pc,r6[0x18]
800207d8:	62 61       	ld.w	r1,r1[0x18]
800207da:	6c 20       	ld.w	r0,r6[0x8]
800207dc:	61 6c       	ld.w	r12,r0[0x58]
800207de:	74 20       	ld.w	r0,r10[0x8]
800207e0:	28 78       	sub	r8,-121
800207e2:	31 30       	mov	r0,19
800207e4:	30 30       	mov	r0,3
800207e6:	29 3a       	sub	r10,-109
	...

800207ea <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
800207ea:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800207ee:	1a 97       	mov	r7,sp
800207f0:	fa cd 00 a8 	sub	sp,sp,168
800207f4:	fe f6 05 f0 	ld.w	r6,pc[1520]
800207f8:	1e 26       	rsub	r6,pc
800207fa:	ee c5 ff ec 	sub	r5,r7,-20
800207fe:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020800:	30 08       	mov	r8,0
80020802:	ef 68 ff ff 	st.b	r7[-1],r8
80020806:	c0 e8       	rjmp	80020822 <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80020808:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002080c:	a3 68       	lsl	r8,0x2
8002080e:	ee 08 00 08 	add	r8,r7,r8
80020812:	30 09       	mov	r9,0
80020814:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020818:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002081c:	2f f8       	sub	r8,-1
8002081e:	ef 68 ff ff 	st.b	r7[-1],r8
80020822:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020826:	30 28       	mov	r8,2
80020828:	f0 09 18 00 	cp.b	r9,r8
8002082c:	fe 98 ff ee 	brls	80020808 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
80020830:	0b 88       	ld.ub	r8,r5[0x0]
80020832:	58 18       	cp.w	r8,1
80020834:	e0 80 01 31 	breq	80020a96 <set_waypoint_from_frame+0x2ac>
80020838:	e0 89 00 06 	brgt	80020844 <set_waypoint_from_frame+0x5a>
8002083c:	58 08       	cp.w	r8,0
8002083e:	c0 b0       	breq	80020854 <set_waypoint_from_frame+0x6a>
80020840:	e0 8f 02 a7 	bral	80020d8e <set_waypoint_from_frame+0x5a4>
80020844:	58 28       	cp.w	r8,2
80020846:	e0 80 02 a3 	breq	80020d8c <set_waypoint_from_frame+0x5a2>
8002084a:	58 38       	cp.w	r8,3
8002084c:	e0 80 01 a7 	breq	80020b9a <set_waypoint_from_frame+0x3b0>
80020850:	e0 8f 02 9f 	bral	80020d8e <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
80020854:	ea e8 00 18 	ld.d	r8,r5[24]
80020858:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002085c:	ea e8 00 20 	ld.d	r8,r5[32]
80020860:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80020864:	ea e8 00 28 	ld.d	r8,r5[40]
80020868:	10 9a       	mov	r10,r8
8002086a:	12 9b       	mov	r11,r9
8002086c:	f0 16 00 08 	mcall	r6[32]
80020870:	18 98       	mov	r8,r12
80020872:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80020876:	ee cc 00 a8 	sub	r12,r7,168
8002087a:	20 7d       	sub	sp,28
8002087c:	1a 98       	mov	r8,sp
8002087e:	10 9a       	mov	r10,r8
80020880:	ea cb ff d0 	sub	r11,r5,-48
80020884:	f4 c8 00 00 	sub	r8,r10,0
80020888:	f6 c9 00 00 	sub	r9,r11,0
8002088c:	72 0e       	ld.w	lr,r9[0x0]
8002088e:	91 0e       	st.w	r8[0x0],lr
80020890:	72 1e       	ld.w	lr,r9[0x4]
80020892:	91 1e       	st.w	r8[0x4],lr
80020894:	72 2e       	ld.w	lr,r9[0x8]
80020896:	91 2e       	st.w	r8[0x8],lr
80020898:	72 39       	ld.w	r9,r9[0xc]
8002089a:	91 39       	st.w	r8[0xc],r9
8002089c:	f6 e8 00 10 	ld.d	r8,r11[16]
800208a0:	f4 e9 00 10 	st.d	r10[16],r8
800208a4:	76 68       	ld.w	r8,r11[0x18]
800208a6:	95 68       	st.w	r10[0x18],r8
800208a8:	20 7d       	sub	sp,28
800208aa:	1a 98       	mov	r8,sp
800208ac:	10 9a       	mov	r10,r8
800208ae:	ee cb 00 20 	sub	r11,r7,32
800208b2:	f4 c8 00 00 	sub	r8,r10,0
800208b6:	f6 c9 00 00 	sub	r9,r11,0
800208ba:	72 0e       	ld.w	lr,r9[0x0]
800208bc:	91 0e       	st.w	r8[0x0],lr
800208be:	72 1e       	ld.w	lr,r9[0x4]
800208c0:	91 1e       	st.w	r8[0x4],lr
800208c2:	72 2e       	ld.w	lr,r9[0x8]
800208c4:	91 2e       	st.w	r8[0x8],lr
800208c6:	72 39       	ld.w	r9,r9[0xc]
800208c8:	91 39       	st.w	r8[0xc],r9
800208ca:	f6 e8 00 10 	ld.d	r8,r11[16]
800208ce:	f4 e9 00 10 	st.d	r10[16],r8
800208d2:	76 68       	ld.w	r8,r11[0x18]
800208d4:	95 68       	st.w	r10[0x18],r8
800208d6:	f0 16 00 7a 	mcall	r6[488]
800208da:	2f 2d       	sub	sp,-56
800208dc:	ee cb 00 50 	sub	r11,r7,80
800208e0:	ee ca 00 a8 	sub	r10,r7,168
800208e4:	f6 c8 00 00 	sub	r8,r11,0
800208e8:	f4 c9 00 00 	sub	r9,r10,0
800208ec:	72 0c       	ld.w	r12,r9[0x0]
800208ee:	91 0c       	st.w	r8[0x0],r12
800208f0:	72 1c       	ld.w	r12,r9[0x4]
800208f2:	91 1c       	st.w	r8[0x4],r12
800208f4:	72 2c       	ld.w	r12,r9[0x8]
800208f6:	91 2c       	st.w	r8[0x8],r12
800208f8:	72 39       	ld.w	r9,r9[0xc]
800208fa:	91 39       	st.w	r8[0xc],r9
800208fc:	f6 c8 ff f0 	sub	r8,r11,-16
80020900:	f4 c9 ff f0 	sub	r9,r10,-16
80020904:	72 0c       	ld.w	r12,r9[0x0]
80020906:	91 0c       	st.w	r8[0x0],r12
80020908:	72 1c       	ld.w	r12,r9[0x4]
8002090a:	91 1c       	st.w	r8[0x4],r12
8002090c:	72 2c       	ld.w	r12,r9[0x8]
8002090e:	91 2c       	st.w	r8[0x8],r12
80020910:	72 39       	ld.w	r9,r9[0xc]
80020912:	91 39       	st.w	r8[0xc],r9
80020914:	f6 c8 ff e0 	sub	r8,r11,-32
80020918:	f4 c9 ff e0 	sub	r9,r10,-32
8002091c:	72 0a       	ld.w	r10,r9[0x0]
8002091e:	91 0a       	st.w	r8[0x0],r10
80020920:	72 1a       	ld.w	r10,r9[0x4]
80020922:	91 1a       	st.w	r8[0x4],r10
80020924:	72 2a       	ld.w	r10,r9[0x8]
80020926:	91 2a       	st.w	r8[0x8],r10
80020928:	72 39       	ld.w	r9,r9[0xc]
8002092a:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
8002092c:	fe cc 01 f4 	sub	r12,pc,500
80020930:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
80020934:	ee ea ff e8 	ld.d	r10,r7[-24]
80020938:	30 08       	mov	r8,0
8002093a:	e0 69 12 d0 	mov	r9,4816
8002093e:	ea 19 41 63 	orh	r9,0x4163
80020942:	f0 16 00 03 	mcall	r6[12]
80020946:	14 98       	mov	r8,r10
80020948:	16 99       	mov	r9,r11
8002094a:	10 9a       	mov	r10,r8
8002094c:	12 9b       	mov	r11,r9
8002094e:	f0 16 00 14 	mcall	r6[80]
80020952:	18 98       	mov	r8,r12
80020954:	30 ab       	mov	r11,10
80020956:	10 9c       	mov	r12,r8
80020958:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
8002095c:	fe cc 02 0c 	sub	r12,pc,524
80020960:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
80020964:	ee ea ff e0 	ld.d	r10,r7[-32]
80020968:	30 08       	mov	r8,0
8002096a:	e0 69 12 d0 	mov	r9,4816
8002096e:	ea 19 41 63 	orh	r9,0x4163
80020972:	f0 16 00 03 	mcall	r6[12]
80020976:	14 98       	mov	r8,r10
80020978:	16 99       	mov	r9,r11
8002097a:	10 9a       	mov	r10,r8
8002097c:	12 9b       	mov	r11,r9
8002097e:	f0 16 00 14 	mcall	r6[80]
80020982:	18 98       	mov	r8,r12
80020984:	30 ab       	mov	r11,10
80020986:	10 9c       	mov	r12,r8
80020988:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
8002098c:	fe cc 02 2c 	sub	r12,pc,556
80020990:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
80020994:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020998:	fc 18 44 7a 	movh	r8,0x447a
8002099c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800209a0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800209a4:	30 ab       	mov	r11,10
800209a6:	10 9c       	mov	r12,r8
800209a8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800209ac:	fe cc 02 3c 	sub	r12,pc,572
800209b0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
800209b4:	ee f9 ff b0 	ld.w	r9,r7[-80]
800209b8:	fc 18 42 c8 	movh	r8,0x42c8
800209bc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800209c0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800209c4:	30 ab       	mov	r11,10
800209c6:	10 9c       	mov	r12,r8
800209c8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800209cc:	fe cc 02 48 	sub	r12,pc,584
800209d0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800209d4:	ee f9 ff b4 	ld.w	r9,r7[-76]
800209d8:	fc 18 42 c8 	movh	r8,0x42c8
800209dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800209e0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800209e4:	30 ab       	mov	r11,10
800209e6:	10 9c       	mov	r12,r8
800209e8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800209ec:	fe cc 02 5c 	sub	r12,pc,604
800209f0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
800209f4:	ee f9 ff b8 	ld.w	r9,r7[-72]
800209f8:	fc 18 42 c8 	movh	r8,0x42c8
800209fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020a00:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020a04:	30 ab       	mov	r11,10
80020a06:	10 9c       	mov	r12,r8
80020a08:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
80020a0c:	fe cc 02 70 	sub	r12,pc,624
80020a10:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
80020a14:	ea ea 00 38 	ld.d	r10,r5[56]
80020a18:	30 08       	mov	r8,0
80020a1a:	e0 69 12 d0 	mov	r9,4816
80020a1e:	ea 19 41 63 	orh	r9,0x4163
80020a22:	f0 16 00 03 	mcall	r6[12]
80020a26:	14 98       	mov	r8,r10
80020a28:	16 99       	mov	r9,r11
80020a2a:	10 9a       	mov	r10,r8
80020a2c:	12 9b       	mov	r11,r9
80020a2e:	f0 16 00 14 	mcall	r6[80]
80020a32:	18 98       	mov	r8,r12
80020a34:	30 ab       	mov	r11,10
80020a36:	10 9c       	mov	r12,r8
80020a38:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80020a3c:	fe cc 02 ec 	sub	r12,pc,748
80020a40:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
80020a44:	ea ea 00 30 	ld.d	r10,r5[48]
80020a48:	30 08       	mov	r8,0
80020a4a:	e0 69 12 d0 	mov	r9,4816
80020a4e:	ea 19 41 63 	orh	r9,0x4163
80020a52:	f0 16 00 03 	mcall	r6[12]
80020a56:	14 98       	mov	r8,r10
80020a58:	16 99       	mov	r9,r11
80020a5a:	10 9a       	mov	r10,r8
80020a5c:	12 9b       	mov	r11,r9
80020a5e:	f0 16 00 14 	mcall	r6[80]
80020a62:	18 98       	mov	r8,r12
80020a64:	30 ab       	mov	r11,10
80020a66:	10 9c       	mov	r12,r8
80020a68:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80020a6c:	fe cc 03 0c 	sub	r12,pc,780
80020a70:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80020a74:	6b 09       	ld.w	r9,r5[0x40]
80020a76:	fc 18 44 7a 	movh	r8,0x447a
80020a7a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020a7e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020a82:	30 ab       	mov	r11,10
80020a84:	10 9c       	mov	r12,r8
80020a86:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020a8a:	fe cc 14 4e 	sub	r12,pc,5198
80020a8e:	f0 16 00 01 	mcall	r6[4]
		
		break;
80020a92:	e0 8f 01 7e 	bral	80020d8e <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
80020a96:	ea e8 00 18 	ld.d	r8,r5[24]
80020a9a:	10 9a       	mov	r10,r8
80020a9c:	12 9b       	mov	r11,r9
80020a9e:	f0 16 00 08 	mcall	r6[32]
80020aa2:	18 98       	mov	r8,r12
80020aa4:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80020aa8:	ea e8 00 20 	ld.d	r8,r5[32]
80020aac:	10 9a       	mov	r10,r8
80020aae:	12 9b       	mov	r11,r9
80020ab0:	f0 16 00 08 	mcall	r6[32]
80020ab4:	18 98       	mov	r8,r12
80020ab6:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80020aba:	ea e8 00 28 	ld.d	r8,r5[40]
80020abe:	10 9a       	mov	r10,r8
80020ac0:	12 9b       	mov	r11,r9
80020ac2:	f0 16 00 08 	mcall	r6[32]
80020ac6:	18 98       	mov	r8,r12
80020ac8:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
80020acc:	6a 58       	ld.w	r8,r5[0x14]
80020ace:	10 9c       	mov	r12,r8
80020ad0:	f0 16 00 02 	mcall	r6[8]
80020ad4:	e0 68 2d 18 	mov	r8,11544
80020ad8:	ea 18 54 44 	orh	r8,0x5444
80020adc:	e0 69 21 fb 	mov	r9,8699
80020ae0:	ea 19 40 09 	orh	r9,0x4009
80020ae4:	f0 16 00 03 	mcall	r6[12]
80020ae8:	14 98       	mov	r8,r10
80020aea:	16 99       	mov	r9,r11
80020aec:	10 9a       	mov	r10,r8
80020aee:	12 9b       	mov	r11,r9
80020af0:	30 08       	mov	r8,0
80020af2:	e0 69 80 00 	mov	r9,32768
80020af6:	ea 19 40 66 	orh	r9,0x4066
80020afa:	f0 16 00 0c 	mcall	r6[48]
80020afe:	14 98       	mov	r8,r10
80020b00:	16 99       	mov	r9,r11
80020b02:	10 9a       	mov	r10,r8
80020b04:	12 9b       	mov	r11,r9
80020b06:	f0 16 00 08 	mcall	r6[32]
80020b0a:	18 98       	mov	r8,r12
80020b0c:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
80020b10:	ee cc 00 a8 	sub	r12,r7,168
80020b14:	20 cd       	sub	sp,48
80020b16:	1a 98       	mov	r8,sp
80020b18:	10 9b       	mov	r11,r8
80020b1a:	ee ca 00 50 	sub	r10,r7,80
80020b1e:	f6 c8 00 00 	sub	r8,r11,0
80020b22:	f4 c9 00 00 	sub	r9,r10,0
80020b26:	72 0e       	ld.w	lr,r9[0x0]
80020b28:	91 0e       	st.w	r8[0x0],lr
80020b2a:	72 1e       	ld.w	lr,r9[0x4]
80020b2c:	91 1e       	st.w	r8[0x4],lr
80020b2e:	72 2e       	ld.w	lr,r9[0x8]
80020b30:	91 2e       	st.w	r8[0x8],lr
80020b32:	72 39       	ld.w	r9,r9[0xc]
80020b34:	91 39       	st.w	r8[0xc],r9
80020b36:	f6 c8 ff f0 	sub	r8,r11,-16
80020b3a:	f4 c9 ff f0 	sub	r9,r10,-16
80020b3e:	72 0e       	ld.w	lr,r9[0x0]
80020b40:	91 0e       	st.w	r8[0x0],lr
80020b42:	72 1e       	ld.w	lr,r9[0x4]
80020b44:	91 1e       	st.w	r8[0x4],lr
80020b46:	72 2e       	ld.w	lr,r9[0x8]
80020b48:	91 2e       	st.w	r8[0x8],lr
80020b4a:	72 39       	ld.w	r9,r9[0xc]
80020b4c:	91 39       	st.w	r8[0xc],r9
80020b4e:	f6 c8 ff e0 	sub	r8,r11,-32
80020b52:	f4 c9 ff e0 	sub	r9,r10,-32
80020b56:	72 0a       	ld.w	r10,r9[0x0]
80020b58:	91 0a       	st.w	r8[0x0],r10
80020b5a:	72 1a       	ld.w	r10,r9[0x4]
80020b5c:	91 1a       	st.w	r8[0x4],r10
80020b5e:	72 2a       	ld.w	r10,r9[0x8]
80020b60:	91 2a       	st.w	r8[0x8],r10
80020b62:	72 39       	ld.w	r9,r9[0xc]
80020b64:	91 39       	st.w	r8[0xc],r9
80020b66:	f0 16 00 88 	mcall	r6[544]
80020b6a:	2f 4d       	sub	sp,-48
80020b6c:	ee ca 00 40 	sub	r10,r7,64
80020b70:	ee cb 00 a8 	sub	r11,r7,168
80020b74:	f4 c8 00 00 	sub	r8,r10,0
80020b78:	f6 c9 00 00 	sub	r9,r11,0
80020b7c:	72 0c       	ld.w	r12,r9[0x0]
80020b7e:	91 0c       	st.w	r8[0x0],r12
80020b80:	72 1c       	ld.w	r12,r9[0x4]
80020b82:	91 1c       	st.w	r8[0x4],r12
80020b84:	72 2c       	ld.w	r12,r9[0x8]
80020b86:	91 2c       	st.w	r8[0x8],r12
80020b88:	72 39       	ld.w	r9,r9[0xc]
80020b8a:	91 39       	st.w	r8[0xc],r9
80020b8c:	f6 e8 00 10 	ld.d	r8,r11[16]
80020b90:	f4 e9 00 10 	st.d	r10[16],r8
80020b94:	76 68       	ld.w	r8,r11[0x18]
80020b96:	95 68       	st.w	r10[0x18],r8
		break;
80020b98:	cf b8       	rjmp	80020d8e <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80020b9a:	ea e8 00 18 	ld.d	r8,r5[24]
80020b9e:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
80020ba2:	ea e8 00 20 	ld.d	r8,r5[32]
80020ba6:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80020baa:	ea e8 00 28 	ld.d	r8,r5[40]
80020bae:	10 9a       	mov	r10,r8
80020bb0:	12 9b       	mov	r11,r9
80020bb2:	f0 16 00 08 	mcall	r6[32]
80020bb6:	18 98       	mov	r8,r12
80020bb8:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80020bbc:	ee ca 00 78 	sub	r10,r7,120
80020bc0:	ea cb ff d0 	sub	r11,r5,-48
80020bc4:	f4 c8 00 00 	sub	r8,r10,0
80020bc8:	f6 c9 00 00 	sub	r9,r11,0
80020bcc:	72 0c       	ld.w	r12,r9[0x0]
80020bce:	91 0c       	st.w	r8[0x0],r12
80020bd0:	72 1c       	ld.w	r12,r9[0x4]
80020bd2:	91 1c       	st.w	r8[0x4],r12
80020bd4:	72 2c       	ld.w	r12,r9[0x8]
80020bd6:	91 2c       	st.w	r8[0x8],r12
80020bd8:	72 39       	ld.w	r9,r9[0xc]
80020bda:	91 39       	st.w	r8[0xc],r9
80020bdc:	f6 e8 00 10 	ld.d	r8,r11[16]
80020be0:	f4 e9 00 10 	st.d	r10[16],r8
80020be4:	76 68       	ld.w	r8,r11[0x18]
80020be6:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
80020be8:	30 08       	mov	r8,0
80020bea:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
80020bee:	ee cc 00 a8 	sub	r12,r7,168
80020bf2:	20 7d       	sub	sp,28
80020bf4:	1a 98       	mov	r8,sp
80020bf6:	10 9a       	mov	r10,r8
80020bf8:	ee cb 00 78 	sub	r11,r7,120
80020bfc:	f4 c8 00 00 	sub	r8,r10,0
80020c00:	f6 c9 00 00 	sub	r9,r11,0
80020c04:	72 0e       	ld.w	lr,r9[0x0]
80020c06:	91 0e       	st.w	r8[0x0],lr
80020c08:	72 1e       	ld.w	lr,r9[0x4]
80020c0a:	91 1e       	st.w	r8[0x4],lr
80020c0c:	72 2e       	ld.w	lr,r9[0x8]
80020c0e:	91 2e       	st.w	r8[0x8],lr
80020c10:	72 39       	ld.w	r9,r9[0xc]
80020c12:	91 39       	st.w	r8[0xc],r9
80020c14:	f6 e8 00 10 	ld.d	r8,r11[16]
80020c18:	f4 e9 00 10 	st.d	r10[16],r8
80020c1c:	76 68       	ld.w	r8,r11[0x18]
80020c1e:	95 68       	st.w	r10[0x18],r8
80020c20:	20 7d       	sub	sp,28
80020c22:	1a 98       	mov	r8,sp
80020c24:	10 9a       	mov	r10,r8
80020c26:	ee cb 00 20 	sub	r11,r7,32
80020c2a:	f4 c8 00 00 	sub	r8,r10,0
80020c2e:	f6 c9 00 00 	sub	r9,r11,0
80020c32:	72 0e       	ld.w	lr,r9[0x0]
80020c34:	91 0e       	st.w	r8[0x0],lr
80020c36:	72 1e       	ld.w	lr,r9[0x4]
80020c38:	91 1e       	st.w	r8[0x4],lr
80020c3a:	72 2e       	ld.w	lr,r9[0x8]
80020c3c:	91 2e       	st.w	r8[0x8],lr
80020c3e:	72 39       	ld.w	r9,r9[0xc]
80020c40:	91 39       	st.w	r8[0xc],r9
80020c42:	f6 e8 00 10 	ld.d	r8,r11[16]
80020c46:	f4 e9 00 10 	st.d	r10[16],r8
80020c4a:	76 68       	ld.w	r8,r11[0x18]
80020c4c:	95 68       	st.w	r10[0x18],r8
80020c4e:	f0 16 00 7a 	mcall	r6[488]
80020c52:	2f 2d       	sub	sp,-56
80020c54:	ee cb 00 50 	sub	r11,r7,80
80020c58:	ee ca 00 a8 	sub	r10,r7,168
80020c5c:	f6 c8 00 00 	sub	r8,r11,0
80020c60:	f4 c9 00 00 	sub	r9,r10,0
80020c64:	72 0c       	ld.w	r12,r9[0x0]
80020c66:	91 0c       	st.w	r8[0x0],r12
80020c68:	72 1c       	ld.w	r12,r9[0x4]
80020c6a:	91 1c       	st.w	r8[0x4],r12
80020c6c:	72 2c       	ld.w	r12,r9[0x8]
80020c6e:	91 2c       	st.w	r8[0x8],r12
80020c70:	72 39       	ld.w	r9,r9[0xc]
80020c72:	91 39       	st.w	r8[0xc],r9
80020c74:	f6 c8 ff f0 	sub	r8,r11,-16
80020c78:	f4 c9 ff f0 	sub	r9,r10,-16
80020c7c:	72 0c       	ld.w	r12,r9[0x0]
80020c7e:	91 0c       	st.w	r8[0x0],r12
80020c80:	72 1c       	ld.w	r12,r9[0x4]
80020c82:	91 1c       	st.w	r8[0x4],r12
80020c84:	72 2c       	ld.w	r12,r9[0x8]
80020c86:	91 2c       	st.w	r8[0x8],r12
80020c88:	72 39       	ld.w	r9,r9[0xc]
80020c8a:	91 39       	st.w	r8[0xc],r9
80020c8c:	f6 c8 ff e0 	sub	r8,r11,-32
80020c90:	f4 c9 ff e0 	sub	r9,r10,-32
80020c94:	72 0a       	ld.w	r10,r9[0x0]
80020c96:	91 0a       	st.w	r8[0x0],r10
80020c98:	72 1a       	ld.w	r10,r9[0x4]
80020c9a:	91 1a       	st.w	r8[0x4],r10
80020c9c:	72 2a       	ld.w	r10,r9[0x8]
80020c9e:	91 2a       	st.w	r8[0x8],r10
80020ca0:	72 39       	ld.w	r9,r9[0xc]
80020ca2:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80020ca4:	fe cc 04 ec 	sub	r12,pc,1260
80020ca8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80020cac:	ee ea ff 90 	ld.d	r10,r7[-112]
80020cb0:	30 08       	mov	r8,0
80020cb2:	e0 69 12 d0 	mov	r9,4816
80020cb6:	ea 19 41 63 	orh	r9,0x4163
80020cba:	f0 16 00 03 	mcall	r6[12]
80020cbe:	14 98       	mov	r8,r10
80020cc0:	16 99       	mov	r9,r11
80020cc2:	10 9a       	mov	r10,r8
80020cc4:	12 9b       	mov	r11,r9
80020cc6:	f0 16 00 14 	mcall	r6[80]
80020cca:	18 98       	mov	r8,r12
80020ccc:	30 ab       	mov	r11,10
80020cce:	10 9c       	mov	r12,r8
80020cd0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80020cd4:	fe cc 05 84 	sub	r12,pc,1412
80020cd8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
80020cdc:	ee ea ff 88 	ld.d	r10,r7[-120]
80020ce0:	30 08       	mov	r8,0
80020ce2:	e0 69 12 d0 	mov	r9,4816
80020ce6:	ea 19 41 63 	orh	r9,0x4163
80020cea:	f0 16 00 03 	mcall	r6[12]
80020cee:	14 98       	mov	r8,r10
80020cf0:	16 99       	mov	r9,r11
80020cf2:	10 9a       	mov	r10,r8
80020cf4:	12 9b       	mov	r11,r9
80020cf6:	f0 16 00 14 	mcall	r6[80]
80020cfa:	18 98       	mov	r8,r12
80020cfc:	30 ab       	mov	r11,10
80020cfe:	10 9c       	mov	r12,r8
80020d00:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
80020d04:	fe cc 05 30 	sub	r12,pc,1328
80020d08:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80020d0c:	6b 09       	ld.w	r9,r5[0x40]
80020d0e:	fc 18 44 7a 	movh	r8,0x447a
80020d12:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020d16:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020d1a:	30 ab       	mov	r11,10
80020d1c:	10 9c       	mov	r12,r8
80020d1e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80020d22:	fe cc 05 b2 	sub	r12,pc,1458
80020d26:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80020d2a:	ee f9 ff b0 	ld.w	r9,r7[-80]
80020d2e:	fc 18 42 c8 	movh	r8,0x42c8
80020d32:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020d36:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020d3a:	30 ab       	mov	r11,10
80020d3c:	10 9c       	mov	r12,r8
80020d3e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80020d42:	fe cc 05 be 	sub	r12,pc,1470
80020d46:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80020d4a:	ee f9 ff b4 	ld.w	r9,r7[-76]
80020d4e:	fc 18 42 c8 	movh	r8,0x42c8
80020d52:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020d56:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020d5a:	30 ab       	mov	r11,10
80020d5c:	10 9c       	mov	r12,r8
80020d5e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80020d62:	fe cc 05 d2 	sub	r12,pc,1490
80020d66:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80020d6a:	ee f9 ff b8 	ld.w	r9,r7[-72]
80020d6e:	fc 18 42 c8 	movh	r8,0x42c8
80020d72:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020d76:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020d7a:	30 ab       	mov	r11,10
80020d7c:	10 9c       	mov	r12,r8
80020d7e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020d82:	fe cc 17 46 	sub	r12,pc,5958
80020d86:	f0 16 00 01 	mcall	r6[4]
80020d8a:	c0 28       	rjmp	80020d8e <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80020d8c:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
80020d8e:	06 9b       	mov	r11,r3
80020d90:	ee ca 00 50 	sub	r10,r7,80
80020d94:	f6 c8 00 00 	sub	r8,r11,0
80020d98:	f4 c9 00 00 	sub	r9,r10,0
80020d9c:	72 0c       	ld.w	r12,r9[0x0]
80020d9e:	91 0c       	st.w	r8[0x0],r12
80020da0:	72 1c       	ld.w	r12,r9[0x4]
80020da2:	91 1c       	st.w	r8[0x4],r12
80020da4:	72 2c       	ld.w	r12,r9[0x8]
80020da6:	91 2c       	st.w	r8[0x8],r12
80020da8:	72 39       	ld.w	r9,r9[0xc]
80020daa:	91 39       	st.w	r8[0xc],r9
80020dac:	f6 c8 ff f0 	sub	r8,r11,-16
80020db0:	f4 c9 ff f0 	sub	r9,r10,-16
80020db4:	72 0c       	ld.w	r12,r9[0x0]
80020db6:	91 0c       	st.w	r8[0x0],r12
80020db8:	72 1c       	ld.w	r12,r9[0x4]
80020dba:	91 1c       	st.w	r8[0x4],r12
80020dbc:	72 2c       	ld.w	r12,r9[0x8]
80020dbe:	91 2c       	st.w	r8[0x8],r12
80020dc0:	72 39       	ld.w	r9,r9[0xc]
80020dc2:	91 39       	st.w	r8[0xc],r9
80020dc4:	f6 c8 ff e0 	sub	r8,r11,-32
80020dc8:	f4 c9 ff e0 	sub	r9,r10,-32
80020dcc:	72 0a       	ld.w	r10,r9[0x0]
80020dce:	91 0a       	st.w	r8[0x0],r10
80020dd0:	72 1a       	ld.w	r10,r9[0x4]
80020dd2:	91 1a       	st.w	r8[0x4],r10
80020dd4:	72 2a       	ld.w	r10,r9[0x8]
80020dd6:	91 2a       	st.w	r8[0x8],r10
80020dd8:	72 39       	ld.w	r9,r9[0xc]
80020dda:	91 39       	st.w	r8[0xc],r9
}
80020ddc:	06 9c       	mov	r12,r3
80020dde:	2d 6d       	sub	sp,-168
80020de0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80020de4:	80 02       	ld.sh	r2,r0[0x0]
80020de6:	06 7c       	tst	r12,r3
80020de8:	50 6f       	stdsp	sp[0x18],pc
80020dea:	73 69       	ld.w	r9,r9[0x58]
80020dec:	74 69       	ld.w	r9,r10[0x18]
80020dee:	6f 6e       	ld.w	lr,r7[0x58]
80020df0:	20 68       	sub	r8,6
80020df2:	6f 6c       	ld.w	r12,r7[0x58]
80020df4:	64 20       	ld.w	r0,r2[0x8]
80020df6:	61 74       	ld.w	r4,r0[0x5c]
80020df8:	3a 20       	mov	r0,-94
80020dfa:	00 00       	add	r0,r0
80020dfc:	29 0a       	sub	r10,-112
	...

80020e00 <wp_hold_init>:

void wp_hold_init()
{
80020e00:	eb cd 40 c0 	pushm	r6-r7,lr
80020e04:	1a 97       	mov	r7,sp
80020e06:	20 3d       	sub	sp,12
80020e08:	4d 86       	lddpc	r6,80020f68 <wp_hold_init+0x168>
80020e0a:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
80020e0c:	ec f8 00 00 	ld.w	r8,r6[0]
80020e10:	70 08       	ld.w	r8,r8[0x0]
80020e12:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80020e16:	ec 18 00 01 	eorl	r8,0x1
80020e1a:	5c 58       	castu.b	r8
80020e1c:	e0 80 00 a3 	breq	80020f62 <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
80020e20:	fe cc 00 38 	sub	r12,pc,56
80020e24:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80020e28:	ec f8 00 00 	ld.w	r8,r6[0]
80020e2c:	70 08       	ld.w	r8,r8[0x0]
80020e2e:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
80020e32:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020e36:	30 ab       	mov	r11,10
80020e38:	10 9c       	mov	r12,r8
80020e3a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
80020e3e:	ec f8 00 00 	ld.w	r8,r6[0]
80020e42:	70 08       	ld.w	r8,r8[0x0]
80020e44:	f0 f8 0d a0 	ld.w	r8,r8[3488]
80020e48:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020e4c:	30 ab       	mov	r11,10
80020e4e:	10 9c       	mov	r12,r8
80020e50:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
80020e54:	ec f8 00 00 	ld.w	r8,r6[0]
80020e58:	70 08       	ld.w	r8,r8[0x0]
80020e5a:	f0 f8 0d a4 	ld.w	r8,r8[3492]
80020e5e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80020e62:	30 ab       	mov	r11,10
80020e64:	10 9c       	mov	r12,r8
80020e66:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80020e6a:	ec f8 00 00 	ld.w	r8,r6[0]
80020e6e:	70 08       	ld.w	r8,r8[0x0]
80020e70:	f0 f8 0d a8 	ld.w	r8,r8[3496]
80020e74:	10 9c       	mov	r12,r8
80020e76:	f0 16 00 02 	mcall	r6[8]
80020e7a:	30 08       	mov	r8,0
80020e7c:	e0 69 80 00 	mov	r9,32768
80020e80:	ea 19 40 66 	orh	r9,0x4066
80020e84:	f0 16 00 03 	mcall	r6[12]
80020e88:	14 98       	mov	r8,r10
80020e8a:	16 99       	mov	r9,r11
80020e8c:	10 9a       	mov	r10,r8
80020e8e:	12 9b       	mov	r11,r9
80020e90:	e0 68 85 1f 	mov	r8,34079
80020e94:	ea 18 51 eb 	orh	r8,0x51eb
80020e98:	e0 69 1e b8 	mov	r9,7864
80020e9c:	ea 19 40 09 	orh	r9,0x4009
80020ea0:	f0 16 00 0c 	mcall	r6[48]
80020ea4:	14 98       	mov	r8,r10
80020ea6:	16 99       	mov	r9,r11
80020ea8:	10 9a       	mov	r10,r8
80020eaa:	12 9b       	mov	r11,r9
80020eac:	f0 16 00 14 	mcall	r6[80]
80020eb0:	18 98       	mov	r8,r12
80020eb2:	30 ab       	mov	r11,10
80020eb4:	10 9c       	mov	r12,r8
80020eb6:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80020eba:	fe cc 00 be 	sub	r12,pc,190
80020ebe:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
80020ec2:	ec f8 00 00 	ld.w	r8,r6[0]
80020ec6:	70 09       	ld.w	r9,r8[0x0]
80020ec8:	30 18       	mov	r8,1
80020eca:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
80020ece:	ec f8 00 00 	ld.w	r8,r6[0]
80020ed2:	70 09       	ld.w	r9,r8[0x0]
80020ed4:	ec f8 00 00 	ld.w	r8,r6[0]
80020ed8:	70 08       	ld.w	r8,r8[0x0]
80020eda:	f2 cb ef b0 	sub	r11,r9,-4176
80020ede:	f0 ca f2 64 	sub	r10,r8,-3484
80020ee2:	f6 c8 00 00 	sub	r8,r11,0
80020ee6:	f4 c9 00 00 	sub	r9,r10,0
80020eea:	72 0c       	ld.w	r12,r9[0x0]
80020eec:	91 0c       	st.w	r8[0x0],r12
80020eee:	72 1c       	ld.w	r12,r9[0x4]
80020ef0:	91 1c       	st.w	r8[0x4],r12
80020ef2:	72 2c       	ld.w	r12,r9[0x8]
80020ef4:	91 2c       	st.w	r8[0x8],r12
80020ef6:	72 39       	ld.w	r9,r9[0xc]
80020ef8:	91 39       	st.w	r8[0xc],r9
80020efa:	f6 c8 ff f0 	sub	r8,r11,-16
80020efe:	f4 c9 ff f0 	sub	r9,r10,-16
80020f02:	72 0c       	ld.w	r12,r9[0x0]
80020f04:	91 0c       	st.w	r8[0x0],r12
80020f06:	72 1c       	ld.w	r12,r9[0x4]
80020f08:	91 1c       	st.w	r8[0x4],r12
80020f0a:	72 2c       	ld.w	r12,r9[0x8]
80020f0c:	91 2c       	st.w	r8[0x8],r12
80020f0e:	72 39       	ld.w	r9,r9[0xc]
80020f10:	91 39       	st.w	r8[0xc],r9
80020f12:	f6 c8 ff e0 	sub	r8,r11,-32
80020f16:	f4 c9 ff e0 	sub	r9,r10,-32
80020f1a:	72 0a       	ld.w	r10,r9[0x0]
80020f1c:	91 0a       	st.w	r8[0x0],r10
80020f1e:	72 1a       	ld.w	r10,r9[0x4]
80020f20:	91 1a       	st.w	r8[0x4],r10
80020f22:	72 2a       	ld.w	r10,r9[0x8]
80020f24:	91 2a       	st.w	r8[0x8],r10
80020f26:	72 39       	ld.w	r9,r9[0xc]
80020f28:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80020f2a:	ec f8 00 00 	ld.w	r8,r6[0]
80020f2e:	70 09       	ld.w	r9,r8[0x0]
80020f30:	ee ca 00 0c 	sub	r10,r7,12
80020f34:	20 4d       	sub	sp,16
80020f36:	1a 98       	mov	r8,sp
80020f38:	20 08       	sub	r8,0
80020f3a:	20 09       	sub	r9,0
80020f3c:	72 0b       	ld.w	r11,r9[0x0]
80020f3e:	91 0b       	st.w	r8[0x0],r11
80020f40:	72 1b       	ld.w	r11,r9[0x4]
80020f42:	91 1b       	st.w	r8[0x4],r11
80020f44:	72 2b       	ld.w	r11,r9[0x8]
80020f46:	91 2b       	st.w	r8[0x8],r11
80020f48:	72 39       	ld.w	r9,r9[0xc]
80020f4a:	91 39       	st.w	r8[0xc],r9
80020f4c:	14 9c       	mov	r12,r10
80020f4e:	f0 16 00 6d 	mcall	r6[436]
80020f52:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
80020f54:	ec f8 00 00 	ld.w	r8,r6[0]
80020f58:	70 08       	ld.w	r8,r8[0x0]
80020f5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020f5e:	f1 49 10 5c 	st.w	r8[4188],r9
	}
}
80020f62:	2f dd       	sub	sp,-12
80020f64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020f68:	80 02       	ld.sh	r2,r0[0x0]
80020f6a:	0c 8e       	andn	lr,r6

80020f6c <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80020f6c:	eb cd 40 c0 	pushm	r6-r7,lr
80020f70:	1a 97       	mov	r7,sp
80020f72:	48 96       	lddpc	r6,80020f94 <waypoint_hold_position_handler+0x28>
80020f74:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80020f76:	ec f8 00 00 	ld.w	r8,r6[0]
80020f7a:	70 08       	ld.w	r8,r8[0x0]
80020f7c:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80020f80:	ec 18 00 01 	eorl	r8,0x1
80020f84:	5c 58       	castu.b	r8
80020f86:	c0 30       	breq	80020f8c <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80020f88:	f0 16 00 8d 	mcall	r6[564]
	}
	wp_hold_init();
80020f8c:	f0 16 00 b2 	mcall	r6[712]
}
80020f90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020f94:	80 02       	ld.sh	r2,r0[0x0]
80020f96:	0d f8       	ld.ub	r8,r6[0x7]
80020f98:	20 72       	sub	r2,7
80020f9a:	65 61       	ld.w	r1,r2[0x58]
80020f9c:	63 68       	ld.w	r8,r1[0x58]
80020f9e:	65 64       	ld.w	r4,r2[0x58]
80020fa0:	2c 20       	sub	r0,-62
80020fa2:	64 69       	ld.w	r9,r2[0x18]
80020fa4:	73 74       	ld.w	r4,r9[0x5c]
80020fa6:	61 6e       	ld.w	lr,r0[0x58]
80020fa8:	63 65       	ld.w	r5,r1[0x58]
80020faa:	3a 00       	mov	r0,-96
80020fac:	20 6c       	sub	r12,6
80020fae:	65 73       	ld.w	r3,r2[0x5c]
80020fb0:	73 20       	ld.w	r0,r9[0x48]
80020fb2:	74 68       	ld.w	r8,r10[0x18]
80020fb4:	61 6e       	ld.w	lr,r0[0x58]
80020fb6:	20 3a       	sub	r10,3
80020fb8:	00 00       	add	r0,r0
80020fba:	00 00       	add	r0,r0
80020fbc:	2e 0a       	sub	r10,-32
80020fbe:	00 00       	add	r0,r0
80020fc0:	41 75       	lddsp	r5,sp[0x5c]
80020fc2:	74 6f       	ld.w	pc,r10[0x18]
80020fc4:	63 6f       	ld.w	pc,r1[0x58]
80020fc6:	6e 74       	ld.w	r4,r7[0x1c]
80020fc8:	69 6e       	ld.w	lr,r4[0x58]
80020fca:	75 65       	ld.w	r5,r10[0x58]
80020fcc:	20 74       	sub	r4,7
80020fce:	6f 77       	ld.w	r7,r7[0x5c]
80020fd0:	61 72       	ld.w	r2,r0[0x5c]
80020fd2:	64 73       	ld.w	r3,r2[0x1c]
80020fd4:	20 77       	sub	r7,7
80020fd6:	61 79       	ld.w	r9,r0[0x5c]
80020fd8:	70 6f       	ld.w	pc,r8[0x18]
80020fda:	69 6e       	ld.w	lr,r4[0x58]
80020fdc:	74 20       	ld.w	r0,r10[0x8]
80020fde:	4e 72       	lddpc	r2,80021178 <waypoint_navigation_handler+0x18e>
80020fe0:	00 00       	add	r0,r0
80020fe2:	00 00       	add	r0,r0
80020fe4:	53 74       	stdsp	sp[0xdc],r4
80020fe6:	6f 70       	ld.w	r0,r7[0x5c]
80020fe8:	0a 00       	add	r0,r5

80020fea <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80020fea:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80020fee:	1a 97       	mov	r7,sp
80020ff0:	21 0d       	sub	sp,64
80020ff2:	fe f6 03 ba 	ld.w	r6,pc[954]
80020ff6:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80020ff8:	ec f8 00 00 	ld.w	r8,r6[0]
80020ffc:	70 08       	ld.w	r8,r8[0x0]
80020ffe:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80021002:	58 08       	cp.w	r8,0
80021004:	e0 80 01 cd 	breq	8002139e <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021008:	30 08       	mov	r8,0
8002100a:	ef 68 ff ff 	st.b	r7[-1],r8
8002100e:	c2 18       	rjmp	80021050 <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
80021010:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021014:	ec f9 00 00 	ld.w	r9,r6[0]
80021018:	72 09       	ld.w	r9,r9[0x0]
8002101a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002101e:	f4 ca fb f8 	sub	r10,r10,-1032
80021022:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021026:	ec f9 00 00 	ld.w	r9,r6[0]
8002102a:	72 09       	ld.w	r9,r9[0x0]
8002102c:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021030:	f6 cb fc 99 	sub	r11,r11,-871
80021034:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021038:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002103c:	a3 68       	lsl	r8,0x2
8002103e:	ee 08 00 08 	add	r8,r7,r8
80021042:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021046:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002104a:	2f f8       	sub	r8,-1
8002104c:	ef 68 ff ff 	st.b	r7[-1],r8
80021050:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021054:	30 28       	mov	r8,2
80021056:	f0 09 18 00 	cp.b	r9,r8
8002105a:	fe 98 ff db 	brls	80021010 <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8002105e:	ec f8 00 00 	ld.w	r8,r6[0]
80021062:	70 05       	ld.w	r5,r8[0x0]
80021064:	ee c8 00 10 	sub	r8,r7,16
80021068:	10 9c       	mov	r12,r8
8002106a:	fe b0 f0 d5 	rcall	8001f214 <vector_norm_sqr>
8002106e:	18 98       	mov	r8,r12
80021070:	eb 48 10 b0 	st.w	r5[4272],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80021074:	ec f8 00 00 	ld.w	r8,r6[0]
80021078:	70 08       	ld.w	r8,r8[0x0]
8002107a:	f0 fa 10 b0 	ld.w	r10,r8[4272]
8002107e:	ec f8 00 00 	ld.w	r8,r6[0]
80021082:	70 08       	ld.w	r8,r8[0x0]
80021084:	f0 f9 0f f8 	ld.w	r9,r8[4088]
80021088:	ec f8 00 00 	ld.w	r8,r6[0]
8002108c:	70 08       	ld.w	r8,r8[0x0]
8002108e:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80021092:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021096:	30 18       	mov	r8,1
80021098:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8002109c:	e0 8c 00 03 	brvs	800210a2 <waypoint_navigation_handler+0xb8>
800210a0:	c0 25       	brlt	800210a4 <waypoint_navigation_handler+0xba>
800210a2:	30 08       	mov	r8,0
800210a4:	5c 58       	castu.b	r8
800210a6:	e0 80 01 80 	breq	800213a6 <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
800210aa:	fe cc 1d a2 	sub	r12,pc,7586
800210ae:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
800210b2:	ec f8 00 00 	ld.w	r8,r6[0]
800210b6:	70 08       	ld.w	r8,r8[0x0]
800210b8:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800210bc:	5c 68       	casts.b	r8
800210be:	30 ab       	mov	r11,10
800210c0:	10 9c       	mov	r12,r8
800210c2:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
800210c6:	fe cc 01 2e 	sub	r12,pc,302
800210ca:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
800210ce:	ec f8 00 00 	ld.w	r8,r6[0]
800210d2:	70 08       	ld.w	r8,r8[0x0]
800210d4:	f0 f8 10 b0 	ld.w	r8,r8[4272]
800210d8:	10 9c       	mov	r12,r8
800210da:	f0 16 00 02 	mcall	r6[8]
800210de:	14 98       	mov	r8,r10
800210e0:	16 99       	mov	r9,r11
800210e2:	10 9a       	mov	r10,r8
800210e4:	12 9b       	mov	r11,r9
800210e6:	f0 16 00 6b 	mcall	r6[428]
800210ea:	14 98       	mov	r8,r10
800210ec:	16 99       	mov	r9,r11
800210ee:	10 9a       	mov	r10,r8
800210f0:	12 9b       	mov	r11,r9
800210f2:	f0 16 00 14 	mcall	r6[80]
800210f6:	18 98       	mov	r8,r12
800210f8:	30 ab       	mov	r11,10
800210fa:	10 9c       	mov	r12,r8
800210fc:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
80021100:	fe cc 01 54 	sub	r12,pc,340
80021104:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80021108:	ec f8 00 00 	ld.w	r8,r6[0]
8002110c:	70 08       	ld.w	r8,r8[0x0]
8002110e:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80021112:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021116:	30 ab       	mov	r11,10
80021118:	10 9c       	mov	r12,r8
8002111a:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
8002111e:	fe cc 01 62 	sub	r12,pc,354
80021122:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021126:	ec f8 00 00 	ld.w	r8,r6[0]
8002112a:	70 08       	ld.w	r8,r8[0x0]
8002112c:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021130:	5c 68       	casts.b	r8
80021132:	5c 88       	casts.h	r8
80021134:	5c 78       	castu.h	r8
80021136:	10 9b       	mov	r11,r8
80021138:	30 0c       	mov	r12,0
8002113a:	fe b0 ef 9f 	rcall	8001f078 <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
8002113e:	ec f8 00 00 	ld.w	r8,r6[0]
80021142:	70 0a       	ld.w	r10,r8[0x0]
80021144:	ec f8 00 00 	ld.w	r8,r6[0]
80021148:	70 08       	ld.w	r8,r8[0x0]
8002114a:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8002114e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021152:	12 98       	mov	r8,r9
80021154:	a1 78       	lsl	r8,0x1
80021156:	12 08       	add	r8,r9
80021158:	a5 68       	lsl	r8,0x4
8002115a:	f4 08 00 08 	add	r8,r10,r8
8002115e:	f0 c9 f1 f0 	sub	r9,r8,-3600
80021162:	30 08       	mov	r8,0
80021164:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80021166:	ec f8 00 00 	ld.w	r8,r6[0]
8002116a:	70 08       	ld.w	r8,r8[0x0]
8002116c:	f1 39 0f f1 	ld.ub	r9,r8[4081]
80021170:	30 18       	mov	r8,1
80021172:	f0 09 18 00 	cp.b	r9,r8
80021176:	e0 81 01 07 	brne	80021384 <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
8002117a:	fe cc 01 ba 	sub	r12,pc,442
8002117e:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80021182:	ec f8 00 00 	ld.w	r8,r6[0]
80021186:	70 08       	ld.w	r8,r8[0x0]
80021188:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8002118c:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021190:	ec f8 00 00 	ld.w	r8,r6[0]
80021194:	70 08       	ld.w	r8,r8[0x0]
80021196:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8002119a:	5c 78       	castu.h	r8
8002119c:	20 18       	sub	r8,1
8002119e:	10 39       	cp.w	r9,r8
800211a0:	c0 81       	brne	800211b0 <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
800211a2:	ec f8 00 00 	ld.w	r8,r6[0]
800211a6:	70 09       	ld.w	r9,r8[0x0]
800211a8:	30 08       	mov	r8,0
800211aa:	f3 68 10 1e 	st.b	r9[4126],r8
800211ae:	c0 a8       	rjmp	800211c2 <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
800211b0:	ec f8 00 00 	ld.w	r8,r6[0]
800211b4:	70 08       	ld.w	r8,r8[0x0]
800211b6:	f1 39 10 1e 	ld.ub	r9,r8[4126]
800211ba:	2f f9       	sub	r9,-1
800211bc:	5c 59       	castu.b	r9
800211be:	f1 69 10 1e 	st.b	r8[4126],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
800211c2:	ec f8 00 00 	ld.w	r8,r6[0]
800211c6:	70 08       	ld.w	r8,r8[0x0]
800211c8:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800211cc:	5c 68       	casts.b	r8
800211ce:	30 ab       	mov	r11,10
800211d0:	10 9c       	mov	r12,r8
800211d2:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
800211d6:	fe cc 1b 9a 	sub	r12,pc,7066
800211da:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
800211de:	ec f8 00 00 	ld.w	r8,r6[0]
800211e2:	70 0a       	ld.w	r10,r8[0x0]
800211e4:	ec f8 00 00 	ld.w	r8,r6[0]
800211e8:	70 08       	ld.w	r8,r8[0x0]
800211ea:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800211ee:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800211f2:	12 98       	mov	r8,r9
800211f4:	a1 78       	lsl	r8,0x1
800211f6:	12 08       	add	r8,r9
800211f8:	a5 68       	lsl	r8,0x4
800211fa:	f4 08 00 08 	add	r8,r10,r8
800211fe:	f0 c9 f1 f0 	sub	r9,r8,-3600
80021202:	30 18       	mov	r8,1
80021204:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80021206:	ec f8 00 00 	ld.w	r8,r6[0]
8002120a:	70 0a       	ld.w	r10,r8[0x0]
8002120c:	ec f8 00 00 	ld.w	r8,r6[0]
80021210:	70 0b       	ld.w	r11,r8[0x0]
80021212:	ec f8 00 00 	ld.w	r8,r6[0]
80021216:	70 08       	ld.w	r8,r8[0x0]
80021218:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8002121c:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021220:	12 98       	mov	r8,r9
80021222:	a1 78       	lsl	r8,0x1
80021224:	12 08       	add	r8,r9
80021226:	a5 68       	lsl	r8,0x4
80021228:	f6 08 00 08 	add	r8,r11,r8
8002122c:	f0 c8 f1 f4 	sub	r8,r8,-3596
80021230:	f4 cb f0 14 	sub	r11,r10,-4076
80021234:	10 9a       	mov	r10,r8
80021236:	f6 c8 00 00 	sub	r8,r11,0
8002123a:	f4 c9 00 00 	sub	r9,r10,0
8002123e:	72 0c       	ld.w	r12,r9[0x0]
80021240:	91 0c       	st.w	r8[0x0],r12
80021242:	72 1c       	ld.w	r12,r9[0x4]
80021244:	91 1c       	st.w	r8[0x4],r12
80021246:	72 2c       	ld.w	r12,r9[0x8]
80021248:	91 2c       	st.w	r8[0x8],r12
8002124a:	72 39       	ld.w	r9,r9[0xc]
8002124c:	91 39       	st.w	r8[0xc],r9
8002124e:	f6 c8 ff f0 	sub	r8,r11,-16
80021252:	f4 c9 ff f0 	sub	r9,r10,-16
80021256:	72 0c       	ld.w	r12,r9[0x0]
80021258:	91 0c       	st.w	r8[0x0],r12
8002125a:	72 1c       	ld.w	r12,r9[0x4]
8002125c:	91 1c       	st.w	r8[0x4],r12
8002125e:	72 2c       	ld.w	r12,r9[0x8]
80021260:	91 2c       	st.w	r8[0x8],r12
80021262:	72 39       	ld.w	r9,r9[0xc]
80021264:	91 39       	st.w	r8[0xc],r9
80021266:	f6 c8 ff e0 	sub	r8,r11,-32
8002126a:	f4 c9 ff e0 	sub	r9,r10,-32
8002126e:	72 0a       	ld.w	r10,r9[0x0]
80021270:	91 0a       	st.w	r8[0x0],r10
80021272:	72 1a       	ld.w	r10,r9[0x4]
80021274:	91 1a       	st.w	r8[0x4],r10
80021276:	72 2a       	ld.w	r10,r9[0x8]
80021278:	91 2a       	st.w	r8[0x8],r10
8002127a:	72 39       	ld.w	r9,r9[0xc]
8002127c:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8002127e:	ec f8 00 00 	ld.w	r8,r6[0]
80021282:	70 05       	ld.w	r5,r8[0x0]
80021284:	ec f8 00 00 	ld.w	r8,r6[0]
80021288:	70 08       	ld.w	r8,r8[0x0]
8002128a:	ec f9 00 00 	ld.w	r9,r6[0]
8002128e:	72 0e       	ld.w	lr,r9[0x0]
80021290:	ee cc 00 40 	sub	r12,r7,64
80021294:	20 7d       	sub	sp,28
80021296:	1a 99       	mov	r9,sp
80021298:	12 9a       	mov	r10,r9
8002129a:	f0 cb f2 54 	sub	r11,r8,-3500
8002129e:	f4 c8 00 00 	sub	r8,r10,0
800212a2:	f6 c9 00 00 	sub	r9,r11,0
800212a6:	72 03       	ld.w	r3,r9[0x0]
800212a8:	91 03       	st.w	r8[0x0],r3
800212aa:	72 13       	ld.w	r3,r9[0x4]
800212ac:	91 13       	st.w	r8[0x4],r3
800212ae:	72 23       	ld.w	r3,r9[0x8]
800212b0:	91 23       	st.w	r8[0x8],r3
800212b2:	72 39       	ld.w	r9,r9[0xc]
800212b4:	91 39       	st.w	r8[0xc],r9
800212b6:	f6 e8 00 10 	ld.d	r8,r11[16]
800212ba:	f4 e9 00 10 	st.d	r10[16],r8
800212be:	76 68       	ld.w	r8,r11[0x18]
800212c0:	95 68       	st.w	r10[0x18],r8
800212c2:	20 cd       	sub	sp,48
800212c4:	1a 98       	mov	r8,sp
800212c6:	10 9b       	mov	r11,r8
800212c8:	fc ca f0 14 	sub	r10,lr,-4076
800212cc:	f6 c8 00 00 	sub	r8,r11,0
800212d0:	f4 c9 00 00 	sub	r9,r10,0
800212d4:	72 0e       	ld.w	lr,r9[0x0]
800212d6:	91 0e       	st.w	r8[0x0],lr
800212d8:	72 1e       	ld.w	lr,r9[0x4]
800212da:	91 1e       	st.w	r8[0x4],lr
800212dc:	72 2e       	ld.w	lr,r9[0x8]
800212de:	91 2e       	st.w	r8[0x8],lr
800212e0:	72 39       	ld.w	r9,r9[0xc]
800212e2:	91 39       	st.w	r8[0xc],r9
800212e4:	f6 c8 ff f0 	sub	r8,r11,-16
800212e8:	f4 c9 ff f0 	sub	r9,r10,-16
800212ec:	72 0e       	ld.w	lr,r9[0x0]
800212ee:	91 0e       	st.w	r8[0x0],lr
800212f0:	72 1e       	ld.w	lr,r9[0x4]
800212f2:	91 1e       	st.w	r8[0x4],lr
800212f4:	72 2e       	ld.w	lr,r9[0x8]
800212f6:	91 2e       	st.w	r8[0x8],lr
800212f8:	72 39       	ld.w	r9,r9[0xc]
800212fa:	91 39       	st.w	r8[0xc],r9
800212fc:	f6 c8 ff e0 	sub	r8,r11,-32
80021300:	f4 c9 ff e0 	sub	r9,r10,-32
80021304:	72 0a       	ld.w	r10,r9[0x0]
80021306:	91 0a       	st.w	r8[0x0],r10
80021308:	72 1a       	ld.w	r10,r9[0x4]
8002130a:	91 1a       	st.w	r8[0x4],r10
8002130c:	72 2a       	ld.w	r10,r9[0x8]
8002130e:	91 2a       	st.w	r8[0x8],r10
80021310:	72 39       	ld.w	r9,r9[0xc]
80021312:	91 39       	st.w	r8[0xc],r9
80021314:	f0 16 00 fe 	mcall	r6[1016]
80021318:	2e dd       	sub	sp,-76
8002131a:	ea cb ef e0 	sub	r11,r5,-4128
8002131e:	ee ca 00 40 	sub	r10,r7,64
80021322:	f6 c8 00 00 	sub	r8,r11,0
80021326:	f4 c9 00 00 	sub	r9,r10,0
8002132a:	72 0c       	ld.w	r12,r9[0x0]
8002132c:	91 0c       	st.w	r8[0x0],r12
8002132e:	72 1c       	ld.w	r12,r9[0x4]
80021330:	91 1c       	st.w	r8[0x4],r12
80021332:	72 2c       	ld.w	r12,r9[0x8]
80021334:	91 2c       	st.w	r8[0x8],r12
80021336:	72 39       	ld.w	r9,r9[0xc]
80021338:	91 39       	st.w	r8[0xc],r9
8002133a:	f6 c8 ff f0 	sub	r8,r11,-16
8002133e:	f4 c9 ff f0 	sub	r9,r10,-16
80021342:	72 0c       	ld.w	r12,r9[0x0]
80021344:	91 0c       	st.w	r8[0x0],r12
80021346:	72 1c       	ld.w	r12,r9[0x4]
80021348:	91 1c       	st.w	r8[0x4],r12
8002134a:	72 2c       	ld.w	r12,r9[0x8]
8002134c:	91 2c       	st.w	r8[0x8],r12
8002134e:	72 39       	ld.w	r9,r9[0xc]
80021350:	91 39       	st.w	r8[0xc],r9
80021352:	f6 c8 ff e0 	sub	r8,r11,-32
80021356:	f4 c9 ff e0 	sub	r9,r10,-32
8002135a:	72 0a       	ld.w	r10,r9[0x0]
8002135c:	91 0a       	st.w	r8[0x0],r10
8002135e:	72 1a       	ld.w	r10,r9[0x4]
80021360:	91 1a       	st.w	r8[0x4],r10
80021362:	72 2a       	ld.w	r10,r9[0x8]
80021364:	91 2a       	st.w	r8[0x8],r10
80021366:	72 39       	ld.w	r9,r9[0xc]
80021368:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
8002136a:	ec f8 00 00 	ld.w	r8,r6[0]
8002136e:	70 08       	ld.w	r8,r8[0x0]
80021370:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021374:	5c 68       	casts.b	r8
80021376:	5c 88       	casts.h	r8
80021378:	5c 78       	castu.h	r8
8002137a:	10 9b       	mov	r11,r8
8002137c:	30 0c       	mov	r12,0
8002137e:	fe b0 ed 5d 	rcall	8001ee38 <mavlink_msg_mission_current_send>
80021382:	c1 28       	rjmp	800213a6 <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80021384:	ec f8 00 00 	ld.w	r8,r6[0]
80021388:	70 09       	ld.w	r9,r8[0x0]
8002138a:	30 08       	mov	r8,0
8002138c:	f3 68 10 b4 	st.b	r9[4276],r8
				dbg_print("Stop\n");
80021390:	fe cc 03 ac 	sub	r12,pc,940
80021394:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80021398:	f0 16 00 b2 	mcall	r6[712]
8002139c:	c0 58       	rjmp	800213a6 <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
8002139e:	f0 16 00 8d 	mcall	r6[564]
		wp_hold_init();
800213a2:	f0 16 00 b2 	mcall	r6[712]
	}
}
800213a6:	2f 0d       	sub	sp,-64
800213a8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800213ac:	80 02       	ld.sh	r2,r0[0x0]
800213ae:	0e 7a       	tst	r10,r7
800213b0:	43 72       	lddsp	r2,sp[0xdc]
800213b2:	69 74       	ld.w	r4,r4[0x5c]
800213b4:	69 63       	ld.w	r3,r4[0x58]
800213b6:	61 6c       	ld.w	r12,r0[0x58]
800213b8:	20 53       	sub	r3,5
800213ba:	74 61       	ld.w	r1,r10[0x18]
800213bc:	74 65       	ld.w	r5,r10[0x18]
800213be:	21 20       	sub	r0,18
800213c0:	43 6c       	lddsp	r12,sp[0xd8]
800213c2:	69 6d       	ld.w	sp,r4[0x58]
800213c4:	62 69       	ld.w	r9,r1[0x18]
800213c6:	6e 67       	ld.w	r7,r7[0x18]
800213c8:	20 74       	sub	r4,7
800213ca:	6f 20       	ld.w	r0,r7[0x48]
800213cc:	73 61       	ld.w	r1,r9[0x58]
800213ce:	66 65       	ld.w	r5,r3[0x18]
800213d0:	20 61       	sub	r1,6
800213d2:	6c 74       	ld.w	r4,r6[0x1c]
800213d4:	69 74       	ld.w	r4,r4[0x5c]
800213d6:	75 64       	ld.w	r4,r10[0x58]
800213d8:	65 2e       	ld.w	lr,r2[0x48]
800213da:	0a 00       	add	r0,r5
800213dc:	43 72       	lddsp	r2,sp[0xdc]
800213de:	69 74       	ld.w	r4,r4[0x5c]
800213e0:	69 63       	ld.w	r3,r4[0x58]
800213e2:	61 6c       	ld.w	r12,r0[0x58]
800213e4:	20 53       	sub	r3,5
800213e6:	74 61       	ld.w	r1,r10[0x18]
800213e8:	74 65       	ld.w	r5,r10[0x18]
800213ea:	21 20       	sub	r0,18
800213ec:	46 6c       	lddsp	r12,sp[0x198]
800213ee:	79 69       	ld.w	r9,r12[0x58]
800213f0:	6e 67       	ld.w	r7,r7[0x18]
800213f2:	20 74       	sub	r4,7
800213f4:	6f 20       	ld.w	r0,r7[0x48]
800213f6:	68 6f       	ld.w	pc,r4[0x18]
800213f8:	6d 65       	ld.w	r5,r6[0x58]
800213fa:	20 77       	sub	r7,7
800213fc:	61 79       	ld.w	r9,r0[0x5c]
800213fe:	70 6f       	ld.w	pc,r8[0x18]
80021400:	69 6e       	ld.w	lr,r4[0x58]
80021402:	74 2e       	ld.w	lr,r10[0x8]
80021404:	0a 00       	add	r0,r5
80021406:	00 00       	add	r0,r0
80021408:	43 72       	lddsp	r2,sp[0xdc]
8002140a:	69 74       	ld.w	r4,r4[0x5c]
8002140c:	69 63       	ld.w	r3,r4[0x58]
8002140e:	61 6c       	ld.w	r12,r0[0x58]
80021410:	20 53       	sub	r3,5
80021412:	74 61       	ld.w	r1,r10[0x18]
80021414:	74 65       	ld.w	r5,r10[0x18]
80021416:	21 20       	sub	r0,18
80021418:	50 65       	stdsp	sp[0x18],r5
8002141a:	72 66       	ld.w	r6,r9[0x18]
8002141c:	6f 72       	ld.w	r2,r7[0x5c]
8002141e:	6d 69       	ld.w	r9,r6[0x58]
80021420:	6e 67       	ld.w	r7,r7[0x18]
80021422:	20 63       	sub	r3,6
80021424:	72 69       	ld.w	r9,r9[0x18]
80021426:	74 69       	ld.w	r9,r10[0x18]
80021428:	63 61       	ld.w	r1,r1[0x58]
8002142a:	6c 20       	ld.w	r0,r6[0x8]
8002142c:	6c 61       	ld.w	r1,r6[0x18]
8002142e:	6e 64       	ld.w	r4,r7[0x18]
80021430:	69 6e       	ld.w	lr,r4[0x58]
80021432:	67 2e       	ld.w	lr,r3[0x48]
80021434:	0a 00       	add	r0,r5
80021436:	00 00       	add	r0,r0
80021438:	43 72       	lddsp	r2,sp[0xdc]
8002143a:	69 74       	ld.w	r4,r4[0x5c]
8002143c:	69 63       	ld.w	r3,r4[0x58]
8002143e:	61 6c       	ld.w	r12,r0[0x58]
80021440:	20 53       	sub	r3,5
80021442:	74 61       	ld.w	r1,r10[0x18]
80021444:	74 65       	ld.w	r5,r10[0x18]
80021446:	21 20       	sub	r0,18
80021448:	4c 61       	lddpc	r1,80021560 <waypoint_critical_handler+0xe8>
8002144a:	6e 64       	ld.w	r4,r7[0x18]
8002144c:	65 64       	ld.w	r4,r2[0x58]
8002144e:	2c 20       	sub	r0,-62
80021450:	73 77       	ld.w	r7,r9[0x5c]
80021452:	69 74       	ld.w	r4,r4[0x5c]
80021454:	63 68       	ld.w	r8,r1[0x58]
80021456:	69 6e       	ld.w	lr,r4[0x58]
80021458:	67 20       	ld.w	r0,r3[0x48]
8002145a:	6f 66       	ld.w	r6,r7[0x58]
8002145c:	66 20       	ld.w	r0,r3[0x8]
8002145e:	6d 6f       	ld.w	pc,r6[0x58]
80021460:	74 6f       	ld.w	pc,r10[0x18]
80021462:	72 73       	ld.w	r3,r9[0x1c]
80021464:	2c 20       	sub	r0,-62
80021466:	45 6d       	lddsp	sp,sp[0x158]
80021468:	65 72       	ld.w	r2,r2[0x5c]
8002146a:	67 65       	ld.w	r5,r3[0x58]
8002146c:	6e 63       	ld.w	r3,r7[0x18]
8002146e:	79 20       	ld.w	r0,r12[0x48]
80021470:	6d 6f       	ld.w	pc,r6[0x58]
80021472:	64 65       	ld.w	r5,r2[0x18]
80021474:	2e 0a       	sub	r10,-32
	...

80021478 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80021478:	eb cd 40 e0 	pushm	r5-r7,lr
8002147c:	1a 97       	mov	r7,sp
8002147e:	20 7d       	sub	sp,28
80021480:	fe f6 02 20 	ld.w	r6,pc[544]
80021484:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80021486:	ec f8 00 00 	ld.w	r8,r6[0]
8002148a:	70 08       	ld.w	r8,r8[0x0]
8002148c:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80021490:	ec 18 00 01 	eorl	r8,0x1
80021494:	5c 58       	castu.b	r8
80021496:	c1 10       	breq	800214b8 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80021498:	ec f8 00 00 	ld.w	r8,r6[0]
8002149c:	70 09       	ld.w	r9,r8[0x0]
8002149e:	30 18       	mov	r8,1
800214a0:	f3 68 10 b9 	st.b	r9[4281],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
800214a4:	fe cc 00 f4 	sub	r12,pc,244
800214a8:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
800214ac:	ec f8 00 00 	ld.w	r8,r6[0]
800214b0:	70 08       	ld.w	r8,r8[0x0]
800214b2:	30 19       	mov	r9,1
800214b4:	f1 49 12 e4 	st.w	r8[4836],r9
	}
	
	if (!(centralData->critical_next_state))
800214b8:	ec f8 00 00 	ld.w	r8,r6[0]
800214bc:	70 08       	ld.w	r8,r8[0x0]
800214be:	f1 38 10 ba 	ld.ub	r8,r8[4282]
800214c2:	ec 18 00 01 	eorl	r8,0x1
800214c6:	5c 58       	castu.b	r8
800214c8:	e0 80 00 a7 	breq	80021616 <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
800214cc:	ec f8 00 00 	ld.w	r8,r6[0]
800214d0:	70 09       	ld.w	r9,r8[0x0]
800214d2:	30 18       	mov	r8,1
800214d4:	f3 68 10 ba 	st.b	r9[4282],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
800214d8:	ec f8 00 00 	ld.w	r8,r6[0]
800214dc:	70 09       	ld.w	r9,r8[0x0]
800214de:	ee ca 00 10 	sub	r10,r7,16
800214e2:	20 4d       	sub	sp,16
800214e4:	1a 98       	mov	r8,sp
800214e6:	20 08       	sub	r8,0
800214e8:	20 09       	sub	r9,0
800214ea:	72 0b       	ld.w	r11,r9[0x0]
800214ec:	91 0b       	st.w	r8[0x0],r11
800214ee:	72 1b       	ld.w	r11,r9[0x4]
800214f0:	91 1b       	st.w	r8[0x4],r11
800214f2:	72 2b       	ld.w	r11,r9[0x8]
800214f4:	91 2b       	st.w	r8[0x8],r11
800214f6:	72 39       	ld.w	r9,r9[0xc]
800214f8:	91 39       	st.w	r8[0xc],r9
800214fa:	14 9c       	mov	r12,r10
800214fc:	f0 16 00 6d 	mcall	r6[436]
80021500:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
80021502:	ec f8 00 00 	ld.w	r8,r6[0]
80021506:	70 08       	ld.w	r8,r8[0x0]
80021508:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002150c:	f1 49 10 8c 	st.w	r8[4236],r9
		
		switch (centralData->critical_behavior)
80021510:	ec f8 00 00 	ld.w	r8,r6[0]
80021514:	70 08       	ld.w	r8,r8[0x0]
80021516:	f0 f8 12 e4 	ld.w	r8,r8[4836]
8002151a:	58 28       	cp.w	r8,2
8002151c:	c2 10       	breq	8002155e <waypoint_critical_handler+0xe6>
8002151e:	58 38       	cp.w	r8,3
80021520:	c3 30       	breq	80021586 <waypoint_critical_handler+0x10e>
80021522:	58 18       	cp.w	r8,1
80021524:	c4 31       	brne	800215aa <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
80021526:	ec f8 00 00 	ld.w	r8,r6[0]
8002152a:	70 08       	ld.w	r8,r8[0x0]
8002152c:	ec f9 00 00 	ld.w	r9,r6[0]
80021530:	72 09       	ld.w	r9,r9[0x0]
80021532:	f2 f9 0d 9c 	ld.w	r9,r9[3484]
80021536:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
8002153a:	ec f8 00 00 	ld.w	r8,r6[0]
8002153e:	70 08       	ld.w	r8,r8[0x0]
80021540:	ec f9 00 00 	ld.w	r9,r6[0]
80021544:	72 09       	ld.w	r9,r9[0x0]
80021546:	f2 f9 0d a0 	ld.w	r9,r9[3488]
8002154a:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
8002154e:	ec f8 00 00 	ld.w	r8,r6[0]
80021552:	70 08       	ld.w	r8,r8[0x0]
80021554:	fc 19 c1 f0 	movh	r9,0xc1f0
80021558:	f1 49 10 88 	st.w	r8[4232],r9
			
			break;
8002155c:	c2 78       	rjmp	800215aa <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
8002155e:	ec f8 00 00 	ld.w	r8,r6[0]
80021562:	70 08       	ld.w	r8,r8[0x0]
80021564:	30 09       	mov	r9,0
80021566:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
8002156a:	ec f8 00 00 	ld.w	r8,r6[0]
8002156e:	70 08       	ld.w	r8,r8[0x0]
80021570:	30 09       	mov	r9,0
80021572:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021576:	ec f8 00 00 	ld.w	r8,r6[0]
8002157a:	70 08       	ld.w	r8,r8[0x0]
8002157c:	fc 19 c1 f0 	movh	r9,0xc1f0
80021580:	f1 49 10 88 	st.w	r8[4232],r9
			break;
80021584:	c1 38       	rjmp	800215aa <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021586:	ec f8 00 00 	ld.w	r8,r6[0]
8002158a:	70 08       	ld.w	r8,r8[0x0]
8002158c:	30 09       	mov	r9,0
8002158e:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021592:	ec f8 00 00 	ld.w	r8,r6[0]
80021596:	70 08       	ld.w	r8,r8[0x0]
80021598:	30 09       	mov	r9,0
8002159a:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
8002159e:	ec f8 00 00 	ld.w	r8,r6[0]
800215a2:	70 08       	ld.w	r8,r8[0x0]
800215a4:	30 09       	mov	r9,0
800215a6:	f1 49 10 88 	st.w	r8[4232],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
800215aa:	30 08       	mov	r8,0
800215ac:	ef 68 ff ff 	st.b	r7[-1],r8
800215b0:	c2 18       	rjmp	800215f2 <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
800215b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800215b6:	ec f9 00 00 	ld.w	r9,r6[0]
800215ba:	72 09       	ld.w	r9,r9[0x0]
800215bc:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800215c0:	f4 ca fb e0 	sub	r10,r10,-1056
800215c4:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800215c8:	ec f9 00 00 	ld.w	r9,r6[0]
800215cc:	72 09       	ld.w	r9,r9[0x0]
800215ce:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800215d2:	f6 cb fc 99 	sub	r11,r11,-871
800215d6:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
800215da:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800215de:	a3 68       	lsl	r8,0x2
800215e0:	ee 08 00 08 	add	r8,r7,r8
800215e4:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
800215e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800215ec:	2f f8       	sub	r8,-1
800215ee:	ef 68 ff ff 	st.b	r7[-1],r8
800215f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800215f6:	30 28       	mov	r8,2
800215f8:	f0 09 18 00 	cp.b	r9,r8
800215fc:	fe 98 ff db 	brls	800215b2 <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021600:	ec f8 00 00 	ld.w	r8,r6[0]
80021604:	70 05       	ld.w	r5,r8[0x0]
80021606:	ee c8 00 1c 	sub	r8,r7,28
8002160a:	10 9c       	mov	r12,r8
8002160c:	fe b0 ee 04 	rcall	8001f214 <vector_norm_sqr>
80021610:	18 98       	mov	r8,r12
80021612:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
80021616:	ec f8 00 00 	ld.w	r8,r6[0]
8002161a:	70 08       	ld.w	r8,r8[0x0]
8002161c:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80021620:	30 18       	mov	r8,1
80021622:	fc 19 40 40 	movh	r9,0x4040
80021626:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8002162a:	e0 8c 00 03 	brvs	80021630 <waypoint_critical_handler+0x1b8>
8002162e:	c0 25       	brlt	80021632 <waypoint_critical_handler+0x1ba>
80021630:	30 08       	mov	r8,0
80021632:	5c 58       	castu.b	r8
80021634:	c3 20       	breq	80021698 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
80021636:	ec f8 00 00 	ld.w	r8,r6[0]
8002163a:	70 09       	ld.w	r9,r8[0x0]
8002163c:	30 08       	mov	r8,0
8002163e:	f3 68 10 ba 	st.b	r9[4282],r8
		switch (centralData->critical_behavior)
80021642:	ec f8 00 00 	ld.w	r8,r6[0]
80021646:	70 08       	ld.w	r8,r8[0x0]
80021648:	f0 f8 12 e4 	ld.w	r8,r8[4836]
8002164c:	58 28       	cp.w	r8,2
8002164e:	c1 00       	breq	8002166e <waypoint_critical_handler+0x1f6>
80021650:	58 38       	cp.w	r8,3
80021652:	c1 90       	breq	80021684 <waypoint_critical_handler+0x20c>
80021654:	58 18       	cp.w	r8,1
80021656:	c2 11       	brne	80021698 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80021658:	fe cc 02 7c 	sub	r12,pc,636
8002165c:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80021660:	ec f8 00 00 	ld.w	r8,r6[0]
80021664:	70 08       	ld.w	r8,r8[0x0]
80021666:	30 29       	mov	r9,2
80021668:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
8002166c:	c1 68       	rjmp	80021698 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
8002166e:	fe cc 02 66 	sub	r12,pc,614
80021672:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80021676:	ec f8 00 00 	ld.w	r8,r6[0]
8002167a:	70 08       	ld.w	r8,r8[0x0]
8002167c:	30 39       	mov	r9,3
8002167e:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
80021682:	c0 b8       	rjmp	80021698 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80021684:	fe cc 02 4c 	sub	r12,pc,588
80021688:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
8002168c:	ec f8 00 00 	ld.w	r8,r6[0]
80021690:	70 09       	ld.w	r9,r8[0x0]
80021692:	30 18       	mov	r8,1
80021694:	f3 68 10 b8 	st.b	r9[4280],r8
			break;
		}
	}
80021698:	2f 9d       	sub	sp,-28
8002169a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002169e:	00 00       	add	r0,r0
800216a0:	80 02       	ld.sh	r2,r0[0x0]
800216a2:	13 08       	ld.w	r8,r9++

800216a4 <buffer_full>:
800216a4:	eb cd 40 80 	pushm	r7,lr
800216a8:	1a 97       	mov	r7,sp
800216aa:	20 1d       	sub	sp,4
800216ac:	ef 4c ff fc 	st.w	r7[-4],r12
800216b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800216b4:	f1 38 01 00 	ld.ub	r8,r8[256]
800216b8:	2f f8       	sub	r8,-1
800216ba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800216be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800216c2:	f1 38 01 01 	ld.ub	r8,r8[257]
800216c6:	10 39       	cp.w	r9,r8
800216c8:	5f 08       	sreq	r8
800216ca:	10 9c       	mov	r12,r8
800216cc:	2f fd       	sub	sp,-4
800216ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800216d2 <buffer_put_lossy>:
800216d2:	eb cd 40 c0 	pushm	r6-r7,lr
800216d6:	1a 97       	mov	r7,sp
800216d8:	20 3d       	sub	sp,12
800216da:	4a 46       	lddpc	r6,80021768 <buffer_put_lossy+0x96>
800216dc:	1e 26       	rsub	r6,pc
800216de:	ef 4c ff f8 	st.w	r7[-8],r12
800216e2:	16 98       	mov	r8,r11
800216e4:	ef 68 ff f4 	st.b	r7[-12],r8
800216e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800216ec:	f1 38 01 00 	ld.ub	r8,r8[256]
800216f0:	2f f8       	sub	r8,-1
800216f2:	ef 68 ff ff 	st.b	r7[-1],r8
800216f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800216fa:	f1 38 01 01 	ld.ub	r8,r8[257]
800216fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021702:	f0 09 18 00 	cp.b	r9,r8
80021706:	c0 b1       	brne	8002171c <buffer_put_lossy+0x4a>
80021708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002170c:	f1 38 01 01 	ld.ub	r8,r8[257]
80021710:	2f f8       	sub	r8,-1
80021712:	5c 58       	castu.b	r8
80021714:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021718:	f3 68 01 01 	st.b	r9[257],r8
8002171c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021720:	f1 38 01 00 	ld.ub	r8,r8[256]
80021724:	10 99       	mov	r9,r8
80021726:	ee fa ff f8 	ld.w	r10,r7[-8]
8002172a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002172e:	f4 09 0b 08 	st.b	r10[r9],r8
80021732:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021736:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002173a:	f3 68 01 00 	st.b	r9[256],r8
8002173e:	ee fc ff f8 	ld.w	r12,r7[-8]
80021742:	f0 16 00 fa 	mcall	r6[1000]
80021746:	18 98       	mov	r8,r12
80021748:	5c 58       	castu.b	r8
8002174a:	c0 70       	breq	80021758 <buffer_put_lossy+0x86>
8002174c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021750:	30 18       	mov	r8,1
80021752:	f3 68 01 02 	st.b	r9[258],r8
80021756:	c0 68       	rjmp	80021762 <buffer_put_lossy+0x90>
80021758:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002175c:	30 08       	mov	r8,0
8002175e:	f3 68 01 02 	st.b	r9[258],r8
80021762:	2f dd       	sub	sp,-12
80021764:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021768:	80 02       	ld.sh	r2,r0[0x0]
8002176a:	15 60       	ld.uh	r0,--r10

8002176c <buffer_put>:
8002176c:	eb cd 40 c0 	pushm	r6-r7,lr
80021770:	1a 97       	mov	r7,sp
80021772:	20 3d       	sub	sp,12
80021774:	4a 16       	lddpc	r6,800217f8 <buffer_put+0x8c>
80021776:	1e 26       	rsub	r6,pc
80021778:	ef 4c ff f8 	st.w	r7[-8],r12
8002177c:	16 98       	mov	r8,r11
8002177e:	ef 68 ff f4 	st.b	r7[-12],r8
80021782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021786:	f1 38 01 00 	ld.ub	r8,r8[256]
8002178a:	2f f8       	sub	r8,-1
8002178c:	ef 68 ff ff 	st.b	r7[-1],r8
80021790:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021794:	f1 38 01 01 	ld.ub	r8,r8[257]
80021798:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002179c:	f0 09 18 00 	cp.b	r9,r8
800217a0:	c0 51       	brne	800217aa <buffer_put+0x3e>
800217a2:	e0 68 00 ff 	mov	r8,255
800217a6:	10 9c       	mov	r12,r8
800217a8:	c2 48       	rjmp	800217f0 <buffer_put+0x84>
800217aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800217ae:	f1 38 01 00 	ld.ub	r8,r8[256]
800217b2:	10 99       	mov	r9,r8
800217b4:	ee fa ff f8 	ld.w	r10,r7[-8]
800217b8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800217bc:	f4 09 0b 08 	st.b	r10[r9],r8
800217c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800217c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800217c8:	f3 68 01 00 	st.b	r9[256],r8
800217cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800217d0:	f0 16 00 fa 	mcall	r6[1000]
800217d4:	18 98       	mov	r8,r12
800217d6:	5c 58       	castu.b	r8
800217d8:	c0 70       	breq	800217e6 <buffer_put+0x7a>
800217da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800217de:	30 18       	mov	r8,1
800217e0:	f3 68 01 02 	st.b	r9[258],r8
800217e4:	c0 68       	rjmp	800217f0 <buffer_put+0x84>
800217e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800217ea:	30 08       	mov	r8,0
800217ec:	f3 68 01 02 	st.b	r9[258],r8
800217f0:	2f dd       	sub	sp,-12
800217f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800217f6:	00 00       	add	r0,r0
800217f8:	80 02       	ld.sh	r2,r0[0x0]
800217fa:	15 fa       	ld.ub	r10,r10[0x7]

800217fc <buffer_get>:
800217fc:	eb cd 40 80 	pushm	r7,lr
80021800:	1a 97       	mov	r7,sp
80021802:	20 2d       	sub	sp,8
80021804:	ef 4c ff f8 	st.w	r7[-8],r12
80021808:	30 08       	mov	r8,0
8002180a:	ef 68 ff ff 	st.b	r7[-1],r8
8002180e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021812:	f1 39 01 00 	ld.ub	r9,r8[256]
80021816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002181a:	f1 38 01 01 	ld.ub	r8,r8[257]
8002181e:	f0 09 18 00 	cp.b	r9,r8
80021822:	c1 a0       	breq	80021856 <buffer_get+0x5a>
80021824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021828:	f1 38 01 01 	ld.ub	r8,r8[257]
8002182c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021830:	f2 08 07 08 	ld.ub	r8,r9[r8]
80021834:	ef 68 ff ff 	st.b	r7[-1],r8
80021838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002183c:	f1 38 01 01 	ld.ub	r8,r8[257]
80021840:	2f f8       	sub	r8,-1
80021842:	5c 58       	castu.b	r8
80021844:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021848:	f3 68 01 01 	st.b	r9[257],r8
8002184c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021850:	30 08       	mov	r8,0
80021852:	f3 68 01 02 	st.b	r9[258],r8
80021856:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002185a:	10 9c       	mov	r12,r8
8002185c:	2f ed       	sub	sp,-8
8002185e:	e3 cd 80 80 	ldm	sp++,r7,pc

80021862 <buffer_empty>:
80021862:	eb cd 40 80 	pushm	r7,lr
80021866:	1a 97       	mov	r7,sp
80021868:	20 1d       	sub	sp,4
8002186a:	ef 4c ff fc 	st.w	r7[-4],r12
8002186e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021872:	f1 39 01 00 	ld.ub	r9,r8[256]
80021876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002187a:	f1 38 01 01 	ld.ub	r8,r8[257]
8002187e:	f0 09 18 00 	cp.b	r9,r8
80021882:	5f 08       	sreq	r8
80021884:	10 9c       	mov	r12,r8
80021886:	2f fd       	sub	sp,-4
80021888:	e3 cd 80 80 	ldm	sp++,r7,pc

8002188c <buffer_bytes_available>:
8002188c:	eb cd 40 80 	pushm	r7,lr
80021890:	1a 97       	mov	r7,sp
80021892:	20 1d       	sub	sp,4
80021894:	ef 4c ff fc 	st.w	r7[-4],r12
80021898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002189c:	f1 38 01 00 	ld.ub	r8,r8[256]
800218a0:	f0 c9 ff 00 	sub	r9,r8,-256
800218a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800218a8:	f1 38 01 01 	ld.ub	r8,r8[257]
800218ac:	f2 08 01 08 	sub	r8,r9,r8
800218b0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800218b4:	10 9c       	mov	r12,r8
800218b6:	2f fd       	sub	sp,-4
800218b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800218bc <buffer_init>:
800218bc:	eb cd 40 80 	pushm	r7,lr
800218c0:	1a 97       	mov	r7,sp
800218c2:	20 1d       	sub	sp,4
800218c4:	ef 4c ff fc 	st.w	r7[-4],r12
800218c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800218cc:	30 08       	mov	r8,0
800218ce:	f3 68 01 00 	st.b	r9[256],r8
800218d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800218d6:	30 08       	mov	r8,0
800218d8:	f3 68 01 01 	st.b	r9[257],r8
800218dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800218e0:	30 08       	mov	r8,0
800218e2:	f3 68 01 02 	st.b	r9[258],r8
800218e6:	2f fd       	sub	sp,-4
800218e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800218ec <buffer_clear>:
800218ec:	eb cd 40 80 	pushm	r7,lr
800218f0:	1a 97       	mov	r7,sp
800218f2:	20 1d       	sub	sp,4
800218f4:	ef 4c ff fc 	st.w	r7[-4],r12
800218f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800218fc:	30 08       	mov	r8,0
800218fe:	f3 68 01 00 	st.b	r9[256],r8
80021902:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021906:	30 08       	mov	r8,0
80021908:	f3 68 01 01 	st.b	r9[257],r8
8002190c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021910:	30 08       	mov	r8,0
80021912:	f3 68 01 02 	st.b	r9[258],r8
80021916:	2f fd       	sub	sp,-4
80021918:	e3 cd 80 80 	ldm	sp++,r7,pc

8002191c <make_buffered_stream>:
8002191c:	eb cd 40 c0 	pushm	r6-r7,lr
80021920:	1a 97       	mov	r7,sp
80021922:	20 2d       	sub	sp,8
80021924:	49 16       	lddpc	r6,80021968 <make_buffered_stream+0x4c>
80021926:	1e 26       	rsub	r6,pc
80021928:	ef 4c ff fc 	st.w	r7[-4],r12
8002192c:	ef 4b ff f8 	st.w	r7[-8],r11
80021930:	ec f9 01 10 	ld.w	r9,r6[272]
80021934:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021938:	91 09       	st.w	r8[0x0],r9
8002193a:	ec f9 01 4c 	ld.w	r9,r6[332]
8002193e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021942:	91 19       	st.w	r8[0x4],r9
80021944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021948:	30 09       	mov	r9,0
8002194a:	91 29       	st.w	r8[0x8],r9
8002194c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021950:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021954:	91 59       	st.w	r8[0x14],r9
80021956:	ec f9 00 b4 	ld.w	r9,r6[180]
8002195a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002195e:	91 49       	st.w	r8[0x10],r9
80021960:	2f ed       	sub	sp,-8
80021962:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021966:	00 00       	add	r0,r0
80021968:	80 02       	ld.sh	r2,r0[0x0]
8002196a:	17 aa       	ld.ub	r10,r11[0x2]

8002196c <make_buffered_stream_lossy>:
8002196c:	eb cd 40 c0 	pushm	r6-r7,lr
80021970:	1a 97       	mov	r7,sp
80021972:	20 2d       	sub	sp,8
80021974:	49 16       	lddpc	r6,800219b8 <make_buffered_stream_lossy+0x4c>
80021976:	1e 26       	rsub	r6,pc
80021978:	ef 4c ff fc 	st.w	r7[-4],r12
8002197c:	ef 4b ff f8 	st.w	r7[-8],r11
80021980:	ec f9 01 10 	ld.w	r9,r6[272]
80021984:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021988:	91 09       	st.w	r8[0x0],r9
8002198a:	ec f9 05 08 	ld.w	r9,r6[1288]
8002198e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021992:	91 19       	st.w	r8[0x4],r9
80021994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021998:	30 09       	mov	r9,0
8002199a:	91 29       	st.w	r8[0x8],r9
8002199c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800219a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800219a4:	91 59       	st.w	r8[0x14],r9
800219a6:	ec f9 00 b4 	ld.w	r9,r6[180]
800219aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800219ae:	91 49       	st.w	r8[0x10],r9
800219b0:	2f ed       	sub	sp,-8
800219b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800219b6:	00 00       	add	r0,r0
800219b8:	80 02       	ld.sh	r2,r0[0x0]
800219ba:	17 fa       	ld.ub	r10,r11[0x7]

800219bc <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800219bc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800219c0:	1a 97       	mov	r7,sp
800219c2:	20 8d       	sub	sp,32
800219c4:	4d 96       	lddpc	r6,80021b28 <local_to_global_position+0x16c>
800219c6:	1e 26       	rsub	r6,pc
800219c8:	ee c5 ff e0 	sub	r5,r7,-32
800219cc:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800219d0:	ea e2 00 18 	ld.d	r2,r5[24]
800219d4:	6a 08       	ld.w	r8,r5[0x0]
800219d6:	10 9c       	mov	r12,r8
800219d8:	f0 16 00 02 	mcall	r6[8]
800219dc:	fc 18 40 00 	movh	r8,0x4000
800219e0:	e0 69 54 a6 	mov	r9,21670
800219e4:	ea 19 41 58 	orh	r9,0x4158
800219e8:	f0 16 00 0c 	mcall	r6[48]
800219ec:	14 98       	mov	r8,r10
800219ee:	16 99       	mov	r9,r11
800219f0:	10 9a       	mov	r10,r8
800219f2:	12 9b       	mov	r11,r9
800219f4:	30 08       	mov	r8,0
800219f6:	e0 69 80 00 	mov	r9,32768
800219fa:	ea 19 40 66 	orh	r9,0x4066
800219fe:	f0 16 00 03 	mcall	r6[12]
80021a02:	14 98       	mov	r8,r10
80021a04:	16 99       	mov	r9,r11
80021a06:	10 9a       	mov	r10,r8
80021a08:	12 9b       	mov	r11,r9
80021a0a:	e0 68 2d 18 	mov	r8,11544
80021a0e:	ea 18 54 44 	orh	r8,0x5444
80021a12:	e0 69 21 fb 	mov	r9,8699
80021a16:	ea 19 40 09 	orh	r9,0x4009
80021a1a:	f0 16 00 0c 	mcall	r6[48]
80021a1e:	14 98       	mov	r8,r10
80021a20:	16 99       	mov	r9,r11
80021a22:	04 9a       	mov	r10,r2
80021a24:	06 9b       	mov	r11,r3
80021a26:	f0 16 00 05 	mcall	r6[20]
80021a2a:	14 98       	mov	r8,r10
80021a2c:	16 99       	mov	r9,r11
80021a2e:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
80021a32:	ea e2 00 10 	ld.d	r2,r5[16]
80021a36:	6a 18       	ld.w	r8,r5[0x4]
80021a38:	10 9c       	mov	r12,r8
80021a3a:	f0 16 00 02 	mcall	r6[8]
80021a3e:	14 90       	mov	r0,r10
80021a40:	16 91       	mov	r1,r11
80021a42:	ee ea ff ec 	ld.d	r10,r7[-20]
80021a46:	e0 68 2d 18 	mov	r8,11544
80021a4a:	ea 18 54 44 	orh	r8,0x5444
80021a4e:	e0 69 21 fb 	mov	r9,8699
80021a52:	ea 19 40 09 	orh	r9,0x4009
80021a56:	f0 16 00 03 	mcall	r6[12]
80021a5a:	14 98       	mov	r8,r10
80021a5c:	16 99       	mov	r9,r11
80021a5e:	10 9a       	mov	r10,r8
80021a60:	12 9b       	mov	r11,r9
80021a62:	30 08       	mov	r8,0
80021a64:	e0 69 80 00 	mov	r9,32768
80021a68:	ea 19 40 66 	orh	r9,0x4066
80021a6c:	f0 16 00 0c 	mcall	r6[48]
80021a70:	14 98       	mov	r8,r10
80021a72:	16 99       	mov	r9,r11
80021a74:	10 9a       	mov	r10,r8
80021a76:	12 9b       	mov	r11,r9
80021a78:	f0 16 00 ba 	mcall	r6[744]
80021a7c:	fc 18 40 00 	movh	r8,0x4000
80021a80:	e0 69 54 a6 	mov	r9,21670
80021a84:	ea 19 41 58 	orh	r9,0x4158
80021a88:	f0 16 00 03 	mcall	r6[12]
80021a8c:	14 98       	mov	r8,r10
80021a8e:	16 99       	mov	r9,r11
80021a90:	00 9a       	mov	r10,r0
80021a92:	02 9b       	mov	r11,r1
80021a94:	f0 16 00 0c 	mcall	r6[48]
80021a98:	14 98       	mov	r8,r10
80021a9a:	16 99       	mov	r9,r11
80021a9c:	10 9a       	mov	r10,r8
80021a9e:	12 9b       	mov	r11,r9
80021aa0:	30 08       	mov	r8,0
80021aa2:	e0 69 80 00 	mov	r9,32768
80021aa6:	ea 19 40 66 	orh	r9,0x4066
80021aaa:	f0 16 00 03 	mcall	r6[12]
80021aae:	14 98       	mov	r8,r10
80021ab0:	16 99       	mov	r9,r11
80021ab2:	10 9a       	mov	r10,r8
80021ab4:	12 9b       	mov	r11,r9
80021ab6:	e0 68 2d 18 	mov	r8,11544
80021aba:	ea 18 54 44 	orh	r8,0x5444
80021abe:	e0 69 21 fb 	mov	r9,8699
80021ac2:	ea 19 40 09 	orh	r9,0x4009
80021ac6:	f0 16 00 0c 	mcall	r6[48]
80021aca:	14 98       	mov	r8,r10
80021acc:	16 99       	mov	r9,r11
80021ace:	04 9a       	mov	r10,r2
80021ad0:	06 9b       	mov	r11,r3
80021ad2:	f0 16 00 05 	mcall	r6[20]
80021ad6:	14 98       	mov	r8,r10
80021ad8:	16 99       	mov	r9,r11
80021ada:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
80021ade:	6a 89       	ld.w	r9,r5[0x20]
80021ae0:	6a 28       	ld.w	r8,r5[0x8]
80021ae2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80021ae6:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
80021aea:	6a 38       	ld.w	r8,r5[0xc]
80021aec:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
80021af0:	ee fa ff e0 	ld.w	r10,r7[-32]
80021af4:	ee cb 00 1c 	sub	r11,r7,28
80021af8:	f4 c8 00 00 	sub	r8,r10,0
80021afc:	f6 c9 00 00 	sub	r9,r11,0
80021b00:	72 0c       	ld.w	r12,r9[0x0]
80021b02:	91 0c       	st.w	r8[0x0],r12
80021b04:	72 1c       	ld.w	r12,r9[0x4]
80021b06:	91 1c       	st.w	r8[0x4],r12
80021b08:	72 2c       	ld.w	r12,r9[0x8]
80021b0a:	91 2c       	st.w	r8[0x8],r12
80021b0c:	72 39       	ld.w	r9,r9[0xc]
80021b0e:	91 39       	st.w	r8[0xc],r9
80021b10:	f6 e8 00 10 	ld.d	r8,r11[16]
80021b14:	f4 e9 00 10 	st.d	r10[16],r8
80021b18:	76 68       	ld.w	r8,r11[0x18]
80021b1a:	95 68       	st.w	r10[0x18],r8
}
80021b1c:	ee fc ff e0 	ld.w	r12,r7[-32]
80021b20:	2f 8d       	sub	sp,-32
80021b22:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80021b26:	00 00       	add	r0,r0
80021b28:	80 02       	ld.sh	r2,r0[0x0]
80021b2a:	18 4a       	or	r10,r12

80021b2c <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
80021b2c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80021b30:	1a 97       	mov	r7,sp
80021b32:	20 ed       	sub	sp,56
80021b34:	4f 16       	lddpc	r6,80021cf8 <global_to_local_position+0x1cc>
80021b36:	1e 26       	rsub	r6,pc
80021b38:	ee c5 ff ec 	sub	r5,r7,-20
80021b3c:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
80021b3e:	ee ca 00 28 	sub	r10,r7,40
80021b42:	ea cb ff e4 	sub	r11,r5,-28
80021b46:	f4 c8 00 00 	sub	r8,r10,0
80021b4a:	f6 c9 00 00 	sub	r9,r11,0
80021b4e:	72 0c       	ld.w	r12,r9[0x0]
80021b50:	91 0c       	st.w	r8[0x0],r12
80021b52:	72 1c       	ld.w	r12,r9[0x4]
80021b54:	91 1c       	st.w	r8[0x4],r12
80021b56:	72 2c       	ld.w	r12,r9[0x8]
80021b58:	91 2c       	st.w	r8[0x8],r12
80021b5a:	72 39       	ld.w	r9,r9[0xc]
80021b5c:	91 39       	st.w	r8[0xc],r9
80021b5e:	f6 e8 00 10 	ld.d	r8,r11[16]
80021b62:	f4 e9 00 10 	st.d	r10[16],r8
80021b66:	76 68       	ld.w	r8,r11[0x18]
80021b68:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
80021b6a:	ea ea 00 08 	ld.d	r10,r5[8]
80021b6e:	e0 68 2d 18 	mov	r8,11544
80021b72:	ea 18 54 44 	orh	r8,0x5444
80021b76:	e0 69 21 fb 	mov	r9,8699
80021b7a:	ea 19 40 09 	orh	r9,0x4009
80021b7e:	f0 16 00 03 	mcall	r6[12]
80021b82:	14 98       	mov	r8,r10
80021b84:	16 99       	mov	r9,r11
80021b86:	10 9a       	mov	r10,r8
80021b88:	12 9b       	mov	r11,r9
80021b8a:	30 08       	mov	r8,0
80021b8c:	e0 69 80 00 	mov	r9,32768
80021b90:	ea 19 40 66 	orh	r9,0x4066
80021b94:	f0 16 00 0c 	mcall	r6[48]
80021b98:	14 98       	mov	r8,r10
80021b9a:	16 99       	mov	r9,r11
80021b9c:	10 9a       	mov	r10,r8
80021b9e:	12 9b       	mov	r11,r9
80021ba0:	f0 16 00 ba 	mcall	r6[744]
80021ba4:	fc 18 40 00 	movh	r8,0x4000
80021ba8:	e0 69 54 a6 	mov	r9,21670
80021bac:	ea 19 41 58 	orh	r9,0x4158
80021bb0:	f0 16 00 03 	mcall	r6[12]
80021bb4:	14 98       	mov	r8,r10
80021bb6:	16 99       	mov	r9,r11
80021bb8:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
80021bbc:	ea ea 00 08 	ld.d	r10,r5[8]
80021bc0:	ea e8 00 24 	ld.d	r8,r5[36]
80021bc4:	f0 16 00 11 	mcall	r6[68]
80021bc8:	14 98       	mov	r8,r10
80021bca:	16 99       	mov	r9,r11
80021bcc:	10 9a       	mov	r10,r8
80021bce:	12 9b       	mov	r11,r9
80021bd0:	e0 68 2d 18 	mov	r8,11544
80021bd4:	ea 18 54 44 	orh	r8,0x5444
80021bd8:	e0 69 21 fb 	mov	r9,8699
80021bdc:	ea 19 40 09 	orh	r9,0x4009
80021be0:	f0 16 00 03 	mcall	r6[12]
80021be4:	14 98       	mov	r8,r10
80021be6:	16 99       	mov	r9,r11
80021be8:	10 9a       	mov	r10,r8
80021bea:	12 9b       	mov	r11,r9
80021bec:	30 08       	mov	r8,0
80021bee:	e0 69 80 00 	mov	r9,32768
80021bf2:	ea 19 40 66 	orh	r9,0x4066
80021bf6:	f0 16 00 0c 	mcall	r6[48]
80021bfa:	14 98       	mov	r8,r10
80021bfc:	16 99       	mov	r9,r11
80021bfe:	10 9a       	mov	r10,r8
80021c00:	12 9b       	mov	r11,r9
80021c02:	f0 16 00 b8 	mcall	r6[736]
80021c06:	fc 18 40 00 	movh	r8,0x4000
80021c0a:	e0 69 54 a6 	mov	r9,21670
80021c0e:	ea 19 41 58 	orh	r9,0x4158
80021c12:	f0 16 00 03 	mcall	r6[12]
80021c16:	14 98       	mov	r8,r10
80021c18:	16 99       	mov	r9,r11
80021c1a:	10 9a       	mov	r10,r8
80021c1c:	12 9b       	mov	r11,r9
80021c1e:	f0 16 00 08 	mcall	r6[32]
80021c22:	18 98       	mov	r8,r12
80021c24:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80021c28:	ea ea 00 00 	ld.d	r10,r5[0]
80021c2c:	ea e8 00 1c 	ld.d	r8,r5[28]
80021c30:	f0 16 00 11 	mcall	r6[68]
80021c34:	14 98       	mov	r8,r10
80021c36:	16 99       	mov	r9,r11
80021c38:	10 9a       	mov	r10,r8
80021c3a:	12 9b       	mov	r11,r9
80021c3c:	e0 68 2d 18 	mov	r8,11544
80021c40:	ea 18 54 44 	orh	r8,0x5444
80021c44:	e0 69 21 fb 	mov	r9,8699
80021c48:	ea 19 40 09 	orh	r9,0x4009
80021c4c:	f0 16 00 03 	mcall	r6[12]
80021c50:	14 98       	mov	r8,r10
80021c52:	16 99       	mov	r9,r11
80021c54:	10 9a       	mov	r10,r8
80021c56:	12 9b       	mov	r11,r9
80021c58:	30 08       	mov	r8,0
80021c5a:	e0 69 80 00 	mov	r9,32768
80021c5e:	ea 19 40 66 	orh	r9,0x4066
80021c62:	f0 16 00 0c 	mcall	r6[48]
80021c66:	14 98       	mov	r8,r10
80021c68:	16 99       	mov	r9,r11
80021c6a:	10 9a       	mov	r10,r8
80021c6c:	12 9b       	mov	r11,r9
80021c6e:	f0 16 00 b8 	mcall	r6[736]
80021c72:	ee e8 ff f8 	ld.d	r8,r7[-8]
80021c76:	f0 16 00 03 	mcall	r6[12]
80021c7a:	14 98       	mov	r8,r10
80021c7c:	16 99       	mov	r9,r11
80021c7e:	10 9a       	mov	r10,r8
80021c80:	12 9b       	mov	r11,r9
80021c82:	f0 16 00 08 	mcall	r6[32]
80021c86:	18 98       	mov	r8,r12
80021c88:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
80021c8c:	6a 49       	ld.w	r9,r5[0x10]
80021c8e:	6a b8       	ld.w	r8,r5[0x2c]
80021c90:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80021c94:	ee 18 80 00 	eorh	r8,0x8000
80021c98:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
80021c9c:	6a 58       	ld.w	r8,r5[0x14]
80021c9e:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
80021ca2:	06 9b       	mov	r11,r3
80021ca4:	ee ca 00 38 	sub	r10,r7,56
80021ca8:	f6 c8 00 00 	sub	r8,r11,0
80021cac:	f4 c9 00 00 	sub	r9,r10,0
80021cb0:	72 0c       	ld.w	r12,r9[0x0]
80021cb2:	91 0c       	st.w	r8[0x0],r12
80021cb4:	72 1c       	ld.w	r12,r9[0x4]
80021cb6:	91 1c       	st.w	r8[0x4],r12
80021cb8:	72 2c       	ld.w	r12,r9[0x8]
80021cba:	91 2c       	st.w	r8[0x8],r12
80021cbc:	72 39       	ld.w	r9,r9[0xc]
80021cbe:	91 39       	st.w	r8[0xc],r9
80021cc0:	f6 c8 ff f0 	sub	r8,r11,-16
80021cc4:	f4 c9 ff f0 	sub	r9,r10,-16
80021cc8:	72 0c       	ld.w	r12,r9[0x0]
80021cca:	91 0c       	st.w	r8[0x0],r12
80021ccc:	72 1c       	ld.w	r12,r9[0x4]
80021cce:	91 1c       	st.w	r8[0x4],r12
80021cd0:	72 2c       	ld.w	r12,r9[0x8]
80021cd2:	91 2c       	st.w	r8[0x8],r12
80021cd4:	72 39       	ld.w	r9,r9[0xc]
80021cd6:	91 39       	st.w	r8[0xc],r9
80021cd8:	f6 c8 ff e0 	sub	r8,r11,-32
80021cdc:	f4 c9 ff e0 	sub	r9,r10,-32
80021ce0:	72 0a       	ld.w	r10,r9[0x0]
80021ce2:	91 0a       	st.w	r8[0x0],r10
80021ce4:	72 1a       	ld.w	r10,r9[0x4]
80021ce6:	91 1a       	st.w	r8[0x4],r10
80021ce8:	72 2a       	ld.w	r10,r9[0x8]
80021cea:	91 2a       	st.w	r8[0x8],r10
80021cec:	72 39       	ld.w	r9,r9[0xc]
80021cee:	91 39       	st.w	r8[0xc],r9
}
80021cf0:	06 9c       	mov	r12,r3
80021cf2:	2f 2d       	sub	sp,-56
80021cf4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021cf8:	80 02       	ld.sh	r2,r0[0x0]
80021cfa:	19 ba       	ld.ub	r10,r12[0x3]

80021cfc <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
80021cfc:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80021d00:	1a 97       	mov	r7,sp
80021d02:	20 3d       	sub	sp,12
80021d04:	4d 06       	lddpc	r6,80021e44 <Quat_to_Aero+0x148>
80021d06:	1e 26       	rsub	r6,pc
80021d08:	ee c5 ff e4 	sub	r5,r7,-28
80021d0c:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
80021d0e:	6a 09       	ld.w	r9,r5[0x0]
80021d10:	6a 08       	ld.w	r8,r5[0x0]
80021d12:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021d16:	6a 1a       	ld.w	r10,r5[0x4]
80021d18:	6a 18       	ld.w	r8,r5[0x4]
80021d1a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021d1e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021d22:	6a 2a       	ld.w	r10,r5[0x8]
80021d24:	6a 28       	ld.w	r8,r5[0x8]
80021d26:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021d2a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021d2e:	6a 3a       	ld.w	r10,r5[0xc]
80021d30:	6a 38       	ld.w	r8,r5[0xc]
80021d32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021d36:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80021d3a:	10 9c       	mov	r12,r8
80021d3c:	f0 16 00 02 	mcall	r6[8]
80021d40:	14 92       	mov	r2,r10
80021d42:	16 93       	mov	r3,r11
80021d44:	6a 09       	ld.w	r9,r5[0x0]
80021d46:	6a 18       	ld.w	r8,r5[0x4]
80021d48:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021d4c:	6a 2a       	ld.w	r10,r5[0x8]
80021d4e:	6a 38       	ld.w	r8,r5[0xc]
80021d50:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021d54:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80021d58:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80021d5c:	10 9c       	mov	r12,r8
80021d5e:	f0 16 00 02 	mcall	r6[8]
80021d62:	04 98       	mov	r8,r2
80021d64:	06 99       	mov	r9,r3
80021d66:	f0 16 00 52 	mcall	r6[328]
80021d6a:	14 98       	mov	r8,r10
80021d6c:	16 99       	mov	r9,r11
80021d6e:	10 9a       	mov	r10,r8
80021d70:	12 9b       	mov	r11,r9
80021d72:	f0 16 00 08 	mcall	r6[32]
80021d76:	18 98       	mov	r8,r12
80021d78:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
80021d7c:	6a 19       	ld.w	r9,r5[0x4]
80021d7e:	6a 38       	ld.w	r8,r5[0xc]
80021d80:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021d84:	6a 0a       	ld.w	r10,r5[0x0]
80021d86:	6a 28       	ld.w	r8,r5[0x8]
80021d88:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021d8c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021d90:	fc 18 c0 00 	movh	r8,0xc000
80021d94:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021d98:	10 9c       	mov	r12,r8
80021d9a:	f0 16 00 02 	mcall	r6[8]
80021d9e:	14 98       	mov	r8,r10
80021da0:	16 99       	mov	r9,r11
80021da2:	10 9a       	mov	r10,r8
80021da4:	12 9b       	mov	r11,r9
80021da6:	f0 16 01 7c 	mcall	r6[1520]
80021daa:	14 98       	mov	r8,r10
80021dac:	16 99       	mov	r9,r11
80021dae:	10 9a       	mov	r10,r8
80021db0:	12 9b       	mov	r11,r9
80021db2:	f0 16 00 08 	mcall	r6[32]
80021db6:	18 98       	mov	r8,r12
80021db8:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80021dbc:	6a 09       	ld.w	r9,r5[0x0]
80021dbe:	6a 08       	ld.w	r8,r5[0x0]
80021dc0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021dc4:	6a 1a       	ld.w	r10,r5[0x4]
80021dc6:	6a 18       	ld.w	r8,r5[0x4]
80021dc8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021dcc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021dd0:	6a 2a       	ld.w	r10,r5[0x8]
80021dd2:	6a 28       	ld.w	r8,r5[0x8]
80021dd4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021dd8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021ddc:	6a 3a       	ld.w	r10,r5[0xc]
80021dde:	6a 38       	ld.w	r8,r5[0xc]
80021de0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021de4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80021de8:	10 9c       	mov	r12,r8
80021dea:	f0 16 00 02 	mcall	r6[8]
80021dee:	14 92       	mov	r2,r10
80021df0:	16 93       	mov	r3,r11
80021df2:	6a 09       	ld.w	r9,r5[0x0]
80021df4:	6a 38       	ld.w	r8,r5[0xc]
80021df6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021dfa:	6a 1a       	ld.w	r10,r5[0x4]
80021dfc:	6a 28       	ld.w	r8,r5[0x8]
80021dfe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021e02:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80021e06:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80021e0a:	10 9c       	mov	r12,r8
80021e0c:	f0 16 00 02 	mcall	r6[8]
80021e10:	04 98       	mov	r8,r2
80021e12:	06 99       	mov	r9,r3
80021e14:	f0 16 00 52 	mcall	r6[328]
80021e18:	14 98       	mov	r8,r10
80021e1a:	16 99       	mov	r9,r11
80021e1c:	10 9a       	mov	r10,r8
80021e1e:	12 9b       	mov	r11,r9
80021e20:	f0 16 00 08 	mcall	r6[32]
80021e24:	18 98       	mov	r8,r12
80021e26:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
80021e2a:	02 9a       	mov	r10,r1
80021e2c:	ee cb 00 0c 	sub	r11,r7,12
80021e30:	f6 e8 00 00 	ld.d	r8,r11[0]
80021e34:	f4 e9 00 00 	st.d	r10[0],r8
80021e38:	76 28       	ld.w	r8,r11[0x8]
80021e3a:	95 28       	st.w	r10[0x8],r8
}
80021e3c:	02 9c       	mov	r12,r1
80021e3e:	2f dd       	sub	sp,-12
80021e40:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80021e44:	80 02       	ld.sh	r2,r0[0x0]
80021e46:	1b 8a       	ld.ub	r10,sp[0x0]

80021e48 <get_yaw>:

float get_yaw(UQuat_t qe) {
80021e48:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80021e4c:	1a 97       	mov	r7,sp
80021e4e:	49 f6       	lddpc	r6,80021ec8 <get_yaw+0x80>
80021e50:	1e 26       	rsub	r6,pc
80021e52:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80021e56:	6a 09       	ld.w	r9,r5[0x0]
80021e58:	6a 08       	ld.w	r8,r5[0x0]
80021e5a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021e5e:	6a 1a       	ld.w	r10,r5[0x4]
80021e60:	6a 18       	ld.w	r8,r5[0x4]
80021e62:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021e66:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80021e6a:	6a 2a       	ld.w	r10,r5[0x8]
80021e6c:	6a 28       	ld.w	r8,r5[0x8]
80021e6e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021e72:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80021e76:	6a 3a       	ld.w	r10,r5[0xc]
80021e78:	6a 38       	ld.w	r8,r5[0xc]
80021e7a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021e7e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80021e82:	10 9c       	mov	r12,r8
80021e84:	f0 16 00 02 	mcall	r6[8]
80021e88:	14 92       	mov	r2,r10
80021e8a:	16 93       	mov	r3,r11
80021e8c:	6a 09       	ld.w	r9,r5[0x0]
80021e8e:	6a 38       	ld.w	r8,r5[0xc]
80021e90:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021e94:	6a 1a       	ld.w	r10,r5[0x4]
80021e96:	6a 28       	ld.w	r8,r5[0x8]
80021e98:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80021e9c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80021ea0:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80021ea4:	10 9c       	mov	r12,r8
80021ea6:	f0 16 00 02 	mcall	r6[8]
80021eaa:	04 98       	mov	r8,r2
80021eac:	06 99       	mov	r9,r3
80021eae:	f0 16 00 52 	mcall	r6[328]
80021eb2:	14 98       	mov	r8,r10
80021eb4:	16 99       	mov	r9,r11
80021eb6:	10 9a       	mov	r10,r8
80021eb8:	12 9b       	mov	r11,r9
80021eba:	f0 16 00 08 	mcall	r6[32]
80021ebe:	18 98       	mov	r8,r12
}
80021ec0:	10 9c       	mov	r12,r8
80021ec2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80021ec6:	00 00       	add	r0,r0
80021ec8:	80 02       	ld.sh	r2,r0[0x0]
80021eca:	1c d4       	st.w	--lr,r4

80021ecc <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80021ecc:	eb cd 40 c0 	pushm	r6-r7,lr
80021ed0:	1a 97       	mov	r7,sp
80021ed2:	20 1d       	sub	sp,4
80021ed4:	48 66       	lddpc	r6,80021eec <dbg_print_init+0x20>
80021ed6:	1e 26       	rsub	r6,pc
80021ed8:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80021edc:	ec f8 01 a8 	ld.w	r8,r6[424]
80021ee0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021ee4:	91 09       	st.w	r8[0x0],r9
}
80021ee6:	2f fd       	sub	sp,-4
80021ee8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021eec:	80 02       	ld.sh	r2,r0[0x0]
80021eee:	1d 5a       	ld.sh	r10,--lr

80021ef0 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80021ef0:	eb cd 40 80 	pushm	r7,lr
80021ef4:	1a 97       	mov	r7,sp
80021ef6:	20 2d       	sub	sp,8
80021ef8:	ef 4c ff fc 	st.w	r7[-4],r12
80021efc:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80021f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f04:	58 08       	cp.w	r8,0
80021f06:	c2 10       	breq	80021f48 <putstring+0x58>
80021f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f0c:	70 18       	ld.w	r8,r8[0x4]
80021f0e:	58 08       	cp.w	r8,0
80021f10:	c1 51       	brne	80021f3a <putstring+0x4a>
80021f12:	c1 c8       	rjmp	80021f4a <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
80021f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f18:	70 18       	ld.w	r8,r8[0x4]
80021f1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f1e:	13 89       	ld.ub	r9,r9[0x0]
80021f20:	12 9a       	mov	r10,r9
80021f22:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021f26:	72 59       	ld.w	r9,r9[0x14]
80021f28:	14 9b       	mov	r11,r10
80021f2a:	12 9c       	mov	r12,r9
80021f2c:	5d 18       	icall	r8
		s++;
80021f2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f32:	2f f8       	sub	r8,-1
80021f34:	ef 48 ff f8 	st.w	r7[-8],r8
80021f38:	c0 28       	rjmp	80021f3c <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80021f3a:	d7 03       	nop
80021f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f40:	11 88       	ld.ub	r8,r8[0x0]
80021f42:	58 08       	cp.w	r8,0
80021f44:	ce 81       	brne	80021f14 <putstring+0x24>
80021f46:	c0 28       	rjmp	80021f4a <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80021f48:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80021f4a:	2f ed       	sub	sp,-8
80021f4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f50 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
80021f50:	eb cd 40 c0 	pushm	r6-r7,lr
80021f54:	1a 97       	mov	r7,sp
80021f56:	20 2d       	sub	sp,8
80021f58:	49 76       	lddpc	r6,80021fb4 <putdigit+0x64>
80021f5a:	1e 26       	rsub	r6,pc
80021f5c:	ef 4c ff fc 	st.w	r7[-4],r12
80021f60:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80021f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f68:	58 08       	cp.w	r8,0
80021f6a:	c1 d0       	breq	80021fa4 <putdigit+0x54>
80021f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f70:	70 18       	ld.w	r8,r8[0x4]
80021f72:	58 08       	cp.w	r8,0
80021f74:	c1 a0       	breq	80021fa8 <putdigit+0x58>
	
if (c > 35)
80021f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f7a:	e0 48 00 23 	cp.w	r8,35
80021f7e:	e0 8b 00 17 	brhi	80021fac <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80021f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f86:	70 18       	ld.w	r8,r8[0x4]
80021f88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f8c:	ec fa 08 98 	ld.w	r10,r6[2200]
80021f90:	f4 09 07 09 	ld.ub	r9,r10[r9]
80021f94:	12 9a       	mov	r10,r9
80021f96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021f9a:	72 59       	ld.w	r9,r9[0x14]
80021f9c:	14 9b       	mov	r11,r10
80021f9e:	12 9c       	mov	r12,r9
80021fa0:	5d 18       	icall	r8
80021fa2:	c0 68       	rjmp	80021fae <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80021fa4:	d7 03       	nop
80021fa6:	c0 48       	rjmp	80021fae <putdigit+0x5e>
80021fa8:	d7 03       	nop
80021faa:	c0 28       	rjmp	80021fae <putdigit+0x5e>
	
if (c > 35)
    return;
80021fac:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80021fae:	2f ed       	sub	sp,-8
80021fb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021fb4:	80 02       	ld.sh	r2,r0[0x0]
80021fb6:	1d de       	ld.ub	lr,lr[0x5]

80021fb8 <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80021fb8:	eb cd 40 c0 	pushm	r6-r7,lr
80021fbc:	1a 97       	mov	r7,sp
80021fbe:	20 7d       	sub	sp,28
80021fc0:	4b 96       	lddpc	r6,800220a4 <putnum+0xec>
80021fc2:	1e 26       	rsub	r6,pc
80021fc4:	ef 4c ff ec 	st.w	r7[-20],r12
80021fc8:	ef 4b ff e8 	st.w	r7[-24],r11
80021fcc:	14 98       	mov	r8,r10
80021fce:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80021fd2:	30 a8       	mov	r8,10
80021fd4:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80021fd8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80021fdc:	58 08       	cp.w	r8,0
80021fde:	c5 d0       	breq	80022098 <putnum+0xe0>
80021fe0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80021fe4:	70 18       	ld.w	r8,r8[0x4]
80021fe6:	58 08       	cp.w	r8,0
80021fe8:	c5 a0       	breq	8002209c <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
80021fea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80021fee:	58 08       	cp.w	r8,0
80021ff0:	c1 04       	brge	80022010 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80021ff2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80021ff6:	70 18       	ld.w	r8,r8[0x4]
80021ff8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021ffc:	72 59       	ld.w	r9,r9[0x14]
80021ffe:	32 db       	mov	r11,45
80022000:	12 9c       	mov	r12,r9
80022002:	5d 18       	icall	r8
    c = c*-1;
80022004:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022008:	5c 38       	neg	r8
8002200a:	ef 48 ff e8 	st.w	r7[-24],r8
8002200e:	c0 a8       	rjmp	80022022 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80022010:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022014:	70 18       	ld.w	r8,r8[0x4]
80022016:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002201a:	72 59       	ld.w	r9,r9[0x14]
8002201c:	32 0b       	mov	r11,32
8002201e:	12 9c       	mov	r12,r9
80022020:	5d 18       	icall	r8
    
  }

  do{
    i--;
80022022:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022026:	20 18       	sub	r8,1
80022028:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
8002202c:	ee fa ff fc 	ld.w	r10,r7[-4]
80022030:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022034:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022038:	f0 09 0c 08 	divs	r8,r8,r9
8002203c:	12 98       	mov	r8,r9
8002203e:	5c 58       	castu.b	r8
80022040:	ee 0a 00 09 	add	r9,r7,r10
80022044:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022048:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002204c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022050:	f0 09 0c 08 	divs	r8,r8,r9
80022054:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002205c:	58 08       	cp.w	r8,0
8002205e:	c1 75       	brlt	8002208c <putnum+0xd4>
80022060:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022064:	58 08       	cp.w	r8,0
80022066:	fe 99 ff de 	brgt	80022022 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002206a:	c1 18       	rjmp	8002208c <putnum+0xd4>
     putdigit(out_stream, storage[i]);
8002206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022070:	ee 08 00 08 	add	r8,r7,r8
80022074:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022078:	10 9b       	mov	r11,r8
8002207a:	ee fc ff ec 	ld.w	r12,r7[-20]
8002207e:	f0 16 00 b0 	mcall	r6[704]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022086:	2f f8       	sub	r8,-1
80022088:	ef 48 ff fc 	st.w	r7[-4],r8
8002208c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022090:	58 98       	cp.w	r8,9
80022092:	fe 9a ff ed 	brle	8002206c <putnum+0xb4>
80022096:	c0 48       	rjmp	8002209e <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022098:	d7 03       	nop
8002209a:	c0 28       	rjmp	8002209e <putnum+0xe6>
8002209c:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
8002209e:	2f 9d       	sub	sp,-28
800220a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800220a4:	80 02       	ld.sh	r2,r0[0x0]
800220a6:	1e 46       	or	r6,pc

800220a8 <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
800220a8:	eb cd 40 c0 	pushm	r6-r7,lr
800220ac:	1a 97       	mov	r7,sp
800220ae:	20 7d       	sub	sp,28
800220b0:	4b 46       	lddpc	r6,80022180 <putnum_tight+0xd8>
800220b2:	1e 26       	rsub	r6,pc
800220b4:	ef 4c ff ec 	st.w	r7[-20],r12
800220b8:	ef 4b ff e8 	st.w	r7[-24],r11
800220bc:	14 98       	mov	r8,r10
800220be:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
800220c2:	30 a8       	mov	r8,10
800220c4:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800220c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800220cc:	58 08       	cp.w	r8,0
800220ce:	c5 30       	breq	80022174 <putnum_tight+0xcc>
800220d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800220d4:	70 18       	ld.w	r8,r8[0x4]
800220d6:	58 08       	cp.w	r8,0
800220d8:	c5 00       	breq	80022178 <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
800220da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800220de:	58 08       	cp.w	r8,0
800220e0:	c0 f4       	brge	800220fe <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
800220e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800220e6:	70 18       	ld.w	r8,r8[0x4]
800220e8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800220ec:	72 59       	ld.w	r9,r9[0x14]
800220ee:	32 db       	mov	r11,45
800220f0:	12 9c       	mov	r12,r9
800220f2:	5d 18       	icall	r8
    c = c*-1;
800220f4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800220f8:	5c 38       	neg	r8
800220fa:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
800220fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022102:	20 18       	sub	r8,1
80022104:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022108:	ee fa ff fc 	ld.w	r10,r7[-4]
8002210c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022110:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022114:	f0 09 0c 08 	divs	r8,r8,r9
80022118:	12 98       	mov	r8,r9
8002211a:	5c 58       	castu.b	r8
8002211c:	ee 0a 00 09 	add	r9,r7,r10
80022120:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022124:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022128:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002212c:	f0 09 0c 08 	divs	r8,r8,r9
80022130:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022138:	58 08       	cp.w	r8,0
8002213a:	c1 75       	brlt	80022168 <putnum_tight+0xc0>
8002213c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022140:	58 08       	cp.w	r8,0
80022142:	fe 99 ff de 	brgt	800220fe <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022146:	c1 18       	rjmp	80022168 <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002214c:	ee 08 00 08 	add	r8,r7,r8
80022150:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022154:	10 9b       	mov	r11,r8
80022156:	ee fc ff ec 	ld.w	r12,r7[-20]
8002215a:	f0 16 00 b0 	mcall	r6[704]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002215e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022162:	2f f8       	sub	r8,-1
80022164:	ef 48 ff fc 	st.w	r7[-4],r8
80022168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002216c:	58 98       	cp.w	r8,9
8002216e:	fe 9a ff ed 	brle	80022148 <putnum_tight+0xa0>
80022172:	c0 48       	rjmp	8002217a <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022174:	d7 03       	nop
80022176:	c0 28       	rjmp	8002217a <putnum_tight+0xd2>
80022178:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
8002217a:	2f 9d       	sub	sp,-28
8002217c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022180:	80 02       	ld.sh	r2,r0[0x0]
80022182:	1f 36       	ld.ub	r6,pc++
80022184:	2d 00       	sub	r0,-48
80022186:	00 00       	add	r0,r0
80022188:	2e 00       	sub	r0,-32

8002218a <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
8002218a:	eb cd 40 c0 	pushm	r6-r7,lr
8002218e:	1a 97       	mov	r7,sp
80022190:	20 8d       	sub	sp,32
80022192:	4b d6       	lddpc	r6,80022284 <putfloat+0xfa>
80022194:	1e 26       	rsub	r6,pc
80022196:	ef 4c ff e8 	st.w	r7[-24],r12
8002219a:	ef 4b ff e4 	st.w	r7[-28],r11
8002219e:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
800221a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800221a6:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
800221aa:	30 18       	mov	r8,1
800221ac:	ee fa ff e4 	ld.w	r10,r7[-28]
800221b0:	30 09       	mov	r9,0
800221b2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800221b6:	e0 8c 00 03 	brvs	800221bc <putfloat+0x32>
800221ba:	c0 25       	brlt	800221be <putfloat+0x34>
800221bc:	30 08       	mov	r8,0
800221be:	5c 58       	castu.b	r8
800221c0:	c0 d0       	breq	800221da <putfloat+0x50>
		putstring(out_stream, "-");
800221c2:	fe cb 00 3e 	sub	r11,pc,62
800221c6:	ee fc ff e8 	ld.w	r12,r7[-24]
800221ca:	f0 16 00 33 	mcall	r6[204]
		num=-c;
800221ce:	ee f8 ff e4 	ld.w	r8,r7[-28]
800221d2:	ee 18 80 00 	eorh	r8,0x8000
800221d6:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
800221da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800221de:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800221e2:	ef 48 ff fc 	st.w	r7[-4],r8
800221e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800221ea:	5c 48       	abs	r8
800221ec:	ef 48 ff fc 	st.w	r7[-4],r8
800221f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800221f4:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
800221f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800221fc:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022200:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022204:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022208:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
8002220c:	30 aa       	mov	r10,10
8002220e:	ee fb ff f4 	ld.w	r11,r7[-12]
80022212:	ee fc ff e8 	ld.w	r12,r7[-24]
80022216:	f0 16 01 43 	mcall	r6[1292]
	putstring(out_stream, "."); 
8002221a:	fe cb 00 92 	sub	r11,pc,146
8002221e:	ee fc ff e8 	ld.w	r12,r7[-24]
80022222:	f0 16 00 33 	mcall	r6[204]
	
	for (i=0; i<after_digits; i++) 
80022226:	30 08       	mov	r8,0
80022228:	ef 48 ff ec 	st.w	r7[-20],r8
8002222c:	c2 38       	rjmp	80022272 <putfloat+0xe8>
	{
		after*=10;
8002222e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022232:	fc 18 41 20 	movh	r8,0x4120
80022236:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002223a:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
8002223e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022242:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022246:	10 9b       	mov	r11,r8
80022248:	ee fc ff e8 	ld.w	r12,r7[-24]
8002224c:	f0 16 00 b0 	mcall	r6[704]
		after=after-(int)after;
80022250:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022254:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022258:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8002225c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022260:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022264:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022268:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002226c:	2f f8       	sub	r8,-1
8002226e:	ef 48 ff ec 	st.w	r7[-20],r8
80022272:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022276:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002227a:	10 39       	cp.w	r9,r8
8002227c:	cd 95       	brlt	8002222e <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
8002227e:	2f 8d       	sub	sp,-32
80022280:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022284:	80 02       	ld.sh	r2,r0[0x0]
80022286:	20 18       	sub	r8,1
80022288:	28 00       	sub	r0,-128
8002228a:	00 00       	add	r0,r0
8002228c:	2c 20       	sub	r0,-62
8002228e:	00 00       	add	r0,r0
80022290:	29 20       	sub	r0,-110
	...

80022294 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80022294:	eb cd 40 c0 	pushm	r6-r7,lr
80022298:	1a 97       	mov	r7,sp
8002229a:	20 4d       	sub	sp,16
8002229c:	4a 06       	lddpc	r6,8002231c <print_vector+0x88>
8002229e:	1e 26       	rsub	r6,pc
800222a0:	ef 4c ff f8 	st.w	r7[-8],r12
800222a4:	ef 4b ff f4 	st.w	r7[-12],r11
800222a8:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
800222ac:	fe cb 00 24 	sub	r11,pc,36
800222b0:	ee fc ff f8 	ld.w	r12,r7[-8]
800222b4:	f0 16 00 33 	mcall	r6[204]
	for (i=0; i<3; i++) {
800222b8:	30 08       	mov	r8,0
800222ba:	ef 48 ff fc 	st.w	r7[-4],r8
800222be:	c2 08       	rjmp	800222fe <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
800222c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800222c4:	a3 68       	lsl	r8,0x2
800222c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800222ca:	f2 08 00 08 	add	r8,r9,r8
800222ce:	70 08       	ld.w	r8,r8[0x0]
800222d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800222d4:	10 9b       	mov	r11,r8
800222d6:	ee fc ff f8 	ld.w	r12,r7[-8]
800222da:	f0 16 00 d3 	mcall	r6[844]
		if (i<2) putstring(out_stream, ", ");
800222de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800222e2:	58 18       	cp.w	r8,1
800222e4:	e0 89 00 08 	brgt	800222f4 <print_vector+0x60>
800222e8:	fe cb 00 5c 	sub	r11,pc,92
800222ec:	ee fc ff f8 	ld.w	r12,r7[-8]
800222f0:	f0 16 00 33 	mcall	r6[204]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
800222f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800222f8:	2f f8       	sub	r8,-1
800222fa:	ef 48 ff fc 	st.w	r7[-4],r8
800222fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022302:	58 28       	cp.w	r8,2
80022304:	fe 9a ff de 	brle	800222c0 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80022308:	fe cb 00 78 	sub	r11,pc,120
8002230c:	ee fc ff f8 	ld.w	r12,r7[-8]
80022310:	f0 16 00 33 	mcall	r6[204]

}
80022314:	2f cd       	sub	sp,-16
80022316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002231a:	00 00       	add	r0,r0
8002231c:	80 02       	ld.sh	r2,r0[0x0]
8002231e:	21 22       	sub	r2,18

80022320 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80022320:	eb cd 40 c0 	pushm	r6-r7,lr
80022324:	1a 97       	mov	r7,sp
80022326:	20 3d       	sub	sp,12
80022328:	49 96       	lddpc	r6,8002238c <print_quaternion+0x6c>
8002232a:	1e 26       	rsub	r6,pc
8002232c:	ef 4c ff fc 	st.w	r7[-4],r12
80022330:	ef 4b ff f8 	st.w	r7[-8],r11
80022334:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022338:	fe cb 00 b0 	sub	r11,pc,176
8002233c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022340:	f0 16 00 33 	mcall	r6[204]
	putfloat(out_stream, quat->s, after_digits);
80022344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022348:	70 08       	ld.w	r8,r8[0x0]
8002234a:	ee fa ff f4 	ld.w	r10,r7[-12]
8002234e:	10 9b       	mov	r11,r8
80022350:	ee fc ff fc 	ld.w	r12,r7[-4]
80022354:	f0 16 00 d3 	mcall	r6[844]
	putstring(out_stream, ", ");
80022358:	fe cb 00 cc 	sub	r11,pc,204
8002235c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022360:	f0 16 00 33 	mcall	r6[204]
	print_vector(out_stream, quat->v, after_digits);
80022364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022368:	2f c8       	sub	r8,-4
8002236a:	ee fa ff f4 	ld.w	r10,r7[-12]
8002236e:	10 9b       	mov	r11,r8
80022370:	ee fc ff fc 	ld.w	r12,r7[-4]
80022374:	f0 16 00 ef 	mcall	r6[956]
	putstring(out_stream, ") ");
80022378:	fe cb 00 e8 	sub	r11,pc,232
8002237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022380:	f0 16 00 33 	mcall	r6[204]
}
80022384:	2f dd       	sub	sp,-12
80022386:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002238a:	00 00       	add	r0,r0
8002238c:	80 02       	ld.sh	r2,r0[0x0]
8002238e:	21 ae       	sub	lr,26

80022390 <dbg_print>:

void dbg_print(const char* s) {
80022390:	eb cd 40 c0 	pushm	r6-r7,lr
80022394:	1a 97       	mov	r7,sp
80022396:	20 1d       	sub	sp,4
80022398:	48 86       	lddpc	r6,800223b8 <dbg_print+0x28>
8002239a:	1e 26       	rsub	r6,pc
8002239c:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
800223a0:	ec f8 01 a8 	ld.w	r8,r6[424]
800223a4:	70 08       	ld.w	r8,r8[0x0]
800223a6:	ee fb ff fc 	ld.w	r11,r7[-4]
800223aa:	10 9c       	mov	r12,r8
800223ac:	f0 16 00 33 	mcall	r6[204]

}
800223b0:	2f fd       	sub	sp,-4
800223b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800223b6:	00 00       	add	r0,r0
800223b8:	80 02       	ld.sh	r2,r0[0x0]
800223ba:	22 1e       	sub	lr,33

800223bc <dbg_print_num>:

void dbg_print_num(long c, char base) {
800223bc:	eb cd 40 c0 	pushm	r6-r7,lr
800223c0:	1a 97       	mov	r7,sp
800223c2:	20 2d       	sub	sp,8
800223c4:	48 b6       	lddpc	r6,800223f0 <dbg_print_num+0x34>
800223c6:	1e 26       	rsub	r6,pc
800223c8:	ef 4c ff fc 	st.w	r7[-4],r12
800223cc:	16 98       	mov	r8,r11
800223ce:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
800223d2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800223d6:	ec f8 01 a8 	ld.w	r8,r6[424]
800223da:	70 08       	ld.w	r8,r8[0x0]
800223dc:	12 9a       	mov	r10,r9
800223de:	ee fb ff fc 	ld.w	r11,r7[-4]
800223e2:	10 9c       	mov	r12,r8
800223e4:	f0 16 00 28 	mcall	r6[160]

}
800223e8:	2f ed       	sub	sp,-8
800223ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800223ee:	00 00       	add	r0,r0
800223f0:	80 02       	ld.sh	r2,r0[0x0]
800223f2:	22 4a       	sub	r10,36

800223f4 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
800223f4:	eb cd 40 c0 	pushm	r6-r7,lr
800223f8:	1a 97       	mov	r7,sp
800223fa:	20 2d       	sub	sp,8
800223fc:	48 a6       	lddpc	r6,80022424 <dbg_putfloat+0x30>
800223fe:	1e 26       	rsub	r6,pc
80022400:	ef 4c ff fc 	st.w	r7[-4],r12
80022404:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022408:	ec f8 01 a8 	ld.w	r8,r6[424]
8002240c:	70 08       	ld.w	r8,r8[0x0]
8002240e:	ee fa ff f8 	ld.w	r10,r7[-8]
80022412:	ee fb ff fc 	ld.w	r11,r7[-4]
80022416:	10 9c       	mov	r12,r8
80022418:	f0 16 00 d3 	mcall	r6[844]
}
8002241c:	2f ed       	sub	sp,-8
8002241e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022422:	00 00       	add	r0,r0
80022424:	80 02       	ld.sh	r2,r0[0x0]
80022426:	22 82       	sub	r2,40

80022428 <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022428:	eb cd 40 c0 	pushm	r6-r7,lr
8002242c:	1a 97       	mov	r7,sp
8002242e:	20 2d       	sub	sp,8
80022430:	48 a6       	lddpc	r6,80022458 <dbg_print_vector+0x30>
80022432:	1e 26       	rsub	r6,pc
80022434:	ef 4c ff fc 	st.w	r7[-4],r12
80022438:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
8002243c:	ec f8 01 a8 	ld.w	r8,r6[424]
80022440:	70 08       	ld.w	r8,r8[0x0]
80022442:	ee fa ff f8 	ld.w	r10,r7[-8]
80022446:	ee fb ff fc 	ld.w	r11,r7[-4]
8002244a:	10 9c       	mov	r12,r8
8002244c:	f0 16 00 ef 	mcall	r6[956]
}
80022450:	2f ed       	sub	sp,-8
80022452:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022456:	00 00       	add	r0,r0
80022458:	80 02       	ld.sh	r2,r0[0x0]
8002245a:	22 b6       	sub	r6,43

8002245c <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
8002245c:	eb cd 40 c0 	pushm	r6-r7,lr
80022460:	1a 97       	mov	r7,sp
80022462:	20 2d       	sub	sp,8
80022464:	48 a6       	lddpc	r6,8002248c <dbg_print_quaternion+0x30>
80022466:	1e 26       	rsub	r6,pc
80022468:	ef 4c ff fc 	st.w	r7[-4],r12
8002246c:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80022470:	ec f8 01 a8 	ld.w	r8,r6[424]
80022474:	70 08       	ld.w	r8,r8[0x0]
80022476:	ee fa ff f8 	ld.w	r10,r7[-8]
8002247a:	ee fb ff fc 	ld.w	r11,r7[-4]
8002247e:	10 9c       	mov	r12,r8
80022480:	f0 16 01 98 	mcall	r6[1632]
}
80022484:	2f ed       	sub	sp,-8
80022486:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002248a:	00 00       	add	r0,r0
8002248c:	80 02       	ld.sh	r2,r0[0x0]
8002248e:	22 ea       	sub	r10,46
80022490:	0a 00       	add	r0,r5

80022492 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80022492:	eb cd 40 c0 	pushm	r6-r7,lr
80022496:	1a 97       	mov	r7,sp
80022498:	20 3d       	sub	sp,12
8002249a:	49 26       	lddpc	r6,800224e0 <dbg_log_value+0x4e>
8002249c:	1e 26       	rsub	r6,pc
8002249e:	ef 4c ff fc 	st.w	r7[-4],r12
800224a2:	ef 4b ff f8 	st.w	r7[-8],r11
800224a6:	14 98       	mov	r8,r10
800224a8:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
800224ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800224b0:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
800224b4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800224b8:	30 18       	mov	r8,1
800224ba:	f0 09 18 00 	cp.b	r9,r8
800224be:	e0 88 00 09 	brls	800224d0 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
800224c2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800224c6:	10 9b       	mov	r11,r8
800224c8:	ee fc ff f8 	ld.w	r12,r7[-8]
800224cc:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
800224d0:	fe cc 00 40 	sub	r12,pc,64
800224d4:	f0 16 00 01 	mcall	r6[4]

}
800224d8:	2f dd       	sub	sp,-12
800224da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800224de:	00 00       	add	r0,r0
800224e0:	80 02       	ld.sh	r2,r0[0x0]
800224e2:	23 20       	sub	r0,50

800224e4 <adcifa_get_calibration_data>:
800224e4:	eb cd 40 80 	pushm	r7,lr
800224e8:	1a 97       	mov	r7,sp
800224ea:	20 6d       	sub	sp,24
800224ec:	ef 4c ff ec 	st.w	r7[-20],r12
800224f0:	ef 4b ff e8 	st.w	r7[-24],r11
800224f4:	e0 68 02 04 	mov	r8,516
800224f8:	ea 18 80 80 	orh	r8,0x8080
800224fc:	70 08       	ld.w	r8,r8[0x0]
800224fe:	e6 18 3f 00 	andh	r8,0x3f00,COH
80022502:	b9 48       	asr	r8,0x18
80022504:	ef 48 ff f0 	st.w	r7[-16],r8
80022508:	e0 68 02 04 	mov	r8,516
8002250c:	ea 18 80 80 	orh	r8,0x8080
80022510:	70 08       	ld.w	r8,r8[0x0]
80022512:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80022516:	ef 48 ff f4 	st.w	r7[-12],r8
8002251a:	e0 68 02 08 	mov	r8,520
8002251e:	ea 18 80 80 	orh	r8,0x8080
80022522:	70 08       	ld.w	r8,r8[0x0]
80022524:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80022528:	ef 48 ff f8 	st.w	r7[-8],r8
8002252c:	e0 68 02 08 	mov	r8,520
80022530:	ea 18 80 80 	orh	r8,0x8080
80022534:	70 08       	ld.w	r8,r8[0x0]
80022536:	e6 18 03 ff 	andh	r8,0x3ff,COH
8002253a:	b1 48       	asr	r8,0x10
8002253c:	ef 48 ff fc 	st.w	r7[-4],r8
80022540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022544:	5c 88       	casts.h	r8
80022546:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002254a:	b2 68       	st.h	r9[0xc],r8
8002254c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022550:	5c 88       	casts.h	r8
80022552:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022556:	b2 58       	st.h	r9[0xa],r8
80022558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002255c:	5c 88       	casts.h	r8
8002255e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022562:	b2 78       	st.h	r9[0xe],r8
80022564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022568:	5c 88       	casts.h	r8
8002256a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002256e:	f3 58 00 10 	st.h	r9[16],r8
80022572:	2f ad       	sub	sp,-24
80022574:	e3 cd 80 80 	ldm	sp++,r7,pc

80022578 <adcifa_configure>:
80022578:	eb cd 40 80 	pushm	r7,lr
8002257c:	1a 97       	mov	r7,sp
8002257e:	20 3d       	sub	sp,12
80022580:	ef 4c ff fc 	st.w	r7[-4],r12
80022584:	ef 4b ff f8 	st.w	r7[-8],r11
80022588:	ef 4a ff f4 	st.w	r7[-12],r10
8002258c:	fc 7a 24 00 	mov	r10,-187392
80022590:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022594:	f1 38 00 08 	ld.ub	r8,r8[8]
80022598:	f0 09 15 02 	lsl	r9,r8,0x2
8002259c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225a0:	11 e8       	ld.ub	r8,r8[0x6]
800225a2:	a3 78       	lsl	r8,0x3
800225a4:	10 49       	or	r9,r8
800225a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225aa:	11 f8       	ld.ub	r8,r8[0x7]
800225ac:	a5 68       	lsl	r8,0x4
800225ae:	10 49       	or	r9,r8
800225b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225b4:	11 c8       	ld.ub	r8,r8[0x4]
800225b6:	a5 78       	lsl	r8,0x5
800225b8:	10 49       	or	r9,r8
800225ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225be:	11 d8       	ld.ub	r8,r8[0x5]
800225c0:	a7 78       	lsl	r8,0x7
800225c2:	f3 e8 10 08 	or	r8,r9,r8
800225c6:	10 9b       	mov	r11,r8
800225c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225cc:	70 09       	ld.w	r9,r8[0x0]
800225ce:	e0 68 4d d3 	mov	r8,19923
800225d2:	ea 18 10 62 	orh	r8,0x1062
800225d6:	f2 08 06 48 	mulu.d	r8,r9,r8
800225da:	a7 89       	lsr	r9,0x6
800225dc:	e0 68 03 e8 	mov	r8,1000
800225e0:	b1 39       	mul	r9,r8
800225e2:	e0 68 4d d3 	mov	r8,19923
800225e6:	ea 18 10 62 	orh	r8,0x1062
800225ea:	f2 08 06 48 	mulu.d	r8,r9,r8
800225ee:	f2 08 16 0b 	lsr	r8,r9,0xb
800225f2:	b1 68       	lsl	r8,0x10
800225f4:	f7 e8 10 08 	or	r8,r11,r8
800225f8:	95 18       	st.w	r10[0x4],r8
800225fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225fe:	70 08       	ld.w	r8,r8[0x0]
80022600:	f0 09 15 01 	lsl	r9,r8,0x1
80022604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022608:	f0 09 0d 08 	divu	r8,r8,r9
8002260c:	20 18       	sub	r8,1
8002260e:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80022612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022616:	f1 49 00 44 	st.w	r8[68],r9
8002261a:	fc 78 24 00 	mov	r8,-187392
8002261e:	fc 79 24 00 	mov	r9,-187392
80022622:	73 aa       	ld.w	r10,r9[0x68]
80022624:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022628:	92 69       	ld.sh	r9,r9[0xc]
8002262a:	b9 69       	lsl	r9,0x18
8002262c:	e6 19 3f 00 	andh	r9,0x3f00,COH
80022630:	f5 e9 10 09 	or	r9,r10,r9
80022634:	f1 49 00 68 	st.w	r8[104],r9
80022638:	fc 78 24 00 	mov	r8,-187392
8002263c:	fc 79 24 00 	mov	r9,-187392
80022640:	73 aa       	ld.w	r10,r9[0x68]
80022642:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022646:	92 59       	ld.sh	r9,r9[0xa]
80022648:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
8002264c:	f5 e9 10 09 	or	r9,r10,r9
80022650:	f1 49 00 68 	st.w	r8[104],r9
80022654:	fc 78 24 00 	mov	r8,-187392
80022658:	fc 79 24 00 	mov	r9,-187392
8002265c:	73 ba       	ld.w	r10,r9[0x6c]
8002265e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022662:	92 79       	ld.sh	r9,r9[0xe]
80022664:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80022668:	f5 e9 10 09 	or	r9,r10,r9
8002266c:	f1 49 00 6c 	st.w	r8[108],r9
80022670:	fc 78 24 00 	mov	r8,-187392
80022674:	fc 79 24 00 	mov	r9,-187392
80022678:	73 ba       	ld.w	r10,r9[0x6c]
8002267a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002267e:	f3 09 00 10 	ld.sh	r9,r9[16]
80022682:	b1 69       	lsl	r9,0x10
80022684:	e6 19 03 ff 	andh	r9,0x3ff,COH
80022688:	f5 e9 10 09 	or	r9,r10,r9
8002268c:	f1 49 00 6c 	st.w	r8[108],r9
80022690:	fc 78 24 00 	mov	r8,-187392
80022694:	fc 79 24 00 	mov	r9,-187392
80022698:	72 19       	ld.w	r9,r9[0x4]
8002269a:	a1 a9       	sbr	r9,0x0
8002269c:	91 19       	st.w	r8[0x4],r9
8002269e:	c0 28       	rjmp	800226a2 <adcifa_configure+0x12a>
800226a0:	d7 03       	nop
800226a2:	fc 78 24 00 	mov	r8,-187392
800226a6:	70 28       	ld.w	r8,r8[0x8]
800226a8:	e2 18 40 00 	andl	r8,0x4000,COH
800226ac:	cf a0       	breq	800226a0 <adcifa_configure+0x128>
800226ae:	30 18       	mov	r8,1
800226b0:	10 9c       	mov	r12,r8
800226b2:	2f dd       	sub	sp,-12
800226b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800226b8 <adcifa_configure_sequencer>:
800226b8:	eb cd 40 80 	pushm	r7,lr
800226bc:	1a 97       	mov	r7,sp
800226be:	20 bd       	sub	sp,44
800226c0:	ef 4c ff e0 	st.w	r7[-32],r12
800226c4:	16 98       	mov	r8,r11
800226c6:	ef 4a ff d8 	st.w	r7[-40],r10
800226ca:	ef 49 ff d4 	st.w	r7[-44],r9
800226ce:	ef 68 ff dc 	st.b	r7[-36],r8
800226d2:	30 08       	mov	r8,0
800226d4:	30 09       	mov	r9,0
800226d6:	ee e9 ff f4 	st.d	r7[-12],r8
800226da:	30 08       	mov	r8,0
800226dc:	30 09       	mov	r9,0
800226de:	ee e9 ff ec 	st.d	r7[-20],r8
800226e2:	30 08       	mov	r8,0
800226e4:	30 09       	mov	r9,0
800226e6:	ee e9 ff e4 	st.d	r7[-28],r8
800226ea:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800226ee:	58 08       	cp.w	r8,0
800226f0:	c0 60       	breq	800226fc <adcifa_configure_sequencer+0x44>
800226f2:	58 18       	cp.w	r8,1
800226f4:	e0 80 00 ed 	breq	800228ce <adcifa_configure_sequencer+0x216>
800226f8:	e0 8f 01 d7 	bral	80022aa6 <adcifa_configure_sequencer+0x3ee>
800226fc:	fc 78 24 00 	mov	r8,-187392
80022700:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022704:	13 89       	ld.ub	r9,r9[0x0]
80022706:	20 19       	sub	r9,1
80022708:	f2 0a 15 10 	lsl	r10,r9,0x10
8002270c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022710:	13 99       	ld.ub	r9,r9[0x1]
80022712:	ad 69       	lsl	r9,0xc
80022714:	12 4a       	or	r10,r9
80022716:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002271a:	13 a9       	ld.ub	r9,r9[0x2]
8002271c:	a9 69       	lsl	r9,0x8
8002271e:	12 4a       	or	r10,r9
80022720:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022724:	13 b9       	ld.ub	r9,r9[0x3]
80022726:	a3 69       	lsl	r9,0x2
80022728:	12 4a       	or	r10,r9
8002272a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002272e:	13 c9       	ld.ub	r9,r9[0x4]
80022730:	a3 79       	lsl	r9,0x3
80022732:	12 4a       	or	r10,r9
80022734:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022738:	13 d9       	ld.ub	r9,r9[0x5]
8002273a:	a1 79       	lsl	r9,0x1
8002273c:	12 4a       	or	r10,r9
8002273e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022742:	13 e9       	ld.ub	r9,r9[0x6]
80022744:	f5 e9 10 09 	or	r9,r10,r9
80022748:	91 59       	st.w	r8[0x14],r9
8002274a:	30 08       	mov	r8,0
8002274c:	ef 68 ff ff 	st.b	r7[-1],r8
80022750:	c1 68       	rjmp	8002277c <adcifa_configure_sequencer+0xc4>
80022752:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022756:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002275a:	12 98       	mov	r8,r9
8002275c:	a1 78       	lsl	r8,0x1
8002275e:	12 08       	add	r8,r9
80022760:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022764:	f2 08 00 08 	add	r8,r9,r8
80022768:	11 a8       	ld.ub	r8,r8[0x2]
8002276a:	ee 0a 00 09 	add	r9,r7,r10
8002276e:	f3 68 ff f4 	st.b	r9[-12],r8
80022772:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022776:	2f f8       	sub	r8,-1
80022778:	ef 68 ff ff 	st.b	r7[-1],r8
8002277c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022780:	11 88       	ld.ub	r8,r8[0x0]
80022782:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022786:	f0 09 18 00 	cp.b	r9,r8
8002278a:	ce 43       	brcs	80022752 <adcifa_configure_sequencer+0x9a>
8002278c:	fc 78 24 00 	mov	r8,-187392
80022790:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80022794:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80022798:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8002279c:	b9 69       	lsl	r9,0x18
8002279e:	12 4a       	or	r10,r9
800227a0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800227a4:	b5 69       	lsl	r9,0x14
800227a6:	12 4a       	or	r10,r9
800227a8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800227ac:	b1 69       	lsl	r9,0x10
800227ae:	12 4a       	or	r10,r9
800227b0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800227b4:	ad 69       	lsl	r9,0xc
800227b6:	12 4a       	or	r10,r9
800227b8:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800227bc:	a9 69       	lsl	r9,0x8
800227be:	12 4a       	or	r10,r9
800227c0:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800227c4:	a5 69       	lsl	r9,0x4
800227c6:	12 4a       	or	r10,r9
800227c8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800227cc:	f5 e9 10 09 	or	r9,r10,r9
800227d0:	91 79       	st.w	r8[0x1c],r9
800227d2:	30 08       	mov	r8,0
800227d4:	ef 68 ff ff 	st.b	r7[-1],r8
800227d8:	c2 68       	rjmp	80022824 <adcifa_configure_sequencer+0x16c>
800227da:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800227de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800227e2:	12 98       	mov	r8,r9
800227e4:	a1 78       	lsl	r8,0x1
800227e6:	12 08       	add	r8,r9
800227e8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800227ec:	f2 08 00 08 	add	r8,r9,r8
800227f0:	11 88       	ld.ub	r8,r8[0x0]
800227f2:	ee 0a 00 09 	add	r9,r7,r10
800227f6:	f3 68 ff ec 	st.b	r9[-20],r8
800227fa:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800227fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022802:	12 98       	mov	r8,r9
80022804:	a1 78       	lsl	r8,0x1
80022806:	12 08       	add	r8,r9
80022808:	ee f9 ff d4 	ld.w	r9,r7[-44]
8002280c:	f2 08 00 08 	add	r8,r9,r8
80022810:	11 98       	ld.ub	r8,r8[0x1]
80022812:	ee 0a 00 09 	add	r9,r7,r10
80022816:	f3 68 ff e4 	st.b	r9[-28],r8
8002281a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002281e:	2f f8       	sub	r8,-1
80022820:	ef 68 ff ff 	st.b	r7[-1],r8
80022824:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022828:	11 88       	ld.ub	r8,r8[0x0]
8002282a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002282e:	f0 09 18 00 	cp.b	r9,r8
80022832:	cd 43       	brcs	800227da <adcifa_configure_sequencer+0x122>
80022834:	fc 78 24 00 	mov	r8,-187392
80022838:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8002283c:	f2 0a 15 18 	lsl	r10,r9,0x18
80022840:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80022844:	b1 69       	lsl	r9,0x10
80022846:	12 4a       	or	r10,r9
80022848:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8002284c:	a9 69       	lsl	r9,0x8
8002284e:	12 4a       	or	r10,r9
80022850:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80022854:	f5 e9 10 09 	or	r9,r10,r9
80022858:	91 b9       	st.w	r8[0x2c],r9
8002285a:	fc 78 24 00 	mov	r8,-187392
8002285e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80022862:	f2 0a 15 18 	lsl	r10,r9,0x18
80022866:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002286a:	b1 69       	lsl	r9,0x10
8002286c:	12 4a       	or	r10,r9
8002286e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80022872:	a9 69       	lsl	r9,0x8
80022874:	12 4a       	or	r10,r9
80022876:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002287a:	f5 e9 10 09 	or	r9,r10,r9
8002287e:	91 99       	st.w	r8[0x24],r9
80022880:	fc 78 24 00 	mov	r8,-187392
80022884:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80022888:	f2 0a 15 18 	lsl	r10,r9,0x18
8002288c:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80022890:	b1 69       	lsl	r9,0x10
80022892:	12 4a       	or	r10,r9
80022894:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80022898:	a9 69       	lsl	r9,0x8
8002289a:	12 4a       	or	r10,r9
8002289c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800228a0:	f5 e9 10 09 	or	r9,r10,r9
800228a4:	91 f9       	st.w	r8[0x3c],r9
800228a6:	fc 78 24 00 	mov	r8,-187392
800228aa:	ef 39 ff e7 	ld.ub	r9,r7[-25]
800228ae:	f2 0a 15 18 	lsl	r10,r9,0x18
800228b2:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800228b6:	b1 69       	lsl	r9,0x10
800228b8:	12 4a       	or	r10,r9
800228ba:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800228be:	a9 69       	lsl	r9,0x8
800228c0:	12 4a       	or	r10,r9
800228c2:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800228c6:	f5 e9 10 09 	or	r9,r10,r9
800228ca:	91 d9       	st.w	r8[0x34],r9
800228cc:	ce d8       	rjmp	80022aa6 <adcifa_configure_sequencer+0x3ee>
800228ce:	fc 78 24 00 	mov	r8,-187392
800228d2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800228d6:	13 89       	ld.ub	r9,r9[0x0]
800228d8:	20 19       	sub	r9,1
800228da:	f2 0a 15 10 	lsl	r10,r9,0x10
800228de:	ee f9 ff d8 	ld.w	r9,r7[-40]
800228e2:	13 99       	ld.ub	r9,r9[0x1]
800228e4:	ad 69       	lsl	r9,0xc
800228e6:	12 4a       	or	r10,r9
800228e8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800228ec:	13 a9       	ld.ub	r9,r9[0x2]
800228ee:	a9 69       	lsl	r9,0x8
800228f0:	12 4a       	or	r10,r9
800228f2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800228f6:	13 b9       	ld.ub	r9,r9[0x3]
800228f8:	a3 69       	lsl	r9,0x2
800228fa:	12 4a       	or	r10,r9
800228fc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022900:	13 c9       	ld.ub	r9,r9[0x4]
80022902:	a3 79       	lsl	r9,0x3
80022904:	12 4a       	or	r10,r9
80022906:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002290a:	13 d9       	ld.ub	r9,r9[0x5]
8002290c:	a1 79       	lsl	r9,0x1
8002290e:	f5 e9 10 09 	or	r9,r10,r9
80022912:	12 9a       	mov	r10,r9
80022914:	a5 aa       	sbr	r10,0x4
80022916:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002291a:	13 e9       	ld.ub	r9,r9[0x6]
8002291c:	f5 e9 10 09 	or	r9,r10,r9
80022920:	91 69       	st.w	r8[0x18],r9
80022922:	30 08       	mov	r8,0
80022924:	ef 68 ff ff 	st.b	r7[-1],r8
80022928:	c1 68       	rjmp	80022954 <adcifa_configure_sequencer+0x29c>
8002292a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002292e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022932:	12 98       	mov	r8,r9
80022934:	a1 78       	lsl	r8,0x1
80022936:	12 08       	add	r8,r9
80022938:	ee f9 ff d4 	ld.w	r9,r7[-44]
8002293c:	f2 08 00 08 	add	r8,r9,r8
80022940:	11 a8       	ld.ub	r8,r8[0x2]
80022942:	ee 0a 00 09 	add	r9,r7,r10
80022946:	f3 68 ff f4 	st.b	r9[-12],r8
8002294a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002294e:	2f f8       	sub	r8,-1
80022950:	ef 68 ff ff 	st.b	r7[-1],r8
80022954:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022958:	11 88       	ld.ub	r8,r8[0x0]
8002295a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002295e:	f0 09 18 00 	cp.b	r9,r8
80022962:	ce 43       	brcs	8002292a <adcifa_configure_sequencer+0x272>
80022964:	fc 78 24 00 	mov	r8,-187392
80022968:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002296c:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80022970:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80022974:	b9 69       	lsl	r9,0x18
80022976:	12 4a       	or	r10,r9
80022978:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8002297c:	b5 69       	lsl	r9,0x14
8002297e:	12 4a       	or	r10,r9
80022980:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022984:	b1 69       	lsl	r9,0x10
80022986:	12 4a       	or	r10,r9
80022988:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8002298c:	ad 69       	lsl	r9,0xc
8002298e:	12 4a       	or	r10,r9
80022990:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80022994:	a9 69       	lsl	r9,0x8
80022996:	12 4a       	or	r10,r9
80022998:	ef 39 ff f5 	ld.ub	r9,r7[-11]
8002299c:	a5 69       	lsl	r9,0x4
8002299e:	12 4a       	or	r10,r9
800229a0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800229a4:	f5 e9 10 09 	or	r9,r10,r9
800229a8:	91 89       	st.w	r8[0x20],r9
800229aa:	30 08       	mov	r8,0
800229ac:	ef 68 ff ff 	st.b	r7[-1],r8
800229b0:	c2 68       	rjmp	800229fc <adcifa_configure_sequencer+0x344>
800229b2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800229b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800229ba:	12 98       	mov	r8,r9
800229bc:	a1 78       	lsl	r8,0x1
800229be:	12 08       	add	r8,r9
800229c0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800229c4:	f2 08 00 08 	add	r8,r9,r8
800229c8:	11 88       	ld.ub	r8,r8[0x0]
800229ca:	ee 0a 00 09 	add	r9,r7,r10
800229ce:	f3 68 ff ec 	st.b	r9[-20],r8
800229d2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800229d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800229da:	12 98       	mov	r8,r9
800229dc:	a1 78       	lsl	r8,0x1
800229de:	12 08       	add	r8,r9
800229e0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800229e4:	f2 08 00 08 	add	r8,r9,r8
800229e8:	11 98       	ld.ub	r8,r8[0x1]
800229ea:	ee 0a 00 09 	add	r9,r7,r10
800229ee:	f3 68 ff e4 	st.b	r9[-28],r8
800229f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800229f6:	2f f8       	sub	r8,-1
800229f8:	ef 68 ff ff 	st.b	r7[-1],r8
800229fc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022a00:	11 88       	ld.ub	r8,r8[0x0]
80022a02:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022a06:	f0 09 18 00 	cp.b	r9,r8
80022a0a:	cd 43       	brcs	800229b2 <adcifa_configure_sequencer+0x2fa>
80022a0c:	fc 78 24 00 	mov	r8,-187392
80022a10:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80022a14:	f2 0a 15 18 	lsl	r10,r9,0x18
80022a18:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80022a1c:	b1 69       	lsl	r9,0x10
80022a1e:	12 4a       	or	r10,r9
80022a20:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80022a24:	a9 69       	lsl	r9,0x8
80022a26:	12 4a       	or	r10,r9
80022a28:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80022a2c:	f5 e9 10 09 	or	r9,r10,r9
80022a30:	91 c9       	st.w	r8[0x30],r9
80022a32:	fc 78 24 00 	mov	r8,-187392
80022a36:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80022a3a:	f2 0a 15 18 	lsl	r10,r9,0x18
80022a3e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80022a42:	b1 69       	lsl	r9,0x10
80022a44:	12 4a       	or	r10,r9
80022a46:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80022a4a:	a9 69       	lsl	r9,0x8
80022a4c:	12 4a       	or	r10,r9
80022a4e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80022a52:	f5 e9 10 09 	or	r9,r10,r9
80022a56:	91 a9       	st.w	r8[0x28],r9
80022a58:	fc 78 24 00 	mov	r8,-187392
80022a5c:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80022a60:	f2 0a 15 18 	lsl	r10,r9,0x18
80022a64:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80022a68:	b1 69       	lsl	r9,0x10
80022a6a:	12 4a       	or	r10,r9
80022a6c:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80022a70:	a9 69       	lsl	r9,0x8
80022a72:	12 4a       	or	r10,r9
80022a74:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80022a78:	f5 e9 10 09 	or	r9,r10,r9
80022a7c:	f1 49 00 40 	st.w	r8[64],r9
80022a80:	fc 78 24 00 	mov	r8,-187392
80022a84:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80022a88:	f2 0a 15 18 	lsl	r10,r9,0x18
80022a8c:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80022a90:	b1 69       	lsl	r9,0x10
80022a92:	12 4a       	or	r10,r9
80022a94:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80022a98:	a9 69       	lsl	r9,0x8
80022a9a:	12 4a       	or	r10,r9
80022a9c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022aa0:	f5 e9 10 09 	or	r9,r10,r9
80022aa4:	91 e9       	st.w	r8[0x38],r9
80022aa6:	30 18       	mov	r8,1
80022aa8:	10 9c       	mov	r12,r8
80022aaa:	2f 5d       	sub	sp,-44
80022aac:	e3 cd 80 80 	ldm	sp++,r7,pc

80022ab0 <adcifa_configure_window_monitor>:
80022ab0:	eb cd 40 80 	pushm	r7,lr
80022ab4:	1a 97       	mov	r7,sp
80022ab6:	20 4d       	sub	sp,16
80022ab8:	ef 4c ff f8 	st.w	r7[-8],r12
80022abc:	16 98       	mov	r8,r11
80022abe:	ef 4a ff f0 	st.w	r7[-16],r10
80022ac2:	ef 68 ff f4 	st.b	r7[-12],r8
80022ac6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022aca:	58 08       	cp.w	r8,0
80022acc:	c0 40       	breq	80022ad4 <adcifa_configure_window_monitor+0x24>
80022ace:	58 18       	cp.w	r8,1
80022ad0:	c3 d0       	breq	80022b4a <adcifa_configure_window_monitor+0x9a>
80022ad2:	c7 68       	rjmp	80022bbe <adcifa_configure_window_monitor+0x10e>
80022ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022ad8:	71 e8       	ld.w	r8,r8[0x78]
80022ada:	e2 18 04 00 	andl	r8,0x400,COH
80022ade:	ef 48 ff fc 	st.w	r7[-4],r8
80022ae2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022ae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022aea:	f1 49 00 74 	st.w	r8[116],r9
80022aee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022af2:	11 98       	ld.ub	r8,r8[0x1]
80022af4:	f0 09 15 1b 	lsl	r9,r8,0x1b
80022af8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022afc:	90 28       	ld.sh	r8,r8[0x4]
80022afe:	5c 78       	castu.h	r8
80022b00:	ad 68       	lsl	r8,0xc
80022b02:	10 49       	or	r9,r8
80022b04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b08:	90 18       	ld.sh	r8,r8[0x2]
80022b0a:	5c 78       	castu.h	r8
80022b0c:	f3 e8 10 08 	or	r8,r9,r8
80022b10:	10 99       	mov	r9,r8
80022b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b16:	f1 49 00 58 	st.w	r8[88],r9
80022b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b1e:	e0 69 04 00 	mov	r9,1024
80022b22:	91 39       	st.w	r8[0xc],r9
80022b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b28:	71 69       	ld.w	r9,r8[0x58]
80022b2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b2e:	11 88       	ld.ub	r8,r8[0x0]
80022b30:	b9 68       	lsl	r8,0x18
80022b32:	10 49       	or	r9,r8
80022b34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b38:	f1 49 00 58 	st.w	r8[88],r9
80022b3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022b40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b44:	f1 49 00 70 	st.w	r8[112],r9
80022b48:	c3 b8       	rjmp	80022bbe <adcifa_configure_window_monitor+0x10e>
80022b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b4e:	71 e8       	ld.w	r8,r8[0x78]
80022b50:	e2 18 08 00 	andl	r8,0x800,COH
80022b54:	ef 48 ff fc 	st.w	r7[-4],r8
80022b58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b60:	f1 49 00 74 	st.w	r8[116],r9
80022b64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b68:	11 98       	ld.ub	r8,r8[0x1]
80022b6a:	f0 09 15 1b 	lsl	r9,r8,0x1b
80022b6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b72:	90 28       	ld.sh	r8,r8[0x4]
80022b74:	5c 78       	castu.h	r8
80022b76:	ad 68       	lsl	r8,0xc
80022b78:	10 49       	or	r9,r8
80022b7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022b7e:	90 18       	ld.sh	r8,r8[0x2]
80022b80:	5c 78       	castu.h	r8
80022b82:	f3 e8 10 08 	or	r8,r9,r8
80022b86:	10 99       	mov	r9,r8
80022b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b8c:	f1 49 00 5c 	st.w	r8[92],r9
80022b90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b94:	e0 69 08 00 	mov	r9,2048
80022b98:	91 39       	st.w	r8[0xc],r9
80022b9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022b9e:	71 79       	ld.w	r9,r8[0x5c]
80022ba0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022ba4:	11 88       	ld.ub	r8,r8[0x0]
80022ba6:	b9 68       	lsl	r8,0x18
80022ba8:	10 49       	or	r9,r8
80022baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022bae:	f1 49 00 5c 	st.w	r8[92],r9
80022bb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022bba:	f1 49 00 70 	st.w	r8[112],r9
80022bbe:	2f cd       	sub	sp,-16
80022bc0:	e3 cd 80 80 	ldm	sp++,r7,pc

80022bc4 <adcifa_start_sequencer>:
80022bc4:	eb cd 40 80 	pushm	r7,lr
80022bc8:	1a 97       	mov	r7,sp
80022bca:	20 2d       	sub	sp,8
80022bcc:	ef 4c ff fc 	st.w	r7[-4],r12
80022bd0:	16 98       	mov	r8,r11
80022bd2:	ef 68 ff f8 	st.b	r7[-8],r8
80022bd6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80022bda:	58 18       	cp.w	r8,1
80022bdc:	c0 a0       	breq	80022bf0 <adcifa_start_sequencer+0x2c>
80022bde:	58 38       	cp.w	r8,3
80022be0:	c0 d0       	breq	80022bfa <adcifa_start_sequencer+0x36>
80022be2:	58 08       	cp.w	r8,0
80022be4:	c0 f1       	brne	80022c02 <adcifa_start_sequencer+0x3e>
80022be6:	fc 78 24 00 	mov	r8,-187392
80022bea:	30 19       	mov	r9,1
80022bec:	91 09       	st.w	r8[0x0],r9
80022bee:	c0 a8       	rjmp	80022c02 <adcifa_start_sequencer+0x3e>
80022bf0:	fc 78 24 00 	mov	r8,-187392
80022bf4:	30 29       	mov	r9,2
80022bf6:	91 09       	st.w	r8[0x0],r9
80022bf8:	c0 58       	rjmp	80022c02 <adcifa_start_sequencer+0x3e>
80022bfa:	fc 78 24 00 	mov	r8,-187392
80022bfe:	30 39       	mov	r9,3
80022c00:	91 09       	st.w	r8[0x0],r9
80022c02:	2f ed       	sub	sp,-8
80022c04:	e3 cd 80 80 	ldm	sp++,r7,pc

80022c08 <adcifa_check_eoc>:
80022c08:	eb cd 40 80 	pushm	r7,lr
80022c0c:	1a 97       	mov	r7,sp
80022c0e:	20 2d       	sub	sp,8
80022c10:	ef 4c ff fc 	st.w	r7[-4],r12
80022c14:	16 98       	mov	r8,r11
80022c16:	ef 68 ff f8 	st.b	r7[-8],r8
80022c1a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80022c1e:	58 08       	cp.w	r8,0
80022c20:	c0 40       	breq	80022c28 <adcifa_check_eoc+0x20>
80022c22:	58 18       	cp.w	r8,1
80022c24:	c0 a0       	breq	80022c38 <adcifa_check_eoc+0x30>
80022c26:	c1 18       	rjmp	80022c48 <adcifa_check_eoc+0x40>
80022c28:	fc 78 24 00 	mov	r8,-187392
80022c2c:	70 28       	ld.w	r8,r8[0x8]
80022c2e:	e2 18 00 02 	andl	r8,0x2,COH
80022c32:	5f 18       	srne	r8
80022c34:	5c 58       	castu.b	r8
80022c36:	c0 a8       	rjmp	80022c4a <adcifa_check_eoc+0x42>
80022c38:	fc 78 24 00 	mov	r8,-187392
80022c3c:	70 28       	ld.w	r8,r8[0x8]
80022c3e:	e2 18 00 20 	andl	r8,0x20,COH
80022c42:	5f 18       	srne	r8
80022c44:	5c 58       	castu.b	r8
80022c46:	c0 28       	rjmp	80022c4a <adcifa_check_eoc+0x42>
80022c48:	30 08       	mov	r8,0
80022c4a:	10 9c       	mov	r12,r8
80022c4c:	2f ed       	sub	sp,-8
80022c4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80022c52 <adcifa_check_eos>:
80022c52:	eb cd 40 80 	pushm	r7,lr
80022c56:	1a 97       	mov	r7,sp
80022c58:	20 2d       	sub	sp,8
80022c5a:	ef 4c ff fc 	st.w	r7[-4],r12
80022c5e:	16 98       	mov	r8,r11
80022c60:	ef 68 ff f8 	st.b	r7[-8],r8
80022c64:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80022c68:	58 08       	cp.w	r8,0
80022c6a:	c0 40       	breq	80022c72 <adcifa_check_eos+0x20>
80022c6c:	58 18       	cp.w	r8,1
80022c6e:	c0 90       	breq	80022c80 <adcifa_check_eos+0x2e>
80022c70:	c1 08       	rjmp	80022c90 <adcifa_check_eos+0x3e>
80022c72:	fc 78 24 00 	mov	r8,-187392
80022c76:	70 28       	ld.w	r8,r8[0x8]
80022c78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80022c7c:	5c 58       	castu.b	r8
80022c7e:	c0 a8       	rjmp	80022c92 <adcifa_check_eos+0x40>
80022c80:	fc 78 24 00 	mov	r8,-187392
80022c84:	70 28       	ld.w	r8,r8[0x8]
80022c86:	e2 18 00 10 	andl	r8,0x10,COH
80022c8a:	5f 18       	srne	r8
80022c8c:	5c 58       	castu.b	r8
80022c8e:	c0 28       	rjmp	80022c92 <adcifa_check_eos+0x40>
80022c90:	30 08       	mov	r8,0
80022c92:	10 9c       	mov	r12,r8
80022c94:	2f ed       	sub	sp,-8
80022c96:	e3 cd 80 80 	ldm	sp++,r7,pc

80022c9a <adcifa_get_values_from_sequencer>:
80022c9a:	eb cd 40 c0 	pushm	r6-r7,lr
80022c9e:	1a 97       	mov	r7,sp
80022ca0:	20 5d       	sub	sp,20
80022ca2:	4b 46       	lddpc	r6,80022d70 <adcifa_get_values_from_sequencer+0xd6>
80022ca4:	1e 26       	rsub	r6,pc
80022ca6:	ef 4c ff f8 	st.w	r7[-8],r12
80022caa:	16 98       	mov	r8,r11
80022cac:	ef 4a ff f0 	st.w	r7[-16],r10
80022cb0:	ef 49 ff ec 	st.w	r7[-20],r9
80022cb4:	ef 68 ff f4 	st.b	r7[-12],r8
80022cb8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022cbc:	10 9b       	mov	r11,r8
80022cbe:	ee fc ff f8 	ld.w	r12,r7[-8]
80022cc2:	f0 16 01 37 	mcall	r6[1244]
80022cc6:	18 98       	mov	r8,r12
80022cc8:	ec 18 00 01 	eorl	r8,0x1
80022ccc:	5c 58       	castu.b	r8
80022cce:	c0 30       	breq	80022cd4 <adcifa_get_values_from_sequencer+0x3a>
80022cd0:	30 38       	mov	r8,3
80022cd2:	c4 b8       	rjmp	80022d68 <adcifa_get_values_from_sequencer+0xce>
80022cd4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022cd8:	58 08       	cp.w	r8,0
80022cda:	c0 40       	breq	80022ce2 <adcifa_get_values_from_sequencer+0x48>
80022cdc:	58 18       	cp.w	r8,1
80022cde:	c2 30       	breq	80022d24 <adcifa_get_values_from_sequencer+0x8a>
80022ce0:	c4 38       	rjmp	80022d66 <adcifa_get_values_from_sequencer+0xcc>
80022ce2:	30 08       	mov	r8,0
80022ce4:	ef 68 ff ff 	st.b	r7[-1],r8
80022ce8:	c1 58       	rjmp	80022d12 <adcifa_get_values_from_sequencer+0x78>
80022cea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022cee:	a1 78       	lsl	r8,0x1
80022cf0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022cf4:	10 09       	add	r9,r8
80022cf6:	fc 78 24 00 	mov	r8,-187392
80022cfa:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022cfe:	2d fa       	sub	r10,-33
80022d00:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80022d04:	5c 88       	casts.h	r8
80022d06:	b2 08       	st.h	r9[0x0],r8
80022d08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022d0c:	2f f8       	sub	r8,-1
80022d0e:	ef 68 ff ff 	st.b	r7[-1],r8
80022d12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022d16:	11 88       	ld.ub	r8,r8[0x0]
80022d18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022d1c:	f0 09 18 00 	cp.b	r9,r8
80022d20:	ce 53       	brcs	80022cea <adcifa_get_values_from_sequencer+0x50>
80022d22:	c2 28       	rjmp	80022d66 <adcifa_get_values_from_sequencer+0xcc>
80022d24:	30 08       	mov	r8,0
80022d26:	ef 68 ff ff 	st.b	r7[-1],r8
80022d2a:	c1 68       	rjmp	80022d56 <adcifa_get_values_from_sequencer+0xbc>
80022d2c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022d30:	a1 78       	lsl	r8,0x1
80022d32:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022d36:	10 09       	add	r9,r8
80022d38:	fc 78 24 00 	mov	r8,-187392
80022d3c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022d40:	2f 8a       	sub	r10,-8
80022d42:	2d fa       	sub	r10,-33
80022d44:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80022d48:	5c 88       	casts.h	r8
80022d4a:	b2 08       	st.h	r9[0x0],r8
80022d4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022d50:	2f f8       	sub	r8,-1
80022d52:	ef 68 ff ff 	st.b	r7[-1],r8
80022d56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022d5a:	11 88       	ld.ub	r8,r8[0x0]
80022d5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022d60:	f0 09 18 00 	cp.b	r9,r8
80022d64:	ce 43       	brcs	80022d2c <adcifa_get_values_from_sequencer+0x92>
80022d66:	30 28       	mov	r8,2
80022d68:	10 9c       	mov	r12,r8
80022d6a:	2f bd       	sub	sp,-20
80022d6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d70:	80 02       	ld.sh	r2,r0[0x0]
80022d72:	2b 28       	sub	r8,-78

80022d74 <adcifa_start_itimer>:
80022d74:	eb cd 40 80 	pushm	r7,lr
80022d78:	1a 97       	mov	r7,sp
80022d7a:	20 2d       	sub	sp,8
80022d7c:	ef 4c ff fc 	st.w	r7[-4],r12
80022d80:	ef 4b ff f8 	st.w	r7[-8],r11
80022d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d8c:	f1 49 00 48 	st.w	r8[72],r9
80022d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d94:	30 89       	mov	r9,8
80022d96:	91 09       	st.w	r8[0x0],r9
80022d98:	2f ed       	sub	sp,-8
80022d9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80022d9e <adcifa_stop_itimer>:
80022d9e:	eb cd 40 80 	pushm	r7,lr
80022da2:	1a 97       	mov	r7,sp
80022da4:	20 1d       	sub	sp,4
80022da6:	ef 4c ff fc 	st.w	r7[-4],r12
80022daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dae:	30 49       	mov	r9,4
80022db0:	91 09       	st.w	r8[0x0],r9
80022db2:	2f fd       	sub	sp,-4
80022db4:	e3 cd 80 80 	ldm	sp++,r7,pc

80022db8 <adcifa_enable_interrupt>:
80022db8:	eb cd 40 80 	pushm	r7,lr
80022dbc:	1a 97       	mov	r7,sp
80022dbe:	20 2d       	sub	sp,8
80022dc0:	ef 4c ff fc 	st.w	r7[-4],r12
80022dc4:	ef 4b ff f8 	st.w	r7[-8],r11
80022dc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dcc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022dd0:	f1 49 00 70 	st.w	r8[112],r9
80022dd4:	2f ed       	sub	sp,-8
80022dd6:	e3 cd 80 80 	ldm	sp++,r7,pc

80022dda <adcifa_disable_interrupt>:
80022dda:	eb cd 40 80 	pushm	r7,lr
80022dde:	1a 97       	mov	r7,sp
80022de0:	20 2d       	sub	sp,8
80022de2:	ef 4c ff fc 	st.w	r7[-4],r12
80022de6:	ef 4b ff f8 	st.w	r7[-8],r11
80022dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022df2:	f1 49 00 74 	st.w	r8[116],r9
80022df6:	2f ed       	sub	sp,-8
80022df8:	e3 cd 80 80 	ldm	sp++,r7,pc

80022dfc <adcifa_clear_interrupt>:
80022dfc:	eb cd 40 80 	pushm	r7,lr
80022e00:	1a 97       	mov	r7,sp
80022e02:	20 2d       	sub	sp,8
80022e04:	ef 4c ff fc 	st.w	r7[-4],r12
80022e08:	ef 4b ff f8 	st.w	r7[-8],r11
80022e0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022e14:	91 39       	st.w	r8[0xc],r9
80022e16:	2f ed       	sub	sp,-8
80022e18:	e3 cd 80 80 	ldm	sp++,r7,pc

80022e1c <ast_is_busy>:
80022e1c:	eb cd 40 80 	pushm	r7,lr
80022e20:	1a 97       	mov	r7,sp
80022e22:	20 1d       	sub	sp,4
80022e24:	ef 4c ff fc 	st.w	r7[-4],r12
80022e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e2c:	70 28       	ld.w	r8,r8[0x8]
80022e2e:	e6 18 01 00 	andh	r8,0x100,COH
80022e32:	5f 18       	srne	r8
80022e34:	10 9c       	mov	r12,r8
80022e36:	2f fd       	sub	sp,-4
80022e38:	e3 cd 80 80 	ldm	sp++,r7,pc

80022e3c <ast_is_clkbusy>:
80022e3c:	eb cd 40 80 	pushm	r7,lr
80022e40:	1a 97       	mov	r7,sp
80022e42:	20 1d       	sub	sp,4
80022e44:	ef 4c ff fc 	st.w	r7[-4],r12
80022e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e4c:	70 28       	ld.w	r8,r8[0x8]
80022e4e:	e6 18 10 00 	andh	r8,0x1000,COH
80022e52:	5f 18       	srne	r8
80022e54:	10 9c       	mov	r12,r8
80022e56:	2f fd       	sub	sp,-4
80022e58:	e3 cd 80 80 	ldm	sp++,r7,pc

80022e5c <ast_init_calendar>:
80022e5c:	eb cd 40 c0 	pushm	r6-r7,lr
80022e60:	1a 97       	mov	r7,sp
80022e62:	20 4d       	sub	sp,16
80022e64:	49 a6       	lddpc	r6,80022ecc <ast_init_calendar+0x70>
80022e66:	1e 26       	rsub	r6,pc
80022e68:	ef 4c ff fc 	st.w	r7[-4],r12
80022e6c:	14 98       	mov	r8,r10
80022e6e:	ef 49 ff f0 	st.w	r7[-16],r9
80022e72:	16 99       	mov	r9,r11
80022e74:	ef 69 ff f8 	st.b	r7[-8],r9
80022e78:	ef 68 ff f4 	st.b	r7[-12],r8
80022e7c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022e80:	cd ef       	rcall	80022e3c <ast_is_clkbusy>
80022e82:	18 98       	mov	r8,r12
80022e84:	58 08       	cp.w	r8,0
80022e86:	cf b1       	brne	80022e7c <ast_init_calendar+0x20>
80022e88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80022e8c:	a9 68       	lsl	r8,0x8
80022e8e:	a1 a8       	sbr	r8,0x0
80022e90:	10 99       	mov	r9,r8
80022e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e96:	f1 49 00 40 	st.w	r8[64],r9
80022e9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022e9e:	b1 68       	lsl	r8,0x10
80022ea0:	a3 a8       	sbr	r8,0x2
80022ea2:	10 99       	mov	r9,r8
80022ea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ea8:	91 09       	st.w	r8[0x0],r9
80022eaa:	ee fc ff fc 	ld.w	r12,r7[-4]
80022eae:	cb 7f       	rcall	80022e1c <ast_is_busy>
80022eb0:	18 98       	mov	r8,r12
80022eb2:	58 08       	cp.w	r8,0
80022eb4:	cf b1       	brne	80022eaa <ast_init_calendar+0x4e>
80022eb6:	ee fb ff f0 	ld.w	r11,r7[-16]
80022eba:	ee fc ff fc 	ld.w	r12,r7[-4]
80022ebe:	f0 16 01 c3 	mcall	r6[1804]
80022ec2:	30 18       	mov	r8,1
80022ec4:	10 9c       	mov	r12,r8
80022ec6:	2f cd       	sub	sp,-16
80022ec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ecc:	80 02       	ld.sh	r2,r0[0x0]
80022ece:	2c ea       	sub	r10,-50

80022ed0 <ast_init_counter>:
80022ed0:	eb cd 40 c0 	pushm	r6-r7,lr
80022ed4:	1a 97       	mov	r7,sp
80022ed6:	20 4d       	sub	sp,16
80022ed8:	49 46       	lddpc	r6,80022f28 <ast_init_counter+0x58>
80022eda:	1e 26       	rsub	r6,pc
80022edc:	ef 4c ff fc 	st.w	r7[-4],r12
80022ee0:	14 98       	mov	r8,r10
80022ee2:	ef 49 ff f0 	st.w	r7[-16],r9
80022ee6:	16 99       	mov	r9,r11
80022ee8:	ef 69 ff f8 	st.b	r7[-8],r9
80022eec:	ef 68 ff f4 	st.b	r7[-12],r8
80022ef0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80022ef4:	a9 68       	lsl	r8,0x8
80022ef6:	a1 a8       	sbr	r8,0x0
80022ef8:	10 99       	mov	r9,r8
80022efa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022efe:	f1 49 00 40 	st.w	r8[64],r9
80022f02:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022f06:	b1 68       	lsl	r8,0x10
80022f08:	10 99       	mov	r9,r8
80022f0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f0e:	91 09       	st.w	r8[0x0],r9
80022f10:	ee fb ff f0 	ld.w	r11,r7[-16]
80022f14:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f18:	f0 16 02 15 	mcall	r6[2132]
80022f1c:	30 18       	mov	r8,1
80022f1e:	10 9c       	mov	r12,r8
80022f20:	2f cd       	sub	sp,-16
80022f22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f26:	00 00       	add	r0,r0
80022f28:	80 02       	ld.sh	r2,r0[0x0]
80022f2a:	2d 5e       	sub	lr,-43

80022f2c <ast_enable>:
80022f2c:	eb cd 40 c0 	pushm	r6-r7,lr
80022f30:	1a 97       	mov	r7,sp
80022f32:	20 1d       	sub	sp,4
80022f34:	48 e6       	lddpc	r6,80022f6c <ast_enable+0x40>
80022f36:	1e 26       	rsub	r6,pc
80022f38:	ef 4c ff fc 	st.w	r7[-4],r12
80022f3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f40:	c6 ef       	rcall	80022e1c <ast_is_busy>
80022f42:	18 98       	mov	r8,r12
80022f44:	58 08       	cp.w	r8,0
80022f46:	cf b1       	brne	80022f3c <ast_enable+0x10>
80022f48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f4c:	70 08       	ld.w	r8,r8[0x0]
80022f4e:	10 99       	mov	r9,r8
80022f50:	a1 a9       	sbr	r9,0x0
80022f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f56:	91 09       	st.w	r8[0x0],r9
80022f58:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f5c:	c6 0f       	rcall	80022e1c <ast_is_busy>
80022f5e:	18 98       	mov	r8,r12
80022f60:	58 08       	cp.w	r8,0
80022f62:	cf b1       	brne	80022f58 <ast_enable+0x2c>
80022f64:	2f fd       	sub	sp,-4
80022f66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f6a:	00 00       	add	r0,r0
80022f6c:	80 02       	ld.sh	r2,r0[0x0]
80022f6e:	2d ba       	sub	r10,-37

80022f70 <ast_set_calendar_value>:
80022f70:	eb cd 40 c0 	pushm	r6-r7,lr
80022f74:	1a 97       	mov	r7,sp
80022f76:	20 2d       	sub	sp,8
80022f78:	48 e6       	lddpc	r6,80022fb0 <ast_set_calendar_value+0x40>
80022f7a:	1e 26       	rsub	r6,pc
80022f7c:	ef 4c ff fc 	st.w	r7[-4],r12
80022f80:	ef 4b ff f8 	st.w	r7[-8],r11
80022f84:	ee fc ff fc 	ld.w	r12,r7[-4]
80022f88:	c4 af       	rcall	80022e1c <ast_is_busy>
80022f8a:	18 98       	mov	r8,r12
80022f8c:	58 08       	cp.w	r8,0
80022f8e:	cf b1       	brne	80022f84 <ast_set_calendar_value+0x14>
80022f90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f98:	f1 49 00 54 	st.w	r8[84],r9
80022f9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022fa0:	c3 ef       	rcall	80022e1c <ast_is_busy>
80022fa2:	18 98       	mov	r8,r12
80022fa4:	58 08       	cp.w	r8,0
80022fa6:	cf b1       	brne	80022f9c <ast_set_calendar_value+0x2c>
80022fa8:	2f ed       	sub	sp,-8
80022faa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022fae:	00 00       	add	r0,r0
80022fb0:	80 02       	ld.sh	r2,r0[0x0]
80022fb2:	2d fe       	sub	lr,-33

80022fb4 <ast_set_counter_value>:
80022fb4:	eb cd 40 c0 	pushm	r6-r7,lr
80022fb8:	1a 97       	mov	r7,sp
80022fba:	20 2d       	sub	sp,8
80022fbc:	48 d6       	lddpc	r6,80022ff0 <ast_set_counter_value+0x3c>
80022fbe:	1e 26       	rsub	r6,pc
80022fc0:	ef 4c ff fc 	st.w	r7[-4],r12
80022fc4:	ef 4b ff f8 	st.w	r7[-8],r11
80022fc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80022fcc:	c2 8f       	rcall	80022e1c <ast_is_busy>
80022fce:	18 98       	mov	r8,r12
80022fd0:	58 08       	cp.w	r8,0
80022fd2:	cf b1       	brne	80022fc8 <ast_set_counter_value+0x14>
80022fd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022fd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022fdc:	91 19       	st.w	r8[0x4],r9
80022fde:	ee fc ff fc 	ld.w	r12,r7[-4]
80022fe2:	c1 df       	rcall	80022e1c <ast_is_busy>
80022fe4:	18 98       	mov	r8,r12
80022fe6:	58 08       	cp.w	r8,0
80022fe8:	cf b1       	brne	80022fde <ast_set_counter_value+0x2a>
80022fea:	2f ed       	sub	sp,-8
80022fec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ff0:	80 02       	ld.sh	r2,r0[0x0]
80022ff2:	2e 42       	sub	r2,-28

80022ff4 <ast_get_calendar_value>:
80022ff4:	eb cd 40 80 	pushm	r7,lr
80022ff8:	1a 97       	mov	r7,sp
80022ffa:	20 2d       	sub	sp,8
80022ffc:	ef 4c ff f8 	st.w	r7[-8],r12
80023000:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023004:	71 58       	ld.w	r8,r8[0x54]
80023006:	ef 48 ff fc 	st.w	r7[-4],r8
8002300a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002300e:	10 9c       	mov	r12,r8
80023010:	2f ed       	sub	sp,-8
80023012:	e3 cd 80 80 	ldm	sp++,r7,pc

80023016 <ast_get_counter_value>:
80023016:	eb cd 40 80 	pushm	r7,lr
8002301a:	1a 97       	mov	r7,sp
8002301c:	20 1d       	sub	sp,4
8002301e:	ef 4c ff fc 	st.w	r7[-4],r12
80023022:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023026:	70 18       	ld.w	r8,r8[0x4]
80023028:	10 9c       	mov	r12,r8
8002302a:	2f fd       	sub	sp,-4
8002302c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023030 <ast_set_alarm0_value>:
80023030:	eb cd 40 80 	pushm	r7,lr
80023034:	1a 97       	mov	r7,sp
80023036:	20 2d       	sub	sp,8
80023038:	ef 4c ff fc 	st.w	r7[-4],r12
8002303c:	ef 4b ff f8 	st.w	r7[-8],r11
80023040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023044:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023048:	91 89       	st.w	r8[0x20],r9
8002304a:	2f ed       	sub	sp,-8
8002304c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023050 <ast_set_alarm1_value>:
80023050:	eb cd 40 80 	pushm	r7,lr
80023054:	1a 97       	mov	r7,sp
80023056:	20 2d       	sub	sp,8
80023058:	ef 4c ff fc 	st.w	r7[-4],r12
8002305c:	ef 4b ff f8 	st.w	r7[-8],r11
80023060:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023064:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023068:	91 99       	st.w	r8[0x24],r9
8002306a:	2f ed       	sub	sp,-8
8002306c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023070 <ast_enable_alarm0>:
80023070:	eb cd 40 c0 	pushm	r6-r7,lr
80023074:	1a 97       	mov	r7,sp
80023076:	20 1d       	sub	sp,4
80023078:	48 e6       	lddpc	r6,800230b0 <ast_enable_alarm0+0x40>
8002307a:	1e 26       	rsub	r6,pc
8002307c:	ef 4c ff fc 	st.w	r7[-4],r12
80023080:	ee fc ff fc 	ld.w	r12,r7[-4]
80023084:	cc ce       	rcall	80022e1c <ast_is_busy>
80023086:	18 98       	mov	r8,r12
80023088:	58 08       	cp.w	r8,0
8002308a:	cf b1       	brne	80023080 <ast_enable_alarm0+0x10>
8002308c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023090:	71 28       	ld.w	r8,r8[0x48]
80023092:	10 99       	mov	r9,r8
80023094:	a9 a9       	sbr	r9,0x8
80023096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002309a:	f1 49 00 48 	st.w	r8[72],r9
8002309e:	ee fc ff fc 	ld.w	r12,r7[-4]
800230a2:	cb de       	rcall	80022e1c <ast_is_busy>
800230a4:	18 98       	mov	r8,r12
800230a6:	58 08       	cp.w	r8,0
800230a8:	cf b1       	brne	8002309e <ast_enable_alarm0+0x2e>
800230aa:	2f fd       	sub	sp,-4
800230ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800230b0:	80 02       	ld.sh	r2,r0[0x0]
800230b2:	2e fe       	sub	lr,-17

800230b4 <ast_disable_alarm0>:
800230b4:	eb cd 40 c0 	pushm	r6-r7,lr
800230b8:	1a 97       	mov	r7,sp
800230ba:	20 1d       	sub	sp,4
800230bc:	48 e6       	lddpc	r6,800230f4 <ast_disable_alarm0+0x40>
800230be:	1e 26       	rsub	r6,pc
800230c0:	ef 4c ff fc 	st.w	r7[-4],r12
800230c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800230c8:	ca ae       	rcall	80022e1c <ast_is_busy>
800230ca:	18 98       	mov	r8,r12
800230cc:	58 08       	cp.w	r8,0
800230ce:	cf b1       	brne	800230c4 <ast_disable_alarm0+0x10>
800230d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800230d4:	71 38       	ld.w	r8,r8[0x4c]
800230d6:	10 99       	mov	r9,r8
800230d8:	a9 a9       	sbr	r9,0x8
800230da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800230de:	f1 49 00 4c 	st.w	r8[76],r9
800230e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800230e6:	c9 be       	rcall	80022e1c <ast_is_busy>
800230e8:	18 98       	mov	r8,r12
800230ea:	58 08       	cp.w	r8,0
800230ec:	cf b1       	brne	800230e2 <ast_disable_alarm0+0x2e>
800230ee:	2f fd       	sub	sp,-4
800230f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800230f4:	80 02       	ld.sh	r2,r0[0x0]
800230f6:	2f 42       	sub	r2,-12

800230f8 <ast_enable_alarm1>:
800230f8:	eb cd 40 c0 	pushm	r6-r7,lr
800230fc:	1a 97       	mov	r7,sp
800230fe:	20 1d       	sub	sp,4
80023100:	48 e6       	lddpc	r6,80023138 <ast_enable_alarm1+0x40>
80023102:	1e 26       	rsub	r6,pc
80023104:	ef 4c ff fc 	st.w	r7[-4],r12
80023108:	ee fc ff fc 	ld.w	r12,r7[-4]
8002310c:	c8 8e       	rcall	80022e1c <ast_is_busy>
8002310e:	18 98       	mov	r8,r12
80023110:	58 08       	cp.w	r8,0
80023112:	cf b1       	brne	80023108 <ast_enable_alarm1+0x10>
80023114:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023118:	71 28       	ld.w	r8,r8[0x48]
8002311a:	10 99       	mov	r9,r8
8002311c:	a9 b9       	sbr	r9,0x9
8002311e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023122:	f1 49 00 48 	st.w	r8[72],r9
80023126:	ee fc ff fc 	ld.w	r12,r7[-4]
8002312a:	c7 9e       	rcall	80022e1c <ast_is_busy>
8002312c:	18 98       	mov	r8,r12
8002312e:	58 08       	cp.w	r8,0
80023130:	cf b1       	brne	80023126 <ast_enable_alarm1+0x2e>
80023132:	2f fd       	sub	sp,-4
80023134:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023138:	80 02       	ld.sh	r2,r0[0x0]
8002313a:	2f 86       	sub	r6,-8

8002313c <ast_disable_alarm1>:
8002313c:	eb cd 40 c0 	pushm	r6-r7,lr
80023140:	1a 97       	mov	r7,sp
80023142:	20 1d       	sub	sp,4
80023144:	48 e6       	lddpc	r6,8002317c <ast_disable_alarm1+0x40>
80023146:	1e 26       	rsub	r6,pc
80023148:	ef 4c ff fc 	st.w	r7[-4],r12
8002314c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023150:	c6 6e       	rcall	80022e1c <ast_is_busy>
80023152:	18 98       	mov	r8,r12
80023154:	58 08       	cp.w	r8,0
80023156:	cf b1       	brne	8002314c <ast_disable_alarm1+0x10>
80023158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002315c:	71 38       	ld.w	r8,r8[0x4c]
8002315e:	10 99       	mov	r9,r8
80023160:	a9 b9       	sbr	r9,0x9
80023162:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023166:	f1 49 00 4c 	st.w	r8[76],r9
8002316a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002316e:	c5 7e       	rcall	80022e1c <ast_is_busy>
80023170:	18 98       	mov	r8,r12
80023172:	58 08       	cp.w	r8,0
80023174:	cf b1       	brne	8002316a <ast_disable_alarm1+0x2e>
80023176:	2f fd       	sub	sp,-4
80023178:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002317c:	80 02       	ld.sh	r2,r0[0x0]
8002317e:	2f ca       	sub	r10,-4

80023180 <ast_set_periodic0_value>:
80023180:	eb cd 40 80 	pushm	r7,lr
80023184:	1a 97       	mov	r7,sp
80023186:	20 2d       	sub	sp,8
80023188:	ef 4c ff fc 	st.w	r7[-4],r12
8002318c:	ef 4b ff f8 	st.w	r7[-8],r11
80023190:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023194:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023198:	91 c9       	st.w	r8[0x30],r9
8002319a:	2f ed       	sub	sp,-8
8002319c:	e3 cd 80 80 	ldm	sp++,r7,pc

800231a0 <ast_set_periodic1_value>:
800231a0:	eb cd 40 80 	pushm	r7,lr
800231a4:	1a 97       	mov	r7,sp
800231a6:	20 2d       	sub	sp,8
800231a8:	ef 4c ff fc 	st.w	r7[-4],r12
800231ac:	ef 4b ff f8 	st.w	r7[-8],r11
800231b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800231b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800231b8:	91 d9       	st.w	r8[0x34],r9
800231ba:	2f ed       	sub	sp,-8
800231bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800231c0 <ast_enable_periodic0>:
800231c0:	eb cd 40 c0 	pushm	r6-r7,lr
800231c4:	1a 97       	mov	r7,sp
800231c6:	20 1d       	sub	sp,4
800231c8:	48 e6       	lddpc	r6,80023200 <ast_enable_periodic0+0x40>
800231ca:	1e 26       	rsub	r6,pc
800231cc:	ef 4c ff fc 	st.w	r7[-4],r12
800231d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800231d4:	c2 4e       	rcall	80022e1c <ast_is_busy>
800231d6:	18 98       	mov	r8,r12
800231d8:	58 08       	cp.w	r8,0
800231da:	cf b1       	brne	800231d0 <ast_enable_periodic0+0x10>
800231dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800231e0:	71 28       	ld.w	r8,r8[0x48]
800231e2:	10 99       	mov	r9,r8
800231e4:	b1 a9       	sbr	r9,0x10
800231e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800231ea:	f1 49 00 48 	st.w	r8[72],r9
800231ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800231f2:	c1 5e       	rcall	80022e1c <ast_is_busy>
800231f4:	18 98       	mov	r8,r12
800231f6:	58 08       	cp.w	r8,0
800231f8:	cf b1       	brne	800231ee <ast_enable_periodic0+0x2e>
800231fa:	2f fd       	sub	sp,-4
800231fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023200:	80 02       	ld.sh	r2,r0[0x0]
80023202:	30 4e       	mov	lr,4

80023204 <ast_disable_periodic0>:
80023204:	eb cd 40 c0 	pushm	r6-r7,lr
80023208:	1a 97       	mov	r7,sp
8002320a:	20 1d       	sub	sp,4
8002320c:	48 f6       	lddpc	r6,80023248 <ast_disable_periodic0+0x44>
8002320e:	1e 26       	rsub	r6,pc
80023210:	ef 4c ff fc 	st.w	r7[-4],r12
80023214:	ee fc ff fc 	ld.w	r12,r7[-4]
80023218:	c0 2e       	rcall	80022e1c <ast_is_busy>
8002321a:	18 98       	mov	r8,r12
8002321c:	58 08       	cp.w	r8,0
8002321e:	cf b1       	brne	80023214 <ast_disable_periodic0+0x10>
80023220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023224:	71 38       	ld.w	r8,r8[0x4c]
80023226:	10 99       	mov	r9,r8
80023228:	b1 a9       	sbr	r9,0x10
8002322a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002322e:	f1 49 00 4c 	st.w	r8[76],r9
80023232:	ee fc ff fc 	ld.w	r12,r7[-4]
80023236:	fe b0 fd f3 	rcall	80022e1c <ast_is_busy>
8002323a:	18 98       	mov	r8,r12
8002323c:	58 08       	cp.w	r8,0
8002323e:	cf a1       	brne	80023232 <ast_disable_periodic0+0x2e>
80023240:	2f fd       	sub	sp,-4
80023242:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023246:	00 00       	add	r0,r0
80023248:	80 02       	ld.sh	r2,r0[0x0]
8002324a:	30 92       	mov	r2,9

8002324c <ast_enable_periodic1>:
8002324c:	eb cd 40 c0 	pushm	r6-r7,lr
80023250:	1a 97       	mov	r7,sp
80023252:	20 1d       	sub	sp,4
80023254:	48 f6       	lddpc	r6,80023290 <ast_enable_periodic1+0x44>
80023256:	1e 26       	rsub	r6,pc
80023258:	ef 4c ff fc 	st.w	r7[-4],r12
8002325c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023260:	fe b0 fd de 	rcall	80022e1c <ast_is_busy>
80023264:	18 98       	mov	r8,r12
80023266:	58 08       	cp.w	r8,0
80023268:	cf a1       	brne	8002325c <ast_enable_periodic1+0x10>
8002326a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002326e:	71 28       	ld.w	r8,r8[0x48]
80023270:	10 99       	mov	r9,r8
80023272:	b1 b9       	sbr	r9,0x11
80023274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023278:	f1 49 00 48 	st.w	r8[72],r9
8002327c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023280:	fe b0 fd ce 	rcall	80022e1c <ast_is_busy>
80023284:	18 98       	mov	r8,r12
80023286:	58 08       	cp.w	r8,0
80023288:	cf a1       	brne	8002327c <ast_enable_periodic1+0x30>
8002328a:	2f fd       	sub	sp,-4
8002328c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023290:	80 02       	ld.sh	r2,r0[0x0]
80023292:	30 da       	mov	r10,13

80023294 <ast_disable_periodic1>:
80023294:	eb cd 40 c0 	pushm	r6-r7,lr
80023298:	1a 97       	mov	r7,sp
8002329a:	20 1d       	sub	sp,4
8002329c:	48 f6       	lddpc	r6,800232d8 <ast_disable_periodic1+0x44>
8002329e:	1e 26       	rsub	r6,pc
800232a0:	ef 4c ff fc 	st.w	r7[-4],r12
800232a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800232a8:	fe b0 fd ba 	rcall	80022e1c <ast_is_busy>
800232ac:	18 98       	mov	r8,r12
800232ae:	58 08       	cp.w	r8,0
800232b0:	cf a1       	brne	800232a4 <ast_disable_periodic1+0x10>
800232b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800232b6:	71 38       	ld.w	r8,r8[0x4c]
800232b8:	10 99       	mov	r9,r8
800232ba:	b1 a9       	sbr	r9,0x10
800232bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800232c0:	f1 49 00 4c 	st.w	r8[76],r9
800232c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800232c8:	fe b0 fd aa 	rcall	80022e1c <ast_is_busy>
800232cc:	18 98       	mov	r8,r12
800232ce:	58 08       	cp.w	r8,0
800232d0:	cf a1       	brne	800232c4 <ast_disable_periodic1+0x30>
800232d2:	2f fd       	sub	sp,-4
800232d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800232d8:	80 02       	ld.sh	r2,r0[0x0]
800232da:	31 22       	mov	r2,18

800232dc <dacifb_us_delay>:
800232dc:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800232e0:	1a 97       	mov	r7,sp
800232e2:	20 cd       	sub	sp,48
800232e4:	4d 46       	lddpc	r6,80023434 <dacifb_us_delay+0x158>
800232e6:	1e 26       	rsub	r6,pc
800232e8:	ef 4c ff d4 	st.w	r7[-44],r12
800232ec:	ef 4b ff d0 	st.w	r7[-48],r11
800232f0:	ee fa ff d0 	ld.w	r10,r7[-48]
800232f4:	ee fb ff d4 	ld.w	r11,r7[-44]
800232f8:	ef 4b ff e8 	st.w	r7[-24],r11
800232fc:	ef 4a ff e4 	st.w	r7[-28],r10
80023300:	ee f2 ff e8 	ld.w	r2,r7[-24]
80023304:	30 03       	mov	r3,0
80023306:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002330a:	30 09       	mov	r9,0
8002330c:	e6 08 02 4a 	mul	r10,r3,r8
80023310:	f2 02 02 4b 	mul	r11,r9,r2
80023314:	16 0a       	add	r10,r11
80023316:	e4 08 06 48 	mulu.d	r8,r2,r8
8002331a:	12 0a       	add	r10,r9
8002331c:	14 99       	mov	r9,r10
8002331e:	ee 7a 42 3f 	mov	r10,999999
80023322:	30 0b       	mov	r11,0
80023324:	f0 0a 00 0a 	add	r10,r8,r10
80023328:	f2 0b 00 4b 	adc	r11,r9,r11
8002332c:	ee 78 42 40 	mov	r8,1000000
80023330:	30 09       	mov	r9,0
80023332:	f0 16 01 00 	mcall	r6[1024]
80023336:	14 98       	mov	r8,r10
80023338:	16 99       	mov	r9,r11
8002333a:	ef 48 ff f0 	st.w	r7[-16],r8
8002333e:	ee c8 00 28 	sub	r8,r7,40
80023342:	ef 48 ff ec 	st.w	r7[-20],r8
80023346:	e1 b8 00 42 	mfsr	r8,0x108
8002334a:	10 99       	mov	r9,r8
8002334c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023350:	91 09       	st.w	r8[0x0],r9
80023352:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023356:	70 09       	ld.w	r9,r8[0x0]
80023358:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002335c:	10 09       	add	r9,r8
8002335e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023362:	91 19       	st.w	r8[0x4],r9
80023364:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023368:	30 08       	mov	r8,0
8002336a:	f3 68 00 08 	st.b	r9[8],r8
8002336e:	ee c8 00 28 	sub	r8,r7,40
80023372:	ef 48 ff f4 	st.w	r7[-12],r8
80023376:	e1 b8 00 42 	mfsr	r8,0x108
8002337a:	ef 48 ff f8 	st.w	r7[-8],r8
8002337e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023382:	f1 39 00 08 	ld.ub	r9,r8[8]
80023386:	30 28       	mov	r8,2
80023388:	f0 09 18 00 	cp.b	r9,r8
8002338c:	c0 31       	brne	80023392 <dacifb_us_delay+0xb6>
8002338e:	30 08       	mov	r8,0
80023390:	c4 38       	rjmp	80023416 <dacifb_us_delay+0x13a>
80023392:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023396:	f1 39 00 08 	ld.ub	r9,r8[8]
8002339a:	30 18       	mov	r8,1
8002339c:	f0 09 18 00 	cp.b	r9,r8
800233a0:	c0 31       	brne	800233a6 <dacifb_us_delay+0xca>
800233a2:	30 18       	mov	r8,1
800233a4:	c3 98       	rjmp	80023416 <dacifb_us_delay+0x13a>
800233a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233aa:	70 09       	ld.w	r9,r8[0x0]
800233ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233b0:	70 18       	ld.w	r8,r8[0x4]
800233b2:	10 39       	cp.w	r9,r8
800233b4:	e0 88 00 1a 	brls	800233e8 <dacifb_us_delay+0x10c>
800233b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233bc:	70 08       	ld.w	r8,r8[0x0]
800233be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233c2:	10 39       	cp.w	r9,r8
800233c4:	c1 02       	brcc	800233e4 <dacifb_us_delay+0x108>
800233c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233ca:	70 18       	ld.w	r8,r8[0x4]
800233cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233d0:	10 39       	cp.w	r9,r8
800233d2:	e0 88 00 09 	brls	800233e4 <dacifb_us_delay+0x108>
800233d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800233da:	30 18       	mov	r8,1
800233dc:	f3 68 00 08 	st.b	r9[8],r8
800233e0:	30 18       	mov	r8,1
800233e2:	c1 a8       	rjmp	80023416 <dacifb_us_delay+0x13a>
800233e4:	30 08       	mov	r8,0
800233e6:	c1 88       	rjmp	80023416 <dacifb_us_delay+0x13a>
800233e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233ec:	70 08       	ld.w	r8,r8[0x0]
800233ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233f2:	10 39       	cp.w	r9,r8
800233f4:	c0 93       	brcs	80023406 <dacifb_us_delay+0x12a>
800233f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233fa:	70 18       	ld.w	r8,r8[0x4]
800233fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023400:	10 39       	cp.w	r9,r8
80023402:	e0 88 00 09 	brls	80023414 <dacifb_us_delay+0x138>
80023406:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002340a:	30 18       	mov	r8,1
8002340c:	f3 68 00 08 	st.b	r9[8],r8
80023410:	30 18       	mov	r8,1
80023412:	c0 28       	rjmp	80023416 <dacifb_us_delay+0x13a>
80023414:	30 08       	mov	r8,0
80023416:	58 08       	cp.w	r8,0
80023418:	ca b0       	breq	8002336e <dacifb_us_delay+0x92>
8002341a:	ee c8 00 28 	sub	r8,r7,40
8002341e:	ef 48 ff fc 	st.w	r7[-4],r8
80023422:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023426:	30 28       	mov	r8,2
80023428:	f3 68 00 08 	st.b	r9[8],r8
8002342c:	2f 4d       	sub	sp,-48
8002342e:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023432:	00 00       	add	r0,r0
80023434:	80 02       	ld.sh	r2,r0[0x0]
80023436:	31 6a       	mov	r10,22

80023438 <dacifb_get_calibration_data>:
80023438:	eb cd 40 80 	pushm	r7,lr
8002343c:	1a 97       	mov	r7,sp
8002343e:	20 5d       	sub	sp,20
80023440:	ef 4c ff f4 	st.w	r7[-12],r12
80023444:	ef 4b ff f0 	st.w	r7[-16],r11
80023448:	14 98       	mov	r8,r10
8002344a:	ef 68 ff ec 	st.b	r7[-20],r8
8002344e:	e0 68 02 0c 	mov	r8,524
80023452:	ea 18 80 80 	orh	r8,0x8080
80023456:	ef 48 ff f8 	st.w	r7[-8],r8
8002345a:	e0 68 02 14 	mov	r8,532
8002345e:	ea 18 80 80 	orh	r8,0x8080
80023462:	ef 48 ff fc 	st.w	r7[-4],r8
80023466:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002346a:	30 08       	mov	r8,0
8002346c:	f0 09 18 00 	cp.b	r9,r8
80023470:	c1 71       	brne	8002349e <dacifb_get_calibration_data+0x66>
80023472:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023476:	70 08       	ld.w	r8,r8[0x0]
80023478:	5c 88       	casts.h	r8
8002347a:	5c 88       	casts.h	r8
8002347c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023480:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023484:	b2 28       	st.h	r9[0x4],r8
80023486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002348a:	70 08       	ld.w	r8,r8[0x0]
8002348c:	b1 88       	lsr	r8,0x10
8002348e:	5c 88       	casts.h	r8
80023490:	5c 88       	casts.h	r8
80023492:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023496:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002349a:	b2 18       	st.h	r9[0x2],r8
8002349c:	c1 68       	rjmp	800234c8 <dacifb_get_calibration_data+0x90>
8002349e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234a2:	70 08       	ld.w	r8,r8[0x0]
800234a4:	5c 88       	casts.h	r8
800234a6:	5c 88       	casts.h	r8
800234a8:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800234ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800234b0:	b2 28       	st.h	r9[0x4],r8
800234b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234b6:	70 08       	ld.w	r8,r8[0x0]
800234b8:	b1 88       	lsr	r8,0x10
800234ba:	5c 88       	casts.h	r8
800234bc:	5c 88       	casts.h	r8
800234be:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800234c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800234c6:	b2 18       	st.h	r9[0x2],r8
800234c8:	2f bd       	sub	sp,-20
800234ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800234ce <dacifb_configure>:
800234ce:	eb cd 40 80 	pushm	r7,lr
800234d2:	1a 97       	mov	r7,sp
800234d4:	20 5d       	sub	sp,20
800234d6:	ef 4c ff f4 	st.w	r7[-12],r12
800234da:	ef 4b ff f0 	st.w	r7[-16],r11
800234de:	ef 4a ff ec 	st.w	r7[-20],r10
800234e2:	30 08       	mov	r8,0
800234e4:	ef 48 ff f8 	st.w	r7[-8],r8
800234e8:	30 08       	mov	r8,0
800234ea:	ef 48 ff fc 	st.w	r7[-4],r8
800234ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800234f2:	90 28       	ld.sh	r8,r8[0x4]
800234f4:	5c 78       	castu.h	r8
800234f6:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800234fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800234fe:	90 18       	ld.sh	r8,r8[0x2]
80023500:	5c 78       	castu.h	r8
80023502:	b1 68       	lsl	r8,0x10
80023504:	e6 18 01 ff 	andh	r8,0x1ff,COH
80023508:	f3 e8 10 08 	or	r8,r9,r8
8002350c:	10 99       	mov	r9,r8
8002350e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023512:	91 d9       	st.w	r8[0x34],r9
80023514:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023518:	70 29       	ld.w	r9,r8[0x8]
8002351a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002351e:	f0 09 0d 08 	divu	r8,r8,r9
80023522:	f0 08 12 00 	clz	r8,r8
80023526:	f0 08 11 1f 	rsub	r8,r8,31
8002352a:	ef 48 ff f8 	st.w	r7[-8],r8
8002352e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023532:	58 88       	cp.w	r8,8
80023534:	e0 88 00 04 	brls	8002353c <dacifb_configure+0x6e>
80023538:	30 08       	mov	r8,0
8002353a:	c6 d8       	rjmp	80023614 <dacifb_configure+0x146>
8002353c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023540:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023544:	f2 08 0a 49 	lsr	r9,r9,r8
80023548:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002354c:	91 29       	st.w	r8[0x8],r9
8002354e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023552:	70 29       	ld.w	r9,r8[0x8]
80023554:	e0 68 de 83 	mov	r8,56963
80023558:	ea 18 43 1b 	orh	r8,0x431b
8002355c:	f2 08 06 48 	mulu.d	r8,r9,r8
80023560:	f2 08 16 11 	lsr	r8,r9,0x11
80023564:	ef 48 ff fc 	st.w	r7[-4],r8
80023568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002356c:	e0 48 00 80 	cp.w	r8,128
80023570:	e0 88 00 04 	brls	80023578 <dacifb_configure+0xaa>
80023574:	30 08       	mov	r8,0
80023576:	c4 f8       	rjmp	80023614 <dacifb_configure+0x146>
80023578:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002357c:	70 39       	ld.w	r9,r8[0xc]
8002357e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023582:	b9 68       	lsl	r8,0x18
80023584:	10 9a       	mov	r10,r8
80023586:	e6 1a 07 00 	andh	r10,0x700,COH
8002358a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002358e:	b1 68       	lsl	r8,0x10
80023590:	e6 18 00 7f 	andh	r8,0x7f,COH
80023594:	f5 e8 10 08 	or	r8,r10,r8
80023598:	10 49       	or	r9,r8
8002359a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002359e:	91 39       	st.w	r8[0xc],r9
800235a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235a4:	70 19       	ld.w	r9,r8[0x4]
800235a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235aa:	11 98       	ld.ub	r8,r8[0x1]
800235ac:	b9 68       	lsl	r8,0x18
800235ae:	e6 18 03 00 	andh	r8,0x300,COH
800235b2:	10 49       	or	r9,r8
800235b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235b8:	91 19       	st.w	r8[0x4],r9
800235ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235be:	70 19       	ld.w	r9,r8[0x4]
800235c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235c4:	11 88       	ld.ub	r8,r8[0x0]
800235c6:	a9 68       	lsl	r8,0x8
800235c8:	e2 18 01 00 	andl	r8,0x100,COH
800235cc:	10 49       	or	r9,r8
800235ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235d2:	91 19       	st.w	r8[0x4],r9
800235d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235d8:	70 19       	ld.w	r9,r8[0x4]
800235da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235de:	11 f8       	ld.ub	r8,r8[0x7]
800235e0:	a1 78       	lsl	r8,0x1
800235e2:	e2 18 00 02 	andl	r8,0x2,COH
800235e6:	10 49       	or	r9,r8
800235e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235ec:	91 19       	st.w	r8[0x4],r9
800235ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800235f2:	70 19       	ld.w	r9,r8[0x4]
800235f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235f8:	11 e8       	ld.ub	r8,r8[0x6]
800235fa:	10 49       	or	r9,r8
800235fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023600:	91 19       	st.w	r8[0x4],r9
80023602:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023606:	70 08       	ld.w	r8,r8[0x0]
80023608:	10 99       	mov	r9,r8
8002360a:	a1 a9       	sbr	r9,0x0
8002360c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023610:	91 09       	st.w	r8[0x0],r9
80023612:	30 18       	mov	r8,1
80023614:	10 9c       	mov	r12,r8
80023616:	2f bd       	sub	sp,-20
80023618:	e3 cd 80 80 	ldm	sp++,r7,pc

8002361c <dacifb_configure_channel>:
8002361c:	eb cd 40 80 	pushm	r7,lr
80023620:	1a 97       	mov	r7,sp
80023622:	20 7d       	sub	sp,28
80023624:	ef 4c ff f0 	st.w	r7[-16],r12
80023628:	16 98       	mov	r8,r11
8002362a:	ef 4a ff e8 	st.w	r7[-24],r10
8002362e:	ef 49 ff e4 	st.w	r7[-28],r9
80023632:	ef 68 ff ec 	st.b	r7[-20],r8
80023636:	30 08       	mov	r8,0
80023638:	ef 48 ff f4 	st.w	r7[-12],r8
8002363c:	30 08       	mov	r8,0
8002363e:	ef 48 ff f8 	st.w	r7[-8],r8
80023642:	30 08       	mov	r8,0
80023644:	ef 48 ff fc 	st.w	r7[-4],r8
80023648:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002364c:	11 88       	ld.ub	r8,r8[0x0]
8002364e:	58 08       	cp.w	r8,0
80023650:	c2 40       	breq	80023698 <dacifb_configure_channel+0x7c>
80023652:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023656:	58 28       	cp.w	r8,2
80023658:	c0 e0       	breq	80023674 <dacifb_configure_channel+0x58>
8002365a:	58 38       	cp.w	r8,3
8002365c:	c1 50       	breq	80023686 <dacifb_configure_channel+0x6a>
8002365e:	58 18       	cp.w	r8,1
80023660:	c1 c1       	brne	80023698 <dacifb_configure_channel+0x7c>
80023662:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023666:	70 08       	ld.w	r8,r8[0x0]
80023668:	10 99       	mov	r9,r8
8002366a:	bb a9       	sbr	r9,0x1a
8002366c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023670:	91 09       	st.w	r8[0x0],r9
80023672:	c1 38       	rjmp	80023698 <dacifb_configure_channel+0x7c>
80023674:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023678:	70 08       	ld.w	r8,r8[0x0]
8002367a:	10 99       	mov	r9,r8
8002367c:	bb b9       	sbr	r9,0x1b
8002367e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023682:	91 09       	st.w	r8[0x0],r9
80023684:	c0 a8       	rjmp	80023698 <dacifb_configure_channel+0x7c>
80023686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002368a:	70 08       	ld.w	r8,r8[0x0]
8002368c:	10 99       	mov	r9,r8
8002368e:	ea 19 0c 00 	orh	r9,0xc00
80023692:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023696:	91 09       	st.w	r8[0x0],r9
80023698:	ee f9 ff e4 	ld.w	r9,r7[-28]
8002369c:	e0 68 17 59 	mov	r8,5977
800236a0:	ea 18 d1 b7 	orh	r8,0xd1b7
800236a4:	f2 08 06 48 	mulu.d	r8,r9,r8
800236a8:	f2 08 16 0f 	lsr	r8,r9,0xf
800236ac:	f0 08 12 00 	clz	r8,r8
800236b0:	f0 08 11 1f 	rsub	r8,r8,31
800236b4:	ef 48 ff f4 	st.w	r7[-12],r8
800236b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800236bc:	58 08       	cp.w	r8,0
800236be:	c0 60       	breq	800236ca <dacifb_configure_channel+0xae>
800236c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800236c4:	20 18       	sub	r8,1
800236c6:	ef 48 ff f4 	st.w	r7[-12],r8
800236ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800236ce:	59 08       	cp.w	r8,16
800236d0:	e0 8b 00 07 	brhi	800236de <dacifb_configure_channel+0xc2>
800236d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800236d8:	59 08       	cp.w	r8,16
800236da:	e0 88 00 05 	brls	800236e4 <dacifb_configure_channel+0xc8>
800236de:	30 08       	mov	r8,0
800236e0:	e0 8f 01 87 	bral	800239ee <dacifb_configure_channel+0x3d2>
800236e4:	ee f9 ff e4 	ld.w	r9,r7[-28]
800236e8:	e0 68 27 59 	mov	r8,10073
800236ec:	ea 18 fb a9 	orh	r8,0xfba9
800236f0:	f2 08 06 48 	mulu.d	r8,r9,r8
800236f4:	f2 08 16 0f 	lsr	r8,r9,0xf
800236f8:	f0 08 12 00 	clz	r8,r8
800236fc:	f0 08 11 1f 	rsub	r8,r8,31
80023700:	ef 48 ff f8 	st.w	r7[-8],r8
80023704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023708:	58 08       	cp.w	r8,0
8002370a:	c0 60       	breq	80023716 <dacifb_configure_channel+0xfa>
8002370c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023710:	20 18       	sub	r8,1
80023712:	ef 48 ff f8 	st.w	r7[-8],r8
80023716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002371a:	59 08       	cp.w	r8,16
8002371c:	e0 8b 00 07 	brhi	8002372a <dacifb_configure_channel+0x10e>
80023720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023724:	59 08       	cp.w	r8,16
80023726:	e0 88 00 04 	brls	8002372e <dacifb_configure_channel+0x112>
8002372a:	30 08       	mov	r8,0
8002372c:	c6 19       	rjmp	800239ee <dacifb_configure_channel+0x3d2>
8002372e:	30 08       	mov	r8,0
80023730:	ef 48 ff fc 	st.w	r7[-4],r8
80023734:	c0 68       	rjmp	80023740 <dacifb_configure_channel+0x124>
80023736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002373a:	2f f8       	sub	r8,-1
8002373c:	ef 48 ff fc 	st.w	r7[-4],r8
80023740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023744:	f0 09 15 01 	lsl	r9,r8,0x1
80023748:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002374c:	10 39       	cp.w	r9,r8
8002374e:	cf 43       	brcs	80023736 <dacifb_configure_channel+0x11a>
80023750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023754:	f0 09 15 01 	lsl	r9,r8,0x1
80023758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002375c:	10 39       	cp.w	r9,r8
8002375e:	e0 88 00 04 	brls	80023766 <dacifb_configure_channel+0x14a>
80023762:	30 08       	mov	r8,0
80023764:	c4 59       	rjmp	800239ee <dacifb_configure_channel+0x3d2>
80023766:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002376a:	58 28       	cp.w	r8,2
8002376c:	c1 10       	breq	8002378e <dacifb_configure_channel+0x172>
8002376e:	58 38       	cp.w	r8,3
80023770:	c1 c0       	breq	800237a8 <dacifb_configure_channel+0x18c>
80023772:	58 18       	cp.w	r8,1
80023774:	c2 c1       	brne	800237cc <dacifb_configure_channel+0x1b0>
80023776:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002377a:	70 39       	ld.w	r9,r8[0xc]
8002377c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023780:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80023784:	10 49       	or	r9,r8
80023786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002378a:	91 39       	st.w	r8[0xc],r9
8002378c:	c2 08       	rjmp	800237cc <dacifb_configure_channel+0x1b0>
8002378e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023792:	70 39       	ld.w	r9,r8[0xc]
80023794:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023798:	a9 68       	lsl	r8,0x8
8002379a:	e2 18 0f 00 	andl	r8,0xf00,COH
8002379e:	10 49       	or	r9,r8
800237a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237a4:	91 39       	st.w	r8[0xc],r9
800237a6:	c1 38       	rjmp	800237cc <dacifb_configure_channel+0x1b0>
800237a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237ac:	70 39       	ld.w	r9,r8[0xc]
800237ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237b2:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
800237b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237ba:	a9 68       	lsl	r8,0x8
800237bc:	e2 18 0f 00 	andl	r8,0xf00,COH
800237c0:	f5 e8 10 08 	or	r8,r10,r8
800237c4:	10 49       	or	r9,r8
800237c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237ca:	91 39       	st.w	r8[0xc],r9
800237cc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800237d0:	58 28       	cp.w	r8,2
800237d2:	c3 30       	breq	80023838 <dacifb_configure_channel+0x21c>
800237d4:	58 38       	cp.w	r8,3
800237d6:	c5 e0       	breq	80023892 <dacifb_configure_channel+0x276>
800237d8:	58 18       	cp.w	r8,1
800237da:	e0 81 00 8f 	brne	800238f8 <dacifb_configure_channel+0x2dc>
800237de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800237e2:	11 98       	ld.ub	r8,r8[0x1]
800237e4:	58 08       	cp.w	r8,0
800237e6:	c0 90       	breq	800237f8 <dacifb_configure_channel+0x1dc>
800237e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237ec:	70 18       	ld.w	r8,r8[0x4]
800237ee:	10 99       	mov	r9,r8
800237f0:	b1 a9       	sbr	r9,0x10
800237f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800237f6:	91 19       	st.w	r8[0x4],r9
800237f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800237fc:	11 99       	ld.ub	r9,r8[0x1]
800237fe:	30 28       	mov	r8,2
80023800:	f0 09 18 00 	cp.b	r9,r8
80023804:	c0 a1       	brne	80023818 <dacifb_configure_channel+0x1fc>
80023806:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002380a:	70 28       	ld.w	r8,r8[0x8]
8002380c:	10 99       	mov	r9,r8
8002380e:	a1 a9       	sbr	r9,0x0
80023810:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023814:	91 29       	st.w	r8[0x8],r9
80023816:	c7 18       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
80023818:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002381c:	11 99       	ld.ub	r9,r8[0x1]
8002381e:	30 18       	mov	r8,1
80023820:	f0 09 18 00 	cp.b	r9,r8
80023824:	c6 71       	brne	800238f2 <dacifb_configure_channel+0x2d6>
80023826:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002382a:	70 08       	ld.w	r8,r8[0x0]
8002382c:	10 99       	mov	r9,r8
8002382e:	b9 a9       	sbr	r9,0x18
80023830:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023834:	91 09       	st.w	r8[0x0],r9
80023836:	c6 18       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
80023838:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002383c:	11 98       	ld.ub	r8,r8[0x1]
8002383e:	58 08       	cp.w	r8,0
80023840:	c0 90       	breq	80023852 <dacifb_configure_channel+0x236>
80023842:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023846:	70 18       	ld.w	r8,r8[0x4]
80023848:	10 99       	mov	r9,r8
8002384a:	b1 b9       	sbr	r9,0x11
8002384c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023850:	91 19       	st.w	r8[0x4],r9
80023852:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023856:	11 99       	ld.ub	r9,r8[0x1]
80023858:	30 28       	mov	r8,2
8002385a:	f0 09 18 00 	cp.b	r9,r8
8002385e:	c0 a1       	brne	80023872 <dacifb_configure_channel+0x256>
80023860:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023864:	70 28       	ld.w	r8,r8[0x8]
80023866:	10 99       	mov	r9,r8
80023868:	a9 a9       	sbr	r9,0x8
8002386a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002386e:	91 29       	st.w	r8[0x8],r9
80023870:	c4 48       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
80023872:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023876:	11 99       	ld.ub	r9,r8[0x1]
80023878:	30 18       	mov	r8,1
8002387a:	f0 09 18 00 	cp.b	r9,r8
8002387e:	c3 c1       	brne	800238f6 <dacifb_configure_channel+0x2da>
80023880:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023884:	70 08       	ld.w	r8,r8[0x0]
80023886:	10 99       	mov	r9,r8
80023888:	b9 b9       	sbr	r9,0x19
8002388a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002388e:	91 09       	st.w	r8[0x0],r9
80023890:	c3 48       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
80023892:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023896:	11 98       	ld.ub	r8,r8[0x1]
80023898:	58 08       	cp.w	r8,0
8002389a:	c0 a0       	breq	800238ae <dacifb_configure_channel+0x292>
8002389c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238a0:	70 18       	ld.w	r8,r8[0x4]
800238a2:	10 99       	mov	r9,r8
800238a4:	ea 19 00 03 	orh	r9,0x3
800238a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238ac:	91 19       	st.w	r8[0x4],r9
800238ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
800238b2:	11 99       	ld.ub	r9,r8[0x1]
800238b4:	30 28       	mov	r8,2
800238b6:	f0 09 18 00 	cp.b	r9,r8
800238ba:	c0 b1       	brne	800238d0 <dacifb_configure_channel+0x2b4>
800238bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238c0:	70 28       	ld.w	r8,r8[0x8]
800238c2:	10 99       	mov	r9,r8
800238c4:	e8 19 01 01 	orl	r9,0x101
800238c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238cc:	91 29       	st.w	r8[0x8],r9
800238ce:	c1 58       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
800238d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800238d4:	11 99       	ld.ub	r9,r8[0x1]
800238d6:	30 18       	mov	r8,1
800238d8:	f0 09 18 00 	cp.b	r9,r8
800238dc:	c0 e1       	brne	800238f8 <dacifb_configure_channel+0x2dc>
800238de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238e2:	70 08       	ld.w	r8,r8[0x0]
800238e4:	10 99       	mov	r9,r8
800238e6:	ea 19 03 00 	orh	r9,0x300
800238ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800238ee:	91 09       	st.w	r8[0x0],r9
800238f0:	c0 48       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
800238f2:	d7 03       	nop
800238f4:	c0 28       	rjmp	800238f8 <dacifb_configure_channel+0x2dc>
800238f6:	d7 03       	nop
800238f8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800238fc:	58 28       	cp.w	r8,2
800238fe:	c2 20       	breq	80023942 <dacifb_configure_channel+0x326>
80023900:	58 38       	cp.w	r8,3
80023902:	c3 d0       	breq	8002397c <dacifb_configure_channel+0x360>
80023904:	58 18       	cp.w	r8,1
80023906:	c7 31       	brne	800239ec <dacifb_configure_channel+0x3d0>
80023908:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002390c:	70 99       	ld.w	r9,r8[0x24]
8002390e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023912:	11 a8       	ld.ub	r8,r8[0x2]
80023914:	ab 78       	lsl	r8,0xb
80023916:	10 9a       	mov	r10,r8
80023918:	e2 1a 08 00 	andl	r10,0x800,COH
8002391c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023920:	11 b8       	ld.ub	r8,r8[0x3]
80023922:	a9 68       	lsl	r8,0x8
80023924:	e2 18 07 00 	andl	r8,0x700,COH
80023928:	10 4a       	or	r10,r8
8002392a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002392e:	11 c8       	ld.ub	r8,r8[0x4]
80023930:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023934:	f5 e8 10 08 	or	r8,r10,r8
80023938:	10 49       	or	r9,r8
8002393a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002393e:	91 99       	st.w	r8[0x24],r9
80023940:	c5 68       	rjmp	800239ec <dacifb_configure_channel+0x3d0>
80023942:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023946:	70 a9       	ld.w	r9,r8[0x28]
80023948:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002394c:	11 a8       	ld.ub	r8,r8[0x2]
8002394e:	ab 78       	lsl	r8,0xb
80023950:	10 9a       	mov	r10,r8
80023952:	e2 1a 08 00 	andl	r10,0x800,COH
80023956:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002395a:	11 b8       	ld.ub	r8,r8[0x3]
8002395c:	a9 68       	lsl	r8,0x8
8002395e:	e2 18 07 00 	andl	r8,0x700,COH
80023962:	10 4a       	or	r10,r8
80023964:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023968:	11 c8       	ld.ub	r8,r8[0x4]
8002396a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002396e:	f5 e8 10 08 	or	r8,r10,r8
80023972:	10 49       	or	r9,r8
80023974:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023978:	91 a9       	st.w	r8[0x28],r9
8002397a:	c3 98       	rjmp	800239ec <dacifb_configure_channel+0x3d0>
8002397c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023980:	70 99       	ld.w	r9,r8[0x24]
80023982:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023986:	11 a8       	ld.ub	r8,r8[0x2]
80023988:	ab 78       	lsl	r8,0xb
8002398a:	10 9a       	mov	r10,r8
8002398c:	e2 1a 08 00 	andl	r10,0x800,COH
80023990:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023994:	11 b8       	ld.ub	r8,r8[0x3]
80023996:	a9 68       	lsl	r8,0x8
80023998:	e2 18 07 00 	andl	r8,0x700,COH
8002399c:	10 4a       	or	r10,r8
8002399e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800239a2:	11 c8       	ld.ub	r8,r8[0x4]
800239a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800239a8:	f5 e8 10 08 	or	r8,r10,r8
800239ac:	10 49       	or	r9,r8
800239ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800239b2:	91 99       	st.w	r8[0x24],r9
800239b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800239b8:	70 a9       	ld.w	r9,r8[0x28]
800239ba:	ee f8 ff e8 	ld.w	r8,r7[-24]
800239be:	11 a8       	ld.ub	r8,r8[0x2]
800239c0:	ab 78       	lsl	r8,0xb
800239c2:	10 9a       	mov	r10,r8
800239c4:	e2 1a 08 00 	andl	r10,0x800,COH
800239c8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800239cc:	11 b8       	ld.ub	r8,r8[0x3]
800239ce:	a9 68       	lsl	r8,0x8
800239d0:	e2 18 07 00 	andl	r8,0x700,COH
800239d4:	10 4a       	or	r10,r8
800239d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800239da:	11 c8       	ld.ub	r8,r8[0x4]
800239dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800239e0:	f5 e8 10 08 	or	r8,r10,r8
800239e4:	10 49       	or	r9,r8
800239e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800239ea:	91 a9       	st.w	r8[0x28],r9
800239ec:	30 18       	mov	r8,1
800239ee:	10 9c       	mov	r12,r8
800239f0:	2f 9d       	sub	sp,-28
800239f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800239f6 <dacifb_start_channel>:
800239f6:	eb cd 40 c0 	pushm	r6-r7,lr
800239fa:	1a 97       	mov	r7,sp
800239fc:	20 3d       	sub	sp,12
800239fe:	49 b6       	lddpc	r6,80023a68 <dacifb_start_channel+0x72>
80023a00:	1e 26       	rsub	r6,pc
80023a02:	ef 4c ff fc 	st.w	r7[-4],r12
80023a06:	16 98       	mov	r8,r11
80023a08:	ef 4a ff f4 	st.w	r7[-12],r10
80023a0c:	ef 68 ff f8 	st.b	r7[-8],r8
80023a10:	ee fb ff f4 	ld.w	r11,r7[-12]
80023a14:	30 2c       	mov	r12,2
80023a16:	fe b0 fc 63 	rcall	800232dc <dacifb_us_delay>
80023a1a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023a1e:	58 28       	cp.w	r8,2
80023a20:	c0 e0       	breq	80023a3c <dacifb_start_channel+0x46>
80023a22:	58 38       	cp.w	r8,3
80023a24:	c1 50       	breq	80023a4e <dacifb_start_channel+0x58>
80023a26:	58 18       	cp.w	r8,1
80023a28:	c1 c1       	brne	80023a60 <dacifb_start_channel+0x6a>
80023a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a2e:	70 08       	ld.w	r8,r8[0x0]
80023a30:	10 99       	mov	r9,r8
80023a32:	b1 a9       	sbr	r9,0x10
80023a34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a38:	91 09       	st.w	r8[0x0],r9
80023a3a:	c1 38       	rjmp	80023a60 <dacifb_start_channel+0x6a>
80023a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a40:	70 08       	ld.w	r8,r8[0x0]
80023a42:	10 99       	mov	r9,r8
80023a44:	b1 b9       	sbr	r9,0x11
80023a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a4a:	91 09       	st.w	r8[0x0],r9
80023a4c:	c0 a8       	rjmp	80023a60 <dacifb_start_channel+0x6a>
80023a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a52:	70 08       	ld.w	r8,r8[0x0]
80023a54:	10 99       	mov	r9,r8
80023a56:	ea 19 00 03 	orh	r9,0x3
80023a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a5e:	91 09       	st.w	r8[0x0],r9
80023a60:	2f dd       	sub	sp,-12
80023a62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023a66:	00 00       	add	r0,r0
80023a68:	80 02       	ld.sh	r2,r0[0x0]
80023a6a:	38 84       	mov	r4,-120

80023a6c <dacifb_check_eoc>:
80023a6c:	eb cd 40 80 	pushm	r7,lr
80023a70:	1a 97       	mov	r7,sp
80023a72:	20 2d       	sub	sp,8
80023a74:	ef 4c ff fc 	st.w	r7[-4],r12
80023a78:	16 98       	mov	r8,r11
80023a7a:	ef 68 ff f8 	st.b	r7[-8],r8
80023a7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023a82:	70 78       	ld.w	r8,r8[0x1c]
80023a84:	30 18       	mov	r8,1
80023a86:	10 9c       	mov	r12,r8
80023a88:	2f ed       	sub	sp,-8
80023a8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a8e <dacifb_set_value>:
80023a8e:	eb cd 40 80 	pushm	r7,lr
80023a92:	1a 97       	mov	r7,sp
80023a94:	20 4d       	sub	sp,16
80023a96:	ef 4c ff fc 	st.w	r7[-4],r12
80023a9a:	14 98       	mov	r8,r10
80023a9c:	ef 49 ff f0 	st.w	r7[-16],r9
80023aa0:	16 99       	mov	r9,r11
80023aa2:	ef 69 ff f8 	st.b	r7[-8],r9
80023aa6:	ef 68 ff f4 	st.b	r7[-12],r8
80023aaa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023aae:	58 28       	cp.w	r8,2
80023ab0:	c0 b0       	breq	80023ac6 <dacifb_set_value+0x38>
80023ab2:	58 38       	cp.w	r8,3
80023ab4:	c0 f0       	breq	80023ad2 <dacifb_set_value+0x44>
80023ab6:	58 18       	cp.w	r8,1
80023ab8:	c2 01       	brne	80023af8 <dacifb_set_value+0x6a>
80023aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023abe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023ac2:	91 b9       	st.w	r8[0x2c],r9
80023ac4:	c1 a8       	rjmp	80023af8 <dacifb_set_value+0x6a>
80023ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023aca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023ace:	91 c9       	st.w	r8[0x30],r9
80023ad0:	c1 48       	rjmp	80023af8 <dacifb_set_value+0x6a>
80023ad2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023ad6:	30 08       	mov	r8,0
80023ad8:	f0 09 18 00 	cp.b	r9,r8
80023adc:	c0 70       	breq	80023aea <dacifb_set_value+0x5c>
80023ade:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ae2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023ae6:	91 b9       	st.w	r8[0x2c],r9
80023ae8:	c0 88       	rjmp	80023af8 <dacifb_set_value+0x6a>
80023aea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023aee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80023af2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023af6:	91 b9       	st.w	r8[0x2c],r9
80023af8:	2f cd       	sub	sp,-16
80023afa:	e3 cd 80 80 	ldm	sp++,r7,pc

80023afe <dacifb_reload_timer>:
80023afe:	eb cd 40 80 	pushm	r7,lr
80023b02:	1a 97       	mov	r7,sp
80023b04:	20 5d       	sub	sp,20
80023b06:	ef 4c ff f8 	st.w	r7[-8],r12
80023b0a:	14 98       	mov	r8,r10
80023b0c:	ef 49 ff ec 	st.w	r7[-20],r9
80023b10:	16 99       	mov	r9,r11
80023b12:	ef 69 ff f4 	st.b	r7[-12],r9
80023b16:	ef 68 ff f0 	st.b	r7[-16],r8
80023b1a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80023b1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023b22:	b1 39       	mul	r9,r8
80023b24:	e0 68 de 83 	mov	r8,56963
80023b28:	ea 18 43 1b 	orh	r8,0x431b
80023b2c:	f2 08 06 48 	mulu.d	r8,r9,r8
80023b30:	f2 08 16 12 	lsr	r8,r9,0x12
80023b34:	ef 48 ff fc 	st.w	r7[-4],r8
80023b38:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023b3c:	58 28       	cp.w	r8,2
80023b3e:	c0 f0       	breq	80023b5c <dacifb_reload_timer+0x5e>
80023b40:	58 38       	cp.w	r8,3
80023b42:	c1 70       	breq	80023b70 <dacifb_reload_timer+0x72>
80023b44:	58 18       	cp.w	r8,1
80023b46:	c2 71       	brne	80023b94 <dacifb_reload_timer+0x96>
80023b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b4c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b50:	10 99       	mov	r9,r8
80023b52:	bf b9       	sbr	r9,0x1f
80023b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b58:	91 e9       	st.w	r8[0x38],r9
80023b5a:	c1 d8       	rjmp	80023b94 <dacifb_reload_timer+0x96>
80023b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b60:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b64:	10 99       	mov	r9,r8
80023b66:	bf b9       	sbr	r9,0x1f
80023b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b6c:	91 f9       	st.w	r8[0x3c],r9
80023b6e:	c1 38       	rjmp	80023b94 <dacifb_reload_timer+0x96>
80023b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b74:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b78:	10 99       	mov	r9,r8
80023b7a:	bf b9       	sbr	r9,0x1f
80023b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b80:	91 e9       	st.w	r8[0x38],r9
80023b82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b86:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b8a:	10 99       	mov	r9,r8
80023b8c:	bf b9       	sbr	r9,0x1f
80023b8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b92:	91 f9       	st.w	r8[0x3c],r9
80023b94:	2f bd       	sub	sp,-20
80023b96:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80023b9c <cpu_irq_save>:
80023b9c:	eb cd 40 80 	pushm	r7,lr
80023ba0:	1a 97       	mov	r7,sp
80023ba2:	20 1d       	sub	sp,4
80023ba4:	e1 b8 00 00 	mfsr	r8,0x0
80023ba8:	ef 48 ff fc 	st.w	r7[-4],r8
80023bac:	d3 03       	ssrf	0x10
80023bae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bb2:	10 9c       	mov	r12,r8
80023bb4:	2f fd       	sub	sp,-4
80023bb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023bba <cpu_irq_restore>:
80023bba:	eb cd 40 80 	pushm	r7,lr
80023bbe:	1a 97       	mov	r7,sp
80023bc0:	20 1d       	sub	sp,4
80023bc2:	ef 4c ff fc 	st.w	r7[-4],r12
80023bc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bca:	e3 b8 00 00 	mtsr	0x0,r8
80023bce:	2f fd       	sub	sp,-4
80023bd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023bd4 <eic_init>:
80023bd4:	eb cd 40 80 	pushm	r7,lr
80023bd8:	1a 97       	mov	r7,sp
80023bda:	20 4d       	sub	sp,16
80023bdc:	ef 4c ff f8 	st.w	r7[-8],r12
80023be0:	ef 4b ff f4 	st.w	r7[-12],r11
80023be4:	ef 4a ff f0 	st.w	r7[-16],r10
80023be8:	30 08       	mov	r8,0
80023bea:	ef 48 ff fc 	st.w	r7[-4],r8
80023bee:	c2 89       	rjmp	80023e3e <eic_init+0x26a>
80023bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023bf4:	12 98       	mov	r8,r9
80023bf6:	a1 78       	lsl	r8,0x1
80023bf8:	12 08       	add	r8,r9
80023bfa:	a1 78       	lsl	r8,0x1
80023bfc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023c00:	f2 08 00 08 	add	r8,r9,r8
80023c04:	11 99       	ld.ub	r9,r8[0x1]
80023c06:	30 18       	mov	r8,1
80023c08:	f0 09 18 00 	cp.b	r9,r8
80023c0c:	c1 51       	brne	80023c36 <eic_init+0x62>
80023c0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c12:	70 5a       	ld.w	r10,r8[0x14]
80023c14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023c18:	12 98       	mov	r8,r9
80023c1a:	a1 78       	lsl	r8,0x1
80023c1c:	12 08       	add	r8,r9
80023c1e:	a1 78       	lsl	r8,0x1
80023c20:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023c24:	f2 08 00 08 	add	r8,r9,r8
80023c28:	11 88       	ld.ub	r8,r8[0x0]
80023c2a:	30 19       	mov	r9,1
80023c2c:	f2 08 09 48 	lsl	r8,r9,r8
80023c30:	f5 e8 10 08 	or	r8,r10,r8
80023c34:	c1 58       	rjmp	80023c5e <eic_init+0x8a>
80023c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c3a:	70 5a       	ld.w	r10,r8[0x14]
80023c3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023c40:	12 98       	mov	r8,r9
80023c42:	a1 78       	lsl	r8,0x1
80023c44:	12 08       	add	r8,r9
80023c46:	a1 78       	lsl	r8,0x1
80023c48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023c4c:	f2 08 00 08 	add	r8,r9,r8
80023c50:	11 88       	ld.ub	r8,r8[0x0]
80023c52:	30 19       	mov	r9,1
80023c54:	f2 08 09 48 	lsl	r8,r9,r8
80023c58:	5c d8       	com	r8
80023c5a:	f5 e8 00 08 	and	r8,r10,r8
80023c5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c62:	93 58       	st.w	r9[0x14],r8
80023c64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023c68:	12 98       	mov	r8,r9
80023c6a:	a1 78       	lsl	r8,0x1
80023c6c:	12 08       	add	r8,r9
80023c6e:	a1 78       	lsl	r8,0x1
80023c70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023c74:	f2 08 00 08 	add	r8,r9,r8
80023c78:	11 a9       	ld.ub	r9,r8[0x2]
80023c7a:	30 18       	mov	r8,1
80023c7c:	f0 09 18 00 	cp.b	r9,r8
80023c80:	c1 51       	brne	80023caa <eic_init+0xd6>
80023c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c86:	70 6a       	ld.w	r10,r8[0x18]
80023c88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023c8c:	12 98       	mov	r8,r9
80023c8e:	a1 78       	lsl	r8,0x1
80023c90:	12 08       	add	r8,r9
80023c92:	a1 78       	lsl	r8,0x1
80023c94:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023c98:	f2 08 00 08 	add	r8,r9,r8
80023c9c:	11 88       	ld.ub	r8,r8[0x0]
80023c9e:	30 19       	mov	r9,1
80023ca0:	f2 08 09 48 	lsl	r8,r9,r8
80023ca4:	f5 e8 10 08 	or	r8,r10,r8
80023ca8:	c1 58       	rjmp	80023cd2 <eic_init+0xfe>
80023caa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023cae:	70 6a       	ld.w	r10,r8[0x18]
80023cb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023cb4:	12 98       	mov	r8,r9
80023cb6:	a1 78       	lsl	r8,0x1
80023cb8:	12 08       	add	r8,r9
80023cba:	a1 78       	lsl	r8,0x1
80023cbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023cc0:	f2 08 00 08 	add	r8,r9,r8
80023cc4:	11 88       	ld.ub	r8,r8[0x0]
80023cc6:	30 19       	mov	r9,1
80023cc8:	f2 08 09 48 	lsl	r8,r9,r8
80023ccc:	5c d8       	com	r8
80023cce:	f5 e8 00 08 	and	r8,r10,r8
80023cd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023cd6:	93 68       	st.w	r9[0x18],r8
80023cd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023cdc:	12 98       	mov	r8,r9
80023cde:	a1 78       	lsl	r8,0x1
80023ce0:	12 08       	add	r8,r9
80023ce2:	a1 78       	lsl	r8,0x1
80023ce4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023ce8:	f2 08 00 08 	add	r8,r9,r8
80023cec:	11 b9       	ld.ub	r9,r8[0x3]
80023cee:	30 18       	mov	r8,1
80023cf0:	f0 09 18 00 	cp.b	r9,r8
80023cf4:	c1 51       	brne	80023d1e <eic_init+0x14a>
80023cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023cfa:	70 7a       	ld.w	r10,r8[0x1c]
80023cfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023d00:	12 98       	mov	r8,r9
80023d02:	a1 78       	lsl	r8,0x1
80023d04:	12 08       	add	r8,r9
80023d06:	a1 78       	lsl	r8,0x1
80023d08:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023d0c:	f2 08 00 08 	add	r8,r9,r8
80023d10:	11 88       	ld.ub	r8,r8[0x0]
80023d12:	30 19       	mov	r9,1
80023d14:	f2 08 09 48 	lsl	r8,r9,r8
80023d18:	f5 e8 10 08 	or	r8,r10,r8
80023d1c:	c1 58       	rjmp	80023d46 <eic_init+0x172>
80023d1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023d22:	70 7a       	ld.w	r10,r8[0x1c]
80023d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023d28:	12 98       	mov	r8,r9
80023d2a:	a1 78       	lsl	r8,0x1
80023d2c:	12 08       	add	r8,r9
80023d2e:	a1 78       	lsl	r8,0x1
80023d30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023d34:	f2 08 00 08 	add	r8,r9,r8
80023d38:	11 88       	ld.ub	r8,r8[0x0]
80023d3a:	30 19       	mov	r9,1
80023d3c:	f2 08 09 48 	lsl	r8,r9,r8
80023d40:	5c d8       	com	r8
80023d42:	f5 e8 00 08 	and	r8,r10,r8
80023d46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023d4a:	93 78       	st.w	r9[0x1c],r8
80023d4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023d50:	12 98       	mov	r8,r9
80023d52:	a1 78       	lsl	r8,0x1
80023d54:	12 08       	add	r8,r9
80023d56:	a1 78       	lsl	r8,0x1
80023d58:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023d5c:	f2 08 00 08 	add	r8,r9,r8
80023d60:	11 c9       	ld.ub	r9,r8[0x4]
80023d62:	30 18       	mov	r8,1
80023d64:	f0 09 18 00 	cp.b	r9,r8
80023d68:	c1 51       	brne	80023d92 <eic_init+0x1be>
80023d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023d6e:	70 8a       	ld.w	r10,r8[0x20]
80023d70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023d74:	12 98       	mov	r8,r9
80023d76:	a1 78       	lsl	r8,0x1
80023d78:	12 08       	add	r8,r9
80023d7a:	a1 78       	lsl	r8,0x1
80023d7c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023d80:	f2 08 00 08 	add	r8,r9,r8
80023d84:	11 88       	ld.ub	r8,r8[0x0]
80023d86:	30 19       	mov	r9,1
80023d88:	f2 08 09 48 	lsl	r8,r9,r8
80023d8c:	f5 e8 10 08 	or	r8,r10,r8
80023d90:	c1 58       	rjmp	80023dba <eic_init+0x1e6>
80023d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023d96:	70 8a       	ld.w	r10,r8[0x20]
80023d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023d9c:	12 98       	mov	r8,r9
80023d9e:	a1 78       	lsl	r8,0x1
80023da0:	12 08       	add	r8,r9
80023da2:	a1 78       	lsl	r8,0x1
80023da4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023da8:	f2 08 00 08 	add	r8,r9,r8
80023dac:	11 88       	ld.ub	r8,r8[0x0]
80023dae:	30 19       	mov	r9,1
80023db0:	f2 08 09 48 	lsl	r8,r9,r8
80023db4:	5c d8       	com	r8
80023db6:	f5 e8 00 08 	and	r8,r10,r8
80023dba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023dbe:	93 88       	st.w	r9[0x20],r8
80023dc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023dc4:	12 98       	mov	r8,r9
80023dc6:	a1 78       	lsl	r8,0x1
80023dc8:	12 08       	add	r8,r9
80023dca:	a1 78       	lsl	r8,0x1
80023dcc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023dd0:	f2 08 00 08 	add	r8,r9,r8
80023dd4:	11 d9       	ld.ub	r9,r8[0x5]
80023dd6:	30 18       	mov	r8,1
80023dd8:	f0 09 18 00 	cp.b	r9,r8
80023ddc:	c1 51       	brne	80023e06 <eic_init+0x232>
80023dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023de2:	70 aa       	ld.w	r10,r8[0x28]
80023de4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023de8:	12 98       	mov	r8,r9
80023dea:	a1 78       	lsl	r8,0x1
80023dec:	12 08       	add	r8,r9
80023dee:	a1 78       	lsl	r8,0x1
80023df0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023df4:	f2 08 00 08 	add	r8,r9,r8
80023df8:	11 88       	ld.ub	r8,r8[0x0]
80023dfa:	30 19       	mov	r9,1
80023dfc:	f2 08 09 48 	lsl	r8,r9,r8
80023e00:	f5 e8 10 08 	or	r8,r10,r8
80023e04:	c1 58       	rjmp	80023e2e <eic_init+0x25a>
80023e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e0a:	70 aa       	ld.w	r10,r8[0x28]
80023e0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023e10:	12 98       	mov	r8,r9
80023e12:	a1 78       	lsl	r8,0x1
80023e14:	12 08       	add	r8,r9
80023e16:	a1 78       	lsl	r8,0x1
80023e18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023e1c:	f2 08 00 08 	add	r8,r9,r8
80023e20:	11 88       	ld.ub	r8,r8[0x0]
80023e22:	30 19       	mov	r9,1
80023e24:	f2 08 09 48 	lsl	r8,r9,r8
80023e28:	5c d8       	com	r8
80023e2a:	f5 e8 00 08 	and	r8,r10,r8
80023e2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e32:	93 a8       	st.w	r9[0x28],r8
80023e34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e38:	2f f8       	sub	r8,-1
80023e3a:	ef 48 ff fc 	st.w	r7[-4],r8
80023e3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023e42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e46:	10 39       	cp.w	r9,r8
80023e48:	fe 93 fe d4 	brlo	80023bf0 <eic_init+0x1c>
80023e4c:	2f cd       	sub	sp,-16
80023e4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023e52 <eic_enable_lines>:
80023e52:	eb cd 40 80 	pushm	r7,lr
80023e56:	1a 97       	mov	r7,sp
80023e58:	20 2d       	sub	sp,8
80023e5a:	ef 4c ff fc 	st.w	r7[-4],r12
80023e5e:	ef 4b ff f8 	st.w	r7[-8],r11
80023e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e6a:	91 c9       	st.w	r8[0x30],r9
80023e6c:	2f ed       	sub	sp,-8
80023e6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023e72 <eic_enable_line>:
80023e72:	eb cd 40 80 	pushm	r7,lr
80023e76:	1a 97       	mov	r7,sp
80023e78:	20 2d       	sub	sp,8
80023e7a:	ef 4c ff fc 	st.w	r7[-4],r12
80023e7e:	ef 4b ff f8 	st.w	r7[-8],r11
80023e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e86:	30 19       	mov	r9,1
80023e88:	f2 08 09 48 	lsl	r8,r9,r8
80023e8c:	10 99       	mov	r9,r8
80023e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e92:	91 c9       	st.w	r8[0x30],r9
80023e94:	2f ed       	sub	sp,-8
80023e96:	e3 cd 80 80 	ldm	sp++,r7,pc

80023e9a <eic_disable_lines>:
80023e9a:	eb cd 40 80 	pushm	r7,lr
80023e9e:	1a 97       	mov	r7,sp
80023ea0:	20 2d       	sub	sp,8
80023ea2:	ef 4c ff fc 	st.w	r7[-4],r12
80023ea6:	ef 4b ff f8 	st.w	r7[-8],r11
80023eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023eae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023eb2:	91 d9       	st.w	r8[0x34],r9
80023eb4:	2f ed       	sub	sp,-8
80023eb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023eba <eic_disable_line>:
80023eba:	eb cd 40 80 	pushm	r7,lr
80023ebe:	1a 97       	mov	r7,sp
80023ec0:	20 2d       	sub	sp,8
80023ec2:	ef 4c ff fc 	st.w	r7[-4],r12
80023ec6:	ef 4b ff f8 	st.w	r7[-8],r11
80023eca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023ece:	30 19       	mov	r9,1
80023ed0:	f2 08 09 48 	lsl	r8,r9,r8
80023ed4:	10 99       	mov	r9,r8
80023ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023eda:	91 d9       	st.w	r8[0x34],r9
80023edc:	2f ed       	sub	sp,-8
80023ede:	e3 cd 80 80 	ldm	sp++,r7,pc

80023ee2 <eic_is_line_enabled>:
80023ee2:	eb cd 40 80 	pushm	r7,lr
80023ee6:	1a 97       	mov	r7,sp
80023ee8:	20 2d       	sub	sp,8
80023eea:	ef 4c ff fc 	st.w	r7[-4],r12
80023eee:	ef 4b ff f8 	st.w	r7[-8],r11
80023ef2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ef6:	70 e9       	ld.w	r9,r8[0x38]
80023ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023efc:	30 1a       	mov	r10,1
80023efe:	f4 08 09 48 	lsl	r8,r10,r8
80023f02:	f3 e8 00 08 	and	r8,r9,r8
80023f06:	5f 18       	srne	r8
80023f08:	5c 58       	castu.b	r8
80023f0a:	10 9c       	mov	r12,r8
80023f0c:	2f ed       	sub	sp,-8
80023f0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023f12 <eic_enable_interrupt_lines>:
80023f12:	eb cd 40 80 	pushm	r7,lr
80023f16:	1a 97       	mov	r7,sp
80023f18:	20 2d       	sub	sp,8
80023f1a:	ef 4c ff fc 	st.w	r7[-4],r12
80023f1e:	ef 4b ff f8 	st.w	r7[-8],r11
80023f22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023f2a:	91 09       	st.w	r8[0x0],r9
80023f2c:	2f ed       	sub	sp,-8
80023f2e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023f32 <eic_enable_interrupt_line>:
80023f32:	eb cd 40 80 	pushm	r7,lr
80023f36:	1a 97       	mov	r7,sp
80023f38:	20 2d       	sub	sp,8
80023f3a:	ef 4c ff fc 	st.w	r7[-4],r12
80023f3e:	ef 4b ff f8 	st.w	r7[-8],r11
80023f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f46:	30 19       	mov	r9,1
80023f48:	f2 08 09 48 	lsl	r8,r9,r8
80023f4c:	10 99       	mov	r9,r8
80023f4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f52:	91 09       	st.w	r8[0x0],r9
80023f54:	2f ed       	sub	sp,-8
80023f56:	e3 cd 80 80 	ldm	sp++,r7,pc

80023f5a <eic_disable_interrupt_lines>:
80023f5a:	eb cd 40 c0 	pushm	r6-r7,lr
80023f5e:	1a 97       	mov	r7,sp
80023f60:	20 3d       	sub	sp,12
80023f62:	48 d6       	lddpc	r6,80023f94 <eic_disable_interrupt_lines+0x3a>
80023f64:	1e 26       	rsub	r6,pc
80023f66:	ef 4c ff f8 	st.w	r7[-8],r12
80023f6a:	ef 4b ff f4 	st.w	r7[-12],r11
80023f6e:	c1 7e       	rcall	80023b9c <cpu_irq_save>
80023f70:	18 98       	mov	r8,r12
80023f72:	ef 48 ff fc 	st.w	r7[-4],r8
80023f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023f7e:	91 19       	st.w	r8[0x4],r9
80023f80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f84:	70 28       	ld.w	r8,r8[0x8]
80023f86:	ee fc ff fc 	ld.w	r12,r7[-4]
80023f8a:	c1 8e       	rcall	80023bba <cpu_irq_restore>
80023f8c:	2f dd       	sub	sp,-12
80023f8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023f92:	00 00       	add	r0,r0
80023f94:	80 02       	ld.sh	r2,r0[0x0]
80023f96:	3d e8       	mov	r8,-34

80023f98 <eic_disable_interrupt_line>:
80023f98:	eb cd 40 c0 	pushm	r6-r7,lr
80023f9c:	1a 97       	mov	r7,sp
80023f9e:	20 3d       	sub	sp,12
80023fa0:	48 f6       	lddpc	r6,80023fdc <eic_disable_interrupt_line+0x44>
80023fa2:	1e 26       	rsub	r6,pc
80023fa4:	ef 4c ff f8 	st.w	r7[-8],r12
80023fa8:	ef 4b ff f4 	st.w	r7[-12],r11
80023fac:	fe b0 fd f8 	rcall	80023b9c <cpu_irq_save>
80023fb0:	18 98       	mov	r8,r12
80023fb2:	ef 48 ff fc 	st.w	r7[-4],r8
80023fb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023fba:	30 19       	mov	r9,1
80023fbc:	f2 08 09 48 	lsl	r8,r9,r8
80023fc0:	10 99       	mov	r9,r8
80023fc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023fc6:	91 19       	st.w	r8[0x4],r9
80023fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023fcc:	70 28       	ld.w	r8,r8[0x8]
80023fce:	ee fc ff fc 	ld.w	r12,r7[-4]
80023fd2:	fe b0 fd f4 	rcall	80023bba <cpu_irq_restore>
80023fd6:	2f dd       	sub	sp,-12
80023fd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023fdc:	80 02       	ld.sh	r2,r0[0x0]
80023fde:	3e 26       	mov	r6,-30

80023fe0 <eic_is_interrupt_line_enabled>:
80023fe0:	eb cd 40 80 	pushm	r7,lr
80023fe4:	1a 97       	mov	r7,sp
80023fe6:	20 2d       	sub	sp,8
80023fe8:	ef 4c ff fc 	st.w	r7[-4],r12
80023fec:	ef 4b ff f8 	st.w	r7[-8],r11
80023ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ff4:	70 29       	ld.w	r9,r8[0x8]
80023ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023ffa:	30 1a       	mov	r10,1
80023ffc:	f4 08 09 48 	lsl	r8,r10,r8
80024000:	f3 e8 00 08 	and	r8,r9,r8
80024004:	5f 18       	srne	r8
80024006:	5c 58       	castu.b	r8
80024008:	10 9c       	mov	r12,r8
8002400a:	2f ed       	sub	sp,-8
8002400c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024010 <eic_clear_interrupt_lines>:
80024010:	eb cd 40 c0 	pushm	r6-r7,lr
80024014:	1a 97       	mov	r7,sp
80024016:	20 3d       	sub	sp,12
80024018:	48 d6       	lddpc	r6,8002404c <eic_clear_interrupt_lines+0x3c>
8002401a:	1e 26       	rsub	r6,pc
8002401c:	ef 4c ff f8 	st.w	r7[-8],r12
80024020:	ef 4b ff f4 	st.w	r7[-12],r11
80024024:	fe b0 fd bc 	rcall	80023b9c <cpu_irq_save>
80024028:	18 98       	mov	r8,r12
8002402a:	ef 48 ff fc 	st.w	r7[-4],r8
8002402e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024032:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024036:	91 49       	st.w	r8[0x10],r9
80024038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002403c:	70 38       	ld.w	r8,r8[0xc]
8002403e:	ee fc ff fc 	ld.w	r12,r7[-4]
80024042:	fe b0 fd bc 	rcall	80023bba <cpu_irq_restore>
80024046:	2f dd       	sub	sp,-12
80024048:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002404c:	80 02       	ld.sh	r2,r0[0x0]
8002404e:	3e 9e       	mov	lr,-23

80024050 <eic_clear_interrupt_line>:
80024050:	eb cd 40 c0 	pushm	r6-r7,lr
80024054:	1a 97       	mov	r7,sp
80024056:	20 3d       	sub	sp,12
80024058:	48 f6       	lddpc	r6,80024094 <eic_clear_interrupt_line+0x44>
8002405a:	1e 26       	rsub	r6,pc
8002405c:	ef 4c ff f8 	st.w	r7[-8],r12
80024060:	ef 4b ff f4 	st.w	r7[-12],r11
80024064:	fe b0 fd 9c 	rcall	80023b9c <cpu_irq_save>
80024068:	18 98       	mov	r8,r12
8002406a:	ef 48 ff fc 	st.w	r7[-4],r8
8002406e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024072:	30 19       	mov	r9,1
80024074:	f2 08 09 48 	lsl	r8,r9,r8
80024078:	10 99       	mov	r9,r8
8002407a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002407e:	91 49       	st.w	r8[0x10],r9
80024080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024084:	70 38       	ld.w	r8,r8[0xc]
80024086:	ee fc ff fc 	ld.w	r12,r7[-4]
8002408a:	fe b0 fd 98 	rcall	80023bba <cpu_irq_restore>
8002408e:	2f dd       	sub	sp,-12
80024090:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024094:	80 02       	ld.sh	r2,r0[0x0]
80024096:	3e de       	mov	lr,-19

80024098 <eic_is_interrupt_line_pending>:
80024098:	eb cd 40 80 	pushm	r7,lr
8002409c:	1a 97       	mov	r7,sp
8002409e:	20 2d       	sub	sp,8
800240a0:	ef 4c ff fc 	st.w	r7[-4],r12
800240a4:	ef 4b ff f8 	st.w	r7[-8],r11
800240a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240ac:	70 39       	ld.w	r9,r8[0xc]
800240ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800240b2:	30 1a       	mov	r10,1
800240b4:	f4 08 09 48 	lsl	r8,r10,r8
800240b8:	f3 e8 00 08 	and	r8,r9,r8
800240bc:	5f 18       	srne	r8
800240be:	5c 58       	castu.b	r8
800240c0:	10 9c       	mov	r12,r8
800240c2:	2f ed       	sub	sp,-8
800240c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800240c8 <flashc_get_flash_size>:
800240c8:	eb cd 40 c0 	pushm	r6-r7,lr
800240cc:	1a 97       	mov	r7,sp
800240ce:	48 86       	lddpc	r6,800240ec <flashc_get_flash_size+0x24>
800240d0:	1e 26       	rsub	r6,pc
800240d2:	fe 68 00 00 	mov	r8,-131072
800240d6:	70 38       	ld.w	r8,r8[0xc]
800240d8:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800240dc:	ec f8 08 94 	ld.w	r8,r6[2196]
800240e0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800240e4:	10 9c       	mov	r12,r8
800240e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800240ea:	00 00       	add	r0,r0
800240ec:	80 02       	ld.sh	r2,r0[0x0]
800240ee:	3f 54       	mov	r4,-11

800240f0 <flashc_get_page_count>:
800240f0:	eb cd 40 c0 	pushm	r6-r7,lr
800240f4:	1a 97       	mov	r7,sp
800240f6:	48 56       	lddpc	r6,80024108 <flashc_get_page_count+0x18>
800240f8:	1e 26       	rsub	r6,pc
800240fa:	f0 16 00 c6 	mcall	r6[792]
800240fe:	18 98       	mov	r8,r12
80024100:	a9 98       	lsr	r8,0x9
80024102:	10 9c       	mov	r12,r8
80024104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024108:	80 02       	ld.sh	r2,r0[0x0]
8002410a:	3f 7c       	mov	r12,-9

8002410c <flashc_get_page_count_per_region>:
8002410c:	eb cd 40 c0 	pushm	r6-r7,lr
80024110:	1a 97       	mov	r7,sp
80024112:	48 56       	lddpc	r6,80024124 <flashc_get_page_count_per_region+0x18>
80024114:	1e 26       	rsub	r6,pc
80024116:	f0 16 01 04 	mcall	r6[1040]
8002411a:	18 98       	mov	r8,r12
8002411c:	a5 88       	lsr	r8,0x4
8002411e:	10 9c       	mov	r12,r8
80024120:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024124:	80 02       	ld.sh	r2,r0[0x0]
80024126:	3f 98       	mov	r8,-7

80024128 <flashc_get_page_region>:
80024128:	eb cd 40 e0 	pushm	r5-r7,lr
8002412c:	1a 97       	mov	r7,sp
8002412e:	20 1d       	sub	sp,4
80024130:	48 c6       	lddpc	r6,80024160 <flashc_get_page_region+0x38>
80024132:	1e 26       	rsub	r6,pc
80024134:	ef 4c ff fc 	st.w	r7[-4],r12
80024138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002413c:	58 08       	cp.w	r8,0
8002413e:	c0 45       	brlt	80024146 <flashc_get_page_region+0x1e>
80024140:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024144:	c0 58       	rjmp	8002414e <flashc_get_page_region+0x26>
80024146:	f0 16 01 88 	mcall	r6[1568]
8002414a:	18 98       	mov	r8,r12
8002414c:	10 95       	mov	r5,r8
8002414e:	f0 16 01 13 	mcall	r6[1100]
80024152:	18 98       	mov	r8,r12
80024154:	ea 08 0d 08 	divu	r8,r5,r8
80024158:	10 9c       	mov	r12,r8
8002415a:	2f fd       	sub	sp,-4
8002415c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024160:	80 02       	ld.sh	r2,r0[0x0]
80024162:	3f b6       	mov	r6,-5

80024164 <flashc_get_region_first_page_number>:
80024164:	eb cd 40 c0 	pushm	r6-r7,lr
80024168:	1a 97       	mov	r7,sp
8002416a:	20 1d       	sub	sp,4
8002416c:	48 86       	lddpc	r6,8002418c <flashc_get_region_first_page_number+0x28>
8002416e:	1e 26       	rsub	r6,pc
80024170:	ef 4c ff fc 	st.w	r7[-4],r12
80024174:	f0 16 01 13 	mcall	r6[1100]
80024178:	18 99       	mov	r9,r12
8002417a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002417e:	f2 08 02 48 	mul	r8,r9,r8
80024182:	10 9c       	mov	r12,r8
80024184:	2f fd       	sub	sp,-4
80024186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002418a:	00 00       	add	r0,r0
8002418c:	80 02       	ld.sh	r2,r0[0x0]
8002418e:	3f f2       	mov	r2,-1

80024190 <flashc_get_wait_state>:
80024190:	eb cd 40 80 	pushm	r7,lr
80024194:	1a 97       	mov	r7,sp
80024196:	fe 68 00 00 	mov	r8,-131072
8002419a:	70 08       	ld.w	r8,r8[0x0]
8002419c:	e2 18 00 40 	andl	r8,0x40,COH
800241a0:	a7 88       	lsr	r8,0x6
800241a2:	10 9c       	mov	r12,r8
800241a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800241a8 <flashc_set_wait_state>:
800241a8:	eb cd 40 80 	pushm	r7,lr
800241ac:	1a 97       	mov	r7,sp
800241ae:	20 2d       	sub	sp,8
800241b0:	ef 4c ff f8 	st.w	r7[-8],r12
800241b4:	fe 68 00 00 	mov	r8,-131072
800241b8:	70 08       	ld.w	r8,r8[0x0]
800241ba:	30 09       	mov	r9,0
800241bc:	ef 49 ff fc 	st.w	r7[-4],r9
800241c0:	ef 48 ff fc 	st.w	r7[-4],r8
800241c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800241c8:	5c 58       	castu.b	r8
800241ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800241ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800241d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241d6:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800241da:	ef 48 ff fc 	st.w	r7[-4],r8
800241de:	fe 68 00 00 	mov	r8,-131072
800241e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800241e6:	91 09       	st.w	r8[0x0],r9
800241e8:	2f ed       	sub	sp,-8
800241ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800241ee <flashc_set_bus_freq>:
800241ee:	eb cd 40 c0 	pushm	r6-r7,lr
800241f2:	1a 97       	mov	r7,sp
800241f4:	20 1d       	sub	sp,4
800241f6:	48 c6       	lddpc	r6,80024224 <flashc_set_bus_freq+0x36>
800241f8:	1e 26       	rsub	r6,pc
800241fa:	ef 4c ff fc 	st.w	r7[-4],r12
800241fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024202:	e0 69 8a 3f 	mov	r9,35391
80024206:	ea 19 01 f7 	orh	r9,0x1f7
8002420a:	12 38       	cp.w	r8,r9
8002420c:	e0 88 00 06 	brls	80024218 <flashc_set_bus_freq+0x2a>
80024210:	30 1c       	mov	r12,1
80024212:	f0 16 00 9b 	mcall	r6[620]
80024216:	c0 48       	rjmp	8002421e <flashc_set_bus_freq+0x30>
80024218:	30 0c       	mov	r12,0
8002421a:	f0 16 00 9b 	mcall	r6[620]
8002421e:	2f fd       	sub	sp,-4
80024220:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024224:	80 02       	ld.sh	r2,r0[0x0]
80024226:	40 7c       	lddsp	r12,sp[0x1c]

80024228 <flashc_is_ready_int_enabled>:
80024228:	eb cd 40 80 	pushm	r7,lr
8002422c:	1a 97       	mov	r7,sp
8002422e:	fe 68 00 00 	mov	r8,-131072
80024232:	70 08       	ld.w	r8,r8[0x0]
80024234:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024238:	5c 58       	castu.b	r8
8002423a:	10 9c       	mov	r12,r8
8002423c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024240 <flashc_enable_ready_int>:
80024240:	eb cd 40 80 	pushm	r7,lr
80024244:	1a 97       	mov	r7,sp
80024246:	20 2d       	sub	sp,8
80024248:	18 98       	mov	r8,r12
8002424a:	ef 68 ff f8 	st.b	r7[-8],r8
8002424e:	fe 68 00 00 	mov	r8,-131072
80024252:	70 08       	ld.w	r8,r8[0x0]
80024254:	30 09       	mov	r9,0
80024256:	ef 49 ff fc 	st.w	r7[-4],r9
8002425a:	ef 48 ff fc 	st.w	r7[-4],r8
8002425e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024262:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024266:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002426a:	ef 48 ff fc 	st.w	r7[-4],r8
8002426e:	fe 68 00 00 	mov	r8,-131072
80024272:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024276:	91 09       	st.w	r8[0x0],r9
80024278:	2f ed       	sub	sp,-8
8002427a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002427e <flashc_is_lock_error_int_enabled>:
8002427e:	eb cd 40 80 	pushm	r7,lr
80024282:	1a 97       	mov	r7,sp
80024284:	fe 68 00 00 	mov	r8,-131072
80024288:	70 08       	ld.w	r8,r8[0x0]
8002428a:	e2 18 00 04 	andl	r8,0x4,COH
8002428e:	5f 18       	srne	r8
80024290:	5c 58       	castu.b	r8
80024292:	10 9c       	mov	r12,r8
80024294:	e3 cd 80 80 	ldm	sp++,r7,pc

80024298 <flashc_enable_lock_error_int>:
80024298:	eb cd 40 80 	pushm	r7,lr
8002429c:	1a 97       	mov	r7,sp
8002429e:	20 2d       	sub	sp,8
800242a0:	18 98       	mov	r8,r12
800242a2:	ef 68 ff f8 	st.b	r7[-8],r8
800242a6:	fe 68 00 00 	mov	r8,-131072
800242aa:	70 08       	ld.w	r8,r8[0x0]
800242ac:	30 09       	mov	r9,0
800242ae:	ef 49 ff fc 	st.w	r7[-4],r9
800242b2:	ef 48 ff fc 	st.w	r7[-4],r8
800242b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800242ba:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800242be:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
800242c2:	ef 48 ff fc 	st.w	r7[-4],r8
800242c6:	fe 68 00 00 	mov	r8,-131072
800242ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800242ce:	91 09       	st.w	r8[0x0],r9
800242d0:	2f ed       	sub	sp,-8
800242d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800242d6 <flashc_is_prog_error_int_enabled>:
800242d6:	eb cd 40 80 	pushm	r7,lr
800242da:	1a 97       	mov	r7,sp
800242dc:	fe 68 00 00 	mov	r8,-131072
800242e0:	70 08       	ld.w	r8,r8[0x0]
800242e2:	e2 18 00 08 	andl	r8,0x8,COH
800242e6:	5f 18       	srne	r8
800242e8:	5c 58       	castu.b	r8
800242ea:	10 9c       	mov	r12,r8
800242ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800242f0 <flashc_enable_prog_error_int>:
800242f0:	eb cd 40 80 	pushm	r7,lr
800242f4:	1a 97       	mov	r7,sp
800242f6:	20 2d       	sub	sp,8
800242f8:	18 98       	mov	r8,r12
800242fa:	ef 68 ff f8 	st.b	r7[-8],r8
800242fe:	fe 68 00 00 	mov	r8,-131072
80024302:	70 08       	ld.w	r8,r8[0x0]
80024304:	30 09       	mov	r9,0
80024306:	ef 49 ff fc 	st.w	r7[-4],r9
8002430a:	ef 48 ff fc 	st.w	r7[-4],r8
8002430e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024312:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024316:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8002431a:	ef 48 ff fc 	st.w	r7[-4],r8
8002431e:	fe 68 00 00 	mov	r8,-131072
80024322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024326:	91 09       	st.w	r8[0x0],r9
80024328:	2f ed       	sub	sp,-8
8002432a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002432e <flashc_is_ready>:
8002432e:	eb cd 40 80 	pushm	r7,lr
80024332:	1a 97       	mov	r7,sp
80024334:	fe 68 00 00 	mov	r8,-131072
80024338:	70 28       	ld.w	r8,r8[0x8]
8002433a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002433e:	5c 58       	castu.b	r8
80024340:	10 9c       	mov	r12,r8
80024342:	e3 cd 80 80 	ldm	sp++,r7,pc

80024346 <flashc_default_wait_until_ready>:
80024346:	eb cd 40 c0 	pushm	r6-r7,lr
8002434a:	1a 97       	mov	r7,sp
8002434c:	48 66       	lddpc	r6,80024364 <flashc_default_wait_until_ready+0x1e>
8002434e:	1e 26       	rsub	r6,pc
80024350:	f0 16 01 a9 	mcall	r6[1700]
80024354:	18 98       	mov	r8,r12
80024356:	ec 18 00 01 	eorl	r8,0x1
8002435a:	5c 58       	castu.b	r8
8002435c:	cf a1       	brne	80024350 <flashc_default_wait_until_ready+0xa>
8002435e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024362:	00 00       	add	r0,r0
80024364:	80 02       	ld.sh	r2,r0[0x0]
80024366:	41 d2       	lddsp	r2,sp[0x74]

80024368 <flashc_get_error_status>:
80024368:	eb cd 40 80 	pushm	r7,lr
8002436c:	1a 97       	mov	r7,sp
8002436e:	fe 68 00 00 	mov	r8,-131072
80024372:	70 28       	ld.w	r8,r8[0x8]
80024374:	e2 18 00 0c 	andl	r8,0xc,COH
80024378:	10 9c       	mov	r12,r8
8002437a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002437e <flashc_is_lock_error>:
8002437e:	eb cd 40 c0 	pushm	r6-r7,lr
80024382:	1a 97       	mov	r7,sp
80024384:	48 66       	lddpc	r6,8002439c <flashc_is_lock_error+0x1e>
80024386:	1e 26       	rsub	r6,pc
80024388:	ec f8 00 54 	ld.w	r8,r6[84]
8002438c:	70 08       	ld.w	r8,r8[0x0]
8002438e:	e2 18 00 04 	andl	r8,0x4,COH
80024392:	5f 18       	srne	r8
80024394:	5c 58       	castu.b	r8
80024396:	10 9c       	mov	r12,r8
80024398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002439c:	80 02       	ld.sh	r2,r0[0x0]
8002439e:	42 0a       	lddsp	r10,sp[0x80]

800243a0 <flashc_is_programming_error>:
800243a0:	eb cd 40 c0 	pushm	r6-r7,lr
800243a4:	1a 97       	mov	r7,sp
800243a6:	48 76       	lddpc	r6,800243c0 <flashc_is_programming_error+0x20>
800243a8:	1e 26       	rsub	r6,pc
800243aa:	ec f8 00 54 	ld.w	r8,r6[84]
800243ae:	70 08       	ld.w	r8,r8[0x0]
800243b0:	e2 18 00 08 	andl	r8,0x8,COH
800243b4:	5f 18       	srne	r8
800243b6:	5c 58       	castu.b	r8
800243b8:	10 9c       	mov	r12,r8
800243ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800243be:	00 00       	add	r0,r0
800243c0:	80 02       	ld.sh	r2,r0[0x0]
800243c2:	42 2c       	lddsp	r12,sp[0x88]

800243c4 <flashc_get_command>:
800243c4:	eb cd 40 80 	pushm	r7,lr
800243c8:	1a 97       	mov	r7,sp
800243ca:	fe 68 00 00 	mov	r8,-131072
800243ce:	70 18       	ld.w	r8,r8[0x4]
800243d0:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800243d4:	10 9c       	mov	r12,r8
800243d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800243da <flashc_get_page_number>:
800243da:	eb cd 40 80 	pushm	r7,lr
800243de:	1a 97       	mov	r7,sp
800243e0:	fe 68 00 00 	mov	r8,-131072
800243e4:	70 18       	ld.w	r8,r8[0x4]
800243e6:	e4 18 00 ff 	andh	r8,0xff
800243ea:	e0 18 ff 00 	andl	r8,0xff00
800243ee:	a9 88       	lsr	r8,0x8
800243f0:	10 9c       	mov	r12,r8
800243f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800243f6 <flashc_issue_command>:
800243f6:	eb cd 40 c0 	pushm	r6-r7,lr
800243fa:	1a 97       	mov	r7,sp
800243fc:	20 3d       	sub	sp,12
800243fe:	4a 06       	lddpc	r6,8002447c <flashc_issue_command+0x86>
80024400:	1e 26       	rsub	r6,pc
80024402:	ef 4c ff f8 	st.w	r7[-8],r12
80024406:	ef 4b ff f4 	st.w	r7[-12],r11
8002440a:	ec f8 04 a4 	ld.w	r8,r6[1188]
8002440e:	70 08       	ld.w	r8,r8[0x0]
80024410:	5d 18       	icall	r8
80024412:	fe 68 00 00 	mov	r8,-131072
80024416:	70 18       	ld.w	r8,r8[0x4]
80024418:	ef 48 ff fc 	st.w	r7[-4],r8
8002441c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024420:	5c 58       	castu.b	r8
80024422:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024426:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002442a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002442e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024432:	ef 48 ff fc 	st.w	r7[-4],r8
80024436:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002443a:	58 08       	cp.w	r8,0
8002443c:	c0 b5       	brlt	80024452 <flashc_issue_command+0x5c>
8002443e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024442:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80024446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002444a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8002444e:	ef 48 ff fc 	st.w	r7[-4],r8
80024452:	3a 58       	mov	r8,-91
80024454:	ef 68 ff fc 	st.b	r7[-4],r8
80024458:	fe 68 00 00 	mov	r8,-131072
8002445c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024460:	91 19       	st.w	r8[0x4],r9
80024462:	c8 3f       	rcall	80024368 <flashc_get_error_status>
80024464:	18 99       	mov	r9,r12
80024466:	ec f8 00 54 	ld.w	r8,r6[84]
8002446a:	91 09       	st.w	r8[0x0],r9
8002446c:	ec f8 04 a4 	ld.w	r8,r6[1188]
80024470:	70 08       	ld.w	r8,r8[0x0]
80024472:	5d 18       	icall	r8
80024474:	2f dd       	sub	sp,-12
80024476:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002447a:	00 00       	add	r0,r0
8002447c:	80 02       	ld.sh	r2,r0[0x0]
8002447e:	42 84       	lddsp	r4,sp[0xa0]

80024480 <flashc_no_operation>:
80024480:	eb cd 40 c0 	pushm	r6-r7,lr
80024484:	1a 97       	mov	r7,sp
80024486:	48 56       	lddpc	r6,80024498 <flashc_no_operation+0x18>
80024488:	1e 26       	rsub	r6,pc
8002448a:	3f fb       	mov	r11,-1
8002448c:	30 0c       	mov	r12,0
8002448e:	f0 16 00 2a 	mcall	r6[168]
80024492:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024496:	00 00       	add	r0,r0
80024498:	80 02       	ld.sh	r2,r0[0x0]
8002449a:	43 0c       	lddsp	r12,sp[0xc0]

8002449c <flashc_erase_all>:
8002449c:	eb cd 40 c0 	pushm	r6-r7,lr
800244a0:	1a 97       	mov	r7,sp
800244a2:	48 56       	lddpc	r6,800244b4 <flashc_erase_all+0x18>
800244a4:	1e 26       	rsub	r6,pc
800244a6:	3f fb       	mov	r11,-1
800244a8:	30 6c       	mov	r12,6
800244aa:	f0 16 00 2a 	mcall	r6[168]
800244ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800244b2:	00 00       	add	r0,r0
800244b4:	80 02       	ld.sh	r2,r0[0x0]
800244b6:	43 28       	lddsp	r8,sp[0xc8]

800244b8 <flashc_is_security_bit_active>:
800244b8:	eb cd 40 80 	pushm	r7,lr
800244bc:	1a 97       	mov	r7,sp
800244be:	fe 68 00 00 	mov	r8,-131072
800244c2:	70 28       	ld.w	r8,r8[0x8]
800244c4:	e2 18 00 10 	andl	r8,0x10,COH
800244c8:	5f 18       	srne	r8
800244ca:	5c 58       	castu.b	r8
800244cc:	10 9c       	mov	r12,r8
800244ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800244d2 <flashc_activate_security_bit>:
800244d2:	eb cd 40 c0 	pushm	r6-r7,lr
800244d6:	1a 97       	mov	r7,sp
800244d8:	48 46       	lddpc	r6,800244e8 <flashc_activate_security_bit+0x16>
800244da:	1e 26       	rsub	r6,pc
800244dc:	3f fb       	mov	r11,-1
800244de:	30 9c       	mov	r12,9
800244e0:	f0 16 00 2a 	mcall	r6[168]
800244e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800244e8:	80 02       	ld.sh	r2,r0[0x0]
800244ea:	43 5e       	lddsp	lr,sp[0xd4]

800244ec <flashc_get_bootloader_protected_size>:
800244ec:	eb cd 40 c0 	pushm	r6-r7,lr
800244f0:	1a 97       	mov	r7,sp
800244f2:	20 1d       	sub	sp,4
800244f4:	48 e6       	lddpc	r6,8002452c <flashc_get_bootloader_protected_size+0x40>
800244f6:	1e 26       	rsub	r6,pc
800244f8:	30 3b       	mov	r11,3
800244fa:	31 1c       	mov	r12,17
800244fc:	f0 16 01 2a 	mcall	r6[1192]
80024500:	14 98       	mov	r8,r10
80024502:	16 99       	mov	r9,r11
80024504:	f0 08 11 07 	rsub	r8,r8,7
80024508:	ef 48 ff fc 	st.w	r7[-4],r8
8002450c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024510:	58 08       	cp.w	r8,0
80024512:	c0 80       	breq	80024522 <flashc_get_bootloader_protected_size+0x36>
80024514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024518:	e0 69 02 00 	mov	r9,512
8002451c:	f2 08 09 48 	lsl	r8,r9,r8
80024520:	c0 28       	rjmp	80024524 <flashc_get_bootloader_protected_size+0x38>
80024522:	30 08       	mov	r8,0
80024524:	10 9c       	mov	r12,r8
80024526:	2f fd       	sub	sp,-4
80024528:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002452c:	80 02       	ld.sh	r2,r0[0x0]
8002452e:	43 7a       	lddsp	r10,sp[0xdc]

80024530 <flashc_set_bootloader_protected_size>:
80024530:	eb cd 40 c0 	pushm	r6-r7,lr
80024534:	1a 97       	mov	r7,sp
80024536:	20 7d       	sub	sp,28
80024538:	4a 46       	lddpc	r6,800245c8 <flashc_set_bootloader_protected_size+0x98>
8002453a:	1e 26       	rsub	r6,pc
8002453c:	ef 4c ff e4 	st.w	r7[-28],r12
80024540:	ee fa ff e4 	ld.w	r10,r7[-28]
80024544:	58 0a       	cp.w	r10,0
80024546:	c3 40       	breq	800245ae <flashc_set_bootloader_protected_size+0x7e>
80024548:	ee fa ff e4 	ld.w	r10,r7[-28]
8002454c:	ef 4a ff f8 	st.w	r7[-8],r10
80024550:	e0 6a 04 00 	mov	r10,1024
80024554:	ef 4a ff fc 	st.w	r7[-4],r10
80024558:	ee fa ff f8 	ld.w	r10,r7[-8]
8002455c:	ee fb ff fc 	ld.w	r11,r7[-4]
80024560:	f4 0b 0c 4a 	max	r10,r10,r11
80024564:	ef 4a ff f4 	st.w	r7[-12],r10
80024568:	ee fa ff f4 	ld.w	r10,r7[-12]
8002456c:	ef 4a ff ec 	st.w	r7[-20],r10
80024570:	e0 7a 00 00 	mov	r10,65536
80024574:	ef 4a ff f0 	st.w	r7[-16],r10
80024578:	ee fa ff ec 	ld.w	r10,r7[-20]
8002457c:	ee fb ff f0 	ld.w	r11,r7[-16]
80024580:	f4 0b 0d 4a 	min	r10,r10,r11
80024584:	ef 4a ff e8 	st.w	r7[-24],r10
80024588:	ee fa ff e8 	ld.w	r10,r7[-24]
8002458c:	f4 ca fe 01 	sub	r10,r10,-511
80024590:	f4 cb fe 01 	sub	r11,r10,-511
80024594:	58 0a       	cp.w	r10,0
80024596:	f6 0a 17 50 	movlt	r10,r11
8002459a:	a9 5a       	asr	r10,0x9
8002459c:	a1 7a       	lsl	r10,0x1
8002459e:	20 1a       	sub	r10,1
800245a0:	f4 0a 12 00 	clz	r10,r10
800245a4:	21 8a       	sub	r10,24
800245a6:	14 98       	mov	r8,r10
800245a8:	bf 5a       	asr	r10,0x1f
800245aa:	14 99       	mov	r9,r10
800245ac:	c0 38       	rjmp	800245b2 <flashc_set_bootloader_protected_size+0x82>
800245ae:	30 78       	mov	r8,7
800245b0:	30 09       	mov	r9,0
800245b2:	30 3b       	mov	r11,3
800245b4:	31 1c       	mov	r12,17
800245b6:	f0 16 01 56 	mcall	r6[1368]
800245ba:	f0 16 01 67 	mcall	r6[1436]
800245be:	18 98       	mov	r8,r12
800245c0:	10 9c       	mov	r12,r8
800245c2:	2f 9d       	sub	sp,-28
800245c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800245c8:	80 02       	ld.sh	r2,r0[0x0]
800245ca:	43 be       	lddsp	lr,sp[0xec]

800245cc <flashc_is_external_privileged_fetch_locked>:
800245cc:	eb cd 40 c0 	pushm	r6-r7,lr
800245d0:	1a 97       	mov	r7,sp
800245d2:	48 76       	lddpc	r6,800245ec <flashc_is_external_privileged_fetch_locked+0x20>
800245d4:	1e 26       	rsub	r6,pc
800245d6:	31 0c       	mov	r12,16
800245d8:	f0 16 00 f2 	mcall	r6[968]
800245dc:	18 98       	mov	r8,r12
800245de:	ec 18 00 01 	eorl	r8,0x1
800245e2:	5c 58       	castu.b	r8
800245e4:	5c 58       	castu.b	r8
800245e6:	10 9c       	mov	r12,r8
800245e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800245ec:	80 02       	ld.sh	r2,r0[0x0]
800245ee:	44 58       	lddsp	r8,sp[0x114]

800245f0 <flashc_lock_external_privileged_fetch>:
800245f0:	eb cd 40 c0 	pushm	r6-r7,lr
800245f4:	1a 97       	mov	r7,sp
800245f6:	20 1d       	sub	sp,4
800245f8:	48 96       	lddpc	r6,8002461c <flashc_lock_external_privileged_fetch+0x2c>
800245fa:	1e 26       	rsub	r6,pc
800245fc:	18 98       	mov	r8,r12
800245fe:	ef 68 ff fc 	st.b	r7[-4],r8
80024602:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80024606:	ec 18 00 01 	eorl	r8,0x1
8002460a:	5c 58       	castu.b	r8
8002460c:	5c 58       	castu.b	r8
8002460e:	10 9b       	mov	r11,r8
80024610:	31 0c       	mov	r12,16
80024612:	f0 16 01 1a 	mcall	r6[1128]
80024616:	2f fd       	sub	sp,-4
80024618:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002461c:	80 02       	ld.sh	r2,r0[0x0]
8002461e:	44 7e       	lddsp	lr,sp[0x11c]

80024620 <flashc_is_page_region_locked>:
80024620:	eb cd 40 c0 	pushm	r6-r7,lr
80024624:	1a 97       	mov	r7,sp
80024626:	20 1d       	sub	sp,4
80024628:	48 96       	lddpc	r6,8002464c <flashc_is_page_region_locked+0x2c>
8002462a:	1e 26       	rsub	r6,pc
8002462c:	ef 4c ff fc 	st.w	r7[-4],r12
80024630:	ee fc ff fc 	ld.w	r12,r7[-4]
80024634:	f0 16 01 8f 	mcall	r6[1596]
80024638:	18 98       	mov	r8,r12
8002463a:	10 9c       	mov	r12,r8
8002463c:	f0 16 01 3f 	mcall	r6[1276]
80024640:	18 98       	mov	r8,r12
80024642:	10 9c       	mov	r12,r8
80024644:	2f fd       	sub	sp,-4
80024646:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002464a:	00 00       	add	r0,r0
8002464c:	80 02       	ld.sh	r2,r0[0x0]
8002464e:	44 ae       	lddsp	lr,sp[0x128]

80024650 <flashc_is_region_locked>:
80024650:	eb cd 40 80 	pushm	r7,lr
80024654:	1a 97       	mov	r7,sp
80024656:	20 1d       	sub	sp,4
80024658:	ef 4c ff fc 	st.w	r7[-4],r12
8002465c:	fe 68 00 00 	mov	r8,-131072
80024660:	70 29       	ld.w	r9,r8[0x8]
80024662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024666:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002466a:	e0 7a 00 00 	mov	r10,65536
8002466e:	f4 08 09 48 	lsl	r8,r10,r8
80024672:	f3 e8 00 08 	and	r8,r9,r8
80024676:	5f 18       	srne	r8
80024678:	5c 58       	castu.b	r8
8002467a:	10 9c       	mov	r12,r8
8002467c:	2f fd       	sub	sp,-4
8002467e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024682 <flashc_lock_page_region>:
80024682:	eb cd 40 c0 	pushm	r6-r7,lr
80024686:	1a 97       	mov	r7,sp
80024688:	20 2d       	sub	sp,8
8002468a:	48 d6       	lddpc	r6,800246bc <flashc_lock_page_region+0x3a>
8002468c:	1e 26       	rsub	r6,pc
8002468e:	ef 4c ff fc 	st.w	r7[-4],r12
80024692:	16 98       	mov	r8,r11
80024694:	ef 68 ff f8 	st.b	r7[-8],r8
80024698:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002469c:	30 08       	mov	r8,0
8002469e:	f0 09 18 00 	cp.b	r9,r8
800246a2:	c0 30       	breq	800246a8 <flashc_lock_page_region+0x26>
800246a4:	30 48       	mov	r8,4
800246a6:	c0 28       	rjmp	800246aa <flashc_lock_page_region+0x28>
800246a8:	30 58       	mov	r8,5
800246aa:	ee fb ff fc 	ld.w	r11,r7[-4]
800246ae:	10 9c       	mov	r12,r8
800246b0:	f0 16 00 2a 	mcall	r6[168]
800246b4:	2f ed       	sub	sp,-8
800246b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800246ba:	00 00       	add	r0,r0
800246bc:	80 02       	ld.sh	r2,r0[0x0]
800246be:	45 10       	lddsp	r0,sp[0x144]

800246c0 <flashc_lock_region>:
800246c0:	eb cd 40 e0 	pushm	r5-r7,lr
800246c4:	1a 97       	mov	r7,sp
800246c6:	20 2d       	sub	sp,8
800246c8:	48 b6       	lddpc	r6,800246f4 <flashc_lock_region+0x34>
800246ca:	1e 26       	rsub	r6,pc
800246cc:	ef 4c ff fc 	st.w	r7[-4],r12
800246d0:	16 98       	mov	r8,r11
800246d2:	ef 68 ff f8 	st.b	r7[-8],r8
800246d6:	ef 35 ff f8 	ld.ub	r5,r7[-8]
800246da:	ee fc ff fc 	ld.w	r12,r7[-4]
800246de:	f0 16 01 76 	mcall	r6[1496]
800246e2:	18 98       	mov	r8,r12
800246e4:	0a 9b       	mov	r11,r5
800246e6:	10 9c       	mov	r12,r8
800246e8:	f0 16 01 f4 	mcall	r6[2000]
800246ec:	2f ed       	sub	sp,-8
800246ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800246f2:	00 00       	add	r0,r0
800246f4:	80 02       	ld.sh	r2,r0[0x0]
800246f6:	45 4e       	lddsp	lr,sp[0x150]

800246f8 <flashc_lock_all_regions>:
800246f8:	eb cd 40 c0 	pushm	r6-r7,lr
800246fc:	1a 97       	mov	r7,sp
800246fe:	20 3d       	sub	sp,12
80024700:	49 76       	lddpc	r6,8002475c <flashc_lock_all_regions+0x64>
80024702:	1e 26       	rsub	r6,pc
80024704:	18 98       	mov	r8,r12
80024706:	ef 68 ff f4 	st.b	r7[-12],r8
8002470a:	30 08       	mov	r8,0
8002470c:	ef 48 ff f8 	st.w	r7[-8],r8
80024710:	31 08       	mov	r8,16
80024712:	ef 48 ff fc 	st.w	r7[-4],r8
80024716:	c1 68       	rjmp	80024742 <flashc_lock_all_regions+0x4a>
80024718:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002471c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024720:	20 19       	sub	r9,1
80024722:	ef 49 ff fc 	st.w	r7[-4],r9
80024726:	10 9b       	mov	r11,r8
80024728:	ee fc ff fc 	ld.w	r12,r7[-4]
8002472c:	f0 16 01 57 	mcall	r6[1372]
80024730:	ec f8 00 54 	ld.w	r8,r6[84]
80024734:	70 08       	ld.w	r8,r8[0x0]
80024736:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002473a:	f3 e8 10 08 	or	r8,r9,r8
8002473e:	ef 48 ff f8 	st.w	r7[-8],r8
80024742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024746:	58 08       	cp.w	r8,0
80024748:	ce 81       	brne	80024718 <flashc_lock_all_regions+0x20>
8002474a:	ec f8 00 54 	ld.w	r8,r6[84]
8002474e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024752:	91 09       	st.w	r8[0x0],r9
80024754:	2f dd       	sub	sp,-12
80024756:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002475a:	00 00       	add	r0,r0
8002475c:	80 02       	ld.sh	r2,r0[0x0]
8002475e:	45 86       	lddsp	r6,sp[0x160]

80024760 <flashc_read_gp_fuse_bit>:
80024760:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024764:	1a 97       	mov	r7,sp
80024766:	20 1d       	sub	sp,4
80024768:	49 66       	lddpc	r6,800247c0 <flashc_read_gp_fuse_bit+0x60>
8002476a:	1e 26       	rsub	r6,pc
8002476c:	ef 4c ff fc 	st.w	r7[-4],r12
80024770:	f0 16 00 77 	mcall	r6[476]
80024774:	14 98       	mov	r8,r10
80024776:	16 99       	mov	r9,r11
80024778:	ee fa ff fc 	ld.w	r10,r7[-4]
8002477c:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80024780:	14 9b       	mov	r11,r10
80024782:	e2 1b 00 20 	andl	r11,0x20,COH
80024786:	30 0c       	mov	r12,0
80024788:	f2 05 15 01 	lsl	r5,r9,0x1
8002478c:	14 9e       	mov	lr,r10
8002478e:	ee 1e ff ff 	eorh	lr,0xffff
80024792:	ec 1e ff ff 	eorl	lr,0xffff
80024796:	ea 0e 09 4e 	lsl	lr,r5,lr
8002479a:	f0 0a 0a 42 	lsr	r2,r8,r10
8002479e:	fd e2 10 02 	or	r2,lr,r2
800247a2:	f2 0a 0a 43 	lsr	r3,r9,r10
800247a6:	58 0b       	cp.w	r11,0
800247a8:	e6 02 17 10 	movne	r2,r3
800247ac:	f8 03 17 10 	movne	r3,r12
800247b0:	04 98       	mov	r8,r2
800247b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800247b6:	5c 58       	castu.b	r8
800247b8:	10 9c       	mov	r12,r8
800247ba:	2f fd       	sub	sp,-4
800247bc:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800247c0:	80 02       	ld.sh	r2,r0[0x0]
800247c2:	45 ee       	lddsp	lr,sp[0x178]

800247c4 <flashc_read_gp_fuse_bitfield>:
800247c4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800247c8:	1a 97       	mov	r7,sp
800247ca:	20 5d       	sub	sp,20
800247cc:	4b 16       	lddpc	r6,80024890 <flashc_read_gp_fuse_bitfield+0xcc>
800247ce:	1e 26       	rsub	r6,pc
800247d0:	ef 4c ff f0 	st.w	r7[-16],r12
800247d4:	ef 4b ff ec 	st.w	r7[-20],r11
800247d8:	f0 16 00 77 	mcall	r6[476]
800247dc:	14 98       	mov	r8,r10
800247de:	16 99       	mov	r9,r11
800247e0:	ee fa ff f0 	ld.w	r10,r7[-16]
800247e4:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
800247e8:	14 9b       	mov	r11,r10
800247ea:	e2 1b 00 20 	andl	r11,0x20,COH
800247ee:	30 0c       	mov	r12,0
800247f0:	f2 05 15 01 	lsl	r5,r9,0x1
800247f4:	14 9e       	mov	lr,r10
800247f6:	ee 1e ff ff 	eorh	lr,0xffff
800247fa:	ec 1e ff ff 	eorl	lr,0xffff
800247fe:	ea 0e 09 4e 	lsl	lr,r5,lr
80024802:	f0 0a 0a 42 	lsr	r2,r8,r10
80024806:	fd e2 10 02 	or	r2,lr,r2
8002480a:	f2 0a 0a 43 	lsr	r3,r9,r10
8002480e:	58 0b       	cp.w	r11,0
80024810:	e6 02 17 10 	movne	r2,r3
80024814:	f8 03 17 10 	movne	r3,r12
80024818:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002481c:	ef 48 ff f8 	st.w	r7[-8],r8
80024820:	34 08       	mov	r8,64
80024822:	ef 48 ff fc 	st.w	r7[-4],r8
80024826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002482a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002482e:	f0 09 0d 48 	min	r8,r8,r9
80024832:	ef 48 ff f4 	st.w	r7[-12],r8
80024836:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002483a:	10 99       	mov	r9,r8
8002483c:	e2 19 00 20 	andl	r9,0x20,COH
80024840:	30 0a       	mov	r10,0
80024842:	30 1b       	mov	r11,1
80024844:	f6 0c 16 01 	lsr	r12,r11,0x1
80024848:	10 9b       	mov	r11,r8
8002484a:	ee 1b ff ff 	eorh	r11,0xffff
8002484e:	ec 1b ff ff 	eorl	r11,0xffff
80024852:	f8 0b 0a 4b 	lsr	r11,r12,r11
80024856:	30 0c       	mov	r12,0
80024858:	f8 08 09 41 	lsl	r1,r12,r8
8002485c:	f7 e1 10 01 	or	r1,r11,r1
80024860:	30 1b       	mov	r11,1
80024862:	f6 08 09 40 	lsl	r0,r11,r8
80024866:	58 09       	cp.w	r9,0
80024868:	e0 01 17 10 	movne	r1,r0
8002486c:	f4 00 17 10 	movne	r0,r10
80024870:	3f f8       	mov	r8,-1
80024872:	3f f9       	mov	r9,-1
80024874:	e0 08 00 0a 	add	r10,r0,r8
80024878:	e2 09 00 4b 	adc	r11,r1,r9
8002487c:	e5 ea 00 08 	and	r8,r2,r10
80024880:	e7 eb 00 09 	and	r9,r3,r11
80024884:	10 9a       	mov	r10,r8
80024886:	12 9b       	mov	r11,r9
80024888:	2f bd       	sub	sp,-20
8002488a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8002488e:	00 00       	add	r0,r0
80024890:	80 02       	ld.sh	r2,r0[0x0]
80024892:	46 52       	lddsp	r2,sp[0x194]

80024894 <flashc_read_gp_fuse_byte>:
80024894:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024898:	1a 97       	mov	r7,sp
8002489a:	20 1d       	sub	sp,4
8002489c:	49 66       	lddpc	r6,800248f4 <flashc_read_gp_fuse_byte+0x60>
8002489e:	1e 26       	rsub	r6,pc
800248a0:	ef 4c ff fc 	st.w	r7[-4],r12
800248a4:	f0 16 00 77 	mcall	r6[476]
800248a8:	14 98       	mov	r8,r10
800248aa:	16 99       	mov	r9,r11
800248ac:	ee fa ff fc 	ld.w	r10,r7[-4]
800248b0:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800248b4:	a3 7a       	lsl	r10,0x3
800248b6:	14 9b       	mov	r11,r10
800248b8:	e2 1b 00 20 	andl	r11,0x20,COH
800248bc:	30 0c       	mov	r12,0
800248be:	f2 05 15 01 	lsl	r5,r9,0x1
800248c2:	14 9e       	mov	lr,r10
800248c4:	ee 1e ff ff 	eorh	lr,0xffff
800248c8:	ec 1e ff ff 	eorl	lr,0xffff
800248cc:	ea 0e 09 4e 	lsl	lr,r5,lr
800248d0:	f0 0a 0a 42 	lsr	r2,r8,r10
800248d4:	fd e2 10 02 	or	r2,lr,r2
800248d8:	f2 0a 0a 43 	lsr	r3,r9,r10
800248dc:	58 0b       	cp.w	r11,0
800248de:	e6 02 17 10 	movne	r2,r3
800248e2:	f8 03 17 10 	movne	r3,r12
800248e6:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
800248ea:	10 9c       	mov	r12,r8
800248ec:	2f fd       	sub	sp,-4
800248ee:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800248f2:	00 00       	add	r0,r0
800248f4:	80 02       	ld.sh	r2,r0[0x0]
800248f6:	47 22       	lddsp	r2,sp[0x1c8]

800248f8 <flashc_read_all_gp_fuses>:
800248f8:	eb cd 40 8c 	pushm	r2-r3,r7,lr
800248fc:	1a 97       	mov	r7,sp
800248fe:	fe 6c 00 00 	mov	r12,-131072
80024902:	78 6c       	ld.w	r12,r12[0x18]
80024904:	18 9a       	mov	r10,r12
80024906:	30 0b       	mov	r11,0
80024908:	fe 6c 00 00 	mov	r12,-131072
8002490c:	78 5c       	ld.w	r12,r12[0x14]
8002490e:	18 92       	mov	r2,r12
80024910:	30 03       	mov	r3,0
80024912:	e4 09 15 00 	lsl	r9,r2,0x0
80024916:	30 08       	mov	r8,0
80024918:	f5 e8 10 02 	or	r2,r10,r8
8002491c:	f7 e9 10 03 	or	r3,r11,r9
80024920:	04 98       	mov	r8,r2
80024922:	06 99       	mov	r9,r3
80024924:	10 9a       	mov	r10,r8
80024926:	12 9b       	mov	r11,r9
80024928:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

8002492c <flashc_erase_gp_fuse_bit>:
8002492c:	eb cd 40 c0 	pushm	r6-r7,lr
80024930:	1a 97       	mov	r7,sp
80024932:	20 2d       	sub	sp,8
80024934:	49 06       	lddpc	r6,80024974 <flashc_erase_gp_fuse_bit+0x48>
80024936:	1e 26       	rsub	r6,pc
80024938:	ef 4c ff fc 	st.w	r7[-4],r12
8002493c:	16 98       	mov	r8,r11
8002493e:	ef 68 ff f8 	st.b	r7[-8],r8
80024942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024946:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002494a:	10 9b       	mov	r11,r8
8002494c:	30 8c       	mov	r12,8
8002494e:	f0 16 00 2a 	mcall	r6[168]
80024952:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024956:	30 08       	mov	r8,0
80024958:	f0 09 18 00 	cp.b	r9,r8
8002495c:	c0 70       	breq	8002496a <flashc_erase_gp_fuse_bit+0x3e>
8002495e:	ee fc ff fc 	ld.w	r12,r7[-4]
80024962:	f0 16 00 f2 	mcall	r6[968]
80024966:	18 98       	mov	r8,r12
80024968:	c0 28       	rjmp	8002496c <flashc_erase_gp_fuse_bit+0x40>
8002496a:	30 18       	mov	r8,1
8002496c:	10 9c       	mov	r12,r8
8002496e:	2f ed       	sub	sp,-8
80024970:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024974:	80 02       	ld.sh	r2,r0[0x0]
80024976:	47 ba       	lddsp	r10,sp[0x1ec]

80024978 <flashc_erase_gp_fuse_bitfield>:
80024978:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002497c:	1a 97       	mov	r7,sp
8002497e:	20 8d       	sub	sp,32
80024980:	4c 36       	lddpc	r6,80024a8c <flashc_erase_gp_fuse_bitfield+0x114>
80024982:	1e 26       	rsub	r6,pc
80024984:	ef 4c ff e8 	st.w	r7[-24],r12
80024988:	ef 4b ff e4 	st.w	r7[-28],r11
8002498c:	14 98       	mov	r8,r10
8002498e:	ef 68 ff e0 	st.b	r7[-32],r8
80024992:	30 08       	mov	r8,0
80024994:	ef 48 ff ec 	st.w	r7[-20],r8
80024998:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002499c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800249a0:	ef 48 ff e8 	st.w	r7[-24],r8
800249a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800249a8:	ef 48 ff f8 	st.w	r7[-8],r8
800249ac:	34 08       	mov	r8,64
800249ae:	ef 48 ff fc 	st.w	r7[-4],r8
800249b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800249ba:	f0 09 0d 48 	min	r8,r8,r9
800249be:	ef 48 ff f4 	st.w	r7[-12],r8
800249c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800249c6:	ef 48 ff e4 	st.w	r7[-28],r8
800249ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800249ce:	ef 48 ff f0 	st.w	r7[-16],r8
800249d2:	c1 48       	rjmp	800249fa <flashc_erase_gp_fuse_bitfield+0x82>
800249d4:	30 0b       	mov	r11,0
800249d6:	ee fc ff f0 	ld.w	r12,r7[-16]
800249da:	f0 16 00 e9 	mcall	r6[932]
800249de:	ec f8 00 54 	ld.w	r8,r6[84]
800249e2:	70 08       	ld.w	r8,r8[0x0]
800249e4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800249e8:	f3 e8 10 08 	or	r8,r9,r8
800249ec:	ef 48 ff ec 	st.w	r7[-20],r8
800249f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800249f4:	2f f8       	sub	r8,-1
800249f6:	ef 48 ff f0 	st.w	r7[-16],r8
800249fa:	ee f9 ff e8 	ld.w	r9,r7[-24]
800249fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024a02:	10 09       	add	r9,r8
80024a04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024a08:	10 39       	cp.w	r9,r8
80024a0a:	fe 9b ff e5 	brhi	800249d4 <flashc_erase_gp_fuse_bitfield+0x5c>
80024a0e:	ec f8 00 54 	ld.w	r8,r6[84]
80024a12:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024a16:	91 09       	st.w	r8[0x0],r9
80024a18:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80024a1c:	30 08       	mov	r8,0
80024a1e:	f0 09 18 00 	cp.b	r9,r8
80024a22:	c3 00       	breq	80024a82 <flashc_erase_gp_fuse_bitfield+0x10a>
80024a24:	ee fb ff e4 	ld.w	r11,r7[-28]
80024a28:	ee fc ff e8 	ld.w	r12,r7[-24]
80024a2c:	f0 16 01 2a 	mcall	r6[1192]
80024a30:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024a34:	10 99       	mov	r9,r8
80024a36:	e2 19 00 20 	andl	r9,0x20,COH
80024a3a:	30 0c       	mov	r12,0
80024a3c:	30 1e       	mov	lr,1
80024a3e:	fc 05 16 01 	lsr	r5,lr,0x1
80024a42:	10 9e       	mov	lr,r8
80024a44:	ee 1e ff ff 	eorh	lr,0xffff
80024a48:	ec 1e ff ff 	eorl	lr,0xffff
80024a4c:	ea 0e 0a 4e 	lsr	lr,r5,lr
80024a50:	30 05       	mov	r5,0
80024a52:	ea 08 09 43 	lsl	r3,r5,r8
80024a56:	fd e3 10 03 	or	r3,lr,r3
80024a5a:	30 1e       	mov	lr,1
80024a5c:	fc 08 09 42 	lsl	r2,lr,r8
80024a60:	58 09       	cp.w	r9,0
80024a62:	e4 03 17 10 	movne	r3,r2
80024a66:	f8 02 17 10 	movne	r2,r12
80024a6a:	3f f8       	mov	r8,-1
80024a6c:	3f f9       	mov	r9,-1
80024a6e:	e4 08 00 08 	add	r8,r2,r8
80024a72:	e6 09 00 49 	adc	r9,r3,r9
80024a76:	10 3a       	cp.w	r10,r8
80024a78:	f2 0b 13 00 	cpc	r11,r9
80024a7c:	5f 08       	sreq	r8
80024a7e:	5c 58       	castu.b	r8
80024a80:	c0 28       	rjmp	80024a84 <flashc_erase_gp_fuse_bitfield+0x10c>
80024a82:	30 18       	mov	r8,1
80024a84:	10 9c       	mov	r12,r8
80024a86:	2f 8d       	sub	sp,-32
80024a88:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80024a8c:	80 02       	ld.sh	r2,r0[0x0]
80024a8e:	48 06       	lddpc	r6,80024a8c <flashc_erase_gp_fuse_bitfield+0x114>

80024a90 <flashc_erase_gp_fuse_byte>:
80024a90:	eb cd 40 c0 	pushm	r6-r7,lr
80024a94:	1a 97       	mov	r7,sp
80024a96:	20 6d       	sub	sp,24
80024a98:	4b 26       	lddpc	r6,80024b60 <flashc_erase_gp_fuse_byte+0xd0>
80024a9a:	1e 26       	rsub	r6,pc
80024a9c:	ef 4c ff ec 	st.w	r7[-20],r12
80024aa0:	16 98       	mov	r8,r11
80024aa2:	ef 68 ff e8 	st.b	r7[-24],r8
80024aa6:	f0 16 00 77 	mcall	r6[476]
80024aaa:	14 98       	mov	r8,r10
80024aac:	16 99       	mov	r9,r11
80024aae:	ee e9 ff f8 	st.d	r7[-8],r8
80024ab2:	30 0c       	mov	r12,0
80024ab4:	f0 16 00 d0 	mcall	r6[832]
80024ab8:	ec f8 00 54 	ld.w	r8,r6[84]
80024abc:	70 08       	ld.w	r8,r8[0x0]
80024abe:	ef 48 ff f0 	st.w	r7[-16],r8
80024ac2:	30 08       	mov	r8,0
80024ac4:	ef 48 ff f4 	st.w	r7[-12],r8
80024ac8:	c2 b8       	rjmp	80024b1e <flashc_erase_gp_fuse_byte+0x8e>
80024aca:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024ace:	ee f8 ff ec 	ld.w	r8,r7[-20]
80024ad2:	10 39       	cp.w	r9,r8
80024ad4:	c1 10       	breq	80024af6 <flashc_erase_gp_fuse_byte+0x66>
80024ad6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024ada:	10 9b       	mov	r11,r8
80024adc:	ee fc ff f4 	ld.w	r12,r7[-12]
80024ae0:	f0 16 00 8c 	mcall	r6[560]
80024ae4:	ec f8 00 54 	ld.w	r8,r6[84]
80024ae8:	70 08       	ld.w	r8,r8[0x0]
80024aea:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024aee:	f3 e8 10 08 	or	r8,r9,r8
80024af2:	ef 48 ff f0 	st.w	r7[-16],r8
80024af6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024afa:	2f f8       	sub	r8,-1
80024afc:	ef 48 ff f4 	st.w	r7[-12],r8
80024b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b04:	b9 68       	lsl	r8,0x18
80024b06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b0a:	a9 89       	lsr	r9,0x8
80024b0c:	f3 e8 10 08 	or	r8,r9,r8
80024b10:	ef 48 ff fc 	st.w	r7[-4],r8
80024b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b18:	a9 88       	lsr	r8,0x8
80024b1a:	ef 48 ff f8 	st.w	r7[-8],r8
80024b1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b22:	58 78       	cp.w	r8,7
80024b24:	fe 98 ff d3 	brls	80024aca <flashc_erase_gp_fuse_byte+0x3a>
80024b28:	ec f8 00 54 	ld.w	r8,r6[84]
80024b2c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024b30:	91 09       	st.w	r8[0x0],r9
80024b32:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80024b36:	30 08       	mov	r8,0
80024b38:	f0 09 18 00 	cp.b	r9,r8
80024b3c:	c0 d0       	breq	80024b56 <flashc_erase_gp_fuse_byte+0xc6>
80024b3e:	ee fc ff ec 	ld.w	r12,r7[-20]
80024b42:	f0 16 02 1a 	mcall	r6[2152]
80024b46:	18 98       	mov	r8,r12
80024b48:	10 99       	mov	r9,r8
80024b4a:	3f f8       	mov	r8,-1
80024b4c:	f0 09 18 00 	cp.b	r9,r8
80024b50:	5f 08       	sreq	r8
80024b52:	5c 58       	castu.b	r8
80024b54:	c0 28       	rjmp	80024b58 <flashc_erase_gp_fuse_byte+0xc8>
80024b56:	30 18       	mov	r8,1
80024b58:	10 9c       	mov	r12,r8
80024b5a:	2f ad       	sub	sp,-24
80024b5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b60:	80 02       	ld.sh	r2,r0[0x0]
80024b62:	49 1e       	lddpc	lr,80024ba4 <flashc_erase_all_gp_fuses+0x40>

80024b64 <flashc_erase_all_gp_fuses>:
80024b64:	eb cd 40 c0 	pushm	r6-r7,lr
80024b68:	1a 97       	mov	r7,sp
80024b6a:	20 1d       	sub	sp,4
80024b6c:	48 f6       	lddpc	r6,80024ba8 <flashc_erase_all_gp_fuses+0x44>
80024b6e:	1e 26       	rsub	r6,pc
80024b70:	18 98       	mov	r8,r12
80024b72:	ef 68 ff fc 	st.b	r7[-4],r8
80024b76:	3f fb       	mov	r11,-1
80024b78:	30 bc       	mov	r12,11
80024b7a:	f0 16 00 2a 	mcall	r6[168]
80024b7e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80024b82:	30 08       	mov	r8,0
80024b84:	f0 09 18 00 	cp.b	r9,r8
80024b88:	c0 b0       	breq	80024b9e <flashc_erase_all_gp_fuses+0x3a>
80024b8a:	f0 16 00 77 	mcall	r6[476]
80024b8e:	14 98       	mov	r8,r10
80024b90:	16 99       	mov	r9,r11
80024b92:	f3 e8 00 08 	and	r8,r9,r8
80024b96:	5b f8       	cp.w	r8,-1
80024b98:	5f 08       	sreq	r8
80024b9a:	5c 58       	castu.b	r8
80024b9c:	c0 28       	rjmp	80024ba0 <flashc_erase_all_gp_fuses+0x3c>
80024b9e:	30 18       	mov	r8,1
80024ba0:	10 9c       	mov	r12,r8
80024ba2:	2f fd       	sub	sp,-4
80024ba4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ba8:	80 02       	ld.sh	r2,r0[0x0]
80024baa:	49 f2       	lddpc	r2,80024c24 <flashc_write_gp_fuse_bitfield+0x3c>

80024bac <flashc_write_gp_fuse_bit>:
80024bac:	eb cd 40 c0 	pushm	r6-r7,lr
80024bb0:	1a 97       	mov	r7,sp
80024bb2:	20 2d       	sub	sp,8
80024bb4:	48 c6       	lddpc	r6,80024be4 <flashc_write_gp_fuse_bit+0x38>
80024bb6:	1e 26       	rsub	r6,pc
80024bb8:	ef 4c ff fc 	st.w	r7[-4],r12
80024bbc:	16 98       	mov	r8,r11
80024bbe:	ef 68 ff f8 	st.b	r7[-8],r8
80024bc2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024bc6:	ec 18 00 01 	eorl	r8,0x1
80024bca:	5c 58       	castu.b	r8
80024bcc:	c0 90       	breq	80024bde <flashc_write_gp_fuse_bit+0x32>
80024bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024bd2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024bd6:	10 9b       	mov	r11,r8
80024bd8:	30 7c       	mov	r12,7
80024bda:	f0 16 00 2a 	mcall	r6[168]
80024bde:	2f ed       	sub	sp,-8
80024be0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024be4:	80 02       	ld.sh	r2,r0[0x0]
80024be6:	4a 3a       	lddpc	r10,80024c70 <flashc_write_gp_fuse_bitfield+0x88>

80024be8 <flashc_write_gp_fuse_bitfield>:
80024be8:	eb cd 40 c0 	pushm	r6-r7,lr
80024bec:	1a 97       	mov	r7,sp
80024bee:	20 9d       	sub	sp,36
80024bf0:	4b 16       	lddpc	r6,80024cb4 <flashc_write_gp_fuse_bitfield+0xcc>
80024bf2:	1e 26       	rsub	r6,pc
80024bf4:	ef 4c ff e8 	st.w	r7[-24],r12
80024bf8:	ef 4b ff e4 	st.w	r7[-28],r11
80024bfc:	ee e9 ff dc 	st.d	r7[-36],r8
80024c00:	30 08       	mov	r8,0
80024c02:	ef 48 ff ec 	st.w	r7[-20],r8
80024c06:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024c0a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024c0e:	ef 48 ff e8 	st.w	r7[-24],r8
80024c12:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024c16:	ef 48 ff f8 	st.w	r7[-8],r8
80024c1a:	34 08       	mov	r8,64
80024c1c:	ef 48 ff fc 	st.w	r7[-4],r8
80024c20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c28:	f0 09 0d 48 	min	r8,r8,r9
80024c2c:	ef 48 ff f4 	st.w	r7[-12],r8
80024c30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024c34:	ef 48 ff e4 	st.w	r7[-28],r8
80024c38:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024c3c:	ef 48 ff f0 	st.w	r7[-16],r8
80024c40:	c2 88       	rjmp	80024c90 <flashc_write_gp_fuse_bitfield+0xa8>
80024c42:	ee f8 ff e0 	ld.w	r8,r7[-32]
80024c46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024c4a:	5c 58       	castu.b	r8
80024c4c:	10 9b       	mov	r11,r8
80024c4e:	ee fc ff f0 	ld.w	r12,r7[-16]
80024c52:	f0 16 00 da 	mcall	r6[872]
80024c56:	ec f8 00 54 	ld.w	r8,r6[84]
80024c5a:	70 08       	ld.w	r8,r8[0x0]
80024c5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024c60:	f3 e8 10 08 	or	r8,r9,r8
80024c64:	ef 48 ff ec 	st.w	r7[-20],r8
80024c68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024c6c:	2f f8       	sub	r8,-1
80024c6e:	ef 48 ff f0 	st.w	r7[-16],r8
80024c72:	ee f8 ff dc 	ld.w	r8,r7[-36]
80024c76:	bf 78       	lsl	r8,0x1f
80024c78:	ee f9 ff e0 	ld.w	r9,r7[-32]
80024c7c:	a1 99       	lsr	r9,0x1
80024c7e:	f3 e8 10 08 	or	r8,r9,r8
80024c82:	ef 48 ff e0 	st.w	r7[-32],r8
80024c86:	ee f8 ff dc 	ld.w	r8,r7[-36]
80024c8a:	a1 98       	lsr	r8,0x1
80024c8c:	ef 48 ff dc 	st.w	r7[-36],r8
80024c90:	ee f9 ff e8 	ld.w	r9,r7[-24]
80024c94:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024c98:	10 09       	add	r9,r8
80024c9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024c9e:	10 39       	cp.w	r9,r8
80024ca0:	fe 9b ff d1 	brhi	80024c42 <flashc_write_gp_fuse_bitfield+0x5a>
80024ca4:	ec f8 00 54 	ld.w	r8,r6[84]
80024ca8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024cac:	91 09       	st.w	r8[0x0],r9
80024cae:	2f 7d       	sub	sp,-36
80024cb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cb4:	80 02       	ld.sh	r2,r0[0x0]
80024cb6:	4a 76       	lddpc	r6,80024d50 <flashc_write_all_gp_fuses+0x5c>

80024cb8 <flashc_write_gp_fuse_byte>:
80024cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80024cbc:	1a 97       	mov	r7,sp
80024cbe:	20 2d       	sub	sp,8
80024cc0:	48 c6       	lddpc	r6,80024cf0 <flashc_write_gp_fuse_byte+0x38>
80024cc2:	1e 26       	rsub	r6,pc
80024cc4:	ef 4c ff fc 	st.w	r7[-4],r12
80024cc8:	16 98       	mov	r8,r11
80024cca:	ef 68 ff f8 	st.b	r7[-8],r8
80024cce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024cd2:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80024cd6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024cda:	a3 78       	lsl	r8,0x3
80024cdc:	f3 e8 10 08 	or	r8,r9,r8
80024ce0:	10 9b       	mov	r11,r8
80024ce2:	30 ac       	mov	r12,10
80024ce4:	f0 16 00 2a 	mcall	r6[168]
80024ce8:	2f ed       	sub	sp,-8
80024cea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cee:	00 00       	add	r0,r0
80024cf0:	80 02       	ld.sh	r2,r0[0x0]
80024cf2:	4b 46       	lddpc	r6,80024dc0 <flashc_set_gp_fuse_bitfield+0x4>

80024cf4 <flashc_write_all_gp_fuses>:
80024cf4:	eb cd 40 c0 	pushm	r6-r7,lr
80024cf8:	1a 97       	mov	r7,sp
80024cfa:	20 4d       	sub	sp,16
80024cfc:	49 e6       	lddpc	r6,80024d74 <flashc_write_all_gp_fuses+0x80>
80024cfe:	1e 26       	rsub	r6,pc
80024d00:	ee eb ff f0 	st.d	r7[-16],r10
80024d04:	30 08       	mov	r8,0
80024d06:	ef 48 ff f8 	st.w	r7[-8],r8
80024d0a:	30 08       	mov	r8,0
80024d0c:	ef 48 ff fc 	st.w	r7[-4],r8
80024d10:	c2 58       	rjmp	80024d5a <flashc_write_all_gp_fuses+0x66>
80024d12:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80024d16:	10 9b       	mov	r11,r8
80024d18:	ee fc ff fc 	ld.w	r12,r7[-4]
80024d1c:	f0 16 00 8c 	mcall	r6[560]
80024d20:	ec f8 00 54 	ld.w	r8,r6[84]
80024d24:	70 08       	ld.w	r8,r8[0x0]
80024d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024d2a:	f3 e8 10 08 	or	r8,r9,r8
80024d2e:	ef 48 ff f8 	st.w	r7[-8],r8
80024d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d36:	2f f8       	sub	r8,-1
80024d38:	ef 48 ff fc 	st.w	r7[-4],r8
80024d3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024d40:	b9 68       	lsl	r8,0x18
80024d42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024d46:	a9 89       	lsr	r9,0x8
80024d48:	f3 e8 10 08 	or	r8,r9,r8
80024d4c:	ef 48 ff f4 	st.w	r7[-12],r8
80024d50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024d54:	a9 88       	lsr	r8,0x8
80024d56:	ef 48 ff f0 	st.w	r7[-16],r8
80024d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d5e:	58 78       	cp.w	r8,7
80024d60:	fe 98 ff d9 	brls	80024d12 <flashc_write_all_gp_fuses+0x1e>
80024d64:	ec f8 00 54 	ld.w	r8,r6[84]
80024d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024d6c:	91 09       	st.w	r8[0x0],r9
80024d6e:	2f cd       	sub	sp,-16
80024d70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d74:	80 02       	ld.sh	r2,r0[0x0]
80024d76:	4b 82       	lddpc	r2,80024e54 <flashc_set_gp_fuse_bitfield+0x98>

80024d78 <flashc_set_gp_fuse_bit>:
80024d78:	eb cd 40 c0 	pushm	r6-r7,lr
80024d7c:	1a 97       	mov	r7,sp
80024d7e:	20 2d       	sub	sp,8
80024d80:	48 e6       	lddpc	r6,80024db8 <flashc_set_gp_fuse_bit+0x40>
80024d82:	1e 26       	rsub	r6,pc
80024d84:	ef 4c ff fc 	st.w	r7[-4],r12
80024d88:	16 98       	mov	r8,r11
80024d8a:	ef 68 ff f8 	st.b	r7[-8],r8
80024d8e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024d92:	30 08       	mov	r8,0
80024d94:	f0 09 18 00 	cp.b	r9,r8
80024d98:	c0 70       	breq	80024da6 <flashc_set_gp_fuse_bit+0x2e>
80024d9a:	30 0b       	mov	r11,0
80024d9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024da0:	f0 16 00 e9 	mcall	r6[932]
80024da4:	c0 68       	rjmp	80024db0 <flashc_set_gp_fuse_bit+0x38>
80024da6:	30 0b       	mov	r11,0
80024da8:	ee fc ff fc 	ld.w	r12,r7[-4]
80024dac:	f0 16 00 da 	mcall	r6[872]
80024db0:	2f ed       	sub	sp,-8
80024db2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024db6:	00 00       	add	r0,r0
80024db8:	80 02       	ld.sh	r2,r0[0x0]
80024dba:	4c 06       	lddpc	r6,80024eb8 <flashc_set_gp_fuse_byte+0x2c>

80024dbc <flashc_set_gp_fuse_bitfield>:
80024dbc:	eb cd 40 c0 	pushm	r6-r7,lr
80024dc0:	1a 97       	mov	r7,sp
80024dc2:	20 9d       	sub	sp,36
80024dc4:	4b 16       	lddpc	r6,80024e88 <flashc_set_gp_fuse_bitfield+0xcc>
80024dc6:	1e 26       	rsub	r6,pc
80024dc8:	ef 4c ff e8 	st.w	r7[-24],r12
80024dcc:	ef 4b ff e4 	st.w	r7[-28],r11
80024dd0:	ee e9 ff dc 	st.d	r7[-36],r8
80024dd4:	30 08       	mov	r8,0
80024dd6:	ef 48 ff ec 	st.w	r7[-20],r8
80024dda:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024dde:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024de2:	ef 48 ff e8 	st.w	r7[-24],r8
80024de6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024dea:	ef 48 ff f8 	st.w	r7[-8],r8
80024dee:	34 08       	mov	r8,64
80024df0:	ef 48 ff fc 	st.w	r7[-4],r8
80024df4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024df8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024dfc:	f0 09 0d 48 	min	r8,r8,r9
80024e00:	ef 48 ff f4 	st.w	r7[-12],r8
80024e04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024e08:	ef 48 ff e4 	st.w	r7[-28],r8
80024e0c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024e10:	ef 48 ff f0 	st.w	r7[-16],r8
80024e14:	c2 88       	rjmp	80024e64 <flashc_set_gp_fuse_bitfield+0xa8>
80024e16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80024e1a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024e1e:	5c 58       	castu.b	r8
80024e20:	10 9b       	mov	r11,r8
80024e22:	ee fc ff f0 	ld.w	r12,r7[-16]
80024e26:	f0 16 01 1a 	mcall	r6[1128]
80024e2a:	ec f8 00 54 	ld.w	r8,r6[84]
80024e2e:	70 08       	ld.w	r8,r8[0x0]
80024e30:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024e34:	f3 e8 10 08 	or	r8,r9,r8
80024e38:	ef 48 ff ec 	st.w	r7[-20],r8
80024e3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024e40:	2f f8       	sub	r8,-1
80024e42:	ef 48 ff f0 	st.w	r7[-16],r8
80024e46:	ee f8 ff dc 	ld.w	r8,r7[-36]
80024e4a:	bf 78       	lsl	r8,0x1f
80024e4c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80024e50:	a1 99       	lsr	r9,0x1
80024e52:	f3 e8 10 08 	or	r8,r9,r8
80024e56:	ef 48 ff e0 	st.w	r7[-32],r8
80024e5a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80024e5e:	a1 98       	lsr	r8,0x1
80024e60:	ef 48 ff dc 	st.w	r7[-36],r8
80024e64:	ee f9 ff e8 	ld.w	r9,r7[-24]
80024e68:	ee f8 ff e4 	ld.w	r8,r7[-28]
80024e6c:	10 09       	add	r9,r8
80024e6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024e72:	10 39       	cp.w	r9,r8
80024e74:	fe 9b ff d1 	brhi	80024e16 <flashc_set_gp_fuse_bitfield+0x5a>
80024e78:	ec f8 00 54 	ld.w	r8,r6[84]
80024e7c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024e80:	91 09       	st.w	r8[0x0],r9
80024e82:	2f 7d       	sub	sp,-36
80024e84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e88:	80 02       	ld.sh	r2,r0[0x0]
80024e8a:	4c 4a       	lddpc	r10,80024f98 <flashc_is_page_erased+0x8>

80024e8c <flashc_set_gp_fuse_byte>:
80024e8c:	eb cd 40 c0 	pushm	r6-r7,lr
80024e90:	1a 97       	mov	r7,sp
80024e92:	20 3d       	sub	sp,12
80024e94:	49 c6       	lddpc	r6,80024f04 <flashc_set_gp_fuse_byte+0x78>
80024e96:	1e 26       	rsub	r6,pc
80024e98:	ef 4c ff f8 	st.w	r7[-8],r12
80024e9c:	16 98       	mov	r8,r11
80024e9e:	ef 68 ff f4 	st.b	r7[-12],r8
80024ea2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024ea6:	58 08       	cp.w	r8,0
80024ea8:	c0 a0       	breq	80024ebc <flashc_set_gp_fuse_byte+0x30>
80024eaa:	e0 48 00 ff 	cp.w	r8,255
80024eae:	c0 d1       	brne	80024ec8 <flashc_set_gp_fuse_byte+0x3c>
80024eb0:	30 0b       	mov	r11,0
80024eb2:	ee fc ff f8 	ld.w	r12,r7[-8]
80024eb6:	f0 16 01 0e 	mcall	r6[1080]
80024eba:	c2 18       	rjmp	80024efc <flashc_set_gp_fuse_byte+0x70>
80024ebc:	30 0b       	mov	r11,0
80024ebe:	ee fc ff f8 	ld.w	r12,r7[-8]
80024ec2:	f0 16 00 8c 	mcall	r6[560]
80024ec6:	c1 b8       	rjmp	80024efc <flashc_set_gp_fuse_byte+0x70>
80024ec8:	30 0b       	mov	r11,0
80024eca:	ee fc ff f8 	ld.w	r12,r7[-8]
80024ece:	f0 16 01 0e 	mcall	r6[1080]
80024ed2:	ec f8 00 54 	ld.w	r8,r6[84]
80024ed6:	70 08       	ld.w	r8,r8[0x0]
80024ed8:	ef 48 ff fc 	st.w	r7[-4],r8
80024edc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024ee0:	10 9b       	mov	r11,r8
80024ee2:	ee fc ff f8 	ld.w	r12,r7[-8]
80024ee6:	f0 16 00 8c 	mcall	r6[560]
80024eea:	ec f8 00 54 	ld.w	r8,r6[84]
80024eee:	70 09       	ld.w	r9,r8[0x0]
80024ef0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ef4:	10 49       	or	r9,r8
80024ef6:	ec f8 00 54 	ld.w	r8,r6[84]
80024efa:	91 09       	st.w	r8[0x0],r9
80024efc:	2f dd       	sub	sp,-12
80024efe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f02:	00 00       	add	r0,r0
80024f04:	80 02       	ld.sh	r2,r0[0x0]
80024f06:	4d 1a       	lddpc	r10,80025048 <flashc_erase_all_pages+0x4>

80024f08 <flashc_set_all_gp_fuses>:
80024f08:	eb cd 40 c0 	pushm	r6-r7,lr
80024f0c:	1a 97       	mov	r7,sp
80024f0e:	20 3d       	sub	sp,12
80024f10:	49 86       	lddpc	r6,80024f70 <flashc_set_all_gp_fuses+0x68>
80024f12:	1e 26       	rsub	r6,pc
80024f14:	ee eb ff f4 	st.d	r7[-12],r10
80024f18:	ee e8 ff f4 	ld.d	r8,r7[-12]
80024f1c:	58 08       	cp.w	r8,0
80024f1e:	5c 29       	cpc	r9
80024f20:	c0 b0       	breq	80024f36 <flashc_set_all_gp_fuses+0x2e>
80024f22:	3f fa       	mov	r10,-1
80024f24:	3f fb       	mov	r11,-1
80024f26:	14 38       	cp.w	r8,r10
80024f28:	f6 09 13 00 	cpc	r9,r11
80024f2c:	c0 a1       	brne	80024f40 <flashc_set_all_gp_fuses+0x38>
80024f2e:	30 0c       	mov	r12,0
80024f30:	f0 16 00 d0 	mcall	r6[832]
80024f34:	c1 b8       	rjmp	80024f6a <flashc_set_all_gp_fuses+0x62>
80024f36:	30 0a       	mov	r10,0
80024f38:	30 0b       	mov	r11,0
80024f3a:	f0 16 00 f1 	mcall	r6[964]
80024f3e:	c1 68       	rjmp	80024f6a <flashc_set_all_gp_fuses+0x62>
80024f40:	30 0c       	mov	r12,0
80024f42:	f0 16 00 d0 	mcall	r6[832]
80024f46:	ec f8 00 54 	ld.w	r8,r6[84]
80024f4a:	70 08       	ld.w	r8,r8[0x0]
80024f4c:	ef 48 ff fc 	st.w	r7[-4],r8
80024f50:	ee ea ff f4 	ld.d	r10,r7[-12]
80024f54:	f0 16 00 f1 	mcall	r6[964]
80024f58:	ec f8 00 54 	ld.w	r8,r6[84]
80024f5c:	70 09       	ld.w	r9,r8[0x0]
80024f5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f62:	10 49       	or	r9,r8
80024f64:	ec f8 00 54 	ld.w	r8,r6[84]
80024f68:	91 09       	st.w	r8[0x0],r9
80024f6a:	2f dd       	sub	sp,-12
80024f6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f70:	80 02       	ld.sh	r2,r0[0x0]
80024f72:	4d 96       	lddpc	r6,800250d4 <flashc_write_page+0x8>

80024f74 <flashc_clear_page_buffer>:
80024f74:	eb cd 40 c0 	pushm	r6-r7,lr
80024f78:	1a 97       	mov	r7,sp
80024f7a:	48 56       	lddpc	r6,80024f8c <flashc_clear_page_buffer+0x18>
80024f7c:	1e 26       	rsub	r6,pc
80024f7e:	3f fb       	mov	r11,-1
80024f80:	30 3c       	mov	r12,3
80024f82:	f0 16 00 2a 	mcall	r6[168]
80024f86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f8a:	00 00       	add	r0,r0
80024f8c:	80 02       	ld.sh	r2,r0[0x0]
80024f8e:	4e 00       	lddpc	r0,8002510c <flashc_quick_user_page_read+0x1c>

80024f90 <flashc_is_page_erased>:
80024f90:	eb cd 40 80 	pushm	r7,lr
80024f94:	1a 97       	mov	r7,sp
80024f96:	fe 68 00 00 	mov	r8,-131072
80024f9a:	70 28       	ld.w	r8,r8[0x8]
80024f9c:	e2 18 00 20 	andl	r8,0x20,COH
80024fa0:	5f 18       	srne	r8
80024fa2:	5c 58       	castu.b	r8
80024fa4:	10 9c       	mov	r12,r8
80024fa6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024faa <flashc_quick_page_read>:
80024faa:	eb cd 40 c0 	pushm	r6-r7,lr
80024fae:	1a 97       	mov	r7,sp
80024fb0:	20 1d       	sub	sp,4
80024fb2:	48 96       	lddpc	r6,80024fd4 <flashc_quick_page_read+0x2a>
80024fb4:	1e 26       	rsub	r6,pc
80024fb6:	ef 4c ff fc 	st.w	r7[-4],r12
80024fba:	ee fb ff fc 	ld.w	r11,r7[-4]
80024fbe:	30 cc       	mov	r12,12
80024fc0:	f0 16 00 2a 	mcall	r6[168]
80024fc4:	f0 16 00 e0 	mcall	r6[896]
80024fc8:	18 98       	mov	r8,r12
80024fca:	10 9c       	mov	r12,r8
80024fcc:	2f fd       	sub	sp,-4
80024fce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fd2:	00 00       	add	r0,r0
80024fd4:	80 02       	ld.sh	r2,r0[0x0]
80024fd6:	4e 38       	lddpc	r8,80025160 <flashc_write_user_page+0x10>

80024fd8 <flashc_erase_page>:
80024fd8:	eb cd 40 c0 	pushm	r6-r7,lr
80024fdc:	1a 97       	mov	r7,sp
80024fde:	20 4d       	sub	sp,16
80024fe0:	49 86       	lddpc	r6,80025040 <flashc_erase_page+0x68>
80024fe2:	1e 26       	rsub	r6,pc
80024fe4:	ef 4c ff f4 	st.w	r7[-12],r12
80024fe8:	16 98       	mov	r8,r11
80024fea:	ef 68 ff f0 	st.b	r7[-16],r8
80024fee:	30 18       	mov	r8,1
80024ff0:	ef 68 ff fb 	st.b	r7[-5],r8
80024ff4:	ee fb ff f4 	ld.w	r11,r7[-12]
80024ff8:	30 2c       	mov	r12,2
80024ffa:	f0 16 00 2a 	mcall	r6[168]
80024ffe:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025002:	30 08       	mov	r8,0
80025004:	f0 09 18 00 	cp.b	r9,r8
80025008:	c1 50       	breq	80025032 <flashc_erase_page+0x5a>
8002500a:	ec f8 00 54 	ld.w	r8,r6[84]
8002500e:	70 08       	ld.w	r8,r8[0x0]
80025010:	ef 48 ff fc 	st.w	r7[-4],r8
80025014:	3f fc       	mov	r12,-1
80025016:	f0 16 01 75 	mcall	r6[1492]
8002501a:	18 98       	mov	r8,r12
8002501c:	ef 68 ff fb 	st.b	r7[-5],r8
80025020:	ec f8 00 54 	ld.w	r8,r6[84]
80025024:	70 09       	ld.w	r9,r8[0x0]
80025026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002502a:	10 49       	or	r9,r8
8002502c:	ec f8 00 54 	ld.w	r8,r6[84]
80025030:	91 09       	st.w	r8[0x0],r9
80025032:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80025036:	10 9c       	mov	r12,r8
80025038:	2f cd       	sub	sp,-16
8002503a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002503e:	00 00       	add	r0,r0
80025040:	80 02       	ld.sh	r2,r0[0x0]
80025042:	4e 66       	lddpc	r6,800251d8 <flashc_memset16+0x18>

80025044 <flashc_erase_all_pages>:
80025044:	eb cd 40 e0 	pushm	r5-r7,lr
80025048:	1a 97       	mov	r7,sp
8002504a:	20 4d       	sub	sp,16
8002504c:	49 f6       	lddpc	r6,800250c8 <flashc_erase_all_pages+0x84>
8002504e:	1e 26       	rsub	r6,pc
80025050:	18 98       	mov	r8,r12
80025052:	ef 68 ff f0 	st.b	r7[-16],r8
80025056:	30 18       	mov	r8,1
80025058:	ef 68 ff f7 	st.b	r7[-9],r8
8002505c:	30 08       	mov	r8,0
8002505e:	ef 48 ff f8 	st.w	r7[-8],r8
80025062:	f0 16 01 04 	mcall	r6[1040]
80025066:	18 98       	mov	r8,r12
80025068:	ef 48 ff fc 	st.w	r7[-4],r8
8002506c:	c1 f8       	rjmp	800250aa <flashc_erase_all_pages+0x66>
8002506e:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80025072:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002507a:	20 18       	sub	r8,1
8002507c:	ef 48 ff fc 	st.w	r7[-4],r8
80025080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025084:	12 9b       	mov	r11,r9
80025086:	10 9c       	mov	r12,r8
80025088:	f0 16 00 a2 	mcall	r6[648]
8002508c:	18 98       	mov	r8,r12
8002508e:	eb e8 00 08 	and	r8,r5,r8
80025092:	5f 18       	srne	r8
80025094:	ef 68 ff f7 	st.b	r7[-9],r8
80025098:	ec f8 00 54 	ld.w	r8,r6[84]
8002509c:	70 08       	ld.w	r8,r8[0x0]
8002509e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250a2:	f3 e8 10 08 	or	r8,r9,r8
800250a6:	ef 48 ff f8 	st.w	r7[-8],r8
800250aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800250ae:	58 08       	cp.w	r8,0
800250b0:	cd f1       	brne	8002506e <flashc_erase_all_pages+0x2a>
800250b2:	ec f8 00 54 	ld.w	r8,r6[84]
800250b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250ba:	91 09       	st.w	r8[0x0],r9
800250bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800250c0:	10 9c       	mov	r12,r8
800250c2:	2f cd       	sub	sp,-16
800250c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800250c8:	80 02       	ld.sh	r2,r0[0x0]
800250ca:	4e d2       	lddpc	r2,8002527c <flashc_memset64+0xc>

800250cc <flashc_write_page>:
800250cc:	eb cd 40 c0 	pushm	r6-r7,lr
800250d0:	1a 97       	mov	r7,sp
800250d2:	20 1d       	sub	sp,4
800250d4:	48 66       	lddpc	r6,800250ec <flashc_write_page+0x20>
800250d6:	1e 26       	rsub	r6,pc
800250d8:	ef 4c ff fc 	st.w	r7[-4],r12
800250dc:	ee fb ff fc 	ld.w	r11,r7[-4]
800250e0:	30 1c       	mov	r12,1
800250e2:	f0 16 00 2a 	mcall	r6[168]
800250e6:	2f fd       	sub	sp,-4
800250e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250ec:	80 02       	ld.sh	r2,r0[0x0]
800250ee:	4f 5a       	lddpc	r10,800252c0 <flashc_memset64+0x50>

800250f0 <flashc_quick_user_page_read>:
800250f0:	eb cd 40 c0 	pushm	r6-r7,lr
800250f4:	1a 97       	mov	r7,sp
800250f6:	48 76       	lddpc	r6,80025110 <flashc_quick_user_page_read+0x20>
800250f8:	1e 26       	rsub	r6,pc
800250fa:	3f fb       	mov	r11,-1
800250fc:	30 fc       	mov	r12,15
800250fe:	f0 16 00 2a 	mcall	r6[168]
80025102:	f0 16 00 e0 	mcall	r6[896]
80025106:	18 98       	mov	r8,r12
80025108:	10 9c       	mov	r12,r8
8002510a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002510e:	00 00       	add	r0,r0
80025110:	80 02       	ld.sh	r2,r0[0x0]
80025112:	4f 7c       	lddpc	r12,800252ec <flashc_memset64+0x7c>

80025114 <flashc_erase_user_page>:
80025114:	eb cd 40 c0 	pushm	r6-r7,lr
80025118:	1a 97       	mov	r7,sp
8002511a:	20 1d       	sub	sp,4
8002511c:	48 c6       	lddpc	r6,8002514c <flashc_erase_user_page+0x38>
8002511e:	1e 26       	rsub	r6,pc
80025120:	18 98       	mov	r8,r12
80025122:	ef 68 ff fc 	st.b	r7[-4],r8
80025126:	3f fb       	mov	r11,-1
80025128:	30 ec       	mov	r12,14
8002512a:	f0 16 00 2a 	mcall	r6[168]
8002512e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025132:	30 08       	mov	r8,0
80025134:	f0 09 18 00 	cp.b	r9,r8
80025138:	c0 50       	breq	80025142 <flashc_erase_user_page+0x2e>
8002513a:	f0 16 02 12 	mcall	r6[2120]
8002513e:	18 98       	mov	r8,r12
80025140:	c0 28       	rjmp	80025144 <flashc_erase_user_page+0x30>
80025142:	30 18       	mov	r8,1
80025144:	10 9c       	mov	r12,r8
80025146:	2f fd       	sub	sp,-4
80025148:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002514c:	80 02       	ld.sh	r2,r0[0x0]
8002514e:	4f a2       	lddpc	r2,80025334 <flashc_memset64+0xc4>

80025150 <flashc_write_user_page>:
80025150:	eb cd 40 c0 	pushm	r6-r7,lr
80025154:	1a 97       	mov	r7,sp
80025156:	48 56       	lddpc	r6,80025168 <flashc_write_user_page+0x18>
80025158:	1e 26       	rsub	r6,pc
8002515a:	3f fb       	mov	r11,-1
8002515c:	30 dc       	mov	r12,13
8002515e:	f0 16 00 2a 	mcall	r6[168]
80025162:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025166:	00 00       	add	r0,r0
80025168:	80 02       	ld.sh	r2,r0[0x0]
8002516a:	4f dc       	lddpc	r12,8002535c <flashc_memset64+0xec>

8002516c <flashc_memset8>:
8002516c:	eb cd 40 c0 	pushm	r6-r7,lr
80025170:	1a 97       	mov	r7,sp
80025172:	20 4d       	sub	sp,16
80025174:	49 26       	lddpc	r6,800251bc <flashc_memset8+0x50>
80025176:	1e 26       	rsub	r6,pc
80025178:	ef 4c ff fc 	st.w	r7[-4],r12
8002517c:	ef 4a ff f4 	st.w	r7[-12],r10
80025180:	12 98       	mov	r8,r9
80025182:	16 99       	mov	r9,r11
80025184:	ef 69 ff f8 	st.b	r7[-8],r9
80025188:	ef 68 ff f0 	st.b	r7[-16],r8
8002518c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025190:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80025194:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025198:	a9 68       	lsl	r8,0x8
8002519a:	5c 88       	casts.h	r8
8002519c:	f5 e8 10 08 	or	r8,r10,r8
800251a0:	5c 88       	casts.h	r8
800251a2:	5c 78       	castu.h	r8
800251a4:	ee fa ff f4 	ld.w	r10,r7[-12]
800251a8:	10 9b       	mov	r11,r8
800251aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800251ae:	f0 16 01 81 	mcall	r6[1540]
800251b2:	18 98       	mov	r8,r12
800251b4:	10 9c       	mov	r12,r8
800251b6:	2f cd       	sub	sp,-16
800251b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800251bc:	80 02       	ld.sh	r2,r0[0x0]
800251be:	4f fa       	lddpc	r10,800253b8 <flashc_memset64+0x148>

800251c0 <flashc_memset16>:
800251c0:	eb cd 40 c0 	pushm	r6-r7,lr
800251c4:	1a 97       	mov	r7,sp
800251c6:	20 4d       	sub	sp,16
800251c8:	49 16       	lddpc	r6,8002520c <flashc_memset16+0x4c>
800251ca:	1e 26       	rsub	r6,pc
800251cc:	ef 4c ff fc 	st.w	r7[-4],r12
800251d0:	ef 4a ff f4 	st.w	r7[-12],r10
800251d4:	12 98       	mov	r8,r9
800251d6:	16 99       	mov	r9,r11
800251d8:	ef 59 ff f8 	st.h	r7[-8],r9
800251dc:	ef 68 ff f0 	st.b	r7[-16],r8
800251e0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800251e4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800251e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800251ec:	b1 68       	lsl	r8,0x10
800251ee:	f5 e8 10 08 	or	r8,r10,r8
800251f2:	ee fa ff f4 	ld.w	r10,r7[-12]
800251f6:	10 9b       	mov	r11,r8
800251f8:	ee fc ff fc 	ld.w	r12,r7[-4]
800251fc:	f0 16 01 bb 	mcall	r6[1772]
80025200:	18 98       	mov	r8,r12
80025202:	10 9c       	mov	r12,r8
80025204:	2f cd       	sub	sp,-16
80025206:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002520a:	00 00       	add	r0,r0
8002520c:	80 02       	ld.sh	r2,r0[0x0]
8002520e:	50 4e       	stdsp	sp[0x10],lr

80025210 <flashc_memset32>:
80025210:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80025214:	1a 97       	mov	r7,sp
80025216:	20 6d       	sub	sp,24
80025218:	49 56       	lddpc	r6,8002526c <flashc_memset32+0x5c>
8002521a:	1e 26       	rsub	r6,pc
8002521c:	ef 4c ff fc 	st.w	r7[-4],r12
80025220:	ef 4b ff f8 	st.w	r7[-8],r11
80025224:	ef 4a ff f4 	st.w	r7[-12],r10
80025228:	12 98       	mov	r8,r9
8002522a:	ef 68 ff f0 	st.b	r7[-16],r8
8002522e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80025232:	ee f0 ff f8 	ld.w	r0,r7[-8]
80025236:	30 01       	mov	r1,0
80025238:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002523c:	ef 49 ff ec 	st.w	r7[-20],r9
80025240:	30 09       	mov	r9,0
80025242:	ef 49 ff e8 	st.w	r7[-24],r9
80025246:	ee f3 ff ec 	ld.w	r3,r7[-20]
8002524a:	a1 63       	lsl	r3,0x0
8002524c:	30 02       	mov	r2,0
8002524e:	e1 e2 10 0a 	or	r10,r0,r2
80025252:	e3 e3 10 0b 	or	r11,r1,r3
80025256:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002525a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002525e:	f0 16 01 a0 	mcall	r6[1664]
80025262:	18 98       	mov	r8,r12
80025264:	10 9c       	mov	r12,r8
80025266:	2f ad       	sub	sp,-24
80025268:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
8002526c:	80 02       	ld.sh	r2,r0[0x0]
8002526e:	50 9e       	stdsp	sp[0x24],lr

80025270 <flashc_memset64>:
80025270:	eb cd 40 c0 	pushm	r6-r7,lr
80025274:	1a 97       	mov	r7,sp
80025276:	21 bd       	sub	sp,108
80025278:	fe f6 04 14 	ld.w	r6,pc[1044]
8002527c:	1e 26       	rsub	r6,pc
8002527e:	ef 4c ff a4 	st.w	r7[-92],r12
80025282:	ee eb ff 9c 	st.d	r7[-100],r10
80025286:	ef 49 ff 98 	st.w	r7[-104],r9
8002528a:	ef 68 ff 94 	st.b	r7[-108],r8
8002528e:	30 08       	mov	r8,0
80025290:	30 09       	mov	r9,0
80025292:	ee e9 ff d8 	st.d	r7[-40],r8
80025296:	30 08       	mov	r8,0
80025298:	ef 48 ff ec 	st.w	r7[-20],r8
8002529c:	f0 16 00 c6 	mcall	r6[792]
800252a0:	18 99       	mov	r9,r12
800252a2:	fc 18 80 00 	movh	r8,0x8000
800252a6:	f2 08 00 08 	add	r8,r9,r8
800252aa:	ef 48 ff e4 	st.w	r7[-28],r8
800252ae:	ee f8 ff a4 	ld.w	r8,r7[-92]
800252b2:	ef 48 ff e0 	st.w	r7[-32],r8
800252b6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800252ba:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800252be:	20 18       	sub	r8,1
800252c0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800252c4:	ef 48 ff f0 	st.w	r7[-16],r8
800252c8:	c1 f8       	rjmp	80025306 <flashc_memset64+0x96>
800252ca:	ee f9 ff f0 	ld.w	r9,r7[-16]
800252ce:	ef 38 ff a3 	ld.ub	r8,r7[-93]
800252d2:	ee 09 00 09 	add	r9,r7,r9
800252d6:	f3 68 ff d8 	st.b	r9[-40],r8
800252da:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800252de:	b9 68       	lsl	r8,0x18
800252e0:	ee f9 ff a0 	ld.w	r9,r7[-96]
800252e4:	a9 89       	lsr	r9,0x8
800252e6:	f3 e8 10 08 	or	r8,r9,r8
800252ea:	ef 48 ff a0 	st.w	r7[-96],r8
800252ee:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800252f2:	a9 88       	lsr	r8,0x8
800252f4:	ef 48 ff 9c 	st.w	r7[-100],r8
800252f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800252fc:	20 18       	sub	r8,1
800252fe:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025302:	ef 48 ff f0 	st.w	r7[-16],r8
80025306:	ee e8 ff 9c 	ld.d	r8,r7[-100]
8002530a:	58 08       	cp.w	r8,0
8002530c:	5c 29       	cpc	r9
8002530e:	cd e1       	brne	800252ca <flashc_memset64+0x5a>
80025310:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025314:	ee f8 ff 98 	ld.w	r8,r7[-104]
80025318:	f2 08 00 08 	add	r8,r9,r8
8002531c:	ef 48 ff d4 	st.w	r7[-44],r8
80025320:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025324:	e0 69 ff ff 	mov	r9,65535
80025328:	ea 19 7f ff 	orh	r9,0x7fff
8002532c:	12 38       	cp.w	r8,r9
8002532e:	e0 8b 00 07 	brhi	8002533c <flashc_memset64+0xcc>
80025332:	fc 18 80 00 	movh	r8,0x8000
80025336:	ef 48 ff e0 	st.w	r7[-32],r8
8002533a:	c1 58       	rjmp	80025364 <flashc_memset64+0xf4>
8002533c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025340:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025344:	10 39       	cp.w	r9,r8
80025346:	e0 8b 00 0f 	brhi	80025364 <flashc_memset64+0xf4>
8002534a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002534e:	e0 69 ff ff 	mov	r9,65535
80025352:	ea 19 80 7f 	orh	r9,0x807f
80025356:	12 38       	cp.w	r8,r9
80025358:	e0 8b 00 06 	brhi	80025364 <flashc_memset64+0xf4>
8002535c:	fc 18 80 80 	movh	r8,0x8080
80025360:	ef 48 ff e0 	st.w	r7[-32],r8
80025364:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025368:	e0 69 02 00 	mov	r9,512
8002536c:	ea 19 80 80 	orh	r9,0x8080
80025370:	12 38       	cp.w	r8,r9
80025372:	e0 88 00 09 	brls	80025384 <flashc_memset64+0x114>
80025376:	e0 68 02 00 	mov	r8,512
8002537a:	ea 18 80 80 	orh	r8,0x8080
8002537e:	ef 48 ff d4 	st.w	r7[-44],r8
80025382:	c1 38       	rjmp	800253a8 <flashc_memset64+0x138>
80025384:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025388:	fc 19 80 80 	movh	r9,0x8080
8002538c:	12 38       	cp.w	r8,r9
8002538e:	e0 8b 00 0d 	brhi	800253a8 <flashc_memset64+0x138>
80025392:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025396:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002539a:	10 39       	cp.w	r9,r8
8002539c:	e0 88 00 06 	brls	800253a8 <flashc_memset64+0x138>
800253a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800253a4:	ef 48 ff d4 	st.w	r7[-44],r8
800253a8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800253ac:	a1 c8       	cbr	r8,0x0
800253ae:	ef 48 ff cc 	st.w	r7[-52],r8
800253b2:	ee f8 ff cc 	ld.w	r8,r7[-52]
800253b6:	e0 18 ff fc 	andl	r8,0xfffc
800253ba:	ef 48 ff c4 	st.w	r7[-60],r8
800253be:	ee f8 ff c4 	ld.w	r8,r7[-60]
800253c2:	e0 18 ff f8 	andl	r8,0xfff8
800253c6:	ef 48 ff bc 	st.w	r7[-68],r8
800253ca:	c4 f9       	rjmp	80025668 <flashc_memset64+0x3f8>
800253cc:	f0 16 01 26 	mcall	r6[1176]
800253d0:	ec f8 00 54 	ld.w	r8,r6[84]
800253d4:	70 08       	ld.w	r8,r8[0x0]
800253d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800253da:	f3 e8 10 08 	or	r8,r9,r8
800253de:	ef 48 ff ec 	st.w	r7[-20],r8
800253e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800253e6:	ef 48 ff f8 	st.w	r7[-8],r8
800253ea:	ee f8 ff e0 	ld.w	r8,r7[-32]
800253ee:	e0 18 fe 00 	andl	r8,0xfe00
800253f2:	f0 c8 fe 00 	sub	r8,r8,-512
800253f6:	ef 48 ff fc 	st.w	r7[-4],r8
800253fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800253fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025402:	f0 09 0d 48 	min	r8,r8,r9
80025406:	ef 48 ff f4 	st.w	r7[-12],r8
8002540a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002540e:	ef 48 ff b4 	st.w	r7[-76],r8
80025412:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025416:	10 9a       	mov	r10,r8
80025418:	e0 1a fe 00 	andl	r10,0xfe00
8002541c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025420:	10 99       	mov	r9,r8
80025422:	e0 19 fe 00 	andl	r9,0xfe00
80025426:	30 18       	mov	r8,1
80025428:	12 3a       	cp.w	r10,r9
8002542a:	c0 22       	brcc	8002542e <flashc_memset64+0x1be>
8002542c:	30 08       	mov	r8,0
8002542e:	ef 68 ff eb 	st.b	r7[-21],r8
80025432:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025436:	ee e9 ff ac 	st.d	r7[-84],r8
8002543a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002543e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025442:	c5 b0       	breq	800254f8 <flashc_memset64+0x288>
80025444:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025448:	e0 18 fe 00 	andl	r8,0xfe00
8002544c:	ef 48 ff a8 	st.w	r7[-88],r8
80025450:	c0 e8       	rjmp	8002546c <flashc_memset64+0x1fc>
80025452:	ee fa ff a8 	ld.w	r10,r7[-88]
80025456:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002545a:	f0 e8 00 00 	ld.d	r8,r8[0]
8002545e:	f4 e9 00 00 	st.d	r10[0],r8
80025462:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025466:	2f 88       	sub	r8,-8
80025468:	ef 48 ff a8 	st.w	r7[-88],r8
8002546c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025470:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025474:	e0 18 ff f8 	andl	r8,0xfff8
80025478:	10 39       	cp.w	r9,r8
8002547a:	ce c3       	brcs	80025452 <flashc_memset64+0x1e2>
8002547c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025480:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025484:	c3 a0       	breq	800254f8 <flashc_memset64+0x288>
80025486:	30 08       	mov	r8,0
80025488:	ef 48 ff f0 	st.w	r7[-16],r8
8002548c:	c1 38       	rjmp	800254b2 <flashc_memset64+0x242>
8002548e:	ee fa ff f0 	ld.w	r10,r7[-16]
80025492:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025496:	11 89       	ld.ub	r9,r8[0x0]
80025498:	5c 59       	castu.b	r9
8002549a:	ee 0a 00 0a 	add	r10,r7,r10
8002549e:	f5 69 ff ac 	st.b	r10[-84],r9
800254a2:	2f f8       	sub	r8,-1
800254a4:	ef 48 ff a8 	st.w	r7[-88],r8
800254a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254ac:	2f f8       	sub	r8,-1
800254ae:	ef 48 ff f0 	st.w	r7[-16],r8
800254b2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800254b6:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800254ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254be:	10 39       	cp.w	r9,r8
800254c0:	fe 9b ff e7 	brhi	8002548e <flashc_memset64+0x21e>
800254c4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800254c8:	e0 18 ff f8 	andl	r8,0xfff8
800254cc:	ef 48 ff e0 	st.w	r7[-32],r8
800254d0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800254d4:	ee f8 ff bc 	ld.w	r8,r7[-68]
800254d8:	10 39       	cp.w	r9,r8
800254da:	c0 f2       	brcc	800254f8 <flashc_memset64+0x288>
800254dc:	ee fa ff e0 	ld.w	r10,r7[-32]
800254e0:	ee e8 ff ac 	ld.d	r8,r7[-84]
800254e4:	f4 e9 00 00 	st.d	r10[0],r8
800254e8:	f4 c8 ff f8 	sub	r8,r10,-8
800254ec:	ef 48 ff e0 	st.w	r7[-32],r8
800254f0:	ee e8 ff d8 	ld.d	r8,r7[-40]
800254f4:	ee e9 ff ac 	st.d	r7[-84],r8
800254f8:	ee f8 ff b4 	ld.w	r8,r7[-76]
800254fc:	10 99       	mov	r9,r8
800254fe:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025502:	f2 08 01 08 	sub	r8,r9,r8
80025506:	a3 58       	asr	r8,0x3
80025508:	ef 48 ff f0 	st.w	r7[-16],r8
8002550c:	c1 08       	rjmp	8002552c <flashc_memset64+0x2bc>
8002550e:	ee fa ff e0 	ld.w	r10,r7[-32]
80025512:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025516:	f4 e9 00 00 	st.d	r10[0],r8
8002551a:	f4 c8 ff f8 	sub	r8,r10,-8
8002551e:	ef 48 ff e0 	st.w	r7[-32],r8
80025522:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025526:	20 18       	sub	r8,1
80025528:	ef 48 ff f0 	st.w	r7[-16],r8
8002552c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025530:	58 08       	cp.w	r8,0
80025532:	ce e1       	brne	8002550e <flashc_memset64+0x29e>
80025534:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80025538:	30 08       	mov	r8,0
8002553a:	f0 09 18 00 	cp.b	r9,r8
8002553e:	c4 70       	breq	800255cc <flashc_memset64+0x35c>
80025540:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025544:	ef 48 ff a8 	st.w	r7[-88],r8
80025548:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002554c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025550:	c3 80       	breq	800255c0 <flashc_memset64+0x350>
80025552:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025556:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002555a:	ef 48 ff f0 	st.w	r7[-16],r8
8002555e:	c1 38       	rjmp	80025584 <flashc_memset64+0x314>
80025560:	ee fa ff f0 	ld.w	r10,r7[-16]
80025564:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025568:	11 89       	ld.ub	r9,r8[0x0]
8002556a:	5c 59       	castu.b	r9
8002556c:	ee 0a 00 0a 	add	r10,r7,r10
80025570:	f5 69 ff ac 	st.b	r10[-84],r9
80025574:	2f f8       	sub	r8,-1
80025576:	ef 48 ff a8 	st.w	r7[-88],r8
8002557a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002557e:	2f f8       	sub	r8,-1
80025580:	ef 48 ff f0 	st.w	r7[-16],r8
80025584:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025588:	58 78       	cp.w	r8,7
8002558a:	fe 98 ff eb 	brls	80025560 <flashc_memset64+0x2f0>
8002558e:	ee fa ff e0 	ld.w	r10,r7[-32]
80025592:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025596:	f4 e9 00 00 	st.d	r10[0],r8
8002559a:	f4 c8 ff f8 	sub	r8,r10,-8
8002559e:	ef 48 ff e0 	st.w	r7[-32],r8
800255a2:	c1 08       	rjmp	800255c2 <flashc_memset64+0x352>
800255a4:	ee fa ff a8 	ld.w	r10,r7[-88]
800255a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800255ac:	f0 e8 00 00 	ld.d	r8,r8[0]
800255b0:	f4 e9 00 00 	st.d	r10[0],r8
800255b4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800255b8:	2f 88       	sub	r8,-8
800255ba:	ef 48 ff a8 	st.w	r7[-88],r8
800255be:	c0 28       	rjmp	800255c2 <flashc_memset64+0x352>
800255c0:	d7 03       	nop
800255c2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800255c6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800255ca:	ce d1       	brne	800255a4 <flashc_memset64+0x334>
800255cc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800255d0:	fc 19 80 80 	movh	r9,0x8080
800255d4:	12 38       	cp.w	r8,r9
800255d6:	e0 8b 00 2c 	brhi	8002562e <flashc_memset64+0x3be>
800255da:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800255de:	30 08       	mov	r8,0
800255e0:	f0 09 18 00 	cp.b	r9,r8
800255e4:	c0 e0       	breq	80025600 <flashc_memset64+0x390>
800255e6:	30 0b       	mov	r11,0
800255e8:	3f fc       	mov	r12,-1
800255ea:	f0 16 00 a2 	mcall	r6[648]
800255ee:	ec f8 00 54 	ld.w	r8,r6[84]
800255f2:	70 08       	ld.w	r8,r8[0x0]
800255f4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800255f8:	f3 e8 10 08 	or	r8,r9,r8
800255fc:	ef 48 ff ec 	st.w	r7[-20],r8
80025600:	3f fc       	mov	r12,-1
80025602:	f0 16 00 f5 	mcall	r6[980]
80025606:	ec f8 00 54 	ld.w	r8,r6[84]
8002560a:	70 08       	ld.w	r8,r8[0x0]
8002560c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025610:	f3 e8 10 08 	or	r8,r9,r8
80025614:	ef 48 ff ec 	st.w	r7[-20],r8
80025618:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002561c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025620:	10 39       	cp.w	r9,r8
80025622:	c2 33       	brcs	80025668 <flashc_memset64+0x3f8>
80025624:	fc 18 80 80 	movh	r8,0x8080
80025628:	ef 48 ff e0 	st.w	r7[-32],r8
8002562c:	c1 e8       	rjmp	80025668 <flashc_memset64+0x3f8>
8002562e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025632:	30 08       	mov	r8,0
80025634:	f0 09 18 00 	cp.b	r9,r8
80025638:	c0 d0       	breq	80025652 <flashc_memset64+0x3e2>
8002563a:	30 0c       	mov	r12,0
8002563c:	f0 16 01 2b 	mcall	r6[1196]
80025640:	ec f8 00 54 	ld.w	r8,r6[84]
80025644:	70 08       	ld.w	r8,r8[0x0]
80025646:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002564a:	f3 e8 10 08 	or	r8,r9,r8
8002564e:	ef 48 ff ec 	st.w	r7[-20],r8
80025652:	f0 16 00 f4 	mcall	r6[976]
80025656:	ec f8 00 54 	ld.w	r8,r6[84]
8002565a:	70 08       	ld.w	r8,r8[0x0]
8002565c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025660:	f3 e8 10 08 	or	r8,r9,r8
80025664:	ef 48 ff ec 	st.w	r7[-20],r8
80025668:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002566c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025670:	10 39       	cp.w	r9,r8
80025672:	fe 93 fe ad 	brlo	800253cc <flashc_memset64+0x15c>
80025676:	ec f8 00 54 	ld.w	r8,r6[84]
8002567a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002567e:	91 09       	st.w	r8[0x0],r9
80025680:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025684:	10 9c       	mov	r12,r8
80025686:	2e 5d       	sub	sp,-108
80025688:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002568c:	80 02       	ld.sh	r2,r0[0x0]
8002568e:	51 00       	stdsp	sp[0x40],r0

80025690 <flashc_memcpy>:
80025690:	eb cd 40 c0 	pushm	r6-r7,lr
80025694:	1a 97       	mov	r7,sp
80025696:	21 ad       	sub	sp,104
80025698:	fe f6 05 80 	ld.w	r6,pc[1408]
8002569c:	1e 26       	rsub	r6,pc
8002569e:	ef 4c ff a4 	st.w	r7[-92],r12
800256a2:	ef 4b ff a0 	st.w	r7[-96],r11
800256a6:	ef 4a ff 9c 	st.w	r7[-100],r10
800256aa:	12 98       	mov	r8,r9
800256ac:	ef 68 ff 98 	st.b	r7[-104],r8
800256b0:	30 08       	mov	r8,0
800256b2:	ef 68 ff e7 	st.b	r7[-25],r8
800256b6:	30 08       	mov	r8,0
800256b8:	ef 48 ff e8 	st.w	r7[-24],r8
800256bc:	f0 16 00 c6 	mcall	r6[792]
800256c0:	18 99       	mov	r9,r12
800256c2:	fc 18 80 00 	movh	r8,0x8000
800256c6:	f2 08 00 08 	add	r8,r9,r8
800256ca:	ef 48 ff e0 	st.w	r7[-32],r8
800256ce:	ee f8 ff a4 	ld.w	r8,r7[-92]
800256d2:	ef 48 ff dc 	st.w	r7[-36],r8
800256d6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800256da:	ef 48 ff d8 	st.w	r7[-40],r8
800256de:	ee f9 ff dc 	ld.w	r9,r7[-36]
800256e2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800256e6:	f2 08 00 08 	add	r8,r9,r8
800256ea:	ef 48 ff d4 	st.w	r7[-44],r8
800256ee:	ee f8 ff dc 	ld.w	r8,r7[-36]
800256f2:	e0 6a ff ff 	mov	r10,65535
800256f6:	ea 1a 7f ff 	orh	r10,0x7fff
800256fa:	14 38       	cp.w	r8,r10
800256fc:	e0 8b 00 13 	brhi	80025722 <flashc_memcpy+0x92>
80025700:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025704:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025708:	fc 1a 80 00 	movh	r10,0x8000
8002570c:	f4 08 01 08 	sub	r8,r10,r8
80025710:	f2 08 00 08 	add	r8,r9,r8
80025714:	ef 48 ff d8 	st.w	r7[-40],r8
80025718:	fc 18 80 00 	movh	r8,0x8000
8002571c:	ef 48 ff dc 	st.w	r7[-36],r8
80025720:	c2 18       	rjmp	80025762 <flashc_memcpy+0xd2>
80025722:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025726:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002572a:	10 39       	cp.w	r9,r8
8002572c:	e0 8b 00 1b 	brhi	80025762 <flashc_memcpy+0xd2>
80025730:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025734:	e0 69 ff ff 	mov	r9,65535
80025738:	ea 19 80 7f 	orh	r9,0x807f
8002573c:	12 38       	cp.w	r8,r9
8002573e:	e0 8b 00 12 	brhi	80025762 <flashc_memcpy+0xd2>
80025742:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025746:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002574a:	fc 1a 80 80 	movh	r10,0x8080
8002574e:	f4 08 01 08 	sub	r8,r10,r8
80025752:	f2 08 00 08 	add	r8,r9,r8
80025756:	ef 48 ff d8 	st.w	r7[-40],r8
8002575a:	fc 18 80 80 	movh	r8,0x8080
8002575e:	ef 48 ff dc 	st.w	r7[-36],r8
80025762:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025766:	e0 69 02 00 	mov	r9,512
8002576a:	ea 19 80 80 	orh	r9,0x8080
8002576e:	12 38       	cp.w	r8,r9
80025770:	e0 88 00 09 	brls	80025782 <flashc_memcpy+0xf2>
80025774:	e0 68 02 00 	mov	r8,512
80025778:	ea 18 80 80 	orh	r8,0x8080
8002577c:	ef 48 ff d4 	st.w	r7[-44],r8
80025780:	c1 38       	rjmp	800257a6 <flashc_memcpy+0x116>
80025782:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025786:	fc 1a 80 80 	movh	r10,0x8080
8002578a:	14 38       	cp.w	r8,r10
8002578c:	e0 8b 00 0d 	brhi	800257a6 <flashc_memcpy+0x116>
80025790:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025794:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025798:	10 39       	cp.w	r9,r8
8002579a:	e0 88 00 06 	brls	800257a6 <flashc_memcpy+0x116>
8002579e:	ee f8 ff e0 	ld.w	r8,r7[-32]
800257a2:	ef 48 ff d4 	st.w	r7[-44],r8
800257a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800257aa:	a1 c8       	cbr	r8,0x0
800257ac:	ef 48 ff cc 	st.w	r7[-52],r8
800257b0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800257b4:	e0 18 ff fc 	andl	r8,0xfffc
800257b8:	ef 48 ff c4 	st.w	r7[-60],r8
800257bc:	ee f8 ff c4 	ld.w	r8,r7[-60]
800257c0:	e0 18 ff f8 	andl	r8,0xfff8
800257c4:	ef 48 ff bc 	st.w	r7[-68],r8
800257c8:	e0 8f 02 16 	bral	80025bf4 <flashc_memcpy+0x564>
800257cc:	f0 16 01 26 	mcall	r6[1176]
800257d0:	ec f8 00 54 	ld.w	r8,r6[84]
800257d4:	70 08       	ld.w	r8,r8[0x0]
800257d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800257da:	f3 e8 10 08 	or	r8,r9,r8
800257de:	ef 48 ff e8 	st.w	r7[-24],r8
800257e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800257e6:	ef 48 ff f8 	st.w	r7[-8],r8
800257ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800257ee:	e0 18 fe 00 	andl	r8,0xfe00
800257f2:	f0 c8 fe 00 	sub	r8,r8,-512
800257f6:	ef 48 ff fc 	st.w	r7[-4],r8
800257fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800257fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025802:	f0 09 0d 48 	min	r8,r8,r9
80025806:	ef 48 ff f4 	st.w	r7[-12],r8
8002580a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002580e:	ef 48 ff b4 	st.w	r7[-76],r8
80025812:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025816:	10 9a       	mov	r10,r8
80025818:	e0 1a fe 00 	andl	r10,0xfe00
8002581c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025820:	10 99       	mov	r9,r8
80025822:	e0 19 fe 00 	andl	r9,0xfe00
80025826:	30 18       	mov	r8,1
80025828:	12 3a       	cp.w	r10,r9
8002582a:	c0 22       	brcc	8002582e <flashc_memcpy+0x19e>
8002582c:	30 08       	mov	r8,0
8002582e:	ef 68 ff e6 	st.b	r7[-26],r8
80025832:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025836:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002583a:	c7 20       	breq	8002591e <flashc_memcpy+0x28e>
8002583c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025840:	e0 18 fe 00 	andl	r8,0xfe00
80025844:	ef 48 ff a8 	st.w	r7[-88],r8
80025848:	c0 e8       	rjmp	80025864 <flashc_memcpy+0x1d4>
8002584a:	ee fa ff a8 	ld.w	r10,r7[-88]
8002584e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025852:	f0 e8 00 00 	ld.d	r8,r8[0]
80025856:	f4 e9 00 00 	st.d	r10[0],r8
8002585a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002585e:	2f 88       	sub	r8,-8
80025860:	ef 48 ff a8 	st.w	r7[-88],r8
80025864:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025868:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002586c:	e0 18 ff f8 	andl	r8,0xfff8
80025870:	10 39       	cp.w	r9,r8
80025872:	ce c3       	brcs	8002584a <flashc_memcpy+0x1ba>
80025874:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025878:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002587c:	c5 10       	breq	8002591e <flashc_memcpy+0x28e>
8002587e:	30 08       	mov	r8,0
80025880:	ef 48 ff ec 	st.w	r7[-20],r8
80025884:	c1 38       	rjmp	800258aa <flashc_memcpy+0x21a>
80025886:	ee fa ff ec 	ld.w	r10,r7[-20]
8002588a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002588e:	11 89       	ld.ub	r9,r8[0x0]
80025890:	5c 59       	castu.b	r9
80025892:	ee 0a 00 0a 	add	r10,r7,r10
80025896:	f5 69 ff ac 	st.b	r10[-84],r9
8002589a:	2f f8       	sub	r8,-1
8002589c:	ef 48 ff a8 	st.w	r7[-88],r8
800258a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800258a4:	2f f8       	sub	r8,-1
800258a6:	ef 48 ff ec 	st.w	r7[-20],r8
800258aa:	ee f8 ff dc 	ld.w	r8,r7[-36]
800258ae:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800258b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800258b6:	10 39       	cp.w	r9,r8
800258b8:	fe 9b ff e7 	brhi	80025886 <flashc_memcpy+0x1f6>
800258bc:	c1 28       	rjmp	800258e0 <flashc_memcpy+0x250>
800258be:	ee fa ff ec 	ld.w	r10,r7[-20]
800258c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800258c6:	11 89       	ld.ub	r9,r8[0x0]
800258c8:	ee 0a 00 0a 	add	r10,r7,r10
800258cc:	f5 69 ff ac 	st.b	r10[-84],r9
800258d0:	2f f8       	sub	r8,-1
800258d2:	ef 48 ff d8 	st.w	r7[-40],r8
800258d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800258da:	2f f8       	sub	r8,-1
800258dc:	ef 48 ff ec 	st.w	r7[-20],r8
800258e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800258e4:	58 78       	cp.w	r8,7
800258e6:	fe 98 ff ec 	brls	800258be <flashc_memcpy+0x22e>
800258ea:	ee f8 ff dc 	ld.w	r8,r7[-36]
800258ee:	e0 18 ff f8 	andl	r8,0xfff8
800258f2:	ef 48 ff dc 	st.w	r7[-36],r8
800258f6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800258fa:	ee f8 ff bc 	ld.w	r8,r7[-68]
800258fe:	10 39       	cp.w	r9,r8
80025900:	c0 c2       	brcc	80025918 <flashc_memcpy+0x288>
80025902:	ee fa ff dc 	ld.w	r10,r7[-36]
80025906:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002590a:	f4 e9 00 00 	st.d	r10[0],r8
8002590e:	f4 c8 ff f8 	sub	r8,r10,-8
80025912:	ef 48 ff dc 	st.w	r7[-36],r8
80025916:	c0 48       	rjmp	8002591e <flashc_memcpy+0x28e>
80025918:	30 18       	mov	r8,1
8002591a:	ef 68 ff e7 	st.b	r7[-25],r8
8002591e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025922:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80025926:	c0 40       	breq	8002592e <flashc_memcpy+0x29e>
80025928:	58 28       	cp.w	r8,2
8002592a:	c2 70       	breq	80025978 <flashc_memcpy+0x2e8>
8002592c:	c6 18       	rjmp	800259ee <flashc_memcpy+0x35e>
8002592e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80025932:	10 99       	mov	r9,r8
80025934:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025938:	f2 08 01 08 	sub	r8,r9,r8
8002593c:	a3 58       	asr	r8,0x3
8002593e:	ef 48 ff ec 	st.w	r7[-20],r8
80025942:	c1 68       	rjmp	8002596e <flashc_memcpy+0x2de>
80025944:	ee fb ff dc 	ld.w	r11,r7[-36]
80025948:	ee fa ff d8 	ld.w	r10,r7[-40]
8002594c:	f4 e8 00 00 	ld.d	r8,r10[0]
80025950:	f6 e9 00 00 	st.d	r11[0],r8
80025954:	f6 c8 ff f8 	sub	r8,r11,-8
80025958:	ef 48 ff dc 	st.w	r7[-36],r8
8002595c:	f4 c8 ff f8 	sub	r8,r10,-8
80025960:	ef 48 ff d8 	st.w	r7[-40],r8
80025964:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025968:	20 18       	sub	r8,1
8002596a:	ef 48 ff ec 	st.w	r7[-20],r8
8002596e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025972:	58 08       	cp.w	r8,0
80025974:	ce 81       	brne	80025944 <flashc_memcpy+0x2b4>
80025976:	c7 48       	rjmp	80025a5e <flashc_memcpy+0x3ce>
80025978:	ee f8 ff b4 	ld.w	r8,r7[-76]
8002597c:	10 99       	mov	r9,r8
8002597e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025982:	f2 08 01 08 	sub	r8,r9,r8
80025986:	a3 58       	asr	r8,0x3
80025988:	ef 48 ff ec 	st.w	r7[-20],r8
8002598c:	c2 c8       	rjmp	800259e4 <flashc_memcpy+0x354>
8002598e:	30 08       	mov	r8,0
80025990:	ef 48 ff f0 	st.w	r7[-16],r8
80025994:	c1 48       	rjmp	800259bc <flashc_memcpy+0x32c>
80025996:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002599a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002599e:	92 0a       	ld.sh	r10,r9[0x0]
800259a0:	a1 78       	lsl	r8,0x1
800259a2:	ee 08 00 08 	add	r8,r7,r8
800259a6:	f1 5a ff ac 	st.h	r8[-84],r10
800259aa:	f2 c8 ff fe 	sub	r8,r9,-2
800259ae:	ef 48 ff d8 	st.w	r7[-40],r8
800259b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800259b6:	2f f8       	sub	r8,-1
800259b8:	ef 48 ff f0 	st.w	r7[-16],r8
800259bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800259c0:	58 38       	cp.w	r8,3
800259c2:	fe 98 ff ea 	brls	80025996 <flashc_memcpy+0x306>
800259c6:	ee fa ff dc 	ld.w	r10,r7[-36]
800259ca:	ee e8 ff ac 	ld.d	r8,r7[-84]
800259ce:	f4 e9 00 00 	st.d	r10[0],r8
800259d2:	f4 c8 ff f8 	sub	r8,r10,-8
800259d6:	ef 48 ff dc 	st.w	r7[-36],r8
800259da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800259de:	20 18       	sub	r8,1
800259e0:	ef 48 ff ec 	st.w	r7[-20],r8
800259e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800259e8:	58 08       	cp.w	r8,0
800259ea:	cd 21       	brne	8002598e <flashc_memcpy+0x2fe>
800259ec:	c3 98       	rjmp	80025a5e <flashc_memcpy+0x3ce>
800259ee:	ee f8 ff b4 	ld.w	r8,r7[-76]
800259f2:	10 99       	mov	r9,r8
800259f4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800259f8:	f2 08 01 08 	sub	r8,r9,r8
800259fc:	a3 58       	asr	r8,0x3
800259fe:	ef 48 ff ec 	st.w	r7[-20],r8
80025a02:	c2 a8       	rjmp	80025a56 <flashc_memcpy+0x3c6>
80025a04:	30 08       	mov	r8,0
80025a06:	ef 48 ff f0 	st.w	r7[-16],r8
80025a0a:	c1 28       	rjmp	80025a2e <flashc_memcpy+0x39e>
80025a0c:	ee fa ff f0 	ld.w	r10,r7[-16]
80025a10:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025a14:	11 89       	ld.ub	r9,r8[0x0]
80025a16:	ee 0a 00 0a 	add	r10,r7,r10
80025a1a:	f5 69 ff ac 	st.b	r10[-84],r9
80025a1e:	2f f8       	sub	r8,-1
80025a20:	ef 48 ff d8 	st.w	r7[-40],r8
80025a24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025a28:	2f f8       	sub	r8,-1
80025a2a:	ef 48 ff f0 	st.w	r7[-16],r8
80025a2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025a32:	58 78       	cp.w	r8,7
80025a34:	fe 98 ff ec 	brls	80025a0c <flashc_memcpy+0x37c>
80025a38:	ee fa ff dc 	ld.w	r10,r7[-36]
80025a3c:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025a40:	f4 e9 00 00 	st.d	r10[0],r8
80025a44:	f4 c8 ff f8 	sub	r8,r10,-8
80025a48:	ef 48 ff dc 	st.w	r7[-36],r8
80025a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025a50:	20 18       	sub	r8,1
80025a52:	ef 48 ff ec 	st.w	r7[-20],r8
80025a56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025a5a:	58 08       	cp.w	r8,0
80025a5c:	cd 41       	brne	80025a04 <flashc_memcpy+0x374>
80025a5e:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80025a62:	30 08       	mov	r8,0
80025a64:	f0 09 18 00 	cp.b	r9,r8
80025a68:	c6 c0       	breq	80025b40 <flashc_memcpy+0x4b0>
80025a6a:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80025a6e:	30 08       	mov	r8,0
80025a70:	f0 09 18 00 	cp.b	r9,r8
80025a74:	c0 80       	breq	80025a84 <flashc_memcpy+0x3f4>
80025a76:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a7a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025a7e:	ef 48 ff ec 	st.w	r7[-20],r8
80025a82:	c1 f8       	rjmp	80025ac0 <flashc_memcpy+0x430>
80025a84:	30 08       	mov	r8,0
80025a86:	ef 48 ff ec 	st.w	r7[-20],r8
80025a8a:	c1 28       	rjmp	80025aae <flashc_memcpy+0x41e>
80025a8c:	ee fa ff ec 	ld.w	r10,r7[-20]
80025a90:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025a94:	11 89       	ld.ub	r9,r8[0x0]
80025a96:	ee 0a 00 0a 	add	r10,r7,r10
80025a9a:	f5 69 ff ac 	st.b	r10[-84],r9
80025a9e:	2f f8       	sub	r8,-1
80025aa0:	ef 48 ff d8 	st.w	r7[-40],r8
80025aa4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025aa8:	2f f8       	sub	r8,-1
80025aaa:	ef 48 ff ec 	st.w	r7[-20],r8
80025aae:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ab2:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025ab6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025aba:	10 39       	cp.w	r9,r8
80025abc:	fe 9b ff e8 	brhi	80025a8c <flashc_memcpy+0x3fc>
80025ac0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ac4:	ef 48 ff a8 	st.w	r7[-88],r8
80025ac8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025acc:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025ad0:	c3 20       	breq	80025b34 <flashc_memcpy+0x4a4>
80025ad2:	c1 38       	rjmp	80025af8 <flashc_memcpy+0x468>
80025ad4:	ee fa ff ec 	ld.w	r10,r7[-20]
80025ad8:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025adc:	11 89       	ld.ub	r9,r8[0x0]
80025ade:	5c 59       	castu.b	r9
80025ae0:	ee 0a 00 0a 	add	r10,r7,r10
80025ae4:	f5 69 ff ac 	st.b	r10[-84],r9
80025ae8:	2f f8       	sub	r8,-1
80025aea:	ef 48 ff a8 	st.w	r7[-88],r8
80025aee:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025af2:	2f f8       	sub	r8,-1
80025af4:	ef 48 ff ec 	st.w	r7[-20],r8
80025af8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025afc:	58 78       	cp.w	r8,7
80025afe:	fe 98 ff eb 	brls	80025ad4 <flashc_memcpy+0x444>
80025b02:	ee fa ff dc 	ld.w	r10,r7[-36]
80025b06:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025b0a:	f4 e9 00 00 	st.d	r10[0],r8
80025b0e:	f4 c8 ff f8 	sub	r8,r10,-8
80025b12:	ef 48 ff dc 	st.w	r7[-36],r8
80025b16:	c1 08       	rjmp	80025b36 <flashc_memcpy+0x4a6>
80025b18:	ee fa ff a8 	ld.w	r10,r7[-88]
80025b1c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b20:	f0 e8 00 00 	ld.d	r8,r8[0]
80025b24:	f4 e9 00 00 	st.d	r10[0],r8
80025b28:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b2c:	2f 88       	sub	r8,-8
80025b2e:	ef 48 ff a8 	st.w	r7[-88],r8
80025b32:	c0 28       	rjmp	80025b36 <flashc_memcpy+0x4a6>
80025b34:	d7 03       	nop
80025b36:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b3a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025b3e:	ce d1       	brne	80025b18 <flashc_memcpy+0x488>
80025b40:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025b44:	fc 19 80 80 	movh	r9,0x8080
80025b48:	12 38       	cp.w	r8,r9
80025b4a:	e0 8b 00 38 	brhi	80025bba <flashc_memcpy+0x52a>
80025b4e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80025b52:	30 08       	mov	r8,0
80025b54:	f0 09 18 00 	cp.b	r9,r8
80025b58:	c0 e0       	breq	80025b74 <flashc_memcpy+0x4e4>
80025b5a:	30 0b       	mov	r11,0
80025b5c:	3f fc       	mov	r12,-1
80025b5e:	f0 16 00 a2 	mcall	r6[648]
80025b62:	ec f8 00 54 	ld.w	r8,r6[84]
80025b66:	70 08       	ld.w	r8,r8[0x0]
80025b68:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025b6c:	f3 e8 10 08 	or	r8,r9,r8
80025b70:	ef 48 ff e8 	st.w	r7[-24],r8
80025b74:	3f fc       	mov	r12,-1
80025b76:	f0 16 00 f5 	mcall	r6[980]
80025b7a:	ec f8 00 54 	ld.w	r8,r6[84]
80025b7e:	70 08       	ld.w	r8,r8[0x0]
80025b80:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025b84:	f3 e8 10 08 	or	r8,r9,r8
80025b88:	ef 48 ff e8 	st.w	r7[-24],r8
80025b8c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025b90:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b94:	10 39       	cp.w	r9,r8
80025b96:	c2 f3       	brcs	80025bf4 <flashc_memcpy+0x564>
80025b98:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025b9c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025ba0:	fc 1a 80 80 	movh	r10,0x8080
80025ba4:	f4 08 01 08 	sub	r8,r10,r8
80025ba8:	f2 08 00 08 	add	r8,r9,r8
80025bac:	ef 48 ff d8 	st.w	r7[-40],r8
80025bb0:	fc 18 80 80 	movh	r8,0x8080
80025bb4:	ef 48 ff dc 	st.w	r7[-36],r8
80025bb8:	c1 e8       	rjmp	80025bf4 <flashc_memcpy+0x564>
80025bba:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80025bbe:	30 08       	mov	r8,0
80025bc0:	f0 09 18 00 	cp.b	r9,r8
80025bc4:	c0 d0       	breq	80025bde <flashc_memcpy+0x54e>
80025bc6:	30 0c       	mov	r12,0
80025bc8:	f0 16 01 2b 	mcall	r6[1196]
80025bcc:	ec f8 00 54 	ld.w	r8,r6[84]
80025bd0:	70 08       	ld.w	r8,r8[0x0]
80025bd2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025bd6:	f3 e8 10 08 	or	r8,r9,r8
80025bda:	ef 48 ff e8 	st.w	r7[-24],r8
80025bde:	f0 16 00 f4 	mcall	r6[976]
80025be2:	ec f8 00 54 	ld.w	r8,r6[84]
80025be6:	70 08       	ld.w	r8,r8[0x0]
80025be8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025bec:	f3 e8 10 08 	or	r8,r9,r8
80025bf0:	ef 48 ff e8 	st.w	r7[-24],r8
80025bf4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025bf8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025bfc:	10 39       	cp.w	r9,r8
80025bfe:	fe 93 fd e7 	brlo	800257cc <flashc_memcpy+0x13c>
80025c02:	ec f8 00 54 	ld.w	r8,r6[84]
80025c06:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025c0a:	91 09       	st.w	r8[0x0],r9
80025c0c:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025c10:	10 9c       	mov	r12,r8
80025c12:	2e 6d       	sub	sp,-104
80025c14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c18:	80 02       	ld.sh	r2,r0[0x0]
80025c1a:	55 20       	stdsp	sp[0x148],r0

80025c1c <flashc_set_flash_waitstate_and_readmode>:
80025c1c:	eb cd 40 c0 	pushm	r6-r7,lr
80025c20:	1a 97       	mov	r7,sp
80025c22:	20 1d       	sub	sp,4
80025c24:	49 76       	lddpc	r6,80025c80 <flashc_set_flash_waitstate_and_readmode+0x64>
80025c26:	1e 26       	rsub	r6,pc
80025c28:	ef 4c ff fc 	st.w	r7[-4],r12
80025c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c30:	e0 69 8a 40 	mov	r9,35392
80025c34:	ea 19 01 f7 	orh	r9,0x1f7
80025c38:	12 38       	cp.w	r8,r9
80025c3a:	e0 88 00 18 	brls	80025c6a <flashc_set_flash_waitstate_and_readmode+0x4e>
80025c3e:	30 1c       	mov	r12,1
80025c40:	f0 16 00 9b 	mcall	r6[620]
80025c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c48:	e0 69 14 80 	mov	r9,5248
80025c4c:	ea 19 03 ef 	orh	r9,0x3ef
80025c50:	12 38       	cp.w	r8,r9
80025c52:	e0 8b 00 07 	brhi	80025c60 <flashc_set_flash_waitstate_and_readmode+0x44>
80025c56:	3f fb       	mov	r11,-1
80025c58:	31 1c       	mov	r12,17
80025c5a:	f0 16 00 2a 	mcall	r6[168]
80025c5e:	c0 d8       	rjmp	80025c78 <flashc_set_flash_waitstate_and_readmode+0x5c>
80025c60:	3f fb       	mov	r11,-1
80025c62:	31 0c       	mov	r12,16
80025c64:	f0 16 00 2a 	mcall	r6[168]
80025c68:	c0 88       	rjmp	80025c78 <flashc_set_flash_waitstate_and_readmode+0x5c>
80025c6a:	30 0c       	mov	r12,0
80025c6c:	f0 16 00 9b 	mcall	r6[620]
80025c70:	3f fb       	mov	r11,-1
80025c72:	31 1c       	mov	r12,17
80025c74:	f0 16 00 2a 	mcall	r6[168]
80025c78:	2f fd       	sub	sp,-4
80025c7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c7e:	00 00       	add	r0,r0
80025c80:	80 02       	ld.sh	r2,r0[0x0]
80025c82:	5a aa       	cp.w	r10,-22

80025c84 <gpio_enable_module>:
80025c84:	eb cd 40 c0 	pushm	r6-r7,lr
80025c88:	1a 97       	mov	r7,sp
80025c8a:	20 4d       	sub	sp,16
80025c8c:	49 b6       	lddpc	r6,80025cf8 <gpio_enable_module+0x74>
80025c8e:	1e 26       	rsub	r6,pc
80025c90:	ef 4c ff f4 	st.w	r7[-12],r12
80025c94:	ef 4b ff f0 	st.w	r7[-16],r11
80025c98:	30 08       	mov	r8,0
80025c9a:	ef 48 ff f8 	st.w	r7[-8],r8
80025c9e:	30 08       	mov	r8,0
80025ca0:	ef 48 ff fc 	st.w	r7[-4],r8
80025ca4:	c1 d8       	rjmp	80025cde <gpio_enable_module+0x5a>
80025ca6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025caa:	11 98       	ld.ub	r8,r8[0x1]
80025cac:	10 99       	mov	r9,r8
80025cae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025cb2:	11 88       	ld.ub	r8,r8[0x0]
80025cb4:	12 9b       	mov	r11,r9
80025cb6:	10 9c       	mov	r12,r8
80025cb8:	f0 16 00 3e 	mcall	r6[248]
80025cbc:	18 98       	mov	r8,r12
80025cbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025cc2:	f3 e8 10 08 	or	r8,r9,r8
80025cc6:	ef 48 ff f8 	st.w	r7[-8],r8
80025cca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025cce:	2f e8       	sub	r8,-2
80025cd0:	ef 48 ff f4 	st.w	r7[-12],r8
80025cd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025cd8:	2f f8       	sub	r8,-1
80025cda:	ef 48 ff fc 	st.w	r7[-4],r8
80025cde:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ce2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025ce6:	10 39       	cp.w	r9,r8
80025ce8:	cd f3       	brcs	80025ca6 <gpio_enable_module+0x22>
80025cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025cee:	10 9c       	mov	r12,r8
80025cf0:	2f cd       	sub	sp,-16
80025cf2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025cf6:	00 00       	add	r0,r0
80025cf8:	80 02       	ld.sh	r2,r0[0x0]
80025cfa:	5b 12       	cp.w	r2,-15

80025cfc <gpio_enable_module_pin>:
80025cfc:	eb cd 40 c0 	pushm	r6-r7,lr
80025d00:	1a 97       	mov	r7,sp
80025d02:	20 3d       	sub	sp,12
80025d04:	fe f6 02 94 	ld.w	r6,pc[660]
80025d08:	1e 26       	rsub	r6,pc
80025d0a:	ef 4c ff f8 	st.w	r7[-8],r12
80025d0e:	ef 4b ff f4 	st.w	r7[-12],r11
80025d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d16:	a5 98       	lsr	r8,0x5
80025d18:	a9 78       	lsl	r8,0x9
80025d1a:	e0 28 e0 00 	sub	r8,57344
80025d1e:	ef 48 ff fc 	st.w	r7[-4],r8
80025d22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025d26:	58 78       	cp.w	r8,7
80025d28:	e0 8b 01 26 	brhi	80025f74 <gpio_enable_module_pin+0x278>
80025d2c:	fe c9 ff f8 	sub	r9,pc,-8
80025d30:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80025d34:	e0 8f 00 10 	bral	80025d54 <gpio_enable_module_pin+0x58>
80025d38:	e0 8f 00 30 	bral	80025d98 <gpio_enable_module_pin+0x9c>
80025d3c:	e0 8f 00 50 	bral	80025ddc <gpio_enable_module_pin+0xe0>
80025d40:	e0 8f 00 70 	bral	80025e20 <gpio_enable_module_pin+0x124>
80025d44:	e0 8f 00 90 	bral	80025e64 <gpio_enable_module_pin+0x168>
80025d48:	e0 8f 00 b0 	bral	80025ea8 <gpio_enable_module_pin+0x1ac>
80025d4c:	e0 8f 00 d0 	bral	80025eec <gpio_enable_module_pin+0x1f0>
80025d50:	e0 8f 00 f0 	bral	80025f30 <gpio_enable_module_pin+0x234>
80025d54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025d5c:	30 19       	mov	r9,1
80025d5e:	f2 08 09 48 	lsl	r8,r9,r8
80025d62:	10 99       	mov	r9,r8
80025d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025d68:	91 69       	st.w	r8[0x18],r9
80025d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025d72:	30 19       	mov	r9,1
80025d74:	f2 08 09 48 	lsl	r8,r9,r8
80025d78:	10 99       	mov	r9,r8
80025d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025d7e:	91 a9       	st.w	r8[0x28],r9
80025d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025d88:	30 19       	mov	r9,1
80025d8a:	f2 08 09 48 	lsl	r8,r9,r8
80025d8e:	10 99       	mov	r9,r8
80025d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025d94:	91 e9       	st.w	r8[0x38],r9
80025d96:	cf 18       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025da0:	30 19       	mov	r9,1
80025da2:	f2 08 09 48 	lsl	r8,r9,r8
80025da6:	10 99       	mov	r9,r8
80025da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025dac:	91 59       	st.w	r8[0x14],r9
80025dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025db2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025db6:	30 19       	mov	r9,1
80025db8:	f2 08 09 48 	lsl	r8,r9,r8
80025dbc:	10 99       	mov	r9,r8
80025dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025dc2:	91 a9       	st.w	r8[0x28],r9
80025dc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025dc8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025dcc:	30 19       	mov	r9,1
80025dce:	f2 08 09 48 	lsl	r8,r9,r8
80025dd2:	10 99       	mov	r9,r8
80025dd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025dd8:	91 e9       	st.w	r8[0x38],r9
80025dda:	cc f8       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025de0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025de4:	30 19       	mov	r9,1
80025de6:	f2 08 09 48 	lsl	r8,r9,r8
80025dea:	10 99       	mov	r9,r8
80025dec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025df0:	91 69       	st.w	r8[0x18],r9
80025df2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025df6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025dfa:	30 19       	mov	r9,1
80025dfc:	f2 08 09 48 	lsl	r8,r9,r8
80025e00:	10 99       	mov	r9,r8
80025e02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e06:	91 99       	st.w	r8[0x24],r9
80025e08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e10:	30 19       	mov	r9,1
80025e12:	f2 08 09 48 	lsl	r8,r9,r8
80025e16:	10 99       	mov	r9,r8
80025e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e1c:	91 e9       	st.w	r8[0x38],r9
80025e1e:	ca d8       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e28:	30 19       	mov	r9,1
80025e2a:	f2 08 09 48 	lsl	r8,r9,r8
80025e2e:	10 99       	mov	r9,r8
80025e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e34:	91 59       	st.w	r8[0x14],r9
80025e36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e3e:	30 19       	mov	r9,1
80025e40:	f2 08 09 48 	lsl	r8,r9,r8
80025e44:	10 99       	mov	r9,r8
80025e46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e4a:	91 99       	st.w	r8[0x24],r9
80025e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e54:	30 19       	mov	r9,1
80025e56:	f2 08 09 48 	lsl	r8,r9,r8
80025e5a:	10 99       	mov	r9,r8
80025e5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e60:	91 e9       	st.w	r8[0x38],r9
80025e62:	c8 b8       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e6c:	30 19       	mov	r9,1
80025e6e:	f2 08 09 48 	lsl	r8,r9,r8
80025e72:	10 99       	mov	r9,r8
80025e74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e78:	91 69       	st.w	r8[0x18],r9
80025e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e82:	30 19       	mov	r9,1
80025e84:	f2 08 09 48 	lsl	r8,r9,r8
80025e88:	10 99       	mov	r9,r8
80025e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e8e:	91 a9       	st.w	r8[0x28],r9
80025e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025e94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025e98:	30 19       	mov	r9,1
80025e9a:	f2 08 09 48 	lsl	r8,r9,r8
80025e9e:	10 99       	mov	r9,r8
80025ea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ea4:	91 d9       	st.w	r8[0x34],r9
80025ea6:	c6 98       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025ea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025eac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025eb0:	30 19       	mov	r9,1
80025eb2:	f2 08 09 48 	lsl	r8,r9,r8
80025eb6:	10 99       	mov	r9,r8
80025eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ebc:	91 59       	st.w	r8[0x14],r9
80025ebe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ec2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025ec6:	30 19       	mov	r9,1
80025ec8:	f2 08 09 48 	lsl	r8,r9,r8
80025ecc:	10 99       	mov	r9,r8
80025ece:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ed2:	91 a9       	st.w	r8[0x28],r9
80025ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ed8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025edc:	30 19       	mov	r9,1
80025ede:	f2 08 09 48 	lsl	r8,r9,r8
80025ee2:	10 99       	mov	r9,r8
80025ee4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ee8:	91 d9       	st.w	r8[0x34],r9
80025eea:	c4 78       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025eec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ef0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025ef4:	30 19       	mov	r9,1
80025ef6:	f2 08 09 48 	lsl	r8,r9,r8
80025efa:	10 99       	mov	r9,r8
80025efc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f00:	91 69       	st.w	r8[0x18],r9
80025f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f0a:	30 19       	mov	r9,1
80025f0c:	f2 08 09 48 	lsl	r8,r9,r8
80025f10:	10 99       	mov	r9,r8
80025f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f16:	91 99       	st.w	r8[0x24],r9
80025f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f20:	30 19       	mov	r9,1
80025f22:	f2 08 09 48 	lsl	r8,r9,r8
80025f26:	10 99       	mov	r9,r8
80025f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f2c:	91 d9       	st.w	r8[0x34],r9
80025f2e:	c2 58       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f38:	30 19       	mov	r9,1
80025f3a:	f2 08 09 48 	lsl	r8,r9,r8
80025f3e:	10 99       	mov	r9,r8
80025f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f44:	91 59       	st.w	r8[0x14],r9
80025f46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f4e:	30 19       	mov	r9,1
80025f50:	f2 08 09 48 	lsl	r8,r9,r8
80025f54:	10 99       	mov	r9,r8
80025f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f5a:	91 99       	st.w	r8[0x24],r9
80025f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f64:	30 19       	mov	r9,1
80025f66:	f2 08 09 48 	lsl	r8,r9,r8
80025f6a:	10 99       	mov	r9,r8
80025f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f70:	91 d9       	st.w	r8[0x34],r9
80025f72:	c0 38       	rjmp	80025f78 <gpio_enable_module_pin+0x27c>
80025f74:	30 18       	mov	r8,1
80025f76:	c0 d8       	rjmp	80025f90 <gpio_enable_module_pin+0x294>
80025f78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025f7c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80025f80:	30 19       	mov	r9,1
80025f82:	f2 08 09 48 	lsl	r8,r9,r8
80025f86:	10 99       	mov	r9,r8
80025f88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f8c:	91 29       	st.w	r8[0x8],r9
80025f8e:	30 08       	mov	r8,0
80025f90:	10 9c       	mov	r12,r8
80025f92:	2f dd       	sub	sp,-12
80025f94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025f98:	80 02       	ld.sh	r2,r0[0x0]
80025f9a:	5b 8c       	cp.w	r12,-8

80025f9c <gpio_enable_gpio>:
80025f9c:	eb cd 40 c0 	pushm	r6-r7,lr
80025fa0:	1a 97       	mov	r7,sp
80025fa2:	20 3d       	sub	sp,12
80025fa4:	49 26       	lddpc	r6,80025fec <gpio_enable_gpio+0x50>
80025fa6:	1e 26       	rsub	r6,pc
80025fa8:	ef 4c ff f8 	st.w	r7[-8],r12
80025fac:	ef 4b ff f4 	st.w	r7[-12],r11
80025fb0:	30 08       	mov	r8,0
80025fb2:	ef 48 ff fc 	st.w	r7[-4],r8
80025fb6:	c1 18       	rjmp	80025fd8 <gpio_enable_gpio+0x3c>
80025fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025fbc:	11 88       	ld.ub	r8,r8[0x0]
80025fbe:	10 9c       	mov	r12,r8
80025fc0:	f0 16 01 53 	mcall	r6[1356]
80025fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025fc8:	2f e8       	sub	r8,-2
80025fca:	ef 48 ff f8 	st.w	r7[-8],r8
80025fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025fd2:	2f f8       	sub	r8,-1
80025fd4:	ef 48 ff fc 	st.w	r7[-4],r8
80025fd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025fdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025fe0:	10 39       	cp.w	r9,r8
80025fe2:	ce b3       	brcs	80025fb8 <gpio_enable_gpio+0x1c>
80025fe4:	2f dd       	sub	sp,-12
80025fe6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025fea:	00 00       	add	r0,r0
80025fec:	80 02       	ld.sh	r2,r0[0x0]
80025fee:	5e 2a       	reths	r10

80025ff0 <gpio_enable_gpio_pin>:
80025ff0:	eb cd 40 80 	pushm	r7,lr
80025ff4:	1a 97       	mov	r7,sp
80025ff6:	20 2d       	sub	sp,8
80025ff8:	ef 4c ff f8 	st.w	r7[-8],r12
80025ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026000:	a5 98       	lsr	r8,0x5
80026002:	a9 78       	lsl	r8,0x9
80026004:	e0 28 e0 00 	sub	r8,57344
80026008:	ef 48 ff fc 	st.w	r7[-4],r8
8002600c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026010:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026014:	30 19       	mov	r9,1
80026016:	f2 08 09 48 	lsl	r8,r9,r8
8002601a:	10 99       	mov	r9,r8
8002601c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026020:	f1 49 00 48 	st.w	r8[72],r9
80026024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026028:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002602c:	30 19       	mov	r9,1
8002602e:	f2 08 09 48 	lsl	r8,r9,r8
80026032:	10 99       	mov	r9,r8
80026034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026038:	91 19       	st.w	r8[0x4],r9
8002603a:	2f ed       	sub	sp,-8
8002603c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026040 <gpio_enable_pin_pull_up>:
80026040:	eb cd 40 80 	pushm	r7,lr
80026044:	1a 97       	mov	r7,sp
80026046:	20 2d       	sub	sp,8
80026048:	ef 4c ff f8 	st.w	r7[-8],r12
8002604c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026050:	a5 98       	lsr	r8,0x5
80026052:	a9 78       	lsl	r8,0x9
80026054:	e0 28 e0 00 	sub	r8,57344
80026058:	ef 48 ff fc 	st.w	r7[-4],r8
8002605c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026060:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026064:	30 19       	mov	r9,1
80026066:	f2 08 09 48 	lsl	r8,r9,r8
8002606a:	10 99       	mov	r9,r8
8002606c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026070:	f1 49 00 74 	st.w	r8[116],r9
80026074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026078:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002607c:	30 19       	mov	r9,1
8002607e:	f2 08 09 48 	lsl	r8,r9,r8
80026082:	10 99       	mov	r9,r8
80026084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026088:	f1 49 00 88 	st.w	r8[136],r9
8002608c:	2f ed       	sub	sp,-8
8002608e:	e3 cd 80 80 	ldm	sp++,r7,pc

80026092 <gpio_disable_pin_pull_up>:
80026092:	eb cd 40 80 	pushm	r7,lr
80026096:	1a 97       	mov	r7,sp
80026098:	20 2d       	sub	sp,8
8002609a:	ef 4c ff f8 	st.w	r7[-8],r12
8002609e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800260a2:	a5 98       	lsr	r8,0x5
800260a4:	a9 78       	lsl	r8,0x9
800260a6:	e0 28 e0 00 	sub	r8,57344
800260aa:	ef 48 ff fc 	st.w	r7[-4],r8
800260ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800260b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800260b6:	30 19       	mov	r9,1
800260b8:	f2 08 09 48 	lsl	r8,r9,r8
800260bc:	10 99       	mov	r9,r8
800260be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800260c2:	f1 49 00 78 	st.w	r8[120],r9
800260c6:	2f ed       	sub	sp,-8
800260c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800260cc <gpio_enable_pin_pull_down>:
800260cc:	eb cd 40 80 	pushm	r7,lr
800260d0:	1a 97       	mov	r7,sp
800260d2:	20 2d       	sub	sp,8
800260d4:	ef 4c ff f8 	st.w	r7[-8],r12
800260d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800260dc:	a5 98       	lsr	r8,0x5
800260de:	a9 78       	lsl	r8,0x9
800260e0:	e0 28 e0 00 	sub	r8,57344
800260e4:	ef 48 ff fc 	st.w	r7[-4],r8
800260e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800260ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800260f0:	30 19       	mov	r9,1
800260f2:	f2 08 09 48 	lsl	r8,r9,r8
800260f6:	10 99       	mov	r9,r8
800260f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800260fc:	f1 49 00 78 	st.w	r8[120],r9
80026100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026108:	30 19       	mov	r9,1
8002610a:	f2 08 09 48 	lsl	r8,r9,r8
8002610e:	10 99       	mov	r9,r8
80026110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026114:	f1 49 00 84 	st.w	r8[132],r9
80026118:	2f ed       	sub	sp,-8
8002611a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002611e <gpio_disable_pin_pull_down>:
8002611e:	eb cd 40 80 	pushm	r7,lr
80026122:	1a 97       	mov	r7,sp
80026124:	20 2d       	sub	sp,8
80026126:	ef 4c ff f8 	st.w	r7[-8],r12
8002612a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002612e:	a5 98       	lsr	r8,0x5
80026130:	a9 78       	lsl	r8,0x9
80026132:	e0 28 e0 00 	sub	r8,57344
80026136:	ef 48 ff fc 	st.w	r7[-4],r8
8002613a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002613e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026142:	30 19       	mov	r9,1
80026144:	f2 08 09 48 	lsl	r8,r9,r8
80026148:	10 99       	mov	r9,r8
8002614a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002614e:	f1 49 00 88 	st.w	r8[136],r9
80026152:	2f ed       	sub	sp,-8
80026154:	e3 cd 80 80 	ldm	sp++,r7,pc

80026158 <gpio_enable_pin_buskeeper>:
80026158:	eb cd 40 80 	pushm	r7,lr
8002615c:	1a 97       	mov	r7,sp
8002615e:	20 2d       	sub	sp,8
80026160:	ef 4c ff f8 	st.w	r7[-8],r12
80026164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026168:	a5 98       	lsr	r8,0x5
8002616a:	a9 78       	lsl	r8,0x9
8002616c:	e0 28 e0 00 	sub	r8,57344
80026170:	ef 48 ff fc 	st.w	r7[-4],r8
80026174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026178:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002617c:	30 19       	mov	r9,1
8002617e:	f2 08 09 48 	lsl	r8,r9,r8
80026182:	10 99       	mov	r9,r8
80026184:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026188:	f1 49 00 74 	st.w	r8[116],r9
8002618c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026190:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026194:	30 19       	mov	r9,1
80026196:	f2 08 09 48 	lsl	r8,r9,r8
8002619a:	10 99       	mov	r9,r8
8002619c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800261a0:	f1 49 00 84 	st.w	r8[132],r9
800261a4:	2f ed       	sub	sp,-8
800261a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800261aa <gpio_disable_pin_buskeeper>:
800261aa:	eb cd 40 80 	pushm	r7,lr
800261ae:	1a 97       	mov	r7,sp
800261b0:	20 2d       	sub	sp,8
800261b2:	ef 4c ff f8 	st.w	r7[-8],r12
800261b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800261ba:	a5 98       	lsr	r8,0x5
800261bc:	a9 78       	lsl	r8,0x9
800261be:	e0 28 e0 00 	sub	r8,57344
800261c2:	ef 48 ff fc 	st.w	r7[-4],r8
800261c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800261ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800261ce:	30 19       	mov	r9,1
800261d0:	f2 08 09 48 	lsl	r8,r9,r8
800261d4:	10 99       	mov	r9,r8
800261d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800261da:	f1 49 00 78 	st.w	r8[120],r9
800261de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800261e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800261e6:	30 19       	mov	r9,1
800261e8:	f2 08 09 48 	lsl	r8,r9,r8
800261ec:	10 99       	mov	r9,r8
800261ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800261f2:	f1 49 00 88 	st.w	r8[136],r9
800261f6:	2f ed       	sub	sp,-8
800261f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800261fc <gpio_configure_pin>:
800261fc:	eb cd 40 80 	pushm	r7,lr
80026200:	1a 97       	mov	r7,sp
80026202:	20 3d       	sub	sp,12
80026204:	ef 4c ff f8 	st.w	r7[-8],r12
80026208:	ef 4b ff f4 	st.w	r7[-12],r11
8002620c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026210:	a5 98       	lsr	r8,0x5
80026212:	a9 78       	lsl	r8,0x9
80026214:	e0 28 e0 00 	sub	r8,57344
80026218:	ef 48 ff fc 	st.w	r7[-4],r8
8002621c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026220:	e2 18 00 08 	andl	r8,0x8,COH
80026224:	c0 e0       	breq	80026240 <gpio_configure_pin+0x44>
80026226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002622a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002622e:	30 19       	mov	r9,1
80026230:	f2 08 09 48 	lsl	r8,r9,r8
80026234:	10 99       	mov	r9,r8
80026236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002623a:	f1 49 00 84 	st.w	r8[132],r9
8002623e:	c0 d8       	rjmp	80026258 <gpio_configure_pin+0x5c>
80026240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026244:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026248:	30 19       	mov	r9,1
8002624a:	f2 08 09 48 	lsl	r8,r9,r8
8002624e:	10 99       	mov	r9,r8
80026250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026254:	f1 49 00 88 	st.w	r8[136],r9
80026258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002625c:	e2 18 00 04 	andl	r8,0x4,COH
80026260:	c0 e0       	breq	8002627c <gpio_configure_pin+0x80>
80026262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026266:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002626a:	30 19       	mov	r9,1
8002626c:	f2 08 09 48 	lsl	r8,r9,r8
80026270:	10 99       	mov	r9,r8
80026272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026276:	f1 49 00 74 	st.w	r8[116],r9
8002627a:	c0 d8       	rjmp	80026294 <gpio_configure_pin+0x98>
8002627c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026280:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026284:	30 19       	mov	r9,1
80026286:	f2 08 09 48 	lsl	r8,r9,r8
8002628a:	10 99       	mov	r9,r8
8002628c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026290:	f1 49 00 78 	st.w	r8[120],r9
80026294:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026298:	e2 18 00 40 	andl	r8,0x40,COH
8002629c:	c0 e0       	breq	800262b8 <gpio_configure_pin+0xbc>
8002629e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800262a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800262a6:	30 19       	mov	r9,1
800262a8:	f2 08 09 48 	lsl	r8,r9,r8
800262ac:	10 99       	mov	r9,r8
800262ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800262b2:	f1 49 00 e4 	st.w	r8[228],r9
800262b6:	c0 d8       	rjmp	800262d0 <gpio_configure_pin+0xd4>
800262b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800262bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800262c0:	30 19       	mov	r9,1
800262c2:	f2 08 09 48 	lsl	r8,r9,r8
800262c6:	10 99       	mov	r9,r8
800262c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800262cc:	f1 49 00 e8 	st.w	r8[232],r9
800262d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800262d4:	e2 18 00 40 	andl	r8,0x40,COH
800262d8:	c0 e0       	breq	800262f4 <gpio_configure_pin+0xf8>
800262da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800262de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800262e2:	30 19       	mov	r9,1
800262e4:	f2 08 09 48 	lsl	r8,r9,r8
800262e8:	10 99       	mov	r9,r8
800262ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800262ee:	f1 49 00 84 	st.w	r8[132],r9
800262f2:	c0 d8       	rjmp	8002630c <gpio_configure_pin+0x110>
800262f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800262f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800262fc:	30 19       	mov	r9,1
800262fe:	f2 08 09 48 	lsl	r8,r9,r8
80026302:	10 99       	mov	r9,r8
80026304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026308:	f1 49 00 88 	st.w	r8[136],r9
8002630c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026310:	e2 18 00 10 	andl	r8,0x10,COH
80026314:	c0 e0       	breq	80026330 <gpio_configure_pin+0x134>
80026316:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002631a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002631e:	30 19       	mov	r9,1
80026320:	f2 08 09 48 	lsl	r8,r9,r8
80026324:	10 99       	mov	r9,r8
80026326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002632a:	f1 49 01 04 	st.w	r8[260],r9
8002632e:	c0 d8       	rjmp	80026348 <gpio_configure_pin+0x14c>
80026330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026334:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026338:	30 19       	mov	r9,1
8002633a:	f2 08 09 48 	lsl	r8,r9,r8
8002633e:	10 99       	mov	r9,r8
80026340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026344:	f1 49 01 08 	st.w	r8[264],r9
80026348:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002634c:	e2 18 00 20 	andl	r8,0x20,COH
80026350:	c0 e0       	breq	8002636c <gpio_configure_pin+0x170>
80026352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026356:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002635a:	30 19       	mov	r9,1
8002635c:	f2 08 09 48 	lsl	r8,r9,r8
80026360:	10 99       	mov	r9,r8
80026362:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026366:	f1 49 01 14 	st.w	r8[276],r9
8002636a:	c0 d8       	rjmp	80026384 <gpio_configure_pin+0x188>
8002636c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026370:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026374:	30 19       	mov	r9,1
80026376:	f2 08 09 48 	lsl	r8,r9,r8
8002637a:	10 99       	mov	r9,r8
8002637c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026380:	f1 49 01 18 	st.w	r8[280],r9
80026384:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026388:	e2 18 00 80 	andl	r8,0x80,COH
8002638c:	c5 a0       	breq	80026440 <gpio_configure_pin+0x244>
8002638e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026392:	e2 18 01 80 	andl	r8,0x180,COH
80026396:	c1 a0       	breq	800263ca <gpio_configure_pin+0x1ce>
80026398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002639c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800263a0:	30 19       	mov	r9,1
800263a2:	f2 08 09 48 	lsl	r8,r9,r8
800263a6:	10 99       	mov	r9,r8
800263a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800263ac:	f1 49 00 a8 	st.w	r8[168],r9
800263b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800263b8:	30 19       	mov	r9,1
800263ba:	f2 08 09 48 	lsl	r8,r9,r8
800263be:	10 99       	mov	r9,r8
800263c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800263c4:	f1 49 00 b8 	st.w	r8[184],r9
800263c8:	c3 c8       	rjmp	80026440 <gpio_configure_pin+0x244>
800263ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800263ce:	e2 18 02 80 	andl	r8,0x280,COH
800263d2:	c1 a0       	breq	80026406 <gpio_configure_pin+0x20a>
800263d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800263dc:	30 19       	mov	r9,1
800263de:	f2 08 09 48 	lsl	r8,r9,r8
800263e2:	10 99       	mov	r9,r8
800263e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800263e8:	f1 49 00 a4 	st.w	r8[164],r9
800263ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800263f4:	30 19       	mov	r9,1
800263f6:	f2 08 09 48 	lsl	r8,r9,r8
800263fa:	10 99       	mov	r9,r8
800263fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026400:	f1 49 00 b8 	st.w	r8[184],r9
80026404:	c1 e8       	rjmp	80026440 <gpio_configure_pin+0x244>
80026406:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002640a:	e2 18 03 80 	andl	r8,0x380,COH
8002640e:	c1 90       	breq	80026440 <gpio_configure_pin+0x244>
80026410:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026414:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026418:	30 19       	mov	r9,1
8002641a:	f2 08 09 48 	lsl	r8,r9,r8
8002641e:	10 99       	mov	r9,r8
80026420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026424:	f1 49 00 a8 	st.w	r8[168],r9
80026428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002642c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026430:	30 19       	mov	r9,1
80026432:	f2 08 09 48 	lsl	r8,r9,r8
80026436:	10 99       	mov	r9,r8
80026438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002643c:	f1 49 00 b4 	st.w	r8[180],r9
80026440:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026444:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026448:	5c 58       	castu.b	r8
8002644a:	c2 c0       	breq	800264a2 <gpio_configure_pin+0x2a6>
8002644c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026450:	e2 18 00 02 	andl	r8,0x2,COH
80026454:	c0 e0       	breq	80026470 <gpio_configure_pin+0x274>
80026456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002645a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002645e:	30 19       	mov	r9,1
80026460:	f2 08 09 48 	lsl	r8,r9,r8
80026464:	10 99       	mov	r9,r8
80026466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002646a:	f1 49 00 54 	st.w	r8[84],r9
8002646e:	c0 d8       	rjmp	80026488 <gpio_configure_pin+0x28c>
80026470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026474:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026478:	30 19       	mov	r9,1
8002647a:	f2 08 09 48 	lsl	r8,r9,r8
8002647e:	10 99       	mov	r9,r8
80026480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026484:	f1 49 00 58 	st.w	r8[88],r9
80026488:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002648c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026490:	30 19       	mov	r9,1
80026492:	f2 08 09 48 	lsl	r8,r9,r8
80026496:	10 99       	mov	r9,r8
80026498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002649c:	f1 49 00 44 	st.w	r8[68],r9
800264a0:	c0 d8       	rjmp	800264ba <gpio_configure_pin+0x2be>
800264a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264aa:	30 19       	mov	r9,1
800264ac:	f2 08 09 48 	lsl	r8,r9,r8
800264b0:	10 99       	mov	r9,r8
800264b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264b6:	f1 49 00 48 	st.w	r8[72],r9
800264ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264c2:	30 19       	mov	r9,1
800264c4:	f2 08 09 48 	lsl	r8,r9,r8
800264c8:	10 99       	mov	r9,r8
800264ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264ce:	91 19       	st.w	r8[0x4],r9
800264d0:	2f dd       	sub	sp,-12
800264d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800264d6 <gpio_configure_group>:
800264d6:	eb cd 40 80 	pushm	r7,lr
800264da:	1a 97       	mov	r7,sp
800264dc:	20 4d       	sub	sp,16
800264de:	ef 4c ff f8 	st.w	r7[-8],r12
800264e2:	ef 4b ff f4 	st.w	r7[-12],r11
800264e6:	ef 4a ff f0 	st.w	r7[-16],r10
800264ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264ee:	a9 78       	lsl	r8,0x9
800264f0:	e0 28 e0 00 	sub	r8,57344
800264f4:	ef 48 ff fc 	st.w	r7[-4],r8
800264f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800264fc:	e2 18 00 08 	andl	r8,0x8,COH
80026500:	c0 80       	breq	80026510 <gpio_configure_group+0x3a>
80026502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026506:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002650a:	f1 49 00 84 	st.w	r8[132],r9
8002650e:	c0 78       	rjmp	8002651c <gpio_configure_group+0x46>
80026510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026514:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026518:	f1 49 00 88 	st.w	r8[136],r9
8002651c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026520:	e2 18 00 04 	andl	r8,0x4,COH
80026524:	c0 80       	breq	80026534 <gpio_configure_group+0x5e>
80026526:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002652a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002652e:	f1 49 00 74 	st.w	r8[116],r9
80026532:	c0 78       	rjmp	80026540 <gpio_configure_group+0x6a>
80026534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026538:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002653c:	f1 49 00 78 	st.w	r8[120],r9
80026540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026544:	e2 18 00 40 	andl	r8,0x40,COH
80026548:	c0 80       	breq	80026558 <gpio_configure_group+0x82>
8002654a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002654e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026552:	f1 49 00 e4 	st.w	r8[228],r9
80026556:	c0 78       	rjmp	80026564 <gpio_configure_group+0x8e>
80026558:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002655c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026560:	f1 49 00 e8 	st.w	r8[232],r9
80026564:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026568:	e2 18 00 40 	andl	r8,0x40,COH
8002656c:	c0 80       	breq	8002657c <gpio_configure_group+0xa6>
8002656e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026572:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026576:	f1 49 00 84 	st.w	r8[132],r9
8002657a:	c0 78       	rjmp	80026588 <gpio_configure_group+0xb2>
8002657c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026580:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026584:	f1 49 00 88 	st.w	r8[136],r9
80026588:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002658c:	e2 18 00 10 	andl	r8,0x10,COH
80026590:	c0 80       	breq	800265a0 <gpio_configure_group+0xca>
80026592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026596:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002659a:	f1 49 01 04 	st.w	r8[260],r9
8002659e:	c0 78       	rjmp	800265ac <gpio_configure_group+0xd6>
800265a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800265a8:	f1 49 01 08 	st.w	r8[264],r9
800265ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800265b0:	e2 18 00 20 	andl	r8,0x20,COH
800265b4:	c0 80       	breq	800265c4 <gpio_configure_group+0xee>
800265b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800265be:	f1 49 01 14 	st.w	r8[276],r9
800265c2:	c0 78       	rjmp	800265d0 <gpio_configure_group+0xfa>
800265c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800265cc:	f1 49 01 18 	st.w	r8[280],r9
800265d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800265d4:	e2 18 00 80 	andl	r8,0x80,COH
800265d8:	c3 60       	breq	80026644 <gpio_configure_group+0x16e>
800265da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800265de:	e2 18 01 80 	andl	r8,0x180,COH
800265e2:	c0 e0       	breq	800265fe <gpio_configure_group+0x128>
800265e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800265ec:	f1 49 00 a8 	st.w	r8[168],r9
800265f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800265f8:	f1 49 00 b8 	st.w	r8[184],r9
800265fc:	c2 48       	rjmp	80026644 <gpio_configure_group+0x16e>
800265fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026602:	e2 18 02 80 	andl	r8,0x280,COH
80026606:	c0 e0       	breq	80026622 <gpio_configure_group+0x14c>
80026608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002660c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026610:	f1 49 00 a4 	st.w	r8[164],r9
80026614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026618:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002661c:	f1 49 00 b8 	st.w	r8[184],r9
80026620:	c1 28       	rjmp	80026644 <gpio_configure_group+0x16e>
80026622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026626:	e2 18 03 80 	andl	r8,0x380,COH
8002662a:	c0 d0       	breq	80026644 <gpio_configure_group+0x16e>
8002662c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026630:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026634:	f1 49 00 a8 	st.w	r8[168],r9
80026638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002663c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026640:	f1 49 00 b4 	st.w	r8[180],r9
80026644:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026648:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002664c:	5c 58       	castu.b	r8
8002664e:	c1 a0       	breq	80026682 <gpio_configure_group+0x1ac>
80026650:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026654:	e2 18 00 02 	andl	r8,0x2,COH
80026658:	c0 80       	breq	80026668 <gpio_configure_group+0x192>
8002665a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002665e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026662:	f1 49 00 54 	st.w	r8[84],r9
80026666:	c0 78       	rjmp	80026674 <gpio_configure_group+0x19e>
80026668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002666c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026670:	f1 49 00 58 	st.w	r8[88],r9
80026674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026678:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002667c:	f1 49 00 44 	st.w	r8[68],r9
80026680:	c0 78       	rjmp	8002668e <gpio_configure_group+0x1b8>
80026682:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026686:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002668a:	f1 49 00 48 	st.w	r8[72],r9
8002668e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026692:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026696:	91 19       	st.w	r8[0x4],r9
80026698:	2f cd       	sub	sp,-16
8002669a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002669e <gpio_get_pin_value>:
8002669e:	eb cd 40 80 	pushm	r7,lr
800266a2:	1a 97       	mov	r7,sp
800266a4:	20 2d       	sub	sp,8
800266a6:	ef 4c ff f8 	st.w	r7[-8],r12
800266aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266ae:	a5 98       	lsr	r8,0x5
800266b0:	a9 78       	lsl	r8,0x9
800266b2:	e0 28 e0 00 	sub	r8,57344
800266b6:	ef 48 ff fc 	st.w	r7[-4],r8
800266ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266be:	71 89       	ld.w	r9,r8[0x60]
800266c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800266c8:	f2 08 0a 48 	lsr	r8,r9,r8
800266cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800266d0:	10 9c       	mov	r12,r8
800266d2:	2f ed       	sub	sp,-8
800266d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800266d8 <gpio_get_gpio_pin_output_value>:
800266d8:	eb cd 40 80 	pushm	r7,lr
800266dc:	1a 97       	mov	r7,sp
800266de:	20 2d       	sub	sp,8
800266e0:	ef 4c ff f8 	st.w	r7[-8],r12
800266e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266e8:	a5 98       	lsr	r8,0x5
800266ea:	a9 78       	lsl	r8,0x9
800266ec:	e0 28 e0 00 	sub	r8,57344
800266f0:	ef 48 ff fc 	st.w	r7[-4],r8
800266f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266f8:	71 49       	ld.w	r9,r8[0x50]
800266fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026702:	f2 08 0a 48 	lsr	r8,r9,r8
80026706:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002670a:	10 9c       	mov	r12,r8
8002670c:	2f ed       	sub	sp,-8
8002670e:	e3 cd 80 80 	ldm	sp++,r7,pc

80026712 <gpio_get_gpio_open_drain_pin_output_value>:
80026712:	eb cd 40 80 	pushm	r7,lr
80026716:	1a 97       	mov	r7,sp
80026718:	20 2d       	sub	sp,8
8002671a:	ef 4c ff f8 	st.w	r7[-8],r12
8002671e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026722:	a5 98       	lsr	r8,0x5
80026724:	a9 78       	lsl	r8,0x9
80026726:	e0 28 e0 00 	sub	r8,57344
8002672a:	ef 48 ff fc 	st.w	r7[-4],r8
8002672e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026732:	71 09       	ld.w	r9,r8[0x40]
80026734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026738:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002673c:	f2 08 0a 48 	lsr	r8,r9,r8
80026740:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026744:	5f 08       	sreq	r8
80026746:	10 9c       	mov	r12,r8
80026748:	2f ed       	sub	sp,-8
8002674a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002674e <gpio_set_gpio_pin>:
8002674e:	eb cd 40 80 	pushm	r7,lr
80026752:	1a 97       	mov	r7,sp
80026754:	20 2d       	sub	sp,8
80026756:	ef 4c ff f8 	st.w	r7[-8],r12
8002675a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002675e:	a5 98       	lsr	r8,0x5
80026760:	a9 78       	lsl	r8,0x9
80026762:	e0 28 e0 00 	sub	r8,57344
80026766:	ef 48 ff fc 	st.w	r7[-4],r8
8002676a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002676e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026772:	30 19       	mov	r9,1
80026774:	f2 08 09 48 	lsl	r8,r9,r8
80026778:	10 99       	mov	r9,r8
8002677a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002677e:	f1 49 00 54 	st.w	r8[84],r9
80026782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026786:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002678a:	30 19       	mov	r9,1
8002678c:	f2 08 09 48 	lsl	r8,r9,r8
80026790:	10 99       	mov	r9,r8
80026792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026796:	f1 49 00 44 	st.w	r8[68],r9
8002679a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002679e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267a2:	30 19       	mov	r9,1
800267a4:	f2 08 09 48 	lsl	r8,r9,r8
800267a8:	10 99       	mov	r9,r8
800267aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267ae:	91 19       	st.w	r8[0x4],r9
800267b0:	2f ed       	sub	sp,-8
800267b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800267b6 <gpio_set_pin_high>:
800267b6:	eb cd 40 80 	pushm	r7,lr
800267ba:	1a 97       	mov	r7,sp
800267bc:	20 2d       	sub	sp,8
800267be:	ef 4c ff f8 	st.w	r7[-8],r12
800267c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267c6:	a5 98       	lsr	r8,0x5
800267c8:	a9 78       	lsl	r8,0x9
800267ca:	e0 28 e0 00 	sub	r8,57344
800267ce:	ef 48 ff fc 	st.w	r7[-4],r8
800267d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267da:	30 19       	mov	r9,1
800267dc:	f2 08 09 48 	lsl	r8,r9,r8
800267e0:	10 99       	mov	r9,r8
800267e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267e6:	f1 49 00 54 	st.w	r8[84],r9
800267ea:	2f ed       	sub	sp,-8
800267ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800267f0 <gpio_set_group_high>:
800267f0:	eb cd 40 80 	pushm	r7,lr
800267f4:	1a 97       	mov	r7,sp
800267f6:	20 3d       	sub	sp,12
800267f8:	ef 4c ff f8 	st.w	r7[-8],r12
800267fc:	ef 4b ff f4 	st.w	r7[-12],r11
80026800:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026804:	a9 78       	lsl	r8,0x9
80026806:	e0 28 e0 00 	sub	r8,57344
8002680a:	ef 48 ff fc 	st.w	r7[-4],r8
8002680e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026812:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026816:	f1 49 00 54 	st.w	r8[84],r9
8002681a:	2f dd       	sub	sp,-12
8002681c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026820 <gpio_set_pin_low>:
80026820:	eb cd 40 80 	pushm	r7,lr
80026824:	1a 97       	mov	r7,sp
80026826:	20 2d       	sub	sp,8
80026828:	ef 4c ff f8 	st.w	r7[-8],r12
8002682c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026830:	a5 98       	lsr	r8,0x5
80026832:	a9 78       	lsl	r8,0x9
80026834:	e0 28 e0 00 	sub	r8,57344
80026838:	ef 48 ff fc 	st.w	r7[-4],r8
8002683c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026840:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026844:	30 19       	mov	r9,1
80026846:	f2 08 09 48 	lsl	r8,r9,r8
8002684a:	10 99       	mov	r9,r8
8002684c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026850:	f1 49 00 58 	st.w	r8[88],r9
80026854:	2f ed       	sub	sp,-8
80026856:	e3 cd 80 80 	ldm	sp++,r7,pc

8002685a <gpio_clr_gpio_pin>:
8002685a:	eb cd 40 80 	pushm	r7,lr
8002685e:	1a 97       	mov	r7,sp
80026860:	20 2d       	sub	sp,8
80026862:	ef 4c ff f8 	st.w	r7[-8],r12
80026866:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002686a:	a5 98       	lsr	r8,0x5
8002686c:	a9 78       	lsl	r8,0x9
8002686e:	e0 28 e0 00 	sub	r8,57344
80026872:	ef 48 ff fc 	st.w	r7[-4],r8
80026876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002687a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002687e:	30 19       	mov	r9,1
80026880:	f2 08 09 48 	lsl	r8,r9,r8
80026884:	10 99       	mov	r9,r8
80026886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002688a:	f1 49 00 58 	st.w	r8[88],r9
8002688e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026892:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026896:	30 19       	mov	r9,1
80026898:	f2 08 09 48 	lsl	r8,r9,r8
8002689c:	10 99       	mov	r9,r8
8002689e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268a2:	f1 49 00 44 	st.w	r8[68],r9
800268a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268ae:	30 19       	mov	r9,1
800268b0:	f2 08 09 48 	lsl	r8,r9,r8
800268b4:	10 99       	mov	r9,r8
800268b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268ba:	91 19       	st.w	r8[0x4],r9
800268bc:	2f ed       	sub	sp,-8
800268be:	e3 cd 80 80 	ldm	sp++,r7,pc

800268c2 <gpio_set_group_low>:
800268c2:	eb cd 40 80 	pushm	r7,lr
800268c6:	1a 97       	mov	r7,sp
800268c8:	20 3d       	sub	sp,12
800268ca:	ef 4c ff f8 	st.w	r7[-8],r12
800268ce:	ef 4b ff f4 	st.w	r7[-12],r11
800268d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268d6:	a9 78       	lsl	r8,0x9
800268d8:	e0 28 e0 00 	sub	r8,57344
800268dc:	ef 48 ff fc 	st.w	r7[-4],r8
800268e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800268e8:	f1 49 00 58 	st.w	r8[88],r9
800268ec:	2f dd       	sub	sp,-12
800268ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800268f2 <gpio_tgl_gpio_pin>:
800268f2:	eb cd 40 80 	pushm	r7,lr
800268f6:	1a 97       	mov	r7,sp
800268f8:	20 2d       	sub	sp,8
800268fa:	ef 4c ff f8 	st.w	r7[-8],r12
800268fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026902:	a5 98       	lsr	r8,0x5
80026904:	a9 78       	lsl	r8,0x9
80026906:	e0 28 e0 00 	sub	r8,57344
8002690a:	ef 48 ff fc 	st.w	r7[-4],r8
8002690e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026912:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026916:	30 19       	mov	r9,1
80026918:	f2 08 09 48 	lsl	r8,r9,r8
8002691c:	10 99       	mov	r9,r8
8002691e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026922:	f1 49 00 5c 	st.w	r8[92],r9
80026926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002692a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002692e:	30 19       	mov	r9,1
80026930:	f2 08 09 48 	lsl	r8,r9,r8
80026934:	10 99       	mov	r9,r8
80026936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002693a:	f1 49 00 44 	st.w	r8[68],r9
8002693e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026942:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026946:	30 19       	mov	r9,1
80026948:	f2 08 09 48 	lsl	r8,r9,r8
8002694c:	10 99       	mov	r9,r8
8002694e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026952:	91 19       	st.w	r8[0x4],r9
80026954:	2f ed       	sub	sp,-8
80026956:	e3 cd 80 80 	ldm	sp++,r7,pc

8002695a <gpio_toggle_pin>:
8002695a:	eb cd 40 80 	pushm	r7,lr
8002695e:	1a 97       	mov	r7,sp
80026960:	20 2d       	sub	sp,8
80026962:	ef 4c ff f8 	st.w	r7[-8],r12
80026966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002696a:	a5 98       	lsr	r8,0x5
8002696c:	a9 78       	lsl	r8,0x9
8002696e:	e0 28 e0 00 	sub	r8,57344
80026972:	ef 48 ff fc 	st.w	r7[-4],r8
80026976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002697a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002697e:	30 19       	mov	r9,1
80026980:	f2 08 09 48 	lsl	r8,r9,r8
80026984:	10 99       	mov	r9,r8
80026986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002698a:	f1 49 00 5c 	st.w	r8[92],r9
8002698e:	2f ed       	sub	sp,-8
80026990:	e3 cd 80 80 	ldm	sp++,r7,pc

80026994 <gpio_toggle_group>:
80026994:	eb cd 40 80 	pushm	r7,lr
80026998:	1a 97       	mov	r7,sp
8002699a:	20 3d       	sub	sp,12
8002699c:	ef 4c ff f8 	st.w	r7[-8],r12
800269a0:	ef 4b ff f4 	st.w	r7[-12],r11
800269a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269a8:	a9 78       	lsl	r8,0x9
800269aa:	e0 28 e0 00 	sub	r8,57344
800269ae:	ef 48 ff fc 	st.w	r7[-4],r8
800269b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800269ba:	f1 49 00 5c 	st.w	r8[92],r9
800269be:	2f dd       	sub	sp,-12
800269c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800269c4 <gpio_set_gpio_open_drain_pin>:
800269c4:	eb cd 40 80 	pushm	r7,lr
800269c8:	1a 97       	mov	r7,sp
800269ca:	20 2d       	sub	sp,8
800269cc:	ef 4c ff f8 	st.w	r7[-8],r12
800269d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269d4:	a5 98       	lsr	r8,0x5
800269d6:	a9 78       	lsl	r8,0x9
800269d8:	e0 28 e0 00 	sub	r8,57344
800269dc:	ef 48 ff fc 	st.w	r7[-4],r8
800269e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269e8:	30 19       	mov	r9,1
800269ea:	f2 08 09 48 	lsl	r8,r9,r8
800269ee:	10 99       	mov	r9,r8
800269f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269f4:	f1 49 00 48 	st.w	r8[72],r9
800269f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a00:	30 19       	mov	r9,1
80026a02:	f2 08 09 48 	lsl	r8,r9,r8
80026a06:	10 99       	mov	r9,r8
80026a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a0c:	91 19       	st.w	r8[0x4],r9
80026a0e:	2f ed       	sub	sp,-8
80026a10:	e3 cd 80 80 	ldm	sp++,r7,pc

80026a14 <gpio_clr_gpio_open_drain_pin>:
80026a14:	eb cd 40 80 	pushm	r7,lr
80026a18:	1a 97       	mov	r7,sp
80026a1a:	20 2d       	sub	sp,8
80026a1c:	ef 4c ff f8 	st.w	r7[-8],r12
80026a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a24:	a5 98       	lsr	r8,0x5
80026a26:	a9 78       	lsl	r8,0x9
80026a28:	e0 28 e0 00 	sub	r8,57344
80026a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80026a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a38:	30 19       	mov	r9,1
80026a3a:	f2 08 09 48 	lsl	r8,r9,r8
80026a3e:	10 99       	mov	r9,r8
80026a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a44:	f1 49 00 58 	st.w	r8[88],r9
80026a48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a50:	30 19       	mov	r9,1
80026a52:	f2 08 09 48 	lsl	r8,r9,r8
80026a56:	10 99       	mov	r9,r8
80026a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a5c:	f1 49 00 44 	st.w	r8[68],r9
80026a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a68:	30 19       	mov	r9,1
80026a6a:	f2 08 09 48 	lsl	r8,r9,r8
80026a6e:	10 99       	mov	r9,r8
80026a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a74:	91 19       	st.w	r8[0x4],r9
80026a76:	2f ed       	sub	sp,-8
80026a78:	e3 cd 80 80 	ldm	sp++,r7,pc

80026a7c <gpio_tgl_gpio_open_drain_pin>:
80026a7c:	eb cd 40 80 	pushm	r7,lr
80026a80:	1a 97       	mov	r7,sp
80026a82:	20 2d       	sub	sp,8
80026a84:	ef 4c ff f8 	st.w	r7[-8],r12
80026a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a8c:	a5 98       	lsr	r8,0x5
80026a8e:	a9 78       	lsl	r8,0x9
80026a90:	e0 28 e0 00 	sub	r8,57344
80026a94:	ef 48 ff fc 	st.w	r7[-4],r8
80026a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026aa0:	30 19       	mov	r9,1
80026aa2:	f2 08 09 48 	lsl	r8,r9,r8
80026aa6:	10 99       	mov	r9,r8
80026aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026aac:	f1 49 00 58 	st.w	r8[88],r9
80026ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ab4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ab8:	30 19       	mov	r9,1
80026aba:	f2 08 09 48 	lsl	r8,r9,r8
80026abe:	10 99       	mov	r9,r8
80026ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ac4:	f1 49 00 4c 	st.w	r8[76],r9
80026ac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026acc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ad0:	30 19       	mov	r9,1
80026ad2:	f2 08 09 48 	lsl	r8,r9,r8
80026ad6:	10 99       	mov	r9,r8
80026ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026adc:	91 19       	st.w	r8[0x4],r9
80026ade:	2f ed       	sub	sp,-8
80026ae0:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ae4 <gpio_enable_pin_glitch_filter>:
80026ae4:	eb cd 40 80 	pushm	r7,lr
80026ae8:	1a 97       	mov	r7,sp
80026aea:	20 2d       	sub	sp,8
80026aec:	ef 4c ff f8 	st.w	r7[-8],r12
80026af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026af4:	a5 98       	lsr	r8,0x5
80026af6:	a9 78       	lsl	r8,0x9
80026af8:	e0 28 e0 00 	sub	r8,57344
80026afc:	ef 48 ff fc 	st.w	r7[-4],r8
80026b00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b04:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b08:	30 19       	mov	r9,1
80026b0a:	f2 08 09 48 	lsl	r8,r9,r8
80026b0e:	10 99       	mov	r9,r8
80026b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b14:	f1 49 00 c4 	st.w	r8[196],r9
80026b18:	2f ed       	sub	sp,-8
80026b1a:	e3 cd 80 80 	ldm	sp++,r7,pc

80026b1e <gpio_disable_pin_glitch_filter>:
80026b1e:	eb cd 40 80 	pushm	r7,lr
80026b22:	1a 97       	mov	r7,sp
80026b24:	20 2d       	sub	sp,8
80026b26:	ef 4c ff f8 	st.w	r7[-8],r12
80026b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b2e:	a5 98       	lsr	r8,0x5
80026b30:	a9 78       	lsl	r8,0x9
80026b32:	e0 28 e0 00 	sub	r8,57344
80026b36:	ef 48 ff fc 	st.w	r7[-4],r8
80026b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b42:	30 19       	mov	r9,1
80026b44:	f2 08 09 48 	lsl	r8,r9,r8
80026b48:	10 99       	mov	r9,r8
80026b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b4e:	f1 49 00 c8 	st.w	r8[200],r9
80026b52:	2f ed       	sub	sp,-8
80026b54:	e3 cd 80 80 	ldm	sp++,r7,pc

80026b58 <gpio_configure_edge_detector>:
80026b58:	eb cd 40 80 	pushm	r7,lr
80026b5c:	1a 97       	mov	r7,sp
80026b5e:	20 3d       	sub	sp,12
80026b60:	ef 4c ff f8 	st.w	r7[-8],r12
80026b64:	ef 4b ff f4 	st.w	r7[-12],r11
80026b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b6c:	a5 98       	lsr	r8,0x5
80026b6e:	a9 78       	lsl	r8,0x9
80026b70:	e0 28 e0 00 	sub	r8,57344
80026b74:	ef 48 ff fc 	st.w	r7[-4],r8
80026b78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b7c:	58 18       	cp.w	r8,1
80026b7e:	c1 e0       	breq	80026bba <gpio_configure_edge_detector+0x62>
80026b80:	c0 43       	brcs	80026b88 <gpio_configure_edge_detector+0x30>
80026b82:	58 28       	cp.w	r8,2
80026b84:	c3 40       	breq	80026bec <gpio_configure_edge_detector+0x94>
80026b86:	c4 c8       	rjmp	80026c1e <gpio_configure_edge_detector+0xc6>
80026b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b8c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b90:	30 19       	mov	r9,1
80026b92:	f2 08 09 48 	lsl	r8,r9,r8
80026b96:	10 99       	mov	r9,r8
80026b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b9c:	f1 49 00 a8 	st.w	r8[168],r9
80026ba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ba4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ba8:	30 19       	mov	r9,1
80026baa:	f2 08 09 48 	lsl	r8,r9,r8
80026bae:	10 99       	mov	r9,r8
80026bb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bb4:	f1 49 00 b8 	st.w	r8[184],r9
80026bb8:	c3 58       	rjmp	80026c22 <gpio_configure_edge_detector+0xca>
80026bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bc2:	30 19       	mov	r9,1
80026bc4:	f2 08 09 48 	lsl	r8,r9,r8
80026bc8:	10 99       	mov	r9,r8
80026bca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bce:	f1 49 00 a4 	st.w	r8[164],r9
80026bd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bda:	30 19       	mov	r9,1
80026bdc:	f2 08 09 48 	lsl	r8,r9,r8
80026be0:	10 99       	mov	r9,r8
80026be2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026be6:	f1 49 00 b8 	st.w	r8[184],r9
80026bea:	c1 c8       	rjmp	80026c22 <gpio_configure_edge_detector+0xca>
80026bec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bf0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bf4:	30 19       	mov	r9,1
80026bf6:	f2 08 09 48 	lsl	r8,r9,r8
80026bfa:	10 99       	mov	r9,r8
80026bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c00:	f1 49 00 a8 	st.w	r8[168],r9
80026c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c0c:	30 19       	mov	r9,1
80026c0e:	f2 08 09 48 	lsl	r8,r9,r8
80026c12:	10 99       	mov	r9,r8
80026c14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c18:	f1 49 00 b4 	st.w	r8[180],r9
80026c1c:	c0 38       	rjmp	80026c22 <gpio_configure_edge_detector+0xca>
80026c1e:	30 18       	mov	r8,1
80026c20:	c0 28       	rjmp	80026c24 <gpio_configure_edge_detector+0xcc>
80026c22:	30 08       	mov	r8,0
80026c24:	10 9c       	mov	r12,r8
80026c26:	2f dd       	sub	sp,-12
80026c28:	e3 cd 80 80 	ldm	sp++,r7,pc

80026c2c <gpio_enable_pin_interrupt>:
80026c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80026c30:	1a 97       	mov	r7,sp
80026c32:	20 3d       	sub	sp,12
80026c34:	49 b6       	lddpc	r6,80026ca0 <gpio_enable_pin_interrupt+0x74>
80026c36:	1e 26       	rsub	r6,pc
80026c38:	ef 4c ff f8 	st.w	r7[-8],r12
80026c3c:	ef 4b ff f4 	st.w	r7[-12],r11
80026c40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c44:	a5 98       	lsr	r8,0x5
80026c46:	a9 78       	lsl	r8,0x9
80026c48:	e0 28 e0 00 	sub	r8,57344
80026c4c:	ef 48 ff fc 	st.w	r7[-4],r8
80026c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c58:	30 19       	mov	r9,1
80026c5a:	f2 08 09 48 	lsl	r8,r9,r8
80026c5e:	10 99       	mov	r9,r8
80026c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c64:	f1 49 00 c4 	st.w	r8[196],r9
80026c68:	ee fb ff f4 	ld.w	r11,r7[-12]
80026c6c:	ee fc ff f8 	ld.w	r12,r7[-8]
80026c70:	c7 4f       	rcall	80026b58 <gpio_configure_edge_detector>
80026c72:	18 98       	mov	r8,r12
80026c74:	58 18       	cp.w	r8,1
80026c76:	c0 31       	brne	80026c7c <gpio_enable_pin_interrupt+0x50>
80026c78:	30 18       	mov	r8,1
80026c7a:	c0 e8       	rjmp	80026c96 <gpio_enable_pin_interrupt+0x6a>
80026c7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c84:	30 19       	mov	r9,1
80026c86:	f2 08 09 48 	lsl	r8,r9,r8
80026c8a:	10 99       	mov	r9,r8
80026c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c90:	f1 49 00 94 	st.w	r8[148],r9
80026c94:	30 08       	mov	r8,0
80026c96:	10 9c       	mov	r12,r8
80026c98:	2f dd       	sub	sp,-12
80026c9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026c9e:	00 00       	add	r0,r0
80026ca0:	80 02       	ld.sh	r2,r0[0x0]
80026ca2:	6a ba       	ld.w	r10,r5[0x2c]

80026ca4 <gpio_disable_pin_interrupt>:
80026ca4:	eb cd 40 80 	pushm	r7,lr
80026ca8:	1a 97       	mov	r7,sp
80026caa:	20 2d       	sub	sp,8
80026cac:	ef 4c ff f8 	st.w	r7[-8],r12
80026cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cb4:	a5 98       	lsr	r8,0x5
80026cb6:	a9 78       	lsl	r8,0x9
80026cb8:	e0 28 e0 00 	sub	r8,57344
80026cbc:	ef 48 ff fc 	st.w	r7[-4],r8
80026cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cc4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cc8:	30 19       	mov	r9,1
80026cca:	f2 08 09 48 	lsl	r8,r9,r8
80026cce:	10 99       	mov	r9,r8
80026cd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cd4:	f1 49 00 98 	st.w	r8[152],r9
80026cd8:	2f ed       	sub	sp,-8
80026cda:	e3 cd 80 80 	ldm	sp++,r7,pc

80026cde <gpio_get_pin_interrupt_flag>:
80026cde:	eb cd 40 80 	pushm	r7,lr
80026ce2:	1a 97       	mov	r7,sp
80026ce4:	20 2d       	sub	sp,8
80026ce6:	ef 4c ff f8 	st.w	r7[-8],r12
80026cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cee:	a5 98       	lsr	r8,0x5
80026cf0:	a9 78       	lsl	r8,0x9
80026cf2:	e0 28 e0 00 	sub	r8,57344
80026cf6:	ef 48 ff fc 	st.w	r7[-4],r8
80026cfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cfe:	f0 f9 00 d0 	ld.w	r9,r8[208]
80026d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d0a:	f2 08 0a 48 	lsr	r8,r9,r8
80026d0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026d12:	10 9c       	mov	r12,r8
80026d14:	2f ed       	sub	sp,-8
80026d16:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d1a <gpio_clear_pin_interrupt_flag>:
80026d1a:	eb cd 40 80 	pushm	r7,lr
80026d1e:	1a 97       	mov	r7,sp
80026d20:	20 2d       	sub	sp,8
80026d22:	ef 4c ff f8 	st.w	r7[-8],r12
80026d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d2a:	a5 98       	lsr	r8,0x5
80026d2c:	a9 78       	lsl	r8,0x9
80026d2e:	e0 28 e0 00 	sub	r8,57344
80026d32:	ef 48 ff fc 	st.w	r7[-4],r8
80026d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d3e:	30 19       	mov	r9,1
80026d40:	f2 08 09 48 	lsl	r8,r9,r8
80026d44:	10 99       	mov	r9,r8
80026d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d4a:	f1 49 00 d8 	st.w	r8[216],r9
80026d4e:	2f ed       	sub	sp,-8
80026d50:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d54 <_unhandled_interrupt>:
80026d54:	eb cd 40 c0 	pushm	r6-r7,lr
80026d58:	1a 97       	mov	r7,sp
80026d5a:	c0 08       	rjmp	80026d5a <_unhandled_interrupt+0x6>

80026d5c <_get_interrupt_handler>:
80026d5c:	eb cd 40 c0 	pushm	r6-r7,lr
80026d60:	1a 97       	mov	r7,sp
80026d62:	20 3d       	sub	sp,12
80026d64:	49 a6       	lddpc	r6,80026dcc <_get_interrupt_handler+0x70>
80026d66:	1e 26       	rsub	r6,pc
80026d68:	ef 4c ff f4 	st.w	r7[-12],r12
80026d6c:	fe 78 00 00 	mov	r8,-65536
80026d70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d74:	f2 09 11 03 	rsub	r9,r9,3
80026d78:	28 09       	sub	r9,-128
80026d7a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80026d7e:	ef 48 ff f8 	st.w	r7[-8],r8
80026d82:	fe 78 00 00 	mov	r8,-65536
80026d86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026d8a:	2c 09       	sub	r9,-64
80026d8c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80026d90:	ef 48 ff fc 	st.w	r7[-4],r8
80026d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d98:	58 08       	cp.w	r8,0
80026d9a:	c1 40       	breq	80026dc2 <_get_interrupt_handler+0x66>
80026d9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026da0:	ec f8 02 78 	ld.w	r8,r6[632]
80026da4:	a1 79       	lsl	r9,0x1
80026da6:	2f f9       	sub	r9,-1
80026da8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80026dac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026db0:	f0 08 12 00 	clz	r8,r8
80026db4:	f0 08 11 1f 	rsub	r8,r8,31
80026db8:	a3 68       	lsl	r8,0x2
80026dba:	f2 08 00 08 	add	r8,r9,r8
80026dbe:	70 08       	ld.w	r8,r8[0x0]
80026dc0:	c0 28       	rjmp	80026dc4 <_get_interrupt_handler+0x68>
80026dc2:	30 08       	mov	r8,0
80026dc4:	10 9c       	mov	r12,r8
80026dc6:	2f dd       	sub	sp,-12
80026dc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026dcc:	80 02       	ld.sh	r2,r0[0x0]
80026dce:	6b ea       	ld.w	r10,r5[0x78]

80026dd0 <INTC_init_evba>:
80026dd0:	eb cd 40 c0 	pushm	r6-r7,lr
80026dd4:	1a 97       	mov	r7,sp
80026dd6:	48 56       	lddpc	r6,80026de8 <INTC_init_evba+0x18>
80026dd8:	1e 26       	rsub	r6,pc
80026dda:	ec f8 07 78 	ld.w	r8,r6[1912]
80026dde:	e3 b8 00 01 	mtsr	0x4,r8
80026de2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026de6:	00 00       	add	r0,r0
80026de8:	80 02       	ld.sh	r2,r0[0x0]
80026dea:	6c 5c       	ld.w	r12,r6[0x14]

80026dec <INTC_init_interrupts>:
80026dec:	eb cd 40 c0 	pushm	r6-r7,lr
80026df0:	1a 97       	mov	r7,sp
80026df2:	20 2d       	sub	sp,8
80026df4:	4a 16       	lddpc	r6,80026e78 <INTC_init_interrupts+0x8c>
80026df6:	1e 26       	rsub	r6,pc
80026df8:	ce cf       	rcall	80026dd0 <INTC_init_evba>
80026dfa:	30 08       	mov	r8,0
80026dfc:	ef 48 ff f8 	st.w	r7[-8],r8
80026e00:	c3 38       	rjmp	80026e66 <INTC_init_interrupts+0x7a>
80026e02:	30 08       	mov	r8,0
80026e04:	ef 48 ff fc 	st.w	r7[-4],r8
80026e08:	c1 68       	rjmp	80026e34 <INTC_init_interrupts+0x48>
80026e0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026e0e:	ec f8 02 78 	ld.w	r8,r6[632]
80026e12:	a1 79       	lsl	r9,0x1
80026e14:	2f f9       	sub	r9,-1
80026e16:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80026e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e1e:	a3 68       	lsl	r8,0x2
80026e20:	f2 08 00 08 	add	r8,r9,r8
80026e24:	fe c9 00 d0 	sub	r9,pc,208
80026e28:	91 09       	st.w	r8[0x0],r9
80026e2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e2e:	2f f8       	sub	r8,-1
80026e30:	ef 48 ff fc 	st.w	r7[-4],r8
80026e34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026e38:	ec f8 02 78 	ld.w	r8,r6[632]
80026e3c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80026e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e44:	10 39       	cp.w	r9,r8
80026e46:	fe 9b ff e2 	brhi	80026e0a <INTC_init_interrupts+0x1e>
80026e4a:	fe 78 00 00 	mov	r8,-65536
80026e4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026e52:	ec fa 03 cc 	ld.w	r10,r6[972]
80026e56:	74 0a       	ld.w	r10,r10[0x0]
80026e58:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80026e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e60:	2f f8       	sub	r8,-1
80026e62:	ef 48 ff f8 	st.w	r7[-8],r8
80026e66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e6a:	e0 48 00 2e 	cp.w	r8,46
80026e6e:	fe 98 ff ca 	brls	80026e02 <INTC_init_interrupts+0x16>
80026e72:	2f ed       	sub	sp,-8
80026e74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e78:	80 02       	ld.sh	r2,r0[0x0]
80026e7a:	6c 7a       	ld.w	r10,r6[0x1c]

80026e7c <INTC_register_interrupt>:
80026e7c:	eb cd 40 c0 	pushm	r6-r7,lr
80026e80:	1a 97       	mov	r7,sp
80026e82:	20 4d       	sub	sp,16
80026e84:	49 86       	lddpc	r6,80026ee4 <INTC_register_interrupt+0x68>
80026e86:	1e 26       	rsub	r6,pc
80026e88:	ef 4c ff f8 	st.w	r7[-8],r12
80026e8c:	ef 4b ff f4 	st.w	r7[-12],r11
80026e90:	ef 4a ff f0 	st.w	r7[-16],r10
80026e94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e98:	a5 98       	lsr	r8,0x5
80026e9a:	ef 48 ff fc 	st.w	r7[-4],r8
80026e9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026ea2:	ec f8 02 78 	ld.w	r8,r6[632]
80026ea6:	a1 79       	lsl	r9,0x1
80026ea8:	2f f9       	sub	r9,-1
80026eaa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80026eae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026eb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026eb6:	a3 68       	lsl	r8,0x2
80026eb8:	f2 08 00 08 	add	r8,r9,r8
80026ebc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026ec0:	91 09       	st.w	r8[0x0],r9
80026ec2:	fe 78 00 00 	mov	r8,-65536
80026ec6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026eca:	ee fa ff f0 	ld.w	r10,r7[-16]
80026ece:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80026ed2:	ec fa 03 cc 	ld.w	r10,r6[972]
80026ed6:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80026eda:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80026ede:	2f cd       	sub	sp,-16
80026ee0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026ee4:	80 02       	ld.sh	r2,r0[0x0]
80026ee6:	6d 0a       	ld.w	r10,r6[0x40]

80026ee8 <cpu_irq_is_enabled_flags>:
80026ee8:	eb cd 40 80 	pushm	r7,lr
80026eec:	1a 97       	mov	r7,sp
80026eee:	20 1d       	sub	sp,4
80026ef0:	ef 4c ff fc 	st.w	r7[-4],r12
80026ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ef8:	e6 18 00 01 	andh	r8,0x1,COH
80026efc:	5f 08       	sreq	r8
80026efe:	5c 58       	castu.b	r8
80026f00:	10 9c       	mov	r12,r8
80026f02:	2f fd       	sub	sp,-4
80026f04:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f08 <pdca_get_handler>:
80026f08:	eb cd 40 80 	pushm	r7,lr
80026f0c:	1a 97       	mov	r7,sp
80026f0e:	20 2d       	sub	sp,8
80026f10:	ef 4c ff f8 	st.w	r7[-8],r12
80026f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f18:	a7 68       	lsl	r8,0x6
80026f1a:	e2 38 00 00 	sub	r8,196608
80026f1e:	ef 48 ff fc 	st.w	r7[-4],r8
80026f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f26:	58 f8       	cp.w	r8,15
80026f28:	e0 88 00 04 	brls	80026f30 <pdca_get_handler+0x28>
80026f2c:	3f f8       	mov	r8,-1
80026f2e:	c0 38       	rjmp	80026f34 <pdca_get_handler+0x2c>
80026f30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f34:	10 9c       	mov	r12,r8
80026f36:	2f ed       	sub	sp,-8
80026f38:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f3c <pdca_init_channel>:
80026f3c:	eb cd 40 c0 	pushm	r6-r7,lr
80026f40:	1a 97       	mov	r7,sp
80026f42:	20 4d       	sub	sp,16
80026f44:	4b 26       	lddpc	r6,8002700c <pdca_init_channel+0xd0>
80026f46:	1e 26       	rsub	r6,pc
80026f48:	ef 4c ff f4 	st.w	r7[-12],r12
80026f4c:	ef 4b ff f0 	st.w	r7[-16],r11
80026f50:	ee fc ff f4 	ld.w	r12,r7[-12]
80026f54:	f0 16 00 27 	mcall	r6[156]
80026f58:	18 98       	mov	r8,r12
80026f5a:	ef 48 ff f8 	st.w	r7[-8],r8
80026f5e:	ee fc ff f4 	ld.w	r12,r7[-12]
80026f62:	f0 16 00 98 	mcall	r6[608]
80026f66:	ee fc ff f4 	ld.w	r12,r7[-12]
80026f6a:	f0 16 01 fd 	mcall	r6[2036]
80026f6e:	e1 b8 00 00 	mfsr	r8,0x0
80026f72:	10 9c       	mov	r12,r8
80026f74:	cb af       	rcall	80026ee8 <cpu_irq_is_enabled_flags>
80026f76:	18 98       	mov	r8,r12
80026f78:	ef 68 ff ff 	st.b	r7[-1],r8
80026f7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80026f80:	30 08       	mov	r8,0
80026f82:	f0 09 18 00 	cp.b	r9,r8
80026f86:	c0 20       	breq	80026f8a <pdca_init_channel+0x4e>
80026f88:	d3 03       	ssrf	0x10
80026f8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f8e:	70 08       	ld.w	r8,r8[0x0]
80026f90:	10 99       	mov	r9,r8
80026f92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f96:	91 09       	st.w	r8[0x0],r9
80026f98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026f9c:	70 19       	ld.w	r9,r8[0x4]
80026f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fa2:	91 29       	st.w	r8[0x8],r9
80026fa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fa8:	70 49       	ld.w	r9,r8[0x10]
80026faa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fae:	91 19       	st.w	r8[0x4],r9
80026fb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fb4:	70 28       	ld.w	r8,r8[0x8]
80026fb6:	10 99       	mov	r9,r8
80026fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fbc:	91 39       	st.w	r8[0xc],r9
80026fbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fc2:	70 39       	ld.w	r9,r8[0xc]
80026fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fc8:	91 49       	st.w	r8[0x10],r9
80026fca:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fce:	f1 38 00 18 	ld.ub	r8,r8[24]
80026fd2:	a3 68       	lsl	r8,0x2
80026fd4:	10 99       	mov	r9,r8
80026fd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026fda:	70 58       	ld.w	r8,r8[0x14]
80026fdc:	10 49       	or	r9,r8
80026fde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fe2:	91 69       	st.w	r8[0x18],r9
80026fe4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fe8:	e0 69 01 00 	mov	r9,256
80026fec:	91 59       	st.w	r8[0x14],r9
80026fee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ff2:	70 b8       	ld.w	r8,r8[0x2c]
80026ff4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80026ff8:	30 08       	mov	r8,0
80026ffa:	f0 09 18 00 	cp.b	r9,r8
80026ffe:	c0 20       	breq	80027002 <pdca_init_channel+0xc6>
80027000:	d5 03       	csrf	0x10
80027002:	30 08       	mov	r8,0
80027004:	10 9c       	mov	r12,r8
80027006:	2f cd       	sub	sp,-16
80027008:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002700c:	80 02       	ld.sh	r2,r0[0x0]
8002700e:	6d ca       	ld.w	r10,r6[0x70]

80027010 <pdca_get_channel_status>:
80027010:	eb cd 40 c0 	pushm	r6-r7,lr
80027014:	1a 97       	mov	r7,sp
80027016:	20 2d       	sub	sp,8
80027018:	48 a6       	lddpc	r6,80027040 <pdca_get_channel_status+0x30>
8002701a:	1e 26       	rsub	r6,pc
8002701c:	ef 4c ff f8 	st.w	r7[-8],r12
80027020:	ee fc ff f8 	ld.w	r12,r7[-8]
80027024:	f0 16 00 27 	mcall	r6[156]
80027028:	18 98       	mov	r8,r12
8002702a:	ef 48 ff fc 	st.w	r7[-4],r8
8002702e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027032:	70 78       	ld.w	r8,r8[0x1c]
80027034:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027038:	10 9c       	mov	r12,r8
8002703a:	2f ed       	sub	sp,-8
8002703c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027040:	80 02       	ld.sh	r2,r0[0x0]
80027042:	6e 9e       	ld.w	lr,r7[0x24]

80027044 <pdca_disable>:
80027044:	eb cd 40 c0 	pushm	r6-r7,lr
80027048:	1a 97       	mov	r7,sp
8002704a:	20 2d       	sub	sp,8
8002704c:	48 96       	lddpc	r6,80027070 <pdca_disable+0x2c>
8002704e:	1e 26       	rsub	r6,pc
80027050:	ef 4c ff f8 	st.w	r7[-8],r12
80027054:	ee fc ff f8 	ld.w	r12,r7[-8]
80027058:	f0 16 00 27 	mcall	r6[156]
8002705c:	18 98       	mov	r8,r12
8002705e:	ef 48 ff fc 	st.w	r7[-4],r8
80027062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027066:	30 29       	mov	r9,2
80027068:	91 59       	st.w	r8[0x14],r9
8002706a:	2f ed       	sub	sp,-8
8002706c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027070:	80 02       	ld.sh	r2,r0[0x0]
80027072:	6e d2       	ld.w	r2,r7[0x34]

80027074 <pdca_enable>:
80027074:	eb cd 40 c0 	pushm	r6-r7,lr
80027078:	1a 97       	mov	r7,sp
8002707a:	20 2d       	sub	sp,8
8002707c:	48 96       	lddpc	r6,800270a0 <pdca_enable+0x2c>
8002707e:	1e 26       	rsub	r6,pc
80027080:	ef 4c ff f8 	st.w	r7[-8],r12
80027084:	ee fc ff f8 	ld.w	r12,r7[-8]
80027088:	f0 16 00 27 	mcall	r6[156]
8002708c:	18 98       	mov	r8,r12
8002708e:	ef 48 ff fc 	st.w	r7[-4],r8
80027092:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027096:	30 19       	mov	r9,1
80027098:	91 59       	st.w	r8[0x14],r9
8002709a:	2f ed       	sub	sp,-8
8002709c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800270a0:	80 02       	ld.sh	r2,r0[0x0]
800270a2:	6f 02       	ld.w	r2,r7[0x40]

800270a4 <pdca_get_load_size>:
800270a4:	eb cd 40 c0 	pushm	r6-r7,lr
800270a8:	1a 97       	mov	r7,sp
800270aa:	20 2d       	sub	sp,8
800270ac:	48 96       	lddpc	r6,800270d0 <pdca_get_load_size+0x2c>
800270ae:	1e 26       	rsub	r6,pc
800270b0:	ef 4c ff f8 	st.w	r7[-8],r12
800270b4:	ee fc ff f8 	ld.w	r12,r7[-8]
800270b8:	f0 16 00 27 	mcall	r6[156]
800270bc:	18 98       	mov	r8,r12
800270be:	ef 48 ff fc 	st.w	r7[-4],r8
800270c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270c6:	70 28       	ld.w	r8,r8[0x8]
800270c8:	10 9c       	mov	r12,r8
800270ca:	2f ed       	sub	sp,-8
800270cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800270d0:	80 02       	ld.sh	r2,r0[0x0]
800270d2:	6f 32       	ld.w	r2,r7[0x4c]

800270d4 <pdca_load_channel>:
800270d4:	eb cd 40 c0 	pushm	r6-r7,lr
800270d8:	1a 97       	mov	r7,sp
800270da:	20 5d       	sub	sp,20
800270dc:	49 d6       	lddpc	r6,80027150 <pdca_load_channel+0x7c>
800270de:	1e 26       	rsub	r6,pc
800270e0:	ef 4c ff f4 	st.w	r7[-12],r12
800270e4:	ef 4b ff f0 	st.w	r7[-16],r11
800270e8:	ef 4a ff ec 	st.w	r7[-20],r10
800270ec:	ee fc ff f4 	ld.w	r12,r7[-12]
800270f0:	f0 16 00 27 	mcall	r6[156]
800270f4:	18 98       	mov	r8,r12
800270f6:	ef 48 ff f8 	st.w	r7[-8],r8
800270fa:	e1 b8 00 00 	mfsr	r8,0x0
800270fe:	10 9c       	mov	r12,r8
80027100:	cf 4e       	rcall	80026ee8 <cpu_irq_is_enabled_flags>
80027102:	18 98       	mov	r8,r12
80027104:	ef 68 ff ff 	st.b	r7[-1],r8
80027108:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002710c:	30 08       	mov	r8,0
8002710e:	f0 09 18 00 	cp.b	r9,r8
80027112:	c0 20       	breq	80027116 <pdca_load_channel+0x42>
80027114:	d3 03       	ssrf	0x10
80027116:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002711a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002711e:	91 09       	st.w	r8[0x0],r9
80027120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027124:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027128:	91 29       	st.w	r8[0x8],r9
8002712a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002712e:	e0 69 01 00 	mov	r9,256
80027132:	91 59       	st.w	r8[0x14],r9
80027134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027138:	70 b8       	ld.w	r8,r8[0x2c]
8002713a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002713e:	30 08       	mov	r8,0
80027140:	f0 09 18 00 	cp.b	r9,r8
80027144:	c0 20       	breq	80027148 <pdca_load_channel+0x74>
80027146:	d5 03       	csrf	0x10
80027148:	2f bd       	sub	sp,-20
8002714a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002714e:	00 00       	add	r0,r0
80027150:	80 02       	ld.sh	r2,r0[0x0]
80027152:	6f 62       	ld.w	r2,r7[0x58]

80027154 <pdca_get_reload_size>:
80027154:	eb cd 40 c0 	pushm	r6-r7,lr
80027158:	1a 97       	mov	r7,sp
8002715a:	20 2d       	sub	sp,8
8002715c:	48 96       	lddpc	r6,80027180 <pdca_get_reload_size+0x2c>
8002715e:	1e 26       	rsub	r6,pc
80027160:	ef 4c ff f8 	st.w	r7[-8],r12
80027164:	ee fc ff f8 	ld.w	r12,r7[-8]
80027168:	f0 16 00 27 	mcall	r6[156]
8002716c:	18 98       	mov	r8,r12
8002716e:	ef 48 ff fc 	st.w	r7[-4],r8
80027172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027176:	70 48       	ld.w	r8,r8[0x10]
80027178:	10 9c       	mov	r12,r8
8002717a:	2f ed       	sub	sp,-8
8002717c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027180:	80 02       	ld.sh	r2,r0[0x0]
80027182:	6f e2       	ld.w	r2,r7[0x78]

80027184 <pdca_reload_channel>:
80027184:	eb cd 40 c0 	pushm	r6-r7,lr
80027188:	1a 97       	mov	r7,sp
8002718a:	20 5d       	sub	sp,20
8002718c:	49 d6       	lddpc	r6,80027200 <pdca_reload_channel+0x7c>
8002718e:	1e 26       	rsub	r6,pc
80027190:	ef 4c ff f4 	st.w	r7[-12],r12
80027194:	ef 4b ff f0 	st.w	r7[-16],r11
80027198:	ef 4a ff ec 	st.w	r7[-20],r10
8002719c:	ee fc ff f4 	ld.w	r12,r7[-12]
800271a0:	f0 16 00 27 	mcall	r6[156]
800271a4:	18 98       	mov	r8,r12
800271a6:	ef 48 ff f8 	st.w	r7[-8],r8
800271aa:	e1 b8 00 00 	mfsr	r8,0x0
800271ae:	10 9c       	mov	r12,r8
800271b0:	c9 ce       	rcall	80026ee8 <cpu_irq_is_enabled_flags>
800271b2:	18 98       	mov	r8,r12
800271b4:	ef 68 ff ff 	st.b	r7[-1],r8
800271b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800271bc:	30 08       	mov	r8,0
800271be:	f0 09 18 00 	cp.b	r9,r8
800271c2:	c0 20       	breq	800271c6 <pdca_reload_channel+0x42>
800271c4:	d3 03       	ssrf	0x10
800271c6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800271ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271ce:	91 39       	st.w	r8[0xc],r9
800271d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800271d8:	91 49       	st.w	r8[0x10],r9
800271da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271de:	e0 69 01 00 	mov	r9,256
800271e2:	91 59       	st.w	r8[0x14],r9
800271e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271e8:	70 b8       	ld.w	r8,r8[0x2c]
800271ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800271ee:	30 08       	mov	r8,0
800271f0:	f0 09 18 00 	cp.b	r9,r8
800271f4:	c0 20       	breq	800271f8 <pdca_reload_channel+0x74>
800271f6:	d5 03       	csrf	0x10
800271f8:	2f bd       	sub	sp,-20
800271fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800271fe:	00 00       	add	r0,r0
80027200:	80 02       	ld.sh	r2,r0[0x0]
80027202:	70 12       	ld.w	r2,r8[0x4]

80027204 <pdca_set_peripheral_select>:
80027204:	eb cd 40 c0 	pushm	r6-r7,lr
80027208:	1a 97       	mov	r7,sp
8002720a:	20 3d       	sub	sp,12
8002720c:	48 b6       	lddpc	r6,80027238 <pdca_set_peripheral_select+0x34>
8002720e:	1e 26       	rsub	r6,pc
80027210:	ef 4c ff f8 	st.w	r7[-8],r12
80027214:	ef 4b ff f4 	st.w	r7[-12],r11
80027218:	ee fc ff f8 	ld.w	r12,r7[-8]
8002721c:	f0 16 00 27 	mcall	r6[156]
80027220:	18 98       	mov	r8,r12
80027222:	ef 48 ff fc 	st.w	r7[-4],r8
80027226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002722a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002722e:	91 19       	st.w	r8[0x4],r9
80027230:	2f dd       	sub	sp,-12
80027232:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027236:	00 00       	add	r0,r0
80027238:	80 02       	ld.sh	r2,r0[0x0]
8002723a:	70 92       	ld.w	r2,r8[0x24]

8002723c <pdca_set_transfer_size>:
8002723c:	eb cd 40 c0 	pushm	r6-r7,lr
80027240:	1a 97       	mov	r7,sp
80027242:	20 3d       	sub	sp,12
80027244:	48 e6       	lddpc	r6,8002727c <pdca_set_transfer_size+0x40>
80027246:	1e 26       	rsub	r6,pc
80027248:	ef 4c ff f8 	st.w	r7[-8],r12
8002724c:	ef 4b ff f4 	st.w	r7[-12],r11
80027250:	ee fc ff f8 	ld.w	r12,r7[-8]
80027254:	f0 16 00 27 	mcall	r6[156]
80027258:	18 98       	mov	r8,r12
8002725a:	ef 48 ff fc 	st.w	r7[-4],r8
8002725e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027262:	70 68       	ld.w	r8,r8[0x18]
80027264:	10 99       	mov	r9,r8
80027266:	e0 19 ff fc 	andl	r9,0xfffc
8002726a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002726e:	10 49       	or	r9,r8
80027270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027274:	91 69       	st.w	r8[0x18],r9
80027276:	2f dd       	sub	sp,-12
80027278:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002727c:	80 02       	ld.sh	r2,r0[0x0]
8002727e:	70 ca       	ld.w	r10,r8[0x30]

80027280 <pdca_disable_event_trigger>:
80027280:	eb cd 40 c0 	pushm	r6-r7,lr
80027284:	1a 97       	mov	r7,sp
80027286:	20 2d       	sub	sp,8
80027288:	48 b6       	lddpc	r6,800272b4 <pdca_disable_event_trigger+0x34>
8002728a:	1e 26       	rsub	r6,pc
8002728c:	ef 4c ff f8 	st.w	r7[-8],r12
80027290:	ee fc ff f8 	ld.w	r12,r7[-8]
80027294:	f0 16 00 27 	mcall	r6[156]
80027298:	18 98       	mov	r8,r12
8002729a:	ef 48 ff fc 	st.w	r7[-4],r8
8002729e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272a2:	70 68       	ld.w	r8,r8[0x18]
800272a4:	10 99       	mov	r9,r8
800272a6:	a3 c9       	cbr	r9,0x2
800272a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272ac:	91 69       	st.w	r8[0x18],r9
800272ae:	2f ed       	sub	sp,-8
800272b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800272b4:	80 02       	ld.sh	r2,r0[0x0]
800272b6:	71 0e       	ld.w	lr,r8[0x40]

800272b8 <pdca_enable_event_trigger>:
800272b8:	eb cd 40 c0 	pushm	r6-r7,lr
800272bc:	1a 97       	mov	r7,sp
800272be:	20 2d       	sub	sp,8
800272c0:	48 b6       	lddpc	r6,800272ec <pdca_enable_event_trigger+0x34>
800272c2:	1e 26       	rsub	r6,pc
800272c4:	ef 4c ff f8 	st.w	r7[-8],r12
800272c8:	ee fc ff f8 	ld.w	r12,r7[-8]
800272cc:	f0 16 00 27 	mcall	r6[156]
800272d0:	18 98       	mov	r8,r12
800272d2:	ef 48 ff fc 	st.w	r7[-4],r8
800272d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272da:	70 68       	ld.w	r8,r8[0x18]
800272dc:	10 99       	mov	r9,r8
800272de:	a3 a9       	sbr	r9,0x2
800272e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272e4:	91 69       	st.w	r8[0x18],r9
800272e6:	2f ed       	sub	sp,-8
800272e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800272ec:	80 02       	ld.sh	r2,r0[0x0]
800272ee:	71 46       	ld.w	r6,r8[0x50]

800272f0 <pdca_disable_interrupt_transfer_error>:
800272f0:	eb cd 40 c0 	pushm	r6-r7,lr
800272f4:	1a 97       	mov	r7,sp
800272f6:	20 3d       	sub	sp,12
800272f8:	49 66       	lddpc	r6,80027350 <pdca_disable_interrupt_transfer_error+0x60>
800272fa:	1e 26       	rsub	r6,pc
800272fc:	ef 4c ff f4 	st.w	r7[-12],r12
80027300:	ee fc ff f4 	ld.w	r12,r7[-12]
80027304:	f0 16 00 27 	mcall	r6[156]
80027308:	18 98       	mov	r8,r12
8002730a:	ef 48 ff f8 	st.w	r7[-8],r8
8002730e:	e1 b8 00 00 	mfsr	r8,0x0
80027312:	10 9c       	mov	r12,r8
80027314:	fe b0 fd ea 	rcall	80026ee8 <cpu_irq_is_enabled_flags>
80027318:	18 98       	mov	r8,r12
8002731a:	ef 68 ff ff 	st.b	r7[-1],r8
8002731e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027322:	30 08       	mov	r8,0
80027324:	f0 09 18 00 	cp.b	r9,r8
80027328:	c0 20       	breq	8002732c <pdca_disable_interrupt_transfer_error+0x3c>
8002732a:	d3 03       	ssrf	0x10
8002732c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027330:	30 49       	mov	r9,4
80027332:	91 99       	st.w	r8[0x24],r9
80027334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027338:	70 b8       	ld.w	r8,r8[0x2c]
8002733a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002733e:	30 08       	mov	r8,0
80027340:	f0 09 18 00 	cp.b	r9,r8
80027344:	c0 20       	breq	80027348 <pdca_disable_interrupt_transfer_error+0x58>
80027346:	d5 03       	csrf	0x10
80027348:	2f dd       	sub	sp,-12
8002734a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002734e:	00 00       	add	r0,r0
80027350:	80 02       	ld.sh	r2,r0[0x0]
80027352:	71 7e       	ld.w	lr,r8[0x5c]

80027354 <pdca_enable_interrupt_transfer_error>:
80027354:	eb cd 40 c0 	pushm	r6-r7,lr
80027358:	1a 97       	mov	r7,sp
8002735a:	20 2d       	sub	sp,8
8002735c:	48 96       	lddpc	r6,80027380 <pdca_enable_interrupt_transfer_error+0x2c>
8002735e:	1e 26       	rsub	r6,pc
80027360:	ef 4c ff f8 	st.w	r7[-8],r12
80027364:	ee fc ff f8 	ld.w	r12,r7[-8]
80027368:	f0 16 00 27 	mcall	r6[156]
8002736c:	18 98       	mov	r8,r12
8002736e:	ef 48 ff fc 	st.w	r7[-4],r8
80027372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027376:	30 49       	mov	r9,4
80027378:	91 89       	st.w	r8[0x20],r9
8002737a:	2f ed       	sub	sp,-8
8002737c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027380:	80 02       	ld.sh	r2,r0[0x0]
80027382:	71 e2       	ld.w	r2,r8[0x78]

80027384 <pdca_disable_interrupt_transfer_complete>:
80027384:	eb cd 40 c0 	pushm	r6-r7,lr
80027388:	1a 97       	mov	r7,sp
8002738a:	20 3d       	sub	sp,12
8002738c:	49 66       	lddpc	r6,800273e4 <pdca_disable_interrupt_transfer_complete+0x60>
8002738e:	1e 26       	rsub	r6,pc
80027390:	ef 4c ff f4 	st.w	r7[-12],r12
80027394:	ee fc ff f4 	ld.w	r12,r7[-12]
80027398:	f0 16 00 27 	mcall	r6[156]
8002739c:	18 98       	mov	r8,r12
8002739e:	ef 48 ff f8 	st.w	r7[-8],r8
800273a2:	e1 b8 00 00 	mfsr	r8,0x0
800273a6:	10 9c       	mov	r12,r8
800273a8:	fe b0 fd a0 	rcall	80026ee8 <cpu_irq_is_enabled_flags>
800273ac:	18 98       	mov	r8,r12
800273ae:	ef 68 ff ff 	st.b	r7[-1],r8
800273b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800273b6:	30 08       	mov	r8,0
800273b8:	f0 09 18 00 	cp.b	r9,r8
800273bc:	c0 20       	breq	800273c0 <pdca_disable_interrupt_transfer_complete+0x3c>
800273be:	d3 03       	ssrf	0x10
800273c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273c4:	30 29       	mov	r9,2
800273c6:	91 99       	st.w	r8[0x24],r9
800273c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273cc:	70 b8       	ld.w	r8,r8[0x2c]
800273ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800273d2:	30 08       	mov	r8,0
800273d4:	f0 09 18 00 	cp.b	r9,r8
800273d8:	c0 20       	breq	800273dc <pdca_disable_interrupt_transfer_complete+0x58>
800273da:	d5 03       	csrf	0x10
800273dc:	2f dd       	sub	sp,-12
800273de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800273e2:	00 00       	add	r0,r0
800273e4:	80 02       	ld.sh	r2,r0[0x0]
800273e6:	72 12       	ld.w	r2,r9[0x4]

800273e8 <pdca_enable_interrupt_transfer_complete>:
800273e8:	eb cd 40 c0 	pushm	r6-r7,lr
800273ec:	1a 97       	mov	r7,sp
800273ee:	20 2d       	sub	sp,8
800273f0:	48 96       	lddpc	r6,80027414 <pdca_enable_interrupt_transfer_complete+0x2c>
800273f2:	1e 26       	rsub	r6,pc
800273f4:	ef 4c ff f8 	st.w	r7[-8],r12
800273f8:	ee fc ff f8 	ld.w	r12,r7[-8]
800273fc:	f0 16 00 27 	mcall	r6[156]
80027400:	18 98       	mov	r8,r12
80027402:	ef 48 ff fc 	st.w	r7[-4],r8
80027406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002740a:	30 29       	mov	r9,2
8002740c:	91 89       	st.w	r8[0x20],r9
8002740e:	2f ed       	sub	sp,-8
80027410:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027414:	80 02       	ld.sh	r2,r0[0x0]
80027416:	72 76       	ld.w	r6,r9[0x1c]

80027418 <pdca_disable_interrupt_reload_counter_zero>:
80027418:	eb cd 40 c0 	pushm	r6-r7,lr
8002741c:	1a 97       	mov	r7,sp
8002741e:	20 3d       	sub	sp,12
80027420:	49 66       	lddpc	r6,80027478 <pdca_disable_interrupt_reload_counter_zero+0x60>
80027422:	1e 26       	rsub	r6,pc
80027424:	ef 4c ff f4 	st.w	r7[-12],r12
80027428:	ee fc ff f4 	ld.w	r12,r7[-12]
8002742c:	f0 16 00 27 	mcall	r6[156]
80027430:	18 98       	mov	r8,r12
80027432:	ef 48 ff f8 	st.w	r7[-8],r8
80027436:	e1 b8 00 00 	mfsr	r8,0x0
8002743a:	10 9c       	mov	r12,r8
8002743c:	fe b0 fd 56 	rcall	80026ee8 <cpu_irq_is_enabled_flags>
80027440:	18 98       	mov	r8,r12
80027442:	ef 68 ff ff 	st.b	r7[-1],r8
80027446:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002744a:	30 08       	mov	r8,0
8002744c:	f0 09 18 00 	cp.b	r9,r8
80027450:	c0 20       	breq	80027454 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80027452:	d3 03       	ssrf	0x10
80027454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027458:	30 19       	mov	r9,1
8002745a:	91 99       	st.w	r8[0x24],r9
8002745c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027460:	70 b8       	ld.w	r8,r8[0x2c]
80027462:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027466:	30 08       	mov	r8,0
80027468:	f0 09 18 00 	cp.b	r9,r8
8002746c:	c0 20       	breq	80027470 <pdca_disable_interrupt_reload_counter_zero+0x58>
8002746e:	d5 03       	csrf	0x10
80027470:	2f dd       	sub	sp,-12
80027472:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027476:	00 00       	add	r0,r0
80027478:	80 02       	ld.sh	r2,r0[0x0]
8002747a:	72 a6       	ld.w	r6,r9[0x28]

8002747c <pdca_enable_interrupt_reload_counter_zero>:
8002747c:	eb cd 40 c0 	pushm	r6-r7,lr
80027480:	1a 97       	mov	r7,sp
80027482:	20 2d       	sub	sp,8
80027484:	48 96       	lddpc	r6,800274a8 <pdca_enable_interrupt_reload_counter_zero+0x2c>
80027486:	1e 26       	rsub	r6,pc
80027488:	ef 4c ff f8 	st.w	r7[-8],r12
8002748c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027490:	f0 16 00 27 	mcall	r6[156]
80027494:	18 98       	mov	r8,r12
80027496:	ef 48 ff fc 	st.w	r7[-4],r8
8002749a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002749e:	30 19       	mov	r9,1
800274a0:	91 89       	st.w	r8[0x20],r9
800274a2:	2f ed       	sub	sp,-8
800274a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274a8:	80 02       	ld.sh	r2,r0[0x0]
800274aa:	73 0a       	ld.w	r10,r9[0x40]

800274ac <pdca_get_transfer_status>:
800274ac:	eb cd 40 c0 	pushm	r6-r7,lr
800274b0:	1a 97       	mov	r7,sp
800274b2:	20 2d       	sub	sp,8
800274b4:	48 96       	lddpc	r6,800274d8 <pdca_get_transfer_status+0x2c>
800274b6:	1e 26       	rsub	r6,pc
800274b8:	ef 4c ff f8 	st.w	r7[-8],r12
800274bc:	ee fc ff f8 	ld.w	r12,r7[-8]
800274c0:	f0 16 00 27 	mcall	r6[156]
800274c4:	18 98       	mov	r8,r12
800274c6:	ef 48 ff fc 	st.w	r7[-4],r8
800274ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274ce:	70 b8       	ld.w	r8,r8[0x2c]
800274d0:	10 9c       	mov	r12,r8
800274d2:	2f ed       	sub	sp,-8
800274d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274d8:	80 02       	ld.sh	r2,r0[0x0]
800274da:	73 3a       	ld.w	r10,r9[0x4c]

800274dc <pevc_channel_configure>:
800274dc:	eb cd 40 80 	pushm	r7,lr
800274e0:	1a 97       	mov	r7,sp
800274e2:	20 4d       	sub	sp,16
800274e4:	ef 4c ff fc 	st.w	r7[-4],r12
800274e8:	14 98       	mov	r8,r10
800274ea:	ef 49 ff f0 	st.w	r7[-16],r9
800274ee:	16 99       	mov	r9,r11
800274f0:	ef 59 ff f8 	st.h	r7[-8],r9
800274f4:	ef 58 ff f4 	st.h	r7[-12],r8
800274f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274fc:	58 08       	cp.w	r8,0
800274fe:	c6 90       	breq	800275d0 <pevc_channel_configure+0xf4>
80027500:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80027504:	32 18       	mov	r8,33
80027506:	f0 09 19 00 	cp.h	r9,r8
8002750a:	e0 8b 00 61 	brhi	800275cc <pevc_channel_configure+0xf0>
8002750e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027512:	31 58       	mov	r8,21
80027514:	f0 09 19 00 	cp.h	r9,r8
80027518:	e0 8b 00 5a 	brhi	800275cc <pevc_channel_configure+0xf0>
8002751c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80027520:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80027524:	5c 58       	castu.b	r8
80027526:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002752a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002752e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027532:	2c 0a       	sub	r10,-64
80027534:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027538:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
8002753c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027544:	58 08       	cp.w	r8,0
80027546:	c4 10       	breq	800275c8 <pevc_channel_configure+0xec>
80027548:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002754c:	11 88       	ld.ub	r8,r8[0x0]
8002754e:	10 99       	mov	r9,r8
80027550:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027554:	91 29       	st.w	r8[0x8],r9
80027556:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002755a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002755e:	70 18       	ld.w	r8,r8[0x4]
80027560:	5c 58       	castu.b	r8
80027562:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027566:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002756a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002756e:	28 0a       	sub	r10,-128
80027570:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027574:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
80027578:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
8002757c:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027580:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027584:	70 28       	ld.w	r8,r8[0x8]
80027586:	5c 58       	castu.b	r8
80027588:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002758c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027590:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027594:	28 0a       	sub	r10,-128
80027596:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002759a:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
8002759e:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800275a2:	ef 1a ff f4 	ld.uh	r10,r7[-12]
800275a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800275aa:	70 38       	ld.w	r8,r8[0xc]
800275ac:	5c 58       	castu.b	r8
800275ae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800275b2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800275b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800275ba:	28 0a       	sub	r10,-128
800275bc:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800275c0:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
800275c4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800275c8:	30 08       	mov	r8,0
800275ca:	c0 48       	rjmp	800275d2 <pevc_channel_configure+0xf6>
800275cc:	30 18       	mov	r8,1
800275ce:	c0 28       	rjmp	800275d2 <pevc_channel_configure+0xf6>
800275d0:	30 18       	mov	r8,1
800275d2:	10 9c       	mov	r12,r8
800275d4:	2f cd       	sub	sp,-16
800275d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800275da <pevc_igfd_set>:
800275da:	eb cd 40 80 	pushm	r7,lr
800275de:	1a 97       	mov	r7,sp
800275e0:	20 2d       	sub	sp,8
800275e2:	ef 4c ff fc 	st.w	r7[-4],r12
800275e6:	16 98       	mov	r8,r11
800275e8:	ef 68 ff f8 	st.b	r7[-8],r8
800275ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800275f0:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800275f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275f8:	91 29       	st.w	r8[0x8],r9
800275fa:	2f ed       	sub	sp,-8
800275fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80027600 <pevc_channels_enable>:
80027600:	eb cd 40 80 	pushm	r7,lr
80027604:	1a 97       	mov	r7,sp
80027606:	20 3d       	sub	sp,12
80027608:	ef 4c ff fc 	st.w	r7[-4],r12
8002760c:	ee eb ff f4 	st.d	r7[-12],r10
80027610:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027614:	fc 1a 80 00 	movh	r10,0x8000
80027618:	30 0b       	mov	r11,0
8002761a:	14 38       	cp.w	r8,r10
8002761c:	f6 09 13 00 	cpc	r9,r11
80027620:	e0 8b 00 08 	brhi	80027630 <pevc_channels_enable+0x30>
80027624:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027628:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002762c:	91 89       	st.w	r8[0x20],r9
8002762e:	c0 68       	rjmp	8002763a <pevc_channels_enable+0x3a>
80027630:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027638:	91 99       	st.w	r8[0x24],r9
8002763a:	2f dd       	sub	sp,-12
8002763c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027640 <pevc_channels_disable>:
80027640:	eb cd 40 80 	pushm	r7,lr
80027644:	1a 97       	mov	r7,sp
80027646:	20 3d       	sub	sp,12
80027648:	ef 4c ff fc 	st.w	r7[-4],r12
8002764c:	ee eb ff f4 	st.d	r7[-12],r10
80027650:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027654:	fc 1a 80 00 	movh	r10,0x8000
80027658:	30 0b       	mov	r11,0
8002765a:	14 38       	cp.w	r8,r10
8002765c:	f6 09 13 00 	cpc	r9,r11
80027660:	e0 8b 00 08 	brhi	80027670 <pevc_channels_disable+0x30>
80027664:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002766c:	91 c9       	st.w	r8[0x30],r9
8002766e:	c0 68       	rjmp	8002767a <pevc_channels_disable+0x3a>
80027670:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027678:	91 d9       	st.w	r8[0x34],r9
8002767a:	2f dd       	sub	sp,-12
8002767c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027680 <pevc_get_channel_status>:
80027680:	eb cd 40 80 	pushm	r7,lr
80027684:	1a 97       	mov	r7,sp
80027686:	20 2d       	sub	sp,8
80027688:	ef 4c ff fc 	st.w	r7[-4],r12
8002768c:	16 98       	mov	r8,r11
8002768e:	ef 58 ff f8 	st.h	r7[-8],r8
80027692:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027696:	31 f8       	mov	r8,31
80027698:	f0 09 19 00 	cp.h	r9,r8
8002769c:	e0 8b 00 12 	brhi	800276c0 <pevc_get_channel_status+0x40>
800276a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276a4:	70 49       	ld.w	r9,r8[0x10]
800276a6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800276aa:	30 1a       	mov	r10,1
800276ac:	f4 08 09 48 	lsl	r8,r10,r8
800276b0:	10 69       	and	r9,r8
800276b2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800276b6:	f2 08 0a 48 	lsr	r8,r9,r8
800276ba:	5f 18       	srne	r8
800276bc:	5c 58       	castu.b	r8
800276be:	c1 28       	rjmp	800276e2 <pevc_get_channel_status+0x62>
800276c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276c4:	70 59       	ld.w	r9,r8[0x14]
800276c6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800276ca:	22 08       	sub	r8,32
800276cc:	30 1a       	mov	r10,1
800276ce:	f4 08 09 48 	lsl	r8,r10,r8
800276d2:	10 69       	and	r9,r8
800276d4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800276d8:	22 08       	sub	r8,32
800276da:	f2 08 0a 48 	lsr	r8,r9,r8
800276de:	5f 18       	srne	r8
800276e0:	5c 58       	castu.b	r8
800276e2:	10 9c       	mov	r12,r8
800276e4:	2f ed       	sub	sp,-8
800276e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800276ea <pevc_get_channel_state>:
800276ea:	eb cd 40 80 	pushm	r7,lr
800276ee:	1a 97       	mov	r7,sp
800276f0:	20 2d       	sub	sp,8
800276f2:	ef 4c ff fc 	st.w	r7[-4],r12
800276f6:	16 98       	mov	r8,r11
800276f8:	ef 58 ff f8 	st.h	r7[-8],r8
800276fc:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027700:	31 f8       	mov	r8,31
80027702:	f0 09 19 00 	cp.h	r9,r8
80027706:	e0 8b 00 12 	brhi	8002772a <pevc_get_channel_state+0x40>
8002770a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002770e:	71 49       	ld.w	r9,r8[0x50]
80027710:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027714:	30 1a       	mov	r10,1
80027716:	f4 08 09 48 	lsl	r8,r10,r8
8002771a:	10 69       	and	r9,r8
8002771c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027720:	f2 08 0a 48 	lsr	r8,r9,r8
80027724:	5f 18       	srne	r8
80027726:	5c 58       	castu.b	r8
80027728:	c1 28       	rjmp	8002774c <pevc_get_channel_state+0x62>
8002772a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002772e:	71 59       	ld.w	r9,r8[0x54]
80027730:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027734:	22 08       	sub	r8,32
80027736:	30 1a       	mov	r10,1
80027738:	f4 08 09 48 	lsl	r8,r10,r8
8002773c:	10 69       	and	r9,r8
8002773e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027742:	22 08       	sub	r8,32
80027744:	f2 08 0a 48 	lsr	r8,r9,r8
80027748:	5f 18       	srne	r8
8002774a:	5c 58       	castu.b	r8
8002774c:	10 9c       	mov	r12,r8
8002774e:	2f ed       	sub	sp,-8
80027750:	e3 cd 80 80 	ldm	sp++,r7,pc

80027754 <pevc_channel_sev_enable>:
80027754:	eb cd 40 80 	pushm	r7,lr
80027758:	1a 97       	mov	r7,sp
8002775a:	20 2d       	sub	sp,8
8002775c:	ef 4c ff fc 	st.w	r7[-4],r12
80027760:	16 98       	mov	r8,r11
80027762:	ef 58 ff f8 	st.h	r7[-8],r8
80027766:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002776a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002776e:	f0 ca ff c0 	sub	r10,r8,-64
80027772:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027776:	30 1b       	mov	r11,1
80027778:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
8002777c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027780:	2f ed       	sub	sp,-8
80027782:	e3 cd 80 80 	ldm	sp++,r7,pc

80027786 <pevc_channels_trigger_sev>:
80027786:	eb cd 40 80 	pushm	r7,lr
8002778a:	1a 97       	mov	r7,sp
8002778c:	20 3d       	sub	sp,12
8002778e:	ef 4c ff fc 	st.w	r7[-4],r12
80027792:	ee eb ff f4 	st.d	r7[-12],r10
80027796:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002779a:	fc 1a 80 00 	movh	r10,0x8000
8002779e:	30 0b       	mov	r11,0
800277a0:	14 38       	cp.w	r8,r10
800277a2:	f6 09 13 00 	cpc	r9,r11
800277a6:	e0 8b 00 09 	brhi	800277b8 <pevc_channels_trigger_sev+0x32>
800277aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800277ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277b2:	f1 49 00 40 	st.w	r8[64],r9
800277b6:	c0 78       	rjmp	800277c4 <pevc_channels_trigger_sev+0x3e>
800277b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800277bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277c0:	f1 49 00 44 	st.w	r8[68],r9
800277c4:	2f dd       	sub	sp,-12
800277c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800277ca <pevc_channel_sev_disable>:
800277ca:	eb cd 40 80 	pushm	r7,lr
800277ce:	1a 97       	mov	r7,sp
800277d0:	20 2d       	sub	sp,8
800277d2:	ef 4c ff fc 	st.w	r7[-4],r12
800277d6:	16 98       	mov	r8,r11
800277d8:	ef 58 ff f8 	st.h	r7[-8],r8
800277dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800277e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800277e4:	f0 ca ff c0 	sub	r10,r8,-64
800277e8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800277ec:	30 0b       	mov	r11,0
800277ee:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
800277f2:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800277f6:	2f ed       	sub	sp,-8
800277f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800277fc <pevc_channels_enable_trigger_interrupt>:
800277fc:	eb cd 40 80 	pushm	r7,lr
80027800:	1a 97       	mov	r7,sp
80027802:	20 3d       	sub	sp,12
80027804:	ef 4c ff fc 	st.w	r7[-4],r12
80027808:	ee eb ff f4 	st.d	r7[-12],r10
8002780c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027810:	fc 1a 80 00 	movh	r10,0x8000
80027814:	30 0b       	mov	r11,0
80027816:	14 38       	cp.w	r8,r10
80027818:	f6 09 13 00 	cpc	r9,r11
8002781c:	e0 8b 00 09 	brhi	8002782e <pevc_channels_enable_trigger_interrupt+0x32>
80027820:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027824:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027828:	f1 49 00 90 	st.w	r8[144],r9
8002782c:	c0 78       	rjmp	8002783a <pevc_channels_enable_trigger_interrupt+0x3e>
8002782e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027832:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027836:	f1 49 00 94 	st.w	r8[148],r9
8002783a:	2f dd       	sub	sp,-12
8002783c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027840 <pevc_channels_disable_trigger_interrupt>:
80027840:	eb cd 40 80 	pushm	r7,lr
80027844:	1a 97       	mov	r7,sp
80027846:	20 3d       	sub	sp,12
80027848:	ef 4c ff fc 	st.w	r7[-4],r12
8002784c:	ee eb ff f4 	st.d	r7[-12],r10
80027850:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027854:	fc 1a 80 00 	movh	r10,0x8000
80027858:	30 0b       	mov	r11,0
8002785a:	14 38       	cp.w	r8,r10
8002785c:	f6 09 13 00 	cpc	r9,r11
80027860:	e0 8b 00 09 	brhi	80027872 <pevc_channels_disable_trigger_interrupt+0x32>
80027864:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002786c:	f1 49 00 a0 	st.w	r8[160],r9
80027870:	c0 78       	rjmp	8002787e <pevc_channels_disable_trigger_interrupt+0x3e>
80027872:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002787a:	f1 49 00 a4 	st.w	r8[164],r9
8002787e:	2f dd       	sub	sp,-12
80027880:	e3 cd 80 80 	ldm	sp++,r7,pc

80027884 <pevc_channel_is_trigger_interrupt_enabled>:
80027884:	eb cd 40 80 	pushm	r7,lr
80027888:	1a 97       	mov	r7,sp
8002788a:	20 2d       	sub	sp,8
8002788c:	ef 4c ff fc 	st.w	r7[-4],r12
80027890:	16 98       	mov	r8,r11
80027892:	ef 58 ff f8 	st.h	r7[-8],r8
80027896:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002789a:	31 f8       	mov	r8,31
8002789c:	f0 09 19 00 	cp.h	r9,r8
800278a0:	e0 8b 00 13 	brhi	800278c6 <pevc_channel_is_trigger_interrupt_enabled+0x42>
800278a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278a8:	f0 f9 00 80 	ld.w	r9,r8[128]
800278ac:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800278b0:	30 1a       	mov	r10,1
800278b2:	f4 08 09 48 	lsl	r8,r10,r8
800278b6:	10 69       	and	r9,r8
800278b8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800278bc:	f2 08 0a 48 	lsr	r8,r9,r8
800278c0:	5f 18       	srne	r8
800278c2:	5c 58       	castu.b	r8
800278c4:	c1 38       	rjmp	800278ea <pevc_channel_is_trigger_interrupt_enabled+0x66>
800278c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278ca:	f0 f9 00 84 	ld.w	r9,r8[132]
800278ce:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800278d2:	22 08       	sub	r8,32
800278d4:	30 1a       	mov	r10,1
800278d6:	f4 08 09 48 	lsl	r8,r10,r8
800278da:	10 69       	and	r9,r8
800278dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800278e0:	22 08       	sub	r8,32
800278e2:	f2 08 0a 48 	lsr	r8,r9,r8
800278e6:	5f 18       	srne	r8
800278e8:	5c 58       	castu.b	r8
800278ea:	10 9c       	mov	r12,r8
800278ec:	2f ed       	sub	sp,-8
800278ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800278f2 <pevc_channel_is_trigger_interrupt_raised>:
800278f2:	eb cd 40 80 	pushm	r7,lr
800278f6:	1a 97       	mov	r7,sp
800278f8:	20 2d       	sub	sp,8
800278fa:	ef 4c ff fc 	st.w	r7[-4],r12
800278fe:	16 98       	mov	r8,r11
80027900:	ef 58 ff f8 	st.h	r7[-8],r8
80027904:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027908:	31 f8       	mov	r8,31
8002790a:	f0 09 19 00 	cp.h	r9,r8
8002790e:	e0 8b 00 12 	brhi	80027932 <pevc_channel_is_trigger_interrupt_raised+0x40>
80027912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027916:	71 89       	ld.w	r9,r8[0x60]
80027918:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002791c:	30 1a       	mov	r10,1
8002791e:	f4 08 09 48 	lsl	r8,r10,r8
80027922:	10 69       	and	r9,r8
80027924:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027928:	f2 08 0a 48 	lsr	r8,r9,r8
8002792c:	5f 18       	srne	r8
8002792e:	5c 58       	castu.b	r8
80027930:	c1 28       	rjmp	80027954 <pevc_channel_is_trigger_interrupt_raised+0x62>
80027932:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027936:	71 99       	ld.w	r9,r8[0x64]
80027938:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002793c:	22 08       	sub	r8,32
8002793e:	30 1a       	mov	r10,1
80027940:	f4 08 09 48 	lsl	r8,r10,r8
80027944:	10 69       	and	r9,r8
80027946:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002794a:	22 08       	sub	r8,32
8002794c:	f2 08 0a 48 	lsr	r8,r9,r8
80027950:	5f 18       	srne	r8
80027952:	5c 58       	castu.b	r8
80027954:	10 9c       	mov	r12,r8
80027956:	2f ed       	sub	sp,-8
80027958:	e3 cd 80 80 	ldm	sp++,r7,pc

8002795c <pevc_channel_clear_trigger_interrupt>:
8002795c:	eb cd 40 80 	pushm	r7,lr
80027960:	1a 97       	mov	r7,sp
80027962:	20 2d       	sub	sp,8
80027964:	ef 4c ff fc 	st.w	r7[-4],r12
80027968:	16 98       	mov	r8,r11
8002796a:	ef 58 ff f8 	st.h	r7[-8],r8
8002796e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027972:	31 f8       	mov	r8,31
80027974:	f0 09 19 00 	cp.h	r9,r8
80027978:	e0 8b 00 0d 	brhi	80027992 <pevc_channel_clear_trigger_interrupt+0x36>
8002797c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027980:	30 19       	mov	r9,1
80027982:	f2 08 09 48 	lsl	r8,r9,r8
80027986:	10 99       	mov	r9,r8
80027988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002798c:	f1 49 00 70 	st.w	r8[112],r9
80027990:	c0 c8       	rjmp	800279a8 <pevc_channel_clear_trigger_interrupt+0x4c>
80027992:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027996:	22 08       	sub	r8,32
80027998:	30 19       	mov	r9,1
8002799a:	f2 08 09 48 	lsl	r8,r9,r8
8002799e:	10 99       	mov	r9,r8
800279a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279a4:	f1 49 00 74 	st.w	r8[116],r9
800279a8:	2f ed       	sub	sp,-8
800279aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800279ae <pevc_channels_enable_overrun_interrupt>:
800279ae:	eb cd 40 80 	pushm	r7,lr
800279b2:	1a 97       	mov	r7,sp
800279b4:	20 3d       	sub	sp,12
800279b6:	ef 4c ff fc 	st.w	r7[-4],r12
800279ba:	ee eb ff f4 	st.d	r7[-12],r10
800279be:	ee e8 ff f4 	ld.d	r8,r7[-12]
800279c2:	fc 1a 80 00 	movh	r10,0x8000
800279c6:	30 0b       	mov	r11,0
800279c8:	14 38       	cp.w	r8,r10
800279ca:	f6 09 13 00 	cpc	r9,r11
800279ce:	e0 8b 00 09 	brhi	800279e0 <pevc_channels_enable_overrun_interrupt+0x32>
800279d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800279d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279da:	f1 49 00 e0 	st.w	r8[224],r9
800279de:	c0 78       	rjmp	800279ec <pevc_channels_enable_overrun_interrupt+0x3e>
800279e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800279e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279e8:	f1 49 00 e4 	st.w	r8[228],r9
800279ec:	2f dd       	sub	sp,-12
800279ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800279f2 <pevc_channels_disable_overrun_interrupt>:
800279f2:	eb cd 40 80 	pushm	r7,lr
800279f6:	1a 97       	mov	r7,sp
800279f8:	20 3d       	sub	sp,12
800279fa:	ef 4c ff fc 	st.w	r7[-4],r12
800279fe:	ee eb ff f4 	st.d	r7[-12],r10
80027a02:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027a06:	fc 1a 80 00 	movh	r10,0x8000
80027a0a:	30 0b       	mov	r11,0
80027a0c:	14 38       	cp.w	r8,r10
80027a0e:	f6 09 13 00 	cpc	r9,r11
80027a12:	e0 8b 00 09 	brhi	80027a24 <pevc_channels_disable_overrun_interrupt+0x32>
80027a16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a1e:	f1 49 00 f0 	st.w	r8[240],r9
80027a22:	c0 78       	rjmp	80027a30 <pevc_channels_disable_overrun_interrupt+0x3e>
80027a24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a2c:	f1 49 00 f4 	st.w	r8[244],r9
80027a30:	2f dd       	sub	sp,-12
80027a32:	e3 cd 80 80 	ldm	sp++,r7,pc

80027a36 <pevc_channel_is_overrun_interrupt_enabled>:
80027a36:	eb cd 40 80 	pushm	r7,lr
80027a3a:	1a 97       	mov	r7,sp
80027a3c:	20 2d       	sub	sp,8
80027a3e:	ef 4c ff fc 	st.w	r7[-4],r12
80027a42:	16 98       	mov	r8,r11
80027a44:	ef 58 ff f8 	st.h	r7[-8],r8
80027a48:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027a4c:	31 f8       	mov	r8,31
80027a4e:	f0 09 19 00 	cp.h	r9,r8
80027a52:	e0 8b 00 13 	brhi	80027a78 <pevc_channel_is_overrun_interrupt_enabled+0x42>
80027a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a5a:	f0 f9 00 d0 	ld.w	r9,r8[208]
80027a5e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027a62:	30 1a       	mov	r10,1
80027a64:	f4 08 09 48 	lsl	r8,r10,r8
80027a68:	10 69       	and	r9,r8
80027a6a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027a6e:	f2 08 0a 48 	lsr	r8,r9,r8
80027a72:	5f 18       	srne	r8
80027a74:	5c 58       	castu.b	r8
80027a76:	c1 38       	rjmp	80027a9c <pevc_channel_is_overrun_interrupt_enabled+0x66>
80027a78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a7c:	f0 f9 00 d4 	ld.w	r9,r8[212]
80027a80:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027a84:	22 08       	sub	r8,32
80027a86:	30 1a       	mov	r10,1
80027a88:	f4 08 09 48 	lsl	r8,r10,r8
80027a8c:	10 69       	and	r9,r8
80027a8e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027a92:	22 08       	sub	r8,32
80027a94:	f2 08 0a 48 	lsr	r8,r9,r8
80027a98:	5f 18       	srne	r8
80027a9a:	5c 58       	castu.b	r8
80027a9c:	10 9c       	mov	r12,r8
80027a9e:	2f ed       	sub	sp,-8
80027aa0:	e3 cd 80 80 	ldm	sp++,r7,pc

80027aa4 <pevc_channel_is_overrun_interrupt_raised>:
80027aa4:	eb cd 40 80 	pushm	r7,lr
80027aa8:	1a 97       	mov	r7,sp
80027aaa:	20 2d       	sub	sp,8
80027aac:	ef 4c ff fc 	st.w	r7[-4],r12
80027ab0:	16 98       	mov	r8,r11
80027ab2:	ef 58 ff f8 	st.h	r7[-8],r8
80027ab6:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027aba:	31 f8       	mov	r8,31
80027abc:	f0 09 19 00 	cp.h	r9,r8
80027ac0:	e0 8b 00 13 	brhi	80027ae6 <pevc_channel_is_overrun_interrupt_raised+0x42>
80027ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ac8:	f0 f9 00 b0 	ld.w	r9,r8[176]
80027acc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027ad0:	30 1a       	mov	r10,1
80027ad2:	f4 08 09 48 	lsl	r8,r10,r8
80027ad6:	10 69       	and	r9,r8
80027ad8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027adc:	f2 08 0a 48 	lsr	r8,r9,r8
80027ae0:	5f 18       	srne	r8
80027ae2:	5c 58       	castu.b	r8
80027ae4:	c1 38       	rjmp	80027b0a <pevc_channel_is_overrun_interrupt_raised+0x66>
80027ae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027aea:	f0 f9 00 b4 	ld.w	r9,r8[180]
80027aee:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027af2:	22 08       	sub	r8,32
80027af4:	30 1a       	mov	r10,1
80027af6:	f4 08 09 48 	lsl	r8,r10,r8
80027afa:	10 69       	and	r9,r8
80027afc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027b00:	22 08       	sub	r8,32
80027b02:	f2 08 0a 48 	lsr	r8,r9,r8
80027b06:	5f 18       	srne	r8
80027b08:	5c 58       	castu.b	r8
80027b0a:	10 9c       	mov	r12,r8
80027b0c:	2f ed       	sub	sp,-8
80027b0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027b12 <pevc_channel_clear_overrun_interrupt>:
80027b12:	eb cd 40 80 	pushm	r7,lr
80027b16:	1a 97       	mov	r7,sp
80027b18:	20 2d       	sub	sp,8
80027b1a:	ef 4c ff fc 	st.w	r7[-4],r12
80027b1e:	16 98       	mov	r8,r11
80027b20:	ef 58 ff f8 	st.h	r7[-8],r8
80027b24:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027b28:	31 f8       	mov	r8,31
80027b2a:	f0 09 19 00 	cp.h	r9,r8
80027b2e:	e0 8b 00 0d 	brhi	80027b48 <pevc_channel_clear_overrun_interrupt+0x36>
80027b32:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027b36:	30 19       	mov	r9,1
80027b38:	f2 08 09 48 	lsl	r8,r9,r8
80027b3c:	10 99       	mov	r9,r8
80027b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b42:	f1 49 00 c0 	st.w	r8[192],r9
80027b46:	c0 c8       	rjmp	80027b5e <pevc_channel_clear_overrun_interrupt+0x4c>
80027b48:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027b4c:	22 08       	sub	r8,32
80027b4e:	30 19       	mov	r9,1
80027b50:	f2 08 09 48 	lsl	r8,r9,r8
80027b54:	10 99       	mov	r9,r8
80027b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b5a:	f1 49 00 c4 	st.w	r8[196],r9
80027b5e:	2f ed       	sub	sp,-8
80027b60:	e3 cd 80 80 	ldm	sp++,r7,pc

80027b64 <cpu_irq_is_enabled_flags>:
80027b64:	eb cd 40 80 	pushm	r7,lr
80027b68:	1a 97       	mov	r7,sp
80027b6a:	20 1d       	sub	sp,4
80027b6c:	ef 4c ff fc 	st.w	r7[-4],r12
80027b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b74:	e6 18 00 01 	andh	r8,0x1,COH
80027b78:	5f 08       	sreq	r8
80027b7a:	5c 58       	castu.b	r8
80027b7c:	10 9c       	mov	r12,r8
80027b7e:	2f fd       	sub	sp,-4
80027b80:	e3 cd 80 80 	ldm	sp++,r7,pc

80027b84 <scif_pclksr_statushigh_wait>:
80027b84:	eb cd 40 80 	pushm	r7,lr
80027b88:	1a 97       	mov	r7,sp
80027b8a:	20 2d       	sub	sp,8
80027b8c:	ef 4c ff f8 	st.w	r7[-8],r12
80027b90:	e0 78 86 a0 	mov	r8,100000
80027b94:	ef 48 ff fc 	st.w	r7[-4],r8
80027b98:	c0 c8       	rjmp	80027bb0 <scif_pclksr_statushigh_wait+0x2c>
80027b9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b9e:	20 18       	sub	r8,1
80027ba0:	ef 48 ff fc 	st.w	r7[-4],r8
80027ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ba8:	58 08       	cp.w	r8,0
80027baa:	c0 31       	brne	80027bb0 <scif_pclksr_statushigh_wait+0x2c>
80027bac:	3f f8       	mov	r8,-1
80027bae:	c0 a8       	rjmp	80027bc2 <scif_pclksr_statushigh_wait+0x3e>
80027bb0:	fe 78 08 00 	mov	r8,-63488
80027bb4:	70 59       	ld.w	r9,r8[0x14]
80027bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bba:	f3 e8 00 08 	and	r8,r9,r8
80027bbe:	ce e0       	breq	80027b9a <scif_pclksr_statushigh_wait+0x16>
80027bc0:	30 08       	mov	r8,0
80027bc2:	10 9c       	mov	r12,r8
80027bc4:	2f ed       	sub	sp,-8
80027bc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80027bca <scif_read_gplp>:
80027bca:	eb cd 40 80 	pushm	r7,lr
80027bce:	1a 97       	mov	r7,sp
80027bd0:	20 1d       	sub	sp,4
80027bd2:	ef 4c ff fc 	st.w	r7[-4],r12
80027bd6:	fe 78 08 00 	mov	r8,-63488
80027bda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027bde:	2e 99       	sub	r9,-23
80027be0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027be4:	10 9c       	mov	r12,r8
80027be6:	2f fd       	sub	sp,-4
80027be8:	e3 cd 80 80 	ldm	sp++,r7,pc

80027bec <scif_write_gplp>:
80027bec:	eb cd 40 80 	pushm	r7,lr
80027bf0:	1a 97       	mov	r7,sp
80027bf2:	20 2d       	sub	sp,8
80027bf4:	ef 4c ff fc 	st.w	r7[-4],r12
80027bf8:	ef 4b ff f8 	st.w	r7[-8],r11
80027bfc:	fe 78 08 00 	mov	r8,-63488
80027c00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c04:	2e 99       	sub	r9,-23
80027c06:	a3 69       	lsl	r9,0x2
80027c08:	ea 19 aa 00 	orh	r9,0xaa00
80027c0c:	91 69       	st.w	r8[0x18],r9
80027c0e:	fe 78 08 00 	mov	r8,-63488
80027c12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c16:	2e 99       	sub	r9,-23
80027c18:	ee fa ff f8 	ld.w	r10,r7[-8]
80027c1c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80027c20:	2f ed       	sub	sp,-8
80027c22:	e3 cd 80 80 	ldm	sp++,r7,pc

80027c26 <scif_start_osc>:
80027c26:	eb cd 40 c0 	pushm	r6-r7,lr
80027c2a:	1a 97       	mov	r7,sp
80027c2c:	20 6d       	sub	sp,24
80027c2e:	4c c6       	lddpc	r6,80027d5c <scif_start_osc+0x136>
80027c30:	1e 26       	rsub	r6,pc
80027c32:	ef 4c ff f0 	st.w	r7[-16],r12
80027c36:	ef 4b ff ec 	st.w	r7[-20],r11
80027c3a:	14 98       	mov	r8,r10
80027c3c:	ef 68 ff e8 	st.b	r7[-24],r8
80027c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c44:	fe 79 08 00 	mov	r9,-63488
80027c48:	ee fa ff f0 	ld.w	r10,r7[-16]
80027c4c:	a3 68       	lsl	r8,0x2
80027c4e:	ee 08 00 08 	add	r8,r7,r8
80027c52:	2f 7a       	sub	r10,-9
80027c54:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80027c58:	f1 49 ff f4 	st.w	r8[-12],r9
80027c5c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027c60:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027c64:	70 18       	ld.w	r8,r8[0x4]
80027c66:	5c 58       	castu.b	r8
80027c68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c6c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80027c70:	f2 08 15 02 	lsl	r8,r9,0x2
80027c74:	ee 08 00 08 	add	r8,r7,r8
80027c78:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80027c7c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80027c80:	f1 49 ff f4 	st.w	r8[-12],r9
80027c84:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027c88:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027c8c:	f1 38 00 09 	ld.ub	r8,r8[9]
80027c90:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80027c94:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80027c98:	f2 08 15 02 	lsl	r8,r9,0x2
80027c9c:	ee 08 00 08 	add	r8,r7,r8
80027ca0:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80027ca4:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
80027ca8:	f1 49 ff f4 	st.w	r8[-12],r9
80027cac:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027cb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027cb4:	f1 38 00 08 	ld.ub	r8,r8[8]
80027cb8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80027cbc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80027cc0:	f2 08 15 02 	lsl	r8,r9,0x2
80027cc4:	ee 08 00 08 	add	r8,r7,r8
80027cc8:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80027ccc:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80027cd0:	f1 49 ff f4 	st.w	r8[-12],r9
80027cd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027cd8:	a3 68       	lsl	r8,0x2
80027cda:	ee 08 00 08 	add	r8,r7,r8
80027cde:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80027ce2:	30 1a       	mov	r10,1
80027ce4:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80027ce8:	f1 49 ff f4 	st.w	r8[-12],r9
80027cec:	e1 b8 00 00 	mfsr	r8,0x0
80027cf0:	10 9c       	mov	r12,r8
80027cf2:	c3 9f       	rcall	80027b64 <cpu_irq_is_enabled_flags>
80027cf4:	18 98       	mov	r8,r12
80027cf6:	ef 68 ff ff 	st.b	r7[-1],r8
80027cfa:	d3 03       	ssrf	0x10
80027cfc:	fe 78 08 00 	mov	r8,-63488
80027d00:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027d04:	2f 79       	sub	r9,-9
80027d06:	a3 69       	lsl	r9,0x2
80027d08:	ea 19 aa 00 	orh	r9,0xaa00
80027d0c:	91 69       	st.w	r8[0x18],r9
80027d0e:	fe 79 08 00 	mov	r9,-63488
80027d12:	ee fa ff f0 	ld.w	r10,r7[-16]
80027d16:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027d1a:	2f 7a       	sub	r10,-9
80027d1c:	a3 68       	lsl	r8,0x2
80027d1e:	ee 08 00 08 	add	r8,r7,r8
80027d22:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80027d26:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027d2a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027d2e:	30 08       	mov	r8,0
80027d30:	f0 09 18 00 	cp.b	r9,r8
80027d34:	c0 20       	breq	80027d38 <scif_start_osc+0x112>
80027d36:	d5 03       	csrf	0x10
80027d38:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80027d3c:	30 08       	mov	r8,0
80027d3e:	f0 09 18 00 	cp.b	r9,r8
80027d42:	c0 80       	breq	80027d52 <scif_start_osc+0x12c>
80027d44:	30 1c       	mov	r12,1
80027d46:	c1 ff       	rcall	80027b84 <scif_pclksr_statushigh_wait>
80027d48:	18 98       	mov	r8,r12
80027d4a:	58 08       	cp.w	r8,0
80027d4c:	c0 30       	breq	80027d52 <scif_start_osc+0x12c>
80027d4e:	3f f8       	mov	r8,-1
80027d50:	c0 28       	rjmp	80027d54 <scif_start_osc+0x12e>
80027d52:	30 08       	mov	r8,0
80027d54:	10 9c       	mov	r12,r8
80027d56:	2f ad       	sub	sp,-24
80027d58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d5c:	80 02       	ld.sh	r2,r0[0x0]
80027d5e:	7a b4       	ld.w	r4,sp[0x2c]

80027d60 <scif_is_osc_ready>:
80027d60:	eb cd 40 80 	pushm	r7,lr
80027d64:	1a 97       	mov	r7,sp
80027d66:	20 1d       	sub	sp,4
80027d68:	ef 4c ff fc 	st.w	r7[-4],r12
80027d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d70:	58 08       	cp.w	r8,0
80027d72:	c0 81       	brne	80027d82 <scif_is_osc_ready+0x22>
80027d74:	fe 78 08 00 	mov	r8,-63488
80027d78:	70 58       	ld.w	r8,r8[0x14]
80027d7a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027d7e:	5c 58       	castu.b	r8
80027d80:	c0 98       	rjmp	80027d92 <scif_is_osc_ready+0x32>
80027d82:	fe 78 08 00 	mov	r8,-63488
80027d86:	70 58       	ld.w	r8,r8[0x14]
80027d88:	e2 18 00 02 	andl	r8,0x2,COH
80027d8c:	a1 98       	lsr	r8,0x1
80027d8e:	5f 18       	srne	r8
80027d90:	5c 58       	castu.b	r8
80027d92:	10 9c       	mov	r12,r8
80027d94:	2f fd       	sub	sp,-4
80027d96:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d9a <scif_stop_osc>:
80027d9a:	eb cd 40 c0 	pushm	r6-r7,lr
80027d9e:	1a 97       	mov	r7,sp
80027da0:	20 3d       	sub	sp,12
80027da2:	49 d6       	lddpc	r6,80027e14 <scif_stop_osc+0x7a>
80027da4:	1e 26       	rsub	r6,pc
80027da6:	ef 4c ff f4 	st.w	r7[-12],r12
80027daa:	fe 78 08 00 	mov	r8,-63488
80027dae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027db2:	2f 79       	sub	r9,-9
80027db4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027db8:	ef 48 ff f8 	st.w	r7[-8],r8
80027dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dc0:	b1 c8       	cbr	r8,0x10
80027dc2:	ef 48 ff f8 	st.w	r7[-8],r8
80027dc6:	e1 b8 00 00 	mfsr	r8,0x0
80027dca:	10 9c       	mov	r12,r8
80027dcc:	cc ce       	rcall	80027b64 <cpu_irq_is_enabled_flags>
80027dce:	18 98       	mov	r8,r12
80027dd0:	ef 68 ff ff 	st.b	r7[-1],r8
80027dd4:	d3 03       	ssrf	0x10
80027dd6:	fe 78 08 00 	mov	r8,-63488
80027dda:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027dde:	2f 79       	sub	r9,-9
80027de0:	a3 69       	lsl	r9,0x2
80027de2:	ea 19 aa 00 	orh	r9,0xaa00
80027de6:	91 69       	st.w	r8[0x18],r9
80027de8:	fe 78 08 00 	mov	r8,-63488
80027dec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027df0:	2f 79       	sub	r9,-9
80027df2:	ee fa ff f8 	ld.w	r10,r7[-8]
80027df6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80027dfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027dfe:	30 08       	mov	r8,0
80027e00:	f0 09 18 00 	cp.b	r9,r8
80027e04:	c0 20       	breq	80027e08 <scif_stop_osc+0x6e>
80027e06:	d5 03       	csrf	0x10
80027e08:	30 08       	mov	r8,0
80027e0a:	10 9c       	mov	r12,r8
80027e0c:	2f dd       	sub	sp,-12
80027e0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027e12:	00 00       	add	r0,r0
80027e14:	80 02       	ld.sh	r2,r0[0x0]
80027e16:	7c 28       	ld.w	r8,lr[0x8]

80027e18 <scif_configure_osc_crystalmode>:
80027e18:	eb cd 40 c0 	pushm	r6-r7,lr
80027e1c:	1a 97       	mov	r7,sp
80027e1e:	20 5d       	sub	sp,20
80027e20:	4d 46       	lddpc	r6,80027f70 <scif_configure_osc_crystalmode+0x158>
80027e22:	1e 26       	rsub	r6,pc
80027e24:	ef 4c ff f0 	st.w	r7[-16],r12
80027e28:	ef 4b ff ec 	st.w	r7[-20],r11
80027e2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e30:	58 08       	cp.w	r8,0
80027e32:	c4 e1       	brne	80027ece <scif_configure_osc_crystalmode+0xb6>
80027e34:	fe 78 08 00 	mov	r8,-63488
80027e38:	70 98       	ld.w	r8,r8[0x24]
80027e3a:	ef 48 ff f4 	st.w	r7[-12],r8
80027e3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027e42:	30 19       	mov	r9,1
80027e44:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80027e48:	ef 48 ff f4 	st.w	r7[-12],r8
80027e4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027e50:	ec 58 bb 9f 	cp.w	r8,899999
80027e54:	e0 88 00 1b 	brls	80027e8a <scif_configure_osc_crystalmode+0x72>
80027e58:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027e5c:	e0 69 c6 bf 	mov	r9,50879
80027e60:	ea 19 00 2d 	orh	r9,0x2d
80027e64:	12 38       	cp.w	r8,r9
80027e66:	e0 88 00 0f 	brls	80027e84 <scif_configure_osc_crystalmode+0x6c>
80027e6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027e6e:	e0 69 11 ff 	mov	r9,4607
80027e72:	ea 19 00 7a 	orh	r9,0x7a
80027e76:	12 38       	cp.w	r8,r9
80027e78:	e0 8b 00 04 	brhi	80027e80 <scif_configure_osc_crystalmode+0x68>
80027e7c:	30 28       	mov	r8,2
80027e7e:	c0 28       	rjmp	80027e82 <scif_configure_osc_crystalmode+0x6a>
80027e80:	30 38       	mov	r8,3
80027e82:	c0 28       	rjmp	80027e86 <scif_configure_osc_crystalmode+0x6e>
80027e84:	30 18       	mov	r8,1
80027e86:	10 99       	mov	r9,r8
80027e88:	c0 28       	rjmp	80027e8c <scif_configure_osc_crystalmode+0x74>
80027e8a:	30 09       	mov	r9,0
80027e8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027e90:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80027e94:	ef 48 ff f4 	st.w	r7[-12],r8
80027e98:	e1 b8 00 00 	mfsr	r8,0x0
80027e9c:	10 9c       	mov	r12,r8
80027e9e:	c6 3e       	rcall	80027b64 <cpu_irq_is_enabled_flags>
80027ea0:	18 98       	mov	r8,r12
80027ea2:	ef 68 ff fe 	st.b	r7[-2],r8
80027ea6:	d3 03       	ssrf	0x10
80027ea8:	fe 78 08 00 	mov	r8,-63488
80027eac:	32 49       	mov	r9,36
80027eae:	ea 19 aa 00 	orh	r9,0xaa00
80027eb2:	91 69       	st.w	r8[0x18],r9
80027eb4:	fe 78 08 00 	mov	r8,-63488
80027eb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027ebc:	91 99       	st.w	r8[0x24],r9
80027ebe:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80027ec2:	30 08       	mov	r8,0
80027ec4:	f0 09 18 00 	cp.b	r9,r8
80027ec8:	c4 f0       	breq	80027f66 <scif_configure_osc_crystalmode+0x14e>
80027eca:	d5 03       	csrf	0x10
80027ecc:	c4 d8       	rjmp	80027f66 <scif_configure_osc_crystalmode+0x14e>
80027ece:	fe 78 08 00 	mov	r8,-63488
80027ed2:	70 a8       	ld.w	r8,r8[0x28]
80027ed4:	ef 48 ff f8 	st.w	r7[-8],r8
80027ed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027edc:	30 19       	mov	r9,1
80027ede:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80027ee2:	ef 48 ff f8 	st.w	r7[-8],r8
80027ee6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027eea:	ec 58 bb 9f 	cp.w	r8,899999
80027eee:	e0 88 00 1b 	brls	80027f24 <scif_configure_osc_crystalmode+0x10c>
80027ef2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027ef6:	e0 69 c6 bf 	mov	r9,50879
80027efa:	ea 19 00 2d 	orh	r9,0x2d
80027efe:	12 38       	cp.w	r8,r9
80027f00:	e0 88 00 0f 	brls	80027f1e <scif_configure_osc_crystalmode+0x106>
80027f04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027f08:	e0 69 11 ff 	mov	r9,4607
80027f0c:	ea 19 00 7a 	orh	r9,0x7a
80027f10:	12 38       	cp.w	r8,r9
80027f12:	e0 8b 00 04 	brhi	80027f1a <scif_configure_osc_crystalmode+0x102>
80027f16:	30 28       	mov	r8,2
80027f18:	c0 28       	rjmp	80027f1c <scif_configure_osc_crystalmode+0x104>
80027f1a:	30 38       	mov	r8,3
80027f1c:	c0 28       	rjmp	80027f20 <scif_configure_osc_crystalmode+0x108>
80027f1e:	30 18       	mov	r8,1
80027f20:	10 99       	mov	r9,r8
80027f22:	c0 28       	rjmp	80027f26 <scif_configure_osc_crystalmode+0x10e>
80027f24:	30 09       	mov	r9,0
80027f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f2a:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80027f2e:	ef 48 ff f8 	st.w	r7[-8],r8
80027f32:	e1 b8 00 00 	mfsr	r8,0x0
80027f36:	10 9c       	mov	r12,r8
80027f38:	c1 6e       	rcall	80027b64 <cpu_irq_is_enabled_flags>
80027f3a:	18 98       	mov	r8,r12
80027f3c:	ef 68 ff ff 	st.b	r7[-1],r8
80027f40:	d3 03       	ssrf	0x10
80027f42:	fe 78 08 00 	mov	r8,-63488
80027f46:	32 89       	mov	r9,40
80027f48:	ea 19 aa 00 	orh	r9,0xaa00
80027f4c:	91 69       	st.w	r8[0x18],r9
80027f4e:	fe 78 08 00 	mov	r8,-63488
80027f52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f56:	91 a9       	st.w	r8[0x28],r9
80027f58:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027f5c:	30 08       	mov	r8,0
80027f5e:	f0 09 18 00 	cp.b	r9,r8
80027f62:	c0 20       	breq	80027f66 <scif_configure_osc_crystalmode+0x14e>
80027f64:	d5 03       	csrf	0x10
80027f66:	30 08       	mov	r8,0
80027f68:	10 9c       	mov	r12,r8
80027f6a:	2f bd       	sub	sp,-20
80027f6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f70:	80 02       	ld.sh	r2,r0[0x0]
80027f72:	7c a6       	ld.w	r6,lr[0x28]

80027f74 <scif_configure_osc_extmode>:
80027f74:	eb cd 40 c0 	pushm	r6-r7,lr
80027f78:	1a 97       	mov	r7,sp
80027f7a:	20 4d       	sub	sp,16
80027f7c:	4a 56       	lddpc	r6,80028010 <scif_configure_osc_extmode+0x9c>
80027f7e:	1e 26       	rsub	r6,pc
80027f80:	ef 4c ff f0 	st.w	r7[-16],r12
80027f84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027f88:	fe 79 08 00 	mov	r9,-63488
80027f8c:	ee fa ff f0 	ld.w	r10,r7[-16]
80027f90:	a3 68       	lsl	r8,0x2
80027f92:	ee 08 00 08 	add	r8,r7,r8
80027f96:	2f 7a       	sub	r10,-9
80027f98:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80027f9c:	f1 49 ff f4 	st.w	r8[-12],r9
80027fa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027fa4:	a3 68       	lsl	r8,0x2
80027fa6:	ee 08 00 08 	add	r8,r7,r8
80027faa:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80027fae:	30 0a       	mov	r10,0
80027fb0:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80027fb4:	f1 49 ff f4 	st.w	r8[-12],r9
80027fb8:	e1 b8 00 00 	mfsr	r8,0x0
80027fbc:	10 9c       	mov	r12,r8
80027fbe:	fe b0 fd d3 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80027fc2:	18 98       	mov	r8,r12
80027fc4:	ef 68 ff ff 	st.b	r7[-1],r8
80027fc8:	d3 03       	ssrf	0x10
80027fca:	fe 78 08 00 	mov	r8,-63488
80027fce:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027fd2:	2f 79       	sub	r9,-9
80027fd4:	a3 69       	lsl	r9,0x2
80027fd6:	ea 19 aa 00 	orh	r9,0xaa00
80027fda:	91 69       	st.w	r8[0x18],r9
80027fdc:	fe 79 08 00 	mov	r9,-63488
80027fe0:	ee fa ff f0 	ld.w	r10,r7[-16]
80027fe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027fe8:	2f 7a       	sub	r10,-9
80027fea:	a3 68       	lsl	r8,0x2
80027fec:	ee 08 00 08 	add	r8,r7,r8
80027ff0:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80027ff4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027ff8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027ffc:	30 08       	mov	r8,0
80027ffe:	f0 09 18 00 	cp.b	r9,r8
80028002:	c0 20       	breq	80028006 <scif_configure_osc_extmode+0x92>
80028004:	d5 03       	csrf	0x10
80028006:	30 08       	mov	r8,0
80028008:	10 9c       	mov	r12,r8
8002800a:	2f cd       	sub	sp,-16
8002800c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028010:	80 02       	ld.sh	r2,r0[0x0]
80028012:	7e 02       	ld.w	r2,pc[0x0]

80028014 <scif_enable_osc>:
80028014:	eb cd 40 c0 	pushm	r6-r7,lr
80028018:	1a 97       	mov	r7,sp
8002801a:	20 6d       	sub	sp,24
8002801c:	4b 86       	lddpc	r6,800280fc <scif_enable_osc+0xe8>
8002801e:	1e 26       	rsub	r6,pc
80028020:	ef 4c ff f0 	st.w	r7[-16],r12
80028024:	ef 4b ff ec 	st.w	r7[-20],r11
80028028:	14 98       	mov	r8,r10
8002802a:	ef 68 ff e8 	st.b	r7[-24],r8
8002802e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028032:	fe 79 08 00 	mov	r9,-63488
80028036:	ee fa ff f0 	ld.w	r10,r7[-16]
8002803a:	a3 68       	lsl	r8,0x2
8002803c:	ee 08 00 08 	add	r8,r7,r8
80028040:	2f 7a       	sub	r10,-9
80028042:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028046:	f1 49 ff f4 	st.w	r8[-12],r9
8002804a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002804e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028052:	5c 58       	castu.b	r8
80028054:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028058:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002805c:	f2 08 15 02 	lsl	r8,r9,0x2
80028060:	ee 08 00 08 	add	r8,r7,r8
80028064:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028068:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
8002806c:	f1 49 ff f4 	st.w	r8[-12],r9
80028070:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028074:	a3 68       	lsl	r8,0x2
80028076:	ee 08 00 08 	add	r8,r7,r8
8002807a:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002807e:	30 1a       	mov	r10,1
80028080:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028084:	f1 49 ff f4 	st.w	r8[-12],r9
80028088:	e1 b8 00 00 	mfsr	r8,0x0
8002808c:	10 9c       	mov	r12,r8
8002808e:	fe b0 fd 6b 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80028092:	18 98       	mov	r8,r12
80028094:	ef 68 ff ff 	st.b	r7[-1],r8
80028098:	d3 03       	ssrf	0x10
8002809a:	fe 78 08 00 	mov	r8,-63488
8002809e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800280a2:	2f 79       	sub	r9,-9
800280a4:	a3 69       	lsl	r9,0x2
800280a6:	ea 19 aa 00 	orh	r9,0xaa00
800280aa:	91 69       	st.w	r8[0x18],r9
800280ac:	fe 79 08 00 	mov	r9,-63488
800280b0:	ee fa ff f0 	ld.w	r10,r7[-16]
800280b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800280b8:	2f 7a       	sub	r10,-9
800280ba:	a3 68       	lsl	r8,0x2
800280bc:	ee 08 00 08 	add	r8,r7,r8
800280c0:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800280c4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800280c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800280cc:	30 08       	mov	r8,0
800280ce:	f0 09 18 00 	cp.b	r9,r8
800280d2:	c0 20       	breq	800280d6 <scif_enable_osc+0xc2>
800280d4:	d5 03       	csrf	0x10
800280d6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800280da:	30 08       	mov	r8,0
800280dc:	f0 09 18 00 	cp.b	r9,r8
800280e0:	c0 90       	breq	800280f2 <scif_enable_osc+0xde>
800280e2:	30 1c       	mov	r12,1
800280e4:	fe b0 fd 50 	rcall	80027b84 <scif_pclksr_statushigh_wait>
800280e8:	18 98       	mov	r8,r12
800280ea:	58 08       	cp.w	r8,0
800280ec:	c0 30       	breq	800280f2 <scif_enable_osc+0xde>
800280ee:	3f f8       	mov	r8,-1
800280f0:	c0 28       	rjmp	800280f4 <scif_enable_osc+0xe0>
800280f2:	30 08       	mov	r8,0
800280f4:	10 9c       	mov	r12,r8
800280f6:	2f ad       	sub	sp,-24
800280f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800280fc:	80 02       	ld.sh	r2,r0[0x0]
800280fe:	7e a2       	ld.w	r2,pc[0x28]

80028100 <scif_enable_extosc>:
80028100:	eb cd 40 c0 	pushm	r6-r7,lr
80028104:	1a 97       	mov	r7,sp
80028106:	20 4d       	sub	sp,16
80028108:	4a 56       	lddpc	r6,8002819c <scif_enable_extosc+0x9c>
8002810a:	1e 26       	rsub	r6,pc
8002810c:	ef 4c ff f0 	st.w	r7[-16],r12
80028110:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028114:	fe 79 08 00 	mov	r9,-63488
80028118:	ee fa ff f0 	ld.w	r10,r7[-16]
8002811c:	a3 68       	lsl	r8,0x2
8002811e:	ee 08 00 08 	add	r8,r7,r8
80028122:	2f 7a       	sub	r10,-9
80028124:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028128:	f1 49 ff f4 	st.w	r8[-12],r9
8002812c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028130:	a3 68       	lsl	r8,0x2
80028132:	ee 08 00 08 	add	r8,r7,r8
80028136:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002813a:	30 1a       	mov	r10,1
8002813c:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028140:	f1 49 ff f4 	st.w	r8[-12],r9
80028144:	e1 b8 00 00 	mfsr	r8,0x0
80028148:	10 9c       	mov	r12,r8
8002814a:	fe b0 fd 0d 	rcall	80027b64 <cpu_irq_is_enabled_flags>
8002814e:	18 98       	mov	r8,r12
80028150:	ef 68 ff ff 	st.b	r7[-1],r8
80028154:	d3 03       	ssrf	0x10
80028156:	fe 78 08 00 	mov	r8,-63488
8002815a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002815e:	2f 79       	sub	r9,-9
80028160:	a3 69       	lsl	r9,0x2
80028162:	ea 19 aa 00 	orh	r9,0xaa00
80028166:	91 69       	st.w	r8[0x18],r9
80028168:	fe 79 08 00 	mov	r9,-63488
8002816c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028170:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028174:	2f 7a       	sub	r10,-9
80028176:	a3 68       	lsl	r8,0x2
80028178:	ee 08 00 08 	add	r8,r7,r8
8002817c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028180:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028184:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028188:	30 08       	mov	r8,0
8002818a:	f0 09 18 00 	cp.b	r9,r8
8002818e:	c0 20       	breq	80028192 <scif_enable_extosc+0x92>
80028190:	d5 03       	csrf	0x10
80028192:	30 08       	mov	r8,0
80028194:	10 9c       	mov	r12,r8
80028196:	2f cd       	sub	sp,-16
80028198:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002819c:	80 02       	ld.sh	r2,r0[0x0]
8002819e:	7f 8e       	ld.w	lr,pc[0x60]

800281a0 <scif_pll_setup>:
800281a0:	eb cd 40 c0 	pushm	r6-r7,lr
800281a4:	1a 97       	mov	r7,sp
800281a6:	20 4d       	sub	sp,16
800281a8:	4d 46       	lddpc	r6,800282f8 <scif_pll_setup+0x158>
800281aa:	1e 26       	rsub	r6,pc
800281ac:	ee c8 ff f4 	sub	r8,r7,-12
800281b0:	ef 4c ff f0 	st.w	r7[-16],r12
800281b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800281b8:	fe 7a 08 00 	mov	r10,-63488
800281bc:	ee fb ff f0 	ld.w	r11,r7[-16]
800281c0:	a3 69       	lsl	r9,0x2
800281c2:	ee 09 00 09 	add	r9,r7,r9
800281c6:	2f 9b       	sub	r11,-7
800281c8:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800281cc:	f3 4a ff f4 	st.w	r9[-12],r10
800281d0:	ee fa ff f0 	ld.w	r10,r7[-16]
800281d4:	f1 39 00 10 	ld.ub	r9,r8[16]
800281d8:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
800281dc:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800281e0:	f4 09 15 02 	lsl	r9,r10,0x2
800281e4:	ee 09 00 09 	add	r9,r7,r9
800281e8:	f2 fa ff f4 	ld.w	r10,r9[-12]
800281ec:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
800281f0:	f3 4a ff f4 	st.w	r9[-12],r10
800281f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800281f8:	11 89       	ld.ub	r9,r8[0x0]
800281fa:	12 9a       	mov	r10,r9
800281fc:	11 a9       	ld.ub	r9,r8[0x2]
800281fe:	a1 79       	lsl	r9,0x1
80028200:	5c 59       	castu.b	r9
80028202:	f5 e9 10 09 	or	r9,r10,r9
80028206:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
8002820a:	11 99       	ld.ub	r9,r8[0x1]
8002820c:	a3 69       	lsl	r9,0x2
8002820e:	5c 59       	castu.b	r9
80028210:	f5 e9 10 09 	or	r9,r10,r9
80028214:	5c 59       	castu.b	r9
80028216:	5c 59       	castu.b	r9
80028218:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
8002821c:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028220:	f8 09 15 02 	lsl	r9,r12,0x2
80028224:	ee 09 00 09 	add	r9,r7,r9
80028228:	f2 fa ff f4 	ld.w	r10,r9[-12]
8002822c:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80028230:	f3 4a ff f4 	st.w	r9[-12],r10
80028234:	ee fa ff f0 	ld.w	r10,r7[-16]
80028238:	70 29       	ld.w	r9,r8[0x8]
8002823a:	5c 59       	castu.b	r9
8002823c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028240:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028244:	f4 09 15 02 	lsl	r9,r10,0x2
80028248:	ee 09 00 09 	add	r9,r7,r9
8002824c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028250:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80028254:	f3 4a ff f4 	st.w	r9[-12],r10
80028258:	ee fa ff f0 	ld.w	r10,r7[-16]
8002825c:	70 19       	ld.w	r9,r8[0x4]
8002825e:	5c 59       	castu.b	r9
80028260:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028264:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028268:	f4 09 15 02 	lsl	r9,r10,0x2
8002826c:	ee 09 00 09 	add	r9,r7,r9
80028270:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028274:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028278:	f3 4a ff f4 	st.w	r9[-12],r10
8002827c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028280:	70 38       	ld.w	r8,r8[0xc]
80028282:	5c 58       	castu.b	r8
80028284:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028288:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002828c:	f2 08 15 02 	lsl	r8,r9,0x2
80028290:	ee 08 00 08 	add	r8,r7,r8
80028294:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028298:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
8002829c:	f1 49 ff f4 	st.w	r8[-12],r9
800282a0:	e1 b8 00 00 	mfsr	r8,0x0
800282a4:	10 9c       	mov	r12,r8
800282a6:	fe b0 fc 5f 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800282aa:	18 98       	mov	r8,r12
800282ac:	ef 68 ff ff 	st.b	r7[-1],r8
800282b0:	d3 03       	ssrf	0x10
800282b2:	fe 78 08 00 	mov	r8,-63488
800282b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800282ba:	2f 99       	sub	r9,-7
800282bc:	a3 69       	lsl	r9,0x2
800282be:	ea 19 aa 00 	orh	r9,0xaa00
800282c2:	91 69       	st.w	r8[0x18],r9
800282c4:	fe 79 08 00 	mov	r9,-63488
800282c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800282cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800282d0:	2f 9a       	sub	r10,-7
800282d2:	a3 68       	lsl	r8,0x2
800282d4:	ee 08 00 08 	add	r8,r7,r8
800282d8:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800282dc:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800282e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800282e4:	30 08       	mov	r8,0
800282e6:	f0 09 18 00 	cp.b	r9,r8
800282ea:	c0 20       	breq	800282ee <scif_pll_setup+0x14e>
800282ec:	d5 03       	csrf	0x10
800282ee:	30 08       	mov	r8,0
800282f0:	10 9c       	mov	r12,r8
800282f2:	2f cd       	sub	sp,-16
800282f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800282f8:	80 02       	ld.sh	r2,r0[0x0]
800282fa:	80 2e       	ld.sh	lr,r0[0x4]

800282fc <scif_pll_enable>:
800282fc:	eb cd 40 c0 	pushm	r6-r7,lr
80028300:	1a 97       	mov	r7,sp
80028302:	20 4d       	sub	sp,16
80028304:	4a 56       	lddpc	r6,80028398 <scif_pll_enable+0x9c>
80028306:	1e 26       	rsub	r6,pc
80028308:	ef 4c ff f0 	st.w	r7[-16],r12
8002830c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028310:	fe 79 08 00 	mov	r9,-63488
80028314:	ee fa ff f0 	ld.w	r10,r7[-16]
80028318:	a3 68       	lsl	r8,0x2
8002831a:	ee 08 00 08 	add	r8,r7,r8
8002831e:	2f 9a       	sub	r10,-7
80028320:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028324:	f1 49 ff f4 	st.w	r8[-12],r9
80028328:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002832c:	a3 68       	lsl	r8,0x2
8002832e:	ee 08 00 08 	add	r8,r7,r8
80028332:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028336:	30 1a       	mov	r10,1
80028338:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
8002833c:	f1 49 ff f4 	st.w	r8[-12],r9
80028340:	e1 b8 00 00 	mfsr	r8,0x0
80028344:	10 9c       	mov	r12,r8
80028346:	fe b0 fc 0f 	rcall	80027b64 <cpu_irq_is_enabled_flags>
8002834a:	18 98       	mov	r8,r12
8002834c:	ef 68 ff ff 	st.b	r7[-1],r8
80028350:	d3 03       	ssrf	0x10
80028352:	fe 78 08 00 	mov	r8,-63488
80028356:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002835a:	2f 99       	sub	r9,-7
8002835c:	a3 69       	lsl	r9,0x2
8002835e:	ea 19 aa 00 	orh	r9,0xaa00
80028362:	91 69       	st.w	r8[0x18],r9
80028364:	fe 79 08 00 	mov	r9,-63488
80028368:	ee fa ff f0 	ld.w	r10,r7[-16]
8002836c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028370:	2f 9a       	sub	r10,-7
80028372:	a3 68       	lsl	r8,0x2
80028374:	ee 08 00 08 	add	r8,r7,r8
80028378:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002837c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028380:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028384:	30 08       	mov	r8,0
80028386:	f0 09 18 00 	cp.b	r9,r8
8002838a:	c0 20       	breq	8002838e <scif_pll_enable+0x92>
8002838c:	d5 03       	csrf	0x10
8002838e:	30 08       	mov	r8,0
80028390:	10 9c       	mov	r12,r8
80028392:	2f cd       	sub	sp,-16
80028394:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028398:	80 02       	ld.sh	r2,r0[0x0]
8002839a:	81 8a       	st.w	r0[0x20],r10

8002839c <scif_pll_disable>:
8002839c:	eb cd 40 c0 	pushm	r6-r7,lr
800283a0:	1a 97       	mov	r7,sp
800283a2:	20 4d       	sub	sp,16
800283a4:	4a 56       	lddpc	r6,80028438 <scif_pll_disable+0x9c>
800283a6:	1e 26       	rsub	r6,pc
800283a8:	ef 4c ff f0 	st.w	r7[-16],r12
800283ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283b0:	fe 79 08 00 	mov	r9,-63488
800283b4:	ee fa ff f0 	ld.w	r10,r7[-16]
800283b8:	a3 68       	lsl	r8,0x2
800283ba:	ee 08 00 08 	add	r8,r7,r8
800283be:	2f 9a       	sub	r10,-7
800283c0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800283c4:	f1 49 ff f4 	st.w	r8[-12],r9
800283c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283cc:	a3 68       	lsl	r8,0x2
800283ce:	ee 08 00 08 	add	r8,r7,r8
800283d2:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800283d6:	30 0a       	mov	r10,0
800283d8:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
800283dc:	f1 49 ff f4 	st.w	r8[-12],r9
800283e0:	e1 b8 00 00 	mfsr	r8,0x0
800283e4:	10 9c       	mov	r12,r8
800283e6:	fe b0 fb bf 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800283ea:	18 98       	mov	r8,r12
800283ec:	ef 68 ff ff 	st.b	r7[-1],r8
800283f0:	d3 03       	ssrf	0x10
800283f2:	fe 78 08 00 	mov	r8,-63488
800283f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800283fa:	2f 99       	sub	r9,-7
800283fc:	a3 69       	lsl	r9,0x2
800283fe:	ea 19 aa 00 	orh	r9,0xaa00
80028402:	91 69       	st.w	r8[0x18],r9
80028404:	fe 79 08 00 	mov	r9,-63488
80028408:	ee fa ff f0 	ld.w	r10,r7[-16]
8002840c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028410:	2f 9a       	sub	r10,-7
80028412:	a3 68       	lsl	r8,0x2
80028414:	ee 08 00 08 	add	r8,r7,r8
80028418:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002841c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028420:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028424:	30 08       	mov	r8,0
80028426:	f0 09 18 00 	cp.b	r9,r8
8002842a:	c0 20       	breq	8002842e <scif_pll_disable+0x92>
8002842c:	d5 03       	csrf	0x10
8002842e:	30 08       	mov	r8,0
80028430:	10 9c       	mov	r12,r8
80028432:	2f cd       	sub	sp,-16
80028434:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028438:	80 02       	ld.sh	r2,r0[0x0]
8002843a:	82 2a       	ld.sh	r10,r1[0x4]

8002843c <scif_wait_for_pll_locked>:
8002843c:	eb cd 40 80 	pushm	r7,lr
80028440:	1a 97       	mov	r7,sp
80028442:	20 1d       	sub	sp,4
80028444:	ef 4c ff fc 	st.w	r7[-4],r12
80028448:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002844c:	58 08       	cp.w	r8,0
8002844e:	c0 81       	brne	8002845e <scif_wait_for_pll_locked+0x22>
80028450:	fe 78 08 00 	mov	r8,-63488
80028454:	70 58       	ld.w	r8,r8[0x14]
80028456:	e2 18 00 10 	andl	r8,0x10,COH
8002845a:	cf b0       	breq	80028450 <scif_wait_for_pll_locked+0x14>
8002845c:	c0 78       	rjmp	8002846a <scif_wait_for_pll_locked+0x2e>
8002845e:	fe 78 08 00 	mov	r8,-63488
80028462:	70 58       	ld.w	r8,r8[0x14]
80028464:	e2 18 00 20 	andl	r8,0x20,COH
80028468:	cf b0       	breq	8002845e <scif_wait_for_pll_locked+0x22>
8002846a:	30 08       	mov	r8,0
8002846c:	10 9c       	mov	r12,r8
8002846e:	2f fd       	sub	sp,-4
80028470:	e3 cd 80 80 	ldm	sp++,r7,pc

80028474 <scif_start_osc32>:
80028474:	eb cd 40 c0 	pushm	r6-r7,lr
80028478:	1a 97       	mov	r7,sp
8002847a:	20 4d       	sub	sp,16
8002847c:	4a f6       	lddpc	r6,80028538 <scif_start_osc32+0xc4>
8002847e:	1e 26       	rsub	r6,pc
80028480:	ef 4c ff f4 	st.w	r7[-12],r12
80028484:	16 98       	mov	r8,r11
80028486:	ef 68 ff f0 	st.b	r7[-16],r8
8002848a:	fe 78 08 00 	mov	r8,-63488
8002848e:	71 38       	ld.w	r8,r8[0x4c]
80028490:	ef 48 ff f8 	st.w	r7[-8],r8
80028494:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028498:	70 18       	ld.w	r8,r8[0x4]
8002849a:	5c 58       	castu.b	r8
8002849c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800284a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800284a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284a8:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
800284ac:	ef 48 ff f8 	st.w	r7[-8],r8
800284b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800284b4:	f1 38 00 08 	ld.ub	r8,r8[8]
800284b8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800284bc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800284c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284c4:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
800284c8:	ef 48 ff f8 	st.w	r7[-8],r8
800284cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284d0:	30 19       	mov	r9,1
800284d2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800284d6:	ef 48 ff f8 	st.w	r7[-8],r8
800284da:	e1 b8 00 00 	mfsr	r8,0x0
800284de:	10 9c       	mov	r12,r8
800284e0:	fe b0 fb 42 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800284e4:	18 98       	mov	r8,r12
800284e6:	ef 68 ff ff 	st.b	r7[-1],r8
800284ea:	d3 03       	ssrf	0x10
800284ec:	fe 78 08 00 	mov	r8,-63488
800284f0:	34 c9       	mov	r9,76
800284f2:	ea 19 aa 00 	orh	r9,0xaa00
800284f6:	91 69       	st.w	r8[0x18],r9
800284f8:	fe 78 08 00 	mov	r8,-63488
800284fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028500:	f1 49 00 4c 	st.w	r8[76],r9
80028504:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028508:	30 08       	mov	r8,0
8002850a:	f0 09 18 00 	cp.b	r9,r8
8002850e:	c0 20       	breq	80028512 <scif_start_osc32+0x9e>
80028510:	d5 03       	csrf	0x10
80028512:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028516:	30 08       	mov	r8,0
80028518:	f0 09 18 00 	cp.b	r9,r8
8002851c:	c0 90       	breq	8002852e <scif_start_osc32+0xba>
8002851e:	30 4c       	mov	r12,4
80028520:	fe b0 fb 32 	rcall	80027b84 <scif_pclksr_statushigh_wait>
80028524:	18 98       	mov	r8,r12
80028526:	58 08       	cp.w	r8,0
80028528:	c0 30       	breq	8002852e <scif_start_osc32+0xba>
8002852a:	3f f8       	mov	r8,-1
8002852c:	c0 28       	rjmp	80028530 <scif_start_osc32+0xbc>
8002852e:	30 08       	mov	r8,0
80028530:	10 9c       	mov	r12,r8
80028532:	2f cd       	sub	sp,-16
80028534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028538:	80 02       	ld.sh	r2,r0[0x0]
8002853a:	83 02       	st.w	r1[0x0],r2

8002853c <scif_stop_osc32>:
8002853c:	eb cd 40 c0 	pushm	r6-r7,lr
80028540:	1a 97       	mov	r7,sp
80028542:	20 2d       	sub	sp,8
80028544:	49 76       	lddpc	r6,800285a0 <scif_stop_osc32+0x64>
80028546:	1e 26       	rsub	r6,pc
80028548:	fe 78 08 00 	mov	r8,-63488
8002854c:	71 38       	ld.w	r8,r8[0x4c]
8002854e:	ef 48 ff f8 	st.w	r7[-8],r8
80028552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028556:	a1 c8       	cbr	r8,0x0
80028558:	ef 48 ff f8 	st.w	r7[-8],r8
8002855c:	e1 b8 00 00 	mfsr	r8,0x0
80028560:	10 9c       	mov	r12,r8
80028562:	fe b0 fb 01 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80028566:	18 98       	mov	r8,r12
80028568:	ef 68 ff ff 	st.b	r7[-1],r8
8002856c:	d3 03       	ssrf	0x10
8002856e:	fe 78 08 00 	mov	r8,-63488
80028572:	34 c9       	mov	r9,76
80028574:	ea 19 aa 00 	orh	r9,0xaa00
80028578:	91 69       	st.w	r8[0x18],r9
8002857a:	fe 78 08 00 	mov	r8,-63488
8002857e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028582:	f1 49 00 4c 	st.w	r8[76],r9
80028586:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002858a:	30 08       	mov	r8,0
8002858c:	f0 09 18 00 	cp.b	r9,r8
80028590:	c0 20       	breq	80028594 <scif_stop_osc32+0x58>
80028592:	d5 03       	csrf	0x10
80028594:	30 08       	mov	r8,0
80028596:	10 9c       	mov	r12,r8
80028598:	2f ed       	sub	sp,-8
8002859a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002859e:	00 00       	add	r0,r0
800285a0:	80 02       	ld.sh	r2,r0[0x0]
800285a2:	83 ca       	st.w	r1[0x30],r10

800285a4 <scif_start_rc8M>:
800285a4:	eb cd 40 c0 	pushm	r6-r7,lr
800285a8:	1a 97       	mov	r7,sp
800285aa:	20 2d       	sub	sp,8
800285ac:	49 66       	lddpc	r6,80028604 <scif_start_rc8M+0x60>
800285ae:	1e 26       	rsub	r6,pc
800285b0:	e0 68 02 00 	mov	r8,512
800285b4:	ea 18 80 80 	orh	r8,0x8080
800285b8:	ef 48 ff f8 	st.w	r7[-8],r8
800285bc:	e1 b8 00 00 	mfsr	r8,0x0
800285c0:	10 9c       	mov	r12,r8
800285c2:	fe b0 fa d1 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800285c6:	18 98       	mov	r8,r12
800285c8:	ef 68 ff ff 	st.b	r7[-1],r8
800285cc:	d3 03       	ssrf	0x10
800285ce:	fe 78 08 00 	mov	r8,-63488
800285d2:	34 89       	mov	r9,72
800285d4:	ea 19 aa 00 	orh	r9,0xaa00
800285d8:	91 69       	st.w	r8[0x18],r9
800285da:	fe 78 08 00 	mov	r8,-63488
800285de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800285e2:	72 09       	ld.w	r9,r9[0x0]
800285e4:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
800285e8:	b9 a9       	sbr	r9,0x18
800285ea:	f1 49 00 48 	st.w	r8[72],r9
800285ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800285f2:	30 08       	mov	r8,0
800285f4:	f0 09 18 00 	cp.b	r9,r8
800285f8:	c0 20       	breq	800285fc <scif_start_rc8M+0x58>
800285fa:	d5 03       	csrf	0x10
800285fc:	2f ed       	sub	sp,-8
800285fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028602:	00 00       	add	r0,r0
80028604:	80 02       	ld.sh	r2,r0[0x0]
80028606:	84 32       	ld.sh	r2,r2[0x6]

80028608 <scif_stop_rc8M>:
80028608:	eb cd 40 c0 	pushm	r6-r7,lr
8002860c:	1a 97       	mov	r7,sp
8002860e:	20 2d       	sub	sp,8
80028610:	49 66       	lddpc	r6,80028668 <scif_stop_rc8M+0x60>
80028612:	1e 26       	rsub	r6,pc
80028614:	fe 78 08 00 	mov	r8,-63488
80028618:	71 28       	ld.w	r8,r8[0x48]
8002861a:	ef 48 ff f8 	st.w	r7[-8],r8
8002861e:	e1 b8 00 00 	mfsr	r8,0x0
80028622:	10 9c       	mov	r12,r8
80028624:	fe b0 fa a0 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80028628:	18 98       	mov	r8,r12
8002862a:	ef 68 ff ff 	st.b	r7[-1],r8
8002862e:	d3 03       	ssrf	0x10
80028630:	fe 78 08 00 	mov	r8,-63488
80028634:	34 89       	mov	r9,72
80028636:	ea 19 aa 00 	orh	r9,0xaa00
8002863a:	91 69       	st.w	r8[0x18],r9
8002863c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028640:	b9 c8       	cbr	r8,0x18
80028642:	ef 48 ff f8 	st.w	r7[-8],r8
80028646:	fe 78 08 00 	mov	r8,-63488
8002864a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002864e:	f1 49 00 48 	st.w	r8[72],r9
80028652:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028656:	30 08       	mov	r8,0
80028658:	f0 09 18 00 	cp.b	r9,r8
8002865c:	c0 20       	breq	80028660 <scif_stop_rc8M+0x58>
8002865e:	d5 03       	csrf	0x10
80028660:	2f ed       	sub	sp,-8
80028662:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028666:	00 00       	add	r0,r0
80028668:	80 02       	ld.sh	r2,r0[0x0]
8002866a:	84 96       	ld.uh	r6,r2[0x2]

8002866c <scif_start_rc120M>:
8002866c:	eb cd 40 c0 	pushm	r6-r7,lr
80028670:	1a 97       	mov	r7,sp
80028672:	20 1d       	sub	sp,4
80028674:	49 06       	lddpc	r6,800286b4 <scif_start_rc120M+0x48>
80028676:	1e 26       	rsub	r6,pc
80028678:	e1 b8 00 00 	mfsr	r8,0x0
8002867c:	10 9c       	mov	r12,r8
8002867e:	fe b0 fa 73 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80028682:	18 98       	mov	r8,r12
80028684:	ef 68 ff ff 	st.b	r7[-1],r8
80028688:	d3 03       	ssrf	0x10
8002868a:	fe 78 08 00 	mov	r8,-63488
8002868e:	35 89       	mov	r9,88
80028690:	ea 19 aa 00 	orh	r9,0xaa00
80028694:	91 69       	st.w	r8[0x18],r9
80028696:	fe 78 08 00 	mov	r8,-63488
8002869a:	30 19       	mov	r9,1
8002869c:	f1 49 00 58 	st.w	r8[88],r9
800286a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800286a4:	30 08       	mov	r8,0
800286a6:	f0 09 18 00 	cp.b	r9,r8
800286aa:	c0 20       	breq	800286ae <scif_start_rc120M+0x42>
800286ac:	d5 03       	csrf	0x10
800286ae:	2f fd       	sub	sp,-4
800286b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800286b4:	80 02       	ld.sh	r2,r0[0x0]
800286b6:	84 fa       	ld.uh	r10,r2[0xe]

800286b8 <scif_stop_rc120M>:
800286b8:	eb cd 40 c0 	pushm	r6-r7,lr
800286bc:	1a 97       	mov	r7,sp
800286be:	20 2d       	sub	sp,8
800286c0:	49 66       	lddpc	r6,80028718 <scif_stop_rc120M+0x60>
800286c2:	1e 26       	rsub	r6,pc
800286c4:	fe 78 08 00 	mov	r8,-63488
800286c8:	71 68       	ld.w	r8,r8[0x58]
800286ca:	ef 48 ff f8 	st.w	r7[-8],r8
800286ce:	e1 b8 00 00 	mfsr	r8,0x0
800286d2:	10 9c       	mov	r12,r8
800286d4:	fe b0 fa 48 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800286d8:	18 98       	mov	r8,r12
800286da:	ef 68 ff ff 	st.b	r7[-1],r8
800286de:	d3 03       	ssrf	0x10
800286e0:	fe 78 08 00 	mov	r8,-63488
800286e4:	35 89       	mov	r9,88
800286e6:	ea 19 aa 00 	orh	r9,0xaa00
800286ea:	91 69       	st.w	r8[0x18],r9
800286ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800286f0:	a1 c8       	cbr	r8,0x0
800286f2:	ef 48 ff f8 	st.w	r7[-8],r8
800286f6:	fe 78 08 00 	mov	r8,-63488
800286fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800286fe:	f1 49 00 58 	st.w	r8[88],r9
80028702:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028706:	30 08       	mov	r8,0
80028708:	f0 09 18 00 	cp.b	r9,r8
8002870c:	c0 20       	breq	80028710 <scif_stop_rc120M+0x58>
8002870e:	d5 03       	csrf	0x10
80028710:	2f ed       	sub	sp,-8
80028712:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028716:	00 00       	add	r0,r0
80028718:	80 02       	ld.sh	r2,r0[0x0]
8002871a:	85 46       	st.w	r2[0x10],r6

8002871c <scif_start_gclk>:
8002871c:	eb cd 40 80 	pushm	r7,lr
80028720:	1a 97       	mov	r7,sp
80028722:	20 2d       	sub	sp,8
80028724:	ef 4c ff fc 	st.w	r7[-4],r12
80028728:	ef 4b ff f8 	st.w	r7[-8],r11
8002872c:	fe 78 08 00 	mov	r8,-63488
80028730:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028734:	2e 79       	sub	r9,-25
80028736:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002873a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002873e:	5c 58       	castu.b	r8
80028740:	c0 30       	breq	80028746 <scif_start_gclk+0x2a>
80028742:	3f f8       	mov	r8,-1
80028744:	c2 08       	rjmp	80028784 <scif_start_gclk+0x68>
80028746:	fe 78 08 00 	mov	r8,-63488
8002874a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002874e:	ee fa ff f8 	ld.w	r10,r7[-8]
80028752:	74 1a       	ld.w	r10,r10[0x4]
80028754:	b1 6a       	lsl	r10,0x10
80028756:	14 9b       	mov	r11,r10
80028758:	e6 1b 00 ff 	andh	r11,0xff,COH
8002875c:	ee fa ff f8 	ld.w	r10,r7[-8]
80028760:	74 2a       	ld.w	r10,r10[0x8]
80028762:	a1 7a       	lsl	r10,0x1
80028764:	e2 1a 00 02 	andl	r10,0x2,COH
80028768:	14 4b       	or	r11,r10
8002876a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002876e:	74 0a       	ld.w	r10,r10[0x0]
80028770:	a9 6a       	lsl	r10,0x8
80028772:	e2 1a 0f 00 	andl	r10,0xf00,COH
80028776:	f7 ea 10 0a 	or	r10,r11,r10
8002877a:	a1 aa       	sbr	r10,0x0
8002877c:	2e 79       	sub	r9,-25
8002877e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028782:	30 08       	mov	r8,0
80028784:	10 9c       	mov	r12,r8
80028786:	2f ed       	sub	sp,-8
80028788:	e3 cd 80 80 	ldm	sp++,r7,pc

8002878c <scif_stop_gclk>:
8002878c:	eb cd 40 80 	pushm	r7,lr
80028790:	1a 97       	mov	r7,sp
80028792:	20 2d       	sub	sp,8
80028794:	ef 4c ff f8 	st.w	r7[-8],r12
80028798:	e0 78 86 a0 	mov	r8,100000
8002879c:	ef 48 ff fc 	st.w	r7[-4],r8
800287a0:	fe 78 08 00 	mov	r8,-63488
800287a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800287a8:	fe 7a 08 00 	mov	r10,-63488
800287ac:	ee fb ff f8 	ld.w	r11,r7[-8]
800287b0:	2e 7b       	sub	r11,-25
800287b2:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800287b6:	a1 ca       	cbr	r10,0x0
800287b8:	2e 79       	sub	r9,-25
800287ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800287be:	c0 c8       	rjmp	800287d6 <scif_stop_gclk+0x4a>
800287c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287c4:	20 18       	sub	r8,1
800287c6:	ef 48 ff fc 	st.w	r7[-4],r8
800287ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287ce:	58 08       	cp.w	r8,0
800287d0:	c0 31       	brne	800287d6 <scif_stop_gclk+0x4a>
800287d2:	3f f8       	mov	r8,-1
800287d4:	c0 d8       	rjmp	800287ee <scif_stop_gclk+0x62>
800287d6:	fe 78 08 00 	mov	r8,-63488
800287da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800287de:	2e 79       	sub	r9,-25
800287e0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800287e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800287e8:	5c 58       	castu.b	r8
800287ea:	ce b1       	brne	800287c0 <scif_stop_gclk+0x34>
800287ec:	30 08       	mov	r8,0
800287ee:	10 9c       	mov	r12,r8
800287f0:	2f ed       	sub	sp,-8
800287f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800287f6 <scif_gc_setup>:
800287f6:	eb cd 40 c0 	pushm	r6-r7,lr
800287fa:	1a 97       	mov	r7,sp
800287fc:	20 5d       	sub	sp,20
800287fe:	4a f6       	lddpc	r6,800288b8 <scif_gc_setup+0xc2>
80028800:	1e 26       	rsub	r6,pc
80028802:	ef 4c ff f8 	st.w	r7[-8],r12
80028806:	ef 4b ff f4 	st.w	r7[-12],r11
8002880a:	ef 4a ff f0 	st.w	r7[-16],r10
8002880e:	ef 49 ff ec 	st.w	r7[-20],r9
80028812:	30 08       	mov	r8,0
80028814:	ef 48 ff fc 	st.w	r7[-4],r8
80028818:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002881c:	a1 98       	lsr	r8,0x1
8002881e:	20 18       	sub	r8,1
80028820:	ef 48 ff ec 	st.w	r7[-20],r8
80028824:	fe 78 08 00 	mov	r8,-63488
80028828:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002882c:	2e 79       	sub	r9,-25
8002882e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028832:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028836:	5c 58       	castu.b	r8
80028838:	c0 d0       	breq	80028852 <scif_gc_setup+0x5c>
8002883a:	30 18       	mov	r8,1
8002883c:	ef 48 ff fc 	st.w	r7[-4],r8
80028840:	ee fc ff f8 	ld.w	r12,r7[-8]
80028844:	f0 16 02 17 	mcall	r6[2140]
80028848:	18 98       	mov	r8,r12
8002884a:	58 08       	cp.w	r8,0
8002884c:	c0 34       	brge	80028852 <scif_gc_setup+0x5c>
8002884e:	3f f8       	mov	r8,-1
80028850:	c2 f8       	rjmp	800288ae <scif_gc_setup+0xb8>
80028852:	fe 78 08 00 	mov	r8,-63488
80028856:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002885a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002885e:	b1 6a       	lsl	r10,0x10
80028860:	14 9b       	mov	r11,r10
80028862:	e6 1b 00 ff 	andh	r11,0xff,COH
80028866:	ee fa ff f0 	ld.w	r10,r7[-16]
8002886a:	a1 7a       	lsl	r10,0x1
8002886c:	e2 1a 00 02 	andl	r10,0x2,COH
80028870:	14 4b       	or	r11,r10
80028872:	ee fa ff f4 	ld.w	r10,r7[-12]
80028876:	a9 6a       	lsl	r10,0x8
80028878:	e2 1a 0f 00 	andl	r10,0xf00,COH
8002887c:	f7 ea 10 0a 	or	r10,r11,r10
80028880:	2e 79       	sub	r9,-25
80028882:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002888a:	58 18       	cp.w	r8,1
8002888c:	c1 01       	brne	800288ac <scif_gc_setup+0xb6>
8002888e:	fe 78 08 00 	mov	r8,-63488
80028892:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028896:	fe 7a 08 00 	mov	r10,-63488
8002889a:	ee fb ff f8 	ld.w	r11,r7[-8]
8002889e:	2e 7b       	sub	r11,-25
800288a0:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800288a4:	a1 aa       	sbr	r10,0x0
800288a6:	2e 79       	sub	r9,-25
800288a8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800288ac:	30 08       	mov	r8,0
800288ae:	10 9c       	mov	r12,r8
800288b0:	2f bd       	sub	sp,-20
800288b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800288b6:	00 00       	add	r0,r0
800288b8:	80 02       	ld.sh	r2,r0[0x0]
800288ba:	86 84       	ld.uh	r4,r3[0x0]

800288bc <scif_gc_enable>:
800288bc:	eb cd 40 80 	pushm	r7,lr
800288c0:	1a 97       	mov	r7,sp
800288c2:	20 1d       	sub	sp,4
800288c4:	ef 4c ff fc 	st.w	r7[-4],r12
800288c8:	fe 78 08 00 	mov	r8,-63488
800288cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800288d0:	2e 79       	sub	r9,-25
800288d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800288d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800288da:	c1 01       	brne	800288fa <scif_gc_enable+0x3e>
800288dc:	fe 78 08 00 	mov	r8,-63488
800288e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800288e4:	fe 7a 08 00 	mov	r10,-63488
800288e8:	ee fb ff fc 	ld.w	r11,r7[-4]
800288ec:	2e 7b       	sub	r11,-25
800288ee:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800288f2:	a1 aa       	sbr	r10,0x0
800288f4:	2e 79       	sub	r9,-25
800288f6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800288fa:	30 08       	mov	r8,0
800288fc:	10 9c       	mov	r12,r8
800288fe:	2f fd       	sub	sp,-4
80028900:	e3 cd 80 80 	ldm	sp++,r7,pc

80028904 <scif_bod18_enable_irq>:
80028904:	eb cd 40 80 	pushm	r7,lr
80028908:	1a 97       	mov	r7,sp
8002890a:	fe 78 08 00 	mov	r8,-63488
8002890e:	34 09       	mov	r9,64
80028910:	91 09       	st.w	r8[0x0],r9
80028912:	e3 cd 80 80 	ldm	sp++,r7,pc

80028916 <scif_bod18_disable_irq>:
80028916:	eb cd 40 c0 	pushm	r6-r7,lr
8002891a:	1a 97       	mov	r7,sp
8002891c:	20 1d       	sub	sp,4
8002891e:	49 26       	lddpc	r6,80028964 <scif_bod18_disable_irq+0x4e>
80028920:	1e 26       	rsub	r6,pc
80028922:	e1 b8 00 00 	mfsr	r8,0x0
80028926:	10 9c       	mov	r12,r8
80028928:	fe b0 f9 1e 	rcall	80027b64 <cpu_irq_is_enabled_flags>
8002892c:	18 98       	mov	r8,r12
8002892e:	ef 68 ff ff 	st.b	r7[-1],r8
80028932:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028936:	30 08       	mov	r8,0
80028938:	f0 09 18 00 	cp.b	r9,r8
8002893c:	c0 20       	breq	80028940 <scif_bod18_disable_irq+0x2a>
8002893e:	d3 03       	ssrf	0x10
80028940:	fe 78 08 00 	mov	r8,-63488
80028944:	34 09       	mov	r9,64
80028946:	91 19       	st.w	r8[0x4],r9
80028948:	fe 78 08 00 	mov	r8,-63488
8002894c:	70 38       	ld.w	r8,r8[0xc]
8002894e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028952:	30 08       	mov	r8,0
80028954:	f0 09 18 00 	cp.b	r9,r8
80028958:	c0 20       	breq	8002895c <scif_bod18_disable_irq+0x46>
8002895a:	d5 03       	csrf	0x10
8002895c:	2f fd       	sub	sp,-4
8002895e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028962:	00 00       	add	r0,r0
80028964:	80 02       	ld.sh	r2,r0[0x0]
80028966:	87 a4       	st.w	r3[0x28],r4

80028968 <scif_bod18_clear_irq>:
80028968:	eb cd 40 80 	pushm	r7,lr
8002896c:	1a 97       	mov	r7,sp
8002896e:	fe 78 08 00 	mov	r8,-63488
80028972:	34 09       	mov	r9,64
80028974:	91 49       	st.w	r8[0x10],r9
80028976:	e3 cd 80 80 	ldm	sp++,r7,pc

8002897a <scif_bod18_get_irq_status>:
8002897a:	eb cd 40 80 	pushm	r7,lr
8002897e:	1a 97       	mov	r7,sp
80028980:	fe 78 08 00 	mov	r8,-63488
80028984:	70 38       	ld.w	r8,r8[0xc]
80028986:	e2 18 00 40 	andl	r8,0x40,COH
8002898a:	5f 18       	srne	r8
8002898c:	10 9c       	mov	r12,r8
8002898e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028992 <scif_bod18_get_irq_enable_bit>:
80028992:	eb cd 40 80 	pushm	r7,lr
80028996:	1a 97       	mov	r7,sp
80028998:	fe 78 08 00 	mov	r8,-63488
8002899c:	70 28       	ld.w	r8,r8[0x8]
8002899e:	e2 18 00 40 	andl	r8,0x40,COH
800289a2:	5f 18       	srne	r8
800289a4:	10 9c       	mov	r12,r8
800289a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800289aa <scif_bod18_get_level>:
800289aa:	eb cd 40 80 	pushm	r7,lr
800289ae:	1a 97       	mov	r7,sp
800289b0:	fe 78 08 00 	mov	r8,-63488
800289b4:	70 b8       	ld.w	r8,r8[0x2c]
800289b6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800289ba:	10 9c       	mov	r12,r8
800289bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800289c0 <scif_bod33_enable_irq>:
800289c0:	eb cd 40 80 	pushm	r7,lr
800289c4:	1a 97       	mov	r7,sp
800289c6:	fe 78 08 00 	mov	r8,-63488
800289ca:	e0 69 00 80 	mov	r9,128
800289ce:	91 09       	st.w	r8[0x0],r9
800289d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800289d4 <scif_bod33_disable_irq>:
800289d4:	eb cd 40 c0 	pushm	r6-r7,lr
800289d8:	1a 97       	mov	r7,sp
800289da:	20 1d       	sub	sp,4
800289dc:	49 26       	lddpc	r6,80028a24 <scif_bod33_disable_irq+0x50>
800289de:	1e 26       	rsub	r6,pc
800289e0:	e1 b8 00 00 	mfsr	r8,0x0
800289e4:	10 9c       	mov	r12,r8
800289e6:	fe b0 f8 bf 	rcall	80027b64 <cpu_irq_is_enabled_flags>
800289ea:	18 98       	mov	r8,r12
800289ec:	ef 68 ff ff 	st.b	r7[-1],r8
800289f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800289f4:	30 08       	mov	r8,0
800289f6:	f0 09 18 00 	cp.b	r9,r8
800289fa:	c0 20       	breq	800289fe <scif_bod33_disable_irq+0x2a>
800289fc:	d3 03       	ssrf	0x10
800289fe:	fe 78 08 00 	mov	r8,-63488
80028a02:	e0 69 00 80 	mov	r9,128
80028a06:	91 19       	st.w	r8[0x4],r9
80028a08:	fe 78 08 00 	mov	r8,-63488
80028a0c:	70 38       	ld.w	r8,r8[0xc]
80028a0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028a12:	30 08       	mov	r8,0
80028a14:	f0 09 18 00 	cp.b	r9,r8
80028a18:	c0 20       	breq	80028a1c <scif_bod33_disable_irq+0x48>
80028a1a:	d5 03       	csrf	0x10
80028a1c:	2f fd       	sub	sp,-4
80028a1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028a22:	00 00       	add	r0,r0
80028a24:	80 02       	ld.sh	r2,r0[0x0]
80028a26:	88 62       	ld.sh	r2,r4[0xc]

80028a28 <scif_bod33_clear_irq>:
80028a28:	eb cd 40 80 	pushm	r7,lr
80028a2c:	1a 97       	mov	r7,sp
80028a2e:	fe 78 08 00 	mov	r8,-63488
80028a32:	e0 69 00 80 	mov	r9,128
80028a36:	91 49       	st.w	r8[0x10],r9
80028a38:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a3c <scif_bod33_get_irq_status>:
80028a3c:	eb cd 40 80 	pushm	r7,lr
80028a40:	1a 97       	mov	r7,sp
80028a42:	fe 78 08 00 	mov	r8,-63488
80028a46:	70 38       	ld.w	r8,r8[0xc]
80028a48:	e2 18 00 80 	andl	r8,0x80,COH
80028a4c:	5f 18       	srne	r8
80028a4e:	10 9c       	mov	r12,r8
80028a50:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a54 <scif_bod33_get_irq_enable_bit>:
80028a54:	eb cd 40 80 	pushm	r7,lr
80028a58:	1a 97       	mov	r7,sp
80028a5a:	fe 78 08 00 	mov	r8,-63488
80028a5e:	70 28       	ld.w	r8,r8[0x8]
80028a60:	e2 18 00 80 	andl	r8,0x80,COH
80028a64:	5f 18       	srne	r8
80028a66:	10 9c       	mov	r12,r8
80028a68:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a6c <scif_bod33_get_level>:
80028a6c:	eb cd 40 80 	pushm	r7,lr
80028a70:	1a 97       	mov	r7,sp
80028a72:	fe 78 08 00 	mov	r8,-63488
80028a76:	70 d8       	ld.w	r8,r8[0x34]
80028a78:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028a7c:	10 9c       	mov	r12,r8
80028a7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a82 <scif_bod50_enable_irq>:
80028a82:	eb cd 40 80 	pushm	r7,lr
80028a86:	1a 97       	mov	r7,sp
80028a88:	fe 78 08 00 	mov	r8,-63488
80028a8c:	e0 69 01 00 	mov	r9,256
80028a90:	91 09       	st.w	r8[0x0],r9
80028a92:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a96 <scif_bod50_disable_irq>:
80028a96:	eb cd 40 c0 	pushm	r6-r7,lr
80028a9a:	1a 97       	mov	r7,sp
80028a9c:	20 1d       	sub	sp,4
80028a9e:	49 26       	lddpc	r6,80028ae4 <scif_bod50_disable_irq+0x4e>
80028aa0:	1e 26       	rsub	r6,pc
80028aa2:	e1 b8 00 00 	mfsr	r8,0x0
80028aa6:	10 9c       	mov	r12,r8
80028aa8:	fe b0 f8 5e 	rcall	80027b64 <cpu_irq_is_enabled_flags>
80028aac:	18 98       	mov	r8,r12
80028aae:	ef 68 ff ff 	st.b	r7[-1],r8
80028ab2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ab6:	30 08       	mov	r8,0
80028ab8:	f0 09 18 00 	cp.b	r9,r8
80028abc:	c0 20       	breq	80028ac0 <scif_bod50_disable_irq+0x2a>
80028abe:	d3 03       	ssrf	0x10
80028ac0:	fe 78 08 00 	mov	r8,-63488
80028ac4:	e0 69 01 00 	mov	r9,256
80028ac8:	91 19       	st.w	r8[0x4],r9
80028aca:	fe 78 08 00 	mov	r8,-63488
80028ace:	70 38       	ld.w	r8,r8[0xc]
80028ad0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ad4:	30 08       	mov	r8,0
80028ad6:	f0 09 18 00 	cp.b	r9,r8
80028ada:	c0 20       	breq	80028ade <scif_bod50_disable_irq+0x48>
80028adc:	d5 03       	csrf	0x10
80028ade:	2f fd       	sub	sp,-4
80028ae0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ae4:	80 02       	ld.sh	r2,r0[0x0]
80028ae6:	89 24       	st.w	r4[0x8],r4

80028ae8 <scif_bod50_clear_irq>:
80028ae8:	eb cd 40 80 	pushm	r7,lr
80028aec:	1a 97       	mov	r7,sp
80028aee:	fe 78 08 00 	mov	r8,-63488
80028af2:	e0 69 01 00 	mov	r9,256
80028af6:	91 49       	st.w	r8[0x10],r9
80028af8:	e3 cd 80 80 	ldm	sp++,r7,pc

80028afc <scif_bod50_get_irq_status>:
80028afc:	eb cd 40 80 	pushm	r7,lr
80028b00:	1a 97       	mov	r7,sp
80028b02:	fe 78 08 00 	mov	r8,-63488
80028b06:	70 38       	ld.w	r8,r8[0xc]
80028b08:	e2 18 01 00 	andl	r8,0x100,COH
80028b0c:	5f 18       	srne	r8
80028b0e:	10 9c       	mov	r12,r8
80028b10:	e3 cd 80 80 	ldm	sp++,r7,pc

80028b14 <scif_bod50_get_irq_enable_bit>:
80028b14:	eb cd 40 80 	pushm	r7,lr
80028b18:	1a 97       	mov	r7,sp
80028b1a:	fe 78 08 00 	mov	r8,-63488
80028b1e:	70 28       	ld.w	r8,r8[0x8]
80028b20:	e2 18 01 00 	andl	r8,0x100,COH
80028b24:	5f 18       	srne	r8
80028b26:	10 9c       	mov	r12,r8
80028b28:	e3 cd 80 80 	ldm	sp++,r7,pc

80028b2c <scif_bod50_get_level>:
80028b2c:	eb cd 40 80 	pushm	r7,lr
80028b30:	1a 97       	mov	r7,sp
80028b32:	fe 78 08 00 	mov	r8,-63488
80028b36:	70 e8       	ld.w	r8,r8[0x38]
80028b38:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028b3c:	10 9c       	mov	r12,r8
80028b3e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80028b44 <getBaudDiv>:
80028b44:	eb cd 40 80 	pushm	r7,lr
80028b48:	1a 97       	mov	r7,sp
80028b4a:	20 3d       	sub	sp,12
80028b4c:	ef 4c ff f8 	st.w	r7[-8],r12
80028b50:	ef 4b ff f4 	st.w	r7[-12],r11
80028b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028b58:	f0 09 16 01 	lsr	r9,r8,0x1
80028b5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028b60:	f2 08 00 08 	add	r8,r9,r8
80028b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028b68:	f0 09 0d 08 	divu	r8,r8,r9
80028b6c:	ef 48 ff fc 	st.w	r7[-4],r8
80028b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b74:	58 08       	cp.w	r8,0
80028b76:	e0 8a 00 08 	brle	80028b86 <getBaudDiv+0x42>
80028b7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b7e:	e0 48 00 ff 	cp.w	r8,255
80028b82:	e0 8a 00 04 	brle	80028b8a <getBaudDiv+0x46>
80028b86:	3f f8       	mov	r8,-1
80028b88:	c0 48       	rjmp	80028b90 <getBaudDiv+0x4c>
80028b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b8e:	5c 88       	casts.h	r8
80028b90:	10 9c       	mov	r12,r8
80028b92:	2f dd       	sub	sp,-12
80028b94:	e3 cd 80 80 	ldm	sp++,r7,pc

80028b98 <spi_initSlave>:
80028b98:	eb cd 40 80 	pushm	r7,lr
80028b9c:	1a 97       	mov	r7,sp
80028b9e:	20 3d       	sub	sp,12
80028ba0:	ef 4c ff fc 	st.w	r7[-4],r12
80028ba4:	16 99       	mov	r9,r11
80028ba6:	14 98       	mov	r8,r10
80028ba8:	ef 69 ff f8 	st.b	r7[-8],r9
80028bac:	ef 68 ff f4 	st.b	r7[-12],r8
80028bb0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80028bb4:	30 38       	mov	r8,3
80028bb6:	f0 09 18 00 	cp.b	r9,r8
80028bba:	e0 8b 00 10 	brhi	80028bda <spi_initSlave+0x42>
80028bbe:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80028bc2:	30 78       	mov	r8,7
80028bc4:	f0 09 18 00 	cp.b	r9,r8
80028bc8:	e0 88 00 09 	brls	80028bda <spi_initSlave+0x42>
80028bcc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80028bd0:	31 08       	mov	r8,16
80028bd2:	f0 09 18 00 	cp.b	r9,r8
80028bd6:	e0 88 00 04 	brls	80028bde <spi_initSlave+0x46>
80028bda:	30 28       	mov	r8,2
80028bdc:	c1 f8       	rjmp	80028c1a <spi_initSlave+0x82>
80028bde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028be2:	e0 69 00 80 	mov	r9,128
80028be6:	91 09       	st.w	r8[0x0],r9
80028be8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80028bec:	a1 98       	lsr	r8,0x1
80028bee:	5c 58       	castu.b	r8
80028bf0:	10 99       	mov	r9,r8
80028bf2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80028bf6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028bfa:	c0 31       	brne	80028c00 <spi_initSlave+0x68>
80028bfc:	30 28       	mov	r8,2
80028bfe:	c0 28       	rjmp	80028c02 <spi_initSlave+0x6a>
80028c00:	30 08       	mov	r8,0
80028c02:	10 49       	or	r9,r8
80028c04:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80028c08:	20 88       	sub	r8,8
80028c0a:	a5 68       	lsl	r8,0x4
80028c0c:	f3 e8 10 08 	or	r8,r9,r8
80028c10:	10 99       	mov	r9,r8
80028c12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c16:	91 c9       	st.w	r8[0x30],r9
80028c18:	30 08       	mov	r8,0
80028c1a:	10 9c       	mov	r12,r8
80028c1c:	2f dd       	sub	sp,-12
80028c1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028c22 <spi_initTest>:
80028c22:	eb cd 40 80 	pushm	r7,lr
80028c26:	1a 97       	mov	r7,sp
80028c28:	20 1d       	sub	sp,4
80028c2a:	ef 4c ff fc 	st.w	r7[-4],r12
80028c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c32:	e0 69 00 80 	mov	r9,128
80028c36:	91 09       	st.w	r8[0x0],r9
80028c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c3c:	70 18       	ld.w	r8,r8[0x4]
80028c3e:	10 99       	mov	r9,r8
80028c40:	e8 19 00 81 	orl	r9,0x81
80028c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c48:	91 19       	st.w	r8[0x4],r9
80028c4a:	30 08       	mov	r8,0
80028c4c:	10 9c       	mov	r12,r8
80028c4e:	2f fd       	sub	sp,-4
80028c50:	e3 cd 80 80 	ldm	sp++,r7,pc

80028c54 <spi_initMaster>:
80028c54:	eb cd 40 80 	pushm	r7,lr
80028c58:	1a 97       	mov	r7,sp
80028c5a:	20 3d       	sub	sp,12
80028c5c:	ef 4c ff f8 	st.w	r7[-8],r12
80028c60:	ef 4b ff f4 	st.w	r7[-12],r11
80028c64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028c68:	f1 39 00 0d 	ld.ub	r9,r8[13]
80028c6c:	30 18       	mov	r8,1
80028c6e:	f0 09 18 00 	cp.b	r9,r8
80028c72:	e0 88 00 04 	brls	80028c7a <spi_initMaster+0x26>
80028c76:	30 28       	mov	r8,2
80028c78:	c3 48       	rjmp	80028ce0 <spi_initMaster+0x8c>
80028c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c7e:	e0 69 00 80 	mov	r9,128
80028c82:	91 09       	st.w	r8[0x0],r9
80028c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c88:	70 18       	ld.w	r8,r8[0x4]
80028c8a:	ef 48 ff fc 	st.w	r7[-4],r8
80028c8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c92:	30 19       	mov	r9,1
80028c94:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028c98:	ef 48 ff fc 	st.w	r7[-4],r8
80028c9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028ca0:	f1 38 00 0d 	ld.ub	r8,r8[13]
80028ca4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028ca8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028cb0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80028cb4:	ef 48 ff fc 	st.w	r7[-4],r8
80028cb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028cbc:	30 09       	mov	r9,0
80028cbe:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80028cc2:	ef 48 ff fc 	st.w	r7[-4],r8
80028cc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028cca:	30 f9       	mov	r9,15
80028ccc:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80028cd0:	ef 48 ff fc 	st.w	r7[-4],r8
80028cd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cdc:	91 19       	st.w	r8[0x4],r9
80028cde:	30 08       	mov	r8,0
80028ce0:	10 9c       	mov	r12,r8
80028ce2:	2f dd       	sub	sp,-12
80028ce4:	e3 cd 80 80 	ldm	sp++,r7,pc

80028ce8 <spi_selectionMode>:
80028ce8:	eb cd 40 80 	pushm	r7,lr
80028cec:	1a 97       	mov	r7,sp
80028cee:	20 5d       	sub	sp,20
80028cf0:	ef 4c ff f8 	st.w	r7[-8],r12
80028cf4:	12 98       	mov	r8,r9
80028cf6:	16 99       	mov	r9,r11
80028cf8:	ef 69 ff f4 	st.b	r7[-12],r9
80028cfc:	14 99       	mov	r9,r10
80028cfe:	ef 69 ff f0 	st.b	r7[-16],r9
80028d02:	ef 68 ff ec 	st.b	r7[-20],r8
80028d06:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80028d0a:	30 18       	mov	r8,1
80028d0c:	f0 09 18 00 	cp.b	r9,r8
80028d10:	e0 8b 00 09 	brhi	80028d22 <spi_selectionMode+0x3a>
80028d14:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028d18:	30 18       	mov	r8,1
80028d1a:	f0 09 18 00 	cp.b	r9,r8
80028d1e:	e0 88 00 04 	brls	80028d26 <spi_selectionMode+0x3e>
80028d22:	30 28       	mov	r8,2
80028d24:	c2 88       	rjmp	80028d74 <spi_selectionMode+0x8c>
80028d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d2a:	70 18       	ld.w	r8,r8[0x4]
80028d2c:	ef 48 ff fc 	st.w	r7[-4],r8
80028d30:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80028d34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028d38:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028d3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d40:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80028d44:	ef 48 ff fc 	st.w	r7[-4],r8
80028d48:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80028d4c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028d50:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028d54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d58:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80028d5c:	ef 48 ff fc 	st.w	r7[-4],r8
80028d60:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80028d64:	ef 68 ff fc 	st.b	r7[-4],r8
80028d68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d70:	91 19       	st.w	r8[0x4],r9
80028d72:	30 08       	mov	r8,0
80028d74:	10 9c       	mov	r12,r8
80028d76:	2f bd       	sub	sp,-20
80028d78:	e3 cd 80 80 	ldm	sp++,r7,pc

80028d7c <spi_selectChip>:
80028d7c:	eb cd 40 80 	pushm	r7,lr
80028d80:	1a 97       	mov	r7,sp
80028d82:	20 2d       	sub	sp,8
80028d84:	ef 4c ff fc 	st.w	r7[-4],r12
80028d88:	16 98       	mov	r8,r11
80028d8a:	ef 68 ff f8 	st.b	r7[-8],r8
80028d8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d92:	70 18       	ld.w	r8,r8[0x4]
80028d94:	10 99       	mov	r9,r8
80028d96:	ea 19 00 0f 	orh	r9,0xf
80028d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d9e:	91 19       	st.w	r8[0x4],r9
80028da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028da4:	70 18       	ld.w	r8,r8[0x4]
80028da6:	e2 18 00 04 	andl	r8,0x4,COH
80028daa:	c1 90       	breq	80028ddc <spi_selectChip+0x60>
80028dac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80028db0:	30 e8       	mov	r8,14
80028db2:	f0 09 18 00 	cp.b	r9,r8
80028db6:	e0 88 00 04 	brls	80028dbe <spi_selectChip+0x42>
80028dba:	30 28       	mov	r8,2
80028dbc:	c2 88       	rjmp	80028e0c <spi_selectChip+0x90>
80028dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028dc2:	70 19       	ld.w	r9,r8[0x4]
80028dc4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80028dc8:	b1 68       	lsl	r8,0x10
80028dca:	ea 18 ff f0 	orh	r8,0xfff0
80028dce:	e8 18 ff ff 	orl	r8,0xffff
80028dd2:	10 69       	and	r9,r8
80028dd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028dd8:	91 19       	st.w	r8[0x4],r9
80028dda:	c1 88       	rjmp	80028e0a <spi_selectChip+0x8e>
80028ddc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80028de0:	30 38       	mov	r8,3
80028de2:	f0 09 18 00 	cp.b	r9,r8
80028de6:	e0 88 00 04 	brls	80028dee <spi_selectChip+0x72>
80028dea:	30 28       	mov	r8,2
80028dec:	c1 08       	rjmp	80028e0c <spi_selectChip+0x90>
80028dee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028df2:	70 19       	ld.w	r9,r8[0x4]
80028df4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80028df8:	2f 08       	sub	r8,-16
80028dfa:	30 1a       	mov	r10,1
80028dfc:	f4 08 09 48 	lsl	r8,r10,r8
80028e00:	5c d8       	com	r8
80028e02:	10 69       	and	r9,r8
80028e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028e08:	91 19       	st.w	r8[0x4],r9
80028e0a:	30 08       	mov	r8,0
80028e0c:	10 9c       	mov	r12,r8
80028e0e:	2f ed       	sub	sp,-8
80028e10:	e3 cd 80 80 	ldm	sp++,r7,pc

80028e14 <spi_unselectChip>:
80028e14:	eb cd 40 80 	pushm	r7,lr
80028e18:	1a 97       	mov	r7,sp
80028e1a:	20 3d       	sub	sp,12
80028e1c:	ef 4c ff f8 	st.w	r7[-8],r12
80028e20:	16 98       	mov	r8,r11
80028e22:	ef 68 ff f4 	st.b	r7[-12],r8
80028e26:	e0 68 3a 98 	mov	r8,15000
80028e2a:	ef 48 ff fc 	st.w	r7[-4],r8
80028e2e:	c0 f8       	rjmp	80028e4c <spi_unselectChip+0x38>
80028e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028e34:	58 08       	cp.w	r8,0
80028e36:	5f 08       	sreq	r8
80028e38:	5c 58       	castu.b	r8
80028e3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028e3e:	20 19       	sub	r9,1
80028e40:	ef 49 ff fc 	st.w	r7[-4],r9
80028e44:	58 08       	cp.w	r8,0
80028e46:	c0 30       	breq	80028e4c <spi_unselectChip+0x38>
80028e48:	30 18       	mov	r8,1
80028e4a:	c1 68       	rjmp	80028e76 <spi_unselectChip+0x62>
80028e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e50:	70 48       	ld.w	r8,r8[0x10]
80028e52:	e2 18 02 00 	andl	r8,0x200,COH
80028e56:	ce d0       	breq	80028e30 <spi_unselectChip+0x1c>
80028e58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e5c:	70 18       	ld.w	r8,r8[0x4]
80028e5e:	10 99       	mov	r9,r8
80028e60:	ea 19 00 0f 	orh	r9,0xf
80028e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e68:	91 19       	st.w	r8[0x4],r9
80028e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e6e:	fc 19 01 00 	movh	r9,0x100
80028e72:	91 09       	st.w	r8[0x0],r9
80028e74:	30 08       	mov	r8,0
80028e76:	10 9c       	mov	r12,r8
80028e78:	2f dd       	sub	sp,-12
80028e7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80028e7e <spi_setupChipReg>:
80028e7e:	eb cd 40 c0 	pushm	r6-r7,lr
80028e82:	1a 97       	mov	r7,sp
80028e84:	20 5d       	sub	sp,20
80028e86:	4e 06       	lddpc	r6,80029004 <spi_setupChipReg+0x186>
80028e88:	1e 26       	rsub	r6,pc
80028e8a:	ef 4c ff f4 	st.w	r7[-12],r12
80028e8e:	ef 4b ff f0 	st.w	r7[-16],r11
80028e92:	ef 4a ff ec 	st.w	r7[-20],r10
80028e96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e9a:	f1 39 00 0c 	ld.ub	r9,r8[12]
80028e9e:	30 38       	mov	r8,3
80028ea0:	f0 09 18 00 	cp.b	r9,r8
80028ea4:	e0 8b 00 1d 	brhi	80028ede <spi_setupChipReg+0x60>
80028ea8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028eac:	f1 39 00 0b 	ld.ub	r9,r8[11]
80028eb0:	30 18       	mov	r8,1
80028eb2:	f0 09 18 00 	cp.b	r9,r8
80028eb6:	e0 8b 00 14 	brhi	80028ede <spi_setupChipReg+0x60>
80028eba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ebe:	f1 39 00 08 	ld.ub	r9,r8[8]
80028ec2:	30 78       	mov	r8,7
80028ec4:	f0 09 18 00 	cp.b	r9,r8
80028ec8:	e0 88 00 0b 	brls	80028ede <spi_setupChipReg+0x60>
80028ecc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ed0:	f1 39 00 08 	ld.ub	r9,r8[8]
80028ed4:	31 08       	mov	r8,16
80028ed6:	f0 09 18 00 	cp.b	r9,r8
80028eda:	e0 88 00 04 	brls	80028ee2 <spi_setupChipReg+0x64>
80028ede:	30 28       	mov	r8,2
80028ee0:	c8 d8       	rjmp	80028ffa <spi_setupChipReg+0x17c>
80028ee2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ee6:	70 18       	ld.w	r8,r8[0x4]
80028ee8:	ee fb ff ec 	ld.w	r11,r7[-20]
80028eec:	10 9c       	mov	r12,r8
80028eee:	f0 16 01 21 	mcall	r6[1156]
80028ef2:	18 98       	mov	r8,r12
80028ef4:	ef 48 ff fc 	st.w	r7[-4],r8
80028ef8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028efc:	58 08       	cp.w	r8,0
80028efe:	c0 34       	brge	80028f04 <spi_setupChipReg+0x86>
80028f00:	30 28       	mov	r8,2
80028f02:	c7 c8       	rjmp	80028ffa <spi_setupChipReg+0x17c>
80028f04:	30 08       	mov	r8,0
80028f06:	ef 48 ff f8 	st.w	r7[-8],r8
80028f0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f0e:	f1 38 00 0c 	ld.ub	r8,r8[12]
80028f12:	a1 98       	lsr	r8,0x1
80028f14:	5c 58       	castu.b	r8
80028f16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028f1a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f22:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028f26:	ef 48 ff f8 	st.w	r7[-8],r8
80028f2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f2e:	f1 38 00 0c 	ld.ub	r8,r8[12]
80028f32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028f36:	5f 08       	sreq	r8
80028f38:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f40:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80028f44:	ef 48 ff f8 	st.w	r7[-8],r8
80028f48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f4c:	f1 38 00 0b 	ld.ub	r8,r8[11]
80028f50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028f54:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f5c:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80028f60:	ef 48 ff f8 	st.w	r7[-8],r8
80028f64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f68:	f1 38 00 08 	ld.ub	r8,r8[8]
80028f6c:	20 88       	sub	r8,8
80028f6e:	5c 58       	castu.b	r8
80028f70:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028f74:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028f78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028f7c:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80028f80:	ef 48 ff f8 	st.w	r7[-8],r8
80028f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f88:	5c 58       	castu.b	r8
80028f8a:	ef 68 ff fa 	st.b	r7[-6],r8
80028f8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f92:	f1 38 00 09 	ld.ub	r8,r8[9]
80028f96:	ef 68 ff f9 	st.b	r7[-7],r8
80028f9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f9e:	f1 38 00 0a 	ld.ub	r8,r8[10]
80028fa2:	ef 68 ff f8 	st.b	r7[-8],r8
80028fa6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028faa:	11 88       	ld.ub	r8,r8[0x0]
80028fac:	58 18       	cp.w	r8,1
80028fae:	c1 10       	breq	80028fd0 <spi_setupChipReg+0x152>
80028fb0:	e0 89 00 05 	brgt	80028fba <spi_setupChipReg+0x13c>
80028fb4:	58 08       	cp.w	r8,0
80028fb6:	c0 70       	breq	80028fc4 <spi_setupChipReg+0x146>
80028fb8:	c1 e8       	rjmp	80028ff4 <spi_setupChipReg+0x176>
80028fba:	58 28       	cp.w	r8,2
80028fbc:	c1 00       	breq	80028fdc <spi_setupChipReg+0x15e>
80028fbe:	58 38       	cp.w	r8,3
80028fc0:	c1 40       	breq	80028fe8 <spi_setupChipReg+0x16a>
80028fc2:	c1 98       	rjmp	80028ff4 <spi_setupChipReg+0x176>
80028fc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028fc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028fcc:	91 c9       	st.w	r8[0x30],r9
80028fce:	c1 58       	rjmp	80028ff8 <spi_setupChipReg+0x17a>
80028fd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028fd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028fd8:	91 d9       	st.w	r8[0x34],r9
80028fda:	c0 f8       	rjmp	80028ff8 <spi_setupChipReg+0x17a>
80028fdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028fe4:	91 e9       	st.w	r8[0x38],r9
80028fe6:	c0 98       	rjmp	80028ff8 <spi_setupChipReg+0x17a>
80028fe8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028fec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028ff0:	91 f9       	st.w	r8[0x3c],r9
80028ff2:	c0 38       	rjmp	80028ff8 <spi_setupChipReg+0x17a>
80028ff4:	30 28       	mov	r8,2
80028ff6:	c0 28       	rjmp	80028ffa <spi_setupChipReg+0x17c>
80028ff8:	30 08       	mov	r8,0
80028ffa:	10 9c       	mov	r12,r8
80028ffc:	2f bd       	sub	sp,-20
80028ffe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029002:	00 00       	add	r0,r0
80029004:	80 02       	ld.sh	r2,r0[0x0]
80029006:	8d 0c       	st.w	r6[0x0],r12

80029008 <spi_enable>:
80029008:	eb cd 40 80 	pushm	r7,lr
8002900c:	1a 97       	mov	r7,sp
8002900e:	20 1d       	sub	sp,4
80029010:	ef 4c ff fc 	st.w	r7[-4],r12
80029014:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029018:	30 19       	mov	r9,1
8002901a:	91 09       	st.w	r8[0x0],r9
8002901c:	2f fd       	sub	sp,-4
8002901e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029022 <spi_disable>:
80029022:	eb cd 40 80 	pushm	r7,lr
80029026:	1a 97       	mov	r7,sp
80029028:	20 1d       	sub	sp,4
8002902a:	ef 4c ff fc 	st.w	r7[-4],r12
8002902e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029032:	30 29       	mov	r9,2
80029034:	91 09       	st.w	r8[0x0],r9
80029036:	2f fd       	sub	sp,-4
80029038:	e3 cd 80 80 	ldm	sp++,r7,pc

8002903c <spi_is_enabled>:
8002903c:	eb cd 40 80 	pushm	r7,lr
80029040:	1a 97       	mov	r7,sp
80029042:	20 1d       	sub	sp,4
80029044:	ef 4c ff fc 	st.w	r7[-4],r12
80029048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002904c:	70 48       	ld.w	r8,r8[0x10]
8002904e:	e6 18 00 01 	andh	r8,0x1,COH
80029052:	5f 18       	srne	r8
80029054:	10 9c       	mov	r12,r8
80029056:	2f fd       	sub	sp,-4
80029058:	e3 cd 80 80 	ldm	sp++,r7,pc

8002905c <spi_writeRegisterEmptyCheck>:
8002905c:	eb cd 40 80 	pushm	r7,lr
80029060:	1a 97       	mov	r7,sp
80029062:	20 1d       	sub	sp,4
80029064:	ef 4c ff fc 	st.w	r7[-4],r12
80029068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002906c:	70 48       	ld.w	r8,r8[0x10]
8002906e:	e2 18 00 02 	andl	r8,0x2,COH
80029072:	5f 18       	srne	r8
80029074:	10 9c       	mov	r12,r8
80029076:	2f fd       	sub	sp,-4
80029078:	e3 cd 80 80 	ldm	sp++,r7,pc

8002907c <spi_write>:
8002907c:	eb cd 40 80 	pushm	r7,lr
80029080:	1a 97       	mov	r7,sp
80029082:	20 3d       	sub	sp,12
80029084:	ef 4c ff f8 	st.w	r7[-8],r12
80029088:	16 98       	mov	r8,r11
8002908a:	ef 58 ff f4 	st.h	r7[-12],r8
8002908e:	e0 68 3a 98 	mov	r8,15000
80029092:	ef 48 ff fc 	st.w	r7[-4],r8
80029096:	c0 f8       	rjmp	800290b4 <spi_write+0x38>
80029098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002909c:	58 08       	cp.w	r8,0
8002909e:	5f 08       	sreq	r8
800290a0:	5c 58       	castu.b	r8
800290a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800290a6:	20 19       	sub	r9,1
800290a8:	ef 49 ff fc 	st.w	r7[-4],r9
800290ac:	58 08       	cp.w	r8,0
800290ae:	c0 30       	breq	800290b4 <spi_write+0x38>
800290b0:	30 18       	mov	r8,1
800290b2:	c0 d8       	rjmp	800290cc <spi_write+0x50>
800290b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800290b8:	70 48       	ld.w	r8,r8[0x10]
800290ba:	e2 18 00 02 	andl	r8,0x2,COH
800290be:	ce d0       	breq	80029098 <spi_write+0x1c>
800290c0:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800290c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800290c8:	91 39       	st.w	r8[0xc],r9
800290ca:	30 08       	mov	r8,0
800290cc:	10 9c       	mov	r12,r8
800290ce:	2f dd       	sub	sp,-12
800290d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800290d4 <spi_variableSlaveWrite>:
800290d4:	eb cd 40 80 	pushm	r7,lr
800290d8:	1a 97       	mov	r7,sp
800290da:	20 5d       	sub	sp,20
800290dc:	ef 4c ff f8 	st.w	r7[-8],r12
800290e0:	12 98       	mov	r8,r9
800290e2:	16 99       	mov	r9,r11
800290e4:	ef 59 ff f4 	st.h	r7[-12],r9
800290e8:	14 99       	mov	r9,r10
800290ea:	ef 69 ff f0 	st.b	r7[-16],r9
800290ee:	ef 68 ff ec 	st.b	r7[-20],r8
800290f2:	e0 68 3a 98 	mov	r8,15000
800290f6:	ef 48 ff fc 	st.w	r7[-4],r8
800290fa:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800290fe:	30 e8       	mov	r8,14
80029100:	f0 09 18 00 	cp.b	r9,r8
80029104:	e0 8b 00 09 	brhi	80029116 <spi_variableSlaveWrite+0x42>
80029108:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002910c:	30 18       	mov	r8,1
8002910e:	f0 09 18 00 	cp.b	r9,r8
80029112:	e0 88 00 12 	brls	80029136 <spi_variableSlaveWrite+0x62>
80029116:	30 28       	mov	r8,2
80029118:	c2 68       	rjmp	80029164 <spi_variableSlaveWrite+0x90>
8002911a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002911e:	58 08       	cp.w	r8,0
80029120:	5f 08       	sreq	r8
80029122:	5c 58       	castu.b	r8
80029124:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029128:	20 19       	sub	r9,1
8002912a:	ef 49 ff fc 	st.w	r7[-4],r9
8002912e:	58 08       	cp.w	r8,0
80029130:	c0 40       	breq	80029138 <spi_variableSlaveWrite+0x64>
80029132:	30 18       	mov	r8,1
80029134:	c1 88       	rjmp	80029164 <spi_variableSlaveWrite+0x90>
80029136:	d7 03       	nop
80029138:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002913c:	70 48       	ld.w	r8,r8[0x10]
8002913e:	e2 18 00 02 	andl	r8,0x2,COH
80029142:	ce c0       	breq	8002911a <spi_variableSlaveWrite+0x46>
80029144:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029148:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002914c:	b1 68       	lsl	r8,0x10
8002914e:	10 49       	or	r9,r8
80029150:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029154:	b9 68       	lsl	r8,0x18
80029156:	f3 e8 10 08 	or	r8,r9,r8
8002915a:	10 99       	mov	r9,r8
8002915c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029160:	91 39       	st.w	r8[0xc],r9
80029162:	30 08       	mov	r8,0
80029164:	10 9c       	mov	r12,r8
80029166:	2f bd       	sub	sp,-20
80029168:	e3 cd 80 80 	ldm	sp++,r7,pc

8002916c <spi_writeEndCheck>:
8002916c:	eb cd 40 80 	pushm	r7,lr
80029170:	1a 97       	mov	r7,sp
80029172:	20 1d       	sub	sp,4
80029174:	ef 4c ff fc 	st.w	r7[-4],r12
80029178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002917c:	70 48       	ld.w	r8,r8[0x10]
8002917e:	e2 18 02 00 	andl	r8,0x200,COH
80029182:	5f 18       	srne	r8
80029184:	10 9c       	mov	r12,r8
80029186:	2f fd       	sub	sp,-4
80029188:	e3 cd 80 80 	ldm	sp++,r7,pc

8002918c <spi_readRegisterFullCheck>:
8002918c:	eb cd 40 80 	pushm	r7,lr
80029190:	1a 97       	mov	r7,sp
80029192:	20 1d       	sub	sp,4
80029194:	ef 4c ff fc 	st.w	r7[-4],r12
80029198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002919c:	70 48       	ld.w	r8,r8[0x10]
8002919e:	5c 58       	castu.b	r8
800291a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800291a4:	10 9c       	mov	r12,r8
800291a6:	2f fd       	sub	sp,-4
800291a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800291ac <spi_read>:
800291ac:	eb cd 40 80 	pushm	r7,lr
800291b0:	1a 97       	mov	r7,sp
800291b2:	20 3d       	sub	sp,12
800291b4:	ef 4c ff f8 	st.w	r7[-8],r12
800291b8:	ef 4b ff f4 	st.w	r7[-12],r11
800291bc:	e0 68 3a 98 	mov	r8,15000
800291c0:	ef 48 ff fc 	st.w	r7[-4],r8
800291c4:	c0 f8       	rjmp	800291e2 <spi_read+0x36>
800291c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800291ca:	58 08       	cp.w	r8,0
800291cc:	5f 08       	sreq	r8
800291ce:	5c 58       	castu.b	r8
800291d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800291d4:	20 19       	sub	r9,1
800291d6:	ef 49 ff fc 	st.w	r7[-4],r9
800291da:	58 08       	cp.w	r8,0
800291dc:	c0 30       	breq	800291e2 <spi_read+0x36>
800291de:	30 18       	mov	r8,1
800291e0:	c1 18       	rjmp	80029202 <spi_read+0x56>
800291e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800291e6:	70 48       	ld.w	r8,r8[0x10]
800291e8:	e2 18 02 01 	andl	r8,0x201,COH
800291ec:	e0 48 02 01 	cp.w	r8,513
800291f0:	ce b1       	brne	800291c6 <spi_read+0x1a>
800291f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800291f6:	70 28       	ld.w	r8,r8[0x8]
800291f8:	5c 88       	casts.h	r8
800291fa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800291fe:	b2 08       	st.h	r9[0x0],r8
80029200:	30 08       	mov	r8,0
80029202:	10 9c       	mov	r12,r8
80029204:	2f dd       	sub	sp,-12
80029206:	e3 cd 80 80 	ldm	sp++,r7,pc

8002920a <spi_getStatus>:
8002920a:	eb cd 40 80 	pushm	r7,lr
8002920e:	1a 97       	mov	r7,sp
80029210:	20 3d       	sub	sp,12
80029212:	ef 4c ff f4 	st.w	r7[-12],r12
80029216:	30 08       	mov	r8,0
80029218:	ef 48 ff f8 	st.w	r7[-8],r8
8002921c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029220:	70 48       	ld.w	r8,r8[0x10]
80029222:	ef 48 ff fc 	st.w	r7[-4],r8
80029226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002922a:	e2 18 00 08 	andl	r8,0x8,COH
8002922e:	c0 40       	breq	80029236 <spi_getStatus+0x2c>
80029230:	30 38       	mov	r8,3
80029232:	ef 48 ff f8 	st.w	r7[-8],r8
80029236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002923a:	e2 18 00 04 	andl	r8,0x4,COH
8002923e:	c0 60       	breq	8002924a <spi_getStatus+0x40>
80029240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029244:	2f c8       	sub	r8,-4
80029246:	ef 48 ff f8 	st.w	r7[-8],r8
8002924a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002924e:	58 78       	cp.w	r8,7
80029250:	c0 31       	brne	80029256 <spi_getStatus+0x4c>
80029252:	30 58       	mov	r8,5
80029254:	c0 b8       	rjmp	8002926a <spi_getStatus+0x60>
80029256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002925a:	58 08       	cp.w	r8,0
8002925c:	e0 8a 00 06 	brle	80029268 <spi_getStatus+0x5e>
80029260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029264:	5c 58       	castu.b	r8
80029266:	c0 28       	rjmp	8002926a <spi_getStatus+0x60>
80029268:	30 08       	mov	r8,0
8002926a:	10 9c       	mov	r12,r8
8002926c:	2f dd       	sub	sp,-12
8002926e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029274 <cpu_irq_save>:
80029274:	eb cd 40 80 	pushm	r7,lr
80029278:	1a 97       	mov	r7,sp
8002927a:	20 1d       	sub	sp,4
8002927c:	e1 b8 00 00 	mfsr	r8,0x0
80029280:	ef 48 ff fc 	st.w	r7[-4],r8
80029284:	d3 03       	ssrf	0x10
80029286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002928a:	10 9c       	mov	r12,r8
8002928c:	2f fd       	sub	sp,-4
8002928e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029292 <cpu_irq_is_enabled_flags>:
80029292:	eb cd 40 80 	pushm	r7,lr
80029296:	1a 97       	mov	r7,sp
80029298:	20 1d       	sub	sp,4
8002929a:	ef 4c ff fc 	st.w	r7[-4],r12
8002929e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292a2:	e6 18 00 01 	andh	r8,0x1,COH
800292a6:	5f 08       	sreq	r8
800292a8:	5c 58       	castu.b	r8
800292aa:	10 9c       	mov	r12,r8
800292ac:	2f fd       	sub	sp,-4
800292ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800292b2 <cpu_irq_restore>:
800292b2:	eb cd 40 80 	pushm	r7,lr
800292b6:	1a 97       	mov	r7,sp
800292b8:	20 1d       	sub	sp,4
800292ba:	ef 4c ff fc 	st.w	r7[-4],r12
800292be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292c2:	e3 b8 00 00 	mtsr	0x0,r8
800292c6:	2f fd       	sub	sp,-4
800292c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800292cc <twim_master_interrupt_handler>:
800292cc:	eb cd 40 c0 	pushm	r6-r7,lr
800292d0:	1a 97       	mov	r7,sp
800292d2:	20 1d       	sub	sp,4
800292d4:	4d 96       	lddpc	r6,80029438 <twim_master_interrupt_handler+0x16c>
800292d6:	1e 26       	rsub	r6,pc
800292d8:	ec f8 00 40 	ld.w	r8,r6[64]
800292dc:	70 08       	ld.w	r8,r8[0x0]
800292de:	70 79       	ld.w	r9,r8[0x1c]
800292e0:	ec f8 01 04 	ld.w	r8,r6[260]
800292e4:	70 08       	ld.w	r8,r8[0x0]
800292e6:	f3 e8 00 08 	and	r8,r9,r8
800292ea:	ef 48 ff fc 	st.w	r7[-4],r8
800292ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292f2:	e2 18 07 00 	andl	r8,0x700,COH
800292f6:	c2 30       	breq	8002933c <twim_master_interrupt_handler+0x70>
800292f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292fc:	e2 18 03 00 	andl	r8,0x300,COH
80029300:	c0 30       	breq	80029306 <twim_master_interrupt_handler+0x3a>
80029302:	3f c8       	mov	r8,-4
80029304:	c0 28       	rjmp	80029308 <twim_master_interrupt_handler+0x3c>
80029306:	3f e8       	mov	r8,-2
80029308:	ec f9 00 78 	ld.w	r9,r6[120]
8002930c:	93 08       	st.w	r9[0x0],r8
8002930e:	ec f8 00 40 	ld.w	r8,r6[64]
80029312:	70 09       	ld.w	r9,r8[0x0]
80029314:	72 38       	ld.w	r8,r9[0xc]
80029316:	30 0a       	mov	r10,0
80029318:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002931c:	93 38       	st.w	r9[0xc],r8
8002931e:	ec f8 00 40 	ld.w	r8,r6[64]
80029322:	70 08       	ld.w	r8,r8[0x0]
80029324:	3f f9       	mov	r9,-1
80029326:	91 b9       	st.w	r8[0x2c],r9
80029328:	ec f8 00 40 	ld.w	r8,r6[64]
8002932c:	70 08       	ld.w	r8,r8[0x0]
8002932e:	3f f9       	mov	r9,-1
80029330:	91 99       	st.w	r8[0x24],r9
80029332:	ec f9 00 b8 	ld.w	r9,r6[184]
80029336:	30 08       	mov	r8,0
80029338:	b2 88       	st.b	r9[0x0],r8
8002933a:	c7 a8       	rjmp	8002942e <twim_master_interrupt_handler+0x162>
8002933c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029340:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029344:	5c 58       	castu.b	r8
80029346:	c2 d0       	breq	800293a0 <twim_master_interrupt_handler+0xd4>
80029348:	ec f8 00 bc 	ld.w	r8,r6[188]
8002934c:	70 09       	ld.w	r9,r8[0x0]
8002934e:	ec f8 00 40 	ld.w	r8,r6[64]
80029352:	70 08       	ld.w	r8,r8[0x0]
80029354:	70 58       	ld.w	r8,r8[0x14]
80029356:	5c 58       	castu.b	r8
80029358:	b2 88       	st.b	r9[0x0],r8
8002935a:	ec f8 00 bc 	ld.w	r8,r6[188]
8002935e:	70 08       	ld.w	r8,r8[0x0]
80029360:	f0 c9 ff ff 	sub	r9,r8,-1
80029364:	ec f8 00 bc 	ld.w	r8,r6[188]
80029368:	91 09       	st.w	r8[0x0],r9
8002936a:	ec f8 01 50 	ld.w	r8,r6[336]
8002936e:	70 08       	ld.w	r8,r8[0x0]
80029370:	f0 c9 00 01 	sub	r9,r8,1
80029374:	ec f8 01 50 	ld.w	r8,r6[336]
80029378:	91 09       	st.w	r8[0x0],r9
8002937a:	ec f8 01 50 	ld.w	r8,r6[336]
8002937e:	70 08       	ld.w	r8,r8[0x0]
80029380:	58 08       	cp.w	r8,0
80029382:	c5 61       	brne	8002942e <twim_master_interrupt_handler+0x162>
80029384:	ec f8 00 40 	ld.w	r8,r6[64]
80029388:	70 08       	ld.w	r8,r8[0x0]
8002938a:	30 19       	mov	r9,1
8002938c:	91 99       	st.w	r8[0x24],r9
8002938e:	ec f9 00 b8 	ld.w	r9,r6[184]
80029392:	30 08       	mov	r8,0
80029394:	b2 88       	st.b	r9[0x0],r8
80029396:	ec f8 00 78 	ld.w	r8,r6[120]
8002939a:	30 19       	mov	r9,1
8002939c:	91 09       	st.w	r8[0x0],r9
8002939e:	c4 88       	rjmp	8002942e <twim_master_interrupt_handler+0x162>
800293a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293a4:	e2 18 00 02 	andl	r8,0x2,COH
800293a8:	c4 30       	breq	8002942e <twim_master_interrupt_handler+0x162>
800293aa:	ec f8 00 88 	ld.w	r8,r6[136]
800293ae:	70 08       	ld.w	r8,r8[0x0]
800293b0:	58 08       	cp.w	r8,0
800293b2:	c0 b1       	brne	800293c8 <twim_master_interrupt_handler+0xfc>
800293b4:	ec f8 00 40 	ld.w	r8,r6[64]
800293b8:	70 08       	ld.w	r8,r8[0x0]
800293ba:	30 29       	mov	r9,2
800293bc:	91 99       	st.w	r8[0x24],r9
800293be:	ec f9 00 b8 	ld.w	r9,r6[184]
800293c2:	30 08       	mov	r8,0
800293c4:	b2 88       	st.b	r9[0x0],r8
800293c6:	c3 48       	rjmp	8002942e <twim_master_interrupt_handler+0x162>
800293c8:	ec f8 00 40 	ld.w	r8,r6[64]
800293cc:	70 0a       	ld.w	r10,r8[0x0]
800293ce:	ec f8 00 90 	ld.w	r8,r6[144]
800293d2:	70 08       	ld.w	r8,r8[0x0]
800293d4:	11 89       	ld.ub	r9,r8[0x0]
800293d6:	5c 59       	castu.b	r9
800293d8:	95 69       	st.w	r10[0x18],r9
800293da:	f0 c9 ff ff 	sub	r9,r8,-1
800293de:	ec f8 00 90 	ld.w	r8,r6[144]
800293e2:	91 09       	st.w	r8[0x0],r9
800293e4:	ec f8 00 88 	ld.w	r8,r6[136]
800293e8:	70 08       	ld.w	r8,r8[0x0]
800293ea:	f0 c9 00 01 	sub	r9,r8,1
800293ee:	ec f8 00 88 	ld.w	r8,r6[136]
800293f2:	91 09       	st.w	r8[0x0],r9
800293f4:	ec f8 00 88 	ld.w	r8,r6[136]
800293f8:	70 08       	ld.w	r8,r8[0x0]
800293fa:	58 08       	cp.w	r8,0
800293fc:	c1 91       	brne	8002942e <twim_master_interrupt_handler+0x162>
800293fe:	ec f8 00 b8 	ld.w	r8,r6[184]
80029402:	11 88       	ld.ub	r8,r8[0x0]
80029404:	5c 58       	castu.b	r8
80029406:	c1 40       	breq	8002942e <twim_master_interrupt_handler+0x162>
80029408:	ec f9 00 b8 	ld.w	r9,r6[184]
8002940c:	30 08       	mov	r8,0
8002940e:	b2 88       	st.b	r9[0x0],r8
80029410:	ec f8 02 04 	ld.w	r8,r6[516]
80029414:	70 08       	ld.w	r8,r8[0x0]
80029416:	70 49       	ld.w	r9,r8[0x10]
80029418:	ec f8 00 88 	ld.w	r8,r6[136]
8002941c:	91 09       	st.w	r8[0x0],r9
8002941e:	ec f8 02 04 	ld.w	r8,r6[516]
80029422:	70 08       	ld.w	r8,r8[0x0]
80029424:	70 38       	ld.w	r8,r8[0xc]
80029426:	10 99       	mov	r9,r8
80029428:	ec f8 00 90 	ld.w	r8,r6[144]
8002942c:	91 09       	st.w	r8[0x0],r9
8002942e:	2f fd       	sub	sp,-4
80029430:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029434:	d6 03       	rete
80029436:	00 00       	add	r0,r0
80029438:	80 02       	ld.sh	r2,r0[0x0]
8002943a:	91 5a       	st.w	r8[0x14],r10

8002943c <twim_master_interrupt_handler2>:
8002943c:	eb cd 40 c0 	pushm	r6-r7,lr
80029440:	1a 97       	mov	r7,sp
80029442:	20 1d       	sub	sp,4
80029444:	4d 76       	lddpc	r6,800295a0 <twim_master_interrupt_handler2+0x164>
80029446:	1e 26       	rsub	r6,pc
80029448:	ec f8 00 40 	ld.w	r8,r6[64]
8002944c:	70 08       	ld.w	r8,r8[0x0]
8002944e:	70 79       	ld.w	r9,r8[0x1c]
80029450:	ec f8 01 04 	ld.w	r8,r6[260]
80029454:	70 08       	ld.w	r8,r8[0x0]
80029456:	f3 e8 00 08 	and	r8,r9,r8
8002945a:	ef 48 ff fc 	st.w	r7[-4],r8
8002945e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029462:	e2 18 07 00 	andl	r8,0x700,COH
80029466:	c2 30       	breq	800294ac <twim_master_interrupt_handler2+0x70>
80029468:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002946c:	e2 18 03 00 	andl	r8,0x300,COH
80029470:	c0 30       	breq	80029476 <twim_master_interrupt_handler2+0x3a>
80029472:	3f c8       	mov	r8,-4
80029474:	c0 28       	rjmp	80029478 <twim_master_interrupt_handler2+0x3c>
80029476:	3f e8       	mov	r8,-2
80029478:	ec f9 00 78 	ld.w	r9,r6[120]
8002947c:	93 08       	st.w	r9[0x0],r8
8002947e:	ec f8 00 40 	ld.w	r8,r6[64]
80029482:	70 09       	ld.w	r9,r8[0x0]
80029484:	72 38       	ld.w	r8,r9[0xc]
80029486:	30 0a       	mov	r10,0
80029488:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002948c:	93 38       	st.w	r9[0xc],r8
8002948e:	ec f8 00 40 	ld.w	r8,r6[64]
80029492:	70 08       	ld.w	r8,r8[0x0]
80029494:	3f f9       	mov	r9,-1
80029496:	91 b9       	st.w	r8[0x2c],r9
80029498:	ec f8 00 40 	ld.w	r8,r6[64]
8002949c:	70 08       	ld.w	r8,r8[0x0]
8002949e:	3f f9       	mov	r9,-1
800294a0:	91 99       	st.w	r8[0x24],r9
800294a2:	ec f9 00 b8 	ld.w	r9,r6[184]
800294a6:	30 08       	mov	r8,0
800294a8:	b2 88       	st.b	r9[0x0],r8
800294aa:	c7 68       	rjmp	80029596 <twim_master_interrupt_handler2+0x15a>
800294ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800294b4:	5c 58       	castu.b	r8
800294b6:	c2 90       	breq	80029508 <twim_master_interrupt_handler2+0xcc>
800294b8:	ec f8 00 bc 	ld.w	r8,r6[188]
800294bc:	70 09       	ld.w	r9,r8[0x0]
800294be:	ec f8 00 40 	ld.w	r8,r6[64]
800294c2:	70 08       	ld.w	r8,r8[0x0]
800294c4:	70 58       	ld.w	r8,r8[0x14]
800294c6:	5c 58       	castu.b	r8
800294c8:	b2 88       	st.b	r9[0x0],r8
800294ca:	ec f8 00 bc 	ld.w	r8,r6[188]
800294ce:	70 08       	ld.w	r8,r8[0x0]
800294d0:	f0 c9 ff ff 	sub	r9,r8,-1
800294d4:	ec f8 00 bc 	ld.w	r8,r6[188]
800294d8:	91 09       	st.w	r8[0x0],r9
800294da:	ec f8 01 50 	ld.w	r8,r6[336]
800294de:	70 08       	ld.w	r8,r8[0x0]
800294e0:	f0 c9 00 01 	sub	r9,r8,1
800294e4:	ec f8 01 50 	ld.w	r8,r6[336]
800294e8:	91 09       	st.w	r8[0x0],r9
800294ea:	ec f8 01 50 	ld.w	r8,r6[336]
800294ee:	70 08       	ld.w	r8,r8[0x0]
800294f0:	58 08       	cp.w	r8,0
800294f2:	c5 21       	brne	80029596 <twim_master_interrupt_handler2+0x15a>
800294f4:	ec f8 00 40 	ld.w	r8,r6[64]
800294f8:	70 08       	ld.w	r8,r8[0x0]
800294fa:	30 19       	mov	r9,1
800294fc:	91 99       	st.w	r8[0x24],r9
800294fe:	ec f9 00 b8 	ld.w	r9,r6[184]
80029502:	30 08       	mov	r8,0
80029504:	b2 88       	st.b	r9[0x0],r8
80029506:	c4 88       	rjmp	80029596 <twim_master_interrupt_handler2+0x15a>
80029508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002950c:	e2 18 00 02 	andl	r8,0x2,COH
80029510:	c4 30       	breq	80029596 <twim_master_interrupt_handler2+0x15a>
80029512:	ec f8 00 88 	ld.w	r8,r6[136]
80029516:	70 08       	ld.w	r8,r8[0x0]
80029518:	58 08       	cp.w	r8,0
8002951a:	c0 b1       	brne	80029530 <twim_master_interrupt_handler2+0xf4>
8002951c:	ec f8 00 40 	ld.w	r8,r6[64]
80029520:	70 08       	ld.w	r8,r8[0x0]
80029522:	30 29       	mov	r9,2
80029524:	91 99       	st.w	r8[0x24],r9
80029526:	ec f9 00 b8 	ld.w	r9,r6[184]
8002952a:	30 08       	mov	r8,0
8002952c:	b2 88       	st.b	r9[0x0],r8
8002952e:	c3 48       	rjmp	80029596 <twim_master_interrupt_handler2+0x15a>
80029530:	ec f8 00 40 	ld.w	r8,r6[64]
80029534:	70 0a       	ld.w	r10,r8[0x0]
80029536:	ec f8 00 90 	ld.w	r8,r6[144]
8002953a:	70 08       	ld.w	r8,r8[0x0]
8002953c:	11 89       	ld.ub	r9,r8[0x0]
8002953e:	5c 59       	castu.b	r9
80029540:	95 69       	st.w	r10[0x18],r9
80029542:	f0 c9 ff ff 	sub	r9,r8,-1
80029546:	ec f8 00 90 	ld.w	r8,r6[144]
8002954a:	91 09       	st.w	r8[0x0],r9
8002954c:	ec f8 00 88 	ld.w	r8,r6[136]
80029550:	70 08       	ld.w	r8,r8[0x0]
80029552:	f0 c9 00 01 	sub	r9,r8,1
80029556:	ec f8 00 88 	ld.w	r8,r6[136]
8002955a:	91 09       	st.w	r8[0x0],r9
8002955c:	ec f8 00 88 	ld.w	r8,r6[136]
80029560:	70 08       	ld.w	r8,r8[0x0]
80029562:	58 08       	cp.w	r8,0
80029564:	c1 91       	brne	80029596 <twim_master_interrupt_handler2+0x15a>
80029566:	ec f8 00 b8 	ld.w	r8,r6[184]
8002956a:	11 88       	ld.ub	r8,r8[0x0]
8002956c:	5c 58       	castu.b	r8
8002956e:	c1 40       	breq	80029596 <twim_master_interrupt_handler2+0x15a>
80029570:	ec f9 00 b8 	ld.w	r9,r6[184]
80029574:	30 08       	mov	r8,0
80029576:	b2 88       	st.b	r9[0x0],r8
80029578:	ec f8 02 04 	ld.w	r8,r6[516]
8002957c:	70 08       	ld.w	r8,r8[0x0]
8002957e:	70 49       	ld.w	r9,r8[0x10]
80029580:	ec f8 00 88 	ld.w	r8,r6[136]
80029584:	91 09       	st.w	r8[0x0],r9
80029586:	ec f8 02 04 	ld.w	r8,r6[516]
8002958a:	70 08       	ld.w	r8,r8[0x0]
8002958c:	70 38       	ld.w	r8,r8[0xc]
8002958e:	10 99       	mov	r9,r8
80029590:	ec f8 00 90 	ld.w	r8,r6[144]
80029594:	91 09       	st.w	r8[0x0],r9
80029596:	2f fd       	sub	sp,-4
80029598:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002959c:	d6 03       	rete
8002959e:	00 00       	add	r0,r0
800295a0:	80 02       	ld.sh	r2,r0[0x0]
800295a2:	92 ca       	ld.uh	r10,r9[0x8]

800295a4 <twim_set_speed>:
800295a4:	eb cd 40 80 	pushm	r7,lr
800295a8:	1a 97       	mov	r7,sp
800295aa:	20 5d       	sub	sp,20
800295ac:	ef 4c ff f4 	st.w	r7[-12],r12
800295b0:	ef 4b ff f0 	st.w	r7[-16],r11
800295b4:	ef 4a ff ec 	st.w	r7[-20],r10
800295b8:	30 08       	mov	r8,0
800295ba:	ef 68 ff ff 	st.b	r7[-1],r8
800295be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800295c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800295c6:	f0 09 0d 08 	divu	r8,r8,r9
800295ca:	a1 98       	lsr	r8,0x1
800295cc:	ef 48 ff f8 	st.w	r7[-8],r8
800295d0:	c0 b8       	rjmp	800295e6 <twim_set_speed+0x42>
800295d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800295d6:	2f f8       	sub	r8,-1
800295d8:	ef 68 ff ff 	st.b	r7[-1],r8
800295dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800295e0:	a1 98       	lsr	r8,0x1
800295e2:	ef 48 ff f8 	st.w	r7[-8],r8
800295e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800295ea:	e0 48 00 ff 	cp.w	r8,255
800295ee:	e0 88 00 09 	brls	80029600 <twim_set_speed+0x5c>
800295f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800295f6:	30 78       	mov	r8,7
800295f8:	f0 09 18 00 	cp.b	r9,r8
800295fc:	fe 98 ff eb 	brls	800295d2 <twim_set_speed+0x2e>
80029600:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029604:	30 78       	mov	r8,7
80029606:	f0 09 18 00 	cp.b	r9,r8
8002960a:	e0 88 00 04 	brls	80029612 <twim_set_speed+0x6e>
8002960e:	3f 88       	mov	r8,-8
80029610:	c1 a8       	rjmp	80029644 <twim_set_speed+0xa0>
80029612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029616:	f0 09 16 01 	lsr	r9,r8,0x1
8002961a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002961e:	a1 98       	lsr	r8,0x1
80029620:	ee fa ff f8 	ld.w	r10,r7[-8]
80029624:	f4 08 01 08 	sub	r8,r10,r8
80029628:	a9 68       	lsl	r8,0x8
8002962a:	10 49       	or	r9,r8
8002962c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029630:	bd 68       	lsl	r8,0x1c
80029632:	10 49       	or	r9,r8
80029634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029638:	b1 68       	lsl	r8,0x10
8002963a:	10 49       	or	r9,r8
8002963c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029640:	91 19       	st.w	r8[0x4],r9
80029642:	30 08       	mov	r8,0
80029644:	10 9c       	mov	r12,r8
80029646:	2f bd       	sub	sp,-20
80029648:	e3 cd 80 80 	ldm	sp++,r7,pc

8002964c <twim_master_init>:
8002964c:	eb cd 40 c0 	pushm	r6-r7,lr
80029650:	1a 97       	mov	r7,sp
80029652:	20 4d       	sub	sp,16
80029654:	4c 06       	lddpc	r6,80029754 <twim_master_init+0x108>
80029656:	1e 26       	rsub	r6,pc
80029658:	ef 4c ff f4 	st.w	r7[-12],r12
8002965c:	ef 4b ff f0 	st.w	r7[-16],r11
80029660:	e1 b8 00 00 	mfsr	r8,0x0
80029664:	10 9c       	mov	r12,r8
80029666:	c1 6e       	rcall	80029292 <cpu_irq_is_enabled_flags>
80029668:	18 98       	mov	r8,r12
8002966a:	ef 68 ff fb 	st.b	r7[-5],r8
8002966e:	ec f8 00 78 	ld.w	r8,r6[120]
80029672:	30 09       	mov	r9,0
80029674:	91 09       	st.w	r8[0x0],r9
80029676:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002967a:	30 08       	mov	r8,0
8002967c:	f0 09 18 00 	cp.b	r9,r8
80029680:	c0 20       	breq	80029684 <twim_master_init+0x38>
80029682:	d3 03       	ssrf	0x10
80029684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029688:	3f f9       	mov	r9,-1
8002968a:	91 99       	st.w	r8[0x24],r9
8002968c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029690:	30 19       	mov	r9,1
80029692:	91 09       	st.w	r8[0x0],r9
80029694:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029698:	e0 69 00 80 	mov	r9,128
8002969c:	91 09       	st.w	r8[0x0],r9
8002969e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800296a2:	30 08       	mov	r8,0
800296a4:	f0 09 18 00 	cp.b	r9,r8
800296a8:	c0 20       	breq	800296ac <twim_master_init+0x60>
800296aa:	d5 03       	csrf	0x10
800296ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296b0:	3f f9       	mov	r9,-1
800296b2:	91 b9       	st.w	r8[0x2c],r9
800296b4:	fe b0 fd e0 	rcall	80029274 <cpu_irq_save>
800296b8:	18 98       	mov	r8,r12
800296ba:	ef 48 ff fc 	st.w	r7[-4],r8
800296be:	30 1a       	mov	r10,1
800296c0:	e0 6b 03 20 	mov	r11,800
800296c4:	fe cc 03 f8 	sub	r12,pc,1016
800296c8:	f0 16 00 3a 	mcall	r6[232]
800296cc:	30 1a       	mov	r10,1
800296ce:	e0 6b 03 40 	mov	r11,832
800296d2:	fe cc 02 96 	sub	r12,pc,662
800296d6:	f0 16 00 3a 	mcall	r6[232]
800296da:	ee fc ff fc 	ld.w	r12,r7[-4]
800296de:	fe b0 fd ea 	rcall	800292b2 <cpu_irq_restore>
800296e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800296e6:	f1 38 00 0c 	ld.ub	r8,r8[12]
800296ea:	58 08       	cp.w	r8,0
800296ec:	c0 90       	breq	800296fe <twim_master_init+0xb2>
800296ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296f2:	31 09       	mov	r9,16
800296f4:	91 09       	st.w	r8[0x0],r9
800296f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296fa:	3f f9       	mov	r9,-1
800296fc:	91 29       	st.w	r8[0x8],r9
800296fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029702:	70 09       	ld.w	r9,r8[0x0]
80029704:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029708:	70 18       	ld.w	r8,r8[0x4]
8002970a:	12 9a       	mov	r10,r9
8002970c:	10 9b       	mov	r11,r8
8002970e:	ee fc ff f4 	ld.w	r12,r7[-12]
80029712:	f0 16 01 2f 	mcall	r6[1212]
80029716:	18 98       	mov	r8,r12
80029718:	5b 88       	cp.w	r8,-8
8002971a:	c0 31       	brne	80029720 <twim_master_init+0xd4>
8002971c:	3f 88       	mov	r8,-8
8002971e:	c1 68       	rjmp	8002974a <twim_master_init+0xfe>
80029720:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029724:	70 28       	ld.w	r8,r8[0x8]
80029726:	10 9b       	mov	r11,r8
80029728:	ee fc ff f4 	ld.w	r12,r7[-12]
8002972c:	f0 16 01 07 	mcall	r6[1052]
80029730:	ec f8 00 78 	ld.w	r8,r6[120]
80029734:	70 08       	ld.w	r8,r8[0x0]
80029736:	5b c8       	cp.w	r8,-4
80029738:	c0 60       	breq	80029744 <twim_master_init+0xf8>
8002973a:	ec f8 00 78 	ld.w	r8,r6[120]
8002973e:	70 08       	ld.w	r8,r8[0x0]
80029740:	5b e8       	cp.w	r8,-2
80029742:	c0 31       	brne	80029748 <twim_master_init+0xfc>
80029744:	3f f8       	mov	r8,-1
80029746:	c0 28       	rjmp	8002974a <twim_master_init+0xfe>
80029748:	30 08       	mov	r8,0
8002974a:	10 9c       	mov	r12,r8
8002974c:	2f cd       	sub	sp,-16
8002974e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029752:	00 00       	add	r0,r0
80029754:	80 02       	ld.sh	r2,r0[0x0]
80029756:	94 da       	ld.uh	r10,r10[0xa]

80029758 <twim_disable_interrupt>:
80029758:	eb cd 40 c0 	pushm	r6-r7,lr
8002975c:	1a 97       	mov	r7,sp
8002975e:	20 2d       	sub	sp,8
80029760:	48 f6       	lddpc	r6,8002979c <twim_disable_interrupt+0x44>
80029762:	1e 26       	rsub	r6,pc
80029764:	ef 4c ff f8 	st.w	r7[-8],r12
80029768:	e1 b8 00 00 	mfsr	r8,0x0
8002976c:	10 9c       	mov	r12,r8
8002976e:	fe b0 fd 92 	rcall	80029292 <cpu_irq_is_enabled_flags>
80029772:	18 98       	mov	r8,r12
80029774:	ef 68 ff ff 	st.b	r7[-1],r8
80029778:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002977c:	30 08       	mov	r8,0
8002977e:	f0 09 18 00 	cp.b	r9,r8
80029782:	c0 20       	breq	80029786 <twim_disable_interrupt+0x2e>
80029784:	d3 03       	ssrf	0x10
80029786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002978a:	3f f9       	mov	r9,-1
8002978c:	91 99       	st.w	r8[0x24],r9
8002978e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029792:	3f f9       	mov	r9,-1
80029794:	91 b9       	st.w	r8[0x2c],r9
80029796:	2f ed       	sub	sp,-8
80029798:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002979c:	80 02       	ld.sh	r2,r0[0x0]
8002979e:	95 e6       	st.w	r10[0x38],r6

800297a0 <twim_probe>:
800297a0:	eb cd 40 c0 	pushm	r6-r7,lr
800297a4:	1a 97       	mov	r7,sp
800297a6:	20 3d       	sub	sp,12
800297a8:	48 c6       	lddpc	r6,800297d8 <twim_probe+0x38>
800297aa:	1e 26       	rsub	r6,pc
800297ac:	ef 4c ff f8 	st.w	r7[-8],r12
800297b0:	ef 4b ff f4 	st.w	r7[-12],r11
800297b4:	30 08       	mov	r8,0
800297b6:	ef 68 ff fc 	st.b	r7[-4],r8
800297ba:	ee cb 00 04 	sub	r11,r7,4
800297be:	30 08       	mov	r8,0
800297c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800297c4:	30 0a       	mov	r10,0
800297c6:	ee fc ff f8 	ld.w	r12,r7[-8]
800297ca:	f0 16 00 35 	mcall	r6[212]
800297ce:	18 98       	mov	r8,r12
800297d0:	10 9c       	mov	r12,r8
800297d2:	2f dd       	sub	sp,-12
800297d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800297d8:	80 02       	ld.sh	r2,r0[0x0]
800297da:	96 2e       	ld.sh	lr,r11[0x4]

800297dc <twim_read_packet>:
800297dc:	eb cd 40 c0 	pushm	r6-r7,lr
800297e0:	1a 97       	mov	r7,sp
800297e2:	20 2d       	sub	sp,8
800297e4:	4e 76       	lddpc	r6,80029980 <twim_read_packet+0x1a4>
800297e6:	1e 26       	rsub	r6,pc
800297e8:	ef 4c ff fc 	st.w	r7[-4],r12
800297ec:	ef 4b ff f8 	st.w	r7[-8],r11
800297f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297f4:	30 29       	mov	r9,2
800297f6:	91 09       	st.w	r8[0x0],r9
800297f8:	ec f8 00 40 	ld.w	r8,r6[64]
800297fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029800:	91 09       	st.w	r8[0x0],r9
80029802:	ec f8 00 40 	ld.w	r8,r6[64]
80029806:	70 08       	ld.w	r8,r8[0x0]
80029808:	10 9c       	mov	r12,r8
8002980a:	f0 16 00 7f 	mcall	r6[508]
8002980e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029812:	70 38       	ld.w	r8,r8[0xc]
80029814:	10 99       	mov	r9,r8
80029816:	ec f8 00 bc 	ld.w	r8,r6[188]
8002981a:	91 09       	st.w	r8[0x0],r9
8002981c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029820:	70 49       	ld.w	r9,r8[0x10]
80029822:	ec f8 01 50 	ld.w	r8,r6[336]
80029826:	91 09       	st.w	r8[0x0],r9
80029828:	ec f9 00 b8 	ld.w	r9,r6[184]
8002982c:	30 08       	mov	r8,0
8002982e:	b2 88       	st.b	r9[0x0],r8
80029830:	ec f8 00 78 	ld.w	r8,r6[120]
80029834:	30 09       	mov	r9,0
80029836:	91 09       	st.w	r8[0x0],r9
80029838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002983c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029840:	58 08       	cp.w	r8,0
80029842:	c5 60       	breq	800298ee <twim_read_packet+0x112>
80029844:	ec f8 00 40 	ld.w	r8,r6[64]
80029848:	70 08       	ld.w	r8,r8[0x0]
8002984a:	30 19       	mov	r9,1
8002984c:	91 09       	st.w	r8[0x0],r9
8002984e:	ec f8 00 40 	ld.w	r8,r6[64]
80029852:	70 08       	ld.w	r8,r8[0x0]
80029854:	e0 69 00 80 	mov	r9,128
80029858:	91 09       	st.w	r8[0x0],r9
8002985a:	ec f8 00 40 	ld.w	r8,r6[64]
8002985e:	70 08       	ld.w	r8,r8[0x0]
80029860:	30 29       	mov	r9,2
80029862:	91 09       	st.w	r8[0x0],r9
80029864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029868:	2f c8       	sub	r8,-4
8002986a:	10 99       	mov	r9,r8
8002986c:	ec f8 00 90 	ld.w	r8,r6[144]
80029870:	91 09       	st.w	r8[0x0],r9
80029872:	ec f8 00 90 	ld.w	r8,r6[144]
80029876:	70 09       	ld.w	r9,r8[0x0]
80029878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002987c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029880:	f0 08 11 04 	rsub	r8,r8,4
80029884:	10 09       	add	r9,r8
80029886:	ec f8 00 90 	ld.w	r8,r6[144]
8002988a:	91 09       	st.w	r8[0x0],r9
8002988c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029890:	f1 38 00 08 	ld.ub	r8,r8[8]
80029894:	10 99       	mov	r9,r8
80029896:	ec f8 00 88 	ld.w	r8,r6[136]
8002989a:	91 09       	st.w	r8[0x0],r9
8002989c:	ec f8 01 04 	ld.w	r8,r6[260]
800298a0:	e0 69 07 03 	mov	r9,1795
800298a4:	91 09       	st.w	r8[0x0],r9
800298a6:	ec f8 00 40 	ld.w	r8,r6[64]
800298aa:	70 08       	ld.w	r8,r8[0x0]
800298ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800298b0:	72 09       	ld.w	r9,r9[0x0]
800298b2:	f2 0a 15 01 	lsl	r10,r9,0x1
800298b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800298ba:	f3 39 00 08 	ld.ub	r9,r9[8]
800298be:	b1 69       	lsl	r9,0x10
800298c0:	f5 e9 10 09 	or	r9,r10,r9
800298c4:	e8 19 a0 00 	orl	r9,0xa000
800298c8:	91 39       	st.w	r8[0xc],r9
800298ca:	ec f8 00 40 	ld.w	r8,r6[64]
800298ce:	70 08       	ld.w	r8,r8[0x0]
800298d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800298d4:	72 09       	ld.w	r9,r9[0x0]
800298d6:	f2 0a 15 01 	lsl	r10,r9,0x1
800298da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800298de:	72 49       	ld.w	r9,r9[0x10]
800298e0:	b1 69       	lsl	r9,0x10
800298e2:	f5 e9 10 09 	or	r9,r10,r9
800298e6:	e8 19 e0 01 	orl	r9,0xe001
800298ea:	91 49       	st.w	r8[0x10],r9
800298ec:	c1 b8       	rjmp	80029922 <twim_read_packet+0x146>
800298ee:	ec f8 00 88 	ld.w	r8,r6[136]
800298f2:	30 09       	mov	r9,0
800298f4:	91 09       	st.w	r8[0x0],r9
800298f6:	ec f8 01 04 	ld.w	r8,r6[260]
800298fa:	e0 69 07 01 	mov	r9,1793
800298fe:	91 09       	st.w	r8[0x0],r9
80029900:	ec f8 00 40 	ld.w	r8,r6[64]
80029904:	70 08       	ld.w	r8,r8[0x0]
80029906:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002990a:	72 09       	ld.w	r9,r9[0x0]
8002990c:	f2 0a 15 01 	lsl	r10,r9,0x1
80029910:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029914:	72 49       	ld.w	r9,r9[0x10]
80029916:	b1 69       	lsl	r9,0x10
80029918:	f5 e9 10 09 	or	r9,r10,r9
8002991c:	e8 19 e0 01 	orl	r9,0xe001
80029920:	91 39       	st.w	r8[0xc],r9
80029922:	ec f8 00 40 	ld.w	r8,r6[64]
80029926:	70 08       	ld.w	r8,r8[0x0]
80029928:	ec f9 01 04 	ld.w	r9,r6[260]
8002992c:	72 09       	ld.w	r9,r9[0x0]
8002992e:	91 89       	st.w	r8[0x20],r9
80029930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029934:	30 19       	mov	r9,1
80029936:	91 09       	st.w	r8[0x0],r9
80029938:	d5 03       	csrf	0x10
8002993a:	c0 38       	rjmp	80029940 <twim_read_packet+0x164>
8002993c:	fe cf ff fc 	sub	pc,pc,-4
80029940:	ec f8 00 78 	ld.w	r8,r6[120]
80029944:	70 08       	ld.w	r8,r8[0x0]
80029946:	58 08       	cp.w	r8,0
80029948:	c0 61       	brne	80029954 <twim_read_packet+0x178>
8002994a:	f0 16 00 6f 	mcall	r6[444]
8002994e:	18 98       	mov	r8,r12
80029950:	58 08       	cp.w	r8,0
80029952:	cf 50       	breq	8002993c <twim_read_packet+0x160>
80029954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029958:	30 29       	mov	r9,2
8002995a:	91 09       	st.w	r8[0x0],r9
8002995c:	ec f8 00 78 	ld.w	r8,r6[120]
80029960:	70 08       	ld.w	r8,r8[0x0]
80029962:	5b c8       	cp.w	r8,-4
80029964:	c0 60       	breq	80029970 <twim_read_packet+0x194>
80029966:	ec f8 00 78 	ld.w	r8,r6[120]
8002996a:	70 08       	ld.w	r8,r8[0x0]
8002996c:	5b e8       	cp.w	r8,-2
8002996e:	c0 31       	brne	80029974 <twim_read_packet+0x198>
80029970:	3f f8       	mov	r8,-1
80029972:	c0 28       	rjmp	80029976 <twim_read_packet+0x19a>
80029974:	30 08       	mov	r8,0
80029976:	10 9c       	mov	r12,r8
80029978:	2f ed       	sub	sp,-8
8002997a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002997e:	00 00       	add	r0,r0
80029980:	80 02       	ld.sh	r2,r0[0x0]
80029982:	96 6a       	ld.sh	r10,r11[0xc]

80029984 <twim_read>:
80029984:	eb cd 40 c0 	pushm	r6-r7,lr
80029988:	1a 97       	mov	r7,sp
8002998a:	20 5d       	sub	sp,20
8002998c:	4c c6       	lddpc	r6,80029abc <twim_read+0x138>
8002998e:	1e 26       	rsub	r6,pc
80029990:	ef 4c ff fc 	st.w	r7[-4],r12
80029994:	ef 4b ff f8 	st.w	r7[-8],r11
80029998:	ef 4a ff f4 	st.w	r7[-12],r10
8002999c:	ef 49 ff f0 	st.w	r7[-16],r9
800299a0:	ef 68 ff ec 	st.b	r7[-20],r8
800299a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299a8:	30 19       	mov	r9,1
800299aa:	91 09       	st.w	r8[0x0],r9
800299ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299b0:	e0 69 00 80 	mov	r9,128
800299b4:	91 09       	st.w	r8[0x0],r9
800299b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299ba:	30 29       	mov	r9,2
800299bc:	91 09       	st.w	r8[0x0],r9
800299be:	ec f8 00 40 	ld.w	r8,r6[64]
800299c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800299c6:	91 09       	st.w	r8[0x0],r9
800299c8:	ec f8 00 40 	ld.w	r8,r6[64]
800299cc:	70 08       	ld.w	r8,r8[0x0]
800299ce:	10 9c       	mov	r12,r8
800299d0:	f0 16 00 7f 	mcall	r6[508]
800299d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800299d8:	ec f8 00 bc 	ld.w	r8,r6[188]
800299dc:	91 09       	st.w	r8[0x0],r9
800299de:	ec f8 01 50 	ld.w	r8,r6[336]
800299e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800299e6:	91 09       	st.w	r8[0x0],r9
800299e8:	ec f9 00 b8 	ld.w	r9,r6[184]
800299ec:	30 08       	mov	r8,0
800299ee:	b2 88       	st.b	r9[0x0],r8
800299f0:	ec f8 00 78 	ld.w	r8,r6[120]
800299f4:	30 09       	mov	r9,0
800299f6:	91 09       	st.w	r8[0x0],r9
800299f8:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800299fc:	30 08       	mov	r8,0
800299fe:	f0 09 18 00 	cp.b	r9,r8
80029a02:	c1 a0       	breq	80029a36 <twim_read+0xb2>
80029a04:	ec f8 00 40 	ld.w	r8,r6[64]
80029a08:	70 08       	ld.w	r8,r8[0x0]
80029a0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029a0e:	a1 79       	lsl	r9,0x1
80029a10:	e8 19 a8 00 	orl	r9,0xa800
80029a14:	91 39       	st.w	r8[0xc],r9
80029a16:	ec f8 00 40 	ld.w	r8,r6[64]
80029a1a:	70 08       	ld.w	r8,r8[0x0]
80029a1c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029a20:	f2 0a 15 01 	lsl	r10,r9,0x1
80029a24:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029a28:	b1 69       	lsl	r9,0x10
80029a2a:	f5 e9 10 09 	or	r9,r10,r9
80029a2e:	e8 19 f8 01 	orl	r9,0xf801
80029a32:	91 49       	st.w	r8[0x10],r9
80029a34:	c1 08       	rjmp	80029a54 <twim_read+0xd0>
80029a36:	ec f8 00 40 	ld.w	r8,r6[64]
80029a3a:	70 08       	ld.w	r8,r8[0x0]
80029a3c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029a40:	f2 0a 15 01 	lsl	r10,r9,0x1
80029a44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029a48:	b1 69       	lsl	r9,0x10
80029a4a:	f5 e9 10 09 	or	r9,r10,r9
80029a4e:	e8 19 e0 01 	orl	r9,0xe001
80029a52:	91 39       	st.w	r8[0xc],r9
80029a54:	ec f8 01 04 	ld.w	r8,r6[260]
80029a58:	e0 69 07 01 	mov	r9,1793
80029a5c:	91 09       	st.w	r8[0x0],r9
80029a5e:	ec f8 00 40 	ld.w	r8,r6[64]
80029a62:	70 08       	ld.w	r8,r8[0x0]
80029a64:	ec f9 01 04 	ld.w	r9,r6[260]
80029a68:	72 09       	ld.w	r9,r9[0x0]
80029a6a:	91 89       	st.w	r8[0x20],r9
80029a6c:	ec f8 00 40 	ld.w	r8,r6[64]
80029a70:	70 08       	ld.w	r8,r8[0x0]
80029a72:	30 19       	mov	r9,1
80029a74:	91 09       	st.w	r8[0x0],r9
80029a76:	d5 03       	csrf	0x10
80029a78:	c0 38       	rjmp	80029a7e <twim_read+0xfa>
80029a7a:	fe cf ff fc 	sub	pc,pc,-4
80029a7e:	ec f8 00 78 	ld.w	r8,r6[120]
80029a82:	70 08       	ld.w	r8,r8[0x0]
80029a84:	58 08       	cp.w	r8,0
80029a86:	c0 61       	brne	80029a92 <twim_read+0x10e>
80029a88:	f0 16 00 6f 	mcall	r6[444]
80029a8c:	18 98       	mov	r8,r12
80029a8e:	58 08       	cp.w	r8,0
80029a90:	cf 50       	breq	80029a7a <twim_read+0xf6>
80029a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a96:	30 29       	mov	r9,2
80029a98:	91 09       	st.w	r8[0x0],r9
80029a9a:	ec f8 00 78 	ld.w	r8,r6[120]
80029a9e:	70 08       	ld.w	r8,r8[0x0]
80029aa0:	5b c8       	cp.w	r8,-4
80029aa2:	c0 60       	breq	80029aae <twim_read+0x12a>
80029aa4:	ec f8 00 78 	ld.w	r8,r6[120]
80029aa8:	70 08       	ld.w	r8,r8[0x0]
80029aaa:	5b e8       	cp.w	r8,-2
80029aac:	c0 31       	brne	80029ab2 <twim_read+0x12e>
80029aae:	3f f8       	mov	r8,-1
80029ab0:	c0 28       	rjmp	80029ab4 <twim_read+0x130>
80029ab2:	30 08       	mov	r8,0
80029ab4:	10 9c       	mov	r12,r8
80029ab6:	2f bd       	sub	sp,-20
80029ab8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029abc:	80 02       	ld.sh	r2,r0[0x0]
80029abe:	98 12       	ld.sh	r2,r12[0x2]

80029ac0 <twim_write_packet>:
80029ac0:	eb cd 40 c0 	pushm	r6-r7,lr
80029ac4:	1a 97       	mov	r7,sp
80029ac6:	20 2d       	sub	sp,8
80029ac8:	4f 16       	lddpc	r6,80029c8c <twim_write_packet+0x1cc>
80029aca:	1e 26       	rsub	r6,pc
80029acc:	ef 4c ff fc 	st.w	r7[-4],r12
80029ad0:	ef 4b ff f8 	st.w	r7[-8],r11
80029ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ad8:	30 19       	mov	r9,1
80029ada:	91 09       	st.w	r8[0x0],r9
80029adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ae0:	e0 69 00 80 	mov	r9,128
80029ae4:	91 09       	st.w	r8[0x0],r9
80029ae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029aea:	30 29       	mov	r9,2
80029aec:	91 09       	st.w	r8[0x0],r9
80029aee:	ec f8 00 40 	ld.w	r8,r6[64]
80029af2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029af6:	91 09       	st.w	r8[0x0],r9
80029af8:	ec f8 00 40 	ld.w	r8,r6[64]
80029afc:	70 08       	ld.w	r8,r8[0x0]
80029afe:	10 9c       	mov	r12,r8
80029b00:	f0 16 00 7f 	mcall	r6[508]
80029b04:	ec f8 00 78 	ld.w	r8,r6[120]
80029b08:	30 09       	mov	r9,0
80029b0a:	91 09       	st.w	r8[0x0],r9
80029b0c:	ec f8 01 04 	ld.w	r8,r6[260]
80029b10:	e0 69 07 02 	mov	r9,1794
80029b14:	91 09       	st.w	r8[0x0],r9
80029b16:	ec f9 00 b8 	ld.w	r9,r6[184]
80029b1a:	30 08       	mov	r8,0
80029b1c:	b2 88       	st.b	r9[0x0],r8
80029b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b22:	f1 38 00 08 	ld.ub	r8,r8[8]
80029b26:	58 08       	cp.w	r8,0
80029b28:	c6 40       	breq	80029bf0 <twim_write_packet+0x130>
80029b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b2e:	2f c8       	sub	r8,-4
80029b30:	10 99       	mov	r9,r8
80029b32:	ec f8 00 90 	ld.w	r8,r6[144]
80029b36:	91 09       	st.w	r8[0x0],r9
80029b38:	ec f8 00 90 	ld.w	r8,r6[144]
80029b3c:	70 09       	ld.w	r9,r8[0x0]
80029b3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b42:	f1 38 00 08 	ld.ub	r8,r8[8]
80029b46:	f0 08 11 04 	rsub	r8,r8,4
80029b4a:	10 09       	add	r9,r8
80029b4c:	ec f8 00 90 	ld.w	r8,r6[144]
80029b50:	91 09       	st.w	r8[0x0],r9
80029b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b56:	f1 38 00 08 	ld.ub	r8,r8[8]
80029b5a:	10 99       	mov	r9,r8
80029b5c:	ec f8 00 88 	ld.w	r8,r6[136]
80029b60:	91 09       	st.w	r8[0x0],r9
80029b62:	ec f8 00 40 	ld.w	r8,r6[64]
80029b66:	70 08       	ld.w	r8,r8[0x0]
80029b68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029b6c:	72 09       	ld.w	r9,r9[0x0]
80029b6e:	f2 0a 15 01 	lsl	r10,r9,0x1
80029b72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029b76:	f3 39 00 08 	ld.ub	r9,r9[8]
80029b7a:	b1 69       	lsl	r9,0x10
80029b7c:	f5 e9 10 09 	or	r9,r10,r9
80029b80:	e8 19 a0 00 	orl	r9,0xa000
80029b84:	91 39       	st.w	r8[0xc],r9
80029b86:	ec f9 00 b8 	ld.w	r9,r6[184]
80029b8a:	30 18       	mov	r8,1
80029b8c:	b2 88       	st.b	r9[0x0],r8
80029b8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029b92:	ec f8 02 04 	ld.w	r8,r6[516]
80029b96:	91 09       	st.w	r8[0x0],r9
80029b98:	ec f8 00 40 	ld.w	r8,r6[64]
80029b9c:	70 08       	ld.w	r8,r8[0x0]
80029b9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029ba2:	72 09       	ld.w	r9,r9[0x0]
80029ba4:	f2 0a 15 01 	lsl	r10,r9,0x1
80029ba8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029bac:	72 49       	ld.w	r9,r9[0x10]
80029bae:	b1 69       	lsl	r9,0x10
80029bb0:	f5 e9 10 09 	or	r9,r10,r9
80029bb4:	e8 19 e0 00 	orl	r9,0xe000
80029bb8:	91 49       	st.w	r8[0x10],r9
80029bba:	ec f8 00 40 	ld.w	r8,r6[64]
80029bbe:	70 08       	ld.w	r8,r8[0x0]
80029bc0:	ec f9 01 04 	ld.w	r9,r6[260]
80029bc4:	72 09       	ld.w	r9,r9[0x0]
80029bc6:	91 89       	st.w	r8[0x20],r9
80029bc8:	ec f8 00 40 	ld.w	r8,r6[64]
80029bcc:	70 08       	ld.w	r8,r8[0x0]
80029bce:	30 19       	mov	r9,1
80029bd0:	91 09       	st.w	r8[0x0],r9
80029bd2:	d5 03       	csrf	0x10
80029bd4:	c0 38       	rjmp	80029bda <twim_write_packet+0x11a>
80029bd6:	fe cf ff fc 	sub	pc,pc,-4
80029bda:	ec f8 00 78 	ld.w	r8,r6[120]
80029bde:	70 08       	ld.w	r8,r8[0x0]
80029be0:	58 08       	cp.w	r8,0
80029be2:	c3 f1       	brne	80029c60 <twim_write_packet+0x1a0>
80029be4:	f0 16 00 6f 	mcall	r6[444]
80029be8:	18 98       	mov	r8,r12
80029bea:	58 08       	cp.w	r8,0
80029bec:	cf 50       	breq	80029bd6 <twim_write_packet+0x116>
80029bee:	c3 98       	rjmp	80029c60 <twim_write_packet+0x1a0>
80029bf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029bf4:	70 38       	ld.w	r8,r8[0xc]
80029bf6:	10 99       	mov	r9,r8
80029bf8:	ec f8 00 90 	ld.w	r8,r6[144]
80029bfc:	91 09       	st.w	r8[0x0],r9
80029bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c02:	70 49       	ld.w	r9,r8[0x10]
80029c04:	ec f8 00 88 	ld.w	r8,r6[136]
80029c08:	91 09       	st.w	r8[0x0],r9
80029c0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c0e:	70 08       	ld.w	r8,r8[0x0]
80029c10:	f0 09 15 01 	lsl	r9,r8,0x1
80029c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c18:	70 48       	ld.w	r8,r8[0x10]
80029c1a:	b1 68       	lsl	r8,0x10
80029c1c:	f3 e8 10 08 	or	r8,r9,r8
80029c20:	10 99       	mov	r9,r8
80029c22:	e8 19 e0 00 	orl	r9,0xe000
80029c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c2a:	91 39       	st.w	r8[0xc],r9
80029c2c:	ec f8 00 40 	ld.w	r8,r6[64]
80029c30:	70 08       	ld.w	r8,r8[0x0]
80029c32:	ec f9 01 04 	ld.w	r9,r6[260]
80029c36:	72 09       	ld.w	r9,r9[0x0]
80029c38:	91 89       	st.w	r8[0x20],r9
80029c3a:	ec f8 00 40 	ld.w	r8,r6[64]
80029c3e:	70 08       	ld.w	r8,r8[0x0]
80029c40:	30 19       	mov	r9,1
80029c42:	91 09       	st.w	r8[0x0],r9
80029c44:	d5 03       	csrf	0x10
80029c46:	c0 38       	rjmp	80029c4c <twim_write_packet+0x18c>
80029c48:	fe cf ff fc 	sub	pc,pc,-4
80029c4c:	ec f8 00 78 	ld.w	r8,r6[120]
80029c50:	70 08       	ld.w	r8,r8[0x0]
80029c52:	58 08       	cp.w	r8,0
80029c54:	c0 61       	brne	80029c60 <twim_write_packet+0x1a0>
80029c56:	f0 16 00 6f 	mcall	r6[444]
80029c5a:	18 98       	mov	r8,r12
80029c5c:	58 08       	cp.w	r8,0
80029c5e:	cf 50       	breq	80029c48 <twim_write_packet+0x188>
80029c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c64:	30 29       	mov	r9,2
80029c66:	91 09       	st.w	r8[0x0],r9
80029c68:	ec f8 00 78 	ld.w	r8,r6[120]
80029c6c:	70 08       	ld.w	r8,r8[0x0]
80029c6e:	5b c8       	cp.w	r8,-4
80029c70:	c0 60       	breq	80029c7c <twim_write_packet+0x1bc>
80029c72:	ec f8 00 78 	ld.w	r8,r6[120]
80029c76:	70 08       	ld.w	r8,r8[0x0]
80029c78:	5b e8       	cp.w	r8,-2
80029c7a:	c0 31       	brne	80029c80 <twim_write_packet+0x1c0>
80029c7c:	3f f8       	mov	r8,-1
80029c7e:	c0 28       	rjmp	80029c82 <twim_write_packet+0x1c2>
80029c80:	30 08       	mov	r8,0
80029c82:	10 9c       	mov	r12,r8
80029c84:	2f ed       	sub	sp,-8
80029c86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029c8a:	00 00       	add	r0,r0
80029c8c:	80 02       	ld.sh	r2,r0[0x0]
80029c8e:	99 4e       	st.w	r12[0x10],lr

80029c90 <twim_write>:
80029c90:	eb cd 40 c0 	pushm	r6-r7,lr
80029c94:	1a 97       	mov	r7,sp
80029c96:	20 5d       	sub	sp,20
80029c98:	4b f6       	lddpc	r6,80029d94 <twim_write+0x104>
80029c9a:	1e 26       	rsub	r6,pc
80029c9c:	ef 4c ff fc 	st.w	r7[-4],r12
80029ca0:	ef 4b ff f8 	st.w	r7[-8],r11
80029ca4:	ef 4a ff f4 	st.w	r7[-12],r10
80029ca8:	ef 49 ff f0 	st.w	r7[-16],r9
80029cac:	ef 68 ff ec 	st.b	r7[-20],r8
80029cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cb4:	30 19       	mov	r9,1
80029cb6:	91 09       	st.w	r8[0x0],r9
80029cb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cbc:	e0 69 00 80 	mov	r9,128
80029cc0:	91 09       	st.w	r8[0x0],r9
80029cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cc6:	30 29       	mov	r9,2
80029cc8:	91 09       	st.w	r8[0x0],r9
80029cca:	ec f8 00 40 	ld.w	r8,r6[64]
80029cce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029cd2:	91 09       	st.w	r8[0x0],r9
80029cd4:	ec f8 00 40 	ld.w	r8,r6[64]
80029cd8:	70 08       	ld.w	r8,r8[0x0]
80029cda:	10 9c       	mov	r12,r8
80029cdc:	f0 16 00 7f 	mcall	r6[508]
80029ce0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029ce4:	ec f8 00 90 	ld.w	r8,r6[144]
80029ce8:	91 09       	st.w	r8[0x0],r9
80029cea:	ec f8 00 88 	ld.w	r8,r6[136]
80029cee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029cf2:	91 09       	st.w	r8[0x0],r9
80029cf4:	ec f9 00 b8 	ld.w	r9,r6[184]
80029cf8:	30 08       	mov	r8,0
80029cfa:	b2 88       	st.b	r9[0x0],r8
80029cfc:	ec f8 00 78 	ld.w	r8,r6[120]
80029d00:	30 09       	mov	r9,0
80029d02:	91 09       	st.w	r8[0x0],r9
80029d04:	ec f8 00 40 	ld.w	r8,r6[64]
80029d08:	70 08       	ld.w	r8,r8[0x0]
80029d0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029d0e:	f2 0a 15 01 	lsl	r10,r9,0x1
80029d12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029d16:	b1 69       	lsl	r9,0x10
80029d18:	12 4a       	or	r10,r9
80029d1a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029d1e:	ab 79       	lsl	r9,0xb
80029d20:	f5 e9 10 09 	or	r9,r10,r9
80029d24:	e8 19 e0 00 	orl	r9,0xe000
80029d28:	91 39       	st.w	r8[0xc],r9
80029d2a:	ec f8 01 04 	ld.w	r8,r6[260]
80029d2e:	e0 69 03 02 	mov	r9,770
80029d32:	91 09       	st.w	r8[0x0],r9
80029d34:	ec f8 00 40 	ld.w	r8,r6[64]
80029d38:	70 08       	ld.w	r8,r8[0x0]
80029d3a:	ec f9 01 04 	ld.w	r9,r6[260]
80029d3e:	72 09       	ld.w	r9,r9[0x0]
80029d40:	91 89       	st.w	r8[0x20],r9
80029d42:	ec f8 00 40 	ld.w	r8,r6[64]
80029d46:	70 08       	ld.w	r8,r8[0x0]
80029d48:	30 19       	mov	r9,1
80029d4a:	91 09       	st.w	r8[0x0],r9
80029d4c:	d5 03       	csrf	0x10
80029d4e:	c0 38       	rjmp	80029d54 <twim_write+0xc4>
80029d50:	fe cf ff fc 	sub	pc,pc,-4
80029d54:	ec f8 00 78 	ld.w	r8,r6[120]
80029d58:	70 08       	ld.w	r8,r8[0x0]
80029d5a:	58 08       	cp.w	r8,0
80029d5c:	c0 61       	brne	80029d68 <twim_write+0xd8>
80029d5e:	f0 16 00 6f 	mcall	r6[444]
80029d62:	18 98       	mov	r8,r12
80029d64:	58 08       	cp.w	r8,0
80029d66:	cf 50       	breq	80029d50 <twim_write+0xc0>
80029d68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d6c:	30 29       	mov	r9,2
80029d6e:	91 09       	st.w	r8[0x0],r9
80029d70:	ec f8 00 78 	ld.w	r8,r6[120]
80029d74:	70 08       	ld.w	r8,r8[0x0]
80029d76:	5b c8       	cp.w	r8,-4
80029d78:	c0 60       	breq	80029d84 <twim_write+0xf4>
80029d7a:	ec f8 00 78 	ld.w	r8,r6[120]
80029d7e:	70 08       	ld.w	r8,r8[0x0]
80029d80:	5b e8       	cp.w	r8,-2
80029d82:	c0 31       	brne	80029d88 <twim_write+0xf8>
80029d84:	3f f8       	mov	r8,-1
80029d86:	c0 28       	rjmp	80029d8a <twim_write+0xfa>
80029d88:	30 08       	mov	r8,0
80029d8a:	10 9c       	mov	r12,r8
80029d8c:	2f bd       	sub	sp,-20
80029d8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029d92:	00 00       	add	r0,r0
80029d94:	80 02       	ld.sh	r2,r0[0x0]
80029d96:	9b 1e       	st.w	sp[0x4],lr

80029d98 <twim_chained_transfer>:
80029d98:	eb cd 40 c0 	pushm	r6-r7,lr
80029d9c:	1a 97       	mov	r7,sp
80029d9e:	20 4d       	sub	sp,16
80029da0:	fe f6 03 4c 	ld.w	r6,pc[844]
80029da4:	1e 26       	rsub	r6,pc
80029da6:	ef 4c ff fc 	st.w	r7[-4],r12
80029daa:	ef 4b ff f8 	st.w	r7[-8],r11
80029dae:	ef 4a ff f4 	st.w	r7[-12],r10
80029db2:	12 98       	mov	r8,r9
80029db4:	ef 68 ff f0 	st.b	r7[-16],r8
80029db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029dbc:	30 19       	mov	r9,1
80029dbe:	91 09       	st.w	r8[0x0],r9
80029dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029dc4:	e0 69 00 80 	mov	r9,128
80029dc8:	91 09       	st.w	r8[0x0],r9
80029dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029dce:	30 29       	mov	r9,2
80029dd0:	91 09       	st.w	r8[0x0],r9
80029dd2:	ec f8 00 40 	ld.w	r8,r6[64]
80029dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029dda:	91 09       	st.w	r8[0x0],r9
80029ddc:	ec f8 00 40 	ld.w	r8,r6[64]
80029de0:	70 08       	ld.w	r8,r8[0x0]
80029de2:	10 9c       	mov	r12,r8
80029de4:	f0 16 00 7f 	mcall	r6[508]
80029de8:	ec f9 00 b8 	ld.w	r9,r6[184]
80029dec:	30 08       	mov	r8,0
80029dee:	b2 88       	st.b	r9[0x0],r8
80029df0:	ec f8 00 78 	ld.w	r8,r6[120]
80029df4:	30 09       	mov	r9,0
80029df6:	91 09       	st.w	r8[0x0],r9
80029df8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029dfc:	30 08       	mov	r8,0
80029dfe:	f0 09 18 00 	cp.b	r9,r8
80029e02:	c3 00       	breq	80029e62 <twim_chained_transfer+0xca>
80029e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e08:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029e0c:	5c 58       	castu.b	r8
80029e0e:	c2 a0       	breq	80029e62 <twim_chained_transfer+0xca>
80029e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e14:	70 08       	ld.w	r8,r8[0x0]
80029e16:	a1 78       	lsl	r8,0x1
80029e18:	10 99       	mov	r9,r8
80029e1a:	e8 19 a8 00 	orl	r9,0xa800
80029e1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e22:	91 39       	st.w	r8[0xc],r9
80029e24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e28:	70 08       	ld.w	r8,r8[0x0]
80029e2a:	f0 09 15 01 	lsl	r9,r8,0x1
80029e2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e32:	70 28       	ld.w	r8,r8[0x8]
80029e34:	b1 68       	lsl	r8,0x10
80029e36:	f3 e8 10 08 	or	r8,r9,r8
80029e3a:	10 99       	mov	r9,r8
80029e3c:	e8 19 b8 01 	orl	r9,0xb801
80029e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e44:	91 49       	st.w	r8[0x10],r9
80029e46:	c0 38       	rjmp	80029e4c <twim_chained_transfer+0xb4>
80029e48:	fe cf ff fc 	sub	pc,pc,-4
80029e4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e50:	70 78       	ld.w	r8,r8[0x1c]
80029e52:	e2 18 00 08 	andl	r8,0x8,COH
80029e56:	cf 90       	breq	80029e48 <twim_chained_transfer+0xb0>
80029e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e5c:	30 89       	mov	r9,8
80029e5e:	91 b9       	st.w	r8[0x2c],r9
80029e60:	c1 c8       	rjmp	80029e98 <twim_chained_transfer+0x100>
80029e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e66:	70 08       	ld.w	r8,r8[0x0]
80029e68:	f0 09 15 01 	lsl	r9,r8,0x1
80029e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e70:	70 28       	ld.w	r8,r8[0x8]
80029e72:	b1 68       	lsl	r8,0x10
80029e74:	10 49       	or	r9,r8
80029e76:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029e7a:	ab 78       	lsl	r8,0xb
80029e7c:	10 49       	or	r9,r8
80029e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e82:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029e86:	5c 58       	castu.b	r8
80029e88:	f3 e8 10 08 	or	r8,r9,r8
80029e8c:	10 99       	mov	r9,r8
80029e8e:	e8 19 a0 00 	orl	r9,0xa000
80029e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e96:	91 39       	st.w	r8[0xc],r9
80029e98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029e9c:	70 08       	ld.w	r8,r8[0x0]
80029e9e:	f0 09 15 01 	lsl	r9,r8,0x1
80029ea2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ea6:	70 28       	ld.w	r8,r8[0x8]
80029ea8:	b1 68       	lsl	r8,0x10
80029eaa:	10 49       	or	r9,r8
80029eac:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029eb0:	ab 78       	lsl	r8,0xb
80029eb2:	f3 e8 10 0a 	or	r10,r9,r8
80029eb6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029eba:	30 08       	mov	r8,0
80029ebc:	f0 09 18 00 	cp.b	r9,r8
80029ec0:	c0 90       	breq	80029ed2 <twim_chained_transfer+0x13a>
80029ec2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ec6:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029eca:	5c 58       	castu.b	r8
80029ecc:	c0 30       	breq	80029ed2 <twim_chained_transfer+0x13a>
80029ece:	30 18       	mov	r8,1
80029ed0:	c0 28       	rjmp	80029ed4 <twim_chained_transfer+0x13c>
80029ed2:	30 08       	mov	r8,0
80029ed4:	ad 68       	lsl	r8,0xc
80029ed6:	f5 e8 10 09 	or	r9,r10,r8
80029eda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ede:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029ee2:	5c 58       	castu.b	r8
80029ee4:	f3 e8 10 08 	or	r8,r9,r8
80029ee8:	10 99       	mov	r9,r8
80029eea:	e8 19 e0 00 	orl	r9,0xe000
80029eee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ef2:	91 49       	st.w	r8[0x10],r9
80029ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ef8:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029efc:	5c 58       	castu.b	r8
80029efe:	c3 80       	breq	80029f6e <twim_chained_transfer+0x1d6>
80029f00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f04:	70 18       	ld.w	r8,r8[0x4]
80029f06:	10 99       	mov	r9,r8
80029f08:	ec f8 00 bc 	ld.w	r8,r6[188]
80029f0c:	91 09       	st.w	r8[0x0],r9
80029f0e:	c1 58       	rjmp	80029f38 <twim_chained_transfer+0x1a0>
80029f10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f14:	70 78       	ld.w	r8,r8[0x1c]
80029f16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029f1a:	5c 58       	castu.b	r8
80029f1c:	c0 e0       	breq	80029f38 <twim_chained_transfer+0x1a0>
80029f1e:	ec f8 00 bc 	ld.w	r8,r6[188]
80029f22:	70 08       	ld.w	r8,r8[0x0]
80029f24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029f28:	72 59       	ld.w	r9,r9[0x14]
80029f2a:	5c 59       	castu.b	r9
80029f2c:	b0 89       	st.b	r8[0x0],r9
80029f2e:	f0 c9 ff ff 	sub	r9,r8,-1
80029f32:	ec f8 00 bc 	ld.w	r8,r6[188]
80029f36:	91 09       	st.w	r8[0x0],r9
80029f38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f3c:	70 78       	ld.w	r8,r8[0x1c]
80029f3e:	e2 18 00 08 	andl	r8,0x8,COH
80029f42:	ce 70       	breq	80029f10 <twim_chained_transfer+0x178>
80029f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f48:	70 78       	ld.w	r8,r8[0x1c]
80029f4a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029f4e:	5c 58       	castu.b	r8
80029f50:	c4 40       	breq	80029fd8 <twim_chained_transfer+0x240>
80029f52:	ec f8 00 bc 	ld.w	r8,r6[188]
80029f56:	70 08       	ld.w	r8,r8[0x0]
80029f58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029f5c:	72 59       	ld.w	r9,r9[0x14]
80029f5e:	5c 59       	castu.b	r9
80029f60:	b0 89       	st.b	r8[0x0],r9
80029f62:	f0 c9 ff ff 	sub	r9,r8,-1
80029f66:	ec f8 00 bc 	ld.w	r8,r6[188]
80029f6a:	91 09       	st.w	r8[0x0],r9
80029f6c:	c3 68       	rjmp	80029fd8 <twim_chained_transfer+0x240>
80029f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f72:	70 18       	ld.w	r8,r8[0x4]
80029f74:	10 99       	mov	r9,r8
80029f76:	ec f8 00 90 	ld.w	r8,r6[144]
80029f7a:	91 09       	st.w	r8[0x0],r9
80029f7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f80:	70 29       	ld.w	r9,r8[0x8]
80029f82:	ec f8 00 88 	ld.w	r8,r6[136]
80029f86:	91 09       	st.w	r8[0x0],r9
80029f88:	c2 28       	rjmp	80029fcc <twim_chained_transfer+0x234>
80029f8a:	ec f8 00 88 	ld.w	r8,r6[136]
80029f8e:	70 08       	ld.w	r8,r8[0x0]
80029f90:	58 08       	cp.w	r8,0
80029f92:	c1 d0       	breq	80029fcc <twim_chained_transfer+0x234>
80029f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f98:	70 78       	ld.w	r8,r8[0x1c]
80029f9a:	e2 18 00 02 	andl	r8,0x2,COH
80029f9e:	c1 70       	breq	80029fcc <twim_chained_transfer+0x234>
80029fa0:	ec f8 00 90 	ld.w	r8,r6[144]
80029fa4:	70 08       	ld.w	r8,r8[0x0]
80029fa6:	11 89       	ld.ub	r9,r8[0x0]
80029fa8:	5c 59       	castu.b	r9
80029faa:	12 9a       	mov	r10,r9
80029fac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029fb0:	93 6a       	st.w	r9[0x18],r10
80029fb2:	f0 c9 ff ff 	sub	r9,r8,-1
80029fb6:	ec f8 00 90 	ld.w	r8,r6[144]
80029fba:	91 09       	st.w	r8[0x0],r9
80029fbc:	ec f8 00 88 	ld.w	r8,r6[136]
80029fc0:	70 08       	ld.w	r8,r8[0x0]
80029fc2:	f0 c9 00 01 	sub	r9,r8,1
80029fc6:	ec f8 00 88 	ld.w	r8,r6[136]
80029fca:	91 09       	st.w	r8[0x0],r9
80029fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029fd0:	70 78       	ld.w	r8,r8[0x1c]
80029fd2:	e2 18 00 08 	andl	r8,0x8,COH
80029fd6:	cd a0       	breq	80029f8a <twim_chained_transfer+0x1f2>
80029fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029fdc:	30 89       	mov	r9,8
80029fde:	91 b9       	st.w	r8[0x2c],r9
80029fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029fe4:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029fe8:	5c 58       	castu.b	r8
80029fea:	c2 40       	breq	8002a032 <twim_chained_transfer+0x29a>
80029fec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ff0:	70 18       	ld.w	r8,r8[0x4]
80029ff2:	10 99       	mov	r9,r8
80029ff4:	ec f8 00 bc 	ld.w	r8,r6[188]
80029ff8:	91 09       	st.w	r8[0x0],r9
80029ffa:	c1 58       	rjmp	8002a024 <twim_chained_transfer+0x28c>
80029ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a000:	70 78       	ld.w	r8,r8[0x1c]
8002a002:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a006:	5c 58       	castu.b	r8
8002a008:	c0 e0       	breq	8002a024 <twim_chained_transfer+0x28c>
8002a00a:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a00e:	70 08       	ld.w	r8,r8[0x0]
8002a010:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a014:	72 59       	ld.w	r9,r9[0x14]
8002a016:	5c 59       	castu.b	r9
8002a018:	b0 89       	st.b	r8[0x0],r9
8002a01a:	f0 c9 ff ff 	sub	r9,r8,-1
8002a01e:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a022:	91 09       	st.w	r8[0x0],r9
8002a024:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a028:	70 78       	ld.w	r8,r8[0x1c]
8002a02a:	e2 18 00 10 	andl	r8,0x10,COH
8002a02e:	ce 70       	breq	80029ffc <twim_chained_transfer+0x264>
8002a030:	c3 68       	rjmp	8002a09c <twim_chained_transfer+0x304>
8002a032:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a036:	70 18       	ld.w	r8,r8[0x4]
8002a038:	10 99       	mov	r9,r8
8002a03a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a03e:	91 09       	st.w	r8[0x0],r9
8002a040:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a044:	70 29       	ld.w	r9,r8[0x8]
8002a046:	ec f8 00 88 	ld.w	r8,r6[136]
8002a04a:	91 09       	st.w	r8[0x0],r9
8002a04c:	c2 28       	rjmp	8002a090 <twim_chained_transfer+0x2f8>
8002a04e:	ec f8 00 88 	ld.w	r8,r6[136]
8002a052:	70 08       	ld.w	r8,r8[0x0]
8002a054:	58 08       	cp.w	r8,0
8002a056:	c1 d0       	breq	8002a090 <twim_chained_transfer+0x2f8>
8002a058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a05c:	70 78       	ld.w	r8,r8[0x1c]
8002a05e:	e2 18 00 02 	andl	r8,0x2,COH
8002a062:	c1 70       	breq	8002a090 <twim_chained_transfer+0x2f8>
8002a064:	ec f8 00 90 	ld.w	r8,r6[144]
8002a068:	70 08       	ld.w	r8,r8[0x0]
8002a06a:	11 89       	ld.ub	r9,r8[0x0]
8002a06c:	5c 59       	castu.b	r9
8002a06e:	12 9a       	mov	r10,r9
8002a070:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a074:	93 6a       	st.w	r9[0x18],r10
8002a076:	f0 c9 ff ff 	sub	r9,r8,-1
8002a07a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a07e:	91 09       	st.w	r8[0x0],r9
8002a080:	ec f8 00 88 	ld.w	r8,r6[136]
8002a084:	70 08       	ld.w	r8,r8[0x0]
8002a086:	f0 c9 00 01 	sub	r9,r8,1
8002a08a:	ec f8 00 88 	ld.w	r8,r6[136]
8002a08e:	91 09       	st.w	r8[0x0],r9
8002a090:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a094:	70 78       	ld.w	r8,r8[0x1c]
8002a096:	e2 18 00 10 	andl	r8,0x10,COH
8002a09a:	cd a0       	breq	8002a04e <twim_chained_transfer+0x2b6>
8002a09c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0a0:	70 78       	ld.w	r8,r8[0x1c]
8002a0a2:	e2 18 04 00 	andl	r8,0x400,COH
8002a0a6:	c0 80       	breq	8002a0b6 <twim_chained_transfer+0x31e>
8002a0a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0ac:	e0 69 04 00 	mov	r9,1024
8002a0b0:	91 b9       	st.w	r8[0x2c],r9
8002a0b2:	3f f8       	mov	r8,-1
8002a0b4:	c1 88       	rjmp	8002a0e4 <twim_chained_transfer+0x34c>
8002a0b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0ba:	70 78       	ld.w	r8,r8[0x1c]
8002a0bc:	e2 18 03 00 	andl	r8,0x300,COH
8002a0c0:	c1 10       	breq	8002a0e2 <twim_chained_transfer+0x34a>
8002a0c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0c6:	70 38       	ld.w	r8,r8[0xc]
8002a0c8:	10 99       	mov	r9,r8
8002a0ca:	ec 19 80 00 	eorl	r9,0x8000
8002a0ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0d2:	91 39       	st.w	r8[0xc],r9
8002a0d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0d8:	e0 69 03 00 	mov	r9,768
8002a0dc:	91 b9       	st.w	r8[0x2c],r9
8002a0de:	3f f8       	mov	r8,-1
8002a0e0:	c0 28       	rjmp	8002a0e4 <twim_chained_transfer+0x34c>
8002a0e2:	30 08       	mov	r8,0
8002a0e4:	10 9c       	mov	r12,r8
8002a0e6:	2f cd       	sub	sp,-16
8002a0e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a0ec:	80 02       	ld.sh	r2,r0[0x0]
8002a0ee:	9c 28       	ld.sh	r8,lr[0x4]

8002a0f0 <twim_status>:
8002a0f0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a0f4:	1a 97       	mov	r7,sp
8002a0f6:	20 1d       	sub	sp,4
8002a0f8:	48 a6       	lddpc	r6,8002a120 <twim_status+0x30>
8002a0fa:	1e 26       	rsub	r6,pc
8002a0fc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a100:	70 08       	ld.w	r8,r8[0x0]
8002a102:	70 78       	ld.w	r8,r8[0x1c]
8002a104:	ef 48 ff fc 	st.w	r7[-4],r8
8002a108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a10c:	e2 18 00 10 	andl	r8,0x10,COH
8002a110:	c0 30       	breq	8002a116 <twim_status+0x26>
8002a112:	30 18       	mov	r8,1
8002a114:	c0 28       	rjmp	8002a118 <twim_status+0x28>
8002a116:	30 08       	mov	r8,0
8002a118:	10 9c       	mov	r12,r8
8002a11a:	2f fd       	sub	sp,-4
8002a11c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a120:	80 02       	ld.sh	r2,r0[0x0]
8002a122:	9f 7e       	st.w	pc[0x1c],lr

8002a124 <cpu_irq_is_enabled_flags>:
8002a124:	eb cd 40 80 	pushm	r7,lr
8002a128:	1a 97       	mov	r7,sp
8002a12a:	20 1d       	sub	sp,4
8002a12c:	ef 4c ff fc 	st.w	r7[-4],r12
8002a130:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a134:	e6 18 00 01 	andh	r8,0x1,COH
8002a138:	5f 08       	sreq	r8
8002a13a:	5c 58       	castu.b	r8
8002a13c:	10 9c       	mov	r12,r8
8002a13e:	2f fd       	sub	sp,-4
8002a140:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a144 <usart_set_async_baudrate>:
8002a144:	eb cd 40 80 	pushm	r7,lr
8002a148:	1a 97       	mov	r7,sp
8002a14a:	20 7d       	sub	sp,28
8002a14c:	ef 4c ff ec 	st.w	r7[-20],r12
8002a150:	ef 4b ff e8 	st.w	r7[-24],r11
8002a154:	ef 4a ff e4 	st.w	r7[-28],r10
8002a158:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a15c:	f0 09 15 04 	lsl	r9,r8,0x4
8002a160:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a164:	10 39       	cp.w	r9,r8
8002a166:	e0 8b 00 04 	brhi	8002a16e <usart_set_async_baudrate+0x2a>
8002a16a:	31 08       	mov	r8,16
8002a16c:	c0 28       	rjmp	8002a170 <usart_set_async_baudrate+0x2c>
8002a16e:	30 88       	mov	r8,8
8002a170:	ef 48 ff f0 	st.w	r7[-16],r8
8002a174:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a178:	f0 09 15 03 	lsl	r9,r8,0x3
8002a17c:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a180:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a184:	f4 08 02 48 	mul	r8,r10,r8
8002a188:	a1 98       	lsr	r8,0x1
8002a18a:	f2 08 00 08 	add	r8,r9,r8
8002a18e:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a192:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002a196:	f4 09 02 49 	mul	r9,r10,r9
8002a19a:	f0 09 0d 08 	divu	r8,r8,r9
8002a19e:	ef 48 ff f4 	st.w	r7[-12],r8
8002a1a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a1a6:	a3 98       	lsr	r8,0x3
8002a1a8:	ef 48 ff f8 	st.w	r7[-8],r8
8002a1ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a1b0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002a1b4:	ef 48 ff fc 	st.w	r7[-4],r8
8002a1b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1bc:	58 08       	cp.w	r8,0
8002a1be:	c0 70       	breq	8002a1cc <usart_set_async_baudrate+0x88>
8002a1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1c4:	e0 48 ff ff 	cp.w	r8,65535
8002a1c8:	e0 88 00 04 	brls	8002a1d0 <usart_set_async_baudrate+0x8c>
8002a1cc:	30 18       	mov	r8,1
8002a1ce:	c2 08       	rjmp	8002a20e <usart_set_async_baudrate+0xca>
8002a1d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a1d4:	70 18       	ld.w	r8,r8[0x4]
8002a1d6:	10 99       	mov	r9,r8
8002a1d8:	e4 19 ff f7 	andh	r9,0xfff7
8002a1dc:	e0 19 fe cf 	andl	r9,0xfecf
8002a1e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a1e4:	59 08       	cp.w	r8,16
8002a1e6:	c0 40       	breq	8002a1ee <usart_set_async_baudrate+0xaa>
8002a1e8:	e8 68 00 00 	mov	r8,524288
8002a1ec:	c0 28       	rjmp	8002a1f0 <usart_set_async_baudrate+0xac>
8002a1ee:	30 08       	mov	r8,0
8002a1f0:	10 49       	or	r9,r8
8002a1f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a1f6:	91 19       	st.w	r8[0x4],r9
8002a1f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1fc:	f0 09 15 10 	lsl	r9,r8,0x10
8002a200:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a204:	10 49       	or	r9,r8
8002a206:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a20a:	91 89       	st.w	r8[0x20],r9
8002a20c:	30 08       	mov	r8,0
8002a20e:	10 9c       	mov	r12,r8
8002a210:	2f 9d       	sub	sp,-28
8002a212:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a216 <usart_set_sync_master_baudrate>:
8002a216:	eb cd 40 80 	pushm	r7,lr
8002a21a:	1a 97       	mov	r7,sp
8002a21c:	20 4d       	sub	sp,16
8002a21e:	ef 4c ff f8 	st.w	r7[-8],r12
8002a222:	ef 4b ff f4 	st.w	r7[-12],r11
8002a226:	ef 4a ff f0 	st.w	r7[-16],r10
8002a22a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a22e:	f0 09 16 01 	lsr	r9,r8,0x1
8002a232:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a236:	f2 08 00 08 	add	r8,r9,r8
8002a23a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a23e:	f0 09 0d 08 	divu	r8,r8,r9
8002a242:	ef 48 ff fc 	st.w	r7[-4],r8
8002a246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a24a:	58 08       	cp.w	r8,0
8002a24c:	c0 70       	breq	8002a25a <usart_set_sync_master_baudrate+0x44>
8002a24e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a252:	e0 48 ff ff 	cp.w	r8,65535
8002a256:	e0 88 00 04 	brls	8002a25e <usart_set_sync_master_baudrate+0x48>
8002a25a:	30 18       	mov	r8,1
8002a25c:	c1 18       	rjmp	8002a27e <usart_set_sync_master_baudrate+0x68>
8002a25e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a262:	70 18       	ld.w	r8,r8[0x4]
8002a264:	e0 18 fe cf 	andl	r8,0xfecf
8002a268:	10 99       	mov	r9,r8
8002a26a:	a9 a9       	sbr	r9,0x8
8002a26c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a270:	91 19       	st.w	r8[0x4],r9
8002a272:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a276:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a27a:	91 89       	st.w	r8[0x20],r9
8002a27c:	30 08       	mov	r8,0
8002a27e:	10 9c       	mov	r12,r8
8002a280:	2f cd       	sub	sp,-16
8002a282:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a286 <usart_set_sync_slave_baudrate>:
8002a286:	eb cd 40 80 	pushm	r7,lr
8002a28a:	1a 97       	mov	r7,sp
8002a28c:	20 1d       	sub	sp,4
8002a28e:	ef 4c ff fc 	st.w	r7[-4],r12
8002a292:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a296:	70 18       	ld.w	r8,r8[0x4]
8002a298:	10 99       	mov	r9,r8
8002a29a:	e8 19 01 30 	orl	r9,0x130
8002a29e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2a2:	91 19       	st.w	r8[0x4],r9
8002a2a4:	30 08       	mov	r8,0
8002a2a6:	10 9c       	mov	r12,r8
8002a2a8:	2f fd       	sub	sp,-4
8002a2aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a2ae <usart_set_iso7816_clock>:
8002a2ae:	eb cd 40 80 	pushm	r7,lr
8002a2b2:	1a 97       	mov	r7,sp
8002a2b4:	20 4d       	sub	sp,16
8002a2b6:	ef 4c ff f8 	st.w	r7[-8],r12
8002a2ba:	ef 4b ff f4 	st.w	r7[-12],r11
8002a2be:	ef 4a ff f0 	st.w	r7[-16],r10
8002a2c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a2c6:	f0 09 16 01 	lsr	r9,r8,0x1
8002a2ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a2ce:	f2 08 00 08 	add	r8,r9,r8
8002a2d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a2d6:	f0 09 0d 08 	divu	r8,r8,r9
8002a2da:	ef 48 ff fc 	st.w	r7[-4],r8
8002a2de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2e2:	58 08       	cp.w	r8,0
8002a2e4:	c0 70       	breq	8002a2f2 <usart_set_iso7816_clock+0x44>
8002a2e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2ea:	e0 48 ff ff 	cp.w	r8,65535
8002a2ee:	e0 88 00 04 	brls	8002a2f6 <usart_set_iso7816_clock+0x48>
8002a2f2:	30 18       	mov	r8,1
8002a2f4:	c1 28       	rjmp	8002a318 <usart_set_iso7816_clock+0x6a>
8002a2f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2fa:	70 18       	ld.w	r8,r8[0x4]
8002a2fc:	10 99       	mov	r9,r8
8002a2fe:	e4 19 ff f7 	andh	r9,0xfff7
8002a302:	e0 19 fe cf 	andl	r9,0xfecf
8002a306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a30a:	91 19       	st.w	r8[0x4],r9
8002a30c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a310:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a314:	91 89       	st.w	r8[0x20],r9
8002a316:	30 08       	mov	r8,0
8002a318:	10 9c       	mov	r12,r8
8002a31a:	2f cd       	sub	sp,-16
8002a31c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a320 <usart_set_spi_master_baudrate>:
8002a320:	eb cd 40 80 	pushm	r7,lr
8002a324:	1a 97       	mov	r7,sp
8002a326:	20 4d       	sub	sp,16
8002a328:	ef 4c ff f8 	st.w	r7[-8],r12
8002a32c:	ef 4b ff f4 	st.w	r7[-12],r11
8002a330:	ef 4a ff f0 	st.w	r7[-16],r10
8002a334:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a338:	f0 09 16 01 	lsr	r9,r8,0x1
8002a33c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a340:	f2 08 00 08 	add	r8,r9,r8
8002a344:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a348:	f0 09 0d 08 	divu	r8,r8,r9
8002a34c:	ef 48 ff fc 	st.w	r7[-4],r8
8002a350:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a354:	58 38       	cp.w	r8,3
8002a356:	e0 88 00 08 	brls	8002a366 <usart_set_spi_master_baudrate+0x46>
8002a35a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a35e:	e0 48 ff ff 	cp.w	r8,65535
8002a362:	e0 88 00 04 	brls	8002a36a <usart_set_spi_master_baudrate+0x4a>
8002a366:	30 18       	mov	r8,1
8002a368:	c1 08       	rjmp	8002a388 <usart_set_spi_master_baudrate+0x68>
8002a36a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a36e:	70 18       	ld.w	r8,r8[0x4]
8002a370:	10 99       	mov	r9,r8
8002a372:	e0 19 ff cf 	andl	r9,0xffcf
8002a376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a37a:	91 19       	st.w	r8[0x4],r9
8002a37c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a380:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a384:	91 89       	st.w	r8[0x20],r9
8002a386:	30 08       	mov	r8,0
8002a388:	10 9c       	mov	r12,r8
8002a38a:	2f cd       	sub	sp,-16
8002a38c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a390 <usart_set_spi_slave_baudrate>:
8002a390:	eb cd 40 80 	pushm	r7,lr
8002a394:	1a 97       	mov	r7,sp
8002a396:	20 1d       	sub	sp,4
8002a398:	ef 4c ff fc 	st.w	r7[-4],r12
8002a39c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3a0:	70 18       	ld.w	r8,r8[0x4]
8002a3a2:	10 99       	mov	r9,r8
8002a3a4:	e8 19 00 30 	orl	r9,0x30
8002a3a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3ac:	91 19       	st.w	r8[0x4],r9
8002a3ae:	30 08       	mov	r8,0
8002a3b0:	10 9c       	mov	r12,r8
8002a3b2:	2f fd       	sub	sp,-4
8002a3b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a3b8 <usart_reset>:
8002a3b8:	eb cd 40 c0 	pushm	r6-r7,lr
8002a3bc:	1a 97       	mov	r7,sp
8002a3be:	20 2d       	sub	sp,8
8002a3c0:	49 a6       	lddpc	r6,8002a428 <usart_reset+0x70>
8002a3c2:	1e 26       	rsub	r6,pc
8002a3c4:	ef 4c ff f8 	st.w	r7[-8],r12
8002a3c8:	e1 b8 00 00 	mfsr	r8,0x0
8002a3cc:	10 9c       	mov	r12,r8
8002a3ce:	ca be       	rcall	8002a124 <cpu_irq_is_enabled_flags>
8002a3d0:	18 98       	mov	r8,r12
8002a3d2:	ef 68 ff ff 	st.b	r7[-1],r8
8002a3d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a3da:	30 08       	mov	r8,0
8002a3dc:	f0 09 18 00 	cp.b	r9,r8
8002a3e0:	c0 20       	breq	8002a3e4 <usart_reset+0x2c>
8002a3e2:	d3 03       	ssrf	0x10
8002a3e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a3e8:	3f f9       	mov	r9,-1
8002a3ea:	91 39       	st.w	r8[0xc],r9
8002a3ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a3f0:	70 58       	ld.w	r8,r8[0x14]
8002a3f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a3f6:	30 08       	mov	r8,0
8002a3f8:	f0 09 18 00 	cp.b	r9,r8
8002a3fc:	c0 20       	breq	8002a400 <usart_reset+0x48>
8002a3fe:	d5 03       	csrf	0x10
8002a400:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a404:	30 09       	mov	r9,0
8002a406:	91 19       	st.w	r8[0x4],r9
8002a408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a40c:	30 09       	mov	r9,0
8002a40e:	91 99       	st.w	r8[0x24],r9
8002a410:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a414:	30 09       	mov	r9,0
8002a416:	91 a9       	st.w	r8[0x28],r9
8002a418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a41c:	ea 69 61 0c 	mov	r9,680204
8002a420:	91 09       	st.w	r8[0x0],r9
8002a422:	2f ed       	sub	sp,-8
8002a424:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a428:	80 02       	ld.sh	r2,r0[0x0]
8002a42a:	a2 46       	st.h	r1[0x8],r6

8002a42c <usart_init_rs232>:
8002a42c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a430:	1a 97       	mov	r7,sp
8002a432:	20 3d       	sub	sp,12
8002a434:	4d 86       	lddpc	r6,8002a594 <usart_init_rs232+0x168>
8002a436:	1e 26       	rsub	r6,pc
8002a438:	ef 4c ff fc 	st.w	r7[-4],r12
8002a43c:	ef 4b ff f8 	st.w	r7[-8],r11
8002a440:	ef 4a ff f4 	st.w	r7[-12],r10
8002a444:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a448:	f0 16 00 4c 	mcall	r6[304]
8002a44c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a450:	58 08       	cp.w	r8,0
8002a452:	c3 80       	breq	8002a4c2 <usart_init_rs232+0x96>
8002a454:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a458:	11 c9       	ld.ub	r9,r8[0x4]
8002a45a:	30 48       	mov	r8,4
8002a45c:	f0 09 18 00 	cp.b	r9,r8
8002a460:	e0 88 00 31 	brls	8002a4c2 <usart_init_rs232+0x96>
8002a464:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a468:	11 c9       	ld.ub	r9,r8[0x4]
8002a46a:	30 98       	mov	r8,9
8002a46c:	f0 09 18 00 	cp.b	r9,r8
8002a470:	e0 8b 00 29 	brhi	8002a4c2 <usart_init_rs232+0x96>
8002a474:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a478:	11 d9       	ld.ub	r9,r8[0x5]
8002a47a:	30 78       	mov	r8,7
8002a47c:	f0 09 18 00 	cp.b	r9,r8
8002a480:	e0 8b 00 21 	brhi	8002a4c2 <usart_init_rs232+0x96>
8002a484:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a488:	90 39       	ld.sh	r9,r8[0x6]
8002a48a:	e0 68 01 01 	mov	r8,257
8002a48e:	f0 09 19 00 	cp.h	r9,r8
8002a492:	e0 8b 00 18 	brhi	8002a4c2 <usart_init_rs232+0x96>
8002a496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a49a:	f1 39 00 08 	ld.ub	r9,r8[8]
8002a49e:	30 38       	mov	r8,3
8002a4a0:	f0 09 18 00 	cp.b	r9,r8
8002a4a4:	e0 8b 00 0f 	brhi	8002a4c2 <usart_init_rs232+0x96>
8002a4a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4b0:	70 08       	ld.w	r8,r8[0x0]
8002a4b2:	12 9a       	mov	r10,r9
8002a4b4:	10 9b       	mov	r11,r8
8002a4b6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a4ba:	c4 5e       	rcall	8002a144 <usart_set_async_baudrate>
8002a4bc:	18 98       	mov	r8,r12
8002a4be:	58 18       	cp.w	r8,1
8002a4c0:	c0 31       	brne	8002a4c6 <usart_init_rs232+0x9a>
8002a4c2:	30 18       	mov	r8,1
8002a4c4:	c6 48       	rjmp	8002a58c <usart_init_rs232+0x160>
8002a4c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4ca:	11 c9       	ld.ub	r9,r8[0x4]
8002a4cc:	30 98       	mov	r8,9
8002a4ce:	f0 09 18 00 	cp.b	r9,r8
8002a4d2:	c0 a1       	brne	8002a4e6 <usart_init_rs232+0xba>
8002a4d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4d8:	70 18       	ld.w	r8,r8[0x4]
8002a4da:	10 99       	mov	r9,r8
8002a4dc:	b1 b9       	sbr	r9,0x11
8002a4de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4e2:	91 19       	st.w	r8[0x4],r9
8002a4e4:	c0 d8       	rjmp	8002a4fe <usart_init_rs232+0xd2>
8002a4e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4ea:	70 19       	ld.w	r9,r8[0x4]
8002a4ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4f0:	11 c8       	ld.ub	r8,r8[0x4]
8002a4f2:	20 58       	sub	r8,5
8002a4f4:	a7 68       	lsl	r8,0x6
8002a4f6:	10 49       	or	r9,r8
8002a4f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4fc:	91 19       	st.w	r8[0x4],r9
8002a4fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a502:	70 19       	ld.w	r9,r8[0x4]
8002a504:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a508:	11 d8       	ld.ub	r8,r8[0x5]
8002a50a:	f0 0a 15 09 	lsl	r10,r8,0x9
8002a50e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a512:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a516:	af 68       	lsl	r8,0xe
8002a518:	f5 e8 10 08 	or	r8,r10,r8
8002a51c:	10 49       	or	r9,r8
8002a51e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a522:	91 19       	st.w	r8[0x4],r9
8002a524:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a528:	90 39       	ld.sh	r9,r8[0x6]
8002a52a:	30 28       	mov	r8,2
8002a52c:	f0 09 19 00 	cp.h	r9,r8
8002a530:	e0 88 00 14 	brls	8002a558 <usart_init_rs232+0x12c>
8002a534:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a538:	70 18       	ld.w	r8,r8[0x4]
8002a53a:	10 99       	mov	r9,r8
8002a53c:	ad b9       	sbr	r9,0xd
8002a53e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a542:	91 19       	st.w	r8[0x4],r9
8002a544:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a548:	90 38       	ld.sh	r8,r8[0x6]
8002a54a:	5c 78       	castu.h	r8
8002a54c:	20 28       	sub	r8,2
8002a54e:	10 99       	mov	r9,r8
8002a550:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a554:	91 a9       	st.w	r8[0x28],r9
8002a556:	c0 d8       	rjmp	8002a570 <usart_init_rs232+0x144>
8002a558:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a55c:	70 19       	ld.w	r9,r8[0x4]
8002a55e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a562:	90 38       	ld.sh	r8,r8[0x6]
8002a564:	5c 78       	castu.h	r8
8002a566:	ad 68       	lsl	r8,0xc
8002a568:	10 49       	or	r9,r8
8002a56a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a56e:	91 19       	st.w	r8[0x4],r9
8002a570:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a574:	70 18       	ld.w	r8,r8[0x4]
8002a576:	10 99       	mov	r9,r8
8002a578:	e0 19 ff f0 	andl	r9,0xfff0
8002a57c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a580:	91 19       	st.w	r8[0x4],r9
8002a582:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a586:	35 09       	mov	r9,80
8002a588:	91 09       	st.w	r8[0x0],r9
8002a58a:	30 08       	mov	r8,0
8002a58c:	10 9c       	mov	r12,r8
8002a58e:	2f dd       	sub	sp,-12
8002a590:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a594:	80 02       	ld.sh	r2,r0[0x0]
8002a596:	a2 ba       	st.b	r1[0x3],r10

8002a598 <usart_init_rs232_tx_only>:
8002a598:	eb cd 40 c0 	pushm	r6-r7,lr
8002a59c:	1a 97       	mov	r7,sp
8002a59e:	20 3d       	sub	sp,12
8002a5a0:	4d c6       	lddpc	r6,8002a710 <usart_init_rs232_tx_only+0x178>
8002a5a2:	1e 26       	rsub	r6,pc
8002a5a4:	ef 4c ff fc 	st.w	r7[-4],r12
8002a5a8:	ef 4b ff f8 	st.w	r7[-8],r11
8002a5ac:	ef 4a ff f4 	st.w	r7[-12],r10
8002a5b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a5b4:	f0 16 00 4c 	mcall	r6[304]
8002a5b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5bc:	58 08       	cp.w	r8,0
8002a5be:	c4 00       	breq	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a5c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5c4:	11 c9       	ld.ub	r9,r8[0x4]
8002a5c6:	30 48       	mov	r8,4
8002a5c8:	f0 09 18 00 	cp.b	r9,r8
8002a5cc:	e0 88 00 39 	brls	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a5d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5d4:	11 c9       	ld.ub	r9,r8[0x4]
8002a5d6:	30 98       	mov	r8,9
8002a5d8:	f0 09 18 00 	cp.b	r9,r8
8002a5dc:	e0 8b 00 31 	brhi	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a5e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5e4:	11 d9       	ld.ub	r9,r8[0x5]
8002a5e6:	30 78       	mov	r8,7
8002a5e8:	f0 09 18 00 	cp.b	r9,r8
8002a5ec:	e0 8b 00 29 	brhi	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a5f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5f4:	90 39       	ld.sh	r9,r8[0x6]
8002a5f6:	30 18       	mov	r8,1
8002a5f8:	f0 09 19 00 	cp.h	r9,r8
8002a5fc:	c2 10       	breq	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a5fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a602:	90 39       	ld.sh	r9,r8[0x6]
8002a604:	e0 68 01 01 	mov	r8,257
8002a608:	f0 09 19 00 	cp.h	r9,r8
8002a60c:	e0 8b 00 19 	brhi	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a610:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a614:	f1 39 00 08 	ld.ub	r9,r8[8]
8002a618:	30 38       	mov	r8,3
8002a61a:	f0 09 18 00 	cp.b	r9,r8
8002a61e:	e0 8b 00 10 	brhi	8002a63e <usart_init_rs232_tx_only+0xa6>
8002a622:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a62a:	70 08       	ld.w	r8,r8[0x0]
8002a62c:	12 9a       	mov	r10,r9
8002a62e:	10 9b       	mov	r11,r8
8002a630:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a634:	fe b0 fd f1 	rcall	8002a216 <usart_set_sync_master_baudrate>
8002a638:	18 98       	mov	r8,r12
8002a63a:	58 18       	cp.w	r8,1
8002a63c:	c0 31       	brne	8002a642 <usart_init_rs232_tx_only+0xaa>
8002a63e:	30 18       	mov	r8,1
8002a640:	c6 48       	rjmp	8002a708 <usart_init_rs232_tx_only+0x170>
8002a642:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a646:	11 c9       	ld.ub	r9,r8[0x4]
8002a648:	30 98       	mov	r8,9
8002a64a:	f0 09 18 00 	cp.b	r9,r8
8002a64e:	c0 a1       	brne	8002a662 <usart_init_rs232_tx_only+0xca>
8002a650:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a654:	70 18       	ld.w	r8,r8[0x4]
8002a656:	10 99       	mov	r9,r8
8002a658:	b1 b9       	sbr	r9,0x11
8002a65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a65e:	91 19       	st.w	r8[0x4],r9
8002a660:	c0 d8       	rjmp	8002a67a <usart_init_rs232_tx_only+0xe2>
8002a662:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a666:	70 19       	ld.w	r9,r8[0x4]
8002a668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a66c:	11 c8       	ld.ub	r8,r8[0x4]
8002a66e:	20 58       	sub	r8,5
8002a670:	a7 68       	lsl	r8,0x6
8002a672:	10 49       	or	r9,r8
8002a674:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a678:	91 19       	st.w	r8[0x4],r9
8002a67a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a67e:	70 19       	ld.w	r9,r8[0x4]
8002a680:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a684:	11 d8       	ld.ub	r8,r8[0x5]
8002a686:	f0 0a 15 09 	lsl	r10,r8,0x9
8002a68a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a68e:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a692:	af 68       	lsl	r8,0xe
8002a694:	f5 e8 10 08 	or	r8,r10,r8
8002a698:	10 49       	or	r9,r8
8002a69a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a69e:	91 19       	st.w	r8[0x4],r9
8002a6a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6a4:	90 39       	ld.sh	r9,r8[0x6]
8002a6a6:	30 28       	mov	r8,2
8002a6a8:	f0 09 19 00 	cp.h	r9,r8
8002a6ac:	e0 88 00 14 	brls	8002a6d4 <usart_init_rs232_tx_only+0x13c>
8002a6b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6b4:	70 18       	ld.w	r8,r8[0x4]
8002a6b6:	10 99       	mov	r9,r8
8002a6b8:	ad b9       	sbr	r9,0xd
8002a6ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6be:	91 19       	st.w	r8[0x4],r9
8002a6c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6c4:	90 38       	ld.sh	r8,r8[0x6]
8002a6c6:	5c 78       	castu.h	r8
8002a6c8:	20 28       	sub	r8,2
8002a6ca:	10 99       	mov	r9,r8
8002a6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6d0:	91 a9       	st.w	r8[0x28],r9
8002a6d2:	c0 d8       	rjmp	8002a6ec <usart_init_rs232_tx_only+0x154>
8002a6d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6d8:	70 19       	ld.w	r9,r8[0x4]
8002a6da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6de:	90 38       	ld.sh	r8,r8[0x6]
8002a6e0:	5c 78       	castu.h	r8
8002a6e2:	ad 68       	lsl	r8,0xc
8002a6e4:	10 49       	or	r9,r8
8002a6e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6ea:	91 19       	st.w	r8[0x4],r9
8002a6ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6f0:	70 18       	ld.w	r8,r8[0x4]
8002a6f2:	10 99       	mov	r9,r8
8002a6f4:	e0 19 ff f0 	andl	r9,0xfff0
8002a6f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6fc:	91 19       	st.w	r8[0x4],r9
8002a6fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a702:	34 09       	mov	r9,64
8002a704:	91 09       	st.w	r8[0x0],r9
8002a706:	30 08       	mov	r8,0
8002a708:	10 9c       	mov	r12,r8
8002a70a:	2f dd       	sub	sp,-12
8002a70c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a710:	80 02       	ld.sh	r2,r0[0x0]
8002a712:	a4 26       	st.h	r2[0x4],r6

8002a714 <usart_init_hw_handshaking>:
8002a714:	eb cd 40 c0 	pushm	r6-r7,lr
8002a718:	1a 97       	mov	r7,sp
8002a71a:	20 3d       	sub	sp,12
8002a71c:	49 26       	lddpc	r6,8002a764 <usart_init_hw_handshaking+0x50>
8002a71e:	1e 26       	rsub	r6,pc
8002a720:	ef 4c ff fc 	st.w	r7[-4],r12
8002a724:	ef 4b ff f8 	st.w	r7[-8],r11
8002a728:	ef 4a ff f4 	st.w	r7[-12],r10
8002a72c:	ee fa ff f4 	ld.w	r10,r7[-12]
8002a730:	ee fb ff f8 	ld.w	r11,r7[-8]
8002a734:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a738:	f0 16 00 68 	mcall	r6[416]
8002a73c:	18 98       	mov	r8,r12
8002a73e:	58 18       	cp.w	r8,1
8002a740:	c0 31       	brne	8002a746 <usart_init_hw_handshaking+0x32>
8002a742:	30 18       	mov	r8,1
8002a744:	c0 c8       	rjmp	8002a75c <usart_init_hw_handshaking+0x48>
8002a746:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a74a:	70 18       	ld.w	r8,r8[0x4]
8002a74c:	e0 18 ff f0 	andl	r8,0xfff0
8002a750:	10 99       	mov	r9,r8
8002a752:	a1 b9       	sbr	r9,0x1
8002a754:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a758:	91 19       	st.w	r8[0x4],r9
8002a75a:	30 08       	mov	r8,0
8002a75c:	10 9c       	mov	r12,r8
8002a75e:	2f dd       	sub	sp,-12
8002a760:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a764:	80 02       	ld.sh	r2,r0[0x0]
8002a766:	a5 a2       	sbr	r2,0x4

8002a768 <usart_init_modem>:
8002a768:	eb cd 40 c0 	pushm	r6-r7,lr
8002a76c:	1a 97       	mov	r7,sp
8002a76e:	20 3d       	sub	sp,12
8002a770:	49 36       	lddpc	r6,8002a7bc <usart_init_modem+0x54>
8002a772:	1e 26       	rsub	r6,pc
8002a774:	ef 4c ff fc 	st.w	r7[-4],r12
8002a778:	ef 4b ff f8 	st.w	r7[-8],r11
8002a77c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a780:	ee fa ff f4 	ld.w	r10,r7[-12]
8002a784:	ee fb ff f8 	ld.w	r11,r7[-8]
8002a788:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a78c:	f0 16 00 68 	mcall	r6[416]
8002a790:	18 98       	mov	r8,r12
8002a792:	58 18       	cp.w	r8,1
8002a794:	c0 31       	brne	8002a79a <usart_init_modem+0x32>
8002a796:	30 18       	mov	r8,1
8002a798:	c0 d8       	rjmp	8002a7b2 <usart_init_modem+0x4a>
8002a79a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a79e:	70 18       	ld.w	r8,r8[0x4]
8002a7a0:	e0 18 ff f0 	andl	r8,0xfff0
8002a7a4:	10 99       	mov	r9,r8
8002a7a6:	e8 19 00 03 	orl	r9,0x3
8002a7aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7ae:	91 19       	st.w	r8[0x4],r9
8002a7b0:	30 08       	mov	r8,0
8002a7b2:	10 9c       	mov	r12,r8
8002a7b4:	2f dd       	sub	sp,-12
8002a7b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a7ba:	00 00       	add	r0,r0
8002a7bc:	80 02       	ld.sh	r2,r0[0x0]
8002a7be:	a5 f6       	*unknown*

8002a7c0 <usart_init_sync_master>:
8002a7c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a7c4:	1a 97       	mov	r7,sp
8002a7c6:	20 3d       	sub	sp,12
8002a7c8:	4d e6       	lddpc	r6,8002a940 <usart_init_sync_master+0x180>
8002a7ca:	1e 26       	rsub	r6,pc
8002a7cc:	ef 4c ff fc 	st.w	r7[-4],r12
8002a7d0:	ef 4b ff f8 	st.w	r7[-8],r11
8002a7d4:	ef 4a ff f4 	st.w	r7[-12],r10
8002a7d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a7dc:	f0 16 00 4c 	mcall	r6[304]
8002a7e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7e4:	58 08       	cp.w	r8,0
8002a7e6:	c4 00       	breq	8002a866 <usart_init_sync_master+0xa6>
8002a7e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7ec:	11 c9       	ld.ub	r9,r8[0x4]
8002a7ee:	30 48       	mov	r8,4
8002a7f0:	f0 09 18 00 	cp.b	r9,r8
8002a7f4:	e0 88 00 39 	brls	8002a866 <usart_init_sync_master+0xa6>
8002a7f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a7fc:	11 c9       	ld.ub	r9,r8[0x4]
8002a7fe:	30 98       	mov	r8,9
8002a800:	f0 09 18 00 	cp.b	r9,r8
8002a804:	e0 8b 00 31 	brhi	8002a866 <usart_init_sync_master+0xa6>
8002a808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a80c:	11 d9       	ld.ub	r9,r8[0x5]
8002a80e:	30 78       	mov	r8,7
8002a810:	f0 09 18 00 	cp.b	r9,r8
8002a814:	e0 8b 00 29 	brhi	8002a866 <usart_init_sync_master+0xa6>
8002a818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a81c:	90 39       	ld.sh	r9,r8[0x6]
8002a81e:	30 18       	mov	r8,1
8002a820:	f0 09 19 00 	cp.h	r9,r8
8002a824:	c2 10       	breq	8002a866 <usart_init_sync_master+0xa6>
8002a826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a82a:	90 39       	ld.sh	r9,r8[0x6]
8002a82c:	e0 68 01 01 	mov	r8,257
8002a830:	f0 09 19 00 	cp.h	r9,r8
8002a834:	e0 8b 00 19 	brhi	8002a866 <usart_init_sync_master+0xa6>
8002a838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a83c:	f1 39 00 08 	ld.ub	r9,r8[8]
8002a840:	30 38       	mov	r8,3
8002a842:	f0 09 18 00 	cp.b	r9,r8
8002a846:	e0 8b 00 10 	brhi	8002a866 <usart_init_sync_master+0xa6>
8002a84a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a84e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a852:	70 08       	ld.w	r8,r8[0x0]
8002a854:	12 9a       	mov	r10,r9
8002a856:	10 9b       	mov	r11,r8
8002a858:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a85c:	fe b0 fc dd 	rcall	8002a216 <usart_set_sync_master_baudrate>
8002a860:	18 98       	mov	r8,r12
8002a862:	58 18       	cp.w	r8,1
8002a864:	c0 31       	brne	8002a86a <usart_init_sync_master+0xaa>
8002a866:	30 18       	mov	r8,1
8002a868:	c6 78       	rjmp	8002a936 <usart_init_sync_master+0x176>
8002a86a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a86e:	11 c9       	ld.ub	r9,r8[0x4]
8002a870:	30 98       	mov	r8,9
8002a872:	f0 09 18 00 	cp.b	r9,r8
8002a876:	c0 a1       	brne	8002a88a <usart_init_sync_master+0xca>
8002a878:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a87c:	70 18       	ld.w	r8,r8[0x4]
8002a87e:	10 99       	mov	r9,r8
8002a880:	b1 b9       	sbr	r9,0x11
8002a882:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a886:	91 19       	st.w	r8[0x4],r9
8002a888:	c0 d8       	rjmp	8002a8a2 <usart_init_sync_master+0xe2>
8002a88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a88e:	70 19       	ld.w	r9,r8[0x4]
8002a890:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a894:	11 c8       	ld.ub	r8,r8[0x4]
8002a896:	20 58       	sub	r8,5
8002a898:	a7 68       	lsl	r8,0x6
8002a89a:	10 49       	or	r9,r8
8002a89c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8a0:	91 19       	st.w	r8[0x4],r9
8002a8a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8a6:	70 19       	ld.w	r9,r8[0x4]
8002a8a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8ac:	11 d8       	ld.ub	r8,r8[0x5]
8002a8ae:	f0 0a 15 09 	lsl	r10,r8,0x9
8002a8b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8b6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a8ba:	af 68       	lsl	r8,0xe
8002a8bc:	f5 e8 10 08 	or	r8,r10,r8
8002a8c0:	10 49       	or	r9,r8
8002a8c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8c6:	91 19       	st.w	r8[0x4],r9
8002a8c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8cc:	90 39       	ld.sh	r9,r8[0x6]
8002a8ce:	30 28       	mov	r8,2
8002a8d0:	f0 09 19 00 	cp.h	r9,r8
8002a8d4:	e0 88 00 14 	brls	8002a8fc <usart_init_sync_master+0x13c>
8002a8d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8dc:	70 18       	ld.w	r8,r8[0x4]
8002a8de:	10 99       	mov	r9,r8
8002a8e0:	ad b9       	sbr	r9,0xd
8002a8e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8e6:	91 19       	st.w	r8[0x4],r9
8002a8e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8ec:	90 38       	ld.sh	r8,r8[0x6]
8002a8ee:	5c 78       	castu.h	r8
8002a8f0:	20 28       	sub	r8,2
8002a8f2:	10 99       	mov	r9,r8
8002a8f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8f8:	91 a9       	st.w	r8[0x28],r9
8002a8fa:	c0 d8       	rjmp	8002a914 <usart_init_sync_master+0x154>
8002a8fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a900:	70 19       	ld.w	r9,r8[0x4]
8002a902:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a906:	90 38       	ld.sh	r8,r8[0x6]
8002a908:	5c 78       	castu.h	r8
8002a90a:	ad 68       	lsl	r8,0xc
8002a90c:	10 49       	or	r9,r8
8002a90e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a912:	91 19       	st.w	r8[0x4],r9
8002a914:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a918:	70 18       	ld.w	r8,r8[0x4]
8002a91a:	e4 18 ff fb 	andh	r8,0xfffb
8002a91e:	e0 18 ff f0 	andl	r8,0xfff0
8002a922:	10 99       	mov	r9,r8
8002a924:	b3 a9       	sbr	r9,0x12
8002a926:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a92a:	91 19       	st.w	r8[0x4],r9
8002a92c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a930:	35 09       	mov	r9,80
8002a932:	91 09       	st.w	r8[0x0],r9
8002a934:	30 08       	mov	r8,0
8002a936:	10 9c       	mov	r12,r8
8002a938:	2f dd       	sub	sp,-12
8002a93a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a93e:	00 00       	add	r0,r0
8002a940:	80 02       	ld.sh	r2,r0[0x0]
8002a942:	a6 4e       	st.h	r3[0x8],lr

8002a944 <usart_init_sync_slave>:
8002a944:	eb cd 40 c0 	pushm	r6-r7,lr
8002a948:	1a 97       	mov	r7,sp
8002a94a:	20 3d       	sub	sp,12
8002a94c:	4d 96       	lddpc	r6,8002aab0 <usart_init_sync_slave+0x16c>
8002a94e:	1e 26       	rsub	r6,pc
8002a950:	ef 4c ff fc 	st.w	r7[-4],r12
8002a954:	ef 4b ff f8 	st.w	r7[-8],r11
8002a958:	ef 4a ff f4 	st.w	r7[-12],r10
8002a95c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a960:	f0 16 00 4c 	mcall	r6[304]
8002a964:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a968:	58 08       	cp.w	r8,0
8002a96a:	c3 90       	breq	8002a9dc <usart_init_sync_slave+0x98>
8002a96c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a970:	11 c9       	ld.ub	r9,r8[0x4]
8002a972:	30 48       	mov	r8,4
8002a974:	f0 09 18 00 	cp.b	r9,r8
8002a978:	e0 88 00 32 	brls	8002a9dc <usart_init_sync_slave+0x98>
8002a97c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a980:	11 c9       	ld.ub	r9,r8[0x4]
8002a982:	30 98       	mov	r8,9
8002a984:	f0 09 18 00 	cp.b	r9,r8
8002a988:	e0 8b 00 2a 	brhi	8002a9dc <usart_init_sync_slave+0x98>
8002a98c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a990:	11 d9       	ld.ub	r9,r8[0x5]
8002a992:	30 78       	mov	r8,7
8002a994:	f0 09 18 00 	cp.b	r9,r8
8002a998:	e0 8b 00 22 	brhi	8002a9dc <usart_init_sync_slave+0x98>
8002a99c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9a0:	90 39       	ld.sh	r9,r8[0x6]
8002a9a2:	30 18       	mov	r8,1
8002a9a4:	f0 09 19 00 	cp.h	r9,r8
8002a9a8:	c1 a0       	breq	8002a9dc <usart_init_sync_slave+0x98>
8002a9aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9ae:	90 39       	ld.sh	r9,r8[0x6]
8002a9b0:	e0 68 01 01 	mov	r8,257
8002a9b4:	f0 09 19 00 	cp.h	r9,r8
8002a9b8:	e0 8b 00 12 	brhi	8002a9dc <usart_init_sync_slave+0x98>
8002a9bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9c0:	f1 39 00 08 	ld.ub	r9,r8[8]
8002a9c4:	30 38       	mov	r8,3
8002a9c6:	f0 09 18 00 	cp.b	r9,r8
8002a9ca:	e0 8b 00 09 	brhi	8002a9dc <usart_init_sync_slave+0x98>
8002a9ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a9d2:	fe b0 fc 5a 	rcall	8002a286 <usart_set_sync_slave_baudrate>
8002a9d6:	18 98       	mov	r8,r12
8002a9d8:	58 18       	cp.w	r8,1
8002a9da:	c0 31       	brne	8002a9e0 <usart_init_sync_slave+0x9c>
8002a9dc:	30 18       	mov	r8,1
8002a9de:	c6 48       	rjmp	8002aaa6 <usart_init_sync_slave+0x162>
8002a9e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9e4:	11 c9       	ld.ub	r9,r8[0x4]
8002a9e6:	30 98       	mov	r8,9
8002a9e8:	f0 09 18 00 	cp.b	r9,r8
8002a9ec:	c0 a1       	brne	8002aa00 <usart_init_sync_slave+0xbc>
8002a9ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9f2:	70 18       	ld.w	r8,r8[0x4]
8002a9f4:	10 99       	mov	r9,r8
8002a9f6:	b1 b9       	sbr	r9,0x11
8002a9f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9fc:	91 19       	st.w	r8[0x4],r9
8002a9fe:	c0 d8       	rjmp	8002aa18 <usart_init_sync_slave+0xd4>
8002aa00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa04:	70 19       	ld.w	r9,r8[0x4]
8002aa06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa0a:	11 c8       	ld.ub	r8,r8[0x4]
8002aa0c:	20 58       	sub	r8,5
8002aa0e:	a7 68       	lsl	r8,0x6
8002aa10:	10 49       	or	r9,r8
8002aa12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa16:	91 19       	st.w	r8[0x4],r9
8002aa18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa1c:	70 19       	ld.w	r9,r8[0x4]
8002aa1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa22:	11 d8       	ld.ub	r8,r8[0x5]
8002aa24:	f0 0a 15 09 	lsl	r10,r8,0x9
8002aa28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa2c:	f1 38 00 08 	ld.ub	r8,r8[8]
8002aa30:	af 68       	lsl	r8,0xe
8002aa32:	f5 e8 10 08 	or	r8,r10,r8
8002aa36:	10 49       	or	r9,r8
8002aa38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa3c:	91 19       	st.w	r8[0x4],r9
8002aa3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa42:	90 39       	ld.sh	r9,r8[0x6]
8002aa44:	30 28       	mov	r8,2
8002aa46:	f0 09 19 00 	cp.h	r9,r8
8002aa4a:	e0 88 00 14 	brls	8002aa72 <usart_init_sync_slave+0x12e>
8002aa4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa52:	70 18       	ld.w	r8,r8[0x4]
8002aa54:	10 99       	mov	r9,r8
8002aa56:	ad b9       	sbr	r9,0xd
8002aa58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa5c:	91 19       	st.w	r8[0x4],r9
8002aa5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa62:	90 38       	ld.sh	r8,r8[0x6]
8002aa64:	5c 78       	castu.h	r8
8002aa66:	20 28       	sub	r8,2
8002aa68:	10 99       	mov	r9,r8
8002aa6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa6e:	91 a9       	st.w	r8[0x28],r9
8002aa70:	c0 d8       	rjmp	8002aa8a <usart_init_sync_slave+0x146>
8002aa72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa76:	70 19       	ld.w	r9,r8[0x4]
8002aa78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa7c:	90 38       	ld.sh	r8,r8[0x6]
8002aa7e:	5c 78       	castu.h	r8
8002aa80:	ad 68       	lsl	r8,0xc
8002aa82:	10 49       	or	r9,r8
8002aa84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa88:	91 19       	st.w	r8[0x4],r9
8002aa8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa8e:	70 18       	ld.w	r8,r8[0x4]
8002aa90:	10 99       	mov	r9,r8
8002aa92:	e0 19 ff f0 	andl	r9,0xfff0
8002aa96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa9a:	91 19       	st.w	r8[0x4],r9
8002aa9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaa0:	35 09       	mov	r9,80
8002aaa2:	91 09       	st.w	r8[0x0],r9
8002aaa4:	30 08       	mov	r8,0
8002aaa6:	10 9c       	mov	r12,r8
8002aaa8:	2f dd       	sub	sp,-12
8002aaaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002aaae:	00 00       	add	r0,r0
8002aab0:	80 02       	ld.sh	r2,r0[0x0]
8002aab2:	a7 d2       	cbr	r2,0x7

8002aab4 <usart_init_rs485>:
8002aab4:	eb cd 40 c0 	pushm	r6-r7,lr
8002aab8:	1a 97       	mov	r7,sp
8002aaba:	20 3d       	sub	sp,12
8002aabc:	49 26       	lddpc	r6,8002ab04 <usart_init_rs485+0x50>
8002aabe:	1e 26       	rsub	r6,pc
8002aac0:	ef 4c ff fc 	st.w	r7[-4],r12
8002aac4:	ef 4b ff f8 	st.w	r7[-8],r11
8002aac8:	ef 4a ff f4 	st.w	r7[-12],r10
8002aacc:	ee fa ff f4 	ld.w	r10,r7[-12]
8002aad0:	ee fb ff f8 	ld.w	r11,r7[-8]
8002aad4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002aad8:	f0 16 00 68 	mcall	r6[416]
8002aadc:	18 98       	mov	r8,r12
8002aade:	58 18       	cp.w	r8,1
8002aae0:	c0 31       	brne	8002aae6 <usart_init_rs485+0x32>
8002aae2:	30 18       	mov	r8,1
8002aae4:	c0 c8       	rjmp	8002aafc <usart_init_rs485+0x48>
8002aae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaea:	70 18       	ld.w	r8,r8[0x4]
8002aaec:	e0 18 ff f0 	andl	r8,0xfff0
8002aaf0:	10 99       	mov	r9,r8
8002aaf2:	a1 a9       	sbr	r9,0x0
8002aaf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaf8:	91 19       	st.w	r8[0x4],r9
8002aafa:	30 08       	mov	r8,0
8002aafc:	10 9c       	mov	r12,r8
8002aafe:	2f dd       	sub	sp,-12
8002ab00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab04:	80 02       	ld.sh	r2,r0[0x0]
8002ab06:	a9 42       	asr	r2,0x8

8002ab08 <usart_init_IrDA>:
8002ab08:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab0c:	1a 97       	mov	r7,sp
8002ab0e:	20 4d       	sub	sp,16
8002ab10:	49 96       	lddpc	r6,8002ab74 <usart_init_IrDA+0x6c>
8002ab12:	1e 26       	rsub	r6,pc
8002ab14:	ef 4c ff fc 	st.w	r7[-4],r12
8002ab18:	ef 4b ff f8 	st.w	r7[-8],r11
8002ab1c:	ef 4a ff f4 	st.w	r7[-12],r10
8002ab20:	12 98       	mov	r8,r9
8002ab22:	ef 68 ff f0 	st.b	r7[-16],r8
8002ab26:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ab2a:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ab2e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ab32:	f0 16 00 68 	mcall	r6[416]
8002ab36:	18 98       	mov	r8,r12
8002ab38:	58 18       	cp.w	r8,1
8002ab3a:	c0 31       	brne	8002ab40 <usart_init_IrDA+0x38>
8002ab3c:	30 18       	mov	r8,1
8002ab3e:	c1 78       	rjmp	8002ab6c <usart_init_IrDA+0x64>
8002ab40:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002ab44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab48:	f1 49 00 4c 	st.w	r8[76],r9
8002ab4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab50:	70 18       	ld.w	r8,r8[0x4]
8002ab52:	e4 18 ef ff 	andh	r8,0xefff
8002ab56:	e0 18 ff f0 	andl	r8,0xfff0
8002ab5a:	10 99       	mov	r9,r8
8002ab5c:	ea 19 10 00 	orh	r9,0x1000
8002ab60:	e8 19 00 08 	orl	r9,0x8
8002ab64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab68:	91 19       	st.w	r8[0x4],r9
8002ab6a:	30 08       	mov	r8,0
8002ab6c:	10 9c       	mov	r12,r8
8002ab6e:	2f cd       	sub	sp,-16
8002ab70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab74:	80 02       	ld.sh	r2,r0[0x0]
8002ab76:	a9 96       	lsr	r6,0x9

8002ab78 <usart_init_iso7816>:
8002ab78:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab7c:	1a 97       	mov	r7,sp
8002ab7e:	20 5d       	sub	sp,20
8002ab80:	4c 46       	lddpc	r6,8002ac90 <usart_init_iso7816+0x118>
8002ab82:	1e 26       	rsub	r6,pc
8002ab84:	ef 4c ff f8 	st.w	r7[-8],r12
8002ab88:	ef 4b ff f4 	st.w	r7[-12],r11
8002ab8c:	ef 4a ff f0 	st.w	r7[-16],r10
8002ab90:	ef 49 ff ec 	st.w	r7[-20],r9
8002ab94:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ab98:	f0 16 00 4c 	mcall	r6[304]
8002ab9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aba0:	58 08       	cp.w	r8,0
8002aba2:	c0 90       	breq	8002abb4 <usart_init_iso7816+0x3c>
8002aba4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aba8:	11 e9       	ld.ub	r9,r8[0x6]
8002abaa:	30 18       	mov	r8,1
8002abac:	f0 09 18 00 	cp.b	r9,r8
8002abb0:	e0 88 00 04 	brls	8002abb8 <usart_init_iso7816+0x40>
8002abb4:	30 18       	mov	r8,1
8002abb6:	c6 98       	rjmp	8002ac88 <usart_init_iso7816+0x110>
8002abb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abbc:	58 08       	cp.w	r8,0
8002abbe:	c0 c1       	brne	8002abd6 <usart_init_iso7816+0x5e>
8002abc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abc4:	70 58       	ld.w	r8,r8[0x14]
8002abc6:	b1 68       	lsl	r8,0x10
8002abc8:	e8 18 20 04 	orl	r8,0x2004
8002abcc:	10 99       	mov	r9,r8
8002abce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abd2:	91 19       	st.w	r8[0x4],r9
8002abd4:	c1 98       	rjmp	8002ac06 <usart_init_iso7816+0x8e>
8002abd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abda:	58 18       	cp.w	r8,1
8002abdc:	c1 31       	brne	8002ac02 <usart_init_iso7816+0x8a>
8002abde:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abe2:	70 58       	ld.w	r8,r8[0x14]
8002abe4:	58 08       	cp.w	r8,0
8002abe6:	c0 71       	brne	8002abf4 <usart_init_iso7816+0x7c>
8002abe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002abec:	f1 38 00 10 	ld.ub	r8,r8[16]
8002abf0:	58 08       	cp.w	r8,0
8002abf2:	c0 30       	breq	8002abf8 <usart_init_iso7816+0x80>
8002abf4:	30 18       	mov	r8,1
8002abf6:	c4 98       	rjmp	8002ac88 <usart_init_iso7816+0x110>
8002abf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abfc:	30 69       	mov	r9,6
8002abfe:	91 19       	st.w	r8[0x4],r9
8002ac00:	c0 38       	rjmp	8002ac06 <usart_init_iso7816+0x8e>
8002ac02:	30 18       	mov	r8,1
8002ac04:	c4 28       	rjmp	8002ac88 <usart_init_iso7816+0x110>
8002ac06:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002ac0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac0e:	70 08       	ld.w	r8,r8[0x0]
8002ac10:	12 9a       	mov	r10,r9
8002ac12:	10 9b       	mov	r11,r8
8002ac14:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ac18:	fe b0 fb 4b 	rcall	8002a2ae <usart_set_iso7816_clock>
8002ac1c:	18 98       	mov	r8,r12
8002ac1e:	58 18       	cp.w	r8,1
8002ac20:	c0 31       	brne	8002ac26 <usart_init_iso7816+0xae>
8002ac22:	30 18       	mov	r8,1
8002ac24:	c3 28       	rjmp	8002ac88 <usart_init_iso7816+0x110>
8002ac26:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac2a:	90 28       	ld.sh	r8,r8[0x4]
8002ac2c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002ac30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac34:	f1 49 00 40 	st.w	r8[64],r9
8002ac38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac3c:	70 19       	ld.w	r9,r8[0x4]
8002ac3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac42:	11 e8       	ld.ub	r8,r8[0x6]
8002ac44:	a9 78       	lsl	r8,0x9
8002ac46:	10 9a       	mov	r10,r8
8002ac48:	b3 aa       	sbr	r10,0x12
8002ac4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac4e:	70 28       	ld.w	r8,r8[0x8]
8002ac50:	b5 68       	lsl	r8,0x14
8002ac52:	10 4a       	or	r10,r8
8002ac54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac58:	70 38       	ld.w	r8,r8[0xc]
8002ac5a:	b5 78       	lsl	r8,0x15
8002ac5c:	10 4a       	or	r10,r8
8002ac5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ac62:	f1 38 00 10 	ld.ub	r8,r8[16]
8002ac66:	b9 68       	lsl	r8,0x18
8002ac68:	f5 e8 10 08 	or	r8,r10,r8
8002ac6c:	10 49       	or	r9,r8
8002ac6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac72:	91 19       	st.w	r8[0x4],r9
8002ac74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac78:	ef 48 ff fc 	st.w	r7[-4],r8
8002ac7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac80:	e0 69 00 90 	mov	r9,144
8002ac84:	91 09       	st.w	r8[0x0],r9
8002ac86:	30 08       	mov	r8,0
8002ac88:	10 9c       	mov	r12,r8
8002ac8a:	2f bd       	sub	sp,-20
8002ac8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ac90:	80 02       	ld.sh	r2,r0[0x0]
8002ac92:	aa 06       	st.h	r5[0x0],r6

8002ac94 <usart_init_lin_master>:
8002ac94:	eb cd 40 c0 	pushm	r6-r7,lr
8002ac98:	1a 97       	mov	r7,sp
8002ac9a:	20 3d       	sub	sp,12
8002ac9c:	49 66       	lddpc	r6,8002acf4 <usart_init_lin_master+0x60>
8002ac9e:	1e 26       	rsub	r6,pc
8002aca0:	ef 4c ff fc 	st.w	r7[-4],r12
8002aca4:	ef 4b ff f8 	st.w	r7[-8],r11
8002aca8:	ef 4a ff f4 	st.w	r7[-12],r10
8002acac:	ee fc ff fc 	ld.w	r12,r7[-4]
8002acb0:	f0 16 00 4c 	mcall	r6[304]
8002acb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002acb8:	10 9a       	mov	r10,r8
8002acba:	ee fb ff f8 	ld.w	r11,r7[-8]
8002acbe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002acc2:	fe b0 fa 41 	rcall	8002a144 <usart_set_async_baudrate>
8002acc6:	18 98       	mov	r8,r12
8002acc8:	58 18       	cp.w	r8,1
8002acca:	c0 31       	brne	8002acd0 <usart_init_lin_master+0x3c>
8002accc:	30 18       	mov	r8,1
8002acce:	c0 f8       	rjmp	8002acec <usart_init_lin_master+0x58>
8002acd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acd4:	70 18       	ld.w	r8,r8[0x4]
8002acd6:	10 99       	mov	r9,r8
8002acd8:	e8 19 00 0a 	orl	r9,0xa
8002acdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ace0:	91 19       	st.w	r8[0x4],r9
8002ace2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ace6:	35 09       	mov	r9,80
8002ace8:	91 09       	st.w	r8[0x0],r9
8002acea:	30 08       	mov	r8,0
8002acec:	10 9c       	mov	r12,r8
8002acee:	2f dd       	sub	sp,-12
8002acf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002acf4:	80 02       	ld.sh	r2,r0[0x0]
8002acf6:	ab 22       	st.d	r5++,r2

8002acf8 <usart_init_lin_slave>:
8002acf8:	eb cd 40 c0 	pushm	r6-r7,lr
8002acfc:	1a 97       	mov	r7,sp
8002acfe:	20 3d       	sub	sp,12
8002ad00:	49 66       	lddpc	r6,8002ad58 <usart_init_lin_slave+0x60>
8002ad02:	1e 26       	rsub	r6,pc
8002ad04:	ef 4c ff fc 	st.w	r7[-4],r12
8002ad08:	ef 4b ff f8 	st.w	r7[-8],r11
8002ad0c:	ef 4a ff f4 	st.w	r7[-12],r10
8002ad10:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ad14:	f0 16 00 4c 	mcall	r6[304]
8002ad18:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad1c:	10 9a       	mov	r10,r8
8002ad1e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ad22:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ad26:	fe b0 fa 0f 	rcall	8002a144 <usart_set_async_baudrate>
8002ad2a:	18 98       	mov	r8,r12
8002ad2c:	58 18       	cp.w	r8,1
8002ad2e:	c0 31       	brne	8002ad34 <usart_init_lin_slave+0x3c>
8002ad30:	30 18       	mov	r8,1
8002ad32:	c0 f8       	rjmp	8002ad50 <usart_init_lin_slave+0x58>
8002ad34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad38:	70 18       	ld.w	r8,r8[0x4]
8002ad3a:	10 99       	mov	r9,r8
8002ad3c:	e8 19 00 0b 	orl	r9,0xb
8002ad40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad44:	91 19       	st.w	r8[0x4],r9
8002ad46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad4a:	35 09       	mov	r9,80
8002ad4c:	91 09       	st.w	r8[0x0],r9
8002ad4e:	30 08       	mov	r8,0
8002ad50:	10 9c       	mov	r12,r8
8002ad52:	2f dd       	sub	sp,-12
8002ad54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ad58:	80 02       	ld.sh	r2,r0[0x0]
8002ad5a:	ab 86       	lsr	r6,0xa

8002ad5c <usart_init_spi_master>:
8002ad5c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ad60:	1a 97       	mov	r7,sp
8002ad62:	20 3d       	sub	sp,12
8002ad64:	4c 46       	lddpc	r6,8002ae74 <usart_init_spi_master+0x118>
8002ad66:	1e 26       	rsub	r6,pc
8002ad68:	ef 4c ff fc 	st.w	r7[-4],r12
8002ad6c:	ef 4b ff f8 	st.w	r7[-8],r11
8002ad70:	ef 4a ff f4 	st.w	r7[-12],r10
8002ad74:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ad78:	f0 16 00 4c 	mcall	r6[304]
8002ad7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad80:	58 08       	cp.w	r8,0
8002ad82:	c2 f0       	breq	8002ade0 <usart_init_spi_master+0x84>
8002ad84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad88:	11 c9       	ld.ub	r9,r8[0x4]
8002ad8a:	30 48       	mov	r8,4
8002ad8c:	f0 09 18 00 	cp.b	r9,r8
8002ad90:	e0 88 00 28 	brls	8002ade0 <usart_init_spi_master+0x84>
8002ad94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad98:	11 c9       	ld.ub	r9,r8[0x4]
8002ad9a:	30 98       	mov	r8,9
8002ad9c:	f0 09 18 00 	cp.b	r9,r8
8002ada0:	e0 8b 00 20 	brhi	8002ade0 <usart_init_spi_master+0x84>
8002ada4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ada8:	11 d9       	ld.ub	r9,r8[0x5]
8002adaa:	30 38       	mov	r8,3
8002adac:	f0 09 18 00 	cp.b	r9,r8
8002adb0:	e0 8b 00 18 	brhi	8002ade0 <usart_init_spi_master+0x84>
8002adb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adb8:	11 e9       	ld.ub	r9,r8[0x6]
8002adba:	30 38       	mov	r8,3
8002adbc:	f0 09 18 00 	cp.b	r9,r8
8002adc0:	e0 8b 00 10 	brhi	8002ade0 <usart_init_spi_master+0x84>
8002adc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002adc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adcc:	70 08       	ld.w	r8,r8[0x0]
8002adce:	12 9a       	mov	r10,r9
8002add0:	10 9b       	mov	r11,r8
8002add2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002add6:	fe b0 fa a5 	rcall	8002a320 <usart_set_spi_master_baudrate>
8002adda:	18 98       	mov	r8,r12
8002addc:	58 18       	cp.w	r8,1
8002adde:	c0 31       	brne	8002ade4 <usart_init_spi_master+0x88>
8002ade0:	30 18       	mov	r8,1
8002ade2:	c4 48       	rjmp	8002ae6a <usart_init_spi_master+0x10e>
8002ade4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ade8:	11 c9       	ld.ub	r9,r8[0x4]
8002adea:	30 98       	mov	r8,9
8002adec:	f0 09 18 00 	cp.b	r9,r8
8002adf0:	c0 a1       	brne	8002ae04 <usart_init_spi_master+0xa8>
8002adf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adf6:	70 18       	ld.w	r8,r8[0x4]
8002adf8:	10 99       	mov	r9,r8
8002adfa:	b1 b9       	sbr	r9,0x11
8002adfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae00:	91 19       	st.w	r8[0x4],r9
8002ae02:	c0 d8       	rjmp	8002ae1c <usart_init_spi_master+0xc0>
8002ae04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae08:	70 19       	ld.w	r9,r8[0x4]
8002ae0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae0e:	11 c8       	ld.ub	r8,r8[0x4]
8002ae10:	20 58       	sub	r8,5
8002ae12:	a7 68       	lsl	r8,0x6
8002ae14:	10 49       	or	r9,r8
8002ae16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae1a:	91 19       	st.w	r8[0x4],r9
8002ae1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae20:	70 19       	ld.w	r9,r8[0x4]
8002ae22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae26:	11 d8       	ld.ub	r8,r8[0x5]
8002ae28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ae2c:	c0 41       	brne	8002ae34 <usart_init_spi_master+0xd8>
8002ae2e:	e0 68 01 0e 	mov	r8,270
8002ae32:	c0 28       	rjmp	8002ae36 <usart_init_spi_master+0xda>
8002ae34:	30 e8       	mov	r8,14
8002ae36:	ee fa ff f8 	ld.w	r10,r7[-8]
8002ae3a:	15 ea       	ld.ub	r10,r10[0x6]
8002ae3c:	af 6a       	lsl	r10,0xe
8002ae3e:	f1 ea 10 0a 	or	r10,r8,r10
8002ae42:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae46:	11 d8       	ld.ub	r8,r8[0x5]
8002ae48:	a1 98       	lsr	r8,0x1
8002ae4a:	5c 58       	castu.b	r8
8002ae4c:	b1 68       	lsl	r8,0x10
8002ae4e:	f5 e8 10 08 	or	r8,r10,r8
8002ae52:	f3 e8 10 08 	or	r8,r9,r8
8002ae56:	10 99       	mov	r9,r8
8002ae58:	b3 a9       	sbr	r9,0x12
8002ae5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae5e:	91 19       	st.w	r8[0x4],r9
8002ae60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae64:	35 09       	mov	r9,80
8002ae66:	91 09       	st.w	r8[0x0],r9
8002ae68:	30 08       	mov	r8,0
8002ae6a:	10 9c       	mov	r12,r8
8002ae6c:	2f dd       	sub	sp,-12
8002ae6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ae72:	00 00       	add	r0,r0
8002ae74:	80 02       	ld.sh	r2,r0[0x0]
8002ae76:	ab ea       	*unknown*

8002ae78 <usart_init_spi_slave>:
8002ae78:	eb cd 40 c0 	pushm	r6-r7,lr
8002ae7c:	1a 97       	mov	r7,sp
8002ae7e:	20 3d       	sub	sp,12
8002ae80:	4b f6       	lddpc	r6,8002af7c <usart_init_spi_slave+0x104>
8002ae82:	1e 26       	rsub	r6,pc
8002ae84:	ef 4c ff fc 	st.w	r7[-4],r12
8002ae88:	ef 4b ff f8 	st.w	r7[-8],r11
8002ae8c:	ef 4a ff f4 	st.w	r7[-12],r10
8002ae90:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae94:	f0 16 00 4c 	mcall	r6[304]
8002ae98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae9c:	58 08       	cp.w	r8,0
8002ae9e:	c2 80       	breq	8002aeee <usart_init_spi_slave+0x76>
8002aea0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aea4:	11 c9       	ld.ub	r9,r8[0x4]
8002aea6:	30 48       	mov	r8,4
8002aea8:	f0 09 18 00 	cp.b	r9,r8
8002aeac:	e0 88 00 21 	brls	8002aeee <usart_init_spi_slave+0x76>
8002aeb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aeb4:	11 c9       	ld.ub	r9,r8[0x4]
8002aeb6:	30 98       	mov	r8,9
8002aeb8:	f0 09 18 00 	cp.b	r9,r8
8002aebc:	e0 8b 00 19 	brhi	8002aeee <usart_init_spi_slave+0x76>
8002aec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aec4:	11 d9       	ld.ub	r9,r8[0x5]
8002aec6:	30 38       	mov	r8,3
8002aec8:	f0 09 18 00 	cp.b	r9,r8
8002aecc:	e0 8b 00 11 	brhi	8002aeee <usart_init_spi_slave+0x76>
8002aed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aed4:	11 e9       	ld.ub	r9,r8[0x6]
8002aed6:	30 38       	mov	r8,3
8002aed8:	f0 09 18 00 	cp.b	r9,r8
8002aedc:	e0 8b 00 09 	brhi	8002aeee <usart_init_spi_slave+0x76>
8002aee0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002aee4:	fe b0 fa 56 	rcall	8002a390 <usart_set_spi_slave_baudrate>
8002aee8:	18 98       	mov	r8,r12
8002aeea:	58 18       	cp.w	r8,1
8002aeec:	c0 31       	brne	8002aef2 <usart_init_spi_slave+0x7a>
8002aeee:	30 18       	mov	r8,1
8002aef0:	c4 18       	rjmp	8002af72 <usart_init_spi_slave+0xfa>
8002aef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aef6:	11 c9       	ld.ub	r9,r8[0x4]
8002aef8:	30 98       	mov	r8,9
8002aefa:	f0 09 18 00 	cp.b	r9,r8
8002aefe:	c0 a1       	brne	8002af12 <usart_init_spi_slave+0x9a>
8002af00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af04:	70 18       	ld.w	r8,r8[0x4]
8002af06:	10 99       	mov	r9,r8
8002af08:	b1 b9       	sbr	r9,0x11
8002af0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af0e:	91 19       	st.w	r8[0x4],r9
8002af10:	c0 d8       	rjmp	8002af2a <usart_init_spi_slave+0xb2>
8002af12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af16:	70 19       	ld.w	r9,r8[0x4]
8002af18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af1c:	11 c8       	ld.ub	r8,r8[0x4]
8002af1e:	20 58       	sub	r8,5
8002af20:	a7 68       	lsl	r8,0x6
8002af22:	10 49       	or	r9,r8
8002af24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af28:	91 19       	st.w	r8[0x4],r9
8002af2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af2e:	70 19       	ld.w	r9,r8[0x4]
8002af30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af34:	11 d8       	ld.ub	r8,r8[0x5]
8002af36:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002af3a:	c0 41       	brne	8002af42 <usart_init_spi_slave+0xca>
8002af3c:	e0 68 01 0f 	mov	r8,271
8002af40:	c0 28       	rjmp	8002af44 <usart_init_spi_slave+0xcc>
8002af42:	30 f8       	mov	r8,15
8002af44:	ee fa ff f8 	ld.w	r10,r7[-8]
8002af48:	15 ea       	ld.ub	r10,r10[0x6]
8002af4a:	af 6a       	lsl	r10,0xe
8002af4c:	f1 ea 10 0a 	or	r10,r8,r10
8002af50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af54:	11 d8       	ld.ub	r8,r8[0x5]
8002af56:	a1 98       	lsr	r8,0x1
8002af58:	5c 58       	castu.b	r8
8002af5a:	b1 68       	lsl	r8,0x10
8002af5c:	f5 e8 10 08 	or	r8,r10,r8
8002af60:	10 49       	or	r9,r8
8002af62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af66:	91 19       	st.w	r8[0x4],r9
8002af68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af6c:	35 09       	mov	r9,80
8002af6e:	91 09       	st.w	r8[0x0],r9
8002af70:	30 08       	mov	r8,0
8002af72:	10 9c       	mov	r12,r8
8002af74:	2f dd       	sub	sp,-12
8002af76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002af7a:	00 00       	add	r0,r0
8002af7c:	80 02       	ld.sh	r2,r0[0x0]
8002af7e:	ad 06       	ld.d	r6,r6

8002af80 <usart_spi_selectChip>:
8002af80:	eb cd 40 80 	pushm	r7,lr
8002af84:	1a 97       	mov	r7,sp
8002af86:	20 1d       	sub	sp,4
8002af88:	ef 4c ff fc 	st.w	r7[-4],r12
8002af8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af90:	e4 69 00 00 	mov	r9,262144
8002af94:	91 09       	st.w	r8[0x0],r9
8002af96:	30 08       	mov	r8,0
8002af98:	10 9c       	mov	r12,r8
8002af9a:	2f fd       	sub	sp,-4
8002af9c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002afa0 <usart_spi_unselectChip>:
8002afa0:	eb cd 40 80 	pushm	r7,lr
8002afa4:	1a 97       	mov	r7,sp
8002afa6:	20 3d       	sub	sp,12
8002afa8:	ef 4c ff f4 	st.w	r7[-12],r12
8002afac:	e0 68 27 10 	mov	r8,10000
8002afb0:	ef 48 ff f8 	st.w	r7[-8],r8
8002afb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afb8:	58 08       	cp.w	r8,0
8002afba:	5f 08       	sreq	r8
8002afbc:	5c 58       	castu.b	r8
8002afbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002afc2:	20 19       	sub	r9,1
8002afc4:	ef 49 ff f8 	st.w	r7[-8],r9
8002afc8:	58 08       	cp.w	r8,0
8002afca:	c0 30       	breq	8002afd0 <usart_spi_unselectChip+0x30>
8002afcc:	3f f8       	mov	r8,-1
8002afce:	c1 38       	rjmp	8002aff4 <usart_spi_unselectChip+0x54>
8002afd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002afd4:	ef 48 ff fc 	st.w	r7[-4],r8
8002afd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afdc:	70 58       	ld.w	r8,r8[0x14]
8002afde:	e2 18 02 00 	andl	r8,0x200,COH
8002afe2:	5f 18       	srne	r8
8002afe4:	58 08       	cp.w	r8,0
8002afe6:	ce 70       	breq	8002afb4 <usart_spi_unselectChip+0x14>
8002afe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002afec:	e8 69 00 00 	mov	r9,524288
8002aff0:	91 09       	st.w	r8[0x0],r9
8002aff2:	30 08       	mov	r8,0
8002aff4:	10 9c       	mov	r12,r8
8002aff6:	2f dd       	sub	sp,-12
8002aff8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002affc <usart_send_address>:
8002affc:	eb cd 40 c0 	pushm	r6-r7,lr
8002b000:	1a 97       	mov	r7,sp
8002b002:	20 5d       	sub	sp,20
8002b004:	49 96       	lddpc	r6,8002b068 <usart_send_address+0x6c>
8002b006:	1e 26       	rsub	r6,pc
8002b008:	ef 4c ff f0 	st.w	r7[-16],r12
8002b00c:	ef 4b ff ec 	st.w	r7[-20],r11
8002b010:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b014:	ef 48 ff f4 	st.w	r7[-12],r8
8002b018:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b01c:	70 18       	ld.w	r8,r8[0x4]
8002b01e:	a9 98       	lsr	r8,0x9
8002b020:	e2 18 00 06 	andl	r8,0x6,COH
8002b024:	58 68       	cp.w	r8,6
8002b026:	5f 08       	sreq	r8
8002b028:	58 08       	cp.w	r8,0
8002b02a:	c0 31       	brne	8002b030 <usart_send_address+0x34>
8002b02c:	30 58       	mov	r8,5
8002b02e:	c1 88       	rjmp	8002b05e <usart_send_address+0x62>
8002b030:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b034:	e0 69 10 00 	mov	r9,4096
8002b038:	91 09       	st.w	r8[0x0],r9
8002b03a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b03e:	ef 48 ff fc 	st.w	r7[-4],r8
8002b042:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b046:	ef 48 ff f8 	st.w	r7[-8],r8
8002b04a:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b04e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b052:	f0 16 01 15 	mcall	r6[1108]
8002b056:	18 98       	mov	r8,r12
8002b058:	58 08       	cp.w	r8,0
8002b05a:	cf 81       	brne	8002b04a <usart_send_address+0x4e>
8002b05c:	30 08       	mov	r8,0
8002b05e:	10 9c       	mov	r12,r8
8002b060:	2f bd       	sub	sp,-20
8002b062:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b066:	00 00       	add	r0,r0
8002b068:	80 02       	ld.sh	r2,r0[0x0]
8002b06a:	ae 8a       	st.b	r7[0x0],r10

8002b06c <usart_write_char>:
8002b06c:	eb cd 40 80 	pushm	r7,lr
8002b070:	1a 97       	mov	r7,sp
8002b072:	20 3d       	sub	sp,12
8002b074:	ef 4c ff f8 	st.w	r7[-8],r12
8002b078:	ef 4b ff f4 	st.w	r7[-12],r11
8002b07c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b080:	ef 48 ff fc 	st.w	r7[-4],r8
8002b084:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b088:	70 58       	ld.w	r8,r8[0x14]
8002b08a:	e2 18 00 02 	andl	r8,0x2,COH
8002b08e:	5f 18       	srne	r8
8002b090:	58 08       	cp.w	r8,0
8002b092:	c0 a0       	breq	8002b0a6 <usart_write_char+0x3a>
8002b094:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b098:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b09c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0a0:	91 79       	st.w	r8[0x1c],r9
8002b0a2:	30 08       	mov	r8,0
8002b0a4:	c0 28       	rjmp	8002b0a8 <usart_write_char+0x3c>
8002b0a6:	30 28       	mov	r8,2
8002b0a8:	10 9c       	mov	r12,r8
8002b0aa:	2f dd       	sub	sp,-12
8002b0ac:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b0b0 <usart_putchar>:
8002b0b0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b0b4:	1a 97       	mov	r7,sp
8002b0b6:	20 3d       	sub	sp,12
8002b0b8:	49 36       	lddpc	r6,8002b104 <usart_putchar+0x54>
8002b0ba:	1e 26       	rsub	r6,pc
8002b0bc:	ef 4c ff f8 	st.w	r7[-8],r12
8002b0c0:	ef 4b ff f4 	st.w	r7[-12],r11
8002b0c4:	e0 68 27 10 	mov	r8,10000
8002b0c8:	ef 48 ff fc 	st.w	r7[-4],r8
8002b0cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0d0:	58 08       	cp.w	r8,0
8002b0d2:	5f 08       	sreq	r8
8002b0d4:	5c 58       	castu.b	r8
8002b0d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b0da:	20 19       	sub	r9,1
8002b0dc:	ef 49 ff fc 	st.w	r7[-4],r9
8002b0e0:	58 08       	cp.w	r8,0
8002b0e2:	c0 30       	breq	8002b0e8 <usart_putchar+0x38>
8002b0e4:	3f f8       	mov	r8,-1
8002b0e6:	c0 b8       	rjmp	8002b0fc <usart_putchar+0x4c>
8002b0e8:	ee fb ff f4 	ld.w	r11,r7[-12]
8002b0ec:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b0f0:	f0 16 01 15 	mcall	r6[1108]
8002b0f4:	18 98       	mov	r8,r12
8002b0f6:	58 08       	cp.w	r8,0
8002b0f8:	ce a1       	brne	8002b0cc <usart_putchar+0x1c>
8002b0fa:	30 08       	mov	r8,0
8002b0fc:	10 9c       	mov	r12,r8
8002b0fe:	2f dd       	sub	sp,-12
8002b100:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b104:	80 02       	ld.sh	r2,r0[0x0]
8002b106:	af 3e       	mul	lr,r7

8002b108 <usart_read_char>:
8002b108:	eb cd 40 80 	pushm	r7,lr
8002b10c:	1a 97       	mov	r7,sp
8002b10e:	20 3d       	sub	sp,12
8002b110:	ef 4c ff f8 	st.w	r7[-8],r12
8002b114:	ef 4b ff f4 	st.w	r7[-12],r11
8002b118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b11c:	70 58       	ld.w	r8,r8[0x14]
8002b11e:	e2 18 00 e0 	andl	r8,0xe0,COH
8002b122:	c0 30       	breq	8002b128 <usart_read_char+0x20>
8002b124:	30 48       	mov	r8,4
8002b126:	c1 68       	rjmp	8002b152 <usart_read_char+0x4a>
8002b128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b12c:	ef 48 ff fc 	st.w	r7[-4],r8
8002b130:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b134:	70 58       	ld.w	r8,r8[0x14]
8002b136:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b13a:	c0 b0       	breq	8002b150 <usart_read_char+0x48>
8002b13c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b140:	70 68       	ld.w	r8,r8[0x18]
8002b142:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b14a:	91 09       	st.w	r8[0x0],r9
8002b14c:	30 08       	mov	r8,0
8002b14e:	c0 28       	rjmp	8002b152 <usart_read_char+0x4a>
8002b150:	30 38       	mov	r8,3
8002b152:	10 9c       	mov	r12,r8
8002b154:	2f dd       	sub	sp,-12
8002b156:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b15a <usart_getchar>:
8002b15a:	eb cd 40 c0 	pushm	r6-r7,lr
8002b15e:	1a 97       	mov	r7,sp
8002b160:	20 3d       	sub	sp,12
8002b162:	49 06       	lddpc	r6,8002b1a0 <usart_getchar+0x46>
8002b164:	1e 26       	rsub	r6,pc
8002b166:	ef 4c ff f4 	st.w	r7[-12],r12
8002b16a:	ee c8 00 08 	sub	r8,r7,8
8002b16e:	10 9b       	mov	r11,r8
8002b170:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b174:	f0 16 01 f8 	mcall	r6[2016]
8002b178:	18 98       	mov	r8,r12
8002b17a:	ef 48 ff fc 	st.w	r7[-4],r8
8002b17e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b182:	58 38       	cp.w	r8,3
8002b184:	cf 30       	breq	8002b16a <usart_getchar+0x10>
8002b186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b18a:	58 48       	cp.w	r8,4
8002b18c:	c0 31       	brne	8002b192 <usart_getchar+0x38>
8002b18e:	3f f8       	mov	r8,-1
8002b190:	c0 38       	rjmp	8002b196 <usart_getchar+0x3c>
8002b192:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b196:	10 9c       	mov	r12,r8
8002b198:	2f dd       	sub	sp,-12
8002b19a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b19e:	00 00       	add	r0,r0
8002b1a0:	80 02       	ld.sh	r2,r0[0x0]
8002b1a2:	af e8       	*unknown*

8002b1a4 <usart_write_line>:
8002b1a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002b1a8:	1a 97       	mov	r7,sp
8002b1aa:	20 2d       	sub	sp,8
8002b1ac:	48 e6       	lddpc	r6,8002b1e4 <usart_write_line+0x40>
8002b1ae:	1e 26       	rsub	r6,pc
8002b1b0:	ef 4c ff fc 	st.w	r7[-4],r12
8002b1b4:	ef 4b ff f8 	st.w	r7[-8],r11
8002b1b8:	c0 e8       	rjmp	8002b1d4 <usart_write_line+0x30>
8002b1ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1be:	11 88       	ld.ub	r8,r8[0x0]
8002b1c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b1c4:	2f f9       	sub	r9,-1
8002b1c6:	ef 49 ff f8 	st.w	r7[-8],r9
8002b1ca:	10 9b       	mov	r11,r8
8002b1cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b1d0:	f0 16 00 a3 	mcall	r6[652]
8002b1d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1d8:	11 88       	ld.ub	r8,r8[0x0]
8002b1da:	58 08       	cp.w	r8,0
8002b1dc:	ce f1       	brne	8002b1ba <usart_write_line+0x16>
8002b1de:	2f ed       	sub	sp,-8
8002b1e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b1e4:	80 02       	ld.sh	r2,r0[0x0]
8002b1e6:	b0 32       	st.h	r8[0x6],r2
8002b1e8:	45 72       	lddsp	r2,sp[0x15c]
8002b1ea:	72 6f       	ld.w	pc,r9[0x18]
8002b1ec:	72 21       	ld.w	r1,r9[0x8]
8002b1ee:	21 21       	sub	r1,18
8002b1f0:	0d 0a       	ld.w	r10,r6++
	...

8002b1f4 <usart_get_echo_line>:
8002b1f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002b1f8:	1a 97       	mov	r7,sp
8002b1fa:	20 3d       	sub	sp,12
8002b1fc:	49 e6       	lddpc	r6,8002b274 <usart_get_echo_line+0x80>
8002b1fe:	1e 26       	rsub	r6,pc
8002b200:	ef 4c ff f4 	st.w	r7[-12],r12
8002b204:	30 08       	mov	r8,0
8002b206:	ef 48 ff fc 	st.w	r7[-4],r8
8002b20a:	c0 28       	rjmp	8002b20e <usart_get_echo_line+0x1a>
8002b20c:	d7 03       	nop
8002b20e:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b212:	f0 16 01 c5 	mcall	r6[1812]
8002b216:	18 98       	mov	r8,r12
8002b218:	ef 48 ff f8 	st.w	r7[-8],r8
8002b21c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b220:	5b f8       	cp.w	r8,-1
8002b222:	c0 b1       	brne	8002b238 <usart_get_echo_line+0x44>
8002b224:	fe cb 00 3c 	sub	r11,pc,60
8002b228:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b22c:	f0 16 01 5b 	mcall	r6[1388]
8002b230:	3f f8       	mov	r8,-1
8002b232:	ef 48 ff fc 	st.w	r7[-4],r8
8002b236:	c1 98       	rjmp	8002b268 <usart_get_echo_line+0x74>
8002b238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b23c:	58 38       	cp.w	r8,3
8002b23e:	c0 51       	brne	8002b248 <usart_get_echo_line+0x54>
8002b240:	3f f8       	mov	r8,-1
8002b242:	ef 48 ff fc 	st.w	r7[-4],r8
8002b246:	c1 18       	rjmp	8002b268 <usart_get_echo_line+0x74>
8002b248:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b24c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b250:	f0 16 00 a3 	mcall	r6[652]
8002b254:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b258:	58 d8       	cp.w	r8,13
8002b25a:	cd 91       	brne	8002b20c <usart_get_echo_line+0x18>
8002b25c:	30 ab       	mov	r11,10
8002b25e:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b262:	f0 16 00 a3 	mcall	r6[652]
8002b266:	d7 03       	nop
8002b268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b26c:	10 9c       	mov	r12,r8
8002b26e:	2f dd       	sub	sp,-12
8002b270:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b274:	80 02       	ld.sh	r2,r0[0x0]
8002b276:	b0 82       	st.b	r8[0x0],r2

8002b278 <delay_init>:
8002b278:	eb cd 40 c0 	pushm	r6-r7,lr
8002b27c:	1a 97       	mov	r7,sp
8002b27e:	20 1d       	sub	sp,4
8002b280:	48 66       	lddpc	r6,8002b298 <delay_init+0x20>
8002b282:	1e 26       	rsub	r6,pc
8002b284:	ef 4c ff fc 	st.w	r7[-4],r12
8002b288:	ec f8 04 c0 	ld.w	r8,r6[1216]
8002b28c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b290:	91 09       	st.w	r8[0x0],r9
8002b292:	2f fd       	sub	sp,-4
8002b294:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b298:	80 02       	ld.sh	r2,r0[0x0]
8002b29a:	b1 06       	ld.d	r6,r8

8002b29c <delay_ms>:
8002b29c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b2a0:	1a 97       	mov	r7,sp
8002b2a2:	20 cd       	sub	sp,48
8002b2a4:	4d 36       	lddpc	r6,8002b3f0 <delay_ms+0x154>
8002b2a6:	1e 26       	rsub	r6,pc
8002b2a8:	ef 4c ff d0 	st.w	r7[-48],r12
8002b2ac:	ec fc 04 c0 	ld.w	r12,r6[1216]
8002b2b0:	78 0c       	ld.w	r12,r12[0x0]
8002b2b2:	ee fe ff d0 	ld.w	lr,r7[-48]
8002b2b6:	ef 4e ff e4 	st.w	r7[-28],lr
8002b2ba:	ef 4c ff e0 	st.w	r7[-32],r12
8002b2be:	ee fc ff e4 	ld.w	r12,r7[-28]
8002b2c2:	ef 4c ff ec 	st.w	r7[-20],r12
8002b2c6:	ee fc ff e0 	ld.w	r12,r7[-32]
8002b2ca:	ef 4c ff e8 	st.w	r7[-24],r12
8002b2ce:	ee fa ff ec 	ld.w	r10,r7[-20]
8002b2d2:	30 0b       	mov	r11,0
8002b2d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002b2d8:	30 09       	mov	r9,0
8002b2da:	f6 08 02 4c 	mul	r12,r11,r8
8002b2de:	f2 0a 02 4e 	mul	lr,r9,r10
8002b2e2:	1c 0c       	add	r12,lr
8002b2e4:	f4 08 06 48 	mulu.d	r8,r10,r8
8002b2e8:	12 0c       	add	r12,r9
8002b2ea:	18 99       	mov	r9,r12
8002b2ec:	e0 6a 03 e7 	mov	r10,999
8002b2f0:	30 0b       	mov	r11,0
8002b2f2:	f0 0a 00 0a 	add	r10,r8,r10
8002b2f6:	f2 0b 00 4b 	adc	r11,r9,r11
8002b2fa:	e0 68 03 e8 	mov	r8,1000
8002b2fe:	30 09       	mov	r9,0
8002b300:	f0 16 01 00 	mcall	r6[1024]
8002b304:	14 98       	mov	r8,r10
8002b306:	16 99       	mov	r9,r11
8002b308:	ef 48 ff f4 	st.w	r7[-12],r8
8002b30c:	ee c8 00 2c 	sub	r8,r7,44
8002b310:	ef 48 ff f0 	st.w	r7[-16],r8
8002b314:	e1 b8 00 42 	mfsr	r8,0x108
8002b318:	10 99       	mov	r9,r8
8002b31a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b31e:	91 09       	st.w	r8[0x0],r9
8002b320:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b324:	70 09       	ld.w	r9,r8[0x0]
8002b326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b32a:	10 09       	add	r9,r8
8002b32c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b330:	91 19       	st.w	r8[0x4],r9
8002b332:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002b336:	30 08       	mov	r8,0
8002b338:	f3 68 00 08 	st.b	r9[8],r8
8002b33c:	ee c8 00 2c 	sub	r8,r7,44
8002b340:	ef 48 ff f8 	st.w	r7[-8],r8
8002b344:	e1 b8 00 42 	mfsr	r8,0x108
8002b348:	ef 48 ff fc 	st.w	r7[-4],r8
8002b34c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b350:	f1 39 00 08 	ld.ub	r9,r8[8]
8002b354:	30 28       	mov	r8,2
8002b356:	f0 09 18 00 	cp.b	r9,r8
8002b35a:	c0 31       	brne	8002b360 <delay_ms+0xc4>
8002b35c:	30 08       	mov	r8,0
8002b35e:	c4 38       	rjmp	8002b3e4 <delay_ms+0x148>
8002b360:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b364:	f1 39 00 08 	ld.ub	r9,r8[8]
8002b368:	30 18       	mov	r8,1
8002b36a:	f0 09 18 00 	cp.b	r9,r8
8002b36e:	c0 31       	brne	8002b374 <delay_ms+0xd8>
8002b370:	30 18       	mov	r8,1
8002b372:	c3 98       	rjmp	8002b3e4 <delay_ms+0x148>
8002b374:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b378:	70 09       	ld.w	r9,r8[0x0]
8002b37a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b37e:	70 18       	ld.w	r8,r8[0x4]
8002b380:	10 39       	cp.w	r9,r8
8002b382:	e0 88 00 1a 	brls	8002b3b6 <delay_ms+0x11a>
8002b386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b38a:	70 08       	ld.w	r8,r8[0x0]
8002b38c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b390:	10 39       	cp.w	r9,r8
8002b392:	c1 02       	brcc	8002b3b2 <delay_ms+0x116>
8002b394:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b398:	70 18       	ld.w	r8,r8[0x4]
8002b39a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b39e:	10 39       	cp.w	r9,r8
8002b3a0:	e0 88 00 09 	brls	8002b3b2 <delay_ms+0x116>
8002b3a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b3a8:	30 18       	mov	r8,1
8002b3aa:	f3 68 00 08 	st.b	r9[8],r8
8002b3ae:	30 18       	mov	r8,1
8002b3b0:	c1 a8       	rjmp	8002b3e4 <delay_ms+0x148>
8002b3b2:	30 08       	mov	r8,0
8002b3b4:	c1 88       	rjmp	8002b3e4 <delay_ms+0x148>
8002b3b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3ba:	70 08       	ld.w	r8,r8[0x0]
8002b3bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b3c0:	10 39       	cp.w	r9,r8
8002b3c2:	c0 93       	brcs	8002b3d4 <delay_ms+0x138>
8002b3c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3c8:	70 18       	ld.w	r8,r8[0x4]
8002b3ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b3ce:	10 39       	cp.w	r9,r8
8002b3d0:	e0 88 00 09 	brls	8002b3e2 <delay_ms+0x146>
8002b3d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b3d8:	30 18       	mov	r8,1
8002b3da:	f3 68 00 08 	st.b	r9[8],r8
8002b3de:	30 18       	mov	r8,1
8002b3e0:	c0 28       	rjmp	8002b3e4 <delay_ms+0x148>
8002b3e2:	30 08       	mov	r8,0
8002b3e4:	58 08       	cp.w	r8,0
8002b3e6:	ca b0       	breq	8002b33c <delay_ms+0xa0>
8002b3e8:	2f 4d       	sub	sp,-48
8002b3ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b3ee:	00 00       	add	r0,r0
8002b3f0:	80 02       	ld.sh	r2,r0[0x0]
8002b3f2:	b1 2a       	st.d	r8++,r10

8002b3f4 <_stext>:
8002b3f4:	48 dd       	lddpc	sp,8002b428 <udata_clear_loop_end+0x4>
8002b3f6:	fe c0 a7 f6 	sub	r0,pc,-22538
8002b3fa:	e3 b0 00 01 	mtsr	0x4,r0
8002b3fe:	d5 53       	csrf	0x15
8002b400:	48 b0       	lddpc	r0,8002b42c <udata_clear_loop_end+0x8>
8002b402:	48 c1       	lddpc	r1,8002b430 <udata_clear_loop_end+0xc>
8002b404:	02 30       	cp.w	r0,r1
8002b406:	c0 62       	brcc	8002b412 <idata_load_loop_end>
8002b408:	48 b2       	lddpc	r2,8002b434 <udata_clear_loop_end+0x10>

8002b40a <idata_load_loop>:
8002b40a:	a5 05       	ld.d	r4,r2++
8002b40c:	a1 24       	st.d	r0++,r4
8002b40e:	02 30       	cp.w	r0,r1
8002b410:	cf d3       	brcs	8002b40a <idata_load_loop>

8002b412 <idata_load_loop_end>:
8002b412:	48 a0       	lddpc	r0,8002b438 <udata_clear_loop_end+0x14>
8002b414:	48 a1       	lddpc	r1,8002b43c <udata_clear_loop_end+0x18>
8002b416:	02 30       	cp.w	r0,r1
8002b418:	c0 62       	brcc	8002b424 <udata_clear_loop_end>
8002b41a:	30 02       	mov	r2,0
8002b41c:	30 03       	mov	r3,0

8002b41e <udata_clear_loop>:
8002b41e:	a1 22       	st.d	r0++,r2
8002b420:	02 30       	cp.w	r0,r1
8002b422:	cf e3       	brcs	8002b41e <udata_clear_loop>

8002b424 <udata_clear_loop_end>:
8002b424:	fe cf e7 f8 	sub	pc,pc,-6152
8002b428:	00 01       	add	r1,r0
8002b42a:	00 00       	add	r0,r0
8002b42c:	00 00       	add	r0,r0
8002b42e:	00 04       	add	r4,r0
8002b430:	00 00       	add	r0,r0
8002b432:	24 70       	sub	r0,71
8002b434:	80 03       	ld.sh	r3,r0[0x0]
8002b436:	14 48       	or	r8,r10
8002b438:	00 00       	add	r0,r0
8002b43a:	24 70       	sub	r0,71
8002b43c:	00 00       	add	r0,r0
8002b43e:	9a a0       	ld.uh	r0,sp[0x4]

8002b440 <board_init>:
8002b440:	eb cd 40 c0 	pushm	r6-r7,lr
8002b444:	1a 97       	mov	r7,sp
8002b446:	48 76       	lddpc	r6,8002b460 <board_init+0x20>
8002b448:	1e 26       	rsub	r6,pc
8002b44a:	30 1b       	mov	r11,1
8002b44c:	32 0c       	mov	r12,32
8002b44e:	f0 16 00 3c 	mcall	r6[240]
8002b452:	30 1b       	mov	r11,1
8002b454:	32 1c       	mov	r12,33
8002b456:	f0 16 00 3c 	mcall	r6[240]
8002b45a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b45e:	00 00       	add	r0,r0
8002b460:	80 02       	ld.sh	r2,r0[0x0]
8002b462:	b2 cc       	st.b	r9[0x4],r12

8002b464 <cpu_irq_save>:
8002b464:	eb cd 40 80 	pushm	r7,lr
8002b468:	1a 97       	mov	r7,sp
8002b46a:	20 1d       	sub	sp,4
8002b46c:	e1 b8 00 00 	mfsr	r8,0x0
8002b470:	ef 48 ff fc 	st.w	r7[-4],r8
8002b474:	d3 03       	ssrf	0x10
8002b476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b47a:	10 9c       	mov	r12,r8
8002b47c:	2f fd       	sub	sp,-4
8002b47e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b482 <cpu_irq_restore>:
8002b482:	eb cd 40 80 	pushm	r7,lr
8002b486:	1a 97       	mov	r7,sp
8002b488:	20 1d       	sub	sp,4
8002b48a:	ef 4c ff fc 	st.w	r7[-4],r12
8002b48e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b492:	e3 b8 00 00 	mtsr	0x0,r8
8002b496:	2f fd       	sub	sp,-4
8002b498:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b49c <osc_priv_enable_osc0>:
8002b49c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b4a0:	1a 97       	mov	r7,sp
8002b4a2:	20 1d       	sub	sp,4
8002b4a4:	48 c6       	lddpc	r6,8002b4d4 <osc_priv_enable_osc0+0x38>
8002b4a6:	1e 26       	rsub	r6,pc
8002b4a8:	cd ef       	rcall	8002b464 <cpu_irq_save>
8002b4aa:	18 98       	mov	r8,r12
8002b4ac:	ef 48 ff fc 	st.w	r7[-4],r8
8002b4b0:	fe 78 08 00 	mov	r8,-63488
8002b4b4:	32 49       	mov	r9,36
8002b4b6:	ea 19 aa 00 	orh	r9,0xaa00
8002b4ba:	91 69       	st.w	r8[0x18],r9
8002b4bc:	fe 78 08 00 	mov	r8,-63488
8002b4c0:	e0 79 0c 07 	mov	r9,68615
8002b4c4:	91 99       	st.w	r8[0x24],r9
8002b4c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b4ca:	cd cf       	rcall	8002b482 <cpu_irq_restore>
8002b4cc:	2f fd       	sub	sp,-4
8002b4ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b4d2:	00 00       	add	r0,r0
8002b4d4:	80 02       	ld.sh	r2,r0[0x0]
8002b4d6:	b3 2a       	st.d	r9++,r10

8002b4d8 <osc_priv_disable_osc0>:
8002b4d8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b4dc:	1a 97       	mov	r7,sp
8002b4de:	20 1d       	sub	sp,4
8002b4e0:	48 b6       	lddpc	r6,8002b50c <osc_priv_disable_osc0+0x34>
8002b4e2:	1e 26       	rsub	r6,pc
8002b4e4:	cc 0f       	rcall	8002b464 <cpu_irq_save>
8002b4e6:	18 98       	mov	r8,r12
8002b4e8:	ef 48 ff fc 	st.w	r7[-4],r8
8002b4ec:	fe 78 08 00 	mov	r8,-63488
8002b4f0:	32 49       	mov	r9,36
8002b4f2:	ea 19 aa 00 	orh	r9,0xaa00
8002b4f6:	91 69       	st.w	r8[0x18],r9
8002b4f8:	fe 78 08 00 	mov	r8,-63488
8002b4fc:	30 09       	mov	r9,0
8002b4fe:	91 99       	st.w	r8[0x24],r9
8002b500:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b504:	cb ff       	rcall	8002b482 <cpu_irq_restore>
8002b506:	2f fd       	sub	sp,-4
8002b508:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b50c:	80 02       	ld.sh	r2,r0[0x0]
8002b50e:	b3 66       	lsl	r6,0x12

8002b510 <osc_priv_enable_osc32>:
8002b510:	eb cd 40 c0 	pushm	r6-r7,lr
8002b514:	1a 97       	mov	r7,sp
8002b516:	20 1d       	sub	sp,4
8002b518:	48 c6       	lddpc	r6,8002b548 <osc_priv_enable_osc32+0x38>
8002b51a:	1e 26       	rsub	r6,pc
8002b51c:	ca 4f       	rcall	8002b464 <cpu_irq_save>
8002b51e:	18 98       	mov	r8,r12
8002b520:	ef 48 ff fc 	st.w	r7[-4],r8
8002b524:	fe 78 08 00 	mov	r8,-63488
8002b528:	34 c9       	mov	r9,76
8002b52a:	ea 19 aa 00 	orh	r9,0xaa00
8002b52e:	91 69       	st.w	r8[0x18],r9
8002b530:	fe 78 08 00 	mov	r8,-63488
8002b534:	e2 69 01 01 	mov	r9,131329
8002b538:	f1 49 00 4c 	st.w	r8[76],r9
8002b53c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b540:	ca 1f       	rcall	8002b482 <cpu_irq_restore>
8002b542:	2f fd       	sub	sp,-4
8002b544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b548:	80 02       	ld.sh	r2,r0[0x0]
8002b54a:	b3 9e       	lsr	lr,0x13

8002b54c <osc_priv_disable_osc32>:
8002b54c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b550:	1a 97       	mov	r7,sp
8002b552:	20 1d       	sub	sp,4
8002b554:	48 c6       	lddpc	r6,8002b584 <osc_priv_disable_osc32+0x38>
8002b556:	1e 26       	rsub	r6,pc
8002b558:	c8 6f       	rcall	8002b464 <cpu_irq_save>
8002b55a:	18 98       	mov	r8,r12
8002b55c:	ef 48 ff fc 	st.w	r7[-4],r8
8002b560:	fe 78 08 00 	mov	r8,-63488
8002b564:	34 c9       	mov	r9,76
8002b566:	ea 19 aa 00 	orh	r9,0xaa00
8002b56a:	91 69       	st.w	r8[0x18],r9
8002b56c:	fe 78 08 00 	mov	r8,-63488
8002b570:	30 09       	mov	r9,0
8002b572:	f1 49 00 4c 	st.w	r8[76],r9
8002b576:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b57a:	c8 4f       	rcall	8002b482 <cpu_irq_restore>
8002b57c:	2f fd       	sub	sp,-4
8002b57e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b582:	00 00       	add	r0,r0
8002b584:	80 02       	ld.sh	r2,r0[0x0]
8002b586:	b3 da       	cbr	r10,0x13

8002b588 <osc_priv_enable_rc8m>:
8002b588:	eb cd 40 c0 	pushm	r6-r7,lr
8002b58c:	1a 97       	mov	r7,sp
8002b58e:	20 3d       	sub	sp,12
8002b590:	49 d6       	lddpc	r6,8002b604 <osc_priv_enable_rc8m+0x7c>
8002b592:	1e 26       	rsub	r6,pc
8002b594:	e0 68 02 00 	mov	r8,512
8002b598:	ea 18 80 80 	orh	r8,0x8080
8002b59c:	ef 48 ff fc 	st.w	r7[-4],r8
8002b5a0:	fe 78 08 00 	mov	r8,-63488
8002b5a4:	71 28       	ld.w	r8,r8[0x48]
8002b5a6:	e6 18 00 01 	andh	r8,0x1,COH
8002b5aa:	cf b0       	breq	8002b5a0 <osc_priv_enable_rc8m+0x18>
8002b5ac:	c5 cf       	rcall	8002b464 <cpu_irq_save>
8002b5ae:	18 98       	mov	r8,r12
8002b5b0:	ef 48 ff f4 	st.w	r7[-12],r8
8002b5b4:	fe 78 08 00 	mov	r8,-63488
8002b5b8:	71 28       	ld.w	r8,r8[0x48]
8002b5ba:	ef 48 ff f8 	st.w	r7[-8],r8
8002b5be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5c2:	70 08       	ld.w	r8,r8[0x0]
8002b5c4:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002b5c8:	b1 a8       	sbr	r8,0x10
8002b5ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5ce:	f3 e8 00 08 	and	r8,r9,r8
8002b5d2:	ef 48 ff f8 	st.w	r7[-8],r8
8002b5d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5da:	b9 a8       	sbr	r8,0x18
8002b5dc:	ef 48 ff f8 	st.w	r7[-8],r8
8002b5e0:	fe 78 08 00 	mov	r8,-63488
8002b5e4:	34 89       	mov	r9,72
8002b5e6:	ea 19 aa 00 	orh	r9,0xaa00
8002b5ea:	91 69       	st.w	r8[0x18],r9
8002b5ec:	fe 78 08 00 	mov	r8,-63488
8002b5f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5f4:	f1 49 00 48 	st.w	r8[72],r9
8002b5f8:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b5fc:	c4 3f       	rcall	8002b482 <cpu_irq_restore>
8002b5fe:	2f dd       	sub	sp,-12
8002b600:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b604:	80 02       	ld.sh	r2,r0[0x0]
8002b606:	b4 16       	st.h	r10[0x2],r6

8002b608 <osc_priv_disable_rc8m>:
8002b608:	eb cd 40 c0 	pushm	r6-r7,lr
8002b60c:	1a 97       	mov	r7,sp
8002b60e:	20 2d       	sub	sp,8
8002b610:	49 36       	lddpc	r6,8002b65c <osc_priv_disable_rc8m+0x54>
8002b612:	1e 26       	rsub	r6,pc
8002b614:	c2 8f       	rcall	8002b464 <cpu_irq_save>
8002b616:	18 98       	mov	r8,r12
8002b618:	ef 48 ff f8 	st.w	r7[-8],r8
8002b61c:	fe 78 08 00 	mov	r8,-63488
8002b620:	71 28       	ld.w	r8,r8[0x48]
8002b622:	ef 48 ff fc 	st.w	r7[-4],r8
8002b626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b62a:	e4 18 00 01 	andh	r8,0x1
8002b62e:	e0 18 00 ff 	andl	r8,0xff
8002b632:	ef 48 ff fc 	st.w	r7[-4],r8
8002b636:	fe 78 08 00 	mov	r8,-63488
8002b63a:	34 89       	mov	r9,72
8002b63c:	ea 19 aa 00 	orh	r9,0xaa00
8002b640:	91 69       	st.w	r8[0x18],r9
8002b642:	fe 78 08 00 	mov	r8,-63488
8002b646:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b64a:	f1 49 00 48 	st.w	r8[72],r9
8002b64e:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b652:	c1 8f       	rcall	8002b482 <cpu_irq_restore>
8002b654:	2f ed       	sub	sp,-8
8002b656:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b65a:	00 00       	add	r0,r0
8002b65c:	80 02       	ld.sh	r2,r0[0x0]
8002b65e:	b4 96       	st.b	r10[0x1],r6

8002b660 <osc_priv_enable_rc120m>:
8002b660:	eb cd 40 c0 	pushm	r6-r7,lr
8002b664:	1a 97       	mov	r7,sp
8002b666:	20 1d       	sub	sp,4
8002b668:	48 c6       	lddpc	r6,8002b698 <osc_priv_enable_rc120m+0x38>
8002b66a:	1e 26       	rsub	r6,pc
8002b66c:	cf ce       	rcall	8002b464 <cpu_irq_save>
8002b66e:	18 98       	mov	r8,r12
8002b670:	ef 48 ff fc 	st.w	r7[-4],r8
8002b674:	fe 78 08 00 	mov	r8,-63488
8002b678:	35 89       	mov	r9,88
8002b67a:	ea 19 aa 00 	orh	r9,0xaa00
8002b67e:	91 69       	st.w	r8[0x18],r9
8002b680:	fe 78 08 00 	mov	r8,-63488
8002b684:	30 19       	mov	r9,1
8002b686:	f1 49 00 58 	st.w	r8[88],r9
8002b68a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b68e:	cf ae       	rcall	8002b482 <cpu_irq_restore>
8002b690:	2f fd       	sub	sp,-4
8002b692:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b696:	00 00       	add	r0,r0
8002b698:	80 02       	ld.sh	r2,r0[0x0]
8002b69a:	b4 ee       	st.b	r10[0x6],lr

8002b69c <osc_priv_disable_rc120m>:
8002b69c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b6a0:	1a 97       	mov	r7,sp
8002b6a2:	20 1d       	sub	sp,4
8002b6a4:	48 c6       	lddpc	r6,8002b6d4 <osc_priv_disable_rc120m+0x38>
8002b6a6:	1e 26       	rsub	r6,pc
8002b6a8:	cd ee       	rcall	8002b464 <cpu_irq_save>
8002b6aa:	18 98       	mov	r8,r12
8002b6ac:	ef 48 ff fc 	st.w	r7[-4],r8
8002b6b0:	fe 78 08 00 	mov	r8,-63488
8002b6b4:	35 89       	mov	r9,88
8002b6b6:	ea 19 aa 00 	orh	r9,0xaa00
8002b6ba:	91 69       	st.w	r8[0x18],r9
8002b6bc:	fe 78 08 00 	mov	r8,-63488
8002b6c0:	30 09       	mov	r9,0
8002b6c2:	f1 49 00 58 	st.w	r8[88],r9
8002b6c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b6ca:	cd ce       	rcall	8002b482 <cpu_irq_restore>
8002b6cc:	2f fd       	sub	sp,-4
8002b6ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b6d2:	00 00       	add	r0,r0
8002b6d4:	80 02       	ld.sh	r2,r0[0x0]
8002b6d6:	b5 2a       	st.d	r10++,r10

8002b6d8 <cpu_irq_save>:
8002b6d8:	eb cd 40 80 	pushm	r7,lr
8002b6dc:	1a 97       	mov	r7,sp
8002b6de:	20 1d       	sub	sp,4
8002b6e0:	e1 b8 00 00 	mfsr	r8,0x0
8002b6e4:	ef 48 ff fc 	st.w	r7[-4],r8
8002b6e8:	d3 03       	ssrf	0x10
8002b6ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6ee:	10 9c       	mov	r12,r8
8002b6f0:	2f fd       	sub	sp,-4
8002b6f2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b6f6 <cpu_irq_restore>:
8002b6f6:	eb cd 40 80 	pushm	r7,lr
8002b6fa:	1a 97       	mov	r7,sp
8002b6fc:	20 1d       	sub	sp,4
8002b6fe:	ef 4c ff fc 	st.w	r7[-4],r12
8002b702:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b706:	e3 b8 00 00 	mtsr	0x0,r8
8002b70a:	2f fd       	sub	sp,-4
8002b70c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b710 <pll_config_write>:
8002b710:	eb cd 40 c0 	pushm	r6-r7,lr
8002b714:	1a 97       	mov	r7,sp
8002b716:	20 3d       	sub	sp,12
8002b718:	49 26       	lddpc	r6,8002b760 <pll_config_write+0x50>
8002b71a:	1e 26       	rsub	r6,pc
8002b71c:	ef 4c ff f8 	st.w	r7[-8],r12
8002b720:	ef 4b ff f4 	st.w	r7[-12],r11
8002b724:	cd af       	rcall	8002b6d8 <cpu_irq_save>
8002b726:	18 98       	mov	r8,r12
8002b728:	ef 48 ff fc 	st.w	r7[-4],r8
8002b72c:	fe 78 08 00 	mov	r8,-63488
8002b730:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b734:	2f 99       	sub	r9,-7
8002b736:	a3 69       	lsl	r9,0x2
8002b738:	ea 19 aa 00 	orh	r9,0xaa00
8002b73c:	91 69       	st.w	r8[0x18],r9
8002b73e:	fe 78 08 00 	mov	r8,-63488
8002b742:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b746:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b74a:	74 0a       	ld.w	r10,r10[0x0]
8002b74c:	2f 99       	sub	r9,-7
8002b74e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002b752:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b756:	cd 0f       	rcall	8002b6f6 <cpu_irq_restore>
8002b758:	2f dd       	sub	sp,-12
8002b75a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b75e:	00 00       	add	r0,r0
8002b760:	80 02       	ld.sh	r2,r0[0x0]
8002b762:	b5 9e       	lsr	lr,0x15

8002b764 <pll_enable>:
8002b764:	eb cd 40 c0 	pushm	r6-r7,lr
8002b768:	1a 97       	mov	r7,sp
8002b76a:	20 3d       	sub	sp,12
8002b76c:	49 26       	lddpc	r6,8002b7b4 <pll_enable+0x50>
8002b76e:	1e 26       	rsub	r6,pc
8002b770:	ef 4c ff f8 	st.w	r7[-8],r12
8002b774:	ef 4b ff f4 	st.w	r7[-12],r11
8002b778:	cb 0f       	rcall	8002b6d8 <cpu_irq_save>
8002b77a:	18 98       	mov	r8,r12
8002b77c:	ef 48 ff fc 	st.w	r7[-4],r8
8002b780:	fe 78 08 00 	mov	r8,-63488
8002b784:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b788:	2f 99       	sub	r9,-7
8002b78a:	a3 69       	lsl	r9,0x2
8002b78c:	ea 19 aa 00 	orh	r9,0xaa00
8002b790:	91 69       	st.w	r8[0x18],r9
8002b792:	fe 78 08 00 	mov	r8,-63488
8002b796:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b79a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b79e:	74 0a       	ld.w	r10,r10[0x0]
8002b7a0:	a1 aa       	sbr	r10,0x0
8002b7a2:	2f 99       	sub	r9,-7
8002b7a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002b7a8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b7ac:	ca 5f       	rcall	8002b6f6 <cpu_irq_restore>
8002b7ae:	2f dd       	sub	sp,-12
8002b7b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7b4:	80 02       	ld.sh	r2,r0[0x0]
8002b7b6:	b5 f2       	*unknown*

8002b7b8 <pll_disable>:
8002b7b8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b7bc:	1a 97       	mov	r7,sp
8002b7be:	20 2d       	sub	sp,8
8002b7c0:	49 06       	lddpc	r6,8002b800 <pll_disable+0x48>
8002b7c2:	1e 26       	rsub	r6,pc
8002b7c4:	ef 4c ff f8 	st.w	r7[-8],r12
8002b7c8:	c8 8f       	rcall	8002b6d8 <cpu_irq_save>
8002b7ca:	18 98       	mov	r8,r12
8002b7cc:	ef 48 ff fc 	st.w	r7[-4],r8
8002b7d0:	fe 78 08 00 	mov	r8,-63488
8002b7d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b7d8:	2f 99       	sub	r9,-7
8002b7da:	a3 69       	lsl	r9,0x2
8002b7dc:	ea 19 aa 00 	orh	r9,0xaa00
8002b7e0:	91 69       	st.w	r8[0x18],r9
8002b7e2:	fe 78 08 00 	mov	r8,-63488
8002b7e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b7ea:	2f 99       	sub	r9,-7
8002b7ec:	30 0a       	mov	r10,0
8002b7ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002b7f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b7f6:	c8 0f       	rcall	8002b6f6 <cpu_irq_restore>
8002b7f8:	2f ed       	sub	sp,-8
8002b7fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7fe:	00 00       	add	r0,r0
8002b800:	80 02       	ld.sh	r2,r0[0x0]
8002b802:	b6 46       	st.h	r11[0x8],r6

8002b804 <cpu_irq_save>:
8002b804:	eb cd 40 80 	pushm	r7,lr
8002b808:	1a 97       	mov	r7,sp
8002b80a:	20 1d       	sub	sp,4
8002b80c:	e1 b8 00 00 	mfsr	r8,0x0
8002b810:	ef 48 ff fc 	st.w	r7[-4],r8
8002b814:	d3 03       	ssrf	0x10
8002b816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b81a:	10 9c       	mov	r12,r8
8002b81c:	2f fd       	sub	sp,-4
8002b81e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b822 <cpu_irq_restore>:
8002b822:	eb cd 40 80 	pushm	r7,lr
8002b826:	1a 97       	mov	r7,sp
8002b828:	20 1d       	sub	sp,4
8002b82a:	ef 4c ff fc 	st.w	r7[-4],r12
8002b82e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b832:	e3 b8 00 00 	mtsr	0x0,r8
8002b836:	2f fd       	sub	sp,-4
8002b838:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b83c <osc_enable>:
8002b83c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b840:	1a 97       	mov	r7,sp
8002b842:	20 1d       	sub	sp,4
8002b844:	49 16       	lddpc	r6,8002b888 <osc_enable+0x4c>
8002b846:	1e 26       	rsub	r6,pc
8002b848:	18 98       	mov	r8,r12
8002b84a:	ef 68 ff fc 	st.b	r7[-4],r8
8002b84e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002b852:	58 28       	cp.w	r8,2
8002b854:	c1 10       	breq	8002b876 <osc_enable+0x3a>
8002b856:	e0 89 00 05 	brgt	8002b860 <osc_enable+0x24>
8002b85a:	58 08       	cp.w	r8,0
8002b85c:	c0 70       	breq	8002b86a <osc_enable+0x2e>
8002b85e:	c1 18       	rjmp	8002b880 <osc_enable+0x44>
8002b860:	58 38       	cp.w	r8,3
8002b862:	c0 70       	breq	8002b870 <osc_enable+0x34>
8002b864:	58 48       	cp.w	r8,4
8002b866:	c0 b0       	breq	8002b87c <osc_enable+0x40>
8002b868:	c0 c8       	rjmp	8002b880 <osc_enable+0x44>
8002b86a:	f0 16 01 e0 	mcall	r6[1920]
8002b86e:	c0 98       	rjmp	8002b880 <osc_enable+0x44>
8002b870:	f0 16 01 d7 	mcall	r6[1884]
8002b874:	c0 68       	rjmp	8002b880 <osc_enable+0x44>
8002b876:	f0 16 01 6c 	mcall	r6[1456]
8002b87a:	c0 38       	rjmp	8002b880 <osc_enable+0x44>
8002b87c:	f0 16 01 97 	mcall	r6[1628]
8002b880:	2f fd       	sub	sp,-4
8002b882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b886:	00 00       	add	r0,r0
8002b888:	80 02       	ld.sh	r2,r0[0x0]
8002b88a:	b6 ca       	st.b	r11[0x4],r10

8002b88c <osc_is_ready>:
8002b88c:	eb cd 40 80 	pushm	r7,lr
8002b890:	1a 97       	mov	r7,sp
8002b892:	20 1d       	sub	sp,4
8002b894:	18 98       	mov	r8,r12
8002b896:	ef 68 ff fc 	st.b	r7[-4],r8
8002b89a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002b89e:	58 38       	cp.w	r8,3
8002b8a0:	c1 50       	breq	8002b8ca <osc_is_ready+0x3e>
8002b8a2:	e0 89 00 07 	brgt	8002b8b0 <osc_is_ready+0x24>
8002b8a6:	58 08       	cp.w	r8,0
8002b8a8:	c0 90       	breq	8002b8ba <osc_is_ready+0x2e>
8002b8aa:	58 28       	cp.w	r8,2
8002b8ac:	c1 70       	breq	8002b8da <osc_is_ready+0x4e>
8002b8ae:	c2 88       	rjmp	8002b8fe <osc_is_ready+0x72>
8002b8b0:	58 48       	cp.w	r8,4
8002b8b2:	c1 c0       	breq	8002b8ea <osc_is_ready+0x5e>
8002b8b4:	58 58       	cp.w	r8,5
8002b8b6:	c2 20       	breq	8002b8fa <osc_is_ready+0x6e>
8002b8b8:	c2 38       	rjmp	8002b8fe <osc_is_ready+0x72>
8002b8ba:	fe 78 08 00 	mov	r8,-63488
8002b8be:	70 58       	ld.w	r8,r8[0x14]
8002b8c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b8c4:	5f 18       	srne	r8
8002b8c6:	5c 58       	castu.b	r8
8002b8c8:	c1 c8       	rjmp	8002b900 <osc_is_ready+0x74>
8002b8ca:	fe 78 08 00 	mov	r8,-63488
8002b8ce:	70 58       	ld.w	r8,r8[0x14]
8002b8d0:	e2 18 00 04 	andl	r8,0x4,COH
8002b8d4:	5f 18       	srne	r8
8002b8d6:	5c 58       	castu.b	r8
8002b8d8:	c1 48       	rjmp	8002b900 <osc_is_ready+0x74>
8002b8da:	fe 78 08 00 	mov	r8,-63488
8002b8de:	70 58       	ld.w	r8,r8[0x14]
8002b8e0:	e2 18 00 08 	andl	r8,0x8,COH
8002b8e4:	5f 18       	srne	r8
8002b8e6:	5c 58       	castu.b	r8
8002b8e8:	c0 c8       	rjmp	8002b900 <osc_is_ready+0x74>
8002b8ea:	fe 78 08 00 	mov	r8,-63488
8002b8ee:	71 68       	ld.w	r8,r8[0x58]
8002b8f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b8f4:	5f 18       	srne	r8
8002b8f6:	5c 58       	castu.b	r8
8002b8f8:	c0 48       	rjmp	8002b900 <osc_is_ready+0x74>
8002b8fa:	30 18       	mov	r8,1
8002b8fc:	c0 28       	rjmp	8002b900 <osc_is_ready+0x74>
8002b8fe:	30 08       	mov	r8,0
8002b900:	10 9c       	mov	r12,r8
8002b902:	2f fd       	sub	sp,-4
8002b904:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b908 <osc_get_rate>:
8002b908:	eb cd 40 80 	pushm	r7,lr
8002b90c:	1a 97       	mov	r7,sp
8002b90e:	20 1d       	sub	sp,4
8002b910:	18 98       	mov	r8,r12
8002b912:	ef 68 ff fc 	st.b	r7[-4],r8
8002b916:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002b91a:	58 38       	cp.w	r8,3
8002b91c:	c1 20       	breq	8002b940 <osc_get_rate+0x38>
8002b91e:	e0 89 00 07 	brgt	8002b92c <osc_get_rate+0x24>
8002b922:	58 08       	cp.w	r8,0
8002b924:	c0 90       	breq	8002b936 <osc_get_rate+0x2e>
8002b926:	58 28       	cp.w	r8,2
8002b928:	c0 f0       	breq	8002b946 <osc_get_rate+0x3e>
8002b92a:	c1 b8       	rjmp	8002b960 <osc_get_rate+0x58>
8002b92c:	58 48       	cp.w	r8,4
8002b92e:	c1 10       	breq	8002b950 <osc_get_rate+0x48>
8002b930:	58 58       	cp.w	r8,5
8002b932:	c1 40       	breq	8002b95a <osc_get_rate+0x52>
8002b934:	c1 68       	rjmp	8002b960 <osc_get_rate+0x58>
8002b936:	e0 68 24 00 	mov	r8,9216
8002b93a:	ea 18 00 f4 	orh	r8,0xf4
8002b93e:	c1 28       	rjmp	8002b962 <osc_get_rate+0x5a>
8002b940:	e0 68 80 00 	mov	r8,32768
8002b944:	c0 f8       	rjmp	8002b962 <osc_get_rate+0x5a>
8002b946:	e0 68 12 00 	mov	r8,4608
8002b94a:	ea 18 00 7a 	orh	r8,0x7a
8002b94e:	c0 a8       	rjmp	8002b962 <osc_get_rate+0x5a>
8002b950:	e0 68 0e 00 	mov	r8,3584
8002b954:	ea 18 07 27 	orh	r8,0x727
8002b958:	c0 58       	rjmp	8002b962 <osc_get_rate+0x5a>
8002b95a:	e0 78 c1 38 	mov	r8,115000
8002b95e:	c0 28       	rjmp	8002b962 <osc_get_rate+0x5a>
8002b960:	30 08       	mov	r8,0
8002b962:	10 9c       	mov	r12,r8
8002b964:	2f fd       	sub	sp,-4
8002b966:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b96a <osc_wait_ready>:
8002b96a:	eb cd 40 c0 	pushm	r6-r7,lr
8002b96e:	1a 97       	mov	r7,sp
8002b970:	20 1d       	sub	sp,4
8002b972:	48 96       	lddpc	r6,8002b994 <osc_wait_ready+0x2a>
8002b974:	1e 26       	rsub	r6,pc
8002b976:	18 98       	mov	r8,r12
8002b978:	ef 68 ff fc 	st.b	r7[-4],r8
8002b97c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002b980:	10 9c       	mov	r12,r8
8002b982:	c8 5f       	rcall	8002b88c <osc_is_ready>
8002b984:	18 98       	mov	r8,r12
8002b986:	ec 18 00 01 	eorl	r8,0x1
8002b98a:	5c 58       	castu.b	r8
8002b98c:	cf 81       	brne	8002b97c <osc_wait_ready+0x12>
8002b98e:	2f fd       	sub	sp,-4
8002b990:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b994:	80 02       	ld.sh	r2,r0[0x0]
8002b996:	b7 f8       	*unknown*

8002b998 <pll_config_set_option>:
8002b998:	eb cd 40 80 	pushm	r7,lr
8002b99c:	1a 97       	mov	r7,sp
8002b99e:	20 2d       	sub	sp,8
8002b9a0:	ef 4c ff fc 	st.w	r7[-4],r12
8002b9a4:	ef 4b ff f8 	st.w	r7[-8],r11
8002b9a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9ac:	70 09       	ld.w	r9,r8[0x0]
8002b9ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b9b2:	2f d8       	sub	r8,-3
8002b9b4:	30 1a       	mov	r10,1
8002b9b6:	f4 08 09 48 	lsl	r8,r10,r8
8002b9ba:	10 49       	or	r9,r8
8002b9bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9c0:	91 09       	st.w	r8[0x0],r9
8002b9c2:	2f ed       	sub	sp,-8
8002b9c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b9c8 <pll_config_init>:
8002b9c8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b9cc:	1a 97       	mov	r7,sp
8002b9ce:	20 5d       	sub	sp,20
8002b9d0:	4b 46       	lddpc	r6,8002baa0 <pll_config_init+0xd8>
8002b9d2:	1e 26       	rsub	r6,pc
8002b9d4:	ef 4c ff f8 	st.w	r7[-8],r12
8002b9d8:	ef 4b ff f4 	st.w	r7[-12],r11
8002b9dc:	ef 4a ff f0 	st.w	r7[-16],r10
8002b9e0:	ef 49 ff ec 	st.w	r7[-20],r9
8002b9e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b9e8:	5c 58       	castu.b	r8
8002b9ea:	10 9c       	mov	r12,r8
8002b9ec:	c8 ef       	rcall	8002b908 <osc_get_rate>
8002b9ee:	18 99       	mov	r9,r12
8002b9f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b9f4:	f2 08 02 48 	mul	r8,r9,r8
8002b9f8:	ef 48 ff fc 	st.w	r7[-4],r8
8002b9fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba00:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002ba04:	f0 09 0d 08 	divu	r8,r8,r9
8002ba08:	ef 48 ff fc 	st.w	r7[-4],r8
8002ba0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba10:	30 09       	mov	r9,0
8002ba12:	91 09       	st.w	r8[0x0],r9
8002ba14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba18:	e0 69 b3 ff 	mov	r9,46079
8002ba1c:	ea 19 04 c4 	orh	r9,0x4c4
8002ba20:	12 38       	cp.w	r8,r9
8002ba22:	e0 8b 00 15 	brhi	8002ba4c <pll_config_init+0x84>
8002ba26:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ba2a:	58 88       	cp.w	r8,8
8002ba2c:	e0 8b 00 10 	brhi	8002ba4c <pll_config_init+0x84>
8002ba30:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ba34:	a1 78       	lsl	r8,0x1
8002ba36:	ef 48 ff ec 	st.w	r7[-20],r8
8002ba3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba3e:	a1 78       	lsl	r8,0x1
8002ba40:	ef 48 ff fc 	st.w	r7[-4],r8
8002ba44:	30 1b       	mov	r11,1
8002ba46:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ba4a:	ca 7f       	rcall	8002b998 <pll_config_set_option>
8002ba4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba50:	e0 69 fe 7f 	mov	r9,65151
8002ba54:	ea 19 0a 21 	orh	r9,0xa21
8002ba58:	12 38       	cp.w	r8,r9
8002ba5a:	e0 8b 00 06 	brhi	8002ba66 <pll_config_init+0x9e>
8002ba5e:	30 0b       	mov	r11,0
8002ba60:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ba64:	c9 af       	rcall	8002b998 <pll_config_set_option>
8002ba66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba6a:	70 09       	ld.w	r9,r8[0x0]
8002ba6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002ba70:	20 18       	sub	r8,1
8002ba72:	f0 0a 15 10 	lsl	r10,r8,0x10
8002ba76:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba7a:	a9 68       	lsl	r8,0x8
8002ba7c:	10 4a       	or	r10,r8
8002ba7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba82:	a1 78       	lsl	r8,0x1
8002ba84:	f5 e8 10 08 	or	r8,r10,r8
8002ba88:	f3 e8 10 08 	or	r8,r9,r8
8002ba8c:	10 99       	mov	r9,r8
8002ba8e:	ea 19 3f 00 	orh	r9,0x3f00
8002ba92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba96:	91 09       	st.w	r8[0x0],r9
8002ba98:	2f bd       	sub	sp,-20
8002ba9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ba9e:	00 00       	add	r0,r0
8002baa0:	80 02       	ld.sh	r2,r0[0x0]
8002baa2:	b8 56       	st.h	r12[0xa],r6

8002baa4 <pll_is_locked>:
8002baa4:	eb cd 40 80 	pushm	r7,lr
8002baa8:	1a 97       	mov	r7,sp
8002baaa:	20 1d       	sub	sp,4
8002baac:	ef 4c ff fc 	st.w	r7[-4],r12
8002bab0:	fe 78 08 00 	mov	r8,-63488
8002bab4:	70 59       	ld.w	r9,r8[0x14]
8002bab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002baba:	2f c8       	sub	r8,-4
8002babc:	30 1a       	mov	r10,1
8002babe:	f4 08 09 48 	lsl	r8,r10,r8
8002bac2:	f3 e8 00 08 	and	r8,r9,r8
8002bac6:	5f 18       	srne	r8
8002bac8:	5c 58       	castu.b	r8
8002baca:	10 9c       	mov	r12,r8
8002bacc:	2f fd       	sub	sp,-4
8002bace:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bad2 <pll_enable_source_sync>:
8002bad2:	eb cd 40 c0 	pushm	r6-r7,lr
8002bad6:	1a 97       	mov	r7,sp
8002bad8:	20 1d       	sub	sp,4
8002bada:	49 06       	lddpc	r6,8002bb18 <pll_enable_source_sync+0x46>
8002badc:	1e 26       	rsub	r6,pc
8002bade:	ef 4c ff fc 	st.w	r7[-4],r12
8002bae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bae6:	58 18       	cp.w	r8,1
8002bae8:	e0 88 00 05 	brls	8002baf2 <pll_enable_source_sync+0x20>
8002baec:	58 28       	cp.w	r8,2
8002baee:	c0 d0       	breq	8002bb08 <pll_enable_source_sync+0x36>
8002baf0:	c1 08       	rjmp	8002bb10 <pll_enable_source_sync+0x3e>
8002baf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002baf6:	5c 58       	castu.b	r8
8002baf8:	10 9c       	mov	r12,r8
8002bafa:	ca 1e       	rcall	8002b83c <osc_enable>
8002bafc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb00:	5c 58       	castu.b	r8
8002bb02:	10 9c       	mov	r12,r8
8002bb04:	c3 3f       	rcall	8002b96a <osc_wait_ready>
8002bb06:	c0 58       	rjmp	8002bb10 <pll_enable_source_sync+0x3e>
8002bb08:	30 2c       	mov	r12,2
8002bb0a:	c9 9e       	rcall	8002b83c <osc_enable>
8002bb0c:	30 2c       	mov	r12,2
8002bb0e:	c2 ef       	rcall	8002b96a <osc_wait_ready>
8002bb10:	2f fd       	sub	sp,-4
8002bb12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb16:	00 00       	add	r0,r0
8002bb18:	80 02       	ld.sh	r2,r0[0x0]
8002bb1a:	b9 60       	lsl	r0,0x18

8002bb1c <pll_wait_for_lock>:
8002bb1c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb20:	1a 97       	mov	r7,sp
8002bb22:	20 1d       	sub	sp,4
8002bb24:	48 96       	lddpc	r6,8002bb48 <pll_wait_for_lock+0x2c>
8002bb26:	1e 26       	rsub	r6,pc
8002bb28:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb2c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bb30:	cb af       	rcall	8002baa4 <pll_is_locked>
8002bb32:	18 98       	mov	r8,r12
8002bb34:	ec 18 00 01 	eorl	r8,0x1
8002bb38:	5c 58       	castu.b	r8
8002bb3a:	cf 91       	brne	8002bb2c <pll_wait_for_lock+0x10>
8002bb3c:	30 08       	mov	r8,0
8002bb3e:	10 9c       	mov	r12,r8
8002bb40:	2f fd       	sub	sp,-4
8002bb42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb46:	00 00       	add	r0,r0
8002bb48:	80 02       	ld.sh	r2,r0[0x0]
8002bb4a:	b9 aa       	sbr	r10,0x18

8002bb4c <genclk_config_defaults>:
8002bb4c:	eb cd 40 80 	pushm	r7,lr
8002bb50:	1a 97       	mov	r7,sp
8002bb52:	20 2d       	sub	sp,8
8002bb54:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb58:	ef 4b ff f8 	st.w	r7[-8],r11
8002bb5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb60:	30 09       	mov	r9,0
8002bb62:	91 09       	st.w	r8[0x0],r9
8002bb64:	2f ed       	sub	sp,-8
8002bb66:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb6a <genclk_config_set_source>:
8002bb6a:	eb cd 40 80 	pushm	r7,lr
8002bb6e:	1a 97       	mov	r7,sp
8002bb70:	20 2d       	sub	sp,8
8002bb72:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb76:	ef 4b ff f8 	st.w	r7[-8],r11
8002bb7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb7e:	70 08       	ld.w	r8,r8[0x0]
8002bb80:	10 99       	mov	r9,r8
8002bb82:	e0 19 f0 ff 	andl	r9,0xf0ff
8002bb86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb8a:	a9 68       	lsl	r8,0x8
8002bb8c:	10 49       	or	r9,r8
8002bb8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb92:	91 09       	st.w	r8[0x0],r9
8002bb94:	2f ed       	sub	sp,-8
8002bb96:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb9a <genclk_config_set_divider>:
8002bb9a:	eb cd 40 80 	pushm	r7,lr
8002bb9e:	1a 97       	mov	r7,sp
8002bba0:	20 2d       	sub	sp,8
8002bba2:	ef 4c ff fc 	st.w	r7[-4],r12
8002bba6:	ef 4b ff f8 	st.w	r7[-8],r11
8002bbaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbae:	70 08       	ld.w	r8,r8[0x0]
8002bbb0:	10 99       	mov	r9,r8
8002bbb2:	e4 19 ff 00 	andh	r9,0xff00
8002bbb6:	e0 19 ff fd 	andl	r9,0xfffd
8002bbba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbbe:	91 09       	st.w	r8[0x0],r9
8002bbc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbc4:	58 18       	cp.w	r8,1
8002bbc6:	e0 88 00 17 	brls	8002bbf4 <genclk_config_set_divider+0x5a>
8002bbca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbce:	70 08       	ld.w	r8,r8[0x0]
8002bbd0:	10 99       	mov	r9,r8
8002bbd2:	a1 b9       	sbr	r9,0x1
8002bbd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbd8:	91 09       	st.w	r8[0x0],r9
8002bbda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbde:	70 09       	ld.w	r9,r8[0x0]
8002bbe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bbe4:	2f f8       	sub	r8,-1
8002bbe6:	a1 98       	lsr	r8,0x1
8002bbe8:	20 18       	sub	r8,1
8002bbea:	b1 68       	lsl	r8,0x10
8002bbec:	10 49       	or	r9,r8
8002bbee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbf2:	91 09       	st.w	r8[0x0],r9
8002bbf4:	2f ed       	sub	sp,-8
8002bbf6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bbfa <genclk_enable>:
8002bbfa:	eb cd 40 80 	pushm	r7,lr
8002bbfe:	1a 97       	mov	r7,sp
8002bc00:	20 2d       	sub	sp,8
8002bc02:	ef 4c ff fc 	st.w	r7[-4],r12
8002bc06:	ef 4b ff f8 	st.w	r7[-8],r11
8002bc0a:	fe 78 08 00 	mov	r8,-63488
8002bc0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bc12:	ee fa ff fc 	ld.w	r10,r7[-4]
8002bc16:	74 0a       	ld.w	r10,r10[0x0]
8002bc18:	a1 aa       	sbr	r10,0x0
8002bc1a:	2e 79       	sub	r9,-25
8002bc1c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002bc20:	2f ed       	sub	sp,-8
8002bc22:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bc26 <genclk_disable>:
8002bc26:	eb cd 40 80 	pushm	r7,lr
8002bc2a:	1a 97       	mov	r7,sp
8002bc2c:	20 1d       	sub	sp,4
8002bc2e:	ef 4c ff fc 	st.w	r7[-4],r12
8002bc32:	fe 78 08 00 	mov	r8,-63488
8002bc36:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bc3a:	2e 79       	sub	r9,-25
8002bc3c:	30 0a       	mov	r10,0
8002bc3e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002bc42:	2f fd       	sub	sp,-4
8002bc44:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bc48 <sysclk_get_main_hz>:
8002bc48:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc4c:	1a 97       	mov	r7,sp
8002bc4e:	48 56       	lddpc	r6,8002bc60 <sysclk_get_main_hz+0x18>
8002bc50:	1e 26       	rsub	r6,pc
8002bc52:	30 0c       	mov	r12,0
8002bc54:	c5 ae       	rcall	8002b908 <osc_get_rate>
8002bc56:	18 98       	mov	r8,r12
8002bc58:	a3 68       	lsl	r8,0x2
8002bc5a:	10 9c       	mov	r12,r8
8002bc5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc60:	80 02       	ld.sh	r2,r0[0x0]
8002bc62:	ba d4       	st.b	sp[0x5],r4

8002bc64 <sysclk_priv_enable_module>:
8002bc64:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc68:	1a 97       	mov	r7,sp
8002bc6a:	20 4d       	sub	sp,16
8002bc6c:	49 d6       	lddpc	r6,8002bce0 <sysclk_priv_enable_module+0x7c>
8002bc6e:	1e 26       	rsub	r6,pc
8002bc70:	ef 4c ff f4 	st.w	r7[-12],r12
8002bc74:	ef 4b ff f0 	st.w	r7[-16],r11
8002bc78:	fe b0 fd c6 	rcall	8002b804 <cpu_irq_save>
8002bc7c:	18 98       	mov	r8,r12
8002bc7e:	ef 48 ff f8 	st.w	r7[-8],r8
8002bc82:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bc86:	a3 68       	lsl	r8,0x2
8002bc88:	e0 28 fb e0 	sub	r8,64480
8002bc8c:	70 08       	ld.w	r8,r8[0x0]
8002bc8e:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc92:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bc96:	30 19       	mov	r9,1
8002bc98:	f2 08 09 48 	lsl	r8,r9,r8
8002bc9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bca0:	f3 e8 10 08 	or	r8,r9,r8
8002bca4:	ef 48 ff fc 	st.w	r7[-4],r8
8002bca8:	fe 78 04 00 	mov	r8,-64512
8002bcac:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002bcb0:	f2 0a 15 02 	lsl	r10,r9,0x2
8002bcb4:	32 09       	mov	r9,32
8002bcb6:	ea 19 aa 00 	orh	r9,0xaa00
8002bcba:	f4 09 00 09 	add	r9,r10,r9
8002bcbe:	f1 49 00 58 	st.w	r8[88],r9
8002bcc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bcc6:	a3 68       	lsl	r8,0x2
8002bcc8:	e0 28 fb e0 	sub	r8,64480
8002bccc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bcd0:	91 09       	st.w	r8[0x0],r9
8002bcd2:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bcd6:	fe b0 fd a6 	rcall	8002b822 <cpu_irq_restore>
8002bcda:	2f cd       	sub	sp,-16
8002bcdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bce0:	80 02       	ld.sh	r2,r0[0x0]
8002bce2:	ba f2       	st.b	sp[0x7],r2

8002bce4 <sysclk_priv_disable_module>:
8002bce4:	eb cd 40 c0 	pushm	r6-r7,lr
8002bce8:	1a 97       	mov	r7,sp
8002bcea:	20 4d       	sub	sp,16
8002bcec:	49 e6       	lddpc	r6,8002bd64 <sysclk_priv_disable_module+0x80>
8002bcee:	1e 26       	rsub	r6,pc
8002bcf0:	ef 4c ff f4 	st.w	r7[-12],r12
8002bcf4:	ef 4b ff f0 	st.w	r7[-16],r11
8002bcf8:	fe b0 fd 86 	rcall	8002b804 <cpu_irq_save>
8002bcfc:	18 98       	mov	r8,r12
8002bcfe:	ef 48 ff f8 	st.w	r7[-8],r8
8002bd02:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd06:	a3 68       	lsl	r8,0x2
8002bd08:	e0 28 fb e0 	sub	r8,64480
8002bd0c:	70 08       	ld.w	r8,r8[0x0]
8002bd0e:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd12:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bd16:	30 19       	mov	r9,1
8002bd18:	f2 08 09 48 	lsl	r8,r9,r8
8002bd1c:	5c d8       	com	r8
8002bd1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd22:	f3 e8 00 08 	and	r8,r9,r8
8002bd26:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd2a:	fe 78 04 00 	mov	r8,-64512
8002bd2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002bd32:	f2 0a 15 02 	lsl	r10,r9,0x2
8002bd36:	32 09       	mov	r9,32
8002bd38:	ea 19 aa 00 	orh	r9,0xaa00
8002bd3c:	f4 09 00 09 	add	r9,r10,r9
8002bd40:	f1 49 00 58 	st.w	r8[88],r9
8002bd44:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd48:	a3 68       	lsl	r8,0x2
8002bd4a:	e0 28 fb e0 	sub	r8,64480
8002bd4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd52:	91 09       	st.w	r8[0x0],r9
8002bd54:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bd58:	fe b0 fd 65 	rcall	8002b822 <cpu_irq_restore>
8002bd5c:	2f cd       	sub	sp,-16
8002bd5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd62:	00 00       	add	r0,r0
8002bd64:	80 02       	ld.sh	r2,r0[0x0]
8002bd66:	bb 72       	lsl	r2,0x1b

8002bd68 <sysclk_set_prescalers>:
8002bd68:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd6c:	1a 97       	mov	r7,sp
8002bd6e:	20 9d       	sub	sp,36
8002bd70:	4b f6       	lddpc	r6,8002be6c <sysclk_set_prescalers+0x104>
8002bd72:	1e 26       	rsub	r6,pc
8002bd74:	ef 4c ff e8 	st.w	r7[-24],r12
8002bd78:	ef 4b ff e4 	st.w	r7[-28],r11
8002bd7c:	ef 4a ff e0 	st.w	r7[-32],r10
8002bd80:	ef 49 ff dc 	st.w	r7[-36],r9
8002bd84:	30 08       	mov	r8,0
8002bd86:	ef 48 ff f0 	st.w	r7[-16],r8
8002bd8a:	30 08       	mov	r8,0
8002bd8c:	ef 48 ff f4 	st.w	r7[-12],r8
8002bd90:	30 08       	mov	r8,0
8002bd92:	ef 48 ff f8 	st.w	r7[-8],r8
8002bd96:	30 08       	mov	r8,0
8002bd98:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd9c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002bda0:	58 08       	cp.w	r8,0
8002bda2:	c0 80       	breq	8002bdb2 <sysclk_set_prescalers+0x4a>
8002bda4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002bda8:	20 18       	sub	r8,1
8002bdaa:	a5 68       	lsl	r8,0x4
8002bdac:	a7 b8       	sbr	r8,0x7
8002bdae:	ef 48 ff f0 	st.w	r7[-16],r8
8002bdb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002bdb6:	58 08       	cp.w	r8,0
8002bdb8:	c0 80       	breq	8002bdc8 <sysclk_set_prescalers+0x60>
8002bdba:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002bdbe:	20 18       	sub	r8,1
8002bdc0:	ad 68       	lsl	r8,0xc
8002bdc2:	a7 b8       	sbr	r8,0x7
8002bdc4:	ef 48 ff f4 	st.w	r7[-12],r8
8002bdc8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002bdcc:	58 08       	cp.w	r8,0
8002bdce:	c0 80       	breq	8002bdde <sysclk_set_prescalers+0x76>
8002bdd0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002bdd4:	20 18       	sub	r8,1
8002bdd6:	b1 68       	lsl	r8,0x10
8002bdd8:	a7 b8       	sbr	r8,0x7
8002bdda:	ef 48 ff f8 	st.w	r7[-8],r8
8002bdde:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002bde2:	58 08       	cp.w	r8,0
8002bde4:	c0 80       	breq	8002bdf4 <sysclk_set_prescalers+0x8c>
8002bde6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002bdea:	20 18       	sub	r8,1
8002bdec:	b5 68       	lsl	r8,0x14
8002bdee:	a7 b8       	sbr	r8,0x7
8002bdf0:	ef 48 ff fc 	st.w	r7[-4],r8
8002bdf4:	fe b0 fd 08 	rcall	8002b804 <cpu_irq_save>
8002bdf8:	18 98       	mov	r8,r12
8002bdfa:	ef 48 ff ec 	st.w	r7[-20],r8
8002bdfe:	fe 78 04 00 	mov	r8,-64512
8002be02:	30 49       	mov	r9,4
8002be04:	ea 19 aa 00 	orh	r9,0xaa00
8002be08:	f1 49 00 58 	st.w	r8[88],r9
8002be0c:	fe 78 04 00 	mov	r8,-64512
8002be10:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002be14:	91 19       	st.w	r8[0x4],r9
8002be16:	fe 78 04 00 	mov	r8,-64512
8002be1a:	30 c9       	mov	r9,12
8002be1c:	ea 19 aa 00 	orh	r9,0xaa00
8002be20:	f1 49 00 58 	st.w	r8[88],r9
8002be24:	fe 78 04 00 	mov	r8,-64512
8002be28:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be2c:	91 39       	st.w	r8[0xc],r9
8002be2e:	fe 78 04 00 	mov	r8,-64512
8002be32:	31 09       	mov	r9,16
8002be34:	ea 19 aa 00 	orh	r9,0xaa00
8002be38:	f1 49 00 58 	st.w	r8[88],r9
8002be3c:	fe 78 04 00 	mov	r8,-64512
8002be40:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002be44:	91 49       	st.w	r8[0x10],r9
8002be46:	fe 78 04 00 	mov	r8,-64512
8002be4a:	31 49       	mov	r9,20
8002be4c:	ea 19 aa 00 	orh	r9,0xaa00
8002be50:	f1 49 00 58 	st.w	r8[88],r9
8002be54:	fe 78 04 00 	mov	r8,-64512
8002be58:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002be5c:	91 49       	st.w	r8[0x10],r9
8002be5e:	ee fc ff ec 	ld.w	r12,r7[-20]
8002be62:	fe b0 fc e0 	rcall	8002b822 <cpu_irq_restore>
8002be66:	2f 7d       	sub	sp,-36
8002be68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be6c:	80 02       	ld.sh	r2,r0[0x0]
8002be6e:	bb f6       	*unknown*

8002be70 <sysclk_set_source>:
8002be70:	eb cd 40 c0 	pushm	r6-r7,lr
8002be74:	1a 97       	mov	r7,sp
8002be76:	20 2d       	sub	sp,8
8002be78:	48 e6       	lddpc	r6,8002beb0 <sysclk_set_source+0x40>
8002be7a:	1e 26       	rsub	r6,pc
8002be7c:	ef 4c ff f8 	st.w	r7[-8],r12
8002be80:	fe b0 fc c2 	rcall	8002b804 <cpu_irq_save>
8002be84:	18 98       	mov	r8,r12
8002be86:	ef 48 ff fc 	st.w	r7[-4],r8
8002be8a:	fe 78 04 00 	mov	r8,-64512
8002be8e:	fc 19 aa 00 	movh	r9,0xaa00
8002be92:	f1 49 00 58 	st.w	r8[88],r9
8002be96:	fe 78 04 00 	mov	r8,-64512
8002be9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002be9e:	91 09       	st.w	r8[0x0],r9
8002bea0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bea4:	fe b0 fc bf 	rcall	8002b822 <cpu_irq_restore>
8002bea8:	2f ed       	sub	sp,-8
8002beaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002beae:	00 00       	add	r0,r0
8002beb0:	80 02       	ld.sh	r2,r0[0x0]
8002beb2:	bc fe       	st.b	lr[0x7],lr

8002beb4 <sysclk_enable_usb>:
8002beb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002beb8:	1a 97       	mov	r7,sp
8002beba:	20 3d       	sub	sp,12
8002bebc:	49 66       	lddpc	r6,8002bf14 <sysclk_enable_usb+0x60>
8002bebe:	1e 26       	rsub	r6,pc
8002bec0:	ee c8 00 04 	sub	r8,r7,4
8002bec4:	30 0b       	mov	r11,0
8002bec6:	10 9c       	mov	r12,r8
8002bec8:	c4 2e       	rcall	8002bb4c <genclk_config_defaults>
8002beca:	30 0c       	mov	r12,0
8002becc:	c0 3e       	rcall	8002bad2 <pll_enable_source_sync>
8002bece:	ee c8 00 0c 	sub	r8,r7,12
8002bed2:	30 39       	mov	r9,3
8002bed4:	30 1a       	mov	r10,1
8002bed6:	30 0b       	mov	r11,0
8002bed8:	10 9c       	mov	r12,r8
8002beda:	fe b0 fd 77 	rcall	8002b9c8 <pll_config_init>
8002bede:	ee c8 00 0c 	sub	r8,r7,12
8002bee2:	30 1b       	mov	r11,1
8002bee4:	10 9c       	mov	r12,r8
8002bee6:	f0 16 00 ac 	mcall	r6[688]
8002beea:	30 1c       	mov	r12,1
8002beec:	c1 8e       	rcall	8002bb1c <pll_wait_for_lock>
8002beee:	ee c8 00 04 	sub	r8,r7,4
8002bef2:	30 6b       	mov	r11,6
8002bef4:	10 9c       	mov	r12,r8
8002bef6:	c3 ae       	rcall	8002bb6a <genclk_config_set_source>
8002bef8:	ee c8 00 04 	sub	r8,r7,4
8002befc:	30 1b       	mov	r11,1
8002befe:	10 9c       	mov	r12,r8
8002bf00:	c4 de       	rcall	8002bb9a <genclk_config_set_divider>
8002bf02:	ee c8 00 04 	sub	r8,r7,4
8002bf06:	30 0b       	mov	r11,0
8002bf08:	10 9c       	mov	r12,r8
8002bf0a:	c7 8e       	rcall	8002bbfa <genclk_enable>
8002bf0c:	2f dd       	sub	sp,-12
8002bf0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf12:	00 00       	add	r0,r0
8002bf14:	80 02       	ld.sh	r2,r0[0x0]
8002bf16:	bd 42       	asr	r2,0x1c

8002bf18 <sysclk_disable_usb>:
8002bf18:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf1c:	1a 97       	mov	r7,sp
8002bf1e:	48 46       	lddpc	r6,8002bf2c <sysclk_disable_usb+0x14>
8002bf20:	1e 26       	rsub	r6,pc
8002bf22:	30 0c       	mov	r12,0
8002bf24:	c8 1e       	rcall	8002bc26 <genclk_disable>
8002bf26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf2a:	00 00       	add	r0,r0
8002bf2c:	80 02       	ld.sh	r2,r0[0x0]
8002bf2e:	bd a4       	sbr	r4,0x1c

8002bf30 <sysclk_init>:
8002bf30:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf34:	1a 97       	mov	r7,sp
8002bf36:	20 2d       	sub	sp,8
8002bf38:	49 b6       	lddpc	r6,8002bfa4 <sysclk_init+0x74>
8002bf3a:	1e 26       	rsub	r6,pc
8002bf3c:	30 0c       	mov	r12,0
8002bf3e:	fe b0 fd ca 	rcall	8002bad2 <pll_enable_source_sync>
8002bf42:	ee c8 00 04 	sub	r8,r7,4
8002bf46:	30 49       	mov	r9,4
8002bf48:	30 1a       	mov	r10,1
8002bf4a:	30 0b       	mov	r11,0
8002bf4c:	10 9c       	mov	r12,r8
8002bf4e:	fe b0 fd 3d 	rcall	8002b9c8 <pll_config_init>
8002bf52:	ee c8 00 04 	sub	r8,r7,4
8002bf56:	30 0b       	mov	r11,0
8002bf58:	10 9c       	mov	r12,r8
8002bf5a:	f0 16 00 ac 	mcall	r6[688]
8002bf5e:	30 0c       	mov	r12,0
8002bf60:	fe b0 fd de 	rcall	8002bb1c <pll_wait_for_lock>
8002bf64:	30 0c       	mov	r12,0
8002bf66:	fe b0 fd b6 	rcall	8002bad2 <pll_enable_source_sync>
8002bf6a:	ee c8 00 08 	sub	r8,r7,8
8002bf6e:	30 39       	mov	r9,3
8002bf70:	30 1a       	mov	r10,1
8002bf72:	30 0b       	mov	r11,0
8002bf74:	10 9c       	mov	r12,r8
8002bf76:	fe b0 fd 29 	rcall	8002b9c8 <pll_config_init>
8002bf7a:	ee c8 00 08 	sub	r8,r7,8
8002bf7e:	30 1b       	mov	r11,1
8002bf80:	10 9c       	mov	r12,r8
8002bf82:	f0 16 00 ac 	mcall	r6[688]
8002bf86:	30 1c       	mov	r12,1
8002bf88:	fe b0 fd ca 	rcall	8002bb1c <pll_wait_for_lock>
8002bf8c:	c5 ee       	rcall	8002bc48 <sysclk_get_main_hz>
8002bf8e:	18 98       	mov	r8,r12
8002bf90:	10 9c       	mov	r12,r8
8002bf92:	f0 16 01 5f 	mcall	r6[1404]
8002bf96:	30 3c       	mov	r12,3
8002bf98:	f0 16 01 c4 	mcall	r6[1808]
8002bf9c:	2f ed       	sub	sp,-8
8002bf9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bfa2:	00 00       	add	r0,r0
8002bfa4:	80 02       	ld.sh	r2,r0[0x0]
8002bfa6:	bd be       	sbr	lr,0x1d

8002bfa8 <osc_get_rate>:
8002bfa8:	eb cd 40 80 	pushm	r7,lr
8002bfac:	1a 97       	mov	r7,sp
8002bfae:	20 1d       	sub	sp,4
8002bfb0:	18 98       	mov	r8,r12
8002bfb2:	ef 68 ff fc 	st.b	r7[-4],r8
8002bfb6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bfba:	58 38       	cp.w	r8,3
8002bfbc:	c1 20       	breq	8002bfe0 <osc_get_rate+0x38>
8002bfbe:	e0 89 00 07 	brgt	8002bfcc <osc_get_rate+0x24>
8002bfc2:	58 08       	cp.w	r8,0
8002bfc4:	c0 90       	breq	8002bfd6 <osc_get_rate+0x2e>
8002bfc6:	58 28       	cp.w	r8,2
8002bfc8:	c0 f0       	breq	8002bfe6 <osc_get_rate+0x3e>
8002bfca:	c1 b8       	rjmp	8002c000 <osc_get_rate+0x58>
8002bfcc:	58 48       	cp.w	r8,4
8002bfce:	c1 10       	breq	8002bff0 <osc_get_rate+0x48>
8002bfd0:	58 58       	cp.w	r8,5
8002bfd2:	c1 40       	breq	8002bffa <osc_get_rate+0x52>
8002bfd4:	c1 68       	rjmp	8002c000 <osc_get_rate+0x58>
8002bfd6:	e0 68 24 00 	mov	r8,9216
8002bfda:	ea 18 00 f4 	orh	r8,0xf4
8002bfde:	c1 28       	rjmp	8002c002 <osc_get_rate+0x5a>
8002bfe0:	e0 68 80 00 	mov	r8,32768
8002bfe4:	c0 f8       	rjmp	8002c002 <osc_get_rate+0x5a>
8002bfe6:	e0 68 12 00 	mov	r8,4608
8002bfea:	ea 18 00 7a 	orh	r8,0x7a
8002bfee:	c0 a8       	rjmp	8002c002 <osc_get_rate+0x5a>
8002bff0:	e0 68 0e 00 	mov	r8,3584
8002bff4:	ea 18 07 27 	orh	r8,0x727
8002bff8:	c0 58       	rjmp	8002c002 <osc_get_rate+0x5a>
8002bffa:	e0 78 c1 38 	mov	r8,115000
8002bffe:	c0 28       	rjmp	8002c002 <osc_get_rate+0x5a>
8002c000:	30 08       	mov	r8,0
8002c002:	10 9c       	mov	r12,r8
8002c004:	2f fd       	sub	sp,-4
8002c006:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c00a <sysclk_get_main_hz>:
8002c00a:	eb cd 40 c0 	pushm	r6-r7,lr
8002c00e:	1a 97       	mov	r7,sp
8002c010:	48 56       	lddpc	r6,8002c024 <sysclk_get_main_hz+0x1a>
8002c012:	1e 26       	rsub	r6,pc
8002c014:	30 0c       	mov	r12,0
8002c016:	cc 9f       	rcall	8002bfa8 <osc_get_rate>
8002c018:	18 98       	mov	r8,r12
8002c01a:	a3 68       	lsl	r8,0x2
8002c01c:	10 9c       	mov	r12,r8
8002c01e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c022:	00 00       	add	r0,r0
8002c024:	80 02       	ld.sh	r2,r0[0x0]
8002c026:	be 96       	st.b	pc[0x1],r6

8002c028 <sysclk_get_pba_hz>:
8002c028:	eb cd 40 c0 	pushm	r6-r7,lr
8002c02c:	1a 97       	mov	r7,sp
8002c02e:	48 46       	lddpc	r6,8002c03c <sysclk_get_pba_hz+0x14>
8002c030:	1e 26       	rsub	r6,pc
8002c032:	ce cf       	rcall	8002c00a <sysclk_get_main_hz>
8002c034:	18 98       	mov	r8,r12
8002c036:	10 9c       	mov	r12,r8
8002c038:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c03c:	80 02       	ld.sh	r2,r0[0x0]
8002c03e:	be b4       	st.b	pc[0x3],r4

8002c040 <spi_set_chipselect_delay_bct>:
8002c040:	eb cd 40 80 	pushm	r7,lr
8002c044:	1a 97       	mov	r7,sp
8002c046:	20 3d       	sub	sp,12
8002c048:	ef 4c ff fc 	st.w	r7[-4],r12
8002c04c:	16 99       	mov	r9,r11
8002c04e:	14 98       	mov	r8,r10
8002c050:	ef 69 ff f8 	st.b	r7[-8],r9
8002c054:	ef 68 ff f4 	st.b	r7[-12],r8
8002c058:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c05c:	58 18       	cp.w	r8,1
8002c05e:	c1 40       	breq	8002c086 <spi_set_chipselect_delay_bct+0x46>
8002c060:	e0 89 00 05 	brgt	8002c06a <spi_set_chipselect_delay_bct+0x2a>
8002c064:	58 08       	cp.w	r8,0
8002c066:	c0 70       	breq	8002c074 <spi_set_chipselect_delay_bct+0x34>
8002c068:	c2 98       	rjmp	8002c0ba <spi_set_chipselect_delay_bct+0x7a>
8002c06a:	58 28       	cp.w	r8,2
8002c06c:	c1 60       	breq	8002c098 <spi_set_chipselect_delay_bct+0x58>
8002c06e:	58 38       	cp.w	r8,3
8002c070:	c1 d0       	breq	8002c0aa <spi_set_chipselect_delay_bct+0x6a>
8002c072:	c2 48       	rjmp	8002c0ba <spi_set_chipselect_delay_bct+0x7a>
8002c074:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c078:	72 c8       	ld.w	r8,r9[0x30]
8002c07a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c07e:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c082:	93 c8       	st.w	r9[0x30],r8
8002c084:	c1 b8       	rjmp	8002c0ba <spi_set_chipselect_delay_bct+0x7a>
8002c086:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c08a:	72 d8       	ld.w	r8,r9[0x34]
8002c08c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c090:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c094:	93 d8       	st.w	r9[0x34],r8
8002c096:	c1 28       	rjmp	8002c0ba <spi_set_chipselect_delay_bct+0x7a>
8002c098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c09c:	72 e8       	ld.w	r8,r9[0x38]
8002c09e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c0a2:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c0a6:	93 e8       	st.w	r9[0x38],r8
8002c0a8:	c0 98       	rjmp	8002c0ba <spi_set_chipselect_delay_bct+0x7a>
8002c0aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c0ae:	72 f8       	ld.w	r8,r9[0x3c]
8002c0b0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c0b4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c0b8:	93 f8       	st.w	r9[0x3c],r8
8002c0ba:	2f dd       	sub	sp,-12
8002c0bc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0c0 <spi_set_chipselect_delay_bs>:
8002c0c0:	eb cd 40 80 	pushm	r7,lr
8002c0c4:	1a 97       	mov	r7,sp
8002c0c6:	20 3d       	sub	sp,12
8002c0c8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c0cc:	16 99       	mov	r9,r11
8002c0ce:	14 98       	mov	r8,r10
8002c0d0:	ef 69 ff f8 	st.b	r7[-8],r9
8002c0d4:	ef 68 ff f4 	st.b	r7[-12],r8
8002c0d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c0dc:	58 18       	cp.w	r8,1
8002c0de:	c1 40       	breq	8002c106 <spi_set_chipselect_delay_bs+0x46>
8002c0e0:	e0 89 00 05 	brgt	8002c0ea <spi_set_chipselect_delay_bs+0x2a>
8002c0e4:	58 08       	cp.w	r8,0
8002c0e6:	c0 70       	breq	8002c0f4 <spi_set_chipselect_delay_bs+0x34>
8002c0e8:	c2 98       	rjmp	8002c13a <spi_set_chipselect_delay_bs+0x7a>
8002c0ea:	58 28       	cp.w	r8,2
8002c0ec:	c1 60       	breq	8002c118 <spi_set_chipselect_delay_bs+0x58>
8002c0ee:	58 38       	cp.w	r8,3
8002c0f0:	c1 d0       	breq	8002c12a <spi_set_chipselect_delay_bs+0x6a>
8002c0f2:	c2 48       	rjmp	8002c13a <spi_set_chipselect_delay_bs+0x7a>
8002c0f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c0f8:	72 c8       	ld.w	r8,r9[0x30]
8002c0fa:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c0fe:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c102:	93 c8       	st.w	r9[0x30],r8
8002c104:	c1 b8       	rjmp	8002c13a <spi_set_chipselect_delay_bs+0x7a>
8002c106:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c10a:	72 d8       	ld.w	r8,r9[0x34]
8002c10c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c110:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c114:	93 d8       	st.w	r9[0x34],r8
8002c116:	c1 28       	rjmp	8002c13a <spi_set_chipselect_delay_bs+0x7a>
8002c118:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c11c:	72 e8       	ld.w	r8,r9[0x38]
8002c11e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c122:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c126:	93 e8       	st.w	r9[0x38],r8
8002c128:	c0 98       	rjmp	8002c13a <spi_set_chipselect_delay_bs+0x7a>
8002c12a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c12e:	72 f8       	ld.w	r8,r9[0x3c]
8002c130:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c134:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c138:	93 f8       	st.w	r9[0x3c],r8
8002c13a:	2f dd       	sub	sp,-12
8002c13c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c140 <spi_set_bits_per_transfer>:
8002c140:	eb cd 40 80 	pushm	r7,lr
8002c144:	1a 97       	mov	r7,sp
8002c146:	20 3d       	sub	sp,12
8002c148:	ef 4c ff fc 	st.w	r7[-4],r12
8002c14c:	16 99       	mov	r9,r11
8002c14e:	14 98       	mov	r8,r10
8002c150:	ef 69 ff f8 	st.b	r7[-8],r9
8002c154:	ef 68 ff f4 	st.b	r7[-12],r8
8002c158:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c15c:	58 18       	cp.w	r8,1
8002c15e:	c1 a0       	breq	8002c192 <spi_set_bits_per_transfer+0x52>
8002c160:	e0 89 00 05 	brgt	8002c16a <spi_set_bits_per_transfer+0x2a>
8002c164:	58 08       	cp.w	r8,0
8002c166:	c0 70       	breq	8002c174 <spi_set_bits_per_transfer+0x34>
8002c168:	c4 18       	rjmp	8002c1ea <spi_set_bits_per_transfer+0xaa>
8002c16a:	58 28       	cp.w	r8,2
8002c16c:	c2 20       	breq	8002c1b0 <spi_set_bits_per_transfer+0x70>
8002c16e:	58 38       	cp.w	r8,3
8002c170:	c2 f0       	breq	8002c1ce <spi_set_bits_per_transfer+0x8e>
8002c172:	c3 c8       	rjmp	8002c1ea <spi_set_bits_per_transfer+0xaa>
8002c174:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c178:	20 88       	sub	r8,8
8002c17a:	5c 58       	castu.b	r8
8002c17c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c180:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c184:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c188:	72 c8       	ld.w	r8,r9[0x30]
8002c18a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c18e:	93 c8       	st.w	r9[0x30],r8
8002c190:	c2 d8       	rjmp	8002c1ea <spi_set_bits_per_transfer+0xaa>
8002c192:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c196:	20 88       	sub	r8,8
8002c198:	5c 58       	castu.b	r8
8002c19a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c19e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c1a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c1a6:	72 d8       	ld.w	r8,r9[0x34]
8002c1a8:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c1ac:	93 d8       	st.w	r9[0x34],r8
8002c1ae:	c1 e8       	rjmp	8002c1ea <spi_set_bits_per_transfer+0xaa>
8002c1b0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c1b4:	20 88       	sub	r8,8
8002c1b6:	5c 58       	castu.b	r8
8002c1b8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c1bc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c1c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c1c4:	72 e8       	ld.w	r8,r9[0x38]
8002c1c6:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c1ca:	93 e8       	st.w	r9[0x38],r8
8002c1cc:	c0 f8       	rjmp	8002c1ea <spi_set_bits_per_transfer+0xaa>
8002c1ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c1d2:	20 88       	sub	r8,8
8002c1d4:	5c 58       	castu.b	r8
8002c1d6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c1da:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c1de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c1e2:	72 f8       	ld.w	r8,r9[0x3c]
8002c1e4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c1e8:	93 f8       	st.w	r9[0x3c],r8
8002c1ea:	2f dd       	sub	sp,-12
8002c1ec:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1f0 <spi_set_baudrate_register>:
8002c1f0:	eb cd 40 80 	pushm	r7,lr
8002c1f4:	1a 97       	mov	r7,sp
8002c1f6:	20 3d       	sub	sp,12
8002c1f8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c1fc:	16 99       	mov	r9,r11
8002c1fe:	14 98       	mov	r8,r10
8002c200:	ef 69 ff f8 	st.b	r7[-8],r9
8002c204:	ef 68 ff f4 	st.b	r7[-12],r8
8002c208:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c20c:	58 18       	cp.w	r8,1
8002c20e:	c1 40       	breq	8002c236 <spi_set_baudrate_register+0x46>
8002c210:	e0 89 00 05 	brgt	8002c21a <spi_set_baudrate_register+0x2a>
8002c214:	58 08       	cp.w	r8,0
8002c216:	c0 70       	breq	8002c224 <spi_set_baudrate_register+0x34>
8002c218:	c2 98       	rjmp	8002c26a <spi_set_baudrate_register+0x7a>
8002c21a:	58 28       	cp.w	r8,2
8002c21c:	c1 60       	breq	8002c248 <spi_set_baudrate_register+0x58>
8002c21e:	58 38       	cp.w	r8,3
8002c220:	c1 d0       	breq	8002c25a <spi_set_baudrate_register+0x6a>
8002c222:	c2 48       	rjmp	8002c26a <spi_set_baudrate_register+0x7a>
8002c224:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c228:	72 c8       	ld.w	r8,r9[0x30]
8002c22a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c22e:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c232:	93 c8       	st.w	r9[0x30],r8
8002c234:	c1 b8       	rjmp	8002c26a <spi_set_baudrate_register+0x7a>
8002c236:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c23a:	72 d8       	ld.w	r8,r9[0x34]
8002c23c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c240:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c244:	93 d8       	st.w	r9[0x34],r8
8002c246:	c1 28       	rjmp	8002c26a <spi_set_baudrate_register+0x7a>
8002c248:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c24c:	72 e8       	ld.w	r8,r9[0x38]
8002c24e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c252:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c256:	93 e8       	st.w	r9[0x38],r8
8002c258:	c0 98       	rjmp	8002c26a <spi_set_baudrate_register+0x7a>
8002c25a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c25e:	72 f8       	ld.w	r8,r9[0x3c]
8002c260:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c264:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c268:	93 f8       	st.w	r9[0x3c],r8
8002c26a:	2f dd       	sub	sp,-12
8002c26c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c270 <spi_enable_active_mode>:
8002c270:	eb cd 40 80 	pushm	r7,lr
8002c274:	1a 97       	mov	r7,sp
8002c276:	20 2d       	sub	sp,8
8002c278:	ef 4c ff fc 	st.w	r7[-4],r12
8002c27c:	16 98       	mov	r8,r11
8002c27e:	ef 68 ff f8 	st.b	r7[-8],r8
8002c282:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c286:	58 18       	cp.w	r8,1
8002c288:	c1 30       	breq	8002c2ae <spi_enable_active_mode+0x3e>
8002c28a:	e0 89 00 05 	brgt	8002c294 <spi_enable_active_mode+0x24>
8002c28e:	58 08       	cp.w	r8,0
8002c290:	c0 70       	breq	8002c29e <spi_enable_active_mode+0x2e>
8002c292:	c2 58       	rjmp	8002c2dc <spi_enable_active_mode+0x6c>
8002c294:	58 28       	cp.w	r8,2
8002c296:	c1 40       	breq	8002c2be <spi_enable_active_mode+0x4e>
8002c298:	58 38       	cp.w	r8,3
8002c29a:	c1 a0       	breq	8002c2ce <spi_enable_active_mode+0x5e>
8002c29c:	c2 08       	rjmp	8002c2dc <spi_enable_active_mode+0x6c>
8002c29e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c2a2:	72 c8       	ld.w	r8,r9[0x30]
8002c2a4:	30 1a       	mov	r10,1
8002c2a6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c2aa:	93 c8       	st.w	r9[0x30],r8
8002c2ac:	c1 88       	rjmp	8002c2dc <spi_enable_active_mode+0x6c>
8002c2ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c2b2:	72 d8       	ld.w	r8,r9[0x34]
8002c2b4:	30 1a       	mov	r10,1
8002c2b6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c2ba:	93 d8       	st.w	r9[0x34],r8
8002c2bc:	c1 08       	rjmp	8002c2dc <spi_enable_active_mode+0x6c>
8002c2be:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c2c2:	72 e8       	ld.w	r8,r9[0x38]
8002c2c4:	30 1a       	mov	r10,1
8002c2c6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c2ca:	93 e8       	st.w	r9[0x38],r8
8002c2cc:	c0 88       	rjmp	8002c2dc <spi_enable_active_mode+0x6c>
8002c2ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c2d2:	72 f8       	ld.w	r8,r9[0x3c]
8002c2d4:	30 1a       	mov	r10,1
8002c2d6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c2da:	93 f8       	st.w	r9[0x3c],r8
8002c2dc:	2f ed       	sub	sp,-8
8002c2de:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2e2 <spi_set_mode>:
8002c2e2:	eb cd 40 80 	pushm	r7,lr
8002c2e6:	1a 97       	mov	r7,sp
8002c2e8:	20 3d       	sub	sp,12
8002c2ea:	ef 4c ff fc 	st.w	r7[-4],r12
8002c2ee:	16 99       	mov	r9,r11
8002c2f0:	14 98       	mov	r8,r10
8002c2f2:	ef 69 ff f8 	st.b	r7[-8],r9
8002c2f6:	ef 68 ff f4 	st.b	r7[-12],r8
8002c2fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c2fe:	58 18       	cp.w	r8,1
8002c300:	c2 70       	breq	8002c34e <spi_set_mode+0x6c>
8002c302:	e0 89 00 05 	brgt	8002c30c <spi_set_mode+0x2a>
8002c306:	58 08       	cp.w	r8,0
8002c308:	c0 70       	breq	8002c316 <spi_set_mode+0x34>
8002c30a:	c7 58       	rjmp	8002c3f4 <spi_set_mode+0x112>
8002c30c:	58 28       	cp.w	r8,2
8002c30e:	c3 c0       	breq	8002c386 <spi_set_mode+0xa4>
8002c310:	58 38       	cp.w	r8,3
8002c312:	c5 60       	breq	8002c3be <spi_set_mode+0xdc>
8002c314:	c7 08       	rjmp	8002c3f4 <spi_set_mode+0x112>
8002c316:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c31a:	a1 98       	lsr	r8,0x1
8002c31c:	5c 58       	castu.b	r8
8002c31e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c322:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c326:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c32a:	72 c8       	ld.w	r8,r9[0x30]
8002c32c:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002c330:	93 c8       	st.w	r9[0x30],r8
8002c332:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c336:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c33a:	5f 08       	sreq	r8
8002c33c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c340:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c344:	72 c8       	ld.w	r8,r9[0x30]
8002c346:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002c34a:	93 c8       	st.w	r9[0x30],r8
8002c34c:	c5 48       	rjmp	8002c3f4 <spi_set_mode+0x112>
8002c34e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c352:	a1 98       	lsr	r8,0x1
8002c354:	5c 58       	castu.b	r8
8002c356:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c35a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c35e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c362:	72 d8       	ld.w	r8,r9[0x34]
8002c364:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002c368:	93 d8       	st.w	r9[0x34],r8
8002c36a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c36e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c372:	5f 08       	sreq	r8
8002c374:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c378:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c37c:	72 d8       	ld.w	r8,r9[0x34]
8002c37e:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002c382:	93 d8       	st.w	r9[0x34],r8
8002c384:	c3 88       	rjmp	8002c3f4 <spi_set_mode+0x112>
8002c386:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c38a:	a1 98       	lsr	r8,0x1
8002c38c:	5c 58       	castu.b	r8
8002c38e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c392:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c396:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c39a:	72 e8       	ld.w	r8,r9[0x38]
8002c39c:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002c3a0:	93 e8       	st.w	r9[0x38],r8
8002c3a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c3a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c3aa:	5f 08       	sreq	r8
8002c3ac:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c3b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3b4:	72 e8       	ld.w	r8,r9[0x38]
8002c3b6:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002c3ba:	93 e8       	st.w	r9[0x38],r8
8002c3bc:	c1 c8       	rjmp	8002c3f4 <spi_set_mode+0x112>
8002c3be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c3c2:	a1 98       	lsr	r8,0x1
8002c3c4:	5c 58       	castu.b	r8
8002c3c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c3ca:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c3ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3d2:	72 f8       	ld.w	r8,r9[0x3c]
8002c3d4:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002c3d8:	93 f8       	st.w	r9[0x3c],r8
8002c3da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c3de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c3e2:	5f 08       	sreq	r8
8002c3e4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c3e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3ec:	72 f8       	ld.w	r8,r9[0x3c]
8002c3ee:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002c3f2:	93 f8       	st.w	r9[0x3c],r8
8002c3f4:	2f dd       	sub	sp,-12
8002c3f6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c3fa <spi_put>:
8002c3fa:	eb cd 40 80 	pushm	r7,lr
8002c3fe:	1a 97       	mov	r7,sp
8002c400:	20 2d       	sub	sp,8
8002c402:	ef 4c ff fc 	st.w	r7[-4],r12
8002c406:	16 98       	mov	r8,r11
8002c408:	ef 58 ff f8 	st.h	r7[-8],r8
8002c40c:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002c410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c414:	91 39       	st.w	r8[0xc],r9
8002c416:	2f ed       	sub	sp,-8
8002c418:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c41c <spi_get>:
8002c41c:	eb cd 40 80 	pushm	r7,lr
8002c420:	1a 97       	mov	r7,sp
8002c422:	20 1d       	sub	sp,4
8002c424:	ef 4c ff fc 	st.w	r7[-4],r12
8002c428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c42c:	70 28       	ld.w	r8,r8[0x8]
8002c42e:	5c 88       	casts.h	r8
8002c430:	10 9c       	mov	r12,r8
8002c432:	2f fd       	sub	sp,-4
8002c434:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c438 <spi_is_tx_ready>:
8002c438:	eb cd 40 80 	pushm	r7,lr
8002c43c:	1a 97       	mov	r7,sp
8002c43e:	20 1d       	sub	sp,4
8002c440:	ef 4c ff fc 	st.w	r7[-4],r12
8002c444:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c448:	70 48       	ld.w	r8,r8[0x10]
8002c44a:	e2 18 00 02 	andl	r8,0x2,COH
8002c44e:	5f 18       	srne	r8
8002c450:	5c 58       	castu.b	r8
8002c452:	10 9c       	mov	r12,r8
8002c454:	2f fd       	sub	sp,-4
8002c456:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c45a <spi_is_rx_ready>:
8002c45a:	eb cd 40 80 	pushm	r7,lr
8002c45e:	1a 97       	mov	r7,sp
8002c460:	20 1d       	sub	sp,4
8002c462:	ef 4c ff fc 	st.w	r7[-4],r12
8002c466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c46a:	70 48       	ld.w	r8,r8[0x10]
8002c46c:	e2 18 02 01 	andl	r8,0x201,COH
8002c470:	e0 48 02 01 	cp.w	r8,513
8002c474:	5f 08       	sreq	r8
8002c476:	5c 58       	castu.b	r8
8002c478:	10 9c       	mov	r12,r8
8002c47a:	2f fd       	sub	sp,-4
8002c47c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c480 <spi_write_single>:
8002c480:	eb cd 40 c0 	pushm	r6-r7,lr
8002c484:	1a 97       	mov	r7,sp
8002c486:	20 2d       	sub	sp,8
8002c488:	48 86       	lddpc	r6,8002c4a8 <spi_write_single+0x28>
8002c48a:	1e 26       	rsub	r6,pc
8002c48c:	ef 4c ff fc 	st.w	r7[-4],r12
8002c490:	16 98       	mov	r8,r11
8002c492:	ef 68 ff f8 	st.b	r7[-8],r8
8002c496:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c49a:	10 9b       	mov	r11,r8
8002c49c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c4a0:	ca df       	rcall	8002c3fa <spi_put>
8002c4a2:	2f ed       	sub	sp,-8
8002c4a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4a8:	80 02       	ld.sh	r2,r0[0x0]
8002c4aa:	c3 0e       	rcall	8002c10a <spi_set_chipselect_delay_bs+0x4a>

8002c4ac <spi_read_single>:
8002c4ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4b0:	1a 97       	mov	r7,sp
8002c4b2:	20 2d       	sub	sp,8
8002c4b4:	48 96       	lddpc	r6,8002c4d8 <spi_read_single+0x2c>
8002c4b6:	1e 26       	rsub	r6,pc
8002c4b8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c4bc:	ef 4b ff f8 	st.w	r7[-8],r11
8002c4c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c4c4:	ca cf       	rcall	8002c41c <spi_get>
8002c4c6:	18 98       	mov	r8,r12
8002c4c8:	5c 88       	casts.h	r8
8002c4ca:	5c 58       	castu.b	r8
8002c4cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c4d0:	b2 88       	st.b	r9[0x0],r8
8002c4d2:	2f ed       	sub	sp,-8
8002c4d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4d8:	80 02       	ld.sh	r2,r0[0x0]
8002c4da:	c3 3a       	rjmp	8002c140 <spi_set_bits_per_transfer>

8002c4dc <spi_master_setup_device>:
8002c4dc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4e0:	1a 97       	mov	r7,sp
8002c4e2:	20 5d       	sub	sp,20
8002c4e4:	4a 76       	lddpc	r6,8002c580 <spi_master_setup_device+0xa4>
8002c4e6:	1e 26       	rsub	r6,pc
8002c4e8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c4ec:	ef 4b ff f8 	st.w	r7[-8],r11
8002c4f0:	ef 49 ff f0 	st.w	r7[-16],r9
8002c4f4:	14 99       	mov	r9,r10
8002c4f6:	ef 69 ff f4 	st.b	r7[-12],r9
8002c4fa:	ef 68 ff ec 	st.b	r7[-20],r8
8002c4fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c502:	11 88       	ld.ub	r8,r8[0x0]
8002c504:	30 0a       	mov	r10,0
8002c506:	10 9b       	mov	r11,r8
8002c508:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c50c:	fe b0 fd 9a 	rcall	8002c040 <spi_set_chipselect_delay_bct>
8002c510:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c514:	11 88       	ld.ub	r8,r8[0x0]
8002c516:	30 0a       	mov	r10,0
8002c518:	10 9b       	mov	r11,r8
8002c51a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c51e:	fe b0 fd d1 	rcall	8002c0c0 <spi_set_chipselect_delay_bs>
8002c522:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c526:	11 88       	ld.ub	r8,r8[0x0]
8002c528:	30 8a       	mov	r10,8
8002c52a:	10 9b       	mov	r11,r8
8002c52c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c530:	c0 8e       	rcall	8002c140 <spi_set_bits_per_transfer>
8002c532:	fe b0 fd 7b 	rcall	8002c028 <sysclk_get_pba_hz>
8002c536:	18 98       	mov	r8,r12
8002c538:	10 9b       	mov	r11,r8
8002c53a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c53e:	f0 16 01 21 	mcall	r6[1156]
8002c542:	18 98       	mov	r8,r12
8002c544:	5c 58       	castu.b	r8
8002c546:	10 99       	mov	r9,r8
8002c548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c54c:	11 88       	ld.ub	r8,r8[0x0]
8002c54e:	12 9a       	mov	r10,r9
8002c550:	10 9b       	mov	r11,r8
8002c552:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c556:	c4 de       	rcall	8002c1f0 <spi_set_baudrate_register>
8002c558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c55c:	11 88       	ld.ub	r8,r8[0x0]
8002c55e:	10 9b       	mov	r11,r8
8002c560:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c564:	c8 6e       	rcall	8002c270 <spi_enable_active_mode>
8002c566:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002c56a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c56e:	11 88       	ld.ub	r8,r8[0x0]
8002c570:	12 9a       	mov	r10,r9
8002c572:	10 9b       	mov	r11,r8
8002c574:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c578:	cb 5e       	rcall	8002c2e2 <spi_set_mode>
8002c57a:	2f bd       	sub	sp,-20
8002c57c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c580:	80 02       	ld.sh	r2,r0[0x0]
8002c582:	c3 6a       	rjmp	8002c1ee <spi_set_bits_per_transfer+0xae>

8002c584 <spi_read_packet>:
8002c584:	eb cd 40 c0 	pushm	r6-r7,lr
8002c588:	1a 97       	mov	r7,sp
8002c58a:	20 6d       	sub	sp,24
8002c58c:	4b 66       	lddpc	r6,8002c664 <spi_read_packet+0xe0>
8002c58e:	1e 26       	rsub	r6,pc
8002c590:	ef 4c ff f0 	st.w	r7[-16],r12
8002c594:	ef 4b ff ec 	st.w	r7[-20],r11
8002c598:	ef 4a ff e8 	st.w	r7[-24],r10
8002c59c:	e0 68 3a 98 	mov	r8,15000
8002c5a0:	ef 48 ff f8 	st.w	r7[-8],r8
8002c5a4:	30 08       	mov	r8,0
8002c5a6:	ef 48 ff fc 	st.w	r7[-4],r8
8002c5aa:	c5 48       	rjmp	8002c652 <spi_read_packet+0xce>
8002c5ac:	e0 68 3a 98 	mov	r8,15000
8002c5b0:	ef 48 ff f8 	st.w	r7[-8],r8
8002c5b4:	c0 f8       	rjmp	8002c5d2 <spi_read_packet+0x4e>
8002c5b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5ba:	58 08       	cp.w	r8,0
8002c5bc:	5f 08       	sreq	r8
8002c5be:	5c 58       	castu.b	r8
8002c5c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c5c4:	20 19       	sub	r9,1
8002c5c6:	ef 49 ff f8 	st.w	r7[-8],r9
8002c5ca:	58 08       	cp.w	r8,0
8002c5cc:	c0 30       	breq	8002c5d2 <spi_read_packet+0x4e>
8002c5ce:	3f d8       	mov	r8,-3
8002c5d0:	c4 68       	rjmp	8002c65c <spi_read_packet+0xd8>
8002c5d2:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c5d6:	c3 1f       	rcall	8002c438 <spi_is_tx_ready>
8002c5d8:	18 98       	mov	r8,r12
8002c5da:	ec 18 00 01 	eorl	r8,0x1
8002c5de:	5c 58       	castu.b	r8
8002c5e0:	ce b1       	brne	8002c5b6 <spi_read_packet+0x32>
8002c5e2:	e0 6b 00 ff 	mov	r11,255
8002c5e6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c5ea:	c4 bf       	rcall	8002c480 <spi_write_single>
8002c5ec:	e0 68 3a 98 	mov	r8,15000
8002c5f0:	ef 48 ff f8 	st.w	r7[-8],r8
8002c5f4:	c0 f8       	rjmp	8002c612 <spi_read_packet+0x8e>
8002c5f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5fa:	58 08       	cp.w	r8,0
8002c5fc:	5f 08       	sreq	r8
8002c5fe:	5c 58       	castu.b	r8
8002c600:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c604:	20 19       	sub	r9,1
8002c606:	ef 49 ff f8 	st.w	r7[-8],r9
8002c60a:	58 08       	cp.w	r8,0
8002c60c:	c0 30       	breq	8002c612 <spi_read_packet+0x8e>
8002c60e:	3f d8       	mov	r8,-3
8002c610:	c2 68       	rjmp	8002c65c <spi_read_packet+0xd8>
8002c612:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c616:	c2 2f       	rcall	8002c45a <spi_is_rx_ready>
8002c618:	18 98       	mov	r8,r12
8002c61a:	ec 18 00 01 	eorl	r8,0x1
8002c61e:	5c 58       	castu.b	r8
8002c620:	ce b1       	brne	8002c5f6 <spi_read_packet+0x72>
8002c622:	ee c8 00 09 	sub	r8,r7,9
8002c626:	10 9b       	mov	r11,r8
8002c628:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c62c:	c4 0f       	rcall	8002c4ac <spi_read_single>
8002c62e:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002c632:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c636:	10 09       	add	r9,r8
8002c638:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002c63c:	b2 88       	st.b	r9[0x0],r8
8002c63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c642:	2f f8       	sub	r8,-1
8002c644:	ef 48 ff fc 	st.w	r7[-4],r8
8002c648:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c64c:	20 18       	sub	r8,1
8002c64e:	ef 48 ff e8 	st.w	r7[-24],r8
8002c652:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c656:	58 08       	cp.w	r8,0
8002c658:	ca a1       	brne	8002c5ac <spi_read_packet+0x28>
8002c65a:	30 08       	mov	r8,0
8002c65c:	10 9c       	mov	r12,r8
8002c65e:	2f ad       	sub	sp,-24
8002c660:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c664:	80 02       	ld.sh	r2,r0[0x0]
8002c666:	c4 12       	brcc	8002c6e8 <spi_write_packet+0x80>

8002c668 <spi_write_packet>:
8002c668:	eb cd 40 c0 	pushm	r6-r7,lr
8002c66c:	1a 97       	mov	r7,sp
8002c66e:	20 6d       	sub	sp,24
8002c670:	4a 76       	lddpc	r6,8002c70c <spi_write_packet+0xa4>
8002c672:	1e 26       	rsub	r6,pc
8002c674:	ef 4c ff f0 	st.w	r7[-16],r12
8002c678:	ef 4b ff ec 	st.w	r7[-20],r11
8002c67c:	ef 4a ff e8 	st.w	r7[-24],r10
8002c680:	e0 68 3a 98 	mov	r8,15000
8002c684:	ef 48 ff f4 	st.w	r7[-12],r8
8002c688:	30 08       	mov	r8,0
8002c68a:	ef 48 ff f8 	st.w	r7[-8],r8
8002c68e:	c3 58       	rjmp	8002c6f8 <spi_write_packet+0x90>
8002c690:	e0 68 3a 98 	mov	r8,15000
8002c694:	ef 48 ff f4 	st.w	r7[-12],r8
8002c698:	c0 f8       	rjmp	8002c6b6 <spi_write_packet+0x4e>
8002c69a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c69e:	58 08       	cp.w	r8,0
8002c6a0:	5f 08       	sreq	r8
8002c6a2:	5c 58       	castu.b	r8
8002c6a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c6a8:	20 19       	sub	r9,1
8002c6aa:	ef 49 ff f4 	st.w	r7[-12],r9
8002c6ae:	58 08       	cp.w	r8,0
8002c6b0:	c0 30       	breq	8002c6b6 <spi_write_packet+0x4e>
8002c6b2:	3f d8       	mov	r8,-3
8002c6b4:	c2 78       	rjmp	8002c702 <spi_write_packet+0x9a>
8002c6b6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c6ba:	cb fe       	rcall	8002c438 <spi_is_tx_ready>
8002c6bc:	18 98       	mov	r8,r12
8002c6be:	ec 18 00 01 	eorl	r8,0x1
8002c6c2:	5c 58       	castu.b	r8
8002c6c4:	ce b1       	brne	8002c69a <spi_write_packet+0x32>
8002c6c6:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002c6ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6ce:	f2 08 00 08 	add	r8,r9,r8
8002c6d2:	11 88       	ld.ub	r8,r8[0x0]
8002c6d4:	ef 68 ff ff 	st.b	r7[-1],r8
8002c6d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002c6dc:	10 9b       	mov	r11,r8
8002c6de:	ee fc ff f0 	ld.w	r12,r7[-16]
8002c6e2:	cc fe       	rcall	8002c480 <spi_write_single>
8002c6e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6e8:	2f f8       	sub	r8,-1
8002c6ea:	ef 48 ff f8 	st.w	r7[-8],r8
8002c6ee:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c6f2:	20 18       	sub	r8,1
8002c6f4:	ef 48 ff e8 	st.w	r7[-24],r8
8002c6f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c6fc:	58 08       	cp.w	r8,0
8002c6fe:	cc 91       	brne	8002c690 <spi_write_packet+0x28>
8002c700:	30 08       	mov	r8,0
8002c702:	10 9c       	mov	r12,r8
8002c704:	2f ad       	sub	sp,-24
8002c706:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c70a:	00 00       	add	r0,r0
8002c70c:	80 02       	ld.sh	r2,r0[0x0]
8002c70e:	c4 f6       	brmi	8002c7ac <osc_get_rate+0x50>

8002c710 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002c710:	eb cd 40 c0 	pushm	r6-r7,lr
8002c714:	1a 97       	mov	r7,sp
8002c716:	20 3d       	sub	sp,12
8002c718:	49 06       	lddpc	r6,8002c758 <mav_array_memcpy+0x48>
8002c71a:	1e 26       	rsub	r6,pc
8002c71c:	ef 4c ff fc 	st.w	r7[-4],r12
8002c720:	ef 4b ff f8 	st.w	r7[-8],r11
8002c724:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002c728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c72c:	58 08       	cp.w	r8,0
8002c72e:	c0 91       	brne	8002c740 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002c730:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c734:	30 0b       	mov	r11,0
8002c736:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c73a:	f0 16 00 30 	mcall	r6[192]
8002c73e:	c0 98       	rjmp	8002c750 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002c740:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c744:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c748:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c74c:	f0 16 00 21 	mcall	r6[132]
	}
}
8002c750:	2f dd       	sub	sp,-12
8002c752:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c756:	00 00       	add	r0,r0
8002c758:	80 02       	ld.sh	r2,r0[0x0]
8002c75a:	c5 9e       	rcall	8002c40c <spi_put+0x12>

8002c75c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c75c:	eb cd 40 80 	pushm	r7,lr
8002c760:	1a 97       	mov	r7,sp
8002c762:	20 1d       	sub	sp,4
8002c764:	18 98       	mov	r8,r12
8002c766:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c76a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c76e:	58 38       	cp.w	r8,3
8002c770:	c1 20       	breq	8002c794 <osc_get_rate+0x38>
8002c772:	e0 89 00 07 	brgt	8002c780 <osc_get_rate+0x24>
8002c776:	58 08       	cp.w	r8,0
8002c778:	c0 90       	breq	8002c78a <osc_get_rate+0x2e>
8002c77a:	58 28       	cp.w	r8,2
8002c77c:	c0 f0       	breq	8002c79a <osc_get_rate+0x3e>
8002c77e:	c1 b8       	rjmp	8002c7b4 <osc_get_rate+0x58>
8002c780:	58 48       	cp.w	r8,4
8002c782:	c1 10       	breq	8002c7a4 <osc_get_rate+0x48>
8002c784:	58 58       	cp.w	r8,5
8002c786:	c1 40       	breq	8002c7ae <osc_get_rate+0x52>
8002c788:	c1 68       	rjmp	8002c7b4 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c78a:	e0 68 24 00 	mov	r8,9216
8002c78e:	ea 18 00 f4 	orh	r8,0xf4
8002c792:	c1 28       	rjmp	8002c7b6 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c794:	e0 68 80 00 	mov	r8,32768
8002c798:	c0 f8       	rjmp	8002c7b6 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c79a:	e0 68 12 00 	mov	r8,4608
8002c79e:	ea 18 00 7a 	orh	r8,0x7a
8002c7a2:	c0 a8       	rjmp	8002c7b6 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c7a4:	e0 68 0e 00 	mov	r8,3584
8002c7a8:	ea 18 07 27 	orh	r8,0x727
8002c7ac:	c0 58       	rjmp	8002c7b6 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c7ae:	e0 78 c1 38 	mov	r8,115000
8002c7b2:	c0 28       	rjmp	8002c7b6 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c7b4:	30 08       	mov	r8,0
	}
}
8002c7b6:	10 9c       	mov	r12,r8
8002c7b8:	2f fd       	sub	sp,-4
8002c7ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c7be <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c7be:	eb cd 40 c0 	pushm	r6-r7,lr
8002c7c2:	1a 97       	mov	r7,sp
8002c7c4:	48 56       	lddpc	r6,8002c7d8 <sysclk_get_main_hz+0x1a>
8002c7c6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c7c8:	30 0c       	mov	r12,0
8002c7ca:	cc 9f       	rcall	8002c75c <osc_get_rate>
8002c7cc:	18 98       	mov	r8,r12
8002c7ce:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c7d0:	10 9c       	mov	r12,r8
8002c7d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c7d6:	00 00       	add	r0,r0
8002c7d8:	80 02       	ld.sh	r2,r0[0x0]
8002c7da:	c6 4a       	rjmp	8002c4a2 <spi_write_single+0x22>

8002c7dc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002c7dc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c7e0:	1a 97       	mov	r7,sp
8002c7e2:	48 46       	lddpc	r6,8002c7f0 <sysclk_get_cpu_hz+0x14>
8002c7e4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002c7e6:	ce cf       	rcall	8002c7be <sysclk_get_main_hz>
8002c7e8:	18 98       	mov	r8,r12
}
8002c7ea:	10 9c       	mov	r12,r8
8002c7ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c7f0:	80 02       	ld.sh	r2,r0[0x0]
8002c7f2:	c6 68       	rjmp	8002c8be <initialise_board+0x6a>

8002c7f4 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002c7f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c7f8:	1a 97       	mov	r7,sp
8002c7fa:	20 1d       	sub	sp,4
8002c7fc:	49 06       	lddpc	r6,8002c83c <sleepmgr_init+0x48>
8002c7fe:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002c800:	30 08       	mov	r8,0
8002c802:	ef 68 ff ff 	st.b	r7[-1],r8
8002c806:	c0 d8       	rjmp	8002c820 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002c808:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002c80c:	ec fa 03 f4 	ld.w	r10,r6[1012]
8002c810:	30 08       	mov	r8,0
8002c812:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002c816:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002c81a:	2f f8       	sub	r8,-1
8002c81c:	ef 68 ff ff 	st.b	r7[-1],r8
8002c820:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002c824:	30 58       	mov	r8,5
8002c826:	f0 09 18 00 	cp.b	r9,r8
8002c82a:	fe 98 ff ef 	brls	8002c808 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002c82e:	ec f9 03 f4 	ld.w	r9,r6[1012]
8002c832:	30 18       	mov	r8,1
8002c834:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002c836:	2f fd       	sub	sp,-4
8002c838:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c83c:	80 02       	ld.sh	r2,r0[0x0]
8002c83e:	c6 82       	brcc	8002c90e <initialise_board+0xba>
8002c840:	42 6f       	lddsp	pc,sp[0x98]
8002c842:	61 72       	ld.w	r2,r0[0x5c]
8002c844:	64 20       	ld.w	r0,r2[0x8]
8002c846:	69 6e       	ld.w	lr,r4[0x58]
8002c848:	69 74       	ld.w	r4,r4[0x5c]
8002c84a:	69 61       	ld.w	r1,r4[0x58]
8002c84c:	6c 69       	ld.w	r9,r6[0x18]
8002c84e:	73 65       	ld.w	r5,r9[0x58]
8002c850:	64 2e       	ld.w	lr,r2[0x8]
8002c852:	0a 00       	add	r0,r5

8002c854 <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002c854:	eb cd 40 e0 	pushm	r5-r7,lr
8002c858:	1a 97       	mov	r7,sp
8002c85a:	20 3d       	sub	sp,12
8002c85c:	4f 66       	lddpc	r6,8002ca34 <initialise_board+0x1e0>
8002c85e:	1e 26       	rsub	r6,pc
8002c860:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002c864:	30 88       	mov	r8,8
8002c866:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002c86a:	f0 16 01 1b 	mcall	r6[1132]
	cpu_irq_enable();
8002c86e:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002c870:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002c872:	cc 1f       	rcall	8002c7f4 <sleepmgr_init>
	sysclk_init();
8002c874:	f0 16 01 4b 	mcall	r6[1324]
	board_init();
8002c878:	f0 16 01 a4 	mcall	r6[1680]
	delay_init(sysclk_get_cpu_hz());
8002c87c:	cb 0f       	rcall	8002c7dc <sysclk_get_cpu_hz>
8002c87e:	18 98       	mov	r8,r12
8002c880:	10 9c       	mov	r12,r8
8002c882:	f0 16 01 b5 	mcall	r6[1748]
	init_time_keeper();
8002c886:	f0 16 01 fb 	mcall	r6[2028]
		
	INTC_init_interrupts();
8002c88a:	f0 16 01 1b 	mcall	r6[1132]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002c88e:	30 0c       	mov	r12,0
8002c890:	f0 16 00 e2 	mcall	r6[904]
8002c894:	18 98       	mov	r8,r12
8002c896:	58 08       	cp.w	r8,0
8002c898:	c0 20       	breq	8002c89c <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002c89a:	c0 08       	rjmp	8002c89a <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002c89c:	30 1c       	mov	r12,1
8002c89e:	f0 16 00 e2 	mcall	r6[904]
8002c8a2:	18 98       	mov	r8,r12
8002c8a4:	58 08       	cp.w	r8,0
8002c8a6:	c0 20       	breq	8002c8aa <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002c8a8:	c0 08       	rjmp	8002c8a8 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002c8aa:	30 2c       	mov	r12,2
8002c8ac:	f0 16 01 6a 	mcall	r6[1448]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002c8b0:	f0 16 02 21 	mcall	r6[2180]
	set_servos(&servo_failsafe);
8002c8b4:	ec fc 08 90 	ld.w	r12,r6[2192]
8002c8b8:	f0 16 00 a9 	mcall	r6[676]
	
		
	init_UART_int(0);
8002c8bc:	30 0c       	mov	r12,0
8002c8be:	f0 16 00 a5 	mcall	r6[660]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002c8c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8c6:	f0 c5 f6 8c 	sub	r5,r8,-2420
8002c8ca:	30 0c       	mov	r12,0
8002c8cc:	f0 16 00 69 	mcall	r6[420]
8002c8d0:	18 98       	mov	r8,r12
8002c8d2:	0a 9b       	mov	r11,r5
8002c8d4:	10 9c       	mov	r12,r8
8002c8d6:	f0 16 00 d4 	mcall	r6[848]
				
		
	init_UART_int(3);
8002c8da:	30 3c       	mov	r12,3
8002c8dc:	f0 16 00 a5 	mcall	r6[660]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002c8e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8e4:	f0 c9 f5 28 	sub	r9,r8,-2776
8002c8e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8ec:	f0 c8 f6 2c 	sub	r8,r8,-2516
8002c8f0:	12 9b       	mov	r11,r9
8002c8f2:	10 9c       	mov	r12,r8
8002c8f4:	f0 16 01 6d 	mcall	r6[1460]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002c8f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8fc:	f0 c5 f5 28 	sub	r5,r8,-2776
8002c900:	30 3c       	mov	r12,3
8002c902:	f0 16 00 69 	mcall	r6[420]
8002c906:	18 98       	mov	r8,r12
8002c908:	0a 9b       	mov	r11,r5
8002c90a:	10 9c       	mov	r12,r8
8002c90c:	f0 16 00 c2 	mcall	r6[776]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002c910:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c914:	f0 c5 f5 10 	sub	r5,r8,-2800
8002c918:	30 3c       	mov	r12,3
8002c91a:	f0 16 00 69 	mcall	r6[420]
8002c91e:	18 98       	mov	r8,r12
8002c920:	0a 9b       	mov	r11,r5
8002c922:	10 9c       	mov	r12,r8
8002c924:	f0 16 00 d4 	mcall	r6[848]
		
	init_UART_int(4);
8002c928:	30 4c       	mov	r12,4
8002c92a:	f0 16 00 a5 	mcall	r6[660]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002c92e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c932:	f0 c5 f6 5c 	sub	r5,r8,-2468
8002c936:	30 4c       	mov	r12,4
8002c938:	f0 16 00 69 	mcall	r6[420]
8002c93c:	18 98       	mov	r8,r12
8002c93e:	0a 9b       	mov	r11,r5
8002c940:	10 9c       	mov	r12,r8
8002c942:	f0 16 00 d4 	mcall	r6[848]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002c946:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c94a:	f0 c9 f6 74 	sub	r9,r8,-2444
8002c94e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c952:	f0 c8 f8 94 	sub	r8,r8,-1900
8002c956:	12 9b       	mov	r11,r9
8002c958:	10 9c       	mov	r12,r8
8002c95a:	f0 16 00 f0 	mcall	r6[960]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002c95e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c962:	f0 c9 f6 44 	sub	r9,r8,-2492
8002c966:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c96a:	f0 c8 f7 91 	sub	r8,r8,-2159
8002c96e:	12 9b       	mov	r11,r9
8002c970:	10 9c       	mov	r12,r8
8002c972:	f0 16 00 f0 	mcall	r6[960]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002c976:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c97a:	f0 c5 f6 44 	sub	r5,r8,-2492
8002c97e:	30 4c       	mov	r12,4
8002c980:	f0 16 00 69 	mcall	r6[420]
8002c984:	18 98       	mov	r8,r12
8002c986:	0a 9b       	mov	r11,r5
8002c988:	10 9c       	mov	r12,r8
8002c98a:	f0 16 00 c2 	mcall	r6[776]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002c98e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c992:	f0 c5 f6 74 	sub	r5,r8,-2444
8002c996:	30 0c       	mov	r12,0
8002c998:	f0 16 00 69 	mcall	r6[420]
8002c99c:	18 98       	mov	r8,r12
8002c99e:	0a 9b       	mov	r11,r5
8002c9a0:	10 9c       	mov	r12,r8
8002c9a2:	f0 16 00 c2 	mcall	r6[776]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002c9a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9aa:	f0 c9 f6 8c 	sub	r9,r8,-2420
8002c9ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9b2:	f1 49 0d fc 	st.w	r8[3580],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002c9b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9ba:	f0 c9 f6 74 	sub	r9,r8,-2444
8002c9be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9c2:	f1 49 0e 00 	st.w	r8[3584],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002c9c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9ca:	f0 c9 f6 5c 	sub	r9,r8,-2468
8002c9ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9d2:	f1 49 0e 04 	st.w	r8[3588],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002c9d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9da:	f0 c9 f6 44 	sub	r9,r8,-2492
8002c9de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9e2:	f1 49 0e 08 	st.w	r8[3592],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002c9e6:	f0 16 01 c0 	mcall	r6[1792]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002c9ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9ee:	f0 f9 0e 00 	ld.w	r9,r8[3584]
8002c9f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9f6:	f0 f8 0d fc 	ld.w	r8,r8[3580]
8002c9fa:	32 ca       	mov	r10,44
8002c9fc:	12 9b       	mov	r11,r9
8002c9fe:	10 9c       	mov	r12,r8
8002ca00:	f0 16 01 cd 	mcall	r6[1844]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002ca04:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ca08:	f0 f8 0e 04 	ld.w	r8,r8[3588]
8002ca0c:	10 9c       	mov	r12,r8
8002ca0e:	f0 16 01 64 	mcall	r6[1424]
		
	init_imu(&(centralData->imu1));
8002ca12:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ca16:	10 9c       	mov	r12,r8
8002ca18:	f0 16 01 6f 	mcall	r6[1468]
	init_bmp085();
8002ca1c:	f0 16 01 e8 	mcall	r6[1952]

	rc_init();
8002ca20:	f0 16 01 3a 	mcall	r6[1256]


	Enable_global_interrupt();
8002ca24:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002ca26:	fe cc 01 e6 	sub	r12,pc,486
8002ca2a:	f0 16 00 01 	mcall	r6[4]
}
8002ca2e:	2f dd       	sub	sp,-12
8002ca30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002ca34:	80 02       	ld.sh	r2,r0[0x0]
8002ca36:	c6 e2       	brcc	8002cb12 <initialisation+0x74>

8002ca38 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002ca38:	eb cd 40 c0 	pushm	r6-r7,lr
8002ca3c:	1a 97       	mov	r7,sp
8002ca3e:	20 3d       	sub	sp,12
8002ca40:	49 06       	lddpc	r6,8002ca80 <mav_array_memcpy+0x48>
8002ca42:	1e 26       	rsub	r6,pc
8002ca44:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca48:	ef 4b ff f8 	st.w	r7[-8],r11
8002ca4c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002ca50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca54:	58 08       	cp.w	r8,0
8002ca56:	c0 91       	brne	8002ca68 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002ca58:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ca5c:	30 0b       	mov	r11,0
8002ca5e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca62:	f0 16 00 30 	mcall	r6[192]
8002ca66:	c0 98       	rjmp	8002ca78 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002ca68:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ca6c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ca70:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca74:	f0 16 00 21 	mcall	r6[132]
	}
}
8002ca78:	2f dd       	sub	sp,-12
8002ca7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca7e:	00 00       	add	r0,r0
8002ca80:	80 02       	ld.sh	r2,r0[0x0]
8002ca82:	c8 c6       	brmi	8002c99a <initialise_board+0x146>
8002ca84:	44 65       	lddsp	r5,sp[0x118]
8002ca86:	62 75       	ld.w	r5,r1[0x1c]
8002ca88:	67 20       	ld.w	r0,r3[0x48]
8002ca8a:	73 74       	ld.w	r4,r9[0x5c]
8002ca8c:	72 65       	ld.w	r5,r9[0x18]
8002ca8e:	61 6d       	ld.w	sp,r0[0x58]
8002ca90:	20 69       	sub	r9,6
8002ca92:	6e 69       	ld.w	r9,r7[0x18]
8002ca94:	74 69       	ld.w	r9,r10[0x18]
8002ca96:	61 6c       	ld.w	r12,r0[0x58]
8002ca98:	69 73       	ld.w	r3,r4[0x5c]
8002ca9a:	65 64       	ld.w	r4,r2[0x58]
8002ca9c:	0a 00       	add	r0,r5

8002ca9e <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002ca9e:	eb cd 40 c0 	pushm	r6-r7,lr
8002caa2:	1a 97       	mov	r7,sp
8002caa4:	20 2d       	sub	sp,8
8002caa6:	4e 16       	lddpc	r6,8002cc28 <initialisation+0x18a>
8002caa8:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002caaa:	30 88       	mov	r8,8
8002caac:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002cab0:	f0 16 00 32 	mcall	r6[200]
8002cab4:	18 99       	mov	r9,r12
8002cab6:	ec f8 00 00 	ld.w	r8,r6[0]
8002caba:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002cabc:	ec f8 00 00 	ld.w	r8,r6[0]
8002cac0:	70 08       	ld.w	r8,r8[0x0]
8002cac2:	10 9c       	mov	r12,r8
8002cac4:	f0 16 02 1e 	mcall	r6[2168]
	initialise_central_data();
8002cac8:	f0 16 01 b7 	mcall	r6[1756]
	

	init_radar_modules();
8002cacc:	f0 16 01 6b 	mcall	r6[1452]
	dbg_print("Debug stream initialised\n");
8002cad0:	fe cc 00 4c 	sub	r12,pc,76
8002cad4:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002cad8:	ec fc 08 8c 	ld.w	r12,r6[2188]
8002cadc:	f0 16 00 a9 	mcall	r6[676]

	init_onboard_parameters();
8002cae0:	f0 16 01 e5 	mcall	r6[1940]
	init_mavlink_actions();
8002cae4:	f0 16 01 d5 	mcall	r6[1876]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002cae8:	ec f8 00 00 	ld.w	r8,r6[0]
8002caec:	70 08       	ld.w	r8,r8[0x0]
8002caee:	f0 ca f4 f8 	sub	r10,r8,-2824
8002caf2:	ec f8 00 00 	ld.w	r8,r6[0]
8002caf6:	70 08       	ld.w	r8,r8[0x0]
8002caf8:	f0 c9 ef 3c 	sub	r9,r8,-4292
8002cafc:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb00:	70 08       	ld.w	r8,r8[0x0]
8002cb02:	f0 c8 f2 c4 	sub	r8,r8,-3388
8002cb06:	12 9b       	mov	r11,r9
8002cb08:	10 9c       	mov	r12,r8
8002cb0a:	f0 16 01 71 	mcall	r6[1476]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002cb0e:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb12:	70 09       	ld.w	r9,r8[0x0]
8002cb14:	30 18       	mov	r8,1
8002cb16:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002cb1a:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb1e:	70 09       	ld.w	r9,r8[0x0]
8002cb20:	30 28       	mov	r8,2
8002cb22:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002cb26:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb2a:	70 09       	ld.w	r9,r8[0x0]
8002cb2c:	30 08       	mov	r8,0
8002cb2e:	f3 68 10 bc 	st.b	r9[4284],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002cb32:	e0 68 01 90 	mov	r8,400
8002cb36:	ef 48 ff f8 	st.w	r7[-8],r8
8002cb3a:	c2 68       	rjmp	8002cb86 <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002cb3c:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb40:	70 08       	ld.w	r8,r8[0x0]
8002cb42:	10 9c       	mov	r12,r8
8002cb44:	f0 16 00 95 	mcall	r6[596]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002cb48:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb4c:	70 08       	ld.w	r8,r8[0x0]
8002cb4e:	f0 c9 f4 f8 	sub	r9,r8,-2824
8002cb52:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb56:	70 08       	ld.w	r8,r8[0x0]
8002cb58:	f0 ca ef 3c 	sub	r10,r8,-4292
8002cb5c:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb60:	70 08       	ld.w	r8,r8[0x0]
8002cb62:	f0 cb f2 c4 	sub	r11,r8,-3388
8002cb66:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb6a:	70 08       	ld.w	r8,r8[0x0]
8002cb6c:	10 9c       	mov	r12,r8
8002cb6e:	f0 16 00 96 	mcall	r6[600]
		mavlink_protocol_update();	
8002cb72:	f0 16 00 e1 	mcall	r6[900]
		delay_ms(5);
8002cb76:	30 5c       	mov	r12,5
8002cb78:	f0 16 01 02 	mcall	r6[1032]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002cb7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cb80:	20 18       	sub	r8,1
8002cb82:	ef 48 ff f8 	st.w	r7[-8],r8
8002cb86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cb8a:	58 08       	cp.w	r8,0
8002cb8c:	fe 99 ff d8 	brgt	8002cb3c <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002cb90:	ec f8 00 00 	ld.w	r8,r6[0]
8002cb94:	70 09       	ld.w	r9,r8[0x0]
8002cb96:	30 08       	mov	r8,0
8002cb98:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002cb9c:	30 08       	mov	r8,0
8002cb9e:	ef 48 ff f8 	st.w	r7[-8],r8
8002cba2:	c2 48       	rjmp	8002cbea <initialisation+0x14c>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002cba4:	ec f8 00 00 	ld.w	r8,r6[0]
8002cba8:	70 08       	ld.w	r8,r8[0x0]
8002cbaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cbae:	f2 c9 fc a6 	sub	r9,r9,-858
8002cbb2:	30 0a       	mov	r10,0
8002cbb4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002cbb8:	ec f8 00 00 	ld.w	r8,r6[0]
8002cbbc:	70 08       	ld.w	r8,r8[0x0]
8002cbbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cbc2:	f2 c9 fc a3 	sub	r9,r9,-861
8002cbc6:	30 0a       	mov	r10,0
8002cbc8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002cbcc:	ec f8 00 00 	ld.w	r8,r6[0]
8002cbd0:	70 08       	ld.w	r8,r8[0x0]
8002cbd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cbd6:	f2 c9 fc 99 	sub	r9,r9,-871
8002cbda:	30 0a       	mov	r10,0
8002cbdc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002cbe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbe4:	2f f8       	sub	r8,-1
8002cbe6:	ef 48 ff f8 	st.w	r7[-8],r8
8002cbea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbee:	58 28       	cp.w	r8,2
8002cbf0:	fe 9a ff da 	brle	8002cba4 <initialisation+0x106>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002cbf4:	ec f8 00 00 	ld.w	r8,r6[0]
8002cbf8:	70 09       	ld.w	r9,r8[0x0]
8002cbfa:	30 38       	mov	r8,3
8002cbfc:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002cc00:	ec f8 00 00 	ld.w	r8,r6[0]
8002cc04:	70 09       	ld.w	r9,r8[0x0]
8002cc06:	34 08       	mov	r8,64
8002cc08:	f3 68 10 bc 	st.b	r9[4284],r8
	init_nav();
8002cc0c:	f0 16 01 be 	mcall	r6[1784]
	init_waypoint_handler();
8002cc10:	f0 16 01 5c 	mcall	r6[1392]
	//e_init();
	
	init_neighbors();
8002cc14:	f0 16 01 8c 	mcall	r6[1584]
	init_orca();
8002cc18:	f0 16 02 07 	mcall	r6[2076]
	
	LED_On(LED1);
8002cc1c:	30 2c       	mov	r12,2
8002cc1e:	f0 16 01 45 	mcall	r6[1300]
}
8002cc22:	2f ed       	sub	sp,-8
8002cc24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cc28:	80 02       	ld.sh	r2,r0[0x0]
8002cc2a:	c9 2c       	rcall	8002cd4e <sin+0x62>

8002cc2c <main>:



void main (void)
{
8002cc2c:	eb cd 40 c0 	pushm	r6-r7,lr
8002cc30:	1a 97       	mov	r7,sp
8002cc32:	48 b6       	lddpc	r6,8002cc5c <main+0x30>
8002cc34:	1e 26       	rsub	r6,pc
	
	initialisation();
8002cc36:	f0 16 01 d9 	mcall	r6[1892]
	
	create_tasks();
8002cc3a:	f0 16 02 13 	mcall	r6[2124]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002cc3e:	ec f8 00 00 	ld.w	r8,r6[0]
8002cc42:	70 08       	ld.w	r8,r8[0x0]
8002cc44:	30 19       	mov	r9,1
8002cc46:	f1 49 10 c0 	st.w	r8[4288],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002cc4a:	f0 16 01 03 	mcall	r6[1036]
8002cc4e:	18 98       	mov	r8,r12
8002cc50:	30 0b       	mov	r11,0
8002cc52:	10 9c       	mov	r12,r8
8002cc54:	f0 16 00 ec 	mcall	r6[944]
		
		//LED_On(LED1);

		
	}		
8002cc58:	cf 9b       	rjmp	8002cc4a <main+0x1e>
8002cc5a:	00 00       	add	r0,r0
8002cc5c:	80 02       	ld.sh	r2,r0[0x0]
8002cc5e:	ca b8       	rjmp	8002cdb4 <asin+0x38>

8002cc60 <cos>:
8002cc60:	d4 21       	pushm	r4-r7,lr
8002cc62:	20 4d       	sub	sp,16
8002cc64:	e0 6e 21 fb 	mov	lr,8699
8002cc68:	ea 1e 3f e9 	orh	lr,0x3fe9
8002cc6c:	14 98       	mov	r8,r10
8002cc6e:	16 99       	mov	r9,r11
8002cc70:	16 95       	mov	r5,r11
8002cc72:	14 96       	mov	r6,r10
8002cc74:	16 97       	mov	r7,r11
8002cc76:	16 94       	mov	r4,r11
8002cc78:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002cc7c:	1c 3c       	cp.w	r12,lr
8002cc7e:	e0 89 00 05 	brgt	8002cc88 <cos+0x28>
8002cc82:	30 08       	mov	r8,0
8002cc84:	30 09       	mov	r9,0
8002cc86:	c1 a8       	rjmp	8002ccba <cos+0x5a>
8002cc88:	e0 65 ff ff 	mov	r5,65535
8002cc8c:	ea 15 7f ef 	orh	r5,0x7fef
8002cc90:	0a 3c       	cp.w	r12,r5
8002cc92:	e0 8a 00 05 	brle	8002cc9c <cos+0x3c>
8002cc96:	e0 a0 17 bd 	rcall	8002fc10 <__avr32_f64_sub>
8002cc9a:	c2 68       	rjmp	8002cce6 <cos+0x86>
8002cc9c:	1a 9c       	mov	r12,sp
8002cc9e:	e0 a0 0b 47 	rcall	8002e32c <__ieee754_rem_pio2>
8002cca2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002cca6:	58 1c       	cp.w	r12,1
8002cca8:	c0 c0       	breq	8002ccc0 <cos+0x60>
8002ccaa:	58 2c       	cp.w	r12,2
8002ccac:	c1 10       	breq	8002ccce <cos+0x6e>
8002ccae:	fa e8 00 08 	ld.d	r8,sp[8]
8002ccb2:	fa ea 00 00 	ld.d	r10,sp[0]
8002ccb6:	58 0c       	cp.w	r12,0
8002ccb8:	c1 41       	brne	8002cce0 <cos+0x80>
8002ccba:	e0 a0 0e 37 	rcall	8002e928 <__kernel_cos>
8002ccbe:	c1 48       	rjmp	8002cce6 <cos+0x86>
8002ccc0:	fa e8 00 08 	ld.d	r8,sp[8]
8002ccc4:	fa ea 00 00 	ld.d	r10,sp[0]
8002ccc8:	e0 a0 12 94 	rcall	8002f1f0 <__kernel_sin>
8002cccc:	c0 78       	rjmp	8002ccda <cos+0x7a>
8002ccce:	fa e8 00 08 	ld.d	r8,sp[8]
8002ccd2:	fa ea 00 00 	ld.d	r10,sp[0]
8002ccd6:	e0 a0 0e 29 	rcall	8002e928 <__kernel_cos>
8002ccda:	ee 1b 80 00 	eorh	r11,0x8000
8002ccde:	c0 48       	rjmp	8002cce6 <cos+0x86>
8002cce0:	30 1c       	mov	r12,1
8002cce2:	e0 a0 12 87 	rcall	8002f1f0 <__kernel_sin>
8002cce6:	2f cd       	sub	sp,-16
8002cce8:	d8 22       	popm	r4-r7,pc
8002ccea:	d7 03       	nop

8002ccec <sin>:
8002ccec:	d4 21       	pushm	r4-r7,lr
8002ccee:	20 4d       	sub	sp,16
8002ccf0:	e0 6e 21 fb 	mov	lr,8699
8002ccf4:	ea 1e 3f e9 	orh	lr,0x3fe9
8002ccf8:	14 98       	mov	r8,r10
8002ccfa:	16 99       	mov	r9,r11
8002ccfc:	16 95       	mov	r5,r11
8002ccfe:	14 96       	mov	r6,r10
8002cd00:	16 97       	mov	r7,r11
8002cd02:	16 94       	mov	r4,r11
8002cd04:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002cd08:	1c 3c       	cp.w	r12,lr
8002cd0a:	e0 89 00 06 	brgt	8002cd16 <sin+0x2a>
8002cd0e:	30 0c       	mov	r12,0
8002cd10:	30 08       	mov	r8,0
8002cd12:	30 09       	mov	r9,0
8002cd14:	c1 b8       	rjmp	8002cd4a <sin+0x5e>
8002cd16:	e0 65 ff ff 	mov	r5,65535
8002cd1a:	ea 15 7f ef 	orh	r5,0x7fef
8002cd1e:	0a 3c       	cp.w	r12,r5
8002cd20:	e0 8a 00 05 	brle	8002cd2a <sin+0x3e>
8002cd24:	e0 a0 17 76 	rcall	8002fc10 <__avr32_f64_sub>
8002cd28:	c2 78       	rjmp	8002cd76 <sin+0x8a>
8002cd2a:	1a 9c       	mov	r12,sp
8002cd2c:	e0 a0 0b 00 	rcall	8002e32c <__ieee754_rem_pio2>
8002cd30:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002cd34:	58 1c       	cp.w	r12,1
8002cd36:	c0 d0       	breq	8002cd50 <sin+0x64>
8002cd38:	58 2c       	cp.w	r12,2
8002cd3a:	c1 20       	breq	8002cd5e <sin+0x72>
8002cd3c:	fa e8 00 08 	ld.d	r8,sp[8]
8002cd40:	fa ea 00 00 	ld.d	r10,sp[0]
8002cd44:	58 0c       	cp.w	r12,0
8002cd46:	c1 41       	brne	8002cd6e <sin+0x82>
8002cd48:	30 1c       	mov	r12,1
8002cd4a:	e0 a0 12 53 	rcall	8002f1f0 <__kernel_sin>
8002cd4e:	c1 48       	rjmp	8002cd76 <sin+0x8a>
8002cd50:	fa e8 00 08 	ld.d	r8,sp[8]
8002cd54:	fa ea 00 00 	ld.d	r10,sp[0]
8002cd58:	e0 a0 0d e8 	rcall	8002e928 <__kernel_cos>
8002cd5c:	c0 d8       	rjmp	8002cd76 <sin+0x8a>
8002cd5e:	30 1c       	mov	r12,1
8002cd60:	fa e8 00 08 	ld.d	r8,sp[8]
8002cd64:	fa ea 00 00 	ld.d	r10,sp[0]
8002cd68:	e0 a0 12 44 	rcall	8002f1f0 <__kernel_sin>
8002cd6c:	c0 38       	rjmp	8002cd72 <sin+0x86>
8002cd6e:	e0 a0 0d dd 	rcall	8002e928 <__kernel_cos>
8002cd72:	ee 1b 80 00 	eorh	r11,0x8000
8002cd76:	2f cd       	sub	sp,-16
8002cd78:	d8 22       	popm	r4-r7,pc
8002cd7a:	d7 03       	nop

8002cd7c <asin>:
8002cd7c:	d4 31       	pushm	r0-r7,lr
8002cd7e:	20 9d       	sub	sp,36
8002cd80:	4a 17       	lddpc	r7,8002ce04 <asin+0x88>
8002cd82:	14 94       	mov	r4,r10
8002cd84:	16 95       	mov	r5,r11
8002cd86:	cf 3d       	rcall	8002d16c <__ieee754_asin>
8002cd88:	6e 08       	ld.w	r8,r7[0x0]
8002cd8a:	14 92       	mov	r2,r10
8002cd8c:	16 93       	mov	r3,r11
8002cd8e:	5b f8       	cp.w	r8,-1
8002cd90:	c3 50       	breq	8002cdfa <asin+0x7e>
8002cd92:	08 9a       	mov	r10,r4
8002cd94:	0a 9b       	mov	r11,r5
8002cd96:	e0 a0 15 37 	rcall	8002f804 <__isnand>
8002cd9a:	18 96       	mov	r6,r12
8002cd9c:	c2 f1       	brne	8002cdfa <asin+0x7e>
8002cd9e:	08 9a       	mov	r10,r4
8002cda0:	0a 9b       	mov	r11,r5
8002cda2:	e0 a0 14 95 	rcall	8002f6cc <fabs>
8002cda6:	14 98       	mov	r8,r10
8002cda8:	16 99       	mov	r9,r11
8002cdaa:	30 0a       	mov	r10,0
8002cdac:	fc 1b 3f f0 	movh	r11,0x3ff0
8002cdb0:	e0 a0 19 56 	rcall	8003005c <__avr32_f64_cmp_lt>
8002cdb4:	c2 30       	breq	8002cdfa <asin+0x7e>
8002cdb6:	30 18       	mov	r8,1
8002cdb8:	50 08       	stdsp	sp[0x0],r8
8002cdba:	49 48       	lddpc	r8,8002ce08 <asin+0x8c>
8002cdbc:	50 86       	stdsp	sp[0x20],r6
8002cdbe:	50 18       	stdsp	sp[0x4],r8
8002cdc0:	fa e5 00 08 	st.d	sp[8],r4
8002cdc4:	fa e5 00 10 	st.d	sp[16],r4
8002cdc8:	49 1c       	lddpc	r12,8002ce0c <asin+0x90>
8002cdca:	e0 a0 15 2c 	rcall	8002f822 <nan>
8002cdce:	fa eb 00 18 	st.d	sp[24],r10
8002cdd2:	6e 08       	ld.w	r8,r7[0x0]
8002cdd4:	58 28       	cp.w	r8,2
8002cdd6:	c0 50       	breq	8002cde0 <asin+0x64>
8002cdd8:	1a 9c       	mov	r12,sp
8002cdda:	e0 a0 15 23 	rcall	8002f820 <matherr>
8002cdde:	c0 51       	brne	8002cde8 <asin+0x6c>
8002cde0:	e0 a0 1d 56 	rcall	8003088c <__errno>
8002cde4:	32 18       	mov	r8,33
8002cde6:	99 08       	st.w	r12[0x0],r8
8002cde8:	40 88       	lddsp	r8,sp[0x20]
8002cdea:	58 08       	cp.w	r8,0
8002cdec:	c0 50       	breq	8002cdf6 <asin+0x7a>
8002cdee:	e0 a0 1d 4f 	rcall	8003088c <__errno>
8002cdf2:	40 88       	lddsp	r8,sp[0x20]
8002cdf4:	99 08       	st.w	r12[0x0],r8
8002cdf6:	fa e2 00 18 	ld.d	r2,sp[24]
8002cdfa:	04 9a       	mov	r10,r2
8002cdfc:	06 9b       	mov	r11,r3
8002cdfe:	2f 7d       	sub	sp,-36
8002ce00:	d8 32       	popm	r0-r7,pc
8002ce02:	d7 03       	nop
8002ce04:	00 00       	add	r0,r0
8002ce06:	23 78       	sub	r8,55
8002ce08:	80 03       	ld.sh	r3,r0[0x0]
8002ce0a:	11 74       	ld.ub	r4,--r8
8002ce0c:	80 03       	ld.sh	r3,r0[0x0]
8002ce0e:	11 78       	ld.ub	r8,--r8

8002ce10 <atan2>:
8002ce10:	d4 01       	pushm	lr
8002ce12:	e0 a0 04 25 	rcall	8002d65c <__ieee754_atan2>
8002ce16:	d8 02       	popm	pc

8002ce18 <pow>:
8002ce18:	d4 31       	pushm	r0-r7,lr
8002ce1a:	20 cd       	sub	sp,48
8002ce1c:	10 94       	mov	r4,r8
8002ce1e:	14 92       	mov	r2,r10
8002ce20:	16 93       	mov	r3,r11
8002ce22:	12 95       	mov	r5,r9
8002ce24:	e0 a0 05 32 	rcall	8002d888 <__ieee754_pow>
8002ce28:	4b f6       	lddpc	r6,8002cf24 <pow+0x10c>
8002ce2a:	14 90       	mov	r0,r10
8002ce2c:	16 91       	mov	r1,r11
8002ce2e:	6c 08       	ld.w	r8,r6[0x0]
8002ce30:	5b f8       	cp.w	r8,-1
8002ce32:	e0 80 01 46 	breq	8002d0be <pow+0x2a6>
8002ce36:	08 9a       	mov	r10,r4
8002ce38:	0a 9b       	mov	r11,r5
8002ce3a:	e0 a0 14 e5 	rcall	8002f804 <__isnand>
8002ce3e:	50 2c       	stdsp	sp[0x8],r12
8002ce40:	e0 81 01 3f 	brne	8002d0be <pow+0x2a6>
8002ce44:	04 9a       	mov	r10,r2
8002ce46:	06 9b       	mov	r11,r3
8002ce48:	e0 a0 14 de 	rcall	8002f804 <__isnand>
8002ce4c:	18 97       	mov	r7,r12
8002ce4e:	c2 40       	breq	8002ce96 <pow+0x7e>
8002ce50:	30 08       	mov	r8,0
8002ce52:	30 09       	mov	r9,0
8002ce54:	08 9a       	mov	r10,r4
8002ce56:	0a 9b       	mov	r11,r5
8002ce58:	e0 a0 18 bb 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002ce5c:	e0 80 01 31 	breq	8002d0be <pow+0x2a6>
8002ce60:	30 18       	mov	r8,1
8002ce62:	50 38       	stdsp	sp[0xc],r8
8002ce64:	4b 18       	lddpc	r8,8002cf28 <pow+0x110>
8002ce66:	40 2c       	lddsp	r12,sp[0x8]
8002ce68:	50 48       	stdsp	sp[0x10],r8
8002ce6a:	fc 19 3f f0 	movh	r9,0x3ff0
8002ce6e:	30 08       	mov	r8,0
8002ce70:	fa e3 00 14 	st.d	sp[20],r2
8002ce74:	fa e5 00 1c 	st.d	sp[28],r4
8002ce78:	50 bc       	stdsp	sp[0x2c],r12
8002ce7a:	fa e9 00 24 	st.d	sp[36],r8
8002ce7e:	6c 0a       	ld.w	r10,r6[0x0]
8002ce80:	5b fa       	cp.w	r10,-1
8002ce82:	5f 0b       	sreq	r11
8002ce84:	58 2a       	cp.w	r10,2
8002ce86:	5f 0a       	sreq	r10
8002ce88:	f5 eb 10 0b 	or	r11,r10,r11
8002ce8c:	f8 0b 18 00 	cp.b	r11,r12
8002ce90:	e0 81 01 0e 	brne	8002d0ac <pow+0x294>
8002ce94:	c8 08       	rjmp	8002cf94 <pow+0x17c>
8002ce96:	30 08       	mov	r8,0
8002ce98:	30 09       	mov	r9,0
8002ce9a:	04 9a       	mov	r10,r2
8002ce9c:	06 9b       	mov	r11,r3
8002ce9e:	e0 a0 18 98 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002cea2:	c4 50       	breq	8002cf2c <pow+0x114>
8002cea4:	30 08       	mov	r8,0
8002cea6:	30 09       	mov	r9,0
8002cea8:	08 9a       	mov	r10,r4
8002ceaa:	0a 9b       	mov	r11,r5
8002ceac:	e0 a0 18 91 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002ceb0:	c1 70       	breq	8002cede <pow+0xc6>
8002ceb2:	30 18       	mov	r8,1
8002ceb4:	50 38       	stdsp	sp[0xc],r8
8002ceb6:	49 d8       	lddpc	r8,8002cf28 <pow+0x110>
8002ceb8:	30 09       	mov	r9,0
8002ceba:	50 48       	stdsp	sp[0x10],r8
8002cebc:	50 b7       	stdsp	sp[0x2c],r7
8002cebe:	30 08       	mov	r8,0
8002cec0:	fa e3 00 14 	st.d	sp[20],r2
8002cec4:	fa e9 00 24 	st.d	sp[36],r8
8002cec8:	fa e5 00 1c 	st.d	sp[28],r4
8002cecc:	6c 08       	ld.w	r8,r6[0x0]
8002cece:	58 08       	cp.w	r8,0
8002ced0:	c6 20       	breq	8002cf94 <pow+0x17c>
8002ced2:	30 08       	mov	r8,0
8002ced4:	fc 19 3f f0 	movh	r9,0x3ff0
8002ced8:	fa e9 00 24 	st.d	sp[36],r8
8002cedc:	ce 88       	rjmp	8002d0ac <pow+0x294>
8002cede:	08 9a       	mov	r10,r4
8002cee0:	0a 9b       	mov	r11,r5
8002cee2:	e0 a0 13 f9 	rcall	8002f6d4 <finite>
8002cee6:	e0 80 00 ec 	breq	8002d0be <pow+0x2a6>
8002ceea:	30 08       	mov	r8,0
8002ceec:	30 09       	mov	r9,0
8002ceee:	08 9a       	mov	r10,r4
8002cef0:	0a 9b       	mov	r11,r5
8002cef2:	e0 a0 18 b5 	rcall	8003005c <__avr32_f64_cmp_lt>
8002cef6:	e0 80 00 e4 	breq	8002d0be <pow+0x2a6>
8002cefa:	30 18       	mov	r8,1
8002cefc:	50 b7       	stdsp	sp[0x2c],r7
8002cefe:	50 38       	stdsp	sp[0xc],r8
8002cf00:	fa e3 00 14 	st.d	sp[20],r2
8002cf04:	48 98       	lddpc	r8,8002cf28 <pow+0x110>
8002cf06:	fa e5 00 1c 	st.d	sp[28],r4
8002cf0a:	50 48       	stdsp	sp[0x10],r8
8002cf0c:	6c 08       	ld.w	r8,r6[0x0]
8002cf0e:	58 08       	cp.w	r8,0
8002cf10:	c3 30       	breq	8002cf76 <pow+0x15e>
8002cf12:	30 0a       	mov	r10,0
8002cf14:	f0 6b 00 00 	mov	r11,-1048576
8002cf18:	fa eb 00 24 	st.d	sp[36],r10
8002cf1c:	58 28       	cp.w	r8,2
8002cf1e:	c4 10       	breq	8002cfa0 <pow+0x188>
8002cf20:	c3 a8       	rjmp	8002cf94 <pow+0x17c>
8002cf22:	d7 03       	nop
8002cf24:	00 00       	add	r0,r0
8002cf26:	23 78       	sub	r8,55
8002cf28:	80 03       	ld.sh	r3,r0[0x0]
8002cf2a:	11 7c       	ld.ub	r12,--r8
8002cf2c:	00 9a       	mov	r10,r0
8002cf2e:	02 9b       	mov	r11,r1
8002cf30:	e0 a0 13 d2 	rcall	8002f6d4 <finite>
8002cf34:	18 97       	mov	r7,r12
8002cf36:	e0 81 00 8f 	brne	8002d054 <pow+0x23c>
8002cf3a:	04 9a       	mov	r10,r2
8002cf3c:	06 9b       	mov	r11,r3
8002cf3e:	e0 a0 13 cb 	rcall	8002f6d4 <finite>
8002cf42:	e0 80 00 89 	breq	8002d054 <pow+0x23c>
8002cf46:	08 9a       	mov	r10,r4
8002cf48:	0a 9b       	mov	r11,r5
8002cf4a:	e0 a0 13 c5 	rcall	8002f6d4 <finite>
8002cf4e:	e0 80 00 83 	breq	8002d054 <pow+0x23c>
8002cf52:	00 9a       	mov	r10,r0
8002cf54:	02 9b       	mov	r11,r1
8002cf56:	e0 a0 14 57 	rcall	8002f804 <__isnand>
8002cf5a:	4b e8       	lddpc	r8,8002d050 <pow+0x238>
8002cf5c:	58 0c       	cp.w	r12,0
8002cf5e:	c2 50       	breq	8002cfa8 <pow+0x190>
8002cf60:	50 48       	stdsp	sp[0x10],r8
8002cf62:	50 b7       	stdsp	sp[0x2c],r7
8002cf64:	30 18       	mov	r8,1
8002cf66:	fa e3 00 14 	st.d	sp[20],r2
8002cf6a:	fa e5 00 1c 	st.d	sp[28],r4
8002cf6e:	50 38       	stdsp	sp[0xc],r8
8002cf70:	6c 07       	ld.w	r7,r6[0x0]
8002cf72:	58 07       	cp.w	r7,0
8002cf74:	c0 61       	brne	8002cf80 <pow+0x168>
8002cf76:	30 08       	mov	r8,0
8002cf78:	30 09       	mov	r9,0
8002cf7a:	fa e9 00 24 	st.d	sp[36],r8
8002cf7e:	c0 b8       	rjmp	8002cf94 <pow+0x17c>
8002cf80:	30 08       	mov	r8,0
8002cf82:	30 09       	mov	r9,0
8002cf84:	10 9a       	mov	r10,r8
8002cf86:	12 9b       	mov	r11,r9
8002cf88:	e0 a0 18 9e 	rcall	800300c4 <__avr32_f64_div>
8002cf8c:	fa eb 00 24 	st.d	sp[36],r10
8002cf90:	58 27       	cp.w	r7,2
8002cf92:	c0 70       	breq	8002cfa0 <pow+0x188>
8002cf94:	fa cc ff f4 	sub	r12,sp,-12
8002cf98:	e0 a0 14 44 	rcall	8002f820 <matherr>
8002cf9c:	e0 81 00 88 	brne	8002d0ac <pow+0x294>
8002cfa0:	e0 a0 1c 76 	rcall	8003088c <__errno>
8002cfa4:	32 18       	mov	r8,33
8002cfa6:	c8 28       	rjmp	8002d0aa <pow+0x292>
8002cfa8:	50 48       	stdsp	sp[0x10],r8
8002cfaa:	50 bc       	stdsp	sp[0x2c],r12
8002cfac:	30 38       	mov	r8,3
8002cfae:	fa e3 00 14 	st.d	sp[20],r2
8002cfb2:	50 38       	stdsp	sp[0xc],r8
8002cfb4:	fa e5 00 1c 	st.d	sp[28],r4
8002cfb8:	6c 08       	ld.w	r8,r6[0x0]
8002cfba:	58 08       	cp.w	r8,0
8002cfbc:	c2 81       	brne	8002d00c <pow+0x1f4>
8002cfbe:	fc 18 e0 00 	movh	r8,0xe000
8002cfc2:	e0 69 ff ff 	mov	r9,65535
8002cfc6:	ea 19 47 ef 	orh	r9,0x47ef
8002cfca:	04 9a       	mov	r10,r2
8002cfcc:	fa e9 00 24 	st.d	sp[36],r8
8002cfd0:	06 9b       	mov	r11,r3
8002cfd2:	30 08       	mov	r8,0
8002cfd4:	30 09       	mov	r9,0
8002cfd6:	e0 a0 18 43 	rcall	8003005c <__avr32_f64_cmp_lt>
8002cfda:	c5 c0       	breq	8002d092 <pow+0x27a>
8002cfdc:	fc 19 3f e0 	movh	r9,0x3fe0
8002cfe0:	30 08       	mov	r8,0
8002cfe2:	08 9a       	mov	r10,r4
8002cfe4:	0a 9b       	mov	r11,r5
8002cfe6:	e0 a0 15 29 	rcall	8002fa38 <__avr32_f64_mul>
8002cfea:	16 99       	mov	r9,r11
8002cfec:	50 0a       	stdsp	sp[0x0],r10
8002cfee:	50 19       	stdsp	sp[0x4],r9
8002cff0:	e0 a0 14 1e 	rcall	8002f82c <rint>
8002cff4:	40 19       	lddsp	r9,sp[0x4]
8002cff6:	40 08       	lddsp	r8,sp[0x0]
8002cff8:	e0 a0 17 eb 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002cffc:	c4 b1       	brne	8002d092 <pow+0x27a>
8002cffe:	fc 18 e0 00 	movh	r8,0xe000
8002d002:	e0 69 ff ff 	mov	r9,65535
8002d006:	ea 19 c7 ef 	orh	r9,0xc7ef
8002d00a:	c4 28       	rjmp	8002d08e <pow+0x276>
8002d00c:	30 08       	mov	r8,0
8002d00e:	fc 19 7f f0 	movh	r9,0x7ff0
8002d012:	04 9a       	mov	r10,r2
8002d014:	fa e9 00 24 	st.d	sp[36],r8
8002d018:	06 9b       	mov	r11,r3
8002d01a:	30 08       	mov	r8,0
8002d01c:	30 09       	mov	r9,0
8002d01e:	e0 a0 18 1f 	rcall	8003005c <__avr32_f64_cmp_lt>
8002d022:	c3 80       	breq	8002d092 <pow+0x27a>
8002d024:	fc 19 3f e0 	movh	r9,0x3fe0
8002d028:	30 08       	mov	r8,0
8002d02a:	08 9a       	mov	r10,r4
8002d02c:	0a 9b       	mov	r11,r5
8002d02e:	e0 a0 15 05 	rcall	8002fa38 <__avr32_f64_mul>
8002d032:	16 99       	mov	r9,r11
8002d034:	50 0a       	stdsp	sp[0x0],r10
8002d036:	50 19       	stdsp	sp[0x4],r9
8002d038:	e0 a0 13 fa 	rcall	8002f82c <rint>
8002d03c:	40 19       	lddsp	r9,sp[0x4]
8002d03e:	40 08       	lddsp	r8,sp[0x0]
8002d040:	e0 a0 17 c7 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002d044:	c2 71       	brne	8002d092 <pow+0x27a>
8002d046:	30 08       	mov	r8,0
8002d048:	f0 69 00 00 	mov	r9,-1048576
8002d04c:	c2 18       	rjmp	8002d08e <pow+0x276>
8002d04e:	d7 03       	nop
8002d050:	80 03       	ld.sh	r3,r0[0x0]
8002d052:	11 7c       	ld.ub	r12,--r8
8002d054:	30 08       	mov	r8,0
8002d056:	30 09       	mov	r9,0
8002d058:	00 9a       	mov	r10,r0
8002d05a:	02 9b       	mov	r11,r1
8002d05c:	e0 a0 17 b9 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002d060:	c2 f0       	breq	8002d0be <pow+0x2a6>
8002d062:	04 9a       	mov	r10,r2
8002d064:	06 9b       	mov	r11,r3
8002d066:	e0 a0 13 37 	rcall	8002f6d4 <finite>
8002d06a:	c2 a0       	breq	8002d0be <pow+0x2a6>
8002d06c:	08 9a       	mov	r10,r4
8002d06e:	0a 9b       	mov	r11,r5
8002d070:	e0 a0 13 32 	rcall	8002f6d4 <finite>
8002d074:	c2 50       	breq	8002d0be <pow+0x2a6>
8002d076:	30 48       	mov	r8,4
8002d078:	50 38       	stdsp	sp[0xc],r8
8002d07a:	49 48       	lddpc	r8,8002d0c8 <pow+0x2b0>
8002d07c:	50 48       	stdsp	sp[0x10],r8
8002d07e:	30 08       	mov	r8,0
8002d080:	fa e3 00 14 	st.d	sp[20],r2
8002d084:	50 b8       	stdsp	sp[0x2c],r8
8002d086:	fa e5 00 1c 	st.d	sp[28],r4
8002d08a:	30 08       	mov	r8,0
8002d08c:	30 09       	mov	r9,0
8002d08e:	fa e9 00 24 	st.d	sp[36],r8
8002d092:	48 f8       	lddpc	r8,8002d0cc <pow+0x2b4>
8002d094:	70 08       	ld.w	r8,r8[0x0]
8002d096:	58 28       	cp.w	r8,2
8002d098:	c0 60       	breq	8002d0a4 <pow+0x28c>
8002d09a:	fa cc ff f4 	sub	r12,sp,-12
8002d09e:	e0 a0 13 c1 	rcall	8002f820 <matherr>
8002d0a2:	c0 51       	brne	8002d0ac <pow+0x294>
8002d0a4:	e0 a0 1b f4 	rcall	8003088c <__errno>
8002d0a8:	32 28       	mov	r8,34
8002d0aa:	99 08       	st.w	r12[0x0],r8
8002d0ac:	40 b8       	lddsp	r8,sp[0x2c]
8002d0ae:	58 08       	cp.w	r8,0
8002d0b0:	c0 50       	breq	8002d0ba <pow+0x2a2>
8002d0b2:	e0 a0 1b ed 	rcall	8003088c <__errno>
8002d0b6:	40 b8       	lddsp	r8,sp[0x2c]
8002d0b8:	99 08       	st.w	r12[0x0],r8
8002d0ba:	fa e0 00 24 	ld.d	r0,sp[36]
8002d0be:	00 9a       	mov	r10,r0
8002d0c0:	02 9b       	mov	r11,r1
8002d0c2:	2f 4d       	sub	sp,-48
8002d0c4:	d8 32       	popm	r0-r7,pc
8002d0c6:	d7 03       	nop
8002d0c8:	80 03       	ld.sh	r3,r0[0x0]
8002d0ca:	11 7c       	ld.ub	r12,--r8
8002d0cc:	00 00       	add	r0,r0
8002d0ce:	23 78       	sub	r8,55

8002d0d0 <sqrt>:
8002d0d0:	d4 31       	pushm	r0-r7,lr
8002d0d2:	20 9d       	sub	sp,36
8002d0d4:	4a 47       	lddpc	r7,8002d164 <sqrt+0x94>
8002d0d6:	14 94       	mov	r4,r10
8002d0d8:	16 95       	mov	r5,r11
8002d0da:	e0 a0 0b 61 	rcall	8002e79c <__ieee754_sqrt>
8002d0de:	6e 08       	ld.w	r8,r7[0x0]
8002d0e0:	14 92       	mov	r2,r10
8002d0e2:	16 93       	mov	r3,r11
8002d0e4:	5b f8       	cp.w	r8,-1
8002d0e6:	c3 a0       	breq	8002d15a <sqrt+0x8a>
8002d0e8:	08 9a       	mov	r10,r4
8002d0ea:	0a 9b       	mov	r11,r5
8002d0ec:	e0 a0 13 8c 	rcall	8002f804 <__isnand>
8002d0f0:	18 96       	mov	r6,r12
8002d0f2:	c3 41       	brne	8002d15a <sqrt+0x8a>
8002d0f4:	30 08       	mov	r8,0
8002d0f6:	30 09       	mov	r9,0
8002d0f8:	08 9a       	mov	r10,r4
8002d0fa:	0a 9b       	mov	r11,r5
8002d0fc:	e0 a0 17 b0 	rcall	8003005c <__avr32_f64_cmp_lt>
8002d100:	c2 d0       	breq	8002d15a <sqrt+0x8a>
8002d102:	30 18       	mov	r8,1
8002d104:	50 86       	stdsp	sp[0x20],r6
8002d106:	50 08       	stdsp	sp[0x0],r8
8002d108:	fa e5 00 08 	st.d	sp[8],r4
8002d10c:	49 78       	lddpc	r8,8002d168 <sqrt+0x98>
8002d10e:	fa e5 00 10 	st.d	sp[16],r4
8002d112:	50 18       	stdsp	sp[0x4],r8
8002d114:	6e 07       	ld.w	r7,r7[0x0]
8002d116:	58 07       	cp.w	r7,0
8002d118:	c0 61       	brne	8002d124 <sqrt+0x54>
8002d11a:	30 08       	mov	r8,0
8002d11c:	30 09       	mov	r9,0
8002d11e:	fa e9 00 18 	st.d	sp[24],r8
8002d122:	c0 b8       	rjmp	8002d138 <sqrt+0x68>
8002d124:	30 08       	mov	r8,0
8002d126:	30 09       	mov	r9,0
8002d128:	10 9a       	mov	r10,r8
8002d12a:	12 9b       	mov	r11,r9
8002d12c:	e0 a0 17 cc 	rcall	800300c4 <__avr32_f64_div>
8002d130:	fa eb 00 18 	st.d	sp[24],r10
8002d134:	58 27       	cp.w	r7,2
8002d136:	c0 50       	breq	8002d140 <sqrt+0x70>
8002d138:	1a 9c       	mov	r12,sp
8002d13a:	e0 a0 13 73 	rcall	8002f820 <matherr>
8002d13e:	c0 51       	brne	8002d148 <sqrt+0x78>
8002d140:	e0 a0 1b a6 	rcall	8003088c <__errno>
8002d144:	32 18       	mov	r8,33
8002d146:	99 08       	st.w	r12[0x0],r8
8002d148:	40 88       	lddsp	r8,sp[0x20]
8002d14a:	58 08       	cp.w	r8,0
8002d14c:	c0 50       	breq	8002d156 <sqrt+0x86>
8002d14e:	e0 a0 1b 9f 	rcall	8003088c <__errno>
8002d152:	40 88       	lddsp	r8,sp[0x20]
8002d154:	99 08       	st.w	r12[0x0],r8
8002d156:	fa e2 00 18 	ld.d	r2,sp[24]
8002d15a:	04 9a       	mov	r10,r2
8002d15c:	06 9b       	mov	r11,r3
8002d15e:	2f 7d       	sub	sp,-36
8002d160:	d8 32       	popm	r0-r7,pc
8002d162:	d7 03       	nop
8002d164:	00 00       	add	r0,r0
8002d166:	23 78       	sub	r8,55
8002d168:	80 03       	ld.sh	r3,r0[0x0]
8002d16a:	11 80       	ld.ub	r0,r8[0x0]

8002d16c <__ieee754_asin>:
8002d16c:	d4 31       	pushm	r0-r7,lr
8002d16e:	20 5d       	sub	sp,20
8002d170:	50 0b       	stdsp	sp[0x0],r11
8002d172:	16 96       	mov	r6,r11
8002d174:	14 97       	mov	r7,r10
8002d176:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002d17a:	e0 68 ff ff 	mov	r8,65535
8002d17e:	ea 18 3f ef 	orh	r8,0x3fef
8002d182:	10 35       	cp.w	r5,r8
8002d184:	e0 8a 00 32 	brle	8002d1e8 <__ieee754_asin+0x7c>
8002d188:	fc 1a c0 10 	movh	r10,0xc010
8002d18c:	14 05       	add	r5,r10
8002d18e:	0e 45       	or	r5,r7
8002d190:	c1 f1       	brne	8002d1ce <__ieee754_asin+0x62>
8002d192:	e0 68 2d 18 	mov	r8,11544
8002d196:	ea 18 54 44 	orh	r8,0x5444
8002d19a:	e0 69 21 fb 	mov	r9,8699
8002d19e:	ea 19 3f f9 	orh	r9,0x3ff9
8002d1a2:	0e 9a       	mov	r10,r7
8002d1a4:	e0 a0 14 4a 	rcall	8002fa38 <__avr32_f64_mul>
8002d1a8:	e0 68 5c 07 	mov	r8,23559
8002d1ac:	ea 18 33 14 	orh	r8,0x3314
8002d1b0:	14 94       	mov	r4,r10
8002d1b2:	16 95       	mov	r5,r11
8002d1b4:	e0 69 a6 26 	mov	r9,42534
8002d1b8:	ea 19 3c 91 	orh	r9,0x3c91
8002d1bc:	0c 9b       	mov	r11,r6
8002d1be:	0e 9a       	mov	r10,r7
8002d1c0:	e0 a0 14 3c 	rcall	8002fa38 <__avr32_f64_mul>
8002d1c4:	14 98       	mov	r8,r10
8002d1c6:	16 99       	mov	r9,r11
8002d1c8:	08 9a       	mov	r10,r4
8002d1ca:	0a 9b       	mov	r11,r5
8002d1cc:	ce 48       	rjmp	8002d394 <__ieee754_asin+0x228>
8002d1ce:	0c 99       	mov	r9,r6
8002d1d0:	0e 98       	mov	r8,r7
8002d1d2:	0e 9a       	mov	r10,r7
8002d1d4:	e0 a0 15 1e 	rcall	8002fc10 <__avr32_f64_sub>
8002d1d8:	14 98       	mov	r8,r10
8002d1da:	16 99       	mov	r9,r11
8002d1dc:	e0 a0 17 74 	rcall	800300c4 <__avr32_f64_div>
8002d1e0:	16 96       	mov	r6,r11
8002d1e2:	14 97       	mov	r7,r10
8002d1e4:	e0 8f 02 37 	bral	8002d652 <__ieee754_asin+0x4e6>
8002d1e8:	e0 68 ff ff 	mov	r8,65535
8002d1ec:	ea 18 3f df 	orh	r8,0x3fdf
8002d1f0:	10 35       	cp.w	r5,r8
8002d1f2:	e0 89 00 d4 	brgt	8002d39a <__ieee754_asin+0x22e>
8002d1f6:	e0 68 ff ff 	mov	r8,65535
8002d1fa:	ea 18 3e 3f 	orh	r8,0x3e3f
8002d1fe:	10 35       	cp.w	r5,r8
8002d200:	e0 89 00 17 	brgt	8002d22e <__ieee754_asin+0xc2>
8002d204:	e0 68 75 9c 	mov	r8,30108
8002d208:	ea 18 88 00 	orh	r8,0x8800
8002d20c:	e0 69 e4 3c 	mov	r9,58428
8002d210:	ea 19 7e 37 	orh	r9,0x7e37
8002d214:	e0 a0 15 cc 	rcall	8002fdac <__avr32_f64_add>
8002d218:	14 98       	mov	r8,r10
8002d21a:	16 99       	mov	r9,r11
8002d21c:	30 0a       	mov	r10,0
8002d21e:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d222:	e0 a0 17 1d 	rcall	8003005c <__avr32_f64_cmp_lt>
8002d226:	e0 80 00 ba 	breq	8002d39a <__ieee754_asin+0x22e>
8002d22a:	e0 8f 02 14 	bral	8002d652 <__ieee754_asin+0x4e6>
8002d22e:	16 99       	mov	r9,r11
8002d230:	14 98       	mov	r8,r10
8002d232:	e0 a0 14 03 	rcall	8002fa38 <__avr32_f64_mul>
8002d236:	e0 68 f7 09 	mov	r8,63241
8002d23a:	ea 18 0d fd 	orh	r8,0xdfd
8002d23e:	14 94       	mov	r4,r10
8002d240:	16 95       	mov	r5,r11
8002d242:	e0 69 3d e1 	mov	r9,15841
8002d246:	ea 19 3f 02 	orh	r9,0x3f02
8002d24a:	e0 a0 13 f7 	rcall	8002fa38 <__avr32_f64_mul>
8002d24e:	e0 68 b2 88 	mov	r8,45704
8002d252:	ea 18 75 01 	orh	r8,0x7501
8002d256:	e0 69 ef e0 	mov	r9,61408
8002d25a:	ea 19 3f 49 	orh	r9,0x3f49
8002d25e:	e0 a0 15 a7 	rcall	8002fdac <__avr32_f64_add>
8002d262:	14 98       	mov	r8,r10
8002d264:	16 99       	mov	r9,r11
8002d266:	08 9a       	mov	r10,r4
8002d268:	0a 9b       	mov	r11,r5
8002d26a:	e0 a0 13 e7 	rcall	8002fa38 <__avr32_f64_mul>
8002d26e:	e0 68 8f 3b 	mov	r8,36667
8002d272:	ea 18 b5 68 	orh	r8,0xb568
8002d276:	e0 69 82 28 	mov	r9,33320
8002d27a:	ea 19 3f a4 	orh	r9,0x3fa4
8002d27e:	e0 a0 14 c9 	rcall	8002fc10 <__avr32_f64_sub>
8002d282:	14 98       	mov	r8,r10
8002d284:	16 99       	mov	r9,r11
8002d286:	08 9a       	mov	r10,r4
8002d288:	0a 9b       	mov	r11,r5
8002d28a:	e0 a0 13 d7 	rcall	8002fa38 <__avr32_f64_mul>
8002d28e:	e0 68 44 55 	mov	r8,17493
8002d292:	ea 18 0e 88 	orh	r8,0xe88
8002d296:	e0 69 c1 55 	mov	r9,49493
8002d29a:	ea 19 3f c9 	orh	r9,0x3fc9
8002d29e:	e0 a0 15 87 	rcall	8002fdac <__avr32_f64_add>
8002d2a2:	14 98       	mov	r8,r10
8002d2a4:	16 99       	mov	r9,r11
8002d2a6:	08 9a       	mov	r10,r4
8002d2a8:	0a 9b       	mov	r11,r5
8002d2aa:	e0 a0 13 c7 	rcall	8002fa38 <__avr32_f64_mul>
8002d2ae:	e0 68 6f 7d 	mov	r8,28541
8002d2b2:	ea 18 03 eb 	orh	r8,0x3eb
8002d2b6:	e0 69 d6 12 	mov	r9,54802
8002d2ba:	ea 19 3f d4 	orh	r9,0x3fd4
8002d2be:	e0 a0 14 a9 	rcall	8002fc10 <__avr32_f64_sub>
8002d2c2:	14 98       	mov	r8,r10
8002d2c4:	16 99       	mov	r9,r11
8002d2c6:	08 9a       	mov	r10,r4
8002d2c8:	0a 9b       	mov	r11,r5
8002d2ca:	e0 a0 13 b7 	rcall	8002fa38 <__avr32_f64_mul>
8002d2ce:	e0 68 55 55 	mov	r8,21845
8002d2d2:	ea 18 55 55 	orh	r8,0x5555
8002d2d6:	e0 69 55 55 	mov	r9,21845
8002d2da:	ea 19 3f c5 	orh	r9,0x3fc5
8002d2de:	e0 a0 15 67 	rcall	8002fdac <__avr32_f64_add>
8002d2e2:	14 98       	mov	r8,r10
8002d2e4:	16 99       	mov	r9,r11
8002d2e6:	08 9a       	mov	r10,r4
8002d2e8:	0a 9b       	mov	r11,r5
8002d2ea:	e0 a0 13 a7 	rcall	8002fa38 <__avr32_f64_mul>
8002d2ee:	e0 68 92 82 	mov	r8,37506
8002d2f2:	ea 18 b1 2e 	orh	r8,0xb12e
8002d2f6:	14 92       	mov	r2,r10
8002d2f8:	16 93       	mov	r3,r11
8002d2fa:	e0 69 b8 c5 	mov	r9,47301
8002d2fe:	ea 19 3f b3 	orh	r9,0x3fb3
8002d302:	08 9a       	mov	r10,r4
8002d304:	0a 9b       	mov	r11,r5
8002d306:	e0 a0 13 99 	rcall	8002fa38 <__avr32_f64_mul>
8002d30a:	e0 68 01 59 	mov	r8,345
8002d30e:	ea 18 1b 8d 	orh	r8,0x1b8d
8002d312:	e0 69 06 6c 	mov	r9,1644
8002d316:	ea 19 3f e6 	orh	r9,0x3fe6
8002d31a:	e0 a0 14 7b 	rcall	8002fc10 <__avr32_f64_sub>
8002d31e:	14 98       	mov	r8,r10
8002d320:	16 99       	mov	r9,r11
8002d322:	08 9a       	mov	r10,r4
8002d324:	0a 9b       	mov	r11,r5
8002d326:	e0 a0 13 89 	rcall	8002fa38 <__avr32_f64_mul>
8002d32a:	e0 68 8a c8 	mov	r8,35528
8002d32e:	ea 18 9c 59 	orh	r8,0x9c59
8002d332:	e0 69 2a e5 	mov	r9,10981
8002d336:	ea 19 40 00 	orh	r9,0x4000
8002d33a:	e0 a0 15 39 	rcall	8002fdac <__avr32_f64_add>
8002d33e:	14 98       	mov	r8,r10
8002d340:	16 99       	mov	r9,r11
8002d342:	08 9a       	mov	r10,r4
8002d344:	0a 9b       	mov	r11,r5
8002d346:	e0 a0 13 79 	rcall	8002fa38 <__avr32_f64_mul>
8002d34a:	e0 68 2d 4b 	mov	r8,11595
8002d34e:	ea 18 1c 8a 	orh	r8,0x1c8a
8002d352:	e0 69 3a 27 	mov	r9,14887
8002d356:	ea 19 40 03 	orh	r9,0x4003
8002d35a:	e0 a0 14 5b 	rcall	8002fc10 <__avr32_f64_sub>
8002d35e:	14 98       	mov	r8,r10
8002d360:	16 99       	mov	r9,r11
8002d362:	08 9a       	mov	r10,r4
8002d364:	0a 9b       	mov	r11,r5
8002d366:	e0 a0 13 69 	rcall	8002fa38 <__avr32_f64_mul>
8002d36a:	30 08       	mov	r8,0
8002d36c:	fc 19 3f f0 	movh	r9,0x3ff0
8002d370:	e0 a0 15 1e 	rcall	8002fdac <__avr32_f64_add>
8002d374:	14 98       	mov	r8,r10
8002d376:	16 99       	mov	r9,r11
8002d378:	04 9a       	mov	r10,r2
8002d37a:	06 9b       	mov	r11,r3
8002d37c:	e0 a0 16 a4 	rcall	800300c4 <__avr32_f64_div>
8002d380:	14 98       	mov	r8,r10
8002d382:	16 99       	mov	r9,r11
8002d384:	0e 9a       	mov	r10,r7
8002d386:	0c 9b       	mov	r11,r6
8002d388:	e0 a0 13 58 	rcall	8002fa38 <__avr32_f64_mul>
8002d38c:	14 98       	mov	r8,r10
8002d38e:	16 99       	mov	r9,r11
8002d390:	0e 9a       	mov	r10,r7
8002d392:	0c 9b       	mov	r11,r6
8002d394:	e0 a0 15 0c 	rcall	8002fdac <__avr32_f64_add>
8002d398:	c2 4b       	rjmp	8002d1e0 <__ieee754_asin+0x74>
8002d39a:	0c 9b       	mov	r11,r6
8002d39c:	0e 9a       	mov	r10,r7
8002d39e:	e0 a0 11 97 	rcall	8002f6cc <fabs>
8002d3a2:	14 98       	mov	r8,r10
8002d3a4:	16 99       	mov	r9,r11
8002d3a6:	30 0a       	mov	r10,0
8002d3a8:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d3ac:	e0 a0 14 32 	rcall	8002fc10 <__avr32_f64_sub>
8002d3b0:	30 08       	mov	r8,0
8002d3b2:	fc 19 3f e0 	movh	r9,0x3fe0
8002d3b6:	e0 a0 13 41 	rcall	8002fa38 <__avr32_f64_mul>
8002d3ba:	e0 68 f7 09 	mov	r8,63241
8002d3be:	ea 18 0d fd 	orh	r8,0xdfd
8002d3c2:	16 97       	mov	r7,r11
8002d3c4:	14 96       	mov	r6,r10
8002d3c6:	e0 69 3d e1 	mov	r9,15841
8002d3ca:	ea 19 3f 02 	orh	r9,0x3f02
8002d3ce:	e0 a0 13 35 	rcall	8002fa38 <__avr32_f64_mul>
8002d3d2:	e0 68 b2 88 	mov	r8,45704
8002d3d6:	ea 18 75 01 	orh	r8,0x7501
8002d3da:	e0 69 ef e0 	mov	r9,61408
8002d3de:	ea 19 3f 49 	orh	r9,0x3f49
8002d3e2:	e0 a0 14 e5 	rcall	8002fdac <__avr32_f64_add>
8002d3e6:	14 98       	mov	r8,r10
8002d3e8:	16 99       	mov	r9,r11
8002d3ea:	0c 9a       	mov	r10,r6
8002d3ec:	0e 9b       	mov	r11,r7
8002d3ee:	e0 a0 13 25 	rcall	8002fa38 <__avr32_f64_mul>
8002d3f2:	e0 68 8f 3b 	mov	r8,36667
8002d3f6:	ea 18 b5 68 	orh	r8,0xb568
8002d3fa:	e0 69 82 28 	mov	r9,33320
8002d3fe:	ea 19 3f a4 	orh	r9,0x3fa4
8002d402:	e0 a0 14 07 	rcall	8002fc10 <__avr32_f64_sub>
8002d406:	14 98       	mov	r8,r10
8002d408:	16 99       	mov	r9,r11
8002d40a:	0c 9a       	mov	r10,r6
8002d40c:	0e 9b       	mov	r11,r7
8002d40e:	e0 a0 13 15 	rcall	8002fa38 <__avr32_f64_mul>
8002d412:	e0 68 44 55 	mov	r8,17493
8002d416:	ea 18 0e 88 	orh	r8,0xe88
8002d41a:	e0 69 c1 55 	mov	r9,49493
8002d41e:	ea 19 3f c9 	orh	r9,0x3fc9
8002d422:	e0 a0 14 c5 	rcall	8002fdac <__avr32_f64_add>
8002d426:	14 98       	mov	r8,r10
8002d428:	16 99       	mov	r9,r11
8002d42a:	0c 9a       	mov	r10,r6
8002d42c:	0e 9b       	mov	r11,r7
8002d42e:	e0 a0 13 05 	rcall	8002fa38 <__avr32_f64_mul>
8002d432:	e0 68 6f 7d 	mov	r8,28541
8002d436:	ea 18 03 eb 	orh	r8,0x3eb
8002d43a:	e0 69 d6 12 	mov	r9,54802
8002d43e:	ea 19 3f d4 	orh	r9,0x3fd4
8002d442:	e0 a0 13 e7 	rcall	8002fc10 <__avr32_f64_sub>
8002d446:	14 98       	mov	r8,r10
8002d448:	16 99       	mov	r9,r11
8002d44a:	0c 9a       	mov	r10,r6
8002d44c:	0e 9b       	mov	r11,r7
8002d44e:	e0 a0 12 f5 	rcall	8002fa38 <__avr32_f64_mul>
8002d452:	e0 68 55 55 	mov	r8,21845
8002d456:	ea 18 55 55 	orh	r8,0x5555
8002d45a:	e0 69 55 55 	mov	r9,21845
8002d45e:	ea 19 3f c5 	orh	r9,0x3fc5
8002d462:	e0 a0 14 a5 	rcall	8002fdac <__avr32_f64_add>
8002d466:	14 98       	mov	r8,r10
8002d468:	16 99       	mov	r9,r11
8002d46a:	0c 9a       	mov	r10,r6
8002d46c:	0e 9b       	mov	r11,r7
8002d46e:	e0 a0 12 e5 	rcall	8002fa38 <__avr32_f64_mul>
8002d472:	e0 68 92 82 	mov	r8,37506
8002d476:	ea 18 b1 2e 	orh	r8,0xb12e
8002d47a:	e0 69 b8 c5 	mov	r9,47301
8002d47e:	ea 19 3f b3 	orh	r9,0x3fb3
8002d482:	14 90       	mov	r0,r10
8002d484:	16 91       	mov	r1,r11
8002d486:	0c 9a       	mov	r10,r6
8002d488:	0e 9b       	mov	r11,r7
8002d48a:	e0 a0 12 d7 	rcall	8002fa38 <__avr32_f64_mul>
8002d48e:	e0 68 01 59 	mov	r8,345
8002d492:	ea 18 1b 8d 	orh	r8,0x1b8d
8002d496:	e0 69 06 6c 	mov	r9,1644
8002d49a:	ea 19 3f e6 	orh	r9,0x3fe6
8002d49e:	e0 a0 13 b9 	rcall	8002fc10 <__avr32_f64_sub>
8002d4a2:	14 98       	mov	r8,r10
8002d4a4:	16 99       	mov	r9,r11
8002d4a6:	0c 9a       	mov	r10,r6
8002d4a8:	0e 9b       	mov	r11,r7
8002d4aa:	e0 a0 12 c7 	rcall	8002fa38 <__avr32_f64_mul>
8002d4ae:	e0 68 8a c8 	mov	r8,35528
8002d4b2:	ea 18 9c 59 	orh	r8,0x9c59
8002d4b6:	e0 69 2a e5 	mov	r9,10981
8002d4ba:	ea 19 40 00 	orh	r9,0x4000
8002d4be:	e0 a0 14 77 	rcall	8002fdac <__avr32_f64_add>
8002d4c2:	14 98       	mov	r8,r10
8002d4c4:	16 99       	mov	r9,r11
8002d4c6:	0c 9a       	mov	r10,r6
8002d4c8:	0e 9b       	mov	r11,r7
8002d4ca:	e0 a0 12 b7 	rcall	8002fa38 <__avr32_f64_mul>
8002d4ce:	e0 68 2d 4b 	mov	r8,11595
8002d4d2:	ea 18 1c 8a 	orh	r8,0x1c8a
8002d4d6:	e0 69 3a 27 	mov	r9,14887
8002d4da:	ea 19 40 03 	orh	r9,0x4003
8002d4de:	e0 a0 13 99 	rcall	8002fc10 <__avr32_f64_sub>
8002d4e2:	14 98       	mov	r8,r10
8002d4e4:	16 99       	mov	r9,r11
8002d4e6:	0c 9a       	mov	r10,r6
8002d4e8:	0e 9b       	mov	r11,r7
8002d4ea:	e0 a0 12 a7 	rcall	8002fa38 <__avr32_f64_mul>
8002d4ee:	30 08       	mov	r8,0
8002d4f0:	fc 19 3f f0 	movh	r9,0x3ff0
8002d4f4:	e0 a0 14 5c 	rcall	8002fdac <__avr32_f64_add>
8002d4f8:	fa eb 00 04 	st.d	sp[4],r10
8002d4fc:	0c 9a       	mov	r10,r6
8002d4fe:	0e 9b       	mov	r11,r7
8002d500:	e0 a0 09 4e 	rcall	8002e79c <__ieee754_sqrt>
8002d504:	e0 68 33 32 	mov	r8,13106
8002d508:	ea 18 3f ef 	orh	r8,0x3fef
8002d50c:	14 92       	mov	r2,r10
8002d50e:	16 93       	mov	r3,r11
8002d510:	10 35       	cp.w	r5,r8
8002d512:	e0 8a 00 2d 	brle	8002d56c <__ieee754_asin+0x400>
8002d516:	fa e8 00 04 	ld.d	r8,sp[4]
8002d51a:	00 9a       	mov	r10,r0
8002d51c:	02 9b       	mov	r11,r1
8002d51e:	e0 a0 15 d3 	rcall	800300c4 <__avr32_f64_div>
8002d522:	14 98       	mov	r8,r10
8002d524:	16 99       	mov	r9,r11
8002d526:	04 9a       	mov	r10,r2
8002d528:	06 9b       	mov	r11,r3
8002d52a:	e0 a0 12 87 	rcall	8002fa38 <__avr32_f64_mul>
8002d52e:	14 98       	mov	r8,r10
8002d530:	16 99       	mov	r9,r11
8002d532:	04 9a       	mov	r10,r2
8002d534:	06 9b       	mov	r11,r3
8002d536:	e0 a0 14 3b 	rcall	8002fdac <__avr32_f64_add>
8002d53a:	14 98       	mov	r8,r10
8002d53c:	16 99       	mov	r9,r11
8002d53e:	e0 a0 14 37 	rcall	8002fdac <__avr32_f64_add>
8002d542:	e0 68 5c 07 	mov	r8,23559
8002d546:	ea 18 33 14 	orh	r8,0x3314
8002d54a:	e0 69 a6 26 	mov	r9,42534
8002d54e:	ea 19 3c 91 	orh	r9,0x3c91
8002d552:	e0 a0 13 5f 	rcall	8002fc10 <__avr32_f64_sub>
8002d556:	14 98       	mov	r8,r10
8002d558:	16 99       	mov	r9,r11
8002d55a:	e0 6a 2d 18 	mov	r10,11544
8002d55e:	ea 1a 54 44 	orh	r10,0x5444
8002d562:	e0 6b 21 fb 	mov	r11,8699
8002d566:	ea 1b 3f f9 	orh	r11,0x3ff9
8002d56a:	c6 98       	rjmp	8002d63c <__ieee754_asin+0x4d0>
8002d56c:	14 98       	mov	r8,r10
8002d56e:	06 99       	mov	r9,r3
8002d570:	e0 a0 14 1e 	rcall	8002fdac <__avr32_f64_add>
8002d574:	fa e8 00 04 	ld.d	r8,sp[4]
8002d578:	fa eb 00 0c 	st.d	sp[12],r10
8002d57c:	00 9a       	mov	r10,r0
8002d57e:	02 9b       	mov	r11,r1
8002d580:	e0 a0 15 a2 	rcall	800300c4 <__avr32_f64_div>
8002d584:	14 98       	mov	r8,r10
8002d586:	16 99       	mov	r9,r11
8002d588:	fa ea 00 0c 	ld.d	r10,sp[12]
8002d58c:	e0 a0 12 56 	rcall	8002fa38 <__avr32_f64_mul>
8002d590:	30 04       	mov	r4,0
8002d592:	14 90       	mov	r0,r10
8002d594:	16 91       	mov	r1,r11
8002d596:	08 98       	mov	r8,r4
8002d598:	06 99       	mov	r9,r3
8002d59a:	08 9a       	mov	r10,r4
8002d59c:	06 9b       	mov	r11,r3
8002d59e:	e0 a0 12 4d 	rcall	8002fa38 <__avr32_f64_mul>
8002d5a2:	14 98       	mov	r8,r10
8002d5a4:	16 99       	mov	r9,r11
8002d5a6:	0c 9a       	mov	r10,r6
8002d5a8:	0e 9b       	mov	r11,r7
8002d5aa:	e0 a0 13 33 	rcall	8002fc10 <__avr32_f64_sub>
8002d5ae:	08 98       	mov	r8,r4
8002d5b0:	16 97       	mov	r7,r11
8002d5b2:	14 96       	mov	r6,r10
8002d5b4:	06 99       	mov	r9,r3
8002d5b6:	04 9a       	mov	r10,r2
8002d5b8:	06 9b       	mov	r11,r3
8002d5ba:	e0 a0 13 f9 	rcall	8002fdac <__avr32_f64_add>
8002d5be:	14 98       	mov	r8,r10
8002d5c0:	16 99       	mov	r9,r11
8002d5c2:	0c 9a       	mov	r10,r6
8002d5c4:	0e 9b       	mov	r11,r7
8002d5c6:	e0 a0 15 7f 	rcall	800300c4 <__avr32_f64_div>
8002d5ca:	30 08       	mov	r8,0
8002d5cc:	fc 19 c0 00 	movh	r9,0xc000
8002d5d0:	e0 a0 12 34 	rcall	8002fa38 <__avr32_f64_mul>
8002d5d4:	e0 68 5c 07 	mov	r8,23559
8002d5d8:	ea 18 33 14 	orh	r8,0x3314
8002d5dc:	e0 69 a6 26 	mov	r9,42534
8002d5e0:	ea 19 3c 91 	orh	r9,0x3c91
8002d5e4:	e0 a0 13 e4 	rcall	8002fdac <__avr32_f64_add>
8002d5e8:	14 98       	mov	r8,r10
8002d5ea:	16 99       	mov	r9,r11
8002d5ec:	00 9a       	mov	r10,r0
8002d5ee:	02 9b       	mov	r11,r1
8002d5f0:	e0 a0 13 10 	rcall	8002fc10 <__avr32_f64_sub>
8002d5f4:	30 08       	mov	r8,0
8002d5f6:	16 97       	mov	r7,r11
8002d5f8:	14 96       	mov	r6,r10
8002d5fa:	fc 19 c0 00 	movh	r9,0xc000
8002d5fe:	08 9a       	mov	r10,r4
8002d600:	06 9b       	mov	r11,r3
8002d602:	e0 a0 12 1b 	rcall	8002fa38 <__avr32_f64_mul>
8002d606:	e0 68 2d 18 	mov	r8,11544
8002d60a:	ea 18 54 44 	orh	r8,0x5444
8002d60e:	e0 69 21 fb 	mov	r9,8699
8002d612:	ea 19 3f e9 	orh	r9,0x3fe9
8002d616:	e0 a0 13 cb 	rcall	8002fdac <__avr32_f64_add>
8002d61a:	14 98       	mov	r8,r10
8002d61c:	16 99       	mov	r9,r11
8002d61e:	0c 9a       	mov	r10,r6
8002d620:	0e 9b       	mov	r11,r7
8002d622:	e0 a0 12 f7 	rcall	8002fc10 <__avr32_f64_sub>
8002d626:	06 95       	mov	r5,r3
8002d628:	14 98       	mov	r8,r10
8002d62a:	16 99       	mov	r9,r11
8002d62c:	e0 6a 2d 18 	mov	r10,11544
8002d630:	ea 1a 54 44 	orh	r10,0x5444
8002d634:	e0 6b 21 fb 	mov	r11,8699
8002d638:	ea 1b 3f e9 	orh	r11,0x3fe9
8002d63c:	e0 a0 12 ea 	rcall	8002fc10 <__avr32_f64_sub>
8002d640:	40 08       	lddsp	r8,sp[0x0]
8002d642:	16 96       	mov	r6,r11
8002d644:	14 97       	mov	r7,r10
8002d646:	ee 16 80 00 	eorh	r6,0x8000
8002d64a:	58 08       	cp.w	r8,0
8002d64c:	e0 8a 00 03 	brle	8002d652 <__ieee754_asin+0x4e6>
8002d650:	16 96       	mov	r6,r11
8002d652:	0c 9b       	mov	r11,r6
8002d654:	0e 9a       	mov	r10,r7
8002d656:	2f bd       	sub	sp,-20
8002d658:	d8 32       	popm	r0-r7,pc
8002d65a:	d7 03       	nop

8002d65c <__ieee754_atan2>:
8002d65c:	d4 31       	pushm	r0-r7,lr
8002d65e:	20 2d       	sub	sp,8
8002d660:	50 0b       	stdsp	sp[0x0],r11
8002d662:	10 96       	mov	r6,r8
8002d664:	10 92       	mov	r2,r8
8002d666:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002d66a:	5c 38       	neg	r8
8002d66c:	14 94       	mov	r4,r10
8002d66e:	0c 48       	or	r8,r6
8002d670:	16 95       	mov	r5,r11
8002d672:	12 93       	mov	r3,r9
8002d674:	14 90       	mov	r0,r10
8002d676:	16 91       	mov	r1,r11
8002d678:	12 9c       	mov	r12,r9
8002d67a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002d67e:	fc 17 7f f0 	movh	r7,0x7ff0
8002d682:	0e 38       	cp.w	r8,r7
8002d684:	e0 8b 00 0e 	brhi	8002d6a0 <__ieee754_atan2+0x44>
8002d688:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002d68c:	f4 07 11 00 	rsub	r7,r10,0
8002d690:	fc 10 7f f0 	movh	r0,0x7ff0
8002d694:	14 47       	or	r7,r10
8002d696:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002d69a:	00 37       	cp.w	r7,r0
8002d69c:	e0 88 00 09 	brls	8002d6ae <__ieee754_atan2+0x52>
8002d6a0:	04 98       	mov	r8,r2
8002d6a2:	06 99       	mov	r9,r3
8002d6a4:	08 9a       	mov	r10,r4
8002d6a6:	0a 9b       	mov	r11,r5
8002d6a8:	e0 a0 13 82 	rcall	8002fdac <__avr32_f64_add>
8002d6ac:	ce 88       	rjmp	8002d87c <__ieee754_atan2+0x220>
8002d6ae:	fc 17 c0 10 	movh	r7,0xc010
8002d6b2:	f8 07 00 07 	add	r7,r12,r7
8002d6b6:	0c 47       	or	r7,r6
8002d6b8:	c0 41       	brne	8002d6c0 <__ieee754_atan2+0x64>
8002d6ba:	e0 a0 0e 65 	rcall	8002f384 <atan>
8002d6be:	cd f8       	rjmp	8002d87c <__ieee754_atan2+0x220>
8002d6c0:	f8 07 14 1e 	asr	r7,r12,0x1e
8002d6c4:	f1 ea 10 09 	or	r9,r8,r10
8002d6c8:	e2 17 00 02 	andl	r7,0x2,COH
8002d6cc:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002d6d0:	58 09       	cp.w	r9,0
8002d6d2:	c0 71       	brne	8002d6e0 <__ieee754_atan2+0x84>
8002d6d4:	58 27       	cp.w	r7,2
8002d6d6:	c5 10       	breq	8002d778 <__ieee754_atan2+0x11c>
8002d6d8:	e0 8a 00 d4 	brle	8002d880 <__ieee754_atan2+0x224>
8002d6dc:	58 37       	cp.w	r7,3
8002d6de:	c5 60       	breq	8002d78a <__ieee754_atan2+0x12e>
8002d6e0:	fd e6 10 06 	or	r6,lr,r6
8002d6e4:	c6 00       	breq	8002d7a4 <__ieee754_atan2+0x148>
8002d6e6:	fc 19 7f f0 	movh	r9,0x7ff0
8002d6ea:	12 3e       	cp.w	lr,r9
8002d6ec:	c5 81       	brne	8002d79c <__ieee754_atan2+0x140>
8002d6ee:	12 38       	cp.w	r8,r9
8002d6f0:	c3 11       	brne	8002d752 <__ieee754_atan2+0xf6>
8002d6f2:	58 17       	cp.w	r7,1
8002d6f4:	c0 b0       	breq	8002d70a <__ieee754_atan2+0xae>
8002d6f6:	e0 89 00 05 	brgt	8002d700 <__ieee754_atan2+0xa4>
8002d6fa:	58 07       	cp.w	r7,0
8002d6fc:	c1 00       	breq	8002d71c <__ieee754_atan2+0xc0>
8002d6fe:	c5 38       	rjmp	8002d7a4 <__ieee754_atan2+0x148>
8002d700:	58 27       	cp.w	r7,2
8002d702:	c1 60       	breq	8002d72e <__ieee754_atan2+0xd2>
8002d704:	58 37       	cp.w	r7,3
8002d706:	c4 f1       	brne	8002d7a4 <__ieee754_atan2+0x148>
8002d708:	c1 c8       	rjmp	8002d740 <__ieee754_atan2+0xe4>
8002d70a:	e0 64 2d 18 	mov	r4,11544
8002d70e:	ea 14 54 44 	orh	r4,0x5444
8002d712:	e0 65 21 fb 	mov	r5,8699
8002d716:	ea 15 bf e9 	orh	r5,0xbfe9
8002d71a:	cb 38       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d71c:	e0 64 2d 18 	mov	r4,11544
8002d720:	ea 14 54 44 	orh	r4,0x5444
8002d724:	e0 65 21 fb 	mov	r5,8699
8002d728:	ea 15 3f e9 	orh	r5,0x3fe9
8002d72c:	ca a8       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d72e:	e0 64 21 d2 	mov	r4,8658
8002d732:	ea 14 7f 33 	orh	r4,0x7f33
8002d736:	e0 65 d9 7c 	mov	r5,55676
8002d73a:	ea 15 40 02 	orh	r5,0x4002
8002d73e:	ca 18       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d740:	e0 64 21 d2 	mov	r4,8658
8002d744:	ea 14 7f 33 	orh	r4,0x7f33
8002d748:	e0 65 d9 7c 	mov	r5,55676
8002d74c:	ea 15 c0 02 	orh	r5,0xc002
8002d750:	c9 88       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d752:	58 17       	cp.w	r7,1
8002d754:	c0 b0       	breq	8002d76a <__ieee754_atan2+0x10e>
8002d756:	e0 89 00 05 	brgt	8002d760 <__ieee754_atan2+0x104>
8002d75a:	58 07       	cp.w	r7,0
8002d75c:	c0 b0       	breq	8002d772 <__ieee754_atan2+0x116>
8002d75e:	c1 f8       	rjmp	8002d79c <__ieee754_atan2+0x140>
8002d760:	58 27       	cp.w	r7,2
8002d762:	c0 b0       	breq	8002d778 <__ieee754_atan2+0x11c>
8002d764:	58 37       	cp.w	r7,3
8002d766:	c1 b1       	brne	8002d79c <__ieee754_atan2+0x140>
8002d768:	c1 18       	rjmp	8002d78a <__ieee754_atan2+0x12e>
8002d76a:	30 04       	mov	r4,0
8002d76c:	fc 15 80 00 	movh	r5,0x8000
8002d770:	c8 88       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d772:	30 04       	mov	r4,0
8002d774:	30 05       	mov	r5,0
8002d776:	c8 58       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d778:	e0 64 2d 18 	mov	r4,11544
8002d77c:	ea 14 54 44 	orh	r4,0x5444
8002d780:	e0 65 21 fb 	mov	r5,8699
8002d784:	ea 15 40 09 	orh	r5,0x4009
8002d788:	c7 c8       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d78a:	e0 64 2d 18 	mov	r4,11544
8002d78e:	ea 14 54 44 	orh	r4,0x5444
8002d792:	e0 65 21 fb 	mov	r5,8699
8002d796:	ea 15 c0 09 	orh	r5,0xc009
8002d79a:	c7 38       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d79c:	fc 10 7f f0 	movh	r0,0x7ff0
8002d7a0:	00 38       	cp.w	r8,r0
8002d7a2:	c1 51       	brne	8002d7cc <__ieee754_atan2+0x170>
8002d7a4:	58 01       	cp.w	r1,0
8002d7a6:	c0 a5       	brlt	8002d7ba <__ieee754_atan2+0x15e>
8002d7a8:	e0 64 2d 18 	mov	r4,11544
8002d7ac:	ea 14 54 44 	orh	r4,0x5444
8002d7b0:	e0 65 21 fb 	mov	r5,8699
8002d7b4:	ea 15 3f f9 	orh	r5,0x3ff9
8002d7b8:	c6 48       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d7ba:	e0 64 2d 18 	mov	r4,11544
8002d7be:	ea 14 54 44 	orh	r4,0x5444
8002d7c2:	e0 65 21 fb 	mov	r5,8699
8002d7c6:	ea 15 bf f9 	orh	r5,0xbff9
8002d7ca:	c5 b8       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d7cc:	1c 18       	sub	r8,lr
8002d7ce:	b5 48       	asr	r8,0x14
8002d7d0:	e0 48 00 3c 	cp.w	r8,60
8002d7d4:	e0 8a 00 0b 	brle	8002d7ea <__ieee754_atan2+0x18e>
8002d7d8:	e0 6a 2d 18 	mov	r10,11544
8002d7dc:	ea 1a 54 44 	orh	r10,0x5444
8002d7e0:	e0 6b 21 fb 	mov	r11,8699
8002d7e4:	ea 1b 3f f9 	orh	r11,0x3ff9
8002d7e8:	c1 48       	rjmp	8002d810 <__ieee754_atan2+0x1b4>
8002d7ea:	fe 58 ff c4 	cp.w	r8,-60
8002d7ee:	5f 58       	srlt	r8
8002d7f0:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002d7f4:	c0 40       	breq	8002d7fc <__ieee754_atan2+0x1a0>
8002d7f6:	30 0a       	mov	r10,0
8002d7f8:	30 0b       	mov	r11,0
8002d7fa:	c0 b8       	rjmp	8002d810 <__ieee754_atan2+0x1b4>
8002d7fc:	04 98       	mov	r8,r2
8002d7fe:	06 99       	mov	r9,r3
8002d800:	08 9a       	mov	r10,r4
8002d802:	0a 9b       	mov	r11,r5
8002d804:	e0 a0 14 60 	rcall	800300c4 <__avr32_f64_div>
8002d808:	e0 a0 0f 62 	rcall	8002f6cc <fabs>
8002d80c:	e0 a0 0d bc 	rcall	8002f384 <atan>
8002d810:	58 17       	cp.w	r7,1
8002d812:	c0 60       	breq	8002d81e <__ieee754_atan2+0x1c2>
8002d814:	58 27       	cp.w	r7,2
8002d816:	c0 a0       	breq	8002d82a <__ieee754_atan2+0x1ce>
8002d818:	58 07       	cp.w	r7,0
8002d81a:	c1 d1       	brne	8002d854 <__ieee754_atan2+0x1f8>
8002d81c:	c3 08       	rjmp	8002d87c <__ieee754_atan2+0x220>
8002d81e:	fc 18 80 00 	movh	r8,0x8000
8002d822:	14 94       	mov	r4,r10
8002d824:	f6 08 00 05 	add	r5,r11,r8
8002d828:	c2 c8       	rjmp	8002d880 <__ieee754_atan2+0x224>
8002d82a:	e0 68 5c 07 	mov	r8,23559
8002d82e:	ea 18 33 14 	orh	r8,0x3314
8002d832:	e0 69 a6 26 	mov	r9,42534
8002d836:	ea 19 3c a1 	orh	r9,0x3ca1
8002d83a:	e0 a0 11 eb 	rcall	8002fc10 <__avr32_f64_sub>
8002d83e:	14 98       	mov	r8,r10
8002d840:	16 99       	mov	r9,r11
8002d842:	e0 6a 2d 18 	mov	r10,11544
8002d846:	ea 1a 54 44 	orh	r10,0x5444
8002d84a:	e0 6b 21 fb 	mov	r11,8699
8002d84e:	ea 1b 40 09 	orh	r11,0x4009
8002d852:	c1 38       	rjmp	8002d878 <__ieee754_atan2+0x21c>
8002d854:	e0 68 5c 07 	mov	r8,23559
8002d858:	ea 18 33 14 	orh	r8,0x3314
8002d85c:	e0 69 a6 26 	mov	r9,42534
8002d860:	ea 19 3c a1 	orh	r9,0x3ca1
8002d864:	e0 a0 11 d6 	rcall	8002fc10 <__avr32_f64_sub>
8002d868:	e0 68 2d 18 	mov	r8,11544
8002d86c:	ea 18 54 44 	orh	r8,0x5444
8002d870:	e0 69 21 fb 	mov	r9,8699
8002d874:	ea 19 40 09 	orh	r9,0x4009
8002d878:	e0 a0 11 cc 	rcall	8002fc10 <__avr32_f64_sub>
8002d87c:	14 94       	mov	r4,r10
8002d87e:	16 95       	mov	r5,r11
8002d880:	08 9a       	mov	r10,r4
8002d882:	0a 9b       	mov	r11,r5
8002d884:	2f ed       	sub	sp,-8
8002d886:	d8 32       	popm	r0-r7,pc

8002d888 <__ieee754_pow>:
8002d888:	d4 31       	pushm	r0-r7,lr
8002d88a:	20 ed       	sub	sp,56
8002d88c:	10 94       	mov	r4,r8
8002d88e:	12 95       	mov	r5,r9
8002d890:	50 7b       	stdsp	sp[0x1c],r11
8002d892:	fa e5 00 0c 	st.d	sp[12],r4
8002d896:	12 97       	mov	r7,r9
8002d898:	10 96       	mov	r6,r8
8002d89a:	40 31       	lddsp	r1,sp[0xc]
8002d89c:	40 49       	lddsp	r9,sp[0x10]
8002d89e:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002d8a2:	16 90       	mov	r0,r11
8002d8a4:	14 93       	mov	r3,r10
8002d8a6:	14 98       	mov	r8,r10
8002d8a8:	e5 e9 10 0c 	or	r12,r2,r9
8002d8ac:	e0 80 05 33 	breq	8002e312 <__ieee754_pow+0xa8a>
8002d8b0:	50 1b       	stdsp	sp[0x4],r11
8002d8b2:	16 9e       	mov	lr,r11
8002d8b4:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002d8b8:	fc 1c 7f f0 	movh	r12,0x7ff0
8002d8bc:	18 34       	cp.w	r4,r12
8002d8be:	e0 89 00 1a 	brgt	8002d8f2 <__ieee754_pow+0x6a>
8002d8c2:	5f 05       	sreq	r5
8002d8c4:	50 55       	stdsp	sp[0x14],r5
8002d8c6:	30 0c       	mov	r12,0
8002d8c8:	58 0a       	cp.w	r10,0
8002d8ca:	5f 15       	srne	r5
8002d8cc:	40 5e       	lddsp	lr,sp[0x14]
8002d8ce:	fd e5 00 05 	and	r5,lr,r5
8002d8d2:	f8 05 18 00 	cp.b	r5,r12
8002d8d6:	c0 e1       	brne	8002d8f2 <__ieee754_pow+0x6a>
8002d8d8:	fc 1c 7f f0 	movh	r12,0x7ff0
8002d8dc:	18 32       	cp.w	r2,r12
8002d8de:	e0 89 00 0a 	brgt	8002d8f2 <__ieee754_pow+0x6a>
8002d8e2:	5f 0c       	sreq	r12
8002d8e4:	58 09       	cp.w	r9,0
8002d8e6:	5f 1e       	srne	lr
8002d8e8:	f9 ee 00 0e 	and	lr,r12,lr
8002d8ec:	ea 0e 18 00 	cp.b	lr,r5
8002d8f0:	c0 d0       	breq	8002d90a <__ieee754_pow+0x82>
8002d8f2:	fc 19 c0 10 	movh	r9,0xc010
8002d8f6:	12 04       	add	r4,r9
8002d8f8:	e9 e8 10 08 	or	r8,r4,r8
8002d8fc:	e0 80 05 0b 	breq	8002e312 <__ieee754_pow+0xa8a>
8002d900:	4d 6c       	lddpc	r12,8002da58 <__ieee754_pow+0x1d0>
8002d902:	e0 a0 0f 90 	rcall	8002f822 <nan>
8002d906:	e0 8f 05 03 	bral	8002e30c <__ieee754_pow+0xa84>
8002d90a:	58 0b       	cp.w	r11,0
8002d90c:	c3 64       	brge	8002d978 <__ieee754_pow+0xf0>
8002d90e:	e0 6b ff ff 	mov	r11,65535
8002d912:	ea 1b 43 3f 	orh	r11,0x433f
8002d916:	16 32       	cp.w	r2,r11
8002d918:	e0 8a 00 04 	brle	8002d920 <__ieee754_pow+0x98>
8002d91c:	30 25       	mov	r5,2
8002d91e:	c2 e8       	rjmp	8002d97a <__ieee754_pow+0xf2>
8002d920:	e0 6a ff ff 	mov	r10,65535
8002d924:	ea 1a 3f ef 	orh	r10,0x3fef
8002d928:	14 32       	cp.w	r2,r10
8002d92a:	e0 8a 00 27 	brle	8002d978 <__ieee754_pow+0xf0>
8002d92e:	e4 0a 14 14 	asr	r10,r2,0x14
8002d932:	f4 ca 03 ff 	sub	r10,r10,1023
8002d936:	59 4a       	cp.w	r10,20
8002d938:	e0 8a 00 0f 	brle	8002d956 <__ieee754_pow+0xce>
8002d93c:	f4 0a 11 34 	rsub	r10,r10,52
8002d940:	f2 0a 0a 45 	lsr	r5,r9,r10
8002d944:	ea 0a 09 4a 	lsl	r10,r5,r10
8002d948:	12 3a       	cp.w	r10,r9
8002d94a:	c1 71       	brne	8002d978 <__ieee754_pow+0xf0>
8002d94c:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002d950:	ea 05 11 02 	rsub	r5,r5,2
8002d954:	c1 38       	rjmp	8002d97a <__ieee754_pow+0xf2>
8002d956:	40 49       	lddsp	r9,sp[0x10]
8002d958:	58 09       	cp.w	r9,0
8002d95a:	c5 01       	brne	8002d9fa <__ieee754_pow+0x172>
8002d95c:	f4 0a 11 14 	rsub	r10,r10,20
8002d960:	e4 0a 08 45 	asr	r5,r2,r10
8002d964:	ea 0a 09 4a 	lsl	r10,r5,r10
8002d968:	04 3a       	cp.w	r10,r2
8002d96a:	e0 81 04 de 	brne	8002e326 <__ieee754_pow+0xa9e>
8002d96e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002d972:	ea 05 11 02 	rsub	r5,r5,2
8002d976:	c0 48       	rjmp	8002d97e <__ieee754_pow+0xf6>
8002d978:	30 05       	mov	r5,0
8002d97a:	58 09       	cp.w	r9,0
8002d97c:	c4 01       	brne	8002d9fc <__ieee754_pow+0x174>
8002d97e:	58 0c       	cp.w	r12,0
8002d980:	c1 90       	breq	8002d9b2 <__ieee754_pow+0x12a>
8002d982:	fc 19 c0 10 	movh	r9,0xc010
8002d986:	e8 09 00 09 	add	r9,r4,r9
8002d98a:	f3 e8 10 08 	or	r8,r9,r8
8002d98e:	e0 80 04 c2 	breq	8002e312 <__ieee754_pow+0xa8a>
8002d992:	e0 68 ff ff 	mov	r8,65535
8002d996:	ea 18 3f ef 	orh	r8,0x3fef
8002d99a:	10 34       	cp.w	r4,r8
8002d99c:	e0 8a 00 07 	brle	8002d9aa <__ieee754_pow+0x122>
8002d9a0:	58 01       	cp.w	r1,0
8002d9a2:	e0 84 04 be 	brge	8002e31e <__ieee754_pow+0xa96>
8002d9a6:	e0 8f 04 ba 	bral	8002e31a <__ieee754_pow+0xa92>
8002d9aa:	58 01       	cp.w	r1,0
8002d9ac:	e0 84 04 b7 	brge	8002e31a <__ieee754_pow+0xa92>
8002d9b0:	c5 98       	rjmp	8002da62 <__ieee754_pow+0x1da>
8002d9b2:	fc 1e 3f f0 	movh	lr,0x3ff0
8002d9b6:	1c 32       	cp.w	r2,lr
8002d9b8:	c0 d1       	brne	8002d9d2 <__ieee754_pow+0x14a>
8002d9ba:	58 01       	cp.w	r1,0
8002d9bc:	c0 55       	brlt	8002d9c6 <__ieee754_pow+0x13e>
8002d9be:	00 97       	mov	r7,r0
8002d9c0:	06 96       	mov	r6,r3
8002d9c2:	e0 8f 04 ae 	bral	8002e31e <__ieee754_pow+0xa96>
8002d9c6:	00 99       	mov	r9,r0
8002d9c8:	06 98       	mov	r8,r3
8002d9ca:	30 0a       	mov	r10,0
8002d9cc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d9d0:	c5 c8       	rjmp	8002da88 <__ieee754_pow+0x200>
8002d9d2:	fc 1c 40 00 	movh	r12,0x4000
8002d9d6:	18 31       	cp.w	r1,r12
8002d9d8:	c0 41       	brne	8002d9e0 <__ieee754_pow+0x158>
8002d9da:	00 99       	mov	r9,r0
8002d9dc:	06 98       	mov	r8,r3
8002d9de:	c8 68       	rjmp	8002daea <__ieee754_pow+0x262>
8002d9e0:	fc 1b 3f e0 	movh	r11,0x3fe0
8002d9e4:	16 31       	cp.w	r1,r11
8002d9e6:	c0 b1       	brne	8002d9fc <__ieee754_pow+0x174>
8002d9e8:	40 1a       	lddsp	r10,sp[0x4]
8002d9ea:	58 0a       	cp.w	r10,0
8002d9ec:	c0 85       	brlt	8002d9fc <__ieee754_pow+0x174>
8002d9ee:	00 9b       	mov	r11,r0
8002d9f0:	06 9a       	mov	r10,r3
8002d9f2:	e0 a0 06 d5 	rcall	8002e79c <__ieee754_sqrt>
8002d9f6:	e0 8f 04 8b 	bral	8002e30c <__ieee754_pow+0xa84>
8002d9fa:	30 05       	mov	r5,0
8002d9fc:	50 08       	stdsp	sp[0x0],r8
8002d9fe:	00 9b       	mov	r11,r0
8002da00:	06 9a       	mov	r10,r3
8002da02:	e0 a0 0e 65 	rcall	8002f6cc <fabs>
8002da06:	40 08       	lddsp	r8,sp[0x0]
8002da08:	58 08       	cp.w	r8,0
8002da0a:	c3 01       	brne	8002da6a <__ieee754_pow+0x1e2>
8002da0c:	58 04       	cp.w	r4,0
8002da0e:	5f 09       	sreq	r9
8002da10:	40 5e       	lddsp	lr,sp[0x14]
8002da12:	fd e9 10 09 	or	r9,lr,r9
8002da16:	f0 09 18 00 	cp.b	r9,r8
8002da1a:	c0 51       	brne	8002da24 <__ieee754_pow+0x19c>
8002da1c:	fc 1c 3f f0 	movh	r12,0x3ff0
8002da20:	18 34       	cp.w	r4,r12
8002da22:	c2 41       	brne	8002da6a <__ieee754_pow+0x1e2>
8002da24:	58 01       	cp.w	r1,0
8002da26:	c0 84       	brge	8002da36 <__ieee754_pow+0x1ae>
8002da28:	16 99       	mov	r9,r11
8002da2a:	14 98       	mov	r8,r10
8002da2c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002da30:	30 0a       	mov	r10,0
8002da32:	e0 a0 13 49 	rcall	800300c4 <__avr32_f64_div>
8002da36:	16 97       	mov	r7,r11
8002da38:	14 96       	mov	r6,r10
8002da3a:	40 1b       	lddsp	r11,sp[0x4]
8002da3c:	58 0b       	cp.w	r11,0
8002da3e:	e0 84 04 70 	brge	8002e31e <__ieee754_pow+0xa96>
8002da42:	fc 18 c0 10 	movh	r8,0xc010
8002da46:	10 04       	add	r4,r8
8002da48:	eb e4 10 04 	or	r4,r5,r4
8002da4c:	c0 81       	brne	8002da5c <__ieee754_pow+0x1d4>
8002da4e:	0e 9b       	mov	r11,r7
8002da50:	0e 99       	mov	r9,r7
8002da52:	0c 98       	mov	r8,r6
8002da54:	c1 68       	rjmp	8002da80 <__ieee754_pow+0x1f8>
8002da56:	d7 03       	nop
8002da58:	80 03       	ld.sh	r3,r0[0x0]
8002da5a:	11 78       	ld.ub	r8,--r8
8002da5c:	58 15       	cp.w	r5,1
8002da5e:	e0 81 04 60 	brne	8002e31e <__ieee754_pow+0xa96>
8002da62:	ee 17 80 00 	eorh	r7,0x8000
8002da66:	e0 8f 04 5c 	bral	8002e31e <__ieee754_pow+0xa96>
8002da6a:	40 78       	lddsp	r8,sp[0x1c]
8002da6c:	bf 98       	lsr	r8,0x1f
8002da6e:	20 18       	sub	r8,1
8002da70:	50 d8       	stdsp	sp[0x34],r8
8002da72:	eb e8 10 08 	or	r8,r5,r8
8002da76:	c0 d1       	brne	8002da90 <__ieee754_pow+0x208>
8002da78:	00 99       	mov	r9,r0
8002da7a:	06 98       	mov	r8,r3
8002da7c:	06 9a       	mov	r10,r3
8002da7e:	00 9b       	mov	r11,r0
8002da80:	e0 a0 10 c8 	rcall	8002fc10 <__avr32_f64_sub>
8002da84:	14 98       	mov	r8,r10
8002da86:	16 99       	mov	r9,r11
8002da88:	e0 a0 13 1e 	rcall	800300c4 <__avr32_f64_div>
8002da8c:	e0 8f 04 40 	bral	8002e30c <__ieee754_pow+0xa84>
8002da90:	fc 19 41 e0 	movh	r9,0x41e0
8002da94:	12 32       	cp.w	r2,r9
8002da96:	e0 8a 00 9f 	brle	8002dbd4 <__ieee754_pow+0x34c>
8002da9a:	fc 18 43 f0 	movh	r8,0x43f0
8002da9e:	10 32       	cp.w	r2,r8
8002daa0:	e0 8a 00 0a 	brle	8002dab4 <__ieee754_pow+0x22c>
8002daa4:	e0 65 ff ff 	mov	r5,65535
8002daa8:	ea 15 3f ef 	orh	r5,0x3fef
8002daac:	0a 34       	cp.w	r4,r5
8002daae:	e0 89 00 13 	brgt	8002dad4 <__ieee754_pow+0x24c>
8002dab2:	c0 88       	rjmp	8002dac2 <__ieee754_pow+0x23a>
8002dab4:	e0 60 ff fe 	mov	r0,65534
8002dab8:	ea 10 3f ef 	orh	r0,0x3fef
8002dabc:	00 34       	cp.w	r4,r0
8002dabe:	e0 89 00 06 	brgt	8002daca <__ieee754_pow+0x242>
8002dac2:	58 01       	cp.w	r1,0
8002dac4:	e0 84 04 2b 	brge	8002e31a <__ieee754_pow+0xa92>
8002dac8:	c0 98       	rjmp	8002dada <__ieee754_pow+0x252>
8002daca:	fc 1e 3f f0 	movh	lr,0x3ff0
8002dace:	1c 34       	cp.w	r4,lr
8002dad0:	e0 8a 00 11 	brle	8002daf2 <__ieee754_pow+0x26a>
8002dad4:	58 01       	cp.w	r1,0
8002dad6:	e0 8a 04 22 	brle	8002e31a <__ieee754_pow+0xa92>
8002dada:	e0 68 75 9c 	mov	r8,30108
8002dade:	ea 18 88 00 	orh	r8,0x8800
8002dae2:	e0 69 e4 3c 	mov	r9,58428
8002dae6:	ea 19 7e 37 	orh	r9,0x7e37
8002daea:	10 9a       	mov	r10,r8
8002daec:	12 9b       	mov	r11,r9
8002daee:	e0 8f 04 0d 	bral	8002e308 <__ieee754_pow+0xa80>
8002daf2:	30 08       	mov	r8,0
8002daf4:	fc 19 3f f0 	movh	r9,0x3ff0
8002daf8:	e0 a0 10 8c 	rcall	8002fc10 <__avr32_f64_sub>
8002dafc:	fc 18 60 00 	movh	r8,0x6000
8002db00:	14 92       	mov	r2,r10
8002db02:	16 93       	mov	r3,r11
8002db04:	e0 69 15 47 	mov	r9,5447
8002db08:	ea 19 3f f7 	orh	r9,0x3ff7
8002db0c:	e0 a0 0f 96 	rcall	8002fa38 <__avr32_f64_mul>
8002db10:	e0 68 df 44 	mov	r8,57156
8002db14:	ea 18 f8 5d 	orh	r8,0xf85d
8002db18:	fa eb 00 0c 	st.d	sp[12],r10
8002db1c:	e0 69 ae 0b 	mov	r9,44555
8002db20:	ea 19 3e 54 	orh	r9,0x3e54
8002db24:	04 9a       	mov	r10,r2
8002db26:	06 9b       	mov	r11,r3
8002db28:	e0 a0 0f 88 	rcall	8002fa38 <__avr32_f64_mul>
8002db2c:	04 98       	mov	r8,r2
8002db2e:	fa eb 00 04 	st.d	sp[4],r10
8002db32:	06 99       	mov	r9,r3
8002db34:	04 9a       	mov	r10,r2
8002db36:	06 9b       	mov	r11,r3
8002db38:	e0 a0 0f 80 	rcall	8002fa38 <__avr32_f64_mul>
8002db3c:	30 08       	mov	r8,0
8002db3e:	14 90       	mov	r0,r10
8002db40:	16 91       	mov	r1,r11
8002db42:	fc 19 bf d0 	movh	r9,0xbfd0
8002db46:	04 9a       	mov	r10,r2
8002db48:	06 9b       	mov	r11,r3
8002db4a:	e0 a0 0f 77 	rcall	8002fa38 <__avr32_f64_mul>
8002db4e:	e0 68 55 55 	mov	r8,21845
8002db52:	ea 18 55 55 	orh	r8,0x5555
8002db56:	e0 69 55 55 	mov	r9,21845
8002db5a:	ea 19 3f d5 	orh	r9,0x3fd5
8002db5e:	e0 a0 11 27 	rcall	8002fdac <__avr32_f64_add>
8002db62:	14 98       	mov	r8,r10
8002db64:	16 99       	mov	r9,r11
8002db66:	04 9a       	mov	r10,r2
8002db68:	06 9b       	mov	r11,r3
8002db6a:	e0 a0 0f 67 	rcall	8002fa38 <__avr32_f64_mul>
8002db6e:	14 98       	mov	r8,r10
8002db70:	16 99       	mov	r9,r11
8002db72:	30 0a       	mov	r10,0
8002db74:	fc 1b 3f e0 	movh	r11,0x3fe0
8002db78:	e0 a0 10 4c 	rcall	8002fc10 <__avr32_f64_sub>
8002db7c:	14 98       	mov	r8,r10
8002db7e:	16 99       	mov	r9,r11
8002db80:	00 9a       	mov	r10,r0
8002db82:	02 9b       	mov	r11,r1
8002db84:	e0 a0 0f 5a 	rcall	8002fa38 <__avr32_f64_mul>
8002db88:	e0 68 82 fe 	mov	r8,33534
8002db8c:	ea 18 65 2b 	orh	r8,0x652b
8002db90:	e0 69 15 47 	mov	r9,5447
8002db94:	ea 19 bf f7 	orh	r9,0xbff7
8002db98:	e0 a0 0f 50 	rcall	8002fa38 <__avr32_f64_mul>
8002db9c:	14 98       	mov	r8,r10
8002db9e:	16 99       	mov	r9,r11
8002dba0:	fa ea 00 04 	ld.d	r10,sp[4]
8002dba4:	e0 a0 11 04 	rcall	8002fdac <__avr32_f64_add>
8002dba8:	16 91       	mov	r1,r11
8002dbaa:	14 98       	mov	r8,r10
8002dbac:	14 90       	mov	r0,r10
8002dbae:	02 99       	mov	r9,r1
8002dbb0:	fa ea 00 0c 	ld.d	r10,sp[12]
8002dbb4:	e0 a0 10 fc 	rcall	8002fdac <__avr32_f64_add>
8002dbb8:	fa e8 00 0c 	ld.d	r8,sp[12]
8002dbbc:	16 93       	mov	r3,r11
8002dbbe:	30 02       	mov	r2,0
8002dbc0:	06 9b       	mov	r11,r3
8002dbc2:	04 9a       	mov	r10,r2
8002dbc4:	e0 a0 10 26 	rcall	8002fc10 <__avr32_f64_sub>
8002dbc8:	14 98       	mov	r8,r10
8002dbca:	16 99       	mov	r9,r11
8002dbcc:	00 9a       	mov	r10,r0
8002dbce:	02 9b       	mov	r11,r1
8002dbd0:	e0 8f 01 c6 	bral	8002df5c <__ieee754_pow+0x6d4>
8002dbd4:	ee 54 ff ff 	cp.w	r4,1048575
8002dbd8:	e0 8a 00 04 	brle	8002dbe0 <__ieee754_pow+0x358>
8002dbdc:	30 0c       	mov	r12,0
8002dbde:	c0 98       	rjmp	8002dbf0 <__ieee754_pow+0x368>
8002dbe0:	fc 19 43 40 	movh	r9,0x4340
8002dbe4:	30 08       	mov	r8,0
8002dbe6:	e0 a0 0f 29 	rcall	8002fa38 <__avr32_f64_mul>
8002dbea:	3c bc       	mov	r12,-53
8002dbec:	16 99       	mov	r9,r11
8002dbee:	12 94       	mov	r4,r9
8002dbf0:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002dbf4:	f8 cc 03 ff 	sub	r12,r12,1023
8002dbf8:	b5 44       	asr	r4,0x14
8002dbfa:	10 93       	mov	r3,r8
8002dbfc:	08 0c       	add	r12,r4
8002dbfe:	ea 13 3f f0 	orh	r3,0x3ff0
8002dc02:	e2 58 98 8e 	cp.w	r8,235662
8002dc06:	e0 8a 00 0c 	brle	8002dc1e <__ieee754_pow+0x396>
8002dc0a:	ea 58 b6 79 	cp.w	r8,767609
8002dc0e:	e0 89 00 04 	brgt	8002dc16 <__ieee754_pow+0x38e>
8002dc12:	30 14       	mov	r4,1
8002dc14:	c0 68       	rjmp	8002dc20 <__ieee754_pow+0x398>
8002dc16:	f0 68 00 00 	mov	r8,-1048576
8002dc1a:	2f fc       	sub	r12,-1
8002dc1c:	10 03       	add	r3,r8
8002dc1e:	30 04       	mov	r4,0
8002dc20:	14 98       	mov	r8,r10
8002dc22:	06 99       	mov	r9,r3
8002dc24:	4d ea       	lddpc	r10,8002dd9c <__ieee754_pow+0x514>
8002dc26:	50 0c       	stdsp	sp[0x0],r12
8002dc28:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002dc2c:	fa e9 00 14 	st.d	sp[20],r8
8002dc30:	fa e1 00 1c 	st.d	sp[28],r0
8002dc34:	00 98       	mov	r8,r0
8002dc36:	02 99       	mov	r9,r1
8002dc38:	fa ea 00 14 	ld.d	r10,sp[20]
8002dc3c:	e0 a0 0f ea 	rcall	8002fc10 <__avr32_f64_sub>
8002dc40:	fa e8 00 1c 	ld.d	r8,sp[28]
8002dc44:	fa eb 00 24 	st.d	sp[36],r10
8002dc48:	fa ea 00 14 	ld.d	r10,sp[20]
8002dc4c:	e0 a0 10 b0 	rcall	8002fdac <__avr32_f64_add>
8002dc50:	14 98       	mov	r8,r10
8002dc52:	16 99       	mov	r9,r11
8002dc54:	30 0a       	mov	r10,0
8002dc56:	fc 1b 3f f0 	movh	r11,0x3ff0
8002dc5a:	e0 a0 12 35 	rcall	800300c4 <__avr32_f64_div>
8002dc5e:	14 98       	mov	r8,r10
8002dc60:	16 99       	mov	r9,r11
8002dc62:	fa eb 00 2c 	st.d	sp[44],r10
8002dc66:	fa ea 00 24 	ld.d	r10,sp[36]
8002dc6a:	e0 a0 0e e7 	rcall	8002fa38 <__avr32_f64_mul>
8002dc6e:	30 09       	mov	r9,0
8002dc70:	fa eb 00 0c 	st.d	sp[12],r10
8002dc74:	fa eb 00 04 	st.d	sp[4],r10
8002dc78:	a1 53       	asr	r3,0x1
8002dc7a:	30 0a       	mov	r10,0
8002dc7c:	bd b3       	sbr	r3,0x1d
8002dc7e:	e8 08 15 12 	lsl	r8,r4,0x12
8002dc82:	f8 28 00 00 	sub	r8,-524288
8002dc86:	f0 03 00 0b 	add	r11,r8,r3
8002dc8a:	50 49       	stdsp	sp[0x10],r9
8002dc8c:	14 92       	mov	r2,r10
8002dc8e:	fa e0 00 0c 	ld.d	r0,sp[12]
8002dc92:	16 93       	mov	r3,r11
8002dc94:	14 98       	mov	r8,r10
8002dc96:	16 99       	mov	r9,r11
8002dc98:	00 9a       	mov	r10,r0
8002dc9a:	02 9b       	mov	r11,r1
8002dc9c:	e0 a0 0e ce 	rcall	8002fa38 <__avr32_f64_mul>
8002dca0:	14 98       	mov	r8,r10
8002dca2:	16 99       	mov	r9,r11
8002dca4:	fa ea 00 24 	ld.d	r10,sp[36]
8002dca8:	e0 a0 0f b4 	rcall	8002fc10 <__avr32_f64_sub>
8002dcac:	fa e8 00 1c 	ld.d	r8,sp[28]
8002dcb0:	fa eb 00 24 	st.d	sp[36],r10
8002dcb4:	04 9a       	mov	r10,r2
8002dcb6:	06 9b       	mov	r11,r3
8002dcb8:	e0 a0 0f ac 	rcall	8002fc10 <__avr32_f64_sub>
8002dcbc:	14 98       	mov	r8,r10
8002dcbe:	16 99       	mov	r9,r11
8002dcc0:	fa ea 00 14 	ld.d	r10,sp[20]
8002dcc4:	e0 a0 0f a6 	rcall	8002fc10 <__avr32_f64_sub>
8002dcc8:	14 98       	mov	r8,r10
8002dcca:	16 99       	mov	r9,r11
8002dccc:	00 9a       	mov	r10,r0
8002dcce:	02 9b       	mov	r11,r1
8002dcd0:	e0 a0 0e b4 	rcall	8002fa38 <__avr32_f64_mul>
8002dcd4:	14 98       	mov	r8,r10
8002dcd6:	16 99       	mov	r9,r11
8002dcd8:	fa ea 00 24 	ld.d	r10,sp[36]
8002dcdc:	e0 a0 0f 9a 	rcall	8002fc10 <__avr32_f64_sub>
8002dce0:	14 98       	mov	r8,r10
8002dce2:	16 99       	mov	r9,r11
8002dce4:	fa ea 00 2c 	ld.d	r10,sp[44]
8002dce8:	e0 a0 0e a8 	rcall	8002fa38 <__avr32_f64_mul>
8002dcec:	fa e8 00 04 	ld.d	r8,sp[4]
8002dcf0:	fa eb 00 14 	st.d	sp[20],r10
8002dcf4:	10 9a       	mov	r10,r8
8002dcf6:	12 9b       	mov	r11,r9
8002dcf8:	e0 a0 0e a0 	rcall	8002fa38 <__avr32_f64_mul>
8002dcfc:	16 93       	mov	r3,r11
8002dcfe:	14 92       	mov	r2,r10
8002dd00:	06 99       	mov	r9,r3
8002dd02:	14 98       	mov	r8,r10
8002dd04:	e0 a0 0e 9a 	rcall	8002fa38 <__avr32_f64_mul>
8002dd08:	e0 68 4e ef 	mov	r8,20207
8002dd0c:	ea 18 4a 45 	orh	r8,0x4a45
8002dd10:	fa eb 00 1c 	st.d	sp[28],r10
8002dd14:	e0 69 7e 28 	mov	r9,32296
8002dd18:	ea 19 3f ca 	orh	r9,0x3fca
8002dd1c:	04 9a       	mov	r10,r2
8002dd1e:	06 9b       	mov	r11,r3
8002dd20:	e0 a0 0e 8c 	rcall	8002fa38 <__avr32_f64_mul>
8002dd24:	e0 68 db 65 	mov	r8,56165
8002dd28:	ea 18 93 c9 	orh	r8,0x93c9
8002dd2c:	e0 69 86 4a 	mov	r9,34378
8002dd30:	ea 19 3f cd 	orh	r9,0x3fcd
8002dd34:	e0 a0 10 3c 	rcall	8002fdac <__avr32_f64_add>
8002dd38:	14 98       	mov	r8,r10
8002dd3a:	16 99       	mov	r9,r11
8002dd3c:	04 9a       	mov	r10,r2
8002dd3e:	06 9b       	mov	r11,r3
8002dd40:	e0 a0 0e 7c 	rcall	8002fa38 <__avr32_f64_mul>
8002dd44:	e0 68 41 01 	mov	r8,16641
8002dd48:	ea 18 a9 1d 	orh	r8,0xa91d
8002dd4c:	e0 69 74 60 	mov	r9,29792
8002dd50:	ea 19 3f d1 	orh	r9,0x3fd1
8002dd54:	e0 a0 10 2c 	rcall	8002fdac <__avr32_f64_add>
8002dd58:	14 98       	mov	r8,r10
8002dd5a:	16 99       	mov	r9,r11
8002dd5c:	04 9a       	mov	r10,r2
8002dd5e:	06 9b       	mov	r11,r3
8002dd60:	e0 a0 0e 6c 	rcall	8002fa38 <__avr32_f64_mul>
8002dd64:	e0 68 26 4d 	mov	r8,9805
8002dd68:	ea 18 51 8f 	orh	r8,0x518f
8002dd6c:	e0 69 55 55 	mov	r9,21845
8002dd70:	ea 19 3f d5 	orh	r9,0x3fd5
8002dd74:	e0 a0 10 1c 	rcall	8002fdac <__avr32_f64_add>
8002dd78:	14 98       	mov	r8,r10
8002dd7a:	16 99       	mov	r9,r11
8002dd7c:	04 9a       	mov	r10,r2
8002dd7e:	06 9b       	mov	r11,r3
8002dd80:	e0 a0 0e 5c 	rcall	8002fa38 <__avr32_f64_mul>
8002dd84:	e0 68 ab ff 	mov	r8,44031
8002dd88:	ea 18 db 6f 	orh	r8,0xdb6f
8002dd8c:	e0 69 6d b6 	mov	r9,28086
8002dd90:	ea 19 3f db 	orh	r9,0x3fdb
8002dd94:	e0 a0 10 0c 	rcall	8002fdac <__avr32_f64_add>
8002dd98:	c0 48       	rjmp	8002dda0 <__ieee754_pow+0x518>
8002dd9a:	d7 03       	nop
8002dd9c:	80 03       	ld.sh	r3,r0[0x0]
8002dd9e:	11 a8       	ld.ub	r8,r8[0x2]
8002dda0:	14 98       	mov	r8,r10
8002dda2:	16 99       	mov	r9,r11
8002dda4:	04 9a       	mov	r10,r2
8002dda6:	06 9b       	mov	r11,r3
8002dda8:	e0 a0 0e 48 	rcall	8002fa38 <__avr32_f64_mul>
8002ddac:	e0 68 33 03 	mov	r8,13059
8002ddb0:	ea 18 33 33 	orh	r8,0x3333
8002ddb4:	e0 69 33 33 	mov	r9,13107
8002ddb8:	ea 19 3f e3 	orh	r9,0x3fe3
8002ddbc:	e0 a0 0f f8 	rcall	8002fdac <__avr32_f64_add>
8002ddc0:	14 98       	mov	r8,r10
8002ddc2:	16 99       	mov	r9,r11
8002ddc4:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ddc8:	e0 a0 0e 38 	rcall	8002fa38 <__avr32_f64_mul>
8002ddcc:	fa e8 00 04 	ld.d	r8,sp[4]
8002ddd0:	14 92       	mov	r2,r10
8002ddd2:	16 93       	mov	r3,r11
8002ddd4:	00 9a       	mov	r10,r0
8002ddd6:	02 9b       	mov	r11,r1
8002ddd8:	e0 a0 0f ea 	rcall	8002fdac <__avr32_f64_add>
8002dddc:	14 98       	mov	r8,r10
8002ddde:	16 99       	mov	r9,r11
8002dde0:	fa ea 00 14 	ld.d	r10,sp[20]
8002dde4:	e0 a0 0e 2a 	rcall	8002fa38 <__avr32_f64_mul>
8002dde8:	14 98       	mov	r8,r10
8002ddea:	16 99       	mov	r9,r11
8002ddec:	04 9a       	mov	r10,r2
8002ddee:	06 9b       	mov	r11,r3
8002ddf0:	e0 a0 0f de 	rcall	8002fdac <__avr32_f64_add>
8002ddf4:	00 98       	mov	r8,r0
8002ddf6:	fa eb 00 1c 	st.d	sp[28],r10
8002ddfa:	02 99       	mov	r9,r1
8002ddfc:	00 9a       	mov	r10,r0
8002ddfe:	02 9b       	mov	r11,r1
8002de00:	e0 a0 0e 1c 	rcall	8002fa38 <__avr32_f64_mul>
8002de04:	30 08       	mov	r8,0
8002de06:	fc 19 40 08 	movh	r9,0x4008
8002de0a:	fa eb 00 2c 	st.d	sp[44],r10
8002de0e:	e0 a0 0f cf 	rcall	8002fdac <__avr32_f64_add>
8002de12:	fa e8 00 1c 	ld.d	r8,sp[28]
8002de16:	e0 a0 0f cb 	rcall	8002fdac <__avr32_f64_add>
8002de1a:	40 48       	lddsp	r8,sp[0x10]
8002de1c:	16 93       	mov	r3,r11
8002de1e:	10 92       	mov	r2,r8
8002de20:	06 99       	mov	r9,r3
8002de22:	00 9a       	mov	r10,r0
8002de24:	02 9b       	mov	r11,r1
8002de26:	e0 a0 0e 09 	rcall	8002fa38 <__avr32_f64_mul>
8002de2a:	04 98       	mov	r8,r2
8002de2c:	06 99       	mov	r9,r3
8002de2e:	fa eb 00 24 	st.d	sp[36],r10
8002de32:	fa ea 00 14 	ld.d	r10,sp[20]
8002de36:	e0 a0 0e 01 	rcall	8002fa38 <__avr32_f64_mul>
8002de3a:	30 08       	mov	r8,0
8002de3c:	14 90       	mov	r0,r10
8002de3e:	16 91       	mov	r1,r11
8002de40:	04 9a       	mov	r10,r2
8002de42:	06 9b       	mov	r11,r3
8002de44:	fc 19 40 08 	movh	r9,0x4008
8002de48:	e0 a0 0e e4 	rcall	8002fc10 <__avr32_f64_sub>
8002de4c:	fa e8 00 2c 	ld.d	r8,sp[44]
8002de50:	e0 a0 0e e0 	rcall	8002fc10 <__avr32_f64_sub>
8002de54:	14 98       	mov	r8,r10
8002de56:	16 99       	mov	r9,r11
8002de58:	fa ea 00 1c 	ld.d	r10,sp[28]
8002de5c:	e0 a0 0e da 	rcall	8002fc10 <__avr32_f64_sub>
8002de60:	fa e8 00 04 	ld.d	r8,sp[4]
8002de64:	e0 a0 0d ea 	rcall	8002fa38 <__avr32_f64_mul>
8002de68:	14 98       	mov	r8,r10
8002de6a:	16 99       	mov	r9,r11
8002de6c:	00 9a       	mov	r10,r0
8002de6e:	02 9b       	mov	r11,r1
8002de70:	e0 a0 0f 9e 	rcall	8002fdac <__avr32_f64_add>
8002de74:	16 91       	mov	r1,r11
8002de76:	14 90       	mov	r0,r10
8002de78:	14 98       	mov	r8,r10
8002de7a:	02 99       	mov	r9,r1
8002de7c:	fa ea 00 24 	ld.d	r10,sp[36]
8002de80:	e0 a0 0f 96 	rcall	8002fdac <__avr32_f64_add>
8002de84:	40 4e       	lddsp	lr,sp[0x10]
8002de86:	16 93       	mov	r3,r11
8002de88:	1c 92       	mov	r2,lr
8002de8a:	1c 9a       	mov	r10,lr
8002de8c:	fc 18 e0 00 	movh	r8,0xe000
8002de90:	e0 69 c7 09 	mov	r9,50953
8002de94:	ea 19 3f ee 	orh	r9,0x3fee
8002de98:	06 9b       	mov	r11,r3
8002de9a:	e0 a0 0d cf 	rcall	8002fa38 <__avr32_f64_mul>
8002de9e:	e0 68 01 f5 	mov	r8,501
8002dea2:	ea 18 14 5b 	orh	r8,0x145b
8002dea6:	fa eb 00 14 	st.d	sp[20],r10
8002deaa:	e0 69 2f e0 	mov	r9,12256
8002deae:	ea 19 be 3e 	orh	r9,0xbe3e
8002deb2:	04 9a       	mov	r10,r2
8002deb4:	06 9b       	mov	r11,r3
8002deb6:	e0 a0 0d c1 	rcall	8002fa38 <__avr32_f64_mul>
8002deba:	fa e8 00 24 	ld.d	r8,sp[36]
8002debe:	fa eb 00 04 	st.d	sp[4],r10
8002dec2:	04 9a       	mov	r10,r2
8002dec4:	06 9b       	mov	r11,r3
8002dec6:	e0 a0 0e a5 	rcall	8002fc10 <__avr32_f64_sub>
8002deca:	14 98       	mov	r8,r10
8002decc:	16 99       	mov	r9,r11
8002dece:	00 9a       	mov	r10,r0
8002ded0:	02 9b       	mov	r11,r1
8002ded2:	e0 a0 0e 9f 	rcall	8002fc10 <__avr32_f64_sub>
8002ded6:	e0 68 03 fd 	mov	r8,1021
8002deda:	ea 18 dc 3a 	orh	r8,0xdc3a
8002dede:	e0 69 c7 09 	mov	r9,50953
8002dee2:	ea 19 3f ee 	orh	r9,0x3fee
8002dee6:	e0 a0 0d a9 	rcall	8002fa38 <__avr32_f64_mul>
8002deea:	14 98       	mov	r8,r10
8002deec:	16 99       	mov	r9,r11
8002deee:	fa ea 00 04 	ld.d	r10,sp[4]
8002def2:	e0 a0 0f 5d 	rcall	8002fdac <__avr32_f64_add>
8002def6:	4a 18       	lddpc	r8,8002df78 <__ieee754_pow+0x6f0>
8002def8:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002defc:	e0 a0 0f 58 	rcall	8002fdac <__avr32_f64_add>
8002df00:	40 0c       	lddsp	r12,sp[0x0]
8002df02:	fa eb 00 1c 	st.d	sp[28],r10
8002df06:	e0 a0 0f f4 	rcall	8002feee <__avr32_s32_to_f64>
8002df0a:	49 d8       	lddpc	r8,8002df7c <__ieee754_pow+0x6f4>
8002df0c:	14 90       	mov	r0,r10
8002df0e:	16 91       	mov	r1,r11
8002df10:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002df14:	fa e8 00 1c 	ld.d	r8,sp[28]
8002df18:	fa eb 00 04 	st.d	sp[4],r10
8002df1c:	fa ea 00 14 	ld.d	r10,sp[20]
8002df20:	e0 a0 0f 46 	rcall	8002fdac <__avr32_f64_add>
8002df24:	fa e8 00 04 	ld.d	r8,sp[4]
8002df28:	e0 a0 0f 42 	rcall	8002fdac <__avr32_f64_add>
8002df2c:	00 98       	mov	r8,r0
8002df2e:	02 99       	mov	r9,r1
8002df30:	e0 a0 0f 3e 	rcall	8002fdac <__avr32_f64_add>
8002df34:	00 98       	mov	r8,r0
8002df36:	02 99       	mov	r9,r1
8002df38:	40 4a       	lddsp	r10,sp[0x10]
8002df3a:	16 93       	mov	r3,r11
8002df3c:	14 92       	mov	r2,r10
8002df3e:	06 9b       	mov	r11,r3
8002df40:	e0 a0 0e 68 	rcall	8002fc10 <__avr32_f64_sub>
8002df44:	fa e8 00 04 	ld.d	r8,sp[4]
8002df48:	e0 a0 0e 64 	rcall	8002fc10 <__avr32_f64_sub>
8002df4c:	fa e8 00 14 	ld.d	r8,sp[20]
8002df50:	e0 a0 0e 60 	rcall	8002fc10 <__avr32_f64_sub>
8002df54:	14 98       	mov	r8,r10
8002df56:	16 99       	mov	r9,r11
8002df58:	fa ea 00 1c 	ld.d	r10,sp[28]
8002df5c:	e0 a0 0e 5a 	rcall	8002fc10 <__avr32_f64_sub>
8002df60:	20 15       	sub	r5,1
8002df62:	40 d9       	lddsp	r9,sp[0x34]
8002df64:	14 90       	mov	r0,r10
8002df66:	16 91       	mov	r1,r11
8002df68:	12 45       	or	r5,r9
8002df6a:	c0 b0       	breq	8002df80 <__ieee754_pow+0x6f8>
8002df6c:	30 04       	mov	r4,0
8002df6e:	fc 15 3f f0 	movh	r5,0x3ff0
8002df72:	fa e5 00 0c 	st.d	sp[12],r4
8002df76:	c0 a8       	rjmp	8002df8a <__ieee754_pow+0x702>
8002df78:	80 03       	ld.sh	r3,r0[0x0]
8002df7a:	11 98       	ld.ub	r8,r8[0x1]
8002df7c:	80 03       	ld.sh	r3,r0[0x0]
8002df7e:	11 88       	ld.ub	r8,r8[0x0]
8002df80:	30 0a       	mov	r10,0
8002df82:	fc 1b bf f0 	movh	r11,0xbff0
8002df86:	fa eb 00 0c 	st.d	sp[12],r10
8002df8a:	0e 99       	mov	r9,r7
8002df8c:	30 08       	mov	r8,0
8002df8e:	0e 9b       	mov	r11,r7
8002df90:	fa e9 00 04 	st.d	sp[4],r8
8002df94:	0c 9a       	mov	r10,r6
8002df96:	e0 a0 0e 3d 	rcall	8002fc10 <__avr32_f64_sub>
8002df9a:	04 98       	mov	r8,r2
8002df9c:	06 99       	mov	r9,r3
8002df9e:	e0 a0 0d 4d 	rcall	8002fa38 <__avr32_f64_mul>
8002dfa2:	00 98       	mov	r8,r0
8002dfa4:	14 94       	mov	r4,r10
8002dfa6:	16 95       	mov	r5,r11
8002dfa8:	02 99       	mov	r9,r1
8002dfaa:	0e 9b       	mov	r11,r7
8002dfac:	0c 9a       	mov	r10,r6
8002dfae:	e0 a0 0d 45 	rcall	8002fa38 <__avr32_f64_mul>
8002dfb2:	14 98       	mov	r8,r10
8002dfb4:	16 99       	mov	r9,r11
8002dfb6:	08 9a       	mov	r10,r4
8002dfb8:	0a 9b       	mov	r11,r5
8002dfba:	e0 a0 0e f9 	rcall	8002fdac <__avr32_f64_add>
8002dfbe:	04 98       	mov	r8,r2
8002dfc0:	06 99       	mov	r9,r3
8002dfc2:	14 90       	mov	r0,r10
8002dfc4:	16 91       	mov	r1,r11
8002dfc6:	fa ea 00 04 	ld.d	r10,sp[4]
8002dfca:	e0 a0 0d 37 	rcall	8002fa38 <__avr32_f64_mul>
8002dfce:	14 94       	mov	r4,r10
8002dfd0:	16 95       	mov	r5,r11
8002dfd2:	08 98       	mov	r8,r4
8002dfd4:	00 9a       	mov	r10,r0
8002dfd6:	02 9b       	mov	r11,r1
8002dfd8:	0a 99       	mov	r9,r5
8002dfda:	fa e5 00 04 	st.d	sp[4],r4
8002dfde:	e0 a0 0e e7 	rcall	8002fdac <__avr32_f64_add>
8002dfe2:	e0 6e ff ff 	mov	lr,65535
8002dfe6:	ea 1e 40 8f 	orh	lr,0x408f
8002dfea:	16 93       	mov	r3,r11
8002dfec:	14 92       	mov	r2,r10
8002dfee:	06 97       	mov	r7,r3
8002dff0:	06 98       	mov	r8,r3
8002dff2:	1c 33       	cp.w	r3,lr
8002dff4:	e0 8a 00 36 	brle	8002e060 <__ieee754_pow+0x7d8>
8002dff8:	fc 1a bf 70 	movh	r10,0xbf70
8002dffc:	14 08       	add	r8,r10
8002dffe:	f1 e2 10 09 	or	r9,r8,r2
8002e002:	c1 a1       	brne	8002e036 <__ieee754_pow+0x7ae>
8002e004:	e0 68 82 fe 	mov	r8,33534
8002e008:	ea 18 65 2b 	orh	r8,0x652b
8002e00c:	e0 69 15 47 	mov	r9,5447
8002e010:	ea 19 3c 97 	orh	r9,0x3c97
8002e014:	00 9a       	mov	r10,r0
8002e016:	02 9b       	mov	r11,r1
8002e018:	e0 a0 0e ca 	rcall	8002fdac <__avr32_f64_add>
8002e01c:	08 98       	mov	r8,r4
8002e01e:	fa eb 00 14 	st.d	sp[20],r10
8002e022:	0a 99       	mov	r9,r5
8002e024:	04 9a       	mov	r10,r2
8002e026:	06 9b       	mov	r11,r3
8002e028:	e0 a0 0d f4 	rcall	8002fc10 <__avr32_f64_sub>
8002e02c:	fa e8 00 14 	ld.d	r8,sp[20]
8002e030:	e0 a0 10 16 	rcall	8003005c <__avr32_f64_cmp_lt>
8002e034:	c4 40       	breq	8002e0bc <__ieee754_pow+0x834>
8002e036:	e0 68 75 9c 	mov	r8,30108
8002e03a:	ea 18 88 00 	orh	r8,0x8800
8002e03e:	e0 69 e4 3c 	mov	r9,58428
8002e042:	ea 19 7e 37 	orh	r9,0x7e37
8002e046:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e04a:	e0 a0 0c f7 	rcall	8002fa38 <__avr32_f64_mul>
8002e04e:	e0 68 75 9c 	mov	r8,30108
8002e052:	ea 18 88 00 	orh	r8,0x8800
8002e056:	e0 69 e4 3c 	mov	r9,58428
8002e05a:	ea 19 7e 37 	orh	r9,0x7e37
8002e05e:	c5 59       	rjmp	8002e308 <__ieee754_pow+0xa80>
8002e060:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002e064:	e0 6e cb ff 	mov	lr,52223
8002e068:	ea 1e 40 90 	orh	lr,0x4090
8002e06c:	1c 3c       	cp.w	r12,lr
8002e06e:	e0 8a 00 27 	brle	8002e0bc <__ieee754_pow+0x834>
8002e072:	e0 6c 34 00 	mov	r12,13312
8002e076:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002e07a:	18 08       	add	r8,r12
8002e07c:	14 48       	or	r8,r10
8002e07e:	c0 a1       	brne	8002e092 <__ieee754_pow+0x80a>
8002e080:	08 98       	mov	r8,r4
8002e082:	0a 99       	mov	r9,r5
8002e084:	e0 a0 0d c6 	rcall	8002fc10 <__avr32_f64_sub>
8002e088:	00 98       	mov	r8,r0
8002e08a:	02 99       	mov	r9,r1
8002e08c:	e0 a0 0f b4 	rcall	8002fff4 <__avr32_f64_cmp_ge>
8002e090:	c1 60       	breq	8002e0bc <__ieee754_pow+0x834>
8002e092:	e0 68 f3 59 	mov	r8,62297
8002e096:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e09a:	e0 69 6e 1f 	mov	r9,28191
8002e09e:	ea 19 01 a5 	orh	r9,0x1a5
8002e0a2:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e0a6:	e0 a0 0c c9 	rcall	8002fa38 <__avr32_f64_mul>
8002e0aa:	e0 68 f3 59 	mov	r8,62297
8002e0ae:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e0b2:	e0 69 6e 1f 	mov	r9,28191
8002e0b6:	ea 19 01 a5 	orh	r9,0x1a5
8002e0ba:	c2 79       	rjmp	8002e308 <__ieee754_pow+0xa80>
8002e0bc:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002e0c0:	fc 1c 3f e0 	movh	r12,0x3fe0
8002e0c4:	18 38       	cp.w	r8,r12
8002e0c6:	e0 89 00 04 	brgt	8002e0ce <__ieee754_pow+0x846>
8002e0ca:	30 06       	mov	r6,0
8002e0cc:	c2 78       	rjmp	8002e11a <__ieee754_pow+0x892>
8002e0ce:	fc 19 00 10 	movh	r9,0x10
8002e0d2:	b5 48       	asr	r8,0x14
8002e0d4:	f0 c8 03 fe 	sub	r8,r8,1022
8002e0d8:	f2 08 08 48 	asr	r8,r9,r8
8002e0dc:	0e 08       	add	r8,r7
8002e0de:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002e0e2:	b5 a9       	sbr	r9,0x14
8002e0e4:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002e0e8:	30 0a       	mov	r10,0
8002e0ea:	f8 cc 03 ff 	sub	r12,r12,1023
8002e0ee:	f8 06 11 14 	rsub	r6,r12,20
8002e0f2:	f2 06 08 46 	asr	r6,r9,r6
8002e0f6:	ee 79 ff ff 	mov	r9,1048575
8002e0fa:	f2 0c 08 4c 	asr	r12,r9,r12
8002e0fe:	5c dc       	com	r12
8002e100:	f9 e8 00 0b 	and	r11,r12,r8
8002e104:	58 07       	cp.w	r7,0
8002e106:	fb b6 05 00 	rsublt	r6,0
8002e10a:	14 98       	mov	r8,r10
8002e10c:	16 99       	mov	r9,r11
8002e10e:	08 9a       	mov	r10,r4
8002e110:	0a 9b       	mov	r11,r5
8002e112:	e0 a0 0d 7f 	rcall	8002fc10 <__avr32_f64_sub>
8002e116:	fa eb 00 04 	st.d	sp[4],r10
8002e11a:	fa e8 00 04 	ld.d	r8,sp[4]
8002e11e:	00 9a       	mov	r10,r0
8002e120:	02 9b       	mov	r11,r1
8002e122:	e0 a0 0e 45 	rcall	8002fdac <__avr32_f64_add>
8002e126:	30 04       	mov	r4,0
8002e128:	16 95       	mov	r5,r11
8002e12a:	30 08       	mov	r8,0
8002e12c:	e0 69 2e 43 	mov	r9,11843
8002e130:	ea 19 3f e6 	orh	r9,0x3fe6
8002e134:	08 9a       	mov	r10,r4
8002e136:	0a 9b       	mov	r11,r5
8002e138:	e0 a0 0c 80 	rcall	8002fa38 <__avr32_f64_mul>
8002e13c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e140:	fa eb 00 14 	st.d	sp[20],r10
8002e144:	08 9a       	mov	r10,r4
8002e146:	0a 9b       	mov	r11,r5
8002e148:	e0 a0 0d 64 	rcall	8002fc10 <__avr32_f64_sub>
8002e14c:	14 98       	mov	r8,r10
8002e14e:	16 99       	mov	r9,r11
8002e150:	00 9a       	mov	r10,r0
8002e152:	02 9b       	mov	r11,r1
8002e154:	e0 a0 0d 5e 	rcall	8002fc10 <__avr32_f64_sub>
8002e158:	e0 68 39 ef 	mov	r8,14831
8002e15c:	ea 18 fe fa 	orh	r8,0xfefa
8002e160:	e0 69 2e 42 	mov	r9,11842
8002e164:	ea 19 3f e6 	orh	r9,0x3fe6
8002e168:	e0 a0 0c 68 	rcall	8002fa38 <__avr32_f64_mul>
8002e16c:	e0 68 6c 39 	mov	r8,27705
8002e170:	ea 18 0c a8 	orh	r8,0xca8
8002e174:	14 92       	mov	r2,r10
8002e176:	16 93       	mov	r3,r11
8002e178:	08 9a       	mov	r10,r4
8002e17a:	0a 9b       	mov	r11,r5
8002e17c:	e0 69 5c 61 	mov	r9,23649
8002e180:	ea 19 be 20 	orh	r9,0xbe20
8002e184:	e0 a0 0c 5a 	rcall	8002fa38 <__avr32_f64_mul>
8002e188:	14 98       	mov	r8,r10
8002e18a:	16 99       	mov	r9,r11
8002e18c:	04 9a       	mov	r10,r2
8002e18e:	06 9b       	mov	r11,r3
8002e190:	e0 a0 0e 0e 	rcall	8002fdac <__avr32_f64_add>
8002e194:	16 93       	mov	r3,r11
8002e196:	14 92       	mov	r2,r10
8002e198:	14 98       	mov	r8,r10
8002e19a:	06 99       	mov	r9,r3
8002e19c:	fa ea 00 14 	ld.d	r10,sp[20]
8002e1a0:	e0 a0 0e 06 	rcall	8002fdac <__avr32_f64_add>
8002e1a4:	fa e8 00 14 	ld.d	r8,sp[20]
8002e1a8:	14 94       	mov	r4,r10
8002e1aa:	16 95       	mov	r5,r11
8002e1ac:	e0 a0 0d 32 	rcall	8002fc10 <__avr32_f64_sub>
8002e1b0:	14 98       	mov	r8,r10
8002e1b2:	16 99       	mov	r9,r11
8002e1b4:	04 9a       	mov	r10,r2
8002e1b6:	06 9b       	mov	r11,r3
8002e1b8:	e0 a0 0d 2c 	rcall	8002fc10 <__avr32_f64_sub>
8002e1bc:	08 98       	mov	r8,r4
8002e1be:	fa eb 00 04 	st.d	sp[4],r10
8002e1c2:	0a 99       	mov	r9,r5
8002e1c4:	08 9a       	mov	r10,r4
8002e1c6:	0a 9b       	mov	r11,r5
8002e1c8:	e0 a0 0c 38 	rcall	8002fa38 <__avr32_f64_mul>
8002e1cc:	e0 68 a4 d0 	mov	r8,42192
8002e1d0:	ea 18 72 be 	orh	r8,0x72be
8002e1d4:	14 92       	mov	r2,r10
8002e1d6:	16 93       	mov	r3,r11
8002e1d8:	e0 69 37 69 	mov	r9,14185
8002e1dc:	ea 19 3e 66 	orh	r9,0x3e66
8002e1e0:	e0 a0 0c 2c 	rcall	8002fa38 <__avr32_f64_mul>
8002e1e4:	e0 68 6b f1 	mov	r8,27633
8002e1e8:	ea 18 c5 d2 	orh	r8,0xc5d2
8002e1ec:	e0 69 bd 41 	mov	r9,48449
8002e1f0:	ea 19 3e bb 	orh	r9,0x3ebb
8002e1f4:	e0 a0 0d 0e 	rcall	8002fc10 <__avr32_f64_sub>
8002e1f8:	14 98       	mov	r8,r10
8002e1fa:	16 99       	mov	r9,r11
8002e1fc:	04 9a       	mov	r10,r2
8002e1fe:	06 9b       	mov	r11,r3
8002e200:	e0 a0 0c 1c 	rcall	8002fa38 <__avr32_f64_mul>
8002e204:	e0 68 de 2c 	mov	r8,56876
8002e208:	ea 18 af 25 	orh	r8,0xaf25
8002e20c:	e0 69 56 6a 	mov	r9,22122
8002e210:	ea 19 3f 11 	orh	r9,0x3f11
8002e214:	e0 a0 0d cc 	rcall	8002fdac <__avr32_f64_add>
8002e218:	14 98       	mov	r8,r10
8002e21a:	16 99       	mov	r9,r11
8002e21c:	04 9a       	mov	r10,r2
8002e21e:	06 9b       	mov	r11,r3
8002e220:	e0 a0 0c 0c 	rcall	8002fa38 <__avr32_f64_mul>
8002e224:	e0 68 bd 93 	mov	r8,48531
8002e228:	ea 18 16 be 	orh	r8,0x16be
8002e22c:	e0 69 c1 6c 	mov	r9,49516
8002e230:	ea 19 3f 66 	orh	r9,0x3f66
8002e234:	e0 a0 0c ee 	rcall	8002fc10 <__avr32_f64_sub>
8002e238:	14 98       	mov	r8,r10
8002e23a:	16 99       	mov	r9,r11
8002e23c:	04 9a       	mov	r10,r2
8002e23e:	06 9b       	mov	r11,r3
8002e240:	e0 a0 0b fc 	rcall	8002fa38 <__avr32_f64_mul>
8002e244:	e0 68 55 3e 	mov	r8,21822
8002e248:	ea 18 55 55 	orh	r8,0x5555
8002e24c:	e0 69 55 55 	mov	r9,21845
8002e250:	ea 19 3f c5 	orh	r9,0x3fc5
8002e254:	e0 a0 0d ac 	rcall	8002fdac <__avr32_f64_add>
8002e258:	14 98       	mov	r8,r10
8002e25a:	16 99       	mov	r9,r11
8002e25c:	04 9a       	mov	r10,r2
8002e25e:	06 9b       	mov	r11,r3
8002e260:	e0 a0 0b ec 	rcall	8002fa38 <__avr32_f64_mul>
8002e264:	14 98       	mov	r8,r10
8002e266:	16 99       	mov	r9,r11
8002e268:	08 9a       	mov	r10,r4
8002e26a:	0a 9b       	mov	r11,r5
8002e26c:	e0 a0 0c d2 	rcall	8002fc10 <__avr32_f64_sub>
8002e270:	16 93       	mov	r3,r11
8002e272:	14 92       	mov	r2,r10
8002e274:	14 98       	mov	r8,r10
8002e276:	06 99       	mov	r9,r3
8002e278:	08 9a       	mov	r10,r4
8002e27a:	0a 9b       	mov	r11,r5
8002e27c:	e0 a0 0b de 	rcall	8002fa38 <__avr32_f64_mul>
8002e280:	30 08       	mov	r8,0
8002e282:	14 90       	mov	r0,r10
8002e284:	16 91       	mov	r1,r11
8002e286:	04 9a       	mov	r10,r2
8002e288:	06 9b       	mov	r11,r3
8002e28a:	fc 19 40 00 	movh	r9,0x4000
8002e28e:	e0 a0 0c c1 	rcall	8002fc10 <__avr32_f64_sub>
8002e292:	14 98       	mov	r8,r10
8002e294:	16 99       	mov	r9,r11
8002e296:	00 9a       	mov	r10,r0
8002e298:	02 9b       	mov	r11,r1
8002e29a:	e0 a0 0f 15 	rcall	800300c4 <__avr32_f64_div>
8002e29e:	fa e8 00 04 	ld.d	r8,sp[4]
8002e2a2:	14 92       	mov	r2,r10
8002e2a4:	16 93       	mov	r3,r11
8002e2a6:	08 9a       	mov	r10,r4
8002e2a8:	0a 9b       	mov	r11,r5
8002e2aa:	e0 a0 0b c7 	rcall	8002fa38 <__avr32_f64_mul>
8002e2ae:	14 98       	mov	r8,r10
8002e2b0:	16 99       	mov	r9,r11
8002e2b2:	fa ea 00 04 	ld.d	r10,sp[4]
8002e2b6:	e0 a0 0d 7b 	rcall	8002fdac <__avr32_f64_add>
8002e2ba:	14 98       	mov	r8,r10
8002e2bc:	16 99       	mov	r9,r11
8002e2be:	04 9a       	mov	r10,r2
8002e2c0:	06 9b       	mov	r11,r3
8002e2c2:	e0 a0 0c a7 	rcall	8002fc10 <__avr32_f64_sub>
8002e2c6:	08 98       	mov	r8,r4
8002e2c8:	0a 99       	mov	r9,r5
8002e2ca:	e0 a0 0c a3 	rcall	8002fc10 <__avr32_f64_sub>
8002e2ce:	14 98       	mov	r8,r10
8002e2d0:	16 99       	mov	r9,r11
8002e2d2:	30 0a       	mov	r10,0
8002e2d4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e2d8:	e0 a0 0c 9c 	rcall	8002fc10 <__avr32_f64_sub>
8002e2dc:	ec 0c 15 14 	lsl	r12,r6,0x14
8002e2e0:	16 95       	mov	r5,r11
8002e2e2:	14 94       	mov	r4,r10
8002e2e4:	f8 05 00 08 	add	r8,r12,r5
8002e2e8:	f0 09 14 14 	asr	r9,r8,0x14
8002e2ec:	58 09       	cp.w	r9,0
8002e2ee:	e0 89 00 08 	brgt	8002e2fe <__ieee754_pow+0xa76>
8002e2f2:	0c 9c       	mov	r12,r6
8002e2f4:	e0 a0 0b 28 	rcall	8002f944 <scalbn>
8002e2f8:	14 98       	mov	r8,r10
8002e2fa:	16 99       	mov	r9,r11
8002e2fc:	c0 48       	rjmp	8002e304 <__ieee754_pow+0xa7c>
8002e2fe:	10 95       	mov	r5,r8
8002e300:	14 98       	mov	r8,r10
8002e302:	0a 99       	mov	r9,r5
8002e304:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e308:	e0 a0 0b 98 	rcall	8002fa38 <__avr32_f64_mul>
8002e30c:	16 97       	mov	r7,r11
8002e30e:	14 96       	mov	r6,r10
8002e310:	c0 78       	rjmp	8002e31e <__ieee754_pow+0xa96>
8002e312:	fc 17 3f f0 	movh	r7,0x3ff0
8002e316:	30 06       	mov	r6,0
8002e318:	c0 38       	rjmp	8002e31e <__ieee754_pow+0xa96>
8002e31a:	30 07       	mov	r7,0
8002e31c:	0e 96       	mov	r6,r7
8002e31e:	0e 9b       	mov	r11,r7
8002e320:	0c 9a       	mov	r10,r6
8002e322:	2f 2d       	sub	sp,-56
8002e324:	d8 32       	popm	r0-r7,pc
8002e326:	30 05       	mov	r5,0
8002e328:	fe 9f fb 2b 	bral	8002d97e <__ieee754_pow+0xf6>

8002e32c <__ieee754_rem_pio2>:
8002e32c:	d4 31       	pushm	r0-r7,lr
8002e32e:	20 ad       	sub	sp,40
8002e330:	50 3b       	stdsp	sp[0xc],r11
8002e332:	18 96       	mov	r6,r12
8002e334:	14 98       	mov	r8,r10
8002e336:	16 99       	mov	r9,r11
8002e338:	14 92       	mov	r2,r10
8002e33a:	16 93       	mov	r3,r11
8002e33c:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002e340:	e0 6c 21 fb 	mov	r12,8699
8002e344:	ea 1c 3f e9 	orh	r12,0x3fe9
8002e348:	18 35       	cp.w	r5,r12
8002e34a:	e0 89 00 0b 	brgt	8002e360 <__ieee754_rem_pio2+0x34>
8002e34e:	ec e9 00 00 	st.d	r6[0],r8
8002e352:	30 07       	mov	r7,0
8002e354:	30 08       	mov	r8,0
8002e356:	30 09       	mov	r9,0
8002e358:	ec e9 00 08 	st.d	r6[8],r8
8002e35c:	e0 8f 02 1a 	bral	8002e790 <__ieee754_rem_pio2+0x464>
8002e360:	e0 6c d9 7b 	mov	r12,55675
8002e364:	ea 1c 40 02 	orh	r12,0x4002
8002e368:	18 35       	cp.w	r5,r12
8002e36a:	e0 89 00 b6 	brgt	8002e4d6 <__ieee754_rem_pio2+0x1aa>
8002e36e:	58 0b       	cp.w	r11,0
8002e370:	e0 8a 00 59 	brle	8002e422 <__ieee754_rem_pio2+0xf6>
8002e374:	fc 18 54 40 	movh	r8,0x5440
8002e378:	e0 69 21 fb 	mov	r9,8699
8002e37c:	ea 19 3f f9 	orh	r9,0x3ff9
8002e380:	e0 a0 0c 48 	rcall	8002fc10 <__avr32_f64_sub>
8002e384:	e0 68 21 fb 	mov	r8,8699
8002e388:	ea 18 3f f9 	orh	r8,0x3ff9
8002e38c:	14 92       	mov	r2,r10
8002e38e:	16 93       	mov	r3,r11
8002e390:	10 35       	cp.w	r5,r8
8002e392:	c1 e0       	breq	8002e3ce <__ieee754_rem_pio2+0xa2>
8002e394:	e0 68 63 31 	mov	r8,25393
8002e398:	ea 18 1a 62 	orh	r8,0x1a62
8002e39c:	e0 69 b4 61 	mov	r9,46177
8002e3a0:	ea 19 3d d0 	orh	r9,0x3dd0
8002e3a4:	e0 a0 0c 36 	rcall	8002fc10 <__avr32_f64_sub>
8002e3a8:	14 94       	mov	r4,r10
8002e3aa:	16 95       	mov	r5,r11
8002e3ac:	08 98       	mov	r8,r4
8002e3ae:	0a 99       	mov	r9,r5
8002e3b0:	04 9a       	mov	r10,r2
8002e3b2:	06 9b       	mov	r11,r3
8002e3b4:	ec e5 00 00 	st.d	r6[0],r4
8002e3b8:	e0 a0 0c 2c 	rcall	8002fc10 <__avr32_f64_sub>
8002e3bc:	e0 68 63 31 	mov	r8,25393
8002e3c0:	ea 18 1a 62 	orh	r8,0x1a62
8002e3c4:	e0 69 b4 61 	mov	r9,46177
8002e3c8:	ea 19 3d d0 	orh	r9,0x3dd0
8002e3cc:	c2 78       	rjmp	8002e41a <__ieee754_rem_pio2+0xee>
8002e3ce:	fc 18 1a 60 	movh	r8,0x1a60
8002e3d2:	e0 69 b4 61 	mov	r9,46177
8002e3d6:	ea 19 3d d0 	orh	r9,0x3dd0
8002e3da:	e0 a0 0c 1b 	rcall	8002fc10 <__avr32_f64_sub>
8002e3de:	e0 68 70 73 	mov	r8,28787
8002e3e2:	ea 18 2e 03 	orh	r8,0x2e03
8002e3e6:	14 94       	mov	r4,r10
8002e3e8:	16 95       	mov	r5,r11
8002e3ea:	e0 69 19 8a 	mov	r9,6538
8002e3ee:	ea 19 3b a3 	orh	r9,0x3ba3
8002e3f2:	e0 a0 0c 0f 	rcall	8002fc10 <__avr32_f64_sub>
8002e3f6:	14 92       	mov	r2,r10
8002e3f8:	16 93       	mov	r3,r11
8002e3fa:	04 98       	mov	r8,r2
8002e3fc:	06 99       	mov	r9,r3
8002e3fe:	08 9a       	mov	r10,r4
8002e400:	0a 9b       	mov	r11,r5
8002e402:	ec e3 00 00 	st.d	r6[0],r2
8002e406:	e0 a0 0c 05 	rcall	8002fc10 <__avr32_f64_sub>
8002e40a:	e0 68 70 73 	mov	r8,28787
8002e40e:	ea 18 2e 03 	orh	r8,0x2e03
8002e412:	e0 69 19 8a 	mov	r9,6538
8002e416:	ea 19 3b a3 	orh	r9,0x3ba3
8002e41a:	30 17       	mov	r7,1
8002e41c:	e0 a0 0b fa 	rcall	8002fc10 <__avr32_f64_sub>
8002e420:	c3 08       	rjmp	8002e480 <__ieee754_rem_pio2+0x154>
8002e422:	fc 18 54 40 	movh	r8,0x5440
8002e426:	e0 69 21 fb 	mov	r9,8699
8002e42a:	ea 19 3f f9 	orh	r9,0x3ff9
8002e42e:	e0 a0 0c bf 	rcall	8002fdac <__avr32_f64_add>
8002e432:	e0 6c 21 fb 	mov	r12,8699
8002e436:	ea 1c 3f f9 	orh	r12,0x3ff9
8002e43a:	14 92       	mov	r2,r10
8002e43c:	16 93       	mov	r3,r11
8002e43e:	18 35       	cp.w	r5,r12
8002e440:	c2 40       	breq	8002e488 <__ieee754_rem_pio2+0x15c>
8002e442:	e0 68 63 31 	mov	r8,25393
8002e446:	ea 18 1a 62 	orh	r8,0x1a62
8002e44a:	e0 69 b4 61 	mov	r9,46177
8002e44e:	ea 19 3d d0 	orh	r9,0x3dd0
8002e452:	e0 a0 0c ad 	rcall	8002fdac <__avr32_f64_add>
8002e456:	14 94       	mov	r4,r10
8002e458:	16 95       	mov	r5,r11
8002e45a:	08 98       	mov	r8,r4
8002e45c:	0a 99       	mov	r9,r5
8002e45e:	04 9a       	mov	r10,r2
8002e460:	06 9b       	mov	r11,r3
8002e462:	ec e5 00 00 	st.d	r6[0],r4
8002e466:	e0 a0 0b d5 	rcall	8002fc10 <__avr32_f64_sub>
8002e46a:	e0 68 63 31 	mov	r8,25393
8002e46e:	ea 18 1a 62 	orh	r8,0x1a62
8002e472:	e0 69 b4 61 	mov	r9,46177
8002e476:	ea 19 3d d0 	orh	r9,0x3dd0
8002e47a:	3f f7       	mov	r7,-1
8002e47c:	e0 a0 0c 98 	rcall	8002fdac <__avr32_f64_add>
8002e480:	ec eb 00 08 	st.d	r6[8],r10
8002e484:	e0 8f 01 86 	bral	8002e790 <__ieee754_rem_pio2+0x464>
8002e488:	fc 18 1a 60 	movh	r8,0x1a60
8002e48c:	e0 69 b4 61 	mov	r9,46177
8002e490:	ea 19 3d d0 	orh	r9,0x3dd0
8002e494:	e0 a0 0c 8c 	rcall	8002fdac <__avr32_f64_add>
8002e498:	e0 68 70 73 	mov	r8,28787
8002e49c:	ea 18 2e 03 	orh	r8,0x2e03
8002e4a0:	14 94       	mov	r4,r10
8002e4a2:	16 95       	mov	r5,r11
8002e4a4:	e0 69 19 8a 	mov	r9,6538
8002e4a8:	ea 19 3b a3 	orh	r9,0x3ba3
8002e4ac:	e0 a0 0c 80 	rcall	8002fdac <__avr32_f64_add>
8002e4b0:	14 92       	mov	r2,r10
8002e4b2:	16 93       	mov	r3,r11
8002e4b4:	04 98       	mov	r8,r2
8002e4b6:	06 99       	mov	r9,r3
8002e4b8:	08 9a       	mov	r10,r4
8002e4ba:	0a 9b       	mov	r11,r5
8002e4bc:	ec e3 00 00 	st.d	r6[0],r2
8002e4c0:	e0 a0 0b a8 	rcall	8002fc10 <__avr32_f64_sub>
8002e4c4:	e0 68 70 73 	mov	r8,28787
8002e4c8:	ea 18 2e 03 	orh	r8,0x2e03
8002e4cc:	e0 69 19 8a 	mov	r9,6538
8002e4d0:	ea 19 3b a3 	orh	r9,0x3ba3
8002e4d4:	cd 3b       	rjmp	8002e47a <__ieee754_rem_pio2+0x14e>
8002e4d6:	e0 6c 21 fb 	mov	r12,8699
8002e4da:	ea 1c 41 39 	orh	r12,0x4139
8002e4de:	18 35       	cp.w	r5,r12
8002e4e0:	e0 89 00 f4 	brgt	8002e6c8 <__ieee754_rem_pio2+0x39c>
8002e4e4:	e0 a0 08 f4 	rcall	8002f6cc <fabs>
8002e4e8:	e0 68 c8 83 	mov	r8,51331
8002e4ec:	ea 18 6d c9 	orh	r8,0x6dc9
8002e4f0:	14 92       	mov	r2,r10
8002e4f2:	16 93       	mov	r3,r11
8002e4f4:	e0 69 5f 30 	mov	r9,24368
8002e4f8:	ea 19 3f e4 	orh	r9,0x3fe4
8002e4fc:	e0 a0 0a 9e 	rcall	8002fa38 <__avr32_f64_mul>
8002e500:	30 08       	mov	r8,0
8002e502:	fc 19 3f e0 	movh	r9,0x3fe0
8002e506:	e0 a0 0c 53 	rcall	8002fdac <__avr32_f64_add>
8002e50a:	e0 a0 0c db 	rcall	8002fec0 <__avr32_f64_to_s32>
8002e50e:	18 97       	mov	r7,r12
8002e510:	e0 a0 0c ef 	rcall	8002feee <__avr32_s32_to_f64>
8002e514:	fc 18 54 40 	movh	r8,0x5440
8002e518:	e0 69 21 fb 	mov	r9,8699
8002e51c:	ea 19 bf f9 	orh	r9,0xbff9
8002e520:	fa eb 00 04 	st.d	sp[4],r10
8002e524:	e0 a0 0a 8a 	rcall	8002fa38 <__avr32_f64_mul>
8002e528:	14 98       	mov	r8,r10
8002e52a:	16 99       	mov	r9,r11
8002e52c:	04 9a       	mov	r10,r2
8002e52e:	06 9b       	mov	r11,r3
8002e530:	e0 a0 0c 3e 	rcall	8002fdac <__avr32_f64_add>
8002e534:	e0 68 63 31 	mov	r8,25393
8002e538:	ea 18 1a 62 	orh	r8,0x1a62
8002e53c:	14 92       	mov	r2,r10
8002e53e:	16 93       	mov	r3,r11
8002e540:	e0 69 b4 61 	mov	r9,46177
8002e544:	ea 19 3d d0 	orh	r9,0x3dd0
8002e548:	fa ea 00 04 	ld.d	r10,sp[4]
8002e54c:	e0 a0 0a 76 	rcall	8002fa38 <__avr32_f64_mul>
8002e550:	14 90       	mov	r0,r10
8002e552:	16 91       	mov	r1,r11
8002e554:	59 f7       	cp.w	r7,31
8002e556:	e0 89 00 0a 	brgt	8002e56a <__ieee754_rem_pio2+0x23e>
8002e55a:	ee c9 00 01 	sub	r9,r7,1
8002e55e:	4d a8       	lddpc	r8,8002e6c4 <__ieee754_rem_pio2+0x398>
8002e560:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002e564:	10 35       	cp.w	r5,r8
8002e566:	e0 81 00 8b 	brne	8002e67c <__ieee754_rem_pio2+0x350>
8002e56a:	00 98       	mov	r8,r0
8002e56c:	02 99       	mov	r9,r1
8002e56e:	04 9a       	mov	r10,r2
8002e570:	06 9b       	mov	r11,r3
8002e572:	e0 a0 0b 4f 	rcall	8002fc10 <__avr32_f64_sub>
8002e576:	ec eb 00 00 	st.d	r6[0],r10
8002e57a:	ea 0c 14 14 	asr	r12,r5,0x14
8002e57e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002e582:	f8 0b 01 0b 	sub	r11,r12,r11
8002e586:	59 0b       	cp.w	r11,16
8002e588:	e0 8a 00 82 	brle	8002e68c <__ieee754_rem_pio2+0x360>
8002e58c:	50 0c       	stdsp	sp[0x0],r12
8002e58e:	fc 18 1a 60 	movh	r8,0x1a60
8002e592:	e0 69 b4 61 	mov	r9,46177
8002e596:	ea 19 3d d0 	orh	r9,0x3dd0
8002e59a:	fa ea 00 04 	ld.d	r10,sp[4]
8002e59e:	e0 a0 0a 4d 	rcall	8002fa38 <__avr32_f64_mul>
8002e5a2:	16 91       	mov	r1,r11
8002e5a4:	14 90       	mov	r0,r10
8002e5a6:	14 98       	mov	r8,r10
8002e5a8:	02 99       	mov	r9,r1
8002e5aa:	04 9a       	mov	r10,r2
8002e5ac:	06 9b       	mov	r11,r3
8002e5ae:	e0 a0 0b 31 	rcall	8002fc10 <__avr32_f64_sub>
8002e5b2:	16 95       	mov	r5,r11
8002e5b4:	14 98       	mov	r8,r10
8002e5b6:	14 94       	mov	r4,r10
8002e5b8:	0a 99       	mov	r9,r5
8002e5ba:	04 9a       	mov	r10,r2
8002e5bc:	06 9b       	mov	r11,r3
8002e5be:	e0 a0 0b 29 	rcall	8002fc10 <__avr32_f64_sub>
8002e5c2:	00 98       	mov	r8,r0
8002e5c4:	02 99       	mov	r9,r1
8002e5c6:	e0 a0 0b 25 	rcall	8002fc10 <__avr32_f64_sub>
8002e5ca:	e0 68 70 73 	mov	r8,28787
8002e5ce:	ea 18 2e 03 	orh	r8,0x2e03
8002e5d2:	14 92       	mov	r2,r10
8002e5d4:	16 93       	mov	r3,r11
8002e5d6:	e0 69 19 8a 	mov	r9,6538
8002e5da:	ea 19 3b a3 	orh	r9,0x3ba3
8002e5de:	fa ea 00 04 	ld.d	r10,sp[4]
8002e5e2:	e0 a0 0a 2b 	rcall	8002fa38 <__avr32_f64_mul>
8002e5e6:	04 98       	mov	r8,r2
8002e5e8:	06 99       	mov	r9,r3
8002e5ea:	e0 a0 0b 13 	rcall	8002fc10 <__avr32_f64_sub>
8002e5ee:	16 91       	mov	r1,r11
8002e5f0:	14 98       	mov	r8,r10
8002e5f2:	14 90       	mov	r0,r10
8002e5f4:	02 99       	mov	r9,r1
8002e5f6:	08 9a       	mov	r10,r4
8002e5f8:	0a 9b       	mov	r11,r5
8002e5fa:	e0 a0 0b 0b 	rcall	8002fc10 <__avr32_f64_sub>
8002e5fe:	ec eb 00 00 	st.d	r6[0],r10
8002e602:	40 0c       	lddsp	r12,sp[0x0]
8002e604:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002e608:	16 1c       	sub	r12,r11
8002e60a:	e0 4c 00 31 	cp.w	r12,49
8002e60e:	e0 89 00 05 	brgt	8002e618 <__ieee754_rem_pio2+0x2ec>
8002e612:	08 92       	mov	r2,r4
8002e614:	0a 93       	mov	r3,r5
8002e616:	c3 b8       	rjmp	8002e68c <__ieee754_rem_pio2+0x360>
8002e618:	fc 18 2e 00 	movh	r8,0x2e00
8002e61c:	e0 69 19 8a 	mov	r9,6538
8002e620:	ea 19 3b a3 	orh	r9,0x3ba3
8002e624:	fa ea 00 04 	ld.d	r10,sp[4]
8002e628:	e0 a0 0a 08 	rcall	8002fa38 <__avr32_f64_mul>
8002e62c:	16 91       	mov	r1,r11
8002e62e:	14 90       	mov	r0,r10
8002e630:	14 98       	mov	r8,r10
8002e632:	02 99       	mov	r9,r1
8002e634:	08 9a       	mov	r10,r4
8002e636:	0a 9b       	mov	r11,r5
8002e638:	e0 a0 0a ec 	rcall	8002fc10 <__avr32_f64_sub>
8002e63c:	14 98       	mov	r8,r10
8002e63e:	16 93       	mov	r3,r11
8002e640:	14 92       	mov	r2,r10
8002e642:	06 99       	mov	r9,r3
8002e644:	08 9a       	mov	r10,r4
8002e646:	0a 9b       	mov	r11,r5
8002e648:	e0 a0 0a e4 	rcall	8002fc10 <__avr32_f64_sub>
8002e64c:	00 98       	mov	r8,r0
8002e64e:	02 99       	mov	r9,r1
8002e650:	e0 a0 0a e0 	rcall	8002fc10 <__avr32_f64_sub>
8002e654:	e0 68 49 c1 	mov	r8,18881
8002e658:	ea 18 25 20 	orh	r8,0x2520
8002e65c:	14 94       	mov	r4,r10
8002e65e:	16 95       	mov	r5,r11
8002e660:	e0 69 83 9a 	mov	r9,33690
8002e664:	ea 19 39 7b 	orh	r9,0x397b
8002e668:	fa ea 00 04 	ld.d	r10,sp[4]
8002e66c:	e0 a0 09 e6 	rcall	8002fa38 <__avr32_f64_mul>
8002e670:	08 98       	mov	r8,r4
8002e672:	0a 99       	mov	r9,r5
8002e674:	e0 a0 0a ce 	rcall	8002fc10 <__avr32_f64_sub>
8002e678:	14 90       	mov	r0,r10
8002e67a:	16 91       	mov	r1,r11
8002e67c:	00 98       	mov	r8,r0
8002e67e:	02 99       	mov	r9,r1
8002e680:	04 9a       	mov	r10,r2
8002e682:	06 9b       	mov	r11,r3
8002e684:	e0 a0 0a c6 	rcall	8002fc10 <__avr32_f64_sub>
8002e688:	ec eb 00 00 	st.d	r6[0],r10
8002e68c:	ec e8 00 00 	ld.d	r8,r6[0]
8002e690:	04 9a       	mov	r10,r2
8002e692:	06 9b       	mov	r11,r3
8002e694:	e0 a0 0a be 	rcall	8002fc10 <__avr32_f64_sub>
8002e698:	00 98       	mov	r8,r0
8002e69a:	ec c5 ff f8 	sub	r5,r6,-8
8002e69e:	02 99       	mov	r9,r1
8002e6a0:	e0 a0 0a b8 	rcall	8002fc10 <__avr32_f64_sub>
8002e6a4:	ea eb 00 00 	st.d	r5[0],r10
8002e6a8:	40 38       	lddsp	r8,sp[0xc]
8002e6aa:	58 08       	cp.w	r8,0
8002e6ac:	c7 24       	brge	8002e790 <__ieee754_rem_pio2+0x464>
8002e6ae:	6c 08       	ld.w	r8,r6[0x0]
8002e6b0:	ee 18 80 00 	eorh	r8,0x8000
8002e6b4:	8d 08       	st.w	r6[0x0],r8
8002e6b6:	5c 37       	neg	r7
8002e6b8:	6a 08       	ld.w	r8,r5[0x0]
8002e6ba:	ee 18 80 00 	eorh	r8,0x8000
8002e6be:	8b 08       	st.w	r5[0x0],r8
8002e6c0:	c6 88       	rjmp	8002e790 <__ieee754_rem_pio2+0x464>
8002e6c2:	d7 03       	nop
8002e6c4:	80 03       	ld.sh	r3,r0[0x0]
8002e6c6:	11 b8       	ld.ub	r8,r8[0x3]
8002e6c8:	e0 6c ff ff 	mov	r12,65535
8002e6cc:	ea 1c 7f ef 	orh	r12,0x7fef
8002e6d0:	18 35       	cp.w	r5,r12
8002e6d2:	e0 8a 00 08 	brle	8002e6e2 <__ieee754_rem_pio2+0x3b6>
8002e6d6:	30 07       	mov	r7,0
8002e6d8:	e0 a0 0a 9c 	rcall	8002fc10 <__avr32_f64_sub>
8002e6dc:	ec eb 00 00 	st.d	r6[0],r10
8002e6e0:	cd 0a       	rjmp	8002e480 <__ieee754_rem_pio2+0x154>
8002e6e2:	ea 03 14 14 	asr	r3,r5,0x14
8002e6e6:	e6 c3 04 16 	sub	r3,r3,1046
8002e6ea:	e6 08 15 14 	lsl	r8,r3,0x14
8002e6ee:	ea 08 01 01 	sub	r1,r5,r8
8002e6f2:	02 9b       	mov	r11,r1
8002e6f4:	e0 a0 0b e6 	rcall	8002fec0 <__avr32_f64_to_s32>
8002e6f8:	e0 a0 0b fb 	rcall	8002feee <__avr32_s32_to_f64>
8002e6fc:	14 94       	mov	r4,r10
8002e6fe:	16 95       	mov	r5,r11
8002e700:	08 98       	mov	r8,r4
8002e702:	0a 99       	mov	r9,r5
8002e704:	fa e5 00 10 	st.d	sp[16],r4
8002e708:	02 9b       	mov	r11,r1
8002e70a:	04 9a       	mov	r10,r2
8002e70c:	e0 a0 0a 82 	rcall	8002fc10 <__avr32_f64_sub>
8002e710:	30 08       	mov	r8,0
8002e712:	fc 19 41 70 	movh	r9,0x4170
8002e716:	e0 a0 09 91 	rcall	8002fa38 <__avr32_f64_mul>
8002e71a:	14 90       	mov	r0,r10
8002e71c:	16 91       	mov	r1,r11
8002e71e:	e0 a0 0b d1 	rcall	8002fec0 <__avr32_f64_to_s32>
8002e722:	e0 a0 0b e6 	rcall	8002feee <__avr32_s32_to_f64>
8002e726:	16 95       	mov	r5,r11
8002e728:	14 94       	mov	r4,r10
8002e72a:	0a 99       	mov	r9,r5
8002e72c:	08 98       	mov	r8,r4
8002e72e:	fa e5 00 18 	st.d	sp[24],r4
8002e732:	00 9a       	mov	r10,r0
8002e734:	02 9b       	mov	r11,r1
8002e736:	e0 a0 0a 6d 	rcall	8002fc10 <__avr32_f64_sub>
8002e73a:	30 08       	mov	r8,0
8002e73c:	fc 19 41 70 	movh	r9,0x4170
8002e740:	30 35       	mov	r5,3
8002e742:	e0 a0 09 7b 	rcall	8002fa38 <__avr32_f64_mul>
8002e746:	fa c7 ff d8 	sub	r7,sp,-40
8002e74a:	af 2b       	st.d	--r7,r10
8002e74c:	ee ea 00 00 	ld.d	r10,r7[0]
8002e750:	0a 91       	mov	r1,r5
8002e752:	20 87       	sub	r7,8
8002e754:	20 15       	sub	r5,1
8002e756:	30 08       	mov	r8,0
8002e758:	30 09       	mov	r9,0
8002e75a:	e0 a0 0c 3a 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002e75e:	cf 71       	brne	8002e74c <__ieee754_rem_pio2+0x420>
8002e760:	48 e8       	lddpc	r8,8002e798 <__ieee754_rem_pio2+0x46c>
8002e762:	02 99       	mov	r9,r1
8002e764:	1a d8       	st.w	--sp,r8
8002e766:	06 9a       	mov	r10,r3
8002e768:	30 28       	mov	r8,2
8002e76a:	fa cc ff ec 	sub	r12,sp,-20
8002e76e:	0c 9b       	mov	r11,r6
8002e770:	cd 0d       	rcall	8002eb10 <__kernel_rem_pio2>
8002e772:	2f fd       	sub	sp,-4
8002e774:	18 97       	mov	r7,r12
8002e776:	40 38       	lddsp	r8,sp[0xc]
8002e778:	58 08       	cp.w	r8,0
8002e77a:	c0 b4       	brge	8002e790 <__ieee754_rem_pio2+0x464>
8002e77c:	6c 08       	ld.w	r8,r6[0x0]
8002e77e:	ee 18 80 00 	eorh	r8,0x8000
8002e782:	8d 08       	st.w	r6[0x0],r8
8002e784:	5c 37       	neg	r7
8002e786:	2f 86       	sub	r6,-8
8002e788:	6c 08       	ld.w	r8,r6[0x0]
8002e78a:	ee 18 80 00 	eorh	r8,0x8000
8002e78e:	8d 08       	st.w	r6[0x0],r8
8002e790:	0e 9c       	mov	r12,r7
8002e792:	2f 6d       	sub	sp,-40
8002e794:	d8 32       	popm	r0-r7,pc
8002e796:	d7 03       	nop
8002e798:	80 03       	ld.sh	r3,r0[0x0]
8002e79a:	12 38       	cp.w	r8,r9

8002e79c <__ieee754_sqrt>:
8002e79c:	d4 31       	pushm	r0-r7,lr
8002e79e:	fc 1e 7f f0 	movh	lr,0x7ff0
8002e7a2:	16 9c       	mov	r12,r11
8002e7a4:	14 96       	mov	r6,r10
8002e7a6:	16 97       	mov	r7,r11
8002e7a8:	14 94       	mov	r4,r10
8002e7aa:	16 95       	mov	r5,r11
8002e7ac:	16 99       	mov	r9,r11
8002e7ae:	14 98       	mov	r8,r10
8002e7b0:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002e7b4:	1c 3c       	cp.w	r12,lr
8002e7b6:	c0 c1       	brne	8002e7ce <__ieee754_sqrt+0x32>
8002e7b8:	14 98       	mov	r8,r10
8002e7ba:	16 99       	mov	r9,r11
8002e7bc:	e0 a0 09 3e 	rcall	8002fa38 <__avr32_f64_mul>
8002e7c0:	14 98       	mov	r8,r10
8002e7c2:	16 99       	mov	r9,r11
8002e7c4:	0c 9a       	mov	r10,r6
8002e7c6:	0e 9b       	mov	r11,r7
8002e7c8:	e0 a0 0a f2 	rcall	8002fdac <__avr32_f64_add>
8002e7cc:	c1 38       	rjmp	8002e7f2 <__ieee754_sqrt+0x56>
8002e7ce:	58 0b       	cp.w	r11,0
8002e7d0:	e0 89 00 14 	brgt	8002e7f8 <__ieee754_sqrt+0x5c>
8002e7d4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002e7d8:	14 4c       	or	r12,r10
8002e7da:	e0 80 00 a3 	breq	8002e920 <__ieee754_sqrt+0x184>
8002e7de:	58 0b       	cp.w	r11,0
8002e7e0:	c0 c0       	breq	8002e7f8 <__ieee754_sqrt+0x5c>
8002e7e2:	14 98       	mov	r8,r10
8002e7e4:	16 99       	mov	r9,r11
8002e7e6:	e0 a0 0a 15 	rcall	8002fc10 <__avr32_f64_sub>
8002e7ea:	14 98       	mov	r8,r10
8002e7ec:	16 99       	mov	r9,r11
8002e7ee:	e0 a0 0c 6b 	rcall	800300c4 <__avr32_f64_div>
8002e7f2:	14 96       	mov	r6,r10
8002e7f4:	16 97       	mov	r7,r11
8002e7f6:	c9 58       	rjmp	8002e920 <__ieee754_sqrt+0x184>
8002e7f8:	f2 0a 14 14 	asr	r10,r9,0x14
8002e7fc:	c0 60       	breq	8002e808 <__ieee754_sqrt+0x6c>
8002e7fe:	c1 88       	rjmp	8002e82e <__ieee754_sqrt+0x92>
8002e800:	f0 09 16 0b 	lsr	r9,r8,0xb
8002e804:	21 5a       	sub	r10,21
8002e806:	b5 78       	lsl	r8,0x15
8002e808:	58 09       	cp.w	r9,0
8002e80a:	cf b0       	breq	8002e800 <__ieee754_sqrt+0x64>
8002e80c:	30 0b       	mov	r11,0
8002e80e:	c0 38       	rjmp	8002e814 <__ieee754_sqrt+0x78>
8002e810:	a1 79       	lsl	r9,0x1
8002e812:	2f fb       	sub	r11,-1
8002e814:	ed b9 00 14 	bld	r9,0x14
8002e818:	cf c1       	brne	8002e810 <__ieee754_sqrt+0x74>
8002e81a:	2f fa       	sub	r10,-1
8002e81c:	f6 0c 11 20 	rsub	r12,r11,32
8002e820:	16 1a       	sub	r10,r11
8002e822:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002e826:	f0 0b 09 48 	lsl	r8,r8,r11
8002e82a:	f9 e9 10 09 	or	r9,r12,r9
8002e82e:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002e832:	f4 c6 03 ff 	sub	r6,r10,1023
8002e836:	b5 a9       	sbr	r9,0x14
8002e838:	ed b6 00 00 	bld	r6,0x0
8002e83c:	c0 61       	brne	8002e848 <__ieee754_sqrt+0xac>
8002e83e:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002e842:	a1 78       	lsl	r8,0x1
8002e844:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002e848:	30 07       	mov	r7,0
8002e84a:	f0 0a 15 01 	lsl	r10,r8,0x1
8002e84e:	0e 9c       	mov	r12,r7
8002e850:	bf 98       	lsr	r8,0x1f
8002e852:	fc 1b 00 20 	movh	r11,0x20
8002e856:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002e85a:	0e 99       	mov	r9,r7
8002e85c:	f2 0b 00 0e 	add	lr,r9,r11
8002e860:	2f f7       	sub	r7,-1
8002e862:	10 3e       	cp.w	lr,r8
8002e864:	f1 de ea 18 	suble	r8,r8,lr
8002e868:	f9 db ea 0c 	addle	r12,r12,r11
8002e86c:	fd db ea 09 	addle	r9,lr,r11
8002e870:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002e874:	a1 9b       	lsr	r11,0x1
8002e876:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002e87a:	a1 7a       	lsl	r10,0x1
8002e87c:	59 67       	cp.w	r7,22
8002e87e:	ce f1       	brne	8002e85c <__ieee754_sqrt+0xc0>
8002e880:	30 07       	mov	r7,0
8002e882:	fc 15 80 00 	movh	r5,0x8000
8002e886:	0e 9b       	mov	r11,r7
8002e888:	0e 94       	mov	r4,r7
8002e88a:	0e 92       	mov	r2,r7
8002e88c:	ea 04 00 0e 	add	lr,r5,r4
8002e890:	10 39       	cp.w	r9,r8
8002e892:	c0 95       	brlt	8002e8a4 <__ieee754_sqrt+0x108>
8002e894:	5f 03       	sreq	r3
8002e896:	14 3e       	cp.w	lr,r10
8002e898:	5f 81       	srls	r1
8002e89a:	e3 e3 00 03 	and	r3,r1,r3
8002e89e:	e4 03 18 00 	cp.b	r3,r2
8002e8a2:	c1 70       	breq	8002e8d0 <__ieee754_sqrt+0x134>
8002e8a4:	1c 93       	mov	r3,lr
8002e8a6:	fc 05 00 04 	add	r4,lr,r5
8002e8aa:	e6 13 80 00 	andh	r3,0x8000,COH
8002e8ae:	fc 11 80 00 	movh	r1,0x8000
8002e8b2:	02 33       	cp.w	r3,r1
8002e8b4:	c0 61       	brne	8002e8c0 <__ieee754_sqrt+0x124>
8002e8b6:	58 04       	cp.w	r4,0
8002e8b8:	c0 45       	brlt	8002e8c0 <__ieee754_sqrt+0x124>
8002e8ba:	f2 c3 ff ff 	sub	r3,r9,-1
8002e8be:	c0 28       	rjmp	8002e8c2 <__ieee754_sqrt+0x126>
8002e8c0:	12 93       	mov	r3,r9
8002e8c2:	12 18       	sub	r8,r9
8002e8c4:	0a 0b       	add	r11,r5
8002e8c6:	1c 3a       	cp.w	r10,lr
8002e8c8:	f7 b8 03 01 	sublo	r8,1
8002e8cc:	06 99       	mov	r9,r3
8002e8ce:	1c 1a       	sub	r10,lr
8002e8d0:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002e8d4:	a1 95       	lsr	r5,0x1
8002e8d6:	2f f7       	sub	r7,-1
8002e8d8:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002e8dc:	a1 7a       	lsl	r10,0x1
8002e8de:	e0 47 00 20 	cp.w	r7,32
8002e8e2:	cd 51       	brne	8002e88c <__ieee754_sqrt+0xf0>
8002e8e4:	14 48       	or	r8,r10
8002e8e6:	c0 a0       	breq	8002e8fa <__ieee754_sqrt+0x15e>
8002e8e8:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002e8ec:	5b fb       	cp.w	r11,-1
8002e8ee:	f7 bc 00 ff 	subeq	r12,-1
8002e8f2:	f9 bb 00 00 	moveq	r11,0
8002e8f6:	f1 db e1 0b 	addne	r11,r8,r11
8002e8fa:	a1 9b       	lsr	r11,0x1
8002e8fc:	16 99       	mov	r9,r11
8002e8fe:	bf b9       	sbr	r9,0x1f
8002e900:	ec 0a 14 01 	asr	r10,r6,0x1
8002e904:	f8 08 14 01 	asr	r8,r12,0x1
8002e908:	b5 6a       	lsl	r10,0x14
8002e90a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002e90e:	f2 0b 17 10 	movne	r11,r9
8002e912:	fc 19 3f e0 	movh	r9,0x3fe0
8002e916:	16 96       	mov	r6,r11
8002e918:	12 0a       	add	r10,r9
8002e91a:	f4 08 00 08 	add	r8,r10,r8
8002e91e:	10 97       	mov	r7,r8
8002e920:	0c 9a       	mov	r10,r6
8002e922:	0e 9b       	mov	r11,r7
8002e924:	d8 32       	popm	r0-r7,pc
8002e926:	d7 03       	nop

8002e928 <__kernel_cos>:
8002e928:	d4 31       	pushm	r0-r7,lr
8002e92a:	20 6d       	sub	sp,24
8002e92c:	fa e9 00 08 	st.d	sp[8],r8
8002e930:	14 92       	mov	r2,r10
8002e932:	16 93       	mov	r3,r11
8002e934:	14 96       	mov	r6,r10
8002e936:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002e93a:	e0 69 ff ff 	mov	r9,65535
8002e93e:	ea 19 3e 3f 	orh	r9,0x3e3f
8002e942:	12 37       	cp.w	r7,r9
8002e944:	e0 89 00 09 	brgt	8002e956 <__kernel_cos+0x2e>
8002e948:	e0 a0 0a bc 	rcall	8002fec0 <__avr32_f64_to_s32>
8002e94c:	c0 51       	brne	8002e956 <__kernel_cos+0x2e>
8002e94e:	30 0a       	mov	r10,0
8002e950:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e954:	cd b8       	rjmp	8002eb0a <__kernel_cos+0x1e2>
8002e956:	04 98       	mov	r8,r2
8002e958:	06 99       	mov	r9,r3
8002e95a:	04 9a       	mov	r10,r2
8002e95c:	06 9b       	mov	r11,r3
8002e95e:	e0 a0 08 6d 	rcall	8002fa38 <__avr32_f64_mul>
8002e962:	e0 68 38 d4 	mov	r8,14548
8002e966:	ea 18 be 88 	orh	r8,0xbe88
8002e96a:	14 94       	mov	r4,r10
8002e96c:	16 95       	mov	r5,r11
8002e96e:	e0 69 fa e9 	mov	r9,64233
8002e972:	ea 19 bd a8 	orh	r9,0xbda8
8002e976:	e0 a0 08 61 	rcall	8002fa38 <__avr32_f64_mul>
8002e97a:	e0 68 b1 c4 	mov	r8,45508
8002e97e:	ea 18 bd b4 	orh	r8,0xbdb4
8002e982:	e0 69 ee 9e 	mov	r9,61086
8002e986:	ea 19 3e 21 	orh	r9,0x3e21
8002e98a:	e0 a0 0a 11 	rcall	8002fdac <__avr32_f64_add>
8002e98e:	14 98       	mov	r8,r10
8002e990:	16 99       	mov	r9,r11
8002e992:	08 9a       	mov	r10,r4
8002e994:	0a 9b       	mov	r11,r5
8002e996:	e0 a0 08 51 	rcall	8002fa38 <__avr32_f64_mul>
8002e99a:	e0 68 52 ad 	mov	r8,21165
8002e99e:	ea 18 80 9c 	orh	r8,0x809c
8002e9a2:	e0 69 7e 4f 	mov	r9,32335
8002e9a6:	ea 19 3e 92 	orh	r9,0x3e92
8002e9aa:	e0 a0 09 33 	rcall	8002fc10 <__avr32_f64_sub>
8002e9ae:	14 98       	mov	r8,r10
8002e9b0:	16 99       	mov	r9,r11
8002e9b2:	08 9a       	mov	r10,r4
8002e9b4:	0a 9b       	mov	r11,r5
8002e9b6:	e0 a0 08 41 	rcall	8002fa38 <__avr32_f64_mul>
8002e9ba:	e0 68 15 90 	mov	r8,5520
8002e9be:	ea 18 19 cb 	orh	r8,0x19cb
8002e9c2:	e0 69 01 a0 	mov	r9,416
8002e9c6:	ea 19 3e fa 	orh	r9,0x3efa
8002e9ca:	e0 a0 09 f1 	rcall	8002fdac <__avr32_f64_add>
8002e9ce:	14 98       	mov	r8,r10
8002e9d0:	16 99       	mov	r9,r11
8002e9d2:	08 9a       	mov	r10,r4
8002e9d4:	0a 9b       	mov	r11,r5
8002e9d6:	e0 a0 08 31 	rcall	8002fa38 <__avr32_f64_mul>
8002e9da:	e0 68 51 77 	mov	r8,20855
8002e9de:	ea 18 16 c1 	orh	r8,0x16c1
8002e9e2:	e0 69 c1 6c 	mov	r9,49516
8002e9e6:	ea 19 3f 56 	orh	r9,0x3f56
8002e9ea:	e0 a0 09 13 	rcall	8002fc10 <__avr32_f64_sub>
8002e9ee:	14 98       	mov	r8,r10
8002e9f0:	16 99       	mov	r9,r11
8002e9f2:	08 9a       	mov	r10,r4
8002e9f4:	0a 9b       	mov	r11,r5
8002e9f6:	e0 a0 08 21 	rcall	8002fa38 <__avr32_f64_mul>
8002e9fa:	e0 68 55 4c 	mov	r8,21836
8002e9fe:	ea 18 55 55 	orh	r8,0x5555
8002ea02:	e0 69 55 55 	mov	r9,21845
8002ea06:	ea 19 3f a5 	orh	r9,0x3fa5
8002ea0a:	e0 a0 09 d1 	rcall	8002fdac <__avr32_f64_add>
8002ea0e:	14 98       	mov	r8,r10
8002ea10:	16 99       	mov	r9,r11
8002ea12:	08 9a       	mov	r10,r4
8002ea14:	0a 9b       	mov	r11,r5
8002ea16:	e0 a0 08 11 	rcall	8002fa38 <__avr32_f64_mul>
8002ea1a:	fa eb 00 00 	st.d	sp[0],r10
8002ea1e:	e0 68 33 32 	mov	r8,13106
8002ea22:	ea 18 3f d3 	orh	r8,0x3fd3
8002ea26:	10 37       	cp.w	r7,r8
8002ea28:	e0 89 00 2b 	brgt	8002ea7e <__kernel_cos+0x156>
8002ea2c:	30 08       	mov	r8,0
8002ea2e:	fc 19 3f e0 	movh	r9,0x3fe0
8002ea32:	08 9a       	mov	r10,r4
8002ea34:	0a 9b       	mov	r11,r5
8002ea36:	e0 a0 08 01 	rcall	8002fa38 <__avr32_f64_mul>
8002ea3a:	fa e8 00 00 	ld.d	r8,sp[0]
8002ea3e:	14 90       	mov	r0,r10
8002ea40:	16 91       	mov	r1,r11
8002ea42:	08 9a       	mov	r10,r4
8002ea44:	0a 9b       	mov	r11,r5
8002ea46:	e0 a0 07 f9 	rcall	8002fa38 <__avr32_f64_mul>
8002ea4a:	fa e8 00 08 	ld.d	r8,sp[8]
8002ea4e:	16 97       	mov	r7,r11
8002ea50:	14 96       	mov	r6,r10
8002ea52:	06 9b       	mov	r11,r3
8002ea54:	04 9a       	mov	r10,r2
8002ea56:	e0 a0 07 f1 	rcall	8002fa38 <__avr32_f64_mul>
8002ea5a:	14 98       	mov	r8,r10
8002ea5c:	16 99       	mov	r9,r11
8002ea5e:	0c 9a       	mov	r10,r6
8002ea60:	0e 9b       	mov	r11,r7
8002ea62:	e0 a0 08 d7 	rcall	8002fc10 <__avr32_f64_sub>
8002ea66:	14 98       	mov	r8,r10
8002ea68:	16 99       	mov	r9,r11
8002ea6a:	00 9a       	mov	r10,r0
8002ea6c:	02 9b       	mov	r11,r1
8002ea6e:	e0 a0 08 d1 	rcall	8002fc10 <__avr32_f64_sub>
8002ea72:	14 98       	mov	r8,r10
8002ea74:	16 99       	mov	r9,r11
8002ea76:	30 0a       	mov	r10,0
8002ea78:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ea7c:	c4 58       	rjmp	8002eb06 <__kernel_cos+0x1de>
8002ea7e:	fc 19 3f e9 	movh	r9,0x3fe9
8002ea82:	12 37       	cp.w	r7,r9
8002ea84:	e0 8a 00 06 	brle	8002ea90 <__kernel_cos+0x168>
8002ea88:	30 06       	mov	r6,0
8002ea8a:	fc 17 3f d2 	movh	r7,0x3fd2
8002ea8e:	c0 88       	rjmp	8002ea9e <__kernel_cos+0x176>
8002ea90:	fc 1a ff e0 	movh	r10,0xffe0
8002ea94:	30 08       	mov	r8,0
8002ea96:	ee 0a 00 09 	add	r9,r7,r10
8002ea9a:	10 96       	mov	r6,r8
8002ea9c:	12 97       	mov	r7,r9
8002ea9e:	0c 98       	mov	r8,r6
8002eaa0:	0e 99       	mov	r9,r7
8002eaa2:	30 0a       	mov	r10,0
8002eaa4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002eaa8:	e0 a0 08 b4 	rcall	8002fc10 <__avr32_f64_sub>
8002eaac:	30 08       	mov	r8,0
8002eaae:	fa eb 00 10 	st.d	sp[16],r10
8002eab2:	fc 19 3f e0 	movh	r9,0x3fe0
8002eab6:	08 9a       	mov	r10,r4
8002eab8:	0a 9b       	mov	r11,r5
8002eaba:	e0 a0 07 bf 	rcall	8002fa38 <__avr32_f64_mul>
8002eabe:	0c 98       	mov	r8,r6
8002eac0:	0e 99       	mov	r9,r7
8002eac2:	e0 a0 08 a7 	rcall	8002fc10 <__avr32_f64_sub>
8002eac6:	fa e8 00 00 	ld.d	r8,sp[0]
8002eaca:	14 90       	mov	r0,r10
8002eacc:	16 91       	mov	r1,r11
8002eace:	08 9a       	mov	r10,r4
8002ead0:	0a 9b       	mov	r11,r5
8002ead2:	e0 a0 07 b3 	rcall	8002fa38 <__avr32_f64_mul>
8002ead6:	fa e8 00 08 	ld.d	r8,sp[8]
8002eada:	16 97       	mov	r7,r11
8002eadc:	14 96       	mov	r6,r10
8002eade:	06 9b       	mov	r11,r3
8002eae0:	04 9a       	mov	r10,r2
8002eae2:	e0 a0 07 ab 	rcall	8002fa38 <__avr32_f64_mul>
8002eae6:	14 98       	mov	r8,r10
8002eae8:	16 99       	mov	r9,r11
8002eaea:	0c 9a       	mov	r10,r6
8002eaec:	0e 9b       	mov	r11,r7
8002eaee:	e0 a0 08 91 	rcall	8002fc10 <__avr32_f64_sub>
8002eaf2:	14 98       	mov	r8,r10
8002eaf4:	16 99       	mov	r9,r11
8002eaf6:	00 9a       	mov	r10,r0
8002eaf8:	02 9b       	mov	r11,r1
8002eafa:	e0 a0 08 8b 	rcall	8002fc10 <__avr32_f64_sub>
8002eafe:	14 98       	mov	r8,r10
8002eb00:	16 99       	mov	r9,r11
8002eb02:	fa ea 00 10 	ld.d	r10,sp[16]
8002eb06:	e0 a0 08 85 	rcall	8002fc10 <__avr32_f64_sub>
8002eb0a:	2f ad       	sub	sp,-24
8002eb0c:	d8 32       	popm	r0-r7,pc
8002eb0e:	d7 03       	nop

8002eb10 <__kernel_rem_pio2>:
8002eb10:	d4 31       	pushm	r0-r7,lr
8002eb12:	fa cd 02 70 	sub	sp,sp,624
8002eb16:	50 b9       	stdsp	sp[0x2c],r9
8002eb18:	fa f9 02 94 	ld.w	r9,sp[660]
8002eb1c:	50 68       	stdsp	sp[0x18],r8
8002eb1e:	50 c9       	stdsp	sp[0x30],r9
8002eb20:	16 94       	mov	r4,r11
8002eb22:	40 b8       	lddsp	r8,sp[0x2c]
8002eb24:	4b e9       	lddpc	r9,8002ec1c <__kernel_rem_pio2+0x10c>
8002eb26:	20 18       	sub	r8,1
8002eb28:	40 6b       	lddsp	r11,sp[0x18]
8002eb2a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002eb2e:	50 58       	stdsp	sp[0x14],r8
8002eb30:	50 39       	stdsp	sp[0xc],r9
8002eb32:	30 08       	mov	r8,0
8002eb34:	f4 c9 00 03 	sub	r9,r10,3
8002eb38:	10 97       	mov	r7,r8
8002eb3a:	31 83       	mov	r3,24
8002eb3c:	f2 03 0c 02 	divs	r2,r9,r3
8002eb40:	f0 02 0c 48 	max	r8,r8,r2
8002eb44:	40 59       	lddsp	r9,sp[0x14]
8002eb46:	10 96       	mov	r6,r8
8002eb48:	10 93       	mov	r3,r8
8002eb4a:	50 78       	stdsp	sp[0x1c],r8
8002eb4c:	40 31       	lddsp	r1,sp[0xc]
8002eb4e:	5c d6       	com	r6
8002eb50:	12 13       	sub	r3,r9
8002eb52:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002eb56:	40 c8       	lddsp	r8,sp[0x30]
8002eb58:	50 ac       	stdsp	sp[0x28],r12
8002eb5a:	12 01       	add	r1,r9
8002eb5c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002eb60:	fa c2 fe 80 	sub	r2,sp,-384
8002eb64:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002eb68:	c0 d8       	rjmp	8002eb82 <__kernel_rem_pio2+0x72>
8002eb6a:	ee 03 00 08 	add	r8,r7,r3
8002eb6e:	c0 47       	brpl	8002eb76 <__kernel_rem_pio2+0x66>
8002eb70:	30 0a       	mov	r10,0
8002eb72:	30 0b       	mov	r11,0
8002eb74:	c0 48       	rjmp	8002eb7c <__kernel_rem_pio2+0x6c>
8002eb76:	6a 0c       	ld.w	r12,r5[0x0]
8002eb78:	e0 a0 09 bb 	rcall	8002feee <__avr32_s32_to_f64>
8002eb7c:	a5 2a       	st.d	r2++,r10
8002eb7e:	2f f7       	sub	r7,-1
8002eb80:	2f c5       	sub	r5,-4
8002eb82:	02 37       	cp.w	r7,r1
8002eb84:	fe 9a ff f3 	brle	8002eb6a <__kernel_rem_pio2+0x5a>
8002eb88:	fa c0 ff c0 	sub	r0,sp,-64
8002eb8c:	40 53       	lddsp	r3,sp[0x14]
8002eb8e:	30 02       	mov	r2,0
8002eb90:	fa cc fe 80 	sub	r12,sp,-384
8002eb94:	0c 95       	mov	r5,r6
8002eb96:	c1 b8       	rjmp	8002ebcc <__kernel_rem_pio2+0xbc>
8002eb98:	ee e8 00 00 	ld.d	r8,r7[0]
8002eb9c:	50 0c       	stdsp	sp[0x0],r12
8002eb9e:	20 87       	sub	r7,8
8002eba0:	a3 0b       	ld.d	r10,r1++
8002eba2:	e0 a0 07 4b 	rcall	8002fa38 <__avr32_f64_mul>
8002eba6:	14 98       	mov	r8,r10
8002eba8:	16 99       	mov	r9,r11
8002ebaa:	fa ea 00 04 	ld.d	r10,sp[4]
8002ebae:	e0 a0 08 ff 	rcall	8002fdac <__avr32_f64_add>
8002ebb2:	2f f6       	sub	r6,-1
8002ebb4:	fa eb 00 04 	st.d	sp[4],r10
8002ebb8:	40 0c       	lddsp	r12,sp[0x0]
8002ebba:	40 5b       	lddsp	r11,sp[0x14]
8002ebbc:	16 36       	cp.w	r6,r11
8002ebbe:	fe 9a ff ed 	brle	8002eb98 <__kernel_rem_pio2+0x88>
8002ebc2:	fa e8 00 04 	ld.d	r8,sp[4]
8002ebc6:	2f f2       	sub	r2,-1
8002ebc8:	a1 28       	st.d	r0++,r8
8002ebca:	2f f3       	sub	r3,-1
8002ebcc:	40 38       	lddsp	r8,sp[0xc]
8002ebce:	10 32       	cp.w	r2,r8
8002ebd0:	e0 89 00 0b 	brgt	8002ebe6 <__kernel_rem_pio2+0xd6>
8002ebd4:	30 0a       	mov	r10,0
8002ebd6:	30 0b       	mov	r11,0
8002ebd8:	40 a1       	lddsp	r1,sp[0x28]
8002ebda:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002ebde:	fa eb 00 04 	st.d	sp[4],r10
8002ebe2:	30 06       	mov	r6,0
8002ebe4:	ce bb       	rjmp	8002ebba <__kernel_rem_pio2+0xaa>
8002ebe6:	40 38       	lddsp	r8,sp[0xc]
8002ebe8:	fa ca fd e0 	sub	r10,sp,-544
8002ebec:	20 18       	sub	r8,1
8002ebee:	0a 96       	mov	r6,r5
8002ebf0:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002ebf4:	40 37       	lddsp	r7,sp[0xc]
8002ebf6:	50 fa       	stdsp	sp[0x3c],r10
8002ebf8:	50 e4       	stdsp	sp[0x38],r4
8002ebfa:	fa c9 fd 90 	sub	r9,sp,-624
8002ebfe:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002ec02:	ee c5 00 01 	sub	r5,r7,1
8002ec06:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002ec0a:	fa c1 fd e0 	sub	r1,sp,-544
8002ec0e:	fa c8 ff c0 	sub	r8,sp,-64
8002ec12:	50 11       	stdsp	sp[0x4],r1
8002ec14:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002ec18:	0e 90       	mov	r0,r7
8002ec1a:	c2 58       	rjmp	8002ec64 <__kernel_rem_pio2+0x154>
8002ec1c:	80 03       	ld.sh	r3,r0[0x0]
8002ec1e:	13 40       	ld.w	r0,--r9
8002ec20:	e0 a0 07 0c 	rcall	8002fa38 <__avr32_f64_mul>
8002ec24:	e0 a0 09 4e 	rcall	8002fec0 <__avr32_f64_to_s32>
8002ec28:	e0 a0 09 63 	rcall	8002feee <__avr32_s32_to_f64>
8002ec2c:	30 08       	mov	r8,0
8002ec2e:	fc 19 c1 70 	movh	r9,0xc170
8002ec32:	fa eb 00 20 	st.d	sp[32],r10
8002ec36:	e0 a0 07 01 	rcall	8002fa38 <__avr32_f64_mul>
8002ec3a:	14 98       	mov	r8,r10
8002ec3c:	16 99       	mov	r9,r11
8002ec3e:	04 9a       	mov	r10,r2
8002ec40:	06 9b       	mov	r11,r3
8002ec42:	e0 a0 08 b5 	rcall	8002fdac <__avr32_f64_add>
8002ec46:	e0 a0 09 3d 	rcall	8002fec0 <__avr32_f64_to_s32>
8002ec4a:	40 1a       	lddsp	r10,sp[0x4]
8002ec4c:	14 ac       	st.w	r10++,r12
8002ec4e:	e8 e8 00 00 	ld.d	r8,r4[0]
8002ec52:	50 1a       	stdsp	sp[0x4],r10
8002ec54:	20 10       	sub	r0,1
8002ec56:	fa ea 00 20 	ld.d	r10,sp[32]
8002ec5a:	20 84       	sub	r4,8
8002ec5c:	e0 a0 08 a8 	rcall	8002fdac <__avr32_f64_add>
8002ec60:	14 92       	mov	r2,r10
8002ec62:	16 93       	mov	r3,r11
8002ec64:	30 08       	mov	r8,0
8002ec66:	fc 19 3e 70 	movh	r9,0x3e70
8002ec6a:	04 9a       	mov	r10,r2
8002ec6c:	06 9b       	mov	r11,r3
8002ec6e:	58 00       	cp.w	r0,0
8002ec70:	fe 99 ff d8 	brgt	8002ec20 <__kernel_rem_pio2+0x110>
8002ec74:	0c 9c       	mov	r12,r6
8002ec76:	e0 a0 06 67 	rcall	8002f944 <scalbn>
8002ec7a:	30 08       	mov	r8,0
8002ec7c:	fc 19 3f c0 	movh	r9,0x3fc0
8002ec80:	14 92       	mov	r2,r10
8002ec82:	16 93       	mov	r3,r11
8002ec84:	e0 a0 06 da 	rcall	8002fa38 <__avr32_f64_mul>
8002ec88:	e0 a0 05 2e 	rcall	8002f6e4 <floor>
8002ec8c:	30 08       	mov	r8,0
8002ec8e:	fc 19 c0 20 	movh	r9,0xc020
8002ec92:	e0 a0 06 d3 	rcall	8002fa38 <__avr32_f64_mul>
8002ec96:	14 98       	mov	r8,r10
8002ec98:	16 99       	mov	r9,r11
8002ec9a:	04 9a       	mov	r10,r2
8002ec9c:	06 9b       	mov	r11,r3
8002ec9e:	e0 a0 08 87 	rcall	8002fdac <__avr32_f64_add>
8002eca2:	14 92       	mov	r2,r10
8002eca4:	16 93       	mov	r3,r11
8002eca6:	e0 a0 09 0d 	rcall	8002fec0 <__avr32_f64_to_s32>
8002ecaa:	18 90       	mov	r0,r12
8002ecac:	e0 a0 09 21 	rcall	8002feee <__avr32_s32_to_f64>
8002ecb0:	14 98       	mov	r8,r10
8002ecb2:	16 99       	mov	r9,r11
8002ecb4:	04 9a       	mov	r10,r2
8002ecb6:	06 9b       	mov	r11,r3
8002ecb8:	e0 a0 07 ac 	rcall	8002fc10 <__avr32_f64_sub>
8002ecbc:	fa eb 00 04 	st.d	sp[4],r10
8002ecc0:	58 06       	cp.w	r6,0
8002ecc2:	e0 8a 00 18 	brle	8002ecf2 <__kernel_rem_pio2+0x1e2>
8002ecc6:	fa c8 fd 90 	sub	r8,sp,-624
8002ecca:	ec 0b 11 18 	rsub	r11,r6,24
8002ecce:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002ecd2:	ec 0c 11 17 	rsub	r12,r6,23
8002ecd6:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002ecda:	f4 0b 08 48 	asr	r8,r10,r11
8002ecde:	f0 0b 09 4b 	lsl	r11,r8,r11
8002ece2:	10 00       	add	r0,r8
8002ece4:	f4 0b 01 0b 	sub	r11,r10,r11
8002ece8:	f3 4b ff b0 	st.w	r9[-80],r11
8002ecec:	f6 0c 08 44 	asr	r4,r11,r12
8002ecf0:	c1 58       	rjmp	8002ed1a <__kernel_rem_pio2+0x20a>
8002ecf2:	58 06       	cp.w	r6,0
8002ecf4:	c0 91       	brne	8002ed06 <__kernel_rem_pio2+0x1f6>
8002ecf6:	fa cb fd 90 	sub	r11,sp,-624
8002ecfa:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002ecfe:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002ed02:	b7 54       	asr	r4,0x17
8002ed04:	c0 b8       	rjmp	8002ed1a <__kernel_rem_pio2+0x20a>
8002ed06:	30 08       	mov	r8,0
8002ed08:	fc 19 3f e0 	movh	r9,0x3fe0
8002ed0c:	e0 a0 09 74 	rcall	8002fff4 <__avr32_f64_cmp_ge>
8002ed10:	c0 31       	brne	8002ed16 <__kernel_rem_pio2+0x206>
8002ed12:	30 04       	mov	r4,0
8002ed14:	c5 58       	rjmp	8002edbe <__kernel_rem_pio2+0x2ae>
8002ed16:	30 24       	mov	r4,2
8002ed18:	c0 48       	rjmp	8002ed20 <__kernel_rem_pio2+0x210>
8002ed1a:	58 04       	cp.w	r4,0
8002ed1c:	e0 8a 00 51 	brle	8002edbe <__kernel_rem_pio2+0x2ae>
8002ed20:	30 08       	mov	r8,0
8002ed22:	2f f0       	sub	r0,-1
8002ed24:	10 93       	mov	r3,r8
8002ed26:	c1 48       	rjmp	8002ed4e <__kernel_rem_pio2+0x23e>
8002ed28:	62 09       	ld.w	r9,r1[0x0]
8002ed2a:	58 03       	cp.w	r3,0
8002ed2c:	c0 81       	brne	8002ed3c <__kernel_rem_pio2+0x22c>
8002ed2e:	58 09       	cp.w	r9,0
8002ed30:	c0 d0       	breq	8002ed4a <__kernel_rem_pio2+0x23a>
8002ed32:	fc 1a 01 00 	movh	r10,0x100
8002ed36:	12 1a       	sub	r10,r9
8002ed38:	83 0a       	st.w	r1[0x0],r10
8002ed3a:	c0 78       	rjmp	8002ed48 <__kernel_rem_pio2+0x238>
8002ed3c:	e0 6b ff ff 	mov	r11,65535
8002ed40:	ea 1b 00 ff 	orh	r11,0xff
8002ed44:	12 1b       	sub	r11,r9
8002ed46:	83 0b       	st.w	r1[0x0],r11
8002ed48:	30 13       	mov	r3,1
8002ed4a:	2f f8       	sub	r8,-1
8002ed4c:	2f c1       	sub	r1,-4
8002ed4e:	0e 38       	cp.w	r8,r7
8002ed50:	ce c5       	brlt	8002ed28 <__kernel_rem_pio2+0x218>
8002ed52:	58 06       	cp.w	r6,0
8002ed54:	e0 8a 00 1a 	brle	8002ed88 <__kernel_rem_pio2+0x278>
8002ed58:	58 16       	cp.w	r6,1
8002ed5a:	c0 40       	breq	8002ed62 <__kernel_rem_pio2+0x252>
8002ed5c:	58 26       	cp.w	r6,2
8002ed5e:	c1 51       	brne	8002ed88 <__kernel_rem_pio2+0x278>
8002ed60:	c0 a8       	rjmp	8002ed74 <__kernel_rem_pio2+0x264>
8002ed62:	fa ca fd 90 	sub	r10,sp,-624
8002ed66:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002ed6a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002ed6e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002ed72:	c0 98       	rjmp	8002ed84 <__kernel_rem_pio2+0x274>
8002ed74:	fa c9 fd 90 	sub	r9,sp,-624
8002ed78:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002ed7c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002ed80:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002ed84:	f1 49 ff b0 	st.w	r8[-80],r9
8002ed88:	58 24       	cp.w	r4,2
8002ed8a:	c1 a1       	brne	8002edbe <__kernel_rem_pio2+0x2ae>
8002ed8c:	fa e8 00 04 	ld.d	r8,sp[4]
8002ed90:	30 0a       	mov	r10,0
8002ed92:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ed96:	e0 a0 07 3d 	rcall	8002fc10 <__avr32_f64_sub>
8002ed9a:	fa eb 00 04 	st.d	sp[4],r10
8002ed9e:	58 03       	cp.w	r3,0
8002eda0:	c0 f0       	breq	8002edbe <__kernel_rem_pio2+0x2ae>
8002eda2:	0c 9c       	mov	r12,r6
8002eda4:	30 0a       	mov	r10,0
8002eda6:	fc 1b 3f f0 	movh	r11,0x3ff0
8002edaa:	e0 a0 05 cd 	rcall	8002f944 <scalbn>
8002edae:	14 98       	mov	r8,r10
8002edb0:	16 99       	mov	r9,r11
8002edb2:	fa ea 00 04 	ld.d	r10,sp[4]
8002edb6:	e0 a0 07 2d 	rcall	8002fc10 <__avr32_f64_sub>
8002edba:	fa eb 00 04 	st.d	sp[4],r10
8002edbe:	30 08       	mov	r8,0
8002edc0:	30 09       	mov	r9,0
8002edc2:	fa ea 00 04 	ld.d	r10,sp[4]
8002edc6:	e0 a0 09 04 	rcall	8002ffce <__avr32_f64_cmp_eq>
8002edca:	c6 40       	breq	8002ee92 <__kernel_rem_pio2+0x382>
8002edcc:	fa c8 fd e0 	sub	r8,sp,-544
8002edd0:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002edd4:	30 08       	mov	r8,0
8002edd6:	c0 58       	rjmp	8002ede0 <__kernel_rem_pio2+0x2d0>
8002edd8:	72 0a       	ld.w	r10,r9[0x0]
8002edda:	20 15       	sub	r5,1
8002eddc:	14 48       	or	r8,r10
8002edde:	20 49       	sub	r9,4
8002ede0:	40 3b       	lddsp	r11,sp[0xc]
8002ede2:	16 35       	cp.w	r5,r11
8002ede4:	cf a4       	brge	8002edd8 <__kernel_rem_pio2+0x2c8>
8002ede6:	58 08       	cp.w	r8,0
8002ede8:	c5 b1       	brne	8002ee9e <__kernel_rem_pio2+0x38e>
8002edea:	40 f9       	lddsp	r9,sp[0x3c]
8002edec:	30 18       	mov	r8,1
8002edee:	c0 28       	rjmp	8002edf2 <__kernel_rem_pio2+0x2e2>
8002edf0:	2f f8       	sub	r8,-1
8002edf2:	72 0a       	ld.w	r10,r9[0x0]
8002edf4:	20 49       	sub	r9,4
8002edf6:	58 0a       	cp.w	r10,0
8002edf8:	cf c0       	breq	8002edf0 <__kernel_rem_pio2+0x2e0>
8002edfa:	0e 08       	add	r8,r7
8002edfc:	40 ba       	lddsp	r10,sp[0x2c]
8002edfe:	50 d8       	stdsp	sp[0x34],r8
8002ee00:	ee 0a 00 02 	add	r2,r7,r10
8002ee04:	fa c8 fe 80 	sub	r8,sp,-384
8002ee08:	04 91       	mov	r1,r2
8002ee0a:	ee c5 ff ff 	sub	r5,r7,-1
8002ee0e:	40 73       	lddsp	r3,sp[0x1c]
8002ee10:	40 c9       	lddsp	r9,sp[0x30]
8002ee12:	2f f3       	sub	r3,-1
8002ee14:	fa cb ff c0 	sub	r11,sp,-64
8002ee18:	0e 03       	add	r3,r7
8002ee1a:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002ee1e:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002ee22:	50 8b       	stdsp	sp[0x20],r11
8002ee24:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002ee28:	0c 94       	mov	r4,r6
8002ee2a:	c2 d8       	rjmp	8002ee84 <__kernel_rem_pio2+0x374>
8002ee2c:	66 0c       	ld.w	r12,r3[0x0]
8002ee2e:	e0 a0 08 60 	rcall	8002feee <__avr32_s32_to_f64>
8002ee32:	30 08       	mov	r8,0
8002ee34:	e4 eb 00 00 	st.d	r2[0],r10
8002ee38:	30 09       	mov	r9,0
8002ee3a:	fa ca fe 80 	sub	r10,sp,-384
8002ee3e:	40 a0       	lddsp	r0,sp[0x28]
8002ee40:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002ee44:	30 06       	mov	r6,0
8002ee46:	fa e9 00 04 	st.d	sp[4],r8
8002ee4a:	c1 08       	rjmp	8002ee6a <__kernel_rem_pio2+0x35a>
8002ee4c:	ee e8 00 00 	ld.d	r8,r7[0]
8002ee50:	a1 0b       	ld.d	r10,r0++
8002ee52:	20 87       	sub	r7,8
8002ee54:	e0 a0 05 f2 	rcall	8002fa38 <__avr32_f64_mul>
8002ee58:	2f f6       	sub	r6,-1
8002ee5a:	14 98       	mov	r8,r10
8002ee5c:	16 99       	mov	r9,r11
8002ee5e:	fa ea 00 04 	ld.d	r10,sp[4]
8002ee62:	e0 a0 07 a5 	rcall	8002fdac <__avr32_f64_add>
8002ee66:	fa eb 00 04 	st.d	sp[4],r10
8002ee6a:	40 58       	lddsp	r8,sp[0x14]
8002ee6c:	10 36       	cp.w	r6,r8
8002ee6e:	fe 9a ff ef 	brle	8002ee4c <__kernel_rem_pio2+0x33c>
8002ee72:	40 89       	lddsp	r9,sp[0x20]
8002ee74:	fa ea 00 04 	ld.d	r10,sp[4]
8002ee78:	2f f5       	sub	r5,-1
8002ee7a:	b3 2a       	st.d	r9++,r10
8002ee7c:	2f c3       	sub	r3,-4
8002ee7e:	50 89       	stdsp	sp[0x20],r9
8002ee80:	2f 82       	sub	r2,-8
8002ee82:	2f f1       	sub	r1,-1
8002ee84:	40 d8       	lddsp	r8,sp[0x34]
8002ee86:	10 35       	cp.w	r5,r8
8002ee88:	fe 9a ff d2 	brle	8002ee2c <__kernel_rem_pio2+0x31c>
8002ee8c:	08 96       	mov	r6,r4
8002ee8e:	10 97       	mov	r7,r8
8002ee90:	cb 5a       	rjmp	8002ebfa <__kernel_rem_pio2+0xea>
8002ee92:	50 50       	stdsp	sp[0x14],r0
8002ee94:	08 95       	mov	r5,r4
8002ee96:	40 e4       	lddsp	r4,sp[0x38]
8002ee98:	58 0c       	cp.w	r12,0
8002ee9a:	c1 30       	breq	8002eec0 <__kernel_rem_pio2+0x3b0>
8002ee9c:	c0 48       	rjmp	8002eea4 <__kernel_rem_pio2+0x394>
8002ee9e:	08 95       	mov	r5,r4
8002eea0:	50 50       	stdsp	sp[0x14],r0
8002eea2:	40 e4       	lddsp	r4,sp[0x38]
8002eea4:	20 17       	sub	r7,1
8002eea6:	fa c8 fd e0 	sub	r8,sp,-544
8002eeaa:	21 86       	sub	r6,24
8002eeac:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002eeb0:	c0 38       	rjmp	8002eeb6 <__kernel_rem_pio2+0x3a6>
8002eeb2:	20 17       	sub	r7,1
8002eeb4:	21 86       	sub	r6,24
8002eeb6:	70 09       	ld.w	r9,r8[0x0]
8002eeb8:	20 48       	sub	r8,4
8002eeba:	58 09       	cp.w	r9,0
8002eebc:	cf b0       	breq	8002eeb2 <__kernel_rem_pio2+0x3a2>
8002eebe:	c4 48       	rjmp	8002ef46 <__kernel_rem_pio2+0x436>
8002eec0:	fa ea 00 04 	ld.d	r10,sp[4]
8002eec4:	ec 0c 11 00 	rsub	r12,r6,0
8002eec8:	e0 a0 05 3e 	rcall	8002f944 <scalbn>
8002eecc:	30 08       	mov	r8,0
8002eece:	14 90       	mov	r0,r10
8002eed0:	16 91       	mov	r1,r11
8002eed2:	fc 19 41 70 	movh	r9,0x4170
8002eed6:	ee 03 15 02 	lsl	r3,r7,0x2
8002eeda:	e0 a0 08 8d 	rcall	8002fff4 <__avr32_f64_cmp_ge>
8002eede:	c2 a0       	breq	8002ef32 <__kernel_rem_pio2+0x422>
8002eee0:	30 08       	mov	r8,0
8002eee2:	fc 19 3e 70 	movh	r9,0x3e70
8002eee6:	00 9a       	mov	r10,r0
8002eee8:	02 9b       	mov	r11,r1
8002eeea:	e0 a0 05 a7 	rcall	8002fa38 <__avr32_f64_mul>
8002eeee:	e0 a0 07 e9 	rcall	8002fec0 <__avr32_f64_to_s32>
8002eef2:	e0 a0 07 fe 	rcall	8002feee <__avr32_s32_to_f64>
8002eef6:	30 08       	mov	r8,0
8002eef8:	fc 19 c1 70 	movh	r9,0xc170
8002eefc:	fa eb 00 04 	st.d	sp[4],r10
8002ef00:	e0 a0 05 9c 	rcall	8002fa38 <__avr32_f64_mul>
8002ef04:	16 99       	mov	r9,r11
8002ef06:	14 98       	mov	r8,r10
8002ef08:	02 9b       	mov	r11,r1
8002ef0a:	00 9a       	mov	r10,r0
8002ef0c:	e0 a0 07 50 	rcall	8002fdac <__avr32_f64_add>
8002ef10:	e0 a0 07 d8 	rcall	8002fec0 <__avr32_f64_to_s32>
8002ef14:	fa cb fd 90 	sub	r11,sp,-624
8002ef18:	f6 03 00 03 	add	r3,r11,r3
8002ef1c:	2f f7       	sub	r7,-1
8002ef1e:	e7 4c ff b0 	st.w	r3[-80],r12
8002ef22:	fa c9 fd 90 	sub	r9,sp,-624
8002ef26:	fa ea 00 04 	ld.d	r10,sp[4]
8002ef2a:	2e 86       	sub	r6,-24
8002ef2c:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002ef30:	c0 78       	rjmp	8002ef3e <__kernel_rem_pio2+0x42e>
8002ef32:	fa c8 fd 90 	sub	r8,sp,-624
8002ef36:	00 9a       	mov	r10,r0
8002ef38:	f0 03 00 03 	add	r3,r8,r3
8002ef3c:	02 9b       	mov	r11,r1
8002ef3e:	e0 a0 07 c1 	rcall	8002fec0 <__avr32_f64_to_s32>
8002ef42:	e7 4c ff b0 	st.w	r3[-80],r12
8002ef46:	0c 9c       	mov	r12,r6
8002ef48:	30 0a       	mov	r10,0
8002ef4a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ef4e:	fa c3 fd e0 	sub	r3,sp,-544
8002ef52:	e0 a0 04 f9 	rcall	8002f944 <scalbn>
8002ef56:	fa c2 ff c0 	sub	r2,sp,-64
8002ef5a:	0e 96       	mov	r6,r7
8002ef5c:	14 90       	mov	r0,r10
8002ef5e:	16 91       	mov	r1,r11
8002ef60:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002ef64:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002ef68:	c1 88       	rjmp	8002ef98 <__kernel_rem_pio2+0x488>
8002ef6a:	66 0c       	ld.w	r12,r3[0x0]
8002ef6c:	e0 a0 07 c1 	rcall	8002feee <__avr32_s32_to_f64>
8002ef70:	14 98       	mov	r8,r10
8002ef72:	16 99       	mov	r9,r11
8002ef74:	00 9a       	mov	r10,r0
8002ef76:	02 9b       	mov	r11,r1
8002ef78:	e0 a0 05 60 	rcall	8002fa38 <__avr32_f64_mul>
8002ef7c:	30 08       	mov	r8,0
8002ef7e:	e4 eb 00 00 	st.d	r2[0],r10
8002ef82:	fc 19 3e 70 	movh	r9,0x3e70
8002ef86:	00 9a       	mov	r10,r0
8002ef88:	02 9b       	mov	r11,r1
8002ef8a:	20 16       	sub	r6,1
8002ef8c:	e0 a0 05 56 	rcall	8002fa38 <__avr32_f64_mul>
8002ef90:	20 43       	sub	r3,4
8002ef92:	20 82       	sub	r2,8
8002ef94:	14 90       	mov	r0,r10
8002ef96:	16 91       	mov	r1,r11
8002ef98:	58 06       	cp.w	r6,0
8002ef9a:	ce 84       	brge	8002ef6a <__kernel_rem_pio2+0x45a>
8002ef9c:	fa cc ff 20 	sub	r12,sp,-224
8002efa0:	0a 91       	mov	r1,r5
8002efa2:	0e 93       	mov	r3,r7
8002efa4:	30 02       	mov	r2,0
8002efa6:	18 96       	mov	r6,r12
8002efa8:	0e 95       	mov	r5,r7
8002efaa:	c1 c8       	rjmp	8002efe2 <__kernel_rem_pio2+0x4d2>
8002efac:	ad 09       	ld.d	r8,r6++
8002efae:	2f f7       	sub	r7,-1
8002efb0:	a1 0b       	ld.d	r10,r0++
8002efb2:	e0 a0 05 43 	rcall	8002fa38 <__avr32_f64_mul>
8002efb6:	14 98       	mov	r8,r10
8002efb8:	16 99       	mov	r9,r11
8002efba:	fa ea 00 04 	ld.d	r10,sp[4]
8002efbe:	e0 a0 06 f7 	rcall	8002fdac <__avr32_f64_add>
8002efc2:	fa eb 00 04 	st.d	sp[4],r10
8002efc6:	40 3b       	lddsp	r11,sp[0xc]
8002efc8:	16 37       	cp.w	r7,r11
8002efca:	e0 89 00 05 	brgt	8002efd4 <__kernel_rem_pio2+0x4c4>
8002efce:	04 37       	cp.w	r7,r2
8002efd0:	fe 9a ff ee 	brle	8002efac <__kernel_rem_pio2+0x49c>
8002efd4:	06 96       	mov	r6,r3
8002efd6:	fa e8 00 04 	ld.d	r8,sp[4]
8002efda:	40 73       	lddsp	r3,sp[0x1c]
8002efdc:	ad 28       	st.d	r6++,r8
8002efde:	20 13       	sub	r3,1
8002efe0:	2f f2       	sub	r2,-1
8002efe2:	58 03       	cp.w	r3,0
8002efe4:	c0 f5       	brlt	8002f002 <__kernel_rem_pio2+0x4f2>
8002efe6:	fa c8 ff c0 	sub	r8,sp,-64
8002efea:	30 0a       	mov	r10,0
8002efec:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002eff0:	30 0b       	mov	r11,0
8002eff2:	50 73       	stdsp	sp[0x1c],r3
8002eff4:	4d 00       	lddpc	r0,8002f134 <__kernel_rem_pio2+0x624>
8002eff6:	0c 93       	mov	r3,r6
8002eff8:	fa eb 00 04 	st.d	sp[4],r10
8002effc:	30 07       	mov	r7,0
8002effe:	18 96       	mov	r6,r12
8002f000:	ce 3b       	rjmp	8002efc6 <__kernel_rem_pio2+0x4b6>
8002f002:	0a 97       	mov	r7,r5
8002f004:	40 6a       	lddsp	r10,sp[0x18]
8002f006:	02 95       	mov	r5,r1
8002f008:	58 2a       	cp.w	r10,2
8002f00a:	e0 89 00 07 	brgt	8002f018 <__kernel_rem_pio2+0x508>
8002f00e:	58 1a       	cp.w	r10,1
8002f010:	c1 14       	brge	8002f032 <__kernel_rem_pio2+0x522>
8002f012:	58 0a       	cp.w	r10,0
8002f014:	c1 70       	breq	8002f042 <__kernel_rem_pio2+0x532>
8002f016:	ce 68       	rjmp	8002f1e2 <__kernel_rem_pio2+0x6d2>
8002f018:	40 69       	lddsp	r9,sp[0x18]
8002f01a:	58 39       	cp.w	r9,3
8002f01c:	e0 81 00 e3 	brne	8002f1e2 <__kernel_rem_pio2+0x6d2>
8002f020:	ee c6 00 01 	sub	r6,r7,1
8002f024:	fa c8 ff 20 	sub	r8,sp,-224
8002f028:	0e 92       	mov	r2,r7
8002f02a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002f02e:	0c 93       	mov	r3,r6
8002f030:	c7 d8       	rjmp	8002f12a <__kernel_rem_pio2+0x61a>
8002f032:	fa c6 ff 20 	sub	r6,sp,-224
8002f036:	30 0c       	mov	r12,0
8002f038:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002f03c:	0e 93       	mov	r3,r7
8002f03e:	18 9a       	mov	r10,r12
8002f040:	c2 98       	rjmp	8002f092 <__kernel_rem_pio2+0x582>
8002f042:	40 6c       	lddsp	r12,sp[0x18]
8002f044:	0e 96       	mov	r6,r7
8002f046:	fa c8 ff 20 	sub	r8,sp,-224
8002f04a:	18 9a       	mov	r10,r12
8002f04c:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f050:	c0 a8       	rjmp	8002f064 <__kernel_rem_pio2+0x554>
8002f052:	ee e8 00 00 	ld.d	r8,r7[0]
8002f056:	18 9b       	mov	r11,r12
8002f058:	20 87       	sub	r7,8
8002f05a:	06 9a       	mov	r10,r3
8002f05c:	20 16       	sub	r6,1
8002f05e:	e0 a0 06 a7 	rcall	8002fdac <__avr32_f64_add>
8002f062:	16 9c       	mov	r12,r11
8002f064:	14 93       	mov	r3,r10
8002f066:	58 06       	cp.w	r6,0
8002f068:	cf 54       	brge	8002f052 <__kernel_rem_pio2+0x542>
8002f06a:	18 98       	mov	r8,r12
8002f06c:	ee 18 80 00 	eorh	r8,0x8000
8002f070:	58 05       	cp.w	r5,0
8002f072:	f0 0c 17 10 	movne	r12,r8
8002f076:	14 98       	mov	r8,r10
8002f078:	18 99       	mov	r9,r12
8002f07a:	e8 e9 00 00 	st.d	r4[0],r8
8002f07e:	cb 28       	rjmp	8002f1e2 <__kernel_rem_pio2+0x6d2>
8002f080:	ec e8 00 00 	ld.d	r8,r6[0]
8002f084:	18 9b       	mov	r11,r12
8002f086:	04 9a       	mov	r10,r2
8002f088:	20 13       	sub	r3,1
8002f08a:	e0 a0 06 91 	rcall	8002fdac <__avr32_f64_add>
8002f08e:	20 86       	sub	r6,8
8002f090:	16 9c       	mov	r12,r11
8002f092:	14 92       	mov	r2,r10
8002f094:	58 03       	cp.w	r3,0
8002f096:	cf 54       	brge	8002f080 <__kernel_rem_pio2+0x570>
8002f098:	18 9b       	mov	r11,r12
8002f09a:	18 98       	mov	r8,r12
8002f09c:	ee 18 80 00 	eorh	r8,0x8000
8002f0a0:	58 05       	cp.w	r5,0
8002f0a2:	f0 0c 17 10 	movne	r12,r8
8002f0a6:	18 93       	mov	r3,r12
8002f0a8:	14 92       	mov	r2,r10
8002f0aa:	16 99       	mov	r9,r11
8002f0ac:	e8 e3 00 00 	st.d	r4[0],r2
8002f0b0:	14 98       	mov	r8,r10
8002f0b2:	fa c3 ff 18 	sub	r3,sp,-232
8002f0b6:	fa ea 00 e0 	ld.d	r10,sp[224]
8002f0ba:	30 16       	mov	r6,1
8002f0bc:	e0 a0 05 aa 	rcall	8002fc10 <__avr32_f64_sub>
8002f0c0:	c0 78       	rjmp	8002f0ce <__kernel_rem_pio2+0x5be>
8002f0c2:	2f f6       	sub	r6,-1
8002f0c4:	a7 09       	ld.d	r8,r3++
8002f0c6:	18 9b       	mov	r11,r12
8002f0c8:	04 9a       	mov	r10,r2
8002f0ca:	e0 a0 06 71 	rcall	8002fdac <__avr32_f64_add>
8002f0ce:	16 9c       	mov	r12,r11
8002f0d0:	14 92       	mov	r2,r10
8002f0d2:	0e 36       	cp.w	r6,r7
8002f0d4:	fe 9a ff f7 	brle	8002f0c2 <__kernel_rem_pio2+0x5b2>
8002f0d8:	16 98       	mov	r8,r11
8002f0da:	ee 18 80 00 	eorh	r8,0x8000
8002f0de:	58 05       	cp.w	r5,0
8002f0e0:	f0 0c 17 10 	movne	r12,r8
8002f0e4:	14 98       	mov	r8,r10
8002f0e6:	18 99       	mov	r9,r12
8002f0e8:	e8 e9 00 08 	st.d	r4[8],r8
8002f0ec:	c7 b8       	rjmp	8002f1e2 <__kernel_rem_pio2+0x6d2>
8002f0ee:	e6 e0 00 00 	ld.d	r0,r3[0]
8002f0f2:	e6 e8 00 08 	ld.d	r8,r3[8]
8002f0f6:	00 9a       	mov	r10,r0
8002f0f8:	02 9b       	mov	r11,r1
8002f0fa:	e0 a0 06 59 	rcall	8002fdac <__avr32_f64_add>
8002f0fe:	fa eb 00 0c 	st.d	sp[12],r10
8002f102:	14 98       	mov	r8,r10
8002f104:	16 99       	mov	r9,r11
8002f106:	00 9a       	mov	r10,r0
8002f108:	02 9b       	mov	r11,r1
8002f10a:	e0 a0 05 83 	rcall	8002fc10 <__avr32_f64_sub>
8002f10e:	14 98       	mov	r8,r10
8002f110:	16 99       	mov	r9,r11
8002f112:	e6 ea 00 08 	ld.d	r10,r3[8]
8002f116:	e0 a0 06 4b 	rcall	8002fdac <__avr32_f64_add>
8002f11a:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f11e:	e6 eb 00 08 	st.d	r3[8],r10
8002f122:	e6 e9 00 00 	st.d	r3[0],r8
8002f126:	20 12       	sub	r2,1
8002f128:	20 83       	sub	r3,8
8002f12a:	58 02       	cp.w	r2,0
8002f12c:	fe 99 ff e1 	brgt	8002f0ee <__kernel_rem_pio2+0x5de>
8002f130:	0e 93       	mov	r3,r7
8002f132:	c2 18       	rjmp	8002f174 <__kernel_rem_pio2+0x664>
8002f134:	80 03       	ld.sh	r3,r0[0x0]
8002f136:	13 50       	ld.sh	r0,--r9
8002f138:	ec e0 00 00 	ld.d	r0,r6[0]
8002f13c:	ec e8 00 08 	ld.d	r8,r6[8]
8002f140:	00 9a       	mov	r10,r0
8002f142:	02 9b       	mov	r11,r1
8002f144:	e0 a0 06 34 	rcall	8002fdac <__avr32_f64_add>
8002f148:	fa eb 00 0c 	st.d	sp[12],r10
8002f14c:	14 98       	mov	r8,r10
8002f14e:	16 99       	mov	r9,r11
8002f150:	00 9a       	mov	r10,r0
8002f152:	02 9b       	mov	r11,r1
8002f154:	e0 a0 05 5e 	rcall	8002fc10 <__avr32_f64_sub>
8002f158:	14 98       	mov	r8,r10
8002f15a:	16 99       	mov	r9,r11
8002f15c:	ec ea 00 08 	ld.d	r10,r6[8]
8002f160:	e0 a0 06 26 	rcall	8002fdac <__avr32_f64_add>
8002f164:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f168:	ec eb 00 08 	st.d	r6[8],r10
8002f16c:	ec e9 00 00 	st.d	r6[0],r8
8002f170:	20 13       	sub	r3,1
8002f172:	20 86       	sub	r6,8
8002f174:	58 13       	cp.w	r3,1
8002f176:	fe 99 ff e1 	brgt	8002f138 <__kernel_rem_pio2+0x628>
8002f17a:	0e 96       	mov	r6,r7
8002f17c:	fa c8 ff 20 	sub	r8,sp,-224
8002f180:	30 0c       	mov	r12,0
8002f182:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f186:	18 9a       	mov	r10,r12
8002f188:	c0 a8       	rjmp	8002f19c <__kernel_rem_pio2+0x68c>
8002f18a:	ee e8 00 00 	ld.d	r8,r7[0]
8002f18e:	18 9b       	mov	r11,r12
8002f190:	20 87       	sub	r7,8
8002f192:	06 9a       	mov	r10,r3
8002f194:	20 16       	sub	r6,1
8002f196:	e0 a0 06 0b 	rcall	8002fdac <__avr32_f64_add>
8002f19a:	16 9c       	mov	r12,r11
8002f19c:	14 93       	mov	r3,r10
8002f19e:	58 16       	cp.w	r6,1
8002f1a0:	fe 99 ff f5 	brgt	8002f18a <__kernel_rem_pio2+0x67a>
8002f1a4:	58 05       	cp.w	r5,0
8002f1a6:	c0 e1       	brne	8002f1c2 <__kernel_rem_pio2+0x6b2>
8002f1a8:	fa e8 00 e0 	ld.d	r8,sp[224]
8002f1ac:	e8 e9 00 00 	st.d	r4[0],r8
8002f1b0:	fa e8 00 e8 	ld.d	r8,sp[232]
8002f1b4:	e8 e9 00 08 	st.d	r4[8],r8
8002f1b8:	18 99       	mov	r9,r12
8002f1ba:	14 98       	mov	r8,r10
8002f1bc:	e8 e9 00 10 	st.d	r4[16],r8
8002f1c0:	c1 18       	rjmp	8002f1e2 <__kernel_rem_pio2+0x6d2>
8002f1c2:	89 5a       	st.w	r4[0x14],r10
8002f1c4:	ee 1c 80 00 	eorh	r12,0x8000
8002f1c8:	89 4c       	st.w	r4[0x10],r12
8002f1ca:	43 88       	lddsp	r8,sp[0xe0]
8002f1cc:	ee 18 80 00 	eorh	r8,0x8000
8002f1d0:	89 08       	st.w	r4[0x0],r8
8002f1d2:	43 98       	lddsp	r8,sp[0xe4]
8002f1d4:	89 18       	st.w	r4[0x4],r8
8002f1d6:	43 a8       	lddsp	r8,sp[0xe8]
8002f1d8:	ee 18 80 00 	eorh	r8,0x8000
8002f1dc:	89 28       	st.w	r4[0x8],r8
8002f1de:	43 b8       	lddsp	r8,sp[0xec]
8002f1e0:	89 38       	st.w	r4[0xc],r8
8002f1e2:	40 58       	lddsp	r8,sp[0x14]
8002f1e4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8002f1e8:	fe 3d fd 90 	sub	sp,-624
8002f1ec:	d8 32       	popm	r0-r7,pc
8002f1ee:	d7 03       	nop

8002f1f0 <__kernel_sin>:
8002f1f0:	d4 31       	pushm	r0-r7,lr
8002f1f2:	20 4d       	sub	sp,16
8002f1f4:	fa e9 00 08 	st.d	sp[8],r8
8002f1f8:	50 0c       	stdsp	sp[0x0],r12
8002f1fa:	14 96       	mov	r6,r10
8002f1fc:	16 97       	mov	r7,r11
8002f1fe:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002f202:	e0 69 ff ff 	mov	r9,65535
8002f206:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f20a:	12 38       	cp.w	r8,r9
8002f20c:	e0 89 00 06 	brgt	8002f218 <__kernel_sin+0x28>
8002f210:	e0 a0 06 58 	rcall	8002fec0 <__avr32_f64_to_s32>
8002f214:	e0 80 00 b3 	breq	8002f37a <__kernel_sin+0x18a>
8002f218:	0c 98       	mov	r8,r6
8002f21a:	0e 99       	mov	r9,r7
8002f21c:	0c 9a       	mov	r10,r6
8002f21e:	0e 9b       	mov	r11,r7
8002f220:	e0 a0 04 0c 	rcall	8002fa38 <__avr32_f64_mul>
8002f224:	0c 98       	mov	r8,r6
8002f226:	14 94       	mov	r4,r10
8002f228:	16 95       	mov	r5,r11
8002f22a:	0e 99       	mov	r9,r7
8002f22c:	e0 a0 04 06 	rcall	8002fa38 <__avr32_f64_mul>
8002f230:	e0 68 d5 7c 	mov	r8,54652
8002f234:	ea 18 5a cf 	orh	r8,0x5acf
8002f238:	e0 69 d9 3a 	mov	r9,55610
8002f23c:	ea 19 3d e5 	orh	r9,0x3de5
8002f240:	14 90       	mov	r0,r10
8002f242:	16 91       	mov	r1,r11
8002f244:	08 9a       	mov	r10,r4
8002f246:	0a 9b       	mov	r11,r5
8002f248:	e0 a0 03 f8 	rcall	8002fa38 <__avr32_f64_mul>
8002f24c:	e0 68 9c eb 	mov	r8,40171
8002f250:	ea 18 8a 2b 	orh	r8,0x8a2b
8002f254:	e0 69 e5 e6 	mov	r9,58854
8002f258:	ea 19 3e 5a 	orh	r9,0x3e5a
8002f25c:	e0 a0 04 da 	rcall	8002fc10 <__avr32_f64_sub>
8002f260:	14 98       	mov	r8,r10
8002f262:	16 99       	mov	r9,r11
8002f264:	08 9a       	mov	r10,r4
8002f266:	0a 9b       	mov	r11,r5
8002f268:	e0 a0 03 e8 	rcall	8002fa38 <__avr32_f64_mul>
8002f26c:	e0 68 fe 7d 	mov	r8,65149
8002f270:	ea 18 57 b1 	orh	r8,0x57b1
8002f274:	e0 69 1d e3 	mov	r9,7651
8002f278:	ea 19 3e c7 	orh	r9,0x3ec7
8002f27c:	e0 a0 05 98 	rcall	8002fdac <__avr32_f64_add>
8002f280:	14 98       	mov	r8,r10
8002f282:	16 99       	mov	r9,r11
8002f284:	08 9a       	mov	r10,r4
8002f286:	0a 9b       	mov	r11,r5
8002f288:	e0 a0 03 d8 	rcall	8002fa38 <__avr32_f64_mul>
8002f28c:	e0 68 61 d5 	mov	r8,25045
8002f290:	ea 18 19 c1 	orh	r8,0x19c1
8002f294:	e0 69 01 a0 	mov	r9,416
8002f298:	ea 19 3f 2a 	orh	r9,0x3f2a
8002f29c:	e0 a0 04 ba 	rcall	8002fc10 <__avr32_f64_sub>
8002f2a0:	14 98       	mov	r8,r10
8002f2a2:	16 99       	mov	r9,r11
8002f2a4:	08 9a       	mov	r10,r4
8002f2a6:	0a 9b       	mov	r11,r5
8002f2a8:	e0 a0 03 c8 	rcall	8002fa38 <__avr32_f64_mul>
8002f2ac:	e0 68 f8 a6 	mov	r8,63654
8002f2b0:	ea 18 11 10 	orh	r8,0x1110
8002f2b4:	e0 69 11 11 	mov	r9,4369
8002f2b8:	ea 19 3f 81 	orh	r9,0x3f81
8002f2bc:	e0 a0 05 78 	rcall	8002fdac <__avr32_f64_add>
8002f2c0:	40 08       	lddsp	r8,sp[0x0]
8002f2c2:	14 92       	mov	r2,r10
8002f2c4:	16 93       	mov	r3,r11
8002f2c6:	58 08       	cp.w	r8,0
8002f2c8:	c1 e1       	brne	8002f304 <__kernel_sin+0x114>
8002f2ca:	14 98       	mov	r8,r10
8002f2cc:	06 99       	mov	r9,r3
8002f2ce:	08 9a       	mov	r10,r4
8002f2d0:	0a 9b       	mov	r11,r5
8002f2d2:	e0 a0 03 b3 	rcall	8002fa38 <__avr32_f64_mul>
8002f2d6:	e0 68 55 49 	mov	r8,21833
8002f2da:	ea 18 55 55 	orh	r8,0x5555
8002f2de:	e0 69 55 55 	mov	r9,21845
8002f2e2:	ea 19 3f c5 	orh	r9,0x3fc5
8002f2e6:	e0 a0 04 95 	rcall	8002fc10 <__avr32_f64_sub>
8002f2ea:	14 98       	mov	r8,r10
8002f2ec:	16 99       	mov	r9,r11
8002f2ee:	00 9a       	mov	r10,r0
8002f2f0:	02 9b       	mov	r11,r1
8002f2f2:	e0 a0 03 a3 	rcall	8002fa38 <__avr32_f64_mul>
8002f2f6:	14 98       	mov	r8,r10
8002f2f8:	16 99       	mov	r9,r11
8002f2fa:	0c 9a       	mov	r10,r6
8002f2fc:	0e 9b       	mov	r11,r7
8002f2fe:	e0 a0 05 57 	rcall	8002fdac <__avr32_f64_add>
8002f302:	c3 a8       	rjmp	8002f376 <__kernel_sin+0x186>
8002f304:	30 08       	mov	r8,0
8002f306:	fc 19 3f e0 	movh	r9,0x3fe0
8002f30a:	fa ea 00 08 	ld.d	r10,sp[8]
8002f30e:	e0 a0 03 95 	rcall	8002fa38 <__avr32_f64_mul>
8002f312:	04 98       	mov	r8,r2
8002f314:	fa eb 00 00 	st.d	sp[0],r10
8002f318:	06 99       	mov	r9,r3
8002f31a:	00 9a       	mov	r10,r0
8002f31c:	02 9b       	mov	r11,r1
8002f31e:	e0 a0 03 8d 	rcall	8002fa38 <__avr32_f64_mul>
8002f322:	14 98       	mov	r8,r10
8002f324:	16 99       	mov	r9,r11
8002f326:	fa ea 00 00 	ld.d	r10,sp[0]
8002f32a:	e0 a0 04 73 	rcall	8002fc10 <__avr32_f64_sub>
8002f32e:	14 98       	mov	r8,r10
8002f330:	16 99       	mov	r9,r11
8002f332:	08 9a       	mov	r10,r4
8002f334:	0a 9b       	mov	r11,r5
8002f336:	e0 a0 03 81 	rcall	8002fa38 <__avr32_f64_mul>
8002f33a:	fa e8 00 08 	ld.d	r8,sp[8]
8002f33e:	e0 a0 04 69 	rcall	8002fc10 <__avr32_f64_sub>
8002f342:	e0 68 55 49 	mov	r8,21833
8002f346:	ea 18 55 55 	orh	r8,0x5555
8002f34a:	14 94       	mov	r4,r10
8002f34c:	16 95       	mov	r5,r11
8002f34e:	e0 69 55 55 	mov	r9,21845
8002f352:	ea 19 3f c5 	orh	r9,0x3fc5
8002f356:	00 9a       	mov	r10,r0
8002f358:	02 9b       	mov	r11,r1
8002f35a:	e0 a0 03 6f 	rcall	8002fa38 <__avr32_f64_mul>
8002f35e:	14 98       	mov	r8,r10
8002f360:	16 99       	mov	r9,r11
8002f362:	08 9a       	mov	r10,r4
8002f364:	0a 9b       	mov	r11,r5
8002f366:	e0 a0 05 23 	rcall	8002fdac <__avr32_f64_add>
8002f36a:	14 98       	mov	r8,r10
8002f36c:	16 99       	mov	r9,r11
8002f36e:	0c 9a       	mov	r10,r6
8002f370:	0e 9b       	mov	r11,r7
8002f372:	e0 a0 04 4f 	rcall	8002fc10 <__avr32_f64_sub>
8002f376:	14 96       	mov	r6,r10
8002f378:	16 97       	mov	r7,r11
8002f37a:	0c 9a       	mov	r10,r6
8002f37c:	0e 9b       	mov	r11,r7
8002f37e:	2f cd       	sub	sp,-16
8002f380:	d8 32       	popm	r0-r7,pc
8002f382:	d7 03       	nop

8002f384 <atan>:
8002f384:	d4 31       	pushm	r0-r7,lr
8002f386:	20 1d       	sub	sp,4
8002f388:	50 0b       	stdsp	sp[0x0],r11
8002f38a:	16 96       	mov	r6,r11
8002f38c:	14 97       	mov	r7,r10
8002f38e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
8002f392:	e0 68 ff ff 	mov	r8,65535
8002f396:	ea 18 44 0f 	orh	r8,0x440f
8002f39a:	10 33       	cp.w	r3,r8
8002f39c:	e0 8a 00 24 	brle	8002f3e4 <atan+0x60>
8002f3a0:	fc 1c 7f f0 	movh	r12,0x7ff0
8002f3a4:	18 33       	cp.w	r3,r12
8002f3a6:	e0 89 00 08 	brgt	8002f3b6 <atan+0x32>
8002f3aa:	5f 0c       	sreq	r12
8002f3ac:	58 0a       	cp.w	r10,0
8002f3ae:	5f 18       	srne	r8
8002f3b0:	f9 e8 00 08 	and	r8,r12,r8
8002f3b4:	c0 80       	breq	8002f3c4 <atan+0x40>
8002f3b6:	0c 9b       	mov	r11,r6
8002f3b8:	0e 9a       	mov	r10,r7
8002f3ba:	0c 99       	mov	r9,r6
8002f3bc:	0e 98       	mov	r8,r7
8002f3be:	e0 a0 04 f7 	rcall	8002fdac <__avr32_f64_add>
8002f3c2:	c5 99       	rjmp	8002f674 <atan+0x2f0>
8002f3c4:	e0 68 21 fb 	mov	r8,8699
8002f3c8:	ea 18 bf f9 	orh	r8,0xbff9
8002f3cc:	e0 66 21 fb 	mov	r6,8699
8002f3d0:	ea 16 3f f9 	orh	r6,0x3ff9
8002f3d4:	e0 67 2d 18 	mov	r7,11544
8002f3d8:	ea 17 54 44 	orh	r7,0x5444
8002f3dc:	58 0b       	cp.w	r11,0
8002f3de:	f0 06 17 a0 	movle	r6,r8
8002f3e2:	c6 d9       	rjmp	8002f6bc <atan+0x338>
8002f3e4:	e0 68 ff ff 	mov	r8,65535
8002f3e8:	ea 18 3f db 	orh	r8,0x3fdb
8002f3ec:	10 33       	cp.w	r3,r8
8002f3ee:	e0 89 00 1d 	brgt	8002f428 <atan+0xa4>
8002f3f2:	e0 6c ff ff 	mov	r12,65535
8002f3f6:	ea 1c 3e 1f 	orh	r12,0x3e1f
8002f3fa:	18 33       	cp.w	r3,r12
8002f3fc:	e0 89 00 73 	brgt	8002f4e2 <atan+0x15e>
8002f400:	e0 68 75 9c 	mov	r8,30108
8002f404:	ea 18 88 00 	orh	r8,0x8800
8002f408:	e0 69 e4 3c 	mov	r9,58428
8002f40c:	ea 19 7e 37 	orh	r9,0x7e37
8002f410:	0c 9b       	mov	r11,r6
8002f412:	e0 a0 04 cd 	rcall	8002fdac <__avr32_f64_add>
8002f416:	14 98       	mov	r8,r10
8002f418:	16 99       	mov	r9,r11
8002f41a:	30 0a       	mov	r10,0
8002f41c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f420:	e0 a0 06 1e 	rcall	8003005c <__avr32_f64_cmp_lt>
8002f424:	c5 f0       	breq	8002f4e2 <atan+0x15e>
8002f426:	c4 b9       	rjmp	8002f6bc <atan+0x338>
8002f428:	0c 9b       	mov	r11,r6
8002f42a:	c5 1d       	rcall	8002f6cc <fabs>
8002f42c:	e0 68 ff ff 	mov	r8,65535
8002f430:	ea 18 3f f2 	orh	r8,0x3ff2
8002f434:	14 94       	mov	r4,r10
8002f436:	16 95       	mov	r5,r11
8002f438:	10 33       	cp.w	r3,r8
8002f43a:	e0 89 00 33 	brgt	8002f4a0 <atan+0x11c>
8002f43e:	e0 6c ff ff 	mov	r12,65535
8002f442:	ea 1c 3f e5 	orh	r12,0x3fe5
8002f446:	18 33       	cp.w	r3,r12
8002f448:	e0 89 00 14 	brgt	8002f470 <atan+0xec>
8002f44c:	0a 99       	mov	r9,r5
8002f44e:	14 98       	mov	r8,r10
8002f450:	e0 a0 04 ae 	rcall	8002fdac <__avr32_f64_add>
8002f454:	30 08       	mov	r8,0
8002f456:	fc 19 3f f0 	movh	r9,0x3ff0
8002f45a:	e0 a0 03 db 	rcall	8002fc10 <__avr32_f64_sub>
8002f45e:	30 08       	mov	r8,0
8002f460:	14 96       	mov	r6,r10
8002f462:	16 97       	mov	r7,r11
8002f464:	08 9a       	mov	r10,r4
8002f466:	0a 9b       	mov	r11,r5
8002f468:	fc 19 40 00 	movh	r9,0x4000
8002f46c:	30 05       	mov	r5,0
8002f46e:	c0 e8       	rjmp	8002f48a <atan+0x106>
8002f470:	30 08       	mov	r8,0
8002f472:	fc 19 3f f0 	movh	r9,0x3ff0
8002f476:	e0 a0 03 cd 	rcall	8002fc10 <__avr32_f64_sub>
8002f47a:	30 08       	mov	r8,0
8002f47c:	14 96       	mov	r6,r10
8002f47e:	16 97       	mov	r7,r11
8002f480:	08 9a       	mov	r10,r4
8002f482:	0a 9b       	mov	r11,r5
8002f484:	fc 19 3f f0 	movh	r9,0x3ff0
8002f488:	30 15       	mov	r5,1
8002f48a:	e0 a0 04 91 	rcall	8002fdac <__avr32_f64_add>
8002f48e:	14 98       	mov	r8,r10
8002f490:	16 99       	mov	r9,r11
8002f492:	0c 9a       	mov	r10,r6
8002f494:	0e 9b       	mov	r11,r7
8002f496:	e0 a0 06 17 	rcall	800300c4 <__avr32_f64_div>
8002f49a:	16 96       	mov	r6,r11
8002f49c:	14 97       	mov	r7,r10
8002f49e:	c2 38       	rjmp	8002f4e4 <atan+0x160>
8002f4a0:	e0 68 7f ff 	mov	r8,32767
8002f4a4:	ea 18 40 03 	orh	r8,0x4003
8002f4a8:	10 33       	cp.w	r3,r8
8002f4aa:	e0 89 00 15 	brgt	8002f4d4 <atan+0x150>
8002f4ae:	30 08       	mov	r8,0
8002f4b0:	fc 19 3f f8 	movh	r9,0x3ff8
8002f4b4:	e0 a0 03 ae 	rcall	8002fc10 <__avr32_f64_sub>
8002f4b8:	30 08       	mov	r8,0
8002f4ba:	16 97       	mov	r7,r11
8002f4bc:	fc 19 3f f8 	movh	r9,0x3ff8
8002f4c0:	0a 9b       	mov	r11,r5
8002f4c2:	14 96       	mov	r6,r10
8002f4c4:	08 9a       	mov	r10,r4
8002f4c6:	e0 a0 02 b9 	rcall	8002fa38 <__avr32_f64_mul>
8002f4ca:	30 08       	mov	r8,0
8002f4cc:	fc 19 3f f0 	movh	r9,0x3ff0
8002f4d0:	30 25       	mov	r5,2
8002f4d2:	cd cb       	rjmp	8002f48a <atan+0x106>
8002f4d4:	14 98       	mov	r8,r10
8002f4d6:	0a 99       	mov	r9,r5
8002f4d8:	30 0a       	mov	r10,0
8002f4da:	fc 1b bf f0 	movh	r11,0xbff0
8002f4de:	30 35       	mov	r5,3
8002f4e0:	cd bb       	rjmp	8002f496 <atan+0x112>
8002f4e2:	3f f5       	mov	r5,-1
8002f4e4:	0c 99       	mov	r9,r6
8002f4e6:	0e 98       	mov	r8,r7
8002f4e8:	0c 9b       	mov	r11,r6
8002f4ea:	0e 9a       	mov	r10,r7
8002f4ec:	e0 a0 02 a6 	rcall	8002fa38 <__avr32_f64_mul>
8002f4f0:	16 91       	mov	r1,r11
8002f4f2:	14 90       	mov	r0,r10
8002f4f4:	02 99       	mov	r9,r1
8002f4f6:	14 98       	mov	r8,r10
8002f4f8:	e0 a0 02 a0 	rcall	8002fa38 <__avr32_f64_mul>
8002f4fc:	e0 68 da 11 	mov	r8,55825
8002f500:	ea 18 e3 22 	orh	r8,0xe322
8002f504:	14 92       	mov	r2,r10
8002f506:	16 93       	mov	r3,r11
8002f508:	e0 69 ad 3a 	mov	r9,44346
8002f50c:	ea 19 3f 90 	orh	r9,0x3f90
8002f510:	e0 a0 02 94 	rcall	8002fa38 <__avr32_f64_mul>
8002f514:	e0 68 0d eb 	mov	r8,3563
8002f518:	ea 18 24 76 	orh	r8,0x2476
8002f51c:	e0 69 7b 4b 	mov	r9,31563
8002f520:	ea 19 3f a9 	orh	r9,0x3fa9
8002f524:	e0 a0 04 44 	rcall	8002fdac <__avr32_f64_add>
8002f528:	14 98       	mov	r8,r10
8002f52a:	16 99       	mov	r9,r11
8002f52c:	04 9a       	mov	r10,r2
8002f52e:	06 9b       	mov	r11,r3
8002f530:	e0 a0 02 84 	rcall	8002fa38 <__avr32_f64_mul>
8002f534:	e0 68 3d 51 	mov	r8,15697
8002f538:	ea 18 a0 d0 	orh	r8,0xa0d0
8002f53c:	e0 69 0d 66 	mov	r9,3430
8002f540:	ea 19 3f b1 	orh	r9,0x3fb1
8002f544:	e0 a0 04 34 	rcall	8002fdac <__avr32_f64_add>
8002f548:	14 98       	mov	r8,r10
8002f54a:	16 99       	mov	r9,r11
8002f54c:	04 9a       	mov	r10,r2
8002f54e:	06 9b       	mov	r11,r3
8002f550:	e0 a0 02 74 	rcall	8002fa38 <__avr32_f64_mul>
8002f554:	e0 68 20 6e 	mov	r8,8302
8002f558:	ea 18 c5 4c 	orh	r8,0xc54c
8002f55c:	e0 69 45 cd 	mov	r9,17869
8002f560:	ea 19 3f b7 	orh	r9,0x3fb7
8002f564:	e0 a0 04 24 	rcall	8002fdac <__avr32_f64_add>
8002f568:	14 98       	mov	r8,r10
8002f56a:	16 99       	mov	r9,r11
8002f56c:	04 9a       	mov	r10,r2
8002f56e:	06 9b       	mov	r11,r3
8002f570:	e0 a0 02 64 	rcall	8002fa38 <__avr32_f64_mul>
8002f574:	e0 68 83 ff 	mov	r8,33791
8002f578:	ea 18 92 00 	orh	r8,0x9200
8002f57c:	e0 69 49 24 	mov	r9,18724
8002f580:	ea 19 3f c2 	orh	r9,0x3fc2
8002f584:	e0 a0 04 14 	rcall	8002fdac <__avr32_f64_add>
8002f588:	14 98       	mov	r8,r10
8002f58a:	16 99       	mov	r9,r11
8002f58c:	04 9a       	mov	r10,r2
8002f58e:	06 9b       	mov	r11,r3
8002f590:	e0 a0 02 54 	rcall	8002fa38 <__avr32_f64_mul>
8002f594:	e0 68 55 0d 	mov	r8,21773
8002f598:	ea 18 55 55 	orh	r8,0x5555
8002f59c:	e0 69 55 55 	mov	r9,21845
8002f5a0:	ea 19 3f d5 	orh	r9,0x3fd5
8002f5a4:	e0 a0 04 04 	rcall	8002fdac <__avr32_f64_add>
8002f5a8:	14 98       	mov	r8,r10
8002f5aa:	16 99       	mov	r9,r11
8002f5ac:	00 9a       	mov	r10,r0
8002f5ae:	02 9b       	mov	r11,r1
8002f5b0:	e0 a0 02 44 	rcall	8002fa38 <__avr32_f64_mul>
8002f5b4:	e0 68 6c 2f 	mov	r8,27695
8002f5b8:	ea 18 2c 6a 	orh	r8,0x2c6a
8002f5bc:	e0 69 b4 44 	mov	r9,46148
8002f5c0:	ea 19 bf a2 	orh	r9,0xbfa2
8002f5c4:	14 90       	mov	r0,r10
8002f5c6:	16 91       	mov	r1,r11
8002f5c8:	04 9a       	mov	r10,r2
8002f5ca:	06 9b       	mov	r11,r3
8002f5cc:	e0 a0 02 36 	rcall	8002fa38 <__avr32_f64_mul>
8002f5d0:	e0 68 fd 9a 	mov	r8,64922
8002f5d4:	ea 18 52 de 	orh	r8,0x52de
8002f5d8:	e0 69 de 2d 	mov	r9,56877
8002f5dc:	ea 19 3f ad 	orh	r9,0x3fad
8002f5e0:	e0 a0 03 18 	rcall	8002fc10 <__avr32_f64_sub>
8002f5e4:	14 98       	mov	r8,r10
8002f5e6:	16 99       	mov	r9,r11
8002f5e8:	04 9a       	mov	r10,r2
8002f5ea:	06 9b       	mov	r11,r3
8002f5ec:	e0 a0 02 26 	rcall	8002fa38 <__avr32_f64_mul>
8002f5f0:	e0 68 9a 6d 	mov	r8,39533
8002f5f4:	ea 18 af 74 	orh	r8,0xaf74
8002f5f8:	e0 69 b0 f2 	mov	r9,45298
8002f5fc:	ea 19 3f b3 	orh	r9,0x3fb3
8002f600:	e0 a0 03 08 	rcall	8002fc10 <__avr32_f64_sub>
8002f604:	14 98       	mov	r8,r10
8002f606:	16 99       	mov	r9,r11
8002f608:	04 9a       	mov	r10,r2
8002f60a:	06 9b       	mov	r11,r3
8002f60c:	e0 a0 02 16 	rcall	8002fa38 <__avr32_f64_mul>
8002f610:	e0 68 16 71 	mov	r8,5745
8002f614:	ea 18 fe 23 	orh	r8,0xfe23
8002f618:	e0 69 71 c6 	mov	r9,29126
8002f61c:	ea 19 3f bc 	orh	r9,0x3fbc
8002f620:	e0 a0 02 f8 	rcall	8002fc10 <__avr32_f64_sub>
8002f624:	14 98       	mov	r8,r10
8002f626:	16 99       	mov	r9,r11
8002f628:	04 9a       	mov	r10,r2
8002f62a:	06 9b       	mov	r11,r3
8002f62c:	e0 a0 02 06 	rcall	8002fa38 <__avr32_f64_mul>
8002f630:	e0 68 eb c4 	mov	r8,60356
8002f634:	ea 18 99 98 	orh	r8,0x9998
8002f638:	e0 69 99 99 	mov	r9,39321
8002f63c:	ea 19 3f c9 	orh	r9,0x3fc9
8002f640:	e0 a0 02 e8 	rcall	8002fc10 <__avr32_f64_sub>
8002f644:	14 98       	mov	r8,r10
8002f646:	16 99       	mov	r9,r11
8002f648:	04 9a       	mov	r10,r2
8002f64a:	06 9b       	mov	r11,r3
8002f64c:	cf 6d       	rcall	8002fa38 <__avr32_f64_mul>
8002f64e:	14 98       	mov	r8,r10
8002f650:	16 99       	mov	r9,r11
8002f652:	5b f5       	cp.w	r5,-1
8002f654:	c1 31       	brne	8002f67a <atan+0x2f6>
8002f656:	00 9a       	mov	r10,r0
8002f658:	02 9b       	mov	r11,r1
8002f65a:	e0 a0 03 a9 	rcall	8002fdac <__avr32_f64_add>
8002f65e:	14 98       	mov	r8,r10
8002f660:	16 99       	mov	r9,r11
8002f662:	0e 9a       	mov	r10,r7
8002f664:	0c 9b       	mov	r11,r6
8002f666:	ce 9d       	rcall	8002fa38 <__avr32_f64_mul>
8002f668:	14 98       	mov	r8,r10
8002f66a:	16 99       	mov	r9,r11
8002f66c:	0e 9a       	mov	r10,r7
8002f66e:	0c 9b       	mov	r11,r6
8002f670:	e0 a0 02 d0 	rcall	8002fc10 <__avr32_f64_sub>
8002f674:	16 96       	mov	r6,r11
8002f676:	14 97       	mov	r7,r10
8002f678:	c2 28       	rjmp	8002f6bc <atan+0x338>
8002f67a:	00 9a       	mov	r10,r0
8002f67c:	02 9b       	mov	r11,r1
8002f67e:	e0 a0 03 97 	rcall	8002fdac <__avr32_f64_add>
8002f682:	14 98       	mov	r8,r10
8002f684:	16 99       	mov	r9,r11
8002f686:	0e 9a       	mov	r10,r7
8002f688:	0c 9b       	mov	r11,r6
8002f68a:	cd 7d       	rcall	8002fa38 <__avr32_f64_mul>
8002f68c:	48 e8       	lddpc	r8,8002f6c4 <atan+0x340>
8002f68e:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
8002f692:	e0 a0 02 bf 	rcall	8002fc10 <__avr32_f64_sub>
8002f696:	0c 99       	mov	r9,r6
8002f698:	0e 98       	mov	r8,r7
8002f69a:	e0 a0 02 bb 	rcall	8002fc10 <__avr32_f64_sub>
8002f69e:	14 98       	mov	r8,r10
8002f6a0:	16 99       	mov	r9,r11
8002f6a2:	48 aa       	lddpc	r10,8002f6c8 <atan+0x344>
8002f6a4:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
8002f6a8:	e0 a0 02 b4 	rcall	8002fc10 <__avr32_f64_sub>
8002f6ac:	40 0c       	lddsp	r12,sp[0x0]
8002f6ae:	16 96       	mov	r6,r11
8002f6b0:	14 97       	mov	r7,r10
8002f6b2:	ee 16 80 00 	eorh	r6,0x8000
8002f6b6:	58 0c       	cp.w	r12,0
8002f6b8:	c0 25       	brlt	8002f6bc <atan+0x338>
8002f6ba:	16 96       	mov	r6,r11
8002f6bc:	0c 9b       	mov	r11,r6
8002f6be:	0e 9a       	mov	r10,r7
8002f6c0:	2f fd       	sub	sp,-4
8002f6c2:	d8 32       	popm	r0-r7,pc
8002f6c4:	80 03       	ld.sh	r3,r0[0x0]
8002f6c6:	13 90       	ld.ub	r0,r9[0x1]
8002f6c8:	80 03       	ld.sh	r3,r0[0x0]
8002f6ca:	13 b0       	ld.ub	r0,r9[0x3]

8002f6cc <fabs>:
8002f6cc:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002f6d0:	12 9b       	mov	r11,r9
8002f6d2:	5e fc       	retal	r12

8002f6d4 <finite>:
8002f6d4:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002f6d8:	fc 18 80 10 	movh	r8,0x8010
8002f6dc:	f6 08 00 0c 	add	r12,r11,r8
8002f6e0:	bf 9c       	lsr	r12,0x1f
8002f6e2:	5e fc       	retal	r12

8002f6e4 <floor>:
8002f6e4:	d4 31       	pushm	r0-r7,lr
8002f6e6:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8002f6ea:	14 98       	mov	r8,r10
8002f6ec:	16 99       	mov	r9,r11
8002f6ee:	14 92       	mov	r2,r10
8002f6f0:	16 93       	mov	r3,r11
8002f6f2:	16 97       	mov	r7,r11
8002f6f4:	14 91       	mov	r1,r10
8002f6f6:	14 96       	mov	r6,r10
8002f6f8:	e8 c5 03 ff 	sub	r5,r4,1023
8002f6fc:	59 35       	cp.w	r5,19
8002f6fe:	e0 89 00 48 	brgt	8002f78e <floor+0xaa>
8002f702:	58 05       	cp.w	r5,0
8002f704:	c2 04       	brge	8002f744 <floor+0x60>
8002f706:	e0 68 75 9c 	mov	r8,30108
8002f70a:	ea 18 88 00 	orh	r8,0x8800
8002f70e:	e0 69 e4 3c 	mov	r9,58428
8002f712:	ea 19 7e 37 	orh	r9,0x7e37
8002f716:	e0 a0 03 4b 	rcall	8002fdac <__avr32_f64_add>
8002f71a:	14 98       	mov	r8,r10
8002f71c:	16 99       	mov	r9,r11
8002f71e:	30 0a       	mov	r10,0
8002f720:	30 0b       	mov	r11,0
8002f722:	e0 a0 04 9d 	rcall	8003005c <__avr32_f64_cmp_lt>
8002f726:	c6 a0       	breq	8002f7fa <floor+0x116>
8002f728:	58 03       	cp.w	r3,0
8002f72a:	c0 45       	brlt	8002f732 <floor+0x4e>
8002f72c:	30 06       	mov	r6,0
8002f72e:	0c 97       	mov	r7,r6
8002f730:	c6 58       	rjmp	8002f7fa <floor+0x116>
8002f732:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8002f736:	f1 e2 10 06 	or	r6,r8,r2
8002f73a:	fc 18 bf f0 	movh	r8,0xbff0
8002f73e:	f0 07 17 10 	movne	r7,r8
8002f742:	c2 48       	rjmp	8002f78a <floor+0xa6>
8002f744:	ee 74 ff ff 	mov	r4,1048575
8002f748:	e8 05 08 44 	asr	r4,r4,r5
8002f74c:	e9 eb 00 0c 	and	r12,r4,r11
8002f750:	f9 ea 10 01 	or	r1,r12,r10
8002f754:	c5 50       	breq	8002f7fe <floor+0x11a>
8002f756:	e0 68 75 9c 	mov	r8,30108
8002f75a:	ea 18 88 00 	orh	r8,0x8800
8002f75e:	e0 69 e4 3c 	mov	r9,58428
8002f762:	ea 19 7e 37 	orh	r9,0x7e37
8002f766:	e0 a0 03 23 	rcall	8002fdac <__avr32_f64_add>
8002f76a:	14 98       	mov	r8,r10
8002f76c:	16 99       	mov	r9,r11
8002f76e:	30 0a       	mov	r10,0
8002f770:	30 0b       	mov	r11,0
8002f772:	e0 a0 04 75 	rcall	8003005c <__avr32_f64_cmp_lt>
8002f776:	c4 20       	breq	8002f7fa <floor+0x116>
8002f778:	58 03       	cp.w	r3,0
8002f77a:	c0 64       	brge	8002f786 <floor+0xa2>
8002f77c:	fc 18 00 10 	movh	r8,0x10
8002f780:	f0 05 08 45 	asr	r5,r8,r5
8002f784:	0a 07       	add	r7,r5
8002f786:	5c d4       	com	r4
8002f788:	08 67       	and	r7,r4
8002f78a:	30 06       	mov	r6,0
8002f78c:	c3 78       	rjmp	8002f7fa <floor+0x116>
8002f78e:	e0 45 00 33 	cp.w	r5,51
8002f792:	e0 8a 00 0a 	brle	8002f7a6 <floor+0xc2>
8002f796:	e0 45 04 00 	cp.w	r5,1024
8002f79a:	c3 21       	brne	8002f7fe <floor+0x11a>
8002f79c:	e0 a0 03 08 	rcall	8002fdac <__avr32_f64_add>
8002f7a0:	14 98       	mov	r8,r10
8002f7a2:	16 99       	mov	r9,r11
8002f7a4:	c2 d8       	rjmp	8002f7fe <floor+0x11a>
8002f7a6:	3f fc       	mov	r12,-1
8002f7a8:	e8 c4 04 13 	sub	r4,r4,1043
8002f7ac:	f8 04 0a 44 	lsr	r4,r12,r4
8002f7b0:	e9 ea 00 0c 	and	r12,r4,r10
8002f7b4:	c2 50       	breq	8002f7fe <floor+0x11a>
8002f7b6:	e0 68 75 9c 	mov	r8,30108
8002f7ba:	ea 18 88 00 	orh	r8,0x8800
8002f7be:	e0 69 e4 3c 	mov	r9,58428
8002f7c2:	ea 19 7e 37 	orh	r9,0x7e37
8002f7c6:	e0 a0 02 f3 	rcall	8002fdac <__avr32_f64_add>
8002f7ca:	14 98       	mov	r8,r10
8002f7cc:	16 99       	mov	r9,r11
8002f7ce:	30 0a       	mov	r10,0
8002f7d0:	30 0b       	mov	r11,0
8002f7d2:	e0 a0 04 45 	rcall	8003005c <__avr32_f64_cmp_lt>
8002f7d6:	c1 20       	breq	8002f7fa <floor+0x116>
8002f7d8:	58 03       	cp.w	r3,0
8002f7da:	c0 e4       	brge	8002f7f6 <floor+0x112>
8002f7dc:	59 45       	cp.w	r5,20
8002f7de:	c0 31       	brne	8002f7e4 <floor+0x100>
8002f7e0:	2f f7       	sub	r7,-1
8002f7e2:	c0 a8       	rjmp	8002f7f6 <floor+0x112>
8002f7e4:	30 18       	mov	r8,1
8002f7e6:	ea 05 11 34 	rsub	r5,r5,52
8002f7ea:	f0 05 09 45 	lsl	r5,r8,r5
8002f7ee:	0a 06       	add	r6,r5
8002f7f0:	04 36       	cp.w	r6,r2
8002f7f2:	e7 d8 e3 07 	addcs	r7,r3,r8
8002f7f6:	5c d4       	com	r4
8002f7f8:	08 66       	and	r6,r4
8002f7fa:	0e 99       	mov	r9,r7
8002f7fc:	0c 98       	mov	r8,r6
8002f7fe:	10 9a       	mov	r10,r8
8002f800:	12 9b       	mov	r11,r9
8002f802:	d8 32       	popm	r0-r7,pc

8002f804 <__isnand>:
8002f804:	14 98       	mov	r8,r10
8002f806:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8002f80a:	f0 0c 11 00 	rsub	r12,r8,0
8002f80e:	10 4c       	or	r12,r8
8002f810:	fc 18 7f f0 	movh	r8,0x7ff0
8002f814:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8002f818:	f0 0c 01 0c 	sub	r12,r8,r12
8002f81c:	bf 9c       	lsr	r12,0x1f
8002f81e:	5e fc       	retal	r12

8002f820 <matherr>:
8002f820:	5e fd       	retal	0

8002f822 <nan>:
8002f822:	30 0a       	mov	r10,0
8002f824:	fc 1b 7f f8 	movh	r11,0x7ff8
8002f828:	5e fc       	retal	r12
8002f82a:	d7 03       	nop

8002f82c <rint>:
8002f82c:	d4 21       	pushm	r4-r7,lr
8002f82e:	20 2d       	sub	sp,8
8002f830:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
8002f834:	14 94       	mov	r4,r10
8002f836:	16 95       	mov	r5,r11
8002f838:	14 98       	mov	r8,r10
8002f83a:	16 9e       	mov	lr,r11
8002f83c:	16 9c       	mov	r12,r11
8002f83e:	f6 07 16 1f 	lsr	r7,r11,0x1f
8002f842:	ec c9 03 ff 	sub	r9,r6,1023
8002f846:	59 39       	cp.w	r9,19
8002f848:	e0 89 00 49 	brgt	8002f8da <rint+0xae>
8002f84c:	58 09       	cp.w	r9,0
8002f84e:	c2 b4       	brge	8002f8a4 <rint+0x78>
8002f850:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002f854:	14 49       	or	r9,r10
8002f856:	c7 10       	breq	8002f938 <rint+0x10c>
8002f858:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
8002f85c:	4b 9c       	lddpc	r12,8002f940 <rint+0x114>
8002f85e:	fd e4 10 08 	or	r8,lr,r4
8002f862:	16 99       	mov	r9,r11
8002f864:	f0 0e 11 00 	rsub	lr,r8,0
8002f868:	e6 19 ff fe 	andh	r9,0xfffe,COH
8002f86c:	fd e8 10 08 	or	r8,lr,r8
8002f870:	ad 88       	lsr	r8,0xc
8002f872:	e6 18 00 08 	andh	r8,0x8,COH
8002f876:	f1 e9 10 0b 	or	r11,r8,r9
8002f87a:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8002f87e:	14 98       	mov	r8,r10
8002f880:	16 99       	mov	r9,r11
8002f882:	08 9a       	mov	r10,r4
8002f884:	0a 9b       	mov	r11,r5
8002f886:	e0 a0 02 93 	rcall	8002fdac <__avr32_f64_add>
8002f88a:	08 98       	mov	r8,r4
8002f88c:	fa eb 00 00 	st.d	sp[0],r10
8002f890:	0a 99       	mov	r9,r5
8002f892:	fa ea 00 00 	ld.d	r10,sp[0]
8002f896:	cb dd       	rcall	8002fc10 <__avr32_f64_sub>
8002f898:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002f89c:	14 94       	mov	r4,r10
8002f89e:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
8002f8a2:	c4 b8       	rjmp	8002f938 <rint+0x10c>
8002f8a4:	ee 7a ff ff 	mov	r10,1048575
8002f8a8:	f4 09 08 4a 	asr	r10,r10,r9
8002f8ac:	f5 eb 00 0b 	and	r11,r10,r11
8002f8b0:	08 4b       	or	r11,r4
8002f8b2:	c4 30       	breq	8002f938 <rint+0x10c>
8002f8b4:	a1 9a       	lsr	r10,0x1
8002f8b6:	f5 e5 00 0b 	and	r11,r10,r5
8002f8ba:	08 4b       	or	r11,r4
8002f8bc:	c0 31       	brne	8002f8c2 <rint+0x96>
8002f8be:	16 98       	mov	r8,r11
8002f8c0:	c2 b8       	rjmp	8002f916 <rint+0xea>
8002f8c2:	59 39       	cp.w	r9,19
8002f8c4:	c0 41       	brne	8002f8cc <rint+0xa0>
8002f8c6:	fc 18 40 00 	movh	r8,0x4000
8002f8ca:	c2 68       	rjmp	8002f916 <rint+0xea>
8002f8cc:	14 8c       	andn	r12,r10
8002f8ce:	e2 6a 00 00 	mov	r10,131072
8002f8d2:	f4 09 08 49 	asr	r9,r10,r9
8002f8d6:	12 4c       	or	r12,r9
8002f8d8:	c1 f8       	rjmp	8002f916 <rint+0xea>
8002f8da:	e0 49 00 33 	cp.w	r9,51
8002f8de:	e0 8a 00 0a 	brle	8002f8f2 <rint+0xc6>
8002f8e2:	e0 49 04 00 	cp.w	r9,1024
8002f8e6:	c2 91       	brne	8002f938 <rint+0x10c>
8002f8e8:	14 98       	mov	r8,r10
8002f8ea:	16 99       	mov	r9,r11
8002f8ec:	e0 a0 02 60 	rcall	8002fdac <__avr32_f64_add>
8002f8f0:	c2 28       	rjmp	8002f934 <rint+0x108>
8002f8f2:	ec c6 04 13 	sub	r6,r6,1043
8002f8f6:	3f f9       	mov	r9,-1
8002f8f8:	f2 06 0a 49 	lsr	r9,r9,r6
8002f8fc:	f3 ea 00 0a 	and	r10,r9,r10
8002f900:	c1 c0       	breq	8002f938 <rint+0x10c>
8002f902:	a1 99       	lsr	r9,0x1
8002f904:	f3 e4 00 0a 	and	r10,r9,r4
8002f908:	c0 70       	breq	8002f916 <rint+0xea>
8002f90a:	12 88       	andn	r8,r9
8002f90c:	fc 19 40 00 	movh	r9,0x4000
8002f910:	f2 06 08 46 	asr	r6,r9,r6
8002f914:	0c 48       	or	r8,r6
8002f916:	48 ba       	lddpc	r10,8002f940 <rint+0x114>
8002f918:	18 99       	mov	r9,r12
8002f91a:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
8002f91e:	0c 9a       	mov	r10,r6
8002f920:	0e 9b       	mov	r11,r7
8002f922:	e0 a0 02 45 	rcall	8002fdac <__avr32_f64_add>
8002f926:	0c 98       	mov	r8,r6
8002f928:	fa eb 00 00 	st.d	sp[0],r10
8002f92c:	0e 99       	mov	r9,r7
8002f92e:	fa ea 00 00 	ld.d	r10,sp[0]
8002f932:	c6 fd       	rcall	8002fc10 <__avr32_f64_sub>
8002f934:	14 94       	mov	r4,r10
8002f936:	16 95       	mov	r5,r11
8002f938:	08 9a       	mov	r10,r4
8002f93a:	0a 9b       	mov	r11,r5
8002f93c:	2f ed       	sub	sp,-8
8002f93e:	d8 22       	popm	r4-r7,pc
8002f940:	80 03       	ld.sh	r3,r0[0x0]
8002f942:	13 d0       	ld.ub	r0,r9[0x5]

8002f944 <scalbn>:
8002f944:	d4 21       	pushm	r4-r7,lr
8002f946:	18 97       	mov	r7,r12
8002f948:	14 98       	mov	r8,r10
8002f94a:	16 99       	mov	r9,r11
8002f94c:	14 94       	mov	r4,r10
8002f94e:	16 95       	mov	r5,r11
8002f950:	14 96       	mov	r6,r10
8002f952:	16 9c       	mov	r12,r11
8002f954:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
8002f958:	c1 11       	brne	8002f97a <scalbn+0x36>
8002f95a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002f95e:	14 4c       	or	r12,r10
8002f960:	c5 c0       	breq	8002fa18 <scalbn+0xd4>
8002f962:	30 08       	mov	r8,0
8002f964:	fc 19 43 50 	movh	r9,0x4350
8002f968:	c6 8c       	rcall	8002fa38 <__avr32_f64_mul>
8002f96a:	16 99       	mov	r9,r11
8002f96c:	14 98       	mov	r8,r10
8002f96e:	14 94       	mov	r4,r10
8002f970:	12 95       	mov	r5,r9
8002f972:	fe 57 3c b0 	cp.w	r7,-50000
8002f976:	c0 84       	brge	8002f986 <scalbn+0x42>
8002f978:	c3 a8       	rjmp	8002f9ec <scalbn+0xa8>
8002f97a:	e0 4e 07 ff 	cp.w	lr,2047
8002f97e:	c0 81       	brne	8002f98e <scalbn+0x4a>
8002f980:	e0 a0 02 16 	rcall	8002fdac <__avr32_f64_add>
8002f984:	c4 88       	rjmp	8002fa14 <scalbn+0xd0>
8002f986:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
8002f98a:	12 9c       	mov	r12,r9
8002f98c:	23 6e       	sub	lr,54
8002f98e:	0e 0e       	add	lr,r7
8002f990:	e0 4e 07 fe 	cp.w	lr,2046
8002f994:	e0 89 00 11 	brgt	8002f9b6 <scalbn+0x72>
8002f998:	58 0e       	cp.w	lr,0
8002f99a:	e0 8a 00 07 	brle	8002f9a8 <scalbn+0x64>
8002f99e:	e4 1c 80 0f 	andh	r12,0x800f
8002f9a2:	f9 ee 11 49 	or	r9,r12,lr<<0x14
8002f9a6:	c3 98       	rjmp	8002fa18 <scalbn+0xd4>
8002f9a8:	fe 5e ff cb 	cp.w	lr,-53
8002f9ac:	c2 94       	brge	8002f9fe <scalbn+0xba>
8002f9ae:	e0 47 c3 50 	cp.w	r7,50000
8002f9b2:	e0 8a 00 14 	brle	8002f9da <scalbn+0x96>
8002f9b6:	e0 6a 75 9c 	mov	r10,30108
8002f9ba:	ea 1a 88 00 	orh	r10,0x8800
8002f9be:	e0 6b e4 3c 	mov	r11,58428
8002f9c2:	ea 1b 7e 37 	orh	r11,0x7e37
8002f9c6:	c2 dc       	rcall	8002fa20 <copysign>
8002f9c8:	e0 68 75 9c 	mov	r8,30108
8002f9cc:	ea 18 88 00 	orh	r8,0x8800
8002f9d0:	e0 69 e4 3c 	mov	r9,58428
8002f9d4:	ea 19 7e 37 	orh	r9,0x7e37
8002f9d8:	c1 d8       	rjmp	8002fa12 <scalbn+0xce>
8002f9da:	e0 6a f3 59 	mov	r10,62297
8002f9de:	ea 1a c2 f8 	orh	r10,0xc2f8
8002f9e2:	e0 6b 6e 1f 	mov	r11,28191
8002f9e6:	ea 1b 01 a5 	orh	r11,0x1a5
8002f9ea:	c1 bc       	rcall	8002fa20 <copysign>
8002f9ec:	e0 68 f3 59 	mov	r8,62297
8002f9f0:	ea 18 c2 f8 	orh	r8,0xc2f8
8002f9f4:	e0 69 6e 1f 	mov	r9,28191
8002f9f8:	ea 19 01 a5 	orh	r9,0x1a5
8002f9fc:	c0 b8       	rjmp	8002fa12 <scalbn+0xce>
8002f9fe:	2c ae       	sub	lr,-54
8002fa00:	e4 1c 80 0f 	andh	r12,0x800f
8002fa04:	f9 ee 11 49 	or	r9,r12,lr<<0x14
8002fa08:	10 9a       	mov	r10,r8
8002fa0a:	12 9b       	mov	r11,r9
8002fa0c:	30 08       	mov	r8,0
8002fa0e:	fc 19 3c 90 	movh	r9,0x3c90
8002fa12:	c1 3c       	rcall	8002fa38 <__avr32_f64_mul>
8002fa14:	14 98       	mov	r8,r10
8002fa16:	16 99       	mov	r9,r11
8002fa18:	10 9a       	mov	r10,r8
8002fa1a:	12 9b       	mov	r11,r9
8002fa1c:	d8 22       	popm	r4-r7,pc
8002fa1e:	d7 03       	nop

8002fa20 <copysign>:
8002fa20:	d4 21       	pushm	r4-r7,lr
8002fa22:	e6 19 80 00 	andh	r9,0x8000,COH
8002fa26:	16 95       	mov	r5,r11
8002fa28:	14 94       	mov	r4,r10
8002fa2a:	14 96       	mov	r6,r10
8002fa2c:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002fa30:	f3 eb 10 0b 	or	r11,r9,r11
8002fa34:	16 97       	mov	r7,r11
8002fa36:	d8 22       	popm	r4-r7,pc

8002fa38 <__avr32_f64_mul>:
8002fa38:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8002fa3c:	e0 80 00 dc 	breq	8002fbf4 <__avr32_f64_mul_op1_zero>
8002fa40:	d4 21       	pushm	r4-r7,lr
8002fa42:	f7 e9 20 0e 	eor	lr,r11,r9
8002fa46:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8002fa4a:	30 15       	mov	r5,1
8002fa4c:	c4 30       	breq	8002fad2 <__avr32_f64_mul_op1_subnormal>
8002fa4e:	ab 6b       	lsl	r11,0xa
8002fa50:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8002fa54:	ab 6a       	lsl	r10,0xa
8002fa56:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8002fa5a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8002fa5e:	c5 c0       	breq	8002fb16 <__avr32_f64_mul_op2_subnormal>
8002fa60:	a1 78       	lsl	r8,0x1
8002fa62:	5c f9       	rol	r9
8002fa64:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8002fa68:	e0 47 07 ff 	cp.w	r7,2047
8002fa6c:	c7 70       	breq	8002fb5a <__avr32_f64_mul_op_nan_or_inf>
8002fa6e:	e0 46 07 ff 	cp.w	r6,2047
8002fa72:	c7 40       	breq	8002fb5a <__avr32_f64_mul_op_nan_or_inf>
8002fa74:	ee 06 00 0c 	add	r12,r7,r6
8002fa78:	e0 2c 03 fe 	sub	r12,1022
8002fa7c:	f6 08 06 44 	mulu.d	r4,r11,r8
8002fa80:	f4 09 07 44 	macu.d	r4,r10,r9
8002fa84:	f4 08 06 46 	mulu.d	r6,r10,r8
8002fa88:	f6 09 06 4a 	mulu.d	r10,r11,r9
8002fa8c:	08 07       	add	r7,r4
8002fa8e:	f4 05 00 4a 	adc	r10,r10,r5
8002fa92:	5c 0b       	acr	r11
8002fa94:	ed bb 00 14 	bld	r11,0x14
8002fa98:	c0 50       	breq	8002faa2 <__avr32_f64_mul+0x6a>
8002fa9a:	a1 77       	lsl	r7,0x1
8002fa9c:	5c fa       	rol	r10
8002fa9e:	5c fb       	rol	r11
8002faa0:	20 1c       	sub	r12,1
8002faa2:	58 0c       	cp.w	r12,0
8002faa4:	e0 8a 00 6f 	brle	8002fb82 <__avr32_f64_mul_res_subnormal>
8002faa8:	e0 4c 07 ff 	cp.w	r12,2047
8002faac:	e0 84 00 9c 	brge	8002fbe4 <__avr32_f64_mul_res_inf>
8002fab0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8002fab4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8002fab8:	ef e6 12 17 	or	r7,r7,r6>>0x1
8002fabc:	ee 17 80 00 	eorh	r7,0x8000
8002fac0:	f1 b7 04 20 	satu	r7,0x1
8002fac4:	0e 0a       	add	r10,r7
8002fac6:	5c 0b       	acr	r11
8002fac8:	ed be 00 1f 	bld	lr,0x1f
8002facc:	ef bb 00 1f 	bst	r11,0x1f
8002fad0:	d8 22       	popm	r4-r7,pc

8002fad2 <__avr32_f64_mul_op1_subnormal>:
8002fad2:	e4 1b 00 0f 	andh	r11,0xf
8002fad6:	f4 0c 12 00 	clz	r12,r10
8002fada:	f6 06 12 00 	clz	r6,r11
8002fade:	f7 bc 03 e1 	sublo	r12,-31
8002fae2:	f8 06 17 30 	movlo	r6,r12
8002fae6:	f7 b6 02 01 	subhs	r6,1
8002faea:	e0 46 00 20 	cp.w	r6,32
8002faee:	c0 d4       	brge	8002fb08 <__avr32_f64_mul_op1_subnormal+0x36>
8002faf0:	ec 0c 11 20 	rsub	r12,r6,32
8002faf4:	f6 06 09 4b 	lsl	r11,r11,r6
8002faf8:	f4 0c 0a 4c 	lsr	r12,r10,r12
8002fafc:	18 4b       	or	r11,r12
8002fafe:	f4 06 09 4a 	lsl	r10,r10,r6
8002fb02:	20 b6       	sub	r6,11
8002fb04:	0c 17       	sub	r7,r6
8002fb06:	ca ab       	rjmp	8002fa5a <__avr32_f64_mul+0x22>
8002fb08:	f4 06 09 4b 	lsl	r11,r10,r6
8002fb0c:	c6 40       	breq	8002fbd4 <__avr32_f64_mul_res_zero>
8002fb0e:	30 0a       	mov	r10,0
8002fb10:	20 b6       	sub	r6,11
8002fb12:	0c 17       	sub	r7,r6
8002fb14:	ca 3b       	rjmp	8002fa5a <__avr32_f64_mul+0x22>

8002fb16 <__avr32_f64_mul_op2_subnormal>:
8002fb16:	e4 19 00 0f 	andh	r9,0xf
8002fb1a:	f0 0c 12 00 	clz	r12,r8
8002fb1e:	f2 05 12 00 	clz	r5,r9
8002fb22:	f7 bc 03 ea 	sublo	r12,-22
8002fb26:	f8 05 17 30 	movlo	r5,r12
8002fb2a:	f7 b5 02 0a 	subhs	r5,10
8002fb2e:	e0 45 00 20 	cp.w	r5,32
8002fb32:	c0 d4       	brge	8002fb4c <__avr32_f64_mul_op2_subnormal+0x36>
8002fb34:	ea 0c 11 20 	rsub	r12,r5,32
8002fb38:	f2 05 09 49 	lsl	r9,r9,r5
8002fb3c:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002fb40:	18 49       	or	r9,r12
8002fb42:	f0 05 09 48 	lsl	r8,r8,r5
8002fb46:	20 25       	sub	r5,2
8002fb48:	0a 16       	sub	r6,r5
8002fb4a:	c8 fb       	rjmp	8002fa68 <__avr32_f64_mul+0x30>
8002fb4c:	f0 05 09 49 	lsl	r9,r8,r5
8002fb50:	c4 20       	breq	8002fbd4 <__avr32_f64_mul_res_zero>
8002fb52:	30 08       	mov	r8,0
8002fb54:	20 25       	sub	r5,2
8002fb56:	0a 16       	sub	r6,r5
8002fb58:	c8 8b       	rjmp	8002fa68 <__avr32_f64_mul+0x30>

8002fb5a <__avr32_f64_mul_op_nan_or_inf>:
8002fb5a:	e4 19 00 0f 	andh	r9,0xf
8002fb5e:	e4 1b 00 0f 	andh	r11,0xf
8002fb62:	14 4b       	or	r11,r10
8002fb64:	10 49       	or	r9,r8
8002fb66:	e0 47 07 ff 	cp.w	r7,2047
8002fb6a:	c0 91       	brne	8002fb7c <__avr32_f64_mul_op1_not_naninf>
8002fb6c:	58 0b       	cp.w	r11,0
8002fb6e:	c3 81       	brne	8002fbde <__avr32_f64_mul_res_nan>
8002fb70:	e0 46 07 ff 	cp.w	r6,2047
8002fb74:	c3 81       	brne	8002fbe4 <__avr32_f64_mul_res_inf>
8002fb76:	58 09       	cp.w	r9,0
8002fb78:	c3 60       	breq	8002fbe4 <__avr32_f64_mul_res_inf>
8002fb7a:	c3 28       	rjmp	8002fbde <__avr32_f64_mul_res_nan>

8002fb7c <__avr32_f64_mul_op1_not_naninf>:
8002fb7c:	58 09       	cp.w	r9,0
8002fb7e:	c3 30       	breq	8002fbe4 <__avr32_f64_mul_res_inf>
8002fb80:	c2 f8       	rjmp	8002fbde <__avr32_f64_mul_res_nan>

8002fb82 <__avr32_f64_mul_res_subnormal>:
8002fb82:	5c 3c       	neg	r12
8002fb84:	2f fc       	sub	r12,-1
8002fb86:	f1 bc 04 c0 	satu	r12,0x6
8002fb8a:	e0 4c 00 20 	cp.w	r12,32
8002fb8e:	c1 14       	brge	8002fbb0 <__avr32_f64_mul_res_subnormal+0x2e>
8002fb90:	f8 08 11 20 	rsub	r8,r12,32
8002fb94:	0e 46       	or	r6,r7
8002fb96:	ee 0c 0a 47 	lsr	r7,r7,r12
8002fb9a:	f4 08 09 49 	lsl	r9,r10,r8
8002fb9e:	12 47       	or	r7,r9
8002fba0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8002fba4:	f6 08 09 49 	lsl	r9,r11,r8
8002fba8:	12 4a       	or	r10,r9
8002fbaa:	f6 0c 0a 4b 	lsr	r11,r11,r12
8002fbae:	c8 3b       	rjmp	8002fab4 <__avr32_f64_mul+0x7c>
8002fbb0:	f8 08 11 20 	rsub	r8,r12,32
8002fbb4:	f9 b9 00 00 	moveq	r9,0
8002fbb8:	c0 30       	breq	8002fbbe <__avr32_f64_mul_res_subnormal+0x3c>
8002fbba:	f6 08 09 49 	lsl	r9,r11,r8
8002fbbe:	0e 46       	or	r6,r7
8002fbc0:	ed ea 10 16 	or	r6,r6,r10<<0x1
8002fbc4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8002fbc8:	f3 ea 10 07 	or	r7,r9,r10
8002fbcc:	f6 0c 0a 4a 	lsr	r10,r11,r12
8002fbd0:	30 0b       	mov	r11,0
8002fbd2:	c7 1b       	rjmp	8002fab4 <__avr32_f64_mul+0x7c>

8002fbd4 <__avr32_f64_mul_res_zero>:
8002fbd4:	1c 9b       	mov	r11,lr
8002fbd6:	e6 1b 80 00 	andh	r11,0x8000,COH
8002fbda:	30 0a       	mov	r10,0
8002fbdc:	d8 22       	popm	r4-r7,pc

8002fbde <__avr32_f64_mul_res_nan>:
8002fbde:	3f fb       	mov	r11,-1
8002fbe0:	3f fa       	mov	r10,-1
8002fbe2:	d8 22       	popm	r4-r7,pc

8002fbe4 <__avr32_f64_mul_res_inf>:
8002fbe4:	f0 6b 00 00 	mov	r11,-1048576
8002fbe8:	ed be 00 1f 	bld	lr,0x1f
8002fbec:	ef bb 00 1f 	bst	r11,0x1f
8002fbf0:	30 0a       	mov	r10,0
8002fbf2:	d8 22       	popm	r4-r7,pc

8002fbf4 <__avr32_f64_mul_op1_zero>:
8002fbf4:	f7 e9 20 0b 	eor	r11,r11,r9
8002fbf8:	e6 1b 80 00 	andh	r11,0x8000,COH
8002fbfc:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8002fc00:	e0 4c 07 ff 	cp.w	r12,2047
8002fc04:	5e 1c       	retne	r12
8002fc06:	3f fa       	mov	r10,-1
8002fc08:	3f fb       	mov	r11,-1
8002fc0a:	5e fc       	retal	r12

8002fc0c <__avr32_f64_sub_from_add>:
8002fc0c:	ee 19 80 00 	eorh	r9,0x8000

8002fc10 <__avr32_f64_sub>:
8002fc10:	f7 e9 20 0c 	eor	r12,r11,r9
8002fc14:	e0 86 00 ca 	brmi	8002fda8 <__avr32_f64_add_from_sub>
8002fc18:	eb cd 40 e0 	pushm	r5-r7,lr
8002fc1c:	16 9c       	mov	r12,r11
8002fc1e:	e6 1c 80 00 	andh	r12,0x8000,COH
8002fc22:	bf db       	cbr	r11,0x1f
8002fc24:	bf d9       	cbr	r9,0x1f
8002fc26:	10 3a       	cp.w	r10,r8
8002fc28:	f2 0b 13 00 	cpc	r11,r9
8002fc2c:	c0 92       	brcc	8002fc3e <__avr32_f64_sub+0x2e>
8002fc2e:	16 97       	mov	r7,r11
8002fc30:	12 9b       	mov	r11,r9
8002fc32:	0e 99       	mov	r9,r7
8002fc34:	14 97       	mov	r7,r10
8002fc36:	10 9a       	mov	r10,r8
8002fc38:	0e 98       	mov	r8,r7
8002fc3a:	ee 1c 80 00 	eorh	r12,0x8000
8002fc3e:	f6 07 16 14 	lsr	r7,r11,0x14
8002fc42:	ab 7b       	lsl	r11,0xb
8002fc44:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8002fc48:	ab 7a       	lsl	r10,0xb
8002fc4a:	bf bb       	sbr	r11,0x1f
8002fc4c:	f2 06 16 14 	lsr	r6,r9,0x14
8002fc50:	c4 40       	breq	8002fcd8 <__avr32_f64_sub_opL_subnormal>
8002fc52:	ab 79       	lsl	r9,0xb
8002fc54:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8002fc58:	ab 78       	lsl	r8,0xb
8002fc5a:	bf b9       	sbr	r9,0x1f

8002fc5c <__avr32_f64_sub_opL_subnormal_done>:
8002fc5c:	e0 47 07 ff 	cp.w	r7,2047
8002fc60:	c4 f0       	breq	8002fcfe <__avr32_f64_sub_opH_nan_or_inf>
8002fc62:	0e 26       	rsub	r6,r7
8002fc64:	c1 20       	breq	8002fc88 <__avr32_f64_sub_shift_done>
8002fc66:	ec 05 11 20 	rsub	r5,r6,32
8002fc6a:	e0 46 00 20 	cp.w	r6,32
8002fc6e:	c7 c2       	brcc	8002fd66 <__avr32_f64_sub_longshift>
8002fc70:	f0 05 09 4e 	lsl	lr,r8,r5
8002fc74:	f2 05 09 45 	lsl	r5,r9,r5
8002fc78:	f0 06 0a 48 	lsr	r8,r8,r6
8002fc7c:	f2 06 0a 49 	lsr	r9,r9,r6
8002fc80:	0a 48       	or	r8,r5
8002fc82:	58 0e       	cp.w	lr,0
8002fc84:	5f 1e       	srne	lr
8002fc86:	1c 48       	or	r8,lr

8002fc88 <__avr32_f64_sub_shift_done>:
8002fc88:	10 1a       	sub	r10,r8
8002fc8a:	f6 09 01 4b 	sbc	r11,r11,r9
8002fc8e:	f6 06 12 00 	clz	r6,r11
8002fc92:	c0 e0       	breq	8002fcae <__avr32_f64_sub_longnormalize_done>
8002fc94:	c7 83       	brcs	8002fd84 <__avr32_f64_sub_longnormalize>
8002fc96:	ec 0e 11 20 	rsub	lr,r6,32
8002fc9a:	f6 06 09 4b 	lsl	r11,r11,r6
8002fc9e:	f4 0e 0a 4e 	lsr	lr,r10,lr
8002fca2:	1c 4b       	or	r11,lr
8002fca4:	f4 06 09 4a 	lsl	r10,r10,r6
8002fca8:	0c 17       	sub	r7,r6
8002fcaa:	e0 8a 00 39 	brle	8002fd1c <__avr32_f64_sub_subnormal_result>

8002fcae <__avr32_f64_sub_longnormalize_done>:
8002fcae:	f4 09 15 15 	lsl	r9,r10,0x15
8002fcb2:	ab 9a       	lsr	r10,0xb
8002fcb4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8002fcb8:	ab 9b       	lsr	r11,0xb
8002fcba:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8002fcbe:	18 4b       	or	r11,r12

8002fcc0 <__avr32_f64_sub_round>:
8002fcc0:	fc 17 80 00 	movh	r7,0x8000
8002fcc4:	ed ba 00 00 	bld	r10,0x0
8002fcc8:	f7 b7 01 ff 	subne	r7,-1
8002fccc:	0e 39       	cp.w	r9,r7
8002fcce:	5f 29       	srhs	r9
8002fcd0:	12 0a       	add	r10,r9
8002fcd2:	5c 0b       	acr	r11
8002fcd4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fcd8 <__avr32_f64_sub_opL_subnormal>:
8002fcd8:	ab 79       	lsl	r9,0xb
8002fcda:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8002fcde:	ab 78       	lsl	r8,0xb
8002fce0:	f3 e8 10 0e 	or	lr,r9,r8
8002fce4:	f9 b6 01 01 	movne	r6,1
8002fce8:	ee 0e 11 00 	rsub	lr,r7,0
8002fcec:	f9 b7 00 01 	moveq	r7,1
8002fcf0:	ef bb 00 1f 	bst	r11,0x1f
8002fcf4:	f7 ea 10 0e 	or	lr,r11,r10
8002fcf8:	f9 b7 00 00 	moveq	r7,0
8002fcfc:	cb 0b       	rjmp	8002fc5c <__avr32_f64_sub_opL_subnormal_done>

8002fcfe <__avr32_f64_sub_opH_nan_or_inf>:
8002fcfe:	bf db       	cbr	r11,0x1f
8002fd00:	f7 ea 10 0e 	or	lr,r11,r10
8002fd04:	c0 81       	brne	8002fd14 <__avr32_f64_sub_return_nan>
8002fd06:	e0 46 07 ff 	cp.w	r6,2047
8002fd0a:	c0 50       	breq	8002fd14 <__avr32_f64_sub_return_nan>
8002fd0c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8002fd10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fd14 <__avr32_f64_sub_return_nan>:
8002fd14:	3f fa       	mov	r10,-1
8002fd16:	3f fb       	mov	r11,-1
8002fd18:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fd1c <__avr32_f64_sub_subnormal_result>:
8002fd1c:	5c 37       	neg	r7
8002fd1e:	2f f7       	sub	r7,-1
8002fd20:	f1 b7 04 c0 	satu	r7,0x6
8002fd24:	e0 47 00 20 	cp.w	r7,32
8002fd28:	c1 14       	brge	8002fd4a <__avr32_f64_sub_subnormal_result+0x2e>
8002fd2a:	ee 08 11 20 	rsub	r8,r7,32
8002fd2e:	f4 08 09 49 	lsl	r9,r10,r8
8002fd32:	5f 16       	srne	r6
8002fd34:	f4 07 0a 4a 	lsr	r10,r10,r7
8002fd38:	0c 4a       	or	r10,r6
8002fd3a:	f6 08 09 49 	lsl	r9,r11,r8
8002fd3e:	f5 e9 10 0a 	or	r10,r10,r9
8002fd42:	f4 07 0a 4b 	lsr	r11,r10,r7
8002fd46:	30 07       	mov	r7,0
8002fd48:	cb 3b       	rjmp	8002fcae <__avr32_f64_sub_longnormalize_done>
8002fd4a:	ee 08 11 40 	rsub	r8,r7,64
8002fd4e:	f6 08 09 49 	lsl	r9,r11,r8
8002fd52:	14 49       	or	r9,r10
8002fd54:	5f 16       	srne	r6
8002fd56:	f6 07 0a 4a 	lsr	r10,r11,r7
8002fd5a:	0c 4a       	or	r10,r6
8002fd5c:	30 0b       	mov	r11,0
8002fd5e:	30 07       	mov	r7,0
8002fd60:	ca 7b       	rjmp	8002fcae <__avr32_f64_sub_longnormalize_done>
8002fd62:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fd66 <__avr32_f64_sub_longshift>:
8002fd66:	f1 b6 04 c0 	satu	r6,0x6
8002fd6a:	f0 0e 17 00 	moveq	lr,r8
8002fd6e:	c0 40       	breq	8002fd76 <__avr32_f64_sub_longshift+0x10>
8002fd70:	f2 05 09 4e 	lsl	lr,r9,r5
8002fd74:	10 4e       	or	lr,r8
8002fd76:	f2 06 0a 48 	lsr	r8,r9,r6
8002fd7a:	30 09       	mov	r9,0
8002fd7c:	58 0e       	cp.w	lr,0
8002fd7e:	5f 1e       	srne	lr
8002fd80:	1c 48       	or	r8,lr
8002fd82:	c8 3b       	rjmp	8002fc88 <__avr32_f64_sub_shift_done>

8002fd84 <__avr32_f64_sub_longnormalize>:
8002fd84:	f4 06 12 00 	clz	r6,r10
8002fd88:	f9 b7 03 00 	movlo	r7,0
8002fd8c:	f9 b6 03 00 	movlo	r6,0
8002fd90:	f9 bc 03 00 	movlo	r12,0
8002fd94:	f7 b6 02 e0 	subhs	r6,-32
8002fd98:	f4 06 09 4b 	lsl	r11,r10,r6
8002fd9c:	30 0a       	mov	r10,0
8002fd9e:	0c 17       	sub	r7,r6
8002fda0:	fe 9a ff be 	brle	8002fd1c <__avr32_f64_sub_subnormal_result>
8002fda4:	c8 5b       	rjmp	8002fcae <__avr32_f64_sub_longnormalize_done>
8002fda6:	d7 03       	nop

8002fda8 <__avr32_f64_add_from_sub>:
8002fda8:	ee 19 80 00 	eorh	r9,0x8000

8002fdac <__avr32_f64_add>:
8002fdac:	f7 e9 20 0c 	eor	r12,r11,r9
8002fdb0:	fe 96 ff 2e 	brmi	8002fc0c <__avr32_f64_sub_from_add>
8002fdb4:	eb cd 40 e0 	pushm	r5-r7,lr
8002fdb8:	16 9c       	mov	r12,r11
8002fdba:	e6 1c 80 00 	andh	r12,0x8000,COH
8002fdbe:	bf db       	cbr	r11,0x1f
8002fdc0:	bf d9       	cbr	r9,0x1f
8002fdc2:	12 3b       	cp.w	r11,r9
8002fdc4:	c0 72       	brcc	8002fdd2 <__avr32_f64_add+0x26>
8002fdc6:	16 97       	mov	r7,r11
8002fdc8:	12 9b       	mov	r11,r9
8002fdca:	0e 99       	mov	r9,r7
8002fdcc:	14 97       	mov	r7,r10
8002fdce:	10 9a       	mov	r10,r8
8002fdd0:	0e 98       	mov	r8,r7
8002fdd2:	30 0e       	mov	lr,0
8002fdd4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8002fdd8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8002fddc:	b5 ab       	sbr	r11,0x14
8002fdde:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8002fde2:	c6 20       	breq	8002fea6 <__avr32_f64_add_op2_subnormal>
8002fde4:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002fde8:	b5 a9       	sbr	r9,0x14
8002fdea:	e0 47 07 ff 	cp.w	r7,2047
8002fdee:	c2 80       	breq	8002fe3e <__avr32_f64_add_opH_nan_or_inf>
8002fdf0:	0e 26       	rsub	r6,r7
8002fdf2:	c1 20       	breq	8002fe16 <__avr32_f64_add_shift_done>
8002fdf4:	e0 46 00 36 	cp.w	r6,54
8002fdf8:	c1 52       	brcc	8002fe22 <__avr32_f64_add_res_of_done>
8002fdfa:	ec 05 11 20 	rsub	r5,r6,32
8002fdfe:	e0 46 00 20 	cp.w	r6,32
8002fe02:	c3 52       	brcc	8002fe6c <__avr32_f64_add_longshift>
8002fe04:	f0 05 09 4e 	lsl	lr,r8,r5
8002fe08:	f2 05 09 45 	lsl	r5,r9,r5
8002fe0c:	f0 06 0a 48 	lsr	r8,r8,r6
8002fe10:	f2 06 0a 49 	lsr	r9,r9,r6
8002fe14:	0a 48       	or	r8,r5

8002fe16 <__avr32_f64_add_shift_done>:
8002fe16:	10 0a       	add	r10,r8
8002fe18:	f6 09 00 4b 	adc	r11,r11,r9
8002fe1c:	ed bb 00 15 	bld	r11,0x15
8002fe20:	c3 40       	breq	8002fe88 <__avr32_f64_add_res_of>

8002fe22 <__avr32_f64_add_res_of_done>:
8002fe22:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8002fe26:	18 4b       	or	r11,r12

8002fe28 <__avr32_f64_add_round>:
8002fe28:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8002fe2c:	18 4e       	or	lr,r12
8002fe2e:	ee 1e 80 00 	eorh	lr,0x8000
8002fe32:	f1 be 04 20 	satu	lr,0x1
8002fe36:	1c 0a       	add	r10,lr
8002fe38:	5c 0b       	acr	r11
8002fe3a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fe3e <__avr32_f64_add_opH_nan_or_inf>:
8002fe3e:	b5 cb       	cbr	r11,0x14
8002fe40:	f7 ea 10 0e 	or	lr,r11,r10
8002fe44:	c1 01       	brne	8002fe64 <__avr32_f64_add_return_nan>
8002fe46:	e0 46 07 ff 	cp.w	r6,2047
8002fe4a:	c0 30       	breq	8002fe50 <__avr32_f64_add_opL_nan_or_inf>
8002fe4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fe50 <__avr32_f64_add_opL_nan_or_inf>:
8002fe50:	b5 c9       	cbr	r9,0x14
8002fe52:	f3 e8 10 0e 	or	lr,r9,r8
8002fe56:	c0 71       	brne	8002fe64 <__avr32_f64_add_return_nan>
8002fe58:	30 0a       	mov	r10,0
8002fe5a:	fc 1b 7f f0 	movh	r11,0x7ff0
8002fe5e:	18 4b       	or	r11,r12
8002fe60:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fe64 <__avr32_f64_add_return_nan>:
8002fe64:	3f fa       	mov	r10,-1
8002fe66:	3f fb       	mov	r11,-1
8002fe68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8002fe6c <__avr32_f64_add_longshift>:
8002fe6c:	f1 b6 04 c0 	satu	r6,0x6
8002fe70:	f0 0e 17 00 	moveq	lr,r8
8002fe74:	c0 60       	breq	8002fe80 <__avr32_f64_add_longshift+0x14>
8002fe76:	f2 05 09 4e 	lsl	lr,r9,r5
8002fe7a:	58 08       	cp.w	r8,0
8002fe7c:	5f 18       	srne	r8
8002fe7e:	10 4e       	or	lr,r8
8002fe80:	f2 06 0a 48 	lsr	r8,r9,r6
8002fe84:	30 09       	mov	r9,0
8002fe86:	cc 8b       	rjmp	8002fe16 <__avr32_f64_add_shift_done>

8002fe88 <__avr32_f64_add_res_of>:
8002fe88:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8002fe8c:	a1 9b       	lsr	r11,0x1
8002fe8e:	5d 0a       	ror	r10
8002fe90:	5d 0e       	ror	lr
8002fe92:	2f f7       	sub	r7,-1
8002fe94:	e0 47 07 ff 	cp.w	r7,2047
8002fe98:	f9 ba 00 00 	moveq	r10,0
8002fe9c:	f9 bb 00 00 	moveq	r11,0
8002fea0:	f9 be 00 00 	moveq	lr,0
8002fea4:	cb fb       	rjmp	8002fe22 <__avr32_f64_add_res_of_done>

8002fea6 <__avr32_f64_add_op2_subnormal>:
8002fea6:	30 16       	mov	r6,1
8002fea8:	58 07       	cp.w	r7,0
8002feaa:	ca 01       	brne	8002fdea <__avr32_f64_add+0x3e>
8002feac:	b5 cb       	cbr	r11,0x14
8002feae:	10 0a       	add	r10,r8
8002feb0:	f6 09 00 4b 	adc	r11,r11,r9
8002feb4:	18 4b       	or	r11,r12
8002feb6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002feba:	d7 03       	nop

8002febc <__avr32_f64_to_u32>:
8002febc:	58 0b       	cp.w	r11,0
8002febe:	5e 6d       	retmi	0

8002fec0 <__avr32_f64_to_s32>:
8002fec0:	f6 0c 15 01 	lsl	r12,r11,0x1
8002fec4:	b5 9c       	lsr	r12,0x15
8002fec6:	e0 2c 03 ff 	sub	r12,1023
8002feca:	5e 3d       	retlo	0
8002fecc:	f8 0c 11 1f 	rsub	r12,r12,31
8002fed0:	16 99       	mov	r9,r11
8002fed2:	ab 7b       	lsl	r11,0xb
8002fed4:	bf bb       	sbr	r11,0x1f
8002fed6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8002feda:	f6 0c 0a 4b 	lsr	r11,r11,r12
8002fede:	a1 79       	lsl	r9,0x1
8002fee0:	5e 2b       	reths	r11
8002fee2:	5c 3b       	neg	r11
8002fee4:	5e fb       	retal	r11

8002fee6 <__avr32_u32_to_f64>:
8002fee6:	f8 cb 00 00 	sub	r11,r12,0
8002feea:	30 0c       	mov	r12,0
8002feec:	c0 38       	rjmp	8002fef2 <__avr32_s32_to_f64+0x4>

8002feee <__avr32_s32_to_f64>:
8002feee:	18 9b       	mov	r11,r12
8002fef0:	5c 4b       	abs	r11
8002fef2:	30 0a       	mov	r10,0
8002fef4:	5e 0b       	reteq	r11
8002fef6:	d4 01       	pushm	lr
8002fef8:	e0 69 04 1e 	mov	r9,1054
8002fefc:	f6 08 12 00 	clz	r8,r11
8002ff00:	c1 70       	breq	8002ff2e <__avr32_s32_to_f64+0x40>
8002ff02:	c0 c3       	brcs	8002ff1a <__avr32_s32_to_f64+0x2c>
8002ff04:	f0 0e 11 20 	rsub	lr,r8,32
8002ff08:	f6 08 09 4b 	lsl	r11,r11,r8
8002ff0c:	f4 0e 0a 4e 	lsr	lr,r10,lr
8002ff10:	1c 4b       	or	r11,lr
8002ff12:	f4 08 09 4a 	lsl	r10,r10,r8
8002ff16:	10 19       	sub	r9,r8
8002ff18:	c0 b8       	rjmp	8002ff2e <__avr32_s32_to_f64+0x40>
8002ff1a:	f4 08 12 00 	clz	r8,r10
8002ff1e:	f9 b8 03 00 	movlo	r8,0
8002ff22:	f7 b8 02 e0 	subhs	r8,-32
8002ff26:	f4 08 09 4b 	lsl	r11,r10,r8
8002ff2a:	30 0a       	mov	r10,0
8002ff2c:	10 19       	sub	r9,r8
8002ff2e:	58 09       	cp.w	r9,0
8002ff30:	e0 89 00 30 	brgt	8002ff90 <__avr32_s32_to_f64+0xa2>
8002ff34:	5c 39       	neg	r9
8002ff36:	2f f9       	sub	r9,-1
8002ff38:	e0 49 00 36 	cp.w	r9,54
8002ff3c:	c0 43       	brcs	8002ff44 <__avr32_s32_to_f64+0x56>
8002ff3e:	30 0b       	mov	r11,0
8002ff40:	30 0a       	mov	r10,0
8002ff42:	c2 68       	rjmp	8002ff8e <__avr32_s32_to_f64+0xa0>
8002ff44:	2f 69       	sub	r9,-10
8002ff46:	f2 08 11 20 	rsub	r8,r9,32
8002ff4a:	e0 49 00 20 	cp.w	r9,32
8002ff4e:	c0 b2       	brcc	8002ff64 <__avr32_s32_to_f64+0x76>
8002ff50:	f4 08 09 4e 	lsl	lr,r10,r8
8002ff54:	f6 08 09 48 	lsl	r8,r11,r8
8002ff58:	f4 09 0a 4a 	lsr	r10,r10,r9
8002ff5c:	f6 09 0a 4b 	lsr	r11,r11,r9
8002ff60:	10 4b       	or	r11,r8
8002ff62:	c0 88       	rjmp	8002ff72 <__avr32_s32_to_f64+0x84>
8002ff64:	f6 08 09 4e 	lsl	lr,r11,r8
8002ff68:	14 4e       	or	lr,r10
8002ff6a:	16 9a       	mov	r10,r11
8002ff6c:	30 0b       	mov	r11,0
8002ff6e:	f4 09 0a 4a 	lsr	r10,r10,r9
8002ff72:	ed ba 00 00 	bld	r10,0x0
8002ff76:	c0 92       	brcc	8002ff88 <__avr32_s32_to_f64+0x9a>
8002ff78:	1c 7e       	tst	lr,lr
8002ff7a:	c0 41       	brne	8002ff82 <__avr32_s32_to_f64+0x94>
8002ff7c:	ed ba 00 01 	bld	r10,0x1
8002ff80:	c0 42       	brcc	8002ff88 <__avr32_s32_to_f64+0x9a>
8002ff82:	2f fa       	sub	r10,-1
8002ff84:	f7 bb 02 ff 	subhs	r11,-1
8002ff88:	5c fc       	rol	r12
8002ff8a:	5d 0b       	ror	r11
8002ff8c:	5d 0a       	ror	r10
8002ff8e:	d8 02       	popm	pc
8002ff90:	e0 68 03 ff 	mov	r8,1023
8002ff94:	ed ba 00 0b 	bld	r10,0xb
8002ff98:	f7 b8 00 ff 	subeq	r8,-1
8002ff9c:	10 0a       	add	r10,r8
8002ff9e:	5c 0b       	acr	r11
8002ffa0:	f7 b9 03 fe 	sublo	r9,-2
8002ffa4:	e0 49 07 ff 	cp.w	r9,2047
8002ffa8:	c0 55       	brlt	8002ffb2 <__avr32_s32_to_f64+0xc4>
8002ffaa:	30 0a       	mov	r10,0
8002ffac:	fc 1b ff e0 	movh	r11,0xffe0
8002ffb0:	c0 c8       	rjmp	8002ffc8 <__floatsidf_return_op1>
8002ffb2:	ed bb 00 1f 	bld	r11,0x1f
8002ffb6:	f7 b9 01 01 	subne	r9,1
8002ffba:	ab 9a       	lsr	r10,0xb
8002ffbc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8002ffc0:	a1 7b       	lsl	r11,0x1
8002ffc2:	ab 9b       	lsr	r11,0xb
8002ffc4:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8002ffc8 <__floatsidf_return_op1>:
8002ffc8:	a1 7c       	lsl	r12,0x1
8002ffca:	5d 0b       	ror	r11
8002ffcc:	d8 02       	popm	pc

8002ffce <__avr32_f64_cmp_eq>:
8002ffce:	10 3a       	cp.w	r10,r8
8002ffd0:	f2 0b 13 00 	cpc	r11,r9
8002ffd4:	c0 80       	breq	8002ffe4 <__avr32_f64_cmp_eq+0x16>
8002ffd6:	a1 7b       	lsl	r11,0x1
8002ffd8:	a1 79       	lsl	r9,0x1
8002ffda:	14 4b       	or	r11,r10
8002ffdc:	12 4b       	or	r11,r9
8002ffde:	10 4b       	or	r11,r8
8002ffe0:	5e 0f       	reteq	1
8002ffe2:	5e fd       	retal	0
8002ffe4:	a1 7b       	lsl	r11,0x1
8002ffe6:	fc 1c ff e0 	movh	r12,0xffe0
8002ffea:	58 0a       	cp.w	r10,0
8002ffec:	f8 0b 13 00 	cpc	r11,r12
8002fff0:	5e 8f       	retls	1
8002fff2:	5e fd       	retal	0

8002fff4 <__avr32_f64_cmp_ge>:
8002fff4:	1a de       	st.w	--sp,lr
8002fff6:	1a d7       	st.w	--sp,r7
8002fff8:	a1 7b       	lsl	r11,0x1
8002fffa:	5f 3c       	srlo	r12
8002fffc:	a1 79       	lsl	r9,0x1
8002fffe:	5f 37       	srlo	r7
80030000:	5c fc       	rol	r12
80030002:	fc 1e ff e0 	movh	lr,0xffe0
80030006:	58 0a       	cp.w	r10,0
80030008:	fc 0b 13 00 	cpc	r11,lr
8003000c:	e0 8b 00 1d 	brhi	80030046 <__avr32_f64_cmp_ge+0x52>
80030010:	58 08       	cp.w	r8,0
80030012:	fc 09 13 00 	cpc	r9,lr
80030016:	e0 8b 00 18 	brhi	80030046 <__avr32_f64_cmp_ge+0x52>
8003001a:	58 0b       	cp.w	r11,0
8003001c:	f5 ba 00 00 	subfeq	r10,0
80030020:	c1 50       	breq	8003004a <__avr32_f64_cmp_ge+0x56>
80030022:	1b 07       	ld.w	r7,sp++
80030024:	1b 0e       	ld.w	lr,sp++
80030026:	58 3c       	cp.w	r12,3
80030028:	c0 a0       	breq	8003003c <__avr32_f64_cmp_ge+0x48>
8003002a:	58 1c       	cp.w	r12,1
8003002c:	c0 33       	brcs	80030032 <__avr32_f64_cmp_ge+0x3e>
8003002e:	5e 0f       	reteq	1
80030030:	5e 1d       	retne	0
80030032:	10 3a       	cp.w	r10,r8
80030034:	f2 0b 13 00 	cpc	r11,r9
80030038:	5e 2f       	reths	1
8003003a:	5e 3d       	retlo	0
8003003c:	14 38       	cp.w	r8,r10
8003003e:	f6 09 13 00 	cpc	r9,r11
80030042:	5e 2f       	reths	1
80030044:	5e 3d       	retlo	0
80030046:	1b 07       	ld.w	r7,sp++
80030048:	d8 0a       	popm	pc,r12=0
8003004a:	58 17       	cp.w	r7,1
8003004c:	5f 0c       	sreq	r12
8003004e:	58 09       	cp.w	r9,0
80030050:	f5 b8 00 00 	subfeq	r8,0
80030054:	1b 07       	ld.w	r7,sp++
80030056:	1b 0e       	ld.w	lr,sp++
80030058:	5e 0f       	reteq	1
8003005a:	5e fc       	retal	r12

8003005c <__avr32_f64_cmp_lt>:
8003005c:	1a de       	st.w	--sp,lr
8003005e:	1a d7       	st.w	--sp,r7
80030060:	a1 7b       	lsl	r11,0x1
80030062:	5f 3c       	srlo	r12
80030064:	a1 79       	lsl	r9,0x1
80030066:	5f 37       	srlo	r7
80030068:	5c fc       	rol	r12
8003006a:	fc 1e ff e0 	movh	lr,0xffe0
8003006e:	58 0a       	cp.w	r10,0
80030070:	fc 0b 13 00 	cpc	r11,lr
80030074:	e0 8b 00 1d 	brhi	800300ae <__avr32_f64_cmp_lt+0x52>
80030078:	58 08       	cp.w	r8,0
8003007a:	fc 09 13 00 	cpc	r9,lr
8003007e:	e0 8b 00 18 	brhi	800300ae <__avr32_f64_cmp_lt+0x52>
80030082:	58 0b       	cp.w	r11,0
80030084:	f5 ba 00 00 	subfeq	r10,0
80030088:	c1 50       	breq	800300b2 <__avr32_f64_cmp_lt+0x56>
8003008a:	1b 07       	ld.w	r7,sp++
8003008c:	1b 0e       	ld.w	lr,sp++
8003008e:	58 3c       	cp.w	r12,3
80030090:	c0 a0       	breq	800300a4 <__avr32_f64_cmp_lt+0x48>
80030092:	58 1c       	cp.w	r12,1
80030094:	c0 33       	brcs	8003009a <__avr32_f64_cmp_lt+0x3e>
80030096:	5e 0d       	reteq	0
80030098:	5e 1f       	retne	1
8003009a:	10 3a       	cp.w	r10,r8
8003009c:	f2 0b 13 00 	cpc	r11,r9
800300a0:	5e 2d       	reths	0
800300a2:	5e 3f       	retlo	1
800300a4:	14 38       	cp.w	r8,r10
800300a6:	f6 09 13 00 	cpc	r9,r11
800300aa:	5e 2d       	reths	0
800300ac:	5e 3f       	retlo	1
800300ae:	1b 07       	ld.w	r7,sp++
800300b0:	d8 0a       	popm	pc,r12=0
800300b2:	58 17       	cp.w	r7,1
800300b4:	5f 1c       	srne	r12
800300b6:	58 09       	cp.w	r9,0
800300b8:	f5 b8 00 00 	subfeq	r8,0
800300bc:	1b 07       	ld.w	r7,sp++
800300be:	1b 0e       	ld.w	lr,sp++
800300c0:	5e 0d       	reteq	0
800300c2:	5e fc       	retal	r12

800300c4 <__avr32_f64_div>:
800300c4:	eb cd 40 ff 	pushm	r0-r7,lr
800300c8:	f7 e9 20 0e 	eor	lr,r11,r9
800300cc:	f6 07 16 14 	lsr	r7,r11,0x14
800300d0:	a9 7b       	lsl	r11,0x9
800300d2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800300d6:	a9 7a       	lsl	r10,0x9
800300d8:	bd bb       	sbr	r11,0x1d
800300da:	e4 1b 3f ff 	andh	r11,0x3fff
800300de:	ab d7       	cbr	r7,0xb
800300e0:	e0 80 00 cc 	breq	80030278 <__avr32_f64_div_round_subnormal+0x54>
800300e4:	e0 47 07 ff 	cp.w	r7,2047
800300e8:	e0 84 00 b5 	brge	80030252 <__avr32_f64_div_round_subnormal+0x2e>
800300ec:	f2 06 16 14 	lsr	r6,r9,0x14
800300f0:	a9 79       	lsl	r9,0x9
800300f2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800300f6:	a9 78       	lsl	r8,0x9
800300f8:	bd b9       	sbr	r9,0x1d
800300fa:	e4 19 3f ff 	andh	r9,0x3fff
800300fe:	ab d6       	cbr	r6,0xb
80030100:	e0 80 00 e2 	breq	800302c4 <__avr32_f64_div_round_subnormal+0xa0>
80030104:	e0 46 07 ff 	cp.w	r6,2047
80030108:	e0 84 00 b2 	brge	8003026c <__avr32_f64_div_round_subnormal+0x48>
8003010c:	0c 17       	sub	r7,r6
8003010e:	fe 37 fc 01 	sub	r7,-1023
80030112:	fc 1c 80 00 	movh	r12,0x8000
80030116:	f8 03 16 01 	lsr	r3,r12,0x1
8003011a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8003011e:	5c d4       	com	r4
80030120:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80030124:	e6 09 06 44 	mulu.d	r4,r3,r9
80030128:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003012c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030130:	ea 03 15 02 	lsl	r3,r5,0x2
80030134:	e6 09 06 44 	mulu.d	r4,r3,r9
80030138:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003013c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030140:	ea 03 15 02 	lsl	r3,r5,0x2
80030144:	e6 09 06 44 	mulu.d	r4,r3,r9
80030148:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003014c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030150:	ea 03 15 02 	lsl	r3,r5,0x2
80030154:	e6 08 06 40 	mulu.d	r0,r3,r8
80030158:	e4 09 07 40 	macu.d	r0,r2,r9
8003015c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030160:	02 04       	add	r4,r1
80030162:	5c 05       	acr	r5
80030164:	a3 65       	lsl	r5,0x2
80030166:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8003016a:	a3 64       	lsl	r4,0x2
8003016c:	5c 34       	neg	r4
8003016e:	f8 05 01 45 	sbc	r5,r12,r5
80030172:	e6 04 06 40 	mulu.d	r0,r3,r4
80030176:	e4 05 07 40 	macu.d	r0,r2,r5
8003017a:	e6 05 06 44 	mulu.d	r4,r3,r5
8003017e:	02 04       	add	r4,r1
80030180:	5c 05       	acr	r5
80030182:	ea 03 15 02 	lsl	r3,r5,0x2
80030186:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8003018a:	e8 02 15 02 	lsl	r2,r4,0x2
8003018e:	e6 08 06 40 	mulu.d	r0,r3,r8
80030192:	e4 09 07 40 	macu.d	r0,r2,r9
80030196:	e6 09 06 44 	mulu.d	r4,r3,r9
8003019a:	02 04       	add	r4,r1
8003019c:	5c 05       	acr	r5
8003019e:	a3 65       	lsl	r5,0x2
800301a0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800301a4:	a3 64       	lsl	r4,0x2
800301a6:	5c 34       	neg	r4
800301a8:	f8 05 01 45 	sbc	r5,r12,r5
800301ac:	e6 04 06 40 	mulu.d	r0,r3,r4
800301b0:	e4 05 07 40 	macu.d	r0,r2,r5
800301b4:	e6 05 06 44 	mulu.d	r4,r3,r5
800301b8:	02 04       	add	r4,r1
800301ba:	5c 05       	acr	r5
800301bc:	ea 03 15 02 	lsl	r3,r5,0x2
800301c0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800301c4:	e8 02 15 02 	lsl	r2,r4,0x2
800301c8:	e6 0a 06 40 	mulu.d	r0,r3,r10
800301cc:	e4 0b 07 40 	macu.d	r0,r2,r11
800301d0:	e6 0b 06 42 	mulu.d	r2,r3,r11
800301d4:	02 02       	add	r2,r1
800301d6:	5c 03       	acr	r3
800301d8:	ed b3 00 1c 	bld	r3,0x1c
800301dc:	c0 90       	breq	800301ee <__avr32_f64_div+0x12a>
800301de:	a1 72       	lsl	r2,0x1
800301e0:	5c f3       	rol	r3
800301e2:	20 17       	sub	r7,1
800301e4:	a3 9a       	lsr	r10,0x3
800301e6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800301ea:	a3 9b       	lsr	r11,0x3
800301ec:	c0 58       	rjmp	800301f6 <__avr32_f64_div+0x132>
800301ee:	a5 8a       	lsr	r10,0x4
800301f0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800301f4:	a5 8b       	lsr	r11,0x4
800301f6:	58 07       	cp.w	r7,0
800301f8:	e0 8a 00 8b 	brle	8003030e <__avr32_f64_div_res_subnormal>
800301fc:	e0 12 ff 00 	andl	r2,0xff00
80030200:	e8 12 00 80 	orl	r2,0x80
80030204:	e6 08 06 40 	mulu.d	r0,r3,r8
80030208:	e4 09 07 40 	macu.d	r0,r2,r9
8003020c:	e4 08 06 44 	mulu.d	r4,r2,r8
80030210:	e6 09 06 48 	mulu.d	r8,r3,r9
80030214:	00 05       	add	r5,r0
80030216:	f0 01 00 48 	adc	r8,r8,r1
8003021a:	5c 09       	acr	r9
8003021c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030220:	58 04       	cp.w	r4,0
80030222:	5c 25       	cpc	r5

80030224 <__avr32_f64_div_round_subnormal>:
80030224:	f4 08 13 00 	cpc	r8,r10
80030228:	f6 09 13 00 	cpc	r9,r11
8003022c:	5f 36       	srlo	r6
8003022e:	f8 06 17 00 	moveq	r6,r12
80030232:	e4 0a 16 08 	lsr	r10,r2,0x8
80030236:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8003023a:	e6 0b 16 08 	lsr	r11,r3,0x8
8003023e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030242:	ed be 00 1f 	bld	lr,0x1f
80030246:	ef bb 00 1f 	bst	r11,0x1f
8003024a:	0c 0a       	add	r10,r6
8003024c:	5c 0b       	acr	r11
8003024e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030252:	e4 1b 00 0f 	andh	r11,0xf
80030256:	14 4b       	or	r11,r10
80030258:	e0 81 00 a7 	brne	800303a6 <__avr32_f64_div_res_subnormal+0x98>
8003025c:	f2 06 16 14 	lsr	r6,r9,0x14
80030260:	ab d6       	cbr	r6,0xb
80030262:	e0 46 07 ff 	cp.w	r6,2047
80030266:	e0 81 00 a4 	brne	800303ae <__avr32_f64_div_res_subnormal+0xa0>
8003026a:	c9 e8       	rjmp	800303a6 <__avr32_f64_div_res_subnormal+0x98>
8003026c:	e4 19 00 0f 	andh	r9,0xf
80030270:	10 49       	or	r9,r8
80030272:	e0 81 00 9a 	brne	800303a6 <__avr32_f64_div_res_subnormal+0x98>
80030276:	c9 28       	rjmp	8003039a <__avr32_f64_div_res_subnormal+0x8c>
80030278:	a3 7b       	lsl	r11,0x3
8003027a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8003027e:	a3 7a       	lsl	r10,0x3
80030280:	f5 eb 10 04 	or	r4,r10,r11
80030284:	e0 80 00 a0 	breq	800303c4 <__avr32_f64_div_op1_zero>
80030288:	f6 04 12 00 	clz	r4,r11
8003028c:	c1 70       	breq	800302ba <__avr32_f64_div_round_subnormal+0x96>
8003028e:	c0 c3       	brcs	800302a6 <__avr32_f64_div_round_subnormal+0x82>
80030290:	e8 05 11 20 	rsub	r5,r4,32
80030294:	f6 04 09 4b 	lsl	r11,r11,r4
80030298:	f4 05 0a 45 	lsr	r5,r10,r5
8003029c:	0a 4b       	or	r11,r5
8003029e:	f4 04 09 4a 	lsl	r10,r10,r4
800302a2:	08 17       	sub	r7,r4
800302a4:	c0 b8       	rjmp	800302ba <__avr32_f64_div_round_subnormal+0x96>
800302a6:	f4 04 12 00 	clz	r4,r10
800302aa:	f9 b4 03 00 	movlo	r4,0
800302ae:	f7 b4 02 e0 	subhs	r4,-32
800302b2:	f4 04 09 4b 	lsl	r11,r10,r4
800302b6:	30 0a       	mov	r10,0
800302b8:	08 17       	sub	r7,r4
800302ba:	a3 8a       	lsr	r10,0x2
800302bc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800302c0:	a3 8b       	lsr	r11,0x2
800302c2:	c1 1b       	rjmp	800300e4 <__avr32_f64_div+0x20>
800302c4:	a3 79       	lsl	r9,0x3
800302c6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800302ca:	a3 78       	lsl	r8,0x3
800302cc:	f3 e8 10 04 	or	r4,r9,r8
800302d0:	c6 f0       	breq	800303ae <__avr32_f64_div_res_subnormal+0xa0>
800302d2:	f2 04 12 00 	clz	r4,r9
800302d6:	c1 70       	breq	80030304 <__avr32_f64_div_round_subnormal+0xe0>
800302d8:	c0 c3       	brcs	800302f0 <__avr32_f64_div_round_subnormal+0xcc>
800302da:	e8 05 11 20 	rsub	r5,r4,32
800302de:	f2 04 09 49 	lsl	r9,r9,r4
800302e2:	f0 05 0a 45 	lsr	r5,r8,r5
800302e6:	0a 49       	or	r9,r5
800302e8:	f0 04 09 48 	lsl	r8,r8,r4
800302ec:	08 16       	sub	r6,r4
800302ee:	c0 b8       	rjmp	80030304 <__avr32_f64_div_round_subnormal+0xe0>
800302f0:	f0 04 12 00 	clz	r4,r8
800302f4:	f9 b4 03 00 	movlo	r4,0
800302f8:	f7 b4 02 e0 	subhs	r4,-32
800302fc:	f0 04 09 49 	lsl	r9,r8,r4
80030300:	30 08       	mov	r8,0
80030302:	08 16       	sub	r6,r4
80030304:	a3 88       	lsr	r8,0x2
80030306:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8003030a:	a3 89       	lsr	r9,0x2
8003030c:	cf ca       	rjmp	80030104 <__avr32_f64_div+0x40>

8003030e <__avr32_f64_div_res_subnormal>:
8003030e:	5c 37       	neg	r7
80030310:	2f f7       	sub	r7,-1
80030312:	f1 b7 04 c0 	satu	r7,0x6
80030316:	e0 47 00 20 	cp.w	r7,32
8003031a:	c1 54       	brge	80030344 <__avr32_f64_div_res_subnormal+0x36>
8003031c:	ee 06 11 20 	rsub	r6,r7,32
80030320:	e4 07 0a 42 	lsr	r2,r2,r7
80030324:	e6 06 09 4c 	lsl	r12,r3,r6
80030328:	18 42       	or	r2,r12
8003032a:	e6 07 0a 43 	lsr	r3,r3,r7
8003032e:	f4 06 09 41 	lsl	r1,r10,r6
80030332:	f4 07 0a 4a 	lsr	r10,r10,r7
80030336:	f6 06 09 4c 	lsl	r12,r11,r6
8003033a:	18 4a       	or	r10,r12
8003033c:	f6 07 0a 4b 	lsr	r11,r11,r7
80030340:	30 00       	mov	r0,0
80030342:	c1 58       	rjmp	8003036c <__avr32_f64_div_res_subnormal+0x5e>
80030344:	ee 06 11 20 	rsub	r6,r7,32
80030348:	f9 b0 00 00 	moveq	r0,0
8003034c:	f9 bc 00 00 	moveq	r12,0
80030350:	c0 50       	breq	8003035a <__avr32_f64_div_res_subnormal+0x4c>
80030352:	f4 06 09 40 	lsl	r0,r10,r6
80030356:	f6 06 09 4c 	lsl	r12,r11,r6
8003035a:	e6 07 0a 42 	lsr	r2,r3,r7
8003035e:	30 03       	mov	r3,0
80030360:	f4 07 0a 41 	lsr	r1,r10,r7
80030364:	18 41       	or	r1,r12
80030366:	f6 07 0a 4a 	lsr	r10,r11,r7
8003036a:	30 0b       	mov	r11,0
8003036c:	e0 12 ff 00 	andl	r2,0xff00
80030370:	e8 12 00 80 	orl	r2,0x80
80030374:	e6 08 06 46 	mulu.d	r6,r3,r8
80030378:	e4 09 07 46 	macu.d	r6,r2,r9
8003037c:	e4 08 06 44 	mulu.d	r4,r2,r8
80030380:	e6 09 06 48 	mulu.d	r8,r3,r9
80030384:	0c 05       	add	r5,r6
80030386:	f0 07 00 48 	adc	r8,r8,r7
8003038a:	5c 09       	acr	r9
8003038c:	30 07       	mov	r7,0
8003038e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030392:	00 34       	cp.w	r4,r0
80030394:	e2 05 13 00 	cpc	r5,r1
80030398:	c4 6b       	rjmp	80030224 <__avr32_f64_div_round_subnormal>
8003039a:	1c 9b       	mov	r11,lr
8003039c:	e6 1b 80 00 	andh	r11,0x8000,COH
800303a0:	30 0a       	mov	r10,0
800303a2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800303a6:	3f fb       	mov	r11,-1
800303a8:	30 0a       	mov	r10,0
800303aa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800303ae:	f5 eb 10 04 	or	r4,r10,r11
800303b2:	c0 90       	breq	800303c4 <__avr32_f64_div_op1_zero>
800303b4:	1c 9b       	mov	r11,lr
800303b6:	e6 1b 80 00 	andh	r11,0x8000,COH
800303ba:	ea 1b 7f f0 	orh	r11,0x7ff0
800303be:	30 0a       	mov	r10,0
800303c0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800303c4 <__avr32_f64_div_op1_zero>:
800303c4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800303c8:	ce f0       	breq	800303a6 <__avr32_f64_div_res_subnormal+0x98>
800303ca:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800303ce:	e0 44 07 ff 	cp.w	r4,2047
800303d2:	ce 41       	brne	8003039a <__avr32_f64_div_res_subnormal+0x8c>
800303d4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800303d8:	ce 10       	breq	8003039a <__avr32_f64_div_res_subnormal+0x8c>
800303da:	ce 6b       	rjmp	800303a6 <__avr32_f64_div_res_subnormal+0x98>

800303dc <__avr32_f32_div>:
800303dc:	f7 ec 20 08 	eor	r8,r11,r12
800303e0:	a1 7c       	lsl	r12,0x1
800303e2:	a1 7b       	lsl	r11,0x1
800303e4:	c7 a0       	breq	800304d8 <__divsf_return_op1+0x16>
800303e6:	18 7c       	tst	r12,r12
800303e8:	f9 b9 00 00 	moveq	r9,0
800303ec:	c0 90       	breq	800303fe <__avr32_f32_div+0x22>
800303ee:	f8 09 16 18 	lsr	r9,r12,0x18
800303f2:	c7 e0       	breq	800304ee <__divsf_return_op1+0x2c>
800303f4:	e0 49 00 ff 	cp.w	r9,255
800303f8:	c6 82       	brcc	800304c8 <__divsf_return_op1+0x6>
800303fa:	a7 7c       	lsl	r12,0x7
800303fc:	bf bc       	sbr	r12,0x1f
800303fe:	f6 0a 16 18 	lsr	r10,r11,0x18
80030402:	c7 e0       	breq	800304fe <__divsf_return_op1+0x3c>
80030404:	e0 4a 00 ff 	cp.w	r10,255
80030408:	c6 62       	brcc	800304d4 <__divsf_return_op1+0x12>
8003040a:	a7 7b       	lsl	r11,0x7
8003040c:	bf bb       	sbr	r11,0x1f
8003040e:	58 09       	cp.w	r9,0
80030410:	f5 bc 00 00 	subfeq	r12,0
80030414:	5e 0d       	reteq	0
80030416:	1a d5       	st.w	--sp,r5
80030418:	bb 27       	st.d	--sp,r6
8003041a:	14 19       	sub	r9,r10
8003041c:	28 19       	sub	r9,-127
8003041e:	fc 1a 80 00 	movh	r10,0x8000
80030422:	a3 8c       	lsr	r12,0x2
80030424:	f6 05 16 02 	lsr	r5,r11,0x2
80030428:	f4 0b 16 01 	lsr	r11,r10,0x1
8003042c:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80030430:	5c d6       	com	r6
80030432:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80030436:	f6 05 06 46 	mulu.d	r6,r11,r5
8003043a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003043e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030442:	ee 0b 15 02 	lsl	r11,r7,0x2
80030446:	f6 05 06 46 	mulu.d	r6,r11,r5
8003044a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003044e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030452:	ee 0b 15 02 	lsl	r11,r7,0x2
80030456:	f6 05 06 46 	mulu.d	r6,r11,r5
8003045a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003045e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030462:	ee 0b 15 02 	lsl	r11,r7,0x2
80030466:	f6 05 06 46 	mulu.d	r6,r11,r5
8003046a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003046e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030472:	ee 0b 15 02 	lsl	r11,r7,0x2
80030476:	f6 0c 06 46 	mulu.d	r6,r11,r12
8003047a:	a5 8c       	lsr	r12,0x4
8003047c:	ed b7 00 1c 	bld	r7,0x1c
80030480:	c0 40       	breq	80030488 <__avr32_f32_div+0xac>
80030482:	a1 77       	lsl	r7,0x1
80030484:	20 19       	sub	r9,1
80030486:	a1 7c       	lsl	r12,0x1
80030488:	58 09       	cp.w	r9,0
8003048a:	e0 8a 00 42 	brle	8003050e <__avr32_f32_div_res_subnormal>
8003048e:	e0 17 ff e0 	andl	r7,0xffe0
80030492:	e8 17 00 10 	orl	r7,0x10
80030496:	ea 07 06 4a 	mulu.d	r10,r5,r7
8003049a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8003049e:	58 0a       	cp.w	r10,0

800304a0 <__avr32_f32_div_round_subnormal>:
800304a0:	f8 0b 13 00 	cpc	r11,r12
800304a4:	5f 3b       	srlo	r11
800304a6:	ea 0b 17 00 	moveq	r11,r5
800304aa:	ee 0c 16 05 	lsr	r12,r7,0x5
800304ae:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
800304b2:	bb 07       	ld.d	r6,sp++
800304b4:	1b 05       	ld.w	r5,sp++
800304b6:	ed b8 00 1f 	bld	r8,0x1f
800304ba:	ef bc 00 1f 	bst	r12,0x1f
800304be:	16 0c       	add	r12,r11
800304c0:	5e fc       	retal	r12

800304c2 <__divsf_return_op1>:
800304c2:	a1 78       	lsl	r8,0x1
800304c4:	5d 0c       	ror	r12
800304c6:	5e fc       	retal	r12
800304c8:	5e 1e       	retne	-1
800304ca:	fc 19 ff 00 	movh	r9,0xff00
800304ce:	12 3b       	cp.w	r11,r9
800304d0:	cf 93       	brcs	800304c2 <__divsf_return_op1>
800304d2:	5e fe       	retal	-1
800304d4:	5e 0d       	reteq	0
800304d6:	5e fe       	retal	-1
800304d8:	18 7c       	tst	r12,r12
800304da:	5e 0e       	reteq	-1
800304dc:	f8 09 16 18 	lsr	r9,r12,0x18
800304e0:	c0 70       	breq	800304ee <__divsf_return_op1+0x2c>
800304e2:	e0 49 00 ff 	cp.w	r9,255
800304e6:	cf 12       	brcc	800304c8 <__divsf_return_op1+0x6>
800304e8:	fc 1c ff 00 	movh	r12,0xff00
800304ec:	ce bb       	rjmp	800304c2 <__divsf_return_op1>
800304ee:	a7 7c       	lsl	r12,0x7
800304f0:	f8 09 12 00 	clz	r9,r12
800304f4:	f8 09 09 4c 	lsl	r12,r12,r9
800304f8:	f2 09 11 01 	rsub	r9,r9,1
800304fc:	c8 1b       	rjmp	800303fe <__avr32_f32_div+0x22>
800304fe:	a7 7b       	lsl	r11,0x7
80030500:	f6 0a 12 00 	clz	r10,r11
80030504:	f6 0a 09 4b 	lsl	r11,r11,r10
80030508:	f4 0a 11 01 	rsub	r10,r10,1
8003050c:	c8 5b       	rjmp	80030416 <__avr32_f32_div+0x3a>

8003050e <__avr32_f32_div_res_subnormal>:
8003050e:	5c 39       	neg	r9
80030510:	2f f9       	sub	r9,-1
80030512:	f1 b9 04 a0 	satu	r9,0x5
80030516:	f2 0a 11 20 	rsub	r10,r9,32
8003051a:	ee 09 0a 47 	lsr	r7,r7,r9
8003051e:	f8 0a 09 46 	lsl	r6,r12,r10
80030522:	f8 09 0a 4c 	lsr	r12,r12,r9
80030526:	e0 17 ff e0 	andl	r7,0xffe0
8003052a:	e8 17 00 10 	orl	r7,0x10
8003052e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030532:	30 09       	mov	r9,0
80030534:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030538:	0c 3a       	cp.w	r10,r6
8003053a:	cb 3b       	rjmp	800304a0 <__avr32_f32_div_round_subnormal>

8003053c <__avr32_f32_to_f64>:
8003053c:	f8 0b 15 01 	lsl	r11,r12,0x1
80030540:	f9 ba 00 00 	moveq	r10,0
80030544:	5e 0b       	reteq	r11
80030546:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
8003054a:	e0 49 00 ff 	cp.w	r9,255
8003054e:	c1 e0       	breq	8003058a <__extendsfdf_return_op1+0x6>
80030550:	a7 7b       	lsl	r11,0x7
80030552:	30 0a       	mov	r10,0
80030554:	58 09       	cp.w	r9,0
80030556:	f7 b9 00 ff 	subeq	r9,-1
8003055a:	5f 18       	srne	r8
8003055c:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80030560:	fe 39 fc 80 	sub	r9,-896
80030564:	f6 08 12 00 	clz	r8,r11
80030568:	10 19       	sub	r9,r8
8003056a:	f6 08 09 4b 	lsl	r11,r11,r8
8003056e:	ed bb 00 1f 	bld	r11,0x1f
80030572:	f7 b9 01 01 	subne	r9,1
80030576:	ab 9a       	lsr	r10,0xb
80030578:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8003057c:	a1 7b       	lsl	r11,0x1
8003057e:	ab 9b       	lsr	r11,0xb
80030580:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030584 <__extendsfdf_return_op1>:
80030584:	a1 7c       	lsl	r12,0x1
80030586:	5d 0b       	ror	r11
80030588:	5e fb       	retal	r11
8003058a:	fc 1a ff e0 	movh	r10,0xffe0
8003058e:	a9 6b       	lsl	r11,0x8
80030590:	f9 bb 01 ff 	movne	r11,-1
80030594:	f4 0b 17 00 	moveq	r11,r10
80030598:	30 0a       	mov	r10,0
8003059a:	cf 5b       	rjmp	80030584 <__extendsfdf_return_op1>

8003059c <__avr32_f64_to_f32>:
8003059c:	f6 09 15 01 	lsl	r9,r11,0x1
800305a0:	b5 99       	lsr	r9,0x15
800305a2:	5e 0d       	reteq	0
800305a4:	f6 08 15 0a 	lsl	r8,r11,0xa
800305a8:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
800305ac:	ab 6a       	lsl	r10,0xa
800305ae:	5c 3a       	neg	r10
800305b0:	5c fc       	rol	r12
800305b2:	e0 49 07 ff 	cp.w	r9,2047
800305b6:	c1 a0       	breq	800305ea <__truncdfsf_return_op1+0x6>
800305b8:	e0 29 03 80 	sub	r9,896
800305bc:	bf bc       	sbr	r12,0x1f
800305be:	58 09       	cp.w	r9,0
800305c0:	e0 8a 00 1a 	brle	800305f4 <__truncdfsf_return_op1+0x10>
800305c4:	37 fa       	mov	r10,127
800305c6:	ed bc 00 08 	bld	r12,0x8
800305ca:	f7 ba 00 ff 	subeq	r10,-1
800305ce:	14 0c       	add	r12,r10
800305d0:	f7 b9 03 fe 	sublo	r9,-2
800305d4:	ed bc 00 1f 	bld	r12,0x1f
800305d8:	f7 b9 01 01 	subne	r9,1
800305dc:	f8 0c 16 07 	lsr	r12,r12,0x7
800305e0:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

800305e4 <__truncdfsf_return_op1>:
800305e4:	a1 7b       	lsl	r11,0x1
800305e6:	5d 0c       	ror	r12
800305e8:	5e fc       	retal	r12
800305ea:	bf dc       	cbr	r12,0x1f
800305ec:	5e 1e       	retne	-1
800305ee:	fc 1c 7f 80 	movh	r12,0x7f80
800305f2:	5e fc       	retal	r12
800305f4:	f2 09 11 01 	rsub	r9,r9,1
800305f8:	59 99       	cp.w	r9,25
800305fa:	f9 bc 02 00 	movhs	r12,0
800305fe:	c1 32       	brcc	80030624 <__truncdfsf_return_op1+0x40>
80030600:	f2 0a 11 20 	rsub	r10,r9,32
80030604:	f8 0a 09 4a 	lsl	r10,r12,r10
80030608:	5f 1a       	srne	r10
8003060a:	f8 09 0a 4c 	lsr	r12,r12,r9
8003060e:	14 4c       	or	r12,r10
80030610:	37 fa       	mov	r10,127
80030612:	ed bc 00 08 	bld	r12,0x8
80030616:	f7 ba 00 ff 	subeq	r10,-1
8003061a:	14 0c       	add	r12,r10
8003061c:	f8 0c 16 07 	lsr	r12,r12,0x7
80030620:	a1 7b       	lsl	r11,0x1
80030622:	5d 0c       	ror	r12
80030624:	5e fc       	retal	r12

80030626 <__avr32_udiv64>:
80030626:	d4 31       	pushm	r0-r7,lr
80030628:	1a 97       	mov	r7,sp
8003062a:	20 3d       	sub	sp,12
8003062c:	10 9c       	mov	r12,r8
8003062e:	12 9e       	mov	lr,r9
80030630:	14 93       	mov	r3,r10
80030632:	58 09       	cp.w	r9,0
80030634:	e0 81 00 bd 	brne	800307ae <__avr32_udiv64+0x188>
80030638:	16 38       	cp.w	r8,r11
8003063a:	e0 88 00 40 	brls	800306ba <__avr32_udiv64+0x94>
8003063e:	f0 08 12 00 	clz	r8,r8
80030642:	c0 d0       	breq	8003065c <__avr32_udiv64+0x36>
80030644:	f6 08 09 4b 	lsl	r11,r11,r8
80030648:	f0 09 11 20 	rsub	r9,r8,32
8003064c:	f8 08 09 4c 	lsl	r12,r12,r8
80030650:	f4 09 0a 49 	lsr	r9,r10,r9
80030654:	f4 08 09 43 	lsl	r3,r10,r8
80030658:	f3 eb 10 0b 	or	r11,r9,r11
8003065c:	f8 0e 16 10 	lsr	lr,r12,0x10
80030660:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80030664:	f6 0e 0d 00 	divu	r0,r11,lr
80030668:	e6 0b 16 10 	lsr	r11,r3,0x10
8003066c:	00 99       	mov	r9,r0
8003066e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030672:	e0 0a 02 48 	mul	r8,r0,r10
80030676:	10 3b       	cp.w	r11,r8
80030678:	c0 a2       	brcc	8003068c <__avr32_udiv64+0x66>
8003067a:	20 19       	sub	r9,1
8003067c:	18 0b       	add	r11,r12
8003067e:	18 3b       	cp.w	r11,r12
80030680:	c0 63       	brcs	8003068c <__avr32_udiv64+0x66>
80030682:	10 3b       	cp.w	r11,r8
80030684:	f7 b9 03 01 	sublo	r9,1
80030688:	f7 dc e3 0b 	addcs	r11,r11,r12
8003068c:	f6 08 01 01 	sub	r1,r11,r8
80030690:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030694:	e2 0e 0d 00 	divu	r0,r1,lr
80030698:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8003069c:	00 98       	mov	r8,r0
8003069e:	e0 0a 02 4a 	mul	r10,r0,r10
800306a2:	14 33       	cp.w	r3,r10
800306a4:	c0 82       	brcc	800306b4 <__avr32_udiv64+0x8e>
800306a6:	20 18       	sub	r8,1
800306a8:	18 03       	add	r3,r12
800306aa:	18 33       	cp.w	r3,r12
800306ac:	c0 43       	brcs	800306b4 <__avr32_udiv64+0x8e>
800306ae:	14 33       	cp.w	r3,r10
800306b0:	f7 b8 03 01 	sublo	r8,1
800306b4:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800306b8:	cd f8       	rjmp	80030876 <__avr32_udiv64+0x250>
800306ba:	58 08       	cp.w	r8,0
800306bc:	c0 51       	brne	800306c6 <__avr32_udiv64+0xa0>
800306be:	30 19       	mov	r9,1
800306c0:	f2 08 0d 08 	divu	r8,r9,r8
800306c4:	10 9c       	mov	r12,r8
800306c6:	f8 06 12 00 	clz	r6,r12
800306ca:	c0 41       	brne	800306d2 <__avr32_udiv64+0xac>
800306cc:	18 1b       	sub	r11,r12
800306ce:	30 19       	mov	r9,1
800306d0:	c4 08       	rjmp	80030750 <__avr32_udiv64+0x12a>
800306d2:	ec 01 11 20 	rsub	r1,r6,32
800306d6:	f4 01 0a 49 	lsr	r9,r10,r1
800306da:	f8 06 09 4c 	lsl	r12,r12,r6
800306de:	f6 06 09 48 	lsl	r8,r11,r6
800306e2:	f6 01 0a 41 	lsr	r1,r11,r1
800306e6:	f3 e8 10 08 	or	r8,r9,r8
800306ea:	f8 03 16 10 	lsr	r3,r12,0x10
800306ee:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800306f2:	e2 03 0d 00 	divu	r0,r1,r3
800306f6:	f0 0b 16 10 	lsr	r11,r8,0x10
800306fa:	00 9e       	mov	lr,r0
800306fc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030700:	e0 05 02 49 	mul	r9,r0,r5
80030704:	12 3b       	cp.w	r11,r9
80030706:	c0 a2       	brcc	8003071a <__avr32_udiv64+0xf4>
80030708:	20 1e       	sub	lr,1
8003070a:	18 0b       	add	r11,r12
8003070c:	18 3b       	cp.w	r11,r12
8003070e:	c0 63       	brcs	8003071a <__avr32_udiv64+0xf4>
80030710:	12 3b       	cp.w	r11,r9
80030712:	f7 be 03 01 	sublo	lr,1
80030716:	f7 dc e3 0b 	addcs	r11,r11,r12
8003071a:	12 1b       	sub	r11,r9
8003071c:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80030720:	f6 03 0d 02 	divu	r2,r11,r3
80030724:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80030728:	04 99       	mov	r9,r2
8003072a:	e4 05 02 4b 	mul	r11,r2,r5
8003072e:	16 38       	cp.w	r8,r11
80030730:	c0 a2       	brcc	80030744 <__avr32_udiv64+0x11e>
80030732:	20 19       	sub	r9,1
80030734:	18 08       	add	r8,r12
80030736:	18 38       	cp.w	r8,r12
80030738:	c0 63       	brcs	80030744 <__avr32_udiv64+0x11e>
8003073a:	16 38       	cp.w	r8,r11
8003073c:	f7 b9 03 01 	sublo	r9,1
80030740:	f1 dc e3 08 	addcs	r8,r8,r12
80030744:	f4 06 09 43 	lsl	r3,r10,r6
80030748:	f0 0b 01 0b 	sub	r11,r8,r11
8003074c:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80030750:	f8 06 16 10 	lsr	r6,r12,0x10
80030754:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80030758:	f6 06 0d 00 	divu	r0,r11,r6
8003075c:	e6 0b 16 10 	lsr	r11,r3,0x10
80030760:	00 9a       	mov	r10,r0
80030762:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030766:	e0 0e 02 48 	mul	r8,r0,lr
8003076a:	10 3b       	cp.w	r11,r8
8003076c:	c0 a2       	brcc	80030780 <__avr32_udiv64+0x15a>
8003076e:	20 1a       	sub	r10,1
80030770:	18 0b       	add	r11,r12
80030772:	18 3b       	cp.w	r11,r12
80030774:	c0 63       	brcs	80030780 <__avr32_udiv64+0x15a>
80030776:	10 3b       	cp.w	r11,r8
80030778:	f7 ba 03 01 	sublo	r10,1
8003077c:	f7 dc e3 0b 	addcs	r11,r11,r12
80030780:	f6 08 01 01 	sub	r1,r11,r8
80030784:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030788:	e2 06 0d 00 	divu	r0,r1,r6
8003078c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80030790:	00 98       	mov	r8,r0
80030792:	e0 0e 02 4b 	mul	r11,r0,lr
80030796:	16 33       	cp.w	r3,r11
80030798:	c0 82       	brcc	800307a8 <__avr32_udiv64+0x182>
8003079a:	20 18       	sub	r8,1
8003079c:	18 03       	add	r3,r12
8003079e:	18 33       	cp.w	r3,r12
800307a0:	c0 43       	brcs	800307a8 <__avr32_udiv64+0x182>
800307a2:	16 33       	cp.w	r3,r11
800307a4:	f7 b8 03 01 	sublo	r8,1
800307a8:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800307ac:	c6 98       	rjmp	8003087e <__avr32_udiv64+0x258>
800307ae:	16 39       	cp.w	r9,r11
800307b0:	e0 8b 00 65 	brhi	8003087a <__avr32_udiv64+0x254>
800307b4:	f2 09 12 00 	clz	r9,r9
800307b8:	c0 b1       	brne	800307ce <__avr32_udiv64+0x1a8>
800307ba:	10 3a       	cp.w	r10,r8
800307bc:	5f 2a       	srhs	r10
800307be:	1c 3b       	cp.w	r11,lr
800307c0:	5f b8       	srhi	r8
800307c2:	10 4a       	or	r10,r8
800307c4:	f2 0a 18 00 	cp.b	r10,r9
800307c8:	c5 90       	breq	8003087a <__avr32_udiv64+0x254>
800307ca:	30 18       	mov	r8,1
800307cc:	c5 98       	rjmp	8003087e <__avr32_udiv64+0x258>
800307ce:	f0 09 09 46 	lsl	r6,r8,r9
800307d2:	f2 03 11 20 	rsub	r3,r9,32
800307d6:	fc 09 09 4e 	lsl	lr,lr,r9
800307da:	f0 03 0a 48 	lsr	r8,r8,r3
800307de:	f6 09 09 4c 	lsl	r12,r11,r9
800307e2:	f4 03 0a 42 	lsr	r2,r10,r3
800307e6:	ef 46 ff f4 	st.w	r7[-12],r6
800307ea:	f6 03 0a 43 	lsr	r3,r11,r3
800307ee:	18 42       	or	r2,r12
800307f0:	f1 ee 10 0c 	or	r12,r8,lr
800307f4:	f8 01 16 10 	lsr	r1,r12,0x10
800307f8:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800307fc:	e6 01 0d 04 	divu	r4,r3,r1
80030800:	e4 03 16 10 	lsr	r3,r2,0x10
80030804:	08 9e       	mov	lr,r4
80030806:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8003080a:	e8 06 02 48 	mul	r8,r4,r6
8003080e:	10 33       	cp.w	r3,r8
80030810:	c0 a2       	brcc	80030824 <__avr32_udiv64+0x1fe>
80030812:	20 1e       	sub	lr,1
80030814:	18 03       	add	r3,r12
80030816:	18 33       	cp.w	r3,r12
80030818:	c0 63       	brcs	80030824 <__avr32_udiv64+0x1fe>
8003081a:	10 33       	cp.w	r3,r8
8003081c:	f7 be 03 01 	sublo	lr,1
80030820:	e7 dc e3 03 	addcs	r3,r3,r12
80030824:	10 13       	sub	r3,r8
80030826:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8003082a:	e6 01 0d 00 	divu	r0,r3,r1
8003082e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030832:	00 98       	mov	r8,r0
80030834:	e0 06 02 46 	mul	r6,r0,r6
80030838:	0c 3b       	cp.w	r11,r6
8003083a:	c0 a2       	brcc	8003084e <__avr32_udiv64+0x228>
8003083c:	20 18       	sub	r8,1
8003083e:	18 0b       	add	r11,r12
80030840:	18 3b       	cp.w	r11,r12
80030842:	c0 63       	brcs	8003084e <__avr32_udiv64+0x228>
80030844:	0c 3b       	cp.w	r11,r6
80030846:	f7 dc e3 0b 	addcs	r11,r11,r12
8003084a:	f7 b8 03 01 	sublo	r8,1
8003084e:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80030852:	ee f4 ff f4 	ld.w	r4,r7[-12]
80030856:	0c 1b       	sub	r11,r6
80030858:	f0 04 06 42 	mulu.d	r2,r8,r4
8003085c:	06 95       	mov	r5,r3
8003085e:	16 35       	cp.w	r5,r11
80030860:	e0 8b 00 0a 	brhi	80030874 <__avr32_udiv64+0x24e>
80030864:	5f 0b       	sreq	r11
80030866:	f4 09 09 49 	lsl	r9,r10,r9
8003086a:	12 32       	cp.w	r2,r9
8003086c:	5f b9       	srhi	r9
8003086e:	f7 e9 00 09 	and	r9,r11,r9
80030872:	c0 60       	breq	8003087e <__avr32_udiv64+0x258>
80030874:	20 18       	sub	r8,1
80030876:	30 09       	mov	r9,0
80030878:	c0 38       	rjmp	8003087e <__avr32_udiv64+0x258>
8003087a:	30 09       	mov	r9,0
8003087c:	12 98       	mov	r8,r9
8003087e:	10 9a       	mov	r10,r8
80030880:	12 93       	mov	r3,r9
80030882:	10 92       	mov	r2,r8
80030884:	12 9b       	mov	r11,r9
80030886:	2f dd       	sub	sp,-12
80030888:	d8 32       	popm	r0-r7,pc
8003088a:	d7 03       	nop

8003088c <__errno>:
8003088c:	48 28       	lddpc	r8,80030894 <__errno+0x8>
8003088e:	70 0c       	ld.w	r12,r8[0x0]
80030890:	2f 4c       	sub	r12,-12
80030892:	5e fc       	retal	r12
80030894:	00 00       	add	r0,r0
80030896:	24 6c       	sub	r12,70

80030898 <memcpy>:
80030898:	58 8a       	cp.w	r10,8
8003089a:	c2 f5       	brlt	800308f8 <memcpy+0x60>
8003089c:	f9 eb 10 09 	or	r9,r12,r11
800308a0:	e2 19 00 03 	andl	r9,0x3,COH
800308a4:	e0 81 00 97 	brne	800309d2 <memcpy+0x13a>
800308a8:	e0 4a 00 20 	cp.w	r10,32
800308ac:	c3 b4       	brge	80030922 <memcpy+0x8a>
800308ae:	f4 08 14 02 	asr	r8,r10,0x2
800308b2:	f0 09 11 08 	rsub	r9,r8,8
800308b6:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800308ba:	76 69       	ld.w	r9,r11[0x18]
800308bc:	99 69       	st.w	r12[0x18],r9
800308be:	76 59       	ld.w	r9,r11[0x14]
800308c0:	99 59       	st.w	r12[0x14],r9
800308c2:	76 49       	ld.w	r9,r11[0x10]
800308c4:	99 49       	st.w	r12[0x10],r9
800308c6:	76 39       	ld.w	r9,r11[0xc]
800308c8:	99 39       	st.w	r12[0xc],r9
800308ca:	76 29       	ld.w	r9,r11[0x8]
800308cc:	99 29       	st.w	r12[0x8],r9
800308ce:	76 19       	ld.w	r9,r11[0x4]
800308d0:	99 19       	st.w	r12[0x4],r9
800308d2:	76 09       	ld.w	r9,r11[0x0]
800308d4:	99 09       	st.w	r12[0x0],r9
800308d6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800308da:	f8 08 00 28 	add	r8,r12,r8<<0x2
800308de:	e0 1a 00 03 	andl	r10,0x3
800308e2:	f4 0a 11 04 	rsub	r10,r10,4
800308e6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800308ea:	17 a9       	ld.ub	r9,r11[0x2]
800308ec:	b0 a9       	st.b	r8[0x2],r9
800308ee:	17 99       	ld.ub	r9,r11[0x1]
800308f0:	b0 99       	st.b	r8[0x1],r9
800308f2:	17 89       	ld.ub	r9,r11[0x0]
800308f4:	b0 89       	st.b	r8[0x0],r9
800308f6:	5e fc       	retal	r12
800308f8:	f4 0a 11 09 	rsub	r10,r10,9
800308fc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80030900:	17 f9       	ld.ub	r9,r11[0x7]
80030902:	b8 f9       	st.b	r12[0x7],r9
80030904:	17 e9       	ld.ub	r9,r11[0x6]
80030906:	b8 e9       	st.b	r12[0x6],r9
80030908:	17 d9       	ld.ub	r9,r11[0x5]
8003090a:	b8 d9       	st.b	r12[0x5],r9
8003090c:	17 c9       	ld.ub	r9,r11[0x4]
8003090e:	b8 c9       	st.b	r12[0x4],r9
80030910:	17 b9       	ld.ub	r9,r11[0x3]
80030912:	b8 b9       	st.b	r12[0x3],r9
80030914:	17 a9       	ld.ub	r9,r11[0x2]
80030916:	b8 a9       	st.b	r12[0x2],r9
80030918:	17 99       	ld.ub	r9,r11[0x1]
8003091a:	b8 99       	st.b	r12[0x1],r9
8003091c:	17 89       	ld.ub	r9,r11[0x0]
8003091e:	b8 89       	st.b	r12[0x0],r9
80030920:	5e fc       	retal	r12
80030922:	eb cd 40 c0 	pushm	r6-r7,lr
80030926:	18 99       	mov	r9,r12
80030928:	22 0a       	sub	r10,32
8003092a:	b7 07       	ld.d	r6,r11++
8003092c:	b3 26       	st.d	r9++,r6
8003092e:	b7 07       	ld.d	r6,r11++
80030930:	b3 26       	st.d	r9++,r6
80030932:	b7 07       	ld.d	r6,r11++
80030934:	b3 26       	st.d	r9++,r6
80030936:	b7 07       	ld.d	r6,r11++
80030938:	b3 26       	st.d	r9++,r6
8003093a:	22 0a       	sub	r10,32
8003093c:	cf 74       	brge	8003092a <memcpy+0x92>
8003093e:	2f 0a       	sub	r10,-16
80030940:	c0 65       	brlt	8003094c <memcpy+0xb4>
80030942:	b7 07       	ld.d	r6,r11++
80030944:	b3 26       	st.d	r9++,r6
80030946:	b7 07       	ld.d	r6,r11++
80030948:	b3 26       	st.d	r9++,r6
8003094a:	21 0a       	sub	r10,16
8003094c:	5c 3a       	neg	r10
8003094e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80030952:	d7 03       	nop
80030954:	d7 03       	nop
80030956:	f7 36 00 0e 	ld.ub	r6,r11[14]
8003095a:	f3 66 00 0e 	st.b	r9[14],r6
8003095e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80030962:	f3 66 00 0d 	st.b	r9[13],r6
80030966:	f7 36 00 0c 	ld.ub	r6,r11[12]
8003096a:	f3 66 00 0c 	st.b	r9[12],r6
8003096e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80030972:	f3 66 00 0b 	st.b	r9[11],r6
80030976:	f7 36 00 0a 	ld.ub	r6,r11[10]
8003097a:	f3 66 00 0a 	st.b	r9[10],r6
8003097e:	f7 36 00 09 	ld.ub	r6,r11[9]
80030982:	f3 66 00 09 	st.b	r9[9],r6
80030986:	f7 36 00 08 	ld.ub	r6,r11[8]
8003098a:	f3 66 00 08 	st.b	r9[8],r6
8003098e:	f7 36 00 07 	ld.ub	r6,r11[7]
80030992:	f3 66 00 07 	st.b	r9[7],r6
80030996:	f7 36 00 06 	ld.ub	r6,r11[6]
8003099a:	f3 66 00 06 	st.b	r9[6],r6
8003099e:	f7 36 00 05 	ld.ub	r6,r11[5]
800309a2:	f3 66 00 05 	st.b	r9[5],r6
800309a6:	f7 36 00 04 	ld.ub	r6,r11[4]
800309aa:	f3 66 00 04 	st.b	r9[4],r6
800309ae:	f7 36 00 03 	ld.ub	r6,r11[3]
800309b2:	f3 66 00 03 	st.b	r9[3],r6
800309b6:	f7 36 00 02 	ld.ub	r6,r11[2]
800309ba:	f3 66 00 02 	st.b	r9[2],r6
800309be:	f7 36 00 01 	ld.ub	r6,r11[1]
800309c2:	f3 66 00 01 	st.b	r9[1],r6
800309c6:	f7 36 00 00 	ld.ub	r6,r11[0]
800309ca:	f3 66 00 00 	st.b	r9[0],r6
800309ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800309d2:	20 1a       	sub	r10,1
800309d4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800309d8:	f8 0a 0b 09 	st.b	r12[r10],r9
800309dc:	cf b1       	brne	800309d2 <memcpy+0x13a>
800309de:	5e fc       	retal	r12

800309e0 <memset>:
800309e0:	18 98       	mov	r8,r12
800309e2:	c0 38       	rjmp	800309e8 <memset+0x8>
800309e4:	10 cb       	st.b	r8++,r11
800309e6:	20 1a       	sub	r10,1
800309e8:	58 0a       	cp.w	r10,0
800309ea:	cf d1       	brne	800309e4 <memset+0x4>
800309ec:	5e fc       	retal	r12

800309ee <strcpy>:
800309ee:	30 08       	mov	r8,0
800309f0:	f6 08 07 09 	ld.ub	r9,r11[r8]
800309f4:	f8 08 0b 09 	st.b	r12[r8],r9
800309f8:	2f f8       	sub	r8,-1
800309fa:	58 09       	cp.w	r9,0
800309fc:	cf a1       	brne	800309f0 <strcpy+0x2>
800309fe:	5e fc       	retal	r12

80030a00 <strlen>:
80030a00:	30 09       	mov	r9,0
80030a02:	18 98       	mov	r8,r12
80030a04:	c0 28       	rjmp	80030a08 <strlen+0x8>
80030a06:	2f f8       	sub	r8,-1
80030a08:	11 8a       	ld.ub	r10,r8[0x0]
80030a0a:	f2 0a 18 00 	cp.b	r10,r9
80030a0e:	cf c1       	brne	80030a06 <strlen+0x6>
80030a10:	f0 0c 01 0c 	sub	r12,r8,r12
80030a14:	5e fc       	retal	r12

Disassembly of section .exception:

80030c00 <_evba>:
80030c00:	c0 08       	rjmp	80030c00 <_evba>
	...

80030c04 <_handle_TLB_Multiple_Hit>:
80030c04:	c0 08       	rjmp	80030c04 <_handle_TLB_Multiple_Hit>
	...

80030c08 <_handle_Bus_Error_Data_Fetch>:
80030c08:	c0 08       	rjmp	80030c08 <_handle_Bus_Error_Data_Fetch>
	...

80030c0c <_handle_Bus_Error_Instruction_Fetch>:
80030c0c:	c0 08       	rjmp	80030c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80030c10 <_handle_NMI>:
80030c10:	4c ff       	lddpc	pc,80030d4c <ipr_val+0x10>
	...

80030c14 <_handle_Instruction_Address>:
80030c14:	c0 08       	rjmp	80030c14 <_handle_Instruction_Address>
	...

80030c18 <_handle_ITLB_Protection>:
80030c18:	c0 08       	rjmp	80030c18 <_handle_ITLB_Protection>
	...

80030c1c <_handle_Breakpoint>:
80030c1c:	c0 08       	rjmp	80030c1c <_handle_Breakpoint>
	...

80030c20 <_handle_Illegal_Opcode>:
80030c20:	c0 08       	rjmp	80030c20 <_handle_Illegal_Opcode>
	...

80030c24 <_handle_Unimplemented_Instruction>:
80030c24:	c0 08       	rjmp	80030c24 <_handle_Unimplemented_Instruction>
	...

80030c28 <_handle_Privilege_Violation>:
80030c28:	c0 08       	rjmp	80030c28 <_handle_Privilege_Violation>
	...

80030c2c <_handle_Floating_Point>:
80030c2c:	c0 08       	rjmp	80030c2c <_handle_Floating_Point>
	...

80030c30 <_handle_Coprocessor_Absent>:
80030c30:	c0 08       	rjmp	80030c30 <_handle_Coprocessor_Absent>
	...

80030c34 <_handle_Data_Address_Read>:
80030c34:	c0 08       	rjmp	80030c34 <_handle_Data_Address_Read>
	...

80030c38 <_handle_Data_Address_Write>:
80030c38:	c0 08       	rjmp	80030c38 <_handle_Data_Address_Write>
	...

80030c3c <_handle_DTLB_Protection_Read>:
80030c3c:	c0 08       	rjmp	80030c3c <_handle_DTLB_Protection_Read>
	...

80030c40 <_handle_DTLB_Protection_Write>:
80030c40:	c0 08       	rjmp	80030c40 <_handle_DTLB_Protection_Write>
	...

80030c44 <_handle_DTLB_Modified>:
80030c44:	c0 08       	rjmp	80030c44 <_handle_DTLB_Modified>
	...

80030c50 <_handle_ITLB_Miss>:
80030c50:	c0 08       	rjmp	80030c50 <_handle_ITLB_Miss>
	...

80030c60 <_handle_DTLB_Miss_Read>:
80030c60:	c0 08       	rjmp	80030c60 <_handle_DTLB_Miss_Read>
	...

80030c70 <_handle_DTLB_Miss_Write>:
80030c70:	c0 08       	rjmp	80030c70 <_handle_DTLB_Miss_Write>
	...

80030d00 <_handle_Supervisor_Call>:
80030d00:	c0 08       	rjmp	80030d00 <_handle_Supervisor_Call>
80030d02:	d7 03       	nop

80030d04 <_int0>:
80030d04:	30 0c       	mov	r12,0
80030d06:	fe b0 b0 2b 	rcall	80026d5c <_get_interrupt_handler>
80030d0a:	58 0c       	cp.w	r12,0
80030d0c:	f8 0f 17 10 	movne	pc,r12
80030d10:	d6 03       	rete

80030d12 <_int1>:
80030d12:	30 1c       	mov	r12,1
80030d14:	fe b0 b0 24 	rcall	80026d5c <_get_interrupt_handler>
80030d18:	58 0c       	cp.w	r12,0
80030d1a:	f8 0f 17 10 	movne	pc,r12
80030d1e:	d6 03       	rete

80030d20 <_int2>:
80030d20:	30 2c       	mov	r12,2
80030d22:	fe b0 b0 1d 	rcall	80026d5c <_get_interrupt_handler>
80030d26:	58 0c       	cp.w	r12,0
80030d28:	f8 0f 17 10 	movne	pc,r12
80030d2c:	d6 03       	rete

80030d2e <_int3>:
80030d2e:	30 3c       	mov	r12,3
80030d30:	fe b0 b0 16 	rcall	80026d5c <_get_interrupt_handler>
80030d34:	58 0c       	cp.w	r12,0
80030d36:	f8 0f 17 10 	movne	pc,r12
80030d3a:	d6 03       	rete

80030d3c <ipr_val>:
80030d3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80030d4c:	80 01 53 18 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..S.............
80030d5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030d6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030d7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030d8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030d9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030dac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030dbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030dcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030ddc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030dec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80030dfc:	d7 03 d7 03                                         ....
