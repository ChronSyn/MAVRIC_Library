
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002f106  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031200  80031200  00031600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80031400  80031400  00031800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80031a44  80031a44  00031e44  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80031a48  00032004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          0000090c  0000017c  80031bc0  0003217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000163c  00000a88  800324cc  00032a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .balign       00000004  000020c4  80033b08  000340c4  2**0
                  ALLOC
 10 .bss          00007630  000020c8  80033b08  000340c8  2**2
                  ALLOC
 11 .comment      00000030  00000000  00000000  000340c4  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000c08  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00007aef  00000000  00000000  00034d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0005dc42  00000000  00000000  0003c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000090e5  00000000  00000000  0009a431  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000115a2  00000000  00000000  000a3516  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008634  00000000  00000000  000b4ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ed41  00000000  00000000  000bd0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000d6d1  00000000  00000000  000cbe2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 21 .debug_ranges 000005d8  00000000  00000000  000d9500  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	ba ec       	st.b	sp[0x6],r12

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 31 	mcall	r6[196]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 1b 	mcall	r6[108]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	48 96       	lddpc	r6,8000241c <init_neighbors+0x28>
800023fc:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
800023fe:	f0 16 00 33 	mcall	r6[204]
80002402:	18 99       	mov	r9,r12
80002404:	ec f8 00 00 	ld.w	r8,r6[0]
80002408:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000240a:	ec f8 00 00 	ld.w	r8,r6[0]
8000240e:	70 09       	ld.w	r9,r8[0x0]
80002410:	30 08       	mov	r8,0
80002412:	f3 68 10 fc 	st.b	r9[4348],r8
}
80002416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000241a:	00 00       	add	r0,r0
8000241c:	80 00       	ld.sh	r0,r0[0x0]
8000241e:	22 80       	sub	r0,40
80002420:	54 68       	stdsp	sp[0x118],r8
80002422:	65 72       	ld.w	r2,r2[0x5c]
80002424:	65 20       	ld.w	r0,r2[0x48]
80002426:	69 73       	ld.w	r3,r4[0x5c]
80002428:	20 6d       	sub	sp,24
8000242a:	6f 72       	ld.w	r2,r7[0x5c]
8000242c:	65 20       	ld.w	r0,r2[0x48]
8000242e:	6e 65       	ld.w	r5,r7[0x18]
80002430:	69 67       	ld.w	r7,r4[0x58]
80002432:	68 62       	ld.w	r2,r4[0x18]
80002434:	6f 72       	ld.w	r2,r7[0x5c]
80002436:	73 20       	ld.w	r0,r9[0x48]
80002438:	74 68       	ld.w	r8,r10[0x18]
8000243a:	61 6e       	ld.w	lr,r0[0x58]
8000243c:	20 70       	sub	r0,7
8000243e:	6c 61       	ld.w	r1,r6[0x18]
80002440:	6e 6e       	ld.w	lr,r7[0x18]
80002442:	65 64       	ld.w	r4,r2[0x58]
80002444:	21 0a       	sub	r10,16
	...

80002448 <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
80002448:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000244c:	1a 97       	mov	r7,sp
8000244e:	fa cd 00 a0 	sub	sp,sp,160
80002452:	fe f6 03 66 	ld.w	r6,pc[870]
80002456:	1e 26       	rsub	r6,pc
80002458:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
8000245c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002460:	ee c9 00 20 	sub	r9,r7,32
80002464:	12 9b       	mov	r11,r9
80002466:	10 9c       	mov	r12,r8
80002468:	c7 2f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
8000246a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000246e:	11 d9       	ld.ub	r9,r8[0x5]
80002470:	ec f8 00 74 	ld.w	r8,r6[116]
80002474:	11 88       	ld.ub	r8,r8[0x0]
80002476:	f0 09 18 00 	cp.b	r9,r8
8000247a:	e0 80 01 9c 	breq	800027b2 <read_msg_from_neighbors+0x36a>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
8000247e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002482:	10 9c       	mov	r12,r8
80002484:	f0 16 00 1a 	mcall	r6[104]
80002488:	30 08       	mov	r8,0
8000248a:	e0 69 12 d0 	mov	r9,4816
8000248e:	ea 19 41 63 	orh	r9,0x4163
80002492:	f0 16 00 0c 	mcall	r6[48]
80002496:	14 98       	mov	r8,r10
80002498:	16 99       	mov	r9,r11
8000249a:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
8000249e:	ee f8 ff e4 	ld.w	r8,r7[-28]
800024a2:	10 9c       	mov	r12,r8
800024a4:	f0 16 00 1a 	mcall	r6[104]
800024a8:	30 08       	mov	r8,0
800024aa:	e0 69 12 d0 	mov	r9,4816
800024ae:	ea 19 41 63 	orh	r9,0x4163
800024b2:	f0 16 00 0c 	mcall	r6[48]
800024b6:	14 98       	mov	r8,r10
800024b8:	16 99       	mov	r9,r11
800024ba:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
800024be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800024c2:	10 9c       	mov	r12,r8
800024c4:	f0 16 00 1a 	mcall	r6[104]
800024c8:	30 08       	mov	r8,0
800024ca:	e0 69 40 00 	mov	r9,16384
800024ce:	ea 19 40 8f 	orh	r9,0x408f
800024d2:	f0 16 00 0c 	mcall	r6[48]
800024d6:	14 98       	mov	r8,r10
800024d8:	16 99       	mov	r9,r11
800024da:	10 9a       	mov	r10,r8
800024dc:	12 9b       	mov	r11,r9
800024de:	f0 16 00 08 	mcall	r6[32]
800024e2:	18 98       	mov	r8,r12
800024e4:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
800024e8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800024ec:	5c 78       	castu.h	r8
800024ee:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
800024f2:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
800024f6:	ec f8 00 00 	ld.w	r8,r6[0]
800024fa:	70 08       	ld.w	r8,r8[0x0]
800024fc:	ee cc 00 a0 	sub	r12,r7,160
80002500:	20 7d       	sub	sp,28
80002502:	1a 99       	mov	r9,sp
80002504:	12 9a       	mov	r10,r9
80002506:	f0 cb f2 54 	sub	r11,r8,-3500
8000250a:	f4 c8 00 00 	sub	r8,r10,0
8000250e:	f6 c9 00 00 	sub	r9,r11,0
80002512:	72 0e       	ld.w	lr,r9[0x0]
80002514:	91 0e       	st.w	r8[0x0],lr
80002516:	72 1e       	ld.w	lr,r9[0x4]
80002518:	91 1e       	st.w	r8[0x4],lr
8000251a:	72 2e       	ld.w	lr,r9[0x8]
8000251c:	91 2e       	st.w	r8[0x8],lr
8000251e:	72 39       	ld.w	r9,r9[0xc]
80002520:	91 39       	st.w	r8[0xc],r9
80002522:	f6 e8 00 10 	ld.d	r8,r11[16]
80002526:	f4 e9 00 10 	st.d	r10[16],r8
8000252a:	76 68       	ld.w	r8,r11[0x18]
8000252c:	95 68       	st.w	r10[0x18],r8
8000252e:	20 7d       	sub	sp,28
80002530:	1a 98       	mov	r8,sp
80002532:	10 9a       	mov	r10,r8
80002534:	ee cb 00 3c 	sub	r11,r7,60
80002538:	f4 c8 00 00 	sub	r8,r10,0
8000253c:	f6 c9 00 00 	sub	r9,r11,0
80002540:	72 0e       	ld.w	lr,r9[0x0]
80002542:	91 0e       	st.w	r8[0x0],lr
80002544:	72 1e       	ld.w	lr,r9[0x4]
80002546:	91 1e       	st.w	r8[0x4],lr
80002548:	72 2e       	ld.w	lr,r9[0x8]
8000254a:	91 2e       	st.w	r8[0x8],lr
8000254c:	72 39       	ld.w	r9,r9[0xc]
8000254e:	91 39       	st.w	r8[0xc],r9
80002550:	f6 e8 00 10 	ld.d	r8,r11[16]
80002554:	f4 e9 00 10 	st.d	r10[16],r8
80002558:	76 68       	ld.w	r8,r11[0x18]
8000255a:	95 68       	st.w	r10[0x18],r8
8000255c:	f0 16 00 7c 	mcall	r6[496]
80002560:	2f 2d       	sub	sp,-56
80002562:	ee cb 00 6c 	sub	r11,r7,108
80002566:	ee ca 00 a0 	sub	r10,r7,160
8000256a:	f6 c8 00 00 	sub	r8,r11,0
8000256e:	f4 c9 00 00 	sub	r9,r10,0
80002572:	72 0c       	ld.w	r12,r9[0x0]
80002574:	91 0c       	st.w	r8[0x0],r12
80002576:	72 1c       	ld.w	r12,r9[0x4]
80002578:	91 1c       	st.w	r8[0x4],r12
8000257a:	72 2c       	ld.w	r12,r9[0x8]
8000257c:	91 2c       	st.w	r8[0x8],r12
8000257e:	72 39       	ld.w	r9,r9[0xc]
80002580:	91 39       	st.w	r8[0xc],r9
80002582:	f6 c8 ff f0 	sub	r8,r11,-16
80002586:	f4 c9 ff f0 	sub	r9,r10,-16
8000258a:	72 0c       	ld.w	r12,r9[0x0]
8000258c:	91 0c       	st.w	r8[0x0],r12
8000258e:	72 1c       	ld.w	r12,r9[0x4]
80002590:	91 1c       	st.w	r8[0x4],r12
80002592:	72 2c       	ld.w	r12,r9[0x8]
80002594:	91 2c       	st.w	r8[0x8],r12
80002596:	72 39       	ld.w	r9,r9[0xc]
80002598:	91 39       	st.w	r8[0xc],r9
8000259a:	f6 c8 ff e0 	sub	r8,r11,-32
8000259e:	f4 c9 ff e0 	sub	r9,r10,-32
800025a2:	72 0a       	ld.w	r10,r9[0x0]
800025a4:	91 0a       	st.w	r8[0x0],r10
800025a6:	72 1a       	ld.w	r10,r9[0x4]
800025a8:	91 1a       	st.w	r8[0x4],r10
800025aa:	72 2a       	ld.w	r10,r9[0x8]
800025ac:	91 2a       	st.w	r8[0x8],r10
800025ae:	72 39       	ld.w	r9,r9[0xc]
800025b0:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
800025b2:	30 08       	mov	r8,0
800025b4:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
800025b8:	30 08       	mov	r8,0
800025ba:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025be:	c1 b8       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
800025c0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025c4:	11 d9       	ld.ub	r9,r8[0x5]
800025c6:	ec f8 00 00 	ld.w	r8,r6[0]
800025ca:	70 0a       	ld.w	r10,r8[0x0]
800025cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025d0:	a5 78       	lsl	r8,0x5
800025d2:	f4 08 00 08 	add	r8,r10,r8
800025d6:	f0 c8 ee fc 	sub	r8,r8,-4356
800025da:	11 88       	ld.ub	r8,r8[0x0]
800025dc:	f0 09 18 00 	cp.b	r9,r8
800025e0:	c0 51       	brne	800025ea <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
800025e2:	30 18       	mov	r8,1
800025e4:	ef 68 ff ff 	st.b	r7[-1],r8
800025e8:	c0 68       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
800025ea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025ee:	2f f8       	sub	r8,-1
800025f0:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025f8:	ec 18 00 01 	eorl	r8,0x1
800025fc:	5c 58       	castu.b	r8
800025fe:	c0 b0       	breq	80002614 <read_msg_from_neighbors+0x1cc>
80002600:	ec f8 00 00 	ld.w	r8,r6[0]
80002604:	70 08       	ld.w	r8,r8[0x0]
80002606:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000260a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000260e:	f0 09 18 00 	cp.b	r9,r8
80002612:	cd 73       	brcs	800025c0 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002614:	ec f8 00 00 	ld.w	r8,r6[0]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000261e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002622:	f0 09 18 00 	cp.b	r9,r8
80002626:	c2 93       	brcs	80002678 <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
80002628:	ec f8 00 00 	ld.w	r8,r6[0]
8000262c:	70 08       	ld.w	r8,r8[0x0]
8000262e:	f1 39 10 fc 	ld.ub	r9,r8[4348]
80002632:	30 e8       	mov	r8,14
80002634:	f0 09 18 00 	cp.b	r9,r8
80002638:	e0 8b 00 13 	brhi	8000265e <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
8000263c:	ec f8 00 00 	ld.w	r8,r6[0]
80002640:	70 08       	ld.w	r8,r8[0x0]
80002642:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80002646:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 08       	ld.w	r8,r8[0x0]
80002650:	f1 39 10 fc 	ld.ub	r9,r8[4348]
80002654:	2f f9       	sub	r9,-1
80002656:	5c 59       	castu.b	r9
80002658:	f1 69 10 fc 	st.b	r8[4348],r9
8000265c:	c1 28       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
8000265e:	fe cc 02 3e 	sub	r12,pc,574
80002662:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
80002666:	ec f8 00 00 	ld.w	r8,r6[0]
8000266a:	70 08       	ld.w	r8,r8[0x0]
8000266c:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80002670:	20 18       	sub	r8,1
80002672:	ef 68 ff fe 	st.b	r7[-2],r8
80002676:	c0 58       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
80002678:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000267c:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002680:	ec f8 00 00 	ld.w	r8,r6[0]
80002684:	70 0a       	ld.w	r10,r8[0x0]
80002686:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000268a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000268e:	11 d8       	ld.ub	r8,r8[0x5]
80002690:	a5 79       	lsl	r9,0x5
80002692:	f4 09 00 09 	add	r9,r10,r9
80002696:	f2 c9 ee fc 	sub	r9,r9,-4356
8000269a:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
8000269c:	30 08       	mov	r8,0
8000269e:	ef 68 ff fd 	st.b	r7[-3],r8
800026a2:	c1 b8       	rjmp	800026d8 <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
800026a4:	ec f8 00 00 	ld.w	r8,r6[0]
800026a8:	70 09       	ld.w	r9,r8[0x0]
800026aa:	ef 3c ff fe 	ld.ub	r12,r7[-2]
800026ae:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800026b2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026b6:	a3 68       	lsl	r8,0x2
800026b8:	ee 08 00 08 	add	r8,r7,r8
800026bc:	f0 fa ff 94 	ld.w	r10,r8[-108]
800026c0:	f8 08 15 03 	lsl	r8,r12,0x3
800026c4:	16 08       	add	r8,r11
800026c6:	f0 c8 fb be 	sub	r8,r8,-1090
800026ca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
800026ce:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026d2:	2f f8       	sub	r8,-1
800026d4:	ef 68 ff fd 	st.b	r7[-3],r8
800026d8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026dc:	30 28       	mov	r8,2
800026de:	f0 09 18 00 	cp.b	r9,r8
800026e2:	fe 98 ff e1 	brls	800026a4 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
800026e6:	ec f8 00 00 	ld.w	r8,r6[0]
800026ea:	70 05       	ld.w	r5,r8[0x0]
800026ec:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800026f0:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800026f4:	10 9c       	mov	r12,r8
800026f6:	f0 16 00 1a 	mcall	r6[104]
800026fa:	30 08       	mov	r8,0
800026fc:	fc 19 40 59 	movh	r9,0x4059
80002700:	f0 16 00 0c 	mcall	r6[48]
80002704:	14 98       	mov	r8,r10
80002706:	16 99       	mov	r9,r11
80002708:	10 9a       	mov	r10,r8
8000270a:	12 9b       	mov	r11,r9
8000270c:	f0 16 00 08 	mcall	r6[32]
80002710:	18 99       	mov	r9,r12
80002712:	e6 08 15 01 	lsl	r8,r3,0x1
80002716:	2f f8       	sub	r8,-1
80002718:	a5 68       	lsl	r8,0x4
8000271a:	ea 08 00 08 	add	r8,r5,r8
8000271e:	f0 c8 ee fc 	sub	r8,r8,-4356
80002722:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
80002724:	ec f8 00 00 	ld.w	r8,r6[0]
80002728:	70 05       	ld.w	r5,r8[0x0]
8000272a:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000272e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002732:	10 9c       	mov	r12,r8
80002734:	f0 16 00 1a 	mcall	r6[104]
80002738:	30 08       	mov	r8,0
8000273a:	fc 19 40 59 	movh	r9,0x4059
8000273e:	f0 16 00 0c 	mcall	r6[48]
80002742:	14 98       	mov	r8,r10
80002744:	16 99       	mov	r9,r11
80002746:	10 9a       	mov	r10,r8
80002748:	12 9b       	mov	r11,r9
8000274a:	f0 16 00 08 	mcall	r6[32]
8000274e:	18 99       	mov	r9,r12
80002750:	e6 08 15 05 	lsl	r8,r3,0x5
80002754:	ea 08 00 08 	add	r8,r5,r8
80002758:	f0 c8 ee e8 	sub	r8,r8,-4376
8000275c:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
8000275e:	ec f8 00 00 	ld.w	r8,r6[0]
80002762:	70 05       	ld.w	r5,r8[0x0]
80002764:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002768:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000276c:	10 9c       	mov	r12,r8
8000276e:	f0 16 00 1a 	mcall	r6[104]
80002772:	30 08       	mov	r8,0
80002774:	fc 19 40 59 	movh	r9,0x4059
80002778:	f0 16 00 0c 	mcall	r6[48]
8000277c:	14 98       	mov	r8,r10
8000277e:	16 99       	mov	r9,r11
80002780:	10 9a       	mov	r10,r8
80002782:	12 9b       	mov	r11,r9
80002784:	f0 16 00 08 	mcall	r6[32]
80002788:	18 99       	mov	r9,r12
8000278a:	e6 08 15 05 	lsl	r8,r3,0x5
8000278e:	ea 08 00 08 	add	r8,r5,r8
80002792:	f0 c8 ee e4 	sub	r8,r8,-4380
80002796:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
80002798:	ec f8 00 00 	ld.w	r8,r6[0]
8000279c:	70 09       	ld.w	r9,r8[0x0]
8000279e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800027a2:	f0 c8 ff 77 	sub	r8,r8,-137
800027a6:	a5 78       	lsl	r8,0x5
800027a8:	f2 08 00 08 	add	r8,r9,r8
800027ac:	fc 19 40 a0 	movh	r9,0x40a0
800027b0:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
800027b2:	2d 8d       	sub	sp,-160
800027b4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800027b8:	80 00       	ld.sh	r0,r0[0x0]
800027ba:	22 da       	sub	r10,45

800027bc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800027bc:	eb cd 40 c0 	pushm	r6-r7,lr
800027c0:	1a 97       	mov	r7,sp
800027c2:	20 3d       	sub	sp,12
800027c4:	49 06       	lddpc	r6,80002804 <mav_array_memcpy+0x48>
800027c6:	1e 26       	rsub	r6,pc
800027c8:	ef 4c ff fc 	st.w	r7[-4],r12
800027cc:	ef 4b ff f8 	st.w	r7[-8],r11
800027d0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800027d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d8:	58 08       	cp.w	r8,0
800027da:	c0 91       	brne	800027ec <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800027dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e0:	30 0b       	mov	r11,0
800027e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800027e6:	f0 16 00 31 	mcall	r6[196]
800027ea:	c0 98       	rjmp	800027fc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800027ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800027f0:	ee fb ff f8 	ld.w	r11,r7[-8]
800027f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800027f8:	f0 16 00 1b 	mcall	r6[108]
	}
}
800027fc:	2f dd       	sub	sp,-12
800027fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002802:	00 00       	add	r0,r0
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	26 4a       	sub	r10,100

80002808 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80002808:	eb cd 40 80 	pushm	r7,lr
8000280c:	1a 97       	mov	r7,sp
8000280e:	20 3d       	sub	sp,12
80002810:	ef 4c ff f8 	st.w	r7[-8],r12
80002814:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80002818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000281c:	70 09       	ld.w	r9,r8[0x0]
8000281e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002822:	70 08       	ld.w	r8,r8[0x0]
80002824:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80002828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000282c:	2f c8       	sub	r8,-4
8000282e:	70 0a       	ld.w	r10,r8[0x0]
80002830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002834:	2f c8       	sub	r8,-4
80002836:	70 08       	ld.w	r8,r8[0x0]
80002838:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000283c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002844:	2f 88       	sub	r8,-8
80002846:	70 0a       	ld.w	r10,r8[0x0]
80002848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000284c:	2f 88       	sub	r8,-8
8000284e:	70 08       	ld.w	r8,r8[0x0]
80002850:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80002854:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002858:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000285c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002860:	10 9c       	mov	r12,r8
80002862:	2f dd       	sub	sp,-12
80002864:	e3 cd 80 80 	ldm	sp++,r7,pc

80002868 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80002868:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 7d       	sub	sp,28
80002870:	4b d6       	lddpc	r6,80002964 <quat_multi+0xfc>
80002872:	1e 26       	rsub	r6,pc
80002874:	ee c8 ff ec 	sub	r8,r7,-20
80002878:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000287a:	70 2a       	ld.w	r10,r8[0x8]
8000287c:	70 79       	ld.w	r9,r8[0x1c]
8000287e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002882:	70 3b       	ld.w	r11,r8[0xc]
80002884:	70 69       	ld.w	r9,r8[0x18]
80002886:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000288a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000288e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002892:	70 3a       	ld.w	r10,r8[0xc]
80002894:	70 59       	ld.w	r9,r8[0x14]
80002896:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000289a:	70 1b       	ld.w	r11,r8[0x4]
8000289c:	70 79       	ld.w	r9,r8[0x1c]
8000289e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028a6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800028aa:	70 1a       	ld.w	r10,r8[0x4]
800028ac:	70 69       	ld.w	r9,r8[0x18]
800028ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028b2:	70 2b       	ld.w	r11,r8[0x8]
800028b4:	70 59       	ld.w	r9,r8[0x14]
800028b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028ba:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028be:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800028c2:	70 4a       	ld.w	r10,r8[0x10]
800028c4:	70 19       	ld.w	r9,r8[0x4]
800028c6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ca:	70 0b       	ld.w	r11,r8[0x0]
800028cc:	70 59       	ld.w	r9,r8[0x14]
800028ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028d2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800028da:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028de:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800028e2:	70 4a       	ld.w	r10,r8[0x10]
800028e4:	70 29       	ld.w	r9,r8[0x8]
800028e6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ea:	70 0b       	ld.w	r11,r8[0x0]
800028ec:	70 69       	ld.w	r9,r8[0x18]
800028ee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028f2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028fa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028fe:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002902:	70 4a       	ld.w	r10,r8[0x10]
80002904:	70 39       	ld.w	r9,r8[0xc]
80002906:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000290a:	70 0b       	ld.w	r11,r8[0x0]
8000290c:	70 79       	ld.w	r9,r8[0x1c]
8000290e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002912:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80002916:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000291a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000291e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80002922:	70 0a       	ld.w	r10,r8[0x0]
80002924:	70 49       	ld.w	r9,r8[0x10]
80002926:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000292a:	f0 c9 ff f0 	sub	r9,r8,-16
8000292e:	2f c9       	sub	r9,-4
80002930:	2f c8       	sub	r8,-4
80002932:	12 9b       	mov	r11,r9
80002934:	10 9c       	mov	r12,r8
80002936:	c6 9f       	rcall	80002808 <scalar_product>
80002938:	18 98       	mov	r8,r12
8000293a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000293e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80002942:	0a 98       	mov	r8,r5
80002944:	ee c9 00 1c 	sub	r9,r7,28
80002948:	20 08       	sub	r8,0
8000294a:	20 09       	sub	r9,0
8000294c:	72 0a       	ld.w	r10,r9[0x0]
8000294e:	91 0a       	st.w	r8[0x0],r10
80002950:	72 1a       	ld.w	r10,r9[0x4]
80002952:	91 1a       	st.w	r8[0x4],r10
80002954:	72 2a       	ld.w	r10,r9[0x8]
80002956:	91 2a       	st.w	r8[0x8],r10
80002958:	72 39       	ld.w	r9,r9[0xc]
8000295a:	91 39       	st.w	r8[0xc],r9
}
8000295c:	0a 9c       	mov	r12,r5
8000295e:	2f 9d       	sub	sp,-28
80002960:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	26 f6       	sub	r6,111

80002968 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80002968:	eb cd 40 80 	pushm	r7,lr
8000296c:	1a 97       	mov	r7,sp
8000296e:	20 5d       	sub	sp,20
80002970:	ee c9 ff f8 	sub	r9,r7,-8
80002974:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80002976:	72 08       	ld.w	r8,r9[0x0]
80002978:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000297c:	30 08       	mov	r8,0
8000297e:	ef 48 ff fc 	st.w	r7[-4],r8
80002982:	c1 58       	rjmp	800029ac <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002988:	ee fb ff fc 	ld.w	r11,r7[-4]
8000298c:	2f fb       	sub	r11,-1
8000298e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002992:	ee 1b 80 00 	eorh	r11,0x8000
80002996:	2f f8       	sub	r8,-1
80002998:	a3 68       	lsl	r8,0x2
8000299a:	ee 08 00 08 	add	r8,r7,r8
8000299e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800029a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029a6:	2f f8       	sub	r8,-1
800029a8:	ef 48 ff fc 	st.w	r7[-4],r8
800029ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b0:	58 28       	cp.w	r8,2
800029b2:	fe 9a ff e9 	brle	80002984 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800029b6:	14 98       	mov	r8,r10
800029b8:	ee c9 00 14 	sub	r9,r7,20
800029bc:	20 08       	sub	r8,0
800029be:	20 09       	sub	r9,0
800029c0:	72 0b       	ld.w	r11,r9[0x0]
800029c2:	91 0b       	st.w	r8[0x0],r11
800029c4:	72 1b       	ld.w	r11,r9[0x4]
800029c6:	91 1b       	st.w	r8[0x4],r11
800029c8:	72 2b       	ld.w	r11,r9[0x8]
800029ca:	91 2b       	st.w	r8[0x8],r11
800029cc:	72 39       	ld.w	r9,r9[0xc]
800029ce:	91 39       	st.w	r8[0xc],r9
}
800029d0:	14 9c       	mov	r12,r10
800029d2:	2f bd       	sub	sp,-20
800029d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029d8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800029d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 cd       	sub	sp,48
800029e0:	4b c6       	lddpc	r6,80002ad0 <quat_global_to_local+0xf8>
800029e2:	1e 26       	rsub	r6,pc
800029e4:	ee c5 ff ec 	sub	r5,r7,-20
800029e8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800029ea:	ee ca 00 10 	sub	r10,r7,16
800029ee:	20 4d       	sub	sp,16
800029f0:	1a 98       	mov	r8,sp
800029f2:	0a 99       	mov	r9,r5
800029f4:	20 08       	sub	r8,0
800029f6:	20 09       	sub	r9,0
800029f8:	72 0b       	ld.w	r11,r9[0x0]
800029fa:	91 0b       	st.w	r8[0x0],r11
800029fc:	72 1b       	ld.w	r11,r9[0x4]
800029fe:	91 1b       	st.w	r8[0x4],r11
80002a00:	72 2b       	ld.w	r11,r9[0x8]
80002a02:	91 2b       	st.w	r8[0x8],r11
80002a04:	72 39       	ld.w	r9,r9[0xc]
80002a06:	91 39       	st.w	r8[0xc],r9
80002a08:	14 9c       	mov	r12,r10
80002a0a:	ca ff       	rcall	80002968 <quat_inv>
80002a0c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a0e:	ee ca 00 20 	sub	r10,r7,32
80002a12:	20 4d       	sub	sp,16
80002a14:	1a 98       	mov	r8,sp
80002a16:	ea c9 ff f0 	sub	r9,r5,-16
80002a1a:	20 08       	sub	r8,0
80002a1c:	20 09       	sub	r9,0
80002a1e:	72 0b       	ld.w	r11,r9[0x0]
80002a20:	91 0b       	st.w	r8[0x0],r11
80002a22:	72 1b       	ld.w	r11,r9[0x4]
80002a24:	91 1b       	st.w	r8[0x4],r11
80002a26:	72 2b       	ld.w	r11,r9[0x8]
80002a28:	91 2b       	st.w	r8[0x8],r11
80002a2a:	72 39       	ld.w	r9,r9[0xc]
80002a2c:	91 39       	st.w	r8[0xc],r9
80002a2e:	20 4d       	sub	sp,16
80002a30:	1a 98       	mov	r8,sp
80002a32:	ee c9 00 10 	sub	r9,r7,16
80002a36:	20 08       	sub	r8,0
80002a38:	20 09       	sub	r9,0
80002a3a:	72 0b       	ld.w	r11,r9[0x0]
80002a3c:	91 0b       	st.w	r8[0x0],r11
80002a3e:	72 1b       	ld.w	r11,r9[0x4]
80002a40:	91 1b       	st.w	r8[0x4],r11
80002a42:	72 2b       	ld.w	r11,r9[0x8]
80002a44:	91 2b       	st.w	r8[0x8],r11
80002a46:	72 39       	ld.w	r9,r9[0xc]
80002a48:	91 39       	st.w	r8[0xc],r9
80002a4a:	14 9c       	mov	r12,r10
80002a4c:	c0 ef       	rcall	80002868 <quat_multi>
80002a4e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002a50:	ee ca 00 30 	sub	r10,r7,48
80002a54:	20 4d       	sub	sp,16
80002a56:	1a 98       	mov	r8,sp
80002a58:	0a 99       	mov	r9,r5
80002a5a:	20 08       	sub	r8,0
80002a5c:	20 09       	sub	r9,0
80002a5e:	72 0b       	ld.w	r11,r9[0x0]
80002a60:	91 0b       	st.w	r8[0x0],r11
80002a62:	72 1b       	ld.w	r11,r9[0x4]
80002a64:	91 1b       	st.w	r8[0x4],r11
80002a66:	72 2b       	ld.w	r11,r9[0x8]
80002a68:	91 2b       	st.w	r8[0x8],r11
80002a6a:	72 39       	ld.w	r9,r9[0xc]
80002a6c:	91 39       	st.w	r8[0xc],r9
80002a6e:	20 4d       	sub	sp,16
80002a70:	1a 98       	mov	r8,sp
80002a72:	ee c9 00 20 	sub	r9,r7,32
80002a76:	20 08       	sub	r8,0
80002a78:	20 09       	sub	r9,0
80002a7a:	72 0b       	ld.w	r11,r9[0x0]
80002a7c:	91 0b       	st.w	r8[0x0],r11
80002a7e:	72 1b       	ld.w	r11,r9[0x4]
80002a80:	91 1b       	st.w	r8[0x4],r11
80002a82:	72 2b       	ld.w	r11,r9[0x8]
80002a84:	91 2b       	st.w	r8[0x8],r11
80002a86:	72 39       	ld.w	r9,r9[0xc]
80002a88:	91 39       	st.w	r8[0xc],r9
80002a8a:	14 9c       	mov	r12,r10
80002a8c:	ce ee       	rcall	80002868 <quat_multi>
80002a8e:	2f 8d       	sub	sp,-32
80002a90:	ee c8 00 20 	sub	r8,r7,32
80002a94:	ee c9 00 30 	sub	r9,r7,48
80002a98:	20 08       	sub	r8,0
80002a9a:	20 09       	sub	r9,0
80002a9c:	72 0a       	ld.w	r10,r9[0x0]
80002a9e:	91 0a       	st.w	r8[0x0],r10
80002aa0:	72 1a       	ld.w	r10,r9[0x4]
80002aa2:	91 1a       	st.w	r8[0x4],r10
80002aa4:	72 2a       	ld.w	r10,r9[0x8]
80002aa6:	91 2a       	st.w	r8[0x8],r10
80002aa8:	72 39       	ld.w	r9,r9[0xc]
80002aaa:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002aac:	06 98       	mov	r8,r3
80002aae:	ee c9 00 20 	sub	r9,r7,32
80002ab2:	20 08       	sub	r8,0
80002ab4:	20 09       	sub	r9,0
80002ab6:	72 0a       	ld.w	r10,r9[0x0]
80002ab8:	91 0a       	st.w	r8[0x0],r10
80002aba:	72 1a       	ld.w	r10,r9[0x4]
80002abc:	91 1a       	st.w	r8[0x4],r10
80002abe:	72 2a       	ld.w	r10,r9[0x8]
80002ac0:	91 2a       	st.w	r8[0x8],r10
80002ac2:	72 39       	ld.w	r9,r9[0xc]
80002ac4:	91 39       	st.w	r8[0xc],r9
}
80002ac6:	06 9c       	mov	r12,r3
80002ac8:	2f 4d       	sub	sp,-48
80002aca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002ace:	00 00       	add	r0,r0
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	28 66       	sub	r6,-122

80002ad4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ad8:	1a 97       	mov	r7,sp
80002ada:	20 2d       	sub	sp,8
80002adc:	4b 26       	lddpc	r6,80002ba4 <fast_sqrt+0xd0>
80002ade:	1e 26       	rsub	r6,pc
80002ae0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002ae4:	30 18       	mov	r8,1
80002ae6:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aea:	30 09       	mov	r9,0
80002aec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002af0:	e0 8c 00 03 	brvs	80002af6 <fast_sqrt+0x22>
80002af4:	c0 25       	brlt	80002af8 <fast_sqrt+0x24>
80002af6:	30 08       	mov	r8,0
80002af8:	5c 58       	castu.b	r8
80002afa:	c0 30       	breq	80002b00 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002afc:	30 08       	mov	r8,0
80002afe:	c4 f8       	rjmp	80002b9c <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b00:	fc 18 3f 80 	movh	r8,0x3f80
80002b04:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b08:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b10:	f0 16 00 0a 	mcall	r6[40]
80002b14:	18 98       	mov	r8,r12
80002b16:	10 99       	mov	r9,r8
80002b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b1c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b20:	fc 18 3f 00 	movh	r8,0x3f00
80002b24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b28:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b2c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b30:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b34:	f0 16 00 0a 	mcall	r6[40]
80002b38:	18 98       	mov	r8,r12
80002b3a:	10 99       	mov	r9,r8
80002b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b40:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b44:	fc 18 3f 00 	movh	r8,0x3f00
80002b48:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b4c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b50:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b54:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b58:	f0 16 00 0a 	mcall	r6[40]
80002b5c:	18 98       	mov	r8,r12
80002b5e:	10 99       	mov	r9,r8
80002b60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b64:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b68:	fc 18 3f 00 	movh	r8,0x3f00
80002b6c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b70:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b74:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b78:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b7c:	f0 16 00 0a 	mcall	r6[40]
80002b80:	18 98       	mov	r8,r12
80002b82:	10 99       	mov	r9,r8
80002b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b88:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b8c:	fc 18 3f 00 	movh	r8,0x3f00
80002b90:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b94:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002b9c:	10 9c       	mov	r12,r8
80002b9e:	2f ed       	sub	sp,-8
80002ba0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	29 62       	sub	r2,-106

80002ba8 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bac:	1a 97       	mov	r7,sp
80002bae:	20 2d       	sub	sp,8
80002bb0:	48 96       	lddpc	r6,80002bd4 <vector_norm_sqr+0x2c>
80002bb2:	1e 26       	rsub	r6,pc
80002bb4:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002bb8:	ee fb ff f8 	ld.w	r11,r7[-8]
80002bbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc0:	c2 4e       	rcall	80002808 <scalar_product>
80002bc2:	18 98       	mov	r8,r12
80002bc4:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002bcc:	10 9c       	mov	r12,r8
80002bce:	2f ed       	sub	sp,-8
80002bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	2a 36       	sub	r6,-93

80002bd8 <vector_norm>:

float static inline vector_norm(float u[])
{
80002bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bdc:	1a 97       	mov	r7,sp
80002bde:	20 1d       	sub	sp,4
80002be0:	48 86       	lddpc	r6,80002c00 <vector_norm+0x28>
80002be2:	1e 26       	rsub	r6,pc
80002be4:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002be8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bec:	cd ef       	rcall	80002ba8 <vector_norm_sqr>
80002bee:	18 98       	mov	r8,r12
80002bf0:	10 9c       	mov	r12,r8
80002bf2:	c7 1f       	rcall	80002ad4 <fast_sqrt>
80002bf4:	18 98       	mov	r8,r12
}
80002bf6:	10 9c       	mov	r12,r8
80002bf8:	2f fd       	sub	sp,-4
80002bfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bfe:	00 00       	add	r0,r0
80002c00:	80 00       	ld.sh	r0,r0[0x0]
80002c02:	2a 66       	sub	r6,-90

80002c04 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c04:	eb cd 40 80 	pushm	r7,lr
80002c08:	1a 97       	mov	r7,sp
80002c0a:	20 2d       	sub	sp,8
80002c0c:	ef 4c ff fc 	st.w	r7[-4],r12
80002c10:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c14:	30 18       	mov	r8,1
80002c16:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c1e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c22:	e0 8c 00 04 	brvs	80002c2a <f_min+0x26>
80002c26:	e0 8a 00 03 	brle	80002c2c <f_min+0x28>
80002c2a:	30 08       	mov	r8,0
80002c2c:	5c 58       	castu.b	r8
80002c2e:	c0 40       	breq	80002c36 <f_min+0x32>
	{
		return a;
80002c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c34:	c0 38       	rjmp	80002c3a <f_min+0x36>
	}else{
		return b;
80002c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c3a:	10 9c       	mov	r12,r8
80002c3c:	2f ed       	sub	sp,-8
80002c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c42 <f_max>:

static inline float f_max(const float a, const float b){
80002c42:	eb cd 40 80 	pushm	r7,lr
80002c46:	1a 97       	mov	r7,sp
80002c48:	20 2d       	sub	sp,8
80002c4a:	ef 4c ff fc 	st.w	r7[-4],r12
80002c4e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002c52:	30 18       	mov	r8,1
80002c54:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c5c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c60:	e0 8c 00 03 	brvs	80002c66 <f_max+0x24>
80002c64:	c0 24       	brge	80002c68 <f_max+0x26>
80002c66:	30 08       	mov	r8,0
80002c68:	5c 58       	castu.b	r8
80002c6a:	c0 40       	breq	80002c72 <f_max+0x30>
	{
		return a;
80002c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c70:	c0 38       	rjmp	80002c76 <f_max+0x34>
	}else{
		return b;
80002c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c76:	10 9c       	mov	r12,r8
80002c78:	2f ed       	sub	sp,-8
80002c7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c7e <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002c7e:	eb cd 40 c0 	pushm	r6-r7,lr
80002c82:	1a 97       	mov	r7,sp
80002c84:	49 26       	lddpc	r6,80002ccc <init_orca+0x4e>
80002c86:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002c88:	f0 16 00 33 	mcall	r6[204]
80002c8c:	18 99       	mov	r9,r12
80002c8e:	ec f8 00 00 	ld.w	r8,r6[0]
80002c92:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002c94:	ec f8 00 00 	ld.w	r8,r6[0]
80002c98:	70 08       	ld.w	r8,r8[0x0]
80002c9a:	fc 19 40 a0 	movh	r9,0x40a0
80002c9e:	f1 49 11 00 	st.w	r8[4352],r9
		
	timeHorizon = 8.0;
80002ca2:	ec f8 04 38 	ld.w	r8,r6[1080]
80002ca6:	fc 19 41 00 	movh	r9,0x4100
80002caa:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002cac:	ec f8 04 38 	ld.w	r8,r6[1080]
80002cb0:	70 08       	ld.w	r8,r8[0x0]
80002cb2:	10 9b       	mov	r11,r8
80002cb4:	fc 1c 3f 80 	movh	r12,0x3f80
80002cb8:	f0 16 00 0a 	mcall	r6[40]
80002cbc:	18 98       	mov	r8,r12
80002cbe:	10 99       	mov	r9,r8
80002cc0:	ec f8 02 bc 	ld.w	r8,r6[700]
80002cc4:	91 09       	st.w	r8[0x0],r9
}
80002cc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002cca:	00 00       	add	r0,r0
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2b 0a       	sub	r10,-80
80002cd0:	43 6f       	lddsp	pc,sp[0xd8]
80002cd2:	6c 6c       	ld.w	r12,r6[0x18]
80002cd4:	69 73       	ld.w	r3,r4[0x5c]
80002cd6:	69 6f       	ld.w	pc,r4[0x58]
80002cd8:	6e 21       	ld.w	r1,r7[0x8]
80002cda:	20 00       	sub	r0,0
80002cdc:	44 69       	lddsp	r9,sp[0x118]
80002cde:	73 74       	ld.w	r4,r9[0x5c]
80002ce0:	61 6e       	ld.w	lr,r0[0x58]
80002ce2:	63 65       	ld.w	r5,r1[0x58]
80002ce4:	20 77       	sub	r7,7
80002ce6:	69 74       	ld.w	r4,r4[0x5c]
80002ce8:	68 20       	ld.w	r0,r4[0x8]
80002cea:	6e 65       	ld.w	r5,r7[0x18]
80002cec:	69 67       	ld.w	r7,r4[0x58]
80002cee:	68 62       	ld.w	r2,r4[0x18]
80002cf0:	6f 72       	ld.w	r2,r7[0x5c]
80002cf2:	20 00       	sub	r0,0
80002cf4:	28 78       	sub	r8,-121
80002cf6:	31 30       	mov	r0,19
80002cf8:	30 29       	mov	r9,2
80002cfa:	3a 00       	mov	r0,-96
80002cfc:	0a 00       	add	r0,r5
80002cfe:	00 00       	add	r0,r0
80002d00:	4f 72       	lddpc	r2,80002edc <computeNewVelocity+0x1b8>
80002d02:	63 61       	ld.w	r1,r1[0x58]
80002d04:	20 64       	sub	r4,6
80002d06:	69 66       	ld.w	r6,r4[0x58]
80002d08:	66 76       	ld.w	r6,r3[0x1c]
80002d0a:	65 6c       	ld.w	r12,r2[0x58]
80002d0c:	3a 00       	mov	r0,-96
80002d0e:	00 00       	add	r0,r0
80002d10:	2c 20       	sub	r0,-62
80002d12:	4f 70       	lddpc	r0,80002eec <computeNewVelocity+0x1c8>
80002d14:	74 69       	ld.w	r9,r10[0x18]
80002d16:	6d 61       	ld.w	r1,r6[0x58]
80002d18:	6c 3a       	ld.w	r10,r6[0xc]
80002d1a:	00 00       	add	r0,r0
80002d1c:	2c 20       	sub	r0,-62
80002d1e:	4e 65       	lddpc	r5,80002eb4 <computeNewVelocity+0x190>
80002d20:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002d24 <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002d24:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002d28:	1a 97       	mov	r7,sp
80002d2a:	fa cd 02 34 	sub	sp,sp,564
80002d2e:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002d32:	1e 26       	rsub	r6,pc
80002d34:	ef 4c fd e0 	st.w	r7[-544],r12
80002d38:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d3c:	30 08       	mov	r8,0
80002d3e:	ef 68 ff cf 	st.b	r7[-49],r8
80002d42:	c1 68       	rjmp	80002d6e <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002d44:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d48:	a3 68       	lsl	r8,0x2
80002d4a:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002d4e:	f2 08 00 08 	add	r8,r9,r8
80002d52:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002d56:	a3 69       	lsl	r9,0x2
80002d58:	ee fa fd e0 	ld.w	r10,r7[-544]
80002d5c:	f4 09 00 09 	add	r9,r10,r9
80002d60:	72 09       	ld.w	r9,r9[0x0]
80002d62:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d64:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002d68:	2f f8       	sub	r8,-1
80002d6a:	ef 68 ff cf 	st.b	r7[-49],r8
80002d6e:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002d72:	30 28       	mov	r8,2
80002d74:	f0 09 18 00 	cp.b	r9,r8
80002d78:	fe 9a ff e6 	brle	80002d44 <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002d7c:	30 08       	mov	r8,0
80002d7e:	ef 68 ff ce 	st.b	r7[-50],r8
80002d82:	e0 8f 04 22 	bral	800035c6 <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002d86:	30 08       	mov	r8,0
80002d88:	ef 68 ff cf 	st.b	r7[-49],r8
80002d8c:	c4 68       	rjmp	80002e18 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002d8e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d92:	ec f9 00 00 	ld.w	r9,r6[0]
80002d96:	72 09       	ld.w	r9,r9[0x0]
80002d98:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002d9c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002da0:	a3 7b       	lsl	r11,0x3
80002da2:	f6 0a 00 0a 	add	r10,r11,r10
80002da6:	f4 ca fb be 	sub	r10,r10,-1090
80002daa:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002dae:	ec f9 00 00 	ld.w	r9,r6[0]
80002db2:	72 09       	ld.w	r9,r9[0x0]
80002db4:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002db8:	f6 cb fc 99 	sub	r11,r11,-871
80002dbc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002dc0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002dc4:	a3 68       	lsl	r8,0x2
80002dc6:	ee 08 00 08 	add	r8,r7,r8
80002dca:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002dce:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002dd2:	ec f9 00 00 	ld.w	r9,r6[0]
80002dd6:	72 09       	ld.w	r9,r9[0x0]
80002dd8:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ddc:	f4 ca fc a3 	sub	r10,r10,-861
80002de0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002de4:	ec f9 00 00 	ld.w	r9,r6[0]
80002de8:	72 09       	ld.w	r9,r9[0x0]
80002dea:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002dee:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002df2:	a3 7c       	lsl	r12,0x3
80002df4:	f8 0b 00 0b 	add	r11,r12,r11
80002df8:	f6 cb fb bb 	sub	r11,r11,-1093
80002dfc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002e00:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002e04:	a3 68       	lsl	r8,0x2
80002e06:	ee 08 00 08 	add	r8,r7,r8
80002e0a:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e0e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e12:	2f f8       	sub	r8,-1
80002e14:	ef 68 ff cf 	st.b	r7[-49],r8
80002e18:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e1c:	30 28       	mov	r8,2
80002e1e:	f0 09 18 00 	cp.b	r9,r8
80002e22:	fe 9a ff b6 	brle	80002d8e <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002e26:	30 08       	mov	r8,0
80002e28:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002e2c:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002e30:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002e34:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002e38:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002e3c:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002e40:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002e44:	ec f8 00 00 	ld.w	r8,r6[0]
80002e48:	70 0b       	ld.w	r11,r8[0x0]
80002e4a:	ee ca 01 bc 	sub	r10,r7,444
80002e4e:	20 4d       	sub	sp,16
80002e50:	1a 98       	mov	r8,sp
80002e52:	ee c9 01 ac 	sub	r9,r7,428
80002e56:	20 08       	sub	r8,0
80002e58:	20 09       	sub	r9,0
80002e5a:	72 0c       	ld.w	r12,r9[0x0]
80002e5c:	91 0c       	st.w	r8[0x0],r12
80002e5e:	72 1c       	ld.w	r12,r9[0x4]
80002e60:	91 1c       	st.w	r8[0x4],r12
80002e62:	72 2c       	ld.w	r12,r9[0x8]
80002e64:	91 2c       	st.w	r8[0x8],r12
80002e66:	72 39       	ld.w	r9,r9[0xc]
80002e68:	91 39       	st.w	r8[0xc],r9
80002e6a:	20 4d       	sub	sp,16
80002e6c:	1a 98       	mov	r8,sp
80002e6e:	16 99       	mov	r9,r11
80002e70:	20 08       	sub	r8,0
80002e72:	20 09       	sub	r9,0
80002e74:	72 0b       	ld.w	r11,r9[0x0]
80002e76:	91 0b       	st.w	r8[0x0],r11
80002e78:	72 1b       	ld.w	r11,r9[0x4]
80002e7a:	91 1b       	st.w	r8[0x4],r11
80002e7c:	72 2b       	ld.w	r11,r9[0x8]
80002e7e:	91 2b       	st.w	r8[0x8],r11
80002e80:	72 39       	ld.w	r9,r9[0xc]
80002e82:	91 39       	st.w	r8[0xc],r9
80002e84:	14 9c       	mov	r12,r10
80002e86:	fe b0 fd a9 	rcall	800029d8 <quat_global_to_local>
80002e8a:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002e8c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002e90:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002e94:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002e98:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002e9c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002ea0:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002ea4:	30 08       	mov	r8,0
80002ea6:	ef 68 ff cf 	st.b	r7[-49],r8
80002eaa:	c1 58       	rjmp	80002ed4 <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002eac:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002eb0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eb4:	a3 68       	lsl	r8,0x2
80002eb6:	ee 08 00 08 	add	r8,r7,r8
80002eba:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002ebe:	f4 08 15 02 	lsl	r8,r10,0x2
80002ec2:	ee 08 00 08 	add	r8,r7,r8
80002ec6:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002eca:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002ece:	2f f8       	sub	r8,-1
80002ed0:	ef 68 ff cf 	st.b	r7[-49],r8
80002ed4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002ed8:	30 28       	mov	r8,2
80002eda:	f0 09 18 00 	cp.b	r9,r8
80002ede:	fe 9a ff e7 	brle	80002eac <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002ee2:	30 08       	mov	r8,0
80002ee4:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ee8:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002eec:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ef0:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ef4:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80002ef8:	ee f8 fe 40 	ld.w	r8,r7[-448]
80002efc:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f00:	ec f8 00 00 	ld.w	r8,r6[0]
80002f04:	70 0b       	ld.w	r11,r8[0x0]
80002f06:	ee ca 02 34 	sub	r10,r7,564
80002f0a:	20 4d       	sub	sp,16
80002f0c:	1a 98       	mov	r8,sp
80002f0e:	ee c9 01 ac 	sub	r9,r7,428
80002f12:	20 08       	sub	r8,0
80002f14:	20 09       	sub	r9,0
80002f16:	72 0c       	ld.w	r12,r9[0x0]
80002f18:	91 0c       	st.w	r8[0x0],r12
80002f1a:	72 1c       	ld.w	r12,r9[0x4]
80002f1c:	91 1c       	st.w	r8[0x4],r12
80002f1e:	72 2c       	ld.w	r12,r9[0x8]
80002f20:	91 2c       	st.w	r8[0x8],r12
80002f22:	72 39       	ld.w	r9,r9[0xc]
80002f24:	91 39       	st.w	r8[0xc],r9
80002f26:	20 4d       	sub	sp,16
80002f28:	1a 98       	mov	r8,sp
80002f2a:	16 99       	mov	r9,r11
80002f2c:	20 08       	sub	r8,0
80002f2e:	20 09       	sub	r9,0
80002f30:	72 0b       	ld.w	r11,r9[0x0]
80002f32:	91 0b       	st.w	r8[0x0],r11
80002f34:	72 1b       	ld.w	r11,r9[0x4]
80002f36:	91 1b       	st.w	r8[0x4],r11
80002f38:	72 2b       	ld.w	r11,r9[0x8]
80002f3a:	91 2b       	st.w	r8[0x8],r11
80002f3c:	72 39       	ld.w	r9,r9[0xc]
80002f3e:	91 39       	st.w	r8[0xc],r9
80002f40:	14 9c       	mov	r12,r10
80002f42:	fe b0 fd 4b 	rcall	800029d8 <quat_global_to_local>
80002f46:	2f 8d       	sub	sp,-32
80002f48:	ee c8 01 bc 	sub	r8,r7,444
80002f4c:	ee c9 02 34 	sub	r9,r7,564
80002f50:	20 08       	sub	r8,0
80002f52:	20 09       	sub	r9,0
80002f54:	72 0a       	ld.w	r10,r9[0x0]
80002f56:	91 0a       	st.w	r8[0x0],r10
80002f58:	72 1a       	ld.w	r10,r9[0x4]
80002f5a:	91 1a       	st.w	r8[0x4],r10
80002f5c:	72 2a       	ld.w	r10,r9[0x8]
80002f5e:	91 2a       	st.w	r8[0x8],r10
80002f60:	72 39       	ld.w	r9,r9[0xc]
80002f62:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f64:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f68:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f6c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002f70:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002f74:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002f78:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002f7c:	30 08       	mov	r8,0
80002f7e:	ef 68 ff cf 	st.b	r7[-49],r8
80002f82:	c1 58       	rjmp	80002fac <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
80002f84:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002f88:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002f8c:	a3 68       	lsl	r8,0x2
80002f8e:	ee 08 00 08 	add	r8,r7,r8
80002f92:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002f96:	f4 08 15 02 	lsl	r8,r10,0x2
80002f9a:	ee 08 00 08 	add	r8,r7,r8
80002f9e:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fa2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fa6:	2f f8       	sub	r8,-1
80002fa8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fac:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fb0:	30 28       	mov	r8,2
80002fb2:	f0 09 18 00 	cp.b	r9,r8
80002fb6:	fe 9a ff e7 	brle	80002f84 <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
80002fba:	ee c8 01 c8 	sub	r8,r7,456
80002fbe:	10 9c       	mov	r12,r8
80002fc0:	fe b0 fd f4 	rcall	80002ba8 <vector_norm_sqr>
80002fc4:	18 98       	mov	r8,r12
80002fc6:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
80002fca:	ec f8 00 00 	ld.w	r8,r6[0]
80002fce:	70 08       	ld.w	r8,r8[0x0]
80002fd0:	f0 f9 11 00 	ld.w	r9,r8[4352]
80002fd4:	ec f8 00 00 	ld.w	r8,r6[0]
80002fd8:	70 0a       	ld.w	r10,r8[0x0]
80002fda:	ef 28 ff ce 	ld.sb	r8,r7[-50]
80002fde:	f0 c8 ff 77 	sub	r8,r8,-137
80002fe2:	a5 78       	lsl	r8,0x5
80002fe4:	f4 08 00 08 	add	r8,r10,r8
80002fe8:	70 08       	ld.w	r8,r8[0x0]
80002fea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002fee:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
80002ff2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ff6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ffa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002ffe:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
80003002:	30 18       	mov	r8,1
80003004:	ee fa ff d4 	ld.w	r10,r7[-44]
80003008:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000300c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003010:	e0 8c 00 04 	brvs	80003018 <computeNewVelocity+0x2f4>
80003014:	e0 89 00 03 	brgt	8000301a <computeNewVelocity+0x2f6>
80003018:	30 08       	mov	r8,0
8000301a:	5c 58       	castu.b	r8
8000301c:	e0 80 01 c7 	breq	800033aa <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003020:	30 08       	mov	r8,0
80003022:	ef 68 ff cf 	st.b	r7[-49],r8
80003026:	c2 38       	rjmp	8000306c <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003028:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000302c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003030:	a3 68       	lsl	r8,0x2
80003032:	ee 08 00 08 	add	r8,r7,r8
80003036:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
8000303a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000303e:	a3 68       	lsl	r8,0x2
80003040:	ee 08 00 08 	add	r8,r7,r8
80003044:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003048:	ec f8 02 bc 	ld.w	r8,r6[700]
8000304c:	70 08       	ld.w	r8,r8[0x0]
8000304e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003052:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003056:	f4 08 15 02 	lsl	r8,r10,0x2
8000305a:	ee 08 00 08 	add	r8,r7,r8
8000305e:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
80003062:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003066:	2f f8       	sub	r8,-1
80003068:	ef 68 ff cf 	st.b	r7[-49],r8
8000306c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003070:	30 28       	mov	r8,2
80003072:	f0 09 18 00 	cp.b	r9,r8
80003076:	fe 9a ff d9 	brle	80003028 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
8000307a:	ee c8 01 e0 	sub	r8,r7,480
8000307e:	10 9c       	mov	r12,r8
80003080:	fe b0 fd 94 	rcall	80002ba8 <vector_norm_sqr>
80003084:	18 98       	mov	r8,r12
80003086:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
8000308a:	ee c9 01 c8 	sub	r9,r7,456
8000308e:	ee c8 01 e0 	sub	r8,r7,480
80003092:	12 9b       	mov	r11,r9
80003094:	10 9c       	mov	r12,r8
80003096:	fe b0 fb b9 	rcall	80002808 <scalar_product>
8000309a:	18 98       	mov	r8,r12
8000309c:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800030a0:	30 18       	mov	r8,1
800030a2:	ee fa ff dc 	ld.w	r10,r7[-36]
800030a6:	30 09       	mov	r9,0
800030a8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030ac:	e0 8c 00 03 	brvs	800030b2 <computeNewVelocity+0x38e>
800030b0:	c0 25       	brlt	800030b4 <computeNewVelocity+0x390>
800030b2:	30 08       	mov	r8,0
800030b4:	5c 58       	castu.b	r8
800030b6:	c7 70       	breq	800031a4 <computeNewVelocity+0x480>
800030b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800030bc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800030c0:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800030c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800030c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800030cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800030d0:	30 18       	mov	r8,1
800030d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030d6:	e0 8c 00 04 	brvs	800030de <computeNewVelocity+0x3ba>
800030da:	e0 89 00 03 	brgt	800030e0 <computeNewVelocity+0x3bc>
800030de:	30 08       	mov	r8,0
800030e0:	5c 58       	castu.b	r8
800030e2:	c6 10       	breq	800031a4 <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800030e4:	ee fc ff e4 	ld.w	r12,r7[-28]
800030e8:	fe b0 fc f6 	rcall	80002ad4 <fast_sqrt>
800030ec:	18 98       	mov	r8,r12
800030ee:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800030f2:	30 08       	mov	r8,0
800030f4:	ef 68 ff cf 	st.b	r7[-49],r8
800030f8:	c4 d8       	rjmp	80003192 <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
800030fa:	ef 25 ff cf 	ld.sb	r5,r7[-49]
800030fe:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003102:	a3 68       	lsl	r8,0x2
80003104:	ee 08 00 08 	add	r8,r7,r8
80003108:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000310c:	ee fb ff e0 	ld.w	r11,r7[-32]
80003110:	10 9c       	mov	r12,r8
80003112:	f0 16 00 0a 	mcall	r6[40]
80003116:	18 98       	mov	r8,r12
80003118:	10 99       	mov	r9,r8
8000311a:	ea 08 15 02 	lsl	r8,r5,0x2
8000311e:	ee 08 00 08 	add	r8,r7,r8
80003122:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003126:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000312a:	ef 2b ff cf 	ld.sb	r11,r7[-49]
8000312e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003132:	a3 68       	lsl	r8,0x2
80003134:	ee 08 00 08 	add	r8,r7,r8
80003138:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000313c:	12 98       	mov	r8,r9
8000313e:	a1 78       	lsl	r8,0x1
80003140:	12 08       	add	r8,r9
80003142:	a1 78       	lsl	r8,0x1
80003144:	16 08       	add	r8,r11
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003150:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003154:	ec f8 02 bc 	ld.w	r8,r6[700]
80003158:	70 09       	ld.w	r9,r8[0x0]
8000315a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000315e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003166:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000316a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000316e:	a3 68       	lsl	r8,0x2
80003170:	ee 08 00 08 	add	r8,r7,r8
80003174:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003178:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000317c:	f4 08 15 02 	lsl	r8,r10,0x2
80003180:	ee 08 00 08 	add	r8,r7,r8
80003184:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003188:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000318c:	2f f8       	sub	r8,-1
8000318e:	ef 68 ff cf 	st.b	r7[-49],r8
80003192:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003196:	30 28       	mov	r8,2
80003198:	f0 09 18 00 	cp.b	r9,r8
8000319c:	fe 9a ff af 	brle	800030fa <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a0:	e0 8f 01 c5 	bral	8000352a <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800031a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031a8:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800031ac:	ee c9 01 d4 	sub	r9,r7,468
800031b0:	ee c8 01 c8 	sub	r8,r7,456
800031b4:	12 9b       	mov	r11,r9
800031b6:	10 9c       	mov	r12,r8
800031b8:	fe b0 fb 28 	rcall	80002808 <scalar_product>
800031bc:	18 98       	mov	r8,r12
800031be:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800031c2:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800031c6:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031ca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ce:	ee fa fe 40 	ld.w	r10,r7[-448]
800031d2:	ee f8 fe 30 	ld.w	r8,r7[-464]
800031d6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031de:	ef 48 fd e4 	st.w	r7[-540],r8
800031e2:	ee f9 fe 40 	ld.w	r9,r7[-448]
800031e6:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800031ea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ee:	ee fa fe 38 	ld.w	r10,r7[-456]
800031f2:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031fa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031fe:	ef 48 fd e8 	st.w	r7[-536],r8
80003202:	ee f9 fe 38 	ld.w	r9,r7[-456]
80003206:	ee f8 fe 30 	ld.w	r8,r7[-464]
8000320a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000320e:	ee fa fe 3c 	ld.w	r10,r7[-452]
80003212:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80003216:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000321a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000321e:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
80003222:	ee c8 01 d4 	sub	r8,r7,468
80003226:	10 9c       	mov	r12,r8
80003228:	fe b0 fc c0 	rcall	80002ba8 <vector_norm_sqr>
8000322c:	18 95       	mov	r5,r12
8000322e:	ee c8 02 1c 	sub	r8,r7,540
80003232:	10 9c       	mov	r12,r8
80003234:	fe b0 fc ba 	rcall	80002ba8 <vector_norm_sqr>
80003238:	18 98       	mov	r8,r12
8000323a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000323e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003242:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003246:	12 9b       	mov	r11,r9
80003248:	10 9c       	mov	r12,r8
8000324a:	f0 16 00 0a 	mcall	r6[40]
8000324e:	18 98       	mov	r8,r12
80003250:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
80003254:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003258:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000325c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003260:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003264:	ee fa ff ec 	ld.w	r10,r7[-20]
80003268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000326c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003270:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003274:	10 9c       	mov	r12,r8
80003276:	fe b0 fc 2f 	rcall	80002ad4 <fast_sqrt>
8000327a:	18 99       	mov	r9,r12
8000327c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003280:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80003284:	ee fb ff ec 	ld.w	r11,r7[-20]
80003288:	10 9c       	mov	r12,r8
8000328a:	f0 16 00 0a 	mcall	r6[40]
8000328e:	18 98       	mov	r8,r12
80003290:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
80003294:	30 08       	mov	r8,0
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	c2 28       	rjmp	800032de <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
8000329c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800032a0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032a4:	a3 68       	lsl	r8,0x2
800032a6:	ee 08 00 08 	add	r8,r7,r8
800032aa:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800032ae:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032b2:	a3 68       	lsl	r8,0x2
800032b4:	ee 08 00 08 	add	r8,r7,r8
800032b8:	f0 fb fe 38 	ld.w	r11,r8[-456]
800032bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800032c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800032c8:	f4 08 15 02 	lsl	r8,r10,0x2
800032cc:	ee 08 00 08 	add	r8,r7,r8
800032d0:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800032d4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800032d8:	2f f8       	sub	r8,-1
800032da:	ef 68 ff cf 	st.b	r7[-49],r8
800032de:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800032e2:	30 28       	mov	r8,2
800032e4:	f0 09 18 00 	cp.b	r9,r8
800032e8:	fe 9a ff da 	brle	8000329c <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800032ec:	ee c8 01 e0 	sub	r8,r7,480
800032f0:	10 9c       	mov	r12,r8
800032f2:	fe b0 fc 73 	rcall	80002bd8 <vector_norm>
800032f6:	18 98       	mov	r8,r12
800032f8:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800032fc:	30 08       	mov	r8,0
800032fe:	ef 68 ff cf 	st.b	r7[-49],r8
80003302:	c4 c8       	rjmp	8000339a <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
80003304:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003308:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000330c:	a3 68       	lsl	r8,0x2
8000330e:	ee 08 00 08 	add	r8,r7,r8
80003312:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003316:	ee fb ff e0 	ld.w	r11,r7[-32]
8000331a:	10 9c       	mov	r12,r8
8000331c:	f0 16 00 0a 	mcall	r6[40]
80003320:	18 98       	mov	r8,r12
80003322:	10 99       	mov	r9,r8
80003324:	ea 08 15 02 	lsl	r8,r5,0x2
80003328:	ee 08 00 08 	add	r8,r7,r8
8000332c:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003330:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003334:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003338:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000333c:	a3 68       	lsl	r8,0x2
8000333e:	ee 08 00 08 	add	r8,r7,r8
80003342:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003346:	12 98       	mov	r8,r9
80003348:	a1 78       	lsl	r8,0x1
8000334a:	12 08       	add	r8,r9
8000334c:	a1 78       	lsl	r8,0x1
8000334e:	16 08       	add	r8,r11
80003350:	a3 68       	lsl	r8,0x2
80003352:	ee 08 00 08 	add	r8,r7,r8
80003356:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
8000335a:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000335e:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003366:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000336e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003372:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003376:	a3 68       	lsl	r8,0x2
80003378:	ee 08 00 08 	add	r8,r7,r8
8000337c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003380:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003384:	f4 08 15 02 	lsl	r8,r10,0x2
80003388:	ee 08 00 08 	add	r8,r7,r8
8000338c:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003390:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003394:	2f f8       	sub	r8,-1
80003396:	ef 68 ff cf 	st.b	r7[-49],r8
8000339a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000339e:	30 28       	mov	r8,2
800033a0:	f0 09 18 00 	cp.b	r9,r8
800033a4:	fe 9a ff b0 	brle	80003304 <computeNewVelocity+0x5e0>
800033a8:	cc 18       	rjmp	8000352a <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800033aa:	fe cc 06 da 	sub	r12,pc,1754
800033ae:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800033b2:	fe cc 06 d6 	sub	r12,pc,1750
800033b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800033ba:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800033be:	30 ab       	mov	r11,10
800033c0:	10 9c       	mov	r12,r8
800033c2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800033c6:	fe cc 06 d2 	sub	r12,pc,1746
800033ca:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800033ce:	ee fc ff d4 	ld.w	r12,r7[-44]
800033d2:	f0 16 00 02 	mcall	r6[8]
800033d6:	14 98       	mov	r8,r10
800033d8:	16 99       	mov	r9,r11
800033da:	10 9a       	mov	r10,r8
800033dc:	12 9b       	mov	r11,r9
800033de:	f0 16 00 6d 	mcall	r6[436]
800033e2:	30 08       	mov	r8,0
800033e4:	fc 19 40 59 	movh	r9,0x4059
800033e8:	f0 16 00 03 	mcall	r6[12]
800033ec:	14 98       	mov	r8,r10
800033ee:	16 99       	mov	r9,r11
800033f0:	10 9a       	mov	r10,r8
800033f2:	12 9b       	mov	r11,r9
800033f4:	f0 16 00 14 	mcall	r6[80]
800033f8:	18 98       	mov	r8,r12
800033fa:	30 ab       	mov	r11,10
800033fc:	10 9c       	mov	r12,r8
800033fe:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80003402:	fe cc 07 06 	sub	r12,pc,1798
80003406:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
8000340a:	e0 68 cc cd 	mov	r8,52429
8000340e:	ea 18 3d cc 	orh	r8,0x3dcc
80003412:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
80003416:	30 08       	mov	r8,0
80003418:	ef 68 ff cf 	st.b	r7[-49],r8
8000341c:	c2 28       	rjmp	80003460 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
8000341e:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003422:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003426:	a3 68       	lsl	r8,0x2
80003428:	ee 08 00 08 	add	r8,r7,r8
8000342c:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003430:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003434:	a3 68       	lsl	r8,0x2
80003436:	ee 08 00 08 	add	r8,r7,r8
8000343a:	f0 fb fe 38 	ld.w	r11,r8[-456]
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003446:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000344a:	f4 08 15 02 	lsl	r8,r10,0x2
8000344e:	ee 08 00 08 	add	r8,r7,r8
80003452:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
80003456:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000345a:	2f f8       	sub	r8,-1
8000345c:	ef 68 ff cf 	st.b	r7[-49],r8
80003460:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003464:	30 28       	mov	r8,2
80003466:	f0 09 18 00 	cp.b	r9,r8
8000346a:	fe 9a ff da 	brle	8000341e <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
8000346e:	ee c8 01 e0 	sub	r8,r7,480
80003472:	10 9c       	mov	r12,r8
80003474:	fe b0 fb b2 	rcall	80002bd8 <vector_norm>
80003478:	18 98       	mov	r8,r12
8000347a:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
8000347e:	30 08       	mov	r8,0
80003480:	ef 68 ff cf 	st.b	r7[-49],r8
80003484:	c4 c8       	rjmp	8000351c <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
80003486:	ef 25 ff cf 	ld.sb	r5,r7[-49]
8000348a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000348e:	a3 68       	lsl	r8,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003498:	ee fb ff e0 	ld.w	r11,r7[-32]
8000349c:	10 9c       	mov	r12,r8
8000349e:	f0 16 00 0a 	mcall	r6[40]
800034a2:	18 98       	mov	r8,r12
800034a4:	10 99       	mov	r9,r8
800034a6:	ea 08 15 02 	lsl	r8,r5,0x2
800034aa:	ee 08 00 08 	add	r8,r7,r8
800034ae:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800034b2:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800034b6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800034ba:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034be:	a3 68       	lsl	r8,0x2
800034c0:	ee 08 00 08 	add	r8,r7,r8
800034c4:	f0 fa fe 14 	ld.w	r10,r8[-492]
800034c8:	12 98       	mov	r8,r9
800034ca:	a1 78       	lsl	r8,0x1
800034cc:	12 08       	add	r8,r9
800034ce:	a1 78       	lsl	r8,0x1
800034d0:	16 08       	add	r8,r11
800034d2:	a3 68       	lsl	r8,0x2
800034d4:	ee 08 00 08 	add	r8,r7,r8
800034d8:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800034dc:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800034e0:	ee f9 ff d0 	ld.w	r9,r7[-48]
800034e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800034ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800034f0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800034f4:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034f8:	a3 68       	lsl	r8,0x2
800034fa:	ee 08 00 08 	add	r8,r7,r8
800034fe:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003502:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003506:	f4 08 15 02 	lsl	r8,r10,0x2
8000350a:	ee 08 00 08 	add	r8,r7,r8
8000350e:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
80003512:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003516:	2f f8       	sub	r8,-1
80003518:	ef 68 ff cf 	st.b	r7[-49],r8
8000351c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003520:	30 28       	mov	r8,2
80003522:	f0 09 18 00 	cp.b	r9,r8
80003526:	fe 9a ff b0 	brle	80003486 <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
8000352a:	30 08       	mov	r8,0
8000352c:	ef 68 ff cf 	st.b	r7[-49],r8
80003530:	c3 f8       	rjmp	800035ae <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
80003532:	ef 25 ff ce 	ld.sb	r5,r7[-50]
80003536:	ef 21 ff cf 	ld.sb	r1,r7[-49]
8000353a:	ec f8 00 00 	ld.w	r8,r6[0]
8000353e:	70 08       	ld.w	r8,r8[0x0]
80003540:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003544:	f2 c9 fc a6 	sub	r9,r9,-858
80003548:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000354c:	10 9c       	mov	r12,r8
8000354e:	f0 16 00 02 	mcall	r6[8]
80003552:	14 92       	mov	r2,r10
80003554:	16 93       	mov	r3,r11
80003556:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000355a:	a3 68       	lsl	r8,0x2
8000355c:	ee 08 00 08 	add	r8,r7,r8
80003560:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80003564:	10 9c       	mov	r12,r8
80003566:	f0 16 00 02 	mcall	r6[8]
8000356a:	30 08       	mov	r8,0
8000356c:	fc 19 3f e0 	movh	r9,0x3fe0
80003570:	f0 16 00 03 	mcall	r6[12]
80003574:	14 98       	mov	r8,r10
80003576:	16 99       	mov	r9,r11
80003578:	04 9a       	mov	r10,r2
8000357a:	06 9b       	mov	r11,r3
8000357c:	f0 16 00 05 	mcall	r6[20]
80003580:	14 98       	mov	r8,r10
80003582:	16 99       	mov	r9,r11
80003584:	10 9a       	mov	r10,r8
80003586:	12 9b       	mov	r11,r9
80003588:	f0 16 00 08 	mcall	r6[32]
8000358c:	18 99       	mov	r9,r12
8000358e:	0a 98       	mov	r8,r5
80003590:	a1 78       	lsl	r8,0x1
80003592:	0a 08       	add	r8,r5
80003594:	a1 78       	lsl	r8,0x1
80003596:	02 08       	add	r8,r1
80003598:	2f d8       	sub	r8,-3
8000359a:	a3 68       	lsl	r8,0x2
8000359c:	ee 08 00 08 	add	r8,r7,r8
800035a0:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800035a4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800035a8:	2f f8       	sub	r8,-1
800035aa:	ef 68 ff cf 	st.b	r7[-49],r8
800035ae:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800035b2:	30 28       	mov	r8,2
800035b4:	f0 09 18 00 	cp.b	r9,r8
800035b8:	fe 9a ff bd 	brle	80003532 <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800035bc:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800035c0:	2f f8       	sub	r8,-1
800035c2:	ef 68 ff ce 	st.b	r7[-50],r8
800035c6:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035ca:	ec f8 00 00 	ld.w	r8,r6[0]
800035ce:	70 08       	ld.w	r8,r8[0x0]
800035d0:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800035d4:	10 39       	cp.w	r9,r8
800035d6:	fe 95 fb d8 	brlt	80002d86 <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800035da:	ee cc 01 9c 	sub	r12,r7,412
800035de:	30 08       	mov	r8,0
800035e0:	ee f9 fd dc 	ld.w	r9,r7[-548]
800035e4:	fc 1a 40 90 	movh	r10,0x4090
800035e8:	ee fb fd e0 	ld.w	r11,r7[-544]
800035ec:	f0 16 01 10 	mcall	r6[1088]
800035f0:	18 98       	mov	r8,r12
800035f2:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800035f6:	ec f8 00 00 	ld.w	r8,r6[0]
800035fa:	70 08       	ld.w	r8,r8[0x0]
800035fc:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80003600:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
80003604:	30 18       	mov	r8,1
80003606:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000360a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000360e:	e0 8c 00 04 	brvs	80003616 <computeNewVelocity+0x8f2>
80003612:	e0 89 00 03 	brgt	80003618 <computeNewVelocity+0x8f4>
80003616:	30 08       	mov	r8,0
80003618:	5c 58       	castu.b	r8
8000361a:	c1 10       	breq	8000363c <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
8000361c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003620:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80003624:	5c 58       	castu.b	r8
80003626:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
8000362a:	ee c8 01 9c 	sub	r8,r7,412
8000362e:	ee f9 fd dc 	ld.w	r9,r7[-548]
80003632:	fc 1a 40 90 	movh	r10,0x4090
80003636:	10 9c       	mov	r12,r8
80003638:	f0 16 02 12 	mcall	r6[2120]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
8000363c:	ec f8 02 40 	ld.w	r8,r6[576]
80003640:	11 89       	ld.ub	r9,r8[0x0]
80003642:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
80003646:	e0 6a 85 1f 	mov	r10,34079
8000364a:	ea 1a 51 eb 	orh	r10,0x51eb
8000364e:	f0 0a 04 4a 	muls.d	r10,r8,r10
80003652:	a5 5b       	asr	r11,0x5
80003654:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003658:	f6 0a 01 0a 	sub	r10,r11,r10
8000365c:	f4 0a 10 64 	mul	r10,r10,100
80003660:	14 18       	sub	r8,r10
80003662:	5c 58       	castu.b	r8
80003664:	ec fa 02 40 	ld.w	r10,r6[576]
80003668:	b4 88       	st.b	r10[0x0],r8
8000366a:	f2 c8 ff ff 	sub	r8,r9,-1
8000366e:	5c 58       	castu.b	r8
80003670:	ec f9 02 40 	ld.w	r9,r6[576]
80003674:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
80003676:	30 08       	mov	r8,0
80003678:	ef 68 ff cf 	st.b	r7[-49],r8
8000367c:	c1 f8       	rjmp	800036ba <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
8000367e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003682:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003686:	a3 69       	lsl	r9,0x2
80003688:	ee fa fd e0 	ld.w	r10,r7[-544]
8000368c:	f4 09 00 09 	add	r9,r10,r9
80003690:	72 0a       	ld.w	r10,r9[0x0]
80003692:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003696:	a3 69       	lsl	r9,0x2
80003698:	ee fb fd dc 	ld.w	r11,r7[-548]
8000369c:	f6 09 00 09 	add	r9,r11,r9
800036a0:	72 09       	ld.w	r9,r9[0x0]
800036a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800036a6:	a3 68       	lsl	r8,0x2
800036a8:	ee 08 00 08 	add	r8,r7,r8
800036ac:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800036b0:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b4:	2f f8       	sub	r8,-1
800036b6:	ef 68 ff cf 	st.b	r7[-49],r8
800036ba:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036be:	30 28       	mov	r8,2
800036c0:	f0 09 18 00 	cp.b	r9,r8
800036c4:	fe 9a ff dd 	brle	8000367e <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800036c8:	ec f8 02 40 	ld.w	r8,r6[576]
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	58 08       	cp.w	r8,0
800036d0:	c2 11       	brne	80003712 <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800036d2:	fe cc 09 d2 	sub	r12,pc,2514
800036d6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800036da:	ee c8 02 10 	sub	r8,r7,528
800036de:	30 2b       	mov	r11,2
800036e0:	10 9c       	mov	r12,r8
800036e2:	f0 16 00 cf 	mcall	r6[828]
		dbg_print(", Optimal:");
800036e6:	fe cc 09 d6 	sub	r12,pc,2518
800036ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800036ee:	30 2b       	mov	r11,2
800036f0:	ee fc fd e0 	ld.w	r12,r7[-544]
800036f4:	f0 16 00 cf 	mcall	r6[828]
		dbg_print(", New:");
800036f8:	fe cc 09 dc 	sub	r12,pc,2524
800036fc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003700:	30 2b       	mov	r11,2
80003702:	ee fc fd dc 	ld.w	r12,r7[-548]
80003706:	f0 16 00 cf 	mcall	r6[828]
		dbg_print("\n");
8000370a:	fe cc 0a 0e 	sub	r12,pc,2574
8000370e:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
80003712:	fe 3d fd cc 	sub	sp,-564
80003716:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000371a:	00 00       	add	r0,r0
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	2b b6       	sub	r6,-69

80003720 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003720:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003724:	1a 97       	mov	r7,sp
80003726:	21 7d       	sub	sp,92
80003728:	fe f6 04 a8 	ld.w	r6,pc[1192]
8000372c:	1e 26       	rsub	r6,pc
8000372e:	ee c5 ff ec 	sub	r5,r7,-20
80003732:	ef 4c ff b8 	st.w	r7[-72],r12
80003736:	ef 4a ff b0 	st.w	r7[-80],r10
8000373a:	ef 49 ff ac 	st.w	r7[-84],r9
8000373e:	ef 48 ff a8 	st.w	r7[-88],r8
80003742:	6a 68       	ld.w	r8,r5[0x18]
80003744:	16 99       	mov	r9,r11
80003746:	ef 69 ff b4 	st.b	r7[-76],r9
8000374a:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
8000374e:	ea c8 ff f4 	sub	r8,r5,-12
80003752:	0a 9b       	mov	r11,r5
80003754:	10 9c       	mov	r12,r8
80003756:	fe b0 f8 59 	rcall	80002808 <scalar_product>
8000375a:	18 98       	mov	r8,r12
8000375c:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003760:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003764:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003768:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000376c:	ee fa ff b0 	ld.w	r10,r7[-80]
80003770:	ee f8 ff b0 	ld.w	r8,r7[-80]
80003774:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003778:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
8000377c:	ea c8 ff f4 	sub	r8,r5,-12
80003780:	10 9c       	mov	r12,r8
80003782:	fe b0 fa 13 	rcall	80002ba8 <vector_norm_sqr>
80003786:	18 98       	mov	r8,r12
80003788:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000378c:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003790:	30 18       	mov	r8,1
80003792:	ee fa ff dc 	ld.w	r10,r7[-36]
80003796:	30 09       	mov	r9,0
80003798:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000379c:	e0 8c 00 03 	brvs	800037a2 <linearProgram1+0x82>
800037a0:	c0 25       	brlt	800037a4 <linearProgram1+0x84>
800037a2:	30 08       	mov	r8,0
800037a4:	5c 58       	castu.b	r8
800037a6:	c0 40       	breq	800037ae <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800037a8:	30 08       	mov	r8,0
800037aa:	e0 8f 02 0e 	bral	80003bc6 <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800037ae:	ee fc ff dc 	ld.w	r12,r7[-36]
800037b2:	fe b0 f9 91 	rcall	80002ad4 <fast_sqrt>
800037b6:	18 98       	mov	r8,r12
800037b8:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800037bc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037c0:	10 99       	mov	r9,r8
800037c2:	ee 19 80 00 	eorh	r9,0x8000
800037c6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037ca:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037ce:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800037d2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800037d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037de:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800037e2:	30 08       	mov	r8,0
800037e4:	ef 68 ff ef 	st.b	r7[-17],r8
800037e8:	cb e8       	rjmp	80003964 <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800037ea:	30 08       	mov	r8,0
800037ec:	ef 68 ff d7 	st.b	r7[-41],r8
800037f0:	c2 48       	rjmp	80003838 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800037f2:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800037f6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800037fa:	12 98       	mov	r8,r9
800037fc:	a1 78       	lsl	r8,0x1
800037fe:	12 08       	add	r8,r9
80003800:	a3 78       	lsl	r8,0x3
80003802:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003806:	f2 08 00 08 	add	r8,r9,r8
8000380a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
8000380e:	2f d9       	sub	r9,-3
80003810:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003814:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003818:	2f d8       	sub	r8,-3
8000381a:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
8000381e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003822:	f4 08 15 02 	lsl	r8,r10,0x2
80003826:	ee 08 00 08 	add	r8,r7,r8
8000382a:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
8000382e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003832:	2f f8       	sub	r8,-1
80003834:	ef 68 ff d7 	st.b	r7[-41],r8
80003838:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000383c:	30 28       	mov	r8,2
8000383e:	f0 09 18 00 	cp.b	r9,r8
80003842:	fe 9a ff d8 	brle	800037f2 <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
80003846:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000384a:	12 98       	mov	r8,r9
8000384c:	a1 78       	lsl	r8,0x1
8000384e:	12 08       	add	r8,r9
80003850:	a3 78       	lsl	r8,0x3
80003852:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003856:	f2 08 00 08 	add	r8,r9,r8
8000385a:	10 99       	mov	r9,r8
8000385c:	ee c8 00 38 	sub	r8,r7,56
80003860:	12 9b       	mov	r11,r9
80003862:	10 9c       	mov	r12,r8
80003864:	fe b0 f7 d2 	rcall	80002808 <scalar_product>
80003868:	18 98       	mov	r8,r12
8000386a:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
8000386e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003872:	12 98       	mov	r8,r9
80003874:	a1 78       	lsl	r8,0x1
80003876:	12 08       	add	r8,r9
80003878:	a3 78       	lsl	r8,0x3
8000387a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000387e:	f2 08 00 08 	add	r8,r9,r8
80003882:	10 9b       	mov	r11,r8
80003884:	0a 9c       	mov	r12,r5
80003886:	fe b0 f7 c1 	rcall	80002808 <scalar_product>
8000388a:	18 98       	mov	r8,r12
8000388c:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003898:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000389c:	10 9c       	mov	r12,r8
8000389e:	f0 16 00 02 	mcall	r6[8]
800038a2:	14 98       	mov	r8,r10
800038a4:	16 99       	mov	r9,r11
800038a6:	30 03       	mov	r3,0
800038a8:	e0 6a 43 2d 	mov	r10,17197
800038ac:	ea 1a eb 1c 	orh	r10,0xeb1c
800038b0:	e0 6b 36 e2 	mov	r11,14050
800038b4:	ea 1b 3f 1a 	orh	r11,0x3f1a
800038b8:	f0 16 00 7f 	mcall	r6[508]
800038bc:	18 98       	mov	r8,r12
800038be:	58 08       	cp.w	r8,0
800038c0:	c0 20       	breq	800038c4 <linearProgram1+0x1a4>
800038c2:	30 13       	mov	r3,1
800038c4:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800038c8:	c1 00       	breq	800038e8 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800038ca:	30 18       	mov	r8,1
800038cc:	ee fa ff f0 	ld.w	r10,r7[-16]
800038d0:	30 09       	mov	r9,0
800038d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038d6:	e0 8c 00 04 	brvs	800038de <linearProgram1+0x1be>
800038da:	e0 89 00 03 	brgt	800038e0 <linearProgram1+0x1c0>
800038de:	30 08       	mov	r8,0
800038e0:	5c 58       	castu.b	r8
800038e2:	c3 b0       	breq	80003958 <linearProgram1+0x238>
			{
				return false;
800038e4:	30 08       	mov	r8,0
800038e6:	c7 09       	rjmp	80003bc6 <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800038e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800038ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800038f0:	f0 16 00 0a 	mcall	r6[40]
800038f4:	18 98       	mov	r8,r12
800038f6:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
800038fa:	30 18       	mov	r8,1
800038fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80003900:	30 09       	mov	r9,0
80003902:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003906:	e0 8c 00 03 	brvs	8000390c <linearProgram1+0x1ec>
8000390a:	c0 24       	brge	8000390e <linearProgram1+0x1ee>
8000390c:	30 08       	mov	r8,0
8000390e:	5c 58       	castu.b	r8
80003910:	c0 b0       	breq	80003926 <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003912:	ee fb ff f8 	ld.w	r11,r7[-8]
80003916:	ee fc ff e4 	ld.w	r12,r7[-28]
8000391a:	fe b0 f9 94 	rcall	80002c42 <f_max>
8000391e:	18 98       	mov	r8,r12
80003920:	ef 48 ff e4 	st.w	r7[-28],r8
80003924:	c0 a8       	rjmp	80003938 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003926:	ee fb ff f8 	ld.w	r11,r7[-8]
8000392a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000392e:	fe b0 f9 6b 	rcall	80002c04 <f_min>
80003932:	18 98       	mov	r8,r12
80003934:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003938:	30 18       	mov	r8,1
8000393a:	ee fa ff e4 	ld.w	r10,r7[-28]
8000393e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003942:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003946:	e0 8c 00 04 	brvs	8000394e <linearProgram1+0x22e>
8000394a:	e0 89 00 03 	brgt	80003950 <linearProgram1+0x230>
8000394e:	30 08       	mov	r8,0
80003950:	5c 58       	castu.b	r8
80003952:	c0 40       	breq	8000395a <linearProgram1+0x23a>
		{
			return false;
80003954:	30 08       	mov	r8,0
80003956:	c3 89       	rjmp	80003bc6 <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003958:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
8000395a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000395e:	2f f8       	sub	r8,-1
80003960:	ef 68 ff ef 	st.b	r7[-17],r8
80003964:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003968:	ef 38 ff b4 	ld.ub	r8,r7[-76]
8000396c:	f0 09 18 00 	cp.b	r9,r8
80003970:	fe 95 ff 3d 	brlt	800037ea <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003974:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003978:	30 08       	mov	r8,0
8000397a:	f0 09 18 00 	cp.b	r9,r8
8000397e:	c6 20       	breq	80003a42 <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003980:	0a 9b       	mov	r11,r5
80003982:	ee fc ff ac 	ld.w	r12,r7[-84]
80003986:	fe b0 f7 41 	rcall	80002808 <scalar_product>
8000398a:	18 9a       	mov	r10,r12
8000398c:	30 18       	mov	r8,1
8000398e:	30 09       	mov	r9,0
80003990:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003994:	e0 8c 00 04 	brvs	8000399c <linearProgram1+0x27c>
80003998:	e0 89 00 03 	brgt	8000399e <linearProgram1+0x27e>
8000399c:	30 08       	mov	r8,0
8000399e:	5c 58       	castu.b	r8
800039a0:	c2 90       	breq	800039f2 <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039a2:	30 08       	mov	r8,0
800039a4:	ef 68 ff d7 	st.b	r7[-41],r8
800039a8:	c1 d8       	rjmp	800039e2 <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
800039aa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039ae:	a3 68       	lsl	r8,0x2
800039b0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800039b4:	f2 08 00 08 	add	r8,r9,r8
800039b8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039bc:	2f d9       	sub	r9,-3
800039be:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800039c2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039c6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
800039ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800039ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800039d2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800039d6:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039d8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800039dc:	2f f8       	sub	r8,-1
800039de:	ef 68 ff d7 	st.b	r7[-41],r8
800039e2:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800039e6:	30 28       	mov	r8,2
800039e8:	f0 09 18 00 	cp.b	r9,r8
800039ec:	fe 9a ff df 	brle	800039aa <linearProgram1+0x28a>
800039f0:	ce a8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
800039f2:	30 08       	mov	r8,0
800039f4:	ef 68 ff d7 	st.b	r7[-41],r8
800039f8:	c1 d8       	rjmp	80003a32 <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
800039fa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039fe:	a3 68       	lsl	r8,0x2
80003a00:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003a04:	f2 08 00 08 	add	r8,r9,r8
80003a08:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a0c:	2f d9       	sub	r9,-3
80003a0e:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003a12:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a16:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003a1a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003a1e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003a22:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003a26:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003a28:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a2c:	2f f8       	sub	r8,-1
80003a2e:	ef 68 ff d7 	st.b	r7[-41],r8
80003a32:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a36:	30 28       	mov	r8,2
80003a38:	f0 09 18 00 	cp.b	r9,r8
80003a3c:	fe 9a ff df 	brle	800039fa <linearProgram1+0x2da>
80003a40:	cc 28       	rjmp	80003bc4 <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a42:	30 08       	mov	r8,0
80003a44:	ef 68 ff d7 	st.b	r7[-41],r8
80003a48:	c1 c8       	rjmp	80003a80 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003a4a:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003a4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a52:	a3 69       	lsl	r9,0x2
80003a54:	ee fa ff ac 	ld.w	r10,r7[-84]
80003a58:	f4 09 00 09 	add	r9,r10,r9
80003a5c:	72 0a       	ld.w	r10,r9[0x0]
80003a5e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a62:	2f d9       	sub	r9,-3
80003a64:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003a68:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003a6c:	a3 68       	lsl	r8,0x2
80003a6e:	ee 08 00 08 	add	r8,r7,r8
80003a72:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a76:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a7a:	2f f8       	sub	r8,-1
80003a7c:	ef 68 ff d7 	st.b	r7[-41],r8
80003a80:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 18 00 	cp.b	r9,r8
80003a8a:	fe 9a ff e0 	brle	80003a4a <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003a8e:	ee c8 00 44 	sub	r8,r7,68
80003a92:	10 9b       	mov	r11,r8
80003a94:	0a 9c       	mov	r12,r5
80003a96:	fe b0 f6 b9 	rcall	80002808 <scalar_product>
80003a9a:	18 98       	mov	r8,r12
80003a9c:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003aa0:	30 18       	mov	r8,1
80003aa2:	ee fa ff fc 	ld.w	r10,r7[-4]
80003aa6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003aaa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003aae:	e0 8c 00 03 	brvs	80003ab4 <linearProgram1+0x394>
80003ab2:	c0 25       	brlt	80003ab6 <linearProgram1+0x396>
80003ab4:	30 08       	mov	r8,0
80003ab6:	5c 58       	castu.b	r8
80003ab8:	c2 90       	breq	80003b0a <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003aba:	30 08       	mov	r8,0
80003abc:	ef 68 ff d7 	st.b	r7[-41],r8
80003ac0:	c1 d8       	rjmp	80003afa <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003ac2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ac6:	a3 68       	lsl	r8,0x2
80003ac8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003acc:	f2 08 00 08 	add	r8,r9,r8
80003ad0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ad4:	2f d9       	sub	r9,-3
80003ad6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003ada:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ade:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ae2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003ae6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003aea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003aee:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003af0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003af4:	2f f8       	sub	r8,-1
80003af6:	ef 68 ff d7 	st.b	r7[-41],r8
80003afa:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003afe:	30 28       	mov	r8,2
80003b00:	f0 09 18 00 	cp.b	r9,r8
80003b04:	fe 9a ff df 	brle	80003ac2 <linearProgram1+0x3a2>
80003b08:	c5 e8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003b0a:	30 18       	mov	r8,1
80003b0c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003b10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b14:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003b18:	e0 8c 00 04 	brvs	80003b20 <linearProgram1+0x400>
80003b1c:	e0 89 00 03 	brgt	80003b22 <linearProgram1+0x402>
80003b20:	30 08       	mov	r8,0
80003b22:	5c 58       	castu.b	r8
80003b24:	c2 90       	breq	80003b76 <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003b26:	30 08       	mov	r8,0
80003b28:	ef 68 ff d7 	st.b	r7[-41],r8
80003b2c:	c1 d8       	rjmp	80003b66 <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003b2e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b32:	a3 68       	lsl	r8,0x2
80003b34:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b38:	f2 08 00 08 	add	r8,r9,r8
80003b3c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b40:	2f d9       	sub	r9,-3
80003b42:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b46:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b4a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b4e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b52:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b56:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b5a:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003b5c:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b60:	2f f8       	sub	r8,-1
80003b62:	ef 68 ff d7 	st.b	r7[-41],r8
80003b66:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b6a:	30 28       	mov	r8,2
80003b6c:	f0 09 18 00 	cp.b	r9,r8
80003b70:	fe 9a ff df 	brle	80003b2e <linearProgram1+0x40e>
80003b74:	c2 88       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003b76:	30 08       	mov	r8,0
80003b78:	ef 68 ff d7 	st.b	r7[-41],r8
80003b7c:	c1 d8       	rjmp	80003bb6 <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003b7e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b82:	a3 68       	lsl	r8,0x2
80003b84:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b88:	f2 08 00 08 	add	r8,r9,r8
80003b8c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b90:	2f d9       	sub	r9,-3
80003b92:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b96:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b9a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ba2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ba6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003baa:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003bac:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bb0:	2f f8       	sub	r8,-1
80003bb2:	ef 68 ff d7 	st.b	r7[-41],r8
80003bb6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003bba:	30 28       	mov	r8,2
80003bbc:	f0 09 18 00 	cp.b	r9,r8
80003bc0:	fe 9a ff df 	brle	80003b7e <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003bc4:	30 18       	mov	r8,1
}
80003bc6:	10 9c       	mov	r12,r8
80003bc8:	2e 9d       	sub	sp,-92
80003bca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003bce:	00 00       	add	r0,r0
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	35 b0       	mov	r0,91

80003bd4 <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003bd4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003bd8:	1a 97       	mov	r7,sp
80003bda:	fa cd 00 cc 	sub	sp,sp,204
80003bde:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003be2:	1e 26       	rsub	r6,pc
80003be4:	ee ce ff ec 	sub	lr,r7,-20
80003be8:	ef 4c ff 48 	st.w	r7[-184],r12
80003bec:	ef 4a ff 40 	st.w	r7[-192],r10
80003bf0:	ef 49 ff 3c 	st.w	r7[-196],r9
80003bf4:	ef 48 ff 38 	st.w	r7[-200],r8
80003bf8:	7c 08       	ld.w	r8,lr[0x0]
80003bfa:	16 99       	mov	r9,r11
80003bfc:	ef 69 ff 44 	st.b	r7[-188],r9
80003c00:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003c04:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c08:	12 98       	mov	r8,r9
80003c0a:	a1 78       	lsl	r8,0x1
80003c0c:	12 08       	add	r8,r9
80003c0e:	a3 78       	lsl	r8,0x3
80003c10:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c14:	f2 08 00 08 	add	r8,r9,r8
80003c18:	10 9a       	mov	r10,r8
80003c1a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c1e:	12 98       	mov	r8,r9
80003c20:	a1 78       	lsl	r8,0x1
80003c22:	12 08       	add	r8,r9
80003c24:	a3 78       	lsl	r8,0x3
80003c26:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c2a:	f2 08 00 08 	add	r8,r9,r8
80003c2e:	2f 48       	sub	r8,-12
80003c30:	14 9b       	mov	r11,r10
80003c32:	10 9c       	mov	r12,r8
80003c34:	fe b0 f5 ea 	rcall	80002808 <scalar_product>
80003c38:	18 98       	mov	r8,r12
80003c3a:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003c3e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003c42:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003c46:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c4a:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003c4e:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003c52:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003c56:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c5a:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003c5e:	30 18       	mov	r8,1
80003c60:	ee fa ff cc 	ld.w	r10,r7[-52]
80003c64:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c68:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c6c:	e0 8c 00 04 	brvs	80003c74 <linearProgram2+0xa0>
80003c70:	e0 89 00 03 	brgt	80003c76 <linearProgram2+0xa2>
80003c74:	30 08       	mov	r8,0
80003c76:	5c 58       	castu.b	r8
80003c78:	c0 40       	breq	80003c80 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003c7a:	30 08       	mov	r8,0
80003c7c:	e0 8f 04 64 	bral	80004544 <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003c80:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c84:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003c88:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003c8c:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003c90:	30 08       	mov	r8,0
80003c92:	ef 68 ff c7 	st.b	r7[-57],r8
80003c96:	c2 08       	rjmp	80003cd6 <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003c98:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003c9c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ca0:	12 98       	mov	r8,r9
80003ca2:	a1 78       	lsl	r8,0x1
80003ca4:	12 08       	add	r8,r9
80003ca6:	a3 78       	lsl	r8,0x3
80003ca8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003cac:	f2 08 00 08 	add	r8,r9,r8
80003cb0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003cb4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003cb8:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003cbc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003cc0:	f4 08 15 02 	lsl	r8,r10,0x2
80003cc4:	ee 08 00 08 	add	r8,r7,r8
80003cc8:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003ccc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003cd0:	2f f8       	sub	r8,-1
80003cd2:	ef 68 ff c7 	st.b	r7[-57],r8
80003cd6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003cda:	30 28       	mov	r8,2
80003cdc:	f0 09 18 00 	cp.b	r9,r8
80003ce0:	fe 9a ff dc 	brle	80003c98 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003ce4:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003ce8:	30 08       	mov	r8,0
80003cea:	f0 09 18 00 	cp.b	r9,r8
80003cee:	e0 80 00 c0 	breq	80003e6e <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003cf2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003cf6:	12 98       	mov	r8,r9
80003cf8:	a1 78       	lsl	r8,0x1
80003cfa:	12 08       	add	r8,r9
80003cfc:	a3 78       	lsl	r8,0x3
80003cfe:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d02:	f2 08 00 08 	add	r8,r9,r8
80003d06:	10 9b       	mov	r11,r8
80003d08:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003d0c:	fe b0 f5 7e 	rcall	80002808 <scalar_product>
80003d10:	18 98       	mov	r8,r12
80003d12:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003d16:	30 08       	mov	r8,0
80003d18:	ef 68 ff c7 	st.b	r7[-57],r8
80003d1c:	c2 a8       	rjmp	80003d70 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003d1e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003d22:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003d26:	a3 68       	lsl	r8,0x2
80003d28:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003d2c:	f2 08 00 08 	add	r8,r9,r8
80003d30:	70 0b       	ld.w	r11,r8[0x0]
80003d32:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d36:	12 98       	mov	r8,r9
80003d38:	a1 78       	lsl	r8,0x1
80003d3a:	12 08       	add	r8,r9
80003d3c:	a3 78       	lsl	r8,0x3
80003d3e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d42:	f2 08 00 08 	add	r8,r9,r8
80003d46:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003d4a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d4e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003d52:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d56:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003d5a:	f4 08 15 02 	lsl	r8,r10,0x2
80003d5e:	ee 08 00 08 	add	r8,r7,r8
80003d62:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003d66:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003d6a:	2f f8       	sub	r8,-1
80003d6c:	ef 68 ff c7 	st.b	r7[-57],r8
80003d70:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003d74:	30 28       	mov	r8,2
80003d76:	f0 09 18 00 	cp.b	r9,r8
80003d7a:	fe 9a ff d2 	brle	80003d1e <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003d7e:	ee c8 00 54 	sub	r8,r7,84
80003d82:	10 9c       	mov	r12,r8
80003d84:	fe b0 f7 12 	rcall	80002ba8 <vector_norm_sqr>
80003d88:	18 98       	mov	r8,r12
80003d8a:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003d8e:	ee fc ff e0 	ld.w	r12,r7[-32]
80003d92:	f0 16 00 02 	mcall	r6[8]
80003d96:	14 98       	mov	r8,r10
80003d98:	16 99       	mov	r9,r11
80003d9a:	30 05       	mov	r5,0
80003d9c:	e0 6a 43 2d 	mov	r10,17197
80003da0:	ea 1a eb 1c 	orh	r10,0xeb1c
80003da4:	e0 6b 36 e2 	mov	r11,14050
80003da8:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003dac:	f0 16 00 7f 	mcall	r6[508]
80003db0:	18 98       	mov	r8,r12
80003db2:	58 08       	cp.w	r8,0
80003db4:	c0 20       	breq	80003db8 <linearProgram2+0x1e4>
80003db6:	30 15       	mov	r5,1
80003db8:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003dbc:	c2 00       	breq	80003dfc <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003dbe:	30 08       	mov	r8,0
80003dc0:	ef 68 ff c7 	st.b	r7[-57],r8
80003dc4:	c1 48       	rjmp	80003dec <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003dc6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dca:	a3 68       	lsl	r8,0x2
80003dcc:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003dd0:	10 09       	add	r9,r8
80003dd2:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dd6:	a3 68       	lsl	r8,0x2
80003dd8:	ee 08 00 08 	add	r8,r7,r8
80003ddc:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003de0:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003de2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003de6:	2f f8       	sub	r8,-1
80003de8:	ef 68 ff c7 	st.b	r7[-57],r8
80003dec:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003df0:	30 28       	mov	r8,2
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	fe 9a ff e8 	brle	80003dc6 <linearProgram2+0x1f2>
80003dfa:	c2 d9       	rjmp	80004054 <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003dfc:	ee fb ff e0 	ld.w	r11,r7[-32]
80003e00:	ee fc ff d4 	ld.w	r12,r7[-44]
80003e04:	f0 16 00 0a 	mcall	r6[40]
80003e08:	18 98       	mov	r8,r12
80003e0a:	10 9c       	mov	r12,r8
80003e0c:	fe b0 f6 64 	rcall	80002ad4 <fast_sqrt>
80003e10:	18 98       	mov	r8,r12
80003e12:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003e16:	30 08       	mov	r8,0
80003e18:	ef 68 ff c7 	st.b	r7[-57],r8
80003e1c:	c2 18       	rjmp	80003e5e <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003e1e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e22:	a3 68       	lsl	r8,0x2
80003e24:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003e28:	10 09       	add	r9,r8
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee 08 00 08 	add	r8,r7,r8
80003e34:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003e38:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e3c:	a3 68       	lsl	r8,0x2
80003e3e:	ee 08 00 08 	add	r8,r7,r8
80003e42:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003e46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003e4a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003e4e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003e52:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003e54:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e58:	2f f8       	sub	r8,-1
80003e5a:	ef 68 ff c7 	st.b	r7[-57],r8
80003e5e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e62:	30 28       	mov	r8,2
80003e64:	f0 09 18 00 	cp.b	r9,r8
80003e68:	fe 9a ff db 	brle	80003e1e <linearProgram2+0x24a>
80003e6c:	cf 48       	rjmp	80004054 <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003e6e:	30 08       	mov	r8,0
80003e70:	ef 68 ff c7 	st.b	r7[-57],r8
80003e74:	c2 78       	rjmp	80003ec2 <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003e76:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e7a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e7e:	12 98       	mov	r8,r9
80003e80:	a1 78       	lsl	r8,0x1
80003e82:	12 08       	add	r8,r9
80003e84:	a3 78       	lsl	r8,0x3
80003e86:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e8a:	f2 08 00 08 	add	r8,r9,r8
80003e8e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e92:	2f d9       	sub	r9,-3
80003e94:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e98:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e9c:	a3 68       	lsl	r8,0x2
80003e9e:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003ea2:	f6 08 00 08 	add	r8,r11,r8
80003ea6:	70 08       	ld.w	r8,r8[0x0]
80003ea8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003eac:	f4 08 15 02 	lsl	r8,r10,0x2
80003eb0:	ee 08 00 08 	add	r8,r7,r8
80003eb4:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003eb8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003ebc:	2f f8       	sub	r8,-1
80003ebe:	ef 68 ff c7 	st.b	r7[-57],r8
80003ec2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ec6:	30 28       	mov	r8,2
80003ec8:	f0 09 18 00 	cp.b	r9,r8
80003ecc:	fe 9a ff d5 	brle	80003e76 <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003ed0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ed4:	12 98       	mov	r8,r9
80003ed6:	a1 78       	lsl	r8,0x1
80003ed8:	12 08       	add	r8,r9
80003eda:	a3 78       	lsl	r8,0x3
80003edc:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003ee0:	f2 08 00 08 	add	r8,r9,r8
80003ee4:	10 99       	mov	r9,r8
80003ee6:	ee c8 00 60 	sub	r8,r7,96
80003eea:	12 9b       	mov	r11,r9
80003eec:	10 9c       	mov	r12,r8
80003eee:	fe b0 f4 8d 	rcall	80002808 <scalar_product>
80003ef2:	18 98       	mov	r8,r12
80003ef4:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80003ef8:	30 08       	mov	r8,0
80003efa:	ef 68 ff c7 	st.b	r7[-57],r8
80003efe:	c2 a8       	rjmp	80003f52 <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80003f00:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f04:	a3 68       	lsl	r8,0x2
80003f06:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f0a:	f2 08 00 0a 	add	r10,r9,r8
80003f0e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f12:	a3 68       	lsl	r8,0x2
80003f14:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003f18:	f2 08 00 08 	add	r8,r9,r8
80003f1c:	70 0b       	ld.w	r11,r8[0x0]
80003f1e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f22:	12 98       	mov	r8,r9
80003f24:	a1 78       	lsl	r8,0x1
80003f26:	12 08       	add	r8,r9
80003f28:	a3 78       	lsl	r8,0x3
80003f2a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f2e:	f2 08 00 08 	add	r8,r9,r8
80003f32:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003f3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003f3e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003f42:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
80003f46:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80003f48:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f4c:	2f f8       	sub	r8,-1
80003f4e:	ef 68 ff c7 	st.b	r7[-57],r8
80003f52:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f56:	30 28       	mov	r8,2
80003f58:	f0 09 18 00 	cp.b	r9,r8
80003f5c:	fe 9a ff d2 	brle	80003f00 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80003f60:	ee fc ff 38 	ld.w	r12,r7[-200]
80003f64:	fe b0 f6 22 	rcall	80002ba8 <vector_norm_sqr>
80003f68:	18 9a       	mov	r10,r12
80003f6a:	30 18       	mov	r8,1
80003f6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003f70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003f74:	e0 8c 00 04 	brvs	80003f7c <linearProgram2+0x3a8>
80003f78:	e0 89 00 03 	brgt	80003f7e <linearProgram2+0x3aa>
80003f7c:	30 08       	mov	r8,0
80003f7e:	5c 58       	castu.b	r8
80003f80:	c6 a0       	breq	80004054 <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
80003f82:	30 08       	mov	r8,0
80003f84:	ef 68 ff c7 	st.b	r7[-57],r8
80003f88:	c1 f8       	rjmp	80003fc6 <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80003f8a:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f8e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f92:	a3 68       	lsl	r8,0x2
80003f94:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f98:	f2 08 00 08 	add	r8,r9,r8
80003f9c:	70 09       	ld.w	r9,r8[0x0]
80003f9e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa2:	a3 68       	lsl	r8,0x2
80003fa4:	ee 08 00 08 	add	r8,r7,r8
80003fa8:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003fac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb0:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb4:	ee 08 00 08 	add	r8,r7,r8
80003fb8:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
80003fbc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc0:	2f f8       	sub	r8,-1
80003fc2:	ef 68 ff c7 	st.b	r7[-57],r8
80003fc6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fca:	30 28       	mov	r8,2
80003fcc:	f0 09 18 00 	cp.b	r9,r8
80003fd0:	fe 9a ff dd 	brle	80003f8a <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
80003fd4:	ee c8 00 6c 	sub	r8,r7,108
80003fd8:	10 9c       	mov	r12,r8
80003fda:	fe b0 f5 e7 	rcall	80002ba8 <vector_norm_sqr>
80003fde:	18 98       	mov	r8,r12
80003fe0:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
80003fe4:	ee fb ff ec 	ld.w	r11,r7[-20]
80003fe8:	ee fc ff d4 	ld.w	r12,r7[-44]
80003fec:	f0 16 00 0a 	mcall	r6[40]
80003ff0:	18 98       	mov	r8,r12
80003ff2:	10 9c       	mov	r12,r8
80003ff4:	fe b0 f5 70 	rcall	80002ad4 <fast_sqrt>
80003ff8:	18 98       	mov	r8,r12
80003ffa:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80003ffe:	30 08       	mov	r8,0
80004000:	ef 68 ff c7 	st.b	r7[-57],r8
80004004:	c2 18       	rjmp	80004046 <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
80004006:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400a:	a3 68       	lsl	r8,0x2
8000400c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004010:	10 09       	add	r9,r8
80004012:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004016:	a3 68       	lsl	r8,0x2
80004018:	ee 08 00 08 	add	r8,r7,r8
8000401c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004020:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004024:	a3 68       	lsl	r8,0x2
80004026:	ee 08 00 08 	add	r8,r7,r8
8000402a:	f0 fb ff 94 	ld.w	r11,r8[-108]
8000402e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004032:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004036:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000403a:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
8000403c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004040:	2f f8       	sub	r8,-1
80004042:	ef 68 ff c7 	st.b	r7[-57],r8
80004046:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000404a:	30 28       	mov	r8,2
8000404c:	f0 09 18 00 	cp.b	r9,r8
80004050:	fe 9a ff db 	brle	80004006 <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004054:	30 08       	mov	r8,0
80004056:	ef 68 ff db 	st.b	r7[-37],r8
8000405a:	e0 8f 02 6c 	bral	80004532 <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
8000405e:	30 08       	mov	r8,0
80004060:	ef 68 ff c7 	st.b	r7[-57],r8
80004064:	c2 78       	rjmp	800040b2 <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
80004066:	ef 2a ff c7 	ld.sb	r10,r7[-57]
8000406a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000406e:	12 98       	mov	r8,r9
80004070:	a1 78       	lsl	r8,0x1
80004072:	12 08       	add	r8,r9
80004074:	a3 78       	lsl	r8,0x3
80004076:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000407a:	f2 08 00 08 	add	r8,r9,r8
8000407e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004082:	2f d9       	sub	r9,-3
80004084:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004088:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000408c:	a3 68       	lsl	r8,0x2
8000408e:	ee fb ff 38 	ld.w	r11,r7[-200]
80004092:	f6 08 00 08 	add	r8,r11,r8
80004096:	70 08       	ld.w	r8,r8[0x0]
80004098:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000409c:	f4 08 15 02 	lsl	r8,r10,0x2
800040a0:	ee 08 00 08 	add	r8,r7,r8
800040a4:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800040a8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040ac:	2f f8       	sub	r8,-1
800040ae:	ef 68 ff c7 	st.b	r7[-57],r8
800040b2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040b6:	30 28       	mov	r8,2
800040b8:	f0 09 18 00 	cp.b	r9,r8
800040bc:	fe 9a ff d5 	brle	80004066 <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800040c0:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040c4:	12 98       	mov	r8,r9
800040c6:	a1 78       	lsl	r8,0x1
800040c8:	12 08       	add	r8,r9
800040ca:	a3 78       	lsl	r8,0x3
800040cc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800040d0:	f2 08 00 08 	add	r8,r9,r8
800040d4:	ee c9 00 78 	sub	r9,r7,120
800040d8:	12 9b       	mov	r11,r9
800040da:	10 9c       	mov	r12,r8
800040dc:	fe b0 f3 96 	rcall	80002808 <scalar_product>
800040e0:	18 9a       	mov	r10,r12
800040e2:	30 18       	mov	r8,1
800040e4:	30 09       	mov	r9,0
800040e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800040ea:	e0 8c 00 04 	brvs	800040f2 <linearProgram2+0x51e>
800040ee:	e0 89 00 03 	brgt	800040f4 <linearProgram2+0x520>
800040f2:	30 08       	mov	r8,0
800040f4:	5c 58       	castu.b	r8
800040f6:	e0 80 02 19 	breq	80004528 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
800040fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040fe:	12 98       	mov	r8,r9
80004100:	a1 78       	lsl	r8,0x1
80004102:	12 08       	add	r8,r9
80004104:	a3 78       	lsl	r8,0x3
80004106:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000410a:	f2 08 00 08 	add	r8,r9,r8
8000410e:	70 1a       	ld.w	r10,r8[0x4]
80004110:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004114:	12 98       	mov	r8,r9
80004116:	a1 78       	lsl	r8,0x1
80004118:	12 08       	add	r8,r9
8000411a:	a3 78       	lsl	r8,0x3
8000411c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004120:	f2 08 00 08 	add	r8,r9,r8
80004124:	70 28       	ld.w	r8,r8[0x8]
80004126:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000412a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000412e:	12 98       	mov	r8,r9
80004130:	a1 78       	lsl	r8,0x1
80004132:	12 08       	add	r8,r9
80004134:	a3 78       	lsl	r8,0x3
80004136:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000413a:	f2 08 00 08 	add	r8,r9,r8
8000413e:	70 2b       	ld.w	r11,r8[0x8]
80004140:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004144:	12 98       	mov	r8,r9
80004146:	a1 78       	lsl	r8,0x1
80004148:	12 08       	add	r8,r9
8000414a:	a3 78       	lsl	r8,0x3
8000414c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004150:	f2 08 00 08 	add	r8,r9,r8
80004154:	70 18       	ld.w	r8,r8[0x4]
80004156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000415a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000415e:	ef 48 ff 7c 	st.w	r7[-132],r8
80004162:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004166:	12 98       	mov	r8,r9
80004168:	a1 78       	lsl	r8,0x1
8000416a:	12 08       	add	r8,r9
8000416c:	a3 78       	lsl	r8,0x3
8000416e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004172:	f2 08 00 08 	add	r8,r9,r8
80004176:	70 2a       	ld.w	r10,r8[0x8]
80004178:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000417c:	12 98       	mov	r8,r9
8000417e:	a1 78       	lsl	r8,0x1
80004180:	12 08       	add	r8,r9
80004182:	a3 78       	lsl	r8,0x3
80004184:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004188:	f2 08 00 08 	add	r8,r9,r8
8000418c:	70 08       	ld.w	r8,r8[0x0]
8000418e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004192:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004196:	12 98       	mov	r8,r9
80004198:	a1 78       	lsl	r8,0x1
8000419a:	12 08       	add	r8,r9
8000419c:	a3 78       	lsl	r8,0x3
8000419e:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041a2:	f2 08 00 08 	add	r8,r9,r8
800041a6:	70 0b       	ld.w	r11,r8[0x0]
800041a8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041ac:	12 98       	mov	r8,r9
800041ae:	a1 78       	lsl	r8,0x1
800041b0:	12 08       	add	r8,r9
800041b2:	a3 78       	lsl	r8,0x3
800041b4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041b8:	f2 08 00 08 	add	r8,r9,r8
800041bc:	70 28       	ld.w	r8,r8[0x8]
800041be:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800041c2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800041c6:	ef 48 ff 80 	st.w	r7[-128],r8
800041ca:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041ce:	12 98       	mov	r8,r9
800041d0:	a1 78       	lsl	r8,0x1
800041d2:	12 08       	add	r8,r9
800041d4:	a3 78       	lsl	r8,0x3
800041d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041da:	f2 08 00 08 	add	r8,r9,r8
800041de:	70 0a       	ld.w	r10,r8[0x0]
800041e0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041e4:	12 98       	mov	r8,r9
800041e6:	a1 78       	lsl	r8,0x1
800041e8:	12 08       	add	r8,r9
800041ea:	a3 78       	lsl	r8,0x3
800041ec:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041f0:	f2 08 00 08 	add	r8,r9,r8
800041f4:	70 18       	ld.w	r8,r8[0x4]
800041f6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800041fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041fe:	12 98       	mov	r8,r9
80004200:	a1 78       	lsl	r8,0x1
80004202:	12 08       	add	r8,r9
80004204:	a3 78       	lsl	r8,0x3
80004206:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000420a:	f2 08 00 08 	add	r8,r9,r8
8000420e:	70 1b       	ld.w	r11,r8[0x4]
80004210:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004214:	12 98       	mov	r8,r9
80004216:	a1 78       	lsl	r8,0x1
80004218:	12 08       	add	r8,r9
8000421a:	a3 78       	lsl	r8,0x3
8000421c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004220:	f2 08 00 08 	add	r8,r9,r8
80004224:	70 08       	ld.w	r8,r8[0x0]
80004226:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000422a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000422e:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
80004232:	ee c8 00 84 	sub	r8,r7,132
80004236:	10 9c       	mov	r12,r8
80004238:	fe b0 f4 b8 	rcall	80002ba8 <vector_norm_sqr>
8000423c:	18 98       	mov	r8,r12
8000423e:	10 9c       	mov	r12,r8
80004240:	f0 16 00 02 	mcall	r6[8]
80004244:	14 98       	mov	r8,r10
80004246:	16 99       	mov	r9,r11
80004248:	30 05       	mov	r5,0
8000424a:	e0 6a 43 2d 	mov	r10,17197
8000424e:	ea 1a eb 1c 	orh	r10,0xeb1c
80004252:	e0 6b 36 e2 	mov	r11,14050
80004256:	ea 1b 3f 1a 	orh	r11,0x3f1a
8000425a:	f0 16 00 7f 	mcall	r6[508]
8000425e:	18 98       	mov	r8,r12
80004260:	58 08       	cp.w	r8,0
80004262:	c0 20       	breq	80004266 <linearProgram2+0x692>
80004264:	30 15       	mov	r5,1
80004266:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000426a:	c0 30       	breq	80004270 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
8000426c:	30 08       	mov	r8,0
8000426e:	c6 b9       	rjmp	80004544 <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004270:	ee c8 00 84 	sub	r8,r7,132
80004274:	10 9c       	mov	r12,r8
80004276:	fe b0 f4 b1 	rcall	80002bd8 <vector_norm>
8000427a:	18 98       	mov	r8,r12
8000427c:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004280:	30 08       	mov	r8,0
80004282:	ef 68 ff c7 	st.b	r7[-57],r8
80004286:	c1 c8       	rjmp	800042be <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004288:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000428c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004290:	a3 68       	lsl	r8,0x2
80004292:	ee 08 00 08 	add	r8,r7,r8
80004296:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
8000429a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000429e:	10 9c       	mov	r12,r8
800042a0:	f0 16 00 0a 	mcall	r6[40]
800042a4:	18 98       	mov	r8,r12
800042a6:	10 99       	mov	r9,r8
800042a8:	ea 08 15 02 	lsl	r8,r5,0x2
800042ac:	ee 08 00 08 	add	r8,r7,r8
800042b0:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800042b4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800042b8:	2f f8       	sub	r8,-1
800042ba:	ef 68 ff c7 	st.b	r7[-57],r8
800042be:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800042c2:	30 28       	mov	r8,2
800042c4:	f0 09 18 00 	cp.b	r9,r8
800042c8:	fe 9a ff e0 	brle	80004288 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800042cc:	ee fa ff 68 	ld.w	r10,r7[-152]
800042d0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042d4:	12 98       	mov	r8,r9
800042d6:	a1 78       	lsl	r8,0x1
800042d8:	12 08       	add	r8,r9
800042da:	a3 78       	lsl	r8,0x3
800042dc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e0:	f2 08 00 08 	add	r8,r9,r8
800042e4:	70 28       	ld.w	r8,r8[0x8]
800042e6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800042ea:	ee fb ff 6c 	ld.w	r11,r7[-148]
800042ee:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042f2:	12 98       	mov	r8,r9
800042f4:	a1 78       	lsl	r8,0x1
800042f6:	12 08       	add	r8,r9
800042f8:	a3 78       	lsl	r8,0x3
800042fa:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042fe:	f2 08 00 08 	add	r8,r9,r8
80004302:	70 18       	ld.w	r8,r8[0x4]
80004304:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004308:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000430c:	ef 48 ff 58 	st.w	r7[-168],r8
80004310:	ee fa ff 6c 	ld.w	r10,r7[-148]
80004314:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004318:	12 98       	mov	r8,r9
8000431a:	a1 78       	lsl	r8,0x1
8000431c:	12 08       	add	r8,r9
8000431e:	a3 78       	lsl	r8,0x3
80004320:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004324:	f2 08 00 08 	add	r8,r9,r8
80004328:	70 08       	ld.w	r8,r8[0x0]
8000432a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000432e:	ee fb ff 64 	ld.w	r11,r7[-156]
80004332:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004336:	12 98       	mov	r8,r9
80004338:	a1 78       	lsl	r8,0x1
8000433a:	12 08       	add	r8,r9
8000433c:	a3 78       	lsl	r8,0x3
8000433e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004342:	f2 08 00 08 	add	r8,r9,r8
80004346:	70 28       	ld.w	r8,r8[0x8]
80004348:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000434c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004350:	ef 48 ff 5c 	st.w	r7[-164],r8
80004354:	ee fa ff 64 	ld.w	r10,r7[-156]
80004358:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000435c:	12 98       	mov	r8,r9
8000435e:	a1 78       	lsl	r8,0x1
80004360:	12 08       	add	r8,r9
80004362:	a3 78       	lsl	r8,0x3
80004364:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004368:	f2 08 00 08 	add	r8,r9,r8
8000436c:	70 18       	ld.w	r8,r8[0x4]
8000436e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004372:	ee fb ff 68 	ld.w	r11,r7[-152]
80004376:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000437a:	12 98       	mov	r8,r9
8000437c:	a1 78       	lsl	r8,0x1
8000437e:	12 08       	add	r8,r9
80004380:	a3 78       	lsl	r8,0x3
80004382:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004386:	f2 08 00 08 	add	r8,r9,r8
8000438a:	70 08       	ld.w	r8,r8[0x0]
8000438c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004390:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004394:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
80004398:	30 08       	mov	r8,0
8000439a:	ef 68 ff c7 	st.b	r7[-57],r8
8000439e:	c2 e8       	rjmp	800043fa <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800043a0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800043a4:	ef 29 ff db 	ld.sb	r9,r7[-37]
800043a8:	12 98       	mov	r8,r9
800043aa:	a1 78       	lsl	r8,0x1
800043ac:	12 08       	add	r8,r9
800043ae:	a3 78       	lsl	r8,0x3
800043b0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043b4:	f2 08 00 08 	add	r8,r9,r8
800043b8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043bc:	2f d9       	sub	r9,-3
800043be:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800043c2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043c6:	12 98       	mov	r8,r9
800043c8:	a1 78       	lsl	r8,0x1
800043ca:	12 08       	add	r8,r9
800043cc:	a3 78       	lsl	r8,0x3
800043ce:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043d2:	f2 08 00 08 	add	r8,r9,r8
800043d6:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043da:	2f d9       	sub	r9,-3
800043dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800043e0:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800043e4:	f4 08 15 02 	lsl	r8,r10,0x2
800043e8:	ee 08 00 08 	add	r8,r7,r8
800043ec:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800043f0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043f4:	2f f8       	sub	r8,-1
800043f6:	ef 68 ff c7 	st.b	r7[-57],r8
800043fa:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043fe:	30 28       	mov	r8,2
80004400:	f0 09 18 00 	cp.b	r9,r8
80004404:	fe 9a ff ce 	brle	800043a0 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004408:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000440c:	12 98       	mov	r8,r9
8000440e:	a1 78       	lsl	r8,0x1
80004410:	12 08       	add	r8,r9
80004412:	a3 78       	lsl	r8,0x3
80004414:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004418:	f2 08 00 08 	add	r8,r9,r8
8000441c:	10 99       	mov	r9,r8
8000441e:	ee c8 00 b4 	sub	r8,r7,180
80004422:	12 9b       	mov	r11,r9
80004424:	10 9c       	mov	r12,r8
80004426:	fe b0 f1 f1 	rcall	80002808 <scalar_product>
8000442a:	18 98       	mov	r8,r12
8000442c:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004430:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004434:	12 98       	mov	r8,r9
80004436:	a1 78       	lsl	r8,0x1
80004438:	12 08       	add	r8,r9
8000443a:	a3 78       	lsl	r8,0x3
8000443c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004440:	f2 08 00 08 	add	r8,r9,r8
80004444:	10 99       	mov	r9,r8
80004446:	ee c8 00 a8 	sub	r8,r7,168
8000444a:	12 9b       	mov	r11,r9
8000444c:	10 9c       	mov	r12,r8
8000444e:	fe b0 f1 dd 	rcall	80002808 <scalar_product>
80004452:	18 98       	mov	r8,r12
80004454:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004458:	30 08       	mov	r8,0
8000445a:	ef 68 ff c7 	st.b	r7[-57],r8
8000445e:	c3 18       	rjmp	800044c0 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004460:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004464:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004468:	12 98       	mov	r8,r9
8000446a:	a1 78       	lsl	r8,0x1
8000446c:	12 08       	add	r8,r9
8000446e:	a3 78       	lsl	r8,0x3
80004470:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004474:	f2 08 00 08 	add	r8,r9,r8
80004478:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000447c:	2f d9       	sub	r9,-3
8000447e:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004482:	ee fb ff fc 	ld.w	r11,r7[-4]
80004486:	ee fc ff f8 	ld.w	r12,r7[-8]
8000448a:	f0 16 00 0a 	mcall	r6[40]
8000448e:	18 98       	mov	r8,r12
80004490:	10 99       	mov	r9,r8
80004492:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004496:	a3 68       	lsl	r8,0x2
80004498:	ee 08 00 08 	add	r8,r7,r8
8000449c:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800044a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800044a4:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800044a8:	ea c8 ff fd 	sub	r8,r5,-3
800044ac:	a3 68       	lsl	r8,0x2
800044ae:	ee 08 00 08 	add	r8,r7,r8
800044b2:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800044b6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044ba:	2f f8       	sub	r8,-1
800044bc:	ef 68 ff c7 	st.b	r7[-57],r8
800044c0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800044c4:	30 28       	mov	r8,2
800044c6:	f0 09 18 00 	cp.b	r9,r8
800044ca:	fe 9a ff cb 	brle	80004460 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800044ce:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800044d2:	ef 2c ff db 	ld.sb	r12,r7[-37]
800044d6:	1a d8       	st.w	--sp,r8
800044d8:	20 6d       	sub	sp,24
800044da:	1a 98       	mov	r8,sp
800044dc:	10 9a       	mov	r10,r8
800044de:	ee cb 00 9c 	sub	r11,r7,156
800044e2:	f4 c8 00 00 	sub	r8,r10,0
800044e6:	f6 c9 00 00 	sub	r9,r11,0
800044ea:	72 0e       	ld.w	lr,r9[0x0]
800044ec:	91 0e       	st.w	r8[0x0],lr
800044ee:	72 1e       	ld.w	lr,r9[0x4]
800044f0:	91 1e       	st.w	r8[0x4],lr
800044f2:	72 2e       	ld.w	lr,r9[0x8]
800044f4:	91 2e       	st.w	r8[0x8],lr
800044f6:	72 39       	ld.w	r9,r9[0xc]
800044f8:	91 39       	st.w	r8[0xc],r9
800044fa:	f6 e8 00 10 	ld.d	r8,r11[16]
800044fe:	f4 e9 00 10 	st.d	r10[16],r8
80004502:	ee f8 ff 38 	ld.w	r8,r7[-200]
80004506:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000450a:	ee fa ff 40 	ld.w	r10,r7[-192]
8000450e:	18 9b       	mov	r11,r12
80004510:	ee fc ff 48 	ld.w	r12,r7[-184]
80004514:	f0 16 01 d3 	mcall	r6[1868]
80004518:	2f 9d       	sub	sp,-28
8000451a:	18 98       	mov	r8,r12
8000451c:	ec 18 00 01 	eorl	r8,0x1
80004520:	5c 58       	castu.b	r8
80004522:	c0 30       	breq	80004528 <linearProgram2+0x954>
			{
				return false;
80004524:	30 08       	mov	r8,0
80004526:	c0 f8       	rjmp	80004544 <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004528:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000452c:	2f f8       	sub	r8,-1
8000452e:	ef 68 ff db 	st.b	r7[-37],r8
80004532:	ef 39 ff db 	ld.ub	r9,r7[-37]
80004536:	ef 38 ff 44 	ld.ub	r8,r7[-188]
8000453a:	f0 09 18 00 	cp.b	r9,r8
8000453e:	fe 95 fd 90 	brlt	8000405e <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
80004542:	30 18       	mov	r8,1
}
80004544:	10 9c       	mov	r12,r8
80004546:	2c dd       	sub	sp,-204
80004548:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000454c:	80 00       	ld.sh	r0,r0[0x0]
8000454e:	3a 66       	mov	r6,-90

80004550 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004550:	eb cd 40 e0 	pushm	r5-r7,lr
80004554:	1a 97       	mov	r7,sp
80004556:	20 ed       	sub	sp,56
80004558:	fe f6 02 e0 	ld.w	r6,pc[736]
8000455c:	1e 26       	rsub	r6,pc
8000455e:	ef 4c ff d8 	st.w	r7[-40],r12
80004562:	ef 4b ff d4 	st.w	r7[-44],r11
80004566:	ef 4a ff d0 	st.w	r7[-48],r10
8000456a:	ef 49 ff cc 	st.w	r7[-52],r9
8000456e:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
80004572:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80004576:	30 08       	mov	r8,0
80004578:	f0 09 18 00 	cp.b	r9,r8
8000457c:	c3 40       	breq	800045e4 <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000457e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004582:	fe b0 f3 2b 	rcall	80002bd8 <vector_norm>
80004586:	18 98       	mov	r8,r12
80004588:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
8000458c:	30 08       	mov	r8,0
8000458e:	ef 68 ff f6 	st.b	r7[-10],r8
80004592:	c2 18       	rjmp	800045d4 <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004594:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004598:	a3 68       	lsl	r8,0x2
8000459a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000459e:	f2 08 00 05 	add	r5,r9,r8
800045a2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800045a6:	a3 68       	lsl	r8,0x2
800045a8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800045ac:	f2 08 00 08 	add	r8,r9,r8
800045b0:	70 08       	ld.w	r8,r8[0x0]
800045b2:	ee fb ff f8 	ld.w	r11,r7[-8]
800045b6:	10 9c       	mov	r12,r8
800045b8:	f0 16 00 0a 	mcall	r6[40]
800045bc:	18 98       	mov	r8,r12
800045be:	10 99       	mov	r9,r8
800045c0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045c8:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800045ca:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800045ce:	2f f8       	sub	r8,-1
800045d0:	ef 68 ff f6 	st.b	r7[-10],r8
800045d4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800045d8:	30 28       	mov	r8,2
800045da:	f0 09 18 00 	cp.b	r9,r8
800045de:	fe 9a ff db 	brle	80004594 <linearProgram3+0x44>
800045e2:	c6 98       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800045e4:	ee fc ff d4 	ld.w	r12,r7[-44]
800045e8:	fe b0 f2 e0 	rcall	80002ba8 <vector_norm_sqr>
800045ec:	18 9a       	mov	r10,r12
800045ee:	ee f9 ff d0 	ld.w	r9,r7[-48]
800045f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045f6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800045fa:	30 18       	mov	r8,1
800045fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004600:	e0 8c 00 04 	brvs	80004608 <linearProgram3+0xb8>
80004604:	e0 89 00 03 	brgt	8000460a <linearProgram3+0xba>
80004608:	30 08       	mov	r8,0
8000460a:	5c 58       	castu.b	r8
8000460c:	c3 40       	breq	80004674 <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000460e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004612:	fe b0 f2 e3 	rcall	80002bd8 <vector_norm>
80004616:	18 98       	mov	r8,r12
80004618:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
8000461c:	30 08       	mov	r8,0
8000461e:	ef 68 ff f6 	st.b	r7[-10],r8
80004622:	c2 18       	rjmp	80004664 <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004624:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004628:	a3 68       	lsl	r8,0x2
8000462a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000462e:	f2 08 00 05 	add	r5,r9,r8
80004632:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004636:	a3 68       	lsl	r8,0x2
80004638:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000463c:	f2 08 00 08 	add	r8,r9,r8
80004640:	70 08       	ld.w	r8,r8[0x0]
80004642:	ee fb ff fc 	ld.w	r11,r7[-4]
80004646:	10 9c       	mov	r12,r8
80004648:	f0 16 00 0a 	mcall	r6[40]
8000464c:	18 98       	mov	r8,r12
8000464e:	10 99       	mov	r9,r8
80004650:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004654:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004658:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
8000465a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000465e:	2f f8       	sub	r8,-1
80004660:	ef 68 ff f6 	st.b	r7[-10],r8
80004664:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004668:	30 28       	mov	r8,2
8000466a:	f0 09 18 00 	cp.b	r9,r8
8000466e:	fe 9a ff db 	brle	80004624 <linearProgram3+0xd4>
80004672:	c2 18       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
80004674:	30 08       	mov	r8,0
80004676:	ef 68 ff f6 	st.b	r7[-10],r8
8000467a:	c1 68       	rjmp	800046a6 <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
8000467c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004680:	a3 68       	lsl	r8,0x2
80004682:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004686:	f2 08 00 08 	add	r8,r9,r8
8000468a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000468e:	a3 69       	lsl	r9,0x2
80004690:	ee fa ff d4 	ld.w	r10,r7[-44]
80004694:	f4 09 00 09 	add	r9,r10,r9
80004698:	72 09       	ld.w	r9,r9[0x0]
8000469a:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000469c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046a0:	2f f8       	sub	r8,-1
800046a2:	ef 68 ff f6 	st.b	r7[-10],r8
800046a6:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046aa:	30 28       	mov	r8,2
800046ac:	f0 09 18 00 	cp.b	r9,r8
800046b0:	fe 9a ff e6 	brle	8000467c <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800046b4:	30 08       	mov	r8,0
800046b6:	ef 68 ff f7 	st.b	r7[-9],r8
800046ba:	ca a8       	rjmp	8000480e <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800046bc:	30 08       	mov	r8,0
800046be:	ef 68 ff f6 	st.b	r7[-10],r8
800046c2:	c2 78       	rjmp	80004710 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800046c4:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800046c8:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800046cc:	12 98       	mov	r8,r9
800046ce:	a1 78       	lsl	r8,0x1
800046d0:	12 08       	add	r8,r9
800046d2:	a3 78       	lsl	r8,0x3
800046d4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800046d8:	f2 08 00 08 	add	r8,r9,r8
800046dc:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800046e0:	2f d9       	sub	r9,-3
800046e2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800046e6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ea:	a3 68       	lsl	r8,0x2
800046ec:	ee fb ff cc 	ld.w	r11,r7[-52]
800046f0:	f6 08 00 08 	add	r8,r11,r8
800046f4:	70 08       	ld.w	r8,r8[0x0]
800046f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800046fa:	f4 08 15 02 	lsl	r8,r10,0x2
800046fe:	ee 08 00 08 	add	r8,r7,r8
80004702:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004706:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000470a:	2f f8       	sub	r8,-1
8000470c:	ef 68 ff f6 	st.b	r7[-10],r8
80004710:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004714:	30 28       	mov	r8,2
80004716:	f0 09 18 00 	cp.b	r9,r8
8000471a:	fe 9a ff d5 	brle	800046c4 <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
8000471e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004722:	12 98       	mov	r8,r9
80004724:	a1 78       	lsl	r8,0x1
80004726:	12 08       	add	r8,r9
80004728:	a3 78       	lsl	r8,0x3
8000472a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000472e:	f2 08 00 08 	add	r8,r9,r8
80004732:	ee c9 00 18 	sub	r9,r7,24
80004736:	12 9b       	mov	r11,r9
80004738:	10 9c       	mov	r12,r8
8000473a:	fe b0 f0 67 	rcall	80002808 <scalar_product>
8000473e:	18 9a       	mov	r10,r12
80004740:	30 18       	mov	r8,1
80004742:	30 09       	mov	r9,0
80004744:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004748:	e0 8c 00 04 	brvs	80004750 <linearProgram3+0x200>
8000474c:	e0 89 00 03 	brgt	80004752 <linearProgram3+0x202>
80004750:	30 08       	mov	r8,0
80004752:	5c 58       	castu.b	r8
80004754:	c5 80       	breq	80004804 <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004756:	30 08       	mov	r8,0
80004758:	ef 68 ff f6 	st.b	r7[-10],r8
8000475c:	c1 58       	rjmp	80004786 <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
8000475e:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004762:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004766:	a3 69       	lsl	r9,0x2
80004768:	ee fa ff cc 	ld.w	r10,r7[-52]
8000476c:	f4 09 00 09 	add	r9,r10,r9
80004770:	72 09       	ld.w	r9,r9[0x0]
80004772:	a3 68       	lsl	r8,0x2
80004774:	ee 08 00 08 	add	r8,r7,r8
80004778:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000477c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004780:	2f f8       	sub	r8,-1
80004782:	ef 68 ff f6 	st.b	r7[-10],r8
80004786:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000478a:	30 28       	mov	r8,2
8000478c:	f0 09 18 00 	cp.b	r9,r8
80004790:	fe 9a ff e7 	brle	8000475e <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
80004794:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004798:	ef 2b ff f7 	ld.sb	r11,r7[-9]
8000479c:	1a d8       	st.w	--sp,r8
8000479e:	ee f8 ff cc 	ld.w	r8,r7[-52]
800047a2:	ee f9 ff d4 	ld.w	r9,r7[-44]
800047a6:	ee fa ff d0 	ld.w	r10,r7[-48]
800047aa:	ee fc ff d8 	ld.w	r12,r7[-40]
800047ae:	f0 16 01 86 	mcall	r6[1560]
800047b2:	2f fd       	sub	sp,-4
800047b4:	18 98       	mov	r8,r12
800047b6:	ec 18 00 01 	eorl	r8,0x1
800047ba:	5c 58       	castu.b	r8
800047bc:	c2 40       	breq	80004804 <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800047be:	30 08       	mov	r8,0
800047c0:	ef 68 ff f6 	st.b	r7[-10],r8
800047c4:	c1 48       	rjmp	800047ec <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800047c6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047ca:	a3 68       	lsl	r8,0x2
800047cc:	ee f9 ff cc 	ld.w	r9,r7[-52]
800047d0:	10 09       	add	r9,r8
800047d2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047d6:	a3 68       	lsl	r8,0x2
800047d8:	ee 08 00 08 	add	r8,r7,r8
800047dc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800047e0:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800047e2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047e6:	2f f8       	sub	r8,-1
800047e8:	ef 68 ff f6 	st.b	r7[-10],r8
800047ec:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047f0:	30 28       	mov	r8,2
800047f2:	f0 09 18 00 	cp.b	r9,r8
800047f6:	fe 9a ff e8 	brle	800047c6 <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
800047fa:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800047fe:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80004802:	c1 78       	rjmp	80004830 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
80004804:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004808:	2f f8       	sub	r8,-1
8000480a:	ef 68 ff f7 	st.b	r7[-9],r8
8000480e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004812:	ec f8 00 00 	ld.w	r8,r6[0]
80004816:	70 08       	ld.w	r8,r8[0x0]
80004818:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000481c:	10 39       	cp.w	r9,r8
8000481e:	fe 95 ff 4f 	brlt	800046bc <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
80004822:	ec f8 00 00 	ld.w	r8,r6[0]
80004826:	70 08       	ld.w	r8,r8[0x0]
80004828:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000482c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004830:	10 9c       	mov	r12,r8
80004832:	2f 2d       	sub	sp,-56
80004834:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004838:	80 00       	ld.sh	r0,r0[0x0]
8000483a:	43 e0       	lddsp	r0,sp[0xf8]

8000483c <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
8000483c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004840:	1a 97       	mov	r7,sp
80004842:	fa cd 01 ec 	sub	sp,sp,492
80004846:	fe f6 07 7a 	ld.w	r6,pc[1914]
8000484a:	1e 26       	rsub	r6,pc
8000484c:	ef 4c fe 20 	st.w	r7[-480],r12
80004850:	16 98       	mov	r8,r11
80004852:	ef 4a fe 18 	st.w	r7[-488],r10
80004856:	ef 49 fe 14 	st.w	r7[-492],r9
8000485a:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
8000485e:	30 08       	mov	r8,0
80004860:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004864:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004868:	ef 68 ff ee 	st.b	r7[-18],r8
8000486c:	e0 8f 03 9c 	bral	80004fa4 <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004870:	30 08       	mov	r8,0
80004872:	ef 68 ff ed 	st.b	r7[-19],r8
80004876:	c2 78       	rjmp	800048c4 <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004878:	ef 2a ff ed 	ld.sb	r10,r7[-19]
8000487c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004880:	12 98       	mov	r8,r9
80004882:	a1 78       	lsl	r8,0x1
80004884:	12 08       	add	r8,r9
80004886:	a3 78       	lsl	r8,0x3
80004888:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000488c:	f2 08 00 08 	add	r8,r9,r8
80004890:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004894:	2f d9       	sub	r9,-3
80004896:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000489a:	ef 28 ff ed 	ld.sb	r8,r7[-19]
8000489e:	a3 68       	lsl	r8,0x2
800048a0:	ee fb fe 14 	ld.w	r11,r7[-492]
800048a4:	f6 08 00 08 	add	r8,r11,r8
800048a8:	70 08       	ld.w	r8,r8[0x0]
800048aa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800048ae:	f4 08 15 02 	lsl	r8,r10,0x2
800048b2:	ee 08 00 08 	add	r8,r7,r8
800048b6:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800048ba:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800048be:	2f f8       	sub	r8,-1
800048c0:	ef 68 ff ed 	st.b	r7[-19],r8
800048c4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800048c8:	30 28       	mov	r8,2
800048ca:	f0 09 18 00 	cp.b	r9,r8
800048ce:	fe 9a ff d5 	brle	80004878 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800048d2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800048d6:	12 98       	mov	r8,r9
800048d8:	a1 78       	lsl	r8,0x1
800048da:	12 08       	add	r8,r9
800048dc:	a3 78       	lsl	r8,0x3
800048de:	ee f9 fe 20 	ld.w	r9,r7[-480]
800048e2:	f2 08 00 08 	add	r8,r9,r8
800048e6:	ee c9 01 88 	sub	r9,r7,392
800048ea:	12 9b       	mov	r11,r9
800048ec:	10 9c       	mov	r12,r8
800048ee:	fe b0 ef 8d 	rcall	80002808 <scalar_product>
800048f2:	18 9a       	mov	r10,r12
800048f4:	30 18       	mov	r8,1
800048f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800048fa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800048fe:	e0 8c 00 04 	brvs	80004906 <linearProgram4+0xca>
80004902:	e0 89 00 03 	brgt	80004908 <linearProgram4+0xcc>
80004906:	30 08       	mov	r8,0
80004908:	5c 58       	castu.b	r8
8000490a:	e0 80 03 48 	breq	80004f9a <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
8000490e:	30 08       	mov	r8,0
80004910:	ef 68 ff ef 	st.b	r7[-17],r8
80004914:	e0 8f 02 98 	bral	80004e44 <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004918:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000491c:	12 98       	mov	r8,r9
8000491e:	a1 78       	lsl	r8,0x1
80004920:	12 08       	add	r8,r9
80004922:	a3 78       	lsl	r8,0x3
80004924:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004928:	f2 08 00 08 	add	r8,r9,r8
8000492c:	70 1a       	ld.w	r10,r8[0x4]
8000492e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004932:	12 98       	mov	r8,r9
80004934:	a1 78       	lsl	r8,0x1
80004936:	12 08       	add	r8,r9
80004938:	a3 78       	lsl	r8,0x3
8000493a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000493e:	f2 08 00 08 	add	r8,r9,r8
80004942:	70 28       	ld.w	r8,r8[0x8]
80004944:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004948:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000494c:	12 98       	mov	r8,r9
8000494e:	a1 78       	lsl	r8,0x1
80004950:	12 08       	add	r8,r9
80004952:	a3 78       	lsl	r8,0x3
80004954:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004958:	f2 08 00 08 	add	r8,r9,r8
8000495c:	70 2b       	ld.w	r11,r8[0x8]
8000495e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004962:	12 98       	mov	r8,r9
80004964:	a1 78       	lsl	r8,0x1
80004966:	12 08       	add	r8,r9
80004968:	a3 78       	lsl	r8,0x3
8000496a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000496e:	f2 08 00 08 	add	r8,r9,r8
80004972:	70 18       	ld.w	r8,r8[0x4]
80004974:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004978:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000497c:	ef 48 fe 3c 	st.w	r7[-452],r8
80004980:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004984:	12 98       	mov	r8,r9
80004986:	a1 78       	lsl	r8,0x1
80004988:	12 08       	add	r8,r9
8000498a:	a3 78       	lsl	r8,0x3
8000498c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004990:	f2 08 00 08 	add	r8,r9,r8
80004994:	70 2a       	ld.w	r10,r8[0x8]
80004996:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000499a:	12 98       	mov	r8,r9
8000499c:	a1 78       	lsl	r8,0x1
8000499e:	12 08       	add	r8,r9
800049a0:	a3 78       	lsl	r8,0x3
800049a2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049a6:	f2 08 00 08 	add	r8,r9,r8
800049aa:	70 08       	ld.w	r8,r8[0x0]
800049ac:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800049b0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049b4:	12 98       	mov	r8,r9
800049b6:	a1 78       	lsl	r8,0x1
800049b8:	12 08       	add	r8,r9
800049ba:	a3 78       	lsl	r8,0x3
800049bc:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049c0:	f2 08 00 08 	add	r8,r9,r8
800049c4:	70 0b       	ld.w	r11,r8[0x0]
800049c6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049ca:	12 98       	mov	r8,r9
800049cc:	a1 78       	lsl	r8,0x1
800049ce:	12 08       	add	r8,r9
800049d0:	a3 78       	lsl	r8,0x3
800049d2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049d6:	f2 08 00 08 	add	r8,r9,r8
800049da:	70 28       	ld.w	r8,r8[0x8]
800049dc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800049e0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800049e4:	ef 48 fe 40 	st.w	r7[-448],r8
800049e8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049ec:	12 98       	mov	r8,r9
800049ee:	a1 78       	lsl	r8,0x1
800049f0:	12 08       	add	r8,r9
800049f2:	a3 78       	lsl	r8,0x3
800049f4:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049f8:	f2 08 00 08 	add	r8,r9,r8
800049fc:	70 0a       	ld.w	r10,r8[0x0]
800049fe:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a02:	12 98       	mov	r8,r9
80004a04:	a1 78       	lsl	r8,0x1
80004a06:	12 08       	add	r8,r9
80004a08:	a3 78       	lsl	r8,0x3
80004a0a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a0e:	f2 08 00 08 	add	r8,r9,r8
80004a12:	70 18       	ld.w	r8,r8[0x4]
80004a14:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a18:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a1c:	12 98       	mov	r8,r9
80004a1e:	a1 78       	lsl	r8,0x1
80004a20:	12 08       	add	r8,r9
80004a22:	a3 78       	lsl	r8,0x3
80004a24:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a28:	f2 08 00 08 	add	r8,r9,r8
80004a2c:	70 1b       	ld.w	r11,r8[0x4]
80004a2e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a32:	12 98       	mov	r8,r9
80004a34:	a1 78       	lsl	r8,0x1
80004a36:	12 08       	add	r8,r9
80004a38:	a3 78       	lsl	r8,0x3
80004a3a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a3e:	f2 08 00 08 	add	r8,r9,r8
80004a42:	70 08       	ld.w	r8,r8[0x0]
80004a44:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a48:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a4c:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004a50:	ee c8 01 c4 	sub	r8,r7,452
80004a54:	10 9c       	mov	r12,r8
80004a56:	fe b0 f0 a9 	rcall	80002ba8 <vector_norm_sqr>
80004a5a:	18 98       	mov	r8,r12
80004a5c:	10 9c       	mov	r12,r8
80004a5e:	f0 16 00 02 	mcall	r6[8]
80004a62:	14 98       	mov	r8,r10
80004a64:	16 99       	mov	r9,r11
80004a66:	30 05       	mov	r5,0
80004a68:	e0 6a 43 2d 	mov	r10,17197
80004a6c:	ea 1a eb 1c 	orh	r10,0xeb1c
80004a70:	e0 6b 36 e2 	mov	r11,14050
80004a74:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004a78:	f0 16 00 7f 	mcall	r6[508]
80004a7c:	18 98       	mov	r8,r12
80004a7e:	58 08       	cp.w	r8,0
80004a80:	c0 20       	breq	80004a84 <linearProgram4+0x248>
80004a82:	30 15       	mov	r5,1
80004a84:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004a88:	c6 50       	breq	80004b52 <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004a8a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8e:	12 98       	mov	r8,r9
80004a90:	a1 78       	lsl	r8,0x1
80004a92:	12 08       	add	r8,r9
80004a94:	a3 78       	lsl	r8,0x3
80004a96:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a9a:	f2 08 00 08 	add	r8,r9,r8
80004a9e:	10 9a       	mov	r10,r8
80004aa0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa4:	12 98       	mov	r8,r9
80004aa6:	a1 78       	lsl	r8,0x1
80004aa8:	12 08       	add	r8,r9
80004aaa:	a3 78       	lsl	r8,0x3
80004aac:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ab0:	f2 08 00 08 	add	r8,r9,r8
80004ab4:	14 9b       	mov	r11,r10
80004ab6:	10 9c       	mov	r12,r8
80004ab8:	fe b0 ee a8 	rcall	80002808 <scalar_product>
80004abc:	18 9a       	mov	r10,r12
80004abe:	30 18       	mov	r8,1
80004ac0:	30 09       	mov	r9,0
80004ac2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004ac6:	e0 8c 00 04 	brvs	80004ace <linearProgram4+0x292>
80004aca:	e0 89 00 03 	brgt	80004ad0 <linearProgram4+0x294>
80004ace:	30 08       	mov	r8,0
80004ad0:	5c 58       	castu.b	r8
80004ad2:	e0 81 01 b3 	brne	80004e38 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004ad6:	30 08       	mov	r8,0
80004ad8:	ef 68 ff ed 	st.b	r7[-19],r8
80004adc:	c3 38       	rjmp	80004b42 <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004ade:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004ae2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ae6:	12 98       	mov	r8,r9
80004ae8:	a1 78       	lsl	r8,0x1
80004aea:	12 08       	add	r8,r9
80004aec:	a3 78       	lsl	r8,0x3
80004aee:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004af2:	f2 08 00 08 	add	r8,r9,r8
80004af6:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004afa:	2f d9       	sub	r9,-3
80004afc:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004b00:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b04:	12 98       	mov	r8,r9
80004b06:	a1 78       	lsl	r8,0x1
80004b08:	12 08       	add	r8,r9
80004b0a:	a3 78       	lsl	r8,0x3
80004b0c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b10:	f2 08 00 08 	add	r8,r9,r8
80004b14:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004b18:	2f d9       	sub	r9,-3
80004b1a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b1e:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004b22:	fc 18 3f 00 	movh	r8,0x3f00
80004b26:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004b2a:	f4 c8 ff fd 	sub	r8,r10,-3
80004b2e:	a3 68       	lsl	r8,0x2
80004b30:	ee 08 00 08 	add	r8,r7,r8
80004b34:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004b38:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004b3c:	2f f8       	sub	r8,-1
80004b3e:	ef 68 ff ed 	st.b	r7[-19],r8
80004b42:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004b46:	30 28       	mov	r8,2
80004b48:	f0 09 18 00 	cp.b	r9,r8
80004b4c:	fe 9a ff c9 	brle	80004ade <linearProgram4+0x2a2>
80004b50:	c5 69       	rjmp	80004dfc <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004b52:	ee fa fe 40 	ld.w	r10,r7[-448]
80004b56:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b5a:	12 98       	mov	r8,r9
80004b5c:	a1 78       	lsl	r8,0x1
80004b5e:	12 08       	add	r8,r9
80004b60:	a3 78       	lsl	r8,0x3
80004b62:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b66:	f2 08 00 08 	add	r8,r9,r8
80004b6a:	70 28       	ld.w	r8,r8[0x8]
80004b6c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b70:	ee fb fe 44 	ld.w	r11,r7[-444]
80004b74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b78:	12 98       	mov	r8,r9
80004b7a:	a1 78       	lsl	r8,0x1
80004b7c:	12 08       	add	r8,r9
80004b7e:	a3 78       	lsl	r8,0x3
80004b80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b84:	f2 08 00 08 	add	r8,r9,r8
80004b88:	70 18       	ld.w	r8,r8[0x4]
80004b8a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b8e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b92:	ef 48 fe 30 	st.w	r7[-464],r8
80004b96:	ee fa fe 44 	ld.w	r10,r7[-444]
80004b9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b9e:	12 98       	mov	r8,r9
80004ba0:	a1 78       	lsl	r8,0x1
80004ba2:	12 08       	add	r8,r9
80004ba4:	a3 78       	lsl	r8,0x3
80004ba6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004baa:	f2 08 00 08 	add	r8,r9,r8
80004bae:	70 08       	ld.w	r8,r8[0x0]
80004bb0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bb4:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004bb8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bbc:	12 98       	mov	r8,r9
80004bbe:	a1 78       	lsl	r8,0x1
80004bc0:	12 08       	add	r8,r9
80004bc2:	a3 78       	lsl	r8,0x3
80004bc4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bc8:	f2 08 00 08 	add	r8,r9,r8
80004bcc:	70 28       	ld.w	r8,r8[0x8]
80004bce:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004bd2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004bd6:	ef 48 fe 34 	st.w	r7[-460],r8
80004bda:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004bde:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004be2:	12 98       	mov	r8,r9
80004be4:	a1 78       	lsl	r8,0x1
80004be6:	12 08       	add	r8,r9
80004be8:	a3 78       	lsl	r8,0x3
80004bea:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bee:	f2 08 00 08 	add	r8,r9,r8
80004bf2:	70 18       	ld.w	r8,r8[0x4]
80004bf4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bf8:	ee fb fe 40 	ld.w	r11,r7[-448]
80004bfc:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c00:	12 98       	mov	r8,r9
80004c02:	a1 78       	lsl	r8,0x1
80004c04:	12 08       	add	r8,r9
80004c06:	a3 78       	lsl	r8,0x3
80004c08:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c0c:	f2 08 00 08 	add	r8,r9,r8
80004c10:	70 08       	ld.w	r8,r8[0x0]
80004c12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c16:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c1a:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c1e:	30 08       	mov	r8,0
80004c20:	ef 68 ff ed 	st.b	r7[-19],r8
80004c24:	c2 e8       	rjmp	80004c80 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004c26:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004c2a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c2e:	12 98       	mov	r8,r9
80004c30:	a1 78       	lsl	r8,0x1
80004c32:	12 08       	add	r8,r9
80004c34:	a3 78       	lsl	r8,0x3
80004c36:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c3a:	f2 08 00 08 	add	r8,r9,r8
80004c3e:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c42:	2f d9       	sub	r9,-3
80004c44:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c48:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c4c:	12 98       	mov	r8,r9
80004c4e:	a1 78       	lsl	r8,0x1
80004c50:	12 08       	add	r8,r9
80004c52:	a3 78       	lsl	r8,0x3
80004c54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c58:	f2 08 00 08 	add	r8,r9,r8
80004c5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c60:	2f d9       	sub	r9,-3
80004c62:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c66:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004c6a:	f4 08 15 02 	lsl	r8,r10,0x2
80004c6e:	ee 08 00 08 	add	r8,r7,r8
80004c72:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c76:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c7a:	2f f8       	sub	r8,-1
80004c7c:	ef 68 ff ed 	st.b	r7[-19],r8
80004c80:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c84:	30 28       	mov	r8,2
80004c86:	f0 09 18 00 	cp.b	r9,r8
80004c8a:	fe 9a ff ce 	brle	80004c26 <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004c8e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c92:	12 98       	mov	r8,r9
80004c94:	a1 78       	lsl	r8,0x1
80004c96:	12 08       	add	r8,r9
80004c98:	a3 78       	lsl	r8,0x3
80004c9a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c9e:	f2 08 00 08 	add	r8,r9,r8
80004ca2:	10 99       	mov	r9,r8
80004ca4:	ee c8 01 dc 	sub	r8,r7,476
80004ca8:	12 9b       	mov	r11,r9
80004caa:	10 9c       	mov	r12,r8
80004cac:	fe b0 ed ae 	rcall	80002808 <scalar_product>
80004cb0:	18 98       	mov	r8,r12
80004cb2:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004cb6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004cba:	12 98       	mov	r8,r9
80004cbc:	a1 78       	lsl	r8,0x1
80004cbe:	12 08       	add	r8,r9
80004cc0:	a3 78       	lsl	r8,0x3
80004cc2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cc6:	f2 08 00 08 	add	r8,r9,r8
80004cca:	10 99       	mov	r9,r8
80004ccc:	ee c8 01 d0 	sub	r8,r7,464
80004cd0:	12 9b       	mov	r11,r9
80004cd2:	10 9c       	mov	r12,r8
80004cd4:	fe b0 ed 9a 	rcall	80002808 <scalar_product>
80004cd8:	18 98       	mov	r8,r12
80004cda:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004cde:	30 08       	mov	r8,0
80004ce0:	ef 68 ff ed 	st.b	r7[-19],r8
80004ce4:	c5 78       	rjmp	80004d92 <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004ce6:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004cea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cee:	12 98       	mov	r8,r9
80004cf0:	a1 78       	lsl	r8,0x1
80004cf2:	12 08       	add	r8,r9
80004cf4:	a3 78       	lsl	r8,0x3
80004cf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cfa:	f2 08 00 08 	add	r8,r9,r8
80004cfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d02:	2f d9       	sub	r9,-3
80004d04:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004d08:	ee fb ff f8 	ld.w	r11,r7[-8]
80004d0c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004d10:	f0 16 00 0a 	mcall	r6[40]
80004d14:	18 98       	mov	r8,r12
80004d16:	10 99       	mov	r9,r8
80004d18:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004d1c:	a3 68       	lsl	r8,0x2
80004d1e:	ee 08 00 08 	add	r8,r7,r8
80004d22:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004d26:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004d2a:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004d2e:	ea c8 ff fd 	sub	r8,r5,-3
80004d32:	a3 68       	lsl	r8,0x2
80004d34:	ee 08 00 08 	add	r8,r7,r8
80004d38:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004d3c:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d40:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d44:	12 98       	mov	r8,r9
80004d46:	a1 78       	lsl	r8,0x1
80004d48:	12 08       	add	r8,r9
80004d4a:	a3 78       	lsl	r8,0x3
80004d4c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d50:	f2 08 00 08 	add	r8,r9,r8
80004d54:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d58:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d5c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d60:	12 98       	mov	r8,r9
80004d62:	a1 78       	lsl	r8,0x1
80004d64:	12 08       	add	r8,r9
80004d66:	a3 78       	lsl	r8,0x3
80004d68:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d6c:	f2 08 00 08 	add	r8,r9,r8
80004d70:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d78:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d7c:	f4 08 15 02 	lsl	r8,r10,0x2
80004d80:	ee 08 00 08 	add	r8,r7,r8
80004d84:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004d88:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d8c:	2f f8       	sub	r8,-1
80004d8e:	ef 68 ff ed 	st.b	r7[-19],r8
80004d92:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d96:	30 28       	mov	r8,2
80004d98:	f0 09 18 00 	cp.b	r9,r8
80004d9c:	fe 9a ff a5 	brle	80004ce6 <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004da0:	ee c8 01 b8 	sub	r8,r7,440
80004da4:	10 9c       	mov	r12,r8
80004da6:	fe b0 ef 19 	rcall	80002bd8 <vector_norm>
80004daa:	18 98       	mov	r8,r12
80004dac:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004db0:	30 08       	mov	r8,0
80004db2:	ef 68 ff ed 	st.b	r7[-19],r8
80004db6:	c1 c8       	rjmp	80004dee <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004db8:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004dbc:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004dc0:	a3 68       	lsl	r8,0x2
80004dc2:	ee 08 00 08 	add	r8,r7,r8
80004dc6:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004dca:	ee fb ff fc 	ld.w	r11,r7[-4]
80004dce:	10 9c       	mov	r12,r8
80004dd0:	f0 16 00 0a 	mcall	r6[40]
80004dd4:	18 98       	mov	r8,r12
80004dd6:	10 99       	mov	r9,r8
80004dd8:	ea 08 15 02 	lsl	r8,r5,0x2
80004ddc:	ee 08 00 08 	add	r8,r7,r8
80004de0:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004de4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004de8:	2f f8       	sub	r8,-1
80004dea:	ef 68 ff ed 	st.b	r7[-19],r8
80004dee:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004df2:	30 28       	mov	r8,2
80004df4:	f0 09 18 00 	cp.b	r9,r8
80004df8:	fe 9a ff e0 	brle	80004db8 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004dfc:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e00:	12 98       	mov	r8,r9
80004e02:	a1 78       	lsl	r8,0x1
80004e04:	12 08       	add	r8,r9
80004e06:	a3 78       	lsl	r8,0x3
80004e08:	ee 08 00 08 	add	r8,r7,r8
80004e0c:	f0 c8 01 7c 	sub	r8,r8,380
80004e10:	10 9a       	mov	r10,r8
80004e12:	ee cb 01 b8 	sub	r11,r7,440
80004e16:	f4 c8 00 00 	sub	r8,r10,0
80004e1a:	f6 c9 00 00 	sub	r9,r11,0
80004e1e:	72 0c       	ld.w	r12,r9[0x0]
80004e20:	91 0c       	st.w	r8[0x0],r12
80004e22:	72 1c       	ld.w	r12,r9[0x4]
80004e24:	91 1c       	st.w	r8[0x4],r12
80004e26:	72 2c       	ld.w	r12,r9[0x8]
80004e28:	91 2c       	st.w	r8[0x8],r12
80004e2a:	72 39       	ld.w	r9,r9[0xc]
80004e2c:	91 39       	st.w	r8[0xc],r9
80004e2e:	f6 e8 00 10 	ld.d	r8,r11[16]
80004e32:	f4 e9 00 10 	st.d	r10[16],r8
80004e36:	c0 28       	rjmp	80004e3a <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004e38:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004e3a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004e3e:	2f f8       	sub	r8,-1
80004e40:	ef 68 ff ef 	st.b	r7[-17],r8
80004e44:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004e48:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004e4c:	f0 09 18 00 	cp.b	r9,r8
80004e50:	fe 95 fd 64 	brlt	80004918 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e54:	30 08       	mov	r8,0
80004e56:	ef 68 ff ed 	st.b	r7[-19],r8
80004e5a:	c1 58       	rjmp	80004e84 <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004e5c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e60:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e64:	a3 69       	lsl	r9,0x2
80004e66:	ee fa fe 14 	ld.w	r10,r7[-492]
80004e6a:	f4 09 00 09 	add	r9,r10,r9
80004e6e:	72 09       	ld.w	r9,r9[0x0]
80004e70:	a3 68       	lsl	r8,0x2
80004e72:	ee 08 00 08 	add	r8,r7,r8
80004e76:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e7a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e7e:	2f f8       	sub	r8,-1
80004e80:	ef 68 ff ed 	st.b	r7[-19],r8
80004e84:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e88:	30 28       	mov	r8,2
80004e8a:	f0 09 18 00 	cp.b	r9,r8
80004e8e:	fe 9a ff e7 	brle	80004e5c <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004e92:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e96:	12 98       	mov	r8,r9
80004e98:	a1 78       	lsl	r8,0x1
80004e9a:	12 08       	add	r8,r9
80004e9c:	a3 78       	lsl	r8,0x3
80004e9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ea2:	f2 08 00 08 	add	r8,r9,r8
80004ea6:	10 9b       	mov	r11,r8
80004ea8:	ee cc 01 7c 	sub	r12,r7,380
80004eac:	30 18       	mov	r8,1
80004eae:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004eb2:	ee fa fe 18 	ld.w	r10,r7[-488]
80004eb6:	f0 16 01 10 	mcall	r6[1088]
80004eba:	18 9a       	mov	r10,r12
80004ebc:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004ec0:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004ec4:	30 18       	mov	r8,1
80004ec6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004eca:	e0 8c 00 03 	brvs	80004ed0 <linearProgram4+0x694>
80004ece:	c0 25       	brlt	80004ed2 <linearProgram4+0x696>
80004ed0:	30 08       	mov	r8,0
80004ed2:	5c 58       	castu.b	r8
80004ed4:	c1 f0       	breq	80004f12 <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004ed6:	30 08       	mov	r8,0
80004ed8:	ef 68 ff ed 	st.b	r7[-19],r8
80004edc:	c1 48       	rjmp	80004f04 <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004ede:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ee2:	a3 68       	lsl	r8,0x2
80004ee4:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ee8:	10 09       	add	r9,r8
80004eea:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004eee:	a3 68       	lsl	r8,0x2
80004ef0:	ee 08 00 08 	add	r8,r7,r8
80004ef4:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80004ef8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80004efa:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004efe:	2f f8       	sub	r8,-1
80004f00:	ef 68 ff ed 	st.b	r7[-19],r8
80004f04:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f08:	30 28       	mov	r8,2
80004f0a:	f0 09 18 00 	cp.b	r9,r8
80004f0e:	fe 9a ff e8 	brle	80004ede <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f12:	30 08       	mov	r8,0
80004f14:	ef 68 ff ed 	st.b	r7[-19],r8
80004f18:	c2 78       	rjmp	80004f66 <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004f1a:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004f1e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f22:	12 98       	mov	r8,r9
80004f24:	a1 78       	lsl	r8,0x1
80004f26:	12 08       	add	r8,r9
80004f28:	a3 78       	lsl	r8,0x3
80004f2a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f2e:	f2 08 00 08 	add	r8,r9,r8
80004f32:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f36:	2f d9       	sub	r9,-3
80004f38:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004f3c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f40:	a3 68       	lsl	r8,0x2
80004f42:	ee fb fe 14 	ld.w	r11,r7[-492]
80004f46:	f6 08 00 08 	add	r8,r11,r8
80004f4a:	70 08       	ld.w	r8,r8[0x0]
80004f4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004f50:	f4 08 15 02 	lsl	r8,r10,0x2
80004f54:	ee 08 00 08 	add	r8,r7,r8
80004f58:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f5c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f60:	2f f8       	sub	r8,-1
80004f62:	ef 68 ff ed 	st.b	r7[-19],r8
80004f66:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f6a:	30 28       	mov	r8,2
80004f6c:	f0 09 18 00 	cp.b	r9,r8
80004f70:	fe 9a ff d5 	brle	80004f1a <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
80004f74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f78:	12 98       	mov	r8,r9
80004f7a:	a1 78       	lsl	r8,0x1
80004f7c:	12 08       	add	r8,r9
80004f7e:	a3 78       	lsl	r8,0x3
80004f80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f84:	f2 08 00 08 	add	r8,r9,r8
80004f88:	ee c9 01 a0 	sub	r9,r7,416
80004f8c:	12 9b       	mov	r11,r9
80004f8e:	10 9c       	mov	r12,r8
80004f90:	fe b0 ec 3c 	rcall	80002808 <scalar_product>
80004f94:	18 98       	mov	r8,r12
80004f96:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004f9a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f9e:	2f f8       	sub	r8,-1
80004fa0:	ef 68 ff ee 	st.b	r7[-18],r8
80004fa4:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004fa8:	ec f8 00 00 	ld.w	r8,r6[0]
80004fac:	70 08       	ld.w	r8,r8[0x0]
80004fae:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004fb2:	10 39       	cp.w	r9,r8
80004fb4:	fe 95 fc 5e 	brlt	80004870 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
80004fb8:	28 5d       	sub	sp,-492
80004fba:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004fbe:	00 00       	add	r0,r0
80004fc0:	80 00       	ld.sh	r0,r0[0x0]
80004fc2:	46 ce       	lddsp	lr,sp[0x1b0]

80004fc4 <clip>:


static float inline clip(float input_value, float clip_value) {
80004fc4:	eb cd 40 80 	pushm	r7,lr
80004fc8:	1a 97       	mov	r7,sp
80004fca:	20 2d       	sub	sp,8
80004fcc:	ef 4c ff fc 	st.w	r7[-4],r12
80004fd0:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
80004fd4:	30 18       	mov	r8,1
80004fd6:	ee fa ff fc 	ld.w	r10,r7[-4]
80004fda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fde:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fe2:	e0 8c 00 04 	brvs	80004fea <clip+0x26>
80004fe6:	e0 89 00 03 	brgt	80004fec <clip+0x28>
80004fea:	30 08       	mov	r8,0
80004fec:	5c 58       	castu.b	r8
80004fee:	c0 40       	breq	80004ff6 <clip+0x32>
80004ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ff4:	c1 98       	rjmp	80005026 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
80004ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ffa:	10 9a       	mov	r10,r8
80004ffc:	ee 1a 80 00 	eorh	r10,0x8000
80005000:	30 18       	mov	r8,1
80005002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005006:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000500a:	e0 8c 00 04 	brvs	80005012 <clip+0x4e>
8000500e:	e0 89 00 03 	brgt	80005014 <clip+0x50>
80005012:	30 08       	mov	r8,0
80005014:	5c 58       	castu.b	r8
80005016:	c0 60       	breq	80005022 <clip+0x5e>
80005018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000501c:	ee 18 80 00 	eorh	r8,0x8000
80005020:	c0 38       	rjmp	80005026 <clip+0x62>
	return input_value;
80005022:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005026:	10 9c       	mov	r12,r8
80005028:	2f ed       	sub	sp,-8
8000502a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000502e <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
8000502e:	eb cd 40 e0 	pushm	r5-r7,lr
80005032:	1a 97       	mov	r7,sp
80005034:	20 2d       	sub	sp,8
80005036:	4a 16       	lddpc	r6,800050b8 <soft_zone+0x8a>
80005038:	1e 26       	rsub	r6,pc
8000503a:	ef 4c ff fc 	st.w	r7[-4],r12
8000503e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
80005042:	ee fc ff f8 	ld.w	r12,r7[-8]
80005046:	f0 16 00 02 	mcall	r6[8]
8000504a:	30 05       	mov	r5,0
8000504c:	e0 68 af 48 	mov	r8,44872
80005050:	ea 18 9a bc 	orh	r8,0x9abc
80005054:	e0 69 d7 f2 	mov	r9,55282
80005058:	ea 19 3e 7a 	orh	r9,0x3e7a
8000505c:	f0 16 00 1e 	mcall	r6[120]
80005060:	18 98       	mov	r8,r12
80005062:	58 08       	cp.w	r8,0
80005064:	c0 20       	breq	80005068 <soft_zone+0x3a>
80005066:	30 15       	mov	r5,1
80005068:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000506c:	c0 40       	breq	80005074 <soft_zone+0x46>
8000506e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005072:	c1 e8       	rjmp	800050ae <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
80005074:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005084:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005088:	ee fa ff f8 	ld.w	r10,r7[-8]
8000508c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005090:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005094:	ee fb ff fc 	ld.w	r11,r7[-4]
80005098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509c:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800050a0:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800050a4:	12 9b       	mov	r11,r9
800050a6:	10 9c       	mov	r12,r8
800050a8:	f0 16 00 0a 	mcall	r6[40]
800050ac:	18 98       	mov	r8,r12
	}
};
800050ae:	10 9c       	mov	r12,r8
800050b0:	2f ed       	sub	sp,-8
800050b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800050b6:	00 00       	add	r0,r0
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	4e bc       	lddpc	r12,80005264 <differentiate+0x22>

800050bc <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
800050bc:	eb cd 40 e0 	pushm	r5-r7,lr
800050c0:	1a 97       	mov	r7,sp
800050c2:	21 1d       	sub	sp,68
800050c4:	49 e6       	lddpc	r6,8000513c <passthroughController+0x80>
800050c6:	1e 26       	rsub	r6,pc
800050c8:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
800050ca:	fc 18 3f 80 	movh	r8,0x3f80
800050ce:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
800050d2:	f0 16 00 2d 	mcall	r6[180]
800050d6:	18 98       	mov	r8,r12
800050d8:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
800050dc:	e0 68 40 00 	mov	r8,16384
800050e0:	ea 18 c6 1c 	orh	r8,0xc61c
800050e4:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
800050e8:	e0 68 40 00 	mov	r8,16384
800050ec:	ea 18 46 1c 	orh	r8,0x461c
800050f0:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
800050f4:	30 08       	mov	r8,0
800050f6:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
800050fa:	30 08       	mov	r8,0
800050fc:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
80005100:	ee c8 00 44 	sub	r8,r7,68
80005104:	2e 08       	sub	r8,-32
80005106:	30 09       	mov	r9,0
80005108:	30 0a       	mov	r10,0
8000510a:	30 0b       	mov	r11,0
8000510c:	10 9c       	mov	r12,r8
8000510e:	f0 16 00 51 	mcall	r6[324]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
80005112:	ee c8 00 44 	sub	r8,r7,68
80005116:	2f 48       	sub	r8,-12
80005118:	30 09       	mov	r9,0
8000511a:	30 0a       	mov	r10,0
8000511c:	30 0b       	mov	r11,0
8000511e:	10 9c       	mov	r12,r8
80005120:	f0 16 00 53 	mcall	r6[332]
	return out;
80005124:	0a 98       	mov	r8,r5
80005126:	ee c9 00 44 	sub	r9,r7,68
8000512a:	34 4a       	mov	r10,68
8000512c:	12 9b       	mov	r11,r9
8000512e:	10 9c       	mov	r12,r8
80005130:	f0 16 00 1b 	mcall	r6[108]
}
80005134:	0a 9c       	mov	r12,r5
80005136:	2e fd       	sub	sp,-68
80005138:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	4f 4a       	lddpc	r10,8000530c <pid_update+0x28>

80005140 <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
80005140:	eb cd 40 c0 	pushm	r6-r7,lr
80005144:	1a 97       	mov	r7,sp
80005146:	20 3d       	sub	sp,12
80005148:	49 76       	lddpc	r6,800051a4 <integrate+0x64>
8000514a:	1e 26       	rsub	r6,pc
8000514c:	ef 4c ff fc 	st.w	r7[-4],r12
80005150:	ef 4b ff f8 	st.w	r7[-8],r11
80005154:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
80005158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000515c:	70 39       	ld.w	r9,r8[0xc]
8000515e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005162:	70 2a       	ld.w	r10,r8[0x8]
80005164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005168:	70 0b       	ld.w	r11,r8[0x0]
8000516a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000516e:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
80005172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005176:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000517a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000517e:	12 9b       	mov	r11,r9
80005180:	10 9c       	mov	r12,r8
80005182:	c2 1f       	rcall	80004fc4 <clip>
80005184:	18 99       	mov	r9,r12
80005186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518a:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
8000518c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005190:	70 19       	ld.w	r9,r8[0x4]
80005192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005196:	70 28       	ld.w	r8,r8[0x8]
80005198:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
8000519c:	10 9c       	mov	r12,r8
8000519e:	2f dd       	sub	sp,-12
800051a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800051a4:	80 00       	ld.sh	r0,r0[0x0]
800051a6:	4f ce       	lddpc	lr,80005394 <pid_update+0xb0>

800051a8 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
800051a8:	eb cd 40 80 	pushm	r7,lr
800051ac:	1a 97       	mov	r7,sp
800051ae:	20 4d       	sub	sp,16
800051b0:	ef 4c ff fc 	st.w	r7[-4],r12
800051b4:	ef 4b ff f8 	st.w	r7[-8],r11
800051b8:	ef 4a ff f4 	st.w	r7[-12],r10
800051bc:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
800051c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051c8:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
800051ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051d2:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
800051d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800051dc:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
800051de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051e2:	30 09       	mov	r9,0
800051e4:	91 29       	st.w	r8[0x8],r9

}
800051e6:	2f cd       	sub	sp,-16
800051e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800051ec <resetInt>:
void resetInt(Integrator_t *integrator) {
800051ec:	eb cd 40 80 	pushm	r7,lr
800051f0:	1a 97       	mov	r7,sp
800051f2:	20 1d       	sub	sp,4
800051f4:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
800051f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051fc:	30 09       	mov	r9,0
800051fe:	91 29       	st.w	r8[0x8],r9
}
80005200:	2f fd       	sub	sp,-4
80005202:	e3 cd 80 80 	ldm	sp++,r7,pc

80005206 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80005206:	eb cd 40 80 	pushm	r7,lr
8000520a:	1a 97       	mov	r7,sp
8000520c:	20 4d       	sub	sp,16
8000520e:	ef 4c ff fc 	st.w	r7[-4],r12
80005212:	ef 4b ff f8 	st.w	r7[-8],r11
80005216:	ef 4a ff f4 	st.w	r7[-12],r10
8000521a:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
8000521e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005226:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
80005228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000522c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005230:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
80005232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005236:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000523a:	91 39       	st.w	r8[0xc],r9
}
8000523c:	2f cd       	sub	sp,-16
8000523e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005242 <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
80005242:	eb cd 40 e0 	pushm	r5-r7,lr
80005246:	1a 97       	mov	r7,sp
80005248:	20 4d       	sub	sp,16
8000524a:	4a 66       	lddpc	r6,800052e0 <differentiate+0x9e>
8000524c:	1e 26       	rsub	r6,pc
8000524e:	ef 4c ff f8 	st.w	r7[-8],r12
80005252:	ef 4b ff f4 	st.w	r7[-12],r11
80005256:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
8000525a:	30 08       	mov	r8,0
8000525c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
80005260:	ee fc ff f0 	ld.w	r12,r7[-16]
80005264:	f0 16 00 02 	mcall	r6[8]
80005268:	30 05       	mov	r5,0
8000526a:	e0 68 ed 8d 	mov	r8,60813
8000526e:	ea 18 a0 b5 	orh	r8,0xa0b5
80005272:	e0 69 c6 f7 	mov	r9,50935
80005276:	ea 19 3e b0 	orh	r9,0x3eb0
8000527a:	f0 16 00 1e 	mcall	r6[120]
8000527e:	18 98       	mov	r8,r12
80005280:	58 08       	cp.w	r8,0
80005282:	c0 20       	breq	80005286 <differentiate+0x44>
80005284:	30 15       	mov	r5,1
80005286:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000528a:	c0 50       	breq	80005294 <differentiate+0x52>
		output=0.0; 
8000528c:	30 08       	mov	r8,0
8000528e:	ef 48 ff fc 	st.w	r7[-4],r8
80005292:	c1 c8       	rjmp	800052ca <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80005294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005298:	70 35       	ld.w	r5,r8[0xc]
8000529a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000529e:	70 09       	ld.w	r9,r8[0x0]
800052a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052a4:	70 18       	ld.w	r8,r8[0x4]
800052a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800052aa:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800052ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800052b2:	ee fb ff f0 	ld.w	r11,r7[-16]
800052b6:	10 9c       	mov	r12,r8
800052b8:	f0 16 00 0a 	mcall	r6[40]
800052bc:	18 98       	mov	r8,r12
800052be:	0a 9b       	mov	r11,r5
800052c0:	10 9c       	mov	r12,r8
800052c2:	c8 1e       	rcall	80004fc4 <clip>
800052c4:	18 98       	mov	r8,r12
800052c6:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
800052ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800052d2:	91 19       	st.w	r8[0x4],r9
	return output;
800052d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800052d8:	10 9c       	mov	r12,r8
800052da:	2f cd       	sub	sp,-16
800052dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052e0:	80 00       	ld.sh	r0,r0[0x0]
800052e2:	50 d0       	stdsp	sp[0x34],r0

800052e4 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
800052e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800052e8:	1a 97       	mov	r7,sp
800052ea:	20 3d       	sub	sp,12
800052ec:	4c 36       	lddpc	r6,800053f8 <pid_update+0x114>
800052ee:	1e 26       	rsub	r6,pc
800052f0:	ef 4c ff f8 	st.w	r7[-8],r12
800052f4:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
800052f8:	f0 16 00 2d 	mcall	r6[180]
800052fc:	18 98       	mov	r8,r12
800052fe:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
80005302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005306:	71 08       	ld.w	r8,r8[0x40]
80005308:	10 9b       	mov	r11,r8
8000530a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000530e:	c9 0e       	rcall	8000502e <soft_zone>
80005310:	18 99       	mov	r9,r12
80005312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005316:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
80005318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000531c:	70 e8       	ld.w	r8,r8[0x38]
8000531e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005322:	f2 08 01 08 	sub	r8,r9,r8
80005326:	10 9c       	mov	r12,r8
80005328:	f0 16 00 bb 	mcall	r6[748]
8000532c:	18 99       	mov	r9,r12
8000532e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005332:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
80005334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000533c:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
8000533e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005342:	70 05       	ld.w	r5,r8[0x0]
80005344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005348:	70 d3       	ld.w	r3,r8[0x34]
8000534a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000534e:	70 fa       	ld.w	r10,r8[0x3c]
80005350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005354:	70 d9       	ld.w	r9,r8[0x34]
80005356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535a:	2f 48       	sub	r8,-12
8000535c:	12 9b       	mov	r11,r9
8000535e:	10 9c       	mov	r12,r8
80005360:	f0 16 00 df 	mcall	r6[892]
80005364:	18 98       	mov	r8,r12
80005366:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
8000536a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000536e:	70 fa       	ld.w	r10,r8[0x3c]
80005370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005374:	70 d9       	ld.w	r9,r8[0x34]
80005376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000537a:	2e 08       	sub	r8,-32
8000537c:	12 9b       	mov	r11,r9
8000537e:	10 9c       	mov	r12,r8
80005380:	f0 16 01 0d 	mcall	r6[1076]
80005384:	18 98       	mov	r8,r12
80005386:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000538a:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000538e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005392:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005398:	70 ca       	ld.w	r10,r8[0x30]
8000539a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539e:	70 19       	ld.w	r9,r8[0x4]
800053a0:	30 18       	mov	r8,1
800053a2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053a6:	e0 8c 00 03 	brvs	800053ac <pid_update+0xc8>
800053aa:	c0 25       	brlt	800053ae <pid_update+0xca>
800053ac:	30 08       	mov	r8,0
800053ae:	5c 58       	castu.b	r8
800053b0:	c0 70       	breq	800053be <pid_update+0xda>
800053b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b6:	70 19       	ld.w	r9,r8[0x4]
800053b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053bc:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800053be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c2:	70 ca       	ld.w	r10,r8[0x30]
800053c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c8:	70 29       	ld.w	r9,r8[0x8]
800053ca:	30 18       	mov	r8,1
800053cc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053d0:	e0 8c 00 04 	brvs	800053d8 <pid_update+0xf4>
800053d4:	e0 89 00 03 	brgt	800053da <pid_update+0xf6>
800053d8:	30 08       	mov	r8,0
800053da:	5c 58       	castu.b	r8
800053dc:	c0 70       	breq	800053ea <pid_update+0x106>
800053de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e2:	70 29       	ld.w	r9,r8[0x8]
800053e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e8:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800053ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ee:	70 c8       	ld.w	r8,r8[0x30]
}
800053f0:	10 9c       	mov	r12,r8
800053f2:	2f dd       	sub	sp,-12
800053f4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	51 72       	stdsp	sp[0x5c],r2

800053fc <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
800053fc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005400:	1a 97       	mov	r7,sp
80005402:	20 3d       	sub	sp,12
80005404:	4b b6       	lddpc	r6,800054f0 <pid_update_dt+0xf4>
80005406:	1e 26       	rsub	r6,pc
80005408:	ef 4c ff fc 	st.w	r7[-4],r12
8000540c:	ef 4b ff f8 	st.w	r7[-8],r11
80005410:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
80005414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005418:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000541c:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
8000541e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005422:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005426:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
80005428:	f0 16 00 2d 	mcall	r6[180]
8000542c:	18 99       	mov	r9,r12
8000542e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005432:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
80005434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005438:	70 05       	ld.w	r5,r8[0x0]
8000543a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000543e:	70 d3       	ld.w	r3,r8[0x34]
80005440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005444:	70 fa       	ld.w	r10,r8[0x3c]
80005446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000544a:	70 d9       	ld.w	r9,r8[0x34]
8000544c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005450:	2f 48       	sub	r8,-12
80005452:	12 9b       	mov	r11,r9
80005454:	10 9c       	mov	r12,r8
80005456:	f0 16 00 df 	mcall	r6[892]
8000545a:	18 98       	mov	r8,r12
8000545c:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	70 fa       	ld.w	r10,r8[0x3c]
80005466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546a:	70 d9       	ld.w	r9,r8[0x34]
8000546c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005470:	2e 08       	sub	r8,-32
80005472:	12 9b       	mov	r11,r9
80005474:	10 9c       	mov	r12,r8
80005476:	f0 16 01 0d 	mcall	r6[1076]
8000547a:	18 98       	mov	r8,r12
8000547c:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005480:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005488:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
8000548a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000548e:	70 ca       	ld.w	r10,r8[0x30]
80005490:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005494:	70 19       	ld.w	r9,r8[0x4]
80005496:	30 18       	mov	r8,1
80005498:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000549c:	e0 8c 00 03 	brvs	800054a2 <pid_update_dt+0xa6>
800054a0:	c0 25       	brlt	800054a4 <pid_update_dt+0xa8>
800054a2:	30 08       	mov	r8,0
800054a4:	5c 58       	castu.b	r8
800054a6:	c0 70       	breq	800054b4 <pid_update_dt+0xb8>
800054a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054ac:	70 19       	ld.w	r9,r8[0x4]
800054ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b2:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800054b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b8:	70 ca       	ld.w	r10,r8[0x30]
800054ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054be:	70 29       	ld.w	r9,r8[0x8]
800054c0:	30 18       	mov	r8,1
800054c2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800054c6:	e0 8c 00 04 	brvs	800054ce <pid_update_dt+0xd2>
800054ca:	e0 89 00 03 	brgt	800054d0 <pid_update_dt+0xd4>
800054ce:	30 08       	mov	r8,0
800054d0:	5c 58       	castu.b	r8
800054d2:	c0 70       	breq	800054e0 <pid_update_dt+0xe4>
800054d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054d8:	70 29       	ld.w	r9,r8[0x8]
800054da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054de:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800054e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054e4:	70 c8       	ld.w	r8,r8[0x30]
}
800054e6:	10 9c       	mov	r12,r8
800054e8:	2f dd       	sub	sp,-12
800054ea:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800054ee:	00 00       	add	r0,r0
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	52 8a       	stdsp	sp[0xa0],r10

800054f4 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
800054f4:	eb cd 40 e0 	pushm	r5-r7,lr
800054f8:	1a 97       	mov	r7,sp
800054fa:	20 2d       	sub	sp,8
800054fc:	4b 56       	lddpc	r6,800055d0 <calc_smaller_angle+0xdc>
800054fe:	1e 26       	rsub	r6,pc
80005500:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
80005504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005508:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
8000550c:	c1 88       	rjmp	8000553c <calc_smaller_angle+0x48>
8000550e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005512:	f0 16 00 02 	mcall	r6[8]
80005516:	e0 68 2d 18 	mov	r8,11544
8000551a:	ea 18 54 44 	orh	r8,0x5444
8000551e:	e0 69 21 fb 	mov	r9,8699
80005522:	ea 19 40 19 	orh	r9,0x4019
80005526:	f0 16 00 05 	mcall	r6[20]
8000552a:	14 98       	mov	r8,r10
8000552c:	16 99       	mov	r9,r11
8000552e:	10 9a       	mov	r10,r8
80005530:	12 9b       	mov	r11,r9
80005532:	f0 16 00 08 	mcall	r6[32]
80005536:	18 98       	mov	r8,r12
80005538:	ef 48 ff fc 	st.w	r7[-4],r8
8000553c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005540:	f0 16 00 02 	mcall	r6[8]
80005544:	30 05       	mov	r5,0
80005546:	e0 68 2d 18 	mov	r8,11544
8000554a:	ea 18 54 44 	orh	r8,0x5444
8000554e:	e0 69 21 fb 	mov	r9,8699
80005552:	ea 19 c0 09 	orh	r9,0xc009
80005556:	f0 16 00 1e 	mcall	r6[120]
8000555a:	18 98       	mov	r8,r12
8000555c:	58 08       	cp.w	r8,0
8000555e:	c0 20       	breq	80005562 <calc_smaller_angle+0x6e>
80005560:	30 15       	mov	r5,1
80005562:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005566:	cd 41       	brne	8000550e <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
80005568:	c1 88       	rjmp	80005598 <calc_smaller_angle+0xa4>
8000556a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000556e:	f0 16 00 02 	mcall	r6[8]
80005572:	e0 68 2d 18 	mov	r8,11544
80005576:	ea 18 54 44 	orh	r8,0x5444
8000557a:	e0 69 21 fb 	mov	r9,8699
8000557e:	ea 19 40 19 	orh	r9,0x4019
80005582:	f0 16 00 11 	mcall	r6[68]
80005586:	14 98       	mov	r8,r10
80005588:	16 99       	mov	r9,r11
8000558a:	10 9a       	mov	r10,r8
8000558c:	12 9b       	mov	r11,r9
8000558e:	f0 16 00 08 	mcall	r6[32]
80005592:	18 98       	mov	r8,r12
80005594:	ef 48 ff fc 	st.w	r7[-4],r8
80005598:	ee fc ff fc 	ld.w	r12,r7[-4]
8000559c:	f0 16 00 02 	mcall	r6[8]
800055a0:	30 05       	mov	r5,0
800055a2:	e0 68 2d 18 	mov	r8,11544
800055a6:	ea 18 54 44 	orh	r8,0x5444
800055aa:	e0 69 21 fb 	mov	r9,8699
800055ae:	ea 19 40 09 	orh	r9,0x4009
800055b2:	f0 16 00 7f 	mcall	r6[508]
800055b6:	18 98       	mov	r8,r12
800055b8:	58 08       	cp.w	r8,0
800055ba:	c0 20       	breq	800055be <calc_smaller_angle+0xca>
800055bc:	30 15       	mov	r5,1
800055be:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800055c2:	cd 41       	brne	8000556a <calc_smaller_angle+0x76>
	return out;
800055c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800055c8:	10 9c       	mov	r12,r8
800055ca:	2f ed       	sub	sp,-8
800055cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800055d0:	80 00       	ld.sh	r0,r0[0x0]
800055d2:	53 82       	stdsp	sp[0xe0],r2

800055d4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
800055d4:	eb cd 40 c0 	pushm	r6-r7,lr
800055d8:	1a 97       	mov	r7,sp
800055da:	20 2d       	sub	sp,8
800055dc:	4b 26       	lddpc	r6,800056a4 <fast_sqrt+0xd0>
800055de:	1e 26       	rsub	r6,pc
800055e0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
800055e4:	30 18       	mov	r8,1
800055e6:	ee fa ff f8 	ld.w	r10,r7[-8]
800055ea:	30 09       	mov	r9,0
800055ec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800055f0:	e0 8c 00 03 	brvs	800055f6 <fast_sqrt+0x22>
800055f4:	c0 25       	brlt	800055f8 <fast_sqrt+0x24>
800055f6:	30 08       	mov	r8,0
800055f8:	5c 58       	castu.b	r8
800055fa:	c0 30       	breq	80005600 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
800055fc:	30 08       	mov	r8,0
800055fe:	c4 f8       	rjmp	8000569c <fast_sqrt+0xc8>
	}
	float result=1.0;
80005600:	fc 18 3f 80 	movh	r8,0x3f80
80005604:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005608:	ee fb ff fc 	ld.w	r11,r7[-4]
8000560c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005610:	f0 16 00 0a 	mcall	r6[40]
80005614:	18 98       	mov	r8,r12
80005616:	10 99       	mov	r9,r8
80005618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005620:	fc 18 3f 00 	movh	r8,0x3f00
80005624:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005628:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000562c:	ee fb ff fc 	ld.w	r11,r7[-4]
80005630:	ee fc ff f8 	ld.w	r12,r7[-8]
80005634:	f0 16 00 0a 	mcall	r6[40]
80005638:	18 98       	mov	r8,r12
8000563a:	10 99       	mov	r9,r8
8000563c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005640:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005644:	fc 18 3f 00 	movh	r8,0x3f00
80005648:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000564c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005650:	ee fb ff fc 	ld.w	r11,r7[-4]
80005654:	ee fc ff f8 	ld.w	r12,r7[-8]
80005658:	f0 16 00 0a 	mcall	r6[40]
8000565c:	18 98       	mov	r8,r12
8000565e:	10 99       	mov	r9,r8
80005660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005664:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005668:	fc 18 3f 00 	movh	r8,0x3f00
8000566c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005670:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005674:	ee fb ff fc 	ld.w	r11,r7[-4]
80005678:	ee fc ff f8 	ld.w	r12,r7[-8]
8000567c:	f0 16 00 0a 	mcall	r6[40]
80005680:	18 98       	mov	r8,r12
80005682:	10 99       	mov	r9,r8
80005684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005688:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000568c:	fc 18 3f 00 	movh	r8,0x3f00
80005690:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005694:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005698:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000569c:	10 9c       	mov	r12,r8
8000569e:	2f ed       	sub	sp,-8
800056a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	54 62       	stdsp	sp[0x118],r2

800056a8 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
800056a8:	eb cd 40 c0 	pushm	r6-r7,lr
800056ac:	1a 97       	mov	r7,sp
800056ae:	20 1d       	sub	sp,4
800056b0:	48 e6       	lddpc	r6,800056e8 <sigmoid+0x40>
800056b2:	1e 26       	rsub	r6,pc
800056b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
800056b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800056c4:	fc 18 3f 80 	movh	r8,0x3f80
800056c8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800056cc:	10 9c       	mov	r12,r8
800056ce:	c8 3f       	rcall	800055d4 <fast_sqrt>
800056d0:	18 98       	mov	r8,r12
800056d2:	10 9b       	mov	r11,r8
800056d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056d8:	f0 16 00 0a 	mcall	r6[40]
800056dc:	18 98       	mov	r8,r12
};
800056de:	10 9c       	mov	r12,r8
800056e0:	2f fd       	sub	sp,-4
800056e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056e6:	00 00       	add	r0,r0
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	55 36       	stdsp	sp[0x14c],r6

800056ec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800056ec:	eb cd 40 c0 	pushm	r6-r7,lr
800056f0:	1a 97       	mov	r7,sp
800056f2:	20 3d       	sub	sp,12
800056f4:	49 06       	lddpc	r6,80005734 <mav_array_memcpy+0x48>
800056f6:	1e 26       	rsub	r6,pc
800056f8:	ef 4c ff fc 	st.w	r7[-4],r12
800056fc:	ef 4b ff f8 	st.w	r7[-8],r11
80005700:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	58 08       	cp.w	r8,0
8000570a:	c0 91       	brne	8000571c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000570c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005710:	30 0b       	mov	r11,0
80005712:	ee fc ff fc 	ld.w	r12,r7[-4]
80005716:	f0 16 00 31 	mcall	r6[196]
8000571a:	c0 98       	rjmp	8000572c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000571c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005720:	ee fb ff f8 	ld.w	r11,r7[-8]
80005724:	ee fc ff fc 	ld.w	r12,r7[-4]
80005728:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000572c:	2f dd       	sub	sp,-12
8000572e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005732:	00 00       	add	r0,r0
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	55 7a       	stdsp	sp[0x15c],r10

80005738 <init_rate_stabilisation>:
// Stabiliser_t* get_attitude_stabiliser() { return &attitude_stabiliser;}
// Stabiliser_t* get_velocity_stabiliser() { return &velocity_stabiliser;}



void init_rate_stabilisation(Stabiliser_t *stabiliser) {
80005738:	eb cd 40 e0 	pushm	r5-r7,lr
8000573c:	1a 97       	mov	r7,sp
8000573e:	21 3d       	sub	sp,76
80005740:	fe f6 02 34 	ld.w	r6,pc[564]
80005744:	1e 26       	rsub	r6,pc
80005746:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
8000574a:	30 08       	mov	r8,0
8000574c:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005750:	30 08       	mov	r8,0
80005752:	ef 48 ff fc 	st.w	r7[-4],r8
80005756:	c7 d8       	rjmp	80005850 <init_rate_stabilisation+0x118>
		(stabiliser->rpy_controller[i]).p_gain=0.15;
80005758:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000575c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005760:	12 98       	mov	r8,r9
80005762:	a5 68       	lsl	r8,0x4
80005764:	12 08       	add	r8,r9
80005766:	a3 68       	lsl	r8,0x2
80005768:	f4 08 00 08 	add	r8,r10,r8
8000576c:	e0 69 99 9a 	mov	r9,39322
80005770:	ea 19 3e 19 	orh	r9,0x3e19
80005774:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
80005776:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000577a:	f0 16 00 2d 	mcall	r6[180]
8000577e:	18 99       	mov	r9,r12
80005780:	ee fa ff f8 	ld.w	r10,r7[-8]
80005784:	0a 98       	mov	r8,r5
80005786:	a5 68       	lsl	r8,0x4
80005788:	0a 08       	add	r8,r5
8000578a:	a3 68       	lsl	r8,0x2
8000578c:	f4 08 00 08 	add	r8,r10,r8
80005790:	2c 88       	sub	r8,-56
80005792:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-0.9;
80005794:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005798:	ee fa ff f8 	ld.w	r10,r7[-8]
8000579c:	12 98       	mov	r8,r9
8000579e:	a5 68       	lsl	r8,0x4
800057a0:	12 08       	add	r8,r9
800057a2:	2f f8       	sub	r8,-1
800057a4:	e0 69 66 66 	mov	r9,26214
800057a8:	ea 19 bf 66 	orh	r9,0xbf66
800057ac:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 0.9;
800057b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057b4:	ee fa ff f8 	ld.w	r10,r7[-8]
800057b8:	12 98       	mov	r8,r9
800057ba:	a5 68       	lsl	r8,0x4
800057bc:	12 08       	add	r8,r9
800057be:	a3 68       	lsl	r8,0x2
800057c0:	f4 08 00 08 	add	r8,r10,r8
800057c4:	2f 88       	sub	r8,-8
800057c6:	e0 69 66 66 	mov	r9,26214
800057ca:	ea 19 3f 66 	orh	r9,0x3f66
800057ce:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
800057d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057d4:	ee fa ff f8 	ld.w	r10,r7[-8]
800057d8:	12 98       	mov	r8,r9
800057da:	a5 68       	lsl	r8,0x4
800057dc:	12 08       	add	r8,r9
800057de:	a3 68       	lsl	r8,0x2
800057e0:	f4 08 00 08 	add	r8,r10,r8
800057e4:	2c 08       	sub	r8,-64
800057e6:	30 09       	mov	r9,0
800057e8:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
800057ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057ee:	12 98       	mov	r8,r9
800057f0:	a5 68       	lsl	r8,0x4
800057f2:	12 08       	add	r8,r9
800057f4:	a3 68       	lsl	r8,0x2
800057f6:	2e 08       	sub	r8,-32
800057f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800057fc:	f2 08 00 08 	add	r8,r9,r8
80005800:	fc 19 3f 00 	movh	r9,0x3f00
80005804:	e0 6a cc cd 	mov	r10,52429
80005808:	ea 1a 3e cc 	orh	r10,0x3ecc
8000580c:	e0 6b cc cd 	mov	r11,52429
80005810:	ea 1b 3e 4c 	orh	r11,0x3e4c
80005814:	10 9c       	mov	r12,r8
80005816:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
8000581a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000581e:	12 98       	mov	r8,r9
80005820:	a5 68       	lsl	r8,0x4
80005822:	12 08       	add	r8,r9
80005824:	a3 68       	lsl	r8,0x2
80005826:	2f 48       	sub	r8,-12
80005828:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000582c:	f2 08 00 08 	add	r8,r9,r8
80005830:	e0 69 66 66 	mov	r9,26214
80005834:	ea 19 3f 26 	orh	r9,0x3f26
80005838:	fc 1a 3f 80 	movh	r10,0x3f80
8000583c:	fc 1b 3f 00 	movh	r11,0x3f00
80005840:	10 9c       	mov	r12,r8
80005842:	f0 16 00 53 	mcall	r6[332]


void init_rate_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005846:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000584a:	2f f8       	sub	r8,-1
8000584c:	ef 48 ff fc 	st.w	r7[-4],r8
80005850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005854:	58 18       	cp.w	r8,1
80005856:	fe 9a ff 81 	brle	80005758 <init_rate_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
	}	
	// initialise yaw controller
	i=2;
8000585a:	30 28       	mov	r8,2
8000585c:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=0.4;
80005860:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005864:	ee fa ff f8 	ld.w	r10,r7[-8]
80005868:	12 98       	mov	r8,r9
8000586a:	a5 68       	lsl	r8,0x4
8000586c:	12 08       	add	r8,r9
8000586e:	a3 68       	lsl	r8,0x2
80005870:	f4 08 00 08 	add	r8,r10,r8
80005874:	e0 69 cc cd 	mov	r9,52429
80005878:	ea 19 3e cc 	orh	r9,0x3ecc
8000587c:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
8000587e:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005882:	f0 16 00 2d 	mcall	r6[180]
80005886:	18 99       	mov	r9,r12
80005888:	ee fa ff f8 	ld.w	r10,r7[-8]
8000588c:	0a 98       	mov	r8,r5
8000588e:	a5 68       	lsl	r8,0x4
80005890:	0a 08       	add	r8,r5
80005892:	a3 68       	lsl	r8,0x2
80005894:	f4 08 00 08 	add	r8,r10,r8
80005898:	2c 88       	sub	r8,-56
8000589a:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-0.9;
8000589c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058a0:	ee fa ff f8 	ld.w	r10,r7[-8]
800058a4:	12 98       	mov	r8,r9
800058a6:	a5 68       	lsl	r8,0x4
800058a8:	12 08       	add	r8,r9
800058aa:	2f f8       	sub	r8,-1
800058ac:	e0 69 66 66 	mov	r9,26214
800058b0:	ea 19 bf 66 	orh	r9,0xbf66
800058b4:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 0.9;
800058b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800058c0:	12 98       	mov	r8,r9
800058c2:	a5 68       	lsl	r8,0x4
800058c4:	12 08       	add	r8,r9
800058c6:	a3 68       	lsl	r8,0x2
800058c8:	f4 08 00 08 	add	r8,r10,r8
800058cc:	2f 88       	sub	r8,-8
800058ce:	e0 69 66 66 	mov	r9,26214
800058d2:	ea 19 3f 66 	orh	r9,0x3f66
800058d6:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
800058d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058dc:	ee fa ff f8 	ld.w	r10,r7[-8]
800058e0:	12 98       	mov	r8,r9
800058e2:	a5 68       	lsl	r8,0x4
800058e4:	12 08       	add	r8,r9
800058e6:	a3 68       	lsl	r8,0x2
800058e8:	f4 08 00 08 	add	r8,r10,r8
800058ec:	2c 08       	sub	r8,-64
800058ee:	30 09       	mov	r9,0
800058f0:	91 09       	st.w	r8[0x0],r9
	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.4, 0.5);
800058f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058f6:	12 98       	mov	r8,r9
800058f8:	a5 68       	lsl	r8,0x4
800058fa:	12 08       	add	r8,r9
800058fc:	a3 68       	lsl	r8,0x2
800058fe:	2e 08       	sub	r8,-32
80005900:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005904:	f2 08 00 08 	add	r8,r9,r8
80005908:	fc 19 3f 00 	movh	r9,0x3f00
8000590c:	e0 6a cc cd 	mov	r10,52429
80005910:	ea 1a 3e cc 	orh	r10,0x3ecc
80005914:	30 0b       	mov	r11,0
80005916:	10 9c       	mov	r12,r8
80005918:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 0.2, 0.1);
8000591c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005920:	12 98       	mov	r8,r9
80005922:	a5 68       	lsl	r8,0x4
80005924:	12 08       	add	r8,r9
80005926:	a3 68       	lsl	r8,0x2
80005928:	2f 48       	sub	r8,-12
8000592a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000592e:	f2 08 00 08 	add	r8,r9,r8
80005932:	e0 69 cc cd 	mov	r9,52429
80005936:	ea 19 3d cc 	orh	r9,0x3dcc
8000593a:	e0 6a cc cd 	mov	r10,52429
8000593e:	ea 1a 3e 4c 	orh	r10,0x3e4c
80005942:	fc 1b 3f 00 	movh	r11,0x3f00
80005946:	10 9c       	mov	r12,r8
80005948:	f0 16 00 53 	mcall	r6[332]
	
	// initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
8000594c:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005950:	ee c8 00 4c 	sub	r8,r7,76
80005954:	10 9c       	mov	r12,r8
80005956:	f0 16 00 d3 	mcall	r6[844]
8000595a:	ea c8 ff 34 	sub	r8,r5,-204
8000595e:	ee c9 00 4c 	sub	r9,r7,76
80005962:	34 4a       	mov	r10,68
80005964:	12 9b       	mov	r11,r9
80005966:	10 9c       	mov	r12,r8
80005968:	f0 16 00 1b 	mcall	r6[108]
}
8000596c:	2e dd       	sub	sp,-76
8000596e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005972:	00 00       	add	r0,r0
80005974:	80 00       	ld.sh	r0,r0[0x0]
80005976:	55 c8       	stdsp	sp[0x170],r8

80005978 <init_angle_stabilisation>:

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
80005978:	eb cd 40 e0 	pushm	r5-r7,lr
8000597c:	1a 97       	mov	r7,sp
8000597e:	21 3d       	sub	sp,76
80005980:	fe f6 02 00 	ld.w	r6,pc[512]
80005984:	1e 26       	rsub	r6,pc
80005986:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
8000598a:	30 08       	mov	r8,0
8000598c:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005990:	30 08       	mov	r8,0
80005992:	ef 48 ff fc 	st.w	r7[-4],r8
80005996:	c7 38       	rjmp	80005a7c <init_angle_stabilisation+0x104>
		(stabiliser->rpy_controller[i]).p_gain=1.5;
80005998:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000599c:	ee fa ff f8 	ld.w	r10,r7[-8]
800059a0:	12 98       	mov	r8,r9
800059a2:	a5 68       	lsl	r8,0x4
800059a4:	12 08       	add	r8,r9
800059a6:	a3 68       	lsl	r8,0x2
800059a8:	f4 08 00 08 	add	r8,r10,r8
800059ac:	fc 19 3f c0 	movh	r9,0x3fc0
800059b0:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
800059b2:	ee f5 ff fc 	ld.w	r5,r7[-4]
800059b6:	f0 16 00 2d 	mcall	r6[180]
800059ba:	18 99       	mov	r9,r12
800059bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800059c0:	0a 98       	mov	r8,r5
800059c2:	a5 68       	lsl	r8,0x4
800059c4:	0a 08       	add	r8,r5
800059c6:	a3 68       	lsl	r8,0x2
800059c8:	f4 08 00 08 	add	r8,r10,r8
800059cc:	2c 88       	sub	r8,-56
800059ce:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-1.2;
800059d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800059d4:	ee fa ff f8 	ld.w	r10,r7[-8]
800059d8:	12 98       	mov	r8,r9
800059da:	a5 68       	lsl	r8,0x4
800059dc:	12 08       	add	r8,r9
800059de:	2f f8       	sub	r8,-1
800059e0:	e0 69 99 9a 	mov	r9,39322
800059e4:	ea 19 bf 99 	orh	r9,0xbf99
800059e8:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 1.2;
800059ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800059f0:	ee fa ff f8 	ld.w	r10,r7[-8]
800059f4:	12 98       	mov	r8,r9
800059f6:	a5 68       	lsl	r8,0x4
800059f8:	12 08       	add	r8,r9
800059fa:	a3 68       	lsl	r8,0x2
800059fc:	f4 08 00 08 	add	r8,r10,r8
80005a00:	2f 88       	sub	r8,-8
80005a02:	e0 69 99 9a 	mov	r9,39322
80005a06:	ea 19 3f 99 	orh	r9,0x3f99
80005a0a:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005a0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a10:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a14:	12 98       	mov	r8,r9
80005a16:	a5 68       	lsl	r8,0x4
80005a18:	12 08       	add	r8,r9
80005a1a:	a3 68       	lsl	r8,0x2
80005a1c:	f4 08 00 08 	add	r8,r10,r8
80005a20:	2c 08       	sub	r8,-64
80005a22:	30 09       	mov	r9,0
80005a24:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
80005a26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a2a:	12 98       	mov	r8,r9
80005a2c:	a5 68       	lsl	r8,0x4
80005a2e:	12 08       	add	r8,r9
80005a30:	a3 68       	lsl	r8,0x2
80005a32:	2e 08       	sub	r8,-32
80005a34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a38:	f2 08 00 08 	add	r8,r9,r8
80005a3c:	e0 69 cc cd 	mov	r9,52429
80005a40:	ea 19 3d cc 	orh	r9,0x3dcc
80005a44:	fc 1a 3f 00 	movh	r10,0x3f00
80005a48:	30 0b       	mov	r11,0
80005a4a:	10 9c       	mov	r12,r8
80005a4c:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
80005a50:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a54:	12 98       	mov	r8,r9
80005a56:	a5 68       	lsl	r8,0x4
80005a58:	12 08       	add	r8,r9
80005a5a:	a3 68       	lsl	r8,0x2
80005a5c:	2f 48       	sub	r8,-12
80005a5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a62:	f2 08 00 08 	add	r8,r9,r8
80005a66:	30 09       	mov	r9,0
80005a68:	30 0a       	mov	r10,0
80005a6a:	30 0b       	mov	r11,0
80005a6c:	10 9c       	mov	r12,r8
80005a6e:	f0 16 00 53 	mcall	r6[332]
}

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a76:	2f f8       	sub	r8,-1
80005a78:	ef 48 ff fc 	st.w	r7[-4],r8
80005a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a80:	58 18       	cp.w	r8,1
80005a82:	fe 9a ff 8b 	brle	80005998 <init_angle_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
	}	
	// initialise yaw controller
	i=2;
80005a86:	30 28       	mov	r8,2
80005a88:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=1.5;
80005a8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a90:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a94:	12 98       	mov	r8,r9
80005a96:	a5 68       	lsl	r8,0x4
80005a98:	12 08       	add	r8,r9
80005a9a:	a3 68       	lsl	r8,0x2
80005a9c:	f4 08 00 08 	add	r8,r10,r8
80005aa0:	fc 19 3f c0 	movh	r9,0x3fc0
80005aa4:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
80005aa6:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005aaa:	f0 16 00 2d 	mcall	r6[180]
80005aae:	18 99       	mov	r9,r12
80005ab0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005ab4:	0a 98       	mov	r8,r5
80005ab6:	a5 68       	lsl	r8,0x4
80005ab8:	0a 08       	add	r8,r5
80005aba:	a3 68       	lsl	r8,0x2
80005abc:	f4 08 00 08 	add	r8,r10,r8
80005ac0:	2c 88       	sub	r8,-56
80005ac2:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-1.0;
80005ac4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ac8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005acc:	12 98       	mov	r8,r9
80005ace:	a5 68       	lsl	r8,0x4
80005ad0:	12 08       	add	r8,r9
80005ad2:	2f f8       	sub	r8,-1
80005ad4:	fc 19 bf 80 	movh	r9,0xbf80
80005ad8:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 1.0;
80005adc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ae0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005ae4:	12 98       	mov	r8,r9
80005ae6:	a5 68       	lsl	r8,0x4
80005ae8:	12 08       	add	r8,r9
80005aea:	a3 68       	lsl	r8,0x2
80005aec:	f4 08 00 08 	add	r8,r10,r8
80005af0:	2f 88       	sub	r8,-8
80005af2:	fc 19 3f 80 	movh	r9,0x3f80
80005af6:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005af8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005afc:	ee fa ff f8 	ld.w	r10,r7[-8]
80005b00:	12 98       	mov	r8,r9
80005b02:	a5 68       	lsl	r8,0x4
80005b04:	12 08       	add	r8,r9
80005b06:	a3 68       	lsl	r8,0x2
80005b08:	f4 08 00 08 	add	r8,r10,r8
80005b0c:	2c 08       	sub	r8,-64
80005b0e:	30 09       	mov	r9,0
80005b10:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5);
80005b12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b16:	12 98       	mov	r8,r9
80005b18:	a5 68       	lsl	r8,0x4
80005b1a:	12 08       	add	r8,r9
80005b1c:	a3 68       	lsl	r8,0x2
80005b1e:	2e 08       	sub	r8,-32
80005b20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b24:	f2 08 00 08 	add	r8,r9,r8
80005b28:	fc 19 3f 00 	movh	r9,0x3f00
80005b2c:	fc 1a 3f 00 	movh	r10,0x3f00
80005b30:	30 0b       	mov	r11,0
80005b32:	10 9c       	mov	r12,r8
80005b34:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
80005b38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b3c:	12 98       	mov	r8,r9
80005b3e:	a5 68       	lsl	r8,0x4
80005b40:	12 08       	add	r8,r9
80005b42:	a3 68       	lsl	r8,0x2
80005b44:	2f 48       	sub	r8,-12
80005b46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b4a:	f2 08 00 08 	add	r8,r9,r8
80005b4e:	30 09       	mov	r9,0
80005b50:	30 0a       	mov	r10,0
80005b52:	30 0b       	mov	r11,0
80005b54:	10 9c       	mov	r12,r8
80005b56:	f0 16 00 53 	mcall	r6[332]

	//initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
80005b5a:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005b5e:	ee c8 00 4c 	sub	r8,r7,76
80005b62:	10 9c       	mov	r12,r8
80005b64:	f0 16 00 d3 	mcall	r6[844]
80005b68:	ea c8 ff 34 	sub	r8,r5,-204
80005b6c:	ee c9 00 4c 	sub	r9,r7,76
80005b70:	34 4a       	mov	r10,68
80005b72:	12 9b       	mov	r11,r9
80005b74:	10 9c       	mov	r12,r8
80005b76:	f0 16 00 1b 	mcall	r6[108]
	
}
80005b7a:	2e dd       	sub	sp,-76
80005b7c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005b80:	80 00       	ld.sh	r0,r0[0x0]
80005b82:	58 08       	cp.w	r8,0

80005b84 <init_velocity_stabilisation>:

void init_velocity_stabilisation(Stabiliser_t * stabiliser) {
80005b84:	eb cd 40 e0 	pushm	r5-r7,lr
80005b88:	1a 97       	mov	r7,sp
80005b8a:	21 3d       	sub	sp,76
80005b8c:	fe f6 02 80 	ld.w	r6,pc[640]
80005b90:	1e 26       	rsub	r6,pc
80005b92:	ef 4c ff f8 	st.w	r7[-8],r12
	int i = 0;
80005b96:	30 08       	mov	r8,0
80005b98:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll velocity
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
80005b9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ba0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005ba4:	12 98       	mov	r8,r9
80005ba6:	a5 68       	lsl	r8,0x4
80005ba8:	12 08       	add	r8,r9
80005baa:	a3 68       	lsl	r8,0x2
80005bac:	f4 08 00 08 	add	r8,r10,r8
80005bb0:	e0 69 cc cd 	mov	r9,52429
80005bb4:	ea 19 3e 4c 	orh	r9,0x3e4c
80005bb8:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
80005bba:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005bbe:	f0 16 00 2d 	mcall	r6[180]
80005bc2:	18 99       	mov	r9,r12
80005bc4:	ee fa ff f8 	ld.w	r10,r7[-8]
80005bc8:	0a 98       	mov	r8,r5
80005bca:	a5 68       	lsl	r8,0x4
80005bcc:	0a 08       	add	r8,r5
80005bce:	a3 68       	lsl	r8,0x2
80005bd0:	f4 08 00 08 	add	r8,r10,r8
80005bd4:	2c 88       	sub	r8,-56
80005bd6:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
80005bd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005bdc:	ee fa ff f8 	ld.w	r10,r7[-8]
80005be0:	12 98       	mov	r8,r9
80005be2:	a5 68       	lsl	r8,0x4
80005be4:	12 08       	add	r8,r9
80005be6:	2f f8       	sub	r8,-1
80005be8:	fc 19 bf 00 	movh	r9,0xbf00
80005bec:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
80005bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005bf4:	ee fa ff f8 	ld.w	r10,r7[-8]
80005bf8:	12 98       	mov	r8,r9
80005bfa:	a5 68       	lsl	r8,0x4
80005bfc:	12 08       	add	r8,r9
80005bfe:	a3 68       	lsl	r8,0x2
80005c00:	f4 08 00 08 	add	r8,r10,r8
80005c04:	2f 88       	sub	r8,-8
80005c06:	fc 19 3f 00 	movh	r9,0x3f00
80005c0a:	91 09       	st.w	r8[0x0],r9
	
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
80005c0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c10:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c14:	12 98       	mov	r8,r9
80005c16:	a5 68       	lsl	r8,0x4
80005c18:	12 08       	add	r8,r9
80005c1a:	a3 68       	lsl	r8,0x2
80005c1c:	f4 08 00 08 	add	r8,r10,r8
80005c20:	2c 08       	sub	r8,-64
80005c22:	e0 69 99 9a 	mov	r9,39322
80005c26:	ea 19 3e 99 	orh	r9,0x3e99
80005c2a:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
80005c2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c30:	12 98       	mov	r8,r9
80005c32:	a5 68       	lsl	r8,0x4
80005c34:	12 08       	add	r8,r9
80005c36:	a3 68       	lsl	r8,0x2
80005c38:	2e 08       	sub	r8,-32
80005c3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c3e:	f2 08 00 08 	add	r8,r9,r8
80005c42:	fc 19 3f 00 	movh	r9,0x3f00
80005c46:	fc 1a 3f 00 	movh	r10,0x3f00
80005c4a:	30 0b       	mov	r11,0
80005c4c:	10 9c       	mov	r12,r8
80005c4e:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
80005c52:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c56:	12 98       	mov	r8,r9
80005c58:	a5 68       	lsl	r8,0x4
80005c5a:	12 08       	add	r8,r9
80005c5c:	a3 68       	lsl	r8,0x2
80005c5e:	2f 48       	sub	r8,-12
80005c60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c64:	f2 08 00 08 	add	r8,r9,r8
80005c68:	e0 69 99 9a 	mov	r9,39322
80005c6c:	ea 19 3e 99 	orh	r9,0x3e99
80005c70:	30 0a       	mov	r10,0
80005c72:	30 0b       	mov	r11,0
80005c74:	10 9c       	mov	r12,r8
80005c76:	f0 16 00 53 	mcall	r6[332]
	
	// initialise pitch velocity
	i = 1;
80005c7a:	30 18       	mov	r8,1
80005c7c:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
80005c80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c84:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c88:	12 98       	mov	r8,r9
80005c8a:	a5 68       	lsl	r8,0x4
80005c8c:	12 08       	add	r8,r9
80005c8e:	a3 68       	lsl	r8,0x2
80005c90:	f4 08 00 08 	add	r8,r10,r8
80005c94:	e0 69 cc cd 	mov	r9,52429
80005c98:	ea 19 3e 4c 	orh	r9,0x3e4c
80005c9c:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
80005c9e:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005ca2:	f0 16 00 2d 	mcall	r6[180]
80005ca6:	18 99       	mov	r9,r12
80005ca8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cac:	0a 98       	mov	r8,r5
80005cae:	a5 68       	lsl	r8,0x4
80005cb0:	0a 08       	add	r8,r5
80005cb2:	a3 68       	lsl	r8,0x2
80005cb4:	f4 08 00 08 	add	r8,r10,r8
80005cb8:	2c 88       	sub	r8,-56
80005cba:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
80005cbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cc0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cc4:	12 98       	mov	r8,r9
80005cc6:	a5 68       	lsl	r8,0x4
80005cc8:	12 08       	add	r8,r9
80005cca:	2f f8       	sub	r8,-1
80005ccc:	fc 19 bf 00 	movh	r9,0xbf00
80005cd0:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
80005cd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cd8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cdc:	12 98       	mov	r8,r9
80005cde:	a5 68       	lsl	r8,0x4
80005ce0:	12 08       	add	r8,r9
80005ce2:	a3 68       	lsl	r8,0x2
80005ce4:	f4 08 00 08 	add	r8,r10,r8
80005ce8:	2f 88       	sub	r8,-8
80005cea:	fc 19 3f 00 	movh	r9,0x3f00
80005cee:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
80005cf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cf4:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cf8:	12 98       	mov	r8,r9
80005cfa:	a5 68       	lsl	r8,0x4
80005cfc:	12 08       	add	r8,r9
80005cfe:	a3 68       	lsl	r8,0x2
80005d00:	f4 08 00 08 	add	r8,r10,r8
80005d04:	2c 08       	sub	r8,-64
80005d06:	e0 69 99 9a 	mov	r9,39322
80005d0a:	ea 19 3e 99 	orh	r9,0x3e99
80005d0e:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
80005d10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d14:	12 98       	mov	r8,r9
80005d16:	a5 68       	lsl	r8,0x4
80005d18:	12 08       	add	r8,r9
80005d1a:	a3 68       	lsl	r8,0x2
80005d1c:	2e 08       	sub	r8,-32
80005d1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d22:	f2 08 00 08 	add	r8,r9,r8
80005d26:	fc 19 3f 00 	movh	r9,0x3f00
80005d2a:	fc 1a 3f 00 	movh	r10,0x3f00
80005d2e:	30 0b       	mov	r11,0
80005d30:	10 9c       	mov	r12,r8
80005d32:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
80005d36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d3a:	12 98       	mov	r8,r9
80005d3c:	a5 68       	lsl	r8,0x4
80005d3e:	12 08       	add	r8,r9
80005d40:	a3 68       	lsl	r8,0x2
80005d42:	2f 48       	sub	r8,-12
80005d44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d48:	f2 08 00 08 	add	r8,r9,r8
80005d4c:	e0 69 99 9a 	mov	r9,39322
80005d50:	ea 19 3e 99 	orh	r9,0x3e99
80005d54:	30 0a       	mov	r10,0
80005d56:	30 0b       	mov	r11,0
80005d58:	10 9c       	mov	r12,r8
80005d5a:	f0 16 00 53 	mcall	r6[332]
	
	// initialise yaw controller
	stabiliser->rpy_controller[2]=passthroughController();
80005d5e:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005d62:	ee c8 00 4c 	sub	r8,r7,76
80005d66:	10 9c       	mov	r12,r8
80005d68:	f0 16 00 d3 	mcall	r6[844]
80005d6c:	ea c8 ff 78 	sub	r8,r5,-136
80005d70:	ee c9 00 4c 	sub	r9,r7,76
80005d74:	34 4a       	mov	r10,68
80005d76:	12 9b       	mov	r11,r9
80005d78:	10 9c       	mov	r12,r8
80005d7a:	f0 16 00 1b 	mcall	r6[108]
	
	// initialise z velocity
	(stabiliser->thrust_controller).p_gain=0.4; //0.3
80005d7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d82:	e0 69 cc cd 	mov	r9,52429
80005d86:	ea 19 3e cc 	orh	r9,0x3ecc
80005d8a:	f1 49 00 cc 	st.w	r8[204],r9
	(stabiliser->thrust_controller).last_update=get_time_ticks();
80005d8e:	f0 16 00 2d 	mcall	r6[180]
80005d92:	18 99       	mov	r9,r12
80005d94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d98:	f1 49 01 04 	st.w	r8[260],r9
	(stabiliser->thrust_controller).clip_min=-0.9; //-0.9
80005d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005da0:	e0 69 66 66 	mov	r9,26214
80005da4:	ea 19 bf 66 	orh	r9,0xbf66
80005da8:	f1 49 00 d0 	st.w	r8[208],r9
	(stabiliser->thrust_controller).clip_max= 0.65; // 0.9
80005dac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005db0:	e0 69 66 66 	mov	r9,26214
80005db4:	ea 19 3f 26 	orh	r9,0x3f26
80005db8:	f1 49 00 d4 	st.w	r8[212],r9
	(stabiliser->thrust_controller).soft_zone_width= 0.2; // region of lowered error input gain to ignore noise close to target point
80005dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005dc0:	e0 69 cc cd 	mov	r9,52429
80005dc4:	ea 19 3e 4c 	orh	r9,0x3e4c
80005dc8:	f1 49 01 0c 	st.w	r8[268],r9
	initDiff(&((stabiliser->thrust_controller).differentiator), 0.5, 0.95, 1.0); // 0.1 0.5 0.2
80005dcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005dd0:	f0 c8 ff 14 	sub	r8,r8,-236
80005dd4:	fc 19 3f 80 	movh	r9,0x3f80
80005dd8:	e0 6a 33 33 	mov	r10,13107
80005ddc:	ea 1a 3f 73 	orh	r10,0x3f73
80005de0:	fc 1b 3f 00 	movh	r11,0x3f00
80005de4:	10 9c       	mov	r12,r8
80005de6:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->thrust_controller).integrator),1.5, 1.0, 1.0); // 1.0 1.0 0.5
80005dea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005dee:	f0 c8 ff 28 	sub	r8,r8,-216
80005df2:	fc 19 3f 80 	movh	r9,0x3f80
80005df6:	fc 1a 3f 80 	movh	r10,0x3f80
80005dfa:	fc 1b 3f c0 	movh	r11,0x3fc0
80005dfe:	10 9c       	mov	r12,r8
80005e00:	f0 16 00 53 	mcall	r6[332]
	
	
}
80005e04:	2e dd       	sub	sp,-76
80005e06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005e0a:	00 00       	add	r0,r0
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	5a 14       	cp.w	r4,-31

80005e10 <init_stabilisation_copter>:

void init_stabilisation_copter(Stabiliser_Stack_copter_t* stabiliser_stack)
{
80005e10:	eb cd 40 c0 	pushm	r6-r7,lr
80005e14:	1a 97       	mov	r7,sp
80005e16:	20 1d       	sub	sp,4
80005e18:	49 c6       	lddpc	r6,80005e88 <init_stabilisation_copter+0x78>
80005e1a:	1e 26       	rsub	r6,pc
80005e1c:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80005e20:	f0 16 00 33 	mcall	r6[204]
80005e24:	18 99       	mov	r9,r12
80005e26:	ec f8 00 00 	ld.w	r8,r6[0]
80005e2a:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode=MOTORS_OFF;
80005e2c:	ec f8 00 00 	ld.w	r8,r6[0]
80005e30:	70 08       	ld.w	r8,r8[0x0]
80005e32:	30 09       	mov	r9,0
80005e34:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode=ATTITUDE_COMMAND_MODE;
80005e38:	ec f8 00 00 	ld.w	r8,r6[0]
80005e3c:	70 08       	ld.w	r8,r8[0x0]
80005e3e:	30 19       	mov	r9,1
80005e40:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode=YAW_RELATIVE;
80005e44:	ec f8 00 00 	ld.w	r8,r6[0]
80005e48:	70 08       	ld.w	r8,r8[0x0]
80005e4a:	30 09       	mov	r9,0
80005e4c:	f1 49 01 6c 	st.w	r8[364],r9

	stabiliser_stack->yaw_coordination_velocity=1.5;
80005e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e54:	fc 19 3f c0 	movh	r9,0x3fc0
80005e58:	f1 49 03 b4 	st.w	r8[948],r9

	init_rate_stabilisation(&stabiliser_stack->rate_stabiliser);
80005e5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e60:	10 9c       	mov	r12,r8
80005e62:	f0 16 01 57 	mcall	r6[1372]
	init_angle_stabilisation(&stabiliser_stack->attitude_stabiliser);
80005e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e6a:	f0 c8 fe c4 	sub	r8,r8,-316
80005e6e:	10 9c       	mov	r12,r8
80005e70:	f0 16 01 71 	mcall	r6[1476]
	init_velocity_stabilisation(&stabiliser_stack->velocity_stabiliser);
80005e74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e78:	f0 c8 fd 88 	sub	r8,r8,-632
80005e7c:	10 9c       	mov	r12,r8
80005e7e:	f0 16 02 01 	mcall	r6[2052]
}
80005e82:	2f fd       	sub	sp,-4
80005e84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005e88:	80 00       	ld.sh	r0,r0[0x0]
80005e8a:	5c 9e       	brev	lr

80005e8c <cascade_stabilise_copter>:
// 	init_angle_stabilisation(&attitude_stabiliser);
// 	init_velocity_stabilisation(&velocity_stabiliser);
// }


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
80005e8c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80005e90:	1a 97       	mov	r7,sp
80005e92:	21 5d       	sub	sp,84
80005e94:	fe f6 03 74 	ld.w	r6,pc[884]
80005e98:	1e 26       	rsub	r6,pc
80005e9a:	ef 4c ff b4 	st.w	r7[-76],r12
80005e9e:	ef 4b ff b0 	st.w	r7[-80],r11
80005ea2:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
80005ea6:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005eaa:	ee c8 00 48 	sub	r8,r7,72
80005eae:	f0 ca 00 00 	sub	r10,r8,0
80005eb2:	f2 cb 00 00 	sub	r11,r9,0
80005eb6:	76 0c       	ld.w	r12,r11[0x0]
80005eb8:	95 0c       	st.w	r10[0x0],r12
80005eba:	76 1c       	ld.w	r12,r11[0x4]
80005ebc:	95 1c       	st.w	r10[0x4],r12
80005ebe:	76 2c       	ld.w	r12,r11[0x8]
80005ec0:	95 2c       	st.w	r10[0x8],r12
80005ec2:	76 3b       	ld.w	r11,r11[0xc]
80005ec4:	95 3b       	st.w	r10[0xc],r11
80005ec6:	f0 ca ff f0 	sub	r10,r8,-16
80005eca:	f2 cb ff f0 	sub	r11,r9,-16
80005ece:	76 0c       	ld.w	r12,r11[0x0]
80005ed0:	95 0c       	st.w	r10[0x0],r12
80005ed2:	76 1c       	ld.w	r12,r11[0x4]
80005ed4:	95 1c       	st.w	r10[0x4],r12
80005ed6:	76 2c       	ld.w	r12,r11[0x8]
80005ed8:	95 2c       	st.w	r10[0x8],r12
80005eda:	76 3b       	ld.w	r11,r11[0xc]
80005edc:	95 3b       	st.w	r10[0xc],r11
80005ede:	f2 ea 00 20 	ld.d	r10,r9[32]
80005ee2:	f0 eb 00 20 	st.d	r8[32],r10
80005ee6:	72 a9       	ld.w	r9,r9[0x28]
80005ee8:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
80005eea:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005eee:	70 88       	ld.w	r8,r8[0x20]
80005ef0:	58 18       	cp.w	r8,1
80005ef2:	e0 80 00 e0 	breq	800060b2 <cascade_stabilise_copter+0x226>
80005ef6:	c0 63       	brcs	80005f02 <cascade_stabilise_copter+0x76>
80005ef8:	58 28       	cp.w	r8,2
80005efa:	e0 80 01 41 	breq	8000617c <cascade_stabilise_copter+0x2f0>
80005efe:	e0 8f 01 79 	bral	800061f0 <cascade_stabilise_copter+0x364>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL] = input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
80005f02:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005f06:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f0a:	70 c8       	ld.w	r8,r8[0x30]
80005f0c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f10:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH]=-(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80005f14:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005f18:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f1c:	70 b8       	ld.w	r8,r8[0x2c]
80005f1e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f22:	ee 18 80 00 	eorh	r8,0x8000
80005f26:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]    =-(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80005f2a:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005f2e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f32:	71 08       	ld.w	r8,r8[0x40]
80005f34:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f38:	ee 18 80 00 	eorh	r8,0x8000
80005f3c:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
80005f40:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005f44:	70 98       	ld.w	r8,r8[0x24]
80005f46:	58 28       	cp.w	r8,2
80005f48:	c5 71       	brne	80005ff6 <cascade_stabilise_copter+0x16a>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80005f4a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f4e:	70 b8       	ld.w	r8,r8[0x2c]
80005f50:	10 9c       	mov	r12,r8
80005f52:	f0 16 00 02 	mcall	r6[8]
80005f56:	14 92       	mov	r2,r10
80005f58:	16 93       	mov	r3,r11
80005f5a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f5e:	70 c8       	ld.w	r8,r8[0x30]
80005f60:	10 9c       	mov	r12,r8
80005f62:	f0 16 00 02 	mcall	r6[8]
80005f66:	04 98       	mov	r8,r2
80005f68:	06 99       	mov	r9,r3
80005f6a:	f0 16 00 54 	mcall	r6[336]
80005f6e:	14 98       	mov	r8,r10
80005f70:	16 99       	mov	r9,r11
80005f72:	10 9a       	mov	r10,r8
80005f74:	12 9b       	mov	r11,r9
80005f76:	f0 16 00 08 	mcall	r6[32]
80005f7a:	18 98       	mov	r8,r12
80005f7c:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
80005f80:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f84:	70 b9       	ld.w	r9,r8[0x2c]
80005f86:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f8a:	70 b8       	ld.w	r8,r8[0x2c]
80005f8c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005f90:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f94:	70 ca       	ld.w	r10,r8[0x30]
80005f96:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f9a:	70 c8       	ld.w	r8,r8[0x30]
80005f9c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005fa0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005fa4:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(centralData->stabiliser_stack.yaw_coordination_velocity)) {
80005fa8:	ec f8 00 00 	ld.w	r8,r6[0]
80005fac:	70 08       	ld.w	r8,r8[0x0]
80005fae:	f0 f9 05 54 	ld.w	r9,r8[1364]
80005fb2:	ec f8 00 00 	ld.w	r8,r6[0]
80005fb6:	70 08       	ld.w	r8,r8[0x0]
80005fb8:	f0 f8 05 54 	ld.w	r8,r8[1364]
80005fbc:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80005fc0:	30 18       	mov	r8,1
80005fc2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005fc6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005fca:	e0 8c 00 03 	brvs	80005fd0 <cascade_stabilise_copter+0x144>
80005fce:	c0 25       	brlt	80005fd2 <cascade_stabilise_copter+0x146>
80005fd0:	30 08       	mov	r8,0
80005fd2:	5c 58       	castu.b	r8
80005fd4:	c1 10       	breq	80005ff6 <cascade_stabilise_copter+0x16a>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
80005fd6:	ee f5 ff c0 	ld.w	r5,r7[-64]
80005fda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005fde:	fc 18 40 40 	movh	r8,0x4040
80005fe2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005fe6:	10 9c       	mov	r12,r8
80005fe8:	fe b0 fb 60 	rcall	800056a8 <sigmoid>
80005fec:	18 98       	mov	r8,r12
80005fee:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005ff2:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
80005ff6:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005ffa:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&centralData->stabiliser_stack.velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80005ffe:	ec f8 00 00 	ld.w	r8,r6[0]
80006002:	70 08       	ld.w	r8,r8[0x0]
80006004:	f0 f9 01 40 	ld.w	r9,r8[320]
80006008:	ec f8 00 00 	ld.w	r8,r6[0]
8000600c:	70 08       	ld.w	r8,r8[0x0]
8000600e:	f0 c8 fb e8 	sub	r8,r8,-1048
80006012:	ee ca 00 1c 	sub	r10,r7,28
80006016:	12 9b       	mov	r11,r9
80006018:	10 9c       	mov	r12,r8
8000601a:	f0 16 00 cc 	mcall	r6[816]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		centralData->stabiliser_stack.velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
8000601e:	ec f8 00 00 	ld.w	r8,r6[0]
80006022:	70 05       	ld.w	r5,r8[0x0]
80006024:	ec f8 00 00 	ld.w	r8,r6[0]
80006028:	70 08       	ld.w	r8,r8[0x0]
8000602a:	f0 f8 05 34 	ld.w	r8,r8[1332]
8000602e:	10 9c       	mov	r12,r8
80006030:	f0 16 00 02 	mcall	r6[8]
80006034:	e0 68 33 33 	mov	r8,13107
80006038:	ea 18 33 33 	orh	r8,0x3333
8000603c:	e0 69 33 33 	mov	r9,13107
80006040:	ea 19 3f d3 	orh	r9,0x3fd3
80006044:	f0 16 00 11 	mcall	r6[68]
80006048:	14 98       	mov	r8,r10
8000604a:	16 99       	mov	r9,r11
8000604c:	10 9a       	mov	r10,r8
8000604e:	12 9b       	mov	r11,r9
80006050:	f0 16 00 08 	mcall	r6[32]
80006054:	18 98       	mov	r8,r12
80006056:	eb 48 05 34 	st.w	r5[1332],r8
		centralData->stabiliser_stack.velocity_stabiliser.output.theading = input.theading;
8000605a:	ec f8 00 00 	ld.w	r8,r6[0]
8000605e:	70 08       	ld.w	r8,r8[0x0]
80006060:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006064:	f1 49 05 44 	st.w	r8[1348],r9
		input = centralData->stabiliser_stack.velocity_stabiliser.output;
80006068:	ec f8 00 00 	ld.w	r8,r6[0]
8000606c:	70 09       	ld.w	r9,r8[0x0]
8000606e:	ee c8 00 48 	sub	r8,r7,72
80006072:	f2 c9 fa d8 	sub	r9,r9,-1320
80006076:	f0 ca 00 00 	sub	r10,r8,0
8000607a:	f2 cb 00 00 	sub	r11,r9,0
8000607e:	76 0c       	ld.w	r12,r11[0x0]
80006080:	95 0c       	st.w	r10[0x0],r12
80006082:	76 1c       	ld.w	r12,r11[0x4]
80006084:	95 1c       	st.w	r10[0x4],r12
80006086:	76 2c       	ld.w	r12,r11[0x8]
80006088:	95 2c       	st.w	r10[0x8],r12
8000608a:	76 3b       	ld.w	r11,r11[0xc]
8000608c:	95 3b       	st.w	r10[0xc],r11
8000608e:	f0 ca ff f0 	sub	r10,r8,-16
80006092:	f2 cb ff f0 	sub	r11,r9,-16
80006096:	76 0c       	ld.w	r12,r11[0x0]
80006098:	95 0c       	st.w	r10[0x0],r12
8000609a:	76 1c       	ld.w	r12,r11[0x4]
8000609c:	95 1c       	st.w	r10[0x4],r12
8000609e:	76 2c       	ld.w	r12,r11[0x8]
800060a0:	95 2c       	st.w	r10[0x8],r12
800060a2:	76 3b       	ld.w	r11,r11[0xc]
800060a4:	95 3b       	st.w	r10[0xc],r11
800060a6:	f2 ea 00 20 	ld.d	r10,r9[32]
800060aa:	f0 eb 00 20 	st.d	r8[32],r10
800060ae:	72 a9       	ld.w	r9,r9[0x28]
800060b0:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
800060b2:	ee f9 ff b8 	ld.w	r9,r7[-72]
800060b6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800060ba:	70 68       	ld.w	r8,r8[0x18]
800060bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800060c0:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
800060c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800060c8:	ee f8 ff b4 	ld.w	r8,r7[-76]
800060cc:	70 58       	ld.w	r8,r8[0x14]
800060ce:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800060d2:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
800060d6:	ee f8 ff c0 	ld.w	r8,r7[-64]
800060da:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
800060de:	ee f8 ff ac 	ld.w	r8,r7[-84]
800060e2:	70 98       	ld.w	r8,r8[0x24]
800060e4:	58 18       	cp.w	r8,1
800060e6:	c1 21       	brne	8000610a <cascade_stabilise_copter+0x27e>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
800060e8:	ee f5 ff ec 	ld.w	r5,r7[-20]
800060ec:	ee f9 ff d4 	ld.w	r9,r7[-44]
800060f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800060f4:	71 b8       	ld.w	r8,r8[0x6c]
800060f6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800060fa:	10 9c       	mov	r12,r8
800060fc:	fe b0 f9 fc 	rcall	800054f4 <calc_smaller_angle>
80006100:	18 98       	mov	r8,r12
80006102:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80006106:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
8000610a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000610e:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
80006112:	ec f8 00 00 	ld.w	r8,r6[0]
80006116:	70 08       	ld.w	r8,r8[0x0]
80006118:	f0 f9 01 40 	ld.w	r9,r8[320]
8000611c:	ec f8 00 00 	ld.w	r8,r6[0]
80006120:	70 08       	ld.w	r8,r8[0x0]
80006122:	f0 c8 fd 24 	sub	r8,r8,-732
80006126:	ee ca 00 1c 	sub	r10,r7,28
8000612a:	12 9b       	mov	r11,r9
8000612c:	10 9c       	mov	r12,r8
8000612e:	f0 16 00 cc 	mcall	r6[816]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
80006132:	ec f8 00 00 	ld.w	r8,r6[0]
80006136:	70 09       	ld.w	r9,r8[0x0]
80006138:	ee c8 00 48 	sub	r8,r7,72
8000613c:	f2 c9 fc 14 	sub	r9,r9,-1004
80006140:	f0 ca 00 00 	sub	r10,r8,0
80006144:	f2 cb 00 00 	sub	r11,r9,0
80006148:	76 0c       	ld.w	r12,r11[0x0]
8000614a:	95 0c       	st.w	r10[0x0],r12
8000614c:	76 1c       	ld.w	r12,r11[0x4]
8000614e:	95 1c       	st.w	r10[0x4],r12
80006150:	76 2c       	ld.w	r12,r11[0x8]
80006152:	95 2c       	st.w	r10[0x8],r12
80006154:	76 3b       	ld.w	r11,r11[0xc]
80006156:	95 3b       	st.w	r10[0xc],r11
80006158:	f0 ca ff f0 	sub	r10,r8,-16
8000615c:	f2 cb ff f0 	sub	r11,r9,-16
80006160:	76 0c       	ld.w	r12,r11[0x0]
80006162:	95 0c       	st.w	r10[0x0],r12
80006164:	76 1c       	ld.w	r12,r11[0x4]
80006166:	95 1c       	st.w	r10[0x4],r12
80006168:	76 2c       	ld.w	r12,r11[0x8]
8000616a:	95 2c       	st.w	r10[0x8],r12
8000616c:	76 3b       	ld.w	r11,r11[0xc]
8000616e:	95 3b       	st.w	r10[0xc],r11
80006170:	f2 ea 00 20 	ld.d	r10,r9[32]
80006174:	f0 eb 00 20 	st.d	r8[32],r10
80006178:	72 a9       	ld.w	r9,r9[0x28]
8000617a:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
8000617c:	30 08       	mov	r8,0
8000617e:	ef 48 ff f4 	st.w	r7[-12],r8
80006182:	c1 e8       	rjmp	800061be <cascade_stabilise_copter+0x332>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80006184:	ee fa ff f4 	ld.w	r10,r7[-12]
80006188:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000618c:	a3 68       	lsl	r8,0x2
8000618e:	ee 08 00 08 	add	r8,r7,r8
80006192:	f0 f9 ff b8 	ld.w	r9,r8[-72]
80006196:	ee fb ff f4 	ld.w	r11,r7[-12]
8000619a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000619e:	2e 2b       	sub	r11,-30
800061a0:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800061a4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800061a8:	f4 08 15 02 	lsl	r8,r10,0x2
800061ac:	ee 08 00 08 	add	r8,r7,r8
800061b0:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800061b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061b8:	2f f8       	sub	r8,-1
800061ba:	ef 48 ff f4 	st.w	r7[-12],r8
800061be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061c2:	58 28       	cp.w	r8,2
800061c4:	fe 9a ff e0 	brle	80006184 <cascade_stabilise_copter+0x2f8>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
800061c8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800061cc:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
800061d0:	ec f8 00 00 	ld.w	r8,r6[0]
800061d4:	70 08       	ld.w	r8,r8[0x0]
800061d6:	f0 f9 01 40 	ld.w	r9,r8[320]
800061da:	ec f8 00 00 	ld.w	r8,r6[0]
800061de:	70 08       	ld.w	r8,r8[0x0]
800061e0:	f0 c8 fe 60 	sub	r8,r8,-416
800061e4:	ee ca 00 1c 	sub	r10,r7,28
800061e8:	12 9b       	mov	r11,r9
800061ea:	10 9c       	mov	r12,r8
800061ec:	f0 16 00 cc 	mcall	r6[816]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
800061f0:	ec f8 00 00 	ld.w	r8,r6[0]
800061f4:	70 08       	ld.w	r8,r8[0x0]
800061f6:	f0 c8 fd 50 	sub	r8,r8,-688
800061fa:	10 9c       	mov	r12,r8
800061fc:	f0 16 01 e9 	mcall	r6[1956]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
	#endif
	#endif
	
}
80006200:	2e bd       	sub	sp,-84
80006202:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80006206:	00 00       	add	r0,r0
80006208:	80 00       	ld.sh	r0,r0[0x0]
8000620a:	5d 1c       	icall	r12

8000620c <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
8000620c:	eb cd 40 e0 	pushm	r5-r7,lr
80006210:	1a 97       	mov	r7,sp
80006212:	20 6d       	sub	sp,24
80006214:	4e 96       	lddpc	r6,800063b8 <mix_to_servos_diag_quad+0x1ac>
80006216:	1e 26       	rsub	r6,pc
80006218:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
8000621c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006220:	70 39       	ld.w	r9,r8[0xc]
80006222:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006226:	70 1a       	ld.w	r10,r8[0x4]
80006228:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000622c:	70 08       	ld.w	r8,r8[0x0]
8000622e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006232:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006236:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000623a:	70 28       	ld.w	r8,r8[0x8]
8000623c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006240:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
80006244:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006248:	70 39       	ld.w	r9,r8[0xc]
8000624a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000624e:	70 0a       	ld.w	r10,r8[0x0]
80006250:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006254:	70 18       	ld.w	r8,r8[0x4]
80006256:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000625a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000625e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006262:	70 28       	ld.w	r8,r8[0x8]
80006264:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006268:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
8000626c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006270:	70 39       	ld.w	r9,r8[0xc]
80006272:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006276:	70 08       	ld.w	r8,r8[0x0]
80006278:	10 9a       	mov	r10,r8
8000627a:	ee 1a 80 00 	eorh	r10,0x8000
8000627e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006282:	70 18       	ld.w	r8,r8[0x4]
80006284:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006288:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000628c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006290:	70 28       	ld.w	r8,r8[0x8]
80006292:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006296:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
8000629a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000629e:	70 39       	ld.w	r9,r8[0xc]
800062a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062a4:	70 0a       	ld.w	r10,r8[0x0]
800062a6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062aa:	70 18       	ld.w	r8,r8[0x4]
800062ac:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800062b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800062b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062b8:	70 28       	ld.w	r8,r8[0x8]
800062ba:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800062be:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
800062c2:	30 08       	mov	r8,0
800062c4:	ef 48 ff fc 	st.w	r7[-4],r8
800062c8:	c4 98       	rjmp	8000635a <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
800062ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800062ce:	a3 68       	lsl	r8,0x2
800062d0:	ee 08 00 08 	add	r8,r7,r8
800062d4:	f0 f8 ff ec 	ld.w	r8,r8[-20]
800062d8:	10 9c       	mov	r12,r8
800062da:	f0 16 00 02 	mcall	r6[8]
800062de:	30 05       	mov	r5,0
800062e0:	e0 68 cc cd 	mov	r8,52429
800062e4:	ea 18 cc cc 	orh	r8,0xcccc
800062e8:	e0 69 cc cc 	mov	r9,52428
800062ec:	ea 19 bf ec 	orh	r9,0xbfec
800062f0:	f0 16 00 1e 	mcall	r6[120]
800062f4:	18 98       	mov	r8,r12
800062f6:	58 08       	cp.w	r8,0
800062f8:	c0 20       	breq	800062fc <mix_to_servos_diag_quad+0xf0>
800062fa:	30 15       	mov	r5,1
800062fc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80006300:	c0 c0       	breq	80006318 <mix_to_servos_diag_quad+0x10c>
80006302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006306:	a3 68       	lsl	r8,0x2
80006308:	ee 08 00 08 	add	r8,r7,r8
8000630c:	e0 69 66 66 	mov	r9,26214
80006310:	ea 19 bf 66 	orh	r9,0xbf66
80006314:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80006318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000631c:	a3 68       	lsl	r8,0x2
8000631e:	ee 08 00 08 	add	r8,r7,r8
80006322:	f0 fa ff ec 	ld.w	r10,r8[-20]
80006326:	30 18       	mov	r8,1
80006328:	fc 19 3f 80 	movh	r9,0x3f80
8000632c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006330:	e0 8c 00 04 	brvs	80006338 <mix_to_servos_diag_quad+0x12c>
80006334:	e0 89 00 03 	brgt	8000633a <mix_to_servos_diag_quad+0x12e>
80006338:	30 08       	mov	r8,0
8000633a:	5c 58       	castu.b	r8
8000633c:	c0 a0       	breq	80006350 <mix_to_servos_diag_quad+0x144>
8000633e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006342:	a3 68       	lsl	r8,0x2
80006344:	ee 08 00 08 	add	r8,r7,r8
80006348:	fc 19 3f 80 	movh	r9,0x3f80
8000634c:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80006350:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006354:	2f f8       	sub	r8,-1
80006356:	ef 48 ff fc 	st.w	r7[-4],r8
8000635a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000635e:	58 38       	cp.w	r8,3
80006360:	fe 9a ff b5 	brle	800062ca <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80006364:	30 08       	mov	r8,0
80006366:	ef 48 ff fc 	st.w	r7[-4],r8
8000636a:	c1 f8       	rjmp	800063a8 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
8000636c:	ec f8 00 00 	ld.w	r8,r6[0]
80006370:	70 0a       	ld.w	r10,r8[0x0]
80006372:	ee fb ff fc 	ld.w	r11,r7[-4]
80006376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000637a:	a3 68       	lsl	r8,0x2
8000637c:	ee 08 00 08 	add	r8,r7,r8
80006380:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80006384:	fc 18 43 fa 	movh	r8,0x43fa
80006388:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000638c:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80006390:	f6 08 15 04 	lsl	r8,r11,0x4
80006394:	f4 08 00 08 	add	r8,r10,r8
80006398:	f0 c8 f9 14 	sub	r8,r8,-1772
8000639c:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
8000639e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063a2:	2f f8       	sub	r8,-1
800063a4:	ef 48 ff fc 	st.w	r7[-4],r8
800063a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063ac:	58 38       	cp.w	r8,3
800063ae:	fe 9a ff df 	brle	8000636c <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
800063b2:	2f ad       	sub	sp,-24
800063b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800063b8:	80 00       	ld.sh	r0,r0[0x0]
800063ba:	60 9a       	ld.w	r10,r0[0x24]

800063bc <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
800063bc:	eb cd 40 e0 	pushm	r5-r7,lr
800063c0:	1a 97       	mov	r7,sp
800063c2:	20 6d       	sub	sp,24
800063c4:	4d e6       	lddpc	r6,8000653c <mix_to_servos_cross_quad+0x180>
800063c6:	1e 26       	rsub	r6,pc
800063c8:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
800063cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063d0:	70 39       	ld.w	r9,r8[0xc]
800063d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063d6:	70 18       	ld.w	r8,r8[0x4]
800063d8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800063dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063e0:	70 28       	ld.w	r8,r8[0x8]
800063e2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800063e6:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
800063ea:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063ee:	70 39       	ld.w	r9,r8[0xc]
800063f0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063f4:	70 08       	ld.w	r8,r8[0x0]
800063f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800063fa:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063fe:	70 28       	ld.w	r8,r8[0x8]
80006400:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006404:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80006408:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000640c:	70 39       	ld.w	r9,r8[0xc]
8000640e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006412:	70 18       	ld.w	r8,r8[0x4]
80006414:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006418:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000641c:	70 28       	ld.w	r8,r8[0x8]
8000641e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006422:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80006426:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000642a:	70 39       	ld.w	r9,r8[0xc]
8000642c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006430:	70 08       	ld.w	r8,r8[0x0]
80006432:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006436:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000643a:	70 28       	ld.w	r8,r8[0x8]
8000643c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006440:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80006444:	30 08       	mov	r8,0
80006446:	ef 48 ff fc 	st.w	r7[-4],r8
8000644a:	c4 98       	rjmp	800064dc <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
8000644c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006450:	a3 68       	lsl	r8,0x2
80006452:	ee 08 00 08 	add	r8,r7,r8
80006456:	f0 f8 ff ec 	ld.w	r8,r8[-20]
8000645a:	10 9c       	mov	r12,r8
8000645c:	f0 16 00 02 	mcall	r6[8]
80006460:	30 05       	mov	r5,0
80006462:	e0 68 cc cd 	mov	r8,52429
80006466:	ea 18 cc cc 	orh	r8,0xcccc
8000646a:	e0 69 cc cc 	mov	r9,52428
8000646e:	ea 19 bf ec 	orh	r9,0xbfec
80006472:	f0 16 00 1e 	mcall	r6[120]
80006476:	18 98       	mov	r8,r12
80006478:	58 08       	cp.w	r8,0
8000647a:	c0 20       	breq	8000647e <mix_to_servos_cross_quad+0xc2>
8000647c:	30 15       	mov	r5,1
8000647e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80006482:	c0 c0       	breq	8000649a <mix_to_servos_cross_quad+0xde>
80006484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006488:	a3 68       	lsl	r8,0x2
8000648a:	ee 08 00 08 	add	r8,r7,r8
8000648e:	e0 69 66 66 	mov	r9,26214
80006492:	ea 19 bf 66 	orh	r9,0xbf66
80006496:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
8000649a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000649e:	a3 68       	lsl	r8,0x2
800064a0:	ee 08 00 08 	add	r8,r7,r8
800064a4:	f0 fa ff ec 	ld.w	r10,r8[-20]
800064a8:	30 18       	mov	r8,1
800064aa:	fc 19 3f 80 	movh	r9,0x3f80
800064ae:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800064b2:	e0 8c 00 04 	brvs	800064ba <mix_to_servos_cross_quad+0xfe>
800064b6:	e0 89 00 03 	brgt	800064bc <mix_to_servos_cross_quad+0x100>
800064ba:	30 08       	mov	r8,0
800064bc:	5c 58       	castu.b	r8
800064be:	c0 a0       	breq	800064d2 <mix_to_servos_cross_quad+0x116>
800064c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064c4:	a3 68       	lsl	r8,0x2
800064c6:	ee 08 00 08 	add	r8,r7,r8
800064ca:	fc 19 3f 80 	movh	r9,0x3f80
800064ce:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
800064d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064d6:	2f f8       	sub	r8,-1
800064d8:	ef 48 ff fc 	st.w	r7[-4],r8
800064dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064e0:	58 38       	cp.w	r8,3
800064e2:	fe 9a ff b5 	brle	8000644c <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
800064e6:	30 08       	mov	r8,0
800064e8:	ef 48 ff fc 	st.w	r7[-4],r8
800064ec:	c1 f8       	rjmp	8000652a <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
800064ee:	ec f8 00 00 	ld.w	r8,r6[0]
800064f2:	70 0a       	ld.w	r10,r8[0x0]
800064f4:	ee fb ff fc 	ld.w	r11,r7[-4]
800064f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064fc:	a3 68       	lsl	r8,0x2
800064fe:	ee 08 00 08 	add	r8,r7,r8
80006502:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80006506:	fc 18 43 fa 	movh	r8,0x43fa
8000650a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000650e:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80006512:	f6 08 15 04 	lsl	r8,r11,0x4
80006516:	f4 08 00 08 	add	r8,r10,r8
8000651a:	f0 c8 f9 14 	sub	r8,r8,-1772
8000651e:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80006520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006524:	2f f8       	sub	r8,-1
80006526:	ef 48 ff fc 	st.w	r7[-4],r8
8000652a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000652e:	58 38       	cp.w	r8,3
80006530:	fe 9a ff df 	brle	800064ee <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
80006534:	2f ad       	sub	sp,-24
80006536:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000653a:	00 00       	add	r0,r0
8000653c:	80 00       	ld.sh	r0,r0[0x0]
8000653e:	62 4a       	ld.w	r10,r1[0x10]

80006540 <init_analog_monitor>:
80006540:	eb cd 40 c0 	pushm	r6-r7,lr
80006544:	1a 97       	mov	r7,sp
80006546:	49 06       	lddpc	r6,80006584 <init_analog_monitor+0x44>
80006548:	1e 26       	rsub	r6,pc
8000654a:	30 49       	mov	r9,4
8000654c:	31 0a       	mov	r10,16
8000654e:	30 1b       	mov	r11,1
80006550:	e0 7c 86 a0 	mov	r12,100000
80006554:	f0 16 02 11 	mcall	r6[2116]
80006558:	30 0a       	mov	r10,0
8000655a:	30 9b       	mov	r11,9
8000655c:	30 6c       	mov	r12,6
8000655e:	f0 16 00 93 	mcall	r6[588]
80006562:	30 0a       	mov	r10,0
80006564:	30 9b       	mov	r11,9
80006566:	30 7c       	mov	r12,7
80006568:	f0 16 00 93 	mcall	r6[588]
8000656c:	30 0a       	mov	r10,0
8000656e:	30 2b       	mov	r11,2
80006570:	30 ac       	mov	r12,10
80006572:	f0 16 00 93 	mcall	r6[588]
80006576:	30 0a       	mov	r10,0
80006578:	30 3b       	mov	r11,3
8000657a:	30 ac       	mov	r12,10
8000657c:	f0 16 00 93 	mcall	r6[588]
80006580:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006584:	80 00       	ld.sh	r0,r0[0x0]
80006586:	63 cc       	ld.w	r12,r1[0x70]

80006588 <trigger_analog_monitor>:
80006588:	eb cd 40 c0 	pushm	r6-r7,lr
8000658c:	1a 97       	mov	r7,sp
8000658e:	48 76       	lddpc	r6,800065a8 <trigger_analog_monitor+0x20>
80006590:	1e 26       	rsub	r6,pc
80006592:	30 08       	mov	r8,0
80006594:	36 49       	mov	r9,100
80006596:	30 aa       	mov	r10,10
80006598:	30 4b       	mov	r11,4
8000659a:	ec fc 03 c4 	ld.w	r12,r6[964]
8000659e:	f0 16 01 92 	mcall	r6[1608]
800065a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800065a6:	00 00       	add	r0,r0
800065a8:	80 00       	ld.sh	r0,r0[0x0]
800065aa:	64 14       	ld.w	r4,r2[0x4]

800065ac <get_monitored_avg>:
800065ac:	eb cd 40 c0 	pushm	r6-r7,lr
800065b0:	1a 97       	mov	r7,sp
800065b2:	20 3d       	sub	sp,12
800065b4:	49 c6       	lddpc	r6,80006624 <get_monitored_avg+0x78>
800065b6:	1e 26       	rsub	r6,pc
800065b8:	ef 4c ff f4 	st.w	r7[-12],r12
800065bc:	30 08       	mov	r8,0
800065be:	ef 48 ff f8 	st.w	r7[-8],r8
800065c2:	30 08       	mov	r8,0
800065c4:	ef 48 ff fc 	st.w	r7[-4],r8
800065c8:	c1 98       	rjmp	800065fa <get_monitored_avg+0x4e>
800065ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065ce:	f0 09 15 02 	lsl	r9,r8,0x2
800065d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065d6:	10 09       	add	r9,r8
800065d8:	ec f8 03 c4 	ld.w	r8,r6[964]
800065dc:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800065e0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800065e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065e8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800065ec:	ef 48 ff f8 	st.w	r7[-8],r8
800065f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065f4:	2f f8       	sub	r8,-1
800065f6:	ef 48 ff fc 	st.w	r7[-4],r8
800065fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065fe:	58 98       	cp.w	r8,9
80006600:	fe 9a ff e5 	brle	800065ca <get_monitored_avg+0x1e>
80006604:	fc 1b 41 20 	movh	r11,0x4120
80006608:	ee fc ff f8 	ld.w	r12,r7[-8]
8000660c:	f0 16 00 0a 	mcall	r6[40]
80006610:	18 98       	mov	r8,r12
80006612:	ef 48 ff f8 	st.w	r7[-8],r8
80006616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000661a:	10 9c       	mov	r12,r8
8000661c:	2f dd       	sub	sp,-12
8000661e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006622:	00 00       	add	r0,r0
80006624:	80 00       	ld.sh	r0,r0[0x0]
80006626:	64 3a       	ld.w	r10,r2[0xc]

80006628 <get_battery_rail>:
80006628:	eb cd 40 c0 	pushm	r6-r7,lr
8000662c:	1a 97       	mov	r7,sp
8000662e:	48 f6       	lddpc	r6,80006668 <get_battery_rail+0x40>
80006630:	1e 26       	rsub	r6,pc
80006632:	30 3c       	mov	r12,3
80006634:	f0 16 00 89 	mcall	r6[548]
80006638:	18 98       	mov	r8,r12
8000663a:	10 9c       	mov	r12,r8
8000663c:	f0 16 00 02 	mcall	r6[8]
80006640:	e0 68 67 a1 	mov	r8,26529
80006644:	ea 18 ea b3 	orh	r8,0xeab3
80006648:	e0 69 b5 73 	mov	r9,46451
8000664c:	ea 19 bf 65 	orh	r9,0xbf65
80006650:	f0 16 00 03 	mcall	r6[12]
80006654:	14 98       	mov	r8,r10
80006656:	16 99       	mov	r9,r11
80006658:	10 9a       	mov	r10,r8
8000665a:	12 9b       	mov	r11,r9
8000665c:	f0 16 00 08 	mcall	r6[32]
80006660:	18 98       	mov	r8,r12
80006662:	10 9c       	mov	r12,r8
80006664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006668:	80 00       	ld.sh	r0,r0[0x0]
8000666a:	64 b4       	ld.w	r4,r2[0x2c]

8000666c <get_internal_rail>:
8000666c:	eb cd 40 c0 	pushm	r6-r7,lr
80006670:	1a 97       	mov	r7,sp
80006672:	48 f6       	lddpc	r6,800066ac <get_internal_rail+0x40>
80006674:	1e 26       	rsub	r6,pc
80006676:	30 2c       	mov	r12,2
80006678:	f0 16 00 89 	mcall	r6[548]
8000667c:	18 98       	mov	r8,r12
8000667e:	10 9c       	mov	r12,r8
80006680:	f0 16 00 02 	mcall	r6[8]
80006684:	e0 68 67 a1 	mov	r8,26529
80006688:	ea 18 ea b3 	orh	r8,0xeab3
8000668c:	e0 69 b5 73 	mov	r9,46451
80006690:	ea 19 bf 65 	orh	r9,0xbf65
80006694:	f0 16 00 03 	mcall	r6[12]
80006698:	14 98       	mov	r8,r10
8000669a:	16 99       	mov	r9,r11
8000669c:	10 9a       	mov	r10,r8
8000669e:	12 9b       	mov	r11,r9
800066a0:	f0 16 00 08 	mcall	r6[32]
800066a4:	18 98       	mov	r8,r12
800066a6:	10 9c       	mov	r12,r8
800066a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066ac:	80 00       	ld.sh	r0,r0[0x0]
800066ae:	64 f8       	ld.w	r8,r2[0x3c]

800066b0 <get_6V_analog_rail>:
800066b0:	eb cd 40 c0 	pushm	r6-r7,lr
800066b4:	1a 97       	mov	r7,sp
800066b6:	48 f6       	lddpc	r6,800066f0 <get_6V_analog_rail+0x40>
800066b8:	1e 26       	rsub	r6,pc
800066ba:	30 0c       	mov	r12,0
800066bc:	f0 16 00 89 	mcall	r6[548]
800066c0:	18 98       	mov	r8,r12
800066c2:	10 9c       	mov	r12,r8
800066c4:	f0 16 00 02 	mcall	r6[8]
800066c8:	e0 68 61 13 	mov	r8,24851
800066cc:	ea 18 d3 c3 	orh	r8,0xd3c3
800066d0:	e0 69 65 2b 	mov	r9,25899
800066d4:	ea 19 3f 59 	orh	r9,0x3f59
800066d8:	f0 16 00 03 	mcall	r6[12]
800066dc:	14 98       	mov	r8,r10
800066de:	16 99       	mov	r9,r11
800066e0:	10 9a       	mov	r10,r8
800066e2:	12 9b       	mov	r11,r9
800066e4:	f0 16 00 08 	mcall	r6[32]
800066e8:	18 98       	mov	r8,r12
800066ea:	10 9c       	mov	r12,r8
800066ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066f0:	80 00       	ld.sh	r0,r0[0x0]
800066f2:	65 3c       	ld.w	r12,r2[0x4c]

800066f4 <get_5V_analog_rail>:
800066f4:	eb cd 40 c0 	pushm	r6-r7,lr
800066f8:	1a 97       	mov	r7,sp
800066fa:	48 f6       	lddpc	r6,80006734 <get_5V_analog_rail+0x40>
800066fc:	1e 26       	rsub	r6,pc
800066fe:	30 1c       	mov	r12,1
80006700:	f0 16 00 89 	mcall	r6[548]
80006704:	18 98       	mov	r8,r12
80006706:	10 9c       	mov	r12,r8
80006708:	f0 16 00 02 	mcall	r6[8]
8000670c:	e0 68 61 13 	mov	r8,24851
80006710:	ea 18 d3 c3 	orh	r8,0xd3c3
80006714:	e0 69 65 2b 	mov	r9,25899
80006718:	ea 19 3f 59 	orh	r9,0x3f59
8000671c:	f0 16 00 03 	mcall	r6[12]
80006720:	14 98       	mov	r8,r10
80006722:	16 99       	mov	r9,r11
80006724:	10 9a       	mov	r10,r8
80006726:	12 9b       	mov	r11,r9
80006728:	f0 16 00 08 	mcall	r6[32]
8000672c:	18 98       	mov	r8,r12
8000672e:	10 9c       	mov	r12,r8
80006730:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	65 80       	ld.w	r0,r2[0x60]

80006738 <init_time_keeper>:
80006738:	eb cd 40 c0 	pushm	r6-r7,lr
8000673c:	1a 97       	mov	r7,sp
8000673e:	48 86       	lddpc	r6,8000675c <init_time_keeper+0x24>
80006740:	1e 26       	rsub	r6,pc
80006742:	30 09       	mov	r9,0
80006744:	30 5a       	mov	r10,5
80006746:	30 2b       	mov	r11,2
80006748:	fe 7c 0c 00 	mov	r12,-62464
8000674c:	f0 16 01 7f 	mcall	r6[1532]
80006750:	fe 7c 0c 00 	mov	r12,-62464
80006754:	f0 16 01 e0 	mcall	r6[1920]
80006758:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000675c:	80 00       	ld.sh	r0,r0[0x0]
8000675e:	65 c4       	ld.w	r4,r2[0x70]

80006760 <get_time>:
80006760:	eb cd 40 c0 	pushm	r6-r7,lr
80006764:	1a 97       	mov	r7,sp
80006766:	48 a6       	lddpc	r6,8000678c <get_time+0x2c>
80006768:	1e 26       	rsub	r6,pc
8000676a:	f0 16 00 2d 	mcall	r6[180]
8000676e:	18 98       	mov	r8,r12
80006770:	10 9c       	mov	r12,r8
80006772:	f0 16 00 bb 	mcall	r6[748]
80006776:	18 98       	mov	r8,r12
80006778:	10 9c       	mov	r12,r8
8000677a:	f0 16 00 02 	mcall	r6[8]
8000677e:	14 98       	mov	r8,r10
80006780:	16 99       	mov	r9,r11
80006782:	10 9a       	mov	r10,r8
80006784:	12 9b       	mov	r11,r9
80006786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000678a:	00 00       	add	r0,r0
8000678c:	80 00       	ld.sh	r0,r0[0x0]
8000678e:	65 ec       	ld.w	r12,r2[0x78]

80006790 <get_millis>:
80006790:	eb cd 40 c0 	pushm	r6-r7,lr
80006794:	1a 97       	mov	r7,sp
80006796:	48 96       	lddpc	r6,800067b8 <get_millis+0x28>
80006798:	1e 26       	rsub	r6,pc
8000679a:	f0 16 00 2d 	mcall	r6[180]
8000679e:	18 99       	mov	r9,r12
800067a0:	e0 68 4d d3 	mov	r8,19923
800067a4:	ea 18 10 62 	orh	r8,0x1062
800067a8:	f2 08 06 48 	mulu.d	r8,r9,r8
800067ac:	f2 08 16 06 	lsr	r8,r9,0x6
800067b0:	10 9c       	mov	r12,r8
800067b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067b6:	00 00       	add	r0,r0
800067b8:	80 00       	ld.sh	r0,r0[0x0]
800067ba:	66 1c       	ld.w	r12,r3[0x4]

800067bc <get_micros>:
800067bc:	eb cd 40 c0 	pushm	r6-r7,lr
800067c0:	1a 97       	mov	r7,sp
800067c2:	48 56       	lddpc	r6,800067d4 <get_micros+0x18>
800067c4:	1e 26       	rsub	r6,pc
800067c6:	f0 16 00 2d 	mcall	r6[180]
800067ca:	18 98       	mov	r8,r12
800067cc:	10 9c       	mov	r12,r8
800067ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067d2:	00 00       	add	r0,r0
800067d4:	80 00       	ld.sh	r0,r0[0x0]
800067d6:	66 48       	ld.w	r8,r3[0x10]

800067d8 <get_time_ticks>:
800067d8:	eb cd 40 c0 	pushm	r6-r7,lr
800067dc:	1a 97       	mov	r7,sp
800067de:	48 66       	lddpc	r6,800067f4 <get_time_ticks+0x1c>
800067e0:	1e 26       	rsub	r6,pc
800067e2:	fe 7c 0c 00 	mov	r12,-62464
800067e6:	f0 16 02 14 	mcall	r6[2128]
800067ea:	18 98       	mov	r8,r12
800067ec:	10 9c       	mov	r12,r8
800067ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067f2:	00 00       	add	r0,r0
800067f4:	80 00       	ld.sh	r0,r0[0x0]
800067f6:	66 64       	ld.w	r4,r3[0x18]

800067f8 <ticks_to_seconds>:
800067f8:	eb cd 40 c0 	pushm	r6-r7,lr
800067fc:	1a 97       	mov	r7,sp
800067fe:	20 1d       	sub	sp,4
80006800:	48 d6       	lddpc	r6,80006834 <ticks_to_seconds+0x3c>
80006802:	1e 26       	rsub	r6,pc
80006804:	ef 4c ff fc 	st.w	r7[-4],r12
80006808:	ee fc ff fc 	ld.w	r12,r7[-4]
8000680c:	f0 16 00 52 	mcall	r6[328]
80006810:	30 08       	mov	r8,0
80006812:	e0 69 84 80 	mov	r9,33920
80006816:	ea 19 41 2e 	orh	r9,0x412e
8000681a:	f0 16 00 0c 	mcall	r6[48]
8000681e:	14 98       	mov	r8,r10
80006820:	16 99       	mov	r9,r11
80006822:	10 9a       	mov	r10,r8
80006824:	12 9b       	mov	r11,r9
80006826:	f0 16 00 08 	mcall	r6[32]
8000682a:	18 98       	mov	r8,r12
8000682c:	10 9c       	mov	r12,r8
8000682e:	2f fd       	sub	sp,-4
80006830:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006834:	80 00       	ld.sh	r0,r0[0x0]
80006836:	66 86       	ld.w	r6,r3[0x20]

80006838 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80006838:	eb cd 40 c0 	pushm	r6-r7,lr
8000683c:	1a 97       	mov	r7,sp
8000683e:	20 3d       	sub	sp,12
80006840:	49 06       	lddpc	r6,80006880 <mav_array_memcpy+0x48>
80006842:	1e 26       	rsub	r6,pc
80006844:	ef 4c ff fc 	st.w	r7[-4],r12
80006848:	ef 4b ff f8 	st.w	r7[-8],r11
8000684c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80006850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006854:	58 08       	cp.w	r8,0
80006856:	c0 91       	brne	80006868 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80006858:	ee fa ff f4 	ld.w	r10,r7[-12]
8000685c:	30 0b       	mov	r11,0
8000685e:	ee fc ff fc 	ld.w	r12,r7[-4]
80006862:	f0 16 00 31 	mcall	r6[196]
80006866:	c0 98       	rjmp	80006878 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80006868:	ee fa ff f4 	ld.w	r10,r7[-12]
8000686c:	ee fb ff f8 	ld.w	r11,r7[-8]
80006870:	ee fc ff fc 	ld.w	r12,r7[-4]
80006874:	f0 16 00 1b 	mcall	r6[108]
	}
}
80006878:	2f dd       	sub	sp,-12
8000687a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000687e:	00 00       	add	r0,r0
80006880:	80 00       	ld.sh	r0,r0[0x0]
80006882:	66 c6       	ld.w	r6,r3[0x30]

80006884 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80006884:	eb cd 40 c0 	pushm	r6-r7,lr
80006888:	1a 97       	mov	r7,sp
8000688a:	fe f6 02 06 	ld.w	r6,pc[518]
8000688e:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80006890:	f0 16 00 33 	mcall	r6[204]
80006894:	18 99       	mov	r9,r12
80006896:	ec f8 00 00 	ld.w	r8,r6[0]
8000689a:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
8000689c:	fc 1b 41 20 	movh	r11,0x4120
800068a0:	30 0c       	mov	r12,0
800068a2:	f0 16 00 c5 	mcall	r6[788]
	e_kalman_init(Y,INIT_Y_P);
800068a6:	fc 1b 41 20 	movh	r11,0x4120
800068aa:	30 1c       	mov	r12,1
800068ac:	f0 16 00 c5 	mcall	r6[788]
	e_kalman_init(Z,INIT_Z_P);
800068b0:	fc 1b 41 20 	movh	r11,0x4120
800068b4:	30 2c       	mov	r12,2
800068b6:	f0 16 00 c5 	mcall	r6[788]
	Q[0][0]=Q_X0;
800068ba:	ec fa 00 e0 	ld.w	r10,r6[224]
800068be:	e0 68 a9 fc 	mov	r8,43516
800068c2:	ea 18 d2 f1 	orh	r8,0xd2f1
800068c6:	e0 69 62 4d 	mov	r9,25165
800068ca:	ea 19 3f 50 	orh	r9,0x3f50
800068ce:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800068d2:	ec fa 00 e0 	ld.w	r10,r6[224]
800068d6:	30 08       	mov	r8,0
800068d8:	30 09       	mov	r9,0
800068da:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800068de:	ec fa 00 e0 	ld.w	r10,r6[224]
800068e2:	30 08       	mov	r8,0
800068e4:	30 09       	mov	r9,0
800068e6:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800068ea:	ec fa 00 e0 	ld.w	r10,r6[224]
800068ee:	30 08       	mov	r8,0
800068f0:	30 09       	mov	r9,0
800068f2:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
800068f6:	ec fa 00 e0 	ld.w	r10,r6[224]
800068fa:	e0 68 a9 fc 	mov	r8,43516
800068fe:	ea 18 d2 f1 	orh	r8,0xd2f1
80006902:	e0 69 62 4d 	mov	r9,25165
80006906:	ea 19 3f 50 	orh	r9,0x3f50
8000690a:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
8000690e:	ec fa 00 e0 	ld.w	r10,r6[224]
80006912:	30 08       	mov	r8,0
80006914:	30 09       	mov	r9,0
80006916:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
8000691a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000691e:	30 08       	mov	r8,0
80006920:	30 09       	mov	r9,0
80006922:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
80006926:	ec fa 00 e0 	ld.w	r10,r6[224]
8000692a:	30 08       	mov	r8,0
8000692c:	30 09       	mov	r9,0
8000692e:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
80006932:	ec fa 00 e0 	ld.w	r10,r6[224]
80006936:	e0 68 a9 fc 	mov	r8,43516
8000693a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000693e:	e0 69 62 4d 	mov	r9,25165
80006942:	ea 19 3f 50 	orh	r9,0x3f50
80006946:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
8000694a:	ec fa 01 70 	ld.w	r10,r6[368]
8000694e:	e0 68 b0 21 	mov	r8,45089
80006952:	ea 18 68 72 	orh	r8,0x6872
80006956:	e0 69 ed 91 	mov	r9,60817
8000695a:	ea 19 3f d8 	orh	r9,0x3fd8
8000695e:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
80006962:	ec fa 01 70 	ld.w	r10,r6[368]
80006966:	e0 68 a1 62 	mov	r8,41314
8000696a:	ea 18 34 d6 	orh	r8,0x34d6
8000696e:	e0 69 38 ef 	mov	r9,14575
80006972:	ea 19 3f e3 	orh	r9,0x3fe3
80006976:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
8000697a:	ec fa 01 70 	ld.w	r10,r6[368]
8000697e:	e0 68 6e 2f 	mov	r8,28207
80006982:	ea 18 01 a3 	orh	r8,0x1a3
80006986:	e0 69 05 bc 	mov	r9,1468
8000698a:	ea 19 40 05 	orh	r9,0x4005
8000698e:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
80006992:	ec fa 00 e4 	ld.w	r10,r6[228]
80006996:	e0 68 a9 fc 	mov	r8,43516
8000699a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000699e:	e0 69 62 4d 	mov	r9,25165
800069a2:	ea 19 3f 50 	orh	r9,0x3f50
800069a6:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
800069aa:	ec fa 00 e4 	ld.w	r10,r6[228]
800069ae:	30 08       	mov	r8,0
800069b0:	30 09       	mov	r9,0
800069b2:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800069b6:	ec fa 00 e4 	ld.w	r10,r6[228]
800069ba:	30 08       	mov	r8,0
800069bc:	30 09       	mov	r9,0
800069be:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800069c2:	ec fa 00 e4 	ld.w	r10,r6[228]
800069c6:	30 08       	mov	r8,0
800069c8:	30 09       	mov	r9,0
800069ca:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800069ce:	ec fa 00 e4 	ld.w	r10,r6[228]
800069d2:	e0 68 a9 fc 	mov	r8,43516
800069d6:	ea 18 d2 f1 	orh	r8,0xd2f1
800069da:	e0 69 62 4d 	mov	r9,25165
800069de:	ea 19 3f 50 	orh	r9,0x3f50
800069e2:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800069e6:	ec fa 00 e4 	ld.w	r10,r6[228]
800069ea:	30 08       	mov	r8,0
800069ec:	30 09       	mov	r9,0
800069ee:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
800069f2:	ec fa 00 e4 	ld.w	r10,r6[228]
800069f6:	30 08       	mov	r8,0
800069f8:	30 09       	mov	r9,0
800069fa:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
800069fe:	ec fa 00 e4 	ld.w	r10,r6[228]
80006a02:	30 08       	mov	r8,0
80006a04:	30 09       	mov	r9,0
80006a06:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
80006a0a:	ec fa 00 e4 	ld.w	r10,r6[228]
80006a0e:	e0 68 a9 fc 	mov	r8,43516
80006a12:	ea 18 d2 f1 	orh	r8,0xd2f1
80006a16:	e0 69 62 4d 	mov	r9,25165
80006a1a:	ea 19 3f 50 	orh	r9,0x3f50
80006a1e:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80006a22:	ec fa 01 6c 	ld.w	r10,r6[364]
80006a26:	e0 68 b0 21 	mov	r8,45089
80006a2a:	ea 18 68 72 	orh	r8,0x6872
80006a2e:	e0 69 ed 91 	mov	r9,60817
80006a32:	ea 19 3f d8 	orh	r9,0x3fd8
80006a36:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
80006a3a:	ec fa 01 6c 	ld.w	r10,r6[364]
80006a3e:	e0 68 a1 62 	mov	r8,41314
80006a42:	ea 18 34 d6 	orh	r8,0x34d6
80006a46:	e0 69 38 ef 	mov	r9,14575
80006a4a:	ea 19 3f e3 	orh	r9,0x3fe3
80006a4e:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80006a52:	ec fa 01 6c 	ld.w	r10,r6[364]
80006a56:	e0 68 6e 2f 	mov	r8,28207
80006a5a:	ea 18 01 a3 	orh	r8,0x1a3
80006a5e:	e0 69 05 bc 	mov	r9,1468
80006a62:	ea 19 40 05 	orh	r9,0x4005
80006a66:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
80006a6a:	ec f8 00 00 	ld.w	r8,r6[0]
80006a6e:	70 09       	ld.w	r9,r8[0x0]
80006a70:	30 08       	mov	r8,0
80006a72:	f3 68 0d 64 	st.b	r9[3428],r8
	
	timeLastGpsMsgEstimator = 0;
80006a76:	ec f8 02 98 	ld.w	r8,r6[664]
80006a7a:	30 09       	mov	r9,0
80006a7c:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
80006a7e:	ec f9 02 dc 	ld.w	r9,r6[732]
80006a82:	30 08       	mov	r8,0
80006a84:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80006a86:	f0 16 01 17 	mcall	r6[1116]
}
80006a8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006a8e:	00 00       	add	r0,r0
80006a90:	80 00       	ld.sh	r0,r0[0x0]
80006a92:	67 12       	ld.w	r2,r3[0x44]
80006a94:	47 50       	lddsp	r0,sp[0x1d4]
80006a96:	53 20       	stdsp	sp[0xc8],r0
80006a98:	70 6f       	ld.w	pc,r8[0x18]
80006a9a:	73 69       	ld.w	r9,r9[0x58]
80006a9c:	74 69       	ld.w	r9,r10[0x18]
80006a9e:	6f 6e       	ld.w	lr,r7[0x58]
80006aa0:	20 69       	sub	r9,6
80006aa2:	6e 69       	ld.w	r9,r7[0x18]
80006aa4:	74 69       	ld.w	r9,r10[0x18]
80006aa6:	61 6c       	ld.w	r12,r0[0x58]
80006aa8:	69 7a       	ld.w	r10,r4[0x5c]
80006aaa:	65 64       	ld.w	r4,r2[0x58]
80006aac:	21 0a       	sub	r10,16
	...

80006ab0 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
80006ab0:	eb cd 40 c0 	pushm	r6-r7,lr
80006ab4:	1a 97       	mov	r7,sp
80006ab6:	49 f6       	lddpc	r6,80006b30 <init_pos_gps_estimator+0x80>
80006ab8:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
80006aba:	ec fc 02 98 	ld.w	r12,r6[664]
80006abe:	f0 16 00 96 	mcall	r6[600]
80006ac2:	18 98       	mov	r8,r12
80006ac4:	58 08       	cp.w	r8,0
80006ac6:	c3 20       	breq	80006b2a <init_pos_gps_estimator+0x7a>
80006ac8:	ec f8 00 00 	ld.w	r8,r6[0]
80006acc:	70 08       	ld.w	r8,r8[0x0]
80006ace:	f1 38 0d 64 	ld.ub	r8,r8[3428]
80006ad2:	ec 18 00 01 	eorl	r8,0x1
80006ad6:	5c 58       	castu.b	r8
80006ad8:	c2 90       	breq	80006b2a <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
80006ada:	ec f8 00 00 	ld.w	r8,r6[0]
80006ade:	70 09       	ld.w	r9,r8[0x0]
80006ae0:	30 18       	mov	r8,1
80006ae2:	f3 68 0d 64 	st.b	r9[3428],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
80006ae6:	ec f8 00 00 	ld.w	r8,r6[0]
80006aea:	70 0a       	ld.w	r10,r8[0x0]
80006aec:	ec f8 00 00 	ld.w	r8,r6[0]
80006af0:	70 08       	ld.w	r8,r8[0x0]
80006af2:	f0 e8 0b 10 	ld.d	r8,r8[2832]
80006af6:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
80006afa:	ec f8 00 00 	ld.w	r8,r6[0]
80006afe:	70 0a       	ld.w	r10,r8[0x0]
80006b00:	ec f8 00 00 	ld.w	r8,r6[0]
80006b04:	70 08       	ld.w	r8,r8[0x0]
80006b06:	f0 e8 0b 08 	ld.d	r8,r8[2824]
80006b0a:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
80006b0e:	ec f8 00 00 	ld.w	r8,r6[0]
80006b12:	70 08       	ld.w	r8,r8[0x0]
80006b14:	ec f9 00 00 	ld.w	r9,r6[0]
80006b18:	72 09       	ld.w	r9,r9[0x0]
80006b1a:	f2 f9 0b 18 	ld.w	r9,r9[2840]
80006b1e:	f1 49 0d bc 	st.w	r8[3516],r9
		
		dbg_print("GPS position initialized!\n");
80006b22:	fe cc 00 8e 	sub	r12,pc,142
80006b26:	f0 16 00 01 	mcall	r6[4]
	}
}
80006b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b2e:	00 00       	add	r0,r0
80006b30:	80 00       	ld.sh	r0,r0[0x0]
80006b32:	69 3c       	ld.w	r12,r4[0x4c]

80006b34 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80006b34:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80006b38:	1a 97       	mov	r7,sp
80006b3a:	20 4d       	sub	sp,16
80006b3c:	4d e6       	lddpc	r6,80006cb4 <e_kalman_init+0x180>
80006b3e:	1e 26       	rsub	r6,pc
80006b40:	ef 4c ff f4 	st.w	r7[-12],r12
80006b44:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80006b48:	ec f8 00 00 	ld.w	r8,r6[0]
80006b4c:	70 0a       	ld.w	r10,r8[0x0]
80006b4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b52:	12 98       	mov	r8,r9
80006b54:	a1 78       	lsl	r8,0x1
80006b56:	12 08       	add	r8,r9
80006b58:	a3 78       	lsl	r8,0x3
80006b5a:	f4 08 00 08 	add	r8,r10,r8
80006b5e:	f0 ca f4 a4 	sub	r10,r8,-2908
80006b62:	30 08       	mov	r8,0
80006b64:	30 09       	mov	r9,0
80006b66:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
80006b6a:	ec f8 00 00 	ld.w	r8,r6[0]
80006b6e:	70 0a       	ld.w	r10,r8[0x0]
80006b70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b74:	12 98       	mov	r8,r9
80006b76:	a1 78       	lsl	r8,0x1
80006b78:	12 08       	add	r8,r9
80006b7a:	2f f8       	sub	r8,-1
80006b7c:	a3 78       	lsl	r8,0x3
80006b7e:	f4 08 00 08 	add	r8,r10,r8
80006b82:	30 0a       	mov	r10,0
80006b84:	30 0b       	mov	r11,0
80006b86:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
80006b8a:	ec f8 00 00 	ld.w	r8,r6[0]
80006b8e:	70 03       	ld.w	r3,r8[0x0]
80006b90:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006b94:	ec f8 00 00 	ld.w	r8,r6[0]
80006b98:	70 08       	ld.w	r8,r8[0x0]
80006b9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b9e:	2f d9       	sub	r9,-3
80006ba0:	2f 49       	sub	r9,-12
80006ba2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006ba6:	10 9c       	mov	r12,r8
80006ba8:	f0 16 00 02 	mcall	r6[8]
80006bac:	0a 98       	mov	r8,r5
80006bae:	a1 78       	lsl	r8,0x1
80006bb0:	0a 08       	add	r8,r5
80006bb2:	a3 78       	lsl	r8,0x3
80006bb4:	e6 08 00 08 	add	r8,r3,r8
80006bb8:	f0 c8 f4 94 	sub	r8,r8,-2924
80006bbc:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
80006bc0:	30 08       	mov	r8,0
80006bc2:	ef 48 ff f8 	st.w	r7[-8],r8
80006bc6:	c6 e8       	rjmp	80006ca2 <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
80006bc8:	30 08       	mov	r8,0
80006bca:	ef 48 ff fc 	st.w	r7[-4],r8
80006bce:	c3 28       	rjmp	80006c32 <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
80006bd0:	ee fa ff f4 	ld.w	r10,r7[-12]
80006bd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006bd8:	ee fc ff fc 	ld.w	r12,r7[-4]
80006bdc:	ec fb 00 18 	ld.w	r11,r6[24]
80006be0:	10 99       	mov	r9,r8
80006be2:	a1 79       	lsl	r9,0x1
80006be4:	10 09       	add	r9,r8
80006be6:	14 98       	mov	r8,r10
80006be8:	a3 78       	lsl	r8,0x3
80006bea:	14 08       	add	r8,r10
80006bec:	f2 08 00 08 	add	r8,r9,r8
80006bf0:	f0 0c 00 0a 	add	r10,r8,r12
80006bf4:	30 08       	mov	r8,0
80006bf6:	30 09       	mov	r9,0
80006bf8:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80006bfc:	ee fa ff f4 	ld.w	r10,r7[-12]
80006c00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c04:	ee fc ff fc 	ld.w	r12,r7[-4]
80006c08:	ec fb 00 1c 	ld.w	r11,r6[28]
80006c0c:	10 99       	mov	r9,r8
80006c0e:	a1 79       	lsl	r9,0x1
80006c10:	10 09       	add	r9,r8
80006c12:	14 98       	mov	r8,r10
80006c14:	a3 78       	lsl	r8,0x3
80006c16:	14 08       	add	r8,r10
80006c18:	f2 08 00 08 	add	r8,r9,r8
80006c1c:	f0 0c 00 0a 	add	r10,r8,r12
80006c20:	30 08       	mov	r8,0
80006c22:	30 09       	mov	r9,0
80006c24:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80006c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c2c:	2f f8       	sub	r8,-1
80006c2e:	ef 48 ff fc 	st.w	r7[-4],r8
80006c32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c36:	58 28       	cp.w	r8,2
80006c38:	fe 9a ff cc 	brle	80006bd0 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
80006c3c:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006c40:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006c44:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006c48:	ee fc ff f0 	ld.w	r12,r7[-16]
80006c4c:	f0 16 00 02 	mcall	r6[8]
80006c50:	ec fc 00 18 	ld.w	r12,r6[24]
80006c54:	06 99       	mov	r9,r3
80006c56:	a1 79       	lsl	r9,0x1
80006c58:	06 09       	add	r9,r3
80006c5a:	0a 98       	mov	r8,r5
80006c5c:	a3 78       	lsl	r8,0x3
80006c5e:	0a 08       	add	r8,r5
80006c60:	f2 08 00 08 	add	r8,r9,r8
80006c64:	04 08       	add	r8,r2
80006c66:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
80006c6a:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006c6e:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006c72:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006c76:	ee fc ff f0 	ld.w	r12,r7[-16]
80006c7a:	f0 16 00 02 	mcall	r6[8]
80006c7e:	ec fc 00 1c 	ld.w	r12,r6[28]
80006c82:	06 99       	mov	r9,r3
80006c84:	a1 79       	lsl	r9,0x1
80006c86:	06 09       	add	r9,r3
80006c88:	0a 98       	mov	r8,r5
80006c8a:	a3 78       	lsl	r8,0x3
80006c8c:	0a 08       	add	r8,r5
80006c8e:	f2 08 00 08 	add	r8,r9,r8
80006c92:	04 08       	add	r8,r2
80006c94:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
80006c98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c9c:	2f f8       	sub	r8,-1
80006c9e:	ef 48 ff f8 	st.w	r7[-8],r8
80006ca2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ca6:	58 28       	cp.w	r8,2
80006ca8:	fe 9a ff 90 	brle	80006bc8 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
80006cac:	2f cd       	sub	sp,-16
80006cae:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80006cb2:	00 00       	add	r0,r0
80006cb4:	80 00       	ld.sh	r0,r0[0x0]
80006cb6:	69 c2       	ld.w	r2,r4[0x70]

80006cb8 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
80006cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80006cbc:	1a 97       	mov	r7,sp
80006cbe:	21 9d       	sub	sp,100
80006cc0:	fe f6 03 00 	ld.w	r6,pc[768]
80006cc4:	1e 26       	rsub	r6,pc
80006cc6:	ef 4c ff a4 	st.w	r7[-92],r12
80006cca:	ef 4b ff a0 	st.w	r7[-96],r11
80006cce:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
80006cd2:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006cd6:	ee c8 00 40 	sub	r8,r7,64
80006cda:	20 08       	sub	r8,0
80006cdc:	20 09       	sub	r9,0
80006cde:	72 0a       	ld.w	r10,r9[0x0]
80006ce0:	91 0a       	st.w	r8[0x0],r10
80006ce2:	72 1a       	ld.w	r10,r9[0x4]
80006ce4:	91 1a       	st.w	r8[0x4],r10
80006ce6:	72 2a       	ld.w	r10,r9[0x8]
80006ce8:	91 2a       	st.w	r8[0x8],r10
80006cea:	72 39       	ld.w	r9,r9[0xc]
80006cec:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
80006cee:	30 08       	mov	r8,0
80006cf0:	ef 48 ff f0 	st.w	r7[-16],r8
80006cf4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006cf8:	70 08       	ld.w	r8,r8[0x0]
80006cfa:	ef 48 ff f4 	st.w	r7[-12],r8
80006cfe:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006d02:	2f c8       	sub	r8,-4
80006d04:	70 08       	ld.w	r8,r8[0x0]
80006d06:	ef 48 ff f8 	st.w	r7[-8],r8
80006d0a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006d0e:	2f 88       	sub	r8,-8
80006d10:	70 08       	ld.w	r8,r8[0x0]
80006d12:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80006d16:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d22:	ee fa ff cc 	ld.w	r10,r7[-52]
80006d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d2a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d2e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d32:	ef 48 ff b4 	st.w	r7[-76],r8
80006d36:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006d3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d3e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d42:	ee fa ff c4 	ld.w	r10,r7[-60]
80006d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d4a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d4e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d52:	ef 48 ff b8 	st.w	r7[-72],r8
80006d56:	ee f9 ff c4 	ld.w	r9,r7[-60]
80006d5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d5e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d62:	ee fa ff c8 	ld.w	r10,r7[-56]
80006d66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d6a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d6e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d72:	ef 48 ff bc 	st.w	r7[-68],r8
80006d76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006d7a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006d7e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d82:	ee fa ff c0 	ld.w	r10,r7[-64]
80006d86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d8a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d8e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006d92:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006d96:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006d9a:	ef 48 ff e4 	st.w	r7[-28],r8
80006d9e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006da2:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006da6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006daa:	ee fa ff c0 	ld.w	r10,r7[-64]
80006dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006db2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006db6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006dba:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006dbe:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006dc2:	ef 48 ff e8 	st.w	r7[-24],r8
80006dc6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006dca:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006dce:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006dd2:	ee fa ff c0 	ld.w	r10,r7[-64]
80006dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006dda:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006dde:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006de2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006de6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006dea:	ef 48 ff ec 	st.w	r7[-20],r8
80006dee:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006df2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006df6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006dfa:	ee fa ff c4 	ld.w	r10,r7[-60]
80006dfe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e02:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006e06:	ee fb ff c8 	ld.w	r11,r7[-56]
80006e0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e0e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006e12:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006e16:	ee fb ff cc 	ld.w	r11,r7[-52]
80006e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e1e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006e22:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006e26:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e2a:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80006e2e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006e32:	ef 48 ff f0 	st.w	r7[-16],r8
80006e36:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006e3a:	ee 18 80 00 	eorh	r8,0x8000
80006e3e:	ef 48 ff f4 	st.w	r7[-12],r8
80006e42:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006e46:	ee 18 80 00 	eorh	r8,0x8000
80006e4a:	ef 48 ff f8 	st.w	r7[-8],r8
80006e4e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006e52:	ee 18 80 00 	eorh	r8,0x8000
80006e56:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80006e5a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006e5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e62:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e66:	ee fa ff ec 	ld.w	r10,r7[-20]
80006e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e6e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e72:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e76:	ef 48 ff b4 	st.w	r7[-76],r8
80006e7a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006e7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e82:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e86:	ee fa ff e4 	ld.w	r10,r7[-28]
80006e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e8e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e92:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e96:	ef 48 ff b8 	st.w	r7[-72],r8
80006e9a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ea2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ea6:	ee fa ff e8 	ld.w	r10,r7[-24]
80006eaa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006eae:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006eb2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006eb6:	ef 48 ff bc 	st.w	r7[-68],r8
80006eba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ebe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006ec2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ec6:	ee fa ff e0 	ld.w	r10,r7[-32]
80006eca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ece:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ed2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ed6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006eda:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006ede:	ef 48 ff d4 	st.w	r7[-44],r8
80006ee2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ee6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006eea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006eee:	ee fa ff e0 	ld.w	r10,r7[-32]
80006ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ef6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006efa:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006efe:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006f02:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006f06:	ef 48 ff d8 	st.w	r7[-40],r8
80006f0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006f0e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006f12:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f16:	ee fa ff e0 	ld.w	r10,r7[-32]
80006f1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f1e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006f22:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006f26:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006f2a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006f2e:	ef 48 ff dc 	st.w	r7[-36],r8
80006f32:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006f36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f3a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f3e:	ee fa ff e4 	ld.w	r10,r7[-28]
80006f42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f46:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006f4a:	ee fb ff e8 	ld.w	r11,r7[-24]
80006f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f52:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f56:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006f5a:	ee fb ff ec 	ld.w	r11,r7[-20]
80006f5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f62:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f66:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006f6a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006f6e:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80006f72:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006f76:	ef 48 ff a8 	st.w	r7[-88],r8
80006f7a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006f7e:	ef 48 ff ac 	st.w	r7[-84],r8
80006f82:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f86:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80006f8a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006f8e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006f92:	10 9b       	mov	r11,r8
80006f94:	30 0c       	mov	r12,0
80006f96:	f0 16 00 ca 	mcall	r6[808]
	e_kalman_predict(Y,acc_glo[Y],dt);
80006f9a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006f9e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006fa2:	10 9b       	mov	r11,r8
80006fa4:	30 1c       	mov	r12,1
80006fa6:	f0 16 00 ca 	mcall	r6[808]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80006faa:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006fae:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006fb2:	10 9b       	mov	r11,r8
80006fb4:	30 2c       	mov	r12,2
80006fb6:	f0 16 00 ca 	mcall	r6[808]
}
80006fba:	2e 7d       	sub	sp,-100
80006fbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006fc0:	80 00       	ld.sh	r0,r0[0x0]
80006fc2:	6b 48       	ld.w	r8,r5[0x50]

80006fc4 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80006fc4:	eb cd 40 80 	pushm	r7,lr
80006fc8:	1a 97       	mov	r7,sp
80006fca:	20 8d       	sub	sp,32
80006fcc:	ef 4c ff e4 	st.w	r7[-28],r12
80006fd0:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80006fd4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fd8:	70 29       	ld.w	r9,r8[0x8]
80006fda:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006fde:	2f 88       	sub	r8,-8
80006fe0:	70 08       	ld.w	r8,r8[0x0]
80006fe2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006fe6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fea:	70 3a       	ld.w	r10,r8[0xc]
80006fec:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006ff0:	2f c8       	sub	r8,-4
80006ff2:	70 08       	ld.w	r8,r8[0x0]
80006ff4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006ff8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006ffc:	ef 48 ff f4 	st.w	r7[-12],r8
80007000:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007004:	70 39       	ld.w	r9,r8[0xc]
80007006:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000700a:	70 08       	ld.w	r8,r8[0x0]
8000700c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007010:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007014:	70 1a       	ld.w	r10,r8[0x4]
80007016:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000701a:	2f 88       	sub	r8,-8
8000701c:	70 08       	ld.w	r8,r8[0x0]
8000701e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007022:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007026:	ef 48 ff f8 	st.w	r7[-8],r8
8000702a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000702e:	70 19       	ld.w	r9,r8[0x4]
80007030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007034:	2f c8       	sub	r8,-4
80007036:	70 08       	ld.w	r8,r8[0x0]
80007038:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000703c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007040:	70 2a       	ld.w	r10,r8[0x8]
80007042:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007046:	70 08       	ld.w	r8,r8[0x0]
80007048:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000704c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007050:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80007054:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007058:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000705c:	70 0a       	ld.w	r10,r8[0x0]
8000705e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007062:	70 08       	ld.w	r8,r8[0x0]
80007064:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007068:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000706c:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80007070:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007074:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007078:	70 0a       	ld.w	r10,r8[0x0]
8000707a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000707e:	2f c8       	sub	r8,-4
80007080:	70 08       	ld.w	r8,r8[0x0]
80007082:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007086:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000708a:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
8000708e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007092:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007096:	70 0a       	ld.w	r10,r8[0x0]
80007098:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000709c:	2f 88       	sub	r8,-8
8000709e:	70 08       	ld.w	r8,r8[0x0]
800070a0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070a4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800070a8:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
800070ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070b0:	70 29       	ld.w	r9,r8[0x8]
800070b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070b6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800070ba:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070be:	70 3a       	ld.w	r10,r8[0xc]
800070c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070c4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070c8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800070cc:	ef 48 ff e8 	st.w	r7[-24],r8
800070d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070d4:	70 39       	ld.w	r9,r8[0xc]
800070d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800070da:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800070de:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070e2:	70 1a       	ld.w	r10,r8[0x4]
800070e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070e8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070ec:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800070f0:	ef 48 ff ec 	st.w	r7[-20],r8
800070f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070f8:	70 19       	ld.w	r9,r8[0x4]
800070fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007102:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007106:	70 2a       	ld.w	r10,r8[0x8]
80007108:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000710c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007110:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007114:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80007118:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000711c:	70 09       	ld.w	r9,r8[0x0]
8000711e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007122:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80007126:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000712a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000712e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007132:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80007134:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007138:	2f c8       	sub	r8,-4
8000713a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000713e:	2f c9       	sub	r9,-4
80007140:	72 0a       	ld.w	r10,r9[0x0]
80007142:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007146:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000714a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000714e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80007152:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80007154:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007158:	2f 88       	sub	r8,-8
8000715a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000715e:	2f 89       	sub	r9,-8
80007160:	72 0a       	ld.w	r10,r9[0x0]
80007162:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007166:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000716a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000716e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80007172:	91 09       	st.w	r8[0x0],r9
}
80007174:	2f 8d       	sub	sp,-32
80007176:	e3 cd 80 80 	ldm	sp++,r7,pc

8000717a <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
8000717a:	d4 31       	pushm	r0-r7,lr
8000717c:	1a 97       	mov	r7,sp
8000717e:	fa cd 00 cc 	sub	sp,sp,204
80007182:	fe f6 0d 02 	ld.w	r6,pc[3330]
80007186:	1e 26       	rsub	r6,pc
80007188:	ef 4c ff ac 	st.w	r7[-84],r12
8000718c:	ef 4b ff a8 	st.w	r7[-88],r11
80007190:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80007194:	ec f8 00 00 	ld.w	r8,r6[0]
80007198:	70 01       	ld.w	r1,r8[0x0]
8000719a:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000719e:	ec f8 00 00 	ld.w	r8,r6[0]
800071a2:	70 0a       	ld.w	r10,r8[0x0]
800071a4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071a8:	12 98       	mov	r8,r9
800071aa:	a1 78       	lsl	r8,0x1
800071ac:	12 08       	add	r8,r9
800071ae:	2f f8       	sub	r8,-1
800071b0:	a3 78       	lsl	r8,0x3
800071b2:	f4 08 00 08 	add	r8,r10,r8
800071b6:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
800071ba:	ee f9 ff a4 	ld.w	r9,r7[-92]
800071be:	ee f8 ff a8 	ld.w	r8,r7[-88]
800071c2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800071c6:	10 9c       	mov	r12,r8
800071c8:	f0 16 00 02 	mcall	r6[8]
800071cc:	14 98       	mov	r8,r10
800071ce:	16 99       	mov	r9,r11
800071d0:	04 9a       	mov	r10,r2
800071d2:	06 9b       	mov	r11,r3
800071d4:	f0 16 00 05 	mcall	r6[20]
800071d8:	14 98       	mov	r8,r10
800071da:	16 99       	mov	r9,r11
800071dc:	10 9a       	mov	r10,r8
800071de:	12 9b       	mov	r11,r9
800071e0:	0a 98       	mov	r8,r5
800071e2:	a1 78       	lsl	r8,0x1
800071e4:	0a 08       	add	r8,r5
800071e6:	2f f8       	sub	r8,-1
800071e8:	a3 78       	lsl	r8,0x3
800071ea:	e2 08 00 08 	add	r8,r1,r8
800071ee:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
800071f2:	ec f8 00 00 	ld.w	r8,r6[0]
800071f6:	70 01       	ld.w	r1,r8[0x0]
800071f8:	ee f5 ff ac 	ld.w	r5,r7[-84]
800071fc:	ec f8 00 00 	ld.w	r8,r6[0]
80007200:	70 0a       	ld.w	r10,r8[0x0]
80007202:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007206:	12 98       	mov	r8,r9
80007208:	a1 78       	lsl	r8,0x1
8000720a:	12 08       	add	r8,r9
8000720c:	a3 78       	lsl	r8,0x3
8000720e:	f4 08 00 08 	add	r8,r10,r8
80007212:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007216:	f0 e2 00 00 	ld.d	r2,r8[0]
8000721a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000721e:	f0 16 00 02 	mcall	r6[8]
80007222:	ec f8 00 00 	ld.w	r8,r6[0]
80007226:	70 0c       	ld.w	r12,r8[0x0]
80007228:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000722c:	12 98       	mov	r8,r9
8000722e:	a1 78       	lsl	r8,0x1
80007230:	12 08       	add	r8,r9
80007232:	2f f8       	sub	r8,-1
80007234:	a3 78       	lsl	r8,0x3
80007236:	f8 08 00 08 	add	r8,r12,r8
8000723a:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000723e:	f0 16 00 03 	mcall	r6[12]
80007242:	14 98       	mov	r8,r10
80007244:	16 99       	mov	r9,r11
80007246:	04 9a       	mov	r10,r2
80007248:	06 9b       	mov	r11,r3
8000724a:	f0 16 00 05 	mcall	r6[20]
8000724e:	14 98       	mov	r8,r10
80007250:	16 99       	mov	r9,r11
80007252:	10 9a       	mov	r10,r8
80007254:	12 9b       	mov	r11,r9
80007256:	0a 98       	mov	r8,r5
80007258:	a1 78       	lsl	r8,0x1
8000725a:	0a 08       	add	r8,r5
8000725c:	a3 78       	lsl	r8,0x3
8000725e:	e2 08 00 08 	add	r8,r1,r8
80007262:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007266:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
8000726a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000726e:	ec fa 00 18 	ld.w	r10,r6[24]
80007272:	12 98       	mov	r8,r9
80007274:	a3 78       	lsl	r8,0x3
80007276:	12 08       	add	r8,r9
80007278:	a3 78       	lsl	r8,0x3
8000727a:	f4 08 00 08 	add	r8,r10,r8
8000727e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007282:	ee eb ff 34 	st.d	r7[-204],r10
80007286:	ee fc ff a4 	ld.w	r12,r7[-92]
8000728a:	f0 16 00 02 	mcall	r6[8]
8000728e:	14 90       	mov	r0,r10
80007290:	16 91       	mov	r1,r11
80007292:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007296:	ec fa 00 18 	ld.w	r10,r6[24]
8000729a:	12 98       	mov	r8,r9
8000729c:	a3 78       	lsl	r8,0x3
8000729e:	12 08       	add	r8,r9
800072a0:	a3 78       	lsl	r8,0x3
800072a2:	f4 08 00 08 	add	r8,r10,r8
800072a6:	2e 88       	sub	r8,-24
800072a8:	f0 ea 00 00 	ld.d	r10,r8[0]
800072ac:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072b0:	ec fc 00 18 	ld.w	r12,r6[24]
800072b4:	12 98       	mov	r8,r9
800072b6:	a3 78       	lsl	r8,0x3
800072b8:	12 08       	add	r8,r9
800072ba:	2f f8       	sub	r8,-1
800072bc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800072c0:	f0 16 00 05 	mcall	r6[20]
800072c4:	14 98       	mov	r8,r10
800072c6:	16 99       	mov	r9,r11
800072c8:	10 92       	mov	r2,r8
800072ca:	12 93       	mov	r3,r9
800072cc:	ee fc ff a4 	ld.w	r12,r7[-92]
800072d0:	f0 16 00 02 	mcall	r6[8]
800072d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072d8:	ec fc 00 18 	ld.w	r12,r6[24]
800072dc:	12 98       	mov	r8,r9
800072de:	a3 78       	lsl	r8,0x3
800072e0:	12 08       	add	r8,r9
800072e2:	a3 78       	lsl	r8,0x3
800072e4:	f8 08 00 08 	add	r8,r12,r8
800072e8:	2e 08       	sub	r8,-32
800072ea:	f0 e8 00 00 	ld.d	r8,r8[0]
800072ee:	f0 16 00 03 	mcall	r6[12]
800072f2:	14 98       	mov	r8,r10
800072f4:	16 99       	mov	r9,r11
800072f6:	04 9a       	mov	r10,r2
800072f8:	06 9b       	mov	r11,r3
800072fa:	f0 16 00 05 	mcall	r6[20]
800072fe:	14 98       	mov	r8,r10
80007300:	16 99       	mov	r9,r11
80007302:	00 9a       	mov	r10,r0
80007304:	02 9b       	mov	r11,r1
80007306:	f0 16 00 03 	mcall	r6[12]
8000730a:	14 98       	mov	r8,r10
8000730c:	16 99       	mov	r9,r11
8000730e:	ee ea ff 34 	ld.d	r10,r7[-204]
80007312:	f0 16 00 05 	mcall	r6[20]
80007316:	14 98       	mov	r8,r10
80007318:	16 99       	mov	r9,r11
8000731a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
8000731e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007322:	ec fa 00 18 	ld.w	r10,r6[24]
80007326:	12 98       	mov	r8,r9
80007328:	a3 78       	lsl	r8,0x3
8000732a:	12 08       	add	r8,r9
8000732c:	2f f8       	sub	r8,-1
8000732e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007332:	ee e5 ff 3c 	st.d	r7[-196],r4
80007336:	ee fc ff a4 	ld.w	r12,r7[-92]
8000733a:	f0 16 00 02 	mcall	r6[8]
8000733e:	14 90       	mov	r0,r10
80007340:	16 91       	mov	r1,r11
80007342:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007346:	ec fa 00 18 	ld.w	r10,r6[24]
8000734a:	12 98       	mov	r8,r9
8000734c:	a3 78       	lsl	r8,0x3
8000734e:	12 08       	add	r8,r9
80007350:	a3 78       	lsl	r8,0x3
80007352:	f4 08 00 08 	add	r8,r10,r8
80007356:	2e 08       	sub	r8,-32
80007358:	f0 ea 00 00 	ld.d	r10,r8[0]
8000735c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007360:	ec fc 00 18 	ld.w	r12,r6[24]
80007364:	12 98       	mov	r8,r9
80007366:	a3 78       	lsl	r8,0x3
80007368:	12 08       	add	r8,r9
8000736a:	a3 78       	lsl	r8,0x3
8000736c:	f8 08 00 08 	add	r8,r12,r8
80007370:	2f 08       	sub	r8,-16
80007372:	f0 e8 00 00 	ld.d	r8,r8[0]
80007376:	f0 16 00 11 	mcall	r6[68]
8000737a:	14 98       	mov	r8,r10
8000737c:	16 99       	mov	r9,r11
8000737e:	10 92       	mov	r2,r8
80007380:	12 93       	mov	r3,r9
80007382:	ee fc ff a4 	ld.w	r12,r7[-92]
80007386:	f0 16 00 02 	mcall	r6[8]
8000738a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000738e:	ec fc 00 18 	ld.w	r12,r6[24]
80007392:	12 98       	mov	r8,r9
80007394:	a3 78       	lsl	r8,0x3
80007396:	12 08       	add	r8,r9
80007398:	a3 78       	lsl	r8,0x3
8000739a:	f8 08 00 08 	add	r8,r12,r8
8000739e:	2d 88       	sub	r8,-40
800073a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800073a4:	f0 16 00 03 	mcall	r6[12]
800073a8:	14 98       	mov	r8,r10
800073aa:	16 99       	mov	r9,r11
800073ac:	04 9a       	mov	r10,r2
800073ae:	06 9b       	mov	r11,r3
800073b0:	f0 16 00 11 	mcall	r6[68]
800073b4:	14 98       	mov	r8,r10
800073b6:	16 99       	mov	r9,r11
800073b8:	00 9a       	mov	r10,r0
800073ba:	02 9b       	mov	r11,r1
800073bc:	f0 16 00 03 	mcall	r6[12]
800073c0:	14 98       	mov	r8,r10
800073c2:	16 99       	mov	r9,r11
800073c4:	ee ea ff 3c 	ld.d	r10,r7[-196]
800073c8:	f0 16 00 05 	mcall	r6[20]
800073cc:	14 98       	mov	r8,r10
800073ce:	16 99       	mov	r9,r11
800073d0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
800073d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073d8:	ec fa 00 18 	ld.w	r10,r6[24]
800073dc:	12 98       	mov	r8,r9
800073de:	a3 78       	lsl	r8,0x3
800073e0:	12 08       	add	r8,r9
800073e2:	a3 78       	lsl	r8,0x3
800073e4:	f4 08 00 08 	add	r8,r10,r8
800073e8:	2f 08       	sub	r8,-16
800073ea:	f0 e2 00 00 	ld.d	r2,r8[0]
800073ee:	ee fc ff a4 	ld.w	r12,r7[-92]
800073f2:	f0 16 00 02 	mcall	r6[8]
800073f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073fa:	ec fc 00 18 	ld.w	r12,r6[24]
800073fe:	12 98       	mov	r8,r9
80007400:	a3 78       	lsl	r8,0x3
80007402:	12 08       	add	r8,r9
80007404:	a3 78       	lsl	r8,0x3
80007406:	f8 08 00 08 	add	r8,r12,r8
8000740a:	2d 88       	sub	r8,-40
8000740c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007410:	f0 16 00 03 	mcall	r6[12]
80007414:	14 98       	mov	r8,r10
80007416:	16 99       	mov	r9,r11
80007418:	04 9a       	mov	r10,r2
8000741a:	06 9b       	mov	r11,r3
8000741c:	f0 16 00 05 	mcall	r6[20]
80007420:	14 98       	mov	r8,r10
80007422:	16 99       	mov	r9,r11
80007424:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80007428:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000742c:	ec fa 00 18 	ld.w	r10,r6[24]
80007430:	12 98       	mov	r8,r9
80007432:	a3 78       	lsl	r8,0x3
80007434:	12 08       	add	r8,r9
80007436:	a3 78       	lsl	r8,0x3
80007438:	f4 08 00 08 	add	r8,r10,r8
8000743c:	2e 88       	sub	r8,-24
8000743e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007442:	ee eb ff 44 	st.d	r7[-188],r10
80007446:	ee fc ff a4 	ld.w	r12,r7[-92]
8000744a:	f0 16 00 02 	mcall	r6[8]
8000744e:	14 90       	mov	r0,r10
80007450:	16 91       	mov	r1,r11
80007452:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007456:	ec fa 00 18 	ld.w	r10,r6[24]
8000745a:	12 98       	mov	r8,r9
8000745c:	a3 78       	lsl	r8,0x3
8000745e:	12 08       	add	r8,r9
80007460:	a3 78       	lsl	r8,0x3
80007462:	f4 08 00 08 	add	r8,r10,r8
80007466:	2e 08       	sub	r8,-32
80007468:	f0 ea 00 00 	ld.d	r10,r8[0]
8000746c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007470:	ec fc 00 18 	ld.w	r12,r6[24]
80007474:	12 98       	mov	r8,r9
80007476:	a3 78       	lsl	r8,0x3
80007478:	12 08       	add	r8,r9
8000747a:	a3 78       	lsl	r8,0x3
8000747c:	f8 08 00 08 	add	r8,r12,r8
80007480:	2d 08       	sub	r8,-48
80007482:	f0 e8 00 00 	ld.d	r8,r8[0]
80007486:	f0 16 00 11 	mcall	r6[68]
8000748a:	14 98       	mov	r8,r10
8000748c:	16 99       	mov	r9,r11
8000748e:	10 92       	mov	r2,r8
80007490:	12 93       	mov	r3,r9
80007492:	ee fc ff a4 	ld.w	r12,r7[-92]
80007496:	f0 16 00 02 	mcall	r6[8]
8000749a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000749e:	ec fc 00 18 	ld.w	r12,r6[24]
800074a2:	12 98       	mov	r8,r9
800074a4:	a3 78       	lsl	r8,0x3
800074a6:	12 08       	add	r8,r9
800074a8:	a3 78       	lsl	r8,0x3
800074aa:	f8 08 00 08 	add	r8,r12,r8
800074ae:	2c 88       	sub	r8,-56
800074b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800074b4:	f0 16 00 03 	mcall	r6[12]
800074b8:	14 98       	mov	r8,r10
800074ba:	16 99       	mov	r9,r11
800074bc:	04 9a       	mov	r10,r2
800074be:	06 9b       	mov	r11,r3
800074c0:	f0 16 00 11 	mcall	r6[68]
800074c4:	14 98       	mov	r8,r10
800074c6:	16 99       	mov	r9,r11
800074c8:	00 9a       	mov	r10,r0
800074ca:	02 9b       	mov	r11,r1
800074cc:	f0 16 00 03 	mcall	r6[12]
800074d0:	14 98       	mov	r8,r10
800074d2:	16 99       	mov	r9,r11
800074d4:	ee ea ff 44 	ld.d	r10,r7[-188]
800074d8:	f0 16 00 05 	mcall	r6[20]
800074dc:	14 98       	mov	r8,r10
800074de:	16 99       	mov	r9,r11
800074e0:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
800074e4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074e8:	ec fa 00 18 	ld.w	r10,r6[24]
800074ec:	12 98       	mov	r8,r9
800074ee:	a3 78       	lsl	r8,0x3
800074f0:	12 08       	add	r8,r9
800074f2:	a3 78       	lsl	r8,0x3
800074f4:	f4 08 00 08 	add	r8,r10,r8
800074f8:	2e 08       	sub	r8,-32
800074fa:	f0 e4 00 00 	ld.d	r4,r8[0]
800074fe:	ee e5 ff 4c 	st.d	r7[-180],r4
80007502:	ee fc ff a4 	ld.w	r12,r7[-92]
80007506:	f0 16 00 02 	mcall	r6[8]
8000750a:	14 90       	mov	r0,r10
8000750c:	16 91       	mov	r1,r11
8000750e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007512:	ec fa 00 18 	ld.w	r10,r6[24]
80007516:	12 98       	mov	r8,r9
80007518:	a3 78       	lsl	r8,0x3
8000751a:	12 08       	add	r8,r9
8000751c:	a3 78       	lsl	r8,0x3
8000751e:	f4 08 00 08 	add	r8,r10,r8
80007522:	2c 88       	sub	r8,-56
80007524:	f0 e8 00 00 	ld.d	r8,r8[0]
80007528:	12 94       	mov	r4,r9
8000752a:	ee 14 80 00 	eorh	r4,0x8000
8000752e:	ef 44 ff 54 	st.w	r7[-172],r4
80007532:	10 9c       	mov	r12,r8
80007534:	ef 4c ff 58 	st.w	r7[-168],r12
80007538:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000753c:	ec fa 00 18 	ld.w	r10,r6[24]
80007540:	12 98       	mov	r8,r9
80007542:	a3 78       	lsl	r8,0x3
80007544:	12 08       	add	r8,r9
80007546:	a3 78       	lsl	r8,0x3
80007548:	f4 08 00 08 	add	r8,r10,r8
8000754c:	2d 88       	sub	r8,-40
8000754e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007552:	ee ea ff 54 	ld.d	r10,r7[-172]
80007556:	f0 16 00 11 	mcall	r6[68]
8000755a:	14 98       	mov	r8,r10
8000755c:	16 99       	mov	r9,r11
8000755e:	10 92       	mov	r2,r8
80007560:	12 93       	mov	r3,r9
80007562:	ee fc ff a4 	ld.w	r12,r7[-92]
80007566:	f0 16 00 02 	mcall	r6[8]
8000756a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000756e:	ec fc 00 18 	ld.w	r12,r6[24]
80007572:	12 98       	mov	r8,r9
80007574:	a3 78       	lsl	r8,0x3
80007576:	12 08       	add	r8,r9
80007578:	a3 78       	lsl	r8,0x3
8000757a:	f8 08 00 08 	add	r8,r12,r8
8000757e:	2c 08       	sub	r8,-64
80007580:	f0 e8 00 00 	ld.d	r8,r8[0]
80007584:	f0 16 00 03 	mcall	r6[12]
80007588:	14 98       	mov	r8,r10
8000758a:	16 99       	mov	r9,r11
8000758c:	04 9a       	mov	r10,r2
8000758e:	06 9b       	mov	r11,r3
80007590:	f0 16 00 05 	mcall	r6[20]
80007594:	14 98       	mov	r8,r10
80007596:	16 99       	mov	r9,r11
80007598:	00 9a       	mov	r10,r0
8000759a:	02 9b       	mov	r11,r1
8000759c:	f0 16 00 03 	mcall	r6[12]
800075a0:	14 98       	mov	r8,r10
800075a2:	16 99       	mov	r9,r11
800075a4:	ee ea ff 4c 	ld.d	r10,r7[-180]
800075a8:	f0 16 00 05 	mcall	r6[20]
800075ac:	14 98       	mov	r8,r10
800075ae:	16 99       	mov	r9,r11
800075b0:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
800075b4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075b8:	ec fa 00 18 	ld.w	r10,r6[24]
800075bc:	12 98       	mov	r8,r9
800075be:	a3 78       	lsl	r8,0x3
800075c0:	12 08       	add	r8,r9
800075c2:	a3 78       	lsl	r8,0x3
800075c4:	f4 08 00 08 	add	r8,r10,r8
800075c8:	2d 88       	sub	r8,-40
800075ca:	f0 e0 00 00 	ld.d	r0,r8[0]
800075ce:	ee fc ff a4 	ld.w	r12,r7[-92]
800075d2:	f0 16 00 02 	mcall	r6[8]
800075d6:	14 92       	mov	r2,r10
800075d8:	16 93       	mov	r3,r11
800075da:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075de:	ec fa 00 18 	ld.w	r10,r6[24]
800075e2:	12 98       	mov	r8,r9
800075e4:	a3 78       	lsl	r8,0x3
800075e6:	12 08       	add	r8,r9
800075e8:	a3 78       	lsl	r8,0x3
800075ea:	f4 08 00 08 	add	r8,r10,r8
800075ee:	2c 08       	sub	r8,-64
800075f0:	f0 e8 00 00 	ld.d	r8,r8[0]
800075f4:	12 9b       	mov	r11,r9
800075f6:	ee 1b 80 00 	eorh	r11,0x8000
800075fa:	ef 4b ff 5c 	st.w	r7[-164],r11
800075fe:	10 9a       	mov	r10,r8
80007600:	ef 4a ff 60 	st.w	r7[-160],r10
80007604:	ee e8 ff 5c 	ld.d	r8,r7[-164]
80007608:	04 9a       	mov	r10,r2
8000760a:	06 9b       	mov	r11,r3
8000760c:	f0 16 00 03 	mcall	r6[12]
80007610:	14 98       	mov	r8,r10
80007612:	16 99       	mov	r9,r11
80007614:	00 9a       	mov	r10,r0
80007616:	02 9b       	mov	r11,r1
80007618:	f0 16 00 05 	mcall	r6[20]
8000761c:	14 98       	mov	r8,r10
8000761e:	16 99       	mov	r9,r11
80007620:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
80007624:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007628:	ec fa 00 18 	ld.w	r10,r6[24]
8000762c:	12 98       	mov	r8,r9
8000762e:	a3 78       	lsl	r8,0x3
80007630:	12 08       	add	r8,r9
80007632:	a3 78       	lsl	r8,0x3
80007634:	f4 08 00 08 	add	r8,r10,r8
80007638:	2d 08       	sub	r8,-48
8000763a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000763e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007642:	f0 16 00 02 	mcall	r6[8]
80007646:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000764a:	ec fc 00 18 	ld.w	r12,r6[24]
8000764e:	12 98       	mov	r8,r9
80007650:	a3 78       	lsl	r8,0x3
80007652:	12 08       	add	r8,r9
80007654:	a3 78       	lsl	r8,0x3
80007656:	f8 08 00 08 	add	r8,r12,r8
8000765a:	2c 88       	sub	r8,-56
8000765c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007660:	f0 16 00 03 	mcall	r6[12]
80007664:	14 98       	mov	r8,r10
80007666:	16 99       	mov	r9,r11
80007668:	04 9a       	mov	r10,r2
8000766a:	06 9b       	mov	r11,r3
8000766c:	f0 16 00 05 	mcall	r6[20]
80007670:	14 98       	mov	r8,r10
80007672:	16 99       	mov	r9,r11
80007674:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80007678:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000767c:	ec fa 00 18 	ld.w	r10,r6[24]
80007680:	12 98       	mov	r8,r9
80007682:	a3 78       	lsl	r8,0x3
80007684:	12 08       	add	r8,r9
80007686:	a3 78       	lsl	r8,0x3
80007688:	f4 08 00 08 	add	r8,r10,r8
8000768c:	2c 88       	sub	r8,-56
8000768e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007692:	ee fc ff a4 	ld.w	r12,r7[-92]
80007696:	f0 16 00 02 	mcall	r6[8]
8000769a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000769e:	ec fc 00 18 	ld.w	r12,r6[24]
800076a2:	12 98       	mov	r8,r9
800076a4:	a3 78       	lsl	r8,0x3
800076a6:	12 08       	add	r8,r9
800076a8:	a3 78       	lsl	r8,0x3
800076aa:	f8 08 00 08 	add	r8,r12,r8
800076ae:	2c 08       	sub	r8,-64
800076b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800076b4:	12 95       	mov	r5,r9
800076b6:	ee 15 80 00 	eorh	r5,0x8000
800076ba:	ef 45 ff 64 	st.w	r7[-156],r5
800076be:	10 94       	mov	r4,r8
800076c0:	ef 44 ff 68 	st.w	r7[-152],r4
800076c4:	ee e8 ff 64 	ld.d	r8,r7[-156]
800076c8:	f0 16 00 03 	mcall	r6[12]
800076cc:	14 98       	mov	r8,r10
800076ce:	16 99       	mov	r9,r11
800076d0:	04 9a       	mov	r10,r2
800076d2:	06 9b       	mov	r11,r3
800076d4:	f0 16 00 05 	mcall	r6[20]
800076d8:	14 98       	mov	r8,r10
800076da:	16 99       	mov	r9,r11
800076dc:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
800076e0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076e4:	ec fa 00 18 	ld.w	r10,r6[24]
800076e8:	12 98       	mov	r8,r9
800076ea:	a3 78       	lsl	r8,0x3
800076ec:	12 08       	add	r8,r9
800076ee:	a3 78       	lsl	r8,0x3
800076f0:	f4 08 00 08 	add	r8,r10,r8
800076f4:	2c 08       	sub	r8,-64
800076f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800076fa:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
800076fe:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007702:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007706:	ec fa 00 e0 	ld.w	r10,r6[224]
8000770a:	12 98       	mov	r8,r9
8000770c:	a1 78       	lsl	r8,0x1
8000770e:	12 08       	add	r8,r9
80007710:	a3 78       	lsl	r8,0x3
80007712:	f4 08 00 08 	add	r8,r10,r8
80007716:	f0 ea 00 00 	ld.d	r10,r8[0]
8000771a:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000771e:	f0 16 00 05 	mcall	r6[20]
80007722:	14 98       	mov	r8,r10
80007724:	16 99       	mov	r9,r11
80007726:	10 9a       	mov	r10,r8
80007728:	12 9b       	mov	r11,r9
8000772a:	ec f9 00 18 	ld.w	r9,r6[24]
8000772e:	0a 98       	mov	r8,r5
80007730:	a3 78       	lsl	r8,0x3
80007732:	0a 08       	add	r8,r5
80007734:	a3 78       	lsl	r8,0x3
80007736:	f2 08 00 08 	add	r8,r9,r8
8000773a:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
8000773e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007742:	ec fa 00 18 	ld.w	r10,r6[24]
80007746:	12 98       	mov	r8,r9
80007748:	a3 78       	lsl	r8,0x3
8000774a:	12 08       	add	r8,r9
8000774c:	f0 cb ff ff 	sub	r11,r8,-1
80007750:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007754:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
80007758:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000775c:	ec fa 00 18 	ld.w	r10,r6[24]
80007760:	12 98       	mov	r8,r9
80007762:	a3 78       	lsl	r8,0x3
80007764:	12 08       	add	r8,r9
80007766:	a3 78       	lsl	r8,0x3
80007768:	f4 08 00 08 	add	r8,r10,r8
8000776c:	f0 ca ff f0 	sub	r10,r8,-16
80007770:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007774:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80007778:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000777c:	ec fa 00 18 	ld.w	r10,r6[24]
80007780:	12 98       	mov	r8,r9
80007782:	a3 78       	lsl	r8,0x3
80007784:	12 08       	add	r8,r9
80007786:	a3 78       	lsl	r8,0x3
80007788:	f4 08 00 08 	add	r8,r10,r8
8000778c:	f0 ca ff e8 	sub	r10,r8,-24
80007790:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007794:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007798:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000779c:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077a0:	ec fa 00 e0 	ld.w	r10,r6[224]
800077a4:	12 98       	mov	r8,r9
800077a6:	a1 78       	lsl	r8,0x1
800077a8:	12 08       	add	r8,r9
800077aa:	2f f8       	sub	r8,-1
800077ac:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800077b0:	ee e8 ff d8 	ld.d	r8,r7[-40]
800077b4:	f0 16 00 05 	mcall	r6[20]
800077b8:	14 98       	mov	r8,r10
800077ba:	16 99       	mov	r9,r11
800077bc:	10 9a       	mov	r10,r8
800077be:	12 9b       	mov	r11,r9
800077c0:	ec f9 00 18 	ld.w	r9,r6[24]
800077c4:	0a 98       	mov	r8,r5
800077c6:	a3 78       	lsl	r8,0x3
800077c8:	0a 08       	add	r8,r5
800077ca:	a3 78       	lsl	r8,0x3
800077cc:	f2 08 00 08 	add	r8,r9,r8
800077d0:	2e 08       	sub	r8,-32
800077d2:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800077d6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077da:	ec fa 00 18 	ld.w	r10,r6[24]
800077de:	12 98       	mov	r8,r9
800077e0:	a3 78       	lsl	r8,0x3
800077e2:	12 08       	add	r8,r9
800077e4:	a3 78       	lsl	r8,0x3
800077e6:	f4 08 00 08 	add	r8,r10,r8
800077ea:	f0 ca ff d8 	sub	r10,r8,-40
800077ee:	ee e8 ff e0 	ld.d	r8,r7[-32]
800077f2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
800077f6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077fa:	ec fa 00 18 	ld.w	r10,r6[24]
800077fe:	12 98       	mov	r8,r9
80007800:	a3 78       	lsl	r8,0x3
80007802:	12 08       	add	r8,r9
80007804:	a3 78       	lsl	r8,0x3
80007806:	f4 08 00 08 	add	r8,r10,r8
8000780a:	f0 ca ff d0 	sub	r10,r8,-48
8000780e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007812:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
80007816:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000781a:	ec fa 00 18 	ld.w	r10,r6[24]
8000781e:	12 98       	mov	r8,r9
80007820:	a3 78       	lsl	r8,0x3
80007822:	12 08       	add	r8,r9
80007824:	a3 78       	lsl	r8,0x3
80007826:	f4 08 00 08 	add	r8,r10,r8
8000782a:	f0 ca ff c8 	sub	r10,r8,-56
8000782e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007832:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
80007836:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000783a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000783e:	ec fa 00 e0 	ld.w	r10,r6[224]
80007842:	12 98       	mov	r8,r9
80007844:	a1 78       	lsl	r8,0x1
80007846:	12 08       	add	r8,r9
80007848:	a3 78       	lsl	r8,0x3
8000784a:	f4 08 00 08 	add	r8,r10,r8
8000784e:	2f 08       	sub	r8,-16
80007850:	f0 ea 00 00 	ld.d	r10,r8[0]
80007854:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007858:	f0 16 00 05 	mcall	r6[20]
8000785c:	14 98       	mov	r8,r10
8000785e:	16 99       	mov	r9,r11
80007860:	10 9a       	mov	r10,r8
80007862:	12 9b       	mov	r11,r9
80007864:	ec f9 00 18 	ld.w	r9,r6[24]
80007868:	0a 98       	mov	r8,r5
8000786a:	a3 78       	lsl	r8,0x3
8000786c:	0a 08       	add	r8,r5
8000786e:	a3 78       	lsl	r8,0x3
80007870:	f2 08 00 08 	add	r8,r9,r8
80007874:	2c 08       	sub	r8,-64
80007876:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
8000787a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000787e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007882:	12 98       	mov	r8,r9
80007884:	a3 78       	lsl	r8,0x3
80007886:	12 08       	add	r8,r9
80007888:	a3 78       	lsl	r8,0x3
8000788a:	f4 08 00 08 	add	r8,r10,r8
8000788e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007892:	ee eb ff 6c 	st.d	r7[-148],r10
80007896:	ee fc ff a4 	ld.w	r12,r7[-92]
8000789a:	f0 16 00 02 	mcall	r6[8]
8000789e:	14 90       	mov	r0,r10
800078a0:	16 91       	mov	r1,r11
800078a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078a6:	ec fa 00 1c 	ld.w	r10,r6[28]
800078aa:	12 98       	mov	r8,r9
800078ac:	a3 78       	lsl	r8,0x3
800078ae:	12 08       	add	r8,r9
800078b0:	a3 78       	lsl	r8,0x3
800078b2:	f4 08 00 08 	add	r8,r10,r8
800078b6:	2e 88       	sub	r8,-24
800078b8:	f0 ea 00 00 	ld.d	r10,r8[0]
800078bc:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078c0:	ec fc 00 1c 	ld.w	r12,r6[28]
800078c4:	12 98       	mov	r8,r9
800078c6:	a3 78       	lsl	r8,0x3
800078c8:	12 08       	add	r8,r9
800078ca:	2f f8       	sub	r8,-1
800078cc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800078d0:	f0 16 00 05 	mcall	r6[20]
800078d4:	14 98       	mov	r8,r10
800078d6:	16 99       	mov	r9,r11
800078d8:	10 92       	mov	r2,r8
800078da:	12 93       	mov	r3,r9
800078dc:	ee fc ff a4 	ld.w	r12,r7[-92]
800078e0:	f0 16 00 02 	mcall	r6[8]
800078e4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078e8:	ec fc 00 1c 	ld.w	r12,r6[28]
800078ec:	12 98       	mov	r8,r9
800078ee:	a3 78       	lsl	r8,0x3
800078f0:	12 08       	add	r8,r9
800078f2:	a3 78       	lsl	r8,0x3
800078f4:	f8 08 00 08 	add	r8,r12,r8
800078f8:	2e 08       	sub	r8,-32
800078fa:	f0 e8 00 00 	ld.d	r8,r8[0]
800078fe:	f0 16 00 03 	mcall	r6[12]
80007902:	14 98       	mov	r8,r10
80007904:	16 99       	mov	r9,r11
80007906:	04 9a       	mov	r10,r2
80007908:	06 9b       	mov	r11,r3
8000790a:	f0 16 00 05 	mcall	r6[20]
8000790e:	14 98       	mov	r8,r10
80007910:	16 99       	mov	r9,r11
80007912:	00 9a       	mov	r10,r0
80007914:	02 9b       	mov	r11,r1
80007916:	f0 16 00 03 	mcall	r6[12]
8000791a:	14 98       	mov	r8,r10
8000791c:	16 99       	mov	r9,r11
8000791e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80007922:	f0 16 00 05 	mcall	r6[20]
80007926:	14 98       	mov	r8,r10
80007928:	16 99       	mov	r9,r11
8000792a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
8000792e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007932:	ec fa 00 1c 	ld.w	r10,r6[28]
80007936:	12 98       	mov	r8,r9
80007938:	a3 78       	lsl	r8,0x3
8000793a:	12 08       	add	r8,r9
8000793c:	2f f8       	sub	r8,-1
8000793e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80007942:	ee e5 ff 74 	st.d	r7[-140],r4
80007946:	ee fc ff a4 	ld.w	r12,r7[-92]
8000794a:	f0 16 00 02 	mcall	r6[8]
8000794e:	14 90       	mov	r0,r10
80007950:	16 91       	mov	r1,r11
80007952:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007956:	ec fa 00 1c 	ld.w	r10,r6[28]
8000795a:	12 98       	mov	r8,r9
8000795c:	a3 78       	lsl	r8,0x3
8000795e:	12 08       	add	r8,r9
80007960:	a3 78       	lsl	r8,0x3
80007962:	f4 08 00 08 	add	r8,r10,r8
80007966:	2e 08       	sub	r8,-32
80007968:	f0 ea 00 00 	ld.d	r10,r8[0]
8000796c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007970:	ec fc 00 1c 	ld.w	r12,r6[28]
80007974:	12 98       	mov	r8,r9
80007976:	a3 78       	lsl	r8,0x3
80007978:	12 08       	add	r8,r9
8000797a:	a3 78       	lsl	r8,0x3
8000797c:	f8 08 00 08 	add	r8,r12,r8
80007980:	2f 08       	sub	r8,-16
80007982:	f0 e8 00 00 	ld.d	r8,r8[0]
80007986:	f0 16 00 11 	mcall	r6[68]
8000798a:	14 98       	mov	r8,r10
8000798c:	16 99       	mov	r9,r11
8000798e:	10 92       	mov	r2,r8
80007990:	12 93       	mov	r3,r9
80007992:	ee fc ff a4 	ld.w	r12,r7[-92]
80007996:	f0 16 00 02 	mcall	r6[8]
8000799a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000799e:	ec fc 00 1c 	ld.w	r12,r6[28]
800079a2:	12 98       	mov	r8,r9
800079a4:	a3 78       	lsl	r8,0x3
800079a6:	12 08       	add	r8,r9
800079a8:	a3 78       	lsl	r8,0x3
800079aa:	f8 08 00 08 	add	r8,r12,r8
800079ae:	2d 88       	sub	r8,-40
800079b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800079b4:	f0 16 00 03 	mcall	r6[12]
800079b8:	14 98       	mov	r8,r10
800079ba:	16 99       	mov	r9,r11
800079bc:	04 9a       	mov	r10,r2
800079be:	06 9b       	mov	r11,r3
800079c0:	f0 16 00 11 	mcall	r6[68]
800079c4:	14 98       	mov	r8,r10
800079c6:	16 99       	mov	r9,r11
800079c8:	00 9a       	mov	r10,r0
800079ca:	02 9b       	mov	r11,r1
800079cc:	f0 16 00 03 	mcall	r6[12]
800079d0:	14 98       	mov	r8,r10
800079d2:	16 99       	mov	r9,r11
800079d4:	ee ea ff 74 	ld.d	r10,r7[-140]
800079d8:	f0 16 00 05 	mcall	r6[20]
800079dc:	14 98       	mov	r8,r10
800079de:	16 99       	mov	r9,r11
800079e0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
800079e4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079e8:	ec fa 00 1c 	ld.w	r10,r6[28]
800079ec:	12 98       	mov	r8,r9
800079ee:	a3 78       	lsl	r8,0x3
800079f0:	12 08       	add	r8,r9
800079f2:	a3 78       	lsl	r8,0x3
800079f4:	f4 08 00 08 	add	r8,r10,r8
800079f8:	2f 08       	sub	r8,-16
800079fa:	f0 e2 00 00 	ld.d	r2,r8[0]
800079fe:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a02:	f0 16 00 02 	mcall	r6[8]
80007a06:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a0a:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a0e:	12 98       	mov	r8,r9
80007a10:	a3 78       	lsl	r8,0x3
80007a12:	12 08       	add	r8,r9
80007a14:	a3 78       	lsl	r8,0x3
80007a16:	f8 08 00 08 	add	r8,r12,r8
80007a1a:	2d 88       	sub	r8,-40
80007a1c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a20:	f0 16 00 03 	mcall	r6[12]
80007a24:	14 98       	mov	r8,r10
80007a26:	16 99       	mov	r9,r11
80007a28:	04 9a       	mov	r10,r2
80007a2a:	06 9b       	mov	r11,r3
80007a2c:	f0 16 00 05 	mcall	r6[20]
80007a30:	14 98       	mov	r8,r10
80007a32:	16 99       	mov	r9,r11
80007a34:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80007a38:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a3c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a40:	12 98       	mov	r8,r9
80007a42:	a3 78       	lsl	r8,0x3
80007a44:	12 08       	add	r8,r9
80007a46:	a3 78       	lsl	r8,0x3
80007a48:	f4 08 00 08 	add	r8,r10,r8
80007a4c:	2e 88       	sub	r8,-24
80007a4e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a52:	ee eb ff 7c 	st.d	r7[-132],r10
80007a56:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a5a:	f0 16 00 02 	mcall	r6[8]
80007a5e:	14 90       	mov	r0,r10
80007a60:	16 91       	mov	r1,r11
80007a62:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a66:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a6a:	12 98       	mov	r8,r9
80007a6c:	a3 78       	lsl	r8,0x3
80007a6e:	12 08       	add	r8,r9
80007a70:	a3 78       	lsl	r8,0x3
80007a72:	f4 08 00 08 	add	r8,r10,r8
80007a76:	2e 08       	sub	r8,-32
80007a78:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a7c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a80:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a84:	12 98       	mov	r8,r9
80007a86:	a3 78       	lsl	r8,0x3
80007a88:	12 08       	add	r8,r9
80007a8a:	a3 78       	lsl	r8,0x3
80007a8c:	f8 08 00 08 	add	r8,r12,r8
80007a90:	2d 08       	sub	r8,-48
80007a92:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a96:	f0 16 00 11 	mcall	r6[68]
80007a9a:	14 98       	mov	r8,r10
80007a9c:	16 99       	mov	r9,r11
80007a9e:	10 92       	mov	r2,r8
80007aa0:	12 93       	mov	r3,r9
80007aa2:	ee fc ff a4 	ld.w	r12,r7[-92]
80007aa6:	f0 16 00 02 	mcall	r6[8]
80007aaa:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007aae:	ec fc 00 1c 	ld.w	r12,r6[28]
80007ab2:	12 98       	mov	r8,r9
80007ab4:	a3 78       	lsl	r8,0x3
80007ab6:	12 08       	add	r8,r9
80007ab8:	a3 78       	lsl	r8,0x3
80007aba:	f8 08 00 08 	add	r8,r12,r8
80007abe:	2c 88       	sub	r8,-56
80007ac0:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ac4:	f0 16 00 03 	mcall	r6[12]
80007ac8:	14 98       	mov	r8,r10
80007aca:	16 99       	mov	r9,r11
80007acc:	04 9a       	mov	r10,r2
80007ace:	06 9b       	mov	r11,r3
80007ad0:	f0 16 00 11 	mcall	r6[68]
80007ad4:	14 98       	mov	r8,r10
80007ad6:	16 99       	mov	r9,r11
80007ad8:	00 9a       	mov	r10,r0
80007ada:	02 9b       	mov	r11,r1
80007adc:	f0 16 00 03 	mcall	r6[12]
80007ae0:	14 98       	mov	r8,r10
80007ae2:	16 99       	mov	r9,r11
80007ae4:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007ae8:	f0 16 00 05 	mcall	r6[20]
80007aec:	14 98       	mov	r8,r10
80007aee:	16 99       	mov	r9,r11
80007af0:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
80007af4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007af8:	ec fa 00 1c 	ld.w	r10,r6[28]
80007afc:	12 98       	mov	r8,r9
80007afe:	a3 78       	lsl	r8,0x3
80007b00:	12 08       	add	r8,r9
80007b02:	a3 78       	lsl	r8,0x3
80007b04:	f4 08 00 08 	add	r8,r10,r8
80007b08:	2e 08       	sub	r8,-32
80007b0a:	f0 e0 00 00 	ld.d	r0,r8[0]
80007b0e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b12:	f0 16 00 02 	mcall	r6[8]
80007b16:	ee eb ff 84 	st.d	r7[-124],r10
80007b1a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b1e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b22:	12 98       	mov	r8,r9
80007b24:	a3 78       	lsl	r8,0x3
80007b26:	12 08       	add	r8,r9
80007b28:	a3 78       	lsl	r8,0x3
80007b2a:	f4 08 00 08 	add	r8,r10,r8
80007b2e:	2c 88       	sub	r8,-56
80007b30:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b34:	12 9a       	mov	r10,r9
80007b36:	ee 1a 80 00 	eorh	r10,0x8000
80007b3a:	ef 4a ff 8c 	st.w	r7[-116],r10
80007b3e:	10 95       	mov	r5,r8
80007b40:	ef 45 ff 90 	st.w	r7[-112],r5
80007b44:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b48:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b4c:	12 98       	mov	r8,r9
80007b4e:	a3 78       	lsl	r8,0x3
80007b50:	12 08       	add	r8,r9
80007b52:	a3 78       	lsl	r8,0x3
80007b54:	f4 08 00 08 	add	r8,r10,r8
80007b58:	2d 88       	sub	r8,-40
80007b5a:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b5e:	ee ea ff 8c 	ld.d	r10,r7[-116]
80007b62:	f0 16 00 11 	mcall	r6[68]
80007b66:	14 98       	mov	r8,r10
80007b68:	16 99       	mov	r9,r11
80007b6a:	10 92       	mov	r2,r8
80007b6c:	12 93       	mov	r3,r9
80007b6e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b72:	f0 16 00 02 	mcall	r6[8]
80007b76:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b7a:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b7e:	12 98       	mov	r8,r9
80007b80:	a3 78       	lsl	r8,0x3
80007b82:	12 08       	add	r8,r9
80007b84:	a3 78       	lsl	r8,0x3
80007b86:	f8 08 00 08 	add	r8,r12,r8
80007b8a:	2c 08       	sub	r8,-64
80007b8c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b90:	f0 16 00 03 	mcall	r6[12]
80007b94:	14 98       	mov	r8,r10
80007b96:	16 99       	mov	r9,r11
80007b98:	04 9a       	mov	r10,r2
80007b9a:	06 9b       	mov	r11,r3
80007b9c:	f0 16 00 05 	mcall	r6[20]
80007ba0:	14 98       	mov	r8,r10
80007ba2:	16 99       	mov	r9,r11
80007ba4:	ee ea ff 84 	ld.d	r10,r7[-124]
80007ba8:	f0 16 00 03 	mcall	r6[12]
80007bac:	14 98       	mov	r8,r10
80007bae:	16 99       	mov	r9,r11
80007bb0:	00 9a       	mov	r10,r0
80007bb2:	02 9b       	mov	r11,r1
80007bb4:	f0 16 00 05 	mcall	r6[20]
80007bb8:	14 98       	mov	r8,r10
80007bba:	16 99       	mov	r9,r11
80007bbc:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
80007bc0:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007bc4:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bc8:	12 98       	mov	r8,r9
80007bca:	a3 78       	lsl	r8,0x3
80007bcc:	12 08       	add	r8,r9
80007bce:	a3 78       	lsl	r8,0x3
80007bd0:	f4 08 00 08 	add	r8,r10,r8
80007bd4:	2d 88       	sub	r8,-40
80007bd6:	f0 e2 00 00 	ld.d	r2,r8[0]
80007bda:	ee fc ff a4 	ld.w	r12,r7[-92]
80007bde:	f0 16 00 02 	mcall	r6[8]
80007be2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007be6:	ec fc 00 1c 	ld.w	r12,r6[28]
80007bea:	12 98       	mov	r8,r9
80007bec:	a3 78       	lsl	r8,0x3
80007bee:	12 08       	add	r8,r9
80007bf0:	a3 78       	lsl	r8,0x3
80007bf2:	f8 08 00 08 	add	r8,r12,r8
80007bf6:	2c 08       	sub	r8,-64
80007bf8:	f0 e8 00 00 	ld.d	r8,r8[0]
80007bfc:	12 94       	mov	r4,r9
80007bfe:	ee 14 80 00 	eorh	r4,0x8000
80007c02:	ef 44 ff 94 	st.w	r7[-108],r4
80007c06:	10 9c       	mov	r12,r8
80007c08:	ef 4c ff 98 	st.w	r7[-104],r12
80007c0c:	ee e8 ff 94 	ld.d	r8,r7[-108]
80007c10:	f0 16 00 03 	mcall	r6[12]
80007c14:	14 98       	mov	r8,r10
80007c16:	16 99       	mov	r9,r11
80007c18:	04 9a       	mov	r10,r2
80007c1a:	06 9b       	mov	r11,r3
80007c1c:	f0 16 00 05 	mcall	r6[20]
80007c20:	14 98       	mov	r8,r10
80007c22:	16 99       	mov	r9,r11
80007c24:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80007c28:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c2c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c30:	12 98       	mov	r8,r9
80007c32:	a3 78       	lsl	r8,0x3
80007c34:	12 08       	add	r8,r9
80007c36:	a3 78       	lsl	r8,0x3
80007c38:	f4 08 00 08 	add	r8,r10,r8
80007c3c:	2d 08       	sub	r8,-48
80007c3e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c42:	ee fc ff a4 	ld.w	r12,r7[-92]
80007c46:	f0 16 00 02 	mcall	r6[8]
80007c4a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c4e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007c52:	12 98       	mov	r8,r9
80007c54:	a3 78       	lsl	r8,0x3
80007c56:	12 08       	add	r8,r9
80007c58:	a3 78       	lsl	r8,0x3
80007c5a:	f8 08 00 08 	add	r8,r12,r8
80007c5e:	2c 88       	sub	r8,-56
80007c60:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c64:	f0 16 00 03 	mcall	r6[12]
80007c68:	14 98       	mov	r8,r10
80007c6a:	16 99       	mov	r9,r11
80007c6c:	04 9a       	mov	r10,r2
80007c6e:	06 9b       	mov	r11,r3
80007c70:	f0 16 00 05 	mcall	r6[20]
80007c74:	14 98       	mov	r8,r10
80007c76:	16 99       	mov	r9,r11
80007c78:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
80007c7c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c80:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c84:	12 98       	mov	r8,r9
80007c86:	a3 78       	lsl	r8,0x3
80007c88:	12 08       	add	r8,r9
80007c8a:	a3 78       	lsl	r8,0x3
80007c8c:	f4 08 00 08 	add	r8,r10,r8
80007c90:	2c 88       	sub	r8,-56
80007c92:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c96:	ee fc ff a4 	ld.w	r12,r7[-92]
80007c9a:	f0 16 00 02 	mcall	r6[8]
80007c9e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ca2:	ec fc 00 1c 	ld.w	r12,r6[28]
80007ca6:	12 98       	mov	r8,r9
80007ca8:	a3 78       	lsl	r8,0x3
80007caa:	12 08       	add	r8,r9
80007cac:	a3 78       	lsl	r8,0x3
80007cae:	f8 08 00 08 	add	r8,r12,r8
80007cb2:	2c 08       	sub	r8,-64
80007cb4:	f0 e8 00 00 	ld.d	r8,r8[0]
80007cb8:	12 95       	mov	r5,r9
80007cba:	ee 15 80 00 	eorh	r5,0x8000
80007cbe:	ef 45 ff 9c 	st.w	r7[-100],r5
80007cc2:	10 94       	mov	r4,r8
80007cc4:	ef 44 ff a0 	st.w	r7[-96],r4
80007cc8:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80007ccc:	f0 16 00 03 	mcall	r6[12]
80007cd0:	14 98       	mov	r8,r10
80007cd2:	16 99       	mov	r9,r11
80007cd4:	04 9a       	mov	r10,r2
80007cd6:	06 9b       	mov	r11,r3
80007cd8:	f0 16 00 05 	mcall	r6[20]
80007cdc:	14 98       	mov	r8,r10
80007cde:	16 99       	mov	r9,r11
80007ce0:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
80007ce4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ce8:	ec fa 00 1c 	ld.w	r10,r6[28]
80007cec:	12 98       	mov	r8,r9
80007cee:	a3 78       	lsl	r8,0x3
80007cf0:	12 08       	add	r8,r9
80007cf2:	a3 78       	lsl	r8,0x3
80007cf4:	f4 08 00 08 	add	r8,r10,r8
80007cf8:	2c 08       	sub	r8,-64
80007cfa:	f0 e8 00 00 	ld.d	r8,r8[0]
80007cfe:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80007d02:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007d06:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d0a:	ec fa 00 e4 	ld.w	r10,r6[228]
80007d0e:	12 98       	mov	r8,r9
80007d10:	a1 78       	lsl	r8,0x1
80007d12:	12 08       	add	r8,r9
80007d14:	a3 78       	lsl	r8,0x3
80007d16:	f4 08 00 08 	add	r8,r10,r8
80007d1a:	f0 ea 00 00 	ld.d	r10,r8[0]
80007d1e:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007d22:	f0 16 00 05 	mcall	r6[20]
80007d26:	14 98       	mov	r8,r10
80007d28:	16 99       	mov	r9,r11
80007d2a:	10 9a       	mov	r10,r8
80007d2c:	12 9b       	mov	r11,r9
80007d2e:	ec f9 00 1c 	ld.w	r9,r6[28]
80007d32:	0a 98       	mov	r8,r5
80007d34:	a3 78       	lsl	r8,0x3
80007d36:	0a 08       	add	r8,r5
80007d38:	a3 78       	lsl	r8,0x3
80007d3a:	f2 08 00 08 	add	r8,r9,r8
80007d3e:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007d42:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d46:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d4a:	12 98       	mov	r8,r9
80007d4c:	a3 78       	lsl	r8,0x3
80007d4e:	12 08       	add	r8,r9
80007d50:	f0 cb ff ff 	sub	r11,r8,-1
80007d54:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007d58:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
80007d5c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d60:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d64:	12 98       	mov	r8,r9
80007d66:	a3 78       	lsl	r8,0x3
80007d68:	12 08       	add	r8,r9
80007d6a:	a3 78       	lsl	r8,0x3
80007d6c:	f4 08 00 08 	add	r8,r10,r8
80007d70:	f0 ca ff f0 	sub	r10,r8,-16
80007d74:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007d78:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007d7c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d80:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d84:	12 98       	mov	r8,r9
80007d86:	a3 78       	lsl	r8,0x3
80007d88:	12 08       	add	r8,r9
80007d8a:	a3 78       	lsl	r8,0x3
80007d8c:	f4 08 00 08 	add	r8,r10,r8
80007d90:	f0 ca ff e8 	sub	r10,r8,-24
80007d94:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007d98:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007d9c:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007da0:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007da4:	ec fa 00 e4 	ld.w	r10,r6[228]
80007da8:	12 98       	mov	r8,r9
80007daa:	a1 78       	lsl	r8,0x1
80007dac:	12 08       	add	r8,r9
80007dae:	2f f8       	sub	r8,-1
80007db0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007db4:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007db8:	f0 16 00 05 	mcall	r6[20]
80007dbc:	14 98       	mov	r8,r10
80007dbe:	16 99       	mov	r9,r11
80007dc0:	10 9a       	mov	r10,r8
80007dc2:	12 9b       	mov	r11,r9
80007dc4:	ec f9 00 1c 	ld.w	r9,r6[28]
80007dc8:	0a 98       	mov	r8,r5
80007dca:	a3 78       	lsl	r8,0x3
80007dcc:	0a 08       	add	r8,r5
80007dce:	a3 78       	lsl	r8,0x3
80007dd0:	f2 08 00 08 	add	r8,r9,r8
80007dd4:	2e 08       	sub	r8,-32
80007dd6:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
80007dda:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007dde:	ec fa 00 1c 	ld.w	r10,r6[28]
80007de2:	12 98       	mov	r8,r9
80007de4:	a3 78       	lsl	r8,0x3
80007de6:	12 08       	add	r8,r9
80007de8:	a3 78       	lsl	r8,0x3
80007dea:	f4 08 00 08 	add	r8,r10,r8
80007dee:	f0 ca ff d8 	sub	r10,r8,-40
80007df2:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007df6:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007dfa:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007dfe:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e02:	12 98       	mov	r8,r9
80007e04:	a3 78       	lsl	r8,0x3
80007e06:	12 08       	add	r8,r9
80007e08:	a3 78       	lsl	r8,0x3
80007e0a:	f4 08 00 08 	add	r8,r10,r8
80007e0e:	f0 ca ff d0 	sub	r10,r8,-48
80007e12:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007e16:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80007e1a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e1e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e22:	12 98       	mov	r8,r9
80007e24:	a3 78       	lsl	r8,0x3
80007e26:	12 08       	add	r8,r9
80007e28:	a3 78       	lsl	r8,0x3
80007e2a:	f4 08 00 08 	add	r8,r10,r8
80007e2e:	f0 ca ff c8 	sub	r10,r8,-56
80007e32:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007e36:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80007e3a:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007e3e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e42:	ec fa 00 e4 	ld.w	r10,r6[228]
80007e46:	12 98       	mov	r8,r9
80007e48:	a1 78       	lsl	r8,0x1
80007e4a:	12 08       	add	r8,r9
80007e4c:	a3 78       	lsl	r8,0x3
80007e4e:	f4 08 00 08 	add	r8,r10,r8
80007e52:	2f 08       	sub	r8,-16
80007e54:	f0 ea 00 00 	ld.d	r10,r8[0]
80007e58:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007e5c:	f0 16 00 05 	mcall	r6[20]
80007e60:	14 98       	mov	r8,r10
80007e62:	16 99       	mov	r9,r11
80007e64:	10 9a       	mov	r10,r8
80007e66:	12 9b       	mov	r11,r9
80007e68:	ec f9 00 1c 	ld.w	r9,r6[28]
80007e6c:	0a 98       	mov	r8,r5
80007e6e:	a3 78       	lsl	r8,0x3
80007e70:	0a 08       	add	r8,r5
80007e72:	a3 78       	lsl	r8,0x3
80007e74:	f2 08 00 08 	add	r8,r9,r8
80007e78:	2c 08       	sub	r8,-64
80007e7a:	f0 eb 00 00 	st.d	r8[0],r10
}
80007e7e:	2c dd       	sub	sp,-204
80007e80:	d8 32       	popm	r0-r7,pc
80007e82:	00 00       	add	r0,r0
80007e84:	80 00       	ld.sh	r0,r0[0x0]
80007e86:	70 0a       	ld.w	r10,r8[0x0]

80007e88 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007e88:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007e8c:	1a 97       	mov	r7,sp
80007e8e:	20 fd       	sub	sp,60
80007e90:	fe f6 05 88 	ld.w	r6,pc[1416]
80007e94:	1e 26       	rsub	r6,pc
80007e96:	ef 4c ff dc 	st.w	r7[-36],r12
80007e9a:	ef 4b ff d8 	st.w	r7[-40],r11
80007e9e:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80007ea2:	ec f8 00 00 	ld.w	r8,r6[0]
80007ea6:	70 01       	ld.w	r1,r8[0x0]
80007ea8:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007eac:	ec f8 00 00 	ld.w	r8,r6[0]
80007eb0:	70 0a       	ld.w	r10,r8[0x0]
80007eb2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007eb6:	12 98       	mov	r8,r9
80007eb8:	a1 78       	lsl	r8,0x1
80007eba:	12 08       	add	r8,r9
80007ebc:	a3 78       	lsl	r8,0x3
80007ebe:	f4 08 00 08 	add	r8,r10,r8
80007ec2:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007ec6:	f0 e2 00 00 	ld.d	r2,r8[0]
80007eca:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ece:	f0 16 00 02 	mcall	r6[8]
80007ed2:	ec f8 00 00 	ld.w	r8,r6[0]
80007ed6:	70 0c       	ld.w	r12,r8[0x0]
80007ed8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007edc:	12 98       	mov	r8,r9
80007ede:	a1 78       	lsl	r8,0x1
80007ee0:	12 08       	add	r8,r9
80007ee2:	2f f8       	sub	r8,-1
80007ee4:	a3 78       	lsl	r8,0x3
80007ee6:	f8 08 00 08 	add	r8,r12,r8
80007eea:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007eee:	f0 16 00 03 	mcall	r6[12]
80007ef2:	14 98       	mov	r8,r10
80007ef4:	16 99       	mov	r9,r11
80007ef6:	04 9a       	mov	r10,r2
80007ef8:	06 9b       	mov	r11,r3
80007efa:	f0 16 00 05 	mcall	r6[20]
80007efe:	14 98       	mov	r8,r10
80007f00:	16 99       	mov	r9,r11
80007f02:	10 92       	mov	r2,r8
80007f04:	12 93       	mov	r3,r9
80007f06:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007f0a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007f0e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007f12:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007f16:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007f1a:	10 9c       	mov	r12,r8
80007f1c:	f0 16 00 02 	mcall	r6[8]
80007f20:	14 98       	mov	r8,r10
80007f22:	16 99       	mov	r9,r11
80007f24:	04 9a       	mov	r10,r2
80007f26:	06 9b       	mov	r11,r3
80007f28:	f0 16 00 05 	mcall	r6[20]
80007f2c:	14 98       	mov	r8,r10
80007f2e:	16 99       	mov	r9,r11
80007f30:	10 9a       	mov	r10,r8
80007f32:	12 9b       	mov	r11,r9
80007f34:	0a 98       	mov	r8,r5
80007f36:	a1 78       	lsl	r8,0x1
80007f38:	0a 08       	add	r8,r5
80007f3a:	a3 78       	lsl	r8,0x3
80007f3c:	e2 08 00 08 	add	r8,r1,r8
80007f40:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007f44:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80007f48:	ec f8 00 00 	ld.w	r8,r6[0]
80007f4c:	70 01       	ld.w	r1,r8[0x0]
80007f4e:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007f52:	ec f8 00 00 	ld.w	r8,r6[0]
80007f56:	70 0a       	ld.w	r10,r8[0x0]
80007f58:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f5c:	12 98       	mov	r8,r9
80007f5e:	a1 78       	lsl	r8,0x1
80007f60:	12 08       	add	r8,r9
80007f62:	a3 78       	lsl	r8,0x3
80007f64:	f4 08 00 08 	add	r8,r10,r8
80007f68:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007f6c:	f0 e2 00 00 	ld.d	r2,r8[0]
80007f70:	ee fc ff d4 	ld.w	r12,r7[-44]
80007f74:	f0 16 00 02 	mcall	r6[8]
80007f78:	ec f8 00 00 	ld.w	r8,r6[0]
80007f7c:	70 0c       	ld.w	r12,r8[0x0]
80007f7e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f82:	12 98       	mov	r8,r9
80007f84:	a1 78       	lsl	r8,0x1
80007f86:	12 08       	add	r8,r9
80007f88:	2f f8       	sub	r8,-1
80007f8a:	a3 78       	lsl	r8,0x3
80007f8c:	f8 08 00 08 	add	r8,r12,r8
80007f90:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007f94:	f0 16 00 03 	mcall	r6[12]
80007f98:	14 98       	mov	r8,r10
80007f9a:	16 99       	mov	r9,r11
80007f9c:	04 9a       	mov	r10,r2
80007f9e:	06 9b       	mov	r11,r3
80007fa0:	f0 16 00 05 	mcall	r6[20]
80007fa4:	14 98       	mov	r8,r10
80007fa6:	16 99       	mov	r9,r11
80007fa8:	10 9a       	mov	r10,r8
80007faa:	12 9b       	mov	r11,r9
80007fac:	0a 98       	mov	r8,r5
80007fae:	a1 78       	lsl	r8,0x1
80007fb0:	0a 08       	add	r8,r5
80007fb2:	a3 78       	lsl	r8,0x3
80007fb4:	e2 08 00 08 	add	r8,r1,r8
80007fb8:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007fbc:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
80007fc0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fc4:	ec fa 00 18 	ld.w	r10,r6[24]
80007fc8:	12 98       	mov	r8,r9
80007fca:	a3 78       	lsl	r8,0x3
80007fcc:	12 08       	add	r8,r9
80007fce:	a3 78       	lsl	r8,0x3
80007fd0:	f4 08 00 08 	add	r8,r10,r8
80007fd4:	f0 e2 00 00 	ld.d	r2,r8[0]
80007fd8:	ee fc ff d4 	ld.w	r12,r7[-44]
80007fdc:	f0 16 00 02 	mcall	r6[8]
80007fe0:	14 90       	mov	r0,r10
80007fe2:	16 91       	mov	r1,r11
80007fe4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fe8:	ec fa 00 18 	ld.w	r10,r6[24]
80007fec:	12 98       	mov	r8,r9
80007fee:	a3 78       	lsl	r8,0x3
80007ff0:	12 08       	add	r8,r9
80007ff2:	a3 78       	lsl	r8,0x3
80007ff4:	f4 08 00 08 	add	r8,r10,r8
80007ff8:	2e 88       	sub	r8,-24
80007ffa:	f0 ea 00 00 	ld.d	r10,r8[0]
80007ffe:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008002:	ec fc 00 18 	ld.w	r12,r6[24]
80008006:	12 98       	mov	r8,r9
80008008:	a3 78       	lsl	r8,0x3
8000800a:	12 08       	add	r8,r9
8000800c:	2f f8       	sub	r8,-1
8000800e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008012:	f0 16 00 05 	mcall	r6[20]
80008016:	14 98       	mov	r8,r10
80008018:	16 99       	mov	r9,r11
8000801a:	ee e9 ff c4 	st.d	r7[-60],r8
8000801e:	ee fc ff d4 	ld.w	r12,r7[-44]
80008022:	f0 16 00 02 	mcall	r6[8]
80008026:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000802a:	ec fc 00 18 	ld.w	r12,r6[24]
8000802e:	12 98       	mov	r8,r9
80008030:	a3 78       	lsl	r8,0x3
80008032:	12 08       	add	r8,r9
80008034:	a3 78       	lsl	r8,0x3
80008036:	f8 08 00 08 	add	r8,r12,r8
8000803a:	2e 08       	sub	r8,-32
8000803c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008040:	f0 16 00 03 	mcall	r6[12]
80008044:	14 98       	mov	r8,r10
80008046:	16 99       	mov	r9,r11
80008048:	ee ea ff c4 	ld.d	r10,r7[-60]
8000804c:	f0 16 00 05 	mcall	r6[20]
80008050:	14 98       	mov	r8,r10
80008052:	16 99       	mov	r9,r11
80008054:	00 9a       	mov	r10,r0
80008056:	02 9b       	mov	r11,r1
80008058:	f0 16 00 03 	mcall	r6[12]
8000805c:	14 98       	mov	r8,r10
8000805e:	16 99       	mov	r9,r11
80008060:	04 9a       	mov	r10,r2
80008062:	06 9b       	mov	r11,r3
80008064:	f0 16 00 05 	mcall	r6[20]
80008068:	14 98       	mov	r8,r10
8000806a:	16 99       	mov	r9,r11
8000806c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80008070:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008074:	ec fa 00 18 	ld.w	r10,r6[24]
80008078:	12 98       	mov	r8,r9
8000807a:	a3 78       	lsl	r8,0x3
8000807c:	12 08       	add	r8,r9
8000807e:	2f f8       	sub	r8,-1
80008080:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80008084:	ee fc ff d4 	ld.w	r12,r7[-44]
80008088:	f0 16 00 02 	mcall	r6[8]
8000808c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008090:	ec fc 00 18 	ld.w	r12,r6[24]
80008094:	12 98       	mov	r8,r9
80008096:	a3 78       	lsl	r8,0x3
80008098:	12 08       	add	r8,r9
8000809a:	a3 78       	lsl	r8,0x3
8000809c:	f8 08 00 08 	add	r8,r12,r8
800080a0:	2e 08       	sub	r8,-32
800080a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800080a6:	f0 16 00 03 	mcall	r6[12]
800080aa:	14 98       	mov	r8,r10
800080ac:	16 99       	mov	r9,r11
800080ae:	04 9a       	mov	r10,r2
800080b0:	06 9b       	mov	r11,r3
800080b2:	f0 16 00 05 	mcall	r6[20]
800080b6:	14 98       	mov	r8,r10
800080b8:	16 99       	mov	r9,r11
800080ba:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
800080be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080c2:	ec fa 00 18 	ld.w	r10,r6[24]
800080c6:	12 98       	mov	r8,r9
800080c8:	a3 78       	lsl	r8,0x3
800080ca:	12 08       	add	r8,r9
800080cc:	a3 78       	lsl	r8,0x3
800080ce:	f4 08 00 08 	add	r8,r10,r8
800080d2:	2e 88       	sub	r8,-24
800080d4:	f0 e2 00 00 	ld.d	r2,r8[0]
800080d8:	ee fc ff d4 	ld.w	r12,r7[-44]
800080dc:	f0 16 00 02 	mcall	r6[8]
800080e0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080e4:	ec fc 00 18 	ld.w	r12,r6[24]
800080e8:	12 98       	mov	r8,r9
800080ea:	a3 78       	lsl	r8,0x3
800080ec:	12 08       	add	r8,r9
800080ee:	a3 78       	lsl	r8,0x3
800080f0:	f8 08 00 08 	add	r8,r12,r8
800080f4:	2e 08       	sub	r8,-32
800080f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800080fa:	f0 16 00 03 	mcall	r6[12]
800080fe:	14 98       	mov	r8,r10
80008100:	16 99       	mov	r9,r11
80008102:	04 9a       	mov	r10,r2
80008104:	06 9b       	mov	r11,r3
80008106:	f0 16 00 05 	mcall	r6[20]
8000810a:	14 98       	mov	r8,r10
8000810c:	16 99       	mov	r9,r11
8000810e:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80008112:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008116:	ec fa 00 18 	ld.w	r10,r6[24]
8000811a:	12 98       	mov	r8,r9
8000811c:	a3 78       	lsl	r8,0x3
8000811e:	12 08       	add	r8,r9
80008120:	a3 78       	lsl	r8,0x3
80008122:	f4 08 00 08 	add	r8,r10,r8
80008126:	2e 08       	sub	r8,-32
80008128:	f0 e8 00 00 	ld.d	r8,r8[0]
8000812c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80008130:	ee f5 ff dc 	ld.w	r5,r7[-36]
80008134:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008138:	ec fa 00 e0 	ld.w	r10,r6[224]
8000813c:	12 98       	mov	r8,r9
8000813e:	a1 78       	lsl	r8,0x1
80008140:	12 08       	add	r8,r9
80008142:	a3 78       	lsl	r8,0x3
80008144:	f4 08 00 08 	add	r8,r10,r8
80008148:	f0 ea 00 00 	ld.d	r10,r8[0]
8000814c:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008150:	f0 16 00 05 	mcall	r6[20]
80008154:	14 98       	mov	r8,r10
80008156:	16 99       	mov	r9,r11
80008158:	10 9a       	mov	r10,r8
8000815a:	12 9b       	mov	r11,r9
8000815c:	ec f9 00 18 	ld.w	r9,r6[24]
80008160:	0a 98       	mov	r8,r5
80008162:	a3 78       	lsl	r8,0x3
80008164:	0a 08       	add	r8,r5
80008166:	a3 78       	lsl	r8,0x3
80008168:	f2 08 00 08 	add	r8,r9,r8
8000816c:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80008170:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008174:	ec fa 00 18 	ld.w	r10,r6[24]
80008178:	12 98       	mov	r8,r9
8000817a:	a3 78       	lsl	r8,0x3
8000817c:	12 08       	add	r8,r9
8000817e:	f0 cb ff ff 	sub	r11,r8,-1
80008182:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008186:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
8000818a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000818e:	ec fa 00 18 	ld.w	r10,r6[24]
80008192:	12 98       	mov	r8,r9
80008194:	a3 78       	lsl	r8,0x3
80008196:	12 08       	add	r8,r9
80008198:	a3 78       	lsl	r8,0x3
8000819a:	f4 08 00 08 	add	r8,r10,r8
8000819e:	f0 ca ff e8 	sub	r10,r8,-24
800081a2:	ee e8 ff f0 	ld.d	r8,r7[-16]
800081a6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800081aa:	ee f5 ff dc 	ld.w	r5,r7[-36]
800081ae:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081b2:	ec fa 00 e0 	ld.w	r10,r6[224]
800081b6:	12 98       	mov	r8,r9
800081b8:	a1 78       	lsl	r8,0x1
800081ba:	12 08       	add	r8,r9
800081bc:	2f f8       	sub	r8,-1
800081be:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800081c2:	ee e8 ff f8 	ld.d	r8,r7[-8]
800081c6:	f0 16 00 05 	mcall	r6[20]
800081ca:	14 98       	mov	r8,r10
800081cc:	16 99       	mov	r9,r11
800081ce:	10 9a       	mov	r10,r8
800081d0:	12 9b       	mov	r11,r9
800081d2:	ec f9 00 18 	ld.w	r9,r6[24]
800081d6:	0a 98       	mov	r8,r5
800081d8:	a3 78       	lsl	r8,0x3
800081da:	0a 08       	add	r8,r5
800081dc:	a3 78       	lsl	r8,0x3
800081de:	f2 08 00 08 	add	r8,r9,r8
800081e2:	2e 08       	sub	r8,-32
800081e4:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
800081e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081ec:	ec fa 00 1c 	ld.w	r10,r6[28]
800081f0:	12 98       	mov	r8,r9
800081f2:	a3 78       	lsl	r8,0x3
800081f4:	12 08       	add	r8,r9
800081f6:	a3 78       	lsl	r8,0x3
800081f8:	f4 08 00 08 	add	r8,r10,r8
800081fc:	f0 e2 00 00 	ld.d	r2,r8[0]
80008200:	ee fc ff d4 	ld.w	r12,r7[-44]
80008204:	f0 16 00 02 	mcall	r6[8]
80008208:	14 90       	mov	r0,r10
8000820a:	16 91       	mov	r1,r11
8000820c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008210:	ec fa 00 1c 	ld.w	r10,r6[28]
80008214:	12 98       	mov	r8,r9
80008216:	a3 78       	lsl	r8,0x3
80008218:	12 08       	add	r8,r9
8000821a:	a3 78       	lsl	r8,0x3
8000821c:	f4 08 00 08 	add	r8,r10,r8
80008220:	2e 88       	sub	r8,-24
80008222:	f0 ea 00 00 	ld.d	r10,r8[0]
80008226:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000822a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000822e:	12 98       	mov	r8,r9
80008230:	a3 78       	lsl	r8,0x3
80008232:	12 08       	add	r8,r9
80008234:	2f f8       	sub	r8,-1
80008236:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000823a:	f0 16 00 05 	mcall	r6[20]
8000823e:	14 98       	mov	r8,r10
80008240:	16 99       	mov	r9,r11
80008242:	ee e9 ff cc 	st.d	r7[-52],r8
80008246:	ee fc ff d4 	ld.w	r12,r7[-44]
8000824a:	f0 16 00 02 	mcall	r6[8]
8000824e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008252:	ec fc 00 1c 	ld.w	r12,r6[28]
80008256:	12 98       	mov	r8,r9
80008258:	a3 78       	lsl	r8,0x3
8000825a:	12 08       	add	r8,r9
8000825c:	a3 78       	lsl	r8,0x3
8000825e:	f8 08 00 08 	add	r8,r12,r8
80008262:	2e 08       	sub	r8,-32
80008264:	f0 e8 00 00 	ld.d	r8,r8[0]
80008268:	f0 16 00 03 	mcall	r6[12]
8000826c:	14 98       	mov	r8,r10
8000826e:	16 99       	mov	r9,r11
80008270:	ee ea ff cc 	ld.d	r10,r7[-52]
80008274:	f0 16 00 05 	mcall	r6[20]
80008278:	14 98       	mov	r8,r10
8000827a:	16 99       	mov	r9,r11
8000827c:	00 9a       	mov	r10,r0
8000827e:	02 9b       	mov	r11,r1
80008280:	f0 16 00 03 	mcall	r6[12]
80008284:	14 98       	mov	r8,r10
80008286:	16 99       	mov	r9,r11
80008288:	04 9a       	mov	r10,r2
8000828a:	06 9b       	mov	r11,r3
8000828c:	f0 16 00 05 	mcall	r6[20]
80008290:	14 98       	mov	r8,r10
80008292:	16 99       	mov	r9,r11
80008294:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
80008298:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000829c:	ec fa 00 1c 	ld.w	r10,r6[28]
800082a0:	12 98       	mov	r8,r9
800082a2:	a3 78       	lsl	r8,0x3
800082a4:	12 08       	add	r8,r9
800082a6:	2f f8       	sub	r8,-1
800082a8:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
800082ac:	ee fc ff d4 	ld.w	r12,r7[-44]
800082b0:	f0 16 00 02 	mcall	r6[8]
800082b4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082b8:	ec fc 00 1c 	ld.w	r12,r6[28]
800082bc:	12 98       	mov	r8,r9
800082be:	a3 78       	lsl	r8,0x3
800082c0:	12 08       	add	r8,r9
800082c2:	a3 78       	lsl	r8,0x3
800082c4:	f8 08 00 08 	add	r8,r12,r8
800082c8:	2e 08       	sub	r8,-32
800082ca:	f0 e8 00 00 	ld.d	r8,r8[0]
800082ce:	f0 16 00 03 	mcall	r6[12]
800082d2:	14 98       	mov	r8,r10
800082d4:	16 99       	mov	r9,r11
800082d6:	04 9a       	mov	r10,r2
800082d8:	06 9b       	mov	r11,r3
800082da:	f0 16 00 05 	mcall	r6[20]
800082de:	14 98       	mov	r8,r10
800082e0:	16 99       	mov	r9,r11
800082e2:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
800082e6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082ea:	ec fa 00 1c 	ld.w	r10,r6[28]
800082ee:	12 98       	mov	r8,r9
800082f0:	a3 78       	lsl	r8,0x3
800082f2:	12 08       	add	r8,r9
800082f4:	a3 78       	lsl	r8,0x3
800082f6:	f4 08 00 08 	add	r8,r10,r8
800082fa:	2e 88       	sub	r8,-24
800082fc:	f0 e2 00 00 	ld.d	r2,r8[0]
80008300:	ee fc ff d4 	ld.w	r12,r7[-44]
80008304:	f0 16 00 02 	mcall	r6[8]
80008308:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000830c:	ec fc 00 1c 	ld.w	r12,r6[28]
80008310:	12 98       	mov	r8,r9
80008312:	a3 78       	lsl	r8,0x3
80008314:	12 08       	add	r8,r9
80008316:	a3 78       	lsl	r8,0x3
80008318:	f8 08 00 08 	add	r8,r12,r8
8000831c:	2e 08       	sub	r8,-32
8000831e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008322:	f0 16 00 03 	mcall	r6[12]
80008326:	14 98       	mov	r8,r10
80008328:	16 99       	mov	r9,r11
8000832a:	04 9a       	mov	r10,r2
8000832c:	06 9b       	mov	r11,r3
8000832e:	f0 16 00 05 	mcall	r6[20]
80008332:	14 98       	mov	r8,r10
80008334:	16 99       	mov	r9,r11
80008336:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
8000833a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000833e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008342:	12 98       	mov	r8,r9
80008344:	a3 78       	lsl	r8,0x3
80008346:	12 08       	add	r8,r9
80008348:	a3 78       	lsl	r8,0x3
8000834a:	f4 08 00 08 	add	r8,r10,r8
8000834e:	2e 08       	sub	r8,-32
80008350:	f0 e8 00 00 	ld.d	r8,r8[0]
80008354:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80008358:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000835c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008360:	ec fa 00 e4 	ld.w	r10,r6[228]
80008364:	12 98       	mov	r8,r9
80008366:	a1 78       	lsl	r8,0x1
80008368:	12 08       	add	r8,r9
8000836a:	a3 78       	lsl	r8,0x3
8000836c:	f4 08 00 08 	add	r8,r10,r8
80008370:	f0 ea 00 00 	ld.d	r10,r8[0]
80008374:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008378:	f0 16 00 05 	mcall	r6[20]
8000837c:	14 98       	mov	r8,r10
8000837e:	16 99       	mov	r9,r11
80008380:	10 9a       	mov	r10,r8
80008382:	12 9b       	mov	r11,r9
80008384:	ec f9 00 1c 	ld.w	r9,r6[28]
80008388:	0a 98       	mov	r8,r5
8000838a:	a3 78       	lsl	r8,0x3
8000838c:	0a 08       	add	r8,r5
8000838e:	a3 78       	lsl	r8,0x3
80008390:	f2 08 00 08 	add	r8,r9,r8
80008394:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80008398:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000839c:	ec fa 00 1c 	ld.w	r10,r6[28]
800083a0:	12 98       	mov	r8,r9
800083a2:	a3 78       	lsl	r8,0x3
800083a4:	12 08       	add	r8,r9
800083a6:	f0 cb ff ff 	sub	r11,r8,-1
800083aa:	ee e8 ff e8 	ld.d	r8,r7[-24]
800083ae:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
800083b2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083b6:	ec fa 00 1c 	ld.w	r10,r6[28]
800083ba:	12 98       	mov	r8,r9
800083bc:	a3 78       	lsl	r8,0x3
800083be:	12 08       	add	r8,r9
800083c0:	a3 78       	lsl	r8,0x3
800083c2:	f4 08 00 08 	add	r8,r10,r8
800083c6:	f0 ca ff e8 	sub	r10,r8,-24
800083ca:	ee e8 ff f0 	ld.d	r8,r7[-16]
800083ce:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800083d2:	ee f5 ff dc 	ld.w	r5,r7[-36]
800083d6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083da:	ec fa 00 e4 	ld.w	r10,r6[228]
800083de:	12 98       	mov	r8,r9
800083e0:	a1 78       	lsl	r8,0x1
800083e2:	12 08       	add	r8,r9
800083e4:	2f f8       	sub	r8,-1
800083e6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800083ea:	ee e8 ff f8 	ld.d	r8,r7[-8]
800083ee:	f0 16 00 05 	mcall	r6[20]
800083f2:	14 98       	mov	r8,r10
800083f4:	16 99       	mov	r9,r11
800083f6:	10 9a       	mov	r10,r8
800083f8:	12 9b       	mov	r11,r9
800083fa:	ec f9 00 1c 	ld.w	r9,r6[28]
800083fe:	0a 98       	mov	r8,r5
80008400:	a3 78       	lsl	r8,0x3
80008402:	0a 08       	add	r8,r5
80008404:	a3 78       	lsl	r8,0x3
80008406:	f2 08 00 08 	add	r8,r9,r8
8000840a:	2e 08       	sub	r8,-32
8000840c:	f0 eb 00 00 	st.d	r8[0],r10
}
80008410:	2f 1d       	sub	sp,-60
80008412:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80008416:	00 00       	add	r0,r0
80008418:	80 00       	ld.sh	r0,r0[0x0]
8000841a:	7d 18       	ld.w	r8,lr[0x44]

8000841c <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
8000841c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008420:	1a 97       	mov	r7,sp
80008422:	fa cd 00 e4 	sub	sp,sp,228
80008426:	fe f6 0b fe 	ld.w	r6,pc[3070]
8000842a:	1e 26       	rsub	r6,pc
8000842c:	ef 4c ff 84 	st.w	r7[-124],r12
80008430:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80008434:	ec f8 00 00 	ld.w	r8,r6[0]
80008438:	70 0a       	ld.w	r10,r8[0x0]
8000843a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000843e:	12 98       	mov	r8,r9
80008440:	a1 78       	lsl	r8,0x1
80008442:	12 08       	add	r8,r9
80008444:	a3 78       	lsl	r8,0x3
80008446:	f4 08 00 08 	add	r8,r10,r8
8000844a:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000844e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008452:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008456:	f0 16 00 11 	mcall	r6[68]
8000845a:	14 98       	mov	r8,r10
8000845c:	16 99       	mov	r9,r11
8000845e:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80008462:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008466:	ec fa 00 18 	ld.w	r10,r6[24]
8000846a:	12 98       	mov	r8,r9
8000846c:	a3 78       	lsl	r8,0x3
8000846e:	12 08       	add	r8,r9
80008470:	a3 78       	lsl	r8,0x3
80008472:	f4 08 00 08 	add	r8,r10,r8
80008476:	f0 ea 00 00 	ld.d	r10,r8[0]
8000847a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000847e:	ec f8 01 70 	ld.w	r8,r6[368]
80008482:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008486:	f0 16 00 05 	mcall	r6[20]
8000848a:	14 98       	mov	r8,r10
8000848c:	16 99       	mov	r9,r11
8000848e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
80008492:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008496:	ec fa 00 18 	ld.w	r10,r6[24]
8000849a:	12 98       	mov	r8,r9
8000849c:	a3 78       	lsl	r8,0x3
8000849e:	12 08       	add	r8,r9
800084a0:	a3 78       	lsl	r8,0x3
800084a2:	f4 08 00 08 	add	r8,r10,r8
800084a6:	f0 ea 00 00 	ld.d	r10,r8[0]
800084aa:	ee e8 ff 98 	ld.d	r8,r7[-104]
800084ae:	f0 16 00 0c 	mcall	r6[48]
800084b2:	14 98       	mov	r8,r10
800084b4:	16 99       	mov	r9,r11
800084b6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
800084ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084be:	ec fa 00 18 	ld.w	r10,r6[24]
800084c2:	12 98       	mov	r8,r9
800084c4:	a3 78       	lsl	r8,0x3
800084c6:	12 08       	add	r8,r9
800084c8:	a3 78       	lsl	r8,0x3
800084ca:	f4 08 00 08 	add	r8,r10,r8
800084ce:	2e 88       	sub	r8,-24
800084d0:	f0 ea 00 00 	ld.d	r10,r8[0]
800084d4:	ee e8 ff 98 	ld.d	r8,r7[-104]
800084d8:	f0 16 00 0c 	mcall	r6[48]
800084dc:	14 98       	mov	r8,r10
800084de:	16 99       	mov	r9,r11
800084e0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
800084e4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084e8:	ec fa 00 18 	ld.w	r10,r6[24]
800084ec:	12 98       	mov	r8,r9
800084ee:	a3 78       	lsl	r8,0x3
800084f0:	12 08       	add	r8,r9
800084f2:	a3 78       	lsl	r8,0x3
800084f4:	f4 08 00 08 	add	r8,r10,r8
800084f8:	2d 08       	sub	r8,-48
800084fa:	f0 ea 00 00 	ld.d	r10,r8[0]
800084fe:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008502:	f0 16 00 0c 	mcall	r6[48]
80008506:	14 98       	mov	r8,r10
80008508:	16 99       	mov	r9,r11
8000850a:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
8000850e:	ec f8 00 00 	ld.w	r8,r6[0]
80008512:	70 01       	ld.w	r1,r8[0x0]
80008514:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008518:	ec f8 00 00 	ld.w	r8,r6[0]
8000851c:	70 0a       	ld.w	r10,r8[0x0]
8000851e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008522:	12 98       	mov	r8,r9
80008524:	a1 78       	lsl	r8,0x1
80008526:	12 08       	add	r8,r9
80008528:	a3 78       	lsl	r8,0x3
8000852a:	f4 08 00 08 	add	r8,r10,r8
8000852e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008532:	f0 e2 00 00 	ld.d	r2,r8[0]
80008536:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000853a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000853e:	f0 16 00 03 	mcall	r6[12]
80008542:	14 98       	mov	r8,r10
80008544:	16 99       	mov	r9,r11
80008546:	04 9a       	mov	r10,r2
80008548:	06 9b       	mov	r11,r3
8000854a:	f0 16 00 05 	mcall	r6[20]
8000854e:	14 98       	mov	r8,r10
80008550:	16 99       	mov	r9,r11
80008552:	10 9a       	mov	r10,r8
80008554:	12 9b       	mov	r11,r9
80008556:	0a 98       	mov	r8,r5
80008558:	a1 78       	lsl	r8,0x1
8000855a:	0a 08       	add	r8,r5
8000855c:	a3 78       	lsl	r8,0x3
8000855e:	e2 08 00 08 	add	r8,r1,r8
80008562:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008566:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
8000856a:	ec f8 00 00 	ld.w	r8,r6[0]
8000856e:	70 01       	ld.w	r1,r8[0x0]
80008570:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008574:	ec f8 00 00 	ld.w	r8,r6[0]
80008578:	70 0a       	ld.w	r10,r8[0x0]
8000857a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000857e:	12 98       	mov	r8,r9
80008580:	a1 78       	lsl	r8,0x1
80008582:	12 08       	add	r8,r9
80008584:	2f f8       	sub	r8,-1
80008586:	a3 78       	lsl	r8,0x3
80008588:	f4 08 00 08 	add	r8,r10,r8
8000858c:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80008590:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008594:	ee ea ff a8 	ld.d	r10,r7[-88]
80008598:	f0 16 00 03 	mcall	r6[12]
8000859c:	14 98       	mov	r8,r10
8000859e:	16 99       	mov	r9,r11
800085a0:	04 9a       	mov	r10,r2
800085a2:	06 9b       	mov	r11,r3
800085a4:	f0 16 00 05 	mcall	r6[20]
800085a8:	14 98       	mov	r8,r10
800085aa:	16 99       	mov	r9,r11
800085ac:	10 9a       	mov	r10,r8
800085ae:	12 9b       	mov	r11,r9
800085b0:	0a 98       	mov	r8,r5
800085b2:	a1 78       	lsl	r8,0x1
800085b4:	0a 08       	add	r8,r5
800085b6:	2f f8       	sub	r8,-1
800085b8:	a3 78       	lsl	r8,0x3
800085ba:	e2 08 00 08 	add	r8,r1,r8
800085be:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
800085c2:	ec f8 00 00 	ld.w	r8,r6[0]
800085c6:	70 01       	ld.w	r1,r8[0x0]
800085c8:	ee f5 ff 84 	ld.w	r5,r7[-124]
800085cc:	ec f8 00 00 	ld.w	r8,r6[0]
800085d0:	70 0a       	ld.w	r10,r8[0x0]
800085d2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085d6:	12 98       	mov	r8,r9
800085d8:	a1 78       	lsl	r8,0x1
800085da:	12 08       	add	r8,r9
800085dc:	a3 78       	lsl	r8,0x3
800085de:	f4 08 00 08 	add	r8,r10,r8
800085e2:	f0 c8 f4 94 	sub	r8,r8,-2924
800085e6:	f0 e2 00 00 	ld.d	r2,r8[0]
800085ea:	ee e8 ff 88 	ld.d	r8,r7[-120]
800085ee:	ee ea ff b0 	ld.d	r10,r7[-80]
800085f2:	f0 16 00 03 	mcall	r6[12]
800085f6:	14 98       	mov	r8,r10
800085f8:	16 99       	mov	r9,r11
800085fa:	04 9a       	mov	r10,r2
800085fc:	06 9b       	mov	r11,r3
800085fe:	f0 16 00 05 	mcall	r6[20]
80008602:	14 98       	mov	r8,r10
80008604:	16 99       	mov	r9,r11
80008606:	10 9a       	mov	r10,r8
80008608:	12 9b       	mov	r11,r9
8000860a:	0a 98       	mov	r8,r5
8000860c:	a1 78       	lsl	r8,0x1
8000860e:	0a 08       	add	r8,r5
80008610:	a3 78       	lsl	r8,0x3
80008612:	e2 08 00 08 	add	r8,r1,r8
80008616:	f0 c8 f4 94 	sub	r8,r8,-2924
8000861a:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
8000861e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008622:	30 0a       	mov	r10,0
80008624:	fc 1b 3f f0 	movh	r11,0x3ff0
80008628:	f0 16 00 11 	mcall	r6[68]
8000862c:	14 98       	mov	r8,r10
8000862e:	16 99       	mov	r9,r11
80008630:	10 9a       	mov	r10,r8
80008632:	12 9b       	mov	r11,r9
80008634:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008638:	ec fc 00 18 	ld.w	r12,r6[24]
8000863c:	12 98       	mov	r8,r9
8000863e:	a3 78       	lsl	r8,0x3
80008640:	12 08       	add	r8,r9
80008642:	a3 78       	lsl	r8,0x3
80008644:	f8 08 00 08 	add	r8,r12,r8
80008648:	f0 e8 00 00 	ld.d	r8,r8[0]
8000864c:	f0 16 00 03 	mcall	r6[12]
80008650:	14 98       	mov	r8,r10
80008652:	16 99       	mov	r9,r11
80008654:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
80008658:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000865c:	30 0a       	mov	r10,0
8000865e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008662:	f0 16 00 11 	mcall	r6[68]
80008666:	14 98       	mov	r8,r10
80008668:	16 99       	mov	r9,r11
8000866a:	10 9a       	mov	r10,r8
8000866c:	12 9b       	mov	r11,r9
8000866e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008672:	ec fc 00 18 	ld.w	r12,r6[24]
80008676:	12 98       	mov	r8,r9
80008678:	a3 78       	lsl	r8,0x3
8000867a:	12 08       	add	r8,r9
8000867c:	2f f8       	sub	r8,-1
8000867e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008682:	f0 16 00 03 	mcall	r6[12]
80008686:	14 98       	mov	r8,r10
80008688:	16 99       	mov	r9,r11
8000868a:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
8000868e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008692:	30 0a       	mov	r10,0
80008694:	fc 1b 3f f0 	movh	r11,0x3ff0
80008698:	f0 16 00 11 	mcall	r6[68]
8000869c:	14 98       	mov	r8,r10
8000869e:	16 99       	mov	r9,r11
800086a0:	10 9a       	mov	r10,r8
800086a2:	12 9b       	mov	r11,r9
800086a4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086a8:	ec fc 00 18 	ld.w	r12,r6[24]
800086ac:	12 98       	mov	r8,r9
800086ae:	a3 78       	lsl	r8,0x3
800086b0:	12 08       	add	r8,r9
800086b2:	a3 78       	lsl	r8,0x3
800086b4:	f8 08 00 08 	add	r8,r12,r8
800086b8:	2f 08       	sub	r8,-16
800086ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800086be:	f0 16 00 03 	mcall	r6[12]
800086c2:	14 98       	mov	r8,r10
800086c4:	16 99       	mov	r9,r11
800086c6:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800086ca:	ee f8 ff a8 	ld.w	r8,r7[-88]
800086ce:	10 99       	mov	r9,r8
800086d0:	ee 19 80 00 	eorh	r9,0x8000
800086d4:	ef 49 ff 1c 	st.w	r7[-228],r9
800086d8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800086dc:	ef 48 ff 20 	st.w	r7[-224],r8
800086e0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086e4:	ec fa 00 18 	ld.w	r10,r6[24]
800086e8:	12 98       	mov	r8,r9
800086ea:	a3 78       	lsl	r8,0x3
800086ec:	12 08       	add	r8,r9
800086ee:	a3 78       	lsl	r8,0x3
800086f0:	f4 08 00 08 	add	r8,r10,r8
800086f4:	f0 e8 00 00 	ld.d	r8,r8[0]
800086f8:	ee ea ff 1c 	ld.d	r10,r7[-228]
800086fc:	f0 16 00 03 	mcall	r6[12]
80008700:	14 98       	mov	r8,r10
80008702:	16 99       	mov	r9,r11
80008704:	10 9a       	mov	r10,r8
80008706:	12 9b       	mov	r11,r9
80008708:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000870c:	ec fc 00 18 	ld.w	r12,r6[24]
80008710:	12 98       	mov	r8,r9
80008712:	a3 78       	lsl	r8,0x3
80008714:	12 08       	add	r8,r9
80008716:	a3 78       	lsl	r8,0x3
80008718:	f8 08 00 08 	add	r8,r12,r8
8000871c:	2e 88       	sub	r8,-24
8000871e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008722:	f0 16 00 05 	mcall	r6[20]
80008726:	14 98       	mov	r8,r10
80008728:	16 99       	mov	r9,r11
8000872a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
8000872e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008732:	10 99       	mov	r9,r8
80008734:	ee 19 80 00 	eorh	r9,0x8000
80008738:	ef 49 ff 24 	st.w	r7[-220],r9
8000873c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008740:	ef 48 ff 28 	st.w	r7[-216],r8
80008744:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008748:	ec fa 00 18 	ld.w	r10,r6[24]
8000874c:	12 98       	mov	r8,r9
8000874e:	a3 78       	lsl	r8,0x3
80008750:	12 08       	add	r8,r9
80008752:	2f f8       	sub	r8,-1
80008754:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008758:	ee ea ff 24 	ld.d	r10,r7[-220]
8000875c:	f0 16 00 03 	mcall	r6[12]
80008760:	14 98       	mov	r8,r10
80008762:	16 99       	mov	r9,r11
80008764:	10 9a       	mov	r10,r8
80008766:	12 9b       	mov	r11,r9
80008768:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000876c:	ec fc 00 18 	ld.w	r12,r6[24]
80008770:	12 98       	mov	r8,r9
80008772:	a3 78       	lsl	r8,0x3
80008774:	12 08       	add	r8,r9
80008776:	a3 78       	lsl	r8,0x3
80008778:	f8 08 00 08 	add	r8,r12,r8
8000877c:	2e 08       	sub	r8,-32
8000877e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008782:	f0 16 00 05 	mcall	r6[20]
80008786:	14 98       	mov	r8,r10
80008788:	16 99       	mov	r9,r11
8000878a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
8000878e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008792:	10 99       	mov	r9,r8
80008794:	ee 19 80 00 	eorh	r9,0x8000
80008798:	ef 49 ff 2c 	st.w	r7[-212],r9
8000879c:	ee f8 ff ac 	ld.w	r8,r7[-84]
800087a0:	ef 48 ff 30 	st.w	r7[-208],r8
800087a4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087a8:	ec fa 00 18 	ld.w	r10,r6[24]
800087ac:	12 98       	mov	r8,r9
800087ae:	a3 78       	lsl	r8,0x3
800087b0:	12 08       	add	r8,r9
800087b2:	a3 78       	lsl	r8,0x3
800087b4:	f4 08 00 08 	add	r8,r10,r8
800087b8:	2f 08       	sub	r8,-16
800087ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800087be:	ee ea ff 2c 	ld.d	r10,r7[-212]
800087c2:	f0 16 00 03 	mcall	r6[12]
800087c6:	14 98       	mov	r8,r10
800087c8:	16 99       	mov	r9,r11
800087ca:	10 9a       	mov	r10,r8
800087cc:	12 9b       	mov	r11,r9
800087ce:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087d2:	ec fc 00 18 	ld.w	r12,r6[24]
800087d6:	12 98       	mov	r8,r9
800087d8:	a3 78       	lsl	r8,0x3
800087da:	12 08       	add	r8,r9
800087dc:	a3 78       	lsl	r8,0x3
800087de:	f8 08 00 08 	add	r8,r12,r8
800087e2:	2d 88       	sub	r8,-40
800087e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800087e8:	f0 16 00 05 	mcall	r6[20]
800087ec:	14 98       	mov	r8,r10
800087ee:	16 99       	mov	r9,r11
800087f0:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
800087f4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800087f8:	10 99       	mov	r9,r8
800087fa:	ee 19 80 00 	eorh	r9,0x8000
800087fe:	ef 49 ff 34 	st.w	r7[-204],r9
80008802:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008806:	ef 48 ff 38 	st.w	r7[-200],r8
8000880a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000880e:	ec fa 00 18 	ld.w	r10,r6[24]
80008812:	12 98       	mov	r8,r9
80008814:	a3 78       	lsl	r8,0x3
80008816:	12 08       	add	r8,r9
80008818:	a3 78       	lsl	r8,0x3
8000881a:	f4 08 00 08 	add	r8,r10,r8
8000881e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008822:	ee ea ff 34 	ld.d	r10,r7[-204]
80008826:	f0 16 00 03 	mcall	r6[12]
8000882a:	14 98       	mov	r8,r10
8000882c:	16 99       	mov	r9,r11
8000882e:	10 9a       	mov	r10,r8
80008830:	12 9b       	mov	r11,r9
80008832:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008836:	ec fc 00 18 	ld.w	r12,r6[24]
8000883a:	12 98       	mov	r8,r9
8000883c:	a3 78       	lsl	r8,0x3
8000883e:	12 08       	add	r8,r9
80008840:	a3 78       	lsl	r8,0x3
80008842:	f8 08 00 08 	add	r8,r12,r8
80008846:	2d 08       	sub	r8,-48
80008848:	f0 e8 00 00 	ld.d	r8,r8[0]
8000884c:	f0 16 00 05 	mcall	r6[20]
80008850:	14 98       	mov	r8,r10
80008852:	16 99       	mov	r9,r11
80008854:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
80008858:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000885c:	10 99       	mov	r9,r8
8000885e:	ee 19 80 00 	eorh	r9,0x8000
80008862:	ef 49 ff 3c 	st.w	r7[-196],r9
80008866:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000886a:	ef 48 ff 40 	st.w	r7[-192],r8
8000886e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008872:	ec fa 00 18 	ld.w	r10,r6[24]
80008876:	12 98       	mov	r8,r9
80008878:	a3 78       	lsl	r8,0x3
8000887a:	12 08       	add	r8,r9
8000887c:	2f f8       	sub	r8,-1
8000887e:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008882:	ee ea ff 3c 	ld.d	r10,r7[-196]
80008886:	f0 16 00 03 	mcall	r6[12]
8000888a:	14 98       	mov	r8,r10
8000888c:	16 99       	mov	r9,r11
8000888e:	10 9a       	mov	r10,r8
80008890:	12 9b       	mov	r11,r9
80008892:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008896:	ec fc 00 18 	ld.w	r12,r6[24]
8000889a:	12 98       	mov	r8,r9
8000889c:	a3 78       	lsl	r8,0x3
8000889e:	12 08       	add	r8,r9
800088a0:	a3 78       	lsl	r8,0x3
800088a2:	f8 08 00 08 	add	r8,r12,r8
800088a6:	2c 88       	sub	r8,-56
800088a8:	f0 e8 00 00 	ld.d	r8,r8[0]
800088ac:	f0 16 00 05 	mcall	r6[20]
800088b0:	14 98       	mov	r8,r10
800088b2:	16 99       	mov	r9,r11
800088b4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800088b8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800088bc:	10 99       	mov	r9,r8
800088be:	ee 19 80 00 	eorh	r9,0x8000
800088c2:	ef 49 ff 44 	st.w	r7[-188],r9
800088c6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800088ca:	ef 48 ff 48 	st.w	r7[-184],r8
800088ce:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088d2:	ec fa 00 18 	ld.w	r10,r6[24]
800088d6:	12 98       	mov	r8,r9
800088d8:	a3 78       	lsl	r8,0x3
800088da:	12 08       	add	r8,r9
800088dc:	a3 78       	lsl	r8,0x3
800088de:	f4 08 00 08 	add	r8,r10,r8
800088e2:	2f 08       	sub	r8,-16
800088e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800088e8:	ee ea ff 44 	ld.d	r10,r7[-188]
800088ec:	f0 16 00 03 	mcall	r6[12]
800088f0:	14 98       	mov	r8,r10
800088f2:	16 99       	mov	r9,r11
800088f4:	10 9a       	mov	r10,r8
800088f6:	12 9b       	mov	r11,r9
800088f8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088fc:	ec fc 00 18 	ld.w	r12,r6[24]
80008900:	12 98       	mov	r8,r9
80008902:	a3 78       	lsl	r8,0x3
80008904:	12 08       	add	r8,r9
80008906:	a3 78       	lsl	r8,0x3
80008908:	f8 08 00 08 	add	r8,r12,r8
8000890c:	2c 08       	sub	r8,-64
8000890e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008912:	f0 16 00 05 	mcall	r6[20]
80008916:	14 98       	mov	r8,r10
80008918:	16 99       	mov	r9,r11
8000891a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000891e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008922:	ec fa 00 18 	ld.w	r10,r6[24]
80008926:	12 98       	mov	r8,r9
80008928:	a3 78       	lsl	r8,0x3
8000892a:	12 08       	add	r8,r9
8000892c:	a3 78       	lsl	r8,0x3
8000892e:	10 0a       	add	r10,r8
80008930:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008934:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008938:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000893c:	ec fb 00 18 	ld.w	r11,r6[24]
80008940:	12 98       	mov	r8,r9
80008942:	a3 78       	lsl	r8,0x3
80008944:	12 08       	add	r8,r9
80008946:	f0 ca ff ff 	sub	r10,r8,-1
8000894a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000894e:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80008952:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008956:	ec fa 00 18 	ld.w	r10,r6[24]
8000895a:	12 98       	mov	r8,r9
8000895c:	a3 78       	lsl	r8,0x3
8000895e:	12 08       	add	r8,r9
80008960:	a3 78       	lsl	r8,0x3
80008962:	f4 08 00 08 	add	r8,r10,r8
80008966:	f0 ca ff f0 	sub	r10,r8,-16
8000896a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000896e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80008972:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008976:	ec fa 00 18 	ld.w	r10,r6[24]
8000897a:	12 98       	mov	r8,r9
8000897c:	a3 78       	lsl	r8,0x3
8000897e:	12 08       	add	r8,r9
80008980:	a3 78       	lsl	r8,0x3
80008982:	f4 08 00 08 	add	r8,r10,r8
80008986:	f0 ca ff e8 	sub	r10,r8,-24
8000898a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000898e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80008992:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008996:	ec fa 00 18 	ld.w	r10,r6[24]
8000899a:	12 98       	mov	r8,r9
8000899c:	a3 78       	lsl	r8,0x3
8000899e:	12 08       	add	r8,r9
800089a0:	a3 78       	lsl	r8,0x3
800089a2:	f4 08 00 08 	add	r8,r10,r8
800089a6:	f0 ca ff e0 	sub	r10,r8,-32
800089aa:	ee e8 ff d8 	ld.d	r8,r7[-40]
800089ae:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800089b2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089b6:	ec fa 00 18 	ld.w	r10,r6[24]
800089ba:	12 98       	mov	r8,r9
800089bc:	a3 78       	lsl	r8,0x3
800089be:	12 08       	add	r8,r9
800089c0:	a3 78       	lsl	r8,0x3
800089c2:	f4 08 00 08 	add	r8,r10,r8
800089c6:	f0 ca ff d8 	sub	r10,r8,-40
800089ca:	ee e8 ff e0 	ld.d	r8,r7[-32]
800089ce:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800089d2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089d6:	ec fa 00 18 	ld.w	r10,r6[24]
800089da:	12 98       	mov	r8,r9
800089dc:	a3 78       	lsl	r8,0x3
800089de:	12 08       	add	r8,r9
800089e0:	a3 78       	lsl	r8,0x3
800089e2:	f4 08 00 08 	add	r8,r10,r8
800089e6:	f0 ca ff d0 	sub	r10,r8,-48
800089ea:	ee e8 ff e8 	ld.d	r8,r7[-24]
800089ee:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800089f2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089f6:	ec fa 00 18 	ld.w	r10,r6[24]
800089fa:	12 98       	mov	r8,r9
800089fc:	a3 78       	lsl	r8,0x3
800089fe:	12 08       	add	r8,r9
80008a00:	a3 78       	lsl	r8,0x3
80008a02:	f4 08 00 08 	add	r8,r10,r8
80008a06:	f0 ca ff c8 	sub	r10,r8,-56
80008a0a:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008a0e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80008a12:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a16:	ec fa 00 18 	ld.w	r10,r6[24]
80008a1a:	12 98       	mov	r8,r9
80008a1c:	a3 78       	lsl	r8,0x3
80008a1e:	12 08       	add	r8,r9
80008a20:	a3 78       	lsl	r8,0x3
80008a22:	f4 08 00 08 	add	r8,r10,r8
80008a26:	f0 ca ff c0 	sub	r10,r8,-64
80008a2a:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008a2e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
80008a32:	ec f8 00 00 	ld.w	r8,r6[0]
80008a36:	70 09       	ld.w	r9,r8[0x0]
80008a38:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008a3c:	f0 c8 fc 99 	sub	r8,r8,-871
80008a40:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008a44:	10 9c       	mov	r12,r8
80008a46:	f0 16 00 02 	mcall	r6[8]
80008a4a:	14 98       	mov	r8,r10
80008a4c:	16 99       	mov	r9,r11
80008a4e:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008a52:	f0 16 00 11 	mcall	r6[68]
80008a56:	14 98       	mov	r8,r10
80008a58:	16 99       	mov	r9,r11
80008a5a:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
80008a5e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a62:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a66:	12 98       	mov	r8,r9
80008a68:	a3 78       	lsl	r8,0x3
80008a6a:	12 08       	add	r8,r9
80008a6c:	a3 78       	lsl	r8,0x3
80008a6e:	f4 08 00 08 	add	r8,r10,r8
80008a72:	f0 ea 00 00 	ld.d	r10,r8[0]
80008a76:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a7a:	ec f8 01 6c 	ld.w	r8,r6[364]
80008a7e:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008a82:	f0 16 00 05 	mcall	r6[20]
80008a86:	14 98       	mov	r8,r10
80008a88:	16 99       	mov	r9,r11
80008a8a:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
80008a8e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a92:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a96:	12 98       	mov	r8,r9
80008a98:	a3 78       	lsl	r8,0x3
80008a9a:	12 08       	add	r8,r9
80008a9c:	a3 78       	lsl	r8,0x3
80008a9e:	f4 08 00 08 	add	r8,r10,r8
80008aa2:	f0 ea 00 00 	ld.d	r10,r8[0]
80008aa6:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008aaa:	f0 16 00 0c 	mcall	r6[48]
80008aae:	14 98       	mov	r8,r10
80008ab0:	16 99       	mov	r9,r11
80008ab2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
80008ab6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aba:	ec fa 00 1c 	ld.w	r10,r6[28]
80008abe:	12 98       	mov	r8,r9
80008ac0:	a3 78       	lsl	r8,0x3
80008ac2:	12 08       	add	r8,r9
80008ac4:	a3 78       	lsl	r8,0x3
80008ac6:	f4 08 00 08 	add	r8,r10,r8
80008aca:	2e 88       	sub	r8,-24
80008acc:	f0 ea 00 00 	ld.d	r10,r8[0]
80008ad0:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008ad4:	f0 16 00 0c 	mcall	r6[48]
80008ad8:	14 98       	mov	r8,r10
80008ada:	16 99       	mov	r9,r11
80008adc:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
80008ae0:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ae4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ae8:	12 98       	mov	r8,r9
80008aea:	a3 78       	lsl	r8,0x3
80008aec:	12 08       	add	r8,r9
80008aee:	a3 78       	lsl	r8,0x3
80008af0:	f4 08 00 08 	add	r8,r10,r8
80008af4:	2d 08       	sub	r8,-48
80008af6:	f0 ea 00 00 	ld.d	r10,r8[0]
80008afa:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008afe:	f0 16 00 0c 	mcall	r6[48]
80008b02:	14 98       	mov	r8,r10
80008b04:	16 99       	mov	r9,r11
80008b06:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
80008b0a:	ec f8 00 00 	ld.w	r8,r6[0]
80008b0e:	70 01       	ld.w	r1,r8[0x0]
80008b10:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008b14:	ec f8 00 00 	ld.w	r8,r6[0]
80008b18:	70 09       	ld.w	r9,r8[0x0]
80008b1a:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008b1e:	f0 c8 fc 99 	sub	r8,r8,-871
80008b22:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008b26:	10 9c       	mov	r12,r8
80008b28:	f0 16 00 02 	mcall	r6[8]
80008b2c:	14 92       	mov	r2,r10
80008b2e:	16 93       	mov	r3,r11
80008b30:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008b34:	ee ea ff a0 	ld.d	r10,r7[-96]
80008b38:	f0 16 00 03 	mcall	r6[12]
80008b3c:	14 98       	mov	r8,r10
80008b3e:	16 99       	mov	r9,r11
80008b40:	04 9a       	mov	r10,r2
80008b42:	06 9b       	mov	r11,r3
80008b44:	f0 16 00 05 	mcall	r6[20]
80008b48:	14 98       	mov	r8,r10
80008b4a:	16 99       	mov	r9,r11
80008b4c:	10 9a       	mov	r10,r8
80008b4e:	12 9b       	mov	r11,r9
80008b50:	f0 16 00 08 	mcall	r6[32]
80008b54:	18 99       	mov	r9,r12
80008b56:	ea c8 fc 99 	sub	r8,r5,-871
80008b5a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
80008b5e:	ec f8 00 00 	ld.w	r8,r6[0]
80008b62:	70 01       	ld.w	r1,r8[0x0]
80008b64:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008b68:	ec f8 00 00 	ld.w	r8,r6[0]
80008b6c:	70 09       	ld.w	r9,r8[0x0]
80008b6e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008b72:	f0 c8 fc a3 	sub	r8,r8,-861
80008b76:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008b7a:	10 9c       	mov	r12,r8
80008b7c:	f0 16 00 02 	mcall	r6[8]
80008b80:	14 92       	mov	r2,r10
80008b82:	16 93       	mov	r3,r11
80008b84:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008b88:	ee ea ff a8 	ld.d	r10,r7[-88]
80008b8c:	f0 16 00 03 	mcall	r6[12]
80008b90:	14 98       	mov	r8,r10
80008b92:	16 99       	mov	r9,r11
80008b94:	04 9a       	mov	r10,r2
80008b96:	06 9b       	mov	r11,r3
80008b98:	f0 16 00 05 	mcall	r6[20]
80008b9c:	14 98       	mov	r8,r10
80008b9e:	16 99       	mov	r9,r11
80008ba0:	10 9a       	mov	r10,r8
80008ba2:	12 9b       	mov	r11,r9
80008ba4:	f0 16 00 08 	mcall	r6[32]
80008ba8:	18 99       	mov	r9,r12
80008baa:	ea c8 fc a3 	sub	r8,r5,-861
80008bae:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
80008bb2:	ec f8 00 00 	ld.w	r8,r6[0]
80008bb6:	70 01       	ld.w	r1,r8[0x0]
80008bb8:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008bbc:	f0 c5 ff fd 	sub	r5,r8,-3
80008bc0:	ec f8 00 00 	ld.w	r8,r6[0]
80008bc4:	70 09       	ld.w	r9,r8[0x0]
80008bc6:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008bca:	2f d8       	sub	r8,-3
80008bcc:	2f 48       	sub	r8,-12
80008bce:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008bd2:	10 9c       	mov	r12,r8
80008bd4:	f0 16 00 02 	mcall	r6[8]
80008bd8:	14 92       	mov	r2,r10
80008bda:	16 93       	mov	r3,r11
80008bdc:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008be0:	ee ea ff b0 	ld.d	r10,r7[-80]
80008be4:	f0 16 00 03 	mcall	r6[12]
80008be8:	14 98       	mov	r8,r10
80008bea:	16 99       	mov	r9,r11
80008bec:	04 9a       	mov	r10,r2
80008bee:	06 9b       	mov	r11,r3
80008bf0:	f0 16 00 05 	mcall	r6[20]
80008bf4:	14 98       	mov	r8,r10
80008bf6:	16 99       	mov	r9,r11
80008bf8:	10 9a       	mov	r10,r8
80008bfa:	12 9b       	mov	r11,r9
80008bfc:	f0 16 00 08 	mcall	r6[32]
80008c00:	18 99       	mov	r9,r12
80008c02:	ea c8 ff f4 	sub	r8,r5,-12
80008c06:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
80008c0a:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c0e:	30 0a       	mov	r10,0
80008c10:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c14:	f0 16 00 11 	mcall	r6[68]
80008c18:	14 98       	mov	r8,r10
80008c1a:	16 99       	mov	r9,r11
80008c1c:	10 9a       	mov	r10,r8
80008c1e:	12 9b       	mov	r11,r9
80008c20:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c24:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c28:	12 98       	mov	r8,r9
80008c2a:	a3 78       	lsl	r8,0x3
80008c2c:	12 08       	add	r8,r9
80008c2e:	a3 78       	lsl	r8,0x3
80008c30:	f8 08 00 08 	add	r8,r12,r8
80008c34:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c38:	f0 16 00 03 	mcall	r6[12]
80008c3c:	14 98       	mov	r8,r10
80008c3e:	16 99       	mov	r9,r11
80008c40:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
80008c44:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c48:	30 0a       	mov	r10,0
80008c4a:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c4e:	f0 16 00 11 	mcall	r6[68]
80008c52:	14 98       	mov	r8,r10
80008c54:	16 99       	mov	r9,r11
80008c56:	10 9a       	mov	r10,r8
80008c58:	12 9b       	mov	r11,r9
80008c5a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c5e:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c62:	12 98       	mov	r8,r9
80008c64:	a3 78       	lsl	r8,0x3
80008c66:	12 08       	add	r8,r9
80008c68:	2f f8       	sub	r8,-1
80008c6a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008c6e:	f0 16 00 03 	mcall	r6[12]
80008c72:	14 98       	mov	r8,r10
80008c74:	16 99       	mov	r9,r11
80008c76:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
80008c7a:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c7e:	30 0a       	mov	r10,0
80008c80:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c84:	f0 16 00 11 	mcall	r6[68]
80008c88:	14 98       	mov	r8,r10
80008c8a:	16 99       	mov	r9,r11
80008c8c:	10 9a       	mov	r10,r8
80008c8e:	12 9b       	mov	r11,r9
80008c90:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c94:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c98:	12 98       	mov	r8,r9
80008c9a:	a3 78       	lsl	r8,0x3
80008c9c:	12 08       	add	r8,r9
80008c9e:	a3 78       	lsl	r8,0x3
80008ca0:	f8 08 00 08 	add	r8,r12,r8
80008ca4:	2f 08       	sub	r8,-16
80008ca6:	f0 e8 00 00 	ld.d	r8,r8[0]
80008caa:	f0 16 00 03 	mcall	r6[12]
80008cae:	14 98       	mov	r8,r10
80008cb0:	16 99       	mov	r9,r11
80008cb2:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80008cb6:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008cba:	10 99       	mov	r9,r8
80008cbc:	ee 19 80 00 	eorh	r9,0x8000
80008cc0:	ef 49 ff 4c 	st.w	r7[-180],r9
80008cc4:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008cc8:	ef 48 ff 50 	st.w	r7[-176],r8
80008ccc:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cd0:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cd4:	12 98       	mov	r8,r9
80008cd6:	a3 78       	lsl	r8,0x3
80008cd8:	12 08       	add	r8,r9
80008cda:	a3 78       	lsl	r8,0x3
80008cdc:	f4 08 00 08 	add	r8,r10,r8
80008ce0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ce4:	ee ea ff 4c 	ld.d	r10,r7[-180]
80008ce8:	f0 16 00 03 	mcall	r6[12]
80008cec:	14 98       	mov	r8,r10
80008cee:	16 99       	mov	r9,r11
80008cf0:	10 9a       	mov	r10,r8
80008cf2:	12 9b       	mov	r11,r9
80008cf4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cf8:	ec fc 00 1c 	ld.w	r12,r6[28]
80008cfc:	12 98       	mov	r8,r9
80008cfe:	a3 78       	lsl	r8,0x3
80008d00:	12 08       	add	r8,r9
80008d02:	a3 78       	lsl	r8,0x3
80008d04:	f8 08 00 08 	add	r8,r12,r8
80008d08:	2e 88       	sub	r8,-24
80008d0a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d0e:	f0 16 00 05 	mcall	r6[20]
80008d12:	14 98       	mov	r8,r10
80008d14:	16 99       	mov	r9,r11
80008d16:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008d1a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008d1e:	10 99       	mov	r9,r8
80008d20:	ee 19 80 00 	eorh	r9,0x8000
80008d24:	ef 49 ff 54 	st.w	r7[-172],r9
80008d28:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008d2c:	ef 48 ff 58 	st.w	r7[-168],r8
80008d30:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d34:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d38:	12 98       	mov	r8,r9
80008d3a:	a3 78       	lsl	r8,0x3
80008d3c:	12 08       	add	r8,r9
80008d3e:	2f f8       	sub	r8,-1
80008d40:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008d44:	ee ea ff 54 	ld.d	r10,r7[-172]
80008d48:	f0 16 00 03 	mcall	r6[12]
80008d4c:	14 98       	mov	r8,r10
80008d4e:	16 99       	mov	r9,r11
80008d50:	10 9a       	mov	r10,r8
80008d52:	12 9b       	mov	r11,r9
80008d54:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d58:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d5c:	12 98       	mov	r8,r9
80008d5e:	a3 78       	lsl	r8,0x3
80008d60:	12 08       	add	r8,r9
80008d62:	a3 78       	lsl	r8,0x3
80008d64:	f8 08 00 08 	add	r8,r12,r8
80008d68:	2e 08       	sub	r8,-32
80008d6a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d6e:	f0 16 00 05 	mcall	r6[20]
80008d72:	14 98       	mov	r8,r10
80008d74:	16 99       	mov	r9,r11
80008d76:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008d7a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008d7e:	10 99       	mov	r9,r8
80008d80:	ee 19 80 00 	eorh	r9,0x8000
80008d84:	ef 49 ff 5c 	st.w	r7[-164],r9
80008d88:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008d8c:	ef 48 ff 60 	st.w	r7[-160],r8
80008d90:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d94:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d98:	12 98       	mov	r8,r9
80008d9a:	a3 78       	lsl	r8,0x3
80008d9c:	12 08       	add	r8,r9
80008d9e:	a3 78       	lsl	r8,0x3
80008da0:	f4 08 00 08 	add	r8,r10,r8
80008da4:	2f 08       	sub	r8,-16
80008da6:	f0 e8 00 00 	ld.d	r8,r8[0]
80008daa:	ee ea ff 5c 	ld.d	r10,r7[-164]
80008dae:	f0 16 00 03 	mcall	r6[12]
80008db2:	14 98       	mov	r8,r10
80008db4:	16 99       	mov	r9,r11
80008db6:	10 9a       	mov	r10,r8
80008db8:	12 9b       	mov	r11,r9
80008dba:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008dbe:	ec fc 00 1c 	ld.w	r12,r6[28]
80008dc2:	12 98       	mov	r8,r9
80008dc4:	a3 78       	lsl	r8,0x3
80008dc6:	12 08       	add	r8,r9
80008dc8:	a3 78       	lsl	r8,0x3
80008dca:	f8 08 00 08 	add	r8,r12,r8
80008dce:	2d 88       	sub	r8,-40
80008dd0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008dd4:	f0 16 00 05 	mcall	r6[20]
80008dd8:	14 98       	mov	r8,r10
80008dda:	16 99       	mov	r9,r11
80008ddc:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
80008de0:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008de4:	10 99       	mov	r9,r8
80008de6:	ee 19 80 00 	eorh	r9,0x8000
80008dea:	ef 49 ff 64 	st.w	r7[-156],r9
80008dee:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008df2:	ef 48 ff 68 	st.w	r7[-152],r8
80008df6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008dfa:	ec fa 00 1c 	ld.w	r10,r6[28]
80008dfe:	12 98       	mov	r8,r9
80008e00:	a3 78       	lsl	r8,0x3
80008e02:	12 08       	add	r8,r9
80008e04:	a3 78       	lsl	r8,0x3
80008e06:	f4 08 00 08 	add	r8,r10,r8
80008e0a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e0e:	ee ea ff 64 	ld.d	r10,r7[-156]
80008e12:	f0 16 00 03 	mcall	r6[12]
80008e16:	14 98       	mov	r8,r10
80008e18:	16 99       	mov	r9,r11
80008e1a:	10 9a       	mov	r10,r8
80008e1c:	12 9b       	mov	r11,r9
80008e1e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e22:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e26:	12 98       	mov	r8,r9
80008e28:	a3 78       	lsl	r8,0x3
80008e2a:	12 08       	add	r8,r9
80008e2c:	a3 78       	lsl	r8,0x3
80008e2e:	f8 08 00 08 	add	r8,r12,r8
80008e32:	2d 08       	sub	r8,-48
80008e34:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e38:	f0 16 00 05 	mcall	r6[20]
80008e3c:	14 98       	mov	r8,r10
80008e3e:	16 99       	mov	r9,r11
80008e40:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
80008e44:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008e48:	10 99       	mov	r9,r8
80008e4a:	ee 19 80 00 	eorh	r9,0x8000
80008e4e:	ef 49 ff 6c 	st.w	r7[-148],r9
80008e52:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008e56:	ef 48 ff 70 	st.w	r7[-144],r8
80008e5a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e5e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008e62:	12 98       	mov	r8,r9
80008e64:	a3 78       	lsl	r8,0x3
80008e66:	12 08       	add	r8,r9
80008e68:	2f f8       	sub	r8,-1
80008e6a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008e6e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80008e72:	f0 16 00 03 	mcall	r6[12]
80008e76:	14 98       	mov	r8,r10
80008e78:	16 99       	mov	r9,r11
80008e7a:	10 9a       	mov	r10,r8
80008e7c:	12 9b       	mov	r11,r9
80008e7e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e82:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e86:	12 98       	mov	r8,r9
80008e88:	a3 78       	lsl	r8,0x3
80008e8a:	12 08       	add	r8,r9
80008e8c:	a3 78       	lsl	r8,0x3
80008e8e:	f8 08 00 08 	add	r8,r12,r8
80008e92:	2c 88       	sub	r8,-56
80008e94:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e98:	f0 16 00 05 	mcall	r6[20]
80008e9c:	14 98       	mov	r8,r10
80008e9e:	16 99       	mov	r9,r11
80008ea0:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80008ea4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008ea8:	10 99       	mov	r9,r8
80008eaa:	ee 19 80 00 	eorh	r9,0x8000
80008eae:	ef 49 ff 74 	st.w	r7[-140],r9
80008eb2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008eb6:	ef 48 ff 78 	st.w	r7[-136],r8
80008eba:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ebe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ec2:	12 98       	mov	r8,r9
80008ec4:	a3 78       	lsl	r8,0x3
80008ec6:	12 08       	add	r8,r9
80008ec8:	a3 78       	lsl	r8,0x3
80008eca:	f4 08 00 08 	add	r8,r10,r8
80008ece:	2f 08       	sub	r8,-16
80008ed0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ed4:	ee ea ff 74 	ld.d	r10,r7[-140]
80008ed8:	f0 16 00 03 	mcall	r6[12]
80008edc:	14 98       	mov	r8,r10
80008ede:	16 99       	mov	r9,r11
80008ee0:	10 9a       	mov	r10,r8
80008ee2:	12 9b       	mov	r11,r9
80008ee4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ee8:	ec fc 00 1c 	ld.w	r12,r6[28]
80008eec:	12 98       	mov	r8,r9
80008eee:	a3 78       	lsl	r8,0x3
80008ef0:	12 08       	add	r8,r9
80008ef2:	a3 78       	lsl	r8,0x3
80008ef4:	f8 08 00 08 	add	r8,r12,r8
80008ef8:	2c 08       	sub	r8,-64
80008efa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008efe:	f0 16 00 05 	mcall	r6[20]
80008f02:	14 98       	mov	r8,r10
80008f04:	16 99       	mov	r9,r11
80008f06:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008f0a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f0e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f12:	12 98       	mov	r8,r9
80008f14:	a3 78       	lsl	r8,0x3
80008f16:	12 08       	add	r8,r9
80008f18:	a3 78       	lsl	r8,0x3
80008f1a:	10 0a       	add	r10,r8
80008f1c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008f20:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80008f24:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f28:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f2c:	12 98       	mov	r8,r9
80008f2e:	a3 78       	lsl	r8,0x3
80008f30:	12 08       	add	r8,r9
80008f32:	f0 cb ff ff 	sub	r11,r8,-1
80008f36:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008f3a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008f3e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f42:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f46:	12 98       	mov	r8,r9
80008f48:	a3 78       	lsl	r8,0x3
80008f4a:	12 08       	add	r8,r9
80008f4c:	a3 78       	lsl	r8,0x3
80008f4e:	f4 08 00 08 	add	r8,r10,r8
80008f52:	f0 ca ff f0 	sub	r10,r8,-16
80008f56:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008f5a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008f5e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f62:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f66:	12 98       	mov	r8,r9
80008f68:	a3 78       	lsl	r8,0x3
80008f6a:	12 08       	add	r8,r9
80008f6c:	a3 78       	lsl	r8,0x3
80008f6e:	f4 08 00 08 	add	r8,r10,r8
80008f72:	f0 ca ff e8 	sub	r10,r8,-24
80008f76:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008f7a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008f7e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f82:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f86:	12 98       	mov	r8,r9
80008f88:	a3 78       	lsl	r8,0x3
80008f8a:	12 08       	add	r8,r9
80008f8c:	a3 78       	lsl	r8,0x3
80008f8e:	f4 08 00 08 	add	r8,r10,r8
80008f92:	f0 ca ff e0 	sub	r10,r8,-32
80008f96:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008f9a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80008f9e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fa2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fa6:	12 98       	mov	r8,r9
80008fa8:	a3 78       	lsl	r8,0x3
80008faa:	12 08       	add	r8,r9
80008fac:	a3 78       	lsl	r8,0x3
80008fae:	f4 08 00 08 	add	r8,r10,r8
80008fb2:	f0 ca ff d8 	sub	r10,r8,-40
80008fb6:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008fba:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80008fbe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fc2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fc6:	12 98       	mov	r8,r9
80008fc8:	a3 78       	lsl	r8,0x3
80008fca:	12 08       	add	r8,r9
80008fcc:	a3 78       	lsl	r8,0x3
80008fce:	f4 08 00 08 	add	r8,r10,r8
80008fd2:	f0 ca ff d0 	sub	r10,r8,-48
80008fd6:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008fda:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80008fde:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fe2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fe6:	12 98       	mov	r8,r9
80008fe8:	a3 78       	lsl	r8,0x3
80008fea:	12 08       	add	r8,r9
80008fec:	a3 78       	lsl	r8,0x3
80008fee:	f4 08 00 08 	add	r8,r10,r8
80008ff2:	f0 ca ff c8 	sub	r10,r8,-56
80008ff6:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008ffa:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80008ffe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80009002:	ec fa 00 1c 	ld.w	r10,r6[28]
80009006:	12 98       	mov	r8,r9
80009008:	a3 78       	lsl	r8,0x3
8000900a:	12 08       	add	r8,r9
8000900c:	a3 78       	lsl	r8,0x3
8000900e:	f4 08 00 08 	add	r8,r10,r8
80009012:	f0 ca ff c0 	sub	r10,r8,-64
80009016:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000901a:	f4 e9 00 00 	st.d	r10[0],r8
}
8000901e:	2c 7d       	sub	sp,-228
80009020:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009024:	80 00       	ld.sh	r0,r0[0x0]
80009026:	82 ae       	ld.uh	lr,r1[0x4]

80009028 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80009028:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000902c:	1a 97       	mov	r7,sp
8000902e:	fa cd 00 d8 	sub	sp,sp,216
80009032:	fe f6 0c 1a 	ld.w	r6,pc[3098]
80009036:	1e 26       	rsub	r6,pc
80009038:	ef 4c ff 8c 	st.w	r7[-116],r12
8000903c:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80009040:	ee fc ff 88 	ld.w	r12,r7[-120]
80009044:	f0 16 00 02 	mcall	r6[8]
80009048:	ec f8 00 00 	ld.w	r8,r6[0]
8000904c:	70 0c       	ld.w	r12,r8[0x0]
8000904e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009052:	12 98       	mov	r8,r9
80009054:	a1 78       	lsl	r8,0x1
80009056:	12 08       	add	r8,r9
80009058:	2f f8       	sub	r8,-1
8000905a:	a3 78       	lsl	r8,0x3
8000905c:	f8 08 00 08 	add	r8,r12,r8
80009060:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80009064:	f0 16 00 11 	mcall	r6[68]
80009068:	14 98       	mov	r8,r10
8000906a:	16 99       	mov	r9,r11
8000906c:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80009070:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009074:	ec fa 00 18 	ld.w	r10,r6[24]
80009078:	12 98       	mov	r8,r9
8000907a:	a3 78       	lsl	r8,0x3
8000907c:	12 08       	add	r8,r9
8000907e:	a3 78       	lsl	r8,0x3
80009080:	f4 08 00 08 	add	r8,r10,r8
80009084:	2e 08       	sub	r8,-32
80009086:	f0 ea 00 00 	ld.d	r10,r8[0]
8000908a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000908e:	ec f8 01 70 	ld.w	r8,r6[368]
80009092:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009096:	f0 16 00 05 	mcall	r6[20]
8000909a:	14 98       	mov	r8,r10
8000909c:	16 99       	mov	r9,r11
8000909e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
800090a2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090a6:	ec fa 00 18 	ld.w	r10,r6[24]
800090aa:	12 98       	mov	r8,r9
800090ac:	a3 78       	lsl	r8,0x3
800090ae:	12 08       	add	r8,r9
800090b0:	2f f8       	sub	r8,-1
800090b2:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800090b6:	ee e8 ff 98 	ld.d	r8,r7[-104]
800090ba:	f0 16 00 0c 	mcall	r6[48]
800090be:	14 98       	mov	r8,r10
800090c0:	16 99       	mov	r9,r11
800090c2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
800090c6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090ca:	ec fa 00 18 	ld.w	r10,r6[24]
800090ce:	12 98       	mov	r8,r9
800090d0:	a3 78       	lsl	r8,0x3
800090d2:	12 08       	add	r8,r9
800090d4:	a3 78       	lsl	r8,0x3
800090d6:	f4 08 00 08 	add	r8,r10,r8
800090da:	2e 08       	sub	r8,-32
800090dc:	f0 ea 00 00 	ld.d	r10,r8[0]
800090e0:	ee e8 ff 98 	ld.d	r8,r7[-104]
800090e4:	f0 16 00 0c 	mcall	r6[48]
800090e8:	14 98       	mov	r8,r10
800090ea:	16 99       	mov	r9,r11
800090ec:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
800090f0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090f4:	ec fa 00 18 	ld.w	r10,r6[24]
800090f8:	12 98       	mov	r8,r9
800090fa:	a3 78       	lsl	r8,0x3
800090fc:	12 08       	add	r8,r9
800090fe:	a3 78       	lsl	r8,0x3
80009100:	f4 08 00 08 	add	r8,r10,r8
80009104:	2c 88       	sub	r8,-56
80009106:	f0 ea 00 00 	ld.d	r10,r8[0]
8000910a:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000910e:	f0 16 00 0c 	mcall	r6[48]
80009112:	14 98       	mov	r8,r10
80009114:	16 99       	mov	r9,r11
80009116:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
8000911a:	ec f8 00 00 	ld.w	r8,r6[0]
8000911e:	70 01       	ld.w	r1,r8[0x0]
80009120:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009124:	ec f8 00 00 	ld.w	r8,r6[0]
80009128:	70 0a       	ld.w	r10,r8[0x0]
8000912a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000912e:	12 98       	mov	r8,r9
80009130:	a1 78       	lsl	r8,0x1
80009132:	12 08       	add	r8,r9
80009134:	a3 78       	lsl	r8,0x3
80009136:	f4 08 00 08 	add	r8,r10,r8
8000913a:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000913e:	f0 e2 00 00 	ld.d	r2,r8[0]
80009142:	ee e8 ff 90 	ld.d	r8,r7[-112]
80009146:	ee ea ff a0 	ld.d	r10,r7[-96]
8000914a:	f0 16 00 03 	mcall	r6[12]
8000914e:	14 98       	mov	r8,r10
80009150:	16 99       	mov	r9,r11
80009152:	04 9a       	mov	r10,r2
80009154:	06 9b       	mov	r11,r3
80009156:	f0 16 00 05 	mcall	r6[20]
8000915a:	14 98       	mov	r8,r10
8000915c:	16 99       	mov	r9,r11
8000915e:	10 9a       	mov	r10,r8
80009160:	12 9b       	mov	r11,r9
80009162:	0a 98       	mov	r8,r5
80009164:	a1 78       	lsl	r8,0x1
80009166:	0a 08       	add	r8,r5
80009168:	a3 78       	lsl	r8,0x3
8000916a:	e2 08 00 08 	add	r8,r1,r8
8000916e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009172:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
80009176:	ec f8 00 00 	ld.w	r8,r6[0]
8000917a:	70 01       	ld.w	r1,r8[0x0]
8000917c:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009180:	ec f8 00 00 	ld.w	r8,r6[0]
80009184:	70 0a       	ld.w	r10,r8[0x0]
80009186:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000918a:	12 98       	mov	r8,r9
8000918c:	a1 78       	lsl	r8,0x1
8000918e:	12 08       	add	r8,r9
80009190:	2f f8       	sub	r8,-1
80009192:	a3 78       	lsl	r8,0x3
80009194:	f4 08 00 08 	add	r8,r10,r8
80009198:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000919c:	ee e8 ff 90 	ld.d	r8,r7[-112]
800091a0:	ee ea ff a8 	ld.d	r10,r7[-88]
800091a4:	f0 16 00 03 	mcall	r6[12]
800091a8:	14 98       	mov	r8,r10
800091aa:	16 99       	mov	r9,r11
800091ac:	04 9a       	mov	r10,r2
800091ae:	06 9b       	mov	r11,r3
800091b0:	f0 16 00 05 	mcall	r6[20]
800091b4:	14 98       	mov	r8,r10
800091b6:	16 99       	mov	r9,r11
800091b8:	10 9a       	mov	r10,r8
800091ba:	12 9b       	mov	r11,r9
800091bc:	0a 98       	mov	r8,r5
800091be:	a1 78       	lsl	r8,0x1
800091c0:	0a 08       	add	r8,r5
800091c2:	2f f8       	sub	r8,-1
800091c4:	a3 78       	lsl	r8,0x3
800091c6:	e2 08 00 08 	add	r8,r1,r8
800091ca:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
800091ce:	ec f8 00 00 	ld.w	r8,r6[0]
800091d2:	70 01       	ld.w	r1,r8[0x0]
800091d4:	ee f5 ff 8c 	ld.w	r5,r7[-116]
800091d8:	ec f8 00 00 	ld.w	r8,r6[0]
800091dc:	70 0a       	ld.w	r10,r8[0x0]
800091de:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091e2:	12 98       	mov	r8,r9
800091e4:	a1 78       	lsl	r8,0x1
800091e6:	12 08       	add	r8,r9
800091e8:	a3 78       	lsl	r8,0x3
800091ea:	f4 08 00 08 	add	r8,r10,r8
800091ee:	f0 c8 f4 94 	sub	r8,r8,-2924
800091f2:	f0 e2 00 00 	ld.d	r2,r8[0]
800091f6:	ee e8 ff 90 	ld.d	r8,r7[-112]
800091fa:	ee ea ff b0 	ld.d	r10,r7[-80]
800091fe:	f0 16 00 03 	mcall	r6[12]
80009202:	14 98       	mov	r8,r10
80009204:	16 99       	mov	r9,r11
80009206:	04 9a       	mov	r10,r2
80009208:	06 9b       	mov	r11,r3
8000920a:	f0 16 00 05 	mcall	r6[20]
8000920e:	14 98       	mov	r8,r10
80009210:	16 99       	mov	r9,r11
80009212:	10 9a       	mov	r10,r8
80009214:	12 9b       	mov	r11,r9
80009216:	0a 98       	mov	r8,r5
80009218:	a1 78       	lsl	r8,0x1
8000921a:	0a 08       	add	r8,r5
8000921c:	a3 78       	lsl	r8,0x3
8000921e:	e2 08 00 08 	add	r8,r1,r8
80009222:	f0 c8 f4 94 	sub	r8,r8,-2924
80009226:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000922a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000922e:	10 99       	mov	r9,r8
80009230:	ee 19 80 00 	eorh	r9,0x8000
80009234:	ef 49 ff 28 	st.w	r7[-216],r9
80009238:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000923c:	ef 48 ff 2c 	st.w	r7[-212],r8
80009240:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009244:	ec fa 00 18 	ld.w	r10,r6[24]
80009248:	12 98       	mov	r8,r9
8000924a:	a3 78       	lsl	r8,0x3
8000924c:	12 08       	add	r8,r9
8000924e:	a3 78       	lsl	r8,0x3
80009250:	f4 08 00 08 	add	r8,r10,r8
80009254:	2e 88       	sub	r8,-24
80009256:	f0 e8 00 00 	ld.d	r8,r8[0]
8000925a:	ee ea ff 28 	ld.d	r10,r7[-216]
8000925e:	f0 16 00 03 	mcall	r6[12]
80009262:	14 98       	mov	r8,r10
80009264:	16 99       	mov	r9,r11
80009266:	10 9a       	mov	r10,r8
80009268:	12 9b       	mov	r11,r9
8000926a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000926e:	ec fc 00 18 	ld.w	r12,r6[24]
80009272:	12 98       	mov	r8,r9
80009274:	a3 78       	lsl	r8,0x3
80009276:	12 08       	add	r8,r9
80009278:	a3 78       	lsl	r8,0x3
8000927a:	f8 08 00 08 	add	r8,r12,r8
8000927e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009282:	f0 16 00 05 	mcall	r6[20]
80009286:	14 98       	mov	r8,r10
80009288:	16 99       	mov	r9,r11
8000928a:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000928e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009292:	10 99       	mov	r9,r8
80009294:	ee 19 80 00 	eorh	r9,0x8000
80009298:	ef 49 ff 30 	st.w	r7[-208],r9
8000929c:	ee f8 ff a4 	ld.w	r8,r7[-92]
800092a0:	ef 48 ff 34 	st.w	r7[-204],r8
800092a4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092a8:	ec fa 00 18 	ld.w	r10,r6[24]
800092ac:	12 98       	mov	r8,r9
800092ae:	a3 78       	lsl	r8,0x3
800092b0:	12 08       	add	r8,r9
800092b2:	a3 78       	lsl	r8,0x3
800092b4:	f4 08 00 08 	add	r8,r10,r8
800092b8:	2e 08       	sub	r8,-32
800092ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800092be:	ee ea ff 30 	ld.d	r10,r7[-208]
800092c2:	f0 16 00 03 	mcall	r6[12]
800092c6:	14 98       	mov	r8,r10
800092c8:	16 99       	mov	r9,r11
800092ca:	10 9a       	mov	r10,r8
800092cc:	12 9b       	mov	r11,r9
800092ce:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092d2:	ec fc 00 18 	ld.w	r12,r6[24]
800092d6:	12 98       	mov	r8,r9
800092d8:	a3 78       	lsl	r8,0x3
800092da:	12 08       	add	r8,r9
800092dc:	2f f8       	sub	r8,-1
800092de:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800092e2:	f0 16 00 05 	mcall	r6[20]
800092e6:	14 98       	mov	r8,r10
800092e8:	16 99       	mov	r9,r11
800092ea:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
800092ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
800092f2:	10 99       	mov	r9,r8
800092f4:	ee 19 80 00 	eorh	r9,0x8000
800092f8:	ef 49 ff 38 	st.w	r7[-200],r9
800092fc:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009300:	ef 48 ff 3c 	st.w	r7[-196],r8
80009304:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009308:	ec fa 00 18 	ld.w	r10,r6[24]
8000930c:	12 98       	mov	r8,r9
8000930e:	a3 78       	lsl	r8,0x3
80009310:	12 08       	add	r8,r9
80009312:	a3 78       	lsl	r8,0x3
80009314:	f4 08 00 08 	add	r8,r10,r8
80009318:	2d 88       	sub	r8,-40
8000931a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000931e:	ee ea ff 38 	ld.d	r10,r7[-200]
80009322:	f0 16 00 03 	mcall	r6[12]
80009326:	14 98       	mov	r8,r10
80009328:	16 99       	mov	r9,r11
8000932a:	10 9a       	mov	r10,r8
8000932c:	12 9b       	mov	r11,r9
8000932e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009332:	ec fc 00 18 	ld.w	r12,r6[24]
80009336:	12 98       	mov	r8,r9
80009338:	a3 78       	lsl	r8,0x3
8000933a:	12 08       	add	r8,r9
8000933c:	a3 78       	lsl	r8,0x3
8000933e:	f8 08 00 08 	add	r8,r12,r8
80009342:	2f 08       	sub	r8,-16
80009344:	f0 e8 00 00 	ld.d	r8,r8[0]
80009348:	f0 16 00 05 	mcall	r6[20]
8000934c:	14 98       	mov	r8,r10
8000934e:	16 99       	mov	r9,r11
80009350:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80009354:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009358:	30 0a       	mov	r10,0
8000935a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000935e:	f0 16 00 11 	mcall	r6[68]
80009362:	14 98       	mov	r8,r10
80009364:	16 99       	mov	r9,r11
80009366:	10 9a       	mov	r10,r8
80009368:	12 9b       	mov	r11,r9
8000936a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000936e:	ec fc 00 18 	ld.w	r12,r6[24]
80009372:	12 98       	mov	r8,r9
80009374:	a3 78       	lsl	r8,0x3
80009376:	12 08       	add	r8,r9
80009378:	a3 78       	lsl	r8,0x3
8000937a:	f8 08 00 08 	add	r8,r12,r8
8000937e:	2e 88       	sub	r8,-24
80009380:	f0 e8 00 00 	ld.d	r8,r8[0]
80009384:	f0 16 00 03 	mcall	r6[12]
80009388:	14 98       	mov	r8,r10
8000938a:	16 99       	mov	r9,r11
8000938c:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80009390:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009394:	30 0a       	mov	r10,0
80009396:	fc 1b 3f f0 	movh	r11,0x3ff0
8000939a:	f0 16 00 11 	mcall	r6[68]
8000939e:	14 98       	mov	r8,r10
800093a0:	16 99       	mov	r9,r11
800093a2:	10 9a       	mov	r10,r8
800093a4:	12 9b       	mov	r11,r9
800093a6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093aa:	ec fc 00 18 	ld.w	r12,r6[24]
800093ae:	12 98       	mov	r8,r9
800093b0:	a3 78       	lsl	r8,0x3
800093b2:	12 08       	add	r8,r9
800093b4:	a3 78       	lsl	r8,0x3
800093b6:	f8 08 00 08 	add	r8,r12,r8
800093ba:	2e 08       	sub	r8,-32
800093bc:	f0 e8 00 00 	ld.d	r8,r8[0]
800093c0:	f0 16 00 03 	mcall	r6[12]
800093c4:	14 98       	mov	r8,r10
800093c6:	16 99       	mov	r9,r11
800093c8:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
800093cc:	ee e8 ff a8 	ld.d	r8,r7[-88]
800093d0:	30 0a       	mov	r10,0
800093d2:	fc 1b 3f f0 	movh	r11,0x3ff0
800093d6:	f0 16 00 11 	mcall	r6[68]
800093da:	14 98       	mov	r8,r10
800093dc:	16 99       	mov	r9,r11
800093de:	10 9a       	mov	r10,r8
800093e0:	12 9b       	mov	r11,r9
800093e2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093e6:	ec fc 00 18 	ld.w	r12,r6[24]
800093ea:	12 98       	mov	r8,r9
800093ec:	a3 78       	lsl	r8,0x3
800093ee:	12 08       	add	r8,r9
800093f0:	a3 78       	lsl	r8,0x3
800093f2:	f8 08 00 08 	add	r8,r12,r8
800093f6:	2d 88       	sub	r8,-40
800093f8:	f0 e8 00 00 	ld.d	r8,r8[0]
800093fc:	f0 16 00 03 	mcall	r6[12]
80009400:	14 98       	mov	r8,r10
80009402:	16 99       	mov	r9,r11
80009404:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
80009408:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000940c:	10 99       	mov	r9,r8
8000940e:	ee 19 80 00 	eorh	r9,0x8000
80009412:	ef 49 ff 40 	st.w	r7[-192],r9
80009416:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000941a:	ef 48 ff 44 	st.w	r7[-188],r8
8000941e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009422:	ec fa 00 18 	ld.w	r10,r6[24]
80009426:	12 98       	mov	r8,r9
80009428:	a3 78       	lsl	r8,0x3
8000942a:	12 08       	add	r8,r9
8000942c:	a3 78       	lsl	r8,0x3
8000942e:	f4 08 00 08 	add	r8,r10,r8
80009432:	2e 88       	sub	r8,-24
80009434:	f0 e8 00 00 	ld.d	r8,r8[0]
80009438:	ee ea ff 40 	ld.d	r10,r7[-192]
8000943c:	f0 16 00 03 	mcall	r6[12]
80009440:	14 98       	mov	r8,r10
80009442:	16 99       	mov	r9,r11
80009444:	10 9a       	mov	r10,r8
80009446:	12 9b       	mov	r11,r9
80009448:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000944c:	ec fc 00 18 	ld.w	r12,r6[24]
80009450:	12 98       	mov	r8,r9
80009452:	a3 78       	lsl	r8,0x3
80009454:	12 08       	add	r8,r9
80009456:	a3 78       	lsl	r8,0x3
80009458:	f8 08 00 08 	add	r8,r12,r8
8000945c:	2d 08       	sub	r8,-48
8000945e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009462:	f0 16 00 05 	mcall	r6[20]
80009466:	14 98       	mov	r8,r10
80009468:	16 99       	mov	r9,r11
8000946a:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
8000946e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009472:	10 99       	mov	r9,r8
80009474:	ee 19 80 00 	eorh	r9,0x8000
80009478:	ef 49 ff 48 	st.w	r7[-184],r9
8000947c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009480:	ef 48 ff 4c 	st.w	r7[-180],r8
80009484:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009488:	ec fa 00 18 	ld.w	r10,r6[24]
8000948c:	12 98       	mov	r8,r9
8000948e:	a3 78       	lsl	r8,0x3
80009490:	12 08       	add	r8,r9
80009492:	a3 78       	lsl	r8,0x3
80009494:	f4 08 00 08 	add	r8,r10,r8
80009498:	2e 08       	sub	r8,-32
8000949a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000949e:	ee ea ff 48 	ld.d	r10,r7[-184]
800094a2:	f0 16 00 03 	mcall	r6[12]
800094a6:	14 98       	mov	r8,r10
800094a8:	16 99       	mov	r9,r11
800094aa:	10 9a       	mov	r10,r8
800094ac:	12 9b       	mov	r11,r9
800094ae:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094b2:	ec fc 00 18 	ld.w	r12,r6[24]
800094b6:	12 98       	mov	r8,r9
800094b8:	a3 78       	lsl	r8,0x3
800094ba:	12 08       	add	r8,r9
800094bc:	a3 78       	lsl	r8,0x3
800094be:	f8 08 00 08 	add	r8,r12,r8
800094c2:	2c 88       	sub	r8,-56
800094c4:	f0 e8 00 00 	ld.d	r8,r8[0]
800094c8:	f0 16 00 05 	mcall	r6[20]
800094cc:	14 98       	mov	r8,r10
800094ce:	16 99       	mov	r9,r11
800094d0:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
800094d4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800094d8:	10 99       	mov	r9,r8
800094da:	ee 19 80 00 	eorh	r9,0x8000
800094de:	ef 49 ff 50 	st.w	r7[-176],r9
800094e2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800094e6:	ef 48 ff 54 	st.w	r7[-172],r8
800094ea:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094ee:	ec fa 00 18 	ld.w	r10,r6[24]
800094f2:	12 98       	mov	r8,r9
800094f4:	a3 78       	lsl	r8,0x3
800094f6:	12 08       	add	r8,r9
800094f8:	a3 78       	lsl	r8,0x3
800094fa:	f4 08 00 08 	add	r8,r10,r8
800094fe:	2d 88       	sub	r8,-40
80009500:	f0 e8 00 00 	ld.d	r8,r8[0]
80009504:	ee ea ff 50 	ld.d	r10,r7[-176]
80009508:	f0 16 00 03 	mcall	r6[12]
8000950c:	14 98       	mov	r8,r10
8000950e:	16 99       	mov	r9,r11
80009510:	10 9a       	mov	r10,r8
80009512:	12 9b       	mov	r11,r9
80009514:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009518:	ec fc 00 18 	ld.w	r12,r6[24]
8000951c:	12 98       	mov	r8,r9
8000951e:	a3 78       	lsl	r8,0x3
80009520:	12 08       	add	r8,r9
80009522:	a3 78       	lsl	r8,0x3
80009524:	f8 08 00 08 	add	r8,r12,r8
80009528:	2c 08       	sub	r8,-64
8000952a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000952e:	f0 16 00 05 	mcall	r6[20]
80009532:	14 98       	mov	r8,r10
80009534:	16 99       	mov	r9,r11
80009536:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000953a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000953e:	ec fa 00 18 	ld.w	r10,r6[24]
80009542:	12 98       	mov	r8,r9
80009544:	a3 78       	lsl	r8,0x3
80009546:	12 08       	add	r8,r9
80009548:	a3 78       	lsl	r8,0x3
8000954a:	10 0a       	add	r10,r8
8000954c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009550:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009554:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009558:	ec fb 00 18 	ld.w	r11,r6[24]
8000955c:	12 98       	mov	r8,r9
8000955e:	a3 78       	lsl	r8,0x3
80009560:	12 08       	add	r8,r9
80009562:	f0 ca ff ff 	sub	r10,r8,-1
80009566:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000956a:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000956e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009572:	ec fa 00 18 	ld.w	r10,r6[24]
80009576:	12 98       	mov	r8,r9
80009578:	a3 78       	lsl	r8,0x3
8000957a:	12 08       	add	r8,r9
8000957c:	a3 78       	lsl	r8,0x3
8000957e:	f4 08 00 08 	add	r8,r10,r8
80009582:	f0 ca ff f0 	sub	r10,r8,-16
80009586:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000958a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000958e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009592:	ec fa 00 18 	ld.w	r10,r6[24]
80009596:	12 98       	mov	r8,r9
80009598:	a3 78       	lsl	r8,0x3
8000959a:	12 08       	add	r8,r9
8000959c:	a3 78       	lsl	r8,0x3
8000959e:	f4 08 00 08 	add	r8,r10,r8
800095a2:	f0 ca ff e8 	sub	r10,r8,-24
800095a6:	ee e8 ff d0 	ld.d	r8,r7[-48]
800095aa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
800095ae:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095b2:	ec fa 00 18 	ld.w	r10,r6[24]
800095b6:	12 98       	mov	r8,r9
800095b8:	a3 78       	lsl	r8,0x3
800095ba:	12 08       	add	r8,r9
800095bc:	a3 78       	lsl	r8,0x3
800095be:	f4 08 00 08 	add	r8,r10,r8
800095c2:	f0 ca ff e0 	sub	r10,r8,-32
800095c6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800095ca:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800095ce:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095d2:	ec fa 00 18 	ld.w	r10,r6[24]
800095d6:	12 98       	mov	r8,r9
800095d8:	a3 78       	lsl	r8,0x3
800095da:	12 08       	add	r8,r9
800095dc:	a3 78       	lsl	r8,0x3
800095de:	f4 08 00 08 	add	r8,r10,r8
800095e2:	f0 ca ff d8 	sub	r10,r8,-40
800095e6:	ee e8 ff e0 	ld.d	r8,r7[-32]
800095ea:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800095ee:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095f2:	ec fa 00 18 	ld.w	r10,r6[24]
800095f6:	12 98       	mov	r8,r9
800095f8:	a3 78       	lsl	r8,0x3
800095fa:	12 08       	add	r8,r9
800095fc:	a3 78       	lsl	r8,0x3
800095fe:	f4 08 00 08 	add	r8,r10,r8
80009602:	f0 ca ff d0 	sub	r10,r8,-48
80009606:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000960a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
8000960e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009612:	ec fa 00 18 	ld.w	r10,r6[24]
80009616:	12 98       	mov	r8,r9
80009618:	a3 78       	lsl	r8,0x3
8000961a:	12 08       	add	r8,r9
8000961c:	a3 78       	lsl	r8,0x3
8000961e:	f4 08 00 08 	add	r8,r10,r8
80009622:	f0 ca ff c8 	sub	r10,r8,-56
80009626:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000962a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000962e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009632:	ec fa 00 18 	ld.w	r10,r6[24]
80009636:	12 98       	mov	r8,r9
80009638:	a3 78       	lsl	r8,0x3
8000963a:	12 08       	add	r8,r9
8000963c:	a3 78       	lsl	r8,0x3
8000963e:	f4 08 00 08 	add	r8,r10,r8
80009642:	f0 ca ff c0 	sub	r10,r8,-64
80009646:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000964a:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
8000964e:	ec f8 00 00 	ld.w	r8,r6[0]
80009652:	70 09       	ld.w	r9,r8[0x0]
80009654:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009658:	f0 c8 fc a3 	sub	r8,r8,-861
8000965c:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80009660:	ee f8 ff 88 	ld.w	r8,r7[-120]
80009664:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80009668:	10 9c       	mov	r12,r8
8000966a:	f0 16 00 02 	mcall	r6[8]
8000966e:	14 98       	mov	r8,r10
80009670:	16 99       	mov	r9,r11
80009672:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
80009676:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000967a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000967e:	12 98       	mov	r8,r9
80009680:	a3 78       	lsl	r8,0x3
80009682:	12 08       	add	r8,r9
80009684:	a3 78       	lsl	r8,0x3
80009686:	f4 08 00 08 	add	r8,r10,r8
8000968a:	2e 08       	sub	r8,-32
8000968c:	f0 ea 00 00 	ld.d	r10,r8[0]
80009690:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009694:	ec f8 01 6c 	ld.w	r8,r6[364]
80009698:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000969c:	f0 16 00 05 	mcall	r6[20]
800096a0:	14 98       	mov	r8,r10
800096a2:	16 99       	mov	r9,r11
800096a4:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
800096a8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096ac:	ec fa 00 1c 	ld.w	r10,r6[28]
800096b0:	12 98       	mov	r8,r9
800096b2:	a3 78       	lsl	r8,0x3
800096b4:	12 08       	add	r8,r9
800096b6:	2f f8       	sub	r8,-1
800096b8:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800096bc:	ee e8 ff 98 	ld.d	r8,r7[-104]
800096c0:	f0 16 00 0c 	mcall	r6[48]
800096c4:	14 98       	mov	r8,r10
800096c6:	16 99       	mov	r9,r11
800096c8:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
800096cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096d0:	ec fa 00 1c 	ld.w	r10,r6[28]
800096d4:	12 98       	mov	r8,r9
800096d6:	a3 78       	lsl	r8,0x3
800096d8:	12 08       	add	r8,r9
800096da:	a3 78       	lsl	r8,0x3
800096dc:	f4 08 00 08 	add	r8,r10,r8
800096e0:	2e 08       	sub	r8,-32
800096e2:	f0 ea 00 00 	ld.d	r10,r8[0]
800096e6:	ee e8 ff 98 	ld.d	r8,r7[-104]
800096ea:	f0 16 00 0c 	mcall	r6[48]
800096ee:	14 98       	mov	r8,r10
800096f0:	16 99       	mov	r9,r11
800096f2:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
800096f6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096fa:	ec fa 00 1c 	ld.w	r10,r6[28]
800096fe:	12 98       	mov	r8,r9
80009700:	a3 78       	lsl	r8,0x3
80009702:	12 08       	add	r8,r9
80009704:	a3 78       	lsl	r8,0x3
80009706:	f4 08 00 08 	add	r8,r10,r8
8000970a:	2c 88       	sub	r8,-56
8000970c:	f0 ea 00 00 	ld.d	r10,r8[0]
80009710:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009714:	f0 16 00 0c 	mcall	r6[48]
80009718:	14 98       	mov	r8,r10
8000971a:	16 99       	mov	r9,r11
8000971c:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80009720:	ec f8 00 00 	ld.w	r8,r6[0]
80009724:	70 01       	ld.w	r1,r8[0x0]
80009726:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000972a:	ec f8 00 00 	ld.w	r8,r6[0]
8000972e:	70 09       	ld.w	r9,r8[0x0]
80009730:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009734:	f0 c8 fc 99 	sub	r8,r8,-871
80009738:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000973c:	10 9c       	mov	r12,r8
8000973e:	f0 16 00 02 	mcall	r6[8]
80009742:	14 92       	mov	r2,r10
80009744:	16 93       	mov	r3,r11
80009746:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000974a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000974e:	f0 16 00 03 	mcall	r6[12]
80009752:	14 98       	mov	r8,r10
80009754:	16 99       	mov	r9,r11
80009756:	04 9a       	mov	r10,r2
80009758:	06 9b       	mov	r11,r3
8000975a:	f0 16 00 05 	mcall	r6[20]
8000975e:	14 98       	mov	r8,r10
80009760:	16 99       	mov	r9,r11
80009762:	10 9a       	mov	r10,r8
80009764:	12 9b       	mov	r11,r9
80009766:	f0 16 00 08 	mcall	r6[32]
8000976a:	18 99       	mov	r9,r12
8000976c:	ea c8 fc 99 	sub	r8,r5,-871
80009770:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
80009774:	ec f8 00 00 	ld.w	r8,r6[0]
80009778:	70 01       	ld.w	r1,r8[0x0]
8000977a:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000977e:	ec f8 00 00 	ld.w	r8,r6[0]
80009782:	70 09       	ld.w	r9,r8[0x0]
80009784:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009788:	f0 c8 fc a3 	sub	r8,r8,-861
8000978c:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009790:	10 9c       	mov	r12,r8
80009792:	f0 16 00 02 	mcall	r6[8]
80009796:	14 92       	mov	r2,r10
80009798:	16 93       	mov	r3,r11
8000979a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000979e:	ee ea ff a8 	ld.d	r10,r7[-88]
800097a2:	f0 16 00 03 	mcall	r6[12]
800097a6:	14 98       	mov	r8,r10
800097a8:	16 99       	mov	r9,r11
800097aa:	04 9a       	mov	r10,r2
800097ac:	06 9b       	mov	r11,r3
800097ae:	f0 16 00 05 	mcall	r6[20]
800097b2:	14 98       	mov	r8,r10
800097b4:	16 99       	mov	r9,r11
800097b6:	10 9a       	mov	r10,r8
800097b8:	12 9b       	mov	r11,r9
800097ba:	f0 16 00 08 	mcall	r6[32]
800097be:	18 99       	mov	r9,r12
800097c0:	ea c8 fc a3 	sub	r8,r5,-861
800097c4:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800097c8:	ec f8 00 00 	ld.w	r8,r6[0]
800097cc:	70 01       	ld.w	r1,r8[0x0]
800097ce:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800097d2:	f0 c5 ff fd 	sub	r5,r8,-3
800097d6:	ec f8 00 00 	ld.w	r8,r6[0]
800097da:	70 09       	ld.w	r9,r8[0x0]
800097dc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800097e0:	2f d8       	sub	r8,-3
800097e2:	2f 48       	sub	r8,-12
800097e4:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800097e8:	10 9c       	mov	r12,r8
800097ea:	f0 16 00 02 	mcall	r6[8]
800097ee:	14 92       	mov	r2,r10
800097f0:	16 93       	mov	r3,r11
800097f2:	ee e8 ff 90 	ld.d	r8,r7[-112]
800097f6:	ee ea ff b0 	ld.d	r10,r7[-80]
800097fa:	f0 16 00 03 	mcall	r6[12]
800097fe:	14 98       	mov	r8,r10
80009800:	16 99       	mov	r9,r11
80009802:	04 9a       	mov	r10,r2
80009804:	06 9b       	mov	r11,r3
80009806:	f0 16 00 05 	mcall	r6[20]
8000980a:	14 98       	mov	r8,r10
8000980c:	16 99       	mov	r9,r11
8000980e:	10 9a       	mov	r10,r8
80009810:	12 9b       	mov	r11,r9
80009812:	f0 16 00 08 	mcall	r6[32]
80009816:	18 99       	mov	r9,r12
80009818:	ea c8 ff f4 	sub	r8,r5,-12
8000981c:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009820:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009824:	10 99       	mov	r9,r8
80009826:	ee 19 80 00 	eorh	r9,0x8000
8000982a:	ef 49 ff 58 	st.w	r7[-168],r9
8000982e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009832:	ef 48 ff 5c 	st.w	r7[-164],r8
80009836:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000983a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000983e:	12 98       	mov	r8,r9
80009840:	a3 78       	lsl	r8,0x3
80009842:	12 08       	add	r8,r9
80009844:	a3 78       	lsl	r8,0x3
80009846:	f4 08 00 08 	add	r8,r10,r8
8000984a:	2e 88       	sub	r8,-24
8000984c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009850:	ee ea ff 58 	ld.d	r10,r7[-168]
80009854:	f0 16 00 03 	mcall	r6[12]
80009858:	14 98       	mov	r8,r10
8000985a:	16 99       	mov	r9,r11
8000985c:	10 9a       	mov	r10,r8
8000985e:	12 9b       	mov	r11,r9
80009860:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009864:	ec fc 00 1c 	ld.w	r12,r6[28]
80009868:	12 98       	mov	r8,r9
8000986a:	a3 78       	lsl	r8,0x3
8000986c:	12 08       	add	r8,r9
8000986e:	a3 78       	lsl	r8,0x3
80009870:	f8 08 00 08 	add	r8,r12,r8
80009874:	f0 e8 00 00 	ld.d	r8,r8[0]
80009878:	f0 16 00 05 	mcall	r6[20]
8000987c:	14 98       	mov	r8,r10
8000987e:	16 99       	mov	r9,r11
80009880:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009884:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009888:	10 99       	mov	r9,r8
8000988a:	ee 19 80 00 	eorh	r9,0x8000
8000988e:	ef 49 ff 60 	st.w	r7[-160],r9
80009892:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009896:	ef 48 ff 64 	st.w	r7[-156],r8
8000989a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000989e:	ec fa 00 1c 	ld.w	r10,r6[28]
800098a2:	12 98       	mov	r8,r9
800098a4:	a3 78       	lsl	r8,0x3
800098a6:	12 08       	add	r8,r9
800098a8:	a3 78       	lsl	r8,0x3
800098aa:	f4 08 00 08 	add	r8,r10,r8
800098ae:	2e 08       	sub	r8,-32
800098b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800098b4:	ee ea ff 60 	ld.d	r10,r7[-160]
800098b8:	f0 16 00 03 	mcall	r6[12]
800098bc:	14 98       	mov	r8,r10
800098be:	16 99       	mov	r9,r11
800098c0:	10 9a       	mov	r10,r8
800098c2:	12 9b       	mov	r11,r9
800098c4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098c8:	ec fc 00 1c 	ld.w	r12,r6[28]
800098cc:	12 98       	mov	r8,r9
800098ce:	a3 78       	lsl	r8,0x3
800098d0:	12 08       	add	r8,r9
800098d2:	2f f8       	sub	r8,-1
800098d4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800098d8:	f0 16 00 05 	mcall	r6[20]
800098dc:	14 98       	mov	r8,r10
800098de:	16 99       	mov	r9,r11
800098e0:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800098e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800098e8:	10 99       	mov	r9,r8
800098ea:	ee 19 80 00 	eorh	r9,0x8000
800098ee:	ef 49 ff 68 	st.w	r7[-152],r9
800098f2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800098f6:	ef 48 ff 6c 	st.w	r7[-148],r8
800098fa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098fe:	ec fa 00 1c 	ld.w	r10,r6[28]
80009902:	12 98       	mov	r8,r9
80009904:	a3 78       	lsl	r8,0x3
80009906:	12 08       	add	r8,r9
80009908:	a3 78       	lsl	r8,0x3
8000990a:	f4 08 00 08 	add	r8,r10,r8
8000990e:	2d 88       	sub	r8,-40
80009910:	f0 e8 00 00 	ld.d	r8,r8[0]
80009914:	ee ea ff 68 	ld.d	r10,r7[-152]
80009918:	f0 16 00 03 	mcall	r6[12]
8000991c:	14 98       	mov	r8,r10
8000991e:	16 99       	mov	r9,r11
80009920:	10 9a       	mov	r10,r8
80009922:	12 9b       	mov	r11,r9
80009924:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009928:	ec fc 00 1c 	ld.w	r12,r6[28]
8000992c:	12 98       	mov	r8,r9
8000992e:	a3 78       	lsl	r8,0x3
80009930:	12 08       	add	r8,r9
80009932:	a3 78       	lsl	r8,0x3
80009934:	f8 08 00 08 	add	r8,r12,r8
80009938:	2f 08       	sub	r8,-16
8000993a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000993e:	f0 16 00 05 	mcall	r6[20]
80009942:	14 98       	mov	r8,r10
80009944:	16 99       	mov	r9,r11
80009946:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
8000994a:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000994e:	30 0a       	mov	r10,0
80009950:	fc 1b 3f f0 	movh	r11,0x3ff0
80009954:	f0 16 00 11 	mcall	r6[68]
80009958:	14 98       	mov	r8,r10
8000995a:	16 99       	mov	r9,r11
8000995c:	10 9a       	mov	r10,r8
8000995e:	12 9b       	mov	r11,r9
80009960:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009964:	ec fc 00 1c 	ld.w	r12,r6[28]
80009968:	12 98       	mov	r8,r9
8000996a:	a3 78       	lsl	r8,0x3
8000996c:	12 08       	add	r8,r9
8000996e:	a3 78       	lsl	r8,0x3
80009970:	f8 08 00 08 	add	r8,r12,r8
80009974:	2e 88       	sub	r8,-24
80009976:	f0 e8 00 00 	ld.d	r8,r8[0]
8000997a:	f0 16 00 03 	mcall	r6[12]
8000997e:	14 98       	mov	r8,r10
80009980:	16 99       	mov	r9,r11
80009982:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
80009986:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000998a:	30 0a       	mov	r10,0
8000998c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009990:	f0 16 00 11 	mcall	r6[68]
80009994:	14 98       	mov	r8,r10
80009996:	16 99       	mov	r9,r11
80009998:	10 9a       	mov	r10,r8
8000999a:	12 9b       	mov	r11,r9
8000999c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099a0:	ec fc 00 1c 	ld.w	r12,r6[28]
800099a4:	12 98       	mov	r8,r9
800099a6:	a3 78       	lsl	r8,0x3
800099a8:	12 08       	add	r8,r9
800099aa:	a3 78       	lsl	r8,0x3
800099ac:	f8 08 00 08 	add	r8,r12,r8
800099b0:	2e 08       	sub	r8,-32
800099b2:	f0 e8 00 00 	ld.d	r8,r8[0]
800099b6:	f0 16 00 03 	mcall	r6[12]
800099ba:	14 98       	mov	r8,r10
800099bc:	16 99       	mov	r9,r11
800099be:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
800099c2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800099c6:	30 0a       	mov	r10,0
800099c8:	fc 1b 3f f0 	movh	r11,0x3ff0
800099cc:	f0 16 00 11 	mcall	r6[68]
800099d0:	14 98       	mov	r8,r10
800099d2:	16 99       	mov	r9,r11
800099d4:	10 9a       	mov	r10,r8
800099d6:	12 9b       	mov	r11,r9
800099d8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099dc:	ec fc 00 1c 	ld.w	r12,r6[28]
800099e0:	12 98       	mov	r8,r9
800099e2:	a3 78       	lsl	r8,0x3
800099e4:	12 08       	add	r8,r9
800099e6:	a3 78       	lsl	r8,0x3
800099e8:	f8 08 00 08 	add	r8,r12,r8
800099ec:	2d 88       	sub	r8,-40
800099ee:	f0 e8 00 00 	ld.d	r8,r8[0]
800099f2:	f0 16 00 03 	mcall	r6[12]
800099f6:	14 98       	mov	r8,r10
800099f8:	16 99       	mov	r9,r11
800099fa:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
800099fe:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009a02:	10 99       	mov	r9,r8
80009a04:	ee 19 80 00 	eorh	r9,0x8000
80009a08:	ef 49 ff 70 	st.w	r7[-144],r9
80009a0c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009a10:	ef 48 ff 74 	st.w	r7[-140],r8
80009a14:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a18:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a1c:	12 98       	mov	r8,r9
80009a1e:	a3 78       	lsl	r8,0x3
80009a20:	12 08       	add	r8,r9
80009a22:	a3 78       	lsl	r8,0x3
80009a24:	f4 08 00 08 	add	r8,r10,r8
80009a28:	2e 88       	sub	r8,-24
80009a2a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a2e:	ee ea ff 70 	ld.d	r10,r7[-144]
80009a32:	f0 16 00 03 	mcall	r6[12]
80009a36:	14 98       	mov	r8,r10
80009a38:	16 99       	mov	r9,r11
80009a3a:	10 9a       	mov	r10,r8
80009a3c:	12 9b       	mov	r11,r9
80009a3e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a42:	ec fc 00 1c 	ld.w	r12,r6[28]
80009a46:	12 98       	mov	r8,r9
80009a48:	a3 78       	lsl	r8,0x3
80009a4a:	12 08       	add	r8,r9
80009a4c:	a3 78       	lsl	r8,0x3
80009a4e:	f8 08 00 08 	add	r8,r12,r8
80009a52:	2d 08       	sub	r8,-48
80009a54:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a58:	f0 16 00 05 	mcall	r6[20]
80009a5c:	14 98       	mov	r8,r10
80009a5e:	16 99       	mov	r9,r11
80009a60:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80009a64:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009a68:	10 99       	mov	r9,r8
80009a6a:	ee 19 80 00 	eorh	r9,0x8000
80009a6e:	ef 49 ff 78 	st.w	r7[-136],r9
80009a72:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009a76:	ef 48 ff 7c 	st.w	r7[-132],r8
80009a7a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a7e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a82:	12 98       	mov	r8,r9
80009a84:	a3 78       	lsl	r8,0x3
80009a86:	12 08       	add	r8,r9
80009a88:	a3 78       	lsl	r8,0x3
80009a8a:	f4 08 00 08 	add	r8,r10,r8
80009a8e:	2e 08       	sub	r8,-32
80009a90:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a94:	ee ea ff 78 	ld.d	r10,r7[-136]
80009a98:	f0 16 00 03 	mcall	r6[12]
80009a9c:	14 98       	mov	r8,r10
80009a9e:	16 99       	mov	r9,r11
80009aa0:	10 9a       	mov	r10,r8
80009aa2:	12 9b       	mov	r11,r9
80009aa4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009aa8:	ec fc 00 1c 	ld.w	r12,r6[28]
80009aac:	12 98       	mov	r8,r9
80009aae:	a3 78       	lsl	r8,0x3
80009ab0:	12 08       	add	r8,r9
80009ab2:	a3 78       	lsl	r8,0x3
80009ab4:	f8 08 00 08 	add	r8,r12,r8
80009ab8:	2c 88       	sub	r8,-56
80009aba:	f0 e8 00 00 	ld.d	r8,r8[0]
80009abe:	f0 16 00 05 	mcall	r6[20]
80009ac2:	14 98       	mov	r8,r10
80009ac4:	16 99       	mov	r9,r11
80009ac6:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
80009aca:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009ace:	10 99       	mov	r9,r8
80009ad0:	ee 19 80 00 	eorh	r9,0x8000
80009ad4:	ef 49 ff 80 	st.w	r7[-128],r9
80009ad8:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009adc:	ef 48 ff 84 	st.w	r7[-124],r8
80009ae0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009ae4:	ec fa 00 1c 	ld.w	r10,r6[28]
80009ae8:	12 98       	mov	r8,r9
80009aea:	a3 78       	lsl	r8,0x3
80009aec:	12 08       	add	r8,r9
80009aee:	a3 78       	lsl	r8,0x3
80009af0:	f4 08 00 08 	add	r8,r10,r8
80009af4:	2d 88       	sub	r8,-40
80009af6:	f0 e8 00 00 	ld.d	r8,r8[0]
80009afa:	ee ea ff 80 	ld.d	r10,r7[-128]
80009afe:	f0 16 00 03 	mcall	r6[12]
80009b02:	14 98       	mov	r8,r10
80009b04:	16 99       	mov	r9,r11
80009b06:	10 9a       	mov	r10,r8
80009b08:	12 9b       	mov	r11,r9
80009b0a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b0e:	ec fc 00 1c 	ld.w	r12,r6[28]
80009b12:	12 98       	mov	r8,r9
80009b14:	a3 78       	lsl	r8,0x3
80009b16:	12 08       	add	r8,r9
80009b18:	a3 78       	lsl	r8,0x3
80009b1a:	f8 08 00 08 	add	r8,r12,r8
80009b1e:	2c 08       	sub	r8,-64
80009b20:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b24:	f0 16 00 05 	mcall	r6[20]
80009b28:	14 98       	mov	r8,r10
80009b2a:	16 99       	mov	r9,r11
80009b2c:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009b30:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b34:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b38:	12 98       	mov	r8,r9
80009b3a:	a3 78       	lsl	r8,0x3
80009b3c:	12 08       	add	r8,r9
80009b3e:	a3 78       	lsl	r8,0x3
80009b40:	10 0a       	add	r10,r8
80009b42:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009b46:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009b4a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b4e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b52:	12 98       	mov	r8,r9
80009b54:	a3 78       	lsl	r8,0x3
80009b56:	12 08       	add	r8,r9
80009b58:	f0 cb ff ff 	sub	r11,r8,-1
80009b5c:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009b60:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009b64:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b68:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b6c:	12 98       	mov	r8,r9
80009b6e:	a3 78       	lsl	r8,0x3
80009b70:	12 08       	add	r8,r9
80009b72:	a3 78       	lsl	r8,0x3
80009b74:	f4 08 00 08 	add	r8,r10,r8
80009b78:	f0 ca ff f0 	sub	r10,r8,-16
80009b7c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009b80:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009b84:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b88:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b8c:	12 98       	mov	r8,r9
80009b8e:	a3 78       	lsl	r8,0x3
80009b90:	12 08       	add	r8,r9
80009b92:	a3 78       	lsl	r8,0x3
80009b94:	f4 08 00 08 	add	r8,r10,r8
80009b98:	f0 ca ff e8 	sub	r10,r8,-24
80009b9c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009ba0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009ba4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009ba8:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bac:	12 98       	mov	r8,r9
80009bae:	a3 78       	lsl	r8,0x3
80009bb0:	12 08       	add	r8,r9
80009bb2:	a3 78       	lsl	r8,0x3
80009bb4:	f4 08 00 08 	add	r8,r10,r8
80009bb8:	f0 ca ff e0 	sub	r10,r8,-32
80009bbc:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009bc0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80009bc4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009bc8:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bcc:	12 98       	mov	r8,r9
80009bce:	a3 78       	lsl	r8,0x3
80009bd0:	12 08       	add	r8,r9
80009bd2:	a3 78       	lsl	r8,0x3
80009bd4:	f4 08 00 08 	add	r8,r10,r8
80009bd8:	f0 ca ff d8 	sub	r10,r8,-40
80009bdc:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009be0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80009be4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009be8:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bec:	12 98       	mov	r8,r9
80009bee:	a3 78       	lsl	r8,0x3
80009bf0:	12 08       	add	r8,r9
80009bf2:	a3 78       	lsl	r8,0x3
80009bf4:	f4 08 00 08 	add	r8,r10,r8
80009bf8:	f0 ca ff d0 	sub	r10,r8,-48
80009bfc:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009c00:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80009c04:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c08:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c0c:	12 98       	mov	r8,r9
80009c0e:	a3 78       	lsl	r8,0x3
80009c10:	12 08       	add	r8,r9
80009c12:	a3 78       	lsl	r8,0x3
80009c14:	f4 08 00 08 	add	r8,r10,r8
80009c18:	f0 ca ff c8 	sub	r10,r8,-56
80009c1c:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009c20:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009c24:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c28:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c2c:	12 98       	mov	r8,r9
80009c2e:	a3 78       	lsl	r8,0x3
80009c30:	12 08       	add	r8,r9
80009c32:	a3 78       	lsl	r8,0x3
80009c34:	f4 08 00 08 	add	r8,r10,r8
80009c38:	f0 ca ff c0 	sub	r10,r8,-64
80009c3c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009c40:	f4 e9 00 00 	st.d	r10[0],r8
}
80009c44:	2c ad       	sub	sp,-216
80009c46:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009c4a:	00 00       	add	r0,r0
80009c4c:	80 00       	ld.sh	r0,r0[0x0]
80009c4e:	8e ba       	ld.uh	r10,r7[0x6]

80009c50 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80009c50:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009c54:	1a 97       	mov	r7,sp
80009c56:	21 bd       	sub	sp,108
80009c58:	fe f6 05 80 	ld.w	r6,pc[1408]
80009c5c:	1e 26       	rsub	r6,pc
80009c5e:	ef 4c ff bc 	st.w	r7[-68],r12
80009c62:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80009c66:	ec f8 00 00 	ld.w	r8,r6[0]
80009c6a:	70 0a       	ld.w	r10,r8[0x0]
80009c6c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c70:	12 98       	mov	r8,r9
80009c72:	a1 78       	lsl	r8,0x1
80009c74:	12 08       	add	r8,r9
80009c76:	a3 78       	lsl	r8,0x3
80009c78:	f4 08 00 08 	add	r8,r10,r8
80009c7c:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009c80:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c84:	ee ea ff b4 	ld.d	r10,r7[-76]
80009c88:	f0 16 00 11 	mcall	r6[68]
80009c8c:	14 98       	mov	r8,r10
80009c8e:	16 99       	mov	r9,r11
80009c90:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
80009c94:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c98:	ec fa 00 18 	ld.w	r10,r6[24]
80009c9c:	12 98       	mov	r8,r9
80009c9e:	a3 78       	lsl	r8,0x3
80009ca0:	12 08       	add	r8,r9
80009ca2:	a3 78       	lsl	r8,0x3
80009ca4:	f4 08 00 08 	add	r8,r10,r8
80009ca8:	f0 ea 00 00 	ld.d	r10,r8[0]
80009cac:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cb0:	ec f8 01 70 	ld.w	r8,r6[368]
80009cb4:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009cb8:	f0 16 00 05 	mcall	r6[20]
80009cbc:	14 98       	mov	r8,r10
80009cbe:	16 99       	mov	r9,r11
80009cc0:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
80009cc4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cc8:	ec fa 00 18 	ld.w	r10,r6[24]
80009ccc:	12 98       	mov	r8,r9
80009cce:	a3 78       	lsl	r8,0x3
80009cd0:	12 08       	add	r8,r9
80009cd2:	a3 78       	lsl	r8,0x3
80009cd4:	f4 08 00 08 	add	r8,r10,r8
80009cd8:	f0 ea 00 00 	ld.d	r10,r8[0]
80009cdc:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009ce0:	f0 16 00 0c 	mcall	r6[48]
80009ce4:	14 98       	mov	r8,r10
80009ce6:	16 99       	mov	r9,r11
80009ce8:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
80009cec:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cf0:	ec fa 00 18 	ld.w	r10,r6[24]
80009cf4:	12 98       	mov	r8,r9
80009cf6:	a3 78       	lsl	r8,0x3
80009cf8:	12 08       	add	r8,r9
80009cfa:	a3 78       	lsl	r8,0x3
80009cfc:	f4 08 00 08 	add	r8,r10,r8
80009d00:	2e 88       	sub	r8,-24
80009d02:	f0 ea 00 00 	ld.d	r10,r8[0]
80009d06:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009d0a:	f0 16 00 0c 	mcall	r6[48]
80009d0e:	14 98       	mov	r8,r10
80009d10:	16 99       	mov	r9,r11
80009d12:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
80009d16:	ec f8 00 00 	ld.w	r8,r6[0]
80009d1a:	70 08       	ld.w	r8,r8[0x0]
80009d1c:	ef 48 ff 94 	st.w	r7[-108],r8
80009d20:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009d24:	ec f8 00 00 	ld.w	r8,r6[0]
80009d28:	70 0a       	ld.w	r10,r8[0x0]
80009d2a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d2e:	12 98       	mov	r8,r9
80009d30:	a1 78       	lsl	r8,0x1
80009d32:	12 08       	add	r8,r9
80009d34:	a3 78       	lsl	r8,0x3
80009d36:	f4 08 00 08 	add	r8,r10,r8
80009d3a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009d3e:	f0 e2 00 00 	ld.d	r2,r8[0]
80009d42:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009d46:	ee ea ff d0 	ld.d	r10,r7[-48]
80009d4a:	f0 16 00 03 	mcall	r6[12]
80009d4e:	14 98       	mov	r8,r10
80009d50:	16 99       	mov	r9,r11
80009d52:	04 9a       	mov	r10,r2
80009d54:	06 9b       	mov	r11,r3
80009d56:	f0 16 00 05 	mcall	r6[20]
80009d5a:	14 98       	mov	r8,r10
80009d5c:	16 99       	mov	r9,r11
80009d5e:	10 9a       	mov	r10,r8
80009d60:	12 9b       	mov	r11,r9
80009d62:	0a 98       	mov	r8,r5
80009d64:	a1 78       	lsl	r8,0x1
80009d66:	0a 08       	add	r8,r5
80009d68:	a3 78       	lsl	r8,0x3
80009d6a:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009d6e:	f2 08 00 08 	add	r8,r9,r8
80009d72:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009d76:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009d7a:	ec f8 00 00 	ld.w	r8,r6[0]
80009d7e:	70 08       	ld.w	r8,r8[0x0]
80009d80:	ef 48 ff 98 	st.w	r7[-104],r8
80009d84:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009d88:	ec f8 00 00 	ld.w	r8,r6[0]
80009d8c:	70 0a       	ld.w	r10,r8[0x0]
80009d8e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d92:	12 98       	mov	r8,r9
80009d94:	a1 78       	lsl	r8,0x1
80009d96:	12 08       	add	r8,r9
80009d98:	2f f8       	sub	r8,-1
80009d9a:	a3 78       	lsl	r8,0x3
80009d9c:	f4 08 00 08 	add	r8,r10,r8
80009da0:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009da4:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009da8:	ee ea ff d8 	ld.d	r10,r7[-40]
80009dac:	f0 16 00 03 	mcall	r6[12]
80009db0:	14 98       	mov	r8,r10
80009db2:	16 99       	mov	r9,r11
80009db4:	04 9a       	mov	r10,r2
80009db6:	06 9b       	mov	r11,r3
80009db8:	f0 16 00 05 	mcall	r6[20]
80009dbc:	14 98       	mov	r8,r10
80009dbe:	16 99       	mov	r9,r11
80009dc0:	10 9a       	mov	r10,r8
80009dc2:	12 9b       	mov	r11,r9
80009dc4:	0a 98       	mov	r8,r5
80009dc6:	a1 78       	lsl	r8,0x1
80009dc8:	0a 08       	add	r8,r5
80009dca:	2f f8       	sub	r8,-1
80009dcc:	a3 78       	lsl	r8,0x3
80009dce:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009dd2:	f2 08 00 08 	add	r8,r9,r8
80009dd6:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	P11 = (1. - K1) * P[axis][0][0];
80009dda:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009dde:	30 0a       	mov	r10,0
80009de0:	fc 1b 3f f0 	movh	r11,0x3ff0
80009de4:	f0 16 00 11 	mcall	r6[68]
80009de8:	14 98       	mov	r8,r10
80009dea:	16 99       	mov	r9,r11
80009dec:	10 9a       	mov	r10,r8
80009dee:	12 9b       	mov	r11,r9
80009df0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009df4:	ec fc 00 18 	ld.w	r12,r6[24]
80009df8:	12 98       	mov	r8,r9
80009dfa:	a3 78       	lsl	r8,0x3
80009dfc:	12 08       	add	r8,r9
80009dfe:	a3 78       	lsl	r8,0x3
80009e00:	f8 08 00 08 	add	r8,r12,r8
80009e04:	f0 e8 00 00 	ld.d	r8,r8[0]
80009e08:	f0 16 00 03 	mcall	r6[12]
80009e0c:	14 98       	mov	r8,r10
80009e0e:	16 99       	mov	r9,r11
80009e10:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
80009e14:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009e18:	30 0a       	mov	r10,0
80009e1a:	fc 1b 3f f0 	movh	r11,0x3ff0
80009e1e:	f0 16 00 11 	mcall	r6[68]
80009e22:	14 98       	mov	r8,r10
80009e24:	16 99       	mov	r9,r11
80009e26:	10 9a       	mov	r10,r8
80009e28:	12 9b       	mov	r11,r9
80009e2a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e2e:	ec fc 00 18 	ld.w	r12,r6[24]
80009e32:	12 98       	mov	r8,r9
80009e34:	a3 78       	lsl	r8,0x3
80009e36:	12 08       	add	r8,r9
80009e38:	2f f8       	sub	r8,-1
80009e3a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009e3e:	f0 16 00 03 	mcall	r6[12]
80009e42:	14 98       	mov	r8,r10
80009e44:	16 99       	mov	r9,r11
80009e46:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80009e4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009e4e:	10 99       	mov	r9,r8
80009e50:	ee 19 80 00 	eorh	r9,0x8000
80009e54:	ef 49 ff 9c 	st.w	r7[-100],r9
80009e58:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009e5c:	ef 48 ff a0 	st.w	r7[-96],r8
80009e60:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e64:	ec fa 00 18 	ld.w	r10,r6[24]
80009e68:	12 98       	mov	r8,r9
80009e6a:	a3 78       	lsl	r8,0x3
80009e6c:	12 08       	add	r8,r9
80009e6e:	a3 78       	lsl	r8,0x3
80009e70:	f4 08 00 08 	add	r8,r10,r8
80009e74:	f0 e8 00 00 	ld.d	r8,r8[0]
80009e78:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009e7c:	f0 16 00 03 	mcall	r6[12]
80009e80:	14 98       	mov	r8,r10
80009e82:	16 99       	mov	r9,r11
80009e84:	10 9a       	mov	r10,r8
80009e86:	12 9b       	mov	r11,r9
80009e88:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e8c:	ec fc 00 18 	ld.w	r12,r6[24]
80009e90:	12 98       	mov	r8,r9
80009e92:	a3 78       	lsl	r8,0x3
80009e94:	12 08       	add	r8,r9
80009e96:	a3 78       	lsl	r8,0x3
80009e98:	f8 08 00 08 	add	r8,r12,r8
80009e9c:	2e 88       	sub	r8,-24
80009e9e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009ea2:	f0 16 00 05 	mcall	r6[20]
80009ea6:	14 98       	mov	r8,r10
80009ea8:	16 99       	mov	r9,r11
80009eaa:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80009eae:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009eb2:	10 99       	mov	r9,r8
80009eb4:	ee 19 80 00 	eorh	r9,0x8000
80009eb8:	ef 49 ff a4 	st.w	r7[-92],r9
80009ebc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009ec0:	ef 48 ff a8 	st.w	r7[-88],r8
80009ec4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ec8:	ec fa 00 18 	ld.w	r10,r6[24]
80009ecc:	12 98       	mov	r8,r9
80009ece:	a3 78       	lsl	r8,0x3
80009ed0:	12 08       	add	r8,r9
80009ed2:	2f f8       	sub	r8,-1
80009ed4:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009ed8:	ee ea ff a4 	ld.d	r10,r7[-92]
80009edc:	f0 16 00 03 	mcall	r6[12]
80009ee0:	14 98       	mov	r8,r10
80009ee2:	16 99       	mov	r9,r11
80009ee4:	10 9a       	mov	r10,r8
80009ee6:	12 9b       	mov	r11,r9
80009ee8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009eec:	ec fc 00 18 	ld.w	r12,r6[24]
80009ef0:	12 98       	mov	r8,r9
80009ef2:	a3 78       	lsl	r8,0x3
80009ef4:	12 08       	add	r8,r9
80009ef6:	a3 78       	lsl	r8,0x3
80009ef8:	f8 08 00 08 	add	r8,r12,r8
80009efc:	2e 08       	sub	r8,-32
80009efe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f02:	f0 16 00 05 	mcall	r6[20]
80009f06:	14 98       	mov	r8,r10
80009f08:	16 99       	mov	r9,r11
80009f0a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009f0e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f12:	ec fa 00 18 	ld.w	r10,r6[24]
80009f16:	12 98       	mov	r8,r9
80009f18:	a3 78       	lsl	r8,0x3
80009f1a:	12 08       	add	r8,r9
80009f1c:	a3 78       	lsl	r8,0x3
80009f1e:	10 0a       	add	r10,r8
80009f20:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009f24:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009f28:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f2c:	ec fa 00 18 	ld.w	r10,r6[24]
80009f30:	12 98       	mov	r8,r9
80009f32:	a3 78       	lsl	r8,0x3
80009f34:	12 08       	add	r8,r9
80009f36:	f0 cb ff ff 	sub	r11,r8,-1
80009f3a:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009f3e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
80009f42:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f46:	ec fa 00 18 	ld.w	r10,r6[24]
80009f4a:	12 98       	mov	r8,r9
80009f4c:	a3 78       	lsl	r8,0x3
80009f4e:	12 08       	add	r8,r9
80009f50:	a3 78       	lsl	r8,0x3
80009f52:	f4 08 00 08 	add	r8,r10,r8
80009f56:	f0 ca ff e8 	sub	r10,r8,-24
80009f5a:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009f5e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80009f62:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f66:	ec fa 00 18 	ld.w	r10,r6[24]
80009f6a:	12 98       	mov	r8,r9
80009f6c:	a3 78       	lsl	r8,0x3
80009f6e:	12 08       	add	r8,r9
80009f70:	a3 78       	lsl	r8,0x3
80009f72:	f4 08 00 08 	add	r8,r10,r8
80009f76:	f0 ca ff e0 	sub	r10,r8,-32
80009f7a:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009f7e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
80009f82:	ec f8 00 00 	ld.w	r8,r6[0]
80009f86:	70 08       	ld.w	r8,r8[0x0]
80009f88:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f8c:	f2 c9 fc 99 	sub	r9,r9,-871
80009f90:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009f94:	10 9c       	mov	r12,r8
80009f96:	f0 16 00 02 	mcall	r6[8]
80009f9a:	14 98       	mov	r8,r10
80009f9c:	16 99       	mov	r9,r11
80009f9e:	ee ea ff b4 	ld.d	r10,r7[-76]
80009fa2:	f0 16 00 11 	mcall	r6[68]
80009fa6:	14 98       	mov	r8,r10
80009fa8:	16 99       	mov	r9,r11
80009faa:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
80009fae:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fb2:	ec fa 00 1c 	ld.w	r10,r6[28]
80009fb6:	12 98       	mov	r8,r9
80009fb8:	a3 78       	lsl	r8,0x3
80009fba:	12 08       	add	r8,r9
80009fbc:	a3 78       	lsl	r8,0x3
80009fbe:	f4 08 00 08 	add	r8,r10,r8
80009fc2:	f0 ea 00 00 	ld.d	r10,r8[0]
80009fc6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fca:	ec f8 01 6c 	ld.w	r8,r6[364]
80009fce:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009fd2:	f0 16 00 05 	mcall	r6[20]
80009fd6:	14 98       	mov	r8,r10
80009fd8:	16 99       	mov	r9,r11
80009fda:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
80009fde:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fe2:	ec fa 00 1c 	ld.w	r10,r6[28]
80009fe6:	12 98       	mov	r8,r9
80009fe8:	a3 78       	lsl	r8,0x3
80009fea:	12 08       	add	r8,r9
80009fec:	a3 78       	lsl	r8,0x3
80009fee:	f4 08 00 08 	add	r8,r10,r8
80009ff2:	f0 ea 00 00 	ld.d	r10,r8[0]
80009ff6:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009ffa:	f0 16 00 0c 	mcall	r6[48]
80009ffe:	14 98       	mov	r8,r10
8000a000:	16 99       	mov	r9,r11
8000a002:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
8000a006:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a00a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a00e:	12 98       	mov	r8,r9
8000a010:	a3 78       	lsl	r8,0x3
8000a012:	12 08       	add	r8,r9
8000a014:	a3 78       	lsl	r8,0x3
8000a016:	f4 08 00 08 	add	r8,r10,r8
8000a01a:	2e 88       	sub	r8,-24
8000a01c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a020:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a024:	f0 16 00 0c 	mcall	r6[48]
8000a028:	14 98       	mov	r8,r10
8000a02a:	16 99       	mov	r9,r11
8000a02c:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
8000a030:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a034:	30 0a       	mov	r10,0
8000a036:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a03a:	f0 16 00 11 	mcall	r6[68]
8000a03e:	14 98       	mov	r8,r10
8000a040:	16 99       	mov	r9,r11
8000a042:	10 9a       	mov	r10,r8
8000a044:	12 9b       	mov	r11,r9
8000a046:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a04a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a04e:	12 98       	mov	r8,r9
8000a050:	a3 78       	lsl	r8,0x3
8000a052:	12 08       	add	r8,r9
8000a054:	a3 78       	lsl	r8,0x3
8000a056:	f8 08 00 08 	add	r8,r12,r8
8000a05a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a05e:	f0 16 00 03 	mcall	r6[12]
8000a062:	14 98       	mov	r8,r10
8000a064:	16 99       	mov	r9,r11
8000a066:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000a06a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a06e:	30 0a       	mov	r10,0
8000a070:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a074:	f0 16 00 11 	mcall	r6[68]
8000a078:	14 98       	mov	r8,r10
8000a07a:	16 99       	mov	r9,r11
8000a07c:	10 9a       	mov	r10,r8
8000a07e:	12 9b       	mov	r11,r9
8000a080:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a084:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a088:	12 98       	mov	r8,r9
8000a08a:	a3 78       	lsl	r8,0x3
8000a08c:	12 08       	add	r8,r9
8000a08e:	2f f8       	sub	r8,-1
8000a090:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a094:	f0 16 00 03 	mcall	r6[12]
8000a098:	14 98       	mov	r8,r10
8000a09a:	16 99       	mov	r9,r11
8000a09c:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
8000a0a0:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a0a4:	10 99       	mov	r9,r8
8000a0a6:	ee 19 80 00 	eorh	r9,0x8000
8000a0aa:	ef 49 ff ac 	st.w	r7[-84],r9
8000a0ae:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a0b2:	ef 48 ff b0 	st.w	r7[-80],r8
8000a0b6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0ba:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a0be:	12 98       	mov	r8,r9
8000a0c0:	a3 78       	lsl	r8,0x3
8000a0c2:	12 08       	add	r8,r9
8000a0c4:	a3 78       	lsl	r8,0x3
8000a0c6:	f4 08 00 08 	add	r8,r10,r8
8000a0ca:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0ce:	ee ea ff ac 	ld.d	r10,r7[-84]
8000a0d2:	f0 16 00 03 	mcall	r6[12]
8000a0d6:	14 98       	mov	r8,r10
8000a0d8:	16 99       	mov	r9,r11
8000a0da:	10 9a       	mov	r10,r8
8000a0dc:	12 9b       	mov	r11,r9
8000a0de:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0e2:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a0e6:	12 98       	mov	r8,r9
8000a0e8:	a3 78       	lsl	r8,0x3
8000a0ea:	12 08       	add	r8,r9
8000a0ec:	a3 78       	lsl	r8,0x3
8000a0ee:	f8 08 00 08 	add	r8,r12,r8
8000a0f2:	2e 88       	sub	r8,-24
8000a0f4:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0f8:	f0 16 00 05 	mcall	r6[20]
8000a0fc:	14 98       	mov	r8,r10
8000a0fe:	16 99       	mov	r9,r11
8000a100:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000a104:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a108:	10 91       	mov	r1,r8
8000a10a:	ee 11 80 00 	eorh	r1,0x8000
8000a10e:	ee f0 ff dc 	ld.w	r0,r7[-36]
8000a112:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a116:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a11a:	12 98       	mov	r8,r9
8000a11c:	a3 78       	lsl	r8,0x3
8000a11e:	12 08       	add	r8,r9
8000a120:	2f f8       	sub	r8,-1
8000a122:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000a126:	00 9a       	mov	r10,r0
8000a128:	02 9b       	mov	r11,r1
8000a12a:	f0 16 00 03 	mcall	r6[12]
8000a12e:	14 98       	mov	r8,r10
8000a130:	16 99       	mov	r9,r11
8000a132:	10 9a       	mov	r10,r8
8000a134:	12 9b       	mov	r11,r9
8000a136:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a13a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a13e:	12 98       	mov	r8,r9
8000a140:	a3 78       	lsl	r8,0x3
8000a142:	12 08       	add	r8,r9
8000a144:	a3 78       	lsl	r8,0x3
8000a146:	f8 08 00 08 	add	r8,r12,r8
8000a14a:	2e 08       	sub	r8,-32
8000a14c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a150:	f0 16 00 05 	mcall	r6[20]
8000a154:	14 98       	mov	r8,r10
8000a156:	16 99       	mov	r9,r11
8000a158:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000a15c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a160:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a164:	12 98       	mov	r8,r9
8000a166:	a3 78       	lsl	r8,0x3
8000a168:	12 08       	add	r8,r9
8000a16a:	a3 78       	lsl	r8,0x3
8000a16c:	10 0a       	add	r10,r8
8000a16e:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a172:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000a176:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a17a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a17e:	12 98       	mov	r8,r9
8000a180:	a3 78       	lsl	r8,0x3
8000a182:	12 08       	add	r8,r9
8000a184:	f0 cb ff ff 	sub	r11,r8,-1
8000a188:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a18c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
8000a190:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a194:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a198:	12 98       	mov	r8,r9
8000a19a:	a3 78       	lsl	r8,0x3
8000a19c:	12 08       	add	r8,r9
8000a19e:	a3 78       	lsl	r8,0x3
8000a1a0:	f4 08 00 08 	add	r8,r10,r8
8000a1a4:	f0 ca ff e8 	sub	r10,r8,-24
8000a1a8:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a1ac:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000a1b0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1b4:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a1b8:	12 98       	mov	r8,r9
8000a1ba:	a3 78       	lsl	r8,0x3
8000a1bc:	12 08       	add	r8,r9
8000a1be:	a3 78       	lsl	r8,0x3
8000a1c0:	f4 08 00 08 	add	r8,r10,r8
8000a1c4:	f0 ca ff e0 	sub	r10,r8,-32
8000a1c8:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a1cc:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a1d0:	2e 5d       	sub	sp,-108
8000a1d2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a1d6:	00 00       	add	r0,r0
8000a1d8:	80 00       	ld.sh	r0,r0[0x0]
8000a1da:	9a e0       	ld.uh	r0,sp[0xc]

8000a1dc <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
8000a1dc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000a1e0:	1a 97       	mov	r7,sp
8000a1e2:	21 ad       	sub	sp,104
8000a1e4:	fe f6 05 88 	ld.w	r6,pc[1416]
8000a1e8:	1e 26       	rsub	r6,pc
8000a1ea:	ef 4c ff bc 	st.w	r7[-68],r12
8000a1ee:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
8000a1f2:	ee fc ff b8 	ld.w	r12,r7[-72]
8000a1f6:	f0 16 00 02 	mcall	r6[8]
8000a1fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000a1fe:	70 0c       	ld.w	r12,r8[0x0]
8000a200:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a204:	12 98       	mov	r8,r9
8000a206:	a1 78       	lsl	r8,0x1
8000a208:	12 08       	add	r8,r9
8000a20a:	2f f8       	sub	r8,-1
8000a20c:	a3 78       	lsl	r8,0x3
8000a20e:	f8 08 00 08 	add	r8,r12,r8
8000a212:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000a216:	f0 16 00 11 	mcall	r6[68]
8000a21a:	14 98       	mov	r8,r10
8000a21c:	16 99       	mov	r9,r11
8000a21e:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
8000a222:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a226:	ec fa 00 18 	ld.w	r10,r6[24]
8000a22a:	12 98       	mov	r8,r9
8000a22c:	a3 78       	lsl	r8,0x3
8000a22e:	12 08       	add	r8,r9
8000a230:	a3 78       	lsl	r8,0x3
8000a232:	f4 08 00 08 	add	r8,r10,r8
8000a236:	2e 08       	sub	r8,-32
8000a238:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a23c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a240:	ec f8 01 70 	ld.w	r8,r6[368]
8000a244:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a248:	f0 16 00 05 	mcall	r6[20]
8000a24c:	14 98       	mov	r8,r10
8000a24e:	16 99       	mov	r9,r11
8000a250:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
8000a254:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a258:	ec fa 00 18 	ld.w	r10,r6[24]
8000a25c:	12 98       	mov	r8,r9
8000a25e:	a3 78       	lsl	r8,0x3
8000a260:	12 08       	add	r8,r9
8000a262:	2f f8       	sub	r8,-1
8000a264:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a268:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a26c:	f0 16 00 0c 	mcall	r6[48]
8000a270:	14 98       	mov	r8,r10
8000a272:	16 99       	mov	r9,r11
8000a274:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
8000a278:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a27c:	ec fa 00 18 	ld.w	r10,r6[24]
8000a280:	12 98       	mov	r8,r9
8000a282:	a3 78       	lsl	r8,0x3
8000a284:	12 08       	add	r8,r9
8000a286:	a3 78       	lsl	r8,0x3
8000a288:	f4 08 00 08 	add	r8,r10,r8
8000a28c:	2e 08       	sub	r8,-32
8000a28e:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a292:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a296:	f0 16 00 0c 	mcall	r6[48]
8000a29a:	14 98       	mov	r8,r10
8000a29c:	16 99       	mov	r9,r11
8000a29e:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
8000a2a2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a2a6:	70 08       	ld.w	r8,r8[0x0]
8000a2a8:	ef 48 ff 98 	st.w	r7[-104],r8
8000a2ac:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a2b0:	ec f8 00 00 	ld.w	r8,r6[0]
8000a2b4:	70 0a       	ld.w	r10,r8[0x0]
8000a2b6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2ba:	12 98       	mov	r8,r9
8000a2bc:	a1 78       	lsl	r8,0x1
8000a2be:	12 08       	add	r8,r9
8000a2c0:	a3 78       	lsl	r8,0x3
8000a2c2:	f4 08 00 08 	add	r8,r10,r8
8000a2c6:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000a2ca:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a2ce:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a2d2:	ee ea ff d0 	ld.d	r10,r7[-48]
8000a2d6:	f0 16 00 03 	mcall	r6[12]
8000a2da:	14 98       	mov	r8,r10
8000a2dc:	16 99       	mov	r9,r11
8000a2de:	04 9a       	mov	r10,r2
8000a2e0:	06 9b       	mov	r11,r3
8000a2e2:	f0 16 00 05 	mcall	r6[20]
8000a2e6:	14 98       	mov	r8,r10
8000a2e8:	16 99       	mov	r9,r11
8000a2ea:	10 9a       	mov	r10,r8
8000a2ec:	12 9b       	mov	r11,r9
8000a2ee:	0a 98       	mov	r8,r5
8000a2f0:	a1 78       	lsl	r8,0x1
8000a2f2:	0a 08       	add	r8,r5
8000a2f4:	a3 78       	lsl	r8,0x3
8000a2f6:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000a2fa:	f2 08 00 08 	add	r8,r9,r8
8000a2fe:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000a302:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
8000a306:	ec f8 00 00 	ld.w	r8,r6[0]
8000a30a:	70 08       	ld.w	r8,r8[0x0]
8000a30c:	ef 48 ff 9c 	st.w	r7[-100],r8
8000a310:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a314:	ec f8 00 00 	ld.w	r8,r6[0]
8000a318:	70 0a       	ld.w	r10,r8[0x0]
8000a31a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a31e:	12 98       	mov	r8,r9
8000a320:	a1 78       	lsl	r8,0x1
8000a322:	12 08       	add	r8,r9
8000a324:	2f f8       	sub	r8,-1
8000a326:	a3 78       	lsl	r8,0x3
8000a328:	f4 08 00 08 	add	r8,r10,r8
8000a32c:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000a330:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a334:	ee ea ff d8 	ld.d	r10,r7[-40]
8000a338:	f0 16 00 03 	mcall	r6[12]
8000a33c:	14 98       	mov	r8,r10
8000a33e:	16 99       	mov	r9,r11
8000a340:	04 9a       	mov	r10,r2
8000a342:	06 9b       	mov	r11,r3
8000a344:	f0 16 00 05 	mcall	r6[20]
8000a348:	14 98       	mov	r8,r10
8000a34a:	16 99       	mov	r9,r11
8000a34c:	10 9a       	mov	r10,r8
8000a34e:	12 9b       	mov	r11,r9
8000a350:	0a 98       	mov	r8,r5
8000a352:	a1 78       	lsl	r8,0x1
8000a354:	0a 08       	add	r8,r5
8000a356:	2f f8       	sub	r8,-1
8000a358:	a3 78       	lsl	r8,0x3
8000a35a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a35e:	f2 08 00 08 	add	r8,r9,r8
8000a362:	f0 eb 0b 5c 	st.d	r8[2908],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000a366:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a36a:	10 99       	mov	r9,r8
8000a36c:	ee 19 80 00 	eorh	r9,0x8000
8000a370:	ef 49 ff a0 	st.w	r7[-96],r9
8000a374:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a378:	ef 48 ff a4 	st.w	r7[-92],r8
8000a37c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a380:	ec fa 00 18 	ld.w	r10,r6[24]
8000a384:	12 98       	mov	r8,r9
8000a386:	a3 78       	lsl	r8,0x3
8000a388:	12 08       	add	r8,r9
8000a38a:	a3 78       	lsl	r8,0x3
8000a38c:	f4 08 00 08 	add	r8,r10,r8
8000a390:	2e 88       	sub	r8,-24
8000a392:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a396:	ee ea ff a0 	ld.d	r10,r7[-96]
8000a39a:	f0 16 00 03 	mcall	r6[12]
8000a39e:	14 98       	mov	r8,r10
8000a3a0:	16 99       	mov	r9,r11
8000a3a2:	10 9a       	mov	r10,r8
8000a3a4:	12 9b       	mov	r11,r9
8000a3a6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3aa:	ec fc 00 18 	ld.w	r12,r6[24]
8000a3ae:	12 98       	mov	r8,r9
8000a3b0:	a3 78       	lsl	r8,0x3
8000a3b2:	12 08       	add	r8,r9
8000a3b4:	a3 78       	lsl	r8,0x3
8000a3b6:	f8 08 00 08 	add	r8,r12,r8
8000a3ba:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a3be:	f0 16 00 05 	mcall	r6[20]
8000a3c2:	14 98       	mov	r8,r10
8000a3c4:	16 99       	mov	r9,r11
8000a3c6:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000a3ca:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a3ce:	10 99       	mov	r9,r8
8000a3d0:	ee 19 80 00 	eorh	r9,0x8000
8000a3d4:	ef 49 ff a8 	st.w	r7[-88],r9
8000a3d8:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a3dc:	ef 48 ff ac 	st.w	r7[-84],r8
8000a3e0:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3e4:	ec fa 00 18 	ld.w	r10,r6[24]
8000a3e8:	12 98       	mov	r8,r9
8000a3ea:	a3 78       	lsl	r8,0x3
8000a3ec:	12 08       	add	r8,r9
8000a3ee:	a3 78       	lsl	r8,0x3
8000a3f0:	f4 08 00 08 	add	r8,r10,r8
8000a3f4:	2e 08       	sub	r8,-32
8000a3f6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a3fa:	ee ea ff a8 	ld.d	r10,r7[-88]
8000a3fe:	f0 16 00 03 	mcall	r6[12]
8000a402:	14 98       	mov	r8,r10
8000a404:	16 99       	mov	r9,r11
8000a406:	10 9a       	mov	r10,r8
8000a408:	12 9b       	mov	r11,r9
8000a40a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a40e:	ec fc 00 18 	ld.w	r12,r6[24]
8000a412:	12 98       	mov	r8,r9
8000a414:	a3 78       	lsl	r8,0x3
8000a416:	12 08       	add	r8,r9
8000a418:	2f f8       	sub	r8,-1
8000a41a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a41e:	f0 16 00 05 	mcall	r6[20]
8000a422:	14 98       	mov	r8,r10
8000a424:	16 99       	mov	r9,r11
8000a426:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000a42a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a42e:	30 0a       	mov	r10,0
8000a430:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a434:	f0 16 00 11 	mcall	r6[68]
8000a438:	14 98       	mov	r8,r10
8000a43a:	16 99       	mov	r9,r11
8000a43c:	10 9a       	mov	r10,r8
8000a43e:	12 9b       	mov	r11,r9
8000a440:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a444:	ec fc 00 18 	ld.w	r12,r6[24]
8000a448:	12 98       	mov	r8,r9
8000a44a:	a3 78       	lsl	r8,0x3
8000a44c:	12 08       	add	r8,r9
8000a44e:	a3 78       	lsl	r8,0x3
8000a450:	f8 08 00 08 	add	r8,r12,r8
8000a454:	2e 88       	sub	r8,-24
8000a456:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a45a:	f0 16 00 03 	mcall	r6[12]
8000a45e:	14 98       	mov	r8,r10
8000a460:	16 99       	mov	r9,r11
8000a462:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000a466:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a46a:	30 0a       	mov	r10,0
8000a46c:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a470:	f0 16 00 11 	mcall	r6[68]
8000a474:	14 98       	mov	r8,r10
8000a476:	16 99       	mov	r9,r11
8000a478:	10 9a       	mov	r10,r8
8000a47a:	12 9b       	mov	r11,r9
8000a47c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a480:	ec fc 00 18 	ld.w	r12,r6[24]
8000a484:	12 98       	mov	r8,r9
8000a486:	a3 78       	lsl	r8,0x3
8000a488:	12 08       	add	r8,r9
8000a48a:	a3 78       	lsl	r8,0x3
8000a48c:	f8 08 00 08 	add	r8,r12,r8
8000a490:	2e 08       	sub	r8,-32
8000a492:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a496:	f0 16 00 03 	mcall	r6[12]
8000a49a:	14 98       	mov	r8,r10
8000a49c:	16 99       	mov	r9,r11
8000a49e:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000a4a2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4a6:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4aa:	12 98       	mov	r8,r9
8000a4ac:	a3 78       	lsl	r8,0x3
8000a4ae:	12 08       	add	r8,r9
8000a4b0:	a3 78       	lsl	r8,0x3
8000a4b2:	10 0a       	add	r10,r8
8000a4b4:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a4b8:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000a4bc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4c0:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4c4:	12 98       	mov	r8,r9
8000a4c6:	a3 78       	lsl	r8,0x3
8000a4c8:	12 08       	add	r8,r9
8000a4ca:	f0 cb ff ff 	sub	r11,r8,-1
8000a4ce:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a4d2:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000a4d6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4da:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4de:	12 98       	mov	r8,r9
8000a4e0:	a3 78       	lsl	r8,0x3
8000a4e2:	12 08       	add	r8,r9
8000a4e4:	a3 78       	lsl	r8,0x3
8000a4e6:	f4 08 00 08 	add	r8,r10,r8
8000a4ea:	f0 ca ff e8 	sub	r10,r8,-24
8000a4ee:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a4f2:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000a4f6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4fa:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4fe:	12 98       	mov	r8,r9
8000a500:	a3 78       	lsl	r8,0x3
8000a502:	12 08       	add	r8,r9
8000a504:	a3 78       	lsl	r8,0x3
8000a506:	f4 08 00 08 	add	r8,r10,r8
8000a50a:	f0 ca ff e0 	sub	r10,r8,-32
8000a50e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a512:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000a516:	ec f8 00 00 	ld.w	r8,r6[0]
8000a51a:	70 08       	ld.w	r8,r8[0x0]
8000a51c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a520:	f2 c9 fc a3 	sub	r9,r9,-861
8000a524:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a528:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a52c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a530:	10 9c       	mov	r12,r8
8000a532:	f0 16 00 02 	mcall	r6[8]
8000a536:	14 98       	mov	r8,r10
8000a538:	16 99       	mov	r9,r11
8000a53a:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000a53e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a542:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a546:	12 98       	mov	r8,r9
8000a548:	a3 78       	lsl	r8,0x3
8000a54a:	12 08       	add	r8,r9
8000a54c:	a3 78       	lsl	r8,0x3
8000a54e:	f4 08 00 08 	add	r8,r10,r8
8000a552:	2e 08       	sub	r8,-32
8000a554:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a558:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a55c:	ec f8 01 6c 	ld.w	r8,r6[364]
8000a560:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a564:	f0 16 00 05 	mcall	r6[20]
8000a568:	14 98       	mov	r8,r10
8000a56a:	16 99       	mov	r9,r11
8000a56c:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000a570:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a574:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a578:	12 98       	mov	r8,r9
8000a57a:	a3 78       	lsl	r8,0x3
8000a57c:	12 08       	add	r8,r9
8000a57e:	2f f8       	sub	r8,-1
8000a580:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a584:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a588:	f0 16 00 0c 	mcall	r6[48]
8000a58c:	14 98       	mov	r8,r10
8000a58e:	16 99       	mov	r9,r11
8000a590:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000a594:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a598:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a59c:	12 98       	mov	r8,r9
8000a59e:	a3 78       	lsl	r8,0x3
8000a5a0:	12 08       	add	r8,r9
8000a5a2:	a3 78       	lsl	r8,0x3
8000a5a4:	f4 08 00 08 	add	r8,r10,r8
8000a5a8:	2e 08       	sub	r8,-32
8000a5aa:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a5ae:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a5b2:	f0 16 00 0c 	mcall	r6[48]
8000a5b6:	14 98       	mov	r8,r10
8000a5b8:	16 99       	mov	r9,r11
8000a5ba:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000a5be:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a5c2:	10 99       	mov	r9,r8
8000a5c4:	ee 19 80 00 	eorh	r9,0x8000
8000a5c8:	ef 49 ff b0 	st.w	r7[-80],r9
8000a5cc:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a5d0:	ef 48 ff b4 	st.w	r7[-76],r8
8000a5d4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5d8:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a5dc:	12 98       	mov	r8,r9
8000a5de:	a3 78       	lsl	r8,0x3
8000a5e0:	12 08       	add	r8,r9
8000a5e2:	a3 78       	lsl	r8,0x3
8000a5e4:	f4 08 00 08 	add	r8,r10,r8
8000a5e8:	2e 88       	sub	r8,-24
8000a5ea:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a5ee:	ee ea ff b0 	ld.d	r10,r7[-80]
8000a5f2:	f0 16 00 03 	mcall	r6[12]
8000a5f6:	14 98       	mov	r8,r10
8000a5f8:	16 99       	mov	r9,r11
8000a5fa:	10 9a       	mov	r10,r8
8000a5fc:	12 9b       	mov	r11,r9
8000a5fe:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a602:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a606:	12 98       	mov	r8,r9
8000a608:	a3 78       	lsl	r8,0x3
8000a60a:	12 08       	add	r8,r9
8000a60c:	a3 78       	lsl	r8,0x3
8000a60e:	f8 08 00 08 	add	r8,r12,r8
8000a612:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a616:	f0 16 00 05 	mcall	r6[20]
8000a61a:	14 98       	mov	r8,r10
8000a61c:	16 99       	mov	r9,r11
8000a61e:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000a622:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a626:	10 91       	mov	r1,r8
8000a628:	ee 11 80 00 	eorh	r1,0x8000
8000a62c:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000a630:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a634:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a638:	12 98       	mov	r8,r9
8000a63a:	a3 78       	lsl	r8,0x3
8000a63c:	12 08       	add	r8,r9
8000a63e:	a3 78       	lsl	r8,0x3
8000a640:	f4 08 00 08 	add	r8,r10,r8
8000a644:	2e 08       	sub	r8,-32
8000a646:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a64a:	00 9a       	mov	r10,r0
8000a64c:	02 9b       	mov	r11,r1
8000a64e:	f0 16 00 03 	mcall	r6[12]
8000a652:	14 98       	mov	r8,r10
8000a654:	16 99       	mov	r9,r11
8000a656:	10 9a       	mov	r10,r8
8000a658:	12 9b       	mov	r11,r9
8000a65a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a65e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a662:	12 98       	mov	r8,r9
8000a664:	a3 78       	lsl	r8,0x3
8000a666:	12 08       	add	r8,r9
8000a668:	2f f8       	sub	r8,-1
8000a66a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a66e:	f0 16 00 05 	mcall	r6[20]
8000a672:	14 98       	mov	r8,r10
8000a674:	16 99       	mov	r9,r11
8000a676:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000a67a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a67e:	30 0a       	mov	r10,0
8000a680:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a684:	f0 16 00 11 	mcall	r6[68]
8000a688:	14 98       	mov	r8,r10
8000a68a:	16 99       	mov	r9,r11
8000a68c:	10 9a       	mov	r10,r8
8000a68e:	12 9b       	mov	r11,r9
8000a690:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a694:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a698:	12 98       	mov	r8,r9
8000a69a:	a3 78       	lsl	r8,0x3
8000a69c:	12 08       	add	r8,r9
8000a69e:	a3 78       	lsl	r8,0x3
8000a6a0:	f8 08 00 08 	add	r8,r12,r8
8000a6a4:	2e 88       	sub	r8,-24
8000a6a6:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6aa:	f0 16 00 03 	mcall	r6[12]
8000a6ae:	14 98       	mov	r8,r10
8000a6b0:	16 99       	mov	r9,r11
8000a6b2:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000a6b6:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a6ba:	30 0a       	mov	r10,0
8000a6bc:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a6c0:	f0 16 00 11 	mcall	r6[68]
8000a6c4:	14 98       	mov	r8,r10
8000a6c6:	16 99       	mov	r9,r11
8000a6c8:	10 9a       	mov	r10,r8
8000a6ca:	12 9b       	mov	r11,r9
8000a6cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a6d0:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a6d4:	12 98       	mov	r8,r9
8000a6d6:	a3 78       	lsl	r8,0x3
8000a6d8:	12 08       	add	r8,r9
8000a6da:	a3 78       	lsl	r8,0x3
8000a6dc:	f8 08 00 08 	add	r8,r12,r8
8000a6e0:	2e 08       	sub	r8,-32
8000a6e2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6e6:	f0 16 00 03 	mcall	r6[12]
8000a6ea:	14 98       	mov	r8,r10
8000a6ec:	16 99       	mov	r9,r11
8000a6ee:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000a6f2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a6f6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a6fa:	12 98       	mov	r8,r9
8000a6fc:	a3 78       	lsl	r8,0x3
8000a6fe:	12 08       	add	r8,r9
8000a700:	a3 78       	lsl	r8,0x3
8000a702:	10 0a       	add	r10,r8
8000a704:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a708:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a70c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a710:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a714:	12 98       	mov	r8,r9
8000a716:	a3 78       	lsl	r8,0x3
8000a718:	12 08       	add	r8,r9
8000a71a:	f0 cb ff ff 	sub	r11,r8,-1
8000a71e:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a722:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a726:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a72a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a72e:	12 98       	mov	r8,r9
8000a730:	a3 78       	lsl	r8,0x3
8000a732:	12 08       	add	r8,r9
8000a734:	a3 78       	lsl	r8,0x3
8000a736:	f4 08 00 08 	add	r8,r10,r8
8000a73a:	f0 ca ff e8 	sub	r10,r8,-24
8000a73e:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a742:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a746:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a74a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a74e:	12 98       	mov	r8,r9
8000a750:	a3 78       	lsl	r8,0x3
8000a752:	12 08       	add	r8,r9
8000a754:	a3 78       	lsl	r8,0x3
8000a756:	f4 08 00 08 	add	r8,r10,r8
8000a75a:	f0 ca ff e0 	sub	r10,r8,-32
8000a75e:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a762:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a766:	2e 6d       	sub	sp,-104
8000a768:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a76c:	80 00       	ld.sh	r0,r0[0x0]
8000a76e:	a0 6c       	st.h	r0[0xc],r12

8000a770 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a770:	eb cd 40 e0 	pushm	r5-r7,lr
8000a774:	1a 97       	mov	r7,sp
8000a776:	21 dd       	sub	sp,116
8000a778:	fe f6 02 00 	ld.w	r6,pc[512]
8000a77c:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a77e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a782:	70 08       	ld.w	r8,r8[0x0]
8000a784:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a788:	ec 18 00 01 	eorl	r8,0x1
8000a78c:	5c 58       	castu.b	r8
8000a78e:	c0 30       	breq	8000a794 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a790:	f0 16 01 17 	mcall	r6[1116]
	}

	if(!filter_init_delta_t)
8000a794:	ec f8 02 dc 	ld.w	r8,r6[732]
8000a798:	11 88       	ld.ub	r8,r8[0x0]
8000a79a:	ec 18 00 01 	eorl	r8,0x1
8000a79e:	5c 58       	castu.b	r8
8000a7a0:	c0 c0       	breq	8000a7b8 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a7a2:	ec f9 02 dc 	ld.w	r9,r6[732]
8000a7a6:	30 18       	mov	r8,1
8000a7a8:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a7aa:	f0 16 00 29 	mcall	r6[164]
8000a7ae:	18 99       	mov	r9,r12
8000a7b0:	ec f8 02 d8 	ld.w	r8,r6[728]
8000a7b4:	91 09       	st.w	r8[0x0],r9
8000a7b6:	cd e8       	rjmp	8000a972 <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a7b8:	f0 16 00 29 	mcall	r6[164]
8000a7bc:	18 98       	mov	r8,r12
8000a7be:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a7c2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7c6:	70 08       	ld.w	r8,r8[0x0]
8000a7c8:	ec f9 02 d8 	ld.w	r9,r6[728]
8000a7cc:	72 09       	ld.w	r9,r9[0x0]
8000a7ce:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a7d2:	f4 09 01 09 	sub	r9,r10,r9
8000a7d6:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a7da:	f1 49 0b a4 	st.w	r8[2980],r9
		prev_time = actual_time;
8000a7de:	ec f8 02 d8 	ld.w	r8,r6[728]
8000a7e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a7e6:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a7e8:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7ec:	70 05       	ld.w	r5,r8[0x0]
8000a7ee:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7f2:	70 08       	ld.w	r8,r8[0x0]
8000a7f4:	f0 f8 0b a4 	ld.w	r8,r8[2980]
8000a7f8:	e0 6b 24 00 	mov	r11,9216
8000a7fc:	ea 1b 49 74 	orh	r11,0x4974
8000a800:	10 9c       	mov	r12,r8
8000a802:	f0 16 00 0a 	mcall	r6[40]
8000a806:	18 98       	mov	r8,r12
8000a808:	eb 48 0b a4 	st.w	r5[2980],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a80c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a810:	70 08       	ld.w	r8,r8[0x0]
8000a812:	f0 fa 0b a4 	ld.w	r10,r8[2980]
8000a816:	ec f8 00 00 	ld.w	r8,r6[0]
8000a81a:	70 08       	ld.w	r8,r8[0x0]
8000a81c:	f0 c9 ff 40 	sub	r9,r8,-192
8000a820:	ec f8 00 00 	ld.w	r8,r6[0]
8000a824:	70 08       	ld.w	r8,r8[0x0]
8000a826:	12 9b       	mov	r11,r9
8000a828:	10 9c       	mov	r12,r8
8000a82a:	f0 16 01 de 	mcall	r6[1912]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a82e:	ec fc 02 98 	ld.w	r12,r6[664]
8000a832:	f0 16 00 96 	mcall	r6[600]
8000a836:	18 98       	mov	r8,r12
8000a838:	58 08       	cp.w	r8,0
8000a83a:	e0 80 00 9c 	breq	8000a972 <estimator_loop+0x202>
8000a83e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a842:	70 08       	ld.w	r8,r8[0x0]
8000a844:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a848:	58 08       	cp.w	r8,0
8000a84a:	e0 80 00 94 	breq	8000a972 <estimator_loop+0x202>
8000a84e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a852:	70 08       	ld.w	r8,r8[0x0]
8000a854:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8000a858:	58 08       	cp.w	r8,0
8000a85a:	e0 81 00 8c 	brne	8000a972 <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a85e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a862:	70 08       	ld.w	r8,r8[0x0]
8000a864:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000a868:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a86c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a870:	70 08       	ld.w	r8,r8[0x0]
8000a872:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000a876:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a87a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a87e:	70 08       	ld.w	r8,r8[0x0]
8000a880:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000a884:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a888:	ec f8 00 00 	ld.w	r8,r6[0]
8000a88c:	70 08       	ld.w	r8,r8[0x0]
8000a88e:	ee cc 00 74 	sub	r12,r7,116
8000a892:	20 7d       	sub	sp,28
8000a894:	1a 99       	mov	r9,sp
8000a896:	12 9a       	mov	r10,r9
8000a898:	f0 cb f2 54 	sub	r11,r8,-3500
8000a89c:	f4 c8 00 00 	sub	r8,r10,0
8000a8a0:	f6 c9 00 00 	sub	r9,r11,0
8000a8a4:	72 0e       	ld.w	lr,r9[0x0]
8000a8a6:	91 0e       	st.w	r8[0x0],lr
8000a8a8:	72 1e       	ld.w	lr,r9[0x4]
8000a8aa:	91 1e       	st.w	r8[0x4],lr
8000a8ac:	72 2e       	ld.w	lr,r9[0x8]
8000a8ae:	91 2e       	st.w	r8[0x8],lr
8000a8b0:	72 39       	ld.w	r9,r9[0xc]
8000a8b2:	91 39       	st.w	r8[0xc],r9
8000a8b4:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a8b8:	f4 e9 00 10 	st.d	r10[16],r8
8000a8bc:	76 68       	ld.w	r8,r11[0x18]
8000a8be:	95 68       	st.w	r10[0x18],r8
8000a8c0:	20 7d       	sub	sp,28
8000a8c2:	1a 98       	mov	r8,sp
8000a8c4:	10 9a       	mov	r10,r8
8000a8c6:	ee cb 00 44 	sub	r11,r7,68
8000a8ca:	f4 c8 00 00 	sub	r8,r10,0
8000a8ce:	f6 c9 00 00 	sub	r9,r11,0
8000a8d2:	72 0e       	ld.w	lr,r9[0x0]
8000a8d4:	91 0e       	st.w	r8[0x0],lr
8000a8d6:	72 1e       	ld.w	lr,r9[0x4]
8000a8d8:	91 1e       	st.w	r8[0x4],lr
8000a8da:	72 2e       	ld.w	lr,r9[0x8]
8000a8dc:	91 2e       	st.w	r8[0x8],lr
8000a8de:	72 39       	ld.w	r9,r9[0xc]
8000a8e0:	91 39       	st.w	r8[0xc],r9
8000a8e2:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a8e6:	f4 e9 00 10 	st.d	r10[16],r8
8000a8ea:	76 68       	ld.w	r8,r11[0x18]
8000a8ec:	95 68       	st.w	r10[0x18],r8
8000a8ee:	f0 16 00 7c 	mcall	r6[496]
8000a8f2:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a8f4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a8f8:	10 9c       	mov	r12,r8
8000a8fa:	f0 16 00 02 	mcall	r6[8]
8000a8fe:	14 98       	mov	r8,r10
8000a900:	16 99       	mov	r9,r11
8000a902:	10 9a       	mov	r10,r8
8000a904:	12 9b       	mov	r11,r9
8000a906:	30 0c       	mov	r12,0
8000a908:	f0 16 00 ce 	mcall	r6[824]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000a90c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000a910:	10 9c       	mov	r12,r8
8000a912:	f0 16 00 02 	mcall	r6[8]
8000a916:	14 98       	mov	r8,r10
8000a918:	16 99       	mov	r9,r11
8000a91a:	10 9a       	mov	r10,r8
8000a91c:	12 9b       	mov	r11,r9
8000a91e:	30 1c       	mov	r12,1
8000a920:	f0 16 00 ce 	mcall	r6[824]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000a924:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a928:	10 9c       	mov	r12,r8
8000a92a:	f0 16 00 02 	mcall	r6[8]
8000a92e:	14 98       	mov	r8,r10
8000a930:	16 99       	mov	r9,r11
8000a932:	10 9a       	mov	r10,r8
8000a934:	12 9b       	mov	r11,r9
8000a936:	30 2c       	mov	r12,2
8000a938:	f0 16 00 ce 	mcall	r6[824]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000a93c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a940:	70 08       	ld.w	r8,r8[0x0]
8000a942:	f0 f8 0b 28 	ld.w	r8,r8[2856]
8000a946:	10 9b       	mov	r11,r8
8000a948:	30 0c       	mov	r12,0
8000a94a:	f0 16 00 aa 	mcall	r6[680]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000a94e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a952:	70 08       	ld.w	r8,r8[0x0]
8000a954:	f0 f8 0b 2c 	ld.w	r8,r8[2860]
8000a958:	10 9b       	mov	r11,r8
8000a95a:	30 1c       	mov	r12,1
8000a95c:	f0 16 00 aa 	mcall	r6[680]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000a960:	ec f8 00 00 	ld.w	r8,r6[0]
8000a964:	70 08       	ld.w	r8,r8[0x0]
8000a966:	f0 f8 0b 30 	ld.w	r8,r8[2864]
8000a96a:	10 9b       	mov	r11,r8
8000a96c:	30 2c       	mov	r12,2
8000a96e:	f0 16 00 aa 	mcall	r6[680]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000a972:	2e 3d       	sub	sp,-116
8000a974:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a978:	80 00       	ld.sh	r0,r0[0x0]
8000a97a:	a6 00       	st.h	r3[0x0],r0

8000a97c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a97c:	eb cd 40 80 	pushm	r7,lr
8000a980:	1a 97       	mov	r7,sp
8000a982:	20 3d       	sub	sp,12
8000a984:	ef 4c ff f8 	st.w	r7[-8],r12
8000a988:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a98c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a990:	70 09       	ld.w	r9,r8[0x0]
8000a992:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a996:	70 08       	ld.w	r8,r8[0x0]
8000a998:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a99c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9a0:	2f c8       	sub	r8,-4
8000a9a2:	70 0a       	ld.w	r10,r8[0x0]
8000a9a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9a8:	2f c8       	sub	r8,-4
8000a9aa:	70 08       	ld.w	r8,r8[0x0]
8000a9ac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a9b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a9b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9b8:	2f 88       	sub	r8,-8
8000a9ba:	70 0a       	ld.w	r10,r8[0x0]
8000a9bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9c0:	2f 88       	sub	r8,-8
8000a9c2:	70 08       	ld.w	r8,r8[0x0]
8000a9c4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a9c8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a9cc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a9d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a9d4:	10 9c       	mov	r12,r8
8000a9d6:	2f dd       	sub	sp,-12
8000a9d8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a9dc <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a9dc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a9e0:	1a 97       	mov	r7,sp
8000a9e2:	20 7d       	sub	sp,28
8000a9e4:	4b d6       	lddpc	r6,8000aad8 <quat_multi+0xfc>
8000a9e6:	1e 26       	rsub	r6,pc
8000a9e8:	ee c8 ff ec 	sub	r8,r7,-20
8000a9ec:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a9ee:	70 2a       	ld.w	r10,r8[0x8]
8000a9f0:	70 79       	ld.w	r9,r8[0x1c]
8000a9f2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a9f6:	70 3b       	ld.w	r11,r8[0xc]
8000a9f8:	70 69       	ld.w	r9,r8[0x18]
8000a9fa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a9fe:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa02:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000aa06:	70 3a       	ld.w	r10,r8[0xc]
8000aa08:	70 59       	ld.w	r9,r8[0x14]
8000aa0a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa0e:	70 1b       	ld.w	r11,r8[0x4]
8000aa10:	70 79       	ld.w	r9,r8[0x1c]
8000aa12:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa16:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa1a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000aa1e:	70 1a       	ld.w	r10,r8[0x4]
8000aa20:	70 69       	ld.w	r9,r8[0x18]
8000aa22:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa26:	70 2b       	ld.w	r11,r8[0x8]
8000aa28:	70 59       	ld.w	r9,r8[0x14]
8000aa2a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa2e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa32:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000aa36:	70 4a       	ld.w	r10,r8[0x10]
8000aa38:	70 19       	ld.w	r9,r8[0x4]
8000aa3a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa3e:	70 0b       	ld.w	r11,r8[0x0]
8000aa40:	70 59       	ld.w	r9,r8[0x14]
8000aa42:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa46:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa4e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa52:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000aa56:	70 4a       	ld.w	r10,r8[0x10]
8000aa58:	70 29       	ld.w	r9,r8[0x8]
8000aa5a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa5e:	70 0b       	ld.w	r11,r8[0x0]
8000aa60:	70 69       	ld.w	r9,r8[0x18]
8000aa62:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa66:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa6e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa72:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000aa76:	70 4a       	ld.w	r10,r8[0x10]
8000aa78:	70 39       	ld.w	r9,r8[0xc]
8000aa7a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa7e:	70 0b       	ld.w	r11,r8[0x0]
8000aa80:	70 79       	ld.w	r9,r8[0x1c]
8000aa82:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa86:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa8e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa92:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000aa96:	70 0a       	ld.w	r10,r8[0x0]
8000aa98:	70 49       	ld.w	r9,r8[0x10]
8000aa9a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000aa9e:	f0 c9 ff f0 	sub	r9,r8,-16
8000aaa2:	2f c9       	sub	r9,-4
8000aaa4:	2f c8       	sub	r8,-4
8000aaa6:	12 9b       	mov	r11,r9
8000aaa8:	10 9c       	mov	r12,r8
8000aaaa:	c6 9f       	rcall	8000a97c <scalar_product>
8000aaac:	18 98       	mov	r8,r12
8000aaae:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000aab2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000aab6:	0a 98       	mov	r8,r5
8000aab8:	ee c9 00 1c 	sub	r9,r7,28
8000aabc:	20 08       	sub	r8,0
8000aabe:	20 09       	sub	r9,0
8000aac0:	72 0a       	ld.w	r10,r9[0x0]
8000aac2:	91 0a       	st.w	r8[0x0],r10
8000aac4:	72 1a       	ld.w	r10,r9[0x4]
8000aac6:	91 1a       	st.w	r8[0x4],r10
8000aac8:	72 2a       	ld.w	r10,r9[0x8]
8000aaca:	91 2a       	st.w	r8[0x8],r10
8000aacc:	72 39       	ld.w	r9,r9[0xc]
8000aace:	91 39       	st.w	r8[0xc],r9
}
8000aad0:	0a 9c       	mov	r12,r5
8000aad2:	2f 9d       	sub	sp,-28
8000aad4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000aad8:	80 00       	ld.sh	r0,r0[0x0]
8000aada:	a8 6a       	st.h	r4[0xc],r10

8000aadc <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000aadc:	eb cd 40 80 	pushm	r7,lr
8000aae0:	1a 97       	mov	r7,sp
8000aae2:	20 5d       	sub	sp,20
8000aae4:	ee c9 ff f8 	sub	r9,r7,-8
8000aae8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000aaea:	72 08       	ld.w	r8,r9[0x0]
8000aaec:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000aaf0:	30 08       	mov	r8,0
8000aaf2:	ef 48 ff fc 	st.w	r7[-4],r8
8000aaf6:	c1 58       	rjmp	8000ab20 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000aaf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aafc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ab00:	2f fb       	sub	r11,-1
8000ab02:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000ab06:	ee 1b 80 00 	eorh	r11,0x8000
8000ab0a:	2f f8       	sub	r8,-1
8000ab0c:	a3 68       	lsl	r8,0x2
8000ab0e:	ee 08 00 08 	add	r8,r7,r8
8000ab12:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000ab16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab1a:	2f f8       	sub	r8,-1
8000ab1c:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab24:	58 28       	cp.w	r8,2
8000ab26:	fe 9a ff e9 	brle	8000aaf8 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000ab2a:	14 98       	mov	r8,r10
8000ab2c:	ee c9 00 14 	sub	r9,r7,20
8000ab30:	20 08       	sub	r8,0
8000ab32:	20 09       	sub	r9,0
8000ab34:	72 0b       	ld.w	r11,r9[0x0]
8000ab36:	91 0b       	st.w	r8[0x0],r11
8000ab38:	72 1b       	ld.w	r11,r9[0x4]
8000ab3a:	91 1b       	st.w	r8[0x4],r11
8000ab3c:	72 2b       	ld.w	r11,r9[0x8]
8000ab3e:	91 2b       	st.w	r8[0x8],r11
8000ab40:	72 39       	ld.w	r9,r9[0xc]
8000ab42:	91 39       	st.w	r8[0xc],r9
}
8000ab44:	14 9c       	mov	r12,r10
8000ab46:	2f bd       	sub	sp,-20
8000ab48:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab4c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000ab4c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ab50:	1a 97       	mov	r7,sp
8000ab52:	20 cd       	sub	sp,48
8000ab54:	4b c6       	lddpc	r6,8000ac44 <quat_global_to_local+0xf8>
8000ab56:	1e 26       	rsub	r6,pc
8000ab58:	ee c5 ff ec 	sub	r5,r7,-20
8000ab5c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ab5e:	ee ca 00 10 	sub	r10,r7,16
8000ab62:	20 4d       	sub	sp,16
8000ab64:	1a 98       	mov	r8,sp
8000ab66:	0a 99       	mov	r9,r5
8000ab68:	20 08       	sub	r8,0
8000ab6a:	20 09       	sub	r9,0
8000ab6c:	72 0b       	ld.w	r11,r9[0x0]
8000ab6e:	91 0b       	st.w	r8[0x0],r11
8000ab70:	72 1b       	ld.w	r11,r9[0x4]
8000ab72:	91 1b       	st.w	r8[0x4],r11
8000ab74:	72 2b       	ld.w	r11,r9[0x8]
8000ab76:	91 2b       	st.w	r8[0x8],r11
8000ab78:	72 39       	ld.w	r9,r9[0xc]
8000ab7a:	91 39       	st.w	r8[0xc],r9
8000ab7c:	14 9c       	mov	r12,r10
8000ab7e:	ca ff       	rcall	8000aadc <quat_inv>
8000ab80:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000ab82:	ee ca 00 20 	sub	r10,r7,32
8000ab86:	20 4d       	sub	sp,16
8000ab88:	1a 98       	mov	r8,sp
8000ab8a:	ea c9 ff f0 	sub	r9,r5,-16
8000ab8e:	20 08       	sub	r8,0
8000ab90:	20 09       	sub	r9,0
8000ab92:	72 0b       	ld.w	r11,r9[0x0]
8000ab94:	91 0b       	st.w	r8[0x0],r11
8000ab96:	72 1b       	ld.w	r11,r9[0x4]
8000ab98:	91 1b       	st.w	r8[0x4],r11
8000ab9a:	72 2b       	ld.w	r11,r9[0x8]
8000ab9c:	91 2b       	st.w	r8[0x8],r11
8000ab9e:	72 39       	ld.w	r9,r9[0xc]
8000aba0:	91 39       	st.w	r8[0xc],r9
8000aba2:	20 4d       	sub	sp,16
8000aba4:	1a 98       	mov	r8,sp
8000aba6:	ee c9 00 10 	sub	r9,r7,16
8000abaa:	20 08       	sub	r8,0
8000abac:	20 09       	sub	r9,0
8000abae:	72 0b       	ld.w	r11,r9[0x0]
8000abb0:	91 0b       	st.w	r8[0x0],r11
8000abb2:	72 1b       	ld.w	r11,r9[0x4]
8000abb4:	91 1b       	st.w	r8[0x4],r11
8000abb6:	72 2b       	ld.w	r11,r9[0x8]
8000abb8:	91 2b       	st.w	r8[0x8],r11
8000abba:	72 39       	ld.w	r9,r9[0xc]
8000abbc:	91 39       	st.w	r8[0xc],r9
8000abbe:	14 9c       	mov	r12,r10
8000abc0:	c0 ef       	rcall	8000a9dc <quat_multi>
8000abc2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000abc4:	ee ca 00 30 	sub	r10,r7,48
8000abc8:	20 4d       	sub	sp,16
8000abca:	1a 98       	mov	r8,sp
8000abcc:	0a 99       	mov	r9,r5
8000abce:	20 08       	sub	r8,0
8000abd0:	20 09       	sub	r9,0
8000abd2:	72 0b       	ld.w	r11,r9[0x0]
8000abd4:	91 0b       	st.w	r8[0x0],r11
8000abd6:	72 1b       	ld.w	r11,r9[0x4]
8000abd8:	91 1b       	st.w	r8[0x4],r11
8000abda:	72 2b       	ld.w	r11,r9[0x8]
8000abdc:	91 2b       	st.w	r8[0x8],r11
8000abde:	72 39       	ld.w	r9,r9[0xc]
8000abe0:	91 39       	st.w	r8[0xc],r9
8000abe2:	20 4d       	sub	sp,16
8000abe4:	1a 98       	mov	r8,sp
8000abe6:	ee c9 00 20 	sub	r9,r7,32
8000abea:	20 08       	sub	r8,0
8000abec:	20 09       	sub	r9,0
8000abee:	72 0b       	ld.w	r11,r9[0x0]
8000abf0:	91 0b       	st.w	r8[0x0],r11
8000abf2:	72 1b       	ld.w	r11,r9[0x4]
8000abf4:	91 1b       	st.w	r8[0x4],r11
8000abf6:	72 2b       	ld.w	r11,r9[0x8]
8000abf8:	91 2b       	st.w	r8[0x8],r11
8000abfa:	72 39       	ld.w	r9,r9[0xc]
8000abfc:	91 39       	st.w	r8[0xc],r9
8000abfe:	14 9c       	mov	r12,r10
8000ac00:	ce ee       	rcall	8000a9dc <quat_multi>
8000ac02:	2f 8d       	sub	sp,-32
8000ac04:	ee c8 00 20 	sub	r8,r7,32
8000ac08:	ee c9 00 30 	sub	r9,r7,48
8000ac0c:	20 08       	sub	r8,0
8000ac0e:	20 09       	sub	r9,0
8000ac10:	72 0a       	ld.w	r10,r9[0x0]
8000ac12:	91 0a       	st.w	r8[0x0],r10
8000ac14:	72 1a       	ld.w	r10,r9[0x4]
8000ac16:	91 1a       	st.w	r8[0x4],r10
8000ac18:	72 2a       	ld.w	r10,r9[0x8]
8000ac1a:	91 2a       	st.w	r8[0x8],r10
8000ac1c:	72 39       	ld.w	r9,r9[0xc]
8000ac1e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000ac20:	06 98       	mov	r8,r3
8000ac22:	ee c9 00 20 	sub	r9,r7,32
8000ac26:	20 08       	sub	r8,0
8000ac28:	20 09       	sub	r9,0
8000ac2a:	72 0a       	ld.w	r10,r9[0x0]
8000ac2c:	91 0a       	st.w	r8[0x0],r10
8000ac2e:	72 1a       	ld.w	r10,r9[0x4]
8000ac30:	91 1a       	st.w	r8[0x4],r10
8000ac32:	72 2a       	ld.w	r10,r9[0x8]
8000ac34:	91 2a       	st.w	r8[0x8],r10
8000ac36:	72 39       	ld.w	r9,r9[0xc]
8000ac38:	91 39       	st.w	r8[0xc],r9
}
8000ac3a:	06 9c       	mov	r12,r3
8000ac3c:	2f 4d       	sub	sp,-48
8000ac3e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ac42:	00 00       	add	r0,r0
8000ac44:	80 00       	ld.sh	r0,r0[0x0]
8000ac46:	a9 da       	cbr	r10,0x9

8000ac48 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000ac48:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ac4c:	1a 97       	mov	r7,sp
8000ac4e:	20 cd       	sub	sp,48
8000ac50:	4b c6       	lddpc	r6,8000ad40 <quat_local_to_global+0xf8>
8000ac52:	1e 26       	rsub	r6,pc
8000ac54:	ee c5 ff ec 	sub	r5,r7,-20
8000ac58:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ac5a:	ee ca 00 10 	sub	r10,r7,16
8000ac5e:	20 4d       	sub	sp,16
8000ac60:	1a 98       	mov	r8,sp
8000ac62:	0a 99       	mov	r9,r5
8000ac64:	20 08       	sub	r8,0
8000ac66:	20 09       	sub	r9,0
8000ac68:	72 0b       	ld.w	r11,r9[0x0]
8000ac6a:	91 0b       	st.w	r8[0x0],r11
8000ac6c:	72 1b       	ld.w	r11,r9[0x4]
8000ac6e:	91 1b       	st.w	r8[0x4],r11
8000ac70:	72 2b       	ld.w	r11,r9[0x8]
8000ac72:	91 2b       	st.w	r8[0x8],r11
8000ac74:	72 39       	ld.w	r9,r9[0xc]
8000ac76:	91 39       	st.w	r8[0xc],r9
8000ac78:	14 9c       	mov	r12,r10
8000ac7a:	c3 1f       	rcall	8000aadc <quat_inv>
8000ac7c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000ac7e:	ee ca 00 20 	sub	r10,r7,32
8000ac82:	20 4d       	sub	sp,16
8000ac84:	1a 98       	mov	r8,sp
8000ac86:	ea c9 ff f0 	sub	r9,r5,-16
8000ac8a:	20 08       	sub	r8,0
8000ac8c:	20 09       	sub	r9,0
8000ac8e:	72 0b       	ld.w	r11,r9[0x0]
8000ac90:	91 0b       	st.w	r8[0x0],r11
8000ac92:	72 1b       	ld.w	r11,r9[0x4]
8000ac94:	91 1b       	st.w	r8[0x4],r11
8000ac96:	72 2b       	ld.w	r11,r9[0x8]
8000ac98:	91 2b       	st.w	r8[0x8],r11
8000ac9a:	72 39       	ld.w	r9,r9[0xc]
8000ac9c:	91 39       	st.w	r8[0xc],r9
8000ac9e:	20 4d       	sub	sp,16
8000aca0:	1a 98       	mov	r8,sp
8000aca2:	0a 99       	mov	r9,r5
8000aca4:	20 08       	sub	r8,0
8000aca6:	20 09       	sub	r9,0
8000aca8:	72 0b       	ld.w	r11,r9[0x0]
8000acaa:	91 0b       	st.w	r8[0x0],r11
8000acac:	72 1b       	ld.w	r11,r9[0x4]
8000acae:	91 1b       	st.w	r8[0x4],r11
8000acb0:	72 2b       	ld.w	r11,r9[0x8]
8000acb2:	91 2b       	st.w	r8[0x8],r11
8000acb4:	72 39       	ld.w	r9,r9[0xc]
8000acb6:	91 39       	st.w	r8[0xc],r9
8000acb8:	14 9c       	mov	r12,r10
8000acba:	c9 1e       	rcall	8000a9dc <quat_multi>
8000acbc:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000acbe:	ee ca 00 30 	sub	r10,r7,48
8000acc2:	20 4d       	sub	sp,16
8000acc4:	1a 98       	mov	r8,sp
8000acc6:	ee c9 00 10 	sub	r9,r7,16
8000acca:	20 08       	sub	r8,0
8000accc:	20 09       	sub	r9,0
8000acce:	72 0b       	ld.w	r11,r9[0x0]
8000acd0:	91 0b       	st.w	r8[0x0],r11
8000acd2:	72 1b       	ld.w	r11,r9[0x4]
8000acd4:	91 1b       	st.w	r8[0x4],r11
8000acd6:	72 2b       	ld.w	r11,r9[0x8]
8000acd8:	91 2b       	st.w	r8[0x8],r11
8000acda:	72 39       	ld.w	r9,r9[0xc]
8000acdc:	91 39       	st.w	r8[0xc],r9
8000acde:	20 4d       	sub	sp,16
8000ace0:	1a 98       	mov	r8,sp
8000ace2:	ee c9 00 20 	sub	r9,r7,32
8000ace6:	20 08       	sub	r8,0
8000ace8:	20 09       	sub	r9,0
8000acea:	72 0b       	ld.w	r11,r9[0x0]
8000acec:	91 0b       	st.w	r8[0x0],r11
8000acee:	72 1b       	ld.w	r11,r9[0x4]
8000acf0:	91 1b       	st.w	r8[0x4],r11
8000acf2:	72 2b       	ld.w	r11,r9[0x8]
8000acf4:	91 2b       	st.w	r8[0x8],r11
8000acf6:	72 39       	ld.w	r9,r9[0xc]
8000acf8:	91 39       	st.w	r8[0xc],r9
8000acfa:	14 9c       	mov	r12,r10
8000acfc:	c7 0e       	rcall	8000a9dc <quat_multi>
8000acfe:	2f 8d       	sub	sp,-32
8000ad00:	ee c8 00 20 	sub	r8,r7,32
8000ad04:	ee c9 00 30 	sub	r9,r7,48
8000ad08:	20 08       	sub	r8,0
8000ad0a:	20 09       	sub	r9,0
8000ad0c:	72 0a       	ld.w	r10,r9[0x0]
8000ad0e:	91 0a       	st.w	r8[0x0],r10
8000ad10:	72 1a       	ld.w	r10,r9[0x4]
8000ad12:	91 1a       	st.w	r8[0x4],r10
8000ad14:	72 2a       	ld.w	r10,r9[0x8]
8000ad16:	91 2a       	st.w	r8[0x8],r10
8000ad18:	72 39       	ld.w	r9,r9[0xc]
8000ad1a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000ad1c:	06 98       	mov	r8,r3
8000ad1e:	ee c9 00 20 	sub	r9,r7,32
8000ad22:	20 08       	sub	r8,0
8000ad24:	20 09       	sub	r9,0
8000ad26:	72 0a       	ld.w	r10,r9[0x0]
8000ad28:	91 0a       	st.w	r8[0x0],r10
8000ad2a:	72 1a       	ld.w	r10,r9[0x4]
8000ad2c:	91 1a       	st.w	r8[0x4],r10
8000ad2e:	72 2a       	ld.w	r10,r9[0x8]
8000ad30:	91 2a       	st.w	r8[0x8],r10
8000ad32:	72 39       	ld.w	r9,r9[0xc]
8000ad34:	91 39       	st.w	r8[0xc],r9
}
8000ad36:	06 9c       	mov	r12,r3
8000ad38:	2f 4d       	sub	sp,-48
8000ad3a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ad3e:	00 00       	add	r0,r0
8000ad40:	80 00       	ld.sh	r0,r0[0x0]
8000ad42:	aa d6       	st.b	r5[0x5],r6

8000ad44 <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000ad44:	eb cd 40 c0 	pushm	r6-r7,lr
8000ad48:	1a 97       	mov	r7,sp
8000ad4a:	20 3d       	sub	sp,12
8000ad4c:	4a 66       	lddpc	r6,8000ade4 <init_pos_integration+0xa0>
8000ad4e:	1e 26       	rsub	r6,pc
8000ad50:	ef 4c ff fc 	st.w	r7[-4],r12
8000ad54:	ef 4b ff f8 	st.w	r7[-8],r11
8000ad58:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000ad5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad60:	30 08       	mov	r8,0
8000ad62:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000ad66:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad6a:	30 08       	mov	r8,0
8000ad6c:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000ad70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad74:	30 09       	mov	r9,0
8000ad76:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000ad78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad7c:	30 09       	mov	r9,0
8000ad7e:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000ad80:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad84:	fc 19 40 00 	movh	r9,0x4000
8000ad88:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000ad8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad8e:	fc 19 40 00 	movh	r9,0x4000
8000ad92:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000ad94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad98:	fc 19 3f 80 	movh	r9,0x3f80
8000ad9c:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000ad9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ada2:	fc 19 3f 80 	movh	r9,0x3f80
8000ada6:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000ada8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adac:	fc 19 3f 80 	movh	r9,0x3f80
8000adb0:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000adb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adb6:	fc 19 3f 00 	movh	r9,0x3f00
8000adba:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000adbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adc0:	fc 19 40 00 	movh	r9,0x4000
8000adc4:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000adc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adca:	fc 19 3f 80 	movh	r9,0x3f80
8000adce:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000add0:	ee fb ff f4 	ld.w	r11,r7[-12]
8000add4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000add8:	f0 16 00 e6 	mcall	r6[920]
}
8000addc:	2f dd       	sub	sp,-12
8000adde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ade2:	00 00       	add	r0,r0
8000ade4:	80 00       	ld.sh	r0,r0[0x0]
8000ade6:	ab d2       	cbr	r2,0xb
8000ade8:	47 50       	lddsp	r0,sp[0x1d4]
8000adea:	53 20       	stdsp	sp[0xc8],r0
8000adec:	70 6f       	ld.w	pc,r8[0x18]
8000adee:	73 69       	ld.w	r9,r9[0x58]
8000adf0:	74 69       	ld.w	r9,r10[0x18]
8000adf2:	6f 6e       	ld.w	lr,r7[0x58]
8000adf4:	20 69       	sub	r9,6
8000adf6:	6e 69       	ld.w	r9,r7[0x18]
8000adf8:	74 69       	ld.w	r9,r10[0x18]
8000adfa:	61 6c       	ld.w	r12,r0[0x58]
8000adfc:	69 7a       	ld.w	r10,r4[0x5c]
8000adfe:	65 64       	ld.w	r4,r2[0x58]
8000ae00:	21 0a       	sub	r10,16
	...

8000ae04 <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000ae04:	eb cd 40 c0 	pushm	r6-r7,lr
8000ae08:	1a 97       	mov	r7,sp
8000ae0a:	20 3d       	sub	sp,12
8000ae0c:	4d 16       	lddpc	r6,8000af50 <init_pos_gps+0x14c>
8000ae0e:	1e 26       	rsub	r6,pc
8000ae10:	ef 4c ff f8 	st.w	r7[-8],r12
8000ae14:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000ae18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae1c:	2e 08       	sub	r8,-32
8000ae1e:	10 9c       	mov	r12,r8
8000ae20:	f0 16 00 96 	mcall	r6[600]
8000ae24:	18 98       	mov	r8,r12
8000ae26:	58 08       	cp.w	r8,0
8000ae28:	e0 80 00 91 	breq	8000af4a <init_pos_gps+0x146>
8000ae2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae30:	f1 38 00 28 	ld.ub	r8,r8[40]
8000ae34:	ec 18 00 01 	eorl	r8,0x1
8000ae38:	5c 58       	castu.b	r8
8000ae3a:	e0 80 00 88 	breq	8000af4a <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000ae3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ae42:	30 18       	mov	r8,1
8000ae44:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000ae48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae4c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000ae50:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae54:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000ae58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae5c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ae60:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae64:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000ae68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae6c:	70 49       	ld.w	r9,r8[0x10]
8000ae6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae72:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000ae76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae7a:	71 19       	ld.w	r9,r8[0x44]
8000ae7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae80:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000ae84:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ae88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae8c:	f2 cb ff 70 	sub	r11,r9,-144
8000ae90:	f0 ca ff a0 	sub	r10,r8,-96
8000ae94:	f6 c8 00 00 	sub	r8,r11,0
8000ae98:	f4 c9 00 00 	sub	r9,r10,0
8000ae9c:	72 0c       	ld.w	r12,r9[0x0]
8000ae9e:	91 0c       	st.w	r8[0x0],r12
8000aea0:	72 1c       	ld.w	r12,r9[0x4]
8000aea2:	91 1c       	st.w	r8[0x4],r12
8000aea4:	72 2c       	ld.w	r12,r9[0x8]
8000aea6:	91 2c       	st.w	r8[0x8],r12
8000aea8:	72 39       	ld.w	r9,r9[0xc]
8000aeaa:	91 39       	st.w	r8[0xc],r9
8000aeac:	f6 c8 ff f0 	sub	r8,r11,-16
8000aeb0:	f4 c9 ff f0 	sub	r9,r10,-16
8000aeb4:	72 0c       	ld.w	r12,r9[0x0]
8000aeb6:	91 0c       	st.w	r8[0x0],r12
8000aeb8:	72 1c       	ld.w	r12,r9[0x4]
8000aeba:	91 1c       	st.w	r8[0x4],r12
8000aebc:	72 2c       	ld.w	r12,r9[0x8]
8000aebe:	91 2c       	st.w	r8[0x8],r12
8000aec0:	72 39       	ld.w	r9,r9[0xc]
8000aec2:	91 39       	st.w	r8[0xc],r9
8000aec4:	f6 c8 ff e0 	sub	r8,r11,-32
8000aec8:	f4 c9 ff e0 	sub	r9,r10,-32
8000aecc:	72 0a       	ld.w	r10,r9[0x0]
8000aece:	91 0a       	st.w	r8[0x0],r10
8000aed0:	72 1a       	ld.w	r10,r9[0x4]
8000aed2:	91 1a       	st.w	r8[0x4],r10
8000aed4:	72 2a       	ld.w	r10,r9[0x8]
8000aed6:	91 2a       	st.w	r8[0x8],r10
8000aed8:	72 39       	ld.w	r9,r9[0xc]
8000aeda:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000aedc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aee0:	30 09       	mov	r9,0
8000aee2:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000aee6:	30 08       	mov	r8,0
8000aee8:	ef 48 ff fc 	st.w	r7[-4],r8
8000aeec:	c2 68       	rjmp	8000af38 <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000aeee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aef6:	2e f9       	sub	r9,-17
8000aef8:	30 0a       	mov	r10,0
8000aefa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000aefe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af06:	2e b9       	sub	r9,-21
8000af08:	30 0a       	mov	r10,0
8000af0a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000af0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af16:	2e 89       	sub	r9,-24
8000af18:	30 0a       	mov	r10,0
8000af1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000af1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af26:	2f 29       	sub	r9,-14
8000af28:	30 0a       	mov	r10,0
8000af2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000af2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af32:	2f f8       	sub	r8,-1
8000af34:	ef 48 ff fc 	st.w	r7[-4],r8
8000af38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af3c:	58 28       	cp.w	r8,2
8000af3e:	fe 9a ff d8 	brle	8000aeee <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000af42:	fe cc 01 5a 	sub	r12,pc,346
8000af46:	f0 16 00 01 	mcall	r6[4]
	}
}
8000af4a:	2f dd       	sub	sp,-12
8000af4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000af50:	80 00       	ld.sh	r0,r0[0x0]
8000af52:	ac 92       	st.b	r6[0x1],r2
8000af54:	4f 66       	lddpc	r6,8000b12c <position_reset_home_altitude+0xac>
8000af56:	66 73       	ld.w	r3,r3[0x1c]
8000af58:	65 74       	ld.w	r4,r2[0x5c]
8000af5a:	20 6f       	sub	pc,6
8000af5c:	66 20       	ld.w	r0,r3[0x8]
8000af5e:	74 68       	ld.w	r8,r10[0x18]
8000af60:	65 20       	ld.w	r0,r2[0x48]
8000af62:	62 61       	ld.w	r1,r1[0x18]
8000af64:	72 6f       	ld.w	pc,r9[0x18]
8000af66:	6d 65       	ld.w	r5,r6[0x58]
8000af68:	74 65       	ld.w	r5,r10[0x18]
8000af6a:	72 20       	ld.w	r0,r9[0x8]
8000af6c:	73 65       	ld.w	r5,r9[0x58]
8000af6e:	74 20       	ld.w	r0,r10[0x8]
8000af70:	74 6f       	ld.w	pc,r10[0x18]
8000af72:	20 74       	sub	r4,7
8000af74:	68 65       	ld.w	r5,r4[0x18]
8000af76:	20 47       	sub	r7,4
8000af78:	50 53       	stdsp	sp[0x14],r3
8000af7a:	20 61       	sub	r1,6
8000af7c:	6c 74       	ld.w	r4,r6[0x1c]
8000af7e:	69 74       	ld.w	r4,r4[0x5c]
8000af80:	75 64       	ld.w	r4,r10[0x58]
8000af82:	65 2c       	ld.w	r12,r2[0x48]
8000af84:	20 6f       	sub	pc,6
8000af86:	66 66       	ld.w	r6,r3[0x18]
8000af88:	73 65       	ld.w	r5,r9[0x58]
8000af8a:	74 20       	ld.w	r0,r10[0x8]
8000af8c:	76 61       	ld.w	r1,r11[0x18]
8000af8e:	6c 75       	ld.w	r5,r6[0x1c]
8000af90:	65 20       	ld.w	r0,r2[0x48]
8000af92:	6f 66       	ld.w	r6,r7[0x58]
8000af94:	3a 00       	mov	r0,-96
8000af96:	00 00       	add	r0,r0
8000af98:	20 3d       	sub	sp,12
8000af9a:	20 2d       	sub	sp,8
8000af9c:	00 00       	add	r0,r0
8000af9e:	00 00       	add	r0,r0
8000afa0:	20 2d       	sub	sp,8
8000afa2:	20 00       	sub	r0,0
8000afa4:	20 2b       	sub	r11,2
8000afa6:	20 00       	sub	r0,0
8000afa8:	0a 00       	add	r0,r5

8000afaa <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000afaa:	eb cd 40 c0 	pushm	r6-r7,lr
8000afae:	1a 97       	mov	r7,sp
8000afb0:	20 3d       	sub	sp,12
8000afb2:	4b 36       	lddpc	r6,8000b07c <init_barometer_offset+0xd2>
8000afb4:	1e 26       	rsub	r6,pc
8000afb6:	ef 4c ff f8 	st.w	r7[-8],r12
8000afba:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000afbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afc2:	2d c8       	sub	r8,-36
8000afc4:	10 9c       	mov	r12,r8
8000afc6:	f0 16 00 e7 	mcall	r6[924]
8000afca:	18 98       	mov	r8,r12
8000afcc:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000afd0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000afd4:	30 08       	mov	r8,0
8000afd6:	f0 09 18 00 	cp.b	r9,r8
8000afda:	c4 e0       	breq	8000b076 <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000afdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afe0:	70 79       	ld.w	r9,r8[0x1c]
8000afe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afe6:	f0 f8 00 80 	ld.w	r8,r8[128]
8000afea:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000afee:	10 99       	mov	r9,r8
8000aff0:	ee 19 80 00 	eorh	r9,0x8000
8000aff4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aff8:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000affa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000affe:	30 18       	mov	r8,1
8000b000:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b004:	fe cc 00 b0 	sub	r12,pc,176
8000b008:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b00c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b010:	70 88       	ld.w	r8,r8[0x20]
8000b012:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b016:	30 ab       	mov	r11,10
8000b018:	10 9c       	mov	r12,r8
8000b01a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b01e:	fe cc 00 86 	sub	r12,pc,134
8000b022:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b02a:	70 78       	ld.w	r8,r8[0x1c]
8000b02c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b030:	30 ab       	mov	r11,10
8000b032:	10 9c       	mov	r12,r8
8000b034:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b038:	fe cc 00 98 	sub	r12,pc,152
8000b03c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b040:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b044:	71 a8       	ld.w	r8,r8[0x68]
8000b046:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b04a:	30 ab       	mov	r11,10
8000b04c:	10 9c       	mov	r12,r8
8000b04e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b052:	fe cc 00 ae 	sub	r12,pc,174
8000b056:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b05a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b05e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b062:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b066:	30 ab       	mov	r11,10
8000b068:	10 9c       	mov	r12,r8
8000b06a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b06e:	fe cc 00 c6 	sub	r12,pc,198
8000b072:	f0 16 00 01 	mcall	r6[4]
	}
}
8000b076:	2f dd       	sub	sp,-12
8000b078:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b07c:	80 00       	ld.sh	r0,r0[0x0]
8000b07e:	ae 38       	st.h	r7[0x6],r8

8000b080 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000b080:	eb cd 40 c0 	pushm	r6-r7,lr
8000b084:	1a 97       	mov	r7,sp
8000b086:	20 4d       	sub	sp,16
8000b088:	4f 06       	lddpc	r6,8000b248 <position_reset_home_altitude+0x1c8>
8000b08a:	1e 26       	rsub	r6,pc
8000b08c:	ef 4c ff f8 	st.w	r7[-8],r12
8000b090:	ef 4b ff f4 	st.w	r7[-12],r11
8000b094:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000b098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b09c:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b0a0:	58 08       	cp.w	r8,0
8000b0a2:	c4 b0       	breq	8000b138 <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000b0a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0a8:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b0ac:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b0b0:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000b0b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0b8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b0bc:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b0c0:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000b0c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0c8:	70 49       	ld.w	r9,r8[0x10]
8000b0ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0ce:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000b0d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0d6:	71 19       	ld.w	r9,r8[0x44]
8000b0d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0dc:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000b0e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b0e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0e8:	f2 cb ff 70 	sub	r11,r9,-144
8000b0ec:	f0 ca ff a0 	sub	r10,r8,-96
8000b0f0:	f6 c8 00 00 	sub	r8,r11,0
8000b0f4:	f4 c9 00 00 	sub	r9,r10,0
8000b0f8:	72 0c       	ld.w	r12,r9[0x0]
8000b0fa:	91 0c       	st.w	r8[0x0],r12
8000b0fc:	72 1c       	ld.w	r12,r9[0x4]
8000b0fe:	91 1c       	st.w	r8[0x4],r12
8000b100:	72 2c       	ld.w	r12,r9[0x8]
8000b102:	91 2c       	st.w	r8[0x8],r12
8000b104:	72 39       	ld.w	r9,r9[0xc]
8000b106:	91 39       	st.w	r8[0xc],r9
8000b108:	f6 c8 ff f0 	sub	r8,r11,-16
8000b10c:	f4 c9 ff f0 	sub	r9,r10,-16
8000b110:	72 0c       	ld.w	r12,r9[0x0]
8000b112:	91 0c       	st.w	r8[0x0],r12
8000b114:	72 1c       	ld.w	r12,r9[0x4]
8000b116:	91 1c       	st.w	r8[0x4],r12
8000b118:	72 2c       	ld.w	r12,r9[0x8]
8000b11a:	91 2c       	st.w	r8[0x8],r12
8000b11c:	72 39       	ld.w	r9,r9[0xc]
8000b11e:	91 39       	st.w	r8[0xc],r9
8000b120:	f6 c8 ff e0 	sub	r8,r11,-32
8000b124:	f4 c9 ff e0 	sub	r9,r10,-32
8000b128:	72 0a       	ld.w	r10,r9[0x0]
8000b12a:	91 0a       	st.w	r8[0x0],r10
8000b12c:	72 1a       	ld.w	r10,r9[0x4]
8000b12e:	91 1a       	st.w	r8[0x4],r10
8000b130:	72 2a       	ld.w	r10,r9[0x8]
8000b132:	91 2a       	st.w	r8[0x8],r10
8000b134:	72 39       	ld.w	r9,r9[0xc]
8000b136:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000b138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b13c:	70 79       	ld.w	r9,r8[0x1c]
8000b13e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b142:	70 88       	ld.w	r8,r8[0x20]
8000b144:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b148:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b14c:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b150:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b154:	10 99       	mov	r9,r8
8000b156:	ee 19 80 00 	eorh	r9,0x8000
8000b15a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b15e:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000b160:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b164:	30 18       	mov	r8,1
8000b166:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b16a:	fe cc 02 16 	sub	r12,pc,534
8000b16e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b172:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b176:	70 88       	ld.w	r8,r8[0x20]
8000b178:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b17c:	30 ab       	mov	r11,10
8000b17e:	10 9c       	mov	r12,r8
8000b180:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b184:	fe cc 01 ec 	sub	r12,pc,492
8000b188:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b18c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b190:	70 78       	ld.w	r8,r8[0x1c]
8000b192:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b196:	30 ab       	mov	r11,10
8000b198:	10 9c       	mov	r12,r8
8000b19a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b19e:	fe cc 01 fe 	sub	r12,pc,510
8000b1a2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b1a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1aa:	71 a8       	ld.w	r8,r8[0x68]
8000b1ac:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1b0:	30 ab       	mov	r11,10
8000b1b2:	10 9c       	mov	r12,r8
8000b1b4:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b1b8:	fe cc 02 14 	sub	r12,pc,532
8000b1bc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1c4:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b1c8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1cc:	30 ab       	mov	r11,10
8000b1ce:	10 9c       	mov	r12,r8
8000b1d0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b1d4:	fe cc 02 2c 	sub	r12,pc,556
8000b1d8:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000b1dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1e0:	30 09       	mov	r9,0
8000b1e2:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000b1e6:	30 08       	mov	r8,0
8000b1e8:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1ec:	c2 68       	rjmp	8000b238 <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000b1ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b1f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1f6:	2e f9       	sub	r9,-17
8000b1f8:	30 0a       	mov	r10,0
8000b1fa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000b1fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b202:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b206:	2e b9       	sub	r9,-21
8000b208:	30 0a       	mov	r10,0
8000b20a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000b20e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b212:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b216:	2e 89       	sub	r9,-24
8000b218:	30 0a       	mov	r10,0
8000b21a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000b21e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b222:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b226:	2f 29       	sub	r9,-14
8000b228:	30 0a       	mov	r10,0
8000b22a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000b22e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b232:	2f f8       	sub	r8,-1
8000b234:	ef 48 ff fc 	st.w	r7[-4],r8
8000b238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b23c:	58 28       	cp.w	r8,2
8000b23e:	fe 9a ff d8 	brle	8000b1ee <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000b242:	2f cd       	sub	sp,-16
8000b244:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b248:	80 00       	ld.sh	r0,r0[0x0]
8000b24a:	af 0e       	ld.d	lr,r7

8000b24c <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000b24c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000b250:	1a 97       	mov	r7,sp
8000b252:	21 fd       	sub	sp,124
8000b254:	fe f6 03 64 	ld.w	r6,pc[868]
8000b258:	1e 26       	rsub	r6,pc
8000b25a:	ef 4c ff 9c 	st.w	r7[-100],r12
8000b25e:	ef 4b ff 98 	st.w	r7[-104],r11
8000b262:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000b266:	30 08       	mov	r8,0
8000b268:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000b26c:	30 08       	mov	r8,0
8000b26e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b272:	c1 58       	rjmp	8000b29c <position_integration+0x50>
8000b274:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b278:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b27c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b280:	2f 2a       	sub	r10,-14
8000b282:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000b286:	2f f8       	sub	r8,-1
8000b288:	a3 68       	lsl	r8,0x2
8000b28a:	ee 08 00 08 	add	r8,r7,r8
8000b28e:	f1 49 ff dc 	st.w	r8[-36],r9
8000b292:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b296:	2f f8       	sub	r8,-1
8000b298:	ef 48 ff fc 	st.w	r7[-4],r8
8000b29c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b2a0:	58 28       	cp.w	r8,2
8000b2a2:	fe 9a ff e9 	brle	8000b274 <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000b2a6:	ee ca 00 7c 	sub	r10,r7,124
8000b2aa:	20 4d       	sub	sp,16
8000b2ac:	1a 98       	mov	r8,sp
8000b2ae:	ee c9 00 24 	sub	r9,r7,36
8000b2b2:	20 08       	sub	r8,0
8000b2b4:	20 09       	sub	r9,0
8000b2b6:	72 0b       	ld.w	r11,r9[0x0]
8000b2b8:	91 0b       	st.w	r8[0x0],r11
8000b2ba:	72 1b       	ld.w	r11,r9[0x4]
8000b2bc:	91 1b       	st.w	r8[0x4],r11
8000b2be:	72 2b       	ld.w	r11,r9[0x8]
8000b2c0:	91 2b       	st.w	r8[0x8],r11
8000b2c2:	72 39       	ld.w	r9,r9[0xc]
8000b2c4:	91 39       	st.w	r8[0xc],r9
8000b2c6:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b2ca:	20 4d       	sub	sp,16
8000b2cc:	1a 98       	mov	r8,sp
8000b2ce:	20 08       	sub	r8,0
8000b2d0:	20 09       	sub	r9,0
8000b2d2:	72 0b       	ld.w	r11,r9[0x0]
8000b2d4:	91 0b       	st.w	r8[0x0],r11
8000b2d6:	72 1b       	ld.w	r11,r9[0x4]
8000b2d8:	91 1b       	st.w	r8[0x4],r11
8000b2da:	72 2b       	ld.w	r11,r9[0x8]
8000b2dc:	91 2b       	st.w	r8[0x8],r11
8000b2de:	72 39       	ld.w	r9,r9[0xc]
8000b2e0:	91 39       	st.w	r8[0xc],r9
8000b2e2:	14 9c       	mov	r12,r10
8000b2e4:	fe b0 fc 34 	rcall	8000ab4c <quat_global_to_local>
8000b2e8:	2f 8d       	sub	sp,-32
8000b2ea:	ee c8 00 14 	sub	r8,r7,20
8000b2ee:	ee c9 00 7c 	sub	r9,r7,124
8000b2f2:	20 08       	sub	r8,0
8000b2f4:	20 09       	sub	r9,0
8000b2f6:	72 0a       	ld.w	r10,r9[0x0]
8000b2f8:	91 0a       	st.w	r8[0x0],r10
8000b2fa:	72 1a       	ld.w	r10,r9[0x4]
8000b2fc:	91 1a       	st.w	r8[0x4],r10
8000b2fe:	72 2a       	ld.w	r10,r9[0x8]
8000b300:	91 2a       	st.w	r8[0x8],r10
8000b302:	72 39       	ld.w	r9,r9[0xc]
8000b304:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000b306:	30 08       	mov	r8,0
8000b308:	ef 48 ff fc 	st.w	r7[-4],r8
8000b30c:	c8 c8       	rjmp	8000b424 <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000b30e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b312:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b316:	2f f8       	sub	r8,-1
8000b318:	a3 68       	lsl	r8,0x2
8000b31a:	ee 08 00 08 	add	r8,r7,r8
8000b31e:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000b322:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b326:	2f 59       	sub	r9,-11
8000b328:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000b32c:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b330:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b334:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b338:	2d f9       	sub	r9,-33
8000b33a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b33e:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b342:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b346:	2f ba       	sub	r10,-5
8000b348:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b34c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b350:	10 9c       	mov	r12,r8
8000b352:	f0 16 00 02 	mcall	r6[8]
8000b356:	e0 68 85 1f 	mov	r8,34079
8000b35a:	ea 18 51 eb 	orh	r8,0x51eb
8000b35e:	e0 69 9e b8 	mov	r9,40632
8000b362:	ea 19 40 23 	orh	r9,0x4023
8000b366:	f0 16 00 03 	mcall	r6[12]
8000b36a:	14 98       	mov	r8,r10
8000b36c:	16 99       	mov	r9,r11
8000b36e:	10 9a       	mov	r10,r8
8000b370:	12 9b       	mov	r11,r9
8000b372:	f0 16 00 08 	mcall	r6[32]
8000b376:	18 9a       	mov	r10,r12
8000b378:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b37c:	ea c9 ff d0 	sub	r9,r5,-48
8000b380:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000b384:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b388:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b38c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b390:	2f 59       	sub	r9,-11
8000b392:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b396:	10 9c       	mov	r12,r8
8000b398:	f0 16 00 02 	mcall	r6[8]
8000b39c:	14 92       	mov	r2,r10
8000b39e:	16 93       	mov	r3,r11
8000b3a0:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b3a4:	f0 16 00 02 	mcall	r6[8]
8000b3a8:	30 08       	mov	r8,0
8000b3aa:	fc 19 80 00 	movh	r9,0x8000
8000b3ae:	f0 16 00 03 	mcall	r6[12]
8000b3b2:	14 98       	mov	r8,r10
8000b3b4:	16 99       	mov	r9,r11
8000b3b6:	10 9a       	mov	r10,r8
8000b3b8:	12 9b       	mov	r11,r9
8000b3ba:	30 08       	mov	r8,0
8000b3bc:	fc 19 3f f0 	movh	r9,0x3ff0
8000b3c0:	f0 16 00 05 	mcall	r6[20]
8000b3c4:	14 98       	mov	r8,r10
8000b3c6:	16 99       	mov	r9,r11
8000b3c8:	04 9a       	mov	r10,r2
8000b3ca:	06 9b       	mov	r11,r3
8000b3cc:	f0 16 00 03 	mcall	r6[12]
8000b3d0:	14 98       	mov	r8,r10
8000b3d2:	16 99       	mov	r9,r11
8000b3d4:	10 92       	mov	r2,r8
8000b3d6:	12 93       	mov	r3,r9
8000b3d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3dc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b3e0:	2d 09       	sub	r9,-48
8000b3e2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b3e6:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b3ea:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b3ee:	10 9c       	mov	r12,r8
8000b3f0:	f0 16 00 02 	mcall	r6[8]
8000b3f4:	14 98       	mov	r8,r10
8000b3f6:	16 99       	mov	r9,r11
8000b3f8:	04 9a       	mov	r10,r2
8000b3fa:	06 9b       	mov	r11,r3
8000b3fc:	f0 16 00 05 	mcall	r6[20]
8000b400:	14 98       	mov	r8,r10
8000b402:	16 99       	mov	r9,r11
8000b404:	10 9a       	mov	r10,r8
8000b406:	12 9b       	mov	r11,r9
8000b408:	f0 16 00 08 	mcall	r6[32]
8000b40c:	18 9a       	mov	r10,r12
8000b40e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b412:	ea c9 ff f5 	sub	r9,r5,-11
8000b416:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000b41a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b41e:	2f f8       	sub	r8,-1
8000b420:	ef 48 ff fc 	st.w	r7[-4],r8
8000b424:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b428:	58 28       	cp.w	r8,2
8000b42a:	fe 9a ff 72 	brle	8000b30e <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000b42e:	30 08       	mov	r8,0
8000b430:	ef 48 ff ec 	st.w	r7[-20],r8
8000b434:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b438:	70 b8       	ld.w	r8,r8[0x2c]
8000b43a:	ef 48 ff f0 	st.w	r7[-16],r8
8000b43e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b442:	70 c8       	ld.w	r8,r8[0x30]
8000b444:	ef 48 ff f4 	st.w	r7[-12],r8
8000b448:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b44c:	70 d8       	ld.w	r8,r8[0x34]
8000b44e:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000b452:	ee ca 00 7c 	sub	r10,r7,124
8000b456:	20 4d       	sub	sp,16
8000b458:	1a 98       	mov	r8,sp
8000b45a:	ee c9 00 14 	sub	r9,r7,20
8000b45e:	20 08       	sub	r8,0
8000b460:	20 09       	sub	r9,0
8000b462:	72 0b       	ld.w	r11,r9[0x0]
8000b464:	91 0b       	st.w	r8[0x0],r11
8000b466:	72 1b       	ld.w	r11,r9[0x4]
8000b468:	91 1b       	st.w	r8[0x4],r11
8000b46a:	72 2b       	ld.w	r11,r9[0x8]
8000b46c:	91 2b       	st.w	r8[0x8],r11
8000b46e:	72 39       	ld.w	r9,r9[0xc]
8000b470:	91 39       	st.w	r8[0xc],r9
8000b472:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b476:	20 4d       	sub	sp,16
8000b478:	1a 98       	mov	r8,sp
8000b47a:	20 08       	sub	r8,0
8000b47c:	20 09       	sub	r9,0
8000b47e:	72 0b       	ld.w	r11,r9[0x0]
8000b480:	91 0b       	st.w	r8[0x0],r11
8000b482:	72 1b       	ld.w	r11,r9[0x4]
8000b484:	91 1b       	st.w	r8[0x4],r11
8000b486:	72 2b       	ld.w	r11,r9[0x8]
8000b488:	91 2b       	st.w	r8[0x8],r11
8000b48a:	72 39       	ld.w	r9,r9[0xc]
8000b48c:	91 39       	st.w	r8[0xc],r9
8000b48e:	14 9c       	mov	r12,r10
8000b490:	fe b0 fb dc 	rcall	8000ac48 <quat_local_to_global>
8000b494:	2f 8d       	sub	sp,-32
8000b496:	ee c8 00 24 	sub	r8,r7,36
8000b49a:	ee c9 00 7c 	sub	r9,r7,124
8000b49e:	20 08       	sub	r8,0
8000b4a0:	20 09       	sub	r9,0
8000b4a2:	72 0a       	ld.w	r10,r9[0x0]
8000b4a4:	91 0a       	st.w	r8[0x0],r10
8000b4a6:	72 1a       	ld.w	r10,r9[0x4]
8000b4a8:	91 1a       	st.w	r8[0x4],r10
8000b4aa:	72 2a       	ld.w	r10,r9[0x8]
8000b4ac:	91 2a       	st.w	r8[0x8],r10
8000b4ae:	72 39       	ld.w	r9,r9[0xc]
8000b4b0:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000b4b2:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000b4b6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4ba:	91 e9       	st.w	r8[0x38],r9
8000b4bc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b4c0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4c4:	91 f9       	st.w	r8[0x3c],r9
8000b4c6:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000b4ca:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4ce:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b4d2:	30 08       	mov	r8,0
8000b4d4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4d8:	c6 78       	rjmp	8000b5a6 <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000b4da:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b4de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4e2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4e6:	2e 89       	sub	r9,-24
8000b4e8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b4ec:	10 9c       	mov	r12,r8
8000b4ee:	f0 16 00 02 	mcall	r6[8]
8000b4f2:	14 92       	mov	r2,r10
8000b4f4:	16 93       	mov	r3,r11
8000b4f6:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b4fa:	f0 16 00 02 	mcall	r6[8]
8000b4fe:	30 08       	mov	r8,0
8000b500:	fc 19 80 00 	movh	r9,0x8000
8000b504:	f0 16 00 03 	mcall	r6[12]
8000b508:	14 98       	mov	r8,r10
8000b50a:	16 99       	mov	r9,r11
8000b50c:	10 9a       	mov	r10,r8
8000b50e:	12 9b       	mov	r11,r9
8000b510:	30 08       	mov	r8,0
8000b512:	fc 19 3f f0 	movh	r9,0x3ff0
8000b516:	f0 16 00 05 	mcall	r6[20]
8000b51a:	14 98       	mov	r8,r10
8000b51c:	16 99       	mov	r9,r11
8000b51e:	04 9a       	mov	r10,r2
8000b520:	06 9b       	mov	r11,r3
8000b522:	f0 16 00 03 	mcall	r6[12]
8000b526:	14 98       	mov	r8,r10
8000b528:	16 99       	mov	r9,r11
8000b52a:	10 92       	mov	r2,r8
8000b52c:	12 93       	mov	r3,r9
8000b52e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b532:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b536:	2f 29       	sub	r9,-14
8000b538:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b53c:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b540:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b544:	10 9c       	mov	r12,r8
8000b546:	f0 16 00 02 	mcall	r6[8]
8000b54a:	14 98       	mov	r8,r10
8000b54c:	16 99       	mov	r9,r11
8000b54e:	04 9a       	mov	r10,r2
8000b550:	06 9b       	mov	r11,r3
8000b552:	f0 16 00 05 	mcall	r6[20]
8000b556:	14 98       	mov	r8,r10
8000b558:	16 99       	mov	r9,r11
8000b55a:	10 9a       	mov	r10,r8
8000b55c:	12 9b       	mov	r11,r9
8000b55e:	f0 16 00 08 	mcall	r6[32]
8000b562:	18 9a       	mov	r10,r12
8000b564:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b568:	ea c9 ff e8 	sub	r9,r5,-24
8000b56c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000b570:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b574:	20 4d       	sub	sp,16
8000b576:	1a 98       	mov	r8,sp
8000b578:	20 08       	sub	r8,0
8000b57a:	20 09       	sub	r9,0
8000b57c:	72 0a       	ld.w	r10,r9[0x0]
8000b57e:	91 0a       	st.w	r8[0x0],r10
8000b580:	72 1a       	ld.w	r10,r9[0x4]
8000b582:	91 1a       	st.w	r8[0x4],r10
8000b584:	72 2a       	ld.w	r10,r9[0x8]
8000b586:	91 2a       	st.w	r8[0x8],r10
8000b588:	72 39       	ld.w	r9,r9[0xc]
8000b58a:	91 39       	st.w	r8[0xc],r9
8000b58c:	f0 16 01 15 	mcall	r6[1108]
8000b590:	2f cd       	sub	sp,-16
8000b592:	18 99       	mov	r9,r12
8000b594:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b598:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b59c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5a0:	2f f8       	sub	r8,-1
8000b5a2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b5a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5aa:	58 28       	cp.w	r8,2
8000b5ac:	fe 9a ff 97 	brle	8000b4da <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000b5b0:	2e 1d       	sub	sp,-124
8000b5b2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b5b6:	00 00       	add	r0,r0
8000b5b8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ba:	b0 dc       	st.b	r8[0x5],r12
8000b5bc:	47 50       	lddsp	r0,sp[0x1d4]
8000b5be:	53 20       	stdsp	sp[0xc8],r0
8000b5c0:	64 74       	ld.w	r4,r2[0x1c]
8000b5c2:	20 69       	sub	r9,6
8000b5c4:	73 20       	ld.w	r0,r9[0x48]
8000b5c6:	74 6f       	ld.w	pc,r10[0x18]
8000b5c8:	6f 20       	ld.w	r0,r7[0x48]
8000b5ca:	73 6d       	ld.w	sp,r9[0x58]
8000b5cc:	61 6c       	ld.w	r12,r0[0x58]
8000b5ce:	6c 21       	ld.w	r1,r6[0x8]
	...

8000b5d2 <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000b5d2:	eb cd 40 e0 	pushm	r5-r7,lr
8000b5d6:	1a 97       	mov	r7,sp
8000b5d8:	fa cd 00 e4 	sub	sp,sp,228
8000b5dc:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000b5e0:	1e 26       	rsub	r6,pc
8000b5e2:	ef 4c ff 58 	st.w	r7[-168],r12
8000b5e6:	ef 4b ff 54 	st.w	r7[-172],r11
8000b5ea:	ef 4a ff 50 	st.w	r7[-176],r10
8000b5ee:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b5f2:	30 08       	mov	r8,0
8000b5f4:	ef 48 ff 84 	st.w	r7[-124],r8
8000b5f8:	30 08       	mov	r8,0
8000b5fa:	ef 48 ff 88 	st.w	r7[-120],r8
8000b5fe:	30 08       	mov	r8,0
8000b600:	ef 48 ff 8c 	st.w	r7[-116],r8
8000b604:	fc 18 3f 80 	movh	r8,0x3f80
8000b608:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b60c:	30 08       	mov	r8,0
8000b60e:	ef 48 ff 74 	st.w	r7[-140],r8
8000b612:	30 08       	mov	r8,0
8000b614:	ef 48 ff 78 	st.w	r7[-136],r8
8000b618:	30 08       	mov	r8,0
8000b61a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b61e:	fc 18 3f 80 	movh	r8,0x3f80
8000b622:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000b626:	30 08       	mov	r8,0
8000b628:	ef 48 ff 68 	st.w	r7[-152],r8
8000b62c:	30 08       	mov	r8,0
8000b62e:	ef 48 ff 6c 	st.w	r7[-148],r8
8000b632:	30 08       	mov	r8,0
8000b634:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000b638:	30 08       	mov	r8,0
8000b63a:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000b63e:	30 08       	mov	r8,0
8000b640:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000b644:	30 08       	mov	r8,0
8000b646:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000b64a:	30 08       	mov	r8,0
8000b64c:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000b650:	30 08       	mov	r8,0
8000b652:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000b656:	30 08       	mov	r8,0
8000b658:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b65c:	30 08       	mov	r8,0
8000b65e:	ef 48 ff 60 	st.w	r7[-160],r8
8000b662:	30 08       	mov	r8,0
8000b664:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000b668:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b66c:	f1 38 00 29 	ld.ub	r8,r8[41]
8000b670:	58 08       	cp.w	r8,0
8000b672:	c6 40       	breq	8000b73a <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000b674:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b678:	2d c8       	sub	r8,-36
8000b67a:	10 9c       	mov	r12,r8
8000b67c:	f0 16 00 e7 	mcall	r6[924]
8000b680:	18 98       	mov	r8,r12
8000b682:	58 08       	cp.w	r8,0
8000b684:	c2 70       	breq	8000b6d2 <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000b686:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b68a:	f0 f9 00 80 	ld.w	r9,r8[128]
8000b68e:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b692:	70 78       	ld.w	r8,r8[0x1c]
8000b694:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b698:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b69c:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000b6a0:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6a4:	70 78       	ld.w	r8,r8[0x1c]
8000b6a6:	10 99       	mov	r9,r8
8000b6a8:	ee 19 80 00 	eorh	r9,0x8000
8000b6ac:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6b0:	71 a8       	ld.w	r8,r8[0x68]
8000b6b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b6b6:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6ba:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b6be:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b6c2:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000b6c6:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6ca:	70 a9       	ld.w	r9,r8[0x28]
8000b6cc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6d0:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000b6d2:	f0 16 00 29 	mcall	r6[164]
8000b6d6:	18 99       	mov	r9,r12
8000b6d8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6dc:	70 a8       	ld.w	r8,r8[0x28]
8000b6de:	f2 08 01 08 	sub	r8,r9,r8
8000b6e2:	10 9c       	mov	r12,r8
8000b6e4:	f0 16 00 52 	mcall	r6[328]
8000b6e8:	30 08       	mov	r8,0
8000b6ea:	e0 69 40 00 	mov	r9,16384
8000b6ee:	ea 19 40 8f 	orh	r9,0x408f
8000b6f2:	f0 16 00 0c 	mcall	r6[48]
8000b6f6:	14 98       	mov	r8,r10
8000b6f8:	16 99       	mov	r9,r11
8000b6fa:	10 9a       	mov	r10,r8
8000b6fc:	12 9b       	mov	r11,r9
8000b6fe:	f0 16 00 7d 	mcall	r6[500]
8000b702:	18 98       	mov	r8,r12
8000b704:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b708:	fc 18 3f 80 	movh	r8,0x3f80
8000b70c:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b710:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b714:	71 49       	ld.w	r9,r8[0x50]
8000b716:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b71a:	71 a8       	ld.w	r8,r8[0x68]
8000b71c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b720:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b724:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b728:	70 99       	ld.w	r9,r8[0x24]
8000b72a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b72e:	71 08       	ld.w	r8,r8[0x40]
8000b730:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b734:	ef 48 ff e4 	st.w	r7[-28],r8
8000b738:	c0 78       	rjmp	8000b746 <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b73a:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b73e:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b742:	f0 16 02 0c 	mcall	r6[2096]
		}
	
		if (pos_est->init_gps_position)
8000b746:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b74a:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b74e:	58 08       	cp.w	r8,0
8000b750:	e0 80 01 9c 	breq	8000ba88 <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b754:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b758:	2e 08       	sub	r8,-32
8000b75a:	10 9c       	mov	r12,r8
8000b75c:	f0 16 00 96 	mcall	r6[600]
8000b760:	18 98       	mov	r8,r12
8000b762:	58 08       	cp.w	r8,0
8000b764:	e0 80 01 07 	breq	8000b972 <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b768:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b76c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b770:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b774:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b778:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b77c:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b780:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b784:	70 48       	ld.w	r8,r8[0x10]
8000b786:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b78a:	30 08       	mov	r8,0
8000b78c:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b790:	ee cc 00 e4 	sub	r12,r7,228
8000b794:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b798:	20 7d       	sub	sp,28
8000b79a:	1a 99       	mov	r9,sp
8000b79c:	12 9a       	mov	r10,r9
8000b79e:	f0 cb ff 90 	sub	r11,r8,-112
8000b7a2:	f4 c8 00 00 	sub	r8,r10,0
8000b7a6:	f6 c9 00 00 	sub	r9,r11,0
8000b7aa:	72 0e       	ld.w	lr,r9[0x0]
8000b7ac:	91 0e       	st.w	r8[0x0],lr
8000b7ae:	72 1e       	ld.w	lr,r9[0x4]
8000b7b0:	91 1e       	st.w	r8[0x4],lr
8000b7b2:	72 2e       	ld.w	lr,r9[0x8]
8000b7b4:	91 2e       	st.w	r8[0x8],lr
8000b7b6:	72 39       	ld.w	r9,r9[0xc]
8000b7b8:	91 39       	st.w	r8[0xc],r9
8000b7ba:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b7be:	f4 e9 00 10 	st.d	r10[16],r8
8000b7c2:	76 68       	ld.w	r8,r11[0x18]
8000b7c4:	95 68       	st.w	r10[0x18],r8
8000b7c6:	20 7d       	sub	sp,28
8000b7c8:	1a 98       	mov	r8,sp
8000b7ca:	10 9a       	mov	r10,r8
8000b7cc:	ee cb 00 3c 	sub	r11,r7,60
8000b7d0:	f4 c8 00 00 	sub	r8,r10,0
8000b7d4:	f6 c9 00 00 	sub	r9,r11,0
8000b7d8:	72 0e       	ld.w	lr,r9[0x0]
8000b7da:	91 0e       	st.w	r8[0x0],lr
8000b7dc:	72 1e       	ld.w	lr,r9[0x4]
8000b7de:	91 1e       	st.w	r8[0x4],lr
8000b7e0:	72 2e       	ld.w	lr,r9[0x8]
8000b7e2:	91 2e       	st.w	r8[0x8],lr
8000b7e4:	72 39       	ld.w	r9,r9[0xc]
8000b7e6:	91 39       	st.w	r8[0xc],r9
8000b7e8:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b7ec:	f4 e9 00 10 	st.d	r10[16],r8
8000b7f0:	76 68       	ld.w	r8,r11[0x18]
8000b7f2:	95 68       	st.w	r10[0x18],r8
8000b7f4:	f0 16 00 7c 	mcall	r6[496]
8000b7f8:	2f 2d       	sub	sp,-56
8000b7fa:	ee cb 00 6c 	sub	r11,r7,108
8000b7fe:	ee ca 00 e4 	sub	r10,r7,228
8000b802:	f6 c8 00 00 	sub	r8,r11,0
8000b806:	f4 c9 00 00 	sub	r9,r10,0
8000b80a:	72 0c       	ld.w	r12,r9[0x0]
8000b80c:	91 0c       	st.w	r8[0x0],r12
8000b80e:	72 1c       	ld.w	r12,r9[0x4]
8000b810:	91 1c       	st.w	r8[0x4],r12
8000b812:	72 2c       	ld.w	r12,r9[0x8]
8000b814:	91 2c       	st.w	r8[0x8],r12
8000b816:	72 39       	ld.w	r9,r9[0xc]
8000b818:	91 39       	st.w	r8[0xc],r9
8000b81a:	f6 c8 ff f0 	sub	r8,r11,-16
8000b81e:	f4 c9 ff f0 	sub	r9,r10,-16
8000b822:	72 0c       	ld.w	r12,r9[0x0]
8000b824:	91 0c       	st.w	r8[0x0],r12
8000b826:	72 1c       	ld.w	r12,r9[0x4]
8000b828:	91 1c       	st.w	r8[0x4],r12
8000b82a:	72 2c       	ld.w	r12,r9[0x8]
8000b82c:	91 2c       	st.w	r8[0x8],r12
8000b82e:	72 39       	ld.w	r9,r9[0xc]
8000b830:	91 39       	st.w	r8[0xc],r9
8000b832:	f6 c8 ff e0 	sub	r8,r11,-32
8000b836:	f4 c9 ff e0 	sub	r9,r10,-32
8000b83a:	72 0a       	ld.w	r10,r9[0x0]
8000b83c:	91 0a       	st.w	r8[0x0],r10
8000b83e:	72 1a       	ld.w	r10,r9[0x4]
8000b840:	91 1a       	st.w	r8[0x4],r10
8000b842:	72 2a       	ld.w	r10,r9[0x8]
8000b844:	91 2a       	st.w	r8[0x8],r10
8000b846:	72 39       	ld.w	r9,r9[0xc]
8000b848:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b84a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b84e:	71 18       	ld.w	r8,r8[0x44]
8000b850:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b854:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b858:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b85c:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b860:	f2 08 01 08 	sub	r8,r9,r8
8000b864:	10 9c       	mov	r12,r8
8000b866:	f0 16 00 52 	mcall	r6[328]
8000b86a:	30 08       	mov	r8,0
8000b86c:	e0 69 40 00 	mov	r9,16384
8000b870:	ea 19 40 8f 	orh	r9,0x408f
8000b874:	f0 16 00 0c 	mcall	r6[48]
8000b878:	14 98       	mov	r8,r10
8000b87a:	16 99       	mov	r9,r11
8000b87c:	10 9a       	mov	r10,r8
8000b87e:	12 9b       	mov	r11,r9
8000b880:	f0 16 00 08 	mcall	r6[32]
8000b884:	18 98       	mov	r8,r12
8000b886:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000b88a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b88e:	f0 16 00 02 	mcall	r6[8]
8000b892:	14 98       	mov	r8,r10
8000b894:	16 99       	mov	r9,r11
8000b896:	30 05       	mov	r5,0
8000b898:	e0 6a a9 fc 	mov	r10,43516
8000b89c:	ea 1a d2 f1 	orh	r10,0xd2f1
8000b8a0:	e0 6b 62 4d 	mov	r11,25165
8000b8a4:	ea 1b 3f 50 	orh	r11,0x3f50
8000b8a8:	f0 16 00 1e 	mcall	r6[120]
8000b8ac:	18 98       	mov	r8,r12
8000b8ae:	58 08       	cp.w	r8,0
8000b8b0:	c0 20       	breq	8000b8b4 <position_correction+0x2e2>
8000b8b2:	30 15       	mov	r5,1
8000b8b4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b8b8:	c5 90       	breq	8000b96a <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000b8ba:	30 08       	mov	r8,0
8000b8bc:	ef 48 ff fc 	st.w	r7[-4],r8
8000b8c0:	c2 58       	rjmp	8000b90a <position_correction+0x338>
8000b8c2:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b8c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8ca:	a3 68       	lsl	r8,0x2
8000b8cc:	ee 08 00 08 	add	r8,r7,r8
8000b8d0:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000b8d4:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b8d8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8dc:	2d ca       	sub	r10,-36
8000b8de:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b8e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b8e6:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b8ea:	10 9c       	mov	r12,r8
8000b8ec:	f0 16 00 0a 	mcall	r6[40]
8000b8f0:	18 98       	mov	r8,r12
8000b8f2:	10 9a       	mov	r10,r8
8000b8f4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8f8:	ea c9 ff eb 	sub	r9,r5,-21
8000b8fc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b900:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b904:	2f f8       	sub	r8,-1
8000b906:	ef 48 ff fc 	st.w	r7[-4],r8
8000b90a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b90e:	58 28       	cp.w	r8,2
8000b910:	fe 9a ff d9 	brle	8000b8c2 <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000b914:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b918:	f0 cb ff 70 	sub	r11,r8,-144
8000b91c:	ee ca 00 6c 	sub	r10,r7,108
8000b920:	f6 c8 00 00 	sub	r8,r11,0
8000b924:	f4 c9 00 00 	sub	r9,r10,0
8000b928:	72 0c       	ld.w	r12,r9[0x0]
8000b92a:	91 0c       	st.w	r8[0x0],r12
8000b92c:	72 1c       	ld.w	r12,r9[0x4]
8000b92e:	91 1c       	st.w	r8[0x4],r12
8000b930:	72 2c       	ld.w	r12,r9[0x8]
8000b932:	91 2c       	st.w	r8[0x8],r12
8000b934:	72 39       	ld.w	r9,r9[0xc]
8000b936:	91 39       	st.w	r8[0xc],r9
8000b938:	f6 c8 ff f0 	sub	r8,r11,-16
8000b93c:	f4 c9 ff f0 	sub	r9,r10,-16
8000b940:	72 0c       	ld.w	r12,r9[0x0]
8000b942:	91 0c       	st.w	r8[0x0],r12
8000b944:	72 1c       	ld.w	r12,r9[0x4]
8000b946:	91 1c       	st.w	r8[0x4],r12
8000b948:	72 2c       	ld.w	r12,r9[0x8]
8000b94a:	91 2c       	st.w	r8[0x8],r12
8000b94c:	72 39       	ld.w	r9,r9[0xc]
8000b94e:	91 39       	st.w	r8[0xc],r9
8000b950:	f6 c8 ff e0 	sub	r8,r11,-32
8000b954:	f4 c9 ff e0 	sub	r9,r10,-32
8000b958:	72 0a       	ld.w	r10,r9[0x0]
8000b95a:	91 0a       	st.w	r8[0x0],r10
8000b95c:	72 1a       	ld.w	r10,r9[0x4]
8000b95e:	91 1a       	st.w	r8[0x4],r10
8000b960:	72 2a       	ld.w	r10,r9[0x8]
8000b962:	91 2a       	st.w	r8[0x8],r10
8000b964:	72 39       	ld.w	r9,r9[0xc]
8000b966:	91 39       	st.w	r8[0xc],r9
8000b968:	c0 58       	rjmp	8000b972 <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000b96a:	fe cc 03 ae 	sub	r12,pc,942
8000b96e:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000b972:	f0 16 00 0f 	mcall	r6[60]
8000b976:	18 99       	mov	r9,r12
8000b978:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b97c:	71 18       	ld.w	r8,r8[0x44]
8000b97e:	10 19       	sub	r9,r8
8000b980:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000b984:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b988:	f0 16 00 52 	mcall	r6[328]
8000b98c:	30 08       	mov	r8,0
8000b98e:	e0 69 40 00 	mov	r9,16384
8000b992:	ea 19 c0 8f 	orh	r9,0xc08f
8000b996:	f0 16 00 0c 	mcall	r6[48]
8000b99a:	14 98       	mov	r8,r10
8000b99c:	16 99       	mov	r9,r11
8000b99e:	10 9a       	mov	r10,r8
8000b9a0:	12 9b       	mov	r11,r9
8000b9a2:	30 08       	mov	r8,0
8000b9a4:	fc 19 3f f0 	movh	r9,0x3ff0
8000b9a8:	f0 16 00 05 	mcall	r6[20]
8000b9ac:	14 98       	mov	r8,r10
8000b9ae:	16 99       	mov	r9,r11
8000b9b0:	30 05       	mov	r5,0
8000b9b2:	30 0a       	mov	r10,0
8000b9b4:	30 0b       	mov	r11,0
8000b9b6:	f0 16 00 1e 	mcall	r6[120]
8000b9ba:	18 98       	mov	r8,r12
8000b9bc:	58 08       	cp.w	r8,0
8000b9be:	c0 20       	breq	8000b9c2 <position_correction+0x3f0>
8000b9c0:	30 15       	mov	r5,1
8000b9c2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b9c6:	c1 d0       	breq	8000ba00 <position_correction+0x42e>
8000b9c8:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b9cc:	f0 16 00 52 	mcall	r6[328]
8000b9d0:	30 08       	mov	r8,0
8000b9d2:	e0 69 40 00 	mov	r9,16384
8000b9d6:	ea 19 c0 8f 	orh	r9,0xc08f
8000b9da:	f0 16 00 0c 	mcall	r6[48]
8000b9de:	14 98       	mov	r8,r10
8000b9e0:	16 99       	mov	r9,r11
8000b9e2:	10 9a       	mov	r10,r8
8000b9e4:	12 9b       	mov	r11,r9
8000b9e6:	30 08       	mov	r8,0
8000b9e8:	fc 19 3f f0 	movh	r9,0x3ff0
8000b9ec:	f0 16 00 05 	mcall	r6[20]
8000b9f0:	14 98       	mov	r8,r10
8000b9f2:	16 99       	mov	r9,r11
8000b9f4:	10 9a       	mov	r10,r8
8000b9f6:	12 9b       	mov	r11,r9
8000b9f8:	f0 16 00 08 	mcall	r6[32]
8000b9fc:	18 98       	mov	r8,r12
8000b9fe:	c0 28       	rjmp	8000ba02 <position_correction+0x430>
8000ba00:	30 08       	mov	r8,0
8000ba02:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000ba06:	fc 18 3f 80 	movh	r8,0x3f80
8000ba0a:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000ba0e:	30 08       	mov	r8,0
8000ba10:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba14:	c3 48       	rjmp	8000ba7c <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000ba16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba1a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba1e:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba22:	2d ca       	sub	r10,-36
8000ba24:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000ba28:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba2c:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba30:	2e 8b       	sub	r11,-24
8000ba32:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000ba36:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ba3a:	a3 68       	lsl	r8,0x2
8000ba3c:	ee 08 00 08 	add	r8,r7,r8
8000ba40:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000ba44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba48:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba4c:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba50:	2e ba       	sub	r10,-21
8000ba52:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000ba56:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba5a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba5e:	2f 2b       	sub	r11,-14
8000ba60:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000ba64:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ba68:	a3 68       	lsl	r8,0x2
8000ba6a:	ee 08 00 08 	add	r8,r7,r8
8000ba6e:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000ba72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba76:	2f f8       	sub	r8,-1
8000ba78:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba80:	58 28       	cp.w	r8,2
8000ba82:	fe 9a ff ca 	brle	8000ba16 <position_correction+0x444>
8000ba86:	c2 b8       	rjmp	8000badc <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000ba88:	ee fb ff 50 	ld.w	r11,r7[-176]
8000ba8c:	ee fc ff 58 	ld.w	r12,r7[-168]
8000ba90:	f0 16 00 e6 	mcall	r6[920]
			for (i=0;i<2;i++){
8000ba94:	30 08       	mov	r8,0
8000ba96:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba9a:	c1 68       	rjmp	8000bac6 <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000ba9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baa0:	a3 68       	lsl	r8,0x2
8000baa2:	ee 08 00 08 	add	r8,r7,r8
8000baa6:	30 09       	mov	r9,0
8000baa8:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000baac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bab0:	a3 68       	lsl	r8,0x2
8000bab2:	ee 08 00 08 	add	r8,r7,r8
8000bab6:	30 09       	mov	r9,0
8000bab8:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000babc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bac0:	2f f8       	sub	r8,-1
8000bac2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baca:	58 18       	cp.w	r8,1
8000bacc:	fe 9a ff e8 	brle	8000ba9c <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000bad0:	e0 68 cc cd 	mov	r8,52429
8000bad4:	ea 18 3d cc 	orh	r8,0x3dcc
8000bad8:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000badc:	30 08       	mov	r8,0
8000bade:	ef 48 ff fc 	st.w	r7[-4],r8
8000bae2:	c2 e8       	rjmp	8000bb3e <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000bae4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bae8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000baec:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000baf0:	2e 8a       	sub	r10,-24
8000baf2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000baf6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bafa:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bafe:	2f db       	sub	r11,-3
8000bb00:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bb04:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb08:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bb0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb10:	a3 68       	lsl	r8,0x2
8000bb12:	ee 08 00 08 	add	r8,r7,r8
8000bb16:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000bb1a:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bb1e:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bb22:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bb26:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bb2a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb2e:	2e 89       	sub	r9,-24
8000bb30:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000bb34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb38:	2f f8       	sub	r8,-1
8000bb3a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb42:	58 28       	cp.w	r8,2
8000bb44:	fe 9a ff d0 	brle	8000bae4 <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000bb48:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb4c:	71 a9       	ld.w	r9,r8[0x68]
8000bb4e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb52:	70 6a       	ld.w	r10,r8[0x18]
8000bb54:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bb58:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bb5c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000bb60:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bb64:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bb68:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bb6c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bb70:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb74:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000bb78:	30 08       	mov	r8,0
8000bb7a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb7e:	c1 68       	rjmp	8000bbaa <position_correction+0x5d8>
8000bb80:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bb84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb88:	a3 68       	lsl	r8,0x2
8000bb8a:	ee 08 00 08 	add	r8,r7,r8
8000bb8e:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000bb92:	f4 c8 ff ff 	sub	r8,r10,-1
8000bb96:	a3 68       	lsl	r8,0x2
8000bb98:	ee 08 00 08 	add	r8,r7,r8
8000bb9c:	f1 49 ff 74 	st.w	r8[-140],r9
8000bba0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bba4:	2f f8       	sub	r8,-1
8000bba6:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbae:	58 28       	cp.w	r8,2
8000bbb0:	fe 9a ff e8 	brle	8000bb80 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bbb4:	30 08       	mov	r8,0
8000bbb6:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbba:	c2 e8       	rjmp	8000bc16 <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000bbbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bbc0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bbc4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bbc8:	2f 2a       	sub	r10,-14
8000bbca:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bbce:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bbd2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bbd6:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bbda:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bbde:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bbe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbe6:	2f f8       	sub	r8,-1
8000bbe8:	a3 68       	lsl	r8,0x2
8000bbea:	ee 08 00 08 	add	r8,r7,r8
8000bbee:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000bbf2:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bbf6:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bbfa:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bbfe:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bc02:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc06:	2f 29       	sub	r9,-14
8000bc08:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bc0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc10:	2f f8       	sub	r8,-1
8000bc12:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc1a:	58 28       	cp.w	r8,2
8000bc1c:	fe 9a ff d0 	brle	8000bbbc <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000bc20:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc24:	71 09       	ld.w	r9,r8[0x40]
8000bc26:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc2a:	70 7a       	ld.w	r10,r8[0x1c]
8000bc2c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bc30:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc34:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bc38:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc3c:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bc40:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bc44:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bc48:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc4c:	f1 49 00 40 	st.w	r8[64],r9

	}
8000bc50:	2c 7d       	sub	sp,-228
8000bc52:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000bc56:	00 00       	add	r0,r0
8000bc58:	80 00       	ld.sh	r0,r0[0x0]
8000bc5a:	b4 64       	st.h	r10[0xc],r4

8000bc5c <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000bc5c:	eb cd 40 80 	pushm	r7,lr
8000bc60:	1a 97       	mov	r7,sp
8000bc62:	20 5d       	sub	sp,20
8000bc64:	18 9a       	mov	r10,r12
8000bc66:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000bc6a:	30 08       	mov	r8,0
8000bc6c:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000bc70:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc74:	70 08       	ld.w	r8,r8[0x0]
8000bc76:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000bc7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc7e:	2f c8       	sub	r8,-4
8000bc80:	70 08       	ld.w	r8,r8[0x0]
8000bc82:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000bc86:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc8a:	2f 88       	sub	r8,-8
8000bc8c:	70 08       	ld.w	r8,r8[0x0]
8000bc8e:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000bc92:	14 98       	mov	r8,r10
8000bc94:	ee c9 00 10 	sub	r9,r7,16
8000bc98:	20 08       	sub	r8,0
8000bc9a:	20 09       	sub	r9,0
8000bc9c:	72 0b       	ld.w	r11,r9[0x0]
8000bc9e:	91 0b       	st.w	r8[0x0],r11
8000bca0:	72 1b       	ld.w	r11,r9[0x4]
8000bca2:	91 1b       	st.w	r8[0x4],r11
8000bca4:	72 2b       	ld.w	r11,r9[0x8]
8000bca6:	91 2b       	st.w	r8[0x8],r11
8000bca8:	72 39       	ld.w	r9,r9[0xc]
8000bcaa:	91 39       	st.w	r8[0xc],r9
}
8000bcac:	14 9c       	mov	r12,r10
8000bcae:	2f bd       	sub	sp,-20
8000bcb0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcb4 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000bcb4:	eb cd 40 80 	pushm	r7,lr
8000bcb8:	1a 97       	mov	r7,sp
8000bcba:	20 3d       	sub	sp,12
8000bcbc:	ef 4c ff f8 	st.w	r7[-8],r12
8000bcc0:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000bcc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcc8:	70 09       	ld.w	r9,r8[0x0]
8000bcca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcce:	70 08       	ld.w	r8,r8[0x0]
8000bcd0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000bcd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcd8:	2f c8       	sub	r8,-4
8000bcda:	70 0a       	ld.w	r10,r8[0x0]
8000bcdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bce0:	2f c8       	sub	r8,-4
8000bce2:	70 08       	ld.w	r8,r8[0x0]
8000bce4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bce8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bcec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcf0:	2f 88       	sub	r8,-8
8000bcf2:	70 0a       	ld.w	r10,r8[0x0]
8000bcf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcf8:	2f 88       	sub	r8,-8
8000bcfa:	70 08       	ld.w	r8,r8[0x0]
8000bcfc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bd00:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000bd04:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000bd08:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bd0c:	10 9c       	mov	r12,r8
8000bd0e:	2f dd       	sub	sp,-12
8000bd10:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd14 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000bd14:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bd18:	1a 97       	mov	r7,sp
8000bd1a:	20 7d       	sub	sp,28
8000bd1c:	4b d6       	lddpc	r6,8000be10 <quat_multi+0xfc>
8000bd1e:	1e 26       	rsub	r6,pc
8000bd20:	ee c8 ff ec 	sub	r8,r7,-20
8000bd24:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000bd26:	70 2a       	ld.w	r10,r8[0x8]
8000bd28:	70 79       	ld.w	r9,r8[0x1c]
8000bd2a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd2e:	70 3b       	ld.w	r11,r8[0xc]
8000bd30:	70 69       	ld.w	r9,r8[0x18]
8000bd32:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd36:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd3a:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000bd3e:	70 3a       	ld.w	r10,r8[0xc]
8000bd40:	70 59       	ld.w	r9,r8[0x14]
8000bd42:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd46:	70 1b       	ld.w	r11,r8[0x4]
8000bd48:	70 79       	ld.w	r9,r8[0x1c]
8000bd4a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd4e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd52:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000bd56:	70 1a       	ld.w	r10,r8[0x4]
8000bd58:	70 69       	ld.w	r9,r8[0x18]
8000bd5a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd5e:	70 2b       	ld.w	r11,r8[0x8]
8000bd60:	70 59       	ld.w	r9,r8[0x14]
8000bd62:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd66:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd6a:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000bd6e:	70 4a       	ld.w	r10,r8[0x10]
8000bd70:	70 19       	ld.w	r9,r8[0x4]
8000bd72:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd76:	70 0b       	ld.w	r11,r8[0x0]
8000bd78:	70 59       	ld.w	r9,r8[0x14]
8000bd7a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd7e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bd82:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd86:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bd8a:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000bd8e:	70 4a       	ld.w	r10,r8[0x10]
8000bd90:	70 29       	ld.w	r9,r8[0x8]
8000bd92:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd96:	70 0b       	ld.w	r11,r8[0x0]
8000bd98:	70 69       	ld.w	r9,r8[0x18]
8000bd9a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd9e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bda2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bda6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bdaa:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000bdae:	70 4a       	ld.w	r10,r8[0x10]
8000bdb0:	70 39       	ld.w	r9,r8[0xc]
8000bdb2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bdb6:	70 0b       	ld.w	r11,r8[0x0]
8000bdb8:	70 79       	ld.w	r9,r8[0x1c]
8000bdba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bdbe:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bdc2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bdc6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bdca:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000bdce:	70 0a       	ld.w	r10,r8[0x0]
8000bdd0:	70 49       	ld.w	r9,r8[0x10]
8000bdd2:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000bdd6:	f0 c9 ff f0 	sub	r9,r8,-16
8000bdda:	2f c9       	sub	r9,-4
8000bddc:	2f c8       	sub	r8,-4
8000bdde:	12 9b       	mov	r11,r9
8000bde0:	10 9c       	mov	r12,r8
8000bde2:	c6 9f       	rcall	8000bcb4 <scalar_product>
8000bde4:	18 98       	mov	r8,r12
8000bde6:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000bdea:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000bdee:	0a 98       	mov	r8,r5
8000bdf0:	ee c9 00 1c 	sub	r9,r7,28
8000bdf4:	20 08       	sub	r8,0
8000bdf6:	20 09       	sub	r9,0
8000bdf8:	72 0a       	ld.w	r10,r9[0x0]
8000bdfa:	91 0a       	st.w	r8[0x0],r10
8000bdfc:	72 1a       	ld.w	r10,r9[0x4]
8000bdfe:	91 1a       	st.w	r8[0x4],r10
8000be00:	72 2a       	ld.w	r10,r9[0x8]
8000be02:	91 2a       	st.w	r8[0x8],r10
8000be04:	72 39       	ld.w	r9,r9[0xc]
8000be06:	91 39       	st.w	r8[0xc],r9
}
8000be08:	0a 9c       	mov	r12,r5
8000be0a:	2f 9d       	sub	sp,-28
8000be0c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000be10:	80 00       	ld.sh	r0,r0[0x0]
8000be12:	bb a2       	sbr	r2,0x1a

8000be14 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000be14:	eb cd 40 80 	pushm	r7,lr
8000be18:	1a 97       	mov	r7,sp
8000be1a:	20 5d       	sub	sp,20
8000be1c:	ee c9 ff f8 	sub	r9,r7,-8
8000be20:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000be22:	72 08       	ld.w	r8,r9[0x0]
8000be24:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000be28:	30 08       	mov	r8,0
8000be2a:	ef 48 ff fc 	st.w	r7[-4],r8
8000be2e:	c1 58       	rjmp	8000be58 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000be30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be34:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be38:	2f fb       	sub	r11,-1
8000be3a:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000be3e:	ee 1b 80 00 	eorh	r11,0x8000
8000be42:	2f f8       	sub	r8,-1
8000be44:	a3 68       	lsl	r8,0x2
8000be46:	ee 08 00 08 	add	r8,r7,r8
8000be4a:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000be4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be52:	2f f8       	sub	r8,-1
8000be54:	ef 48 ff fc 	st.w	r7[-4],r8
8000be58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be5c:	58 28       	cp.w	r8,2
8000be5e:	fe 9a ff e9 	brle	8000be30 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000be62:	14 98       	mov	r8,r10
8000be64:	ee c9 00 14 	sub	r9,r7,20
8000be68:	20 08       	sub	r8,0
8000be6a:	20 09       	sub	r9,0
8000be6c:	72 0b       	ld.w	r11,r9[0x0]
8000be6e:	91 0b       	st.w	r8[0x0],r11
8000be70:	72 1b       	ld.w	r11,r9[0x4]
8000be72:	91 1b       	st.w	r8[0x4],r11
8000be74:	72 2b       	ld.w	r11,r9[0x8]
8000be76:	91 2b       	st.w	r8[0x8],r11
8000be78:	72 39       	ld.w	r9,r9[0xc]
8000be7a:	91 39       	st.w	r8[0xc],r9
}
8000be7c:	14 9c       	mov	r12,r10
8000be7e:	2f bd       	sub	sp,-20
8000be80:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be84 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000be84:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000be88:	1a 97       	mov	r7,sp
8000be8a:	20 cd       	sub	sp,48
8000be8c:	4b c6       	lddpc	r6,8000bf7c <quat_global_to_local+0xf8>
8000be8e:	1e 26       	rsub	r6,pc
8000be90:	ee c5 ff ec 	sub	r5,r7,-20
8000be94:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000be96:	ee ca 00 10 	sub	r10,r7,16
8000be9a:	20 4d       	sub	sp,16
8000be9c:	1a 98       	mov	r8,sp
8000be9e:	0a 99       	mov	r9,r5
8000bea0:	20 08       	sub	r8,0
8000bea2:	20 09       	sub	r9,0
8000bea4:	72 0b       	ld.w	r11,r9[0x0]
8000bea6:	91 0b       	st.w	r8[0x0],r11
8000bea8:	72 1b       	ld.w	r11,r9[0x4]
8000beaa:	91 1b       	st.w	r8[0x4],r11
8000beac:	72 2b       	ld.w	r11,r9[0x8]
8000beae:	91 2b       	st.w	r8[0x8],r11
8000beb0:	72 39       	ld.w	r9,r9[0xc]
8000beb2:	91 39       	st.w	r8[0xc],r9
8000beb4:	14 9c       	mov	r12,r10
8000beb6:	ca ff       	rcall	8000be14 <quat_inv>
8000beb8:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000beba:	ee ca 00 20 	sub	r10,r7,32
8000bebe:	20 4d       	sub	sp,16
8000bec0:	1a 98       	mov	r8,sp
8000bec2:	ea c9 ff f0 	sub	r9,r5,-16
8000bec6:	20 08       	sub	r8,0
8000bec8:	20 09       	sub	r9,0
8000beca:	72 0b       	ld.w	r11,r9[0x0]
8000becc:	91 0b       	st.w	r8[0x0],r11
8000bece:	72 1b       	ld.w	r11,r9[0x4]
8000bed0:	91 1b       	st.w	r8[0x4],r11
8000bed2:	72 2b       	ld.w	r11,r9[0x8]
8000bed4:	91 2b       	st.w	r8[0x8],r11
8000bed6:	72 39       	ld.w	r9,r9[0xc]
8000bed8:	91 39       	st.w	r8[0xc],r9
8000beda:	20 4d       	sub	sp,16
8000bedc:	1a 98       	mov	r8,sp
8000bede:	ee c9 00 10 	sub	r9,r7,16
8000bee2:	20 08       	sub	r8,0
8000bee4:	20 09       	sub	r9,0
8000bee6:	72 0b       	ld.w	r11,r9[0x0]
8000bee8:	91 0b       	st.w	r8[0x0],r11
8000beea:	72 1b       	ld.w	r11,r9[0x4]
8000beec:	91 1b       	st.w	r8[0x4],r11
8000beee:	72 2b       	ld.w	r11,r9[0x8]
8000bef0:	91 2b       	st.w	r8[0x8],r11
8000bef2:	72 39       	ld.w	r9,r9[0xc]
8000bef4:	91 39       	st.w	r8[0xc],r9
8000bef6:	14 9c       	mov	r12,r10
8000bef8:	c0 ef       	rcall	8000bd14 <quat_multi>
8000befa:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000befc:	ee ca 00 30 	sub	r10,r7,48
8000bf00:	20 4d       	sub	sp,16
8000bf02:	1a 98       	mov	r8,sp
8000bf04:	0a 99       	mov	r9,r5
8000bf06:	20 08       	sub	r8,0
8000bf08:	20 09       	sub	r9,0
8000bf0a:	72 0b       	ld.w	r11,r9[0x0]
8000bf0c:	91 0b       	st.w	r8[0x0],r11
8000bf0e:	72 1b       	ld.w	r11,r9[0x4]
8000bf10:	91 1b       	st.w	r8[0x4],r11
8000bf12:	72 2b       	ld.w	r11,r9[0x8]
8000bf14:	91 2b       	st.w	r8[0x8],r11
8000bf16:	72 39       	ld.w	r9,r9[0xc]
8000bf18:	91 39       	st.w	r8[0xc],r9
8000bf1a:	20 4d       	sub	sp,16
8000bf1c:	1a 98       	mov	r8,sp
8000bf1e:	ee c9 00 20 	sub	r9,r7,32
8000bf22:	20 08       	sub	r8,0
8000bf24:	20 09       	sub	r9,0
8000bf26:	72 0b       	ld.w	r11,r9[0x0]
8000bf28:	91 0b       	st.w	r8[0x0],r11
8000bf2a:	72 1b       	ld.w	r11,r9[0x4]
8000bf2c:	91 1b       	st.w	r8[0x4],r11
8000bf2e:	72 2b       	ld.w	r11,r9[0x8]
8000bf30:	91 2b       	st.w	r8[0x8],r11
8000bf32:	72 39       	ld.w	r9,r9[0xc]
8000bf34:	91 39       	st.w	r8[0xc],r9
8000bf36:	14 9c       	mov	r12,r10
8000bf38:	ce ee       	rcall	8000bd14 <quat_multi>
8000bf3a:	2f 8d       	sub	sp,-32
8000bf3c:	ee c8 00 20 	sub	r8,r7,32
8000bf40:	ee c9 00 30 	sub	r9,r7,48
8000bf44:	20 08       	sub	r8,0
8000bf46:	20 09       	sub	r9,0
8000bf48:	72 0a       	ld.w	r10,r9[0x0]
8000bf4a:	91 0a       	st.w	r8[0x0],r10
8000bf4c:	72 1a       	ld.w	r10,r9[0x4]
8000bf4e:	91 1a       	st.w	r8[0x4],r10
8000bf50:	72 2a       	ld.w	r10,r9[0x8]
8000bf52:	91 2a       	st.w	r8[0x8],r10
8000bf54:	72 39       	ld.w	r9,r9[0xc]
8000bf56:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000bf58:	06 98       	mov	r8,r3
8000bf5a:	ee c9 00 20 	sub	r9,r7,32
8000bf5e:	20 08       	sub	r8,0
8000bf60:	20 09       	sub	r9,0
8000bf62:	72 0a       	ld.w	r10,r9[0x0]
8000bf64:	91 0a       	st.w	r8[0x0],r10
8000bf66:	72 1a       	ld.w	r10,r9[0x4]
8000bf68:	91 1a       	st.w	r8[0x4],r10
8000bf6a:	72 2a       	ld.w	r10,r9[0x8]
8000bf6c:	91 2a       	st.w	r8[0x8],r10
8000bf6e:	72 39       	ld.w	r9,r9[0xc]
8000bf70:	91 39       	st.w	r8[0xc],r9
}
8000bf72:	06 9c       	mov	r12,r3
8000bf74:	2f 4d       	sub	sp,-48
8000bf76:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bf7a:	00 00       	add	r0,r0
8000bf7c:	80 00       	ld.sh	r0,r0[0x0]
8000bf7e:	bd 12       	ld.d	r2,--lr

8000bf80 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000bf80:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bf84:	1a 97       	mov	r7,sp
8000bf86:	20 cd       	sub	sp,48
8000bf88:	4b c6       	lddpc	r6,8000c078 <quat_local_to_global+0xf8>
8000bf8a:	1e 26       	rsub	r6,pc
8000bf8c:	ee c5 ff ec 	sub	r5,r7,-20
8000bf90:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bf92:	ee ca 00 10 	sub	r10,r7,16
8000bf96:	20 4d       	sub	sp,16
8000bf98:	1a 98       	mov	r8,sp
8000bf9a:	0a 99       	mov	r9,r5
8000bf9c:	20 08       	sub	r8,0
8000bf9e:	20 09       	sub	r9,0
8000bfa0:	72 0b       	ld.w	r11,r9[0x0]
8000bfa2:	91 0b       	st.w	r8[0x0],r11
8000bfa4:	72 1b       	ld.w	r11,r9[0x4]
8000bfa6:	91 1b       	st.w	r8[0x4],r11
8000bfa8:	72 2b       	ld.w	r11,r9[0x8]
8000bfaa:	91 2b       	st.w	r8[0x8],r11
8000bfac:	72 39       	ld.w	r9,r9[0xc]
8000bfae:	91 39       	st.w	r8[0xc],r9
8000bfb0:	14 9c       	mov	r12,r10
8000bfb2:	c3 1f       	rcall	8000be14 <quat_inv>
8000bfb4:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000bfb6:	ee ca 00 20 	sub	r10,r7,32
8000bfba:	20 4d       	sub	sp,16
8000bfbc:	1a 98       	mov	r8,sp
8000bfbe:	ea c9 ff f0 	sub	r9,r5,-16
8000bfc2:	20 08       	sub	r8,0
8000bfc4:	20 09       	sub	r9,0
8000bfc6:	72 0b       	ld.w	r11,r9[0x0]
8000bfc8:	91 0b       	st.w	r8[0x0],r11
8000bfca:	72 1b       	ld.w	r11,r9[0x4]
8000bfcc:	91 1b       	st.w	r8[0x4],r11
8000bfce:	72 2b       	ld.w	r11,r9[0x8]
8000bfd0:	91 2b       	st.w	r8[0x8],r11
8000bfd2:	72 39       	ld.w	r9,r9[0xc]
8000bfd4:	91 39       	st.w	r8[0xc],r9
8000bfd6:	20 4d       	sub	sp,16
8000bfd8:	1a 98       	mov	r8,sp
8000bfda:	0a 99       	mov	r9,r5
8000bfdc:	20 08       	sub	r8,0
8000bfde:	20 09       	sub	r9,0
8000bfe0:	72 0b       	ld.w	r11,r9[0x0]
8000bfe2:	91 0b       	st.w	r8[0x0],r11
8000bfe4:	72 1b       	ld.w	r11,r9[0x4]
8000bfe6:	91 1b       	st.w	r8[0x4],r11
8000bfe8:	72 2b       	ld.w	r11,r9[0x8]
8000bfea:	91 2b       	st.w	r8[0x8],r11
8000bfec:	72 39       	ld.w	r9,r9[0xc]
8000bfee:	91 39       	st.w	r8[0xc],r9
8000bff0:	14 9c       	mov	r12,r10
8000bff2:	c9 1e       	rcall	8000bd14 <quat_multi>
8000bff4:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000bff6:	ee ca 00 30 	sub	r10,r7,48
8000bffa:	20 4d       	sub	sp,16
8000bffc:	1a 98       	mov	r8,sp
8000bffe:	ee c9 00 10 	sub	r9,r7,16
8000c002:	20 08       	sub	r8,0
8000c004:	20 09       	sub	r9,0
8000c006:	72 0b       	ld.w	r11,r9[0x0]
8000c008:	91 0b       	st.w	r8[0x0],r11
8000c00a:	72 1b       	ld.w	r11,r9[0x4]
8000c00c:	91 1b       	st.w	r8[0x4],r11
8000c00e:	72 2b       	ld.w	r11,r9[0x8]
8000c010:	91 2b       	st.w	r8[0x8],r11
8000c012:	72 39       	ld.w	r9,r9[0xc]
8000c014:	91 39       	st.w	r8[0xc],r9
8000c016:	20 4d       	sub	sp,16
8000c018:	1a 98       	mov	r8,sp
8000c01a:	ee c9 00 20 	sub	r9,r7,32
8000c01e:	20 08       	sub	r8,0
8000c020:	20 09       	sub	r9,0
8000c022:	72 0b       	ld.w	r11,r9[0x0]
8000c024:	91 0b       	st.w	r8[0x0],r11
8000c026:	72 1b       	ld.w	r11,r9[0x4]
8000c028:	91 1b       	st.w	r8[0x4],r11
8000c02a:	72 2b       	ld.w	r11,r9[0x8]
8000c02c:	91 2b       	st.w	r8[0x8],r11
8000c02e:	72 39       	ld.w	r9,r9[0xc]
8000c030:	91 39       	st.w	r8[0xc],r9
8000c032:	14 9c       	mov	r12,r10
8000c034:	c7 0e       	rcall	8000bd14 <quat_multi>
8000c036:	2f 8d       	sub	sp,-32
8000c038:	ee c8 00 20 	sub	r8,r7,32
8000c03c:	ee c9 00 30 	sub	r9,r7,48
8000c040:	20 08       	sub	r8,0
8000c042:	20 09       	sub	r9,0
8000c044:	72 0a       	ld.w	r10,r9[0x0]
8000c046:	91 0a       	st.w	r8[0x0],r10
8000c048:	72 1a       	ld.w	r10,r9[0x4]
8000c04a:	91 1a       	st.w	r8[0x4],r10
8000c04c:	72 2a       	ld.w	r10,r9[0x8]
8000c04e:	91 2a       	st.w	r8[0x8],r10
8000c050:	72 39       	ld.w	r9,r9[0xc]
8000c052:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000c054:	06 98       	mov	r8,r3
8000c056:	ee c9 00 20 	sub	r9,r7,32
8000c05a:	20 08       	sub	r8,0
8000c05c:	20 09       	sub	r9,0
8000c05e:	72 0a       	ld.w	r10,r9[0x0]
8000c060:	91 0a       	st.w	r8[0x0],r10
8000c062:	72 1a       	ld.w	r10,r9[0x4]
8000c064:	91 1a       	st.w	r8[0x4],r10
8000c066:	72 2a       	ld.w	r10,r9[0x8]
8000c068:	91 2a       	st.w	r8[0x8],r10
8000c06a:	72 39       	ld.w	r9,r9[0xc]
8000c06c:	91 39       	st.w	r8[0xc],r9
}
8000c06e:	06 9c       	mov	r12,r3
8000c070:	2f 4d       	sub	sp,-48
8000c072:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000c076:	00 00       	add	r0,r0
8000c078:	80 00       	ld.sh	r0,r0[0x0]
8000c07a:	be 0e       	st.h	pc[0x0],lr

8000c07c <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000c07c:	eb cd 40 c0 	pushm	r6-r7,lr
8000c080:	1a 97       	mov	r7,sp
8000c082:	20 2d       	sub	sp,8
8000c084:	4b 26       	lddpc	r6,8000c14c <fast_sqrt+0xd0>
8000c086:	1e 26       	rsub	r6,pc
8000c088:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000c08c:	30 18       	mov	r8,1
8000c08e:	ee fa ff f8 	ld.w	r10,r7[-8]
8000c092:	30 09       	mov	r9,0
8000c094:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000c098:	e0 8c 00 03 	brvs	8000c09e <fast_sqrt+0x22>
8000c09c:	c0 25       	brlt	8000c0a0 <fast_sqrt+0x24>
8000c09e:	30 08       	mov	r8,0
8000c0a0:	5c 58       	castu.b	r8
8000c0a2:	c0 30       	breq	8000c0a8 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000c0a4:	30 08       	mov	r8,0
8000c0a6:	c4 f8       	rjmp	8000c144 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000c0a8:	fc 18 3f 80 	movh	r8,0x3f80
8000c0ac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c0b0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c0b4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c0b8:	f0 16 00 0a 	mcall	r6[40]
8000c0bc:	18 98       	mov	r8,r12
8000c0be:	10 99       	mov	r9,r8
8000c0c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c0c4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c0c8:	fc 18 3f 00 	movh	r8,0x3f00
8000c0cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c0d0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c0d4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c0d8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c0dc:	f0 16 00 0a 	mcall	r6[40]
8000c0e0:	18 98       	mov	r8,r12
8000c0e2:	10 99       	mov	r9,r8
8000c0e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c0e8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c0ec:	fc 18 3f 00 	movh	r8,0x3f00
8000c0f0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c0f4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c0f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c0fc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c100:	f0 16 00 0a 	mcall	r6[40]
8000c104:	18 98       	mov	r8,r12
8000c106:	10 99       	mov	r9,r8
8000c108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c10c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c110:	fc 18 3f 00 	movh	r8,0x3f00
8000c114:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c118:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c11c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c120:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c124:	f0 16 00 0a 	mcall	r6[40]
8000c128:	18 98       	mov	r8,r12
8000c12a:	10 99       	mov	r9,r8
8000c12c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c130:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c134:	fc 18 3f 00 	movh	r8,0x3f00
8000c138:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c13c:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000c140:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c144:	10 9c       	mov	r12,r8
8000c146:	2f ed       	sub	sp,-8
8000c148:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c14c:	80 00       	ld.sh	r0,r0[0x0]
8000c14e:	bf 0a       	ld.d	r10,pc
8000c150:	49 6e       	lddpc	lr,8000c1a8 <qfInit+0x12>
8000c152:	69 74       	ld.w	r4,r4[0x5c]
8000c154:	69 61       	ld.w	r1,r4[0x58]
8000c156:	6c 20       	ld.w	r0,r6[0x8]
8000c158:	79 61       	ld.w	r1,r12[0x58]
8000c15a:	77 3a       	ld.w	r10,r11[0x4c]
8000c15c:	00 00       	add	r0,r0
8000c15e:	00 00       	add	r0,r0
8000c160:	20 3d       	sub	sp,12
8000c162:	20 61       	sub	r1,6
8000c164:	74 61       	ld.w	r1,r10[0x18]
8000c166:	6e 32       	ld.w	r2,r7[0xc]
8000c168:	28 6d       	sub	sp,-488
8000c16a:	61 67       	ld.w	r7,r0[0x58]
8000c16c:	5f 79       	srpl	r9
8000c16e:	2c 6d       	sub	sp,-232
8000c170:	61 67       	ld.w	r7,r0[0x58]
8000c172:	5f 78       	srpl	r8
8000c174:	29 20       	sub	r0,-110
8000c176:	3d 00       	mov	r0,-48
8000c178:	20 2c       	sub	r12,2
8000c17a:	00 00       	add	r0,r0
8000c17c:	0a 00       	add	r0,r5
8000c17e:	00 00       	add	r0,r0
8000c180:	46 72       	lddsp	r2,sp[0x19c]
8000c182:	6f 6e       	ld.w	lr,r7[0x58]
8000c184:	74 20       	ld.w	r0,r10[0x8]
8000c186:	6d 61       	ld.w	r1,r6[0x58]
8000c188:	67 28       	ld.w	r8,r3[0x48]
8000c18a:	7a 29       	ld.w	r9,sp[0x8]
8000c18c:	20 28       	sub	r8,2
8000c18e:	2a 31       	sub	r1,-93
8000c190:	30 30       	mov	r0,3
8000c192:	29 3a       	sub	r10,-109
	...

8000c196 <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000c196:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c19a:	1a 97       	mov	r7,sp
8000c19c:	20 5d       	sub	sp,20
8000c19e:	fe f6 03 46 	ld.w	r6,pc[838]
8000c1a2:	1e 26       	rsub	r6,pc
8000c1a4:	ef 4c ff f4 	st.w	r7[-12],r12
8000c1a8:	ef 4b ff f0 	st.w	r7[-16],r11
8000c1ac:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c1b0:	30 08       	mov	r8,0
8000c1b2:	ef 68 ff fb 	st.b	r7[-5],r8
8000c1b6:	c2 c8       	rjmp	8000c20e <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000c1b8:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000c1bc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c1c0:	a3 68       	lsl	r8,0x2
8000c1c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000c1c6:	f2 08 00 08 	add	r8,r9,r8
8000c1ca:	70 08       	ld.w	r8,r8[0x0]
8000c1cc:	10 9b       	mov	r11,r8
8000c1ce:	fc 1c 3f 80 	movh	r12,0x3f80
8000c1d2:	f0 16 00 0a 	mcall	r6[40]
8000c1d6:	18 98       	mov	r8,r12
8000c1d8:	10 9a       	mov	r10,r8
8000c1da:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1de:	ea c9 ff eb 	sub	r9,r5,-21
8000c1e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000c1e6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c1ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c1ee:	a3 68       	lsl	r8,0x2
8000c1f0:	ee fa ff ec 	ld.w	r10,r7[-20]
8000c1f4:	f4 08 00 08 	add	r8,r10,r8
8000c1f8:	70 0a       	ld.w	r10,r8[0x0]
8000c1fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1fe:	2f 49       	sub	r9,-12
8000c200:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c204:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c208:	2f f8       	sub	r8,-1
8000c20a:	ef 68 ff fb 	st.b	r7[-5],r8
8000c20e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c212:	30 88       	mov	r8,8
8000c214:	f0 09 18 00 	cp.b	r9,r8
8000c218:	fe 98 ff d0 	brls	8000c1b8 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c21c:	30 08       	mov	r8,0
8000c21e:	ef 68 ff fb 	st.b	r7[-5],r8
8000c222:	c0 e8       	rjmp	8000c23e <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000c224:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c228:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c22c:	2d 09       	sub	r9,-48
8000c22e:	30 0a       	mov	r10,0
8000c230:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c234:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c238:	2f f8       	sub	r8,-1
8000c23a:	ef 68 ff fb 	st.b	r7[-5],r8
8000c23e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c242:	30 28       	mov	r8,2
8000c244:	f0 09 18 00 	cp.b	r9,r8
8000c248:	fe 98 ff ee 	brls	8000c224 <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000c24c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c250:	fc 19 3f 80 	movh	r9,0x3f80
8000c254:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c256:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c25a:	30 09       	mov	r9,0
8000c25c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c25e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c262:	30 09       	mov	r9,0
8000c264:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000c266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c26a:	30 09       	mov	r9,0
8000c26c:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000c26e:	30 08       	mov	r8,0
8000c270:	ef 68 ff fb 	st.b	r7[-5],r8
8000c274:	c2 a8       	rjmp	8000c2c8 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000c276:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c27a:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000c27e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c282:	2d 5a       	sub	r10,-43
8000c284:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000c288:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c28c:	f0 cb ff fa 	sub	r11,r8,-6
8000c290:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c294:	2e bb       	sub	r11,-21
8000c296:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c29a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c29e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c2a2:	f0 cb ff fa 	sub	r11,r8,-6
8000c2a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2aa:	2f 4b       	sub	r11,-12
8000c2ac:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c2b0:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000c2b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2b8:	2d c9       	sub	r9,-36
8000c2ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000c2be:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c2c2:	2f f8       	sub	r8,-1
8000c2c4:	ef 68 ff fb 	st.b	r7[-5],r8
8000c2c8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c2cc:	30 28       	mov	r8,2
8000c2ce:	f0 09 18 00 	cp.b	r9,r8
8000c2d2:	fe 98 ff d2 	brls	8000c276 <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000c2d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2da:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c2de:	10 9c       	mov	r12,r8
8000c2e0:	f0 16 00 02 	mcall	r6[8]
8000c2e4:	14 92       	mov	r2,r10
8000c2e6:	16 93       	mov	r3,r11
8000c2e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2ec:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c2f0:	ee 18 80 00 	eorh	r8,0x8000
8000c2f4:	10 9c       	mov	r12,r8
8000c2f6:	f0 16 00 02 	mcall	r6[8]
8000c2fa:	04 98       	mov	r8,r2
8000c2fc:	06 99       	mov	r9,r3
8000c2fe:	f0 16 00 54 	mcall	r6[336]
8000c302:	14 98       	mov	r8,r10
8000c304:	16 99       	mov	r9,r11
8000c306:	10 9a       	mov	r10,r8
8000c308:	12 9b       	mov	r11,r9
8000c30a:	f0 16 00 08 	mcall	r6[32]
8000c30e:	18 98       	mov	r8,r12
8000c310:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000c314:	fe cc 01 c4 	sub	r12,pc,452
8000c318:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000c31c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c320:	f0 16 00 02 	mcall	r6[8]
8000c324:	30 08       	mov	r8,0
8000c326:	fc 19 40 59 	movh	r9,0x4059
8000c32a:	f0 16 00 03 	mcall	r6[12]
8000c32e:	14 98       	mov	r8,r10
8000c330:	16 99       	mov	r9,r11
8000c332:	10 9a       	mov	r10,r8
8000c334:	12 9b       	mov	r11,r9
8000c336:	f0 16 00 14 	mcall	r6[80]
8000c33a:	18 98       	mov	r8,r12
8000c33c:	30 ab       	mov	r11,10
8000c33e:	10 9c       	mov	r12,r8
8000c340:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000c344:	fe cc 01 e4 	sub	r12,pc,484
8000c348:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000c34c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c350:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c354:	10 9c       	mov	r12,r8
8000c356:	f0 16 00 02 	mcall	r6[8]
8000c35a:	30 08       	mov	r8,0
8000c35c:	fc 19 40 59 	movh	r9,0x4059
8000c360:	f0 16 00 03 	mcall	r6[12]
8000c364:	14 98       	mov	r8,r10
8000c366:	16 99       	mov	r9,r11
8000c368:	10 9a       	mov	r10,r8
8000c36a:	12 9b       	mov	r11,r9
8000c36c:	f0 16 00 14 	mcall	r6[80]
8000c370:	18 98       	mov	r8,r12
8000c372:	30 ab       	mov	r11,10
8000c374:	10 9c       	mov	r12,r8
8000c376:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000c37a:	fe cc 02 02 	sub	r12,pc,514
8000c37e:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000c382:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c386:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c38a:	10 9c       	mov	r12,r8
8000c38c:	f0 16 00 02 	mcall	r6[8]
8000c390:	30 08       	mov	r8,0
8000c392:	fc 19 40 59 	movh	r9,0x4059
8000c396:	f0 16 00 03 	mcall	r6[12]
8000c39a:	14 98       	mov	r8,r10
8000c39c:	16 99       	mov	r9,r11
8000c39e:	10 9a       	mov	r10,r8
8000c3a0:	12 9b       	mov	r11,r9
8000c3a2:	f0 16 00 14 	mcall	r6[80]
8000c3a6:	18 98       	mov	r8,r12
8000c3a8:	30 ab       	mov	r11,10
8000c3aa:	10 9c       	mov	r12,r8
8000c3ac:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c3b0:	fe cc 02 34 	sub	r12,pc,564
8000c3b4:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000c3b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c3bc:	f0 f9 00 98 	ld.w	r9,r8[152]
8000c3c0:	ec f8 03 a8 	ld.w	r8,r6[936]
8000c3c4:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000c3c6:	fe cc 02 46 	sub	r12,pc,582
8000c3ca:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000c3ce:	ec f8 03 a8 	ld.w	r8,r6[936]
8000c3d2:	70 08       	ld.w	r8,r8[0x0]
8000c3d4:	10 9c       	mov	r12,r8
8000c3d6:	f0 16 00 02 	mcall	r6[8]
8000c3da:	30 08       	mov	r8,0
8000c3dc:	fc 19 40 59 	movh	r9,0x4059
8000c3e0:	f0 16 00 03 	mcall	r6[12]
8000c3e4:	14 98       	mov	r8,r10
8000c3e6:	16 99       	mov	r9,r11
8000c3e8:	10 9a       	mov	r10,r8
8000c3ea:	12 9b       	mov	r11,r9
8000c3ec:	f0 16 00 14 	mcall	r6[80]
8000c3f0:	18 98       	mov	r8,r12
8000c3f2:	30 ab       	mov	r11,10
8000c3f4:	10 9c       	mov	r12,r8
8000c3f6:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c3fa:	fe cc 02 7e 	sub	r12,pc,638
8000c3fe:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000c402:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c406:	f0 16 00 02 	mcall	r6[8]
8000c40a:	30 08       	mov	r8,0
8000c40c:	fc 19 40 00 	movh	r9,0x4000
8000c410:	f0 16 00 0c 	mcall	r6[48]
8000c414:	14 98       	mov	r8,r10
8000c416:	16 99       	mov	r9,r11
8000c418:	10 9a       	mov	r10,r8
8000c41a:	12 9b       	mov	r11,r9
8000c41c:	f0 16 00 bc 	mcall	r6[752]
8000c420:	14 98       	mov	r8,r10
8000c422:	16 99       	mov	r9,r11
8000c424:	10 9a       	mov	r10,r8
8000c426:	12 9b       	mov	r11,r9
8000c428:	f0 16 00 08 	mcall	r6[32]
8000c42c:	18 99       	mov	r9,r12
8000c42e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c432:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c434:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c438:	30 09       	mov	r9,0
8000c43a:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c43c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c440:	30 09       	mov	r9,0
8000c442:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000c444:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c448:	f0 16 00 02 	mcall	r6[8]
8000c44c:	30 08       	mov	r8,0
8000c44e:	fc 19 40 00 	movh	r9,0x4000
8000c452:	f0 16 00 0c 	mcall	r6[48]
8000c456:	14 98       	mov	r8,r10
8000c458:	16 99       	mov	r9,r11
8000c45a:	10 9a       	mov	r10,r8
8000c45c:	12 9b       	mov	r11,r9
8000c45e:	f0 16 00 ba 	mcall	r6[744]
8000c462:	14 98       	mov	r8,r10
8000c464:	16 99       	mov	r9,r11
8000c466:	10 9a       	mov	r10,r8
8000c468:	12 9b       	mov	r11,r9
8000c46a:	f0 16 00 08 	mcall	r6[32]
8000c46e:	18 99       	mov	r9,r12
8000c470:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c474:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000c476:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c47a:	e0 69 51 ec 	mov	r9,20972
8000c47e:	ea 19 3d b8 	orh	r9,0x3db8
8000c482:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000c486:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c48a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c48e:	fc 1b 41 70 	movh	r11,0x4170
8000c492:	10 9c       	mov	r12,r8
8000c494:	f0 16 00 0a 	mcall	r6[40]
8000c498:	18 98       	mov	r8,r12
8000c49a:	10 99       	mov	r9,r8
8000c49c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4a0:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000c4a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4a8:	e0 69 cc cd 	mov	r9,52429
8000c4ac:	ea 19 3d cc 	orh	r9,0x3dcc
8000c4b0:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000c4b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4b8:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000c4bc:	fc 1b 41 70 	movh	r11,0x4170
8000c4c0:	10 9c       	mov	r12,r8
8000c4c2:	f0 16 00 0a 	mcall	r6[40]
8000c4c6:	18 98       	mov	r8,r12
8000c4c8:	10 99       	mov	r9,r8
8000c4ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4ce:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000c4d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c4d6:	30 18       	mov	r8,1
8000c4d8:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000c4dc:	2f bd       	sub	sp,-20
8000c4de:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c4e2:	00 00       	add	r0,r0
8000c4e4:	80 00       	ld.sh	r0,r0[0x0]
8000c4e6:	c0 26       	brmi	8000c4ea <qfilter+0x2>

8000c4e8 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000c4e8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c4ec:	1a 97       	mov	r7,sp
8000c4ee:	fa cd 01 04 	sub	sp,sp,260
8000c4f2:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000c4f6:	1e 26       	rsub	r6,pc
8000c4f8:	ef 4c ff 18 	st.w	r7[-232],r12
8000c4fc:	ef 4b ff 14 	st.w	r7[-236],r11
8000c500:	ef 4a ff 10 	st.w	r7[-240],r10
8000c504:	12 98       	mov	r8,r9
8000c506:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000c50a:	30 08       	mov	r8,0
8000c50c:	ef 48 ff 1c 	st.w	r7[-228],r8
8000c510:	fc 18 3f 80 	movh	r8,0x3f80
8000c514:	ef 48 ff 20 	st.w	r7[-224],r8
8000c518:	30 08       	mov	r8,0
8000c51a:	ef 48 ff 24 	st.w	r7[-220],r8
8000c51e:	30 08       	mov	r8,0
8000c520:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c524:	30 08       	mov	r8,0
8000c526:	ef 68 ff df 	st.b	r7[-33],r8
8000c52a:	c0 c9       	rjmp	8000c742 <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000c52c:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c530:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c534:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c538:	2e 29       	sub	r9,-30
8000c53a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c53e:	10 9c       	mov	r12,r8
8000c540:	f0 16 00 02 	mcall	r6[8]
8000c544:	e0 68 cc cd 	mov	r8,52429
8000c548:	ea 18 cc cc 	orh	r8,0xcccc
8000c54c:	e0 69 cc cc 	mov	r9,52428
8000c550:	ea 19 3f ec 	orh	r9,0x3fec
8000c554:	f0 16 00 03 	mcall	r6[12]
8000c558:	14 98       	mov	r8,r10
8000c55a:	16 99       	mov	r9,r11
8000c55c:	10 92       	mov	r2,r8
8000c55e:	12 93       	mov	r3,r9
8000c560:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c564:	a3 68       	lsl	r8,0x2
8000c566:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c56a:	f2 08 00 08 	add	r8,r9,r8
8000c56e:	70 09       	ld.w	r9,r8[0x0]
8000c570:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c574:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c578:	2f 4a       	sub	r10,-12
8000c57a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c57e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c582:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c586:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c58a:	2e ba       	sub	r10,-21
8000c58c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c590:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c594:	10 9c       	mov	r12,r8
8000c596:	f0 16 00 02 	mcall	r6[8]
8000c59a:	e0 68 99 9a 	mov	r8,39322
8000c59e:	ea 18 99 99 	orh	r8,0x9999
8000c5a2:	e0 69 99 99 	mov	r9,39321
8000c5a6:	ea 19 3f b9 	orh	r9,0x3fb9
8000c5aa:	f0 16 00 03 	mcall	r6[12]
8000c5ae:	14 98       	mov	r8,r10
8000c5b0:	16 99       	mov	r9,r11
8000c5b2:	04 9a       	mov	r10,r2
8000c5b4:	06 9b       	mov	r11,r3
8000c5b6:	f0 16 00 05 	mcall	r6[20]
8000c5ba:	14 98       	mov	r8,r10
8000c5bc:	16 99       	mov	r9,r11
8000c5be:	10 9a       	mov	r10,r8
8000c5c0:	12 9b       	mov	r11,r9
8000c5c2:	f0 16 00 08 	mcall	r6[32]
8000c5c6:	18 9a       	mov	r10,r12
8000c5c8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5cc:	ea c9 ff e2 	sub	r9,r5,-30
8000c5d0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000c5d4:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c5d8:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c5dc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5e0:	2d f9       	sub	r9,-33
8000c5e2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c5e6:	10 9c       	mov	r12,r8
8000c5e8:	f0 16 00 02 	mcall	r6[8]
8000c5ec:	e0 68 8f 5c 	mov	r8,36700
8000c5f0:	ea 18 f5 c2 	orh	r8,0xf5c2
8000c5f4:	e0 69 5c 28 	mov	r9,23592
8000c5f8:	ea 19 3f ef 	orh	r9,0x3fef
8000c5fc:	f0 16 00 03 	mcall	r6[12]
8000c600:	14 98       	mov	r8,r10
8000c602:	16 99       	mov	r9,r11
8000c604:	10 92       	mov	r2,r8
8000c606:	12 93       	mov	r3,r9
8000c608:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c60c:	2f d8       	sub	r8,-3
8000c60e:	a3 68       	lsl	r8,0x2
8000c610:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c614:	f2 08 00 08 	add	r8,r9,r8
8000c618:	70 09       	ld.w	r9,r8[0x0]
8000c61a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c61e:	f0 ca ff fd 	sub	r10,r8,-3
8000c622:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c626:	2f 4a       	sub	r10,-12
8000c628:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c62c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c630:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c634:	f0 ca ff fd 	sub	r10,r8,-3
8000c638:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c63c:	2e ba       	sub	r10,-21
8000c63e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c642:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c646:	10 9c       	mov	r12,r8
8000c648:	f0 16 00 02 	mcall	r6[8]
8000c64c:	e0 68 14 7b 	mov	r8,5243
8000c650:	ea 18 47 ae 	orh	r8,0x47ae
8000c654:	e0 69 7a e1 	mov	r9,31457
8000c658:	ea 19 3f 94 	orh	r9,0x3f94
8000c65c:	f0 16 00 03 	mcall	r6[12]
8000c660:	14 98       	mov	r8,r10
8000c662:	16 99       	mov	r9,r11
8000c664:	04 9a       	mov	r10,r2
8000c666:	06 9b       	mov	r11,r3
8000c668:	f0 16 00 05 	mcall	r6[20]
8000c66c:	14 98       	mov	r8,r10
8000c66e:	16 99       	mov	r9,r11
8000c670:	10 9a       	mov	r10,r8
8000c672:	12 9b       	mov	r11,r9
8000c674:	f0 16 00 08 	mcall	r6[32]
8000c678:	18 9a       	mov	r10,r12
8000c67a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c67e:	ea c9 ff df 	sub	r9,r5,-33
8000c682:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000c686:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c68a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c68e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c692:	2d c9       	sub	r9,-36
8000c694:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c698:	10 9c       	mov	r12,r8
8000c69a:	f0 16 00 02 	mcall	r6[8]
8000c69e:	e0 68 cc cd 	mov	r8,52429
8000c6a2:	ea 18 cc cc 	orh	r8,0xcccc
8000c6a6:	e0 69 cc cc 	mov	r9,52428
8000c6aa:	ea 19 3f ec 	orh	r9,0x3fec
8000c6ae:	f0 16 00 03 	mcall	r6[12]
8000c6b2:	14 98       	mov	r8,r10
8000c6b4:	16 99       	mov	r9,r11
8000c6b6:	10 92       	mov	r2,r8
8000c6b8:	12 93       	mov	r3,r9
8000c6ba:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6be:	2f a8       	sub	r8,-6
8000c6c0:	a3 68       	lsl	r8,0x2
8000c6c2:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c6c6:	f2 08 00 08 	add	r8,r9,r8
8000c6ca:	70 09       	ld.w	r9,r8[0x0]
8000c6cc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6d0:	f0 ca ff fa 	sub	r10,r8,-6
8000c6d4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6d8:	2f 4a       	sub	r10,-12
8000c6da:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c6de:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c6e2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6e6:	f0 ca ff fa 	sub	r10,r8,-6
8000c6ea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6ee:	2e ba       	sub	r10,-21
8000c6f0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c6f4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c6f8:	10 9c       	mov	r12,r8
8000c6fa:	f0 16 00 02 	mcall	r6[8]
8000c6fe:	e0 68 99 9a 	mov	r8,39322
8000c702:	ea 18 99 99 	orh	r8,0x9999
8000c706:	e0 69 99 99 	mov	r9,39321
8000c70a:	ea 19 3f b9 	orh	r9,0x3fb9
8000c70e:	f0 16 00 03 	mcall	r6[12]
8000c712:	14 98       	mov	r8,r10
8000c714:	16 99       	mov	r9,r11
8000c716:	04 9a       	mov	r10,r2
8000c718:	06 9b       	mov	r11,r3
8000c71a:	f0 16 00 05 	mcall	r6[20]
8000c71e:	14 98       	mov	r8,r10
8000c720:	16 99       	mov	r9,r11
8000c722:	10 9a       	mov	r10,r8
8000c724:	12 9b       	mov	r11,r9
8000c726:	f0 16 00 08 	mcall	r6[32]
8000c72a:	18 9a       	mov	r10,r12
8000c72c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c730:	ea c9 ff dc 	sub	r9,r5,-36
8000c734:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c738:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c73c:	2f f8       	sub	r8,-1
8000c73e:	ef 68 ff df 	st.b	r7[-33],r8
8000c742:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c746:	30 28       	mov	r8,2
8000c748:	f0 09 18 00 	cp.b	r9,r8
8000c74c:	fe 98 fe f0 	brls	8000c52c <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c750:	30 08       	mov	r8,0
8000c752:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c756:	30 08       	mov	r8,0
8000c758:	ef 48 ff 80 	st.w	r7[-128],r8
8000c75c:	30 08       	mov	r8,0
8000c75e:	ef 48 ff 84 	st.w	r7[-124],r8
8000c762:	fc 18 bf 80 	movh	r8,0xbf80
8000c766:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c76a:	ee ca 00 94 	sub	r10,r7,148
8000c76e:	20 4d       	sub	sp,16
8000c770:	1a 98       	mov	r8,sp
8000c772:	ee c9 00 84 	sub	r9,r7,132
8000c776:	20 08       	sub	r8,0
8000c778:	20 09       	sub	r9,0
8000c77a:	72 0b       	ld.w	r11,r9[0x0]
8000c77c:	91 0b       	st.w	r8[0x0],r11
8000c77e:	72 1b       	ld.w	r11,r9[0x4]
8000c780:	91 1b       	st.w	r8[0x4],r11
8000c782:	72 2b       	ld.w	r11,r9[0x8]
8000c784:	91 2b       	st.w	r8[0x8],r11
8000c786:	72 39       	ld.w	r9,r9[0xc]
8000c788:	91 39       	st.w	r8[0xc],r9
8000c78a:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c78e:	20 4d       	sub	sp,16
8000c790:	1a 98       	mov	r8,sp
8000c792:	20 08       	sub	r8,0
8000c794:	20 09       	sub	r9,0
8000c796:	72 0b       	ld.w	r11,r9[0x0]
8000c798:	91 0b       	st.w	r8[0x0],r11
8000c79a:	72 1b       	ld.w	r11,r9[0x4]
8000c79c:	91 1b       	st.w	r8[0x4],r11
8000c79e:	72 2b       	ld.w	r11,r9[0x8]
8000c7a0:	91 2b       	st.w	r8[0x8],r11
8000c7a2:	72 39       	ld.w	r9,r9[0xc]
8000c7a4:	91 39       	st.w	r8[0xc],r9
8000c7a6:	14 9c       	mov	r12,r10
8000c7a8:	fe b0 fb 6e 	rcall	8000be84 <quat_global_to_local>
8000c7ac:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c7ae:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7b2:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c7b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ba:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c7be:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c7c2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7c6:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c7ca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ce:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c7d2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7d6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c7da:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7de:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c7e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7e6:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c7ea:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7ee:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c7f2:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c7f6:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c7fa:	f0 16 00 02 	mcall	r6[8]
8000c7fe:	14 98       	mov	r8,r10
8000c800:	16 99       	mov	r9,r11
8000c802:	30 05       	mov	r5,0
8000c804:	e0 6a 8f 5b 	mov	r10,36699
8000c808:	ea 1a f5 c2 	orh	r10,0xf5c2
8000c80c:	e0 6b 5c 28 	mov	r11,23592
8000c810:	ea 1b 3f df 	orh	r11,0x3fdf
8000c814:	f0 16 00 1e 	mcall	r6[120]
8000c818:	18 98       	mov	r8,r12
8000c81a:	58 08       	cp.w	r8,0
8000c81c:	c0 20       	breq	8000c820 <qfilter+0x338>
8000c81e:	30 15       	mov	r5,1
8000c820:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c824:	c7 30       	breq	8000c90a <qfilter+0x422>
8000c826:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c82a:	f0 16 00 02 	mcall	r6[8]
8000c82e:	30 05       	mov	r5,0
8000c830:	e0 68 d7 0b 	mov	r8,55051
8000c834:	ea 18 70 a3 	orh	r8,0x70a3
8000c838:	e0 69 0a 3d 	mov	r9,2621
8000c83c:	ea 19 3f fb 	orh	r9,0x3ffb
8000c840:	f0 16 00 1e 	mcall	r6[120]
8000c844:	18 98       	mov	r8,r12
8000c846:	58 08       	cp.w	r8,0
8000c848:	c0 20       	breq	8000c84c <qfilter+0x364>
8000c84a:	30 15       	mov	r5,1
8000c84c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c850:	c5 d0       	breq	8000c90a <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000c852:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c856:	fe b0 fc 13 	rcall	8000c07c <fast_sqrt>
8000c85a:	18 98       	mov	r8,r12
8000c85c:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000c860:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c864:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c868:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c86c:	10 9c       	mov	r12,r8
8000c86e:	f0 16 00 0a 	mcall	r6[40]
8000c872:	18 98       	mov	r8,r12
8000c874:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000c878:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c87c:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c880:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c884:	10 9c       	mov	r12,r8
8000c886:	f0 16 00 0a 	mcall	r6[40]
8000c88a:	18 98       	mov	r8,r12
8000c88c:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000c890:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c894:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c898:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c89c:	10 9c       	mov	r12,r8
8000c89e:	f0 16 00 0a 	mcall	r6[40]
8000c8a2:	18 98       	mov	r8,r12
8000c8a4:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000c8a8:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000c8ac:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c8b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8b4:	ee fa ff b4 	ld.w	r10,r7[-76]
8000c8b8:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c8bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c8c0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c8c4:	ef 48 ff d0 	st.w	r7[-48],r8
8000c8c8:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000c8cc:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c8d0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8d4:	ee fa ff ac 	ld.w	r10,r7[-84]
8000c8d8:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c8dc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c8e0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c8e4:	ef 48 ff d4 	st.w	r7[-44],r8
8000c8e8:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000c8ec:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c8f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8f4:	ee fa ff b0 	ld.w	r10,r7[-80]
8000c8f8:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c8fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c900:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c904:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c908:	c0 a8       	rjmp	8000c91c <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000c90a:	30 08       	mov	r8,0
8000c90c:	ef 48 ff d0 	st.w	r7[-48],r8
8000c910:	30 08       	mov	r8,0
8000c912:	ef 48 ff d4 	st.w	r7[-44],r8
8000c916:	30 08       	mov	r8,0
8000c918:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000c91c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c920:	f0 c9 ff 70 	sub	r9,r8,-144
8000c924:	ee c8 01 04 	sub	r8,r7,260
8000c928:	12 9b       	mov	r11,r9
8000c92a:	10 9c       	mov	r12,r8
8000c92c:	fe b0 f9 98 	rcall	8000bc5c <quat_from_vector>
8000c930:	ee c8 00 74 	sub	r8,r7,116
8000c934:	ee c9 01 04 	sub	r9,r7,260
8000c938:	20 08       	sub	r8,0
8000c93a:	20 09       	sub	r9,0
8000c93c:	72 0a       	ld.w	r10,r9[0x0]
8000c93e:	91 0a       	st.w	r8[0x0],r10
8000c940:	72 1a       	ld.w	r10,r9[0x4]
8000c942:	91 1a       	st.w	r8[0x4],r10
8000c944:	72 2a       	ld.w	r10,r9[0x8]
8000c946:	91 2a       	st.w	r8[0x8],r10
8000c948:	72 39       	ld.w	r9,r9[0xc]
8000c94a:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000c94c:	ee ca 00 c4 	sub	r10,r7,196
8000c950:	20 4d       	sub	sp,16
8000c952:	1a 98       	mov	r8,sp
8000c954:	ee c9 00 74 	sub	r9,r7,116
8000c958:	20 08       	sub	r8,0
8000c95a:	20 09       	sub	r9,0
8000c95c:	72 0b       	ld.w	r11,r9[0x0]
8000c95e:	91 0b       	st.w	r8[0x0],r11
8000c960:	72 1b       	ld.w	r11,r9[0x4]
8000c962:	91 1b       	st.w	r8[0x4],r11
8000c964:	72 2b       	ld.w	r11,r9[0x8]
8000c966:	91 2b       	st.w	r8[0x8],r11
8000c968:	72 39       	ld.w	r9,r9[0xc]
8000c96a:	91 39       	st.w	r8[0xc],r9
8000c96c:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c970:	20 4d       	sub	sp,16
8000c972:	1a 98       	mov	r8,sp
8000c974:	20 08       	sub	r8,0
8000c976:	20 09       	sub	r9,0
8000c978:	72 0b       	ld.w	r11,r9[0x0]
8000c97a:	91 0b       	st.w	r8[0x0],r11
8000c97c:	72 1b       	ld.w	r11,r9[0x4]
8000c97e:	91 1b       	st.w	r8[0x4],r11
8000c980:	72 2b       	ld.w	r11,r9[0x8]
8000c982:	91 2b       	st.w	r8[0x8],r11
8000c984:	72 39       	ld.w	r9,r9[0xc]
8000c986:	91 39       	st.w	r8[0xc],r9
8000c988:	14 9c       	mov	r12,r10
8000c98a:	fe b0 fa fb 	rcall	8000bf80 <quat_local_to_global>
8000c98e:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000c990:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000c994:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c998:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c99c:	ee fa ff 44 	ld.w	r10,r7[-188]
8000c9a0:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c9a4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c9ac:	ee fa ff 48 	ld.w	r10,r7[-184]
8000c9b0:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000c9b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9b8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c9bc:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c9c0:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c9c4:	f0 16 00 02 	mcall	r6[8]
8000c9c8:	14 98       	mov	r8,r10
8000c9ca:	16 99       	mov	r9,r11
8000c9cc:	30 05       	mov	r5,0
8000c9ce:	e0 6a 14 7c 	mov	r10,5244
8000c9d2:	ea 1a 47 ae 	orh	r10,0x47ae
8000c9d6:	e0 6b 7a e1 	mov	r11,31457
8000c9da:	ea 1b 3f c4 	orh	r11,0x3fc4
8000c9de:	f0 16 00 1e 	mcall	r6[120]
8000c9e2:	18 98       	mov	r8,r12
8000c9e4:	58 08       	cp.w	r8,0
8000c9e6:	c0 20       	breq	8000c9ea <qfilter+0x502>
8000c9e8:	30 15       	mov	r5,1
8000c9ea:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c9ee:	e0 80 00 c2 	breq	8000cb72 <qfilter+0x68a>
8000c9f2:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c9f6:	f0 16 00 02 	mcall	r6[8]
8000c9fa:	30 05       	mov	r5,0
8000c9fc:	e0 68 51 ec 	mov	r8,20972
8000ca00:	ea 18 1e b8 	orh	r8,0x1eb8
8000ca04:	e0 69 eb 85 	mov	r9,60293
8000ca08:	ea 19 40 09 	orh	r9,0x4009
8000ca0c:	f0 16 00 1e 	mcall	r6[120]
8000ca10:	18 98       	mov	r8,r12
8000ca12:	58 08       	cp.w	r8,0
8000ca14:	c0 20       	breq	8000ca18 <qfilter+0x530>
8000ca16:	30 15       	mov	r5,1
8000ca18:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ca1c:	e0 80 00 ab 	breq	8000cb72 <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000ca20:	ee fc ff f0 	ld.w	r12,r7[-16]
8000ca24:	fe b0 fb 2c 	rcall	8000c07c <fast_sqrt>
8000ca28:	18 98       	mov	r8,r12
8000ca2a:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000ca2e:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000ca32:	ee fb ff f4 	ld.w	r11,r7[-12]
8000ca36:	10 9c       	mov	r12,r8
8000ca38:	f0 16 00 0a 	mcall	r6[40]
8000ca3c:	18 98       	mov	r8,r12
8000ca3e:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000ca42:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000ca46:	ee fb ff f4 	ld.w	r11,r7[-12]
8000ca4a:	10 9c       	mov	r12,r8
8000ca4c:	f0 16 00 0a 	mcall	r6[40]
8000ca50:	18 98       	mov	r8,r12
8000ca52:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000ca56:	30 08       	mov	r8,0
8000ca58:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000ca5c:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000ca60:	ee ca 01 04 	sub	r10,r7,260
8000ca64:	20 4d       	sub	sp,16
8000ca66:	1a 98       	mov	r8,sp
8000ca68:	ee c9 00 e4 	sub	r9,r7,228
8000ca6c:	20 08       	sub	r8,0
8000ca6e:	20 09       	sub	r9,0
8000ca70:	72 0b       	ld.w	r11,r9[0x0]
8000ca72:	91 0b       	st.w	r8[0x0],r11
8000ca74:	72 1b       	ld.w	r11,r9[0x4]
8000ca76:	91 1b       	st.w	r8[0x4],r11
8000ca78:	72 2b       	ld.w	r11,r9[0x8]
8000ca7a:	91 2b       	st.w	r8[0x8],r11
8000ca7c:	72 39       	ld.w	r9,r9[0xc]
8000ca7e:	91 39       	st.w	r8[0xc],r9
8000ca80:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ca84:	20 4d       	sub	sp,16
8000ca86:	1a 98       	mov	r8,sp
8000ca88:	20 08       	sub	r8,0
8000ca8a:	20 09       	sub	r9,0
8000ca8c:	72 0b       	ld.w	r11,r9[0x0]
8000ca8e:	91 0b       	st.w	r8[0x0],r11
8000ca90:	72 1b       	ld.w	r11,r9[0x4]
8000ca92:	91 1b       	st.w	r8[0x4],r11
8000ca94:	72 2b       	ld.w	r11,r9[0x8]
8000ca96:	91 2b       	st.w	r8[0x8],r11
8000ca98:	72 39       	ld.w	r9,r9[0xc]
8000ca9a:	91 39       	st.w	r8[0xc],r9
8000ca9c:	14 9c       	mov	r12,r10
8000ca9e:	fe b0 f9 f3 	rcall	8000be84 <quat_global_to_local>
8000caa2:	2f 8d       	sub	sp,-32
8000caa4:	ea c8 ff e0 	sub	r8,r5,-32
8000caa8:	ee c9 01 04 	sub	r9,r7,260
8000caac:	20 08       	sub	r8,0
8000caae:	20 09       	sub	r9,0
8000cab0:	72 0a       	ld.w	r10,r9[0x0]
8000cab2:	91 0a       	st.w	r8[0x0],r10
8000cab4:	72 1a       	ld.w	r10,r9[0x4]
8000cab6:	91 1a       	st.w	r8[0x4],r10
8000cab8:	72 2a       	ld.w	r10,r9[0x8]
8000caba:	91 2a       	st.w	r8[0x8],r10
8000cabc:	72 39       	ld.w	r9,r9[0xc]
8000cabe:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000cac0:	ee ca 00 d4 	sub	r10,r7,212
8000cac4:	20 4d       	sub	sp,16
8000cac6:	1a 98       	mov	r8,sp
8000cac8:	ee c9 00 c4 	sub	r9,r7,196
8000cacc:	20 08       	sub	r8,0
8000cace:	20 09       	sub	r9,0
8000cad0:	72 0b       	ld.w	r11,r9[0x0]
8000cad2:	91 0b       	st.w	r8[0x0],r11
8000cad4:	72 1b       	ld.w	r11,r9[0x4]
8000cad6:	91 1b       	st.w	r8[0x4],r11
8000cad8:	72 2b       	ld.w	r11,r9[0x8]
8000cada:	91 2b       	st.w	r8[0x8],r11
8000cadc:	72 39       	ld.w	r9,r9[0xc]
8000cade:	91 39       	st.w	r8[0xc],r9
8000cae0:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cae4:	20 4d       	sub	sp,16
8000cae6:	1a 98       	mov	r8,sp
8000cae8:	20 08       	sub	r8,0
8000caea:	20 09       	sub	r9,0
8000caec:	72 0b       	ld.w	r11,r9[0x0]
8000caee:	91 0b       	st.w	r8[0x0],r11
8000caf0:	72 1b       	ld.w	r11,r9[0x4]
8000caf2:	91 1b       	st.w	r8[0x4],r11
8000caf4:	72 2b       	ld.w	r11,r9[0x8]
8000caf6:	91 2b       	st.w	r8[0x8],r11
8000caf8:	72 39       	ld.w	r9,r9[0xc]
8000cafa:	91 39       	st.w	r8[0xc],r9
8000cafc:	14 9c       	mov	r12,r10
8000cafe:	fe b0 f9 c3 	rcall	8000be84 <quat_global_to_local>
8000cb02:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000cb04:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000cb08:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb0c:	70 b8       	ld.w	r8,r8[0x2c]
8000cb0e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb12:	ee fa ff 38 	ld.w	r10,r7[-200]
8000cb16:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb1a:	70 a8       	ld.w	r8,r8[0x28]
8000cb1c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb20:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb24:	ef 48 ff c4 	st.w	r7[-60],r8
8000cb28:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000cb2c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb30:	70 98       	ld.w	r8,r8[0x24]
8000cb32:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb36:	ee fa ff 30 	ld.w	r10,r7[-208]
8000cb3a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb3e:	70 b8       	ld.w	r8,r8[0x2c]
8000cb40:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb44:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb48:	ef 48 ff c8 	st.w	r7[-56],r8
8000cb4c:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000cb50:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb54:	70 a8       	ld.w	r8,r8[0x28]
8000cb56:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb5a:	ee fa ff 34 	ld.w	r10,r7[-204]
8000cb5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb62:	70 98       	ld.w	r8,r8[0x24]
8000cb64:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb68:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb6c:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000cb70:	c0 a8       	rjmp	8000cb84 <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000cb72:	30 08       	mov	r8,0
8000cb74:	ef 48 ff c4 	st.w	r7[-60],r8
8000cb78:	30 08       	mov	r8,0
8000cb7a:	ef 48 ff c8 	st.w	r7[-56],r8
8000cb7e:	30 08       	mov	r8,0
8000cb80:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000cb84:	30 08       	mov	r8,0
8000cb86:	ef 68 ff df 	st.b	r7[-33],r8
8000cb8a:	c3 48       	rjmp	8000cbf2 <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000cb8c:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000cb90:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000cb94:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb98:	2e 29       	sub	r9,-30
8000cb9a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000cb9e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cba2:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000cba6:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbaa:	a3 68       	lsl	r8,0x2
8000cbac:	ee 08 00 08 	add	r8,r7,r8
8000cbb0:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000cbb4:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cbb8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbbc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbc0:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000cbc4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbc8:	a3 68       	lsl	r8,0x2
8000cbca:	ee 08 00 08 	add	r8,r7,r8
8000cbce:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000cbd2:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cbd6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbda:	f4 c8 ff ff 	sub	r8,r10,-1
8000cbde:	a3 68       	lsl	r8,0x2
8000cbe0:	ee 08 00 08 	add	r8,r7,r8
8000cbe4:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000cbe8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbec:	2f f8       	sub	r8,-1
8000cbee:	ef 68 ff df 	st.b	r7[-33],r8
8000cbf2:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000cbf6:	30 28       	mov	r8,2
8000cbf8:	f0 09 18 00 	cp.b	r9,r8
8000cbfc:	fe 98 ff c8 	brls	8000cb8c <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000cc00:	30 08       	mov	r8,0
8000cc02:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000cc06:	ee ca 00 64 	sub	r10,r7,100
8000cc0a:	20 4d       	sub	sp,16
8000cc0c:	1a 98       	mov	r8,sp
8000cc0e:	ee c9 00 74 	sub	r9,r7,116
8000cc12:	20 08       	sub	r8,0
8000cc14:	20 09       	sub	r9,0
8000cc16:	72 0b       	ld.w	r11,r9[0x0]
8000cc18:	91 0b       	st.w	r8[0x0],r11
8000cc1a:	72 1b       	ld.w	r11,r9[0x4]
8000cc1c:	91 1b       	st.w	r8[0x4],r11
8000cc1e:	72 2b       	ld.w	r11,r9[0x8]
8000cc20:	91 2b       	st.w	r8[0x8],r11
8000cc22:	72 39       	ld.w	r9,r9[0xc]
8000cc24:	91 39       	st.w	r8[0xc],r9
8000cc26:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cc2a:	20 4d       	sub	sp,16
8000cc2c:	1a 98       	mov	r8,sp
8000cc2e:	20 08       	sub	r8,0
8000cc30:	20 09       	sub	r9,0
8000cc32:	72 0b       	ld.w	r11,r9[0x0]
8000cc34:	91 0b       	st.w	r8[0x0],r11
8000cc36:	72 1b       	ld.w	r11,r9[0x4]
8000cc38:	91 1b       	st.w	r8[0x4],r11
8000cc3a:	72 2b       	ld.w	r11,r9[0x8]
8000cc3c:	91 2b       	st.w	r8[0x8],r11
8000cc3e:	72 39       	ld.w	r9,r9[0xc]
8000cc40:	91 39       	st.w	r8[0xc],r9
8000cc42:	14 9c       	mov	r12,r10
8000cc44:	fe b0 f8 68 	rcall	8000bd14 <quat_multi>
8000cc48:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000cc4a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc4e:	70 09       	ld.w	r9,r8[0x0]
8000cc50:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000cc54:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc58:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc5c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc60:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc64:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000cc66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc6a:	70 19       	ld.w	r9,r8[0x4]
8000cc6c:	ee fa ff a0 	ld.w	r10,r7[-96]
8000cc70:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc74:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc78:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc80:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000cc82:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc86:	70 29       	ld.w	r9,r8[0x8]
8000cc88:	ee fa ff a4 	ld.w	r10,r7[-92]
8000cc8c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc90:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc94:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc98:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc9c:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000cc9e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cca2:	70 39       	ld.w	r9,r8[0xc]
8000cca4:	ee fa ff a8 	ld.w	r10,r7[-88]
8000cca8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ccac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ccb0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ccb4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccb8:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000ccba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccbe:	70 09       	ld.w	r9,r8[0x0]
8000ccc0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccc4:	70 08       	ld.w	r8,r8[0x0]
8000ccc6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ccca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccce:	70 1a       	ld.w	r10,r8[0x4]
8000ccd0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccd4:	70 18       	ld.w	r8,r8[0x4]
8000ccd6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ccda:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ccde:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cce2:	70 2a       	ld.w	r10,r8[0x8]
8000cce4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cce8:	70 28       	ld.w	r8,r8[0x8]
8000ccea:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ccee:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ccf2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccf6:	70 3a       	ld.w	r10,r8[0xc]
8000ccf8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccfc:	70 38       	ld.w	r8,r8[0xc]
8000ccfe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd02:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cd06:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000cd0a:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cd0e:	f0 16 00 02 	mcall	r6[8]
8000cd12:	30 05       	mov	r5,0
8000cd14:	e0 68 43 2d 	mov	r8,17197
8000cd18:	ea 18 eb 1c 	orh	r8,0xeb1c
8000cd1c:	e0 69 36 e2 	mov	r9,14050
8000cd20:	ea 19 3f 1a 	orh	r9,0x3f1a
8000cd24:	f0 16 00 1e 	mcall	r6[120]
8000cd28:	18 98       	mov	r8,r12
8000cd2a:	58 08       	cp.w	r8,0
8000cd2c:	c0 20       	breq	8000cd30 <qfilter+0x848>
8000cd2e:	30 15       	mov	r5,1
8000cd30:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cd34:	c0 80       	breq	8000cd44 <qfilter+0x85c>
8000cd36:	e0 68 d7 0a 	mov	r8,55050
8000cd3a:	ea 18 3c 23 	orh	r8,0x3c23
8000cd3e:	ef 48 ff e4 	st.w	r7[-28],r8
8000cd42:	c0 88       	rjmp	8000cd52 <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000cd44:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cd48:	fe b0 f9 9a 	rcall	8000c07c <fast_sqrt>
8000cd4c:	18 98       	mov	r8,r12
8000cd4e:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000cd52:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd56:	70 08       	ld.w	r8,r8[0x0]
8000cd58:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd5c:	10 9c       	mov	r12,r8
8000cd5e:	f0 16 00 0a 	mcall	r6[40]
8000cd62:	18 98       	mov	r8,r12
8000cd64:	10 99       	mov	r9,r8
8000cd66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd6a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000cd6c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd70:	70 18       	ld.w	r8,r8[0x4]
8000cd72:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd76:	10 9c       	mov	r12,r8
8000cd78:	f0 16 00 0a 	mcall	r6[40]
8000cd7c:	18 98       	mov	r8,r12
8000cd7e:	10 99       	mov	r9,r8
8000cd80:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd84:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000cd86:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd8a:	70 28       	ld.w	r8,r8[0x8]
8000cd8c:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd90:	10 9c       	mov	r12,r8
8000cd92:	f0 16 00 0a 	mcall	r6[40]
8000cd96:	18 98       	mov	r8,r12
8000cd98:	10 99       	mov	r9,r8
8000cd9a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd9e:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000cda0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cda4:	70 38       	ld.w	r8,r8[0xc]
8000cda6:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cdaa:	10 9c       	mov	r12,r8
8000cdac:	f0 16 00 0a 	mcall	r6[40]
8000cdb0:	18 98       	mov	r8,r12
8000cdb2:	10 99       	mov	r9,r8
8000cdb4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdb8:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000cdba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdbe:	70 c5       	ld.w	r5,r8[0x30]
8000cdc0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cdc4:	10 99       	mov	r9,r8
8000cdc6:	ee 19 80 00 	eorh	r9,0x8000
8000cdca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdce:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cdd2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cdd6:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000cdda:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cdde:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cde2:	73 59       	ld.w	r9,r9[0x54]
8000cde4:	12 9b       	mov	r11,r9
8000cde6:	10 9c       	mov	r12,r8
8000cde8:	f0 16 00 0a 	mcall	r6[40]
8000cdec:	18 98       	mov	r8,r12
8000cdee:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cdf2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdf6:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000cdf8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdfc:	70 d5       	ld.w	r5,r8[0x34]
8000cdfe:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce02:	10 99       	mov	r9,r8
8000ce04:	ee 19 80 00 	eorh	r9,0x8000
8000ce08:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce0c:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000ce10:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ce14:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000ce18:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ce1c:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ce20:	73 69       	ld.w	r9,r9[0x58]
8000ce22:	12 9b       	mov	r11,r9
8000ce24:	10 9c       	mov	r12,r8
8000ce26:	f0 16 00 0a 	mcall	r6[40]
8000ce2a:	18 98       	mov	r8,r12
8000ce2c:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000ce30:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce34:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000ce36:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce3a:	70 e5       	ld.w	r5,r8[0x38]
8000ce3c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce40:	10 99       	mov	r9,r8
8000ce42:	ee 19 80 00 	eorh	r9,0x8000
8000ce46:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce4a:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000ce4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ce52:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000ce56:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ce5a:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ce5e:	73 79       	ld.w	r9,r9[0x5c]
8000ce60:	12 9b       	mov	r11,r9
8000ce62:	10 9c       	mov	r12,r8
8000ce64:	f0 16 00 0a 	mcall	r6[40]
8000ce68:	18 98       	mov	r8,r12
8000ce6a:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000ce6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce72:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000ce74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce78:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000ce7c:	58 18       	cp.w	r8,1
8000ce7e:	c1 c0       	breq	8000ceb6 <qfilter+0x9ce>
8000ce80:	58 28       	cp.w	r8,2
8000ce82:	c3 00       	breq	8000cee2 <qfilter+0x9fa>
8000ce84:	58 08       	cp.w	r8,0
8000ce86:	e0 81 00 94 	brne	8000cfae <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000ce8a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce8e:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ce92:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000ce96:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce9a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ce9e:	fc 1b 41 70 	movh	r11,0x4170
8000cea2:	10 9c       	mov	r12,r8
8000cea4:	f0 16 00 0a 	mcall	r6[40]
8000cea8:	18 98       	mov	r8,r12
8000ceaa:	10 99       	mov	r9,r8
8000ceac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceb0:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000ceb4:	c9 28       	rjmp	8000cfd8 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000ceb6:	e0 68 99 9a 	mov	r8,39322
8000ceba:	ea 18 3e 99 	orh	r8,0x3e99
8000cebe:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000cec2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cec6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ceca:	fc 1b 41 20 	movh	r11,0x4120
8000cece:	10 9c       	mov	r12,r8
8000ced0:	f0 16 00 0a 	mcall	r6[40]
8000ced4:	18 98       	mov	r8,r12
8000ced6:	10 99       	mov	r9,r8
8000ced8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cedc:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000cee0:	c7 c8       	rjmp	8000cfd8 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000cee2:	e0 68 99 9a 	mov	r8,39322
8000cee6:	ea 18 3e 99 	orh	r8,0x3e99
8000ceea:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000ceee:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cef2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cef6:	fc 1b 41 20 	movh	r11,0x4120
8000cefa:	10 9c       	mov	r12,r8
8000cefc:	f0 16 00 0a 	mcall	r6[40]
8000cf00:	18 98       	mov	r8,r12
8000cf02:	10 99       	mov	r9,r8
8000cf04:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf08:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000cf0c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf10:	70 f9       	ld.w	r9,r8[0x3c]
8000cf12:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf16:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf1a:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf1e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf22:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf26:	f0 fb 00 84 	ld.w	r11,r8[132]
8000cf2a:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cf2e:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cf32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cf36:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cf3a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf3e:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000cf40:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf44:	71 09       	ld.w	r9,r8[0x40]
8000cf46:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf4a:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf4e:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf52:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf56:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf5a:	f0 fb 00 88 	ld.w	r11,r8[136]
8000cf5e:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cf62:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cf66:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cf6a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cf6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf72:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000cf76:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf7a:	71 19       	ld.w	r9,r8[0x44]
8000cf7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf80:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf84:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf88:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf8c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf90:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000cf94:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cf98:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cf9c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cfa0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cfa4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfa8:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000cfac:	c1 68       	rjmp	8000cfd8 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000cfae:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfb2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cfb6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cfba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfbe:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cfc2:	fc 1b 41 70 	movh	r11,0x4170
8000cfc6:	10 9c       	mov	r12,r8
8000cfc8:	f0 16 00 0a 	mcall	r6[40]
8000cfcc:	18 98       	mov	r8,r12
8000cfce:	10 99       	mov	r9,r8
8000cfd0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfd4:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000cfd8:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000cfdc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfe0:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000cfe2:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000cfe6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfea:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000cfec:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000cff0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cff4:	91 79       	st.w	r8[0x1c],r9
	
}
8000cff6:	2b fd       	sub	sp,-260
8000cff8:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000cffc:	80 00       	ld.sh	r0,r0[0x0]
8000cffe:	c3 7a       	rjmp	8000cc6c <qfilter+0x784>

8000d000 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d000:	eb cd 40 c0 	pushm	r6-r7,lr
8000d004:	1a 97       	mov	r7,sp
8000d006:	20 3d       	sub	sp,12
8000d008:	49 06       	lddpc	r6,8000d048 <mav_array_memcpy+0x48>
8000d00a:	1e 26       	rsub	r6,pc
8000d00c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d010:	ef 4b ff f8 	st.w	r7[-8],r11
8000d014:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d01c:	58 08       	cp.w	r8,0
8000d01e:	c0 91       	brne	8000d030 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d020:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d024:	30 0b       	mov	r11,0
8000d026:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d02a:	f0 16 00 31 	mcall	r6[196]
8000d02e:	c0 98       	rjmp	8000d040 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d030:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d034:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d038:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d03c:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000d040:	2f dd       	sub	sp,-12
8000d042:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d046:	00 00       	add	r0,r0
8000d048:	80 00       	ld.sh	r0,r0[0x0]
8000d04a:	ce 8e       	rcall	8000ce1a <qfilter+0x932>

8000d04c <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000d04c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d050:	1a 97       	mov	r7,sp
8000d052:	4d 86       	lddpc	r6,8000d1b0 <initialise_central_data+0x164>
8000d054:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
8000d056:	ec f8 00 64 	ld.w	r8,r6[100]
8000d05a:	30 09       	mov	r9,0
8000d05c:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000d060:	ec f8 00 64 	ld.w	r8,r6[100]
8000d064:	30 09       	mov	r9,0
8000d066:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000d06a:	ec f8 00 64 	ld.w	r8,r6[100]
8000d06e:	30 09       	mov	r9,0
8000d070:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000d074:	ec f8 00 64 	ld.w	r8,r6[100]
8000d078:	fc 19 bf 80 	movh	r9,0xbf80
8000d07c:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_copter(&centralData.stabiliser_stack);
8000d080:	ec f8 00 64 	ld.w	r8,r6[100]
8000d084:	f0 c8 fe 60 	sub	r8,r8,-416
8000d088:	10 9c       	mov	r12,r8
8000d08a:	f0 16 01 7e 	mcall	r6[1528]


		centralData.simulation_mode=0;
8000d08e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d092:	30 09       	mov	r9,0
8000d094:	f1 49 10 c0 	st.w	r8[4288],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
8000d098:	ec f9 00 64 	ld.w	r9,r6[100]
8000d09c:	30 08       	mov	r8,0
8000d09e:	f3 58 10 1c 	st.h	r9[4124],r8
		centralData.waypoint_set = false;
8000d0a2:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0a6:	30 08       	mov	r8,0
8000d0a8:	f3 68 10 b4 	st.b	r9[4276],r8
		centralData.waypoint_sending = false;
8000d0ac:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0b0:	30 08       	mov	r8,0
8000d0b2:	f3 68 10 b5 	st.b	r9[4277],r8
		centralData.waypoint_receiving = false;
8000d0b6:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0ba:	30 08       	mov	r8,0
8000d0bc:	f3 68 10 b6 	st.b	r9[4278],r8
		centralData.waypoint_hold_init = false;
8000d0c0:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0c4:	30 08       	mov	r8,0
8000d0c6:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData.critical_landing = false;
8000d0ca:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0ce:	30 08       	mov	r8,0
8000d0d0:	f3 68 10 b8 	st.b	r9[4280],r8
		centralData.critical_init = false;
8000d0d4:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0d8:	30 08       	mov	r8,0
8000d0da:	f3 68 10 b9 	st.b	r9[4281],r8
		centralData.collision_avoidance = false;
8000d0de:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0e2:	30 08       	mov	r8,0
8000d0e4:	f3 68 10 bb 	st.b	r9[4283],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000d0e8:	ec fa 00 64 	ld.w	r10,r6[100]
8000d0ec:	e0 68 33 27 	mov	r8,13095
8000d0f0:	ea 18 3f a0 	orh	r8,0x3fa0
8000d0f4:	e0 69 43 a1 	mov	r9,17313
8000d0f8:	ea 19 40 1a 	orh	r9,0x401a
8000d0fc:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000d100:	ec fa 00 64 	ld.w	r10,r6[100]
8000d104:	e0 68 f8 9c 	mov	r8,63644
8000d108:	ea 18 f0 d4 	orh	r8,0xf0d4
8000d10c:	e0 69 42 5e 	mov	r9,16990
8000d110:	ea 19 40 47 	orh	r9,0x4047
8000d114:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000d118:	ec f8 00 64 	ld.w	r8,r6[100]
8000d11c:	fc 19 43 c8 	movh	r9,0x43c8
8000d120:	f1 49 0d bc 	st.w	r8[3516],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000d124:	ec f8 00 64 	ld.w	r8,r6[100]
8000d128:	30 09       	mov	r9,0
8000d12a:	f1 49 0d 9c 	st.w	r8[3484],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000d12e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d132:	30 09       	mov	r9,0
8000d134:	f1 49 0d a0 	st.w	r8[3488],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000d138:	ec f8 00 64 	ld.w	r8,r6[100]
8000d13c:	30 09       	mov	r9,0
8000d13e:	f1 49 0d a4 	st.w	r8[3492],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000d142:	ec f8 00 64 	ld.w	r8,r6[100]
8000d146:	f0 c8 f4 58 	sub	r8,r8,-2984
8000d14a:	ec fb 00 64 	ld.w	r11,r6[100]
8000d14e:	10 9c       	mov	r12,r8
8000d150:	f0 16 01 e5 	mcall	r6[1940]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000d154:	ec f9 00 64 	ld.w	r9,r6[100]
8000d158:	ec f8 00 64 	ld.w	r8,r6[100]
8000d15c:	f2 cb f3 44 	sub	r11,r9,-3260
8000d160:	f0 ca f2 64 	sub	r10,r8,-3484
8000d164:	f6 c8 00 00 	sub	r8,r11,0
8000d168:	f4 c9 00 00 	sub	r9,r10,0
8000d16c:	72 0c       	ld.w	r12,r9[0x0]
8000d16e:	91 0c       	st.w	r8[0x0],r12
8000d170:	72 1c       	ld.w	r12,r9[0x4]
8000d172:	91 1c       	st.w	r8[0x4],r12
8000d174:	72 2c       	ld.w	r12,r9[0x8]
8000d176:	91 2c       	st.w	r8[0x8],r12
8000d178:	72 39       	ld.w	r9,r9[0xc]
8000d17a:	91 39       	st.w	r8[0xc],r9
8000d17c:	f6 c8 ff f0 	sub	r8,r11,-16
8000d180:	f4 c9 ff f0 	sub	r9,r10,-16
8000d184:	72 0c       	ld.w	r12,r9[0x0]
8000d186:	91 0c       	st.w	r8[0x0],r12
8000d188:	72 1c       	ld.w	r12,r9[0x4]
8000d18a:	91 1c       	st.w	r8[0x4],r12
8000d18c:	72 2c       	ld.w	r12,r9[0x8]
8000d18e:	91 2c       	st.w	r8[0x8],r12
8000d190:	72 39       	ld.w	r9,r9[0xc]
8000d192:	91 39       	st.w	r8[0xc],r9
8000d194:	f6 c8 ff e0 	sub	r8,r11,-32
8000d198:	f4 c9 ff e0 	sub	r9,r10,-32
8000d19c:	72 0a       	ld.w	r10,r9[0x0]
8000d19e:	91 0a       	st.w	r8[0x0],r10
8000d1a0:	72 1a       	ld.w	r10,r9[0x4]
8000d1a2:	91 1a       	st.w	r8[0x4],r10
8000d1a4:	72 2a       	ld.w	r10,r9[0x8]
8000d1a6:	91 2a       	st.w	r8[0x8],r10
8000d1a8:	72 39       	ld.w	r9,r9[0xc]
8000d1aa:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000d1ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1b0:	80 00       	ld.sh	r0,r0[0x0]
8000d1b2:	ce d8       	rjmp	8000d38c <crc_accumulate_buffer+0x2c>

8000d1b4 <get_central_data>:

central_data_t* get_central_data(void)
{
8000d1b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1b8:	1a 97       	mov	r7,sp
8000d1ba:	48 46       	lddpc	r6,8000d1c8 <get_central_data+0x14>
8000d1bc:	1e 26       	rsub	r6,pc
	return &centralData;
8000d1be:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d1c2:	10 9c       	mov	r12,r8
8000d1c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1c8:	80 00       	ld.sh	r0,r0[0x0]
8000d1ca:	d0 40       	acall	0x4

8000d1cc <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000d1cc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1d0:	1a 97       	mov	r7,sp
8000d1d2:	48 56       	lddpc	r6,8000d1e4 <get_telemetry_upstream+0x18>
8000d1d4:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000d1d6:	ec f8 00 64 	ld.w	r8,r6[100]
8000d1da:	f0 f8 0e 00 	ld.w	r8,r8[3584]
}
8000d1de:	10 9c       	mov	r12,r8
8000d1e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1e4:	80 00       	ld.sh	r0,r0[0x0]
8000d1e6:	d0 58       	*unknown*

8000d1e8 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000d1e8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1ec:	1a 97       	mov	r7,sp
8000d1ee:	48 56       	lddpc	r6,8000d200 <get_telemetry_downstream+0x18>
8000d1f0:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000d1f2:	ec f8 00 64 	ld.w	r8,r6[100]
8000d1f6:	f0 f8 0d fc 	ld.w	r8,r8[3580]
}
8000d1fa:	10 9c       	mov	r12,r8
8000d1fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d200:	80 00       	ld.sh	r0,r0[0x0]
8000d202:	d0 74       	*unknown*

8000d204 <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000d204:	eb cd 40 c0 	pushm	r6-r7,lr
8000d208:	1a 97       	mov	r7,sp
8000d20a:	48 56       	lddpc	r6,8000d21c <get_debug_stream+0x18>
8000d20c:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000d20e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d212:	f0 f8 0e 04 	ld.w	r8,r8[3588]
}
8000d216:	10 9c       	mov	r12,r8
8000d218:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d21c:	80 00       	ld.sh	r0,r0[0x0]
8000d21e:	d0 90       	acall	0x9

8000d220 <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000d220:	eb cd 40 c0 	pushm	r6-r7,lr
8000d224:	1a 97       	mov	r7,sp
8000d226:	48 46       	lddpc	r6,8000d234 <get_imu_data+0x14>
8000d228:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000d22a:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d22e:	10 9c       	mov	r12,r8
8000d230:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d234:	80 00       	ld.sh	r0,r0[0x0]
8000d236:	d0 ac       	*unknown*

8000d238 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000d238:	eb cd 40 c0 	pushm	r6-r7,lr
8000d23c:	1a 97       	mov	r7,sp
8000d23e:	48 56       	lddpc	r6,8000d250 <get_control_inputs_data+0x18>
8000d240:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000d242:	ec f8 00 64 	ld.w	r8,r6[100]
8000d246:	f0 c8 fe b8 	sub	r8,r8,-328
8000d24a:	10 9c       	mov	r12,r8
8000d24c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d250:	80 00       	ld.sh	r0,r0[0x0]
8000d252:	d0 c4       	*unknown*

8000d254 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000d254:	eb cd 40 80 	pushm	r7,lr
8000d258:	1a 97       	mov	r7,sp
8000d25a:	20 3d       	sub	sp,12
8000d25c:	18 98       	mov	r8,r12
8000d25e:	ef 4b ff f4 	st.w	r7[-12],r11
8000d262:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000d266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d26a:	90 08       	ld.sh	r8,r8[0x0]
8000d26c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d270:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d274:	f3 e8 20 08 	eor	r8,r9,r8
8000d278:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000d27c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d280:	a5 68       	lsl	r8,0x4
8000d282:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d286:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d28a:	f3 e8 20 08 	eor	r8,r9,r8
8000d28e:	5c 58       	castu.b	r8
8000d290:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000d294:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d298:	90 08       	ld.sh	r8,r8[0x0]
8000d29a:	5c 78       	castu.h	r8
8000d29c:	a9 88       	lsr	r8,0x8
8000d29e:	5c 88       	casts.h	r8
8000d2a0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2a8:	a9 68       	lsl	r8,0x8
8000d2aa:	5c 88       	casts.h	r8
8000d2ac:	f3 e8 20 08 	eor	r8,r9,r8
8000d2b0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2b8:	a3 78       	lsl	r8,0x3
8000d2ba:	5c 88       	casts.h	r8
8000d2bc:	f3 e8 20 08 	eor	r8,r9,r8
8000d2c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2c8:	a5 88       	lsr	r8,0x4
8000d2ca:	5c 58       	castu.b	r8
8000d2cc:	f3 e8 20 08 	eor	r8,r9,r8
8000d2d0:	5c 88       	casts.h	r8
8000d2d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d2d6:	b2 08       	st.h	r9[0x0],r8
}
8000d2d8:	2f dd       	sub	sp,-12
8000d2da:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d2de <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000d2de:	eb cd 40 80 	pushm	r7,lr
8000d2e2:	1a 97       	mov	r7,sp
8000d2e4:	20 1d       	sub	sp,4
8000d2e6:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000d2ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d2ee:	3f f8       	mov	r8,-1
8000d2f0:	b2 08       	st.h	r9[0x0],r8
}
8000d2f2:	2f fd       	sub	sp,-4
8000d2f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d2f8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000d2f8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d2fc:	1a 97       	mov	r7,sp
8000d2fe:	20 3d       	sub	sp,12
8000d300:	49 76       	lddpc	r6,8000d35c <crc_calculate+0x64>
8000d302:	1e 26       	rsub	r6,pc
8000d304:	ef 4c ff f8 	st.w	r7[-8],r12
8000d308:	16 98       	mov	r8,r11
8000d30a:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000d30e:	ee c8 00 02 	sub	r8,r7,2
8000d312:	10 9c       	mov	r12,r8
8000d314:	ce 5f       	rcall	8000d2de <crc_init>
	while (length--) {
8000d316:	c0 e8       	rjmp	8000d332 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000d318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d31c:	11 88       	ld.ub	r8,r8[0x0]
8000d31e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d322:	2f f9       	sub	r9,-1
8000d324:	ef 49 ff f8 	st.w	r7[-8],r9
8000d328:	ee c9 00 02 	sub	r9,r7,2
8000d32c:	12 9b       	mov	r11,r9
8000d32e:	10 9c       	mov	r12,r8
8000d330:	c9 2f       	rcall	8000d254 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000d332:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000d336:	30 08       	mov	r8,0
8000d338:	f0 09 19 00 	cp.h	r9,r8
8000d33c:	5f 18       	srne	r8
8000d33e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d342:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000d346:	20 18       	sub	r8,1
8000d348:	ef 58 ff f4 	st.h	r7[-12],r8
8000d34c:	58 09       	cp.w	r9,0
8000d34e:	ce 51       	brne	8000d318 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000d350:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000d354:	10 9c       	mov	r12,r8
8000d356:	2f dd       	sub	sp,-12
8000d358:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d35c:	80 00       	ld.sh	r0,r0[0x0]
8000d35e:	d1 86       	*unknown*

8000d360 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000d360:	eb cd 40 c0 	pushm	r6-r7,lr
8000d364:	1a 97       	mov	r7,sp
8000d366:	20 4d       	sub	sp,16
8000d368:	49 66       	lddpc	r6,8000d3c0 <crc_accumulate_buffer+0x60>
8000d36a:	1e 26       	rsub	r6,pc
8000d36c:	ef 4c ff f8 	st.w	r7[-8],r12
8000d370:	ef 4b ff f4 	st.w	r7[-12],r11
8000d374:	14 98       	mov	r8,r10
8000d376:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000d37a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d37e:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000d382:	c0 d8       	rjmp	8000d39c <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000d384:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d388:	11 88       	ld.ub	r8,r8[0x0]
8000d38a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d38e:	2f f9       	sub	r9,-1
8000d390:	ef 49 ff fc 	st.w	r7[-4],r9
8000d394:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d398:	10 9c       	mov	r12,r8
8000d39a:	c5 df       	rcall	8000d254 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000d39c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d3a0:	30 08       	mov	r8,0
8000d3a2:	f0 09 18 00 	cp.b	r9,r8
8000d3a6:	5f 18       	srne	r8
8000d3a8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d3ac:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d3b0:	20 18       	sub	r8,1
8000d3b2:	ef 68 ff f0 	st.b	r7[-16],r8
8000d3b6:	58 09       	cp.w	r9,0
8000d3b8:	ce 61       	brne	8000d384 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000d3ba:	2f cd       	sub	sp,-16
8000d3bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3c0:	80 00       	ld.sh	r0,r0[0x0]
8000d3c2:	d1 ee       	*unknown*

8000d3c4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000d3c4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3c8:	1a 97       	mov	r7,sp
8000d3ca:	20 1d       	sub	sp,4
8000d3cc:	48 96       	lddpc	r6,8000d3f0 <mavlink_get_channel_status+0x2c>
8000d3ce:	1e 26       	rsub	r6,pc
8000d3d0:	18 98       	mov	r8,r12
8000d3d2:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000d3d6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000d3da:	f0 09 15 04 	lsl	r9,r8,0x4
8000d3de:	ec f8 09 08 	ld.w	r8,r6[2312]
8000d3e2:	f2 08 00 08 	add	r8,r9,r8
}
8000d3e6:	10 9c       	mov	r12,r8
8000d3e8:	2f fd       	sub	sp,-4
8000d3ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3ee:	00 00       	add	r0,r0
8000d3f0:	80 00       	ld.sh	r0,r0[0x0]
8000d3f2:	d2 52       	popm	r0-r3,r8-r9,r12

8000d3f4 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000d3f4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3f8:	1a 97       	mov	r7,sp
8000d3fa:	20 9d       	sub	sp,36
8000d3fc:	4b d6       	lddpc	r6,8000d4f0 <_mav_finalize_message_chan_send+0xfc>
8000d3fe:	1e 26       	rsub	r6,pc
8000d400:	ef 4c ff ec 	st.w	r7[-20],r12
8000d404:	ef 4a ff e4 	st.w	r7[-28],r10
8000d408:	16 9a       	mov	r10,r11
8000d40a:	ef 6a ff e8 	st.b	r7[-24],r10
8000d40e:	ef 69 ff e0 	st.b	r7[-32],r9
8000d412:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000d416:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d41a:	5c 58       	castu.b	r8
8000d41c:	10 9c       	mov	r12,r8
8000d41e:	cd 3f       	rcall	8000d3c4 <mavlink_get_channel_status>
8000d420:	18 98       	mov	r8,r12
8000d422:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000d426:	3f e8       	mov	r8,-2
8000d428:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000d42c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d430:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000d434:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d438:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d43c:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000d440:	ec f8 00 74 	ld.w	r8,r6[116]
8000d444:	11 88       	ld.ub	r8,r8[0x0]
8000d446:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000d44a:	ec f8 00 74 	ld.w	r8,r6[116]
8000d44e:	11 98       	ld.ub	r8,r8[0x1]
8000d450:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000d454:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d458:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000d45c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d460:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d464:	2f f8       	sub	r8,-1
8000d466:	5c 58       	castu.b	r8
8000d468:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d46c:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000d470:	ee c8 00 0c 	sub	r8,r7,12
8000d474:	2f f8       	sub	r8,-1
8000d476:	30 5b       	mov	r11,5
8000d478:	10 9c       	mov	r12,r8
8000d47a:	c3 ff       	rcall	8000d2f8 <crc_calculate>
8000d47c:	18 98       	mov	r8,r12
8000d47e:	5c 88       	casts.h	r8
8000d480:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000d484:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000d488:	ee c8 00 06 	sub	r8,r7,6
8000d48c:	12 9a       	mov	r10,r9
8000d48e:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d492:	10 9c       	mov	r12,r8
8000d494:	c6 6f       	rcall	8000d360 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000d496:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d49a:	ee c9 00 06 	sub	r9,r7,6
8000d49e:	12 9b       	mov	r11,r9
8000d4a0:	10 9c       	mov	r12,r8
8000d4a2:	cd 9e       	rcall	8000d254 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000d4a4:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d4a8:	5c 58       	castu.b	r8
8000d4aa:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000d4ae:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d4b2:	5c 78       	castu.h	r8
8000d4b4:	a9 88       	lsr	r8,0x8
8000d4b6:	5c 88       	casts.h	r8
8000d4b8:	5c 58       	castu.b	r8
8000d4ba:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000d4be:	ee c8 00 0c 	sub	r8,r7,12
8000d4c2:	30 6a       	mov	r10,6
8000d4c4:	10 9b       	mov	r11,r8
8000d4c6:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4ca:	c1 5c       	rcall	8000d4f4 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000d4cc:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d4d0:	10 9a       	mov	r10,r8
8000d4d2:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d4d6:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4da:	c0 dc       	rcall	8000d4f4 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000d4dc:	ee c8 00 10 	sub	r8,r7,16
8000d4e0:	30 2a       	mov	r10,2
8000d4e2:	10 9b       	mov	r11,r8
8000d4e4:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4e8:	c0 6c       	rcall	8000d4f4 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000d4ea:	2f 7d       	sub	sp,-36
8000d4ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4f0:	80 00       	ld.sh	r0,r0[0x0]
8000d4f2:	d2 82       	popm	r10,r12

8000d4f4 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000d4f4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4f8:	1a 97       	mov	r7,sp
8000d4fa:	20 4d       	sub	sp,16
8000d4fc:	49 46       	lddpc	r6,8000d54c <_mavlink_send_uart+0x58>
8000d4fe:	1e 26       	rsub	r6,pc
8000d500:	ef 4c ff f8 	st.w	r7[-8],r12
8000d504:	ef 4b ff f4 	st.w	r7[-12],r11
8000d508:	14 98       	mov	r8,r10
8000d50a:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d50e:	30 08       	mov	r8,0
8000d510:	ef 58 ff fe 	st.h	r7[-2],r8
8000d514:	c1 28       	rjmp	8000d538 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000d516:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000d51a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d51e:	f2 08 00 08 	add	r8,r9,r8
8000d522:	11 88       	ld.ub	r8,r8[0x0]
8000d524:	10 9b       	mov	r11,r8
8000d526:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d52a:	f0 16 00 d8 	mcall	r6[864]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d52e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d532:	2f f8       	sub	r8,-1
8000d534:	ef 58 ff fe 	st.h	r7[-2],r8
8000d538:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000d53c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000d540:	f0 09 19 00 	cp.h	r9,r8
8000d544:	ce 93       	brcs	8000d516 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000d546:	2f cd       	sub	sp,-16
8000d548:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d54c:	80 00       	ld.sh	r0,r0[0x0]
8000d54e:	d3 82       	popm	r10-r12

8000d550 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d550:	eb cd 40 80 	pushm	r7,lr
8000d554:	1a 97       	mov	r7,sp
8000d556:	20 2d       	sub	sp,8
8000d558:	ef 4c ff fc 	st.w	r7[-4],r12
8000d55c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d560:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d564:	2f f8       	sub	r8,-1
8000d566:	11 88       	ld.ub	r8,r8[0x0]
8000d568:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d56c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d56e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d572:	f0 c9 ff ff 	sub	r9,r8,-1
8000d576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d57a:	11 88       	ld.ub	r8,r8[0x0]
8000d57c:	b2 88       	st.b	r9[0x0],r8
}
8000d57e:	2f ed       	sub	sp,-8
8000d580:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d584 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d584:	eb cd 40 80 	pushm	r7,lr
8000d588:	1a 97       	mov	r7,sp
8000d58a:	20 2d       	sub	sp,8
8000d58c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d590:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d594:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d598:	2f d8       	sub	r8,-3
8000d59a:	11 88       	ld.ub	r8,r8[0x0]
8000d59c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d5a0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d5a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5a6:	f0 c9 ff ff 	sub	r9,r8,-1
8000d5aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5ae:	2f e8       	sub	r8,-2
8000d5b0:	11 88       	ld.ub	r8,r8[0x0]
8000d5b2:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d5b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5b8:	f0 c9 ff fe 	sub	r9,r8,-2
8000d5bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5c0:	2f f8       	sub	r8,-1
8000d5c2:	11 88       	ld.ub	r8,r8[0x0]
8000d5c4:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d5c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5ca:	f0 c9 ff fd 	sub	r9,r8,-3
8000d5ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5d2:	11 88       	ld.ub	r8,r8[0x0]
8000d5d4:	b2 88       	st.b	r9[0x0],r8
}
8000d5d6:	2f ed       	sub	sp,-8
8000d5d8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d5dc <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000d5dc:	eb cd 40 80 	pushm	r7,lr
8000d5e0:	1a 97       	mov	r7,sp
8000d5e2:	20 2d       	sub	sp,8
8000d5e4:	ef 4c ff fc 	st.w	r7[-4],r12
8000d5e8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000d5ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5f0:	2f 98       	sub	r8,-7
8000d5f2:	11 88       	ld.ub	r8,r8[0x0]
8000d5f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d5f8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000d5fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5fe:	f0 c9 ff ff 	sub	r9,r8,-1
8000d602:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d606:	2f a8       	sub	r8,-6
8000d608:	11 88       	ld.ub	r8,r8[0x0]
8000d60a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000d60c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d610:	f0 c9 ff fe 	sub	r9,r8,-2
8000d614:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d618:	2f b8       	sub	r8,-5
8000d61a:	11 88       	ld.ub	r8,r8[0x0]
8000d61c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000d61e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d622:	f0 c9 ff fd 	sub	r9,r8,-3
8000d626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d62a:	2f c8       	sub	r8,-4
8000d62c:	11 88       	ld.ub	r8,r8[0x0]
8000d62e:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000d630:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d634:	f0 c9 ff fc 	sub	r9,r8,-4
8000d638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d63c:	2f d8       	sub	r8,-3
8000d63e:	11 88       	ld.ub	r8,r8[0x0]
8000d640:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000d642:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d646:	f0 c9 ff fb 	sub	r9,r8,-5
8000d64a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d64e:	2f e8       	sub	r8,-2
8000d650:	11 88       	ld.ub	r8,r8[0x0]
8000d652:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000d654:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d658:	f0 c9 ff fa 	sub	r9,r8,-6
8000d65c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d660:	2f f8       	sub	r8,-1
8000d662:	11 88       	ld.ub	r8,r8[0x0]
8000d664:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000d666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d66a:	f0 c9 ff f9 	sub	r9,r8,-7
8000d66e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d672:	11 88       	ld.ub	r8,r8[0x0]
8000d674:	b2 88       	st.b	r9[0x0],r8
}
8000d676:	2f ed       	sub	sp,-8
8000d678:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d67c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d67c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d680:	1a 97       	mov	r7,sp
8000d682:	20 3d       	sub	sp,12
8000d684:	49 06       	lddpc	r6,8000d6c4 <mav_array_memcpy+0x48>
8000d686:	1e 26       	rsub	r6,pc
8000d688:	ef 4c ff fc 	st.w	r7[-4],r12
8000d68c:	ef 4b ff f8 	st.w	r7[-8],r11
8000d690:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d694:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d698:	58 08       	cp.w	r8,0
8000d69a:	c0 91       	brne	8000d6ac <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d69c:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d6a0:	30 0b       	mov	r11,0
8000d6a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d6a6:	f0 16 00 31 	mcall	r6[196]
8000d6aa:	c0 98       	rjmp	8000d6bc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d6ac:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d6b0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d6b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d6b8:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000d6bc:	2f dd       	sub	sp,-12
8000d6be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d6c2:	00 00       	add	r0,r0
8000d6c4:	80 00       	ld.sh	r0,r0[0x0]
8000d6c6:	d5 0a       	popm	r11,lr

8000d6c8 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000d6c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d6cc:	1a 97       	mov	r7,sp
8000d6ce:	20 4d       	sub	sp,16
8000d6d0:	48 e6       	lddpc	r6,8000d708 <_mav_put_char_array+0x40>
8000d6d2:	1e 26       	rsub	r6,pc
8000d6d4:	ef 4c ff fc 	st.w	r7[-4],r12
8000d6d8:	ef 4a ff f4 	st.w	r7[-12],r10
8000d6dc:	12 98       	mov	r8,r9
8000d6de:	16 99       	mov	r9,r11
8000d6e0:	ef 69 ff f8 	st.b	r7[-8],r9
8000d6e4:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000d6e8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d6ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d6f0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d6f4:	f4 08 00 08 	add	r8,r10,r8
8000d6f8:	12 9a       	mov	r10,r9
8000d6fa:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d6fe:	10 9c       	mov	r12,r8
8000d700:	cb ef       	rcall	8000d67c <mav_array_memcpy>

}
8000d702:	2f cd       	sub	sp,-16
8000d704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d708:	80 00       	ld.sh	r0,r0[0x0]
8000d70a:	d5 56       	*unknown*

8000d70c <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000d70c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d710:	1a 97       	mov	r7,sp
8000d712:	20 9d       	sub	sp,36
8000d714:	49 b6       	lddpc	r6,8000d780 <mavlink_msg_heartbeat_send+0x74>
8000d716:	1e 26       	rsub	r6,pc
8000d718:	ee ce ff f4 	sub	lr,r7,-12
8000d71c:	ef 4c ff f0 	st.w	r7[-16],r12
8000d720:	ef 48 ff e0 	st.w	r7[-32],r8
8000d724:	7c 08       	ld.w	r8,lr[0x0]
8000d726:	ef 6b ff ec 	st.b	r7[-20],r11
8000d72a:	ef 6a ff e8 	st.b	r7[-24],r10
8000d72e:	ef 69 ff e4 	st.b	r7[-28],r9
8000d732:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000d736:	ee c9 00 20 	sub	r9,r7,32
8000d73a:	ee c8 00 0c 	sub	r8,r7,12
8000d73e:	12 9b       	mov	r11,r9
8000d740:	10 9c       	mov	r12,r8
8000d742:	c2 1f       	rcall	8000d584 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000d744:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d748:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000d74c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d750:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000d754:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000d758:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000d75c:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d760:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000d764:	30 38       	mov	r8,3
8000d766:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000d76a:	ee ca 00 0c 	sub	r10,r7,12
8000d76e:	33 28       	mov	r8,50
8000d770:	30 99       	mov	r9,9
8000d772:	30 0b       	mov	r11,0
8000d774:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d778:	c3 ee       	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000d77a:	2f 7d       	sub	sp,-36
8000d77c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d780:	80 00       	ld.sh	r0,r0[0x0]
8000d782:	d5 9a       	popm	r0-r3,r10-r11,lr

8000d784 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000d784:	eb cd 40 e0 	pushm	r5-r7,lr
8000d788:	1a 97       	mov	r7,sp
8000d78a:	21 2d       	sub	sp,72
8000d78c:	4b 76       	lddpc	r6,8000d868 <mavlink_msg_gps_raw_int_send+0xe4>
8000d78e:	1e 26       	rsub	r6,pc
8000d790:	ee c5 ff f0 	sub	r5,r7,-16
8000d794:	ef 4c ff dc 	st.w	r7[-36],r12
8000d798:	ee eb ff d4 	st.d	r7[-44],r10
8000d79c:	12 9e       	mov	lr,r9
8000d79e:	ef 48 ff cc 	st.w	r7[-52],r8
8000d7a2:	6a 2c       	ld.w	r12,r5[0x8]
8000d7a4:	6a 3b       	ld.w	r11,r5[0xc]
8000d7a6:	6a 4a       	ld.w	r10,r5[0x10]
8000d7a8:	6a 59       	ld.w	r9,r5[0x14]
8000d7aa:	6a 68       	ld.w	r8,r5[0x18]
8000d7ac:	ef 6e ff d0 	st.b	r7[-48],lr
8000d7b0:	ef 5c ff c8 	st.h	r7[-56],r12
8000d7b4:	ef 5b ff c4 	st.h	r7[-60],r11
8000d7b8:	ef 5a ff c0 	st.h	r7[-64],r10
8000d7bc:	ef 59 ff bc 	st.h	r7[-68],r9
8000d7c0:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d7c4:	ee c9 00 2c 	sub	r9,r7,44
8000d7c8:	ee c8 00 20 	sub	r8,r7,32
8000d7cc:	12 9b       	mov	r11,r9
8000d7ce:	10 9c       	mov	r12,r8
8000d7d0:	c0 6f       	rcall	8000d5dc <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000d7d2:	ee c9 00 34 	sub	r9,r7,52
8000d7d6:	ee c8 00 20 	sub	r8,r7,32
8000d7da:	2f 88       	sub	r8,-8
8000d7dc:	12 9b       	mov	r11,r9
8000d7de:	10 9c       	mov	r12,r8
8000d7e0:	cd 2e       	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000d7e2:	0a 99       	mov	r9,r5
8000d7e4:	ee c8 00 20 	sub	r8,r7,32
8000d7e8:	2f 48       	sub	r8,-12
8000d7ea:	12 9b       	mov	r11,r9
8000d7ec:	10 9c       	mov	r12,r8
8000d7ee:	cc be       	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000d7f0:	ea c9 ff fc 	sub	r9,r5,-4
8000d7f4:	ee c8 00 20 	sub	r8,r7,32
8000d7f8:	2f 08       	sub	r8,-16
8000d7fa:	12 9b       	mov	r11,r9
8000d7fc:	10 9c       	mov	r12,r8
8000d7fe:	cc 3e       	rcall	8000d584 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000d800:	ee c9 00 38 	sub	r9,r7,56
8000d804:	ee c8 00 20 	sub	r8,r7,32
8000d808:	2e c8       	sub	r8,-20
8000d80a:	12 9b       	mov	r11,r9
8000d80c:	10 9c       	mov	r12,r8
8000d80e:	ca 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000d810:	ee c9 00 3c 	sub	r9,r7,60
8000d814:	ee c8 00 20 	sub	r8,r7,32
8000d818:	2e a8       	sub	r8,-22
8000d81a:	12 9b       	mov	r11,r9
8000d81c:	10 9c       	mov	r12,r8
8000d81e:	c9 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000d820:	ee c9 00 40 	sub	r9,r7,64
8000d824:	ee c8 00 20 	sub	r8,r7,32
8000d828:	2e 88       	sub	r8,-24
8000d82a:	12 9b       	mov	r11,r9
8000d82c:	10 9c       	mov	r12,r8
8000d82e:	c9 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000d830:	ee c9 00 44 	sub	r9,r7,68
8000d834:	ee c8 00 20 	sub	r8,r7,32
8000d838:	2e 68       	sub	r8,-26
8000d83a:	12 9b       	mov	r11,r9
8000d83c:	10 9c       	mov	r12,r8
8000d83e:	c8 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000d840:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000d844:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000d848:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d84c:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000d850:	ee ca 00 20 	sub	r10,r7,32
8000d854:	31 88       	mov	r8,24
8000d856:	31 e9       	mov	r9,30
8000d858:	31 8b       	mov	r11,24
8000d85a:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d85e:	fe b0 fd cb 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000d862:	2e ed       	sub	sp,-72
8000d864:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d868:	80 00       	ld.sh	r0,r0[0x0]
8000d86a:	d6 12       	popm	r0-r3,r12,lr

8000d86c <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d86c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d870:	1a 97       	mov	r7,sp
8000d872:	21 1d       	sub	sp,68
8000d874:	4c 26       	lddpc	r6,8000d97c <mavlink_msg_scaled_imu_send+0x110>
8000d876:	1e 26       	rsub	r6,pc
8000d878:	ee ce ff e4 	sub	lr,r7,-28
8000d87c:	ef 4c ff e4 	st.w	r7[-28],r12
8000d880:	ef 4b ff e0 	st.w	r7[-32],r11
8000d884:	14 91       	mov	r1,r10
8000d886:	12 92       	mov	r2,r9
8000d888:	10 93       	mov	r3,r8
8000d88a:	7c 05       	ld.w	r5,lr[0x0]
8000d88c:	7c 1c       	ld.w	r12,lr[0x4]
8000d88e:	7c 2b       	ld.w	r11,lr[0x8]
8000d890:	7c 3a       	ld.w	r10,lr[0xc]
8000d892:	7c 49       	ld.w	r9,lr[0x10]
8000d894:	7c 58       	ld.w	r8,lr[0x14]
8000d896:	02 9e       	mov	lr,r1
8000d898:	ef 5e ff dc 	st.h	r7[-36],lr
8000d89c:	04 9e       	mov	lr,r2
8000d89e:	ef 5e ff d8 	st.h	r7[-40],lr
8000d8a2:	06 9e       	mov	lr,r3
8000d8a4:	ef 5e ff d4 	st.h	r7[-44],lr
8000d8a8:	0a 9e       	mov	lr,r5
8000d8aa:	ef 5e ff d0 	st.h	r7[-48],lr
8000d8ae:	ef 5c ff cc 	st.h	r7[-52],r12
8000d8b2:	ef 5b ff c8 	st.h	r7[-56],r11
8000d8b6:	ef 5a ff c4 	st.h	r7[-60],r10
8000d8ba:	ef 59 ff c0 	st.h	r7[-64],r9
8000d8be:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d8c2:	ee c9 00 20 	sub	r9,r7,32
8000d8c6:	ee c8 00 18 	sub	r8,r7,24
8000d8ca:	12 9b       	mov	r11,r9
8000d8cc:	10 9c       	mov	r12,r8
8000d8ce:	c5 be       	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000d8d0:	ee c9 00 24 	sub	r9,r7,36
8000d8d4:	ee c8 00 18 	sub	r8,r7,24
8000d8d8:	2f c8       	sub	r8,-4
8000d8da:	12 9b       	mov	r11,r9
8000d8dc:	10 9c       	mov	r12,r8
8000d8de:	c3 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000d8e0:	ee c9 00 28 	sub	r9,r7,40
8000d8e4:	ee c8 00 18 	sub	r8,r7,24
8000d8e8:	2f a8       	sub	r8,-6
8000d8ea:	12 9b       	mov	r11,r9
8000d8ec:	10 9c       	mov	r12,r8
8000d8ee:	c3 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000d8f0:	ee c9 00 2c 	sub	r9,r7,44
8000d8f4:	ee c8 00 18 	sub	r8,r7,24
8000d8f8:	2f 88       	sub	r8,-8
8000d8fa:	12 9b       	mov	r11,r9
8000d8fc:	10 9c       	mov	r12,r8
8000d8fe:	c2 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000d900:	ee c9 00 30 	sub	r9,r7,48
8000d904:	ee c8 00 18 	sub	r8,r7,24
8000d908:	2f 68       	sub	r8,-10
8000d90a:	12 9b       	mov	r11,r9
8000d90c:	10 9c       	mov	r12,r8
8000d90e:	c2 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000d910:	ee c9 00 34 	sub	r9,r7,52
8000d914:	ee c8 00 18 	sub	r8,r7,24
8000d918:	2f 48       	sub	r8,-12
8000d91a:	12 9b       	mov	r11,r9
8000d91c:	10 9c       	mov	r12,r8
8000d91e:	c1 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000d920:	ee c9 00 38 	sub	r9,r7,56
8000d924:	ee c8 00 18 	sub	r8,r7,24
8000d928:	2f 28       	sub	r8,-14
8000d92a:	12 9b       	mov	r11,r9
8000d92c:	10 9c       	mov	r12,r8
8000d92e:	c1 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000d930:	ee c9 00 3c 	sub	r9,r7,60
8000d934:	ee c8 00 18 	sub	r8,r7,24
8000d938:	2f 08       	sub	r8,-16
8000d93a:	12 9b       	mov	r11,r9
8000d93c:	10 9c       	mov	r12,r8
8000d93e:	c0 9e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000d940:	ee c9 00 40 	sub	r9,r7,64
8000d944:	ee c8 00 18 	sub	r8,r7,24
8000d948:	2e e8       	sub	r8,-18
8000d94a:	12 9b       	mov	r11,r9
8000d94c:	10 9c       	mov	r12,r8
8000d94e:	c0 1e       	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000d950:	ee c9 00 44 	sub	r9,r7,68
8000d954:	ee c8 00 18 	sub	r8,r7,24
8000d958:	2e c8       	sub	r8,-20
8000d95a:	12 9b       	mov	r11,r9
8000d95c:	10 9c       	mov	r12,r8
8000d95e:	fe b0 fd f9 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000d962:	ee ca 00 18 	sub	r10,r7,24
8000d966:	e0 68 00 aa 	mov	r8,170
8000d96a:	31 69       	mov	r9,22
8000d96c:	31 ab       	mov	r11,26
8000d96e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d972:	fe b0 fd 41 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000d976:	2e fd       	sub	sp,-68
8000d978:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d97c:	80 00       	ld.sh	r0,r0[0x0]
8000d97e:	d6 fa       	popm	r0-r10,r12,lr

8000d980 <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d980:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d984:	1a 97       	mov	r7,sp
8000d986:	21 3d       	sub	sp,76
8000d988:	4c 76       	lddpc	r6,8000daa4 <mavlink_msg_raw_imu_send+0x124>
8000d98a:	1e 26       	rsub	r6,pc
8000d98c:	ee ce ff e4 	sub	lr,r7,-28
8000d990:	ef 4c ff e0 	st.w	r7[-32],r12
8000d994:	ee eb ff d8 	st.d	r7[-40],r10
8000d998:	12 91       	mov	r1,r9
8000d99a:	10 92       	mov	r2,r8
8000d99c:	7c 03       	ld.w	r3,lr[0x0]
8000d99e:	7c 15       	ld.w	r5,lr[0x4]
8000d9a0:	7c 2c       	ld.w	r12,lr[0x8]
8000d9a2:	7c 3b       	ld.w	r11,lr[0xc]
8000d9a4:	7c 4a       	ld.w	r10,lr[0x10]
8000d9a6:	7c 59       	ld.w	r9,lr[0x14]
8000d9a8:	7c 68       	ld.w	r8,lr[0x18]
8000d9aa:	02 9e       	mov	lr,r1
8000d9ac:	ef 5e ff d4 	st.h	r7[-44],lr
8000d9b0:	04 9e       	mov	lr,r2
8000d9b2:	ef 5e ff d0 	st.h	r7[-48],lr
8000d9b6:	06 9e       	mov	lr,r3
8000d9b8:	ef 5e ff cc 	st.h	r7[-52],lr
8000d9bc:	0a 9e       	mov	lr,r5
8000d9be:	ef 5e ff c8 	st.h	r7[-56],lr
8000d9c2:	ef 5c ff c4 	st.h	r7[-60],r12
8000d9c6:	ef 5b ff c0 	st.h	r7[-64],r11
8000d9ca:	ef 5a ff bc 	st.h	r7[-68],r10
8000d9ce:	ef 59 ff b8 	st.h	r7[-72],r9
8000d9d2:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d9d6:	ee c9 00 28 	sub	r9,r7,40
8000d9da:	ee c8 00 1c 	sub	r8,r7,28
8000d9de:	12 9b       	mov	r11,r9
8000d9e0:	10 9c       	mov	r12,r8
8000d9e2:	fe b0 fd fd 	rcall	8000d5dc <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000d9e6:	ee c9 00 2c 	sub	r9,r7,44
8000d9ea:	ee c8 00 1c 	sub	r8,r7,28
8000d9ee:	2f 88       	sub	r8,-8
8000d9f0:	12 9b       	mov	r11,r9
8000d9f2:	10 9c       	mov	r12,r8
8000d9f4:	fe b0 fd ae 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000d9f8:	ee c9 00 30 	sub	r9,r7,48
8000d9fc:	ee c8 00 1c 	sub	r8,r7,28
8000da00:	2f 68       	sub	r8,-10
8000da02:	12 9b       	mov	r11,r9
8000da04:	10 9c       	mov	r12,r8
8000da06:	fe b0 fd a5 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000da0a:	ee c9 00 34 	sub	r9,r7,52
8000da0e:	ee c8 00 1c 	sub	r8,r7,28
8000da12:	2f 48       	sub	r8,-12
8000da14:	12 9b       	mov	r11,r9
8000da16:	10 9c       	mov	r12,r8
8000da18:	fe b0 fd 9c 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000da1c:	ee c9 00 38 	sub	r9,r7,56
8000da20:	ee c8 00 1c 	sub	r8,r7,28
8000da24:	2f 28       	sub	r8,-14
8000da26:	12 9b       	mov	r11,r9
8000da28:	10 9c       	mov	r12,r8
8000da2a:	fe b0 fd 93 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000da2e:	ee c9 00 3c 	sub	r9,r7,60
8000da32:	ee c8 00 1c 	sub	r8,r7,28
8000da36:	2f 08       	sub	r8,-16
8000da38:	12 9b       	mov	r11,r9
8000da3a:	10 9c       	mov	r12,r8
8000da3c:	fe b0 fd 8a 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000da40:	ee c9 00 40 	sub	r9,r7,64
8000da44:	ee c8 00 1c 	sub	r8,r7,28
8000da48:	2e e8       	sub	r8,-18
8000da4a:	12 9b       	mov	r11,r9
8000da4c:	10 9c       	mov	r12,r8
8000da4e:	fe b0 fd 81 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000da52:	ee c9 00 44 	sub	r9,r7,68
8000da56:	ee c8 00 1c 	sub	r8,r7,28
8000da5a:	2e c8       	sub	r8,-20
8000da5c:	12 9b       	mov	r11,r9
8000da5e:	10 9c       	mov	r12,r8
8000da60:	fe b0 fd 78 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000da64:	ee c9 00 48 	sub	r9,r7,72
8000da68:	ee c8 00 1c 	sub	r8,r7,28
8000da6c:	2e a8       	sub	r8,-22
8000da6e:	12 9b       	mov	r11,r9
8000da70:	10 9c       	mov	r12,r8
8000da72:	fe b0 fd 6f 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000da76:	ee c9 00 4c 	sub	r9,r7,76
8000da7a:	ee c8 00 1c 	sub	r8,r7,28
8000da7e:	2e 88       	sub	r8,-24
8000da80:	12 9b       	mov	r11,r9
8000da82:	10 9c       	mov	r12,r8
8000da84:	fe b0 fd 66 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000da88:	ee ca 00 1c 	sub	r10,r7,28
8000da8c:	e0 68 00 90 	mov	r8,144
8000da90:	31 a9       	mov	r9,26
8000da92:	31 bb       	mov	r11,27
8000da94:	ee fc ff e0 	ld.w	r12,r7[-32]
8000da98:	fe b0 fc ae 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000da9c:	2e dd       	sub	sp,-76
8000da9e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000daa2:	00 00       	add	r0,r0
8000daa4:	80 00       	ld.sh	r0,r0[0x0]
8000daa6:	d8 0e       	*unknown*

8000daa8 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000daa8:	eb cd 40 c0 	pushm	r6-r7,lr
8000daac:	1a 97       	mov	r7,sp
8000daae:	20 9d       	sub	sp,36
8000dab0:	49 e6       	lddpc	r6,8000db28 <mavlink_msg_scaled_pressure_send+0x80>
8000dab2:	1e 26       	rsub	r6,pc
8000dab4:	ef 4c ff ec 	st.w	r7[-20],r12
8000dab8:	ef 4b ff e8 	st.w	r7[-24],r11
8000dabc:	ef 4a ff e4 	st.w	r7[-28],r10
8000dac0:	ef 49 ff e0 	st.w	r7[-32],r9
8000dac4:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dac8:	ee c9 00 18 	sub	r9,r7,24
8000dacc:	ee c8 00 10 	sub	r8,r7,16
8000dad0:	12 9b       	mov	r11,r9
8000dad2:	10 9c       	mov	r12,r8
8000dad4:	fe b0 fd 58 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000dad8:	ee c9 00 1c 	sub	r9,r7,28
8000dadc:	ee c8 00 10 	sub	r8,r7,16
8000dae0:	2f c8       	sub	r8,-4
8000dae2:	12 9b       	mov	r11,r9
8000dae4:	10 9c       	mov	r12,r8
8000dae6:	fe b0 fd 4f 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000daea:	ee c9 00 20 	sub	r9,r7,32
8000daee:	ee c8 00 10 	sub	r8,r7,16
8000daf2:	2f 88       	sub	r8,-8
8000daf4:	12 9b       	mov	r11,r9
8000daf6:	10 9c       	mov	r12,r8
8000daf8:	fe b0 fd 46 	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000dafc:	ee c9 00 24 	sub	r9,r7,36
8000db00:	ee c8 00 10 	sub	r8,r7,16
8000db04:	2f 48       	sub	r8,-12
8000db06:	12 9b       	mov	r11,r9
8000db08:	10 9c       	mov	r12,r8
8000db0a:	fe b0 fd 23 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000db0e:	ee ca 00 10 	sub	r10,r7,16
8000db12:	37 38       	mov	r8,115
8000db14:	30 e9       	mov	r9,14
8000db16:	31 db       	mov	r11,29
8000db18:	ee fc ff ec 	ld.w	r12,r7[-20]
8000db1c:	fe b0 fc 6c 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000db20:	2f 7d       	sub	sp,-36
8000db22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000db26:	00 00       	add	r0,r0
8000db28:	80 00       	ld.sh	r0,r0[0x0]
8000db2a:	d9 36       	*unknown*

8000db2c <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000db2c:	eb cd 40 e0 	pushm	r5-r7,lr
8000db30:	1a 97       	mov	r7,sp
8000db32:	20 cd       	sub	sp,48
8000db34:	4a c6       	lddpc	r6,8000dbe4 <mavlink_msg_attitude_send+0xb8>
8000db36:	1e 26       	rsub	r6,pc
8000db38:	ee c5 ff f0 	sub	r5,r7,-16
8000db3c:	ef 4c ff e0 	st.w	r7[-32],r12
8000db40:	ef 4b ff dc 	st.w	r7[-36],r11
8000db44:	ef 4a ff d8 	st.w	r7[-40],r10
8000db48:	ef 49 ff d4 	st.w	r7[-44],r9
8000db4c:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000db50:	ee c9 00 24 	sub	r9,r7,36
8000db54:	ee c8 00 1c 	sub	r8,r7,28
8000db58:	12 9b       	mov	r11,r9
8000db5a:	10 9c       	mov	r12,r8
8000db5c:	fe b0 fd 14 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000db60:	ee c9 00 28 	sub	r9,r7,40
8000db64:	ee c8 00 1c 	sub	r8,r7,28
8000db68:	2f c8       	sub	r8,-4
8000db6a:	12 9b       	mov	r11,r9
8000db6c:	10 9c       	mov	r12,r8
8000db6e:	fe b0 fd 0b 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000db72:	ee c9 00 2c 	sub	r9,r7,44
8000db76:	ee c8 00 1c 	sub	r8,r7,28
8000db7a:	2f 88       	sub	r8,-8
8000db7c:	12 9b       	mov	r11,r9
8000db7e:	10 9c       	mov	r12,r8
8000db80:	fe b0 fd 02 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000db84:	ee c9 00 30 	sub	r9,r7,48
8000db88:	ee c8 00 1c 	sub	r8,r7,28
8000db8c:	2f 48       	sub	r8,-12
8000db8e:	12 9b       	mov	r11,r9
8000db90:	10 9c       	mov	r12,r8
8000db92:	fe b0 fc f9 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000db96:	0a 99       	mov	r9,r5
8000db98:	ee c8 00 1c 	sub	r8,r7,28
8000db9c:	2f 08       	sub	r8,-16
8000db9e:	12 9b       	mov	r11,r9
8000dba0:	10 9c       	mov	r12,r8
8000dba2:	fe b0 fc f1 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000dba6:	ea c9 ff fc 	sub	r9,r5,-4
8000dbaa:	ee c8 00 1c 	sub	r8,r7,28
8000dbae:	2e c8       	sub	r8,-20
8000dbb0:	12 9b       	mov	r11,r9
8000dbb2:	10 9c       	mov	r12,r8
8000dbb4:	fe b0 fc e8 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000dbb8:	ea c9 ff f8 	sub	r9,r5,-8
8000dbbc:	ee c8 00 1c 	sub	r8,r7,28
8000dbc0:	2e 88       	sub	r8,-24
8000dbc2:	12 9b       	mov	r11,r9
8000dbc4:	10 9c       	mov	r12,r8
8000dbc6:	fe b0 fc df 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000dbca:	ee ca 00 1c 	sub	r10,r7,28
8000dbce:	32 78       	mov	r8,39
8000dbd0:	31 c9       	mov	r9,28
8000dbd2:	31 eb       	mov	r11,30
8000dbd4:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dbd8:	fe b0 fc 0e 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000dbdc:	2f 4d       	sub	sp,-48
8000dbde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dbe2:	00 00       	add	r0,r0
8000dbe4:	80 00       	ld.sh	r0,r0[0x0]
8000dbe6:	d9 ba       	popm	r0-r7,r10-r11,pc,r12=0

8000dbe8 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000dbe8:	eb cd 40 e0 	pushm	r5-r7,lr
8000dbec:	1a 97       	mov	r7,sp
8000dbee:	20 dd       	sub	sp,52
8000dbf0:	4b 16       	lddpc	r6,8000dcb4 <mavlink_msg_attitude_quaternion_send+0xcc>
8000dbf2:	1e 26       	rsub	r6,pc
8000dbf4:	ee c5 ff f0 	sub	r5,r7,-16
8000dbf8:	ef 4c ff dc 	st.w	r7[-36],r12
8000dbfc:	ef 4b ff d8 	st.w	r7[-40],r11
8000dc00:	ef 4a ff d4 	st.w	r7[-44],r10
8000dc04:	ef 49 ff d0 	st.w	r7[-48],r9
8000dc08:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dc0c:	ee c9 00 28 	sub	r9,r7,40
8000dc10:	ee c8 00 20 	sub	r8,r7,32
8000dc14:	12 9b       	mov	r11,r9
8000dc16:	10 9c       	mov	r12,r8
8000dc18:	fe b0 fc b6 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000dc1c:	ee c9 00 2c 	sub	r9,r7,44
8000dc20:	ee c8 00 20 	sub	r8,r7,32
8000dc24:	2f c8       	sub	r8,-4
8000dc26:	12 9b       	mov	r11,r9
8000dc28:	10 9c       	mov	r12,r8
8000dc2a:	fe b0 fc ad 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000dc2e:	ee c9 00 30 	sub	r9,r7,48
8000dc32:	ee c8 00 20 	sub	r8,r7,32
8000dc36:	2f 88       	sub	r8,-8
8000dc38:	12 9b       	mov	r11,r9
8000dc3a:	10 9c       	mov	r12,r8
8000dc3c:	fe b0 fc a4 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000dc40:	ee c9 00 34 	sub	r9,r7,52
8000dc44:	ee c8 00 20 	sub	r8,r7,32
8000dc48:	2f 48       	sub	r8,-12
8000dc4a:	12 9b       	mov	r11,r9
8000dc4c:	10 9c       	mov	r12,r8
8000dc4e:	fe b0 fc 9b 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000dc52:	0a 99       	mov	r9,r5
8000dc54:	ee c8 00 20 	sub	r8,r7,32
8000dc58:	2f 08       	sub	r8,-16
8000dc5a:	12 9b       	mov	r11,r9
8000dc5c:	10 9c       	mov	r12,r8
8000dc5e:	fe b0 fc 93 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000dc62:	ea c9 ff fc 	sub	r9,r5,-4
8000dc66:	ee c8 00 20 	sub	r8,r7,32
8000dc6a:	2e c8       	sub	r8,-20
8000dc6c:	12 9b       	mov	r11,r9
8000dc6e:	10 9c       	mov	r12,r8
8000dc70:	fe b0 fc 8a 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000dc74:	ea c9 ff f8 	sub	r9,r5,-8
8000dc78:	ee c8 00 20 	sub	r8,r7,32
8000dc7c:	2e 88       	sub	r8,-24
8000dc7e:	12 9b       	mov	r11,r9
8000dc80:	10 9c       	mov	r12,r8
8000dc82:	fe b0 fc 81 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000dc86:	ea c9 ff f4 	sub	r9,r5,-12
8000dc8a:	ee c8 00 20 	sub	r8,r7,32
8000dc8e:	2e 48       	sub	r8,-28
8000dc90:	12 9b       	mov	r11,r9
8000dc92:	10 9c       	mov	r12,r8
8000dc94:	fe b0 fc 78 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000dc98:	ee ca 00 20 	sub	r10,r7,32
8000dc9c:	e0 68 00 f6 	mov	r8,246
8000dca0:	32 09       	mov	r9,32
8000dca2:	31 fb       	mov	r11,31
8000dca4:	ee fc ff dc 	ld.w	r12,r7[-36]
8000dca8:	fe b0 fb a6 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000dcac:	2f 3d       	sub	sp,-52
8000dcae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dcb2:	00 00       	add	r0,r0
8000dcb4:	80 00       	ld.sh	r0,r0[0x0]
8000dcb6:	da 76       	*unknown*

8000dcb8 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000dcb8:	eb cd 40 e0 	pushm	r5-r7,lr
8000dcbc:	1a 97       	mov	r7,sp
8000dcbe:	20 cd       	sub	sp,48
8000dcc0:	4a c6       	lddpc	r6,8000dd70 <mavlink_msg_local_position_ned_send+0xb8>
8000dcc2:	1e 26       	rsub	r6,pc
8000dcc4:	ee c5 ff f0 	sub	r5,r7,-16
8000dcc8:	ef 4c ff e0 	st.w	r7[-32],r12
8000dccc:	ef 4b ff dc 	st.w	r7[-36],r11
8000dcd0:	ef 4a ff d8 	st.w	r7[-40],r10
8000dcd4:	ef 49 ff d4 	st.w	r7[-44],r9
8000dcd8:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dcdc:	ee c9 00 24 	sub	r9,r7,36
8000dce0:	ee c8 00 1c 	sub	r8,r7,28
8000dce4:	12 9b       	mov	r11,r9
8000dce6:	10 9c       	mov	r12,r8
8000dce8:	fe b0 fc 4e 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000dcec:	ee c9 00 28 	sub	r9,r7,40
8000dcf0:	ee c8 00 1c 	sub	r8,r7,28
8000dcf4:	2f c8       	sub	r8,-4
8000dcf6:	12 9b       	mov	r11,r9
8000dcf8:	10 9c       	mov	r12,r8
8000dcfa:	fe b0 fc 45 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000dcfe:	ee c9 00 2c 	sub	r9,r7,44
8000dd02:	ee c8 00 1c 	sub	r8,r7,28
8000dd06:	2f 88       	sub	r8,-8
8000dd08:	12 9b       	mov	r11,r9
8000dd0a:	10 9c       	mov	r12,r8
8000dd0c:	fe b0 fc 3c 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000dd10:	ee c9 00 30 	sub	r9,r7,48
8000dd14:	ee c8 00 1c 	sub	r8,r7,28
8000dd18:	2f 48       	sub	r8,-12
8000dd1a:	12 9b       	mov	r11,r9
8000dd1c:	10 9c       	mov	r12,r8
8000dd1e:	fe b0 fc 33 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000dd22:	0a 99       	mov	r9,r5
8000dd24:	ee c8 00 1c 	sub	r8,r7,28
8000dd28:	2f 08       	sub	r8,-16
8000dd2a:	12 9b       	mov	r11,r9
8000dd2c:	10 9c       	mov	r12,r8
8000dd2e:	fe b0 fc 2b 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000dd32:	ea c9 ff fc 	sub	r9,r5,-4
8000dd36:	ee c8 00 1c 	sub	r8,r7,28
8000dd3a:	2e c8       	sub	r8,-20
8000dd3c:	12 9b       	mov	r11,r9
8000dd3e:	10 9c       	mov	r12,r8
8000dd40:	fe b0 fc 22 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000dd44:	ea c9 ff f8 	sub	r9,r5,-8
8000dd48:	ee c8 00 1c 	sub	r8,r7,28
8000dd4c:	2e 88       	sub	r8,-24
8000dd4e:	12 9b       	mov	r11,r9
8000dd50:	10 9c       	mov	r12,r8
8000dd52:	fe b0 fc 19 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000dd56:	ee ca 00 1c 	sub	r10,r7,28
8000dd5a:	e0 68 00 b9 	mov	r8,185
8000dd5e:	31 c9       	mov	r9,28
8000dd60:	32 0b       	mov	r11,32
8000dd62:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dd66:	fe b0 fb 47 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000dd6a:	2f 4d       	sub	sp,-48
8000dd6c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dd70:	80 00       	ld.sh	r0,r0[0x0]
8000dd72:	db 46       	*unknown*

8000dd74 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000dd74:	eb cd 40 e0 	pushm	r5-r7,lr
8000dd78:	1a 97       	mov	r7,sp
8000dd7a:	21 0d       	sub	sp,64
8000dd7c:	4b b6       	lddpc	r6,8000de68 <mavlink_msg_global_position_int_send+0xf4>
8000dd7e:	1e 26       	rsub	r6,pc
8000dd80:	ee c5 ff f0 	sub	r5,r7,-16
8000dd84:	ef 4c ff e0 	st.w	r7[-32],r12
8000dd88:	ef 4b ff dc 	st.w	r7[-36],r11
8000dd8c:	ef 4a ff d8 	st.w	r7[-40],r10
8000dd90:	ef 49 ff d4 	st.w	r7[-44],r9
8000dd94:	ef 48 ff d0 	st.w	r7[-48],r8
8000dd98:	6a 1b       	ld.w	r11,r5[0x4]
8000dd9a:	6a 2a       	ld.w	r10,r5[0x8]
8000dd9c:	6a 39       	ld.w	r9,r5[0xc]
8000dd9e:	6a 48       	ld.w	r8,r5[0x10]
8000dda0:	ef 5b ff cc 	st.h	r7[-52],r11
8000dda4:	ef 5a ff c8 	st.h	r7[-56],r10
8000dda8:	ef 59 ff c4 	st.h	r7[-60],r9
8000ddac:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ddb0:	ee c9 00 24 	sub	r9,r7,36
8000ddb4:	ee c8 00 1c 	sub	r8,r7,28
8000ddb8:	12 9b       	mov	r11,r9
8000ddba:	10 9c       	mov	r12,r8
8000ddbc:	fe b0 fb e4 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000ddc0:	ee c9 00 28 	sub	r9,r7,40
8000ddc4:	ee c8 00 1c 	sub	r8,r7,28
8000ddc8:	2f c8       	sub	r8,-4
8000ddca:	12 9b       	mov	r11,r9
8000ddcc:	10 9c       	mov	r12,r8
8000ddce:	fe b0 fb db 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000ddd2:	ee c9 00 2c 	sub	r9,r7,44
8000ddd6:	ee c8 00 1c 	sub	r8,r7,28
8000ddda:	2f 88       	sub	r8,-8
8000dddc:	12 9b       	mov	r11,r9
8000ddde:	10 9c       	mov	r12,r8
8000dde0:	fe b0 fb d2 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000dde4:	ee c9 00 30 	sub	r9,r7,48
8000dde8:	ee c8 00 1c 	sub	r8,r7,28
8000ddec:	2f 48       	sub	r8,-12
8000ddee:	12 9b       	mov	r11,r9
8000ddf0:	10 9c       	mov	r12,r8
8000ddf2:	fe b0 fb c9 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000ddf6:	0a 99       	mov	r9,r5
8000ddf8:	ee c8 00 1c 	sub	r8,r7,28
8000ddfc:	2f 08       	sub	r8,-16
8000ddfe:	12 9b       	mov	r11,r9
8000de00:	10 9c       	mov	r12,r8
8000de02:	fe b0 fb c1 	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000de06:	ee c9 00 34 	sub	r9,r7,52
8000de0a:	ee c8 00 1c 	sub	r8,r7,28
8000de0e:	2e c8       	sub	r8,-20
8000de10:	12 9b       	mov	r11,r9
8000de12:	10 9c       	mov	r12,r8
8000de14:	fe b0 fb 9e 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000de18:	ee c9 00 38 	sub	r9,r7,56
8000de1c:	ee c8 00 1c 	sub	r8,r7,28
8000de20:	2e a8       	sub	r8,-22
8000de22:	12 9b       	mov	r11,r9
8000de24:	10 9c       	mov	r12,r8
8000de26:	fe b0 fb 95 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000de2a:	ee c9 00 3c 	sub	r9,r7,60
8000de2e:	ee c8 00 1c 	sub	r8,r7,28
8000de32:	2e 88       	sub	r8,-24
8000de34:	12 9b       	mov	r11,r9
8000de36:	10 9c       	mov	r12,r8
8000de38:	fe b0 fb 8c 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000de3c:	ee c9 00 40 	sub	r9,r7,64
8000de40:	ee c8 00 1c 	sub	r8,r7,28
8000de44:	2e 68       	sub	r8,-26
8000de46:	12 9b       	mov	r11,r9
8000de48:	10 9c       	mov	r12,r8
8000de4a:	fe b0 fb 83 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000de4e:	ee ca 00 1c 	sub	r10,r7,28
8000de52:	36 88       	mov	r8,104
8000de54:	31 c9       	mov	r9,28
8000de56:	32 1b       	mov	r11,33
8000de58:	ee fc ff e0 	ld.w	r12,r7[-32]
8000de5c:	fe b0 fa cc 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000de60:	2f 0d       	sub	sp,-64
8000de62:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000de66:	00 00       	add	r0,r0
8000de68:	80 00       	ld.sh	r0,r0[0x0]
8000de6a:	dc 02       	popm	lr-pc

8000de6c <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000de6c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000de70:	1a 97       	mov	r7,sp
8000de72:	21 2d       	sub	sp,72
8000de74:	4c 86       	lddpc	r6,8000df94 <mavlink_msg_rc_channels_scaled_send+0x128>
8000de76:	1e 26       	rsub	r6,pc
8000de78:	ee ce ff e0 	sub	lr,r7,-32
8000de7c:	ef 4c ff e4 	st.w	r7[-28],r12
8000de80:	ef 4b ff e0 	st.w	r7[-32],r11
8000de84:	14 90       	mov	r0,r10
8000de86:	12 91       	mov	r1,r9
8000de88:	10 92       	mov	r2,r8
8000de8a:	7c 03       	ld.w	r3,lr[0x0]
8000de8c:	7c 15       	ld.w	r5,lr[0x4]
8000de8e:	7c 2c       	ld.w	r12,lr[0x8]
8000de90:	7c 3b       	ld.w	r11,lr[0xc]
8000de92:	7c 4a       	ld.w	r10,lr[0x10]
8000de94:	7c 59       	ld.w	r9,lr[0x14]
8000de96:	7c 68       	ld.w	r8,lr[0x18]
8000de98:	00 9e       	mov	lr,r0
8000de9a:	ef 6e ff dc 	st.b	r7[-36],lr
8000de9e:	02 9e       	mov	lr,r1
8000dea0:	ef 5e ff d8 	st.h	r7[-40],lr
8000dea4:	04 9e       	mov	lr,r2
8000dea6:	ef 5e ff d4 	st.h	r7[-44],lr
8000deaa:	06 9e       	mov	lr,r3
8000deac:	ef 5e ff d0 	st.h	r7[-48],lr
8000deb0:	0a 9e       	mov	lr,r5
8000deb2:	ef 5e ff cc 	st.h	r7[-52],lr
8000deb6:	ef 5c ff c8 	st.h	r7[-56],r12
8000deba:	ef 5b ff c4 	st.h	r7[-60],r11
8000debe:	ef 5a ff c0 	st.h	r7[-64],r10
8000dec2:	ef 59 ff bc 	st.h	r7[-68],r9
8000dec6:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000deca:	ee c9 00 20 	sub	r9,r7,32
8000dece:	ee c8 00 18 	sub	r8,r7,24
8000ded2:	12 9b       	mov	r11,r9
8000ded4:	10 9c       	mov	r12,r8
8000ded6:	fe b0 fb 57 	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000deda:	ee c9 00 28 	sub	r9,r7,40
8000dede:	ee c8 00 18 	sub	r8,r7,24
8000dee2:	2f c8       	sub	r8,-4
8000dee4:	12 9b       	mov	r11,r9
8000dee6:	10 9c       	mov	r12,r8
8000dee8:	fe b0 fb 34 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000deec:	ee c9 00 2c 	sub	r9,r7,44
8000def0:	ee c8 00 18 	sub	r8,r7,24
8000def4:	2f a8       	sub	r8,-6
8000def6:	12 9b       	mov	r11,r9
8000def8:	10 9c       	mov	r12,r8
8000defa:	fe b0 fb 2b 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000defe:	ee c9 00 30 	sub	r9,r7,48
8000df02:	ee c8 00 18 	sub	r8,r7,24
8000df06:	2f 88       	sub	r8,-8
8000df08:	12 9b       	mov	r11,r9
8000df0a:	10 9c       	mov	r12,r8
8000df0c:	fe b0 fb 22 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000df10:	ee c9 00 34 	sub	r9,r7,52
8000df14:	ee c8 00 18 	sub	r8,r7,24
8000df18:	2f 68       	sub	r8,-10
8000df1a:	12 9b       	mov	r11,r9
8000df1c:	10 9c       	mov	r12,r8
8000df1e:	fe b0 fb 19 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000df22:	ee c9 00 38 	sub	r9,r7,56
8000df26:	ee c8 00 18 	sub	r8,r7,24
8000df2a:	2f 48       	sub	r8,-12
8000df2c:	12 9b       	mov	r11,r9
8000df2e:	10 9c       	mov	r12,r8
8000df30:	fe b0 fb 10 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000df34:	ee c9 00 3c 	sub	r9,r7,60
8000df38:	ee c8 00 18 	sub	r8,r7,24
8000df3c:	2f 28       	sub	r8,-14
8000df3e:	12 9b       	mov	r11,r9
8000df40:	10 9c       	mov	r12,r8
8000df42:	fe b0 fb 07 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000df46:	ee c9 00 40 	sub	r9,r7,64
8000df4a:	ee c8 00 18 	sub	r8,r7,24
8000df4e:	2f 08       	sub	r8,-16
8000df50:	12 9b       	mov	r11,r9
8000df52:	10 9c       	mov	r12,r8
8000df54:	fe b0 fa fe 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000df58:	ee c9 00 44 	sub	r9,r7,68
8000df5c:	ee c8 00 18 	sub	r8,r7,24
8000df60:	2e e8       	sub	r8,-18
8000df62:	12 9b       	mov	r11,r9
8000df64:	10 9c       	mov	r12,r8
8000df66:	fe b0 fa f5 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000df6a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000df6e:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000df72:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000df76:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000df7a:	ee ca 00 18 	sub	r10,r7,24
8000df7e:	e0 68 00 ed 	mov	r8,237
8000df82:	31 69       	mov	r9,22
8000df84:	32 2b       	mov	r11,34
8000df86:	ee fc ff e4 	ld.w	r12,r7[-28]
8000df8a:	fe b0 fa 35 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000df8e:	2e ed       	sub	sp,-72
8000df90:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000df94:	80 00       	ld.sh	r0,r0[0x0]
8000df96:	dc fa       	popm	r0-r10,pc,r12=-1

8000df98 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000df98:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000df9c:	1a 97       	mov	r7,sp
8000df9e:	21 2d       	sub	sp,72
8000dfa0:	4c 86       	lddpc	r6,8000e0c0 <mavlink_msg_rc_channels_raw_send+0x128>
8000dfa2:	1e 26       	rsub	r6,pc
8000dfa4:	ee ce ff e0 	sub	lr,r7,-32
8000dfa8:	ef 4c ff e4 	st.w	r7[-28],r12
8000dfac:	ef 4b ff e0 	st.w	r7[-32],r11
8000dfb0:	14 90       	mov	r0,r10
8000dfb2:	12 91       	mov	r1,r9
8000dfb4:	10 92       	mov	r2,r8
8000dfb6:	7c 03       	ld.w	r3,lr[0x0]
8000dfb8:	7c 15       	ld.w	r5,lr[0x4]
8000dfba:	7c 2c       	ld.w	r12,lr[0x8]
8000dfbc:	7c 3b       	ld.w	r11,lr[0xc]
8000dfbe:	7c 4a       	ld.w	r10,lr[0x10]
8000dfc0:	7c 59       	ld.w	r9,lr[0x14]
8000dfc2:	7c 68       	ld.w	r8,lr[0x18]
8000dfc4:	00 9e       	mov	lr,r0
8000dfc6:	ef 6e ff dc 	st.b	r7[-36],lr
8000dfca:	02 9e       	mov	lr,r1
8000dfcc:	ef 5e ff d8 	st.h	r7[-40],lr
8000dfd0:	04 9e       	mov	lr,r2
8000dfd2:	ef 5e ff d4 	st.h	r7[-44],lr
8000dfd6:	06 9e       	mov	lr,r3
8000dfd8:	ef 5e ff d0 	st.h	r7[-48],lr
8000dfdc:	0a 9e       	mov	lr,r5
8000dfde:	ef 5e ff cc 	st.h	r7[-52],lr
8000dfe2:	ef 5c ff c8 	st.h	r7[-56],r12
8000dfe6:	ef 5b ff c4 	st.h	r7[-60],r11
8000dfea:	ef 5a ff c0 	st.h	r7[-64],r10
8000dfee:	ef 59 ff bc 	st.h	r7[-68],r9
8000dff2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dff6:	ee c9 00 20 	sub	r9,r7,32
8000dffa:	ee c8 00 18 	sub	r8,r7,24
8000dffe:	12 9b       	mov	r11,r9
8000e000:	10 9c       	mov	r12,r8
8000e002:	fe b0 fa c1 	rcall	8000d584 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000e006:	ee c9 00 28 	sub	r9,r7,40
8000e00a:	ee c8 00 18 	sub	r8,r7,24
8000e00e:	2f c8       	sub	r8,-4
8000e010:	12 9b       	mov	r11,r9
8000e012:	10 9c       	mov	r12,r8
8000e014:	fe b0 fa 9e 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000e018:	ee c9 00 2c 	sub	r9,r7,44
8000e01c:	ee c8 00 18 	sub	r8,r7,24
8000e020:	2f a8       	sub	r8,-6
8000e022:	12 9b       	mov	r11,r9
8000e024:	10 9c       	mov	r12,r8
8000e026:	fe b0 fa 95 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000e02a:	ee c9 00 30 	sub	r9,r7,48
8000e02e:	ee c8 00 18 	sub	r8,r7,24
8000e032:	2f 88       	sub	r8,-8
8000e034:	12 9b       	mov	r11,r9
8000e036:	10 9c       	mov	r12,r8
8000e038:	fe b0 fa 8c 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000e03c:	ee c9 00 34 	sub	r9,r7,52
8000e040:	ee c8 00 18 	sub	r8,r7,24
8000e044:	2f 68       	sub	r8,-10
8000e046:	12 9b       	mov	r11,r9
8000e048:	10 9c       	mov	r12,r8
8000e04a:	fe b0 fa 83 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000e04e:	ee c9 00 38 	sub	r9,r7,56
8000e052:	ee c8 00 18 	sub	r8,r7,24
8000e056:	2f 48       	sub	r8,-12
8000e058:	12 9b       	mov	r11,r9
8000e05a:	10 9c       	mov	r12,r8
8000e05c:	fe b0 fa 7a 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000e060:	ee c9 00 3c 	sub	r9,r7,60
8000e064:	ee c8 00 18 	sub	r8,r7,24
8000e068:	2f 28       	sub	r8,-14
8000e06a:	12 9b       	mov	r11,r9
8000e06c:	10 9c       	mov	r12,r8
8000e06e:	fe b0 fa 71 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000e072:	ee c9 00 40 	sub	r9,r7,64
8000e076:	ee c8 00 18 	sub	r8,r7,24
8000e07a:	2f 08       	sub	r8,-16
8000e07c:	12 9b       	mov	r11,r9
8000e07e:	10 9c       	mov	r12,r8
8000e080:	fe b0 fa 68 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000e084:	ee c9 00 44 	sub	r9,r7,68
8000e088:	ee c8 00 18 	sub	r8,r7,24
8000e08c:	2e e8       	sub	r8,-18
8000e08e:	12 9b       	mov	r11,r9
8000e090:	10 9c       	mov	r12,r8
8000e092:	fe b0 fa 5f 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e096:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e09a:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000e09e:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000e0a2:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000e0a6:	ee ca 00 18 	sub	r10,r7,24
8000e0aa:	e0 68 00 f4 	mov	r8,244
8000e0ae:	31 69       	mov	r9,22
8000e0b0:	32 3b       	mov	r11,35
8000e0b2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e0b6:	fe b0 f9 9f 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000e0ba:	2e ed       	sub	sp,-72
8000e0bc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e0c0:	80 00       	ld.sh	r0,r0[0x0]
8000e0c2:	de 26       	*unknown*

8000e0c4 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000e0c4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e0c8:	1a 97       	mov	r7,sp
8000e0ca:	21 1d       	sub	sp,68
8000e0cc:	4c 46       	lddpc	r6,8000e1dc <mavlink_msg_servo_output_raw_send+0x118>
8000e0ce:	1e 26       	rsub	r6,pc
8000e0d0:	ee ce ff e4 	sub	lr,r7,-28
8000e0d4:	ef 4c ff e4 	st.w	r7[-28],r12
8000e0d8:	ef 4b ff e0 	st.w	r7[-32],r11
8000e0dc:	14 91       	mov	r1,r10
8000e0de:	12 92       	mov	r2,r9
8000e0e0:	10 93       	mov	r3,r8
8000e0e2:	7c 05       	ld.w	r5,lr[0x0]
8000e0e4:	7c 1c       	ld.w	r12,lr[0x4]
8000e0e6:	7c 2b       	ld.w	r11,lr[0x8]
8000e0e8:	7c 3a       	ld.w	r10,lr[0xc]
8000e0ea:	7c 49       	ld.w	r9,lr[0x10]
8000e0ec:	7c 58       	ld.w	r8,lr[0x14]
8000e0ee:	02 9e       	mov	lr,r1
8000e0f0:	ef 6e ff dc 	st.b	r7[-36],lr
8000e0f4:	04 9e       	mov	lr,r2
8000e0f6:	ef 5e ff d8 	st.h	r7[-40],lr
8000e0fa:	06 9e       	mov	lr,r3
8000e0fc:	ef 5e ff d4 	st.h	r7[-44],lr
8000e100:	0a 9e       	mov	lr,r5
8000e102:	ef 5e ff d0 	st.h	r7[-48],lr
8000e106:	ef 5c ff cc 	st.h	r7[-52],r12
8000e10a:	ef 5b ff c8 	st.h	r7[-56],r11
8000e10e:	ef 5a ff c4 	st.h	r7[-60],r10
8000e112:	ef 59 ff c0 	st.h	r7[-64],r9
8000e116:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000e11a:	ee c9 00 20 	sub	r9,r7,32
8000e11e:	ee c8 00 18 	sub	r8,r7,24
8000e122:	12 9b       	mov	r11,r9
8000e124:	10 9c       	mov	r12,r8
8000e126:	fe b0 fa 2f 	rcall	8000d584 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000e12a:	ee c9 00 28 	sub	r9,r7,40
8000e12e:	ee c8 00 18 	sub	r8,r7,24
8000e132:	2f c8       	sub	r8,-4
8000e134:	12 9b       	mov	r11,r9
8000e136:	10 9c       	mov	r12,r8
8000e138:	fe b0 fa 0c 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000e13c:	ee c9 00 2c 	sub	r9,r7,44
8000e140:	ee c8 00 18 	sub	r8,r7,24
8000e144:	2f a8       	sub	r8,-6
8000e146:	12 9b       	mov	r11,r9
8000e148:	10 9c       	mov	r12,r8
8000e14a:	fe b0 fa 03 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000e14e:	ee c9 00 30 	sub	r9,r7,48
8000e152:	ee c8 00 18 	sub	r8,r7,24
8000e156:	2f 88       	sub	r8,-8
8000e158:	12 9b       	mov	r11,r9
8000e15a:	10 9c       	mov	r12,r8
8000e15c:	fe b0 f9 fa 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000e160:	ee c9 00 34 	sub	r9,r7,52
8000e164:	ee c8 00 18 	sub	r8,r7,24
8000e168:	2f 68       	sub	r8,-10
8000e16a:	12 9b       	mov	r11,r9
8000e16c:	10 9c       	mov	r12,r8
8000e16e:	fe b0 f9 f1 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000e172:	ee c9 00 38 	sub	r9,r7,56
8000e176:	ee c8 00 18 	sub	r8,r7,24
8000e17a:	2f 48       	sub	r8,-12
8000e17c:	12 9b       	mov	r11,r9
8000e17e:	10 9c       	mov	r12,r8
8000e180:	fe b0 f9 e8 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000e184:	ee c9 00 3c 	sub	r9,r7,60
8000e188:	ee c8 00 18 	sub	r8,r7,24
8000e18c:	2f 28       	sub	r8,-14
8000e18e:	12 9b       	mov	r11,r9
8000e190:	10 9c       	mov	r12,r8
8000e192:	fe b0 f9 df 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000e196:	ee c9 00 40 	sub	r9,r7,64
8000e19a:	ee c8 00 18 	sub	r8,r7,24
8000e19e:	2f 08       	sub	r8,-16
8000e1a0:	12 9b       	mov	r11,r9
8000e1a2:	10 9c       	mov	r12,r8
8000e1a4:	fe b0 f9 d6 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000e1a8:	ee c9 00 44 	sub	r9,r7,68
8000e1ac:	ee c8 00 18 	sub	r8,r7,24
8000e1b0:	2e e8       	sub	r8,-18
8000e1b2:	12 9b       	mov	r11,r9
8000e1b4:	10 9c       	mov	r12,r8
8000e1b6:	fe b0 f9 cd 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e1ba:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e1be:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000e1c2:	ee ca 00 18 	sub	r10,r7,24
8000e1c6:	e0 68 00 de 	mov	r8,222
8000e1ca:	31 59       	mov	r9,21
8000e1cc:	32 4b       	mov	r11,36
8000e1ce:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e1d2:	fe b0 f9 11 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000e1d6:	2e fd       	sub	sp,-68
8000e1d8:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000e1dc:	80 00       	ld.sh	r0,r0[0x0]
8000e1de:	df 52       	popm	r0-r3,r8-r9,r11-r12,lr-pc

8000e1e0 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000e1e0:	eb cd 40 e0 	pushm	r5-r7,lr
8000e1e4:	1a 97       	mov	r7,sp
8000e1e6:	20 ad       	sub	sp,40
8000e1e8:	4a 36       	lddpc	r6,8000e274 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000e1ea:	1e 26       	rsub	r6,pc
8000e1ec:	ee c5 ff f0 	sub	r5,r7,-16
8000e1f0:	ef 4c ff e8 	st.w	r7[-24],r12
8000e1f4:	ef 4b ff e4 	st.w	r7[-28],r11
8000e1f8:	ef 4a ff e0 	st.w	r7[-32],r10
8000e1fc:	ef 49 ff dc 	st.w	r7[-36],r9
8000e200:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e204:	ee c9 00 1c 	sub	r9,r7,28
8000e208:	ee c8 00 14 	sub	r8,r7,20
8000e20c:	12 9b       	mov	r11,r9
8000e20e:	10 9c       	mov	r12,r8
8000e210:	fe b0 f9 ba 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000e214:	ee c9 00 20 	sub	r9,r7,32
8000e218:	ee c8 00 14 	sub	r8,r7,20
8000e21c:	2f c8       	sub	r8,-4
8000e21e:	12 9b       	mov	r11,r9
8000e220:	10 9c       	mov	r12,r8
8000e222:	fe b0 f9 b1 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000e226:	ee c9 00 24 	sub	r9,r7,36
8000e22a:	ee c8 00 14 	sub	r8,r7,20
8000e22e:	2f 88       	sub	r8,-8
8000e230:	12 9b       	mov	r11,r9
8000e232:	10 9c       	mov	r12,r8
8000e234:	fe b0 f9 a8 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000e238:	ee c9 00 28 	sub	r9,r7,40
8000e23c:	ee c8 00 14 	sub	r8,r7,20
8000e240:	2f 48       	sub	r8,-12
8000e242:	12 9b       	mov	r11,r9
8000e244:	10 9c       	mov	r12,r8
8000e246:	fe b0 f9 9f 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e24a:	0a 99       	mov	r9,r5
8000e24c:	ee c8 00 14 	sub	r8,r7,20
8000e250:	2f 08       	sub	r8,-16
8000e252:	12 9b       	mov	r11,r9
8000e254:	10 9c       	mov	r12,r8
8000e256:	fe b0 f9 97 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000e25a:	ee ca 00 14 	sub	r10,r7,20
8000e25e:	e0 68 00 ef 	mov	r8,239
8000e262:	31 49       	mov	r9,20
8000e264:	33 ab       	mov	r11,58
8000e266:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e26a:	fe b0 f8 c5 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e26e:	2f 6d       	sub	sp,-40
8000e270:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e274:	80 00       	ld.sh	r0,r0[0x0]
8000e276:	e0 6e eb cd 	mov	lr,60365

8000e278 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000e278:	eb cd 40 e0 	pushm	r5-r7,lr
8000e27c:	1a 97       	mov	r7,sp
8000e27e:	20 ad       	sub	sp,40
8000e280:	4a 36       	lddpc	r6,8000e30c <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000e282:	1e 26       	rsub	r6,pc
8000e284:	ee c5 ff f0 	sub	r5,r7,-16
8000e288:	ef 4c ff e8 	st.w	r7[-24],r12
8000e28c:	ef 4b ff e4 	st.w	r7[-28],r11
8000e290:	ef 4a ff e0 	st.w	r7[-32],r10
8000e294:	ef 49 ff dc 	st.w	r7[-36],r9
8000e298:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e29c:	ee c9 00 1c 	sub	r9,r7,28
8000e2a0:	ee c8 00 14 	sub	r8,r7,20
8000e2a4:	12 9b       	mov	r11,r9
8000e2a6:	10 9c       	mov	r12,r8
8000e2a8:	fe b0 f9 6e 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000e2ac:	ee c9 00 20 	sub	r9,r7,32
8000e2b0:	ee c8 00 14 	sub	r8,r7,20
8000e2b4:	2f c8       	sub	r8,-4
8000e2b6:	12 9b       	mov	r11,r9
8000e2b8:	10 9c       	mov	r12,r8
8000e2ba:	fe b0 f9 65 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000e2be:	ee c9 00 24 	sub	r9,r7,36
8000e2c2:	ee c8 00 14 	sub	r8,r7,20
8000e2c6:	2f 88       	sub	r8,-8
8000e2c8:	12 9b       	mov	r11,r9
8000e2ca:	10 9c       	mov	r12,r8
8000e2cc:	fe b0 f9 5c 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000e2d0:	ee c9 00 28 	sub	r9,r7,40
8000e2d4:	ee c8 00 14 	sub	r8,r7,20
8000e2d8:	2f 48       	sub	r8,-12
8000e2da:	12 9b       	mov	r11,r9
8000e2dc:	10 9c       	mov	r12,r8
8000e2de:	fe b0 f9 53 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e2e2:	0a 99       	mov	r9,r5
8000e2e4:	ee c8 00 14 	sub	r8,r7,20
8000e2e8:	2f 08       	sub	r8,-16
8000e2ea:	12 9b       	mov	r11,r9
8000e2ec:	10 9c       	mov	r12,r8
8000e2ee:	fe b0 f9 4b 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000e2f2:	ee ca 00 14 	sub	r10,r7,20
8000e2f6:	e0 68 00 ee 	mov	r8,238
8000e2fa:	31 49       	mov	r9,20
8000e2fc:	33 bb       	mov	r11,59
8000e2fe:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e302:	fe b0 f8 79 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e306:	2f 6d       	sub	sp,-40
8000e308:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e30c:	80 00       	ld.sh	r0,r0[0x0]
8000e30e:	e1 06 eb cd 	ld.sh	r6,r0[-5171]

8000e310 <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000e310:	eb cd 40 e0 	pushm	r5-r7,lr
8000e314:	1a 97       	mov	r7,sp
8000e316:	20 ad       	sub	sp,40
8000e318:	4a 76       	lddpc	r6,8000e3b4 <mavlink_msg_vfr_hud_send+0xa4>
8000e31a:	1e 26       	rsub	r6,pc
8000e31c:	ee c5 ff f0 	sub	r5,r7,-16
8000e320:	ef 4c ff e8 	st.w	r7[-24],r12
8000e324:	ef 4b ff e4 	st.w	r7[-28],r11
8000e328:	ef 4a ff e0 	st.w	r7[-32],r10
8000e32c:	ef 59 ff dc 	st.h	r7[-36],r9
8000e330:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000e334:	ee c9 00 1c 	sub	r9,r7,28
8000e338:	ee c8 00 14 	sub	r8,r7,20
8000e33c:	12 9b       	mov	r11,r9
8000e33e:	10 9c       	mov	r12,r8
8000e340:	fe b0 f9 22 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000e344:	ee c9 00 20 	sub	r9,r7,32
8000e348:	ee c8 00 14 	sub	r8,r7,20
8000e34c:	2f c8       	sub	r8,-4
8000e34e:	12 9b       	mov	r11,r9
8000e350:	10 9c       	mov	r12,r8
8000e352:	fe b0 f9 19 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000e356:	0a 99       	mov	r9,r5
8000e358:	ee c8 00 14 	sub	r8,r7,20
8000e35c:	2f 88       	sub	r8,-8
8000e35e:	12 9b       	mov	r11,r9
8000e360:	10 9c       	mov	r12,r8
8000e362:	fe b0 f9 11 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000e366:	ea c9 ff fc 	sub	r9,r5,-4
8000e36a:	ee c8 00 14 	sub	r8,r7,20
8000e36e:	2f 48       	sub	r8,-12
8000e370:	12 9b       	mov	r11,r9
8000e372:	10 9c       	mov	r12,r8
8000e374:	fe b0 f9 08 	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000e378:	ee c9 00 24 	sub	r9,r7,36
8000e37c:	ee c8 00 14 	sub	r8,r7,20
8000e380:	2f 08       	sub	r8,-16
8000e382:	12 9b       	mov	r11,r9
8000e384:	10 9c       	mov	r12,r8
8000e386:	fe b0 f8 e5 	rcall	8000d550 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000e38a:	ee c9 00 28 	sub	r9,r7,40
8000e38e:	ee c8 00 14 	sub	r8,r7,20
8000e392:	2e e8       	sub	r8,-18
8000e394:	12 9b       	mov	r11,r9
8000e396:	10 9c       	mov	r12,r8
8000e398:	fe b0 f8 dc 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000e39c:	ee ca 00 14 	sub	r10,r7,20
8000e3a0:	31 48       	mov	r8,20
8000e3a2:	31 49       	mov	r9,20
8000e3a4:	34 ab       	mov	r11,74
8000e3a6:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e3aa:	fe b0 f8 25 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000e3ae:	2f 6d       	sub	sp,-40
8000e3b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e3b4:	80 00       	ld.sh	r0,r0[0x0]
8000e3b6:	e1 9e       	*unknown*

8000e3b8 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000e3b8:	eb cd 40 e0 	pushm	r5-r7,lr
8000e3bc:	1a 97       	mov	r7,sp
8000e3be:	20 ad       	sub	sp,40
8000e3c0:	4a 36       	lddpc	r6,8000e44c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000e3c2:	1e 26       	rsub	r6,pc
8000e3c4:	ee c5 ff f0 	sub	r5,r7,-16
8000e3c8:	ef 4c ff e8 	st.w	r7[-24],r12
8000e3cc:	ef 4b ff e4 	st.w	r7[-28],r11
8000e3d0:	ef 4a ff e0 	st.w	r7[-32],r10
8000e3d4:	ef 49 ff dc 	st.w	r7[-36],r9
8000e3d8:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e3dc:	ee c9 00 1c 	sub	r9,r7,28
8000e3e0:	ee c8 00 14 	sub	r8,r7,20
8000e3e4:	12 9b       	mov	r11,r9
8000e3e6:	10 9c       	mov	r12,r8
8000e3e8:	fe b0 f8 ce 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000e3ec:	ee c9 00 20 	sub	r9,r7,32
8000e3f0:	ee c8 00 14 	sub	r8,r7,20
8000e3f4:	2f c8       	sub	r8,-4
8000e3f6:	12 9b       	mov	r11,r9
8000e3f8:	10 9c       	mov	r12,r8
8000e3fa:	fe b0 f8 c5 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000e3fe:	ee c9 00 24 	sub	r9,r7,36
8000e402:	ee c8 00 14 	sub	r8,r7,20
8000e406:	2f 88       	sub	r8,-8
8000e408:	12 9b       	mov	r11,r9
8000e40a:	10 9c       	mov	r12,r8
8000e40c:	fe b0 f8 bc 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000e410:	ee c9 00 28 	sub	r9,r7,40
8000e414:	ee c8 00 14 	sub	r8,r7,20
8000e418:	2f 48       	sub	r8,-12
8000e41a:	12 9b       	mov	r11,r9
8000e41c:	10 9c       	mov	r12,r8
8000e41e:	fe b0 f8 b3 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e422:	0a 99       	mov	r9,r5
8000e424:	ee c8 00 14 	sub	r8,r7,20
8000e428:	2f 08       	sub	r8,-16
8000e42a:	12 9b       	mov	r11,r9
8000e42c:	10 9c       	mov	r12,r8
8000e42e:	fe b0 f8 ab 	rcall	8000d584 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000e432:	ee ca 00 14 	sub	r10,r7,20
8000e436:	37 f8       	mov	r8,127
8000e438:	31 49       	mov	r9,20
8000e43a:	35 0b       	mov	r11,80
8000e43c:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e440:	fe b0 f7 da 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e444:	2f 6d       	sub	sp,-40
8000e446:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e44a:	00 00       	add	r0,r0
8000e44c:	80 00       	ld.sh	r0,r0[0x0]
8000e44e:	e2 46 eb cd 	cp.w	r6,191437

8000e450 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000e450:	eb cd 40 e0 	pushm	r5-r7,lr
8000e454:	1a 97       	mov	r7,sp
8000e456:	21 9d       	sub	sp,100
8000e458:	4d d6       	lddpc	r6,8000e5cc <mavlink_msg_hil_state_send+0x17c>
8000e45a:	1e 26       	rsub	r6,pc
8000e45c:	ee c5 ff f0 	sub	r5,r7,-16
8000e460:	ef 4c ff c4 	st.w	r7[-60],r12
8000e464:	ee eb ff bc 	st.d	r7[-68],r10
8000e468:	ef 49 ff b8 	st.w	r7[-72],r9
8000e46c:	ef 48 ff b4 	st.w	r7[-76],r8
8000e470:	6a 7e       	ld.w	lr,r5[0x1c]
8000e472:	6a 8c       	ld.w	r12,r5[0x20]
8000e474:	6a 9b       	ld.w	r11,r5[0x24]
8000e476:	6a aa       	ld.w	r10,r5[0x28]
8000e478:	6a b9       	ld.w	r9,r5[0x2c]
8000e47a:	6a c8       	ld.w	r8,r5[0x30]
8000e47c:	ef 5e ff b0 	st.h	r7[-80],lr
8000e480:	ef 5c ff ac 	st.h	r7[-84],r12
8000e484:	ef 5b ff a8 	st.h	r7[-88],r11
8000e488:	ef 5a ff a4 	st.h	r7[-92],r10
8000e48c:	ef 59 ff a0 	st.h	r7[-96],r9
8000e490:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000e494:	ee c9 00 44 	sub	r9,r7,68
8000e498:	ee c8 00 38 	sub	r8,r7,56
8000e49c:	12 9b       	mov	r11,r9
8000e49e:	10 9c       	mov	r12,r8
8000e4a0:	fe b0 f8 9e 	rcall	8000d5dc <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000e4a4:	ee c9 00 48 	sub	r9,r7,72
8000e4a8:	ee c8 00 38 	sub	r8,r7,56
8000e4ac:	2f 88       	sub	r8,-8
8000e4ae:	12 9b       	mov	r11,r9
8000e4b0:	10 9c       	mov	r12,r8
8000e4b2:	fe b0 f8 69 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000e4b6:	ee c9 00 4c 	sub	r9,r7,76
8000e4ba:	ee c8 00 38 	sub	r8,r7,56
8000e4be:	2f 48       	sub	r8,-12
8000e4c0:	12 9b       	mov	r11,r9
8000e4c2:	10 9c       	mov	r12,r8
8000e4c4:	fe b0 f8 60 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000e4c8:	0a 99       	mov	r9,r5
8000e4ca:	ee c8 00 38 	sub	r8,r7,56
8000e4ce:	2f 08       	sub	r8,-16
8000e4d0:	12 9b       	mov	r11,r9
8000e4d2:	10 9c       	mov	r12,r8
8000e4d4:	fe b0 f8 58 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000e4d8:	ea c9 ff fc 	sub	r9,r5,-4
8000e4dc:	ee c8 00 38 	sub	r8,r7,56
8000e4e0:	2e c8       	sub	r8,-20
8000e4e2:	12 9b       	mov	r11,r9
8000e4e4:	10 9c       	mov	r12,r8
8000e4e6:	fe b0 f8 4f 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000e4ea:	ea c9 ff f8 	sub	r9,r5,-8
8000e4ee:	ee c8 00 38 	sub	r8,r7,56
8000e4f2:	2e 88       	sub	r8,-24
8000e4f4:	12 9b       	mov	r11,r9
8000e4f6:	10 9c       	mov	r12,r8
8000e4f8:	fe b0 f8 46 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000e4fc:	ea c9 ff f4 	sub	r9,r5,-12
8000e500:	ee c8 00 38 	sub	r8,r7,56
8000e504:	2e 48       	sub	r8,-28
8000e506:	12 9b       	mov	r11,r9
8000e508:	10 9c       	mov	r12,r8
8000e50a:	fe b0 f8 3d 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000e50e:	ea c9 ff f0 	sub	r9,r5,-16
8000e512:	ee c8 00 38 	sub	r8,r7,56
8000e516:	2e 08       	sub	r8,-32
8000e518:	12 9b       	mov	r11,r9
8000e51a:	10 9c       	mov	r12,r8
8000e51c:	fe b0 f8 34 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000e520:	ea c9 ff ec 	sub	r9,r5,-20
8000e524:	ee c8 00 38 	sub	r8,r7,56
8000e528:	2d c8       	sub	r8,-36
8000e52a:	12 9b       	mov	r11,r9
8000e52c:	10 9c       	mov	r12,r8
8000e52e:	fe b0 f8 2b 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000e532:	ea c9 ff e8 	sub	r9,r5,-24
8000e536:	ee c8 00 38 	sub	r8,r7,56
8000e53a:	2d 88       	sub	r8,-40
8000e53c:	12 9b       	mov	r11,r9
8000e53e:	10 9c       	mov	r12,r8
8000e540:	fe b0 f8 22 	rcall	8000d584 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000e544:	ee c9 00 50 	sub	r9,r7,80
8000e548:	ee c8 00 38 	sub	r8,r7,56
8000e54c:	2d 48       	sub	r8,-44
8000e54e:	12 9b       	mov	r11,r9
8000e550:	10 9c       	mov	r12,r8
8000e552:	fe b0 f7 ff 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000e556:	ee c9 00 54 	sub	r9,r7,84
8000e55a:	ee c8 00 38 	sub	r8,r7,56
8000e55e:	2d 28       	sub	r8,-46
8000e560:	12 9b       	mov	r11,r9
8000e562:	10 9c       	mov	r12,r8
8000e564:	fe b0 f7 f6 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000e568:	ee c9 00 58 	sub	r9,r7,88
8000e56c:	ee c8 00 38 	sub	r8,r7,56
8000e570:	2d 08       	sub	r8,-48
8000e572:	12 9b       	mov	r11,r9
8000e574:	10 9c       	mov	r12,r8
8000e576:	fe b0 f7 ed 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000e57a:	ee c9 00 5c 	sub	r9,r7,92
8000e57e:	ee c8 00 38 	sub	r8,r7,56
8000e582:	2c e8       	sub	r8,-50
8000e584:	12 9b       	mov	r11,r9
8000e586:	10 9c       	mov	r12,r8
8000e588:	fe b0 f7 e4 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000e58c:	ee c9 00 60 	sub	r9,r7,96
8000e590:	ee c8 00 38 	sub	r8,r7,56
8000e594:	2c c8       	sub	r8,-52
8000e596:	12 9b       	mov	r11,r9
8000e598:	10 9c       	mov	r12,r8
8000e59a:	fe b0 f7 db 	rcall	8000d550 <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000e59e:	ee c9 00 64 	sub	r9,r7,100
8000e5a2:	ee c8 00 38 	sub	r8,r7,56
8000e5a6:	2c a8       	sub	r8,-54
8000e5a8:	12 9b       	mov	r11,r9
8000e5aa:	10 9c       	mov	r12,r8
8000e5ac:	fe b0 f7 d2 	rcall	8000d550 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000e5b0:	ee ca 00 38 	sub	r10,r7,56
8000e5b4:	e0 68 00 b7 	mov	r8,183
8000e5b8:	33 89       	mov	r9,56
8000e5ba:	35 ab       	mov	r11,90
8000e5bc:	ee fc ff c4 	ld.w	r12,r7[-60]
8000e5c0:	fe b0 f7 1a 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000e5c4:	2e 7d       	sub	sp,-100
8000e5c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e5ca:	00 00       	add	r0,r0
8000e5cc:	80 00       	ld.sh	r0,r0[0x0]
8000e5ce:	e2 de eb cd 	satsub.w	lr,r1,-5171

8000e5d0 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000e5d0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e5d4:	1a 97       	mov	r7,sp
8000e5d6:	20 9d       	sub	sp,36
8000e5d8:	49 96       	lddpc	r6,8000e63c <mavlink_msg_named_value_float_send+0x6c>
8000e5da:	1e 26       	rsub	r6,pc
8000e5dc:	ef 4c ff e8 	st.w	r7[-24],r12
8000e5e0:	ef 4b ff e4 	st.w	r7[-28],r11
8000e5e4:	ef 4a ff e0 	st.w	r7[-32],r10
8000e5e8:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e5ec:	ee c9 00 1c 	sub	r9,r7,28
8000e5f0:	ee c8 00 14 	sub	r8,r7,20
8000e5f4:	12 9b       	mov	r11,r9
8000e5f6:	10 9c       	mov	r12,r8
8000e5f8:	fe b0 f7 c6 	rcall	8000d584 <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000e5fc:	ee c9 00 24 	sub	r9,r7,36
8000e600:	ee c8 00 14 	sub	r8,r7,20
8000e604:	2f c8       	sub	r8,-4
8000e606:	12 9b       	mov	r11,r9
8000e608:	10 9c       	mov	r12,r8
8000e60a:	fe b0 f7 bd 	rcall	8000d584 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e60e:	ee c8 00 14 	sub	r8,r7,20
8000e612:	30 a9       	mov	r9,10
8000e614:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e618:	30 8b       	mov	r11,8
8000e61a:	10 9c       	mov	r12,r8
8000e61c:	fe b0 f8 56 	rcall	8000d6c8 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000e620:	ee ca 00 14 	sub	r10,r7,20
8000e624:	e0 68 00 aa 	mov	r8,170
8000e628:	31 29       	mov	r9,18
8000e62a:	e0 6b 00 fb 	mov	r11,251
8000e62e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e632:	fe b0 f6 e1 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000e636:	2f 7d       	sub	sp,-36
8000e638:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e63c:	80 00       	ld.sh	r0,r0[0x0]
8000e63e:	e4 5e eb cd 	cp.w	lr,388045

8000e640 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000e640:	eb cd 40 c0 	pushm	r6-r7,lr
8000e644:	1a 97       	mov	r7,sp
8000e646:	20 9d       	sub	sp,36
8000e648:	49 96       	lddpc	r6,8000e6ac <mavlink_msg_named_value_int_send+0x6c>
8000e64a:	1e 26       	rsub	r6,pc
8000e64c:	ef 4c ff e8 	st.w	r7[-24],r12
8000e650:	ef 4b ff e4 	st.w	r7[-28],r11
8000e654:	ef 4a ff e0 	st.w	r7[-32],r10
8000e658:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e65c:	ee c9 00 1c 	sub	r9,r7,28
8000e660:	ee c8 00 14 	sub	r8,r7,20
8000e664:	12 9b       	mov	r11,r9
8000e666:	10 9c       	mov	r12,r8
8000e668:	fe b0 f7 8e 	rcall	8000d584 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000e66c:	ee c9 00 24 	sub	r9,r7,36
8000e670:	ee c8 00 14 	sub	r8,r7,20
8000e674:	2f c8       	sub	r8,-4
8000e676:	12 9b       	mov	r11,r9
8000e678:	10 9c       	mov	r12,r8
8000e67a:	fe b0 f7 85 	rcall	8000d584 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e67e:	ee c8 00 14 	sub	r8,r7,20
8000e682:	30 a9       	mov	r9,10
8000e684:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e688:	30 8b       	mov	r11,8
8000e68a:	10 9c       	mov	r12,r8
8000e68c:	fe b0 f8 1e 	rcall	8000d6c8 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000e690:	ee ca 00 14 	sub	r10,r7,20
8000e694:	32 c8       	mov	r8,44
8000e696:	31 29       	mov	r9,18
8000e698:	e0 6b 00 fc 	mov	r11,252
8000e69c:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e6a0:	fe b0 f6 aa 	rcall	8000d3f4 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000e6a4:	2f 7d       	sub	sp,-36
8000e6a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e6aa:	00 00       	add	r0,r0
8000e6ac:	80 00       	ld.sh	r0,r0[0x0]
8000e6ae:	e4 ce eb cd 	sub	lr,r2,-5171

8000e6b0 <mavlink_send_heartbeat>:
#include "analog_monitor.h"
#include "tasks.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000e6b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e6b4:	1a 97       	mov	r7,sp
8000e6b6:	20 1d       	sub	sp,4
8000e6b8:	48 e6       	lddpc	r6,8000e6f0 <mavlink_send_heartbeat+0x40>
8000e6ba:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000e6bc:	f0 16 00 33 	mcall	r6[204]
8000e6c0:	18 98       	mov	r8,r12
8000e6c2:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000e6c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e6ca:	f1 38 10 bd 	ld.ub	r8,r8[4285]
8000e6ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e6d2:	f3 39 10 bc 	ld.ub	r9,r9[4284]
8000e6d6:	1a d8       	st.w	--sp,r8
8000e6d8:	30 08       	mov	r8,0
8000e6da:	30 0a       	mov	r10,0
8000e6dc:	30 2b       	mov	r11,2
8000e6de:	30 0c       	mov	r12,0
8000e6e0:	fe b0 f8 16 	rcall	8000d70c <mavlink_msg_heartbeat_send>
8000e6e4:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000e6e6:	f0 16 01 f5 	mcall	r6[2004]
	
	//dbg_print("Send hearbeat.\n");
}
8000e6ea:	2f fd       	sub	sp,-4
8000e6ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e6f0:	80 00       	ld.sh	r0,r0[0x0]
8000e6f2:	e5 3e eb cd 	ld.ub	lr,r2[-5171]

8000e6f4 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000e6f4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e6f8:	1a 97       	mov	r7,sp
8000e6fa:	20 6d       	sub	sp,24
8000e6fc:	4b e6       	lddpc	r6,8000e7f4 <mavlink_send_raw_imu+0x100>
8000e6fe:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000e700:	ec f8 00 00 	ld.w	r8,r6[0]
8000e704:	70 08       	ld.w	r8,r8[0x0]
8000e706:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e70a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e70e:	5c 88       	casts.h	r8
8000e710:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000e714:	ec f8 00 00 	ld.w	r8,r6[0]
8000e718:	70 08       	ld.w	r8,r8[0x0]
8000e71a:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e71e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e722:	5c 88       	casts.h	r8
8000e724:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000e728:	ec f8 00 00 	ld.w	r8,r6[0]
8000e72c:	70 08       	ld.w	r8,r8[0x0]
8000e72e:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e732:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e736:	5c 88       	casts.h	r8
8000e738:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000e73c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e740:	70 08       	ld.w	r8,r8[0x0]
8000e742:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e746:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e74a:	5c 88       	casts.h	r8
8000e74c:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000e750:	ec f8 00 00 	ld.w	r8,r6[0]
8000e754:	70 08       	ld.w	r8,r8[0x0]
8000e756:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e75a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e75e:	5c 88       	casts.h	r8
8000e760:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000e764:	ec f8 00 00 	ld.w	r8,r6[0]
8000e768:	70 08       	ld.w	r8,r8[0x0]
8000e76a:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e76e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e772:	5c 88       	casts.h	r8
8000e774:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000e778:	ec f8 00 00 	ld.w	r8,r6[0]
8000e77c:	70 08       	ld.w	r8,r8[0x0]
8000e77e:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e782:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e786:	5c 88       	casts.h	r8
8000e788:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000e78a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e78e:	70 08       	ld.w	r8,r8[0x0]
8000e790:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e794:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e798:	5c 88       	casts.h	r8
8000e79a:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000e79c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7a0:	70 08       	ld.w	r8,r8[0x0]
8000e7a2:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7a6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7aa:	5c 88       	casts.h	r8
8000e7ac:	10 95       	mov	r5,r8
8000e7ae:	f0 16 00 29 	mcall	r6[164]
8000e7b2:	18 98       	mov	r8,r12
8000e7b4:	10 92       	mov	r2,r8
8000e7b6:	30 03       	mov	r3,0
8000e7b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e7bc:	1a d8       	st.w	--sp,r8
8000e7be:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e7c2:	1a d8       	st.w	--sp,r8
8000e7c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e7c8:	1a d8       	st.w	--sp,r8
8000e7ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e7ce:	1a d8       	st.w	--sp,r8
8000e7d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7d4:	1a d8       	st.w	--sp,r8
8000e7d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7da:	1a d8       	st.w	--sp,r8
8000e7dc:	1a d0       	st.w	--sp,r0
8000e7de:	02 98       	mov	r8,r1
8000e7e0:	0a 99       	mov	r9,r5
8000e7e2:	04 9a       	mov	r10,r2
8000e7e4:	06 9b       	mov	r11,r3
8000e7e6:	30 0c       	mov	r12,0
8000e7e8:	fe b0 f8 cc 	rcall	8000d980 <mavlink_msg_raw_imu_send>
8000e7ec:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000e7ee:	2f ad       	sub	sp,-24
8000e7f0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e7f4:	80 00       	ld.sh	r0,r0[0x0]
8000e7f6:	e5 82       	*unknown*

8000e7f8 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000e7f8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e7fc:	1a 97       	mov	r7,sp
8000e7fe:	20 4d       	sub	sp,16
8000e800:	4c 96       	lddpc	r6,8000e924 <mavlink_send_scaled_imu+0x12c>
8000e802:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000e804:	ec f8 00 00 	ld.w	r8,r6[0]
8000e808:	70 08       	ld.w	r8,r8[0x0]
8000e80a:	70 b9       	ld.w	r9,r8[0x2c]
8000e80c:	fc 18 44 7a 	movh	r8,0x447a
8000e810:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e814:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e818:	5c 88       	casts.h	r8
8000e81a:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000e81e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e822:	70 08       	ld.w	r8,r8[0x0]
8000e824:	70 a9       	ld.w	r9,r8[0x28]
8000e826:	fc 18 44 7a 	movh	r8,0x447a
8000e82a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e82e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e832:	5c 88       	casts.h	r8
8000e834:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000e838:	ec f8 00 00 	ld.w	r8,r6[0]
8000e83c:	70 08       	ld.w	r8,r8[0x0]
8000e83e:	70 99       	ld.w	r9,r8[0x24]
8000e840:	fc 18 44 7a 	movh	r8,0x447a
8000e844:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e848:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e84c:	5c 88       	casts.h	r8
8000e84e:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000e852:	ec f8 00 00 	ld.w	r8,r6[0]
8000e856:	70 08       	ld.w	r8,r8[0x0]
8000e858:	f0 f9 00 80 	ld.w	r9,r8[128]
8000e85c:	fc 18 44 7a 	movh	r8,0x447a
8000e860:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e864:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e868:	5c 88       	casts.h	r8
8000e86a:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000e86e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e872:	70 08       	ld.w	r8,r8[0x0]
8000e874:	71 f9       	ld.w	r9,r8[0x7c]
8000e876:	fc 18 44 7a 	movh	r8,0x447a
8000e87a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e87e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e882:	5c 88       	casts.h	r8
8000e884:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000e886:	ec f8 00 00 	ld.w	r8,r6[0]
8000e88a:	70 08       	ld.w	r8,r8[0x0]
8000e88c:	71 e9       	ld.w	r9,r8[0x78]
8000e88e:	fc 18 44 7a 	movh	r8,0x447a
8000e892:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e896:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e89a:	5c 88       	casts.h	r8
8000e89c:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000e89e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8a2:	70 08       	ld.w	r8,r8[0x0]
8000e8a4:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000e8a8:	fc 18 44 7a 	movh	r8,0x447a
8000e8ac:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8b0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8b4:	5c 88       	casts.h	r8
8000e8b6:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000e8b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8bc:	70 08       	ld.w	r8,r8[0x0]
8000e8be:	f0 f9 00 88 	ld.w	r9,r8[136]
8000e8c2:	fc 18 44 7a 	movh	r8,0x447a
8000e8c6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8ca:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8ce:	5c 88       	casts.h	r8
8000e8d0:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000e8d2:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8d6:	70 08       	ld.w	r8,r8[0x0]
8000e8d8:	f0 f9 00 84 	ld.w	r9,r8[132]
8000e8dc:	fc 18 44 7a 	movh	r8,0x447a
8000e8e0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8e4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8e8:	5c 88       	casts.h	r8
8000e8ea:	10 95       	mov	r5,r8
8000e8ec:	f0 16 00 0f 	mcall	r6[60]
8000e8f0:	18 9b       	mov	r11,r12
8000e8f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e8f6:	1a d8       	st.w	--sp,r8
8000e8f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e8fc:	1a d8       	st.w	--sp,r8
8000e8fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e902:	1a d8       	st.w	--sp,r8
8000e904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e908:	1a d8       	st.w	--sp,r8
8000e90a:	1a d0       	st.w	--sp,r0
8000e90c:	1a d1       	st.w	--sp,r1
8000e90e:	04 98       	mov	r8,r2
8000e910:	06 99       	mov	r9,r3
8000e912:	0a 9a       	mov	r10,r5
8000e914:	30 0c       	mov	r12,0
8000e916:	fe b0 f7 ab 	rcall	8000d86c <mavlink_msg_scaled_imu_send>
8000e91a:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000e91c:	2f cd       	sub	sp,-16
8000e91e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e922:	00 00       	add	r0,r0
8000e924:	80 00       	ld.sh	r0,r0[0x0]
8000e926:	e6 86 eb cd 	brmi	800ec0c0 <_data_lma+0xba678>

8000e928 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000e928:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e92c:	1a 97       	mov	r7,sp
8000e92e:	20 1d       	sub	sp,4
8000e930:	49 16       	lddpc	r6,8000e974 <mavlink_send_rpy_rates_error+0x4c>
8000e932:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e934:	ec f8 00 00 	ld.w	r8,r6[0]
8000e938:	70 08       	ld.w	r8,r8[0x0]
8000e93a:	f0 c8 fe 60 	sub	r8,r8,-416
8000e93e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000e942:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e946:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000e94a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e94e:	71 e3       	ld.w	r3,r8[0x78]
8000e950:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e954:	70 d5       	ld.w	r5,r8[0x34]
8000e956:	f0 16 00 0f 	mcall	r6[60]
8000e95a:	18 9b       	mov	r11,r12
8000e95c:	30 08       	mov	r8,0
8000e95e:	1a d8       	st.w	--sp,r8
8000e960:	04 98       	mov	r8,r2
8000e962:	06 99       	mov	r9,r3
8000e964:	0a 9a       	mov	r10,r5
8000e966:	30 0c       	mov	r12,0
8000e968:	fe b0 fd 28 	rcall	8000e3b8 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000e96c:	2f fd       	sub	sp,-4
}
8000e96e:	2f fd       	sub	sp,-4
8000e970:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e974:	80 00       	ld.sh	r0,r0[0x0]
8000e976:	e7 b6       	*unknown*

8000e978 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000e978:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e97c:	1a 97       	mov	r7,sp
8000e97e:	20 1d       	sub	sp,4
8000e980:	49 16       	lddpc	r6,8000e9c4 <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8000e982:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e984:	ec f8 00 00 	ld.w	r8,r6[0]
8000e988:	70 08       	ld.w	r8,r8[0x0]
8000e98a:	f0 c8 fe 60 	sub	r8,r8,-416
8000e98e:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000e992:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e996:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000e99a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e99e:	71 d3       	ld.w	r3,r8[0x74]
8000e9a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9a4:	70 c5       	ld.w	r5,r8[0x30]
8000e9a6:	f0 16 00 0f 	mcall	r6[60]
8000e9aa:	18 9b       	mov	r11,r12
8000e9ac:	30 08       	mov	r8,0
8000e9ae:	1a d8       	st.w	--sp,r8
8000e9b0:	04 98       	mov	r8,r2
8000e9b2:	06 99       	mov	r9,r3
8000e9b4:	0a 9a       	mov	r10,r5
8000e9b6:	30 0c       	mov	r12,0
8000e9b8:	fe b0 fc 60 	rcall	8000e278 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000e9bc:	2f fd       	sub	sp,-4
}
8000e9be:	2f fd       	sub	sp,-4
8000e9c0:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e9c4:	80 00       	ld.sh	r0,r0[0x0]
8000e9c6:	e8 06       	*unknown*

8000e9c8 <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000e9c8:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e9cc:	1a 97       	mov	r7,sp
8000e9ce:	49 26       	lddpc	r6,8000ea14 <mavlink_send_rpy_thrust_setpoint+0x4c>
8000e9d0:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000e9d2:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9d6:	70 08       	ld.w	r8,r8[0x0]
8000e9d8:	f0 f1 01 54 	ld.w	r1,r8[340]
8000e9dc:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9e0:	70 08       	ld.w	r8,r8[0x0]
8000e9e2:	f0 f2 01 50 	ld.w	r2,r8[336]
8000e9e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9ea:	70 08       	ld.w	r8,r8[0x0]
8000e9ec:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000e9f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9f4:	70 08       	ld.w	r8,r8[0x0]
8000e9f6:	f0 f5 01 48 	ld.w	r5,r8[328]
8000e9fa:	f0 16 00 0f 	mcall	r6[60]
8000e9fe:	18 9b       	mov	r11,r12
8000ea00:	1a d1       	st.w	--sp,r1
8000ea02:	04 98       	mov	r8,r2
8000ea04:	06 99       	mov	r9,r3
8000ea06:	0a 9a       	mov	r10,r5
8000ea08:	30 0c       	mov	r12,0
8000ea0a:	fe b0 fb eb 	rcall	8000e1e0 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000ea0e:	2f fd       	sub	sp,-4
}
8000ea10:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000ea14:	80 00       	ld.sh	r0,r0[0x0]
8000ea16:	e8 54 eb cd 	cp.w	r4,650189

8000ea18 <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000ea18:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ea1c:	1a 97       	mov	r7,sp
8000ea1e:	20 4d       	sub	sp,16
8000ea20:	4c b6       	lddpc	r6,8000eb4c <mavlink_send_servo_output+0x134>
8000ea22:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000ea24:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea28:	70 08       	ld.w	r8,r8[0x0]
8000ea2a:	f0 c8 fe 60 	sub	r8,r8,-416
8000ea2e:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000ea32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea36:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000ea3a:	fc 18 44 7a 	movh	r8,0x447a
8000ea3e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea42:	fc 18 44 7a 	movh	r8,0x447a
8000ea46:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea4a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea4e:	5c 88       	casts.h	r8
8000ea50:	5c 78       	castu.h	r8
8000ea52:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000ea56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea5a:	f0 f9 01 18 	ld.w	r9,r8[280]
8000ea5e:	fc 18 44 7a 	movh	r8,0x447a
8000ea62:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea66:	fc 18 44 7a 	movh	r8,0x447a
8000ea6a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea6e:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea72:	5c 88       	casts.h	r8
8000ea74:	5c 78       	castu.h	r8
8000ea76:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000ea7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea7e:	f0 f9 01 14 	ld.w	r9,r8[276]
8000ea82:	fc 18 44 7a 	movh	r8,0x447a
8000ea86:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea8a:	fc 18 44 7a 	movh	r8,0x447a
8000ea8e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea92:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea96:	5c 88       	casts.h	r8
8000ea98:	5c 78       	castu.h	r8
8000ea9a:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000ea9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eaa2:	f0 f9 01 10 	ld.w	r9,r8[272]
8000eaa6:	fc 18 44 7a 	movh	r8,0x447a
8000eaaa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eaae:	fc 18 44 7a 	movh	r8,0x447a
8000eab2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eab6:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eaba:	5c 88       	casts.h	r8
8000eabc:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000eac0:	ec f8 00 00 	ld.w	r8,r6[0]
8000eac4:	70 08       	ld.w	r8,r8[0x0]
8000eac6:	f0 f8 07 1c 	ld.w	r8,r8[1820]
8000eaca:	5c 88       	casts.h	r8
8000eacc:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ead0:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ead2:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000ead6:	ec f8 00 00 	ld.w	r8,r6[0]
8000eada:	70 08       	ld.w	r8,r8[0x0]
8000eadc:	f0 f8 07 0c 	ld.w	r8,r8[1804]
8000eae0:	5c 88       	casts.h	r8
8000eae2:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eae6:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eae8:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000eaec:	ec f8 00 00 	ld.w	r8,r6[0]
8000eaf0:	70 08       	ld.w	r8,r8[0x0]
8000eaf2:	f0 f8 06 fc 	ld.w	r8,r8[1788]
8000eaf6:	5c 88       	casts.h	r8
8000eaf8:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eafc:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eafe:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000eb02:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb06:	70 08       	ld.w	r8,r8[0x0]
8000eb08:	f0 f8 06 ec 	ld.w	r8,r8[1772]
8000eb0c:	5c 88       	casts.h	r8
8000eb0e:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eb12:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb14:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000eb18:	f0 16 00 29 	mcall	r6[164]
8000eb1c:	18 9b       	mov	r11,r12
8000eb1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000eb22:	1a d8       	st.w	--sp,r8
8000eb24:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eb28:	1a d8       	st.w	--sp,r8
8000eb2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eb2e:	1a d8       	st.w	--sp,r8
8000eb30:	1a d0       	st.w	--sp,r0
8000eb32:	1a d1       	st.w	--sp,r1
8000eb34:	1a d2       	st.w	--sp,r2
8000eb36:	06 98       	mov	r8,r3
8000eb38:	0a 99       	mov	r9,r5
8000eb3a:	30 0a       	mov	r10,0
8000eb3c:	30 0c       	mov	r12,0
8000eb3e:	fe b0 fa c3 	rcall	8000e0c4 <mavlink_msg_servo_output_raw_send>
8000eb42:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000eb44:	2f cd       	sub	sp,-16
8000eb46:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000eb4a:	00 00       	add	r0,r0
8000eb4c:	80 00       	ld.sh	r0,r0[0x0]
8000eb4e:	e8 a6       	*unknown*

8000eb50 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000eb50:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000eb54:	1a 97       	mov	r7,sp
8000eb56:	20 2d       	sub	sp,8
8000eb58:	49 c6       	lddpc	r6,8000ebc8 <mavlink_send_attitude_quaternion+0x78>
8000eb5a:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000eb5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb60:	70 08       	ld.w	r8,r8[0x0]
8000eb62:	f0 f8 00 80 	ld.w	r8,r8[128]
8000eb66:	ef 48 ff f8 	st.w	r7[-8],r8
8000eb6a:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb6e:	70 08       	ld.w	r8,r8[0x0]
8000eb70:	71 f8       	ld.w	r8,r8[0x7c]
8000eb72:	ef 48 ff fc 	st.w	r7[-4],r8
8000eb76:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb7a:	70 08       	ld.w	r8,r8[0x0]
8000eb7c:	71 e0       	ld.w	r0,r8[0x78]
8000eb7e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb82:	70 08       	ld.w	r8,r8[0x0]
8000eb84:	70 31       	ld.w	r1,r8[0xc]
8000eb86:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb8a:	70 08       	ld.w	r8,r8[0x0]
8000eb8c:	70 22       	ld.w	r2,r8[0x8]
8000eb8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb92:	70 08       	ld.w	r8,r8[0x0]
8000eb94:	70 13       	ld.w	r3,r8[0x4]
8000eb96:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb9a:	70 08       	ld.w	r8,r8[0x0]
8000eb9c:	70 05       	ld.w	r5,r8[0x0]
8000eb9e:	f0 16 00 0f 	mcall	r6[60]
8000eba2:	18 9b       	mov	r11,r12
8000eba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eba8:	1a d8       	st.w	--sp,r8
8000ebaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ebae:	1a d8       	st.w	--sp,r8
8000ebb0:	1a d0       	st.w	--sp,r0
8000ebb2:	1a d1       	st.w	--sp,r1
8000ebb4:	04 98       	mov	r8,r2
8000ebb6:	06 99       	mov	r9,r3
8000ebb8:	0a 9a       	mov	r10,r5
8000ebba:	30 0c       	mov	r12,0
8000ebbc:	fe b0 f8 16 	rcall	8000dbe8 <mavlink_msg_attitude_quaternion_send>
8000ebc0:	2f cd       	sub	sp,-16
}
8000ebc2:	2f ed       	sub	sp,-8
8000ebc4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ebc8:	80 00       	ld.sh	r0,r0[0x0]
8000ebca:	e9 de       	*unknown*

8000ebcc <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000ebcc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ebd0:	1a 97       	mov	r7,sp
8000ebd2:	20 4d       	sub	sp,16
8000ebd4:	49 f6       	lddpc	r6,8000ec50 <mavlink_send_attitude+0x84>
8000ebd6:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ebd8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebdc:	70 09       	ld.w	r9,r8[0x0]
8000ebde:	ee ca 00 0c 	sub	r10,r7,12
8000ebe2:	20 4d       	sub	sp,16
8000ebe4:	1a 98       	mov	r8,sp
8000ebe6:	20 08       	sub	r8,0
8000ebe8:	20 09       	sub	r9,0
8000ebea:	72 0b       	ld.w	r11,r9[0x0]
8000ebec:	91 0b       	st.w	r8[0x0],r11
8000ebee:	72 1b       	ld.w	r11,r9[0x4]
8000ebf0:	91 1b       	st.w	r8[0x4],r11
8000ebf2:	72 2b       	ld.w	r11,r9[0x8]
8000ebf4:	91 2b       	st.w	r8[0x8],r11
8000ebf6:	72 39       	ld.w	r9,r9[0xc]
8000ebf8:	91 39       	st.w	r8[0xc],r9
8000ebfa:	14 9c       	mov	r12,r10
8000ebfc:	f0 16 00 6f 	mcall	r6[444]
8000ec00:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000ec02:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec06:	70 08       	ld.w	r8,r8[0x0]
8000ec08:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ec0c:	ef 48 ff f0 	st.w	r7[-16],r8
8000ec10:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec14:	70 08       	ld.w	r8,r8[0x0]
8000ec16:	71 f0       	ld.w	r0,r8[0x7c]
8000ec18:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec1c:	70 08       	ld.w	r8,r8[0x0]
8000ec1e:	71 e1       	ld.w	r1,r8[0x78]
8000ec20:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000ec24:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000ec28:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000ec2c:	f0 16 00 0f 	mcall	r6[60]
8000ec30:	18 9b       	mov	r11,r12
8000ec32:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ec36:	1a d8       	st.w	--sp,r8
8000ec38:	1a d0       	st.w	--sp,r0
8000ec3a:	1a d1       	st.w	--sp,r1
8000ec3c:	04 98       	mov	r8,r2
8000ec3e:	06 99       	mov	r9,r3
8000ec40:	0a 9a       	mov	r10,r5
8000ec42:	30 0c       	mov	r12,0
8000ec44:	fe b0 f7 74 	rcall	8000db2c <mavlink_msg_attitude_send>
8000ec48:	2f dd       	sub	sp,-12
}
8000ec4a:	2f cd       	sub	sp,-16
8000ec4c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ec50:	80 00       	ld.sh	r0,r0[0x0]
8000ec52:	ea 5a eb cd 	cp.w	r10,781261

8000ec54 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000ec54:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ec58:	1a 97       	mov	r7,sp
8000ec5a:	20 9d       	sub	sp,36
8000ec5c:	4e 66       	lddpc	r6,8000edf4 <mavlink_send_global_position+0x1a0>
8000ec5e:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000ec60:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec64:	70 08       	ld.w	r8,r8[0x0]
8000ec66:	ee cc 00 1c 	sub	r12,r7,28
8000ec6a:	20 cd       	sub	sp,48
8000ec6c:	1a 99       	mov	r9,sp
8000ec6e:	12 9b       	mov	r11,r9
8000ec70:	f0 ca f2 64 	sub	r10,r8,-3484
8000ec74:	f6 c8 00 00 	sub	r8,r11,0
8000ec78:	f4 c9 00 00 	sub	r9,r10,0
8000ec7c:	72 0e       	ld.w	lr,r9[0x0]
8000ec7e:	91 0e       	st.w	r8[0x0],lr
8000ec80:	72 1e       	ld.w	lr,r9[0x4]
8000ec82:	91 1e       	st.w	r8[0x4],lr
8000ec84:	72 2e       	ld.w	lr,r9[0x8]
8000ec86:	91 2e       	st.w	r8[0x8],lr
8000ec88:	72 39       	ld.w	r9,r9[0xc]
8000ec8a:	91 39       	st.w	r8[0xc],r9
8000ec8c:	f6 c8 ff f0 	sub	r8,r11,-16
8000ec90:	f4 c9 ff f0 	sub	r9,r10,-16
8000ec94:	72 0e       	ld.w	lr,r9[0x0]
8000ec96:	91 0e       	st.w	r8[0x0],lr
8000ec98:	72 1e       	ld.w	lr,r9[0x4]
8000ec9a:	91 1e       	st.w	r8[0x4],lr
8000ec9c:	72 2e       	ld.w	lr,r9[0x8]
8000ec9e:	91 2e       	st.w	r8[0x8],lr
8000eca0:	72 39       	ld.w	r9,r9[0xc]
8000eca2:	91 39       	st.w	r8[0xc],r9
8000eca4:	f6 c8 ff e0 	sub	r8,r11,-32
8000eca8:	f4 c9 ff e0 	sub	r9,r10,-32
8000ecac:	72 0a       	ld.w	r10,r9[0x0]
8000ecae:	91 0a       	st.w	r8[0x0],r10
8000ecb0:	72 1a       	ld.w	r10,r9[0x4]
8000ecb2:	91 1a       	st.w	r8[0x4],r10
8000ecb4:	72 2a       	ld.w	r10,r9[0x8]
8000ecb6:	91 2a       	st.w	r8[0x8],r10
8000ecb8:	72 39       	ld.w	r9,r9[0xc]
8000ecba:	91 39       	st.w	r8[0xc],r9
8000ecbc:	f0 16 00 8a 	mcall	r6[552]
8000ecc0:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000ecc2:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecc6:	70 08       	ld.w	r8,r8[0x0]
8000ecc8:	f0 f8 00 80 	ld.w	r8,r8[128]
8000eccc:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ecd0:	5c 88       	casts.h	r8
8000ecd2:	5c 78       	castu.h	r8
8000ecd4:	ef 48 ff dc 	st.w	r7[-36],r8
8000ecd8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecdc:	70 08       	ld.w	r8,r8[0x0]
8000ecde:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000ece2:	10 9c       	mov	r12,r8
8000ece4:	f0 16 00 02 	mcall	r6[8]
8000ece8:	30 08       	mov	r8,0
8000ecea:	fc 19 40 59 	movh	r9,0x4059
8000ecee:	f0 16 00 03 	mcall	r6[12]
8000ecf2:	14 98       	mov	r8,r10
8000ecf4:	16 99       	mov	r9,r11
8000ecf6:	10 9a       	mov	r10,r8
8000ecf8:	12 9b       	mov	r11,r9
8000ecfa:	f0 16 00 14 	mcall	r6[80]
8000ecfe:	18 98       	mov	r8,r12
8000ed00:	5c 88       	casts.h	r8
8000ed02:	ef 48 ff e0 	st.w	r7[-32],r8
8000ed06:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed0a:	70 08       	ld.w	r8,r8[0x0]
8000ed0c:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000ed10:	10 9c       	mov	r12,r8
8000ed12:	f0 16 00 02 	mcall	r6[8]
8000ed16:	30 08       	mov	r8,0
8000ed18:	fc 19 40 59 	movh	r9,0x4059
8000ed1c:	f0 16 00 03 	mcall	r6[12]
8000ed20:	14 98       	mov	r8,r10
8000ed22:	16 99       	mov	r9,r11
8000ed24:	10 9a       	mov	r10,r8
8000ed26:	12 9b       	mov	r11,r9
8000ed28:	f0 16 00 14 	mcall	r6[80]
8000ed2c:	18 98       	mov	r8,r12
8000ed2e:	5c 88       	casts.h	r8
8000ed30:	10 90       	mov	r0,r8
8000ed32:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed36:	70 08       	ld.w	r8,r8[0x0]
8000ed38:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000ed3c:	10 9c       	mov	r12,r8
8000ed3e:	f0 16 00 02 	mcall	r6[8]
8000ed42:	30 08       	mov	r8,0
8000ed44:	fc 19 40 59 	movh	r9,0x4059
8000ed48:	f0 16 00 03 	mcall	r6[12]
8000ed4c:	14 98       	mov	r8,r10
8000ed4e:	16 99       	mov	r9,r11
8000ed50:	10 9a       	mov	r10,r8
8000ed52:	12 9b       	mov	r11,r9
8000ed54:	f0 16 00 14 	mcall	r6[80]
8000ed58:	18 98       	mov	r8,r12
8000ed5a:	5c 88       	casts.h	r8
8000ed5c:	10 91       	mov	r1,r8
8000ed5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ed62:	10 9c       	mov	r12,r8
8000ed64:	f0 16 00 02 	mcall	r6[8]
8000ed68:	30 08       	mov	r8,0
8000ed6a:	e0 69 40 00 	mov	r9,16384
8000ed6e:	ea 19 40 8f 	orh	r9,0x408f
8000ed72:	f0 16 00 03 	mcall	r6[12]
8000ed76:	14 98       	mov	r8,r10
8000ed78:	16 99       	mov	r9,r11
8000ed7a:	10 9a       	mov	r10,r8
8000ed7c:	12 9b       	mov	r11,r9
8000ed7e:	f0 16 00 14 	mcall	r6[80]
8000ed82:	18 92       	mov	r2,r12
8000ed84:	ee ea ff e4 	ld.d	r10,r7[-28]
8000ed88:	30 08       	mov	r8,0
8000ed8a:	e0 69 12 d0 	mov	r9,4816
8000ed8e:	ea 19 41 63 	orh	r9,0x4163
8000ed92:	f0 16 00 03 	mcall	r6[12]
8000ed96:	14 98       	mov	r8,r10
8000ed98:	16 99       	mov	r9,r11
8000ed9a:	10 9a       	mov	r10,r8
8000ed9c:	12 9b       	mov	r11,r9
8000ed9e:	f0 16 00 14 	mcall	r6[80]
8000eda2:	18 93       	mov	r3,r12
8000eda4:	ee ea ff ec 	ld.d	r10,r7[-20]
8000eda8:	30 08       	mov	r8,0
8000edaa:	e0 69 12 d0 	mov	r9,4816
8000edae:	ea 19 41 63 	orh	r9,0x4163
8000edb2:	f0 16 00 03 	mcall	r6[12]
8000edb6:	14 98       	mov	r8,r10
8000edb8:	16 99       	mov	r9,r11
8000edba:	10 9a       	mov	r10,r8
8000edbc:	12 9b       	mov	r11,r9
8000edbe:	f0 16 00 14 	mcall	r6[80]
8000edc2:	18 95       	mov	r5,r12
8000edc4:	f0 16 00 0f 	mcall	r6[60]
8000edc8:	18 9b       	mov	r11,r12
8000edca:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000edce:	1a d8       	st.w	--sp,r8
8000edd0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000edd4:	1a d8       	st.w	--sp,r8
8000edd6:	1a d0       	st.w	--sp,r0
8000edd8:	1a d1       	st.w	--sp,r1
8000edda:	30 18       	mov	r8,1
8000eddc:	1a d8       	st.w	--sp,r8
8000edde:	04 98       	mov	r8,r2
8000ede0:	06 99       	mov	r9,r3
8000ede2:	0a 9a       	mov	r10,r5
8000ede4:	30 0c       	mov	r12,0
8000ede6:	fe b0 f7 c7 	rcall	8000dd74 <mavlink_msg_global_position_int_send>
8000edea:	2f bd       	sub	sp,-20
   //} 
}
8000edec:	2f 7d       	sub	sp,-36
8000edee:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000edf2:	00 00       	add	r0,r0
8000edf4:	80 00       	ld.sh	r0,r0[0x0]
8000edf6:	ea e2 eb cd 	ld.d	r2,r5[-5171]

8000edf8 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000edf8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000edfc:	1a 97       	mov	r7,sp
8000edfe:	20 5d       	sub	sp,20
8000ee00:	4d 46       	lddpc	r6,8000ef50 <mavlink_send_hud+0x158>
8000ee02:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000ee04:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee08:	70 08       	ld.w	r8,r8[0x0]
8000ee0a:	f0 f9 0d 74 	ld.w	r9,r8[3444]
8000ee0e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee12:	70 08       	ld.w	r8,r8[0x0]
8000ee14:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000ee18:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ee1c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee20:	70 08       	ld.w	r8,r8[0x0]
8000ee22:	f0 fa 0d 78 	ld.w	r10,r8[3448]
8000ee26:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee2a:	70 08       	ld.w	r8,r8[0x0]
8000ee2c:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000ee30:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ee34:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ee38:	10 9c       	mov	r12,r8
8000ee3a:	f0 16 00 02 	mcall	r6[8]
8000ee3e:	14 98       	mov	r8,r10
8000ee40:	16 99       	mov	r9,r11
8000ee42:	10 9a       	mov	r10,r8
8000ee44:	12 9b       	mov	r11,r9
8000ee46:	f0 16 00 6d 	mcall	r6[436]
8000ee4a:	14 98       	mov	r8,r10
8000ee4c:	16 99       	mov	r9,r11
8000ee4e:	10 9a       	mov	r10,r8
8000ee50:	12 9b       	mov	r11,r9
8000ee52:	f0 16 00 08 	mcall	r6[32]
8000ee56:	18 98       	mov	r8,r12
8000ee58:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000ee5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ee60:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ee64:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee68:	70 09       	ld.w	r9,r8[0x0]
8000ee6a:	ee ca 00 14 	sub	r10,r7,20
8000ee6e:	20 4d       	sub	sp,16
8000ee70:	1a 98       	mov	r8,sp
8000ee72:	20 08       	sub	r8,0
8000ee74:	20 09       	sub	r9,0
8000ee76:	72 0b       	ld.w	r11,r9[0x0]
8000ee78:	91 0b       	st.w	r8[0x0],r11
8000ee7a:	72 1b       	ld.w	r11,r9[0x4]
8000ee7c:	91 1b       	st.w	r8[0x4],r11
8000ee7e:	72 2b       	ld.w	r11,r9[0x8]
8000ee80:	91 2b       	st.w	r8[0x8],r11
8000ee82:	72 39       	ld.w	r9,r9[0xc]
8000ee84:	91 39       	st.w	r8[0xc],r9
8000ee86:	14 9c       	mov	r12,r10
8000ee88:	f0 16 00 6f 	mcall	r6[444]
8000ee8c:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000ee8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee92:	70 08       	ld.w	r8,r8[0x0]
8000ee94:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000ee98:	10 92       	mov	r2,r8
8000ee9a:	ee 12 80 00 	eorh	r2,0x8000
8000ee9e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eea2:	70 08       	ld.w	r8,r8[0x0]
8000eea4:	f0 f8 0d a4 	ld.w	r8,r8[3492]
8000eea8:	10 93       	mov	r3,r8
8000eeaa:	ee 13 80 00 	eorh	r3,0x8000
8000eeae:	ec f8 00 00 	ld.w	r8,r6[0]
8000eeb2:	70 08       	ld.w	r8,r8[0x0]
8000eeb4:	f0 f8 01 54 	ld.w	r8,r8[340]
8000eeb8:	10 9c       	mov	r12,r8
8000eeba:	f0 16 00 02 	mcall	r6[8]
8000eebe:	30 08       	mov	r8,0
8000eec0:	fc 19 3f f0 	movh	r9,0x3ff0
8000eec4:	f0 16 00 05 	mcall	r6[20]
8000eec8:	14 98       	mov	r8,r10
8000eeca:	16 99       	mov	r9,r11
8000eecc:	10 9a       	mov	r10,r8
8000eece:	12 9b       	mov	r11,r9
8000eed0:	30 08       	mov	r8,0
8000eed2:	fc 19 40 49 	movh	r9,0x4049
8000eed6:	f0 16 00 03 	mcall	r6[12]
8000eeda:	14 98       	mov	r8,r10
8000eedc:	16 99       	mov	r9,r11
8000eede:	10 9a       	mov	r10,r8
8000eee0:	12 9b       	mov	r11,r9
8000eee2:	f0 16 00 14 	mcall	r6[80]
8000eee6:	18 98       	mov	r8,r12
8000eee8:	5c 88       	casts.h	r8
8000eeea:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000eeee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eef2:	10 9c       	mov	r12,r8
8000eef4:	f0 16 00 02 	mcall	r6[8]
8000eef8:	30 08       	mov	r8,0
8000eefa:	e0 69 80 00 	mov	r9,32768
8000eefe:	ea 19 40 66 	orh	r9,0x4066
8000ef02:	f0 16 00 03 	mcall	r6[12]
8000ef06:	14 98       	mov	r8,r10
8000ef08:	16 99       	mov	r9,r11
8000ef0a:	10 9a       	mov	r10,r8
8000ef0c:	12 9b       	mov	r11,r9
8000ef0e:	e0 68 2d 18 	mov	r8,11544
8000ef12:	ea 18 54 44 	orh	r8,0x5444
8000ef16:	e0 69 21 fb 	mov	r9,8699
8000ef1a:	ea 19 40 09 	orh	r9,0x4009
8000ef1e:	f0 16 00 0c 	mcall	r6[48]
8000ef22:	14 98       	mov	r8,r10
8000ef24:	16 99       	mov	r9,r11
8000ef26:	10 9a       	mov	r10,r8
8000ef28:	12 9b       	mov	r11,r9
8000ef2a:	f0 16 00 14 	mcall	r6[80]
8000ef2e:	18 98       	mov	r8,r12
8000ef30:	5c 88       	casts.h	r8
8000ef32:	10 99       	mov	r9,r8
8000ef34:	1a d2       	st.w	--sp,r2
8000ef36:	1a d3       	st.w	--sp,r3
8000ef38:	0a 98       	mov	r8,r5
8000ef3a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ef3e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ef42:	30 0c       	mov	r12,0
8000ef44:	fe b0 f9 e6 	rcall	8000e310 <mavlink_msg_vfr_hud_send>
8000ef48:	2f ed       	sub	sp,-8

	
}
8000ef4a:	2f bd       	sub	sp,-20
8000ef4c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ef50:	80 00       	ld.sh	r0,r0[0x0]
8000ef52:	ec 86 eb cd 	brmi	801ac6ec <_data_lma+0x17aca4>

8000ef54 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000ef54:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ef58:	1a 97       	mov	r7,sp
8000ef5a:	20 4d       	sub	sp,16
8000ef5c:	4f d6       	lddpc	r6,8000f150 <mavlink_send_gps_raw+0x1fc>
8000ef5e:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000ef60:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef64:	70 08       	ld.w	r8,r8[0x0]
8000ef66:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8000ef6a:	30 28       	mov	r8,2
8000ef6c:	f0 09 18 00 	cp.b	r9,r8
8000ef70:	e0 81 00 c0 	brne	8000f0f0 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000ef74:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef78:	70 08       	ld.w	r8,r8[0x0]
8000ef7a:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000ef7e:	ef 48 ff f0 	st.w	r7[-16],r8
8000ef82:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef86:	70 08       	ld.w	r8,r8[0x0]
8000ef88:	f0 f8 0b 34 	ld.w	r8,r8[2868]
8000ef8c:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ef90:	5c 88       	casts.h	r8
8000ef92:	5c 78       	castu.h	r8
8000ef94:	ef 48 ff f4 	st.w	r7[-12],r8
8000ef98:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef9c:	70 08       	ld.w	r8,r8[0x0]
8000ef9e:	f0 f8 0b 24 	ld.w	r8,r8[2852]
8000efa2:	10 9c       	mov	r12,r8
8000efa4:	f0 16 00 02 	mcall	r6[8]
8000efa8:	30 08       	mov	r8,0
8000efaa:	fc 19 40 59 	movh	r9,0x4059
8000efae:	f0 16 00 03 	mcall	r6[12]
8000efb2:	14 98       	mov	r8,r10
8000efb4:	16 99       	mov	r9,r11
8000efb6:	10 9a       	mov	r10,r8
8000efb8:	12 9b       	mov	r11,r9
8000efba:	f0 16 00 7d 	mcall	r6[500]
8000efbe:	18 98       	mov	r8,r12
8000efc0:	5c 88       	casts.h	r8
8000efc2:	5c 78       	castu.h	r8
8000efc4:	ef 48 ff f8 	st.w	r7[-8],r8
8000efc8:	ec f8 00 00 	ld.w	r8,r6[0]
8000efcc:	70 08       	ld.w	r8,r8[0x0]
8000efce:	f0 f8 0b 40 	ld.w	r8,r8[2880]
8000efd2:	10 9c       	mov	r12,r8
8000efd4:	f0 16 00 02 	mcall	r6[8]
8000efd8:	30 08       	mov	r8,0
8000efda:	fc 19 40 59 	movh	r9,0x4059
8000efde:	f0 16 00 03 	mcall	r6[12]
8000efe2:	14 98       	mov	r8,r10
8000efe4:	16 99       	mov	r9,r11
8000efe6:	10 9a       	mov	r10,r8
8000efe8:	12 9b       	mov	r11,r9
8000efea:	f0 16 00 7d 	mcall	r6[500]
8000efee:	18 98       	mov	r8,r12
8000eff0:	5c 88       	casts.h	r8
8000eff2:	5c 78       	castu.h	r8
8000eff4:	ef 48 ff fc 	st.w	r7[-4],r8
8000eff8:	ec f8 00 00 	ld.w	r8,r6[0]
8000effc:	70 08       	ld.w	r8,r8[0x0]
8000effe:	f1 08 0b 4a 	ld.sh	r8,r8[2890]
8000f002:	5c 78       	castu.h	r8
8000f004:	10 9c       	mov	r12,r8
8000f006:	f0 16 00 1a 	mcall	r6[104]
8000f00a:	30 08       	mov	r8,0
8000f00c:	fc 19 40 59 	movh	r9,0x4059
8000f010:	f0 16 00 03 	mcall	r6[12]
8000f014:	14 98       	mov	r8,r10
8000f016:	16 99       	mov	r9,r11
8000f018:	10 9a       	mov	r10,r8
8000f01a:	12 9b       	mov	r11,r9
8000f01c:	f0 16 00 7d 	mcall	r6[500]
8000f020:	18 98       	mov	r8,r12
8000f022:	5c 88       	casts.h	r8
8000f024:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f028:	ec f8 00 00 	ld.w	r8,r6[0]
8000f02c:	70 08       	ld.w	r8,r8[0x0]
8000f02e:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000f032:	10 9c       	mov	r12,r8
8000f034:	f0 16 00 02 	mcall	r6[8]
8000f038:	30 08       	mov	r8,0
8000f03a:	e0 69 40 00 	mov	r9,16384
8000f03e:	ea 19 40 8f 	orh	r9,0x408f
8000f042:	f0 16 00 03 	mcall	r6[12]
8000f046:	14 98       	mov	r8,r10
8000f048:	16 99       	mov	r9,r11
8000f04a:	10 9a       	mov	r10,r8
8000f04c:	12 9b       	mov	r11,r9
8000f04e:	f0 16 00 14 	mcall	r6[80]
8000f052:	18 93       	mov	r3,r12
8000f054:	ec f8 00 00 	ld.w	r8,r6[0]
8000f058:	70 08       	ld.w	r8,r8[0x0]
8000f05a:	f0 ea 0b 10 	ld.d	r10,r8[2832]
8000f05e:	30 08       	mov	r8,0
8000f060:	e0 69 12 d0 	mov	r9,4816
8000f064:	ea 19 41 63 	orh	r9,0x4163
8000f068:	f0 16 00 03 	mcall	r6[12]
8000f06c:	14 98       	mov	r8,r10
8000f06e:	16 99       	mov	r9,r11
8000f070:	10 9a       	mov	r10,r8
8000f072:	12 9b       	mov	r11,r9
8000f074:	f0 16 00 14 	mcall	r6[80]
8000f078:	18 95       	mov	r5,r12
8000f07a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f07e:	70 08       	ld.w	r8,r8[0x0]
8000f080:	f0 ea 0b 08 	ld.d	r10,r8[2824]
8000f084:	30 08       	mov	r8,0
8000f086:	e0 69 12 d0 	mov	r9,4816
8000f08a:	ea 19 41 63 	orh	r9,0x4163
8000f08e:	f0 16 00 03 	mcall	r6[12]
8000f092:	14 98       	mov	r8,r10
8000f094:	16 99       	mov	r9,r11
8000f096:	10 9a       	mov	r10,r8
8000f098:	12 9b       	mov	r11,r9
8000f09a:	f0 16 00 14 	mcall	r6[80]
8000f09e:	18 9a       	mov	r10,r12
8000f0a0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0a4:	70 08       	ld.w	r8,r8[0x0]
8000f0a6:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f0aa:	10 99       	mov	r9,r8
8000f0ac:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0b0:	70 08       	ld.w	r8,r8[0x0]
8000f0b2:	f0 fb 0b 4c 	ld.w	r11,r8[2892]
8000f0b6:	e0 68 03 e8 	mov	r8,1000
8000f0ba:	f6 08 02 48 	mul	r8,r11,r8
8000f0be:	10 90       	mov	r0,r8
8000f0c0:	30 01       	mov	r1,0
8000f0c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f0c6:	1a d8       	st.w	--sp,r8
8000f0c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0cc:	1a d8       	st.w	--sp,r8
8000f0ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f0d2:	1a d8       	st.w	--sp,r8
8000f0d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f0d8:	1a d8       	st.w	--sp,r8
8000f0da:	1a d2       	st.w	--sp,r2
8000f0dc:	1a d3       	st.w	--sp,r3
8000f0de:	1a d5       	st.w	--sp,r5
8000f0e0:	14 98       	mov	r8,r10
8000f0e2:	00 9a       	mov	r10,r0
8000f0e4:	02 9b       	mov	r11,r1
8000f0e6:	30 0c       	mov	r12,0
8000f0e8:	fe b0 f3 4e 	rcall	8000d784 <mavlink_msg_gps_raw_int_send>
8000f0ec:	2f 9d       	sub	sp,-28
8000f0ee:	c2 e8       	rjmp	8000f14a <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000f0f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0f4:	70 08       	ld.w	r8,r8[0x0]
8000f0f6:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000f0fa:	10 91       	mov	r1,r8
8000f0fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f100:	70 08       	ld.w	r8,r8[0x0]
8000f102:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f106:	10 95       	mov	r5,r8
8000f108:	f0 16 00 29 	mcall	r6[164]
8000f10c:	18 98       	mov	r8,r12
8000f10e:	10 92       	mov	r2,r8
8000f110:	30 03       	mov	r3,0
8000f112:	1a d1       	st.w	--sp,r1
8000f114:	30 08       	mov	r8,0
8000f116:	1a d8       	st.w	--sp,r8
8000f118:	30 08       	mov	r8,0
8000f11a:	1a d8       	st.w	--sp,r8
8000f11c:	30 08       	mov	r8,0
8000f11e:	1a d8       	st.w	--sp,r8
8000f120:	30 08       	mov	r8,0
8000f122:	1a d8       	st.w	--sp,r8
8000f124:	e6 68 1a 80 	mov	r8,400000
8000f128:	1a d8       	st.w	--sp,r8
8000f12a:	e0 68 c0 0c 	mov	r8,49164
8000f12e:	ea 18 03 e9 	orh	r8,0x3e9
8000f132:	1a d8       	st.w	--sp,r8
8000f134:	e0 68 48 28 	mov	r8,18472
8000f138:	ea 18 1b ba 	orh	r8,0x1bba
8000f13c:	0a 99       	mov	r9,r5
8000f13e:	04 9a       	mov	r10,r2
8000f140:	06 9b       	mov	r11,r3
8000f142:	30 0c       	mov	r12,0
8000f144:	fe b0 f3 20 	rcall	8000d784 <mavlink_msg_gps_raw_int_send>
8000f148:	2f 9d       	sub	sp,-28
	}
}
8000f14a:	2f cd       	sub	sp,-16
8000f14c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f150:	80 00       	ld.sh	r0,r0[0x0]
8000f152:	ed e2       	*unknown*
8000f154:	70 72       	ld.w	r2,r8[0x1c]
8000f156:	65 73       	ld.w	r3,r2[0x5c]
8000f158:	73 41       	ld.w	r1,r9[0x50]
8000f15a:	6c 74       	ld.w	r4,r6[0x1c]
8000f15c:	00 00       	add	r0,r0
8000f15e:	00 00       	add	r0,r0
8000f160:	6c 61       	ld.w	r1,r6[0x18]
8000f162:	73 74       	ld.w	r4,r9[0x5c]
8000f164:	41 6c       	lddsp	r12,sp[0x58]
8000f166:	74 00       	ld.w	r0,r10[0x0]
8000f168:	62 61       	ld.w	r1,r1[0x18]
8000f16a:	72 6f       	ld.w	pc,r9[0x18]
8000f16c:	5f 64       	srmi	r4
8000f16e:	74 00       	ld.w	r0,r10[0x0]

8000f170 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000f170:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f174:	1a 97       	mov	r7,sp
8000f176:	4b 56       	lddpc	r6,8000f248 <mavlink_send_pressure+0xd8>
8000f178:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000f17a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f17e:	70 08       	ld.w	r8,r8[0x0]
8000f180:	f0 f8 10 d0 	ld.w	r8,r8[4304]
8000f184:	10 9c       	mov	r12,r8
8000f186:	f0 16 00 02 	mcall	r6[8]
8000f18a:	30 08       	mov	r8,0
8000f18c:	fc 19 40 59 	movh	r9,0x4059
8000f190:	f0 16 00 03 	mcall	r6[12]
8000f194:	14 98       	mov	r8,r10
8000f196:	16 99       	mov	r9,r11
8000f198:	10 9a       	mov	r10,r8
8000f19a:	12 9b       	mov	r11,r9
8000f19c:	f0 16 00 14 	mcall	r6[80]
8000f1a0:	18 98       	mov	r8,r12
8000f1a2:	5c 88       	casts.h	r8
8000f1a4:	10 92       	mov	r2,r8
8000f1a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1aa:	70 08       	ld.w	r8,r8[0x0]
8000f1ac:	f0 f3 10 e8 	ld.w	r3,r8[4328]
8000f1b0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1b4:	70 08       	ld.w	r8,r8[0x0]
8000f1b6:	f0 f8 10 cc 	ld.w	r8,r8[4300]
8000f1ba:	fc 1b 42 c8 	movh	r11,0x42c8
8000f1be:	10 9c       	mov	r12,r8
8000f1c0:	f0 16 00 0a 	mcall	r6[40]
8000f1c4:	18 98       	mov	r8,r12
8000f1c6:	10 95       	mov	r5,r8
8000f1c8:	f0 16 00 0f 	mcall	r6[60]
8000f1cc:	18 9b       	mov	r11,r12
8000f1ce:	04 98       	mov	r8,r2
8000f1d0:	06 99       	mov	r9,r3
8000f1d2:	0a 9a       	mov	r10,r5
8000f1d4:	30 0c       	mov	r12,0
8000f1d6:	fe b0 f4 69 	rcall	8000daa8 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000f1da:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000f1de:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1e2:	70 08       	ld.w	r8,r8[0x0]
8000f1e4:	f0 f5 10 e0 	ld.w	r5,r8[4320]
8000f1e8:	f0 16 00 0f 	mcall	r6[60]
8000f1ec:	18 98       	mov	r8,r12
8000f1ee:	0a 99       	mov	r9,r5
8000f1f0:	fe ca 00 9c 	sub	r10,pc,156
8000f1f4:	10 9b       	mov	r11,r8
8000f1f6:	30 0c       	mov	r12,0
8000f1f8:	fe b0 f9 ec 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f1fc:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000f200:	ec f8 00 00 	ld.w	r8,r6[0]
8000f204:	70 08       	ld.w	r8,r8[0x0]
8000f206:	f0 f5 0d 8c 	ld.w	r5,r8[3468]
8000f20a:	f0 16 00 0f 	mcall	r6[60]
8000f20e:	18 98       	mov	r8,r12
8000f210:	0a 99       	mov	r9,r5
8000f212:	fe ca 00 b2 	sub	r10,pc,178
8000f216:	10 9b       	mov	r11,r8
8000f218:	30 0c       	mov	r12,0
8000f21a:	fe b0 f9 db 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f21e:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000f222:	ec f8 00 00 	ld.w	r8,r6[0]
8000f226:	70 08       	ld.w	r8,r8[0x0]
8000f228:	f0 f5 10 f8 	ld.w	r5,r8[4344]
8000f22c:	f0 16 00 0f 	mcall	r6[60]
8000f230:	18 98       	mov	r8,r12
8000f232:	0a 99       	mov	r9,r5
8000f234:	fe ca 00 cc 	sub	r10,pc,204
8000f238:	10 9b       	mov	r11,r8
8000f23a:	30 0c       	mov	r12,0
8000f23c:	fe b0 f9 ca 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f240:	f0 16 00 3c 	mcall	r6[240]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000f244:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f248:	80 00       	ld.sh	r0,r0[0x0]
8000f24a:	ef fc 52 61 	ld.shlt	r12,r7[0xc2]
8000f24e:	64 61       	ld.w	r1,r2[0x18]
8000f250:	72 5f       	ld.w	pc,r9[0x14]
8000f252:	76 65       	ld.w	r5,r11[0x18]
8000f254:	6c 6f       	ld.w	pc,r6[0x18]
8000f256:	63 69       	ld.w	r9,r1[0x58]
8000f258:	74 79       	ld.w	r9,r10[0x1c]
8000f25a:	00 00       	add	r0,r0
8000f25c:	52 61       	stdsp	sp[0x98],r1
8000f25e:	64 61       	ld.w	r1,r2[0x18]
8000f260:	72 5f       	ld.w	pc,r9[0x14]
8000f262:	61 6d       	ld.w	sp,r0[0x58]
8000f264:	70 6c       	ld.w	r12,r8[0x18]
8000f266:	69 74       	ld.w	r4,r4[0x5c]
8000f268:	75 64       	ld.w	r4,r10[0x58]
8000f26a:	65 00       	ld.w	r0,r2[0x40]

8000f26c <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000f26c:	eb cd 40 e0 	pushm	r5-r7,lr
8000f270:	1a 97       	mov	r7,sp
8000f272:	20 1d       	sub	sp,4
8000f274:	49 76       	lddpc	r6,8000f2d0 <mavlink_send_radar+0x64>
8000f276:	1e 26       	rsub	r6,pc
	read_radar();
8000f278:	f0 16 01 a1 	mcall	r6[1668]
	radar_target *target=get_radar_main_target();
8000f27c:	f0 16 01 ab 	mcall	r6[1708]
8000f280:	18 98       	mov	r8,r12
8000f282:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000f286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f28a:	70 05       	ld.w	r5,r8[0x0]
8000f28c:	f0 16 00 0f 	mcall	r6[60]
8000f290:	18 98       	mov	r8,r12
8000f292:	0a 99       	mov	r9,r5
8000f294:	fe ca 00 48 	sub	r10,pc,72
8000f298:	10 9b       	mov	r11,r8
8000f29a:	30 0c       	mov	r12,0
8000f29c:	fe b0 f9 9a 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000f2a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f2a4:	70 18       	ld.w	r8,r8[0x4]
8000f2a6:	fc 1b 44 7a 	movh	r11,0x447a
8000f2aa:	10 9c       	mov	r12,r8
8000f2ac:	f0 16 00 0a 	mcall	r6[40]
8000f2b0:	18 98       	mov	r8,r12
8000f2b2:	10 95       	mov	r5,r8
8000f2b4:	f0 16 00 0f 	mcall	r6[60]
8000f2b8:	18 98       	mov	r8,r12
8000f2ba:	0a 99       	mov	r9,r5
8000f2bc:	fe ca 00 60 	sub	r10,pc,96
8000f2c0:	10 9b       	mov	r11,r8
8000f2c2:	30 0c       	mov	r12,0
8000f2c4:	fe b0 f9 86 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
}
8000f2c8:	2f fd       	sub	sp,-4
8000f2ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f2ce:	00 00       	add	r0,r0
8000f2d0:	80 00       	ld.sh	r0,r0[0x0]
8000f2d2:	f0 fa eb cd 	ld.w	r10,r8[-5171]

8000f2d4 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000f2d4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f2d8:	1a 97       	mov	r7,sp
8000f2da:	20 1d       	sub	sp,4
8000f2dc:	49 a6       	lddpc	r6,8000f344 <mavlink_send_estimator+0x70>
8000f2de:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000f2e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2e4:	70 08       	ld.w	r8,r8[0x0]
8000f2e6:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000f2ea:	ef 48 ff fc 	st.w	r7[-4],r8
8000f2ee:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2f2:	70 08       	ld.w	r8,r8[0x0]
8000f2f4:	f0 f0 0d 78 	ld.w	r0,r8[3448]
8000f2f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2fc:	70 08       	ld.w	r8,r8[0x0]
8000f2fe:	f0 f1 0d 74 	ld.w	r1,r8[3444]
8000f302:	ec f8 00 00 	ld.w	r8,r6[0]
8000f306:	70 08       	ld.w	r8,r8[0x0]
8000f308:	f0 f2 0d a4 	ld.w	r2,r8[3492]
8000f30c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f310:	70 08       	ld.w	r8,r8[0x0]
8000f312:	f0 f3 0d a0 	ld.w	r3,r8[3488]
8000f316:	ec f8 00 00 	ld.w	r8,r6[0]
8000f31a:	70 08       	ld.w	r8,r8[0x0]
8000f31c:	f0 f5 0d 9c 	ld.w	r5,r8[3484]
8000f320:	f0 16 00 0f 	mcall	r6[60]
8000f324:	18 9b       	mov	r11,r12
8000f326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f32a:	1a d8       	st.w	--sp,r8
8000f32c:	1a d0       	st.w	--sp,r0
8000f32e:	1a d1       	st.w	--sp,r1
8000f330:	04 98       	mov	r8,r2
8000f332:	06 99       	mov	r9,r3
8000f334:	0a 9a       	mov	r10,r5
8000f336:	30 0c       	mov	r12,0
8000f338:	fe b0 f4 c0 	rcall	8000dcb8 <mavlink_msg_local_position_ned_send>
8000f33c:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000f33e:	2f fd       	sub	sp,-4
8000f340:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f344:	80 00       	ld.sh	r0,r0[0x0]
8000f346:	f1 62 65 73 	st.b	r8[25971],r2
8000f34a:	74 69       	ld.w	r9,r10[0x18]
8000f34c:	58 00       	cp.w	r0,0
8000f34e:	00 00       	add	r0,r0
8000f350:	65 73       	ld.w	r3,r2[0x5c]
8000f352:	74 69       	ld.w	r9,r10[0x18]
8000f354:	59 00       	cp.w	r0,16
8000f356:	00 00       	add	r0,r0
8000f358:	65 73       	ld.w	r3,r2[0x5c]
8000f35a:	74 69       	ld.w	r9,r10[0x18]
8000f35c:	5a 00       	cp.w	r0,-32
8000f35e:	00 00       	add	r0,r0
8000f360:	65 73       	ld.w	r3,r2[0x5c]
8000f362:	74 69       	ld.w	r9,r10[0x18]
8000f364:	56 78       	stdsp	sp[0x19c],r8
8000f366:	00 00       	add	r0,r0
8000f368:	65 73       	ld.w	r3,r2[0x5c]
8000f36a:	74 69       	ld.w	r9,r10[0x18]
8000f36c:	56 79       	stdsp	sp[0x19c],r9
8000f36e:	00 00       	add	r0,r0
8000f370:	65 73       	ld.w	r3,r2[0x5c]
8000f372:	74 69       	ld.w	r9,r10[0x18]
8000f374:	56 7a       	stdsp	sp[0x19c],r10
8000f376:	00 00       	add	r0,r0
8000f378:	65 73       	ld.w	r3,r2[0x5c]
8000f37a:	74 69       	ld.w	r9,r10[0x18]
8000f37c:	62 69       	ld.w	r9,r1[0x18]
8000f37e:	61 69       	ld.w	r9,r0[0x58]
8000f380:	73 58       	ld.w	r8,r9[0x54]
8000f382:	00 00       	add	r0,r0
8000f384:	65 73       	ld.w	r3,r2[0x5c]
8000f386:	74 69       	ld.w	r9,r10[0x18]
8000f388:	62 69       	ld.w	r9,r1[0x18]
8000f38a:	61 69       	ld.w	r9,r0[0x58]
8000f38c:	73 59       	ld.w	r9,r9[0x54]
8000f38e:	00 00       	add	r0,r0
8000f390:	65 73       	ld.w	r3,r2[0x5c]
8000f392:	74 69       	ld.w	r9,r10[0x18]
8000f394:	62 69       	ld.w	r9,r1[0x18]
8000f396:	61 69       	ld.w	r9,r0[0x58]
8000f398:	73 5a       	ld.w	r10,r9[0x54]
	...

8000f39c <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000f39c:	eb cd 40 e0 	pushm	r5-r7,lr
8000f3a0:	1a 97       	mov	r7,sp
8000f3a2:	4d d6       	lddpc	r6,8000f514 <mavlink_send_kalman_estimator+0x178>
8000f3a4:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000f3a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3aa:	70 08       	ld.w	r8,r8[0x0]
8000f3ac:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000f3b0:	10 9a       	mov	r10,r8
8000f3b2:	12 9b       	mov	r11,r9
8000f3b4:	f0 16 00 08 	mcall	r6[32]
8000f3b8:	18 95       	mov	r5,r12
8000f3ba:	f0 16 00 0f 	mcall	r6[60]
8000f3be:	18 98       	mov	r8,r12
8000f3c0:	0a 99       	mov	r9,r5
8000f3c2:	fe ca 00 7a 	sub	r10,pc,122
8000f3c6:	10 9b       	mov	r11,r8
8000f3c8:	30 0c       	mov	r12,0
8000f3ca:	fe b0 f9 03 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000f3ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3d2:	70 08       	ld.w	r8,r8[0x0]
8000f3d4:	f0 e8 0b 74 	ld.d	r8,r8[2932]
8000f3d8:	10 9a       	mov	r10,r8
8000f3da:	12 9b       	mov	r11,r9
8000f3dc:	f0 16 00 08 	mcall	r6[32]
8000f3e0:	18 95       	mov	r5,r12
8000f3e2:	f0 16 00 0f 	mcall	r6[60]
8000f3e6:	18 98       	mov	r8,r12
8000f3e8:	0a 99       	mov	r9,r5
8000f3ea:	fe ca 00 9a 	sub	r10,pc,154
8000f3ee:	10 9b       	mov	r11,r8
8000f3f0:	30 0c       	mov	r12,0
8000f3f2:	fe b0 f8 ef 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000f3f6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3fa:	70 08       	ld.w	r8,r8[0x0]
8000f3fc:	f0 e8 0b 8c 	ld.d	r8,r8[2956]
8000f400:	10 9a       	mov	r10,r8
8000f402:	12 9b       	mov	r11,r9
8000f404:	f0 16 00 08 	mcall	r6[32]
8000f408:	18 95       	mov	r5,r12
8000f40a:	f0 16 00 0f 	mcall	r6[60]
8000f40e:	18 98       	mov	r8,r12
8000f410:	0a 99       	mov	r9,r5
8000f412:	fe ca 00 ba 	sub	r10,pc,186
8000f416:	10 9b       	mov	r11,r8
8000f418:	30 0c       	mov	r12,0
8000f41a:	fe b0 f8 db 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000f41e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f422:	70 08       	ld.w	r8,r8[0x0]
8000f424:	f0 e8 0b 64 	ld.d	r8,r8[2916]
8000f428:	10 9a       	mov	r10,r8
8000f42a:	12 9b       	mov	r11,r9
8000f42c:	f0 16 00 08 	mcall	r6[32]
8000f430:	18 95       	mov	r5,r12
8000f432:	f0 16 00 0f 	mcall	r6[60]
8000f436:	18 98       	mov	r8,r12
8000f438:	0a 99       	mov	r9,r5
8000f43a:	fe ca 00 da 	sub	r10,pc,218
8000f43e:	10 9b       	mov	r11,r8
8000f440:	30 0c       	mov	r12,0
8000f442:	fe b0 f8 c7 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000f446:	ec f8 00 00 	ld.w	r8,r6[0]
8000f44a:	70 08       	ld.w	r8,r8[0x0]
8000f44c:	f0 e8 0b 7c 	ld.d	r8,r8[2940]
8000f450:	10 9a       	mov	r10,r8
8000f452:	12 9b       	mov	r11,r9
8000f454:	f0 16 00 08 	mcall	r6[32]
8000f458:	18 95       	mov	r5,r12
8000f45a:	f0 16 00 0f 	mcall	r6[60]
8000f45e:	18 98       	mov	r8,r12
8000f460:	0a 99       	mov	r9,r5
8000f462:	fe ca 00 fa 	sub	r10,pc,250
8000f466:	10 9b       	mov	r11,r8
8000f468:	30 0c       	mov	r12,0
8000f46a:	fe b0 f8 b3 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000f46e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f472:	70 08       	ld.w	r8,r8[0x0]
8000f474:	f0 e8 0b 94 	ld.d	r8,r8[2964]
8000f478:	10 9a       	mov	r10,r8
8000f47a:	12 9b       	mov	r11,r9
8000f47c:	f0 16 00 08 	mcall	r6[32]
8000f480:	18 95       	mov	r5,r12
8000f482:	f0 16 00 0f 	mcall	r6[60]
8000f486:	18 98       	mov	r8,r12
8000f488:	0a 99       	mov	r9,r5
8000f48a:	fe ca 01 1a 	sub	r10,pc,282
8000f48e:	10 9b       	mov	r11,r8
8000f490:	30 0c       	mov	r12,0
8000f492:	fe b0 f8 9f 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000f496:	ec f8 00 00 	ld.w	r8,r6[0]
8000f49a:	70 08       	ld.w	r8,r8[0x0]
8000f49c:	f0 e8 0b 6c 	ld.d	r8,r8[2924]
8000f4a0:	10 9a       	mov	r10,r8
8000f4a2:	12 9b       	mov	r11,r9
8000f4a4:	f0 16 00 08 	mcall	r6[32]
8000f4a8:	18 95       	mov	r5,r12
8000f4aa:	f0 16 00 0f 	mcall	r6[60]
8000f4ae:	18 98       	mov	r8,r12
8000f4b0:	0a 99       	mov	r9,r5
8000f4b2:	fe ca 01 3a 	sub	r10,pc,314
8000f4b6:	10 9b       	mov	r11,r8
8000f4b8:	30 0c       	mov	r12,0
8000f4ba:	fe b0 f8 8b 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000f4be:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4c2:	70 08       	ld.w	r8,r8[0x0]
8000f4c4:	f0 e8 0b 84 	ld.d	r8,r8[2948]
8000f4c8:	10 9a       	mov	r10,r8
8000f4ca:	12 9b       	mov	r11,r9
8000f4cc:	f0 16 00 08 	mcall	r6[32]
8000f4d0:	18 95       	mov	r5,r12
8000f4d2:	f0 16 00 0f 	mcall	r6[60]
8000f4d6:	18 98       	mov	r8,r12
8000f4d8:	0a 99       	mov	r9,r5
8000f4da:	fe ca 01 56 	sub	r10,pc,342
8000f4de:	10 9b       	mov	r11,r8
8000f4e0:	30 0c       	mov	r12,0
8000f4e2:	fe b0 f8 77 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000f4e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4ea:	70 08       	ld.w	r8,r8[0x0]
8000f4ec:	f0 e8 0b 9c 	ld.d	r8,r8[2972]
8000f4f0:	10 9a       	mov	r10,r8
8000f4f2:	12 9b       	mov	r11,r9
8000f4f4:	f0 16 00 08 	mcall	r6[32]
8000f4f8:	18 95       	mov	r5,r12
8000f4fa:	f0 16 00 0f 	mcall	r6[60]
8000f4fe:	18 98       	mov	r8,r12
8000f500:	0a 99       	mov	r9,r5
8000f502:	fe ca 01 72 	sub	r10,pc,370
8000f506:	10 9b       	mov	r11,r8
8000f508:	30 0c       	mov	r12,0
8000f50a:	fe b0 f8 63 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000f50e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f512:	00 00       	add	r0,r0
8000f514:	80 00       	ld.sh	r0,r0[0x0]
8000f516:	f2 28 eb cd 	sub	r8,-857139

8000f518 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000f518:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f51c:	1a 97       	mov	r7,sp
8000f51e:	20 4d       	sub	sp,16
8000f520:	4b 86       	lddpc	r6,8000f600 <mavlink_send_raw_rc_channels+0xe8>
8000f522:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000f524:	f0 16 00 a9 	mcall	r6[676]
8000f528:	18 98       	mov	r8,r12
8000f52a:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000f52c:	5c 58       	castu.b	r8
8000f52e:	ef 48 ff f0 	st.w	r7[-16],r8
8000f532:	30 7c       	mov	r12,7
8000f534:	f0 16 00 1c 	mcall	r6[112]
8000f538:	18 98       	mov	r8,r12
8000f53a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f53e:	5c 88       	casts.h	r8
8000f540:	5c 78       	castu.h	r8
8000f542:	ef 48 ff f4 	st.w	r7[-12],r8
8000f546:	30 6c       	mov	r12,6
8000f548:	f0 16 00 1c 	mcall	r6[112]
8000f54c:	18 98       	mov	r8,r12
8000f54e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f552:	5c 88       	casts.h	r8
8000f554:	5c 78       	castu.h	r8
8000f556:	ef 48 ff f8 	st.w	r7[-8],r8
8000f55a:	30 5c       	mov	r12,5
8000f55c:	f0 16 00 1c 	mcall	r6[112]
8000f560:	18 98       	mov	r8,r12
8000f562:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f566:	5c 88       	casts.h	r8
8000f568:	5c 78       	castu.h	r8
8000f56a:	ef 48 ff fc 	st.w	r7[-4],r8
8000f56e:	30 4c       	mov	r12,4
8000f570:	f0 16 00 1c 	mcall	r6[112]
8000f574:	18 98       	mov	r8,r12
8000f576:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f57a:	5c 88       	casts.h	r8
8000f57c:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000f580:	30 3c       	mov	r12,3
8000f582:	f0 16 00 1c 	mcall	r6[112]
8000f586:	18 98       	mov	r8,r12
8000f588:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f58c:	5c 88       	casts.h	r8
8000f58e:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000f592:	30 2c       	mov	r12,2
8000f594:	f0 16 00 1c 	mcall	r6[112]
8000f598:	18 98       	mov	r8,r12
8000f59a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f59e:	5c 88       	casts.h	r8
8000f5a0:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f5a4:	30 1c       	mov	r12,1
8000f5a6:	f0 16 00 1c 	mcall	r6[112]
8000f5aa:	18 98       	mov	r8,r12
8000f5ac:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5b0:	5c 88       	casts.h	r8
8000f5b2:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000f5b6:	30 0c       	mov	r12,0
8000f5b8:	f0 16 00 1c 	mcall	r6[112]
8000f5bc:	18 98       	mov	r8,r12
8000f5be:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5c2:	5c 88       	casts.h	r8
8000f5c4:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f5c8:	f0 16 00 0f 	mcall	r6[60]
8000f5cc:	18 9b       	mov	r11,r12
8000f5ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f5d2:	1a d8       	st.w	--sp,r8
8000f5d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f5d8:	1a d8       	st.w	--sp,r8
8000f5da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f5de:	1a d8       	st.w	--sp,r8
8000f5e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f5e4:	1a d8       	st.w	--sp,r8
8000f5e6:	1a d0       	st.w	--sp,r0
8000f5e8:	1a d1       	st.w	--sp,r1
8000f5ea:	1a d2       	st.w	--sp,r2
8000f5ec:	06 98       	mov	r8,r3
8000f5ee:	0a 99       	mov	r9,r5
8000f5f0:	30 1a       	mov	r10,1
8000f5f2:	30 0c       	mov	r12,0
8000f5f4:	fe b0 f4 d2 	rcall	8000df98 <mavlink_msg_rc_channels_raw_send>
8000f5f8:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000f5fa:	2f cd       	sub	sp,-16
8000f5fc:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f600:	80 00       	ld.sh	r0,r0[0x0]
8000f602:	f3 a6       	*unknown*
8000f604:	43 6f       	lddsp	pc,sp[0xd8]
8000f606:	6c 6c       	ld.w	r12,r6[0x18]
8000f608:	5f 41       	srge	r1
8000f60a:	76 6f       	ld.w	pc,r11[0x18]
8000f60c:	69 64       	ld.w	r4,r4[0x58]
8000f60e:	61 6e       	ld.w	lr,r0[0x58]
8000f610:	63 65       	ld.w	r5,r1[0x58]
	...

8000f614 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000f614:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f618:	1a 97       	mov	r7,sp
8000f61a:	20 4d       	sub	sp,16
8000f61c:	fe f6 02 94 	ld.w	r6,pc[660]
8000f620:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000f622:	f0 16 00 a9 	mcall	r6[676]
8000f626:	18 98       	mov	r8,r12
8000f628:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f62a:	5c 58       	castu.b	r8
8000f62c:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000f630:	30 7c       	mov	r12,7
8000f632:	f0 16 00 1c 	mcall	r6[112]
8000f636:	18 98       	mov	r8,r12
8000f638:	10 9c       	mov	r12,r8
8000f63a:	f0 16 00 1a 	mcall	r6[104]
8000f63e:	30 08       	mov	r8,0
8000f640:	e0 69 40 00 	mov	r9,16384
8000f644:	ea 19 40 8f 	orh	r9,0x408f
8000f648:	f0 16 00 03 	mcall	r6[12]
8000f64c:	14 98       	mov	r8,r10
8000f64e:	16 99       	mov	r9,r11
8000f650:	10 9a       	mov	r10,r8
8000f652:	12 9b       	mov	r11,r9
8000f654:	30 08       	mov	r8,0
8000f656:	e0 69 60 00 	mov	r9,24576
8000f65a:	ea 19 40 7b 	orh	r9,0x407b
8000f65e:	f0 16 00 0c 	mcall	r6[48]
8000f662:	14 98       	mov	r8,r10
8000f664:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f666:	10 9a       	mov	r10,r8
8000f668:	12 9b       	mov	r11,r9
8000f66a:	f0 16 00 14 	mcall	r6[80]
8000f66e:	18 98       	mov	r8,r12
8000f670:	5c 88       	casts.h	r8
8000f672:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000f676:	30 6c       	mov	r12,6
8000f678:	f0 16 00 1c 	mcall	r6[112]
8000f67c:	18 98       	mov	r8,r12
8000f67e:	10 9c       	mov	r12,r8
8000f680:	f0 16 00 1a 	mcall	r6[104]
8000f684:	30 08       	mov	r8,0
8000f686:	e0 69 40 00 	mov	r9,16384
8000f68a:	ea 19 40 8f 	orh	r9,0x408f
8000f68e:	f0 16 00 03 	mcall	r6[12]
8000f692:	14 98       	mov	r8,r10
8000f694:	16 99       	mov	r9,r11
8000f696:	10 9a       	mov	r10,r8
8000f698:	12 9b       	mov	r11,r9
8000f69a:	30 08       	mov	r8,0
8000f69c:	e0 69 60 00 	mov	r9,24576
8000f6a0:	ea 19 40 7b 	orh	r9,0x407b
8000f6a4:	f0 16 00 0c 	mcall	r6[48]
8000f6a8:	14 98       	mov	r8,r10
8000f6aa:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f6ac:	10 9a       	mov	r10,r8
8000f6ae:	12 9b       	mov	r11,r9
8000f6b0:	f0 16 00 14 	mcall	r6[80]
8000f6b4:	18 98       	mov	r8,r12
8000f6b6:	5c 88       	casts.h	r8
8000f6b8:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000f6bc:	30 5c       	mov	r12,5
8000f6be:	f0 16 00 1c 	mcall	r6[112]
8000f6c2:	18 98       	mov	r8,r12
8000f6c4:	10 9c       	mov	r12,r8
8000f6c6:	f0 16 00 1a 	mcall	r6[104]
8000f6ca:	30 08       	mov	r8,0
8000f6cc:	e0 69 40 00 	mov	r9,16384
8000f6d0:	ea 19 40 8f 	orh	r9,0x408f
8000f6d4:	f0 16 00 03 	mcall	r6[12]
8000f6d8:	14 98       	mov	r8,r10
8000f6da:	16 99       	mov	r9,r11
8000f6dc:	10 9a       	mov	r10,r8
8000f6de:	12 9b       	mov	r11,r9
8000f6e0:	30 08       	mov	r8,0
8000f6e2:	e0 69 60 00 	mov	r9,24576
8000f6e6:	ea 19 40 7b 	orh	r9,0x407b
8000f6ea:	f0 16 00 0c 	mcall	r6[48]
8000f6ee:	14 98       	mov	r8,r10
8000f6f0:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f6f2:	10 9a       	mov	r10,r8
8000f6f4:	12 9b       	mov	r11,r9
8000f6f6:	f0 16 00 14 	mcall	r6[80]
8000f6fa:	18 98       	mov	r8,r12
8000f6fc:	5c 88       	casts.h	r8
8000f6fe:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000f702:	30 4c       	mov	r12,4
8000f704:	f0 16 00 1c 	mcall	r6[112]
8000f708:	18 98       	mov	r8,r12
8000f70a:	10 9c       	mov	r12,r8
8000f70c:	f0 16 00 1a 	mcall	r6[104]
8000f710:	30 08       	mov	r8,0
8000f712:	e0 69 40 00 	mov	r9,16384
8000f716:	ea 19 40 8f 	orh	r9,0x408f
8000f71a:	f0 16 00 03 	mcall	r6[12]
8000f71e:	14 98       	mov	r8,r10
8000f720:	16 99       	mov	r9,r11
8000f722:	10 9a       	mov	r10,r8
8000f724:	12 9b       	mov	r11,r9
8000f726:	30 08       	mov	r8,0
8000f728:	e0 69 60 00 	mov	r9,24576
8000f72c:	ea 19 40 7b 	orh	r9,0x407b
8000f730:	f0 16 00 0c 	mcall	r6[48]
8000f734:	14 98       	mov	r8,r10
8000f736:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f738:	10 9a       	mov	r10,r8
8000f73a:	12 9b       	mov	r11,r9
8000f73c:	f0 16 00 14 	mcall	r6[80]
8000f740:	18 98       	mov	r8,r12
8000f742:	5c 88       	casts.h	r8
8000f744:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000f746:	30 3c       	mov	r12,3
8000f748:	f0 16 00 1c 	mcall	r6[112]
8000f74c:	18 98       	mov	r8,r12
8000f74e:	10 9c       	mov	r12,r8
8000f750:	f0 16 00 1a 	mcall	r6[104]
8000f754:	30 08       	mov	r8,0
8000f756:	e0 69 40 00 	mov	r9,16384
8000f75a:	ea 19 40 8f 	orh	r9,0x408f
8000f75e:	f0 16 00 03 	mcall	r6[12]
8000f762:	14 98       	mov	r8,r10
8000f764:	16 99       	mov	r9,r11
8000f766:	10 9a       	mov	r10,r8
8000f768:	12 9b       	mov	r11,r9
8000f76a:	30 08       	mov	r8,0
8000f76c:	e0 69 60 00 	mov	r9,24576
8000f770:	ea 19 40 7b 	orh	r9,0x407b
8000f774:	f0 16 00 0c 	mcall	r6[48]
8000f778:	14 98       	mov	r8,r10
8000f77a:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f77c:	10 9a       	mov	r10,r8
8000f77e:	12 9b       	mov	r11,r9
8000f780:	f0 16 00 14 	mcall	r6[80]
8000f784:	18 98       	mov	r8,r12
8000f786:	5c 88       	casts.h	r8
8000f788:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000f78a:	30 2c       	mov	r12,2
8000f78c:	f0 16 00 1c 	mcall	r6[112]
8000f790:	18 98       	mov	r8,r12
8000f792:	10 9c       	mov	r12,r8
8000f794:	f0 16 00 1a 	mcall	r6[104]
8000f798:	30 08       	mov	r8,0
8000f79a:	e0 69 40 00 	mov	r9,16384
8000f79e:	ea 19 40 8f 	orh	r9,0x408f
8000f7a2:	f0 16 00 03 	mcall	r6[12]
8000f7a6:	14 98       	mov	r8,r10
8000f7a8:	16 99       	mov	r9,r11
8000f7aa:	10 9a       	mov	r10,r8
8000f7ac:	12 9b       	mov	r11,r9
8000f7ae:	30 08       	mov	r8,0
8000f7b0:	e0 69 60 00 	mov	r9,24576
8000f7b4:	ea 19 40 7b 	orh	r9,0x407b
8000f7b8:	f0 16 00 0c 	mcall	r6[48]
8000f7bc:	14 98       	mov	r8,r10
8000f7be:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f7c0:	10 9a       	mov	r10,r8
8000f7c2:	12 9b       	mov	r11,r9
8000f7c4:	f0 16 00 14 	mcall	r6[80]
8000f7c8:	18 98       	mov	r8,r12
8000f7ca:	5c 88       	casts.h	r8
8000f7cc:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000f7ce:	30 1c       	mov	r12,1
8000f7d0:	f0 16 00 1c 	mcall	r6[112]
8000f7d4:	18 98       	mov	r8,r12
8000f7d6:	10 9c       	mov	r12,r8
8000f7d8:	f0 16 00 1a 	mcall	r6[104]
8000f7dc:	30 08       	mov	r8,0
8000f7de:	e0 69 40 00 	mov	r9,16384
8000f7e2:	ea 19 40 8f 	orh	r9,0x408f
8000f7e6:	f0 16 00 03 	mcall	r6[12]
8000f7ea:	14 98       	mov	r8,r10
8000f7ec:	16 99       	mov	r9,r11
8000f7ee:	10 9a       	mov	r10,r8
8000f7f0:	12 9b       	mov	r11,r9
8000f7f2:	30 08       	mov	r8,0
8000f7f4:	e0 69 60 00 	mov	r9,24576
8000f7f8:	ea 19 40 7b 	orh	r9,0x407b
8000f7fc:	f0 16 00 0c 	mcall	r6[48]
8000f800:	14 98       	mov	r8,r10
8000f802:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f804:	10 9a       	mov	r10,r8
8000f806:	12 9b       	mov	r11,r9
8000f808:	f0 16 00 14 	mcall	r6[80]
8000f80c:	18 98       	mov	r8,r12
8000f80e:	5c 88       	casts.h	r8
8000f810:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000f812:	30 0c       	mov	r12,0
8000f814:	f0 16 00 1c 	mcall	r6[112]
8000f818:	18 98       	mov	r8,r12
8000f81a:	10 9c       	mov	r12,r8
8000f81c:	f0 16 00 1a 	mcall	r6[104]
8000f820:	30 08       	mov	r8,0
8000f822:	e0 69 40 00 	mov	r9,16384
8000f826:	ea 19 40 8f 	orh	r9,0x408f
8000f82a:	f0 16 00 03 	mcall	r6[12]
8000f82e:	14 98       	mov	r8,r10
8000f830:	16 99       	mov	r9,r11
8000f832:	10 9a       	mov	r10,r8
8000f834:	12 9b       	mov	r11,r9
8000f836:	30 08       	mov	r8,0
8000f838:	e0 69 60 00 	mov	r9,24576
8000f83c:	ea 19 40 7b 	orh	r9,0x407b
8000f840:	f0 16 00 0c 	mcall	r6[48]
8000f844:	14 98       	mov	r8,r10
8000f846:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f848:	10 9a       	mov	r10,r8
8000f84a:	12 9b       	mov	r11,r9
8000f84c:	f0 16 00 14 	mcall	r6[80]
8000f850:	18 98       	mov	r8,r12
8000f852:	5c 88       	casts.h	r8
8000f854:	10 95       	mov	r5,r8
8000f856:	f0 16 00 0f 	mcall	r6[60]
8000f85a:	18 9b       	mov	r11,r12
8000f85c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f860:	1a d8       	st.w	--sp,r8
8000f862:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f866:	1a d8       	st.w	--sp,r8
8000f868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f86c:	1a d8       	st.w	--sp,r8
8000f86e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f872:	1a d8       	st.w	--sp,r8
8000f874:	1a d0       	st.w	--sp,r0
8000f876:	1a d1       	st.w	--sp,r1
8000f878:	1a d2       	st.w	--sp,r2
8000f87a:	06 98       	mov	r8,r3
8000f87c:	0a 99       	mov	r9,r5
8000f87e:	30 1a       	mov	r10,1
8000f880:	30 0c       	mov	r12,0
8000f882:	fe b0 f2 f5 	rcall	8000de6c <mavlink_msg_rc_channels_scaled_send>
8000f886:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000f888:	ec f8 00 00 	ld.w	r8,r6[0]
8000f88c:	70 08       	ld.w	r8,r8[0x0]
8000f88e:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8000f892:	10 95       	mov	r5,r8
8000f894:	f0 16 00 0f 	mcall	r6[60]
8000f898:	18 98       	mov	r8,r12
8000f89a:	0a 99       	mov	r9,r5
8000f89c:	fe ca 02 98 	sub	r10,pc,664
8000f8a0:	10 9b       	mov	r11,r8
8000f8a2:	30 0c       	mov	r12,0
8000f8a4:	fe b0 f6 ce 	rcall	8000e640 <mavlink_msg_named_value_int_send>
}
8000f8a8:	2f cd       	sub	sp,-16
8000f8aa:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f8ae:	00 00       	add	r0,r0
8000f8b0:	80 00       	ld.sh	r0,r0[0x0]
8000f8b2:	f4 a4       	*unknown*
8000f8b4:	72 6f       	ld.w	pc,r9[0x18]
8000f8b6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8b8:	74 6f       	ld.w	pc,r10[0x18]
8000f8ba:	72 71       	ld.w	r1,r9[0x1c]
8000f8bc:	75 65       	ld.w	r5,r10[0x58]
8000f8be:	00 00       	add	r0,r0
8000f8c0:	70 69       	ld.w	r9,r8[0x18]
8000f8c2:	74 63       	ld.w	r3,r10[0x18]
8000f8c4:	68 74       	ld.w	r4,r4[0x1c]
8000f8c6:	6f 72       	ld.w	r2,r7[0x5c]
8000f8c8:	71 75       	ld.w	r5,r8[0x5c]
8000f8ca:	65 00       	ld.w	r0,r2[0x40]
8000f8cc:	79 61       	ld.w	r1,r12[0x58]
8000f8ce:	77 74       	ld.w	r4,r11[0x5c]
8000f8d0:	6f 72       	ld.w	r2,r7[0x5c]
8000f8d2:	71 75       	ld.w	r5,r8[0x5c]
8000f8d4:	65 00       	ld.w	r0,r2[0x40]
8000f8d6:	00 00       	add	r0,r0
8000f8d8:	74 68       	ld.w	r8,r10[0x18]
8000f8da:	72 75       	ld.w	r5,r9[0x1c]
8000f8dc:	73 74       	ld.w	r4,r9[0x5c]
8000f8de:	00 00       	add	r0,r0
8000f8e0:	72 70       	ld.w	r0,r9[0x1c]
8000f8e2:	6d 31       	ld.w	r1,r6[0x4c]
8000f8e4:	00 00       	add	r0,r0
8000f8e6:	00 00       	add	r0,r0
8000f8e8:	72 70       	ld.w	r0,r9[0x1c]
8000f8ea:	6d 32       	ld.w	r2,r6[0x4c]
8000f8ec:	00 00       	add	r0,r0
8000f8ee:	00 00       	add	r0,r0
8000f8f0:	72 70       	ld.w	r0,r9[0x1c]
8000f8f2:	6d 33       	ld.w	r3,r6[0x4c]
8000f8f4:	00 00       	add	r0,r0
8000f8f6:	00 00       	add	r0,r0
8000f8f8:	72 70       	ld.w	r0,r9[0x1c]
8000f8fa:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000f8fe <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000f8fe:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f902:	1a 97       	mov	r7,sp
8000f904:	21 6d       	sub	sp,88
8000f906:	fe f6 03 66 	ld.w	r6,pc[870]
8000f90a:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000f90c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f910:	70 09       	ld.w	r9,r8[0x0]
8000f912:	ee ca 00 0c 	sub	r10,r7,12
8000f916:	20 4d       	sub	sp,16
8000f918:	1a 98       	mov	r8,sp
8000f91a:	f2 c9 f4 10 	sub	r9,r9,-3056
8000f91e:	20 08       	sub	r8,0
8000f920:	20 09       	sub	r9,0
8000f922:	72 0b       	ld.w	r11,r9[0x0]
8000f924:	91 0b       	st.w	r8[0x0],r11
8000f926:	72 1b       	ld.w	r11,r9[0x4]
8000f928:	91 1b       	st.w	r8[0x4],r11
8000f92a:	72 2b       	ld.w	r11,r9[0x8]
8000f92c:	91 2b       	st.w	r8[0x8],r11
8000f92e:	72 39       	ld.w	r9,r9[0xc]
8000f930:	91 39       	st.w	r8[0xc],r9
8000f932:	14 9c       	mov	r12,r10
8000f934:	f0 16 00 6f 	mcall	r6[444]
8000f938:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000f93a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f93e:	70 08       	ld.w	r8,r8[0x0]
8000f940:	ee cc 00 28 	sub	r12,r7,40
8000f944:	20 cd       	sub	sp,48
8000f946:	1a 99       	mov	r9,sp
8000f948:	12 9b       	mov	r11,r9
8000f94a:	f0 ca f3 44 	sub	r10,r8,-3260
8000f94e:	f6 c8 00 00 	sub	r8,r11,0
8000f952:	f4 c9 00 00 	sub	r9,r10,0
8000f956:	72 0e       	ld.w	lr,r9[0x0]
8000f958:	91 0e       	st.w	r8[0x0],lr
8000f95a:	72 1e       	ld.w	lr,r9[0x4]
8000f95c:	91 1e       	st.w	r8[0x4],lr
8000f95e:	72 2e       	ld.w	lr,r9[0x8]
8000f960:	91 2e       	st.w	r8[0x8],lr
8000f962:	72 39       	ld.w	r9,r9[0xc]
8000f964:	91 39       	st.w	r8[0xc],r9
8000f966:	f6 c8 ff f0 	sub	r8,r11,-16
8000f96a:	f4 c9 ff f0 	sub	r9,r10,-16
8000f96e:	72 0e       	ld.w	lr,r9[0x0]
8000f970:	91 0e       	st.w	r8[0x0],lr
8000f972:	72 1e       	ld.w	lr,r9[0x4]
8000f974:	91 1e       	st.w	r8[0x4],lr
8000f976:	72 2e       	ld.w	lr,r9[0x8]
8000f978:	91 2e       	st.w	r8[0x8],lr
8000f97a:	72 39       	ld.w	r9,r9[0xc]
8000f97c:	91 39       	st.w	r8[0xc],r9
8000f97e:	f6 c8 ff e0 	sub	r8,r11,-32
8000f982:	f4 c9 ff e0 	sub	r9,r10,-32
8000f986:	72 0a       	ld.w	r10,r9[0x0]
8000f988:	91 0a       	st.w	r8[0x0],r10
8000f98a:	72 1a       	ld.w	r10,r9[0x4]
8000f98c:	91 1a       	st.w	r8[0x4],r10
8000f98e:	72 2a       	ld.w	r10,r9[0x8]
8000f990:	91 2a       	st.w	r8[0x8],r10
8000f992:	72 39       	ld.w	r9,r9[0xc]
8000f994:	91 39       	st.w	r8[0xc],r9
8000f996:	f0 16 00 8a 	mcall	r6[552]
8000f99a:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f99c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9a0:	70 08       	ld.w	r8,r8[0x0]
8000f9a2:	f0 f9 0b c8 	ld.w	r9,r8[3016]
8000f9a6:	fc 18 44 7a 	movh	r8,0x447a
8000f9aa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9ae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9b2:	5c 88       	casts.h	r8
8000f9b4:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f9b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9bc:	70 08       	ld.w	r8,r8[0x0]
8000f9be:	f0 f9 0b c4 	ld.w	r9,r8[3012]
8000f9c2:	fc 18 44 7a 	movh	r8,0x447a
8000f9c6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9ca:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9ce:	5c 88       	casts.h	r8
8000f9d0:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f9d4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9d8:	70 08       	ld.w	r8,r8[0x0]
8000f9da:	f0 f9 0b c0 	ld.w	r9,r8[3008]
8000f9de:	fc 18 44 7a 	movh	r8,0x447a
8000f9e2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9e6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9ea:	5c 88       	casts.h	r8
8000f9ec:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f9f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9f4:	70 08       	ld.w	r8,r8[0x0]
8000f9f6:	f0 f9 0b e0 	ld.w	r9,r8[3040]
8000f9fa:	fc 18 42 c8 	movh	r8,0x42c8
8000f9fe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa02:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa06:	5c 88       	casts.h	r8
8000fa08:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fa0c:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa10:	70 08       	ld.w	r8,r8[0x0]
8000fa12:	f0 f9 0b dc 	ld.w	r9,r8[3036]
8000fa16:	fc 18 42 c8 	movh	r8,0x42c8
8000fa1a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa1e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa22:	5c 88       	casts.h	r8
8000fa24:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fa28:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa2c:	70 08       	ld.w	r8,r8[0x0]
8000fa2e:	f0 f9 0b d8 	ld.w	r9,r8[3032]
8000fa32:	fc 18 42 c8 	movh	r8,0x42c8
8000fa36:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa3a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa3e:	5c 88       	casts.h	r8
8000fa40:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa44:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000fa48:	10 9c       	mov	r12,r8
8000fa4a:	f0 16 00 02 	mcall	r6[8]
8000fa4e:	30 08       	mov	r8,0
8000fa50:	e0 69 40 00 	mov	r9,16384
8000fa54:	ea 19 40 8f 	orh	r9,0x408f
8000fa58:	f0 16 00 03 	mcall	r6[12]
8000fa5c:	14 98       	mov	r8,r10
8000fa5e:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa60:	10 9a       	mov	r10,r8
8000fa62:	12 9b       	mov	r11,r9
8000fa64:	f0 16 00 14 	mcall	r6[80]
8000fa68:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa6c:	ee ea ff d8 	ld.d	r10,r7[-40]
8000fa70:	30 08       	mov	r8,0
8000fa72:	e0 69 12 d0 	mov	r9,4816
8000fa76:	ea 19 41 63 	orh	r9,0x4163
8000fa7a:	f0 16 00 03 	mcall	r6[12]
8000fa7e:	14 98       	mov	r8,r10
8000fa80:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa82:	10 9a       	mov	r10,r8
8000fa84:	12 9b       	mov	r11,r9
8000fa86:	f0 16 00 14 	mcall	r6[80]
8000fa8a:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa8e:	ee ea ff e0 	ld.d	r10,r7[-32]
8000fa92:	30 08       	mov	r8,0
8000fa94:	e0 69 12 d0 	mov	r9,4816
8000fa98:	ea 19 41 63 	orh	r9,0x4163
8000fa9c:	f0 16 00 03 	mcall	r6[12]
8000faa0:	14 98       	mov	r8,r10
8000faa2:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000faa4:	10 9a       	mov	r10,r8
8000faa6:	12 9b       	mov	r11,r9
8000faa8:	f0 16 00 14 	mcall	r6[80]
8000faac:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fab0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fab4:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fab6:	f0 f8 0b bc 	ld.w	r8,r8[3004]
8000faba:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fabe:	ec f8 00 00 	ld.w	r8,r6[0]
8000fac2:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fac4:	f0 f8 0b b8 	ld.w	r8,r8[3000]
8000fac8:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000facc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fad0:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fad2:	f0 f8 0b b4 	ld.w	r8,r8[2996]
8000fad6:	ef 48 ff d4 	st.w	r7[-44],r8
8000fada:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000fade:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000fae2:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000fae6:	f0 16 00 29 	mcall	r6[164]
8000faea:	18 98       	mov	r8,r12
8000faec:	10 92       	mov	r2,r8
8000faee:	30 03       	mov	r3,0
8000faf0:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000faf4:	1a d8       	st.w	--sp,r8
8000faf6:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000fafa:	1a d8       	st.w	--sp,r8
8000fafc:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000fb00:	1a d8       	st.w	--sp,r8
8000fb02:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000fb06:	1a d8       	st.w	--sp,r8
8000fb08:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000fb0c:	1a d8       	st.w	--sp,r8
8000fb0e:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000fb12:	1a d8       	st.w	--sp,r8
8000fb14:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000fb18:	1a d8       	st.w	--sp,r8
8000fb1a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000fb1e:	1a d8       	st.w	--sp,r8
8000fb20:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000fb24:	1a d8       	st.w	--sp,r8
8000fb26:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000fb2a:	1a d8       	st.w	--sp,r8
8000fb2c:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000fb30:	1a d8       	st.w	--sp,r8
8000fb32:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000fb36:	1a d8       	st.w	--sp,r8
8000fb38:	1a d0       	st.w	--sp,r0
8000fb3a:	02 98       	mov	r8,r1
8000fb3c:	0a 99       	mov	r9,r5
8000fb3e:	04 9a       	mov	r10,r2
8000fb40:	06 9b       	mov	r11,r3
8000fb42:	30 0c       	mov	r12,0
8000fb44:	fe b0 f4 86 	rcall	8000e450 <mavlink_msg_hil_state_send>
8000fb48:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000fb4a:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000fb4e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb52:	70 08       	ld.w	r8,r8[0x0]
8000fb54:	f0 f8 0b a8 	ld.w	r8,r8[2984]
8000fb58:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fb5c:	f0 16 00 0f 	mcall	r6[60]
8000fb60:	18 98       	mov	r8,r12
8000fb62:	0a 99       	mov	r9,r5
8000fb64:	fe ca 02 b0 	sub	r10,pc,688
8000fb68:	10 9b       	mov	r11,r8
8000fb6a:	30 0c       	mov	r12,0
8000fb6c:	fe b0 f5 6a 	rcall	8000e640 <mavlink_msg_named_value_int_send>
8000fb70:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000fb74:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb78:	70 08       	ld.w	r8,r8[0x0]
8000fb7a:	f0 f8 0b ac 	ld.w	r8,r8[2988]
8000fb7e:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fb82:	f0 16 00 0f 	mcall	r6[60]
8000fb86:	18 98       	mov	r8,r12
8000fb88:	0a 99       	mov	r9,r5
8000fb8a:	fe ca 02 ca 	sub	r10,pc,714
8000fb8e:	10 9b       	mov	r11,r8
8000fb90:	30 0c       	mov	r12,0
8000fb92:	fe b0 f5 57 	rcall	8000e640 <mavlink_msg_named_value_int_send>
8000fb96:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000fb9a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb9e:	70 08       	ld.w	r8,r8[0x0]
8000fba0:	f0 f8 0b b0 	ld.w	r8,r8[2992]
8000fba4:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fba8:	f0 16 00 0f 	mcall	r6[60]
8000fbac:	18 98       	mov	r8,r12
8000fbae:	0a 99       	mov	r9,r5
8000fbb0:	fe ca 02 e4 	sub	r10,pc,740
8000fbb4:	10 9b       	mov	r11,r8
8000fbb6:	30 0c       	mov	r12,0
8000fbb8:	fe b0 f5 44 	rcall	8000e640 <mavlink_msg_named_value_int_send>
8000fbbc:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000fbc0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbc4:	70 08       	ld.w	r8,r8[0x0]
8000fbc6:	f0 f5 0b c8 	ld.w	r5,r8[3016]
8000fbca:	f0 16 00 0f 	mcall	r6[60]
8000fbce:	18 98       	mov	r8,r12
8000fbd0:	0a 99       	mov	r9,r5
8000fbd2:	fe ca 02 fa 	sub	r10,pc,762
8000fbd6:	10 9b       	mov	r11,r8
8000fbd8:	30 0c       	mov	r12,0
8000fbda:	fe b0 f4 fb 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
8000fbde:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000fbe2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbe6:	70 08       	ld.w	r8,r8[0x0]
8000fbe8:	f0 f5 0c ec 	ld.w	r5,r8[3308]
8000fbec:	f0 16 00 0f 	mcall	r6[60]
8000fbf0:	18 98       	mov	r8,r12
8000fbf2:	0a 99       	mov	r9,r5
8000fbf4:	fe ca 03 14 	sub	r10,pc,788
8000fbf8:	10 9b       	mov	r11,r8
8000fbfa:	30 0c       	mov	r12,0
8000fbfc:	fe b0 f4 ea 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
8000fc00:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000fc04:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc08:	70 08       	ld.w	r8,r8[0x0]
8000fc0a:	f0 f5 0c f0 	ld.w	r5,r8[3312]
8000fc0e:	f0 16 00 0f 	mcall	r6[60]
8000fc12:	18 98       	mov	r8,r12
8000fc14:	0a 99       	mov	r9,r5
8000fc16:	fe ca 03 2e 	sub	r10,pc,814
8000fc1a:	10 9b       	mov	r11,r8
8000fc1c:	30 0c       	mov	r12,0
8000fc1e:	fe b0 f4 d9 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
8000fc22:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000fc26:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc2a:	70 08       	ld.w	r8,r8[0x0]
8000fc2c:	f0 f5 0c f4 	ld.w	r5,r8[3316]
8000fc30:	f0 16 00 0f 	mcall	r6[60]
8000fc34:	18 98       	mov	r8,r12
8000fc36:	0a 99       	mov	r9,r5
8000fc38:	fe ca 03 48 	sub	r10,pc,840
8000fc3c:	10 9b       	mov	r11,r8
8000fc3e:	30 0c       	mov	r12,0
8000fc40:	fe b0 f4 c8 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
8000fc44:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000fc48:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc4c:	70 08       	ld.w	r8,r8[0x0]
8000fc4e:	f0 f5 0c f8 	ld.w	r5,r8[3320]
8000fc52:	f0 16 00 0f 	mcall	r6[60]
8000fc56:	18 98       	mov	r8,r12
8000fc58:	0a 99       	mov	r9,r5
8000fc5a:	fe ca 03 62 	sub	r10,pc,866
8000fc5e:	10 9b       	mov	r11,r8
8000fc60:	30 0c       	mov	r12,0
8000fc62:	fe b0 f4 b7 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>

	
}
8000fc66:	2e ad       	sub	sp,-88
8000fc68:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000fc6c:	80 00       	ld.sh	r0,r0[0x0]
8000fc6e:	f7 8e       	*unknown*
8000fc70:	73 74       	ld.w	r4,r9[0x5c]
8000fc72:	61 62       	ld.w	r2,r0[0x58]
8000fc74:	41 76       	lddsp	r6,sp[0x5c]
8000fc76:	67 44       	ld.w	r4,r3[0x50]
8000fc78:	65 6c       	ld.w	r12,r2[0x58]
8000fc7a:	61 79       	ld.w	r9,r0[0x5c]
8000fc7c:	00 00       	add	r0,r0
8000fc7e:	00 00       	add	r0,r0
8000fc80:	73 74       	ld.w	r4,r9[0x5c]
8000fc82:	61 62       	ld.w	r2,r0[0x58]
8000fc84:	44 65       	lddsp	r5,sp[0x118]
8000fc86:	6c 61       	ld.w	r1,r6[0x18]
8000fc88:	79 56       	ld.w	r6,r12[0x54]
8000fc8a:	61 72       	ld.w	r2,r0[0x5c]
8000fc8c:	00 00       	add	r0,r0
8000fc8e:	00 00       	add	r0,r0
8000fc90:	73 74       	ld.w	r4,r9[0x5c]
8000fc92:	61 62       	ld.w	r2,r0[0x58]
8000fc94:	4d 61       	lddpc	r1,8000fdec <send_rt_stats+0x110>
8000fc96:	78 44       	ld.w	r4,r12[0x10]
8000fc98:	65 6c       	ld.w	r12,r2[0x58]
8000fc9a:	61 79       	ld.w	r9,r0[0x5c]
8000fc9c:	00 00       	add	r0,r0
8000fc9e:	00 00       	add	r0,r0
8000fca0:	73 74       	ld.w	r4,r9[0x5c]
8000fca2:	61 62       	ld.w	r2,r0[0x58]
8000fca4:	52 54       	stdsp	sp[0x94],r4
8000fca6:	76 69       	ld.w	r9,r11[0x18]
8000fca8:	6f 00       	ld.w	r0,r7[0x40]
8000fcaa:	00 00       	add	r0,r0
8000fcac:	62 61       	ld.w	r1,r1[0x18]
8000fcae:	72 6f       	ld.w	pc,r9[0x18]
8000fcb0:	41 76       	lddsp	r6,sp[0x5c]
8000fcb2:	67 44       	ld.w	r4,r3[0x50]
8000fcb4:	65 6c       	ld.w	r12,r2[0x58]
8000fcb6:	61 79       	ld.w	r9,r0[0x5c]
8000fcb8:	00 00       	add	r0,r0
8000fcba:	00 00       	add	r0,r0
8000fcbc:	69 6d       	ld.w	sp,r4[0x58]
8000fcbe:	75 45       	ld.w	r5,r10[0x50]
8000fcc0:	78 54       	ld.w	r4,r12[0x14]
8000fcc2:	69 6d       	ld.w	sp,r4[0x58]
8000fcc4:	65 00       	ld.w	r0,r2[0x40]
8000fcc6:	00 00       	add	r0,r0
8000fcc8:	6e 61       	ld.w	r1,r7[0x18]
8000fcca:	76 45       	ld.w	r5,r11[0x10]
8000fccc:	78 54       	ld.w	r4,r12[0x14]
8000fcce:	69 6d       	ld.w	sp,r4[0x58]
8000fcd0:	65 00       	ld.w	r0,r2[0x40]
8000fcd2:	00 00       	add	r0,r0
8000fcd4:	69 6d       	ld.w	sp,r4[0x58]
8000fcd6:	75 5f       	ld.w	pc,r10[0x54]
8000fcd8:	64 74       	ld.w	r4,r2[0x1c]
	...

8000fcdc <send_rt_stats>:

task_return_t send_rt_stats() {
8000fcdc:	eb cd 40 e0 	pushm	r5-r7,lr
8000fce0:	1a 97       	mov	r7,sp
8000fce2:	20 1d       	sub	sp,4
8000fce4:	4c e6       	lddpc	r6,8000fe1c <send_rt_stats+0x140>
8000fce6:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000fce8:	f0 16 01 06 	mcall	r6[1048]
8000fcec:	18 98       	mov	r8,r12
8000fcee:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000fcf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fcf6:	70 c8       	ld.w	r8,r8[0x30]
8000fcf8:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fcfc:	f0 16 00 0f 	mcall	r6[60]
8000fd00:	18 98       	mov	r8,r12
8000fd02:	0a 99       	mov	r9,r5
8000fd04:	fe ca 00 94 	sub	r10,pc,148
8000fd08:	10 9b       	mov	r11,r8
8000fd0a:	30 0c       	mov	r12,0
8000fd0c:	fe b0 f4 62 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000fd10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd14:	70 d8       	ld.w	r8,r8[0x34]
8000fd16:	10 9c       	mov	r12,r8
8000fd18:	f0 16 00 52 	mcall	r6[328]
8000fd1c:	14 98       	mov	r8,r10
8000fd1e:	16 99       	mov	r9,r11
8000fd20:	10 9a       	mov	r10,r8
8000fd22:	12 9b       	mov	r11,r9
8000fd24:	f0 16 00 6d 	mcall	r6[436]
8000fd28:	14 98       	mov	r8,r10
8000fd2a:	16 99       	mov	r9,r11
8000fd2c:	10 9a       	mov	r10,r8
8000fd2e:	12 9b       	mov	r11,r9
8000fd30:	f0 16 00 08 	mcall	r6[32]
8000fd34:	18 95       	mov	r5,r12
8000fd36:	f0 16 00 0f 	mcall	r6[60]
8000fd3a:	18 98       	mov	r8,r12
8000fd3c:	0a 99       	mov	r9,r5
8000fd3e:	fe ca 00 be 	sub	r10,pc,190
8000fd42:	10 9b       	mov	r11,r8
8000fd44:	30 0c       	mov	r12,0
8000fd46:	fe b0 f4 45 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000fd4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd4e:	70 b8       	ld.w	r8,r8[0x2c]
8000fd50:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd54:	f0 16 00 0f 	mcall	r6[60]
8000fd58:	18 98       	mov	r8,r12
8000fd5a:	0a 99       	mov	r9,r5
8000fd5c:	fe ca 00 cc 	sub	r10,pc,204
8000fd60:	10 9b       	mov	r11,r8
8000fd62:	30 0c       	mov	r12,0
8000fd64:	fe b0 f4 36 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000fd68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd6c:	70 e8       	ld.w	r8,r8[0x38]
8000fd6e:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd72:	f0 16 00 0f 	mcall	r6[60]
8000fd76:	18 98       	mov	r8,r12
8000fd78:	0a 99       	mov	r9,r5
8000fd7a:	fe ca 00 da 	sub	r10,pc,218
8000fd7e:	10 9b       	mov	r11,r8
8000fd80:	30 0c       	mov	r12,0
8000fd82:	fe b0 f4 27 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000fd86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd8a:	71 88       	ld.w	r8,r8[0x60]
8000fd8c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd90:	f0 16 00 0f 	mcall	r6[60]
8000fd94:	18 98       	mov	r8,r12
8000fd96:	0a 99       	mov	r9,r5
8000fd98:	fe ca 00 ec 	sub	r10,pc,236
8000fd9c:	10 9b       	mov	r11,r8
8000fd9e:	30 0c       	mov	r12,0
8000fda0:	fe b0 f4 18 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000fda4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fda8:	70 a8       	ld.w	r8,r8[0x28]
8000fdaa:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fdae:	f0 16 00 0f 	mcall	r6[60]
8000fdb2:	18 98       	mov	r8,r12
8000fdb4:	0a 99       	mov	r9,r5
8000fdb6:	fe ca 00 fa 	sub	r10,pc,250
8000fdba:	10 9b       	mov	r11,r8
8000fdbc:	30 0c       	mov	r12,0
8000fdbe:	fe b0 f4 09 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000fdc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdc6:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000fdca:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fdce:	f0 16 00 0f 	mcall	r6[60]
8000fdd2:	18 98       	mov	r8,r12
8000fdd4:	0a 99       	mov	r9,r5
8000fdd6:	fe ca 01 0e 	sub	r10,pc,270
8000fdda:	10 9b       	mov	r11,r8
8000fddc:	30 0c       	mov	r12,0
8000fdde:	fe b0 f3 f9 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000fde2:	f0 16 00 33 	mcall	r6[204]
8000fde6:	18 98       	mov	r8,r12
8000fde8:	f0 f5 01 40 	ld.w	r5,r8[320]
8000fdec:	f0 16 00 0f 	mcall	r6[60]
8000fdf0:	18 98       	mov	r8,r12
8000fdf2:	0a 99       	mov	r9,r5
8000fdf4:	fe ca 01 20 	sub	r10,pc,288
8000fdf8:	10 9b       	mov	r11,r8
8000fdfa:	30 0c       	mov	r12,0
8000fdfc:	fe b0 f3 ea 	rcall	8000e5d0 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000fe00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe04:	30 09       	mov	r9,0
8000fe06:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
8000fe0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe0e:	30 09       	mov	r9,0
8000fe10:	f1 49 00 5c 	st.w	r8[92],r9

}
8000fe14:	2f fd       	sub	sp,-4
8000fe16:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000fe1a:	00 00       	add	r0,r0
8000fe1c:	80 00       	ld.sh	r0,r0[0x0]
8000fe1e:	fb 6a 53 69 	st.b	sp[21353],r10
8000fe22:	6d 5f       	ld.w	pc,r6[0x54]
8000fe24:	6d 6f       	ld.w	pc,r6[0x58]
8000fe26:	64 65       	ld.w	r5,r2[0x18]
8000fe28:	00 00       	add	r0,r0
8000fe2a:	00 00       	add	r0,r0
8000fe2c:	52 6f       	stdsp	sp[0x98],pc
8000fe2e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe30:	52 50       	stdsp	sp[0x94],r0
8000fe32:	69 64       	ld.w	r4,r4[0x58]
8000fe34:	5f 50       	srlt	r0
8000fe36:	5f 47       	srge	r7
8000fe38:	00 00       	add	r0,r0
8000fe3a:	00 00       	add	r0,r0
8000fe3c:	52 6f       	stdsp	sp[0x98],pc
8000fe3e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe40:	52 50       	stdsp	sp[0x94],r0
8000fe42:	69 64       	ld.w	r4,r4[0x58]
8000fe44:	5f 49       	srge	r9
8000fe46:	5f 50       	srlt	r0
8000fe48:	73 74       	ld.w	r4,r9[0x5c]
8000fe4a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe4c:	52 6f       	stdsp	sp[0x98],pc
8000fe4e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe50:	52 50       	stdsp	sp[0x94],r0
8000fe52:	69 64       	ld.w	r4,r4[0x58]
8000fe54:	5f 49       	srge	r9
8000fe56:	5f 50       	srlt	r0
8000fe58:	72 65       	ld.w	r5,r9[0x18]
8000fe5a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe5c:	52 6f       	stdsp	sp[0x98],pc
8000fe5e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe60:	52 50       	stdsp	sp[0x94],r0
8000fe62:	69 64       	ld.w	r4,r4[0x58]
8000fe64:	5f 44       	srge	r4
8000fe66:	5f 47       	srge	r7
8000fe68:	61 69       	ld.w	r9,r0[0x58]
8000fe6a:	6e 00       	ld.w	r0,r7[0x0]
8000fe6c:	52 6f       	stdsp	sp[0x98],pc
8000fe6e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe70:	41 50       	lddsp	r0,sp[0x54]
8000fe72:	69 64       	ld.w	r4,r4[0x58]
8000fe74:	5f 50       	srlt	r0
8000fe76:	5f 47       	srge	r7
8000fe78:	00 00       	add	r0,r0
8000fe7a:	00 00       	add	r0,r0
8000fe7c:	52 6f       	stdsp	sp[0x98],pc
8000fe7e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe80:	41 50       	lddsp	r0,sp[0x54]
8000fe82:	69 64       	ld.w	r4,r4[0x58]
8000fe84:	5f 49       	srge	r9
8000fe86:	5f 50       	srlt	r0
8000fe88:	73 74       	ld.w	r4,r9[0x5c]
8000fe8a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe8c:	52 6f       	stdsp	sp[0x98],pc
8000fe8e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe90:	41 50       	lddsp	r0,sp[0x54]
8000fe92:	69 64       	ld.w	r4,r4[0x58]
8000fe94:	5f 49       	srge	r9
8000fe96:	5f 50       	srlt	r0
8000fe98:	72 65       	ld.w	r5,r9[0x18]
8000fe9a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe9c:	52 6f       	stdsp	sp[0x98],pc
8000fe9e:	6c 6c       	ld.w	r12,r6[0x18]
8000fea0:	41 50       	lddsp	r0,sp[0x54]
8000fea2:	69 64       	ld.w	r4,r4[0x58]
8000fea4:	5f 44       	srge	r4
8000fea6:	5f 47       	srge	r7
8000fea8:	61 69       	ld.w	r9,r0[0x58]
8000feaa:	6e 00       	ld.w	r0,r7[0x0]
8000feac:	50 69       	stdsp	sp[0x18],r9
8000feae:	74 63       	ld.w	r3,r10[0x18]
8000feb0:	68 52       	ld.w	r2,r4[0x14]
8000feb2:	50 69       	stdsp	sp[0x18],r9
8000feb4:	64 5f       	ld.w	pc,r2[0x14]
8000feb6:	50 5f       	stdsp	sp[0x14],pc
8000feb8:	47 00       	lddsp	r0,sp[0x1c0]
8000feba:	00 00       	add	r0,r0
8000febc:	50 69       	stdsp	sp[0x18],r9
8000febe:	74 63       	ld.w	r3,r10[0x18]
8000fec0:	68 52       	ld.w	r2,r4[0x14]
8000fec2:	50 69       	stdsp	sp[0x18],r9
8000fec4:	64 5f       	ld.w	pc,r2[0x14]
8000fec6:	49 5f       	lddpc	pc,8000ff18 <send_rt_stats+0x23c>
8000fec8:	50 73       	stdsp	sp[0x1c],r3
8000feca:	74 47       	ld.w	r7,r10[0x10]
8000fecc:	00 00       	add	r0,r0
8000fece:	00 00       	add	r0,r0
8000fed0:	50 69       	stdsp	sp[0x18],r9
8000fed2:	74 63       	ld.w	r3,r10[0x18]
8000fed4:	68 52       	ld.w	r2,r4[0x14]
8000fed6:	50 69       	stdsp	sp[0x18],r9
8000fed8:	64 5f       	ld.w	pc,r2[0x14]
8000feda:	49 5f       	lddpc	pc,8000ff2c <send_rt_stats+0x250>
8000fedc:	50 72       	stdsp	sp[0x1c],r2
8000fede:	65 47       	ld.w	r7,r2[0x50]
8000fee0:	00 00       	add	r0,r0
8000fee2:	00 00       	add	r0,r0
8000fee4:	50 69       	stdsp	sp[0x18],r9
8000fee6:	74 63       	ld.w	r3,r10[0x18]
8000fee8:	68 52       	ld.w	r2,r4[0x14]
8000feea:	50 69       	stdsp	sp[0x18],r9
8000feec:	64 5f       	ld.w	pc,r2[0x14]
8000feee:	44 5f       	lddsp	pc,sp[0x114]
8000fef0:	47 61       	lddsp	r1,sp[0x1d8]
8000fef2:	69 6e       	ld.w	lr,r4[0x58]
8000fef4:	00 00       	add	r0,r0
8000fef6:	00 00       	add	r0,r0
8000fef8:	50 69       	stdsp	sp[0x18],r9
8000fefa:	74 63       	ld.w	r3,r10[0x18]
8000fefc:	68 41       	ld.w	r1,r4[0x10]
8000fefe:	50 69       	stdsp	sp[0x18],r9
8000ff00:	64 5f       	ld.w	pc,r2[0x14]
8000ff02:	50 5f       	stdsp	sp[0x14],pc
8000ff04:	47 00       	lddsp	r0,sp[0x1c0]
8000ff06:	00 00       	add	r0,r0
8000ff08:	50 69       	stdsp	sp[0x18],r9
8000ff0a:	74 63       	ld.w	r3,r10[0x18]
8000ff0c:	68 41       	ld.w	r1,r4[0x10]
8000ff0e:	50 69       	stdsp	sp[0x18],r9
8000ff10:	64 5f       	ld.w	pc,r2[0x14]
8000ff12:	49 5f       	lddpc	pc,8000ff64 <send_rt_stats+0x288>
8000ff14:	50 73       	stdsp	sp[0x1c],r3
8000ff16:	74 47       	ld.w	r7,r10[0x10]
8000ff18:	00 00       	add	r0,r0
8000ff1a:	00 00       	add	r0,r0
8000ff1c:	50 69       	stdsp	sp[0x18],r9
8000ff1e:	74 63       	ld.w	r3,r10[0x18]
8000ff20:	68 41       	ld.w	r1,r4[0x10]
8000ff22:	50 69       	stdsp	sp[0x18],r9
8000ff24:	64 5f       	ld.w	pc,r2[0x14]
8000ff26:	49 5f       	lddpc	pc,8000ff78 <send_rt_stats+0x29c>
8000ff28:	50 72       	stdsp	sp[0x1c],r2
8000ff2a:	65 47       	ld.w	r7,r2[0x50]
8000ff2c:	00 00       	add	r0,r0
8000ff2e:	00 00       	add	r0,r0
8000ff30:	50 69       	stdsp	sp[0x18],r9
8000ff32:	74 63       	ld.w	r3,r10[0x18]
8000ff34:	68 41       	ld.w	r1,r4[0x10]
8000ff36:	50 69       	stdsp	sp[0x18],r9
8000ff38:	64 5f       	ld.w	pc,r2[0x14]
8000ff3a:	44 5f       	lddsp	pc,sp[0x114]
8000ff3c:	47 61       	lddsp	r1,sp[0x1d8]
8000ff3e:	69 6e       	ld.w	lr,r4[0x58]
8000ff40:	00 00       	add	r0,r0
8000ff42:	00 00       	add	r0,r0
8000ff44:	59 61       	cp.w	r1,22
8000ff46:	77 52       	ld.w	r2,r11[0x54]
8000ff48:	50 69       	stdsp	sp[0x18],r9
8000ff4a:	64 5f       	ld.w	pc,r2[0x14]
8000ff4c:	50 5f       	stdsp	sp[0x14],pc
8000ff4e:	47 00       	lddsp	r0,sp[0x1c0]
8000ff50:	59 61       	cp.w	r1,22
8000ff52:	77 52       	ld.w	r2,r11[0x54]
8000ff54:	50 69       	stdsp	sp[0x18],r9
8000ff56:	64 5f       	ld.w	pc,r2[0x14]
8000ff58:	49 5f       	lddpc	pc,8000ffac <send_rt_stats+0x2d0>
8000ff5a:	50 73       	stdsp	sp[0x1c],r3
8000ff5c:	74 47       	ld.w	r7,r10[0x10]
8000ff5e:	00 00       	add	r0,r0
8000ff60:	59 61       	cp.w	r1,22
8000ff62:	77 52       	ld.w	r2,r11[0x54]
8000ff64:	50 69       	stdsp	sp[0x18],r9
8000ff66:	64 5f       	ld.w	pc,r2[0x14]
8000ff68:	49 5f       	lddpc	pc,8000ffbc <send_rt_stats+0x2e0>
8000ff6a:	50 72       	stdsp	sp[0x1c],r2
8000ff6c:	65 47       	ld.w	r7,r2[0x50]
8000ff6e:	00 00       	add	r0,r0
8000ff70:	59 61       	cp.w	r1,22
8000ff72:	77 52       	ld.w	r2,r11[0x54]
8000ff74:	50 69       	stdsp	sp[0x18],r9
8000ff76:	64 5f       	ld.w	pc,r2[0x14]
8000ff78:	44 5f       	lddsp	pc,sp[0x114]
8000ff7a:	47 61       	lddsp	r1,sp[0x1d8]
8000ff7c:	69 6e       	ld.w	lr,r4[0x58]
8000ff7e:	00 00       	add	r0,r0
8000ff80:	59 61       	cp.w	r1,22
8000ff82:	77 41       	ld.w	r1,r11[0x50]
8000ff84:	50 69       	stdsp	sp[0x18],r9
8000ff86:	64 5f       	ld.w	pc,r2[0x14]
8000ff88:	50 5f       	stdsp	sp[0x14],pc
8000ff8a:	47 00       	lddsp	r0,sp[0x1c0]
8000ff8c:	59 61       	cp.w	r1,22
8000ff8e:	77 41       	ld.w	r1,r11[0x50]
8000ff90:	50 69       	stdsp	sp[0x18],r9
8000ff92:	64 5f       	ld.w	pc,r2[0x14]
8000ff94:	49 5f       	lddpc	pc,8000ffe8 <send_rt_stats+0x30c>
8000ff96:	50 73       	stdsp	sp[0x1c],r3
8000ff98:	74 47       	ld.w	r7,r10[0x10]
8000ff9a:	00 00       	add	r0,r0
8000ff9c:	59 61       	cp.w	r1,22
8000ff9e:	77 41       	ld.w	r1,r11[0x50]
8000ffa0:	50 69       	stdsp	sp[0x18],r9
8000ffa2:	64 5f       	ld.w	pc,r2[0x14]
8000ffa4:	49 5f       	lddpc	pc,8000fff8 <send_rt_stats+0x31c>
8000ffa6:	50 72       	stdsp	sp[0x1c],r2
8000ffa8:	65 47       	ld.w	r7,r2[0x50]
8000ffaa:	00 00       	add	r0,r0
8000ffac:	59 61       	cp.w	r1,22
8000ffae:	77 41       	ld.w	r1,r11[0x50]
8000ffb0:	50 69       	stdsp	sp[0x18],r9
8000ffb2:	64 5f       	ld.w	pc,r2[0x14]
8000ffb4:	44 5f       	lddsp	pc,sp[0x114]
8000ffb6:	47 61       	lddsp	r1,sp[0x1d8]
8000ffb8:	69 6e       	ld.w	lr,r4[0x58]
8000ffba:	00 00       	add	r0,r0
8000ffbc:	52 6f       	stdsp	sp[0x98],pc
8000ffbe:	6c 6c       	ld.w	r12,r6[0x18]
8000ffc0:	56 50       	stdsp	sp[0x194],r0
8000ffc2:	69 64       	ld.w	r4,r4[0x58]
8000ffc4:	5f 50       	srlt	r0
8000ffc6:	5f 47       	srge	r7
8000ffc8:	00 00       	add	r0,r0
8000ffca:	00 00       	add	r0,r0
8000ffcc:	52 6f       	stdsp	sp[0x98],pc
8000ffce:	6c 6c       	ld.w	r12,r6[0x18]
8000ffd0:	56 50       	stdsp	sp[0x194],r0
8000ffd2:	69 64       	ld.w	r4,r4[0x58]
8000ffd4:	5f 49       	srge	r9
8000ffd6:	5f 50       	srlt	r0
8000ffd8:	73 74       	ld.w	r4,r9[0x5c]
8000ffda:	47 00       	lddsp	r0,sp[0x1c0]
8000ffdc:	52 6f       	stdsp	sp[0x98],pc
8000ffde:	6c 6c       	ld.w	r12,r6[0x18]
8000ffe0:	56 50       	stdsp	sp[0x194],r0
8000ffe2:	69 64       	ld.w	r4,r4[0x58]
8000ffe4:	5f 49       	srge	r9
8000ffe6:	5f 50       	srlt	r0
8000ffe8:	72 65       	ld.w	r5,r9[0x18]
8000ffea:	47 00       	lddsp	r0,sp[0x1c0]
8000ffec:	52 6f       	stdsp	sp[0x98],pc
8000ffee:	6c 6c       	ld.w	r12,r6[0x18]
8000fff0:	56 50       	stdsp	sp[0x194],r0
8000fff2:	69 64       	ld.w	r4,r4[0x58]
8000fff4:	5f 44       	srge	r4
8000fff6:	5f 47       	srge	r7
8000fff8:	61 69       	ld.w	r9,r0[0x58]
8000fffa:	6e 00       	ld.w	r0,r7[0x0]
8000fffc:	50 69       	stdsp	sp[0x18],r9
8000fffe:	74 63       	ld.w	r3,r10[0x18]
80010000:	68 56       	ld.w	r6,r4[0x14]
80010002:	50 69       	stdsp	sp[0x18],r9
80010004:	64 5f       	ld.w	pc,r2[0x14]
80010006:	50 5f       	stdsp	sp[0x14],pc
80010008:	47 00       	lddsp	r0,sp[0x1c0]
8001000a:	00 00       	add	r0,r0
8001000c:	50 69       	stdsp	sp[0x18],r9
8001000e:	74 63       	ld.w	r3,r10[0x18]
80010010:	68 56       	ld.w	r6,r4[0x14]
80010012:	50 69       	stdsp	sp[0x18],r9
80010014:	64 5f       	ld.w	pc,r2[0x14]
80010016:	49 5f       	lddpc	pc,80010068 <send_rt_stats+0x38c>
80010018:	50 73       	stdsp	sp[0x1c],r3
8001001a:	74 47       	ld.w	r7,r10[0x10]
8001001c:	00 00       	add	r0,r0
8001001e:	00 00       	add	r0,r0
80010020:	50 69       	stdsp	sp[0x18],r9
80010022:	74 63       	ld.w	r3,r10[0x18]
80010024:	68 56       	ld.w	r6,r4[0x14]
80010026:	50 69       	stdsp	sp[0x18],r9
80010028:	64 5f       	ld.w	pc,r2[0x14]
8001002a:	49 5f       	lddpc	pc,8001007c <send_rt_stats+0x3a0>
8001002c:	50 72       	stdsp	sp[0x1c],r2
8001002e:	65 47       	ld.w	r7,r2[0x50]
80010030:	00 00       	add	r0,r0
80010032:	00 00       	add	r0,r0
80010034:	50 69       	stdsp	sp[0x18],r9
80010036:	74 63       	ld.w	r3,r10[0x18]
80010038:	68 56       	ld.w	r6,r4[0x14]
8001003a:	50 69       	stdsp	sp[0x18],r9
8001003c:	64 5f       	ld.w	pc,r2[0x14]
8001003e:	44 5f       	lddsp	pc,sp[0x114]
80010040:	47 61       	lddsp	r1,sp[0x1d8]
80010042:	69 6e       	ld.w	lr,r4[0x58]
80010044:	00 00       	add	r0,r0
80010046:	00 00       	add	r0,r0
80010048:	54 68       	stdsp	sp[0x118],r8
8001004a:	72 56       	ld.w	r6,r9[0x14]
8001004c:	50 69       	stdsp	sp[0x18],r9
8001004e:	64 5f       	ld.w	pc,r2[0x14]
80010050:	50 5f       	stdsp	sp[0x14],pc
80010052:	47 00       	lddsp	r0,sp[0x1c0]
80010054:	54 68       	stdsp	sp[0x118],r8
80010056:	72 56       	ld.w	r6,r9[0x14]
80010058:	50 69       	stdsp	sp[0x18],r9
8001005a:	64 5f       	ld.w	pc,r2[0x14]
8001005c:	49 5f       	lddpc	pc,800100b0 <send_rt_stats+0x3d4>
8001005e:	50 73       	stdsp	sp[0x1c],r3
80010060:	74 47       	ld.w	r7,r10[0x10]
80010062:	00 00       	add	r0,r0
80010064:	54 68       	stdsp	sp[0x118],r8
80010066:	72 56       	ld.w	r6,r9[0x14]
80010068:	50 69       	stdsp	sp[0x18],r9
8001006a:	64 5f       	ld.w	pc,r2[0x14]
8001006c:	49 5f       	lddpc	pc,800100c0 <send_rt_stats+0x3e4>
8001006e:	50 72       	stdsp	sp[0x1c],r2
80010070:	65 47       	ld.w	r7,r2[0x50]
80010072:	00 00       	add	r0,r0
80010074:	54 68       	stdsp	sp[0x118],r8
80010076:	72 56       	ld.w	r6,r9[0x14]
80010078:	50 69       	stdsp	sp[0x18],r9
8001007a:	64 5f       	ld.w	pc,r2[0x14]
8001007c:	44 5f       	lddsp	pc,sp[0x114]
8001007e:	47 61       	lddsp	r1,sp[0x1d8]
80010080:	69 6e       	ld.w	lr,r4[0x58]
80010082:	00 00       	add	r0,r0
80010084:	54 68       	stdsp	sp[0x118],r8
80010086:	72 56       	ld.w	r6,r9[0x14]
80010088:	50 69       	stdsp	sp[0x18],r9
8001008a:	64 5f       	ld.w	pc,r2[0x14]
8001008c:	44 5f       	lddsp	pc,sp[0x114]
8001008e:	4c 50       	lddpc	r0,800101a0 <send_rt_stats+0x4c4>
80010090:	46 00       	lddsp	r0,sp[0x180]
80010092:	00 00       	add	r0,r0
80010094:	54 68       	stdsp	sp[0x118],r8
80010096:	72 56       	ld.w	r6,r9[0x14]
80010098:	50 69       	stdsp	sp[0x18],r9
8001009a:	64 5f       	ld.w	pc,r2[0x14]
8001009c:	73 6f       	ld.w	pc,r9[0x58]
8001009e:	66 74       	ld.w	r4,r3[0x1c]
800100a0:	00 00       	add	r0,r0
800100a2:	00 00       	add	r0,r0
800100a4:	51 46       	stdsp	sp[0x50],r6
800100a6:	5f 6b       	srmi	r11
800100a8:	70 5f       	ld.w	pc,r8[0x14]
800100aa:	61 63       	ld.w	r3,r0[0x58]
800100ac:	63 00       	ld.w	r0,r1[0x40]
800100ae:	00 00       	add	r0,r0
800100b0:	51 46       	stdsp	sp[0x50],r6
800100b2:	5f 6b       	srmi	r11
800100b4:	70 5f       	ld.w	pc,r8[0x14]
800100b6:	6d 61       	ld.w	r1,r6[0x58]
800100b8:	67 00       	ld.w	r0,r3[0x40]
800100ba:	00 00       	add	r0,r0
800100bc:	42 69       	lddsp	r9,sp[0x98]
800100be:	61 73       	ld.w	r3,r0[0x5c]
800100c0:	5f 47       	srge	r7
800100c2:	79 72       	ld.w	r2,r12[0x5c]
800100c4:	6f 5f       	ld.w	pc,r7[0x54]
800100c6:	58 00       	cp.w	r0,0
800100c8:	42 69       	lddsp	r9,sp[0x98]
800100ca:	61 73       	ld.w	r3,r0[0x5c]
800100cc:	5f 47       	srge	r7
800100ce:	79 72       	ld.w	r2,r12[0x5c]
800100d0:	6f 5f       	ld.w	pc,r7[0x54]
800100d2:	59 00       	cp.w	r0,16
800100d4:	42 69       	lddsp	r9,sp[0x98]
800100d6:	61 73       	ld.w	r3,r0[0x5c]
800100d8:	5f 47       	srge	r7
800100da:	79 72       	ld.w	r2,r12[0x5c]
800100dc:	6f 5f       	ld.w	pc,r7[0x54]
800100de:	5a 00       	cp.w	r0,-32
800100e0:	42 69       	lddsp	r9,sp[0x98]
800100e2:	61 73       	ld.w	r3,r0[0x5c]
800100e4:	5f 41       	srge	r1
800100e6:	63 63       	ld.w	r3,r1[0x58]
800100e8:	5f 58       	srlt	r8
800100ea:	00 00       	add	r0,r0
800100ec:	42 69       	lddsp	r9,sp[0x98]
800100ee:	61 73       	ld.w	r3,r0[0x5c]
800100f0:	5f 41       	srge	r1
800100f2:	63 63       	ld.w	r3,r1[0x58]
800100f4:	5f 59       	srlt	r9
800100f6:	00 00       	add	r0,r0
800100f8:	42 69       	lddsp	r9,sp[0x98]
800100fa:	61 73       	ld.w	r3,r0[0x5c]
800100fc:	5f 41       	srge	r1
800100fe:	63 63       	ld.w	r3,r1[0x58]
80010100:	5f 5a       	srlt	r10
80010102:	00 00       	add	r0,r0
80010104:	42 69       	lddsp	r9,sp[0x98]
80010106:	61 73       	ld.w	r3,r0[0x5c]
80010108:	5f 4d       	srge	sp
8001010a:	61 67       	ld.w	r7,r0[0x58]
8001010c:	5f 58       	srlt	r8
8001010e:	00 00       	add	r0,r0
80010110:	42 69       	lddsp	r9,sp[0x98]
80010112:	61 73       	ld.w	r3,r0[0x5c]
80010114:	5f 4d       	srge	sp
80010116:	61 67       	ld.w	r7,r0[0x58]
80010118:	5f 59       	srlt	r9
8001011a:	00 00       	add	r0,r0
8001011c:	42 69       	lddsp	r9,sp[0x98]
8001011e:	61 73       	ld.w	r3,r0[0x5c]
80010120:	5f 4d       	srge	sp
80010122:	61 67       	ld.w	r7,r0[0x58]
80010124:	5f 5a       	srlt	r10
80010126:	00 00       	add	r0,r0
80010128:	53 63       	stdsp	sp[0xd8],r3
8001012a:	61 6c       	ld.w	r12,r0[0x58]
8001012c:	65 5f       	ld.w	pc,r2[0x54]
8001012e:	47 79       	lddsp	r9,sp[0x1dc]
80010130:	72 6f       	ld.w	pc,r9[0x18]
80010132:	5f 58       	srlt	r8
80010134:	00 00       	add	r0,r0
80010136:	00 00       	add	r0,r0
80010138:	53 63       	stdsp	sp[0xd8],r3
8001013a:	61 6c       	ld.w	r12,r0[0x58]
8001013c:	65 5f       	ld.w	pc,r2[0x54]
8001013e:	47 79       	lddsp	r9,sp[0x1dc]
80010140:	72 6f       	ld.w	pc,r9[0x18]
80010142:	5f 59       	srlt	r9
80010144:	00 00       	add	r0,r0
80010146:	00 00       	add	r0,r0
80010148:	53 63       	stdsp	sp[0xd8],r3
8001014a:	61 6c       	ld.w	r12,r0[0x58]
8001014c:	65 5f       	ld.w	pc,r2[0x54]
8001014e:	47 79       	lddsp	r9,sp[0x1dc]
80010150:	72 6f       	ld.w	pc,r9[0x18]
80010152:	5f 5a       	srlt	r10
80010154:	00 00       	add	r0,r0
80010156:	00 00       	add	r0,r0
80010158:	53 63       	stdsp	sp[0xd8],r3
8001015a:	61 6c       	ld.w	r12,r0[0x58]
8001015c:	65 5f       	ld.w	pc,r2[0x54]
8001015e:	41 63       	lddsp	r3,sp[0x58]
80010160:	63 5f       	ld.w	pc,r1[0x54]
80010162:	58 00       	cp.w	r0,0
80010164:	53 63       	stdsp	sp[0xd8],r3
80010166:	61 6c       	ld.w	r12,r0[0x58]
80010168:	65 5f       	ld.w	pc,r2[0x54]
8001016a:	41 63       	lddsp	r3,sp[0x58]
8001016c:	63 5f       	ld.w	pc,r1[0x54]
8001016e:	59 00       	cp.w	r0,16
80010170:	53 63       	stdsp	sp[0xd8],r3
80010172:	61 6c       	ld.w	r12,r0[0x58]
80010174:	65 5f       	ld.w	pc,r2[0x54]
80010176:	41 63       	lddsp	r3,sp[0x58]
80010178:	63 5f       	ld.w	pc,r1[0x54]
8001017a:	5a 00       	cp.w	r0,-32
8001017c:	53 63       	stdsp	sp[0xd8],r3
8001017e:	61 6c       	ld.w	r12,r0[0x58]
80010180:	65 5f       	ld.w	pc,r2[0x54]
80010182:	4d 61       	lddpc	r1,800102d8 <add_PID_parameters+0xe4>
80010184:	67 5f       	ld.w	pc,r3[0x54]
80010186:	58 00       	cp.w	r0,0
80010188:	53 63       	stdsp	sp[0xd8],r3
8001018a:	61 6c       	ld.w	r12,r0[0x58]
8001018c:	65 5f       	ld.w	pc,r2[0x54]
8001018e:	4d 61       	lddpc	r1,800102e4 <add_PID_parameters+0xf0>
80010190:	67 5f       	ld.w	pc,r3[0x54]
80010192:	59 00       	cp.w	r0,16
80010194:	53 63       	stdsp	sp[0xd8],r3
80010196:	61 6c       	ld.w	r12,r0[0x58]
80010198:	65 5f       	ld.w	pc,r2[0x54]
8001019a:	4d 61       	lddpc	r1,800102f0 <add_PID_parameters+0xfc>
8001019c:	67 5f       	ld.w	pc,r3[0x54]
8001019e:	5a 00       	cp.w	r0,-32
800101a0:	49 44       	lddpc	r4,800101f0 <send_rt_stats+0x514>
800101a2:	5f 53       	srlt	r3
800101a4:	79 73       	ld.w	r3,r12[0x5c]
800101a6:	74 65       	ld.w	r5,r10[0x18]
800101a8:	6d 00       	ld.w	r0,r6[0x40]
800101aa:	00 00       	add	r0,r0
800101ac:	49 44       	lddpc	r4,800101fc <add_PID_parameters+0x8>
800101ae:	5f 50       	srlt	r0
800101b0:	6c 61       	ld.w	r1,r6[0x18]
800101b2:	6e 6e       	ld.w	lr,r7[0x18]
800101b4:	65 72       	ld.w	r2,r2[0x5c]
800101b6:	00 00       	add	r0,r0
800101b8:	50 6f       	stdsp	sp[0x18],pc
800101ba:	73 5f       	ld.w	pc,r9[0x54]
800101bc:	6b 70       	ld.w	r0,r5[0x5c]
800101be:	5f 61       	srmi	r1
800101c0:	6c 74       	ld.w	r4,r6[0x1c]
800101c2:	00 00       	add	r0,r0
800101c4:	50 6f       	stdsp	sp[0x18],pc
800101c6:	73 5f       	ld.w	pc,r9[0x54]
800101c8:	6b 70       	ld.w	r0,r5[0x5c]
800101ca:	5f 76       	srpl	r6
800101cc:	65 6c       	ld.w	r12,r2[0x58]
800101ce:	62 00       	ld.w	r0,r1[0x0]
800101d0:	50 6f       	stdsp	sp[0x18],pc
800101d2:	73 5f       	ld.w	pc,r9[0x54]
800101d4:	6b 70       	ld.w	r0,r5[0x5c]
800101d6:	5f 70       	srpl	r0
800101d8:	6f 73       	ld.w	r3,r7[0x5c]
800101da:	30 00       	mov	r0,0
800101dc:	50 6f       	stdsp	sp[0x18],pc
800101de:	73 5f       	ld.w	pc,r9[0x54]
800101e0:	6b 70       	ld.w	r0,r5[0x5c]
800101e2:	5f 70       	srpl	r0
800101e4:	6f 73       	ld.w	r3,r7[0x5c]
800101e6:	31 00       	mov	r0,16
800101e8:	50 6f       	stdsp	sp[0x18],pc
800101ea:	73 5f       	ld.w	pc,r9[0x54]
800101ec:	6b 70       	ld.w	r0,r5[0x5c]
800101ee:	5f 70       	srpl	r0
800101f0:	6f 73       	ld.w	r3,r7[0x5c]
800101f2:	32 00       	mov	r0,32

800101f4 <add_PID_parameters>:


void add_PID_parameters(void) {
800101f4:	eb cd 40 c0 	pushm	r6-r7,lr
800101f8:	1a 97       	mov	r7,sp
800101fa:	20 3d       	sub	sp,12
800101fc:	fe f6 04 cc 	ld.w	r6,pc[1228]
80010200:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
80010202:	ec f8 00 00 	ld.w	r8,r6[0]
80010206:	70 08       	ld.w	r8,r8[0x0]
80010208:	f0 c8 fe 60 	sub	r8,r8,-416
8001020c:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
80010210:	ec f8 00 00 	ld.w	r8,r6[0]
80010214:	70 08       	ld.w	r8,r8[0x0]
80010216:	f0 c8 fd 24 	sub	r8,r8,-732
8001021a:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;
8001021e:	ec f8 00 00 	ld.w	r8,r6[0]
80010222:	70 08       	ld.w	r8,r8[0x0]
80010224:	f0 c8 fb e8 	sub	r8,r8,-1048
80010228:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
8001022c:	ec f8 00 00 	ld.w	r8,r6[0]
80010230:	70 08       	ld.w	r8,r8[0x0]
80010232:	f0 c8 ef 40 	sub	r8,r8,-4288
80010236:	fe cb 04 16 	sub	r11,pc,1046
8001023a:	10 9c       	mov	r12,r8
8001023c:	f0 16 02 06 	mcall	r6[2072]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
80010240:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010244:	fe cb 04 18 	sub	r11,pc,1048
80010248:	10 9c       	mov	r12,r8
8001024a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
8001024e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010252:	2f 08       	sub	r8,-16
80010254:	fe cb 04 18 	sub	r11,pc,1048
80010258:	10 9c       	mov	r12,r8
8001025a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
8001025e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010262:	2f 48       	sub	r8,-12
80010264:	fe cb 04 18 	sub	r11,pc,1048
80010268:	10 9c       	mov	r12,r8
8001026a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
8001026e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010272:	2e 08       	sub	r8,-32
80010274:	fe cb 04 18 	sub	r11,pc,1048
80010278:	10 9c       	mov	r12,r8
8001027a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
8001027e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010282:	fe cb 04 16 	sub	r11,pc,1046
80010286:	10 9c       	mov	r12,r8
80010288:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
8001028c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010290:	2f 08       	sub	r8,-16
80010292:	fe cb 04 16 	sub	r11,pc,1046
80010296:	10 9c       	mov	r12,r8
80010298:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
8001029c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800102a0:	2f 48       	sub	r8,-12
800102a2:	fe cb 04 16 	sub	r11,pc,1046
800102a6:	10 9c       	mov	r12,r8
800102a8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
800102ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800102b0:	2e 08       	sub	r8,-32
800102b2:	fe cb 04 16 	sub	r11,pc,1046
800102b6:	10 9c       	mov	r12,r8
800102b8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
800102bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102c0:	2b c8       	sub	r8,-68
800102c2:	fe cb 04 16 	sub	r11,pc,1046
800102c6:	10 9c       	mov	r12,r8
800102c8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
800102cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102d0:	2a c8       	sub	r8,-84
800102d2:	fe cb 04 16 	sub	r11,pc,1046
800102d6:	10 9c       	mov	r12,r8
800102d8:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
800102dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102e0:	2b 08       	sub	r8,-80
800102e2:	fe cb 04 12 	sub	r11,pc,1042
800102e6:	10 9c       	mov	r12,r8
800102e8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
800102ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102f0:	29 c8       	sub	r8,-100
800102f2:	fe cb 04 0e 	sub	r11,pc,1038
800102f6:	10 9c       	mov	r12,r8
800102f8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
800102fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010300:	2b c8       	sub	r8,-68
80010302:	fe cb 04 0a 	sub	r11,pc,1034
80010306:	10 9c       	mov	r12,r8
80010308:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
8001030c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010310:	2a c8       	sub	r8,-84
80010312:	fe cb 04 0a 	sub	r11,pc,1034
80010316:	10 9c       	mov	r12,r8
80010318:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
8001031c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010320:	2b 08       	sub	r8,-80
80010322:	fe cb 04 06 	sub	r11,pc,1030
80010326:	10 9c       	mov	r12,r8
80010328:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
8001032c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010330:	29 c8       	sub	r8,-100
80010332:	fe cb 04 02 	sub	r11,pc,1026
80010336:	10 9c       	mov	r12,r8
80010338:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
8001033c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010340:	f0 c8 ff 78 	sub	r8,r8,-136
80010344:	fe cb 04 00 	sub	r11,pc,1024
80010348:	10 9c       	mov	r12,r8
8001034a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
8001034e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010352:	f0 c8 ff 68 	sub	r8,r8,-152
80010356:	fe cb 04 06 	sub	r11,pc,1030
8001035a:	10 9c       	mov	r12,r8
8001035c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
80010360:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010364:	f0 c8 ff 6c 	sub	r8,r8,-148
80010368:	fe cb 04 08 	sub	r11,pc,1032
8001036c:	10 9c       	mov	r12,r8
8001036e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
80010372:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010376:	f0 c8 ff 58 	sub	r8,r8,-168
8001037a:	fe cb 04 0a 	sub	r11,pc,1034
8001037e:	10 9c       	mov	r12,r8
80010380:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80010384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010388:	f0 c8 ff 78 	sub	r8,r8,-136
8001038c:	fe cb 04 0c 	sub	r11,pc,1036
80010390:	10 9c       	mov	r12,r8
80010392:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
80010396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001039a:	f0 c8 ff 68 	sub	r8,r8,-152
8001039e:	fe cb 04 12 	sub	r11,pc,1042
800103a2:	10 9c       	mov	r12,r8
800103a4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
800103a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103ac:	f0 c8 ff 6c 	sub	r8,r8,-148
800103b0:	fe cb 04 14 	sub	r11,pc,1044
800103b4:	10 9c       	mov	r12,r8
800103b6:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800103ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103be:	f0 c8 ff 58 	sub	r8,r8,-168
800103c2:	fe cb 04 16 	sub	r11,pc,1046
800103c6:	10 9c       	mov	r12,r8
800103c8:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
800103cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103d0:	fe cb 04 14 	sub	r11,pc,1044
800103d4:	10 9c       	mov	r12,r8
800103d6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
800103da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103de:	2f 08       	sub	r8,-16
800103e0:	fe cb 04 14 	sub	r11,pc,1044
800103e4:	10 9c       	mov	r12,r8
800103e6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
800103ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103ee:	2f 48       	sub	r8,-12
800103f0:	fe cb 04 14 	sub	r11,pc,1044
800103f4:	10 9c       	mov	r12,r8
800103f6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
800103fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103fe:	2e 08       	sub	r8,-32
80010400:	fe cb 04 14 	sub	r11,pc,1044
80010404:	10 9c       	mov	r12,r8
80010406:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
8001040a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001040e:	2b c8       	sub	r8,-68
80010410:	fe cb 04 14 	sub	r11,pc,1044
80010414:	10 9c       	mov	r12,r8
80010416:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
8001041a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001041e:	2a c8       	sub	r8,-84
80010420:	fe cb 04 14 	sub	r11,pc,1044
80010424:	10 9c       	mov	r12,r8
80010426:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
8001042a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001042e:	2b 08       	sub	r8,-80
80010430:	fe cb 04 10 	sub	r11,pc,1040
80010434:	10 9c       	mov	r12,r8
80010436:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
8001043a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001043e:	29 c8       	sub	r8,-100
80010440:	fe cb 04 0c 	sub	r11,pc,1036
80010444:	10 9c       	mov	r12,r8
80010446:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
8001044a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001044e:	f0 c8 ff 34 	sub	r8,r8,-204
80010452:	fe cb 04 0a 	sub	r11,pc,1034
80010456:	10 9c       	mov	r12,r8
80010458:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
8001045c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010460:	f0 c8 ff 24 	sub	r8,r8,-220
80010464:	fe cb 04 10 	sub	r11,pc,1040
80010468:	10 9c       	mov	r12,r8
8001046a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
8001046e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010472:	f0 c8 ff 28 	sub	r8,r8,-216
80010476:	fe cb 04 12 	sub	r11,pc,1042
8001047a:	10 9c       	mov	r12,r8
8001047c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
80010480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010484:	f0 c8 ff 14 	sub	r8,r8,-236
80010488:	fe cb 04 14 	sub	r11,pc,1044
8001048c:	10 9c       	mov	r12,r8
8001048e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
80010492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010496:	f0 c8 ff 0c 	sub	r8,r8,-244
8001049a:	fe cb 04 16 	sub	r11,pc,1046
8001049e:	10 9c       	mov	r12,r8
800104a0:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
800104a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104a8:	f0 c8 fe f4 	sub	r8,r8,-268
800104ac:	fe cb 04 18 	sub	r11,pc,1048
800104b0:	10 9c       	mov	r12,r8
800104b2:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
800104b6:	ec f8 00 00 	ld.w	r8,r6[0]
800104ba:	70 08       	ld.w	r8,r8[0x0]
800104bc:	f0 c8 ff 64 	sub	r8,r8,-156
800104c0:	fe cb 04 1c 	sub	r11,pc,1052
800104c4:	10 9c       	mov	r12,r8
800104c6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
800104ca:	ec f8 00 00 	ld.w	r8,r6[0]
800104ce:	70 08       	ld.w	r8,r8[0x0]
800104d0:	f0 c8 ff 5c 	sub	r8,r8,-164
800104d4:	fe cb 04 24 	sub	r11,pc,1060
800104d8:	10 9c       	mov	r12,r8
800104da:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800104de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800104e2:	f0 c8 ff 58 	sub	r8,r8,-168
800104e6:	fe cb 05 3a 	sub	r11,pc,1338
800104ea:	10 9c       	mov	r12,r8
800104ec:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
800104f0:	ec f8 00 00 	ld.w	r8,r6[0]
800104f4:	70 08       	ld.w	r8,r8[0x0]
800104f6:	2d 08       	sub	r8,-48
800104f8:	fe cb 04 3c 	sub	r11,pc,1084
800104fc:	10 9c       	mov	r12,r8
800104fe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
80010502:	ec f8 00 00 	ld.w	r8,r6[0]
80010506:	70 08       	ld.w	r8,r8[0x0]
80010508:	2c c8       	sub	r8,-52
8001050a:	fe cb 04 42 	sub	r11,pc,1090
8001050e:	10 9c       	mov	r12,r8
80010510:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
80010514:	ec f8 00 00 	ld.w	r8,r6[0]
80010518:	70 08       	ld.w	r8,r8[0x0]
8001051a:	2c 88       	sub	r8,-56
8001051c:	fe cb 04 48 	sub	r11,pc,1096
80010520:	10 9c       	mov	r12,r8
80010522:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
80010526:	ec f8 00 00 	ld.w	r8,r6[0]
8001052a:	70 08       	ld.w	r8,r8[0x0]
8001052c:	2c 48       	sub	r8,-60
8001052e:	fe cb 04 4e 	sub	r11,pc,1102
80010532:	10 9c       	mov	r12,r8
80010534:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
80010538:	ec f8 00 00 	ld.w	r8,r6[0]
8001053c:	70 08       	ld.w	r8,r8[0x0]
8001053e:	2c 08       	sub	r8,-64
80010540:	fe cb 04 54 	sub	r11,pc,1108
80010544:	10 9c       	mov	r12,r8
80010546:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
8001054a:	ec f8 00 00 	ld.w	r8,r6[0]
8001054e:	70 08       	ld.w	r8,r8[0x0]
80010550:	2b c8       	sub	r8,-68
80010552:	fe cb 04 5a 	sub	r11,pc,1114
80010556:	10 9c       	mov	r12,r8
80010558:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
8001055c:	ec f8 00 00 	ld.w	r8,r6[0]
80010560:	70 08       	ld.w	r8,r8[0x0]
80010562:	2b 88       	sub	r8,-72
80010564:	fe cb 04 60 	sub	r11,pc,1120
80010568:	10 9c       	mov	r12,r8
8001056a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
8001056e:	ec f8 00 00 	ld.w	r8,r6[0]
80010572:	70 08       	ld.w	r8,r8[0x0]
80010574:	2b 48       	sub	r8,-76
80010576:	fe cb 04 66 	sub	r11,pc,1126
8001057a:	10 9c       	mov	r12,r8
8001057c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
80010580:	ec f8 00 00 	ld.w	r8,r6[0]
80010584:	70 08       	ld.w	r8,r8[0x0]
80010586:	2b 08       	sub	r8,-80
80010588:	fe cb 04 6c 	sub	r11,pc,1132
8001058c:	10 9c       	mov	r12,r8
8001058e:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
80010592:	ec f8 00 00 	ld.w	r8,r6[0]
80010596:	70 08       	ld.w	r8,r8[0x0]
80010598:	f0 c8 fe ec 	sub	r8,r8,-276
8001059c:	fe cb 04 74 	sub	r11,pc,1140
800105a0:	10 9c       	mov	r12,r8
800105a2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
800105a6:	ec f8 00 00 	ld.w	r8,r6[0]
800105aa:	70 08       	ld.w	r8,r8[0x0]
800105ac:	f0 c8 fe e8 	sub	r8,r8,-280
800105b0:	fe cb 04 78 	sub	r11,pc,1144
800105b4:	10 9c       	mov	r12,r8
800105b6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
800105ba:	ec f8 00 00 	ld.w	r8,r6[0]
800105be:	70 08       	ld.w	r8,r8[0x0]
800105c0:	f0 c8 fe e4 	sub	r8,r8,-284
800105c4:	fe cb 04 7c 	sub	r11,pc,1148
800105c8:	10 9c       	mov	r12,r8
800105ca:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
800105ce:	ec f8 00 00 	ld.w	r8,r6[0]
800105d2:	70 08       	ld.w	r8,r8[0x0]
800105d4:	f0 c8 fe e0 	sub	r8,r8,-288
800105d8:	fe cb 04 80 	sub	r11,pc,1152
800105dc:	10 9c       	mov	r12,r8
800105de:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
800105e2:	ec f8 00 00 	ld.w	r8,r6[0]
800105e6:	70 08       	ld.w	r8,r8[0x0]
800105e8:	f0 c8 fe dc 	sub	r8,r8,-292
800105ec:	fe cb 04 88 	sub	r11,pc,1160
800105f0:	10 9c       	mov	r12,r8
800105f2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
800105f6:	ec f8 00 00 	ld.w	r8,r6[0]
800105fa:	70 08       	ld.w	r8,r8[0x0]
800105fc:	f0 c8 fe d8 	sub	r8,r8,-296
80010600:	fe cb 04 90 	sub	r11,pc,1168
80010604:	10 9c       	mov	r12,r8
80010606:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
8001060a:	ec f8 00 00 	ld.w	r8,r6[0]
8001060e:	70 08       	ld.w	r8,r8[0x0]
80010610:	f0 c8 fe d4 	sub	r8,r8,-300
80010614:	fe cb 04 98 	sub	r11,pc,1176
80010618:	10 9c       	mov	r12,r8
8001061a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
8001061e:	ec f8 00 00 	ld.w	r8,r6[0]
80010622:	70 08       	ld.w	r8,r8[0x0]
80010624:	f0 c8 fe d0 	sub	r8,r8,-304
80010628:	fe cb 04 a0 	sub	r11,pc,1184
8001062c:	10 9c       	mov	r12,r8
8001062e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
80010632:	ec f8 00 00 	ld.w	r8,r6[0]
80010636:	70 08       	ld.w	r8,r8[0x0]
80010638:	f0 c8 fe cc 	sub	r8,r8,-308
8001063c:	fe cb 04 a8 	sub	r11,pc,1192
80010640:	10 9c       	mov	r12,r8
80010642:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
80010646:	fe cb 04 a6 	sub	r11,pc,1190
8001064a:	ec fc 00 74 	ld.w	r12,r6[116]
8001064e:	f0 16 00 e2 	mcall	r6[904]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
80010652:	fe cb 04 a6 	sub	r11,pc,1190
80010656:	ec fc 00 c8 	ld.w	r12,r6[200]
8001065a:	f0 16 00 e2 	mcall	r6[904]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
8001065e:	ec f8 00 00 	ld.w	r8,r6[0]
80010662:	70 08       	ld.w	r8,r8[0x0]
80010664:	f0 c8 f2 ac 	sub	r8,r8,-3412
80010668:	fe cb 04 b0 	sub	r11,pc,1200
8001066c:	10 9c       	mov	r12,r8
8001066e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
80010672:	ec f8 00 00 	ld.w	r8,r6[0]
80010676:	70 08       	ld.w	r8,r8[0x0]
80010678:	f0 c8 f2 a8 	sub	r8,r8,-3416
8001067c:	fe cb 04 b8 	sub	r11,pc,1208
80010680:	10 9c       	mov	r12,r8
80010682:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
80010686:	ec f8 00 00 	ld.w	r8,r6[0]
8001068a:	70 08       	ld.w	r8,r8[0x0]
8001068c:	f0 c8 f2 b8 	sub	r8,r8,-3400
80010690:	fe cb 04 c0 	sub	r11,pc,1216
80010694:	10 9c       	mov	r12,r8
80010696:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
8001069a:	ec f8 00 00 	ld.w	r8,r6[0]
8001069e:	70 08       	ld.w	r8,r8[0x0]
800106a0:	f0 c8 f2 b4 	sub	r8,r8,-3404
800106a4:	fe cb 04 c8 	sub	r11,pc,1224
800106a8:	10 9c       	mov	r12,r8
800106aa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
800106ae:	ec f8 00 00 	ld.w	r8,r6[0]
800106b2:	70 08       	ld.w	r8,r8[0x0]
800106b4:	f0 c8 f2 b0 	sub	r8,r8,-3408
800106b8:	fe cb 04 d0 	sub	r11,pc,1232
800106bc:	10 9c       	mov	r12,r8
800106be:	f0 16 00 0e 	mcall	r6[56]
}
800106c2:	2f dd       	sub	sp,-12
800106c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800106c8:	80 01       	ld.sh	r1,r0[0x0]
800106ca:	00 84       	andn	r4,r0

800106cc <init_mavlink_actions>:

void init_mavlink_actions(void) {
800106cc:	eb cd 40 e0 	pushm	r5-r7,lr
800106d0:	1a 97       	mov	r7,sp
800106d2:	4e e6       	lddpc	r6,80010888 <init_mavlink_actions+0x1bc>
800106d4:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
800106d6:	f0 16 00 33 	mcall	r6[204]
800106da:	18 99       	mov	r9,r12
800106dc:	ec f8 00 00 	ld.w	r8,r6[0]
800106e0:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
800106e2:	f0 16 01 9c 	mcall	r6[1648]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
800106e6:	f0 16 01 1b 	mcall	r6[1132]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
800106ea:	ec f5 06 c8 	ld.w	r5,r6[1736]
800106ee:	f0 16 00 26 	mcall	r6[152]
800106f2:	30 08       	mov	r8,0
800106f4:	0a 99       	mov	r9,r5
800106f6:	30 2a       	mov	r10,2
800106f8:	e6 7b a1 20 	mov	r11,500000
800106fc:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
80010700:	ec f5 07 5c 	ld.w	r5,r6[1884]
80010704:	f0 16 00 26 	mcall	r6[152]
80010708:	31 f8       	mov	r8,31
8001070a:	0a 99       	mov	r9,r5
8001070c:	30 0a       	mov	r10,0
8001070e:	ee 7b 42 40 	mov	r11,1000000
80010712:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
80010716:	ec f5 07 c4 	ld.w	r5,r6[1988]
8001071a:	f0 16 00 26 	mcall	r6[152]
8001071e:	31 e8       	mov	r8,30
80010720:	0a 99       	mov	r9,r5
80010722:	30 2a       	mov	r10,2
80010724:	e2 7b 0d 40 	mov	r11,200000
80010728:	f0 16 00 25 	mcall	r6[148]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
8001072c:	ec f5 06 44 	ld.w	r5,r6[1604]
80010730:	f0 16 00 26 	mcall	r6[152]
80010734:	34 a8       	mov	r8,74
80010736:	0a 99       	mov	r9,r5
80010738:	30 2a       	mov	r10,2
8001073a:	e6 7b a1 20 	mov	r11,500000
8001073e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
80010742:	ec f5 04 fc 	ld.w	r5,r6[1276]
80010746:	f0 16 00 26 	mcall	r6[152]
8001074a:	31 d8       	mov	r8,29
8001074c:	0a 99       	mov	r9,r5
8001074e:	30 2a       	mov	r10,2
80010750:	e6 7b a1 20 	mov	r11,500000
80010754:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
80010758:	ec f5 04 f8 	ld.w	r5,r6[1272]
8001075c:	f0 16 00 26 	mcall	r6[152]
80010760:	31 a8       	mov	r8,26
80010762:	0a 99       	mov	r9,r5
80010764:	30 2a       	mov	r10,2
80010766:	e2 7b 0d 40 	mov	r11,200000
8001076a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
8001076e:	ec f5 05 00 	ld.w	r5,r6[1280]
80010772:	f0 16 00 26 	mcall	r6[152]
80010776:	31 b8       	mov	r8,27
80010778:	0a 99       	mov	r9,r5
8001077a:	30 2a       	mov	r10,2
8001077c:	e6 7b a1 20 	mov	r11,500000
80010780:	f0 16 00 25 	mcall	r6[148]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
80010784:	ec f5 05 90 	ld.w	r5,r6[1424]
80010788:	f0 16 00 26 	mcall	r6[152]
8001078c:	35 08       	mov	r8,80
8001078e:	0a 99       	mov	r9,r5
80010790:	30 0a       	mov	r10,0
80010792:	e2 7b 0d 40 	mov	r11,200000
80010796:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
8001079a:	ec f5 05 80 	ld.w	r5,r6[1408]
8001079e:	f0 16 00 26 	mcall	r6[152]
800107a2:	33 b8       	mov	r8,59
800107a4:	0a 99       	mov	r9,r5
800107a6:	30 0a       	mov	r10,0
800107a8:	e2 7b 0d 40 	mov	r11,200000
800107ac:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
800107b0:	ec f5 05 24 	ld.w	r5,r6[1316]
800107b4:	f0 16 00 26 	mcall	r6[152]
800107b8:	33 a8       	mov	r8,58
800107ba:	0a 99       	mov	r9,r5
800107bc:	30 0a       	mov	r10,0
800107be:	e2 7b 0d 40 	mov	r11,200000
800107c2:	f0 16 00 25 	mcall	r6[148]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
800107c6:	ec f5 07 50 	ld.w	r5,r6[1872]
800107ca:	f0 16 00 26 	mcall	r6[152]
800107ce:	32 48       	mov	r8,36
800107d0:	0a 99       	mov	r9,r5
800107d2:	30 2a       	mov	r10,2
800107d4:	e2 7b d0 90 	mov	r11,250000
800107d8:	f0 16 00 25 	mcall	r6[148]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
800107dc:	ec f5 06 e4 	ld.w	r5,r6[1764]
800107e0:	f0 16 00 26 	mcall	r6[152]
800107e4:	32 08       	mov	r8,32
800107e6:	0a 99       	mov	r9,r5
800107e8:	30 2a       	mov	r10,2
800107ea:	e2 7b 0d 40 	mov	r11,200000
800107ee:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
800107f2:	ec f5 07 44 	ld.w	r5,r6[1860]
800107f6:	f0 16 00 26 	mcall	r6[152]
800107fa:	32 18       	mov	r8,33
800107fc:	0a 99       	mov	r9,r5
800107fe:	30 2a       	mov	r10,2
80010800:	e2 7b 0d 40 	mov	r11,200000
80010804:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
80010808:	ec f5 07 74 	ld.w	r5,r6[1908]
8001080c:	f0 16 00 26 	mcall	r6[152]
80010810:	31 88       	mov	r8,24
80010812:	0a 99       	mov	r9,r5
80010814:	30 2a       	mov	r10,2
80010816:	e2 7b d0 90 	mov	r11,250000
8001081a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
8001081e:	ec f5 06 28 	ld.w	r5,r6[1576]
80010822:	f0 16 00 26 	mcall	r6[152]
80010826:	32 38       	mov	r8,35
80010828:	0a 99       	mov	r9,r5
8001082a:	30 2a       	mov	r10,2
8001082c:	e2 7b 0d 40 	mov	r11,200000
80010830:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
80010834:	ec f5 07 48 	ld.w	r5,r6[1864]
80010838:	f0 16 00 26 	mcall	r6[152]
8001083c:	32 28       	mov	r8,34
8001083e:	0a 99       	mov	r9,r5
80010840:	30 2a       	mov	r10,2
80010842:	e2 7b d0 90 	mov	r11,250000
80010846:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
8001084a:	ec f5 07 d8 	ld.w	r5,r6[2008]
8001084e:	f0 16 00 26 	mcall	r6[152]
80010852:	35 a8       	mov	r8,90
80010854:	0a 99       	mov	r9,r5
80010856:	30 2a       	mov	r10,2
80010858:	e6 7b a1 20 	mov	r11,500000
8001085c:	f0 16 00 25 	mcall	r6[148]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
80010860:	ec f5 06 88 	ld.w	r5,r6[1672]
80010864:	f0 16 00 26 	mcall	r6[152]
80010868:	e0 68 00 fb 	mov	r8,251
8001086c:	0a 99       	mov	r9,r5
8001086e:	30 0a       	mov	r10,0
80010870:	e2 7b d0 90 	mov	r11,250000
80010874:	f0 16 00 25 	mcall	r6[148]
	
	sort_taskset_by_period(get_mavlink_taskset());
80010878:	f0 16 00 26 	mcall	r6[152]
8001087c:	18 98       	mov	r8,r12
8001087e:	10 9c       	mov	r12,r8
80010880:	f0 16 01 a6 	mcall	r6[1688]
}
80010884:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010888:	80 01       	ld.sh	r1,r0[0x0]
8001088a:	05 58       	ld.sh	r8,--r2

8001088c <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
8001088c:	eb cd 40 c0 	pushm	r6-r7,lr
80010890:	1a 97       	mov	r7,sp
80010892:	48 e6       	lddpc	r6,800108c8 <get_roll_from_remote+0x3c>
80010894:	1e 26       	rsub	r6,pc
80010896:	30 1c       	mov	r12,1
80010898:	f0 16 00 c1 	mcall	r6[772]
8001089c:	18 98       	mov	r8,r12
8001089e:	10 9c       	mov	r12,r8
800108a0:	f0 16 00 1a 	mcall	r6[104]
800108a4:	30 08       	mov	r8,0
800108a6:	e0 69 60 00 	mov	r9,24576
800108aa:	ea 19 40 7b 	orh	r9,0x407b
800108ae:	f0 16 00 0c 	mcall	r6[48]
800108b2:	14 98       	mov	r8,r10
800108b4:	16 99       	mov	r9,r11
800108b6:	10 9a       	mov	r10,r8
800108b8:	12 9b       	mov	r11,r9
800108ba:	f0 16 00 08 	mcall	r6[32]
800108be:	18 98       	mov	r8,r12
800108c0:	10 9c       	mov	r12,r8
800108c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108c6:	00 00       	add	r0,r0
800108c8:	80 01       	ld.sh	r1,r0[0x0]
800108ca:	07 18       	ld.sh	r8,r3++

800108cc <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
800108cc:	eb cd 40 c0 	pushm	r6-r7,lr
800108d0:	1a 97       	mov	r7,sp
800108d2:	48 e6       	lddpc	r6,80010908 <get_pitch_from_remote+0x3c>
800108d4:	1e 26       	rsub	r6,pc
800108d6:	30 2c       	mov	r12,2
800108d8:	f0 16 00 c1 	mcall	r6[772]
800108dc:	18 98       	mov	r8,r12
800108de:	5c 38       	neg	r8
800108e0:	10 9c       	mov	r12,r8
800108e2:	f0 16 00 1a 	mcall	r6[104]
800108e6:	30 08       	mov	r8,0
800108e8:	e0 69 60 00 	mov	r9,24576
800108ec:	ea 19 40 7b 	orh	r9,0x407b
800108f0:	f0 16 00 0c 	mcall	r6[48]
800108f4:	14 98       	mov	r8,r10
800108f6:	16 99       	mov	r9,r11
800108f8:	10 9a       	mov	r10,r8
800108fa:	12 9b       	mov	r11,r9
800108fc:	f0 16 00 08 	mcall	r6[32]
80010900:	18 98       	mov	r8,r12
80010902:	10 9c       	mov	r12,r8
80010904:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010908:	80 01       	ld.sh	r1,r0[0x0]
8001090a:	07 58       	ld.sh	r8,--r3

8001090c <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
8001090c:	eb cd 40 c0 	pushm	r6-r7,lr
80010910:	1a 97       	mov	r7,sp
80010912:	48 e6       	lddpc	r6,80010948 <get_yaw_from_remote+0x3c>
80010914:	1e 26       	rsub	r6,pc
80010916:	30 3c       	mov	r12,3
80010918:	f0 16 00 c1 	mcall	r6[772]
8001091c:	18 98       	mov	r8,r12
8001091e:	10 9c       	mov	r12,r8
80010920:	f0 16 00 1a 	mcall	r6[104]
80010924:	30 08       	mov	r8,0
80010926:	e0 69 60 00 	mov	r9,24576
8001092a:	ea 19 40 7b 	orh	r9,0x407b
8001092e:	f0 16 00 0c 	mcall	r6[48]
80010932:	14 98       	mov	r8,r10
80010934:	16 99       	mov	r9,r11
80010936:	10 9a       	mov	r10,r8
80010938:	12 9b       	mov	r11,r9
8001093a:	f0 16 00 08 	mcall	r6[32]
8001093e:	18 98       	mov	r8,r12
80010940:	10 9c       	mov	r12,r8
80010942:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010946:	00 00       	add	r0,r0
80010948:	80 01       	ld.sh	r1,r0[0x0]
8001094a:	07 98       	ld.ub	r8,r3[0x1]

8001094c <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001094c:	eb cd 40 c0 	pushm	r6-r7,lr
80010950:	1a 97       	mov	r7,sp
80010952:	48 e6       	lddpc	r6,80010988 <get_thrust_from_remote+0x3c>
80010954:	1e 26       	rsub	r6,pc
80010956:	30 0c       	mov	r12,0
80010958:	f0 16 00 1c 	mcall	r6[112]
8001095c:	18 98       	mov	r8,r12
8001095e:	10 9c       	mov	r12,r8
80010960:	f0 16 00 1a 	mcall	r6[104]
80010964:	30 08       	mov	r8,0
80010966:	e0 69 60 00 	mov	r9,24576
8001096a:	ea 19 40 7b 	orh	r9,0x407b
8001096e:	f0 16 00 0c 	mcall	r6[48]
80010972:	14 98       	mov	r8,r10
80010974:	16 99       	mov	r9,r11
80010976:	10 9a       	mov	r10,r8
80010978:	12 9b       	mov	r11,r9
8001097a:	f0 16 00 08 	mcall	r6[32]
8001097e:	18 98       	mov	r8,r12
80010980:	10 9c       	mov	r12,r8
80010982:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010986:	00 00       	add	r0,r0
80010988:	80 01       	ld.sh	r1,r0[0x0]
8001098a:	07 d8       	ld.ub	r8,r3[0x5]

8001098c <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
8001098c:	eb cd 40 e0 	pushm	r5-r7,lr
80010990:	1a 97       	mov	r7,sp
80010992:	20 bd       	sub	sp,44
80010994:	4b a6       	lddpc	r6,80010a7c <get_command_from_remote+0xf0>
80010996:	1e 26       	rsub	r6,pc
80010998:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
8001099a:	c7 9f       	rcall	8001088c <get_roll_from_remote>
8001099c:	18 98       	mov	r8,r12
8001099e:	10 9c       	mov	r12,r8
800109a0:	f0 16 00 02 	mcall	r6[8]
800109a4:	e0 68 99 9a 	mov	r8,39322
800109a8:	ea 18 99 99 	orh	r8,0x9999
800109ac:	e0 69 99 99 	mov	r9,39321
800109b0:	ea 19 3f e9 	orh	r9,0x3fe9
800109b4:	f0 16 00 03 	mcall	r6[12]
800109b8:	14 98       	mov	r8,r10
800109ba:	16 99       	mov	r9,r11
800109bc:	10 9a       	mov	r10,r8
800109be:	12 9b       	mov	r11,r9
800109c0:	f0 16 00 08 	mcall	r6[32]
800109c4:	18 98       	mov	r8,r12
800109c6:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
800109ca:	c8 1f       	rcall	800108cc <get_pitch_from_remote>
800109cc:	18 98       	mov	r8,r12
800109ce:	10 9c       	mov	r12,r8
800109d0:	f0 16 00 02 	mcall	r6[8]
800109d4:	e0 68 99 9a 	mov	r8,39322
800109d8:	ea 18 99 99 	orh	r8,0x9999
800109dc:	e0 69 99 99 	mov	r9,39321
800109e0:	ea 19 3f e9 	orh	r9,0x3fe9
800109e4:	f0 16 00 03 	mcall	r6[12]
800109e8:	14 98       	mov	r8,r10
800109ea:	16 99       	mov	r9,r11
800109ec:	10 9a       	mov	r10,r8
800109ee:	12 9b       	mov	r11,r9
800109f0:	f0 16 00 08 	mcall	r6[32]
800109f4:	18 98       	mov	r8,r12
800109f6:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
800109fa:	c8 9f       	rcall	8001090c <get_yaw_from_remote>
800109fc:	18 98       	mov	r8,r12
800109fe:	10 9c       	mov	r12,r8
80010a00:	f0 16 00 02 	mcall	r6[8]
80010a04:	e0 68 99 9a 	mov	r8,39322
80010a08:	ea 18 99 99 	orh	r8,0x9999
80010a0c:	e0 69 99 99 	mov	r9,39321
80010a10:	ea 19 3f e9 	orh	r9,0x3fe9
80010a14:	f0 16 00 03 	mcall	r6[12]
80010a18:	14 98       	mov	r8,r10
80010a1a:	16 99       	mov	r9,r11
80010a1c:	10 9a       	mov	r10,r8
80010a1e:	12 9b       	mov	r11,r9
80010a20:	f0 16 00 08 	mcall	r6[32]
80010a24:	18 98       	mov	r8,r12
80010a26:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80010a2a:	c9 1f       	rcall	8001094c <get_thrust_from_remote>
80010a2c:	18 98       	mov	r8,r12
80010a2e:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
80010a32:	0a 98       	mov	r8,r5
80010a34:	ee c9 00 2c 	sub	r9,r7,44
80010a38:	f0 ca 00 00 	sub	r10,r8,0
80010a3c:	f2 cb 00 00 	sub	r11,r9,0
80010a40:	76 0c       	ld.w	r12,r11[0x0]
80010a42:	95 0c       	st.w	r10[0x0],r12
80010a44:	76 1c       	ld.w	r12,r11[0x4]
80010a46:	95 1c       	st.w	r10[0x4],r12
80010a48:	76 2c       	ld.w	r12,r11[0x8]
80010a4a:	95 2c       	st.w	r10[0x8],r12
80010a4c:	76 3b       	ld.w	r11,r11[0xc]
80010a4e:	95 3b       	st.w	r10[0xc],r11
80010a50:	f0 ca ff f0 	sub	r10,r8,-16
80010a54:	f2 cb ff f0 	sub	r11,r9,-16
80010a58:	76 0c       	ld.w	r12,r11[0x0]
80010a5a:	95 0c       	st.w	r10[0x0],r12
80010a5c:	76 1c       	ld.w	r12,r11[0x4]
80010a5e:	95 1c       	st.w	r10[0x4],r12
80010a60:	76 2c       	ld.w	r12,r11[0x8]
80010a62:	95 2c       	st.w	r10[0x8],r12
80010a64:	76 3b       	ld.w	r11,r11[0xc]
80010a66:	95 3b       	st.w	r10[0xc],r11
80010a68:	f2 ea 00 20 	ld.d	r10,r9[32]
80010a6c:	f0 eb 00 20 	st.d	r8[32],r10
80010a70:	72 a9       	ld.w	r9,r9[0x28]
80010a72:	91 a9       	st.w	r8[0x28],r9
}
80010a74:	0a 9c       	mov	r12,r5
80010a76:	2f 5d       	sub	sp,-44
80010a78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010a7c:	80 01       	ld.sh	r1,r0[0x0]
80010a7e:	08 1a       	sub	r10,r4

80010a80 <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
80010a80:	eb cd 40 c0 	pushm	r6-r7,lr
80010a84:	1a 97       	mov	r7,sp
80010a86:	20 1d       	sub	sp,4
80010a88:	4a d6       	lddpc	r6,80010b3c <get_channel_mode+0xbc>
80010a8a:	1e 26       	rsub	r6,pc
80010a8c:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
80010a90:	30 4c       	mov	r12,4
80010a92:	f0 16 00 1c 	mcall	r6[112]
80010a96:	18 98       	mov	r8,r12
80010a98:	10 99       	mov	r9,r8
80010a9a:	30 08       	mov	r8,0
80010a9c:	f0 09 19 00 	cp.h	r9,r8
80010aa0:	c0 84       	brge	80010ab0 <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
80010aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010aa6:	11 88       	ld.ub	r8,r8[0x0]
80010aa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010aac:	b2 88       	st.b	r9[0x0],r8
80010aae:	c4 38       	rjmp	80010b34 <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80010ab0:	30 4c       	mov	r12,4
80010ab2:	f0 16 00 1c 	mcall	r6[112]
80010ab6:	18 98       	mov	r8,r12
80010ab8:	10 99       	mov	r9,r8
80010aba:	30 08       	mov	r8,0
80010abc:	f0 09 19 00 	cp.h	r9,r8
80010ac0:	e0 8a 00 14 	brle	80010ae8 <get_channel_mode+0x68>
80010ac4:	30 5c       	mov	r12,5
80010ac6:	f0 16 00 1c 	mcall	r6[112]
80010aca:	18 98       	mov	r8,r12
80010acc:	10 99       	mov	r9,r8
80010ace:	30 08       	mov	r8,0
80010ad0:	f0 09 19 00 	cp.h	r9,r8
80010ad4:	c0 a4       	brge	80010ae8 <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
80010ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010ada:	11 88       	ld.ub	r8,r8[0x0]
80010adc:	a1 a8       	sbr	r8,0x0
80010ade:	5c 58       	castu.b	r8
80010ae0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010ae4:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80010ae6:	c2 78       	rjmp	80010b34 <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80010ae8:	30 4c       	mov	r12,4
80010aea:	f0 16 00 1c 	mcall	r6[112]
80010aee:	18 98       	mov	r8,r12
80010af0:	10 99       	mov	r9,r8
80010af2:	30 08       	mov	r8,0
80010af4:	f0 09 19 00 	cp.h	r9,r8
80010af8:	e0 8a 00 16 	brle	80010b24 <get_channel_mode+0xa4>
80010afc:	30 5c       	mov	r12,5
80010afe:	f0 16 00 1c 	mcall	r6[112]
80010b02:	18 98       	mov	r8,r12
80010b04:	10 99       	mov	r9,r8
80010b06:	31 48       	mov	r8,20
80010b08:	f0 09 19 00 	cp.h	r9,r8
80010b0c:	e0 8a 00 0c 	brle	80010b24 <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
80010b10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010b14:	11 88       	ld.ub	r8,r8[0x0]
80010b16:	e8 18 00 03 	orl	r8,0x3
80010b1a:	5c 58       	castu.b	r8
80010b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010b20:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80010b22:	c0 98       	rjmp	80010b34 <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
80010b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010b28:	11 88       	ld.ub	r8,r8[0x0]
80010b2a:	a1 b8       	sbr	r8,0x1
80010b2c:	5c 58       	castu.b	r8
80010b2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010b32:	b2 88       	st.b	r9[0x0],r8
		}
	}
80010b34:	2f fd       	sub	sp,-4
80010b36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010b3a:	00 00       	add	r0,r0
80010b3c:	80 01       	ld.sh	r1,r0[0x0]
80010b3e:	09 0e       	ld.w	lr,r4++

80010b40 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80010b40:	eb cd 40 c0 	pushm	r6-r7,lr
80010b44:	1a 97       	mov	r7,sp
80010b46:	20 3d       	sub	sp,12
80010b48:	49 06       	lddpc	r6,80010b88 <mav_array_memcpy+0x48>
80010b4a:	1e 26       	rsub	r6,pc
80010b4c:	ef 4c ff fc 	st.w	r7[-4],r12
80010b50:	ef 4b ff f8 	st.w	r7[-8],r11
80010b54:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80010b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b5c:	58 08       	cp.w	r8,0
80010b5e:	c0 91       	brne	80010b70 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80010b60:	ee fa ff f4 	ld.w	r10,r7[-12]
80010b64:	30 0b       	mov	r11,0
80010b66:	ee fc ff fc 	ld.w	r12,r7[-4]
80010b6a:	f0 16 00 31 	mcall	r6[196]
80010b6e:	c0 98       	rjmp	80010b80 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80010b70:	ee fa ff f4 	ld.w	r10,r7[-12]
80010b74:	ee fb ff f8 	ld.w	r11,r7[-8]
80010b78:	ee fc ff fc 	ld.w	r12,r7[-4]
80010b7c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80010b80:	2f dd       	sub	sp,-12
80010b82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010b86:	00 00       	add	r0,r0
80010b88:	80 01       	ld.sh	r1,r0[0x0]
80010b8a:	09 ce       	ld.ub	lr,r4[0x4]

80010b8c <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
80010b8c:	eb cd 40 c0 	pushm	r6-r7,lr
80010b90:	1a 97       	mov	r7,sp
80010b92:	48 46       	lddpc	r6,80010ba0 <get_main_taskset+0x14>
80010b94:	1e 26       	rsub	r6,pc
	return &main_tasks;
80010b96:	ec f8 01 30 	ld.w	r8,r6[304]
}
80010b9a:	10 9c       	mov	r12,r8
80010b9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010ba0:	80 01       	ld.sh	r1,r0[0x0]
80010ba2:	0a 18       	sub	r8,r5

80010ba4 <run_imu_update>:

task_return_t run_imu_update() {
80010ba4:	eb cd 40 c0 	pushm	r6-r7,lr
80010ba8:	1a 97       	mov	r7,sp
80010baa:	48 d6       	lddpc	r6,80010bdc <run_imu_update+0x38>
80010bac:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
80010bae:	ec f8 00 00 	ld.w	r8,r6[0]
80010bb2:	70 08       	ld.w	r8,r8[0x0]
80010bb4:	f0 c9 f4 f8 	sub	r9,r8,-2824
80010bb8:	ec f8 00 00 	ld.w	r8,r6[0]
80010bbc:	70 08       	ld.w	r8,r8[0x0]
80010bbe:	f0 ca ef 3c 	sub	r10,r8,-4292
80010bc2:	ec f8 00 00 	ld.w	r8,r6[0]
80010bc6:	70 08       	ld.w	r8,r8[0x0]
80010bc8:	f0 cb f2 c4 	sub	r11,r8,-3388
80010bcc:	ec f8 00 00 	ld.w	r8,r6[0]
80010bd0:	70 08       	ld.w	r8,r8[0x0]
80010bd2:	10 9c       	mov	r12,r8
80010bd4:	f0 16 00 98 	mcall	r6[608]
}	
80010bd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010bdc:	80 01       	ld.sh	r1,r0[0x0]
80010bde:	0a 30       	cp.w	r0,r5
80010be0:	6d 6f       	ld.w	pc,r6[0x58]
80010be2:	74 6f       	ld.w	pc,r10[0x18]
80010be4:	72 20       	ld.w	r0,r9[0x8]
80010be6:	6f 6e       	ld.w	lr,r7[0x58]
80010be8:	3a 20       	mov	r0,-94
80010bea:	79 61       	ld.w	r1,r12[0x58]
80010bec:	77 3d       	ld.w	sp,r11[0x4c]
80010bee:	0a 00       	add	r0,r5

80010bf0 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
80010bf0:	eb cd 40 e0 	pushm	r5-r7,lr
80010bf4:	1a 97       	mov	r7,sp
80010bf6:	20 3d       	sub	sp,12
80010bf8:	4c f6       	lddpc	r6,80010d34 <rc_user_channels+0x144>
80010bfa:	1e 26       	rsub	r6,pc
80010bfc:	ef 4c ff fc 	st.w	r7[-4],r12
80010c00:	ef 4b ff f8 	st.w	r7[-8],r11
80010c04:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80010c08:	ee fc ff fc 	ld.w	r12,r7[-4]
80010c0c:	c3 af       	rcall	80010a80 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010c0e:	c9 fe       	rcall	8001094c <get_thrust_from_remote>
80010c10:	18 98       	mov	r8,r12
80010c12:	10 9c       	mov	r12,r8
80010c14:	f0 16 00 02 	mcall	r6[8]
80010c18:	30 05       	mov	r5,0
80010c1a:	e0 68 66 66 	mov	r8,26214
80010c1e:	ea 18 66 66 	orh	r8,0x6666
80010c22:	e0 69 66 66 	mov	r9,26214
80010c26:	ea 19 bf ee 	orh	r9,0xbfee
80010c2a:	f0 16 00 1e 	mcall	r6[120]
80010c2e:	18 98       	mov	r8,r12
80010c30:	58 08       	cp.w	r8,0
80010c32:	c0 20       	breq	80010c36 <rc_user_channels+0x46>
80010c34:	30 15       	mov	r5,1
80010c36:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010c3a:	c2 90       	breq	80010c8c <rc_user_channels+0x9c>
80010c3c:	c6 8e       	rcall	8001090c <get_yaw_from_remote>
80010c3e:	18 98       	mov	r8,r12
80010c40:	10 9c       	mov	r12,r8
80010c42:	f0 16 00 02 	mcall	r6[8]
80010c46:	14 98       	mov	r8,r10
80010c48:	16 99       	mov	r9,r11
80010c4a:	30 05       	mov	r5,0
80010c4c:	e0 6a cc cd 	mov	r10,52429
80010c50:	ea 1a cc cc 	orh	r10,0xcccc
80010c54:	e0 6b cc cc 	mov	r11,52428
80010c58:	ea 1b 3f ec 	orh	r11,0x3fec
80010c5c:	f0 16 00 1e 	mcall	r6[120]
80010c60:	18 98       	mov	r8,r12
80010c62:	58 08       	cp.w	r8,0
80010c64:	c0 20       	breq	80010c68 <rc_user_channels+0x78>
80010c66:	30 15       	mov	r5,1
80010c68:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010c6c:	c1 00       	breq	80010c8c <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80010c6e:	fe cc 00 8e 	sub	r12,pc,142
80010c72:	f0 16 00 01 	mcall	r6[4]
80010c76:	c4 be       	rcall	8001090c <get_yaw_from_remote>
80010c78:	18 98       	mov	r8,r12
80010c7a:	30 2b       	mov	r11,2
80010c7c:	10 9c       	mov	r12,r8
80010c7e:	f0 16 02 0e 	mcall	r6[2104]
		*motorbool = 1;
80010c82:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010c86:	30 18       	mov	r8,1
80010c88:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010c8a:	c3 88       	rjmp	80010cfa <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80010c8c:	c6 0e       	rcall	8001094c <get_thrust_from_remote>
80010c8e:	18 98       	mov	r8,r12
80010c90:	10 9c       	mov	r12,r8
80010c92:	f0 16 00 02 	mcall	r6[8]
80010c96:	30 05       	mov	r5,0
80010c98:	e0 68 66 66 	mov	r8,26214
80010c9c:	ea 18 66 66 	orh	r8,0x6666
80010ca0:	e0 69 66 66 	mov	r9,26214
80010ca4:	ea 19 bf ee 	orh	r9,0xbfee
80010ca8:	f0 16 00 1e 	mcall	r6[120]
80010cac:	18 98       	mov	r8,r12
80010cae:	58 08       	cp.w	r8,0
80010cb0:	c0 20       	breq	80010cb4 <rc_user_channels+0xc4>
80010cb2:	30 15       	mov	r5,1
80010cb4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010cb8:	c1 d0       	breq	80010cf2 <rc_user_channels+0x102>
80010cba:	c2 9e       	rcall	8001090c <get_yaw_from_remote>
80010cbc:	18 98       	mov	r8,r12
80010cbe:	10 9c       	mov	r12,r8
80010cc0:	f0 16 00 02 	mcall	r6[8]
80010cc4:	30 05       	mov	r5,0
80010cc6:	e0 68 cc cd 	mov	r8,52429
80010cca:	ea 18 cc cc 	orh	r8,0xcccc
80010cce:	e0 69 cc cc 	mov	r9,52428
80010cd2:	ea 19 bf ec 	orh	r9,0xbfec
80010cd6:	f0 16 00 1e 	mcall	r6[120]
80010cda:	18 98       	mov	r8,r12
80010cdc:	58 08       	cp.w	r8,0
80010cde:	c0 20       	breq	80010ce2 <rc_user_channels+0xf2>
80010ce0:	30 15       	mov	r5,1
80010ce2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010ce6:	c0 60       	breq	80010cf2 <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
80010ce8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010cec:	3f f8       	mov	r8,-1
80010cee:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80010cf0:	c0 58       	rjmp	80010cfa <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
80010cf2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010cf6:	30 08       	mov	r8,0
80010cf8:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80010cfa:	f0 16 00 a9 	mcall	r6[676]
80010cfe:	18 98       	mov	r8,r12
80010d00:	5c 58       	castu.b	r8
80010d02:	5c 68       	casts.b	r8
80010d04:	5b f8       	cp.w	r8,-1
80010d06:	c0 b0       	breq	80010d1c <rc_user_channels+0x12c>
80010d08:	58 18       	cp.w	r8,1
80010d0a:	c0 40       	breq	80010d12 <rc_user_channels+0x122>
80010d0c:	5b e8       	cp.w	r8,-2
80010d0e:	c0 c0       	breq	80010d26 <rc_user_channels+0x136>
80010d10:	c0 f8       	rjmp	80010d2e <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
80010d12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010d16:	30 18       	mov	r8,1
80010d18:	b2 88       	st.b	r9[0x0],r8
		break;
80010d1a:	c0 a8       	rjmp	80010d2e <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
80010d1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010d20:	3f f8       	mov	r8,-1
80010d22:	b2 88       	st.b	r9[0x0],r8
		break;
80010d24:	c0 58       	rjmp	80010d2e <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
80010d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010d2a:	3f e8       	mov	r8,-2
80010d2c:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
80010d2e:	2f dd       	sub	sp,-12
80010d30:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010d34:	80 01       	ld.sh	r1,r0[0x0]
80010d36:	0a 7e       	tst	lr,r5
80010d38:	53 77       	stdsp	sp[0xdc],r7
80010d3a:	69 74       	ld.w	r4,r4[0x5c]
80010d3c:	63 68       	ld.w	r8,r1[0x58]
80010d3e:	69 6e       	ld.w	lr,r4[0x58]
80010d40:	67 20       	ld.w	r0,r3[0x48]
80010d42:	6f 6e       	ld.w	lr,r7[0x58]
80010d44:	20 74       	sub	r4,7
80010d46:	68 65       	ld.w	r5,r4[0x18]
80010d48:	20 6d       	sub	sp,24
80010d4a:	6f 74       	ld.w	r4,r7[0x5c]
80010d4c:	6f 72       	ld.w	r2,r7[0x5c]
80010d4e:	73 21       	ld.w	r1,r9[0x48]
80010d50:	0a 00       	add	r0,r5
80010d52:	00 00       	add	r0,r0
80010d54:	53 77       	stdsp	sp[0xdc],r7
80010d56:	69 74       	ld.w	r4,r4[0x5c]
80010d58:	63 68       	ld.w	r8,r1[0x58]
80010d5a:	65 73       	ld.w	r3,r2[0x5c]
80010d5c:	20 6e       	sub	lr,6
80010d5e:	6f 74       	ld.w	r4,r7[0x5c]
80010d60:	20 72       	sub	r2,7
80010d62:	65 61       	ld.w	r1,r2[0x58]
80010d64:	64 79       	ld.w	r9,r2[0x1c]
80010d66:	2c 20       	sub	r0,-62
80010d68:	62 6f       	ld.w	pc,r1[0x18]
80010d6a:	74 68       	ld.w	r8,r10[0x18]
80010d6c:	20 73       	sub	r3,7
80010d6e:	68 6f       	ld.w	pc,r4[0x18]
80010d70:	75 6c       	ld.w	r12,r10[0x58]
80010d72:	64 20       	ld.w	r0,r2[0x8]
80010d74:	62 65       	ld.w	r5,r1[0x18]
80010d76:	20 70       	sub	r0,7
80010d78:	75 73       	ld.w	r3,r10[0x5c]
80010d7a:	68 65       	ld.w	r5,r4[0x18]
80010d7c:	64 21       	ld.w	r1,r2[0x8]
80010d7e:	0a 00       	add	r0,r5
80010d80:	53 77       	stdsp	sp[0xdc],r7
80010d82:	69 74       	ld.w	r4,r4[0x5c]
80010d84:	63 68       	ld.w	r8,r1[0x58]
80010d86:	69 6e       	ld.w	lr,r4[0x58]
80010d88:	67 20       	ld.w	r0,r3[0x48]
80010d8a:	6f 66       	ld.w	r6,r7[0x58]
80010d8c:	66 20       	ld.w	r0,r3[0x8]
80010d8e:	6d 6f       	ld.w	pc,r6[0x58]
80010d90:	74 6f       	ld.w	pc,r10[0x18]
80010d92:	72 73       	ld.w	r3,r9[0x1c]
80010d94:	21 0a       	sub	r10,16
	...

80010d98 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
80010d98:	eb cd 40 c0 	pushm	r6-r7,lr
80010d9c:	1a 97       	mov	r7,sp
80010d9e:	20 1d       	sub	sp,4
80010da0:	fe f6 03 9c 	ld.w	r6,pc[924]
80010da4:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
80010da6:	30 08       	mov	r8,0
80010da8:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80010dac:	30 08       	mov	r8,0
80010dae:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
80010db2:	30 08       	mov	r8,0
80010db4:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
80010db8:	30 2c       	mov	r12,2
80010dba:	f0 16 01 ca 	mcall	r6[1832]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
80010dbe:	ee ca 00 03 	sub	r10,r7,3
80010dc2:	ee c9 00 02 	sub	r9,r7,2
80010dc6:	ee c8 00 01 	sub	r8,r7,1
80010dca:	12 9b       	mov	r11,r9
80010dcc:	10 9c       	mov	r12,r8
80010dce:	f0 16 01 56 	mcall	r6[1368]
	
	switch(centralData->mav_state)
80010dd2:	ec f8 00 00 	ld.w	r8,r6[0]
80010dd6:	70 08       	ld.w	r8,r8[0x0]
80010dd8:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80010ddc:	58 48       	cp.w	r8,4
80010dde:	c6 50       	breq	80010ea8 <set_mav_mode_n_state+0x110>
80010de0:	e0 89 00 09 	brgt	80010df2 <set_mav_mode_n_state+0x5a>
80010de4:	58 28       	cp.w	r8,2
80010de6:	e0 80 01 a2 	breq	8001112a <set_mav_mode_n_state+0x392>
80010dea:	58 38       	cp.w	r8,3
80010dec:	c0 b0       	breq	80010e02 <set_mav_mode_n_state+0x6a>
80010dee:	e0 8f 01 a3 	bral	80011134 <set_mav_mode_n_state+0x39c>
80010df2:	58 58       	cp.w	r8,5
80010df4:	e0 80 00 fa 	breq	80010fe8 <set_mav_mode_n_state+0x250>
80010df8:	58 68       	cp.w	r8,6
80010dfa:	e0 80 01 70 	breq	800110da <set_mav_mode_n_state+0x342>
80010dfe:	e0 8f 01 9b 	bral	80011134 <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
80010e02:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010e06:	30 18       	mov	r8,1
80010e08:	f0 09 18 00 	cp.b	r9,r8
80010e0c:	e0 81 01 91 	brne	8001112e <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
80010e10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010e14:	58 18       	cp.w	r8,1
80010e16:	c3 70       	breq	80010e84 <set_mav_mode_n_state+0xec>
80010e18:	e0 89 00 06 	brgt	80010e24 <set_mav_mode_n_state+0x8c>
80010e1c:	58 08       	cp.w	r8,0
80010e1e:	c0 90       	breq	80010e30 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010e20:	e0 8f 01 8a 	bral	80011134 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
80010e24:	58 28       	cp.w	r8,2
80010e26:	c3 40       	breq	80010e8e <set_mav_mode_n_state+0xf6>
80010e28:	58 38       	cp.w	r8,3
80010e2a:	c3 70       	breq	80010e98 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010e2c:	e0 8f 01 84 	bral	80011134 <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
80010e30:	fe cc 00 f8 	sub	r12,pc,248
80010e34:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80010e38:	ec f8 00 00 	ld.w	r8,r6[0]
80010e3c:	70 08       	ld.w	r8,r8[0x0]
80010e3e:	f0 ca f4 f8 	sub	r10,r8,-2824
80010e42:	ec f8 00 00 	ld.w	r8,r6[0]
80010e46:	70 08       	ld.w	r8,r8[0x0]
80010e48:	f0 c9 ef 3c 	sub	r9,r8,-4292
80010e4c:	ec f8 00 00 	ld.w	r8,r6[0]
80010e50:	70 08       	ld.w	r8,r8[0x0]
80010e52:	f0 c8 f2 c4 	sub	r8,r8,-3388
80010e56:	12 9b       	mov	r11,r9
80010e58:	10 9c       	mov	r12,r8
80010e5a:	f0 16 02 0a 	mcall	r6[2088]
						centralData->controls.run_mode = MOTORS_ON;
80010e5e:	ec f8 00 00 	ld.w	r8,r6[0]
80010e62:	70 08       	ld.w	r8,r8[0x0]
80010e64:	30 19       	mov	r9,1
80010e66:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
80010e6a:	ec f8 00 00 	ld.w	r8,r6[0]
80010e6e:	70 09       	ld.w	r9,r8[0x0]
80010e70:	30 48       	mov	r8,4
80010e72:	f3 68 10 bd 	st.b	r9[4285],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
80010e76:	ec f8 00 00 	ld.w	r8,r6[0]
80010e7a:	70 09       	ld.w	r9,r8[0x0]
80010e7c:	3c 08       	mov	r8,-64
80010e7e:	f3 68 10 bc 	st.b	r9[4284],r8
						break;
80010e82:	c1 18       	rjmp	80010ea4 <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e84:	fe cc 01 30 	sub	r12,pc,304
80010e88:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80010e8c:	c0 c8       	rjmp	80010ea4 <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e8e:	fe cc 01 3a 	sub	r12,pc,314
80010e92:	f0 16 00 01 	mcall	r6[4]
						break;
80010e96:	c0 78       	rjmp	80010ea4 <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e98:	fe cc 01 44 	sub	r12,pc,324
80010e9c:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
80010ea0:	e0 8f 01 4a 	bral	80011134 <set_mav_mode_n_state+0x39c>
80010ea4:	e0 8f 01 48 	bral	80011134 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
80010ea8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010eac:	58 18       	cp.w	r8,1
80010eae:	c1 80       	breq	80010ede <set_mav_mode_n_state+0x146>
80010eb0:	e0 89 00 05 	brgt	80010eba <set_mav_mode_n_state+0x122>
80010eb4:	58 08       	cp.w	r8,0
80010eb6:	c0 70       	breq	80010ec4 <set_mav_mode_n_state+0x12c>
80010eb8:	c2 d8       	rjmp	80010f12 <set_mav_mode_n_state+0x17a>
80010eba:	58 28       	cp.w	r8,2
80010ebc:	c1 e0       	breq	80010ef8 <set_mav_mode_n_state+0x160>
80010ebe:	58 38       	cp.w	r8,3
80010ec0:	c2 30       	breq	80010f06 <set_mav_mode_n_state+0x16e>
80010ec2:	c2 88       	rjmp	80010f12 <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
80010ec4:	ec f8 00 00 	ld.w	r8,r6[0]
80010ec8:	70 09       	ld.w	r9,r8[0x0]
80010eca:	30 08       	mov	r8,0
80010ecc:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80010ed0:	ec f8 00 00 	ld.w	r8,r6[0]
80010ed4:	70 09       	ld.w	r9,r8[0x0]
80010ed6:	3c 08       	mov	r8,-64
80010ed8:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010edc:	c1 b8       	rjmp	80010f12 <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
80010ede:	ec f8 00 00 	ld.w	r8,r6[0]
80010ee2:	70 09       	ld.w	r9,r8[0x0]
80010ee4:	30 08       	mov	r8,0
80010ee6:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80010eea:	ec f8 00 00 	ld.w	r8,r6[0]
80010eee:	70 09       	ld.w	r9,r8[0x0]
80010ef0:	3d 08       	mov	r8,-48
80010ef2:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010ef6:	c0 e8       	rjmp	80010f12 <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80010ef8:	ec f8 00 00 	ld.w	r8,r6[0]
80010efc:	70 09       	ld.w	r9,r8[0x0]
80010efe:	3d 88       	mov	r8,-40
80010f00:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80010f04:	c0 78       	rjmp	80010f12 <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80010f06:	ec f8 00 00 	ld.w	r8,r6[0]
80010f0a:	70 09       	ld.w	r9,r8[0x0]
80010f0c:	3d c8       	mov	r8,-36
80010f0e:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			
			switch (centralData->mav_mode)
80010f12:	ec f8 00 00 	ld.w	r8,r6[0]
80010f16:	70 08       	ld.w	r8,r8[0x0]
80010f18:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80010f1c:	e0 48 00 d0 	cp.w	r8,208
80010f20:	c1 50       	breq	80010f4a <set_mav_mode_n_state+0x1b2>
80010f22:	e0 89 00 06 	brgt	80010f2e <set_mav_mode_n_state+0x196>
80010f26:	e0 48 00 c0 	cp.w	r8,192
80010f2a:	c0 90       	breq	80010f3c <set_mav_mode_n_state+0x1a4>
80010f2c:	c2 88       	rjmp	80010f7c <set_mav_mode_n_state+0x1e4>
80010f2e:	e0 48 00 d8 	cp.w	r8,216
80010f32:	c1 30       	breq	80010f58 <set_mav_mode_n_state+0x1c0>
80010f34:	e0 48 00 dc 	cp.w	r8,220
80010f38:	c1 30       	breq	80010f5e <set_mav_mode_n_state+0x1c6>
80010f3a:	c2 18       	rjmp	80010f7c <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
80010f3c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f40:	70 09       	ld.w	r9,r8[0x0]
80010f42:	30 08       	mov	r8,0
80010f44:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
80010f48:	c1 a8       	rjmp	80010f7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
80010f4a:	ec f8 00 00 	ld.w	r8,r6[0]
80010f4e:	70 09       	ld.w	r9,r8[0x0]
80010f50:	30 08       	mov	r8,0
80010f52:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
80010f56:	c1 38       	rjmp	80010f7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
80010f58:	f0 16 01 bf 	mcall	r6[1788]
					break;
80010f5c:	c1 08       	rjmp	80010f7c <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
80010f5e:	ec f8 00 00 	ld.w	r8,r6[0]
80010f62:	70 08       	ld.w	r8,r8[0x0]
80010f64:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80010f68:	58 08       	cp.w	r8,0
80010f6a:	c0 70       	breq	80010f78 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80010f6c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f70:	70 09       	ld.w	r9,r8[0x0]
80010f72:	30 08       	mov	r8,0
80010f74:	f3 68 10 b7 	st.b	r9[4279],r8
					}
					waypoint_navigation_handler();
80010f78:	f0 16 02 0f 	mcall	r6[2108]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80010f7c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010f80:	3f f8       	mov	r8,-1
80010f82:	f0 09 18 00 	cp.b	r9,r8
80010f86:	c1 71       	brne	80010fb4 <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
80010f88:	fe cc 02 08 	sub	r12,pc,520
80010f8c:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80010f90:	ec f8 00 00 	ld.w	r8,r6[0]
80010f94:	70 08       	ld.w	r8,r8[0x0]
80010f96:	30 09       	mov	r9,0
80010f98:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80010f9c:	ec f8 00 00 	ld.w	r8,r6[0]
80010fa0:	70 09       	ld.w	r9,r8[0x0]
80010fa2:	30 38       	mov	r8,3
80010fa4:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80010fa8:	ec f8 00 00 	ld.w	r8,r6[0]
80010fac:	70 09       	ld.w	r9,r8[0x0]
80010fae:	34 08       	mov	r8,64
80010fb0:	f3 68 10 bc 	st.b	r9[4284],r8
			}
		
			switch (RC_check)
80010fb4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80010fb8:	5c 68       	casts.b	r8
80010fba:	5b f8       	cp.w	r8,-1
80010fbc:	c0 70       	breq	80010fca <set_mav_mode_n_state+0x232>
80010fbe:	58 18       	cp.w	r8,1
80010fc0:	c0 40       	breq	80010fc8 <set_mav_mode_n_state+0x230>
80010fc2:	5b e8       	cp.w	r8,-2
80010fc4:	c0 a0       	breq	80010fd8 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
80010fc6:	cb 78       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
80010fc8:	c0 f8       	rjmp	80010fe6 <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
80010fca:	ec f8 00 00 	ld.w	r8,r6[0]
80010fce:	70 09       	ld.w	r9,r8[0x0]
80010fd0:	30 58       	mov	r8,5
80010fd2:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
80010fd6:	c0 88       	rjmp	80010fe6 <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
80010fd8:	ec f8 00 00 	ld.w	r8,r6[0]
80010fdc:	70 09       	ld.w	r9,r8[0x0]
80010fde:	30 58       	mov	r8,5
80010fe0:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
			}
			break;
80010fe4:	ca 88       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
80010fe6:	ca 78       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
80010fe8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010fec:	58 18       	cp.w	r8,1
80010fee:	c1 20       	breq	80011012 <set_mav_mode_n_state+0x27a>
80010ff0:	e0 89 00 05 	brgt	80010ffa <set_mav_mode_n_state+0x262>
80010ff4:	58 08       	cp.w	r8,0
80010ff6:	c0 70       	breq	80011004 <set_mav_mode_n_state+0x26c>
80010ff8:	c2 18       	rjmp	8001103a <set_mav_mode_n_state+0x2a2>
80010ffa:	58 28       	cp.w	r8,2
80010ffc:	c1 20       	breq	80011020 <set_mav_mode_n_state+0x288>
80010ffe:	58 38       	cp.w	r8,3
80011000:	c1 70       	breq	8001102e <set_mav_mode_n_state+0x296>
80011002:	c1 c8       	rjmp	8001103a <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80011004:	ec f8 00 00 	ld.w	r8,r6[0]
80011008:	70 09       	ld.w	r9,r8[0x0]
8001100a:	3c 08       	mov	r8,-64
8001100c:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011010:	c1 58       	rjmp	8001103a <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80011012:	ec f8 00 00 	ld.w	r8,r6[0]
80011016:	70 09       	ld.w	r9,r8[0x0]
80011018:	3d 08       	mov	r8,-48
8001101a:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001101e:	c0 e8       	rjmp	8001103a <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011020:	ec f8 00 00 	ld.w	r8,r6[0]
80011024:	70 09       	ld.w	r9,r8[0x0]
80011026:	3d 88       	mov	r8,-40
80011028:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001102c:	c0 78       	rjmp	8001103a <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8001102e:	ec f8 00 00 	ld.w	r8,r6[0]
80011032:	70 09       	ld.w	r9,r8[0x0]
80011034:	3d c8       	mov	r8,-36
80011036:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			if (motor_switch == -1)
8001103a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8001103e:	3f f8       	mov	r8,-1
80011040:	f0 09 18 00 	cp.b	r9,r8
80011044:	c1 71       	brne	80011072 <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
80011046:	fe cc 02 c6 	sub	r12,pc,710
8001104a:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
8001104e:	ec f8 00 00 	ld.w	r8,r6[0]
80011052:	70 08       	ld.w	r8,r8[0x0]
80011054:	30 09       	mov	r9,0
80011056:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
8001105a:	ec f8 00 00 	ld.w	r8,r6[0]
8001105e:	70 09       	ld.w	r9,r8[0x0]
80011060:	30 38       	mov	r8,3
80011062:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011066:	ec f8 00 00 	ld.w	r8,r6[0]
8001106a:	70 09       	ld.w	r9,r8[0x0]
8001106c:	34 08       	mov	r8,64
8001106e:	f3 68 10 bc 	st.b	r9[4284],r8
			}
			
			switch (centralData->mav_mode)
80011072:	ec f8 00 00 	ld.w	r8,r6[0]
80011076:	70 08       	ld.w	r8,r8[0x0]
80011078:	f1 38 10 bc 	ld.ub	r8,r8[4284]
8001107c:	e0 48 00 d8 	cp.w	r8,216
80011080:	c0 40       	breq	80011088 <set_mav_mode_n_state+0x2f0>
80011082:	e0 48 00 dc 	cp.w	r8,220
80011086:	c0 31       	brne	8001108c <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
80011088:	f0 16 01 db 	mcall	r6[1900]
					break;
			}
			
			switch (RC_check)
8001108c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011090:	5c 68       	casts.b	r8
80011092:	5b f8       	cp.w	r8,-1
80011094:	c1 30       	breq	800110ba <set_mav_mode_n_state+0x322>
80011096:	58 18       	cp.w	r8,1
80011098:	c0 40       	breq	800110a0 <set_mav_mode_n_state+0x308>
8001109a:	5b e8       	cp.w	r8,-2
8001109c:	c1 00       	breq	800110bc <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8001109e:	c4 b8       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
800110a0:	ec f8 00 00 	ld.w	r8,r6[0]
800110a4:	70 09       	ld.w	r9,r8[0x0]
800110a6:	30 48       	mov	r8,4
800110a8:	f3 68 10 bd 	st.b	r9[4285],r8
					centralData->critical_init = false;
800110ac:	ec f8 00 00 	ld.w	r8,r6[0]
800110b0:	70 09       	ld.w	r9,r8[0x0]
800110b2:	30 08       	mov	r8,0
800110b4:	f3 68 10 b9 	st.b	r9[4281],r8
					break;
800110b8:	c1 08       	rjmp	800110d8 <set_mav_mode_n_state+0x340>
				case -1:
					break;
800110ba:	c0 f8       	rjmp	800110d8 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
800110bc:	ec f8 00 00 	ld.w	r8,r6[0]
800110c0:	70 08       	ld.w	r8,r8[0x0]
800110c2:	f1 38 10 b8 	ld.ub	r8,r8[4280]
800110c6:	58 08       	cp.w	r8,0
800110c8:	c3 50       	breq	80011132 <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
800110ca:	ec f8 00 00 	ld.w	r8,r6[0]
800110ce:	70 09       	ld.w	r9,r8[0x0]
800110d0:	30 68       	mov	r8,6
800110d2:	f3 68 10 bd 	st.b	r9[4285],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
800110d6:	c2 f8       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
800110d8:	c2 e8       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
800110da:	ec f8 00 00 	ld.w	r8,r6[0]
800110de:	70 08       	ld.w	r8,r8[0x0]
800110e0:	f0 fa 0d a4 	ld.w	r10,r8[3492]
800110e4:	30 18       	mov	r8,1
800110e6:	fc 19 3f 80 	movh	r9,0x3f80
800110ea:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800110ee:	e0 8c 00 03 	brvs	800110f4 <set_mav_mode_n_state+0x35c>
800110f2:	c0 25       	brlt	800110f6 <set_mav_mode_n_state+0x35e>
800110f4:	30 08       	mov	r8,0
800110f6:	5c 58       	castu.b	r8
800110f8:	c1 e0       	breq	80011134 <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
800110fa:	ec f8 00 00 	ld.w	r8,r6[0]
800110fe:	70 09       	ld.w	r9,r8[0x0]
80011100:	34 08       	mov	r8,64
80011102:	f3 68 10 bc 	st.b	r9[4284],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011106:	ec f8 00 00 	ld.w	r8,r6[0]
8001110a:	70 08       	ld.w	r8,r8[0x0]
8001110c:	30 19       	mov	r9,1
8001110e:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
80011112:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011116:	5c 68       	casts.b	r8
80011118:	58 18       	cp.w	r8,1
8001111a:	c0 d1       	brne	80011134 <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
8001111c:	ec f8 00 00 	ld.w	r8,r6[0]
80011120:	70 09       	ld.w	r9,r8[0x0]
80011122:	30 38       	mov	r8,3
80011124:	f3 68 10 bd 	st.b	r9[4285],r8
80011128:	c0 68       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
8001112a:	d7 03       	nop
8001112c:	c0 48       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8001112e:	d7 03       	nop
80011130:	c0 28       	rjmp	80011134 <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011132:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
80011134:	2f fd       	sub	sp,-4
80011136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001113a:	00 00       	add	r0,r0
8001113c:	80 01       	ld.sh	r1,r0[0x0]
8001113e:	0c 28       	rsub	r8,r6

80011140 <run_stabilisation>:

task_return_t run_stabilisation() {
80011140:	eb cd 40 e0 	pushm	r5-r7,lr
80011144:	1a 97       	mov	r7,sp
80011146:	20 cd       	sub	sp,48
80011148:	fe f6 04 18 	ld.w	r6,pc[1048]
8001114c:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
8001114e:	ec f8 00 00 	ld.w	r8,r6[0]
80011152:	70 08       	ld.w	r8,r8[0x0]
80011154:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011158:	58 18       	cp.w	r8,1
8001115a:	c2 d1       	brne	800111b4 <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
8001115c:	ec f8 00 00 	ld.w	r8,r6[0]
80011160:	70 08       	ld.w	r8,r8[0x0]
80011162:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011166:	ec f8 00 00 	ld.w	r8,r6[0]
8001116a:	70 08       	ld.w	r8,r8[0x0]
8001116c:	10 9a       	mov	r10,r8
8001116e:	ec f8 00 00 	ld.w	r8,r6[0]
80011172:	70 08       	ld.w	r8,r8[0x0]
80011174:	f0 cb f9 14 	sub	r11,r8,-1772
80011178:	ec f8 00 00 	ld.w	r8,r6[0]
8001117c:	70 08       	ld.w	r8,r8[0x0]
8001117e:	f0 c8 f4 58 	sub	r8,r8,-2984
80011182:	10 9c       	mov	r12,r8
80011184:	f0 16 01 9e 	mcall	r6[1656]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
80011188:	ec f8 00 00 	ld.w	r8,r6[0]
8001118c:	70 08       	ld.w	r8,r8[0x0]
8001118e:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011192:	ec f8 00 00 	ld.w	r8,r6[0]
80011196:	70 08       	ld.w	r8,r8[0x0]
80011198:	f0 ca ef 3c 	sub	r10,r8,-4292
8001119c:	ec f8 00 00 	ld.w	r8,r6[0]
800111a0:	70 08       	ld.w	r8,r8[0x0]
800111a2:	f0 cb f2 c4 	sub	r11,r8,-3388
800111a6:	ec f8 00 00 	ld.w	r8,r6[0]
800111aa:	70 08       	ld.w	r8,r8[0x0]
800111ac:	10 9c       	mov	r12,r8
800111ae:	f0 16 00 98 	mcall	r6[608]
800111b2:	c1 c8       	rjmp	800111ea <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
800111b4:	ec f8 00 00 	ld.w	r8,r6[0]
800111b8:	70 08       	ld.w	r8,r8[0x0]
800111ba:	10 9c       	mov	r12,r8
800111bc:	f0 16 00 97 	mcall	r6[604]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800111c0:	ec f8 00 00 	ld.w	r8,r6[0]
800111c4:	70 08       	ld.w	r8,r8[0x0]
800111c6:	f0 c9 f4 f8 	sub	r9,r8,-2824
800111ca:	ec f8 00 00 	ld.w	r8,r6[0]
800111ce:	70 08       	ld.w	r8,r8[0x0]
800111d0:	f0 ca ef 3c 	sub	r10,r8,-4292
800111d4:	ec f8 00 00 	ld.w	r8,r6[0]
800111d8:	70 08       	ld.w	r8,r8[0x0]
800111da:	f0 cb f2 c4 	sub	r11,r8,-3388
800111de:	ec f8 00 00 	ld.w	r8,r6[0]
800111e2:	70 08       	ld.w	r8,r8[0x0]
800111e4:	10 9c       	mov	r12,r8
800111e6:	f0 16 00 98 	mcall	r6[608]
	}

	switch(centralData->mav_mode)
800111ea:	ec f8 00 00 	ld.w	r8,r6[0]
800111ee:	70 08       	ld.w	r8,r8[0x0]
800111f0:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800111f4:	e0 48 00 5c 	cp.w	r8,92
800111f8:	e0 80 01 73 	breq	800114de <run_stabilisation+0x39e>
800111fc:	e0 89 00 17 	brgt	8001122a <run_stabilisation+0xea>
80011200:	e0 48 00 40 	cp.w	r8,64
80011204:	e0 80 01 6d 	breq	800114de <run_stabilisation+0x39e>
80011208:	e0 89 00 07 	brgt	80011216 <run_stabilisation+0xd6>
8001120c:	58 08       	cp.w	r8,0
8001120e:	e0 80 01 68 	breq	800114de <run_stabilisation+0x39e>
80011212:	e0 8f 01 95 	bral	8001153c <run_stabilisation+0x3fc>
80011216:	e0 48 00 50 	cp.w	r8,80
8001121a:	e0 80 01 62 	breq	800114de <run_stabilisation+0x39e>
8001121e:	e0 48 00 58 	cp.w	r8,88
80011222:	e0 80 01 5e 	breq	800114de <run_stabilisation+0x39e>
80011226:	e0 8f 01 8b 	bral	8001153c <run_stabilisation+0x3fc>
8001122a:	e0 48 00 d0 	cp.w	r8,208
8001122e:	c5 a0       	breq	800112e2 <run_stabilisation+0x1a2>
80011230:	e0 89 00 07 	brgt	8001123e <run_stabilisation+0xfe>
80011234:	e0 48 00 c0 	cp.w	r8,192
80011238:	c0 d0       	breq	80011252 <run_stabilisation+0x112>
8001123a:	e0 8f 01 81 	bral	8001153c <run_stabilisation+0x3fc>
8001123e:	e0 48 00 d8 	cp.w	r8,216
80011242:	e0 80 00 c2 	breq	800113c6 <run_stabilisation+0x286>
80011246:	e0 48 00 dc 	cp.w	r8,220
8001124a:	e0 80 01 04 	breq	80011452 <run_stabilisation+0x312>
8001124e:	e0 8f 01 77 	bral	8001153c <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80011252:	ec f8 00 00 	ld.w	r8,r6[0]
80011256:	70 05       	ld.w	r5,r8[0x0]
80011258:	ee c8 00 30 	sub	r8,r7,48
8001125c:	10 9c       	mov	r12,r8
8001125e:	fe b0 fb 97 	rcall	8001098c <get_command_from_remote>
80011262:	ea c8 fe b8 	sub	r8,r5,-328
80011266:	ee c9 00 30 	sub	r9,r7,48
8001126a:	f0 ca 00 00 	sub	r10,r8,0
8001126e:	f2 cb 00 00 	sub	r11,r9,0
80011272:	76 0c       	ld.w	r12,r11[0x0]
80011274:	95 0c       	st.w	r10[0x0],r12
80011276:	76 1c       	ld.w	r12,r11[0x4]
80011278:	95 1c       	st.w	r10[0x4],r12
8001127a:	76 2c       	ld.w	r12,r11[0x8]
8001127c:	95 2c       	st.w	r10[0x8],r12
8001127e:	76 3b       	ld.w	r11,r11[0xc]
80011280:	95 3b       	st.w	r10[0xc],r11
80011282:	f0 ca ff f0 	sub	r10,r8,-16
80011286:	f2 cb ff f0 	sub	r11,r9,-16
8001128a:	76 0c       	ld.w	r12,r11[0x0]
8001128c:	95 0c       	st.w	r10[0x0],r12
8001128e:	76 1c       	ld.w	r12,r11[0x4]
80011290:	95 1c       	st.w	r10[0x4],r12
80011292:	76 2c       	ld.w	r12,r11[0x8]
80011294:	95 2c       	st.w	r10[0x8],r12
80011296:	76 3b       	ld.w	r11,r11[0xc]
80011298:	95 3b       	st.w	r10[0xc],r11
8001129a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001129e:	f0 eb 00 20 	st.d	r8[32],r10
800112a2:	72 a9       	ld.w	r9,r9[0x28]
800112a4:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
800112a6:	ec f8 00 00 	ld.w	r8,r6[0]
800112aa:	70 08       	ld.w	r8,r8[0x0]
800112ac:	30 09       	mov	r9,0
800112ae:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
800112b2:	ec f8 00 00 	ld.w	r8,r6[0]
800112b6:	70 08       	ld.w	r8,r8[0x0]
800112b8:	30 19       	mov	r9,1
800112ba:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800112be:	ec f8 00 00 	ld.w	r8,r6[0]
800112c2:	70 08       	ld.w	r8,r8[0x0]
800112c4:	f0 ca fe b8 	sub	r10,r8,-328
800112c8:	ec f8 00 00 	ld.w	r8,r6[0]
800112cc:	70 08       	ld.w	r8,r8[0x0]
800112ce:	f0 c9 f2 c4 	sub	r9,r8,-3388
800112d2:	ec f8 00 00 	ld.w	r8,r6[0]
800112d6:	70 08       	ld.w	r8,r8[0x0]
800112d8:	12 9b       	mov	r11,r9
800112da:	10 9c       	mov	r12,r8
800112dc:	f0 16 00 99 	mcall	r6[612]
			break;
800112e0:	c2 e9       	rjmp	8001153c <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
800112e2:	ec f8 00 00 	ld.w	r8,r6[0]
800112e6:	70 05       	ld.w	r5,r8[0x0]
800112e8:	ee c8 00 30 	sub	r8,r7,48
800112ec:	10 9c       	mov	r12,r8
800112ee:	fe b0 fb 4f 	rcall	8001098c <get_command_from_remote>
800112f2:	ea c8 fe b8 	sub	r8,r5,-328
800112f6:	ee c9 00 30 	sub	r9,r7,48
800112fa:	f0 ca 00 00 	sub	r10,r8,0
800112fe:	f2 cb 00 00 	sub	r11,r9,0
80011302:	76 0c       	ld.w	r12,r11[0x0]
80011304:	95 0c       	st.w	r10[0x0],r12
80011306:	76 1c       	ld.w	r12,r11[0x4]
80011308:	95 1c       	st.w	r10[0x4],r12
8001130a:	76 2c       	ld.w	r12,r11[0x8]
8001130c:	95 2c       	st.w	r10[0x8],r12
8001130e:	76 3b       	ld.w	r11,r11[0xc]
80011310:	95 3b       	st.w	r10[0xc],r11
80011312:	f0 ca ff f0 	sub	r10,r8,-16
80011316:	f2 cb ff f0 	sub	r11,r9,-16
8001131a:	76 0c       	ld.w	r12,r11[0x0]
8001131c:	95 0c       	st.w	r10[0x0],r12
8001131e:	76 1c       	ld.w	r12,r11[0x4]
80011320:	95 1c       	st.w	r10[0x4],r12
80011322:	76 2c       	ld.w	r12,r11[0x8]
80011324:	95 2c       	st.w	r10[0x8],r12
80011326:	76 3b       	ld.w	r11,r11[0xc]
80011328:	95 3b       	st.w	r10[0xc],r11
8001132a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001132e:	f0 eb 00 20 	st.d	r8[32],r10
80011332:	72 a9       	ld.w	r9,r9[0x28]
80011334:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80011336:	ec f8 00 00 	ld.w	r8,r6[0]
8001133a:	70 08       	ld.w	r8,r8[0x0]
8001133c:	30 09       	mov	r9,0
8001133e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
80011342:	ec f8 00 00 	ld.w	r8,r6[0]
80011346:	70 08       	ld.w	r8,r8[0x0]
80011348:	30 09       	mov	r9,0
8001134a:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
8001134e:	ec f8 00 00 	ld.w	r8,r6[0]
80011352:	70 08       	ld.w	r8,r8[0x0]
80011354:	ec f9 00 00 	ld.w	r9,r6[0]
80011358:	72 09       	ld.w	r9,r9[0x0]
8001135a:	f2 fa 01 4c 	ld.w	r10,r9[332]
8001135e:	fc 19 c1 20 	movh	r9,0xc120
80011362:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011366:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
8001136a:	ec f8 00 00 	ld.w	r8,r6[0]
8001136e:	70 08       	ld.w	r8,r8[0x0]
80011370:	ec f9 00 00 	ld.w	r9,r6[0]
80011374:	72 09       	ld.w	r9,r9[0x0]
80011376:	f2 fa 01 48 	ld.w	r10,r9[328]
8001137a:	fc 19 41 20 	movh	r9,0x4120
8001137e:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011382:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
80011386:	ec f8 00 00 	ld.w	r8,r6[0]
8001138a:	70 08       	ld.w	r8,r8[0x0]
8001138c:	ec f9 00 00 	ld.w	r9,r6[0]
80011390:	72 09       	ld.w	r9,r9[0x0]
80011392:	f2 fa 01 54 	ld.w	r10,r9[340]
80011396:	fc 19 bf c0 	movh	r9,0xbfc0
8001139a:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001139e:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800113a2:	ec f8 00 00 	ld.w	r8,r6[0]
800113a6:	70 08       	ld.w	r8,r8[0x0]
800113a8:	f0 ca fe b8 	sub	r10,r8,-328
800113ac:	ec f8 00 00 	ld.w	r8,r6[0]
800113b0:	70 08       	ld.w	r8,r8[0x0]
800113b2:	f0 c9 f2 c4 	sub	r9,r8,-3388
800113b6:	ec f8 00 00 	ld.w	r8,r6[0]
800113ba:	70 08       	ld.w	r8,r8[0x0]
800113bc:	12 9b       	mov	r11,r9
800113be:	10 9c       	mov	r12,r8
800113c0:	f0 16 00 99 	mcall	r6[612]
			
			break;
800113c4:	cb c8       	rjmp	8001153c <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
800113c6:	ec f8 00 00 	ld.w	r8,r6[0]
800113ca:	70 08       	ld.w	r8,r8[0x0]
800113cc:	ec f9 00 00 	ld.w	r9,r6[0]
800113d0:	72 09       	ld.w	r9,r9[0x0]
800113d2:	f0 c8 fe b8 	sub	r8,r8,-328
800113d6:	f2 c9 fe 8c 	sub	r9,r9,-372
800113da:	f0 ca 00 00 	sub	r10,r8,0
800113de:	f2 cb 00 00 	sub	r11,r9,0
800113e2:	76 0c       	ld.w	r12,r11[0x0]
800113e4:	95 0c       	st.w	r10[0x0],r12
800113e6:	76 1c       	ld.w	r12,r11[0x4]
800113e8:	95 1c       	st.w	r10[0x4],r12
800113ea:	76 2c       	ld.w	r12,r11[0x8]
800113ec:	95 2c       	st.w	r10[0x8],r12
800113ee:	76 3b       	ld.w	r11,r11[0xc]
800113f0:	95 3b       	st.w	r10[0xc],r11
800113f2:	f0 ca ff f0 	sub	r10,r8,-16
800113f6:	f2 cb ff f0 	sub	r11,r9,-16
800113fa:	76 0c       	ld.w	r12,r11[0x0]
800113fc:	95 0c       	st.w	r10[0x0],r12
800113fe:	76 1c       	ld.w	r12,r11[0x4]
80011400:	95 1c       	st.w	r10[0x4],r12
80011402:	76 2c       	ld.w	r12,r11[0x8]
80011404:	95 2c       	st.w	r10[0x8],r12
80011406:	76 3b       	ld.w	r11,r11[0xc]
80011408:	95 3b       	st.w	r10[0xc],r11
8001140a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001140e:	f0 eb 00 20 	st.d	r8[32],r10
80011412:	72 a9       	ld.w	r9,r9[0x28]
80011414:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80011416:	ec f8 00 00 	ld.w	r8,r6[0]
8001141a:	70 08       	ld.w	r8,r8[0x0]
8001141c:	30 09       	mov	r9,0
8001141e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80011422:	ec f8 00 00 	ld.w	r8,r6[0]
80011426:	70 08       	ld.w	r8,r8[0x0]
80011428:	30 19       	mov	r9,1
8001142a:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
8001142e:	ec f8 00 00 	ld.w	r8,r6[0]
80011432:	70 08       	ld.w	r8,r8[0x0]
80011434:	f0 ca fe b8 	sub	r10,r8,-328
80011438:	ec f8 00 00 	ld.w	r8,r6[0]
8001143c:	70 08       	ld.w	r8,r8[0x0]
8001143e:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011442:	ec f8 00 00 	ld.w	r8,r6[0]
80011446:	70 08       	ld.w	r8,r8[0x0]
80011448:	12 9b       	mov	r11,r9
8001144a:	10 9c       	mov	r12,r8
8001144c:	f0 16 00 99 	mcall	r6[612]
			break;
80011450:	c7 68       	rjmp	8001153c <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80011452:	ec f8 00 00 	ld.w	r8,r6[0]
80011456:	70 08       	ld.w	r8,r8[0x0]
80011458:	ec f9 00 00 	ld.w	r9,r6[0]
8001145c:	72 09       	ld.w	r9,r9[0x0]
8001145e:	f0 c8 fe b8 	sub	r8,r8,-328
80011462:	f2 c9 fe 8c 	sub	r9,r9,-372
80011466:	f0 ca 00 00 	sub	r10,r8,0
8001146a:	f2 cb 00 00 	sub	r11,r9,0
8001146e:	76 0c       	ld.w	r12,r11[0x0]
80011470:	95 0c       	st.w	r10[0x0],r12
80011472:	76 1c       	ld.w	r12,r11[0x4]
80011474:	95 1c       	st.w	r10[0x4],r12
80011476:	76 2c       	ld.w	r12,r11[0x8]
80011478:	95 2c       	st.w	r10[0x8],r12
8001147a:	76 3b       	ld.w	r11,r11[0xc]
8001147c:	95 3b       	st.w	r10[0xc],r11
8001147e:	f0 ca ff f0 	sub	r10,r8,-16
80011482:	f2 cb ff f0 	sub	r11,r9,-16
80011486:	76 0c       	ld.w	r12,r11[0x0]
80011488:	95 0c       	st.w	r10[0x0],r12
8001148a:	76 1c       	ld.w	r12,r11[0x4]
8001148c:	95 1c       	st.w	r10[0x4],r12
8001148e:	76 2c       	ld.w	r12,r11[0x8]
80011490:	95 2c       	st.w	r10[0x8],r12
80011492:	76 3b       	ld.w	r11,r11[0xc]
80011494:	95 3b       	st.w	r10[0xc],r11
80011496:	f2 ea 00 20 	ld.d	r10,r9[32]
8001149a:	f0 eb 00 20 	st.d	r8[32],r10
8001149e:	72 a9       	ld.w	r9,r9[0x28]
800114a0:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
800114a2:	ec f8 00 00 	ld.w	r8,r6[0]
800114a6:	70 08       	ld.w	r8,r8[0x0]
800114a8:	30 09       	mov	r9,0
800114aa:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
800114ae:	ec f8 00 00 	ld.w	r8,r6[0]
800114b2:	70 08       	ld.w	r8,r8[0x0]
800114b4:	30 29       	mov	r9,2
800114b6:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800114ba:	ec f8 00 00 	ld.w	r8,r6[0]
800114be:	70 08       	ld.w	r8,r8[0x0]
800114c0:	f0 ca fe b8 	sub	r10,r8,-328
800114c4:	ec f8 00 00 	ld.w	r8,r6[0]
800114c8:	70 08       	ld.w	r8,r8[0x0]
800114ca:	f0 c9 f2 c4 	sub	r9,r8,-3388
800114ce:	ec f8 00 00 	ld.w	r8,r6[0]
800114d2:	70 08       	ld.w	r8,r8[0x0]
800114d4:	12 9b       	mov	r11,r9
800114d6:	10 9c       	mov	r12,r8
800114d8:	f0 16 00 99 	mcall	r6[612]
			break;
800114dc:	c3 08       	rjmp	8001153c <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
800114de:	ec f8 00 00 	ld.w	r8,r6[0]
800114e2:	70 08       	ld.w	r8,r8[0x0]
800114e4:	30 09       	mov	r9,0
800114e6:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
800114ea:	30 08       	mov	r8,0
800114ec:	ef 48 ff fc 	st.w	r7[-4],r8
800114f0:	c2 18       	rjmp	80011532 <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
800114f2:	ec f8 00 00 	ld.w	r8,r6[0]
800114f6:	70 0a       	ld.w	r10,r8[0x0]
800114f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800114fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011500:	a5 68       	lsl	r8,0x4
80011502:	f4 08 00 08 	add	r8,r10,r8
80011506:	f0 c8 f9 14 	sub	r8,r8,-1772
8001150a:	ec fa 09 04 	ld.w	r10,r6[2308]
8001150e:	a5 69       	lsl	r9,0x4
80011510:	f4 09 00 09 	add	r9,r10,r9
80011514:	20 08       	sub	r8,0
80011516:	20 09       	sub	r9,0
80011518:	72 0a       	ld.w	r10,r9[0x0]
8001151a:	91 0a       	st.w	r8[0x0],r10
8001151c:	72 1a       	ld.w	r10,r9[0x4]
8001151e:	91 1a       	st.w	r8[0x4],r10
80011520:	72 2a       	ld.w	r10,r9[0x8]
80011522:	91 2a       	st.w	r8[0x8],r10
80011524:	72 39       	ld.w	r9,r9[0xc]
80011526:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80011528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001152c:	2f f8       	sub	r8,-1
8001152e:	ef 48 ff fc 	st.w	r7[-4],r8
80011532:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011536:	58 78       	cp.w	r8,7
80011538:	fe 9a ff dd 	brle	800114f2 <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
8001153c:	ec f8 00 00 	ld.w	r8,r6[0]
80011540:	70 08       	ld.w	r8,r8[0x0]
80011542:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011546:	58 18       	cp.w	r8,1
80011548:	c0 90       	breq	8001155a <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
8001154a:	ec f8 00 00 	ld.w	r8,r6[0]
8001154e:	70 08       	ld.w	r8,r8[0x0]
80011550:	f0 c8 f9 14 	sub	r8,r8,-1772
80011554:	10 9c       	mov	r12,r8
80011556:	f0 16 00 ab 	mcall	r6[684]
	}
		

}
8001155a:	2f 4d       	sub	sp,-48
8001155c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011560:	80 01       	ld.sh	r1,r0[0x0]
80011562:	0f d0       	ld.ub	r0,r7[0x5]

80011564 <gps_task>:

task_return_t gps_task() {
80011564:	eb cd 40 c0 	pushm	r6-r7,lr
80011568:	1a 97       	mov	r7,sp
8001156a:	20 1d       	sub	sp,4
8001156c:	49 16       	lddpc	r6,800115b0 <gps_task+0x4c>
8001156e:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80011570:	f0 16 00 0f 	mcall	r6[60]
80011574:	18 98       	mov	r8,r12
80011576:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
8001157a:	ec f8 00 00 	ld.w	r8,r6[0]
8001157e:	70 08       	ld.w	r8,r8[0x0]
80011580:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011584:	58 18       	cp.w	r8,1
80011586:	c1 01       	brne	800115a6 <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80011588:	ec f8 00 00 	ld.w	r8,r6[0]
8001158c:	70 08       	ld.w	r8,r8[0x0]
8001158e:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011592:	ec f8 00 00 	ld.w	r8,r6[0]
80011596:	70 08       	ld.w	r8,r8[0x0]
80011598:	f0 c8 f4 58 	sub	r8,r8,-2984
8001159c:	12 9b       	mov	r11,r9
8001159e:	10 9c       	mov	r12,r8
800115a0:	f0 16 01 4b 	mcall	r6[1324]
800115a4:	c0 38       	rjmp	800115aa <gps_task+0x46>
	} else {
		gps_update();
800115a6:	f0 16 01 ff 	mcall	r6[2044]
	}
}
800115aa:	2f fd       	sub	sp,-4
800115ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800115b0:	80 01       	ld.sh	r1,r0[0x0]
800115b2:	13 f2       	ld.ub	r2,r9[0x7]

800115b4 <run_estimator>:

task_return_t run_estimator()
{
800115b4:	eb cd 40 c0 	pushm	r6-r7,lr
800115b8:	1a 97       	mov	r7,sp
800115ba:	48 46       	lddpc	r6,800115c8 <run_estimator+0x14>
800115bc:	1e 26       	rsub	r6,pc
	estimator_loop();
800115be:	f0 16 01 68 	mcall	r6[1440]
}
800115c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800115c6:	00 00       	add	r0,r0
800115c8:	80 01       	ld.sh	r1,r0[0x0]
800115ca:	14 40       	or	r0,r10

800115cc <run_navigation_task>:

task_return_t run_navigation_task()
{
800115cc:	eb cd 40 c0 	pushm	r6-r7,lr
800115d0:	1a 97       	mov	r7,sp
800115d2:	20 1d       	sub	sp,4
800115d4:	fe f6 02 20 	ld.w	r6,pc[544]
800115d8:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
800115da:	ec f8 00 00 	ld.w	r8,r6[0]
800115de:	70 08       	ld.w	r8,r8[0x0]
800115e0:	f1 38 10 bd 	ld.ub	r8,r8[4285]
800115e4:	58 48       	cp.w	r8,4
800115e6:	c0 50       	breq	800115f0 <run_navigation_task+0x24>
800115e8:	58 58       	cp.w	r8,5
800115ea:	e0 80 00 b5 	breq	80011754 <run_navigation_task+0x188>
800115ee:	cf f8       	rjmp	800117ec <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
800115f0:	ec f8 00 00 	ld.w	r8,r6[0]
800115f4:	70 08       	ld.w	r8,r8[0x0]
800115f6:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800115fa:	e0 48 00 d8 	cp.w	r8,216
800115fe:	c7 40       	breq	800116e6 <run_navigation_task+0x11a>
80011600:	e0 48 00 dc 	cp.w	r8,220
80011604:	e0 81 00 f1 	brne	800117e6 <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80011608:	ec f8 00 00 	ld.w	r8,r6[0]
8001160c:	70 08       	ld.w	r8,r8[0x0]
8001160e:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80011612:	58 08       	cp.w	r8,0
80011614:	c3 10       	breq	80011676 <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80011616:	ec f8 00 00 	ld.w	r8,r6[0]
8001161a:	70 08       	ld.w	r8,r8[0x0]
8001161c:	20 cd       	sub	sp,48
8001161e:	1a 99       	mov	r9,sp
80011620:	12 9b       	mov	r11,r9
80011622:	f0 ca ef e0 	sub	r10,r8,-4128
80011626:	f6 c8 00 00 	sub	r8,r11,0
8001162a:	f4 c9 00 00 	sub	r9,r10,0
8001162e:	72 0c       	ld.w	r12,r9[0x0]
80011630:	91 0c       	st.w	r8[0x0],r12
80011632:	72 1c       	ld.w	r12,r9[0x4]
80011634:	91 1c       	st.w	r8[0x4],r12
80011636:	72 2c       	ld.w	r12,r9[0x8]
80011638:	91 2c       	st.w	r8[0x8],r12
8001163a:	72 39       	ld.w	r9,r9[0xc]
8001163c:	91 39       	st.w	r8[0xc],r9
8001163e:	f6 c8 ff f0 	sub	r8,r11,-16
80011642:	f4 c9 ff f0 	sub	r9,r10,-16
80011646:	72 0c       	ld.w	r12,r9[0x0]
80011648:	91 0c       	st.w	r8[0x0],r12
8001164a:	72 1c       	ld.w	r12,r9[0x4]
8001164c:	91 1c       	st.w	r8[0x4],r12
8001164e:	72 2c       	ld.w	r12,r9[0x8]
80011650:	91 2c       	st.w	r8[0x8],r12
80011652:	72 39       	ld.w	r9,r9[0xc]
80011654:	91 39       	st.w	r8[0xc],r9
80011656:	f6 c8 ff e0 	sub	r8,r11,-32
8001165a:	f4 c9 ff e0 	sub	r9,r10,-32
8001165e:	72 0a       	ld.w	r10,r9[0x0]
80011660:	91 0a       	st.w	r8[0x0],r10
80011662:	72 1a       	ld.w	r10,r9[0x4]
80011664:	91 1a       	st.w	r8[0x4],r10
80011666:	72 2a       	ld.w	r10,r9[0x8]
80011668:	91 2a       	st.w	r8[0x8],r10
8001166a:	72 39       	ld.w	r9,r9[0xc]
8001166c:	91 39       	st.w	r8[0xc],r9
8001166e:	f0 16 00 8c 	mcall	r6[560]
80011672:	2f 4d       	sub	sp,-48
80011674:	c3 78       	rjmp	800116e2 <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80011676:	ec f8 00 00 	ld.w	r8,r6[0]
8001167a:	70 08       	ld.w	r8,r8[0x0]
8001167c:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80011680:	58 08       	cp.w	r8,0
80011682:	c3 00       	breq	800116e2 <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80011684:	ec f8 00 00 	ld.w	r8,r6[0]
80011688:	70 08       	ld.w	r8,r8[0x0]
8001168a:	20 cd       	sub	sp,48
8001168c:	1a 99       	mov	r9,sp
8001168e:	12 9b       	mov	r11,r9
80011690:	f0 ca ef b0 	sub	r10,r8,-4176
80011694:	f6 c8 00 00 	sub	r8,r11,0
80011698:	f4 c9 00 00 	sub	r9,r10,0
8001169c:	72 0c       	ld.w	r12,r9[0x0]
8001169e:	91 0c       	st.w	r8[0x0],r12
800116a0:	72 1c       	ld.w	r12,r9[0x4]
800116a2:	91 1c       	st.w	r8[0x4],r12
800116a4:	72 2c       	ld.w	r12,r9[0x8]
800116a6:	91 2c       	st.w	r8[0x8],r12
800116a8:	72 39       	ld.w	r9,r9[0xc]
800116aa:	91 39       	st.w	r8[0xc],r9
800116ac:	f6 c8 ff f0 	sub	r8,r11,-16
800116b0:	f4 c9 ff f0 	sub	r9,r10,-16
800116b4:	72 0c       	ld.w	r12,r9[0x0]
800116b6:	91 0c       	st.w	r8[0x0],r12
800116b8:	72 1c       	ld.w	r12,r9[0x4]
800116ba:	91 1c       	st.w	r8[0x4],r12
800116bc:	72 2c       	ld.w	r12,r9[0x8]
800116be:	91 2c       	st.w	r8[0x8],r12
800116c0:	72 39       	ld.w	r9,r9[0xc]
800116c2:	91 39       	st.w	r8[0xc],r9
800116c4:	f6 c8 ff e0 	sub	r8,r11,-32
800116c8:	f4 c9 ff e0 	sub	r9,r10,-32
800116cc:	72 0a       	ld.w	r10,r9[0x0]
800116ce:	91 0a       	st.w	r8[0x0],r10
800116d0:	72 1a       	ld.w	r10,r9[0x4]
800116d2:	91 1a       	st.w	r8[0x4],r10
800116d4:	72 2a       	ld.w	r10,r9[0x8]
800116d6:	91 2a       	st.w	r8[0x8],r10
800116d8:	72 39       	ld.w	r9,r9[0xc]
800116da:	91 39       	st.w	r8[0xc],r9
800116dc:	f0 16 00 8c 	mcall	r6[560]
800116e0:	2f 4d       	sub	sp,-48
						}
						break;
800116e2:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800116e4:	c8 48       	rjmp	800117ec <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
800116e6:	ec f8 00 00 	ld.w	r8,r6[0]
800116ea:	70 08       	ld.w	r8,r8[0x0]
800116ec:	f1 38 10 b7 	ld.ub	r8,r8[4279]
800116f0:	58 08       	cp.w	r8,0
800116f2:	c7 c0       	breq	800117ea <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
800116f4:	ec f8 00 00 	ld.w	r8,r6[0]
800116f8:	70 08       	ld.w	r8,r8[0x0]
800116fa:	20 cd       	sub	sp,48
800116fc:	1a 99       	mov	r9,sp
800116fe:	12 9b       	mov	r11,r9
80011700:	f0 ca ef b0 	sub	r10,r8,-4176
80011704:	f6 c8 00 00 	sub	r8,r11,0
80011708:	f4 c9 00 00 	sub	r9,r10,0
8001170c:	72 0c       	ld.w	r12,r9[0x0]
8001170e:	91 0c       	st.w	r8[0x0],r12
80011710:	72 1c       	ld.w	r12,r9[0x4]
80011712:	91 1c       	st.w	r8[0x4],r12
80011714:	72 2c       	ld.w	r12,r9[0x8]
80011716:	91 2c       	st.w	r8[0x8],r12
80011718:	72 39       	ld.w	r9,r9[0xc]
8001171a:	91 39       	st.w	r8[0xc],r9
8001171c:	f6 c8 ff f0 	sub	r8,r11,-16
80011720:	f4 c9 ff f0 	sub	r9,r10,-16
80011724:	72 0c       	ld.w	r12,r9[0x0]
80011726:	91 0c       	st.w	r8[0x0],r12
80011728:	72 1c       	ld.w	r12,r9[0x4]
8001172a:	91 1c       	st.w	r8[0x4],r12
8001172c:	72 2c       	ld.w	r12,r9[0x8]
8001172e:	91 2c       	st.w	r8[0x8],r12
80011730:	72 39       	ld.w	r9,r9[0xc]
80011732:	91 39       	st.w	r8[0xc],r9
80011734:	f6 c8 ff e0 	sub	r8,r11,-32
80011738:	f4 c9 ff e0 	sub	r9,r10,-32
8001173c:	72 0a       	ld.w	r10,r9[0x0]
8001173e:	91 0a       	st.w	r8[0x0],r10
80011740:	72 1a       	ld.w	r10,r9[0x4]
80011742:	91 1a       	st.w	r8[0x4],r10
80011744:	72 2a       	ld.w	r10,r9[0x8]
80011746:	91 2a       	st.w	r8[0x8],r10
80011748:	72 39       	ld.w	r9,r9[0xc]
8001174a:	91 39       	st.w	r8[0xc],r9
8001174c:	f0 16 00 8c 	mcall	r6[560]
80011750:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80011752:	c4 d8       	rjmp	800117ec <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80011754:	ec f8 00 00 	ld.w	r8,r6[0]
80011758:	70 08       	ld.w	r8,r8[0x0]
8001175a:	f1 39 10 bc 	ld.ub	r9,r8[4284]
8001175e:	3d 88       	mov	r8,-40
80011760:	f0 09 18 00 	cp.b	r9,r8
80011764:	c0 a0       	breq	80011778 <run_navigation_task+0x1ac>
80011766:	ec f8 00 00 	ld.w	r8,r6[0]
8001176a:	70 08       	ld.w	r8,r8[0x0]
8001176c:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80011770:	3d c8       	mov	r8,-36
80011772:	f0 09 18 00 	cp.b	r9,r8
80011776:	c3 b1       	brne	800117ec <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80011778:	ec f8 00 00 	ld.w	r8,r6[0]
8001177c:	70 08       	ld.w	r8,r8[0x0]
8001177e:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80011782:	58 08       	cp.w	r8,0
80011784:	c3 40       	breq	800117ec <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
80011786:	ec f8 00 00 	ld.w	r8,r6[0]
8001178a:	70 08       	ld.w	r8,r8[0x0]
8001178c:	20 cd       	sub	sp,48
8001178e:	1a 99       	mov	r9,sp
80011790:	12 9b       	mov	r11,r9
80011792:	f0 ca ef 80 	sub	r10,r8,-4224
80011796:	f6 c8 00 00 	sub	r8,r11,0
8001179a:	f4 c9 00 00 	sub	r9,r10,0
8001179e:	72 0c       	ld.w	r12,r9[0x0]
800117a0:	91 0c       	st.w	r8[0x0],r12
800117a2:	72 1c       	ld.w	r12,r9[0x4]
800117a4:	91 1c       	st.w	r8[0x4],r12
800117a6:	72 2c       	ld.w	r12,r9[0x8]
800117a8:	91 2c       	st.w	r8[0x8],r12
800117aa:	72 39       	ld.w	r9,r9[0xc]
800117ac:	91 39       	st.w	r8[0xc],r9
800117ae:	f6 c8 ff f0 	sub	r8,r11,-16
800117b2:	f4 c9 ff f0 	sub	r9,r10,-16
800117b6:	72 0c       	ld.w	r12,r9[0x0]
800117b8:	91 0c       	st.w	r8[0x0],r12
800117ba:	72 1c       	ld.w	r12,r9[0x4]
800117bc:	91 1c       	st.w	r8[0x4],r12
800117be:	72 2c       	ld.w	r12,r9[0x8]
800117c0:	91 2c       	st.w	r8[0x8],r12
800117c2:	72 39       	ld.w	r9,r9[0xc]
800117c4:	91 39       	st.w	r8[0xc],r9
800117c6:	f6 c8 ff e0 	sub	r8,r11,-32
800117ca:	f4 c9 ff e0 	sub	r9,r10,-32
800117ce:	72 0a       	ld.w	r10,r9[0x0]
800117d0:	91 0a       	st.w	r8[0x0],r10
800117d2:	72 1a       	ld.w	r10,r9[0x4]
800117d4:	91 1a       	st.w	r8[0x4],r10
800117d6:	72 2a       	ld.w	r10,r9[0x8]
800117d8:	91 2a       	st.w	r8[0x8],r10
800117da:	72 39       	ld.w	r9,r9[0xc]
800117dc:	91 39       	st.w	r8[0xc],r9
800117de:	f0 16 00 8c 	mcall	r6[560]
800117e2:	2f 4d       	sub	sp,-48
800117e4:	c0 48       	rjmp	800117ec <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800117e6:	d7 03       	nop
800117e8:	c0 28       	rjmp	800117ec <run_navigation_task+0x220>
800117ea:	d7 03       	nop
					}
				}
				break;
		}
	
}
800117ec:	2f fd       	sub	sp,-4
800117ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800117f2:	00 00       	add	r0,r0
800117f4:	80 01       	ld.sh	r1,r0[0x0]
800117f6:	14 5c       	eor	r12,r10

800117f8 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
800117f8:	eb cd 40 c0 	pushm	r6-r7,lr
800117fc:	1a 97       	mov	r7,sp
800117fe:	20 3d       	sub	sp,12
80011800:	4a d6       	lddpc	r6,800118b4 <run_barometer+0xbc>
80011802:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
80011804:	f0 16 00 29 	mcall	r6[164]
80011808:	18 98       	mov	r8,r12
8001180a:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
8001180e:	f0 16 00 33 	mcall	r6[204]
80011812:	18 98       	mov	r8,r12
80011814:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80011818:	ec f8 00 00 	ld.w	r8,r6[0]
8001181c:	70 08       	ld.w	r8,r8[0x0]
8001181e:	f0 f8 10 e4 	ld.w	r8,r8[4324]
80011822:	10 9c       	mov	r12,r8
80011824:	f0 16 01 bd 	mcall	r6[1780]
80011828:	18 98       	mov	r8,r12
8001182a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
8001182e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011832:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011836:	58 18       	cp.w	r8,1
80011838:	c0 b1       	brne	8001184e <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
8001183a:	ec f8 00 00 	ld.w	r8,r6[0]
8001183e:	70 08       	ld.w	r8,r8[0x0]
80011840:	f0 c8 f4 58 	sub	r8,r8,-2984
80011844:	ee fb ff fc 	ld.w	r11,r7[-4]
80011848:	10 9c       	mov	r12,r8
8001184a:	f0 16 01 97 	mcall	r6[1628]
	} 
	centralData->pressure=*pressure;
8001184e:	ec f8 00 00 	ld.w	r8,r6[0]
80011852:	70 08       	ld.w	r8,r8[0x0]
80011854:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011858:	f0 c8 ef 3c 	sub	r8,r8,-4292
8001185c:	f0 ca 00 00 	sub	r10,r8,0
80011860:	f2 cb 00 00 	sub	r11,r9,0
80011864:	76 0c       	ld.w	r12,r11[0x0]
80011866:	95 0c       	st.w	r10[0x0],r12
80011868:	76 1c       	ld.w	r12,r11[0x4]
8001186a:	95 1c       	st.w	r10[0x4],r12
8001186c:	76 2c       	ld.w	r12,r11[0x8]
8001186e:	95 2c       	st.w	r10[0x8],r12
80011870:	76 3b       	ld.w	r11,r11[0xc]
80011872:	95 3b       	st.w	r10[0xc],r11
80011874:	f0 ca ff f0 	sub	r10,r8,-16
80011878:	f2 cb ff f0 	sub	r11,r9,-16
8001187c:	76 0c       	ld.w	r12,r11[0x0]
8001187e:	95 0c       	st.w	r10[0x0],r12
80011880:	76 1c       	ld.w	r12,r11[0x4]
80011882:	95 1c       	st.w	r10[0x4],r12
80011884:	76 2c       	ld.w	r12,r11[0x8]
80011886:	95 2c       	st.w	r10[0x8],r12
80011888:	76 3b       	ld.w	r11,r11[0xc]
8001188a:	95 3b       	st.w	r10[0xc],r11
8001188c:	f0 ca ff e0 	sub	r10,r8,-32
80011890:	f2 cb ff e0 	sub	r11,r9,-32
80011894:	76 0c       	ld.w	r12,r11[0x0]
80011896:	95 0c       	st.w	r10[0x0],r12
80011898:	76 1c       	ld.w	r12,r11[0x4]
8001189a:	95 1c       	st.w	r10[0x4],r12
8001189c:	76 2c       	ld.w	r12,r11[0x8]
8001189e:	95 2c       	st.w	r10[0x8],r12
800118a0:	76 3b       	ld.w	r11,r11[0xc]
800118a2:	95 3b       	st.w	r10[0xc],r11
800118a4:	f2 ea 00 30 	ld.d	r10,r9[48]
800118a8:	f0 eb 00 30 	st.d	r8[48],r10
	
}
800118ac:	2f dd       	sub	sp,-12
800118ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800118b2:	00 00       	add	r0,r0
800118b4:	80 01       	ld.sh	r1,r0[0x0]
800118b6:	16 86       	andn	r6,r11

800118b8 <create_tasks>:


void create_tasks() {
800118b8:	eb cd 40 c0 	pushm	r6-r7,lr
800118bc:	1a 97       	mov	r7,sp
800118be:	4a 96       	lddpc	r6,80011960 <create_tasks+0xa8>
800118c0:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800118c2:	ec f8 01 30 	ld.w	r8,r6[304]
800118c6:	10 9c       	mov	r12,r8
800118c8:	f0 16 01 0c 	mcall	r6[1072]
	
	centralData = get_central_data();
800118cc:	f0 16 00 33 	mcall	r6[204]
800118d0:	18 99       	mov	r9,r12
800118d2:	ec f8 00 00 	ld.w	r8,r6[0]
800118d6:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800118d8:	ec f8 08 74 	ld.w	r8,r6[2164]
800118dc:	ec fc 01 30 	ld.w	r12,r6[304]
800118e0:	30 29       	mov	r9,2
800118e2:	e0 6a 0f a0 	mov	r10,4000
800118e6:	30 0b       	mov	r11,0
800118e8:	f0 16 00 63 	mcall	r6[396]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800118ec:	ec f8 07 38 	ld.w	r8,r6[1848]
800118f0:	ec fc 01 30 	ld.w	r12,r6[304]
800118f4:	30 29       	mov	r9,2
800118f6:	e0 6a 3a 98 	mov	r10,15000
800118fa:	30 1b       	mov	r11,1
800118fc:	f0 16 00 63 	mcall	r6[396]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80011900:	ec f8 01 30 	ld.w	r8,r6[304]
80011904:	30 19       	mov	r9,1
80011906:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
8001190a:	ec f8 07 bc 	ld.w	r8,r6[1980]
8001190e:	ec fc 01 30 	ld.w	r12,r6[304]
80011912:	30 29       	mov	r9,2
80011914:	e0 7a 86 a0 	mov	r10,100000
80011918:	30 2b       	mov	r11,2
8001191a:	f0 16 00 63 	mcall	r6[396]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
8001191e:	ec f8 06 c4 	ld.w	r8,r6[1732]
80011922:	ec fc 01 30 	ld.w	r12,r6[304]
80011926:	30 29       	mov	r9,2
80011928:	e0 6a 27 10 	mov	r10,10000
8001192c:	30 3b       	mov	r11,3
8001192e:	f0 16 00 63 	mcall	r6[396]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
80011932:	ec f8 07 14 	ld.w	r8,r6[1812]
80011936:	ec fc 01 30 	ld.w	r12,r6[304]
8001193a:	30 29       	mov	r9,2
8001193c:	e2 7a 0d 40 	mov	r10,200000
80011940:	30 4b       	mov	r11,4
80011942:	f0 16 00 63 	mcall	r6[396]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
80011946:	ec f8 03 90 	ld.w	r8,r6[912]
8001194a:	ec fc 01 30 	ld.w	r12,r6[304]
8001194e:	30 29       	mov	r9,2
80011950:	e0 6a 0f a0 	mov	r10,4000
80011954:	30 5b       	mov	r11,5
80011956:	f0 16 00 63 	mcall	r6[396]

8001195a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001195e:	00 00       	add	r0,r0
80011960:	80 01       	ld.sh	r1,r0[0x0]
80011962:	17 44       	ld.w	r4,--r11

80011964 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80011964:	eb cd 40 80 	pushm	r7,lr
80011968:	1a 97       	mov	r7,sp
8001196a:	20 3d       	sub	sp,12
8001196c:	18 98       	mov	r8,r12
8001196e:	ef 4b ff f4 	st.w	r7[-12],r11
80011972:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80011976:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001197a:	90 08       	ld.sh	r8,r8[0x0]
8001197c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80011980:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80011984:	f3 e8 20 08 	eor	r8,r9,r8
80011988:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001198c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011990:	a5 68       	lsl	r8,0x4
80011992:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80011996:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001199a:	f3 e8 20 08 	eor	r8,r9,r8
8001199e:	5c 58       	castu.b	r8
800119a0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800119a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800119a8:	90 08       	ld.sh	r8,r8[0x0]
800119aa:	5c 78       	castu.h	r8
800119ac:	a9 88       	lsr	r8,0x8
800119ae:	5c 88       	casts.h	r8
800119b0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800119b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800119b8:	a9 68       	lsl	r8,0x8
800119ba:	5c 88       	casts.h	r8
800119bc:	f3 e8 20 08 	eor	r8,r9,r8
800119c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800119c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800119c8:	a3 78       	lsl	r8,0x3
800119ca:	5c 88       	casts.h	r8
800119cc:	f3 e8 20 08 	eor	r8,r9,r8
800119d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800119d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800119d8:	a5 88       	lsr	r8,0x4
800119da:	5c 58       	castu.b	r8
800119dc:	f3 e8 20 08 	eor	r8,r9,r8
800119e0:	5c 88       	casts.h	r8
800119e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800119e6:	b2 08       	st.h	r9[0x0],r8
}
800119e8:	2f dd       	sub	sp,-12
800119ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800119ee <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800119ee:	eb cd 40 80 	pushm	r7,lr
800119f2:	1a 97       	mov	r7,sp
800119f4:	20 1d       	sub	sp,4
800119f6:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
800119fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800119fe:	3f f8       	mov	r8,-1
80011a00:	b2 08       	st.h	r9[0x0],r8
}
80011a02:	2f fd       	sub	sp,-4
80011a04:	e3 cd 80 80 	ldm	sp++,r7,pc

80011a08 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80011a08:	eb cd 40 c0 	pushm	r6-r7,lr
80011a0c:	1a 97       	mov	r7,sp
80011a0e:	20 1d       	sub	sp,4
80011a10:	48 96       	lddpc	r6,80011a34 <mavlink_get_channel_status+0x2c>
80011a12:	1e 26       	rsub	r6,pc
80011a14:	18 98       	mov	r8,r12
80011a16:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80011a1a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80011a1e:	f0 09 15 04 	lsl	r9,r8,0x4
80011a22:	ec f8 09 00 	ld.w	r8,r6[2304]
80011a26:	f2 08 00 08 	add	r8,r9,r8
}
80011a2a:	10 9c       	mov	r12,r8
80011a2c:	2f fd       	sub	sp,-4
80011a2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a32:	00 00       	add	r0,r0
80011a34:	80 01       	ld.sh	r1,r0[0x0]
80011a36:	18 96       	mov	r6,r12

80011a38 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80011a38:	eb cd 40 c0 	pushm	r6-r7,lr
80011a3c:	1a 97       	mov	r7,sp
80011a3e:	20 1d       	sub	sp,4
80011a40:	48 a6       	lddpc	r6,80011a68 <mavlink_get_channel_buffer+0x30>
80011a42:	1e 26       	rsub	r6,pc
80011a44:	18 98       	mov	r8,r12
80011a46:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
80011a4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80011a4e:	12 98       	mov	r8,r9
80011a50:	a5 68       	lsl	r8,0x4
80011a52:	12 08       	add	r8,r9
80011a54:	a5 68       	lsl	r8,0x4
80011a56:	10 99       	mov	r9,r8
80011a58:	ec f8 08 fc 	ld.w	r8,r6[2300]
80011a5c:	f2 08 00 08 	add	r8,r9,r8
}
80011a60:	10 9c       	mov	r12,r8
80011a62:	2f fd       	sub	sp,-4
80011a64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a68:	80 01       	ld.sh	r1,r0[0x0]
80011a6a:	18 c6       	st.b	r12++,r6

80011a6c <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80011a6c:	eb cd 40 c0 	pushm	r6-r7,lr
80011a70:	1a 97       	mov	r7,sp
80011a72:	20 1d       	sub	sp,4
80011a74:	48 66       	lddpc	r6,80011a8c <mavlink_start_checksum+0x20>
80011a76:	1e 26       	rsub	r6,pc
80011a78:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80011a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a80:	10 9c       	mov	r12,r8
80011a82:	cb 6f       	rcall	800119ee <crc_init>
}
80011a84:	2f fd       	sub	sp,-4
80011a86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a8a:	00 00       	add	r0,r0
80011a8c:	80 01       	ld.sh	r1,r0[0x0]
80011a8e:	18 fa       	st.b	--r12,r10

80011a90 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80011a90:	eb cd 40 c0 	pushm	r6-r7,lr
80011a94:	1a 97       	mov	r7,sp
80011a96:	20 2d       	sub	sp,8
80011a98:	48 96       	lddpc	r6,80011abc <mavlink_update_checksum+0x2c>
80011a9a:	1e 26       	rsub	r6,pc
80011a9c:	ef 4c ff fc 	st.w	r7[-4],r12
80011aa0:	16 98       	mov	r8,r11
80011aa2:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
80011aa6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011aaa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80011aae:	12 9b       	mov	r11,r9
80011ab0:	10 9c       	mov	r12,r8
80011ab2:	c5 9f       	rcall	80011964 <crc_accumulate>
}
80011ab4:	2f ed       	sub	sp,-8
80011ab6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011aba:	00 00       	add	r0,r0
80011abc:	80 01       	ld.sh	r1,r0[0x0]
80011abe:	19 1e       	ld.sh	lr,r12++

80011ac0 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
80011ac0:	eb cd 40 c0 	pushm	r6-r7,lr
80011ac4:	1a 97       	mov	r7,sp
80011ac6:	20 7d       	sub	sp,28
80011ac8:	fe f6 03 b8 	ld.w	r6,pc[952]
80011acc:	1e 26       	rsub	r6,pc
80011ace:	16 98       	mov	r8,r11
80011ad0:	ef 4a ff e8 	st.w	r7[-24],r10
80011ad4:	ef 49 ff e4 	st.w	r7[-28],r9
80011ad8:	18 99       	mov	r9,r12
80011ada:	ef 69 ff f0 	st.b	r7[-16],r9
80011ade:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
80011ae2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80011ae6:	10 9c       	mov	r12,r8
80011ae8:	ca 8f       	rcall	80011a38 <mavlink_get_channel_buffer>
80011aea:	18 98       	mov	r8,r12
80011aec:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
80011af0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80011af4:	10 9c       	mov	r12,r8
80011af6:	c8 9f       	rcall	80011a08 <mavlink_get_channel_status>
80011af8:	18 98       	mov	r8,r12
80011afa:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
80011afe:	30 08       	mov	r8,0
80011b00:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
80011b04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b08:	30 08       	mov	r8,0
80011b0a:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
80011b0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b10:	70 18       	ld.w	r8,r8[0x4]
80011b12:	58 98       	cp.w	r8,9
80011b14:	e0 8b 01 70 	brhi	80011df4 <mavlink_parse_char+0x334>
80011b18:	fe c9 ff f8 	sub	r9,pc,-8
80011b1c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80011b20:	e0 8f 00 14 	bral	80011b48 <mavlink_parse_char+0x88>
80011b24:	e0 8f 00 12 	bral	80011b48 <mavlink_parse_char+0x88>
80011b28:	e0 8f 00 28 	bral	80011b78 <mavlink_parse_char+0xb8>
80011b2c:	e0 8f 00 69 	bral	80011bfe <mavlink_parse_char+0x13e>
80011b30:	e0 8f 00 57 	bral	80011bde <mavlink_parse_char+0x11e>
80011b34:	e0 8f 00 75 	bral	80011c1e <mavlink_parse_char+0x15e>
80011b38:	e0 8f 00 83 	bral	80011c3e <mavlink_parse_char+0x17e>
80011b3c:	e0 8f 00 9b 	bral	80011c72 <mavlink_parse_char+0x1b2>
80011b40:	e0 8f 00 c2 	bral	80011cc4 <mavlink_parse_char+0x204>
80011b44:	e0 8f 01 08 	bral	80011d54 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80011b48:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011b4c:	3f e8       	mov	r8,-2
80011b4e:	f0 09 18 00 	cp.b	r9,r8
80011b52:	e0 81 01 4c 	brne	80011dea <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011b56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b5a:	30 29       	mov	r9,2
80011b5c:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
80011b5e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b62:	30 08       	mov	r8,0
80011b64:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
80011b66:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b6a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011b6e:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80011b70:	ee fc ff f4 	ld.w	r12,r7[-12]
80011b74:	c7 cf       	rcall	80011a6c <mavlink_start_checksum>
		}
		break;
80011b76:	c3 f9       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80011b78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b7c:	11 88       	ld.ub	r8,r8[0x0]
80011b7e:	58 08       	cp.w	r8,0
80011b80:	c1 a0       	breq	80011bb4 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
80011b82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b86:	11 98       	ld.ub	r8,r8[0x1]
80011b88:	2f f8       	sub	r8,-1
80011b8a:	5c 58       	castu.b	r8
80011b8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b90:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
80011b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b96:	11 a8       	ld.ub	r8,r8[0x2]
80011b98:	2f f8       	sub	r8,-1
80011b9a:	5c 58       	castu.b	r8
80011b9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011ba0:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011ba2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011ba6:	30 08       	mov	r8,0
80011ba8:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bae:	30 19       	mov	r9,1
80011bb0:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
80011bb2:	c2 19       	rjmp	80011df4 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
80011bb4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011bb8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bbc:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
80011bbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011bc2:	30 08       	mov	r8,0
80011bc4:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
80011bc8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bcc:	10 9b       	mov	r11,r8
80011bce:	ee fc ff f4 	ld.w	r12,r7[-12]
80011bd2:	c5 ff       	rcall	80011a90 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
80011bd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bd8:	30 49       	mov	r9,4
80011bda:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011bdc:	c0 c9       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
80011bde:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011be2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011be6:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
80011be8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bec:	10 9b       	mov	r11,r8
80011bee:	ee fc ff f4 	ld.w	r12,r7[-12]
80011bf2:	c4 ff       	rcall	80011a90 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80011bf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bf8:	30 39       	mov	r9,3
80011bfa:	91 19       	st.w	r8[0x4],r9
		break;
80011bfc:	cf c8       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80011bfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011c02:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c06:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80011c08:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c0c:	10 9b       	mov	r11,r8
80011c0e:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c12:	c3 ff       	rcall	80011a90 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
80011c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c18:	30 59       	mov	r9,5
80011c1a:	91 19       	st.w	r8[0x4],r9
		break;
80011c1c:	ce c8       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
80011c1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011c22:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c26:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80011c28:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c2c:	10 9b       	mov	r11,r8
80011c2e:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c32:	c2 ff       	rcall	80011a90 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
80011c34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c38:	30 69       	mov	r9,6
80011c3a:	91 19       	st.w	r8[0x4],r9
		break;
80011c3c:	cd c8       	rjmp	80011df4 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
80011c3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011c42:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c46:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80011c48:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c4c:	10 9b       	mov	r11,r8
80011c4e:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c52:	c1 ff       	rcall	80011a90 <mavlink_update_checksum>
		if (rxmsg->len == 0)
80011c54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011c58:	11 b8       	ld.ub	r8,r8[0x3]
80011c5a:	58 08       	cp.w	r8,0
80011c5c:	c0 61       	brne	80011c68 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80011c5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c62:	30 89       	mov	r9,8
80011c64:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
80011c66:	cc 78       	rjmp	80011df4 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80011c68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c6c:	30 79       	mov	r9,7
80011c6e:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011c70:	cc 28       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
80011c72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011c76:	2f 88       	sub	r8,-8
80011c78:	10 9a       	mov	r10,r8
80011c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c7e:	f1 38 00 08 	ld.ub	r8,r8[8]
80011c82:	10 99       	mov	r9,r8
80011c84:	12 0a       	add	r10,r9
80011c86:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011c8a:	b4 89       	st.b	r10[0x0],r9
80011c8c:	2f f8       	sub	r8,-1
80011c8e:	5c 58       	castu.b	r8
80011c90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011c94:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
80011c98:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c9c:	10 9b       	mov	r11,r8
80011c9e:	ee fc ff f4 	ld.w	r12,r7[-12]
80011ca2:	cf 7e       	rcall	80011a90 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
80011ca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ca8:	f1 39 00 08 	ld.ub	r9,r8[8]
80011cac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011cb0:	11 b8       	ld.ub	r8,r8[0x3]
80011cb2:	f0 09 18 00 	cp.b	r9,r8
80011cb6:	e0 81 00 9c 	brne	80011dee <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80011cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cbe:	30 89       	mov	r9,8
80011cc0:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011cc2:	c9 98       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
80011cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011cc8:	11 f8       	ld.ub	r8,r8[0x7]
80011cca:	ec f9 08 f8 	ld.w	r9,r6[2296]
80011cce:	f2 08 07 08 	ld.ub	r8,r9[r8]
80011cd2:	10 9b       	mov	r11,r8
80011cd4:	ee fc ff f4 	ld.w	r12,r7[-12]
80011cd8:	cd ce       	rcall	80011a90 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
80011cda:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011cde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011ce2:	90 08       	ld.sh	r8,r8[0x0]
80011ce4:	5c 78       	castu.h	r8
80011ce6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80011cea:	10 39       	cp.w	r9,r8
80011cec:	c2 30       	breq	80011d32 <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80011cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cf2:	11 a8       	ld.ub	r8,r8[0x2]
80011cf4:	2f f8       	sub	r8,-1
80011cf6:	5c 58       	castu.b	r8
80011cf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011cfc:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011cfe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d02:	30 08       	mov	r8,0
80011d04:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d0a:	30 19       	mov	r9,1
80011d0c:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011d0e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011d12:	3f e8       	mov	r8,-2
80011d14:	f0 09 18 00 	cp.b	r9,r8
80011d18:	c6 d1       	brne	80011df2 <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d1e:	30 29       	mov	r9,2
80011d20:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80011d22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011d26:	30 08       	mov	r8,0
80011d28:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80011d2a:	ee fc ff f4 	ld.w	r12,r7[-12]
80011d2e:	c9 fe       	rcall	80011a6c <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80011d30:	c6 28       	rjmp	80011df4 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
80011d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d36:	30 99       	mov	r9,9
80011d38:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80011d3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011d3e:	2f 88       	sub	r8,-8
80011d40:	10 99       	mov	r9,r8
80011d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d46:	f1 38 00 08 	ld.ub	r8,r8[8]
80011d4a:	10 09       	add	r9,r8
80011d4c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011d50:	b2 88       	st.b	r9[0x0],r8
		}
		break;
80011d52:	c5 18       	rjmp	80011df4 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
80011d54:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011d58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011d5c:	90 08       	ld.sh	r8,r8[0x0]
80011d5e:	5c 78       	castu.h	r8
80011d60:	a9 88       	lsr	r8,0x8
80011d62:	5c 88       	casts.h	r8
80011d64:	f0 09 19 00 	cp.h	r9,r8
80011d68:	c2 30       	breq	80011dae <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80011d6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d6e:	11 a8       	ld.ub	r8,r8[0x2]
80011d70:	2f f8       	sub	r8,-1
80011d72:	5c 58       	castu.b	r8
80011d74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d78:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011d7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d7e:	30 08       	mov	r8,0
80011d80:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d86:	30 19       	mov	r9,1
80011d88:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011d8a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011d8e:	3f e8       	mov	r8,-2
80011d90:	f0 09 18 00 	cp.b	r9,r8
80011d94:	c3 01       	brne	80011df4 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011d96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d9a:	30 29       	mov	r9,2
80011d9c:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80011d9e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011da2:	30 08       	mov	r8,0
80011da4:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80011da6:	ee fc ff f4 	ld.w	r12,r7[-12]
80011daa:	c6 1e       	rcall	80011a6c <mavlink_start_checksum>
80011dac:	c2 48       	rjmp	80011df4 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80011dae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011db2:	30 18       	mov	r8,1
80011db4:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011dba:	30 19       	mov	r9,1
80011dbc:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80011dbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011dc2:	2f 88       	sub	r8,-8
80011dc4:	10 99       	mov	r9,r8
80011dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011dca:	f1 38 00 08 	ld.ub	r8,r8[8]
80011dce:	2f f8       	sub	r8,-1
80011dd0:	10 09       	add	r9,r8
80011dd2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011dd6:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
80011dd8:	e0 6a 01 10 	mov	r10,272
80011ddc:	ee fb ff f4 	ld.w	r11,r7[-12]
80011de0:	ee fc ff e8 	ld.w	r12,r7[-24]
80011de4:	f0 16 00 1b 	mcall	r6[108]
80011de8:	c0 68       	rjmp	80011df4 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
80011dea:	d7 03       	nop
80011dec:	c0 48       	rjmp	80011df4 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80011dee:	d7 03       	nop
80011df0:	c0 28       	rjmp	80011df4 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80011df2:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80011df4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011df8:	2f f8       	sub	r8,-1
80011dfa:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80011dfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e02:	11 89       	ld.ub	r9,r8[0x0]
80011e04:	30 18       	mov	r8,1
80011e06:	f0 09 18 00 	cp.b	r9,r8
80011e0a:	c1 91       	brne	80011e3c <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80011e0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011e10:	11 c8       	ld.ub	r8,r8[0x4]
80011e12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e16:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80011e1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e1e:	90 68       	ld.sh	r8,r8[0xc]
80011e20:	58 08       	cp.w	r8,0
80011e22:	c0 51       	brne	80011e2c <mavlink_parse_char+0x36c>
80011e24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e28:	30 08       	mov	r8,0
80011e2a:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80011e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e30:	90 68       	ld.sh	r8,r8[0xc]
80011e32:	2f f8       	sub	r8,-1
80011e34:	5c 88       	casts.h	r8
80011e36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e3a:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80011e3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e40:	f1 38 00 09 	ld.ub	r8,r8[9]
80011e44:	2f f8       	sub	r8,-1
80011e46:	5c 58       	castu.b	r8
80011e48:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e4c:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
80011e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e54:	90 68       	ld.sh	r8,r8[0xc]
80011e56:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e5a:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80011e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e60:	11 a8       	ld.ub	r8,r8[0x2]
80011e62:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e66:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80011e68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e6c:	30 08       	mov	r8,0
80011e6e:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80011e70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e74:	11 88       	ld.ub	r8,r8[0x0]
}
80011e76:	10 9c       	mov	r12,r8
80011e78:	2f 9d       	sub	sp,-28
80011e7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011e7e:	00 00       	add	r0,r0
80011e80:	80 01       	ld.sh	r1,r0[0x0]
80011e82:	19 50       	ld.sh	r0,--r12

80011e84 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80011e84:	eb cd 40 80 	pushm	r7,lr
80011e88:	1a 97       	mov	r7,sp
80011e8a:	20 2d       	sub	sp,8
80011e8c:	ef 4c ff fc 	st.w	r7[-4],r12
80011e90:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80011e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e98:	2f f8       	sub	r8,-1
80011e9a:	11 88       	ld.ub	r8,r8[0x0]
80011e9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011ea0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80011ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ea6:	f0 c9 ff ff 	sub	r9,r8,-1
80011eaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011eae:	11 88       	ld.ub	r8,r8[0x0]
80011eb0:	b2 88       	st.b	r9[0x0],r8
}
80011eb2:	2f ed       	sub	sp,-8
80011eb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80011eb8 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80011eb8:	eb cd 40 80 	pushm	r7,lr
80011ebc:	1a 97       	mov	r7,sp
80011ebe:	20 2d       	sub	sp,8
80011ec0:	ef 4c ff fc 	st.w	r7[-4],r12
80011ec4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80011ec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ecc:	2f d8       	sub	r8,-3
80011ece:	11 88       	ld.ub	r8,r8[0x0]
80011ed0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011ed4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80011ed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011eda:	f0 c9 ff ff 	sub	r9,r8,-1
80011ede:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ee2:	2f e8       	sub	r8,-2
80011ee4:	11 88       	ld.ub	r8,r8[0x0]
80011ee6:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80011ee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011eec:	f0 c9 ff fe 	sub	r9,r8,-2
80011ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ef4:	2f f8       	sub	r8,-1
80011ef6:	11 88       	ld.ub	r8,r8[0x0]
80011ef8:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80011efa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011efe:	f0 c9 ff fd 	sub	r9,r8,-3
80011f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f06:	11 88       	ld.ub	r8,r8[0x0]
80011f08:	b2 88       	st.b	r9[0x0],r8
}
80011f0a:	2f ed       	sub	sp,-8
80011f0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80011f10 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80011f10:	eb cd 40 c0 	pushm	r6-r7,lr
80011f14:	1a 97       	mov	r7,sp
80011f16:	20 3d       	sub	sp,12
80011f18:	49 06       	lddpc	r6,80011f58 <mav_array_memcpy+0x48>
80011f1a:	1e 26       	rsub	r6,pc
80011f1c:	ef 4c ff fc 	st.w	r7[-4],r12
80011f20:	ef 4b ff f8 	st.w	r7[-8],r11
80011f24:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80011f28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f2c:	58 08       	cp.w	r8,0
80011f2e:	c0 91       	brne	80011f40 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80011f30:	ee fa ff f4 	ld.w	r10,r7[-12]
80011f34:	30 0b       	mov	r11,0
80011f36:	ee fc ff fc 	ld.w	r12,r7[-4]
80011f3a:	f0 16 00 31 	mcall	r6[196]
80011f3e:	c0 98       	rjmp	80011f50 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80011f40:	ee fa ff f4 	ld.w	r10,r7[-12]
80011f44:	ee fb ff f8 	ld.w	r11,r7[-8]
80011f48:	ee fc ff fc 	ld.w	r12,r7[-4]
80011f4c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80011f50:	2f dd       	sub	sp,-12
80011f52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f56:	00 00       	add	r0,r0
80011f58:	80 01       	ld.sh	r1,r0[0x0]
80011f5a:	1d 9e       	ld.ub	lr,lr[0x1]

80011f5c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80011f5c:	eb cd 40 c0 	pushm	r6-r7,lr
80011f60:	1a 97       	mov	r7,sp
80011f62:	20 3d       	sub	sp,12
80011f64:	48 d6       	lddpc	r6,80011f98 <_MAV_RETURN_uint16_t+0x3c>
80011f66:	1e 26       	rsub	r6,pc
80011f68:	ef 4c ff f8 	st.w	r7[-8],r12
80011f6c:	16 98       	mov	r8,r11
80011f6e:	ef 68 ff f4 	st.b	r7[-12],r8
80011f72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f76:	2f 88       	sub	r8,-8
80011f78:	10 99       	mov	r9,r8
80011f7a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011f7e:	10 09       	add	r9,r8
80011f80:	ee c8 00 02 	sub	r8,r7,2
80011f84:	12 9b       	mov	r11,r9
80011f86:	10 9c       	mov	r12,r8
80011f88:	c7 ef       	rcall	80011e84 <byte_swap_2>
80011f8a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80011f8e:	10 9c       	mov	r12,r8
80011f90:	2f dd       	sub	sp,-12
80011f92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f96:	00 00       	add	r0,r0
80011f98:	80 01       	ld.sh	r1,r0[0x0]
80011f9a:	1d ea       	ld.ub	r10,lr[0x6]

80011f9c <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80011f9c:	eb cd 40 c0 	pushm	r6-r7,lr
80011fa0:	1a 97       	mov	r7,sp
80011fa2:	20 3d       	sub	sp,12
80011fa4:	48 d6       	lddpc	r6,80011fd8 <_MAV_RETURN_int16_t+0x3c>
80011fa6:	1e 26       	rsub	r6,pc
80011fa8:	ef 4c ff f8 	st.w	r7[-8],r12
80011fac:	16 98       	mov	r8,r11
80011fae:	ef 68 ff f4 	st.b	r7[-12],r8
80011fb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011fb6:	2f 88       	sub	r8,-8
80011fb8:	10 99       	mov	r9,r8
80011fba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011fbe:	10 09       	add	r9,r8
80011fc0:	ee c8 00 02 	sub	r8,r7,2
80011fc4:	12 9b       	mov	r11,r9
80011fc6:	10 9c       	mov	r12,r8
80011fc8:	c5 ef       	rcall	80011e84 <byte_swap_2>
80011fca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80011fce:	10 9c       	mov	r12,r8
80011fd0:	2f dd       	sub	sp,-12
80011fd2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011fd6:	00 00       	add	r0,r0
80011fd8:	80 01       	ld.sh	r1,r0[0x0]
80011fda:	1e 2a       	rsub	r10,pc

80011fdc <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80011fdc:	eb cd 40 c0 	pushm	r6-r7,lr
80011fe0:	1a 97       	mov	r7,sp
80011fe2:	20 3d       	sub	sp,12
80011fe4:	48 d6       	lddpc	r6,80012018 <_MAV_RETURN_float+0x3c>
80011fe6:	1e 26       	rsub	r6,pc
80011fe8:	ef 4c ff f8 	st.w	r7[-8],r12
80011fec:	16 98       	mov	r8,r11
80011fee:	ef 68 ff f4 	st.b	r7[-12],r8
80011ff2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ff6:	2f 88       	sub	r8,-8
80011ff8:	10 99       	mov	r9,r8
80011ffa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011ffe:	10 09       	add	r9,r8
80012000:	ee c8 00 04 	sub	r8,r7,4
80012004:	12 9b       	mov	r11,r9
80012006:	10 9c       	mov	r12,r8
80012008:	c5 8f       	rcall	80011eb8 <byte_swap_4>
8001200a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001200e:	10 9c       	mov	r12,r8
80012010:	2f dd       	sub	sp,-12
80012012:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012016:	00 00       	add	r0,r0
80012018:	80 01       	ld.sh	r1,r0[0x0]
8001201a:	1e 6a       	and	r10,pc

8001201c <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
8001201c:	eb cd 40 c0 	pushm	r6-r7,lr
80012020:	1a 97       	mov	r7,sp
80012022:	20 4d       	sub	sp,16
80012024:	49 16       	lddpc	r6,80012068 <_MAV_RETURN_char_array+0x4c>
80012026:	1e 26       	rsub	r6,pc
80012028:	ef 4c ff fc 	st.w	r7[-4],r12
8001202c:	ef 4b ff f8 	st.w	r7[-8],r11
80012030:	12 98       	mov	r8,r9
80012032:	14 99       	mov	r9,r10
80012034:	ef 69 ff f4 	st.b	r7[-12],r9
80012038:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
8001203c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80012040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012044:	f0 ca ff f8 	sub	r10,r8,-8
80012048:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001204c:	f4 08 00 08 	add	r8,r10,r8
80012050:	12 9a       	mov	r10,r9
80012052:	10 9b       	mov	r11,r8
80012054:	ee fc ff f8 	ld.w	r12,r7[-8]
80012058:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
8001205c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80012060:	10 9c       	mov	r12,r8
80012062:	2f cd       	sub	sp,-16
80012064:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012068:	80 01       	ld.sh	r1,r0[0x0]
8001206a:	1e aa       	st.w	pc++,r10

8001206c <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
8001206c:	eb cd 40 80 	pushm	r7,lr
80012070:	1a 97       	mov	r7,sp
80012072:	20 1d       	sub	sp,4
80012074:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80012078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001207c:	2f 88       	sub	r8,-8
8001207e:	2f e8       	sub	r8,-2
80012080:	11 88       	ld.ub	r8,r8[0x0]
}
80012082:	10 9c       	mov	r12,r8
80012084:	2f fd       	sub	sp,-4
80012086:	e3 cd 80 80 	ldm	sp++,r7,pc

8001208a <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
8001208a:	eb cd 40 80 	pushm	r7,lr
8001208e:	1a 97       	mov	r7,sp
80012090:	20 1d       	sub	sp,4
80012092:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80012096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001209a:	2f 88       	sub	r8,-8
8001209c:	2f d8       	sub	r8,-3
8001209e:	11 88       	ld.ub	r8,r8[0x0]
}
800120a0:	10 9c       	mov	r12,r8
800120a2:	2f fd       	sub	sp,-4
800120a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800120a8 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800120a8:	eb cd 40 c0 	pushm	r6-r7,lr
800120ac:	1a 97       	mov	r7,sp
800120ae:	20 2d       	sub	sp,8
800120b0:	48 a6       	lddpc	r6,800120d8 <mavlink_msg_param_request_read_get_param_id+0x30>
800120b2:	1e 26       	rsub	r6,pc
800120b4:	ef 4c ff fc 	st.w	r7[-4],r12
800120b8:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
800120bc:	30 49       	mov	r9,4
800120be:	31 0a       	mov	r10,16
800120c0:	ee fb ff f8 	ld.w	r11,r7[-8]
800120c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800120c8:	ca af       	rcall	8001201c <_MAV_RETURN_char_array>
800120ca:	18 98       	mov	r8,r12
800120cc:	5c 88       	casts.h	r8
800120ce:	5c 88       	casts.h	r8
}
800120d0:	10 9c       	mov	r12,r8
800120d2:	2f ed       	sub	sp,-8
800120d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120d8:	80 01       	ld.sh	r1,r0[0x0]
800120da:	1f 36       	ld.ub	r6,pc++

800120dc <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
800120dc:	eb cd 40 c0 	pushm	r6-r7,lr
800120e0:	1a 97       	mov	r7,sp
800120e2:	20 1d       	sub	sp,4
800120e4:	48 76       	lddpc	r6,80012100 <mavlink_msg_param_request_read_get_param_index+0x24>
800120e6:	1e 26       	rsub	r6,pc
800120e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
800120ec:	30 0b       	mov	r11,0
800120ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800120f2:	c5 5f       	rcall	80011f9c <_MAV_RETURN_int16_t>
800120f4:	18 98       	mov	r8,r12
}
800120f6:	10 9c       	mov	r12,r8
800120f8:	2f fd       	sub	sp,-4
800120fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120fe:	00 00       	add	r0,r0
80012100:	80 01       	ld.sh	r1,r0[0x0]
80012102:	1f 6a       	ld.uh	r10,--pc

80012104 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80012104:	eb cd 40 c0 	pushm	r6-r7,lr
80012108:	1a 97       	mov	r7,sp
8001210a:	20 2d       	sub	sp,8
8001210c:	49 36       	lddpc	r6,80012158 <mavlink_msg_param_request_read_decode+0x54>
8001210e:	1e 26       	rsub	r6,pc
80012110:	ef 4c ff fc 	st.w	r7[-4],r12
80012114:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80012118:	ee fc ff fc 	ld.w	r12,r7[-4]
8001211c:	ce 0f       	rcall	800120dc <mavlink_msg_param_request_read_get_param_index>
8001211e:	18 98       	mov	r8,r12
80012120:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012124:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80012126:	ee fc ff fc 	ld.w	r12,r7[-4]
8001212a:	ca 1f       	rcall	8001206c <mavlink_msg_param_request_read_get_target_system>
8001212c:	18 98       	mov	r8,r12
8001212e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012132:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80012134:	ee fc ff fc 	ld.w	r12,r7[-4]
80012138:	ca 9f       	rcall	8001208a <mavlink_msg_param_request_read_get_target_component>
8001213a:	18 98       	mov	r8,r12
8001213c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012140:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80012142:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012146:	2f c8       	sub	r8,-4
80012148:	10 9b       	mov	r11,r8
8001214a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001214e:	ca df       	rcall	800120a8 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80012150:	2f ed       	sub	sp,-8
80012152:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012156:	00 00       	add	r0,r0
80012158:	80 01       	ld.sh	r1,r0[0x0]
8001215a:	1f 92       	ld.ub	r2,pc[0x1]

8001215c <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
8001215c:	eb cd 40 80 	pushm	r7,lr
80012160:	1a 97       	mov	r7,sp
80012162:	20 1d       	sub	sp,4
80012164:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80012168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001216c:	2f 88       	sub	r8,-8
8001216e:	11 88       	ld.ub	r8,r8[0x0]
}
80012170:	10 9c       	mov	r12,r8
80012172:	2f fd       	sub	sp,-4
80012174:	e3 cd 80 80 	ldm	sp++,r7,pc

80012178 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80012178:	eb cd 40 80 	pushm	r7,lr
8001217c:	1a 97       	mov	r7,sp
8001217e:	20 1d       	sub	sp,4
80012180:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80012184:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012188:	2f 88       	sub	r8,-8
8001218a:	2f f8       	sub	r8,-1
8001218c:	11 88       	ld.ub	r8,r8[0x0]
}
8001218e:	10 9c       	mov	r12,r8
80012190:	2f fd       	sub	sp,-4
80012192:	e3 cd 80 80 	ldm	sp++,r7,pc

80012196 <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
80012196:	eb cd 40 c0 	pushm	r6-r7,lr
8001219a:	1a 97       	mov	r7,sp
8001219c:	20 2d       	sub	sp,8
8001219e:	48 c6       	lddpc	r6,800121cc <mavlink_msg_param_request_list_decode+0x36>
800121a0:	1e 26       	rsub	r6,pc
800121a2:	ef 4c ff fc 	st.w	r7[-4],r12
800121a6:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
800121aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800121ae:	cd 7f       	rcall	8001215c <mavlink_msg_param_request_list_get_target_system>
800121b0:	18 98       	mov	r8,r12
800121b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800121b6:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
800121b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800121bc:	cd ef       	rcall	80012178 <mavlink_msg_param_request_list_get_target_component>
800121be:	18 98       	mov	r8,r12
800121c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800121c4:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
800121c6:	2f ed       	sub	sp,-8
800121c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800121cc:	80 01       	ld.sh	r1,r0[0x0]
800121ce:	20 24       	sub	r4,2

800121d0 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
800121d0:	eb cd 40 80 	pushm	r7,lr
800121d4:	1a 97       	mov	r7,sp
800121d6:	20 1d       	sub	sp,4
800121d8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
800121dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800121e0:	2f 88       	sub	r8,-8
800121e2:	2f e8       	sub	r8,-2
800121e4:	11 88       	ld.ub	r8,r8[0x0]
}
800121e6:	10 9c       	mov	r12,r8
800121e8:	2f fd       	sub	sp,-4
800121ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800121ee <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
800121ee:	eb cd 40 80 	pushm	r7,lr
800121f2:	1a 97       	mov	r7,sp
800121f4:	20 1d       	sub	sp,4
800121f6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
800121fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800121fe:	2f 88       	sub	r8,-8
80012200:	2f d8       	sub	r8,-3
80012202:	11 88       	ld.ub	r8,r8[0x0]
}
80012204:	10 9c       	mov	r12,r8
80012206:	2f fd       	sub	sp,-4
80012208:	e3 cd 80 80 	ldm	sp++,r7,pc

8001220c <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
8001220c:	eb cd 40 80 	pushm	r7,lr
80012210:	1a 97       	mov	r7,sp
80012212:	20 1d       	sub	sp,4
80012214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80012218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001221c:	2f 88       	sub	r8,-8
8001221e:	2f c8       	sub	r8,-4
80012220:	11 88       	ld.ub	r8,r8[0x0]
}
80012222:	10 9c       	mov	r12,r8
80012224:	2f fd       	sub	sp,-4
80012226:	e3 cd 80 80 	ldm	sp++,r7,pc

8001222a <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
8001222a:	eb cd 40 c0 	pushm	r6-r7,lr
8001222e:	1a 97       	mov	r7,sp
80012230:	20 1d       	sub	sp,4
80012232:	48 86       	lddpc	r6,80012250 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80012234:	1e 26       	rsub	r6,pc
80012236:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001223a:	30 0b       	mov	r11,0
8001223c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012240:	c8 ee       	rcall	80011f5c <_MAV_RETURN_uint16_t>
80012242:	18 98       	mov	r8,r12
80012244:	5c 88       	casts.h	r8
80012246:	5c 88       	casts.h	r8
}
80012248:	10 9c       	mov	r12,r8
8001224a:	2f fd       	sub	sp,-4
8001224c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012250:	80 01       	ld.sh	r1,r0[0x0]
80012252:	20 b8       	sub	r8,11

80012254 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80012254:	eb cd 40 80 	pushm	r7,lr
80012258:	1a 97       	mov	r7,sp
8001225a:	20 1d       	sub	sp,4
8001225c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80012260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012264:	2f 88       	sub	r8,-8
80012266:	2f b8       	sub	r8,-5
80012268:	11 88       	ld.ub	r8,r8[0x0]
}
8001226a:	10 9c       	mov	r12,r8
8001226c:	2f fd       	sub	sp,-4
8001226e:	e3 cd 80 80 	ldm	sp++,r7,pc

80012272 <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
80012272:	eb cd 40 c0 	pushm	r6-r7,lr
80012276:	1a 97       	mov	r7,sp
80012278:	20 2d       	sub	sp,8
8001227a:	49 76       	lddpc	r6,800122d4 <mavlink_msg_request_data_stream_decode+0x62>
8001227c:	1e 26       	rsub	r6,pc
8001227e:	ef 4c ff fc 	st.w	r7[-4],r12
80012282:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
80012286:	ee fc ff fc 	ld.w	r12,r7[-4]
8001228a:	cd 0f       	rcall	8001222a <mavlink_msg_request_data_stream_get_req_message_rate>
8001228c:	18 98       	mov	r8,r12
8001228e:	5c 88       	casts.h	r8
80012290:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012294:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
80012296:	ee fc ff fc 	ld.w	r12,r7[-4]
8001229a:	c9 bf       	rcall	800121d0 <mavlink_msg_request_data_stream_get_target_system>
8001229c:	18 98       	mov	r8,r12
8001229e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122a2:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
800122a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800122a8:	ca 3f       	rcall	800121ee <mavlink_msg_request_data_stream_get_target_component>
800122aa:	18 98       	mov	r8,r12
800122ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122b0:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
800122b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800122b6:	ca bf       	rcall	8001220c <mavlink_msg_request_data_stream_get_req_stream_id>
800122b8:	18 98       	mov	r8,r12
800122ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122be:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
800122c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800122c4:	cc 8f       	rcall	80012254 <mavlink_msg_request_data_stream_get_start_stop>
800122c6:	18 98       	mov	r8,r12
800122c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122cc:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
800122ce:	2f ed       	sub	sp,-8
800122d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800122d4:	80 01       	ld.sh	r1,r0[0x0]
800122d6:	21 00       	sub	r0,16

800122d8 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
800122d8:	eb cd 40 80 	pushm	r7,lr
800122dc:	1a 97       	mov	r7,sp
800122de:	20 1d       	sub	sp,4
800122e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
800122e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800122e8:	2f 88       	sub	r8,-8
800122ea:	2e 28       	sub	r8,-30
800122ec:	11 88       	ld.ub	r8,r8[0x0]
}
800122ee:	10 9c       	mov	r12,r8
800122f0:	2f fd       	sub	sp,-4
800122f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800122f6 <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
800122f6:	eb cd 40 80 	pushm	r7,lr
800122fa:	1a 97       	mov	r7,sp
800122fc:	20 1d       	sub	sp,4
800122fe:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
80012302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012306:	2f 88       	sub	r8,-8
80012308:	2e 18       	sub	r8,-31
8001230a:	11 88       	ld.ub	r8,r8[0x0]
}
8001230c:	10 9c       	mov	r12,r8
8001230e:	2f fd       	sub	sp,-4
80012310:	e3 cd 80 80 	ldm	sp++,r7,pc

80012314 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
80012314:	eb cd 40 c0 	pushm	r6-r7,lr
80012318:	1a 97       	mov	r7,sp
8001231a:	20 1d       	sub	sp,4
8001231c:	48 86       	lddpc	r6,8001233c <mavlink_msg_command_long_get_command+0x28>
8001231e:	1e 26       	rsub	r6,pc
80012320:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80012324:	31 cb       	mov	r11,28
80012326:	ee fc ff fc 	ld.w	r12,r7[-4]
8001232a:	c1 9e       	rcall	80011f5c <_MAV_RETURN_uint16_t>
8001232c:	18 98       	mov	r8,r12
8001232e:	5c 88       	casts.h	r8
80012330:	5c 88       	casts.h	r8
}
80012332:	10 9c       	mov	r12,r8
80012334:	2f fd       	sub	sp,-4
80012336:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001233a:	00 00       	add	r0,r0
8001233c:	80 01       	ld.sh	r1,r0[0x0]
8001233e:	21 a2       	sub	r2,26

80012340 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
80012340:	eb cd 40 80 	pushm	r7,lr
80012344:	1a 97       	mov	r7,sp
80012346:	20 1d       	sub	sp,4
80012348:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001234c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012350:	2f 88       	sub	r8,-8
80012352:	2e 08       	sub	r8,-32
80012354:	11 88       	ld.ub	r8,r8[0x0]
}
80012356:	10 9c       	mov	r12,r8
80012358:	2f fd       	sub	sp,-4
8001235a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001235e <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
8001235e:	eb cd 40 c0 	pushm	r6-r7,lr
80012362:	1a 97       	mov	r7,sp
80012364:	20 1d       	sub	sp,4
80012366:	48 76       	lddpc	r6,80012380 <mavlink_msg_command_long_get_param1+0x22>
80012368:	1e 26       	rsub	r6,pc
8001236a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001236e:	30 0b       	mov	r11,0
80012370:	ee fc ff fc 	ld.w	r12,r7[-4]
80012374:	c3 4e       	rcall	80011fdc <_MAV_RETURN_float>
80012376:	18 98       	mov	r8,r12
}
80012378:	10 9c       	mov	r12,r8
8001237a:	2f fd       	sub	sp,-4
8001237c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012380:	80 01       	ld.sh	r1,r0[0x0]
80012382:	21 ec       	sub	r12,30

80012384 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
80012384:	eb cd 40 c0 	pushm	r6-r7,lr
80012388:	1a 97       	mov	r7,sp
8001238a:	20 1d       	sub	sp,4
8001238c:	48 76       	lddpc	r6,800123a8 <mavlink_msg_command_long_get_param2+0x24>
8001238e:	1e 26       	rsub	r6,pc
80012390:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
80012394:	30 4b       	mov	r11,4
80012396:	ee fc ff fc 	ld.w	r12,r7[-4]
8001239a:	c2 1e       	rcall	80011fdc <_MAV_RETURN_float>
8001239c:	18 98       	mov	r8,r12
}
8001239e:	10 9c       	mov	r12,r8
800123a0:	2f fd       	sub	sp,-4
800123a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123a6:	00 00       	add	r0,r0
800123a8:	80 01       	ld.sh	r1,r0[0x0]
800123aa:	22 12       	sub	r2,33

800123ac <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
800123ac:	eb cd 40 c0 	pushm	r6-r7,lr
800123b0:	1a 97       	mov	r7,sp
800123b2:	20 1d       	sub	sp,4
800123b4:	48 76       	lddpc	r6,800123d0 <mavlink_msg_command_long_get_param3+0x24>
800123b6:	1e 26       	rsub	r6,pc
800123b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
800123bc:	30 8b       	mov	r11,8
800123be:	ee fc ff fc 	ld.w	r12,r7[-4]
800123c2:	c0 de       	rcall	80011fdc <_MAV_RETURN_float>
800123c4:	18 98       	mov	r8,r12
}
800123c6:	10 9c       	mov	r12,r8
800123c8:	2f fd       	sub	sp,-4
800123ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123ce:	00 00       	add	r0,r0
800123d0:	80 01       	ld.sh	r1,r0[0x0]
800123d2:	22 3a       	sub	r10,35

800123d4 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
800123d4:	eb cd 40 c0 	pushm	r6-r7,lr
800123d8:	1a 97       	mov	r7,sp
800123da:	20 1d       	sub	sp,4
800123dc:	48 76       	lddpc	r6,800123f8 <mavlink_msg_command_long_get_param4+0x24>
800123de:	1e 26       	rsub	r6,pc
800123e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
800123e4:	30 cb       	mov	r11,12
800123e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800123ea:	fe b0 fd f9 	rcall	80011fdc <_MAV_RETURN_float>
800123ee:	18 98       	mov	r8,r12
}
800123f0:	10 9c       	mov	r12,r8
800123f2:	2f fd       	sub	sp,-4
800123f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123f8:	80 01       	ld.sh	r1,r0[0x0]
800123fa:	22 62       	sub	r2,38

800123fc <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
800123fc:	eb cd 40 c0 	pushm	r6-r7,lr
80012400:	1a 97       	mov	r7,sp
80012402:	20 1d       	sub	sp,4
80012404:	48 76       	lddpc	r6,80012420 <mavlink_msg_command_long_get_param5+0x24>
80012406:	1e 26       	rsub	r6,pc
80012408:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001240c:	31 0b       	mov	r11,16
8001240e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012412:	fe b0 fd e5 	rcall	80011fdc <_MAV_RETURN_float>
80012416:	18 98       	mov	r8,r12
}
80012418:	10 9c       	mov	r12,r8
8001241a:	2f fd       	sub	sp,-4
8001241c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012420:	80 01       	ld.sh	r1,r0[0x0]
80012422:	22 8a       	sub	r10,40

80012424 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
80012424:	eb cd 40 c0 	pushm	r6-r7,lr
80012428:	1a 97       	mov	r7,sp
8001242a:	20 1d       	sub	sp,4
8001242c:	48 76       	lddpc	r6,80012448 <mavlink_msg_command_long_get_param6+0x24>
8001242e:	1e 26       	rsub	r6,pc
80012430:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80012434:	31 4b       	mov	r11,20
80012436:	ee fc ff fc 	ld.w	r12,r7[-4]
8001243a:	fe b0 fd d1 	rcall	80011fdc <_MAV_RETURN_float>
8001243e:	18 98       	mov	r8,r12
}
80012440:	10 9c       	mov	r12,r8
80012442:	2f fd       	sub	sp,-4
80012444:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012448:	80 01       	ld.sh	r1,r0[0x0]
8001244a:	22 b2       	sub	r2,43

8001244c <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
8001244c:	eb cd 40 c0 	pushm	r6-r7,lr
80012450:	1a 97       	mov	r7,sp
80012452:	20 1d       	sub	sp,4
80012454:	48 76       	lddpc	r6,80012470 <mavlink_msg_command_long_get_param7+0x24>
80012456:	1e 26       	rsub	r6,pc
80012458:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001245c:	31 8b       	mov	r11,24
8001245e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012462:	fe b0 fd bd 	rcall	80011fdc <_MAV_RETURN_float>
80012466:	18 98       	mov	r8,r12
}
80012468:	10 9c       	mov	r12,r8
8001246a:	2f fd       	sub	sp,-4
8001246c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012470:	80 01       	ld.sh	r1,r0[0x0]
80012472:	22 da       	sub	r10,45

80012474 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
80012474:	eb cd 40 c0 	pushm	r6-r7,lr
80012478:	1a 97       	mov	r7,sp
8001247a:	20 2d       	sub	sp,8
8001247c:	4a e6       	lddpc	r6,80012534 <mavlink_msg_command_long_decode+0xc0>
8001247e:	1e 26       	rsub	r6,pc
80012480:	ef 4c ff fc 	st.w	r7[-4],r12
80012484:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
80012488:	ee fc ff fc 	ld.w	r12,r7[-4]
8001248c:	c6 9f       	rcall	8001235e <mavlink_msg_command_long_get_param1>
8001248e:	18 99       	mov	r9,r12
80012490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012494:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
80012496:	ee fc ff fc 	ld.w	r12,r7[-4]
8001249a:	c7 5f       	rcall	80012384 <mavlink_msg_command_long_get_param2>
8001249c:	18 99       	mov	r9,r12
8001249e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124a2:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
800124a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800124a8:	c8 2f       	rcall	800123ac <mavlink_msg_command_long_get_param3>
800124aa:	18 99       	mov	r9,r12
800124ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124b0:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
800124b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800124b6:	c8 ff       	rcall	800123d4 <mavlink_msg_command_long_get_param4>
800124b8:	18 99       	mov	r9,r12
800124ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124be:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
800124c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800124c4:	c9 cf       	rcall	800123fc <mavlink_msg_command_long_get_param5>
800124c6:	18 99       	mov	r9,r12
800124c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124cc:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
800124ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800124d2:	ca 9f       	rcall	80012424 <mavlink_msg_command_long_get_param6>
800124d4:	18 99       	mov	r9,r12
800124d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124da:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
800124dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800124e0:	cb 6f       	rcall	8001244c <mavlink_msg_command_long_get_param7>
800124e2:	18 99       	mov	r9,r12
800124e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124e8:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
800124ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800124ee:	c1 3f       	rcall	80012314 <mavlink_msg_command_long_get_command>
800124f0:	18 98       	mov	r8,r12
800124f2:	5c 88       	casts.h	r8
800124f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124f8:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
800124fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80012500:	ce ce       	rcall	800122d8 <mavlink_msg_command_long_get_target_system>
80012502:	18 98       	mov	r8,r12
80012504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012508:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
8001250c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012510:	cf 3e       	rcall	800122f6 <mavlink_msg_command_long_get_target_component>
80012512:	18 98       	mov	r8,r12
80012514:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012518:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
8001251c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012520:	c1 0f       	rcall	80012340 <mavlink_msg_command_long_get_confirmation>
80012522:	18 98       	mov	r8,r12
80012524:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012528:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
8001252c:	2f ed       	sub	sp,-8
8001252e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012532:	00 00       	add	r0,r0
80012534:	80 01       	ld.sh	r1,r0[0x0]
80012536:	23 02       	sub	r2,48

80012538 <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
80012538:	eb cd 40 c0 	pushm	r6-r7,lr
8001253c:	1a 97       	mov	r7,sp
8001253e:	20 2d       	sub	sp,8
80012540:	48 e6       	lddpc	r6,80012578 <comm_send_ch+0x40>
80012542:	1e 26       	rsub	r6,pc
80012544:	ef 4c ff fc 	st.w	r7[-4],r12
80012548:	16 98       	mov	r8,r11
8001254a:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
8001254e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012552:	58 08       	cp.w	r8,0
80012554:	c0 e1       	brne	80012570 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
80012556:	ec f8 01 68 	ld.w	r8,r6[360]
8001255a:	70 08       	ld.w	r8,r8[0x0]
8001255c:	70 18       	ld.w	r8,r8[0x4]
8001255e:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80012562:	ec f9 01 68 	ld.w	r9,r6[360]
80012566:	72 09       	ld.w	r9,r9[0x0]
80012568:	72 59       	ld.w	r9,r9[0x14]
8001256a:	14 9b       	mov	r11,r10
8001256c:	12 9c       	mov	r12,r9
8001256e:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80012570:	2f ed       	sub	sp,-8
80012572:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012576:	00 00       	add	r0,r0
80012578:	80 01       	ld.sh	r1,r0[0x0]
8001257a:	23 c6       	sub	r6,60
8001257c:	0a 20       	rsub	r0,r5
8001257e:	52 65       	stdsp	sp[0x98],r5
80012580:	63 65       	ld.w	r5,r1[0x58]
80012582:	69 76       	ld.w	r6,r4[0x5c]
80012584:	65 64       	ld.w	r4,r2[0x58]
80012586:	20 6d       	sub	sp,24
80012588:	65 73       	ld.w	r3,r2[0x5c]
8001258a:	73 61       	ld.w	r1,r9[0x58]
8001258c:	67 65       	ld.w	r5,r3[0x58]
8001258e:	20 77       	sub	r7,7
80012590:	69 74       	ld.w	r4,r4[0x5c]
80012592:	68 20       	ld.w	r0,r4[0x8]
80012594:	49 44       	lddpc	r4,800125e4 <mavlink_receive_handler+0x2a>
80012596:	00 00       	add	r0,r0
80012598:	20 66       	sub	r6,6
8001259a:	72 6f       	ld.w	pc,r9[0x18]
8001259c:	6d 20       	ld.w	r0,r6[0x48]
8001259e:	73 79       	ld.w	r9,r9[0x5c]
800125a0:	73 74       	ld.w	r4,r9[0x5c]
800125a2:	65 6d       	ld.w	sp,r2[0x58]
800125a4:	00 00       	add	r0,r0
800125a6:	00 00       	add	r0,r0
800125a8:	20 66       	sub	r6,6
800125aa:	6f 72       	ld.w	r2,r7[0x5c]
800125ac:	20 63       	sub	r3,6
800125ae:	6f 6d       	ld.w	sp,r7[0x58]
800125b0:	70 6f       	ld.w	pc,r8[0x18]
800125b2:	6e 65       	ld.w	r5,r7[0x18]
800125b4:	6e 74       	ld.w	r4,r7[0x1c]
800125b6:	00 00       	add	r0,r0
800125b8:	0a 00       	add	r0,r5

800125ba <mavlink_receive_handler>:

void mavlink_receive_handler() {
800125ba:	eb cd 40 c0 	pushm	r6-r7,lr
800125be:	1a 97       	mov	r7,sp
800125c0:	fa cd 01 20 	sub	sp,sp,288
800125c4:	4a 56       	lddpc	r6,80012658 <mavlink_receive_handler+0x9e>
800125c6:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
800125c8:	ec f8 04 e4 	ld.w	r8,r6[1252]
800125cc:	70 08       	ld.w	r8,r8[0x0]
800125ce:	ee c9 01 20 	sub	r9,r7,288
800125d2:	12 9b       	mov	r11,r9
800125d4:	10 9c       	mov	r12,r8
800125d6:	f0 16 01 47 	mcall	r6[1308]
800125da:	18 98       	mov	r8,r12
800125dc:	58 08       	cp.w	r8,0
800125de:	c3 a0       	breq	80012652 <mavlink_receive_handler+0x98>
		dbg_print("\n Received message with ID");
800125e0:	fe cc 00 64 	sub	r12,pc,100
800125e4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
800125e8:	ef 38 fe e7 	ld.ub	r8,r7[-281]
800125ec:	30 ab       	mov	r11,10
800125ee:	10 9c       	mov	r12,r8
800125f0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
800125f4:	fe cc 00 5c 	sub	r12,pc,92
800125f8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
800125fc:	ef 38 fe e5 	ld.ub	r8,r7[-283]
80012600:	30 ab       	mov	r11,10
80012602:	10 9c       	mov	r12,r8
80012604:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
80012608:	fe cc 00 60 	sub	r12,pc,96
8001260c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
80012610:	ef 38 fe e6 	ld.ub	r8,r7[-282]
80012614:	30 ab       	mov	r11,10
80012616:	10 9c       	mov	r12,r8
80012618:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
8001261c:	fe cc 00 64 	sub	r12,pc,100
80012620:	f0 16 00 01 	mcall	r6[4]
		if (rec.msg.sysid == MAVLINK_BASE_STATION_ID)
80012624:	ef 39 fe e5 	ld.ub	r9,r7[-283]
80012628:	3f f8       	mov	r8,-1
8001262a:	f0 09 18 00 	cp.b	r9,r8
8001262e:	c0 71       	brne	8001263c <mavlink_receive_handler+0x82>
		{
			handle_mavlink_message(&rec);
80012630:	ee c8 01 20 	sub	r8,r7,288
80012634:	10 9c       	mov	r12,r8
80012636:	f0 16 01 7c 	mcall	r6[1520]
8001263a:	c0 c8       	rjmp	80012652 <mavlink_receive_handler+0x98>
		}else if (rec.msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
8001263c:	ef 39 fe e7 	ld.ub	r9,r7[-281]
80012640:	32 18       	mov	r8,33
80012642:	f0 09 18 00 	cp.b	r9,r8
80012646:	c0 61       	brne	80012652 <mavlink_receive_handler+0x98>
			//dbg_print_num(rec.msg.sysid, 10);
			//dbg_print(" for component");
			//dbg_print_num(rec.msg.compid,10);
			//dbg_print( "\n");
			
			read_msg_from_neighbors(&rec);
80012648:	ee c8 01 20 	sub	r8,r7,288
8001264c:	10 9c       	mov	r12,r8
8001264e:	f0 16 01 41 	mcall	r6[1284]
		}
		
	}
}
80012652:	2b 8d       	sub	sp,-288
80012654:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012658:	80 01       	ld.sh	r1,r0[0x0]
8001265a:	24 4a       	sub	r10,68

8001265c <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
8001265c:	eb cd 40 c0 	pushm	r6-r7,lr
80012660:	1a 97       	mov	r7,sp
80012662:	20 3d       	sub	sp,12
80012664:	4a 36       	lddpc	r6,800126f0 <init_mavlink+0x94>
80012666:	1e 26       	rsub	r6,pc
80012668:	ef 4c ff fc 	st.w	r7[-4],r12
8001266c:	ef 4b ff f8 	st.w	r7[-8],r11
80012670:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80012674:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012678:	5c 58       	castu.b	r8
8001267a:	ec f9 00 74 	ld.w	r9,r6[116]
8001267e:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80012680:	ec f9 00 74 	ld.w	r9,r6[116]
80012684:	33 28       	mov	r8,50
80012686:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
80012688:	ec f9 00 74 	ld.w	r9,r6[116]
8001268c:	30 28       	mov	r8,2
8001268e:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80012690:	ec f8 00 74 	ld.w	r8,r6[116]
80012694:	11 88       	ld.ub	r8,r8[0x0]
80012696:	ec f9 00 c8 	ld.w	r9,r6[200]
8001269a:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
8001269c:	ec f9 00 c8 	ld.w	r9,r6[200]
800126a0:	3b e8       	mov	r8,-66
800126a2:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
800126a4:	ec f9 00 c8 	ld.w	r9,r6[200]
800126a8:	30 28       	mov	r8,2
800126aa:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
800126ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800126b0:	ec f8 01 68 	ld.w	r8,r6[360]
800126b4:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
800126b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800126ba:	ec f8 04 e4 	ld.w	r8,r6[1252]
800126be:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
800126c0:	ec f8 01 2c 	ld.w	r8,r6[300]
800126c4:	10 9c       	mov	r12,r8
800126c6:	f0 16 01 0c 	mcall	r6[1072]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
800126ca:	ec f9 05 3c 	ld.w	r9,r6[1340]
800126ce:	ec fc 01 2c 	ld.w	r12,r6[300]
800126d2:	31 68       	mov	r8,22
800126d4:	30 2a       	mov	r10,2
800126d6:	e0 7b 86 a0 	mov	r11,100000
800126da:	f0 16 00 25 	mcall	r6[148]

	centralData = get_central_data();
800126de:	f0 16 00 33 	mcall	r6[204]
800126e2:	18 99       	mov	r9,r12
800126e4:	ec f8 00 00 	ld.w	r8,r6[0]
800126e8:	91 09       	st.w	r8[0x0],r9
}
800126ea:	2f dd       	sub	sp,-12
800126ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800126f0:	80 01       	ld.sh	r1,r0[0x0]
800126f2:	24 ea       	sub	r10,78

800126f4 <flush_mavlink>:

void flush_mavlink() {
800126f4:	eb cd 40 c0 	pushm	r6-r7,lr
800126f8:	1a 97       	mov	r7,sp
800126fa:	48 b6       	lddpc	r6,80012724 <flush_mavlink+0x30>
800126fc:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
800126fe:	ec f8 01 68 	ld.w	r8,r6[360]
80012702:	70 08       	ld.w	r8,r8[0x0]
80012704:	70 28       	ld.w	r8,r8[0x8]
80012706:	58 08       	cp.w	r8,0
80012708:	c0 b0       	breq	8001271e <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
8001270a:	ec f8 01 68 	ld.w	r8,r6[360]
8001270e:	70 08       	ld.w	r8,r8[0x0]
80012710:	70 28       	ld.w	r8,r8[0x8]
80012712:	ec f9 01 68 	ld.w	r9,r6[360]
80012716:	72 09       	ld.w	r9,r9[0x0]
80012718:	72 59       	ld.w	r9,r9[0x14]
8001271a:	12 9c       	mov	r12,r9
8001271c:	5d 18       	icall	r8
	
	}
}
8001271e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012722:	00 00       	add	r0,r0
80012724:	80 01       	ld.sh	r1,r0[0x0]
80012726:	25 80       	sub	r0,88

80012728 <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
80012728:	eb cd 40 c0 	pushm	r6-r7,lr
8001272c:	1a 97       	mov	r7,sp
8001272e:	20 1d       	sub	sp,4
80012730:	49 c6       	lddpc	r6,800127a0 <mavlink_protocol_update+0x78>
80012732:	1e 26       	rsub	r6,pc
	task_return_t result=0;
80012734:	30 08       	mov	r8,0
80012736:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
8001273a:	f0 16 02 26 	mcall	r6[2200]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
8001273e:	ec f8 01 68 	ld.w	r8,r6[360]
80012742:	70 08       	ld.w	r8,r8[0x0]
80012744:	70 38       	ld.w	r8,r8[0xc]
80012746:	ec f9 01 68 	ld.w	r9,r6[360]
8001274a:	72 09       	ld.w	r9,r9[0x0]
8001274c:	72 59       	ld.w	r9,r9[0x14]
8001274e:	12 9c       	mov	r12,r9
80012750:	5d 18       	icall	r8
80012752:	18 98       	mov	r8,r12
80012754:	58 18       	cp.w	r8,1
80012756:	c0 c1       	brne	8001276e <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
80012758:	ec f8 01 2c 	ld.w	r8,r6[300]
8001275c:	30 0b       	mov	r11,0
8001275e:	10 9c       	mov	r12,r8
80012760:	f0 16 00 ef 	mcall	r6[956]
80012764:	18 98       	mov	r8,r12
80012766:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
8001276a:	f0 16 00 3c 	mcall	r6[240]
	}
	
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
8001276e:	ec f8 00 00 	ld.w	r8,r6[0]
80012772:	70 08       	ld.w	r8,r8[0x0]
80012774:	f0 ca ef 4b 	sub	r10,r8,-4277
80012778:	ec f8 00 00 	ld.w	r8,r6[0]
8001277c:	70 08       	ld.w	r8,r8[0x0]
8001277e:	f0 c9 ef 4a 	sub	r9,r8,-4278
80012782:	ec f8 00 00 	ld.w	r8,r6[0]
80012786:	70 08       	ld.w	r8,r8[0x0]
80012788:	f0 c8 ef e4 	sub	r8,r8,-4124
8001278c:	12 9b       	mov	r11,r9
8001278e:	10 9c       	mov	r12,r8
80012790:	f0 16 02 10 	mcall	r6[2112]
	
	
	return result;
80012794:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80012798:	10 9c       	mov	r12,r8
8001279a:	2f fd       	sub	sp,-4
8001279c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127a0:	80 01       	ld.sh	r1,r0[0x0]
800127a2:	25 b6       	sub	r6,91

800127a4 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
800127a4:	eb cd 40 c0 	pushm	r6-r7,lr
800127a8:	1a 97       	mov	r7,sp
800127aa:	48 46       	lddpc	r6,800127b8 <get_mavlink_taskset+0x14>
800127ac:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
800127ae:	ec f8 01 2c 	ld.w	r8,r6[300]
}
800127b2:	10 9c       	mov	r12,r8
800127b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127b8:	80 01       	ld.sh	r1,r0[0x0]
800127ba:	26 30       	sub	r0,99

800127bc <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
800127bc:	eb cd 40 c0 	pushm	r6-r7,lr
800127c0:	1a 97       	mov	r7,sp
800127c2:	20 2d       	sub	sp,8
800127c4:	49 56       	lddpc	r6,80012818 <suspend_downstream+0x5c>
800127c6:	1e 26       	rsub	r6,pc
800127c8:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800127cc:	30 08       	mov	r8,0
800127ce:	ef 48 ff fc 	st.w	r7[-4],r8
800127d2:	c1 78       	rjmp	80012800 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
800127d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800127d8:	12 98       	mov	r8,r9
800127da:	a1 78       	lsl	r8,0x1
800127dc:	12 08       	add	r8,r9
800127de:	a5 68       	lsl	r8,0x4
800127e0:	10 99       	mov	r9,r8
800127e2:	ec f8 01 2c 	ld.w	r8,r6[300]
800127e6:	2f c8       	sub	r8,-4
800127e8:	f2 08 00 08 	add	r8,r9,r8
800127ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800127f0:	10 9c       	mov	r12,r8
800127f2:	f0 16 01 c0 	mcall	r6[1792]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800127f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127fa:	2f f8       	sub	r8,-1
800127fc:	ef 48 ff fc 	st.w	r7[-4],r8
80012800:	ec f8 01 2c 	ld.w	r8,r6[300]
80012804:	11 88       	ld.ub	r8,r8[0x0]
80012806:	10 99       	mov	r9,r8
80012808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001280c:	10 39       	cp.w	r9,r8
8001280e:	fe 99 ff e3 	brgt	800127d4 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
80012812:	2f ed       	sub	sp,-8
80012814:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012818:	80 01       	ld.sh	r1,r0[0x0]
8001281a:	26 4a       	sub	r10,100

8001281c <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
8001281c:	eb cd 40 c0 	pushm	r6-r7,lr
80012820:	1a 97       	mov	r7,sp
80012822:	20 3d       	sub	sp,12
80012824:	49 a6       	lddpc	r6,8001288c <mavlink_receive+0x70>
80012826:	1e 26       	rsub	r6,pc
80012828:	ef 4c ff f8 	st.w	r7[-8],r12
8001282c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012830:	c1 d8       	rjmp	8001286a <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80012832:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012836:	70 08       	ld.w	r8,r8[0x0]
80012838:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001283c:	72 59       	ld.w	r9,r9[0x14]
8001283e:	12 9c       	mov	r12,r9
80012840:	5d 18       	icall	r8
80012842:	18 98       	mov	r8,r12
80012844:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
80012848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001284c:	f0 c9 fe f0 	sub	r9,r8,-272
80012850:	ee fa ff f4 	ld.w	r10,r7[-12]
80012854:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012858:	10 9b       	mov	r11,r8
8001285a:	30 0c       	mov	r12,0
8001285c:	fe b0 f9 32 	rcall	80011ac0 <mavlink_parse_char>
80012860:	18 98       	mov	r8,r12
80012862:	58 08       	cp.w	r8,0
80012864:	c0 30       	breq	8001286a <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
80012866:	30 18       	mov	r8,1
80012868:	c0 e8       	rjmp	80012884 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
8001286a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001286e:	70 48       	ld.w	r8,r8[0x10]
80012870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012874:	72 59       	ld.w	r9,r9[0x14]
80012876:	12 9c       	mov	r12,r9
80012878:	5d 18       	icall	r8
8001287a:	18 98       	mov	r8,r12
8001287c:	58 08       	cp.w	r8,0
8001287e:	fe 99 ff da 	brgt	80012832 <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
80012882:	30 08       	mov	r8,0
}
80012884:	10 9c       	mov	r12,r8
80012886:	2f dd       	sub	sp,-12
80012888:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001288c:	80 01       	ld.sh	r1,r0[0x0]
8001288e:	26 aa       	sub	r10,106
80012890:	6d 73       	ld.w	r3,r6[0x5c]
80012892:	67 20       	ld.w	r0,r3[0x48]
80012894:	63 6f       	ld.w	pc,r1[0x58]
80012896:	6d 70       	ld.w	r0,r6[0x5c]
80012898:	20 69       	sub	r9,6
8001289a:	64 3a       	ld.w	r10,r2[0xc]
8001289c:	00 00       	add	r0,r0
8001289e:	00 00       	add	r0,r0
800128a0:	73 74       	ld.w	r4,r9[0x5c]
800128a2:	72 65       	ld.w	r5,r9[0x18]
800128a4:	61 6d       	ld.w	sp,r0[0x58]
800128a6:	20 72       	sub	r2,7
800128a8:	65 71       	ld.w	r1,r2[0x5c]
800128aa:	75 65       	ld.w	r5,r10[0x58]
800128ac:	73 74       	ld.w	r4,r9[0x5c]
800128ae:	3a 00       	mov	r0,-96
800128b0:	73 65       	ld.w	r5,r9[0x58]
800128b2:	6e 64       	ld.w	r4,r7[0x18]
800128b4:	20 61       	sub	r1,6
800128b6:	6c 6c       	ld.w	r12,r6[0x18]
800128b8:	0a 00       	add	r0,r5
800128ba:	00 00       	add	r0,r0
800128bc:	20 73       	sub	r3,7
800128be:	74 72       	ld.w	r2,r10[0x1c]
800128c0:	65 61       	ld.w	r1,r2[0x58]
800128c2:	6d 3d       	ld.w	sp,r6[0x4c]
800128c4:	00 00       	add	r0,r0
800128c6:	00 00       	add	r0,r0
800128c8:	20 73       	sub	r3,7
800128ca:	74 61       	ld.w	r1,r10[0x18]
800128cc:	72 74       	ld.w	r4,r9[0x1c]
800128ce:	5f 73       	srpl	r3
800128d0:	74 6f       	ld.w	pc,r10[0x18]
800128d2:	70 3d       	ld.w	sp,r8[0xc]
800128d4:	00 00       	add	r0,r0
800128d6:	00 00       	add	r0,r0
800128d8:	20 72       	sub	r2,7
800128da:	61 74       	ld.w	r4,r0[0x5c]
800128dc:	65 3d       	ld.w	sp,r2[0x4c]
	...

800128e0 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
800128e0:	eb cd 40 c0 	pushm	r6-r7,lr
800128e4:	1a 97       	mov	r7,sp
800128e6:	20 cd       	sub	sp,48
800128e8:	fe f6 04 90 	ld.w	r6,pc[1168]
800128ec:	1e 26       	rsub	r6,pc
800128ee:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
800128f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800128f6:	11 f8       	ld.ub	r8,r8[0x7]
800128f8:	20 b8       	sub	r8,11
800128fa:	e0 48 00 41 	cp.w	r8,65
800128fe:	e0 8b 02 3a 	brhi	80012d72 <handle_mavlink_message+0x492>
80012902:	fe c9 ff f6 	sub	r9,pc,-10
80012906:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001290a:	00 00       	add	r0,r0
8001290c:	e0 8f 01 6b 	bral	80012be2 <handle_mavlink_message+0x302>
80012910:	e0 8f 02 31 	bral	80012d72 <handle_mavlink_message+0x492>
80012914:	e0 8f 02 2f 	bral	80012d72 <handle_mavlink_message+0x492>
80012918:	e0 8f 02 2d 	bral	80012d72 <handle_mavlink_message+0x492>
8001291c:	e0 8f 02 2b 	bral	80012d72 <handle_mavlink_message+0x492>
80012920:	e0 8f 02 29 	bral	80012d72 <handle_mavlink_message+0x492>
80012924:	e0 8f 02 27 	bral	80012d72 <handle_mavlink_message+0x492>
80012928:	e0 8f 02 25 	bral	80012d72 <handle_mavlink_message+0x492>
8001292c:	e0 8f 02 23 	bral	80012d72 <handle_mavlink_message+0x492>
80012930:	e0 8f 00 95 	bral	80012a5a <handle_mavlink_message+0x17a>
80012934:	e0 8f 00 70 	bral	80012a14 <handle_mavlink_message+0x134>
80012938:	e0 8f 02 1d 	bral	80012d72 <handle_mavlink_message+0x492>
8001293c:	e0 8f 00 b0 	bral	80012a9c <handle_mavlink_message+0x1bc>
80012940:	e0 8f 02 19 	bral	80012d72 <handle_mavlink_message+0x492>
80012944:	e0 8f 02 17 	bral	80012d72 <handle_mavlink_message+0x492>
80012948:	e0 8f 02 15 	bral	80012d72 <handle_mavlink_message+0x492>
8001294c:	e0 8f 02 13 	bral	80012d72 <handle_mavlink_message+0x492>
80012950:	e0 8f 02 11 	bral	80012d72 <handle_mavlink_message+0x492>
80012954:	e0 8f 02 0f 	bral	80012d72 <handle_mavlink_message+0x492>
80012958:	e0 8f 02 0d 	bral	80012d72 <handle_mavlink_message+0x492>
8001295c:	e0 8f 02 0b 	bral	80012d72 <handle_mavlink_message+0x492>
80012960:	e0 8f 02 09 	bral	80012d72 <handle_mavlink_message+0x492>
80012964:	e0 8f 02 07 	bral	80012d72 <handle_mavlink_message+0x492>
80012968:	e0 8f 02 05 	bral	80012d72 <handle_mavlink_message+0x492>
8001296c:	e0 8f 02 03 	bral	80012d72 <handle_mavlink_message+0x492>
80012970:	e0 8f 02 01 	bral	80012d72 <handle_mavlink_message+0x492>
80012974:	e0 8f 01 ff 	bral	80012d72 <handle_mavlink_message+0x492>
80012978:	e0 8f 01 fd 	bral	80012d72 <handle_mavlink_message+0x492>
8001297c:	e0 8f 00 9a 	bral	80012ab0 <handle_mavlink_message+0x1d0>
80012980:	e0 8f 00 b4 	bral	80012ae8 <handle_mavlink_message+0x208>
80012984:	e0 8f 00 cd 	bral	80012b1e <handle_mavlink_message+0x23e>
80012988:	e0 8f 01 f5 	bral	80012d72 <handle_mavlink_message+0x492>
8001298c:	e0 8f 00 dc 	bral	80012b44 <handle_mavlink_message+0x264>
80012990:	e0 8f 00 f4 	bral	80012b78 <handle_mavlink_message+0x298>
80012994:	e0 8f 01 0b 	bral	80012baa <handle_mavlink_message+0x2ca>
80012998:	e0 8f 01 ed 	bral	80012d72 <handle_mavlink_message+0x492>
8001299c:	e0 8f 01 18 	bral	80012bcc <handle_mavlink_message+0x2ec>
800129a0:	e0 8f 01 e9 	bral	80012d72 <handle_mavlink_message+0x492>
800129a4:	e0 8f 01 e7 	bral	80012d72 <handle_mavlink_message+0x492>
800129a8:	e0 8f 01 e5 	bral	80012d72 <handle_mavlink_message+0x492>
800129ac:	e0 8f 01 e3 	bral	80012d72 <handle_mavlink_message+0x492>
800129b0:	e0 8f 01 e1 	bral	80012d72 <handle_mavlink_message+0x492>
800129b4:	e0 8f 01 df 	bral	80012d72 <handle_mavlink_message+0x492>
800129b8:	e0 8f 01 dd 	bral	80012d72 <handle_mavlink_message+0x492>
800129bc:	e0 8f 01 db 	bral	80012d72 <handle_mavlink_message+0x492>
800129c0:	e0 8f 01 d9 	bral	80012d72 <handle_mavlink_message+0x492>
800129c4:	e0 8f 01 d7 	bral	80012d72 <handle_mavlink_message+0x492>
800129c8:	e0 8f 01 d5 	bral	80012d72 <handle_mavlink_message+0x492>
800129cc:	e0 8f 01 d3 	bral	80012d72 <handle_mavlink_message+0x492>
800129d0:	e0 8f 01 d1 	bral	80012d72 <handle_mavlink_message+0x492>
800129d4:	e0 8f 01 cf 	bral	80012d72 <handle_mavlink_message+0x492>
800129d8:	e0 8f 01 cd 	bral	80012d72 <handle_mavlink_message+0x492>
800129dc:	e0 8f 01 cb 	bral	80012d72 <handle_mavlink_message+0x492>
800129e0:	e0 8f 01 c9 	bral	80012d72 <handle_mavlink_message+0x492>
800129e4:	e0 8f 01 c7 	bral	80012d72 <handle_mavlink_message+0x492>
800129e8:	e0 8f 01 19 	bral	80012c1a <handle_mavlink_message+0x33a>
800129ec:	e0 8f 01 c3 	bral	80012d72 <handle_mavlink_message+0x492>
800129f0:	e0 8f 01 c1 	bral	80012d72 <handle_mavlink_message+0x492>
800129f4:	e0 8f 01 bf 	bral	80012d72 <handle_mavlink_message+0x492>
800129f8:	e0 8f 01 bd 	bral	80012d72 <handle_mavlink_message+0x492>
800129fc:	e0 8f 01 bb 	bral	80012d72 <handle_mavlink_message+0x492>
80012a00:	e0 8f 01 b9 	bral	80012d72 <handle_mavlink_message+0x492>
80012a04:	e0 8f 01 b7 	bral	80012d72 <handle_mavlink_message+0x492>
80012a08:	e0 8f 01 b5 	bral	80012d72 <handle_mavlink_message+0x492>
80012a0c:	e0 8f 01 b3 	bral	80012d72 <handle_mavlink_message+0x492>
80012a10:	e0 8f 01 00 	bral	80012c10 <handle_mavlink_message+0x330>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
80012a14:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012a18:	ee c9 00 12 	sub	r9,r7,18
80012a1c:	12 9b       	mov	r11,r9
80012a1e:	10 9c       	mov	r12,r8
80012a20:	fe b0 fb bb 	rcall	80012196 <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
80012a24:	fe cc 01 94 	sub	r12,pc,404
80012a28:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
80012a2c:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80012a30:	30 ab       	mov	r11,10
80012a32:	10 9c       	mov	r12,r8
80012a34:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80012a38:	fe cc 04 80 	sub	r12,pc,1152
80012a3c:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80012a40:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80012a44:	ec f8 00 74 	ld.w	r8,r6[116]
80012a48:	11 88       	ld.ub	r8,r8[0x0]
80012a4a:	f0 09 18 00 	cp.b	r9,r8
80012a4e:	e0 81 01 8d 	brne	80012d68 <handle_mavlink_message+0x488>
				send_all_parameters();
80012a52:	f0 16 01 58 	mcall	r6[1376]
			}				
		}
		break;
80012a56:	e0 8f 01 8e 	bral	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80012a5a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012a5e:	ee c9 00 26 	sub	r9,r7,38
80012a62:	12 9b       	mov	r11,r9
80012a64:	10 9c       	mov	r12,r8
80012a66:	fe b0 fb 4f 	rcall	80012104 <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012a6a:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80012a6e:	ec f8 00 74 	ld.w	r8,r6[116]
80012a72:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012a74:	f0 09 18 00 	cp.b	r9,r8
80012a78:	e0 81 01 7a 	brne	80012d6c <handle_mavlink_message+0x48c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012a7c:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80012a80:	ec f8 00 74 	ld.w	r8,r6[116]
80012a84:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012a86:	f0 09 18 00 	cp.b	r9,r8
80012a8a:	e0 81 01 73 	brne	80012d70 <handle_mavlink_message+0x490>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
80012a8e:	ee c8 00 26 	sub	r8,r7,38
80012a92:	10 9c       	mov	r12,r8
80012a94:	f0 16 01 52 	mcall	r6[1352]
			}				
		}
		break;
80012a98:	e0 8f 01 6d 	bral	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
80012a9c:	e0 7c 86 a0 	mov	r12,100000
80012aa0:	f0 16 00 7a 	mcall	r6[488]
			receive_parameter(rec);
80012aa4:	ee fc ff d0 	ld.w	r12,r7[-48]
80012aa8:	f0 16 01 7b 	mcall	r6[1516]
		}
		break;
80012aac:	e0 8f 01 63 	bral	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
			suspend_downstream(500000);
80012ab0:	e6 7c a1 20 	mov	r12,500000
80012ab4:	f0 16 00 7a 	mcall	r6[488]
			receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
80012ab8:	ec f8 00 00 	ld.w	r8,r6[0]
80012abc:	70 08       	ld.w	r8,r8[0x0]
80012abe:	f0 c9 ef 4a 	sub	r9,r8,-4278
80012ac2:	ec f8 00 00 	ld.w	r8,r6[0]
80012ac6:	70 08       	ld.w	r8,r8[0x0]
80012ac8:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012acc:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80012ad0:	ec f8 00 00 	ld.w	r8,r6[0]
80012ad4:	70 08       	ld.w	r8,r8[0x0]
80012ad6:	f0 c8 f1 f4 	sub	r8,r8,-3596
80012ada:	10 9b       	mov	r11,r8
80012adc:	ee fc ff d0 	ld.w	r12,r7[-48]
80012ae0:	f0 16 01 6b 	mcall	r6[1452]
		}
		break;
80012ae4:	e0 8f 01 47 	bral	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
			suspend_downstream(500000);
80012ae8:	e6 7c a1 20 	mov	r12,500000
80012aec:	f0 16 00 7a 	mcall	r6[488]
			send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
80012af0:	ec f8 00 00 	ld.w	r8,r6[0]
80012af4:	70 08       	ld.w	r8,r8[0x0]
80012af6:	f0 c9 ef 4b 	sub	r9,r8,-4277
80012afa:	ec f8 00 00 	ld.w	r8,r6[0]
80012afe:	70 08       	ld.w	r8,r8[0x0]
80012b00:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012b04:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80012b08:	ec f8 00 00 	ld.w	r8,r6[0]
80012b0c:	70 08       	ld.w	r8,r8[0x0]
80012b0e:	f0 c8 f1 f4 	sub	r8,r8,-3596
80012b12:	10 9b       	mov	r11,r8
80012b14:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b18:	f0 16 01 8d 	mcall	r6[1588]
		}
		break;
80012b1c:	c2 b9       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
			set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
80012b1e:	ec f8 00 00 	ld.w	r8,r6[0]
80012b22:	70 08       	ld.w	r8,r8[0x0]
80012b24:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012b28:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012b2c:	ec f8 00 00 	ld.w	r8,r6[0]
80012b30:	70 08       	ld.w	r8,r8[0x0]
80012b32:	f0 c8 f1 f4 	sub	r8,r8,-3596
80012b36:	12 9a       	mov	r10,r9
80012b38:	10 9b       	mov	r11,r8
80012b3a:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b3e:	f0 16 01 78 	mcall	r6[1504]
		}
		break;
80012b42:	c1 89       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
			// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80012b44:	e6 7c a1 20 	mov	r12,500000
80012b48:	f0 16 00 7a 	mcall	r6[488]
			send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012b4c:	ec f8 00 00 	ld.w	r8,r6[0]
80012b50:	70 08       	ld.w	r8,r8[0x0]
80012b52:	f0 c9 ef 4b 	sub	r9,r8,-4277
80012b56:	ec f8 00 00 	ld.w	r8,r6[0]
80012b5a:	70 08       	ld.w	r8,r8[0x0]
80012b5c:	f0 ca ef 4a 	sub	r10,r8,-4278
80012b60:	ec f8 00 00 	ld.w	r8,r6[0]
80012b64:	70 08       	ld.w	r8,r8[0x0]
80012b66:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80012b6a:	5c 78       	castu.h	r8
80012b6c:	10 9b       	mov	r11,r8
80012b6e:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b72:	f0 16 01 aa 	mcall	r6[1704]
		}
		break;
80012b76:	cf e8       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
			// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80012b78:	e6 7c a1 20 	mov	r12,500000
80012b7c:	f0 16 00 7a 	mcall	r6[488]
			receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012b80:	ec f8 00 00 	ld.w	r8,r6[0]
80012b84:	70 08       	ld.w	r8,r8[0x0]
80012b86:	f0 c9 ef 4b 	sub	r9,r8,-4277
80012b8a:	ec f8 00 00 	ld.w	r8,r6[0]
80012b8e:	70 08       	ld.w	r8,r8[0x0]
80012b90:	f0 ca ef 4a 	sub	r10,r8,-4278
80012b94:	ec f8 00 00 	ld.w	r8,r6[0]
80012b98:	70 08       	ld.w	r8,r8[0x0]
80012b9a:	f0 c8 ef e4 	sub	r8,r8,-4124
80012b9e:	10 9b       	mov	r11,r8
80012ba0:	ee fc ff d0 	ld.w	r12,r7[-48]
80012ba4:	f0 16 02 23 	mcall	r6[2188]
		}
		break;
80012ba8:	ce 58       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
			clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
80012baa:	ec f8 00 00 	ld.w	r8,r6[0]
80012bae:	70 08       	ld.w	r8,r8[0x0]
80012bb0:	f0 c9 ef 4c 	sub	r9,r8,-4276
80012bb4:	ec f8 00 00 	ld.w	r8,r6[0]
80012bb8:	70 08       	ld.w	r8,r8[0x0]
80012bba:	f0 c8 ef e4 	sub	r8,r8,-4124
80012bbe:	12 9a       	mov	r10,r9
80012bc0:	10 9b       	mov	r11,r8
80012bc2:	ee fc ff d0 	ld.w	r12,r7[-48]
80012bc6:	f0 16 01 82 	mcall	r6[1544]
		}
		break;
80012bca:	cd 48       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ACK : { // 47
			receive_ack_msg(rec,&centralData->waypoint_sending);
80012bcc:	ec f8 00 00 	ld.w	r8,r6[0]
80012bd0:	70 08       	ld.w	r8,r8[0x0]
80012bd2:	f0 c8 ef 4b 	sub	r8,r8,-4277
80012bd6:	10 9b       	mov	r11,r8
80012bd8:	ee fc ff d0 	ld.w	r12,r7[-48]
80012bdc:	f0 16 01 f3 	mcall	r6[1996]
		}
		break;
80012be0:	cc 98       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_SET_MODE : { // 11
			set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
80012be2:	ec f8 00 00 	ld.w	r8,r6[0]
80012be6:	70 08       	ld.w	r8,r8[0x0]
80012be8:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80012bec:	5c 58       	castu.b	r8
80012bee:	10 99       	mov	r9,r8
80012bf0:	ec f8 00 00 	ld.w	r8,r6[0]
80012bf4:	70 08       	ld.w	r8,r8[0x0]
80012bf6:	f0 ca ef 43 	sub	r10,r8,-4285
80012bfa:	ec f8 00 00 	ld.w	r8,r6[0]
80012bfe:	70 08       	ld.w	r8,r8[0x0]
80012c00:	f0 c8 ef 44 	sub	r8,r8,-4284
80012c04:	10 9b       	mov	r11,r8
80012c06:	ee fc ff d0 	ld.w	r12,r7[-48]
80012c0a:	f0 16 01 cf 	mcall	r6[1852]
		}
		break;
80012c0e:	cb 28       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
			receive_message_long(rec);
80012c10:	ee fc ff d0 	ld.w	r12,r7[-48]
80012c14:	f0 16 01 88 	mcall	r6[1568]
		}
		break;		
80012c18:	ca d8       	rjmp	80012d72 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80012c1a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012c1e:	ee c9 00 2c 	sub	r9,r7,44
80012c22:	12 9b       	mov	r11,r9
80012c24:	10 9c       	mov	r12,r8
80012c26:	fe b0 fb 26 	rcall	80012272 <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012c2a:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80012c2e:	ec f8 00 74 	ld.w	r8,r6[116]
80012c32:	11 88       	ld.ub	r8,r8[0x0]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012c34:	f0 09 18 00 	cp.b	r9,r8
80012c38:	e0 81 00 9d 	brne	80012d72 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012c3c:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80012c40:	ec f8 00 74 	ld.w	r8,r6[116]
80012c44:	11 98       	ld.ub	r8,r8[0x1]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012c46:	f0 09 18 00 	cp.b	r9,r8
80012c4a:	e0 81 00 94 	brne	80012d72 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80012c4e:	fe cc 03 ae 	sub	r12,pc,942
80012c52:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80012c56:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80012c5a:	30 ab       	mov	r11,10
80012c5c:	10 9c       	mov	r12,r8
80012c5e:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
80012c62:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80012c66:	3f f8       	mov	r8,-1
80012c68:	f0 09 18 00 	cp.b	r9,r8
80012c6c:	c2 a1       	brne	80012cc0 <handle_mavlink_message+0x3e0>
					int i;
					dbg_print("send all\n");
80012c6e:	fe cc 03 be 	sub	r12,pc,958
80012c72:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012c76:	30 08       	mov	r8,0
80012c78:	ef 48 ff f0 	st.w	r7[-16],r8
80012c7c:	c1 88       	rjmp	80012cac <handle_mavlink_message+0x3cc>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80012c7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012c82:	5c 88       	casts.h	r8
80012c84:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012c88:	ec f8 01 2c 	ld.w	r8,r6[300]
80012c8c:	12 9b       	mov	r11,r9
80012c8e:	10 9c       	mov	r12,r8
80012c90:	f0 16 01 b5 	mcall	r6[1748]
80012c94:	18 98       	mov	r8,r12
80012c96:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
80012c9a:	ee fc ff f4 	ld.w	r12,r7[-12]
80012c9e:	f0 16 01 02 	mcall	r6[1032]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012ca2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012ca6:	2f f8       	sub	r8,-1
80012ca8:	ef 48 ff f0 	st.w	r7[-16],r8
80012cac:	ec f8 01 2c 	ld.w	r8,r6[300]
80012cb0:	11 88       	ld.ub	r8,r8[0x0]
80012cb2:	10 99       	mov	r9,r8
80012cb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012cb8:	10 39       	cp.w	r9,r8
80012cba:	fe 99 ff e2 	brgt	80012c7e <handle_mavlink_message+0x39e>
80012cbe:	c5 a8       	rjmp	80012d72 <handle_mavlink_message+0x492>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80012cc0:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012cc4:	10 99       	mov	r9,r8
80012cc6:	ec f8 01 2c 	ld.w	r8,r6[300]
80012cca:	12 9b       	mov	r11,r9
80012ccc:	10 9c       	mov	r12,r8
80012cce:	f0 16 01 b7 	mcall	r6[1756]
80012cd2:	18 98       	mov	r8,r12
80012cd4:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80012cd8:	fe cc 04 1c 	sub	r12,pc,1052
80012cdc:	f0 16 00 01 	mcall	r6[4]
80012ce0:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012ce4:	30 ab       	mov	r11,10
80012ce6:	10 9c       	mov	r12,r8
80012ce8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80012cec:	fe cc 04 24 	sub	r12,pc,1060
80012cf0:	f0 16 00 01 	mcall	r6[4]
80012cf4:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012cf8:	30 ab       	mov	r11,10
80012cfa:	10 9c       	mov	r12,r8
80012cfc:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80012d00:	fe cc 04 28 	sub	r12,pc,1064
80012d04:	f0 16 00 01 	mcall	r6[4]
80012d08:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012d0c:	5c 78       	castu.h	r8
80012d0e:	30 ab       	mov	r11,10
80012d10:	10 9c       	mov	r12,r8
80012d12:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80012d16:	fe cc 07 5e 	sub	r12,pc,1886
80012d1a:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80012d1e:	fe cc 07 66 	sub	r12,pc,1894
80012d22:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
80012d26:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012d2a:	58 08       	cp.w	r8,0
80012d2c:	c0 70       	breq	80012d3a <handle_mavlink_message+0x45a>
						change_run_mode(task, RUN_REGULAR);
80012d2e:	30 2b       	mov	r11,2
80012d30:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d34:	f0 16 00 ad 	mcall	r6[692]
80012d38:	c0 68       	rjmp	80012d44 <handle_mavlink_message+0x464>
					}else {
						change_run_mode(task, RUN_NEVER);
80012d3a:	30 0b       	mov	r11,0
80012d3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d40:	f0 16 00 ad 	mcall	r6[692]
					}
					if (request.req_message_rate>0) {
80012d44:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012d48:	58 08       	cp.w	r8,0
80012d4a:	c1 40       	breq	80012d72 <handle_mavlink_message+0x492>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
80012d4c:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012d50:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012d54:	ee 78 42 40 	mov	r8,1000000
80012d58:	f0 09 0d 08 	divu	r8,r8,r9
80012d5c:	10 9b       	mov	r11,r8
80012d5e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d62:	f0 16 01 9f 	mcall	r6[1660]
80012d66:	c0 68       	rjmp	80012d72 <handle_mavlink_message+0x492>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80012d68:	d7 03       	nop
80012d6a:	c0 48       	rjmp	80012d72 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80012d6c:	d7 03       	nop
80012d6e:	c0 28       	rjmp	80012d72 <handle_mavlink_message+0x492>
80012d70:	d7 03       	nop
		}		
		/* 
		TODO : add other cases
		*/
	}
}			
80012d72:	2f 4d       	sub	sp,-48
80012d74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d78:	80 01       	ld.sh	r1,r0[0x0]
80012d7a:	27 70       	sub	r0,119
80012d7c:	70 61       	ld.w	r1,r8[0x18]
80012d7e:	72 61       	ld.w	r1,r9[0x18]
80012d80:	6d 65       	ld.w	r5,r6[0x58]
80012d82:	74 65       	ld.w	r5,r10[0x18]
80012d84:	72 73       	ld.w	r3,r9[0x1c]
80012d86:	3a 00       	mov	r0,-96
80012d88:	2c 20       	sub	r0,-62
80012d8a:	63 6f       	ld.w	pc,r1[0x58]
80012d8c:	6d 6d       	ld.w	sp,r6[0x58]
80012d8e:	61 6e       	ld.w	lr,r0[0x58]
80012d90:	64 20       	ld.w	r0,r2[0x8]
80012d92:	69 64       	ld.w	r4,r4[0x58]
80012d94:	3a 00       	mov	r0,-96
80012d96:	00 00       	add	r0,r0
80012d98:	2c 20       	sub	r0,-62
80012d9a:	63 6f       	ld.w	pc,r1[0x58]
80012d9c:	6e 66       	ld.w	r6,r7[0x18]
80012d9e:	69 72       	ld.w	r2,r4[0x5c]
80012da0:	6d 61       	ld.w	r1,r6[0x58]
80012da2:	74 69       	ld.w	r9,r10[0x18]
80012da4:	6f 6e       	ld.w	lr,r7[0x58]
80012da6:	3a 00       	mov	r0,-96
80012da8:	52 65       	stdsp	sp[0x98],r5
80012daa:	61 64       	ld.w	r4,r0[0x58]
80012dac:	69 6e       	ld.w	lr,r4[0x58]
80012dae:	67 20       	ld.w	r0,r3[0x48]
80012db0:	66 72       	ld.w	r2,r3[0x1c]
80012db2:	6f 6d       	ld.w	sp,r7[0x58]
80012db4:	20 66       	sub	r6,6
80012db6:	6c 61       	ld.w	r1,r6[0x18]
80012db8:	73 68       	ld.w	r8,r9[0x58]
80012dba:	63 2e       	ld.w	lr,r1[0x48]
80012dbc:	2e 2e       	sub	lr,-30
80012dbe:	0a 00       	add	r0,r5
80012dc0:	57 72       	stdsp	sp[0x1dc],r2
80012dc2:	69 74       	ld.w	r4,r4[0x5c]
80012dc4:	74 69       	ld.w	r9,r10[0x18]
80012dc6:	6e 67       	ld.w	r7,r7[0x18]
80012dc8:	20 74       	sub	r4,7
80012dca:	6f 20       	ld.w	r0,r7[0x48]
80012dcc:	66 6c       	ld.w	r12,r3[0x18]
80012dce:	61 73       	ld.w	r3,r0[0x5c]
80012dd0:	68 63       	ld.w	r3,r4[0x18]
80012dd2:	0a 00       	add	r0,r5

80012dd4 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
80012dd4:	eb cd 40 c0 	pushm	r6-r7,lr
80012dd8:	1a 97       	mov	r7,sp
80012dda:	20 ad       	sub	sp,40
80012ddc:	fe f6 04 cc 	ld.w	r6,pc[1228]
80012de0:	1e 26       	rsub	r6,pc
80012de2:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
80012de6:	ee f8 ff d8 	ld.w	r8,r7[-40]
80012dea:	ee c9 00 24 	sub	r9,r7,36
80012dee:	12 9b       	mov	r11,r9
80012df0:	10 9c       	mov	r12,r8
80012df2:	fe b0 fb 41 	rcall	80012474 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
80012df6:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80012dfa:	ec f8 00 74 	ld.w	r8,r6[116]
80012dfe:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012e00:	f0 09 18 00 	cp.b	r9,r8
80012e04:	e0 81 02 4e 	brne	800132a0 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80012e08:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012e0c:	58 08       	cp.w	r8,0
80012e0e:	e0 81 02 49 	brne	800132a0 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80012e12:	fe cc 00 96 	sub	r12,pc,150
80012e16:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80012e1a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80012e1e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e22:	30 ab       	mov	r11,10
80012e24:	10 9c       	mov	r12,r8
80012e26:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80012e2a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80012e2e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e32:	30 ab       	mov	r11,10
80012e34:	10 9c       	mov	r12,r8
80012e36:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80012e3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80012e3e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e42:	30 ab       	mov	r11,10
80012e44:	10 9c       	mov	r12,r8
80012e46:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80012e4a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80012e4e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e52:	30 ab       	mov	r11,10
80012e54:	10 9c       	mov	r12,r8
80012e56:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80012e5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012e5e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e62:	30 ab       	mov	r11,10
80012e64:	10 9c       	mov	r12,r8
80012e66:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80012e6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e6e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e72:	30 ab       	mov	r11,10
80012e74:	10 9c       	mov	r12,r8
80012e76:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80012e7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012e7e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e82:	30 ab       	mov	r11,10
80012e84:	10 9c       	mov	r12,r8
80012e86:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80012e8a:	fe cc 01 02 	sub	r12,pc,258
80012e8e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80012e92:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80012e96:	5c 78       	castu.h	r8
80012e98:	30 ab       	mov	r11,10
80012e9a:	10 9c       	mov	r12,r8
80012e9c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80012ea0:	fe cc 01 08 	sub	r12,pc,264
80012ea4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
80012ea8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80012eac:	30 ab       	mov	r11,10
80012eae:	10 9c       	mov	r12,r8
80012eb0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80012eb4:	fe cc 08 fc 	sub	r12,pc,2300
80012eb8:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80012ebc:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80012ec0:	5c 78       	castu.h	r8
80012ec2:	21 08       	sub	r8,16
80012ec4:	e0 48 00 e5 	cp.w	r8,229
80012ec8:	e0 8b 01 ec 	brhi	800132a0 <receive_message_long+0x4cc>
80012ecc:	fe c9 ff f8 	sub	r9,pc,-8
80012ed0:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80012ed4:	e0 8f 01 e6 	bral	800132a0 <receive_message_long+0x4cc>
80012ed8:	e0 8f 01 e4 	bral	800132a0 <receive_message_long+0x4cc>
80012edc:	e0 8f 01 e2 	bral	800132a0 <receive_message_long+0x4cc>
80012ee0:	e0 8f 01 e0 	bral	800132a0 <receive_message_long+0x4cc>
80012ee4:	e0 8f 01 de 	bral	800132a0 <receive_message_long+0x4cc>
80012ee8:	e0 8f 01 dc 	bral	800132a0 <receive_message_long+0x4cc>
80012eec:	e0 8f 01 da 	bral	800132a0 <receive_message_long+0x4cc>
80012ef0:	e0 8f 01 d8 	bral	800132a0 <receive_message_long+0x4cc>
80012ef4:	e0 8f 01 d6 	bral	800132a0 <receive_message_long+0x4cc>
80012ef8:	e0 8f 01 d4 	bral	800132a0 <receive_message_long+0x4cc>
80012efc:	e0 8f 01 d2 	bral	800132a0 <receive_message_long+0x4cc>
80012f00:	e0 8f 01 d0 	bral	800132a0 <receive_message_long+0x4cc>
80012f04:	e0 8f 01 ce 	bral	800132a0 <receive_message_long+0x4cc>
80012f08:	e0 8f 01 cc 	bral	800132a0 <receive_message_long+0x4cc>
80012f0c:	e0 8f 01 ca 	bral	800132a0 <receive_message_long+0x4cc>
80012f10:	e0 8f 01 c8 	bral	800132a0 <receive_message_long+0x4cc>
80012f14:	e0 8f 01 c6 	bral	800132a0 <receive_message_long+0x4cc>
80012f18:	e0 8f 01 c4 	bral	800132a0 <receive_message_long+0x4cc>
80012f1c:	e0 8f 01 c2 	bral	800132a0 <receive_message_long+0x4cc>
80012f20:	e0 8f 01 c0 	bral	800132a0 <receive_message_long+0x4cc>
80012f24:	e0 8f 01 be 	bral	800132a0 <receive_message_long+0x4cc>
80012f28:	e0 8f 01 bc 	bral	800132a0 <receive_message_long+0x4cc>
80012f2c:	e0 8f 01 ba 	bral	800132a0 <receive_message_long+0x4cc>
80012f30:	e0 8f 01 b8 	bral	800132a0 <receive_message_long+0x4cc>
80012f34:	e0 8f 01 b6 	bral	800132a0 <receive_message_long+0x4cc>
80012f38:	e0 8f 01 b4 	bral	800132a0 <receive_message_long+0x4cc>
80012f3c:	e0 8f 01 b2 	bral	800132a0 <receive_message_long+0x4cc>
80012f40:	e0 8f 01 b0 	bral	800132a0 <receive_message_long+0x4cc>
80012f44:	e0 8f 01 ae 	bral	800132a0 <receive_message_long+0x4cc>
80012f48:	e0 8f 01 ac 	bral	800132a0 <receive_message_long+0x4cc>
80012f4c:	e0 8f 01 aa 	bral	800132a0 <receive_message_long+0x4cc>
80012f50:	e0 8f 01 a8 	bral	800132a0 <receive_message_long+0x4cc>
80012f54:	e0 8f 01 a6 	bral	800132a0 <receive_message_long+0x4cc>
80012f58:	e0 8f 01 a4 	bral	800132a0 <receive_message_long+0x4cc>
80012f5c:	e0 8f 01 a2 	bral	800132a0 <receive_message_long+0x4cc>
80012f60:	e0 8f 01 a0 	bral	800132a0 <receive_message_long+0x4cc>
80012f64:	e0 8f 01 9e 	bral	800132a0 <receive_message_long+0x4cc>
80012f68:	e0 8f 01 9c 	bral	800132a0 <receive_message_long+0x4cc>
80012f6c:	e0 8f 01 9a 	bral	800132a0 <receive_message_long+0x4cc>
80012f70:	e0 8f 01 98 	bral	800132a0 <receive_message_long+0x4cc>
80012f74:	e0 8f 01 96 	bral	800132a0 <receive_message_long+0x4cc>
80012f78:	e0 8f 01 94 	bral	800132a0 <receive_message_long+0x4cc>
80012f7c:	e0 8f 01 92 	bral	800132a0 <receive_message_long+0x4cc>
80012f80:	e0 8f 01 90 	bral	800132a0 <receive_message_long+0x4cc>
80012f84:	e0 8f 01 8e 	bral	800132a0 <receive_message_long+0x4cc>
80012f88:	e0 8f 01 8c 	bral	800132a0 <receive_message_long+0x4cc>
80012f8c:	e0 8f 01 8a 	bral	800132a0 <receive_message_long+0x4cc>
80012f90:	e0 8f 01 88 	bral	800132a0 <receive_message_long+0x4cc>
80012f94:	e0 8f 01 86 	bral	800132a0 <receive_message_long+0x4cc>
80012f98:	e0 8f 01 84 	bral	800132a0 <receive_message_long+0x4cc>
80012f9c:	e0 8f 01 82 	bral	800132a0 <receive_message_long+0x4cc>
80012fa0:	e0 8f 01 80 	bral	800132a0 <receive_message_long+0x4cc>
80012fa4:	e0 8f 01 7e 	bral	800132a0 <receive_message_long+0x4cc>
80012fa8:	e0 8f 01 7c 	bral	800132a0 <receive_message_long+0x4cc>
80012fac:	e0 8f 01 7a 	bral	800132a0 <receive_message_long+0x4cc>
80012fb0:	e0 8f 01 78 	bral	800132a0 <receive_message_long+0x4cc>
80012fb4:	e0 8f 01 76 	bral	800132a0 <receive_message_long+0x4cc>
80012fb8:	e0 8f 01 74 	bral	800132a0 <receive_message_long+0x4cc>
80012fbc:	e0 8f 01 72 	bral	800132a0 <receive_message_long+0x4cc>
80012fc0:	e0 8f 01 70 	bral	800132a0 <receive_message_long+0x4cc>
80012fc4:	e0 8f 01 6e 	bral	800132a0 <receive_message_long+0x4cc>
80012fc8:	e0 8f 01 6c 	bral	800132a0 <receive_message_long+0x4cc>
80012fcc:	e0 8f 01 6a 	bral	800132a0 <receive_message_long+0x4cc>
80012fd0:	e0 8f 01 68 	bral	800132a0 <receive_message_long+0x4cc>
80012fd4:	e0 8f 01 66 	bral	800132a0 <receive_message_long+0x4cc>
80012fd8:	e0 8f 01 64 	bral	800132a0 <receive_message_long+0x4cc>
80012fdc:	e0 8f 01 62 	bral	800132a0 <receive_message_long+0x4cc>
80012fe0:	e0 8f 01 60 	bral	800132a0 <receive_message_long+0x4cc>
80012fe4:	e0 8f 01 5e 	bral	800132a0 <receive_message_long+0x4cc>
80012fe8:	e0 8f 01 5c 	bral	800132a0 <receive_message_long+0x4cc>
80012fec:	e0 8f 01 5a 	bral	800132a0 <receive_message_long+0x4cc>
80012ff0:	e0 8f 01 58 	bral	800132a0 <receive_message_long+0x4cc>
80012ff4:	e0 8f 01 56 	bral	800132a0 <receive_message_long+0x4cc>
80012ff8:	e0 8f 01 54 	bral	800132a0 <receive_message_long+0x4cc>
80012ffc:	e0 8f 01 52 	bral	800132a0 <receive_message_long+0x4cc>
80013000:	e0 8f 01 50 	bral	800132a0 <receive_message_long+0x4cc>
80013004:	e0 8f 01 4e 	bral	800132a0 <receive_message_long+0x4cc>
80013008:	e0 8f 01 4c 	bral	800132a0 <receive_message_long+0x4cc>
8001300c:	e0 8f 01 4a 	bral	800132a0 <receive_message_long+0x4cc>
80013010:	e0 8f 01 48 	bral	800132a0 <receive_message_long+0x4cc>
80013014:	e0 8f 01 46 	bral	800132a0 <receive_message_long+0x4cc>
80013018:	e0 8f 01 44 	bral	800132a0 <receive_message_long+0x4cc>
8001301c:	e0 8f 01 42 	bral	800132a0 <receive_message_long+0x4cc>
80013020:	e0 8f 01 40 	bral	800132a0 <receive_message_long+0x4cc>
80013024:	e0 8f 01 3e 	bral	800132a0 <receive_message_long+0x4cc>
80013028:	e0 8f 01 3c 	bral	800132a0 <receive_message_long+0x4cc>
8001302c:	e0 8f 01 3a 	bral	800132a0 <receive_message_long+0x4cc>
80013030:	e0 8f 01 38 	bral	800132a0 <receive_message_long+0x4cc>
80013034:	e0 8f 01 36 	bral	800132a0 <receive_message_long+0x4cc>
80013038:	e0 8f 01 34 	bral	800132a0 <receive_message_long+0x4cc>
8001303c:	e0 8f 01 32 	bral	800132a0 <receive_message_long+0x4cc>
80013040:	e0 8f 01 30 	bral	800132a0 <receive_message_long+0x4cc>
80013044:	e0 8f 01 2e 	bral	800132a0 <receive_message_long+0x4cc>
80013048:	e0 8f 01 2c 	bral	800132a0 <receive_message_long+0x4cc>
8001304c:	e0 8f 01 2a 	bral	800132a0 <receive_message_long+0x4cc>
80013050:	e0 8f 01 28 	bral	800132a0 <receive_message_long+0x4cc>
80013054:	e0 8f 01 26 	bral	800132a0 <receive_message_long+0x4cc>
80013058:	e0 8f 01 24 	bral	800132a0 <receive_message_long+0x4cc>
8001305c:	e0 8f 01 22 	bral	800132a0 <receive_message_long+0x4cc>
80013060:	e0 8f 01 20 	bral	800132a0 <receive_message_long+0x4cc>
80013064:	e0 8f 01 1e 	bral	800132a0 <receive_message_long+0x4cc>
80013068:	e0 8f 01 1c 	bral	800132a0 <receive_message_long+0x4cc>
8001306c:	e0 8f 01 1a 	bral	800132a0 <receive_message_long+0x4cc>
80013070:	e0 8f 01 18 	bral	800132a0 <receive_message_long+0x4cc>
80013074:	e0 8f 01 16 	bral	800132a0 <receive_message_long+0x4cc>
80013078:	e0 8f 01 14 	bral	800132a0 <receive_message_long+0x4cc>
8001307c:	e0 8f 01 12 	bral	800132a0 <receive_message_long+0x4cc>
80013080:	e0 8f 01 10 	bral	800132a0 <receive_message_long+0x4cc>
80013084:	e0 8f 01 0e 	bral	800132a0 <receive_message_long+0x4cc>
80013088:	e0 8f 01 0c 	bral	800132a0 <receive_message_long+0x4cc>
8001308c:	e0 8f 01 0a 	bral	800132a0 <receive_message_long+0x4cc>
80013090:	e0 8f 01 08 	bral	800132a0 <receive_message_long+0x4cc>
80013094:	e0 8f 01 06 	bral	800132a0 <receive_message_long+0x4cc>
80013098:	e0 8f 01 04 	bral	800132a0 <receive_message_long+0x4cc>
8001309c:	e0 8f 01 02 	bral	800132a0 <receive_message_long+0x4cc>
800130a0:	e0 8f 01 00 	bral	800132a0 <receive_message_long+0x4cc>
800130a4:	e0 8f 00 fe 	bral	800132a0 <receive_message_long+0x4cc>
800130a8:	e0 8f 00 fc 	bral	800132a0 <receive_message_long+0x4cc>
800130ac:	e0 8f 00 fa 	bral	800132a0 <receive_message_long+0x4cc>
800130b0:	e0 8f 00 f8 	bral	800132a0 <receive_message_long+0x4cc>
800130b4:	e0 8f 00 f6 	bral	800132a0 <receive_message_long+0x4cc>
800130b8:	e0 8f 00 f4 	bral	800132a0 <receive_message_long+0x4cc>
800130bc:	e0 8f 00 f2 	bral	800132a0 <receive_message_long+0x4cc>
800130c0:	e0 8f 00 f0 	bral	800132a0 <receive_message_long+0x4cc>
800130c4:	e0 8f 00 ee 	bral	800132a0 <receive_message_long+0x4cc>
800130c8:	e0 8f 00 ec 	bral	800132a0 <receive_message_long+0x4cc>
800130cc:	e0 8f 00 ea 	bral	800132a0 <receive_message_long+0x4cc>
800130d0:	e0 8f 00 e8 	bral	800132a0 <receive_message_long+0x4cc>
800130d4:	e0 8f 00 e6 	bral	800132a0 <receive_message_long+0x4cc>
800130d8:	e0 8f 00 e4 	bral	800132a0 <receive_message_long+0x4cc>
800130dc:	e0 8f 00 e2 	bral	800132a0 <receive_message_long+0x4cc>
800130e0:	e0 8f 00 e0 	bral	800132a0 <receive_message_long+0x4cc>
800130e4:	e0 8f 00 de 	bral	800132a0 <receive_message_long+0x4cc>
800130e8:	e0 8f 00 dc 	bral	800132a0 <receive_message_long+0x4cc>
800130ec:	e0 8f 00 da 	bral	800132a0 <receive_message_long+0x4cc>
800130f0:	e0 8f 00 d8 	bral	800132a0 <receive_message_long+0x4cc>
800130f4:	e0 8f 00 d6 	bral	800132a0 <receive_message_long+0x4cc>
800130f8:	e0 8f 00 d4 	bral	800132a0 <receive_message_long+0x4cc>
800130fc:	e0 8f 00 d2 	bral	800132a0 <receive_message_long+0x4cc>
80013100:	e0 8f 00 d0 	bral	800132a0 <receive_message_long+0x4cc>
80013104:	e0 8f 00 ce 	bral	800132a0 <receive_message_long+0x4cc>
80013108:	e0 8f 00 cc 	bral	800132a0 <receive_message_long+0x4cc>
8001310c:	e0 8f 00 ca 	bral	800132a0 <receive_message_long+0x4cc>
80013110:	e0 8f 00 c8 	bral	800132a0 <receive_message_long+0x4cc>
80013114:	e0 8f 00 c6 	bral	800132a0 <receive_message_long+0x4cc>
80013118:	e0 8f 00 c4 	bral	800132a0 <receive_message_long+0x4cc>
8001311c:	e0 8f 00 c2 	bral	800132a0 <receive_message_long+0x4cc>
80013120:	e0 8f 00 c0 	bral	800132a0 <receive_message_long+0x4cc>
80013124:	e0 8f 00 be 	bral	800132a0 <receive_message_long+0x4cc>
80013128:	e0 8f 00 bc 	bral	800132a0 <receive_message_long+0x4cc>
8001312c:	e0 8f 00 ba 	bral	800132a0 <receive_message_long+0x4cc>
80013130:	e0 8f 00 b8 	bral	800132a0 <receive_message_long+0x4cc>
80013134:	e0 8f 00 b6 	bral	800132a0 <receive_message_long+0x4cc>
80013138:	e0 8f 00 b4 	bral	800132a0 <receive_message_long+0x4cc>
8001313c:	e0 8f 00 b2 	bral	800132a0 <receive_message_long+0x4cc>
80013140:	e0 8f 00 b0 	bral	800132a0 <receive_message_long+0x4cc>
80013144:	e0 8f 00 ae 	bral	800132a0 <receive_message_long+0x4cc>
80013148:	e0 8f 00 ac 	bral	800132a0 <receive_message_long+0x4cc>
8001314c:	e0 8f 00 aa 	bral	800132a0 <receive_message_long+0x4cc>
80013150:	e0 8f 00 a8 	bral	800132a0 <receive_message_long+0x4cc>
80013154:	e0 8f 00 a6 	bral	800132a0 <receive_message_long+0x4cc>
80013158:	e0 8f 00 a4 	bral	800132a0 <receive_message_long+0x4cc>
8001315c:	e0 8f 00 a2 	bral	800132a0 <receive_message_long+0x4cc>
80013160:	e0 8f 00 a0 	bral	800132a0 <receive_message_long+0x4cc>
80013164:	e0 8f 00 9e 	bral	800132a0 <receive_message_long+0x4cc>
80013168:	e0 8f 00 9c 	bral	800132a0 <receive_message_long+0x4cc>
8001316c:	e0 8f 00 9a 	bral	800132a0 <receive_message_long+0x4cc>
80013170:	e0 8f 00 98 	bral	800132a0 <receive_message_long+0x4cc>
80013174:	e0 8f 00 96 	bral	800132a0 <receive_message_long+0x4cc>
80013178:	e0 8f 00 94 	bral	800132a0 <receive_message_long+0x4cc>
8001317c:	e0 8f 00 92 	bral	800132a0 <receive_message_long+0x4cc>
80013180:	e0 8f 00 90 	bral	800132a0 <receive_message_long+0x4cc>
80013184:	e0 8f 00 8e 	bral	800132a0 <receive_message_long+0x4cc>
80013188:	e0 8f 00 8c 	bral	800132a0 <receive_message_long+0x4cc>
8001318c:	e0 8f 00 8a 	bral	800132a0 <receive_message_long+0x4cc>
80013190:	e0 8f 00 88 	bral	800132a0 <receive_message_long+0x4cc>
80013194:	e0 8f 00 86 	bral	800132a0 <receive_message_long+0x4cc>
80013198:	e0 8f 00 84 	bral	800132a0 <receive_message_long+0x4cc>
8001319c:	e0 8f 00 82 	bral	800132a0 <receive_message_long+0x4cc>
800131a0:	e0 8f 00 80 	bral	800132a0 <receive_message_long+0x4cc>
800131a4:	e0 8f 00 7e 	bral	800132a0 <receive_message_long+0x4cc>
800131a8:	e0 8f 00 7c 	bral	800132a0 <receive_message_long+0x4cc>
800131ac:	e0 8f 00 7a 	bral	800132a0 <receive_message_long+0x4cc>
800131b0:	e0 8f 00 78 	bral	800132a0 <receive_message_long+0x4cc>
800131b4:	e0 8f 00 76 	bral	800132a0 <receive_message_long+0x4cc>
800131b8:	e0 8f 00 74 	bral	800132a0 <receive_message_long+0x4cc>
800131bc:	e0 8f 00 72 	bral	800132a0 <receive_message_long+0x4cc>
800131c0:	e0 8f 00 70 	bral	800132a0 <receive_message_long+0x4cc>
800131c4:	e0 8f 00 6e 	bral	800132a0 <receive_message_long+0x4cc>
800131c8:	e0 8f 00 6c 	bral	800132a0 <receive_message_long+0x4cc>
800131cc:	e0 8f 00 6a 	bral	800132a0 <receive_message_long+0x4cc>
800131d0:	e0 8f 00 68 	bral	800132a0 <receive_message_long+0x4cc>
800131d4:	e0 8f 00 66 	bral	800132a0 <receive_message_long+0x4cc>
800131d8:	e0 8f 00 64 	bral	800132a0 <receive_message_long+0x4cc>
800131dc:	e0 8f 00 62 	bral	800132a0 <receive_message_long+0x4cc>
800131e0:	e0 8f 00 60 	bral	800132a0 <receive_message_long+0x4cc>
800131e4:	e0 8f 00 5e 	bral	800132a0 <receive_message_long+0x4cc>
800131e8:	e0 8f 00 5c 	bral	800132a0 <receive_message_long+0x4cc>
800131ec:	e0 8f 00 5a 	bral	800132a0 <receive_message_long+0x4cc>
800131f0:	e0 8f 00 58 	bral	800132a0 <receive_message_long+0x4cc>
800131f4:	e0 8f 00 56 	bral	800132a0 <receive_message_long+0x4cc>
800131f8:	e0 8f 00 54 	bral	800132a0 <receive_message_long+0x4cc>
800131fc:	e0 8f 00 52 	bral	800132a0 <receive_message_long+0x4cc>
80013200:	e0 8f 00 50 	bral	800132a0 <receive_message_long+0x4cc>
80013204:	e0 8f 00 4e 	bral	800132a0 <receive_message_long+0x4cc>
80013208:	e0 8f 00 4c 	bral	800132a0 <receive_message_long+0x4cc>
8001320c:	e0 8f 00 4a 	bral	800132a0 <receive_message_long+0x4cc>
80013210:	e0 8f 00 48 	bral	800132a0 <receive_message_long+0x4cc>
80013214:	e0 8f 00 46 	bral	800132a0 <receive_message_long+0x4cc>
80013218:	e0 8f 00 44 	bral	800132a0 <receive_message_long+0x4cc>
8001321c:	e0 8f 00 42 	bral	800132a0 <receive_message_long+0x4cc>
80013220:	e0 8f 00 40 	bral	800132a0 <receive_message_long+0x4cc>
80013224:	e0 8f 00 3e 	bral	800132a0 <receive_message_long+0x4cc>
80013228:	e0 8f 00 3c 	bral	800132a0 <receive_message_long+0x4cc>
8001322c:	e0 8f 00 3a 	bral	800132a0 <receive_message_long+0x4cc>
80013230:	e0 8f 00 38 	bral	800132a0 <receive_message_long+0x4cc>
80013234:	e0 8f 00 36 	bral	800132a0 <receive_message_long+0x4cc>
80013238:	e0 8f 00 34 	bral	800132a0 <receive_message_long+0x4cc>
8001323c:	e0 8f 00 32 	bral	800132a0 <receive_message_long+0x4cc>
80013240:	e0 8f 00 30 	bral	800132a0 <receive_message_long+0x4cc>
80013244:	e0 8f 00 2e 	bral	800132a0 <receive_message_long+0x4cc>
80013248:	e0 8f 00 2c 	bral	800132a0 <receive_message_long+0x4cc>
8001324c:	e0 8f 00 2a 	bral	800132a0 <receive_message_long+0x4cc>
80013250:	e0 8f 00 28 	bral	800132a0 <receive_message_long+0x4cc>
80013254:	e0 8f 00 26 	bral	800132a0 <receive_message_long+0x4cc>
80013258:	e0 8f 00 24 	bral	800132a0 <receive_message_long+0x4cc>
8001325c:	e0 8f 00 22 	bral	800132a0 <receive_message_long+0x4cc>
80013260:	e0 8f 00 20 	bral	800132a0 <receive_message_long+0x4cc>
80013264:	e0 8f 00 1e 	bral	800132a0 <receive_message_long+0x4cc>
80013268:	e0 8f 00 02 	bral	8001326c <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
8001326c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80013270:	30 08       	mov	r8,0
80013272:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013276:	c0 81       	brne	80013286 <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80013278:	fe cc 04 d0 	sub	r12,pc,1232
8001327c:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80013280:	f0 16 01 1b 	mcall	r6[1132]
80013284:	c0 e8       	rjmp	800132a0 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80013286:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001328a:	fc 18 3f 80 	movh	r8,0x3f80
8001328e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013292:	c0 71       	brne	800132a0 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80013294:	fe cc 04 d4 	sub	r12,pc,1236
80013298:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
8001329c:	f0 16 01 c9 	mcall	r6[1828]
				/*  | */
			}
			break;
		}
	}
}
800132a0:	2f 6d       	sub	sp,-40
800132a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800132a6:	00 00       	add	r0,r0
800132a8:	80 01       	ld.sh	r1,r0[0x0]
800132aa:	2c 64       	sub	r4,-58

800132ac <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
800132ac:	eb cd 40 80 	pushm	r7,lr
800132b0:	1a 97       	mov	r7,sp
800132b2:	20 3d       	sub	sp,12
800132b4:	18 98       	mov	r8,r12
800132b6:	ef 4b ff f4 	st.w	r7[-12],r11
800132ba:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
800132be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800132c2:	90 08       	ld.sh	r8,r8[0x0]
800132c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800132cc:	f3 e8 20 08 	eor	r8,r9,r8
800132d0:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
800132d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132d8:	a5 68       	lsl	r8,0x4
800132da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132e2:	f3 e8 20 08 	eor	r8,r9,r8
800132e6:	5c 58       	castu.b	r8
800132e8:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800132ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800132f0:	90 08       	ld.sh	r8,r8[0x0]
800132f2:	5c 78       	castu.h	r8
800132f4:	a9 88       	lsr	r8,0x8
800132f6:	5c 88       	casts.h	r8
800132f8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800132fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013300:	a9 68       	lsl	r8,0x8
80013302:	5c 88       	casts.h	r8
80013304:	f3 e8 20 08 	eor	r8,r9,r8
80013308:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001330c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013310:	a3 78       	lsl	r8,0x3
80013312:	5c 88       	casts.h	r8
80013314:	f3 e8 20 08 	eor	r8,r9,r8
80013318:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001331c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013320:	a5 88       	lsr	r8,0x4
80013322:	5c 58       	castu.b	r8
80013324:	f3 e8 20 08 	eor	r8,r9,r8
80013328:	5c 88       	casts.h	r8
8001332a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001332e:	b2 08       	st.h	r9[0x0],r8
}
80013330:	2f dd       	sub	sp,-12
80013332:	e3 cd 80 80 	ldm	sp++,r7,pc

80013336 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80013336:	eb cd 40 80 	pushm	r7,lr
8001333a:	1a 97       	mov	r7,sp
8001333c:	20 1d       	sub	sp,4
8001333e:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80013342:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013346:	3f f8       	mov	r8,-1
80013348:	b2 08       	st.h	r9[0x0],r8
}
8001334a:	2f fd       	sub	sp,-4
8001334c:	e3 cd 80 80 	ldm	sp++,r7,pc

80013350 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80013350:	eb cd 40 c0 	pushm	r6-r7,lr
80013354:	1a 97       	mov	r7,sp
80013356:	20 3d       	sub	sp,12
80013358:	49 76       	lddpc	r6,800133b4 <crc_calculate+0x64>
8001335a:	1e 26       	rsub	r6,pc
8001335c:	ef 4c ff f8 	st.w	r7[-8],r12
80013360:	16 98       	mov	r8,r11
80013362:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
80013366:	ee c8 00 02 	sub	r8,r7,2
8001336a:	10 9c       	mov	r12,r8
8001336c:	ce 5f       	rcall	80013336 <crc_init>
	while (length--) {
8001336e:	c0 e8       	rjmp	8001338a <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80013370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013374:	11 88       	ld.ub	r8,r8[0x0]
80013376:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001337a:	2f f9       	sub	r9,-1
8001337c:	ef 49 ff f8 	st.w	r7[-8],r9
80013380:	ee c9 00 02 	sub	r9,r7,2
80013384:	12 9b       	mov	r11,r9
80013386:	10 9c       	mov	r12,r8
80013388:	c9 2f       	rcall	800132ac <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001338a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001338e:	30 08       	mov	r8,0
80013390:	f0 09 19 00 	cp.h	r9,r8
80013394:	5f 18       	srne	r8
80013396:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001339a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001339e:	20 18       	sub	r8,1
800133a0:	ef 58 ff f4 	st.h	r7[-12],r8
800133a4:	58 09       	cp.w	r9,0
800133a6:	ce 51       	brne	80013370 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
800133a8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800133ac:	10 9c       	mov	r12,r8
800133ae:	2f dd       	sub	sp,-12
800133b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800133b4:	80 01       	ld.sh	r1,r0[0x0]
800133b6:	31 de       	mov	lr,29

800133b8 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
800133b8:	eb cd 40 c0 	pushm	r6-r7,lr
800133bc:	1a 97       	mov	r7,sp
800133be:	20 4d       	sub	sp,16
800133c0:	49 66       	lddpc	r6,80013418 <crc_accumulate_buffer+0x60>
800133c2:	1e 26       	rsub	r6,pc
800133c4:	ef 4c ff f8 	st.w	r7[-8],r12
800133c8:	ef 4b ff f4 	st.w	r7[-12],r11
800133cc:	14 98       	mov	r8,r10
800133ce:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
800133d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800133d6:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
800133da:	c0 d8       	rjmp	800133f4 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
800133dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133e0:	11 88       	ld.ub	r8,r8[0x0]
800133e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800133e6:	2f f9       	sub	r9,-1
800133e8:	ef 49 ff fc 	st.w	r7[-4],r9
800133ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800133f0:	10 9c       	mov	r12,r8
800133f2:	c5 df       	rcall	800132ac <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
800133f4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800133f8:	30 08       	mov	r8,0
800133fa:	f0 09 18 00 	cp.b	r9,r8
800133fe:	5f 18       	srne	r8
80013400:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013404:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013408:	20 18       	sub	r8,1
8001340a:	ef 68 ff f0 	st.b	r7[-16],r8
8001340e:	58 09       	cp.w	r9,0
80013410:	ce 61       	brne	800133dc <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
80013412:	2f cd       	sub	sp,-16
80013414:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013418:	80 01       	ld.sh	r1,r0[0x0]
8001341a:	32 46       	mov	r6,36

8001341c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001341c:	eb cd 40 c0 	pushm	r6-r7,lr
80013420:	1a 97       	mov	r7,sp
80013422:	20 1d       	sub	sp,4
80013424:	48 96       	lddpc	r6,80013448 <mavlink_get_channel_status+0x2c>
80013426:	1e 26       	rsub	r6,pc
80013428:	18 98       	mov	r8,r12
8001342a:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001342e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80013432:	f0 09 15 04 	lsl	r9,r8,0x4
80013436:	ec f8 08 f4 	ld.w	r8,r6[2292]
8001343a:	f2 08 00 08 	add	r8,r9,r8
}
8001343e:	10 9c       	mov	r12,r8
80013440:	2f fd       	sub	sp,-4
80013442:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013446:	00 00       	add	r0,r0
80013448:	80 01       	ld.sh	r1,r0[0x0]
8001344a:	32 aa       	mov	r10,42

8001344c <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001344c:	eb cd 40 c0 	pushm	r6-r7,lr
80013450:	1a 97       	mov	r7,sp
80013452:	20 9d       	sub	sp,36
80013454:	4b d6       	lddpc	r6,80013548 <_mav_finalize_message_chan_send+0xfc>
80013456:	1e 26       	rsub	r6,pc
80013458:	ef 4c ff ec 	st.w	r7[-20],r12
8001345c:	ef 4a ff e4 	st.w	r7[-28],r10
80013460:	16 9a       	mov	r10,r11
80013462:	ef 6a ff e8 	st.b	r7[-24],r10
80013466:	ef 69 ff e0 	st.b	r7[-32],r9
8001346a:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001346e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013472:	5c 58       	castu.b	r8
80013474:	10 9c       	mov	r12,r8
80013476:	cd 3f       	rcall	8001341c <mavlink_get_channel_status>
80013478:	18 98       	mov	r8,r12
8001347a:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001347e:	3f e8       	mov	r8,-2
80013480:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80013484:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80013488:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001348c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013490:	f1 38 00 0a 	ld.ub	r8,r8[10]
80013494:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80013498:	ec f8 00 74 	ld.w	r8,r6[116]
8001349c:	11 88       	ld.ub	r8,r8[0x0]
8001349e:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
800134a2:	ec f8 00 74 	ld.w	r8,r6[116]
800134a6:	11 98       	ld.ub	r8,r8[0x1]
800134a8:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
800134ac:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800134b0:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
800134b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134b8:	f1 38 00 0a 	ld.ub	r8,r8[10]
800134bc:	2f f8       	sub	r8,-1
800134be:	5c 58       	castu.b	r8
800134c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800134c4:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
800134c8:	ee c8 00 0c 	sub	r8,r7,12
800134cc:	2f f8       	sub	r8,-1
800134ce:	30 5b       	mov	r11,5
800134d0:	10 9c       	mov	r12,r8
800134d2:	c3 ff       	rcall	80013350 <crc_calculate>
800134d4:	18 98       	mov	r8,r12
800134d6:	5c 88       	casts.h	r8
800134d8:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
800134dc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800134e0:	ee c8 00 06 	sub	r8,r7,6
800134e4:	12 9a       	mov	r10,r9
800134e6:	ee fb ff e4 	ld.w	r11,r7[-28]
800134ea:	10 9c       	mov	r12,r8
800134ec:	c6 6f       	rcall	800133b8 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800134ee:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800134f2:	ee c9 00 06 	sub	r9,r7,6
800134f6:	12 9b       	mov	r11,r9
800134f8:	10 9c       	mov	r12,r8
800134fa:	cd 9e       	rcall	800132ac <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800134fc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013500:	5c 58       	castu.b	r8
80013502:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80013506:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001350a:	5c 78       	castu.h	r8
8001350c:	a9 88       	lsr	r8,0x8
8001350e:	5c 88       	casts.h	r8
80013510:	5c 58       	castu.b	r8
80013512:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80013516:	ee c8 00 0c 	sub	r8,r7,12
8001351a:	30 6a       	mov	r10,6
8001351c:	10 9b       	mov	r11,r8
8001351e:	ee fc ff ec 	ld.w	r12,r7[-20]
80013522:	c1 5c       	rcall	8001354c <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80013524:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80013528:	10 9a       	mov	r10,r8
8001352a:	ee fb ff e4 	ld.w	r11,r7[-28]
8001352e:	ee fc ff ec 	ld.w	r12,r7[-20]
80013532:	c0 dc       	rcall	8001354c <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80013534:	ee c8 00 10 	sub	r8,r7,16
80013538:	30 2a       	mov	r10,2
8001353a:	10 9b       	mov	r11,r8
8001353c:	ee fc ff ec 	ld.w	r12,r7[-20]
80013540:	c0 6c       	rcall	8001354c <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80013542:	2f 7d       	sub	sp,-36
80013544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013548:	80 01       	ld.sh	r1,r0[0x0]
8001354a:	32 da       	mov	r10,45

8001354c <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001354c:	eb cd 40 c0 	pushm	r6-r7,lr
80013550:	1a 97       	mov	r7,sp
80013552:	20 4d       	sub	sp,16
80013554:	49 46       	lddpc	r6,800135a4 <_mavlink_send_uart+0x58>
80013556:	1e 26       	rsub	r6,pc
80013558:	ef 4c ff f8 	st.w	r7[-8],r12
8001355c:	ef 4b ff f4 	st.w	r7[-12],r11
80013560:	14 98       	mov	r8,r10
80013562:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80013566:	30 08       	mov	r8,0
80013568:	ef 58 ff fe 	st.h	r7[-2],r8
8001356c:	c1 28       	rjmp	80013590 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001356e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013572:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013576:	f2 08 00 08 	add	r8,r9,r8
8001357a:	11 88       	ld.ub	r8,r8[0x0]
8001357c:	10 9b       	mov	r11,r8
8001357e:	ee fc ff f8 	ld.w	r12,r7[-8]
80013582:	f0 16 00 d8 	mcall	r6[864]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80013586:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001358a:	2f f8       	sub	r8,-1
8001358c:	ef 58 ff fe 	st.h	r7[-2],r8
80013590:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013594:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80013598:	f0 09 19 00 	cp.h	r9,r8
8001359c:	ce 93       	brcs	8001356e <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001359e:	2f cd       	sub	sp,-16
800135a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800135a4:	80 01       	ld.sh	r1,r0[0x0]
800135a6:	33 da       	mov	r10,61

800135a8 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
800135a8:	eb cd 40 80 	pushm	r7,lr
800135ac:	1a 97       	mov	r7,sp
800135ae:	20 2d       	sub	sp,8
800135b0:	ef 4c ff fc 	st.w	r7[-4],r12
800135b4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
800135b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135bc:	2f f8       	sub	r8,-1
800135be:	11 88       	ld.ub	r8,r8[0x0]
800135c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800135c4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800135c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135ca:	f0 c9 ff ff 	sub	r9,r8,-1
800135ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135d2:	11 88       	ld.ub	r8,r8[0x0]
800135d4:	b2 88       	st.b	r9[0x0],r8
}
800135d6:	2f ed       	sub	sp,-8
800135d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800135dc <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800135dc:	eb cd 40 80 	pushm	r7,lr
800135e0:	1a 97       	mov	r7,sp
800135e2:	20 2d       	sub	sp,8
800135e4:	ef 4c ff fc 	st.w	r7[-4],r12
800135e8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800135ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135f0:	2f d8       	sub	r8,-3
800135f2:	11 88       	ld.ub	r8,r8[0x0]
800135f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800135f8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800135fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135fe:	f0 c9 ff ff 	sub	r9,r8,-1
80013602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013606:	2f e8       	sub	r8,-2
80013608:	11 88       	ld.ub	r8,r8[0x0]
8001360a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001360c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013610:	f0 c9 ff fe 	sub	r9,r8,-2
80013614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013618:	2f f8       	sub	r8,-1
8001361a:	11 88       	ld.ub	r8,r8[0x0]
8001361c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001361e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013622:	f0 c9 ff fd 	sub	r9,r8,-3
80013626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001362a:	11 88       	ld.ub	r8,r8[0x0]
8001362c:	b2 88       	st.b	r9[0x0],r8
}
8001362e:	2f ed       	sub	sp,-8
80013630:	e3 cd 80 80 	ldm	sp++,r7,pc

80013634 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80013634:	eb cd 40 c0 	pushm	r6-r7,lr
80013638:	1a 97       	mov	r7,sp
8001363a:	20 3d       	sub	sp,12
8001363c:	49 06       	lddpc	r6,8001367c <mav_array_memcpy+0x48>
8001363e:	1e 26       	rsub	r6,pc
80013640:	ef 4c ff fc 	st.w	r7[-4],r12
80013644:	ef 4b ff f8 	st.w	r7[-8],r11
80013648:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001364c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013650:	58 08       	cp.w	r8,0
80013652:	c0 91       	brne	80013664 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80013654:	ee fa ff f4 	ld.w	r10,r7[-12]
80013658:	30 0b       	mov	r11,0
8001365a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001365e:	f0 16 00 31 	mcall	r6[196]
80013662:	c0 98       	rjmp	80013674 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80013664:	ee fa ff f4 	ld.w	r10,r7[-12]
80013668:	ee fb ff f8 	ld.w	r11,r7[-8]
8001366c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013670:	f0 16 00 1b 	mcall	r6[108]
	}
}
80013674:	2f dd       	sub	sp,-12
80013676:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001367a:	00 00       	add	r0,r0
8001367c:	80 01       	ld.sh	r1,r0[0x0]
8001367e:	34 c2       	mov	r2,76

80013680 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80013680:	eb cd 40 c0 	pushm	r6-r7,lr
80013684:	1a 97       	mov	r7,sp
80013686:	20 4d       	sub	sp,16
80013688:	48 e6       	lddpc	r6,800136c0 <_mav_put_char_array+0x40>
8001368a:	1e 26       	rsub	r6,pc
8001368c:	ef 4c ff fc 	st.w	r7[-4],r12
80013690:	ef 4a ff f4 	st.w	r7[-12],r10
80013694:	12 98       	mov	r8,r9
80013696:	16 99       	mov	r9,r11
80013698:	ef 69 ff f8 	st.b	r7[-8],r9
8001369c:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
800136a0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800136a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800136a8:	ee fa ff fc 	ld.w	r10,r7[-4]
800136ac:	f4 08 00 08 	add	r8,r10,r8
800136b0:	12 9a       	mov	r10,r9
800136b2:	ee fb ff f4 	ld.w	r11,r7[-12]
800136b6:	10 9c       	mov	r12,r8
800136b8:	cb ef       	rcall	80013634 <mav_array_memcpy>

}
800136ba:	2f cd       	sub	sp,-16
800136bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136c0:	80 01       	ld.sh	r1,r0[0x0]
800136c2:	35 0e       	mov	lr,80

800136c4 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
800136c4:	eb cd 40 c0 	pushm	r6-r7,lr
800136c8:	1a 97       	mov	r7,sp
800136ca:	20 3d       	sub	sp,12
800136cc:	48 d6       	lddpc	r6,80013700 <_MAV_RETURN_float+0x3c>
800136ce:	1e 26       	rsub	r6,pc
800136d0:	ef 4c ff f8 	st.w	r7[-8],r12
800136d4:	16 98       	mov	r8,r11
800136d6:	ef 68 ff f4 	st.b	r7[-12],r8
800136da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800136de:	2f 88       	sub	r8,-8
800136e0:	10 99       	mov	r9,r8
800136e2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800136e6:	10 09       	add	r9,r8
800136e8:	ee c8 00 04 	sub	r8,r7,4
800136ec:	12 9b       	mov	r11,r9
800136ee:	10 9c       	mov	r12,r8
800136f0:	c7 6f       	rcall	800135dc <byte_swap_4>
800136f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136f6:	10 9c       	mov	r12,r8
800136f8:	2f dd       	sub	sp,-12
800136fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136fe:	00 00       	add	r0,r0
80013700:	80 01       	ld.sh	r1,r0[0x0]
80013702:	35 52       	mov	r2,85

80013704 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80013704:	eb cd 40 c0 	pushm	r6-r7,lr
80013708:	1a 97       	mov	r7,sp
8001370a:	20 4d       	sub	sp,16
8001370c:	49 16       	lddpc	r6,80013750 <_MAV_RETURN_char_array+0x4c>
8001370e:	1e 26       	rsub	r6,pc
80013710:	ef 4c ff fc 	st.w	r7[-4],r12
80013714:	ef 4b ff f8 	st.w	r7[-8],r11
80013718:	12 98       	mov	r8,r9
8001371a:	14 99       	mov	r9,r10
8001371c:	ef 69 ff f4 	st.b	r7[-12],r9
80013720:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80013724:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80013728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001372c:	f0 ca ff f8 	sub	r10,r8,-8
80013730:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013734:	f4 08 00 08 	add	r8,r10,r8
80013738:	12 9a       	mov	r10,r9
8001373a:	10 9b       	mov	r11,r8
8001373c:	ee fc ff f8 	ld.w	r12,r7[-8]
80013740:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
80013744:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80013748:	10 9c       	mov	r12,r8
8001374a:	2f cd       	sub	sp,-16
8001374c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013750:	80 01       	ld.sh	r1,r0[0x0]
80013752:	35 92       	mov	r2,89

80013754 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80013754:	eb cd 40 c0 	pushm	r6-r7,lr
80013758:	1a 97       	mov	r7,sp
8001375a:	20 dd       	sub	sp,52
8001375c:	4a 16       	lddpc	r6,800137e0 <mavlink_msg_param_value_send+0x8c>
8001375e:	1e 26       	rsub	r6,pc
80013760:	ee ce ff f4 	sub	lr,r7,-12
80013764:	ef 4c ff e0 	st.w	r7[-32],r12
80013768:	ef 4b ff dc 	st.w	r7[-36],r11
8001376c:	ef 4a ff d8 	st.w	r7[-40],r10
80013770:	12 9a       	mov	r10,r9
80013772:	10 99       	mov	r9,r8
80013774:	7c 08       	ld.w	r8,lr[0x0]
80013776:	ef 6a ff d4 	st.b	r7[-44],r10
8001377a:	ef 59 ff d0 	st.h	r7[-48],r9
8001377e:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
80013782:	ee c9 00 28 	sub	r9,r7,40
80013786:	ee c8 00 1c 	sub	r8,r7,28
8001378a:	12 9b       	mov	r11,r9
8001378c:	10 9c       	mov	r12,r8
8001378e:	c2 7f       	rcall	800135dc <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80013790:	ee c9 00 30 	sub	r9,r7,48
80013794:	ee c8 00 1c 	sub	r8,r7,28
80013798:	2f c8       	sub	r8,-4
8001379a:	12 9b       	mov	r11,r9
8001379c:	10 9c       	mov	r12,r8
8001379e:	c0 5f       	rcall	800135a8 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
800137a0:	ee c9 00 34 	sub	r9,r7,52
800137a4:	ee c8 00 1c 	sub	r8,r7,28
800137a8:	2f a8       	sub	r8,-6
800137aa:	12 9b       	mov	r11,r9
800137ac:	10 9c       	mov	r12,r8
800137ae:	cf de       	rcall	800135a8 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
800137b0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800137b4:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
800137b8:	ee c8 00 1c 	sub	r8,r7,28
800137bc:	31 09       	mov	r9,16
800137be:	ee fa ff dc 	ld.w	r10,r7[-36]
800137c2:	30 8b       	mov	r11,8
800137c4:	10 9c       	mov	r12,r8
800137c6:	c5 df       	rcall	80013680 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
800137c8:	ee ca 00 1c 	sub	r10,r7,28
800137cc:	e0 68 00 dc 	mov	r8,220
800137d0:	31 99       	mov	r9,25
800137d2:	31 6b       	mov	r11,22
800137d4:	ee fc ff e0 	ld.w	r12,r7[-32]
800137d8:	c3 ae       	rcall	8001344c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
800137da:	2f 3d       	sub	sp,-52
800137dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800137e0:	80 01       	ld.sh	r1,r0[0x0]
800137e2:	35 e2       	mov	r2,94

800137e4 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800137e4:	eb cd 40 80 	pushm	r7,lr
800137e8:	1a 97       	mov	r7,sp
800137ea:	20 1d       	sub	sp,4
800137ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800137f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800137f4:	2f 88       	sub	r8,-8
800137f6:	2f c8       	sub	r8,-4
800137f8:	11 88       	ld.ub	r8,r8[0x0]
}
800137fa:	10 9c       	mov	r12,r8
800137fc:	2f fd       	sub	sp,-4
800137fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80013802 <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
80013802:	eb cd 40 80 	pushm	r7,lr
80013806:	1a 97       	mov	r7,sp
80013808:	20 1d       	sub	sp,4
8001380a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001380e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013812:	2f 88       	sub	r8,-8
80013814:	2f b8       	sub	r8,-5
80013816:	11 88       	ld.ub	r8,r8[0x0]
}
80013818:	10 9c       	mov	r12,r8
8001381a:	2f fd       	sub	sp,-4
8001381c:	e3 cd 80 80 	ldm	sp++,r7,pc

80013820 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80013820:	eb cd 40 c0 	pushm	r6-r7,lr
80013824:	1a 97       	mov	r7,sp
80013826:	20 2d       	sub	sp,8
80013828:	48 a6       	lddpc	r6,80013850 <mavlink_msg_param_set_get_param_id+0x30>
8001382a:	1e 26       	rsub	r6,pc
8001382c:	ef 4c ff fc 	st.w	r7[-4],r12
80013830:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80013834:	30 69       	mov	r9,6
80013836:	31 0a       	mov	r10,16
80013838:	ee fb ff f8 	ld.w	r11,r7[-8]
8001383c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013840:	c6 2f       	rcall	80013704 <_MAV_RETURN_char_array>
80013842:	18 98       	mov	r8,r12
80013844:	5c 88       	casts.h	r8
80013846:	5c 88       	casts.h	r8
}
80013848:	10 9c       	mov	r12,r8
8001384a:	2f ed       	sub	sp,-8
8001384c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013850:	80 01       	ld.sh	r1,r0[0x0]
80013852:	36 ae       	mov	lr,106

80013854 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80013854:	eb cd 40 c0 	pushm	r6-r7,lr
80013858:	1a 97       	mov	r7,sp
8001385a:	20 1d       	sub	sp,4
8001385c:	48 76       	lddpc	r6,80013878 <mavlink_msg_param_set_get_param_value+0x24>
8001385e:	1e 26       	rsub	r6,pc
80013860:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80013864:	30 0b       	mov	r11,0
80013866:	ee fc ff fc 	ld.w	r12,r7[-4]
8001386a:	c2 df       	rcall	800136c4 <_MAV_RETURN_float>
8001386c:	18 98       	mov	r8,r12
}
8001386e:	10 9c       	mov	r12,r8
80013870:	2f fd       	sub	sp,-4
80013872:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013876:	00 00       	add	r0,r0
80013878:	80 01       	ld.sh	r1,r0[0x0]
8001387a:	36 e2       	mov	r2,110

8001387c <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
8001387c:	eb cd 40 80 	pushm	r7,lr
80013880:	1a 97       	mov	r7,sp
80013882:	20 1d       	sub	sp,4
80013884:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
80013888:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001388c:	2f 88       	sub	r8,-8
8001388e:	2e a8       	sub	r8,-22
80013890:	11 88       	ld.ub	r8,r8[0x0]
}
80013892:	10 9c       	mov	r12,r8
80013894:	2f fd       	sub	sp,-4
80013896:	e3 cd 80 80 	ldm	sp++,r7,pc

8001389a <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
8001389a:	eb cd 40 c0 	pushm	r6-r7,lr
8001389e:	1a 97       	mov	r7,sp
800138a0:	20 2d       	sub	sp,8
800138a2:	49 76       	lddpc	r6,800138fc <mavlink_msg_param_set_decode+0x62>
800138a4:	1e 26       	rsub	r6,pc
800138a6:	ef 4c ff fc 	st.w	r7[-4],r12
800138aa:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
800138ae:	ee fc ff fc 	ld.w	r12,r7[-4]
800138b2:	cd 1f       	rcall	80013854 <mavlink_msg_param_set_get_param_value>
800138b4:	18 99       	mov	r9,r12
800138b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138ba:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
800138bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800138c0:	c9 2f       	rcall	800137e4 <mavlink_msg_param_set_get_target_system>
800138c2:	18 98       	mov	r8,r12
800138c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138c8:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
800138ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800138ce:	c9 af       	rcall	80013802 <mavlink_msg_param_set_get_target_component>
800138d0:	18 98       	mov	r8,r12
800138d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138d6:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
800138d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138dc:	2f a8       	sub	r8,-6
800138de:	10 9b       	mov	r11,r8
800138e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800138e4:	c9 ef       	rcall	80013820 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800138e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800138ea:	cc 9f       	rcall	8001387c <mavlink_msg_param_set_get_param_type>
800138ec:	18 98       	mov	r8,r12
800138ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138f2:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800138f6:	2f ed       	sub	sp,-8
800138f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800138fc:	80 01       	ld.sh	r1,r0[0x0]
800138fe:	37 28       	mov	r8,114

80013900 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80013900:	eb cd 40 c0 	pushm	r6-r7,lr
80013904:	1a 97       	mov	r7,sp
80013906:	48 a6       	lddpc	r6,8001392c <init_onboard_parameters+0x2c>
80013908:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
8001390a:	ec f8 00 24 	ld.w	r8,r6[36]
8001390e:	30 09       	mov	r9,0
80013910:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
80013914:	ec f9 00 24 	ld.w	r9,r6[36]
80013918:	30 08       	mov	r8,0
8001391a:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
8001391e:	ec f8 00 24 	ld.w	r8,r6[36]
80013922:	30 09       	mov	r9,0
80013924:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
80013928:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001392c:	80 01       	ld.sh	r1,r0[0x0]
8001392e:	37 8c       	mov	r12,120

80013930 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013930:	eb cd 40 e0 	pushm	r5-r7,lr
80013934:	1a 97       	mov	r7,sp
80013936:	20 2d       	sub	sp,8
80013938:	4b 66       	lddpc	r6,80013a10 <add_parameter_uint8+0xe0>
8001393a:	1e 26       	rsub	r6,pc
8001393c:	ef 4c ff fc 	st.w	r7[-4],r12
80013940:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013944:	ec f8 00 24 	ld.w	r8,r6[36]
80013948:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001394c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013950:	ec fb 00 24 	ld.w	r11,r6[36]
80013954:	12 98       	mov	r8,r9
80013956:	a3 78       	lsl	r8,0x3
80013958:	12 18       	sub	r8,r9
8001395a:	a3 68       	lsl	r8,0x2
8001395c:	f6 08 00 08 	add	r8,r11,r8
80013960:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013962:	ec f8 00 24 	ld.w	r8,r6[36]
80013966:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001396a:	12 98       	mov	r8,r9
8001396c:	a3 78       	lsl	r8,0x3
8001396e:	12 18       	sub	r8,r9
80013970:	2f f8       	sub	r8,-1
80013972:	f0 09 15 02 	lsl	r9,r8,0x2
80013976:	ec f8 00 24 	ld.w	r8,r6[36]
8001397a:	f2 08 00 08 	add	r8,r9,r8
8001397e:	ee fb ff f8 	ld.w	r11,r7[-8]
80013982:	10 9c       	mov	r12,r8
80013984:	f0 16 00 9e 	mcall	r6[632]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
80013988:	ec f8 00 24 	ld.w	r8,r6[36]
8001398c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013990:	ec fa 00 24 	ld.w	r10,r6[36]
80013994:	12 98       	mov	r8,r9
80013996:	a3 78       	lsl	r8,0x3
80013998:	12 18       	sub	r8,r9
8001399a:	a3 68       	lsl	r8,0x2
8001399c:	f4 08 00 08 	add	r8,r10,r8
800139a0:	2e c8       	sub	r8,-20
800139a2:	30 19       	mov	r9,1
800139a4:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800139a6:	ec f8 00 24 	ld.w	r8,r6[36]
800139aa:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800139ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800139b2:	f0 16 00 87 	mcall	r6[540]
800139b6:	18 98       	mov	r8,r12
800139b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800139bc:	ec fa 00 24 	ld.w	r10,r6[36]
800139c0:	0a 98       	mov	r8,r5
800139c2:	a3 78       	lsl	r8,0x3
800139c4:	0a 18       	sub	r8,r5
800139c6:	a3 68       	lsl	r8,0x2
800139c8:	f4 08 00 08 	add	r8,r10,r8
800139cc:	f0 ca ff e8 	sub	r10,r8,-24
800139d0:	12 98       	mov	r8,r9
800139d2:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800139d4:	ec f8 00 24 	ld.w	r8,r6[36]
800139d8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800139dc:	ec fa 00 24 	ld.w	r10,r6[36]
800139e0:	12 98       	mov	r8,r9
800139e2:	a3 78       	lsl	r8,0x3
800139e4:	12 18       	sub	r8,r9
800139e6:	a3 68       	lsl	r8,0x2
800139e8:	f4 08 00 08 	add	r8,r10,r8
800139ec:	f0 c9 ff e8 	sub	r9,r8,-24
800139f0:	30 18       	mov	r8,1
800139f2:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800139f4:	ec f8 00 24 	ld.w	r8,r6[36]
800139f8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800139fc:	f0 c9 ff ff 	sub	r9,r8,-1
80013a00:	ec f8 00 24 	ld.w	r8,r6[36]
80013a04:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013a08:	2f ed       	sub	sp,-8
80013a0a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013a0e:	00 00       	add	r0,r0
80013a10:	80 01       	ld.sh	r1,r0[0x0]
80013a12:	37 be       	mov	lr,123

80013a14 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
80013a14:	eb cd 40 e0 	pushm	r5-r7,lr
80013a18:	1a 97       	mov	r7,sp
80013a1a:	20 2d       	sub	sp,8
80013a1c:	4b 66       	lddpc	r6,80013af4 <add_parameter_uint32+0xe0>
80013a1e:	1e 26       	rsub	r6,pc
80013a20:	ef 4c ff fc 	st.w	r7[-4],r12
80013a24:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013a28:	ec f8 00 24 	ld.w	r8,r6[36]
80013a2c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a30:	ee fa ff fc 	ld.w	r10,r7[-4]
80013a34:	ec fb 00 24 	ld.w	r11,r6[36]
80013a38:	12 98       	mov	r8,r9
80013a3a:	a3 78       	lsl	r8,0x3
80013a3c:	12 18       	sub	r8,r9
80013a3e:	a3 68       	lsl	r8,0x2
80013a40:	f6 08 00 08 	add	r8,r11,r8
80013a44:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013a46:	ec f8 00 24 	ld.w	r8,r6[36]
80013a4a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a4e:	12 98       	mov	r8,r9
80013a50:	a3 78       	lsl	r8,0x3
80013a52:	12 18       	sub	r8,r9
80013a54:	2f f8       	sub	r8,-1
80013a56:	f0 09 15 02 	lsl	r9,r8,0x2
80013a5a:	ec f8 00 24 	ld.w	r8,r6[36]
80013a5e:	f2 08 00 08 	add	r8,r9,r8
80013a62:	ee fb ff f8 	ld.w	r11,r7[-8]
80013a66:	10 9c       	mov	r12,r8
80013a68:	f0 16 00 9e 	mcall	r6[632]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
80013a6c:	ec f8 00 24 	ld.w	r8,r6[36]
80013a70:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a74:	ec fa 00 24 	ld.w	r10,r6[36]
80013a78:	12 98       	mov	r8,r9
80013a7a:	a3 78       	lsl	r8,0x3
80013a7c:	12 18       	sub	r8,r9
80013a7e:	a3 68       	lsl	r8,0x2
80013a80:	f4 08 00 08 	add	r8,r10,r8
80013a84:	2e c8       	sub	r8,-20
80013a86:	30 59       	mov	r9,5
80013a88:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013a8a:	ec f8 00 24 	ld.w	r8,r6[36]
80013a8e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013a92:	ee fc ff f8 	ld.w	r12,r7[-8]
80013a96:	f0 16 00 87 	mcall	r6[540]
80013a9a:	18 98       	mov	r8,r12
80013a9c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013aa0:	ec fa 00 24 	ld.w	r10,r6[36]
80013aa4:	0a 98       	mov	r8,r5
80013aa6:	a3 78       	lsl	r8,0x3
80013aa8:	0a 18       	sub	r8,r5
80013aaa:	a3 68       	lsl	r8,0x2
80013aac:	f4 08 00 08 	add	r8,r10,r8
80013ab0:	f0 ca ff e8 	sub	r10,r8,-24
80013ab4:	12 98       	mov	r8,r9
80013ab6:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013ab8:	ec f8 00 24 	ld.w	r8,r6[36]
80013abc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ac0:	ec fa 00 24 	ld.w	r10,r6[36]
80013ac4:	12 98       	mov	r8,r9
80013ac6:	a3 78       	lsl	r8,0x3
80013ac8:	12 18       	sub	r8,r9
80013aca:	a3 68       	lsl	r8,0x2
80013acc:	f4 08 00 08 	add	r8,r10,r8
80013ad0:	f0 c9 ff e8 	sub	r9,r8,-24
80013ad4:	30 18       	mov	r8,1
80013ad6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013ad8:	ec f8 00 24 	ld.w	r8,r6[36]
80013adc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ae0:	f0 c9 ff ff 	sub	r9,r8,-1
80013ae4:	ec f8 00 24 	ld.w	r8,r6[36]
80013ae8:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013aec:	2f ed       	sub	sp,-8
80013aee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013af2:	00 00       	add	r0,r0
80013af4:	80 01       	ld.sh	r1,r0[0x0]
80013af6:	38 a2       	mov	r2,-118

80013af8 <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80013af8:	eb cd 40 e0 	pushm	r5-r7,lr
80013afc:	1a 97       	mov	r7,sp
80013afe:	20 2d       	sub	sp,8
80013b00:	4b 66       	lddpc	r6,80013bd8 <add_parameter_int32+0xe0>
80013b02:	1e 26       	rsub	r6,pc
80013b04:	ef 4c ff fc 	st.w	r7[-4],r12
80013b08:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013b0c:	ec f8 00 24 	ld.w	r8,r6[36]
80013b10:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b14:	ee fa ff fc 	ld.w	r10,r7[-4]
80013b18:	ec fb 00 24 	ld.w	r11,r6[36]
80013b1c:	12 98       	mov	r8,r9
80013b1e:	a3 78       	lsl	r8,0x3
80013b20:	12 18       	sub	r8,r9
80013b22:	a3 68       	lsl	r8,0x2
80013b24:	f6 08 00 08 	add	r8,r11,r8
80013b28:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013b2a:	ec f8 00 24 	ld.w	r8,r6[36]
80013b2e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b32:	12 98       	mov	r8,r9
80013b34:	a3 78       	lsl	r8,0x3
80013b36:	12 18       	sub	r8,r9
80013b38:	2f f8       	sub	r8,-1
80013b3a:	f0 09 15 02 	lsl	r9,r8,0x2
80013b3e:	ec f8 00 24 	ld.w	r8,r6[36]
80013b42:	f2 08 00 08 	add	r8,r9,r8
80013b46:	ee fb ff f8 	ld.w	r11,r7[-8]
80013b4a:	10 9c       	mov	r12,r8
80013b4c:	f0 16 00 9e 	mcall	r6[632]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80013b50:	ec f8 00 24 	ld.w	r8,r6[36]
80013b54:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b58:	ec fa 00 24 	ld.w	r10,r6[36]
80013b5c:	12 98       	mov	r8,r9
80013b5e:	a3 78       	lsl	r8,0x3
80013b60:	12 18       	sub	r8,r9
80013b62:	a3 68       	lsl	r8,0x2
80013b64:	f4 08 00 08 	add	r8,r10,r8
80013b68:	2e c8       	sub	r8,-20
80013b6a:	30 69       	mov	r9,6
80013b6c:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013b6e:	ec f8 00 24 	ld.w	r8,r6[36]
80013b72:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013b76:	ee fc ff f8 	ld.w	r12,r7[-8]
80013b7a:	f0 16 00 87 	mcall	r6[540]
80013b7e:	18 98       	mov	r8,r12
80013b80:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013b84:	ec fa 00 24 	ld.w	r10,r6[36]
80013b88:	0a 98       	mov	r8,r5
80013b8a:	a3 78       	lsl	r8,0x3
80013b8c:	0a 18       	sub	r8,r5
80013b8e:	a3 68       	lsl	r8,0x2
80013b90:	f4 08 00 08 	add	r8,r10,r8
80013b94:	f0 ca ff e8 	sub	r10,r8,-24
80013b98:	12 98       	mov	r8,r9
80013b9a:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013b9c:	ec f8 00 24 	ld.w	r8,r6[36]
80013ba0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ba4:	ec fa 00 24 	ld.w	r10,r6[36]
80013ba8:	12 98       	mov	r8,r9
80013baa:	a3 78       	lsl	r8,0x3
80013bac:	12 18       	sub	r8,r9
80013bae:	a3 68       	lsl	r8,0x2
80013bb0:	f4 08 00 08 	add	r8,r10,r8
80013bb4:	f0 c9 ff e8 	sub	r9,r8,-24
80013bb8:	30 18       	mov	r8,1
80013bba:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013bbc:	ec f8 00 24 	ld.w	r8,r6[36]
80013bc0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013bc4:	f0 c9 ff ff 	sub	r9,r8,-1
80013bc8:	ec f8 00 24 	ld.w	r8,r6[36]
80013bcc:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013bd0:	2f ed       	sub	sp,-8
80013bd2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013bd6:	00 00       	add	r0,r0
80013bd8:	80 01       	ld.sh	r1,r0[0x0]
80013bda:	39 86       	mov	r6,-104

80013bdc <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80013bdc:	eb cd 40 e0 	pushm	r5-r7,lr
80013be0:	1a 97       	mov	r7,sp
80013be2:	20 2d       	sub	sp,8
80013be4:	4b 66       	lddpc	r6,80013cbc <add_parameter_float+0xe0>
80013be6:	1e 26       	rsub	r6,pc
80013be8:	ef 4c ff fc 	st.w	r7[-4],r12
80013bec:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013bf0:	ec f8 00 24 	ld.w	r8,r6[36]
80013bf4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013bf8:	ec fa 00 24 	ld.w	r10,r6[36]
80013bfc:	12 98       	mov	r8,r9
80013bfe:	a3 78       	lsl	r8,0x3
80013c00:	12 18       	sub	r8,r9
80013c02:	a3 68       	lsl	r8,0x2
80013c04:	f4 08 00 08 	add	r8,r10,r8
80013c08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013c0c:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013c0e:	ec f8 00 24 	ld.w	r8,r6[36]
80013c12:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c16:	12 98       	mov	r8,r9
80013c18:	a3 78       	lsl	r8,0x3
80013c1a:	12 18       	sub	r8,r9
80013c1c:	2f f8       	sub	r8,-1
80013c1e:	f0 09 15 02 	lsl	r9,r8,0x2
80013c22:	ec f8 00 24 	ld.w	r8,r6[36]
80013c26:	f2 08 00 08 	add	r8,r9,r8
80013c2a:	ee fb ff f8 	ld.w	r11,r7[-8]
80013c2e:	10 9c       	mov	r12,r8
80013c30:	f0 16 00 9e 	mcall	r6[632]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80013c34:	ec f8 00 24 	ld.w	r8,r6[36]
80013c38:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c3c:	ec fa 00 24 	ld.w	r10,r6[36]
80013c40:	12 98       	mov	r8,r9
80013c42:	a3 78       	lsl	r8,0x3
80013c44:	12 18       	sub	r8,r9
80013c46:	a3 68       	lsl	r8,0x2
80013c48:	f4 08 00 08 	add	r8,r10,r8
80013c4c:	2e c8       	sub	r8,-20
80013c4e:	30 99       	mov	r9,9
80013c50:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013c52:	ec f8 00 24 	ld.w	r8,r6[36]
80013c56:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013c5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80013c5e:	f0 16 00 87 	mcall	r6[540]
80013c62:	18 98       	mov	r8,r12
80013c64:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013c68:	ec fa 00 24 	ld.w	r10,r6[36]
80013c6c:	0a 98       	mov	r8,r5
80013c6e:	a3 78       	lsl	r8,0x3
80013c70:	0a 18       	sub	r8,r5
80013c72:	a3 68       	lsl	r8,0x2
80013c74:	f4 08 00 08 	add	r8,r10,r8
80013c78:	f0 ca ff e8 	sub	r10,r8,-24
80013c7c:	12 98       	mov	r8,r9
80013c7e:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013c80:	ec f8 00 24 	ld.w	r8,r6[36]
80013c84:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c88:	ec fa 00 24 	ld.w	r10,r6[36]
80013c8c:	12 98       	mov	r8,r9
80013c8e:	a3 78       	lsl	r8,0x3
80013c90:	12 18       	sub	r8,r9
80013c92:	a3 68       	lsl	r8,0x2
80013c94:	f4 08 00 08 	add	r8,r10,r8
80013c98:	f0 c9 ff e8 	sub	r9,r8,-24
80013c9c:	30 18       	mov	r8,1
80013c9e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013ca0:	ec f8 00 24 	ld.w	r8,r6[36]
80013ca4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ca8:	f0 c9 ff ff 	sub	r9,r8,-1
80013cac:	ec f8 00 24 	ld.w	r8,r6[36]
80013cb0:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013cb4:	2f ed       	sub	sp,-8
80013cb6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013cba:	00 00       	add	r0,r0
80013cbc:	80 01       	ld.sh	r1,r0[0x0]
80013cbe:	3a 6a       	mov	r10,-90

80013cc0 <send_all_parameters>:

void send_all_parameters() {
80013cc0:	eb cd 40 c0 	pushm	r6-r7,lr
80013cc4:	1a 97       	mov	r7,sp
80013cc6:	20 1d       	sub	sp,4
80013cc8:	49 26       	lddpc	r6,80013d10 <send_all_parameters+0x50>
80013cca:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013ccc:	30 08       	mov	r8,0
80013cce:	ef 68 ff ff 	st.b	r7[-1],r8
80013cd2:	c1 48       	rjmp	80013cfa <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80013cd4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cd8:	ec fa 00 24 	ld.w	r10,r6[36]
80013cdc:	12 98       	mov	r8,r9
80013cde:	a3 78       	lsl	r8,0x3
80013ce0:	12 18       	sub	r8,r9
80013ce2:	a3 68       	lsl	r8,0x2
80013ce4:	f4 08 00 08 	add	r8,r10,r8
80013ce8:	f0 c9 ff e8 	sub	r9,r8,-24
80013cec:	30 18       	mov	r8,1
80013cee:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cf0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013cf4:	2f f8       	sub	r8,-1
80013cf6:	ef 68 ff ff 	st.b	r7[-1],r8
80013cfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cfe:	ec f8 00 24 	ld.w	r8,r6[36]
80013d02:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d06:	10 39       	cp.w	r9,r8
80013d08:	ce 65       	brlt	80013cd4 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80013d0a:	2f fd       	sub	sp,-4
80013d0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013d10:	80 01       	ld.sh	r1,r0[0x0]
80013d12:	3b 4e       	mov	lr,-76

80013d14 <send_all_parameters_now>:

void send_all_parameters_now() {
80013d14:	eb cd 40 e0 	pushm	r5-r7,lr
80013d18:	1a 97       	mov	r7,sp
80013d1a:	20 1d       	sub	sp,4
80013d1c:	4a d6       	lddpc	r6,80013dd0 <send_all_parameters_now+0xbc>
80013d1e:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013d20:	30 08       	mov	r8,0
80013d22:	ef 68 ff ff 	st.b	r7[-1],r8
80013d26:	c4 a8       	rjmp	80013dba <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d28:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013d2c:	ec f8 00 24 	ld.w	r8,r6[36]
80013d30:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d34:	5c 88       	casts.h	r8
80013d36:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013d3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d3e:	ec fa 00 24 	ld.w	r10,r6[36]
80013d42:	12 98       	mov	r8,r9
80013d44:	a3 78       	lsl	r8,0x3
80013d46:	12 18       	sub	r8,r9
80013d48:	a3 68       	lsl	r8,0x2
80013d4a:	f4 08 00 08 	add	r8,r10,r8
80013d4e:	2e c8       	sub	r8,-20
80013d50:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d52:	5c 58       	castu.b	r8
80013d54:	10 9c       	mov	r12,r8
80013d56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d5a:	ec fa 00 24 	ld.w	r10,r6[36]
80013d5e:	12 98       	mov	r8,r9
80013d60:	a3 78       	lsl	r8,0x3
80013d62:	12 18       	sub	r8,r9
80013d64:	a3 68       	lsl	r8,0x2
80013d66:	f4 08 00 08 	add	r8,r10,r8
80013d6a:	70 08       	ld.w	r8,r8[0x0]
80013d6c:	70 0a       	ld.w	r10,r8[0x0]
80013d6e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d72:	12 98       	mov	r8,r9
80013d74:	a3 78       	lsl	r8,0x3
80013d76:	12 18       	sub	r8,r9
80013d78:	2f f8       	sub	r8,-1
80013d7a:	f0 09 15 02 	lsl	r9,r8,0x2
80013d7e:	ec f8 00 24 	ld.w	r8,r6[36]
80013d82:	f2 08 00 0b 	add	r11,r9,r8
80013d86:	1a d5       	st.w	--sp,r5
80013d88:	1c 98       	mov	r8,lr
80013d8a:	18 99       	mov	r9,r12
80013d8c:	30 0c       	mov	r12,0
80013d8e:	fe b0 fc e3 	rcall	80013754 <mavlink_msg_param_value_send>
80013d92:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
80013d94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d98:	ec fa 00 24 	ld.w	r10,r6[36]
80013d9c:	12 98       	mov	r8,r9
80013d9e:	a3 78       	lsl	r8,0x3
80013da0:	12 18       	sub	r8,r9
80013da2:	a3 68       	lsl	r8,0x2
80013da4:	f4 08 00 08 	add	r8,r10,r8
80013da8:	f0 c9 ff e8 	sub	r9,r8,-24
80013dac:	30 08       	mov	r8,0
80013dae:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013db0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013db4:	2f f8       	sub	r8,-1
80013db6:	ef 68 ff ff 	st.b	r7[-1],r8
80013dba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dbe:	ec f8 00 24 	ld.w	r8,r6[36]
80013dc2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013dc6:	10 39       	cp.w	r9,r8
80013dc8:	cb 05       	brlt	80013d28 <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80013dca:	2f fd       	sub	sp,-4
80013dcc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013dd0:	80 01       	ld.sh	r1,r0[0x0]
80013dd2:	3b a2       	mov	r2,-70

80013dd4 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80013dd4:	eb cd 40 e0 	pushm	r5-r7,lr
80013dd8:	1a 97       	mov	r7,sp
80013dda:	20 1d       	sub	sp,4
80013ddc:	4b 56       	lddpc	r6,80013eb0 <send_scheduled_parameters+0xdc>
80013dde:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013de0:	30 08       	mov	r8,0
80013de2:	ef 68 ff ff 	st.b	r7[-1],r8
80013de6:	c5 98       	rjmp	80013e98 <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80013de8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dec:	ec fa 00 24 	ld.w	r10,r6[36]
80013df0:	12 98       	mov	r8,r9
80013df2:	a3 78       	lsl	r8,0x3
80013df4:	12 18       	sub	r8,r9
80013df6:	a3 68       	lsl	r8,0x2
80013df8:	f4 08 00 08 	add	r8,r10,r8
80013dfc:	2e 88       	sub	r8,-24
80013dfe:	11 a8       	ld.ub	r8,r8[0x2]
80013e00:	58 08       	cp.w	r8,0
80013e02:	c4 60       	breq	80013e8e <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013e04:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013e08:	ec f8 00 24 	ld.w	r8,r6[36]
80013e0c:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013e10:	5c 88       	casts.h	r8
80013e12:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013e16:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e1a:	ec fa 00 24 	ld.w	r10,r6[36]
80013e1e:	12 98       	mov	r8,r9
80013e20:	a3 78       	lsl	r8,0x3
80013e22:	12 18       	sub	r8,r9
80013e24:	a3 68       	lsl	r8,0x2
80013e26:	f4 08 00 08 	add	r8,r10,r8
80013e2a:	2e c8       	sub	r8,-20
80013e2c:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013e2e:	5c 58       	castu.b	r8
80013e30:	10 9c       	mov	r12,r8
80013e32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e36:	ec fa 00 24 	ld.w	r10,r6[36]
80013e3a:	12 98       	mov	r8,r9
80013e3c:	a3 78       	lsl	r8,0x3
80013e3e:	12 18       	sub	r8,r9
80013e40:	a3 68       	lsl	r8,0x2
80013e42:	f4 08 00 08 	add	r8,r10,r8
80013e46:	70 08       	ld.w	r8,r8[0x0]
80013e48:	70 0a       	ld.w	r10,r8[0x0]
80013e4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e4e:	12 98       	mov	r8,r9
80013e50:	a3 78       	lsl	r8,0x3
80013e52:	12 18       	sub	r8,r9
80013e54:	2f f8       	sub	r8,-1
80013e56:	f0 09 15 02 	lsl	r9,r8,0x2
80013e5a:	ec f8 00 24 	ld.w	r8,r6[36]
80013e5e:	f2 08 00 0b 	add	r11,r9,r8
80013e62:	1a d5       	st.w	--sp,r5
80013e64:	1c 98       	mov	r8,lr
80013e66:	18 99       	mov	r9,r12
80013e68:	30 0c       	mov	r12,0
80013e6a:	fe b0 fc 75 	rcall	80013754 <mavlink_msg_param_value_send>
80013e6e:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80013e70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e74:	ec fa 00 24 	ld.w	r10,r6[36]
80013e78:	12 98       	mov	r8,r9
80013e7a:	a3 78       	lsl	r8,0x3
80013e7c:	12 18       	sub	r8,r9
80013e7e:	a3 68       	lsl	r8,0x2
80013e80:	f4 08 00 08 	add	r8,r10,r8
80013e84:	f0 c9 ff e8 	sub	r9,r8,-24
80013e88:	30 08       	mov	r8,0
80013e8a:	b2 a8       	st.b	r9[0x2],r8
			return;
80013e8c:	c0 e8       	rjmp	80013ea8 <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013e8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013e92:	2f f8       	sub	r8,-1
80013e94:	ef 68 ff ff 	st.b	r7[-1],r8
80013e98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e9c:	ec f8 00 24 	ld.w	r8,r6[36]
80013ea0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ea4:	10 39       	cp.w	r9,r8
80013ea6:	ca 15       	brlt	80013de8 <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80013ea8:	2f fd       	sub	sp,-4
80013eaa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013eae:	00 00       	add	r0,r0
80013eb0:	80 01       	ld.sh	r1,r0[0x0]
80013eb2:	3c 62       	mov	r2,-58

80013eb4 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80013eb4:	eb cd 40 c0 	pushm	r6-r7,lr
80013eb8:	1a 97       	mov	r7,sp
80013eba:	20 4d       	sub	sp,16
80013ebc:	4d 26       	lddpc	r6,80014004 <send_parameter+0x150>
80013ebe:	1e 26       	rsub	r6,pc
80013ec0:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80013ec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ec8:	90 09       	ld.sh	r9,r8[0x0]
80013eca:	3f f8       	mov	r8,-1
80013ecc:	f0 09 19 00 	cp.h	r9,r8
80013ed0:	c1 d0       	breq	80013f0a <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013ed2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ed6:	90 08       	ld.sh	r8,r8[0x0]
80013ed8:	10 99       	mov	r9,r8
80013eda:	ec f8 00 24 	ld.w	r8,r6[36]
80013ede:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ee2:	10 39       	cp.w	r9,r8
80013ee4:	e0 89 00 8b 	brgt	80013ffa <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80013ee8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013eec:	90 08       	ld.sh	r8,r8[0x0]
80013eee:	10 99       	mov	r9,r8
80013ef0:	ec fa 00 24 	ld.w	r10,r6[36]
80013ef4:	12 98       	mov	r8,r9
80013ef6:	a3 78       	lsl	r8,0x3
80013ef8:	12 18       	sub	r8,r9
80013efa:	a3 68       	lsl	r8,0x2
80013efc:	f4 08 00 08 	add	r8,r10,r8
80013f00:	f0 c9 ff e8 	sub	r9,r8,-24
80013f04:	30 18       	mov	r8,1
80013f06:	b2 a8       	st.b	r9[0x2],r8
80013f08:	c7 a8       	rjmp	80013ffc <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80013f0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013f0e:	2f c8       	sub	r8,-4
80013f10:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013f14:	30 08       	mov	r8,0
80013f16:	ef 58 ff fa 	st.h	r7[-6],r8
80013f1a:	c6 78       	rjmp	80013fe8 <send_parameter+0x134>
			bool match = true;
80013f1c:	30 18       	mov	r8,1
80013f1e:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f22:	30 08       	mov	r8,0
80013f24:	ef 58 ff fe 	st.h	r7[-2],r8
80013f28:	c3 38       	rjmp	80013f8e <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013f2a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f2e:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f32:	ec fb 00 24 	ld.w	r11,r6[36]
80013f36:	12 98       	mov	r8,r9
80013f38:	a3 78       	lsl	r8,0x3
80013f3a:	12 18       	sub	r8,r9
80013f3c:	a3 68       	lsl	r8,0x2
80013f3e:	f6 08 00 08 	add	r8,r11,r8
80013f42:	14 08       	add	r8,r10
80013f44:	2f c8       	sub	r8,-4
80013f46:	11 89       	ld.ub	r9,r8[0x0]
80013f48:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013f4c:	ee fa ff f4 	ld.w	r10,r7[-12]
80013f50:	f4 08 00 08 	add	r8,r10,r8
80013f54:	11 88       	ld.ub	r8,r8[0x0]
80013f56:	f0 09 18 00 	cp.b	r9,r8
80013f5a:	c0 40       	breq	80013f62 <send_parameter+0xae>
					match = false;
80013f5c:	30 08       	mov	r8,0
80013f5e:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80013f62:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f66:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f6a:	ec fb 00 24 	ld.w	r11,r6[36]
80013f6e:	12 98       	mov	r8,r9
80013f70:	a3 78       	lsl	r8,0x3
80013f72:	12 18       	sub	r8,r9
80013f74:	a3 68       	lsl	r8,0x2
80013f76:	f6 08 00 08 	add	r8,r11,r8
80013f7a:	14 08       	add	r8,r10
80013f7c:	2f c8       	sub	r8,-4
80013f7e:	11 88       	ld.ub	r8,r8[0x0]
80013f80:	58 08       	cp.w	r8,0
80013f82:	c1 80       	breq	80013fb2 <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f84:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013f88:	2f f8       	sub	r8,-1
80013f8a:	ef 58 ff fe 	st.h	r7[-2],r8
80013f8e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f92:	ec fa 00 24 	ld.w	r10,r6[36]
80013f96:	12 98       	mov	r8,r9
80013f98:	a3 78       	lsl	r8,0x3
80013f9a:	12 18       	sub	r8,r9
80013f9c:	a3 68       	lsl	r8,0x2
80013f9e:	f4 08 00 08 	add	r8,r10,r8
80013fa2:	2e 88       	sub	r8,-24
80013fa4:	11 88       	ld.ub	r8,r8[0x0]
80013fa6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013faa:	f0 09 19 00 	cp.h	r9,r8
80013fae:	cb e3       	brcs	80013f2a <send_parameter+0x76>
80013fb0:	c0 28       	rjmp	80013fb4 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013fb2:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013fb4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013fb8:	30 08       	mov	r8,0
80013fba:	f0 09 18 00 	cp.b	r9,r8
80013fbe:	c1 00       	breq	80013fde <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80013fc0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fc4:	ec fa 00 24 	ld.w	r10,r6[36]
80013fc8:	12 98       	mov	r8,r9
80013fca:	a3 78       	lsl	r8,0x3
80013fcc:	12 18       	sub	r8,r9
80013fce:	a3 68       	lsl	r8,0x2
80013fd0:	f4 08 00 08 	add	r8,r10,r8
80013fd4:	f0 c9 ff e8 	sub	r9,r8,-24
80013fd8:	30 18       	mov	r8,1
80013fda:	b2 a8       	st.b	r9[0x2],r8

				break;
80013fdc:	c1 08       	rjmp	80013ffc <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013fde:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013fe2:	2f f8       	sub	r8,-1
80013fe4:	ef 58 ff fa 	st.h	r7[-6],r8
80013fe8:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fec:	ec f8 00 24 	ld.w	r8,r6[36]
80013ff0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ff4:	10 39       	cp.w	r9,r8
80013ff6:	c9 35       	brlt	80013f1c <send_parameter+0x68>
80013ff8:	c0 28       	rjmp	80013ffc <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013ffa:	d7 03       	nop

				break;
			}					
		}
	}
}
80013ffc:	2f cd       	sub	sp,-16
80013ffe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014002:	00 00       	add	r0,r0
80014004:	80 01       	ld.sh	r1,r0[0x0]
80014006:	3d 42       	mov	r2,-44

80014008 <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80014008:	eb cd 40 c0 	pushm	r6-r7,lr
8001400c:	1a 97       	mov	r7,sp
8001400e:	20 ad       	sub	sp,40
80014010:	4e 76       	lddpc	r6,800141ac <receive_parameter+0x1a4>
80014012:	1e 26       	rsub	r6,pc
80014014:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80014018:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001401c:	ee c9 00 24 	sub	r9,r7,36
80014020:	12 9b       	mov	r11,r9
80014022:	10 9c       	mov	r12,r8
80014024:	fe b0 fc 3b 	rcall	8001389a <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80014028:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001402c:	ec f8 00 74 	ld.w	r8,r6[116]
80014030:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014032:	f0 09 18 00 	cp.b	r9,r8
80014036:	e0 81 00 b7 	brne	800141a4 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
8001403a:	ef 39 ff e1 	ld.ub	r9,r7[-31]
8001403e:	ec f8 00 74 	ld.w	r8,r6[116]
80014042:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014044:	f0 09 18 00 	cp.b	r9,r8
80014048:	e0 81 00 ae 	brne	800141a4 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
8001404c:	ee c8 00 24 	sub	r8,r7,36
80014050:	2f a8       	sub	r8,-6
80014052:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014056:	30 08       	mov	r8,0
80014058:	ef 58 ff fa 	st.h	r7[-6],r8
8001405c:	c9 78       	rjmp	8001418a <receive_parameter+0x182>
			bool match = true;
8001405e:	30 18       	mov	r8,1
80014060:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80014064:	30 08       	mov	r8,0
80014066:	ef 58 ff fe 	st.h	r7[-2],r8
8001406a:	c3 38       	rjmp	800140d0 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
8001406c:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014070:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80014074:	ec fb 00 24 	ld.w	r11,r6[36]
80014078:	12 98       	mov	r8,r9
8001407a:	a3 78       	lsl	r8,0x3
8001407c:	12 18       	sub	r8,r9
8001407e:	a3 68       	lsl	r8,0x2
80014080:	f6 08 00 08 	add	r8,r11,r8
80014084:	14 08       	add	r8,r10
80014086:	2f c8       	sub	r8,-4
80014088:	11 89       	ld.ub	r9,r8[0x0]
8001408a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001408e:	ee fa ff f4 	ld.w	r10,r7[-12]
80014092:	f4 08 00 08 	add	r8,r10,r8
80014096:	11 88       	ld.ub	r8,r8[0x0]
80014098:	f0 09 18 00 	cp.b	r9,r8
8001409c:	c0 40       	breq	800140a4 <receive_parameter+0x9c>
					match = false;
8001409e:	30 08       	mov	r8,0
800140a0:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
800140a4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140a8:	ef 1a ff fe 	ld.uh	r10,r7[-2]
800140ac:	ec fb 00 24 	ld.w	r11,r6[36]
800140b0:	12 98       	mov	r8,r9
800140b2:	a3 78       	lsl	r8,0x3
800140b4:	12 18       	sub	r8,r9
800140b6:	a3 68       	lsl	r8,0x2
800140b8:	f6 08 00 08 	add	r8,r11,r8
800140bc:	14 08       	add	r8,r10
800140be:	2f c8       	sub	r8,-4
800140c0:	11 88       	ld.ub	r8,r8[0x0]
800140c2:	58 08       	cp.w	r8,0
800140c4:	c1 80       	breq	800140f4 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
800140c6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800140ca:	2f f8       	sub	r8,-1
800140cc:	ef 58 ff fe 	st.h	r7[-2],r8
800140d0:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140d4:	ec fa 00 24 	ld.w	r10,r6[36]
800140d8:	12 98       	mov	r8,r9
800140da:	a3 78       	lsl	r8,0x3
800140dc:	12 18       	sub	r8,r9
800140de:	a3 68       	lsl	r8,0x2
800140e0:	f4 08 00 08 	add	r8,r10,r8
800140e4:	2e 88       	sub	r8,-24
800140e6:	11 88       	ld.ub	r8,r8[0x0]
800140e8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800140ec:	f0 09 19 00 	cp.h	r9,r8
800140f0:	cb e3       	brcs	8001406c <receive_parameter+0x64>
800140f2:	c0 28       	rjmp	800140f6 <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800140f4:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800140f6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800140fa:	30 08       	mov	r8,0
800140fc:	f0 09 18 00 	cp.b	r9,r8
80014100:	c4 00       	breq	80014180 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
80014102:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014106:	ec fa 00 24 	ld.w	r10,r6[36]
8001410a:	12 98       	mov	r8,r9
8001410c:	a3 78       	lsl	r8,0x3
8001410e:	12 18       	sub	r8,r9
80014110:	a3 68       	lsl	r8,0x2
80014112:	f4 08 00 08 	add	r8,r10,r8
80014116:	70 08       	ld.w	r8,r8[0x0]
80014118:	70 09       	ld.w	r9,r8[0x0]
8001411a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001411e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014122:	c3 e0       	breq	8001419e <receive_parameter+0x196>
80014124:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80014128:	10 9a       	mov	r10,r8
8001412a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001412e:	ec fb 00 24 	ld.w	r11,r6[36]
80014132:	12 98       	mov	r8,r9
80014134:	a3 78       	lsl	r8,0x3
80014136:	12 18       	sub	r8,r9
80014138:	a3 68       	lsl	r8,0x2
8001413a:	f6 08 00 08 	add	r8,r11,r8
8001413e:	2e c8       	sub	r8,-20
80014140:	70 08       	ld.w	r8,r8[0x0]
80014142:	10 3a       	cp.w	r10,r8
80014144:	c2 f1       	brne	800141a2 <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80014146:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001414a:	ec fa 00 24 	ld.w	r10,r6[36]
8001414e:	12 98       	mov	r8,r9
80014150:	a3 78       	lsl	r8,0x3
80014152:	12 18       	sub	r8,r9
80014154:	a3 68       	lsl	r8,0x2
80014156:	f4 08 00 08 	add	r8,r10,r8
8001415a:	70 08       	ld.w	r8,r8[0x0]
8001415c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80014160:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80014162:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014166:	ec fa 00 24 	ld.w	r10,r6[36]
8001416a:	12 98       	mov	r8,r9
8001416c:	a3 78       	lsl	r8,0x3
8001416e:	12 18       	sub	r8,r9
80014170:	a3 68       	lsl	r8,0x2
80014172:	f4 08 00 08 	add	r8,r10,r8
80014176:	f0 c9 ff e8 	sub	r9,r8,-24
8001417a:	30 18       	mov	r8,1
8001417c:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
8001417e:	c1 38       	rjmp	800141a4 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014180:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80014184:	2f f8       	sub	r8,-1
80014186:	ef 58 ff fa 	st.h	r7[-6],r8
8001418a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001418e:	ec f8 00 24 	ld.w	r8,r6[36]
80014192:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014196:	10 39       	cp.w	r9,r8
80014198:	fe 95 ff 63 	brlt	8001405e <receive_parameter+0x56>
8001419c:	c0 48       	rjmp	800141a4 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
8001419e:	d7 03       	nop
800141a0:	c0 28       	rjmp	800141a4 <receive_parameter+0x19c>
800141a2:	d7 03       	nop
			}
		}
	}
}
800141a4:	2f 6d       	sub	sp,-40
800141a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800141aa:	00 00       	add	r0,r0
800141ac:	80 01       	ld.sh	r1,r0[0x0]
800141ae:	3e 96       	mov	r6,-23
800141b0:	46 6c       	lddsp	r12,sp[0x198]
800141b2:	61 73       	ld.w	r3,r0[0x5c]
800141b4:	68 20       	ld.w	r0,r4[0x8]
800141b6:	72 65       	ld.w	r5,r9[0x18]
800141b8:	61 64       	ld.w	r4,r0[0x58]
800141ba:	20 73       	sub	r3,7
800141bc:	75 63       	ld.w	r3,r10[0x58]
800141be:	63 65       	ld.w	r5,r1[0x58]
800141c0:	73 73       	ld.w	r3,r9[0x5c]
800141c2:	66 75       	ld.w	r5,r3[0x1c]
800141c4:	6c 21       	ld.w	r1,r6[0x8]
800141c6:	20 4e       	sub	lr,4
800141c8:	65 77       	ld.w	r7,r2[0x5c]
800141ca:	20 50       	sub	r0,5
800141cc:	61 72       	ld.w	r2,r0[0x5c]
800141ce:	61 6d       	ld.w	sp,r0[0x58]
800141d0:	65 74       	ld.w	r4,r2[0x5c]
800141d2:	65 72       	ld.w	r2,r2[0x5c]
800141d4:	73 20       	ld.w	r0,r9[0x48]
800141d6:	69 6e       	ld.w	lr,r4[0x58]
800141d8:	73 65       	ld.w	r5,r9[0x58]
800141da:	72 74       	ld.w	r4,r9[0x1c]
800141dc:	65 64       	ld.w	r4,r2[0x58]
800141de:	2e 20       	sub	r0,-30
800141e0:	0a 00       	add	r0,r5
800141e2:	00 00       	add	r0,r0
800141e4:	46 6c       	lddsp	r12,sp[0x198]
800141e6:	61 73       	ld.w	r3,r0[0x5c]
800141e8:	68 20       	ld.w	r0,r4[0x8]
800141ea:	6d 65       	ld.w	r5,r6[0x58]
800141ec:	6d 6f       	ld.w	pc,r6[0x58]
800141ee:	72 79       	ld.w	r9,r9[0x1c]
800141f0:	20 63       	sub	r3,6
800141f2:	6f 72       	ld.w	r2,r7[0x5c]
800141f4:	72 75       	ld.w	r5,r9[0x1c]
800141f6:	70 74       	ld.w	r4,r8[0x1c]
800141f8:	65 64       	ld.w	r4,r2[0x58]
800141fa:	21 20       	sub	r0,18
800141fc:	48 61       	lddpc	r1,80014214 <receive_parameter+0x20c>
800141fe:	72 64       	ld.w	r4,r9[0x18]
80014200:	63 6f       	ld.w	pc,r1[0x58]
80014202:	64 65       	ld.w	r5,r2[0x18]
80014204:	64 20       	ld.w	r0,r2[0x8]
80014206:	76 61       	ld.w	r1,r11[0x18]
80014208:	6c 75       	ld.w	r5,r6[0x1c]
8001420a:	65 73       	ld.w	r3,r2[0x5c]
8001420c:	20 74       	sub	r4,7
8001420e:	61 6b       	ld.w	r11,r0[0x58]
80014210:	65 6e       	ld.w	lr,r2[0x58]
80014212:	2e 0a       	sub	r10,-32
	...

80014216 <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
80014216:	eb cd 40 c0 	pushm	r6-r7,lr
8001421a:	1a 97       	mov	r7,sp
8001421c:	fa cd 01 f8 	sub	sp,sp,504
80014220:	4d 06       	lddpc	r6,80014360 <read_parameters_from_flashc+0x14a>
80014222:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80014224:	ec f8 01 9c 	ld.w	r8,r6[412]
80014228:	30 49       	mov	r9,4
8001422a:	ea 19 80 80 	orh	r9,0x8080
8001422e:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80014230:	30 08       	mov	r8,0
80014232:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
80014236:	30 08       	mov	r8,0
80014238:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
8001423c:	30 08       	mov	r8,0
8001423e:	ef 68 ff f7 	st.b	r7[-9],r8
80014242:	c2 98       	rjmp	80014294 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80014244:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014248:	ec f9 01 9c 	ld.w	r9,r6[412]
8001424c:	72 09       	ld.w	r9,r9[0x0]
8001424e:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80014252:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80014256:	a3 68       	lsl	r8,0x2
80014258:	ee 08 00 08 	add	r8,r7,r8
8001425c:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014260:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014264:	a3 68       	lsl	r8,0x2
80014266:	ee 08 00 08 	add	r8,r7,r8
8001426a:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8001426e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014272:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014276:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
8001427a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001427e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014282:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014286:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
8001428a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001428e:	2f f8       	sub	r8,-1
80014290:	ef 68 ff f7 	st.b	r7[-9],r8
80014294:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80014298:	ec f8 00 24 	ld.w	r8,r6[36]
8001429c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800142a0:	2f f8       	sub	r8,-1
800142a2:	10 39       	cp.w	r9,r8
800142a4:	cd 05       	brlt	80014244 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
800142a6:	ec f8 00 24 	ld.w	r8,r6[36]
800142aa:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800142ae:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
800142b2:	ee f8 fe 08 	ld.w	r8,r7[-504]
800142b6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142ba:	c4 b1       	brne	80014350 <read_parameters_from_flashc+0x13a>
800142bc:	ec f8 01 9c 	ld.w	r8,r6[412]
800142c0:	70 08       	ld.w	r8,r8[0x0]
800142c2:	ec f9 00 24 	ld.w	r9,r6[36]
800142c6:	f2 f9 0d 20 	ld.w	r9,r9[3360]
800142ca:	2f f9       	sub	r9,-1
800142cc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800142d4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142d8:	c3 c1       	brne	80014350 <read_parameters_from_flashc+0x13a>
800142da:	ec f8 01 9c 	ld.w	r8,r6[412]
800142de:	70 08       	ld.w	r8,r8[0x0]
800142e0:	ec f9 00 24 	ld.w	r9,r6[36]
800142e4:	f2 f9 0d 20 	ld.w	r9,r9[3360]
800142e8:	2f e9       	sub	r9,-2
800142ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800142f2:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142f6:	c2 d1       	brne	80014350 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
800142f8:	fe cc 01 48 	sub	r12,pc,328
800142fc:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
80014300:	30 18       	mov	r8,1
80014302:	ef 68 ff f7 	st.b	r7[-9],r8
80014306:	c1 b8       	rjmp	8001433c <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80014308:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001430c:	f0 c9 00 01 	sub	r9,r8,1
80014310:	ec fa 00 24 	ld.w	r10,r6[36]
80014314:	12 98       	mov	r8,r9
80014316:	a3 78       	lsl	r8,0x3
80014318:	12 18       	sub	r8,r9
8001431a:	a3 68       	lsl	r8,0x2
8001431c:	f4 08 00 08 	add	r8,r10,r8
80014320:	70 09       	ld.w	r9,r8[0x0]
80014322:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014326:	a3 68       	lsl	r8,0x2
80014328:	ee 08 00 08 	add	r8,r7,r8
8001432c:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014330:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80014332:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014336:	2f f8       	sub	r8,-1
80014338:	ef 68 ff f7 	st.b	r7[-9],r8
8001433c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80014340:	ec f8 00 24 	ld.w	r8,r6[36]
80014344:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014348:	2f f8       	sub	r8,-1
8001434a:	10 39       	cp.w	r9,r8
8001434c:	cd e5       	brlt	80014308 <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
8001434e:	c0 58       	rjmp	80014358 <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80014350:	fe cc 01 6c 	sub	r12,pc,364
80014354:	f0 16 00 01 	mcall	r6[4]
	}
}
80014358:	28 2d       	sub	sp,-504
8001435a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001435e:	00 00       	add	r0,r0
80014360:	80 01       	ld.sh	r1,r0[0x0]
80014362:	40 a6       	lddsp	r6,sp[0x28]
80014364:	42 65       	lddsp	r5,sp[0x98]
80014366:	67 69       	ld.w	r9,r3[0x58]
80014368:	6e 20       	ld.w	r0,r7[0x8]
8001436a:	77 72       	ld.w	r2,r11[0x5c]
8001436c:	69 74       	ld.w	r4,r4[0x5c]
8001436e:	65 20       	ld.w	r0,r2[0x48]
80014370:	74 6f       	ld.w	pc,r10[0x18]
80014372:	20 66       	sub	r6,6
80014374:	6c 61       	ld.w	r1,r6[0x18]
80014376:	73 68       	ld.w	r8,r9[0x58]
80014378:	63 2e       	ld.w	lr,r1[0x48]
8001437a:	2e 2e       	sub	lr,-30
8001437c:	0a 00       	add	r0,r5
8001437e:	00 00       	add	r0,r0
80014380:	57 72       	stdsp	sp[0x1dc],r2
80014382:	69 74       	ld.w	r4,r4[0x5c]
80014384:	65 20       	ld.w	r0,r2[0x48]
80014386:	74 6f       	ld.w	pc,r10[0x18]
80014388:	20 66       	sub	r6,6
8001438a:	61 6c       	ld.w	r12,r0[0x58]
8001438c:	73 68       	ld.w	r8,r9[0x58]
8001438e:	63 20       	ld.w	r0,r1[0x48]
80014390:	63 6f       	ld.w	pc,r1[0x58]
80014392:	6d 70       	ld.w	r0,r6[0x5c]
80014394:	6c 65       	ld.w	r5,r6[0x18]
80014396:	74 65       	ld.w	r5,r10[0x18]
80014398:	64 2e       	ld.w	lr,r2[0x8]
8001439a:	0a 00       	add	r0,r5

8001439c <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
8001439c:	eb cd 40 c0 	pushm	r6-r7,lr
800143a0:	1a 97       	mov	r7,sp
800143a2:	fa cd 01 f8 	sub	sp,sp,504
800143a6:	4c 96       	lddpc	r6,800144c8 <write_parameters_to_flashc+0x12c>
800143a8:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
800143aa:	30 08       	mov	r8,0
800143ac:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
800143b0:	30 08       	mov	r8,0
800143b2:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
800143b6:	ec f8 01 9c 	ld.w	r8,r6[412]
800143ba:	30 49       	mov	r9,4
800143bc:	ea 19 80 80 	orh	r9,0x8080
800143c0:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
800143c2:	ec f8 00 24 	ld.w	r8,r6[36]
800143c6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800143ca:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800143ce:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
800143d2:	ee f8 fe 08 	ld.w	r8,r7[-504]
800143d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800143da:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143de:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
800143e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800143e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143ea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143ee:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
800143f2:	fe cc 00 8e 	sub	r12,pc,142
800143f6:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
800143fa:	30 18       	mov	r8,1
800143fc:	ef 68 ff ff 	st.b	r7[-1],r8
80014400:	c3 18       	rjmp	80014462 <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
80014402:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80014406:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001440a:	f0 c9 00 01 	sub	r9,r8,1
8001440e:	ec fb 00 24 	ld.w	r11,r6[36]
80014412:	12 98       	mov	r8,r9
80014414:	a3 78       	lsl	r8,0x3
80014416:	12 18       	sub	r8,r9
80014418:	a3 68       	lsl	r8,0x2
8001441a:	f6 08 00 08 	add	r8,r11,r8
8001441e:	70 08       	ld.w	r8,r8[0x0]
80014420:	70 09       	ld.w	r9,r8[0x0]
80014422:	f4 08 15 02 	lsl	r8,r10,0x2
80014426:	ee 08 00 08 	add	r8,r7,r8
8001442a:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
8001442e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014432:	a3 68       	lsl	r8,0x2
80014434:	ee 08 00 08 	add	r8,r7,r8
80014438:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8001443c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014440:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014444:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80014448:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001444c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014450:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014454:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
80014458:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001445c:	2f f8       	sub	r8,-1
8001445e:	ef 68 ff ff 	st.b	r7[-1],r8
80014462:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80014466:	ec f8 00 24 	ld.w	r8,r6[36]
8001446a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001446e:	2f f8       	sub	r8,-1
80014470:	10 39       	cp.w	r9,r8
80014472:	cc 85       	brlt	80014402 <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
80014474:	ec f8 00 24 	ld.w	r8,r6[36]
80014478:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001447c:	2f f8       	sub	r8,-1
8001447e:	a3 68       	lsl	r8,0x2
80014480:	ee 08 00 08 	add	r8,r7,r8
80014484:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014488:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
8001448c:	ec f8 00 24 	ld.w	r8,r6[36]
80014490:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014494:	2f e8       	sub	r8,-2
80014496:	a3 68       	lsl	r8,0x2
80014498:	ee 08 00 08 	add	r8,r7,r8
8001449c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800144a0:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
800144a4:	ec f8 01 9c 	ld.w	r8,r6[412]
800144a8:	70 08       	ld.w	r8,r8[0x0]
800144aa:	ee cb 01 f8 	sub	r11,r7,504
800144ae:	30 19       	mov	r9,1
800144b0:	e0 6a 01 ec 	mov	r10,492
800144b4:	10 9c       	mov	r12,r8
800144b6:	f0 16 01 5d 	mcall	r6[1396]
	dbg_print("Write to falshc completed.\n");
800144ba:	fe cc 01 3a 	sub	r12,pc,314
800144be:	f0 16 00 01 	mcall	r6[4]
800144c2:	28 2d       	sub	sp,-504
800144c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800144c8:	80 01       	ld.sh	r1,r0[0x0]
800144ca:	42 2c       	lddsp	r12,sp[0x88]

800144cc <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
800144cc:	eb cd 40 80 	pushm	r7,lr
800144d0:	1a 97       	mov	r7,sp
800144d2:	20 5d       	sub	sp,20
800144d4:	18 9a       	mov	r10,r12
800144d6:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
800144da:	30 08       	mov	r8,0
800144dc:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
800144e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144e4:	70 08       	ld.w	r8,r8[0x0]
800144e6:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
800144ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144ee:	2f c8       	sub	r8,-4
800144f0:	70 08       	ld.w	r8,r8[0x0]
800144f2:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
800144f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144fa:	2f 88       	sub	r8,-8
800144fc:	70 08       	ld.w	r8,r8[0x0]
800144fe:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80014502:	14 98       	mov	r8,r10
80014504:	ee c9 00 10 	sub	r9,r7,16
80014508:	20 08       	sub	r8,0
8001450a:	20 09       	sub	r9,0
8001450c:	72 0b       	ld.w	r11,r9[0x0]
8001450e:	91 0b       	st.w	r8[0x0],r11
80014510:	72 1b       	ld.w	r11,r9[0x4]
80014512:	91 1b       	st.w	r8[0x4],r11
80014514:	72 2b       	ld.w	r11,r9[0x8]
80014516:	91 2b       	st.w	r8[0x8],r11
80014518:	72 39       	ld.w	r9,r9[0xc]
8001451a:	91 39       	st.w	r8[0xc],r9
}
8001451c:	14 9c       	mov	r12,r10
8001451e:	2f bd       	sub	sp,-20
80014520:	e3 cd 80 80 	ldm	sp++,r7,pc

80014524 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80014524:	eb cd 40 80 	pushm	r7,lr
80014528:	1a 97       	mov	r7,sp
8001452a:	20 3d       	sub	sp,12
8001452c:	ef 4c ff f8 	st.w	r7[-8],r12
80014530:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80014534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014538:	70 09       	ld.w	r9,r8[0x0]
8001453a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001453e:	70 08       	ld.w	r8,r8[0x0]
80014540:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014548:	2f c8       	sub	r8,-4
8001454a:	70 0a       	ld.w	r10,r8[0x0]
8001454c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014550:	2f c8       	sub	r8,-4
80014552:	70 08       	ld.w	r8,r8[0x0]
80014554:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014558:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001455c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014560:	2f 88       	sub	r8,-8
80014562:	70 0a       	ld.w	r10,r8[0x0]
80014564:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014568:	2f 88       	sub	r8,-8
8001456a:	70 08       	ld.w	r8,r8[0x0]
8001456c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014570:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014574:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80014578:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001457c:	10 9c       	mov	r12,r8
8001457e:	2f dd       	sub	sp,-12
80014580:	e3 cd 80 80 	ldm	sp++,r7,pc

80014584 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80014584:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014588:	1a 97       	mov	r7,sp
8001458a:	20 7d       	sub	sp,28
8001458c:	4b d6       	lddpc	r6,80014680 <quat_multi+0xfc>
8001458e:	1e 26       	rsub	r6,pc
80014590:	ee c8 ff ec 	sub	r8,r7,-20
80014594:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
80014596:	70 2a       	ld.w	r10,r8[0x8]
80014598:	70 79       	ld.w	r9,r8[0x1c]
8001459a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001459e:	70 3b       	ld.w	r11,r8[0xc]
800145a0:	70 69       	ld.w	r9,r8[0x18]
800145a2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145a6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145aa:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
800145ae:	70 3a       	ld.w	r10,r8[0xc]
800145b0:	70 59       	ld.w	r9,r8[0x14]
800145b2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145b6:	70 1b       	ld.w	r11,r8[0x4]
800145b8:	70 79       	ld.w	r9,r8[0x1c]
800145ba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145be:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145c2:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800145c6:	70 1a       	ld.w	r10,r8[0x4]
800145c8:	70 69       	ld.w	r9,r8[0x18]
800145ca:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145ce:	70 2b       	ld.w	r11,r8[0x8]
800145d0:	70 59       	ld.w	r9,r8[0x14]
800145d2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145d6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145da:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800145de:	70 4a       	ld.w	r10,r8[0x10]
800145e0:	70 19       	ld.w	r9,r8[0x4]
800145e2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145e6:	70 0b       	ld.w	r11,r8[0x0]
800145e8:	70 59       	ld.w	r9,r8[0x14]
800145ea:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145ee:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800145f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800145f6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800145fa:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800145fe:	70 4a       	ld.w	r10,r8[0x10]
80014600:	70 29       	ld.w	r9,r8[0x8]
80014602:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014606:	70 0b       	ld.w	r11,r8[0x0]
80014608:	70 69       	ld.w	r9,r8[0x18]
8001460a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001460e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014612:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014616:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001461a:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001461e:	70 4a       	ld.w	r10,r8[0x10]
80014620:	70 39       	ld.w	r9,r8[0xc]
80014622:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014626:	70 0b       	ld.w	r11,r8[0x0]
80014628:	70 79       	ld.w	r9,r8[0x1c]
8001462a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001462e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014632:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014636:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001463a:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001463e:	70 0a       	ld.w	r10,r8[0x0]
80014640:	70 49       	ld.w	r9,r8[0x10]
80014642:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
80014646:	f0 c9 ff f0 	sub	r9,r8,-16
8001464a:	2f c9       	sub	r9,-4
8001464c:	2f c8       	sub	r8,-4
8001464e:	12 9b       	mov	r11,r9
80014650:	10 9c       	mov	r12,r8
80014652:	c6 9f       	rcall	80014524 <scalar_product>
80014654:	18 98       	mov	r8,r12
80014656:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001465a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001465e:	0a 98       	mov	r8,r5
80014660:	ee c9 00 1c 	sub	r9,r7,28
80014664:	20 08       	sub	r8,0
80014666:	20 09       	sub	r9,0
80014668:	72 0a       	ld.w	r10,r9[0x0]
8001466a:	91 0a       	st.w	r8[0x0],r10
8001466c:	72 1a       	ld.w	r10,r9[0x4]
8001466e:	91 1a       	st.w	r8[0x4],r10
80014670:	72 2a       	ld.w	r10,r9[0x8]
80014672:	91 2a       	st.w	r8[0x8],r10
80014674:	72 39       	ld.w	r9,r9[0xc]
80014676:	91 39       	st.w	r8[0xc],r9
}
80014678:	0a 9c       	mov	r12,r5
8001467a:	2f 9d       	sub	sp,-28
8001467c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014680:	80 01       	ld.sh	r1,r0[0x0]
80014682:	44 12       	lddsp	r2,sp[0x104]

80014684 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80014684:	eb cd 40 80 	pushm	r7,lr
80014688:	1a 97       	mov	r7,sp
8001468a:	20 5d       	sub	sp,20
8001468c:	ee c9 ff f8 	sub	r9,r7,-8
80014690:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80014692:	72 08       	ld.w	r8,r9[0x0]
80014694:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80014698:	30 08       	mov	r8,0
8001469a:	ef 48 ff fc 	st.w	r7[-4],r8
8001469e:	c1 58       	rjmp	800146c8 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
800146a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146a4:	ee fb ff fc 	ld.w	r11,r7[-4]
800146a8:	2f fb       	sub	r11,-1
800146aa:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
800146ae:	ee 1b 80 00 	eorh	r11,0x8000
800146b2:	2f f8       	sub	r8,-1
800146b4:	a3 68       	lsl	r8,0x2
800146b6:	ee 08 00 08 	add	r8,r7,r8
800146ba:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800146be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146c2:	2f f8       	sub	r8,-1
800146c4:	ef 48 ff fc 	st.w	r7[-4],r8
800146c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146cc:	58 28       	cp.w	r8,2
800146ce:	fe 9a ff e9 	brle	800146a0 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800146d2:	14 98       	mov	r8,r10
800146d4:	ee c9 00 14 	sub	r9,r7,20
800146d8:	20 08       	sub	r8,0
800146da:	20 09       	sub	r9,0
800146dc:	72 0b       	ld.w	r11,r9[0x0]
800146de:	91 0b       	st.w	r8[0x0],r11
800146e0:	72 1b       	ld.w	r11,r9[0x4]
800146e2:	91 1b       	st.w	r8[0x4],r11
800146e4:	72 2b       	ld.w	r11,r9[0x8]
800146e6:	91 2b       	st.w	r8[0x8],r11
800146e8:	72 39       	ld.w	r9,r9[0xc]
800146ea:	91 39       	st.w	r8[0xc],r9
}
800146ec:	14 9c       	mov	r12,r10
800146ee:	2f bd       	sub	sp,-20
800146f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800146f4 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800146f4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800146f8:	1a 97       	mov	r7,sp
800146fa:	20 cd       	sub	sp,48
800146fc:	4b c6       	lddpc	r6,800147ec <quat_global_to_local+0xf8>
800146fe:	1e 26       	rsub	r6,pc
80014700:	ee c5 ff ec 	sub	r5,r7,-20
80014704:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80014706:	ee ca 00 10 	sub	r10,r7,16
8001470a:	20 4d       	sub	sp,16
8001470c:	1a 98       	mov	r8,sp
8001470e:	0a 99       	mov	r9,r5
80014710:	20 08       	sub	r8,0
80014712:	20 09       	sub	r9,0
80014714:	72 0b       	ld.w	r11,r9[0x0]
80014716:	91 0b       	st.w	r8[0x0],r11
80014718:	72 1b       	ld.w	r11,r9[0x4]
8001471a:	91 1b       	st.w	r8[0x4],r11
8001471c:	72 2b       	ld.w	r11,r9[0x8]
8001471e:	91 2b       	st.w	r8[0x8],r11
80014720:	72 39       	ld.w	r9,r9[0xc]
80014722:	91 39       	st.w	r8[0xc],r9
80014724:	14 9c       	mov	r12,r10
80014726:	ca ff       	rcall	80014684 <quat_inv>
80014728:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001472a:	ee ca 00 20 	sub	r10,r7,32
8001472e:	20 4d       	sub	sp,16
80014730:	1a 98       	mov	r8,sp
80014732:	ea c9 ff f0 	sub	r9,r5,-16
80014736:	20 08       	sub	r8,0
80014738:	20 09       	sub	r9,0
8001473a:	72 0b       	ld.w	r11,r9[0x0]
8001473c:	91 0b       	st.w	r8[0x0],r11
8001473e:	72 1b       	ld.w	r11,r9[0x4]
80014740:	91 1b       	st.w	r8[0x4],r11
80014742:	72 2b       	ld.w	r11,r9[0x8]
80014744:	91 2b       	st.w	r8[0x8],r11
80014746:	72 39       	ld.w	r9,r9[0xc]
80014748:	91 39       	st.w	r8[0xc],r9
8001474a:	20 4d       	sub	sp,16
8001474c:	1a 98       	mov	r8,sp
8001474e:	ee c9 00 10 	sub	r9,r7,16
80014752:	20 08       	sub	r8,0
80014754:	20 09       	sub	r9,0
80014756:	72 0b       	ld.w	r11,r9[0x0]
80014758:	91 0b       	st.w	r8[0x0],r11
8001475a:	72 1b       	ld.w	r11,r9[0x4]
8001475c:	91 1b       	st.w	r8[0x4],r11
8001475e:	72 2b       	ld.w	r11,r9[0x8]
80014760:	91 2b       	st.w	r8[0x8],r11
80014762:	72 39       	ld.w	r9,r9[0xc]
80014764:	91 39       	st.w	r8[0xc],r9
80014766:	14 9c       	mov	r12,r10
80014768:	c0 ef       	rcall	80014584 <quat_multi>
8001476a:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001476c:	ee ca 00 30 	sub	r10,r7,48
80014770:	20 4d       	sub	sp,16
80014772:	1a 98       	mov	r8,sp
80014774:	0a 99       	mov	r9,r5
80014776:	20 08       	sub	r8,0
80014778:	20 09       	sub	r9,0
8001477a:	72 0b       	ld.w	r11,r9[0x0]
8001477c:	91 0b       	st.w	r8[0x0],r11
8001477e:	72 1b       	ld.w	r11,r9[0x4]
80014780:	91 1b       	st.w	r8[0x4],r11
80014782:	72 2b       	ld.w	r11,r9[0x8]
80014784:	91 2b       	st.w	r8[0x8],r11
80014786:	72 39       	ld.w	r9,r9[0xc]
80014788:	91 39       	st.w	r8[0xc],r9
8001478a:	20 4d       	sub	sp,16
8001478c:	1a 98       	mov	r8,sp
8001478e:	ee c9 00 20 	sub	r9,r7,32
80014792:	20 08       	sub	r8,0
80014794:	20 09       	sub	r9,0
80014796:	72 0b       	ld.w	r11,r9[0x0]
80014798:	91 0b       	st.w	r8[0x0],r11
8001479a:	72 1b       	ld.w	r11,r9[0x4]
8001479c:	91 1b       	st.w	r8[0x4],r11
8001479e:	72 2b       	ld.w	r11,r9[0x8]
800147a0:	91 2b       	st.w	r8[0x8],r11
800147a2:	72 39       	ld.w	r9,r9[0xc]
800147a4:	91 39       	st.w	r8[0xc],r9
800147a6:	14 9c       	mov	r12,r10
800147a8:	ce ee       	rcall	80014584 <quat_multi>
800147aa:	2f 8d       	sub	sp,-32
800147ac:	ee c8 00 20 	sub	r8,r7,32
800147b0:	ee c9 00 30 	sub	r9,r7,48
800147b4:	20 08       	sub	r8,0
800147b6:	20 09       	sub	r9,0
800147b8:	72 0a       	ld.w	r10,r9[0x0]
800147ba:	91 0a       	st.w	r8[0x0],r10
800147bc:	72 1a       	ld.w	r10,r9[0x4]
800147be:	91 1a       	st.w	r8[0x4],r10
800147c0:	72 2a       	ld.w	r10,r9[0x8]
800147c2:	91 2a       	st.w	r8[0x8],r10
800147c4:	72 39       	ld.w	r9,r9[0xc]
800147c6:	91 39       	st.w	r8[0xc],r9

	return qtmp;
800147c8:	06 98       	mov	r8,r3
800147ca:	ee c9 00 20 	sub	r9,r7,32
800147ce:	20 08       	sub	r8,0
800147d0:	20 09       	sub	r9,0
800147d2:	72 0a       	ld.w	r10,r9[0x0]
800147d4:	91 0a       	st.w	r8[0x0],r10
800147d6:	72 1a       	ld.w	r10,r9[0x4]
800147d8:	91 1a       	st.w	r8[0x4],r10
800147da:	72 2a       	ld.w	r10,r9[0x8]
800147dc:	91 2a       	st.w	r8[0x8],r10
800147de:	72 39       	ld.w	r9,r9[0xc]
800147e0:	91 39       	st.w	r8[0xc],r9
}
800147e2:	06 9c       	mov	r12,r3
800147e4:	2f 4d       	sub	sp,-48
800147e6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800147ea:	00 00       	add	r0,r0
800147ec:	80 01       	ld.sh	r1,r0[0x0]
800147ee:	45 82       	lddsp	r2,sp[0x160]

800147f0 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
800147f0:	eb cd 40 c0 	pushm	r6-r7,lr
800147f4:	1a 97       	mov	r7,sp
800147f6:	20 2d       	sub	sp,8
800147f8:	48 96       	lddpc	r6,8001481c <vector_norm_sqr+0x2c>
800147fa:	1e 26       	rsub	r6,pc
800147fc:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80014800:	ee fb ff f8 	ld.w	r11,r7[-8]
80014804:	ee fc ff f8 	ld.w	r12,r7[-8]
80014808:	c8 ee       	rcall	80014524 <scalar_product>
8001480a:	18 98       	mov	r8,r12
8001480c:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80014810:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014814:	10 9c       	mov	r12,r8
80014816:	2f ed       	sub	sp,-8
80014818:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001481c:	80 01       	ld.sh	r1,r0[0x0]
8001481e:	46 7e       	lddsp	lr,sp[0x19c]

80014820 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80014820:	eb cd 40 80 	pushm	r7,lr
80014824:	1a 97       	mov	r7,sp
80014826:	20 1d       	sub	sp,4
80014828:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
8001482c:	30 18       	mov	r8,1
8001482e:	ee fa ff fc 	ld.w	r10,r7[-4]
80014832:	30 09       	mov	r9,0
80014834:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014838:	e0 8c 00 03 	brvs	8001483e <f_abs+0x1e>
8001483c:	c0 24       	brge	80014840 <f_abs+0x20>
8001483e:	30 08       	mov	r8,0
80014840:	5c 58       	castu.b	r8
80014842:	c0 40       	breq	8001484a <f_abs+0x2a>
	{
		return a;
80014844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014848:	c0 58       	rjmp	80014852 <f_abs+0x32>
	}else{
		return -a;
8001484a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001484e:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80014852:	10 9c       	mov	r12,r8
80014854:	2f fd       	sub	sp,-4
80014856:	e3 cd 80 80 	ldm	sp++,r7,pc

8001485a <f_min>:

static inline float f_min(const float a, const float b){
8001485a:	eb cd 40 80 	pushm	r7,lr
8001485e:	1a 97       	mov	r7,sp
80014860:	20 2d       	sub	sp,8
80014862:	ef 4c ff fc 	st.w	r7[-4],r12
80014866:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
8001486a:	30 18       	mov	r8,1
8001486c:	ee fa ff fc 	ld.w	r10,r7[-4]
80014870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014874:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014878:	e0 8c 00 04 	brvs	80014880 <f_min+0x26>
8001487c:	e0 8a 00 03 	brle	80014882 <f_min+0x28>
80014880:	30 08       	mov	r8,0
80014882:	5c 58       	castu.b	r8
80014884:	c0 40       	breq	8001488c <f_min+0x32>
	{
		return a;
80014886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001488a:	c0 38       	rjmp	80014890 <f_min+0x36>
	}else{
		return b;
8001488c:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80014890:	10 9c       	mov	r12,r8
80014892:	2f ed       	sub	sp,-8
80014894:	e3 cd 80 80 	ldm	sp++,r7,pc

80014898 <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
80014898:	eb cd 40 c0 	pushm	r6-r7,lr
8001489c:	1a 97       	mov	r7,sp
8001489e:	20 1d       	sub	sp,4
800148a0:	48 c6       	lddpc	r6,800148d0 <center_window_2+0x38>
800148a2:	1e 26       	rsub	r6,pc
800148a4:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
800148a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800148ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800148b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800148b4:	fc 18 3f 80 	movh	r8,0x3f80
800148b8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800148bc:	10 9b       	mov	r11,r8
800148be:	fc 1c 3f 80 	movh	r12,0x3f80
800148c2:	f0 16 00 0a 	mcall	r6[40]
800148c6:	18 98       	mov	r8,r12
}
800148c8:	10 9c       	mov	r12,r8
800148ca:	2f fd       	sub	sp,-4
800148cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800148d0:	80 01       	ld.sh	r1,r0[0x0]
800148d2:	47 26       	lddsp	r6,sp[0x1c8]

800148d4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800148d4:	eb cd 40 c0 	pushm	r6-r7,lr
800148d8:	1a 97       	mov	r7,sp
800148da:	20 3d       	sub	sp,12
800148dc:	49 06       	lddpc	r6,8001491c <mav_array_memcpy+0x48>
800148de:	1e 26       	rsub	r6,pc
800148e0:	ef 4c ff fc 	st.w	r7[-4],r12
800148e4:	ef 4b ff f8 	st.w	r7[-8],r11
800148e8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800148ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800148f0:	58 08       	cp.w	r8,0
800148f2:	c0 91       	brne	80014904 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800148f4:	ee fa ff f4 	ld.w	r10,r7[-12]
800148f8:	30 0b       	mov	r11,0
800148fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800148fe:	f0 16 00 31 	mcall	r6[196]
80014902:	c0 98       	rjmp	80014914 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80014904:	ee fa ff f4 	ld.w	r10,r7[-12]
80014908:	ee fb ff f8 	ld.w	r11,r7[-8]
8001490c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014910:	f0 16 00 1b 	mcall	r6[108]
	}
}
80014914:	2f dd       	sub	sp,-12
80014916:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001491a:	00 00       	add	r0,r0
8001491c:	80 01       	ld.sh	r1,r0[0x0]
8001491e:	47 62       	lddsp	r2,sp[0x1d8]

80014920 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80014920:	eb cd 40 c0 	pushm	r6-r7,lr
80014924:	1a 97       	mov	r7,sp
80014926:	20 1d       	sub	sp,4
80014928:	49 46       	lddpc	r6,80014978 <init_nav+0x58>
8001492a:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
8001492c:	f0 16 00 33 	mcall	r6[204]
80014930:	18 99       	mov	r9,r12
80014932:	ec f8 00 00 	ld.w	r8,r6[0]
80014936:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80014938:	ec f8 00 00 	ld.w	r8,r6[0]
8001493c:	70 08       	ld.w	r8,r8[0x0]
8001493e:	30 09       	mov	r9,0
80014940:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
80014944:	ec f8 00 00 	ld.w	r8,r6[0]
80014948:	70 08       	ld.w	r8,r8[0x0]
8001494a:	30 09       	mov	r9,0
8001494c:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80014950:	ec f8 00 00 	ld.w	r8,r6[0]
80014954:	70 08       	ld.w	r8,r8[0x0]
80014956:	30 09       	mov	r9,0
80014958:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
8001495c:	ec f8 00 00 	ld.w	r8,r6[0]
80014960:	70 08       	ld.w	r8,r8[0x0]
80014962:	30 09       	mov	r9,0
80014964:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80014968:	ec f8 07 88 	ld.w	r8,r6[1928]
8001496c:	30 09       	mov	r9,0
8001496e:	91 09       	st.w	r8[0x0],r9
}
80014970:	2f fd       	sub	sp,-4
80014972:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014976:	00 00       	add	r0,r0
80014978:	80 01       	ld.sh	r1,r0[0x0]
8001497a:	47 ae       	lddsp	lr,sp[0x1e8]

8001497c <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
8001497c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014980:	1a 97       	mov	r7,sp
80014982:	20 8d       	sub	sp,32
80014984:	49 26       	lddpc	r6,800149cc <run_navigation+0x50>
80014986:	1e 26       	rsub	r6,pc
80014988:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
8001498c:	ec f8 00 00 	ld.w	r8,r6[0]
80014990:	70 03       	ld.w	r3,r8[0x0]
80014992:	ee c8 00 20 	sub	r8,r7,32
80014996:	10 9b       	mov	r11,r8
80014998:	0a 9c       	mov	r12,r5
8001499a:	f0 16 01 a4 	mcall	r6[1680]
8001499e:	18 98       	mov	r8,r12
800149a0:	e7 48 10 b0 	st.w	r3[4272],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
800149a4:	ec f8 00 00 	ld.w	r8,r6[0]
800149a8:	70 08       	ld.w	r8,r8[0x0]
800149aa:	f0 f9 10 b0 	ld.w	r9,r8[4272]
800149ae:	ee c8 00 20 	sub	r8,r7,32
800149b2:	12 9b       	mov	r11,r9
800149b4:	10 9c       	mov	r12,r8
800149b6:	f0 16 01 54 	mcall	r6[1360]
	
	centralData->controls_nav.theading=waypoint_input.heading;
800149ba:	ec f8 00 00 	ld.w	r8,r6[0]
800149be:	70 08       	ld.w	r8,r8[0x0]
800149c0:	6a 39       	ld.w	r9,r5[0xc]
800149c2:	f1 49 01 90 	st.w	r8[400],r9
}
800149c6:	2f 8d       	sub	sp,-32
800149c8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800149cc:	80 01       	ld.sh	r1,r0[0x0]
800149ce:	48 0a       	lddpc	r10,800149cc <run_navigation+0x50>

800149d0 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
800149d0:	eb cd 40 c0 	pushm	r6-r7,lr
800149d4:	1a 97       	mov	r7,sp
800149d6:	20 3d       	sub	sp,12
800149d8:	49 f6       	lddpc	r6,80014a54 <set_rel_pos_n_dist2wp+0x84>
800149da:	1e 26       	rsub	r6,pc
800149dc:	ef 4c ff f8 	st.w	r7[-8],r12
800149e0:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
800149e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800149e8:	70 09       	ld.w	r9,r8[0x0]
800149ea:	ec f8 00 00 	ld.w	r8,r6[0]
800149ee:	70 08       	ld.w	r8,r8[0x0]
800149f0:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
800149f4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800149f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800149fc:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
800149fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a02:	2f c8       	sub	r8,-4
80014a04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014a08:	2f c9       	sub	r9,-4
80014a0a:	72 0a       	ld.w	r10,r9[0x0]
80014a0c:	ec f9 00 00 	ld.w	r9,r6[0]
80014a10:	72 09       	ld.w	r9,r9[0x0]
80014a12:	f2 f9 0d a0 	ld.w	r9,r9[3488]
80014a16:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014a1a:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80014a1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a20:	2f 88       	sub	r8,-8
80014a22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014a26:	2f 89       	sub	r9,-8
80014a28:	72 0a       	ld.w	r10,r9[0x0]
80014a2a:	ec f9 00 00 	ld.w	r9,r6[0]
80014a2e:	72 09       	ld.w	r9,r9[0x0]
80014a30:	f2 f9 0d a4 	ld.w	r9,r9[3492]
80014a34:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014a38:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014a3a:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a3e:	cd 9e       	rcall	800147f0 <vector_norm_sqr>
80014a40:	18 98       	mov	r8,r12
80014a42:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80014a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014a4a:	10 9c       	mov	r12,r8
80014a4c:	2f dd       	sub	sp,-12
80014a4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014a52:	00 00       	add	r0,r0
80014a54:	80 01       	ld.sh	r1,r0[0x0]
80014a56:	48 5e       	lddpc	lr,80014a68 <set_speed_command+0x10>

80014a58 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80014a58:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014a5c:	1a 97       	mov	r7,sp
80014a5e:	21 7d       	sub	sp,92
80014a60:	fe f6 02 ec 	ld.w	r6,pc[748]
80014a64:	1e 26       	rsub	r6,pc
80014a66:	ef 4c ff a8 	st.w	r7[-88],r12
80014a6a:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80014a6e:	ee fc ff a4 	ld.w	r12,r7[-92]
80014a72:	f0 16 00 02 	mcall	r6[8]
80014a76:	14 98       	mov	r8,r10
80014a78:	16 99       	mov	r9,r11
80014a7a:	10 9a       	mov	r10,r8
80014a7c:	12 9b       	mov	r11,r9
80014a7e:	f0 16 00 6d 	mcall	r6[436]
80014a82:	14 98       	mov	r8,r10
80014a84:	16 99       	mov	r9,r11
80014a86:	10 9a       	mov	r10,r8
80014a88:	12 9b       	mov	r11,r9
80014a8a:	f0 16 00 08 	mcall	r6[32]
80014a8e:	18 98       	mov	r8,r12
80014a90:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
80014a94:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a98:	f0 16 00 02 	mcall	r6[8]
80014a9c:	30 05       	mov	r5,0
80014a9e:	e0 68 a9 fc 	mov	r8,43516
80014aa2:	ea 18 d2 f1 	orh	r8,0xd2f1
80014aa6:	e0 69 62 4d 	mov	r9,25165
80014aaa:	ea 19 3f 40 	orh	r9,0x3f40
80014aae:	f0 16 00 1e 	mcall	r6[120]
80014ab2:	18 98       	mov	r8,r12
80014ab4:	58 08       	cp.w	r8,0
80014ab6:	c0 20       	breq	80014aba <set_speed_command+0x62>
80014ab8:	30 15       	mov	r5,1
80014aba:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014abe:	c1 80       	breq	80014aee <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
80014ac0:	ee fc ff f4 	ld.w	r12,r7[-12]
80014ac4:	f0 16 00 02 	mcall	r6[8]
80014ac8:	e0 68 a9 fc 	mov	r8,43516
80014acc:	ea 18 d2 f1 	orh	r8,0xd2f1
80014ad0:	e0 69 62 4d 	mov	r9,25165
80014ad4:	ea 19 3f 40 	orh	r9,0x3f40
80014ad8:	f0 16 00 05 	mcall	r6[20]
80014adc:	14 98       	mov	r8,r10
80014ade:	16 99       	mov	r9,r11
80014ae0:	10 9a       	mov	r10,r8
80014ae2:	12 9b       	mov	r11,r9
80014ae4:	f0 16 00 08 	mcall	r6[32]
80014ae8:	18 98       	mov	r8,r12
80014aea:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
80014aee:	ee c8 00 20 	sub	r8,r7,32
80014af2:	ee fb ff a8 	ld.w	r11,r7[-88]
80014af6:	10 9c       	mov	r12,r8
80014af8:	fe b0 fc ea 	rcall	800144cc <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
80014afc:	ec f8 00 00 	ld.w	r8,r6[0]
80014b00:	70 0b       	ld.w	r11,r8[0x0]
80014b02:	ee ca 00 30 	sub	r10,r7,48
80014b06:	20 4d       	sub	sp,16
80014b08:	1a 98       	mov	r8,sp
80014b0a:	ee c9 00 20 	sub	r9,r7,32
80014b0e:	20 08       	sub	r8,0
80014b10:	20 09       	sub	r9,0
80014b12:	72 0c       	ld.w	r12,r9[0x0]
80014b14:	91 0c       	st.w	r8[0x0],r12
80014b16:	72 1c       	ld.w	r12,r9[0x4]
80014b18:	91 1c       	st.w	r8[0x4],r12
80014b1a:	72 2c       	ld.w	r12,r9[0x8]
80014b1c:	91 2c       	st.w	r8[0x8],r12
80014b1e:	72 39       	ld.w	r9,r9[0xc]
80014b20:	91 39       	st.w	r8[0xc],r9
80014b22:	20 4d       	sub	sp,16
80014b24:	1a 98       	mov	r8,sp
80014b26:	16 99       	mov	r9,r11
80014b28:	20 08       	sub	r8,0
80014b2a:	20 09       	sub	r9,0
80014b2c:	72 0b       	ld.w	r11,r9[0x0]
80014b2e:	91 0b       	st.w	r8[0x0],r11
80014b30:	72 1b       	ld.w	r11,r9[0x4]
80014b32:	91 1b       	st.w	r8[0x4],r11
80014b34:	72 2b       	ld.w	r11,r9[0x8]
80014b36:	91 2b       	st.w	r8[0x8],r11
80014b38:	72 39       	ld.w	r9,r9[0xc]
80014b3a:	91 39       	st.w	r8[0xc],r9
80014b3c:	14 9c       	mov	r12,r10
80014b3e:	fe b0 fd db 	rcall	800146f4 <quat_global_to_local>
80014b42:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
80014b44:	ee f8 ff d4 	ld.w	r8,r7[-44]
80014b48:	ef 48 ff c4 	st.w	r7[-60],r8
80014b4c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014b50:	ef 48 ff c8 	st.w	r7[-56],r8
80014b54:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014b58:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80014b5c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80014b60:	2f 88       	sub	r8,-8
80014b62:	70 08       	ld.w	r8,r8[0x0]
80014b64:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80014b68:	ee fc ff fc 	ld.w	r12,r7[-4]
80014b6c:	c9 6e       	rcall	80014898 <center_window_2>
80014b6e:	18 98       	mov	r8,r12
80014b70:	10 9c       	mov	r12,r8
80014b72:	f0 16 00 02 	mcall	r6[8]
80014b76:	e0 68 33 33 	mov	r8,13107
80014b7a:	ea 18 33 33 	orh	r8,0x3333
80014b7e:	e0 69 33 33 	mov	r9,13107
80014b82:	ea 19 3f d3 	orh	r9,0x3fd3
80014b86:	f0 16 00 03 	mcall	r6[12]
80014b8a:	14 98       	mov	r8,r10
80014b8c:	16 99       	mov	r9,r11
80014b8e:	10 92       	mov	r2,r8
80014b90:	12 93       	mov	r3,r9
80014b92:	ee fc ff f4 	ld.w	r12,r7[-12]
80014b96:	f0 16 00 02 	mcall	r6[8]
80014b9a:	14 98       	mov	r8,r10
80014b9c:	16 99       	mov	r9,r11
80014b9e:	04 9a       	mov	r10,r2
80014ba0:	06 9b       	mov	r11,r3
80014ba2:	f0 16 00 03 	mcall	r6[12]
80014ba6:	14 98       	mov	r8,r10
80014ba8:	16 99       	mov	r9,r11
80014baa:	10 9a       	mov	r10,r8
80014bac:	12 9b       	mov	r11,r9
80014bae:	f0 16 00 08 	mcall	r6[32]
80014bb2:	18 98       	mov	r8,r12
80014bb4:	10 9b       	mov	r11,r8
80014bb6:	fc 1c 40 40 	movh	r12,0x4040
80014bba:	c5 0e       	rcall	8001485a <f_min>
80014bbc:	18 98       	mov	r8,r12
80014bbe:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
80014bc2:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014bc6:	10 9c       	mov	r12,r8
80014bc8:	c2 ce       	rcall	80014820 <f_abs>
80014bca:	18 99       	mov	r9,r12
80014bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014bd0:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80014bd4:	30 18       	mov	r8,1
80014bd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014bda:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014bde:	e0 8c 00 04 	brvs	80014be6 <set_speed_command+0x18e>
80014be2:	e0 89 00 03 	brgt	80014be8 <set_speed_command+0x190>
80014be6:	30 08       	mov	r8,0
80014be8:	5c 58       	castu.b	r8
80014bea:	c0 e0       	breq	80014c06 <set_speed_command+0x1ae>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
80014bec:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014bf0:	10 9c       	mov	r12,r8
80014bf2:	c1 7e       	rcall	80014820 <f_abs>
80014bf4:	18 98       	mov	r8,r12
80014bf6:	10 9b       	mov	r11,r8
80014bf8:	ee fc ff f4 	ld.w	r12,r7[-12]
80014bfc:	f0 16 00 0a 	mcall	r6[40]
80014c00:	18 98       	mov	r8,r12
80014c02:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
80014c06:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014c0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c0e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c12:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c16:	10 9c       	mov	r12,r8
80014c18:	f0 16 00 0a 	mcall	r6[40]
80014c1c:	18 98       	mov	r8,r12
80014c1e:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
80014c22:	ee f9 ff c8 	ld.w	r9,r7[-56]
80014c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c2e:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c32:	10 9c       	mov	r12,r8
80014c34:	f0 16 00 0a 	mcall	r6[40]
80014c38:	18 98       	mov	r8,r12
80014c3a:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80014c3e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80014c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c46:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c4a:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c4e:	10 9c       	mov	r12,r8
80014c50:	f0 16 00 0a 	mcall	r6[40]
80014c54:	18 98       	mov	r8,r12
80014c56:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014c5a:	30 08       	mov	r8,0
80014c5c:	ef 68 ff f3 	st.b	r7[-13],r8
80014c60:	c1 58       	rjmp	80014c8a <set_speed_command+0x232>
	{
		new_velocity[i] = dir_desired_bf[i];
80014c62:	ef 3a ff f3 	ld.ub	r10,r7[-13]
80014c66:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014c6a:	a3 68       	lsl	r8,0x2
80014c6c:	ee 08 00 08 	add	r8,r7,r8
80014c70:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80014c74:	f4 08 15 02 	lsl	r8,r10,0x2
80014c78:	ee 08 00 08 	add	r8,r7,r8
80014c7c:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014c80:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014c84:	2f f8       	sub	r8,-1
80014c86:	ef 68 ff f3 	st.b	r7[-13],r8
80014c8a:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80014c8e:	30 28       	mov	r8,2
80014c90:	f0 09 18 00 	cp.b	r9,r8
80014c94:	fe 98 ff e7 	brls	80014c62 <set_speed_command+0x20a>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80014c98:	ec f8 00 00 	ld.w	r8,r6[0]
80014c9c:	70 08       	ld.w	r8,r8[0x0]
80014c9e:	f1 38 10 bb 	ld.ub	r8,r8[4283]
80014ca2:	58 08       	cp.w	r8,0
80014ca4:	c0 90       	breq	80014cb6 <set_speed_command+0x25e>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80014ca6:	ee c9 00 54 	sub	r9,r7,84
80014caa:	ee c8 00 3c 	sub	r8,r7,60
80014cae:	12 9b       	mov	r11,r9
80014cb0:	10 9c       	mov	r12,r8
80014cb2:	f0 16 01 9d 	mcall	r6[1652]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
80014cb6:	ee f8 ff ac 	ld.w	r8,r7[-84]
80014cba:	10 9c       	mov	r12,r8
80014cbc:	f0 16 00 02 	mcall	r6[8]
80014cc0:	14 92       	mov	r2,r10
80014cc2:	16 93       	mov	r3,r11
80014cc4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80014cc8:	10 9c       	mov	r12,r8
80014cca:	f0 16 00 02 	mcall	r6[8]
80014cce:	04 98       	mov	r8,r2
80014cd0:	06 99       	mov	r9,r3
80014cd2:	f0 16 00 54 	mcall	r6[336]
80014cd6:	14 98       	mov	r8,r10
80014cd8:	16 99       	mov	r9,r11
80014cda:	10 9a       	mov	r10,r8
80014cdc:	12 9b       	mov	r11,r9
80014cde:	f0 16 00 08 	mcall	r6[32]
80014ce2:	18 98       	mov	r8,r12
80014ce4:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
80014ce8:	ec f8 00 00 	ld.w	r8,r6[0]
80014cec:	70 08       	ld.w	r8,r8[0x0]
80014cee:	ee f9 ff ac 	ld.w	r9,r7[-84]
80014cf2:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
80014cf6:	ec f8 00 00 	ld.w	r8,r6[0]
80014cfa:	70 08       	ld.w	r8,r8[0x0]
80014cfc:	ee f9 ff b0 	ld.w	r9,r7[-80]
80014d00:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
80014d04:	ec f8 00 00 	ld.w	r8,r6[0]
80014d08:	70 08       	ld.w	r8,r8[0x0]
80014d0a:	ee f9 ff b4 	ld.w	r9,r7[-76]
80014d0e:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014d12:	ec f8 00 00 	ld.w	r8,r6[0]
80014d16:	70 05       	ld.w	r5,r8[0x0]
80014d18:	ee fc ff fc 	ld.w	r12,r7[-4]
80014d1c:	f0 16 00 02 	mcall	r6[8]
80014d20:	e0 68 99 9a 	mov	r8,39322
80014d24:	ea 18 99 99 	orh	r8,0x9999
80014d28:	e0 69 99 99 	mov	r9,39321
80014d2c:	ea 19 3f c9 	orh	r9,0x3fc9
80014d30:	f0 16 00 03 	mcall	r6[12]
80014d34:	14 98       	mov	r8,r10
80014d36:	16 99       	mov	r9,r11
80014d38:	10 9a       	mov	r10,r8
80014d3a:	12 9b       	mov	r11,r9
80014d3c:	f0 16 00 08 	mcall	r6[32]
80014d40:	18 98       	mov	r8,r12
80014d42:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
80014d46:	2e 9d       	sub	sp,-92
80014d48:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014d4c:	80 01       	ld.sh	r1,r0[0x0]
80014d4e:	48 e8       	lddpc	r8,80014d84 <low_speed_nav+0x34>

80014d50 <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80014d50:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014d54:	1a 97       	mov	r7,sp
80014d56:	20 4d       	sub	sp,16
80014d58:	4f 06       	lddpc	r6,80014f18 <low_speed_nav+0x1c8>
80014d5a:	1e 26       	rsub	r6,pc
80014d5c:	ef 4c ff f4 	st.w	r7[-12],r12
80014d60:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80014d64:	e0 68 d9 7c 	mov	r8,55676
80014d68:	ea 18 3e a0 	orh	r8,0x3ea0
80014d6c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014d74:	70 08       	ld.w	r8,r8[0x0]
80014d76:	10 9c       	mov	r12,r8
80014d78:	fe b0 fd 54 	rcall	80014820 <f_abs>
80014d7c:	18 98       	mov	r8,r12
80014d7e:	10 9c       	mov	r12,r8
80014d80:	f0 16 00 02 	mcall	r6[8]
80014d84:	30 05       	mov	r5,0
80014d86:	e0 68 a9 fc 	mov	r8,43516
80014d8a:	ea 18 d2 f1 	orh	r8,0xd2f1
80014d8e:	e0 69 62 4d 	mov	r9,25165
80014d92:	ea 19 3f 50 	orh	r9,0x3f50
80014d96:	f0 16 00 1e 	mcall	r6[120]
80014d9a:	18 98       	mov	r8,r12
80014d9c:	58 08       	cp.w	r8,0
80014d9e:	c0 20       	breq	80014da2 <low_speed_nav+0x52>
80014da0:	30 15       	mov	r5,1
80014da2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014da6:	c1 e0       	breq	80014de2 <low_speed_nav+0x92>
80014da8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014dac:	2f c8       	sub	r8,-4
80014dae:	70 08       	ld.w	r8,r8[0x0]
80014db0:	10 9c       	mov	r12,r8
80014db2:	fe b0 fd 37 	rcall	80014820 <f_abs>
80014db6:	18 98       	mov	r8,r12
80014db8:	10 9c       	mov	r12,r8
80014dba:	f0 16 00 02 	mcall	r6[8]
80014dbe:	30 05       	mov	r5,0
80014dc0:	e0 68 a9 fc 	mov	r8,43516
80014dc4:	ea 18 d2 f1 	orh	r8,0xd2f1
80014dc8:	e0 69 62 4d 	mov	r9,25165
80014dcc:	ea 19 3f 50 	orh	r9,0x3f50
80014dd0:	f0 16 00 1e 	mcall	r6[120]
80014dd4:	18 98       	mov	r8,r12
80014dd6:	58 08       	cp.w	r8,0
80014dd8:	c0 20       	breq	80014ddc <low_speed_nav+0x8c>
80014dda:	30 15       	mov	r5,1
80014ddc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014de0:	c1 61       	brne	80014e0c <low_speed_nav+0xbc>
80014de2:	ec f8 00 00 	ld.w	r8,r6[0]
80014de6:	70 08       	ld.w	r8,r8[0x0]
80014de8:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80014dec:	58 08       	cp.w	r8,0
80014dee:	c0 f1       	brne	80014e0c <low_speed_nav+0xbc>
80014df0:	30 18       	mov	r8,1
80014df2:	ee fa ff f0 	ld.w	r10,r7[-16]
80014df6:	fc 19 40 a0 	movh	r9,0x40a0
80014dfa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014dfe:	e0 8c 00 04 	brvs	80014e06 <low_speed_nav+0xb6>
80014e02:	e0 8a 00 03 	brle	80014e08 <low_speed_nav+0xb8>
80014e06:	30 08       	mov	r8,0
80014e08:	5c 58       	castu.b	r8
80014e0a:	c1 90       	breq	80014e3c <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014e0c:	ec f8 00 00 	ld.w	r8,r6[0]
80014e10:	70 08       	ld.w	r8,r8[0x0]
80014e12:	30 09       	mov	r9,0
80014e14:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014e18:	ec f8 00 00 	ld.w	r8,r6[0]
80014e1c:	70 08       	ld.w	r8,r8[0x0]
80014e1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e22:	72 09       	ld.w	r9,r9[0x0]
80014e24:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014e28:	ec f8 00 00 	ld.w	r8,r6[0]
80014e2c:	70 08       	ld.w	r8,r8[0x0]
80014e2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e32:	2f c9       	sub	r9,-4
80014e34:	72 09       	ld.w	r9,r9[0x0]
80014e36:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014e3a:	c6 28       	rjmp	80014efe <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80014e3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e40:	70 08       	ld.w	r8,r8[0x0]
80014e42:	10 9c       	mov	r12,r8
80014e44:	f0 16 00 02 	mcall	r6[8]
80014e48:	14 92       	mov	r2,r10
80014e4a:	16 93       	mov	r3,r11
80014e4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e50:	2f c8       	sub	r8,-4
80014e52:	70 08       	ld.w	r8,r8[0x0]
80014e54:	10 9c       	mov	r12,r8
80014e56:	f0 16 00 02 	mcall	r6[8]
80014e5a:	04 98       	mov	r8,r2
80014e5c:	06 99       	mov	r9,r3
80014e5e:	f0 16 00 54 	mcall	r6[336]
80014e62:	14 98       	mov	r8,r10
80014e64:	16 99       	mov	r9,r11
80014e66:	10 9a       	mov	r10,r8
80014e68:	12 9b       	mov	r11,r9
80014e6a:	f0 16 00 08 	mcall	r6[32]
80014e6e:	18 98       	mov	r8,r12
80014e70:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80014e74:	30 18       	mov	r8,1
80014e76:	ee fa ff fc 	ld.w	r10,r7[-4]
80014e7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014e7e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014e82:	e0 8c 00 03 	brvs	80014e88 <low_speed_nav+0x138>
80014e86:	c0 24       	brge	80014e8a <low_speed_nav+0x13a>
80014e88:	30 08       	mov	r8,0
80014e8a:	5c 58       	castu.b	r8
80014e8c:	c0 e0       	breq	80014ea8 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80014e8e:	ec f8 00 00 	ld.w	r8,r6[0]
80014e92:	70 08       	ld.w	r8,r8[0x0]
80014e94:	30 09       	mov	r9,0
80014e96:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80014e9a:	ec f8 00 00 	ld.w	r8,r6[0]
80014e9e:	70 08       	ld.w	r8,r8[0x0]
80014ea0:	30 09       	mov	r9,0
80014ea2:	f1 49 01 88 	st.w	r8[392],r9
80014ea6:	c1 28       	rjmp	80014eca <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014ea8:	ec f8 00 00 	ld.w	r8,r6[0]
80014eac:	70 08       	ld.w	r8,r8[0x0]
80014eae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014eb2:	72 09       	ld.w	r9,r9[0x0]
80014eb4:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014eb8:	ec f8 00 00 	ld.w	r8,r6[0]
80014ebc:	70 08       	ld.w	r8,r8[0x0]
80014ebe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014ec2:	2f c9       	sub	r9,-4
80014ec4:	72 09       	ld.w	r9,r9[0x0]
80014ec6:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014eca:	ec f8 00 00 	ld.w	r8,r6[0]
80014ece:	70 05       	ld.w	r5,r8[0x0]
80014ed0:	ee fc ff fc 	ld.w	r12,r7[-4]
80014ed4:	f0 16 00 02 	mcall	r6[8]
80014ed8:	e0 68 99 9a 	mov	r8,39322
80014edc:	ea 18 99 99 	orh	r8,0x9999
80014ee0:	e0 69 99 99 	mov	r9,39321
80014ee4:	ea 19 3f c9 	orh	r9,0x3fc9
80014ee8:	f0 16 00 03 	mcall	r6[12]
80014eec:	14 98       	mov	r8,r10
80014eee:	16 99       	mov	r9,r11
80014ef0:	10 9a       	mov	r10,r8
80014ef2:	12 9b       	mov	r11,r9
80014ef4:	f0 16 00 08 	mcall	r6[32]
80014ef8:	18 98       	mov	r8,r12
80014efa:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014efe:	ec f8 00 00 	ld.w	r8,r6[0]
80014f02:	70 08       	ld.w	r8,r8[0x0]
80014f04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014f08:	2f 89       	sub	r9,-8
80014f0a:	72 09       	ld.w	r9,r9[0x0]
80014f0c:	f1 49 01 8c 	st.w	r8[396],r9
}
80014f10:	2f cd       	sub	sp,-16
80014f12:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014f16:	00 00       	add	r0,r0
80014f18:	80 01       	ld.sh	r1,r0[0x0]
80014f1a:	4b de       	lddpc	lr,8001500c <stabilise+0x48>

80014f1c <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80014f1c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014f20:	1a 97       	mov	r7,sp
80014f22:	20 1d       	sub	sp,4
80014f24:	4a 76       	lddpc	r6,80014fc0 <high_speed_nav+0xa4>
80014f26:	1e 26       	rsub	r6,pc
80014f28:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014f2c:	ec f8 00 00 	ld.w	r8,r6[0]
80014f30:	70 08       	ld.w	r8,r8[0x0]
80014f32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f36:	72 09       	ld.w	r9,r9[0x0]
80014f38:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014f3c:	ec f8 00 00 	ld.w	r8,r6[0]
80014f40:	70 08       	ld.w	r8,r8[0x0]
80014f42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f46:	2f c9       	sub	r9,-4
80014f48:	72 09       	ld.w	r9,r9[0x0]
80014f4a:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014f4e:	ec f8 00 00 	ld.w	r8,r6[0]
80014f52:	70 08       	ld.w	r8,r8[0x0]
80014f54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f58:	2f 89       	sub	r9,-8
80014f5a:	72 09       	ld.w	r9,r9[0x0]
80014f5c:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80014f60:	ec f8 00 00 	ld.w	r8,r6[0]
80014f64:	70 05       	ld.w	r5,r8[0x0]
80014f66:	ec f8 00 00 	ld.w	r8,r6[0]
80014f6a:	70 08       	ld.w	r8,r8[0x0]
80014f6c:	f0 f8 0d 68 	ld.w	r8,r8[3432]
80014f70:	10 9c       	mov	r12,r8
80014f72:	f0 16 00 02 	mcall	r6[8]
80014f76:	14 92       	mov	r2,r10
80014f78:	16 93       	mov	r3,r11
80014f7a:	ec f8 00 00 	ld.w	r8,r6[0]
80014f7e:	70 08       	ld.w	r8,r8[0x0]
80014f80:	f0 f8 0d 6c 	ld.w	r8,r8[3436]
80014f84:	10 9c       	mov	r12,r8
80014f86:	f0 16 00 02 	mcall	r6[8]
80014f8a:	04 98       	mov	r8,r2
80014f8c:	06 99       	mov	r9,r3
80014f8e:	f0 16 00 54 	mcall	r6[336]
80014f92:	e0 68 99 9a 	mov	r8,39322
80014f96:	ea 18 99 99 	orh	r8,0x9999
80014f9a:	e0 69 99 99 	mov	r9,39321
80014f9e:	ea 19 3f c9 	orh	r9,0x3fc9
80014fa2:	f0 16 00 03 	mcall	r6[12]
80014fa6:	14 98       	mov	r8,r10
80014fa8:	16 99       	mov	r9,r11
80014faa:	10 9a       	mov	r10,r8
80014fac:	12 9b       	mov	r11,r9
80014fae:	f0 16 00 08 	mcall	r6[32]
80014fb2:	18 98       	mov	r8,r12
80014fb4:	eb 48 01 7c 	st.w	r5[380],r8
80014fb8:	2f fd       	sub	sp,-4
80014fba:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014fbe:	00 00       	add	r0,r0
80014fc0:	80 01       	ld.sh	r1,r0[0x0]
80014fc2:	4d aa       	lddpc	r10,80015128 <processData+0xc0>

80014fc4 <stabilise>:
#include "stabilisation.h"
#include "stabilisation_copter.h"
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
80014fc4:	eb cd 40 e0 	pushm	r5-r7,lr
80014fc8:	1a 97       	mov	r7,sp
80014fca:	20 4d       	sub	sp,16
80014fcc:	4a 66       	lddpc	r6,80015064 <stabilise+0xa0>
80014fce:	1e 26       	rsub	r6,pc
80014fd0:	ef 4c ff f8 	st.w	r7[-8],r12
80014fd4:	ef 4b ff f4 	st.w	r7[-12],r11
80014fd8:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i=0; i<3; i++) 
80014fdc:	30 08       	mov	r8,0
80014fde:	ef 48 ff fc 	st.w	r7[-4],r8
80014fe2:	c2 68       	rjmp	8001502e <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
80014fe4:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014fe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014fec:	a3 68       	lsl	r8,0x2
80014fee:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014ff2:	f2 08 00 08 	add	r8,r9,r8
80014ff6:	70 0b       	ld.w	r11,r8[0x0]
80014ff8:	ee fa ff f8 	ld.w	r10,r7[-8]
80014ffc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015000:	12 98       	mov	r8,r9
80015002:	a5 68       	lsl	r8,0x4
80015004:	12 08       	add	r8,r9
80015006:	a3 68       	lsl	r8,0x2
80015008:	f4 08 00 08 	add	r8,r10,r8
8001500c:	ee fa ff f4 	ld.w	r10,r7[-12]
80015010:	10 9c       	mov	r12,r8
80015012:	f0 16 01 23 	mcall	r6[1164]
80015016:	18 9a       	mov	r10,r12
80015018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001501c:	ea c9 ff bc 	sub	r9,r5,-68
80015020:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i=0; i<3; i++) 
80015024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015028:	2f f8       	sub	r8,-1
8001502a:	ef 48 ff fc 	st.w	r7[-4],r8
8001502e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015032:	58 28       	cp.w	r8,2
80015034:	fe 9a ff d8 	brle	80014fe4 <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80015038:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001503c:	2f 48       	sub	r8,-12
8001503e:	70 09       	ld.w	r9,r8[0x0]
80015040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015044:	f0 c8 ff 34 	sub	r8,r8,-204
80015048:	ee fa ff f4 	ld.w	r10,r7[-12]
8001504c:	12 9b       	mov	r11,r9
8001504e:	10 9c       	mov	r12,r8
80015050:	f0 16 01 23 	mcall	r6[1164]
80015054:	18 99       	mov	r9,r12
80015056:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001505a:	f1 49 01 1c 	st.w	r8[284],r9
8001505e:	2f cd       	sub	sp,-16
80015060:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015064:	80 01       	ld.sh	r1,r0[0x0]
80015066:	4e 52       	lddpc	r2,800151f8 <processData+0x190>

80015068 <processData>:
80015068:	eb cd 40 c0 	pushm	r6-r7,lr
8001506c:	1a 97       	mov	r7,sp
8001506e:	20 2d       	sub	sp,8
80015070:	4f 96       	lddpc	r6,80015254 <processData+0x1ec>
80015072:	1e 26       	rsub	r6,pc
80015074:	ec f8 01 20 	ld.w	r8,r6[288]
80015078:	70 09       	ld.w	r9,r8[0x0]
8001507a:	ec f8 03 70 	ld.w	r8,r6[880]
8001507e:	70 08       	ld.w	r8,r8[0x0]
80015080:	10 39       	cp.w	r9,r8
80015082:	c2 15       	brlt	800150c4 <processData+0x5c>
80015084:	ec f8 03 44 	ld.w	r8,r6[836]
80015088:	11 88       	ld.ub	r8,r8[0x0]
8001508a:	58 08       	cp.w	r8,0
8001508c:	c0 e0       	breq	800150a8 <processData+0x40>
8001508e:	ec f8 01 20 	ld.w	r8,r6[288]
80015092:	30 09       	mov	r9,0
80015094:	91 09       	st.w	r8[0x0],r9
80015096:	ec f8 01 98 	ld.w	r8,r6[408]
8001509a:	30 09       	mov	r9,0
8001509c:	91 09       	st.w	r8[0x0],r9
8001509e:	ec f8 01 3c 	ld.w	r8,r6[316]
800150a2:	30 09       	mov	r9,0
800150a4:	91 09       	st.w	r8[0x0],r9
800150a6:	cd 38       	rjmp	8001524c <processData+0x1e4>
800150a8:	ec f8 01 1c 	ld.w	r8,r6[284]
800150ac:	70 08       	ld.w	r8,r8[0x0]
800150ae:	30 1b       	mov	r11,1
800150b0:	10 9c       	mov	r12,r8
800150b2:	f0 16 01 1f 	mcall	r6[1148]
800150b6:	ec f8 01 1c 	ld.w	r8,r6[284]
800150ba:	70 08       	ld.w	r8,r8[0x0]
800150bc:	10 9c       	mov	r12,r8
800150be:	f0 16 00 fc 	mcall	r6[1008]
800150c2:	cc 58       	rjmp	8001524c <processData+0x1e4>
800150c4:	ec f8 01 1c 	ld.w	r8,r6[284]
800150c8:	70 08       	ld.w	r8,r8[0x0]
800150ca:	70 28       	ld.w	r8,r8[0x8]
800150cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800150d0:	e0 80 00 bd 	breq	8001524a <processData+0x1e2>
800150d4:	ec f8 01 20 	ld.w	r8,r6[288]
800150d8:	70 08       	ld.w	r8,r8[0x0]
800150da:	58 08       	cp.w	r8,0
800150dc:	c4 85       	brlt	8001516c <processData+0x104>
800150de:	30 08       	mov	r8,0
800150e0:	ef 48 ff f8 	st.w	r7[-8],r8
800150e4:	c3 88       	rjmp	80015154 <processData+0xec>
800150e6:	ec f8 01 1c 	ld.w	r8,r6[284]
800150ea:	70 08       	ld.w	r8,r8[0x0]
800150ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800150f0:	2d f9       	sub	r9,-33
800150f2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800150f6:	ef 58 ff fe 	st.h	r7[-2],r8
800150fa:	ec f8 01 98 	ld.w	r8,r6[408]
800150fe:	70 08       	ld.w	r8,r8[0x0]
80015100:	58 08       	cp.w	r8,0
80015102:	e0 89 00 0c 	brgt	8001511a <processData+0xb2>
80015106:	ec f8 01 3c 	ld.w	r8,r6[316]
8001510a:	70 09       	ld.w	r9,r8[0x0]
8001510c:	ef 0a ff fe 	ld.sh	r10,r7[-2]
80015110:	ec f8 02 34 	ld.w	r8,r6[564]
80015114:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015118:	c1 18       	rjmp	8001513a <processData+0xd2>
8001511a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001511e:	70 08       	ld.w	r8,r8[0x0]
80015120:	10 99       	mov	r9,r8
80015122:	10 9a       	mov	r10,r8
80015124:	ec f8 02 34 	ld.w	r8,r6[564]
80015128:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001512c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80015130:	10 0a       	add	r10,r8
80015132:	ec f8 02 34 	ld.w	r8,r6[564]
80015136:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8001513a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001513e:	70 08       	ld.w	r8,r8[0x0]
80015140:	f0 c9 ff ff 	sub	r9,r8,-1
80015144:	ec f8 01 3c 	ld.w	r8,r6[316]
80015148:	91 09       	st.w	r8[0x0],r9
8001514a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001514e:	2f f8       	sub	r8,-1
80015150:	ef 48 ff f8 	st.w	r7[-8],r8
80015154:	ec f8 01 24 	ld.w	r8,r6[292]
80015158:	11 88       	ld.ub	r8,r8[0x0]
8001515a:	5c 58       	castu.b	r8
8001515c:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015164:	10 39       	cp.w	r9,r8
80015166:	fe 99 ff c0 	brgt	800150e6 <processData+0x7e>
8001516a:	c0 a8       	rjmp	8001517e <processData+0x116>
8001516c:	ec f8 01 20 	ld.w	r8,r6[288]
80015170:	70 08       	ld.w	r8,r8[0x0]
80015172:	f0 c9 ff ff 	sub	r9,r8,-1
80015176:	ec f8 01 20 	ld.w	r8,r6[288]
8001517a:	91 09       	st.w	r8[0x0],r9
8001517c:	c6 88       	rjmp	8001524c <processData+0x1e4>
8001517e:	ec f8 02 18 	ld.w	r8,r6[536]
80015182:	11 88       	ld.ub	r8,r8[0x0]
80015184:	5c 58       	castu.b	r8
80015186:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001518a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001518e:	70 08       	ld.w	r8,r8[0x0]
80015190:	10 39       	cp.w	r9,r8
80015192:	e0 89 00 0e 	brgt	800151ae <processData+0x146>
80015196:	ec f8 01 98 	ld.w	r8,r6[408]
8001519a:	70 08       	ld.w	r8,r8[0x0]
8001519c:	f0 c9 ff ff 	sub	r9,r8,-1
800151a0:	ec f8 01 98 	ld.w	r8,r6[408]
800151a4:	91 09       	st.w	r8[0x0],r9
800151a6:	ec f8 01 3c 	ld.w	r8,r6[316]
800151aa:	30 09       	mov	r9,0
800151ac:	91 09       	st.w	r8[0x0],r9
800151ae:	ec f8 01 98 	ld.w	r8,r6[408]
800151b2:	70 09       	ld.w	r9,r8[0x0]
800151b4:	ec f8 03 6c 	ld.w	r8,r6[876]
800151b8:	70 08       	ld.w	r8,r8[0x0]
800151ba:	10 39       	cp.w	r9,r8
800151bc:	c4 85       	brlt	8001524c <processData+0x1e4>
800151be:	ec f8 01 98 	ld.w	r8,r6[408]
800151c2:	30 09       	mov	r9,0
800151c4:	91 09       	st.w	r8[0x0],r9
800151c6:	ec f8 01 3c 	ld.w	r8,r6[316]
800151ca:	30 09       	mov	r9,0
800151cc:	91 09       	st.w	r8[0x0],r9
800151ce:	30 08       	mov	r8,0
800151d0:	ef 48 ff f8 	st.w	r7[-8],r8
800151d4:	c2 78       	rjmp	80015222 <processData+0x1ba>
800151d6:	ec f8 02 7c 	ld.w	r8,r6[636]
800151da:	70 09       	ld.w	r9,r8[0x0]
800151dc:	ec f8 02 18 	ld.w	r8,r6[536]
800151e0:	11 88       	ld.ub	r8,r8[0x0]
800151e2:	5c 58       	castu.b	r8
800151e4:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800151e8:	ec f8 01 20 	ld.w	r8,r6[288]
800151ec:	70 08       	ld.w	r8,r8[0x0]
800151ee:	b1 3a       	mul	r10,r8
800151f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800151f4:	f4 08 00 08 	add	r8,r10,r8
800151f8:	a1 78       	lsl	r8,0x1
800151fa:	f2 08 00 0a 	add	r10,r9,r8
800151fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015202:	ec f8 02 34 	ld.w	r8,r6[564]
80015206:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001520a:	ec f9 04 e0 	ld.w	r9,r6[1248]
8001520e:	72 09       	ld.w	r9,r9[0x0]
80015210:	f0 09 0c 08 	divs	r8,r8,r9
80015214:	5c 88       	casts.h	r8
80015216:	b4 08       	st.h	r10[0x0],r8
80015218:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001521c:	2f f8       	sub	r8,-1
8001521e:	ef 48 ff f8 	st.w	r7[-8],r8
80015222:	ec f8 02 18 	ld.w	r8,r6[536]
80015226:	11 88       	ld.ub	r8,r8[0x0]
80015228:	5c 58       	castu.b	r8
8001522a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001522e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015232:	10 39       	cp.w	r9,r8
80015234:	fe 99 ff d1 	brgt	800151d6 <processData+0x16e>
80015238:	ec f8 01 20 	ld.w	r8,r6[288]
8001523c:	70 08       	ld.w	r8,r8[0x0]
8001523e:	f0 c9 ff ff 	sub	r9,r8,-1
80015242:	ec f8 01 20 	ld.w	r8,r6[288]
80015246:	91 09       	st.w	r8[0x0],r9
80015248:	c0 28       	rjmp	8001524c <processData+0x1e4>
8001524a:	d7 03       	nop
8001524c:	2f ed       	sub	sp,-8
8001524e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80015252:	d6 03       	rete
80015254:	80 01       	ld.sh	r1,r0[0x0]
80015256:	4e f6       	lddpc	r6,80015410 <adc_sequencer_add+0x9c>

80015258 <Init_ADCI>:
80015258:	eb cd 40 c0 	pushm	r6-r7,lr
8001525c:	1a 97       	mov	r7,sp
8001525e:	20 4d       	sub	sp,16
80015260:	4b 96       	lddpc	r6,80015344 <Init_ADCI+0xec>
80015262:	1e 26       	rsub	r6,pc
80015264:	ef 4c ff fc 	st.w	r7[-4],r12
80015268:	16 98       	mov	r8,r11
8001526a:	ef 4a ff f4 	st.w	r7[-12],r10
8001526e:	ef 49 ff f0 	st.w	r7[-16],r9
80015272:	ef 68 ff f8 	st.b	r7[-8],r8
80015276:	31 3b       	mov	r11,19
80015278:	ec fc 08 f0 	ld.w	r12,r6[2288]
8001527c:	f0 16 00 94 	mcall	r6[592]
80015280:	ec f8 01 0c 	ld.w	r8,r6[268]
80015284:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015288:	91 09       	st.w	r8[0x0],r9
8001528a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001528e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80015292:	b2 c8       	st.b	r9[0x4],r8
80015294:	ec f8 01 1c 	ld.w	r8,r6[284]
80015298:	70 08       	ld.w	r8,r8[0x0]
8001529a:	ec fb 01 0c 	ld.w	r11,r6[268]
8001529e:	10 9c       	mov	r12,r8
800152a0:	f0 16 02 05 	mcall	r6[2068]
800152a4:	ec f8 01 0c 	ld.w	r8,r6[268]
800152a8:	90 68       	ld.sh	r8,r8[0xc]
800152aa:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800152ae:	3f f8       	mov	r8,-1
800152b0:	f0 09 19 00 	cp.h	r9,r8
800152b4:	c1 51       	brne	800152de <Init_ADCI+0x86>
800152b6:	ec f9 01 0c 	ld.w	r9,r6[268]
800152ba:	33 b8       	mov	r8,59
800152bc:	b2 68       	st.h	r9[0xc],r8
800152be:	ec f9 01 0c 	ld.w	r9,r6[268]
800152c2:	e0 68 42 10 	mov	r8,16912
800152c6:	b2 58       	st.h	r9[0xa],r8
800152c8:	ec f9 01 0c 	ld.w	r9,r6[268]
800152cc:	e0 68 02 10 	mov	r8,528
800152d0:	b2 78       	st.h	r9[0xe],r8
800152d2:	ec f9 01 0c 	ld.w	r9,r6[268]
800152d6:	e0 68 02 10 	mov	r8,528
800152da:	f3 58 00 10 	st.h	r9[16],r8
800152de:	ec f9 01 0c 	ld.w	r9,r6[268]
800152e2:	33 b8       	mov	r8,59
800152e4:	b2 68       	st.h	r9[0xc],r8
800152e6:	ec f8 01 1c 	ld.w	r8,r6[284]
800152ea:	70 08       	ld.w	r8,r8[0x0]
800152ec:	e0 6a 24 00 	mov	r10,9216
800152f0:	ea 1a 00 f4 	orh	r10,0xf4
800152f4:	ec fb 01 0c 	ld.w	r11,r6[268]
800152f8:	10 9c       	mov	r12,r8
800152fa:	f0 16 02 20 	mcall	r6[2176]
800152fe:	f0 16 01 fd 	mcall	r6[2036]
80015302:	ec f9 03 44 	ld.w	r9,r6[836]
80015306:	30 08       	mov	r8,0
80015308:	b2 88       	st.b	r9[0x0],r8
8001530a:	ec f8 01 1c 	ld.w	r8,r6[284]
8001530e:	70 08       	ld.w	r8,r8[0x0]
80015310:	3f fb       	mov	r11,-1
80015312:	10 9c       	mov	r12,r8
80015314:	f0 16 01 1f 	mcall	r6[1148]
80015318:	fe c8 02 b0 	sub	r8,pc,688
8001531c:	30 1a       	mov	r10,1
8001531e:	e0 6b 04 80 	mov	r11,1152
80015322:	10 9c       	mov	r12,r8
80015324:	f0 16 00 3b 	mcall	r6[236]
80015328:	ec f8 03 6c 	ld.w	r8,r6[876]
8001532c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015330:	91 09       	st.w	r8[0x0],r9
80015332:	ec f8 04 e0 	ld.w	r8,r6[1248]
80015336:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001533a:	91 09       	st.w	r8[0x0],r9
8001533c:	2f cd       	sub	sp,-16
8001533e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015342:	00 00       	add	r0,r0
80015344:	80 01       	ld.sh	r1,r0[0x0]
80015346:	50 e6       	stdsp	sp[0x38],r6

80015348 <clear_adc_sequencer>:
80015348:	eb cd 40 c0 	pushm	r6-r7,lr
8001534c:	1a 97       	mov	r7,sp
8001534e:	48 96       	lddpc	r6,80015370 <clear_adc_sequencer+0x28>
80015350:	1e 26       	rsub	r6,pc
80015352:	ec f9 01 24 	ld.w	r9,r6[292]
80015356:	30 08       	mov	r8,0
80015358:	b2 88       	st.b	r9[0x0],r8
8001535a:	ec f8 01 24 	ld.w	r8,r6[292]
8001535e:	11 88       	ld.ub	r8,r8[0x0]
80015360:	5c 58       	castu.b	r8
80015362:	5c 58       	castu.b	r8
80015364:	ec f9 02 c0 	ld.w	r9,r6[704]
80015368:	b2 88       	st.b	r9[0x0],r8
8001536a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001536e:	00 00       	add	r0,r0
80015370:	80 01       	ld.sh	r1,r0[0x0]
80015372:	51 d4       	stdsp	sp[0x74],r4

80015374 <adc_sequencer_add>:
80015374:	eb cd 40 c0 	pushm	r6-r7,lr
80015378:	1a 97       	mov	r7,sp
8001537a:	20 3d       	sub	sp,12
8001537c:	4b 36       	lddpc	r6,80015448 <adc_sequencer_add+0xd4>
8001537e:	1e 26       	rsub	r6,pc
80015380:	16 99       	mov	r9,r11
80015382:	14 98       	mov	r8,r10
80015384:	18 9a       	mov	r10,r12
80015386:	ef 6a ff fc 	st.b	r7[-4],r10
8001538a:	ef 69 ff f8 	st.b	r7[-8],r9
8001538e:	ef 68 ff f4 	st.b	r7[-12],r8
80015392:	ec f8 01 24 	ld.w	r8,r6[292]
80015396:	11 88       	ld.ub	r8,r8[0x0]
80015398:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001539c:	30 68       	mov	r8,6
8001539e:	f0 09 18 00 	cp.b	r9,r8
800153a2:	e0 89 00 4c 	brgt	8001543a <adc_sequencer_add+0xc6>
800153a6:	ec f8 01 24 	ld.w	r8,r6[292]
800153aa:	11 88       	ld.ub	r8,r8[0x0]
800153ac:	5c 58       	castu.b	r8
800153ae:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800153b2:	ec fa 02 44 	ld.w	r10,r6[580]
800153b6:	12 98       	mov	r8,r9
800153b8:	a1 78       	lsl	r8,0x1
800153ba:	12 08       	add	r8,r9
800153bc:	f4 08 00 09 	add	r9,r10,r8
800153c0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800153c4:	b2 88       	st.b	r9[0x0],r8
800153c6:	ec f8 01 24 	ld.w	r8,r6[292]
800153ca:	11 88       	ld.ub	r8,r8[0x0]
800153cc:	5c 58       	castu.b	r8
800153ce:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800153d2:	ec fa 02 44 	ld.w	r10,r6[580]
800153d6:	12 98       	mov	r8,r9
800153d8:	a1 78       	lsl	r8,0x1
800153da:	12 08       	add	r8,r9
800153dc:	f4 08 00 08 	add	r8,r10,r8
800153e0:	f0 c9 ff ff 	sub	r9,r8,-1
800153e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800153e8:	b2 88       	st.b	r9[0x0],r8
800153ea:	ec f8 01 24 	ld.w	r8,r6[292]
800153ee:	11 88       	ld.ub	r8,r8[0x0]
800153f0:	5c 58       	castu.b	r8
800153f2:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800153f6:	ec fa 02 44 	ld.w	r10,r6[580]
800153fa:	12 98       	mov	r8,r9
800153fc:	a1 78       	lsl	r8,0x1
800153fe:	12 08       	add	r8,r9
80015400:	f4 08 00 08 	add	r8,r10,r8
80015404:	f0 c9 ff fe 	sub	r9,r8,-2
80015408:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001540c:	b2 88       	st.b	r9[0x0],r8
8001540e:	ec f8 01 24 	ld.w	r8,r6[292]
80015412:	11 88       	ld.ub	r8,r8[0x0]
80015414:	5c 58       	castu.b	r8
80015416:	2f f8       	sub	r8,-1
80015418:	5c 58       	castu.b	r8
8001541a:	ec f9 01 24 	ld.w	r9,r6[292]
8001541e:	b2 88       	st.b	r9[0x0],r8
80015420:	ec f8 01 24 	ld.w	r8,r6[292]
80015424:	11 88       	ld.ub	r8,r8[0x0]
80015426:	5c 58       	castu.b	r8
80015428:	5c 58       	castu.b	r8
8001542a:	ec f9 02 c0 	ld.w	r9,r6[704]
8001542e:	b2 88       	st.b	r9[0x0],r8
80015430:	ec f8 01 24 	ld.w	r8,r6[292]
80015434:	11 88       	ld.ub	r8,r8[0x0]
80015436:	5c 58       	castu.b	r8
80015438:	c0 38       	rjmp	8001543e <adc_sequencer_add+0xca>
8001543a:	e0 68 00 ff 	mov	r8,255
8001543e:	10 9c       	mov	r12,r8
80015440:	2f dd       	sub	sp,-12
80015442:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015446:	00 00       	add	r0,r0
80015448:	80 01       	ld.sh	r1,r0[0x0]
8001544a:	52 02       	stdsp	sp[0x80],r2

8001544c <ADCI_Start_Sampling>:
8001544c:	eb cd 40 c0 	pushm	r6-r7,lr
80015450:	1a 97       	mov	r7,sp
80015452:	20 6d       	sub	sp,24
80015454:	4a d6       	lddpc	r6,80015508 <ADCI_Start_Sampling+0xbc>
80015456:	1e 26       	rsub	r6,pc
80015458:	ef 4c ff f8 	st.w	r7[-8],r12
8001545c:	ef 4a ff f0 	st.w	r7[-16],r10
80015460:	ef 49 ff ec 	st.w	r7[-20],r9
80015464:	16 99       	mov	r9,r11
80015466:	ef 69 ff f4 	st.b	r7[-12],r9
8001546a:	ef 68 ff e8 	st.b	r7[-24],r8
8001546e:	ec f8 01 1c 	ld.w	r8,r6[284]
80015472:	70 08       	ld.w	r8,r8[0x0]
80015474:	ec f9 02 44 	ld.w	r9,r6[580]
80015478:	ec fa 02 c0 	ld.w	r10,r6[704]
8001547c:	30 0b       	mov	r11,0
8001547e:	10 9c       	mov	r12,r8
80015480:	f0 16 01 c4 	mcall	r6[1808]
80015484:	ec f8 02 7c 	ld.w	r8,r6[636]
80015488:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001548c:	91 09       	st.w	r8[0x0],r9
8001548e:	ec f8 01 0c 	ld.w	r8,r6[268]
80015492:	70 08       	ld.w	r8,r8[0x0]
80015494:	ec f9 03 6c 	ld.w	r9,r6[876]
80015498:	72 0a       	ld.w	r10,r9[0x0]
8001549a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001549e:	f4 09 02 49 	mul	r9,r10,r9
800154a2:	f0 09 0d 08 	divu	r8,r8,r9
800154a6:	ef 48 ff fc 	st.w	r7[-4],r8
800154aa:	ec f8 01 98 	ld.w	r8,r6[408]
800154ae:	30 09       	mov	r9,0
800154b0:	91 09       	st.w	r8[0x0],r9
800154b2:	ec f8 01 20 	ld.w	r8,r6[288]
800154b6:	3f 69       	mov	r9,-10
800154b8:	91 09       	st.w	r8[0x0],r9
800154ba:	ec f8 03 70 	ld.w	r8,r6[880]
800154be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800154c2:	91 09       	st.w	r8[0x0],r9
800154c4:	ec f9 03 44 	ld.w	r9,r6[836]
800154c8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800154cc:	b2 88       	st.b	r9[0x0],r8
800154ce:	ec f9 02 18 	ld.w	r9,r6[536]
800154d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800154d6:	b2 88       	st.b	r9[0x0],r8
800154d8:	ec f8 01 3c 	ld.w	r8,r6[316]
800154dc:	30 09       	mov	r9,0
800154de:	91 09       	st.w	r8[0x0],r9
800154e0:	ec f8 01 1c 	ld.w	r8,r6[284]
800154e4:	70 08       	ld.w	r8,r8[0x0]
800154e6:	30 1b       	mov	r11,1
800154e8:	10 9c       	mov	r12,r8
800154ea:	f0 16 01 51 	mcall	r6[1348]
800154ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800154f2:	ec f8 01 1c 	ld.w	r8,r6[284]
800154f6:	70 08       	ld.w	r8,r8[0x0]
800154f8:	12 9b       	mov	r11,r9
800154fa:	10 9c       	mov	r12,r8
800154fc:	f0 16 01 df 	mcall	r6[1916]
80015500:	2f ad       	sub	sp,-24
80015502:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015506:	00 00       	add	r0,r0
80015508:	80 01       	ld.sh	r1,r0[0x0]
8001550a:	52 da       	stdsp	sp[0xb4],r10

8001550c <ADCI_Stop_Sampling>:
8001550c:	eb cd 40 c0 	pushm	r6-r7,lr
80015510:	1a 97       	mov	r7,sp
80015512:	48 66       	lddpc	r6,80015528 <ADCI_Stop_Sampling+0x1c>
80015514:	1e 26       	rsub	r6,pc
80015516:	ec f8 01 1c 	ld.w	r8,r6[284]
8001551a:	70 08       	ld.w	r8,r8[0x0]
8001551c:	10 9c       	mov	r12,r8
8001551e:	f0 16 00 fc 	mcall	r6[1008]
80015522:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015526:	00 00       	add	r0,r0
80015528:	80 01       	ld.sh	r1,r0[0x0]
8001552a:	53 98       	stdsp	sp[0xe4],r8

8001552c <ADCI_Sampling_Complete>:
8001552c:	eb cd 40 c0 	pushm	r6-r7,lr
80015530:	1a 97       	mov	r7,sp
80015532:	48 86       	lddpc	r6,80015550 <ADCI_Sampling_Complete+0x24>
80015534:	1e 26       	rsub	r6,pc
80015536:	ec f8 01 20 	ld.w	r8,r6[288]
8001553a:	70 0a       	ld.w	r10,r8[0x0]
8001553c:	ec f8 03 70 	ld.w	r8,r6[880]
80015540:	70 09       	ld.w	r9,r8[0x0]
80015542:	30 18       	mov	r8,1
80015544:	12 3a       	cp.w	r10,r9
80015546:	c0 24       	brge	8001554a <ADCI_Sampling_Complete+0x1e>
80015548:	30 08       	mov	r8,0
8001554a:	10 9c       	mov	r12,r8
8001554c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015550:	80 01       	ld.sh	r1,r0[0x0]
80015552:	53 b8       	stdsp	sp[0xec],r8

80015554 <ADCI_get_sample>:
80015554:	eb cd 40 c0 	pushm	r6-r7,lr
80015558:	1a 97       	mov	r7,sp
8001555a:	20 2d       	sub	sp,8
8001555c:	48 f6       	lddpc	r6,80015598 <ADCI_get_sample+0x44>
8001555e:	1e 26       	rsub	r6,pc
80015560:	ef 4c ff fc 	st.w	r7[-4],r12
80015564:	ef 4b ff f8 	st.w	r7[-8],r11
80015568:	ec f8 02 7c 	ld.w	r8,r6[636]
8001556c:	70 09       	ld.w	r9,r8[0x0]
8001556e:	ec f8 02 18 	ld.w	r8,r6[536]
80015572:	11 88       	ld.ub	r8,r8[0x0]
80015574:	5c 58       	castu.b	r8
80015576:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
8001557a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001557e:	b1 3a       	mul	r10,r8
80015580:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015584:	f4 08 00 08 	add	r8,r10,r8
80015588:	a1 78       	lsl	r8,0x1
8001558a:	f2 08 00 08 	add	r8,r9,r8
8001558e:	90 08       	ld.sh	r8,r8[0x0]
80015590:	10 9c       	mov	r12,r8
80015592:	2f ed       	sub	sp,-8
80015594:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015598:	80 01       	ld.sh	r1,r0[0x0]
8001559a:	53 e2       	stdsp	sp[0xf8],r2

8001559c <ADCI_get_buffer>:
8001559c:	eb cd 40 c0 	pushm	r6-r7,lr
800155a0:	1a 97       	mov	r7,sp
800155a2:	48 56       	lddpc	r6,800155b4 <ADCI_get_buffer+0x18>
800155a4:	1e 26       	rsub	r6,pc
800155a6:	ec f8 02 7c 	ld.w	r8,r6[636]
800155aa:	70 08       	ld.w	r8,r8[0x0]
800155ac:	10 9c       	mov	r12,r8
800155ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800155b2:	00 00       	add	r0,r0
800155b4:	80 01       	ld.sh	r1,r0[0x0]
800155b6:	54 28       	stdsp	sp[0x108],r8

800155b8 <ADCI_get_sampling_status>:
800155b8:	eb cd 40 c0 	pushm	r6-r7,lr
800155bc:	1a 97       	mov	r7,sp
800155be:	48 56       	lddpc	r6,800155d0 <ADCI_get_sampling_status+0x18>
800155c0:	1e 26       	rsub	r6,pc
800155c2:	ec f8 01 20 	ld.w	r8,r6[288]
800155c6:	70 08       	ld.w	r8,r8[0x0]
800155c8:	10 9c       	mov	r12,r8
800155ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800155ce:	00 00       	add	r0,r0
800155d0:	80 01       	ld.sh	r1,r0[0x0]
800155d2:	54 44       	stdsp	sp[0x110],r4

800155d4 <genclk_config_defaults>:
800155d4:	eb cd 40 80 	pushm	r7,lr
800155d8:	1a 97       	mov	r7,sp
800155da:	20 2d       	sub	sp,8
800155dc:	ef 4c ff fc 	st.w	r7[-4],r12
800155e0:	ef 4b ff f8 	st.w	r7[-8],r11
800155e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155e8:	30 09       	mov	r9,0
800155ea:	91 09       	st.w	r8[0x0],r9
800155ec:	2f ed       	sub	sp,-8
800155ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800155f2 <genclk_config_set_source>:
800155f2:	eb cd 40 80 	pushm	r7,lr
800155f6:	1a 97       	mov	r7,sp
800155f8:	20 2d       	sub	sp,8
800155fa:	ef 4c ff fc 	st.w	r7[-4],r12
800155fe:	ef 4b ff f8 	st.w	r7[-8],r11
80015602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015606:	70 08       	ld.w	r8,r8[0x0]
80015608:	10 99       	mov	r9,r8
8001560a:	e0 19 f0 ff 	andl	r9,0xf0ff
8001560e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015612:	a9 68       	lsl	r8,0x8
80015614:	10 49       	or	r9,r8
80015616:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001561a:	91 09       	st.w	r8[0x0],r9
8001561c:	2f ed       	sub	sp,-8
8001561e:	e3 cd 80 80 	ldm	sp++,r7,pc

80015622 <genclk_config_set_divider>:
80015622:	eb cd 40 80 	pushm	r7,lr
80015626:	1a 97       	mov	r7,sp
80015628:	20 2d       	sub	sp,8
8001562a:	ef 4c ff fc 	st.w	r7[-4],r12
8001562e:	ef 4b ff f8 	st.w	r7[-8],r11
80015632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015636:	70 08       	ld.w	r8,r8[0x0]
80015638:	10 99       	mov	r9,r8
8001563a:	e4 19 ff 00 	andh	r9,0xff00
8001563e:	e0 19 ff fd 	andl	r9,0xfffd
80015642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015646:	91 09       	st.w	r8[0x0],r9
80015648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001564c:	58 18       	cp.w	r8,1
8001564e:	e0 88 00 17 	brls	8001567c <genclk_config_set_divider+0x5a>
80015652:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015656:	70 08       	ld.w	r8,r8[0x0]
80015658:	10 99       	mov	r9,r8
8001565a:	a1 b9       	sbr	r9,0x1
8001565c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015660:	91 09       	st.w	r8[0x0],r9
80015662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015666:	70 09       	ld.w	r9,r8[0x0]
80015668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001566c:	2f f8       	sub	r8,-1
8001566e:	a1 98       	lsr	r8,0x1
80015670:	20 18       	sub	r8,1
80015672:	b1 68       	lsl	r8,0x10
80015674:	10 49       	or	r9,r8
80015676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001567a:	91 09       	st.w	r8[0x0],r9
8001567c:	2f ed       	sub	sp,-8
8001567e:	e3 cd 80 80 	ldm	sp++,r7,pc

80015682 <genclk_enable>:
80015682:	eb cd 40 80 	pushm	r7,lr
80015686:	1a 97       	mov	r7,sp
80015688:	20 2d       	sub	sp,8
8001568a:	ef 4c ff fc 	st.w	r7[-4],r12
8001568e:	ef 4b ff f8 	st.w	r7[-8],r11
80015692:	fe 78 08 00 	mov	r8,-63488
80015696:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001569a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001569e:	74 0a       	ld.w	r10,r10[0x0]
800156a0:	a1 aa       	sbr	r10,0x0
800156a2:	2e 79       	sub	r9,-25
800156a4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800156a8:	2f ed       	sub	sp,-8
800156aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800156ae <genclk_disable>:
800156ae:	eb cd 40 80 	pushm	r7,lr
800156b2:	1a 97       	mov	r7,sp
800156b4:	20 1d       	sub	sp,4
800156b6:	ef 4c ff fc 	st.w	r7[-4],r12
800156ba:	fe 78 08 00 	mov	r8,-63488
800156be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800156c2:	2e 79       	sub	r9,-25
800156c4:	30 0a       	mov	r10,0
800156c6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800156ca:	2f fd       	sub	sp,-4
800156cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800156d0 <get_interrupt_counter>:
800156d0:	eb cd 40 c0 	pushm	r6-r7,lr
800156d4:	1a 97       	mov	r7,sp
800156d6:	48 56       	lddpc	r6,800156e8 <get_interrupt_counter+0x18>
800156d8:	1e 26       	rsub	r6,pc
800156da:	ec f8 08 ec 	ld.w	r8,r6[2284]
800156de:	70 08       	ld.w	r8,r8[0x0]
800156e0:	10 9c       	mov	r12,r8
800156e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800156e6:	00 00       	add	r0,r0
800156e8:	80 01       	ld.sh	r1,r0[0x0]
800156ea:	55 5c       	stdsp	sp[0x154],r12

800156ec <processData>:
800156ec:	eb cd 40 c0 	pushm	r6-r7,lr
800156f0:	1a 97       	mov	r7,sp
800156f2:	20 3d       	sub	sp,12
800156f4:	4b e6       	lddpc	r6,800157ec <processData+0x100>
800156f6:	1e 26       	rsub	r6,pc
800156f8:	ec f8 01 64 	ld.w	r8,r6[356]
800156fc:	70 08       	ld.w	r8,r8[0x0]
800156fe:	e0 48 03 ff 	cp.w	r8,1023
80015702:	e0 89 00 70 	brgt	800157e2 <processData+0xf6>
80015706:	30 0c       	mov	r12,0
80015708:	f0 16 01 cd 	mcall	r6[1844]
8001570c:	18 98       	mov	r8,r12
8001570e:	ef 48 ff fc 	st.w	r7[-4],r8
80015712:	30 08       	mov	r8,0
80015714:	ef 48 ff f4 	st.w	r7[-12],r8
80015718:	c4 48       	rjmp	800157a0 <processData+0xb4>
8001571a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001571e:	12 98       	mov	r8,r9
80015720:	a1 78       	lsl	r8,0x1
80015722:	12 08       	add	r8,r9
80015724:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015728:	f2 08 00 08 	add	r8,r9,r8
8001572c:	11 88       	ld.ub	r8,r8[0x0]
8001572e:	f0 0a 15 18 	lsl	r10,r8,0x18
80015732:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015736:	12 98       	mov	r8,r9
80015738:	a1 78       	lsl	r8,0x1
8001573a:	12 08       	add	r8,r9
8001573c:	2f f8       	sub	r8,-1
8001573e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015742:	f2 08 00 08 	add	r8,r9,r8
80015746:	11 88       	ld.ub	r8,r8[0x0]
80015748:	b1 68       	lsl	r8,0x10
8001574a:	10 0a       	add	r10,r8
8001574c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015750:	12 98       	mov	r8,r9
80015752:	a1 78       	lsl	r8,0x1
80015754:	12 08       	add	r8,r9
80015756:	2f e8       	sub	r8,-2
80015758:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001575c:	f2 08 00 08 	add	r8,r9,r8
80015760:	11 88       	ld.ub	r8,r8[0x0]
80015762:	a9 68       	lsl	r8,0x8
80015764:	f4 08 00 08 	add	r8,r10,r8
80015768:	ef 48 ff f8 	st.w	r7[-8],r8
8001576c:	ee fb ff f4 	ld.w	r11,r7[-12]
80015770:	ec f8 01 64 	ld.w	r8,r6[356]
80015774:	70 09       	ld.w	r9,r8[0x0]
80015776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001577a:	f0 ca ff 01 	sub	r10,r8,-255
8001577e:	58 08       	cp.w	r8,0
80015780:	f4 08 17 50 	movlt	r8,r10
80015784:	a9 48       	asr	r8,0x8
80015786:	10 9a       	mov	r10,r8
80015788:	ec f8 04 dc 	ld.w	r8,r6[1244]
8001578c:	ab 6b       	lsl	r11,0xa
8001578e:	f6 09 00 09 	add	r9,r11,r9
80015792:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015796:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001579a:	2f f8       	sub	r8,-1
8001579c:	ef 48 ff f4 	st.w	r7[-12],r8
800157a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800157a4:	58 38       	cp.w	r8,3
800157a6:	fe 9a ff ba 	brle	8001571a <processData+0x2e>
800157aa:	ec f8 02 8c 	ld.w	r8,r6[652]
800157ae:	70 08       	ld.w	r8,r8[0x0]
800157b0:	58 08       	cp.w	r8,0
800157b2:	c0 f0       	breq	800157d0 <processData+0xe4>
800157b4:	ec f8 02 8c 	ld.w	r8,r6[652]
800157b8:	70 08       	ld.w	r8,r8[0x0]
800157ba:	ec f9 01 64 	ld.w	r9,r6[356]
800157be:	72 09       	ld.w	r9,r9[0x0]
800157c0:	12 9c       	mov	r12,r9
800157c2:	5d 18       	icall	r8
800157c4:	18 98       	mov	r8,r12
800157c6:	5c 88       	casts.h	r8
800157c8:	5c 78       	castu.h	r8
800157ca:	10 9c       	mov	r12,r8
800157cc:	f0 16 01 bc 	mcall	r6[1776]
800157d0:	ec f8 01 64 	ld.w	r8,r6[356]
800157d4:	70 08       	ld.w	r8,r8[0x0]
800157d6:	f0 c9 ff ff 	sub	r9,r8,-1
800157da:	ec f8 01 64 	ld.w	r8,r6[356]
800157de:	91 09       	st.w	r8[0x0],r9
800157e0:	c0 28       	rjmp	800157e4 <processData+0xf8>
800157e2:	d7 03       	nop
800157e4:	2f dd       	sub	sp,-12
800157e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800157ea:	00 00       	add	r0,r0
800157ec:	80 01       	ld.sh	r1,r0[0x0]
800157ee:	55 7a       	stdsp	sp[0x15c],r10

800157f0 <set_DAC_generator_function>:
800157f0:	eb cd 40 c0 	pushm	r6-r7,lr
800157f4:	1a 97       	mov	r7,sp
800157f6:	20 1d       	sub	sp,4
800157f8:	48 66       	lddpc	r6,80015810 <set_DAC_generator_function+0x20>
800157fa:	1e 26       	rsub	r6,pc
800157fc:	ef 4c ff fc 	st.w	r7[-4],r12
80015800:	ec f8 02 8c 	ld.w	r8,r6[652]
80015804:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015808:	91 09       	st.w	r8[0x0],r9
8001580a:	2f fd       	sub	sp,-4
8001580c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015810:	80 01       	ld.sh	r1,r0[0x0]
80015812:	56 7e       	stdsp	sp[0x19c],lr

80015814 <get_sample>:
80015814:	eb cd 40 c0 	pushm	r6-r7,lr
80015818:	1a 97       	mov	r7,sp
8001581a:	20 2d       	sub	sp,8
8001581c:	48 c6       	lddpc	r6,8001584c <get_sample+0x38>
8001581e:	1e 26       	rsub	r6,pc
80015820:	ef 4c ff fc 	st.w	r7[-4],r12
80015824:	ef 4b ff f8 	st.w	r7[-8],r11
80015828:	ee fa ff fc 	ld.w	r10,r7[-4]
8001582c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015830:	ec f8 04 dc 	ld.w	r8,r6[1244]
80015834:	ab 6a       	lsl	r10,0xa
80015836:	f4 09 00 09 	add	r9,r10,r9
8001583a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001583e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80015842:	10 9c       	mov	r12,r8
80015844:	2f ed       	sub	sp,-8
80015846:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001584a:	00 00       	add	r0,r0
8001584c:	80 01       	ld.sh	r1,r0[0x0]
8001584e:	56 a2       	stdsp	sp[0x1a8],r2

80015850 <get_sampling_status>:
80015850:	eb cd 40 c0 	pushm	r6-r7,lr
80015854:	1a 97       	mov	r7,sp
80015856:	48 56       	lddpc	r6,80015868 <get_sampling_status+0x18>
80015858:	1e 26       	rsub	r6,pc
8001585a:	ec f8 01 64 	ld.w	r8,r6[356]
8001585e:	70 08       	ld.w	r8,r8[0x0]
80015860:	10 9c       	mov	r12,r8
80015862:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015866:	00 00       	add	r0,r0
80015868:	80 01       	ld.sh	r1,r0[0x0]
8001586a:	56 dc       	stdsp	sp[0x1b4],r12

8001586c <Init_ADC>:
8001586c:	eb cd 40 c0 	pushm	r6-r7,lr
80015870:	1a 97       	mov	r7,sp
80015872:	4b 96       	lddpc	r6,80015954 <Init_ADC+0xe8>
80015874:	1e 26       	rsub	r6,pc
80015876:	ec f8 02 8c 	ld.w	r8,r6[652]
8001587a:	30 09       	mov	r9,0
8001587c:	91 09       	st.w	r8[0x0],r9
8001587e:	30 3b       	mov	r11,3
80015880:	32 3c       	mov	r12,35
80015882:	f0 16 00 3d 	mcall	r6[244]
80015886:	30 1b       	mov	r11,1
80015888:	32 4c       	mov	r12,36
8001588a:	f0 16 00 3d 	mcall	r6[244]
8001588e:	30 3b       	mov	r11,3
80015890:	32 2c       	mov	r12,34
80015892:	f0 16 00 3d 	mcall	r6[244]
80015896:	30 1b       	mov	r11,1
80015898:	32 1c       	mov	r12,33
8001589a:	f0 16 00 3d 	mcall	r6[244]
8001589e:	30 1b       	mov	r11,1
800158a0:	32 0c       	mov	r12,32
800158a2:	f0 16 00 3d 	mcall	r6[244]
800158a6:	30 3b       	mov	r11,3
800158a8:	34 0c       	mov	r12,64
800158aa:	f0 16 00 3d 	mcall	r6[244]
800158ae:	30 3b       	mov	r11,3
800158b0:	34 1c       	mov	r12,65
800158b2:	f0 16 00 3d 	mcall	r6[244]
800158b6:	30 3b       	mov	r11,3
800158b8:	34 2c       	mov	r12,66
800158ba:	f0 16 00 3d 	mcall	r6[244]
800158be:	30 3b       	mov	r11,3
800158c0:	34 3c       	mov	r12,67
800158c2:	f0 16 00 3d 	mcall	r6[244]
800158c6:	30 1c       	mov	r12,1
800158c8:	f0 16 01 5b 	mcall	r6[1388]
800158cc:	ec f9 01 7c 	ld.w	r9,r6[380]
800158d0:	30 08       	mov	r8,0
800158d2:	b2 98       	st.b	r9[0x1],r8
800158d4:	ec f9 01 7c 	ld.w	r9,r6[380]
800158d8:	30 08       	mov	r8,0
800158da:	b2 a8       	st.b	r9[0x2],r8
800158dc:	ec f9 01 7c 	ld.w	r9,r6[380]
800158e0:	30 08       	mov	r8,0
800158e2:	b2 d8       	st.b	r9[0x5],r8
800158e4:	ec f9 01 7c 	ld.w	r9,r6[380]
800158e8:	30 08       	mov	r8,0
800158ea:	b2 88       	st.b	r9[0x0],r8
800158ec:	30 1b       	mov	r11,1
800158ee:	37 5c       	mov	r12,117
800158f0:	f0 16 00 3f 	mcall	r6[252]
800158f4:	30 1a       	mov	r10,1
800158f6:	ec fb 01 7c 	ld.w	r11,r6[380]
800158fa:	fe 7c 14 00 	mov	r12,-60416
800158fe:	f0 16 01 b4 	mcall	r6[1744]
80015902:	30 0b       	mov	r11,0
80015904:	fc 7c 18 00 	mov	r12,-190464
80015908:	f0 16 01 44 	mcall	r6[1296]
8001590c:	30 cb       	mov	r11,12
8001590e:	30 0c       	mov	r12,0
80015910:	f0 16 01 a5 	mcall	r6[1684]
80015914:	ec fb 06 b8 	ld.w	r11,r6[1720]
80015918:	30 0c       	mov	r12,0
8001591a:	f0 16 01 89 	mcall	r6[1572]
8001591e:	ec f8 01 7c 	ld.w	r8,r6[380]
80015922:	11 88       	ld.ub	r8,r8[0x0]
80015924:	10 9b       	mov	r11,r8
80015926:	fe 7c 14 00 	mov	r12,-60416
8001592a:	f0 16 01 d5 	mcall	r6[1876]
8001592e:	ec f8 01 7c 	ld.w	r8,r6[380]
80015932:	11 88       	ld.ub	r8,r8[0x0]
80015934:	10 9b       	mov	r11,r8
80015936:	fe 7c 14 00 	mov	r12,-60416
8001593a:	f0 16 01 83 	mcall	r6[1548]
8001593e:	30 0b       	mov	r11,0
80015940:	fe 7c 14 00 	mov	r12,-60416
80015944:	f0 16 00 de 	mcall	r6[888]
80015948:	30 3b       	mov	r11,3
8001594a:	32 5c       	mov	r12,37
8001594c:	f0 16 00 3d 	mcall	r6[244]
80015950:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015954:	80 01       	ld.sh	r1,r0[0x0]
80015956:	56 f8       	stdsp	sp[0x1bc],r8

80015958 <ADC_Switch_Clock>:
80015958:	eb cd 40 c0 	pushm	r6-r7,lr
8001595c:	1a 97       	mov	r7,sp
8001595e:	20 1d       	sub	sp,4
80015960:	49 56       	lddpc	r6,800159b4 <ADC_Switch_Clock+0x5c>
80015962:	1e 26       	rsub	r6,pc
80015964:	18 98       	mov	r8,r12
80015966:	ef 68 ff fc 	st.b	r7[-4],r8
8001596a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001596e:	30 18       	mov	r8,1
80015970:	f0 09 18 00 	cp.b	r9,r8
80015974:	c1 a1       	brne	800159a8 <ADC_Switch_Clock+0x50>
80015976:	30 1b       	mov	r11,1
80015978:	35 4c       	mov	r12,84
8001597a:	f0 16 00 3f 	mcall	r6[252]
8001597e:	30 3b       	mov	r11,3
80015980:	32 5c       	mov	r12,37
80015982:	f0 16 00 3d 	mcall	r6[244]
80015986:	30 ab       	mov	r11,10
80015988:	ec fc 02 2c 	ld.w	r12,r6[556]
8001598c:	c2 4e       	rcall	800155d4 <genclk_config_defaults>
8001598e:	30 6b       	mov	r11,6
80015990:	ec fc 02 2c 	ld.w	r12,r6[556]
80015994:	c2 fe       	rcall	800155f2 <genclk_config_set_source>
80015996:	30 2b       	mov	r11,2
80015998:	ec fc 02 2c 	ld.w	r12,r6[556]
8001599c:	c4 3e       	rcall	80015622 <genclk_config_set_divider>
8001599e:	30 ab       	mov	r11,10
800159a0:	ec fc 02 2c 	ld.w	r12,r6[556]
800159a4:	c6 fe       	rcall	80015682 <genclk_enable>
800159a6:	c0 38       	rjmp	800159ac <ADC_Switch_Clock+0x54>
800159a8:	30 ac       	mov	r12,10
800159aa:	c8 2e       	rcall	800156ae <genclk_disable>
800159ac:	2f fd       	sub	sp,-4
800159ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800159b2:	00 00       	add	r0,r0
800159b4:	80 01       	ld.sh	r1,r0[0x0]
800159b6:	57 e6       	stdsp	sp[0x1f8],r6

800159b8 <ADC_Switch_Channel>:
800159b8:	eb cd 40 80 	pushm	r7,lr
800159bc:	1a 97       	mov	r7,sp
800159be:	20 2d       	sub	sp,8
800159c0:	ef 4c ff fc 	st.w	r7[-4],r12
800159c4:	16 98       	mov	r8,r11
800159c6:	ef 68 ff f8 	st.b	r7[-8],r8
800159ca:	2f ed       	sub	sp,-8
800159cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800159d0 <ADC_Set_Mode>:
800159d0:	eb cd 40 80 	pushm	r7,lr
800159d4:	1a 97       	mov	r7,sp
800159d6:	20 1d       	sub	sp,4
800159d8:	ef 4c ff fc 	st.w	r7[-4],r12
800159dc:	2f fd       	sub	sp,-4
800159de:	e3 cd 80 80 	ldm	sp++,r7,pc

800159e2 <ADC_Start_Oneshot>:
800159e2:	eb cd 40 c0 	pushm	r6-r7,lr
800159e6:	1a 97       	mov	r7,sp
800159e8:	48 46       	lddpc	r6,800159f8 <ADC_Start_Oneshot+0x16>
800159ea:	1e 26       	rsub	r6,pc
800159ec:	ec f8 01 64 	ld.w	r8,r6[356]
800159f0:	30 09       	mov	r9,0
800159f2:	91 09       	st.w	r8[0x0],r9
800159f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800159f8:	80 01       	ld.sh	r1,r0[0x0]
800159fa:	58 6e       	cp.w	lr,6

800159fc <ADC_Stop_Sampling>:
800159fc:	eb cd 40 80 	pushm	r7,lr
80015a00:	1a 97       	mov	r7,sp
80015a02:	e3 cd 80 80 	ldm	sp++,r7,pc

80015a06 <Sampling_Complete>:
80015a06:	eb cd 40 80 	pushm	r7,lr
80015a0a:	1a 97       	mov	r7,sp
80015a0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80015a10 <eic_nmi_handler>:
80015a10:	d7 f1       	pushm	r0-r12,lr
80015a12:	ec f8 01 64 	ld.w	r8,r6[356]
80015a16:	70 08       	ld.w	r8,r8[0x0]
80015a18:	e0 48 03 ff 	cp.w	r8,1023
80015a1c:	e0 89 00 06 	brgt	80015a28 <eic_nmi_handler+0x18>
80015a20:	30 cb       	mov	r11,12
80015a22:	30 0c       	mov	r12,0
80015a24:	f0 16 01 8b 	mcall	r6[1580]
80015a28:	30 0b       	mov	r11,0
80015a2a:	fe 7c 14 00 	mov	r12,-60416
80015a2e:	f0 16 00 de 	mcall	r6[888]
80015a32:	d7 f2       	popm	r0-r12,lr
80015a34:	d6 03       	rete
	...

80015a38 <init_adxl345>:

uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};


void init_adxl345(void) {
80015a38:	eb cd 40 c0 	pushm	r6-r7,lr
80015a3c:	1a 97       	mov	r7,sp
80015a3e:	4b 06       	lddpc	r6,80015afc <init_adxl345+0xc4>
80015a40:	1e 26       	rsub	r6,pc
	

	gyro_event.callback=0;
80015a42:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a46:	30 09       	mov	r9,0
80015a48:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80015a4a:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a4e:	30 59       	mov	r9,5
80015a50:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80015a52:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a56:	3f f8       	mov	r8,-1
80015a58:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ADXL_ALT_SLAVE_ADDRESS;
80015a5c:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a60:	35 38       	mov	r8,83
80015a62:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80015a64:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a68:	30 18       	mov	r8,1
80015a6a:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&acc_outputs.raw_data;
80015a6e:	ec f9 01 60 	ld.w	r9,r6[352]
80015a72:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a76:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015a78:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a7c:	30 69       	mov	r9,6
80015a7e:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80015a80:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a84:	ec f9 01 40 	ld.w	r9,r6[320]
80015a88:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=2;
80015a8a:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a8e:	30 29       	mov	r9,2
80015a90:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=400000;
80015a92:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a96:	e6 69 1a 80 	mov	r9,400000
80015a9a:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80015a9c:	ec fb 00 8c 	ld.w	r11,r6[140]
80015aa0:	30 0c       	mov	r12,0
80015aa2:	f0 16 01 13 	mcall	r6[1100]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015aa6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015aaa:	f1 38 00 24 	ld.ub	r8,r8[36]
80015aae:	10 9b       	mov	r11,r8
80015ab0:	30 0c       	mov	r12,0
80015ab2:	f0 16 00 62 	mcall	r6[392]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80015ab6:	ec f9 00 8c 	ld.w	r9,r6[140]
80015aba:	30 28       	mov	r8,2
80015abc:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015ac0:	ec f9 00 8c 	ld.w	r9,r6[140]
80015ac4:	33 28       	mov	r8,50
80015ac6:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.read_data=&acc_outputs;
80015aca:	ec f8 00 8c 	ld.w	r8,r6[140]
80015ace:	ec f9 01 60 	ld.w	r9,r6[352]
80015ad2:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015ad4:	ec f8 00 8c 	ld.w	r8,r6[140]
80015ad8:	30 69       	mov	r9,6
80015ada:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80015adc:	ec fb 00 8c 	ld.w	r11,r6[140]
80015ae0:	30 0c       	mov	r12,0
80015ae2:	f0 16 01 14 	mcall	r6[1104]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015ae6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015aea:	f1 38 00 24 	ld.ub	r8,r8[36]
80015aee:	10 9b       	mov	r11,r8
80015af0:	30 0c       	mov	r12,0
80015af2:	f0 16 00 62 	mcall	r6[392]
	/**/
}
80015af6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015afa:	00 00       	add	r0,r0
80015afc:	80 01       	ld.sh	r1,r0[0x0]
80015afe:	58 c4       	cp.w	r4,12

80015b00 <init_adxl345_slow>:

void init_adxl345_slow(void) {
80015b00:	eb cd 40 c0 	pushm	r6-r7,lr
80015b04:	1a 97       	mov	r7,sp
80015b06:	48 f6       	lddpc	r6,80015b40 <init_adxl345_slow+0x40>
80015b08:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015b0a:	ec fb 08 e8 	ld.w	r11,r6[2280]
80015b0e:	fe 7c 38 00 	mov	r12,-51200
80015b12:	f0 16 00 72 	mcall	r6[456]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015b16:	30 08       	mov	r8,0
80015b18:	35 39       	mov	r9,83
80015b1a:	30 2a       	mov	r10,2
80015b1c:	ec fb 01 40 	ld.w	r11,r6[320]
80015b20:	fe 7c 38 00 	mov	r12,-51200
80015b24:	f0 16 00 36 	mcall	r6[216]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015b28:	30 08       	mov	r8,0
80015b2a:	35 39       	mov	r9,83
80015b2c:	30 2a       	mov	r10,2
80015b2e:	ec fb 08 7c 	ld.w	r11,r6[2172]
80015b32:	fe 7c 38 00 	mov	r12,-51200
80015b36:	f0 16 00 36 	mcall	r6[216]
}
80015b3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b3e:	00 00       	add	r0,r0
80015b40:	80 01       	ld.sh	r1,r0[0x0]
80015b42:	59 8c       	cp.w	r12,24

80015b44 <get_acc_data>:

acc_data* get_acc_data(void) {
80015b44:	eb cd 40 c0 	pushm	r6-r7,lr
80015b48:	1a 97       	mov	r7,sp
80015b4a:	48 86       	lddpc	r6,80015b68 <get_acc_data+0x24>
80015b4c:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015b4e:	ec f8 00 8c 	ld.w	r8,r6[140]
80015b52:	f1 38 00 24 	ld.ub	r8,r8[36]
80015b56:	10 9b       	mov	r11,r8
80015b58:	30 0c       	mov	r12,0
80015b5a:	f0 16 00 62 	mcall	r6[392]
	return &acc_outputs;
80015b5e:	ec f8 01 60 	ld.w	r8,r6[352]
}
80015b62:	10 9c       	mov	r12,r8
80015b64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b68:	80 01       	ld.sh	r1,r0[0x0]
80015b6a:	59 d0       	cp.w	r0,29

80015b6c <get_acc_data_slow>:

acc_data* get_acc_data_slow(void) {
80015b6c:	eb cd 40 c0 	pushm	r6-r7,lr
80015b70:	1a 97       	mov	r7,sp
80015b72:	20 1d       	sub	sp,4
80015b74:	4a 96       	lddpc	r6,80015c18 <get_acc_data_slow+0xac>
80015b76:	1e 26       	rsub	r6,pc
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015b78:	ec f9 00 8c 	ld.w	r9,r6[140]
80015b7c:	33 28       	mov	r8,50
80015b7e:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80015b82:	ec f8 00 8c 	ld.w	r8,r6[140]
80015b86:	f0 cb ff f7 	sub	r11,r8,-9
80015b8a:	30 08       	mov	r8,0
80015b8c:	35 39       	mov	r9,83
80015b8e:	30 1a       	mov	r10,1
80015b90:	fe 7c 38 00 	mov	r12,-51200
80015b94:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80015b98:	30 08       	mov	r8,0
80015b9a:	35 39       	mov	r9,83
80015b9c:	30 6a       	mov	r10,6
80015b9e:	ec fb 01 60 	ld.w	r11,r6[352]
80015ba2:	fe 7c 38 00 	mov	r12,-51200
80015ba6:	f0 16 00 61 	mcall	r6[388]
	
	for (i=0; i<3; i++) {
80015baa:	30 08       	mov	r8,0
80015bac:	ef 48 ff fc 	st.w	r7[-4],r8
80015bb0:	c2 98       	rjmp	80015c02 <get_acc_data_slow+0x96>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80015bb2:	ee fb ff fc 	ld.w	r11,r7[-4]
80015bb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bba:	a1 78       	lsl	r8,0x1
80015bbc:	ec f9 01 60 	ld.w	r9,r6[352]
80015bc0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80015bc4:	5c 58       	castu.b	r8
80015bc6:	10 99       	mov	r9,r8
80015bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bcc:	a1 78       	lsl	r8,0x1
80015bce:	2f f8       	sub	r8,-1
80015bd0:	ec fa 01 60 	ld.w	r10,r6[352]
80015bd4:	f4 08 07 08 	ld.ub	r8,r10[r8]
80015bd8:	5c 58       	castu.b	r8
80015bda:	a9 68       	lsl	r8,0x8
80015bdc:	5c 88       	casts.h	r8
80015bde:	f2 08 00 08 	add	r8,r9,r8
80015be2:	5c 88       	casts.h	r8
80015be4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015be8:	ec fa 01 60 	ld.w	r10,r6[352]
80015bec:	f6 c8 ff fe 	sub	r8,r11,-2
80015bf0:	a1 78       	lsl	r8,0x1
80015bf2:	f4 08 00 08 	add	r8,r10,r8
80015bf6:	b0 19       	st.h	r8[0x2],r9
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80015bf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bfc:	2f f8       	sub	r8,-1
80015bfe:	ef 48 ff fc 	st.w	r7[-4],r8
80015c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c06:	58 28       	cp.w	r8,2
80015c08:	fe 9a ff d5 	brle	80015bb2 <get_acc_data_slow+0x46>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80015c0c:	ec f8 01 60 	ld.w	r8,r6[352]
80015c10:	10 9c       	mov	r12,r8
80015c12:	2f fd       	sub	sp,-4
80015c14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015c18:	80 01       	ld.sh	r1,r0[0x0]
80015c1a:	59 fa       	cp.w	r10,31

80015c1c <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80015c1c:	eb cd 40 80 	pushm	r7,lr
80015c20:	1a 97       	mov	r7,sp
80015c22:	20 1d       	sub	sp,4
80015c24:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80015c28:	30 18       	mov	r8,1
80015c2a:	ee fa ff fc 	ld.w	r10,r7[-4]
80015c2e:	30 09       	mov	r9,0
80015c30:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c34:	e0 8c 00 03 	brvs	80015c3a <f_abs+0x1e>
80015c38:	c0 24       	brge	80015c3c <f_abs+0x20>
80015c3a:	30 08       	mov	r8,0
80015c3c:	5c 58       	castu.b	r8
80015c3e:	c0 40       	breq	80015c46 <f_abs+0x2a>
	{
		return a;
80015c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c44:	c0 58       	rjmp	80015c4e <f_abs+0x32>
	}else{
		return -a;
80015c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c4a:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80015c4e:	10 9c       	mov	r12,r8
80015c50:	2f fd       	sub	sp,-4
80015c52:	e3 cd 80 80 	ldm	sp++,r7,pc

80015c56 <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80015c56:	eb cd 40 80 	pushm	r7,lr
80015c5a:	1a 97       	mov	r7,sp
80015c5c:	20 4d       	sub	sp,16
80015c5e:	ef 4c ff f8 	st.w	r7[-8],r12
80015c62:	ef 4b ff f4 	st.w	r7[-12],r11
80015c66:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80015c6a:	30 18       	mov	r8,1
80015c6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015c74:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c78:	e0 8c 00 04 	brvs	80015c80 <median_filter_3x+0x2a>
80015c7c:	e0 8a 00 03 	brle	80015c82 <median_filter_3x+0x2c>
80015c80:	30 08       	mov	r8,0
80015c82:	5c 58       	castu.b	r8
80015c84:	c2 50       	breq	80015cce <median_filter_3x+0x78>
80015c86:	30 18       	mov	r8,1
80015c88:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015c90:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c94:	e0 8c 00 04 	brvs	80015c9c <median_filter_3x+0x46>
80015c98:	e0 8a 00 03 	brle	80015c9e <median_filter_3x+0x48>
80015c9c:	30 08       	mov	r8,0
80015c9e:	5c 58       	castu.b	r8
80015ca0:	c1 70       	breq	80015cce <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80015ca2:	30 18       	mov	r8,1
80015ca4:	ee fa ff f4 	ld.w	r10,r7[-12]
80015ca8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015cac:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cb0:	e0 8c 00 04 	brvs	80015cb8 <median_filter_3x+0x62>
80015cb4:	e0 8a 00 03 	brle	80015cba <median_filter_3x+0x64>
80015cb8:	30 08       	mov	r8,0
80015cba:	5c 58       	castu.b	r8
80015cbc:	c0 40       	breq	80015cc4 <median_filter_3x+0x6e>
80015cbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015cc2:	c0 38       	rjmp	80015cc8 <median_filter_3x+0x72>
80015cc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015cc8:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
80015ccc:	c4 88       	rjmp	80015d5c <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015cce:	30 18       	mov	r8,1
80015cd0:	ee fa ff f4 	ld.w	r10,r7[-12]
80015cd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015cd8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cdc:	e0 8c 00 04 	brvs	80015ce4 <median_filter_3x+0x8e>
80015ce0:	e0 8a 00 03 	brle	80015ce6 <median_filter_3x+0x90>
80015ce4:	30 08       	mov	r8,0
80015ce6:	5c 58       	castu.b	r8
80015ce8:	c2 50       	breq	80015d32 <median_filter_3x+0xdc>
80015cea:	30 18       	mov	r8,1
80015cec:	ee fa ff f4 	ld.w	r10,r7[-12]
80015cf0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015cf4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cf8:	e0 8c 00 04 	brvs	80015d00 <median_filter_3x+0xaa>
80015cfc:	e0 8a 00 03 	brle	80015d02 <median_filter_3x+0xac>
80015d00:	30 08       	mov	r8,0
80015d02:	5c 58       	castu.b	r8
80015d04:	c1 70       	breq	80015d32 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80015d06:	30 18       	mov	r8,1
80015d08:	ee fa ff f8 	ld.w	r10,r7[-8]
80015d0c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015d10:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d14:	e0 8c 00 04 	brvs	80015d1c <median_filter_3x+0xc6>
80015d18:	e0 8a 00 03 	brle	80015d1e <median_filter_3x+0xc8>
80015d1c:	30 08       	mov	r8,0
80015d1e:	5c 58       	castu.b	r8
80015d20:	c0 40       	breq	80015d28 <median_filter_3x+0xd2>
80015d22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015d26:	c0 38       	rjmp	80015d2c <median_filter_3x+0xd6>
80015d28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015d2c:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015d30:	c1 68       	rjmp	80015d5c <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80015d32:	30 18       	mov	r8,1
80015d34:	ee fa ff f8 	ld.w	r10,r7[-8]
80015d38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015d3c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d40:	e0 8c 00 04 	brvs	80015d48 <median_filter_3x+0xf2>
80015d44:	e0 8a 00 03 	brle	80015d4a <median_filter_3x+0xf4>
80015d48:	30 08       	mov	r8,0
80015d4a:	5c 58       	castu.b	r8
80015d4c:	c0 40       	breq	80015d54 <median_filter_3x+0xfe>
80015d4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015d52:	c0 38       	rjmp	80015d58 <median_filter_3x+0x102>
80015d54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015d58:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80015d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80015d60:	10 9c       	mov	r12,r8
80015d62:	2f cd       	sub	sp,-16
80015d64:	e3 cd 80 80 	ldm	sp++,r7,pc

80015d68 <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80015d68:	eb cd 40 c0 	pushm	r6-r7,lr
80015d6c:	1a 97       	mov	r7,sp
80015d6e:	20 2d       	sub	sp,8
80015d70:	48 f6       	lddpc	r6,80015dac <bmp085_read_int+0x44>
80015d72:	1e 26       	rsub	r6,pc
80015d74:	18 98       	mov	r8,r12
80015d76:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80015d7a:	ee cb 00 08 	sub	r11,r7,8
80015d7e:	30 08       	mov	r8,0
80015d80:	37 79       	mov	r9,119
80015d82:	30 1a       	mov	r10,1
80015d84:	fe 7c 38 00 	mov	r12,-51200
80015d88:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80015d8c:	ee cb 00 02 	sub	r11,r7,2
80015d90:	30 08       	mov	r8,0
80015d92:	37 79       	mov	r9,119
80015d94:	30 2a       	mov	r10,2
80015d96:	fe 7c 38 00 	mov	r12,-51200
80015d9a:	f0 16 00 61 	mcall	r6[388]
	return result;
80015d9e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80015da2:	10 9c       	mov	r12,r8
80015da4:	2f ed       	sub	sp,-8
80015da6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015daa:	00 00       	add	r0,r0
80015dac:	80 01       	ld.sh	r1,r0[0x0]
80015dae:	5b f6       	cp.w	r6,-1

80015db0 <init_bmp085>:

void init_bmp085(){
80015db0:	eb cd 40 c0 	pushm	r6-r7,lr
80015db4:	1a 97       	mov	r7,sp
80015db6:	20 1d       	sub	sp,4
80015db8:	49 36       	lddpc	r6,80015e04 <init_bmp085+0x54>
80015dba:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80015dbc:	ec f8 00 48 	ld.w	r8,r6[72]
80015dc0:	30 09       	mov	r9,0
80015dc2:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80015dc4:	30 08       	mov	r8,0
80015dc6:	ef 48 ff fc 	st.w	r7[-4],r8
80015dca:	c0 e8       	rjmp	80015de6 <init_bmp085+0x36>
80015dcc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015dd0:	ec f8 00 48 	ld.w	r8,r6[72]
80015dd4:	2f c9       	sub	r9,-4
80015dd6:	30 0a       	mov	r10,0
80015dd8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015ddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015de0:	2f f8       	sub	r8,-1
80015de2:	ef 48 ff fc 	st.w	r7[-4],r8
80015de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015dea:	58 28       	cp.w	r8,2
80015dec:	fe 9a ff f0 	brle	80015dcc <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80015df0:	ec f8 00 48 	ld.w	r8,r6[72]
80015df4:	30 09       	mov	r9,0
80015df6:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80015df8:	f0 16 01 f4 	mcall	r6[2000]
}
80015dfc:	2f fd       	sub	sp,-4
80015dfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015e02:	00 00       	add	r0,r0
80015e04:	80 01       	ld.sh	r1,r0[0x0]
80015e06:	5c 3e       	neg	lr
80015e08:	42 4d       	lddsp	sp,sp[0x90]
80015e0a:	50 38       	stdsp	sp[0xc],r8
80015e0c:	35 2f       	mov	pc,82
80015e0e:	31 38       	mov	r8,19
80015e10:	30 20       	mov	r0,2
80015e12:	70 72       	ld.w	r2,r8[0x1c]
80015e14:	65 73       	ld.w	r3,r2[0x5c]
80015e16:	73 75       	ld.w	r5,r9[0x5c]
80015e18:	72 65       	ld.w	r5,r9[0x18]
80015e1a:	20 73       	sub	r3,7
80015e1c:	65 6e       	ld.w	lr,r2[0x58]
80015e1e:	73 6f       	ld.w	pc,r9[0x58]
80015e20:	72 20       	ld.w	r0,r9[0x8]
80015e22:	66 6f       	ld.w	pc,r3[0x18]
80015e24:	75 6e       	ld.w	lr,r10[0x58]
80015e26:	64 20       	ld.w	r0,r2[0x8]
80015e28:	28 30       	sub	r0,-125
80015e2a:	78 37       	ld.w	r7,r12[0xc]
80015e2c:	37 29       	mov	r9,114
80015e2e:	0a 00       	add	r0,r5
80015e30:	42 4d       	lddsp	sp,sp[0x90]
80015e32:	50 38       	stdsp	sp[0xc],r8
80015e34:	35 2f       	mov	pc,82
80015e36:	31 38       	mov	r8,19
80015e38:	30 20       	mov	r0,2
80015e3a:	70 72       	ld.w	r2,r8[0x1c]
80015e3c:	65 73       	ld.w	r3,r2[0x5c]
80015e3e:	73 75       	ld.w	r5,r9[0x5c]
80015e40:	72 65       	ld.w	r5,r9[0x18]
80015e42:	20 73       	sub	r3,7
80015e44:	65 6e       	ld.w	lr,r2[0x58]
80015e46:	73 6f       	ld.w	pc,r9[0x58]
80015e48:	72 20       	ld.w	r0,r9[0x8]
80015e4a:	6e 6f       	ld.w	pc,r7[0x18]
80015e4c:	74 20       	ld.w	r0,r10[0x8]
80015e4e:	72 65       	ld.w	r5,r9[0x18]
80015e50:	73 70       	ld.w	r0,r9[0x5c]
80015e52:	6f 6e       	ld.w	lr,r7[0x58]
80015e54:	64 69       	ld.w	r9,r2[0x18]
80015e56:	6e 67       	ld.w	r7,r7[0x18]
80015e58:	20 28       	sub	r8,2
80015e5a:	30 78       	mov	r8,7
80015e5c:	37 37       	mov	r7,115
80015e5e:	29 0a       	sub	r10,-112
	...

80015e62 <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
80015e62:	eb cd 40 c0 	pushm	r6-r7,lr
80015e66:	1a 97       	mov	r7,sp
80015e68:	4d 36       	lddpc	r6,80015fb4 <init_bmp085_slow+0x152>
80015e6a:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015e6c:	ec fb 08 e4 	ld.w	r11,r6[2276]
80015e70:	fe 7c 38 00 	mov	r12,-51200
80015e74:	f0 16 00 72 	mcall	r6[456]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80015e78:	37 7b       	mov	r11,119
80015e7a:	fe 7c 38 00 	mov	r12,-51200
80015e7e:	f0 16 01 0a 	mcall	r6[1064]
80015e82:	18 98       	mov	r8,r12
80015e84:	58 08       	cp.w	r8,0
80015e86:	e0 81 00 8f 	brne	80015fa4 <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80015e8a:	fe cc 00 82 	sub	r12,pc,130
80015e8e:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
80015e92:	ec f9 03 40 	ld.w	r9,r6[832]
80015e96:	e0 68 01 98 	mov	r8,408
80015e9a:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80015e9c:	ec f9 03 18 	ld.w	r9,r6[792]
80015ea0:	3b 88       	mov	r8,-72
80015ea2:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
80015ea4:	ec f9 02 a0 	ld.w	r9,r6[672]
80015ea8:	fe 78 c7 d1 	mov	r8,-14383
80015eac:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80015eae:	ec f9 02 fc 	ld.w	r9,r6[764]
80015eb2:	e0 68 7f e5 	mov	r8,32741
80015eb6:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80015eb8:	ec f9 03 1c 	ld.w	r9,r6[796]
80015ebc:	e0 68 7f f5 	mov	r8,32757
80015ec0:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
80015ec2:	ec f9 03 2c 	ld.w	r9,r6[812]
80015ec6:	e0 68 5a 71 	mov	r8,23153
80015eca:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80015ecc:	ec f9 02 d4 	ld.w	r9,r6[724]
80015ed0:	fe 78 dd f9 	mov	r8,-8711
80015ed4:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
80015ed6:	ec f9 03 08 	ld.w	r9,r6[776]
80015eda:	e0 68 0b 34 	mov	r8,2868
80015ede:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80015ee0:	ec f9 03 34 	ld.w	r9,r6[820]
80015ee4:	e0 68 18 2e 	mov	r8,6190
80015ee8:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80015eea:	ec f9 03 54 	ld.w	r9,r6[852]
80015eee:	30 48       	mov	r8,4
80015ef0:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
80015ef2:	e0 6c 00 aa 	mov	r12,170
80015ef6:	f0 16 00 46 	mcall	r6[280]
80015efa:	18 98       	mov	r8,r12
80015efc:	ec f9 03 40 	ld.w	r9,r6[832]
80015f00:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
80015f02:	e0 6c 00 ac 	mov	r12,172
80015f06:	f0 16 00 46 	mcall	r6[280]
80015f0a:	18 98       	mov	r8,r12
80015f0c:	ec f9 03 18 	ld.w	r9,r6[792]
80015f10:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
80015f12:	e0 6c 00 ae 	mov	r12,174
80015f16:	f0 16 00 46 	mcall	r6[280]
80015f1a:	18 98       	mov	r8,r12
80015f1c:	ec f9 02 a0 	ld.w	r9,r6[672]
80015f20:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
80015f22:	e0 6c 00 b0 	mov	r12,176
80015f26:	f0 16 00 46 	mcall	r6[280]
80015f2a:	18 98       	mov	r8,r12
80015f2c:	ec f9 02 fc 	ld.w	r9,r6[764]
80015f30:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
80015f32:	e0 6c 00 b2 	mov	r12,178
80015f36:	f0 16 00 46 	mcall	r6[280]
80015f3a:	18 98       	mov	r8,r12
80015f3c:	ec f9 03 1c 	ld.w	r9,r6[796]
80015f40:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
80015f42:	e0 6c 00 b4 	mov	r12,180
80015f46:	f0 16 00 46 	mcall	r6[280]
80015f4a:	18 98       	mov	r8,r12
80015f4c:	ec f9 03 2c 	ld.w	r9,r6[812]
80015f50:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
80015f52:	e0 6c 00 b6 	mov	r12,182
80015f56:	f0 16 00 46 	mcall	r6[280]
80015f5a:	18 98       	mov	r8,r12
80015f5c:	ec f9 03 34 	ld.w	r9,r6[820]
80015f60:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
80015f62:	e0 6c 00 b8 	mov	r12,184
80015f66:	f0 16 00 46 	mcall	r6[280]
80015f6a:	18 98       	mov	r8,r12
80015f6c:	ec f9 03 54 	ld.w	r9,r6[852]
80015f70:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
80015f72:	e0 6c 00 ba 	mov	r12,186
80015f76:	f0 16 00 46 	mcall	r6[280]
80015f7a:	18 98       	mov	r8,r12
80015f7c:	ec f9 08 20 	ld.w	r9,r6[2080]
80015f80:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
80015f82:	e0 6c 00 bc 	mov	r12,188
80015f86:	f0 16 00 46 	mcall	r6[280]
80015f8a:	18 98       	mov	r8,r12
80015f8c:	ec f9 02 d4 	ld.w	r9,r6[724]
80015f90:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
80015f92:	e0 6c 00 be 	mov	r12,190
80015f96:	f0 16 00 46 	mcall	r6[280]
80015f9a:	18 98       	mov	r8,r12
80015f9c:	ec f9 03 08 	ld.w	r9,r6[776]
80015fa0:	b2 08       	st.h	r9[0x0],r8
80015fa2:	c0 68       	rjmp	80015fae <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
80015fa4:	fe cc 01 74 	sub	r12,pc,372
80015fa8:	f0 16 00 01 	mcall	r6[4]
		return;
80015fac:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80015fae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015fb2:	00 00       	add	r0,r0
80015fb4:	80 01       	ld.sh	r1,r0[0x0]
80015fb6:	5c ee       	tnbz	lr

80015fb8 <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
80015fb8:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80015fbc:	1a 97       	mov	r7,sp
80015fbe:	21 4d       	sub	sp,80
80015fc0:	fe f6 06 2c 	ld.w	r6,pc[1580]
80015fc4:	1e 26       	rsub	r6,pc
80015fc6:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
80015fca:	ec f8 08 e0 	ld.w	r8,r6[2272]
80015fce:	90 08       	ld.sh	r8,r8[0x0]
80015fd0:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
80015fd4:	ec f8 08 dc 	ld.w	r8,r6[2268]
80015fd8:	90 08       	ld.sh	r8,r8[0x0]
80015fda:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80015fde:	e0 78 8b cd 	mov	r8,101325
80015fe2:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
80015fe6:	ec f8 00 48 	ld.w	r8,r6[72]
80015fea:	70 c8       	ld.w	r8,r8[0x30]
80015fec:	58 18       	cp.w	r8,1
80015fee:	c1 50       	breq	80016018 <get_pressure_data_slow+0x60>
80015ff0:	c0 53       	brcs	80015ffa <get_pressure_data_slow+0x42>
80015ff2:	58 28       	cp.w	r8,2
80015ff4:	c3 80       	breq	80016064 <get_pressure_data_slow+0xac>
80015ff6:	e0 8f 02 e9 	bral	800165c8 <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80015ffa:	ee cb 00 48 	sub	r11,r7,72
80015ffe:	30 08       	mov	r8,0
80016000:	37 79       	mov	r9,119
80016002:	30 2a       	mov	r10,2
80016004:	fe 7c 38 00 	mov	r12,-51200
80016008:	f0 16 00 36 	mcall	r6[216]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
8001600c:	ec f8 00 48 	ld.w	r8,r6[72]
80016010:	30 19       	mov	r9,1
80016012:	91 c9       	st.w	r8[0x30],r9
			break;
80016014:	e0 8f 02 da 	bral	800165c8 <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80016018:	3f 68       	mov	r8,-10
8001601a:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
8001601e:	ee cb 00 45 	sub	r11,r7,69
80016022:	30 08       	mov	r8,0
80016024:	37 79       	mov	r9,119
80016026:	30 1a       	mov	r10,1
80016028:	fe 7c 38 00 	mov	r12,-51200
8001602c:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80016030:	ec f8 00 48 	ld.w	r8,r6[72]
80016034:	f0 cb ff fd 	sub	r11,r8,-3
80016038:	30 08       	mov	r8,0
8001603a:	37 79       	mov	r9,119
8001603c:	30 2a       	mov	r10,2
8001603e:	fe 7c 38 00 	mov	r12,-51200
80016042:	f0 16 00 61 	mcall	r6[388]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
80016046:	ee cb 00 4c 	sub	r11,r7,76
8001604a:	30 08       	mov	r8,0
8001604c:	37 79       	mov	r9,119
8001604e:	30 2a       	mov	r10,2
80016050:	fe 7c 38 00 	mov	r12,-51200
80016054:	f0 16 00 36 	mcall	r6[216]
			pressure_outputs.state=GET_PRESSURE;
80016058:	ec f8 00 48 	ld.w	r8,r6[72]
8001605c:	30 29       	mov	r9,2
8001605e:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80016060:	e0 8f 02 b4 	bral	800165c8 <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
80016064:	3f 68       	mov	r8,-10
80016066:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
8001606a:	ee cb 00 45 	sub	r11,r7,69
8001606e:	30 08       	mov	r8,0
80016070:	37 79       	mov	r9,119
80016072:	30 1a       	mov	r10,1
80016074:	fe 7c 38 00 	mov	r12,-51200
80016078:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
8001607c:	30 08       	mov	r8,0
8001607e:	37 79       	mov	r9,119
80016080:	30 3a       	mov	r10,3
80016082:	ec fb 00 48 	ld.w	r11,r6[72]
80016086:	fe 7c 38 00 	mov	r12,-51200
8001608a:	f0 16 00 61 	mcall	r6[388]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
8001608e:	ec f8 00 48 	ld.w	r8,r6[72]
80016092:	11 88       	ld.ub	r8,r8[0x0]
80016094:	f0 09 15 10 	lsl	r9,r8,0x10
80016098:	ec f8 00 48 	ld.w	r8,r6[72]
8001609c:	11 98       	ld.ub	r8,r8[0x1]
8001609e:	a9 68       	lsl	r8,0x8
800160a0:	10 49       	or	r9,r8
800160a2:	ec f8 00 48 	ld.w	r8,r6[72]
800160a6:	11 a8       	ld.ub	r8,r8[0x2]
800160a8:	f3 e8 10 08 	or	r8,r9,r8
800160ac:	a7 88       	lsr	r8,0x6
800160ae:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
800160b2:	ec f8 00 48 	ld.w	r8,r6[72]
800160b6:	11 b8       	ld.ub	r8,r8[0x3]
800160b8:	f0 09 15 08 	lsl	r9,r8,0x8
800160bc:	ec f8 00 48 	ld.w	r8,r6[72]
800160c0:	11 c8       	ld.ub	r8,r8[0x4]
800160c2:	f3 e8 10 08 	or	r8,r9,r8
800160c6:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
800160ca:	ec f8 03 2c 	ld.w	r8,r6[812]
800160ce:	90 08       	ld.sh	r8,r8[0x0]
800160d0:	5c 78       	castu.h	r8
800160d2:	ee f9 ff c8 	ld.w	r9,r7[-56]
800160d6:	10 19       	sub	r9,r8
800160d8:	ec f8 03 1c 	ld.w	r8,r6[796]
800160dc:	90 08       	ld.sh	r8,r8[0x0]
800160de:	5c 78       	castu.h	r8
800160e0:	f2 08 02 48 	mul	r8,r9,r8
800160e4:	10 9c       	mov	r12,r8
800160e6:	f0 16 00 1a 	mcall	r6[104]
800160ea:	30 08       	mov	r8,0
800160ec:	fc 19 40 e0 	movh	r9,0x40e0
800160f0:	f0 16 00 0c 	mcall	r6[48]
800160f4:	14 98       	mov	r8,r10
800160f6:	16 99       	mov	r9,r11
800160f8:	10 9a       	mov	r10,r8
800160fa:	12 9b       	mov	r11,r9
800160fc:	f0 16 00 14 	mcall	r6[80]
80016100:	18 98       	mov	r8,r12
80016102:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
80016106:	ec f8 02 d4 	ld.w	r8,r6[724]
8001610a:	90 08       	ld.sh	r8,r8[0x0]
8001610c:	10 9c       	mov	r12,r8
8001610e:	f0 16 00 1a 	mcall	r6[104]
80016112:	30 08       	mov	r8,0
80016114:	fc 19 40 a0 	movh	r9,0x40a0
80016118:	f0 16 00 03 	mcall	r6[12]
8001611c:	14 98       	mov	r8,r10
8001611e:	16 99       	mov	r9,r11
80016120:	10 92       	mov	r2,r8
80016122:	12 93       	mov	r3,r9
80016124:	ec f8 03 08 	ld.w	r8,r6[776]
80016128:	90 08       	ld.sh	r8,r8[0x0]
8001612a:	10 99       	mov	r9,r8
8001612c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80016130:	f2 08 00 08 	add	r8,r9,r8
80016134:	10 9c       	mov	r12,r8
80016136:	f0 16 00 1a 	mcall	r6[104]
8001613a:	14 98       	mov	r8,r10
8001613c:	16 99       	mov	r9,r11
8001613e:	04 9a       	mov	r10,r2
80016140:	06 9b       	mov	r11,r3
80016142:	f0 16 00 0c 	mcall	r6[48]
80016146:	14 98       	mov	r8,r10
80016148:	16 99       	mov	r9,r11
8001614a:	10 9a       	mov	r10,r8
8001614c:	12 9b       	mov	r11,r9
8001614e:	f0 16 00 14 	mcall	r6[80]
80016152:	18 98       	mov	r8,r12
80016154:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
80016158:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001615c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016160:	f2 08 00 08 	add	r8,r9,r8
80016164:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
80016168:	ee f8 ff d4 	ld.w	r8,r7[-44]
8001616c:	2f 88       	sub	r8,-8
8001616e:	10 9c       	mov	r12,r8
80016170:	f0 16 00 1a 	mcall	r6[104]
80016174:	30 08       	mov	r8,0
80016176:	fc 19 40 30 	movh	r9,0x4030
8001617a:	f0 16 00 0c 	mcall	r6[48]
8001617e:	14 98       	mov	r8,r10
80016180:	16 99       	mov	r9,r11
80016182:	10 9a       	mov	r10,r8
80016184:	12 9b       	mov	r11,r9
80016186:	f0 16 00 08 	mcall	r6[32]
8001618a:	18 99       	mov	r9,r12
8001618c:	ec f8 00 48 	ld.w	r8,r6[72]
80016190:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
80016192:	ec f8 00 48 	ld.w	r8,r6[72]
80016196:	70 38       	ld.w	r8,r8[0xc]
80016198:	fc 1b 41 20 	movh	r11,0x4120
8001619c:	10 9c       	mov	r12,r8
8001619e:	f0 16 00 0a 	mcall	r6[40]
800161a2:	18 98       	mov	r8,r12
800161a4:	10 99       	mov	r9,r8
800161a6:	ec f8 00 48 	ld.w	r8,r6[72]
800161aa:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
800161ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800161b0:	f0 c8 0f a0 	sub	r8,r8,4000
800161b4:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
800161b8:	ec f8 03 54 	ld.w	r8,r6[852]
800161bc:	90 08       	ld.sh	r8,r8[0x0]
800161be:	10 99       	mov	r9,r8
800161c0:	ee fa ff d8 	ld.w	r10,r7[-40]
800161c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800161c8:	f4 08 02 48 	mul	r8,r10,r8
800161cc:	ad 48       	asr	r8,0xc
800161ce:	f2 08 02 48 	mul	r8,r9,r8
800161d2:	ab 58       	asr	r8,0xb
800161d4:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
800161d8:	ec f8 03 18 	ld.w	r8,r6[792]
800161dc:	90 08       	ld.sh	r8,r8[0x0]
800161de:	10 99       	mov	r9,r8
800161e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800161e4:	f2 08 02 48 	mul	r8,r9,r8
800161e8:	ab 58       	asr	r8,0xb
800161ea:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
800161ee:	ee f9 ff dc 	ld.w	r9,r7[-36]
800161f2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800161f6:	f2 08 00 08 	add	r8,r9,r8
800161fa:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
800161fe:	ec f8 03 40 	ld.w	r8,r6[832]
80016202:	90 08       	ld.sh	r8,r8[0x0]
80016204:	f0 09 15 02 	lsl	r9,r8,0x2
80016208:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001620c:	f2 08 00 08 	add	r8,r9,r8
80016210:	a3 68       	lsl	r8,0x2
80016212:	2f e8       	sub	r8,-2
80016214:	f0 c9 ff fd 	sub	r9,r8,-3
80016218:	58 08       	cp.w	r8,0
8001621a:	f2 08 17 50 	movlt	r8,r9
8001621e:	a3 48       	asr	r8,0x2
80016220:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80016224:	ec f8 02 a0 	ld.w	r8,r6[672]
80016228:	90 08       	ld.sh	r8,r8[0x0]
8001622a:	10 99       	mov	r9,r8
8001622c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016230:	f2 08 02 48 	mul	r8,r9,r8
80016234:	ad 58       	asr	r8,0xd
80016236:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
8001623a:	ec f8 03 34 	ld.w	r8,r6[820]
8001623e:	90 08       	ld.sh	r8,r8[0x0]
80016240:	10 99       	mov	r9,r8
80016242:	ee fa ff d8 	ld.w	r10,r7[-40]
80016246:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001624a:	f4 08 02 48 	mul	r8,r10,r8
8001624e:	ad 48       	asr	r8,0xc
80016250:	f2 08 02 48 	mul	r8,r9,r8
80016254:	b1 48       	asr	r8,0x10
80016256:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
8001625a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001625e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016262:	f2 08 00 08 	add	r8,r9,r8
80016266:	2f e8       	sub	r8,-2
80016268:	a3 48       	asr	r8,0x2
8001626a:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
8001626e:	ec f8 02 fc 	ld.w	r8,r6[764]
80016272:	90 08       	ld.sh	r8,r8[0x0]
80016274:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016278:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001627c:	f0 c8 80 00 	sub	r8,r8,-32768
80016280:	f2 08 02 48 	mul	r8,r9,r8
80016284:	af 98       	lsr	r8,0xf
80016286:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
8001628a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001628e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016292:	10 19       	sub	r9,r8
80016294:	e0 68 30 d4 	mov	r8,12500
80016298:	f2 08 02 48 	mul	r8,r9,r8
8001629c:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
800162a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800162a4:	58 08       	cp.w	r8,0
800162a6:	c0 b5       	brlt	800162bc <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
800162a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800162ac:	a1 78       	lsl	r8,0x1
800162ae:	ee f9 ff ec 	ld.w	r9,r7[-20]
800162b2:	f0 09 0d 08 	divu	r8,r8,r9
800162b6:	ef 48 ff e8 	st.w	r7[-24],r8
800162ba:	c0 a8       	rjmp	800162ce <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
800162bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800162c0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800162c4:	f0 09 0d 08 	divu	r8,r8,r9
800162c8:	a1 78       	lsl	r8,0x1
800162ca:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
800162ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800162d2:	f0 09 14 08 	asr	r9,r8,0x8
800162d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800162da:	a9 48       	asr	r8,0x8
800162dc:	f2 08 02 48 	mul	r8,r9,r8
800162e0:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
800162e4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800162e8:	e0 68 0b de 	mov	r8,3038
800162ec:	f2 08 02 48 	mul	r8,r9,r8
800162f0:	b1 48       	asr	r8,0x10
800162f2:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
800162f6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800162fa:	fe 78 e3 43 	mov	r8,-7357
800162fe:	f2 08 02 48 	mul	r8,r9,r8
80016302:	b1 48       	asr	r8,0x10
80016304:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
80016308:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001630c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016310:	f2 08 00 08 	add	r8,r9,r8
80016314:	f0 c8 f1 31 	sub	r8,r8,-3791
80016318:	a5 48       	asr	r8,0x4
8001631a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001631e:	f2 08 00 08 	add	r8,r9,r8
80016322:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
80016326:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001632a:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001632e:	ec f8 00 48 	ld.w	r8,r6[72]
80016332:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80016334:	ec f8 00 48 	ld.w	r8,r6[72]
80016338:	70 78       	ld.w	r8,r8[0x1c]
8001633a:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
8001633e:	ec f8 00 48 	ld.w	r8,r6[72]
80016342:	70 28       	ld.w	r8,r8[0x8]
80016344:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016348:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
8001634c:	12 9b       	mov	r11,r9
8001634e:	10 9c       	mov	r12,r8
80016350:	f0 16 00 0a 	mcall	r6[40]
80016354:	18 98       	mov	r8,r12
80016356:	10 9c       	mov	r12,r8
80016358:	f0 16 00 02 	mcall	r6[8]
8001635c:	e0 68 d1 24 	mov	r8,53540
80016360:	ea 18 28 cb 	orh	r8,0x28cb
80016364:	e0 69 5b 96 	mov	r9,23446
80016368:	ea 19 3f c8 	orh	r9,0x3fc8
8001636c:	f0 16 01 b3 	mcall	r6[1740]
80016370:	14 98       	mov	r8,r10
80016372:	16 99       	mov	r9,r11
80016374:	30 0a       	mov	r10,0
80016376:	fc 1b 3f f0 	movh	r11,0x3ff0
8001637a:	f0 16 00 11 	mcall	r6[68]
8001637e:	14 98       	mov	r8,r10
80016380:	16 99       	mov	r9,r11
80016382:	10 9a       	mov	r10,r8
80016384:	12 9b       	mov	r11,r9
80016386:	30 08       	mov	r8,0
80016388:	e0 69 a5 40 	mov	r9,42304
8001638c:	ea 19 40 e5 	orh	r9,0x40e5
80016390:	f0 16 00 03 	mcall	r6[12]
80016394:	14 98       	mov	r8,r10
80016396:	16 99       	mov	r9,r11
80016398:	10 92       	mov	r2,r8
8001639a:	12 93       	mov	r3,r9
8001639c:	ec f8 00 48 	ld.w	r8,r6[72]
800163a0:	70 88       	ld.w	r8,r8[0x20]
800163a2:	10 9c       	mov	r12,r8
800163a4:	f0 16 00 02 	mcall	r6[8]
800163a8:	14 98       	mov	r8,r10
800163aa:	16 99       	mov	r9,r11
800163ac:	04 9a       	mov	r10,r2
800163ae:	06 9b       	mov	r11,r3
800163b0:	f0 16 00 05 	mcall	r6[20]
800163b4:	14 98       	mov	r8,r10
800163b6:	16 99       	mov	r9,r11
800163b8:	10 9a       	mov	r10,r8
800163ba:	12 9b       	mov	r11,r9
800163bc:	f0 16 00 08 	mcall	r6[32]
800163c0:	18 98       	mov	r8,r12
800163c2:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
800163c6:	30 08       	mov	r8,0
800163c8:	ef 48 ff bc 	st.w	r7[-68],r8
800163cc:	c1 68       	rjmp	800163f8 <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
800163ce:	ee f9 ff bc 	ld.w	r9,r7[-68]
800163d2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163d6:	f0 ca ff ff 	sub	r10,r8,-1
800163da:	ec f8 00 48 	ld.w	r8,r6[72]
800163de:	2f ca       	sub	r10,-4
800163e0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800163e4:	ec f8 00 48 	ld.w	r8,r6[72]
800163e8:	2f c9       	sub	r9,-4
800163ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
800163ee:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163f2:	2f f8       	sub	r8,-1
800163f4:	ef 48 ff bc 	st.w	r7[-68],r8
800163f8:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163fc:	58 18       	cp.w	r8,1
800163fe:	fe 9a ff e8 	brle	800163ce <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
80016402:	ec f8 00 48 	ld.w	r8,r6[72]
80016406:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001640a:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
8001640c:	ec f8 00 48 	ld.w	r8,r6[72]
80016410:	70 6a       	ld.w	r10,r8[0x18]
80016412:	ec f8 00 48 	ld.w	r8,r6[72]
80016416:	70 59       	ld.w	r9,r8[0x14]
80016418:	ec f8 00 48 	ld.w	r8,r6[72]
8001641c:	70 48       	ld.w	r8,r8[0x10]
8001641e:	12 9b       	mov	r11,r9
80016420:	10 9c       	mov	r12,r8
80016422:	fe b0 fc 1a 	rcall	80015c56 <median_filter_3x>
80016426:	18 98       	mov	r8,r12
80016428:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
8001642c:	ec f8 00 48 	ld.w	r8,r6[72]
80016430:	70 78       	ld.w	r8,r8[0x1c]
80016432:	ee f9 ff c0 	ld.w	r9,r7[-64]
80016436:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001643a:	10 9c       	mov	r12,r8
8001643c:	fe b0 fb f0 	rcall	80015c1c <f_abs>
80016440:	18 9a       	mov	r10,r12
80016442:	30 18       	mov	r8,1
80016444:	fc 19 41 70 	movh	r9,0x4170
80016448:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001644c:	e0 8c 00 03 	brvs	80016452 <get_pressure_data_slow+0x49a>
80016450:	c0 25       	brlt	80016454 <get_pressure_data_slow+0x49c>
80016452:	30 08       	mov	r8,0
80016454:	5c 58       	castu.b	r8
80016456:	c3 40       	breq	800164be <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
80016458:	ec f8 00 48 	ld.w	r8,r6[72]
8001645c:	70 78       	ld.w	r8,r8[0x1c]
8001645e:	10 9c       	mov	r12,r8
80016460:	f0 16 00 02 	mcall	r6[8]
80016464:	e0 68 66 66 	mov	r8,26214
80016468:	ea 18 66 66 	orh	r8,0x6666
8001646c:	e0 69 66 66 	mov	r9,26214
80016470:	ea 19 3f ee 	orh	r9,0x3fee
80016474:	f0 16 00 03 	mcall	r6[12]
80016478:	14 98       	mov	r8,r10
8001647a:	16 99       	mov	r9,r11
8001647c:	10 92       	mov	r2,r8
8001647e:	12 93       	mov	r3,r9
80016480:	ee fc ff c0 	ld.w	r12,r7[-64]
80016484:	f0 16 00 02 	mcall	r6[8]
80016488:	e0 68 99 a0 	mov	r8,39328
8001648c:	ea 18 99 99 	orh	r8,0x9999
80016490:	e0 69 99 99 	mov	r9,39321
80016494:	ea 19 3f a9 	orh	r9,0x3fa9
80016498:	f0 16 00 03 	mcall	r6[12]
8001649c:	14 98       	mov	r8,r10
8001649e:	16 99       	mov	r9,r11
800164a0:	04 9a       	mov	r10,r2
800164a2:	06 9b       	mov	r11,r3
800164a4:	f0 16 00 05 	mcall	r6[20]
800164a8:	14 98       	mov	r8,r10
800164aa:	16 99       	mov	r9,r11
800164ac:	10 9a       	mov	r10,r8
800164ae:	12 9b       	mov	r11,r9
800164b0:	f0 16 00 08 	mcall	r6[32]
800164b4:	18 99       	mov	r9,r12
800164b6:	ec f8 00 48 	ld.w	r8,r6[72]
800164ba:	91 79       	st.w	r8[0x1c],r9
800164bc:	c0 68       	rjmp	800164c8 <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
800164be:	ec f8 00 48 	ld.w	r8,r6[72]
800164c2:	ee f9 ff c0 	ld.w	r9,r7[-64]
800164c6:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
800164c8:	f0 16 00 29 	mcall	r6[164]
800164cc:	18 99       	mov	r9,r12
800164ce:	ec f8 00 48 	ld.w	r8,r6[72]
800164d2:	70 a8       	ld.w	r8,r8[0x28]
800164d4:	f2 08 01 08 	sub	r8,r9,r8
800164d8:	10 9c       	mov	r12,r8
800164da:	f0 16 00 52 	mcall	r6[328]
800164de:	30 08       	mov	r8,0
800164e0:	e0 69 84 80 	mov	r9,33920
800164e4:	ea 19 41 2e 	orh	r9,0x412e
800164e8:	f0 16 00 0c 	mcall	r6[48]
800164ec:	14 98       	mov	r8,r10
800164ee:	16 99       	mov	r9,r11
800164f0:	10 9a       	mov	r10,r8
800164f2:	12 9b       	mov	r11,r9
800164f4:	f0 16 00 08 	mcall	r6[32]
800164f8:	18 98       	mov	r8,r12
800164fa:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
800164fe:	ec f8 00 48 	ld.w	r8,r6[72]
80016502:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016506:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
80016508:	ec f8 00 48 	ld.w	r8,r6[72]
8001650c:	70 79       	ld.w	r9,r8[0x1c]
8001650e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016512:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80016516:	ee 18 80 00 	eorh	r8,0x8000
8001651a:	ee fb ff f8 	ld.w	r11,r7[-8]
8001651e:	10 9c       	mov	r12,r8
80016520:	f0 16 00 0a 	mcall	r6[40]
80016524:	18 98       	mov	r8,r12
80016526:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
8001652a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001652e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80016532:	ef 48 ff fc 	st.w	r7[-4],r8
80016536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001653a:	5c 48       	abs	r8
8001653c:	ef 48 ff fc 	st.w	r7[-4],r8
80016540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016544:	59 48       	cp.w	r8,20
80016546:	e0 8a 00 05 	brle	80016550 <get_pressure_data_slow+0x598>
8001654a:	30 08       	mov	r8,0
8001654c:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
80016550:	ec f8 00 48 	ld.w	r8,r6[72]
80016554:	70 98       	ld.w	r8,r8[0x24]
80016556:	10 9c       	mov	r12,r8
80016558:	f0 16 00 02 	mcall	r6[8]
8001655c:	e0 68 66 66 	mov	r8,26214
80016560:	ea 18 66 66 	orh	r8,0x6666
80016564:	e0 69 66 66 	mov	r9,26214
80016568:	ea 19 3f ee 	orh	r9,0x3fee
8001656c:	f0 16 00 03 	mcall	r6[12]
80016570:	14 98       	mov	r8,r10
80016572:	16 99       	mov	r9,r11
80016574:	10 92       	mov	r2,r8
80016576:	12 93       	mov	r3,r9
80016578:	ee fc ff c4 	ld.w	r12,r7[-60]
8001657c:	f0 16 00 02 	mcall	r6[8]
80016580:	e0 68 99 a0 	mov	r8,39328
80016584:	ea 18 99 99 	orh	r8,0x9999
80016588:	e0 69 99 99 	mov	r9,39321
8001658c:	ea 19 3f a9 	orh	r9,0x3fa9
80016590:	f0 16 00 03 	mcall	r6[12]
80016594:	14 98       	mov	r8,r10
80016596:	16 99       	mov	r9,r11
80016598:	04 9a       	mov	r10,r2
8001659a:	06 9b       	mov	r11,r3
8001659c:	f0 16 00 05 	mcall	r6[20]
800165a0:	14 98       	mov	r8,r10
800165a2:	16 99       	mov	r9,r11
800165a4:	10 9a       	mov	r10,r8
800165a6:	12 9b       	mov	r11,r9
800165a8:	f0 16 00 08 	mcall	r6[32]
800165ac:	18 99       	mov	r9,r12
800165ae:	ec f8 00 48 	ld.w	r8,r6[72]
800165b2:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
800165b4:	f0 16 00 29 	mcall	r6[164]
800165b8:	18 99       	mov	r9,r12
800165ba:	ec f8 00 48 	ld.w	r8,r6[72]
800165be:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
800165c0:	ec f8 00 48 	ld.w	r8,r6[72]
800165c4:	30 09       	mov	r9,0
800165c6:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
800165c8:	f0 16 00 29 	mcall	r6[164]
800165cc:	18 99       	mov	r9,r12
800165ce:	ec f8 00 48 	ld.w	r8,r6[72]
800165d2:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
800165d4:	ec f8 00 48 	ld.w	r8,r6[72]
800165d8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800165dc:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
800165de:	ec f8 00 48 	ld.w	r8,r6[72]
}
800165e2:	10 9c       	mov	r12,r8
800165e4:	2e cd       	sub	sp,-80
800165e6:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800165ea:	00 00       	add	r0,r0
800165ec:	80 01       	ld.sh	r1,r0[0x0]
800165ee:	5e 48       	retge	r8

800165f0 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
800165f0:	eb cd 40 c0 	pushm	r6-r7,lr
800165f4:	1a 97       	mov	r7,sp
800165f6:	20 1d       	sub	sp,4
800165f8:	48 d6       	lddpc	r6,8001662c <newValidBarometer+0x3c>
800165fa:	1e 26       	rsub	r6,pc
800165fc:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
80016600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016604:	70 09       	ld.w	r9,r8[0x0]
80016606:	ec f8 00 48 	ld.w	r8,r6[72]
8001660a:	70 a8       	ld.w	r8,r8[0x28]
8001660c:	10 39       	cp.w	r9,r8
8001660e:	c0 92       	brcc	80016620 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
80016610:	ec f8 00 48 	ld.w	r8,r6[72]
80016614:	70 a9       	ld.w	r9,r8[0x28]
80016616:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001661a:	91 09       	st.w	r8[0x0],r9
		return true;
8001661c:	30 18       	mov	r8,1
8001661e:	c0 28       	rjmp	80016622 <newValidBarometer+0x32>
	}else{
		return false;
80016620:	30 08       	mov	r8,0
	}
	
80016622:	10 9c       	mov	r12,r8
80016624:	2f fd       	sub	sp,-4
80016626:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001662a:	00 00       	add	r0,r0
8001662c:	80 01       	ld.sh	r1,r0[0x0]
8001662e:	64 7e       	ld.w	lr,r2[0x1c]

80016630 <init_hmc5883_slow>:
80016630:	eb cd 40 c0 	pushm	r6-r7,lr
80016634:	1a 97       	mov	r7,sp
80016636:	48 a6       	lddpc	r6,8001665c <init_hmc5883_slow+0x2c>
80016638:	1e 26       	rsub	r6,pc
8001663a:	ec fb 08 d8 	ld.w	r11,r6[2264]
8001663e:	fe 7c 38 00 	mov	r12,-51200
80016642:	f0 16 00 72 	mcall	r6[456]
80016646:	30 08       	mov	r8,0
80016648:	31 e9       	mov	r9,30
8001664a:	30 4a       	mov	r10,4
8001664c:	ec fb 08 d4 	ld.w	r11,r6[2260]
80016650:	fe 7c 38 00 	mov	r12,-51200
80016654:	f0 16 00 36 	mcall	r6[216]
80016658:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001665c:	80 01       	ld.sh	r1,r0[0x0]
8001665e:	64 bc       	ld.w	r12,r2[0x2c]

80016660 <get_compass_data_slow>:
80016660:	eb cd 40 c0 	pushm	r6-r7,lr
80016664:	1a 97       	mov	r7,sp
80016666:	20 2d       	sub	sp,8
80016668:	4a 76       	lddpc	r6,80016704 <get_compass_data_slow+0xa4>
8001666a:	1e 26       	rsub	r6,pc
8001666c:	30 38       	mov	r8,3
8001666e:	ef 68 ff fb 	st.b	r7[-5],r8
80016672:	ee cb 00 05 	sub	r11,r7,5
80016676:	30 08       	mov	r8,0
80016678:	31 e9       	mov	r9,30
8001667a:	30 1a       	mov	r10,1
8001667c:	fe 7c 38 00 	mov	r12,-51200
80016680:	f0 16 00 36 	mcall	r6[216]
80016684:	ec fb 02 14 	ld.w	r11,r6[532]
80016688:	30 08       	mov	r8,0
8001668a:	31 e9       	mov	r9,30
8001668c:	30 6a       	mov	r10,6
8001668e:	fe 7c 38 00 	mov	r12,-51200
80016692:	f0 16 00 61 	mcall	r6[388]
80016696:	30 08       	mov	r8,0
80016698:	ef 48 ff fc 	st.w	r7[-4],r8
8001669c:	c2 98       	rjmp	800166ee <get_compass_data_slow+0x8e>
8001669e:	ee fb ff fc 	ld.w	r11,r7[-4]
800166a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166a6:	a1 78       	lsl	r8,0x1
800166a8:	ec f9 02 14 	ld.w	r9,r6[532]
800166ac:	f2 08 07 08 	ld.ub	r8,r9[r8]
800166b0:	5c 58       	castu.b	r8
800166b2:	a9 68       	lsl	r8,0x8
800166b4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800166b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166bc:	a1 78       	lsl	r8,0x1
800166be:	2f f8       	sub	r8,-1
800166c0:	ec fa 02 14 	ld.w	r10,r6[532]
800166c4:	f4 08 07 08 	ld.ub	r8,r10[r8]
800166c8:	5c 58       	castu.b	r8
800166ca:	f2 08 00 08 	add	r8,r9,r8
800166ce:	5c 88       	casts.h	r8
800166d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800166d4:	ec fa 02 14 	ld.w	r10,r6[532]
800166d8:	f6 c8 ff fe 	sub	r8,r11,-2
800166dc:	a1 78       	lsl	r8,0x1
800166de:	f4 08 00 08 	add	r8,r10,r8
800166e2:	b0 19       	st.h	r8[0x2],r9
800166e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166e8:	2f f8       	sub	r8,-1
800166ea:	ef 48 ff fc 	st.w	r7[-4],r8
800166ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166f2:	58 28       	cp.w	r8,2
800166f4:	fe 9a ff d5 	brle	8001669e <get_compass_data_slow+0x3e>
800166f8:	ec f8 02 14 	ld.w	r8,r6[532]
800166fc:	10 9c       	mov	r12,r8
800166fe:	2f ed       	sub	sp,-8
80016700:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016704:	80 01       	ld.sh	r1,r0[0x0]
80016706:	64 ee       	ld.w	lr,r2[0x38]

80016708 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
80016708:	eb cd 40 c0 	pushm	r6-r7,lr
8001670c:	1a 97       	mov	r7,sp
8001670e:	49 a6       	lddpc	r6,80016774 <pdca_int_handler_dac+0x6c>
80016710:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
80016712:	fc 78 00 00 	mov	r8,-196608
80016716:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
8001671a:	ec f8 04 d8 	ld.w	r8,r6[1240]
8001671e:	70 08       	ld.w	r8,r8[0x0]
80016720:	58 08       	cp.w	r8,0
80016722:	c0 81       	brne	80016732 <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
80016724:	30 4c       	mov	r12,4
80016726:	f0 16 00 80 	mcall	r6[512]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001672a:	30 4c       	mov	r12,4
8001672c:	f0 16 00 9a 	mcall	r6[616]
80016730:	c1 f8       	rjmp	8001676e <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
80016732:	ec f8 02 88 	ld.w	r8,r6[648]
80016736:	90 08       	ld.sh	r8,r8[0x0]
80016738:	5c 88       	casts.h	r8
8001673a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001673e:	ec f8 01 94 	ld.w	r8,r6[404]
80016742:	90 08       	ld.sh	r8,r8[0x0]
80016744:	5c 88       	casts.h	r8
80016746:	5c 78       	castu.h	r8
80016748:	f2 08 01 08 	sub	r8,r9,r8
8001674c:	10 99       	mov	r9,r8
8001674e:	ec f8 03 68 	ld.w	r8,r6[872]
80016752:	70 0a       	ld.w	r10,r8[0x0]
80016754:	ec f8 01 94 	ld.w	r8,r6[404]
80016758:	90 08       	ld.sh	r8,r8[0x0]
8001675a:	5c 88       	casts.h	r8
8001675c:	5c 78       	castu.h	r8
8001675e:	a1 78       	lsl	r8,0x1
80016760:	f4 08 00 08 	add	r8,r10,r8
80016764:	12 9a       	mov	r10,r9
80016766:	10 9b       	mov	r11,r8
80016768:	30 4c       	mov	r12,4
8001676a:	f0 16 01 04 	mcall	r6[1040]
	}	   
		
}
8001676e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016772:	d6 03       	rete
80016774:	80 01       	ld.sh	r1,r0[0x0]
80016776:	65 94       	ld.w	r4,r2[0x64]

80016778 <init_pevc>:


void init_pevc(void)
{
80016778:	eb cd 40 c0 	pushm	r6-r7,lr
8001677c:	1a 97       	mov	r7,sp
8001677e:	48 c6       	lddpc	r6,800167ac <init_pevc+0x34>
80016780:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
80016782:	ec f8 03 a0 	ld.w	r8,r6[928]
80016786:	70 08       	ld.w	r8,r8[0x0]
80016788:	ec f9 08 d0 	ld.w	r9,r6[2256]
8001678c:	31 0a       	mov	r10,16
8001678e:	30 2b       	mov	r11,2
80016790:	10 9c       	mov	r12,r8
80016792:	f0 16 01 a9 	mcall	r6[1700]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
80016796:	ec f8 03 a0 	ld.w	r8,r6[928]
8001679a:	70 08       	ld.w	r8,r8[0x0]
8001679c:	30 4a       	mov	r10,4
8001679e:	30 0b       	mov	r11,0
800167a0:	10 9c       	mov	r12,r8
800167a2:	f0 16 01 43 	mcall	r6[1292]
}
800167a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167aa:	00 00       	add	r0,r0
800167ac:	80 01       	ld.sh	r1,r0[0x0]
800167ae:	66 04       	ld.w	r4,r3[0x0]

800167b0 <init_gclk>:

void init_gclk(void)
{
800167b0:	eb cd 40 c0 	pushm	r6-r7,lr
800167b4:	1a 97       	mov	r7,sp
800167b6:	48 76       	lddpc	r6,800167d0 <init_gclk+0x20>
800167b8:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
800167ba:	30 a9       	mov	r9,10
800167bc:	30 1a       	mov	r10,1
800167be:	30 0b       	mov	r11,0
800167c0:	30 7c       	mov	r12,7
800167c2:	f0 16 02 04 	mcall	r6[2064]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
800167c6:	30 7c       	mov	r12,7
800167c8:	f0 16 01 f9 	mcall	r6[2020]
}
800167cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167d0:	80 01       	ld.sh	r1,r0[0x0]
800167d2:	66 3c       	ld.w	r12,r3[0xc]
800167d4:	65 72       	ld.w	r2,r2[0x5c]
800167d6:	72 6f       	ld.w	pc,r9[0x18]
800167d8:	72 20       	ld.w	r0,r9[0x8]
800167da:	63 6f       	ld.w	pc,r1[0x58]
800167dc:	6e 66       	ld.w	r6,r7[0x18]
800167de:	69 67       	ld.w	r7,r4[0x58]
800167e0:	75 72       	ld.w	r2,r10[0x5c]
800167e2:	69 6e       	ld.w	lr,r4[0x58]
800167e4:	67 20       	ld.w	r0,r3[0x48]
800167e6:	44 41       	lddsp	r1,sp[0x110]
800167e8:	43 00       	lddsp	r0,sp[0xc0]
800167ea:	00 00       	add	r0,r0
800167ec:	65 72       	ld.w	r2,r2[0x5c]
800167ee:	72 6f       	ld.w	pc,r9[0x18]
800167f0:	72 20       	ld.w	r0,r9[0x8]
800167f2:	63 6f       	ld.w	pc,r1[0x58]
800167f4:	6e 66       	ld.w	r6,r7[0x18]
800167f6:	69 67       	ld.w	r7,r4[0x58]
800167f8:	75 72       	ld.w	r2,r10[0x5c]
800167fa:	69 6e       	ld.w	lr,r4[0x58]
800167fc:	67 20       	ld.w	r0,r3[0x48]
800167fe:	44 41       	lddsp	r1,sp[0x110]
80016800:	43 20       	lddsp	r0,sp[0xc8]
80016802:	63 68       	ld.w	r8,r1[0x58]
80016804:	61 6e       	ld.w	lr,r0[0x58]
80016806:	6e 65       	ld.w	r5,r7[0x18]
80016808:	6c 00       	ld.w	r0,r6[0x0]

8001680a <Init_DAC>:



void Init_DAC(int trigger_mode) {
8001680a:	eb cd 40 c0 	pushm	r6-r7,lr
8001680e:	1a 97       	mov	r7,sp
80016810:	20 6d       	sub	sp,24
80016812:	4b 36       	lddpc	r6,800168dc <Init_DAC+0xd2>
80016814:	1e 26       	rsub	r6,pc
80016816:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
8001681a:	ec f8 08 cc 	ld.w	r8,r6[2252]
8001681e:	ee ca 00 0c 	sub	r10,r7,12
80016822:	10 9b       	mov	r11,r8
80016824:	f6 e8 00 00 	ld.d	r8,r11[0]
80016828:	f4 e9 00 00 	st.d	r10[0],r8
8001682c:	76 28       	ld.w	r8,r11[0x8]
8001682e:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80016830:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016834:	5c 58       	castu.b	r8
80016836:	30 19       	mov	r9,1
80016838:	ef 69 ff ef 	st.b	r7[-17],r9
8001683c:	ef 68 ff f0 	st.b	r7[-16],r8
80016840:	30 08       	mov	r8,0
80016842:	ef 68 ff f1 	st.b	r7[-15],r8
80016846:	30 08       	mov	r8,0
80016848:	ef 68 ff f2 	st.b	r7[-14],r8
8001684c:	30 08       	mov	r8,0
8001684e:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80016852:	30 4b       	mov	r11,4
80016854:	ec fc 08 c8 	ld.w	r12,r6[2248]
80016858:	f0 16 00 94 	mcall	r6[592]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
8001685c:	ec f8 02 6c 	ld.w	r8,r6[620]
80016860:	70 08       	ld.w	r8,r8[0x0]
80016862:	ee c9 00 0c 	sub	r9,r7,12
80016866:	e0 6a 24 00 	mov	r10,9216
8001686a:	ea 1a 00 f4 	orh	r10,0xf4
8001686e:	12 9b       	mov	r11,r9
80016870:	10 9c       	mov	r12,r8
80016872:	f0 16 01 77 	mcall	r6[1500]
80016876:	18 98       	mov	r8,r12
80016878:	58 08       	cp.w	r8,0
8001687a:	c0 61       	brne	80016886 <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
8001687c:	fe cc 00 a8 	sub	r12,pc,168
80016880:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016884:	c0 08       	rjmp	80016884 <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
80016886:	ec f8 03 ac 	ld.w	r8,r6[940]
8001688a:	11 88       	ld.ub	r8,r8[0x0]
8001688c:	10 9b       	mov	r11,r8
8001688e:	ec f8 02 6c 	ld.w	r8,r6[620]
80016892:	70 08       	ld.w	r8,r8[0x0]
80016894:	ee ca 00 11 	sub	r10,r7,17
80016898:	e0 69 4b 40 	mov	r9,19264
8001689c:	ea 19 00 4c 	orh	r9,0x4c
800168a0:	10 9c       	mov	r12,r8
800168a2:	f0 16 01 b6 	mcall	r6[1752]
800168a6:	18 98       	mov	r8,r12
800168a8:	58 08       	cp.w	r8,0
800168aa:	c0 61       	brne	800168b6 <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
800168ac:	fe cc 00 c0 	sub	r12,pc,192
800168b0:	f0 16 00 01 	mcall	r6[4]
				while (1);
800168b4:	c0 08       	rjmp	800168b4 <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
800168b6:	ec f8 03 ac 	ld.w	r8,r6[940]
800168ba:	11 88       	ld.ub	r8,r8[0x0]
800168bc:	10 99       	mov	r9,r8
800168be:	ec f8 02 6c 	ld.w	r8,r6[620]
800168c2:	70 08       	ld.w	r8,r8[0x0]
800168c4:	e0 6a 24 00 	mov	r10,9216
800168c8:	ea 1a 00 f4 	orh	r10,0xf4
800168cc:	12 9b       	mov	r11,r9
800168ce:	10 9c       	mov	r12,r8
800168d0:	f0 16 01 4e 	mcall	r6[1336]
                       dac_channel_audio,
                       FOSC0);


}
800168d4:	2f ad       	sub	sp,-24
800168d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168da:	00 00       	add	r0,r0
800168dc:	80 01       	ld.sh	r1,r0[0x0]
800168de:	66 98       	ld.w	r8,r3[0x24]

800168e0 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
800168e0:	eb cd 40 c0 	pushm	r6-r7,lr
800168e4:	1a 97       	mov	r7,sp
800168e6:	20 4d       	sub	sp,16
800168e8:	4a a6       	lddpc	r6,80016990 <DAC_load_buffer+0xb0>
800168ea:	1e 26       	rsub	r6,pc
800168ec:	ef 4c ff fc 	st.w	r7[-4],r12
800168f0:	ef 4b ff f8 	st.w	r7[-8],r11
800168f4:	ef 4a ff f4 	st.w	r7[-12],r10
800168f8:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
800168fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016900:	ec f8 03 68 	ld.w	r8,r6[872]
80016904:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
80016906:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001690a:	5c 88       	casts.h	r8
8001690c:	ec f9 01 94 	ld.w	r9,r6[404]
80016910:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
80016912:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016916:	5c 88       	casts.h	r8
80016918:	ec f9 02 88 	ld.w	r9,r6[648]
8001691c:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
8001691e:	ec f8 01 94 	ld.w	r8,r6[404]
80016922:	90 08       	ld.sh	r8,r8[0x0]
80016924:	5c 88       	casts.h	r8
80016926:	5c 78       	castu.h	r8
80016928:	a1 78       	lsl	r8,0x1
8001692a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001692e:	10 09       	add	r9,r8
80016930:	ec f8 03 64 	ld.w	r8,r6[868]
80016934:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
80016936:	ec f8 02 88 	ld.w	r8,r6[648]
8001693a:	90 08       	ld.sh	r8,r8[0x0]
8001693c:	5c 88       	casts.h	r8
8001693e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016942:	ec f8 01 94 	ld.w	r8,r6[404]
80016946:	90 08       	ld.sh	r8,r8[0x0]
80016948:	5c 88       	casts.h	r8
8001694a:	5c 78       	castu.h	r8
8001694c:	f2 08 01 08 	sub	r8,r9,r8
80016950:	10 99       	mov	r9,r8
80016952:	ec f8 03 64 	ld.w	r8,r6[868]
80016956:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
80016958:	f0 16 01 d9 	mcall	r6[1892]
  // Initialize Generic Clock
  init_gclk();
8001695c:	f0 16 01 cc 	mcall	r6[1840]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80016960:	ec fb 03 64 	ld.w	r11,r6[868]
80016964:	30 4c       	mov	r12,4
80016966:	f0 16 00 77 	mcall	r6[476]

  autoplay=repeat;
8001696a:	ec f8 04 d8 	ld.w	r8,r6[1240]
8001696e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016972:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
80016974:	30 0a       	mov	r10,0
80016976:	e0 6b 00 80 	mov	r11,128
8001697a:	fe cc 02 72 	sub	r12,pc,626
8001697e:	f0 16 00 3b 	mcall	r6[236]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016982:	30 4c       	mov	r12,4
80016984:	f0 16 00 b8 	mcall	r6[736]
  //}  
} 
80016988:	2f cd       	sub	sp,-16
8001698a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001698e:	00 00       	add	r0,r0
80016990:	80 01       	ld.sh	r1,r0[0x0]
80016992:	67 6e       	ld.w	lr,r3[0x58]

80016994 <DAC_play>:

void DAC_play() {
80016994:	eb cd 40 c0 	pushm	r6-r7,lr
80016998:	1a 97       	mov	r7,sp
8001699a:	49 56       	lddpc	r6,800169ec <DAC_play+0x58>
8001699c:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
8001699e:	30 4c       	mov	r12,4
800169a0:	f0 16 00 80 	mcall	r6[512]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
800169a4:	ec f8 02 88 	ld.w	r8,r6[648]
800169a8:	90 08       	ld.sh	r8,r8[0x0]
800169aa:	5c 88       	casts.h	r8
800169ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800169b0:	ec f8 01 94 	ld.w	r8,r6[404]
800169b4:	90 08       	ld.sh	r8,r8[0x0]
800169b6:	5c 88       	casts.h	r8
800169b8:	5c 78       	castu.h	r8
800169ba:	f2 08 01 08 	sub	r8,r9,r8
800169be:	10 99       	mov	r9,r8
800169c0:	ec f8 03 68 	ld.w	r8,r6[872]
800169c4:	70 0a       	ld.w	r10,r8[0x0]
800169c6:	ec f8 01 94 	ld.w	r8,r6[404]
800169ca:	90 08       	ld.sh	r8,r8[0x0]
800169cc:	5c 88       	casts.h	r8
800169ce:	5c 78       	castu.h	r8
800169d0:	a1 78       	lsl	r8,0x1
800169d2:	f4 08 00 08 	add	r8,r10,r8
800169d6:	12 9a       	mov	r10,r9
800169d8:	10 9b       	mov	r11,r8
800169da:	30 4c       	mov	r12,4
800169dc:	f0 16 01 04 	mcall	r6[1040]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
800169e0:	30 4c       	mov	r12,4
800169e2:	f0 16 00 92 	mcall	r6[584]

  
}
800169e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800169ea:	00 00       	add	r0,r0
800169ec:	80 01       	ld.sh	r1,r0[0x0]
800169ee:	68 20       	ld.w	r0,r4[0x8]

800169f0 <DAC_pause>:

void DAC_pause(void) {
800169f0:	eb cd 40 80 	pushm	r7,lr
800169f4:	1a 97       	mov	r7,sp

}
800169f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800169fa <DAC_resume>:

void DAC_resume(void) {
800169fa:	eb cd 40 80 	pushm	r7,lr
800169fe:	1a 97       	mov	r7,sp

}
80016a00:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a04 <DAC_is_finished>:

int  DAC_is_finished(void) {
80016a04:	eb cd 40 80 	pushm	r7,lr
80016a08:	1a 97       	mov	r7,sp
	return 0;
80016a0a:	30 08       	mov	r8,0
}
80016a0c:	10 9c       	mov	r12,r8
80016a0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a12 <DAC_set_value>:

void DAC_set_value(int32_t output) {
80016a12:	eb cd 40 c0 	pushm	r6-r7,lr
80016a16:	1a 97       	mov	r7,sp
80016a18:	20 1d       	sub	sp,4
80016a1a:	48 76       	lddpc	r6,80016a34 <DAC_set_value+0x22>
80016a1c:	1e 26       	rsub	r6,pc
80016a1e:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
80016a22:	ec f8 02 6c 	ld.w	r8,r6[620]
80016a26:	70 08       	ld.w	r8,r8[0x0]
80016a28:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016a2c:	91 b9       	st.w	r8[0x2c],r9
}
80016a2e:	2f fd       	sub	sp,-4
80016a30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a34:	80 01       	ld.sh	r1,r0[0x0]
80016a36:	68 a0       	ld.w	r0,r4[0x28]

80016a38 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80016a38:	eb cd 40 80 	pushm	r7,lr
80016a3c:	1a 97       	mov	r7,sp
80016a3e:	20 1d       	sub	sp,4
80016a40:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80016a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016a48:	e6 18 00 01 	andh	r8,0x1,COH
80016a4c:	5f 08       	sreq	r8
80016a4e:	5c 58       	castu.b	r8
}
80016a50:	10 9c       	mov	r12,r8
80016a52:	2f fd       	sub	sp,-4
80016a54:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a58 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80016a58:	eb cd 40 80 	pushm	r7,lr
80016a5c:	1a 97       	mov	r7,sp
80016a5e:	20 1d       	sub	sp,4
80016a60:	18 98       	mov	r8,r12
80016a62:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80016a66:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016a6a:	58 38       	cp.w	r8,3
80016a6c:	c1 20       	breq	80016a90 <osc_get_rate+0x38>
80016a6e:	e0 89 00 07 	brgt	80016a7c <osc_get_rate+0x24>
80016a72:	58 08       	cp.w	r8,0
80016a74:	c0 90       	breq	80016a86 <osc_get_rate+0x2e>
80016a76:	58 28       	cp.w	r8,2
80016a78:	c0 f0       	breq	80016a96 <osc_get_rate+0x3e>
80016a7a:	c1 b8       	rjmp	80016ab0 <osc_get_rate+0x58>
80016a7c:	58 48       	cp.w	r8,4
80016a7e:	c1 10       	breq	80016aa0 <osc_get_rate+0x48>
80016a80:	58 58       	cp.w	r8,5
80016a82:	c1 40       	breq	80016aaa <osc_get_rate+0x52>
80016a84:	c1 68       	rjmp	80016ab0 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80016a86:	e0 68 24 00 	mov	r8,9216
80016a8a:	ea 18 00 f4 	orh	r8,0xf4
80016a8e:	c1 28       	rjmp	80016ab2 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80016a90:	e0 68 80 00 	mov	r8,32768
80016a94:	c0 f8       	rjmp	80016ab2 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80016a96:	e0 68 12 00 	mov	r8,4608
80016a9a:	ea 18 00 7a 	orh	r8,0x7a
80016a9e:	c0 a8       	rjmp	80016ab2 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80016aa0:	e0 68 0e 00 	mov	r8,3584
80016aa4:	ea 18 07 27 	orh	r8,0x727
80016aa8:	c0 58       	rjmp	80016ab2 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80016aaa:	e0 78 c1 38 	mov	r8,115000
80016aae:	c0 28       	rjmp	80016ab2 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80016ab0:	30 08       	mov	r8,0
	}
}
80016ab2:	10 9c       	mov	r12,r8
80016ab4:	2f fd       	sub	sp,-4
80016ab6:	e3 cd 80 80 	ldm	sp++,r7,pc

80016aba <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80016aba:	eb cd 40 c0 	pushm	r6-r7,lr
80016abe:	1a 97       	mov	r7,sp
80016ac0:	48 56       	lddpc	r6,80016ad4 <sysclk_get_main_hz+0x1a>
80016ac2:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80016ac4:	30 0c       	mov	r12,0
80016ac6:	cc 9f       	rcall	80016a58 <osc_get_rate>
80016ac8:	18 98       	mov	r8,r12
80016aca:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80016acc:	10 9c       	mov	r12,r8
80016ace:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ad2:	00 00       	add	r0,r0
80016ad4:	80 01       	ld.sh	r1,r0[0x0]
80016ad6:	69 46       	ld.w	r6,r4[0x50]

80016ad8 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80016ad8:	eb cd 40 c0 	pushm	r6-r7,lr
80016adc:	1a 97       	mov	r7,sp
80016ade:	48 46       	lddpc	r6,80016aec <sysclk_get_pba_hz+0x14>
80016ae0:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80016ae2:	ce cf       	rcall	80016aba <sysclk_get_main_hz>
80016ae4:	18 98       	mov	r8,r12
}
80016ae6:	10 9c       	mov	r12,r8
80016ae8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016aec:	80 01       	ld.sh	r1,r0[0x0]
80016aee:	69 64       	ld.w	r4,r4[0x58]
80016af0:	21 00       	sub	r0,16

80016af2 <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
80016af2:	eb cd 40 c0 	pushm	r6-r7,lr
80016af6:	1a 97       	mov	r7,sp
80016af8:	4a 26       	lddpc	r6,80016b80 <pdca_int_handler_i2c0+0x8e>
80016afa:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80016afc:	fe 78 38 00 	mov	r8,-51200
80016b00:	30 29       	mov	r9,2
80016b02:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
80016b04:	30 2c       	mov	r12,2
80016b06:	f0 16 00 80 	mcall	r6[512]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80016b0a:	30 2c       	mov	r12,2
80016b0c:	f0 16 00 9a 	mcall	r6[616]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80016b10:	ec f8 02 84 	ld.w	r8,r6[644]
80016b14:	11 88       	ld.ub	r8,r8[0x0]
80016b16:	5c 58       	castu.b	r8
80016b18:	10 99       	mov	r9,r8
80016b1a:	ec fa 01 38 	ld.w	r10,r6[312]
80016b1e:	12 98       	mov	r8,r9
80016b20:	a3 68       	lsl	r8,0x2
80016b22:	12 08       	add	r8,r9
80016b24:	a3 78       	lsl	r8,0x3
80016b26:	f4 08 00 08 	add	r8,r10,r8
80016b2a:	f0 c9 ff e0 	sub	r9,r8,-32
80016b2e:	30 08       	mov	r8,0
80016b30:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
80016b32:	ec f8 02 84 	ld.w	r8,r6[644]
80016b36:	11 88       	ld.ub	r8,r8[0x0]
80016b38:	5c 58       	castu.b	r8
80016b3a:	10 99       	mov	r9,r8
80016b3c:	ec fa 01 38 	ld.w	r10,r6[312]
80016b40:	12 98       	mov	r8,r9
80016b42:	a3 68       	lsl	r8,0x2
80016b44:	12 08       	add	r8,r9
80016b46:	a3 78       	lsl	r8,0x3
80016b48:	f4 08 00 08 	add	r8,r10,r8
80016b4c:	2d c8       	sub	r8,-36
80016b4e:	70 08       	ld.w	r8,r8[0x0]
80016b50:	58 08       	cp.w	r8,0
80016b52:	c1 00       	breq	80016b72 <pdca_int_handler_i2c0+0x80>
80016b54:	ec f8 02 84 	ld.w	r8,r6[644]
80016b58:	11 88       	ld.ub	r8,r8[0x0]
80016b5a:	5c 58       	castu.b	r8
80016b5c:	10 99       	mov	r9,r8
80016b5e:	ec fa 01 38 	ld.w	r10,r6[312]
80016b62:	12 98       	mov	r8,r9
80016b64:	a3 68       	lsl	r8,0x2
80016b66:	12 08       	add	r8,r9
80016b68:	a3 78       	lsl	r8,0x3
80016b6a:	f4 08 00 08 	add	r8,r10,r8
80016b6e:	2d c8       	sub	r8,-36
80016b70:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
80016b72:	fe cc 00 82 	sub	r12,pc,130
80016b76:	f0 16 00 01 	mcall	r6[4]
}
80016b7a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016b7e:	d6 03       	rete
80016b80:	80 01       	ld.sh	r1,r0[0x0]
80016b82:	69 7e       	ld.w	lr,r4[0x5c]

80016b84 <init_i2c>:




int init_i2c(unsigned char i2c_device) {
80016b84:	eb cd 40 c0 	pushm	r6-r7,lr
80016b88:	1a 97       	mov	r7,sp
80016b8a:	20 4d       	sub	sp,16
80016b8c:	4c b6       	lddpc	r6,80016cb8 <init_i2c+0x134>
80016b8e:	1e 26       	rsub	r6,pc
80016b90:	18 98       	mov	r8,r12
80016b92:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016b96:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016b9a:	58 08       	cp.w	r8,0
80016b9c:	c0 40       	breq	80016ba4 <init_i2c+0x20>
80016b9e:	58 18       	cp.w	r8,1
80016ba0:	c1 50       	breq	80016bca <init_i2c+0x46>
80016ba2:	c2 d8       	rjmp	80016bfc <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
80016ba4:	fe 78 38 00 	mov	r8,-51200
80016ba8:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
80016bac:	30 0a       	mov	r10,0
80016bae:	36 2b       	mov	r11,98
80016bb0:	fe cc 00 be 	sub	r12,pc,190
80016bb4:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80016bb8:	30 0b       	mov	r11,0
80016bba:	34 3c       	mov	r12,67
80016bbc:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
80016bc0:	30 0b       	mov	r11,0
80016bc2:	34 2c       	mov	r12,66
80016bc4:	f0 16 00 3f 	mcall	r6[252]

	break;
80016bc8:	c1 c8       	rjmp	80016c00 <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80016bca:	fe 78 3c 00 	mov	r8,-50176
80016bce:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
80016bd2:	30 0a       	mov	r10,0
80016bd4:	36 3b       	mov	r11,99
80016bd6:	fe cc 00 e4 	sub	r12,pc,228
80016bda:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80016bde:	30 0b       	mov	r11,0
80016be0:	34 5c       	mov	r12,69
80016be2:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80016be6:	30 0b       	mov	r11,0
80016be8:	34 4c       	mov	r12,68
80016bea:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
80016bee:	34 5c       	mov	r12,69
80016bf0:	f0 16 00 fa 	mcall	r6[1000]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
80016bf4:	34 4c       	mov	r12,68
80016bf6:	f0 16 00 fa 	mcall	r6[1000]
	break;
80016bfa:	c0 38       	rjmp	80016c00 <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80016bfc:	3f f8       	mov	r8,-1
80016bfe:	c5 98       	rjmp	80016cb0 <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016c00:	30 08       	mov	r8,0
80016c02:	ef 48 ff f4 	st.w	r7[-12],r8
80016c06:	c1 b8       	rjmp	80016c3c <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80016c08:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80016c0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016c10:	ec fa 01 38 	ld.w	r10,r6[312]
80016c14:	12 98       	mov	r8,r9
80016c16:	a3 68       	lsl	r8,0x2
80016c18:	12 08       	add	r8,r9
80016c1a:	a3 78       	lsl	r8,0x3
80016c1c:	e0 69 01 90 	mov	r9,400
80016c20:	f6 09 02 49 	mul	r9,r11,r9
80016c24:	12 08       	add	r8,r9
80016c26:	f4 08 00 08 	add	r8,r10,r8
80016c2a:	f0 c9 ff e0 	sub	r9,r8,-32
80016c2e:	3f f8       	mov	r8,-1
80016c30:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016c32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c36:	2f f8       	sub	r8,-1
80016c38:	ef 48 ff f4 	st.w	r7[-12],r8
80016c3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c40:	58 98       	cp.w	r8,9
80016c42:	fe 9a ff e3 	brle	80016c08 <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016c46:	e1 b8 00 00 	mfsr	r8,0x0
80016c4a:	10 9c       	mov	r12,r8
80016c4c:	cf 6e       	rcall	80016a38 <cpu_irq_is_enabled_flags>
80016c4e:	18 98       	mov	r8,r12
80016c50:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016c54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016c58:	30 08       	mov	r8,0
80016c5a:	f0 09 18 00 	cp.b	r9,r8
80016c5e:	c0 20       	breq	80016c62 <init_i2c+0xde>
		cpu_irq_disable ();
80016c60:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016c62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c66:	3f f9       	mov	r9,-1
80016c68:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c6e:	30 19       	mov	r9,1
80016c70:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c76:	e0 69 00 80 	mov	r9,128
80016c7a:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80016c7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016c80:	30 08       	mov	r8,0
80016c82:	f0 09 18 00 	cp.b	r9,r8
80016c86:	c0 20       	breq	80016c8a <init_i2c+0x106>
		cpu_irq_enable ();
80016c88:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016c8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c8e:	3f f9       	mov	r9,-1
80016c90:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
80016c92:	c2 3f       	rcall	80016ad8 <sysclk_get_pba_hz>
80016c94:	18 98       	mov	r8,r12
80016c96:	10 9a       	mov	r10,r8
80016c98:	e0 7b 86 a0 	mov	r11,100000
80016c9c:	ee fc ff f8 	ld.w	r12,r7[-8]
80016ca0:	f0 16 01 32 	mcall	r6[1224]
80016ca4:	18 98       	mov	r8,r12
80016ca6:	5b 88       	cp.w	r8,-8
80016ca8:	c0 31       	brne	80016cae <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
80016caa:	3f 88       	mov	r8,-8
80016cac:	c0 28       	rjmp	80016cb0 <init_i2c+0x12c>
	}
	return STATUS_OK;				
80016cae:	30 08       	mov	r8,0

}
80016cb0:	10 9c       	mov	r12,r8
80016cb2:	2f cd       	sub	sp,-16
80016cb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016cb8:	80 01       	ld.sh	r1,r0[0x0]
80016cba:	6a 12       	ld.w	r2,r5[0x4]

80016cbc <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
80016cbc:	eb cd 40 c0 	pushm	r6-r7,lr
80016cc0:	1a 97       	mov	r7,sp
80016cc2:	20 3d       	sub	sp,12
80016cc4:	4a 26       	lddpc	r6,80016d4c <i2c_reset+0x90>
80016cc6:	1e 26       	rsub	r6,pc
80016cc8:	18 98       	mov	r8,r12
80016cca:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016cce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016cd2:	58 08       	cp.w	r8,0
80016cd4:	c0 40       	breq	80016cdc <i2c_reset+0x20>
80016cd6:	58 18       	cp.w	r8,1
80016cd8:	c0 70       	breq	80016ce6 <i2c_reset+0x2a>
80016cda:	c0 b8       	rjmp	80016cf0 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
80016cdc:	fe 78 38 00 	mov	r8,-51200
80016ce0:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016ce4:	c0 a8       	rjmp	80016cf8 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
80016ce6:	fe 78 3c 00 	mov	r8,-50176
80016cea:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016cee:	c0 58       	rjmp	80016cf8 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
80016cf0:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
80016cf4:	10 9c       	mov	r12,r8
80016cf6:	c2 78       	rjmp	80016d44 <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016cf8:	e1 b8 00 00 	mfsr	r8,0x0
80016cfc:	10 9c       	mov	r12,r8
80016cfe:	c9 de       	rcall	80016a38 <cpu_irq_is_enabled_flags>
80016d00:	18 98       	mov	r8,r12
80016d02:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016d06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016d0a:	30 08       	mov	r8,0
80016d0c:	f0 09 18 00 	cp.b	r9,r8
80016d10:	c0 20       	breq	80016d14 <i2c_reset+0x58>
		cpu_irq_disable ();
80016d12:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016d14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d18:	3f f9       	mov	r9,-1
80016d1a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016d1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d20:	30 19       	mov	r9,1
80016d22:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d28:	e0 69 00 80 	mov	r9,128
80016d2c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80016d2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016d32:	30 08       	mov	r8,0
80016d34:	f0 09 18 00 	cp.b	r9,r8
80016d38:	c0 20       	breq	80016d3c <i2c_reset+0x80>
		cpu_irq_enable ();
80016d3a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016d3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d40:	3f f9       	mov	r9,-1
80016d42:	91 b9       	st.w	r8[0x2c],r9
}
80016d44:	2f dd       	sub	sp,-12
80016d46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d4a:	00 00       	add	r0,r0
80016d4c:	80 01       	ld.sh	r1,r0[0x0]
80016d4e:	6b 4a       	ld.w	r10,r5[0x50]

80016d50 <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016d50:	eb cd 40 c0 	pushm	r6-r7,lr
80016d54:	1a 97       	mov	r7,sp
80016d56:	20 3d       	sub	sp,12
80016d58:	4b f6       	lddpc	r6,80016e54 <i2c_add_request+0x104>
80016d5a:	1e 26       	rsub	r6,pc
80016d5c:	18 98       	mov	r8,r12
80016d5e:	ef 4b ff f4 	st.w	r7[-12],r11
80016d62:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
80016d66:	30 08       	mov	r8,0
80016d68:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
80016d6c:	30 08       	mov	r8,0
80016d6e:	ef 48 ff fc 	st.w	r7[-4],r8
80016d72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d76:	58 98       	cp.w	r8,9
80016d78:	e0 89 00 1b 	brgt	80016dae <i2c_add_request+0x5e>
80016d7c:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016d80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016d84:	ec fa 01 38 	ld.w	r10,r6[312]
80016d88:	12 98       	mov	r8,r9
80016d8a:	a3 68       	lsl	r8,0x2
80016d8c:	12 08       	add	r8,r9
80016d8e:	a3 78       	lsl	r8,0x3
80016d90:	e0 69 01 90 	mov	r9,400
80016d94:	f6 09 02 49 	mul	r9,r11,r9
80016d98:	12 08       	add	r8,r9
80016d9a:	f4 08 00 08 	add	r8,r10,r8
80016d9e:	2e 08       	sub	r8,-32
80016da0:	11 98       	ld.ub	r8,r8[0x1]
80016da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016da6:	2f f8       	sub	r8,-1
80016da8:	ef 48 ff fc 	st.w	r7[-4],r8
80016dac:	ce 3b       	rjmp	80016d72 <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
80016dae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016db2:	58 98       	cp.w	r8,9
80016db4:	e0 89 00 45 	brgt	80016e3e <i2c_add_request+0xee>
		new_event->schedule_slot=i;
80016db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016dbc:	5c 58       	castu.b	r8
80016dbe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016dc2:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
80016dc6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016dca:	30 08       	mov	r8,0
80016dcc:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016dd0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016dd4:	30 18       	mov	r8,1
80016dd6:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016dda:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016dde:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016de2:	ec fa 01 38 	ld.w	r10,r6[312]
80016de6:	12 98       	mov	r8,r9
80016de8:	a3 68       	lsl	r8,0x2
80016dea:	12 08       	add	r8,r9
80016dec:	a3 78       	lsl	r8,0x3
80016dee:	e0 69 01 90 	mov	r9,400
80016df2:	f6 09 02 49 	mul	r9,r11,r9
80016df6:	12 08       	add	r8,r9
80016df8:	f4 08 00 09 	add	r9,r10,r8
80016dfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e00:	12 9a       	mov	r10,r9
80016e02:	10 9b       	mov	r11,r8
80016e04:	f4 c8 00 00 	sub	r8,r10,0
80016e08:	f6 c9 00 00 	sub	r9,r11,0
80016e0c:	72 0c       	ld.w	r12,r9[0x0]
80016e0e:	91 0c       	st.w	r8[0x0],r12
80016e10:	72 1c       	ld.w	r12,r9[0x4]
80016e12:	91 1c       	st.w	r8[0x4],r12
80016e14:	72 2c       	ld.w	r12,r9[0x8]
80016e16:	91 2c       	st.w	r8[0x8],r12
80016e18:	72 39       	ld.w	r9,r9[0xc]
80016e1a:	91 39       	st.w	r8[0xc],r9
80016e1c:	f4 c8 ff f0 	sub	r8,r10,-16
80016e20:	f6 c9 ff f0 	sub	r9,r11,-16
80016e24:	72 0c       	ld.w	r12,r9[0x0]
80016e26:	91 0c       	st.w	r8[0x0],r12
80016e28:	72 1c       	ld.w	r12,r9[0x4]
80016e2a:	91 1c       	st.w	r8[0x4],r12
80016e2c:	72 2c       	ld.w	r12,r9[0x8]
80016e2e:	91 2c       	st.w	r8[0x8],r12
80016e30:	72 39       	ld.w	r9,r9[0xc]
80016e32:	91 39       	st.w	r8[0xc],r9
80016e34:	f6 e8 00 20 	ld.d	r8,r11[32]
80016e38:	f4 e9 00 20 	st.d	r10[32],r8
80016e3c:	c0 48       	rjmp	80016e44 <i2c_add_request+0xf4>
	} else i=-1;
80016e3e:	3f f8       	mov	r8,-1
80016e40:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
80016e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e48:	5c 58       	castu.b	r8
}
80016e4a:	10 9c       	mov	r12,r8
80016e4c:	2f dd       	sub	sp,-12
80016e4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e52:	00 00       	add	r0,r0
80016e54:	80 01       	ld.sh	r1,r0[0x0]
80016e56:	6b de       	ld.w	lr,r5[0x74]

80016e58 <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016e58:	eb cd 40 c0 	pushm	r6-r7,lr
80016e5c:	1a 97       	mov	r7,sp
80016e5e:	20 3d       	sub	sp,12
80016e60:	4a a6       	lddpc	r6,80016f08 <i2c_change_request+0xb0>
80016e62:	1e 26       	rsub	r6,pc
80016e64:	18 98       	mov	r8,r12
80016e66:	ef 4b ff f4 	st.w	r7[-12],r11
80016e6a:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
80016e6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e72:	f1 38 00 18 	ld.ub	r8,r8[24]
80016e76:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
80016e7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e7e:	58 08       	cp.w	r8,0
80016e80:	c4 15       	brlt	80016f02 <i2c_change_request+0xaa>
80016e82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e86:	58 98       	cp.w	r8,9
80016e88:	e0 89 00 3d 	brgt	80016f02 <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
80016e8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e90:	30 08       	mov	r8,0
80016e92:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016e96:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e9a:	30 18       	mov	r8,1
80016e9c:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016ea0:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016ea4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016ea8:	ec fa 01 38 	ld.w	r10,r6[312]
80016eac:	12 98       	mov	r8,r9
80016eae:	a3 68       	lsl	r8,0x2
80016eb0:	12 08       	add	r8,r9
80016eb2:	a3 78       	lsl	r8,0x3
80016eb4:	e0 69 01 90 	mov	r9,400
80016eb8:	f6 09 02 49 	mul	r9,r11,r9
80016ebc:	12 08       	add	r8,r9
80016ebe:	f4 08 00 09 	add	r9,r10,r8
80016ec2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016ec6:	12 9a       	mov	r10,r9
80016ec8:	10 9b       	mov	r11,r8
80016eca:	f4 c8 00 00 	sub	r8,r10,0
80016ece:	f6 c9 00 00 	sub	r9,r11,0
80016ed2:	72 0c       	ld.w	r12,r9[0x0]
80016ed4:	91 0c       	st.w	r8[0x0],r12
80016ed6:	72 1c       	ld.w	r12,r9[0x4]
80016ed8:	91 1c       	st.w	r8[0x4],r12
80016eda:	72 2c       	ld.w	r12,r9[0x8]
80016edc:	91 2c       	st.w	r8[0x8],r12
80016ede:	72 39       	ld.w	r9,r9[0xc]
80016ee0:	91 39       	st.w	r8[0xc],r9
80016ee2:	f4 c8 ff f0 	sub	r8,r10,-16
80016ee6:	f6 c9 ff f0 	sub	r9,r11,-16
80016eea:	72 0c       	ld.w	r12,r9[0x0]
80016eec:	91 0c       	st.w	r8[0x0],r12
80016eee:	72 1c       	ld.w	r12,r9[0x4]
80016ef0:	91 1c       	st.w	r8[0x4],r12
80016ef2:	72 2c       	ld.w	r12,r9[0x8]
80016ef4:	91 2c       	st.w	r8[0x8],r12
80016ef6:	72 39       	ld.w	r9,r9[0xc]
80016ef8:	91 39       	st.w	r8[0xc],r9
80016efa:	f6 e8 00 20 	ld.d	r8,r11[32]
80016efe:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
80016f02:	2f dd       	sub	sp,-12
80016f04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016f08:	80 01       	ld.sh	r1,r0[0x0]
80016f0a:	6c e6       	ld.w	r6,r6[0x38]
80016f0c:	77 72       	ld.w	r2,r11[0x5c]
80016f0e:	00 00       	add	r0,r0
80016f10:	77 00       	ld.w	r0,r11[0x40]

80016f12 <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
80016f12:	eb cd 40 c0 	pushm	r6-r7,lr
80016f16:	1a 97       	mov	r7,sp
80016f18:	20 4d       	sub	sp,16
80016f1a:	fe f6 02 32 	ld.w	r6,pc[562]
80016f1e:	1e 26       	rsub	r6,pc
80016f20:	18 99       	mov	r9,r12
80016f22:	16 98       	mov	r8,r11
80016f24:	ef 69 ff f4 	st.b	r7[-12],r9
80016f28:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
80016f2c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80016f30:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80016f34:	12 98       	mov	r8,r9
80016f36:	a3 68       	lsl	r8,0x2
80016f38:	12 08       	add	r8,r9
80016f3a:	a3 78       	lsl	r8,0x3
80016f3c:	e0 69 01 90 	mov	r9,400
80016f40:	f4 09 02 49 	mul	r9,r10,r9
80016f44:	f0 09 00 09 	add	r9,r8,r9
80016f48:	ec f8 01 38 	ld.w	r8,r6[312]
80016f4c:	f2 08 00 08 	add	r8,r9,r8
80016f50:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
80016f54:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016f58:	58 08       	cp.w	r8,0
80016f5a:	c0 40       	breq	80016f62 <i2c_trigger_request+0x50>
80016f5c:	58 18       	cp.w	r8,1
80016f5e:	c5 90       	breq	80017010 <i2c_trigger_request+0xfe>
80016f60:	c5 d8       	rjmp	8001701a <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
80016f62:	fe 78 38 00 	mov	r8,-51200
80016f66:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016f6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f6e:	30 19       	mov	r9,1
80016f70:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016f72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f76:	e0 69 00 80 	mov	r9,128
80016f7a:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80016f7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f80:	30 29       	mov	r9,2
80016f82:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
80016f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f88:	11 c8       	ld.ub	r8,r8[0x4]
80016f8a:	58 18       	cp.w	r8,1
80016f8c:	c1 b0       	breq	80016fc2 <i2c_trigger_request+0xb0>
80016f8e:	58 28       	cp.w	r8,2
80016f90:	c0 30       	breq	80016f96 <i2c_trigger_request+0x84>
80016f92:	58 08       	cp.w	r8,0
80016f94:	c3 71       	brne	80017002 <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
80016f96:	ec f8 01 5c 	ld.w	r8,r6[348]
80016f9a:	30 69       	mov	r9,6
80016f9c:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
80016f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fa2:	70 49       	ld.w	r9,r8[0x10]
80016fa4:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fa8:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
80016faa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fae:	70 59       	ld.w	r9,r8[0x14]
80016fb0:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fb4:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80016fb6:	ec fb 01 5c 	ld.w	r11,r6[348]
80016fba:	30 2c       	mov	r12,2
80016fbc:	f0 16 00 77 	mcall	r6[476]
			break;
80016fc0:	c2 18       	rjmp	80017002 <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
80016fc2:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fc6:	31 19       	mov	r9,17
80016fc8:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
80016fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fce:	70 29       	ld.w	r9,r8[0x8]
80016fd0:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fd4:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
80016fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fda:	70 39       	ld.w	r9,r8[0xc]
80016fdc:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fe0:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80016fe2:	ec fb 01 5c 	ld.w	r11,r6[348]
80016fe6:	30 2c       	mov	r12,2
80016fe8:	f0 16 00 77 	mcall	r6[476]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
80016fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ff0:	70 39       	ld.w	r9,r8[0xc]
80016ff2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016ff6:	70 28       	ld.w	r8,r8[0x8]
80016ff8:	12 9a       	mov	r10,r9
80016ffa:	10 9b       	mov	r11,r8
80016ffc:	30 2c       	mov	r12,2
80016ffe:	f0 16 00 b9 	mcall	r6[740]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
80017002:	30 2c       	mov	r12,2
80017004:	f0 16 00 b8 	mcall	r6[736]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
80017008:	30 2c       	mov	r12,2
8001700a:	f0 16 02 21 	mcall	r6[2180]
		
		
		break;
8001700e:	c0 98       	rjmp	80017020 <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
80017010:	fe 78 3c 00 	mov	r8,-50176
80017014:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80017018:	c0 48       	rjmp	80017020 <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
8001701a:	e0 68 00 ff 	mov	r8,255
8001701e:	c9 38       	rjmp	80017144 <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
80017020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017024:	11 c8       	ld.ub	r8,r8[0x4]
80017026:	58 18       	cp.w	r8,1
80017028:	c4 40       	breq	800170b0 <i2c_trigger_request+0x19e>
8001702a:	58 28       	cp.w	r8,2
8001702c:	c1 50       	breq	80017056 <i2c_trigger_request+0x144>
8001702e:	58 08       	cp.w	r8,0
80017030:	c6 51       	brne	800170fa <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017032:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017036:	11 88       	ld.ub	r8,r8[0x0]
80017038:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001703a:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8001703c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017040:	70 58       	ld.w	r8,r8[0x14]
80017042:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017044:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017048:	10 99       	mov	r9,r8
8001704a:	e8 19 a0 00 	orl	r9,0xa000
8001704e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017052:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
80017054:	c5 38       	rjmp	800170fa <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
80017056:	fe cc 01 4a 	sub	r12,pc,330
8001705a:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001705e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017062:	11 88       	ld.ub	r8,r8[0x0]
80017064:	a1 78       	lsl	r8,0x1
80017066:	ea 18 00 01 	orh	r8,0x1
8001706a:	e8 18 a0 00 	orl	r8,0xa000
8001706e:	10 99       	mov	r9,r8
80017070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017074:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001707a:	11 88       	ld.ub	r8,r8[0x0]
8001707c:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001707e:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80017080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017084:	70 58       	ld.w	r8,r8[0x14]
80017086:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017088:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001708c:	10 99       	mov	r9,r8
8001708e:	e8 19 a0 00 	orl	r9,0xa000
80017092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017096:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
80017098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001709c:	11 d8       	ld.ub	r8,r8[0x5]
8001709e:	10 99       	mov	r9,r8
800170a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170a4:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
800170a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170aa:	30 19       	mov	r9,1
800170ac:	91 09       	st.w	r8[0x0],r9
			
			break;	
800170ae:	c2 68       	rjmp	800170fa <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
800170b0:	fe cc 01 a0 	sub	r12,pc,416
800170b4:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170bc:	11 88       	ld.ub	r8,r8[0x0]
800170be:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170c0:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800170c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170c6:	70 38       	ld.w	r8,r8[0xc]
800170c8:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170ca:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170ce:	10 99       	mov	r9,r8
800170d0:	e8 19 a0 00 	orl	r9,0xa000
800170d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170d8:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170de:	11 88       	ld.ub	r8,r8[0x0]
800170e0:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800170e2:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800170e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170e8:	70 38       	ld.w	r8,r8[0xc]
800170ea:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800170ec:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170f0:	10 99       	mov	r9,r8
800170f2:	ad b9       	sbr	r9,0xd
800170f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170f8:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
800170fa:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800170fe:	ec fa 02 84 	ld.w	r10,r6[644]
80017102:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80017106:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
8001710a:	ef 3b ff f4 	ld.ub	r11,r7[-12]
8001710e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80017112:	ec fa 01 38 	ld.w	r10,r6[312]
80017116:	12 98       	mov	r8,r9
80017118:	a3 68       	lsl	r8,0x2
8001711a:	12 08       	add	r8,r9
8001711c:	a3 78       	lsl	r8,0x3
8001711e:	e0 69 01 90 	mov	r9,400
80017122:	f6 09 02 49 	mul	r9,r11,r9
80017126:	12 08       	add	r8,r9
80017128:	f4 08 00 08 	add	r8,r10,r8
8001712c:	f0 c9 ff e0 	sub	r9,r8,-32
80017130:	30 18       	mov	r8,1
80017132:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017138:	30 19       	mov	r9,1
8001713a:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
8001713c:	30 2c       	mov	r12,2
8001713e:	f0 16 00 92 	mcall	r6[584]
	return 0;
80017142:	30 08       	mov	r8,0
}
80017144:	10 9c       	mov	r12,r8
80017146:	2f cd       	sub	sp,-16
80017148:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001714c:	80 01       	ld.sh	r1,r0[0x0]
8001714e:	6d a2       	ld.w	r2,r6[0x68]

80017150 <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
80017150:	eb cd 40 80 	pushm	r7,lr
80017154:	1a 97       	mov	r7,sp
80017156:	20 2d       	sub	sp,8
80017158:	18 99       	mov	r9,r12
8001715a:	16 98       	mov	r8,r11
8001715c:	ef 69 ff fc 	st.b	r7[-4],r9
80017160:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
80017164:	2f ed       	sub	sp,-8
80017166:	e3 cd 80 80 	ldm	sp++,r7,pc

8001716a <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
8001716a:	eb cd 40 80 	pushm	r7,lr
8001716e:	1a 97       	mov	r7,sp
80017170:	20 2d       	sub	sp,8
80017172:	18 99       	mov	r9,r12
80017174:	16 98       	mov	r8,r11
80017176:	ef 69 ff fc 	st.b	r7[-4],r9
8001717a:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
8001717e:	30 08       	mov	r8,0
}
80017180:	10 9c       	mov	r12,r8
80017182:	2f ed       	sub	sp,-8
80017184:	e3 cd 80 80 	ldm	sp++,r7,pc

80017188 <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
80017188:	eb cd 40 80 	pushm	r7,lr
8001718c:	1a 97       	mov	r7,sp
8001718e:	20 2d       	sub	sp,8
80017190:	18 99       	mov	r9,r12
80017192:	16 98       	mov	r8,r11
80017194:	ef 69 ff fc 	st.b	r7[-4],r9
80017198:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
8001719c:	30 08       	mov	r8,0
}
8001719e:	10 9c       	mov	r12,r8
800171a0:	2f ed       	sub	sp,-8
800171a2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800171a8 <init_itg3200>:
} gyro_config;

gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;

void init_itg3200(void) {
800171a8:	eb cd 40 c0 	pushm	r6-r7,lr
800171ac:	1a 97       	mov	r7,sp
800171ae:	4b c6       	lddpc	r6,8001729c <init_itg3200+0xf4>
800171b0:	1e 26       	rsub	r6,pc
	default_configuration.conf_start_reg_address=CONFIG_REG_ADDRESS;
800171b2:	ec f9 01 40 	ld.w	r9,r6[320]
800171b6:	31 58       	mov	r8,21
800171b8:	b2 88       	st.b	r9[0x0],r8

	default_configuration.sample_div=4; //output frequency after filtering: 1khz/8khz /(sample_div +1)
800171ba:	ec f9 01 40 	ld.w	r9,r6[320]
800171be:	30 48       	mov	r8,4
800171c0:	b2 98       	st.b	r9[0x1],r8
	default_configuration.DLPF=DLPF_42HZ;
800171c2:	ec f9 01 40 	ld.w	r9,r6[320]
800171c6:	30 38       	mov	r8,3
800171c8:	b2 a8       	st.b	r9[0x2],r8
	default_configuration.interrupts=0;
800171ca:	ec f9 01 40 	ld.w	r9,r6[320]
800171ce:	30 08       	mov	r8,0
800171d0:	b2 b8       	st.b	r9[0x3],r8

	gyro_event.callback=0;
800171d2:	ec f8 00 80 	ld.w	r8,r6[128]
800171d6:	30 09       	mov	r9,0
800171d8:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
800171da:	ec f8 00 80 	ld.w	r8,r6[128]
800171de:	30 59       	mov	r9,5
800171e0:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
800171e2:	ec f9 00 80 	ld.w	r9,r6[128]
800171e6:	3f f8       	mov	r8,-1
800171e8:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ITG3200_SLAVE_ADDRESS;
800171ec:	ec f9 00 80 	ld.w	r9,r6[128]
800171f0:	36 88       	mov	r8,104
800171f2:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
800171f4:	ec f9 00 80 	ld.w	r9,r6[128]
800171f8:	30 18       	mov	r8,1
800171fa:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&gyro_outputs;
800171fe:	ec f9 02 10 	ld.w	r9,r6[528]
80017202:	ec f8 00 80 	ld.w	r8,r6[128]
80017206:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
80017208:	ec f8 00 80 	ld.w	r8,r6[128]
8001720c:	30 89       	mov	r9,8
8001720e:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80017210:	ec f8 00 80 	ld.w	r8,r6[128]
80017214:	ec f9 01 40 	ld.w	r9,r6[320]
80017218:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=4;
8001721a:	ec f8 00 80 	ld.w	r8,r6[128]
8001721e:	30 49       	mov	r9,4
80017220:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=100000;
80017222:	ec f8 00 80 	ld.w	r8,r6[128]
80017226:	e0 79 86 a0 	mov	r9,100000
8001722a:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
8001722c:	ec fb 00 80 	ld.w	r11,r6[128]
80017230:	30 0c       	mov	r12,0
80017232:	f0 16 01 13 	mcall	r6[1100]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80017236:	ec f8 00 80 	ld.w	r8,r6[128]
8001723a:	f1 38 00 24 	ld.ub	r8,r8[36]
8001723e:	10 9b       	mov	r11,r8
80017240:	30 0c       	mov	r12,0
80017242:	f0 16 00 62 	mcall	r6[392]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80017246:	ec f9 00 80 	ld.w	r9,r6[128]
8001724a:	30 28       	mov	r8,2
8001724c:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80017250:	ec f9 00 80 	ld.w	r9,r6[128]
80017254:	31 b8       	mov	r8,27
80017256:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.write_data=&read_preamble;
8001725a:	ec f8 00 80 	ld.w	r8,r6[128]
8001725e:	ec f9 07 b0 	ld.w	r9,r6[1968]
80017262:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=1;
80017264:	ec f8 00 80 	ld.w	r8,r6[128]
80017268:	30 19       	mov	r9,1
8001726a:	91 49       	st.w	r8[0x10],r9
	
	gyro_event.config.read_data=&gyro_outputs;
8001726c:	ec f9 02 10 	ld.w	r9,r6[528]
80017270:	ec f8 00 80 	ld.w	r8,r6[128]
80017274:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
80017276:	ec f8 00 80 	ld.w	r8,r6[128]
8001727a:	30 89       	mov	r9,8
8001727c:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
8001727e:	ec fb 00 80 	ld.w	r11,r6[128]
80017282:	30 0c       	mov	r12,0
80017284:	f0 16 01 14 	mcall	r6[1104]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80017288:	ec f8 00 80 	ld.w	r8,r6[128]
8001728c:	f1 38 00 24 	ld.ub	r8,r8[36]
80017290:	10 9b       	mov	r11,r8
80017292:	30 0c       	mov	r12,0
80017294:	f0 16 00 62 	mcall	r6[392]
	/**/
}
80017298:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001729c:	80 01       	ld.sh	r1,r0[0x0]
8001729e:	70 34       	ld.w	r4,r8[0xc]

800172a0 <reconfigure_gyro>:

void reconfigure_gyro(void) {
800172a0:	eb cd 40 c0 	pushm	r6-r7,lr
800172a4:	1a 97       	mov	r7,sp
800172a6:	48 76       	lddpc	r6,800172c0 <reconfigure_gyro+0x20>
800172a8:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
800172aa:	ec f8 00 80 	ld.w	r8,r6[128]
800172ae:	f1 38 00 24 	ld.ub	r8,r8[36]
800172b2:	10 9b       	mov	r11,r8
800172b4:	30 0c       	mov	r12,0
800172b6:	f0 16 00 62 	mcall	r6[392]
}
800172ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172be:	00 00       	add	r0,r0
800172c0:	80 01       	ld.sh	r1,r0[0x0]
800172c2:	71 2c       	ld.w	r12,r8[0x48]

800172c4 <init_itg3200_slow>:

void init_itg3200_slow(void) {
800172c4:	eb cd 40 c0 	pushm	r6-r7,lr
800172c8:	1a 97       	mov	r7,sp
800172ca:	48 a6       	lddpc	r6,800172f0 <init_itg3200_slow+0x2c>
800172cc:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
800172ce:	ec fb 08 c4 	ld.w	r11,r6[2244]
800172d2:	fe 7c 38 00 	mov	r12,-51200
800172d6:	f0 16 00 72 	mcall	r6[456]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
800172da:	30 08       	mov	r8,0
800172dc:	36 89       	mov	r9,104
800172de:	30 4a       	mov	r10,4
800172e0:	ec fb 01 40 	ld.w	r11,r6[320]
800172e4:	fe 7c 38 00 	mov	r12,-51200
800172e8:	f0 16 00 36 	mcall	r6[216]
}
800172ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172f0:	80 01       	ld.sh	r1,r0[0x0]
800172f2:	71 50       	ld.w	r0,r8[0x54]

800172f4 <get_gyro_data>:

gyro_data* get_gyro_data(void) {
800172f4:	eb cd 40 c0 	pushm	r6-r7,lr
800172f8:	1a 97       	mov	r7,sp
800172fa:	48 86       	lddpc	r6,80017318 <get_gyro_data+0x24>
800172fc:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
800172fe:	ec f8 00 80 	ld.w	r8,r6[128]
80017302:	f1 38 00 24 	ld.ub	r8,r8[36]
80017306:	10 9b       	mov	r11,r8
80017308:	30 0c       	mov	r12,0
8001730a:	f0 16 00 62 	mcall	r6[392]
	return &gyro_outputs;
8001730e:	ec f8 02 10 	ld.w	r8,r6[528]
}
80017312:	10 9c       	mov	r12,r8
80017314:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017318:	80 01       	ld.sh	r1,r0[0x0]
8001731a:	71 80       	ld.w	r0,r8[0x60]

8001731c <get_gyro_data_slow>:

gyro_data* get_gyro_data_slow(void) {
8001731c:	eb cd 40 c0 	pushm	r6-r7,lr
80017320:	1a 97       	mov	r7,sp
80017322:	49 16       	lddpc	r6,80017364 <get_gyro_data_slow+0x48>
80017324:	1e 26       	rsub	r6,pc
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80017326:	ec f9 00 80 	ld.w	r9,r6[128]
8001732a:	31 b8       	mov	r8,27
8001732c:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
80017330:	ec f8 00 80 	ld.w	r8,r6[128]
80017334:	f0 cb ff f7 	sub	r11,r8,-9
80017338:	30 08       	mov	r8,0
8001733a:	36 89       	mov	r9,104
8001733c:	30 1a       	mov	r10,1
8001733e:	fe 7c 38 00 	mov	r12,-51200
80017342:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
80017346:	ec fb 02 10 	ld.w	r11,r6[528]
8001734a:	30 08       	mov	r8,0
8001734c:	36 89       	mov	r9,104
8001734e:	30 8a       	mov	r10,8
80017350:	fe 7c 38 00 	mov	r12,-51200
80017354:	f0 16 00 61 	mcall	r6[388]
	
	
	return &gyro_outputs;
80017358:	ec f8 02 10 	ld.w	r8,r6[528]
8001735c:	10 9c       	mov	r12,r8
8001735e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017362:	00 00       	add	r0,r0
80017364:	80 01       	ld.sh	r1,r0[0x0]
80017366:	71 a8       	ld.w	r8,r8[0x68]

80017368 <LED_Read_Display>:
80017368:	eb cd 40 c0 	pushm	r6-r7,lr
8001736c:	1a 97       	mov	r7,sp
8001736e:	48 56       	lddpc	r6,80017380 <LED_Read_Display+0x18>
80017370:	1e 26       	rsub	r6,pc
80017372:	ec f8 00 f8 	ld.w	r8,r6[248]
80017376:	70 08       	ld.w	r8,r8[0x0]
80017378:	10 9c       	mov	r12,r8
8001737a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001737e:	00 00       	add	r0,r0
80017380:	80 01       	ld.sh	r1,r0[0x0]
80017382:	71 f4       	ld.w	r4,r8[0x7c]

80017384 <LED_Display>:
80017384:	eb cd 40 c0 	pushm	r6-r7,lr
80017388:	1a 97       	mov	r7,sp
8001738a:	20 3d       	sub	sp,12
8001738c:	4a 96       	lddpc	r6,80017430 <LED_Display+0xac>
8001738e:	1e 26       	rsub	r6,pc
80017390:	ef 4c ff f4 	st.w	r7[-12],r12
80017394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017398:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001739c:	ef 48 ff f4 	st.w	r7[-12],r8
800173a0:	ec f8 00 f8 	ld.w	r8,r6[248]
800173a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800173a8:	91 09       	st.w	r8[0x0],r9
800173aa:	ec f8 01 b8 	ld.w	r8,r6[440]
800173ae:	ef 48 ff f8 	st.w	r7[-8],r8
800173b2:	c3 58       	rjmp	8001741c <LED_Display+0x98>
800173b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173b8:	70 08       	ld.w	r8,r8[0x0]
800173ba:	a9 78       	lsl	r8,0x9
800173bc:	e0 28 e0 00 	sub	r8,57344
800173c0:	ef 48 ff fc 	st.w	r7[-4],r8
800173c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800173c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800173cc:	5c 58       	castu.b	r8
800173ce:	c0 90       	breq	800173e0 <LED_Display+0x5c>
800173d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173d4:	70 19       	ld.w	r9,r8[0x4]
800173d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173da:	f1 49 00 58 	st.w	r8[88],r9
800173de:	c0 88       	rjmp	800173ee <LED_Display+0x6a>
800173e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173e4:	70 19       	ld.w	r9,r8[0x4]
800173e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173ea:	f1 49 00 54 	st.w	r8[84],r9
800173ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173f2:	70 19       	ld.w	r9,r8[0x4]
800173f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173f8:	f1 49 00 44 	st.w	r8[68],r9
800173fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017400:	70 19       	ld.w	r9,r8[0x4]
80017402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017406:	91 19       	st.w	r8[0x4],r9
80017408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001740c:	a1 98       	lsr	r8,0x1
8001740e:	ef 48 ff f4 	st.w	r7[-12],r8
80017412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017416:	2f 08       	sub	r8,-16
80017418:	ef 48 ff f8 	st.w	r7[-8],r8
8001741c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017420:	ec f8 01 b8 	ld.w	r8,r6[440]
80017424:	2e 08       	sub	r8,-32
80017426:	10 39       	cp.w	r9,r8
80017428:	cc 63       	brcs	800173b4 <LED_Display+0x30>
8001742a:	2f dd       	sub	sp,-12
8001742c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017430:	80 01       	ld.sh	r1,r0[0x0]
80017432:	72 12       	ld.w	r2,r9[0x4]

80017434 <LED_Read_Display_Mask>:
80017434:	eb cd 40 c0 	pushm	r6-r7,lr
80017438:	1a 97       	mov	r7,sp
8001743a:	20 1d       	sub	sp,4
8001743c:	48 86       	lddpc	r6,8001745c <LED_Read_Display_Mask+0x28>
8001743e:	1e 26       	rsub	r6,pc
80017440:	ef 4c ff fc 	st.w	r7[-4],r12
80017444:	ec f8 00 f8 	ld.w	r8,r6[248]
80017448:	70 09       	ld.w	r9,r8[0x0]
8001744a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001744e:	f3 e8 00 08 	and	r8,r9,r8
80017452:	10 9c       	mov	r12,r8
80017454:	2f fd       	sub	sp,-4
80017456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001745a:	00 00       	add	r0,r0
8001745c:	80 01       	ld.sh	r1,r0[0x0]
8001745e:	72 c2       	ld.w	r2,r9[0x30]

80017460 <LED_Display_Mask>:
80017460:	eb cd 40 c0 	pushm	r6-r7,lr
80017464:	1a 97       	mov	r7,sp
80017466:	20 5d       	sub	sp,20
80017468:	4b f6       	lddpc	r6,80017564 <LED_Display_Mask+0x104>
8001746a:	1e 26       	rsub	r6,pc
8001746c:	ef 4c ff f0 	st.w	r7[-16],r12
80017470:	ef 4b ff ec 	st.w	r7[-20],r11
80017474:	ec f8 01 b8 	ld.w	r8,r6[440]
80017478:	21 08       	sub	r8,16
8001747a:	ef 48 ff f4 	st.w	r7[-12],r8
8001747e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017482:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017486:	ef 48 ff f0 	st.w	r7[-16],r8
8001748a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001748e:	f0 09 11 ff 	rsub	r9,r8,-1
80017492:	ec f8 00 f8 	ld.w	r8,r6[248]
80017496:	70 08       	ld.w	r8,r8[0x0]
80017498:	10 69       	and	r9,r8
8001749a:	ee fa ff ec 	ld.w	r10,r7[-20]
8001749e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174a2:	f5 e8 00 08 	and	r8,r10,r8
800174a6:	10 49       	or	r9,r8
800174a8:	ec f8 00 f8 	ld.w	r8,r6[248]
800174ac:	91 09       	st.w	r8[0x0],r9
800174ae:	c5 38       	rjmp	80017554 <LED_Display_Mask+0xf4>
800174b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174b4:	5c 98       	brev	r8
800174b6:	f0 08 12 00 	clz	r8,r8
800174ba:	5c 58       	castu.b	r8
800174bc:	2f f8       	sub	r8,-1
800174be:	ef 68 ff ff 	st.b	r7[-1],r8
800174c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174c6:	a5 68       	lsl	r8,0x4
800174c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800174cc:	f2 08 00 08 	add	r8,r9,r8
800174d0:	ef 48 ff f4 	st.w	r7[-12],r8
800174d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174d8:	70 08       	ld.w	r8,r8[0x0]
800174da:	a9 78       	lsl	r8,0x9
800174dc:	e0 28 e0 00 	sub	r8,57344
800174e0:	ef 48 ff f8 	st.w	r7[-8],r8
800174e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174e8:	20 18       	sub	r8,1
800174ea:	ee f9 ff ec 	ld.w	r9,r7[-20]
800174ee:	f2 08 0a 48 	lsr	r8,r9,r8
800174f2:	ef 48 ff ec 	st.w	r7[-20],r8
800174f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800174fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800174fe:	5c 58       	castu.b	r8
80017500:	c0 90       	breq	80017512 <LED_Display_Mask+0xb2>
80017502:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017506:	70 19       	ld.w	r9,r8[0x4]
80017508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001750c:	f1 49 00 58 	st.w	r8[88],r9
80017510:	c0 88       	rjmp	80017520 <LED_Display_Mask+0xc0>
80017512:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017516:	70 19       	ld.w	r9,r8[0x4]
80017518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001751c:	f1 49 00 54 	st.w	r8[84],r9
80017520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017524:	70 19       	ld.w	r9,r8[0x4]
80017526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001752a:	f1 49 00 44 	st.w	r8[68],r9
8001752e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017532:	70 19       	ld.w	r9,r8[0x4]
80017534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017538:	91 19       	st.w	r8[0x4],r9
8001753a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001753e:	a1 98       	lsr	r8,0x1
80017540:	ef 48 ff ec 	st.w	r7[-20],r8
80017544:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017548:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001754c:	f2 08 0a 48 	lsr	r8,r9,r8
80017550:	ef 48 ff f0 	st.w	r7[-16],r8
80017554:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017558:	58 08       	cp.w	r8,0
8001755a:	ca b1       	brne	800174b0 <LED_Display_Mask+0x50>
8001755c:	2f bd       	sub	sp,-20
8001755e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017562:	00 00       	add	r0,r0
80017564:	80 01       	ld.sh	r1,r0[0x0]
80017566:	72 ee       	ld.w	lr,r9[0x38]

80017568 <LED_Test>:
80017568:	eb cd 40 c0 	pushm	r6-r7,lr
8001756c:	1a 97       	mov	r7,sp
8001756e:	20 1d       	sub	sp,4
80017570:	48 96       	lddpc	r6,80017594 <LED_Test+0x2c>
80017572:	1e 26       	rsub	r6,pc
80017574:	ef 4c ff fc 	st.w	r7[-4],r12
80017578:	ec f8 00 f8 	ld.w	r8,r6[248]
8001757c:	70 09       	ld.w	r9,r8[0x0]
8001757e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017582:	f3 e8 00 08 	and	r8,r9,r8
80017586:	5f 18       	srne	r8
80017588:	5c 58       	castu.b	r8
8001758a:	10 9c       	mov	r12,r8
8001758c:	2f fd       	sub	sp,-4
8001758e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017592:	00 00       	add	r0,r0
80017594:	80 01       	ld.sh	r1,r0[0x0]
80017596:	73 f6       	ld.w	r6,r9[0x7c]

80017598 <LED_Off>:
80017598:	eb cd 40 c0 	pushm	r6-r7,lr
8001759c:	1a 97       	mov	r7,sp
8001759e:	20 4d       	sub	sp,16
800175a0:	4a b6       	lddpc	r6,8001764c <LED_Off+0xb4>
800175a2:	1e 26       	rsub	r6,pc
800175a4:	ef 4c ff f0 	st.w	r7[-16],r12
800175a8:	ec f8 01 b8 	ld.w	r8,r6[440]
800175ac:	21 08       	sub	r8,16
800175ae:	ef 48 ff f4 	st.w	r7[-12],r8
800175b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175b6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800175ba:	ef 48 ff f0 	st.w	r7[-16],r8
800175be:	ec f8 00 f8 	ld.w	r8,r6[248]
800175c2:	70 09       	ld.w	r9,r8[0x0]
800175c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175c8:	10 49       	or	r9,r8
800175ca:	ec f8 00 f8 	ld.w	r8,r6[248]
800175ce:	91 09       	st.w	r8[0x0],r9
800175d0:	c3 78       	rjmp	8001763e <LED_Off+0xa6>
800175d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175d6:	5c 98       	brev	r8
800175d8:	f0 08 12 00 	clz	r8,r8
800175dc:	5c 58       	castu.b	r8
800175de:	2f f8       	sub	r8,-1
800175e0:	ef 68 ff ff 	st.b	r7[-1],r8
800175e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800175e8:	a5 68       	lsl	r8,0x4
800175ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800175ee:	f2 08 00 08 	add	r8,r9,r8
800175f2:	ef 48 ff f4 	st.w	r7[-12],r8
800175f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175fa:	70 08       	ld.w	r8,r8[0x0]
800175fc:	a9 78       	lsl	r8,0x9
800175fe:	e0 28 e0 00 	sub	r8,57344
80017602:	ef 48 ff f8 	st.w	r7[-8],r8
80017606:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001760a:	70 19       	ld.w	r9,r8[0x4]
8001760c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017610:	f1 49 00 54 	st.w	r8[84],r9
80017614:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017618:	70 19       	ld.w	r9,r8[0x4]
8001761a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001761e:	f1 49 00 44 	st.w	r8[68],r9
80017622:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017626:	70 19       	ld.w	r9,r8[0x4]
80017628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001762c:	91 19       	st.w	r8[0x4],r9
8001762e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017632:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017636:	f2 08 0a 48 	lsr	r8,r9,r8
8001763a:	ef 48 ff f0 	st.w	r7[-16],r8
8001763e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017642:	58 08       	cp.w	r8,0
80017644:	cc 71       	brne	800175d2 <LED_Off+0x3a>
80017646:	2f cd       	sub	sp,-16
80017648:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001764c:	80 01       	ld.sh	r1,r0[0x0]
8001764e:	74 26       	ld.w	r6,r10[0x8]

80017650 <LED_On>:
80017650:	eb cd 40 c0 	pushm	r6-r7,lr
80017654:	1a 97       	mov	r7,sp
80017656:	20 4d       	sub	sp,16
80017658:	4a c6       	lddpc	r6,80017708 <LED_On+0xb8>
8001765a:	1e 26       	rsub	r6,pc
8001765c:	ef 4c ff f0 	st.w	r7[-16],r12
80017660:	ec f8 01 b8 	ld.w	r8,r6[440]
80017664:	21 08       	sub	r8,16
80017666:	ef 48 ff f4 	st.w	r7[-12],r8
8001766a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001766e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017672:	ef 48 ff f0 	st.w	r7[-16],r8
80017676:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001767a:	f0 09 11 ff 	rsub	r9,r8,-1
8001767e:	ec f8 00 f8 	ld.w	r8,r6[248]
80017682:	70 08       	ld.w	r8,r8[0x0]
80017684:	10 69       	and	r9,r8
80017686:	ec f8 00 f8 	ld.w	r8,r6[248]
8001768a:	91 09       	st.w	r8[0x0],r9
8001768c:	c3 78       	rjmp	800176fa <LED_On+0xaa>
8001768e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017692:	5c 98       	brev	r8
80017694:	f0 08 12 00 	clz	r8,r8
80017698:	5c 58       	castu.b	r8
8001769a:	2f f8       	sub	r8,-1
8001769c:	ef 68 ff ff 	st.b	r7[-1],r8
800176a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800176a4:	a5 68       	lsl	r8,0x4
800176a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800176aa:	f2 08 00 08 	add	r8,r9,r8
800176ae:	ef 48 ff f4 	st.w	r7[-12],r8
800176b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176b6:	70 08       	ld.w	r8,r8[0x0]
800176b8:	a9 78       	lsl	r8,0x9
800176ba:	e0 28 e0 00 	sub	r8,57344
800176be:	ef 48 ff f8 	st.w	r7[-8],r8
800176c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176c6:	70 19       	ld.w	r9,r8[0x4]
800176c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176cc:	f1 49 00 58 	st.w	r8[88],r9
800176d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176d4:	70 19       	ld.w	r9,r8[0x4]
800176d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176da:	f1 49 00 44 	st.w	r8[68],r9
800176de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176e2:	70 19       	ld.w	r9,r8[0x4]
800176e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176e8:	91 19       	st.w	r8[0x4],r9
800176ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800176ee:	ee f9 ff f0 	ld.w	r9,r7[-16]
800176f2:	f2 08 0a 48 	lsr	r8,r9,r8
800176f6:	ef 48 ff f0 	st.w	r7[-16],r8
800176fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800176fe:	58 08       	cp.w	r8,0
80017700:	cc 71       	brne	8001768e <LED_On+0x3e>
80017702:	2f cd       	sub	sp,-16
80017704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017708:	80 01       	ld.sh	r1,r0[0x0]
8001770a:	74 de       	ld.w	lr,r10[0x34]

8001770c <LED_Toggle>:
8001770c:	eb cd 40 c0 	pushm	r6-r7,lr
80017710:	1a 97       	mov	r7,sp
80017712:	20 4d       	sub	sp,16
80017714:	4a b6       	lddpc	r6,800177c0 <LED_Toggle+0xb4>
80017716:	1e 26       	rsub	r6,pc
80017718:	ef 4c ff f0 	st.w	r7[-16],r12
8001771c:	ec f8 01 b8 	ld.w	r8,r6[440]
80017720:	21 08       	sub	r8,16
80017722:	ef 48 ff f4 	st.w	r7[-12],r8
80017726:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001772a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001772e:	ef 48 ff f0 	st.w	r7[-16],r8
80017732:	ec f8 00 f8 	ld.w	r8,r6[248]
80017736:	70 09       	ld.w	r9,r8[0x0]
80017738:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001773c:	10 59       	eor	r9,r8
8001773e:	ec f8 00 f8 	ld.w	r8,r6[248]
80017742:	91 09       	st.w	r8[0x0],r9
80017744:	c3 78       	rjmp	800177b2 <LED_Toggle+0xa6>
80017746:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001774a:	5c 98       	brev	r8
8001774c:	f0 08 12 00 	clz	r8,r8
80017750:	5c 58       	castu.b	r8
80017752:	2f f8       	sub	r8,-1
80017754:	ef 68 ff ff 	st.b	r7[-1],r8
80017758:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001775c:	a5 68       	lsl	r8,0x4
8001775e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017762:	f2 08 00 08 	add	r8,r9,r8
80017766:	ef 48 ff f4 	st.w	r7[-12],r8
8001776a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001776e:	70 08       	ld.w	r8,r8[0x0]
80017770:	a9 78       	lsl	r8,0x9
80017772:	e0 28 e0 00 	sub	r8,57344
80017776:	ef 48 ff f8 	st.w	r7[-8],r8
8001777a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001777e:	70 19       	ld.w	r9,r8[0x4]
80017780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017784:	f1 49 00 5c 	st.w	r8[92],r9
80017788:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001778c:	70 19       	ld.w	r9,r8[0x4]
8001778e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017792:	f1 49 00 44 	st.w	r8[68],r9
80017796:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001779a:	70 19       	ld.w	r9,r8[0x4]
8001779c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800177a0:	91 19       	st.w	r8[0x4],r9
800177a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800177a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800177aa:	f2 08 0a 48 	lsr	r8,r9,r8
800177ae:	ef 48 ff f0 	st.w	r7[-16],r8
800177b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800177b6:	58 08       	cp.w	r8,0
800177b8:	cc 71       	brne	80017746 <LED_Toggle+0x3a>
800177ba:	2f cd       	sub	sp,-16
800177bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177c0:	80 01       	ld.sh	r1,r0[0x0]
800177c2:	75 9a       	ld.w	r10,r10[0x64]

800177c4 <LED_Read_Display_Field>:
800177c4:	eb cd 40 c0 	pushm	r6-r7,lr
800177c8:	1a 97       	mov	r7,sp
800177ca:	20 1d       	sub	sp,4
800177cc:	48 b6       	lddpc	r6,800177f8 <LED_Read_Display_Field+0x34>
800177ce:	1e 26       	rsub	r6,pc
800177d0:	ef 4c ff fc 	st.w	r7[-4],r12
800177d4:	ec f8 00 f8 	ld.w	r8,r6[248]
800177d8:	70 09       	ld.w	r9,r8[0x0]
800177da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177de:	10 69       	and	r9,r8
800177e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177e4:	5c 98       	brev	r8
800177e6:	f0 08 12 00 	clz	r8,r8
800177ea:	f2 08 0a 48 	lsr	r8,r9,r8
800177ee:	10 9c       	mov	r12,r8
800177f0:	2f fd       	sub	sp,-4
800177f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177f6:	00 00       	add	r0,r0
800177f8:	80 01       	ld.sh	r1,r0[0x0]
800177fa:	76 52       	ld.w	r2,r11[0x14]

800177fc <LED_Display_Field>:
800177fc:	eb cd 40 c0 	pushm	r6-r7,lr
80017800:	1a 97       	mov	r7,sp
80017802:	20 2d       	sub	sp,8
80017804:	48 c6       	lddpc	r6,80017834 <LED_Display_Field+0x38>
80017806:	1e 26       	rsub	r6,pc
80017808:	ef 4c ff fc 	st.w	r7[-4],r12
8001780c:	ef 4b ff f8 	st.w	r7[-8],r11
80017810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017814:	5c 98       	brev	r8
80017816:	f0 08 12 00 	clz	r8,r8
8001781a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001781e:	f2 08 09 48 	lsl	r8,r9,r8
80017822:	10 9b       	mov	r11,r8
80017824:	ee fc ff fc 	ld.w	r12,r7[-4]
80017828:	f0 16 01 87 	mcall	r6[1564]
8001782c:	2f ed       	sub	sp,-8
8001782e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017832:	00 00       	add	r0,r0
80017834:	80 01       	ld.sh	r1,r0[0x0]
80017836:	76 8a       	ld.w	r10,r11[0x20]

80017838 <LED_Get_Intensity>:
80017838:	eb cd 40 80 	pushm	r7,lr
8001783c:	1a 97       	mov	r7,sp
8001783e:	20 1d       	sub	sp,4
80017840:	ef 4c ff fc 	st.w	r7[-4],r12
80017844:	30 08       	mov	r8,0
80017846:	10 9c       	mov	r12,r8
80017848:	2f fd       	sub	sp,-4
8001784a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001784e <LED_Set_Intensity>:
8001784e:	eb cd 40 80 	pushm	r7,lr
80017852:	1a 97       	mov	r7,sp
80017854:	20 2d       	sub	sp,8
80017856:	ef 4c ff fc 	st.w	r7[-4],r12
8001785a:	16 98       	mov	r8,r11
8001785c:	ef 68 ff f8 	st.b	r7[-8],r8
80017860:	2f ed       	sub	sp,-8
80017862:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80017868 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80017868:	eb cd 40 c0 	pushm	r6-r7,lr
8001786c:	1a 97       	mov	r7,sp
8001786e:	48 66       	lddpc	r6,80017884 <init_radar_modules+0x1c>
80017870:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
80017872:	ec fb 08 c0 	ld.w	r11,r6[2240]
80017876:	fe 7c 3c 00 	mov	r12,-50176
8001787a:	f0 16 00 72 	mcall	r6[456]
}
8001787e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017882:	00 00       	add	r0,r0
80017884:	80 01       	ld.sh	r1,r0[0x0]
80017886:	76 f4       	ld.w	r4,r11[0x3c]
80017888:	0a 00       	add	r0,r5

8001788a <read_radar>:


void read_radar() {
8001788a:	eb cd 40 c0 	pushm	r6-r7,lr
8001788e:	1a 97       	mov	r7,sp
80017890:	20 1d       	sub	sp,4
80017892:	49 f6       	lddpc	r6,8001790c <read_radar+0x82>
80017894:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
80017896:	30 08       	mov	r8,0
80017898:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
8001789c:	ee cb 00 01 	sub	r11,r7,1
800178a0:	30 08       	mov	r8,0
800178a2:	30 19       	mov	r9,1
800178a4:	30 1a       	mov	r10,1
800178a6:	fe 7c 3c 00 	mov	r12,-50176
800178aa:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
800178ae:	ec fb 02 70 	ld.w	r11,r6[624]
800178b2:	30 08       	mov	r8,0
800178b4:	30 19       	mov	r9,1
800178b6:	30 ca       	mov	r10,12
800178b8:	fe 7c 3c 00 	mov	r12,-50176
800178bc:	f0 16 00 61 	mcall	r6[388]
	
	dbg_print_num(main_target.velocity*100.0,10);
800178c0:	ec f8 02 70 	ld.w	r8,r6[624]
800178c4:	70 08       	ld.w	r8,r8[0x0]
800178c6:	10 9c       	mov	r12,r8
800178c8:	f0 16 00 02 	mcall	r6[8]
800178cc:	30 08       	mov	r8,0
800178ce:	fc 19 40 59 	movh	r9,0x4059
800178d2:	f0 16 00 03 	mcall	r6[12]
800178d6:	14 98       	mov	r8,r10
800178d8:	16 99       	mov	r9,r11
800178da:	10 9a       	mov	r10,r8
800178dc:	12 9b       	mov	r11,r9
800178de:	f0 16 00 14 	mcall	r6[80]
800178e2:	18 98       	mov	r8,r12
800178e4:	30 ab       	mov	r11,10
800178e6:	10 9c       	mov	r12,r8
800178e8:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
800178ec:	ec f8 02 70 	ld.w	r8,r6[624]
800178f0:	70 18       	ld.w	r8,r8[0x4]
800178f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800178f6:	30 ab       	mov	r11,10
800178f8:	10 9c       	mov	r12,r8
800178fa:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800178fe:	fe cc 00 76 	sub	r12,pc,118
80017902:	f0 16 00 01 	mcall	r6[4]
	
}
80017906:	2f fd       	sub	sp,-4
80017908:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001790c:	80 01       	ld.sh	r1,r0[0x0]
8001790e:	77 18       	ld.w	r8,r11[0x44]

80017910 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80017910:	eb cd 40 c0 	pushm	r6-r7,lr
80017914:	1a 97       	mov	r7,sp
80017916:	48 46       	lddpc	r6,80017924 <get_radar_main_target+0x14>
80017918:	1e 26       	rsub	r6,pc
	return &main_target;
8001791a:	ec f8 02 70 	ld.w	r8,r6[624]
	
}
8001791e:	10 9c       	mov	r12,r8
80017920:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017924:	80 01       	ld.sh	r1,r0[0x0]
80017926:	77 9c       	ld.w	r12,r11[0x64]

80017928 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80017928:	eb cd 40 c0 	pushm	r6-r7,lr
8001792c:	1a 97       	mov	r7,sp
8001792e:	20 1d       	sub	sp,4
80017930:	4c b6       	lddpc	r6,80017a5c <init_Servos+0x134>
80017932:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017934:	fe 78 4c 00 	mov	r8,-46080
80017938:	e0 69 4d 04 	mov	r9,19716
8001793c:	ea 19 50 57 	orh	r9,0x5057
80017940:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017944:	fe 78 4c 00 	mov	r8,-46080
80017948:	e0 69 4d 08 	mov	r9,19720
8001794c:	ea 19 50 57 	orh	r9,0x5057
80017950:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017954:	fe 78 4c 00 	mov	r8,-46080
80017958:	e0 69 4d 10 	mov	r9,19728
8001795c:	ea 19 50 57 	orh	r9,0x5057
80017960:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017964:	fe 78 4c 00 	mov	r8,-46080
80017968:	e0 69 4d 20 	mov	r9,19744
8001796c:	ea 19 50 57 	orh	r9,0x5057
80017970:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
80017974:	fe 78 4c 00 	mov	r8,-46080
80017978:	e0 69 06 01 	mov	r9,1537
8001797c:	ea 19 06 01 	orh	r9,0x601
80017980:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80017982:	fe 78 4c 00 	mov	r8,-46080
80017986:	30 fa       	mov	r10,15
80017988:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001798c:	f4 09 09 4a 	lsl	r10,r10,r9
80017990:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017994:	2f 09       	sub	r9,-16
80017996:	30 fb       	mov	r11,15
80017998:	f6 09 09 49 	lsl	r9,r11,r9
8001799c:	f5 e9 10 09 	or	r9,r10,r9
800179a0:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
800179a4:	fe 78 4c 00 	mov	r8,-46080
800179a8:	30 fa       	mov	r10,15
800179aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179ae:	f4 09 09 4a 	lsl	r10,r10,r9
800179b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179b6:	2f 09       	sub	r9,-16
800179b8:	30 fb       	mov	r11,15
800179ba:	f6 09 09 49 	lsl	r9,r11,r9
800179be:	f5 e9 10 09 	or	r9,r10,r9
800179c2:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
800179c6:	30 08       	mov	r8,0
800179c8:	ef 48 ff fc 	st.w	r7[-4],r8
800179cc:	c3 78       	rjmp	80017a3a <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
800179ce:	fe 79 4c 00 	mov	r9,-46080
800179d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179d6:	2f 08       	sub	r8,-16
800179d8:	a5 78       	lsl	r8,0x5
800179da:	f2 08 00 08 	add	r8,r9,r8
800179de:	e0 79 00 0b 	mov	r9,65547
800179e2:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
800179e4:	fe 79 4c 00 	mov	r9,-46080
800179e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179ec:	a5 78       	lsl	r8,0x5
800179ee:	f2 08 00 08 	add	r8,r9,r8
800179f2:	f0 c8 fd f4 	sub	r8,r8,-524
800179f6:	e0 69 27 10 	mov	r9,10000
800179fa:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
800179fc:	fe 79 4c 00 	mov	r9,-46080
80017a00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a04:	a5 78       	lsl	r8,0x5
80017a06:	f2 08 00 08 	add	r8,r9,r8
80017a0a:	f0 c8 fd fc 	sub	r8,r8,-516
80017a0e:	e0 69 0f a0 	mov	r9,4000
80017a12:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
80017a14:	fe 79 4c 00 	mov	r9,-46080
80017a18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a1c:	a5 78       	lsl	r8,0x5
80017a1e:	f2 08 00 08 	add	r8,r9,r8
80017a22:	f0 c8 fd e8 	sub	r8,r8,-536
80017a26:	e0 69 03 e8 	mov	r9,1000
80017a2a:	ea 19 03 e8 	orh	r9,0x3e8
80017a2e:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a34:	2f f8       	sub	r8,-1
80017a36:	ef 48 ff fc 	st.w	r7[-4],r8
80017a3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a3e:	58 38       	cp.w	r8,3
80017a40:	fe 9a ff c7 	brle	800179ce <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
80017a44:	30 6b       	mov	r11,6
80017a46:	ec fc 08 bc 	ld.w	r12,r6[2236]
80017a4a:	f0 16 00 94 	mcall	r6[592]
	// enable
	AVR32_PWM.ena=0b1111;
80017a4e:	fe 78 4c 00 	mov	r8,-46080
80017a52:	30 f9       	mov	r9,15
80017a54:	91 19       	st.w	r8[0x4],r9
	
	
}
80017a56:	2f fd       	sub	sp,-4
80017a58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a5c:	80 01       	ld.sh	r1,r0[0x0]
80017a5e:	77 b6       	ld.w	r6,r11[0x6c]

80017a60 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017a60:	eb cd 40 80 	pushm	r7,lr
80017a64:	1a 97       	mov	r7,sp
80017a66:	20 6d       	sub	sp,24
80017a68:	ef 4c ff f0 	st.w	r7[-16],r12
80017a6c:	ef 4b ff ec 	st.w	r7[-20],r11
80017a70:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
80017a74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017a78:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a7c:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017a80:	ee f8 ff e8 	ld.w	r8,r7[-24]
80017a84:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a88:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017a8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a90:	e0 69 13 88 	mov	r9,5000
80017a94:	10 19       	sub	r9,r8
80017a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017a9a:	f2 08 01 08 	sub	r8,r9,r8
80017a9e:	f0 09 16 1f 	lsr	r9,r8,0x1f
80017aa2:	f2 08 00 08 	add	r8,r9,r8
80017aa6:	a1 58       	asr	r8,0x1
80017aa8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
80017aac:	fe 79 4c 00 	mov	r9,-46080
80017ab0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ab4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ab8:	a5 78       	lsl	r8,0x5
80017aba:	f2 08 00 08 	add	r8,r9,r8
80017abe:	f0 c8 fd f0 	sub	r8,r8,-528
80017ac2:	e0 69 13 88 	mov	r9,5000
80017ac6:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
80017ac8:	fe 7a 4c 00 	mov	r10,-46080
80017acc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ad0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ad4:	ee fb ff f4 	ld.w	r11,r7[-12]
80017ad8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017adc:	f6 09 00 09 	add	r9,r11,r9
80017ae0:	a5 78       	lsl	r8,0x5
80017ae2:	f4 08 00 08 	add	r8,r10,r8
80017ae6:	f0 c8 fd f8 	sub	r8,r8,-520
80017aea:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
80017aec:	fe 7a 4c 00 	mov	r10,-46080
80017af0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017af4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017af8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017afc:	f2 0b 15 10 	lsl	r11,r9,0x10
80017b00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017b04:	f7 e9 10 09 	or	r9,r11,r9
80017b08:	a5 78       	lsl	r8,0x5
80017b0a:	f4 08 00 08 	add	r8,r10,r8
80017b0e:	f0 c8 fd e4 	sub	r8,r8,-540
80017b12:	91 09       	st.w	r8[0x0],r9
}
80017b14:	2f ad       	sub	sp,-24
80017b16:	e3 cd 80 80 	ldm	sp++,r7,pc

80017b1a <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017b1a:	eb cd 40 c0 	pushm	r6-r7,lr
80017b1e:	1a 97       	mov	r7,sp
80017b20:	20 1d       	sub	sp,4
80017b22:	49 76       	lddpc	r6,80017b7c <set_servos+0x62>
80017b24:	1e 26       	rsub	r6,pc
80017b26:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017b2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b2e:	2f 08       	sub	r8,-16
80017b30:	70 09       	ld.w	r9,r8[0x0]
80017b32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b36:	70 08       	ld.w	r8,r8[0x0]
80017b38:	12 9a       	mov	r10,r9
80017b3a:	10 9b       	mov	r11,r8
80017b3c:	30 1c       	mov	r12,1
80017b3e:	f0 16 00 c3 	mcall	r6[780]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80017b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b46:	2d 08       	sub	r8,-48
80017b48:	70 09       	ld.w	r9,r8[0x0]
80017b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b4e:	2e 08       	sub	r8,-32
80017b50:	70 08       	ld.w	r8,r8[0x0]
80017b52:	12 9a       	mov	r10,r9
80017b54:	10 9b       	mov	r11,r8
80017b56:	30 2c       	mov	r12,2
80017b58:	f0 16 00 c3 	mcall	r6[780]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b60:	2b 08       	sub	r8,-80
80017b62:	70 09       	ld.w	r9,r8[0x0]
80017b64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b68:	2c 08       	sub	r8,-64
80017b6a:	70 08       	ld.w	r8,r8[0x0]
80017b6c:	12 9a       	mov	r10,r9
80017b6e:	10 9b       	mov	r11,r8
80017b70:	30 3c       	mov	r12,3
80017b72:	f0 16 00 c3 	mcall	r6[780]
	#endif
	
}
80017b76:	2f fd       	sub	sp,-4
80017b78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b7c:	80 01       	ld.sh	r1,r0[0x0]
80017b7e:	79 a8       	ld.w	r8,r12[0x68]

80017b80 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017b80:	eb cd 40 80 	pushm	r7,lr
80017b84:	1a 97       	mov	r7,sp
80017b86:	20 1d       	sub	sp,4
80017b88:	18 98       	mov	r8,r12
80017b8a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017b8e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017b92:	58 38       	cp.w	r8,3
80017b94:	c1 20       	breq	80017bb8 <osc_get_rate+0x38>
80017b96:	e0 89 00 07 	brgt	80017ba4 <osc_get_rate+0x24>
80017b9a:	58 08       	cp.w	r8,0
80017b9c:	c0 90       	breq	80017bae <osc_get_rate+0x2e>
80017b9e:	58 28       	cp.w	r8,2
80017ba0:	c0 f0       	breq	80017bbe <osc_get_rate+0x3e>
80017ba2:	c1 b8       	rjmp	80017bd8 <osc_get_rate+0x58>
80017ba4:	58 48       	cp.w	r8,4
80017ba6:	c1 10       	breq	80017bc8 <osc_get_rate+0x48>
80017ba8:	58 58       	cp.w	r8,5
80017baa:	c1 40       	breq	80017bd2 <osc_get_rate+0x52>
80017bac:	c1 68       	rjmp	80017bd8 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80017bae:	e0 68 24 00 	mov	r8,9216
80017bb2:	ea 18 00 f4 	orh	r8,0xf4
80017bb6:	c1 28       	rjmp	80017bda <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80017bb8:	e0 68 80 00 	mov	r8,32768
80017bbc:	c0 f8       	rjmp	80017bda <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80017bbe:	e0 68 12 00 	mov	r8,4608
80017bc2:	ea 18 00 7a 	orh	r8,0x7a
80017bc6:	c0 a8       	rjmp	80017bda <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80017bc8:	e0 68 0e 00 	mov	r8,3584
80017bcc:	ea 18 07 27 	orh	r8,0x727
80017bd0:	c0 58       	rjmp	80017bda <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80017bd2:	e0 78 c1 38 	mov	r8,115000
80017bd6:	c0 28       	rjmp	80017bda <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80017bd8:	30 08       	mov	r8,0
	}
}
80017bda:	10 9c       	mov	r12,r8
80017bdc:	2f fd       	sub	sp,-4
80017bde:	e3 cd 80 80 	ldm	sp++,r7,pc

80017be2 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80017be2:	eb cd 40 c0 	pushm	r6-r7,lr
80017be6:	1a 97       	mov	r7,sp
80017be8:	48 56       	lddpc	r6,80017bfc <sysclk_get_main_hz+0x1a>
80017bea:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80017bec:	30 0c       	mov	r12,0
80017bee:	cc 9f       	rcall	80017b80 <osc_get_rate>
80017bf0:	18 98       	mov	r8,r12
80017bf2:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80017bf4:	10 9c       	mov	r12,r8
80017bf6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bfa:	00 00       	add	r0,r0
80017bfc:	80 01       	ld.sh	r1,r0[0x0]
80017bfe:	7a 6e       	ld.w	lr,sp[0x18]

80017c00 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80017c00:	eb cd 40 c0 	pushm	r6-r7,lr
80017c04:	1a 97       	mov	r7,sp
80017c06:	48 46       	lddpc	r6,80017c14 <sysclk_get_cpu_hz+0x14>
80017c08:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80017c0a:	ce cf       	rcall	80017be2 <sysclk_get_main_hz>
80017c0c:	18 98       	mov	r8,r12
}
80017c0e:	10 9c       	mov	r12,r8
80017c10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c14:	80 01       	ld.sh	r1,r0[0x0]
80017c16:	7a 8c       	ld.w	r12,sp[0x20]

80017c18 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80017c18:	eb cd 40 c0 	pushm	r6-r7,lr
80017c1c:	1a 97       	mov	r7,sp
80017c1e:	20 3d       	sub	sp,12
80017c20:	4c 36       	lddpc	r6,80017d2c <spectrum_handler+0x114>
80017c22:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
80017c24:	f0 16 00 2d 	mcall	r6[180]
80017c28:	18 98       	mov	r8,r12
80017c2a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80017c2e:	fc 78 14 00 	mov	r8,-191488
80017c32:	70 58       	ld.w	r8,r8[0x14]
80017c34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017c38:	5c 58       	castu.b	r8
80017c3a:	c7 50       	breq	80017d24 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80017c3c:	ec f8 00 84 	ld.w	r8,r6[132]
80017c40:	f0 f8 01 2c 	ld.w	r8,r8[300]
80017c44:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017c48:	10 19       	sub	r9,r8
80017c4a:	ec f8 00 84 	ld.w	r8,r6[132]
80017c4e:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
80017c52:	ec f8 00 84 	ld.w	r8,r6[132]
80017c56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017c5a:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80017c5e:	ec f8 00 84 	ld.w	r8,r6[132]
80017c62:	f0 f8 01 30 	ld.w	r8,r8[304]
80017c66:	e0 48 09 c4 	cp.w	r8,2500
80017c6a:	e0 88 00 06 	brls	80017c76 <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80017c6e:	ec fc 00 84 	ld.w	r12,r6[132]
80017c72:	f0 16 02 03 	mcall	r6[2060]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
80017c76:	fc 78 14 00 	mov	r8,-191488
80017c7a:	70 68       	ld.w	r8,r8[0x18]
80017c7c:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80017c80:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017c84:	10 9b       	mov	r11,r8
80017c86:	ec fc 00 84 	ld.w	r12,r6[132]
80017c8a:	f0 16 00 55 	mcall	r6[340]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80017c8e:	ec fc 00 84 	ld.w	r12,r6[132]
80017c92:	f0 16 00 2e 	mcall	r6[184]
80017c96:	18 98       	mov	r8,r12
80017c98:	59 08       	cp.w	r8,16
80017c9a:	c4 51       	brne	80017d24 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017c9c:	30 08       	mov	r8,0
80017c9e:	ef 68 ff f9 	st.b	r7[-7],r8
80017ca2:	c3 a8       	rjmp	80017d16 <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80017ca4:	ec fc 00 84 	ld.w	r12,r6[132]
80017ca8:	f0 16 00 45 	mcall	r6[276]
80017cac:	18 98       	mov	r8,r12
80017cae:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
80017cb2:	ec fc 00 84 	ld.w	r12,r6[132]
80017cb6:	f0 16 00 45 	mcall	r6[276]
80017cba:	18 98       	mov	r8,r12
80017cbc:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
80017cc0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017cc4:	a9 68       	lsl	r8,0x8
80017cc6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80017cca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017cce:	f2 08 00 08 	add	r8,r9,r8
80017cd2:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80017cd6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017cda:	e2 18 00 3c 	andl	r8,0x3c,COH
80017cde:	f0 0a 14 02 	asr	r10,r8,0x2
80017ce2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017ce6:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80017cea:	ec f9 00 84 	ld.w	r9,r6[132]
80017cee:	f4 ca ff 7e 	sub	r10,r10,-130
80017cf2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80017cf6:	ec f9 00 84 	ld.w	r9,r6[132]
80017cfa:	30 18       	mov	r8,1
80017cfc:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80017d00:	ec f8 00 84 	ld.w	r8,r6[132]
80017d04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017d08:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017d0c:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80017d10:	2f f8       	sub	r8,-1
80017d12:	ef 68 ff f9 	st.b	r7[-7],r8
80017d16:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80017d1a:	30 78       	mov	r8,7
80017d1c:	f0 09 18 00 	cp.b	r9,r8
80017d20:	fe 98 ff c2 	brls	80017ca4 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
80017d24:	2f dd       	sub	sp,-12
80017d26:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017d2a:	d6 03       	rete
80017d2c:	80 01       	ld.sh	r1,r0[0x0]
80017d2e:	7a a6       	ld.w	r6,sp[0x28]

80017d30 <rc_init>:

void rc_init (void) {
80017d30:	eb cd 40 c0 	pushm	r6-r7,lr
80017d34:	1a 97       	mov	r7,sp
80017d36:	20 1d       	sub	sp,4
80017d38:	4a 96       	lddpc	r6,80017ddc <rc_init+0xac>
80017d3a:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017d3c:	30 08       	mov	r8,0
80017d3e:	ef 48 ff fc 	st.w	r7[-4],r8
80017d42:	c2 18       	rjmp	80017d84 <rc_init+0x54>
		spRec1.channels[i]=500;
80017d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d48:	ec f9 00 84 	ld.w	r9,r6[132]
80017d4c:	f0 ca ff 7e 	sub	r10,r8,-130
80017d50:	e0 68 01 f4 	mov	r8,500
80017d54:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80017d58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d5c:	ec f9 01 74 	ld.w	r9,r6[372]
80017d60:	f0 ca ff 7e 	sub	r10,r8,-130
80017d64:	e0 68 01 f4 	mov	r8,500
80017d68:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80017d6c:	ee fa ff fc 	ld.w	r10,r7[-4]
80017d70:	ec f9 02 c4 	ld.w	r9,r6[708]
80017d74:	30 08       	mov	r8,0
80017d76:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d7e:	2f f8       	sub	r8,-1
80017d80:	ef 48 ff fc 	st.w	r7[-4],r8
80017d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d88:	58 f8       	cp.w	r8,15
80017d8a:	fe 9a ff dd 	brle	80017d44 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80017d8e:	ec f9 00 84 	ld.w	r9,r6[132]
80017d92:	30 08       	mov	r8,0
80017d94:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80017d98:	ec f9 01 74 	ld.w	r9,r6[372]
80017d9c:	30 08       	mov	r8,0
80017d9e:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
80017da2:	30 2b       	mov	r11,2
80017da4:	ec fc 08 b8 	ld.w	r12,r6[2232]
80017da8:	f0 16 00 94 	mcall	r6[592]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
80017dac:	c2 af       	rcall	80017c00 <sysclk_get_cpu_hz>
80017dae:	18 98       	mov	r8,r12
80017db0:	10 9a       	mov	r10,r8
80017db2:	ec fb 08 b4 	ld.w	r11,r6[2228]
80017db6:	fc 7c 14 00 	mov	r12,-191488
80017dba:	f0 16 00 6a 	mcall	r6[424]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
80017dbe:	30 1a       	mov	r10,1
80017dc0:	e0 6b 02 80 	mov	r11,640
80017dc4:	fe cc 01 ac 	sub	r12,pc,428
80017dc8:	f0 16 00 3b 	mcall	r6[236]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
80017dcc:	fc 78 14 00 	mov	r8,-191488
80017dd0:	30 19       	mov	r9,1
80017dd2:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
80017dd4:	2f fd       	sub	sp,-4
80017dd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017dda:	00 00       	add	r0,r0
80017ddc:	80 01       	ld.sh	r1,r0[0x0]
80017dde:	7b be       	ld.w	lr,sp[0x6c]

80017de0 <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
80017de0:	eb cd 40 c0 	pushm	r6-r7,lr
80017de4:	1a 97       	mov	r7,sp
80017de6:	20 1d       	sub	sp,4
80017de8:	48 b6       	lddpc	r6,80017e14 <rc_get_channel+0x34>
80017dea:	1e 26       	rsub	r6,pc
80017dec:	18 98       	mov	r8,r12
80017dee:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
80017df2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80017df6:	ec f8 00 84 	ld.w	r8,r6[132]
80017dfa:	f2 c9 ff 7e 	sub	r9,r9,-130
80017dfe:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80017e02:	f0 c8 01 f4 	sub	r8,r8,500
80017e06:	5c 88       	casts.h	r8
80017e08:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80017e0a:	10 9c       	mov	r12,r8
80017e0c:	2f fd       	sub	sp,-4
80017e0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e12:	00 00       	add	r0,r0
80017e14:	80 01       	ld.sh	r1,r0[0x0]
80017e16:	7c 6e       	ld.w	lr,lr[0x18]

80017e18 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80017e18:	eb cd 40 e0 	pushm	r5-r7,lr
80017e1c:	1a 97       	mov	r7,sp
80017e1e:	20 2d       	sub	sp,8
80017e20:	4a 36       	lddpc	r6,80017eac <rc_get_channel_neutral+0x94>
80017e22:	1e 26       	rsub	r6,pc
80017e24:	18 98       	mov	r8,r12
80017e26:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80017e2a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017e2e:	10 9c       	mov	r12,r8
80017e30:	f0 16 00 1c 	mcall	r6[112]
80017e34:	18 98       	mov	r8,r12
80017e36:	10 99       	mov	r9,r8
80017e38:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017e3c:	ec f8 02 c4 	ld.w	r8,r6[708]
80017e40:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80017e44:	f2 08 01 08 	sub	r8,r9,r8
80017e48:	5c 88       	casts.h	r8
80017e4a:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80017e4e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017e52:	10 9c       	mov	r12,r8
80017e54:	f0 16 00 1a 	mcall	r6[104]
80017e58:	14 98       	mov	r8,r10
80017e5a:	16 99       	mov	r9,r11
80017e5c:	30 05       	mov	r5,0
80017e5e:	30 0a       	mov	r10,0
80017e60:	fc 1b c0 3e 	movh	r11,0xc03e
80017e64:	f0 16 00 1e 	mcall	r6[120]
80017e68:	18 98       	mov	r8,r12
80017e6a:	58 08       	cp.w	r8,0
80017e6c:	c0 20       	breq	80017e70 <rc_get_channel_neutral+0x58>
80017e6e:	30 15       	mov	r5,1
80017e70:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e74:	c1 60       	breq	80017ea0 <rc_get_channel_neutral+0x88>
80017e76:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017e7a:	10 9c       	mov	r12,r8
80017e7c:	f0 16 00 1a 	mcall	r6[104]
80017e80:	30 05       	mov	r5,0
80017e82:	30 08       	mov	r8,0
80017e84:	fc 19 40 3e 	movh	r9,0x403e
80017e88:	f0 16 00 1e 	mcall	r6[120]
80017e8c:	18 98       	mov	r8,r12
80017e8e:	58 08       	cp.w	r8,0
80017e90:	c0 20       	breq	80017e94 <rc_get_channel_neutral+0x7c>
80017e92:	30 15       	mov	r5,1
80017e94:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e98:	c0 40       	breq	80017ea0 <rc_get_channel_neutral+0x88>
80017e9a:	30 08       	mov	r8,0
80017e9c:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
80017ea0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80017ea4:	10 9c       	mov	r12,r8
80017ea6:	2f ed       	sub	sp,-8
80017ea8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017eac:	80 01       	ld.sh	r1,r0[0x0]
80017eae:	7c a6       	ld.w	r6,lr[0x28]

80017eb0 <rc_center_channel>:

void rc_center_channel(uint8_t index){
80017eb0:	eb cd 40 e0 	pushm	r5-r7,lr
80017eb4:	1a 97       	mov	r7,sp
80017eb6:	20 1d       	sub	sp,4
80017eb8:	48 a6       	lddpc	r6,80017ee0 <rc_center_channel+0x30>
80017eba:	1e 26       	rsub	r6,pc
80017ebc:	18 98       	mov	r8,r12
80017ebe:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
80017ec2:	ef 35 ff fc 	ld.ub	r5,r7[-4]
80017ec6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017eca:	10 9c       	mov	r12,r8
80017ecc:	f0 16 00 1c 	mcall	r6[112]
80017ed0:	18 98       	mov	r8,r12
80017ed2:	ec f9 02 c4 	ld.w	r9,r6[708]
80017ed6:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
80017eda:	2f fd       	sub	sp,-4
80017edc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017ee0:	80 01       	ld.sh	r1,r0[0x0]
80017ee2:	7d 3e       	ld.w	lr,lr[0x4c]

80017ee4 <checkReceiver1>:

int8_t checkReceiver1() {
80017ee4:	eb cd 40 c0 	pushm	r6-r7,lr
80017ee8:	1a 97       	mov	r7,sp
80017eea:	20 3d       	sub	sp,12
80017eec:	4b 56       	lddpc	r6,80017fc0 <checkReceiver1+0xdc>
80017eee:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
80017ef0:	f0 16 00 2d 	mcall	r6[180]
80017ef4:	18 98       	mov	r8,r12
80017ef6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80017efa:	ec f8 00 84 	ld.w	r8,r6[132]
80017efe:	f0 f8 01 24 	ld.w	r8,r8[292]
80017f02:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017f06:	10 19       	sub	r9,r8
80017f08:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80017f0c:	ec f8 00 84 	ld.w	r8,r6[132]
80017f10:	f1 38 01 28 	ld.ub	r8,r8[296]
80017f14:	58 08       	cp.w	r8,0
80017f16:	c0 41       	brne	80017f1e <checkReceiver1+0x3a>
80017f18:	e0 68 00 fe 	mov	r8,254
80017f1c:	c4 d8       	rjmp	80017fb6 <checkReceiver1+0xd2>
	if (duration<100000) {
80017f1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f22:	e0 58 86 9f 	cp.w	r8,99999
80017f26:	e0 8b 00 04 	brhi	80017f2e <checkReceiver1+0x4a>
		return 1;
80017f2a:	30 18       	mov	r8,1
80017f2c:	c4 58       	rjmp	80017fb6 <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80017f2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f32:	e0 69 e3 5f 	mov	r9,58207
80017f36:	ea 19 00 16 	orh	r9,0x16
80017f3a:	12 38       	cp.w	r8,r9
80017f3c:	e0 8b 00 17 	brhi	80017f6a <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80017f40:	ec f9 00 84 	ld.w	r9,r6[132]
80017f44:	e0 68 01 f4 	mov	r8,500
80017f48:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80017f4c:	ec f9 00 84 	ld.w	r9,r6[132]
80017f50:	e0 68 01 f4 	mov	r8,500
80017f54:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80017f58:	ec f9 00 84 	ld.w	r9,r6[132]
80017f5c:	e0 68 01 f4 	mov	r8,500
80017f60:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
80017f64:	e0 68 00 ff 	mov	r8,255
80017f68:	c2 78       	rjmp	80017fb6 <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80017f6a:	ec f9 00 84 	ld.w	r9,r6[132]
80017f6e:	30 08       	mov	r8,0
80017f70:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80017f74:	30 18       	mov	r8,1
80017f76:	ef 68 ff f7 	st.b	r7[-9],r8
80017f7a:	c1 08       	rjmp	80017f9a <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80017f7c:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80017f80:	ec f9 00 84 	ld.w	r9,r6[132]
80017f84:	f0 ca ff 7e 	sub	r10,r8,-130
80017f88:	e0 68 01 f4 	mov	r8,500
80017f8c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
80017f90:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017f94:	2f f8       	sub	r8,-1
80017f96:	ef 68 ff f7 	st.b	r7[-9],r8
80017f9a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017f9e:	30 78       	mov	r8,7
80017fa0:	f0 09 18 00 	cp.b	r9,r8
80017fa4:	fe 9a ff ec 	brle	80017f7c <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
80017fa8:	ec f9 00 84 	ld.w	r9,r6[132]
80017fac:	30 08       	mov	r8,0
80017fae:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80017fb2:	e0 68 00 fe 	mov	r8,254

	}

}
80017fb6:	10 9c       	mov	r12,r8
80017fb8:	2f dd       	sub	sp,-12
80017fba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017fbe:	00 00       	add	r0,r0
80017fc0:	80 01       	ld.sh	r1,r0[0x0]
80017fc2:	7d 72       	ld.w	r2,lr[0x5c]

80017fc4 <checkReceiver2>:

int8_t checkReceiver2(){
80017fc4:	eb cd 40 c0 	pushm	r6-r7,lr
80017fc8:	1a 97       	mov	r7,sp
80017fca:	20 3d       	sub	sp,12
80017fcc:	4a 96       	lddpc	r6,80018070 <checkReceiver2+0xac>
80017fce:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
80017fd0:	30 08       	mov	r8,0
80017fd2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
80017fd6:	ec f8 01 74 	ld.w	r8,r6[372]
80017fda:	f0 f8 01 24 	ld.w	r8,r8[292]
80017fde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017fe2:	10 19       	sub	r9,r8
80017fe4:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
80017fe8:	ec f8 01 74 	ld.w	r8,r6[372]
80017fec:	f1 38 01 28 	ld.ub	r8,r8[296]
80017ff0:	58 08       	cp.w	r8,0
80017ff2:	c0 41       	brne	80017ffa <checkReceiver2+0x36>
80017ff4:	e0 68 00 fe 	mov	r8,254
80017ff8:	c3 88       	rjmp	80018068 <checkReceiver2+0xa4>
	if (duration < 200000) {
80017ffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ffe:	e2 58 0d 3f 	cp.w	r8,199999
80018002:	e0 8b 00 04 	brhi	8001800a <checkReceiver2+0x46>
		return 1;
80018006:	30 18       	mov	r8,1
80018008:	c3 08       	rjmp	80018068 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
8001800a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001800e:	e6 58 a1 1f 	cp.w	r8,499999
80018012:	e0 8b 00 05 	brhi	8001801c <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
80018016:	e0 68 00 ff 	mov	r8,255
8001801a:	c2 78       	rjmp	80018068 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
8001801c:	ec f9 01 74 	ld.w	r9,r6[372]
80018020:	30 08       	mov	r8,0
80018022:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80018026:	30 18       	mov	r8,1
80018028:	ef 68 ff f7 	st.b	r7[-9],r8
8001802c:	c1 08       	rjmp	8001804c <checkReceiver2+0x88>
			spRec2.channels[i]=500;
8001802e:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80018032:	ec f9 01 74 	ld.w	r9,r6[372]
80018036:	f0 ca ff 7e 	sub	r10,r8,-130
8001803a:	e0 68 01 f4 	mov	r8,500
8001803e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
80018042:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018046:	2f f8       	sub	r8,-1
80018048:	ef 68 ff f7 	st.b	r7[-9],r8
8001804c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80018050:	30 78       	mov	r8,7
80018052:	f0 09 18 00 	cp.b	r9,r8
80018056:	fe 9a ff ec 	brle	8001802e <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
8001805a:	ec f9 01 74 	ld.w	r9,r6[372]
8001805e:	30 08       	mov	r8,0
80018060:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80018064:	e0 68 00 fe 	mov	r8,254

	}

}
80018068:	10 9c       	mov	r12,r8
8001806a:	2f dd       	sub	sp,-12
8001806c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018070:	80 01       	ld.sh	r1,r0[0x0]
80018072:	7e 52       	ld.w	r2,pc[0x14]

80018074 <rc_check_receivers>:

int8_t rc_check_receivers() {
80018074:	eb cd 40 c0 	pushm	r6-r7,lr
80018078:	1a 97       	mov	r7,sp
8001807a:	48 66       	lddpc	r6,80018090 <rc_check_receivers+0x1c>
8001807c:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
8001807e:	f0 16 01 98 	mcall	r6[1632]
80018082:	18 98       	mov	r8,r12
80018084:	5c 58       	castu.b	r8
80018086:	5c 58       	castu.b	r8
}
80018088:	10 9c       	mov	r12,r8
8001808a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001808e:	00 00       	add	r0,r0
80018090:	80 01       	ld.sh	r1,r0[0x0]
80018092:	7f 00       	ld.w	r0,pc[0x40]

80018094 <sysclk_enable_pba_module>:
80018094:	eb cd 40 c0 	pushm	r6-r7,lr
80018098:	1a 97       	mov	r7,sp
8001809a:	20 1d       	sub	sp,4
8001809c:	48 66       	lddpc	r6,800180b4 <sysclk_enable_pba_module+0x20>
8001809e:	1e 26       	rsub	r6,pc
800180a0:	ef 4c ff fc 	st.w	r7[-4],r12
800180a4:	ee fb ff fc 	ld.w	r11,r7[-4]
800180a8:	30 2c       	mov	r12,2
800180aa:	f0 16 01 f2 	mcall	r6[1992]
800180ae:	2f fd       	sub	sp,-4
800180b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800180b4:	80 01       	ld.sh	r1,r0[0x0]
800180b6:	7f 22       	ld.w	r2,pc[0x48]

800180b8 <spi_reset>:
800180b8:	eb cd 40 80 	pushm	r7,lr
800180bc:	1a 97       	mov	r7,sp
800180be:	20 1d       	sub	sp,4
800180c0:	ef 4c ff fc 	st.w	r7[-4],r12
800180c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800180c8:	e0 69 00 80 	mov	r9,128
800180cc:	91 09       	st.w	r8[0x0],r9
800180ce:	2f fd       	sub	sp,-4
800180d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800180d4 <spi_set_master_mode>:
800180d4:	eb cd 40 80 	pushm	r7,lr
800180d8:	1a 97       	mov	r7,sp
800180da:	20 1d       	sub	sp,4
800180dc:	ef 4c ff fc 	st.w	r7[-4],r12
800180e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180e4:	72 18       	ld.w	r8,r9[0x4]
800180e6:	30 1a       	mov	r10,1
800180e8:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
800180ec:	93 18       	st.w	r9[0x4],r8
800180ee:	2f fd       	sub	sp,-4
800180f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800180f4 <spi_disable_modfault>:
800180f4:	eb cd 40 80 	pushm	r7,lr
800180f8:	1a 97       	mov	r7,sp
800180fa:	20 1d       	sub	sp,4
800180fc:	ef 4c ff fc 	st.w	r7[-4],r12
80018100:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018104:	72 18       	ld.w	r8,r9[0x4]
80018106:	30 1a       	mov	r10,1
80018108:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
8001810c:	93 18       	st.w	r9[0x4],r8
8001810e:	2f fd       	sub	sp,-4
80018110:	e3 cd 80 80 	ldm	sp++,r7,pc

80018114 <spi_disable_loopback>:
80018114:	eb cd 40 80 	pushm	r7,lr
80018118:	1a 97       	mov	r7,sp
8001811a:	20 1d       	sub	sp,4
8001811c:	ef 4c ff fc 	st.w	r7[-4],r12
80018120:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018124:	72 18       	ld.w	r8,r9[0x4]
80018126:	30 0a       	mov	r10,0
80018128:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
8001812c:	93 18       	st.w	r9[0x4],r8
8001812e:	2f fd       	sub	sp,-4
80018130:	e3 cd 80 80 	ldm	sp++,r7,pc

80018134 <spi_disable_chipselect_decoding>:
80018134:	eb cd 40 80 	pushm	r7,lr
80018138:	1a 97       	mov	r7,sp
8001813a:	20 1d       	sub	sp,4
8001813c:	ef 4c ff fc 	st.w	r7[-4],r12
80018140:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018144:	72 18       	ld.w	r8,r9[0x4]
80018146:	30 0a       	mov	r10,0
80018148:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
8001814c:	93 18       	st.w	r9[0x4],r8
8001814e:	2f fd       	sub	sp,-4
80018150:	e3 cd 80 80 	ldm	sp++,r7,pc

80018154 <spi_set_chipselect>:
80018154:	eb cd 40 80 	pushm	r7,lr
80018158:	1a 97       	mov	r7,sp
8001815a:	20 2d       	sub	sp,8
8001815c:	ef 4c ff fc 	st.w	r7[-4],r12
80018160:	16 98       	mov	r8,r11
80018162:	ef 68 ff f8 	st.b	r7[-8],r8
80018166:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001816a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8001816e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80018172:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018176:	72 18       	ld.w	r8,r9[0x4]
80018178:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
8001817c:	93 18       	st.w	r9[0x4],r8
8001817e:	2f ed       	sub	sp,-8
80018180:	e3 cd 80 80 	ldm	sp++,r7,pc

80018184 <spi_disable_variable_chipselect>:
80018184:	eb cd 40 80 	pushm	r7,lr
80018188:	1a 97       	mov	r7,sp
8001818a:	20 1d       	sub	sp,4
8001818c:	ef 4c ff fc 	st.w	r7[-4],r12
80018190:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018194:	72 18       	ld.w	r8,r9[0x4]
80018196:	30 0a       	mov	r10,0
80018198:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8001819c:	93 18       	st.w	r9[0x4],r8
8001819e:	2f fd       	sub	sp,-4
800181a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800181a4 <spi_set_delay>:
800181a4:	eb cd 40 80 	pushm	r7,lr
800181a8:	1a 97       	mov	r7,sp
800181aa:	20 2d       	sub	sp,8
800181ac:	ef 4c ff fc 	st.w	r7[-4],r12
800181b0:	16 98       	mov	r8,r11
800181b2:	ef 68 ff f8 	st.b	r7[-8],r8
800181b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800181ba:	72 18       	ld.w	r8,r9[0x4]
800181bc:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800181c0:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800181c4:	93 18       	st.w	r9[0x4],r8
800181c6:	2f ed       	sub	sp,-8
800181c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800181cc <spi_master_init>:
800181cc:	eb cd 40 c0 	pushm	r6-r7,lr
800181d0:	1a 97       	mov	r7,sp
800181d2:	20 1d       	sub	sp,4
800181d4:	49 86       	lddpc	r6,80018234 <spi_master_init+0x68>
800181d6:	1e 26       	rsub	r6,pc
800181d8:	ef 4c ff fc 	st.w	r7[-4],r12
800181dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181e0:	fc 58 18 00 	cp.w	r8,-190464
800181e4:	c0 41       	brne	800181ec <spi_master_init+0x20>
800181e6:	30 3c       	mov	r12,3
800181e8:	c5 6f       	rcall	80018094 <sysclk_enable_pba_module>
800181ea:	c0 88       	rjmp	800181fa <spi_master_init+0x2e>
800181ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181f0:	fe 58 34 00 	cp.w	r8,-52224
800181f4:	c0 31       	brne	800181fa <spi_master_init+0x2e>
800181f6:	30 bc       	mov	r12,11
800181f8:	c4 ef       	rcall	80018094 <sysclk_enable_pba_module>
800181fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800181fe:	c5 df       	rcall	800180b8 <spi_reset>
80018200:	ee fc ff fc 	ld.w	r12,r7[-4]
80018204:	c6 8f       	rcall	800180d4 <spi_set_master_mode>
80018206:	ee fc ff fc 	ld.w	r12,r7[-4]
8001820a:	c7 5f       	rcall	800180f4 <spi_disable_modfault>
8001820c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018210:	c8 2f       	rcall	80018114 <spi_disable_loopback>
80018212:	30 fb       	mov	r11,15
80018214:	ee fc ff fc 	ld.w	r12,r7[-4]
80018218:	c9 ef       	rcall	80018154 <spi_set_chipselect>
8001821a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001821e:	cb 3f       	rcall	80018184 <spi_disable_variable_chipselect>
80018220:	ee fc ff fc 	ld.w	r12,r7[-4]
80018224:	c8 8f       	rcall	80018134 <spi_disable_chipselect_decoding>
80018226:	30 0b       	mov	r11,0
80018228:	ee fc ff fc 	ld.w	r12,r7[-4]
8001822c:	cb cf       	rcall	800181a4 <spi_set_delay>
8001822e:	2f fd       	sub	sp,-4
80018230:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018234:	80 01       	ld.sh	r1,r0[0x0]
80018236:	80 5a       	ld.sh	r10,r0[0xa]

80018238 <spi_select_device>:
80018238:	eb cd 40 c0 	pushm	r6-r7,lr
8001823c:	1a 97       	mov	r7,sp
8001823e:	20 2d       	sub	sp,8
80018240:	48 96       	lddpc	r6,80018264 <spi_select_device+0x2c>
80018242:	1e 26       	rsub	r6,pc
80018244:	ef 4c ff fc 	st.w	r7[-4],r12
80018248:	ef 4b ff f8 	st.w	r7[-8],r11
8001824c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018250:	11 88       	ld.ub	r8,r8[0x0]
80018252:	10 9b       	mov	r11,r8
80018254:	ee fc ff fc 	ld.w	r12,r7[-4]
80018258:	f0 16 01 fc 	mcall	r6[2032]
8001825c:	2f ed       	sub	sp,-8
8001825e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018262:	00 00       	add	r0,r0
80018264:	80 01       	ld.sh	r1,r0[0x0]
80018266:	80 c6       	ld.uh	r6,r0[0x8]

80018268 <spi_deselect_device>:
80018268:	eb cd 40 c0 	pushm	r6-r7,lr
8001826c:	1a 97       	mov	r7,sp
8001826e:	20 2d       	sub	sp,8
80018270:	48 96       	lddpc	r6,80018294 <spi_deselect_device+0x2c>
80018272:	1e 26       	rsub	r6,pc
80018274:	ef 4c ff fc 	st.w	r7[-4],r12
80018278:	ef 4b ff f8 	st.w	r7[-8],r11
8001827c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018280:	11 88       	ld.ub	r8,r8[0x0]
80018282:	10 9b       	mov	r11,r8
80018284:	ee fc ff fc 	ld.w	r12,r7[-4]
80018288:	f0 16 01 4a 	mcall	r6[1320]
8001828c:	2f ed       	sub	sp,-8
8001828e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018292:	00 00       	add	r0,r0
80018294:	80 01       	ld.sh	r1,r0[0x0]
80018296:	80 f6       	ld.uh	r6,r0[0xe]

80018298 <get_spi_in_buffer>:
80018298:	eb cd 40 c0 	pushm	r6-r7,lr
8001829c:	1a 97       	mov	r7,sp
8001829e:	20 1d       	sub	sp,4
800182a0:	48 96       	lddpc	r6,800182c4 <get_spi_in_buffer+0x2c>
800182a2:	1e 26       	rsub	r6,pc
800182a4:	ef 4c ff fc 	st.w	r7[-4],r12
800182a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800182ac:	f0 08 10 54 	mul	r8,r8,84
800182b0:	f0 c9 ff dc 	sub	r9,r8,-36
800182b4:	ec f8 00 2c 	ld.w	r8,r6[44]
800182b8:	f2 08 00 08 	add	r8,r9,r8
800182bc:	10 9c       	mov	r12,r8
800182be:	2f fd       	sub	sp,-4
800182c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800182c4:	80 01       	ld.sh	r1,r0[0x0]
800182c6:	81 26       	st.w	r0[0x8],r6

800182c8 <spi0_int_handler>:
800182c8:	eb cd 40 c0 	pushm	r6-r7,lr
800182cc:	1a 97       	mov	r7,sp
800182ce:	48 56       	lddpc	r6,800182e0 <spi0_int_handler+0x18>
800182d0:	1e 26       	rsub	r6,pc
800182d2:	30 0c       	mov	r12,0
800182d4:	f0 16 01 26 	mcall	r6[1176]
800182d8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800182dc:	d6 03       	rete
800182de:	00 00       	add	r0,r0
800182e0:	80 01       	ld.sh	r1,r0[0x0]
800182e2:	81 54       	st.w	r0[0x14],r4

800182e4 <spi1_int_handler>:
800182e4:	eb cd 40 c0 	pushm	r6-r7,lr
800182e8:	1a 97       	mov	r7,sp
800182ea:	48 56       	lddpc	r6,800182fc <spi1_int_handler+0x18>
800182ec:	1e 26       	rsub	r6,pc
800182ee:	30 1c       	mov	r12,1
800182f0:	f0 16 01 26 	mcall	r6[1176]
800182f4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800182f8:	d6 03       	rete
800182fa:	00 00       	add	r0,r0
800182fc:	80 01       	ld.sh	r1,r0[0x0]
800182fe:	81 70       	st.w	r0[0x1c],r0

80018300 <pdca_int_handler_spi0>:
80018300:	eb cd 40 c0 	pushm	r6-r7,lr
80018304:	1a 97       	mov	r7,sp
80018306:	49 b6       	lddpc	r6,80018370 <pdca_int_handler_spi0+0x70>
80018308:	1e 26       	rsub	r6,pc
8001830a:	fc 78 00 00 	mov	r8,-196608
8001830e:	71 b8       	ld.w	r8,r8[0x6c]
80018310:	fc 78 00 00 	mov	r8,-196608
80018314:	70 b8       	ld.w	r8,r8[0x2c]
80018316:	30 1c       	mov	r12,1
80018318:	f0 16 00 80 	mcall	r6[512]
8001831c:	30 0c       	mov	r12,0
8001831e:	f0 16 00 80 	mcall	r6[512]
80018322:	30 1c       	mov	r12,1
80018324:	f0 16 00 9a 	mcall	r6[616]
80018328:	ec f8 00 2c 	ld.w	r8,r6[44]
8001832c:	70 08       	ld.w	r8,r8[0x0]
8001832e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018332:	2b 09       	sub	r9,-80
80018334:	12 9b       	mov	r11,r9
80018336:	10 9c       	mov	r12,r8
80018338:	c9 8f       	rcall	80018268 <spi_deselect_device>
8001833a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001833e:	f1 38 00 4a 	ld.ub	r8,r8[74]
80018342:	5c 58       	castu.b	r8
80018344:	ec f9 00 2c 	ld.w	r9,r6[44]
80018348:	f3 68 00 45 	st.b	r9[69],r8
8001834c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018350:	30 08       	mov	r8,0
80018352:	f3 68 00 4a 	st.b	r9[74],r8
80018356:	ec f8 00 2c 	ld.w	r8,r6[44]
8001835a:	71 38       	ld.w	r8,r8[0x4c]
8001835c:	58 08       	cp.w	r8,0
8001835e:	c0 50       	breq	80018368 <pdca_int_handler_spi0+0x68>
80018360:	ec f8 00 2c 	ld.w	r8,r6[44]
80018364:	71 38       	ld.w	r8,r8[0x4c]
80018366:	5d 18       	icall	r8
80018368:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001836c:	d6 03       	rete
8001836e:	00 00       	add	r0,r0
80018370:	80 01       	ld.sh	r1,r0[0x0]
80018372:	81 8c       	st.w	r0[0x20],r12

80018374 <initSPI>:
80018374:	eb cd 40 c0 	pushm	r6-r7,lr
80018378:	1a 97       	mov	r7,sp
8001837a:	20 2d       	sub	sp,8
8001837c:	4e 16       	lddpc	r6,80018500 <initSPI+0x18c>
8001837e:	1e 26       	rsub	r6,pc
80018380:	ef 4c ff fc 	st.w	r7[-4],r12
80018384:	ef 4b ff f8 	st.w	r7[-8],r11
80018388:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001838c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018390:	f0 08 10 54 	mul	r8,r8,84
80018394:	f2 08 00 08 	add	r8,r9,r8
80018398:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001839c:	91 09       	st.w	r8[0x0],r9
8001839e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183a2:	ec f9 00 2c 	ld.w	r9,r6[44]
800183a6:	f0 08 10 54 	mul	r8,r8,84
800183aa:	f2 08 00 08 	add	r8,r9,r8
800183ae:	f0 c9 ff b0 	sub	r9,r8,-80
800183b2:	30 08       	mov	r8,0
800183b4:	b2 88       	st.b	r9[0x0],r8
800183b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183ba:	ec f9 00 2c 	ld.w	r9,r6[44]
800183be:	f0 08 10 54 	mul	r8,r8,84
800183c2:	f2 08 00 08 	add	r8,r9,r8
800183c6:	70 08       	ld.w	r8,r8[0x0]
800183c8:	10 9c       	mov	r12,r8
800183ca:	c0 1f       	rcall	800181cc <spi_master_init>
800183cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183d0:	f0 08 10 54 	mul	r8,r8,84
800183d4:	f0 c9 ff b0 	sub	r9,r8,-80
800183d8:	ec f8 00 2c 	ld.w	r8,r6[44]
800183dc:	f2 08 00 0b 	add	r11,r9,r8
800183e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183e4:	ec f9 00 2c 	ld.w	r9,r6[44]
800183e8:	f0 08 10 54 	mul	r8,r8,84
800183ec:	f2 08 00 08 	add	r8,r9,r8
800183f0:	70 0c       	ld.w	r12,r8[0x0]
800183f2:	30 08       	mov	r8,0
800183f4:	e0 69 2d 00 	mov	r9,11520
800183f8:	ea 19 01 31 	orh	r9,0x131
800183fc:	30 0a       	mov	r10,0
800183fe:	f0 16 01 6c 	mcall	r6[1456]
80018402:	30 0b       	mov	r11,0
80018404:	36 0c       	mov	r12,96
80018406:	f0 16 00 3f 	mcall	r6[252]
8001840a:	30 0b       	mov	r11,0
8001840c:	36 1c       	mov	r12,97
8001840e:	f0 16 00 3f 	mcall	r6[252]
80018412:	30 0b       	mov	r11,0
80018414:	36 2c       	mov	r12,98
80018416:	f0 16 00 3f 	mcall	r6[252]
8001841a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001841e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018422:	f0 08 10 54 	mul	r8,r8,84
80018426:	f2 08 00 08 	add	r8,r9,r8
8001842a:	f0 c9 ff bc 	sub	r9,r8,-68
8001842e:	30 08       	mov	r8,0
80018430:	b2 88       	st.b	r9[0x0],r8
80018432:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018436:	ec f9 00 2c 	ld.w	r9,r6[44]
8001843a:	f0 08 10 54 	mul	r8,r8,84
8001843e:	f2 08 00 08 	add	r8,r9,r8
80018442:	f0 c9 ff bc 	sub	r9,r8,-68
80018446:	30 08       	mov	r8,0
80018448:	b2 98       	st.b	r9[0x1],r8
8001844a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001844e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018452:	f0 08 10 54 	mul	r8,r8,84
80018456:	f2 08 00 08 	add	r8,r9,r8
8001845a:	f0 c9 ff bc 	sub	r9,r8,-68
8001845e:	30 08       	mov	r8,0
80018460:	b2 a8       	st.b	r9[0x2],r8
80018462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018466:	ec f9 00 2c 	ld.w	r9,r6[44]
8001846a:	f0 08 10 54 	mul	r8,r8,84
8001846e:	f2 08 00 08 	add	r8,r9,r8
80018472:	f0 c9 ff bc 	sub	r9,r8,-68
80018476:	30 08       	mov	r8,0
80018478:	b2 b8       	st.b	r9[0x3],r8
8001847a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001847e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018482:	f0 08 10 54 	mul	r8,r8,84
80018486:	f2 08 00 08 	add	r8,r9,r8
8001848a:	f0 c9 ff b8 	sub	r9,r8,-72
8001848e:	30 18       	mov	r8,1
80018490:	b2 88       	st.b	r9[0x0],r8
80018492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018496:	ec f9 00 2c 	ld.w	r9,r6[44]
8001849a:	f0 08 10 54 	mul	r8,r8,84
8001849e:	f2 08 00 08 	add	r8,r9,r8
800184a2:	f0 c9 ff b8 	sub	r9,r8,-72
800184a6:	30 08       	mov	r8,0
800184a8:	b2 98       	st.b	r9[0x1],r8
800184aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184ae:	ec f9 00 2c 	ld.w	r9,r6[44]
800184b2:	f0 08 10 54 	mul	r8,r8,84
800184b6:	f2 08 00 08 	add	r8,r9,r8
800184ba:	f0 c9 ff b8 	sub	r9,r8,-72
800184be:	30 18       	mov	r8,1
800184c0:	b2 b8       	st.b	r9[0x3],r8
800184c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184c6:	ec f9 00 2c 	ld.w	r9,r6[44]
800184ca:	f0 08 10 54 	mul	r8,r8,84
800184ce:	f2 08 00 08 	add	r8,r9,r8
800184d2:	2b 48       	sub	r8,-76
800184d4:	30 09       	mov	r9,0
800184d6:	91 09       	st.w	r8[0x0],r9
800184d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184dc:	ec f9 00 2c 	ld.w	r9,r6[44]
800184e0:	f0 08 10 54 	mul	r8,r8,84
800184e4:	f2 08 00 08 	add	r8,r9,r8
800184e8:	f0 c9 ff b8 	sub	r9,r8,-72
800184ec:	30 08       	mov	r8,0
800184ee:	b2 a8       	st.b	r9[0x2],r8
800184f0:	ee fc ff f8 	ld.w	r12,r7[-8]
800184f4:	f0 16 01 ad 	mcall	r6[1716]
800184f8:	2f ed       	sub	sp,-8
800184fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184fe:	00 00       	add	r0,r0
80018500:	80 01       	ld.sh	r1,r0[0x0]
80018502:	82 02       	ld.sh	r2,r1[0x0]

80018504 <enableSPI>:
80018504:	eb cd 40 c0 	pushm	r6-r7,lr
80018508:	1a 97       	mov	r7,sp
8001850a:	20 1d       	sub	sp,4
8001850c:	48 a6       	lddpc	r6,80018534 <enableSPI+0x30>
8001850e:	1e 26       	rsub	r6,pc
80018510:	ef 4c ff fc 	st.w	r7[-4],r12
80018514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018518:	ec f9 00 2c 	ld.w	r9,r6[44]
8001851c:	f0 08 10 54 	mul	r8,r8,84
80018520:	f2 08 00 08 	add	r8,r9,r8
80018524:	70 08       	ld.w	r8,r8[0x0]
80018526:	10 9c       	mov	r12,r8
80018528:	f0 16 01 af 	mcall	r6[1724]
8001852c:	2f fd       	sub	sp,-4
8001852e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018532:	00 00       	add	r0,r0
80018534:	80 01       	ld.sh	r1,r0[0x0]
80018536:	83 92       	st.w	r1[0x24],r2

80018538 <disableSPI>:
80018538:	eb cd 40 c0 	pushm	r6-r7,lr
8001853c:	1a 97       	mov	r7,sp
8001853e:	20 1d       	sub	sp,4
80018540:	48 a6       	lddpc	r6,80018568 <disableSPI+0x30>
80018542:	1e 26       	rsub	r6,pc
80018544:	ef 4c ff fc 	st.w	r7[-4],r12
80018548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001854c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018550:	f0 08 10 54 	mul	r8,r8,84
80018554:	f2 08 00 08 	add	r8,r9,r8
80018558:	70 08       	ld.w	r8,r8[0x0]
8001855a:	10 9c       	mov	r12,r8
8001855c:	f0 16 01 53 	mcall	r6[1356]
80018560:	2f fd       	sub	sp,-4
80018562:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018566:	00 00       	add	r0,r0
80018568:	80 01       	ld.sh	r1,r0[0x0]
8001856a:	83 c6       	st.w	r1[0x30],r6

8001856c <spiInitDMA>:
8001856c:	eb cd 40 c0 	pushm	r6-r7,lr
80018570:	1a 97       	mov	r7,sp
80018572:	20 2d       	sub	sp,8
80018574:	49 c6       	lddpc	r6,800185e4 <spiInitDMA+0x78>
80018576:	1e 26       	rsub	r6,pc
80018578:	ef 4c ff fc 	st.w	r7[-4],r12
8001857c:	ef 4b ff f8 	st.w	r7[-8],r11
80018580:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018584:	12 98       	mov	r8,r9
80018586:	a1 78       	lsl	r8,0x1
80018588:	12 08       	add	r8,r9
8001858a:	f0 09 15 03 	lsl	r9,r8,0x3
8001858e:	10 19       	sub	r9,r8
80018590:	f2 c8 ff ff 	sub	r8,r9,-1
80018594:	f0 09 15 02 	lsl	r9,r8,0x2
80018598:	ec f8 00 2c 	ld.w	r8,r6[44]
8001859c:	10 09       	add	r9,r8
8001859e:	ec f8 04 d4 	ld.w	r8,r6[1236]
800185a2:	91 09       	st.w	r8[0x0],r9
800185a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185a8:	f0 08 10 54 	mul	r8,r8,84
800185ac:	f0 c9 ff dc 	sub	r9,r8,-36
800185b0:	ec f8 00 2c 	ld.w	r8,r6[44]
800185b4:	10 09       	add	r9,r8
800185b6:	ec f8 04 d0 	ld.w	r8,r6[1232]
800185ba:	91 09       	st.w	r8[0x0],r9
800185bc:	ec fb 04 d4 	ld.w	r11,r6[1236]
800185c0:	30 0c       	mov	r12,0
800185c2:	f0 16 00 77 	mcall	r6[476]
800185c6:	ec fb 04 d0 	ld.w	r11,r6[1232]
800185ca:	30 1c       	mov	r12,1
800185cc:	f0 16 00 77 	mcall	r6[476]
800185d0:	30 0a       	mov	r10,0
800185d2:	36 1b       	mov	r11,97
800185d4:	fe cc 02 d4 	sub	r12,pc,724
800185d8:	f0 16 00 3b 	mcall	r6[236]
800185dc:	2f ed       	sub	sp,-8
800185de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800185e2:	00 00       	add	r0,r0
800185e4:	80 01       	ld.sh	r1,r0[0x0]
800185e6:	83 fa       	st.w	r1[0x3c],r10

800185e8 <spiTriggerDMA>:
800185e8:	eb cd 40 c0 	pushm	r6-r7,lr
800185ec:	1a 97       	mov	r7,sp
800185ee:	20 2d       	sub	sp,8
800185f0:	4a 86       	lddpc	r6,80018690 <spiTriggerDMA+0xa8>
800185f2:	1e 26       	rsub	r6,pc
800185f4:	ef 4c ff fc 	st.w	r7[-4],r12
800185f8:	ef 4b ff f8 	st.w	r7[-8],r11
800185fc:	ee fa ff f8 	ld.w	r10,r7[-8]
80018600:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018604:	12 98       	mov	r8,r9
80018606:	a1 78       	lsl	r8,0x1
80018608:	12 08       	add	r8,r9
8001860a:	f0 09 15 03 	lsl	r9,r8,0x3
8001860e:	10 19       	sub	r9,r8
80018610:	f2 c8 ff ff 	sub	r8,r9,-1
80018614:	f0 09 15 02 	lsl	r9,r8,0x2
80018618:	ec f8 00 2c 	ld.w	r8,r6[44]
8001861c:	f2 08 00 08 	add	r8,r9,r8
80018620:	10 9b       	mov	r11,r8
80018622:	30 0c       	mov	r12,0
80018624:	f0 16 00 b9 	mcall	r6[740]
80018628:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001862c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018630:	f0 08 10 54 	mul	r8,r8,84
80018634:	f0 ca ff dc 	sub	r10,r8,-36
80018638:	ec f8 00 2c 	ld.w	r8,r6[44]
8001863c:	f4 08 00 08 	add	r8,r10,r8
80018640:	12 9a       	mov	r10,r9
80018642:	10 9b       	mov	r11,r8
80018644:	30 1c       	mov	r12,1
80018646:	f0 16 00 b9 	mcall	r6[740]
8001864a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001864e:	f0 08 10 54 	mul	r8,r8,84
80018652:	f0 c9 ff b0 	sub	r9,r8,-80
80018656:	ec f8 00 2c 	ld.w	r8,r6[44]
8001865a:	10 09       	add	r9,r8
8001865c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018660:	ec fa 00 2c 	ld.w	r10,r6[44]
80018664:	f0 08 10 54 	mul	r8,r8,84
80018668:	f4 08 00 08 	add	r8,r10,r8
8001866c:	70 08       	ld.w	r8,r8[0x0]
8001866e:	12 9b       	mov	r11,r9
80018670:	10 9c       	mov	r12,r8
80018672:	fe b0 fd e3 	rcall	80018238 <spi_select_device>
80018676:	30 1c       	mov	r12,1
80018678:	f0 16 00 b8 	mcall	r6[736]
8001867c:	30 1c       	mov	r12,1
8001867e:	f0 16 00 92 	mcall	r6[584]
80018682:	30 0c       	mov	r12,0
80018684:	f0 16 00 92 	mcall	r6[584]
80018688:	2f ed       	sub	sp,-8
8001868a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001868e:	00 00       	add	r0,r0
80018690:	80 01       	ld.sh	r1,r0[0x0]
80018692:	84 76       	ld.sh	r6,r2[0xe]

80018694 <setSPIcallBack>:
80018694:	eb cd 40 c0 	pushm	r6-r7,lr
80018698:	1a 97       	mov	r7,sp
8001869a:	20 2d       	sub	sp,8
8001869c:	48 b6       	lddpc	r6,800186c8 <setSPIcallBack+0x34>
8001869e:	1e 26       	rsub	r6,pc
800186a0:	ef 4c ff fc 	st.w	r7[-4],r12
800186a4:	ef 4b ff f8 	st.w	r7[-8],r11
800186a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186ac:	ec f9 00 2c 	ld.w	r9,r6[44]
800186b0:	f0 08 10 54 	mul	r8,r8,84
800186b4:	f2 08 00 08 	add	r8,r9,r8
800186b8:	2b 48       	sub	r8,-76
800186ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800186be:	91 09       	st.w	r8[0x0],r9
800186c0:	2f ed       	sub	sp,-8
800186c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186c6:	00 00       	add	r0,r0
800186c8:	80 01       	ld.sh	r1,r0[0x0]
800186ca:	85 22       	st.w	r2[0x8],r2

800186cc <pauseSPI>:
800186cc:	eb cd 40 c0 	pushm	r6-r7,lr
800186d0:	1a 97       	mov	r7,sp
800186d2:	20 1d       	sub	sp,4
800186d4:	48 a6       	lddpc	r6,800186fc <pauseSPI+0x30>
800186d6:	1e 26       	rsub	r6,pc
800186d8:	ef 4c ff fc 	st.w	r7[-4],r12
800186dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186e0:	ec f9 00 2c 	ld.w	r9,r6[44]
800186e4:	f0 08 10 54 	mul	r8,r8,84
800186e8:	f2 08 00 08 	add	r8,r9,r8
800186ec:	f0 c9 ff b8 	sub	r9,r8,-72
800186f0:	30 08       	mov	r8,0
800186f2:	b2 b8       	st.b	r9[0x3],r8
800186f4:	2f fd       	sub	sp,-4
800186f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186fa:	00 00       	add	r0,r0
800186fc:	80 01       	ld.sh	r1,r0[0x0]
800186fe:	85 5a       	st.w	r2[0x14],r10

80018700 <resumeSPI>:
80018700:	eb cd 40 c0 	pushm	r6-r7,lr
80018704:	1a 97       	mov	r7,sp
80018706:	20 1d       	sub	sp,4
80018708:	48 c6       	lddpc	r6,80018738 <resumeSPI+0x38>
8001870a:	1e 26       	rsub	r6,pc
8001870c:	ef 4c ff fc 	st.w	r7[-4],r12
80018710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018714:	ec f9 00 2c 	ld.w	r9,r6[44]
80018718:	f0 08 10 54 	mul	r8,r8,84
8001871c:	f2 08 00 08 	add	r8,r9,r8
80018720:	f0 c9 ff b8 	sub	r9,r8,-72
80018724:	30 18       	mov	r8,1
80018726:	b2 b8       	st.b	r9[0x3],r8
80018728:	ee fc ff fc 	ld.w	r12,r7[-4]
8001872c:	f0 16 00 ee 	mcall	r6[952]
80018730:	2f fd       	sub	sp,-4
80018732:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018736:	00 00       	add	r0,r0
80018738:	80 01       	ld.sh	r1,r0[0x0]
8001873a:	85 8e       	st.w	r2[0x20],lr

8001873c <activateReceiveSPI>:
8001873c:	eb cd 40 c0 	pushm	r6-r7,lr
80018740:	1a 97       	mov	r7,sp
80018742:	20 1d       	sub	sp,4
80018744:	48 a6       	lddpc	r6,8001876c <activateReceiveSPI+0x30>
80018746:	1e 26       	rsub	r6,pc
80018748:	ef 4c ff fc 	st.w	r7[-4],r12
8001874c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018750:	ec f9 00 2c 	ld.w	r9,r6[44]
80018754:	f0 08 10 54 	mul	r8,r8,84
80018758:	f2 08 00 08 	add	r8,r9,r8
8001875c:	f0 c9 ff b8 	sub	r9,r8,-72
80018760:	30 18       	mov	r8,1
80018762:	b2 88       	st.b	r9[0x0],r8
80018764:	2f fd       	sub	sp,-4
80018766:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001876a:	00 00       	add	r0,r0
8001876c:	80 01       	ld.sh	r1,r0[0x0]
8001876e:	85 ca       	st.w	r2[0x30],r10

80018770 <deactivateReceiveSPI>:
80018770:	eb cd 40 c0 	pushm	r6-r7,lr
80018774:	1a 97       	mov	r7,sp
80018776:	20 1d       	sub	sp,4
80018778:	48 a6       	lddpc	r6,800187a0 <deactivateReceiveSPI+0x30>
8001877a:	1e 26       	rsub	r6,pc
8001877c:	ef 4c ff fc 	st.w	r7[-4],r12
80018780:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018784:	ec f9 00 2c 	ld.w	r9,r6[44]
80018788:	f0 08 10 54 	mul	r8,r8,84
8001878c:	f2 08 00 08 	add	r8,r9,r8
80018790:	f0 c9 ff b8 	sub	r9,r8,-72
80018794:	30 08       	mov	r8,0
80018796:	b2 88       	st.b	r9[0x0],r8
80018798:	2f fd       	sub	sp,-4
8001879a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001879e:	00 00       	add	r0,r0
800187a0:	80 01       	ld.sh	r1,r0[0x0]
800187a2:	85 fe       	st.w	r2[0x3c],lr

800187a4 <getTraffic>:
800187a4:	eb cd 40 c0 	pushm	r6-r7,lr
800187a8:	1a 97       	mov	r7,sp
800187aa:	20 1d       	sub	sp,4
800187ac:	48 a6       	lddpc	r6,800187d4 <getTraffic+0x30>
800187ae:	1e 26       	rsub	r6,pc
800187b0:	ef 4c ff fc 	st.w	r7[-4],r12
800187b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800187b8:	ec f9 00 2c 	ld.w	r9,r6[44]
800187bc:	f0 08 10 54 	mul	r8,r8,84
800187c0:	f2 08 00 08 	add	r8,r9,r8
800187c4:	2b 88       	sub	r8,-72
800187c6:	11 98       	ld.ub	r8,r8[0x1]
800187c8:	5c 58       	castu.b	r8
800187ca:	10 9c       	mov	r12,r8
800187cc:	2f fd       	sub	sp,-4
800187ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187d2:	00 00       	add	r0,r0
800187d4:	80 01       	ld.sh	r1,r0[0x0]
800187d6:	86 32       	ld.sh	r2,r3[0x6]

800187d8 <readSPI>:
800187d8:	eb cd 40 c0 	pushm	r6-r7,lr
800187dc:	1a 97       	mov	r7,sp
800187de:	20 2d       	sub	sp,8
800187e0:	4a b6       	lddpc	r6,8001888c <readSPI+0xb4>
800187e2:	1e 26       	rsub	r6,pc
800187e4:	ef 4c ff f8 	st.w	r7[-8],r12
800187e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187ec:	ec f9 00 2c 	ld.w	r9,r6[44]
800187f0:	f0 08 10 54 	mul	r8,r8,84
800187f4:	f2 08 00 08 	add	r8,r9,r8
800187f8:	2b c8       	sub	r8,-68
800187fa:	11 88       	ld.ub	r8,r8[0x0]
800187fc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018800:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018804:	ec fa 00 2c 	ld.w	r10,r6[44]
80018808:	f0 08 10 54 	mul	r8,r8,84
8001880c:	f4 08 00 08 	add	r8,r10,r8
80018810:	2b c8       	sub	r8,-68
80018812:	11 98       	ld.ub	r8,r8[0x1]
80018814:	5c 58       	castu.b	r8
80018816:	f0 09 18 00 	cp.b	r9,r8
8001881a:	ce 70       	breq	800187e8 <readSPI+0x10>
8001881c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018824:	ec fa 00 2c 	ld.w	r10,r6[44]
80018828:	f0 08 10 54 	mul	r8,r8,84
8001882c:	f4 08 00 08 	add	r8,r10,r8
80018830:	2b c8       	sub	r8,-68
80018832:	11 98       	ld.ub	r8,r8[0x1]
80018834:	5c 58       	castu.b	r8
80018836:	ec fa 00 2c 	ld.w	r10,r6[44]
8001883a:	f2 09 10 54 	mul	r9,r9,84
8001883e:	f4 09 00 09 	add	r9,r10,r9
80018842:	f2 08 00 08 	add	r8,r9,r8
80018846:	2d c8       	sub	r8,-36
80018848:	11 88       	ld.ub	r8,r8[0x0]
8001884a:	ef 68 ff ff 	st.b	r7[-1],r8
8001884e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018856:	ec fa 00 2c 	ld.w	r10,r6[44]
8001885a:	f0 08 10 54 	mul	r8,r8,84
8001885e:	f4 08 00 08 	add	r8,r10,r8
80018862:	2b c8       	sub	r8,-68
80018864:	11 98       	ld.ub	r8,r8[0x1]
80018866:	5c 58       	castu.b	r8
80018868:	2f f8       	sub	r8,-1
8001886a:	5c 58       	castu.b	r8
8001886c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018870:	ec fa 00 2c 	ld.w	r10,r6[44]
80018874:	f2 09 10 54 	mul	r9,r9,84
80018878:	f4 09 00 09 	add	r9,r10,r9
8001887c:	2b c9       	sub	r9,-68
8001887e:	b2 98       	st.b	r9[0x1],r8
80018880:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018884:	10 9c       	mov	r12,r8
80018886:	2f ed       	sub	sp,-8
80018888:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001888c:	80 01       	ld.sh	r1,r0[0x0]
8001888e:	86 66       	ld.sh	r6,r3[0xc]

80018890 <clearSPIReadBuffer>:
80018890:	eb cd 40 c0 	pushm	r6-r7,lr
80018894:	1a 97       	mov	r7,sp
80018896:	20 1d       	sub	sp,4
80018898:	48 e6       	lddpc	r6,800188d0 <clearSPIReadBuffer+0x40>
8001889a:	1e 26       	rsub	r6,pc
8001889c:	ef 4c ff fc 	st.w	r7[-4],r12
800188a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800188a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800188a8:	ec fa 00 2c 	ld.w	r10,r6[44]
800188ac:	f0 08 10 54 	mul	r8,r8,84
800188b0:	f4 08 00 08 	add	r8,r10,r8
800188b4:	2b c8       	sub	r8,-68
800188b6:	11 88       	ld.ub	r8,r8[0x0]
800188b8:	5c 58       	castu.b	r8
800188ba:	ec fa 00 2c 	ld.w	r10,r6[44]
800188be:	f2 09 10 54 	mul	r9,r9,84
800188c2:	f4 09 00 09 	add	r9,r10,r9
800188c6:	2b c9       	sub	r9,-68
800188c8:	b2 98       	st.b	r9[0x1],r8
800188ca:	2f fd       	sub	sp,-4
800188cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800188d0:	80 01       	ld.sh	r1,r0[0x0]
800188d2:	87 1e       	st.w	r3[0x4],lr

800188d4 <writeSPI>:
800188d4:	eb cd 40 c0 	pushm	r6-r7,lr
800188d8:	1a 97       	mov	r7,sp
800188da:	20 3d       	sub	sp,12
800188dc:	4a b6       	lddpc	r6,80018988 <writeSPI+0xb4>
800188de:	1e 26       	rsub	r6,pc
800188e0:	ef 4c ff f8 	st.w	r7[-8],r12
800188e4:	16 98       	mov	r8,r11
800188e6:	ef 68 ff f4 	st.b	r7[-12],r8
800188ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188ee:	ec f9 00 2c 	ld.w	r9,r6[44]
800188f2:	f0 08 10 54 	mul	r8,r8,84
800188f6:	f2 08 00 08 	add	r8,r9,r8
800188fa:	2b c8       	sub	r8,-68
800188fc:	11 a8       	ld.ub	r8,r8[0x2]
800188fe:	5c 58       	castu.b	r8
80018900:	2f f8       	sub	r8,-1
80018902:	5c 58       	castu.b	r8
80018904:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018908:	ef 68 ff ff 	st.b	r7[-1],r8
8001890c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018914:	ec fa 00 2c 	ld.w	r10,r6[44]
80018918:	f0 08 10 54 	mul	r8,r8,84
8001891c:	f4 08 00 08 	add	r8,r10,r8
80018920:	2b c8       	sub	r8,-68
80018922:	11 a8       	ld.ub	r8,r8[0x2]
80018924:	5c 58       	castu.b	r8
80018926:	ec fa 00 2c 	ld.w	r10,r6[44]
8001892a:	f2 09 10 54 	mul	r9,r9,84
8001892e:	f4 09 00 09 	add	r9,r10,r9
80018932:	f2 08 00 08 	add	r8,r9,r8
80018936:	f0 c9 ff fc 	sub	r9,r8,-4
8001893a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001893e:	b2 88       	st.b	r9[0x0],r8
80018940:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018944:	ec f9 00 2c 	ld.w	r9,r6[44]
80018948:	f0 08 10 54 	mul	r8,r8,84
8001894c:	f2 08 00 08 	add	r8,r9,r8
80018950:	f0 c9 ff bc 	sub	r9,r8,-68
80018954:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018958:	b2 a8       	st.b	r9[0x2],r8
8001895a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001895e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018962:	f0 08 10 54 	mul	r8,r8,84
80018966:	f2 08 00 08 	add	r8,r9,r8
8001896a:	2b 88       	sub	r8,-72
8001896c:	11 b8       	ld.ub	r8,r8[0x3]
8001896e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018972:	30 18       	mov	r8,1
80018974:	f0 09 18 00 	cp.b	r9,r8
80018978:	c0 51       	brne	80018982 <writeSPI+0xae>
8001897a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001897e:	f0 16 00 ee 	mcall	r6[952]
80018982:	2f dd       	sub	sp,-12
80018984:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018988:	80 01       	ld.sh	r1,r0[0x0]
8001898a:	87 62       	st.w	r3[0x18],r2

8001898c <SPItransmit>:
8001898c:	eb cd 40 c0 	pushm	r6-r7,lr
80018990:	1a 97       	mov	r7,sp
80018992:	20 1d       	sub	sp,4
80018994:	4d 66       	lddpc	r6,80018aec <SPItransmit+0x160>
80018996:	1e 26       	rsub	r6,pc
80018998:	ef 4c ff fc 	st.w	r7[-4],r12
8001899c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189a0:	ec f9 00 2c 	ld.w	r9,r6[44]
800189a4:	f0 08 10 54 	mul	r8,r8,84
800189a8:	f2 08 00 08 	add	r8,r9,r8
800189ac:	2b c8       	sub	r8,-68
800189ae:	11 a8       	ld.ub	r8,r8[0x2]
800189b0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800189b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189b8:	ec fa 00 2c 	ld.w	r10,r6[44]
800189bc:	f0 08 10 54 	mul	r8,r8,84
800189c0:	f4 08 00 08 	add	r8,r10,r8
800189c4:	2b c8       	sub	r8,-68
800189c6:	11 b8       	ld.ub	r8,r8[0x3]
800189c8:	5c 58       	castu.b	r8
800189ca:	f0 09 18 00 	cp.b	r9,r8
800189ce:	c4 90       	breq	80018a60 <SPItransmit+0xd4>
800189d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189d4:	ec f9 00 2c 	ld.w	r9,r6[44]
800189d8:	f0 08 10 54 	mul	r8,r8,84
800189dc:	f2 08 00 08 	add	r8,r9,r8
800189e0:	70 09       	ld.w	r9,r8[0x0]
800189e2:	ee fa ff fc 	ld.w	r10,r7[-4]
800189e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189ea:	ec fb 00 2c 	ld.w	r11,r6[44]
800189ee:	f0 08 10 54 	mul	r8,r8,84
800189f2:	f6 08 00 08 	add	r8,r11,r8
800189f6:	2b c8       	sub	r8,-68
800189f8:	11 b8       	ld.ub	r8,r8[0x3]
800189fa:	5c 58       	castu.b	r8
800189fc:	ec fb 00 2c 	ld.w	r11,r6[44]
80018a00:	f4 0a 10 54 	mul	r10,r10,84
80018a04:	f6 0a 00 0a 	add	r10,r11,r10
80018a08:	f4 08 00 08 	add	r8,r10,r8
80018a0c:	2f c8       	sub	r8,-4
80018a0e:	11 88       	ld.ub	r8,r8[0x0]
80018a10:	5c 58       	castu.b	r8
80018a12:	93 38       	st.w	r9[0xc],r8
80018a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a18:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a1c:	f0 08 10 54 	mul	r8,r8,84
80018a20:	f2 08 00 08 	add	r8,r9,r8
80018a24:	f0 c9 ff b8 	sub	r9,r8,-72
80018a28:	30 18       	mov	r8,1
80018a2a:	b2 a8       	st.b	r9[0x2],r8
80018a2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a34:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a38:	f0 08 10 54 	mul	r8,r8,84
80018a3c:	f4 08 00 08 	add	r8,r10,r8
80018a40:	2b c8       	sub	r8,-68
80018a42:	11 b8       	ld.ub	r8,r8[0x3]
80018a44:	5c 58       	castu.b	r8
80018a46:	2f f8       	sub	r8,-1
80018a48:	5c 58       	castu.b	r8
80018a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018a4e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a52:	f2 09 10 54 	mul	r9,r9,84
80018a56:	f4 09 00 09 	add	r9,r10,r9
80018a5a:	2b c9       	sub	r9,-68
80018a5c:	b2 b8       	st.b	r9[0x3],r8
80018a5e:	c4 38       	rjmp	80018ae4 <SPItransmit+0x158>
80018a60:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a68:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a6c:	f0 08 10 54 	mul	r8,r8,84
80018a70:	f4 08 00 08 	add	r8,r10,r8
80018a74:	2b c8       	sub	r8,-68
80018a76:	11 a8       	ld.ub	r8,r8[0x2]
80018a78:	5c 58       	castu.b	r8
80018a7a:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a7e:	f2 09 10 54 	mul	r9,r9,84
80018a82:	f4 09 00 09 	add	r9,r10,r9
80018a86:	2b c9       	sub	r9,-68
80018a88:	b2 b8       	st.b	r9[0x3],r8
80018a8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a8e:	f0 08 10 54 	mul	r8,r8,84
80018a92:	f0 c9 ff b0 	sub	r9,r8,-80
80018a96:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a9a:	10 09       	add	r9,r8
80018a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aa0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018aa4:	f0 08 10 54 	mul	r8,r8,84
80018aa8:	f4 08 00 08 	add	r8,r10,r8
80018aac:	70 08       	ld.w	r8,r8[0x0]
80018aae:	12 9b       	mov	r11,r9
80018ab0:	10 9c       	mov	r12,r8
80018ab2:	fe b0 fb db 	rcall	80018268 <spi_deselect_device>
80018ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aba:	ec f9 00 2c 	ld.w	r9,r6[44]
80018abe:	f0 08 10 54 	mul	r8,r8,84
80018ac2:	f2 08 00 08 	add	r8,r9,r8
80018ac6:	f0 c9 ff b8 	sub	r9,r8,-72
80018aca:	30 08       	mov	r8,0
80018acc:	b2 a8       	st.b	r9[0x2],r8
80018ace:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ad2:	ec f9 00 2c 	ld.w	r9,r6[44]
80018ad6:	f0 08 10 54 	mul	r8,r8,84
80018ada:	f2 08 00 08 	add	r8,r9,r8
80018ade:	70 08       	ld.w	r8,r8[0x0]
80018ae0:	30 39       	mov	r9,3
80018ae2:	91 69       	st.w	r8[0x18],r9
80018ae4:	2f fd       	sub	sp,-4
80018ae6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018aea:	00 00       	add	r0,r0
80018aec:	80 01       	ld.sh	r1,r0[0x0]
80018aee:	88 1a       	ld.sh	r10,r4[0x2]

80018af0 <startSPI>:
80018af0:	eb cd 40 c0 	pushm	r6-r7,lr
80018af4:	1a 97       	mov	r7,sp
80018af6:	20 1d       	sub	sp,4
80018af8:	4a f6       	lddpc	r6,80018bb4 <startSPI+0xc4>
80018afa:	1e 26       	rsub	r6,pc
80018afc:	ef 4c ff fc 	st.w	r7[-4],r12
80018b00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b04:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b08:	f0 08 10 54 	mul	r8,r8,84
80018b0c:	f2 08 00 08 	add	r8,r9,r8
80018b10:	2b 88       	sub	r8,-72
80018b12:	11 a8       	ld.ub	r8,r8[0x2]
80018b14:	5c 58       	castu.b	r8
80018b16:	c4 c1       	brne	80018bae <startSPI+0xbe>
80018b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b1c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b20:	f0 08 10 54 	mul	r8,r8,84
80018b24:	f2 08 00 08 	add	r8,r9,r8
80018b28:	2b c8       	sub	r8,-68
80018b2a:	11 a8       	ld.ub	r8,r8[0x2]
80018b2c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b34:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b38:	f0 08 10 54 	mul	r8,r8,84
80018b3c:	f4 08 00 08 	add	r8,r10,r8
80018b40:	2b c8       	sub	r8,-68
80018b42:	11 b8       	ld.ub	r8,r8[0x3]
80018b44:	5c 58       	castu.b	r8
80018b46:	f0 09 18 00 	cp.b	r9,r8
80018b4a:	c3 20       	breq	80018bae <startSPI+0xbe>
80018b4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b50:	f0 08 10 54 	mul	r8,r8,84
80018b54:	f0 c9 ff b0 	sub	r9,r8,-80
80018b58:	ec f8 00 2c 	ld.w	r8,r6[44]
80018b5c:	10 09       	add	r9,r8
80018b5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b62:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b66:	f0 08 10 54 	mul	r8,r8,84
80018b6a:	f4 08 00 08 	add	r8,r10,r8
80018b6e:	70 08       	ld.w	r8,r8[0x0]
80018b70:	12 9b       	mov	r11,r9
80018b72:	10 9c       	mov	r12,r8
80018b74:	fe b0 fb 62 	rcall	80018238 <spi_select_device>
80018b78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b7c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b80:	f0 08 10 54 	mul	r8,r8,84
80018b84:	f2 08 00 08 	add	r8,r9,r8
80018b88:	f0 c9 ff b8 	sub	r9,r8,-72
80018b8c:	30 18       	mov	r8,1
80018b8e:	b2 a8       	st.b	r9[0x2],r8
80018b90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b94:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b98:	f0 08 10 54 	mul	r8,r8,84
80018b9c:	f2 08 00 08 	add	r8,r9,r8
80018ba0:	70 08       	ld.w	r8,r8[0x0]
80018ba2:	30 39       	mov	r9,3
80018ba4:	91 59       	st.w	r8[0x14],r9
80018ba6:	ee fc ff fc 	ld.w	r12,r7[-4]
80018baa:	f0 16 01 30 	mcall	r6[1216]
80018bae:	2f fd       	sub	sp,-4
80018bb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018bb4:	80 01       	ld.sh	r1,r0[0x0]
80018bb6:	89 7e       	st.w	r4[0x1c],lr

80018bb8 <SPITransferFinished>:
80018bb8:	eb cd 40 c0 	pushm	r6-r7,lr
80018bbc:	1a 97       	mov	r7,sp
80018bbe:	20 1d       	sub	sp,4
80018bc0:	49 16       	lddpc	r6,80018c04 <SPITransferFinished+0x4c>
80018bc2:	1e 26       	rsub	r6,pc
80018bc4:	ef 4c ff fc 	st.w	r7[-4],r12
80018bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bcc:	ec f9 00 2c 	ld.w	r9,r6[44]
80018bd0:	f0 08 10 54 	mul	r8,r8,84
80018bd4:	f2 08 00 08 	add	r8,r9,r8
80018bd8:	2b c8       	sub	r8,-68
80018bda:	11 a8       	ld.ub	r8,r8[0x2]
80018bdc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018be4:	ec fa 00 2c 	ld.w	r10,r6[44]
80018be8:	f0 08 10 54 	mul	r8,r8,84
80018bec:	f4 08 00 08 	add	r8,r10,r8
80018bf0:	2b c8       	sub	r8,-68
80018bf2:	11 b8       	ld.ub	r8,r8[0x3]
80018bf4:	5c 58       	castu.b	r8
80018bf6:	f0 09 18 00 	cp.b	r9,r8
80018bfa:	5f 08       	sreq	r8
80018bfc:	10 9c       	mov	r12,r8
80018bfe:	2f fd       	sub	sp,-4
80018c00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c04:	80 01       	ld.sh	r1,r0[0x0]
80018c06:	8a 46       	ld.sh	r6,r5[0x8]

80018c08 <SPIFlushBuffer>:
80018c08:	eb cd 40 c0 	pushm	r6-r7,lr
80018c0c:	1a 97       	mov	r7,sp
80018c0e:	20 1d       	sub	sp,4
80018c10:	49 36       	lddpc	r6,80018c5c <SPIFlushBuffer+0x54>
80018c12:	1e 26       	rsub	r6,pc
80018c14:	ef 4c ff fc 	st.w	r7[-4],r12
80018c18:	ee fc ff fc 	ld.w	r12,r7[-4]
80018c1c:	f0 16 01 ee 	mcall	r6[1976]
80018c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c24:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c28:	f0 08 10 54 	mul	r8,r8,84
80018c2c:	f2 08 00 08 	add	r8,r9,r8
80018c30:	2b c8       	sub	r8,-68
80018c32:	11 a8       	ld.ub	r8,r8[0x2]
80018c34:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c3c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c40:	f0 08 10 54 	mul	r8,r8,84
80018c44:	f4 08 00 08 	add	r8,r10,r8
80018c48:	2b c8       	sub	r8,-68
80018c4a:	11 b8       	ld.ub	r8,r8[0x3]
80018c4c:	5c 58       	castu.b	r8
80018c4e:	f0 09 18 00 	cp.b	r9,r8
80018c52:	ce 71       	brne	80018c20 <SPIFlushBuffer+0x18>
80018c54:	2f fd       	sub	sp,-4
80018c56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c5a:	00 00       	add	r0,r0
80018c5c:	80 01       	ld.sh	r1,r0[0x0]
80018c5e:	8a 96       	ld.uh	r6,r5[0x2]

80018c60 <SPIBytesAvailable>:
80018c60:	eb cd 40 c0 	pushm	r6-r7,lr
80018c64:	1a 97       	mov	r7,sp
80018c66:	20 1d       	sub	sp,4
80018c68:	49 36       	lddpc	r6,80018cb4 <SPIBytesAvailable+0x54>
80018c6a:	1e 26       	rsub	r6,pc
80018c6c:	ef 4c ff fc 	st.w	r7[-4],r12
80018c70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c74:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c78:	f0 08 10 54 	mul	r8,r8,84
80018c7c:	f2 08 00 08 	add	r8,r9,r8
80018c80:	2b c8       	sub	r8,-68
80018c82:	11 88       	ld.ub	r8,r8[0x0]
80018c84:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c8c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c90:	f0 08 10 54 	mul	r8,r8,84
80018c94:	f4 08 00 08 	add	r8,r10,r8
80018c98:	2b c8       	sub	r8,-68
80018c9a:	11 98       	ld.ub	r8,r8[0x1]
80018c9c:	5c 58       	castu.b	r8
80018c9e:	f2 08 01 08 	sub	r8,r9,r8
80018ca2:	5c 58       	castu.b	r8
80018ca4:	2e 08       	sub	r8,-32
80018ca6:	5c 58       	castu.b	r8
80018ca8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018cac:	10 9c       	mov	r12,r8
80018cae:	2f fd       	sub	sp,-4
80018cb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018cb4:	80 01       	ld.sh	r1,r0[0x0]
80018cb6:	8a ee       	ld.uh	lr,r5[0xc]

80018cb8 <spi_handler>:
80018cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80018cbc:	1a 97       	mov	r7,sp
80018cbe:	20 2d       	sub	sp,8
80018cc0:	4d e6       	lddpc	r6,80018e38 <spi_handler+0x180>
80018cc2:	1e 26       	rsub	r6,pc
80018cc4:	ef 4c ff f8 	st.w	r7[-8],r12
80018cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ccc:	ec f9 00 2c 	ld.w	r9,r6[44]
80018cd0:	f0 08 10 54 	mul	r8,r8,84
80018cd4:	f2 08 00 08 	add	r8,r9,r8
80018cd8:	70 08       	ld.w	r8,r8[0x0]
80018cda:	70 28       	ld.w	r8,r8[0x8]
80018cdc:	ef 68 ff fe 	st.b	r7[-2],r8
80018ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ce4:	ec f9 00 2c 	ld.w	r9,r6[44]
80018ce8:	f0 08 10 54 	mul	r8,r8,84
80018cec:	f2 08 00 08 	add	r8,r9,r8
80018cf0:	70 08       	ld.w	r8,r8[0x0]
80018cf2:	70 48       	ld.w	r8,r8[0x10]
80018cf4:	e2 18 00 02 	andl	r8,0x2,COH
80018cf8:	c0 50       	breq	80018d02 <spi_handler+0x4a>
80018cfa:	ee fc ff f8 	ld.w	r12,r7[-8]
80018cfe:	f0 16 01 30 	mcall	r6[1216]
80018d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d06:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d0a:	f0 08 10 54 	mul	r8,r8,84
80018d0e:	f2 08 00 08 	add	r8,r9,r8
80018d12:	2b 88       	sub	r8,-72
80018d14:	11 88       	ld.ub	r8,r8[0x0]
80018d16:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018d1a:	30 18       	mov	r8,1
80018d1c:	f0 09 18 00 	cp.b	r9,r8
80018d20:	e0 81 00 88 	brne	80018e30 <spi_handler+0x178>
80018d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d28:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d2c:	f0 08 10 54 	mul	r8,r8,84
80018d30:	f2 08 00 08 	add	r8,r9,r8
80018d34:	70 08       	ld.w	r8,r8[0x0]
80018d36:	70 48       	ld.w	r8,r8[0x10]
80018d38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018d3c:	5c 58       	castu.b	r8
80018d3e:	c7 90       	breq	80018e30 <spi_handler+0x178>
80018d40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d44:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d48:	f0 09 10 54 	mul	r9,r8,84
80018d4c:	f4 09 00 09 	add	r9,r10,r9
80018d50:	2b 89       	sub	r9,-72
80018d52:	13 99       	ld.ub	r9,r9[0x1]
80018d54:	5c 59       	castu.b	r9
80018d56:	2f f9       	sub	r9,-1
80018d58:	5c 59       	castu.b	r9
80018d5a:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d5e:	f0 08 10 54 	mul	r8,r8,84
80018d62:	f4 08 00 08 	add	r8,r10,r8
80018d66:	f0 ca ff b8 	sub	r10,r8,-72
80018d6a:	12 98       	mov	r8,r9
80018d6c:	b4 98       	st.b	r10[0x1],r8
80018d6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d72:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d76:	f0 08 10 54 	mul	r8,r8,84
80018d7a:	f2 08 00 08 	add	r8,r9,r8
80018d7e:	2b c8       	sub	r8,-68
80018d80:	11 88       	ld.ub	r8,r8[0x0]
80018d82:	5c 58       	castu.b	r8
80018d84:	2f f8       	sub	r8,-1
80018d86:	5c 58       	castu.b	r8
80018d88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018d8c:	ef 68 ff ff 	st.b	r7[-1],r8
80018d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d94:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d98:	f0 08 10 54 	mul	r8,r8,84
80018d9c:	f2 08 00 08 	add	r8,r9,r8
80018da0:	2b c8       	sub	r8,-68
80018da2:	11 98       	ld.ub	r8,r8[0x1]
80018da4:	5c 58       	castu.b	r8
80018da6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80018daa:	f0 09 18 00 	cp.b	r9,r8
80018dae:	c1 a1       	brne	80018de2 <spi_handler+0x12a>
80018db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018db4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018db8:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dbc:	f0 08 10 54 	mul	r8,r8,84
80018dc0:	f4 08 00 08 	add	r8,r10,r8
80018dc4:	2b c8       	sub	r8,-68
80018dc6:	11 98       	ld.ub	r8,r8[0x1]
80018dc8:	5c 58       	castu.b	r8
80018dca:	2f f8       	sub	r8,-1
80018dcc:	5c 58       	castu.b	r8
80018dce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018dd2:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dd6:	f2 09 10 54 	mul	r9,r9,84
80018dda:	f4 09 00 09 	add	r9,r10,r9
80018dde:	2b c9       	sub	r9,-68
80018de0:	b2 98       	st.b	r9[0x1],r8
80018de2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dea:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dee:	f0 08 10 54 	mul	r8,r8,84
80018df2:	f4 08 00 08 	add	r8,r10,r8
80018df6:	2b c8       	sub	r8,-68
80018df8:	11 88       	ld.ub	r8,r8[0x0]
80018dfa:	5c 58       	castu.b	r8
80018dfc:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e00:	f2 09 10 54 	mul	r9,r9,84
80018e04:	f4 09 00 09 	add	r9,r10,r9
80018e08:	f2 08 00 08 	add	r8,r9,r8
80018e0c:	f0 c9 ff dc 	sub	r9,r8,-36
80018e10:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80018e14:	b2 88       	st.b	r9[0x0],r8
80018e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018e1a:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e1e:	f0 08 10 54 	mul	r8,r8,84
80018e22:	f2 08 00 08 	add	r8,r9,r8
80018e26:	f0 c9 ff bc 	sub	r9,r8,-68
80018e2a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018e2e:	b2 88       	st.b	r9[0x0],r8
80018e30:	2f ed       	sub	sp,-8
80018e32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e36:	00 00       	add	r0,r0
80018e38:	80 01       	ld.sh	r1,r0[0x0]
80018e3a:	8b 46       	st.w	r5[0x10],r6

80018e3c <osc_get_rate>:
80018e3c:	eb cd 40 80 	pushm	r7,lr
80018e40:	1a 97       	mov	r7,sp
80018e42:	20 1d       	sub	sp,4
80018e44:	18 98       	mov	r8,r12
80018e46:	ef 68 ff fc 	st.b	r7[-4],r8
80018e4a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018e4e:	58 38       	cp.w	r8,3
80018e50:	c1 20       	breq	80018e74 <osc_get_rate+0x38>
80018e52:	e0 89 00 07 	brgt	80018e60 <osc_get_rate+0x24>
80018e56:	58 08       	cp.w	r8,0
80018e58:	c0 90       	breq	80018e6a <osc_get_rate+0x2e>
80018e5a:	58 28       	cp.w	r8,2
80018e5c:	c0 f0       	breq	80018e7a <osc_get_rate+0x3e>
80018e5e:	c1 b8       	rjmp	80018e94 <osc_get_rate+0x58>
80018e60:	58 48       	cp.w	r8,4
80018e62:	c1 10       	breq	80018e84 <osc_get_rate+0x48>
80018e64:	58 58       	cp.w	r8,5
80018e66:	c1 40       	breq	80018e8e <osc_get_rate+0x52>
80018e68:	c1 68       	rjmp	80018e94 <osc_get_rate+0x58>
80018e6a:	e0 68 24 00 	mov	r8,9216
80018e6e:	ea 18 00 f4 	orh	r8,0xf4
80018e72:	c1 28       	rjmp	80018e96 <osc_get_rate+0x5a>
80018e74:	e0 68 80 00 	mov	r8,32768
80018e78:	c0 f8       	rjmp	80018e96 <osc_get_rate+0x5a>
80018e7a:	e0 68 12 00 	mov	r8,4608
80018e7e:	ea 18 00 7a 	orh	r8,0x7a
80018e82:	c0 a8       	rjmp	80018e96 <osc_get_rate+0x5a>
80018e84:	e0 68 0e 00 	mov	r8,3584
80018e88:	ea 18 07 27 	orh	r8,0x727
80018e8c:	c0 58       	rjmp	80018e96 <osc_get_rate+0x5a>
80018e8e:	e0 78 c1 38 	mov	r8,115000
80018e92:	c0 28       	rjmp	80018e96 <osc_get_rate+0x5a>
80018e94:	30 08       	mov	r8,0
80018e96:	10 9c       	mov	r12,r8
80018e98:	2f fd       	sub	sp,-4
80018e9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80018e9e <sysclk_get_main_hz>:
80018e9e:	eb cd 40 c0 	pushm	r6-r7,lr
80018ea2:	1a 97       	mov	r7,sp
80018ea4:	48 56       	lddpc	r6,80018eb8 <sysclk_get_main_hz+0x1a>
80018ea6:	1e 26       	rsub	r6,pc
80018ea8:	30 0c       	mov	r12,0
80018eaa:	cc 9f       	rcall	80018e3c <osc_get_rate>
80018eac:	18 98       	mov	r8,r12
80018eae:	a3 68       	lsl	r8,0x2
80018eb0:	10 9c       	mov	r12,r8
80018eb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018eb6:	00 00       	add	r0,r0
80018eb8:	80 01       	ld.sh	r1,r0[0x0]
80018eba:	8d 2a       	st.w	r6[0x8],r10

80018ebc <sysclk_get_cpu_hz>:
80018ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80018ec0:	1a 97       	mov	r7,sp
80018ec2:	48 46       	lddpc	r6,80018ed0 <sysclk_get_cpu_hz+0x14>
80018ec4:	1e 26       	rsub	r6,pc
80018ec6:	ce cf       	rcall	80018e9e <sysclk_get_main_hz>
80018ec8:	18 98       	mov	r8,r12
80018eca:	10 9c       	mov	r12,r8
80018ecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ed0:	80 01       	ld.sh	r1,r0[0x0]
80018ed2:	8d 48       	st.w	r6[0x10],r8

80018ed4 <uart_handler_0>:
80018ed4:	eb cd 40 c0 	pushm	r6-r7,lr
80018ed8:	1a 97       	mov	r7,sp
80018eda:	20 2d       	sub	sp,8
80018edc:	4b 26       	lddpc	r6,80018fa4 <uart_handler_0+0xd0>
80018ede:	1e 26       	rsub	r6,pc
80018ee0:	ec f8 00 34 	ld.w	r8,r6[52]
80018ee4:	70 18       	ld.w	r8,r8[0x4]
80018ee6:	70 58       	ld.w	r8,r8[0x14]
80018ee8:	ef 48 ff fc 	st.w	r7[-4],r8
80018eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ef0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018ef4:	5c 58       	castu.b	r8
80018ef6:	c2 70       	breq	80018f44 <uart_handler_0+0x70>
80018ef8:	ec f8 00 34 	ld.w	r8,r6[52]
80018efc:	70 18       	ld.w	r8,r8[0x4]
80018efe:	70 68       	ld.w	r8,r8[0x18]
80018f00:	ef 68 ff fb 	st.b	r7[-5],r8
80018f04:	ec f8 00 34 	ld.w	r8,r6[52]
80018f08:	f0 f8 02 14 	ld.w	r8,r8[532]
80018f0c:	58 08       	cp.w	r8,0
80018f0e:	c0 c1       	brne	80018f26 <uart_handler_0+0x52>
80018f10:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018f14:	ec f8 00 34 	ld.w	r8,r6[52]
80018f18:	f0 c8 fe f1 	sub	r8,r8,-271
80018f1c:	12 9b       	mov	r11,r9
80018f1e:	10 9c       	mov	r12,r8
80018f20:	f0 16 00 55 	mcall	r6[340]
80018f24:	c1 08       	rjmp	80018f44 <uart_handler_0+0x70>
80018f26:	ec f8 00 34 	ld.w	r8,r6[52]
80018f2a:	f0 f8 02 14 	ld.w	r8,r8[532]
80018f2e:	70 18       	ld.w	r8,r8[0x4]
80018f30:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018f34:	ec f9 00 34 	ld.w	r9,r6[52]
80018f38:	f2 f9 02 14 	ld.w	r9,r9[532]
80018f3c:	72 59       	ld.w	r9,r9[0x14]
80018f3e:	14 9b       	mov	r11,r10
80018f40:	12 9c       	mov	r12,r9
80018f42:	5d 18       	icall	r8
80018f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f48:	e2 18 00 02 	andl	r8,0x2,COH
80018f4c:	c2 80       	breq	80018f9c <uart_handler_0+0xc8>
80018f4e:	ec f8 00 34 	ld.w	r8,r6[52]
80018f52:	2f 48       	sub	r8,-12
80018f54:	10 9c       	mov	r12,r8
80018f56:	f0 16 00 2e 	mcall	r6[184]
80018f5a:	18 98       	mov	r8,r12
80018f5c:	58 08       	cp.w	r8,0
80018f5e:	e0 8a 00 11 	brle	80018f80 <uart_handler_0+0xac>
80018f62:	ec f8 00 34 	ld.w	r8,r6[52]
80018f66:	2f 48       	sub	r8,-12
80018f68:	10 9c       	mov	r12,r8
80018f6a:	f0 16 00 45 	mcall	r6[276]
80018f6e:	18 98       	mov	r8,r12
80018f70:	ef 68 ff fb 	st.b	r7[-5],r8
80018f74:	ec f8 00 34 	ld.w	r8,r6[52]
80018f78:	70 18       	ld.w	r8,r8[0x4]
80018f7a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018f7e:	91 79       	st.w	r8[0x1c],r9
80018f80:	ec f8 00 34 	ld.w	r8,r6[52]
80018f84:	2f 48       	sub	r8,-12
80018f86:	10 9c       	mov	r12,r8
80018f88:	f0 16 00 2e 	mcall	r6[184]
80018f8c:	18 98       	mov	r8,r12
80018f8e:	58 08       	cp.w	r8,0
80018f90:	c0 61       	brne	80018f9c <uart_handler_0+0xc8>
80018f92:	ec f8 00 34 	ld.w	r8,r6[52]
80018f96:	70 18       	ld.w	r8,r8[0x4]
80018f98:	30 29       	mov	r9,2
80018f9a:	91 39       	st.w	r8[0xc],r9
80018f9c:	2f ed       	sub	sp,-8
80018f9e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018fa2:	d6 03       	rete
80018fa4:	80 01       	ld.sh	r1,r0[0x0]
80018fa6:	8d 62       	st.w	r6[0x18],r2

80018fa8 <uart_handler_1>:
80018fa8:	eb cd 40 c0 	pushm	r6-r7,lr
80018fac:	1a 97       	mov	r7,sp
80018fae:	20 2d       	sub	sp,8
80018fb0:	4b 66       	lddpc	r6,80019088 <uart_handler_1+0xe0>
80018fb2:	1e 26       	rsub	r6,pc
80018fb4:	ec f8 00 34 	ld.w	r8,r6[52]
80018fb8:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018fbc:	70 58       	ld.w	r8,r8[0x14]
80018fbe:	ef 48 ff fc 	st.w	r7[-4],r8
80018fc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fc6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018fca:	5c 58       	castu.b	r8
80018fcc:	c2 80       	breq	8001901c <uart_handler_1+0x74>
80018fce:	ec f8 00 34 	ld.w	r8,r6[52]
80018fd2:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018fd6:	70 68       	ld.w	r8,r8[0x18]
80018fd8:	ef 68 ff fb 	st.b	r7[-5],r8
80018fdc:	ec f8 00 34 	ld.w	r8,r6[52]
80018fe0:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80018fe4:	58 08       	cp.w	r8,0
80018fe6:	c0 c1       	brne	80018ffe <uart_handler_1+0x56>
80018fe8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018fec:	ec f8 00 34 	ld.w	r8,r6[52]
80018ff0:	f0 c8 fc c9 	sub	r8,r8,-823
80018ff4:	12 9b       	mov	r11,r9
80018ff6:	10 9c       	mov	r12,r8
80018ff8:	f0 16 00 55 	mcall	r6[340]
80018ffc:	c1 08       	rjmp	8001901c <uart_handler_1+0x74>
80018ffe:	ec f8 00 34 	ld.w	r8,r6[52]
80019002:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80019006:	70 18       	ld.w	r8,r8[0x4]
80019008:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001900c:	ec f9 00 34 	ld.w	r9,r6[52]
80019010:	f2 f9 04 3c 	ld.w	r9,r9[1084]
80019014:	72 59       	ld.w	r9,r9[0x14]
80019016:	14 9b       	mov	r11,r10
80019018:	12 9c       	mov	r12,r9
8001901a:	5d 18       	icall	r8
8001901c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019020:	e2 18 00 02 	andl	r8,0x2,COH
80019024:	c2 d0       	breq	8001907e <uart_handler_1+0xd6>
80019026:	ec f8 00 34 	ld.w	r8,r6[52]
8001902a:	f0 c8 fd cc 	sub	r8,r8,-564
8001902e:	10 9c       	mov	r12,r8
80019030:	f0 16 00 2e 	mcall	r6[184]
80019034:	18 98       	mov	r8,r12
80019036:	58 08       	cp.w	r8,0
80019038:	e0 8a 00 13 	brle	8001905e <uart_handler_1+0xb6>
8001903c:	ec f8 00 34 	ld.w	r8,r6[52]
80019040:	f0 c8 fd cc 	sub	r8,r8,-564
80019044:	10 9c       	mov	r12,r8
80019046:	f0 16 00 45 	mcall	r6[276]
8001904a:	18 98       	mov	r8,r12
8001904c:	ef 68 ff fb 	st.b	r7[-5],r8
80019050:	ec f8 00 34 	ld.w	r8,r6[52]
80019054:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019058:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001905c:	91 79       	st.w	r8[0x1c],r9
8001905e:	ec f8 00 34 	ld.w	r8,r6[52]
80019062:	f0 c8 fd cc 	sub	r8,r8,-564
80019066:	10 9c       	mov	r12,r8
80019068:	f0 16 00 2e 	mcall	r6[184]
8001906c:	18 98       	mov	r8,r12
8001906e:	58 08       	cp.w	r8,0
80019070:	c0 71       	brne	8001907e <uart_handler_1+0xd6>
80019072:	ec f8 00 34 	ld.w	r8,r6[52]
80019076:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001907a:	30 29       	mov	r9,2
8001907c:	91 39       	st.w	r8[0xc],r9
8001907e:	2f ed       	sub	sp,-8
80019080:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019084:	d6 03       	rete
80019086:	00 00       	add	r0,r0
80019088:	80 01       	ld.sh	r1,r0[0x0]
8001908a:	8e 36       	ld.sh	r6,r7[0x6]

8001908c <uart_handler_2>:
8001908c:	eb cd 40 c0 	pushm	r6-r7,lr
80019090:	1a 97       	mov	r7,sp
80019092:	20 2d       	sub	sp,8
80019094:	4b 66       	lddpc	r6,8001916c <uart_handler_2+0xe0>
80019096:	1e 26       	rsub	r6,pc
80019098:	ec f8 00 34 	ld.w	r8,r6[52]
8001909c:	f0 f8 04 54 	ld.w	r8,r8[1108]
800190a0:	70 58       	ld.w	r8,r8[0x14]
800190a2:	ef 48 ff fc 	st.w	r7[-4],r8
800190a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800190ae:	5c 58       	castu.b	r8
800190b0:	c2 80       	breq	80019100 <uart_handler_2+0x74>
800190b2:	ec f8 00 34 	ld.w	r8,r6[52]
800190b6:	f0 f8 04 54 	ld.w	r8,r8[1108]
800190ba:	70 68       	ld.w	r8,r8[0x18]
800190bc:	ef 68 ff fb 	st.b	r7[-5],r8
800190c0:	ec f8 00 34 	ld.w	r8,r6[52]
800190c4:	f0 f8 06 64 	ld.w	r8,r8[1636]
800190c8:	58 08       	cp.w	r8,0
800190ca:	c0 c1       	brne	800190e2 <uart_handler_2+0x56>
800190cc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800190d0:	ec f8 00 34 	ld.w	r8,r6[52]
800190d4:	f0 c8 fa a1 	sub	r8,r8,-1375
800190d8:	12 9b       	mov	r11,r9
800190da:	10 9c       	mov	r12,r8
800190dc:	f0 16 00 55 	mcall	r6[340]
800190e0:	c1 08       	rjmp	80019100 <uart_handler_2+0x74>
800190e2:	ec f8 00 34 	ld.w	r8,r6[52]
800190e6:	f0 f8 06 64 	ld.w	r8,r8[1636]
800190ea:	70 18       	ld.w	r8,r8[0x4]
800190ec:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800190f0:	ec f9 00 34 	ld.w	r9,r6[52]
800190f4:	f2 f9 06 64 	ld.w	r9,r9[1636]
800190f8:	72 59       	ld.w	r9,r9[0x14]
800190fa:	14 9b       	mov	r11,r10
800190fc:	12 9c       	mov	r12,r9
800190fe:	5d 18       	icall	r8
80019100:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019104:	e2 18 00 02 	andl	r8,0x2,COH
80019108:	c2 d0       	breq	80019162 <uart_handler_2+0xd6>
8001910a:	ec f8 00 34 	ld.w	r8,r6[52]
8001910e:	f0 c8 fb a4 	sub	r8,r8,-1116
80019112:	10 9c       	mov	r12,r8
80019114:	f0 16 00 2e 	mcall	r6[184]
80019118:	18 98       	mov	r8,r12
8001911a:	58 08       	cp.w	r8,0
8001911c:	e0 8a 00 13 	brle	80019142 <uart_handler_2+0xb6>
80019120:	ec f8 00 34 	ld.w	r8,r6[52]
80019124:	f0 c8 fb a4 	sub	r8,r8,-1116
80019128:	10 9c       	mov	r12,r8
8001912a:	f0 16 00 45 	mcall	r6[276]
8001912e:	18 98       	mov	r8,r12
80019130:	ef 68 ff fb 	st.b	r7[-5],r8
80019134:	ec f8 00 34 	ld.w	r8,r6[52]
80019138:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001913c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019140:	91 79       	st.w	r8[0x1c],r9
80019142:	ec f8 00 34 	ld.w	r8,r6[52]
80019146:	f0 c8 fb a4 	sub	r8,r8,-1116
8001914a:	10 9c       	mov	r12,r8
8001914c:	f0 16 00 2e 	mcall	r6[184]
80019150:	18 98       	mov	r8,r12
80019152:	58 08       	cp.w	r8,0
80019154:	c0 71       	brne	80019162 <uart_handler_2+0xd6>
80019156:	ec f8 00 34 	ld.w	r8,r6[52]
8001915a:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001915e:	30 29       	mov	r9,2
80019160:	91 39       	st.w	r8[0xc],r9
80019162:	2f ed       	sub	sp,-8
80019164:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019168:	d6 03       	rete
8001916a:	00 00       	add	r0,r0
8001916c:	80 01       	ld.sh	r1,r0[0x0]
8001916e:	8f 1a       	st.w	r7[0x4],r10

80019170 <uart_handler_3>:
80019170:	eb cd 40 c0 	pushm	r6-r7,lr
80019174:	1a 97       	mov	r7,sp
80019176:	20 2d       	sub	sp,8
80019178:	4b 66       	lddpc	r6,80019250 <uart_handler_3+0xe0>
8001917a:	1e 26       	rsub	r6,pc
8001917c:	ec f8 00 34 	ld.w	r8,r6[52]
80019180:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019184:	70 58       	ld.w	r8,r8[0x14]
80019186:	ef 48 ff fc 	st.w	r7[-4],r8
8001918a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001918e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019192:	5c 58       	castu.b	r8
80019194:	c2 80       	breq	800191e4 <uart_handler_3+0x74>
80019196:	ec f8 00 34 	ld.w	r8,r6[52]
8001919a:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001919e:	70 68       	ld.w	r8,r8[0x18]
800191a0:	ef 68 ff fb 	st.b	r7[-5],r8
800191a4:	ec f8 00 34 	ld.w	r8,r6[52]
800191a8:	f0 f8 08 8c 	ld.w	r8,r8[2188]
800191ac:	58 08       	cp.w	r8,0
800191ae:	c0 c1       	brne	800191c6 <uart_handler_3+0x56>
800191b0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800191b4:	ec f8 00 34 	ld.w	r8,r6[52]
800191b8:	f0 c8 f8 79 	sub	r8,r8,-1927
800191bc:	12 9b       	mov	r11,r9
800191be:	10 9c       	mov	r12,r8
800191c0:	f0 16 00 55 	mcall	r6[340]
800191c4:	c1 08       	rjmp	800191e4 <uart_handler_3+0x74>
800191c6:	ec f8 00 34 	ld.w	r8,r6[52]
800191ca:	f0 f8 08 8c 	ld.w	r8,r8[2188]
800191ce:	70 18       	ld.w	r8,r8[0x4]
800191d0:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800191d4:	ec f9 00 34 	ld.w	r9,r6[52]
800191d8:	f2 f9 08 8c 	ld.w	r9,r9[2188]
800191dc:	72 59       	ld.w	r9,r9[0x14]
800191de:	14 9b       	mov	r11,r10
800191e0:	12 9c       	mov	r12,r9
800191e2:	5d 18       	icall	r8
800191e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800191e8:	e2 18 00 02 	andl	r8,0x2,COH
800191ec:	c2 d0       	breq	80019246 <uart_handler_3+0xd6>
800191ee:	ec f8 00 34 	ld.w	r8,r6[52]
800191f2:	f0 c8 f9 7c 	sub	r8,r8,-1668
800191f6:	10 9c       	mov	r12,r8
800191f8:	f0 16 00 2e 	mcall	r6[184]
800191fc:	18 98       	mov	r8,r12
800191fe:	58 08       	cp.w	r8,0
80019200:	e0 8a 00 13 	brle	80019226 <uart_handler_3+0xb6>
80019204:	ec f8 00 34 	ld.w	r8,r6[52]
80019208:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001920c:	10 9c       	mov	r12,r8
8001920e:	f0 16 00 45 	mcall	r6[276]
80019212:	18 98       	mov	r8,r12
80019214:	ef 68 ff fb 	st.b	r7[-5],r8
80019218:	ec f8 00 34 	ld.w	r8,r6[52]
8001921c:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019220:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019224:	91 79       	st.w	r8[0x1c],r9
80019226:	ec f8 00 34 	ld.w	r8,r6[52]
8001922a:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001922e:	10 9c       	mov	r12,r8
80019230:	f0 16 00 2e 	mcall	r6[184]
80019234:	18 98       	mov	r8,r12
80019236:	58 08       	cp.w	r8,0
80019238:	c0 71       	brne	80019246 <uart_handler_3+0xd6>
8001923a:	ec f8 00 34 	ld.w	r8,r6[52]
8001923e:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019242:	30 29       	mov	r9,2
80019244:	91 39       	st.w	r8[0xc],r9
80019246:	2f ed       	sub	sp,-8
80019248:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001924c:	d6 03       	rete
8001924e:	00 00       	add	r0,r0
80019250:	80 01       	ld.sh	r1,r0[0x0]
80019252:	8f fe       	st.w	r7[0x3c],lr

80019254 <uart_handler_4>:
80019254:	eb cd 40 c0 	pushm	r6-r7,lr
80019258:	1a 97       	mov	r7,sp
8001925a:	20 2d       	sub	sp,8
8001925c:	4b 66       	lddpc	r6,80019334 <uart_handler_4+0xe0>
8001925e:	1e 26       	rsub	r6,pc
80019260:	ec f8 00 34 	ld.w	r8,r6[52]
80019264:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019268:	70 58       	ld.w	r8,r8[0x14]
8001926a:	ef 48 ff fc 	st.w	r7[-4],r8
8001926e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019272:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019276:	5c 58       	castu.b	r8
80019278:	c2 80       	breq	800192c8 <uart_handler_4+0x74>
8001927a:	ec f8 00 34 	ld.w	r8,r6[52]
8001927e:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019282:	70 68       	ld.w	r8,r8[0x18]
80019284:	ef 68 ff fb 	st.b	r7[-5],r8
80019288:	ec f8 00 34 	ld.w	r8,r6[52]
8001928c:	f0 f8 0a b4 	ld.w	r8,r8[2740]
80019290:	58 08       	cp.w	r8,0
80019292:	c0 c1       	brne	800192aa <uart_handler_4+0x56>
80019294:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019298:	ec f8 00 34 	ld.w	r8,r6[52]
8001929c:	f0 c8 f6 51 	sub	r8,r8,-2479
800192a0:	12 9b       	mov	r11,r9
800192a2:	10 9c       	mov	r12,r8
800192a4:	f0 16 00 55 	mcall	r6[340]
800192a8:	c1 08       	rjmp	800192c8 <uart_handler_4+0x74>
800192aa:	ec f8 00 34 	ld.w	r8,r6[52]
800192ae:	f0 f8 0a b4 	ld.w	r8,r8[2740]
800192b2:	70 18       	ld.w	r8,r8[0x4]
800192b4:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800192b8:	ec f9 00 34 	ld.w	r9,r6[52]
800192bc:	f2 f9 0a b4 	ld.w	r9,r9[2740]
800192c0:	72 59       	ld.w	r9,r9[0x14]
800192c2:	14 9b       	mov	r11,r10
800192c4:	12 9c       	mov	r12,r9
800192c6:	5d 18       	icall	r8
800192c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192cc:	e2 18 00 02 	andl	r8,0x2,COH
800192d0:	c2 d0       	breq	8001932a <uart_handler_4+0xd6>
800192d2:	ec f8 00 34 	ld.w	r8,r6[52]
800192d6:	f0 c8 f7 54 	sub	r8,r8,-2220
800192da:	10 9c       	mov	r12,r8
800192dc:	f0 16 00 2e 	mcall	r6[184]
800192e0:	18 98       	mov	r8,r12
800192e2:	58 08       	cp.w	r8,0
800192e4:	e0 8a 00 13 	brle	8001930a <uart_handler_4+0xb6>
800192e8:	ec f8 00 34 	ld.w	r8,r6[52]
800192ec:	f0 c8 f7 54 	sub	r8,r8,-2220
800192f0:	10 9c       	mov	r12,r8
800192f2:	f0 16 00 45 	mcall	r6[276]
800192f6:	18 98       	mov	r8,r12
800192f8:	ef 68 ff fb 	st.b	r7[-5],r8
800192fc:	ec f8 00 34 	ld.w	r8,r6[52]
80019300:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019304:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019308:	91 79       	st.w	r8[0x1c],r9
8001930a:	ec f8 00 34 	ld.w	r8,r6[52]
8001930e:	f0 c8 f7 54 	sub	r8,r8,-2220
80019312:	10 9c       	mov	r12,r8
80019314:	f0 16 00 2e 	mcall	r6[184]
80019318:	18 98       	mov	r8,r12
8001931a:	58 08       	cp.w	r8,0
8001931c:	c0 71       	brne	8001932a <uart_handler_4+0xd6>
8001931e:	ec f8 00 34 	ld.w	r8,r6[52]
80019322:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019326:	30 29       	mov	r9,2
80019328:	91 39       	st.w	r8[0xc],r9
8001932a:	2f ed       	sub	sp,-8
8001932c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019330:	d6 03       	rete
80019332:	00 00       	add	r0,r0
80019334:	80 01       	ld.sh	r1,r0[0x0]
80019336:	90 e2       	ld.uh	r2,r8[0xc]

80019338 <register_UART_handler>:
80019338:	eb cd 40 c0 	pushm	r6-r7,lr
8001933c:	1a 97       	mov	r7,sp
8001933e:	20 1d       	sub	sp,4
80019340:	4a 56       	lddpc	r6,800193d4 <register_UART_handler+0x9c>
80019342:	1e 26       	rsub	r6,pc
80019344:	ef 4c ff fc 	st.w	r7[-4],r12
80019348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001934c:	58 28       	cp.w	r8,2
8001934e:	c2 00       	breq	8001938e <register_UART_handler+0x56>
80019350:	e0 89 00 07 	brgt	8001935e <register_UART_handler+0x26>
80019354:	58 08       	cp.w	r8,0
80019356:	c0 90       	breq	80019368 <register_UART_handler+0x30>
80019358:	58 18       	cp.w	r8,1
8001935a:	c0 f0       	breq	80019378 <register_UART_handler+0x40>
8001935c:	c3 98       	rjmp	800193ce <register_UART_handler+0x96>
8001935e:	58 38       	cp.w	r8,3
80019360:	c2 20       	breq	800193a4 <register_UART_handler+0x6c>
80019362:	58 48       	cp.w	r8,4
80019364:	c2 b0       	breq	800193ba <register_UART_handler+0x82>
80019366:	c3 48       	rjmp	800193ce <register_UART_handler+0x96>
80019368:	30 1a       	mov	r10,1
8001936a:	e0 6b 02 60 	mov	r11,608
8001936e:	fe cc 04 9a 	sub	r12,pc,1178
80019372:	f0 16 00 3b 	mcall	r6[236]
80019376:	c2 c8       	rjmp	800193ce <register_UART_handler+0x96>
80019378:	ec f8 00 34 	ld.w	r8,r6[52]
8001937c:	f0 f8 02 30 	ld.w	r8,r8[560]
80019380:	30 1a       	mov	r10,1
80019382:	10 9b       	mov	r11,r8
80019384:	fe cc 03 dc 	sub	r12,pc,988
80019388:	f0 16 00 3b 	mcall	r6[236]
8001938c:	c2 18       	rjmp	800193ce <register_UART_handler+0x96>
8001938e:	ec f8 00 34 	ld.w	r8,r6[52]
80019392:	f0 f8 04 58 	ld.w	r8,r8[1112]
80019396:	30 1a       	mov	r10,1
80019398:	10 9b       	mov	r11,r8
8001939a:	fe cc 03 0e 	sub	r12,pc,782
8001939e:	f0 16 00 3b 	mcall	r6[236]
800193a2:	c1 68       	rjmp	800193ce <register_UART_handler+0x96>
800193a4:	ec f8 00 34 	ld.w	r8,r6[52]
800193a8:	f0 f8 06 80 	ld.w	r8,r8[1664]
800193ac:	30 1a       	mov	r10,1
800193ae:	10 9b       	mov	r11,r8
800193b0:	fe cc 02 40 	sub	r12,pc,576
800193b4:	f0 16 00 3b 	mcall	r6[236]
800193b8:	c0 b8       	rjmp	800193ce <register_UART_handler+0x96>
800193ba:	ec f8 00 34 	ld.w	r8,r6[52]
800193be:	f0 f8 08 a8 	ld.w	r8,r8[2216]
800193c2:	30 1a       	mov	r10,1
800193c4:	10 9b       	mov	r11,r8
800193c6:	fe cc 01 72 	sub	r12,pc,370
800193ca:	f0 16 00 3b 	mcall	r6[236]
800193ce:	2f fd       	sub	sp,-4
800193d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800193d4:	80 01       	ld.sh	r1,r0[0x0]
800193d6:	91 c6       	st.w	r8[0x30],r6

800193d8 <init_UART_int>:
800193d8:	eb cd 40 c0 	pushm	r6-r7,lr
800193dc:	1a 97       	mov	r7,sp
800193de:	20 1d       	sub	sp,4
800193e0:	4e 16       	lddpc	r6,80019564 <init_UART_int+0x18c>
800193e2:	1e 26       	rsub	r6,pc
800193e4:	ef 4c ff fc 	st.w	r7[-4],r12
800193e8:	ee fa ff fc 	ld.w	r10,r7[-4]
800193ec:	ec f9 00 34 	ld.w	r9,r6[52]
800193f0:	e0 68 02 28 	mov	r8,552
800193f4:	f4 08 02 48 	mul	r8,r10,r8
800193f8:	f2 08 00 08 	add	r8,r9,r8
800193fc:	70 08       	ld.w	r8,r8[0x0]
800193fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019402:	58 08       	cp.w	r8,0
80019404:	e0 8a 00 21 	brle	80019446 <init_UART_int+0x6e>
80019408:	ee fa ff fc 	ld.w	r10,r7[-4]
8001940c:	ec f9 00 34 	ld.w	r9,r6[52]
80019410:	e0 68 02 28 	mov	r8,552
80019414:	f4 08 02 48 	mul	r8,r10,r8
80019418:	f2 08 00 08 	add	r8,r9,r8
8001941c:	f0 c8 fd dc 	sub	r8,r8,-548
80019420:	11 98       	ld.ub	r8,r8[0x1]
80019422:	10 99       	mov	r9,r8
80019424:	ee fb ff fc 	ld.w	r11,r7[-4]
80019428:	ec fa 00 34 	ld.w	r10,r6[52]
8001942c:	e0 68 02 28 	mov	r8,552
80019430:	f6 08 02 48 	mul	r8,r11,r8
80019434:	f4 08 00 08 	add	r8,r10,r8
80019438:	f0 c8 fd dc 	sub	r8,r8,-548
8001943c:	11 88       	ld.ub	r8,r8[0x0]
8001943e:	12 9b       	mov	r11,r9
80019440:	10 9c       	mov	r12,r8
80019442:	f0 16 00 3f 	mcall	r6[252]
80019446:	ee fa ff fc 	ld.w	r10,r7[-4]
8001944a:	ec f9 00 34 	ld.w	r9,r6[52]
8001944e:	e0 68 02 28 	mov	r8,552
80019452:	f4 08 02 48 	mul	r8,r10,r8
80019456:	f2 08 00 08 	add	r8,r9,r8
8001945a:	70 08       	ld.w	r8,r8[0x0]
8001945c:	e2 18 00 02 	andl	r8,0x2,COH
80019460:	58 08       	cp.w	r8,0
80019462:	e0 8a 00 21 	brle	800194a4 <init_UART_int+0xcc>
80019466:	ee fa ff fc 	ld.w	r10,r7[-4]
8001946a:	ec f9 00 34 	ld.w	r9,r6[52]
8001946e:	e0 68 02 28 	mov	r8,552
80019472:	f4 08 02 48 	mul	r8,r10,r8
80019476:	f2 08 00 08 	add	r8,r9,r8
8001947a:	f0 c8 fd dc 	sub	r8,r8,-548
8001947e:	11 b8       	ld.ub	r8,r8[0x3]
80019480:	10 99       	mov	r9,r8
80019482:	ee fb ff fc 	ld.w	r11,r7[-4]
80019486:	ec fa 00 34 	ld.w	r10,r6[52]
8001948a:	e0 68 02 28 	mov	r8,552
8001948e:	f6 08 02 48 	mul	r8,r11,r8
80019492:	f4 08 00 08 	add	r8,r10,r8
80019496:	f0 c8 fd dc 	sub	r8,r8,-548
8001949a:	11 a8       	ld.ub	r8,r8[0x2]
8001949c:	12 9b       	mov	r11,r9
8001949e:	10 9c       	mov	r12,r8
800194a0:	f0 16 00 3f 	mcall	r6[252]
800194a4:	fe b0 fd 0c 	rcall	80018ebc <sysclk_get_cpu_hz>
800194a8:	18 98       	mov	r8,r12
800194aa:	10 9a       	mov	r10,r8
800194ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800194b0:	e0 68 02 28 	mov	r8,552
800194b4:	f2 08 02 48 	mul	r8,r9,r8
800194b8:	f0 c9 fd e8 	sub	r9,r8,-536
800194bc:	ec f8 00 34 	ld.w	r8,r6[52]
800194c0:	10 09       	add	r9,r8
800194c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800194c6:	ec f8 00 34 	ld.w	r8,r6[52]
800194ca:	e0 6b 00 8a 	mov	r11,138
800194ce:	f8 0b 02 4b 	mul	r11,r12,r11
800194d2:	2f fb       	sub	r11,-1
800194d4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800194d8:	12 9b       	mov	r11,r9
800194da:	10 9c       	mov	r12,r8
800194dc:	f0 16 00 6a 	mcall	r6[424]
800194e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800194e4:	f0 16 01 fa 	mcall	r6[2024]
800194e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800194ec:	e0 68 02 28 	mov	r8,552
800194f0:	f2 08 02 48 	mul	r8,r9,r8
800194f4:	f0 c9 ff f4 	sub	r9,r8,-12
800194f8:	ec f8 00 34 	ld.w	r8,r6[52]
800194fc:	f2 08 00 08 	add	r8,r9,r8
80019500:	10 9c       	mov	r12,r8
80019502:	f0 16 01 2f 	mcall	r6[1212]
80019506:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001950a:	e0 68 02 28 	mov	r8,552
8001950e:	f2 08 02 48 	mul	r8,r9,r8
80019512:	f0 c9 fe f4 	sub	r9,r8,-268
80019516:	ec f8 00 34 	ld.w	r8,r6[52]
8001951a:	f2 08 00 08 	add	r8,r9,r8
8001951e:	2f d8       	sub	r8,-3
80019520:	10 9c       	mov	r12,r8
80019522:	f0 16 01 2f 	mcall	r6[1212]
80019526:	ee fa ff fc 	ld.w	r10,r7[-4]
8001952a:	ec f9 00 34 	ld.w	r9,r6[52]
8001952e:	e0 68 02 28 	mov	r8,552
80019532:	f4 08 02 48 	mul	r8,r10,r8
80019536:	f2 08 00 08 	add	r8,r9,r8
8001953a:	70 08       	ld.w	r8,r8[0x0]
8001953c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019540:	5c 58       	castu.b	r8
80019542:	c0 e0       	breq	8001955e <init_UART_int+0x186>
80019544:	ee fa ff fc 	ld.w	r10,r7[-4]
80019548:	ec f8 00 34 	ld.w	r8,r6[52]
8001954c:	e0 69 00 8a 	mov	r9,138
80019550:	f4 09 02 49 	mul	r9,r10,r9
80019554:	2f f9       	sub	r9,-1
80019556:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001955a:	30 19       	mov	r9,1
8001955c:	91 29       	st.w	r8[0x8],r9
8001955e:	2f fd       	sub	sp,-4
80019560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019564:	80 01       	ld.sh	r1,r0[0x0]
80019566:	92 66       	ld.sh	r6,r9[0xc]

80019568 <uart_int_get_byte>:
80019568:	eb cd 40 c0 	pushm	r6-r7,lr
8001956c:	1a 97       	mov	r7,sp
8001956e:	20 1d       	sub	sp,4
80019570:	48 86       	lddpc	r6,80019590 <uart_int_get_byte+0x28>
80019572:	1e 26       	rsub	r6,pc
80019574:	ef 4c ff fc 	st.w	r7[-4],r12
80019578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001957c:	f0 c8 fe f1 	sub	r8,r8,-271
80019580:	10 9c       	mov	r12,r8
80019582:	f0 16 00 45 	mcall	r6[276]
80019586:	18 98       	mov	r8,r12
80019588:	10 9c       	mov	r12,r8
8001958a:	2f fd       	sub	sp,-4
8001958c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019590:	80 01       	ld.sh	r1,r0[0x0]
80019592:	93 f6       	st.w	r9[0x3c],r6

80019594 <uart_int_bytes_available>:
80019594:	eb cd 40 c0 	pushm	r6-r7,lr
80019598:	1a 97       	mov	r7,sp
8001959a:	20 1d       	sub	sp,4
8001959c:	48 86       	lddpc	r6,800195bc <uart_int_bytes_available+0x28>
8001959e:	1e 26       	rsub	r6,pc
800195a0:	ef 4c ff fc 	st.w	r7[-4],r12
800195a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195a8:	f0 c8 fe f1 	sub	r8,r8,-271
800195ac:	10 9c       	mov	r12,r8
800195ae:	f0 16 00 2e 	mcall	r6[184]
800195b2:	18 98       	mov	r8,r12
800195b4:	10 9c       	mov	r12,r8
800195b6:	2f fd       	sub	sp,-4
800195b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195bc:	80 01       	ld.sh	r1,r0[0x0]
800195be:	94 22       	ld.sh	r2,r10[0x4]

800195c0 <uart_int_send_byte>:
800195c0:	eb cd 40 c0 	pushm	r6-r7,lr
800195c4:	1a 97       	mov	r7,sp
800195c6:	20 2d       	sub	sp,8
800195c8:	49 56       	lddpc	r6,8001961c <uart_int_send_byte+0x5c>
800195ca:	1e 26       	rsub	r6,pc
800195cc:	ef 4c ff fc 	st.w	r7[-4],r12
800195d0:	16 98       	mov	r8,r11
800195d2:	ef 68 ff f8 	st.b	r7[-8],r8
800195d6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800195da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195de:	2f 48       	sub	r8,-12
800195e0:	12 9b       	mov	r11,r9
800195e2:	10 9c       	mov	r12,r8
800195e4:	f0 16 00 55 	mcall	r6[340]
800195e8:	18 98       	mov	r8,r12
800195ea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800195ee:	30 08       	mov	r8,0
800195f0:	f0 09 18 00 	cp.b	r9,r8
800195f4:	cf 15       	brlt	800195d6 <uart_int_send_byte+0x16>
800195f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195fa:	2f 48       	sub	r8,-12
800195fc:	10 9c       	mov	r12,r8
800195fe:	f0 16 00 2e 	mcall	r6[184]
80019602:	18 98       	mov	r8,r12
80019604:	58 08       	cp.w	r8,0
80019606:	e0 8a 00 07 	brle	80019614 <uart_int_send_byte+0x54>
8001960a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001960e:	70 18       	ld.w	r8,r8[0x4]
80019610:	30 29       	mov	r9,2
80019612:	91 29       	st.w	r8[0x8],r9
80019614:	2f ed       	sub	sp,-8
80019616:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001961a:	00 00       	add	r0,r0
8001961c:	80 01       	ld.sh	r1,r0[0x0]
8001961e:	94 4e       	ld.sh	lr,r10[0x8]

80019620 <uart_int_flush>:
80019620:	eb cd 40 c0 	pushm	r6-r7,lr
80019624:	1a 97       	mov	r7,sp
80019626:	20 1d       	sub	sp,4
80019628:	48 b6       	lddpc	r6,80019654 <uart_int_flush+0x34>
8001962a:	1e 26       	rsub	r6,pc
8001962c:	ef 4c ff fc 	st.w	r7[-4],r12
80019630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019634:	70 18       	ld.w	r8,r8[0x4]
80019636:	30 29       	mov	r9,2
80019638:	91 29       	st.w	r8[0x8],r9
8001963a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001963e:	2f 48       	sub	r8,-12
80019640:	10 9c       	mov	r12,r8
80019642:	f0 16 01 21 	mcall	r6[1156]
80019646:	18 98       	mov	r8,r12
80019648:	5c 58       	castu.b	r8
8001964a:	cf 80       	breq	8001963a <uart_int_flush+0x1a>
8001964c:	2f fd       	sub	sp,-4
8001964e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019652:	00 00       	add	r0,r0
80019654:	80 01       	ld.sh	r1,r0[0x0]
80019656:	94 ae       	ld.uh	lr,r10[0x4]

80019658 <uart_out_buffer_empty>:
80019658:	eb cd 40 c0 	pushm	r6-r7,lr
8001965c:	1a 97       	mov	r7,sp
8001965e:	20 1d       	sub	sp,4
80019660:	48 96       	lddpc	r6,80019684 <uart_out_buffer_empty+0x2c>
80019662:	1e 26       	rsub	r6,pc
80019664:	ef 4c ff fc 	st.w	r7[-4],r12
80019668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001966c:	2f 48       	sub	r8,-12
8001966e:	10 9c       	mov	r12,r8
80019670:	f0 16 01 21 	mcall	r6[1156]
80019674:	18 98       	mov	r8,r12
80019676:	5c 58       	castu.b	r8
80019678:	5c 68       	casts.b	r8
8001967a:	10 9c       	mov	r12,r8
8001967c:	2f fd       	sub	sp,-4
8001967e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019682:	00 00       	add	r0,r0
80019684:	80 01       	ld.sh	r1,r0[0x0]
80019686:	94 e6       	ld.uh	r6,r10[0xc]

80019688 <get_UART_handle>:
80019688:	eb cd 40 c0 	pushm	r6-r7,lr
8001968c:	1a 97       	mov	r7,sp
8001968e:	20 1d       	sub	sp,4
80019690:	48 96       	lddpc	r6,800196b4 <get_UART_handle+0x2c>
80019692:	1e 26       	rsub	r6,pc
80019694:	ef 4c ff fc 	st.w	r7[-4],r12
80019698:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001969c:	e0 68 02 28 	mov	r8,552
800196a0:	b1 39       	mul	r9,r8
800196a2:	ec f8 00 34 	ld.w	r8,r6[52]
800196a6:	f2 08 00 08 	add	r8,r9,r8
800196aa:	10 9c       	mov	r12,r8
800196ac:	2f fd       	sub	sp,-4
800196ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800196b2:	00 00       	add	r0,r0
800196b4:	80 01       	ld.sh	r1,r0[0x0]
800196b6:	95 16       	st.w	r10[0x4],r6

800196b8 <register_write_stream>:
800196b8:	eb cd 40 c0 	pushm	r6-r7,lr
800196bc:	1a 97       	mov	r7,sp
800196be:	20 2d       	sub	sp,8
800196c0:	49 16       	lddpc	r6,80019704 <register_write_stream+0x4c>
800196c2:	1e 26       	rsub	r6,pc
800196c4:	ef 4c ff fc 	st.w	r7[-4],r12
800196c8:	ef 4b ff f8 	st.w	r7[-8],r11
800196cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196d0:	30 09       	mov	r9,0
800196d2:	91 09       	st.w	r8[0x0],r9
800196d4:	ec f9 05 f4 	ld.w	r9,r6[1524]
800196d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196dc:	91 19       	st.w	r8[0x4],r9
800196de:	ec f9 06 a0 	ld.w	r9,r6[1696]
800196e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196e6:	91 29       	st.w	r8[0x8],r9
800196e8:	ec f9 08 68 	ld.w	r9,r6[2152]
800196ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196f0:	91 39       	st.w	r8[0xc],r9
800196f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800196fa:	91 59       	st.w	r8[0x14],r9
800196fc:	2f ed       	sub	sp,-8
800196fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019702:	00 00       	add	r0,r0
80019704:	80 01       	ld.sh	r1,r0[0x0]
80019706:	95 46       	st.w	r10[0x10],r6

80019708 <register_read_stream>:
80019708:	eb cd 40 80 	pushm	r7,lr
8001970c:	1a 97       	mov	r7,sp
8001970e:	20 2d       	sub	sp,8
80019710:	ef 4c ff fc 	st.w	r7[-4],r12
80019714:	ef 4b ff f8 	st.w	r7[-8],r11
80019718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001971c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019720:	f1 49 02 14 	st.w	r8[532],r9
80019724:	2f ed       	sub	sp,-8
80019726:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001972c <init_scheduler>:
8001972c:	eb cd 40 80 	pushm	r7,lr
80019730:	1a 97       	mov	r7,sp
80019732:	20 2d       	sub	sp,8
80019734:	ef 4c ff f8 	st.w	r7[-8],r12
80019738:	30 08       	mov	r8,0
8001973a:	ef 48 ff fc 	st.w	r7[-4],r8
8001973e:	c2 18       	rjmp	80019780 <init_scheduler+0x54>
80019740:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019744:	ee fa ff f8 	ld.w	r10,r7[-8]
80019748:	12 98       	mov	r8,r9
8001974a:	a1 78       	lsl	r8,0x1
8001974c:	12 08       	add	r8,r9
8001974e:	2f f8       	sub	r8,-1
80019750:	a5 68       	lsl	r8,0x4
80019752:	f4 08 00 08 	add	r8,r10,r8
80019756:	30 09       	mov	r9,0
80019758:	91 09       	st.w	r8[0x0],r9
8001975a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001975e:	ee fa ff f8 	ld.w	r10,r7[-8]
80019762:	ee fb ff f8 	ld.w	r11,r7[-8]
80019766:	12 98       	mov	r8,r9
80019768:	a1 78       	lsl	r8,0x1
8001976a:	12 08       	add	r8,r9
8001976c:	a5 68       	lsl	r8,0x4
8001976e:	f6 08 00 08 	add	r8,r11,r8
80019772:	2f 48       	sub	r8,-12
80019774:	91 0a       	st.w	r8[0x0],r10
80019776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001977a:	2f f8       	sub	r8,-1
8001977c:	ef 48 ff fc 	st.w	r7[-4],r8
80019780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019784:	11 88       	ld.ub	r8,r8[0x0]
80019786:	10 99       	mov	r9,r8
80019788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001978c:	10 39       	cp.w	r9,r8
8001978e:	fe 99 ff d9 	brgt	80019740 <init_scheduler+0x14>
80019792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019796:	3f f9       	mov	r9,-1
80019798:	91 19       	st.w	r8[0x4],r9
8001979a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001979e:	30 09       	mov	r9,0
800197a0:	91 29       	st.w	r8[0x8],r9
800197a2:	2f ed       	sub	sp,-8
800197a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800197a8 <register_task>:
800197a8:	eb cd 40 e0 	pushm	r5-r7,lr
800197ac:	1a 97       	mov	r7,sp
800197ae:	20 5d       	sub	sp,20
800197b0:	4d f6       	lddpc	r6,8001992c <register_task+0x184>
800197b2:	1e 26       	rsub	r6,pc
800197b4:	ef 4c ff fc 	st.w	r7[-4],r12
800197b8:	ef 4b ff f8 	st.w	r7[-8],r11
800197bc:	ef 4a ff f4 	st.w	r7[-12],r10
800197c0:	ef 49 ff f0 	st.w	r7[-16],r9
800197c4:	ef 48 ff ec 	st.w	r7[-20],r8
800197c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197cc:	58 08       	cp.w	r8,0
800197ce:	c0 a5       	brlt	800197e2 <register_task+0x3a>
800197d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197d4:	11 88       	ld.ub	r8,r8[0x0]
800197d6:	10 99       	mov	r9,r8
800197d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197dc:	10 39       	cp.w	r9,r8
800197de:	e0 89 00 05 	brgt	800197e8 <register_task+0x40>
800197e2:	e0 68 00 ff 	mov	r8,255
800197e6:	c9 f8       	rjmp	80019924 <register_task+0x17c>
800197e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197f0:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800197f4:	ee fb ff fc 	ld.w	r11,r7[-4]
800197f8:	12 98       	mov	r8,r9
800197fa:	a1 78       	lsl	r8,0x1
800197fc:	12 08       	add	r8,r9
800197fe:	a1 78       	lsl	r8,0x1
80019800:	2f f8       	sub	r8,-1
80019802:	a3 78       	lsl	r8,0x3
80019804:	f6 08 00 08 	add	r8,r11,r8
80019808:	14 99       	mov	r9,r10
8001980a:	b0 69       	st.h	r8[0xc],r9
8001980c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019810:	ee fa ff ec 	ld.w	r10,r7[-20]
80019814:	ee fb ff fc 	ld.w	r11,r7[-4]
80019818:	12 98       	mov	r8,r9
8001981a:	a1 78       	lsl	r8,0x1
8001981c:	12 08       	add	r8,r9
8001981e:	2f f8       	sub	r8,-1
80019820:	a5 68       	lsl	r8,0x4
80019822:	f6 08 00 08 	add	r8,r11,r8
80019826:	91 0a       	st.w	r8[0x0],r10
80019828:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001982c:	ee fa ff fc 	ld.w	r10,r7[-4]
80019830:	12 98       	mov	r8,r9
80019832:	a1 78       	lsl	r8,0x1
80019834:	12 08       	add	r8,r9
80019836:	a5 68       	lsl	r8,0x4
80019838:	f4 08 00 08 	add	r8,r10,r8
8001983c:	2e 88       	sub	r8,-24
8001983e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019842:	91 09       	st.w	r8[0x0],r9
80019844:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019848:	ee fa ff fc 	ld.w	r10,r7[-4]
8001984c:	12 98       	mov	r8,r9
8001984e:	a1 78       	lsl	r8,0x1
80019850:	12 08       	add	r8,r9
80019852:	a5 68       	lsl	r8,0x4
80019854:	f4 08 00 08 	add	r8,r10,r8
80019858:	2e 08       	sub	r8,-32
8001985a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001985e:	91 09       	st.w	r8[0x0],r9
80019860:	ee f5 ff f8 	ld.w	r5,r7[-8]
80019864:	f0 16 00 29 	mcall	r6[164]
80019868:	18 99       	mov	r9,r12
8001986a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001986e:	0a 98       	mov	r8,r5
80019870:	a1 78       	lsl	r8,0x1
80019872:	0a 08       	add	r8,r5
80019874:	a5 68       	lsl	r8,0x4
80019876:	f4 08 00 08 	add	r8,r10,r8
8001987a:	2d c8       	sub	r8,-36
8001987c:	91 09       	st.w	r8[0x0],r9
8001987e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019882:	ee fa ff fc 	ld.w	r10,r7[-4]
80019886:	12 98       	mov	r8,r9
80019888:	a1 78       	lsl	r8,0x1
8001988a:	12 08       	add	r8,r9
8001988c:	a5 68       	lsl	r8,0x4
8001988e:	f4 08 00 08 	add	r8,r10,r8
80019892:	2d 88       	sub	r8,-40
80019894:	30 09       	mov	r9,0
80019896:	91 09       	st.w	r8[0x0],r9
80019898:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001989c:	ee fa ff fc 	ld.w	r10,r7[-4]
800198a0:	12 98       	mov	r8,r9
800198a2:	a1 78       	lsl	r8,0x1
800198a4:	12 08       	add	r8,r9
800198a6:	2f f8       	sub	r8,-1
800198a8:	a5 68       	lsl	r8,0x4
800198aa:	f4 08 00 08 	add	r8,r10,r8
800198ae:	2f 48       	sub	r8,-12
800198b0:	30 09       	mov	r9,0
800198b2:	91 09       	st.w	r8[0x0],r9
800198b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198b8:	ee fa ff fc 	ld.w	r10,r7[-4]
800198bc:	12 98       	mov	r8,r9
800198be:	a1 78       	lsl	r8,0x1
800198c0:	12 08       	add	r8,r9
800198c2:	a5 68       	lsl	r8,0x4
800198c4:	f4 08 00 08 	add	r8,r10,r8
800198c8:	2d 48       	sub	r8,-44
800198ca:	30 09       	mov	r9,0
800198cc:	91 09       	st.w	r8[0x0],r9
800198ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800198d2:	ee fa ff fc 	ld.w	r10,r7[-4]
800198d6:	f0 c9 ff ff 	sub	r9,r8,-1
800198da:	12 98       	mov	r8,r9
800198dc:	a1 78       	lsl	r8,0x1
800198de:	12 08       	add	r8,r9
800198e0:	a5 68       	lsl	r8,0x4
800198e2:	f4 08 00 08 	add	r8,r10,r8
800198e6:	30 09       	mov	r9,0
800198e8:	91 09       	st.w	r8[0x0],r9
800198ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198ee:	ee fa ff fc 	ld.w	r10,r7[-4]
800198f2:	12 98       	mov	r8,r9
800198f4:	a1 78       	lsl	r8,0x1
800198f6:	12 08       	add	r8,r9
800198f8:	a5 68       	lsl	r8,0x4
800198fa:	f4 08 00 08 	add	r8,r10,r8
800198fe:	2c c8       	sub	r8,-52
80019900:	30 09       	mov	r9,0
80019902:	91 09       	st.w	r8[0x0],r9
80019904:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019908:	ee fa ff fc 	ld.w	r10,r7[-4]
8001990c:	12 98       	mov	r8,r9
8001990e:	a1 78       	lsl	r8,0x1
80019910:	12 08       	add	r8,r9
80019912:	a5 68       	lsl	r8,0x4
80019914:	f4 08 00 08 	add	r8,r10,r8
80019918:	2c 88       	sub	r8,-56
8001991a:	30 09       	mov	r9,0
8001991c:	91 09       	st.w	r8[0x0],r9
8001991e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019922:	5c 58       	castu.b	r8
80019924:	10 9c       	mov	r12,r8
80019926:	2f bd       	sub	sp,-20
80019928:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001992c:	80 01       	ld.sh	r1,r0[0x0]
8001992e:	96 36       	ld.sh	r6,r11[0x6]

80019930 <add_task>:
80019930:	eb cd 40 c0 	pushm	r6-r7,lr
80019934:	1a 97       	mov	r7,sp
80019936:	20 6d       	sub	sp,24
80019938:	4a d6       	lddpc	r6,800199ec <add_task+0xbc>
8001993a:	1e 26       	rsub	r6,pc
8001993c:	ef 4c ff f8 	st.w	r7[-8],r12
80019940:	ef 4b ff f4 	st.w	r7[-12],r11
80019944:	ef 4a ff f0 	st.w	r7[-16],r10
80019948:	ef 49 ff ec 	st.w	r7[-20],r9
8001994c:	ef 48 ff e8 	st.w	r7[-24],r8
80019950:	30 08       	mov	r8,0
80019952:	ef 48 ff fc 	st.w	r7[-4],r8
80019956:	c0 68       	rjmp	80019962 <add_task+0x32>
80019958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001995c:	2f f8       	sub	r8,-1
8001995e:	ef 48 ff fc 	st.w	r7[-4],r8
80019962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019966:	11 88       	ld.ub	r8,r8[0x0]
80019968:	10 99       	mov	r9,r8
8001996a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001996e:	10 39       	cp.w	r9,r8
80019970:	e0 8a 00 10 	brle	80019990 <add_task+0x60>
80019974:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019978:	ee fa ff f8 	ld.w	r10,r7[-8]
8001997c:	12 98       	mov	r8,r9
8001997e:	a1 78       	lsl	r8,0x1
80019980:	12 08       	add	r8,r9
80019982:	2f f8       	sub	r8,-1
80019984:	a5 68       	lsl	r8,0x4
80019986:	f4 08 00 08 	add	r8,r10,r8
8001998a:	70 08       	ld.w	r8,r8[0x0]
8001998c:	58 08       	cp.w	r8,0
8001998e:	ce 51       	brne	80019958 <add_task+0x28>
80019990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019994:	11 88       	ld.ub	r8,r8[0x0]
80019996:	10 99       	mov	r9,r8
80019998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001999c:	10 39       	cp.w	r9,r8
8001999e:	e0 89 00 04 	brgt	800199a6 <add_task+0x76>
800199a2:	30 08       	mov	r8,0
800199a4:	c2 08       	rjmp	800199e4 <add_task+0xb4>
800199a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800199aa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800199ae:	ee fa ff f4 	ld.w	r10,r7[-12]
800199b2:	ee fb ff fc 	ld.w	r11,r7[-4]
800199b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800199ba:	f0 16 00 63 	mcall	r6[396]
800199be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800199c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800199c6:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800199ca:	ee fb ff f8 	ld.w	r11,r7[-8]
800199ce:	12 98       	mov	r8,r9
800199d0:	a1 78       	lsl	r8,0x1
800199d2:	12 08       	add	r8,r9
800199d4:	a1 78       	lsl	r8,0x1
800199d6:	2f f8       	sub	r8,-1
800199d8:	a3 78       	lsl	r8,0x3
800199da:	f6 08 00 08 	add	r8,r11,r8
800199de:	14 99       	mov	r9,r10
800199e0:	b0 69       	st.h	r8[0xc],r9
800199e2:	30 18       	mov	r8,1
800199e4:	10 9c       	mov	r12,r8
800199e6:	2f ad       	sub	sp,-24
800199e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199ec:	80 01       	ld.sh	r1,r0[0x0]
800199ee:	97 be       	st.w	r11[0x2c],lr

800199f0 <sort_taskset_by_period>:
800199f0:	eb cd 40 80 	pushm	r7,lr
800199f4:	1a 97       	mov	r7,sp
800199f6:	20 fd       	sub	sp,60
800199f8:	ef 4c ff c4 	st.w	r7[-60],r12
800199fc:	30 08       	mov	r8,0
800199fe:	ef 68 ff ff 	st.b	r7[-1],r8
80019a02:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019a06:	11 89       	ld.ub	r9,r8[0x0]
80019a08:	30 18       	mov	r8,1
80019a0a:	f0 09 18 00 	cp.b	r9,r8
80019a0e:	e0 8b 01 1d 	brhi	80019c48 <sort_taskset_by_period+0x258>
80019a12:	c2 39       	rjmp	80019c58 <sort_taskset_by_period+0x268>
80019a14:	30 18       	mov	r8,1
80019a16:	ef 68 ff ff 	st.b	r7[-1],r8
80019a1a:	30 08       	mov	r8,0
80019a1c:	ef 48 ff f8 	st.w	r7[-8],r8
80019a20:	c0 99       	rjmp	80019c32 <sort_taskset_by_period+0x242>
80019a22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a26:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a2a:	12 98       	mov	r8,r9
80019a2c:	a1 78       	lsl	r8,0x1
80019a2e:	12 08       	add	r8,r9
80019a30:	2f f8       	sub	r8,-1
80019a32:	a5 68       	lsl	r8,0x4
80019a34:	f4 08 00 08 	add	r8,r10,r8
80019a38:	70 08       	ld.w	r8,r8[0x0]
80019a3a:	58 08       	cp.w	r8,0
80019a3c:	c1 11       	brne	80019a5e <sort_taskset_by_period+0x6e>
80019a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a42:	f0 c9 ff ff 	sub	r9,r8,-1
80019a46:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a4a:	12 98       	mov	r8,r9
80019a4c:	a1 78       	lsl	r8,0x1
80019a4e:	12 08       	add	r8,r9
80019a50:	2f f8       	sub	r8,-1
80019a52:	a5 68       	lsl	r8,0x4
80019a54:	f4 08 00 08 	add	r8,r10,r8
80019a58:	70 08       	ld.w	r8,r8[0x0]
80019a5a:	58 08       	cp.w	r8,0
80019a5c:	c3 e1       	brne	80019ad8 <sort_taskset_by_period+0xe8>
80019a5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a62:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a66:	12 98       	mov	r8,r9
80019a68:	a1 78       	lsl	r8,0x1
80019a6a:	12 08       	add	r8,r9
80019a6c:	2f f8       	sub	r8,-1
80019a6e:	a5 68       	lsl	r8,0x4
80019a70:	f4 08 00 08 	add	r8,r10,r8
80019a74:	70 08       	ld.w	r8,r8[0x0]
80019a76:	58 08       	cp.w	r8,0
80019a78:	e0 80 00 d8 	breq	80019c28 <sort_taskset_by_period+0x238>
80019a7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a80:	f0 c9 ff ff 	sub	r9,r8,-1
80019a84:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a88:	12 98       	mov	r8,r9
80019a8a:	a1 78       	lsl	r8,0x1
80019a8c:	12 08       	add	r8,r9
80019a8e:	2f f8       	sub	r8,-1
80019a90:	a5 68       	lsl	r8,0x4
80019a92:	f4 08 00 08 	add	r8,r10,r8
80019a96:	70 08       	ld.w	r8,r8[0x0]
80019a98:	58 08       	cp.w	r8,0
80019a9a:	e0 80 00 c7 	breq	80019c28 <sort_taskset_by_period+0x238>
80019a9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019aa2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019aa6:	12 98       	mov	r8,r9
80019aa8:	a1 78       	lsl	r8,0x1
80019aaa:	12 08       	add	r8,r9
80019aac:	a5 68       	lsl	r8,0x4
80019aae:	f4 08 00 08 	add	r8,r10,r8
80019ab2:	2e 08       	sub	r8,-32
80019ab4:	70 0a       	ld.w	r10,r8[0x0]
80019ab6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019aba:	f0 c9 ff ff 	sub	r9,r8,-1
80019abe:	ee fb ff c4 	ld.w	r11,r7[-60]
80019ac2:	12 98       	mov	r8,r9
80019ac4:	a1 78       	lsl	r8,0x1
80019ac6:	12 08       	add	r8,r9
80019ac8:	a5 68       	lsl	r8,0x4
80019aca:	f6 08 00 08 	add	r8,r11,r8
80019ace:	2e 08       	sub	r8,-32
80019ad0:	70 08       	ld.w	r8,r8[0x0]
80019ad2:	10 3a       	cp.w	r10,r8
80019ad4:	e0 88 00 aa 	brls	80019c28 <sort_taskset_by_period+0x238>
80019ad8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019adc:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ae0:	12 98       	mov	r8,r9
80019ae2:	a1 78       	lsl	r8,0x1
80019ae4:	12 08       	add	r8,r9
80019ae6:	a5 68       	lsl	r8,0x4
80019ae8:	f4 08 00 08 	add	r8,r10,r8
80019aec:	2f 48       	sub	r8,-12
80019aee:	ee cb 00 38 	sub	r11,r7,56
80019af2:	10 9a       	mov	r10,r8
80019af4:	f6 c8 00 00 	sub	r8,r11,0
80019af8:	f4 c9 00 00 	sub	r9,r10,0
80019afc:	72 0c       	ld.w	r12,r9[0x0]
80019afe:	91 0c       	st.w	r8[0x0],r12
80019b00:	72 1c       	ld.w	r12,r9[0x4]
80019b02:	91 1c       	st.w	r8[0x4],r12
80019b04:	72 2c       	ld.w	r12,r9[0x8]
80019b06:	91 2c       	st.w	r8[0x8],r12
80019b08:	72 39       	ld.w	r9,r9[0xc]
80019b0a:	91 39       	st.w	r8[0xc],r9
80019b0c:	f6 c8 ff f0 	sub	r8,r11,-16
80019b10:	f4 c9 ff f0 	sub	r9,r10,-16
80019b14:	72 0c       	ld.w	r12,r9[0x0]
80019b16:	91 0c       	st.w	r8[0x0],r12
80019b18:	72 1c       	ld.w	r12,r9[0x4]
80019b1a:	91 1c       	st.w	r8[0x4],r12
80019b1c:	72 2c       	ld.w	r12,r9[0x8]
80019b1e:	91 2c       	st.w	r8[0x8],r12
80019b20:	72 39       	ld.w	r9,r9[0xc]
80019b22:	91 39       	st.w	r8[0xc],r9
80019b24:	f6 c8 ff e0 	sub	r8,r11,-32
80019b28:	f4 c9 ff e0 	sub	r9,r10,-32
80019b2c:	72 0a       	ld.w	r10,r9[0x0]
80019b2e:	91 0a       	st.w	r8[0x0],r10
80019b30:	72 1a       	ld.w	r10,r9[0x4]
80019b32:	91 1a       	st.w	r8[0x4],r10
80019b34:	72 2a       	ld.w	r10,r9[0x8]
80019b36:	91 2a       	st.w	r8[0x8],r10
80019b38:	72 39       	ld.w	r9,r9[0xc]
80019b3a:	91 39       	st.w	r8[0xc],r9
80019b3c:	ee fa ff f8 	ld.w	r10,r7[-8]
80019b40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b44:	f0 c9 ff ff 	sub	r9,r8,-1
80019b48:	ee fb ff c4 	ld.w	r11,r7[-60]
80019b4c:	14 98       	mov	r8,r10
80019b4e:	a1 78       	lsl	r8,0x1
80019b50:	14 08       	add	r8,r10
80019b52:	a5 68       	lsl	r8,0x4
80019b54:	f6 08 00 08 	add	r8,r11,r8
80019b58:	f0 ca ff f4 	sub	r10,r8,-12
80019b5c:	ee fb ff c4 	ld.w	r11,r7[-60]
80019b60:	12 98       	mov	r8,r9
80019b62:	a1 78       	lsl	r8,0x1
80019b64:	12 08       	add	r8,r9
80019b66:	a5 68       	lsl	r8,0x4
80019b68:	f6 08 00 08 	add	r8,r11,r8
80019b6c:	2f 48       	sub	r8,-12
80019b6e:	14 9b       	mov	r11,r10
80019b70:	10 9a       	mov	r10,r8
80019b72:	f6 c8 00 00 	sub	r8,r11,0
80019b76:	f4 c9 00 00 	sub	r9,r10,0
80019b7a:	72 0c       	ld.w	r12,r9[0x0]
80019b7c:	91 0c       	st.w	r8[0x0],r12
80019b7e:	72 1c       	ld.w	r12,r9[0x4]
80019b80:	91 1c       	st.w	r8[0x4],r12
80019b82:	72 2c       	ld.w	r12,r9[0x8]
80019b84:	91 2c       	st.w	r8[0x8],r12
80019b86:	72 39       	ld.w	r9,r9[0xc]
80019b88:	91 39       	st.w	r8[0xc],r9
80019b8a:	f6 c8 ff f0 	sub	r8,r11,-16
80019b8e:	f4 c9 ff f0 	sub	r9,r10,-16
80019b92:	72 0c       	ld.w	r12,r9[0x0]
80019b94:	91 0c       	st.w	r8[0x0],r12
80019b96:	72 1c       	ld.w	r12,r9[0x4]
80019b98:	91 1c       	st.w	r8[0x4],r12
80019b9a:	72 2c       	ld.w	r12,r9[0x8]
80019b9c:	91 2c       	st.w	r8[0x8],r12
80019b9e:	72 39       	ld.w	r9,r9[0xc]
80019ba0:	91 39       	st.w	r8[0xc],r9
80019ba2:	f6 c8 ff e0 	sub	r8,r11,-32
80019ba6:	f4 c9 ff e0 	sub	r9,r10,-32
80019baa:	72 0a       	ld.w	r10,r9[0x0]
80019bac:	91 0a       	st.w	r8[0x0],r10
80019bae:	72 1a       	ld.w	r10,r9[0x4]
80019bb0:	91 1a       	st.w	r8[0x4],r10
80019bb2:	72 2a       	ld.w	r10,r9[0x8]
80019bb4:	91 2a       	st.w	r8[0x8],r10
80019bb6:	72 39       	ld.w	r9,r9[0xc]
80019bb8:	91 39       	st.w	r8[0xc],r9
80019bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019bbe:	f0 c9 ff ff 	sub	r9,r8,-1
80019bc2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019bc6:	12 98       	mov	r8,r9
80019bc8:	a1 78       	lsl	r8,0x1
80019bca:	12 08       	add	r8,r9
80019bcc:	a5 68       	lsl	r8,0x4
80019bce:	f4 08 00 08 	add	r8,r10,r8
80019bd2:	2f 48       	sub	r8,-12
80019bd4:	10 9b       	mov	r11,r8
80019bd6:	ee ca 00 38 	sub	r10,r7,56
80019bda:	f6 c8 00 00 	sub	r8,r11,0
80019bde:	f4 c9 00 00 	sub	r9,r10,0
80019be2:	72 0c       	ld.w	r12,r9[0x0]
80019be4:	91 0c       	st.w	r8[0x0],r12
80019be6:	72 1c       	ld.w	r12,r9[0x4]
80019be8:	91 1c       	st.w	r8[0x4],r12
80019bea:	72 2c       	ld.w	r12,r9[0x8]
80019bec:	91 2c       	st.w	r8[0x8],r12
80019bee:	72 39       	ld.w	r9,r9[0xc]
80019bf0:	91 39       	st.w	r8[0xc],r9
80019bf2:	f6 c8 ff f0 	sub	r8,r11,-16
80019bf6:	f4 c9 ff f0 	sub	r9,r10,-16
80019bfa:	72 0c       	ld.w	r12,r9[0x0]
80019bfc:	91 0c       	st.w	r8[0x0],r12
80019bfe:	72 1c       	ld.w	r12,r9[0x4]
80019c00:	91 1c       	st.w	r8[0x4],r12
80019c02:	72 2c       	ld.w	r12,r9[0x8]
80019c04:	91 2c       	st.w	r8[0x8],r12
80019c06:	72 39       	ld.w	r9,r9[0xc]
80019c08:	91 39       	st.w	r8[0xc],r9
80019c0a:	f6 c8 ff e0 	sub	r8,r11,-32
80019c0e:	f4 c9 ff e0 	sub	r9,r10,-32
80019c12:	72 0a       	ld.w	r10,r9[0x0]
80019c14:	91 0a       	st.w	r8[0x0],r10
80019c16:	72 1a       	ld.w	r10,r9[0x4]
80019c18:	91 1a       	st.w	r8[0x4],r10
80019c1a:	72 2a       	ld.w	r10,r9[0x8]
80019c1c:	91 2a       	st.w	r8[0x8],r10
80019c1e:	72 39       	ld.w	r9,r9[0xc]
80019c20:	91 39       	st.w	r8[0xc],r9
80019c22:	30 08       	mov	r8,0
80019c24:	ef 68 ff ff 	st.b	r7[-1],r8
80019c28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c2c:	2f f8       	sub	r8,-1
80019c2e:	ef 48 ff f8 	st.w	r7[-8],r8
80019c32:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019c36:	11 88       	ld.ub	r8,r8[0x0]
80019c38:	f0 c9 00 01 	sub	r9,r8,1
80019c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c40:	10 39       	cp.w	r9,r8
80019c42:	fe 99 fe f0 	brgt	80019a22 <sort_taskset_by_period+0x32>
80019c46:	c0 28       	rjmp	80019c4a <sort_taskset_by_period+0x25a>
80019c48:	d7 03       	nop
80019c4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019c4e:	ec 18 00 01 	eorl	r8,0x1
80019c52:	5c 58       	castu.b	r8
80019c54:	fe 91 fe e0 	brne	80019a14 <sort_taskset_by_period+0x24>
80019c58:	2f 1d       	sub	sp,-60
80019c5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80019c5e <run_scheduler_update>:
80019c5e:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80019c62:	1a 97       	mov	r7,sp
80019c64:	20 9d       	sub	sp,36
80019c66:	fe f6 04 0a 	ld.w	r6,pc[1034]
80019c6a:	1e 26       	rsub	r6,pc
80019c6c:	ef 4c ff e0 	st.w	r7[-32],r12
80019c70:	16 98       	mov	r8,r11
80019c72:	ef 68 ff dc 	st.b	r7[-36],r8
80019c76:	30 08       	mov	r8,0
80019c78:	ef 48 ff e8 	st.w	r7[-24],r8
80019c7c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019c80:	70 28       	ld.w	r8,r8[0x8]
80019c82:	ef 48 ff e4 	st.w	r7[-28],r8
80019c86:	e0 8f 01 e5 	bral	8001a050 <run_scheduler_update+0x3f2>
80019c8a:	f0 16 00 29 	mcall	r6[164]
80019c8e:	18 98       	mov	r8,r12
80019c90:	ef 48 ff f4 	st.w	r7[-12],r8
80019c94:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c98:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c9c:	12 98       	mov	r8,r9
80019c9e:	a1 78       	lsl	r8,0x1
80019ca0:	12 08       	add	r8,r9
80019ca2:	2f f8       	sub	r8,-1
80019ca4:	a5 68       	lsl	r8,0x4
80019ca6:	f4 08 00 08 	add	r8,r10,r8
80019caa:	70 08       	ld.w	r8,r8[0x0]
80019cac:	58 08       	cp.w	r8,0
80019cae:	e0 80 01 cc 	breq	8001a046 <run_scheduler_update+0x3e8>
80019cb2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cb6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cba:	12 98       	mov	r8,r9
80019cbc:	a1 78       	lsl	r8,0x1
80019cbe:	12 08       	add	r8,r9
80019cc0:	a5 68       	lsl	r8,0x4
80019cc2:	f4 08 00 08 	add	r8,r10,r8
80019cc6:	2e 88       	sub	r8,-24
80019cc8:	70 08       	ld.w	r8,r8[0x0]
80019cca:	58 08       	cp.w	r8,0
80019ccc:	e0 80 01 bd 	breq	8001a046 <run_scheduler_update+0x3e8>
80019cd0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cd4:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cd8:	12 98       	mov	r8,r9
80019cda:	a1 78       	lsl	r8,0x1
80019cdc:	12 08       	add	r8,r9
80019cde:	a5 68       	lsl	r8,0x4
80019ce0:	f4 08 00 08 	add	r8,r10,r8
80019ce4:	2d c8       	sub	r8,-36
80019ce6:	70 09       	ld.w	r9,r8[0x0]
80019ce8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019cec:	10 39       	cp.w	r9,r8
80019cee:	e0 8b 01 ac 	brhi	8001a046 <run_scheduler_update+0x3e8>
80019cf2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cf6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cfa:	12 98       	mov	r8,r9
80019cfc:	a1 78       	lsl	r8,0x1
80019cfe:	12 08       	add	r8,r9
80019d00:	a5 68       	lsl	r8,0x4
80019d02:	f4 08 00 08 	add	r8,r10,r8
80019d06:	2d c8       	sub	r8,-36
80019d08:	70 08       	ld.w	r8,r8[0x0]
80019d0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019d0e:	10 19       	sub	r9,r8
80019d10:	ef 49 ff f8 	st.w	r7[-8],r9
80019d14:	f0 16 00 29 	mcall	r6[164]
80019d18:	18 98       	mov	r8,r12
80019d1a:	ef 48 ff fc 	st.w	r7[-4],r8
80019d1e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d22:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d26:	12 98       	mov	r8,r9
80019d28:	a1 78       	lsl	r8,0x1
80019d2a:	12 08       	add	r8,r9
80019d2c:	2f f8       	sub	r8,-1
80019d2e:	a5 68       	lsl	r8,0x4
80019d30:	f4 08 00 08 	add	r8,r10,r8
80019d34:	70 08       	ld.w	r8,r8[0x0]
80019d36:	ef 48 ff ec 	st.w	r7[-20],r8
80019d3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019d3e:	5d 18       	icall	r8
80019d40:	18 98       	mov	r8,r12
80019d42:	ef 48 ff f0 	st.w	r7[-16],r8
80019d46:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d4a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d4e:	12 98       	mov	r8,r9
80019d50:	a1 78       	lsl	r8,0x1
80019d52:	12 08       	add	r8,r9
80019d54:	2f f8       	sub	r8,-1
80019d56:	a5 68       	lsl	r8,0x4
80019d58:	f4 08 00 08 	add	r8,r10,r8
80019d5c:	2f 48       	sub	r8,-12
80019d5e:	70 08       	ld.w	r8,r8[0x0]
80019d60:	58 08       	cp.w	r8,0
80019d62:	c0 40       	breq	80019d6a <run_scheduler_update+0x10c>
80019d64:	58 18       	cp.w	r8,1
80019d66:	c2 90       	breq	80019db8 <run_scheduler_update+0x15a>
80019d68:	c4 58       	rjmp	80019df2 <run_scheduler_update+0x194>
80019d6a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d6e:	ee fa ff e4 	ld.w	r10,r7[-28]
80019d72:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d76:	14 98       	mov	r8,r10
80019d78:	a1 78       	lsl	r8,0x1
80019d7a:	14 08       	add	r8,r10
80019d7c:	a5 68       	lsl	r8,0x4
80019d7e:	f6 08 00 08 	add	r8,r11,r8
80019d82:	2d c8       	sub	r8,-36
80019d84:	70 0b       	ld.w	r11,r8[0x0]
80019d86:	ee fa ff e4 	ld.w	r10,r7[-28]
80019d8a:	ee fc ff e0 	ld.w	r12,r7[-32]
80019d8e:	14 98       	mov	r8,r10
80019d90:	a1 78       	lsl	r8,0x1
80019d92:	14 08       	add	r8,r10
80019d94:	a5 68       	lsl	r8,0x4
80019d96:	f8 08 00 08 	add	r8,r12,r8
80019d9a:	2e 08       	sub	r8,-32
80019d9c:	70 08       	ld.w	r8,r8[0x0]
80019d9e:	f6 08 00 0a 	add	r10,r11,r8
80019da2:	ee fb ff e0 	ld.w	r11,r7[-32]
80019da6:	12 98       	mov	r8,r9
80019da8:	a1 78       	lsl	r8,0x1
80019daa:	12 08       	add	r8,r9
80019dac:	a5 68       	lsl	r8,0x4
80019dae:	f6 08 00 08 	add	r8,r11,r8
80019db2:	2d c8       	sub	r8,-36
80019db4:	91 0a       	st.w	r8[0x0],r10
80019db6:	c1 e8       	rjmp	80019df2 <run_scheduler_update+0x194>
80019db8:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019dbc:	f0 16 00 29 	mcall	r6[164]
80019dc0:	18 9a       	mov	r10,r12
80019dc2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019dc6:	ee fb ff e0 	ld.w	r11,r7[-32]
80019dca:	12 98       	mov	r8,r9
80019dcc:	a1 78       	lsl	r8,0x1
80019dce:	12 08       	add	r8,r9
80019dd0:	a5 68       	lsl	r8,0x4
80019dd2:	f6 08 00 08 	add	r8,r11,r8
80019dd6:	2e 08       	sub	r8,-32
80019dd8:	70 08       	ld.w	r8,r8[0x0]
80019dda:	f4 08 00 09 	add	r9,r10,r8
80019dde:	ee fa ff e0 	ld.w	r10,r7[-32]
80019de2:	0a 98       	mov	r8,r5
80019de4:	a1 78       	lsl	r8,0x1
80019de6:	0a 08       	add	r8,r5
80019de8:	a5 68       	lsl	r8,0x4
80019dea:	f4 08 00 08 	add	r8,r10,r8
80019dee:	2d c8       	sub	r8,-36
80019df0:	91 09       	st.w	r8[0x0],r9
80019df2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019df6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dfa:	12 98       	mov	r8,r9
80019dfc:	a1 78       	lsl	r8,0x1
80019dfe:	12 08       	add	r8,r9
80019e00:	a5 68       	lsl	r8,0x4
80019e02:	f4 08 00 08 	add	r8,r10,r8
80019e06:	2e 88       	sub	r8,-24
80019e08:	70 08       	ld.w	r8,r8[0x0]
80019e0a:	58 18       	cp.w	r8,1
80019e0c:	c0 e1       	brne	80019e28 <run_scheduler_update+0x1ca>
80019e0e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e12:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e16:	12 98       	mov	r8,r9
80019e18:	a1 78       	lsl	r8,0x1
80019e1a:	12 08       	add	r8,r9
80019e1c:	a5 68       	lsl	r8,0x4
80019e1e:	f4 08 00 08 	add	r8,r10,r8
80019e22:	2e 88       	sub	r8,-24
80019e24:	30 09       	mov	r9,0
80019e26:	91 09       	st.w	r8[0x0],r9
80019e28:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e2c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e30:	12 98       	mov	r8,r9
80019e32:	a1 78       	lsl	r8,0x1
80019e34:	12 08       	add	r8,r9
80019e36:	a5 68       	lsl	r8,0x4
80019e38:	f4 08 00 08 	add	r8,r10,r8
80019e3c:	2d c8       	sub	r8,-36
80019e3e:	70 09       	ld.w	r9,r8[0x0]
80019e40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019e44:	10 39       	cp.w	r9,r8
80019e46:	c3 92       	brcc	80019eb8 <run_scheduler_update+0x25a>
80019e48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019e4c:	5c 38       	neg	r8
80019e4e:	ef 48 ff e8 	st.w	r7[-24],r8
80019e52:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e56:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e5a:	12 98       	mov	r8,r9
80019e5c:	a1 78       	lsl	r8,0x1
80019e5e:	12 08       	add	r8,r9
80019e60:	a5 68       	lsl	r8,0x4
80019e62:	f4 08 00 08 	add	r8,r10,r8
80019e66:	2c 88       	sub	r8,-56
80019e68:	70 08       	ld.w	r8,r8[0x0]
80019e6a:	f0 ca ff ff 	sub	r10,r8,-1
80019e6e:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e72:	12 98       	mov	r8,r9
80019e74:	a1 78       	lsl	r8,0x1
80019e76:	12 08       	add	r8,r9
80019e78:	a5 68       	lsl	r8,0x4
80019e7a:	f6 08 00 08 	add	r8,r11,r8
80019e7e:	2c 88       	sub	r8,-56
80019e80:	91 0a       	st.w	r8[0x0],r10
80019e82:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e86:	ee fa ff e4 	ld.w	r10,r7[-28]
80019e8a:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e8e:	14 98       	mov	r8,r10
80019e90:	a1 78       	lsl	r8,0x1
80019e92:	14 08       	add	r8,r10
80019e94:	a5 68       	lsl	r8,0x4
80019e96:	f6 08 00 08 	add	r8,r11,r8
80019e9a:	2e 08       	sub	r8,-32
80019e9c:	70 0a       	ld.w	r10,r8[0x0]
80019e9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019ea2:	10 0a       	add	r10,r8
80019ea4:	ee fb ff e0 	ld.w	r11,r7[-32]
80019ea8:	12 98       	mov	r8,r9
80019eaa:	a1 78       	lsl	r8,0x1
80019eac:	12 08       	add	r8,r9
80019eae:	a5 68       	lsl	r8,0x4
80019eb0:	f6 08 00 08 	add	r8,r11,r8
80019eb4:	2d c8       	sub	r8,-36
80019eb6:	91 0a       	st.w	r8[0x0],r10
80019eb8:	ee fc ff e4 	ld.w	r12,r7[-28]
80019ebc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019ec0:	ee fa ff e0 	ld.w	r10,r7[-32]
80019ec4:	f0 c9 ff ff 	sub	r9,r8,-1
80019ec8:	12 98       	mov	r8,r9
80019eca:	a1 78       	lsl	r8,0x1
80019ecc:	12 08       	add	r8,r9
80019ece:	a5 68       	lsl	r8,0x4
80019ed0:	f4 08 00 08 	add	r8,r10,r8
80019ed4:	70 09       	ld.w	r9,r8[0x0]
80019ed6:	12 98       	mov	r8,r9
80019ed8:	a3 78       	lsl	r8,0x3
80019eda:	f0 09 01 09 	sub	r9,r8,r9
80019ede:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ee2:	f2 08 00 08 	add	r8,r9,r8
80019ee6:	f0 0a 16 03 	lsr	r10,r8,0x3
80019eea:	ee fb ff e0 	ld.w	r11,r7[-32]
80019eee:	f8 c9 ff ff 	sub	r9,r12,-1
80019ef2:	12 98       	mov	r8,r9
80019ef4:	a1 78       	lsl	r8,0x1
80019ef6:	12 08       	add	r8,r9
80019ef8:	a5 68       	lsl	r8,0x4
80019efa:	f6 08 00 08 	add	r8,r11,r8
80019efe:	91 0a       	st.w	r8[0x0],r10
80019f00:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f04:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f08:	12 98       	mov	r8,r9
80019f0a:	a1 78       	lsl	r8,0x1
80019f0c:	12 08       	add	r8,r9
80019f0e:	a5 68       	lsl	r8,0x4
80019f10:	f4 08 00 08 	add	r8,r10,r8
80019f14:	2d 48       	sub	r8,-44
80019f16:	70 09       	ld.w	r9,r8[0x0]
80019f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019f1c:	10 39       	cp.w	r9,r8
80019f1e:	c0 f2       	brcc	80019f3c <run_scheduler_update+0x2de>
80019f20:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f24:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f28:	12 98       	mov	r8,r9
80019f2a:	a1 78       	lsl	r8,0x1
80019f2c:	12 08       	add	r8,r9
80019f2e:	a5 68       	lsl	r8,0x4
80019f30:	f4 08 00 08 	add	r8,r10,r8
80019f34:	2d 48       	sub	r8,-44
80019f36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019f3a:	91 09       	st.w	r8[0x0],r9
80019f3c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f40:	ee fa ff e4 	ld.w	r10,r7[-28]
80019f44:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f48:	14 98       	mov	r8,r10
80019f4a:	a1 78       	lsl	r8,0x1
80019f4c:	14 08       	add	r8,r10
80019f4e:	a5 68       	lsl	r8,0x4
80019f50:	f6 08 00 08 	add	r8,r11,r8
80019f54:	2c c8       	sub	r8,-52
80019f56:	70 0a       	ld.w	r10,r8[0x0]
80019f58:	14 98       	mov	r8,r10
80019f5a:	a5 68       	lsl	r8,0x4
80019f5c:	f0 0a 01 0b 	sub	r11,r8,r10
80019f60:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f64:	ee fc ff e0 	ld.w	r12,r7[-32]
80019f68:	f0 ca ff ff 	sub	r10,r8,-1
80019f6c:	14 98       	mov	r8,r10
80019f6e:	a1 78       	lsl	r8,0x1
80019f70:	14 08       	add	r8,r10
80019f72:	a5 68       	lsl	r8,0x4
80019f74:	f8 08 00 08 	add	r8,r12,r8
80019f78:	70 08       	ld.w	r8,r8[0x0]
80019f7a:	ee fa ff f8 	ld.w	r10,r7[-8]
80019f7e:	f4 08 01 0c 	sub	r12,r10,r8
80019f82:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f86:	ee fe ff e0 	ld.w	lr,r7[-32]
80019f8a:	f0 ca ff ff 	sub	r10,r8,-1
80019f8e:	14 98       	mov	r8,r10
80019f90:	a1 78       	lsl	r8,0x1
80019f92:	14 08       	add	r8,r10
80019f94:	a5 68       	lsl	r8,0x4
80019f96:	fc 08 00 08 	add	r8,lr,r8
80019f9a:	70 08       	ld.w	r8,r8[0x0]
80019f9c:	ee fa ff f8 	ld.w	r10,r7[-8]
80019fa0:	f4 08 01 08 	sub	r8,r10,r8
80019fa4:	f8 08 02 48 	mul	r8,r12,r8
80019fa8:	f6 08 00 08 	add	r8,r11,r8
80019fac:	f0 0a 16 04 	lsr	r10,r8,0x4
80019fb0:	ee fb ff e0 	ld.w	r11,r7[-32]
80019fb4:	12 98       	mov	r8,r9
80019fb6:	a1 78       	lsl	r8,0x1
80019fb8:	12 08       	add	r8,r9
80019fba:	a5 68       	lsl	r8,0x4
80019fbc:	f6 08 00 08 	add	r8,r11,r8
80019fc0:	2c c8       	sub	r8,-52
80019fc2:	91 0a       	st.w	r8[0x0],r10
80019fc4:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019fc8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019fcc:	ee fa ff e0 	ld.w	r10,r7[-32]
80019fd0:	12 98       	mov	r8,r9
80019fd2:	a1 78       	lsl	r8,0x1
80019fd4:	12 08       	add	r8,r9
80019fd6:	a5 68       	lsl	r8,0x4
80019fd8:	f4 08 00 08 	add	r8,r10,r8
80019fdc:	2d 88       	sub	r8,-40
80019fde:	70 09       	ld.w	r9,r8[0x0]
80019fe0:	12 98       	mov	r8,r9
80019fe2:	a3 78       	lsl	r8,0x3
80019fe4:	f0 09 01 03 	sub	r3,r8,r9
80019fe8:	f0 16 00 29 	mcall	r6[164]
80019fec:	18 99       	mov	r9,r12
80019fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ff2:	f2 08 01 08 	sub	r8,r9,r8
80019ff6:	e6 08 00 08 	add	r8,r3,r8
80019ffa:	f0 09 16 03 	lsr	r9,r8,0x3
80019ffe:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a002:	0a 98       	mov	r8,r5
8001a004:	a1 78       	lsl	r8,0x1
8001a006:	0a 08       	add	r8,r5
8001a008:	a5 68       	lsl	r8,0x4
8001a00a:	f4 08 00 08 	add	r8,r10,r8
8001a00e:	2d 88       	sub	r8,-40
8001a010:	91 09       	st.w	r8[0x0],r9
8001a012:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001a016:	58 18       	cp.w	r8,1
8001a018:	c0 81       	brne	8001a028 <run_scheduler_update+0x3ca>
8001a01a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a01e:	30 09       	mov	r9,0
8001a020:	91 29       	st.w	r8[0x8],r9
8001a022:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a026:	c2 08       	rjmp	8001a066 <run_scheduler_update+0x408>
8001a028:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a02c:	11 88       	ld.ub	r8,r8[0x0]
8001a02e:	10 99       	mov	r9,r8
8001a030:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a034:	10 39       	cp.w	r9,r8
8001a036:	c0 51       	brne	8001a040 <run_scheduler_update+0x3e2>
8001a038:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a03c:	30 09       	mov	r9,0
8001a03e:	91 29       	st.w	r8[0x8],r9
8001a040:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a044:	c1 18       	rjmp	8001a066 <run_scheduler_update+0x408>
8001a046:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a04a:	2f f8       	sub	r8,-1
8001a04c:	ef 48 ff e4 	st.w	r7[-28],r8
8001a050:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a054:	11 88       	ld.ub	r8,r8[0x0]
8001a056:	10 99       	mov	r9,r8
8001a058:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a05c:	10 39       	cp.w	r9,r8
8001a05e:	fe 99 fe 16 	brgt	80019c8a <run_scheduler_update+0x2c>
8001a062:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a066:	10 9c       	mov	r12,r8
8001a068:	2f 7d       	sub	sp,-36
8001a06a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001a06e:	00 00       	add	r0,r0
8001a070:	80 01       	ld.sh	r1,r0[0x0]
8001a072:	9a ee       	ld.uh	lr,sp[0xc]

8001a074 <get_task_by_id>:
8001a074:	eb cd 40 80 	pushm	r7,lr
8001a078:	1a 97       	mov	r7,sp
8001a07a:	20 3d       	sub	sp,12
8001a07c:	ef 4c ff f8 	st.w	r7[-8],r12
8001a080:	16 98       	mov	r8,r11
8001a082:	ef 58 ff f4 	st.h	r7[-12],r8
8001a086:	30 08       	mov	r8,0
8001a088:	ef 48 ff fc 	st.w	r7[-4],r8
8001a08c:	30 08       	mov	r8,0
8001a08e:	ef 48 ff fc 	st.w	r7[-4],r8
8001a092:	c2 58       	rjmp	8001a0dc <get_task_by_id+0x68>
8001a094:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a098:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a09c:	12 98       	mov	r8,r9
8001a09e:	a1 78       	lsl	r8,0x1
8001a0a0:	12 08       	add	r8,r9
8001a0a2:	a1 78       	lsl	r8,0x1
8001a0a4:	2f f8       	sub	r8,-1
8001a0a6:	a3 78       	lsl	r8,0x3
8001a0a8:	f4 08 00 08 	add	r8,r10,r8
8001a0ac:	90 68       	ld.sh	r8,r8[0xc]
8001a0ae:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001a0b2:	f0 09 19 00 	cp.h	r9,r8
8001a0b6:	c0 e1       	brne	8001a0d2 <get_task_by_id+0x5e>
8001a0b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0bc:	f0 ca ff f4 	sub	r10,r8,-12
8001a0c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a0c4:	12 98       	mov	r8,r9
8001a0c6:	a1 78       	lsl	r8,0x1
8001a0c8:	12 08       	add	r8,r9
8001a0ca:	a5 68       	lsl	r8,0x4
8001a0cc:	f4 08 00 08 	add	r8,r10,r8
8001a0d0:	c1 08       	rjmp	8001a0f0 <get_task_by_id+0x7c>
8001a0d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0d6:	2f f8       	sub	r8,-1
8001a0d8:	ef 48 ff fc 	st.w	r7[-4],r8
8001a0dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0e0:	11 88       	ld.ub	r8,r8[0x0]
8001a0e2:	10 99       	mov	r9,r8
8001a0e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0e8:	10 39       	cp.w	r9,r8
8001a0ea:	fe 99 ff d5 	brgt	8001a094 <get_task_by_id+0x20>
8001a0ee:	30 08       	mov	r8,0
8001a0f0:	10 9c       	mov	r12,r8
8001a0f2:	2f dd       	sub	sp,-12
8001a0f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a0f8 <get_task_by_index>:
8001a0f8:	eb cd 40 80 	pushm	r7,lr
8001a0fc:	1a 97       	mov	r7,sp
8001a0fe:	20 2d       	sub	sp,8
8001a100:	ef 4c ff fc 	st.w	r7[-4],r12
8001a104:	16 98       	mov	r8,r11
8001a106:	ef 58 ff f8 	st.h	r7[-8],r8
8001a10a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a10e:	11 88       	ld.ub	r8,r8[0x0]
8001a110:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001a114:	f0 09 19 00 	cp.h	r9,r8
8001a118:	c0 e2       	brcc	8001a134 <get_task_by_index+0x3c>
8001a11a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a11e:	f0 ca ff f4 	sub	r10,r8,-12
8001a122:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001a126:	12 98       	mov	r8,r9
8001a128:	a1 78       	lsl	r8,0x1
8001a12a:	12 08       	add	r8,r9
8001a12c:	a5 68       	lsl	r8,0x4
8001a12e:	f4 08 00 08 	add	r8,r10,r8
8001a132:	c0 28       	rjmp	8001a136 <get_task_by_index+0x3e>
8001a134:	30 08       	mov	r8,0
8001a136:	10 9c       	mov	r12,r8
8001a138:	2f ed       	sub	sp,-8
8001a13a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a13e <change_run_mode>:
8001a13e:	eb cd 40 80 	pushm	r7,lr
8001a142:	1a 97       	mov	r7,sp
8001a144:	20 2d       	sub	sp,8
8001a146:	ef 4c ff fc 	st.w	r7[-4],r12
8001a14a:	ef 4b ff f8 	st.w	r7[-8],r11
8001a14e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a152:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a156:	91 39       	st.w	r8[0xc],r9
8001a158:	2f ed       	sub	sp,-8
8001a15a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a15e <change_task_period>:
8001a15e:	eb cd 40 c0 	pushm	r6-r7,lr
8001a162:	1a 97       	mov	r7,sp
8001a164:	20 2d       	sub	sp,8
8001a166:	48 c6       	lddpc	r6,8001a194 <change_task_period+0x36>
8001a168:	1e 26       	rsub	r6,pc
8001a16a:	ef 4c ff fc 	st.w	r7[-4],r12
8001a16e:	ef 4b ff f8 	st.w	r7[-8],r11
8001a172:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a17a:	91 59       	st.w	r8[0x14],r9
8001a17c:	30 2b       	mov	r11,2
8001a17e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a182:	f0 16 00 ad 	mcall	r6[692]
8001a186:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a18a:	f0 16 01 02 	mcall	r6[1032]
8001a18e:	2f ed       	sub	sp,-8
8001a190:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a194:	80 01       	ld.sh	r1,r0[0x0]
8001a196:	9f ec       	st.w	pc[0x38],r12

8001a198 <suspend_task>:
8001a198:	eb cd 40 c0 	pushm	r6-r7,lr
8001a19c:	1a 97       	mov	r7,sp
8001a19e:	20 2d       	sub	sp,8
8001a1a0:	48 96       	lddpc	r6,8001a1c4 <suspend_task+0x2c>
8001a1a2:	1e 26       	rsub	r6,pc
8001a1a4:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1a8:	ef 4b ff f8 	st.w	r7[-8],r11
8001a1ac:	f0 16 00 29 	mcall	r6[164]
8001a1b0:	18 99       	mov	r9,r12
8001a1b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a1b6:	10 09       	add	r9,r8
8001a1b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1bc:	91 69       	st.w	r8[0x18],r9
8001a1be:	2f ed       	sub	sp,-8
8001a1c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a1c4:	80 01       	ld.sh	r1,r0[0x0]
8001a1c6:	a0 26       	st.h	r0[0x4],r6

8001a1c8 <run_task_now>:
8001a1c8:	eb cd 40 80 	pushm	r7,lr
8001a1cc:	1a 97       	mov	r7,sp
8001a1ce:	20 1d       	sub	sp,4
8001a1d0:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1d8:	70 38       	ld.w	r8,r8[0xc]
8001a1da:	58 08       	cp.w	r8,0
8001a1dc:	c0 51       	brne	8001a1e6 <run_task_now+0x1e>
8001a1de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1e2:	30 19       	mov	r9,1
8001a1e4:	91 39       	st.w	r8[0xc],r9
8001a1e6:	2f fd       	sub	sp,-4
8001a1e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a1ec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001a1ec:	eb cd 40 c0 	pushm	r6-r7,lr
8001a1f0:	1a 97       	mov	r7,sp
8001a1f2:	20 3d       	sub	sp,12
8001a1f4:	49 06       	lddpc	r6,8001a234 <mav_array_memcpy+0x48>
8001a1f6:	1e 26       	rsub	r6,pc
8001a1f8:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1fc:	ef 4b ff f8 	st.w	r7[-8],r11
8001a200:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001a204:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a208:	58 08       	cp.w	r8,0
8001a20a:	c0 91       	brne	8001a21c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001a20c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a210:	30 0b       	mov	r11,0
8001a212:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a216:	f0 16 00 31 	mcall	r6[196]
8001a21a:	c0 98       	rjmp	8001a22c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001a21c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a220:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a224:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a228:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001a22c:	2f dd       	sub	sp,-12
8001a22e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a232:	00 00       	add	r0,r0
8001a234:	80 01       	ld.sh	r1,r0[0x0]
8001a236:	a0 7a       	st.h	r0[0xe],r10

8001a238 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001a238:	eb cd 40 c0 	pushm	r6-r7,lr
8001a23c:	1a 97       	mov	r7,sp
8001a23e:	20 2d       	sub	sp,8
8001a240:	4a 26       	lddpc	r6,8001a2c8 <init_gps_ubx+0x90>
8001a242:	1e 26       	rsub	r6,pc
8001a244:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001a248:	f0 16 00 33 	mcall	r6[204]
8001a24c:	18 99       	mov	r9,r12
8001a24e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a252:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001a254:	30 18       	mov	r8,1
8001a256:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001a25a:	ec f8 04 2c 	ld.w	r8,r6[1068]
8001a25e:	e0 69 04 b0 	mov	r9,1200
8001a262:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001a264:	f0 16 01 84 	mcall	r6[1552]
	
	engine_nav_setting = _engine_nav_setting;
8001a268:	ec f8 01 e0 	ld.w	r8,r6[480]
8001a26c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a270:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001a272:	ec f8 00 00 	ld.w	r8,r6[0]
8001a276:	70 09       	ld.w	r9,r8[0x0]
8001a278:	30 18       	mov	r8,1
8001a27a:	f3 68 0b 54 	st.b	r9[2900],r8
	centralData->GPS_data.num_sats = 0;
8001a27e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a282:	70 09       	ld.w	r9,r8[0x0]
8001a284:	30 08       	mov	r8,0
8001a286:	f3 68 0b 48 	st.b	r9[2888],r8
	
	next_fix = false;
8001a28a:	ec f9 01 ec 	ld.w	r9,r6[492]
8001a28e:	30 08       	mov	r8,0
8001a290:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001a292:	ec f9 03 c0 	ld.w	r9,r6[960]
8001a296:	30 08       	mov	r8,0
8001a298:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001a29a:	ec f9 06 58 	ld.w	r9,r6[1624]
8001a29e:	30 08       	mov	r8,0
8001a2a0:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001a2a2:	ec f8 06 c0 	ld.w	r8,r6[1728]
8001a2a6:	30 09       	mov	r9,0
8001a2a8:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001a2aa:	ec f9 02 54 	ld.w	r9,r6[596]
8001a2ae:	30 08       	mov	r8,0
8001a2b0:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001a2b2:	ec f9 02 20 	ld.w	r9,r6[544]
8001a2b6:	30 08       	mov	r8,0
8001a2b8:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001a2ba:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a2be:	30 08       	mov	r8,0
8001a2c0:	b2 88       	st.b	r9[0x0],r8
	}
8001a2c2:	2f ed       	sub	sp,-8
8001a2c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2c8:	80 01       	ld.sh	r1,r0[0x0]
8001a2ca:	a0 c6       	st.b	r0[0x4],r6
8001a2cc:	6c 61       	ld.w	r1,r6[0x18]
8001a2ce:	72 67       	ld.w	r7,r9[0x18]
8001a2d0:	65 20       	ld.w	r0,r2[0x48]
8001a2d2:	70 61       	ld.w	r1,r8[0x18]
8001a2d4:	79 6c       	ld.w	r12,r12[0x58]
8001a2d6:	6f 61       	ld.w	r1,r7[0x58]
8001a2d8:	64 3a       	ld.w	r10,r2[0xc]
8001a2da:	20 00       	sub	r0,0
8001a2dc:	0a 00       	add	r0,r5
8001a2de:	00 00       	add	r0,r0
8001a2e0:	57 72       	stdsp	sp[0x1dc],r2
8001a2e2:	6f 6e       	ld.w	lr,r7[0x58]
8001a2e4:	67 20       	ld.w	r0,r3[0x48]
8001a2e6:	50 6f       	stdsp	sp[0x18],pc
8001a2e8:	73 6c       	ld.w	r12,r9[0x58]
8001a2ea:	6c 68       	ld.w	r8,r6[0x18]
8001a2ec:	20 6d       	sub	sp,24
8001a2ee:	65 73       	ld.w	r3,r2[0x5c]
8001a2f0:	73 61       	ld.w	r1,r9[0x58]
8001a2f2:	67 65       	ld.w	r5,r3[0x58]
8001a2f4:	20 30       	sub	r0,3
8001a2f6:	78 00       	ld.w	r0,r12[0x0]
8001a2f8:	20 4d       	sub	sp,16
8001a2fa:	73 67       	ld.w	r7,r9[0x58]
8001a2fc:	20 69       	sub	r9,6
8001a2fe:	64 3a       	ld.w	r10,r2[0xc]
8001a300:	20 30       	sub	r0,3
8001a302:	78 00       	ld.w	r0,r12[0x0]
8001a304:	20 52       	sub	r2,5
8001a306:	65 63       	ld.w	r3,r2[0x58]
8001a308:	65 69       	ld.w	r9,r2[0x58]
8001a30a:	76 65       	ld.w	r5,r11[0x18]
8001a30c:	64 20       	ld.w	r0,r2[0x8]
8001a30e:	73 69       	ld.w	r9,r9[0x58]
8001a310:	7a 65       	ld.w	r5,sp[0x18]
8001a312:	3a 00       	mov	r0,-96
8001a314:	20 73       	sub	r3,7
8001a316:	68 6f       	ld.w	pc,r4[0x18]
8001a318:	75 6c       	ld.w	r12,r10[0x58]
8001a31a:	64 20       	ld.w	r0,r2[0x8]
8001a31c:	62 65       	ld.w	r5,r1[0x18]
8001a31e:	3a 00       	mov	r0,-96
8001a320:	57 72       	stdsp	sp[0x1dc],r2
8001a322:	6f 6e       	ld.w	lr,r7[0x58]
8001a324:	67 20       	ld.w	r0,r3[0x48]
8001a326:	4e 61       	lddpc	r1,8001a4bc <init_gps_ubx+0x284>
8001a328:	76 20       	ld.w	r0,r11[0x8]
8001a32a:	53 74       	stdsp	sp[0xdc],r4
8001a32c:	61 74       	ld.w	r4,r0[0x5c]
8001a32e:	75 73       	ld.w	r3,r10[0x5c]
8001a330:	20 6d       	sub	sp,24
8001a332:	65 73       	ld.w	r3,r2[0x5c]
8001a334:	73 61       	ld.w	r1,r9[0x58]
8001a336:	67 65       	ld.w	r5,r3[0x58]
8001a338:	20 30       	sub	r0,3
8001a33a:	78 00       	ld.w	r0,r12[0x0]
8001a33c:	57 72       	stdsp	sp[0x1dc],r2
8001a33e:	6f 6e       	ld.w	lr,r7[0x58]
8001a340:	67 20       	ld.w	r0,r3[0x48]
8001a342:	53 6f       	stdsp	sp[0xd8],pc
8001a344:	6c 75       	ld.w	r5,r6[0x1c]
8001a346:	74 69       	ld.w	r9,r10[0x18]
8001a348:	6f 6e       	ld.w	lr,r7[0x58]
8001a34a:	20 6d       	sub	sp,24
8001a34c:	65 73       	ld.w	r3,r2[0x5c]
8001a34e:	73 61       	ld.w	r1,r9[0x58]
8001a350:	67 65       	ld.w	r5,r3[0x58]
8001a352:	20 30       	sub	r0,3
8001a354:	78 00       	ld.w	r0,r12[0x0]
8001a356:	00 00       	add	r0,r0
8001a358:	57 72       	stdsp	sp[0x1dc],r2
8001a35a:	6f 6e       	ld.w	lr,r7[0x58]
8001a35c:	67 20       	ld.w	r0,r3[0x48]
8001a35e:	56 65       	stdsp	sp[0x198],r5
8001a360:	6c 6e       	ld.w	lr,r6[0x18]
8001a362:	65 64       	ld.w	r4,r2[0x58]
8001a364:	20 6d       	sub	sp,24
8001a366:	65 73       	ld.w	r3,r2[0x5c]
8001a368:	73 61       	ld.w	r1,r9[0x58]
8001a36a:	67 65       	ld.w	r5,r3[0x58]
8001a36c:	20 30       	sub	r0,3
8001a36e:	78 00       	ld.w	r0,r12[0x0]
8001a370:	57 72       	stdsp	sp[0x1dc],r2
8001a372:	6f 6e       	ld.w	lr,r7[0x58]
8001a374:	67 20       	ld.w	r0,r3[0x48]
8001a376:	53 56       	stdsp	sp[0xd4],r6
8001a378:	20 49       	sub	r9,4
8001a37a:	6e 66       	ld.w	r6,r7[0x18]
8001a37c:	6f 20       	ld.w	r0,r7[0x48]
8001a37e:	6d 65       	ld.w	r5,r6[0x58]
8001a380:	73 73       	ld.w	r3,r9[0x5c]
8001a382:	61 67       	ld.w	r7,r0[0x58]
8001a384:	65 20       	ld.w	r0,r2[0x48]
8001a386:	30 78       	mov	r8,7
8001a388:	00 00       	add	r0,r0
8001a38a:	00 00       	add	r0,r0
8001a38c:	55 6e       	stdsp	sp[0x158],lr
8001a38e:	65 78       	ld.w	r8,r2[0x5c]
8001a390:	70 65       	ld.w	r5,r8[0x18]
8001a392:	63 74       	ld.w	r4,r1[0x5c]
8001a394:	65 64       	ld.w	r4,r2[0x58]
8001a396:	20 4e       	sub	lr,4
8001a398:	41 56       	lddsp	r6,sp[0x54]
8001a39a:	20 6d       	sub	sp,24
8001a39c:	65 73       	ld.w	r3,r2[0x5c]
8001a39e:	73 61       	ld.w	r1,r9[0x58]
8001a3a0:	67 65       	ld.w	r5,r3[0x58]
8001a3a2:	2c 20       	sub	r0,-62
8001a3a4:	43 6c       	lddsp	r12,sp[0xd8]
8001a3a6:	61 73       	ld.w	r3,r0[0x5c]
8001a3a8:	73 3a       	ld.w	r10,r9[0x4c]
8001a3aa:	20 30       	sub	r0,3
8001a3ac:	78 00       	ld.w	r0,r12[0x0]
8001a3ae:	00 00       	add	r0,r0
8001a3b0:	2c 20       	sub	r0,-62
8001a3b2:	6d 73       	ld.w	r3,r6[0x5c]
8001a3b4:	67 20       	ld.w	r0,r3[0x48]
8001a3b6:	69 64       	ld.w	r4,r4[0x58]
8001a3b8:	3a 20       	mov	r0,-94
8001a3ba:	30 78       	mov	r8,7
8001a3bc:	00 00       	add	r0,r0
8001a3be:	00 00       	add	r0,r0
8001a3c0:	20 6f       	sub	pc,6
8001a3c2:	66 20       	ld.w	r0,r3[0x8]
8001a3c4:	73 69       	ld.w	r9,r9[0x58]
8001a3c6:	7a 65       	ld.w	r5,sp[0x18]
8001a3c8:	20 00       	sub	r0,0
8001a3ca:	00 00       	add	r0,r0
8001a3cc:	57 72       	stdsp	sp[0x1dc],r2
8001a3ce:	6f 6e       	ld.w	lr,r7[0x58]
8001a3d0:	67 20       	ld.w	r0,r3[0x48]
8001a3d2:	4e 61       	lddpc	r1,8001a568 <ubx_read+0x32>
8001a3d4:	76 20       	ld.w	r0,r11[0x8]
8001a3d6:	53 65       	stdsp	sp[0xd8],r5
8001a3d8:	74 74       	ld.w	r4,r10[0x1c]
8001a3da:	69 6e       	ld.w	lr,r4[0x58]
8001a3dc:	67 73       	ld.w	r3,r3[0x5c]
8001a3de:	20 6d       	sub	sp,24
8001a3e0:	65 73       	ld.w	r3,r2[0x5c]
8001a3e2:	73 61       	ld.w	r1,r9[0x58]
8001a3e4:	67 65       	ld.w	r5,r3[0x58]
8001a3e6:	20 30       	sub	r0,3
8001a3e8:	78 00       	ld.w	r0,r12[0x0]
8001a3ea:	00 00       	add	r0,r0
8001a3ec:	57 72       	stdsp	sp[0x1dc],r2
8001a3ee:	6f 6e       	ld.w	lr,r7[0x58]
8001a3f0:	67 20       	ld.w	r0,r3[0x48]
8001a3f2:	43 46       	lddsp	r6,sp[0xd0]
8001a3f4:	47 20       	lddsp	r0,sp[0x1c8]
8001a3f6:	52 61       	stdsp	sp[0x98],r1
8001a3f8:	74 65       	ld.w	r5,r10[0x18]
8001a3fa:	20 6d       	sub	sp,24
8001a3fc:	65 73       	ld.w	r3,r2[0x5c]
8001a3fe:	73 61       	ld.w	r1,r9[0x58]
8001a400:	67 65       	ld.w	r5,r3[0x58]
8001a402:	20 30       	sub	r0,3
8001a404:	78 00       	ld.w	r0,r12[0x0]
8001a406:	00 00       	add	r0,r0
8001a408:	57 72       	stdsp	sp[0x1dc],r2
8001a40a:	6f 6e       	ld.w	lr,r7[0x58]
8001a40c:	67 20       	ld.w	r0,r3[0x48]
8001a40e:	43 46       	lddsp	r6,sp[0xd0]
8001a410:	47 20       	lddsp	r0,sp[0x1c8]
8001a412:	53 65       	stdsp	sp[0xd8],r5
8001a414:	74 2f       	ld.w	pc,r10[0x8]
8001a416:	67 65       	ld.w	r5,r3[0x58]
8001a418:	74 20       	ld.w	r0,r10[0x8]
8001a41a:	6d 65       	ld.w	r5,r6[0x58]
8001a41c:	73 73       	ld.w	r3,r9[0x5c]
8001a41e:	61 67       	ld.w	r7,r0[0x58]
8001a420:	65 20       	ld.w	r0,r2[0x48]
8001a422:	30 78       	mov	r8,7
8001a424:	00 00       	add	r0,r0
8001a426:	00 00       	add	r0,r0
8001a428:	55 6e       	stdsp	sp[0x158],lr
8001a42a:	65 78       	ld.w	r8,r2[0x5c]
8001a42c:	70 65       	ld.w	r5,r8[0x18]
8001a42e:	63 74       	ld.w	r4,r1[0x5c]
8001a430:	65 64       	ld.w	r4,r2[0x58]
8001a432:	20 43       	sub	r3,4
8001a434:	46 47       	lddsp	r7,sp[0x190]
8001a436:	20 6d       	sub	sp,24
8001a438:	65 73       	ld.w	r3,r2[0x5c]
8001a43a:	73 61       	ld.w	r1,r9[0x58]
8001a43c:	67 65       	ld.w	r5,r3[0x58]
8001a43e:	2c 20       	sub	r0,-62
8001a440:	43 6c       	lddsp	r12,sp[0xd8]
8001a442:	61 73       	ld.w	r3,r0[0x5c]
8001a444:	73 3a       	ld.w	r10,r9[0x4c]
8001a446:	20 30       	sub	r0,3
8001a448:	78 00       	ld.w	r0,r12[0x0]
8001a44a:	00 00       	add	r0,r0
8001a44c:	57 72       	stdsp	sp[0x1dc],r2
8001a44e:	6f 6e       	ld.w	lr,r7[0x58]
8001a450:	67 20       	ld.w	r0,r3[0x48]
8001a452:	4d 4f       	lddpc	pc,8001a5a0 <ubx_read+0x6a>
8001a454:	4e 20       	lddpc	r0,8001a5dc <ubx_read+0xa6>
8001a456:	52 58       	stdsp	sp[0x94],r8
8001a458:	52 20       	stdsp	sp[0x88],r0
8001a45a:	6d 65       	ld.w	r5,r6[0x58]
8001a45c:	73 73       	ld.w	r3,r9[0x5c]
8001a45e:	61 67       	ld.w	r7,r0[0x58]
8001a460:	65 20       	ld.w	r0,r2[0x48]
8001a462:	30 78       	mov	r8,7
8001a464:	00 00       	add	r0,r0
8001a466:	00 00       	add	r0,r0
8001a468:	55 6e       	stdsp	sp[0x158],lr
8001a46a:	65 78       	ld.w	r8,r2[0x5c]
8001a46c:	70 65       	ld.w	r5,r8[0x18]
8001a46e:	63 74       	ld.w	r4,r1[0x5c]
8001a470:	65 64       	ld.w	r4,r2[0x58]
8001a472:	20 54       	sub	r4,5
8001a474:	49 4d       	lddpc	sp,8001a4c4 <init_gps_ubx+0x28c>
8001a476:	20 6d       	sub	sp,24
8001a478:	65 73       	ld.w	r3,r2[0x5c]
8001a47a:	73 61       	ld.w	r1,r9[0x58]
8001a47c:	67 65       	ld.w	r5,r3[0x58]
8001a47e:	2c 20       	sub	r0,-62
8001a480:	43 6c       	lddsp	r12,sp[0xd8]
8001a482:	61 73       	ld.w	r3,r0[0x5c]
8001a484:	73 3a       	ld.w	r10,r9[0x4c]
8001a486:	20 30       	sub	r0,3
8001a488:	78 00       	ld.w	r0,r12[0x0]
8001a48a:	00 00       	add	r0,r0
8001a48c:	20 73       	sub	r3,7
8001a48e:	68 6f       	ld.w	pc,r4[0x18]
8001a490:	75 6c       	ld.w	r12,r10[0x58]
8001a492:	64 20       	ld.w	r0,r2[0x8]
8001a494:	62 65       	ld.w	r5,r1[0x18]
8001a496:	20 3a       	sub	r10,3
8001a498:	00 00       	add	r0,r0
8001a49a:	00 00       	add	r0,r0
8001a49c:	57 72       	stdsp	sp[0x1dc],r2
8001a49e:	6f 6e       	ld.w	lr,r7[0x58]
8001a4a0:	67 20       	ld.w	r0,r3[0x48]
8001a4a2:	54 49       	stdsp	sp[0x110],r9
8001a4a4:	4d 20       	lddpc	r0,8001a5ec <ubx_read+0xb6>
8001a4a6:	54 50       	stdsp	sp[0x114],r0
8001a4a8:	20 6d       	sub	sp,24
8001a4aa:	65 73       	ld.w	r3,r2[0x5c]
8001a4ac:	73 61       	ld.w	r1,r9[0x58]
8001a4ae:	67 65       	ld.w	r5,r3[0x58]
8001a4b0:	20 30       	sub	r0,3
8001a4b2:	78 00       	ld.w	r0,r12[0x0]
8001a4b4:	57 72       	stdsp	sp[0x1dc],r2
8001a4b6:	6f 6e       	ld.w	lr,r7[0x58]
8001a4b8:	67 20       	ld.w	r0,r3[0x48]
8001a4ba:	54 49       	stdsp	sp[0x110],r9
8001a4bc:	4d 20       	lddpc	r0,8001a604 <ubx_read+0xce>
8001a4be:	56 52       	stdsp	sp[0x194],r2
8001a4c0:	46 59       	lddsp	r9,sp[0x194]
8001a4c2:	20 6d       	sub	sp,24
8001a4c4:	65 73       	ld.w	r3,r2[0x5c]
8001a4c6:	73 61       	ld.w	r1,r9[0x58]
8001a4c8:	67 65       	ld.w	r5,r3[0x58]
8001a4ca:	20 30       	sub	r0,3
8001a4cc:	78 00       	ld.w	r0,r12[0x0]
8001a4ce:	00 00       	add	r0,r0
8001a4d0:	55 6e       	stdsp	sp[0x158],lr
8001a4d2:	65 78       	ld.w	r8,r2[0x5c]
8001a4d4:	70 65       	ld.w	r5,r8[0x18]
8001a4d6:	63 74       	ld.w	r4,r1[0x5c]
8001a4d8:	65 64       	ld.w	r4,r2[0x58]
8001a4da:	20 6d       	sub	sp,24
8001a4dc:	65 73       	ld.w	r3,r2[0x5c]
8001a4de:	73 61       	ld.w	r1,r9[0x58]
8001a4e0:	67 65       	ld.w	r5,r3[0x58]
8001a4e2:	2c 20       	sub	r0,-62
8001a4e4:	43 6c       	lddsp	r12,sp[0xd8]
8001a4e6:	61 73       	ld.w	r3,r0[0x5c]
8001a4e8:	73 3a       	ld.w	r10,r9[0x4c]
8001a4ea:	20 30       	sub	r0,3
8001a4ec:	78 00       	ld.w	r0,r12[0x0]
8001a4ee:	00 00       	add	r0,r0
8001a4f0:	62 61       	ld.w	r1,r1[0x18]
8001a4f2:	64 20       	ld.w	r0,r2[0x8]
8001a4f4:	63 6b       	ld.w	r11,r1[0x58]
8001a4f6:	73 75       	ld.w	r5,r9[0x5c]
8001a4f8:	6d 5f       	ld.w	pc,r6[0x54]
8001a4fa:	61 20       	ld.w	r0,r0[0x48]
8001a4fc:	00 00       	add	r0,r0
8001a4fe:	00 00       	add	r0,r0
8001a500:	20 73       	sub	r3,7
8001a502:	68 6f       	ld.w	pc,r4[0x18]
8001a504:	75 6c       	ld.w	r12,r10[0x58]
8001a506:	64 20       	ld.w	r0,r2[0x8]
8001a508:	62 65       	ld.w	r5,r1[0x18]
8001a50a:	20 00       	sub	r0,0
8001a50c:	20 63       	sub	r3,6
8001a50e:	6c 61       	ld.w	r1,r6[0x18]
8001a510:	73 73       	ld.w	r3,r9[0x5c]
8001a512:	20 3a       	sub	r10,3
8001a514:	20 30       	sub	r0,3
8001a516:	78 00       	ld.w	r0,r12[0x0]
8001a518:	20 6d       	sub	sp,24
8001a51a:	73 67       	ld.w	r7,r9[0x58]
8001a51c:	5f 69       	srmi	r9
8001a51e:	64 20       	ld.w	r0,r2[0x8]
8001a520:	3a 20       	mov	r0,-94
8001a522:	30 78       	mov	r8,7
8001a524:	00 00       	add	r0,r0
8001a526:	00 00       	add	r0,r0
8001a528:	62 61       	ld.w	r1,r1[0x18]
8001a52a:	64 20       	ld.w	r0,r2[0x8]
8001a52c:	63 6b       	ld.w	r11,r1[0x58]
8001a52e:	73 75       	ld.w	r5,r9[0x5c]
8001a530:	6d 5f       	ld.w	pc,r6[0x54]
8001a532:	62 20       	ld.w	r0,r1[0x8]
	...

8001a536 <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001a536:	eb cd 40 c0 	pushm	r6-r7,lr
8001a53a:	1a 97       	mov	r7,sp
8001a53c:	20 2d       	sub	sp,8
8001a53e:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001a542:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001a544:	30 08       	mov	r8,0
8001a546:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001a54a:	e0 8f 06 64 	bral	8001b212 <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001a54e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a552:	70 08       	ld.w	r8,r8[0x0]
8001a554:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001a558:	10 9c       	mov	r12,r8
8001a55a:	f0 16 00 45 	mcall	r6[276]
8001a55e:	18 98       	mov	r8,r12
8001a560:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001a564:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a568:	11 88       	ld.ub	r8,r8[0x0]
8001a56a:	58 88       	cp.w	r8,8
8001a56c:	e0 8b 06 53 	brhi	8001b212 <ubx_read+0xcdc>
8001a570:	fe c9 ff f8 	sub	r9,pc,-8
8001a574:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001a578:	e0 8f 00 26 	bral	8001a5c4 <ubx_read+0x8e>
8001a57c:	e0 8f 00 10 	bral	8001a59c <ubx_read+0x66>
8001a580:	e0 8f 00 38 	bral	8001a5f0 <ubx_read+0xba>
8001a584:	e0 8f 00 50 	bral	8001a624 <ubx_read+0xee>
8001a588:	e0 8f 00 74 	bral	8001a670 <ubx_read+0x13a>
8001a58c:	e0 8f 00 98 	bral	8001a6bc <ubx_read+0x186>
8001a590:	e0 8f 05 68 	bral	8001b060 <ubx_read+0xb2a>
8001a594:	e0 8f 05 ac 	bral	8001b0ec <ubx_read+0xbb6>
8001a598:	e0 8f 05 f0 	bral	8001b178 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001a59c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a5a0:	36 28       	mov	r8,98
8001a5a2:	f0 09 18 00 	cp.b	r9,r8
8001a5a6:	c0 b1       	brne	8001a5bc <ubx_read+0x86>
			{
				step++;
8001a5a8:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5ac:	11 88       	ld.ub	r8,r8[0x0]
8001a5ae:	2f f8       	sub	r8,-1
8001a5b0:	5c 58       	castu.b	r8
8001a5b2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5b6:	b2 88       	st.b	r9[0x0],r8
				break;
8001a5b8:	e0 8f 06 2d 	bral	8001b212 <ubx_read+0xcdc>
			}
			step = 0;
8001a5bc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5c0:	30 08       	mov	r8,0
8001a5c2:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001a5c4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a5c8:	3b 58       	mov	r8,-75
8001a5ca:	f0 09 18 00 	cp.b	r9,r8
8001a5ce:	c0 b1       	brne	8001a5e4 <ubx_read+0xae>
			{
				step++;
8001a5d0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5d4:	11 88       	ld.ub	r8,r8[0x0]
8001a5d6:	2f f8       	sub	r8,-1
8001a5d8:	5c 58       	castu.b	r8
8001a5da:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5de:	b2 88       	st.b	r9[0x0],r8
				break;
8001a5e0:	e0 8f 06 19 	bral	8001b212 <ubx_read+0xcdc>
			}
			step = 0;
8001a5e4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5e8:	30 08       	mov	r8,0
8001a5ea:	b2 88       	st.b	r9[0x0],r8
			break;
8001a5ec:	e0 8f 06 13 	bral	8001b212 <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001a5f0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5f4:	11 88       	ld.ub	r8,r8[0x0]
8001a5f6:	2f f8       	sub	r8,-1
8001a5f8:	5c 58       	castu.b	r8
8001a5fa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5fe:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001a600:	ec f9 00 60 	ld.w	r9,r6[96]
8001a604:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a608:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001a60a:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a60e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a612:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001a614:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a618:	11 88       	ld.ub	r8,r8[0x0]
8001a61a:	ec f9 01 10 	ld.w	r9,r6[272]
8001a61e:	b2 88       	st.b	r9[0x0],r8
			break;
8001a620:	e0 8f 05 f9 	bral	8001b212 <ubx_read+0xcdc>
		case 3:
			step++;
8001a624:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a628:	11 88       	ld.ub	r8,r8[0x0]
8001a62a:	2f f8       	sub	r8,-1
8001a62c:	5c 58       	castu.b	r8
8001a62e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a632:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a634:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a638:	11 88       	ld.ub	r8,r8[0x0]
8001a63a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a63e:	f2 08 00 08 	add	r8,r9,r8
8001a642:	5c 58       	castu.b	r8
8001a644:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a648:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a64a:	ec f8 01 10 	ld.w	r8,r6[272]
8001a64e:	11 89       	ld.ub	r9,r8[0x0]
8001a650:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a654:	11 88       	ld.ub	r8,r8[0x0]
8001a656:	f2 08 00 08 	add	r8,r9,r8
8001a65a:	5c 58       	castu.b	r8
8001a65c:	ec f9 01 10 	ld.w	r9,r6[272]
8001a660:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001a662:	ec f9 00 5c 	ld.w	r9,r6[92]
8001a666:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a66a:	b2 88       	st.b	r9[0x0],r8
			break;
8001a66c:	e0 8f 05 d3 	bral	8001b212 <ubx_read+0xcdc>
		case 4:
			step++;
8001a670:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a674:	11 88       	ld.ub	r8,r8[0x0]
8001a676:	2f f8       	sub	r8,-1
8001a678:	5c 58       	castu.b	r8
8001a67a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a67e:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a680:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a684:	11 88       	ld.ub	r8,r8[0x0]
8001a686:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a68a:	f2 08 00 08 	add	r8,r9,r8
8001a68e:	5c 58       	castu.b	r8
8001a690:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a694:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a696:	ec f8 01 10 	ld.w	r8,r6[272]
8001a69a:	11 89       	ld.ub	r9,r8[0x0]
8001a69c:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a6a0:	11 88       	ld.ub	r8,r8[0x0]
8001a6a2:	f2 08 00 08 	add	r8,r9,r8
8001a6a6:	5c 58       	castu.b	r8
8001a6a8:	ec f9 01 10 	ld.w	r9,r6[272]
8001a6ac:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001a6ae:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a6b2:	ec f9 00 58 	ld.w	r9,r6[88]
8001a6b6:	b2 08       	st.h	r9[0x0],r8
			break;
8001a6b8:	e0 8f 05 ad 	bral	8001b212 <ubx_read+0xcdc>
		case 5:
			step++;
8001a6bc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a6c0:	11 88       	ld.ub	r8,r8[0x0]
8001a6c2:	2f f8       	sub	r8,-1
8001a6c4:	5c 58       	castu.b	r8
8001a6c6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6ca:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001a6cc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a6d0:	a9 68       	lsl	r8,0x8
8001a6d2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a6d6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a6da:	90 08       	ld.sh	r8,r8[0x0]
8001a6dc:	5c 88       	casts.h	r8
8001a6de:	f3 e8 10 08 	or	r8,r9,r8
8001a6e2:	5c 88       	casts.h	r8
8001a6e4:	ec f9 00 58 	ld.w	r9,r6[88]
8001a6e8:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001a6ea:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a6ee:	11 88       	ld.ub	r8,r8[0x0]
8001a6f0:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a6f4:	f2 08 00 08 	add	r8,r9,r8
8001a6f8:	5c 58       	castu.b	r8
8001a6fa:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a6fe:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a700:	ec f8 01 10 	ld.w	r8,r6[272]
8001a704:	11 89       	ld.ub	r9,r8[0x0]
8001a706:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a70a:	11 88       	ld.ub	r8,r8[0x0]
8001a70c:	f2 08 00 08 	add	r8,r9,r8
8001a710:	5c 58       	castu.b	r8
8001a712:	ec f9 01 10 	ld.w	r9,r6[272]
8001a716:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001a718:	ec f8 00 58 	ld.w	r8,r6[88]
8001a71c:	90 09       	ld.sh	r9,r8[0x0]
8001a71e:	e0 68 02 00 	mov	r8,512
8001a722:	f0 09 19 00 	cp.h	r9,r8
8001a726:	e0 88 00 1b 	brls	8001a75c <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001a72a:	fe cc 04 5e 	sub	r12,pc,1118
8001a72e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a732:	ec f8 00 58 	ld.w	r8,r6[88]
8001a736:	90 08       	ld.sh	r8,r8[0x0]
8001a738:	5c 78       	castu.h	r8
8001a73a:	30 ab       	mov	r11,10
8001a73c:	10 9c       	mov	r12,r8
8001a73e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a742:	fe cc 04 66 	sub	r12,pc,1126
8001a746:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001a74a:	ec f9 00 58 	ld.w	r9,r6[88]
8001a74e:	30 08       	mov	r8,0
8001a750:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001a752:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a756:	30 08       	mov	r8,0
8001a758:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001a75a:	c0 5b       	rjmp	8001a564 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001a75c:	ec f9 01 d0 	ld.w	r9,r6[464]
8001a760:	30 08       	mov	r8,0
8001a762:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001a764:	ec f8 00 60 	ld.w	r8,r6[96]
8001a768:	11 89       	ld.ub	r9,r8[0x0]
8001a76a:	30 18       	mov	r8,1
8001a76c:	f0 09 18 00 	cp.b	r9,r8
8001a770:	e0 81 01 c0 	brne	8001aaf0 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001a774:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a778:	11 88       	ld.ub	r8,r8[0x0]
8001a77a:	58 68       	cp.w	r8,6
8001a77c:	e0 80 00 ab 	breq	8001a8d2 <ubx_read+0x39c>
8001a780:	e0 89 00 08 	brgt	8001a790 <ubx_read+0x25a>
8001a784:	58 28       	cp.w	r8,2
8001a786:	c0 e0       	breq	8001a7a2 <ubx_read+0x26c>
8001a788:	58 38       	cp.w	r8,3
8001a78a:	c5 80       	breq	8001a83a <ubx_read+0x304>
8001a78c:	e0 8f 01 84 	bral	8001aa94 <ubx_read+0x55e>
8001a790:	59 28       	cp.w	r8,18
8001a792:	e0 80 00 eb 	breq	8001a968 <ubx_read+0x432>
8001a796:	e0 48 00 30 	cp.w	r8,48
8001a79a:	e0 80 01 32 	breq	8001a9fe <ubx_read+0x4c8>
8001a79e:	e0 8f 01 7b 	bral	8001aa94 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001a7a2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a7a6:	90 09       	ld.sh	r9,r8[0x0]
8001a7a8:	31 c8       	mov	r8,28
8001a7aa:	f0 09 19 00 	cp.h	r9,r8
8001a7ae:	c1 21       	brne	8001a7d2 <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001a7b0:	ec f9 07 9c 	ld.w	r9,r6[1948]
8001a7b4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a7b8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001a7ba:	ec f9 03 80 	ld.w	r9,r6[896]
8001a7be:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a7c2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001a7c4:	ec f8 01 00 	ld.w	r8,r6[256]
8001a7c8:	ec f9 04 88 	ld.w	r9,r6[1160]
8001a7cc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a7ce:	e0 8f 01 8f 	bral	8001aaec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001a7d2:	fe cc 04 f2 	sub	r12,pc,1266
8001a7d6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a7da:	ec f8 00 60 	ld.w	r8,r6[96]
8001a7de:	11 88       	ld.ub	r8,r8[0x0]
8001a7e0:	31 0b       	mov	r11,16
8001a7e2:	10 9c       	mov	r12,r8
8001a7e4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a7e8:	fe cc 04 f0 	sub	r12,pc,1264
8001a7ec:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a7f0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a7f4:	11 88       	ld.ub	r8,r8[0x0]
8001a7f6:	31 0b       	mov	r11,16
8001a7f8:	10 9c       	mov	r12,r8
8001a7fa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a7fe:	fe cc 04 fa 	sub	r12,pc,1274
8001a802:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a806:	ec f8 00 58 	ld.w	r8,r6[88]
8001a80a:	90 08       	ld.sh	r8,r8[0x0]
8001a80c:	5c 78       	castu.h	r8
8001a80e:	30 ab       	mov	r11,10
8001a810:	10 9c       	mov	r12,r8
8001a812:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a816:	fe cc 05 02 	sub	r12,pc,1282
8001a81a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001a81e:	30 ab       	mov	r11,10
8001a820:	31 cc       	mov	r12,28
8001a822:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a826:	fe cc 05 4a 	sub	r12,pc,1354
8001a82a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a82e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a832:	30 08       	mov	r8,0
8001a834:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a836:	fe 9f fe 97 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001a83a:	ec f8 00 58 	ld.w	r8,r6[88]
8001a83e:	90 09       	ld.sh	r9,r8[0x0]
8001a840:	31 08       	mov	r8,16
8001a842:	f0 09 19 00 	cp.h	r9,r8
8001a846:	c1 21       	brne	8001a86a <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001a848:	ec f9 06 3c 	ld.w	r9,r6[1596]
8001a84c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a850:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001a852:	ec f9 03 84 	ld.w	r9,r6[900]
8001a856:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a85a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001a85c:	ec f8 01 00 	ld.w	r8,r6[256]
8001a860:	ec f9 04 48 	ld.w	r9,r6[1096]
8001a864:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a866:	e0 8f 01 43 	bral	8001aaec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001a86a:	fe cc 05 4a 	sub	r12,pc,1354
8001a86e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a872:	ec f8 00 60 	ld.w	r8,r6[96]
8001a876:	11 88       	ld.ub	r8,r8[0x0]
8001a878:	31 0b       	mov	r11,16
8001a87a:	10 9c       	mov	r12,r8
8001a87c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a880:	fe cc 05 88 	sub	r12,pc,1416
8001a884:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a888:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a88c:	11 88       	ld.ub	r8,r8[0x0]
8001a88e:	31 0b       	mov	r11,16
8001a890:	10 9c       	mov	r12,r8
8001a892:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a896:	fe cc 05 92 	sub	r12,pc,1426
8001a89a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a89e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8a2:	90 08       	ld.sh	r8,r8[0x0]
8001a8a4:	5c 78       	castu.h	r8
8001a8a6:	30 ab       	mov	r11,10
8001a8a8:	10 9c       	mov	r12,r8
8001a8aa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a8ae:	fe cc 05 9a 	sub	r12,pc,1434
8001a8b2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001a8b6:	30 ab       	mov	r11,10
8001a8b8:	31 0c       	mov	r12,16
8001a8ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a8be:	fe cc 05 e2 	sub	r12,pc,1506
8001a8c2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a8c6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a8ca:	30 08       	mov	r8,0
8001a8cc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a8ce:	fe 9f fe 4b 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001a8d2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8d6:	90 09       	ld.sh	r9,r8[0x0]
8001a8d8:	33 48       	mov	r8,52
8001a8da:	f0 09 19 00 	cp.h	r9,r8
8001a8de:	c1 11       	brne	8001a900 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001a8e0:	ec f9 07 e0 	ld.w	r9,r6[2016]
8001a8e4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a8e8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001a8ea:	ec f9 03 ec 	ld.w	r9,r6[1004]
8001a8ee:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a8f2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001a8f4:	ec f8 01 00 	ld.w	r8,r6[256]
8001a8f8:	ec f9 04 a0 	ld.w	r9,r6[1184]
8001a8fc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a8fe:	cf 78       	rjmp	8001aaec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001a900:	fe cc 05 c4 	sub	r12,pc,1476
8001a904:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a908:	ec f8 00 60 	ld.w	r8,r6[96]
8001a90c:	11 88       	ld.ub	r8,r8[0x0]
8001a90e:	31 0b       	mov	r11,16
8001a910:	10 9c       	mov	r12,r8
8001a912:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a916:	fe cc 06 1e 	sub	r12,pc,1566
8001a91a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a91e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a922:	11 88       	ld.ub	r8,r8[0x0]
8001a924:	31 0b       	mov	r11,16
8001a926:	10 9c       	mov	r12,r8
8001a928:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a92c:	fe cc 06 28 	sub	r12,pc,1576
8001a930:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a934:	ec f8 00 58 	ld.w	r8,r6[88]
8001a938:	90 08       	ld.sh	r8,r8[0x0]
8001a93a:	5c 78       	castu.h	r8
8001a93c:	30 ab       	mov	r11,10
8001a93e:	10 9c       	mov	r12,r8
8001a940:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a944:	fe cc 06 30 	sub	r12,pc,1584
8001a948:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001a94c:	30 ab       	mov	r11,10
8001a94e:	33 4c       	mov	r12,52
8001a950:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a954:	fe cc 06 78 	sub	r12,pc,1656
8001a958:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a95c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a960:	30 08       	mov	r8,0
8001a962:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a964:	fe 9f fe 00 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001a968:	ec f8 00 58 	ld.w	r8,r6[88]
8001a96c:	90 09       	ld.sh	r9,r8[0x0]
8001a96e:	32 48       	mov	r8,36
8001a970:	f0 09 19 00 	cp.h	r9,r8
8001a974:	c1 11       	brne	8001a996 <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001a976:	ec f9 05 c8 	ld.w	r9,r6[1480]
8001a97a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a97e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001a980:	ec f9 04 9c 	ld.w	r9,r6[1180]
8001a984:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a988:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001a98a:	ec f8 01 00 	ld.w	r8,r6[256]
8001a98e:	ec f9 04 ac 	ld.w	r9,r6[1196]
8001a992:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a994:	ca c8       	rjmp	8001aaec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001a996:	fe cc 06 3e 	sub	r12,pc,1598
8001a99a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a99e:	ec f8 00 60 	ld.w	r8,r6[96]
8001a9a2:	11 88       	ld.ub	r8,r8[0x0]
8001a9a4:	31 0b       	mov	r11,16
8001a9a6:	10 9c       	mov	r12,r8
8001a9a8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a9ac:	fe cc 06 b4 	sub	r12,pc,1716
8001a9b0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a9b4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a9b8:	11 88       	ld.ub	r8,r8[0x0]
8001a9ba:	31 0b       	mov	r11,16
8001a9bc:	10 9c       	mov	r12,r8
8001a9be:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a9c2:	fe cc 06 be 	sub	r12,pc,1726
8001a9c6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a9ca:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9ce:	90 08       	ld.sh	r8,r8[0x0]
8001a9d0:	5c 78       	castu.h	r8
8001a9d2:	30 ab       	mov	r11,10
8001a9d4:	10 9c       	mov	r12,r8
8001a9d6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a9da:	fe cc 06 c6 	sub	r12,pc,1734
8001a9de:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001a9e2:	30 ab       	mov	r11,10
8001a9e4:	32 4c       	mov	r12,36
8001a9e6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a9ea:	fe cc 07 0e 	sub	r12,pc,1806
8001a9ee:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a9f2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a9f6:	30 08       	mov	r8,0
8001a9f8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a9fa:	fe 9f fd b5 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001a9fe:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa02:	90 09       	ld.sh	r9,r8[0x0]
8001aa04:	31 e8       	mov	r8,30
8001aa06:	f0 09 19 00 	cp.h	r9,r8
8001aa0a:	c1 11       	brne	8001aa2c <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001aa0c:	ec f9 04 ec 	ld.w	r9,r6[1260]
8001aa10:	ec f8 00 dc 	ld.w	r8,r6[220]
8001aa14:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001aa16:	ec f9 04 80 	ld.w	r9,r6[1152]
8001aa1a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001aa1e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001aa20:	ec f8 01 00 	ld.w	r8,r6[256]
8001aa24:	ec f9 03 b4 	ld.w	r9,r6[948]
8001aa28:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aa2a:	c6 18       	rjmp	8001aaec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001aa2c:	fe cc 06 bc 	sub	r12,pc,1724
8001aa30:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aa34:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa38:	11 88       	ld.ub	r8,r8[0x0]
8001aa3a:	31 0b       	mov	r11,16
8001aa3c:	10 9c       	mov	r12,r8
8001aa3e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aa42:	fe cc 07 4a 	sub	r12,pc,1866
8001aa46:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aa4a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aa4e:	11 88       	ld.ub	r8,r8[0x0]
8001aa50:	31 0b       	mov	r11,16
8001aa52:	10 9c       	mov	r12,r8
8001aa54:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aa58:	fe cc 07 54 	sub	r12,pc,1876
8001aa5c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aa60:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa64:	90 08       	ld.sh	r8,r8[0x0]
8001aa66:	5c 78       	castu.h	r8
8001aa68:	30 ab       	mov	r11,10
8001aa6a:	10 9c       	mov	r12,r8
8001aa6c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aa70:	fe cc 07 5c 	sub	r12,pc,1884
8001aa74:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001aa78:	30 ab       	mov	r11,10
8001aa7a:	31 ec       	mov	r12,30
8001aa7c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aa80:	fe cc 07 a4 	sub	r12,pc,1956
8001aa84:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aa88:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa8c:	30 08       	mov	r8,0
8001aa8e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aa90:	fe 9f fd 6a 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001aa94:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa98:	30 08       	mov	r8,0
8001aa9a:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001aa9c:	fe cc 07 10 	sub	r12,pc,1808
8001aaa0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001aaa4:	ec f8 00 60 	ld.w	r8,r6[96]
8001aaa8:	11 88       	ld.ub	r8,r8[0x0]
8001aaaa:	31 0b       	mov	r11,16
8001aaac:	10 9c       	mov	r12,r8
8001aaae:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001aab2:	fe cc 07 02 	sub	r12,pc,1794
8001aab6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001aaba:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aabe:	11 88       	ld.ub	r8,r8[0x0]
8001aac0:	31 0b       	mov	r11,16
8001aac2:	10 9c       	mov	r12,r8
8001aac4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001aac8:	fe cc 07 08 	sub	r12,pc,1800
8001aacc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001aad0:	ec f8 00 58 	ld.w	r8,r6[88]
8001aad4:	90 08       	ld.sh	r8,r8[0x0]
8001aad6:	5c 78       	castu.h	r8
8001aad8:	30 ab       	mov	r11,10
8001aada:	10 9c       	mov	r12,r8
8001aadc:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001aae0:	fe cc 08 04 	sub	r12,pc,2052
8001aae4:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001aae8:	fe 9f fd 3e 	bral	8001a564 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001aaec:	e0 8f 03 93 	bral	8001b212 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001aaf0:	ec f8 00 60 	ld.w	r8,r6[96]
8001aaf4:	11 89       	ld.ub	r9,r8[0x0]
8001aaf6:	30 68       	mov	r8,6
8001aaf8:	f0 09 18 00 	cp.b	r9,r8
8001aafc:	e0 81 01 1d 	brne	8001ad36 <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001ab00:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab04:	11 88       	ld.ub	r8,r8[0x0]
8001ab06:	58 88       	cp.w	r8,8
8001ab08:	c5 30       	breq	8001abae <ubx_read+0x678>
8001ab0a:	e0 48 00 24 	cp.w	r8,36
8001ab0e:	c0 50       	breq	8001ab18 <ubx_read+0x5e2>
8001ab10:	58 18       	cp.w	r8,1
8001ab12:	e0 80 00 99 	breq	8001ac44 <ubx_read+0x70e>
8001ab16:	ce 28       	rjmp	8001acda <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001ab18:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab1c:	90 09       	ld.sh	r9,r8[0x0]
8001ab1e:	32 48       	mov	r8,36
8001ab20:	f0 09 19 00 	cp.h	r9,r8
8001ab24:	c1 11       	brne	8001ab46 <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001ab26:	ec f9 05 98 	ld.w	r9,r6[1432]
8001ab2a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ab2e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001ab30:	ec f9 04 94 	ld.w	r9,r6[1172]
8001ab34:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ab38:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001ab3a:	ec f8 01 00 	ld.w	r8,r6[256]
8001ab3e:	ec f9 04 64 	ld.w	r9,r6[1124]
8001ab42:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001ab44:	cf 78       	rjmp	8001ad32 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001ab46:	fe cc 07 7a 	sub	r12,pc,1914
8001ab4a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ab4e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ab52:	11 88       	ld.ub	r8,r8[0x0]
8001ab54:	31 0b       	mov	r11,16
8001ab56:	10 9c       	mov	r12,r8
8001ab58:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ab5c:	fe cc 08 64 	sub	r12,pc,2148
8001ab60:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ab64:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab68:	11 88       	ld.ub	r8,r8[0x0]
8001ab6a:	31 0b       	mov	r11,16
8001ab6c:	10 9c       	mov	r12,r8
8001ab6e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ab72:	fe cc 08 6e 	sub	r12,pc,2158
8001ab76:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ab7a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab7e:	90 08       	ld.sh	r8,r8[0x0]
8001ab80:	5c 78       	castu.h	r8
8001ab82:	30 ab       	mov	r11,10
8001ab84:	10 9c       	mov	r12,r8
8001ab86:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ab8a:	fe cc 08 76 	sub	r12,pc,2166
8001ab8e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001ab92:	30 ab       	mov	r11,10
8001ab94:	32 4c       	mov	r12,36
8001ab96:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ab9a:	fe cc 08 be 	sub	r12,pc,2238
8001ab9e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aba2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aba6:	30 08       	mov	r8,0
8001aba8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001abaa:	fe 9f fc dd 	bral	8001a564 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001abae:	ec f8 00 58 	ld.w	r8,r6[88]
8001abb2:	90 09       	ld.sh	r9,r8[0x0]
8001abb4:	30 68       	mov	r8,6
8001abb6:	f0 09 19 00 	cp.h	r9,r8
8001abba:	c1 11       	brne	8001abdc <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001abbc:	ec f9 06 38 	ld.w	r9,r6[1592]
8001abc0:	ec f8 00 dc 	ld.w	r8,r6[220]
8001abc4:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001abc6:	ec f9 08 70 	ld.w	r9,r6[2160]
8001abca:	ec f8 00 e8 	ld.w	r8,r6[232]
8001abce:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001abd0:	ec f8 01 00 	ld.w	r8,r6[256]
8001abd4:	ec f9 06 ec 	ld.w	r9,r6[1772]
8001abd8:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001abda:	ca c8       	rjmp	8001ad32 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001abdc:	fe cc 07 f0 	sub	r12,pc,2032
8001abe0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001abe4:	ec f8 00 60 	ld.w	r8,r6[96]
8001abe8:	11 88       	ld.ub	r8,r8[0x0]
8001abea:	31 0b       	mov	r11,16
8001abec:	10 9c       	mov	r12,r8
8001abee:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001abf2:	fe cc 08 fa 	sub	r12,pc,2298
8001abf6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001abfa:	ec f8 00 5c 	ld.w	r8,r6[92]
8001abfe:	11 88       	ld.ub	r8,r8[0x0]
8001ac00:	31 0b       	mov	r11,16
8001ac02:	10 9c       	mov	r12,r8
8001ac04:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ac08:	fe cc 09 04 	sub	r12,pc,2308
8001ac0c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ac10:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac14:	90 08       	ld.sh	r8,r8[0x0]
8001ac16:	5c 78       	castu.h	r8
8001ac18:	30 ab       	mov	r11,10
8001ac1a:	10 9c       	mov	r12,r8
8001ac1c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ac20:	fe cc 09 0c 	sub	r12,pc,2316
8001ac24:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001ac28:	30 ab       	mov	r11,10
8001ac2a:	30 6c       	mov	r12,6
8001ac2c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ac30:	fe cc 09 54 	sub	r12,pc,2388
8001ac34:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ac38:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ac3c:	30 08       	mov	r8,0
8001ac3e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ac40:	fe 9f fc 92 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001ac44:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac48:	90 09       	ld.sh	r9,r8[0x0]
8001ac4a:	30 38       	mov	r8,3
8001ac4c:	f0 09 19 00 	cp.h	r9,r8
8001ac50:	c1 11       	brne	8001ac72 <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001ac52:	ec f9 06 54 	ld.w	r9,r6[1620]
8001ac56:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ac5a:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001ac5c:	ec f9 03 fc 	ld.w	r9,r6[1020]
8001ac60:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ac64:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001ac66:	ec f8 01 00 	ld.w	r8,r6[256]
8001ac6a:	ec f9 04 c4 	ld.w	r9,r6[1220]
8001ac6e:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ac70:	c6 18       	rjmp	8001ad32 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001ac72:	fe cc 08 6a 	sub	r12,pc,2154
8001ac76:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ac7a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac7e:	11 88       	ld.ub	r8,r8[0x0]
8001ac80:	31 0b       	mov	r11,16
8001ac82:	10 9c       	mov	r12,r8
8001ac84:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ac88:	fe cc 09 90 	sub	r12,pc,2448
8001ac8c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ac90:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac94:	11 88       	ld.ub	r8,r8[0x0]
8001ac96:	31 0b       	mov	r11,16
8001ac98:	10 9c       	mov	r12,r8
8001ac9a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ac9e:	fe cc 09 9a 	sub	r12,pc,2458
8001aca2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aca6:	ec f8 00 58 	ld.w	r8,r6[88]
8001acaa:	90 08       	ld.sh	r8,r8[0x0]
8001acac:	5c 78       	castu.h	r8
8001acae:	30 ab       	mov	r11,10
8001acb0:	10 9c       	mov	r12,r8
8001acb2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001acb6:	fe cc 09 a2 	sub	r12,pc,2466
8001acba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001acbe:	30 ab       	mov	r11,10
8001acc0:	30 3c       	mov	r12,3
8001acc2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001acc6:	fe cc 09 ea 	sub	r12,pc,2538
8001acca:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001acce:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acd2:	30 08       	mov	r8,0
8001acd4:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001acd6:	fe 9f fc 47 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001acda:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acde:	30 08       	mov	r8,0
8001ace0:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001ace2:	fe cc 08 ba 	sub	r12,pc,2234
8001ace6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001acea:	ec f8 00 60 	ld.w	r8,r6[96]
8001acee:	11 88       	ld.ub	r8,r8[0x0]
8001acf0:	31 0b       	mov	r11,16
8001acf2:	10 9c       	mov	r12,r8
8001acf4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001acf8:	fe cc 09 48 	sub	r12,pc,2376
8001acfc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001ad00:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad04:	11 88       	ld.ub	r8,r8[0x0]
8001ad06:	31 0b       	mov	r11,16
8001ad08:	10 9c       	mov	r12,r8
8001ad0a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001ad0e:	fe cc 09 4e 	sub	r12,pc,2382
8001ad12:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001ad16:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad1a:	90 08       	ld.sh	r8,r8[0x0]
8001ad1c:	5c 78       	castu.h	r8
8001ad1e:	30 ab       	mov	r11,10
8001ad20:	10 9c       	mov	r12,r8
8001ad22:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001ad26:	fe cc 0a 4a 	sub	r12,pc,2634
8001ad2a:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001ad2e:	fe 9f fc 1b 	bral	8001a564 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad32:	e0 8f 02 70 	bral	8001b212 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001ad36:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad3a:	11 89       	ld.ub	r9,r8[0x0]
8001ad3c:	30 a8       	mov	r8,10
8001ad3e:	f0 09 18 00 	cp.b	r9,r8
8001ad42:	e0 81 00 88 	brne	8001ae52 <ubx_read+0x91c>
			{
 				switch (msg_id)
8001ad46:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad4a:	11 88       	ld.ub	r8,r8[0x0]
8001ad4c:	e0 48 00 21 	cp.w	r8,33
8001ad50:	c4 d1       	brne	8001adea <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001ad52:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad56:	90 09       	ld.sh	r9,r8[0x0]
8001ad58:	30 18       	mov	r8,1
8001ad5a:	f0 09 19 00 	cp.h	r9,r8
8001ad5e:	c1 21       	brne	8001ad82 <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001ad60:	ec f9 05 94 	ld.w	r9,r6[1428]
8001ad64:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ad68:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001ad6a:	ec f9 03 e4 	ld.w	r9,r6[996]
8001ad6e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ad72:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001ad74:	ec f8 01 00 	ld.w	r8,r6[256]
8001ad78:	ec f9 04 a8 	ld.w	r9,r6[1192]
8001ad7c:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad7e:	e0 8f 02 4a 	bral	8001b212 <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001ad82:	fe cc 09 36 	sub	r12,pc,2358
8001ad86:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001ad8a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad8e:	11 88       	ld.ub	r8,r8[0x0]
8001ad90:	31 0b       	mov	r11,16
8001ad92:	10 9c       	mov	r12,r8
8001ad94:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001ad98:	fe cc 0a a0 	sub	r12,pc,2720
8001ad9c:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001ada0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ada4:	11 88       	ld.ub	r8,r8[0x0]
8001ada6:	31 0b       	mov	r11,16
8001ada8:	10 9c       	mov	r12,r8
8001adaa:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001adae:	fe cc 0a aa 	sub	r12,pc,2730
8001adb2:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001adb6:	ec f8 00 58 	ld.w	r8,r6[88]
8001adba:	90 08       	ld.sh	r8,r8[0x0]
8001adbc:	5c 78       	castu.h	r8
8001adbe:	30 ab       	mov	r11,10
8001adc0:	10 9c       	mov	r12,r8
8001adc2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001adc6:	fe cc 0a b2 	sub	r12,pc,2738
8001adca:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001adce:	30 ab       	mov	r11,10
8001add0:	30 1c       	mov	r12,1
8001add2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001add6:	fe cc 0a fa 	sub	r12,pc,2810
8001adda:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001adde:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ade2:	30 08       	mov	r8,0
8001ade4:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001ade6:	fe 9f fb bf 	bral	8001a564 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001adea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adee:	30 08       	mov	r8,0
8001adf0:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001adf2:	fe cc 09 8a 	sub	r12,pc,2442
8001adf6:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001adfa:	ec f8 00 60 	ld.w	r8,r6[96]
8001adfe:	11 88       	ld.ub	r8,r8[0x0]
8001ae00:	31 0b       	mov	r11,16
8001ae02:	10 9c       	mov	r12,r8
8001ae04:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001ae08:	fe cc 0a 58 	sub	r12,pc,2648
8001ae0c:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001ae10:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae14:	11 88       	ld.ub	r8,r8[0x0]
8001ae16:	31 0b       	mov	r11,16
8001ae18:	10 9c       	mov	r12,r8
8001ae1a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001ae1e:	fe cc 0a 5e 	sub	r12,pc,2654
8001ae22:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001ae26:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae2a:	90 08       	ld.sh	r8,r8[0x0]
8001ae2c:	5c 78       	castu.h	r8
8001ae2e:	30 ab       	mov	r11,10
8001ae30:	10 9c       	mov	r12,r8
8001ae32:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001ae36:	fe cc 09 aa 	sub	r12,pc,2474
8001ae3a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001ae3e:	31 0b       	mov	r11,16
8001ae40:	32 1c       	mov	r12,33
8001ae42:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001ae46:	fe cc 0b 6a 	sub	r12,pc,2922
8001ae4a:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001ae4e:	fe 9f fb 8b 	bral	8001a564 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001ae52:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae56:	11 89       	ld.ub	r9,r8[0x0]
8001ae58:	30 d8       	mov	r8,13
8001ae5a:	f0 09 18 00 	cp.b	r9,r8
8001ae5e:	e0 81 00 d5 	brne	8001b008 <ubx_read+0xad2>
			{
				switch(msg_id)
8001ae62:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae66:	11 88       	ld.ub	r8,r8[0x0]
8001ae68:	58 18       	cp.w	r8,1
8001ae6a:	c0 40       	breq	8001ae72 <ubx_read+0x93c>
8001ae6c:	58 68       	cp.w	r8,6
8001ae6e:	c4 d0       	breq	8001af08 <ubx_read+0x9d2>
8001ae70:	c9 78       	rjmp	8001af9e <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001ae72:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae76:	90 09       	ld.sh	r9,r8[0x0]
8001ae78:	31 08       	mov	r8,16
8001ae7a:	f0 09 19 00 	cp.h	r9,r8
8001ae7e:	c1 11       	brne	8001aea0 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001ae80:	ec f9 08 24 	ld.w	r9,r6[2084]
8001ae84:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ae88:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001ae8a:	ec f9 04 24 	ld.w	r9,r6[1060]
8001ae8e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ae92:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001ae94:	ec f8 01 00 	ld.w	r8,r6[256]
8001ae98:	ec f9 04 68 	ld.w	r9,r6[1128]
8001ae9c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ae9e:	cb 48       	rjmp	8001b006 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001aea0:	fe cc 0a 04 	sub	r12,pc,2564
8001aea4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aea8:	ec f8 00 60 	ld.w	r8,r6[96]
8001aeac:	11 88       	ld.ub	r8,r8[0x0]
8001aeae:	31 0b       	mov	r11,16
8001aeb0:	10 9c       	mov	r12,r8
8001aeb2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aeb6:	fe cc 0b be 	sub	r12,pc,3006
8001aeba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aebe:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aec2:	11 88       	ld.ub	r8,r8[0x0]
8001aec4:	31 0b       	mov	r11,16
8001aec6:	10 9c       	mov	r12,r8
8001aec8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aecc:	fe cc 0b c8 	sub	r12,pc,3016
8001aed0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aed4:	ec f8 00 58 	ld.w	r8,r6[88]
8001aed8:	90 08       	ld.sh	r8,r8[0x0]
8001aeda:	5c 78       	castu.h	r8
8001aedc:	30 ab       	mov	r11,10
8001aede:	10 9c       	mov	r12,r8
8001aee0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aee4:	fe cc 0b d0 	sub	r12,pc,3024
8001aee8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001aeec:	30 ab       	mov	r11,10
8001aeee:	31 0c       	mov	r12,16
8001aef0:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aef4:	fe cc 0c 18 	sub	r12,pc,3096
8001aef8:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aefc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af00:	30 08       	mov	r8,0
8001af02:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001af04:	fe 9f fb 30 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001af08:	ec f8 00 58 	ld.w	r8,r6[88]
8001af0c:	90 09       	ld.sh	r9,r8[0x0]
8001af0e:	31 48       	mov	r8,20
8001af10:	f0 09 19 00 	cp.h	r9,r8
8001af14:	c1 11       	brne	8001af36 <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001af16:	ec f9 08 90 	ld.w	r9,r6[2192]
8001af1a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001af1e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001af20:	ec f9 04 3c 	ld.w	r9,r6[1084]
8001af24:	ec f8 00 e8 	ld.w	r8,r6[232]
8001af28:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001af2a:	ec f8 01 00 	ld.w	r8,r6[256]
8001af2e:	ec f9 04 70 	ld.w	r9,r6[1136]
8001af32:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001af34:	c6 98       	rjmp	8001b006 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001af36:	fe cc 0a 82 	sub	r12,pc,2690
8001af3a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001af3e:	ec f8 00 60 	ld.w	r8,r6[96]
8001af42:	11 88       	ld.ub	r8,r8[0x0]
8001af44:	31 0b       	mov	r11,16
8001af46:	10 9c       	mov	r12,r8
8001af48:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001af4c:	fe cc 0c 54 	sub	r12,pc,3156
8001af50:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001af54:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af58:	11 88       	ld.ub	r8,r8[0x0]
8001af5a:	31 0b       	mov	r11,16
8001af5c:	10 9c       	mov	r12,r8
8001af5e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001af62:	fe cc 0c 5e 	sub	r12,pc,3166
8001af66:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001af6a:	ec f8 00 58 	ld.w	r8,r6[88]
8001af6e:	90 08       	ld.sh	r8,r8[0x0]
8001af70:	5c 78       	castu.h	r8
8001af72:	30 ab       	mov	r11,10
8001af74:	10 9c       	mov	r12,r8
8001af76:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001af7a:	fe cc 0c 66 	sub	r12,pc,3174
8001af7e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001af82:	30 ab       	mov	r11,10
8001af84:	31 4c       	mov	r12,20
8001af86:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001af8a:	fe cc 0c ae 	sub	r12,pc,3246
8001af8e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001af92:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af96:	30 08       	mov	r8,0
8001af98:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001af9a:	fe 9f fa e5 	bral	8001a564 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001af9e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001afa2:	30 08       	mov	r8,0
8001afa4:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001afa6:	fe cc 0b 3e 	sub	r12,pc,2878
8001afaa:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001afae:	ec f8 00 60 	ld.w	r8,r6[96]
8001afb2:	11 88       	ld.ub	r8,r8[0x0]
8001afb4:	31 0b       	mov	r11,16
8001afb6:	10 9c       	mov	r12,r8
8001afb8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001afbc:	fe cc 0c 0c 	sub	r12,pc,3084
8001afc0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001afc4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afc8:	11 88       	ld.ub	r8,r8[0x0]
8001afca:	31 0b       	mov	r11,16
8001afcc:	10 9c       	mov	r12,r8
8001afce:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001afd2:	fe cc 0c 12 	sub	r12,pc,3090
8001afd6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001afda:	ec f8 00 58 	ld.w	r8,r6[88]
8001afde:	90 08       	ld.sh	r8,r8[0x0]
8001afe0:	5c 78       	castu.h	r8
8001afe2:	30 ab       	mov	r11,10
8001afe4:	10 9c       	mov	r12,r8
8001afe6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001afea:	fe cc 0b 5e 	sub	r12,pc,2910
8001afee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001aff2:	31 0b       	mov	r11,16
8001aff4:	30 1c       	mov	r12,1
8001aff6:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001affa:	fe cc 0d 1e 	sub	r12,pc,3358
8001affe:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001b002:	fe 9f fa b1 	bral	8001a564 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b006:	c0 69       	rjmp	8001b212 <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001b008:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b00c:	30 08       	mov	r8,0
8001b00e:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001b010:	fe cc 0b 40 	sub	r12,pc,2880
8001b014:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b018:	ec f8 00 60 	ld.w	r8,r6[96]
8001b01c:	11 88       	ld.ub	r8,r8[0x0]
8001b01e:	31 0b       	mov	r11,16
8001b020:	10 9c       	mov	r12,r8
8001b022:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001b026:	fe cc 0c 76 	sub	r12,pc,3190
8001b02a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b02e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b032:	11 88       	ld.ub	r8,r8[0x0]
8001b034:	31 0b       	mov	r11,16
8001b036:	10 9c       	mov	r12,r8
8001b038:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001b03c:	fe cc 0c 7c 	sub	r12,pc,3196
8001b040:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001b044:	ec f8 00 58 	ld.w	r8,r6[88]
8001b048:	90 08       	ld.sh	r8,r8[0x0]
8001b04a:	5c 78       	castu.h	r8
8001b04c:	30 ab       	mov	r11,10
8001b04e:	10 9c       	mov	r12,r8
8001b050:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b054:	fe cc 0d 78 	sub	r12,pc,3448
8001b058:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001b05c:	fe 9f fa 84 	bral	8001a564 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001b060:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b064:	11 88       	ld.ub	r8,r8[0x0]
8001b066:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b06a:	f2 08 00 08 	add	r8,r9,r8
8001b06e:	5c 58       	castu.b	r8
8001b070:	ec f9 00 b0 	ld.w	r9,r6[176]
8001b074:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b076:	ec f8 01 10 	ld.w	r8,r6[272]
8001b07a:	11 89       	ld.ub	r9,r8[0x0]
8001b07c:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b080:	11 88       	ld.ub	r8,r8[0x0]
8001b082:	f2 08 00 08 	add	r8,r9,r8
8001b086:	5c 58       	castu.b	r8
8001b088:	ec f9 01 10 	ld.w	r9,r6[272]
8001b08c:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001b08e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b092:	70 08       	ld.w	r8,r8[0x0]
8001b094:	70 09       	ld.w	r9,r8[0x0]
8001b096:	ec f8 00 58 	ld.w	r8,r6[88]
8001b09a:	90 08       	ld.sh	r8,r8[0x0]
8001b09c:	5c 78       	castu.h	r8
8001b09e:	f0 ca 00 01 	sub	r10,r8,1
8001b0a2:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b0a6:	90 08       	ld.sh	r8,r8[0x0]
8001b0a8:	5c 78       	castu.h	r8
8001b0aa:	f4 08 01 08 	sub	r8,r10,r8
8001b0ae:	10 09       	add	r9,r8
8001b0b0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b0b4:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001b0b6:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b0ba:	90 08       	ld.sh	r8,r8[0x0]
8001b0bc:	2f f8       	sub	r8,-1
8001b0be:	5c 88       	casts.h	r8
8001b0c0:	ec f9 01 d0 	ld.w	r9,r6[464]
8001b0c4:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001b0c6:	ec f8 01 d0 	ld.w	r8,r6[464]
8001b0ca:	90 09       	ld.sh	r9,r8[0x0]
8001b0cc:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0d0:	90 08       	ld.sh	r8,r8[0x0]
8001b0d2:	f0 09 19 00 	cp.h	r9,r8
8001b0d6:	e0 81 00 9b 	brne	8001b20c <ubx_read+0xcd6>
			{
				step++;
8001b0da:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b0de:	11 88       	ld.ub	r8,r8[0x0]
8001b0e0:	2f f8       	sub	r8,-1
8001b0e2:	5c 58       	castu.b	r8
8001b0e4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0e8:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001b0ea:	c9 48       	rjmp	8001b212 <ubx_read+0xcdc>
		case 7:
			step++;
8001b0ec:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b0f0:	11 88       	ld.ub	r8,r8[0x0]
8001b0f2:	2f f8       	sub	r8,-1
8001b0f4:	5c 58       	castu.b	r8
8001b0f6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0fa:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001b0fc:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b100:	11 88       	ld.ub	r8,r8[0x0]
8001b102:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b106:	f0 09 18 00 	cp.b	r9,r8
8001b10a:	e0 80 00 83 	breq	8001b210 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001b10e:	fe cc 0c 1e 	sub	r12,pc,3102
8001b112:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b116:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b11a:	31 0b       	mov	r11,16
8001b11c:	10 9c       	mov	r12,r8
8001b11e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b122:	fe cc 0c 22 	sub	r12,pc,3106
8001b126:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001b12a:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b12e:	11 88       	ld.ub	r8,r8[0x0]
8001b130:	31 0b       	mov	r11,16
8001b132:	10 9c       	mov	r12,r8
8001b134:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001b138:	fe cc 0c 2c 	sub	r12,pc,3116
8001b13c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b140:	ec f8 00 60 	ld.w	r8,r6[96]
8001b144:	11 88       	ld.ub	r8,r8[0x0]
8001b146:	31 0b       	mov	r11,16
8001b148:	10 9c       	mov	r12,r8
8001b14a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001b14e:	fe cc 0c 36 	sub	r12,pc,3126
8001b152:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b156:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b15a:	11 88       	ld.ub	r8,r8[0x0]
8001b15c:	31 0b       	mov	r11,16
8001b15e:	10 9c       	mov	r12,r8
8001b160:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b164:	fe cc 0e 88 	sub	r12,pc,3720
8001b168:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001b16c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b170:	30 08       	mov	r8,0
8001b172:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001b174:	fe 9f f9 f8 	bral	8001a564 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001b178:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b17c:	30 08       	mov	r8,0
8001b17e:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001b180:	ec f8 01 10 	ld.w	r8,r6[272]
8001b184:	11 88       	ld.ub	r8,r8[0x0]
8001b186:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b18a:	f0 09 18 00 	cp.b	r9,r8
8001b18e:	c1 b0       	breq	8001b1c4 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001b190:	fe cc 0c 68 	sub	r12,pc,3176
8001b194:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b198:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b19c:	31 0b       	mov	r11,16
8001b19e:	10 9c       	mov	r12,r8
8001b1a0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b1a4:	fe cc 0c a4 	sub	r12,pc,3236
8001b1a8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001b1ac:	ec f8 01 10 	ld.w	r8,r6[272]
8001b1b0:	11 88       	ld.ub	r8,r8[0x0]
8001b1b2:	31 0b       	mov	r11,16
8001b1b4:	10 9c       	mov	r12,r8
8001b1b6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b1ba:	fe cc 0e de 	sub	r12,pc,3806
8001b1be:	f0 16 00 01 	mcall	r6[4]
				break;
8001b1c2:	c2 88       	rjmp	8001b212 <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001b1c4:	ec f8 01 00 	ld.w	r8,r6[256]
8001b1c8:	70 08       	ld.w	r8,r8[0x0]
8001b1ca:	90 09       	ld.sh	r9,r8[0x0]
8001b1cc:	2f f9       	sub	r9,-1
8001b1ce:	5c 89       	casts.h	r9
8001b1d0:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001b1d2:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b1d6:	70 08       	ld.w	r8,r8[0x0]
8001b1d8:	70 08       	ld.w	r8,r8[0x0]
8001b1da:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001b1de:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b1e2:	70 08       	ld.w	r8,r8[0x0]
8001b1e4:	ec f9 00 e8 	ld.w	r9,r6[232]
8001b1e8:	72 09       	ld.w	r9,r9[0x0]
8001b1ea:	72 09       	ld.w	r9,r9[0x0]
8001b1ec:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001b1ee:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b1f2:	70 08       	ld.w	r8,r8[0x0]
8001b1f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b1f8:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001b1fa:	f0 16 02 0d 	mcall	r6[2100]
8001b1fe:	18 98       	mov	r8,r12
8001b200:	58 08       	cp.w	r8,0
8001b202:	c0 80       	breq	8001b212 <ubx_read+0xcdc>
			{
				msg_ok = true;
8001b204:	30 18       	mov	r8,1
8001b206:	ef 68 ff fb 	st.b	r7[-5],r8
8001b20a:	c0 48       	rjmp	8001b212 <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001b20c:	d7 03       	nop
8001b20e:	c0 28       	rjmp	8001b212 <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001b210:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b212:	ec f8 00 00 	ld.w	r8,r6[0]
8001b216:	70 08       	ld.w	r8,r8[0x0]
8001b218:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001b21c:	10 9c       	mov	r12,r8
8001b21e:	f0 16 00 2e 	mcall	r6[184]
8001b222:	18 98       	mov	r8,r12
8001b224:	58 08       	cp.w	r8,0
8001b226:	fe 91 f9 94 	brne	8001a54e <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001b22a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001b22e:	10 9c       	mov	r12,r8
8001b230:	2f ed       	sub	sp,-8
8001b232:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b236:	00 00       	add	r0,r0
8001b238:	80 01       	ld.sh	r1,r0[0x0]
8001b23a:	a3 c6       	cbr	r6,0x2
8001b23c:	4d 53       	lddpc	r3,8001b390 <ubx_read+0xe5a>
8001b23e:	47 5f       	lddsp	pc,sp[0x1d4]
8001b240:	4d 4f       	lddpc	pc,8001b390 <ubx_read+0xe5a>
8001b242:	4e 20       	lddpc	r0,8001b3c8 <ubx_read+0xe92>
8001b244:	47 50       	lddsp	r0,sp[0x1d4]
8001b246:	53 20       	stdsp	sp[0xc8],r0
8001b248:	61 77       	ld.w	r7,r0[0x5c]
8001b24a:	61 6b       	ld.w	r11,r0[0x58]
8001b24c:	65 0a       	ld.w	r10,r2[0x40]
8001b24e:	00 00       	add	r0,r0
8001b250:	4d 53       	lddpc	r3,8001b3a4 <ubx_read+0xe6e>
8001b252:	47 5f       	lddsp	pc,sp[0x1d4]
8001b254:	54 49       	stdsp	sp[0x110],r9
8001b256:	4d 5f       	lddpc	pc,8001b3a8 <ubx_read+0xe72>
8001b258:	54 50       	stdsp	sp[0x114],r0
8001b25a:	20 47       	sub	r7,4
8001b25c:	50 53       	stdsp	sp[0x14],r3
8001b25e:	20 61       	sub	r1,6
8001b260:	77 61       	ld.w	r1,r11[0x58]
8001b262:	6b 65       	ld.w	r5,r5[0x58]
8001b264:	0a 00       	add	r0,r5
8001b266:	00 00       	add	r0,r0
8001b268:	4d 53       	lddpc	r3,8001b3bc <ubx_read+0xe86>
8001b26a:	47 5f       	lddsp	pc,sp[0x1d4]
8001b26c:	54 49       	stdsp	sp[0x110],r9
8001b26e:	4d 5f       	lddpc	pc,8001b3c0 <ubx_read+0xe8a>
8001b270:	56 52       	stdsp	sp[0x194],r2
8001b272:	46 59       	lddsp	r9,sp[0x194]
8001b274:	00 00       	add	r0,r0
8001b276:	00 00       	add	r0,r0
8001b278:	20 69       	sub	r9,6
8001b27a:	74 6f       	ld.w	pc,r10[0x18]
8001b27c:	77 20       	ld.w	r0,r11[0x48]
8001b27e:	3a 00       	mov	r0,-96
8001b280:	20 66       	sub	r6,6
8001b282:	72 61       	ld.w	r1,r9[0x18]
8001b284:	63 20       	ld.w	r0,r1[0x48]
8001b286:	3a 00       	mov	r0,-96
8001b288:	20 64       	sub	r4,6
8001b28a:	65 6c       	ld.w	r12,r2[0x58]
8001b28c:	74 61       	ld.w	r1,r10[0x18]
8001b28e:	4d 73       	lddpc	r3,8001b3e8 <ubx_read+0xeb2>
8001b290:	20 3a       	sub	r10,3
8001b292:	00 00       	add	r0,r0
8001b294:	20 64       	sub	r4,6
8001b296:	65 6c       	ld.w	r12,r2[0x58]
8001b298:	74 61       	ld.w	r1,r10[0x18]
8001b29a:	4e 73       	lddpc	r3,8001b434 <ubx_read+0xefe>
8001b29c:	20 3a       	sub	r10,3
8001b29e:	00 00       	add	r0,r0
8001b2a0:	47 6f       	lddsp	pc,sp[0x1d8]
8001b2a2:	74 20       	ld.w	r0,r10[0x8]
8001b2a4:	65 6e       	ld.w	lr,r2[0x58]
8001b2a6:	67 69       	ld.w	r9,r3[0x58]
8001b2a8:	6e 65       	ld.w	r5,r7[0x18]
8001b2aa:	20 73       	sub	r3,7
8001b2ac:	65 74       	ld.w	r4,r2[0x5c]
8001b2ae:	74 69       	ld.w	r9,r10[0x18]
8001b2b0:	6e 67       	ld.w	r7,r7[0x18]
8001b2b2:	73 20       	ld.w	r0,r9[0x48]
8001b2b4:	00 00       	add	r0,r0
8001b2b6:	00 00       	add	r0,r0
8001b2b8:	53 65       	stdsp	sp[0xd8],r5
8001b2ba:	6e 64       	ld.w	r4,r7[0x18]
8001b2bc:	20 4e       	sub	lr,4
8001b2be:	61 76       	ld.w	r6,r0[0x5c]
8001b2c0:	20 73       	sub	r3,7
8001b2c2:	65 74       	ld.w	r4,r2[0x5c]
8001b2c4:	74 69       	ld.w	r9,r10[0x18]
8001b2c6:	6e 67       	ld.w	r7,r7[0x18]
8001b2c8:	73 00       	ld.w	r0,r9[0x40]
8001b2ca:	00 00       	add	r0,r0
8001b2cc:	4e 6f       	lddpc	pc,8001b464 <ubx_read+0xf2e>
8001b2ce:	20 65       	sub	r5,6
8001b2d0:	6e 67       	ld.w	r7,r7[0x18]
8001b2d2:	69 6e       	ld.w	lr,r4[0x58]
8001b2d4:	65 20       	ld.w	r0,r2[0x48]
8001b2d6:	73 65       	ld.w	r5,r9[0x58]
8001b2d8:	74 74       	ld.w	r4,r10[0x1c]
8001b2da:	69 6e       	ld.w	lr,r4[0x58]
8001b2dc:	67 73       	ld.w	r3,r3[0x5c]
8001b2de:	20 72       	sub	r2,7
8001b2e0:	65 63       	ld.w	r3,r2[0x58]
8001b2e2:	65 69       	ld.w	r9,r2[0x58]
8001b2e4:	76 65       	ld.w	r5,r11[0x18]
8001b2e6:	64 20       	ld.w	r0,r2[0x8]
8001b2e8:	00 00       	add	r0,r0
8001b2ea:	00 00       	add	r0,r0
8001b2ec:	4d 65       	lddpc	r5,8001b444 <ubx_read+0xf0e>
8001b2ee:	73 73       	ld.w	r3,r9[0x5c]
8001b2f0:	61 67       	ld.w	r7,r0[0x58]
8001b2f2:	65 20       	ld.w	r0,r2[0x48]
8001b2f4:	43 46       	lddsp	r6,sp[0xd0]
8001b2f6:	47 20       	lddsp	r0,sp[0x1c8]
8001b2f8:	52 61       	stdsp	sp[0x98],r1
8001b2fa:	74 65       	ld.w	r5,r10[0x18]
8001b2fc:	20 30       	sub	r0,3
8001b2fe:	78 00       	ld.w	r0,r12[0x0]
8001b300:	55 6e       	stdsp	sp[0x158],lr
8001b302:	65 78       	ld.w	r8,r2[0x5c]
8001b304:	70 65       	ld.w	r5,r8[0x18]
8001b306:	63 74       	ld.w	r4,r1[0x5c]
8001b308:	65 64       	ld.w	r4,r2[0x58]
8001b30a:	20 6d       	sub	sp,24
8001b30c:	65 73       	ld.w	r3,r2[0x5c]
8001b30e:	73 61       	ld.w	r1,r9[0x58]
8001b310:	67 65       	ld.w	r5,r3[0x58]
8001b312:	20 30       	sub	r0,3
8001b314:	78 00       	ld.w	r0,r12[0x0]
8001b316:	00 00       	add	r0,r0
8001b318:	30 32       	mov	r2,3
8001b31a:	78 20       	ld.w	r0,r12[0x8]
8001b31c:	30 78       	mov	r8,7
8001b31e:	00 00       	add	r0,r0
8001b320:	30 32       	mov	r2,3
8001b322:	78 0a       	ld.w	r10,r12[0x0]
8001b324:	00 00       	add	r0,r0
8001b326:	00 00       	add	r0,r0
8001b328:	44 69       	lddsp	r9,sp[0x118]
8001b32a:	73 61       	ld.w	r1,r9[0x58]
8001b32c:	62 6c       	ld.w	r12,r1[0x18]
8001b32e:	69 6e       	ld.w	lr,r4[0x58]
8001b330:	67 20       	ld.w	r0,r3[0x48]
8001b332:	6d 65       	ld.w	r5,r6[0x58]
8001b334:	73 73       	ld.w	r3,r9[0x5c]
8001b336:	61 67       	ld.w	r7,r0[0x58]
8001b338:	65 20       	ld.w	r0,r2[0x48]
8001b33a:	30 78       	mov	r8,7
8001b33c:	00 00       	add	r0,r0
8001b33e:	00 00       	add	r0,r0
8001b340:	4d 53       	lddpc	r3,8001b494 <ubx_read+0xf5e>
8001b342:	47 5f       	lddsp	pc,sp[0x1d4]
8001b344:	4e 41       	lddpc	r1,8001b4d4 <ubx_read+0xf9e>
8001b346:	56 5f       	stdsp	sp[0x194],pc
8001b348:	50 4f       	stdsp	sp[0x10],pc
8001b34a:	53 4c       	stdsp	sp[0xd0],r12
8001b34c:	4c 48       	lddpc	r8,8001b45c <ubx_read+0xf26>
8001b34e:	00 00       	add	r0,r0
8001b350:	20 6c       	sub	r12,6
8001b352:	6f 6e       	ld.w	lr,r7[0x58]
8001b354:	67 69       	ld.w	r9,r3[0x58]
8001b356:	74 75       	ld.w	r5,r10[0x1c]
8001b358:	64 65       	ld.w	r5,r2[0x18]
8001b35a:	20 3a       	sub	r10,3
8001b35c:	00 00       	add	r0,r0
8001b35e:	00 00       	add	r0,r0
8001b360:	20 6c       	sub	r12,6
8001b362:	61 74       	ld.w	r4,r0[0x5c]
8001b364:	69 74       	ld.w	r4,r4[0x5c]
8001b366:	75 64       	ld.w	r4,r10[0x58]
8001b368:	65 20       	ld.w	r0,r2[0x48]
8001b36a:	3a 00       	mov	r0,-96
8001b36c:	20 61       	sub	r1,6
8001b36e:	6c 74       	ld.w	r4,r6[0x1c]
8001b370:	5f 65       	srmi	r5
8001b372:	6c 6c       	ld.w	r12,r6[0x18]
8001b374:	69 70       	ld.w	r0,r4[0x5c]
8001b376:	73 20       	ld.w	r0,r9[0x48]
8001b378:	3a 00       	mov	r0,-96
8001b37a:	00 00       	add	r0,r0
8001b37c:	20 61       	sub	r1,6
8001b37e:	6c 74       	ld.w	r4,r6[0x1c]
8001b380:	5f 6d       	srmi	sp
8001b382:	73 6c       	ld.w	r12,r9[0x58]
8001b384:	20 3a       	sub	r10,3
8001b386:	00 00       	add	r0,r0
8001b388:	20 68       	sub	r8,6
8001b38a:	6f 72       	ld.w	r2,r7[0x5c]
8001b38c:	7a 5f       	ld.w	pc,sp[0x14]
8001b38e:	61 63       	ld.w	r3,r0[0x58]
8001b390:	63 20       	ld.w	r0,r1[0x48]
8001b392:	3a 00       	mov	r0,-96
8001b394:	20 76       	sub	r6,7
8001b396:	65 72       	ld.w	r2,r2[0x5c]
8001b398:	74 5f       	ld.w	pc,r10[0x14]
8001b39a:	61 63       	ld.w	r3,r0[0x58]
8001b39c:	63 20       	ld.w	r0,r1[0x48]
8001b39e:	3a 00       	mov	r0,-96
8001b3a0:	4d 53       	lddpc	r3,8001b4f4 <ubx_read+0xfbe>
8001b3a2:	47 5f       	lddsp	pc,sp[0x1d4]
8001b3a4:	53 54       	stdsp	sp[0xd4],r4
8001b3a6:	41 54       	lddsp	r4,sp[0x54]
8001b3a8:	55 53       	stdsp	sp[0x154],r3
8001b3aa:	20 66       	sub	r6,6
8001b3ac:	69 78       	ld.w	r8,r4[0x5c]
8001b3ae:	5f 74       	srpl	r4
8001b3b0:	79 70       	ld.w	r0,r12[0x5c]
8001b3b2:	65 20       	ld.w	r0,r2[0x48]
8001b3b4:	3d 20       	mov	r0,-46
8001b3b6:	30 78       	mov	r8,7
8001b3b8:	00 00       	add	r0,r0
8001b3ba:	00 00       	add	r0,r0
8001b3bc:	2c 20       	sub	r0,-62
8001b3be:	75 70       	ld.w	r0,r10[0x5c]
8001b3c0:	74 69       	ld.w	r9,r10[0x18]
8001b3c2:	6d 65       	ld.w	r5,r6[0x58]
8001b3c4:	20 3d       	sub	sp,12
8001b3c6:	00 00       	add	r0,r0
8001b3c8:	4d 53       	lddpc	r3,8001b51c <ubx_process_data+0xe>
8001b3ca:	47 5f       	lddsp	pc,sp[0x1d4]
8001b3cc:	53 4f       	stdsp	sp[0xd0],pc
8001b3ce:	4c 20       	lddpc	r0,8001b4d4 <ubx_read+0xf9e>
8001b3d0:	00 00       	add	r0,r0
8001b3d2:	00 00       	add	r0,r0
8001b3d4:	69 74       	ld.w	r4,r4[0x5c]
8001b3d6:	6f 77       	ld.w	r7,r7[0x5c]
8001b3d8:	20 3a       	sub	r10,3
8001b3da:	00 00       	add	r0,r0
8001b3dc:	20 77       	sub	r7,7
8001b3de:	65 65       	ld.w	r5,r2[0x58]
8001b3e0:	6b 20       	ld.w	r0,r5[0x48]
8001b3e2:	3a 00       	mov	r0,-96
8001b3e4:	20 66       	sub	r6,6
8001b3e6:	69 78       	ld.w	r8,r4[0x5c]
8001b3e8:	5f 74       	srpl	r4
8001b3ea:	79 70       	ld.w	r0,r12[0x5c]
8001b3ec:	65 20       	ld.w	r0,r2[0x48]
8001b3ee:	3d 20       	mov	r0,-46
8001b3f0:	30 78       	mov	r8,7
8001b3f2:	30 00       	mov	r0,0
8001b3f4:	20 70       	sub	r0,7
8001b3f6:	6f 73       	ld.w	r3,r7[0x5c]
8001b3f8:	5f 61       	srmi	r1
8001b3fa:	63 63       	ld.w	r3,r1[0x58]
8001b3fc:	5f 33       	srlo	r3
8001b3fe:	64 20       	ld.w	r0,r2[0x8]
8001b400:	3a 00       	mov	r0,-96
8001b402:	00 00       	add	r0,r0
8001b404:	20 65       	sub	r5,6
8001b406:	63 65       	ld.w	r5,r1[0x58]
8001b408:	66 78       	ld.w	r8,r3[0x1c]
8001b40a:	20 3a       	sub	r10,3
8001b40c:	00 00       	add	r0,r0
8001b40e:	00 00       	add	r0,r0
8001b410:	20 65       	sub	r5,6
8001b412:	63 65       	ld.w	r5,r1[0x58]
8001b414:	66 79       	ld.w	r9,r3[0x1c]
8001b416:	20 3a       	sub	r10,3
8001b418:	00 00       	add	r0,r0
8001b41a:	00 00       	add	r0,r0
8001b41c:	20 65       	sub	r5,6
8001b41e:	63 65       	ld.w	r5,r1[0x58]
8001b420:	66 7a       	ld.w	r10,r3[0x1c]
8001b422:	20 3a       	sub	r10,3
8001b424:	00 00       	add	r0,r0
8001b426:	00 00       	add	r0,r0
8001b428:	20 70       	sub	r0,7
8001b42a:	6f 73       	ld.w	r3,r7[0x5c]
8001b42c:	5f 44       	srge	r4
8001b42e:	4f 50       	lddpc	r0,8001b600 <ubx_process_data+0xf2>
8001b430:	20 3a       	sub	r10,3
8001b432:	00 00       	add	r0,r0
8001b434:	20 6e       	sub	lr,6
8001b436:	75 6d       	ld.w	sp,r10[0x58]
8001b438:	20 73       	sub	r3,7
8001b43a:	61 74       	ld.w	r4,r0[0x5c]
8001b43c:	20 3a       	sub	r10,3
8001b43e:	00 00       	add	r0,r0
8001b440:	4d 53       	lddpc	r3,8001b594 <ubx_process_data+0x86>
8001b442:	47 5f       	lddsp	pc,sp[0x1d4]
8001b444:	4e 41       	lddpc	r1,8001b5d4 <ubx_process_data+0xc6>
8001b446:	56 5f       	stdsp	sp[0x194],pc
8001b448:	56 45       	stdsp	sp[0x190],r5
8001b44a:	4c 4e       	lddpc	lr,8001b558 <ubx_process_data+0x4a>
8001b44c:	45 44       	lddsp	r4,sp[0x150]
8001b44e:	20 00       	sub	r0,0
8001b450:	20 6e       	sub	lr,6
8001b452:	65 64       	ld.w	r4,r2[0x58]
8001b454:	5f 6e       	srmi	lr
8001b456:	6f 72       	ld.w	r2,r7[0x5c]
8001b458:	74 68       	ld.w	r8,r10[0x18]
8001b45a:	20 3a       	sub	r10,3
8001b45c:	00 00       	add	r0,r0
8001b45e:	00 00       	add	r0,r0
8001b460:	20 6e       	sub	lr,6
8001b462:	65 64       	ld.w	r4,r2[0x58]
8001b464:	5f 65       	srmi	r5
8001b466:	61 73       	ld.w	r3,r0[0x5c]
8001b468:	74 20       	ld.w	r0,r10[0x8]
8001b46a:	3a 00       	mov	r0,-96
8001b46c:	20 6e       	sub	lr,6
8001b46e:	65 64       	ld.w	r4,r2[0x58]
8001b470:	5f 64       	srmi	r4
8001b472:	6f 77       	ld.w	r7,r7[0x5c]
8001b474:	6e 20       	ld.w	r0,r7[0x8]
8001b476:	3a 00       	mov	r0,-96
8001b478:	20 73       	sub	r3,7
8001b47a:	70 65       	ld.w	r5,r8[0x18]
8001b47c:	65 64       	ld.w	r4,r2[0x58]
8001b47e:	5f 33       	srlo	r3
8001b480:	64 20       	ld.w	r0,r2[0x8]
8001b482:	3a 00       	mov	r0,-96
8001b484:	20 68       	sub	r8,6
8001b486:	65 61       	ld.w	r1,r2[0x58]
8001b488:	64 69       	ld.w	r9,r2[0x18]
8001b48a:	6e 67       	ld.w	r7,r7[0x18]
8001b48c:	5f 32       	srlo	r2
8001b48e:	64 20       	ld.w	r0,r2[0x8]
8001b490:	3a 00       	mov	r0,-96
8001b492:	00 00       	add	r0,r0
8001b494:	20 73       	sub	r3,7
8001b496:	70 65       	ld.w	r5,r8[0x18]
8001b498:	65 64       	ld.w	r4,r2[0x58]
8001b49a:	5f 61       	srmi	r1
8001b49c:	63 63       	ld.w	r3,r1[0x58]
8001b49e:	75 72       	ld.w	r2,r10[0x5c]
8001b4a0:	61 63       	ld.w	r3,r0[0x58]
8001b4a2:	79 20       	ld.w	r0,r12[0x48]
8001b4a4:	3a 00       	mov	r0,-96
8001b4a6:	00 00       	add	r0,r0
8001b4a8:	20 68       	sub	r8,6
8001b4aa:	65 61       	ld.w	r1,r2[0x58]
8001b4ac:	64 69       	ld.w	r9,r2[0x18]
8001b4ae:	6e 67       	ld.w	r7,r7[0x18]
8001b4b0:	5f 61       	srmi	r1
8001b4b2:	63 63       	ld.w	r3,r1[0x58]
8001b4b4:	75 72       	ld.w	r2,r10[0x5c]
8001b4b6:	61 63       	ld.w	r3,r0[0x58]
8001b4b8:	79 20       	ld.w	r0,r12[0x48]
8001b4ba:	3a 00       	mov	r0,-96
8001b4bc:	4d 53       	lddpc	r3,8001b610 <ubx_process_data+0x102>
8001b4be:	47 5f       	lddsp	pc,sp[0x1d4]
8001b4c0:	4e 41       	lddpc	r1,8001b650 <ubx_process_data+0x142>
8001b4c2:	56 5f       	stdsp	sp[0x194],pc
8001b4c4:	53 56       	stdsp	sp[0xd4],r6
8001b4c6:	49 4e       	lddpc	lr,8001b514 <ubx_process_data+0x6>
8001b4c8:	46 4f       	lddsp	pc,sp[0x190]
8001b4ca:	2c 20       	sub	r0,-62
8001b4cc:	6e 75       	ld.w	r5,r7[0x1c]
8001b4ce:	6d 43       	ld.w	r3,r6[0x50]
8001b4d0:	68 61       	ld.w	r1,r4[0x18]
8001b4d2:	6e 6e       	ld.w	lr,r7[0x18]
8001b4d4:	65 6c       	ld.w	r12,r2[0x58]
8001b4d6:	3a 00       	mov	r0,-96
8001b4d8:	55 6e       	stdsp	sp[0x158],lr
8001b4da:	65 78       	ld.w	r8,r2[0x5c]
8001b4dc:	70 65       	ld.w	r5,r8[0x18]
8001b4de:	63 74       	ld.w	r4,r1[0x5c]
8001b4e0:	65 64       	ld.w	r4,r2[0x58]
8001b4e2:	20 4e       	sub	lr,4
8001b4e4:	41 56       	lddsp	r6,sp[0x54]
8001b4e6:	20 6d       	sub	sp,24
8001b4e8:	65 73       	ld.w	r3,r2[0x5c]
8001b4ea:	73 61       	ld.w	r1,r9[0x58]
8001b4ec:	67 65       	ld.w	r5,r3[0x58]
8001b4ee:	20 30       	sub	r0,3
8001b4f0:	78 00       	ld.w	r0,r12[0x0]
8001b4f2:	00 00       	add	r0,r0
8001b4f4:	44 69       	lddsp	r9,sp[0x118]
8001b4f6:	73 61       	ld.w	r1,r9[0x58]
8001b4f8:	62 6c       	ld.w	r12,r1[0x18]
8001b4fa:	69 6e       	ld.w	lr,r4[0x58]
8001b4fc:	67 20       	ld.w	r0,r3[0x48]
8001b4fe:	4e 41       	lddpc	r1,8001b68c <ubx_process_data+0x17e>
8001b500:	56 20       	stdsp	sp[0x188],r0
8001b502:	6d 65       	ld.w	r5,r6[0x58]
8001b504:	73 73       	ld.w	r3,r9[0x5c]
8001b506:	61 67       	ld.w	r7,r0[0x58]
8001b508:	65 20       	ld.w	r0,r2[0x48]
8001b50a:	30 78       	mov	r8,7
	...

8001b50e <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001b50e:	eb cd 40 e0 	pushm	r5-r7,lr
8001b512:	1a 97       	mov	r7,sp
8001b514:	20 ad       	sub	sp,40
8001b516:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001b51a:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001b51c:	ec f8 00 60 	ld.w	r8,r6[96]
8001b520:	11 89       	ld.ub	r9,r8[0x0]
8001b522:	30 58       	mov	r8,5
8001b524:	f0 09 18 00 	cp.b	r9,r8
8001b528:	c0 f1       	brne	8001b546 <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001b52a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b52e:	11 88       	ld.ub	r8,r8[0x0]
8001b530:	30 ab       	mov	r11,10
8001b532:	10 9c       	mov	r12,r8
8001b534:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001b538:	fe cc 12 5c 	sub	r12,pc,4700
8001b53c:	f0 16 00 01 	mcall	r6[4]
		return false;
8001b540:	30 08       	mov	r8,0
8001b542:	e0 8f 05 58 	bral	8001bff2 <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001b546:	ec f8 00 60 	ld.w	r8,r6[96]
8001b54a:	11 89       	ld.ub	r9,r8[0x0]
8001b54c:	30 a8       	mov	r8,10
8001b54e:	f0 09 18 00 	cp.b	r9,r8
8001b552:	c1 11       	brne	8001b574 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001b554:	f0 16 02 13 	mcall	r6[2124]
8001b558:	18 98       	mov	r8,r12
8001b55a:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001b55e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b562:	58 08       	cp.w	r8,0
8001b564:	c0 50       	breq	8001b56e <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001b566:	fe cc 03 2a 	sub	r12,pc,810
8001b56a:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001b56e:	30 08       	mov	r8,0
8001b570:	e0 8f 05 41 	bral	8001bff2 <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001b574:	ec f8 00 60 	ld.w	r8,r6[96]
8001b578:	11 89       	ld.ub	r9,r8[0x0]
8001b57a:	30 d8       	mov	r8,13
8001b57c:	f0 09 18 00 	cp.b	r9,r8
8001b580:	e0 81 00 89 	brne	8001b692 <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001b584:	f0 16 01 4c 	mcall	r6[1328]
8001b588:	18 98       	mov	r8,r12
8001b58a:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001b58e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b592:	58 08       	cp.w	r8,0
8001b594:	c2 40       	breq	8001b5dc <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001b596:	ec f8 02 08 	ld.w	r8,r6[520]
8001b59a:	11 88       	ld.ub	r8,r8[0x0]
8001b59c:	2f f8       	sub	r8,-1
8001b59e:	5c 58       	castu.b	r8
8001b5a0:	ec f9 02 08 	ld.w	r9,r6[520]
8001b5a4:	b2 88       	st.b	r9[0x0],r8
8001b5a6:	ec f8 02 08 	ld.w	r8,r6[520]
8001b5aa:	11 88       	ld.ub	r8,r8[0x0]
8001b5ac:	ec f9 01 a0 	ld.w	r9,r6[416]
8001b5b0:	13 89       	ld.ub	r9,r9[0x0]
8001b5b2:	f0 09 0d 08 	divu	r8,r8,r9
8001b5b6:	12 98       	mov	r8,r9
8001b5b8:	5c 58       	castu.b	r8
8001b5ba:	ec f9 02 08 	ld.w	r9,r6[520]
8001b5be:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001b5c0:	ec f8 01 90 	ld.w	r8,r6[400]
8001b5c4:	11 88       	ld.ub	r8,r8[0x0]
8001b5c6:	58 08       	cp.w	r8,0
8001b5c8:	c0 a0       	breq	8001b5dc <ubx_process_data+0xce>
8001b5ca:	ec f8 02 08 	ld.w	r8,r6[520]
8001b5ce:	11 88       	ld.ub	r8,r8[0x0]
8001b5d0:	58 08       	cp.w	r8,0
8001b5d2:	c0 51       	brne	8001b5dc <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001b5d4:	fe cc 03 84 	sub	r12,pc,900
8001b5d8:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001b5dc:	f0 16 02 15 	mcall	r6[2132]
8001b5e0:	18 98       	mov	r8,r12
8001b5e2:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001b5e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b5ea:	58 08       	cp.w	r8,0
8001b5ec:	c5 00       	breq	8001b68c <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001b5ee:	ec f8 01 c0 	ld.w	r8,r6[448]
8001b5f2:	11 88       	ld.ub	r8,r8[0x0]
8001b5f4:	2f f8       	sub	r8,-1
8001b5f6:	5c 58       	castu.b	r8
8001b5f8:	ec f9 01 c0 	ld.w	r9,r6[448]
8001b5fc:	b2 88       	st.b	r9[0x0],r8
8001b5fe:	ec f8 01 c0 	ld.w	r8,r6[448]
8001b602:	11 88       	ld.ub	r8,r8[0x0]
8001b604:	ec f9 01 a0 	ld.w	r9,r6[416]
8001b608:	13 89       	ld.ub	r9,r9[0x0]
8001b60a:	f0 09 0d 08 	divu	r8,r8,r9
8001b60e:	12 98       	mov	r8,r9
8001b610:	5c 58       	castu.b	r8
8001b612:	ec f9 01 c0 	ld.w	r9,r6[448]
8001b616:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001b618:	ec f8 01 90 	ld.w	r8,r6[400]
8001b61c:	11 88       	ld.ub	r8,r8[0x0]
8001b61e:	58 08       	cp.w	r8,0
8001b620:	c3 60       	breq	8001b68c <ubx_process_data+0x17e>
8001b622:	ec f8 01 c0 	ld.w	r8,r6[448]
8001b626:	11 88       	ld.ub	r8,r8[0x0]
8001b628:	58 08       	cp.w	r8,0
8001b62a:	c3 11       	brne	8001b68c <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001b62c:	fe cc 03 c4 	sub	r12,pc,964
8001b630:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b634:	fe cc 03 bc 	sub	r12,pc,956
8001b638:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001b63c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b640:	70 48       	ld.w	r8,r8[0x10]
8001b642:	30 ab       	mov	r11,10
8001b644:	10 9c       	mov	r12,r8
8001b646:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001b64a:	fe cc 03 ca 	sub	r12,pc,970
8001b64e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001b652:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b656:	70 38       	ld.w	r8,r8[0xc]
8001b658:	30 ab       	mov	r11,10
8001b65a:	10 9c       	mov	r12,r8
8001b65c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001b660:	fe cc 03 d8 	sub	r12,pc,984
8001b664:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001b668:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b66c:	70 28       	ld.w	r8,r8[0x8]
8001b66e:	30 ab       	mov	r11,10
8001b670:	10 9c       	mov	r12,r8
8001b672:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001b676:	fe cc 03 e2 	sub	r12,pc,994
8001b67a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001b67e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b682:	70 18       	ld.w	r8,r8[0x4]
8001b684:	30 ab       	mov	r11,10
8001b686:	10 9c       	mov	r12,r8
8001b688:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001b68c:	30 08       	mov	r8,0
8001b68e:	e0 8f 04 b2 	bral	8001bff2 <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001b692:	ec f8 00 60 	ld.w	r8,r6[96]
8001b696:	11 89       	ld.ub	r9,r8[0x0]
8001b698:	30 68       	mov	r8,6
8001b69a:	f0 09 18 00 	cp.b	r9,r8
8001b69e:	c5 b1       	brne	8001b754 <ubx_process_data+0x246>
8001b6a0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b6a4:	11 89       	ld.ub	r9,r8[0x0]
8001b6a6:	32 48       	mov	r8,36
8001b6a8:	f0 09 18 00 	cp.b	r9,r8
8001b6ac:	c5 41       	brne	8001b754 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001b6ae:	f0 16 01 ed 	mcall	r6[1972]
8001b6b2:	18 98       	mov	r8,r12
8001b6b4:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001b6b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6bc:	58 08       	cp.w	r8,0
8001b6be:	c1 20       	breq	8001b6e2 <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001b6c0:	fe cc 04 20 	sub	r12,pc,1056
8001b6c4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001b6c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6cc:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b6d0:	31 0b       	mov	r11,16
8001b6d2:	10 9c       	mov	r12,r8
8001b6d4:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b6d8:	fe cc 13 fc 	sub	r12,pc,5116
8001b6dc:	f0 16 00 01 	mcall	r6[4]
8001b6e0:	c3 78       	rjmp	8001b74e <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001b6e2:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b6e6:	70 08       	ld.w	r8,r8[0x0]
8001b6e8:	5b f8       	cp.w	r8,-1
8001b6ea:	c2 30       	breq	8001b730 <ubx_process_data+0x222>
8001b6ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6f0:	58 08       	cp.w	r8,0
8001b6f2:	c1 f1       	brne	8001b730 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001b6f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6f8:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b6fc:	10 99       	mov	r9,r8
8001b6fe:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b702:	70 08       	ld.w	r8,r8[0x0]
8001b704:	10 39       	cp.w	r9,r8
8001b706:	c1 50       	breq	8001b730 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001b708:	ec f8 01 e0 	ld.w	r8,r6[480]
8001b70c:	70 08       	ld.w	r8,r8[0x0]
8001b70e:	5c 58       	castu.b	r8
8001b710:	ec f9 03 a4 	ld.w	r9,r6[932]
8001b714:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001b718:	fe cc 04 60 	sub	r12,pc,1120
8001b71c:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001b720:	ec f8 03 a4 	ld.w	r8,r6[932]
8001b724:	32 49       	mov	r9,36
8001b726:	10 9a       	mov	r10,r8
8001b728:	32 4b       	mov	r11,36
8001b72a:	30 6c       	mov	r12,6
8001b72c:	f0 16 00 fe 	mcall	r6[1016]
				}				
			}
			dbg_print("No engine settings received ");
8001b730:	fe cc 04 64 	sub	r12,pc,1124
8001b734:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b738:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b73c:	11 88       	ld.ub	r8,r8[0x0]
8001b73e:	31 0b       	mov	r11,16
8001b740:	10 9c       	mov	r12,r8
8001b742:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b746:	fe cc 14 6a 	sub	r12,pc,5226
8001b74a:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001b74e:	30 08       	mov	r8,0
8001b750:	e0 8f 04 51 	bral	8001bff2 <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001b754:	ec f8 00 60 	ld.w	r8,r6[96]
8001b758:	11 89       	ld.ub	r9,r8[0x0]
8001b75a:	30 68       	mov	r8,6
8001b75c:	f0 09 18 00 	cp.b	r9,r8
8001b760:	c3 11       	brne	8001b7c2 <ubx_process_data+0x2b4>
8001b762:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b766:	11 89       	ld.ub	r9,r8[0x0]
8001b768:	30 18       	mov	r8,1
8001b76a:	f0 09 18 00 	cp.b	r9,r8
8001b76e:	c2 a1       	brne	8001b7c2 <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001b770:	f0 16 01 94 	mcall	r6[1616]
8001b774:	18 98       	mov	r8,r12
8001b776:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001b77a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b77e:	58 08       	cp.w	r8,0
8001b780:	c1 e0       	breq	8001b7bc <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001b782:	fe cc 04 96 	sub	r12,pc,1174
8001b786:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001b78a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b78e:	11 a8       	ld.ub	r8,r8[0x2]
8001b790:	31 0b       	mov	r11,16
8001b792:	10 9c       	mov	r12,r8
8001b794:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001b798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b79c:	11 98       	ld.ub	r8,r8[0x1]
8001b79e:	31 0b       	mov	r11,16
8001b7a0:	10 9c       	mov	r12,r8
8001b7a2:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001b7a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b7aa:	11 88       	ld.ub	r8,r8[0x0]
8001b7ac:	30 ab       	mov	r11,10
8001b7ae:	10 9c       	mov	r12,r8
8001b7b0:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b7b4:	fe cc 14 d8 	sub	r12,pc,5336
8001b7b8:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001b7bc:	30 08       	mov	r8,0
8001b7be:	e0 8f 04 1a 	bral	8001bff2 <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001b7c2:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7c6:	11 89       	ld.ub	r9,r8[0x0]
8001b7c8:	30 18       	mov	r8,1
8001b7ca:	f0 09 18 00 	cp.b	r9,r8
8001b7ce:	c5 10       	breq	8001b870 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001b7d0:	fe cc 04 d0 	sub	r12,pc,1232
8001b7d4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001b7d8:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7dc:	11 88       	ld.ub	r8,r8[0x0]
8001b7de:	31 0b       	mov	r11,16
8001b7e0:	10 9c       	mov	r12,r8
8001b7e2:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001b7e6:	fe cc 04 ce 	sub	r12,pc,1230
8001b7ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b7ee:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b7f2:	11 88       	ld.ub	r8,r8[0x0]
8001b7f4:	30 ab       	mov	r11,10
8001b7f6:	10 9c       	mov	r12,r8
8001b7f8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001b7fc:	fe cc 04 dc 	sub	r12,pc,1244
8001b800:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001b804:	ec f8 01 a4 	ld.w	r8,r6[420]
8001b808:	11 88       	ld.ub	r8,r8[0x0]
8001b80a:	2f f8       	sub	r8,-1
8001b80c:	5c 58       	castu.b	r8
8001b80e:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b812:	b2 88       	st.b	r9[0x0],r8
8001b814:	ec f8 01 a4 	ld.w	r8,r6[420]
8001b818:	11 88       	ld.ub	r8,r8[0x0]
8001b81a:	58 08       	cp.w	r8,0
8001b81c:	c2 71       	brne	8001b86a <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001b81e:	fe cc 04 f6 	sub	r12,pc,1270
8001b822:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001b826:	ec f8 00 60 	ld.w	r8,r6[96]
8001b82a:	11 88       	ld.ub	r8,r8[0x0]
8001b82c:	31 0b       	mov	r11,16
8001b82e:	10 9c       	mov	r12,r8
8001b830:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001b834:	fe cc 05 1c 	sub	r12,pc,1308
8001b838:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b83c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b840:	11 88       	ld.ub	r8,r8[0x0]
8001b842:	31 0b       	mov	r11,16
8001b844:	10 9c       	mov	r12,r8
8001b846:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001b84a:	fe cc 05 2a 	sub	r12,pc,1322
8001b84e:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001b852:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b856:	11 88       	ld.ub	r8,r8[0x0]
8001b858:	10 99       	mov	r9,r8
8001b85a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b85e:	11 88       	ld.ub	r8,r8[0x0]
8001b860:	30 0a       	mov	r10,0
8001b862:	12 9b       	mov	r11,r9
8001b864:	10 9c       	mov	r12,r8
8001b866:	f0 16 00 5e 	mcall	r6[376]
		}
		return false;
8001b86a:	30 08       	mov	r8,0
8001b86c:	e0 8f 03 c3 	bral	8001bff2 <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001b870:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b874:	11 88       	ld.ub	r8,r8[0x0]
8001b876:	58 68       	cp.w	r8,6
8001b878:	e0 80 01 6f 	breq	8001bb56 <ubx_process_data+0x648>
8001b87c:	e0 89 00 09 	brgt	8001b88e <ubx_process_data+0x380>
8001b880:	58 28       	cp.w	r8,2
8001b882:	c0 f0       	breq	8001b8a0 <ubx_process_data+0x392>
8001b884:	58 38       	cp.w	r8,3
8001b886:	e0 80 01 01 	breq	8001ba88 <ubx_process_data+0x57a>
8001b88a:	e0 8f 03 63 	bral	8001bf50 <ubx_process_data+0xa42>
8001b88e:	59 28       	cp.w	r8,18
8001b890:	e0 80 02 2c 	breq	8001bce8 <ubx_process_data+0x7da>
8001b894:	e0 48 00 30 	cp.w	r8,48
8001b898:	e0 80 03 3e 	breq	8001bf14 <ubx_process_data+0xa06>
8001b89c:	e0 8f 03 5a 	bral	8001bf50 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001b8a0:	f0 16 01 76 	mcall	r6[1496]
8001b8a4:	18 98       	mov	r8,r12
8001b8a6:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001b8aa:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b8ae:	58 08       	cp.w	r8,0
8001b8b0:	e0 80 03 85 	breq	8001bfba <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001b8b4:	ec f8 01 f8 	ld.w	r8,r6[504]
8001b8b8:	11 88       	ld.ub	r8,r8[0x0]
8001b8ba:	2f f8       	sub	r8,-1
8001b8bc:	5c 58       	castu.b	r8
8001b8be:	ec f9 01 f8 	ld.w	r9,r6[504]
8001b8c2:	b2 88       	st.b	r9[0x0],r8
8001b8c4:	ec f8 01 f8 	ld.w	r8,r6[504]
8001b8c8:	11 88       	ld.ub	r8,r8[0x0]
8001b8ca:	ec f9 01 a0 	ld.w	r9,r6[416]
8001b8ce:	13 89       	ld.ub	r9,r9[0x0]
8001b8d0:	f0 09 0d 08 	divu	r8,r8,r9
8001b8d4:	12 98       	mov	r8,r9
8001b8d6:	5c 58       	castu.b	r8
8001b8d8:	ec f9 01 f8 	ld.w	r9,r6[504]
8001b8dc:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001b8de:	ec f8 01 90 	ld.w	r8,r6[400]
8001b8e2:	11 88       	ld.ub	r8,r8[0x0]
8001b8e4:	58 08       	cp.w	r8,0
8001b8e6:	c5 b0       	breq	8001b99c <ubx_process_data+0x48e>
8001b8e8:	ec f8 01 f8 	ld.w	r8,r6[504]
8001b8ec:	11 88       	ld.ub	r8,r8[0x0]
8001b8ee:	58 08       	cp.w	r8,0
8001b8f0:	c5 61       	brne	8001b99c <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001b8f2:	fe cc 05 b2 	sub	r12,pc,1458
8001b8f6:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b8fa:	fe cc 06 82 	sub	r12,pc,1666
8001b8fe:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001b902:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b906:	70 68       	ld.w	r8,r8[0x18]
8001b908:	30 ab       	mov	r11,10
8001b90a:	10 9c       	mov	r12,r8
8001b90c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001b910:	fe cc 05 c0 	sub	r12,pc,1472
8001b914:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001b918:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b91c:	70 58       	ld.w	r8,r8[0x14]
8001b91e:	30 ab       	mov	r11,10
8001b920:	10 9c       	mov	r12,r8
8001b922:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001b926:	fe cc 05 c6 	sub	r12,pc,1478
8001b92a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001b92e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b932:	70 48       	ld.w	r8,r8[0x10]
8001b934:	30 ab       	mov	r11,10
8001b936:	10 9c       	mov	r12,r8
8001b938:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001b93c:	fe cc 05 d0 	sub	r12,pc,1488
8001b940:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001b944:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b948:	70 38       	ld.w	r8,r8[0xc]
8001b94a:	30 ab       	mov	r11,10
8001b94c:	10 9c       	mov	r12,r8
8001b94e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001b952:	fe cc 05 d6 	sub	r12,pc,1494
8001b956:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001b95a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b95e:	70 28       	ld.w	r8,r8[0x8]
8001b960:	30 ab       	mov	r11,10
8001b962:	10 9c       	mov	r12,r8
8001b964:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001b968:	fe cc 05 e0 	sub	r12,pc,1504
8001b96c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001b970:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b974:	70 18       	ld.w	r8,r8[0x4]
8001b976:	30 ab       	mov	r11,10
8001b978:	10 9c       	mov	r12,r8
8001b97a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001b97e:	fe cc 05 ea 	sub	r12,pc,1514
8001b982:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001b986:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b98a:	70 08       	ld.w	r8,r8[0x0]
8001b98c:	30 ab       	mov	r11,10
8001b98e:	10 9c       	mov	r12,r8
8001b990:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b994:	fe cc 16 b8 	sub	r12,pc,5816
8001b998:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001b99c:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9a0:	70 08       	ld.w	r8,r8[0x0]
8001b9a2:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001b9a6:	72 69       	ld.w	r9,r9[0x18]
8001b9a8:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001b9ac:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9b0:	70 05       	ld.w	r5,r8[0x0]
8001b9b2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9b6:	70 58       	ld.w	r8,r8[0x14]
8001b9b8:	10 9c       	mov	r12,r8
8001b9ba:	f0 16 00 1a 	mcall	r6[104]
8001b9be:	30 08       	mov	r8,0
8001b9c0:	e0 69 12 d0 	mov	r9,4816
8001b9c4:	ea 19 41 63 	orh	r9,0x4163
8001b9c8:	f0 16 00 0c 	mcall	r6[48]
8001b9cc:	14 98       	mov	r8,r10
8001b9ce:	16 99       	mov	r9,r11
8001b9d0:	ea e9 0b 10 	st.d	r5[2832],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001b9d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9d8:	70 05       	ld.w	r5,r8[0x0]
8001b9da:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9de:	70 48       	ld.w	r8,r8[0x10]
8001b9e0:	10 9c       	mov	r12,r8
8001b9e2:	f0 16 00 1a 	mcall	r6[104]
8001b9e6:	30 08       	mov	r8,0
8001b9e8:	e0 69 12 d0 	mov	r9,4816
8001b9ec:	ea 19 41 63 	orh	r9,0x4163
8001b9f0:	f0 16 00 0c 	mcall	r6[48]
8001b9f4:	14 98       	mov	r8,r10
8001b9f6:	16 99       	mov	r9,r11
8001b9f8:	ea e9 0b 08 	st.d	r5[2824],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001b9fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba00:	70 05       	ld.w	r5,r8[0x0]
8001ba02:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba06:	70 38       	ld.w	r8,r8[0xc]
8001ba08:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ba0c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba10:	10 9c       	mov	r12,r8
8001ba12:	f0 16 00 0a 	mcall	r6[40]
8001ba16:	18 98       	mov	r8,r12
8001ba18:	eb 48 0b 1c 	st.w	r5[2844],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001ba1c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba20:	70 05       	ld.w	r5,r8[0x0]
8001ba22:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba26:	70 28       	ld.w	r8,r8[0x8]
8001ba28:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ba2c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba30:	10 9c       	mov	r12,r8
8001ba32:	f0 16 00 0a 	mcall	r6[40]
8001ba36:	18 98       	mov	r8,r12
8001ba38:	eb 48 0b 18 	st.w	r5[2840],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001ba3c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba40:	70 05       	ld.w	r5,r8[0x0]
8001ba42:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba46:	70 18       	ld.w	r8,r8[0x4]
8001ba48:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba4c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba50:	10 9c       	mov	r12,r8
8001ba52:	f0 16 00 0a 	mcall	r6[40]
8001ba56:	18 98       	mov	r8,r12
8001ba58:	eb 48 0b 38 	st.w	r5[2872],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001ba5c:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba60:	70 05       	ld.w	r5,r8[0x0]
8001ba62:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba66:	70 08       	ld.w	r8,r8[0x0]
8001ba68:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba6c:	fc 1b 44 7a 	movh	r11,0x447a
8001ba70:	10 9c       	mov	r12,r8
8001ba72:	f0 16 00 0a 	mcall	r6[40]
8001ba76:	18 98       	mov	r8,r12
8001ba78:	eb 48 0b 3c 	st.w	r5[2876],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001ba7c:	ec f9 02 54 	ld.w	r9,r6[596]
8001ba80:	30 18       	mov	r8,1
8001ba82:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001ba84:	e0 8f 02 a2 	bral	8001bfc8 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001ba88:	f0 16 01 50 	mcall	r6[1344]
8001ba8c:	18 98       	mov	r8,r12
8001ba8e:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001ba92:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ba96:	58 08       	cp.w	r8,0
8001ba98:	e0 80 02 93 	breq	8001bfbe <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001ba9c:	ec f8 01 d4 	ld.w	r8,r6[468]
8001baa0:	11 88       	ld.ub	r8,r8[0x0]
8001baa2:	2f f8       	sub	r8,-1
8001baa4:	5c 58       	castu.b	r8
8001baa6:	ec f9 01 d4 	ld.w	r9,r6[468]
8001baaa:	b2 88       	st.b	r9[0x0],r8
8001baac:	ec f8 01 d4 	ld.w	r8,r6[468]
8001bab0:	11 88       	ld.ub	r8,r8[0x0]
8001bab2:	ec f9 01 a0 	ld.w	r9,r6[416]
8001bab6:	13 89       	ld.ub	r9,r9[0x0]
8001bab8:	f0 09 0d 08 	divu	r8,r8,r9
8001babc:	12 98       	mov	r8,r9
8001babe:	5c 58       	castu.b	r8
8001bac0:	ec f9 01 d4 	ld.w	r9,r6[468]
8001bac4:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001bac6:	ec f8 01 90 	ld.w	r8,r6[400]
8001baca:	11 88       	ld.ub	r8,r8[0x0]
8001bacc:	58 08       	cp.w	r8,0
8001bace:	c2 10       	breq	8001bb10 <ubx_process_data+0x602>
8001bad0:	ec f8 01 d4 	ld.w	r8,r6[468]
8001bad4:	11 88       	ld.ub	r8,r8[0x0]
8001bad6:	58 08       	cp.w	r8,0
8001bad8:	c1 c1       	brne	8001bb10 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001bada:	fe cc 07 3a 	sub	r12,pc,1850
8001bade:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001bae2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bae6:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001baea:	31 0b       	mov	r11,16
8001baec:	10 9c       	mov	r12,r8
8001baee:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001baf2:	fe cc 07 36 	sub	r12,pc,1846
8001baf6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001bafa:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bafe:	70 08       	ld.w	r8,r8[0x0]
8001bb00:	30 ab       	mov	r11,10
8001bb02:	10 9c       	mov	r12,r8
8001bb04:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bb08:	fe cc 18 2c 	sub	r12,pc,6188
8001bb0c:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001bb10:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bb14:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001bb18:	30 38       	mov	r8,3
8001bb1a:	f0 09 18 00 	cp.b	r9,r8
8001bb1e:	5f 08       	sreq	r8
8001bb20:	5c 58       	castu.b	r8
8001bb22:	ec f9 01 ec 	ld.w	r9,r6[492]
8001bb26:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bb28:	ec f8 01 ec 	ld.w	r8,r6[492]
8001bb2c:	11 88       	ld.ub	r8,r8[0x0]
8001bb2e:	ec 18 00 01 	eorl	r8,0x1
8001bb32:	5c 58       	castu.b	r8
8001bb34:	c0 90       	breq	8001bb46 <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001bb36:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb3a:	70 09       	ld.w	r9,r8[0x0]
8001bb3c:	30 18       	mov	r8,1
8001bb3e:	f3 68 0b 54 	st.b	r9[2900],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bb42:	e0 8f 02 43 	bral	8001bfc8 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bb46:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb4a:	70 09       	ld.w	r9,r8[0x0]
8001bb4c:	30 28       	mov	r8,2
8001bb4e:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		}
		break;
8001bb52:	e0 8f 02 3b 	bral	8001bfc8 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001bb56:	f0 16 01 81 	mcall	r6[1540]
8001bb5a:	18 98       	mov	r8,r12
8001bb5c:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001bb60:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bb64:	58 08       	cp.w	r8,0
8001bb66:	e0 80 02 2e 	breq	8001bfc2 <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001bb6a:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bb6e:	11 88       	ld.ub	r8,r8[0x0]
8001bb70:	2f f8       	sub	r8,-1
8001bb72:	5c 58       	castu.b	r8
8001bb74:	ec f9 01 cc 	ld.w	r9,r6[460]
8001bb78:	b2 88       	st.b	r9[0x0],r8
8001bb7a:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bb7e:	11 88       	ld.ub	r8,r8[0x0]
8001bb80:	ec f9 01 a0 	ld.w	r9,r6[416]
8001bb84:	13 89       	ld.ub	r9,r9[0x0]
8001bb86:	f0 09 0d 08 	divu	r8,r8,r9
8001bb8a:	12 98       	mov	r8,r9
8001bb8c:	5c 58       	castu.b	r8
8001bb8e:	ec f9 01 cc 	ld.w	r9,r6[460]
8001bb92:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001bb94:	ec f8 01 90 	ld.w	r8,r6[400]
8001bb98:	11 88       	ld.ub	r8,r8[0x0]
8001bb9a:	58 08       	cp.w	r8,0
8001bb9c:	c7 40       	breq	8001bc84 <ubx_process_data+0x776>
8001bb9e:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bba2:	11 88       	ld.ub	r8,r8[0x0]
8001bba4:	58 08       	cp.w	r8,0
8001bba6:	c6 f1       	brne	8001bc84 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001bba8:	fe cc 07 e0 	sub	r12,pc,2016
8001bbac:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001bbb0:	fe cc 07 dc 	sub	r12,pc,2012
8001bbb4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001bbb8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbbc:	70 c8       	ld.w	r8,r8[0x30]
8001bbbe:	30 ab       	mov	r11,10
8001bbc0:	10 9c       	mov	r12,r8
8001bbc2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001bbc6:	fe cc 07 ea 	sub	r12,pc,2026
8001bbca:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001bbce:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbd2:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001bbd6:	30 ab       	mov	r11,10
8001bbd8:	10 9c       	mov	r12,r8
8001bbda:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001bbde:	fe cc 07 fa 	sub	r12,pc,2042
8001bbe2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001bbe6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbea:	f1 38 00 29 	ld.ub	r8,r8[41]
8001bbee:	31 0b       	mov	r11,16
8001bbf0:	10 9c       	mov	r12,r8
8001bbf2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001bbf6:	fe cc 08 02 	sub	r12,pc,2050
8001bbfa:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001bbfe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc02:	70 68       	ld.w	r8,r8[0x18]
8001bc04:	30 ab       	mov	r11,10
8001bc06:	10 9c       	mov	r12,r8
8001bc08:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001bc0c:	fe cc 08 08 	sub	r12,pc,2056
8001bc10:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001bc14:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc18:	70 98       	ld.w	r8,r8[0x24]
8001bc1a:	30 ab       	mov	r11,10
8001bc1c:	10 9c       	mov	r12,r8
8001bc1e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001bc22:	fe cc 08 12 	sub	r12,pc,2066
8001bc26:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001bc2a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc2e:	70 88       	ld.w	r8,r8[0x20]
8001bc30:	30 ab       	mov	r11,10
8001bc32:	10 9c       	mov	r12,r8
8001bc34:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001bc38:	fe cc 08 1c 	sub	r12,pc,2076
8001bc3c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001bc40:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc44:	70 78       	ld.w	r8,r8[0x1c]
8001bc46:	30 ab       	mov	r11,10
8001bc48:	10 9c       	mov	r12,r8
8001bc4a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001bc4e:	fe cc 08 26 	sub	r12,pc,2086
8001bc52:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001bc56:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc5a:	90 38       	ld.sh	r8,r8[0x6]
8001bc5c:	5c 78       	castu.h	r8
8001bc5e:	30 ab       	mov	r11,10
8001bc60:	10 9c       	mov	r12,r8
8001bc62:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001bc66:	fe cc 08 32 	sub	r12,pc,2098
8001bc6a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001bc6e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc72:	11 c8       	ld.ub	r8,r8[0x4]
8001bc74:	30 ab       	mov	r11,10
8001bc76:	10 9c       	mov	r12,r8
8001bc78:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bc7c:	fe cc 19 a0 	sub	r12,pc,6560
8001bc80:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001bc84:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc88:	f1 39 00 29 	ld.ub	r9,r8[41]
8001bc8c:	30 38       	mov	r8,3
8001bc8e:	f0 09 18 00 	cp.b	r9,r8
8001bc92:	5f 08       	sreq	r8
8001bc94:	5c 58       	castu.b	r8
8001bc96:	ec f9 01 ec 	ld.w	r9,r6[492]
8001bc9a:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bc9c:	ec f8 01 ec 	ld.w	r8,r6[492]
8001bca0:	11 88       	ld.ub	r8,r8[0x0]
8001bca2:	ec 18 00 01 	eorl	r8,0x1
8001bca6:	5c 58       	castu.b	r8
8001bca8:	c0 80       	breq	8001bcb8 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001bcaa:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcae:	70 09       	ld.w	r9,r8[0x0]
8001bcb0:	30 18       	mov	r8,1
8001bcb2:	f3 68 0b 54 	st.b	r9[2900],r8
8001bcb6:	c0 78       	rjmp	8001bcc4 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bcb8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcbc:	70 09       	ld.w	r9,r8[0x0]
8001bcbe:	30 28       	mov	r8,2
8001bcc0:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001bcc4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcc8:	70 09       	ld.w	r9,r8[0x0]
8001bcca:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcce:	11 c8       	ld.ub	r8,r8[0x4]
8001bcd0:	f3 68 0b 48 	st.b	r9[2888],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001bcd4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcd8:	70 09       	ld.w	r9,r8[0x0]
8001bcda:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcde:	90 38       	ld.sh	r8,r8[0x6]
8001bce0:	f3 58 0b 4a 	st.h	r9[2890],r8
		}
		break;
8001bce4:	e0 8f 01 72 	bral	8001bfc8 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001bce8:	f0 16 01 61 	mcall	r6[1412]
8001bcec:	18 98       	mov	r8,r12
8001bcee:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001bcf2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bcf6:	58 08       	cp.w	r8,0
8001bcf8:	e0 80 01 67 	breq	8001bfc6 <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001bcfc:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bd00:	11 88       	ld.ub	r8,r8[0x0]
8001bd02:	2f f8       	sub	r8,-1
8001bd04:	5c 58       	castu.b	r8
8001bd06:	ec f9 01 d8 	ld.w	r9,r6[472]
8001bd0a:	b2 88       	st.b	r9[0x0],r8
8001bd0c:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bd10:	11 88       	ld.ub	r8,r8[0x0]
8001bd12:	ec f9 01 a0 	ld.w	r9,r6[416]
8001bd16:	13 89       	ld.ub	r9,r9[0x0]
8001bd18:	f0 09 0d 08 	divu	r8,r8,r9
8001bd1c:	12 98       	mov	r8,r9
8001bd1e:	5c 58       	castu.b	r8
8001bd20:	ec f9 01 d8 	ld.w	r9,r6[472]
8001bd24:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001bd26:	ec f8 01 90 	ld.w	r8,r6[400]
8001bd2a:	11 88       	ld.ub	r8,r8[0x0]
8001bd2c:	58 08       	cp.w	r8,0
8001bd2e:	c6 60       	breq	8001bdfa <ubx_process_data+0x8ec>
8001bd30:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bd34:	11 88       	ld.ub	r8,r8[0x0]
8001bd36:	58 08       	cp.w	r8,0
8001bd38:	c6 11       	brne	8001bdfa <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001bd3a:	fe cc 08 fa 	sub	r12,pc,2298
8001bd3e:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001bd42:	fe cc 09 6e 	sub	r12,pc,2414
8001bd46:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001bd4a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd4e:	70 88       	ld.w	r8,r8[0x20]
8001bd50:	30 ab       	mov	r11,10
8001bd52:	10 9c       	mov	r12,r8
8001bd54:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001bd58:	fe cc 09 08 	sub	r12,pc,2312
8001bd5c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001bd60:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd64:	70 78       	ld.w	r8,r8[0x1c]
8001bd66:	30 ab       	mov	r11,10
8001bd68:	10 9c       	mov	r12,r8
8001bd6a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001bd6e:	fe cc 09 0e 	sub	r12,pc,2318
8001bd72:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001bd76:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd7a:	70 68       	ld.w	r8,r8[0x18]
8001bd7c:	30 ab       	mov	r11,10
8001bd7e:	10 9c       	mov	r12,r8
8001bd80:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001bd84:	fe cc 09 18 	sub	r12,pc,2328
8001bd88:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001bd8c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd90:	70 58       	ld.w	r8,r8[0x14]
8001bd92:	30 ab       	mov	r11,10
8001bd94:	10 9c       	mov	r12,r8
8001bd96:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001bd9a:	fe cc 09 22 	sub	r12,pc,2338
8001bd9e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001bda2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bda6:	70 48       	ld.w	r8,r8[0x10]
8001bda8:	30 ab       	mov	r11,10
8001bdaa:	10 9c       	mov	r12,r8
8001bdac:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001bdb0:	fe cc 09 2c 	sub	r12,pc,2348
8001bdb4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001bdb8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdbc:	70 28       	ld.w	r8,r8[0x8]
8001bdbe:	30 ab       	mov	r11,10
8001bdc0:	10 9c       	mov	r12,r8
8001bdc2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001bdc6:	fe cc 09 32 	sub	r12,pc,2354
8001bdca:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001bdce:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdd2:	70 18       	ld.w	r8,r8[0x4]
8001bdd4:	30 ab       	mov	r11,10
8001bdd6:	10 9c       	mov	r12,r8
8001bdd8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001bddc:	fe cc 09 34 	sub	r12,pc,2356
8001bde0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001bde4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bde8:	70 08       	ld.w	r8,r8[0x0]
8001bdea:	30 ab       	mov	r11,10
8001bdec:	10 9c       	mov	r12,r8
8001bdee:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bdf2:	fe cc 1b 16 	sub	r12,pc,6934
8001bdf6:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001bdfa:	ec f8 00 00 	ld.w	r8,r6[0]
8001bdfe:	70 08       	ld.w	r8,r8[0x0]
8001be00:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001be04:	72 89       	ld.w	r9,r9[0x20]
8001be06:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001be0a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be0e:	70 05       	ld.w	r5,r8[0x0]
8001be10:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be14:	70 48       	ld.w	r8,r8[0x10]
8001be16:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001be1a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be1e:	10 9c       	mov	r12,r8
8001be20:	f0 16 00 0a 	mcall	r6[40]
8001be24:	18 98       	mov	r8,r12
8001be26:	eb 48 0b 20 	st.w	r5[2848],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001be2a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be2e:	70 05       	ld.w	r5,r8[0x0]
8001be30:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be34:	70 38       	ld.w	r8,r8[0xc]
8001be36:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001be3a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be3e:	10 9c       	mov	r12,r8
8001be40:	f0 16 00 0a 	mcall	r6[40]
8001be44:	18 98       	mov	r8,r12
8001be46:	eb 48 0b 24 	st.w	r5[2852],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001be4a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be4e:	70 05       	ld.w	r5,r8[0x0]
8001be50:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be54:	70 28       	ld.w	r8,r8[0x8]
8001be56:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be5a:	e0 6b 50 00 	mov	r11,20480
8001be5e:	ea 1b 47 c3 	orh	r11,0x47c3
8001be62:	10 9c       	mov	r12,r8
8001be64:	f0 16 00 0a 	mcall	r6[40]
8001be68:	18 98       	mov	r8,r12
8001be6a:	eb 48 0b 34 	st.w	r5[2868],r8
			have_raw_velocity = true;
8001be6e:	ec f9 03 c0 	ld.w	r9,r6[960]
8001be72:	30 18       	mov	r8,1
8001be74:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001be76:	ec f8 00 00 	ld.w	r8,r6[0]
8001be7a:	70 05       	ld.w	r5,r8[0x0]
8001be7c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be80:	70 78       	ld.w	r8,r8[0x1c]
8001be82:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be86:	fc 1b 42 c8 	movh	r11,0x42c8
8001be8a:	10 9c       	mov	r12,r8
8001be8c:	f0 16 00 0a 	mcall	r6[40]
8001be90:	18 98       	mov	r8,r12
8001be92:	eb 48 0b 28 	st.w	r5[2856],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001be96:	ec f8 00 00 	ld.w	r8,r6[0]
8001be9a:	70 05       	ld.w	r5,r8[0x0]
8001be9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bea0:	70 68       	ld.w	r8,r8[0x18]
8001bea2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bea6:	fc 1b 42 c8 	movh	r11,0x42c8
8001beaa:	10 9c       	mov	r12,r8
8001beac:	f0 16 00 0a 	mcall	r6[40]
8001beb0:	18 98       	mov	r8,r12
8001beb2:	eb 48 0b 2c 	st.w	r5[2860],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001beb6:	ec f8 00 00 	ld.w	r8,r6[0]
8001beba:	70 05       	ld.w	r5,r8[0x0]
8001bebc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bec0:	70 58       	ld.w	r8,r8[0x14]
8001bec2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bec6:	fc 1b 42 c8 	movh	r11,0x42c8
8001beca:	10 9c       	mov	r12,r8
8001becc:	f0 16 00 0a 	mcall	r6[40]
8001bed0:	18 98       	mov	r8,r12
8001bed2:	eb 48 0b 30 	st.w	r5[2864],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001bed6:	ec f8 00 00 	ld.w	r8,r6[0]
8001beda:	70 05       	ld.w	r5,r8[0x0]
8001bedc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bee0:	70 18       	ld.w	r8,r8[0x4]
8001bee2:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bee6:	fc 1b 42 c8 	movh	r11,0x42c8
8001beea:	10 9c       	mov	r12,r8
8001beec:	f0 16 00 0a 	mcall	r6[40]
8001bef0:	18 98       	mov	r8,r12
8001bef2:	eb 48 0b 40 	st.w	r5[2880],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001bef6:	ec f8 00 00 	ld.w	r8,r6[0]
8001befa:	70 08       	ld.w	r8,r8[0x0]
8001befc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001bf00:	72 09       	ld.w	r9,r9[0x0]
8001bf02:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001bf06:	f1 49 0b 44 	st.w	r8[2884],r9
			new_speed = true;
8001bf0a:	ec f9 02 20 	ld.w	r9,r6[544]
8001bf0e:	30 18       	mov	r8,1
8001bf10:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001bf12:	c5 b8       	rjmp	8001bfc8 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001bf14:	f0 16 01 cb 	mcall	r6[1836]
8001bf18:	18 98       	mov	r8,r12
8001bf1a:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001bf1e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf22:	58 08       	cp.w	r8,0
8001bf24:	c1 60       	breq	8001bf50 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001bf26:	ec f8 01 90 	ld.w	r8,r6[400]
8001bf2a:	11 88       	ld.ub	r8,r8[0x0]
8001bf2c:	58 08       	cp.w	r8,0
8001bf2e:	c1 10       	breq	8001bf50 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001bf30:	fe cc 0a 74 	sub	r12,pc,2676
8001bf34:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001bf38:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf3c:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001bf40:	30 ab       	mov	r11,10
8001bf42:	10 9c       	mov	r12,r8
8001bf44:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bf48:	fe cc 1c 6c 	sub	r12,pc,7276
8001bf4c:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001bf50:	fe cc 0a 78 	sub	r12,pc,2680
8001bf54:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001bf58:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf5c:	11 88       	ld.ub	r8,r8[0x0]
8001bf5e:	30 ab       	mov	r11,10
8001bf60:	10 9c       	mov	r12,r8
8001bf62:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001bf66:	fe cc 1c 8a 	sub	r12,pc,7306
8001bf6a:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001bf6e:	ec f8 01 a4 	ld.w	r8,r6[420]
8001bf72:	11 88       	ld.ub	r8,r8[0x0]
8001bf74:	2f f8       	sub	r8,-1
8001bf76:	5c 58       	castu.b	r8
8001bf78:	ec f9 01 a4 	ld.w	r9,r6[420]
8001bf7c:	b2 88       	st.b	r9[0x0],r8
8001bf7e:	ec f8 01 a4 	ld.w	r8,r6[420]
8001bf82:	11 88       	ld.ub	r8,r8[0x0]
8001bf84:	58 08       	cp.w	r8,0
8001bf86:	c1 81       	brne	8001bfb6 <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001bf88:	fe cc 0a 94 	sub	r12,pc,2708
8001bf8c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001bf90:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf94:	11 88       	ld.ub	r8,r8[0x0]
8001bf96:	31 0b       	mov	r11,16
8001bf98:	10 9c       	mov	r12,r8
8001bf9a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bf9e:	fe cc 1c c2 	sub	r12,pc,7362
8001bfa2:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001bfa6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bfaa:	11 88       	ld.ub	r8,r8[0x0]
8001bfac:	30 0a       	mov	r10,0
8001bfae:	10 9b       	mov	r11,r8
8001bfb0:	30 1c       	mov	r12,1
8001bfb2:	f0 16 00 5e 	mcall	r6[376]
		}
		return false;
8001bfb6:	30 08       	mov	r8,0
8001bfb8:	c1 d8       	rjmp	8001bff2 <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001bfba:	d7 03       	nop
8001bfbc:	c0 68       	rjmp	8001bfc8 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bfbe:	d7 03       	nop
8001bfc0:	c0 48       	rjmp	8001bfc8 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001bfc2:	d7 03       	nop
8001bfc4:	c0 28       	rjmp	8001bfc8 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001bfc6:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001bfc8:	ec f8 02 54 	ld.w	r8,r6[596]
8001bfcc:	11 88       	ld.ub	r8,r8[0x0]
8001bfce:	58 08       	cp.w	r8,0
8001bfd0:	c1 00       	breq	8001bff0 <ubx_process_data+0xae2>
8001bfd2:	ec f8 02 20 	ld.w	r8,r6[544]
8001bfd6:	11 88       	ld.ub	r8,r8[0x0]
8001bfd8:	58 08       	cp.w	r8,0
8001bfda:	c0 b0       	breq	8001bff0 <ubx_process_data+0xae2>
		new_speed = false;
8001bfdc:	ec f9 02 20 	ld.w	r9,r6[544]
8001bfe0:	30 08       	mov	r8,0
8001bfe2:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001bfe4:	ec f9 02 54 	ld.w	r9,r6[596]
8001bfe8:	30 08       	mov	r8,0
8001bfea:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001bfec:	30 18       	mov	r8,1
8001bfee:	c0 28       	rjmp	8001bff2 <ubx_process_data+0xae4>
	}
	return false;
8001bff0:	30 08       	mov	r8,0
}
8001bff2:	10 9c       	mov	r12,r8
8001bff4:	2f 6d       	sub	sp,-40
8001bff6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001bffa:	00 00       	add	r0,r0
8001bffc:	80 01       	ld.sh	r1,r0[0x0]
8001bffe:	b3 9e       	lsr	lr,0x13

8001c000 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001c000:	eb cd 40 80 	pushm	r7,lr
8001c004:	1a 97       	mov	r7,sp
8001c006:	20 4d       	sub	sp,16
8001c008:	ef 4c ff fc 	st.w	r7[-4],r12
8001c00c:	16 98       	mov	r8,r11
8001c00e:	ef 4a ff f4 	st.w	r7[-12],r10
8001c012:	ef 49 ff f0 	st.w	r7[-16],r9
8001c016:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001c01a:	c1 e8       	rjmp	8001c056 <update_checksum+0x56>
		*ck_a += *data;
8001c01c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c020:	11 89       	ld.ub	r9,r8[0x0]
8001c022:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c026:	11 88       	ld.ub	r8,r8[0x0]
8001c028:	f2 08 00 08 	add	r8,r9,r8
8001c02c:	5c 58       	castu.b	r8
8001c02e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c032:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001c034:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c038:	11 89       	ld.ub	r9,r8[0x0]
8001c03a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c03e:	11 88       	ld.ub	r8,r8[0x0]
8001c040:	f2 08 00 08 	add	r8,r9,r8
8001c044:	5c 58       	castu.b	r8
8001c046:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001c04a:	b2 88       	st.b	r9[0x0],r8
		data++;
8001c04c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c050:	2f f8       	sub	r8,-1
8001c052:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001c056:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c05a:	30 08       	mov	r8,0
8001c05c:	f0 09 18 00 	cp.b	r9,r8
8001c060:	5f 18       	srne	r8
8001c062:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c066:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c06a:	20 18       	sub	r8,1
8001c06c:	ef 68 ff f8 	st.b	r7[-8],r8
8001c070:	58 09       	cp.w	r9,0
8001c072:	cd 51       	brne	8001c01c <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001c074:	2f cd       	sub	sp,-16
8001c076:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c07a <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001c07a:	eb cd 40 80 	pushm	r7,lr
8001c07e:	1a 97       	mov	r7,sp
8001c080:	20 1d       	sub	sp,4
8001c082:	18 98       	mov	r8,r12
8001c084:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001c088:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001c08c:	5c 58       	castu.b	r8
}
8001c08e:	10 9c       	mov	r12,r8
8001c090:	2f fd       	sub	sp,-4
8001c092:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c096 <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001c096:	eb cd 40 80 	pushm	r7,lr
8001c09a:	1a 97       	mov	r7,sp
8001c09c:	20 1d       	sub	sp,4
8001c09e:	18 98       	mov	r8,r12
8001c0a0:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001c0a4:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001c0a8:	a9 88       	lsr	r8,0x8
8001c0aa:	5c 88       	casts.h	r8
8001c0ac:	5c 58       	castu.b	r8
}
8001c0ae:	10 9c       	mov	r12,r8
8001c0b0:	2f fd       	sub	sp,-4
8001c0b2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c0b6 <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001c0b6:	eb cd 40 c0 	pushm	r6-r7,lr
8001c0ba:	1a 97       	mov	r7,sp
8001c0bc:	20 5d       	sub	sp,20
8001c0be:	4b 76       	lddpc	r6,8001c198 <ubx_send_header+0xe2>
8001c0c0:	1e 26       	rsub	r6,pc
8001c0c2:	16 99       	mov	r9,r11
8001c0c4:	14 98       	mov	r8,r10
8001c0c6:	18 9a       	mov	r10,r12
8001c0c8:	ef 6a ff f4 	st.b	r7[-12],r10
8001c0cc:	ef 69 ff f0 	st.b	r7[-16],r9
8001c0d0:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001c0d4:	3b 58       	mov	r8,-75
8001c0d6:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001c0da:	36 28       	mov	r8,98
8001c0dc:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001c0e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c0e4:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c0e8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c0ec:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001c0f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c0f4:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001c0f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c0fc:	10 99       	mov	r9,r8
8001c0fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001c102:	70 08       	ld.w	r8,r8[0x0]
8001c104:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c108:	31 0a       	mov	r10,16
8001c10a:	12 9b       	mov	r11,r9
8001c10c:	10 9c       	mov	r12,r8
8001c10e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001c112:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c116:	10 99       	mov	r9,r8
8001c118:	ec f8 00 00 	ld.w	r8,r6[0]
8001c11c:	70 08       	ld.w	r8,r8[0x0]
8001c11e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c122:	31 0a       	mov	r10,16
8001c124:	12 9b       	mov	r11,r9
8001c126:	10 9c       	mov	r12,r8
8001c128:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001c12c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c130:	10 99       	mov	r9,r8
8001c132:	ec f8 00 00 	ld.w	r8,r6[0]
8001c136:	70 08       	ld.w	r8,r8[0x0]
8001c138:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c13c:	30 aa       	mov	r10,10
8001c13e:	12 9b       	mov	r11,r9
8001c140:	10 9c       	mov	r12,r8
8001c142:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001c146:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c14a:	10 99       	mov	r9,r8
8001c14c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c150:	70 08       	ld.w	r8,r8[0x0]
8001c152:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c156:	31 0a       	mov	r10,16
8001c158:	12 9b       	mov	r11,r9
8001c15a:	10 9c       	mov	r12,r8
8001c15c:	f0 16 00 28 	mcall	r6[160]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001c160:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001c164:	5c 58       	castu.b	r8
8001c166:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001c16a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c16e:	70 08       	ld.w	r8,r8[0x0]
8001c170:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c174:	31 0a       	mov	r10,16
8001c176:	12 9b       	mov	r11,r9
8001c178:	10 9c       	mov	r12,r8
8001c17a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001c17e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c182:	70 08       	ld.w	r8,r8[0x0]
8001c184:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c188:	31 0a       	mov	r10,16
8001c18a:	30 0b       	mov	r11,0
8001c18c:	10 9c       	mov	r12,r8
8001c18e:	f0 16 00 28 	mcall	r6[160]
	
}
8001c192:	2f bd       	sub	sp,-20
8001c194:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c198:	80 01       	ld.sh	r1,r0[0x0]
8001c19a:	bf 44       	asr	r4,0x1e

8001c19c <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001c19c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1a0:	1a 97       	mov	r7,sp
8001c1a2:	20 2d       	sub	sp,8
8001c1a4:	49 26       	lddpc	r6,8001c1ec <ubx_send_cksum+0x50>
8001c1a6:	1e 26       	rsub	r6,pc
8001c1a8:	18 99       	mov	r9,r12
8001c1aa:	16 98       	mov	r8,r11
8001c1ac:	ef 69 ff fc 	st.b	r7[-4],r9
8001c1b0:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001c1b4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001c1b8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1bc:	70 08       	ld.w	r8,r8[0x0]
8001c1be:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c1c2:	31 0a       	mov	r10,16
8001c1c4:	12 9b       	mov	r11,r9
8001c1c6:	10 9c       	mov	r12,r8
8001c1c8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001c1cc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c1d0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1d4:	70 08       	ld.w	r8,r8[0x0]
8001c1d6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c1da:	31 0a       	mov	r10,16
8001c1dc:	12 9b       	mov	r11,r9
8001c1de:	10 9c       	mov	r12,r8
8001c1e0:	f0 16 00 28 	mcall	r6[160]
}
8001c1e4:	2f ed       	sub	sp,-8
8001c1e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c1ea:	00 00       	add	r0,r0
8001c1ec:	80 01       	ld.sh	r1,r0[0x0]
8001c1ee:	c0 2a       	rjmp	8001bdf2 <ubx_process_data+0x8e4>

8001c1f0 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001c1f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1f4:	1a 97       	mov	r7,sp
8001c1f6:	20 6d       	sub	sp,24
8001c1f8:	4b 56       	lddpc	r6,8001c2cc <ubx_send_message+0xdc>
8001c1fa:	1e 26       	rsub	r6,pc
8001c1fc:	ef 4a ff ec 	st.w	r7[-20],r10
8001c200:	12 98       	mov	r8,r9
8001c202:	18 99       	mov	r9,r12
8001c204:	ef 69 ff f4 	st.b	r7[-12],r9
8001c208:	16 99       	mov	r9,r11
8001c20a:	ef 69 ff f0 	st.b	r7[-16],r9
8001c20e:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001c212:	30 08       	mov	r8,0
8001c214:	ef 68 ff f9 	st.b	r7[-7],r8
8001c218:	30 08       	mov	r8,0
8001c21a:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001c21e:	3b 58       	mov	r8,-75
8001c220:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001c224:	36 28       	mov	r8,98
8001c226:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001c22a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c22e:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c232:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c236:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001c23a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001c23e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001c242:	ee c9 00 08 	sub	r9,r7,8
8001c246:	ee ca 00 07 	sub	r10,r7,7
8001c24a:	ee c8 00 06 	sub	r8,r7,6
8001c24e:	2f d8       	sub	r8,-3
8001c250:	30 4b       	mov	r11,4
8001c252:	10 9c       	mov	r12,r8
8001c254:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001c258:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001c25c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c260:	ee c9 00 08 	sub	r9,r7,8
8001c264:	ee ca 00 07 	sub	r10,r7,7
8001c268:	10 9c       	mov	r12,r8
8001c26a:	f0 16 00 35 	mcall	r6[212]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001c26e:	ee c9 00 06 	sub	r9,r7,6
8001c272:	ec f8 00 00 	ld.w	r8,r6[0]
8001c276:	70 08       	ld.w	r8,r8[0x0]
8001c278:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c27c:	12 9b       	mov	r11,r9
8001c27e:	10 9c       	mov	r12,r8
8001c280:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001c284:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001c288:	ec f8 00 00 	ld.w	r8,r6[0]
8001c28c:	70 08       	ld.w	r8,r8[0x0]
8001c28e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c292:	12 9b       	mov	r11,r9
8001c294:	10 9c       	mov	r12,r8
8001c296:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001c29a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c29e:	70 08       	ld.w	r8,r8[0x0]
8001c2a0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c2a4:	ee c9 00 07 	sub	r9,r7,7
8001c2a8:	12 9b       	mov	r11,r9
8001c2aa:	10 9c       	mov	r12,r8
8001c2ac:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001c2b0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2b4:	70 08       	ld.w	r8,r8[0x0]
8001c2b6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c2ba:	ee c9 00 08 	sub	r9,r7,8
8001c2be:	12 9b       	mov	r11,r9
8001c2c0:	10 9c       	mov	r12,r8
8001c2c2:	f0 16 00 34 	mcall	r6[208]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c2c6:	2f ad       	sub	sp,-24
8001c2c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2cc:	80 01       	ld.sh	r1,r0[0x0]
8001c2ce:	c0 7e       	rcall	8001bedc <ubx_process_data+0x9ce>

8001c2d0 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001c2d0:	eb cd 40 e0 	pushm	r5-r7,lr
8001c2d4:	1a 97       	mov	r7,sp
8001c2d6:	20 4d       	sub	sp,16
8001c2d8:	4d d6       	lddpc	r6,8001c44c <ubx_send_message_CFG_nav_rate+0x17c>
8001c2da:	1e 26       	rsub	r6,pc
8001c2dc:	ee c5 ff f0 	sub	r5,r7,-16
8001c2e0:	16 99       	mov	r9,r11
8001c2e2:	14 98       	mov	r8,r10
8001c2e4:	18 9a       	mov	r10,r12
8001c2e6:	ef 6a ff f8 	st.b	r7[-8],r10
8001c2ea:	ef 69 ff f4 	st.b	r7[-12],r9
8001c2ee:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001c2f2:	30 08       	mov	r8,0
8001c2f4:	ef 68 ff ff 	st.b	r7[-1],r8
8001c2f8:	30 08       	mov	r8,0
8001c2fa:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c2fe:	ee c9 00 02 	sub	r9,r7,2
8001c302:	ee ca 00 01 	sub	r10,r7,1
8001c306:	ee c8 00 08 	sub	r8,r7,8
8001c30a:	30 1b       	mov	r11,1
8001c30c:	10 9c       	mov	r12,r8
8001c30e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c312:	ee c9 00 02 	sub	r9,r7,2
8001c316:	ee ca 00 01 	sub	r10,r7,1
8001c31a:	ee c8 00 0c 	sub	r8,r7,12
8001c31e:	30 1b       	mov	r11,1
8001c320:	10 9c       	mov	r12,r8
8001c322:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c326:	ee c9 00 02 	sub	r9,r7,2
8001c32a:	ee ca 00 01 	sub	r10,r7,1
8001c32e:	ee c8 00 10 	sub	r8,r7,16
8001c332:	30 1b       	mov	r11,1
8001c334:	10 9c       	mov	r12,r8
8001c336:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c33a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c33e:	10 9b       	mov	r11,r8
8001c340:	0a 98       	mov	r8,r5
8001c342:	ee c9 00 02 	sub	r9,r7,2
8001c346:	ee ca 00 01 	sub	r10,r7,1
8001c34a:	10 9c       	mov	r12,r8
8001c34c:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(msg_class,_msg_id,size);
8001c350:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c354:	10 9a       	mov	r10,r8
8001c356:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c35a:	10 99       	mov	r9,r8
8001c35c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c360:	12 9b       	mov	r11,r9
8001c362:	10 9c       	mov	r12,r8
8001c364:	f0 16 00 c0 	mcall	r6[768]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001c368:	8a 08       	ld.sh	r8,r5[0x0]
8001c36a:	5c 78       	castu.h	r8
8001c36c:	10 9c       	mov	r12,r8
8001c36e:	f0 16 00 ac 	mcall	r6[688]
8001c372:	18 98       	mov	r8,r12
8001c374:	10 99       	mov	r9,r8
8001c376:	ec f8 00 00 	ld.w	r8,r6[0]
8001c37a:	70 08       	ld.w	r8,r8[0x0]
8001c37c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c380:	31 0a       	mov	r10,16
8001c382:	12 9b       	mov	r11,r9
8001c384:	10 9c       	mov	r12,r8
8001c386:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001c38a:	8a 08       	ld.sh	r8,r5[0x0]
8001c38c:	5c 78       	castu.h	r8
8001c38e:	10 9c       	mov	r12,r8
8001c390:	f0 16 00 b3 	mcall	r6[716]
8001c394:	18 98       	mov	r8,r12
8001c396:	10 99       	mov	r9,r8
8001c398:	ec f8 00 00 	ld.w	r8,r6[0]
8001c39c:	70 08       	ld.w	r8,r8[0x0]
8001c39e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3a2:	31 0a       	mov	r10,16
8001c3a4:	12 9b       	mov	r11,r9
8001c3a6:	10 9c       	mov	r12,r8
8001c3a8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001c3ac:	8a 18       	ld.sh	r8,r5[0x2]
8001c3ae:	5c 78       	castu.h	r8
8001c3b0:	10 9c       	mov	r12,r8
8001c3b2:	f0 16 00 ac 	mcall	r6[688]
8001c3b6:	18 98       	mov	r8,r12
8001c3b8:	10 99       	mov	r9,r8
8001c3ba:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3be:	70 08       	ld.w	r8,r8[0x0]
8001c3c0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3c4:	31 0a       	mov	r10,16
8001c3c6:	12 9b       	mov	r11,r9
8001c3c8:	10 9c       	mov	r12,r8
8001c3ca:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001c3ce:	8a 18       	ld.sh	r8,r5[0x2]
8001c3d0:	5c 78       	castu.h	r8
8001c3d2:	10 9c       	mov	r12,r8
8001c3d4:	f0 16 00 b3 	mcall	r6[716]
8001c3d8:	18 98       	mov	r8,r12
8001c3da:	10 99       	mov	r9,r8
8001c3dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3e0:	70 08       	ld.w	r8,r8[0x0]
8001c3e2:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c3e6:	31 0a       	mov	r10,16
8001c3e8:	12 9b       	mov	r11,r9
8001c3ea:	10 9c       	mov	r12,r8
8001c3ec:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001c3f0:	8a 28       	ld.sh	r8,r5[0x4]
8001c3f2:	5c 78       	castu.h	r8
8001c3f4:	10 9c       	mov	r12,r8
8001c3f6:	f0 16 00 ac 	mcall	r6[688]
8001c3fa:	18 98       	mov	r8,r12
8001c3fc:	10 99       	mov	r9,r8
8001c3fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001c402:	70 08       	ld.w	r8,r8[0x0]
8001c404:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c408:	31 0a       	mov	r10,16
8001c40a:	12 9b       	mov	r11,r9
8001c40c:	10 9c       	mov	r12,r8
8001c40e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001c412:	8a 28       	ld.sh	r8,r5[0x4]
8001c414:	5c 78       	castu.h	r8
8001c416:	10 9c       	mov	r12,r8
8001c418:	f0 16 00 b3 	mcall	r6[716]
8001c41c:	18 98       	mov	r8,r12
8001c41e:	10 99       	mov	r9,r8
8001c420:	ec f8 00 00 	ld.w	r8,r6[0]
8001c424:	70 08       	ld.w	r8,r8[0x0]
8001c426:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c42a:	31 0a       	mov	r10,16
8001c42c:	12 9b       	mov	r11,r9
8001c42e:	10 9c       	mov	r12,r8
8001c430:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001c434:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c438:	10 99       	mov	r9,r8
8001c43a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c43e:	12 9b       	mov	r11,r9
8001c440:	10 9c       	mov	r12,r8
8001c442:	f0 16 00 be 	mcall	r6[760]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c446:	2f cd       	sub	sp,-16
8001c448:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c44c:	80 01       	ld.sh	r1,r0[0x0]
8001c44e:	c1 5e       	rcall	8001c078 <update_checksum+0x78>

8001c450 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001c450:	eb cd 40 c0 	pushm	r6-r7,lr
8001c454:	1a 97       	mov	r7,sp
8001c456:	20 5d       	sub	sp,20
8001c458:	4b 46       	lddpc	r6,8001c528 <ubx_send_message_nav_settings+0xd8>
8001c45a:	1e 26       	rsub	r6,pc
8001c45c:	ef 4a ff f0 	st.w	r7[-16],r10
8001c460:	12 98       	mov	r8,r9
8001c462:	18 99       	mov	r9,r12
8001c464:	ef 69 ff f8 	st.b	r7[-8],r9
8001c468:	16 99       	mov	r9,r11
8001c46a:	ef 69 ff f4 	st.b	r7[-12],r9
8001c46e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c472:	30 08       	mov	r8,0
8001c474:	ef 68 ff ff 	st.b	r7[-1],r8
8001c478:	30 08       	mov	r8,0
8001c47a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c47e:	ee c9 00 02 	sub	r9,r7,2
8001c482:	ee ca 00 01 	sub	r10,r7,1
8001c486:	ee c8 00 08 	sub	r8,r7,8
8001c48a:	30 1b       	mov	r11,1
8001c48c:	10 9c       	mov	r12,r8
8001c48e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c492:	ee c9 00 02 	sub	r9,r7,2
8001c496:	ee ca 00 01 	sub	r10,r7,1
8001c49a:	ee c8 00 0c 	sub	r8,r7,12
8001c49e:	30 1b       	mov	r11,1
8001c4a0:	10 9c       	mov	r12,r8
8001c4a2:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c4a6:	ee c9 00 02 	sub	r9,r7,2
8001c4aa:	ee ca 00 01 	sub	r10,r7,1
8001c4ae:	ee c8 00 14 	sub	r8,r7,20
8001c4b2:	30 1b       	mov	r11,1
8001c4b4:	10 9c       	mov	r12,r8
8001c4b6:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001c4ba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4be:	10 9a       	mov	r10,r8
8001c4c0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c4c4:	10 99       	mov	r9,r8
8001c4c6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c4ca:	12 9b       	mov	r11,r9
8001c4cc:	10 9c       	mov	r12,r8
8001c4ce:	f0 16 00 c0 	mcall	r6[768]
	
	if (engine_settings != NULL)
8001c4d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4d6:	58 08       	cp.w	r8,0
8001c4d8:	c1 c0       	breq	8001c510 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001c4da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4de:	10 9b       	mov	r11,r8
8001c4e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4e4:	ee c9 00 02 	sub	r9,r7,2
8001c4e8:	ee ca 00 01 	sub	r10,r7,1
8001c4ec:	10 9c       	mov	r12,r8
8001c4ee:	f0 16 00 35 	mcall	r6[212]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001c4f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4f6:	70 08       	ld.w	r8,r8[0x0]
8001c4f8:	5c 58       	castu.b	r8
8001c4fa:	10 99       	mov	r9,r8
8001c4fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c500:	70 08       	ld.w	r8,r8[0x0]
8001c502:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c506:	30 aa       	mov	r10,10
8001c508:	12 9b       	mov	r11,r9
8001c50a:	10 9c       	mov	r12,r8
8001c50c:	f0 16 00 28 	mcall	r6[160]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001c510:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c514:	10 99       	mov	r9,r8
8001c516:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c51a:	12 9b       	mov	r11,r9
8001c51c:	10 9c       	mov	r12,r8
8001c51e:	f0 16 00 be 	mcall	r6[760]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c522:	2f bd       	sub	sp,-20
8001c524:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c528:	80 01       	ld.sh	r1,r0[0x0]
8001c52a:	c2 de       	rcall	8001c184 <ubx_send_header+0xce>

8001c52c <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001c52c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c530:	1a 97       	mov	r7,sp
8001c532:	20 5d       	sub	sp,20
8001c534:	4c 16       	lddpc	r6,8001c638 <ubx_configure_message_rate+0x10c>
8001c536:	1e 26       	rsub	r6,pc
8001c538:	16 99       	mov	r9,r11
8001c53a:	14 98       	mov	r8,r10
8001c53c:	18 9a       	mov	r10,r12
8001c53e:	ef 6a ff f4 	st.b	r7[-12],r10
8001c542:	ef 69 ff f0 	st.b	r7[-16],r9
8001c546:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c54a:	30 08       	mov	r8,0
8001c54c:	ef 68 ff ff 	st.b	r7[-1],r8
8001c550:	30 08       	mov	r8,0
8001c552:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001c556:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c55a:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001c55e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c562:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001c566:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c56a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001c56e:	30 38       	mov	r8,3
8001c570:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c574:	ee c9 00 02 	sub	r9,r7,2
8001c578:	ee ca 00 01 	sub	r10,r7,1
8001c57c:	ee c8 00 0c 	sub	r8,r7,12
8001c580:	30 1b       	mov	r11,1
8001c582:	10 9c       	mov	r12,r8
8001c584:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c588:	ee c9 00 02 	sub	r9,r7,2
8001c58c:	ee ca 00 01 	sub	r10,r7,1
8001c590:	ee c8 00 10 	sub	r8,r7,16
8001c594:	30 1b       	mov	r11,1
8001c596:	10 9c       	mov	r12,r8
8001c598:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c59c:	ee c9 00 02 	sub	r9,r7,2
8001c5a0:	ee ca 00 01 	sub	r10,r7,1
8001c5a4:	ee c8 00 06 	sub	r8,r7,6
8001c5a8:	30 1b       	mov	r11,1
8001c5aa:	10 9c       	mov	r12,r8
8001c5ac:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c5b0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c5b4:	10 9b       	mov	r11,r8
8001c5b6:	ee c9 00 02 	sub	r9,r7,2
8001c5ba:	ee ca 00 01 	sub	r10,r7,1
8001c5be:	ee c8 00 05 	sub	r8,r7,5
8001c5c2:	10 9c       	mov	r12,r8
8001c5c4:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001c5c8:	30 3a       	mov	r10,3
8001c5ca:	30 1b       	mov	r11,1
8001c5cc:	30 6c       	mov	r12,6
8001c5ce:	f0 16 00 c0 	mcall	r6[768]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001c5d2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c5d6:	10 99       	mov	r9,r8
8001c5d8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5dc:	70 08       	ld.w	r8,r8[0x0]
8001c5de:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c5e2:	31 0a       	mov	r10,16
8001c5e4:	12 9b       	mov	r11,r9
8001c5e6:	10 9c       	mov	r12,r8
8001c5e8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001c5ec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c5f0:	10 99       	mov	r9,r8
8001c5f2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5f6:	70 08       	ld.w	r8,r8[0x0]
8001c5f8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c5fc:	31 0a       	mov	r10,16
8001c5fe:	12 9b       	mov	r11,r9
8001c600:	10 9c       	mov	r12,r8
8001c602:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001c606:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c60a:	10 99       	mov	r9,r8
8001c60c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c610:	70 08       	ld.w	r8,r8[0x0]
8001c612:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c616:	31 0a       	mov	r10,16
8001c618:	12 9b       	mov	r11,r9
8001c61a:	10 9c       	mov	r12,r8
8001c61c:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001c620:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c624:	10 99       	mov	r9,r8
8001c626:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c62a:	12 9b       	mov	r11,r9
8001c62c:	10 9c       	mov	r12,r8
8001c62e:	f0 16 00 be 	mcall	r6[760]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001c632:	2f bd       	sub	sp,-20
8001c634:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c638:	80 01       	ld.sh	r1,r0[0x0]
8001c63a:	c3 ba       	rjmp	8001c2b0 <ubx_send_message+0xc0>
8001c63c:	24 50       	sub	r0,69
8001c63e:	55 42       	stdsp	sp[0x150],r2
8001c640:	58 2c       	cp.w	r12,2
8001c642:	34 31       	mov	r1,67
8001c644:	2c 31       	sub	r1,-61
8001c646:	2c 30       	sub	r0,-61
8001c648:	30 30       	mov	r0,3
8001c64a:	33 2c       	mov	r12,50
8001c64c:	30 30       	mov	r0,3
8001c64e:	30 31       	mov	r1,3
8001c650:	2c 33       	sub	r3,-61
8001c652:	38 34       	mov	r4,-125
8001c654:	30 30       	mov	r0,3
8001c656:	2c 30       	sub	r0,-61
8001c658:	2a 32       	sub	r2,-93
8001c65a:	35 0d       	mov	sp,80
8001c65c:	0a 00       	add	r0,r5

8001c65e <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001c65e:	eb cd 40 c0 	pushm	r6-r7,lr
8001c662:	1a 97       	mov	r7,sp
8001c664:	20 3d       	sub	sp,12
8001c666:	4a 66       	lddpc	r6,8001c6fc <configure_gps+0x9e>
8001c668:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001c66a:	fe c8 00 2e 	sub	r8,pc,46
8001c66e:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001c672:	ec f8 00 00 	ld.w	r8,r6[0]
8001c676:	70 08       	ld.w	r8,r8[0x0]
8001c678:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c67c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001c680:	10 9c       	mov	r12,r8
8001c682:	f0 16 00 34 	mcall	r6[208]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001c686:	e0 68 00 c8 	mov	r8,200
8001c68a:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001c68e:	30 18       	mov	r8,1
8001c690:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001c694:	30 08       	mov	r8,0
8001c696:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001c69a:	20 2d       	sub	sp,8
8001c69c:	1a 98       	mov	r8,sp
8001c69e:	ee c9 00 0a 	sub	r9,r7,10
8001c6a2:	30 6a       	mov	r10,6
8001c6a4:	12 9b       	mov	r11,r9
8001c6a6:	10 9c       	mov	r12,r8
8001c6a8:	f0 16 00 1b 	mcall	r6[108]
8001c6ac:	30 6a       	mov	r10,6
8001c6ae:	30 8b       	mov	r11,8
8001c6b0:	30 6c       	mov	r12,6
8001c6b2:	f0 16 01 99 	mcall	r6[1636]
8001c6b6:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001c6b8:	30 1a       	mov	r10,1
8001c6ba:	30 2b       	mov	r11,2
8001c6bc:	30 1c       	mov	r12,1
8001c6be:	f0 16 00 5e 	mcall	r6[376]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001c6c2:	30 1a       	mov	r10,1
8001c6c4:	30 3b       	mov	r11,3
8001c6c6:	30 1c       	mov	r12,1
8001c6c8:	f0 16 00 5e 	mcall	r6[376]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001c6cc:	30 1a       	mov	r10,1
8001c6ce:	30 6b       	mov	r11,6
8001c6d0:	30 1c       	mov	r12,1
8001c6d2:	f0 16 00 5e 	mcall	r6[376]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001c6d6:	30 1a       	mov	r10,1
8001c6d8:	31 2b       	mov	r11,18
8001c6da:	30 1c       	mov	r12,1
8001c6dc:	f0 16 00 5e 	mcall	r6[376]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001c6e0:	30 1a       	mov	r10,1
8001c6e2:	33 0b       	mov	r11,48
8001c6e4:	30 1c       	mov	r12,1
8001c6e6:	f0 16 00 5e 	mcall	r6[376]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001c6ea:	30 09       	mov	r9,0
8001c6ec:	30 0a       	mov	r10,0
8001c6ee:	32 4b       	mov	r11,36
8001c6f0:	30 6c       	mov	r12,6
8001c6f2:	f0 16 00 fe 	mcall	r6[1016]
}
8001c6f6:	2f dd       	sub	sp,-12
8001c6f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c6fc:	80 01       	ld.sh	r1,r0[0x0]
8001c6fe:	c4 ec       	rcall	8001c79a <gps_update+0x9a>

8001c700 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001c700:	eb cd 40 c0 	pushm	r6-r7,lr
8001c704:	1a 97       	mov	r7,sp
8001c706:	20 2d       	sub	sp,8
8001c708:	fe f6 02 08 	ld.w	r6,pc[520]
8001c70c:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001c70e:	f0 16 01 a0 	mcall	r6[1664]
8001c712:	18 98       	mov	r8,r12
8001c714:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001c718:	f0 16 00 0f 	mcall	r6[60]
8001c71c:	18 98       	mov	r8,r12
8001c71e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001c722:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c726:	ec 18 00 01 	eorl	r8,0x1
8001c72a:	5c 58       	castu.b	r8
8001c72c:	c1 f0       	breq	8001c76a <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001c72e:	ec f8 03 24 	ld.w	r8,r6[804]
8001c732:	70 08       	ld.w	r8,r8[0x0]
8001c734:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c738:	10 19       	sub	r9,r8
8001c73a:	ec f8 04 2c 	ld.w	r8,r6[1068]
8001c73e:	70 08       	ld.w	r8,r8[0x0]
8001c740:	10 39       	cp.w	r9,r8
8001c742:	e0 88 00 e3 	brls	8001c908 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001c746:	ec f8 00 00 	ld.w	r8,r6[0]
8001c74a:	70 09       	ld.w	r9,r8[0x0]
8001c74c:	30 08       	mov	r8,0
8001c74e:	f3 68 0b 54 	st.b	r9[2900],r8
			
			init_gps_ubx(engine_nav_setting);
8001c752:	ec f8 01 e0 	ld.w	r8,r6[480]
8001c756:	70 08       	ld.w	r8,r8[0x0]
8001c758:	10 9c       	mov	r12,r8
8001c75a:	f0 16 01 69 	mcall	r6[1444]
			idleTimer = tnow;
8001c75e:	ec f8 03 24 	ld.w	r8,r6[804]
8001c762:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c766:	91 09       	st.w	r8[0x0],r9
8001c768:	cd 08       	rjmp	8001c908 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001c76a:	ec f8 03 24 	ld.w	r8,r6[804]
8001c76e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c772:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001c774:	ec f8 00 00 	ld.w	r8,r6[0]
8001c778:	70 08       	ld.w	r8,r8[0x0]
8001c77a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c77e:	f1 49 0b 4c 	st.w	r8[2892],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001c782:	ec f8 00 00 	ld.w	r8,r6[0]
8001c786:	70 08       	ld.w	r8,r8[0x0]
8001c788:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c78c:	30 28       	mov	r8,2
8001c78e:	f0 09 18 00 	cp.b	r9,r8
8001c792:	e0 81 00 9d 	brne	8001c8cc <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001c796:	ec f8 00 00 	ld.w	r8,r6[0]
8001c79a:	70 08       	ld.w	r8,r8[0x0]
8001c79c:	f0 fa 0b 38 	ld.w	r10,r8[2872]
8001c7a0:	30 18       	mov	r8,1
8001c7a2:	fc 19 41 a0 	movh	r9,0x41a0
8001c7a6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c7aa:	e0 8c 00 03 	brvs	8001c7b0 <gps_update+0xb0>
8001c7ae:	c0 25       	brlt	8001c7b2 <gps_update+0xb2>
8001c7b0:	30 08       	mov	r8,0
8001c7b2:	5c 58       	castu.b	r8
8001c7b4:	c0 80       	breq	8001c7c4 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001c7b6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7ba:	70 09       	ld.w	r9,r8[0x0]
8001c7bc:	30 18       	mov	r8,1
8001c7be:	f3 68 0b 55 	st.b	r9[2901],r8
8001c7c2:	c0 78       	rjmp	8001c7d0 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001c7c4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7c8:	70 09       	ld.w	r9,r8[0x0]
8001c7ca:	30 08       	mov	r8,0
8001c7cc:	f3 68 0b 55 	st.b	r9[2901],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001c7d0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7d4:	70 08       	ld.w	r8,r8[0x0]
8001c7d6:	f0 fa 0b 3c 	ld.w	r10,r8[2876]
8001c7da:	30 18       	mov	r8,1
8001c7dc:	fc 19 41 a0 	movh	r9,0x41a0
8001c7e0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c7e4:	e0 8c 00 03 	brvs	8001c7ea <gps_update+0xea>
8001c7e8:	c0 25       	brlt	8001c7ec <gps_update+0xec>
8001c7ea:	30 08       	mov	r8,0
8001c7ec:	5c 58       	castu.b	r8
8001c7ee:	c0 80       	breq	8001c7fe <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001c7f0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7f4:	70 09       	ld.w	r9,r8[0x0]
8001c7f6:	30 18       	mov	r8,1
8001c7f8:	f3 68 0b 56 	st.b	r9[2902],r8
8001c7fc:	c0 78       	rjmp	8001c80a <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001c7fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001c802:	70 09       	ld.w	r9,r8[0x0]
8001c804:	30 08       	mov	r8,0
8001c806:	f3 68 0b 56 	st.b	r9[2902],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001c80a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c80e:	70 08       	ld.w	r8,r8[0x0]
8001c810:	f0 fa 0b 40 	ld.w	r10,r8[2880]
8001c814:	30 18       	mov	r8,1
8001c816:	fc 19 40 a0 	movh	r9,0x40a0
8001c81a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c81e:	e0 8c 00 03 	brvs	8001c824 <gps_update+0x124>
8001c822:	c0 25       	brlt	8001c826 <gps_update+0x126>
8001c824:	30 08       	mov	r8,0
8001c826:	5c 58       	castu.b	r8
8001c828:	c0 80       	breq	8001c838 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001c82a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c82e:	70 09       	ld.w	r9,r8[0x0]
8001c830:	30 18       	mov	r8,1
8001c832:	f3 68 0b 57 	st.b	r9[2903],r8
8001c836:	c0 78       	rjmp	8001c844 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001c838:	ec f8 00 00 	ld.w	r8,r6[0]
8001c83c:	70 09       	ld.w	r9,r8[0x0]
8001c83e:	30 08       	mov	r8,0
8001c840:	f3 68 0b 57 	st.b	r9[2903],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001c844:	ec f8 00 00 	ld.w	r8,r6[0]
8001c848:	70 08       	ld.w	r8,r8[0x0]
8001c84a:	f0 fa 0b 44 	ld.w	r10,r8[2884]
8001c84e:	30 18       	mov	r8,1
8001c850:	e0 69 96 80 	mov	r9,38528
8001c854:	ea 19 4a 98 	orh	r9,0x4a98
8001c858:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c85c:	e0 8c 00 03 	brvs	8001c862 <gps_update+0x162>
8001c860:	c0 25       	brlt	8001c864 <gps_update+0x164>
8001c862:	30 08       	mov	r8,0
8001c864:	5c 58       	castu.b	r8
8001c866:	c0 80       	breq	8001c876 <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001c868:	ec f8 00 00 	ld.w	r8,r6[0]
8001c86c:	70 09       	ld.w	r9,r8[0x0]
8001c86e:	30 18       	mov	r8,1
8001c870:	f3 68 0b 58 	st.b	r9[2904],r8
8001c874:	c0 78       	rjmp	8001c882 <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001c876:	ec f8 00 00 	ld.w	r8,r6[0]
8001c87a:	70 09       	ld.w	r9,r8[0x0]
8001c87c:	30 08       	mov	r8,0
8001c87e:	f3 68 0b 58 	st.b	r9[2904],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001c882:	ec f8 00 00 	ld.w	r8,r6[0]
8001c886:	70 09       	ld.w	r9,r8[0x0]
8001c888:	ec f8 00 00 	ld.w	r8,r6[0]
8001c88c:	70 08       	ld.w	r8,r8[0x0]
8001c88e:	f1 3a 0b 55 	ld.ub	r10,r8[2901]
8001c892:	ec f8 00 00 	ld.w	r8,r6[0]
8001c896:	70 08       	ld.w	r8,r8[0x0]
8001c898:	f1 38 0b 56 	ld.ub	r8,r8[2902]
8001c89c:	f5 e8 00 08 	and	r8,r10,r8
8001c8a0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c8a4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8a8:	70 08       	ld.w	r8,r8[0x0]
8001c8aa:	f1 38 0b 57 	ld.ub	r8,r8[2903]
8001c8ae:	f5 e8 00 08 	and	r8,r10,r8
8001c8b2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c8b6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8ba:	70 08       	ld.w	r8,r8[0x0]
8001c8bc:	f1 38 0b 58 	ld.ub	r8,r8[2904]
8001c8c0:	f5 e8 00 08 	and	r8,r10,r8
8001c8c4:	5c 58       	castu.b	r8
8001c8c6:	f3 68 0b 59 	st.b	r9[2905],r8
8001c8ca:	c1 f8       	rjmp	8001c908 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001c8cc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8d0:	70 09       	ld.w	r9,r8[0x0]
8001c8d2:	30 08       	mov	r8,0
8001c8d4:	f3 68 0b 55 	st.b	r9[2901],r8
			centralData->GPS_data.altitudeStatus = 0;
8001c8d8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8dc:	70 09       	ld.w	r9,r8[0x0]
8001c8de:	30 08       	mov	r8,0
8001c8e0:	f3 68 0b 56 	st.b	r9[2902],r8
			centralData->GPS_data.speedStatus = 0;
8001c8e4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8e8:	70 09       	ld.w	r9,r8[0x0]
8001c8ea:	30 08       	mov	r8,0
8001c8ec:	f3 68 0b 57 	st.b	r9[2903],r8
			centralData->GPS_data.courseStatus = 0;
8001c8f0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8f4:	70 09       	ld.w	r9,r8[0x0]
8001c8f6:	30 08       	mov	r8,0
8001c8f8:	f3 68 0b 58 	st.b	r9[2904],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001c8fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c900:	70 09       	ld.w	r9,r8[0x0]
8001c902:	30 08       	mov	r8,0
8001c904:	f3 68 0b 59 	st.b	r9[2905],r8
		}
	}
}
8001c908:	2f ed       	sub	sp,-8
8001c90a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c90e:	00 00       	add	r0,r0
8001c910:	80 01       	ld.sh	r1,r0[0x0]
8001c912:	c5 90       	breq	8001c9c4 <ubx_GetSolution+0x8>

8001c914 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001c914:	eb cd 40 c0 	pushm	r6-r7,lr
8001c918:	1a 97       	mov	r7,sp
8001c91a:	20 1d       	sub	sp,4
8001c91c:	49 36       	lddpc	r6,8001c968 <newValidGpsMsg+0x54>
8001c91e:	1e 26       	rsub	r6,pc
8001c920:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001c924:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c928:	70 09       	ld.w	r9,r8[0x0]
8001c92a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c92e:	70 08       	ld.w	r8,r8[0x0]
8001c930:	f0 f8 0b 4c 	ld.w	r8,r8[2892]
8001c934:	10 39       	cp.w	r9,r8
8001c936:	c1 40       	breq	8001c95e <newValidGpsMsg+0x4a>
8001c938:	ec f8 00 00 	ld.w	r8,r6[0]
8001c93c:	70 08       	ld.w	r8,r8[0x0]
8001c93e:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001c942:	30 28       	mov	r8,2
8001c944:	f0 09 18 00 	cp.b	r9,r8
8001c948:	c0 b1       	brne	8001c95e <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001c94a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c94e:	70 08       	ld.w	r8,r8[0x0]
8001c950:	f0 f9 0b 4c 	ld.w	r9,r8[2892]
8001c954:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c958:	91 09       	st.w	r8[0x0],r9
		return true;
8001c95a:	30 18       	mov	r8,1
8001c95c:	c0 28       	rjmp	8001c960 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001c95e:	30 08       	mov	r8,0
	}
	
	
}
8001c960:	10 9c       	mov	r12,r8
8001c962:	2f fd       	sub	sp,-4
8001c964:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c968:	80 01       	ld.sh	r1,r0[0x0]
8001c96a:	c7 a2       	brcc	8001ca5e <ubx_GetMsgRate+0x2>

8001c96c <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001c96c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c970:	1a 97       	mov	r7,sp
8001c972:	48 86       	lddpc	r6,8001c990 <ubx_GetPosllh+0x24>
8001c974:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001c976:	ec f8 04 88 	ld.w	r8,r6[1160]
8001c97a:	90 08       	ld.sh	r8,r8[0x0]
8001c97c:	58 08       	cp.w	r8,0
8001c97e:	c0 50       	breq	8001c988 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001c980:	ec f8 03 80 	ld.w	r8,r6[896]
8001c984:	70 08       	ld.w	r8,r8[0x0]
8001c986:	c0 28       	rjmp	8001c98a <ubx_GetPosllh+0x1e>
	else
	return 0;
8001c988:	30 08       	mov	r8,0
}
8001c98a:	10 9c       	mov	r12,r8
8001c98c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c990:	80 01       	ld.sh	r1,r0[0x0]
8001c992:	c7 f8       	rjmp	8001ca90 <ubx_GetMonRXR+0xc>

8001c994 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001c994:	eb cd 40 c0 	pushm	r6-r7,lr
8001c998:	1a 97       	mov	r7,sp
8001c99a:	48 86       	lddpc	r6,8001c9b8 <ubx_GetStatus+0x24>
8001c99c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001c99e:	ec f8 04 48 	ld.w	r8,r6[1096]
8001c9a2:	90 08       	ld.sh	r8,r8[0x0]
8001c9a4:	58 08       	cp.w	r8,0
8001c9a6:	c0 50       	breq	8001c9b0 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001c9a8:	ec f8 03 84 	ld.w	r8,r6[900]
8001c9ac:	70 08       	ld.w	r8,r8[0x0]
8001c9ae:	c0 28       	rjmp	8001c9b2 <ubx_GetStatus+0x1e>
	else
	return 0;
8001c9b0:	30 08       	mov	r8,0
}
8001c9b2:	10 9c       	mov	r12,r8
8001c9b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9b8:	80 01       	ld.sh	r1,r0[0x0]
8001c9ba:	c8 20       	breq	8001c8be <gps_update+0x1be>

8001c9bc <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001c9bc:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9c0:	1a 97       	mov	r7,sp
8001c9c2:	48 86       	lddpc	r6,8001c9e0 <ubx_GetSolution+0x24>
8001c9c4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001c9c6:	ec f8 04 a0 	ld.w	r8,r6[1184]
8001c9ca:	90 08       	ld.sh	r8,r8[0x0]
8001c9cc:	58 08       	cp.w	r8,0
8001c9ce:	c0 50       	breq	8001c9d8 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001c9d0:	ec f8 03 ec 	ld.w	r8,r6[1004]
8001c9d4:	70 08       	ld.w	r8,r8[0x0]
8001c9d6:	c0 28       	rjmp	8001c9da <ubx_GetSolution+0x1e>
	else
	return 0;
8001c9d8:	30 08       	mov	r8,0
}
8001c9da:	10 9c       	mov	r12,r8
8001c9dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9e0:	80 01       	ld.sh	r1,r0[0x0]
8001c9e2:	c8 48       	rjmp	8001caea <ubx_GetTimVRFY+0x16>

8001c9e4 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001c9e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9e8:	1a 97       	mov	r7,sp
8001c9ea:	48 86       	lddpc	r6,8001ca08 <ubx_GetVelned+0x24>
8001c9ec:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001c9ee:	ec f8 04 ac 	ld.w	r8,r6[1196]
8001c9f2:	90 08       	ld.sh	r8,r8[0x0]
8001c9f4:	58 08       	cp.w	r8,0
8001c9f6:	c0 50       	breq	8001ca00 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001c9f8:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001c9fc:	70 08       	ld.w	r8,r8[0x0]
8001c9fe:	c0 28       	rjmp	8001ca02 <ubx_GetVelned+0x1e>
	else
	return 0;
8001ca00:	30 08       	mov	r8,0
}
8001ca02:	10 9c       	mov	r12,r8
8001ca04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca08:	80 01       	ld.sh	r1,r0[0x0]
8001ca0a:	c8 70       	breq	8001c918 <newValidGpsMsg+0x4>

8001ca0c <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001ca0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca10:	1a 97       	mov	r7,sp
8001ca12:	48 86       	lddpc	r6,8001ca30 <ubx_GetSVInfo+0x24>
8001ca14:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001ca16:	ec f8 03 b4 	ld.w	r8,r6[948]
8001ca1a:	90 08       	ld.sh	r8,r8[0x0]
8001ca1c:	58 08       	cp.w	r8,0
8001ca1e:	c0 50       	breq	8001ca28 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001ca20:	ec f8 04 80 	ld.w	r8,r6[1152]
8001ca24:	70 08       	ld.w	r8,r8[0x0]
8001ca26:	c0 28       	rjmp	8001ca2a <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001ca28:	30 08       	mov	r8,0
}
8001ca2a:	10 9c       	mov	r12,r8
8001ca2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca30:	80 01       	ld.sh	r1,r0[0x0]
8001ca32:	c8 98       	rjmp	8001cb44 <ToRad+0x48>

8001ca34 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001ca34:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca38:	1a 97       	mov	r7,sp
8001ca3a:	48 86       	lddpc	r6,8001ca58 <ubx_GetNavSettings+0x24>
8001ca3c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001ca3e:	ec f8 04 64 	ld.w	r8,r6[1124]
8001ca42:	90 08       	ld.sh	r8,r8[0x0]
8001ca44:	58 08       	cp.w	r8,0
8001ca46:	c0 50       	breq	8001ca50 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001ca48:	ec f8 04 94 	ld.w	r8,r6[1172]
8001ca4c:	70 08       	ld.w	r8,r8[0x0]
8001ca4e:	c0 28       	rjmp	8001ca52 <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001ca50:	30 08       	mov	r8,0
}
8001ca52:	10 9c       	mov	r12,r8
8001ca54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca58:	80 01       	ld.sh	r1,r0[0x0]
8001ca5a:	c8 c0       	breq	8001c972 <ubx_GetPosllh+0x6>

8001ca5c <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001ca5c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca60:	1a 97       	mov	r7,sp
8001ca62:	48 86       	lddpc	r6,8001ca80 <ubx_GetMsgRate+0x24>
8001ca64:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001ca66:	ec f8 04 c4 	ld.w	r8,r6[1220]
8001ca6a:	90 08       	ld.sh	r8,r8[0x0]
8001ca6c:	58 08       	cp.w	r8,0
8001ca6e:	c0 50       	breq	8001ca78 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001ca70:	ec f8 03 fc 	ld.w	r8,r6[1020]
8001ca74:	70 08       	ld.w	r8,r8[0x0]
8001ca76:	c0 28       	rjmp	8001ca7a <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001ca78:	30 08       	mov	r8,0
}
8001ca7a:	10 9c       	mov	r12,r8
8001ca7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca80:	80 01       	ld.sh	r1,r0[0x0]
8001ca82:	c8 e8       	rjmp	8001cb9e <init_imu+0x46>

8001ca84 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001ca84:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca88:	1a 97       	mov	r7,sp
8001ca8a:	48 86       	lddpc	r6,8001caa8 <ubx_GetMonRXR+0x24>
8001ca8c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001ca8e:	ec f8 04 a8 	ld.w	r8,r6[1192]
8001ca92:	90 08       	ld.sh	r8,r8[0x0]
8001ca94:	58 08       	cp.w	r8,0
8001ca96:	c0 50       	breq	8001caa0 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001ca98:	ec f8 03 e4 	ld.w	r8,r6[996]
8001ca9c:	70 08       	ld.w	r8,r8[0x0]
8001ca9e:	c0 28       	rjmp	8001caa2 <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001caa0:	30 08       	mov	r8,0
}
8001caa2:	10 9c       	mov	r12,r8
8001caa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001caa8:	80 01       	ld.sh	r1,r0[0x0]
8001caaa:	c9 10       	breq	8001c9cc <ubx_GetSolution+0x10>

8001caac <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001caac:	eb cd 40 c0 	pushm	r6-r7,lr
8001cab0:	1a 97       	mov	r7,sp
8001cab2:	48 86       	lddpc	r6,8001cad0 <ubx_GetTimTP+0x24>
8001cab4:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001cab6:	ec f8 04 68 	ld.w	r8,r6[1128]
8001caba:	90 08       	ld.sh	r8,r8[0x0]
8001cabc:	58 08       	cp.w	r8,0
8001cabe:	c0 50       	breq	8001cac8 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001cac0:	ec f8 04 24 	ld.w	r8,r6[1060]
8001cac4:	70 08       	ld.w	r8,r8[0x0]
8001cac6:	c0 28       	rjmp	8001caca <ubx_GetTimTP+0x1e>
	else
	return 0;
8001cac8:	30 08       	mov	r8,0
}
8001caca:	10 9c       	mov	r12,r8
8001cacc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cad0:	80 01       	ld.sh	r1,r0[0x0]
8001cad2:	c9 38       	rjmp	8001cbf8 <init_imu+0xa0>

8001cad4 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001cad4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cad8:	1a 97       	mov	r7,sp
8001cada:	48 86       	lddpc	r6,8001caf8 <ubx_GetTimVRFY+0x24>
8001cadc:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001cade:	ec f8 04 70 	ld.w	r8,r6[1136]
8001cae2:	90 08       	ld.sh	r8,r8[0x0]
8001cae4:	58 08       	cp.w	r8,0
8001cae6:	c0 50       	breq	8001caf0 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001cae8:	ec f8 04 3c 	ld.w	r8,r6[1084]
8001caec:	70 08       	ld.w	r8,r8[0x0]
8001caee:	c0 28       	rjmp	8001caf2 <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001caf0:	30 08       	mov	r8,0
}
8001caf2:	10 9c       	mov	r12,r8
8001caf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001caf8:	80 01       	ld.sh	r1,r0[0x0]
8001cafa:	c9 60       	breq	8001ca26 <ubx_GetSVInfo+0x1a>

8001cafc <ToRad>:

float ToRad(float numdeg)
{
8001cafc:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb00:	1a 97       	mov	r7,sp
8001cb02:	20 1d       	sub	sp,4
8001cb04:	49 46       	lddpc	r6,8001cb54 <ToRad+0x58>
8001cb06:	1e 26       	rsub	r6,pc
8001cb08:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001cb0c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001cb10:	f0 16 00 02 	mcall	r6[8]
8001cb14:	e0 68 2d 18 	mov	r8,11544
8001cb18:	ea 18 54 44 	orh	r8,0x5444
8001cb1c:	e0 69 21 fb 	mov	r9,8699
8001cb20:	ea 19 40 09 	orh	r9,0x4009
8001cb24:	f0 16 00 03 	mcall	r6[12]
8001cb28:	14 98       	mov	r8,r10
8001cb2a:	16 99       	mov	r9,r11
8001cb2c:	10 9a       	mov	r10,r8
8001cb2e:	12 9b       	mov	r11,r9
8001cb30:	30 08       	mov	r8,0
8001cb32:	e0 69 80 00 	mov	r9,32768
8001cb36:	ea 19 40 66 	orh	r9,0x4066
8001cb3a:	f0 16 00 0c 	mcall	r6[48]
8001cb3e:	14 98       	mov	r8,r10
8001cb40:	16 99       	mov	r9,r11
8001cb42:	10 9a       	mov	r10,r8
8001cb44:	12 9b       	mov	r11,r9
8001cb46:	f0 16 00 08 	mcall	r6[32]
8001cb4a:	18 98       	mov	r8,r12
8001cb4c:	10 9c       	mov	r12,r8
8001cb4e:	2f fd       	sub	sp,-4
8001cb50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb54:	80 01       	ld.sh	r1,r0[0x0]
8001cb56:	c9 8a       	rjmp	8001c886 <gps_update+0x186>

8001cb58 <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001cb58:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb5c:	1a 97       	mov	r7,sp
8001cb5e:	20 1d       	sub	sp,4
8001cb60:	4d 36       	lddpc	r6,8001ccac <init_imu+0x154>
8001cb62:	1e 26       	rsub	r6,pc
8001cb64:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001cb68:	f0 16 02 18 	mcall	r6[2144]
	init_adxl345_slow();
8001cb6c:	f0 16 01 74 	mcall	r6[1488]
	//init_lsm330();
	
	init_hmc5883_slow();
8001cb70:	f0 16 01 f0 	mcall	r6[1984]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001cb74:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb78:	e0 69 e0 00 	mov	r9,57344
8001cb7c:	ea 19 46 44 	orh	r9,0x4644
8001cb80:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001cb84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb88:	e0 69 e0 00 	mov	r9,57344
8001cb8c:	ea 19 c6 44 	orh	r9,0xc644
8001cb90:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001cb94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb98:	e0 69 e0 00 	mov	r9,57344
8001cb9c:	ea 19 46 44 	orh	r9,0x4644
8001cba0:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001cba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cba8:	e0 69 75 6a 	mov	r9,30058
8001cbac:	ea 19 43 81 	orh	r9,0x4381
8001cbb0:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001cbb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbb8:	e0 69 7e 1e 	mov	r9,32286
8001cbbc:	ea 19 43 81 	orh	r9,0x4381
8001cbc0:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001cbc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbc8:	e0 69 0a 9c 	mov	r9,2716
8001cbcc:	ea 19 43 81 	orh	r9,0x4381
8001cbd0:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001cbd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbd8:	e0 69 91 bc 	mov	r9,37308
8001cbdc:	ea 19 44 04 	orh	r9,0x4404
8001cbe0:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001cbe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbe8:	e0 69 52 c7 	mov	r9,21191
8001cbec:	ea 19 44 03 	orh	r9,0x4403
8001cbf0:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001cbf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbf8:	e0 69 39 4b 	mov	r9,14667
8001cbfc:	ea 19 43 f9 	orh	r9,0x43f9
8001cc00:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001cc04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc08:	30 09       	mov	r9,0
8001cc0a:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001cc0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc12:	30 09       	mov	r9,0
8001cc14:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001cc18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc1c:	30 09       	mov	r9,0
8001cc1e:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001cc22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc26:	fc 19 41 90 	movh	r9,0x4190
8001cc2a:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001cc2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc32:	fc 19 41 10 	movh	r9,0x4110
8001cc36:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001cc3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc3e:	fc 19 c1 80 	movh	r9,0xc180
8001cc42:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001cc46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc4a:	e0 69 c2 19 	mov	r9,49689
8001cc4e:	ea 19 43 03 	orh	r9,0x4303
8001cc52:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001cc56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc5a:	e0 69 09 d5 	mov	r9,2517
8001cc5e:	ea 19 c1 d1 	orh	r9,0xc1d1
8001cc62:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001cc66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc6a:	e0 69 a8 8d 	mov	r9,43149
8001cc6e:	ea 19 42 74 	orh	r9,0x4274
8001cc72:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001cc76:	ec f9 02 f4 	ld.w	r9,r6[756]
8001cc7a:	30 08       	mov	r8,0
8001cc7c:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001cc7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc82:	f0 ca ff 10 	sub	r10,r8,-240
8001cc86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc8a:	f0 c9 fe ec 	sub	r9,r8,-276
8001cc8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc92:	12 9b       	mov	r11,r9
8001cc94:	10 9c       	mov	r12,r8
8001cc96:	f0 16 01 ea 	mcall	r6[1960]
	imu1->attitude.calibration_level=OFF;
8001cc9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc9e:	30 08       	mov	r8,0
8001cca0:	f3 68 00 b8 	st.b	r9[184],r8
}
8001cca4:	2f fd       	sub	sp,-4
8001cca6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ccaa:	00 00       	add	r0,r0
8001ccac:	80 01       	ld.sh	r1,r0[0x0]
8001ccae:	c9 e6       	brmi	8001cbea <init_imu+0x92>

8001ccb0 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001ccb0:	eb cd 40 c0 	pushm	r6-r7,lr
8001ccb4:	1a 97       	mov	r7,sp
8001ccb6:	20 5d       	sub	sp,20
8001ccb8:	4b 66       	lddpc	r6,8001cd90 <imu_get_raw_data+0xe0>
8001ccba:	1e 26       	rsub	r6,pc
8001ccbc:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001ccc0:	30 08       	mov	r8,0
8001ccc2:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001ccc6:	f0 16 01 d6 	mcall	r6[1880]
8001ccca:	18 98       	mov	r8,r12
8001cccc:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001ccd0:	f0 16 01 c2 	mcall	r6[1800]
8001ccd4:	18 98       	mov	r8,r12
8001ccd6:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001ccda:	f0 16 01 3c 	mcall	r6[1264]
8001ccde:	18 98       	mov	r8,r12
8001cce0:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001cce4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cce8:	90 28       	ld.sh	r8,r8[0x4]
8001ccea:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ccee:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ccf2:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001ccf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ccfa:	90 18       	ld.sh	r8,r8[0x2]
8001ccfc:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd00:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd04:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001cd08:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cd0c:	90 38       	ld.sh	r8,r8[0x6]
8001cd0e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd12:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd16:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001cd1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd1e:	90 38       	ld.sh	r8,r8[0x6]
8001cd20:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd24:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd28:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001cd2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd30:	90 48       	ld.sh	r8,r8[0x8]
8001cd32:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd36:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd3a:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001cd3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd42:	90 58       	ld.sh	r8,r8[0xa]
8001cd44:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd48:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd4c:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001cd50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd54:	90 58       	ld.sh	r8,r8[0xa]
8001cd56:	5c 38       	neg	r8
8001cd58:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd60:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001cd64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd68:	90 38       	ld.sh	r8,r8[0x6]
8001cd6a:	5c 38       	neg	r8
8001cd6c:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd70:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd74:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001cd78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd7c:	90 48       	ld.sh	r8,r8[0x8]
8001cd7e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd82:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd86:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001cd8a:	2f bd       	sub	sp,-20
8001cd8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cd90:	80 01       	ld.sh	r1,r0[0x0]
8001cd92:	cb 3e       	rcall	8001caf8 <ubx_GetTimVRFY+0x24>

8001cd94 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001cd94:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001cd98:	1a 97       	mov	r7,sp
8001cd9a:	20 3d       	sub	sp,12
8001cd9c:	4e 86       	lddpc	r6,8001cf3c <calibrate_Gyros+0x1a8>
8001cd9e:	1e 26       	rsub	r6,pc
8001cda0:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001cda4:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cda8:	f0 16 00 97 	mcall	r6[604]
	for (j=0; j<3; j++) {
8001cdac:	30 08       	mov	r8,0
8001cdae:	ef 48 ff fc 	st.w	r7[-4],r8
8001cdb2:	c1 48       	rjmp	8001cdda <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001cdb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cdb8:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cdbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cdc0:	2c da       	sub	r10,-51
8001cdc2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001cdc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cdca:	2c 49       	sub	r9,-60
8001cdcc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001cdd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdd4:	2f f8       	sub	r8,-1
8001cdd6:	ef 48 ff fc 	st.w	r7[-4],r8
8001cdda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdde:	58 28       	cp.w	r8,2
8001cde0:	fe 9a ff ea 	brle	8001cdb4 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cde4:	30 08       	mov	r8,0
8001cde6:	ef 48 ff f8 	st.w	r7[-8],r8
8001cdea:	c9 f8       	rjmp	8001cf28 <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001cdec:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cdf0:	f0 16 00 97 	mcall	r6[604]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cdf4:	30 08       	mov	r8,0
8001cdf6:	ef 48 ff fc 	st.w	r7[-4],r8
8001cdfa:	c8 a8       	rjmp	8001cf0e <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001cdfc:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001ce00:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce04:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce08:	2c 49       	sub	r9,-60
8001ce0a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ce0e:	10 9c       	mov	r12,r8
8001ce10:	f0 16 00 02 	mcall	r6[8]
8001ce14:	e0 68 cc cd 	mov	r8,52429
8001ce18:	ea 18 cc cc 	orh	r8,0xcccc
8001ce1c:	e0 69 cc cc 	mov	r9,52428
8001ce20:	ea 19 3f ec 	orh	r9,0x3fec
8001ce24:	f0 16 00 03 	mcall	r6[12]
8001ce28:	14 98       	mov	r8,r10
8001ce2a:	16 99       	mov	r9,r11
8001ce2c:	10 92       	mov	r2,r8
8001ce2e:	12 93       	mov	r3,r9
8001ce30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce34:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce38:	2c d9       	sub	r9,-51
8001ce3a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ce3e:	10 9c       	mov	r12,r8
8001ce40:	f0 16 00 02 	mcall	r6[8]
8001ce44:	e0 68 99 9a 	mov	r8,39322
8001ce48:	ea 18 99 99 	orh	r8,0x9999
8001ce4c:	e0 69 99 99 	mov	r9,39321
8001ce50:	ea 19 3f b9 	orh	r9,0x3fb9
8001ce54:	f0 16 00 03 	mcall	r6[12]
8001ce58:	14 98       	mov	r8,r10
8001ce5a:	16 99       	mov	r9,r11
8001ce5c:	04 9a       	mov	r10,r2
8001ce5e:	06 9b       	mov	r11,r3
8001ce60:	f0 16 00 05 	mcall	r6[20]
8001ce64:	14 98       	mov	r8,r10
8001ce66:	16 99       	mov	r9,r11
8001ce68:	10 9a       	mov	r10,r8
8001ce6a:	12 9b       	mov	r11,r9
8001ce6c:	f0 16 00 08 	mcall	r6[32]
8001ce70:	18 9a       	mov	r10,r12
8001ce72:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce76:	ea c9 ff c4 	sub	r9,r5,-60
8001ce7a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001ce7e:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001ce82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce86:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce8a:	2d 59       	sub	r9,-43
8001ce8c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ce90:	10 9c       	mov	r12,r8
8001ce92:	f0 16 00 02 	mcall	r6[8]
8001ce96:	e0 68 cc cd 	mov	r8,52429
8001ce9a:	ea 18 cc cc 	orh	r8,0xcccc
8001ce9e:	e0 69 cc cc 	mov	r9,52428
8001cea2:	ea 19 3f ec 	orh	r9,0x3fec
8001cea6:	f0 16 00 03 	mcall	r6[12]
8001ceaa:	14 98       	mov	r8,r10
8001ceac:	16 99       	mov	r9,r11
8001ceae:	10 92       	mov	r2,r8
8001ceb0:	12 93       	mov	r3,r9
8001ceb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ceb6:	f0 c9 ff fa 	sub	r9,r8,-6
8001ceba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cebe:	2c d9       	sub	r9,-51
8001cec0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cec4:	10 9c       	mov	r12,r8
8001cec6:	f0 16 00 02 	mcall	r6[8]
8001ceca:	e0 68 99 9a 	mov	r8,39322
8001cece:	ea 18 99 99 	orh	r8,0x9999
8001ced2:	e0 69 99 99 	mov	r9,39321
8001ced6:	ea 19 3f b9 	orh	r9,0x3fb9
8001ceda:	f0 16 00 03 	mcall	r6[12]
8001cede:	14 98       	mov	r8,r10
8001cee0:	16 99       	mov	r9,r11
8001cee2:	04 9a       	mov	r10,r2
8001cee4:	06 9b       	mov	r11,r3
8001cee6:	f0 16 00 05 	mcall	r6[20]
8001ceea:	14 98       	mov	r8,r10
8001ceec:	16 99       	mov	r9,r11
8001ceee:	10 9a       	mov	r10,r8
8001cef0:	12 9b       	mov	r11,r9
8001cef2:	f0 16 00 08 	mcall	r6[32]
8001cef6:	18 9a       	mov	r10,r12
8001cef8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cefc:	ea c9 ff d5 	sub	r9,r5,-43
8001cf00:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cf04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf08:	2f f8       	sub	r8,-1
8001cf0a:	ef 48 ff fc 	st.w	r7[-4],r8
8001cf0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cf12:	58 28       	cp.w	r8,2
8001cf14:	fe 9a ff 74 	brle	8001cdfc <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001cf18:	30 4c       	mov	r12,4
8001cf1a:	f0 16 01 05 	mcall	r6[1044]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cf1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf22:	2f f8       	sub	r8,-1
8001cf24:	ef 48 ff f8 	st.w	r7[-8],r8
8001cf28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf2c:	e0 48 00 63 	cp.w	r8,99
8001cf30:	fe 9a ff 5e 	brle	8001cdec <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001cf34:	2f dd       	sub	sp,-12
8001cf36:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001cf3a:	00 00       	add	r0,r0
8001cf3c:	80 01       	ld.sh	r1,r0[0x0]
8001cf3e:	cc 22       	brcc	8001cec2 <calibrate_Gyros+0x12e>

8001cf40 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001cf40:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf44:	1a 97       	mov	r7,sp
8001cf46:	20 5d       	sub	sp,20
8001cf48:	4b 46       	lddpc	r6,8001d018 <imu_update+0xd8>
8001cf4a:	1e 26       	rsub	r6,pc
8001cf4c:	ef 4c ff f8 	st.w	r7[-8],r12
8001cf50:	ef 4b ff f4 	st.w	r7[-12],r11
8001cf54:	ef 4a ff f0 	st.w	r7[-16],r10
8001cf58:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001cf5c:	f0 16 00 2d 	mcall	r6[180]
8001cf60:	18 98       	mov	r8,r12
8001cf62:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001cf66:	ec f8 02 f4 	ld.w	r8,r6[756]
8001cf6a:	11 88       	ld.ub	r8,r8[0x0]
8001cf6c:	ec 18 00 01 	eorl	r8,0x1
8001cf70:	5c 58       	castu.b	r8
8001cf72:	c0 c0       	breq	8001cf8a <imu_update+0x4a>
	{
		imu1->last_update = t;
8001cf74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf7c:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001cf80:	ec f9 02 f4 	ld.w	r9,r6[756]
8001cf84:	30 18       	mov	r8,1
8001cf86:	b2 88       	st.b	r9[0x0],r8
8001cf88:	c4 48       	rjmp	8001d010 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001cf8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf8e:	f0 f8 01 38 	ld.w	r8,r8[312]
8001cf92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf96:	f2 08 01 08 	sub	r8,r9,r8
8001cf9a:	10 9c       	mov	r12,r8
8001cf9c:	f0 16 00 bb 	mcall	r6[748]
8001cfa0:	18 99       	mov	r9,r12
8001cfa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfa6:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001cfaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfae:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cfb2:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001cfb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfba:	f0 fa 01 40 	ld.w	r10,r8[320]
8001cfbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfc2:	f0 cb ff 34 	sub	r11,r8,-204
8001cfc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfca:	30 09       	mov	r9,0
8001cfcc:	10 9c       	mov	r12,r8
8001cfce:	f0 16 01 63 	mcall	r6[1420]
		if (imu1->attitude.calibration_level==OFF) {
8001cfd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfd6:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001cfda:	58 08       	cp.w	r8,0
8001cfdc:	c1 a1       	brne	8001d010 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001cfde:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfe2:	f0 f9 01 40 	ld.w	r9,r8[320]
8001cfe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfea:	12 9a       	mov	r10,r9
8001cfec:	10 9b       	mov	r11,r8
8001cfee:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cff2:	f0 16 02 07 	mcall	r6[2076]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001cff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cffa:	f0 f8 01 40 	ld.w	r8,r8[320]
8001cffe:	10 99       	mov	r9,r8
8001d000:	ee fa ff ec 	ld.w	r10,r7[-20]
8001d004:	ee fb ff f0 	ld.w	r11,r7[-16]
8001d008:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d00c:	f0 16 01 e6 	mcall	r6[1944]
		}
	}
}
8001d010:	2f bd       	sub	sp,-20
8001d012:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d016:	00 00       	add	r0,r0
8001d018:	80 01       	ld.sh	r1,r0[0x0]
8001d01a:	cd ce       	rcall	8001cdd2 <calibrate_Gyros+0x3e>

8001d01c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001d01c:	eb cd 40 80 	pushm	r7,lr
8001d020:	1a 97       	mov	r7,sp
8001d022:	20 3d       	sub	sp,12
8001d024:	ef 4c ff f8 	st.w	r7[-8],r12
8001d028:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001d02c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d030:	70 09       	ld.w	r9,r8[0x0]
8001d032:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d036:	70 08       	ld.w	r8,r8[0x0]
8001d038:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d03c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d040:	2f c8       	sub	r8,-4
8001d042:	70 0a       	ld.w	r10,r8[0x0]
8001d044:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d048:	2f c8       	sub	r8,-4
8001d04a:	70 08       	ld.w	r8,r8[0x0]
8001d04c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d050:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d054:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d058:	2f 88       	sub	r8,-8
8001d05a:	70 0a       	ld.w	r10,r8[0x0]
8001d05c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d060:	2f 88       	sub	r8,-8
8001d062:	70 08       	ld.w	r8,r8[0x0]
8001d064:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d068:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d06c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001d070:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d074:	10 9c       	mov	r12,r8
8001d076:	2f dd       	sub	sp,-12
8001d078:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d07c <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001d07c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d080:	1a 97       	mov	r7,sp
8001d082:	20 7d       	sub	sp,28
8001d084:	4b d6       	lddpc	r6,8001d178 <quat_multi+0xfc>
8001d086:	1e 26       	rsub	r6,pc
8001d088:	ee c8 ff ec 	sub	r8,r7,-20
8001d08c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001d08e:	70 2a       	ld.w	r10,r8[0x8]
8001d090:	70 79       	ld.w	r9,r8[0x1c]
8001d092:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d096:	70 3b       	ld.w	r11,r8[0xc]
8001d098:	70 69       	ld.w	r9,r8[0x18]
8001d09a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d09e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d0a2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001d0a6:	70 3a       	ld.w	r10,r8[0xc]
8001d0a8:	70 59       	ld.w	r9,r8[0x14]
8001d0aa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0ae:	70 1b       	ld.w	r11,r8[0x4]
8001d0b0:	70 79       	ld.w	r9,r8[0x1c]
8001d0b2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0b6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d0ba:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001d0be:	70 1a       	ld.w	r10,r8[0x4]
8001d0c0:	70 69       	ld.w	r9,r8[0x18]
8001d0c2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0c6:	70 2b       	ld.w	r11,r8[0x8]
8001d0c8:	70 59       	ld.w	r9,r8[0x14]
8001d0ca:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0ce:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d0d2:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001d0d6:	70 4a       	ld.w	r10,r8[0x10]
8001d0d8:	70 19       	ld.w	r9,r8[0x4]
8001d0da:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0de:	70 0b       	ld.w	r11,r8[0x0]
8001d0e0:	70 59       	ld.w	r9,r8[0x14]
8001d0e2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0e6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d0ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d0ee:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d0f2:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001d0f6:	70 4a       	ld.w	r10,r8[0x10]
8001d0f8:	70 29       	ld.w	r9,r8[0x8]
8001d0fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0fe:	70 0b       	ld.w	r11,r8[0x0]
8001d100:	70 69       	ld.w	r9,r8[0x18]
8001d102:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d106:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d10a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d10e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d112:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001d116:	70 4a       	ld.w	r10,r8[0x10]
8001d118:	70 39       	ld.w	r9,r8[0xc]
8001d11a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d11e:	70 0b       	ld.w	r11,r8[0x0]
8001d120:	70 79       	ld.w	r9,r8[0x1c]
8001d122:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d126:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d12a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d12e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d132:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001d136:	70 0a       	ld.w	r10,r8[0x0]
8001d138:	70 49       	ld.w	r9,r8[0x10]
8001d13a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001d13e:	f0 c9 ff f0 	sub	r9,r8,-16
8001d142:	2f c9       	sub	r9,-4
8001d144:	2f c8       	sub	r8,-4
8001d146:	12 9b       	mov	r11,r9
8001d148:	10 9c       	mov	r12,r8
8001d14a:	c6 9f       	rcall	8001d01c <scalar_product>
8001d14c:	18 98       	mov	r8,r12
8001d14e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001d152:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001d156:	0a 98       	mov	r8,r5
8001d158:	ee c9 00 1c 	sub	r9,r7,28
8001d15c:	20 08       	sub	r8,0
8001d15e:	20 09       	sub	r9,0
8001d160:	72 0a       	ld.w	r10,r9[0x0]
8001d162:	91 0a       	st.w	r8[0x0],r10
8001d164:	72 1a       	ld.w	r10,r9[0x4]
8001d166:	91 1a       	st.w	r8[0x4],r10
8001d168:	72 2a       	ld.w	r10,r9[0x8]
8001d16a:	91 2a       	st.w	r8[0x8],r10
8001d16c:	72 39       	ld.w	r9,r9[0xc]
8001d16e:	91 39       	st.w	r8[0xc],r9
}
8001d170:	0a 9c       	mov	r12,r5
8001d172:	2f 9d       	sub	sp,-28
8001d174:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d178:	80 01       	ld.sh	r1,r0[0x0]
8001d17a:	cf 0a       	rjmp	8001cf5a <imu_update+0x1a>

8001d17c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001d17c:	eb cd 40 80 	pushm	r7,lr
8001d180:	1a 97       	mov	r7,sp
8001d182:	20 5d       	sub	sp,20
8001d184:	ee c9 ff f8 	sub	r9,r7,-8
8001d188:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001d18a:	72 08       	ld.w	r8,r9[0x0]
8001d18c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001d190:	30 08       	mov	r8,0
8001d192:	ef 48 ff fc 	st.w	r7[-4],r8
8001d196:	c1 58       	rjmp	8001d1c0 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001d198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d19c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d1a0:	2f fb       	sub	r11,-1
8001d1a2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001d1a6:	ee 1b 80 00 	eorh	r11,0x8000
8001d1aa:	2f f8       	sub	r8,-1
8001d1ac:	a3 68       	lsl	r8,0x2
8001d1ae:	ee 08 00 08 	add	r8,r7,r8
8001d1b2:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001d1b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1ba:	2f f8       	sub	r8,-1
8001d1bc:	ef 48 ff fc 	st.w	r7[-4],r8
8001d1c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1c4:	58 28       	cp.w	r8,2
8001d1c6:	fe 9a ff e9 	brle	8001d198 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001d1ca:	14 98       	mov	r8,r10
8001d1cc:	ee c9 00 14 	sub	r9,r7,20
8001d1d0:	20 08       	sub	r8,0
8001d1d2:	20 09       	sub	r9,0
8001d1d4:	72 0b       	ld.w	r11,r9[0x0]
8001d1d6:	91 0b       	st.w	r8[0x0],r11
8001d1d8:	72 1b       	ld.w	r11,r9[0x4]
8001d1da:	91 1b       	st.w	r8[0x4],r11
8001d1dc:	72 2b       	ld.w	r11,r9[0x8]
8001d1de:	91 2b       	st.w	r8[0x8],r11
8001d1e0:	72 39       	ld.w	r9,r9[0xc]
8001d1e2:	91 39       	st.w	r8[0xc],r9
}
8001d1e4:	14 9c       	mov	r12,r10
8001d1e6:	2f bd       	sub	sp,-20
8001d1e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d1ec <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001d1ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d1f0:	1a 97       	mov	r7,sp
8001d1f2:	20 cd       	sub	sp,48
8001d1f4:	4b c6       	lddpc	r6,8001d2e4 <quat_global_to_local+0xf8>
8001d1f6:	1e 26       	rsub	r6,pc
8001d1f8:	ee c5 ff ec 	sub	r5,r7,-20
8001d1fc:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d1fe:	ee ca 00 10 	sub	r10,r7,16
8001d202:	20 4d       	sub	sp,16
8001d204:	1a 98       	mov	r8,sp
8001d206:	0a 99       	mov	r9,r5
8001d208:	20 08       	sub	r8,0
8001d20a:	20 09       	sub	r9,0
8001d20c:	72 0b       	ld.w	r11,r9[0x0]
8001d20e:	91 0b       	st.w	r8[0x0],r11
8001d210:	72 1b       	ld.w	r11,r9[0x4]
8001d212:	91 1b       	st.w	r8[0x4],r11
8001d214:	72 2b       	ld.w	r11,r9[0x8]
8001d216:	91 2b       	st.w	r8[0x8],r11
8001d218:	72 39       	ld.w	r9,r9[0xc]
8001d21a:	91 39       	st.w	r8[0xc],r9
8001d21c:	14 9c       	mov	r12,r10
8001d21e:	ca ff       	rcall	8001d17c <quat_inv>
8001d220:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001d222:	ee ca 00 20 	sub	r10,r7,32
8001d226:	20 4d       	sub	sp,16
8001d228:	1a 98       	mov	r8,sp
8001d22a:	ea c9 ff f0 	sub	r9,r5,-16
8001d22e:	20 08       	sub	r8,0
8001d230:	20 09       	sub	r9,0
8001d232:	72 0b       	ld.w	r11,r9[0x0]
8001d234:	91 0b       	st.w	r8[0x0],r11
8001d236:	72 1b       	ld.w	r11,r9[0x4]
8001d238:	91 1b       	st.w	r8[0x4],r11
8001d23a:	72 2b       	ld.w	r11,r9[0x8]
8001d23c:	91 2b       	st.w	r8[0x8],r11
8001d23e:	72 39       	ld.w	r9,r9[0xc]
8001d240:	91 39       	st.w	r8[0xc],r9
8001d242:	20 4d       	sub	sp,16
8001d244:	1a 98       	mov	r8,sp
8001d246:	ee c9 00 10 	sub	r9,r7,16
8001d24a:	20 08       	sub	r8,0
8001d24c:	20 09       	sub	r9,0
8001d24e:	72 0b       	ld.w	r11,r9[0x0]
8001d250:	91 0b       	st.w	r8[0x0],r11
8001d252:	72 1b       	ld.w	r11,r9[0x4]
8001d254:	91 1b       	st.w	r8[0x4],r11
8001d256:	72 2b       	ld.w	r11,r9[0x8]
8001d258:	91 2b       	st.w	r8[0x8],r11
8001d25a:	72 39       	ld.w	r9,r9[0xc]
8001d25c:	91 39       	st.w	r8[0xc],r9
8001d25e:	14 9c       	mov	r12,r10
8001d260:	c0 ef       	rcall	8001d07c <quat_multi>
8001d262:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001d264:	ee ca 00 30 	sub	r10,r7,48
8001d268:	20 4d       	sub	sp,16
8001d26a:	1a 98       	mov	r8,sp
8001d26c:	0a 99       	mov	r9,r5
8001d26e:	20 08       	sub	r8,0
8001d270:	20 09       	sub	r9,0
8001d272:	72 0b       	ld.w	r11,r9[0x0]
8001d274:	91 0b       	st.w	r8[0x0],r11
8001d276:	72 1b       	ld.w	r11,r9[0x4]
8001d278:	91 1b       	st.w	r8[0x4],r11
8001d27a:	72 2b       	ld.w	r11,r9[0x8]
8001d27c:	91 2b       	st.w	r8[0x8],r11
8001d27e:	72 39       	ld.w	r9,r9[0xc]
8001d280:	91 39       	st.w	r8[0xc],r9
8001d282:	20 4d       	sub	sp,16
8001d284:	1a 98       	mov	r8,sp
8001d286:	ee c9 00 20 	sub	r9,r7,32
8001d28a:	20 08       	sub	r8,0
8001d28c:	20 09       	sub	r9,0
8001d28e:	72 0b       	ld.w	r11,r9[0x0]
8001d290:	91 0b       	st.w	r8[0x0],r11
8001d292:	72 1b       	ld.w	r11,r9[0x4]
8001d294:	91 1b       	st.w	r8[0x4],r11
8001d296:	72 2b       	ld.w	r11,r9[0x8]
8001d298:	91 2b       	st.w	r8[0x8],r11
8001d29a:	72 39       	ld.w	r9,r9[0xc]
8001d29c:	91 39       	st.w	r8[0xc],r9
8001d29e:	14 9c       	mov	r12,r10
8001d2a0:	ce ee       	rcall	8001d07c <quat_multi>
8001d2a2:	2f 8d       	sub	sp,-32
8001d2a4:	ee c8 00 20 	sub	r8,r7,32
8001d2a8:	ee c9 00 30 	sub	r9,r7,48
8001d2ac:	20 08       	sub	r8,0
8001d2ae:	20 09       	sub	r9,0
8001d2b0:	72 0a       	ld.w	r10,r9[0x0]
8001d2b2:	91 0a       	st.w	r8[0x0],r10
8001d2b4:	72 1a       	ld.w	r10,r9[0x4]
8001d2b6:	91 1a       	st.w	r8[0x4],r10
8001d2b8:	72 2a       	ld.w	r10,r9[0x8]
8001d2ba:	91 2a       	st.w	r8[0x8],r10
8001d2bc:	72 39       	ld.w	r9,r9[0xc]
8001d2be:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001d2c0:	06 98       	mov	r8,r3
8001d2c2:	ee c9 00 20 	sub	r9,r7,32
8001d2c6:	20 08       	sub	r8,0
8001d2c8:	20 09       	sub	r9,0
8001d2ca:	72 0a       	ld.w	r10,r9[0x0]
8001d2cc:	91 0a       	st.w	r8[0x0],r10
8001d2ce:	72 1a       	ld.w	r10,r9[0x4]
8001d2d0:	91 1a       	st.w	r8[0x4],r10
8001d2d2:	72 2a       	ld.w	r10,r9[0x8]
8001d2d4:	91 2a       	st.w	r8[0x8],r10
8001d2d6:	72 39       	ld.w	r9,r9[0xc]
8001d2d8:	91 39       	st.w	r8[0xc],r9
}
8001d2da:	06 9c       	mov	r12,r3
8001d2dc:	2f 4d       	sub	sp,-48
8001d2de:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d2e2:	00 00       	add	r0,r0
8001d2e4:	80 01       	ld.sh	r1,r0[0x0]
8001d2e6:	d0 7a       	popm	r0-r9

8001d2e8 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001d2e8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d2ec:	1a 97       	mov	r7,sp
8001d2ee:	20 cd       	sub	sp,48
8001d2f0:	4b c6       	lddpc	r6,8001d3e0 <quat_local_to_global+0xf8>
8001d2f2:	1e 26       	rsub	r6,pc
8001d2f4:	ee c5 ff ec 	sub	r5,r7,-20
8001d2f8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d2fa:	ee ca 00 10 	sub	r10,r7,16
8001d2fe:	20 4d       	sub	sp,16
8001d300:	1a 98       	mov	r8,sp
8001d302:	0a 99       	mov	r9,r5
8001d304:	20 08       	sub	r8,0
8001d306:	20 09       	sub	r9,0
8001d308:	72 0b       	ld.w	r11,r9[0x0]
8001d30a:	91 0b       	st.w	r8[0x0],r11
8001d30c:	72 1b       	ld.w	r11,r9[0x4]
8001d30e:	91 1b       	st.w	r8[0x4],r11
8001d310:	72 2b       	ld.w	r11,r9[0x8]
8001d312:	91 2b       	st.w	r8[0x8],r11
8001d314:	72 39       	ld.w	r9,r9[0xc]
8001d316:	91 39       	st.w	r8[0xc],r9
8001d318:	14 9c       	mov	r12,r10
8001d31a:	c3 1f       	rcall	8001d17c <quat_inv>
8001d31c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001d31e:	ee ca 00 20 	sub	r10,r7,32
8001d322:	20 4d       	sub	sp,16
8001d324:	1a 98       	mov	r8,sp
8001d326:	ea c9 ff f0 	sub	r9,r5,-16
8001d32a:	20 08       	sub	r8,0
8001d32c:	20 09       	sub	r9,0
8001d32e:	72 0b       	ld.w	r11,r9[0x0]
8001d330:	91 0b       	st.w	r8[0x0],r11
8001d332:	72 1b       	ld.w	r11,r9[0x4]
8001d334:	91 1b       	st.w	r8[0x4],r11
8001d336:	72 2b       	ld.w	r11,r9[0x8]
8001d338:	91 2b       	st.w	r8[0x8],r11
8001d33a:	72 39       	ld.w	r9,r9[0xc]
8001d33c:	91 39       	st.w	r8[0xc],r9
8001d33e:	20 4d       	sub	sp,16
8001d340:	1a 98       	mov	r8,sp
8001d342:	0a 99       	mov	r9,r5
8001d344:	20 08       	sub	r8,0
8001d346:	20 09       	sub	r9,0
8001d348:	72 0b       	ld.w	r11,r9[0x0]
8001d34a:	91 0b       	st.w	r8[0x0],r11
8001d34c:	72 1b       	ld.w	r11,r9[0x4]
8001d34e:	91 1b       	st.w	r8[0x4],r11
8001d350:	72 2b       	ld.w	r11,r9[0x8]
8001d352:	91 2b       	st.w	r8[0x8],r11
8001d354:	72 39       	ld.w	r9,r9[0xc]
8001d356:	91 39       	st.w	r8[0xc],r9
8001d358:	14 9c       	mov	r12,r10
8001d35a:	c9 1e       	rcall	8001d07c <quat_multi>
8001d35c:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001d35e:	ee ca 00 30 	sub	r10,r7,48
8001d362:	20 4d       	sub	sp,16
8001d364:	1a 98       	mov	r8,sp
8001d366:	ee c9 00 10 	sub	r9,r7,16
8001d36a:	20 08       	sub	r8,0
8001d36c:	20 09       	sub	r9,0
8001d36e:	72 0b       	ld.w	r11,r9[0x0]
8001d370:	91 0b       	st.w	r8[0x0],r11
8001d372:	72 1b       	ld.w	r11,r9[0x4]
8001d374:	91 1b       	st.w	r8[0x4],r11
8001d376:	72 2b       	ld.w	r11,r9[0x8]
8001d378:	91 2b       	st.w	r8[0x8],r11
8001d37a:	72 39       	ld.w	r9,r9[0xc]
8001d37c:	91 39       	st.w	r8[0xc],r9
8001d37e:	20 4d       	sub	sp,16
8001d380:	1a 98       	mov	r8,sp
8001d382:	ee c9 00 20 	sub	r9,r7,32
8001d386:	20 08       	sub	r8,0
8001d388:	20 09       	sub	r9,0
8001d38a:	72 0b       	ld.w	r11,r9[0x0]
8001d38c:	91 0b       	st.w	r8[0x0],r11
8001d38e:	72 1b       	ld.w	r11,r9[0x4]
8001d390:	91 1b       	st.w	r8[0x4],r11
8001d392:	72 2b       	ld.w	r11,r9[0x8]
8001d394:	91 2b       	st.w	r8[0x8],r11
8001d396:	72 39       	ld.w	r9,r9[0xc]
8001d398:	91 39       	st.w	r8[0xc],r9
8001d39a:	14 9c       	mov	r12,r10
8001d39c:	c7 0e       	rcall	8001d07c <quat_multi>
8001d39e:	2f 8d       	sub	sp,-32
8001d3a0:	ee c8 00 20 	sub	r8,r7,32
8001d3a4:	ee c9 00 30 	sub	r9,r7,48
8001d3a8:	20 08       	sub	r8,0
8001d3aa:	20 09       	sub	r9,0
8001d3ac:	72 0a       	ld.w	r10,r9[0x0]
8001d3ae:	91 0a       	st.w	r8[0x0],r10
8001d3b0:	72 1a       	ld.w	r10,r9[0x4]
8001d3b2:	91 1a       	st.w	r8[0x4],r10
8001d3b4:	72 2a       	ld.w	r10,r9[0x8]
8001d3b6:	91 2a       	st.w	r8[0x8],r10
8001d3b8:	72 39       	ld.w	r9,r9[0xc]
8001d3ba:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001d3bc:	06 98       	mov	r8,r3
8001d3be:	ee c9 00 20 	sub	r9,r7,32
8001d3c2:	20 08       	sub	r8,0
8001d3c4:	20 09       	sub	r9,0
8001d3c6:	72 0a       	ld.w	r10,r9[0x0]
8001d3c8:	91 0a       	st.w	r8[0x0],r10
8001d3ca:	72 1a       	ld.w	r10,r9[0x4]
8001d3cc:	91 1a       	st.w	r8[0x4],r10
8001d3ce:	72 2a       	ld.w	r10,r9[0x8]
8001d3d0:	91 2a       	st.w	r8[0x8],r10
8001d3d2:	72 39       	ld.w	r9,r9[0xc]
8001d3d4:	91 39       	st.w	r8[0xc],r9
}
8001d3d6:	06 9c       	mov	r12,r3
8001d3d8:	2f 4d       	sub	sp,-48
8001d3da:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d3de:	00 00       	add	r0,r0
8001d3e0:	80 01       	ld.sh	r1,r0[0x0]
8001d3e2:	d1 76       	*unknown*

8001d3e4 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001d3e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001d3e8:	1a 97       	mov	r7,sp
8001d3ea:	20 2d       	sub	sp,8
8001d3ec:	4b 26       	lddpc	r6,8001d4b4 <fast_sqrt+0xd0>
8001d3ee:	1e 26       	rsub	r6,pc
8001d3f0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001d3f4:	30 18       	mov	r8,1
8001d3f6:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d3fa:	30 09       	mov	r9,0
8001d3fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d400:	e0 8c 00 03 	brvs	8001d406 <fast_sqrt+0x22>
8001d404:	c0 25       	brlt	8001d408 <fast_sqrt+0x24>
8001d406:	30 08       	mov	r8,0
8001d408:	5c 58       	castu.b	r8
8001d40a:	c0 30       	breq	8001d410 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001d40c:	30 08       	mov	r8,0
8001d40e:	c4 f8       	rjmp	8001d4ac <fast_sqrt+0xc8>
	}
	float result=1.0;
8001d410:	fc 18 3f 80 	movh	r8,0x3f80
8001d414:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d418:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d41c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d420:	f0 16 00 0a 	mcall	r6[40]
8001d424:	18 98       	mov	r8,r12
8001d426:	10 99       	mov	r9,r8
8001d428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d42c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d430:	fc 18 3f 00 	movh	r8,0x3f00
8001d434:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d438:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d43c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d440:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d444:	f0 16 00 0a 	mcall	r6[40]
8001d448:	18 98       	mov	r8,r12
8001d44a:	10 99       	mov	r9,r8
8001d44c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d450:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d454:	fc 18 3f 00 	movh	r8,0x3f00
8001d458:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d45c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d460:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d464:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d468:	f0 16 00 0a 	mcall	r6[40]
8001d46c:	18 98       	mov	r8,r12
8001d46e:	10 99       	mov	r9,r8
8001d470:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d474:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d478:	fc 18 3f 00 	movh	r8,0x3f00
8001d47c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d480:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d484:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d488:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d48c:	f0 16 00 0a 	mcall	r6[40]
8001d490:	18 98       	mov	r8,r12
8001d492:	10 99       	mov	r9,r8
8001d494:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d498:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d49c:	fc 18 3f 00 	movh	r8,0x3f00
8001d4a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d4a4:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001d4a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d4ac:	10 9c       	mov	r12,r8
8001d4ae:	2f ed       	sub	sp,-8
8001d4b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d4b4:	80 01       	ld.sh	r1,r0[0x0]
8001d4b6:	d2 72       	popm	r0-r9,r12

8001d4b8 <quat_normalise>:
float static inline vector_norm(float u[])
{
	return fast_sqrt(vector_norm_sqr(u));
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001d4b8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d4bc:	1a 97       	mov	r7,sp
8001d4be:	20 6d       	sub	sp,24
8001d4c0:	4b f6       	lddpc	r6,8001d5bc <quat_normalise+0x104>
8001d4c2:	1e 26       	rsub	r6,pc
8001d4c4:	ee c5 ff e8 	sub	r5,r7,-24
8001d4c8:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001d4ca:	fc 18 3f 80 	movh	r8,0x3f80
8001d4ce:	ef 48 ff e8 	st.w	r7[-24],r8
8001d4d2:	30 08       	mov	r8,0
8001d4d4:	ef 48 ff ec 	st.w	r7[-20],r8
8001d4d8:	30 08       	mov	r8,0
8001d4da:	ef 48 ff f0 	st.w	r7[-16],r8
8001d4de:	30 08       	mov	r8,0
8001d4e0:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001d4e4:	6a 09       	ld.w	r9,r5[0x0]
8001d4e6:	6a 08       	ld.w	r8,r5[0x0]
8001d4e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d4ec:	6a 1a       	ld.w	r10,r5[0x4]
8001d4ee:	6a 18       	ld.w	r8,r5[0x4]
8001d4f0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d4f4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d4f8:	6a 2a       	ld.w	r10,r5[0x8]
8001d4fa:	6a 28       	ld.w	r8,r5[0x8]
8001d4fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d500:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d504:	6a 3a       	ld.w	r10,r5[0xc]
8001d506:	6a 38       	ld.w	r8,r5[0xc]
8001d508:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d50c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d510:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001d514:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d518:	f0 16 00 02 	mcall	r6[8]
8001d51c:	14 98       	mov	r8,r10
8001d51e:	16 99       	mov	r9,r11
8001d520:	30 03       	mov	r3,0
8001d522:	e0 6a af 48 	mov	r10,44872
8001d526:	ea 1a 9a bc 	orh	r10,0x9abc
8001d52a:	e0 6b d7 f2 	mov	r11,55282
8001d52e:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001d532:	f0 16 00 1e 	mcall	r6[120]
8001d536:	18 98       	mov	r8,r12
8001d538:	58 08       	cp.w	r8,0
8001d53a:	c0 20       	breq	8001d53e <quat_normalise+0x86>
8001d53c:	30 13       	mov	r3,1
8001d53e:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001d542:	c2 b0       	breq	8001d598 <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001d544:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d548:	c4 ef       	rcall	8001d3e4 <fast_sqrt>
8001d54a:	18 98       	mov	r8,r12
8001d54c:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001d550:	6a 08       	ld.w	r8,r5[0x0]
8001d552:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d556:	10 9c       	mov	r12,r8
8001d558:	f0 16 00 0a 	mcall	r6[40]
8001d55c:	18 98       	mov	r8,r12
8001d55e:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001d562:	6a 18       	ld.w	r8,r5[0x4]
8001d564:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d568:	10 9c       	mov	r12,r8
8001d56a:	f0 16 00 0a 	mcall	r6[40]
8001d56e:	18 98       	mov	r8,r12
8001d570:	ef 48 ff ec 	st.w	r7[-20],r8
8001d574:	6a 28       	ld.w	r8,r5[0x8]
8001d576:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d57a:	10 9c       	mov	r12,r8
8001d57c:	f0 16 00 0a 	mcall	r6[40]
8001d580:	18 98       	mov	r8,r12
8001d582:	ef 48 ff f0 	st.w	r7[-16],r8
8001d586:	6a 38       	ld.w	r8,r5[0xc]
8001d588:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d58c:	10 9c       	mov	r12,r8
8001d58e:	f0 16 00 0a 	mcall	r6[40]
8001d592:	18 98       	mov	r8,r12
8001d594:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001d598:	04 98       	mov	r8,r2
8001d59a:	ee c9 00 18 	sub	r9,r7,24
8001d59e:	20 08       	sub	r8,0
8001d5a0:	20 09       	sub	r9,0
8001d5a2:	72 0a       	ld.w	r10,r9[0x0]
8001d5a4:	91 0a       	st.w	r8[0x0],r10
8001d5a6:	72 1a       	ld.w	r10,r9[0x4]
8001d5a8:	91 1a       	st.w	r8[0x4],r10
8001d5aa:	72 2a       	ld.w	r10,r9[0x8]
8001d5ac:	91 2a       	st.w	r8[0x8],r10
8001d5ae:	72 39       	ld.w	r9,r9[0xc]
8001d5b0:	91 39       	st.w	r8[0xc],r9
}
8001d5b2:	04 9c       	mov	r12,r2
8001d5b4:	2f ad       	sub	sp,-24
8001d5b6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d5ba:	00 00       	add	r0,r0
8001d5bc:	80 01       	ld.sh	r1,r0[0x0]
8001d5be:	d3 46       	*unknown*

8001d5c0 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001d5c0:	eb cd 40 80 	pushm	r7,lr
8001d5c4:	1a 97       	mov	r7,sp
8001d5c6:	20 2d       	sub	sp,8
8001d5c8:	ef 4c ff fc 	st.w	r7[-4],r12
8001d5cc:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001d5d0:	30 18       	mov	r8,1
8001d5d2:	ee fa ff fc 	ld.w	r10,r7[-4]
8001d5d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d5da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d5de:	e0 8c 00 04 	brvs	8001d5e6 <clip+0x26>
8001d5e2:	e0 89 00 03 	brgt	8001d5e8 <clip+0x28>
8001d5e6:	30 08       	mov	r8,0
8001d5e8:	5c 58       	castu.b	r8
8001d5ea:	c0 40       	breq	8001d5f2 <clip+0x32>
8001d5ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5f0:	c1 98       	rjmp	8001d622 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001d5f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5f6:	10 9a       	mov	r10,r8
8001d5f8:	ee 1a 80 00 	eorh	r10,0x8000
8001d5fc:	30 18       	mov	r8,1
8001d5fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d602:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d606:	e0 8c 00 04 	brvs	8001d60e <clip+0x4e>
8001d60a:	e0 89 00 03 	brgt	8001d610 <clip+0x50>
8001d60e:	30 08       	mov	r8,0
8001d610:	5c 58       	castu.b	r8
8001d612:	c0 60       	breq	8001d61e <clip+0x5e>
8001d614:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d618:	ee 18 80 00 	eorh	r8,0x8000
8001d61c:	c0 38       	rjmp	8001d622 <clip+0x62>
	return input_value;
8001d61e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d622:	10 9c       	mov	r12,r8
8001d624:	2f ed       	sub	sp,-8
8001d626:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d62a <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001d62a:	eb cd 40 c0 	pushm	r6-r7,lr
8001d62e:	1a 97       	mov	r7,sp
8001d630:	20 3d       	sub	sp,12
8001d632:	49 06       	lddpc	r6,8001d670 <mav_array_memcpy+0x46>
8001d634:	1e 26       	rsub	r6,pc
8001d636:	ef 4c ff fc 	st.w	r7[-4],r12
8001d63a:	ef 4b ff f8 	st.w	r7[-8],r11
8001d63e:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001d642:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d646:	58 08       	cp.w	r8,0
8001d648:	c0 91       	brne	8001d65a <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001d64a:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d64e:	30 0b       	mov	r11,0
8001d650:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d654:	f0 16 00 31 	mcall	r6[196]
8001d658:	c0 98       	rjmp	8001d66a <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001d65a:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d65e:	ee fb ff f8 	ld.w	r11,r7[-8]
8001d662:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d666:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001d66a:	2f dd       	sub	sp,-12
8001d66c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d670:	80 01       	ld.sh	r1,r0[0x0]
8001d672:	d4 b8       	*unknown*

8001d674 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001d674:	eb cd 40 c0 	pushm	r6-r7,lr
8001d678:	1a 97       	mov	r7,sp
8001d67a:	20 3d       	sub	sp,12
8001d67c:	4b f6       	lddpc	r6,8001d778 <init_simulation+0x104>
8001d67e:	1e 26       	rsub	r6,pc
8001d680:	ef 4c ff f8 	st.w	r7[-8],r12
8001d684:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001d688:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d68c:	ec f9 08 b0 	ld.w	r9,r6[2224]
8001d690:	e0 6a 01 94 	mov	r10,404
8001d694:	12 9b       	mov	r11,r9
8001d696:	10 9c       	mov	r12,r8
8001d698:	f0 16 00 1b 	mcall	r6[108]
	for (i=0; i<3; i++) {
8001d69c:	30 08       	mov	r8,0
8001d69e:	ef 48 ff fc 	st.w	r7[-4],r8
8001d6a2:	c2 d8       	rjmp	8001d6fc <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001d6a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ac:	2f d9       	sub	r9,-3
8001d6ae:	30 0a       	mov	r10,0
8001d6b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001d6b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6bc:	30 0a       	mov	r10,0
8001d6be:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001d6c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ca:	2f a9       	sub	r9,-6
8001d6cc:	30 0a       	mov	r10,0
8001d6ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001d6d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6da:	2f 79       	sub	r9,-9
8001d6dc:	30 0a       	mov	r10,0
8001d6de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001d6e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ea:	2f 19       	sub	r9,-15
8001d6ec:	30 0a       	mov	r10,0
8001d6ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001d6f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d6f6:	2f f8       	sub	r8,-1
8001d6f8:	ef 48 ff fc 	st.w	r7[-4],r8
8001d6fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d700:	58 28       	cp.w	r8,2
8001d702:	fe 9a ff d1 	brle	8001d6a4 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001d706:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d70a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d70e:	2b 88       	sub	r8,-72
8001d710:	e0 6a 00 cc 	mov	r10,204
8001d714:	12 9b       	mov	r11,r9
8001d716:	10 9c       	mov	r12,r8
8001d718:	f0 16 00 1b 	mcall	r6[108]

	for (i=0; i<ROTORCOUNT; i++) {
8001d71c:	30 08       	mov	r8,0
8001d71e:	ef 48 ff fc 	st.w	r7[-4],r8
8001d722:	c0 e8       	rjmp	8001d73e <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001d724:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d72c:	2a f9       	sub	r9,-81
8001d72e:	30 0a       	mov	r10,0
8001d730:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001d734:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d738:	2f f8       	sub	r8,-1
8001d73a:	ef 48 ff fc 	st.w	r7[-4],r8
8001d73e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d742:	58 38       	cp.w	r8,3
8001d744:	fe 9a ff f0 	brle	8001d724 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001d748:	f0 16 02 02 	mcall	r6[2056]
8001d74c:	14 98       	mov	r8,r10
8001d74e:	16 99       	mov	r9,r11
8001d750:	10 9a       	mov	r10,r8
8001d752:	12 9b       	mov	r11,r9
8001d754:	f0 16 00 7d 	mcall	r6[500]
8001d758:	18 99       	mov	r9,r12
8001d75a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d75e:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001d762:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d766:	e0 69 d7 0a 	mov	r9,55050
8001d76a:	ea 19 3c 23 	orh	r9,0x3c23
8001d76e:	f1 49 01 90 	st.w	r8[400],r9
}
8001d772:	2f dd       	sub	sp,-12
8001d774:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d778:	80 01       	ld.sh	r1,r0[0x0]
8001d77a:	d5 02       	popm	r11,lr

8001d77c <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001d77c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d780:	1a 97       	mov	r7,sp
8001d782:	20 6d       	sub	sp,24
8001d784:	4e 26       	lddpc	r6,8001d90c <lift_drag_base+0x190>
8001d786:	1e 26       	rsub	r6,pc
8001d788:	ef 4c ff f4 	st.w	r7[-12],r12
8001d78c:	ef 4b ff f0 	st.w	r7[-16],r11
8001d790:	ef 4a ff ec 	st.w	r7[-20],r10
8001d794:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001d798:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d79c:	f0 16 00 02 	mcall	r6[8]
8001d7a0:	30 05       	mov	r5,0
8001d7a2:	e0 68 99 9a 	mov	r8,39322
8001d7a6:	ea 18 99 99 	orh	r8,0x9999
8001d7aa:	e0 69 99 99 	mov	r9,39321
8001d7ae:	ea 19 3f b9 	orh	r9,0x3fb9
8001d7b2:	f0 16 00 1e 	mcall	r6[120]
8001d7b6:	18 98       	mov	r8,r12
8001d7b8:	58 08       	cp.w	r8,0
8001d7ba:	c0 20       	breq	8001d7be <lift_drag_base+0x42>
8001d7bc:	30 15       	mov	r5,1
8001d7be:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001d7c2:	c0 30       	breq	8001d7c8 <lift_drag_base+0x4c>
8001d7c4:	30 08       	mov	r8,0
8001d7c6:	c9 f8       	rjmp	8001d904 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001d7c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d7cc:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d7d0:	10 9c       	mov	r12,r8
8001d7d2:	f0 16 00 02 	mcall	r6[8]
8001d7d6:	e0 68 2d 18 	mov	r8,11544
8001d7da:	ea 18 54 44 	orh	r8,0x5444
8001d7de:	e0 69 21 fb 	mov	r9,8699
8001d7e2:	ea 19 40 09 	orh	r9,0x4009
8001d7e6:	f0 16 00 03 	mcall	r6[12]
8001d7ea:	14 98       	mov	r8,r10
8001d7ec:	16 99       	mov	r9,r11
8001d7ee:	10 92       	mov	r2,r8
8001d7f0:	12 93       	mov	r3,r9
8001d7f2:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d7f6:	f0 16 00 02 	mcall	r6[8]
8001d7fa:	14 98       	mov	r8,r10
8001d7fc:	16 99       	mov	r9,r11
8001d7fe:	04 9a       	mov	r10,r2
8001d800:	06 9b       	mov	r11,r3
8001d802:	f0 16 00 03 	mcall	r6[12]
8001d806:	14 98       	mov	r8,r10
8001d808:	16 99       	mov	r9,r11
8001d80a:	10 9a       	mov	r10,r8
8001d80c:	12 9b       	mov	r11,r9
8001d80e:	30 08       	mov	r8,0
8001d810:	fc 19 40 4e 	movh	r9,0x404e
8001d814:	f0 16 00 0c 	mcall	r6[48]
8001d818:	14 98       	mov	r8,r10
8001d81a:	16 99       	mov	r9,r11
8001d81c:	10 9a       	mov	r10,r8
8001d81e:	12 9b       	mov	r11,r9
8001d820:	f0 16 00 08 	mcall	r6[32]
8001d824:	18 98       	mov	r8,r12
8001d826:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001d82a:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d82e:	f0 16 00 02 	mcall	r6[8]
8001d832:	30 08       	mov	r8,0
8001d834:	fc 19 40 4e 	movh	r9,0x404e
8001d838:	f0 16 00 0c 	mcall	r6[48]
8001d83c:	14 98       	mov	r8,r10
8001d83e:	16 99       	mov	r9,r11
8001d840:	10 92       	mov	r2,r8
8001d842:	12 93       	mov	r3,r9
8001d844:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d848:	f0 f8 01 70 	ld.w	r8,r8[368]
8001d84c:	10 9c       	mov	r12,r8
8001d84e:	f0 16 00 02 	mcall	r6[8]
8001d852:	14 98       	mov	r8,r10
8001d854:	16 99       	mov	r9,r11
8001d856:	04 9a       	mov	r10,r2
8001d858:	06 9b       	mov	r11,r3
8001d85a:	f0 16 00 03 	mcall	r6[12]
8001d85e:	14 98       	mov	r8,r10
8001d860:	16 99       	mov	r9,r11
8001d862:	10 9a       	mov	r10,r8
8001d864:	12 9b       	mov	r11,r9
8001d866:	f0 16 00 08 	mcall	r6[32]
8001d86a:	18 98       	mov	r8,r12
8001d86c:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001d870:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d874:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d878:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d87c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d880:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d884:	10 9c       	mov	r12,r8
8001d886:	f0 16 00 02 	mcall	r6[8]
8001d88a:	e0 68 33 33 	mov	r8,13107
8001d88e:	ea 18 33 33 	orh	r8,0x3333
8001d892:	e0 69 33 33 	mov	r9,13107
8001d896:	ea 19 3f e3 	orh	r9,0x3fe3
8001d89a:	f0 16 00 03 	mcall	r6[12]
8001d89e:	14 98       	mov	r8,r10
8001d8a0:	16 99       	mov	r9,r11
8001d8a2:	10 92       	mov	r2,r8
8001d8a4:	12 93       	mov	r3,r9
8001d8a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d8aa:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001d8ae:	10 9c       	mov	r12,r8
8001d8b0:	f0 16 00 02 	mcall	r6[8]
8001d8b4:	14 98       	mov	r8,r10
8001d8b6:	16 99       	mov	r9,r11
8001d8b8:	04 9a       	mov	r10,r2
8001d8ba:	06 9b       	mov	r11,r3
8001d8bc:	f0 16 00 03 	mcall	r6[12]
8001d8c0:	14 98       	mov	r8,r10
8001d8c2:	16 99       	mov	r9,r11
8001d8c4:	10 92       	mov	r2,r8
8001d8c6:	12 93       	mov	r3,r9
8001d8c8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d8cc:	ee fc ff e8 	ld.w	r12,r7[-24]
8001d8d0:	f0 16 00 0a 	mcall	r6[40]
8001d8d4:	18 98       	mov	r8,r12
8001d8d6:	10 9c       	mov	r12,r8
8001d8d8:	f0 16 00 02 	mcall	r6[8]
8001d8dc:	14 98       	mov	r8,r10
8001d8de:	16 99       	mov	r9,r11
8001d8e0:	30 0a       	mov	r10,0
8001d8e2:	fc 1b 3f f0 	movh	r11,0x3ff0
8001d8e6:	f0 16 00 11 	mcall	r6[68]
8001d8ea:	14 98       	mov	r8,r10
8001d8ec:	16 99       	mov	r9,r11
8001d8ee:	04 9a       	mov	r10,r2
8001d8f0:	06 9b       	mov	r11,r3
8001d8f2:	f0 16 00 03 	mcall	r6[12]
8001d8f6:	14 98       	mov	r8,r10
8001d8f8:	16 99       	mov	r9,r11
8001d8fa:	10 9a       	mov	r10,r8
8001d8fc:	12 9b       	mov	r11,r9
8001d8fe:	f0 16 00 08 	mcall	r6[32]
8001d902:	18 98       	mov	r8,r12
}
8001d904:	10 9c       	mov	r12,r8
8001d906:	2f ad       	sub	sp,-24
8001d908:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d90c:	80 01       	ld.sh	r1,r0[0x0]
8001d90e:	d6 0a       	popm	r12,lr

8001d910 <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001d910:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001d914:	1a 97       	mov	r7,sp
8001d916:	21 dd       	sub	sp,116
8001d918:	fe f6 04 54 	ld.w	r6,pc[1108]
8001d91c:	1e 26       	rsub	r6,pc
8001d91e:	ef 4c ff 90 	st.w	r7[-112],r12
8001d922:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001d926:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d92a:	70 99       	ld.w	r9,r8[0x24]
8001d92c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d930:	70 98       	ld.w	r8,r8[0x24]
8001d932:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d936:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d93a:	70 aa       	ld.w	r10,r8[0x28]
8001d93c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d940:	70 a8       	ld.w	r8,r8[0x28]
8001d942:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001d946:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d94a:	70 ab       	ld.w	r11,r8[0x28]
8001d94c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d950:	70 a8       	ld.w	r8,r8[0x28]
8001d952:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001d956:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d95a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d95e:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001d962:	ee fc ff ec 	ld.w	r12,r7[-20]
8001d966:	f0 16 00 02 	mcall	r6[8]
8001d96a:	14 98       	mov	r8,r10
8001d96c:	16 99       	mov	r9,r11
8001d96e:	10 9a       	mov	r10,r8
8001d970:	12 9b       	mov	r11,r9
8001d972:	f0 16 00 6d 	mcall	r6[436]
8001d976:	14 98       	mov	r8,r10
8001d978:	16 99       	mov	r9,r11
8001d97a:	10 9a       	mov	r10,r8
8001d97c:	12 9b       	mov	r11,r9
8001d97e:	f0 16 00 08 	mcall	r6[32]
8001d982:	18 98       	mov	r8,r12
8001d984:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001d988:	30 08       	mov	r8,0
8001d98a:	ef 48 ff e4 	st.w	r7[-28],r8
8001d98e:	cb 28       	rjmp	8001daf2 <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001d990:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d994:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d998:	a5 68       	lsl	r8,0x4
8001d99a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001d99e:	f2 08 00 08 	add	r8,r9,r8
8001d9a2:	70 08       	ld.w	r8,r8[0x0]
8001d9a4:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d9a8:	fc 1b 43 fa 	movh	r11,0x43fa
8001d9ac:	10 9c       	mov	r12,r8
8001d9ae:	f0 16 00 0a 	mcall	r6[40]
8001d9b2:	18 98       	mov	r8,r12
8001d9b4:	10 99       	mov	r9,r8
8001d9b6:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d9ba:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001d9be:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d9c2:	ea 08 15 02 	lsl	r8,r5,0x2
8001d9c6:	ee 08 00 08 	add	r8,r7,r8
8001d9ca:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001d9ce:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d9d2:	a3 68       	lsl	r8,0x2
8001d9d4:	ee 08 00 08 	add	r8,r7,r8
8001d9d8:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001d9dc:	30 18       	mov	r8,1
8001d9de:	30 09       	mov	r9,0
8001d9e0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d9e4:	e0 8c 00 03 	brvs	8001d9ea <forces_from_servos_diag_quad+0xda>
8001d9e8:	c0 25       	brlt	8001d9ec <forces_from_servos_diag_quad+0xdc>
8001d9ea:	30 08       	mov	r8,0
8001d9ec:	5c 58       	castu.b	r8
8001d9ee:	c0 90       	breq	8001da00 <forces_from_servos_diag_quad+0xf0>
8001d9f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d9f4:	a3 68       	lsl	r8,0x2
8001d9f6:	ee 08 00 08 	add	r8,r7,r8
8001d9fa:	30 09       	mov	r9,0
8001d9fc:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001da00:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001da04:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da08:	2a f9       	sub	r9,-81
8001da0a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001da0e:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001da12:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001da16:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001da1a:	a3 68       	lsl	r8,0x2
8001da1c:	ee 08 00 08 	add	r8,r7,r8
8001da20:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001da24:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da28:	f0 f8 01 58 	ld.w	r8,r8[344]
8001da2c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001da30:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da34:	2a f9       	sub	r9,-81
8001da36:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001da3a:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001da3e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001da42:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da46:	2a f9       	sub	r9,-81
8001da48:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001da4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001da50:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001da54:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001da58:	f2 f9 01 90 	ld.w	r9,r9[400]
8001da5c:	12 9b       	mov	r11,r9
8001da5e:	10 9c       	mov	r12,r8
8001da60:	f0 16 00 0a 	mcall	r6[40]
8001da64:	18 98       	mov	r8,r12
8001da66:	10 99       	mov	r9,r8
8001da68:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da6c:	f0 f8 01 84 	ld.w	r8,r8[388]
8001da70:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001da74:	ea 08 15 02 	lsl	r8,r5,0x2
8001da78:	ee 08 00 08 	add	r8,r7,r8
8001da7c:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001da80:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da84:	70 b8       	ld.w	r8,r8[0x2c]
8001da86:	10 99       	mov	r9,r8
8001da88:	ee 19 80 00 	eorh	r9,0x8000
8001da8c:	ee fa ff e4 	ld.w	r10,r7[-28]
8001da90:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da94:	2a fa       	sub	r10,-81
8001da96:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001da9a:	ee fa ff ec 	ld.w	r10,r7[-20]
8001da9e:	10 9b       	mov	r11,r8
8001daa0:	ee fc ff 90 	ld.w	r12,r7[-112]
8001daa4:	c6 ce       	rcall	8001d77c <lift_drag_base>
8001daa6:	18 98       	mov	r8,r12
8001daa8:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001daac:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dab0:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dab4:	f2 fa 01 64 	ld.w	r10,r9[356]
8001dab8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dabc:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dac0:	a3 68       	lsl	r8,0x2
8001dac2:	ee 08 00 08 	add	r8,r7,r8
8001dac6:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001daca:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dace:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dad2:	f2 fa 01 60 	ld.w	r10,r9[352]
8001dad6:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dada:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dade:	a3 68       	lsl	r8,0x2
8001dae0:	ee 08 00 08 	add	r8,r7,r8
8001dae4:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001dae8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001daec:	2f f8       	sub	r8,-1
8001daee:	ef 48 ff e4 	st.w	r7[-28],r8
8001daf2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001daf6:	58 38       	cp.w	r8,3
8001daf8:	fe 9a ff 4c 	brle	8001d990 <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001dafc:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db00:	f0 f8 01 88 	ld.w	r8,r8[392]
8001db04:	10 9c       	mov	r12,r8
8001db06:	f0 16 00 02 	mcall	r6[8]
8001db0a:	e0 68 0d 1b 	mov	r8,3355
8001db0e:	ea 18 2d e0 	orh	r8,0x2de0
8001db12:	e0 69 a0 90 	mov	r9,41104
8001db16:	ea 19 3f f6 	orh	r9,0x3ff6
8001db1a:	f0 16 00 0c 	mcall	r6[48]
8001db1e:	14 98       	mov	r8,r10
8001db20:	16 99       	mov	r9,r11
8001db22:	10 9a       	mov	r10,r8
8001db24:	12 9b       	mov	r11,r9
8001db26:	f0 16 00 08 	mcall	r6[32]
8001db2a:	18 98       	mov	r8,r12
8001db2c:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001db30:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db34:	f0 f8 01 88 	ld.w	r8,r8[392]
8001db38:	10 9c       	mov	r12,r8
8001db3a:	f0 16 00 02 	mcall	r6[8]
8001db3e:	e0 68 0d 1b 	mov	r8,3355
8001db42:	ea 18 2d e0 	orh	r8,0x2de0
8001db46:	e0 69 a0 90 	mov	r9,41104
8001db4a:	ea 19 3f f6 	orh	r9,0x3ff6
8001db4e:	f0 16 00 0c 	mcall	r6[48]
8001db52:	14 98       	mov	r8,r10
8001db54:	16 99       	mov	r9,r11
8001db56:	10 9a       	mov	r10,r8
8001db58:	12 9b       	mov	r11,r9
8001db5a:	f0 16 00 08 	mcall	r6[32]
8001db5e:	18 98       	mov	r8,r12
8001db60:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001db64:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001db68:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001db6c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001db70:	ee fa ff c8 	ld.w	r10,r7[-56]
8001db74:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001db78:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001db7c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001db80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001db84:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001db88:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db8c:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001db8e:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001db92:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001db96:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001db9a:	ee fa ff d0 	ld.w	r10,r7[-48]
8001db9e:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dba2:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001dba6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dbaa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dbae:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dbb2:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dbb6:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dbb8:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001dbbc:	10 9c       	mov	r12,r8
8001dbbe:	f0 16 00 02 	mcall	r6[8]
8001dbc2:	30 08       	mov	r8,0
8001dbc4:	fc 19 40 24 	movh	r9,0x4024
8001dbc8:	f0 16 00 03 	mcall	r6[12]
8001dbcc:	14 98       	mov	r8,r10
8001dbce:	16 99       	mov	r9,r11
8001dbd0:	10 92       	mov	r2,r8
8001dbd2:	12 93       	mov	r3,r9
8001dbd4:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dbd8:	10 9c       	mov	r12,r8
8001dbda:	f0 16 00 02 	mcall	r6[8]
8001dbde:	14 98       	mov	r8,r10
8001dbe0:	16 99       	mov	r9,r11
8001dbe2:	04 9a       	mov	r10,r2
8001dbe4:	06 9b       	mov	r11,r3
8001dbe6:	f0 16 00 05 	mcall	r6[20]
8001dbea:	14 98       	mov	r8,r10
8001dbec:	16 99       	mov	r9,r11
8001dbee:	10 92       	mov	r2,r8
8001dbf0:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dbf2:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001dbf6:	10 9c       	mov	r12,r8
8001dbf8:	f0 16 00 02 	mcall	r6[8]
8001dbfc:	30 08       	mov	r8,0
8001dbfe:	fc 19 40 24 	movh	r9,0x4024
8001dc02:	f0 16 00 03 	mcall	r6[12]
8001dc06:	14 98       	mov	r8,r10
8001dc08:	16 99       	mov	r9,r11
8001dc0a:	10 90       	mov	r0,r8
8001dc0c:	12 91       	mov	r1,r9
8001dc0e:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001dc12:	10 9c       	mov	r12,r8
8001dc14:	f0 16 00 02 	mcall	r6[8]
8001dc18:	14 98       	mov	r8,r10
8001dc1a:	16 99       	mov	r9,r11
8001dc1c:	00 9a       	mov	r10,r0
8001dc1e:	02 9b       	mov	r11,r1
8001dc20:	f0 16 00 05 	mcall	r6[20]
8001dc24:	14 98       	mov	r8,r10
8001dc26:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dc28:	04 9a       	mov	r10,r2
8001dc2a:	06 9b       	mov	r11,r3
8001dc2c:	f0 16 00 11 	mcall	r6[68]
8001dc30:	14 98       	mov	r8,r10
8001dc32:	16 99       	mov	r9,r11
8001dc34:	10 92       	mov	r2,r8
8001dc36:	12 93       	mov	r3,r9
8001dc38:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001dc3c:	10 9c       	mov	r12,r8
8001dc3e:	f0 16 00 02 	mcall	r6[8]
8001dc42:	30 08       	mov	r8,0
8001dc44:	fc 19 40 24 	movh	r9,0x4024
8001dc48:	f0 16 00 03 	mcall	r6[12]
8001dc4c:	14 98       	mov	r8,r10
8001dc4e:	16 99       	mov	r9,r11
8001dc50:	10 90       	mov	r0,r8
8001dc52:	12 91       	mov	r1,r9
8001dc54:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001dc58:	10 9c       	mov	r12,r8
8001dc5a:	f0 16 00 02 	mcall	r6[8]
8001dc5e:	14 98       	mov	r8,r10
8001dc60:	16 99       	mov	r9,r11
8001dc62:	00 9a       	mov	r10,r0
8001dc64:	02 9b       	mov	r11,r1
8001dc66:	f0 16 00 05 	mcall	r6[20]
8001dc6a:	14 98       	mov	r8,r10
8001dc6c:	16 99       	mov	r9,r11
8001dc6e:	04 9a       	mov	r10,r2
8001dc70:	06 9b       	mov	r11,r3
8001dc72:	f0 16 00 05 	mcall	r6[20]
8001dc76:	14 98       	mov	r8,r10
8001dc78:	16 99       	mov	r9,r11
8001dc7a:	10 92       	mov	r2,r8
8001dc7c:	12 93       	mov	r3,r9
8001dc7e:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001dc82:	10 9c       	mov	r12,r8
8001dc84:	f0 16 00 02 	mcall	r6[8]
8001dc88:	30 08       	mov	r8,0
8001dc8a:	fc 19 40 24 	movh	r9,0x4024
8001dc8e:	f0 16 00 03 	mcall	r6[12]
8001dc92:	14 98       	mov	r8,r10
8001dc94:	16 99       	mov	r9,r11
8001dc96:	10 90       	mov	r0,r8
8001dc98:	12 91       	mov	r1,r9
8001dc9a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001dc9e:	10 9c       	mov	r12,r8
8001dca0:	f0 16 00 02 	mcall	r6[8]
8001dca4:	14 98       	mov	r8,r10
8001dca6:	16 99       	mov	r9,r11
8001dca8:	00 9a       	mov	r10,r0
8001dcaa:	02 9b       	mov	r11,r1
8001dcac:	f0 16 00 05 	mcall	r6[20]
8001dcb0:	14 98       	mov	r8,r10
8001dcb2:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dcb4:	04 9a       	mov	r10,r2
8001dcb6:	06 9b       	mov	r11,r3
8001dcb8:	f0 16 00 11 	mcall	r6[68]
8001dcbc:	14 98       	mov	r8,r10
8001dcbe:	16 99       	mov	r9,r11
8001dcc0:	10 92       	mov	r2,r8
8001dcc2:	12 93       	mov	r3,r9
8001dcc4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcc8:	f0 f8 01 68 	ld.w	r8,r8[360]
8001dccc:	10 9c       	mov	r12,r8
8001dcce:	f0 16 00 02 	mcall	r6[8]
8001dcd2:	14 98       	mov	r8,r10
8001dcd4:	16 99       	mov	r9,r11
8001dcd6:	04 9a       	mov	r10,r2
8001dcd8:	06 9b       	mov	r11,r3
8001dcda:	f0 16 00 03 	mcall	r6[12]
8001dcde:	14 98       	mov	r8,r10
8001dce0:	16 99       	mov	r9,r11
8001dce2:	10 9a       	mov	r10,r8
8001dce4:	12 9b       	mov	r11,r9
8001dce6:	f0 16 00 08 	mcall	r6[32]
8001dcea:	18 99       	mov	r9,r12
8001dcec:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcf0:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001dcf2:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcf6:	70 98       	ld.w	r8,r8[0x24]
8001dcf8:	10 99       	mov	r9,r8
8001dcfa:	ee 19 80 00 	eorh	r9,0x8000
8001dcfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001dd02:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd06:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd0a:	f0 f8 01 78 	ld.w	r8,r8[376]
8001dd0e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd12:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd16:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001dd18:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd1c:	70 a8       	ld.w	r8,r8[0x28]
8001dd1e:	10 99       	mov	r9,r8
8001dd20:	ee 19 80 00 	eorh	r9,0x8000
8001dd24:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001dd28:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd2c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd30:	f0 f8 01 78 	ld.w	r8,r8[376]
8001dd34:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd38:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd3c:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001dd3e:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001dd42:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001dd46:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001dd4a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001dd4e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001dd52:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dd56:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001dd5a:	10 99       	mov	r9,r8
8001dd5c:	ee 19 80 00 	eorh	r9,0x8000
8001dd60:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd64:	91 89       	st.w	r8[0x20],r9

}
8001dd66:	2e 3d       	sub	sp,-116
8001dd68:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001dd6c:	80 01       	ld.sh	r1,r0[0x0]
8001dd6e:	d7 a0       	acall	0x7a

8001dd70 <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001dd70:	eb cd 40 80 	pushm	r7,lr
8001dd74:	1a 97       	mov	r7,sp
8001dd76:	20 7d       	sub	sp,28
8001dd78:	ef 4c ff e8 	st.w	r7[-24],r12
8001dd7c:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001dd80:	2f 9d       	sub	sp,-28
8001dd82:	e3 cd 80 80 	ldm	sp++,r7,pc

8001dd86 <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001dd86:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001dd8a:	1a 97       	mov	r7,sp
8001dd8c:	21 fd       	sub	sp,124
8001dd8e:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001dd92:	1e 26       	rsub	r6,pc
8001dd94:	ef 4c ff a0 	st.w	r7[-96],r12
8001dd98:	ef 4b ff 9c 	st.w	r7[-100],r11
8001dd9c:	ef 4a ff 98 	st.w	r7[-104],r10
8001dda0:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001dda4:	30 08       	mov	r8,0
8001dda6:	ef 48 ff b4 	st.w	r7[-76],r8
8001ddaa:	fc 18 3f 80 	movh	r8,0x3f80
8001ddae:	ef 48 ff b8 	st.w	r7[-72],r8
8001ddb2:	30 08       	mov	r8,0
8001ddb4:	ef 48 ff bc 	st.w	r7[-68],r8
8001ddb8:	30 08       	mov	r8,0
8001ddba:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001ddbe:	30 08       	mov	r8,0
8001ddc0:	ef 48 ff a4 	st.w	r7[-92],r8
8001ddc4:	30 08       	mov	r8,0
8001ddc6:	ef 48 ff a8 	st.w	r7[-88],r8
8001ddca:	30 08       	mov	r8,0
8001ddcc:	ef 48 ff ac 	st.w	r7[-84],r8
8001ddd0:	fc 18 bf 80 	movh	r8,0xbf80
8001ddd4:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001ddd8:	f0 16 00 29 	mcall	r6[164]
8001dddc:	18 98       	mov	r8,r12
8001ddde:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001dde2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dde6:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001ddea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ddee:	f2 08 01 08 	sub	r8,r9,r8
8001ddf2:	10 9c       	mov	r12,r8
8001ddf4:	f0 16 00 52 	mcall	r6[328]
8001ddf8:	30 08       	mov	r8,0
8001ddfa:	e0 69 84 80 	mov	r9,33920
8001ddfe:	ea 19 41 2e 	orh	r9,0x412e
8001de02:	f0 16 00 0c 	mcall	r6[48]
8001de06:	14 98       	mov	r8,r10
8001de08:	16 99       	mov	r9,r11
8001de0a:	10 9a       	mov	r10,r8
8001de0c:	12 9b       	mov	r11,r9
8001de0e:	f0 16 00 08 	mcall	r6[32]
8001de12:	18 99       	mov	r9,r12
8001de14:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de18:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001de1c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de20:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001de24:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001de28:	f0 16 00 33 	mcall	r6[204]
8001de2c:	18 98       	mov	r8,r12
8001de2e:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001de32:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001de36:	ee fc ff a0 	ld.w	r12,r7[-96]
8001de3a:	f0 16 01 e4 	mcall	r6[1936]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001de3e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de42:	f0 f8 01 90 	ld.w	r8,r8[400]
8001de46:	10 9c       	mov	r12,r8
8001de48:	f0 16 00 02 	mcall	r6[8]
8001de4c:	e0 68 99 9a 	mov	r8,39322
8001de50:	ea 18 99 99 	orh	r8,0x9999
8001de54:	e0 69 99 99 	mov	r9,39321
8001de58:	ea 19 bf b9 	orh	r9,0xbfb9
8001de5c:	f0 16 00 03 	mcall	r6[12]
8001de60:	14 98       	mov	r8,r10
8001de62:	16 99       	mov	r9,r11
8001de64:	10 9a       	mov	r10,r8
8001de66:	12 9b       	mov	r11,r9
8001de68:	30 08       	mov	r8,0
8001de6a:	fc 19 3f f0 	movh	r9,0x3ff0
8001de6e:	f0 16 00 05 	mcall	r6[20]
8001de72:	14 98       	mov	r8,r10
8001de74:	16 99       	mov	r9,r11
8001de76:	10 92       	mov	r2,r8
8001de78:	12 93       	mov	r3,r9
8001de7a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de7e:	70 38       	ld.w	r8,r8[0xc]
8001de80:	10 9c       	mov	r12,r8
8001de82:	f0 16 00 02 	mcall	r6[8]
8001de86:	14 98       	mov	r8,r10
8001de88:	16 99       	mov	r9,r11
8001de8a:	04 9a       	mov	r10,r2
8001de8c:	06 9b       	mov	r11,r3
8001de8e:	f0 16 00 03 	mcall	r6[12]
8001de92:	14 98       	mov	r8,r10
8001de94:	16 99       	mov	r9,r11
8001de96:	10 92       	mov	r2,r8
8001de98:	12 93       	mov	r3,r9
8001de9a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de9e:	f0 f9 01 90 	ld.w	r9,r8[400]
8001dea2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dea6:	70 08       	ld.w	r8,r8[0x0]
8001dea8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001deac:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001deb0:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001deb4:	12 9b       	mov	r11,r9
8001deb6:	10 9c       	mov	r12,r8
8001deb8:	f0 16 00 0a 	mcall	r6[40]
8001debc:	18 98       	mov	r8,r12
8001debe:	10 9c       	mov	r12,r8
8001dec0:	f0 16 00 02 	mcall	r6[8]
8001dec4:	14 98       	mov	r8,r10
8001dec6:	16 99       	mov	r9,r11
8001dec8:	04 9a       	mov	r10,r2
8001deca:	06 9b       	mov	r11,r3
8001decc:	f0 16 00 05 	mcall	r6[20]
8001ded0:	14 98       	mov	r8,r10
8001ded2:	16 99       	mov	r9,r11
8001ded4:	10 9a       	mov	r10,r8
8001ded6:	12 9b       	mov	r11,r9
8001ded8:	f0 16 00 08 	mcall	r6[32]
8001dedc:	18 98       	mov	r8,r12
8001dede:	fc 1b 41 20 	movh	r11,0x4120
8001dee2:	10 9c       	mov	r12,r8
8001dee4:	fe b0 fb 6e 	rcall	8001d5c0 <clip>
8001dee8:	18 99       	mov	r9,r12
8001deea:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001deee:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001def0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001def4:	f0 f8 01 90 	ld.w	r8,r8[400]
8001def8:	10 9c       	mov	r12,r8
8001defa:	f0 16 00 02 	mcall	r6[8]
8001defe:	e0 68 99 9a 	mov	r8,39322
8001df02:	ea 18 99 99 	orh	r8,0x9999
8001df06:	e0 69 99 99 	mov	r9,39321
8001df0a:	ea 19 bf b9 	orh	r9,0xbfb9
8001df0e:	f0 16 00 03 	mcall	r6[12]
8001df12:	14 98       	mov	r8,r10
8001df14:	16 99       	mov	r9,r11
8001df16:	10 9a       	mov	r10,r8
8001df18:	12 9b       	mov	r11,r9
8001df1a:	30 08       	mov	r8,0
8001df1c:	fc 19 3f f0 	movh	r9,0x3ff0
8001df20:	f0 16 00 05 	mcall	r6[20]
8001df24:	14 98       	mov	r8,r10
8001df26:	16 99       	mov	r9,r11
8001df28:	10 92       	mov	r2,r8
8001df2a:	12 93       	mov	r3,r9
8001df2c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df30:	70 48       	ld.w	r8,r8[0x10]
8001df32:	10 9c       	mov	r12,r8
8001df34:	f0 16 00 02 	mcall	r6[8]
8001df38:	14 98       	mov	r8,r10
8001df3a:	16 99       	mov	r9,r11
8001df3c:	04 9a       	mov	r10,r2
8001df3e:	06 9b       	mov	r11,r3
8001df40:	f0 16 00 03 	mcall	r6[12]
8001df44:	14 98       	mov	r8,r10
8001df46:	16 99       	mov	r9,r11
8001df48:	10 92       	mov	r2,r8
8001df4a:	12 93       	mov	r3,r9
8001df4c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df50:	f0 f9 01 90 	ld.w	r9,r8[400]
8001df54:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df58:	70 18       	ld.w	r8,r8[0x4]
8001df5a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001df5e:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001df62:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001df66:	12 9b       	mov	r11,r9
8001df68:	10 9c       	mov	r12,r8
8001df6a:	f0 16 00 0a 	mcall	r6[40]
8001df6e:	18 98       	mov	r8,r12
8001df70:	10 9c       	mov	r12,r8
8001df72:	f0 16 00 02 	mcall	r6[8]
8001df76:	14 98       	mov	r8,r10
8001df78:	16 99       	mov	r9,r11
8001df7a:	04 9a       	mov	r10,r2
8001df7c:	06 9b       	mov	r11,r3
8001df7e:	f0 16 00 05 	mcall	r6[20]
8001df82:	14 98       	mov	r8,r10
8001df84:	16 99       	mov	r9,r11
8001df86:	10 9a       	mov	r10,r8
8001df88:	12 9b       	mov	r11,r9
8001df8a:	f0 16 00 08 	mcall	r6[32]
8001df8e:	18 98       	mov	r8,r12
8001df90:	fc 1b 41 20 	movh	r11,0x4120
8001df94:	10 9c       	mov	r12,r8
8001df96:	fe b0 fb 15 	rcall	8001d5c0 <clip>
8001df9a:	18 99       	mov	r9,r12
8001df9c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfa0:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001dfa2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfa6:	f0 f8 01 90 	ld.w	r8,r8[400]
8001dfaa:	10 9c       	mov	r12,r8
8001dfac:	f0 16 00 02 	mcall	r6[8]
8001dfb0:	e0 68 99 9a 	mov	r8,39322
8001dfb4:	ea 18 99 99 	orh	r8,0x9999
8001dfb8:	e0 69 99 99 	mov	r9,39321
8001dfbc:	ea 19 bf b9 	orh	r9,0xbfb9
8001dfc0:	f0 16 00 03 	mcall	r6[12]
8001dfc4:	14 98       	mov	r8,r10
8001dfc6:	16 99       	mov	r9,r11
8001dfc8:	10 9a       	mov	r10,r8
8001dfca:	12 9b       	mov	r11,r9
8001dfcc:	30 08       	mov	r8,0
8001dfce:	fc 19 3f f0 	movh	r9,0x3ff0
8001dfd2:	f0 16 00 05 	mcall	r6[20]
8001dfd6:	14 98       	mov	r8,r10
8001dfd8:	16 99       	mov	r9,r11
8001dfda:	10 92       	mov	r2,r8
8001dfdc:	12 93       	mov	r3,r9
8001dfde:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfe2:	70 58       	ld.w	r8,r8[0x14]
8001dfe4:	10 9c       	mov	r12,r8
8001dfe6:	f0 16 00 02 	mcall	r6[8]
8001dfea:	14 98       	mov	r8,r10
8001dfec:	16 99       	mov	r9,r11
8001dfee:	04 9a       	mov	r10,r2
8001dff0:	06 9b       	mov	r11,r3
8001dff2:	f0 16 00 03 	mcall	r6[12]
8001dff6:	14 98       	mov	r8,r10
8001dff8:	16 99       	mov	r9,r11
8001dffa:	10 92       	mov	r2,r8
8001dffc:	12 93       	mov	r3,r9
8001dffe:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e002:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e006:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e00a:	70 28       	ld.w	r8,r8[0x8]
8001e00c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e010:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e014:	f2 f9 01 80 	ld.w	r9,r9[384]
8001e018:	12 9b       	mov	r11,r9
8001e01a:	10 9c       	mov	r12,r8
8001e01c:	f0 16 00 0a 	mcall	r6[40]
8001e020:	18 98       	mov	r8,r12
8001e022:	10 9c       	mov	r12,r8
8001e024:	f0 16 00 02 	mcall	r6[8]
8001e028:	14 98       	mov	r8,r10
8001e02a:	16 99       	mov	r9,r11
8001e02c:	04 9a       	mov	r10,r2
8001e02e:	06 9b       	mov	r11,r3
8001e030:	f0 16 00 05 	mcall	r6[20]
8001e034:	14 98       	mov	r8,r10
8001e036:	16 99       	mov	r9,r11
8001e038:	10 9a       	mov	r10,r8
8001e03a:	12 9b       	mov	r11,r9
8001e03c:	f0 16 00 08 	mcall	r6[32]
8001e040:	18 98       	mov	r8,r12
8001e042:	fc 1b 41 20 	movh	r11,0x4120
8001e046:	10 9c       	mov	r12,r8
8001e048:	fe b0 fa bc 	rcall	8001d5c0 <clip>
8001e04c:	18 99       	mov	r9,r12
8001e04e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e052:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001e054:	30 08       	mov	r8,0
8001e056:	ef 48 ff f4 	st.w	r7[-12],r8
8001e05a:	c1 58       	rjmp	8001e084 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001e05c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e060:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e064:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e068:	2f da       	sub	r10,-3
8001e06a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e06e:	2f f8       	sub	r8,-1
8001e070:	a3 68       	lsl	r8,0x2
8001e072:	ee 08 00 08 	add	r8,r7,r8
8001e076:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001e07a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e07e:	2f f8       	sub	r8,-1
8001e080:	ef 48 ff f4 	st.w	r7[-12],r8
8001e084:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e088:	58 28       	cp.w	r8,2
8001e08a:	fe 9a ff e9 	brle	8001e05c <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001e08e:	30 08       	mov	r8,0
8001e090:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001e094:	ee ca 00 3c 	sub	r10,r7,60
8001e098:	20 4d       	sub	sp,16
8001e09a:	1a 98       	mov	r8,sp
8001e09c:	ee c9 00 1c 	sub	r9,r7,28
8001e0a0:	20 08       	sub	r8,0
8001e0a2:	20 09       	sub	r9,0
8001e0a4:	72 0b       	ld.w	r11,r9[0x0]
8001e0a6:	91 0b       	st.w	r8[0x0],r11
8001e0a8:	72 1b       	ld.w	r11,r9[0x4]
8001e0aa:	91 1b       	st.w	r8[0x4],r11
8001e0ac:	72 2b       	ld.w	r11,r9[0x8]
8001e0ae:	91 2b       	st.w	r8[0x8],r11
8001e0b0:	72 39       	ld.w	r9,r9[0xc]
8001e0b2:	91 39       	st.w	r8[0xc],r9
8001e0b4:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e0b8:	20 4d       	sub	sp,16
8001e0ba:	1a 98       	mov	r8,sp
8001e0bc:	2b 89       	sub	r9,-72
8001e0be:	20 08       	sub	r8,0
8001e0c0:	20 09       	sub	r9,0
8001e0c2:	72 0b       	ld.w	r11,r9[0x0]
8001e0c4:	91 0b       	st.w	r8[0x0],r11
8001e0c6:	72 1b       	ld.w	r11,r9[0x4]
8001e0c8:	91 1b       	st.w	r8[0x4],r11
8001e0ca:	72 2b       	ld.w	r11,r9[0x8]
8001e0cc:	91 2b       	st.w	r8[0x8],r11
8001e0ce:	72 39       	ld.w	r9,r9[0xc]
8001e0d0:	91 39       	st.w	r8[0xc],r9
8001e0d2:	14 9c       	mov	r12,r10
8001e0d4:	fe b0 f7 d4 	rcall	8001d07c <quat_multi>
8001e0d8:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001e0da:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0de:	71 29       	ld.w	r9,r8[0x48]
8001e0e0:	ee fa ff c4 	ld.w	r10,r7[-60]
8001e0e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0e8:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e0ec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e0f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e0f4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0f8:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001e0fc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e100:	71 39       	ld.w	r9,r8[0x4c]
8001e102:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e106:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e10a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e10e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e112:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e116:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e11a:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001e11e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e122:	71 49       	ld.w	r9,r8[0x50]
8001e124:	ee fa ff cc 	ld.w	r10,r7[-52]
8001e128:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e12c:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e130:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e134:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e138:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e13c:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001e140:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e144:	71 59       	ld.w	r9,r8[0x54]
8001e146:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e14a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e14e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e152:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e156:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e15a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e15e:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001e162:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e166:	ee ca 00 7c 	sub	r10,r7,124
8001e16a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e16e:	20 4d       	sub	sp,16
8001e170:	1a 98       	mov	r8,sp
8001e172:	2b 89       	sub	r9,-72
8001e174:	20 08       	sub	r8,0
8001e176:	20 09       	sub	r9,0
8001e178:	72 0b       	ld.w	r11,r9[0x0]
8001e17a:	91 0b       	st.w	r8[0x0],r11
8001e17c:	72 1b       	ld.w	r11,r9[0x4]
8001e17e:	91 1b       	st.w	r8[0x4],r11
8001e180:	72 2b       	ld.w	r11,r9[0x8]
8001e182:	91 2b       	st.w	r8[0x8],r11
8001e184:	72 39       	ld.w	r9,r9[0xc]
8001e186:	91 39       	st.w	r8[0xc],r9
8001e188:	14 9c       	mov	r12,r10
8001e18a:	fe b0 f9 97 	rcall	8001d4b8 <quat_normalise>
8001e18e:	2f cd       	sub	sp,-16
8001e190:	ea c8 ff b8 	sub	r8,r5,-72
8001e194:	ee c9 00 7c 	sub	r9,r7,124
8001e198:	20 08       	sub	r8,0
8001e19a:	20 09       	sub	r9,0
8001e19c:	72 0a       	ld.w	r10,r9[0x0]
8001e19e:	91 0a       	st.w	r8[0x0],r10
8001e1a0:	72 1a       	ld.w	r10,r9[0x4]
8001e1a2:	91 1a       	st.w	r8[0x4],r10
8001e1a4:	72 2a       	ld.w	r10,r9[0x8]
8001e1a6:	91 2a       	st.w	r8[0x8],r10
8001e1a8:	72 39       	ld.w	r9,r9[0xc]
8001e1aa:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001e1ac:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e1b0:	ee ca 00 7c 	sub	r10,r7,124
8001e1b4:	20 4d       	sub	sp,16
8001e1b6:	1a 98       	mov	r8,sp
8001e1b8:	ee c9 00 5c 	sub	r9,r7,92
8001e1bc:	20 08       	sub	r8,0
8001e1be:	20 09       	sub	r9,0
8001e1c0:	72 0b       	ld.w	r11,r9[0x0]
8001e1c2:	91 0b       	st.w	r8[0x0],r11
8001e1c4:	72 1b       	ld.w	r11,r9[0x4]
8001e1c6:	91 1b       	st.w	r8[0x4],r11
8001e1c8:	72 2b       	ld.w	r11,r9[0x8]
8001e1ca:	91 2b       	st.w	r8[0x8],r11
8001e1cc:	72 39       	ld.w	r9,r9[0xc]
8001e1ce:	91 39       	st.w	r8[0xc],r9
8001e1d0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e1d4:	20 4d       	sub	sp,16
8001e1d6:	1a 98       	mov	r8,sp
8001e1d8:	2b 89       	sub	r9,-72
8001e1da:	20 08       	sub	r8,0
8001e1dc:	20 09       	sub	r9,0
8001e1de:	72 0b       	ld.w	r11,r9[0x0]
8001e1e0:	91 0b       	st.w	r8[0x0],r11
8001e1e2:	72 1b       	ld.w	r11,r9[0x4]
8001e1e4:	91 1b       	st.w	r8[0x4],r11
8001e1e6:	72 2b       	ld.w	r11,r9[0x8]
8001e1e8:	91 2b       	st.w	r8[0x8],r11
8001e1ea:	72 39       	ld.w	r9,r9[0xc]
8001e1ec:	91 39       	st.w	r8[0xc],r9
8001e1ee:	14 9c       	mov	r12,r10
8001e1f0:	fe b0 f7 fe 	rcall	8001d1ec <quat_global_to_local>
8001e1f4:	2f 8d       	sub	sp,-32
8001e1f6:	ea c8 ff a8 	sub	r8,r5,-88
8001e1fa:	ee c9 00 7c 	sub	r9,r7,124
8001e1fe:	20 08       	sub	r8,0
8001e200:	20 09       	sub	r9,0
8001e202:	72 0a       	ld.w	r10,r9[0x0]
8001e204:	91 0a       	st.w	r8[0x0],r10
8001e206:	72 1a       	ld.w	r10,r9[0x4]
8001e208:	91 1a       	st.w	r8[0x4],r10
8001e20a:	72 2a       	ld.w	r10,r9[0x8]
8001e20c:	91 2a       	st.w	r8[0x8],r10
8001e20e:	72 39       	ld.w	r9,r9[0xc]
8001e210:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001e212:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e216:	ee ca 00 7c 	sub	r10,r7,124
8001e21a:	20 4d       	sub	sp,16
8001e21c:	1a 98       	mov	r8,sp
8001e21e:	ee c9 00 4c 	sub	r9,r7,76
8001e222:	20 08       	sub	r8,0
8001e224:	20 09       	sub	r9,0
8001e226:	72 0b       	ld.w	r11,r9[0x0]
8001e228:	91 0b       	st.w	r8[0x0],r11
8001e22a:	72 1b       	ld.w	r11,r9[0x4]
8001e22c:	91 1b       	st.w	r8[0x4],r11
8001e22e:	72 2b       	ld.w	r11,r9[0x8]
8001e230:	91 2b       	st.w	r8[0x8],r11
8001e232:	72 39       	ld.w	r9,r9[0xc]
8001e234:	91 39       	st.w	r8[0xc],r9
8001e236:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e23a:	20 4d       	sub	sp,16
8001e23c:	1a 98       	mov	r8,sp
8001e23e:	2b 89       	sub	r9,-72
8001e240:	20 08       	sub	r8,0
8001e242:	20 09       	sub	r9,0
8001e244:	72 0b       	ld.w	r11,r9[0x0]
8001e246:	91 0b       	st.w	r8[0x0],r11
8001e248:	72 1b       	ld.w	r11,r9[0x4]
8001e24a:	91 1b       	st.w	r8[0x4],r11
8001e24c:	72 2b       	ld.w	r11,r9[0x8]
8001e24e:	91 2b       	st.w	r8[0x8],r11
8001e250:	72 39       	ld.w	r9,r9[0xc]
8001e252:	91 39       	st.w	r8[0xc],r9
8001e254:	14 9c       	mov	r12,r10
8001e256:	fe b0 f7 cb 	rcall	8001d1ec <quat_global_to_local>
8001e25a:	2f 8d       	sub	sp,-32
8001e25c:	ea c8 ff 98 	sub	r8,r5,-104
8001e260:	ee c9 00 7c 	sub	r9,r7,124
8001e264:	20 08       	sub	r8,0
8001e266:	20 09       	sub	r9,0
8001e268:	72 0a       	ld.w	r10,r9[0x0]
8001e26a:	91 0a       	st.w	r8[0x0],r10
8001e26c:	72 1a       	ld.w	r10,r9[0x4]
8001e26e:	91 1a       	st.w	r8[0x4],r10
8001e270:	72 2a       	ld.w	r10,r9[0x8]
8001e272:	91 2a       	st.w	r8[0x8],r10
8001e274:	72 39       	ld.w	r9,r9[0xc]
8001e276:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001e278:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e27c:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001e280:	30 18       	mov	r8,1
8001e282:	30 09       	mov	r9,0
8001e284:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e288:	e0 8c 00 04 	brvs	8001e290 <simu_update+0x50a>
8001e28c:	e0 89 00 03 	brgt	8001e292 <simu_update+0x50c>
8001e290:	30 08       	mov	r8,0
8001e292:	5c 58       	castu.b	r8
8001e294:	e0 80 00 85 	breq	8001e39e <simu_update+0x618>
		sim->vel[Z]=0.0;
8001e298:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e29c:	30 09       	mov	r9,0
8001e29e:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001e2a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2a4:	30 09       	mov	r9,0
8001e2a6:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e2aa:	30 08       	mov	r8,0
8001e2ac:	ef 48 ff f4 	st.w	r7[-12],r8
8001e2b0:	c4 18       	rjmp	8001e332 <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001e2b2:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e2b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e2ba:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2be:	2f a9       	sub	r9,-6
8001e2c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e2c4:	10 9c       	mov	r12,r8
8001e2c6:	f0 16 00 02 	mcall	r6[8]
8001e2ca:	14 92       	mov	r2,r10
8001e2cc:	16 93       	mov	r3,r11
8001e2ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e2d2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2d6:	2e 99       	sub	r9,-23
8001e2d8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e2dc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2e0:	f0 f8 01 74 	ld.w	r8,r8[372]
8001e2e4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e2e8:	10 9c       	mov	r12,r8
8001e2ea:	f0 16 00 02 	mcall	r6[8]
8001e2ee:	e0 68 85 1f 	mov	r8,34079
8001e2f2:	ea 18 51 eb 	orh	r8,0x51eb
8001e2f6:	e0 69 9e b8 	mov	r9,40632
8001e2fa:	ea 19 40 23 	orh	r9,0x4023
8001e2fe:	f0 16 00 03 	mcall	r6[12]
8001e302:	14 98       	mov	r8,r10
8001e304:	16 99       	mov	r9,r11
8001e306:	04 9a       	mov	r10,r2
8001e308:	06 9b       	mov	r11,r3
8001e30a:	f0 16 00 05 	mcall	r6[20]
8001e30e:	14 98       	mov	r8,r10
8001e310:	16 99       	mov	r9,r11
8001e312:	10 9a       	mov	r10,r8
8001e314:	12 9b       	mov	r11,r9
8001e316:	f0 16 00 08 	mcall	r6[32]
8001e31a:	18 9a       	mov	r10,r12
8001e31c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e320:	ea c9 ff fa 	sub	r9,r5,-6
8001e324:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e32c:	2f f8       	sub	r8,-1
8001e32e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e332:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e336:	58 28       	cp.w	r8,2
8001e338:	fe 9a ff bd 	brle	8001e2b2 <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e33c:	30 08       	mov	r8,0
8001e33e:	ef 48 ff f4 	st.w	r7[-12],r8
8001e342:	c2 98       	rjmp	8001e394 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001e344:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e348:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e34c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e350:	2f 79       	sub	r9,-9
8001e352:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e356:	10 9c       	mov	r12,r8
8001e358:	f0 16 00 02 	mcall	r6[8]
8001e35c:	e0 68 66 66 	mov	r8,26214
8001e360:	ea 18 66 66 	orh	r8,0x6666
8001e364:	e0 69 66 66 	mov	r9,26214
8001e368:	ea 19 3f ee 	orh	r9,0x3fee
8001e36c:	f0 16 00 03 	mcall	r6[12]
8001e370:	14 98       	mov	r8,r10
8001e372:	16 99       	mov	r9,r11
8001e374:	10 9a       	mov	r10,r8
8001e376:	12 9b       	mov	r11,r9
8001e378:	f0 16 00 08 	mcall	r6[32]
8001e37c:	18 9a       	mov	r10,r12
8001e37e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e382:	ea c9 ff f7 	sub	r9,r5,-9
8001e386:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e38a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e38e:	2f f8       	sub	r8,-1
8001e390:	ef 48 ff f4 	st.w	r7[-12],r8
8001e394:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e398:	58 28       	cp.w	r8,2
8001e39a:	fe 9a ff d5 	brle	8001e344 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e39e:	30 08       	mov	r8,0
8001e3a0:	ef 48 ff f4 	st.w	r7[-12],r8
8001e3a4:	c1 58       	rjmp	8001e3ce <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001e3a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e3aa:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e3ae:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e3b2:	2f 4a       	sub	r10,-12
8001e3b4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e3b8:	2f f8       	sub	r8,-1
8001e3ba:	a3 68       	lsl	r8,0x2
8001e3bc:	ee 08 00 08 	add	r8,r7,r8
8001e3c0:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e3c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e3c8:	2f f8       	sub	r8,-1
8001e3ca:	ef 48 ff f4 	st.w	r7[-12],r8
8001e3ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e3d2:	58 28       	cp.w	r8,2
8001e3d4:	fe 9a ff e9 	brle	8001e3a6 <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001e3d8:	30 08       	mov	r8,0
8001e3da:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001e3de:	ee ca 00 7c 	sub	r10,r7,124
8001e3e2:	20 4d       	sub	sp,16
8001e3e4:	1a 98       	mov	r8,sp
8001e3e6:	ee c9 00 1c 	sub	r9,r7,28
8001e3ea:	20 08       	sub	r8,0
8001e3ec:	20 09       	sub	r9,0
8001e3ee:	72 0b       	ld.w	r11,r9[0x0]
8001e3f0:	91 0b       	st.w	r8[0x0],r11
8001e3f2:	72 1b       	ld.w	r11,r9[0x4]
8001e3f4:	91 1b       	st.w	r8[0x4],r11
8001e3f6:	72 2b       	ld.w	r11,r9[0x8]
8001e3f8:	91 2b       	st.w	r8[0x8],r11
8001e3fa:	72 39       	ld.w	r9,r9[0xc]
8001e3fc:	91 39       	st.w	r8[0xc],r9
8001e3fe:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e402:	20 4d       	sub	sp,16
8001e404:	1a 98       	mov	r8,sp
8001e406:	2b 89       	sub	r9,-72
8001e408:	20 08       	sub	r8,0
8001e40a:	20 09       	sub	r9,0
8001e40c:	72 0b       	ld.w	r11,r9[0x0]
8001e40e:	91 0b       	st.w	r8[0x0],r11
8001e410:	72 1b       	ld.w	r11,r9[0x4]
8001e412:	91 1b       	st.w	r8[0x4],r11
8001e414:	72 2b       	ld.w	r11,r9[0x8]
8001e416:	91 2b       	st.w	r8[0x8],r11
8001e418:	72 39       	ld.w	r9,r9[0xc]
8001e41a:	91 39       	st.w	r8[0xc],r9
8001e41c:	14 9c       	mov	r12,r10
8001e41e:	fe b0 f6 e7 	rcall	8001d1ec <quat_global_to_local>
8001e422:	2f 8d       	sub	sp,-32
8001e424:	ee c8 00 2c 	sub	r8,r7,44
8001e428:	ee c9 00 7c 	sub	r9,r7,124
8001e42c:	20 08       	sub	r8,0
8001e42e:	20 09       	sub	r9,0
8001e430:	72 0a       	ld.w	r10,r9[0x0]
8001e432:	91 0a       	st.w	r8[0x0],r10
8001e434:	72 1a       	ld.w	r10,r9[0x4]
8001e436:	91 1a       	st.w	r8[0x4],r10
8001e438:	72 2a       	ld.w	r10,r9[0x8]
8001e43a:	91 2a       	st.w	r8[0x8],r10
8001e43c:	72 39       	ld.w	r9,r9[0xc]
8001e43e:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001e440:	30 08       	mov	r8,0
8001e442:	ef 48 ff f4 	st.w	r7[-12],r8
8001e446:	c8 08       	rjmp	8001e546 <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001e448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e44c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e450:	2f f8       	sub	r8,-1
8001e452:	a3 68       	lsl	r8,0x2
8001e454:	ee 08 00 08 	add	r8,r7,r8
8001e458:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001e45c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e460:	2f 79       	sub	r9,-9
8001e462:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001e466:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e46a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e46e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e472:	2f a9       	sub	r9,-6
8001e474:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e478:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e47c:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e480:	12 9b       	mov	r11,r9
8001e482:	10 9c       	mov	r12,r8
8001e484:	f0 16 00 0a 	mcall	r6[40]
8001e488:	18 98       	mov	r8,r12
8001e48a:	10 9a       	mov	r10,r8
8001e48c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e490:	ea c9 ff cd 	sub	r9,r5,-51
8001e494:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001e498:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e49c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4a4:	2c d9       	sub	r9,-51
8001e4a6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e4aa:	10 9c       	mov	r12,r8
8001e4ac:	f0 16 00 02 	mcall	r6[8]
8001e4b0:	14 92       	mov	r2,r10
8001e4b2:	16 93       	mov	r3,r11
8001e4b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4b8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4bc:	2e 99       	sub	r9,-23
8001e4be:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e4c2:	10 9c       	mov	r12,r8
8001e4c4:	f0 16 00 02 	mcall	r6[8]
8001e4c8:	e0 68 85 1f 	mov	r8,34079
8001e4cc:	ea 18 51 eb 	orh	r8,0x51eb
8001e4d0:	e0 69 9e b8 	mov	r9,40632
8001e4d4:	ea 19 c0 23 	orh	r9,0xc023
8001e4d8:	f0 16 00 03 	mcall	r6[12]
8001e4dc:	14 98       	mov	r8,r10
8001e4de:	16 99       	mov	r9,r11
8001e4e0:	04 9a       	mov	r10,r2
8001e4e2:	06 9b       	mov	r11,r3
8001e4e4:	f0 16 00 05 	mcall	r6[20]
8001e4e8:	14 98       	mov	r8,r10
8001e4ea:	16 99       	mov	r9,r11
8001e4ec:	10 9a       	mov	r10,r8
8001e4ee:	12 9b       	mov	r11,r9
8001e4f0:	f0 16 00 08 	mcall	r6[32]
8001e4f4:	18 9a       	mov	r10,r12
8001e4f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4fa:	ea c9 ff be 	sub	r9,r5,-66
8001e4fe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001e502:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e506:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e50a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e50e:	2f 7a       	sub	r10,-9
8001e510:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e514:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e518:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e51c:	2b eb       	sub	r11,-66
8001e51e:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e522:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e526:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e52a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e52e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e532:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e536:	2f 79       	sub	r9,-9
8001e538:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001e53c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e540:	2f f8       	sub	r8,-1
8001e542:	ef 48 ff f4 	st.w	r7[-12],r8
8001e546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e54a:	58 28       	cp.w	r8,2
8001e54c:	fe 9a ff 7e 	brle	8001e448 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001e550:	30 08       	mov	r8,0
8001e552:	ef 48 ff d4 	st.w	r7[-44],r8
8001e556:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e55a:	70 98       	ld.w	r8,r8[0x24]
8001e55c:	ef 48 ff d8 	st.w	r7[-40],r8
8001e560:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e564:	70 a8       	ld.w	r8,r8[0x28]
8001e566:	ef 48 ff dc 	st.w	r7[-36],r8
8001e56a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e56e:	70 b8       	ld.w	r8,r8[0x2c]
8001e570:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001e574:	ee ca 00 7c 	sub	r10,r7,124
8001e578:	20 4d       	sub	sp,16
8001e57a:	1a 98       	mov	r8,sp
8001e57c:	ee c9 00 2c 	sub	r9,r7,44
8001e580:	20 08       	sub	r8,0
8001e582:	20 09       	sub	r9,0
8001e584:	72 0b       	ld.w	r11,r9[0x0]
8001e586:	91 0b       	st.w	r8[0x0],r11
8001e588:	72 1b       	ld.w	r11,r9[0x4]
8001e58a:	91 1b       	st.w	r8[0x4],r11
8001e58c:	72 2b       	ld.w	r11,r9[0x8]
8001e58e:	91 2b       	st.w	r8[0x8],r11
8001e590:	72 39       	ld.w	r9,r9[0xc]
8001e592:	91 39       	st.w	r8[0xc],r9
8001e594:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e598:	20 4d       	sub	sp,16
8001e59a:	1a 98       	mov	r8,sp
8001e59c:	2b 89       	sub	r9,-72
8001e59e:	20 08       	sub	r8,0
8001e5a0:	20 09       	sub	r9,0
8001e5a2:	72 0b       	ld.w	r11,r9[0x0]
8001e5a4:	91 0b       	st.w	r8[0x0],r11
8001e5a6:	72 1b       	ld.w	r11,r9[0x4]
8001e5a8:	91 1b       	st.w	r8[0x4],r11
8001e5aa:	72 2b       	ld.w	r11,r9[0x8]
8001e5ac:	91 2b       	st.w	r8[0x8],r11
8001e5ae:	72 39       	ld.w	r9,r9[0xc]
8001e5b0:	91 39       	st.w	r8[0xc],r9
8001e5b2:	14 9c       	mov	r12,r10
8001e5b4:	fe b0 f6 9a 	rcall	8001d2e8 <quat_local_to_global>
8001e5b8:	2f 8d       	sub	sp,-32
8001e5ba:	ee c8 00 1c 	sub	r8,r7,28
8001e5be:	ee c9 00 7c 	sub	r9,r7,124
8001e5c2:	20 08       	sub	r8,0
8001e5c4:	20 09       	sub	r9,0
8001e5c6:	72 0a       	ld.w	r10,r9[0x0]
8001e5c8:	91 0a       	st.w	r8[0x0],r10
8001e5ca:	72 1a       	ld.w	r10,r9[0x4]
8001e5cc:	91 1a       	st.w	r8[0x4],r10
8001e5ce:	72 2a       	ld.w	r10,r9[0x8]
8001e5d0:	91 2a       	st.w	r8[0x8],r10
8001e5d2:	72 39       	ld.w	r9,r9[0xc]
8001e5d4:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001e5d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e5da:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5de:	91 c9       	st.w	r8[0x30],r9
8001e5e0:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001e5e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5e8:	91 d9       	st.w	r8[0x34],r9
8001e5ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001e5ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5f2:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001e5f4:	30 08       	mov	r8,0
8001e5f6:	ef 48 ff f4 	st.w	r7[-12],r8
8001e5fa:	c2 38       	rjmp	8001e640 <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001e5fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e600:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e604:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e608:	2b ba       	sub	r10,-69
8001e60a:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e60e:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e612:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e616:	2f 4b       	sub	r11,-12
8001e618:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e61c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e620:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e624:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e628:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e62c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e630:	2b b9       	sub	r9,-69
8001e632:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001e636:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e63a:	2f f8       	sub	r8,-1
8001e63c:	ef 48 ff f4 	st.w	r7[-12],r8
8001e640:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e644:	58 28       	cp.w	r8,2
8001e646:	fe 9a ff db 	brle	8001e5fc <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001e64a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e64e:	70 39       	ld.w	r9,r8[0xc]
8001e650:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e654:	f0 f8 01 14 	ld.w	r8,r8[276]
8001e658:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e65c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e660:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001e664:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e668:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e66c:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001e670:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e674:	70 49       	ld.w	r9,r8[0x10]
8001e676:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e67a:	f0 f8 01 18 	ld.w	r8,r8[280]
8001e67e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e682:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e686:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001e68a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e68e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e692:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001e696:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e69a:	70 59       	ld.w	r9,r8[0x14]
8001e69c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e6a0:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e6a4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e6a8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e6ac:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001e6b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e6b4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e6b8:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001e6bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6c0:	70 68       	ld.w	r8,r8[0x18]
8001e6c2:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e6c6:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e6ca:	12 9b       	mov	r11,r9
8001e6cc:	10 9c       	mov	r12,r8
8001e6ce:	f0 16 00 0a 	mcall	r6[40]
8001e6d2:	18 98       	mov	r8,r12
8001e6d4:	10 9c       	mov	r12,r8
8001e6d6:	f0 16 00 02 	mcall	r6[8]
8001e6da:	e0 68 85 1f 	mov	r8,34079
8001e6de:	ea 18 51 eb 	orh	r8,0x51eb
8001e6e2:	e0 69 9e b8 	mov	r9,40632
8001e6e6:	ea 19 40 23 	orh	r9,0x4023
8001e6ea:	f0 16 00 0c 	mcall	r6[48]
8001e6ee:	14 98       	mov	r8,r10
8001e6f0:	16 99       	mov	r9,r11
8001e6f2:	10 92       	mov	r2,r8
8001e6f4:	12 93       	mov	r3,r9
8001e6f6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e6fa:	f0 f8 01 20 	ld.w	r8,r8[288]
8001e6fe:	10 9c       	mov	r12,r8
8001e700:	f0 16 00 02 	mcall	r6[8]
8001e704:	14 98       	mov	r8,r10
8001e706:	16 99       	mov	r9,r11
8001e708:	04 9a       	mov	r10,r2
8001e70a:	06 9b       	mov	r11,r3
8001e70c:	f0 16 00 03 	mcall	r6[12]
8001e710:	14 98       	mov	r8,r10
8001e712:	16 99       	mov	r9,r11
8001e714:	10 92       	mov	r2,r8
8001e716:	12 93       	mov	r3,r9
8001e718:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e71c:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001e720:	10 9c       	mov	r12,r8
8001e722:	f0 16 00 02 	mcall	r6[8]
8001e726:	14 98       	mov	r8,r10
8001e728:	16 99       	mov	r9,r11
8001e72a:	04 9a       	mov	r10,r2
8001e72c:	06 9b       	mov	r11,r3
8001e72e:	f0 16 00 05 	mcall	r6[20]
8001e732:	14 98       	mov	r8,r10
8001e734:	16 99       	mov	r9,r11
8001e736:	10 9a       	mov	r10,r8
8001e738:	12 9b       	mov	r11,r9
8001e73a:	f0 16 00 08 	mcall	r6[32]
8001e73e:	18 99       	mov	r9,r12
8001e740:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e744:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001e748:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e74c:	70 78       	ld.w	r8,r8[0x1c]
8001e74e:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e752:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e756:	12 9b       	mov	r11,r9
8001e758:	10 9c       	mov	r12,r8
8001e75a:	f0 16 00 0a 	mcall	r6[40]
8001e75e:	18 98       	mov	r8,r12
8001e760:	10 9c       	mov	r12,r8
8001e762:	f0 16 00 02 	mcall	r6[8]
8001e766:	e0 68 85 1f 	mov	r8,34079
8001e76a:	ea 18 51 eb 	orh	r8,0x51eb
8001e76e:	e0 69 9e b8 	mov	r9,40632
8001e772:	ea 19 40 23 	orh	r9,0x4023
8001e776:	f0 16 00 0c 	mcall	r6[48]
8001e77a:	14 98       	mov	r8,r10
8001e77c:	16 99       	mov	r9,r11
8001e77e:	10 92       	mov	r2,r8
8001e780:	12 93       	mov	r3,r9
8001e782:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e786:	f0 f8 01 24 	ld.w	r8,r8[292]
8001e78a:	10 9c       	mov	r12,r8
8001e78c:	f0 16 00 02 	mcall	r6[8]
8001e790:	14 98       	mov	r8,r10
8001e792:	16 99       	mov	r9,r11
8001e794:	04 9a       	mov	r10,r2
8001e796:	06 9b       	mov	r11,r3
8001e798:	f0 16 00 03 	mcall	r6[12]
8001e79c:	14 98       	mov	r8,r10
8001e79e:	16 99       	mov	r9,r11
8001e7a0:	10 92       	mov	r2,r8
8001e7a2:	12 93       	mov	r3,r9
8001e7a4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7a8:	f0 f8 01 00 	ld.w	r8,r8[256]
8001e7ac:	10 9c       	mov	r12,r8
8001e7ae:	f0 16 00 02 	mcall	r6[8]
8001e7b2:	14 98       	mov	r8,r10
8001e7b4:	16 99       	mov	r9,r11
8001e7b6:	04 9a       	mov	r10,r2
8001e7b8:	06 9b       	mov	r11,r3
8001e7ba:	f0 16 00 05 	mcall	r6[20]
8001e7be:	14 98       	mov	r8,r10
8001e7c0:	16 99       	mov	r9,r11
8001e7c2:	10 9a       	mov	r10,r8
8001e7c4:	12 9b       	mov	r11,r9
8001e7c6:	f0 16 00 08 	mcall	r6[32]
8001e7ca:	18 99       	mov	r9,r12
8001e7cc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7d0:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001e7d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e7d8:	70 88       	ld.w	r8,r8[0x20]
8001e7da:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e7de:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e7e2:	12 9b       	mov	r11,r9
8001e7e4:	10 9c       	mov	r12,r8
8001e7e6:	f0 16 00 0a 	mcall	r6[40]
8001e7ea:	18 98       	mov	r8,r12
8001e7ec:	10 9c       	mov	r12,r8
8001e7ee:	f0 16 00 02 	mcall	r6[8]
8001e7f2:	e0 68 85 1f 	mov	r8,34079
8001e7f6:	ea 18 51 eb 	orh	r8,0x51eb
8001e7fa:	e0 69 9e b8 	mov	r9,40632
8001e7fe:	ea 19 40 23 	orh	r9,0x4023
8001e802:	f0 16 00 0c 	mcall	r6[48]
8001e806:	14 98       	mov	r8,r10
8001e808:	16 99       	mov	r9,r11
8001e80a:	10 92       	mov	r2,r8
8001e80c:	12 93       	mov	r3,r9
8001e80e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e812:	f0 f8 01 28 	ld.w	r8,r8[296]
8001e816:	10 9c       	mov	r12,r8
8001e818:	f0 16 00 02 	mcall	r6[8]
8001e81c:	14 98       	mov	r8,r10
8001e81e:	16 99       	mov	r9,r11
8001e820:	04 9a       	mov	r10,r2
8001e822:	06 9b       	mov	r11,r3
8001e824:	f0 16 00 03 	mcall	r6[12]
8001e828:	14 98       	mov	r8,r10
8001e82a:	16 99       	mov	r9,r11
8001e82c:	10 92       	mov	r2,r8
8001e82e:	12 93       	mov	r3,r9
8001e830:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e834:	f0 f8 01 04 	ld.w	r8,r8[260]
8001e838:	10 9c       	mov	r12,r8
8001e83a:	f0 16 00 02 	mcall	r6[8]
8001e83e:	14 98       	mov	r8,r10
8001e840:	16 99       	mov	r9,r11
8001e842:	04 9a       	mov	r10,r2
8001e844:	06 9b       	mov	r11,r3
8001e846:	f0 16 00 05 	mcall	r6[20]
8001e84a:	14 98       	mov	r8,r10
8001e84c:	16 99       	mov	r9,r11
8001e84e:	10 9a       	mov	r10,r8
8001e850:	12 9b       	mov	r11,r9
8001e852:	f0 16 00 08 	mcall	r6[32]
8001e856:	18 99       	mov	r9,r12
8001e858:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e85c:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001e860:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e864:	71 b9       	ld.w	r9,r8[0x6c]
8001e866:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e86a:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001e86e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e872:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e876:	f0 f8 01 08 	ld.w	r8,r8[264]
8001e87a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e87e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e882:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001e886:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e88a:	71 c9       	ld.w	r9,r8[0x70]
8001e88c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e890:	f0 f8 01 30 	ld.w	r8,r8[304]
8001e894:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e898:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e89c:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001e8a0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8a4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8a8:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001e8ac:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8b0:	71 d9       	ld.w	r9,r8[0x74]
8001e8b2:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8b6:	f0 f8 01 34 	ld.w	r8,r8[308]
8001e8ba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e8be:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8c2:	f0 f8 01 10 	ld.w	r8,r8[272]
8001e8c6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8ca:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8ce:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001e8d2:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e8d6:	20 4d       	sub	sp,16
8001e8d8:	1a 98       	mov	r8,sp
8001e8da:	2b 89       	sub	r9,-72
8001e8dc:	20 08       	sub	r8,0
8001e8de:	20 09       	sub	r9,0
8001e8e0:	72 0a       	ld.w	r10,r9[0x0]
8001e8e2:	91 0a       	st.w	r8[0x0],r10
8001e8e4:	72 1a       	ld.w	r10,r9[0x4]
8001e8e6:	91 1a       	st.w	r8[0x4],r10
8001e8e8:	72 2a       	ld.w	r10,r9[0x8]
8001e8ea:	91 2a       	st.w	r8[0x8],r10
8001e8ec:	72 39       	ld.w	r9,r9[0xc]
8001e8ee:	91 39       	st.w	r8[0xc],r9
8001e8f0:	f0 16 01 15 	mcall	r6[1108]
8001e8f4:	2f cd       	sub	sp,-16
8001e8f6:	18 99       	mov	r9,r12
8001e8f8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8fc:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001e900:	2e 1d       	sub	sp,-124
8001e902:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001e906:	00 00       	add	r0,r0
8001e908:	80 01       	ld.sh	r1,r0[0x0]
8001e90a:	dc 16       	*unknown*

8001e90c <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001e90c:	eb cd 40 c0 	pushm	r6-r7,lr
8001e910:	1a 97       	mov	r7,sp
8001e912:	20 2d       	sub	sp,8
8001e914:	49 36       	lddpc	r6,8001e960 <simulate_barometer+0x54>
8001e916:	1e 26       	rsub	r6,pc
8001e918:	ef 4c ff fc 	st.w	r7[-4],r12
8001e91c:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001e920:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e924:	f0 f9 01 34 	ld.w	r9,r8[308]
8001e928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e92c:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e930:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001e934:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e938:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001e93a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e93e:	70 e9       	ld.w	r9,r8[0x38]
8001e940:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e944:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001e946:	f0 16 00 0f 	mcall	r6[60]
8001e94a:	18 99       	mov	r9,r12
8001e94c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e950:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001e952:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e956:	30 09       	mov	r9,0
8001e958:	91 89       	st.w	r8[0x20],r9
		
	}
8001e95a:	2f ed       	sub	sp,-8
8001e95c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e960:	80 01       	ld.sh	r1,r0[0x0]
8001e962:	e7 9a       	*unknown*

8001e964 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001e964:	eb cd 40 c0 	pushm	r6-r7,lr
8001e968:	1a 97       	mov	r7,sp
8001e96a:	20 9d       	sub	sp,36
8001e96c:	4a b6       	lddpc	r6,8001ea18 <simulate_gps+0xb4>
8001e96e:	1e 26       	rsub	r6,pc
8001e970:	ef 4c ff e0 	st.w	r7[-32],r12
8001e974:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001e978:	ee cc 00 1c 	sub	r12,r7,28
8001e97c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001e980:	20 cd       	sub	sp,48
8001e982:	1a 99       	mov	r9,sp
8001e984:	12 9b       	mov	r11,r9
8001e986:	f0 ca fe ec 	sub	r10,r8,-276
8001e98a:	f6 c8 00 00 	sub	r8,r11,0
8001e98e:	f4 c9 00 00 	sub	r9,r10,0
8001e992:	72 0e       	ld.w	lr,r9[0x0]
8001e994:	91 0e       	st.w	r8[0x0],lr
8001e996:	72 1e       	ld.w	lr,r9[0x4]
8001e998:	91 1e       	st.w	r8[0x4],lr
8001e99a:	72 2e       	ld.w	lr,r9[0x8]
8001e99c:	91 2e       	st.w	r8[0x8],lr
8001e99e:	72 39       	ld.w	r9,r9[0xc]
8001e9a0:	91 39       	st.w	r8[0xc],r9
8001e9a2:	f6 c8 ff f0 	sub	r8,r11,-16
8001e9a6:	f4 c9 ff f0 	sub	r9,r10,-16
8001e9aa:	72 0e       	ld.w	lr,r9[0x0]
8001e9ac:	91 0e       	st.w	r8[0x0],lr
8001e9ae:	72 1e       	ld.w	lr,r9[0x4]
8001e9b0:	91 1e       	st.w	r8[0x4],lr
8001e9b2:	72 2e       	ld.w	lr,r9[0x8]
8001e9b4:	91 2e       	st.w	r8[0x8],lr
8001e9b6:	72 39       	ld.w	r9,r9[0xc]
8001e9b8:	91 39       	st.w	r8[0xc],r9
8001e9ba:	f6 c8 ff e0 	sub	r8,r11,-32
8001e9be:	f4 c9 ff e0 	sub	r9,r10,-32
8001e9c2:	72 0a       	ld.w	r10,r9[0x0]
8001e9c4:	91 0a       	st.w	r8[0x0],r10
8001e9c6:	72 1a       	ld.w	r10,r9[0x4]
8001e9c8:	91 1a       	st.w	r8[0x4],r10
8001e9ca:	72 2a       	ld.w	r10,r9[0x8]
8001e9cc:	91 2a       	st.w	r8[0x8],r10
8001e9ce:	72 39       	ld.w	r9,r9[0xc]
8001e9d0:	91 39       	st.w	r8[0xc],r9
8001e9d2:	f0 16 00 8a 	mcall	r6[552]
8001e9d6:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001e9d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e9dc:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001e9e0:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001e9e2:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001e9e6:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e9ea:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001e9ee:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001e9f2:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e9f6:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001e9fa:	f0 16 00 0f 	mcall	r6[60]
8001e9fe:	18 99       	mov	r9,r12
8001ea00:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ea04:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001ea08:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001ea0c:	30 28       	mov	r8,2
8001ea0e:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001ea12:	2f 7d       	sub	sp,-36
8001ea14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ea18:	80 01       	ld.sh	r1,r0[0x0]
8001ea1a:	e7 f2 eb cd 	st.wqs	r3[0x734],r2

8001ea1c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001ea1c:	eb cd 40 80 	pushm	r7,lr
8001ea20:	1a 97       	mov	r7,sp
8001ea22:	20 3d       	sub	sp,12
8001ea24:	18 98       	mov	r8,r12
8001ea26:	ef 4b ff f4 	st.w	r7[-12],r11
8001ea2a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001ea2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea32:	90 08       	ld.sh	r8,r8[0x0]
8001ea34:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ea38:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001ea3c:	f3 e8 20 08 	eor	r8,r9,r8
8001ea40:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001ea44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea48:	a5 68       	lsl	r8,0x4
8001ea4a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ea4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea52:	f3 e8 20 08 	eor	r8,r9,r8
8001ea56:	5c 58       	castu.b	r8
8001ea58:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001ea5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea60:	90 08       	ld.sh	r8,r8[0x0]
8001ea62:	5c 78       	castu.h	r8
8001ea64:	a9 88       	lsr	r8,0x8
8001ea66:	5c 88       	casts.h	r8
8001ea68:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea6c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea70:	a9 68       	lsl	r8,0x8
8001ea72:	5c 88       	casts.h	r8
8001ea74:	f3 e8 20 08 	eor	r8,r9,r8
8001ea78:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea7c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea80:	a3 78       	lsl	r8,0x3
8001ea82:	5c 88       	casts.h	r8
8001ea84:	f3 e8 20 08 	eor	r8,r9,r8
8001ea88:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea90:	a5 88       	lsr	r8,0x4
8001ea92:	5c 58       	castu.b	r8
8001ea94:	f3 e8 20 08 	eor	r8,r9,r8
8001ea98:	5c 88       	casts.h	r8
8001ea9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea9e:	b2 08       	st.h	r9[0x0],r8
}
8001eaa0:	2f dd       	sub	sp,-12
8001eaa2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eaa6 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001eaa6:	eb cd 40 80 	pushm	r7,lr
8001eaaa:	1a 97       	mov	r7,sp
8001eaac:	20 1d       	sub	sp,4
8001eaae:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001eab2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eab6:	3f f8       	mov	r8,-1
8001eab8:	b2 08       	st.h	r9[0x0],r8
}
8001eaba:	2f fd       	sub	sp,-4
8001eabc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eac0 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001eac0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eac4:	1a 97       	mov	r7,sp
8001eac6:	20 3d       	sub	sp,12
8001eac8:	49 76       	lddpc	r6,8001eb24 <crc_calculate+0x64>
8001eaca:	1e 26       	rsub	r6,pc
8001eacc:	ef 4c ff f8 	st.w	r7[-8],r12
8001ead0:	16 98       	mov	r8,r11
8001ead2:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001ead6:	ee c8 00 02 	sub	r8,r7,2
8001eada:	10 9c       	mov	r12,r8
8001eadc:	ce 5f       	rcall	8001eaa6 <crc_init>
	while (length--) {
8001eade:	c0 e8       	rjmp	8001eafa <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001eae0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eae4:	11 88       	ld.ub	r8,r8[0x0]
8001eae6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001eaea:	2f f9       	sub	r9,-1
8001eaec:	ef 49 ff f8 	st.w	r7[-8],r9
8001eaf0:	ee c9 00 02 	sub	r9,r7,2
8001eaf4:	12 9b       	mov	r11,r9
8001eaf6:	10 9c       	mov	r12,r8
8001eaf8:	c9 2f       	rcall	8001ea1c <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001eafa:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001eafe:	30 08       	mov	r8,0
8001eb00:	f0 09 19 00 	cp.h	r9,r8
8001eb04:	5f 18       	srne	r8
8001eb06:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eb0a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001eb0e:	20 18       	sub	r8,1
8001eb10:	ef 58 ff f4 	st.h	r7[-12],r8
8001eb14:	58 09       	cp.w	r9,0
8001eb16:	ce 51       	brne	8001eae0 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001eb18:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001eb1c:	10 9c       	mov	r12,r8
8001eb1e:	2f dd       	sub	sp,-12
8001eb20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb24:	80 01       	ld.sh	r1,r0[0x0]
8001eb26:	e9 4e eb cd 	st.w	r4[-5171],lr

8001eb28 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001eb28:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb2c:	1a 97       	mov	r7,sp
8001eb2e:	20 4d       	sub	sp,16
8001eb30:	49 66       	lddpc	r6,8001eb88 <crc_accumulate_buffer+0x60>
8001eb32:	1e 26       	rsub	r6,pc
8001eb34:	ef 4c ff f8 	st.w	r7[-8],r12
8001eb38:	ef 4b ff f4 	st.w	r7[-12],r11
8001eb3c:	14 98       	mov	r8,r10
8001eb3e:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001eb42:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb46:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001eb4a:	c0 d8       	rjmp	8001eb64 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001eb4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb50:	11 88       	ld.ub	r8,r8[0x0]
8001eb52:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb56:	2f f9       	sub	r9,-1
8001eb58:	ef 49 ff fc 	st.w	r7[-4],r9
8001eb5c:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eb60:	10 9c       	mov	r12,r8
8001eb62:	c5 df       	rcall	8001ea1c <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001eb64:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001eb68:	30 08       	mov	r8,0
8001eb6a:	f0 09 18 00 	cp.b	r9,r8
8001eb6e:	5f 18       	srne	r8
8001eb70:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eb74:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001eb78:	20 18       	sub	r8,1
8001eb7a:	ef 68 ff f0 	st.b	r7[-16],r8
8001eb7e:	58 09       	cp.w	r9,0
8001eb80:	ce 61       	brne	8001eb4c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001eb82:	2f cd       	sub	sp,-16
8001eb84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb88:	80 01       	ld.sh	r1,r0[0x0]
8001eb8a:	e9 b6       	*unknown*

8001eb8c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001eb8c:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb90:	1a 97       	mov	r7,sp
8001eb92:	20 1d       	sub	sp,4
8001eb94:	48 96       	lddpc	r6,8001ebb8 <mavlink_get_channel_status+0x2c>
8001eb96:	1e 26       	rsub	r6,pc
8001eb98:	18 98       	mov	r8,r12
8001eb9a:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001eb9e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001eba2:	f0 09 15 04 	lsl	r9,r8,0x4
8001eba6:	ec f8 08 ac 	ld.w	r8,r6[2220]
8001ebaa:	f2 08 00 08 	add	r8,r9,r8
}
8001ebae:	10 9c       	mov	r12,r8
8001ebb0:	2f fd       	sub	sp,-4
8001ebb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ebb6:	00 00       	add	r0,r0
8001ebb8:	80 01       	ld.sh	r1,r0[0x0]
8001ebba:	ea 1a eb cd 	orh	r10,0xebcd

8001ebbc <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001ebbc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ebc0:	1a 97       	mov	r7,sp
8001ebc2:	20 9d       	sub	sp,36
8001ebc4:	4b d6       	lddpc	r6,8001ecb8 <_mav_finalize_message_chan_send+0xfc>
8001ebc6:	1e 26       	rsub	r6,pc
8001ebc8:	ef 4c ff ec 	st.w	r7[-20],r12
8001ebcc:	ef 4a ff e4 	st.w	r7[-28],r10
8001ebd0:	16 9a       	mov	r10,r11
8001ebd2:	ef 6a ff e8 	st.b	r7[-24],r10
8001ebd6:	ef 69 ff e0 	st.b	r7[-32],r9
8001ebda:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001ebde:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ebe2:	5c 58       	castu.b	r8
8001ebe4:	10 9c       	mov	r12,r8
8001ebe6:	cd 3f       	rcall	8001eb8c <mavlink_get_channel_status>
8001ebe8:	18 98       	mov	r8,r12
8001ebea:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001ebee:	3f e8       	mov	r8,-2
8001ebf0:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001ebf4:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ebf8:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001ebfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ec00:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ec04:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001ec08:	ec f8 00 74 	ld.w	r8,r6[116]
8001ec0c:	11 88       	ld.ub	r8,r8[0x0]
8001ec0e:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001ec12:	ec f8 00 74 	ld.w	r8,r6[116]
8001ec16:	11 98       	ld.ub	r8,r8[0x1]
8001ec18:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001ec1c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001ec20:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001ec24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ec28:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ec2c:	2f f8       	sub	r8,-1
8001ec2e:	5c 58       	castu.b	r8
8001ec30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ec34:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001ec38:	ee c8 00 0c 	sub	r8,r7,12
8001ec3c:	2f f8       	sub	r8,-1
8001ec3e:	30 5b       	mov	r11,5
8001ec40:	10 9c       	mov	r12,r8
8001ec42:	c3 ff       	rcall	8001eac0 <crc_calculate>
8001ec44:	18 98       	mov	r8,r12
8001ec46:	5c 88       	casts.h	r8
8001ec48:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001ec4c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001ec50:	ee c8 00 06 	sub	r8,r7,6
8001ec54:	12 9a       	mov	r10,r9
8001ec56:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ec5a:	10 9c       	mov	r12,r8
8001ec5c:	c6 6f       	rcall	8001eb28 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001ec5e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001ec62:	ee c9 00 06 	sub	r9,r7,6
8001ec66:	12 9b       	mov	r11,r9
8001ec68:	10 9c       	mov	r12,r8
8001ec6a:	cd 9e       	rcall	8001ea1c <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001ec6c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ec70:	5c 58       	castu.b	r8
8001ec72:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001ec76:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ec7a:	5c 78       	castu.h	r8
8001ec7c:	a9 88       	lsr	r8,0x8
8001ec7e:	5c 88       	casts.h	r8
8001ec80:	5c 58       	castu.b	r8
8001ec82:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001ec86:	ee c8 00 0c 	sub	r8,r7,12
8001ec8a:	30 6a       	mov	r10,6
8001ec8c:	10 9b       	mov	r11,r8
8001ec8e:	ee fc ff ec 	ld.w	r12,r7[-20]
8001ec92:	c1 5c       	rcall	8001ecbc <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001ec94:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ec98:	10 9a       	mov	r10,r8
8001ec9a:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ec9e:	ee fc ff ec 	ld.w	r12,r7[-20]
8001eca2:	c0 dc       	rcall	8001ecbc <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001eca4:	ee c8 00 10 	sub	r8,r7,16
8001eca8:	30 2a       	mov	r10,2
8001ecaa:	10 9b       	mov	r11,r8
8001ecac:	ee fc ff ec 	ld.w	r12,r7[-20]
8001ecb0:	c0 6c       	rcall	8001ecbc <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001ecb2:	2f 7d       	sub	sp,-36
8001ecb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ecb8:	80 01       	ld.sh	r1,r0[0x0]
8001ecba:	ea 4a eb cd 	cp.w	r10,715725

8001ecbc <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001ecbc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ecc0:	1a 97       	mov	r7,sp
8001ecc2:	20 4d       	sub	sp,16
8001ecc4:	49 46       	lddpc	r6,8001ed14 <_mavlink_send_uart+0x58>
8001ecc6:	1e 26       	rsub	r6,pc
8001ecc8:	ef 4c ff f8 	st.w	r7[-8],r12
8001eccc:	ef 4b ff f4 	st.w	r7[-12],r11
8001ecd0:	14 98       	mov	r8,r10
8001ecd2:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ecd6:	30 08       	mov	r8,0
8001ecd8:	ef 58 ff fe 	st.h	r7[-2],r8
8001ecdc:	c1 28       	rjmp	8001ed00 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001ecde:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001ece2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ece6:	f2 08 00 08 	add	r8,r9,r8
8001ecea:	11 88       	ld.ub	r8,r8[0x0]
8001ecec:	10 9b       	mov	r11,r8
8001ecee:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ecf2:	f0 16 00 d8 	mcall	r6[864]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ecf6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ecfa:	2f f8       	sub	r8,-1
8001ecfc:	ef 58 ff fe 	st.h	r7[-2],r8
8001ed00:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001ed04:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001ed08:	f0 09 19 00 	cp.h	r9,r8
8001ed0c:	ce 93       	brcs	8001ecde <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001ed0e:	2f cd       	sub	sp,-16
8001ed10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ed14:	80 01       	ld.sh	r1,r0[0x0]
8001ed16:	eb 4a eb cd 	st.w	r5[-5171],r10

8001ed18 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001ed18:	eb cd 40 80 	pushm	r7,lr
8001ed1c:	1a 97       	mov	r7,sp
8001ed1e:	20 2d       	sub	sp,8
8001ed20:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed24:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001ed28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed2c:	2f f8       	sub	r8,-1
8001ed2e:	11 88       	ld.ub	r8,r8[0x0]
8001ed30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed34:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001ed36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed3a:	f0 c9 ff ff 	sub	r9,r8,-1
8001ed3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed42:	11 88       	ld.ub	r8,r8[0x0]
8001ed44:	b2 88       	st.b	r9[0x0],r8
}
8001ed46:	2f ed       	sub	sp,-8
8001ed48:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ed4c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001ed4c:	eb cd 40 80 	pushm	r7,lr
8001ed50:	1a 97       	mov	r7,sp
8001ed52:	20 2d       	sub	sp,8
8001ed54:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed58:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001ed5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed60:	2f d8       	sub	r8,-3
8001ed62:	11 88       	ld.ub	r8,r8[0x0]
8001ed64:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed68:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001ed6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed6e:	f0 c9 ff ff 	sub	r9,r8,-1
8001ed72:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed76:	2f e8       	sub	r8,-2
8001ed78:	11 88       	ld.ub	r8,r8[0x0]
8001ed7a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001ed7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed80:	f0 c9 ff fe 	sub	r9,r8,-2
8001ed84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed88:	2f f8       	sub	r8,-1
8001ed8a:	11 88       	ld.ub	r8,r8[0x0]
8001ed8c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001ed8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed92:	f0 c9 ff fd 	sub	r9,r8,-3
8001ed96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed9a:	11 88       	ld.ub	r8,r8[0x0]
8001ed9c:	b2 88       	st.b	r9[0x0],r8
}
8001ed9e:	2f ed       	sub	sp,-8
8001eda0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eda4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001eda4:	eb cd 40 c0 	pushm	r6-r7,lr
8001eda8:	1a 97       	mov	r7,sp
8001edaa:	20 3d       	sub	sp,12
8001edac:	49 06       	lddpc	r6,8001edec <mav_array_memcpy+0x48>
8001edae:	1e 26       	rsub	r6,pc
8001edb0:	ef 4c ff fc 	st.w	r7[-4],r12
8001edb4:	ef 4b ff f8 	st.w	r7[-8],r11
8001edb8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001edbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001edc0:	58 08       	cp.w	r8,0
8001edc2:	c0 91       	brne	8001edd4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001edc4:	ee fa ff f4 	ld.w	r10,r7[-12]
8001edc8:	30 0b       	mov	r11,0
8001edca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001edce:	f0 16 00 31 	mcall	r6[196]
8001edd2:	c0 98       	rjmp	8001ede4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001edd4:	ee fa ff f4 	ld.w	r10,r7[-12]
8001edd8:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eddc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ede0:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001ede4:	2f dd       	sub	sp,-12
8001ede6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001edea:	00 00       	add	r0,r0
8001edec:	80 01       	ld.sh	r1,r0[0x0]
8001edee:	ec 32 eb cd 	sub	r2,912333

8001edf0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001edf0:	eb cd 40 c0 	pushm	r6-r7,lr
8001edf4:	1a 97       	mov	r7,sp
8001edf6:	20 3d       	sub	sp,12
8001edf8:	48 d6       	lddpc	r6,8001ee2c <_MAV_RETURN_uint16_t+0x3c>
8001edfa:	1e 26       	rsub	r6,pc
8001edfc:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee00:	16 98       	mov	r8,r11
8001ee02:	ef 68 ff f4 	st.b	r7[-12],r8
8001ee06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee0a:	2f 88       	sub	r8,-8
8001ee0c:	10 99       	mov	r9,r8
8001ee0e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ee12:	10 09       	add	r9,r8
8001ee14:	ee c8 00 02 	sub	r8,r7,2
8001ee18:	12 9b       	mov	r11,r9
8001ee1a:	10 9c       	mov	r12,r8
8001ee1c:	c7 ef       	rcall	8001ed18 <byte_swap_2>
8001ee1e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ee22:	10 9c       	mov	r12,r8
8001ee24:	2f dd       	sub	sp,-12
8001ee26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee2a:	00 00       	add	r0,r0
8001ee2c:	80 01       	ld.sh	r1,r0[0x0]
8001ee2e:	ec 7e eb cd 	mov	lr,912333

8001ee30 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001ee30:	eb cd 40 c0 	pushm	r6-r7,lr
8001ee34:	1a 97       	mov	r7,sp
8001ee36:	20 3d       	sub	sp,12
8001ee38:	48 d6       	lddpc	r6,8001ee6c <_MAV_RETURN_uint32_t+0x3c>
8001ee3a:	1e 26       	rsub	r6,pc
8001ee3c:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee40:	16 98       	mov	r8,r11
8001ee42:	ef 68 ff f4 	st.b	r7[-12],r8
8001ee46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee4a:	2f 88       	sub	r8,-8
8001ee4c:	10 99       	mov	r9,r8
8001ee4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ee52:	10 09       	add	r9,r8
8001ee54:	ee c8 00 04 	sub	r8,r7,4
8001ee58:	12 9b       	mov	r11,r9
8001ee5a:	10 9c       	mov	r12,r8
8001ee5c:	c7 8f       	rcall	8001ed4c <byte_swap_4>
8001ee5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee62:	10 9c       	mov	r12,r8
8001ee64:	2f dd       	sub	sp,-12
8001ee66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee6a:	00 00       	add	r0,r0
8001ee6c:	80 01       	ld.sh	r1,r0[0x0]
8001ee6e:	ec be       	*unknown*

8001ee70 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001ee70:	eb cd 40 c0 	pushm	r6-r7,lr
8001ee74:	1a 97       	mov	r7,sp
8001ee76:	20 3d       	sub	sp,12
8001ee78:	48 d6       	lddpc	r6,8001eeac <_MAV_RETURN_float+0x3c>
8001ee7a:	1e 26       	rsub	r6,pc
8001ee7c:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee80:	16 98       	mov	r8,r11
8001ee82:	ef 68 ff f4 	st.b	r7[-12],r8
8001ee86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee8a:	2f 88       	sub	r8,-8
8001ee8c:	10 99       	mov	r9,r8
8001ee8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ee92:	10 09       	add	r9,r8
8001ee94:	ee c8 00 04 	sub	r8,r7,4
8001ee98:	12 9b       	mov	r11,r9
8001ee9a:	10 9c       	mov	r12,r8
8001ee9c:	c5 8f       	rcall	8001ed4c <byte_swap_4>
8001ee9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eea2:	10 9c       	mov	r12,r8
8001eea4:	2f dd       	sub	sp,-12
8001eea6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eeaa:	00 00       	add	r0,r0
8001eeac:	80 01       	ld.sh	r1,r0[0x0]
8001eeae:	ec fe eb cd 	ld.w	lr,r6[-5171]

8001eeb0 <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001eeb0:	eb cd 40 80 	pushm	r7,lr
8001eeb4:	1a 97       	mov	r7,sp
8001eeb6:	20 1d       	sub	sp,4
8001eeb8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001eebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eec0:	2f 88       	sub	r8,-8
8001eec2:	2f c8       	sub	r8,-4
8001eec4:	11 88       	ld.ub	r8,r8[0x0]
}
8001eec6:	10 9c       	mov	r12,r8
8001eec8:	2f fd       	sub	sp,-4
8001eeca:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eece <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001eece:	eb cd 40 80 	pushm	r7,lr
8001eed2:	1a 97       	mov	r7,sp
8001eed4:	20 1d       	sub	sp,4
8001eed6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001eeda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eede:	2f 88       	sub	r8,-8
8001eee0:	2f b8       	sub	r8,-5
8001eee2:	11 88       	ld.ub	r8,r8[0x0]
}
8001eee4:	10 9c       	mov	r12,r8
8001eee6:	2f fd       	sub	sp,-4
8001eee8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eeec <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001eeec:	eb cd 40 c0 	pushm	r6-r7,lr
8001eef0:	1a 97       	mov	r7,sp
8001eef2:	20 1d       	sub	sp,4
8001eef4:	48 76       	lddpc	r6,8001ef10 <mavlink_msg_set_mode_get_custom_mode+0x24>
8001eef6:	1e 26       	rsub	r6,pc
8001eef8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001eefc:	30 0b       	mov	r11,0
8001eefe:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef02:	c9 7f       	rcall	8001ee30 <_MAV_RETURN_uint32_t>
8001ef04:	18 98       	mov	r8,r12
}
8001ef06:	10 9c       	mov	r12,r8
8001ef08:	2f fd       	sub	sp,-4
8001ef0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef0e:	00 00       	add	r0,r0
8001ef10:	80 01       	ld.sh	r1,r0[0x0]
8001ef12:	ed 7a eb cd 	stcond	r6[-5171],r10

8001ef14 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001ef14:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef18:	1a 97       	mov	r7,sp
8001ef1a:	20 2d       	sub	sp,8
8001ef1c:	48 f6       	lddpc	r6,8001ef58 <mavlink_msg_set_mode_decode+0x44>
8001ef1e:	1e 26       	rsub	r6,pc
8001ef20:	ef 4c ff fc 	st.w	r7[-4],r12
8001ef24:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001ef28:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef2c:	ce 0f       	rcall	8001eeec <mavlink_msg_set_mode_get_custom_mode>
8001ef2e:	18 99       	mov	r9,r12
8001ef30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef34:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001ef36:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef3a:	cb bf       	rcall	8001eeb0 <mavlink_msg_set_mode_get_target_system>
8001ef3c:	18 98       	mov	r8,r12
8001ef3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ef42:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001ef44:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef48:	cc 3f       	rcall	8001eece <mavlink_msg_set_mode_get_base_mode>
8001ef4a:	18 98       	mov	r8,r12
8001ef4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ef50:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001ef52:	2f ed       	sub	sp,-8
8001ef54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef58:	80 01       	ld.sh	r1,r0[0x0]
8001ef5a:	ed a2       	*unknown*

8001ef5c <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001ef5c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001ef60:	1a 97       	mov	r7,sp
8001ef62:	21 2d       	sub	sp,72
8001ef64:	4c 26       	lddpc	r6,8001f06c <mavlink_msg_mission_item_send+0x110>
8001ef66:	1e 26       	rsub	r6,pc
8001ef68:	ee c5 ff ec 	sub	r5,r7,-20
8001ef6c:	ef 4c ff d4 	st.w	r7[-44],r12
8001ef70:	16 93       	mov	r3,r11
8001ef72:	14 9e       	mov	lr,r10
8001ef74:	12 9c       	mov	r12,r9
8001ef76:	10 9b       	mov	r11,r8
8001ef78:	6a 0a       	ld.w	r10,r5[0x0]
8001ef7a:	6a 19       	ld.w	r9,r5[0x4]
8001ef7c:	6a 28       	ld.w	r8,r5[0x8]
8001ef7e:	ef 63 ff d0 	st.b	r7[-48],r3
8001ef82:	ef 6e ff cc 	st.b	r7[-52],lr
8001ef86:	ef 5c ff c8 	st.h	r7[-56],r12
8001ef8a:	ef 6b ff c4 	st.b	r7[-60],r11
8001ef8e:	ef 5a ff c0 	st.h	r7[-64],r10
8001ef92:	ef 69 ff bc 	st.b	r7[-68],r9
8001ef96:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001ef9a:	ea c9 ff f4 	sub	r9,r5,-12
8001ef9e:	ee c8 00 28 	sub	r8,r7,40
8001efa2:	12 9b       	mov	r11,r9
8001efa4:	10 9c       	mov	r12,r8
8001efa6:	cd 3e       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001efa8:	ea c9 ff f0 	sub	r9,r5,-16
8001efac:	ee c8 00 28 	sub	r8,r7,40
8001efb0:	2f c8       	sub	r8,-4
8001efb2:	12 9b       	mov	r11,r9
8001efb4:	10 9c       	mov	r12,r8
8001efb6:	cc be       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001efb8:	ea c9 ff ec 	sub	r9,r5,-20
8001efbc:	ee c8 00 28 	sub	r8,r7,40
8001efc0:	2f 88       	sub	r8,-8
8001efc2:	12 9b       	mov	r11,r9
8001efc4:	10 9c       	mov	r12,r8
8001efc6:	cc 3e       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001efc8:	ea c9 ff e8 	sub	r9,r5,-24
8001efcc:	ee c8 00 28 	sub	r8,r7,40
8001efd0:	2f 48       	sub	r8,-12
8001efd2:	12 9b       	mov	r11,r9
8001efd4:	10 9c       	mov	r12,r8
8001efd6:	cb be       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001efd8:	ea c9 ff e4 	sub	r9,r5,-28
8001efdc:	ee c8 00 28 	sub	r8,r7,40
8001efe0:	2f 08       	sub	r8,-16
8001efe2:	12 9b       	mov	r11,r9
8001efe4:	10 9c       	mov	r12,r8
8001efe6:	cb 3e       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001efe8:	ea c9 ff e0 	sub	r9,r5,-32
8001efec:	ee c8 00 28 	sub	r8,r7,40
8001eff0:	2e c8       	sub	r8,-20
8001eff2:	12 9b       	mov	r11,r9
8001eff4:	10 9c       	mov	r12,r8
8001eff6:	ca be       	rcall	8001ed4c <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001eff8:	ea c9 ff dc 	sub	r9,r5,-36
8001effc:	ee c8 00 28 	sub	r8,r7,40
8001f000:	2e 88       	sub	r8,-24
8001f002:	12 9b       	mov	r11,r9
8001f004:	10 9c       	mov	r12,r8
8001f006:	ca 3e       	rcall	8001ed4c <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001f008:	ee c9 00 38 	sub	r9,r7,56
8001f00c:	ee c8 00 28 	sub	r8,r7,40
8001f010:	2e 48       	sub	r8,-28
8001f012:	12 9b       	mov	r11,r9
8001f014:	10 9c       	mov	r12,r8
8001f016:	c8 1e       	rcall	8001ed18 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001f018:	ee c9 00 40 	sub	r9,r7,64
8001f01c:	ee c8 00 28 	sub	r8,r7,40
8001f020:	2e 28       	sub	r8,-30
8001f022:	12 9b       	mov	r11,r9
8001f024:	10 9c       	mov	r12,r8
8001f026:	c7 9e       	rcall	8001ed18 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001f028:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001f02c:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001f030:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001f034:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001f038:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001f03c:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001f040:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001f044:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001f048:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001f04c:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001f050:	ee ca 00 28 	sub	r10,r7,40
8001f054:	e0 68 00 fe 	mov	r8,254
8001f058:	32 59       	mov	r9,37
8001f05a:	32 7b       	mov	r11,39
8001f05c:	ee fc ff d4 	ld.w	r12,r7[-44]
8001f060:	fe b0 fd ae 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001f064:	2e ed       	sub	sp,-72
8001f066:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f06a:	00 00       	add	r0,r0
8001f06c:	80 01       	ld.sh	r1,r0[0x0]
8001f06e:	ed ea eb cd 	sthh.w	sp[0x2f0],r6:t,r10:b

8001f070 <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001f070:	eb cd 40 80 	pushm	r7,lr
8001f074:	1a 97       	mov	r7,sp
8001f076:	20 1d       	sub	sp,4
8001f078:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001f07c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f080:	2f 88       	sub	r8,-8
8001f082:	2e 08       	sub	r8,-32
8001f084:	11 88       	ld.ub	r8,r8[0x0]
}
8001f086:	10 9c       	mov	r12,r8
8001f088:	2f fd       	sub	sp,-4
8001f08a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f08e <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001f08e:	eb cd 40 80 	pushm	r7,lr
8001f092:	1a 97       	mov	r7,sp
8001f094:	20 1d       	sub	sp,4
8001f096:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001f09a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f09e:	2f 88       	sub	r8,-8
8001f0a0:	2d f8       	sub	r8,-33
8001f0a2:	11 88       	ld.ub	r8,r8[0x0]
}
8001f0a4:	10 9c       	mov	r12,r8
8001f0a6:	2f fd       	sub	sp,-4
8001f0a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0ac <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001f0ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001f0b0:	1a 97       	mov	r7,sp
8001f0b2:	20 1d       	sub	sp,4
8001f0b4:	48 86       	lddpc	r6,8001f0d4 <mavlink_msg_mission_item_get_seq+0x28>
8001f0b6:	1e 26       	rsub	r6,pc
8001f0b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001f0bc:	31 cb       	mov	r11,28
8001f0be:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f0c2:	c9 7e       	rcall	8001edf0 <_MAV_RETURN_uint16_t>
8001f0c4:	18 98       	mov	r8,r12
8001f0c6:	5c 88       	casts.h	r8
8001f0c8:	5c 88       	casts.h	r8
}
8001f0ca:	10 9c       	mov	r12,r8
8001f0cc:	2f fd       	sub	sp,-4
8001f0ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f0d2:	00 00       	add	r0,r0
8001f0d4:	80 01       	ld.sh	r1,r0[0x0]
8001f0d6:	ef 3a eb cd 	ld.ub	r10,r7[-5171]

8001f0d8 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001f0d8:	eb cd 40 80 	pushm	r7,lr
8001f0dc:	1a 97       	mov	r7,sp
8001f0de:	20 1d       	sub	sp,4
8001f0e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001f0e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f0e8:	2f 88       	sub	r8,-8
8001f0ea:	2d e8       	sub	r8,-34
8001f0ec:	11 88       	ld.ub	r8,r8[0x0]
}
8001f0ee:	10 9c       	mov	r12,r8
8001f0f0:	2f fd       	sub	sp,-4
8001f0f2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0f6 <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001f0f6:	eb cd 40 c0 	pushm	r6-r7,lr
8001f0fa:	1a 97       	mov	r7,sp
8001f0fc:	20 1d       	sub	sp,4
8001f0fe:	48 86       	lddpc	r6,8001f11c <mavlink_msg_mission_item_get_command+0x26>
8001f100:	1e 26       	rsub	r6,pc
8001f102:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001f106:	31 eb       	mov	r11,30
8001f108:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f10c:	c7 2e       	rcall	8001edf0 <_MAV_RETURN_uint16_t>
8001f10e:	18 98       	mov	r8,r12
8001f110:	5c 88       	casts.h	r8
8001f112:	5c 88       	casts.h	r8
}
8001f114:	10 9c       	mov	r12,r8
8001f116:	2f fd       	sub	sp,-4
8001f118:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f11c:	80 01       	ld.sh	r1,r0[0x0]
8001f11e:	ef 84       	*unknown*

8001f120 <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001f120:	eb cd 40 80 	pushm	r7,lr
8001f124:	1a 97       	mov	r7,sp
8001f126:	20 1d       	sub	sp,4
8001f128:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001f12c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f130:	2f 88       	sub	r8,-8
8001f132:	2d d8       	sub	r8,-35
8001f134:	11 88       	ld.ub	r8,r8[0x0]
}
8001f136:	10 9c       	mov	r12,r8
8001f138:	2f fd       	sub	sp,-4
8001f13a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f13e <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001f13e:	eb cd 40 80 	pushm	r7,lr
8001f142:	1a 97       	mov	r7,sp
8001f144:	20 1d       	sub	sp,4
8001f146:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001f14a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f14e:	2f 88       	sub	r8,-8
8001f150:	2d c8       	sub	r8,-36
8001f152:	11 88       	ld.ub	r8,r8[0x0]
}
8001f154:	10 9c       	mov	r12,r8
8001f156:	2f fd       	sub	sp,-4
8001f158:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f15c <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001f15c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f160:	1a 97       	mov	r7,sp
8001f162:	20 1d       	sub	sp,4
8001f164:	48 76       	lddpc	r6,8001f180 <mavlink_msg_mission_item_get_param1+0x24>
8001f166:	1e 26       	rsub	r6,pc
8001f168:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001f16c:	30 0b       	mov	r11,0
8001f16e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f172:	c7 fe       	rcall	8001ee70 <_MAV_RETURN_float>
8001f174:	18 98       	mov	r8,r12
}
8001f176:	10 9c       	mov	r12,r8
8001f178:	2f fd       	sub	sp,-4
8001f17a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f17e:	00 00       	add	r0,r0
8001f180:	80 01       	ld.sh	r1,r0[0x0]
8001f182:	ef ea eb cd 	sthh.w	sp[0x2f0],r7:t,r10:b

8001f184 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001f184:	eb cd 40 c0 	pushm	r6-r7,lr
8001f188:	1a 97       	mov	r7,sp
8001f18a:	20 1d       	sub	sp,4
8001f18c:	48 76       	lddpc	r6,8001f1a8 <mavlink_msg_mission_item_get_param2+0x24>
8001f18e:	1e 26       	rsub	r6,pc
8001f190:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001f194:	30 4b       	mov	r11,4
8001f196:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f19a:	c6 be       	rcall	8001ee70 <_MAV_RETURN_float>
8001f19c:	18 98       	mov	r8,r12
}
8001f19e:	10 9c       	mov	r12,r8
8001f1a0:	2f fd       	sub	sp,-4
8001f1a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1a6:	00 00       	add	r0,r0
8001f1a8:	80 01       	ld.sh	r1,r0[0x0]
8001f1aa:	f0 12 eb cd 	mcall	r2[-20684]

8001f1ac <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001f1ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1b0:	1a 97       	mov	r7,sp
8001f1b2:	20 1d       	sub	sp,4
8001f1b4:	48 76       	lddpc	r6,8001f1d0 <mavlink_msg_mission_item_get_param3+0x24>
8001f1b6:	1e 26       	rsub	r6,pc
8001f1b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001f1bc:	30 8b       	mov	r11,8
8001f1be:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1c2:	c5 7e       	rcall	8001ee70 <_MAV_RETURN_float>
8001f1c4:	18 98       	mov	r8,r12
}
8001f1c6:	10 9c       	mov	r12,r8
8001f1c8:	2f fd       	sub	sp,-4
8001f1ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1ce:	00 00       	add	r0,r0
8001f1d0:	80 01       	ld.sh	r1,r0[0x0]
8001f1d2:	f0 3a eb cd 	sub	r10,-922675

8001f1d4 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001f1d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1d8:	1a 97       	mov	r7,sp
8001f1da:	20 1d       	sub	sp,4
8001f1dc:	48 76       	lddpc	r6,8001f1f8 <mavlink_msg_mission_item_get_param4+0x24>
8001f1de:	1e 26       	rsub	r6,pc
8001f1e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001f1e4:	30 cb       	mov	r11,12
8001f1e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1ea:	c4 3e       	rcall	8001ee70 <_MAV_RETURN_float>
8001f1ec:	18 98       	mov	r8,r12
}
8001f1ee:	10 9c       	mov	r12,r8
8001f1f0:	2f fd       	sub	sp,-4
8001f1f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1f6:	00 00       	add	r0,r0
8001f1f8:	80 01       	ld.sh	r1,r0[0x0]
8001f1fa:	f0 62 eb cd 	mov	r2,-988211

8001f1fc <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001f1fc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f200:	1a 97       	mov	r7,sp
8001f202:	20 1d       	sub	sp,4
8001f204:	48 76       	lddpc	r6,8001f220 <mavlink_msg_mission_item_get_x+0x24>
8001f206:	1e 26       	rsub	r6,pc
8001f208:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001f20c:	31 0b       	mov	r11,16
8001f20e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f212:	c2 fe       	rcall	8001ee70 <_MAV_RETURN_float>
8001f214:	18 98       	mov	r8,r12
}
8001f216:	10 9c       	mov	r12,r8
8001f218:	2f fd       	sub	sp,-4
8001f21a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f21e:	00 00       	add	r0,r0
8001f220:	80 01       	ld.sh	r1,r0[0x0]
8001f222:	f0 8a eb cd 	brle	7fe3c9bc <_estack+0x7fe2c9bc>

8001f224 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001f224:	eb cd 40 c0 	pushm	r6-r7,lr
8001f228:	1a 97       	mov	r7,sp
8001f22a:	20 1d       	sub	sp,4
8001f22c:	48 76       	lddpc	r6,8001f248 <mavlink_msg_mission_item_get_y+0x24>
8001f22e:	1e 26       	rsub	r6,pc
8001f230:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001f234:	31 4b       	mov	r11,20
8001f236:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f23a:	c1 be       	rcall	8001ee70 <_MAV_RETURN_float>
8001f23c:	18 98       	mov	r8,r12
}
8001f23e:	10 9c       	mov	r12,r8
8001f240:	2f fd       	sub	sp,-4
8001f242:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f246:	00 00       	add	r0,r0
8001f248:	80 01       	ld.sh	r1,r0[0x0]
8001f24a:	f0 b2       	*unknown*

8001f24c <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001f24c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f250:	1a 97       	mov	r7,sp
8001f252:	20 1d       	sub	sp,4
8001f254:	48 76       	lddpc	r6,8001f270 <mavlink_msg_mission_item_get_z+0x24>
8001f256:	1e 26       	rsub	r6,pc
8001f258:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001f25c:	31 8b       	mov	r11,24
8001f25e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f262:	c0 7e       	rcall	8001ee70 <_MAV_RETURN_float>
8001f264:	18 98       	mov	r8,r12
}
8001f266:	10 9c       	mov	r12,r8
8001f268:	2f fd       	sub	sp,-4
8001f26a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f26e:	00 00       	add	r0,r0
8001f270:	80 01       	ld.sh	r1,r0[0x0]
8001f272:	f0 da eb cd 	satsub.w	r10,r8,-5171

8001f274 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001f274:	eb cd 40 c0 	pushm	r6-r7,lr
8001f278:	1a 97       	mov	r7,sp
8001f27a:	20 2d       	sub	sp,8
8001f27c:	4b a6       	lddpc	r6,8001f364 <mavlink_msg_mission_item_decode+0xf0>
8001f27e:	1e 26       	rsub	r6,pc
8001f280:	ef 4c ff fc 	st.w	r7[-4],r12
8001f284:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001f288:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f28c:	c6 8f       	rcall	8001f15c <mavlink_msg_mission_item_get_param1>
8001f28e:	18 99       	mov	r9,r12
8001f290:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f294:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001f296:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f29a:	c7 5f       	rcall	8001f184 <mavlink_msg_mission_item_get_param2>
8001f29c:	18 99       	mov	r9,r12
8001f29e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2a2:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001f2a4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2a8:	c8 2f       	rcall	8001f1ac <mavlink_msg_mission_item_get_param3>
8001f2aa:	18 99       	mov	r9,r12
8001f2ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2b0:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001f2b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2b6:	c8 ff       	rcall	8001f1d4 <mavlink_msg_mission_item_get_param4>
8001f2b8:	18 99       	mov	r9,r12
8001f2ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2be:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001f2c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2c4:	c9 cf       	rcall	8001f1fc <mavlink_msg_mission_item_get_x>
8001f2c6:	18 99       	mov	r9,r12
8001f2c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2cc:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001f2ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2d2:	ca 9f       	rcall	8001f224 <mavlink_msg_mission_item_get_y>
8001f2d4:	18 99       	mov	r9,r12
8001f2d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2da:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001f2dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2e0:	cb 6f       	rcall	8001f24c <mavlink_msg_mission_item_get_z>
8001f2e2:	18 99       	mov	r9,r12
8001f2e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2e8:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001f2ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2ee:	cd fe       	rcall	8001f0ac <mavlink_msg_mission_item_get_seq>
8001f2f0:	18 98       	mov	r8,r12
8001f2f2:	5c 88       	casts.h	r8
8001f2f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f2f8:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001f2fc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f300:	cf be       	rcall	8001f0f6 <mavlink_msg_mission_item_get_command>
8001f302:	18 98       	mov	r8,r12
8001f304:	5c 88       	casts.h	r8
8001f306:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f30a:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001f30e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f312:	ca fe       	rcall	8001f070 <mavlink_msg_mission_item_get_target_system>
8001f314:	18 98       	mov	r8,r12
8001f316:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f31a:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001f31e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f322:	cb 6e       	rcall	8001f08e <mavlink_msg_mission_item_get_target_component>
8001f324:	18 98       	mov	r8,r12
8001f326:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f32a:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001f32e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f332:	cd 3e       	rcall	8001f0d8 <mavlink_msg_mission_item_get_frame>
8001f334:	18 98       	mov	r8,r12
8001f336:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f33a:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001f33e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f342:	ce fe       	rcall	8001f120 <mavlink_msg_mission_item_get_current>
8001f344:	18 98       	mov	r8,r12
8001f346:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f34a:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001f34e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f352:	cf 6e       	rcall	8001f13e <mavlink_msg_mission_item_get_autocontinue>
8001f354:	18 98       	mov	r8,r12
8001f356:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f35a:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001f35e:	2f ed       	sub	sp,-8
8001f360:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f364:	80 01       	ld.sh	r1,r0[0x0]
8001f366:	f1 02 eb cd 	ld.sh	r2,r8[-5171]

8001f368 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001f368:	eb cd 40 c0 	pushm	r6-r7,lr
8001f36c:	1a 97       	mov	r7,sp
8001f36e:	20 5d       	sub	sp,20
8001f370:	49 56       	lddpc	r6,8001f3c4 <mavlink_msg_mission_request_send+0x5c>
8001f372:	1e 26       	rsub	r6,pc
8001f374:	ef 4c ff f8 	st.w	r7[-8],r12
8001f378:	12 98       	mov	r8,r9
8001f37a:	16 99       	mov	r9,r11
8001f37c:	ef 69 ff f4 	st.b	r7[-12],r9
8001f380:	14 99       	mov	r9,r10
8001f382:	ef 69 ff f0 	st.b	r7[-16],r9
8001f386:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f38a:	ee c9 00 14 	sub	r9,r7,20
8001f38e:	ee c8 00 04 	sub	r8,r7,4
8001f392:	12 9b       	mov	r11,r9
8001f394:	10 9c       	mov	r12,r8
8001f396:	fe b0 fc c1 	rcall	8001ed18 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f39a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f39e:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f3a2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f3a6:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001f3aa:	ee ca 00 04 	sub	r10,r7,4
8001f3ae:	e0 68 00 e6 	mov	r8,230
8001f3b2:	30 49       	mov	r9,4
8001f3b4:	32 8b       	mov	r11,40
8001f3b6:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f3ba:	fe b0 fc 01 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001f3be:	2f bd       	sub	sp,-20
8001f3c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f3c4:	80 01       	ld.sh	r1,r0[0x0]
8001f3c6:	f1 f6 eb cd 	st.wqs	r8[0x734],r6

8001f3c8 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001f3c8:	eb cd 40 80 	pushm	r7,lr
8001f3cc:	1a 97       	mov	r7,sp
8001f3ce:	20 1d       	sub	sp,4
8001f3d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f3d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f3d8:	2f 88       	sub	r8,-8
8001f3da:	2f e8       	sub	r8,-2
8001f3dc:	11 88       	ld.ub	r8,r8[0x0]
}
8001f3de:	10 9c       	mov	r12,r8
8001f3e0:	2f fd       	sub	sp,-4
8001f3e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f3e6 <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001f3e6:	eb cd 40 80 	pushm	r7,lr
8001f3ea:	1a 97       	mov	r7,sp
8001f3ec:	20 1d       	sub	sp,4
8001f3ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f3f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f3f6:	2f 88       	sub	r8,-8
8001f3f8:	2f d8       	sub	r8,-3
8001f3fa:	11 88       	ld.ub	r8,r8[0x0]
}
8001f3fc:	10 9c       	mov	r12,r8
8001f3fe:	2f fd       	sub	sp,-4
8001f400:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f404 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001f404:	eb cd 40 c0 	pushm	r6-r7,lr
8001f408:	1a 97       	mov	r7,sp
8001f40a:	20 1d       	sub	sp,4
8001f40c:	48 86       	lddpc	r6,8001f42c <mavlink_msg_mission_request_get_seq+0x28>
8001f40e:	1e 26       	rsub	r6,pc
8001f410:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f414:	30 0b       	mov	r11,0
8001f416:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f41a:	fe b0 fc eb 	rcall	8001edf0 <_MAV_RETURN_uint16_t>
8001f41e:	18 98       	mov	r8,r12
8001f420:	5c 88       	casts.h	r8
8001f422:	5c 88       	casts.h	r8
}
8001f424:	10 9c       	mov	r12,r8
8001f426:	2f fd       	sub	sp,-4
8001f428:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f42c:	80 01       	ld.sh	r1,r0[0x0]
8001f42e:	f2 92 eb cd 	brhs	7fe9cbc8 <_estack+0x7fe8cbc8>

8001f430 <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001f430:	eb cd 40 c0 	pushm	r6-r7,lr
8001f434:	1a 97       	mov	r7,sp
8001f436:	20 2d       	sub	sp,8
8001f438:	49 06       	lddpc	r6,8001f478 <mavlink_msg_mission_request_decode+0x48>
8001f43a:	1e 26       	rsub	r6,pc
8001f43c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f440:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001f444:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f448:	cd ef       	rcall	8001f404 <mavlink_msg_mission_request_get_seq>
8001f44a:	18 98       	mov	r8,r12
8001f44c:	5c 88       	casts.h	r8
8001f44e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f452:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001f454:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f458:	cb 8f       	rcall	8001f3c8 <mavlink_msg_mission_request_get_target_system>
8001f45a:	18 98       	mov	r8,r12
8001f45c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f460:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001f462:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f466:	cc 0f       	rcall	8001f3e6 <mavlink_msg_mission_request_get_target_component>
8001f468:	18 98       	mov	r8,r12
8001f46a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f46e:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001f470:	2f ed       	sub	sp,-8
8001f472:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f476:	00 00       	add	r0,r0
8001f478:	80 01       	ld.sh	r1,r0[0x0]
8001f47a:	f2 be       	*unknown*

8001f47c <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001f47c:	eb cd 40 80 	pushm	r7,lr
8001f480:	1a 97       	mov	r7,sp
8001f482:	20 1d       	sub	sp,4
8001f484:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f48c:	2f 88       	sub	r8,-8
8001f48e:	2f e8       	sub	r8,-2
8001f490:	11 88       	ld.ub	r8,r8[0x0]
}
8001f492:	10 9c       	mov	r12,r8
8001f494:	2f fd       	sub	sp,-4
8001f496:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f49a <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001f49a:	eb cd 40 80 	pushm	r7,lr
8001f49e:	1a 97       	mov	r7,sp
8001f4a0:	20 1d       	sub	sp,4
8001f4a2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f4a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f4aa:	2f 88       	sub	r8,-8
8001f4ac:	2f d8       	sub	r8,-3
8001f4ae:	11 88       	ld.ub	r8,r8[0x0]
}
8001f4b0:	10 9c       	mov	r12,r8
8001f4b2:	2f fd       	sub	sp,-4
8001f4b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f4b8 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001f4b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f4bc:	1a 97       	mov	r7,sp
8001f4be:	20 1d       	sub	sp,4
8001f4c0:	48 86       	lddpc	r6,8001f4e0 <mavlink_msg_mission_set_current_get_seq+0x28>
8001f4c2:	1e 26       	rsub	r6,pc
8001f4c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f4c8:	30 0b       	mov	r11,0
8001f4ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4ce:	fe b0 fc 91 	rcall	8001edf0 <_MAV_RETURN_uint16_t>
8001f4d2:	18 98       	mov	r8,r12
8001f4d4:	5c 88       	casts.h	r8
8001f4d6:	5c 88       	casts.h	r8
}
8001f4d8:	10 9c       	mov	r12,r8
8001f4da:	2f fd       	sub	sp,-4
8001f4dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f4e0:	80 01       	ld.sh	r1,r0[0x0]
8001f4e2:	f3 46 eb cd 	st.w	r9[-5171],r6

8001f4e4 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001f4e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f4e8:	1a 97       	mov	r7,sp
8001f4ea:	20 2d       	sub	sp,8
8001f4ec:	49 06       	lddpc	r6,8001f52c <mavlink_msg_mission_set_current_decode+0x48>
8001f4ee:	1e 26       	rsub	r6,pc
8001f4f0:	ef 4c ff fc 	st.w	r7[-4],r12
8001f4f4:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001f4f8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4fc:	cd ef       	rcall	8001f4b8 <mavlink_msg_mission_set_current_get_seq>
8001f4fe:	18 98       	mov	r8,r12
8001f500:	5c 88       	casts.h	r8
8001f502:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f506:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001f508:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f50c:	cb 8f       	rcall	8001f47c <mavlink_msg_mission_set_current_get_target_system>
8001f50e:	18 98       	mov	r8,r12
8001f510:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f514:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001f516:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f51a:	cc 0f       	rcall	8001f49a <mavlink_msg_mission_set_current_get_target_component>
8001f51c:	18 98       	mov	r8,r12
8001f51e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f522:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001f524:	2f ed       	sub	sp,-8
8001f526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f52a:	00 00       	add	r0,r0
8001f52c:	80 01       	ld.sh	r1,r0[0x0]
8001f52e:	f3 72 eb cd 	stcond	r9[-5171],r2

8001f530 <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001f530:	eb cd 40 c0 	pushm	r6-r7,lr
8001f534:	1a 97       	mov	r7,sp
8001f536:	20 3d       	sub	sp,12
8001f538:	48 e6       	lddpc	r6,8001f570 <mavlink_msg_mission_current_send+0x40>
8001f53a:	1e 26       	rsub	r6,pc
8001f53c:	ef 4c ff f8 	st.w	r7[-8],r12
8001f540:	16 98       	mov	r8,r11
8001f542:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f546:	ee c9 00 0c 	sub	r9,r7,12
8001f54a:	ee c8 00 04 	sub	r8,r7,4
8001f54e:	12 9b       	mov	r11,r9
8001f550:	10 9c       	mov	r12,r8
8001f552:	fe b0 fb e3 	rcall	8001ed18 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001f556:	ee ca 00 04 	sub	r10,r7,4
8001f55a:	31 c8       	mov	r8,28
8001f55c:	30 29       	mov	r9,2
8001f55e:	32 ab       	mov	r11,42
8001f560:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f564:	fe b0 fb 2c 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001f568:	2f dd       	sub	sp,-12
8001f56a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f56e:	00 00       	add	r0,r0
8001f570:	80 01       	ld.sh	r1,r0[0x0]
8001f572:	f3 be       	*unknown*

8001f574 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001f574:	eb cd 40 80 	pushm	r7,lr
8001f578:	1a 97       	mov	r7,sp
8001f57a:	20 1d       	sub	sp,4
8001f57c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f584:	2f 88       	sub	r8,-8
8001f586:	11 88       	ld.ub	r8,r8[0x0]
}
8001f588:	10 9c       	mov	r12,r8
8001f58a:	2f fd       	sub	sp,-4
8001f58c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f590 <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001f590:	eb cd 40 80 	pushm	r7,lr
8001f594:	1a 97       	mov	r7,sp
8001f596:	20 1d       	sub	sp,4
8001f598:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f59c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f5a0:	2f 88       	sub	r8,-8
8001f5a2:	2f f8       	sub	r8,-1
8001f5a4:	11 88       	ld.ub	r8,r8[0x0]
}
8001f5a6:	10 9c       	mov	r12,r8
8001f5a8:	2f fd       	sub	sp,-4
8001f5aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f5ae <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001f5ae:	eb cd 40 c0 	pushm	r6-r7,lr
8001f5b2:	1a 97       	mov	r7,sp
8001f5b4:	20 2d       	sub	sp,8
8001f5b6:	48 c6       	lddpc	r6,8001f5e4 <mavlink_msg_mission_request_list_decode+0x36>
8001f5b8:	1e 26       	rsub	r6,pc
8001f5ba:	ef 4c ff fc 	st.w	r7[-4],r12
8001f5be:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001f5c2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f5c6:	cd 7f       	rcall	8001f574 <mavlink_msg_mission_request_list_get_target_system>
8001f5c8:	18 98       	mov	r8,r12
8001f5ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f5ce:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001f5d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f5d4:	cd ef       	rcall	8001f590 <mavlink_msg_mission_request_list_get_target_component>
8001f5d6:	18 98       	mov	r8,r12
8001f5d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f5dc:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001f5de:	2f ed       	sub	sp,-8
8001f5e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f5e4:	80 01       	ld.sh	r1,r0[0x0]
8001f5e6:	f4 3c eb cd 	sub	r12,-660531

8001f5e8 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001f5e8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f5ec:	1a 97       	mov	r7,sp
8001f5ee:	20 5d       	sub	sp,20
8001f5f0:	49 56       	lddpc	r6,8001f644 <mavlink_msg_mission_count_send+0x5c>
8001f5f2:	1e 26       	rsub	r6,pc
8001f5f4:	ef 4c ff f8 	st.w	r7[-8],r12
8001f5f8:	12 98       	mov	r8,r9
8001f5fa:	16 99       	mov	r9,r11
8001f5fc:	ef 69 ff f4 	st.b	r7[-12],r9
8001f600:	14 99       	mov	r9,r10
8001f602:	ef 69 ff f0 	st.b	r7[-16],r9
8001f606:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001f60a:	ee c9 00 14 	sub	r9,r7,20
8001f60e:	ee c8 00 04 	sub	r8,r7,4
8001f612:	12 9b       	mov	r11,r9
8001f614:	10 9c       	mov	r12,r8
8001f616:	fe b0 fb 81 	rcall	8001ed18 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f61a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f61e:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f622:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f626:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001f62a:	ee ca 00 04 	sub	r10,r7,4
8001f62e:	e0 68 00 dd 	mov	r8,221
8001f632:	30 49       	mov	r9,4
8001f634:	32 cb       	mov	r11,44
8001f636:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f63a:	fe b0 fa c1 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001f63e:	2f bd       	sub	sp,-20
8001f640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f644:	80 01       	ld.sh	r1,r0[0x0]
8001f646:	f4 76 eb cd 	mov	r6,-660531

8001f648 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001f648:	eb cd 40 80 	pushm	r7,lr
8001f64c:	1a 97       	mov	r7,sp
8001f64e:	20 1d       	sub	sp,4
8001f650:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f654:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f658:	2f 88       	sub	r8,-8
8001f65a:	2f e8       	sub	r8,-2
8001f65c:	11 88       	ld.ub	r8,r8[0x0]
}
8001f65e:	10 9c       	mov	r12,r8
8001f660:	2f fd       	sub	sp,-4
8001f662:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f666 <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001f666:	eb cd 40 80 	pushm	r7,lr
8001f66a:	1a 97       	mov	r7,sp
8001f66c:	20 1d       	sub	sp,4
8001f66e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f672:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f676:	2f 88       	sub	r8,-8
8001f678:	2f d8       	sub	r8,-3
8001f67a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f67c:	10 9c       	mov	r12,r8
8001f67e:	2f fd       	sub	sp,-4
8001f680:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f684 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001f684:	eb cd 40 c0 	pushm	r6-r7,lr
8001f688:	1a 97       	mov	r7,sp
8001f68a:	20 1d       	sub	sp,4
8001f68c:	48 86       	lddpc	r6,8001f6ac <mavlink_msg_mission_count_get_count+0x28>
8001f68e:	1e 26       	rsub	r6,pc
8001f690:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f694:	30 0b       	mov	r11,0
8001f696:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f69a:	fe b0 fb ab 	rcall	8001edf0 <_MAV_RETURN_uint16_t>
8001f69e:	18 98       	mov	r8,r12
8001f6a0:	5c 88       	casts.h	r8
8001f6a2:	5c 88       	casts.h	r8
}
8001f6a4:	10 9c       	mov	r12,r8
8001f6a6:	2f fd       	sub	sp,-4
8001f6a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f6ac:	80 01       	ld.sh	r1,r0[0x0]
8001f6ae:	f5 12 eb cd 	ld.uh	r2,r10[-5171]

8001f6b0 <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001f6b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f6b4:	1a 97       	mov	r7,sp
8001f6b6:	20 2d       	sub	sp,8
8001f6b8:	49 06       	lddpc	r6,8001f6f8 <mavlink_msg_mission_count_decode+0x48>
8001f6ba:	1e 26       	rsub	r6,pc
8001f6bc:	ef 4c ff fc 	st.w	r7[-4],r12
8001f6c0:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001f6c4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6c8:	cd ef       	rcall	8001f684 <mavlink_msg_mission_count_get_count>
8001f6ca:	18 98       	mov	r8,r12
8001f6cc:	5c 88       	casts.h	r8
8001f6ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6d2:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001f6d4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6d8:	cb 8f       	rcall	8001f648 <mavlink_msg_mission_count_get_target_system>
8001f6da:	18 98       	mov	r8,r12
8001f6dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6e0:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001f6e2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6e6:	cc 0f       	rcall	8001f666 <mavlink_msg_mission_count_get_target_component>
8001f6e8:	18 98       	mov	r8,r12
8001f6ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6ee:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001f6f0:	2f ed       	sub	sp,-8
8001f6f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f6f6:	00 00       	add	r0,r0
8001f6f8:	80 01       	ld.sh	r1,r0[0x0]
8001f6fa:	f5 3e eb cd 	ld.ub	lr,r10[-5171]

8001f6fc <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001f6fc:	eb cd 40 80 	pushm	r7,lr
8001f700:	1a 97       	mov	r7,sp
8001f702:	20 1d       	sub	sp,4
8001f704:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f70c:	2f 88       	sub	r8,-8
8001f70e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f710:	10 9c       	mov	r12,r8
8001f712:	2f fd       	sub	sp,-4
8001f714:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f718 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001f718:	eb cd 40 80 	pushm	r7,lr
8001f71c:	1a 97       	mov	r7,sp
8001f71e:	20 1d       	sub	sp,4
8001f720:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f724:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f728:	2f 88       	sub	r8,-8
8001f72a:	2f f8       	sub	r8,-1
8001f72c:	11 88       	ld.ub	r8,r8[0x0]
}
8001f72e:	10 9c       	mov	r12,r8
8001f730:	2f fd       	sub	sp,-4
8001f732:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f736 <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001f736:	eb cd 40 c0 	pushm	r6-r7,lr
8001f73a:	1a 97       	mov	r7,sp
8001f73c:	20 2d       	sub	sp,8
8001f73e:	48 c6       	lddpc	r6,8001f76c <mavlink_msg_mission_clear_all_decode+0x36>
8001f740:	1e 26       	rsub	r6,pc
8001f742:	ef 4c ff fc 	st.w	r7[-4],r12
8001f746:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001f74a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f74e:	cd 7f       	rcall	8001f6fc <mavlink_msg_mission_clear_all_get_target_system>
8001f750:	18 98       	mov	r8,r12
8001f752:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f756:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001f758:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f75c:	cd ef       	rcall	8001f718 <mavlink_msg_mission_clear_all_get_target_component>
8001f75e:	18 98       	mov	r8,r12
8001f760:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f764:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001f766:	2f ed       	sub	sp,-8
8001f768:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f76c:	80 01       	ld.sh	r1,r0[0x0]
8001f76e:	f5 c4       	*unknown*

8001f770 <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001f770:	eb cd 40 c0 	pushm	r6-r7,lr
8001f774:	1a 97       	mov	r7,sp
8001f776:	20 3d       	sub	sp,12
8001f778:	48 e6       	lddpc	r6,8001f7b0 <mavlink_msg_mission_item_reached_send+0x40>
8001f77a:	1e 26       	rsub	r6,pc
8001f77c:	ef 4c ff f8 	st.w	r7[-8],r12
8001f780:	16 98       	mov	r8,r11
8001f782:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f786:	ee c9 00 0c 	sub	r9,r7,12
8001f78a:	ee c8 00 04 	sub	r8,r7,4
8001f78e:	12 9b       	mov	r11,r9
8001f790:	10 9c       	mov	r12,r8
8001f792:	fe b0 fa c3 	rcall	8001ed18 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001f796:	ee ca 00 04 	sub	r10,r7,4
8001f79a:	30 b8       	mov	r8,11
8001f79c:	30 29       	mov	r9,2
8001f79e:	32 eb       	mov	r11,46
8001f7a0:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f7a4:	fe b0 fa 0c 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001f7a8:	2f dd       	sub	sp,-12
8001f7aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7ae:	00 00       	add	r0,r0
8001f7b0:	80 01       	ld.sh	r1,r0[0x0]
8001f7b2:	f5 fe eb cd 	st.wqs	r10[0x734],lr

8001f7b4 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001f7b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7b8:	1a 97       	mov	r7,sp
8001f7ba:	20 5d       	sub	sp,20
8001f7bc:	49 36       	lddpc	r6,8001f808 <mavlink_msg_mission_ack_send+0x54>
8001f7be:	1e 26       	rsub	r6,pc
8001f7c0:	ef 4c ff f8 	st.w	r7[-8],r12
8001f7c4:	12 98       	mov	r8,r9
8001f7c6:	16 99       	mov	r9,r11
8001f7c8:	ef 69 ff f4 	st.b	r7[-12],r9
8001f7cc:	14 99       	mov	r9,r10
8001f7ce:	ef 69 ff f0 	st.b	r7[-16],r9
8001f7d2:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001f7d6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f7da:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001f7de:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f7e2:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001f7e6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001f7ea:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001f7ee:	ee ca 00 04 	sub	r10,r7,4
8001f7f2:	e0 68 00 99 	mov	r8,153
8001f7f6:	30 39       	mov	r9,3
8001f7f8:	32 fb       	mov	r11,47
8001f7fa:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f7fe:	fe b0 f9 df 	rcall	8001ebbc <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001f802:	2f bd       	sub	sp,-20
8001f804:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f808:	80 01       	ld.sh	r1,r0[0x0]
8001f80a:	f6 42 eb cd 	cp.w	r2,-594995

8001f80c <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001f80c:	eb cd 40 80 	pushm	r7,lr
8001f810:	1a 97       	mov	r7,sp
8001f812:	20 1d       	sub	sp,4
8001f814:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f81c:	2f 88       	sub	r8,-8
8001f81e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f820:	10 9c       	mov	r12,r8
8001f822:	2f fd       	sub	sp,-4
8001f824:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f828 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001f828:	eb cd 40 80 	pushm	r7,lr
8001f82c:	1a 97       	mov	r7,sp
8001f82e:	20 1d       	sub	sp,4
8001f830:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f834:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f838:	2f 88       	sub	r8,-8
8001f83a:	2f f8       	sub	r8,-1
8001f83c:	11 88       	ld.ub	r8,r8[0x0]
}
8001f83e:	10 9c       	mov	r12,r8
8001f840:	2f fd       	sub	sp,-4
8001f842:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f846 <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001f846:	eb cd 40 80 	pushm	r7,lr
8001f84a:	1a 97       	mov	r7,sp
8001f84c:	20 1d       	sub	sp,4
8001f84e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f852:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f856:	2f 88       	sub	r8,-8
8001f858:	2f e8       	sub	r8,-2
8001f85a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f85c:	10 9c       	mov	r12,r8
8001f85e:	2f fd       	sub	sp,-4
8001f860:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f864 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001f864:	eb cd 40 c0 	pushm	r6-r7,lr
8001f868:	1a 97       	mov	r7,sp
8001f86a:	20 2d       	sub	sp,8
8001f86c:	48 f6       	lddpc	r6,8001f8a8 <mavlink_msg_mission_ack_decode+0x44>
8001f86e:	1e 26       	rsub	r6,pc
8001f870:	ef 4c ff fc 	st.w	r7[-4],r12
8001f874:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001f878:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f87c:	cc 8f       	rcall	8001f80c <mavlink_msg_mission_ack_get_target_system>
8001f87e:	18 98       	mov	r8,r12
8001f880:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f884:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001f886:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f88a:	cc ff       	rcall	8001f828 <mavlink_msg_mission_ack_get_target_component>
8001f88c:	18 98       	mov	r8,r12
8001f88e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f892:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001f894:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f898:	cd 7f       	rcall	8001f846 <mavlink_msg_mission_ack_get_type>
8001f89a:	18 98       	mov	r8,r12
8001f89c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f8a0:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001f8a2:	2f ed       	sub	sp,-8
8001f8a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f8a8:	80 01       	ld.sh	r1,r0[0x0]
8001f8aa:	f6 f2 eb cd 	ld.w	r2,r11[-5171]

8001f8ac <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001f8ac:	eb cd 40 80 	pushm	r7,lr
8001f8b0:	1a 97       	mov	r7,sp
8001f8b2:	20 3d       	sub	sp,12
8001f8b4:	ef 4c ff f8 	st.w	r7[-8],r12
8001f8b8:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001f8bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8c0:	70 09       	ld.w	r9,r8[0x0]
8001f8c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8c6:	70 08       	ld.w	r8,r8[0x0]
8001f8c8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f8cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8d0:	2f c8       	sub	r8,-4
8001f8d2:	70 0a       	ld.w	r10,r8[0x0]
8001f8d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8d8:	2f c8       	sub	r8,-4
8001f8da:	70 08       	ld.w	r8,r8[0x0]
8001f8dc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f8e0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f8e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8e8:	2f 88       	sub	r8,-8
8001f8ea:	70 0a       	ld.w	r10,r8[0x0]
8001f8ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8f0:	2f 88       	sub	r8,-8
8001f8f2:	70 08       	ld.w	r8,r8[0x0]
8001f8f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f8f8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001f8fc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001f900:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f904:	10 9c       	mov	r12,r8
8001f906:	2f dd       	sub	sp,-12
8001f908:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f90c <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001f90c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f910:	1a 97       	mov	r7,sp
8001f912:	20 2d       	sub	sp,8
8001f914:	48 96       	lddpc	r6,8001f938 <vector_norm_sqr+0x2c>
8001f916:	1e 26       	rsub	r6,pc
8001f918:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001f91c:	ee fb ff f8 	ld.w	r11,r7[-8]
8001f920:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f924:	cc 4f       	rcall	8001f8ac <scalar_product>
8001f926:	18 98       	mov	r8,r12
8001f928:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001f92c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f930:	10 9c       	mov	r12,r8
8001f932:	2f ed       	sub	sp,-8
8001f934:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f938:	80 01       	ld.sh	r1,r0[0x0]
8001f93a:	f7 9a       	*unknown*

8001f93c <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001f93c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f940:	1a 97       	mov	r7,sp
8001f942:	48 e6       	lddpc	r6,8001f978 <get_thrust_from_remote+0x3c>
8001f944:	1e 26       	rsub	r6,pc
8001f946:	30 0c       	mov	r12,0
8001f948:	f0 16 00 1c 	mcall	r6[112]
8001f94c:	18 98       	mov	r8,r12
8001f94e:	10 9c       	mov	r12,r8
8001f950:	f0 16 00 1a 	mcall	r6[104]
8001f954:	30 08       	mov	r8,0
8001f956:	e0 69 60 00 	mov	r9,24576
8001f95a:	ea 19 40 7b 	orh	r9,0x407b
8001f95e:	f0 16 00 0c 	mcall	r6[48]
8001f962:	14 98       	mov	r8,r10
8001f964:	16 99       	mov	r9,r11
8001f966:	10 9a       	mov	r10,r8
8001f968:	12 9b       	mov	r11,r9
8001f96a:	f0 16 00 08 	mcall	r6[32]
8001f96e:	18 98       	mov	r8,r12
8001f970:	10 9c       	mov	r12,r8
8001f972:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f976:	00 00       	add	r0,r0
8001f978:	80 01       	ld.sh	r1,r0[0x0]
8001f97a:	f7 c8       	*unknown*

8001f97c <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8001f97c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f980:	1a 97       	mov	r7,sp
8001f982:	49 c6       	lddpc	r6,8001f9f0 <init_waypoint_handler+0x74>
8001f984:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
8001f986:	f0 16 00 0f 	mcall	r6[60]
8001f98a:	18 99       	mov	r9,r12
8001f98c:	ec f8 01 80 	ld.w	r8,r6[384]
8001f990:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
8001f992:	ec f8 04 20 	ld.w	r8,r6[1056]
8001f996:	e0 69 27 10 	mov	r9,10000
8001f99a:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8001f99c:	f0 16 00 33 	mcall	r6[204]
8001f9a0:	18 99       	mov	r9,r12
8001f9a2:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9a6:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
8001f9a8:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9ac:	70 08       	ld.w	r8,r8[0x0]
8001f9ae:	30 19       	mov	r9,1
8001f9b0:	f1 49 12 e4 	st.w	r8[4836],r9
	centralData->critical_init = false;
8001f9b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9b8:	70 09       	ld.w	r9,r8[0x0]
8001f9ba:	30 08       	mov	r8,0
8001f9bc:	f3 68 10 b9 	st.b	r9[4281],r8
	centralData->critical_next_state = false;
8001f9c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9c4:	70 09       	ld.w	r9,r8[0x0]
8001f9c6:	30 08       	mov	r8,0
8001f9c8:	f3 68 10 ba 	st.b	r9[4282],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8001f9cc:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9d0:	70 08       	ld.w	r8,r8[0x0]
8001f9d2:	f0 c9 ef e4 	sub	r9,r8,-4124
8001f9d6:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9da:	70 08       	ld.w	r8,r8[0x0]
8001f9dc:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001f9e0:	12 9b       	mov	r11,r9
8001f9e2:	10 9c       	mov	r12,r8
8001f9e4:	f0 16 01 5c 	mcall	r6[1392]
	init_wp();
8001f9e8:	f0 16 00 8f 	mcall	r6[572]
}
8001f9ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f9f0:	80 01       	ld.sh	r1,r0[0x0]
8001f9f2:	f8 08       	*unknown*
8001f9f4:	4e 61       	lddpc	r1,8001fb8c <init_wp+0x178>
8001f9f6:	76 20       	ld.w	r0,r11[0x8]
8001f9f8:	69 6e       	ld.w	lr,r4[0x58]
8001f9fa:	69 74       	ld.w	r4,r4[0x5c]
8001f9fc:	0a 00       	add	r0,r5
8001f9fe:	00 00       	add	r0,r0
8001fa00:	57 61       	stdsp	sp[0x1d8],r1
8001fa02:	79 70       	ld.w	r0,r12[0x5c]
8001fa04:	6f 69       	ld.w	r9,r7[0x58]
8001fa06:	6e 74       	ld.w	r4,r7[0x1c]
8001fa08:	20 4e       	sub	lr,4
8001fa0a:	72 00       	ld.w	r0,r9[0x0]
8001fa0c:	20 73       	sub	r3,7
8001fa0e:	65 74       	ld.w	r4,r2[0x5c]
8001fa10:	2c 0a       	sub	r10,-64
	...

8001fa14 <init_wp>:

void init_wp()
{
8001fa14:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001fa18:	1a 97       	mov	r7,sp
8001fa1a:	21 0d       	sub	sp,64
8001fa1c:	fe f6 02 f8 	ld.w	r6,pc[760]
8001fa20:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
8001fa22:	ec f8 03 50 	ld.w	r8,r6[848]
8001fa26:	70 08       	ld.w	r8,r8[0x0]
8001fa28:	58 08       	cp.w	r8,0
8001fa2a:	c0 51       	brne	8001fa34 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8001fa2c:	fe cc 00 38 	sub	r12,pc,56
8001fa30:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
8001fa34:	ec f8 03 50 	ld.w	r8,r6[848]
8001fa38:	70 08       	ld.w	r8,r8[0x0]
8001fa3a:	f0 c9 ff ff 	sub	r9,r8,-1
8001fa3e:	e0 68 4d d3 	mov	r8,19923
8001fa42:	ea 18 10 62 	orh	r8,0x1062
8001fa46:	f2 08 04 4a 	muls.d	r10,r9,r8
8001fa4a:	f6 0a 14 06 	asr	r10,r11,0x6
8001fa4e:	f2 08 14 1f 	asr	r8,r9,0x1f
8001fa52:	f4 08 01 08 	sub	r8,r10,r8
8001fa56:	e0 6a 03 e8 	mov	r10,1000
8001fa5a:	b5 38       	mul	r8,r10
8001fa5c:	f2 08 01 08 	sub	r8,r9,r8
8001fa60:	ec f9 03 50 	ld.w	r9,r6[848]
8001fa64:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
8001fa66:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa6a:	70 08       	ld.w	r8,r8[0x0]
8001fa6c:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001fa70:	58 08       	cp.w	r8,0
8001fa72:	e0 80 01 4e 	breq	8001fd0e <init_wp+0x2fa>
8001fa76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa7a:	70 08       	ld.w	r8,r8[0x0]
8001fa7c:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8001fa80:	58 08       	cp.w	r8,0
8001fa82:	c0 91       	brne	8001fa94 <init_wp+0x80>
8001fa84:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa88:	70 08       	ld.w	r8,r8[0x0]
8001fa8a:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8001fa8e:	58 08       	cp.w	r8,0
8001fa90:	e0 80 01 3f 	breq	8001fd0e <init_wp+0x2fa>
8001fa94:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa98:	70 08       	ld.w	r8,r8[0x0]
8001fa9a:	f1 38 10 b6 	ld.ub	r8,r8[4278]
8001fa9e:	ec 18 00 01 	eorl	r8,0x1
8001faa2:	5c 58       	castu.b	r8
8001faa4:	e0 80 01 35 	breq	8001fd0e <init_wp+0x2fa>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001faa8:	30 08       	mov	r8,0
8001faaa:	ef 68 ff fe 	st.b	r7[-2],r8
8001faae:	c2 59       	rjmp	8001fcf8 <init_wp+0x2e4>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
8001fab0:	ec f8 00 00 	ld.w	r8,r6[0]
8001fab4:	70 0a       	ld.w	r10,r8[0x0]
8001fab6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001faba:	12 98       	mov	r8,r9
8001fabc:	a1 78       	lsl	r8,0x1
8001fabe:	12 08       	add	r8,r9
8001fac0:	a5 68       	lsl	r8,0x4
8001fac2:	f4 08 00 08 	add	r8,r10,r8
8001fac6:	f0 c8 f1 f0 	sub	r8,r8,-3600
8001faca:	11 89       	ld.ub	r9,r8[0x0]
8001facc:	30 18       	mov	r8,1
8001face:	f0 09 18 00 	cp.b	r9,r8
8001fad2:	e0 81 01 0e 	brne	8001fcee <init_wp+0x2da>
8001fad6:	ec f8 00 00 	ld.w	r8,r6[0]
8001fada:	70 08       	ld.w	r8,r8[0x0]
8001fadc:	f1 38 10 b4 	ld.ub	r8,r8[4276]
8001fae0:	ec 18 00 01 	eorl	r8,0x1
8001fae4:	5c 58       	castu.b	r8
8001fae6:	e0 80 01 04 	breq	8001fcee <init_wp+0x2da>
			{
				centralData->current_wp_count = i;
8001faea:	ec f8 00 00 	ld.w	r8,r6[0]
8001faee:	70 09       	ld.w	r9,r8[0x0]
8001faf0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001faf4:	f3 68 10 1e 	st.b	r9[4126],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
8001faf8:	ec f8 00 00 	ld.w	r8,r6[0]
8001fafc:	70 0a       	ld.w	r10,r8[0x0]
8001fafe:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb02:	70 0b       	ld.w	r11,r8[0x0]
8001fb04:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb08:	70 08       	ld.w	r8,r8[0x0]
8001fb0a:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8001fb0e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001fb12:	12 98       	mov	r8,r9
8001fb14:	a1 78       	lsl	r8,0x1
8001fb16:	12 08       	add	r8,r9
8001fb18:	a5 68       	lsl	r8,0x4
8001fb1a:	f6 08 00 08 	add	r8,r11,r8
8001fb1e:	f0 c8 f1 f4 	sub	r8,r8,-3596
8001fb22:	f4 cb f0 14 	sub	r11,r10,-4076
8001fb26:	10 9a       	mov	r10,r8
8001fb28:	f6 c8 00 00 	sub	r8,r11,0
8001fb2c:	f4 c9 00 00 	sub	r9,r10,0
8001fb30:	72 0c       	ld.w	r12,r9[0x0]
8001fb32:	91 0c       	st.w	r8[0x0],r12
8001fb34:	72 1c       	ld.w	r12,r9[0x4]
8001fb36:	91 1c       	st.w	r8[0x4],r12
8001fb38:	72 2c       	ld.w	r12,r9[0x8]
8001fb3a:	91 2c       	st.w	r8[0x8],r12
8001fb3c:	72 39       	ld.w	r9,r9[0xc]
8001fb3e:	91 39       	st.w	r8[0xc],r9
8001fb40:	f6 c8 ff f0 	sub	r8,r11,-16
8001fb44:	f4 c9 ff f0 	sub	r9,r10,-16
8001fb48:	72 0c       	ld.w	r12,r9[0x0]
8001fb4a:	91 0c       	st.w	r8[0x0],r12
8001fb4c:	72 1c       	ld.w	r12,r9[0x4]
8001fb4e:	91 1c       	st.w	r8[0x4],r12
8001fb50:	72 2c       	ld.w	r12,r9[0x8]
8001fb52:	91 2c       	st.w	r8[0x8],r12
8001fb54:	72 39       	ld.w	r9,r9[0xc]
8001fb56:	91 39       	st.w	r8[0xc],r9
8001fb58:	f6 c8 ff e0 	sub	r8,r11,-32
8001fb5c:	f4 c9 ff e0 	sub	r9,r10,-32
8001fb60:	72 0a       	ld.w	r10,r9[0x0]
8001fb62:	91 0a       	st.w	r8[0x0],r10
8001fb64:	72 1a       	ld.w	r10,r9[0x4]
8001fb66:	91 1a       	st.w	r8[0x4],r10
8001fb68:	72 2a       	ld.w	r10,r9[0x8]
8001fb6a:	91 2a       	st.w	r8[0x8],r10
8001fb6c:	72 39       	ld.w	r9,r9[0xc]
8001fb6e:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8001fb70:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb74:	70 05       	ld.w	r5,r8[0x0]
8001fb76:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb7a:	70 08       	ld.w	r8,r8[0x0]
8001fb7c:	ec f9 00 00 	ld.w	r9,r6[0]
8001fb80:	72 0e       	ld.w	lr,r9[0x0]
8001fb82:	ee cc 00 40 	sub	r12,r7,64
8001fb86:	20 7d       	sub	sp,28
8001fb88:	1a 99       	mov	r9,sp
8001fb8a:	12 9a       	mov	r10,r9
8001fb8c:	f0 cb f2 54 	sub	r11,r8,-3500
8001fb90:	f4 c8 00 00 	sub	r8,r10,0
8001fb94:	f6 c9 00 00 	sub	r9,r11,0
8001fb98:	72 03       	ld.w	r3,r9[0x0]
8001fb9a:	91 03       	st.w	r8[0x0],r3
8001fb9c:	72 13       	ld.w	r3,r9[0x4]
8001fb9e:	91 13       	st.w	r8[0x4],r3
8001fba0:	72 23       	ld.w	r3,r9[0x8]
8001fba2:	91 23       	st.w	r8[0x8],r3
8001fba4:	72 39       	ld.w	r9,r9[0xc]
8001fba6:	91 39       	st.w	r8[0xc],r9
8001fba8:	f6 e8 00 10 	ld.d	r8,r11[16]
8001fbac:	f4 e9 00 10 	st.d	r10[16],r8
8001fbb0:	76 68       	ld.w	r8,r11[0x18]
8001fbb2:	95 68       	st.w	r10[0x18],r8
8001fbb4:	20 cd       	sub	sp,48
8001fbb6:	1a 98       	mov	r8,sp
8001fbb8:	10 9b       	mov	r11,r8
8001fbba:	fc ca f0 14 	sub	r10,lr,-4076
8001fbbe:	f6 c8 00 00 	sub	r8,r11,0
8001fbc2:	f4 c9 00 00 	sub	r9,r10,0
8001fbc6:	72 0e       	ld.w	lr,r9[0x0]
8001fbc8:	91 0e       	st.w	r8[0x0],lr
8001fbca:	72 1e       	ld.w	lr,r9[0x4]
8001fbcc:	91 1e       	st.w	r8[0x4],lr
8001fbce:	72 2e       	ld.w	lr,r9[0x8]
8001fbd0:	91 2e       	st.w	r8[0x8],lr
8001fbd2:	72 39       	ld.w	r9,r9[0xc]
8001fbd4:	91 39       	st.w	r8[0xc],r9
8001fbd6:	f6 c8 ff f0 	sub	r8,r11,-16
8001fbda:	f4 c9 ff f0 	sub	r9,r10,-16
8001fbde:	72 0e       	ld.w	lr,r9[0x0]
8001fbe0:	91 0e       	st.w	r8[0x0],lr
8001fbe2:	72 1e       	ld.w	lr,r9[0x4]
8001fbe4:	91 1e       	st.w	r8[0x4],lr
8001fbe6:	72 2e       	ld.w	lr,r9[0x8]
8001fbe8:	91 2e       	st.w	r8[0x8],lr
8001fbea:	72 39       	ld.w	r9,r9[0xc]
8001fbec:	91 39       	st.w	r8[0xc],r9
8001fbee:	f6 c8 ff e0 	sub	r8,r11,-32
8001fbf2:	f4 c9 ff e0 	sub	r9,r10,-32
8001fbf6:	72 0a       	ld.w	r10,r9[0x0]
8001fbf8:	91 0a       	st.w	r8[0x0],r10
8001fbfa:	72 1a       	ld.w	r10,r9[0x4]
8001fbfc:	91 1a       	st.w	r8[0x4],r10
8001fbfe:	72 2a       	ld.w	r10,r9[0x8]
8001fc00:	91 2a       	st.w	r8[0x8],r10
8001fc02:	72 39       	ld.w	r9,r9[0xc]
8001fc04:	91 39       	st.w	r8[0xc],r9
8001fc06:	f0 16 01 01 	mcall	r6[1028]
8001fc0a:	2e dd       	sub	sp,-76
8001fc0c:	ea cb ef e0 	sub	r11,r5,-4128
8001fc10:	ee ca 00 40 	sub	r10,r7,64
8001fc14:	f6 c8 00 00 	sub	r8,r11,0
8001fc18:	f4 c9 00 00 	sub	r9,r10,0
8001fc1c:	72 0c       	ld.w	r12,r9[0x0]
8001fc1e:	91 0c       	st.w	r8[0x0],r12
8001fc20:	72 1c       	ld.w	r12,r9[0x4]
8001fc22:	91 1c       	st.w	r8[0x4],r12
8001fc24:	72 2c       	ld.w	r12,r9[0x8]
8001fc26:	91 2c       	st.w	r8[0x8],r12
8001fc28:	72 39       	ld.w	r9,r9[0xc]
8001fc2a:	91 39       	st.w	r8[0xc],r9
8001fc2c:	f6 c8 ff f0 	sub	r8,r11,-16
8001fc30:	f4 c9 ff f0 	sub	r9,r10,-16
8001fc34:	72 0c       	ld.w	r12,r9[0x0]
8001fc36:	91 0c       	st.w	r8[0x0],r12
8001fc38:	72 1c       	ld.w	r12,r9[0x4]
8001fc3a:	91 1c       	st.w	r8[0x4],r12
8001fc3c:	72 2c       	ld.w	r12,r9[0x8]
8001fc3e:	91 2c       	st.w	r8[0x8],r12
8001fc40:	72 39       	ld.w	r9,r9[0xc]
8001fc42:	91 39       	st.w	r8[0xc],r9
8001fc44:	f6 c8 ff e0 	sub	r8,r11,-32
8001fc48:	f4 c9 ff e0 	sub	r9,r10,-32
8001fc4c:	72 0a       	ld.w	r10,r9[0x0]
8001fc4e:	91 0a       	st.w	r8[0x0],r10
8001fc50:	72 1a       	ld.w	r10,r9[0x4]
8001fc52:	91 1a       	st.w	r8[0x4],r10
8001fc54:	72 2a       	ld.w	r10,r9[0x8]
8001fc56:	91 2a       	st.w	r8[0x8],r10
8001fc58:	72 39       	ld.w	r9,r9[0xc]
8001fc5a:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
8001fc5c:	fe cc 02 5c 	sub	r12,pc,604
8001fc60:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
8001fc64:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fc68:	30 ab       	mov	r11,10
8001fc6a:	10 9c       	mov	r12,r8
8001fc6c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8001fc70:	fe cc 02 64 	sub	r12,pc,612
8001fc74:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
8001fc78:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc7c:	70 09       	ld.w	r9,r8[0x0]
8001fc7e:	30 18       	mov	r8,1
8001fc80:	f3 68 10 b4 	st.b	r9[4276],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fc84:	30 08       	mov	r8,0
8001fc86:	ef 68 ff ff 	st.b	r7[-1],r8
8001fc8a:	c2 18       	rjmp	8001fccc <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8001fc8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fc90:	ec f9 00 00 	ld.w	r9,r6[0]
8001fc94:	72 09       	ld.w	r9,r9[0x0]
8001fc96:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001fc9a:	f4 ca fb f8 	sub	r10,r10,-1032
8001fc9e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001fca2:	ec f9 00 00 	ld.w	r9,r6[0]
8001fca6:	72 09       	ld.w	r9,r9[0x0]
8001fca8:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8001fcac:	f6 cb fc 99 	sub	r11,r11,-871
8001fcb0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8001fcb4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001fcb8:	a3 68       	lsl	r8,0x2
8001fcba:	ee 08 00 08 	add	r8,r7,r8
8001fcbe:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fcc2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fcc6:	2f f8       	sub	r8,-1
8001fcc8:	ef 68 ff ff 	st.b	r7[-1],r8
8001fccc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001fcd0:	30 28       	mov	r8,2
8001fcd2:	f0 09 18 00 	cp.b	r9,r8
8001fcd6:	fe 98 ff db 	brls	8001fc8c <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8001fcda:	ec f8 00 00 	ld.w	r8,r6[0]
8001fcde:	70 05       	ld.w	r5,r8[0x0]
8001fce0:	ee c8 00 10 	sub	r8,r7,16
8001fce4:	10 9c       	mov	r12,r8
8001fce6:	c1 3e       	rcall	8001f90c <vector_norm_sqr>
8001fce8:	18 98       	mov	r8,r12
8001fcea:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fcee:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fcf2:	2f f8       	sub	r8,-1
8001fcf4:	ef 68 ff fe 	st.b	r7[-2],r8
8001fcf8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fcfc:	ec f8 00 00 	ld.w	r8,r6[0]
8001fd00:	70 08       	ld.w	r8,r8[0x0]
8001fd02:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001fd06:	f0 09 19 00 	cp.h	r9,r8
8001fd0a:	fe 93 fe d3 	brlo	8001fab0 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8001fd0e:	2f 0d       	sub	sp,-64
8001fd10:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001fd14:	80 01       	ld.sh	r1,r0[0x0]
8001fd16:	f8 a4       	*unknown*
8001fd18:	4e 75       	lddpc	r5,8001feb4 <init_waypoint_list+0x17e>
8001fd1a:	6d 62       	ld.w	r2,r6[0x58]
8001fd1c:	65 72       	ld.w	r2,r2[0x5c]
8001fd1e:	20 6f       	sub	pc,6
8001fd20:	66 20       	ld.w	r0,r3[0x8]
8001fd22:	57 61       	stdsp	sp[0x1d8],r1
8001fd24:	79 70       	ld.w	r0,r12[0x5c]
8001fd26:	6f 69       	ld.w	r9,r7[0x58]
8001fd28:	6e 74       	ld.w	r4,r7[0x1c]
8001fd2a:	20 6f       	sub	pc,6
8001fd2c:	6e 62       	ld.w	r2,r7[0x18]
8001fd2e:	6f 61       	ld.w	r1,r7[0x58]
8001fd30:	72 64       	ld.w	r4,r9[0x18]
8001fd32:	3a 00       	mov	r0,-96
8001fd34:	0a 00       	add	r0,r5

8001fd36 <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
8001fd36:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd3a:	1a 97       	mov	r7,sp
8001fd3c:	20 ed       	sub	sp,56
8001fd3e:	fe f6 03 1a 	ld.w	r6,pc[794]
8001fd42:	1e 26       	rsub	r6,pc
8001fd44:	ef 4c ff cc 	st.w	r7[-52],r12
8001fd48:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8001fd4c:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001fd50:	30 48       	mov	r8,4
8001fd52:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
8001fd54:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001fd58:	90 08       	ld.sh	r8,r8[0x0]
8001fd5a:	ec f9 01 28 	ld.w	r9,r6[296]
8001fd5e:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001fd60:	30 18       	mov	r8,1
8001fd62:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
8001fd66:	30 18       	mov	r8,1
8001fd68:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001fd6c:	30 38       	mov	r8,3
8001fd6e:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fd72:	31 08       	mov	r8,16
8001fd74:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8001fd78:	e0 68 f5 80 	mov	r8,62848
8001fd7c:	ea 18 f0 d4 	orh	r8,0xf0d4
8001fd80:	e0 69 42 5e 	mov	r9,16990
8001fd84:	ea 19 40 47 	orh	r9,0x4047
8001fd88:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001fd8c:	fc 18 60 00 	movh	r8,0x6000
8001fd90:	e0 69 44 aa 	mov	r9,17578
8001fd94:	ea 19 40 1a 	orh	r9,0x401a
8001fd98:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001fd9c:	30 08       	mov	r8,0
8001fd9e:	fc 19 40 34 	movh	r9,0x4034
8001fda2:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fda6:	fc 18 41 20 	movh	r8,0x4120
8001fdaa:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
8001fdae:	fc 18 40 00 	movh	r8,0x4000
8001fdb2:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001fdb6:	30 08       	mov	r8,0
8001fdb8:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001fdbc:	fc 18 42 b4 	movh	r8,0x42b4
8001fdc0:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
8001fdc4:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001fdc8:	10 9b       	mov	r11,r8
8001fdca:	ee ca 00 30 	sub	r10,r7,48
8001fdce:	f6 c8 00 00 	sub	r8,r11,0
8001fdd2:	f4 c9 00 00 	sub	r9,r10,0
8001fdd6:	72 0c       	ld.w	r12,r9[0x0]
8001fdd8:	91 0c       	st.w	r8[0x0],r12
8001fdda:	72 1c       	ld.w	r12,r9[0x4]
8001fddc:	91 1c       	st.w	r8[0x4],r12
8001fdde:	72 2c       	ld.w	r12,r9[0x8]
8001fde0:	91 2c       	st.w	r8[0x8],r12
8001fde2:	72 39       	ld.w	r9,r9[0xc]
8001fde4:	91 39       	st.w	r8[0xc],r9
8001fde6:	f6 c8 ff f0 	sub	r8,r11,-16
8001fdea:	f4 c9 ff f0 	sub	r9,r10,-16
8001fdee:	72 0c       	ld.w	r12,r9[0x0]
8001fdf0:	91 0c       	st.w	r8[0x0],r12
8001fdf2:	72 1c       	ld.w	r12,r9[0x4]
8001fdf4:	91 1c       	st.w	r8[0x4],r12
8001fdf6:	72 2c       	ld.w	r12,r9[0x8]
8001fdf8:	91 2c       	st.w	r8[0x8],r12
8001fdfa:	72 39       	ld.w	r9,r9[0xc]
8001fdfc:	91 39       	st.w	r8[0xc],r9
8001fdfe:	f6 c8 ff e0 	sub	r8,r11,-32
8001fe02:	f4 c9 ff e0 	sub	r9,r10,-32
8001fe06:	72 0a       	ld.w	r10,r9[0x0]
8001fe08:	91 0a       	st.w	r8[0x0],r10
8001fe0a:	72 1a       	ld.w	r10,r9[0x4]
8001fe0c:	91 1a       	st.w	r8[0x4],r10
8001fe0e:	72 2a       	ld.w	r10,r9[0x8]
8001fe10:	91 2a       	st.w	r8[0x8],r10
8001fe12:	72 39       	ld.w	r9,r9[0xc]
8001fe14:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001fe16:	30 18       	mov	r8,1
8001fe18:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001fe1c:	30 08       	mov	r8,0
8001fe1e:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001fe22:	30 38       	mov	r8,3
8001fe24:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fe28:	31 08       	mov	r8,16
8001fe2a:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001fe2e:	fc 18 20 00 	movh	r8,0x2000
8001fe32:	e0 69 42 64 	mov	r9,16996
8001fe36:	ea 19 40 47 	orh	r9,0x4047
8001fe3a:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001fe3e:	fc 18 60 00 	movh	r8,0x6000
8001fe42:	e0 69 44 aa 	mov	r9,17578
8001fe46:	ea 19 40 1a 	orh	r9,0x401a
8001fe4a:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001fe4e:	30 08       	mov	r8,0
8001fe50:	fc 19 40 34 	movh	r9,0x4034
8001fe54:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fe58:	fc 18 41 20 	movh	r8,0x4120
8001fe5c:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
8001fe60:	fc 18 40 80 	movh	r8,0x4080
8001fe64:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001fe68:	30 08       	mov	r8,0
8001fe6a:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001fe6e:	fc 18 42 b4 	movh	r8,0x42b4
8001fe72:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8001fe76:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001fe7a:	2d 08       	sub	r8,-48
8001fe7c:	10 9b       	mov	r11,r8
8001fe7e:	ee ca 00 30 	sub	r10,r7,48
8001fe82:	f6 c8 00 00 	sub	r8,r11,0
8001fe86:	f4 c9 00 00 	sub	r9,r10,0
8001fe8a:	72 0c       	ld.w	r12,r9[0x0]
8001fe8c:	91 0c       	st.w	r8[0x0],r12
8001fe8e:	72 1c       	ld.w	r12,r9[0x4]
8001fe90:	91 1c       	st.w	r8[0x4],r12
8001fe92:	72 2c       	ld.w	r12,r9[0x8]
8001fe94:	91 2c       	st.w	r8[0x8],r12
8001fe96:	72 39       	ld.w	r9,r9[0xc]
8001fe98:	91 39       	st.w	r8[0xc],r9
8001fe9a:	f6 c8 ff f0 	sub	r8,r11,-16
8001fe9e:	f4 c9 ff f0 	sub	r9,r10,-16
8001fea2:	72 0c       	ld.w	r12,r9[0x0]
8001fea4:	91 0c       	st.w	r8[0x0],r12
8001fea6:	72 1c       	ld.w	r12,r9[0x4]
8001fea8:	91 1c       	st.w	r8[0x4],r12
8001feaa:	72 2c       	ld.w	r12,r9[0x8]
8001feac:	91 2c       	st.w	r8[0x8],r12
8001feae:	72 39       	ld.w	r9,r9[0xc]
8001feb0:	91 39       	st.w	r8[0xc],r9
8001feb2:	f6 c8 ff e0 	sub	r8,r11,-32
8001feb6:	f4 c9 ff e0 	sub	r9,r10,-32
8001feba:	72 0a       	ld.w	r10,r9[0x0]
8001febc:	91 0a       	st.w	r8[0x0],r10
8001febe:	72 1a       	ld.w	r10,r9[0x4]
8001fec0:	91 1a       	st.w	r8[0x4],r10
8001fec2:	72 2a       	ld.w	r10,r9[0x8]
8001fec4:	91 2a       	st.w	r8[0x8],r10
8001fec6:	72 39       	ld.w	r9,r9[0xc]
8001fec8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001feca:	30 18       	mov	r8,1
8001fecc:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001fed0:	30 08       	mov	r8,0
8001fed2:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001fed6:	30 38       	mov	r8,3
8001fed8:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fedc:	31 08       	mov	r8,16
8001fede:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001fee2:	fc 18 20 00 	movh	r8,0x2000
8001fee6:	e0 69 42 64 	mov	r9,16996
8001feea:	ea 19 40 47 	orh	r9,0x4047
8001feee:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001fef2:	fc 18 80 00 	movh	r8,0x8000
8001fef6:	e0 69 43 7d 	mov	r9,17277
8001fefa:	ea 19 40 1a 	orh	r9,0x401a
8001fefe:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
8001ff02:	30 08       	mov	r8,0
8001ff04:	fc 19 40 44 	movh	r9,0x4044
8001ff08:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001ff0c:	fc 18 41 20 	movh	r8,0x4120
8001ff10:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
8001ff14:	fc 18 41 70 	movh	r8,0x4170
8001ff18:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001ff1c:	30 08       	mov	r8,0
8001ff1e:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001ff22:	fc 18 42 b4 	movh	r8,0x42b4
8001ff26:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
8001ff2a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001ff2e:	2a 08       	sub	r8,-96
8001ff30:	10 9b       	mov	r11,r8
8001ff32:	ee ca 00 30 	sub	r10,r7,48
8001ff36:	f6 c8 00 00 	sub	r8,r11,0
8001ff3a:	f4 c9 00 00 	sub	r9,r10,0
8001ff3e:	72 0c       	ld.w	r12,r9[0x0]
8001ff40:	91 0c       	st.w	r8[0x0],r12
8001ff42:	72 1c       	ld.w	r12,r9[0x4]
8001ff44:	91 1c       	st.w	r8[0x4],r12
8001ff46:	72 2c       	ld.w	r12,r9[0x8]
8001ff48:	91 2c       	st.w	r8[0x8],r12
8001ff4a:	72 39       	ld.w	r9,r9[0xc]
8001ff4c:	91 39       	st.w	r8[0xc],r9
8001ff4e:	f6 c8 ff f0 	sub	r8,r11,-16
8001ff52:	f4 c9 ff f0 	sub	r9,r10,-16
8001ff56:	72 0c       	ld.w	r12,r9[0x0]
8001ff58:	91 0c       	st.w	r8[0x0],r12
8001ff5a:	72 1c       	ld.w	r12,r9[0x4]
8001ff5c:	91 1c       	st.w	r8[0x4],r12
8001ff5e:	72 2c       	ld.w	r12,r9[0x8]
8001ff60:	91 2c       	st.w	r8[0x8],r12
8001ff62:	72 39       	ld.w	r9,r9[0xc]
8001ff64:	91 39       	st.w	r8[0xc],r9
8001ff66:	f6 c8 ff e0 	sub	r8,r11,-32
8001ff6a:	f4 c9 ff e0 	sub	r9,r10,-32
8001ff6e:	72 0a       	ld.w	r10,r9[0x0]
8001ff70:	91 0a       	st.w	r8[0x0],r10
8001ff72:	72 1a       	ld.w	r10,r9[0x4]
8001ff74:	91 1a       	st.w	r8[0x4],r10
8001ff76:	72 2a       	ld.w	r10,r9[0x8]
8001ff78:	91 2a       	st.w	r8[0x8],r10
8001ff7a:	72 39       	ld.w	r9,r9[0xc]
8001ff7c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001ff7e:	30 18       	mov	r8,1
8001ff80:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001ff84:	30 08       	mov	r8,0
8001ff86:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001ff8a:	30 38       	mov	r8,3
8001ff8c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001ff90:	31 08       	mov	r8,16
8001ff92:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8001ff96:	30 08       	mov	r8,0
8001ff98:	e0 69 42 55 	mov	r9,16981
8001ff9c:	ea 19 40 47 	orh	r9,0x4047
8001ffa0:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001ffa4:	fc 18 80 00 	movh	r8,0x8000
8001ffa8:	e0 69 43 7d 	mov	r9,17277
8001ffac:	ea 19 40 1a 	orh	r9,0x401a
8001ffb0:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001ffb4:	30 08       	mov	r8,0
8001ffb6:	fc 19 40 34 	movh	r9,0x4034
8001ffba:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
8001ffbe:	fc 18 41 20 	movh	r8,0x4120
8001ffc2:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8001ffc6:	fc 18 41 40 	movh	r8,0x4140
8001ffca:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001ffce:	30 08       	mov	r8,0
8001ffd0:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001ffd4:	fc 18 42 b4 	movh	r8,0x42b4
8001ffd8:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
8001ffdc:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001ffe0:	f0 c8 ff 70 	sub	r8,r8,-144
8001ffe4:	10 9b       	mov	r11,r8
8001ffe6:	ee ca 00 30 	sub	r10,r7,48
8001ffea:	f6 c8 00 00 	sub	r8,r11,0
8001ffee:	f4 c9 00 00 	sub	r9,r10,0
8001fff2:	72 0c       	ld.w	r12,r9[0x0]
8001fff4:	91 0c       	st.w	r8[0x0],r12
8001fff6:	72 1c       	ld.w	r12,r9[0x4]
8001fff8:	91 1c       	st.w	r8[0x4],r12
8001fffa:	72 2c       	ld.w	r12,r9[0x8]
8001fffc:	91 2c       	st.w	r8[0x8],r12
8001fffe:	72 39       	ld.w	r9,r9[0xc]
80020000:	91 39       	st.w	r8[0xc],r9
80020002:	f6 c8 ff f0 	sub	r8,r11,-16
80020006:	f4 c9 ff f0 	sub	r9,r10,-16
8002000a:	72 0c       	ld.w	r12,r9[0x0]
8002000c:	91 0c       	st.w	r8[0x0],r12
8002000e:	72 1c       	ld.w	r12,r9[0x4]
80020010:	91 1c       	st.w	r8[0x4],r12
80020012:	72 2c       	ld.w	r12,r9[0x8]
80020014:	91 2c       	st.w	r8[0x8],r12
80020016:	72 39       	ld.w	r9,r9[0xc]
80020018:	91 39       	st.w	r8[0xc],r9
8002001a:	f6 c8 ff e0 	sub	r8,r11,-32
8002001e:	f4 c9 ff e0 	sub	r9,r10,-32
80020022:	72 0a       	ld.w	r10,r9[0x0]
80020024:	91 0a       	st.w	r8[0x0],r10
80020026:	72 1a       	ld.w	r10,r9[0x4]
80020028:	91 1a       	st.w	r8[0x4],r10
8002002a:	72 2a       	ld.w	r10,r9[0x8]
8002002c:	91 2a       	st.w	r8[0x8],r10
8002002e:	72 39       	ld.w	r9,r9[0xc]
80020030:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
80020032:	fe cc 03 1a 	sub	r12,pc,794
80020036:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
8002003a:	ec f8 01 28 	ld.w	r8,r6[296]
8002003e:	90 08       	ld.sh	r8,r8[0x0]
80020040:	5c 78       	castu.h	r8
80020042:	30 ab       	mov	r11,10
80020044:	10 9c       	mov	r12,r8
80020046:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8002004a:	fe cc 03 16 	sub	r12,pc,790
8002004e:	f0 16 00 01 	mcall	r6[4]
	
}
80020052:	2f 2d       	sub	sp,-56
80020054:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020058:	80 01       	ld.sh	r1,r0[0x0]
8002005a:	fb c6       	*unknown*
8002005c:	57 69       	stdsp	sp[0x1d8],r9
8002005e:	6c 6c       	ld.w	r12,r6[0x18]
80020060:	20 73       	sub	r3,7
80020062:	65 6e       	ld.w	lr,r2[0x58]
80020064:	64 20       	ld.w	r0,r2[0x8]
80020066:	00 00       	add	r0,r0
80020068:	20 77       	sub	r7,7
8002006a:	61 79       	ld.w	r9,r0[0x5c]
8002006c:	70 6f       	ld.w	pc,r8[0x18]
8002006e:	69 6e       	ld.w	lr,r4[0x58]
80020070:	74 73       	ld.w	r3,r10[0x1c]
80020072:	0a 00       	add	r0,r5

80020074 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80020074:	eb cd 40 c0 	pushm	r6-r7,lr
80020078:	1a 97       	mov	r7,sp
8002007a:	20 5d       	sub	sp,20
8002007c:	4a d6       	lddpc	r6,80020130 <send_count+0xbc>
8002007e:	1e 26       	rsub	r6,pc
80020080:	ef 4c ff f8 	st.w	r7[-8],r12
80020084:	16 98       	mov	r8,r11
80020086:	ef 4a ff f0 	st.w	r7[-16],r10
8002008a:	ef 49 ff ec 	st.w	r7[-20],r9
8002008e:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80020092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020096:	ee c9 00 02 	sub	r9,r7,2
8002009a:	12 9b       	mov	r11,r9
8002009c:	10 9c       	mov	r12,r8
8002009e:	fe b0 fa 88 	rcall	8001f5ae <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800200a2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800200a6:	ec f8 00 c8 	ld.w	r8,r6[200]
800200aa:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800200ac:	f0 09 18 00 	cp.b	r9,r8
800200b0:	c3 c1       	brne	80020128 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800200b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800200b6:	ec f8 00 c8 	ld.w	r8,r6[200]
800200ba:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800200bc:	f0 09 18 00 	cp.b	r9,r8
800200c0:	c3 41       	brne	80020128 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
800200c2:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800200c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800200ca:	11 e8       	ld.ub	r8,r8[0x6]
800200cc:	10 9a       	mov	r10,r8
800200ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800200d2:	11 d8       	ld.ub	r8,r8[0x5]
800200d4:	10 9b       	mov	r11,r8
800200d6:	30 0c       	mov	r12,0
800200d8:	fe b0 fa 88 	rcall	8001f5e8 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
800200dc:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800200e0:	30 08       	mov	r8,0
800200e2:	f0 09 19 00 	cp.h	r9,r8
800200e6:	c0 f0       	breq	80020104 <send_count+0x90>
		{
			*waypoint_sending = true;
800200e8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800200ec:	30 18       	mov	r8,1
800200ee:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
800200f0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800200f4:	30 08       	mov	r8,0
800200f6:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
800200f8:	f0 16 00 0f 	mcall	r6[60]
800200fc:	18 99       	mov	r9,r12
800200fe:	ec f8 01 80 	ld.w	r8,r6[384]
80020102:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
80020104:	ec f8 00 ac 	ld.w	r8,r6[172]
80020108:	30 09       	mov	r9,0
8002010a:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
8002010c:	fe cc 00 b0 	sub	r12,pc,176
80020110:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
80020114:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80020118:	30 ab       	mov	r11,10
8002011a:	10 9c       	mov	r12,r8
8002011c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
80020120:	fe cc 00 b8 	sub	r12,pc,184
80020124:	f0 16 00 01 	mcall	r6[4]
	}
}
80020128:	2f bd       	sub	sp,-20
8002012a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002012e:	00 00       	add	r0,r0
80020130:	80 01       	ld.sh	r1,r0[0x0]
80020132:	ff 02 41 73 	ld.sh	r2,pc[16755]
80020136:	6b 69       	ld.w	r9,r5[0x58]
80020138:	6e 67       	ld.w	r7,r7[0x18]
8002013a:	20 66       	sub	r6,6
8002013c:	6f 72       	ld.w	r2,r7[0x5c]
8002013e:	20 77       	sub	r7,7
80020140:	61 79       	ld.w	r9,r0[0x5c]
80020142:	70 6f       	ld.w	pc,r8[0x18]
80020144:	69 6e       	ld.w	lr,r4[0x58]
80020146:	74 20       	ld.w	r0,r10[0x8]
80020148:	6e 75       	ld.w	r5,r7[0x1c]
8002014a:	6d 62       	ld.w	r2,r6[0x58]
8002014c:	65 72       	ld.w	r2,r2[0x5c]
8002014e:	20 00       	sub	r0,0
80020150:	53 65       	stdsp	sp[0xd8],r5
80020152:	6e 64       	ld.w	r4,r7[0x18]
80020154:	69 6e       	ld.w	lr,r4[0x58]
80020156:	67 20       	ld.w	r0,r3[0x48]
80020158:	77 61       	ld.w	r1,r11[0x58]
8002015a:	79 70       	ld.w	r0,r12[0x5c]
8002015c:	6f 69       	ld.w	r9,r7[0x58]
8002015e:	6e 74       	ld.w	r4,r7[0x1c]
80020160:	20 00       	sub	r0,0

80020162 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
80020162:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80020166:	1a 97       	mov	r7,sp
80020168:	20 9d       	sub	sp,36
8002016a:	fe f6 02 62 	ld.w	r6,pc[610]
8002016e:	1e 26       	rsub	r6,pc
80020170:	ef 4c ff f8 	st.w	r7[-8],r12
80020174:	ef 4b ff f4 	st.w	r7[-12],r11
80020178:	14 98       	mov	r8,r10
8002017a:	ef 49 ff ec 	st.w	r7[-20],r9
8002017e:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80020182:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020186:	11 88       	ld.ub	r8,r8[0x0]
80020188:	58 08       	cp.w	r8,0
8002018a:	e0 80 01 1e 	breq	800203c6 <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
8002018e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020192:	ee c9 00 04 	sub	r9,r7,4
80020196:	12 9b       	mov	r11,r9
80020198:	10 9c       	mov	r12,r8
8002019a:	fe b0 f9 4b 	rcall	8001f430 <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
8002019e:	fe cc 00 6a 	sub	r12,pc,106
800201a2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
800201a6:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800201aa:	5c 78       	castu.h	r8
800201ac:	30 ab       	mov	r11,10
800201ae:	10 9c       	mov	r12,r8
800201b0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
800201b4:	fe cc 04 80 	sub	r12,pc,1152
800201b8:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800201bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800201c0:	ec f8 00 c8 	ld.w	r8,r6[200]
800201c4:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800201c6:	f0 09 18 00 	cp.b	r9,r8
800201ca:	e0 81 00 fe 	brne	800203c6 <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800201ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800201d2:	ec f8 00 c8 	ld.w	r8,r6[200]
800201d6:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800201d8:	f0 09 18 00 	cp.b	r9,r8
800201dc:	e0 81 00 f5 	brne	800203c6 <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
800201e0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800201e4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800201e8:	ec f8 00 ac 	ld.w	r8,r6[172]
800201ec:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
800201ee:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800201f2:	ec f8 00 ac 	ld.w	r8,r6[172]
800201f6:	70 08       	ld.w	r8,r8[0x0]
800201f8:	10 39       	cp.w	r9,r8
800201fa:	e0 8a 00 e6 	brle	800203c6 <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800201fe:	ec f8 00 ac 	ld.w	r8,r6[172]
80020202:	70 08       	ld.w	r8,r8[0x0]
80020204:	10 99       	mov	r9,r8
80020206:	12 98       	mov	r8,r9
80020208:	a1 78       	lsl	r8,0x1
8002020a:	12 08       	add	r8,r9
8002020c:	a5 68       	lsl	r8,0x4
8002020e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020212:	f2 08 00 08 	add	r8,r9,r8
80020216:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002021a:	10 9a       	mov	r10,r8
8002021c:	12 9b       	mov	r11,r9
8002021e:	f0 16 00 08 	mcall	r6[32]
80020222:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80020224:	ec f8 00 ac 	ld.w	r8,r6[172]
80020228:	70 08       	ld.w	r8,r8[0x0]
8002022a:	10 99       	mov	r9,r8
8002022c:	12 98       	mov	r8,r9
8002022e:	a1 78       	lsl	r8,0x1
80020230:	12 08       	add	r8,r9
80020232:	a5 68       	lsl	r8,0x4
80020234:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020238:	f2 08 00 08 	add	r8,r9,r8
8002023c:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020240:	10 9a       	mov	r10,r8
80020242:	12 9b       	mov	r11,r9
80020244:	f0 16 00 08 	mcall	r6[32]
80020248:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8002024c:	ec f8 00 ac 	ld.w	r8,r6[172]
80020250:	70 08       	ld.w	r8,r8[0x0]
80020252:	10 99       	mov	r9,r8
80020254:	12 98       	mov	r8,r9
80020256:	a1 78       	lsl	r8,0x1
80020258:	12 08       	add	r8,r9
8002025a:	a5 68       	lsl	r8,0x4
8002025c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020260:	f2 08 00 08 	add	r8,r9,r8
80020264:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020268:	10 9a       	mov	r10,r8
8002026a:	12 9b       	mov	r11,r9
8002026c:	f0 16 00 08 	mcall	r6[32]
80020270:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020274:	ec f8 00 ac 	ld.w	r8,r6[172]
80020278:	70 08       	ld.w	r8,r8[0x0]
8002027a:	10 99       	mov	r9,r8
8002027c:	12 98       	mov	r8,r9
8002027e:	a1 78       	lsl	r8,0x1
80020280:	12 08       	add	r8,r9
80020282:	a5 68       	lsl	r8,0x4
80020284:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020288:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002028c:	70 58       	ld.w	r8,r8[0x14]
8002028e:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020292:	ec f8 00 ac 	ld.w	r8,r6[172]
80020296:	70 08       	ld.w	r8,r8[0x0]
80020298:	10 99       	mov	r9,r8
8002029a:	12 98       	mov	r8,r9
8002029c:	a1 78       	lsl	r8,0x1
8002029e:	12 08       	add	r8,r9
800202a0:	a5 68       	lsl	r8,0x4
800202a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202a6:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202aa:	70 48       	ld.w	r8,r8[0x10]
800202ac:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800202b0:	ec f8 00 ac 	ld.w	r8,r6[172]
800202b4:	70 08       	ld.w	r8,r8[0x0]
800202b6:	10 99       	mov	r9,r8
800202b8:	12 98       	mov	r8,r9
800202ba:	a1 78       	lsl	r8,0x1
800202bc:	12 08       	add	r8,r9
800202be:	a5 68       	lsl	r8,0x4
800202c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202c4:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202c8:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800202ca:	ec f8 00 ac 	ld.w	r8,r6[172]
800202ce:	70 08       	ld.w	r8,r8[0x0]
800202d0:	10 99       	mov	r9,r8
800202d2:	12 98       	mov	r8,r9
800202d4:	a1 78       	lsl	r8,0x1
800202d6:	12 08       	add	r8,r9
800202d8:	a5 68       	lsl	r8,0x4
800202da:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202de:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202e2:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800202e4:	ec f8 00 ac 	ld.w	r8,r6[172]
800202e8:	70 08       	ld.w	r8,r8[0x0]
800202ea:	10 99       	mov	r9,r8
800202ec:	12 98       	mov	r8,r9
800202ee:	a1 78       	lsl	r8,0x1
800202f0:	12 08       	add	r8,r9
800202f2:	a5 68       	lsl	r8,0x4
800202f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202f8:	f2 08 00 08 	add	r8,r9,r8
800202fc:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202fe:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80020300:	ec f8 00 ac 	ld.w	r8,r6[172]
80020304:	70 08       	ld.w	r8,r8[0x0]
80020306:	10 99       	mov	r9,r8
80020308:	12 98       	mov	r8,r9
8002030a:	a1 78       	lsl	r8,0x1
8002030c:	12 08       	add	r8,r9
8002030e:	a5 68       	lsl	r8,0x4
80020310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020314:	f2 08 00 08 	add	r8,r9,r8
80020318:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002031a:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8002031c:	ec f8 00 ac 	ld.w	r8,r6[172]
80020320:	70 08       	ld.w	r8,r8[0x0]
80020322:	10 99       	mov	r9,r8
80020324:	12 98       	mov	r8,r9
80020326:	a1 78       	lsl	r8,0x1
80020328:	12 08       	add	r8,r9
8002032a:	a5 68       	lsl	r8,0x4
8002032c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020330:	f2 08 00 08 	add	r8,r9,r8
80020334:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020336:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8002033a:	ec f8 00 ac 	ld.w	r8,r6[172]
8002033e:	70 08       	ld.w	r8,r8[0x0]
80020340:	10 99       	mov	r9,r8
80020342:	12 98       	mov	r8,r9
80020344:	a1 78       	lsl	r8,0x1
80020346:	12 08       	add	r8,r9
80020348:	a5 68       	lsl	r8,0x4
8002034a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002034e:	f2 08 00 08 	add	r8,r9,r8
80020352:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020354:	10 9c       	mov	r12,r8
80020356:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002035a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002035e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020362:	11 e8       	ld.ub	r8,r8[0x6]
80020364:	10 9a       	mov	r10,r8
80020366:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002036a:	11 d8       	ld.ub	r8,r8[0x5]
8002036c:	10 9b       	mov	r11,r8
8002036e:	1a d5       	st.w	--sp,r5
80020370:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020374:	1a d8       	st.w	--sp,r8
80020376:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002037a:	1a d8       	st.w	--sp,r8
8002037c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020380:	1a d8       	st.w	--sp,r8
80020382:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020386:	1a d8       	st.w	--sp,r8
80020388:	1a d0       	st.w	--sp,r0
8002038a:	1a d1       	st.w	--sp,r1
8002038c:	1a d2       	st.w	--sp,r2
8002038e:	1a d3       	st.w	--sp,r3
80020390:	1a de       	st.w	--sp,lr
80020392:	18 98       	mov	r8,r12
80020394:	30 0c       	mov	r12,0
80020396:	fe b0 f5 e3 	rcall	8001ef5c <mavlink_msg_mission_item_send>
8002039a:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
8002039c:	fe cc 02 4c 	sub	r12,pc,588
800203a0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
800203a4:	ec f8 00 ac 	ld.w	r8,r6[172]
800203a8:	70 08       	ld.w	r8,r8[0x0]
800203aa:	30 ab       	mov	r11,10
800203ac:	10 9c       	mov	r12,r8
800203ae:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
800203b2:	fe cc 06 7e 	sub	r12,pc,1662
800203b6:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
800203ba:	f0 16 00 0f 	mcall	r6[60]
800203be:	18 99       	mov	r9,r12
800203c0:	ec f8 01 80 	ld.w	r8,r6[384]
800203c4:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
800203c6:	2f 7d       	sub	sp,-36
800203c8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800203cc:	80 01       	ld.sh	r1,r0[0x0]
800203ce:	ff f2 41 63 	ld.wge	r2,pc[0x58c]
800203d2:	6b 6e       	ld.w	lr,r5[0x58]
800203d4:	6f 77       	ld.w	r7,r7[0x5c]
800203d6:	6c 65       	ld.w	r5,r6[0x18]
800203d8:	64 67       	ld.w	r7,r2[0x18]
800203da:	6d 65       	ld.w	r5,r6[0x58]
800203dc:	6e 74       	ld.w	r4,r7[0x1c]
800203de:	20 72       	sub	r2,7
800203e0:	65 63       	ld.w	r3,r2[0x58]
800203e2:	65 69       	ld.w	r9,r2[0x58]
800203e4:	76 65       	ld.w	r5,r11[0x18]
800203e6:	64 2c       	ld.w	r12,r2[0x8]
800203e8:	20 65       	sub	r5,6
800203ea:	6e 64       	ld.w	r4,r7[0x18]
800203ec:	20 6f       	sub	pc,6
800203ee:	66 20       	ld.w	r0,r3[0x8]
800203f0:	77 61       	ld.w	r1,r11[0x58]
800203f2:	79 70       	ld.w	r0,r12[0x5c]
800203f4:	6f 69       	ld.w	r9,r7[0x58]
800203f6:	6e 74       	ld.w	r4,r7[0x1c]
800203f8:	20 73       	sub	r3,7
800203fa:	65 6e       	ld.w	lr,r2[0x58]
800203fc:	64 69       	ld.w	r9,r2[0x18]
800203fe:	6e 67       	ld.w	r7,r7[0x18]
80020400:	2e 0a       	sub	r10,-32
	...

80020404 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
80020404:	eb cd 40 c0 	pushm	r6-r7,lr
80020408:	1a 97       	mov	r7,sp
8002040a:	20 3d       	sub	sp,12
8002040c:	49 76       	lddpc	r6,80020468 <receive_ack_msg+0x64>
8002040e:	1e 26       	rsub	r6,pc
80020410:	ef 4c ff f8 	st.w	r7[-8],r12
80020414:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
80020418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002041c:	ee c9 00 03 	sub	r9,r7,3
80020420:	12 9b       	mov	r11,r9
80020422:	10 9c       	mov	r12,r8
80020424:	fe b0 fa 20 	rcall	8001f864 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020428:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8002042c:	ec f8 00 c8 	ld.w	r8,r6[200]
80020430:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020432:	f0 09 18 00 	cp.b	r9,r8
80020436:	c1 51       	brne	80020460 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020438:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002043c:	ec f8 00 c8 	ld.w	r8,r6[200]
80020440:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020442:	f0 09 18 00 	cp.b	r9,r8
80020446:	c0 d1       	brne	80020460 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
80020448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002044c:	30 08       	mov	r8,0
8002044e:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
80020450:	ec f8 00 ac 	ld.w	r8,r6[172]
80020454:	30 09       	mov	r9,0
80020456:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
80020458:	fe cc 00 88 	sub	r12,pc,136
8002045c:	f0 16 00 01 	mcall	r6[4]
	}
}
80020460:	2f dd       	sub	sp,-12
80020462:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020466:	00 00       	add	r0,r0
80020468:	80 02       	ld.sh	r2,r0[0x0]
8002046a:	02 92       	mov	r2,r1
8002046c:	52 65       	stdsp	sp[0x98],r5
8002046e:	63 65       	ld.w	r5,r1[0x58]
80020470:	69 76       	ld.w	r6,r4[0x5c]
80020472:	69 6e       	ld.w	lr,r4[0x58]
80020474:	67 20       	ld.w	r0,r3[0x48]
80020476:	00 00       	add	r0,r0
80020478:	20 6e       	sub	lr,6
8002047a:	65 77       	ld.w	r7,r2[0x5c]
8002047c:	20 77       	sub	r7,7
8002047e:	61 79       	ld.w	r9,r0[0x5c]
80020480:	70 6f       	ld.w	pc,r8[0x18]
80020482:	69 6e       	ld.w	lr,r4[0x58]
80020484:	74 73       	ld.w	r3,r10[0x1c]
80020486:	2e 20       	sub	r0,-30
80020488:	00 00       	add	r0,r0
8002048a:	00 00       	add	r0,r0
8002048c:	4e 65       	lddpc	r5,80020624 <receive_count+0x162>
8002048e:	77 20       	ld.w	r0,r11[0x48]
80020490:	74 6f       	ld.w	pc,r10[0x18]
80020492:	74 61       	ld.w	r1,r10[0x18]
80020494:	6c 20       	ld.w	r0,r6[0x8]
80020496:	6e 75       	ld.w	r5,r7[0x1c]
80020498:	6d 62       	ld.w	r2,r6[0x58]
8002049a:	65 72       	ld.w	r2,r2[0x5c]
8002049c:	20 6f       	sub	pc,6
8002049e:	66 20       	ld.w	r0,r3[0x8]
800204a0:	77 61       	ld.w	r1,r11[0x58]
800204a2:	79 70       	ld.w	r0,r12[0x5c]
800204a4:	6f 69       	ld.w	r9,r7[0x58]
800204a6:	6e 74       	ld.w	r4,r7[0x1c]
800204a8:	73 3a       	ld.w	r10,r9[0x4c]
800204aa:	00 00       	add	r0,r0
800204ac:	41 73       	lddsp	r3,sp[0x5c]
800204ae:	6b 69       	ld.w	r9,r5[0x58]
800204b0:	6e 67       	ld.w	r7,r7[0x18]
800204b2:	20 66       	sub	r6,6
800204b4:	6f 72       	ld.w	r2,r7[0x5c]
800204b6:	20 77       	sub	r7,7
800204b8:	61 79       	ld.w	r9,r0[0x5c]
800204ba:	70 6f       	ld.w	pc,r8[0x18]
800204bc:	69 6e       	ld.w	lr,r4[0x58]
800204be:	74 20       	ld.w	r0,r10[0x8]
	...

800204c2 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
800204c2:	eb cd 40 c0 	pushm	r6-r7,lr
800204c6:	1a 97       	mov	r7,sp
800204c8:	20 5d       	sub	sp,20
800204ca:	4d 46       	lddpc	r6,80020618 <receive_count+0x156>
800204cc:	1e 26       	rsub	r6,pc
800204ce:	ef 4c ff f8 	st.w	r7[-8],r12
800204d2:	ef 4b ff f4 	st.w	r7[-12],r11
800204d6:	ef 4a ff f0 	st.w	r7[-16],r10
800204da:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
800204de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800204e2:	ee c9 00 04 	sub	r9,r7,4
800204e6:	12 9b       	mov	r11,r9
800204e8:	10 9c       	mov	r12,r8
800204ea:	fe b0 f8 e3 	rcall	8001f6b0 <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800204ee:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800204f2:	ec f8 00 c8 	ld.w	r8,r6[200]
800204f6:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800204f8:	f0 09 18 00 	cp.b	r9,r8
800204fc:	e0 81 00 8b 	brne	80020612 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020500:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020504:	ec f8 00 c8 	ld.w	r8,r6[200]
80020508:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002050a:	f0 09 18 00 	cp.b	r9,r8
8002050e:	e0 81 00 82 	brne	80020612 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
80020512:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020516:	11 88       	ld.ub	r8,r8[0x0]
80020518:	ec 18 00 01 	eorl	r8,0x1
8002051c:	5c 58       	castu.b	r8
8002051e:	c5 a0       	breq	800205d2 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
80020520:	ec f9 01 28 	ld.w	r9,r6[296]
80020524:	30 08       	mov	r8,0
80020526:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
80020528:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002052c:	30 08       	mov	r8,0
8002052e:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
80020530:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020534:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020538:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002053c:	90 08       	ld.sh	r8,r8[0x0]
8002053e:	5c 78       	castu.h	r8
80020540:	f2 08 00 08 	add	r8,r9,r8
80020544:	58 a8       	cp.w	r8,10
80020546:	e0 8a 00 0a 	brle	8002055a <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
8002054a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002054e:	90 08       	ld.sh	r8,r8[0x0]
80020550:	f0 08 11 0a 	rsub	r8,r8,10
80020554:	5c 88       	casts.h	r8
80020556:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
8002055a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8002055e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020562:	90 08       	ld.sh	r8,r8[0x0]
80020564:	f2 08 00 08 	add	r8,r9,r8
80020568:	5c 88       	casts.h	r8
8002056a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002056e:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80020570:	fe cc 01 04 	sub	r12,pc,260
80020574:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
80020578:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002057c:	5c 78       	castu.h	r8
8002057e:	30 ab       	mov	r11,10
80020580:	10 9c       	mov	r12,r8
80020582:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
80020586:	fe cc 01 0e 	sub	r12,pc,270
8002058a:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
8002058e:	fe cc 01 02 	sub	r12,pc,258
80020592:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
80020596:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002059a:	90 08       	ld.sh	r8,r8[0x0]
8002059c:	5c 78       	castu.h	r8
8002059e:	30 ab       	mov	r11,10
800205a0:	10 9c       	mov	r12,r8
800205a2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
800205a6:	fe cc 08 72 	sub	r12,pc,2162
800205aa:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
800205ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
800205b2:	30 18       	mov	r8,1
800205b4:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
800205b6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800205ba:	30 08       	mov	r8,0
800205bc:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
800205be:	ec f8 01 04 	ld.w	r8,r6[260]
800205c2:	30 09       	mov	r9,0
800205c4:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
800205c6:	f0 16 00 0f 	mcall	r6[60]
800205ca:	18 99       	mov	r9,r12
800205cc:	ec f8 01 80 	ld.w	r8,r6[384]
800205d0:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
800205d2:	ec f8 01 04 	ld.w	r8,r6[260]
800205d6:	70 08       	ld.w	r8,r8[0x0]
800205d8:	5c 88       	casts.h	r8
800205da:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800205de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205e2:	11 e8       	ld.ub	r8,r8[0x6]
800205e4:	10 9a       	mov	r10,r8
800205e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205ea:	11 d8       	ld.ub	r8,r8[0x5]
800205ec:	10 9b       	mov	r11,r8
800205ee:	30 0c       	mov	r12,0
800205f0:	fe b0 f6 bc 	rcall	8001f368 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
800205f4:	fe cc 01 48 	sub	r12,pc,328
800205f8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
800205fc:	ec f8 01 04 	ld.w	r8,r6[260]
80020600:	70 08       	ld.w	r8,r8[0x0]
80020602:	30 ab       	mov	r11,10
80020604:	10 9c       	mov	r12,r8
80020606:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
8002060a:	fe cc 08 d6 	sub	r12,pc,2262
8002060e:	f0 16 00 01 	mcall	r6[4]
	}
	
}
80020612:	2f bd       	sub	sp,-20
80020614:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020618:	80 02       	ld.sh	r2,r0[0x0]
8002061a:	03 50       	ld.sh	r0,--r1
8002061c:	4e 65       	lddpc	r5,800207b4 <receive_waypoint+0x102>
8002061e:	77 20       	ld.w	r0,r11[0x48]
80020620:	77 61       	ld.w	r1,r11[0x58]
80020622:	79 70       	ld.w	r0,r12[0x5c]
80020624:	6f 69       	ld.w	r9,r7[0x58]
80020626:	6e 74       	ld.w	r4,r7[0x1c]
80020628:	20 72       	sub	r2,7
8002062a:	65 63       	ld.w	r3,r2[0x58]
8002062c:	65 69       	ld.w	r9,r2[0x58]
8002062e:	76 65       	ld.w	r5,r11[0x18]
80020630:	64 20       	ld.w	r0,r2[0x8]
80020632:	00 00       	add	r0,r0
80020634:	20 72       	sub	r2,7
80020636:	65 71       	ld.w	r1,r2[0x5c]
80020638:	75 65       	ld.w	r5,r10[0x58]
8002063a:	73 74       	ld.w	r4,r9[0x5c]
8002063c:	65 64       	ld.w	r4,r2[0x58]
8002063e:	20 6e       	sub	lr,6
80020640:	75 6d       	ld.w	sp,r10[0x58]
80020642:	20 3a       	sub	r10,3
80020644:	00 00       	add	r0,r0
80020646:	00 00       	add	r0,r0
80020648:	20 72       	sub	r2,7
8002064a:	65 63       	ld.w	r3,r2[0x58]
8002064c:	65 69       	ld.w	r9,r2[0x58]
8002064e:	76 69       	ld.w	r9,r11[0x18]
80020650:	6e 67       	ld.w	r7,r7[0x18]
80020652:	20 6e       	sub	lr,6
80020654:	75 6d       	ld.w	sp,r10[0x58]
80020656:	20 3a       	sub	r10,3
80020658:	00 00       	add	r0,r0
8002065a:	00 00       	add	r0,r0
8002065c:	52 65       	stdsp	sp[0x98],r5
8002065e:	63 65       	ld.w	r5,r1[0x58]
80020660:	69 76       	ld.w	r6,r4[0x5c]
80020662:	69 6e       	ld.w	lr,r4[0x58]
80020664:	67 20       	ld.w	r0,r3[0x48]
80020666:	67 6f       	ld.w	pc,r3[0x58]
80020668:	6f 64       	ld.w	r4,r7[0x58]
8002066a:	20 77       	sub	r7,7
8002066c:	61 79       	ld.w	r9,r0[0x5c]
8002066e:	70 6f       	ld.w	pc,r8[0x18]
80020670:	69 6e       	ld.w	lr,r4[0x58]
80020672:	74 2c       	ld.w	r12,r10[0x8]
80020674:	20 6e       	sub	lr,6
80020676:	75 6d       	ld.w	sp,r10[0x58]
80020678:	62 65       	ld.w	r5,r1[0x18]
8002067a:	72 20       	ld.w	r0,r9[0x8]
8002067c:	00 00       	add	r0,r0
8002067e:	00 00       	add	r0,r0
80020680:	20 6f       	sub	pc,6
80020682:	66 20       	ld.w	r0,r3[0x8]
80020684:	00 00       	add	r0,r0
80020686:	00 00       	add	r0,r0
80020688:	66 6c       	ld.w	r12,r3[0x18]
8002068a:	69 67       	ld.w	r7,r4[0x58]
8002068c:	68 74       	ld.w	r4,r4[0x1c]
8002068e:	20 70       	sub	r0,7
80020690:	6c 61       	ld.w	r1,r6[0x18]
80020692:	6e 20       	ld.w	r0,r7[0x8]
80020694:	72 65       	ld.w	r5,r9[0x18]
80020696:	63 65       	ld.w	r5,r1[0x58]
80020698:	69 76       	ld.w	r6,r4[0x5c]
8002069a:	65 64       	ld.w	r4,r2[0x58]
8002069c:	21 0a       	sub	r10,16
8002069e:	00 00       	add	r0,r0
800206a0:	41 63       	lddsp	r3,sp[0x58]
800206a2:	6b 20       	ld.w	r0,r5[0x48]
800206a4:	6e 6f       	ld.w	pc,r7[0x18]
800206a6:	74 20       	ld.w	r0,r10[0x8]
800206a8:	72 65       	ld.w	r5,r9[0x18]
800206aa:	63 65       	ld.w	r5,r1[0x58]
800206ac:	69 76       	ld.w	r6,r4[0x5c]
800206ae:	65 64       	ld.w	r4,r2[0x58]
800206b0:	21 00       	sub	r0,16

800206b2 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
800206b2:	eb cd 40 c0 	pushm	r6-r7,lr
800206b6:	1a 97       	mov	r7,sp
800206b8:	21 bd       	sub	sp,108
800206ba:	fe f6 03 02 	ld.w	r6,pc[770]
800206be:	1e 26       	rsub	r6,pc
800206c0:	ef 4c ff a0 	st.w	r7[-96],r12
800206c4:	ef 4b ff 9c 	st.w	r7[-100],r11
800206c8:	14 98       	mov	r8,r10
800206ca:	ef 49 ff 94 	st.w	r7[-108],r9
800206ce:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
800206d2:	ee f8 ff a0 	ld.w	r8,r7[-96]
800206d6:	ee c9 00 2c 	sub	r9,r7,44
800206da:	12 9b       	mov	r11,r9
800206dc:	10 9c       	mov	r12,r8
800206de:	fe b0 f5 cb 	rcall	8001f274 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206e2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800206e6:	ec f8 00 74 	ld.w	r8,r6[116]
800206ea:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800206ec:	f0 09 18 00 	cp.b	r9,r8
800206f0:	e0 81 01 63 	brne	800209b6 <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206f4:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800206f8:	ec f8 00 c8 	ld.w	r8,r6[200]
800206fc:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800206fe:	f0 09 18 00 	cp.b	r9,r8
80020702:	e0 81 01 5a 	brne	800209b6 <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
80020706:	f0 16 00 0f 	mcall	r6[60]
8002070a:	18 99       	mov	r9,r12
8002070c:	ec f8 01 80 	ld.w	r8,r6[384]
80020710:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
80020712:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80020716:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
8002071a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002071e:	10 9c       	mov	r12,r8
80020720:	f0 16 00 02 	mcall	r6[8]
80020724:	14 98       	mov	r8,r10
80020726:	16 99       	mov	r9,r11
80020728:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
8002072c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020730:	10 9c       	mov	r12,r8
80020732:	f0 16 00 02 	mcall	r6[8]
80020736:	14 98       	mov	r8,r10
80020738:	16 99       	mov	r9,r11
8002073a:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
8002073e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020742:	10 9c       	mov	r12,r8
80020744:	f0 16 00 02 	mcall	r6[8]
80020748:	14 98       	mov	r8,r10
8002074a:	16 99       	mov	r9,r11
8002074c:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80020750:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80020754:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
80020758:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8002075c:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020760:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80020764:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80020768:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002076c:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020770:	ee f8 ff d8 	ld.w	r8,r7[-40]
80020774:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80020778:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002077c:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020780:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020784:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80020788:	fe cc 01 6c 	sub	r12,pc,364
8002078c:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020790:	fe cc 01 5c 	sub	r12,pc,348
80020794:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80020798:	ec f8 01 04 	ld.w	r8,r6[260]
8002079c:	70 08       	ld.w	r8,r8[0x0]
8002079e:	30 ab       	mov	r11,10
800207a0:	10 9c       	mov	r12,r8
800207a2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
800207a6:	fe cc 01 5e 	sub	r12,pc,350
800207aa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
800207ae:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800207b2:	5c 78       	castu.h	r8
800207b4:	30 ab       	mov	r11,10
800207b6:	10 9c       	mov	r12,r8
800207b8:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
800207bc:	fe cc 0a 88 	sub	r12,pc,2696
800207c0:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
800207c4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800207c8:	30 28       	mov	r8,2
800207ca:	f0 09 18 00 	cp.b	r9,r8
800207ce:	c0 e1       	brne	800207ea <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800207d0:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207d4:	11 e8       	ld.ub	r8,r8[0x6]
800207d6:	10 9a       	mov	r10,r8
800207d8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207dc:	11 d8       	ld.ub	r8,r8[0x5]
800207de:	30 19       	mov	r9,1
800207e0:	10 9b       	mov	r11,r8
800207e2:	30 0c       	mov	r12,0
800207e4:	fe b0 f7 e8 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
800207e8:	ce 78       	rjmp	800209b6 <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
800207ea:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800207ee:	30 38       	mov	r8,3
800207f0:	f0 09 18 00 	cp.b	r9,r8
800207f4:	c0 e1       	brne	80020810 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800207f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207fa:	11 e8       	ld.ub	r8,r8[0x6]
800207fc:	10 9a       	mov	r10,r8
800207fe:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020802:	11 d8       	ld.ub	r8,r8[0x5]
80020804:	30 19       	mov	r9,1
80020806:	10 9b       	mov	r11,r8
80020808:	30 0c       	mov	r12,0
8002080a:	fe b0 f7 d5 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
8002080e:	cd 48       	rjmp	800209b6 <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80020810:	ee f8 ff 94 	ld.w	r8,r7[-108]
80020814:	11 88       	ld.ub	r8,r8[0x0]
80020816:	58 08       	cp.w	r8,0
80020818:	e0 80 00 bb 	breq	8002098e <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
8002081c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020820:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020824:	ec f8 01 04 	ld.w	r8,r6[260]
80020828:	70 08       	ld.w	r8,r8[0x0]
8002082a:	10 39       	cp.w	r9,r8
8002082c:	e0 81 00 c5 	brne	800209b6 <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80020830:	fe cc 01 d4 	sub	r12,pc,468
80020834:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80020838:	ec f8 01 04 	ld.w	r8,r6[260]
8002083c:	70 08       	ld.w	r8,r8[0x0]
8002083e:	30 ab       	mov	r11,10
80020840:	10 9c       	mov	r12,r8
80020842:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
80020846:	fe cc 01 c6 	sub	r12,pc,454
8002084a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
8002084e:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80020852:	ec f8 01 28 	ld.w	r8,r6[296]
80020856:	90 08       	ld.sh	r8,r8[0x0]
80020858:	5c 78       	castu.h	r8
8002085a:	f2 08 01 08 	sub	r8,r9,r8
8002085e:	30 ab       	mov	r11,10
80020860:	10 9c       	mov	r12,r8
80020862:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80020866:	fe cc 0b 32 	sub	r12,pc,2866
8002086a:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
8002086e:	ec f8 01 28 	ld.w	r8,r6[296]
80020872:	90 08       	ld.sh	r8,r8[0x0]
80020874:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020878:	ec f8 01 04 	ld.w	r8,r6[260]
8002087c:	70 08       	ld.w	r8,r8[0x0]
8002087e:	f2 08 00 08 	add	r8,r9,r8
80020882:	10 99       	mov	r9,r8
80020884:	12 98       	mov	r8,r9
80020886:	a1 78       	lsl	r8,0x1
80020888:	12 08       	add	r8,r9
8002088a:	a5 68       	lsl	r8,0x4
8002088c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020890:	f2 08 00 08 	add	r8,r9,r8
80020894:	10 9b       	mov	r11,r8
80020896:	ee ca 00 5c 	sub	r10,r7,92
8002089a:	f6 c8 00 00 	sub	r8,r11,0
8002089e:	f4 c9 00 00 	sub	r9,r10,0
800208a2:	72 0c       	ld.w	r12,r9[0x0]
800208a4:	91 0c       	st.w	r8[0x0],r12
800208a6:	72 1c       	ld.w	r12,r9[0x4]
800208a8:	91 1c       	st.w	r8[0x4],r12
800208aa:	72 2c       	ld.w	r12,r9[0x8]
800208ac:	91 2c       	st.w	r8[0x8],r12
800208ae:	72 39       	ld.w	r9,r9[0xc]
800208b0:	91 39       	st.w	r8[0xc],r9
800208b2:	f6 c8 ff f0 	sub	r8,r11,-16
800208b6:	f4 c9 ff f0 	sub	r9,r10,-16
800208ba:	72 0c       	ld.w	r12,r9[0x0]
800208bc:	91 0c       	st.w	r8[0x0],r12
800208be:	72 1c       	ld.w	r12,r9[0x4]
800208c0:	91 1c       	st.w	r8[0x4],r12
800208c2:	72 2c       	ld.w	r12,r9[0x8]
800208c4:	91 2c       	st.w	r8[0x8],r12
800208c6:	72 39       	ld.w	r9,r9[0xc]
800208c8:	91 39       	st.w	r8[0xc],r9
800208ca:	f6 c8 ff e0 	sub	r8,r11,-32
800208ce:	f4 c9 ff e0 	sub	r9,r10,-32
800208d2:	72 0a       	ld.w	r10,r9[0x0]
800208d4:	91 0a       	st.w	r8[0x0],r10
800208d6:	72 1a       	ld.w	r10,r9[0x4]
800208d8:	91 1a       	st.w	r8[0x4],r10
800208da:	72 2a       	ld.w	r10,r9[0x8]
800208dc:	91 2a       	st.w	r8[0x8],r10
800208de:	72 39       	ld.w	r9,r9[0xc]
800208e0:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
800208e2:	ec f8 01 04 	ld.w	r8,r6[260]
800208e6:	70 08       	ld.w	r8,r8[0x0]
800208e8:	f0 c9 ff ff 	sub	r9,r8,-1
800208ec:	ec f8 01 04 	ld.w	r8,r6[260]
800208f0:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
800208f2:	ec f8 01 28 	ld.w	r8,r6[296]
800208f6:	90 08       	ld.sh	r8,r8[0x0]
800208f8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800208fc:	ec f8 01 04 	ld.w	r8,r6[260]
80020900:	70 08       	ld.w	r8,r8[0x0]
80020902:	10 09       	add	r9,r8
80020904:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80020908:	10 39       	cp.w	r9,r8
8002090a:	c2 11       	brne	8002094c <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
8002090c:	30 18       	mov	r8,1
8002090e:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020912:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020916:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002091a:	11 e8       	ld.ub	r8,r8[0x6]
8002091c:	10 9a       	mov	r10,r8
8002091e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020922:	11 d8       	ld.ub	r8,r8[0x5]
80020924:	10 9b       	mov	r11,r8
80020926:	30 0c       	mov	r12,0
80020928:	fe b0 f7 46 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
8002092c:	fe cc 02 a4 	sub	r12,pc,676
80020930:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80020934:	ee f9 ff 94 	ld.w	r9,r7[-108]
80020938:	30 08       	mov	r8,0
8002093a:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
8002093c:	ec f9 01 28 	ld.w	r9,r6[296]
80020940:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80020944:	b2 08       	st.h	r9[0x0],r8
						init_wp();
80020946:	f0 16 00 8f 	mcall	r6[572]
8002094a:	c3 68       	rjmp	800209b6 <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
8002094c:	ec f8 01 04 	ld.w	r8,r6[260]
80020950:	70 08       	ld.w	r8,r8[0x0]
80020952:	5c 88       	casts.h	r8
80020954:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020958:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002095c:	11 e8       	ld.ub	r8,r8[0x6]
8002095e:	10 9a       	mov	r10,r8
80020960:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020964:	11 d8       	ld.ub	r8,r8[0x5]
80020966:	10 9b       	mov	r11,r8
80020968:	30 0c       	mov	r12,0
8002096a:	fe b0 f4 ff 	rcall	8001f368 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
8002096e:	fe cc 04 c2 	sub	r12,pc,1218
80020972:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
80020976:	ec f8 01 04 	ld.w	r8,r6[260]
8002097a:	70 08       	ld.w	r8,r8[0x0]
8002097c:	30 ab       	mov	r11,10
8002097e:	10 9c       	mov	r12,r8
80020980:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80020984:	fe cc 0c 50 	sub	r12,pc,3152
80020988:	f0 16 00 01 	mcall	r6[4]
8002098c:	c1 58       	rjmp	800209b6 <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
8002098e:	30 18       	mov	r8,1
80020990:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80020994:	fe cc 02 f4 	sub	r12,pc,756
80020998:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
8002099c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800209a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
800209a4:	11 e8       	ld.ub	r8,r8[0x6]
800209a6:	10 9a       	mov	r10,r8
800209a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
800209ac:	11 d8       	ld.ub	r8,r8[0x5]
800209ae:	10 9b       	mov	r11,r8
800209b0:	30 0c       	mov	r12,0
800209b2:	fe b0 f7 01 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
800209b6:	2e 5d       	sub	sp,-108
800209b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800209bc:	80 02       	ld.sh	r2,r0[0x0]
800209be:	05 42       	ld.w	r2,--r2
800209c0:	73 65       	ld.w	r5,r9[0x58]
800209c2:	74 74       	ld.w	r4,r10[0x1c]
800209c4:	69 6e       	ld.w	lr,r4[0x58]
800209c6:	67 20       	ld.w	r0,r3[0x48]
800209c8:	63 75       	ld.w	r5,r1[0x5c]
800209ca:	72 72       	ld.w	r2,r9[0x1c]
800209cc:	65 6e       	ld.w	lr,r2[0x58]
800209ce:	74 20       	ld.w	r0,r10[0x8]
800209d0:	77 70       	ld.w	r0,r11[0x5c]
800209d2:	00 00       	add	r0,r0
800209d4:	53 65       	stdsp	sp[0xd8],r5
800209d6:	74 20       	ld.w	r0,r10[0x8]
800209d8:	63 75       	ld.w	r5,r1[0x5c]
800209da:	72 72       	ld.w	r2,r9[0x1c]
800209dc:	65 6e       	ld.w	lr,r2[0x58]
800209de:	74 20       	ld.w	r0,r10[0x8]
800209e0:	77 61       	ld.w	r1,r11[0x58]
800209e2:	79 70       	ld.w	r0,r12[0x5c]
800209e4:	6f 69       	ld.w	r9,r7[0x58]
800209e6:	6e 74       	ld.w	r4,r7[0x1c]
800209e8:	20 74       	sub	r4,7
800209ea:	6f 20       	ld.w	r0,r7[0x48]
800209ec:	6e 75       	ld.w	r5,r7[0x1c]
800209ee:	6d 62       	ld.w	r2,r6[0x58]
800209f0:	65 72       	ld.w	r2,r2[0x5c]
	...

800209f4 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
800209f4:	eb cd 40 c0 	pushm	r6-r7,lr
800209f8:	1a 97       	mov	r7,sp
800209fa:	20 5d       	sub	sp,20
800209fc:	4c 06       	lddpc	r6,80020afc <set_current_wp+0x108>
800209fe:	1e 26       	rsub	r6,pc
80020a00:	ef 4c ff f4 	st.w	r7[-12],r12
80020a04:	ef 4b ff f0 	st.w	r7[-16],r11
80020a08:	14 98       	mov	r8,r10
80020a0a:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
80020a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020a12:	ee c9 00 08 	sub	r9,r7,8
80020a16:	12 9b       	mov	r11,r9
80020a18:	10 9c       	mov	r12,r8
80020a1a:	fe b0 f5 65 	rcall	8001f4e4 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020a1e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80020a22:	ec f8 00 74 	ld.w	r8,r6[116]
80020a26:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020a28:	f0 09 18 00 	cp.b	r9,r8
80020a2c:	c6 41       	brne	80020af4 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020a2e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80020a32:	ec f8 00 c8 	ld.w	r8,r6[200]
80020a36:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020a38:	f0 09 18 00 	cp.b	r9,r8
80020a3c:	c5 c1       	brne	80020af4 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80020a3e:	fe cc 00 7e 	sub	r12,pc,126
80020a42:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020a46:	30 08       	mov	r8,0
80020a48:	ef 48 ff fc 	st.w	r7[-4],r8
80020a4c:	c1 08       	rjmp	80020a6c <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80020a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a52:	a3 68       	lsl	r8,0x2
80020a54:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020a58:	f2 08 00 08 	add	r8,r9,r8
80020a5c:	70 09       	ld.w	r9,r8[0x0]
80020a5e:	30 08       	mov	r8,0
80020a60:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020a62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a66:	2f f8       	sub	r8,-1
80020a68:	ef 48 ff fc 	st.w	r7[-4],r8
80020a6c:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80020a70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a74:	10 39       	cp.w	r9,r8
80020a76:	fe 99 ff ec 	brgt	80020a4e <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80020a7a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020a7e:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80020a82:	f0 09 19 00 	cp.h	r9,r8
80020a86:	e0 88 00 2b 	brls	80020adc <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80020a8a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020a8e:	5c 78       	castu.h	r8
80020a90:	a3 68       	lsl	r8,0x2
80020a92:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020a96:	f2 08 00 08 	add	r8,r9,r8
80020a9a:	70 09       	ld.w	r9,r8[0x0]
80020a9c:	30 18       	mov	r8,1
80020a9e:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80020aa0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020aa4:	5c 78       	castu.h	r8
80020aa6:	a3 68       	lsl	r8,0x2
80020aa8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020aac:	f2 08 00 08 	add	r8,r9,r8
80020ab0:	70 08       	ld.w	r8,r8[0x0]
80020ab2:	11 c8       	ld.ub	r8,r8[0x4]
80020ab4:	10 9b       	mov	r11,r8
80020ab6:	30 0c       	mov	r12,0
80020ab8:	fe b0 f5 3c 	rcall	8001f530 <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80020abc:	fe cc 00 e8 	sub	r12,pc,232
80020ac0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80020ac4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020ac8:	5c 78       	castu.h	r8
80020aca:	30 ab       	mov	r11,10
80020acc:	10 9c       	mov	r12,r8
80020ace:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020ad2:	fe cc 0d 9e 	sub	r12,pc,3486
80020ad6:	f0 16 00 01 	mcall	r6[4]
80020ada:	c0 d8       	rjmp	80020af4 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80020adc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020ae0:	11 e8       	ld.ub	r8,r8[0x6]
80020ae2:	10 9a       	mov	r10,r8
80020ae4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020ae8:	11 d8       	ld.ub	r8,r8[0x5]
80020aea:	30 39       	mov	r9,3
80020aec:	10 9b       	mov	r11,r8
80020aee:	30 0c       	mov	r12,0
80020af0:	fe b0 f6 62 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
		}
	}
}
80020af4:	2f bd       	sub	sp,-20
80020af6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020afa:	00 00       	add	r0,r0
80020afc:	80 02       	ld.sh	r2,r0[0x0]
80020afe:	08 82       	andn	r2,r4
80020b00:	43 6c       	lddsp	r12,sp[0xd8]
80020b02:	65 61       	ld.w	r1,r2[0x58]
80020b04:	72 20       	ld.w	r0,r9[0x8]
80020b06:	57 61       	stdsp	sp[0x1d8],r1
80020b08:	79 70       	ld.w	r0,r12[0x5c]
80020b0a:	6f 69       	ld.w	r9,r7[0x58]
80020b0c:	6e 74       	ld.w	r4,r7[0x1c]
80020b0e:	20 6c       	sub	r12,6
80020b10:	69 73       	ld.w	r3,r4[0x5c]
80020b12:	74 00       	ld.w	r0,r10[0x0]

80020b14 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80020b14:	eb cd 40 c0 	pushm	r6-r7,lr
80020b18:	1a 97       	mov	r7,sp
80020b1a:	20 4d       	sub	sp,16
80020b1c:	4a 06       	lddpc	r6,80020b9c <clear_waypoint_list+0x88>
80020b1e:	1e 26       	rsub	r6,pc
80020b20:	ef 4c ff f8 	st.w	r7[-8],r12
80020b24:	ef 4b ff f4 	st.w	r7[-12],r11
80020b28:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
80020b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b30:	ee c9 00 02 	sub	r9,r7,2
80020b34:	12 9b       	mov	r11,r9
80020b36:	10 9c       	mov	r12,r8
80020b38:	fe b0 f5 ff 	rcall	8001f736 <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b3c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020b40:	ec f8 00 74 	ld.w	r8,r6[116]
80020b44:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020b46:	f0 09 18 00 	cp.b	r9,r8
80020b4a:	c2 51       	brne	80020b94 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b4c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020b50:	ec f8 00 c8 	ld.w	r8,r6[200]
80020b54:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020b56:	f0 09 18 00 	cp.b	r9,r8
80020b5a:	c1 d1       	brne	80020b94 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
80020b5c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020b60:	30 08       	mov	r8,0
80020b62:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
80020b64:	ec f9 01 28 	ld.w	r9,r6[296]
80020b68:	30 08       	mov	r8,0
80020b6a:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80020b6c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020b70:	30 08       	mov	r8,0
80020b72:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80020b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b78:	11 e8       	ld.ub	r8,r8[0x6]
80020b7a:	10 9a       	mov	r10,r8
80020b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b80:	11 d8       	ld.ub	r8,r8[0x5]
80020b82:	30 19       	mov	r9,1
80020b84:	10 9b       	mov	r11,r8
80020b86:	30 0c       	mov	r12,0
80020b88:	fe b0 f6 16 	rcall	8001f7b4 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80020b8c:	fe cc 00 8c 	sub	r12,pc,140
80020b90:	f0 16 00 01 	mcall	r6[4]
	}		
}
80020b94:	2f cd       	sub	sp,-16
80020b96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b9a:	00 00       	add	r0,r0
80020b9c:	80 02       	ld.sh	r2,r0[0x0]
80020b9e:	09 a2       	ld.ub	r2,r4[0x2]
80020ba0:	62 61       	ld.w	r1,r1[0x18]
80020ba2:	73 65       	ld.w	r5,r9[0x58]
80020ba4:	5f 6d       	srmi	sp
80020ba6:	6f 64       	ld.w	r4,r7[0x58]
80020ba8:	65 3a       	ld.w	r10,r2[0x4c]
80020baa:	00 00       	add	r0,r0
80020bac:	2c 20       	sub	r0,-62
80020bae:	63 75       	ld.w	r5,r1[0x5c]
80020bb0:	73 74       	ld.w	r4,r9[0x5c]
80020bb2:	6f 6d       	ld.w	sp,r7[0x58]
80020bb4:	20 6d       	sub	sp,24
80020bb6:	6f 64       	ld.w	r4,r7[0x58]
80020bb8:	65 3a       	ld.w	r10,r2[0x4c]
	...

80020bbc <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
80020bbc:	eb cd 40 e0 	pushm	r5-r7,lr
80020bc0:	1a 97       	mov	r7,sp
80020bc2:	20 6d       	sub	sp,24
80020bc4:	4e 26       	lddpc	r6,80020d4c <set_mav_mode+0x190>
80020bc6:	1e 26       	rsub	r6,pc
80020bc8:	ef 4c ff f4 	st.w	r7[-12],r12
80020bcc:	ef 4b ff f0 	st.w	r7[-16],r11
80020bd0:	ef 4a ff ec 	st.w	r7[-20],r10
80020bd4:	12 98       	mov	r8,r9
80020bd6:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
80020bda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020bde:	ee c9 00 08 	sub	r9,r7,8
80020be2:	12 9b       	mov	r11,r9
80020be4:	10 9c       	mov	r12,r8
80020be6:	fe b0 f1 97 	rcall	8001ef14 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
80020bea:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80020bee:	ec f8 00 74 	ld.w	r8,r6[116]
80020bf2:	11 88       	ld.ub	r8,r8[0x0]
80020bf4:	f0 09 18 00 	cp.b	r9,r8
80020bf8:	e0 81 00 a6 	brne	80020d44 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80020bfc:	fe cc 00 5c 	sub	r12,pc,92
80020c00:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80020c04:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020c08:	30 ab       	mov	r11,10
80020c0a:	10 9c       	mov	r12,r8
80020c0c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80020c10:	fe cc 00 64 	sub	r12,pc,100
80020c14:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80020c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020c1c:	30 ab       	mov	r11,10
80020c1e:	10 9c       	mov	r12,r8
80020c20:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020c24:	fe cc 0e f0 	sub	r12,pc,3824
80020c28:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
80020c2c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80020c30:	30 08       	mov	r8,0
80020c32:	f0 09 18 00 	cp.b	r9,r8
80020c36:	c3 e1       	brne	80020cb2 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80020c38:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020c3c:	e0 48 00 58 	cp.w	r8,88
80020c40:	c0 e0       	breq	80020c5c <set_mav_mode+0xa0>
80020c42:	e0 89 00 06 	brgt	80020c4e <set_mav_mode+0x92>
80020c46:	e0 48 00 50 	cp.w	r8,80
80020c4a:	c0 90       	breq	80020c5c <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020c4c:	c7 c8       	rjmp	80020d44 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
80020c4e:	e0 48 00 5c 	cp.w	r8,92
80020c52:	c0 50       	breq	80020c5c <set_mav_mode+0xa0>
80020c54:	e0 48 00 c0 	cp.w	r8,192
80020c58:	c0 c0       	breq	80020c70 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020c5a:	c7 58       	rjmp	80020d44 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020c5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020c60:	30 38       	mov	r8,3
80020c62:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020c64:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c68:	34 08       	mov	r8,64
80020c6a:	b2 88       	st.b	r9[0x0],r8
				break;
80020c6c:	d7 03       	nop
80020c6e:	c6 b8       	rjmp	80020d44 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80020c70:	fe b0 f6 66 	rcall	8001f93c <get_thrust_from_remote>
80020c74:	18 98       	mov	r8,r12
80020c76:	10 9c       	mov	r12,r8
80020c78:	f0 16 00 02 	mcall	r6[8]
80020c7c:	30 05       	mov	r5,0
80020c7e:	e0 68 66 66 	mov	r8,26214
80020c82:	ea 18 66 66 	orh	r8,0x6666
80020c86:	e0 69 66 66 	mov	r9,26214
80020c8a:	ea 19 bf ee 	orh	r9,0xbfee
80020c8e:	f0 16 00 1e 	mcall	r6[120]
80020c92:	18 98       	mov	r8,r12
80020c94:	58 08       	cp.w	r8,0
80020c96:	c0 20       	breq	80020c9a <set_mav_mode+0xde>
80020c98:	30 15       	mov	r5,1
80020c9a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80020c9e:	c5 20       	breq	80020d42 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80020ca0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020ca4:	30 48       	mov	r8,4
80020ca6:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020ca8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cac:	3c 08       	mov	r8,-64
80020cae:	b2 88       	st.b	r9[0x0],r8
80020cb0:	c4 a8       	rjmp	80020d44 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80020cb2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020cb6:	e0 48 00 c0 	cp.w	r8,192
80020cba:	c2 00       	breq	80020cfa <set_mav_mode+0x13e>
80020cbc:	e0 89 00 0c 	brgt	80020cd4 <set_mav_mode+0x118>
80020cc0:	e0 48 00 58 	cp.w	r8,88
80020cc4:	c1 20       	breq	80020ce8 <set_mav_mode+0x12c>
80020cc6:	e0 48 00 5c 	cp.w	r8,92
80020cca:	c0 f0       	breq	80020ce8 <set_mav_mode+0x12c>
80020ccc:	e0 48 00 50 	cp.w	r8,80
80020cd0:	c0 c0       	breq	80020ce8 <set_mav_mode+0x12c>
80020cd2:	c3 98       	rjmp	80020d44 <set_mav_mode+0x188>
80020cd4:	e0 48 00 d8 	cp.w	r8,216
80020cd8:	c2 30       	breq	80020d1e <set_mav_mode+0x162>
80020cda:	e0 48 00 dc 	cp.w	r8,220
80020cde:	c2 90       	breq	80020d30 <set_mav_mode+0x174>
80020ce0:	e0 48 00 d0 	cp.w	r8,208
80020ce4:	c1 40       	breq	80020d0c <set_mav_mode+0x150>
80020ce6:	c2 f8       	rjmp	80020d44 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020ce8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020cec:	30 38       	mov	r8,3
80020cee:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020cf0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cf4:	34 08       	mov	r8,64
80020cf6:	b2 88       	st.b	r9[0x0],r8
				break;
80020cf8:	c2 68       	rjmp	80020d44 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020cfa:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020cfe:	30 48       	mov	r8,4
80020d00:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020d02:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d06:	3c 08       	mov	r8,-64
80020d08:	b2 88       	st.b	r9[0x0],r8
				break;
80020d0a:	c1 d8       	rjmp	80020d44 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020d0c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020d10:	30 48       	mov	r8,4
80020d12:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80020d14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d18:	3d 08       	mov	r8,-48
80020d1a:	b2 88       	st.b	r9[0x0],r8
				break;
80020d1c:	c1 48       	rjmp	80020d44 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020d1e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020d22:	30 48       	mov	r8,4
80020d24:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
80020d26:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d2a:	3d 88       	mov	r8,-40
80020d2c:	b2 88       	st.b	r9[0x0],r8
				break;
80020d2e:	c0 b8       	rjmp	80020d44 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020d30:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020d34:	30 48       	mov	r8,4
80020d36:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80020d38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d3c:	3d c8       	mov	r8,-36
80020d3e:	b2 88       	st.b	r9[0x0],r8
80020d40:	c0 28       	rjmp	80020d44 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020d42:	d7 03       	nop
				break;
			}
		}
		
	}
}
80020d44:	2f ad       	sub	sp,-24
80020d46:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80020d4a:	00 00       	add	r0,r0
80020d4c:	80 02       	ld.sh	r2,r0[0x0]
80020d4e:	0a 4a       	or	r10,r5
80020d50:	53 65       	stdsp	sp[0xd8],r5
80020d52:	6e 64       	ld.w	r4,r7[0x18]
80020d54:	69 6e       	ld.w	lr,r4[0x58]
80020d56:	67 20       	ld.w	r0,r3[0x48]
80020d58:	77 61       	ld.w	r1,r11[0x58]
80020d5a:	79 70       	ld.w	r0,r12[0x5c]
80020d5c:	6f 69       	ld.w	r9,r7[0x58]
80020d5e:	6e 74       	ld.w	r4,r7[0x1c]
80020d60:	20 74       	sub	r4,7
80020d62:	69 6d       	ld.w	sp,r4[0x58]
80020d64:	65 6f       	ld.w	pc,r2[0x58]
80020d66:	75 74       	ld.w	r4,r10[0x5c]
80020d68:	00 00       	add	r0,r0
80020d6a:	00 00       	add	r0,r0
80020d6c:	52 65       	stdsp	sp[0x98],r5
80020d6e:	63 65       	ld.w	r5,r1[0x58]
80020d70:	69 76       	ld.w	r6,r4[0x5c]
80020d72:	69 6e       	ld.w	lr,r4[0x58]
80020d74:	67 20       	ld.w	r0,r3[0x48]
80020d76:	77 61       	ld.w	r1,r11[0x58]
80020d78:	79 70       	ld.w	r0,r12[0x5c]
80020d7a:	6f 69       	ld.w	r9,r7[0x58]
80020d7c:	6e 74       	ld.w	r4,r7[0x1c]
80020d7e:	20 74       	sub	r4,7
80020d80:	69 6d       	ld.w	sp,r4[0x58]
80020d82:	65 6f       	ld.w	pc,r2[0x58]
80020d84:	75 74       	ld.w	r4,r10[0x5c]
	...

80020d88 <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80020d88:	eb cd 40 c0 	pushm	r6-r7,lr
80020d8c:	1a 97       	mov	r7,sp
80020d8e:	20 4d       	sub	sp,16
80020d90:	4a 76       	lddpc	r6,80020e2c <control_time_out_waypoint_msg+0xa4>
80020d92:	1e 26       	rsub	r6,pc
80020d94:	ef 4c ff f8 	st.w	r7[-8],r12
80020d98:	ef 4b ff f4 	st.w	r7[-12],r11
80020d9c:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80020da0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020da4:	11 88       	ld.ub	r8,r8[0x0]
80020da6:	58 08       	cp.w	r8,0
80020da8:	c0 61       	brne	80020db4 <control_time_out_waypoint_msg+0x2c>
80020daa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020dae:	11 88       	ld.ub	r8,r8[0x0]
80020db0:	58 08       	cp.w	r8,0
80020db2:	c3 90       	breq	80020e24 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80020db4:	f0 16 00 0f 	mcall	r6[60]
80020db8:	18 98       	mov	r8,r12
80020dba:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
80020dbe:	ec f8 01 80 	ld.w	r8,r6[384]
80020dc2:	70 08       	ld.w	r8,r8[0x0]
80020dc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dc8:	10 19       	sub	r9,r8
80020dca:	ec f8 04 20 	ld.w	r8,r6[1056]
80020dce:	70 08       	ld.w	r8,r8[0x0]
80020dd0:	10 39       	cp.w	r9,r8
80020dd2:	e0 88 00 29 	brls	80020e24 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
80020dd6:	ec f8 01 80 	ld.w	r8,r6[384]
80020dda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dde:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80020de0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020de4:	11 88       	ld.ub	r8,r8[0x0]
80020de6:	58 08       	cp.w	r8,0
80020de8:	c0 90       	breq	80020dfa <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
80020dea:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020dee:	30 08       	mov	r8,0
80020df0:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80020df2:	fe cc 00 a2 	sub	r12,pc,162
80020df6:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
80020dfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020dfe:	11 88       	ld.ub	r8,r8[0x0]
80020e00:	58 08       	cp.w	r8,0
80020e02:	c1 10       	breq	80020e24 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80020e04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020e08:	30 08       	mov	r8,0
80020e0a:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
80020e0c:	fe cc 00 a0 	sub	r12,pc,160
80020e10:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
80020e14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020e18:	30 08       	mov	r8,0
80020e1a:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
80020e1c:	ec f9 01 28 	ld.w	r9,r6[296]
80020e20:	30 08       	mov	r8,0
80020e22:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
80020e24:	2f cd       	sub	sp,-16
80020e26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020e2a:	00 00       	add	r0,r0
80020e2c:	80 02       	ld.sh	r2,r0[0x0]
80020e2e:	0c 16       	sub	r6,r6
80020e30:	77 70       	ld.w	r0,r11[0x5c]
80020e32:	5f 67       	srmi	r7
80020e34:	6c 6f       	ld.w	pc,r6[0x18]
80020e36:	62 61       	ld.w	r1,r1[0x18]
80020e38:	6c 3a       	ld.w	r10,r6[0xc]
80020e3a:	20 6c       	sub	r12,6
80020e3c:	61 74       	ld.w	r4,r0[0x5c]
80020e3e:	20 28       	sub	r8,2
80020e40:	78 31       	ld.w	r1,r12[0xc]
80020e42:	65 37       	ld.w	r7,r2[0x4c]
80020e44:	29 3a       	sub	r10,-109
80020e46:	00 00       	add	r0,r0
80020e48:	20 6c       	sub	r12,6
80020e4a:	6f 6e       	ld.w	lr,r7[0x58]
80020e4c:	67 20       	ld.w	r0,r3[0x48]
80020e4e:	28 78       	sub	r8,-121
80020e50:	31 65       	mov	r5,22
80020e52:	37 29       	mov	r9,114
80020e54:	3a 00       	mov	r0,-96
80020e56:	00 00       	add	r0,r0
80020e58:	20 61       	sub	r1,6
80020e5a:	6c 74       	ld.w	r4,r6[0x1c]
80020e5c:	20 28       	sub	r8,2
80020e5e:	78 31       	ld.w	r1,r12[0xc]
80020e60:	30 30       	mov	r0,3
80020e62:	30 29       	mov	r9,2
80020e64:	3a 00       	mov	r0,-96
80020e66:	00 00       	add	r0,r0
80020e68:	20 77       	sub	r7,7
80020e6a:	70 5f       	ld.w	pc,r8[0x14]
80020e6c:	63 6f       	ld.w	pc,r1[0x58]
80020e6e:	6f 72       	ld.w	r2,r7[0x5c]
80020e70:	3a 20       	mov	r0,-94
80020e72:	78 20       	ld.w	r0,r12[0x8]
80020e74:	28 78       	sub	r8,-121
80020e76:	31 30       	mov	r0,19
80020e78:	30 29       	mov	r9,2
80020e7a:	3a 00       	mov	r0,-96
80020e7c:	2c 20       	sub	r0,-62
80020e7e:	79 20       	ld.w	r0,r12[0x48]
80020e80:	28 78       	sub	r8,-121
80020e82:	31 30       	mov	r0,19
80020e84:	30 29       	mov	r9,2
80020e86:	3a 00       	mov	r0,-96
80020e88:	2c 20       	sub	r0,-62
80020e8a:	7a 20       	ld.w	r0,sp[0x8]
80020e8c:	28 78       	sub	r8,-121
80020e8e:	31 30       	mov	r0,19
80020e90:	30 29       	mov	r9,2
80020e92:	3a 00       	mov	r0,-96
80020e94:	20 6c       	sub	r12,6
80020e96:	6f 63       	ld.w	r3,r7[0x58]
80020e98:	61 6c       	ld.w	r12,r0[0x58]
80020e9a:	4f 72       	lddpc	r2,80021074 <set_waypoint_from_frame+0x192>
80020e9c:	69 67       	ld.w	r7,r4[0x58]
80020e9e:	69 6e       	ld.w	lr,r4[0x58]
80020ea0:	20 6c       	sub	r12,6
80020ea2:	61 74       	ld.w	r4,r0[0x5c]
80020ea4:	20 28       	sub	r8,2
80020ea6:	78 31       	ld.w	r1,r12[0xc]
80020ea8:	65 37       	ld.w	r7,r2[0x4c]
80020eaa:	29 3a       	sub	r10,-109
80020eac:	00 00       	add	r0,r0
80020eae:	00 00       	add	r0,r0
80020eb0:	4c 6f       	lddpc	pc,80020fc8 <set_waypoint_from_frame+0xe6>
80020eb2:	63 61       	ld.w	r1,r1[0x58]
80020eb4:	6c 4f       	ld.w	pc,r6[0x10]
80020eb6:	72 69       	ld.w	r9,r9[0x18]
80020eb8:	67 69       	ld.w	r9,r3[0x58]
80020eba:	6e 3a       	ld.w	r10,r7[0xc]
80020ebc:	20 6c       	sub	r12,6
80020ebe:	61 74       	ld.w	r4,r0[0x5c]
80020ec0:	20 28       	sub	r8,2
80020ec2:	78 31       	ld.w	r1,r12[0xc]
80020ec4:	65 37       	ld.w	r7,r2[0x4c]
80020ec6:	29 3a       	sub	r10,-109
80020ec8:	00 00       	add	r0,r0
80020eca:	00 00       	add	r0,r0
80020ecc:	20 67       	sub	r7,6
80020ece:	6c 6f       	ld.w	pc,r6[0x18]
80020ed0:	62 61       	ld.w	r1,r1[0x18]
80020ed2:	6c 20       	ld.w	r0,r6[0x8]
80020ed4:	61 6c       	ld.w	r12,r0[0x58]
80020ed6:	74 20       	ld.w	r0,r10[0x8]
80020ed8:	28 78       	sub	r8,-121
80020eda:	31 30       	mov	r0,19
80020edc:	30 30       	mov	r0,3
80020ede:	29 3a       	sub	r10,-109
	...

80020ee2 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80020ee2:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80020ee6:	1a 97       	mov	r7,sp
80020ee8:	fa cd 00 a8 	sub	sp,sp,168
80020eec:	fe f6 05 f0 	ld.w	r6,pc[1520]
80020ef0:	1e 26       	rsub	r6,pc
80020ef2:	ee c5 ff ec 	sub	r5,r7,-20
80020ef6:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020ef8:	30 08       	mov	r8,0
80020efa:	ef 68 ff ff 	st.b	r7[-1],r8
80020efe:	c0 e8       	rjmp	80020f1a <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80020f00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020f04:	a3 68       	lsl	r8,0x2
80020f06:	ee 08 00 08 	add	r8,r7,r8
80020f0a:	30 09       	mov	r9,0
80020f0c:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020f10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020f14:	2f f8       	sub	r8,-1
80020f16:	ef 68 ff ff 	st.b	r7[-1],r8
80020f1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020f1e:	30 28       	mov	r8,2
80020f20:	f0 09 18 00 	cp.b	r9,r8
80020f24:	fe 98 ff ee 	brls	80020f00 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
80020f28:	0b 88       	ld.ub	r8,r5[0x0]
80020f2a:	58 18       	cp.w	r8,1
80020f2c:	e0 80 01 31 	breq	8002118e <set_waypoint_from_frame+0x2ac>
80020f30:	e0 89 00 06 	brgt	80020f3c <set_waypoint_from_frame+0x5a>
80020f34:	58 08       	cp.w	r8,0
80020f36:	c0 b0       	breq	80020f4c <set_waypoint_from_frame+0x6a>
80020f38:	e0 8f 02 a7 	bral	80021486 <set_waypoint_from_frame+0x5a4>
80020f3c:	58 28       	cp.w	r8,2
80020f3e:	e0 80 02 a3 	breq	80021484 <set_waypoint_from_frame+0x5a2>
80020f42:	58 38       	cp.w	r8,3
80020f44:	e0 80 01 a7 	breq	80021292 <set_waypoint_from_frame+0x3b0>
80020f48:	e0 8f 02 9f 	bral	80021486 <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
80020f4c:	ea e8 00 18 	ld.d	r8,r5[24]
80020f50:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
80020f54:	ea e8 00 20 	ld.d	r8,r5[32]
80020f58:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80020f5c:	ea e8 00 28 	ld.d	r8,r5[40]
80020f60:	10 9a       	mov	r10,r8
80020f62:	12 9b       	mov	r11,r9
80020f64:	f0 16 00 08 	mcall	r6[32]
80020f68:	18 98       	mov	r8,r12
80020f6a:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80020f6e:	ee cc 00 a8 	sub	r12,r7,168
80020f72:	20 7d       	sub	sp,28
80020f74:	1a 98       	mov	r8,sp
80020f76:	10 9a       	mov	r10,r8
80020f78:	ea cb ff d0 	sub	r11,r5,-48
80020f7c:	f4 c8 00 00 	sub	r8,r10,0
80020f80:	f6 c9 00 00 	sub	r9,r11,0
80020f84:	72 0e       	ld.w	lr,r9[0x0]
80020f86:	91 0e       	st.w	r8[0x0],lr
80020f88:	72 1e       	ld.w	lr,r9[0x4]
80020f8a:	91 1e       	st.w	r8[0x4],lr
80020f8c:	72 2e       	ld.w	lr,r9[0x8]
80020f8e:	91 2e       	st.w	r8[0x8],lr
80020f90:	72 39       	ld.w	r9,r9[0xc]
80020f92:	91 39       	st.w	r8[0xc],r9
80020f94:	f6 e8 00 10 	ld.d	r8,r11[16]
80020f98:	f4 e9 00 10 	st.d	r10[16],r8
80020f9c:	76 68       	ld.w	r8,r11[0x18]
80020f9e:	95 68       	st.w	r10[0x18],r8
80020fa0:	20 7d       	sub	sp,28
80020fa2:	1a 98       	mov	r8,sp
80020fa4:	10 9a       	mov	r10,r8
80020fa6:	ee cb 00 20 	sub	r11,r7,32
80020faa:	f4 c8 00 00 	sub	r8,r10,0
80020fae:	f6 c9 00 00 	sub	r9,r11,0
80020fb2:	72 0e       	ld.w	lr,r9[0x0]
80020fb4:	91 0e       	st.w	r8[0x0],lr
80020fb6:	72 1e       	ld.w	lr,r9[0x4]
80020fb8:	91 1e       	st.w	r8[0x4],lr
80020fba:	72 2e       	ld.w	lr,r9[0x8]
80020fbc:	91 2e       	st.w	r8[0x8],lr
80020fbe:	72 39       	ld.w	r9,r9[0xc]
80020fc0:	91 39       	st.w	r8[0xc],r9
80020fc2:	f6 e8 00 10 	ld.d	r8,r11[16]
80020fc6:	f4 e9 00 10 	st.d	r10[16],r8
80020fca:	76 68       	ld.w	r8,r11[0x18]
80020fcc:	95 68       	st.w	r10[0x18],r8
80020fce:	f0 16 00 7c 	mcall	r6[496]
80020fd2:	2f 2d       	sub	sp,-56
80020fd4:	ee cb 00 50 	sub	r11,r7,80
80020fd8:	ee ca 00 a8 	sub	r10,r7,168
80020fdc:	f6 c8 00 00 	sub	r8,r11,0
80020fe0:	f4 c9 00 00 	sub	r9,r10,0
80020fe4:	72 0c       	ld.w	r12,r9[0x0]
80020fe6:	91 0c       	st.w	r8[0x0],r12
80020fe8:	72 1c       	ld.w	r12,r9[0x4]
80020fea:	91 1c       	st.w	r8[0x4],r12
80020fec:	72 2c       	ld.w	r12,r9[0x8]
80020fee:	91 2c       	st.w	r8[0x8],r12
80020ff0:	72 39       	ld.w	r9,r9[0xc]
80020ff2:	91 39       	st.w	r8[0xc],r9
80020ff4:	f6 c8 ff f0 	sub	r8,r11,-16
80020ff8:	f4 c9 ff f0 	sub	r9,r10,-16
80020ffc:	72 0c       	ld.w	r12,r9[0x0]
80020ffe:	91 0c       	st.w	r8[0x0],r12
80021000:	72 1c       	ld.w	r12,r9[0x4]
80021002:	91 1c       	st.w	r8[0x4],r12
80021004:	72 2c       	ld.w	r12,r9[0x8]
80021006:	91 2c       	st.w	r8[0x8],r12
80021008:	72 39       	ld.w	r9,r9[0xc]
8002100a:	91 39       	st.w	r8[0xc],r9
8002100c:	f6 c8 ff e0 	sub	r8,r11,-32
80021010:	f4 c9 ff e0 	sub	r9,r10,-32
80021014:	72 0a       	ld.w	r10,r9[0x0]
80021016:	91 0a       	st.w	r8[0x0],r10
80021018:	72 1a       	ld.w	r10,r9[0x4]
8002101a:	91 1a       	st.w	r8[0x4],r10
8002101c:	72 2a       	ld.w	r10,r9[0x8]
8002101e:	91 2a       	st.w	r8[0x8],r10
80021020:	72 39       	ld.w	r9,r9[0xc]
80021022:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
80021024:	fe cc 01 f4 	sub	r12,pc,500
80021028:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
8002102c:	ee ea ff e8 	ld.d	r10,r7[-24]
80021030:	30 08       	mov	r8,0
80021032:	e0 69 12 d0 	mov	r9,4816
80021036:	ea 19 41 63 	orh	r9,0x4163
8002103a:	f0 16 00 03 	mcall	r6[12]
8002103e:	14 98       	mov	r8,r10
80021040:	16 99       	mov	r9,r11
80021042:	10 9a       	mov	r10,r8
80021044:	12 9b       	mov	r11,r9
80021046:	f0 16 00 14 	mcall	r6[80]
8002104a:	18 98       	mov	r8,r12
8002104c:	30 ab       	mov	r11,10
8002104e:	10 9c       	mov	r12,r8
80021050:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021054:	fe cc 02 0c 	sub	r12,pc,524
80021058:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
8002105c:	ee ea ff e0 	ld.d	r10,r7[-32]
80021060:	30 08       	mov	r8,0
80021062:	e0 69 12 d0 	mov	r9,4816
80021066:	ea 19 41 63 	orh	r9,0x4163
8002106a:	f0 16 00 03 	mcall	r6[12]
8002106e:	14 98       	mov	r8,r10
80021070:	16 99       	mov	r9,r11
80021072:	10 9a       	mov	r10,r8
80021074:	12 9b       	mov	r11,r9
80021076:	f0 16 00 14 	mcall	r6[80]
8002107a:	18 98       	mov	r8,r12
8002107c:	30 ab       	mov	r11,10
8002107e:	10 9c       	mov	r12,r8
80021080:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021084:	fe cc 02 2c 	sub	r12,pc,556
80021088:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
8002108c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021090:	fc 18 44 7a 	movh	r8,0x447a
80021094:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021098:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002109c:	30 ab       	mov	r11,10
8002109e:	10 9c       	mov	r12,r8
800210a0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800210a4:	fe cc 02 3c 	sub	r12,pc,572
800210a8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
800210ac:	ee f9 ff b0 	ld.w	r9,r7[-80]
800210b0:	fc 18 42 c8 	movh	r8,0x42c8
800210b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800210b8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210bc:	30 ab       	mov	r11,10
800210be:	10 9c       	mov	r12,r8
800210c0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800210c4:	fe cc 02 48 	sub	r12,pc,584
800210c8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800210cc:	ee f9 ff b4 	ld.w	r9,r7[-76]
800210d0:	fc 18 42 c8 	movh	r8,0x42c8
800210d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800210d8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210dc:	30 ab       	mov	r11,10
800210de:	10 9c       	mov	r12,r8
800210e0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800210e4:	fe cc 02 5c 	sub	r12,pc,604
800210e8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
800210ec:	ee f9 ff b8 	ld.w	r9,r7[-72]
800210f0:	fc 18 42 c8 	movh	r8,0x42c8
800210f4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800210f8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210fc:	30 ab       	mov	r11,10
800210fe:	10 9c       	mov	r12,r8
80021100:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
80021104:	fe cc 02 70 	sub	r12,pc,624
80021108:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
8002110c:	ea ea 00 38 	ld.d	r10,r5[56]
80021110:	30 08       	mov	r8,0
80021112:	e0 69 12 d0 	mov	r9,4816
80021116:	ea 19 41 63 	orh	r9,0x4163
8002111a:	f0 16 00 03 	mcall	r6[12]
8002111e:	14 98       	mov	r8,r10
80021120:	16 99       	mov	r9,r11
80021122:	10 9a       	mov	r10,r8
80021124:	12 9b       	mov	r11,r9
80021126:	f0 16 00 14 	mcall	r6[80]
8002112a:	18 98       	mov	r8,r12
8002112c:	30 ab       	mov	r11,10
8002112e:	10 9c       	mov	r12,r8
80021130:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021134:	fe cc 02 ec 	sub	r12,pc,748
80021138:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
8002113c:	ea ea 00 30 	ld.d	r10,r5[48]
80021140:	30 08       	mov	r8,0
80021142:	e0 69 12 d0 	mov	r9,4816
80021146:	ea 19 41 63 	orh	r9,0x4163
8002114a:	f0 16 00 03 	mcall	r6[12]
8002114e:	14 98       	mov	r8,r10
80021150:	16 99       	mov	r9,r11
80021152:	10 9a       	mov	r10,r8
80021154:	12 9b       	mov	r11,r9
80021156:	f0 16 00 14 	mcall	r6[80]
8002115a:	18 98       	mov	r8,r12
8002115c:	30 ab       	mov	r11,10
8002115e:	10 9c       	mov	r12,r8
80021160:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021164:	fe cc 03 0c 	sub	r12,pc,780
80021168:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
8002116c:	6b 09       	ld.w	r9,r5[0x40]
8002116e:	fc 18 44 7a 	movh	r8,0x447a
80021172:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021176:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002117a:	30 ab       	mov	r11,10
8002117c:	10 9c       	mov	r12,r8
8002117e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021182:	fe cc 14 4e 	sub	r12,pc,5198
80021186:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002118a:	e0 8f 01 7e 	bral	80021486 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
8002118e:	ea e8 00 18 	ld.d	r8,r5[24]
80021192:	10 9a       	mov	r10,r8
80021194:	12 9b       	mov	r11,r9
80021196:	f0 16 00 08 	mcall	r6[32]
8002119a:	18 98       	mov	r8,r12
8002119c:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
800211a0:	ea e8 00 20 	ld.d	r8,r5[32]
800211a4:	10 9a       	mov	r10,r8
800211a6:	12 9b       	mov	r11,r9
800211a8:	f0 16 00 08 	mcall	r6[32]
800211ac:	18 98       	mov	r8,r12
800211ae:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
800211b2:	ea e8 00 28 	ld.d	r8,r5[40]
800211b6:	10 9a       	mov	r10,r8
800211b8:	12 9b       	mov	r11,r9
800211ba:	f0 16 00 08 	mcall	r6[32]
800211be:	18 98       	mov	r8,r12
800211c0:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
800211c4:	6a 58       	ld.w	r8,r5[0x14]
800211c6:	10 9c       	mov	r12,r8
800211c8:	f0 16 00 02 	mcall	r6[8]
800211cc:	e0 68 2d 18 	mov	r8,11544
800211d0:	ea 18 54 44 	orh	r8,0x5444
800211d4:	e0 69 21 fb 	mov	r9,8699
800211d8:	ea 19 40 09 	orh	r9,0x4009
800211dc:	f0 16 00 03 	mcall	r6[12]
800211e0:	14 98       	mov	r8,r10
800211e2:	16 99       	mov	r9,r11
800211e4:	10 9a       	mov	r10,r8
800211e6:	12 9b       	mov	r11,r9
800211e8:	30 08       	mov	r8,0
800211ea:	e0 69 80 00 	mov	r9,32768
800211ee:	ea 19 40 66 	orh	r9,0x4066
800211f2:	f0 16 00 0c 	mcall	r6[48]
800211f6:	14 98       	mov	r8,r10
800211f8:	16 99       	mov	r9,r11
800211fa:	10 9a       	mov	r10,r8
800211fc:	12 9b       	mov	r11,r9
800211fe:	f0 16 00 08 	mcall	r6[32]
80021202:	18 98       	mov	r8,r12
80021204:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
80021208:	ee cc 00 a8 	sub	r12,r7,168
8002120c:	20 cd       	sub	sp,48
8002120e:	1a 98       	mov	r8,sp
80021210:	10 9b       	mov	r11,r8
80021212:	ee ca 00 50 	sub	r10,r7,80
80021216:	f6 c8 00 00 	sub	r8,r11,0
8002121a:	f4 c9 00 00 	sub	r9,r10,0
8002121e:	72 0e       	ld.w	lr,r9[0x0]
80021220:	91 0e       	st.w	r8[0x0],lr
80021222:	72 1e       	ld.w	lr,r9[0x4]
80021224:	91 1e       	st.w	r8[0x4],lr
80021226:	72 2e       	ld.w	lr,r9[0x8]
80021228:	91 2e       	st.w	r8[0x8],lr
8002122a:	72 39       	ld.w	r9,r9[0xc]
8002122c:	91 39       	st.w	r8[0xc],r9
8002122e:	f6 c8 ff f0 	sub	r8,r11,-16
80021232:	f4 c9 ff f0 	sub	r9,r10,-16
80021236:	72 0e       	ld.w	lr,r9[0x0]
80021238:	91 0e       	st.w	r8[0x0],lr
8002123a:	72 1e       	ld.w	lr,r9[0x4]
8002123c:	91 1e       	st.w	r8[0x4],lr
8002123e:	72 2e       	ld.w	lr,r9[0x8]
80021240:	91 2e       	st.w	r8[0x8],lr
80021242:	72 39       	ld.w	r9,r9[0xc]
80021244:	91 39       	st.w	r8[0xc],r9
80021246:	f6 c8 ff e0 	sub	r8,r11,-32
8002124a:	f4 c9 ff e0 	sub	r9,r10,-32
8002124e:	72 0a       	ld.w	r10,r9[0x0]
80021250:	91 0a       	st.w	r8[0x0],r10
80021252:	72 1a       	ld.w	r10,r9[0x4]
80021254:	91 1a       	st.w	r8[0x4],r10
80021256:	72 2a       	ld.w	r10,r9[0x8]
80021258:	91 2a       	st.w	r8[0x8],r10
8002125a:	72 39       	ld.w	r9,r9[0xc]
8002125c:	91 39       	st.w	r8[0xc],r9
8002125e:	f0 16 00 8a 	mcall	r6[552]
80021262:	2f 4d       	sub	sp,-48
80021264:	ee ca 00 40 	sub	r10,r7,64
80021268:	ee cb 00 a8 	sub	r11,r7,168
8002126c:	f4 c8 00 00 	sub	r8,r10,0
80021270:	f6 c9 00 00 	sub	r9,r11,0
80021274:	72 0c       	ld.w	r12,r9[0x0]
80021276:	91 0c       	st.w	r8[0x0],r12
80021278:	72 1c       	ld.w	r12,r9[0x4]
8002127a:	91 1c       	st.w	r8[0x4],r12
8002127c:	72 2c       	ld.w	r12,r9[0x8]
8002127e:	91 2c       	st.w	r8[0x8],r12
80021280:	72 39       	ld.w	r9,r9[0xc]
80021282:	91 39       	st.w	r8[0xc],r9
80021284:	f6 e8 00 10 	ld.d	r8,r11[16]
80021288:	f4 e9 00 10 	st.d	r10[16],r8
8002128c:	76 68       	ld.w	r8,r11[0x18]
8002128e:	95 68       	st.w	r10[0x18],r8
		break;
80021290:	cf b8       	rjmp	80021486 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80021292:	ea e8 00 18 	ld.d	r8,r5[24]
80021296:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002129a:	ea e8 00 20 	ld.d	r8,r5[32]
8002129e:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
800212a2:	ea e8 00 28 	ld.d	r8,r5[40]
800212a6:	10 9a       	mov	r10,r8
800212a8:	12 9b       	mov	r11,r9
800212aa:	f0 16 00 08 	mcall	r6[32]
800212ae:	18 98       	mov	r8,r12
800212b0:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
800212b4:	ee ca 00 78 	sub	r10,r7,120
800212b8:	ea cb ff d0 	sub	r11,r5,-48
800212bc:	f4 c8 00 00 	sub	r8,r10,0
800212c0:	f6 c9 00 00 	sub	r9,r11,0
800212c4:	72 0c       	ld.w	r12,r9[0x0]
800212c6:	91 0c       	st.w	r8[0x0],r12
800212c8:	72 1c       	ld.w	r12,r9[0x4]
800212ca:	91 1c       	st.w	r8[0x4],r12
800212cc:	72 2c       	ld.w	r12,r9[0x8]
800212ce:	91 2c       	st.w	r8[0x8],r12
800212d0:	72 39       	ld.w	r9,r9[0xc]
800212d2:	91 39       	st.w	r8[0xc],r9
800212d4:	f6 e8 00 10 	ld.d	r8,r11[16]
800212d8:	f4 e9 00 10 	st.d	r10[16],r8
800212dc:	76 68       	ld.w	r8,r11[0x18]
800212de:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
800212e0:	30 08       	mov	r8,0
800212e2:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
800212e6:	ee cc 00 a8 	sub	r12,r7,168
800212ea:	20 7d       	sub	sp,28
800212ec:	1a 98       	mov	r8,sp
800212ee:	10 9a       	mov	r10,r8
800212f0:	ee cb 00 78 	sub	r11,r7,120
800212f4:	f4 c8 00 00 	sub	r8,r10,0
800212f8:	f6 c9 00 00 	sub	r9,r11,0
800212fc:	72 0e       	ld.w	lr,r9[0x0]
800212fe:	91 0e       	st.w	r8[0x0],lr
80021300:	72 1e       	ld.w	lr,r9[0x4]
80021302:	91 1e       	st.w	r8[0x4],lr
80021304:	72 2e       	ld.w	lr,r9[0x8]
80021306:	91 2e       	st.w	r8[0x8],lr
80021308:	72 39       	ld.w	r9,r9[0xc]
8002130a:	91 39       	st.w	r8[0xc],r9
8002130c:	f6 e8 00 10 	ld.d	r8,r11[16]
80021310:	f4 e9 00 10 	st.d	r10[16],r8
80021314:	76 68       	ld.w	r8,r11[0x18]
80021316:	95 68       	st.w	r10[0x18],r8
80021318:	20 7d       	sub	sp,28
8002131a:	1a 98       	mov	r8,sp
8002131c:	10 9a       	mov	r10,r8
8002131e:	ee cb 00 20 	sub	r11,r7,32
80021322:	f4 c8 00 00 	sub	r8,r10,0
80021326:	f6 c9 00 00 	sub	r9,r11,0
8002132a:	72 0e       	ld.w	lr,r9[0x0]
8002132c:	91 0e       	st.w	r8[0x0],lr
8002132e:	72 1e       	ld.w	lr,r9[0x4]
80021330:	91 1e       	st.w	r8[0x4],lr
80021332:	72 2e       	ld.w	lr,r9[0x8]
80021334:	91 2e       	st.w	r8[0x8],lr
80021336:	72 39       	ld.w	r9,r9[0xc]
80021338:	91 39       	st.w	r8[0xc],r9
8002133a:	f6 e8 00 10 	ld.d	r8,r11[16]
8002133e:	f4 e9 00 10 	st.d	r10[16],r8
80021342:	76 68       	ld.w	r8,r11[0x18]
80021344:	95 68       	st.w	r10[0x18],r8
80021346:	f0 16 00 7c 	mcall	r6[496]
8002134a:	2f 2d       	sub	sp,-56
8002134c:	ee cb 00 50 	sub	r11,r7,80
80021350:	ee ca 00 a8 	sub	r10,r7,168
80021354:	f6 c8 00 00 	sub	r8,r11,0
80021358:	f4 c9 00 00 	sub	r9,r10,0
8002135c:	72 0c       	ld.w	r12,r9[0x0]
8002135e:	91 0c       	st.w	r8[0x0],r12
80021360:	72 1c       	ld.w	r12,r9[0x4]
80021362:	91 1c       	st.w	r8[0x4],r12
80021364:	72 2c       	ld.w	r12,r9[0x8]
80021366:	91 2c       	st.w	r8[0x8],r12
80021368:	72 39       	ld.w	r9,r9[0xc]
8002136a:	91 39       	st.w	r8[0xc],r9
8002136c:	f6 c8 ff f0 	sub	r8,r11,-16
80021370:	f4 c9 ff f0 	sub	r9,r10,-16
80021374:	72 0c       	ld.w	r12,r9[0x0]
80021376:	91 0c       	st.w	r8[0x0],r12
80021378:	72 1c       	ld.w	r12,r9[0x4]
8002137a:	91 1c       	st.w	r8[0x4],r12
8002137c:	72 2c       	ld.w	r12,r9[0x8]
8002137e:	91 2c       	st.w	r8[0x8],r12
80021380:	72 39       	ld.w	r9,r9[0xc]
80021382:	91 39       	st.w	r8[0xc],r9
80021384:	f6 c8 ff e0 	sub	r8,r11,-32
80021388:	f4 c9 ff e0 	sub	r9,r10,-32
8002138c:	72 0a       	ld.w	r10,r9[0x0]
8002138e:	91 0a       	st.w	r8[0x0],r10
80021390:	72 1a       	ld.w	r10,r9[0x4]
80021392:	91 1a       	st.w	r8[0x4],r10
80021394:	72 2a       	ld.w	r10,r9[0x8]
80021396:	91 2a       	st.w	r8[0x8],r10
80021398:	72 39       	ld.w	r9,r9[0xc]
8002139a:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
8002139c:	fe cc 04 ec 	sub	r12,pc,1260
800213a0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
800213a4:	ee ea ff 90 	ld.d	r10,r7[-112]
800213a8:	30 08       	mov	r8,0
800213aa:	e0 69 12 d0 	mov	r9,4816
800213ae:	ea 19 41 63 	orh	r9,0x4163
800213b2:	f0 16 00 03 	mcall	r6[12]
800213b6:	14 98       	mov	r8,r10
800213b8:	16 99       	mov	r9,r11
800213ba:	10 9a       	mov	r10,r8
800213bc:	12 9b       	mov	r11,r9
800213be:	f0 16 00 14 	mcall	r6[80]
800213c2:	18 98       	mov	r8,r12
800213c4:	30 ab       	mov	r11,10
800213c6:	10 9c       	mov	r12,r8
800213c8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800213cc:	fe cc 05 84 	sub	r12,pc,1412
800213d0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
800213d4:	ee ea ff 88 	ld.d	r10,r7[-120]
800213d8:	30 08       	mov	r8,0
800213da:	e0 69 12 d0 	mov	r9,4816
800213de:	ea 19 41 63 	orh	r9,0x4163
800213e2:	f0 16 00 03 	mcall	r6[12]
800213e6:	14 98       	mov	r8,r10
800213e8:	16 99       	mov	r9,r11
800213ea:	10 9a       	mov	r10,r8
800213ec:	12 9b       	mov	r11,r9
800213ee:	f0 16 00 14 	mcall	r6[80]
800213f2:	18 98       	mov	r8,r12
800213f4:	30 ab       	mov	r11,10
800213f6:	10 9c       	mov	r12,r8
800213f8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
800213fc:	fe cc 05 30 	sub	r12,pc,1328
80021400:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021404:	6b 09       	ld.w	r9,r5[0x40]
80021406:	fc 18 44 7a 	movh	r8,0x447a
8002140a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002140e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021412:	30 ab       	mov	r11,10
80021414:	10 9c       	mov	r12,r8
80021416:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
8002141a:	fe cc 05 b2 	sub	r12,pc,1458
8002141e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021422:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021426:	fc 18 42 c8 	movh	r8,0x42c8
8002142a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002142e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021432:	30 ab       	mov	r11,10
80021434:	10 9c       	mov	r12,r8
80021436:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
8002143a:	fe cc 05 be 	sub	r12,pc,1470
8002143e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021442:	ee f9 ff b4 	ld.w	r9,r7[-76]
80021446:	fc 18 42 c8 	movh	r8,0x42c8
8002144a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002144e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021452:	30 ab       	mov	r11,10
80021454:	10 9c       	mov	r12,r8
80021456:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
8002145a:	fe cc 05 d2 	sub	r12,pc,1490
8002145e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021462:	ee f9 ff b8 	ld.w	r9,r7[-72]
80021466:	fc 18 42 c8 	movh	r8,0x42c8
8002146a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002146e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021472:	30 ab       	mov	r11,10
80021474:	10 9c       	mov	r12,r8
80021476:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002147a:	fe cc 17 46 	sub	r12,pc,5958
8002147e:	f0 16 00 01 	mcall	r6[4]
80021482:	c0 28       	rjmp	80021486 <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80021484:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
80021486:	06 9b       	mov	r11,r3
80021488:	ee ca 00 50 	sub	r10,r7,80
8002148c:	f6 c8 00 00 	sub	r8,r11,0
80021490:	f4 c9 00 00 	sub	r9,r10,0
80021494:	72 0c       	ld.w	r12,r9[0x0]
80021496:	91 0c       	st.w	r8[0x0],r12
80021498:	72 1c       	ld.w	r12,r9[0x4]
8002149a:	91 1c       	st.w	r8[0x4],r12
8002149c:	72 2c       	ld.w	r12,r9[0x8]
8002149e:	91 2c       	st.w	r8[0x8],r12
800214a0:	72 39       	ld.w	r9,r9[0xc]
800214a2:	91 39       	st.w	r8[0xc],r9
800214a4:	f6 c8 ff f0 	sub	r8,r11,-16
800214a8:	f4 c9 ff f0 	sub	r9,r10,-16
800214ac:	72 0c       	ld.w	r12,r9[0x0]
800214ae:	91 0c       	st.w	r8[0x0],r12
800214b0:	72 1c       	ld.w	r12,r9[0x4]
800214b2:	91 1c       	st.w	r8[0x4],r12
800214b4:	72 2c       	ld.w	r12,r9[0x8]
800214b6:	91 2c       	st.w	r8[0x8],r12
800214b8:	72 39       	ld.w	r9,r9[0xc]
800214ba:	91 39       	st.w	r8[0xc],r9
800214bc:	f6 c8 ff e0 	sub	r8,r11,-32
800214c0:	f4 c9 ff e0 	sub	r9,r10,-32
800214c4:	72 0a       	ld.w	r10,r9[0x0]
800214c6:	91 0a       	st.w	r8[0x0],r10
800214c8:	72 1a       	ld.w	r10,r9[0x4]
800214ca:	91 1a       	st.w	r8[0x4],r10
800214cc:	72 2a       	ld.w	r10,r9[0x8]
800214ce:	91 2a       	st.w	r8[0x8],r10
800214d0:	72 39       	ld.w	r9,r9[0xc]
800214d2:	91 39       	st.w	r8[0xc],r9
}
800214d4:	06 9c       	mov	r12,r3
800214d6:	2d 6d       	sub	sp,-168
800214d8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800214dc:	80 02       	ld.sh	r2,r0[0x0]
800214de:	0d 74       	ld.ub	r4,--r6
800214e0:	50 6f       	stdsp	sp[0x18],pc
800214e2:	73 69       	ld.w	r9,r9[0x58]
800214e4:	74 69       	ld.w	r9,r10[0x18]
800214e6:	6f 6e       	ld.w	lr,r7[0x58]
800214e8:	20 68       	sub	r8,6
800214ea:	6f 6c       	ld.w	r12,r7[0x58]
800214ec:	64 20       	ld.w	r0,r2[0x8]
800214ee:	61 74       	ld.w	r4,r0[0x5c]
800214f0:	3a 20       	mov	r0,-94
800214f2:	00 00       	add	r0,r0
800214f4:	29 0a       	sub	r10,-112
	...

800214f8 <wp_hold_init>:

void wp_hold_init()
{
800214f8:	eb cd 40 c0 	pushm	r6-r7,lr
800214fc:	1a 97       	mov	r7,sp
800214fe:	20 3d       	sub	sp,12
80021500:	4d 86       	lddpc	r6,80021660 <wp_hold_init+0x168>
80021502:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
80021504:	ec f8 00 00 	ld.w	r8,r6[0]
80021508:	70 08       	ld.w	r8,r8[0x0]
8002150a:	f1 38 10 b7 	ld.ub	r8,r8[4279]
8002150e:	ec 18 00 01 	eorl	r8,0x1
80021512:	5c 58       	castu.b	r8
80021514:	e0 80 00 a3 	breq	8002165a <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
80021518:	fe cc 00 38 	sub	r12,pc,56
8002151c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80021520:	ec f8 00 00 	ld.w	r8,r6[0]
80021524:	70 08       	ld.w	r8,r8[0x0]
80021526:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
8002152a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002152e:	30 ab       	mov	r11,10
80021530:	10 9c       	mov	r12,r8
80021532:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
80021536:	ec f8 00 00 	ld.w	r8,r6[0]
8002153a:	70 08       	ld.w	r8,r8[0x0]
8002153c:	f0 f8 0d a0 	ld.w	r8,r8[3488]
80021540:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021544:	30 ab       	mov	r11,10
80021546:	10 9c       	mov	r12,r8
80021548:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
8002154c:	ec f8 00 00 	ld.w	r8,r6[0]
80021550:	70 08       	ld.w	r8,r8[0x0]
80021552:	f0 f8 0d a4 	ld.w	r8,r8[3492]
80021556:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002155a:	30 ab       	mov	r11,10
8002155c:	10 9c       	mov	r12,r8
8002155e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80021562:	ec f8 00 00 	ld.w	r8,r6[0]
80021566:	70 08       	ld.w	r8,r8[0x0]
80021568:	f0 f8 0d a8 	ld.w	r8,r8[3496]
8002156c:	10 9c       	mov	r12,r8
8002156e:	f0 16 00 02 	mcall	r6[8]
80021572:	30 08       	mov	r8,0
80021574:	e0 69 80 00 	mov	r9,32768
80021578:	ea 19 40 66 	orh	r9,0x4066
8002157c:	f0 16 00 03 	mcall	r6[12]
80021580:	14 98       	mov	r8,r10
80021582:	16 99       	mov	r9,r11
80021584:	10 9a       	mov	r10,r8
80021586:	12 9b       	mov	r11,r9
80021588:	e0 68 85 1f 	mov	r8,34079
8002158c:	ea 18 51 eb 	orh	r8,0x51eb
80021590:	e0 69 1e b8 	mov	r9,7864
80021594:	ea 19 40 09 	orh	r9,0x4009
80021598:	f0 16 00 0c 	mcall	r6[48]
8002159c:	14 98       	mov	r8,r10
8002159e:	16 99       	mov	r9,r11
800215a0:	10 9a       	mov	r10,r8
800215a2:	12 9b       	mov	r11,r9
800215a4:	f0 16 00 14 	mcall	r6[80]
800215a8:	18 98       	mov	r8,r12
800215aa:	30 ab       	mov	r11,10
800215ac:	10 9c       	mov	r12,r8
800215ae:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
800215b2:	fe cc 00 be 	sub	r12,pc,190
800215b6:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
800215ba:	ec f8 00 00 	ld.w	r8,r6[0]
800215be:	70 09       	ld.w	r9,r8[0x0]
800215c0:	30 18       	mov	r8,1
800215c2:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
800215c6:	ec f8 00 00 	ld.w	r8,r6[0]
800215ca:	70 09       	ld.w	r9,r8[0x0]
800215cc:	ec f8 00 00 	ld.w	r8,r6[0]
800215d0:	70 08       	ld.w	r8,r8[0x0]
800215d2:	f2 cb ef b0 	sub	r11,r9,-4176
800215d6:	f0 ca f2 64 	sub	r10,r8,-3484
800215da:	f6 c8 00 00 	sub	r8,r11,0
800215de:	f4 c9 00 00 	sub	r9,r10,0
800215e2:	72 0c       	ld.w	r12,r9[0x0]
800215e4:	91 0c       	st.w	r8[0x0],r12
800215e6:	72 1c       	ld.w	r12,r9[0x4]
800215e8:	91 1c       	st.w	r8[0x4],r12
800215ea:	72 2c       	ld.w	r12,r9[0x8]
800215ec:	91 2c       	st.w	r8[0x8],r12
800215ee:	72 39       	ld.w	r9,r9[0xc]
800215f0:	91 39       	st.w	r8[0xc],r9
800215f2:	f6 c8 ff f0 	sub	r8,r11,-16
800215f6:	f4 c9 ff f0 	sub	r9,r10,-16
800215fa:	72 0c       	ld.w	r12,r9[0x0]
800215fc:	91 0c       	st.w	r8[0x0],r12
800215fe:	72 1c       	ld.w	r12,r9[0x4]
80021600:	91 1c       	st.w	r8[0x4],r12
80021602:	72 2c       	ld.w	r12,r9[0x8]
80021604:	91 2c       	st.w	r8[0x8],r12
80021606:	72 39       	ld.w	r9,r9[0xc]
80021608:	91 39       	st.w	r8[0xc],r9
8002160a:	f6 c8 ff e0 	sub	r8,r11,-32
8002160e:	f4 c9 ff e0 	sub	r9,r10,-32
80021612:	72 0a       	ld.w	r10,r9[0x0]
80021614:	91 0a       	st.w	r8[0x0],r10
80021616:	72 1a       	ld.w	r10,r9[0x4]
80021618:	91 1a       	st.w	r8[0x4],r10
8002161a:	72 2a       	ld.w	r10,r9[0x8]
8002161c:	91 2a       	st.w	r8[0x8],r10
8002161e:	72 39       	ld.w	r9,r9[0xc]
80021620:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021622:	ec f8 00 00 	ld.w	r8,r6[0]
80021626:	70 09       	ld.w	r9,r8[0x0]
80021628:	ee ca 00 0c 	sub	r10,r7,12
8002162c:	20 4d       	sub	sp,16
8002162e:	1a 98       	mov	r8,sp
80021630:	20 08       	sub	r8,0
80021632:	20 09       	sub	r9,0
80021634:	72 0b       	ld.w	r11,r9[0x0]
80021636:	91 0b       	st.w	r8[0x0],r11
80021638:	72 1b       	ld.w	r11,r9[0x4]
8002163a:	91 1b       	st.w	r8[0x4],r11
8002163c:	72 2b       	ld.w	r11,r9[0x8]
8002163e:	91 2b       	st.w	r8[0x8],r11
80021640:	72 39       	ld.w	r9,r9[0xc]
80021642:	91 39       	st.w	r8[0xc],r9
80021644:	14 9c       	mov	r12,r10
80021646:	f0 16 00 6f 	mcall	r6[444]
8002164a:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
8002164c:	ec f8 00 00 	ld.w	r8,r6[0]
80021650:	70 08       	ld.w	r8,r8[0x0]
80021652:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021656:	f1 49 10 5c 	st.w	r8[4188],r9
	}
}
8002165a:	2f dd       	sub	sp,-12
8002165c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021660:	80 02       	ld.sh	r2,r0[0x0]
80021662:	13 86       	ld.ub	r6,r9[0x0]

80021664 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80021664:	eb cd 40 c0 	pushm	r6-r7,lr
80021668:	1a 97       	mov	r7,sp
8002166a:	48 96       	lddpc	r6,8002168c <waypoint_hold_position_handler+0x28>
8002166c:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
8002166e:	ec f8 00 00 	ld.w	r8,r6[0]
80021672:	70 08       	ld.w	r8,r8[0x0]
80021674:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80021678:	ec 18 00 01 	eorl	r8,0x1
8002167c:	5c 58       	castu.b	r8
8002167e:	c0 30       	breq	80021684 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80021680:	f0 16 00 8f 	mcall	r6[572]
	}
	wp_hold_init();
80021684:	f0 16 00 b4 	mcall	r6[720]
}
80021688:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002168c:	80 02       	ld.sh	r2,r0[0x0]
8002168e:	14 f0       	st.b	--r10,r0
80021690:	20 72       	sub	r2,7
80021692:	65 61       	ld.w	r1,r2[0x58]
80021694:	63 68       	ld.w	r8,r1[0x58]
80021696:	65 64       	ld.w	r4,r2[0x58]
80021698:	2c 20       	sub	r0,-62
8002169a:	64 69       	ld.w	r9,r2[0x18]
8002169c:	73 74       	ld.w	r4,r9[0x5c]
8002169e:	61 6e       	ld.w	lr,r0[0x58]
800216a0:	63 65       	ld.w	r5,r1[0x58]
800216a2:	3a 00       	mov	r0,-96
800216a4:	20 6c       	sub	r12,6
800216a6:	65 73       	ld.w	r3,r2[0x5c]
800216a8:	73 20       	ld.w	r0,r9[0x48]
800216aa:	74 68       	ld.w	r8,r10[0x18]
800216ac:	61 6e       	ld.w	lr,r0[0x58]
800216ae:	20 3a       	sub	r10,3
800216b0:	00 00       	add	r0,r0
800216b2:	00 00       	add	r0,r0
800216b4:	2e 0a       	sub	r10,-32
800216b6:	00 00       	add	r0,r0
800216b8:	41 75       	lddsp	r5,sp[0x5c]
800216ba:	74 6f       	ld.w	pc,r10[0x18]
800216bc:	63 6f       	ld.w	pc,r1[0x58]
800216be:	6e 74       	ld.w	r4,r7[0x1c]
800216c0:	69 6e       	ld.w	lr,r4[0x58]
800216c2:	75 65       	ld.w	r5,r10[0x58]
800216c4:	20 74       	sub	r4,7
800216c6:	6f 77       	ld.w	r7,r7[0x5c]
800216c8:	61 72       	ld.w	r2,r0[0x5c]
800216ca:	64 73       	ld.w	r3,r2[0x1c]
800216cc:	20 77       	sub	r7,7
800216ce:	61 79       	ld.w	r9,r0[0x5c]
800216d0:	70 6f       	ld.w	pc,r8[0x18]
800216d2:	69 6e       	ld.w	lr,r4[0x58]
800216d4:	74 20       	ld.w	r0,r10[0x8]
800216d6:	4e 72       	lddpc	r2,80021870 <waypoint_navigation_handler+0x18e>
800216d8:	00 00       	add	r0,r0
800216da:	00 00       	add	r0,r0
800216dc:	53 74       	stdsp	sp[0xdc],r4
800216de:	6f 70       	ld.w	r0,r7[0x5c]
800216e0:	0a 00       	add	r0,r5

800216e2 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
800216e2:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800216e6:	1a 97       	mov	r7,sp
800216e8:	21 0d       	sub	sp,64
800216ea:	fe f6 03 ba 	ld.w	r6,pc[954]
800216ee:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
800216f0:	ec f8 00 00 	ld.w	r8,r6[0]
800216f4:	70 08       	ld.w	r8,r8[0x0]
800216f6:	f1 38 10 b4 	ld.ub	r8,r8[4276]
800216fa:	58 08       	cp.w	r8,0
800216fc:	e0 80 01 cd 	breq	80021a96 <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021700:	30 08       	mov	r8,0
80021702:	ef 68 ff ff 	st.b	r7[-1],r8
80021706:	c2 18       	rjmp	80021748 <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
80021708:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002170c:	ec f9 00 00 	ld.w	r9,r6[0]
80021710:	72 09       	ld.w	r9,r9[0x0]
80021712:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021716:	f4 ca fb f8 	sub	r10,r10,-1032
8002171a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8002171e:	ec f9 00 00 	ld.w	r9,r6[0]
80021722:	72 09       	ld.w	r9,r9[0x0]
80021724:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021728:	f6 cb fc 99 	sub	r11,r11,-871
8002172c:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021730:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021734:	a3 68       	lsl	r8,0x2
80021736:	ee 08 00 08 	add	r8,r7,r8
8002173a:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
8002173e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021742:	2f f8       	sub	r8,-1
80021744:	ef 68 ff ff 	st.b	r7[-1],r8
80021748:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002174c:	30 28       	mov	r8,2
8002174e:	f0 09 18 00 	cp.b	r9,r8
80021752:	fe 98 ff db 	brls	80021708 <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021756:	ec f8 00 00 	ld.w	r8,r6[0]
8002175a:	70 05       	ld.w	r5,r8[0x0]
8002175c:	ee c8 00 10 	sub	r8,r7,16
80021760:	10 9c       	mov	r12,r8
80021762:	fe b0 f0 d5 	rcall	8001f90c <vector_norm_sqr>
80021766:	18 98       	mov	r8,r12
80021768:	eb 48 10 b0 	st.w	r5[4272],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
8002176c:	ec f8 00 00 	ld.w	r8,r6[0]
80021770:	70 08       	ld.w	r8,r8[0x0]
80021772:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80021776:	ec f8 00 00 	ld.w	r8,r6[0]
8002177a:	70 08       	ld.w	r8,r8[0x0]
8002177c:	f0 f9 0f f8 	ld.w	r9,r8[4088]
80021780:	ec f8 00 00 	ld.w	r8,r6[0]
80021784:	70 08       	ld.w	r8,r8[0x0]
80021786:	f0 f8 0f f8 	ld.w	r8,r8[4088]
8002178a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002178e:	30 18       	mov	r8,1
80021790:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021794:	e0 8c 00 03 	brvs	8002179a <waypoint_navigation_handler+0xb8>
80021798:	c0 25       	brlt	8002179c <waypoint_navigation_handler+0xba>
8002179a:	30 08       	mov	r8,0
8002179c:	5c 58       	castu.b	r8
8002179e:	e0 80 01 80 	breq	80021a9e <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
800217a2:	fe cc 1d a2 	sub	r12,pc,7586
800217a6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
800217aa:	ec f8 00 00 	ld.w	r8,r6[0]
800217ae:	70 08       	ld.w	r8,r8[0x0]
800217b0:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800217b4:	5c 68       	casts.b	r8
800217b6:	30 ab       	mov	r11,10
800217b8:	10 9c       	mov	r12,r8
800217ba:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
800217be:	fe cc 01 2e 	sub	r12,pc,302
800217c2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
800217c6:	ec f8 00 00 	ld.w	r8,r6[0]
800217ca:	70 08       	ld.w	r8,r8[0x0]
800217cc:	f0 f8 10 b0 	ld.w	r8,r8[4272]
800217d0:	10 9c       	mov	r12,r8
800217d2:	f0 16 00 02 	mcall	r6[8]
800217d6:	14 98       	mov	r8,r10
800217d8:	16 99       	mov	r9,r11
800217da:	10 9a       	mov	r10,r8
800217dc:	12 9b       	mov	r11,r9
800217de:	f0 16 00 6d 	mcall	r6[436]
800217e2:	14 98       	mov	r8,r10
800217e4:	16 99       	mov	r9,r11
800217e6:	10 9a       	mov	r10,r8
800217e8:	12 9b       	mov	r11,r9
800217ea:	f0 16 00 14 	mcall	r6[80]
800217ee:	18 98       	mov	r8,r12
800217f0:	30 ab       	mov	r11,10
800217f2:	10 9c       	mov	r12,r8
800217f4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
800217f8:	fe cc 01 54 	sub	r12,pc,340
800217fc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80021800:	ec f8 00 00 	ld.w	r8,r6[0]
80021804:	70 08       	ld.w	r8,r8[0x0]
80021806:	f0 f8 0f f8 	ld.w	r8,r8[4088]
8002180a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002180e:	30 ab       	mov	r11,10
80021810:	10 9c       	mov	r12,r8
80021812:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
80021816:	fe cc 01 62 	sub	r12,pc,354
8002181a:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
8002181e:	ec f8 00 00 	ld.w	r8,r6[0]
80021822:	70 08       	ld.w	r8,r8[0x0]
80021824:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021828:	5c 68       	casts.b	r8
8002182a:	5c 88       	casts.h	r8
8002182c:	5c 78       	castu.h	r8
8002182e:	10 9b       	mov	r11,r8
80021830:	30 0c       	mov	r12,0
80021832:	fe b0 ef 9f 	rcall	8001f770 <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
80021836:	ec f8 00 00 	ld.w	r8,r6[0]
8002183a:	70 0a       	ld.w	r10,r8[0x0]
8002183c:	ec f8 00 00 	ld.w	r8,r6[0]
80021840:	70 08       	ld.w	r8,r8[0x0]
80021842:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021846:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8002184a:	12 98       	mov	r8,r9
8002184c:	a1 78       	lsl	r8,0x1
8002184e:	12 08       	add	r8,r9
80021850:	a5 68       	lsl	r8,0x4
80021852:	f4 08 00 08 	add	r8,r10,r8
80021856:	f0 c9 f1 f0 	sub	r9,r8,-3600
8002185a:	30 08       	mov	r8,0
8002185c:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
8002185e:	ec f8 00 00 	ld.w	r8,r6[0]
80021862:	70 08       	ld.w	r8,r8[0x0]
80021864:	f1 39 0f f1 	ld.ub	r9,r8[4081]
80021868:	30 18       	mov	r8,1
8002186a:	f0 09 18 00 	cp.b	r9,r8
8002186e:	e0 81 01 07 	brne	80021a7c <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80021872:	fe cc 01 ba 	sub	r12,pc,442
80021876:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
8002187a:	ec f8 00 00 	ld.w	r8,r6[0]
8002187e:	70 08       	ld.w	r8,r8[0x0]
80021880:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021884:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021888:	ec f8 00 00 	ld.w	r8,r6[0]
8002188c:	70 08       	ld.w	r8,r8[0x0]
8002188e:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80021892:	5c 78       	castu.h	r8
80021894:	20 18       	sub	r8,1
80021896:	10 39       	cp.w	r9,r8
80021898:	c0 81       	brne	800218a8 <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
8002189a:	ec f8 00 00 	ld.w	r8,r6[0]
8002189e:	70 09       	ld.w	r9,r8[0x0]
800218a0:	30 08       	mov	r8,0
800218a2:	f3 68 10 1e 	st.b	r9[4126],r8
800218a6:	c0 a8       	rjmp	800218ba <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
800218a8:	ec f8 00 00 	ld.w	r8,r6[0]
800218ac:	70 08       	ld.w	r8,r8[0x0]
800218ae:	f1 39 10 1e 	ld.ub	r9,r8[4126]
800218b2:	2f f9       	sub	r9,-1
800218b4:	5c 59       	castu.b	r9
800218b6:	f1 69 10 1e 	st.b	r8[4126],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
800218ba:	ec f8 00 00 	ld.w	r8,r6[0]
800218be:	70 08       	ld.w	r8,r8[0x0]
800218c0:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800218c4:	5c 68       	casts.b	r8
800218c6:	30 ab       	mov	r11,10
800218c8:	10 9c       	mov	r12,r8
800218ca:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
800218ce:	fe cc 1b 9a 	sub	r12,pc,7066
800218d2:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
800218d6:	ec f8 00 00 	ld.w	r8,r6[0]
800218da:	70 0a       	ld.w	r10,r8[0x0]
800218dc:	ec f8 00 00 	ld.w	r8,r6[0]
800218e0:	70 08       	ld.w	r8,r8[0x0]
800218e2:	f1 38 10 1e 	ld.ub	r8,r8[4126]
800218e6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800218ea:	12 98       	mov	r8,r9
800218ec:	a1 78       	lsl	r8,0x1
800218ee:	12 08       	add	r8,r9
800218f0:	a5 68       	lsl	r8,0x4
800218f2:	f4 08 00 08 	add	r8,r10,r8
800218f6:	f0 c9 f1 f0 	sub	r9,r8,-3600
800218fa:	30 18       	mov	r8,1
800218fc:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
800218fe:	ec f8 00 00 	ld.w	r8,r6[0]
80021902:	70 0a       	ld.w	r10,r8[0x0]
80021904:	ec f8 00 00 	ld.w	r8,r6[0]
80021908:	70 0b       	ld.w	r11,r8[0x0]
8002190a:	ec f8 00 00 	ld.w	r8,r6[0]
8002190e:	70 08       	ld.w	r8,r8[0x0]
80021910:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021914:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021918:	12 98       	mov	r8,r9
8002191a:	a1 78       	lsl	r8,0x1
8002191c:	12 08       	add	r8,r9
8002191e:	a5 68       	lsl	r8,0x4
80021920:	f6 08 00 08 	add	r8,r11,r8
80021924:	f0 c8 f1 f4 	sub	r8,r8,-3596
80021928:	f4 cb f0 14 	sub	r11,r10,-4076
8002192c:	10 9a       	mov	r10,r8
8002192e:	f6 c8 00 00 	sub	r8,r11,0
80021932:	f4 c9 00 00 	sub	r9,r10,0
80021936:	72 0c       	ld.w	r12,r9[0x0]
80021938:	91 0c       	st.w	r8[0x0],r12
8002193a:	72 1c       	ld.w	r12,r9[0x4]
8002193c:	91 1c       	st.w	r8[0x4],r12
8002193e:	72 2c       	ld.w	r12,r9[0x8]
80021940:	91 2c       	st.w	r8[0x8],r12
80021942:	72 39       	ld.w	r9,r9[0xc]
80021944:	91 39       	st.w	r8[0xc],r9
80021946:	f6 c8 ff f0 	sub	r8,r11,-16
8002194a:	f4 c9 ff f0 	sub	r9,r10,-16
8002194e:	72 0c       	ld.w	r12,r9[0x0]
80021950:	91 0c       	st.w	r8[0x0],r12
80021952:	72 1c       	ld.w	r12,r9[0x4]
80021954:	91 1c       	st.w	r8[0x4],r12
80021956:	72 2c       	ld.w	r12,r9[0x8]
80021958:	91 2c       	st.w	r8[0x8],r12
8002195a:	72 39       	ld.w	r9,r9[0xc]
8002195c:	91 39       	st.w	r8[0xc],r9
8002195e:	f6 c8 ff e0 	sub	r8,r11,-32
80021962:	f4 c9 ff e0 	sub	r9,r10,-32
80021966:	72 0a       	ld.w	r10,r9[0x0]
80021968:	91 0a       	st.w	r8[0x0],r10
8002196a:	72 1a       	ld.w	r10,r9[0x4]
8002196c:	91 1a       	st.w	r8[0x4],r10
8002196e:	72 2a       	ld.w	r10,r9[0x8]
80021970:	91 2a       	st.w	r8[0x8],r10
80021972:	72 39       	ld.w	r9,r9[0xc]
80021974:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80021976:	ec f8 00 00 	ld.w	r8,r6[0]
8002197a:	70 05       	ld.w	r5,r8[0x0]
8002197c:	ec f8 00 00 	ld.w	r8,r6[0]
80021980:	70 08       	ld.w	r8,r8[0x0]
80021982:	ec f9 00 00 	ld.w	r9,r6[0]
80021986:	72 0e       	ld.w	lr,r9[0x0]
80021988:	ee cc 00 40 	sub	r12,r7,64
8002198c:	20 7d       	sub	sp,28
8002198e:	1a 99       	mov	r9,sp
80021990:	12 9a       	mov	r10,r9
80021992:	f0 cb f2 54 	sub	r11,r8,-3500
80021996:	f4 c8 00 00 	sub	r8,r10,0
8002199a:	f6 c9 00 00 	sub	r9,r11,0
8002199e:	72 03       	ld.w	r3,r9[0x0]
800219a0:	91 03       	st.w	r8[0x0],r3
800219a2:	72 13       	ld.w	r3,r9[0x4]
800219a4:	91 13       	st.w	r8[0x4],r3
800219a6:	72 23       	ld.w	r3,r9[0x8]
800219a8:	91 23       	st.w	r8[0x8],r3
800219aa:	72 39       	ld.w	r9,r9[0xc]
800219ac:	91 39       	st.w	r8[0xc],r9
800219ae:	f6 e8 00 10 	ld.d	r8,r11[16]
800219b2:	f4 e9 00 10 	st.d	r10[16],r8
800219b6:	76 68       	ld.w	r8,r11[0x18]
800219b8:	95 68       	st.w	r10[0x18],r8
800219ba:	20 cd       	sub	sp,48
800219bc:	1a 98       	mov	r8,sp
800219be:	10 9b       	mov	r11,r8
800219c0:	fc ca f0 14 	sub	r10,lr,-4076
800219c4:	f6 c8 00 00 	sub	r8,r11,0
800219c8:	f4 c9 00 00 	sub	r9,r10,0
800219cc:	72 0e       	ld.w	lr,r9[0x0]
800219ce:	91 0e       	st.w	r8[0x0],lr
800219d0:	72 1e       	ld.w	lr,r9[0x4]
800219d2:	91 1e       	st.w	r8[0x4],lr
800219d4:	72 2e       	ld.w	lr,r9[0x8]
800219d6:	91 2e       	st.w	r8[0x8],lr
800219d8:	72 39       	ld.w	r9,r9[0xc]
800219da:	91 39       	st.w	r8[0xc],r9
800219dc:	f6 c8 ff f0 	sub	r8,r11,-16
800219e0:	f4 c9 ff f0 	sub	r9,r10,-16
800219e4:	72 0e       	ld.w	lr,r9[0x0]
800219e6:	91 0e       	st.w	r8[0x0],lr
800219e8:	72 1e       	ld.w	lr,r9[0x4]
800219ea:	91 1e       	st.w	r8[0x4],lr
800219ec:	72 2e       	ld.w	lr,r9[0x8]
800219ee:	91 2e       	st.w	r8[0x8],lr
800219f0:	72 39       	ld.w	r9,r9[0xc]
800219f2:	91 39       	st.w	r8[0xc],r9
800219f4:	f6 c8 ff e0 	sub	r8,r11,-32
800219f8:	f4 c9 ff e0 	sub	r9,r10,-32
800219fc:	72 0a       	ld.w	r10,r9[0x0]
800219fe:	91 0a       	st.w	r8[0x0],r10
80021a00:	72 1a       	ld.w	r10,r9[0x4]
80021a02:	91 1a       	st.w	r8[0x4],r10
80021a04:	72 2a       	ld.w	r10,r9[0x8]
80021a06:	91 2a       	st.w	r8[0x8],r10
80021a08:	72 39       	ld.w	r9,r9[0xc]
80021a0a:	91 39       	st.w	r8[0xc],r9
80021a0c:	f0 16 01 01 	mcall	r6[1028]
80021a10:	2e dd       	sub	sp,-76
80021a12:	ea cb ef e0 	sub	r11,r5,-4128
80021a16:	ee ca 00 40 	sub	r10,r7,64
80021a1a:	f6 c8 00 00 	sub	r8,r11,0
80021a1e:	f4 c9 00 00 	sub	r9,r10,0
80021a22:	72 0c       	ld.w	r12,r9[0x0]
80021a24:	91 0c       	st.w	r8[0x0],r12
80021a26:	72 1c       	ld.w	r12,r9[0x4]
80021a28:	91 1c       	st.w	r8[0x4],r12
80021a2a:	72 2c       	ld.w	r12,r9[0x8]
80021a2c:	91 2c       	st.w	r8[0x8],r12
80021a2e:	72 39       	ld.w	r9,r9[0xc]
80021a30:	91 39       	st.w	r8[0xc],r9
80021a32:	f6 c8 ff f0 	sub	r8,r11,-16
80021a36:	f4 c9 ff f0 	sub	r9,r10,-16
80021a3a:	72 0c       	ld.w	r12,r9[0x0]
80021a3c:	91 0c       	st.w	r8[0x0],r12
80021a3e:	72 1c       	ld.w	r12,r9[0x4]
80021a40:	91 1c       	st.w	r8[0x4],r12
80021a42:	72 2c       	ld.w	r12,r9[0x8]
80021a44:	91 2c       	st.w	r8[0x8],r12
80021a46:	72 39       	ld.w	r9,r9[0xc]
80021a48:	91 39       	st.w	r8[0xc],r9
80021a4a:	f6 c8 ff e0 	sub	r8,r11,-32
80021a4e:	f4 c9 ff e0 	sub	r9,r10,-32
80021a52:	72 0a       	ld.w	r10,r9[0x0]
80021a54:	91 0a       	st.w	r8[0x0],r10
80021a56:	72 1a       	ld.w	r10,r9[0x4]
80021a58:	91 1a       	st.w	r8[0x4],r10
80021a5a:	72 2a       	ld.w	r10,r9[0x8]
80021a5c:	91 2a       	st.w	r8[0x8],r10
80021a5e:	72 39       	ld.w	r9,r9[0xc]
80021a60:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021a62:	ec f8 00 00 	ld.w	r8,r6[0]
80021a66:	70 08       	ld.w	r8,r8[0x0]
80021a68:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021a6c:	5c 68       	casts.b	r8
80021a6e:	5c 88       	casts.h	r8
80021a70:	5c 78       	castu.h	r8
80021a72:	10 9b       	mov	r11,r8
80021a74:	30 0c       	mov	r12,0
80021a76:	fe b0 ed 5d 	rcall	8001f530 <mavlink_msg_mission_current_send>
80021a7a:	c1 28       	rjmp	80021a9e <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80021a7c:	ec f8 00 00 	ld.w	r8,r6[0]
80021a80:	70 09       	ld.w	r9,r8[0x0]
80021a82:	30 08       	mov	r8,0
80021a84:	f3 68 10 b4 	st.b	r9[4276],r8
				dbg_print("Stop\n");
80021a88:	fe cc 03 ac 	sub	r12,pc,940
80021a8c:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80021a90:	f0 16 00 b4 	mcall	r6[720]
80021a94:	c0 58       	rjmp	80021a9e <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80021a96:	f0 16 00 8f 	mcall	r6[572]
		wp_hold_init();
80021a9a:	f0 16 00 b4 	mcall	r6[720]
	}
}
80021a9e:	2f 0d       	sub	sp,-64
80021aa0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021aa4:	80 02       	ld.sh	r2,r0[0x0]
80021aa6:	15 72       	ld.ub	r2,--r10
80021aa8:	43 72       	lddsp	r2,sp[0xdc]
80021aaa:	69 74       	ld.w	r4,r4[0x5c]
80021aac:	69 63       	ld.w	r3,r4[0x58]
80021aae:	61 6c       	ld.w	r12,r0[0x58]
80021ab0:	20 53       	sub	r3,5
80021ab2:	74 61       	ld.w	r1,r10[0x18]
80021ab4:	74 65       	ld.w	r5,r10[0x18]
80021ab6:	21 20       	sub	r0,18
80021ab8:	43 6c       	lddsp	r12,sp[0xd8]
80021aba:	69 6d       	ld.w	sp,r4[0x58]
80021abc:	62 69       	ld.w	r9,r1[0x18]
80021abe:	6e 67       	ld.w	r7,r7[0x18]
80021ac0:	20 74       	sub	r4,7
80021ac2:	6f 20       	ld.w	r0,r7[0x48]
80021ac4:	73 61       	ld.w	r1,r9[0x58]
80021ac6:	66 65       	ld.w	r5,r3[0x18]
80021ac8:	20 61       	sub	r1,6
80021aca:	6c 74       	ld.w	r4,r6[0x1c]
80021acc:	69 74       	ld.w	r4,r4[0x5c]
80021ace:	75 64       	ld.w	r4,r10[0x58]
80021ad0:	65 2e       	ld.w	lr,r2[0x48]
80021ad2:	0a 00       	add	r0,r5
80021ad4:	43 72       	lddsp	r2,sp[0xdc]
80021ad6:	69 74       	ld.w	r4,r4[0x5c]
80021ad8:	69 63       	ld.w	r3,r4[0x58]
80021ada:	61 6c       	ld.w	r12,r0[0x58]
80021adc:	20 53       	sub	r3,5
80021ade:	74 61       	ld.w	r1,r10[0x18]
80021ae0:	74 65       	ld.w	r5,r10[0x18]
80021ae2:	21 20       	sub	r0,18
80021ae4:	46 6c       	lddsp	r12,sp[0x198]
80021ae6:	79 69       	ld.w	r9,r12[0x58]
80021ae8:	6e 67       	ld.w	r7,r7[0x18]
80021aea:	20 74       	sub	r4,7
80021aec:	6f 20       	ld.w	r0,r7[0x48]
80021aee:	68 6f       	ld.w	pc,r4[0x18]
80021af0:	6d 65       	ld.w	r5,r6[0x58]
80021af2:	20 77       	sub	r7,7
80021af4:	61 79       	ld.w	r9,r0[0x5c]
80021af6:	70 6f       	ld.w	pc,r8[0x18]
80021af8:	69 6e       	ld.w	lr,r4[0x58]
80021afa:	74 2e       	ld.w	lr,r10[0x8]
80021afc:	0a 00       	add	r0,r5
80021afe:	00 00       	add	r0,r0
80021b00:	43 72       	lddsp	r2,sp[0xdc]
80021b02:	69 74       	ld.w	r4,r4[0x5c]
80021b04:	69 63       	ld.w	r3,r4[0x58]
80021b06:	61 6c       	ld.w	r12,r0[0x58]
80021b08:	20 53       	sub	r3,5
80021b0a:	74 61       	ld.w	r1,r10[0x18]
80021b0c:	74 65       	ld.w	r5,r10[0x18]
80021b0e:	21 20       	sub	r0,18
80021b10:	50 65       	stdsp	sp[0x18],r5
80021b12:	72 66       	ld.w	r6,r9[0x18]
80021b14:	6f 72       	ld.w	r2,r7[0x5c]
80021b16:	6d 69       	ld.w	r9,r6[0x58]
80021b18:	6e 67       	ld.w	r7,r7[0x18]
80021b1a:	20 63       	sub	r3,6
80021b1c:	72 69       	ld.w	r9,r9[0x18]
80021b1e:	74 69       	ld.w	r9,r10[0x18]
80021b20:	63 61       	ld.w	r1,r1[0x58]
80021b22:	6c 20       	ld.w	r0,r6[0x8]
80021b24:	6c 61       	ld.w	r1,r6[0x18]
80021b26:	6e 64       	ld.w	r4,r7[0x18]
80021b28:	69 6e       	ld.w	lr,r4[0x58]
80021b2a:	67 2e       	ld.w	lr,r3[0x48]
80021b2c:	0a 00       	add	r0,r5
80021b2e:	00 00       	add	r0,r0
80021b30:	43 72       	lddsp	r2,sp[0xdc]
80021b32:	69 74       	ld.w	r4,r4[0x5c]
80021b34:	69 63       	ld.w	r3,r4[0x58]
80021b36:	61 6c       	ld.w	r12,r0[0x58]
80021b38:	20 53       	sub	r3,5
80021b3a:	74 61       	ld.w	r1,r10[0x18]
80021b3c:	74 65       	ld.w	r5,r10[0x18]
80021b3e:	21 20       	sub	r0,18
80021b40:	4c 61       	lddpc	r1,80021c58 <waypoint_critical_handler+0xe8>
80021b42:	6e 64       	ld.w	r4,r7[0x18]
80021b44:	65 64       	ld.w	r4,r2[0x58]
80021b46:	2c 20       	sub	r0,-62
80021b48:	73 77       	ld.w	r7,r9[0x5c]
80021b4a:	69 74       	ld.w	r4,r4[0x5c]
80021b4c:	63 68       	ld.w	r8,r1[0x58]
80021b4e:	69 6e       	ld.w	lr,r4[0x58]
80021b50:	67 20       	ld.w	r0,r3[0x48]
80021b52:	6f 66       	ld.w	r6,r7[0x58]
80021b54:	66 20       	ld.w	r0,r3[0x8]
80021b56:	6d 6f       	ld.w	pc,r6[0x58]
80021b58:	74 6f       	ld.w	pc,r10[0x18]
80021b5a:	72 73       	ld.w	r3,r9[0x1c]
80021b5c:	2c 20       	sub	r0,-62
80021b5e:	45 6d       	lddsp	sp,sp[0x158]
80021b60:	65 72       	ld.w	r2,r2[0x5c]
80021b62:	67 65       	ld.w	r5,r3[0x58]
80021b64:	6e 63       	ld.w	r3,r7[0x18]
80021b66:	79 20       	ld.w	r0,r12[0x48]
80021b68:	6d 6f       	ld.w	pc,r6[0x58]
80021b6a:	64 65       	ld.w	r5,r2[0x18]
80021b6c:	2e 0a       	sub	r10,-32
	...

80021b70 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80021b70:	eb cd 40 e0 	pushm	r5-r7,lr
80021b74:	1a 97       	mov	r7,sp
80021b76:	20 7d       	sub	sp,28
80021b78:	fe f6 02 20 	ld.w	r6,pc[544]
80021b7c:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80021b7e:	ec f8 00 00 	ld.w	r8,r6[0]
80021b82:	70 08       	ld.w	r8,r8[0x0]
80021b84:	f1 38 10 b9 	ld.ub	r8,r8[4281]
80021b88:	ec 18 00 01 	eorl	r8,0x1
80021b8c:	5c 58       	castu.b	r8
80021b8e:	c1 10       	breq	80021bb0 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80021b90:	ec f8 00 00 	ld.w	r8,r6[0]
80021b94:	70 09       	ld.w	r9,r8[0x0]
80021b96:	30 18       	mov	r8,1
80021b98:	f3 68 10 b9 	st.b	r9[4281],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
80021b9c:	fe cc 00 f4 	sub	r12,pc,244
80021ba0:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80021ba4:	ec f8 00 00 	ld.w	r8,r6[0]
80021ba8:	70 08       	ld.w	r8,r8[0x0]
80021baa:	30 19       	mov	r9,1
80021bac:	f1 49 12 e4 	st.w	r8[4836],r9
	}
	
	if (!(centralData->critical_next_state))
80021bb0:	ec f8 00 00 	ld.w	r8,r6[0]
80021bb4:	70 08       	ld.w	r8,r8[0x0]
80021bb6:	f1 38 10 ba 	ld.ub	r8,r8[4282]
80021bba:	ec 18 00 01 	eorl	r8,0x1
80021bbe:	5c 58       	castu.b	r8
80021bc0:	e0 80 00 a7 	breq	80021d0e <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80021bc4:	ec f8 00 00 	ld.w	r8,r6[0]
80021bc8:	70 09       	ld.w	r9,r8[0x0]
80021bca:	30 18       	mov	r8,1
80021bcc:	f3 68 10 ba 	st.b	r9[4282],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021bd0:	ec f8 00 00 	ld.w	r8,r6[0]
80021bd4:	70 09       	ld.w	r9,r8[0x0]
80021bd6:	ee ca 00 10 	sub	r10,r7,16
80021bda:	20 4d       	sub	sp,16
80021bdc:	1a 98       	mov	r8,sp
80021bde:	20 08       	sub	r8,0
80021be0:	20 09       	sub	r9,0
80021be2:	72 0b       	ld.w	r11,r9[0x0]
80021be4:	91 0b       	st.w	r8[0x0],r11
80021be6:	72 1b       	ld.w	r11,r9[0x4]
80021be8:	91 1b       	st.w	r8[0x4],r11
80021bea:	72 2b       	ld.w	r11,r9[0x8]
80021bec:	91 2b       	st.w	r8[0x8],r11
80021bee:	72 39       	ld.w	r9,r9[0xc]
80021bf0:	91 39       	st.w	r8[0xc],r9
80021bf2:	14 9c       	mov	r12,r10
80021bf4:	f0 16 00 6f 	mcall	r6[444]
80021bf8:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
80021bfa:	ec f8 00 00 	ld.w	r8,r6[0]
80021bfe:	70 08       	ld.w	r8,r8[0x0]
80021c00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021c04:	f1 49 10 8c 	st.w	r8[4236],r9
		
		switch (centralData->critical_behavior)
80021c08:	ec f8 00 00 	ld.w	r8,r6[0]
80021c0c:	70 08       	ld.w	r8,r8[0x0]
80021c0e:	f0 f8 12 e4 	ld.w	r8,r8[4836]
80021c12:	58 28       	cp.w	r8,2
80021c14:	c2 10       	breq	80021c56 <waypoint_critical_handler+0xe6>
80021c16:	58 38       	cp.w	r8,3
80021c18:	c3 30       	breq	80021c7e <waypoint_critical_handler+0x10e>
80021c1a:	58 18       	cp.w	r8,1
80021c1c:	c4 31       	brne	80021ca2 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
80021c1e:	ec f8 00 00 	ld.w	r8,r6[0]
80021c22:	70 08       	ld.w	r8,r8[0x0]
80021c24:	ec f9 00 00 	ld.w	r9,r6[0]
80021c28:	72 09       	ld.w	r9,r9[0x0]
80021c2a:	f2 f9 0d 9c 	ld.w	r9,r9[3484]
80021c2e:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
80021c32:	ec f8 00 00 	ld.w	r8,r6[0]
80021c36:	70 08       	ld.w	r8,r8[0x0]
80021c38:	ec f9 00 00 	ld.w	r9,r6[0]
80021c3c:	72 09       	ld.w	r9,r9[0x0]
80021c3e:	f2 f9 0d a0 	ld.w	r9,r9[3488]
80021c42:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021c46:	ec f8 00 00 	ld.w	r8,r6[0]
80021c4a:	70 08       	ld.w	r8,r8[0x0]
80021c4c:	fc 19 c1 f0 	movh	r9,0xc1f0
80021c50:	f1 49 10 88 	st.w	r8[4232],r9
			
			break;
80021c54:	c2 78       	rjmp	80021ca2 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021c56:	ec f8 00 00 	ld.w	r8,r6[0]
80021c5a:	70 08       	ld.w	r8,r8[0x0]
80021c5c:	30 09       	mov	r9,0
80021c5e:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021c62:	ec f8 00 00 	ld.w	r8,r6[0]
80021c66:	70 08       	ld.w	r8,r8[0x0]
80021c68:	30 09       	mov	r9,0
80021c6a:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021c6e:	ec f8 00 00 	ld.w	r8,r6[0]
80021c72:	70 08       	ld.w	r8,r8[0x0]
80021c74:	fc 19 c1 f0 	movh	r9,0xc1f0
80021c78:	f1 49 10 88 	st.w	r8[4232],r9
			break;
80021c7c:	c1 38       	rjmp	80021ca2 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021c7e:	ec f8 00 00 	ld.w	r8,r6[0]
80021c82:	70 08       	ld.w	r8,r8[0x0]
80021c84:	30 09       	mov	r9,0
80021c86:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021c8a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c8e:	70 08       	ld.w	r8,r8[0x0]
80021c90:	30 09       	mov	r9,0
80021c92:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
80021c96:	ec f8 00 00 	ld.w	r8,r6[0]
80021c9a:	70 08       	ld.w	r8,r8[0x0]
80021c9c:	30 09       	mov	r9,0
80021c9e:	f1 49 10 88 	st.w	r8[4232],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021ca2:	30 08       	mov	r8,0
80021ca4:	ef 68 ff ff 	st.b	r7[-1],r8
80021ca8:	c2 18       	rjmp	80021cea <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
80021caa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021cae:	ec f9 00 00 	ld.w	r9,r6[0]
80021cb2:	72 09       	ld.w	r9,r9[0x0]
80021cb4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021cb8:	f4 ca fb e0 	sub	r10,r10,-1056
80021cbc:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021cc0:	ec f9 00 00 	ld.w	r9,r6[0]
80021cc4:	72 09       	ld.w	r9,r9[0x0]
80021cc6:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021cca:	f6 cb fc 99 	sub	r11,r11,-871
80021cce:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021cd2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021cd6:	a3 68       	lsl	r8,0x2
80021cd8:	ee 08 00 08 	add	r8,r7,r8
80021cdc:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021ce0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021ce4:	2f f8       	sub	r8,-1
80021ce6:	ef 68 ff ff 	st.b	r7[-1],r8
80021cea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021cee:	30 28       	mov	r8,2
80021cf0:	f0 09 18 00 	cp.b	r9,r8
80021cf4:	fe 98 ff db 	brls	80021caa <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021cf8:	ec f8 00 00 	ld.w	r8,r6[0]
80021cfc:	70 05       	ld.w	r5,r8[0x0]
80021cfe:	ee c8 00 1c 	sub	r8,r7,28
80021d02:	10 9c       	mov	r12,r8
80021d04:	fe b0 ee 04 	rcall	8001f90c <vector_norm_sqr>
80021d08:	18 98       	mov	r8,r12
80021d0a:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
80021d0e:	ec f8 00 00 	ld.w	r8,r6[0]
80021d12:	70 08       	ld.w	r8,r8[0x0]
80021d14:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80021d18:	30 18       	mov	r8,1
80021d1a:	fc 19 40 40 	movh	r9,0x4040
80021d1e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021d22:	e0 8c 00 03 	brvs	80021d28 <waypoint_critical_handler+0x1b8>
80021d26:	c0 25       	brlt	80021d2a <waypoint_critical_handler+0x1ba>
80021d28:	30 08       	mov	r8,0
80021d2a:	5c 58       	castu.b	r8
80021d2c:	c3 20       	breq	80021d90 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
80021d2e:	ec f8 00 00 	ld.w	r8,r6[0]
80021d32:	70 09       	ld.w	r9,r8[0x0]
80021d34:	30 08       	mov	r8,0
80021d36:	f3 68 10 ba 	st.b	r9[4282],r8
		switch (centralData->critical_behavior)
80021d3a:	ec f8 00 00 	ld.w	r8,r6[0]
80021d3e:	70 08       	ld.w	r8,r8[0x0]
80021d40:	f0 f8 12 e4 	ld.w	r8,r8[4836]
80021d44:	58 28       	cp.w	r8,2
80021d46:	c1 00       	breq	80021d66 <waypoint_critical_handler+0x1f6>
80021d48:	58 38       	cp.w	r8,3
80021d4a:	c1 90       	breq	80021d7c <waypoint_critical_handler+0x20c>
80021d4c:	58 18       	cp.w	r8,1
80021d4e:	c2 11       	brne	80021d90 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80021d50:	fe cc 02 7c 	sub	r12,pc,636
80021d54:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80021d58:	ec f8 00 00 	ld.w	r8,r6[0]
80021d5c:	70 08       	ld.w	r8,r8[0x0]
80021d5e:	30 29       	mov	r9,2
80021d60:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
80021d64:	c1 68       	rjmp	80021d90 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
80021d66:	fe cc 02 66 	sub	r12,pc,614
80021d6a:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80021d6e:	ec f8 00 00 	ld.w	r8,r6[0]
80021d72:	70 08       	ld.w	r8,r8[0x0]
80021d74:	30 39       	mov	r9,3
80021d76:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
80021d7a:	c0 b8       	rjmp	80021d90 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80021d7c:	fe cc 02 4c 	sub	r12,pc,588
80021d80:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80021d84:	ec f8 00 00 	ld.w	r8,r6[0]
80021d88:	70 09       	ld.w	r9,r8[0x0]
80021d8a:	30 18       	mov	r8,1
80021d8c:	f3 68 10 b8 	st.b	r9[4280],r8
			break;
		}
	}
80021d90:	2f 9d       	sub	sp,-28
80021d92:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80021d96:	00 00       	add	r0,r0
80021d98:	80 02       	ld.sh	r2,r0[0x0]
80021d9a:	1a 00       	add	r0,sp

80021d9c <buffer_full>:
80021d9c:	eb cd 40 80 	pushm	r7,lr
80021da0:	1a 97       	mov	r7,sp
80021da2:	20 1d       	sub	sp,4
80021da4:	ef 4c ff fc 	st.w	r7[-4],r12
80021da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021dac:	f1 38 01 00 	ld.ub	r8,r8[256]
80021db0:	2f f8       	sub	r8,-1
80021db2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80021db6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021dba:	f1 38 01 01 	ld.ub	r8,r8[257]
80021dbe:	10 39       	cp.w	r9,r8
80021dc0:	5f 08       	sreq	r8
80021dc2:	10 9c       	mov	r12,r8
80021dc4:	2f fd       	sub	sp,-4
80021dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80021dca <buffer_put_lossy>:
80021dca:	eb cd 40 c0 	pushm	r6-r7,lr
80021dce:	1a 97       	mov	r7,sp
80021dd0:	20 3d       	sub	sp,12
80021dd2:	4a 46       	lddpc	r6,80021e60 <buffer_put_lossy+0x96>
80021dd4:	1e 26       	rsub	r6,pc
80021dd6:	ef 4c ff f8 	st.w	r7[-8],r12
80021dda:	16 98       	mov	r8,r11
80021ddc:	ef 68 ff f4 	st.b	r7[-12],r8
80021de0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021de4:	f1 38 01 00 	ld.ub	r8,r8[256]
80021de8:	2f f8       	sub	r8,-1
80021dea:	ef 68 ff ff 	st.b	r7[-1],r8
80021dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021df2:	f1 38 01 01 	ld.ub	r8,r8[257]
80021df6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021dfa:	f0 09 18 00 	cp.b	r9,r8
80021dfe:	c0 b1       	brne	80021e14 <buffer_put_lossy+0x4a>
80021e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e04:	f1 38 01 01 	ld.ub	r8,r8[257]
80021e08:	2f f8       	sub	r8,-1
80021e0a:	5c 58       	castu.b	r8
80021e0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e10:	f3 68 01 01 	st.b	r9[257],r8
80021e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e18:	f1 38 01 00 	ld.ub	r8,r8[256]
80021e1c:	10 99       	mov	r9,r8
80021e1e:	ee fa ff f8 	ld.w	r10,r7[-8]
80021e22:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80021e26:	f4 09 0b 08 	st.b	r10[r9],r8
80021e2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021e32:	f3 68 01 00 	st.b	r9[256],r8
80021e36:	ee fc ff f8 	ld.w	r12,r7[-8]
80021e3a:	f0 16 00 fd 	mcall	r6[1012]
80021e3e:	18 98       	mov	r8,r12
80021e40:	5c 58       	castu.b	r8
80021e42:	c0 70       	breq	80021e50 <buffer_put_lossy+0x86>
80021e44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e48:	30 18       	mov	r8,1
80021e4a:	f3 68 01 02 	st.b	r9[258],r8
80021e4e:	c0 68       	rjmp	80021e5a <buffer_put_lossy+0x90>
80021e50:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e54:	30 08       	mov	r8,0
80021e56:	f3 68 01 02 	st.b	r9[258],r8
80021e5a:	2f dd       	sub	sp,-12
80021e5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021e60:	80 02       	ld.sh	r2,r0[0x0]
80021e62:	1c 58       	eor	r8,lr

80021e64 <buffer_put>:
80021e64:	eb cd 40 c0 	pushm	r6-r7,lr
80021e68:	1a 97       	mov	r7,sp
80021e6a:	20 3d       	sub	sp,12
80021e6c:	4a 16       	lddpc	r6,80021ef0 <buffer_put+0x8c>
80021e6e:	1e 26       	rsub	r6,pc
80021e70:	ef 4c ff f8 	st.w	r7[-8],r12
80021e74:	16 98       	mov	r8,r11
80021e76:	ef 68 ff f4 	st.b	r7[-12],r8
80021e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e7e:	f1 38 01 00 	ld.ub	r8,r8[256]
80021e82:	2f f8       	sub	r8,-1
80021e84:	ef 68 ff ff 	st.b	r7[-1],r8
80021e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e8c:	f1 38 01 01 	ld.ub	r8,r8[257]
80021e90:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021e94:	f0 09 18 00 	cp.b	r9,r8
80021e98:	c0 51       	brne	80021ea2 <buffer_put+0x3e>
80021e9a:	e0 68 00 ff 	mov	r8,255
80021e9e:	10 9c       	mov	r12,r8
80021ea0:	c2 48       	rjmp	80021ee8 <buffer_put+0x84>
80021ea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021ea6:	f1 38 01 00 	ld.ub	r8,r8[256]
80021eaa:	10 99       	mov	r9,r8
80021eac:	ee fa ff f8 	ld.w	r10,r7[-8]
80021eb0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80021eb4:	f4 09 0b 08 	st.b	r10[r9],r8
80021eb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ebc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021ec0:	f3 68 01 00 	st.b	r9[256],r8
80021ec4:	ee fc ff f8 	ld.w	r12,r7[-8]
80021ec8:	f0 16 00 fd 	mcall	r6[1012]
80021ecc:	18 98       	mov	r8,r12
80021ece:	5c 58       	castu.b	r8
80021ed0:	c0 70       	breq	80021ede <buffer_put+0x7a>
80021ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ed6:	30 18       	mov	r8,1
80021ed8:	f3 68 01 02 	st.b	r9[258],r8
80021edc:	c0 68       	rjmp	80021ee8 <buffer_put+0x84>
80021ede:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ee2:	30 08       	mov	r8,0
80021ee4:	f3 68 01 02 	st.b	r9[258],r8
80021ee8:	2f dd       	sub	sp,-12
80021eea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021eee:	00 00       	add	r0,r0
80021ef0:	80 02       	ld.sh	r2,r0[0x0]
80021ef2:	1c f2       	st.b	--lr,r2

80021ef4 <buffer_get>:
80021ef4:	eb cd 40 80 	pushm	r7,lr
80021ef8:	1a 97       	mov	r7,sp
80021efa:	20 2d       	sub	sp,8
80021efc:	ef 4c ff f8 	st.w	r7[-8],r12
80021f00:	30 08       	mov	r8,0
80021f02:	ef 68 ff ff 	st.b	r7[-1],r8
80021f06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f0a:	f1 39 01 00 	ld.ub	r9,r8[256]
80021f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f12:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f16:	f0 09 18 00 	cp.b	r9,r8
80021f1a:	c1 a0       	breq	80021f4e <buffer_get+0x5a>
80021f1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f20:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f28:	f2 08 07 08 	ld.ub	r8,r9[r8]
80021f2c:	ef 68 ff ff 	st.b	r7[-1],r8
80021f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f34:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f38:	2f f8       	sub	r8,-1
80021f3a:	5c 58       	castu.b	r8
80021f3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f40:	f3 68 01 01 	st.b	r9[257],r8
80021f44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f48:	30 08       	mov	r8,0
80021f4a:	f3 68 01 02 	st.b	r9[258],r8
80021f4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021f52:	10 9c       	mov	r12,r8
80021f54:	2f ed       	sub	sp,-8
80021f56:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f5a <buffer_empty>:
80021f5a:	eb cd 40 80 	pushm	r7,lr
80021f5e:	1a 97       	mov	r7,sp
80021f60:	20 1d       	sub	sp,4
80021f62:	ef 4c ff fc 	st.w	r7[-4],r12
80021f66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f6a:	f1 39 01 00 	ld.ub	r9,r8[256]
80021f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f72:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f76:	f0 09 18 00 	cp.b	r9,r8
80021f7a:	5f 08       	sreq	r8
80021f7c:	10 9c       	mov	r12,r8
80021f7e:	2f fd       	sub	sp,-4
80021f80:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f84 <buffer_bytes_available>:
80021f84:	eb cd 40 80 	pushm	r7,lr
80021f88:	1a 97       	mov	r7,sp
80021f8a:	20 1d       	sub	sp,4
80021f8c:	ef 4c ff fc 	st.w	r7[-4],r12
80021f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f94:	f1 38 01 00 	ld.ub	r8,r8[256]
80021f98:	f0 c9 ff 00 	sub	r9,r8,-256
80021f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021fa0:	f1 38 01 01 	ld.ub	r8,r8[257]
80021fa4:	f2 08 01 08 	sub	r8,r9,r8
80021fa8:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80021fac:	10 9c       	mov	r12,r8
80021fae:	2f fd       	sub	sp,-4
80021fb0:	e3 cd 80 80 	ldm	sp++,r7,pc

80021fb4 <buffer_init>:
80021fb4:	eb cd 40 80 	pushm	r7,lr
80021fb8:	1a 97       	mov	r7,sp
80021fba:	20 1d       	sub	sp,4
80021fbc:	ef 4c ff fc 	st.w	r7[-4],r12
80021fc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fc4:	30 08       	mov	r8,0
80021fc6:	f3 68 01 00 	st.b	r9[256],r8
80021fca:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fce:	30 08       	mov	r8,0
80021fd0:	f3 68 01 01 	st.b	r9[257],r8
80021fd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fd8:	30 08       	mov	r8,0
80021fda:	f3 68 01 02 	st.b	r9[258],r8
80021fde:	2f fd       	sub	sp,-4
80021fe0:	e3 cd 80 80 	ldm	sp++,r7,pc

80021fe4 <buffer_clear>:
80021fe4:	eb cd 40 80 	pushm	r7,lr
80021fe8:	1a 97       	mov	r7,sp
80021fea:	20 1d       	sub	sp,4
80021fec:	ef 4c ff fc 	st.w	r7[-4],r12
80021ff0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021ff4:	30 08       	mov	r8,0
80021ff6:	f3 68 01 00 	st.b	r9[256],r8
80021ffa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021ffe:	30 08       	mov	r8,0
80022000:	f3 68 01 01 	st.b	r9[257],r8
80022004:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022008:	30 08       	mov	r8,0
8002200a:	f3 68 01 02 	st.b	r9[258],r8
8002200e:	2f fd       	sub	sp,-4
80022010:	e3 cd 80 80 	ldm	sp++,r7,pc

80022014 <make_buffered_stream>:
80022014:	eb cd 40 c0 	pushm	r6-r7,lr
80022018:	1a 97       	mov	r7,sp
8002201a:	20 2d       	sub	sp,8
8002201c:	49 16       	lddpc	r6,80022060 <make_buffered_stream+0x4c>
8002201e:	1e 26       	rsub	r6,pc
80022020:	ef 4c ff fc 	st.w	r7[-4],r12
80022024:	ef 4b ff f8 	st.w	r7[-8],r11
80022028:	ec f9 01 14 	ld.w	r9,r6[276]
8002202c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022030:	91 09       	st.w	r8[0x0],r9
80022032:	ec f9 01 54 	ld.w	r9,r6[340]
80022036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002203a:	91 19       	st.w	r8[0x4],r9
8002203c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022040:	30 09       	mov	r9,0
80022042:	91 29       	st.w	r8[0x8],r9
80022044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022048:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002204c:	91 59       	st.w	r8[0x14],r9
8002204e:	ec f9 00 b8 	ld.w	r9,r6[184]
80022052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022056:	91 49       	st.w	r8[0x10],r9
80022058:	2f ed       	sub	sp,-8
8002205a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002205e:	00 00       	add	r0,r0
80022060:	80 02       	ld.sh	r2,r0[0x0]
80022062:	1e a2       	st.w	pc++,r2

80022064 <make_buffered_stream_lossy>:
80022064:	eb cd 40 c0 	pushm	r6-r7,lr
80022068:	1a 97       	mov	r7,sp
8002206a:	20 2d       	sub	sp,8
8002206c:	49 16       	lddpc	r6,800220b0 <make_buffered_stream_lossy+0x4c>
8002206e:	1e 26       	rsub	r6,pc
80022070:	ef 4c ff fc 	st.w	r7[-4],r12
80022074:	ef 4b ff f8 	st.w	r7[-8],r11
80022078:	ec f9 01 14 	ld.w	r9,r6[276]
8002207c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022080:	91 09       	st.w	r8[0x0],r9
80022082:	ec f9 05 14 	ld.w	r9,r6[1300]
80022086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002208a:	91 19       	st.w	r8[0x4],r9
8002208c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022090:	30 09       	mov	r9,0
80022092:	91 29       	st.w	r8[0x8],r9
80022094:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002209c:	91 59       	st.w	r8[0x14],r9
8002209e:	ec f9 00 b8 	ld.w	r9,r6[184]
800220a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800220a6:	91 49       	st.w	r8[0x10],r9
800220a8:	2f ed       	sub	sp,-8
800220aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800220ae:	00 00       	add	r0,r0
800220b0:	80 02       	ld.sh	r2,r0[0x0]
800220b2:	1e f2       	st.b	--pc,r2

800220b4 <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800220b4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800220b8:	1a 97       	mov	r7,sp
800220ba:	20 8d       	sub	sp,32
800220bc:	4d 96       	lddpc	r6,80022220 <local_to_global_position+0x16c>
800220be:	1e 26       	rsub	r6,pc
800220c0:	ee c5 ff e0 	sub	r5,r7,-32
800220c4:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800220c8:	ea e2 00 18 	ld.d	r2,r5[24]
800220cc:	6a 08       	ld.w	r8,r5[0x0]
800220ce:	10 9c       	mov	r12,r8
800220d0:	f0 16 00 02 	mcall	r6[8]
800220d4:	fc 18 40 00 	movh	r8,0x4000
800220d8:	e0 69 54 a6 	mov	r9,21670
800220dc:	ea 19 41 58 	orh	r9,0x4158
800220e0:	f0 16 00 0c 	mcall	r6[48]
800220e4:	14 98       	mov	r8,r10
800220e6:	16 99       	mov	r9,r11
800220e8:	10 9a       	mov	r10,r8
800220ea:	12 9b       	mov	r11,r9
800220ec:	30 08       	mov	r8,0
800220ee:	e0 69 80 00 	mov	r9,32768
800220f2:	ea 19 40 66 	orh	r9,0x4066
800220f6:	f0 16 00 03 	mcall	r6[12]
800220fa:	14 98       	mov	r8,r10
800220fc:	16 99       	mov	r9,r11
800220fe:	10 9a       	mov	r10,r8
80022100:	12 9b       	mov	r11,r9
80022102:	e0 68 2d 18 	mov	r8,11544
80022106:	ea 18 54 44 	orh	r8,0x5444
8002210a:	e0 69 21 fb 	mov	r9,8699
8002210e:	ea 19 40 09 	orh	r9,0x4009
80022112:	f0 16 00 0c 	mcall	r6[48]
80022116:	14 98       	mov	r8,r10
80022118:	16 99       	mov	r9,r11
8002211a:	04 9a       	mov	r10,r2
8002211c:	06 9b       	mov	r11,r3
8002211e:	f0 16 00 05 	mcall	r6[20]
80022122:	14 98       	mov	r8,r10
80022124:	16 99       	mov	r9,r11
80022126:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
8002212a:	ea e2 00 10 	ld.d	r2,r5[16]
8002212e:	6a 18       	ld.w	r8,r5[0x4]
80022130:	10 9c       	mov	r12,r8
80022132:	f0 16 00 02 	mcall	r6[8]
80022136:	14 90       	mov	r0,r10
80022138:	16 91       	mov	r1,r11
8002213a:	ee ea ff ec 	ld.d	r10,r7[-20]
8002213e:	e0 68 2d 18 	mov	r8,11544
80022142:	ea 18 54 44 	orh	r8,0x5444
80022146:	e0 69 21 fb 	mov	r9,8699
8002214a:	ea 19 40 09 	orh	r9,0x4009
8002214e:	f0 16 00 03 	mcall	r6[12]
80022152:	14 98       	mov	r8,r10
80022154:	16 99       	mov	r9,r11
80022156:	10 9a       	mov	r10,r8
80022158:	12 9b       	mov	r11,r9
8002215a:	30 08       	mov	r8,0
8002215c:	e0 69 80 00 	mov	r9,32768
80022160:	ea 19 40 66 	orh	r9,0x4066
80022164:	f0 16 00 0c 	mcall	r6[48]
80022168:	14 98       	mov	r8,r10
8002216a:	16 99       	mov	r9,r11
8002216c:	10 9a       	mov	r10,r8
8002216e:	12 9b       	mov	r11,r9
80022170:	f0 16 00 bc 	mcall	r6[752]
80022174:	fc 18 40 00 	movh	r8,0x4000
80022178:	e0 69 54 a6 	mov	r9,21670
8002217c:	ea 19 41 58 	orh	r9,0x4158
80022180:	f0 16 00 03 	mcall	r6[12]
80022184:	14 98       	mov	r8,r10
80022186:	16 99       	mov	r9,r11
80022188:	00 9a       	mov	r10,r0
8002218a:	02 9b       	mov	r11,r1
8002218c:	f0 16 00 0c 	mcall	r6[48]
80022190:	14 98       	mov	r8,r10
80022192:	16 99       	mov	r9,r11
80022194:	10 9a       	mov	r10,r8
80022196:	12 9b       	mov	r11,r9
80022198:	30 08       	mov	r8,0
8002219a:	e0 69 80 00 	mov	r9,32768
8002219e:	ea 19 40 66 	orh	r9,0x4066
800221a2:	f0 16 00 03 	mcall	r6[12]
800221a6:	14 98       	mov	r8,r10
800221a8:	16 99       	mov	r9,r11
800221aa:	10 9a       	mov	r10,r8
800221ac:	12 9b       	mov	r11,r9
800221ae:	e0 68 2d 18 	mov	r8,11544
800221b2:	ea 18 54 44 	orh	r8,0x5444
800221b6:	e0 69 21 fb 	mov	r9,8699
800221ba:	ea 19 40 09 	orh	r9,0x4009
800221be:	f0 16 00 0c 	mcall	r6[48]
800221c2:	14 98       	mov	r8,r10
800221c4:	16 99       	mov	r9,r11
800221c6:	04 9a       	mov	r10,r2
800221c8:	06 9b       	mov	r11,r3
800221ca:	f0 16 00 05 	mcall	r6[20]
800221ce:	14 98       	mov	r8,r10
800221d0:	16 99       	mov	r9,r11
800221d2:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
800221d6:	6a 89       	ld.w	r9,r5[0x20]
800221d8:	6a 28       	ld.w	r8,r5[0x8]
800221da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800221de:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
800221e2:	6a 38       	ld.w	r8,r5[0xc]
800221e4:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
800221e8:	ee fa ff e0 	ld.w	r10,r7[-32]
800221ec:	ee cb 00 1c 	sub	r11,r7,28
800221f0:	f4 c8 00 00 	sub	r8,r10,0
800221f4:	f6 c9 00 00 	sub	r9,r11,0
800221f8:	72 0c       	ld.w	r12,r9[0x0]
800221fa:	91 0c       	st.w	r8[0x0],r12
800221fc:	72 1c       	ld.w	r12,r9[0x4]
800221fe:	91 1c       	st.w	r8[0x4],r12
80022200:	72 2c       	ld.w	r12,r9[0x8]
80022202:	91 2c       	st.w	r8[0x8],r12
80022204:	72 39       	ld.w	r9,r9[0xc]
80022206:	91 39       	st.w	r8[0xc],r9
80022208:	f6 e8 00 10 	ld.d	r8,r11[16]
8002220c:	f4 e9 00 10 	st.d	r10[16],r8
80022210:	76 68       	ld.w	r8,r11[0x18]
80022212:	95 68       	st.w	r10[0x18],r8
}
80022214:	ee fc ff e0 	ld.w	r12,r7[-32]
80022218:	2f 8d       	sub	sp,-32
8002221a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8002221e:	00 00       	add	r0,r0
80022220:	80 02       	ld.sh	r2,r0[0x0]
80022222:	1f 42       	ld.w	r2,--pc

80022224 <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
80022224:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022228:	1a 97       	mov	r7,sp
8002222a:	20 ed       	sub	sp,56
8002222c:	4f 16       	lddpc	r6,800223f0 <global_to_local_position+0x1cc>
8002222e:	1e 26       	rsub	r6,pc
80022230:	ee c5 ff ec 	sub	r5,r7,-20
80022234:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
80022236:	ee ca 00 28 	sub	r10,r7,40
8002223a:	ea cb ff e4 	sub	r11,r5,-28
8002223e:	f4 c8 00 00 	sub	r8,r10,0
80022242:	f6 c9 00 00 	sub	r9,r11,0
80022246:	72 0c       	ld.w	r12,r9[0x0]
80022248:	91 0c       	st.w	r8[0x0],r12
8002224a:	72 1c       	ld.w	r12,r9[0x4]
8002224c:	91 1c       	st.w	r8[0x4],r12
8002224e:	72 2c       	ld.w	r12,r9[0x8]
80022250:	91 2c       	st.w	r8[0x8],r12
80022252:	72 39       	ld.w	r9,r9[0xc]
80022254:	91 39       	st.w	r8[0xc],r9
80022256:	f6 e8 00 10 	ld.d	r8,r11[16]
8002225a:	f4 e9 00 10 	st.d	r10[16],r8
8002225e:	76 68       	ld.w	r8,r11[0x18]
80022260:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
80022262:	ea ea 00 08 	ld.d	r10,r5[8]
80022266:	e0 68 2d 18 	mov	r8,11544
8002226a:	ea 18 54 44 	orh	r8,0x5444
8002226e:	e0 69 21 fb 	mov	r9,8699
80022272:	ea 19 40 09 	orh	r9,0x4009
80022276:	f0 16 00 03 	mcall	r6[12]
8002227a:	14 98       	mov	r8,r10
8002227c:	16 99       	mov	r9,r11
8002227e:	10 9a       	mov	r10,r8
80022280:	12 9b       	mov	r11,r9
80022282:	30 08       	mov	r8,0
80022284:	e0 69 80 00 	mov	r9,32768
80022288:	ea 19 40 66 	orh	r9,0x4066
8002228c:	f0 16 00 0c 	mcall	r6[48]
80022290:	14 98       	mov	r8,r10
80022292:	16 99       	mov	r9,r11
80022294:	10 9a       	mov	r10,r8
80022296:	12 9b       	mov	r11,r9
80022298:	f0 16 00 bc 	mcall	r6[752]
8002229c:	fc 18 40 00 	movh	r8,0x4000
800222a0:	e0 69 54 a6 	mov	r9,21670
800222a4:	ea 19 41 58 	orh	r9,0x4158
800222a8:	f0 16 00 03 	mcall	r6[12]
800222ac:	14 98       	mov	r8,r10
800222ae:	16 99       	mov	r9,r11
800222b0:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
800222b4:	ea ea 00 08 	ld.d	r10,r5[8]
800222b8:	ea e8 00 24 	ld.d	r8,r5[36]
800222bc:	f0 16 00 11 	mcall	r6[68]
800222c0:	14 98       	mov	r8,r10
800222c2:	16 99       	mov	r9,r11
800222c4:	10 9a       	mov	r10,r8
800222c6:	12 9b       	mov	r11,r9
800222c8:	e0 68 2d 18 	mov	r8,11544
800222cc:	ea 18 54 44 	orh	r8,0x5444
800222d0:	e0 69 21 fb 	mov	r9,8699
800222d4:	ea 19 40 09 	orh	r9,0x4009
800222d8:	f0 16 00 03 	mcall	r6[12]
800222dc:	14 98       	mov	r8,r10
800222de:	16 99       	mov	r9,r11
800222e0:	10 9a       	mov	r10,r8
800222e2:	12 9b       	mov	r11,r9
800222e4:	30 08       	mov	r8,0
800222e6:	e0 69 80 00 	mov	r9,32768
800222ea:	ea 19 40 66 	orh	r9,0x4066
800222ee:	f0 16 00 0c 	mcall	r6[48]
800222f2:	14 98       	mov	r8,r10
800222f4:	16 99       	mov	r9,r11
800222f6:	10 9a       	mov	r10,r8
800222f8:	12 9b       	mov	r11,r9
800222fa:	f0 16 00 ba 	mcall	r6[744]
800222fe:	fc 18 40 00 	movh	r8,0x4000
80022302:	e0 69 54 a6 	mov	r9,21670
80022306:	ea 19 41 58 	orh	r9,0x4158
8002230a:	f0 16 00 03 	mcall	r6[12]
8002230e:	14 98       	mov	r8,r10
80022310:	16 99       	mov	r9,r11
80022312:	10 9a       	mov	r10,r8
80022314:	12 9b       	mov	r11,r9
80022316:	f0 16 00 08 	mcall	r6[32]
8002231a:	18 98       	mov	r8,r12
8002231c:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022320:	ea ea 00 00 	ld.d	r10,r5[0]
80022324:	ea e8 00 1c 	ld.d	r8,r5[28]
80022328:	f0 16 00 11 	mcall	r6[68]
8002232c:	14 98       	mov	r8,r10
8002232e:	16 99       	mov	r9,r11
80022330:	10 9a       	mov	r10,r8
80022332:	12 9b       	mov	r11,r9
80022334:	e0 68 2d 18 	mov	r8,11544
80022338:	ea 18 54 44 	orh	r8,0x5444
8002233c:	e0 69 21 fb 	mov	r9,8699
80022340:	ea 19 40 09 	orh	r9,0x4009
80022344:	f0 16 00 03 	mcall	r6[12]
80022348:	14 98       	mov	r8,r10
8002234a:	16 99       	mov	r9,r11
8002234c:	10 9a       	mov	r10,r8
8002234e:	12 9b       	mov	r11,r9
80022350:	30 08       	mov	r8,0
80022352:	e0 69 80 00 	mov	r9,32768
80022356:	ea 19 40 66 	orh	r9,0x4066
8002235a:	f0 16 00 0c 	mcall	r6[48]
8002235e:	14 98       	mov	r8,r10
80022360:	16 99       	mov	r9,r11
80022362:	10 9a       	mov	r10,r8
80022364:	12 9b       	mov	r11,r9
80022366:	f0 16 00 ba 	mcall	r6[744]
8002236a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8002236e:	f0 16 00 03 	mcall	r6[12]
80022372:	14 98       	mov	r8,r10
80022374:	16 99       	mov	r9,r11
80022376:	10 9a       	mov	r10,r8
80022378:	12 9b       	mov	r11,r9
8002237a:	f0 16 00 08 	mcall	r6[32]
8002237e:	18 98       	mov	r8,r12
80022380:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
80022384:	6a 49       	ld.w	r9,r5[0x10]
80022386:	6a b8       	ld.w	r8,r5[0x2c]
80022388:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8002238c:	ee 18 80 00 	eorh	r8,0x8000
80022390:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
80022394:	6a 58       	ld.w	r8,r5[0x14]
80022396:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
8002239a:	06 9b       	mov	r11,r3
8002239c:	ee ca 00 38 	sub	r10,r7,56
800223a0:	f6 c8 00 00 	sub	r8,r11,0
800223a4:	f4 c9 00 00 	sub	r9,r10,0
800223a8:	72 0c       	ld.w	r12,r9[0x0]
800223aa:	91 0c       	st.w	r8[0x0],r12
800223ac:	72 1c       	ld.w	r12,r9[0x4]
800223ae:	91 1c       	st.w	r8[0x4],r12
800223b0:	72 2c       	ld.w	r12,r9[0x8]
800223b2:	91 2c       	st.w	r8[0x8],r12
800223b4:	72 39       	ld.w	r9,r9[0xc]
800223b6:	91 39       	st.w	r8[0xc],r9
800223b8:	f6 c8 ff f0 	sub	r8,r11,-16
800223bc:	f4 c9 ff f0 	sub	r9,r10,-16
800223c0:	72 0c       	ld.w	r12,r9[0x0]
800223c2:	91 0c       	st.w	r8[0x0],r12
800223c4:	72 1c       	ld.w	r12,r9[0x4]
800223c6:	91 1c       	st.w	r8[0x4],r12
800223c8:	72 2c       	ld.w	r12,r9[0x8]
800223ca:	91 2c       	st.w	r8[0x8],r12
800223cc:	72 39       	ld.w	r9,r9[0xc]
800223ce:	91 39       	st.w	r8[0xc],r9
800223d0:	f6 c8 ff e0 	sub	r8,r11,-32
800223d4:	f4 c9 ff e0 	sub	r9,r10,-32
800223d8:	72 0a       	ld.w	r10,r9[0x0]
800223da:	91 0a       	st.w	r8[0x0],r10
800223dc:	72 1a       	ld.w	r10,r9[0x4]
800223de:	91 1a       	st.w	r8[0x4],r10
800223e0:	72 2a       	ld.w	r10,r9[0x8]
800223e2:	91 2a       	st.w	r8[0x8],r10
800223e4:	72 39       	ld.w	r9,r9[0xc]
800223e6:	91 39       	st.w	r8[0xc],r9
}
800223e8:	06 9c       	mov	r12,r3
800223ea:	2f 2d       	sub	sp,-56
800223ec:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800223f0:	80 02       	ld.sh	r2,r0[0x0]
800223f2:	20 b2       	sub	r2,11

800223f4 <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
800223f4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
800223f8:	1a 97       	mov	r7,sp
800223fa:	20 3d       	sub	sp,12
800223fc:	4d 06       	lddpc	r6,8002253c <Quat_to_Aero+0x148>
800223fe:	1e 26       	rsub	r6,pc
80022400:	ee c5 ff e4 	sub	r5,r7,-28
80022404:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
80022406:	6a 09       	ld.w	r9,r5[0x0]
80022408:	6a 08       	ld.w	r8,r5[0x0]
8002240a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002240e:	6a 1a       	ld.w	r10,r5[0x4]
80022410:	6a 18       	ld.w	r8,r5[0x4]
80022412:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022416:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002241a:	6a 2a       	ld.w	r10,r5[0x8]
8002241c:	6a 28       	ld.w	r8,r5[0x8]
8002241e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022422:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022426:	6a 3a       	ld.w	r10,r5[0xc]
80022428:	6a 38       	ld.w	r8,r5[0xc]
8002242a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002242e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022432:	10 9c       	mov	r12,r8
80022434:	f0 16 00 02 	mcall	r6[8]
80022438:	14 92       	mov	r2,r10
8002243a:	16 93       	mov	r3,r11
8002243c:	6a 09       	ld.w	r9,r5[0x0]
8002243e:	6a 18       	ld.w	r8,r5[0x4]
80022440:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022444:	6a 2a       	ld.w	r10,r5[0x8]
80022446:	6a 38       	ld.w	r8,r5[0xc]
80022448:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002244c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022450:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022454:	10 9c       	mov	r12,r8
80022456:	f0 16 00 02 	mcall	r6[8]
8002245a:	04 98       	mov	r8,r2
8002245c:	06 99       	mov	r9,r3
8002245e:	f0 16 00 54 	mcall	r6[336]
80022462:	14 98       	mov	r8,r10
80022464:	16 99       	mov	r9,r11
80022466:	10 9a       	mov	r10,r8
80022468:	12 9b       	mov	r11,r9
8002246a:	f0 16 00 08 	mcall	r6[32]
8002246e:	18 98       	mov	r8,r12
80022470:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
80022474:	6a 19       	ld.w	r9,r5[0x4]
80022476:	6a 38       	ld.w	r8,r5[0xc]
80022478:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002247c:	6a 0a       	ld.w	r10,r5[0x0]
8002247e:	6a 28       	ld.w	r8,r5[0x8]
80022480:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022484:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022488:	fc 18 c0 00 	movh	r8,0xc000
8002248c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022490:	10 9c       	mov	r12,r8
80022492:	f0 16 00 02 	mcall	r6[8]
80022496:	14 98       	mov	r8,r10
80022498:	16 99       	mov	r9,r11
8002249a:	10 9a       	mov	r10,r8
8002249c:	12 9b       	mov	r11,r9
8002249e:	f0 16 01 80 	mcall	r6[1536]
800224a2:	14 98       	mov	r8,r10
800224a4:	16 99       	mov	r9,r11
800224a6:	10 9a       	mov	r10,r8
800224a8:	12 9b       	mov	r11,r9
800224aa:	f0 16 00 08 	mcall	r6[32]
800224ae:	18 98       	mov	r8,r12
800224b0:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
800224b4:	6a 09       	ld.w	r9,r5[0x0]
800224b6:	6a 08       	ld.w	r8,r5[0x0]
800224b8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800224bc:	6a 1a       	ld.w	r10,r5[0x4]
800224be:	6a 18       	ld.w	r8,r5[0x4]
800224c0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224c4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800224c8:	6a 2a       	ld.w	r10,r5[0x8]
800224ca:	6a 28       	ld.w	r8,r5[0x8]
800224cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224d0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800224d4:	6a 3a       	ld.w	r10,r5[0xc]
800224d6:	6a 38       	ld.w	r8,r5[0xc]
800224d8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224dc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800224e0:	10 9c       	mov	r12,r8
800224e2:	f0 16 00 02 	mcall	r6[8]
800224e6:	14 92       	mov	r2,r10
800224e8:	16 93       	mov	r3,r11
800224ea:	6a 09       	ld.w	r9,r5[0x0]
800224ec:	6a 38       	ld.w	r8,r5[0xc]
800224ee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800224f2:	6a 1a       	ld.w	r10,r5[0x4]
800224f4:	6a 28       	ld.w	r8,r5[0x8]
800224f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224fa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800224fe:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022502:	10 9c       	mov	r12,r8
80022504:	f0 16 00 02 	mcall	r6[8]
80022508:	04 98       	mov	r8,r2
8002250a:	06 99       	mov	r9,r3
8002250c:	f0 16 00 54 	mcall	r6[336]
80022510:	14 98       	mov	r8,r10
80022512:	16 99       	mov	r9,r11
80022514:	10 9a       	mov	r10,r8
80022516:	12 9b       	mov	r11,r9
80022518:	f0 16 00 08 	mcall	r6[32]
8002251c:	18 98       	mov	r8,r12
8002251e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
80022522:	02 9a       	mov	r10,r1
80022524:	ee cb 00 0c 	sub	r11,r7,12
80022528:	f6 e8 00 00 	ld.d	r8,r11[0]
8002252c:	f4 e9 00 00 	st.d	r10[0],r8
80022530:	76 28       	ld.w	r8,r11[0x8]
80022532:	95 28       	st.w	r10[0x8],r8
}
80022534:	02 9c       	mov	r12,r1
80022536:	2f dd       	sub	sp,-12
80022538:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8002253c:	80 02       	ld.sh	r2,r0[0x0]
8002253e:	22 82       	sub	r2,40

80022540 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022540:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80022544:	1a 97       	mov	r7,sp
80022546:	49 f6       	lddpc	r6,800225c0 <get_yaw+0x80>
80022548:	1e 26       	rsub	r6,pc
8002254a:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
8002254e:	6a 09       	ld.w	r9,r5[0x0]
80022550:	6a 08       	ld.w	r8,r5[0x0]
80022552:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022556:	6a 1a       	ld.w	r10,r5[0x4]
80022558:	6a 18       	ld.w	r8,r5[0x4]
8002255a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002255e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80022562:	6a 2a       	ld.w	r10,r5[0x8]
80022564:	6a 28       	ld.w	r8,r5[0x8]
80022566:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002256a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002256e:	6a 3a       	ld.w	r10,r5[0xc]
80022570:	6a 38       	ld.w	r8,r5[0xc]
80022572:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022576:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8002257a:	10 9c       	mov	r12,r8
8002257c:	f0 16 00 02 	mcall	r6[8]
80022580:	14 92       	mov	r2,r10
80022582:	16 93       	mov	r3,r11
80022584:	6a 09       	ld.w	r9,r5[0x0]
80022586:	6a 38       	ld.w	r8,r5[0xc]
80022588:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002258c:	6a 1a       	ld.w	r10,r5[0x4]
8002258e:	6a 28       	ld.w	r8,r5[0x8]
80022590:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022594:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022598:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
8002259c:	10 9c       	mov	r12,r8
8002259e:	f0 16 00 02 	mcall	r6[8]
800225a2:	04 98       	mov	r8,r2
800225a4:	06 99       	mov	r9,r3
800225a6:	f0 16 00 54 	mcall	r6[336]
800225aa:	14 98       	mov	r8,r10
800225ac:	16 99       	mov	r9,r11
800225ae:	10 9a       	mov	r10,r8
800225b0:	12 9b       	mov	r11,r9
800225b2:	f0 16 00 08 	mcall	r6[32]
800225b6:	18 98       	mov	r8,r12
}
800225b8:	10 9c       	mov	r12,r8
800225ba:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800225be:	00 00       	add	r0,r0
800225c0:	80 02       	ld.sh	r2,r0[0x0]
800225c2:	23 cc       	sub	r12,60

800225c4 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
800225c4:	eb cd 40 c0 	pushm	r6-r7,lr
800225c8:	1a 97       	mov	r7,sp
800225ca:	20 1d       	sub	sp,4
800225cc:	48 66       	lddpc	r6,800225e4 <dbg_print_init+0x20>
800225ce:	1e 26       	rsub	r6,pc
800225d0:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
800225d4:	ec f8 01 b0 	ld.w	r8,r6[432]
800225d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800225dc:	91 09       	st.w	r8[0x0],r9
}
800225de:	2f fd       	sub	sp,-4
800225e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800225e4:	80 02       	ld.sh	r2,r0[0x0]
800225e6:	24 52       	sub	r2,69

800225e8 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
800225e8:	eb cd 40 80 	pushm	r7,lr
800225ec:	1a 97       	mov	r7,sp
800225ee:	20 2d       	sub	sp,8
800225f0:	ef 4c ff fc 	st.w	r7[-4],r12
800225f4:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800225f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800225fc:	58 08       	cp.w	r8,0
800225fe:	c2 10       	breq	80022640 <putstring+0x58>
80022600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022604:	70 18       	ld.w	r8,r8[0x4]
80022606:	58 08       	cp.w	r8,0
80022608:	c1 51       	brne	80022632 <putstring+0x4a>
8002260a:	c1 c8       	rjmp	80022642 <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
8002260c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022610:	70 18       	ld.w	r8,r8[0x4]
80022612:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022616:	13 89       	ld.ub	r9,r9[0x0]
80022618:	12 9a       	mov	r10,r9
8002261a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002261e:	72 59       	ld.w	r9,r9[0x14]
80022620:	14 9b       	mov	r11,r10
80022622:	12 9c       	mov	r12,r9
80022624:	5d 18       	icall	r8
		s++;
80022626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002262a:	2f f8       	sub	r8,-1
8002262c:	ef 48 ff f8 	st.w	r7[-8],r8
80022630:	c0 28       	rjmp	80022634 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80022632:	d7 03       	nop
80022634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022638:	11 88       	ld.ub	r8,r8[0x0]
8002263a:	58 08       	cp.w	r8,0
8002263c:	ce 81       	brne	8002260c <putstring+0x24>
8002263e:	c0 28       	rjmp	80022642 <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022640:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80022642:	2f ed       	sub	sp,-8
80022644:	e3 cd 80 80 	ldm	sp++,r7,pc

80022648 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
80022648:	eb cd 40 c0 	pushm	r6-r7,lr
8002264c:	1a 97       	mov	r7,sp
8002264e:	20 2d       	sub	sp,8
80022650:	49 76       	lddpc	r6,800226ac <putdigit+0x64>
80022652:	1e 26       	rsub	r6,pc
80022654:	ef 4c ff fc 	st.w	r7[-4],r12
80022658:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
8002265c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022660:	58 08       	cp.w	r8,0
80022662:	c1 d0       	breq	8002269c <putdigit+0x54>
80022664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022668:	70 18       	ld.w	r8,r8[0x4]
8002266a:	58 08       	cp.w	r8,0
8002266c:	c1 a0       	breq	800226a0 <putdigit+0x58>
	
if (c > 35)
8002266e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022672:	e0 48 00 23 	cp.w	r8,35
80022676:	e0 8b 00 17 	brhi	800226a4 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
8002267a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002267e:	70 18       	ld.w	r8,r8[0x4]
80022680:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022684:	ec fa 08 a8 	ld.w	r10,r6[2216]
80022688:	f4 09 07 09 	ld.ub	r9,r10[r9]
8002268c:	12 9a       	mov	r10,r9
8002268e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022692:	72 59       	ld.w	r9,r9[0x14]
80022694:	14 9b       	mov	r11,r10
80022696:	12 9c       	mov	r12,r9
80022698:	5d 18       	icall	r8
8002269a:	c0 68       	rjmp	800226a6 <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
8002269c:	d7 03       	nop
8002269e:	c0 48       	rjmp	800226a6 <putdigit+0x5e>
800226a0:	d7 03       	nop
800226a2:	c0 28       	rjmp	800226a6 <putdigit+0x5e>
	
if (c > 35)
    return;
800226a4:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
800226a6:	2f ed       	sub	sp,-8
800226a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800226ac:	80 02       	ld.sh	r2,r0[0x0]
800226ae:	24 d6       	sub	r6,77

800226b0 <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
800226b0:	eb cd 40 c0 	pushm	r6-r7,lr
800226b4:	1a 97       	mov	r7,sp
800226b6:	20 7d       	sub	sp,28
800226b8:	4b 96       	lddpc	r6,8002279c <putnum+0xec>
800226ba:	1e 26       	rsub	r6,pc
800226bc:	ef 4c ff ec 	st.w	r7[-20],r12
800226c0:	ef 4b ff e8 	st.w	r7[-24],r11
800226c4:	14 98       	mov	r8,r10
800226c6:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
800226ca:	30 a8       	mov	r8,10
800226cc:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800226d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226d4:	58 08       	cp.w	r8,0
800226d6:	c5 d0       	breq	80022790 <putnum+0xe0>
800226d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226dc:	70 18       	ld.w	r8,r8[0x4]
800226de:	58 08       	cp.w	r8,0
800226e0:	c5 a0       	breq	80022794 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
800226e2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800226e6:	58 08       	cp.w	r8,0
800226e8:	c1 04       	brge	80022708 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
800226ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226ee:	70 18       	ld.w	r8,r8[0x4]
800226f0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800226f4:	72 59       	ld.w	r9,r9[0x14]
800226f6:	32 db       	mov	r11,45
800226f8:	12 9c       	mov	r12,r9
800226fa:	5d 18       	icall	r8
    c = c*-1;
800226fc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022700:	5c 38       	neg	r8
80022702:	ef 48 ff e8 	st.w	r7[-24],r8
80022706:	c0 a8       	rjmp	8002271a <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80022708:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002270c:	70 18       	ld.w	r8,r8[0x4]
8002270e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022712:	72 59       	ld.w	r9,r9[0x14]
80022714:	32 0b       	mov	r11,32
80022716:	12 9c       	mov	r12,r9
80022718:	5d 18       	icall	r8
    
  }

  do{
    i--;
8002271a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002271e:	20 18       	sub	r8,1
80022720:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022724:	ee fa ff fc 	ld.w	r10,r7[-4]
80022728:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002272c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022730:	f0 09 0c 08 	divs	r8,r8,r9
80022734:	12 98       	mov	r8,r9
80022736:	5c 58       	castu.b	r8
80022738:	ee 0a 00 09 	add	r9,r7,r10
8002273c:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022740:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022744:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022748:	f0 09 0c 08 	divs	r8,r8,r9
8002274c:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022754:	58 08       	cp.w	r8,0
80022756:	c1 75       	brlt	80022784 <putnum+0xd4>
80022758:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002275c:	58 08       	cp.w	r8,0
8002275e:	fe 99 ff de 	brgt	8002271a <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022762:	c1 18       	rjmp	80022784 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022768:	ee 08 00 08 	add	r8,r7,r8
8002276c:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022770:	10 9b       	mov	r11,r8
80022772:	ee fc ff ec 	ld.w	r12,r7[-20]
80022776:	f0 16 00 b2 	mcall	r6[712]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002277a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002277e:	2f f8       	sub	r8,-1
80022780:	ef 48 ff fc 	st.w	r7[-4],r8
80022784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022788:	58 98       	cp.w	r8,9
8002278a:	fe 9a ff ed 	brle	80022764 <putnum+0xb4>
8002278e:	c0 48       	rjmp	80022796 <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022790:	d7 03       	nop
80022792:	c0 28       	rjmp	80022796 <putnum+0xe6>
80022794:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022796:	2f 9d       	sub	sp,-28
80022798:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002279c:	80 02       	ld.sh	r2,r0[0x0]
8002279e:	25 3e       	sub	lr,83

800227a0 <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
800227a0:	eb cd 40 c0 	pushm	r6-r7,lr
800227a4:	1a 97       	mov	r7,sp
800227a6:	20 7d       	sub	sp,28
800227a8:	4b 46       	lddpc	r6,80022878 <putnum_tight+0xd8>
800227aa:	1e 26       	rsub	r6,pc
800227ac:	ef 4c ff ec 	st.w	r7[-20],r12
800227b0:	ef 4b ff e8 	st.w	r7[-24],r11
800227b4:	14 98       	mov	r8,r10
800227b6:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
800227ba:	30 a8       	mov	r8,10
800227bc:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800227c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227c4:	58 08       	cp.w	r8,0
800227c6:	c5 30       	breq	8002286c <putnum_tight+0xcc>
800227c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227cc:	70 18       	ld.w	r8,r8[0x4]
800227ce:	58 08       	cp.w	r8,0
800227d0:	c5 00       	breq	80022870 <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
800227d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800227d6:	58 08       	cp.w	r8,0
800227d8:	c0 f4       	brge	800227f6 <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
800227da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227de:	70 18       	ld.w	r8,r8[0x4]
800227e0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800227e4:	72 59       	ld.w	r9,r9[0x14]
800227e6:	32 db       	mov	r11,45
800227e8:	12 9c       	mov	r12,r9
800227ea:	5d 18       	icall	r8
    c = c*-1;
800227ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800227f0:	5c 38       	neg	r8
800227f2:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
800227f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800227fa:	20 18       	sub	r8,1
800227fc:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022800:	ee fa ff fc 	ld.w	r10,r7[-4]
80022804:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022808:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002280c:	f0 09 0c 08 	divs	r8,r8,r9
80022810:	12 98       	mov	r8,r9
80022812:	5c 58       	castu.b	r8
80022814:	ee 0a 00 09 	add	r9,r7,r10
80022818:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
8002281c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022820:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022824:	f0 09 0c 08 	divs	r8,r8,r9
80022828:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
8002282c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022830:	58 08       	cp.w	r8,0
80022832:	c1 75       	brlt	80022860 <putnum_tight+0xc0>
80022834:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022838:	58 08       	cp.w	r8,0
8002283a:	fe 99 ff de 	brgt	800227f6 <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002283e:	c1 18       	rjmp	80022860 <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022840:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022844:	ee 08 00 08 	add	r8,r7,r8
80022848:	f1 38 ff f0 	ld.ub	r8,r8[-16]
8002284c:	10 9b       	mov	r11,r8
8002284e:	ee fc ff ec 	ld.w	r12,r7[-20]
80022852:	f0 16 00 b2 	mcall	r6[712]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002285a:	2f f8       	sub	r8,-1
8002285c:	ef 48 ff fc 	st.w	r7[-4],r8
80022860:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022864:	58 98       	cp.w	r8,9
80022866:	fe 9a ff ed 	brle	80022840 <putnum_tight+0xa0>
8002286a:	c0 48       	rjmp	80022872 <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
8002286c:	d7 03       	nop
8002286e:	c0 28       	rjmp	80022872 <putnum_tight+0xd2>
80022870:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022872:	2f 9d       	sub	sp,-28
80022874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022878:	80 02       	ld.sh	r2,r0[0x0]
8002287a:	26 2e       	sub	lr,98
8002287c:	2d 00       	sub	r0,-48
8002287e:	00 00       	add	r0,r0
80022880:	2e 00       	sub	r0,-32

80022882 <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80022882:	eb cd 40 c0 	pushm	r6-r7,lr
80022886:	1a 97       	mov	r7,sp
80022888:	20 8d       	sub	sp,32
8002288a:	4b d6       	lddpc	r6,8002297c <putfloat+0xfa>
8002288c:	1e 26       	rsub	r6,pc
8002288e:	ef 4c ff e8 	st.w	r7[-24],r12
80022892:	ef 4b ff e4 	st.w	r7[-28],r11
80022896:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
8002289a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002289e:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
800228a2:	30 18       	mov	r8,1
800228a4:	ee fa ff e4 	ld.w	r10,r7[-28]
800228a8:	30 09       	mov	r9,0
800228aa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800228ae:	e0 8c 00 03 	brvs	800228b4 <putfloat+0x32>
800228b2:	c0 25       	brlt	800228b6 <putfloat+0x34>
800228b4:	30 08       	mov	r8,0
800228b6:	5c 58       	castu.b	r8
800228b8:	c0 d0       	breq	800228d2 <putfloat+0x50>
		putstring(out_stream, "-");
800228ba:	fe cb 00 3e 	sub	r11,pc,62
800228be:	ee fc ff e8 	ld.w	r12,r7[-24]
800228c2:	f0 16 00 34 	mcall	r6[208]
		num=-c;
800228c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800228ca:	ee 18 80 00 	eorh	r8,0x8000
800228ce:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
800228d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800228d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800228da:	ef 48 ff fc 	st.w	r7[-4],r8
800228de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228e2:	5c 48       	abs	r8
800228e4:	ef 48 ff fc 	st.w	r7[-4],r8
800228e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228ec:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
800228f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800228f4:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800228f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800228fc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022900:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
80022904:	30 aa       	mov	r10,10
80022906:	ee fb ff f4 	ld.w	r11,r7[-12]
8002290a:	ee fc ff e8 	ld.w	r12,r7[-24]
8002290e:	f0 16 01 46 	mcall	r6[1304]
	putstring(out_stream, "."); 
80022912:	fe cb 00 92 	sub	r11,pc,146
80022916:	ee fc ff e8 	ld.w	r12,r7[-24]
8002291a:	f0 16 00 34 	mcall	r6[208]
	
	for (i=0; i<after_digits; i++) 
8002291e:	30 08       	mov	r8,0
80022920:	ef 48 ff ec 	st.w	r7[-20],r8
80022924:	c2 38       	rjmp	8002296a <putfloat+0xe8>
	{
		after*=10;
80022926:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002292a:	fc 18 41 20 	movh	r8,0x4120
8002292e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022932:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
80022936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002293a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002293e:	10 9b       	mov	r11,r8
80022940:	ee fc ff e8 	ld.w	r12,r7[-24]
80022944:	f0 16 00 b2 	mcall	r6[712]
		after=after-(int)after;
80022948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002294c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022950:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022954:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022958:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8002295c:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022960:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022964:	2f f8       	sub	r8,-1
80022966:	ef 48 ff ec 	st.w	r7[-20],r8
8002296a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002296e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80022972:	10 39       	cp.w	r9,r8
80022974:	cd 95       	brlt	80022926 <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80022976:	2f 8d       	sub	sp,-32
80022978:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002297c:	80 02       	ld.sh	r2,r0[0x0]
8002297e:	27 10       	sub	r0,113
80022980:	28 00       	sub	r0,-128
80022982:	00 00       	add	r0,r0
80022984:	2c 20       	sub	r0,-62
80022986:	00 00       	add	r0,r0
80022988:	29 20       	sub	r0,-110
	...

8002298c <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
8002298c:	eb cd 40 c0 	pushm	r6-r7,lr
80022990:	1a 97       	mov	r7,sp
80022992:	20 4d       	sub	sp,16
80022994:	4a 06       	lddpc	r6,80022a14 <print_vector+0x88>
80022996:	1e 26       	rsub	r6,pc
80022998:	ef 4c ff f8 	st.w	r7[-8],r12
8002299c:	ef 4b ff f4 	st.w	r7[-12],r11
800229a0:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
800229a4:	fe cb 00 24 	sub	r11,pc,36
800229a8:	ee fc ff f8 	ld.w	r12,r7[-8]
800229ac:	f0 16 00 34 	mcall	r6[208]
	for (i=0; i<3; i++) {
800229b0:	30 08       	mov	r8,0
800229b2:	ef 48 ff fc 	st.w	r7[-4],r8
800229b6:	c2 08       	rjmp	800229f6 <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
800229b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229bc:	a3 68       	lsl	r8,0x2
800229be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800229c2:	f2 08 00 08 	add	r8,r9,r8
800229c6:	70 08       	ld.w	r8,r8[0x0]
800229c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800229cc:	10 9b       	mov	r11,r8
800229ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800229d2:	f0 16 00 d6 	mcall	r6[856]
		if (i<2) putstring(out_stream, ", ");
800229d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229da:	58 18       	cp.w	r8,1
800229dc:	e0 89 00 08 	brgt	800229ec <print_vector+0x60>
800229e0:	fe cb 00 5c 	sub	r11,pc,92
800229e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800229e8:	f0 16 00 34 	mcall	r6[208]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
800229ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229f0:	2f f8       	sub	r8,-1
800229f2:	ef 48 ff fc 	st.w	r7[-4],r8
800229f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229fa:	58 28       	cp.w	r8,2
800229fc:	fe 9a ff de 	brle	800229b8 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80022a00:	fe cb 00 78 	sub	r11,pc,120
80022a04:	ee fc ff f8 	ld.w	r12,r7[-8]
80022a08:	f0 16 00 34 	mcall	r6[208]

}
80022a0c:	2f cd       	sub	sp,-16
80022a0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a12:	00 00       	add	r0,r0
80022a14:	80 02       	ld.sh	r2,r0[0x0]
80022a16:	28 1a       	sub	r10,-127

80022a18 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80022a18:	eb cd 40 c0 	pushm	r6-r7,lr
80022a1c:	1a 97       	mov	r7,sp
80022a1e:	20 3d       	sub	sp,12
80022a20:	49 96       	lddpc	r6,80022a84 <print_quaternion+0x6c>
80022a22:	1e 26       	rsub	r6,pc
80022a24:	ef 4c ff fc 	st.w	r7[-4],r12
80022a28:	ef 4b ff f8 	st.w	r7[-8],r11
80022a2c:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022a30:	fe cb 00 b0 	sub	r11,pc,176
80022a34:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a38:	f0 16 00 34 	mcall	r6[208]
	putfloat(out_stream, quat->s, after_digits);
80022a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022a40:	70 08       	ld.w	r8,r8[0x0]
80022a42:	ee fa ff f4 	ld.w	r10,r7[-12]
80022a46:	10 9b       	mov	r11,r8
80022a48:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a4c:	f0 16 00 d6 	mcall	r6[856]
	putstring(out_stream, ", ");
80022a50:	fe cb 00 cc 	sub	r11,pc,204
80022a54:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a58:	f0 16 00 34 	mcall	r6[208]
	print_vector(out_stream, quat->v, after_digits);
80022a5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022a60:	2f c8       	sub	r8,-4
80022a62:	ee fa ff f4 	ld.w	r10,r7[-12]
80022a66:	10 9b       	mov	r11,r8
80022a68:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a6c:	f0 16 00 f2 	mcall	r6[968]
	putstring(out_stream, ") ");
80022a70:	fe cb 00 e8 	sub	r11,pc,232
80022a74:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a78:	f0 16 00 34 	mcall	r6[208]
}
80022a7c:	2f dd       	sub	sp,-12
80022a7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a82:	00 00       	add	r0,r0
80022a84:	80 02       	ld.sh	r2,r0[0x0]
80022a86:	28 a6       	sub	r6,-118

80022a88 <dbg_print>:

void dbg_print(const char* s) {
80022a88:	eb cd 40 c0 	pushm	r6-r7,lr
80022a8c:	1a 97       	mov	r7,sp
80022a8e:	20 1d       	sub	sp,4
80022a90:	48 86       	lddpc	r6,80022ab0 <dbg_print+0x28>
80022a92:	1e 26       	rsub	r6,pc
80022a94:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80022a98:	ec f8 01 b0 	ld.w	r8,r6[432]
80022a9c:	70 08       	ld.w	r8,r8[0x0]
80022a9e:	ee fb ff fc 	ld.w	r11,r7[-4]
80022aa2:	10 9c       	mov	r12,r8
80022aa4:	f0 16 00 34 	mcall	r6[208]

}
80022aa8:	2f fd       	sub	sp,-4
80022aaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022aae:	00 00       	add	r0,r0
80022ab0:	80 02       	ld.sh	r2,r0[0x0]
80022ab2:	29 16       	sub	r6,-111

80022ab4 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80022ab4:	eb cd 40 c0 	pushm	r6-r7,lr
80022ab8:	1a 97       	mov	r7,sp
80022aba:	20 2d       	sub	sp,8
80022abc:	48 b6       	lddpc	r6,80022ae8 <dbg_print_num+0x34>
80022abe:	1e 26       	rsub	r6,pc
80022ac0:	ef 4c ff fc 	st.w	r7[-4],r12
80022ac4:	16 98       	mov	r8,r11
80022ac6:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80022aca:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022ace:	ec f8 01 b0 	ld.w	r8,r6[432]
80022ad2:	70 08       	ld.w	r8,r8[0x0]
80022ad4:	12 9a       	mov	r10,r9
80022ad6:	ee fb ff fc 	ld.w	r11,r7[-4]
80022ada:	10 9c       	mov	r12,r8
80022adc:	f0 16 00 28 	mcall	r6[160]

}
80022ae0:	2f ed       	sub	sp,-8
80022ae2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022ae6:	00 00       	add	r0,r0
80022ae8:	80 02       	ld.sh	r2,r0[0x0]
80022aea:	29 42       	sub	r2,-108

80022aec <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80022aec:	eb cd 40 c0 	pushm	r6-r7,lr
80022af0:	1a 97       	mov	r7,sp
80022af2:	20 2d       	sub	sp,8
80022af4:	48 a6       	lddpc	r6,80022b1c <dbg_putfloat+0x30>
80022af6:	1e 26       	rsub	r6,pc
80022af8:	ef 4c ff fc 	st.w	r7[-4],r12
80022afc:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022b00:	ec f8 01 b0 	ld.w	r8,r6[432]
80022b04:	70 08       	ld.w	r8,r8[0x0]
80022b06:	ee fa ff f8 	ld.w	r10,r7[-8]
80022b0a:	ee fb ff fc 	ld.w	r11,r7[-4]
80022b0e:	10 9c       	mov	r12,r8
80022b10:	f0 16 00 d6 	mcall	r6[856]
}
80022b14:	2f ed       	sub	sp,-8
80022b16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b1a:	00 00       	add	r0,r0
80022b1c:	80 02       	ld.sh	r2,r0[0x0]
80022b1e:	29 7a       	sub	r10,-105

80022b20 <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022b20:	eb cd 40 c0 	pushm	r6-r7,lr
80022b24:	1a 97       	mov	r7,sp
80022b26:	20 2d       	sub	sp,8
80022b28:	48 a6       	lddpc	r6,80022b50 <dbg_print_vector+0x30>
80022b2a:	1e 26       	rsub	r6,pc
80022b2c:	ef 4c ff fc 	st.w	r7[-4],r12
80022b30:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
80022b34:	ec f8 01 b0 	ld.w	r8,r6[432]
80022b38:	70 08       	ld.w	r8,r8[0x0]
80022b3a:	ee fa ff f8 	ld.w	r10,r7[-8]
80022b3e:	ee fb ff fc 	ld.w	r11,r7[-4]
80022b42:	10 9c       	mov	r12,r8
80022b44:	f0 16 00 f2 	mcall	r6[968]
}
80022b48:	2f ed       	sub	sp,-8
80022b4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b4e:	00 00       	add	r0,r0
80022b50:	80 02       	ld.sh	r2,r0[0x0]
80022b52:	29 ae       	sub	lr,-102

80022b54 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
80022b54:	eb cd 40 c0 	pushm	r6-r7,lr
80022b58:	1a 97       	mov	r7,sp
80022b5a:	20 2d       	sub	sp,8
80022b5c:	48 a6       	lddpc	r6,80022b84 <dbg_print_quaternion+0x30>
80022b5e:	1e 26       	rsub	r6,pc
80022b60:	ef 4c ff fc 	st.w	r7[-4],r12
80022b64:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80022b68:	ec f8 01 b0 	ld.w	r8,r6[432]
80022b6c:	70 08       	ld.w	r8,r8[0x0]
80022b6e:	ee fa ff f8 	ld.w	r10,r7[-8]
80022b72:	ee fb ff fc 	ld.w	r11,r7[-4]
80022b76:	10 9c       	mov	r12,r8
80022b78:	f0 16 01 9b 	mcall	r6[1644]
}
80022b7c:	2f ed       	sub	sp,-8
80022b7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b82:	00 00       	add	r0,r0
80022b84:	80 02       	ld.sh	r2,r0[0x0]
80022b86:	29 e2       	sub	r2,-98
80022b88:	0a 00       	add	r0,r5

80022b8a <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80022b8a:	eb cd 40 c0 	pushm	r6-r7,lr
80022b8e:	1a 97       	mov	r7,sp
80022b90:	20 3d       	sub	sp,12
80022b92:	49 26       	lddpc	r6,80022bd8 <dbg_log_value+0x4e>
80022b94:	1e 26       	rsub	r6,pc
80022b96:	ef 4c ff fc 	st.w	r7[-4],r12
80022b9a:	ef 4b ff f8 	st.w	r7[-8],r11
80022b9e:	14 98       	mov	r8,r10
80022ba0:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80022ba4:	ee fc ff fc 	ld.w	r12,r7[-4]
80022ba8:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80022bac:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022bb0:	30 18       	mov	r8,1
80022bb2:	f0 09 18 00 	cp.b	r9,r8
80022bb6:	e0 88 00 09 	brls	80022bc8 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80022bba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022bbe:	10 9b       	mov	r11,r8
80022bc0:	ee fc ff f8 	ld.w	r12,r7[-8]
80022bc4:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80022bc8:	fe cc 00 40 	sub	r12,pc,64
80022bcc:	f0 16 00 01 	mcall	r6[4]

}
80022bd0:	2f dd       	sub	sp,-12
80022bd2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022bd6:	00 00       	add	r0,r0
80022bd8:	80 02       	ld.sh	r2,r0[0x0]
80022bda:	2a 18       	sub	r8,-95

80022bdc <adcifa_get_calibration_data>:
80022bdc:	eb cd 40 80 	pushm	r7,lr
80022be0:	1a 97       	mov	r7,sp
80022be2:	20 6d       	sub	sp,24
80022be4:	ef 4c ff ec 	st.w	r7[-20],r12
80022be8:	ef 4b ff e8 	st.w	r7[-24],r11
80022bec:	e0 68 02 04 	mov	r8,516
80022bf0:	ea 18 80 80 	orh	r8,0x8080
80022bf4:	70 08       	ld.w	r8,r8[0x0]
80022bf6:	e6 18 3f 00 	andh	r8,0x3f00,COH
80022bfa:	b9 48       	asr	r8,0x18
80022bfc:	ef 48 ff f0 	st.w	r7[-16],r8
80022c00:	e0 68 02 04 	mov	r8,516
80022c04:	ea 18 80 80 	orh	r8,0x8080
80022c08:	70 08       	ld.w	r8,r8[0x0]
80022c0a:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80022c0e:	ef 48 ff f4 	st.w	r7[-12],r8
80022c12:	e0 68 02 08 	mov	r8,520
80022c16:	ea 18 80 80 	orh	r8,0x8080
80022c1a:	70 08       	ld.w	r8,r8[0x0]
80022c1c:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80022c20:	ef 48 ff f8 	st.w	r7[-8],r8
80022c24:	e0 68 02 08 	mov	r8,520
80022c28:	ea 18 80 80 	orh	r8,0x8080
80022c2c:	70 08       	ld.w	r8,r8[0x0]
80022c2e:	e6 18 03 ff 	andh	r8,0x3ff,COH
80022c32:	b1 48       	asr	r8,0x10
80022c34:	ef 48 ff fc 	st.w	r7[-4],r8
80022c38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022c3c:	5c 88       	casts.h	r8
80022c3e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c42:	b2 68       	st.h	r9[0xc],r8
80022c44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022c48:	5c 88       	casts.h	r8
80022c4a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c4e:	b2 58       	st.h	r9[0xa],r8
80022c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c54:	5c 88       	casts.h	r8
80022c56:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c5a:	b2 78       	st.h	r9[0xe],r8
80022c5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c60:	5c 88       	casts.h	r8
80022c62:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c66:	f3 58 00 10 	st.h	r9[16],r8
80022c6a:	2f ad       	sub	sp,-24
80022c6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80022c70 <adcifa_configure>:
80022c70:	eb cd 40 80 	pushm	r7,lr
80022c74:	1a 97       	mov	r7,sp
80022c76:	20 3d       	sub	sp,12
80022c78:	ef 4c ff fc 	st.w	r7[-4],r12
80022c7c:	ef 4b ff f8 	st.w	r7[-8],r11
80022c80:	ef 4a ff f4 	st.w	r7[-12],r10
80022c84:	fc 7a 24 00 	mov	r10,-187392
80022c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c8c:	f1 38 00 08 	ld.ub	r8,r8[8]
80022c90:	f0 09 15 02 	lsl	r9,r8,0x2
80022c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c98:	11 e8       	ld.ub	r8,r8[0x6]
80022c9a:	a3 78       	lsl	r8,0x3
80022c9c:	10 49       	or	r9,r8
80022c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022ca2:	11 f8       	ld.ub	r8,r8[0x7]
80022ca4:	a5 68       	lsl	r8,0x4
80022ca6:	10 49       	or	r9,r8
80022ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cac:	11 c8       	ld.ub	r8,r8[0x4]
80022cae:	a5 78       	lsl	r8,0x5
80022cb0:	10 49       	or	r9,r8
80022cb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cb6:	11 d8       	ld.ub	r8,r8[0x5]
80022cb8:	a7 78       	lsl	r8,0x7
80022cba:	f3 e8 10 08 	or	r8,r9,r8
80022cbe:	10 9b       	mov	r11,r8
80022cc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cc4:	70 09       	ld.w	r9,r8[0x0]
80022cc6:	e0 68 4d d3 	mov	r8,19923
80022cca:	ea 18 10 62 	orh	r8,0x1062
80022cce:	f2 08 06 48 	mulu.d	r8,r9,r8
80022cd2:	a7 89       	lsr	r9,0x6
80022cd4:	e0 68 03 e8 	mov	r8,1000
80022cd8:	b1 39       	mul	r9,r8
80022cda:	e0 68 4d d3 	mov	r8,19923
80022cde:	ea 18 10 62 	orh	r8,0x1062
80022ce2:	f2 08 06 48 	mulu.d	r8,r9,r8
80022ce6:	f2 08 16 0b 	lsr	r8,r9,0xb
80022cea:	b1 68       	lsl	r8,0x10
80022cec:	f7 e8 10 08 	or	r8,r11,r8
80022cf0:	95 18       	st.w	r10[0x4],r8
80022cf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cf6:	70 08       	ld.w	r8,r8[0x0]
80022cf8:	f0 09 15 01 	lsl	r9,r8,0x1
80022cfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022d00:	f0 09 0d 08 	divu	r8,r8,r9
80022d04:	20 18       	sub	r8,1
80022d06:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80022d0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d0e:	f1 49 00 44 	st.w	r8[68],r9
80022d12:	fc 78 24 00 	mov	r8,-187392
80022d16:	fc 79 24 00 	mov	r9,-187392
80022d1a:	73 aa       	ld.w	r10,r9[0x68]
80022d1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d20:	92 69       	ld.sh	r9,r9[0xc]
80022d22:	b9 69       	lsl	r9,0x18
80022d24:	e6 19 3f 00 	andh	r9,0x3f00,COH
80022d28:	f5 e9 10 09 	or	r9,r10,r9
80022d2c:	f1 49 00 68 	st.w	r8[104],r9
80022d30:	fc 78 24 00 	mov	r8,-187392
80022d34:	fc 79 24 00 	mov	r9,-187392
80022d38:	73 aa       	ld.w	r10,r9[0x68]
80022d3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d3e:	92 59       	ld.sh	r9,r9[0xa]
80022d40:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80022d44:	f5 e9 10 09 	or	r9,r10,r9
80022d48:	f1 49 00 68 	st.w	r8[104],r9
80022d4c:	fc 78 24 00 	mov	r8,-187392
80022d50:	fc 79 24 00 	mov	r9,-187392
80022d54:	73 ba       	ld.w	r10,r9[0x6c]
80022d56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d5a:	92 79       	ld.sh	r9,r9[0xe]
80022d5c:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80022d60:	f5 e9 10 09 	or	r9,r10,r9
80022d64:	f1 49 00 6c 	st.w	r8[108],r9
80022d68:	fc 78 24 00 	mov	r8,-187392
80022d6c:	fc 79 24 00 	mov	r9,-187392
80022d70:	73 ba       	ld.w	r10,r9[0x6c]
80022d72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d76:	f3 09 00 10 	ld.sh	r9,r9[16]
80022d7a:	b1 69       	lsl	r9,0x10
80022d7c:	e6 19 03 ff 	andh	r9,0x3ff,COH
80022d80:	f5 e9 10 09 	or	r9,r10,r9
80022d84:	f1 49 00 6c 	st.w	r8[108],r9
80022d88:	fc 78 24 00 	mov	r8,-187392
80022d8c:	fc 79 24 00 	mov	r9,-187392
80022d90:	72 19       	ld.w	r9,r9[0x4]
80022d92:	a1 a9       	sbr	r9,0x0
80022d94:	91 19       	st.w	r8[0x4],r9
80022d96:	c0 28       	rjmp	80022d9a <adcifa_configure+0x12a>
80022d98:	d7 03       	nop
80022d9a:	fc 78 24 00 	mov	r8,-187392
80022d9e:	70 28       	ld.w	r8,r8[0x8]
80022da0:	e2 18 40 00 	andl	r8,0x4000,COH
80022da4:	cf a0       	breq	80022d98 <adcifa_configure+0x128>
80022da6:	30 18       	mov	r8,1
80022da8:	10 9c       	mov	r12,r8
80022daa:	2f dd       	sub	sp,-12
80022dac:	e3 cd 80 80 	ldm	sp++,r7,pc

80022db0 <adcifa_configure_sequencer>:
80022db0:	eb cd 40 80 	pushm	r7,lr
80022db4:	1a 97       	mov	r7,sp
80022db6:	20 bd       	sub	sp,44
80022db8:	ef 4c ff e0 	st.w	r7[-32],r12
80022dbc:	16 98       	mov	r8,r11
80022dbe:	ef 4a ff d8 	st.w	r7[-40],r10
80022dc2:	ef 49 ff d4 	st.w	r7[-44],r9
80022dc6:	ef 68 ff dc 	st.b	r7[-36],r8
80022dca:	30 08       	mov	r8,0
80022dcc:	30 09       	mov	r9,0
80022dce:	ee e9 ff f4 	st.d	r7[-12],r8
80022dd2:	30 08       	mov	r8,0
80022dd4:	30 09       	mov	r9,0
80022dd6:	ee e9 ff ec 	st.d	r7[-20],r8
80022dda:	30 08       	mov	r8,0
80022ddc:	30 09       	mov	r9,0
80022dde:	ee e9 ff e4 	st.d	r7[-28],r8
80022de2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80022de6:	58 08       	cp.w	r8,0
80022de8:	c0 60       	breq	80022df4 <adcifa_configure_sequencer+0x44>
80022dea:	58 18       	cp.w	r8,1
80022dec:	e0 80 00 ed 	breq	80022fc6 <adcifa_configure_sequencer+0x216>
80022df0:	e0 8f 01 d7 	bral	8002319e <adcifa_configure_sequencer+0x3ee>
80022df4:	fc 78 24 00 	mov	r8,-187392
80022df8:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022dfc:	13 89       	ld.ub	r9,r9[0x0]
80022dfe:	20 19       	sub	r9,1
80022e00:	f2 0a 15 10 	lsl	r10,r9,0x10
80022e04:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e08:	13 99       	ld.ub	r9,r9[0x1]
80022e0a:	ad 69       	lsl	r9,0xc
80022e0c:	12 4a       	or	r10,r9
80022e0e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e12:	13 a9       	ld.ub	r9,r9[0x2]
80022e14:	a9 69       	lsl	r9,0x8
80022e16:	12 4a       	or	r10,r9
80022e18:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e1c:	13 b9       	ld.ub	r9,r9[0x3]
80022e1e:	a3 69       	lsl	r9,0x2
80022e20:	12 4a       	or	r10,r9
80022e22:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e26:	13 c9       	ld.ub	r9,r9[0x4]
80022e28:	a3 79       	lsl	r9,0x3
80022e2a:	12 4a       	or	r10,r9
80022e2c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e30:	13 d9       	ld.ub	r9,r9[0x5]
80022e32:	a1 79       	lsl	r9,0x1
80022e34:	12 4a       	or	r10,r9
80022e36:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e3a:	13 e9       	ld.ub	r9,r9[0x6]
80022e3c:	f5 e9 10 09 	or	r9,r10,r9
80022e40:	91 59       	st.w	r8[0x14],r9
80022e42:	30 08       	mov	r8,0
80022e44:	ef 68 ff ff 	st.b	r7[-1],r8
80022e48:	c1 68       	rjmp	80022e74 <adcifa_configure_sequencer+0xc4>
80022e4a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022e4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022e52:	12 98       	mov	r8,r9
80022e54:	a1 78       	lsl	r8,0x1
80022e56:	12 08       	add	r8,r9
80022e58:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022e5c:	f2 08 00 08 	add	r8,r9,r8
80022e60:	11 a8       	ld.ub	r8,r8[0x2]
80022e62:	ee 0a 00 09 	add	r9,r7,r10
80022e66:	f3 68 ff f4 	st.b	r9[-12],r8
80022e6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022e6e:	2f f8       	sub	r8,-1
80022e70:	ef 68 ff ff 	st.b	r7[-1],r8
80022e74:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022e78:	11 88       	ld.ub	r8,r8[0x0]
80022e7a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022e7e:	f0 09 18 00 	cp.b	r9,r8
80022e82:	ce 43       	brcs	80022e4a <adcifa_configure_sequencer+0x9a>
80022e84:	fc 78 24 00 	mov	r8,-187392
80022e88:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80022e8c:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80022e90:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80022e94:	b9 69       	lsl	r9,0x18
80022e96:	12 4a       	or	r10,r9
80022e98:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80022e9c:	b5 69       	lsl	r9,0x14
80022e9e:	12 4a       	or	r10,r9
80022ea0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022ea4:	b1 69       	lsl	r9,0x10
80022ea6:	12 4a       	or	r10,r9
80022ea8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80022eac:	ad 69       	lsl	r9,0xc
80022eae:	12 4a       	or	r10,r9
80022eb0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80022eb4:	a9 69       	lsl	r9,0x8
80022eb6:	12 4a       	or	r10,r9
80022eb8:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80022ebc:	a5 69       	lsl	r9,0x4
80022ebe:	12 4a       	or	r10,r9
80022ec0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022ec4:	f5 e9 10 09 	or	r9,r10,r9
80022ec8:	91 79       	st.w	r8[0x1c],r9
80022eca:	30 08       	mov	r8,0
80022ecc:	ef 68 ff ff 	st.b	r7[-1],r8
80022ed0:	c2 68       	rjmp	80022f1c <adcifa_configure_sequencer+0x16c>
80022ed2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022ed6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022eda:	12 98       	mov	r8,r9
80022edc:	a1 78       	lsl	r8,0x1
80022ede:	12 08       	add	r8,r9
80022ee0:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022ee4:	f2 08 00 08 	add	r8,r9,r8
80022ee8:	11 88       	ld.ub	r8,r8[0x0]
80022eea:	ee 0a 00 09 	add	r9,r7,r10
80022eee:	f3 68 ff ec 	st.b	r9[-20],r8
80022ef2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022ef6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022efa:	12 98       	mov	r8,r9
80022efc:	a1 78       	lsl	r8,0x1
80022efe:	12 08       	add	r8,r9
80022f00:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022f04:	f2 08 00 08 	add	r8,r9,r8
80022f08:	11 98       	ld.ub	r8,r8[0x1]
80022f0a:	ee 0a 00 09 	add	r9,r7,r10
80022f0e:	f3 68 ff e4 	st.b	r9[-28],r8
80022f12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022f16:	2f f8       	sub	r8,-1
80022f18:	ef 68 ff ff 	st.b	r7[-1],r8
80022f1c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022f20:	11 88       	ld.ub	r8,r8[0x0]
80022f22:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022f26:	f0 09 18 00 	cp.b	r9,r8
80022f2a:	cd 43       	brcs	80022ed2 <adcifa_configure_sequencer+0x122>
80022f2c:	fc 78 24 00 	mov	r8,-187392
80022f30:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80022f34:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f38:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80022f3c:	b1 69       	lsl	r9,0x10
80022f3e:	12 4a       	or	r10,r9
80022f40:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80022f44:	a9 69       	lsl	r9,0x8
80022f46:	12 4a       	or	r10,r9
80022f48:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80022f4c:	f5 e9 10 09 	or	r9,r10,r9
80022f50:	91 b9       	st.w	r8[0x2c],r9
80022f52:	fc 78 24 00 	mov	r8,-187392
80022f56:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80022f5a:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f5e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80022f62:	b1 69       	lsl	r9,0x10
80022f64:	12 4a       	or	r10,r9
80022f66:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80022f6a:	a9 69       	lsl	r9,0x8
80022f6c:	12 4a       	or	r10,r9
80022f6e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80022f72:	f5 e9 10 09 	or	r9,r10,r9
80022f76:	91 99       	st.w	r8[0x24],r9
80022f78:	fc 78 24 00 	mov	r8,-187392
80022f7c:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80022f80:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f84:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80022f88:	b1 69       	lsl	r9,0x10
80022f8a:	12 4a       	or	r10,r9
80022f8c:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80022f90:	a9 69       	lsl	r9,0x8
80022f92:	12 4a       	or	r10,r9
80022f94:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80022f98:	f5 e9 10 09 	or	r9,r10,r9
80022f9c:	91 f9       	st.w	r8[0x3c],r9
80022f9e:	fc 78 24 00 	mov	r8,-187392
80022fa2:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80022fa6:	f2 0a 15 18 	lsl	r10,r9,0x18
80022faa:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80022fae:	b1 69       	lsl	r9,0x10
80022fb0:	12 4a       	or	r10,r9
80022fb2:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80022fb6:	a9 69       	lsl	r9,0x8
80022fb8:	12 4a       	or	r10,r9
80022fba:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022fbe:	f5 e9 10 09 	or	r9,r10,r9
80022fc2:	91 d9       	st.w	r8[0x34],r9
80022fc4:	ce d8       	rjmp	8002319e <adcifa_configure_sequencer+0x3ee>
80022fc6:	fc 78 24 00 	mov	r8,-187392
80022fca:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fce:	13 89       	ld.ub	r9,r9[0x0]
80022fd0:	20 19       	sub	r9,1
80022fd2:	f2 0a 15 10 	lsl	r10,r9,0x10
80022fd6:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fda:	13 99       	ld.ub	r9,r9[0x1]
80022fdc:	ad 69       	lsl	r9,0xc
80022fde:	12 4a       	or	r10,r9
80022fe0:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fe4:	13 a9       	ld.ub	r9,r9[0x2]
80022fe6:	a9 69       	lsl	r9,0x8
80022fe8:	12 4a       	or	r10,r9
80022fea:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fee:	13 b9       	ld.ub	r9,r9[0x3]
80022ff0:	a3 69       	lsl	r9,0x2
80022ff2:	12 4a       	or	r10,r9
80022ff4:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022ff8:	13 c9       	ld.ub	r9,r9[0x4]
80022ffa:	a3 79       	lsl	r9,0x3
80022ffc:	12 4a       	or	r10,r9
80022ffe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023002:	13 d9       	ld.ub	r9,r9[0x5]
80023004:	a1 79       	lsl	r9,0x1
80023006:	f5 e9 10 09 	or	r9,r10,r9
8002300a:	12 9a       	mov	r10,r9
8002300c:	a5 aa       	sbr	r10,0x4
8002300e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023012:	13 e9       	ld.ub	r9,r9[0x6]
80023014:	f5 e9 10 09 	or	r9,r10,r9
80023018:	91 69       	st.w	r8[0x18],r9
8002301a:	30 08       	mov	r8,0
8002301c:	ef 68 ff ff 	st.b	r7[-1],r8
80023020:	c1 68       	rjmp	8002304c <adcifa_configure_sequencer+0x29c>
80023022:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023026:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002302a:	12 98       	mov	r8,r9
8002302c:	a1 78       	lsl	r8,0x1
8002302e:	12 08       	add	r8,r9
80023030:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023034:	f2 08 00 08 	add	r8,r9,r8
80023038:	11 a8       	ld.ub	r8,r8[0x2]
8002303a:	ee 0a 00 09 	add	r9,r7,r10
8002303e:	f3 68 ff f4 	st.b	r9[-12],r8
80023042:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023046:	2f f8       	sub	r8,-1
80023048:	ef 68 ff ff 	st.b	r7[-1],r8
8002304c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023050:	11 88       	ld.ub	r8,r8[0x0]
80023052:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023056:	f0 09 18 00 	cp.b	r9,r8
8002305a:	ce 43       	brcs	80023022 <adcifa_configure_sequencer+0x272>
8002305c:	fc 78 24 00 	mov	r8,-187392
80023060:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023064:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80023068:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8002306c:	b9 69       	lsl	r9,0x18
8002306e:	12 4a       	or	r10,r9
80023070:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023074:	b5 69       	lsl	r9,0x14
80023076:	12 4a       	or	r10,r9
80023078:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002307c:	b1 69       	lsl	r9,0x10
8002307e:	12 4a       	or	r10,r9
80023080:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023084:	ad 69       	lsl	r9,0xc
80023086:	12 4a       	or	r10,r9
80023088:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8002308c:	a9 69       	lsl	r9,0x8
8002308e:	12 4a       	or	r10,r9
80023090:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023094:	a5 69       	lsl	r9,0x4
80023096:	12 4a       	or	r10,r9
80023098:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002309c:	f5 e9 10 09 	or	r9,r10,r9
800230a0:	91 89       	st.w	r8[0x20],r9
800230a2:	30 08       	mov	r8,0
800230a4:	ef 68 ff ff 	st.b	r7[-1],r8
800230a8:	c2 68       	rjmp	800230f4 <adcifa_configure_sequencer+0x344>
800230aa:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800230ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230b2:	12 98       	mov	r8,r9
800230b4:	a1 78       	lsl	r8,0x1
800230b6:	12 08       	add	r8,r9
800230b8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800230bc:	f2 08 00 08 	add	r8,r9,r8
800230c0:	11 88       	ld.ub	r8,r8[0x0]
800230c2:	ee 0a 00 09 	add	r9,r7,r10
800230c6:	f3 68 ff ec 	st.b	r9[-20],r8
800230ca:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800230ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230d2:	12 98       	mov	r8,r9
800230d4:	a1 78       	lsl	r8,0x1
800230d6:	12 08       	add	r8,r9
800230d8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800230dc:	f2 08 00 08 	add	r8,r9,r8
800230e0:	11 98       	ld.ub	r8,r8[0x1]
800230e2:	ee 0a 00 09 	add	r9,r7,r10
800230e6:	f3 68 ff e4 	st.b	r9[-28],r8
800230ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800230ee:	2f f8       	sub	r8,-1
800230f0:	ef 68 ff ff 	st.b	r7[-1],r8
800230f4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800230f8:	11 88       	ld.ub	r8,r8[0x0]
800230fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230fe:	f0 09 18 00 	cp.b	r9,r8
80023102:	cd 43       	brcs	800230aa <adcifa_configure_sequencer+0x2fa>
80023104:	fc 78 24 00 	mov	r8,-187392
80023108:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8002310c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023110:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80023114:	b1 69       	lsl	r9,0x10
80023116:	12 4a       	or	r10,r9
80023118:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8002311c:	a9 69       	lsl	r9,0x8
8002311e:	12 4a       	or	r10,r9
80023120:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80023124:	f5 e9 10 09 	or	r9,r10,r9
80023128:	91 c9       	st.w	r8[0x30],r9
8002312a:	fc 78 24 00 	mov	r8,-187392
8002312e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80023132:	f2 0a 15 18 	lsl	r10,r9,0x18
80023136:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002313a:	b1 69       	lsl	r9,0x10
8002313c:	12 4a       	or	r10,r9
8002313e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023142:	a9 69       	lsl	r9,0x8
80023144:	12 4a       	or	r10,r9
80023146:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002314a:	f5 e9 10 09 	or	r9,r10,r9
8002314e:	91 a9       	st.w	r8[0x28],r9
80023150:	fc 78 24 00 	mov	r8,-187392
80023154:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80023158:	f2 0a 15 18 	lsl	r10,r9,0x18
8002315c:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023160:	b1 69       	lsl	r9,0x10
80023162:	12 4a       	or	r10,r9
80023164:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80023168:	a9 69       	lsl	r9,0x8
8002316a:	12 4a       	or	r10,r9
8002316c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023170:	f5 e9 10 09 	or	r9,r10,r9
80023174:	f1 49 00 40 	st.w	r8[64],r9
80023178:	fc 78 24 00 	mov	r8,-187392
8002317c:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023180:	f2 0a 15 18 	lsl	r10,r9,0x18
80023184:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80023188:	b1 69       	lsl	r9,0x10
8002318a:	12 4a       	or	r10,r9
8002318c:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023190:	a9 69       	lsl	r9,0x8
80023192:	12 4a       	or	r10,r9
80023194:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023198:	f5 e9 10 09 	or	r9,r10,r9
8002319c:	91 e9       	st.w	r8[0x38],r9
8002319e:	30 18       	mov	r8,1
800231a0:	10 9c       	mov	r12,r8
800231a2:	2f 5d       	sub	sp,-44
800231a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800231a8 <adcifa_configure_window_monitor>:
800231a8:	eb cd 40 80 	pushm	r7,lr
800231ac:	1a 97       	mov	r7,sp
800231ae:	20 4d       	sub	sp,16
800231b0:	ef 4c ff f8 	st.w	r7[-8],r12
800231b4:	16 98       	mov	r8,r11
800231b6:	ef 4a ff f0 	st.w	r7[-16],r10
800231ba:	ef 68 ff f4 	st.b	r7[-12],r8
800231be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800231c2:	58 08       	cp.w	r8,0
800231c4:	c0 40       	breq	800231cc <adcifa_configure_window_monitor+0x24>
800231c6:	58 18       	cp.w	r8,1
800231c8:	c3 d0       	breq	80023242 <adcifa_configure_window_monitor+0x9a>
800231ca:	c7 68       	rjmp	800232b6 <adcifa_configure_window_monitor+0x10e>
800231cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231d0:	71 e8       	ld.w	r8,r8[0x78]
800231d2:	e2 18 04 00 	andl	r8,0x400,COH
800231d6:	ef 48 ff fc 	st.w	r7[-4],r8
800231da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800231de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231e2:	f1 49 00 74 	st.w	r8[116],r9
800231e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800231ea:	11 98       	ld.ub	r8,r8[0x1]
800231ec:	f0 09 15 1b 	lsl	r9,r8,0x1b
800231f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800231f4:	90 28       	ld.sh	r8,r8[0x4]
800231f6:	5c 78       	castu.h	r8
800231f8:	ad 68       	lsl	r8,0xc
800231fa:	10 49       	or	r9,r8
800231fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023200:	90 18       	ld.sh	r8,r8[0x2]
80023202:	5c 78       	castu.h	r8
80023204:	f3 e8 10 08 	or	r8,r9,r8
80023208:	10 99       	mov	r9,r8
8002320a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002320e:	f1 49 00 58 	st.w	r8[88],r9
80023212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023216:	e0 69 04 00 	mov	r9,1024
8002321a:	91 39       	st.w	r8[0xc],r9
8002321c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023220:	71 69       	ld.w	r9,r8[0x58]
80023222:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023226:	11 88       	ld.ub	r8,r8[0x0]
80023228:	b9 68       	lsl	r8,0x18
8002322a:	10 49       	or	r9,r8
8002322c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023230:	f1 49 00 58 	st.w	r8[88],r9
80023234:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002323c:	f1 49 00 70 	st.w	r8[112],r9
80023240:	c3 b8       	rjmp	800232b6 <adcifa_configure_window_monitor+0x10e>
80023242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023246:	71 e8       	ld.w	r8,r8[0x78]
80023248:	e2 18 08 00 	andl	r8,0x800,COH
8002324c:	ef 48 ff fc 	st.w	r7[-4],r8
80023250:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023254:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023258:	f1 49 00 74 	st.w	r8[116],r9
8002325c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023260:	11 98       	ld.ub	r8,r8[0x1]
80023262:	f0 09 15 1b 	lsl	r9,r8,0x1b
80023266:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002326a:	90 28       	ld.sh	r8,r8[0x4]
8002326c:	5c 78       	castu.h	r8
8002326e:	ad 68       	lsl	r8,0xc
80023270:	10 49       	or	r9,r8
80023272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023276:	90 18       	ld.sh	r8,r8[0x2]
80023278:	5c 78       	castu.h	r8
8002327a:	f3 e8 10 08 	or	r8,r9,r8
8002327e:	10 99       	mov	r9,r8
80023280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023284:	f1 49 00 5c 	st.w	r8[92],r9
80023288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002328c:	e0 69 08 00 	mov	r9,2048
80023290:	91 39       	st.w	r8[0xc],r9
80023292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023296:	71 79       	ld.w	r9,r8[0x5c]
80023298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002329c:	11 88       	ld.ub	r8,r8[0x0]
8002329e:	b9 68       	lsl	r8,0x18
800232a0:	10 49       	or	r9,r8
800232a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800232a6:	f1 49 00 5c 	st.w	r8[92],r9
800232aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800232ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800232b2:	f1 49 00 70 	st.w	r8[112],r9
800232b6:	2f cd       	sub	sp,-16
800232b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800232bc <adcifa_start_sequencer>:
800232bc:	eb cd 40 80 	pushm	r7,lr
800232c0:	1a 97       	mov	r7,sp
800232c2:	20 2d       	sub	sp,8
800232c4:	ef 4c ff fc 	st.w	r7[-4],r12
800232c8:	16 98       	mov	r8,r11
800232ca:	ef 68 ff f8 	st.b	r7[-8],r8
800232ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800232d2:	58 18       	cp.w	r8,1
800232d4:	c0 a0       	breq	800232e8 <adcifa_start_sequencer+0x2c>
800232d6:	58 38       	cp.w	r8,3
800232d8:	c0 d0       	breq	800232f2 <adcifa_start_sequencer+0x36>
800232da:	58 08       	cp.w	r8,0
800232dc:	c0 f1       	brne	800232fa <adcifa_start_sequencer+0x3e>
800232de:	fc 78 24 00 	mov	r8,-187392
800232e2:	30 19       	mov	r9,1
800232e4:	91 09       	st.w	r8[0x0],r9
800232e6:	c0 a8       	rjmp	800232fa <adcifa_start_sequencer+0x3e>
800232e8:	fc 78 24 00 	mov	r8,-187392
800232ec:	30 29       	mov	r9,2
800232ee:	91 09       	st.w	r8[0x0],r9
800232f0:	c0 58       	rjmp	800232fa <adcifa_start_sequencer+0x3e>
800232f2:	fc 78 24 00 	mov	r8,-187392
800232f6:	30 39       	mov	r9,3
800232f8:	91 09       	st.w	r8[0x0],r9
800232fa:	2f ed       	sub	sp,-8
800232fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023300 <adcifa_check_eoc>:
80023300:	eb cd 40 80 	pushm	r7,lr
80023304:	1a 97       	mov	r7,sp
80023306:	20 2d       	sub	sp,8
80023308:	ef 4c ff fc 	st.w	r7[-4],r12
8002330c:	16 98       	mov	r8,r11
8002330e:	ef 68 ff f8 	st.b	r7[-8],r8
80023312:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023316:	58 08       	cp.w	r8,0
80023318:	c0 40       	breq	80023320 <adcifa_check_eoc+0x20>
8002331a:	58 18       	cp.w	r8,1
8002331c:	c0 a0       	breq	80023330 <adcifa_check_eoc+0x30>
8002331e:	c1 18       	rjmp	80023340 <adcifa_check_eoc+0x40>
80023320:	fc 78 24 00 	mov	r8,-187392
80023324:	70 28       	ld.w	r8,r8[0x8]
80023326:	e2 18 00 02 	andl	r8,0x2,COH
8002332a:	5f 18       	srne	r8
8002332c:	5c 58       	castu.b	r8
8002332e:	c0 a8       	rjmp	80023342 <adcifa_check_eoc+0x42>
80023330:	fc 78 24 00 	mov	r8,-187392
80023334:	70 28       	ld.w	r8,r8[0x8]
80023336:	e2 18 00 20 	andl	r8,0x20,COH
8002333a:	5f 18       	srne	r8
8002333c:	5c 58       	castu.b	r8
8002333e:	c0 28       	rjmp	80023342 <adcifa_check_eoc+0x42>
80023340:	30 08       	mov	r8,0
80023342:	10 9c       	mov	r12,r8
80023344:	2f ed       	sub	sp,-8
80023346:	e3 cd 80 80 	ldm	sp++,r7,pc

8002334a <adcifa_check_eos>:
8002334a:	eb cd 40 80 	pushm	r7,lr
8002334e:	1a 97       	mov	r7,sp
80023350:	20 2d       	sub	sp,8
80023352:	ef 4c ff fc 	st.w	r7[-4],r12
80023356:	16 98       	mov	r8,r11
80023358:	ef 68 ff f8 	st.b	r7[-8],r8
8002335c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023360:	58 08       	cp.w	r8,0
80023362:	c0 40       	breq	8002336a <adcifa_check_eos+0x20>
80023364:	58 18       	cp.w	r8,1
80023366:	c0 90       	breq	80023378 <adcifa_check_eos+0x2e>
80023368:	c1 08       	rjmp	80023388 <adcifa_check_eos+0x3e>
8002336a:	fc 78 24 00 	mov	r8,-187392
8002336e:	70 28       	ld.w	r8,r8[0x8]
80023370:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023374:	5c 58       	castu.b	r8
80023376:	c0 a8       	rjmp	8002338a <adcifa_check_eos+0x40>
80023378:	fc 78 24 00 	mov	r8,-187392
8002337c:	70 28       	ld.w	r8,r8[0x8]
8002337e:	e2 18 00 10 	andl	r8,0x10,COH
80023382:	5f 18       	srne	r8
80023384:	5c 58       	castu.b	r8
80023386:	c0 28       	rjmp	8002338a <adcifa_check_eos+0x40>
80023388:	30 08       	mov	r8,0
8002338a:	10 9c       	mov	r12,r8
8002338c:	2f ed       	sub	sp,-8
8002338e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023392 <adcifa_get_values_from_sequencer>:
80023392:	eb cd 40 c0 	pushm	r6-r7,lr
80023396:	1a 97       	mov	r7,sp
80023398:	20 5d       	sub	sp,20
8002339a:	4b 46       	lddpc	r6,80023468 <adcifa_get_values_from_sequencer+0xd6>
8002339c:	1e 26       	rsub	r6,pc
8002339e:	ef 4c ff f8 	st.w	r7[-8],r12
800233a2:	16 98       	mov	r8,r11
800233a4:	ef 4a ff f0 	st.w	r7[-16],r10
800233a8:	ef 49 ff ec 	st.w	r7[-20],r9
800233ac:	ef 68 ff f4 	st.b	r7[-12],r8
800233b0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800233b4:	10 9b       	mov	r11,r8
800233b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800233ba:	f0 16 01 3a 	mcall	r6[1256]
800233be:	18 98       	mov	r8,r12
800233c0:	ec 18 00 01 	eorl	r8,0x1
800233c4:	5c 58       	castu.b	r8
800233c6:	c0 30       	breq	800233cc <adcifa_get_values_from_sequencer+0x3a>
800233c8:	30 38       	mov	r8,3
800233ca:	c4 b8       	rjmp	80023460 <adcifa_get_values_from_sequencer+0xce>
800233cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800233d0:	58 08       	cp.w	r8,0
800233d2:	c0 40       	breq	800233da <adcifa_get_values_from_sequencer+0x48>
800233d4:	58 18       	cp.w	r8,1
800233d6:	c2 30       	breq	8002341c <adcifa_get_values_from_sequencer+0x8a>
800233d8:	c4 38       	rjmp	8002345e <adcifa_get_values_from_sequencer+0xcc>
800233da:	30 08       	mov	r8,0
800233dc:	ef 68 ff ff 	st.b	r7[-1],r8
800233e0:	c1 58       	rjmp	8002340a <adcifa_get_values_from_sequencer+0x78>
800233e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233e6:	a1 78       	lsl	r8,0x1
800233e8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800233ec:	10 09       	add	r9,r8
800233ee:	fc 78 24 00 	mov	r8,-187392
800233f2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800233f6:	2d fa       	sub	r10,-33
800233f8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800233fc:	5c 88       	casts.h	r8
800233fe:	b2 08       	st.h	r9[0x0],r8
80023400:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023404:	2f f8       	sub	r8,-1
80023406:	ef 68 ff ff 	st.b	r7[-1],r8
8002340a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002340e:	11 88       	ld.ub	r8,r8[0x0]
80023410:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023414:	f0 09 18 00 	cp.b	r9,r8
80023418:	ce 53       	brcs	800233e2 <adcifa_get_values_from_sequencer+0x50>
8002341a:	c2 28       	rjmp	8002345e <adcifa_get_values_from_sequencer+0xcc>
8002341c:	30 08       	mov	r8,0
8002341e:	ef 68 ff ff 	st.b	r7[-1],r8
80023422:	c1 68       	rjmp	8002344e <adcifa_get_values_from_sequencer+0xbc>
80023424:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023428:	a1 78       	lsl	r8,0x1
8002342a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002342e:	10 09       	add	r9,r8
80023430:	fc 78 24 00 	mov	r8,-187392
80023434:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023438:	2f 8a       	sub	r10,-8
8002343a:	2d fa       	sub	r10,-33
8002343c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80023440:	5c 88       	casts.h	r8
80023442:	b2 08       	st.h	r9[0x0],r8
80023444:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023448:	2f f8       	sub	r8,-1
8002344a:	ef 68 ff ff 	st.b	r7[-1],r8
8002344e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023452:	11 88       	ld.ub	r8,r8[0x0]
80023454:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023458:	f0 09 18 00 	cp.b	r9,r8
8002345c:	ce 43       	brcs	80023424 <adcifa_get_values_from_sequencer+0x92>
8002345e:	30 28       	mov	r8,2
80023460:	10 9c       	mov	r12,r8
80023462:	2f bd       	sub	sp,-20
80023464:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023468:	80 02       	ld.sh	r2,r0[0x0]
8002346a:	32 20       	mov	r0,34

8002346c <adcifa_start_itimer>:
8002346c:	eb cd 40 80 	pushm	r7,lr
80023470:	1a 97       	mov	r7,sp
80023472:	20 2d       	sub	sp,8
80023474:	ef 4c ff fc 	st.w	r7[-4],r12
80023478:	ef 4b ff f8 	st.w	r7[-8],r11
8002347c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023480:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023484:	f1 49 00 48 	st.w	r8[72],r9
80023488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002348c:	30 89       	mov	r9,8
8002348e:	91 09       	st.w	r8[0x0],r9
80023490:	2f ed       	sub	sp,-8
80023492:	e3 cd 80 80 	ldm	sp++,r7,pc

80023496 <adcifa_stop_itimer>:
80023496:	eb cd 40 80 	pushm	r7,lr
8002349a:	1a 97       	mov	r7,sp
8002349c:	20 1d       	sub	sp,4
8002349e:	ef 4c ff fc 	st.w	r7[-4],r12
800234a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234a6:	30 49       	mov	r9,4
800234a8:	91 09       	st.w	r8[0x0],r9
800234aa:	2f fd       	sub	sp,-4
800234ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800234b0 <adcifa_enable_interrupt>:
800234b0:	eb cd 40 80 	pushm	r7,lr
800234b4:	1a 97       	mov	r7,sp
800234b6:	20 2d       	sub	sp,8
800234b8:	ef 4c ff fc 	st.w	r7[-4],r12
800234bc:	ef 4b ff f8 	st.w	r7[-8],r11
800234c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234c8:	f1 49 00 70 	st.w	r8[112],r9
800234cc:	2f ed       	sub	sp,-8
800234ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800234d2 <adcifa_disable_interrupt>:
800234d2:	eb cd 40 80 	pushm	r7,lr
800234d6:	1a 97       	mov	r7,sp
800234d8:	20 2d       	sub	sp,8
800234da:	ef 4c ff fc 	st.w	r7[-4],r12
800234de:	ef 4b ff f8 	st.w	r7[-8],r11
800234e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234ea:	f1 49 00 74 	st.w	r8[116],r9
800234ee:	2f ed       	sub	sp,-8
800234f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800234f4 <adcifa_clear_interrupt>:
800234f4:	eb cd 40 80 	pushm	r7,lr
800234f8:	1a 97       	mov	r7,sp
800234fa:	20 2d       	sub	sp,8
800234fc:	ef 4c ff fc 	st.w	r7[-4],r12
80023500:	ef 4b ff f8 	st.w	r7[-8],r11
80023504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023508:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002350c:	91 39       	st.w	r8[0xc],r9
8002350e:	2f ed       	sub	sp,-8
80023510:	e3 cd 80 80 	ldm	sp++,r7,pc

80023514 <ast_is_busy>:
80023514:	eb cd 40 80 	pushm	r7,lr
80023518:	1a 97       	mov	r7,sp
8002351a:	20 1d       	sub	sp,4
8002351c:	ef 4c ff fc 	st.w	r7[-4],r12
80023520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023524:	70 28       	ld.w	r8,r8[0x8]
80023526:	e6 18 01 00 	andh	r8,0x100,COH
8002352a:	5f 18       	srne	r8
8002352c:	10 9c       	mov	r12,r8
8002352e:	2f fd       	sub	sp,-4
80023530:	e3 cd 80 80 	ldm	sp++,r7,pc

80023534 <ast_is_clkbusy>:
80023534:	eb cd 40 80 	pushm	r7,lr
80023538:	1a 97       	mov	r7,sp
8002353a:	20 1d       	sub	sp,4
8002353c:	ef 4c ff fc 	st.w	r7[-4],r12
80023540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023544:	70 28       	ld.w	r8,r8[0x8]
80023546:	e6 18 10 00 	andh	r8,0x1000,COH
8002354a:	5f 18       	srne	r8
8002354c:	10 9c       	mov	r12,r8
8002354e:	2f fd       	sub	sp,-4
80023550:	e3 cd 80 80 	ldm	sp++,r7,pc

80023554 <ast_init_calendar>:
80023554:	eb cd 40 c0 	pushm	r6-r7,lr
80023558:	1a 97       	mov	r7,sp
8002355a:	20 4d       	sub	sp,16
8002355c:	49 a6       	lddpc	r6,800235c4 <ast_init_calendar+0x70>
8002355e:	1e 26       	rsub	r6,pc
80023560:	ef 4c ff fc 	st.w	r7[-4],r12
80023564:	14 98       	mov	r8,r10
80023566:	ef 49 ff f0 	st.w	r7[-16],r9
8002356a:	16 99       	mov	r9,r11
8002356c:	ef 69 ff f8 	st.b	r7[-8],r9
80023570:	ef 68 ff f4 	st.b	r7[-12],r8
80023574:	ee fc ff fc 	ld.w	r12,r7[-4]
80023578:	cd ef       	rcall	80023534 <ast_is_clkbusy>
8002357a:	18 98       	mov	r8,r12
8002357c:	58 08       	cp.w	r8,0
8002357e:	cf b1       	brne	80023574 <ast_init_calendar+0x20>
80023580:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023584:	a9 68       	lsl	r8,0x8
80023586:	a1 a8       	sbr	r8,0x0
80023588:	10 99       	mov	r9,r8
8002358a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002358e:	f1 49 00 40 	st.w	r8[64],r9
80023592:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023596:	b1 68       	lsl	r8,0x10
80023598:	a3 a8       	sbr	r8,0x2
8002359a:	10 99       	mov	r9,r8
8002359c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800235a0:	91 09       	st.w	r8[0x0],r9
800235a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800235a6:	cb 7f       	rcall	80023514 <ast_is_busy>
800235a8:	18 98       	mov	r8,r12
800235aa:	58 08       	cp.w	r8,0
800235ac:	cf b1       	brne	800235a2 <ast_init_calendar+0x4e>
800235ae:	ee fb ff f0 	ld.w	r11,r7[-16]
800235b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800235b6:	f0 16 01 c6 	mcall	r6[1816]
800235ba:	30 18       	mov	r8,1
800235bc:	10 9c       	mov	r12,r8
800235be:	2f cd       	sub	sp,-16
800235c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800235c4:	80 02       	ld.sh	r2,r0[0x0]
800235c6:	33 e2       	mov	r2,62

800235c8 <ast_init_counter>:
800235c8:	eb cd 40 c0 	pushm	r6-r7,lr
800235cc:	1a 97       	mov	r7,sp
800235ce:	20 4d       	sub	sp,16
800235d0:	49 46       	lddpc	r6,80023620 <ast_init_counter+0x58>
800235d2:	1e 26       	rsub	r6,pc
800235d4:	ef 4c ff fc 	st.w	r7[-4],r12
800235d8:	14 98       	mov	r8,r10
800235da:	ef 49 ff f0 	st.w	r7[-16],r9
800235de:	16 99       	mov	r9,r11
800235e0:	ef 69 ff f8 	st.b	r7[-8],r9
800235e4:	ef 68 ff f4 	st.b	r7[-12],r8
800235e8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800235ec:	a9 68       	lsl	r8,0x8
800235ee:	a1 a8       	sbr	r8,0x0
800235f0:	10 99       	mov	r9,r8
800235f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800235f6:	f1 49 00 40 	st.w	r8[64],r9
800235fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800235fe:	b1 68       	lsl	r8,0x10
80023600:	10 99       	mov	r9,r8
80023602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023606:	91 09       	st.w	r8[0x0],r9
80023608:	ee fb ff f0 	ld.w	r11,r7[-16]
8002360c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023610:	f0 16 02 19 	mcall	r6[2148]
80023614:	30 18       	mov	r8,1
80023616:	10 9c       	mov	r12,r8
80023618:	2f cd       	sub	sp,-16
8002361a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002361e:	00 00       	add	r0,r0
80023620:	80 02       	ld.sh	r2,r0[0x0]
80023622:	34 56       	mov	r6,69

80023624 <ast_enable>:
80023624:	eb cd 40 c0 	pushm	r6-r7,lr
80023628:	1a 97       	mov	r7,sp
8002362a:	20 1d       	sub	sp,4
8002362c:	48 e6       	lddpc	r6,80023664 <ast_enable+0x40>
8002362e:	1e 26       	rsub	r6,pc
80023630:	ef 4c ff fc 	st.w	r7[-4],r12
80023634:	ee fc ff fc 	ld.w	r12,r7[-4]
80023638:	c6 ef       	rcall	80023514 <ast_is_busy>
8002363a:	18 98       	mov	r8,r12
8002363c:	58 08       	cp.w	r8,0
8002363e:	cf b1       	brne	80023634 <ast_enable+0x10>
80023640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023644:	70 08       	ld.w	r8,r8[0x0]
80023646:	10 99       	mov	r9,r8
80023648:	a1 a9       	sbr	r9,0x0
8002364a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002364e:	91 09       	st.w	r8[0x0],r9
80023650:	ee fc ff fc 	ld.w	r12,r7[-4]
80023654:	c6 0f       	rcall	80023514 <ast_is_busy>
80023656:	18 98       	mov	r8,r12
80023658:	58 08       	cp.w	r8,0
8002365a:	cf b1       	brne	80023650 <ast_enable+0x2c>
8002365c:	2f fd       	sub	sp,-4
8002365e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023662:	00 00       	add	r0,r0
80023664:	80 02       	ld.sh	r2,r0[0x0]
80023666:	34 b2       	mov	r2,75

80023668 <ast_set_calendar_value>:
80023668:	eb cd 40 c0 	pushm	r6-r7,lr
8002366c:	1a 97       	mov	r7,sp
8002366e:	20 2d       	sub	sp,8
80023670:	48 e6       	lddpc	r6,800236a8 <ast_set_calendar_value+0x40>
80023672:	1e 26       	rsub	r6,pc
80023674:	ef 4c ff fc 	st.w	r7[-4],r12
80023678:	ef 4b ff f8 	st.w	r7[-8],r11
8002367c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023680:	c4 af       	rcall	80023514 <ast_is_busy>
80023682:	18 98       	mov	r8,r12
80023684:	58 08       	cp.w	r8,0
80023686:	cf b1       	brne	8002367c <ast_set_calendar_value+0x14>
80023688:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002368c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023690:	f1 49 00 54 	st.w	r8[84],r9
80023694:	ee fc ff fc 	ld.w	r12,r7[-4]
80023698:	c3 ef       	rcall	80023514 <ast_is_busy>
8002369a:	18 98       	mov	r8,r12
8002369c:	58 08       	cp.w	r8,0
8002369e:	cf b1       	brne	80023694 <ast_set_calendar_value+0x2c>
800236a0:	2f ed       	sub	sp,-8
800236a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800236a6:	00 00       	add	r0,r0
800236a8:	80 02       	ld.sh	r2,r0[0x0]
800236aa:	34 f6       	mov	r6,79

800236ac <ast_set_counter_value>:
800236ac:	eb cd 40 c0 	pushm	r6-r7,lr
800236b0:	1a 97       	mov	r7,sp
800236b2:	20 2d       	sub	sp,8
800236b4:	48 d6       	lddpc	r6,800236e8 <ast_set_counter_value+0x3c>
800236b6:	1e 26       	rsub	r6,pc
800236b8:	ef 4c ff fc 	st.w	r7[-4],r12
800236bc:	ef 4b ff f8 	st.w	r7[-8],r11
800236c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800236c4:	c2 8f       	rcall	80023514 <ast_is_busy>
800236c6:	18 98       	mov	r8,r12
800236c8:	58 08       	cp.w	r8,0
800236ca:	cf b1       	brne	800236c0 <ast_set_counter_value+0x14>
800236cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800236d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800236d4:	91 19       	st.w	r8[0x4],r9
800236d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800236da:	c1 df       	rcall	80023514 <ast_is_busy>
800236dc:	18 98       	mov	r8,r12
800236de:	58 08       	cp.w	r8,0
800236e0:	cf b1       	brne	800236d6 <ast_set_counter_value+0x2a>
800236e2:	2f ed       	sub	sp,-8
800236e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800236e8:	80 02       	ld.sh	r2,r0[0x0]
800236ea:	35 3a       	mov	r10,83

800236ec <ast_get_calendar_value>:
800236ec:	eb cd 40 80 	pushm	r7,lr
800236f0:	1a 97       	mov	r7,sp
800236f2:	20 2d       	sub	sp,8
800236f4:	ef 4c ff f8 	st.w	r7[-8],r12
800236f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236fc:	71 58       	ld.w	r8,r8[0x54]
800236fe:	ef 48 ff fc 	st.w	r7[-4],r8
80023702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023706:	10 9c       	mov	r12,r8
80023708:	2f ed       	sub	sp,-8
8002370a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002370e <ast_get_counter_value>:
8002370e:	eb cd 40 80 	pushm	r7,lr
80023712:	1a 97       	mov	r7,sp
80023714:	20 1d       	sub	sp,4
80023716:	ef 4c ff fc 	st.w	r7[-4],r12
8002371a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002371e:	70 18       	ld.w	r8,r8[0x4]
80023720:	10 9c       	mov	r12,r8
80023722:	2f fd       	sub	sp,-4
80023724:	e3 cd 80 80 	ldm	sp++,r7,pc

80023728 <ast_set_alarm0_value>:
80023728:	eb cd 40 80 	pushm	r7,lr
8002372c:	1a 97       	mov	r7,sp
8002372e:	20 2d       	sub	sp,8
80023730:	ef 4c ff fc 	st.w	r7[-4],r12
80023734:	ef 4b ff f8 	st.w	r7[-8],r11
80023738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002373c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023740:	91 89       	st.w	r8[0x20],r9
80023742:	2f ed       	sub	sp,-8
80023744:	e3 cd 80 80 	ldm	sp++,r7,pc

80023748 <ast_set_alarm1_value>:
80023748:	eb cd 40 80 	pushm	r7,lr
8002374c:	1a 97       	mov	r7,sp
8002374e:	20 2d       	sub	sp,8
80023750:	ef 4c ff fc 	st.w	r7[-4],r12
80023754:	ef 4b ff f8 	st.w	r7[-8],r11
80023758:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002375c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023760:	91 99       	st.w	r8[0x24],r9
80023762:	2f ed       	sub	sp,-8
80023764:	e3 cd 80 80 	ldm	sp++,r7,pc

80023768 <ast_enable_alarm0>:
80023768:	eb cd 40 c0 	pushm	r6-r7,lr
8002376c:	1a 97       	mov	r7,sp
8002376e:	20 1d       	sub	sp,4
80023770:	48 e6       	lddpc	r6,800237a8 <ast_enable_alarm0+0x40>
80023772:	1e 26       	rsub	r6,pc
80023774:	ef 4c ff fc 	st.w	r7[-4],r12
80023778:	ee fc ff fc 	ld.w	r12,r7[-4]
8002377c:	cc ce       	rcall	80023514 <ast_is_busy>
8002377e:	18 98       	mov	r8,r12
80023780:	58 08       	cp.w	r8,0
80023782:	cf b1       	brne	80023778 <ast_enable_alarm0+0x10>
80023784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023788:	71 28       	ld.w	r8,r8[0x48]
8002378a:	10 99       	mov	r9,r8
8002378c:	a9 a9       	sbr	r9,0x8
8002378e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023792:	f1 49 00 48 	st.w	r8[72],r9
80023796:	ee fc ff fc 	ld.w	r12,r7[-4]
8002379a:	cb de       	rcall	80023514 <ast_is_busy>
8002379c:	18 98       	mov	r8,r12
8002379e:	58 08       	cp.w	r8,0
800237a0:	cf b1       	brne	80023796 <ast_enable_alarm0+0x2e>
800237a2:	2f fd       	sub	sp,-4
800237a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800237a8:	80 02       	ld.sh	r2,r0[0x0]
800237aa:	35 f6       	mov	r6,95

800237ac <ast_disable_alarm0>:
800237ac:	eb cd 40 c0 	pushm	r6-r7,lr
800237b0:	1a 97       	mov	r7,sp
800237b2:	20 1d       	sub	sp,4
800237b4:	48 e6       	lddpc	r6,800237ec <ast_disable_alarm0+0x40>
800237b6:	1e 26       	rsub	r6,pc
800237b8:	ef 4c ff fc 	st.w	r7[-4],r12
800237bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800237c0:	ca ae       	rcall	80023514 <ast_is_busy>
800237c2:	18 98       	mov	r8,r12
800237c4:	58 08       	cp.w	r8,0
800237c6:	cf b1       	brne	800237bc <ast_disable_alarm0+0x10>
800237c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237cc:	71 38       	ld.w	r8,r8[0x4c]
800237ce:	10 99       	mov	r9,r8
800237d0:	a9 a9       	sbr	r9,0x8
800237d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237d6:	f1 49 00 4c 	st.w	r8[76],r9
800237da:	ee fc ff fc 	ld.w	r12,r7[-4]
800237de:	c9 be       	rcall	80023514 <ast_is_busy>
800237e0:	18 98       	mov	r8,r12
800237e2:	58 08       	cp.w	r8,0
800237e4:	cf b1       	brne	800237da <ast_disable_alarm0+0x2e>
800237e6:	2f fd       	sub	sp,-4
800237e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800237ec:	80 02       	ld.sh	r2,r0[0x0]
800237ee:	36 3a       	mov	r10,99

800237f0 <ast_enable_alarm1>:
800237f0:	eb cd 40 c0 	pushm	r6-r7,lr
800237f4:	1a 97       	mov	r7,sp
800237f6:	20 1d       	sub	sp,4
800237f8:	48 e6       	lddpc	r6,80023830 <ast_enable_alarm1+0x40>
800237fa:	1e 26       	rsub	r6,pc
800237fc:	ef 4c ff fc 	st.w	r7[-4],r12
80023800:	ee fc ff fc 	ld.w	r12,r7[-4]
80023804:	c8 8e       	rcall	80023514 <ast_is_busy>
80023806:	18 98       	mov	r8,r12
80023808:	58 08       	cp.w	r8,0
8002380a:	cf b1       	brne	80023800 <ast_enable_alarm1+0x10>
8002380c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023810:	71 28       	ld.w	r8,r8[0x48]
80023812:	10 99       	mov	r9,r8
80023814:	a9 b9       	sbr	r9,0x9
80023816:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002381a:	f1 49 00 48 	st.w	r8[72],r9
8002381e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023822:	c7 9e       	rcall	80023514 <ast_is_busy>
80023824:	18 98       	mov	r8,r12
80023826:	58 08       	cp.w	r8,0
80023828:	cf b1       	brne	8002381e <ast_enable_alarm1+0x2e>
8002382a:	2f fd       	sub	sp,-4
8002382c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023830:	80 02       	ld.sh	r2,r0[0x0]
80023832:	36 7e       	mov	lr,103

80023834 <ast_disable_alarm1>:
80023834:	eb cd 40 c0 	pushm	r6-r7,lr
80023838:	1a 97       	mov	r7,sp
8002383a:	20 1d       	sub	sp,4
8002383c:	48 e6       	lddpc	r6,80023874 <ast_disable_alarm1+0x40>
8002383e:	1e 26       	rsub	r6,pc
80023840:	ef 4c ff fc 	st.w	r7[-4],r12
80023844:	ee fc ff fc 	ld.w	r12,r7[-4]
80023848:	c6 6e       	rcall	80023514 <ast_is_busy>
8002384a:	18 98       	mov	r8,r12
8002384c:	58 08       	cp.w	r8,0
8002384e:	cf b1       	brne	80023844 <ast_disable_alarm1+0x10>
80023850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023854:	71 38       	ld.w	r8,r8[0x4c]
80023856:	10 99       	mov	r9,r8
80023858:	a9 b9       	sbr	r9,0x9
8002385a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002385e:	f1 49 00 4c 	st.w	r8[76],r9
80023862:	ee fc ff fc 	ld.w	r12,r7[-4]
80023866:	c5 7e       	rcall	80023514 <ast_is_busy>
80023868:	18 98       	mov	r8,r12
8002386a:	58 08       	cp.w	r8,0
8002386c:	cf b1       	brne	80023862 <ast_disable_alarm1+0x2e>
8002386e:	2f fd       	sub	sp,-4
80023870:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023874:	80 02       	ld.sh	r2,r0[0x0]
80023876:	36 c2       	mov	r2,108

80023878 <ast_set_periodic0_value>:
80023878:	eb cd 40 80 	pushm	r7,lr
8002387c:	1a 97       	mov	r7,sp
8002387e:	20 2d       	sub	sp,8
80023880:	ef 4c ff fc 	st.w	r7[-4],r12
80023884:	ef 4b ff f8 	st.w	r7[-8],r11
80023888:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002388c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023890:	91 c9       	st.w	r8[0x30],r9
80023892:	2f ed       	sub	sp,-8
80023894:	e3 cd 80 80 	ldm	sp++,r7,pc

80023898 <ast_set_periodic1_value>:
80023898:	eb cd 40 80 	pushm	r7,lr
8002389c:	1a 97       	mov	r7,sp
8002389e:	20 2d       	sub	sp,8
800238a0:	ef 4c ff fc 	st.w	r7[-4],r12
800238a4:	ef 4b ff f8 	st.w	r7[-8],r11
800238a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800238b0:	91 d9       	st.w	r8[0x34],r9
800238b2:	2f ed       	sub	sp,-8
800238b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800238b8 <ast_enable_periodic0>:
800238b8:	eb cd 40 c0 	pushm	r6-r7,lr
800238bc:	1a 97       	mov	r7,sp
800238be:	20 1d       	sub	sp,4
800238c0:	48 e6       	lddpc	r6,800238f8 <ast_enable_periodic0+0x40>
800238c2:	1e 26       	rsub	r6,pc
800238c4:	ef 4c ff fc 	st.w	r7[-4],r12
800238c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800238cc:	c2 4e       	rcall	80023514 <ast_is_busy>
800238ce:	18 98       	mov	r8,r12
800238d0:	58 08       	cp.w	r8,0
800238d2:	cf b1       	brne	800238c8 <ast_enable_periodic0+0x10>
800238d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238d8:	71 28       	ld.w	r8,r8[0x48]
800238da:	10 99       	mov	r9,r8
800238dc:	b1 a9       	sbr	r9,0x10
800238de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238e2:	f1 49 00 48 	st.w	r8[72],r9
800238e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800238ea:	c1 5e       	rcall	80023514 <ast_is_busy>
800238ec:	18 98       	mov	r8,r12
800238ee:	58 08       	cp.w	r8,0
800238f0:	cf b1       	brne	800238e6 <ast_enable_periodic0+0x2e>
800238f2:	2f fd       	sub	sp,-4
800238f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800238f8:	80 02       	ld.sh	r2,r0[0x0]
800238fa:	37 46       	mov	r6,116

800238fc <ast_disable_periodic0>:
800238fc:	eb cd 40 c0 	pushm	r6-r7,lr
80023900:	1a 97       	mov	r7,sp
80023902:	20 1d       	sub	sp,4
80023904:	48 f6       	lddpc	r6,80023940 <ast_disable_periodic0+0x44>
80023906:	1e 26       	rsub	r6,pc
80023908:	ef 4c ff fc 	st.w	r7[-4],r12
8002390c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023910:	c0 2e       	rcall	80023514 <ast_is_busy>
80023912:	18 98       	mov	r8,r12
80023914:	58 08       	cp.w	r8,0
80023916:	cf b1       	brne	8002390c <ast_disable_periodic0+0x10>
80023918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002391c:	71 38       	ld.w	r8,r8[0x4c]
8002391e:	10 99       	mov	r9,r8
80023920:	b1 a9       	sbr	r9,0x10
80023922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023926:	f1 49 00 4c 	st.w	r8[76],r9
8002392a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002392e:	fe b0 fd f3 	rcall	80023514 <ast_is_busy>
80023932:	18 98       	mov	r8,r12
80023934:	58 08       	cp.w	r8,0
80023936:	cf a1       	brne	8002392a <ast_disable_periodic0+0x2e>
80023938:	2f fd       	sub	sp,-4
8002393a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002393e:	00 00       	add	r0,r0
80023940:	80 02       	ld.sh	r2,r0[0x0]
80023942:	37 8a       	mov	r10,120

80023944 <ast_enable_periodic1>:
80023944:	eb cd 40 c0 	pushm	r6-r7,lr
80023948:	1a 97       	mov	r7,sp
8002394a:	20 1d       	sub	sp,4
8002394c:	48 f6       	lddpc	r6,80023988 <ast_enable_periodic1+0x44>
8002394e:	1e 26       	rsub	r6,pc
80023950:	ef 4c ff fc 	st.w	r7[-4],r12
80023954:	ee fc ff fc 	ld.w	r12,r7[-4]
80023958:	fe b0 fd de 	rcall	80023514 <ast_is_busy>
8002395c:	18 98       	mov	r8,r12
8002395e:	58 08       	cp.w	r8,0
80023960:	cf a1       	brne	80023954 <ast_enable_periodic1+0x10>
80023962:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023966:	71 28       	ld.w	r8,r8[0x48]
80023968:	10 99       	mov	r9,r8
8002396a:	b1 b9       	sbr	r9,0x11
8002396c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023970:	f1 49 00 48 	st.w	r8[72],r9
80023974:	ee fc ff fc 	ld.w	r12,r7[-4]
80023978:	fe b0 fd ce 	rcall	80023514 <ast_is_busy>
8002397c:	18 98       	mov	r8,r12
8002397e:	58 08       	cp.w	r8,0
80023980:	cf a1       	brne	80023974 <ast_enable_periodic1+0x30>
80023982:	2f fd       	sub	sp,-4
80023984:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023988:	80 02       	ld.sh	r2,r0[0x0]
8002398a:	37 d2       	mov	r2,125

8002398c <ast_disable_periodic1>:
8002398c:	eb cd 40 c0 	pushm	r6-r7,lr
80023990:	1a 97       	mov	r7,sp
80023992:	20 1d       	sub	sp,4
80023994:	48 f6       	lddpc	r6,800239d0 <ast_disable_periodic1+0x44>
80023996:	1e 26       	rsub	r6,pc
80023998:	ef 4c ff fc 	st.w	r7[-4],r12
8002399c:	ee fc ff fc 	ld.w	r12,r7[-4]
800239a0:	fe b0 fd ba 	rcall	80023514 <ast_is_busy>
800239a4:	18 98       	mov	r8,r12
800239a6:	58 08       	cp.w	r8,0
800239a8:	cf a1       	brne	8002399c <ast_disable_periodic1+0x10>
800239aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239ae:	71 38       	ld.w	r8,r8[0x4c]
800239b0:	10 99       	mov	r9,r8
800239b2:	b1 a9       	sbr	r9,0x10
800239b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800239b8:	f1 49 00 4c 	st.w	r8[76],r9
800239bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800239c0:	fe b0 fd aa 	rcall	80023514 <ast_is_busy>
800239c4:	18 98       	mov	r8,r12
800239c6:	58 08       	cp.w	r8,0
800239c8:	cf a1       	brne	800239bc <ast_disable_periodic1+0x30>
800239ca:	2f fd       	sub	sp,-4
800239cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800239d0:	80 02       	ld.sh	r2,r0[0x0]
800239d2:	38 1a       	mov	r10,-127

800239d4 <dacifb_us_delay>:
800239d4:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800239d8:	1a 97       	mov	r7,sp
800239da:	20 cd       	sub	sp,48
800239dc:	4d 46       	lddpc	r6,80023b2c <dacifb_us_delay+0x158>
800239de:	1e 26       	rsub	r6,pc
800239e0:	ef 4c ff d4 	st.w	r7[-44],r12
800239e4:	ef 4b ff d0 	st.w	r7[-48],r11
800239e8:	ee fa ff d0 	ld.w	r10,r7[-48]
800239ec:	ee fb ff d4 	ld.w	r11,r7[-44]
800239f0:	ef 4b ff e8 	st.w	r7[-24],r11
800239f4:	ef 4a ff e4 	st.w	r7[-28],r10
800239f8:	ee f2 ff e8 	ld.w	r2,r7[-24]
800239fc:	30 03       	mov	r3,0
800239fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023a02:	30 09       	mov	r9,0
80023a04:	e6 08 02 4a 	mul	r10,r3,r8
80023a08:	f2 02 02 4b 	mul	r11,r9,r2
80023a0c:	16 0a       	add	r10,r11
80023a0e:	e4 08 06 48 	mulu.d	r8,r2,r8
80023a12:	12 0a       	add	r10,r9
80023a14:	14 99       	mov	r9,r10
80023a16:	ee 7a 42 3f 	mov	r10,999999
80023a1a:	30 0b       	mov	r11,0
80023a1c:	f0 0a 00 0a 	add	r10,r8,r10
80023a20:	f2 0b 00 4b 	adc	r11,r9,r11
80023a24:	ee 78 42 40 	mov	r8,1000000
80023a28:	30 09       	mov	r9,0
80023a2a:	f0 16 01 03 	mcall	r6[1036]
80023a2e:	14 98       	mov	r8,r10
80023a30:	16 99       	mov	r9,r11
80023a32:	ef 48 ff f0 	st.w	r7[-16],r8
80023a36:	ee c8 00 28 	sub	r8,r7,40
80023a3a:	ef 48 ff ec 	st.w	r7[-20],r8
80023a3e:	e1 b8 00 42 	mfsr	r8,0x108
80023a42:	10 99       	mov	r9,r8
80023a44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a48:	91 09       	st.w	r8[0x0],r9
80023a4a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a4e:	70 09       	ld.w	r9,r8[0x0]
80023a50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023a54:	10 09       	add	r9,r8
80023a56:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a5a:	91 19       	st.w	r8[0x4],r9
80023a5c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023a60:	30 08       	mov	r8,0
80023a62:	f3 68 00 08 	st.b	r9[8],r8
80023a66:	ee c8 00 28 	sub	r8,r7,40
80023a6a:	ef 48 ff f4 	st.w	r7[-12],r8
80023a6e:	e1 b8 00 42 	mfsr	r8,0x108
80023a72:	ef 48 ff f8 	st.w	r7[-8],r8
80023a76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a7a:	f1 39 00 08 	ld.ub	r9,r8[8]
80023a7e:	30 28       	mov	r8,2
80023a80:	f0 09 18 00 	cp.b	r9,r8
80023a84:	c0 31       	brne	80023a8a <dacifb_us_delay+0xb6>
80023a86:	30 08       	mov	r8,0
80023a88:	c4 38       	rjmp	80023b0e <dacifb_us_delay+0x13a>
80023a8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a8e:	f1 39 00 08 	ld.ub	r9,r8[8]
80023a92:	30 18       	mov	r8,1
80023a94:	f0 09 18 00 	cp.b	r9,r8
80023a98:	c0 31       	brne	80023a9e <dacifb_us_delay+0xca>
80023a9a:	30 18       	mov	r8,1
80023a9c:	c3 98       	rjmp	80023b0e <dacifb_us_delay+0x13a>
80023a9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023aa2:	70 09       	ld.w	r9,r8[0x0]
80023aa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023aa8:	70 18       	ld.w	r8,r8[0x4]
80023aaa:	10 39       	cp.w	r9,r8
80023aac:	e0 88 00 1a 	brls	80023ae0 <dacifb_us_delay+0x10c>
80023ab0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ab4:	70 08       	ld.w	r8,r8[0x0]
80023ab6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023aba:	10 39       	cp.w	r9,r8
80023abc:	c1 02       	brcc	80023adc <dacifb_us_delay+0x108>
80023abe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ac2:	70 18       	ld.w	r8,r8[0x4]
80023ac4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023ac8:	10 39       	cp.w	r9,r8
80023aca:	e0 88 00 09 	brls	80023adc <dacifb_us_delay+0x108>
80023ace:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023ad2:	30 18       	mov	r8,1
80023ad4:	f3 68 00 08 	st.b	r9[8],r8
80023ad8:	30 18       	mov	r8,1
80023ada:	c1 a8       	rjmp	80023b0e <dacifb_us_delay+0x13a>
80023adc:	30 08       	mov	r8,0
80023ade:	c1 88       	rjmp	80023b0e <dacifb_us_delay+0x13a>
80023ae0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ae4:	70 08       	ld.w	r8,r8[0x0]
80023ae6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023aea:	10 39       	cp.w	r9,r8
80023aec:	c0 93       	brcs	80023afe <dacifb_us_delay+0x12a>
80023aee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023af2:	70 18       	ld.w	r8,r8[0x4]
80023af4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023af8:	10 39       	cp.w	r9,r8
80023afa:	e0 88 00 09 	brls	80023b0c <dacifb_us_delay+0x138>
80023afe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023b02:	30 18       	mov	r8,1
80023b04:	f3 68 00 08 	st.b	r9[8],r8
80023b08:	30 18       	mov	r8,1
80023b0a:	c0 28       	rjmp	80023b0e <dacifb_us_delay+0x13a>
80023b0c:	30 08       	mov	r8,0
80023b0e:	58 08       	cp.w	r8,0
80023b10:	ca b0       	breq	80023a66 <dacifb_us_delay+0x92>
80023b12:	ee c8 00 28 	sub	r8,r7,40
80023b16:	ef 48 ff fc 	st.w	r7[-4],r8
80023b1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023b1e:	30 28       	mov	r8,2
80023b20:	f3 68 00 08 	st.b	r9[8],r8
80023b24:	2f 4d       	sub	sp,-48
80023b26:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023b2a:	00 00       	add	r0,r0
80023b2c:	80 02       	ld.sh	r2,r0[0x0]
80023b2e:	38 62       	mov	r2,-122

80023b30 <dacifb_get_calibration_data>:
80023b30:	eb cd 40 80 	pushm	r7,lr
80023b34:	1a 97       	mov	r7,sp
80023b36:	20 5d       	sub	sp,20
80023b38:	ef 4c ff f4 	st.w	r7[-12],r12
80023b3c:	ef 4b ff f0 	st.w	r7[-16],r11
80023b40:	14 98       	mov	r8,r10
80023b42:	ef 68 ff ec 	st.b	r7[-20],r8
80023b46:	e0 68 02 0c 	mov	r8,524
80023b4a:	ea 18 80 80 	orh	r8,0x8080
80023b4e:	ef 48 ff f8 	st.w	r7[-8],r8
80023b52:	e0 68 02 14 	mov	r8,532
80023b56:	ea 18 80 80 	orh	r8,0x8080
80023b5a:	ef 48 ff fc 	st.w	r7[-4],r8
80023b5e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80023b62:	30 08       	mov	r8,0
80023b64:	f0 09 18 00 	cp.b	r9,r8
80023b68:	c1 71       	brne	80023b96 <dacifb_get_calibration_data+0x66>
80023b6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b6e:	70 08       	ld.w	r8,r8[0x0]
80023b70:	5c 88       	casts.h	r8
80023b72:	5c 88       	casts.h	r8
80023b74:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023b78:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023b7c:	b2 28       	st.h	r9[0x4],r8
80023b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b82:	70 08       	ld.w	r8,r8[0x0]
80023b84:	b1 88       	lsr	r8,0x10
80023b86:	5c 88       	casts.h	r8
80023b88:	5c 88       	casts.h	r8
80023b8a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023b92:	b2 18       	st.h	r9[0x2],r8
80023b94:	c1 68       	rjmp	80023bc0 <dacifb_get_calibration_data+0x90>
80023b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b9a:	70 08       	ld.w	r8,r8[0x0]
80023b9c:	5c 88       	casts.h	r8
80023b9e:	5c 88       	casts.h	r8
80023ba0:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023ba4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023ba8:	b2 28       	st.h	r9[0x4],r8
80023baa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023bae:	70 08       	ld.w	r8,r8[0x0]
80023bb0:	b1 88       	lsr	r8,0x10
80023bb2:	5c 88       	casts.h	r8
80023bb4:	5c 88       	casts.h	r8
80023bb6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023bba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023bbe:	b2 18       	st.h	r9[0x2],r8
80023bc0:	2f bd       	sub	sp,-20
80023bc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80023bc6 <dacifb_configure>:
80023bc6:	eb cd 40 80 	pushm	r7,lr
80023bca:	1a 97       	mov	r7,sp
80023bcc:	20 5d       	sub	sp,20
80023bce:	ef 4c ff f4 	st.w	r7[-12],r12
80023bd2:	ef 4b ff f0 	st.w	r7[-16],r11
80023bd6:	ef 4a ff ec 	st.w	r7[-20],r10
80023bda:	30 08       	mov	r8,0
80023bdc:	ef 48 ff f8 	st.w	r7[-8],r8
80023be0:	30 08       	mov	r8,0
80023be2:	ef 48 ff fc 	st.w	r7[-4],r8
80023be6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bea:	90 28       	ld.sh	r8,r8[0x4]
80023bec:	5c 78       	castu.h	r8
80023bee:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80023bf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bf6:	90 18       	ld.sh	r8,r8[0x2]
80023bf8:	5c 78       	castu.h	r8
80023bfa:	b1 68       	lsl	r8,0x10
80023bfc:	e6 18 01 ff 	andh	r8,0x1ff,COH
80023c00:	f3 e8 10 08 	or	r8,r9,r8
80023c04:	10 99       	mov	r9,r8
80023c06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c0a:	91 d9       	st.w	r8[0x34],r9
80023c0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c10:	70 29       	ld.w	r9,r8[0x8]
80023c12:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023c16:	f0 09 0d 08 	divu	r8,r8,r9
80023c1a:	f0 08 12 00 	clz	r8,r8
80023c1e:	f0 08 11 1f 	rsub	r8,r8,31
80023c22:	ef 48 ff f8 	st.w	r7[-8],r8
80023c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c2a:	58 88       	cp.w	r8,8
80023c2c:	e0 88 00 04 	brls	80023c34 <dacifb_configure+0x6e>
80023c30:	30 08       	mov	r8,0
80023c32:	c6 d8       	rjmp	80023d0c <dacifb_configure+0x146>
80023c34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c38:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023c3c:	f2 08 0a 49 	lsr	r9,r9,r8
80023c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c44:	91 29       	st.w	r8[0x8],r9
80023c46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c4a:	70 29       	ld.w	r9,r8[0x8]
80023c4c:	e0 68 de 83 	mov	r8,56963
80023c50:	ea 18 43 1b 	orh	r8,0x431b
80023c54:	f2 08 06 48 	mulu.d	r8,r9,r8
80023c58:	f2 08 16 11 	lsr	r8,r9,0x11
80023c5c:	ef 48 ff fc 	st.w	r7[-4],r8
80023c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c64:	e0 48 00 80 	cp.w	r8,128
80023c68:	e0 88 00 04 	brls	80023c70 <dacifb_configure+0xaa>
80023c6c:	30 08       	mov	r8,0
80023c6e:	c4 f8       	rjmp	80023d0c <dacifb_configure+0x146>
80023c70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c74:	70 39       	ld.w	r9,r8[0xc]
80023c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c7a:	b9 68       	lsl	r8,0x18
80023c7c:	10 9a       	mov	r10,r8
80023c7e:	e6 1a 07 00 	andh	r10,0x700,COH
80023c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c86:	b1 68       	lsl	r8,0x10
80023c88:	e6 18 00 7f 	andh	r8,0x7f,COH
80023c8c:	f5 e8 10 08 	or	r8,r10,r8
80023c90:	10 49       	or	r9,r8
80023c92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c96:	91 39       	st.w	r8[0xc],r9
80023c98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c9c:	70 19       	ld.w	r9,r8[0x4]
80023c9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ca2:	11 98       	ld.ub	r8,r8[0x1]
80023ca4:	b9 68       	lsl	r8,0x18
80023ca6:	e6 18 03 00 	andh	r8,0x300,COH
80023caa:	10 49       	or	r9,r8
80023cac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cb0:	91 19       	st.w	r8[0x4],r9
80023cb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cb6:	70 19       	ld.w	r9,r8[0x4]
80023cb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023cbc:	11 88       	ld.ub	r8,r8[0x0]
80023cbe:	a9 68       	lsl	r8,0x8
80023cc0:	e2 18 01 00 	andl	r8,0x100,COH
80023cc4:	10 49       	or	r9,r8
80023cc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cca:	91 19       	st.w	r8[0x4],r9
80023ccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cd0:	70 19       	ld.w	r9,r8[0x4]
80023cd2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023cd6:	11 f8       	ld.ub	r8,r8[0x7]
80023cd8:	a1 78       	lsl	r8,0x1
80023cda:	e2 18 00 02 	andl	r8,0x2,COH
80023cde:	10 49       	or	r9,r8
80023ce0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ce4:	91 19       	st.w	r8[0x4],r9
80023ce6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cea:	70 19       	ld.w	r9,r8[0x4]
80023cec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023cf0:	11 e8       	ld.ub	r8,r8[0x6]
80023cf2:	10 49       	or	r9,r8
80023cf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cf8:	91 19       	st.w	r8[0x4],r9
80023cfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cfe:	70 08       	ld.w	r8,r8[0x0]
80023d00:	10 99       	mov	r9,r8
80023d02:	a1 a9       	sbr	r9,0x0
80023d04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d08:	91 09       	st.w	r8[0x0],r9
80023d0a:	30 18       	mov	r8,1
80023d0c:	10 9c       	mov	r12,r8
80023d0e:	2f bd       	sub	sp,-20
80023d10:	e3 cd 80 80 	ldm	sp++,r7,pc

80023d14 <dacifb_configure_channel>:
80023d14:	eb cd 40 80 	pushm	r7,lr
80023d18:	1a 97       	mov	r7,sp
80023d1a:	20 7d       	sub	sp,28
80023d1c:	ef 4c ff f0 	st.w	r7[-16],r12
80023d20:	16 98       	mov	r8,r11
80023d22:	ef 4a ff e8 	st.w	r7[-24],r10
80023d26:	ef 49 ff e4 	st.w	r7[-28],r9
80023d2a:	ef 68 ff ec 	st.b	r7[-20],r8
80023d2e:	30 08       	mov	r8,0
80023d30:	ef 48 ff f4 	st.w	r7[-12],r8
80023d34:	30 08       	mov	r8,0
80023d36:	ef 48 ff f8 	st.w	r7[-8],r8
80023d3a:	30 08       	mov	r8,0
80023d3c:	ef 48 ff fc 	st.w	r7[-4],r8
80023d40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d44:	11 88       	ld.ub	r8,r8[0x0]
80023d46:	58 08       	cp.w	r8,0
80023d48:	c2 40       	breq	80023d90 <dacifb_configure_channel+0x7c>
80023d4a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023d4e:	58 28       	cp.w	r8,2
80023d50:	c0 e0       	breq	80023d6c <dacifb_configure_channel+0x58>
80023d52:	58 38       	cp.w	r8,3
80023d54:	c1 50       	breq	80023d7e <dacifb_configure_channel+0x6a>
80023d56:	58 18       	cp.w	r8,1
80023d58:	c1 c1       	brne	80023d90 <dacifb_configure_channel+0x7c>
80023d5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d5e:	70 08       	ld.w	r8,r8[0x0]
80023d60:	10 99       	mov	r9,r8
80023d62:	bb a9       	sbr	r9,0x1a
80023d64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d68:	91 09       	st.w	r8[0x0],r9
80023d6a:	c1 38       	rjmp	80023d90 <dacifb_configure_channel+0x7c>
80023d6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d70:	70 08       	ld.w	r8,r8[0x0]
80023d72:	10 99       	mov	r9,r8
80023d74:	bb b9       	sbr	r9,0x1b
80023d76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d7a:	91 09       	st.w	r8[0x0],r9
80023d7c:	c0 a8       	rjmp	80023d90 <dacifb_configure_channel+0x7c>
80023d7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d82:	70 08       	ld.w	r8,r8[0x0]
80023d84:	10 99       	mov	r9,r8
80023d86:	ea 19 0c 00 	orh	r9,0xc00
80023d8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d8e:	91 09       	st.w	r8[0x0],r9
80023d90:	ee f9 ff e4 	ld.w	r9,r7[-28]
80023d94:	e0 68 17 59 	mov	r8,5977
80023d98:	ea 18 d1 b7 	orh	r8,0xd1b7
80023d9c:	f2 08 06 48 	mulu.d	r8,r9,r8
80023da0:	f2 08 16 0f 	lsr	r8,r9,0xf
80023da4:	f0 08 12 00 	clz	r8,r8
80023da8:	f0 08 11 1f 	rsub	r8,r8,31
80023dac:	ef 48 ff f4 	st.w	r7[-12],r8
80023db0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023db4:	58 08       	cp.w	r8,0
80023db6:	c0 60       	breq	80023dc2 <dacifb_configure_channel+0xae>
80023db8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023dbc:	20 18       	sub	r8,1
80023dbe:	ef 48 ff f4 	st.w	r7[-12],r8
80023dc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023dc6:	59 08       	cp.w	r8,16
80023dc8:	e0 8b 00 07 	brhi	80023dd6 <dacifb_configure_channel+0xc2>
80023dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023dd0:	59 08       	cp.w	r8,16
80023dd2:	e0 88 00 05 	brls	80023ddc <dacifb_configure_channel+0xc8>
80023dd6:	30 08       	mov	r8,0
80023dd8:	e0 8f 01 87 	bral	800240e6 <dacifb_configure_channel+0x3d2>
80023ddc:	ee f9 ff e4 	ld.w	r9,r7[-28]
80023de0:	e0 68 27 59 	mov	r8,10073
80023de4:	ea 18 fb a9 	orh	r8,0xfba9
80023de8:	f2 08 06 48 	mulu.d	r8,r9,r8
80023dec:	f2 08 16 0f 	lsr	r8,r9,0xf
80023df0:	f0 08 12 00 	clz	r8,r8
80023df4:	f0 08 11 1f 	rsub	r8,r8,31
80023df8:	ef 48 ff f8 	st.w	r7[-8],r8
80023dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e00:	58 08       	cp.w	r8,0
80023e02:	c0 60       	breq	80023e0e <dacifb_configure_channel+0xfa>
80023e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e08:	20 18       	sub	r8,1
80023e0a:	ef 48 ff f8 	st.w	r7[-8],r8
80023e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e12:	59 08       	cp.w	r8,16
80023e14:	e0 8b 00 07 	brhi	80023e22 <dacifb_configure_channel+0x10e>
80023e18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e1c:	59 08       	cp.w	r8,16
80023e1e:	e0 88 00 04 	brls	80023e26 <dacifb_configure_channel+0x112>
80023e22:	30 08       	mov	r8,0
80023e24:	c6 19       	rjmp	800240e6 <dacifb_configure_channel+0x3d2>
80023e26:	30 08       	mov	r8,0
80023e28:	ef 48 ff fc 	st.w	r7[-4],r8
80023e2c:	c0 68       	rjmp	80023e38 <dacifb_configure_channel+0x124>
80023e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e32:	2f f8       	sub	r8,-1
80023e34:	ef 48 ff fc 	st.w	r7[-4],r8
80023e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e3c:	f0 09 15 01 	lsl	r9,r8,0x1
80023e40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e44:	10 39       	cp.w	r9,r8
80023e46:	cf 43       	brcs	80023e2e <dacifb_configure_channel+0x11a>
80023e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e4c:	f0 09 15 01 	lsl	r9,r8,0x1
80023e50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e54:	10 39       	cp.w	r9,r8
80023e56:	e0 88 00 04 	brls	80023e5e <dacifb_configure_channel+0x14a>
80023e5a:	30 08       	mov	r8,0
80023e5c:	c4 59       	rjmp	800240e6 <dacifb_configure_channel+0x3d2>
80023e5e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023e62:	58 28       	cp.w	r8,2
80023e64:	c1 10       	breq	80023e86 <dacifb_configure_channel+0x172>
80023e66:	58 38       	cp.w	r8,3
80023e68:	c1 c0       	breq	80023ea0 <dacifb_configure_channel+0x18c>
80023e6a:	58 18       	cp.w	r8,1
80023e6c:	c2 c1       	brne	80023ec4 <dacifb_configure_channel+0x1b0>
80023e6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e72:	70 39       	ld.w	r9,r8[0xc]
80023e74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e78:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80023e7c:	10 49       	or	r9,r8
80023e7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e82:	91 39       	st.w	r8[0xc],r9
80023e84:	c2 08       	rjmp	80023ec4 <dacifb_configure_channel+0x1b0>
80023e86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e8a:	70 39       	ld.w	r9,r8[0xc]
80023e8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e90:	a9 68       	lsl	r8,0x8
80023e92:	e2 18 0f 00 	andl	r8,0xf00,COH
80023e96:	10 49       	or	r9,r8
80023e98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e9c:	91 39       	st.w	r8[0xc],r9
80023e9e:	c1 38       	rjmp	80023ec4 <dacifb_configure_channel+0x1b0>
80023ea0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ea4:	70 39       	ld.w	r9,r8[0xc]
80023ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023eaa:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80023eae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023eb2:	a9 68       	lsl	r8,0x8
80023eb4:	e2 18 0f 00 	andl	r8,0xf00,COH
80023eb8:	f5 e8 10 08 	or	r8,r10,r8
80023ebc:	10 49       	or	r9,r8
80023ebe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ec2:	91 39       	st.w	r8[0xc],r9
80023ec4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023ec8:	58 28       	cp.w	r8,2
80023eca:	c3 30       	breq	80023f30 <dacifb_configure_channel+0x21c>
80023ecc:	58 38       	cp.w	r8,3
80023ece:	c5 e0       	breq	80023f8a <dacifb_configure_channel+0x276>
80023ed0:	58 18       	cp.w	r8,1
80023ed2:	e0 81 00 8f 	brne	80023ff0 <dacifb_configure_channel+0x2dc>
80023ed6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023eda:	11 98       	ld.ub	r8,r8[0x1]
80023edc:	58 08       	cp.w	r8,0
80023ede:	c0 90       	breq	80023ef0 <dacifb_configure_channel+0x1dc>
80023ee0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ee4:	70 18       	ld.w	r8,r8[0x4]
80023ee6:	10 99       	mov	r9,r8
80023ee8:	b1 a9       	sbr	r9,0x10
80023eea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023eee:	91 19       	st.w	r8[0x4],r9
80023ef0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ef4:	11 99       	ld.ub	r9,r8[0x1]
80023ef6:	30 28       	mov	r8,2
80023ef8:	f0 09 18 00 	cp.b	r9,r8
80023efc:	c0 a1       	brne	80023f10 <dacifb_configure_channel+0x1fc>
80023efe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f02:	70 28       	ld.w	r8,r8[0x8]
80023f04:	10 99       	mov	r9,r8
80023f06:	a1 a9       	sbr	r9,0x0
80023f08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f0c:	91 29       	st.w	r8[0x8],r9
80023f0e:	c7 18       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023f10:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f14:	11 99       	ld.ub	r9,r8[0x1]
80023f16:	30 18       	mov	r8,1
80023f18:	f0 09 18 00 	cp.b	r9,r8
80023f1c:	c6 71       	brne	80023fea <dacifb_configure_channel+0x2d6>
80023f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f22:	70 08       	ld.w	r8,r8[0x0]
80023f24:	10 99       	mov	r9,r8
80023f26:	b9 a9       	sbr	r9,0x18
80023f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f2c:	91 09       	st.w	r8[0x0],r9
80023f2e:	c6 18       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023f30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f34:	11 98       	ld.ub	r8,r8[0x1]
80023f36:	58 08       	cp.w	r8,0
80023f38:	c0 90       	breq	80023f4a <dacifb_configure_channel+0x236>
80023f3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f3e:	70 18       	ld.w	r8,r8[0x4]
80023f40:	10 99       	mov	r9,r8
80023f42:	b1 b9       	sbr	r9,0x11
80023f44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f48:	91 19       	st.w	r8[0x4],r9
80023f4a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f4e:	11 99       	ld.ub	r9,r8[0x1]
80023f50:	30 28       	mov	r8,2
80023f52:	f0 09 18 00 	cp.b	r9,r8
80023f56:	c0 a1       	brne	80023f6a <dacifb_configure_channel+0x256>
80023f58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f5c:	70 28       	ld.w	r8,r8[0x8]
80023f5e:	10 99       	mov	r9,r8
80023f60:	a9 a9       	sbr	r9,0x8
80023f62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f66:	91 29       	st.w	r8[0x8],r9
80023f68:	c4 48       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023f6a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f6e:	11 99       	ld.ub	r9,r8[0x1]
80023f70:	30 18       	mov	r8,1
80023f72:	f0 09 18 00 	cp.b	r9,r8
80023f76:	c3 c1       	brne	80023fee <dacifb_configure_channel+0x2da>
80023f78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f7c:	70 08       	ld.w	r8,r8[0x0]
80023f7e:	10 99       	mov	r9,r8
80023f80:	b9 b9       	sbr	r9,0x19
80023f82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f86:	91 09       	st.w	r8[0x0],r9
80023f88:	c3 48       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023f8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f8e:	11 98       	ld.ub	r8,r8[0x1]
80023f90:	58 08       	cp.w	r8,0
80023f92:	c0 a0       	breq	80023fa6 <dacifb_configure_channel+0x292>
80023f94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f98:	70 18       	ld.w	r8,r8[0x4]
80023f9a:	10 99       	mov	r9,r8
80023f9c:	ea 19 00 03 	orh	r9,0x3
80023fa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fa4:	91 19       	st.w	r8[0x4],r9
80023fa6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023faa:	11 99       	ld.ub	r9,r8[0x1]
80023fac:	30 28       	mov	r8,2
80023fae:	f0 09 18 00 	cp.b	r9,r8
80023fb2:	c0 b1       	brne	80023fc8 <dacifb_configure_channel+0x2b4>
80023fb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fb8:	70 28       	ld.w	r8,r8[0x8]
80023fba:	10 99       	mov	r9,r8
80023fbc:	e8 19 01 01 	orl	r9,0x101
80023fc0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fc4:	91 29       	st.w	r8[0x8],r9
80023fc6:	c1 58       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023fc8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023fcc:	11 99       	ld.ub	r9,r8[0x1]
80023fce:	30 18       	mov	r8,1
80023fd0:	f0 09 18 00 	cp.b	r9,r8
80023fd4:	c0 e1       	brne	80023ff0 <dacifb_configure_channel+0x2dc>
80023fd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fda:	70 08       	ld.w	r8,r8[0x0]
80023fdc:	10 99       	mov	r9,r8
80023fde:	ea 19 03 00 	orh	r9,0x300
80023fe2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fe6:	91 09       	st.w	r8[0x0],r9
80023fe8:	c0 48       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023fea:	d7 03       	nop
80023fec:	c0 28       	rjmp	80023ff0 <dacifb_configure_channel+0x2dc>
80023fee:	d7 03       	nop
80023ff0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023ff4:	58 28       	cp.w	r8,2
80023ff6:	c2 20       	breq	8002403a <dacifb_configure_channel+0x326>
80023ff8:	58 38       	cp.w	r8,3
80023ffa:	c3 d0       	breq	80024074 <dacifb_configure_channel+0x360>
80023ffc:	58 18       	cp.w	r8,1
80023ffe:	c7 31       	brne	800240e4 <dacifb_configure_channel+0x3d0>
80024000:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024004:	70 99       	ld.w	r9,r8[0x24]
80024006:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002400a:	11 a8       	ld.ub	r8,r8[0x2]
8002400c:	ab 78       	lsl	r8,0xb
8002400e:	10 9a       	mov	r10,r8
80024010:	e2 1a 08 00 	andl	r10,0x800,COH
80024014:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024018:	11 b8       	ld.ub	r8,r8[0x3]
8002401a:	a9 68       	lsl	r8,0x8
8002401c:	e2 18 07 00 	andl	r8,0x700,COH
80024020:	10 4a       	or	r10,r8
80024022:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024026:	11 c8       	ld.ub	r8,r8[0x4]
80024028:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002402c:	f5 e8 10 08 	or	r8,r10,r8
80024030:	10 49       	or	r9,r8
80024032:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024036:	91 99       	st.w	r8[0x24],r9
80024038:	c5 68       	rjmp	800240e4 <dacifb_configure_channel+0x3d0>
8002403a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002403e:	70 a9       	ld.w	r9,r8[0x28]
80024040:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024044:	11 a8       	ld.ub	r8,r8[0x2]
80024046:	ab 78       	lsl	r8,0xb
80024048:	10 9a       	mov	r10,r8
8002404a:	e2 1a 08 00 	andl	r10,0x800,COH
8002404e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024052:	11 b8       	ld.ub	r8,r8[0x3]
80024054:	a9 68       	lsl	r8,0x8
80024056:	e2 18 07 00 	andl	r8,0x700,COH
8002405a:	10 4a       	or	r10,r8
8002405c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024060:	11 c8       	ld.ub	r8,r8[0x4]
80024062:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024066:	f5 e8 10 08 	or	r8,r10,r8
8002406a:	10 49       	or	r9,r8
8002406c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024070:	91 a9       	st.w	r8[0x28],r9
80024072:	c3 98       	rjmp	800240e4 <dacifb_configure_channel+0x3d0>
80024074:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024078:	70 99       	ld.w	r9,r8[0x24]
8002407a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002407e:	11 a8       	ld.ub	r8,r8[0x2]
80024080:	ab 78       	lsl	r8,0xb
80024082:	10 9a       	mov	r10,r8
80024084:	e2 1a 08 00 	andl	r10,0x800,COH
80024088:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002408c:	11 b8       	ld.ub	r8,r8[0x3]
8002408e:	a9 68       	lsl	r8,0x8
80024090:	e2 18 07 00 	andl	r8,0x700,COH
80024094:	10 4a       	or	r10,r8
80024096:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002409a:	11 c8       	ld.ub	r8,r8[0x4]
8002409c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800240a0:	f5 e8 10 08 	or	r8,r10,r8
800240a4:	10 49       	or	r9,r8
800240a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240aa:	91 99       	st.w	r8[0x24],r9
800240ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240b0:	70 a9       	ld.w	r9,r8[0x28]
800240b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240b6:	11 a8       	ld.ub	r8,r8[0x2]
800240b8:	ab 78       	lsl	r8,0xb
800240ba:	10 9a       	mov	r10,r8
800240bc:	e2 1a 08 00 	andl	r10,0x800,COH
800240c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240c4:	11 b8       	ld.ub	r8,r8[0x3]
800240c6:	a9 68       	lsl	r8,0x8
800240c8:	e2 18 07 00 	andl	r8,0x700,COH
800240cc:	10 4a       	or	r10,r8
800240ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240d2:	11 c8       	ld.ub	r8,r8[0x4]
800240d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800240d8:	f5 e8 10 08 	or	r8,r10,r8
800240dc:	10 49       	or	r9,r8
800240de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240e2:	91 a9       	st.w	r8[0x28],r9
800240e4:	30 18       	mov	r8,1
800240e6:	10 9c       	mov	r12,r8
800240e8:	2f 9d       	sub	sp,-28
800240ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800240ee <dacifb_start_channel>:
800240ee:	eb cd 40 c0 	pushm	r6-r7,lr
800240f2:	1a 97       	mov	r7,sp
800240f4:	20 3d       	sub	sp,12
800240f6:	49 b6       	lddpc	r6,80024160 <dacifb_start_channel+0x72>
800240f8:	1e 26       	rsub	r6,pc
800240fa:	ef 4c ff fc 	st.w	r7[-4],r12
800240fe:	16 98       	mov	r8,r11
80024100:	ef 4a ff f4 	st.w	r7[-12],r10
80024104:	ef 68 ff f8 	st.b	r7[-8],r8
80024108:	ee fb ff f4 	ld.w	r11,r7[-12]
8002410c:	30 2c       	mov	r12,2
8002410e:	fe b0 fc 63 	rcall	800239d4 <dacifb_us_delay>
80024112:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024116:	58 28       	cp.w	r8,2
80024118:	c0 e0       	breq	80024134 <dacifb_start_channel+0x46>
8002411a:	58 38       	cp.w	r8,3
8002411c:	c1 50       	breq	80024146 <dacifb_start_channel+0x58>
8002411e:	58 18       	cp.w	r8,1
80024120:	c1 c1       	brne	80024158 <dacifb_start_channel+0x6a>
80024122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024126:	70 08       	ld.w	r8,r8[0x0]
80024128:	10 99       	mov	r9,r8
8002412a:	b1 a9       	sbr	r9,0x10
8002412c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024130:	91 09       	st.w	r8[0x0],r9
80024132:	c1 38       	rjmp	80024158 <dacifb_start_channel+0x6a>
80024134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024138:	70 08       	ld.w	r8,r8[0x0]
8002413a:	10 99       	mov	r9,r8
8002413c:	b1 b9       	sbr	r9,0x11
8002413e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024142:	91 09       	st.w	r8[0x0],r9
80024144:	c0 a8       	rjmp	80024158 <dacifb_start_channel+0x6a>
80024146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002414a:	70 08       	ld.w	r8,r8[0x0]
8002414c:	10 99       	mov	r9,r8
8002414e:	ea 19 00 03 	orh	r9,0x3
80024152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024156:	91 09       	st.w	r8[0x0],r9
80024158:	2f dd       	sub	sp,-12
8002415a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002415e:	00 00       	add	r0,r0
80024160:	80 02       	ld.sh	r2,r0[0x0]
80024162:	3f 7c       	mov	r12,-9

80024164 <dacifb_check_eoc>:
80024164:	eb cd 40 80 	pushm	r7,lr
80024168:	1a 97       	mov	r7,sp
8002416a:	20 2d       	sub	sp,8
8002416c:	ef 4c ff fc 	st.w	r7[-4],r12
80024170:	16 98       	mov	r8,r11
80024172:	ef 68 ff f8 	st.b	r7[-8],r8
80024176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002417a:	70 78       	ld.w	r8,r8[0x1c]
8002417c:	30 18       	mov	r8,1
8002417e:	10 9c       	mov	r12,r8
80024180:	2f ed       	sub	sp,-8
80024182:	e3 cd 80 80 	ldm	sp++,r7,pc

80024186 <dacifb_set_value>:
80024186:	eb cd 40 80 	pushm	r7,lr
8002418a:	1a 97       	mov	r7,sp
8002418c:	20 4d       	sub	sp,16
8002418e:	ef 4c ff fc 	st.w	r7[-4],r12
80024192:	14 98       	mov	r8,r10
80024194:	ef 49 ff f0 	st.w	r7[-16],r9
80024198:	16 99       	mov	r9,r11
8002419a:	ef 69 ff f8 	st.b	r7[-8],r9
8002419e:	ef 68 ff f4 	st.b	r7[-12],r8
800241a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800241a6:	58 28       	cp.w	r8,2
800241a8:	c0 b0       	breq	800241be <dacifb_set_value+0x38>
800241aa:	58 38       	cp.w	r8,3
800241ac:	c0 f0       	breq	800241ca <dacifb_set_value+0x44>
800241ae:	58 18       	cp.w	r8,1
800241b0:	c2 01       	brne	800241f0 <dacifb_set_value+0x6a>
800241b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241b6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800241ba:	91 b9       	st.w	r8[0x2c],r9
800241bc:	c1 a8       	rjmp	800241f0 <dacifb_set_value+0x6a>
800241be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800241c6:	91 c9       	st.w	r8[0x30],r9
800241c8:	c1 48       	rjmp	800241f0 <dacifb_set_value+0x6a>
800241ca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800241ce:	30 08       	mov	r8,0
800241d0:	f0 09 18 00 	cp.b	r9,r8
800241d4:	c0 70       	breq	800241e2 <dacifb_set_value+0x5c>
800241d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241da:	ee f9 ff f0 	ld.w	r9,r7[-16]
800241de:	91 b9       	st.w	r8[0x2c],r9
800241e0:	c0 88       	rjmp	800241f0 <dacifb_set_value+0x6a>
800241e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241e6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800241ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241ee:	91 b9       	st.w	r8[0x2c],r9
800241f0:	2f cd       	sub	sp,-16
800241f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800241f6 <dacifb_reload_timer>:
800241f6:	eb cd 40 80 	pushm	r7,lr
800241fa:	1a 97       	mov	r7,sp
800241fc:	20 5d       	sub	sp,20
800241fe:	ef 4c ff f8 	st.w	r7[-8],r12
80024202:	14 98       	mov	r8,r10
80024204:	ef 49 ff ec 	st.w	r7[-20],r9
80024208:	16 99       	mov	r9,r11
8002420a:	ef 69 ff f4 	st.b	r7[-12],r9
8002420e:	ef 68 ff f0 	st.b	r7[-16],r8
80024212:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80024216:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002421a:	b1 39       	mul	r9,r8
8002421c:	e0 68 de 83 	mov	r8,56963
80024220:	ea 18 43 1b 	orh	r8,0x431b
80024224:	f2 08 06 48 	mulu.d	r8,r9,r8
80024228:	f2 08 16 12 	lsr	r8,r9,0x12
8002422c:	ef 48 ff fc 	st.w	r7[-4],r8
80024230:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024234:	58 28       	cp.w	r8,2
80024236:	c0 f0       	breq	80024254 <dacifb_reload_timer+0x5e>
80024238:	58 38       	cp.w	r8,3
8002423a:	c1 70       	breq	80024268 <dacifb_reload_timer+0x72>
8002423c:	58 18       	cp.w	r8,1
8002423e:	c2 71       	brne	8002428c <dacifb_reload_timer+0x96>
80024240:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024244:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024248:	10 99       	mov	r9,r8
8002424a:	bf b9       	sbr	r9,0x1f
8002424c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024250:	91 e9       	st.w	r8[0x38],r9
80024252:	c1 d8       	rjmp	8002428c <dacifb_reload_timer+0x96>
80024254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024258:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002425c:	10 99       	mov	r9,r8
8002425e:	bf b9       	sbr	r9,0x1f
80024260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024264:	91 f9       	st.w	r8[0x3c],r9
80024266:	c1 38       	rjmp	8002428c <dacifb_reload_timer+0x96>
80024268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002426c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024270:	10 99       	mov	r9,r8
80024272:	bf b9       	sbr	r9,0x1f
80024274:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024278:	91 e9       	st.w	r8[0x38],r9
8002427a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002427e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024282:	10 99       	mov	r9,r8
80024284:	bf b9       	sbr	r9,0x1f
80024286:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002428a:	91 f9       	st.w	r8[0x3c],r9
8002428c:	2f bd       	sub	sp,-20
8002428e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024294 <cpu_irq_save>:
80024294:	eb cd 40 80 	pushm	r7,lr
80024298:	1a 97       	mov	r7,sp
8002429a:	20 1d       	sub	sp,4
8002429c:	e1 b8 00 00 	mfsr	r8,0x0
800242a0:	ef 48 ff fc 	st.w	r7[-4],r8
800242a4:	d3 03       	ssrf	0x10
800242a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800242aa:	10 9c       	mov	r12,r8
800242ac:	2f fd       	sub	sp,-4
800242ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800242b2 <cpu_irq_restore>:
800242b2:	eb cd 40 80 	pushm	r7,lr
800242b6:	1a 97       	mov	r7,sp
800242b8:	20 1d       	sub	sp,4
800242ba:	ef 4c ff fc 	st.w	r7[-4],r12
800242be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800242c2:	e3 b8 00 00 	mtsr	0x0,r8
800242c6:	2f fd       	sub	sp,-4
800242c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800242cc <eic_init>:
800242cc:	eb cd 40 80 	pushm	r7,lr
800242d0:	1a 97       	mov	r7,sp
800242d2:	20 4d       	sub	sp,16
800242d4:	ef 4c ff f8 	st.w	r7[-8],r12
800242d8:	ef 4b ff f4 	st.w	r7[-12],r11
800242dc:	ef 4a ff f0 	st.w	r7[-16],r10
800242e0:	30 08       	mov	r8,0
800242e2:	ef 48 ff fc 	st.w	r7[-4],r8
800242e6:	c2 89       	rjmp	80024536 <eic_init+0x26a>
800242e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800242ec:	12 98       	mov	r8,r9
800242ee:	a1 78       	lsl	r8,0x1
800242f0:	12 08       	add	r8,r9
800242f2:	a1 78       	lsl	r8,0x1
800242f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800242f8:	f2 08 00 08 	add	r8,r9,r8
800242fc:	11 99       	ld.ub	r9,r8[0x1]
800242fe:	30 18       	mov	r8,1
80024300:	f0 09 18 00 	cp.b	r9,r8
80024304:	c1 51       	brne	8002432e <eic_init+0x62>
80024306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002430a:	70 5a       	ld.w	r10,r8[0x14]
8002430c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024310:	12 98       	mov	r8,r9
80024312:	a1 78       	lsl	r8,0x1
80024314:	12 08       	add	r8,r9
80024316:	a1 78       	lsl	r8,0x1
80024318:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002431c:	f2 08 00 08 	add	r8,r9,r8
80024320:	11 88       	ld.ub	r8,r8[0x0]
80024322:	30 19       	mov	r9,1
80024324:	f2 08 09 48 	lsl	r8,r9,r8
80024328:	f5 e8 10 08 	or	r8,r10,r8
8002432c:	c1 58       	rjmp	80024356 <eic_init+0x8a>
8002432e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024332:	70 5a       	ld.w	r10,r8[0x14]
80024334:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024338:	12 98       	mov	r8,r9
8002433a:	a1 78       	lsl	r8,0x1
8002433c:	12 08       	add	r8,r9
8002433e:	a1 78       	lsl	r8,0x1
80024340:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024344:	f2 08 00 08 	add	r8,r9,r8
80024348:	11 88       	ld.ub	r8,r8[0x0]
8002434a:	30 19       	mov	r9,1
8002434c:	f2 08 09 48 	lsl	r8,r9,r8
80024350:	5c d8       	com	r8
80024352:	f5 e8 00 08 	and	r8,r10,r8
80024356:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002435a:	93 58       	st.w	r9[0x14],r8
8002435c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024360:	12 98       	mov	r8,r9
80024362:	a1 78       	lsl	r8,0x1
80024364:	12 08       	add	r8,r9
80024366:	a1 78       	lsl	r8,0x1
80024368:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002436c:	f2 08 00 08 	add	r8,r9,r8
80024370:	11 a9       	ld.ub	r9,r8[0x2]
80024372:	30 18       	mov	r8,1
80024374:	f0 09 18 00 	cp.b	r9,r8
80024378:	c1 51       	brne	800243a2 <eic_init+0xd6>
8002437a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002437e:	70 6a       	ld.w	r10,r8[0x18]
80024380:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024384:	12 98       	mov	r8,r9
80024386:	a1 78       	lsl	r8,0x1
80024388:	12 08       	add	r8,r9
8002438a:	a1 78       	lsl	r8,0x1
8002438c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024390:	f2 08 00 08 	add	r8,r9,r8
80024394:	11 88       	ld.ub	r8,r8[0x0]
80024396:	30 19       	mov	r9,1
80024398:	f2 08 09 48 	lsl	r8,r9,r8
8002439c:	f5 e8 10 08 	or	r8,r10,r8
800243a0:	c1 58       	rjmp	800243ca <eic_init+0xfe>
800243a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243a6:	70 6a       	ld.w	r10,r8[0x18]
800243a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800243ac:	12 98       	mov	r8,r9
800243ae:	a1 78       	lsl	r8,0x1
800243b0:	12 08       	add	r8,r9
800243b2:	a1 78       	lsl	r8,0x1
800243b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800243b8:	f2 08 00 08 	add	r8,r9,r8
800243bc:	11 88       	ld.ub	r8,r8[0x0]
800243be:	30 19       	mov	r9,1
800243c0:	f2 08 09 48 	lsl	r8,r9,r8
800243c4:	5c d8       	com	r8
800243c6:	f5 e8 00 08 	and	r8,r10,r8
800243ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800243ce:	93 68       	st.w	r9[0x18],r8
800243d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800243d4:	12 98       	mov	r8,r9
800243d6:	a1 78       	lsl	r8,0x1
800243d8:	12 08       	add	r8,r9
800243da:	a1 78       	lsl	r8,0x1
800243dc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800243e0:	f2 08 00 08 	add	r8,r9,r8
800243e4:	11 b9       	ld.ub	r9,r8[0x3]
800243e6:	30 18       	mov	r8,1
800243e8:	f0 09 18 00 	cp.b	r9,r8
800243ec:	c1 51       	brne	80024416 <eic_init+0x14a>
800243ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243f2:	70 7a       	ld.w	r10,r8[0x1c]
800243f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800243f8:	12 98       	mov	r8,r9
800243fa:	a1 78       	lsl	r8,0x1
800243fc:	12 08       	add	r8,r9
800243fe:	a1 78       	lsl	r8,0x1
80024400:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024404:	f2 08 00 08 	add	r8,r9,r8
80024408:	11 88       	ld.ub	r8,r8[0x0]
8002440a:	30 19       	mov	r9,1
8002440c:	f2 08 09 48 	lsl	r8,r9,r8
80024410:	f5 e8 10 08 	or	r8,r10,r8
80024414:	c1 58       	rjmp	8002443e <eic_init+0x172>
80024416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002441a:	70 7a       	ld.w	r10,r8[0x1c]
8002441c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024420:	12 98       	mov	r8,r9
80024422:	a1 78       	lsl	r8,0x1
80024424:	12 08       	add	r8,r9
80024426:	a1 78       	lsl	r8,0x1
80024428:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002442c:	f2 08 00 08 	add	r8,r9,r8
80024430:	11 88       	ld.ub	r8,r8[0x0]
80024432:	30 19       	mov	r9,1
80024434:	f2 08 09 48 	lsl	r8,r9,r8
80024438:	5c d8       	com	r8
8002443a:	f5 e8 00 08 	and	r8,r10,r8
8002443e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024442:	93 78       	st.w	r9[0x1c],r8
80024444:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024448:	12 98       	mov	r8,r9
8002444a:	a1 78       	lsl	r8,0x1
8002444c:	12 08       	add	r8,r9
8002444e:	a1 78       	lsl	r8,0x1
80024450:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024454:	f2 08 00 08 	add	r8,r9,r8
80024458:	11 c9       	ld.ub	r9,r8[0x4]
8002445a:	30 18       	mov	r8,1
8002445c:	f0 09 18 00 	cp.b	r9,r8
80024460:	c1 51       	brne	8002448a <eic_init+0x1be>
80024462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024466:	70 8a       	ld.w	r10,r8[0x20]
80024468:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002446c:	12 98       	mov	r8,r9
8002446e:	a1 78       	lsl	r8,0x1
80024470:	12 08       	add	r8,r9
80024472:	a1 78       	lsl	r8,0x1
80024474:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024478:	f2 08 00 08 	add	r8,r9,r8
8002447c:	11 88       	ld.ub	r8,r8[0x0]
8002447e:	30 19       	mov	r9,1
80024480:	f2 08 09 48 	lsl	r8,r9,r8
80024484:	f5 e8 10 08 	or	r8,r10,r8
80024488:	c1 58       	rjmp	800244b2 <eic_init+0x1e6>
8002448a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002448e:	70 8a       	ld.w	r10,r8[0x20]
80024490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024494:	12 98       	mov	r8,r9
80024496:	a1 78       	lsl	r8,0x1
80024498:	12 08       	add	r8,r9
8002449a:	a1 78       	lsl	r8,0x1
8002449c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244a0:	f2 08 00 08 	add	r8,r9,r8
800244a4:	11 88       	ld.ub	r8,r8[0x0]
800244a6:	30 19       	mov	r9,1
800244a8:	f2 08 09 48 	lsl	r8,r9,r8
800244ac:	5c d8       	com	r8
800244ae:	f5 e8 00 08 	and	r8,r10,r8
800244b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800244b6:	93 88       	st.w	r9[0x20],r8
800244b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800244bc:	12 98       	mov	r8,r9
800244be:	a1 78       	lsl	r8,0x1
800244c0:	12 08       	add	r8,r9
800244c2:	a1 78       	lsl	r8,0x1
800244c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244c8:	f2 08 00 08 	add	r8,r9,r8
800244cc:	11 d9       	ld.ub	r9,r8[0x5]
800244ce:	30 18       	mov	r8,1
800244d0:	f0 09 18 00 	cp.b	r9,r8
800244d4:	c1 51       	brne	800244fe <eic_init+0x232>
800244d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800244da:	70 aa       	ld.w	r10,r8[0x28]
800244dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800244e0:	12 98       	mov	r8,r9
800244e2:	a1 78       	lsl	r8,0x1
800244e4:	12 08       	add	r8,r9
800244e6:	a1 78       	lsl	r8,0x1
800244e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244ec:	f2 08 00 08 	add	r8,r9,r8
800244f0:	11 88       	ld.ub	r8,r8[0x0]
800244f2:	30 19       	mov	r9,1
800244f4:	f2 08 09 48 	lsl	r8,r9,r8
800244f8:	f5 e8 10 08 	or	r8,r10,r8
800244fc:	c1 58       	rjmp	80024526 <eic_init+0x25a>
800244fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024502:	70 aa       	ld.w	r10,r8[0x28]
80024504:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024508:	12 98       	mov	r8,r9
8002450a:	a1 78       	lsl	r8,0x1
8002450c:	12 08       	add	r8,r9
8002450e:	a1 78       	lsl	r8,0x1
80024510:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024514:	f2 08 00 08 	add	r8,r9,r8
80024518:	11 88       	ld.ub	r8,r8[0x0]
8002451a:	30 19       	mov	r9,1
8002451c:	f2 08 09 48 	lsl	r8,r9,r8
80024520:	5c d8       	com	r8
80024522:	f5 e8 00 08 	and	r8,r10,r8
80024526:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002452a:	93 a8       	st.w	r9[0x28],r8
8002452c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024530:	2f f8       	sub	r8,-1
80024532:	ef 48 ff fc 	st.w	r7[-4],r8
80024536:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002453a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002453e:	10 39       	cp.w	r9,r8
80024540:	fe 93 fe d4 	brlo	800242e8 <eic_init+0x1c>
80024544:	2f cd       	sub	sp,-16
80024546:	e3 cd 80 80 	ldm	sp++,r7,pc

8002454a <eic_enable_lines>:
8002454a:	eb cd 40 80 	pushm	r7,lr
8002454e:	1a 97       	mov	r7,sp
80024550:	20 2d       	sub	sp,8
80024552:	ef 4c ff fc 	st.w	r7[-4],r12
80024556:	ef 4b ff f8 	st.w	r7[-8],r11
8002455a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002455e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024562:	91 c9       	st.w	r8[0x30],r9
80024564:	2f ed       	sub	sp,-8
80024566:	e3 cd 80 80 	ldm	sp++,r7,pc

8002456a <eic_enable_line>:
8002456a:	eb cd 40 80 	pushm	r7,lr
8002456e:	1a 97       	mov	r7,sp
80024570:	20 2d       	sub	sp,8
80024572:	ef 4c ff fc 	st.w	r7[-4],r12
80024576:	ef 4b ff f8 	st.w	r7[-8],r11
8002457a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002457e:	30 19       	mov	r9,1
80024580:	f2 08 09 48 	lsl	r8,r9,r8
80024584:	10 99       	mov	r9,r8
80024586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002458a:	91 c9       	st.w	r8[0x30],r9
8002458c:	2f ed       	sub	sp,-8
8002458e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024592 <eic_disable_lines>:
80024592:	eb cd 40 80 	pushm	r7,lr
80024596:	1a 97       	mov	r7,sp
80024598:	20 2d       	sub	sp,8
8002459a:	ef 4c ff fc 	st.w	r7[-4],r12
8002459e:	ef 4b ff f8 	st.w	r7[-8],r11
800245a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800245aa:	91 d9       	st.w	r8[0x34],r9
800245ac:	2f ed       	sub	sp,-8
800245ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800245b2 <eic_disable_line>:
800245b2:	eb cd 40 80 	pushm	r7,lr
800245b6:	1a 97       	mov	r7,sp
800245b8:	20 2d       	sub	sp,8
800245ba:	ef 4c ff fc 	st.w	r7[-4],r12
800245be:	ef 4b ff f8 	st.w	r7[-8],r11
800245c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245c6:	30 19       	mov	r9,1
800245c8:	f2 08 09 48 	lsl	r8,r9,r8
800245cc:	10 99       	mov	r9,r8
800245ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245d2:	91 d9       	st.w	r8[0x34],r9
800245d4:	2f ed       	sub	sp,-8
800245d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800245da <eic_is_line_enabled>:
800245da:	eb cd 40 80 	pushm	r7,lr
800245de:	1a 97       	mov	r7,sp
800245e0:	20 2d       	sub	sp,8
800245e2:	ef 4c ff fc 	st.w	r7[-4],r12
800245e6:	ef 4b ff f8 	st.w	r7[-8],r11
800245ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245ee:	70 e9       	ld.w	r9,r8[0x38]
800245f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245f4:	30 1a       	mov	r10,1
800245f6:	f4 08 09 48 	lsl	r8,r10,r8
800245fa:	f3 e8 00 08 	and	r8,r9,r8
800245fe:	5f 18       	srne	r8
80024600:	5c 58       	castu.b	r8
80024602:	10 9c       	mov	r12,r8
80024604:	2f ed       	sub	sp,-8
80024606:	e3 cd 80 80 	ldm	sp++,r7,pc

8002460a <eic_enable_interrupt_lines>:
8002460a:	eb cd 40 80 	pushm	r7,lr
8002460e:	1a 97       	mov	r7,sp
80024610:	20 2d       	sub	sp,8
80024612:	ef 4c ff fc 	st.w	r7[-4],r12
80024616:	ef 4b ff f8 	st.w	r7[-8],r11
8002461a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002461e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024622:	91 09       	st.w	r8[0x0],r9
80024624:	2f ed       	sub	sp,-8
80024626:	e3 cd 80 80 	ldm	sp++,r7,pc

8002462a <eic_enable_interrupt_line>:
8002462a:	eb cd 40 80 	pushm	r7,lr
8002462e:	1a 97       	mov	r7,sp
80024630:	20 2d       	sub	sp,8
80024632:	ef 4c ff fc 	st.w	r7[-4],r12
80024636:	ef 4b ff f8 	st.w	r7[-8],r11
8002463a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002463e:	30 19       	mov	r9,1
80024640:	f2 08 09 48 	lsl	r8,r9,r8
80024644:	10 99       	mov	r9,r8
80024646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002464a:	91 09       	st.w	r8[0x0],r9
8002464c:	2f ed       	sub	sp,-8
8002464e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024652 <eic_disable_interrupt_lines>:
80024652:	eb cd 40 c0 	pushm	r6-r7,lr
80024656:	1a 97       	mov	r7,sp
80024658:	20 3d       	sub	sp,12
8002465a:	48 d6       	lddpc	r6,8002468c <eic_disable_interrupt_lines+0x3a>
8002465c:	1e 26       	rsub	r6,pc
8002465e:	ef 4c ff f8 	st.w	r7[-8],r12
80024662:	ef 4b ff f4 	st.w	r7[-12],r11
80024666:	c1 7e       	rcall	80024294 <cpu_irq_save>
80024668:	18 98       	mov	r8,r12
8002466a:	ef 48 ff fc 	st.w	r7[-4],r8
8002466e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024672:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024676:	91 19       	st.w	r8[0x4],r9
80024678:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002467c:	70 28       	ld.w	r8,r8[0x8]
8002467e:	ee fc ff fc 	ld.w	r12,r7[-4]
80024682:	c1 8e       	rcall	800242b2 <cpu_irq_restore>
80024684:	2f dd       	sub	sp,-12
80024686:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002468a:	00 00       	add	r0,r0
8002468c:	80 02       	ld.sh	r2,r0[0x0]
8002468e:	44 e0       	lddsp	r0,sp[0x138]

80024690 <eic_disable_interrupt_line>:
80024690:	eb cd 40 c0 	pushm	r6-r7,lr
80024694:	1a 97       	mov	r7,sp
80024696:	20 3d       	sub	sp,12
80024698:	48 f6       	lddpc	r6,800246d4 <eic_disable_interrupt_line+0x44>
8002469a:	1e 26       	rsub	r6,pc
8002469c:	ef 4c ff f8 	st.w	r7[-8],r12
800246a0:	ef 4b ff f4 	st.w	r7[-12],r11
800246a4:	fe b0 fd f8 	rcall	80024294 <cpu_irq_save>
800246a8:	18 98       	mov	r8,r12
800246aa:	ef 48 ff fc 	st.w	r7[-4],r8
800246ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800246b2:	30 19       	mov	r9,1
800246b4:	f2 08 09 48 	lsl	r8,r9,r8
800246b8:	10 99       	mov	r9,r8
800246ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246be:	91 19       	st.w	r8[0x4],r9
800246c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246c4:	70 28       	ld.w	r8,r8[0x8]
800246c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800246ca:	fe b0 fd f4 	rcall	800242b2 <cpu_irq_restore>
800246ce:	2f dd       	sub	sp,-12
800246d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800246d4:	80 02       	ld.sh	r2,r0[0x0]
800246d6:	45 1e       	lddsp	lr,sp[0x144]

800246d8 <eic_is_interrupt_line_enabled>:
800246d8:	eb cd 40 80 	pushm	r7,lr
800246dc:	1a 97       	mov	r7,sp
800246de:	20 2d       	sub	sp,8
800246e0:	ef 4c ff fc 	st.w	r7[-4],r12
800246e4:	ef 4b ff f8 	st.w	r7[-8],r11
800246e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800246ec:	70 29       	ld.w	r9,r8[0x8]
800246ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246f2:	30 1a       	mov	r10,1
800246f4:	f4 08 09 48 	lsl	r8,r10,r8
800246f8:	f3 e8 00 08 	and	r8,r9,r8
800246fc:	5f 18       	srne	r8
800246fe:	5c 58       	castu.b	r8
80024700:	10 9c       	mov	r12,r8
80024702:	2f ed       	sub	sp,-8
80024704:	e3 cd 80 80 	ldm	sp++,r7,pc

80024708 <eic_clear_interrupt_lines>:
80024708:	eb cd 40 c0 	pushm	r6-r7,lr
8002470c:	1a 97       	mov	r7,sp
8002470e:	20 3d       	sub	sp,12
80024710:	48 d6       	lddpc	r6,80024744 <eic_clear_interrupt_lines+0x3c>
80024712:	1e 26       	rsub	r6,pc
80024714:	ef 4c ff f8 	st.w	r7[-8],r12
80024718:	ef 4b ff f4 	st.w	r7[-12],r11
8002471c:	fe b0 fd bc 	rcall	80024294 <cpu_irq_save>
80024720:	18 98       	mov	r8,r12
80024722:	ef 48 ff fc 	st.w	r7[-4],r8
80024726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002472a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002472e:	91 49       	st.w	r8[0x10],r9
80024730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024734:	70 38       	ld.w	r8,r8[0xc]
80024736:	ee fc ff fc 	ld.w	r12,r7[-4]
8002473a:	fe b0 fd bc 	rcall	800242b2 <cpu_irq_restore>
8002473e:	2f dd       	sub	sp,-12
80024740:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024744:	80 02       	ld.sh	r2,r0[0x0]
80024746:	45 96       	lddsp	r6,sp[0x164]

80024748 <eic_clear_interrupt_line>:
80024748:	eb cd 40 c0 	pushm	r6-r7,lr
8002474c:	1a 97       	mov	r7,sp
8002474e:	20 3d       	sub	sp,12
80024750:	48 f6       	lddpc	r6,8002478c <eic_clear_interrupt_line+0x44>
80024752:	1e 26       	rsub	r6,pc
80024754:	ef 4c ff f8 	st.w	r7[-8],r12
80024758:	ef 4b ff f4 	st.w	r7[-12],r11
8002475c:	fe b0 fd 9c 	rcall	80024294 <cpu_irq_save>
80024760:	18 98       	mov	r8,r12
80024762:	ef 48 ff fc 	st.w	r7[-4],r8
80024766:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002476a:	30 19       	mov	r9,1
8002476c:	f2 08 09 48 	lsl	r8,r9,r8
80024770:	10 99       	mov	r9,r8
80024772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024776:	91 49       	st.w	r8[0x10],r9
80024778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002477c:	70 38       	ld.w	r8,r8[0xc]
8002477e:	ee fc ff fc 	ld.w	r12,r7[-4]
80024782:	fe b0 fd 98 	rcall	800242b2 <cpu_irq_restore>
80024786:	2f dd       	sub	sp,-12
80024788:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002478c:	80 02       	ld.sh	r2,r0[0x0]
8002478e:	45 d6       	lddsp	r6,sp[0x174]

80024790 <eic_is_interrupt_line_pending>:
80024790:	eb cd 40 80 	pushm	r7,lr
80024794:	1a 97       	mov	r7,sp
80024796:	20 2d       	sub	sp,8
80024798:	ef 4c ff fc 	st.w	r7[-4],r12
8002479c:	ef 4b ff f8 	st.w	r7[-8],r11
800247a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800247a4:	70 39       	ld.w	r9,r8[0xc]
800247a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247aa:	30 1a       	mov	r10,1
800247ac:	f4 08 09 48 	lsl	r8,r10,r8
800247b0:	f3 e8 00 08 	and	r8,r9,r8
800247b4:	5f 18       	srne	r8
800247b6:	5c 58       	castu.b	r8
800247b8:	10 9c       	mov	r12,r8
800247ba:	2f ed       	sub	sp,-8
800247bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800247c0 <flashc_get_flash_size>:
800247c0:	eb cd 40 c0 	pushm	r6-r7,lr
800247c4:	1a 97       	mov	r7,sp
800247c6:	48 86       	lddpc	r6,800247e4 <flashc_get_flash_size+0x24>
800247c8:	1e 26       	rsub	r6,pc
800247ca:	fe 68 00 00 	mov	r8,-131072
800247ce:	70 38       	ld.w	r8,r8[0xc]
800247d0:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800247d4:	ec f8 08 a4 	ld.w	r8,r6[2212]
800247d8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800247dc:	10 9c       	mov	r12,r8
800247de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800247e2:	00 00       	add	r0,r0
800247e4:	80 02       	ld.sh	r2,r0[0x0]
800247e6:	46 4c       	lddsp	r12,sp[0x190]

800247e8 <flashc_get_page_count>:
800247e8:	eb cd 40 c0 	pushm	r6-r7,lr
800247ec:	1a 97       	mov	r7,sp
800247ee:	48 56       	lddpc	r6,80024800 <flashc_get_page_count+0x18>
800247f0:	1e 26       	rsub	r6,pc
800247f2:	f0 16 00 c8 	mcall	r6[800]
800247f6:	18 98       	mov	r8,r12
800247f8:	a9 98       	lsr	r8,0x9
800247fa:	10 9c       	mov	r12,r8
800247fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024800:	80 02       	ld.sh	r2,r0[0x0]
80024802:	46 74       	lddsp	r4,sp[0x19c]

80024804 <flashc_get_page_count_per_region>:
80024804:	eb cd 40 c0 	pushm	r6-r7,lr
80024808:	1a 97       	mov	r7,sp
8002480a:	48 56       	lddpc	r6,8002481c <flashc_get_page_count_per_region+0x18>
8002480c:	1e 26       	rsub	r6,pc
8002480e:	f0 16 01 07 	mcall	r6[1052]
80024812:	18 98       	mov	r8,r12
80024814:	a5 88       	lsr	r8,0x4
80024816:	10 9c       	mov	r12,r8
80024818:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002481c:	80 02       	ld.sh	r2,r0[0x0]
8002481e:	46 90       	lddsp	r0,sp[0x1a4]

80024820 <flashc_get_page_region>:
80024820:	eb cd 40 e0 	pushm	r5-r7,lr
80024824:	1a 97       	mov	r7,sp
80024826:	20 1d       	sub	sp,4
80024828:	48 c6       	lddpc	r6,80024858 <flashc_get_page_region+0x38>
8002482a:	1e 26       	rsub	r6,pc
8002482c:	ef 4c ff fc 	st.w	r7[-4],r12
80024830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024834:	58 08       	cp.w	r8,0
80024836:	c0 45       	brlt	8002483e <flashc_get_page_region+0x1e>
80024838:	ee f5 ff fc 	ld.w	r5,r7[-4]
8002483c:	c0 58       	rjmp	80024846 <flashc_get_page_region+0x26>
8002483e:	f0 16 01 8c 	mcall	r6[1584]
80024842:	18 98       	mov	r8,r12
80024844:	10 95       	mov	r5,r8
80024846:	f0 16 01 16 	mcall	r6[1112]
8002484a:	18 98       	mov	r8,r12
8002484c:	ea 08 0d 08 	divu	r8,r5,r8
80024850:	10 9c       	mov	r12,r8
80024852:	2f fd       	sub	sp,-4
80024854:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024858:	80 02       	ld.sh	r2,r0[0x0]
8002485a:	46 ae       	lddsp	lr,sp[0x1a8]

8002485c <flashc_get_region_first_page_number>:
8002485c:	eb cd 40 c0 	pushm	r6-r7,lr
80024860:	1a 97       	mov	r7,sp
80024862:	20 1d       	sub	sp,4
80024864:	48 86       	lddpc	r6,80024884 <flashc_get_region_first_page_number+0x28>
80024866:	1e 26       	rsub	r6,pc
80024868:	ef 4c ff fc 	st.w	r7[-4],r12
8002486c:	f0 16 01 16 	mcall	r6[1112]
80024870:	18 99       	mov	r9,r12
80024872:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024876:	f2 08 02 48 	mul	r8,r9,r8
8002487a:	10 9c       	mov	r12,r8
8002487c:	2f fd       	sub	sp,-4
8002487e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024882:	00 00       	add	r0,r0
80024884:	80 02       	ld.sh	r2,r0[0x0]
80024886:	46 ea       	lddsp	r10,sp[0x1b8]

80024888 <flashc_get_wait_state>:
80024888:	eb cd 40 80 	pushm	r7,lr
8002488c:	1a 97       	mov	r7,sp
8002488e:	fe 68 00 00 	mov	r8,-131072
80024892:	70 08       	ld.w	r8,r8[0x0]
80024894:	e2 18 00 40 	andl	r8,0x40,COH
80024898:	a7 88       	lsr	r8,0x6
8002489a:	10 9c       	mov	r12,r8
8002489c:	e3 cd 80 80 	ldm	sp++,r7,pc

800248a0 <flashc_set_wait_state>:
800248a0:	eb cd 40 80 	pushm	r7,lr
800248a4:	1a 97       	mov	r7,sp
800248a6:	20 2d       	sub	sp,8
800248a8:	ef 4c ff f8 	st.w	r7[-8],r12
800248ac:	fe 68 00 00 	mov	r8,-131072
800248b0:	70 08       	ld.w	r8,r8[0x0]
800248b2:	30 09       	mov	r9,0
800248b4:	ef 49 ff fc 	st.w	r7[-4],r9
800248b8:	ef 48 ff fc 	st.w	r7[-4],r8
800248bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248c0:	5c 58       	castu.b	r8
800248c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800248c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800248ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248ce:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800248d2:	ef 48 ff fc 	st.w	r7[-4],r8
800248d6:	fe 68 00 00 	mov	r8,-131072
800248da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248de:	91 09       	st.w	r8[0x0],r9
800248e0:	2f ed       	sub	sp,-8
800248e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800248e6 <flashc_set_bus_freq>:
800248e6:	eb cd 40 c0 	pushm	r6-r7,lr
800248ea:	1a 97       	mov	r7,sp
800248ec:	20 1d       	sub	sp,4
800248ee:	48 c6       	lddpc	r6,8002491c <flashc_set_bus_freq+0x36>
800248f0:	1e 26       	rsub	r6,pc
800248f2:	ef 4c ff fc 	st.w	r7[-4],r12
800248f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248fa:	e0 69 8a 3f 	mov	r9,35391
800248fe:	ea 19 01 f7 	orh	r9,0x1f7
80024902:	12 38       	cp.w	r8,r9
80024904:	e0 88 00 06 	brls	80024910 <flashc_set_bus_freq+0x2a>
80024908:	30 1c       	mov	r12,1
8002490a:	f0 16 00 9d 	mcall	r6[628]
8002490e:	c0 48       	rjmp	80024916 <flashc_set_bus_freq+0x30>
80024910:	30 0c       	mov	r12,0
80024912:	f0 16 00 9d 	mcall	r6[628]
80024916:	2f fd       	sub	sp,-4
80024918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002491c:	80 02       	ld.sh	r2,r0[0x0]
8002491e:	47 74       	lddsp	r4,sp[0x1dc]

80024920 <flashc_is_ready_int_enabled>:
80024920:	eb cd 40 80 	pushm	r7,lr
80024924:	1a 97       	mov	r7,sp
80024926:	fe 68 00 00 	mov	r8,-131072
8002492a:	70 08       	ld.w	r8,r8[0x0]
8002492c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024930:	5c 58       	castu.b	r8
80024932:	10 9c       	mov	r12,r8
80024934:	e3 cd 80 80 	ldm	sp++,r7,pc

80024938 <flashc_enable_ready_int>:
80024938:	eb cd 40 80 	pushm	r7,lr
8002493c:	1a 97       	mov	r7,sp
8002493e:	20 2d       	sub	sp,8
80024940:	18 98       	mov	r8,r12
80024942:	ef 68 ff f8 	st.b	r7[-8],r8
80024946:	fe 68 00 00 	mov	r8,-131072
8002494a:	70 08       	ld.w	r8,r8[0x0]
8002494c:	30 09       	mov	r9,0
8002494e:	ef 49 ff fc 	st.w	r7[-4],r9
80024952:	ef 48 ff fc 	st.w	r7[-4],r8
80024956:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002495a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002495e:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80024962:	ef 48 ff fc 	st.w	r7[-4],r8
80024966:	fe 68 00 00 	mov	r8,-131072
8002496a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002496e:	91 09       	st.w	r8[0x0],r9
80024970:	2f ed       	sub	sp,-8
80024972:	e3 cd 80 80 	ldm	sp++,r7,pc

80024976 <flashc_is_lock_error_int_enabled>:
80024976:	eb cd 40 80 	pushm	r7,lr
8002497a:	1a 97       	mov	r7,sp
8002497c:	fe 68 00 00 	mov	r8,-131072
80024980:	70 08       	ld.w	r8,r8[0x0]
80024982:	e2 18 00 04 	andl	r8,0x4,COH
80024986:	5f 18       	srne	r8
80024988:	5c 58       	castu.b	r8
8002498a:	10 9c       	mov	r12,r8
8002498c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024990 <flashc_enable_lock_error_int>:
80024990:	eb cd 40 80 	pushm	r7,lr
80024994:	1a 97       	mov	r7,sp
80024996:	20 2d       	sub	sp,8
80024998:	18 98       	mov	r8,r12
8002499a:	ef 68 ff f8 	st.b	r7[-8],r8
8002499e:	fe 68 00 00 	mov	r8,-131072
800249a2:	70 08       	ld.w	r8,r8[0x0]
800249a4:	30 09       	mov	r9,0
800249a6:	ef 49 ff fc 	st.w	r7[-4],r9
800249aa:	ef 48 ff fc 	st.w	r7[-4],r8
800249ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249b2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800249b6:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
800249ba:	ef 48 ff fc 	st.w	r7[-4],r8
800249be:	fe 68 00 00 	mov	r8,-131072
800249c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800249c6:	91 09       	st.w	r8[0x0],r9
800249c8:	2f ed       	sub	sp,-8
800249ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800249ce <flashc_is_prog_error_int_enabled>:
800249ce:	eb cd 40 80 	pushm	r7,lr
800249d2:	1a 97       	mov	r7,sp
800249d4:	fe 68 00 00 	mov	r8,-131072
800249d8:	70 08       	ld.w	r8,r8[0x0]
800249da:	e2 18 00 08 	andl	r8,0x8,COH
800249de:	5f 18       	srne	r8
800249e0:	5c 58       	castu.b	r8
800249e2:	10 9c       	mov	r12,r8
800249e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800249e8 <flashc_enable_prog_error_int>:
800249e8:	eb cd 40 80 	pushm	r7,lr
800249ec:	1a 97       	mov	r7,sp
800249ee:	20 2d       	sub	sp,8
800249f0:	18 98       	mov	r8,r12
800249f2:	ef 68 ff f8 	st.b	r7[-8],r8
800249f6:	fe 68 00 00 	mov	r8,-131072
800249fa:	70 08       	ld.w	r8,r8[0x0]
800249fc:	30 09       	mov	r9,0
800249fe:	ef 49 ff fc 	st.w	r7[-4],r9
80024a02:	ef 48 ff fc 	st.w	r7[-4],r8
80024a06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a0a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024a0e:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80024a12:	ef 48 ff fc 	st.w	r7[-4],r8
80024a16:	fe 68 00 00 	mov	r8,-131072
80024a1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024a1e:	91 09       	st.w	r8[0x0],r9
80024a20:	2f ed       	sub	sp,-8
80024a22:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a26 <flashc_is_ready>:
80024a26:	eb cd 40 80 	pushm	r7,lr
80024a2a:	1a 97       	mov	r7,sp
80024a2c:	fe 68 00 00 	mov	r8,-131072
80024a30:	70 28       	ld.w	r8,r8[0x8]
80024a32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024a36:	5c 58       	castu.b	r8
80024a38:	10 9c       	mov	r12,r8
80024a3a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a3e <flashc_default_wait_until_ready>:
80024a3e:	eb cd 40 c0 	pushm	r6-r7,lr
80024a42:	1a 97       	mov	r7,sp
80024a44:	48 66       	lddpc	r6,80024a5c <flashc_default_wait_until_ready+0x1e>
80024a46:	1e 26       	rsub	r6,pc
80024a48:	f0 16 01 ac 	mcall	r6[1712]
80024a4c:	18 98       	mov	r8,r12
80024a4e:	ec 18 00 01 	eorl	r8,0x1
80024a52:	5c 58       	castu.b	r8
80024a54:	cf a1       	brne	80024a48 <flashc_default_wait_until_ready+0xa>
80024a56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a5a:	00 00       	add	r0,r0
80024a5c:	80 02       	ld.sh	r2,r0[0x0]
80024a5e:	48 ca       	lddpc	r10,80024a8c <flashc_is_lock_error+0x16>

80024a60 <flashc_get_error_status>:
80024a60:	eb cd 40 80 	pushm	r7,lr
80024a64:	1a 97       	mov	r7,sp
80024a66:	fe 68 00 00 	mov	r8,-131072
80024a6a:	70 28       	ld.w	r8,r8[0x8]
80024a6c:	e2 18 00 0c 	andl	r8,0xc,COH
80024a70:	10 9c       	mov	r12,r8
80024a72:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a76 <flashc_is_lock_error>:
80024a76:	eb cd 40 c0 	pushm	r6-r7,lr
80024a7a:	1a 97       	mov	r7,sp
80024a7c:	48 66       	lddpc	r6,80024a94 <flashc_is_lock_error+0x1e>
80024a7e:	1e 26       	rsub	r6,pc
80024a80:	ec f8 00 54 	ld.w	r8,r6[84]
80024a84:	70 08       	ld.w	r8,r8[0x0]
80024a86:	e2 18 00 04 	andl	r8,0x4,COH
80024a8a:	5f 18       	srne	r8
80024a8c:	5c 58       	castu.b	r8
80024a8e:	10 9c       	mov	r12,r8
80024a90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a94:	80 02       	ld.sh	r2,r0[0x0]
80024a96:	49 02       	lddpc	r2,80024ad4 <flashc_get_page_number+0x2>

80024a98 <flashc_is_programming_error>:
80024a98:	eb cd 40 c0 	pushm	r6-r7,lr
80024a9c:	1a 97       	mov	r7,sp
80024a9e:	48 76       	lddpc	r6,80024ab8 <flashc_is_programming_error+0x20>
80024aa0:	1e 26       	rsub	r6,pc
80024aa2:	ec f8 00 54 	ld.w	r8,r6[84]
80024aa6:	70 08       	ld.w	r8,r8[0x0]
80024aa8:	e2 18 00 08 	andl	r8,0x8,COH
80024aac:	5f 18       	srne	r8
80024aae:	5c 58       	castu.b	r8
80024ab0:	10 9c       	mov	r12,r8
80024ab2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ab6:	00 00       	add	r0,r0
80024ab8:	80 02       	ld.sh	r2,r0[0x0]
80024aba:	49 24       	lddpc	r4,80024b00 <flashc_issue_command+0x12>

80024abc <flashc_get_command>:
80024abc:	eb cd 40 80 	pushm	r7,lr
80024ac0:	1a 97       	mov	r7,sp
80024ac2:	fe 68 00 00 	mov	r8,-131072
80024ac6:	70 18       	ld.w	r8,r8[0x4]
80024ac8:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024acc:	10 9c       	mov	r12,r8
80024ace:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ad2 <flashc_get_page_number>:
80024ad2:	eb cd 40 80 	pushm	r7,lr
80024ad6:	1a 97       	mov	r7,sp
80024ad8:	fe 68 00 00 	mov	r8,-131072
80024adc:	70 18       	ld.w	r8,r8[0x4]
80024ade:	e4 18 00 ff 	andh	r8,0xff
80024ae2:	e0 18 ff 00 	andl	r8,0xff00
80024ae6:	a9 88       	lsr	r8,0x8
80024ae8:	10 9c       	mov	r12,r8
80024aea:	e3 cd 80 80 	ldm	sp++,r7,pc

80024aee <flashc_issue_command>:
80024aee:	eb cd 40 c0 	pushm	r6-r7,lr
80024af2:	1a 97       	mov	r7,sp
80024af4:	20 3d       	sub	sp,12
80024af6:	4a 06       	lddpc	r6,80024b74 <flashc_issue_command+0x86>
80024af8:	1e 26       	rsub	r6,pc
80024afa:	ef 4c ff f8 	st.w	r7[-8],r12
80024afe:	ef 4b ff f4 	st.w	r7[-12],r11
80024b02:	ec f8 04 b0 	ld.w	r8,r6[1200]
80024b06:	70 08       	ld.w	r8,r8[0x0]
80024b08:	5d 18       	icall	r8
80024b0a:	fe 68 00 00 	mov	r8,-131072
80024b0e:	70 18       	ld.w	r8,r8[0x4]
80024b10:	ef 48 ff fc 	st.w	r7[-4],r8
80024b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b18:	5c 58       	castu.b	r8
80024b1a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024b1e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b26:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024b2a:	ef 48 ff fc 	st.w	r7[-4],r8
80024b2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b32:	58 08       	cp.w	r8,0
80024b34:	c0 b5       	brlt	80024b4a <flashc_issue_command+0x5c>
80024b36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b3a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80024b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b42:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80024b46:	ef 48 ff fc 	st.w	r7[-4],r8
80024b4a:	3a 58       	mov	r8,-91
80024b4c:	ef 68 ff fc 	st.b	r7[-4],r8
80024b50:	fe 68 00 00 	mov	r8,-131072
80024b54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b58:	91 19       	st.w	r8[0x4],r9
80024b5a:	c8 3f       	rcall	80024a60 <flashc_get_error_status>
80024b5c:	18 99       	mov	r9,r12
80024b5e:	ec f8 00 54 	ld.w	r8,r6[84]
80024b62:	91 09       	st.w	r8[0x0],r9
80024b64:	ec f8 04 b0 	ld.w	r8,r6[1200]
80024b68:	70 08       	ld.w	r8,r8[0x0]
80024b6a:	5d 18       	icall	r8
80024b6c:	2f dd       	sub	sp,-12
80024b6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b72:	00 00       	add	r0,r0
80024b74:	80 02       	ld.sh	r2,r0[0x0]
80024b76:	49 7c       	lddpc	r12,80024bd0 <flashc_activate_security_bit+0x6>

80024b78 <flashc_no_operation>:
80024b78:	eb cd 40 c0 	pushm	r6-r7,lr
80024b7c:	1a 97       	mov	r7,sp
80024b7e:	48 56       	lddpc	r6,80024b90 <flashc_no_operation+0x18>
80024b80:	1e 26       	rsub	r6,pc
80024b82:	3f fb       	mov	r11,-1
80024b84:	30 0c       	mov	r12,0
80024b86:	f0 16 00 2a 	mcall	r6[168]
80024b8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b8e:	00 00       	add	r0,r0
80024b90:	80 02       	ld.sh	r2,r0[0x0]
80024b92:	4a 04       	lddpc	r4,80024c10 <flashc_get_bootloader_protected_size+0x2c>

80024b94 <flashc_erase_all>:
80024b94:	eb cd 40 c0 	pushm	r6-r7,lr
80024b98:	1a 97       	mov	r7,sp
80024b9a:	48 56       	lddpc	r6,80024bac <flashc_erase_all+0x18>
80024b9c:	1e 26       	rsub	r6,pc
80024b9e:	3f fb       	mov	r11,-1
80024ba0:	30 6c       	mov	r12,6
80024ba2:	f0 16 00 2a 	mcall	r6[168]
80024ba6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024baa:	00 00       	add	r0,r0
80024bac:	80 02       	ld.sh	r2,r0[0x0]
80024bae:	4a 20       	lddpc	r0,80024c34 <flashc_set_bootloader_protected_size+0xc>

80024bb0 <flashc_is_security_bit_active>:
80024bb0:	eb cd 40 80 	pushm	r7,lr
80024bb4:	1a 97       	mov	r7,sp
80024bb6:	fe 68 00 00 	mov	r8,-131072
80024bba:	70 28       	ld.w	r8,r8[0x8]
80024bbc:	e2 18 00 10 	andl	r8,0x10,COH
80024bc0:	5f 18       	srne	r8
80024bc2:	5c 58       	castu.b	r8
80024bc4:	10 9c       	mov	r12,r8
80024bc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024bca <flashc_activate_security_bit>:
80024bca:	eb cd 40 c0 	pushm	r6-r7,lr
80024bce:	1a 97       	mov	r7,sp
80024bd0:	48 46       	lddpc	r6,80024be0 <flashc_activate_security_bit+0x16>
80024bd2:	1e 26       	rsub	r6,pc
80024bd4:	3f fb       	mov	r11,-1
80024bd6:	30 9c       	mov	r12,9
80024bd8:	f0 16 00 2a 	mcall	r6[168]
80024bdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024be0:	80 02       	ld.sh	r2,r0[0x0]
80024be2:	4a 56       	lddpc	r6,80024c74 <flashc_set_bootloader_protected_size+0x4c>

80024be4 <flashc_get_bootloader_protected_size>:
80024be4:	eb cd 40 c0 	pushm	r6-r7,lr
80024be8:	1a 97       	mov	r7,sp
80024bea:	20 1d       	sub	sp,4
80024bec:	48 e6       	lddpc	r6,80024c24 <flashc_get_bootloader_protected_size+0x40>
80024bee:	1e 26       	rsub	r6,pc
80024bf0:	30 3b       	mov	r11,3
80024bf2:	31 1c       	mov	r12,17
80024bf4:	f0 16 01 2d 	mcall	r6[1204]
80024bf8:	14 98       	mov	r8,r10
80024bfa:	16 99       	mov	r9,r11
80024bfc:	f0 08 11 07 	rsub	r8,r8,7
80024c00:	ef 48 ff fc 	st.w	r7[-4],r8
80024c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c08:	58 08       	cp.w	r8,0
80024c0a:	c0 80       	breq	80024c1a <flashc_get_bootloader_protected_size+0x36>
80024c0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c10:	e0 69 02 00 	mov	r9,512
80024c14:	f2 08 09 48 	lsl	r8,r9,r8
80024c18:	c0 28       	rjmp	80024c1c <flashc_get_bootloader_protected_size+0x38>
80024c1a:	30 08       	mov	r8,0
80024c1c:	10 9c       	mov	r12,r8
80024c1e:	2f fd       	sub	sp,-4
80024c20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c24:	80 02       	ld.sh	r2,r0[0x0]
80024c26:	4a 72       	lddpc	r2,80024cc0 <flashc_set_bootloader_protected_size+0x98>

80024c28 <flashc_set_bootloader_protected_size>:
80024c28:	eb cd 40 c0 	pushm	r6-r7,lr
80024c2c:	1a 97       	mov	r7,sp
80024c2e:	20 7d       	sub	sp,28
80024c30:	4a 46       	lddpc	r6,80024cc0 <flashc_set_bootloader_protected_size+0x98>
80024c32:	1e 26       	rsub	r6,pc
80024c34:	ef 4c ff e4 	st.w	r7[-28],r12
80024c38:	ee fa ff e4 	ld.w	r10,r7[-28]
80024c3c:	58 0a       	cp.w	r10,0
80024c3e:	c3 40       	breq	80024ca6 <flashc_set_bootloader_protected_size+0x7e>
80024c40:	ee fa ff e4 	ld.w	r10,r7[-28]
80024c44:	ef 4a ff f8 	st.w	r7[-8],r10
80024c48:	e0 6a 04 00 	mov	r10,1024
80024c4c:	ef 4a ff fc 	st.w	r7[-4],r10
80024c50:	ee fa ff f8 	ld.w	r10,r7[-8]
80024c54:	ee fb ff fc 	ld.w	r11,r7[-4]
80024c58:	f4 0b 0c 4a 	max	r10,r10,r11
80024c5c:	ef 4a ff f4 	st.w	r7[-12],r10
80024c60:	ee fa ff f4 	ld.w	r10,r7[-12]
80024c64:	ef 4a ff ec 	st.w	r7[-20],r10
80024c68:	e0 7a 00 00 	mov	r10,65536
80024c6c:	ef 4a ff f0 	st.w	r7[-16],r10
80024c70:	ee fa ff ec 	ld.w	r10,r7[-20]
80024c74:	ee fb ff f0 	ld.w	r11,r7[-16]
80024c78:	f4 0b 0d 4a 	min	r10,r10,r11
80024c7c:	ef 4a ff e8 	st.w	r7[-24],r10
80024c80:	ee fa ff e8 	ld.w	r10,r7[-24]
80024c84:	f4 ca fe 01 	sub	r10,r10,-511
80024c88:	f4 cb fe 01 	sub	r11,r10,-511
80024c8c:	58 0a       	cp.w	r10,0
80024c8e:	f6 0a 17 50 	movlt	r10,r11
80024c92:	a9 5a       	asr	r10,0x9
80024c94:	a1 7a       	lsl	r10,0x1
80024c96:	20 1a       	sub	r10,1
80024c98:	f4 0a 12 00 	clz	r10,r10
80024c9c:	21 8a       	sub	r10,24
80024c9e:	14 98       	mov	r8,r10
80024ca0:	bf 5a       	asr	r10,0x1f
80024ca2:	14 99       	mov	r9,r10
80024ca4:	c0 38       	rjmp	80024caa <flashc_set_bootloader_protected_size+0x82>
80024ca6:	30 78       	mov	r8,7
80024ca8:	30 09       	mov	r9,0
80024caa:	30 3b       	mov	r11,3
80024cac:	31 1c       	mov	r12,17
80024cae:	f0 16 01 59 	mcall	r6[1380]
80024cb2:	f0 16 01 6a 	mcall	r6[1448]
80024cb6:	18 98       	mov	r8,r12
80024cb8:	10 9c       	mov	r12,r8
80024cba:	2f 9d       	sub	sp,-28
80024cbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cc0:	80 02       	ld.sh	r2,r0[0x0]
80024cc2:	4a b6       	lddpc	r6,80024d6c <flashc_is_region_locked+0x24>

80024cc4 <flashc_is_external_privileged_fetch_locked>:
80024cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80024cc8:	1a 97       	mov	r7,sp
80024cca:	48 76       	lddpc	r6,80024ce4 <flashc_is_external_privileged_fetch_locked+0x20>
80024ccc:	1e 26       	rsub	r6,pc
80024cce:	31 0c       	mov	r12,16
80024cd0:	f0 16 00 f5 	mcall	r6[980]
80024cd4:	18 98       	mov	r8,r12
80024cd6:	ec 18 00 01 	eorl	r8,0x1
80024cda:	5c 58       	castu.b	r8
80024cdc:	5c 58       	castu.b	r8
80024cde:	10 9c       	mov	r12,r8
80024ce0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ce4:	80 02       	ld.sh	r2,r0[0x0]
80024ce6:	4b 50       	lddpc	r0,80024db8 <flashc_lock_region>

80024ce8 <flashc_lock_external_privileged_fetch>:
80024ce8:	eb cd 40 c0 	pushm	r6-r7,lr
80024cec:	1a 97       	mov	r7,sp
80024cee:	20 1d       	sub	sp,4
80024cf0:	48 96       	lddpc	r6,80024d14 <flashc_lock_external_privileged_fetch+0x2c>
80024cf2:	1e 26       	rsub	r6,pc
80024cf4:	18 98       	mov	r8,r12
80024cf6:	ef 68 ff fc 	st.b	r7[-4],r8
80024cfa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80024cfe:	ec 18 00 01 	eorl	r8,0x1
80024d02:	5c 58       	castu.b	r8
80024d04:	5c 58       	castu.b	r8
80024d06:	10 9b       	mov	r11,r8
80024d08:	31 0c       	mov	r12,16
80024d0a:	f0 16 01 1d 	mcall	r6[1140]
80024d0e:	2f fd       	sub	sp,-4
80024d10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d14:	80 02       	ld.sh	r2,r0[0x0]
80024d16:	4b 76       	lddpc	r6,80024df0 <flashc_lock_all_regions>

80024d18 <flashc_is_page_region_locked>:
80024d18:	eb cd 40 c0 	pushm	r6-r7,lr
80024d1c:	1a 97       	mov	r7,sp
80024d1e:	20 1d       	sub	sp,4
80024d20:	48 96       	lddpc	r6,80024d44 <flashc_is_page_region_locked+0x2c>
80024d22:	1e 26       	rsub	r6,pc
80024d24:	ef 4c ff fc 	st.w	r7[-4],r12
80024d28:	ee fc ff fc 	ld.w	r12,r7[-4]
80024d2c:	f0 16 01 93 	mcall	r6[1612]
80024d30:	18 98       	mov	r8,r12
80024d32:	10 9c       	mov	r12,r8
80024d34:	f0 16 01 42 	mcall	r6[1288]
80024d38:	18 98       	mov	r8,r12
80024d3a:	10 9c       	mov	r12,r8
80024d3c:	2f fd       	sub	sp,-4
80024d3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d42:	00 00       	add	r0,r0
80024d44:	80 02       	ld.sh	r2,r0[0x0]
80024d46:	4b a6       	lddpc	r6,80024e2c <flashc_lock_all_regions+0x3c>

80024d48 <flashc_is_region_locked>:
80024d48:	eb cd 40 80 	pushm	r7,lr
80024d4c:	1a 97       	mov	r7,sp
80024d4e:	20 1d       	sub	sp,4
80024d50:	ef 4c ff fc 	st.w	r7[-4],r12
80024d54:	fe 68 00 00 	mov	r8,-131072
80024d58:	70 29       	ld.w	r9,r8[0x8]
80024d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d5e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024d62:	e0 7a 00 00 	mov	r10,65536
80024d66:	f4 08 09 48 	lsl	r8,r10,r8
80024d6a:	f3 e8 00 08 	and	r8,r9,r8
80024d6e:	5f 18       	srne	r8
80024d70:	5c 58       	castu.b	r8
80024d72:	10 9c       	mov	r12,r8
80024d74:	2f fd       	sub	sp,-4
80024d76:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d7a <flashc_lock_page_region>:
80024d7a:	eb cd 40 c0 	pushm	r6-r7,lr
80024d7e:	1a 97       	mov	r7,sp
80024d80:	20 2d       	sub	sp,8
80024d82:	48 d6       	lddpc	r6,80024db4 <flashc_lock_page_region+0x3a>
80024d84:	1e 26       	rsub	r6,pc
80024d86:	ef 4c ff fc 	st.w	r7[-4],r12
80024d8a:	16 98       	mov	r8,r11
80024d8c:	ef 68 ff f8 	st.b	r7[-8],r8
80024d90:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024d94:	30 08       	mov	r8,0
80024d96:	f0 09 18 00 	cp.b	r9,r8
80024d9a:	c0 30       	breq	80024da0 <flashc_lock_page_region+0x26>
80024d9c:	30 48       	mov	r8,4
80024d9e:	c0 28       	rjmp	80024da2 <flashc_lock_page_region+0x28>
80024da0:	30 58       	mov	r8,5
80024da2:	ee fb ff fc 	ld.w	r11,r7[-4]
80024da6:	10 9c       	mov	r12,r8
80024da8:	f0 16 00 2a 	mcall	r6[168]
80024dac:	2f ed       	sub	sp,-8
80024dae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024db2:	00 00       	add	r0,r0
80024db4:	80 02       	ld.sh	r2,r0[0x0]
80024db6:	4c 08       	lddpc	r8,80024eb4 <flashc_read_gp_fuse_bit+0x5c>

80024db8 <flashc_lock_region>:
80024db8:	eb cd 40 e0 	pushm	r5-r7,lr
80024dbc:	1a 97       	mov	r7,sp
80024dbe:	20 2d       	sub	sp,8
80024dc0:	48 b6       	lddpc	r6,80024dec <flashc_lock_region+0x34>
80024dc2:	1e 26       	rsub	r6,pc
80024dc4:	ef 4c ff fc 	st.w	r7[-4],r12
80024dc8:	16 98       	mov	r8,r11
80024dca:	ef 68 ff f8 	st.b	r7[-8],r8
80024dce:	ef 35 ff f8 	ld.ub	r5,r7[-8]
80024dd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80024dd6:	f0 16 01 7a 	mcall	r6[1512]
80024dda:	18 98       	mov	r8,r12
80024ddc:	0a 9b       	mov	r11,r5
80024dde:	10 9c       	mov	r12,r8
80024de0:	f0 16 01 f7 	mcall	r6[2012]
80024de4:	2f ed       	sub	sp,-8
80024de6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024dea:	00 00       	add	r0,r0
80024dec:	80 02       	ld.sh	r2,r0[0x0]
80024dee:	4c 46       	lddpc	r6,80024efc <flashc_read_gp_fuse_bitfield+0x40>

80024df0 <flashc_lock_all_regions>:
80024df0:	eb cd 40 c0 	pushm	r6-r7,lr
80024df4:	1a 97       	mov	r7,sp
80024df6:	20 3d       	sub	sp,12
80024df8:	49 76       	lddpc	r6,80024e54 <flashc_lock_all_regions+0x64>
80024dfa:	1e 26       	rsub	r6,pc
80024dfc:	18 98       	mov	r8,r12
80024dfe:	ef 68 ff f4 	st.b	r7[-12],r8
80024e02:	30 08       	mov	r8,0
80024e04:	ef 48 ff f8 	st.w	r7[-8],r8
80024e08:	31 08       	mov	r8,16
80024e0a:	ef 48 ff fc 	st.w	r7[-4],r8
80024e0e:	c1 68       	rjmp	80024e3a <flashc_lock_all_regions+0x4a>
80024e10:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024e14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024e18:	20 19       	sub	r9,1
80024e1a:	ef 49 ff fc 	st.w	r7[-4],r9
80024e1e:	10 9b       	mov	r11,r8
80024e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e24:	f0 16 01 5a 	mcall	r6[1384]
80024e28:	ec f8 00 54 	ld.w	r8,r6[84]
80024e2c:	70 08       	ld.w	r8,r8[0x0]
80024e2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024e32:	f3 e8 10 08 	or	r8,r9,r8
80024e36:	ef 48 ff f8 	st.w	r7[-8],r8
80024e3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e3e:	58 08       	cp.w	r8,0
80024e40:	ce 81       	brne	80024e10 <flashc_lock_all_regions+0x20>
80024e42:	ec f8 00 54 	ld.w	r8,r6[84]
80024e46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024e4a:	91 09       	st.w	r8[0x0],r9
80024e4c:	2f dd       	sub	sp,-12
80024e4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e52:	00 00       	add	r0,r0
80024e54:	80 02       	ld.sh	r2,r0[0x0]
80024e56:	4c 7e       	lddpc	lr,80024f70 <flashc_read_gp_fuse_bitfield+0xb4>

80024e58 <flashc_read_gp_fuse_bit>:
80024e58:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024e5c:	1a 97       	mov	r7,sp
80024e5e:	20 1d       	sub	sp,4
80024e60:	49 66       	lddpc	r6,80024eb8 <flashc_read_gp_fuse_bit+0x60>
80024e62:	1e 26       	rsub	r6,pc
80024e64:	ef 4c ff fc 	st.w	r7[-4],r12
80024e68:	f0 16 00 79 	mcall	r6[484]
80024e6c:	14 98       	mov	r8,r10
80024e6e:	16 99       	mov	r9,r11
80024e70:	ee fa ff fc 	ld.w	r10,r7[-4]
80024e74:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80024e78:	14 9b       	mov	r11,r10
80024e7a:	e2 1b 00 20 	andl	r11,0x20,COH
80024e7e:	30 0c       	mov	r12,0
80024e80:	f2 05 15 01 	lsl	r5,r9,0x1
80024e84:	14 9e       	mov	lr,r10
80024e86:	ee 1e ff ff 	eorh	lr,0xffff
80024e8a:	ec 1e ff ff 	eorl	lr,0xffff
80024e8e:	ea 0e 09 4e 	lsl	lr,r5,lr
80024e92:	f0 0a 0a 42 	lsr	r2,r8,r10
80024e96:	fd e2 10 02 	or	r2,lr,r2
80024e9a:	f2 0a 0a 43 	lsr	r3,r9,r10
80024e9e:	58 0b       	cp.w	r11,0
80024ea0:	e6 02 17 10 	movne	r2,r3
80024ea4:	f8 03 17 10 	movne	r3,r12
80024ea8:	04 98       	mov	r8,r2
80024eaa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024eae:	5c 58       	castu.b	r8
80024eb0:	10 9c       	mov	r12,r8
80024eb2:	2f fd       	sub	sp,-4
80024eb4:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80024eb8:	80 02       	ld.sh	r2,r0[0x0]
80024eba:	4c e6       	lddpc	r6,80024ff0 <flashc_read_all_gp_fuses>

80024ebc <flashc_read_gp_fuse_bitfield>:
80024ebc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80024ec0:	1a 97       	mov	r7,sp
80024ec2:	20 5d       	sub	sp,20
80024ec4:	4b 16       	lddpc	r6,80024f88 <flashc_read_gp_fuse_bitfield+0xcc>
80024ec6:	1e 26       	rsub	r6,pc
80024ec8:	ef 4c ff f0 	st.w	r7[-16],r12
80024ecc:	ef 4b ff ec 	st.w	r7[-20],r11
80024ed0:	f0 16 00 79 	mcall	r6[484]
80024ed4:	14 98       	mov	r8,r10
80024ed6:	16 99       	mov	r9,r11
80024ed8:	ee fa ff f0 	ld.w	r10,r7[-16]
80024edc:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80024ee0:	14 9b       	mov	r11,r10
80024ee2:	e2 1b 00 20 	andl	r11,0x20,COH
80024ee6:	30 0c       	mov	r12,0
80024ee8:	f2 05 15 01 	lsl	r5,r9,0x1
80024eec:	14 9e       	mov	lr,r10
80024eee:	ee 1e ff ff 	eorh	lr,0xffff
80024ef2:	ec 1e ff ff 	eorl	lr,0xffff
80024ef6:	ea 0e 09 4e 	lsl	lr,r5,lr
80024efa:	f0 0a 0a 42 	lsr	r2,r8,r10
80024efe:	fd e2 10 02 	or	r2,lr,r2
80024f02:	f2 0a 0a 43 	lsr	r3,r9,r10
80024f06:	58 0b       	cp.w	r11,0
80024f08:	e6 02 17 10 	movne	r2,r3
80024f0c:	f8 03 17 10 	movne	r3,r12
80024f10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80024f14:	ef 48 ff f8 	st.w	r7[-8],r8
80024f18:	34 08       	mov	r8,64
80024f1a:	ef 48 ff fc 	st.w	r7[-4],r8
80024f1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024f22:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024f26:	f0 09 0d 48 	min	r8,r8,r9
80024f2a:	ef 48 ff f4 	st.w	r7[-12],r8
80024f2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024f32:	10 99       	mov	r9,r8
80024f34:	e2 19 00 20 	andl	r9,0x20,COH
80024f38:	30 0a       	mov	r10,0
80024f3a:	30 1b       	mov	r11,1
80024f3c:	f6 0c 16 01 	lsr	r12,r11,0x1
80024f40:	10 9b       	mov	r11,r8
80024f42:	ee 1b ff ff 	eorh	r11,0xffff
80024f46:	ec 1b ff ff 	eorl	r11,0xffff
80024f4a:	f8 0b 0a 4b 	lsr	r11,r12,r11
80024f4e:	30 0c       	mov	r12,0
80024f50:	f8 08 09 41 	lsl	r1,r12,r8
80024f54:	f7 e1 10 01 	or	r1,r11,r1
80024f58:	30 1b       	mov	r11,1
80024f5a:	f6 08 09 40 	lsl	r0,r11,r8
80024f5e:	58 09       	cp.w	r9,0
80024f60:	e0 01 17 10 	movne	r1,r0
80024f64:	f4 00 17 10 	movne	r0,r10
80024f68:	3f f8       	mov	r8,-1
80024f6a:	3f f9       	mov	r9,-1
80024f6c:	e0 08 00 0a 	add	r10,r0,r8
80024f70:	e2 09 00 4b 	adc	r11,r1,r9
80024f74:	e5 ea 00 08 	and	r8,r2,r10
80024f78:	e7 eb 00 09 	and	r9,r3,r11
80024f7c:	10 9a       	mov	r10,r8
80024f7e:	12 9b       	mov	r11,r9
80024f80:	2f bd       	sub	sp,-20
80024f82:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80024f86:	00 00       	add	r0,r0
80024f88:	80 02       	ld.sh	r2,r0[0x0]
80024f8a:	4d 4a       	lddpc	r10,800250d8 <flashc_erase_gp_fuse_bitfield+0x68>

80024f8c <flashc_read_gp_fuse_byte>:
80024f8c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024f90:	1a 97       	mov	r7,sp
80024f92:	20 1d       	sub	sp,4
80024f94:	49 66       	lddpc	r6,80024fec <flashc_read_gp_fuse_byte+0x60>
80024f96:	1e 26       	rsub	r6,pc
80024f98:	ef 4c ff fc 	st.w	r7[-4],r12
80024f9c:	f0 16 00 79 	mcall	r6[484]
80024fa0:	14 98       	mov	r8,r10
80024fa2:	16 99       	mov	r9,r11
80024fa4:	ee fa ff fc 	ld.w	r10,r7[-4]
80024fa8:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80024fac:	a3 7a       	lsl	r10,0x3
80024fae:	14 9b       	mov	r11,r10
80024fb0:	e2 1b 00 20 	andl	r11,0x20,COH
80024fb4:	30 0c       	mov	r12,0
80024fb6:	f2 05 15 01 	lsl	r5,r9,0x1
80024fba:	14 9e       	mov	lr,r10
80024fbc:	ee 1e ff ff 	eorh	lr,0xffff
80024fc0:	ec 1e ff ff 	eorl	lr,0xffff
80024fc4:	ea 0e 09 4e 	lsl	lr,r5,lr
80024fc8:	f0 0a 0a 42 	lsr	r2,r8,r10
80024fcc:	fd e2 10 02 	or	r2,lr,r2
80024fd0:	f2 0a 0a 43 	lsr	r3,r9,r10
80024fd4:	58 0b       	cp.w	r11,0
80024fd6:	e6 02 17 10 	movne	r2,r3
80024fda:	f8 03 17 10 	movne	r3,r12
80024fde:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
80024fe2:	10 9c       	mov	r12,r8
80024fe4:	2f fd       	sub	sp,-4
80024fe6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80024fea:	00 00       	add	r0,r0
80024fec:	80 02       	ld.sh	r2,r0[0x0]
80024fee:	4e 1a       	lddpc	r10,80025170 <flashc_erase_gp_fuse_bitfield+0x100>

80024ff0 <flashc_read_all_gp_fuses>:
80024ff0:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80024ff4:	1a 97       	mov	r7,sp
80024ff6:	fe 6c 00 00 	mov	r12,-131072
80024ffa:	78 6c       	ld.w	r12,r12[0x18]
80024ffc:	18 9a       	mov	r10,r12
80024ffe:	30 0b       	mov	r11,0
80025000:	fe 6c 00 00 	mov	r12,-131072
80025004:	78 5c       	ld.w	r12,r12[0x14]
80025006:	18 92       	mov	r2,r12
80025008:	30 03       	mov	r3,0
8002500a:	e4 09 15 00 	lsl	r9,r2,0x0
8002500e:	30 08       	mov	r8,0
80025010:	f5 e8 10 02 	or	r2,r10,r8
80025014:	f7 e9 10 03 	or	r3,r11,r9
80025018:	04 98       	mov	r8,r2
8002501a:	06 99       	mov	r9,r3
8002501c:	10 9a       	mov	r10,r8
8002501e:	12 9b       	mov	r11,r9
80025020:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80025024 <flashc_erase_gp_fuse_bit>:
80025024:	eb cd 40 c0 	pushm	r6-r7,lr
80025028:	1a 97       	mov	r7,sp
8002502a:	20 2d       	sub	sp,8
8002502c:	49 06       	lddpc	r6,8002506c <flashc_erase_gp_fuse_bit+0x48>
8002502e:	1e 26       	rsub	r6,pc
80025030:	ef 4c ff fc 	st.w	r7[-4],r12
80025034:	16 98       	mov	r8,r11
80025036:	ef 68 ff f8 	st.b	r7[-8],r8
8002503a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002503e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025042:	10 9b       	mov	r11,r8
80025044:	30 8c       	mov	r12,8
80025046:	f0 16 00 2a 	mcall	r6[168]
8002504a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002504e:	30 08       	mov	r8,0
80025050:	f0 09 18 00 	cp.b	r9,r8
80025054:	c0 70       	breq	80025062 <flashc_erase_gp_fuse_bit+0x3e>
80025056:	ee fc ff fc 	ld.w	r12,r7[-4]
8002505a:	f0 16 00 f5 	mcall	r6[980]
8002505e:	18 98       	mov	r8,r12
80025060:	c0 28       	rjmp	80025064 <flashc_erase_gp_fuse_bit+0x40>
80025062:	30 18       	mov	r8,1
80025064:	10 9c       	mov	r12,r8
80025066:	2f ed       	sub	sp,-8
80025068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002506c:	80 02       	ld.sh	r2,r0[0x0]
8002506e:	4e b2       	lddpc	r2,80025218 <flashc_erase_gp_fuse_byte+0x90>

80025070 <flashc_erase_gp_fuse_bitfield>:
80025070:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025074:	1a 97       	mov	r7,sp
80025076:	20 8d       	sub	sp,32
80025078:	4c 36       	lddpc	r6,80025184 <flashc_erase_gp_fuse_bitfield+0x114>
8002507a:	1e 26       	rsub	r6,pc
8002507c:	ef 4c ff e8 	st.w	r7[-24],r12
80025080:	ef 4b ff e4 	st.w	r7[-28],r11
80025084:	14 98       	mov	r8,r10
80025086:	ef 68 ff e0 	st.b	r7[-32],r8
8002508a:	30 08       	mov	r8,0
8002508c:	ef 48 ff ec 	st.w	r7[-20],r8
80025090:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025094:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025098:	ef 48 ff e8 	st.w	r7[-24],r8
8002509c:	ee f8 ff e4 	ld.w	r8,r7[-28]
800250a0:	ef 48 ff f8 	st.w	r7[-8],r8
800250a4:	34 08       	mov	r8,64
800250a6:	ef 48 ff fc 	st.w	r7[-4],r8
800250aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800250ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800250b2:	f0 09 0d 48 	min	r8,r8,r9
800250b6:	ef 48 ff f4 	st.w	r7[-12],r8
800250ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250be:	ef 48 ff e4 	st.w	r7[-28],r8
800250c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800250c6:	ef 48 ff f0 	st.w	r7[-16],r8
800250ca:	c1 48       	rjmp	800250f2 <flashc_erase_gp_fuse_bitfield+0x82>
800250cc:	30 0b       	mov	r11,0
800250ce:	ee fc ff f0 	ld.w	r12,r7[-16]
800250d2:	f0 16 00 ec 	mcall	r6[944]
800250d6:	ec f8 00 54 	ld.w	r8,r6[84]
800250da:	70 08       	ld.w	r8,r8[0x0]
800250dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800250e0:	f3 e8 10 08 	or	r8,r9,r8
800250e4:	ef 48 ff ec 	st.w	r7[-20],r8
800250e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800250ec:	2f f8       	sub	r8,-1
800250ee:	ef 48 ff f0 	st.w	r7[-16],r8
800250f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800250f6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800250fa:	10 09       	add	r9,r8
800250fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025100:	10 39       	cp.w	r9,r8
80025102:	fe 9b ff e5 	brhi	800250cc <flashc_erase_gp_fuse_bitfield+0x5c>
80025106:	ec f8 00 54 	ld.w	r8,r6[84]
8002510a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002510e:	91 09       	st.w	r8[0x0],r9
80025110:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80025114:	30 08       	mov	r8,0
80025116:	f0 09 18 00 	cp.b	r9,r8
8002511a:	c3 00       	breq	8002517a <flashc_erase_gp_fuse_bitfield+0x10a>
8002511c:	ee fb ff e4 	ld.w	r11,r7[-28]
80025120:	ee fc ff e8 	ld.w	r12,r7[-24]
80025124:	f0 16 01 2d 	mcall	r6[1204]
80025128:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002512c:	10 99       	mov	r9,r8
8002512e:	e2 19 00 20 	andl	r9,0x20,COH
80025132:	30 0c       	mov	r12,0
80025134:	30 1e       	mov	lr,1
80025136:	fc 05 16 01 	lsr	r5,lr,0x1
8002513a:	10 9e       	mov	lr,r8
8002513c:	ee 1e ff ff 	eorh	lr,0xffff
80025140:	ec 1e ff ff 	eorl	lr,0xffff
80025144:	ea 0e 0a 4e 	lsr	lr,r5,lr
80025148:	30 05       	mov	r5,0
8002514a:	ea 08 09 43 	lsl	r3,r5,r8
8002514e:	fd e3 10 03 	or	r3,lr,r3
80025152:	30 1e       	mov	lr,1
80025154:	fc 08 09 42 	lsl	r2,lr,r8
80025158:	58 09       	cp.w	r9,0
8002515a:	e4 03 17 10 	movne	r3,r2
8002515e:	f8 02 17 10 	movne	r2,r12
80025162:	3f f8       	mov	r8,-1
80025164:	3f f9       	mov	r9,-1
80025166:	e4 08 00 08 	add	r8,r2,r8
8002516a:	e6 09 00 49 	adc	r9,r3,r9
8002516e:	10 3a       	cp.w	r10,r8
80025170:	f2 0b 13 00 	cpc	r11,r9
80025174:	5f 08       	sreq	r8
80025176:	5c 58       	castu.b	r8
80025178:	c0 28       	rjmp	8002517c <flashc_erase_gp_fuse_bitfield+0x10c>
8002517a:	30 18       	mov	r8,1
8002517c:	10 9c       	mov	r12,r8
8002517e:	2f 8d       	sub	sp,-32
80025180:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025184:	80 02       	ld.sh	r2,r0[0x0]
80025186:	4e fe       	lddpc	lr,80025340 <flashc_write_gp_fuse_bitfield+0x60>

80025188 <flashc_erase_gp_fuse_byte>:
80025188:	eb cd 40 c0 	pushm	r6-r7,lr
8002518c:	1a 97       	mov	r7,sp
8002518e:	20 6d       	sub	sp,24
80025190:	4b 26       	lddpc	r6,80025258 <flashc_erase_gp_fuse_byte+0xd0>
80025192:	1e 26       	rsub	r6,pc
80025194:	ef 4c ff ec 	st.w	r7[-20],r12
80025198:	16 98       	mov	r8,r11
8002519a:	ef 68 ff e8 	st.b	r7[-24],r8
8002519e:	f0 16 00 79 	mcall	r6[484]
800251a2:	14 98       	mov	r8,r10
800251a4:	16 99       	mov	r9,r11
800251a6:	ee e9 ff f8 	st.d	r7[-8],r8
800251aa:	30 0c       	mov	r12,0
800251ac:	f0 16 00 d2 	mcall	r6[840]
800251b0:	ec f8 00 54 	ld.w	r8,r6[84]
800251b4:	70 08       	ld.w	r8,r8[0x0]
800251b6:	ef 48 ff f0 	st.w	r7[-16],r8
800251ba:	30 08       	mov	r8,0
800251bc:	ef 48 ff f4 	st.w	r7[-12],r8
800251c0:	c2 b8       	rjmp	80025216 <flashc_erase_gp_fuse_byte+0x8e>
800251c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800251c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800251ca:	10 39       	cp.w	r9,r8
800251cc:	c1 10       	breq	800251ee <flashc_erase_gp_fuse_byte+0x66>
800251ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800251d2:	10 9b       	mov	r11,r8
800251d4:	ee fc ff f4 	ld.w	r12,r7[-12]
800251d8:	f0 16 00 8e 	mcall	r6[568]
800251dc:	ec f8 00 54 	ld.w	r8,r6[84]
800251e0:	70 08       	ld.w	r8,r8[0x0]
800251e2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800251e6:	f3 e8 10 08 	or	r8,r9,r8
800251ea:	ef 48 ff f0 	st.w	r7[-16],r8
800251ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800251f2:	2f f8       	sub	r8,-1
800251f4:	ef 48 ff f4 	st.w	r7[-12],r8
800251f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800251fc:	b9 68       	lsl	r8,0x18
800251fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025202:	a9 89       	lsr	r9,0x8
80025204:	f3 e8 10 08 	or	r8,r9,r8
80025208:	ef 48 ff fc 	st.w	r7[-4],r8
8002520c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025210:	a9 88       	lsr	r8,0x8
80025212:	ef 48 ff f8 	st.w	r7[-8],r8
80025216:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002521a:	58 78       	cp.w	r8,7
8002521c:	fe 98 ff d3 	brls	800251c2 <flashc_erase_gp_fuse_byte+0x3a>
80025220:	ec f8 00 54 	ld.w	r8,r6[84]
80025224:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025228:	91 09       	st.w	r8[0x0],r9
8002522a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8002522e:	30 08       	mov	r8,0
80025230:	f0 09 18 00 	cp.b	r9,r8
80025234:	c0 d0       	breq	8002524e <flashc_erase_gp_fuse_byte+0xc6>
80025236:	ee fc ff ec 	ld.w	r12,r7[-20]
8002523a:	f0 16 02 1e 	mcall	r6[2168]
8002523e:	18 98       	mov	r8,r12
80025240:	10 99       	mov	r9,r8
80025242:	3f f8       	mov	r8,-1
80025244:	f0 09 18 00 	cp.b	r9,r8
80025248:	5f 08       	sreq	r8
8002524a:	5c 58       	castu.b	r8
8002524c:	c0 28       	rjmp	80025250 <flashc_erase_gp_fuse_byte+0xc8>
8002524e:	30 18       	mov	r8,1
80025250:	10 9c       	mov	r12,r8
80025252:	2f ad       	sub	sp,-24
80025254:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025258:	80 02       	ld.sh	r2,r0[0x0]
8002525a:	50 16       	stdsp	sp[0x4],r6

8002525c <flashc_erase_all_gp_fuses>:
8002525c:	eb cd 40 c0 	pushm	r6-r7,lr
80025260:	1a 97       	mov	r7,sp
80025262:	20 1d       	sub	sp,4
80025264:	48 f6       	lddpc	r6,800252a0 <flashc_erase_all_gp_fuses+0x44>
80025266:	1e 26       	rsub	r6,pc
80025268:	18 98       	mov	r8,r12
8002526a:	ef 68 ff fc 	st.b	r7[-4],r8
8002526e:	3f fb       	mov	r11,-1
80025270:	30 bc       	mov	r12,11
80025272:	f0 16 00 2a 	mcall	r6[168]
80025276:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8002527a:	30 08       	mov	r8,0
8002527c:	f0 09 18 00 	cp.b	r9,r8
80025280:	c0 b0       	breq	80025296 <flashc_erase_all_gp_fuses+0x3a>
80025282:	f0 16 00 79 	mcall	r6[484]
80025286:	14 98       	mov	r8,r10
80025288:	16 99       	mov	r9,r11
8002528a:	f3 e8 00 08 	and	r8,r9,r8
8002528e:	5b f8       	cp.w	r8,-1
80025290:	5f 08       	sreq	r8
80025292:	5c 58       	castu.b	r8
80025294:	c0 28       	rjmp	80025298 <flashc_erase_all_gp_fuses+0x3c>
80025296:	30 18       	mov	r8,1
80025298:	10 9c       	mov	r12,r8
8002529a:	2f fd       	sub	sp,-4
8002529c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800252a0:	80 02       	ld.sh	r2,r0[0x0]
800252a2:	50 ea       	stdsp	sp[0x38],r10

800252a4 <flashc_write_gp_fuse_bit>:
800252a4:	eb cd 40 c0 	pushm	r6-r7,lr
800252a8:	1a 97       	mov	r7,sp
800252aa:	20 2d       	sub	sp,8
800252ac:	48 c6       	lddpc	r6,800252dc <flashc_write_gp_fuse_bit+0x38>
800252ae:	1e 26       	rsub	r6,pc
800252b0:	ef 4c ff fc 	st.w	r7[-4],r12
800252b4:	16 98       	mov	r8,r11
800252b6:	ef 68 ff f8 	st.b	r7[-8],r8
800252ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800252be:	ec 18 00 01 	eorl	r8,0x1
800252c2:	5c 58       	castu.b	r8
800252c4:	c0 90       	breq	800252d6 <flashc_write_gp_fuse_bit+0x32>
800252c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800252ca:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800252ce:	10 9b       	mov	r11,r8
800252d0:	30 7c       	mov	r12,7
800252d2:	f0 16 00 2a 	mcall	r6[168]
800252d6:	2f ed       	sub	sp,-8
800252d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800252dc:	80 02       	ld.sh	r2,r0[0x0]
800252de:	51 32       	stdsp	sp[0x4c],r2

800252e0 <flashc_write_gp_fuse_bitfield>:
800252e0:	eb cd 40 c0 	pushm	r6-r7,lr
800252e4:	1a 97       	mov	r7,sp
800252e6:	20 9d       	sub	sp,36
800252e8:	4b 16       	lddpc	r6,800253ac <flashc_write_gp_fuse_bitfield+0xcc>
800252ea:	1e 26       	rsub	r6,pc
800252ec:	ef 4c ff e8 	st.w	r7[-24],r12
800252f0:	ef 4b ff e4 	st.w	r7[-28],r11
800252f4:	ee e9 ff dc 	st.d	r7[-36],r8
800252f8:	30 08       	mov	r8,0
800252fa:	ef 48 ff ec 	st.w	r7[-20],r8
800252fe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025302:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025306:	ef 48 ff e8 	st.w	r7[-24],r8
8002530a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002530e:	ef 48 ff f8 	st.w	r7[-8],r8
80025312:	34 08       	mov	r8,64
80025314:	ef 48 ff fc 	st.w	r7[-4],r8
80025318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002531c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025320:	f0 09 0d 48 	min	r8,r8,r9
80025324:	ef 48 ff f4 	st.w	r7[-12],r8
80025328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002532c:	ef 48 ff e4 	st.w	r7[-28],r8
80025330:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025334:	ef 48 ff f0 	st.w	r7[-16],r8
80025338:	c2 88       	rjmp	80025388 <flashc_write_gp_fuse_bitfield+0xa8>
8002533a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002533e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025342:	5c 58       	castu.b	r8
80025344:	10 9b       	mov	r11,r8
80025346:	ee fc ff f0 	ld.w	r12,r7[-16]
8002534a:	f0 16 00 dd 	mcall	r6[884]
8002534e:	ec f8 00 54 	ld.w	r8,r6[84]
80025352:	70 08       	ld.w	r8,r8[0x0]
80025354:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025358:	f3 e8 10 08 	or	r8,r9,r8
8002535c:	ef 48 ff ec 	st.w	r7[-20],r8
80025360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025364:	2f f8       	sub	r8,-1
80025366:	ef 48 ff f0 	st.w	r7[-16],r8
8002536a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002536e:	bf 78       	lsl	r8,0x1f
80025370:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025374:	a1 99       	lsr	r9,0x1
80025376:	f3 e8 10 08 	or	r8,r9,r8
8002537a:	ef 48 ff e0 	st.w	r7[-32],r8
8002537e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025382:	a1 98       	lsr	r8,0x1
80025384:	ef 48 ff dc 	st.w	r7[-36],r8
80025388:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002538c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025390:	10 09       	add	r9,r8
80025392:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025396:	10 39       	cp.w	r9,r8
80025398:	fe 9b ff d1 	brhi	8002533a <flashc_write_gp_fuse_bitfield+0x5a>
8002539c:	ec f8 00 54 	ld.w	r8,r6[84]
800253a0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800253a4:	91 09       	st.w	r8[0x0],r9
800253a6:	2f 7d       	sub	sp,-36
800253a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800253ac:	80 02       	ld.sh	r2,r0[0x0]
800253ae:	51 6e       	stdsp	sp[0x58],lr

800253b0 <flashc_write_gp_fuse_byte>:
800253b0:	eb cd 40 c0 	pushm	r6-r7,lr
800253b4:	1a 97       	mov	r7,sp
800253b6:	20 2d       	sub	sp,8
800253b8:	48 c6       	lddpc	r6,800253e8 <flashc_write_gp_fuse_byte+0x38>
800253ba:	1e 26       	rsub	r6,pc
800253bc:	ef 4c ff fc 	st.w	r7[-4],r12
800253c0:	16 98       	mov	r8,r11
800253c2:	ef 68 ff f8 	st.b	r7[-8],r8
800253c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800253ca:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800253ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800253d2:	a3 78       	lsl	r8,0x3
800253d4:	f3 e8 10 08 	or	r8,r9,r8
800253d8:	10 9b       	mov	r11,r8
800253da:	30 ac       	mov	r12,10
800253dc:	f0 16 00 2a 	mcall	r6[168]
800253e0:	2f ed       	sub	sp,-8
800253e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800253e6:	00 00       	add	r0,r0
800253e8:	80 02       	ld.sh	r2,r0[0x0]
800253ea:	52 3e       	stdsp	sp[0x8c],lr

800253ec <flashc_write_all_gp_fuses>:
800253ec:	eb cd 40 c0 	pushm	r6-r7,lr
800253f0:	1a 97       	mov	r7,sp
800253f2:	20 4d       	sub	sp,16
800253f4:	49 e6       	lddpc	r6,8002546c <flashc_write_all_gp_fuses+0x80>
800253f6:	1e 26       	rsub	r6,pc
800253f8:	ee eb ff f0 	st.d	r7[-16],r10
800253fc:	30 08       	mov	r8,0
800253fe:	ef 48 ff f8 	st.w	r7[-8],r8
80025402:	30 08       	mov	r8,0
80025404:	ef 48 ff fc 	st.w	r7[-4],r8
80025408:	c2 58       	rjmp	80025452 <flashc_write_all_gp_fuses+0x66>
8002540a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002540e:	10 9b       	mov	r11,r8
80025410:	ee fc ff fc 	ld.w	r12,r7[-4]
80025414:	f0 16 00 8e 	mcall	r6[568]
80025418:	ec f8 00 54 	ld.w	r8,r6[84]
8002541c:	70 08       	ld.w	r8,r8[0x0]
8002541e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025422:	f3 e8 10 08 	or	r8,r9,r8
80025426:	ef 48 ff f8 	st.w	r7[-8],r8
8002542a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002542e:	2f f8       	sub	r8,-1
80025430:	ef 48 ff fc 	st.w	r7[-4],r8
80025434:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025438:	b9 68       	lsl	r8,0x18
8002543a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002543e:	a9 89       	lsr	r9,0x8
80025440:	f3 e8 10 08 	or	r8,r9,r8
80025444:	ef 48 ff f4 	st.w	r7[-12],r8
80025448:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002544c:	a9 88       	lsr	r8,0x8
8002544e:	ef 48 ff f0 	st.w	r7[-16],r8
80025452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025456:	58 78       	cp.w	r8,7
80025458:	fe 98 ff d9 	brls	8002540a <flashc_write_all_gp_fuses+0x1e>
8002545c:	ec f8 00 54 	ld.w	r8,r6[84]
80025460:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025464:	91 09       	st.w	r8[0x0],r9
80025466:	2f cd       	sub	sp,-16
80025468:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002546c:	80 02       	ld.sh	r2,r0[0x0]
8002546e:	52 7a       	stdsp	sp[0x9c],r10

80025470 <flashc_set_gp_fuse_bit>:
80025470:	eb cd 40 c0 	pushm	r6-r7,lr
80025474:	1a 97       	mov	r7,sp
80025476:	20 2d       	sub	sp,8
80025478:	48 e6       	lddpc	r6,800254b0 <flashc_set_gp_fuse_bit+0x40>
8002547a:	1e 26       	rsub	r6,pc
8002547c:	ef 4c ff fc 	st.w	r7[-4],r12
80025480:	16 98       	mov	r8,r11
80025482:	ef 68 ff f8 	st.b	r7[-8],r8
80025486:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002548a:	30 08       	mov	r8,0
8002548c:	f0 09 18 00 	cp.b	r9,r8
80025490:	c0 70       	breq	8002549e <flashc_set_gp_fuse_bit+0x2e>
80025492:	30 0b       	mov	r11,0
80025494:	ee fc ff fc 	ld.w	r12,r7[-4]
80025498:	f0 16 00 ec 	mcall	r6[944]
8002549c:	c0 68       	rjmp	800254a8 <flashc_set_gp_fuse_bit+0x38>
8002549e:	30 0b       	mov	r11,0
800254a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800254a4:	f0 16 00 dd 	mcall	r6[884]
800254a8:	2f ed       	sub	sp,-8
800254aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800254ae:	00 00       	add	r0,r0
800254b0:	80 02       	ld.sh	r2,r0[0x0]
800254b2:	52 fe       	stdsp	sp[0xbc],lr

800254b4 <flashc_set_gp_fuse_bitfield>:
800254b4:	eb cd 40 c0 	pushm	r6-r7,lr
800254b8:	1a 97       	mov	r7,sp
800254ba:	20 9d       	sub	sp,36
800254bc:	4b 16       	lddpc	r6,80025580 <flashc_set_gp_fuse_bitfield+0xcc>
800254be:	1e 26       	rsub	r6,pc
800254c0:	ef 4c ff e8 	st.w	r7[-24],r12
800254c4:	ef 4b ff e4 	st.w	r7[-28],r11
800254c8:	ee e9 ff dc 	st.d	r7[-36],r8
800254cc:	30 08       	mov	r8,0
800254ce:	ef 48 ff ec 	st.w	r7[-20],r8
800254d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800254d6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800254da:	ef 48 ff e8 	st.w	r7[-24],r8
800254de:	ee f8 ff e4 	ld.w	r8,r7[-28]
800254e2:	ef 48 ff f8 	st.w	r7[-8],r8
800254e6:	34 08       	mov	r8,64
800254e8:	ef 48 ff fc 	st.w	r7[-4],r8
800254ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800254f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800254f4:	f0 09 0d 48 	min	r8,r8,r9
800254f8:	ef 48 ff f4 	st.w	r7[-12],r8
800254fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025500:	ef 48 ff e4 	st.w	r7[-28],r8
80025504:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025508:	ef 48 ff f0 	st.w	r7[-16],r8
8002550c:	c2 88       	rjmp	8002555c <flashc_set_gp_fuse_bitfield+0xa8>
8002550e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025512:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025516:	5c 58       	castu.b	r8
80025518:	10 9b       	mov	r11,r8
8002551a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002551e:	f0 16 01 1d 	mcall	r6[1140]
80025522:	ec f8 00 54 	ld.w	r8,r6[84]
80025526:	70 08       	ld.w	r8,r8[0x0]
80025528:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002552c:	f3 e8 10 08 	or	r8,r9,r8
80025530:	ef 48 ff ec 	st.w	r7[-20],r8
80025534:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025538:	2f f8       	sub	r8,-1
8002553a:	ef 48 ff f0 	st.w	r7[-16],r8
8002553e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025542:	bf 78       	lsl	r8,0x1f
80025544:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025548:	a1 99       	lsr	r9,0x1
8002554a:	f3 e8 10 08 	or	r8,r9,r8
8002554e:	ef 48 ff e0 	st.w	r7[-32],r8
80025552:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025556:	a1 98       	lsr	r8,0x1
80025558:	ef 48 ff dc 	st.w	r7[-36],r8
8002555c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025560:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025564:	10 09       	add	r9,r8
80025566:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002556a:	10 39       	cp.w	r9,r8
8002556c:	fe 9b ff d1 	brhi	8002550e <flashc_set_gp_fuse_bitfield+0x5a>
80025570:	ec f8 00 54 	ld.w	r8,r6[84]
80025574:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025578:	91 09       	st.w	r8[0x0],r9
8002557a:	2f 7d       	sub	sp,-36
8002557c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025580:	80 02       	ld.sh	r2,r0[0x0]
80025582:	53 42       	stdsp	sp[0xd0],r2

80025584 <flashc_set_gp_fuse_byte>:
80025584:	eb cd 40 c0 	pushm	r6-r7,lr
80025588:	1a 97       	mov	r7,sp
8002558a:	20 3d       	sub	sp,12
8002558c:	49 c6       	lddpc	r6,800255fc <flashc_set_gp_fuse_byte+0x78>
8002558e:	1e 26       	rsub	r6,pc
80025590:	ef 4c ff f8 	st.w	r7[-8],r12
80025594:	16 98       	mov	r8,r11
80025596:	ef 68 ff f4 	st.b	r7[-12],r8
8002559a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002559e:	58 08       	cp.w	r8,0
800255a0:	c0 a0       	breq	800255b4 <flashc_set_gp_fuse_byte+0x30>
800255a2:	e0 48 00 ff 	cp.w	r8,255
800255a6:	c0 d1       	brne	800255c0 <flashc_set_gp_fuse_byte+0x3c>
800255a8:	30 0b       	mov	r11,0
800255aa:	ee fc ff f8 	ld.w	r12,r7[-8]
800255ae:	f0 16 01 11 	mcall	r6[1092]
800255b2:	c2 18       	rjmp	800255f4 <flashc_set_gp_fuse_byte+0x70>
800255b4:	30 0b       	mov	r11,0
800255b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800255ba:	f0 16 00 8e 	mcall	r6[568]
800255be:	c1 b8       	rjmp	800255f4 <flashc_set_gp_fuse_byte+0x70>
800255c0:	30 0b       	mov	r11,0
800255c2:	ee fc ff f8 	ld.w	r12,r7[-8]
800255c6:	f0 16 01 11 	mcall	r6[1092]
800255ca:	ec f8 00 54 	ld.w	r8,r6[84]
800255ce:	70 08       	ld.w	r8,r8[0x0]
800255d0:	ef 48 ff fc 	st.w	r7[-4],r8
800255d4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800255d8:	10 9b       	mov	r11,r8
800255da:	ee fc ff f8 	ld.w	r12,r7[-8]
800255de:	f0 16 00 8e 	mcall	r6[568]
800255e2:	ec f8 00 54 	ld.w	r8,r6[84]
800255e6:	70 09       	ld.w	r9,r8[0x0]
800255e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800255ec:	10 49       	or	r9,r8
800255ee:	ec f8 00 54 	ld.w	r8,r6[84]
800255f2:	91 09       	st.w	r8[0x0],r9
800255f4:	2f dd       	sub	sp,-12
800255f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800255fa:	00 00       	add	r0,r0
800255fc:	80 02       	ld.sh	r2,r0[0x0]
800255fe:	54 12       	stdsp	sp[0x104],r2

80025600 <flashc_set_all_gp_fuses>:
80025600:	eb cd 40 c0 	pushm	r6-r7,lr
80025604:	1a 97       	mov	r7,sp
80025606:	20 3d       	sub	sp,12
80025608:	49 86       	lddpc	r6,80025668 <flashc_set_all_gp_fuses+0x68>
8002560a:	1e 26       	rsub	r6,pc
8002560c:	ee eb ff f4 	st.d	r7[-12],r10
80025610:	ee e8 ff f4 	ld.d	r8,r7[-12]
80025614:	58 08       	cp.w	r8,0
80025616:	5c 29       	cpc	r9
80025618:	c0 b0       	breq	8002562e <flashc_set_all_gp_fuses+0x2e>
8002561a:	3f fa       	mov	r10,-1
8002561c:	3f fb       	mov	r11,-1
8002561e:	14 38       	cp.w	r8,r10
80025620:	f6 09 13 00 	cpc	r9,r11
80025624:	c0 a1       	brne	80025638 <flashc_set_all_gp_fuses+0x38>
80025626:	30 0c       	mov	r12,0
80025628:	f0 16 00 d2 	mcall	r6[840]
8002562c:	c1 b8       	rjmp	80025662 <flashc_set_all_gp_fuses+0x62>
8002562e:	30 0a       	mov	r10,0
80025630:	30 0b       	mov	r11,0
80025632:	f0 16 00 f4 	mcall	r6[976]
80025636:	c1 68       	rjmp	80025662 <flashc_set_all_gp_fuses+0x62>
80025638:	30 0c       	mov	r12,0
8002563a:	f0 16 00 d2 	mcall	r6[840]
8002563e:	ec f8 00 54 	ld.w	r8,r6[84]
80025642:	70 08       	ld.w	r8,r8[0x0]
80025644:	ef 48 ff fc 	st.w	r7[-4],r8
80025648:	ee ea ff f4 	ld.d	r10,r7[-12]
8002564c:	f0 16 00 f4 	mcall	r6[976]
80025650:	ec f8 00 54 	ld.w	r8,r6[84]
80025654:	70 09       	ld.w	r9,r8[0x0]
80025656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002565a:	10 49       	or	r9,r8
8002565c:	ec f8 00 54 	ld.w	r8,r6[84]
80025660:	91 09       	st.w	r8[0x0],r9
80025662:	2f dd       	sub	sp,-12
80025664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025668:	80 02       	ld.sh	r2,r0[0x0]
8002566a:	54 8e       	stdsp	sp[0x120],lr

8002566c <flashc_clear_page_buffer>:
8002566c:	eb cd 40 c0 	pushm	r6-r7,lr
80025670:	1a 97       	mov	r7,sp
80025672:	48 56       	lddpc	r6,80025684 <flashc_clear_page_buffer+0x18>
80025674:	1e 26       	rsub	r6,pc
80025676:	3f fb       	mov	r11,-1
80025678:	30 3c       	mov	r12,3
8002567a:	f0 16 00 2a 	mcall	r6[168]
8002567e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025682:	00 00       	add	r0,r0
80025684:	80 02       	ld.sh	r2,r0[0x0]
80025686:	54 f8       	stdsp	sp[0x13c],r8

80025688 <flashc_is_page_erased>:
80025688:	eb cd 40 80 	pushm	r7,lr
8002568c:	1a 97       	mov	r7,sp
8002568e:	fe 68 00 00 	mov	r8,-131072
80025692:	70 28       	ld.w	r8,r8[0x8]
80025694:	e2 18 00 20 	andl	r8,0x20,COH
80025698:	5f 18       	srne	r8
8002569a:	5c 58       	castu.b	r8
8002569c:	10 9c       	mov	r12,r8
8002569e:	e3 cd 80 80 	ldm	sp++,r7,pc

800256a2 <flashc_quick_page_read>:
800256a2:	eb cd 40 c0 	pushm	r6-r7,lr
800256a6:	1a 97       	mov	r7,sp
800256a8:	20 1d       	sub	sp,4
800256aa:	48 96       	lddpc	r6,800256cc <flashc_quick_page_read+0x2a>
800256ac:	1e 26       	rsub	r6,pc
800256ae:	ef 4c ff fc 	st.w	r7[-4],r12
800256b2:	ee fb ff fc 	ld.w	r11,r7[-4]
800256b6:	30 cc       	mov	r12,12
800256b8:	f0 16 00 2a 	mcall	r6[168]
800256bc:	f0 16 00 e3 	mcall	r6[908]
800256c0:	18 98       	mov	r8,r12
800256c2:	10 9c       	mov	r12,r8
800256c4:	2f fd       	sub	sp,-4
800256c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800256ca:	00 00       	add	r0,r0
800256cc:	80 02       	ld.sh	r2,r0[0x0]
800256ce:	55 30       	stdsp	sp[0x14c],r0

800256d0 <flashc_erase_page>:
800256d0:	eb cd 40 c0 	pushm	r6-r7,lr
800256d4:	1a 97       	mov	r7,sp
800256d6:	20 4d       	sub	sp,16
800256d8:	49 86       	lddpc	r6,80025738 <flashc_erase_page+0x68>
800256da:	1e 26       	rsub	r6,pc
800256dc:	ef 4c ff f4 	st.w	r7[-12],r12
800256e0:	16 98       	mov	r8,r11
800256e2:	ef 68 ff f0 	st.b	r7[-16],r8
800256e6:	30 18       	mov	r8,1
800256e8:	ef 68 ff fb 	st.b	r7[-5],r8
800256ec:	ee fb ff f4 	ld.w	r11,r7[-12]
800256f0:	30 2c       	mov	r12,2
800256f2:	f0 16 00 2a 	mcall	r6[168]
800256f6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800256fa:	30 08       	mov	r8,0
800256fc:	f0 09 18 00 	cp.b	r9,r8
80025700:	c1 50       	breq	8002572a <flashc_erase_page+0x5a>
80025702:	ec f8 00 54 	ld.w	r8,r6[84]
80025706:	70 08       	ld.w	r8,r8[0x0]
80025708:	ef 48 ff fc 	st.w	r7[-4],r8
8002570c:	3f fc       	mov	r12,-1
8002570e:	f0 16 01 79 	mcall	r6[1508]
80025712:	18 98       	mov	r8,r12
80025714:	ef 68 ff fb 	st.b	r7[-5],r8
80025718:	ec f8 00 54 	ld.w	r8,r6[84]
8002571c:	70 09       	ld.w	r9,r8[0x0]
8002571e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025722:	10 49       	or	r9,r8
80025724:	ec f8 00 54 	ld.w	r8,r6[84]
80025728:	91 09       	st.w	r8[0x0],r9
8002572a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8002572e:	10 9c       	mov	r12,r8
80025730:	2f cd       	sub	sp,-16
80025732:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025736:	00 00       	add	r0,r0
80025738:	80 02       	ld.sh	r2,r0[0x0]
8002573a:	55 5e       	stdsp	sp[0x154],lr

8002573c <flashc_erase_all_pages>:
8002573c:	eb cd 40 e0 	pushm	r5-r7,lr
80025740:	1a 97       	mov	r7,sp
80025742:	20 4d       	sub	sp,16
80025744:	49 f6       	lddpc	r6,800257c0 <flashc_erase_all_pages+0x84>
80025746:	1e 26       	rsub	r6,pc
80025748:	18 98       	mov	r8,r12
8002574a:	ef 68 ff f0 	st.b	r7[-16],r8
8002574e:	30 18       	mov	r8,1
80025750:	ef 68 ff f7 	st.b	r7[-9],r8
80025754:	30 08       	mov	r8,0
80025756:	ef 48 ff f8 	st.w	r7[-8],r8
8002575a:	f0 16 01 07 	mcall	r6[1052]
8002575e:	18 98       	mov	r8,r12
80025760:	ef 48 ff fc 	st.w	r7[-4],r8
80025764:	c1 f8       	rjmp	800257a2 <flashc_erase_all_pages+0x66>
80025766:	ef 35 ff f7 	ld.ub	r5,r7[-9]
8002576a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002576e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025772:	20 18       	sub	r8,1
80025774:	ef 48 ff fc 	st.w	r7[-4],r8
80025778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002577c:	12 9b       	mov	r11,r9
8002577e:	10 9c       	mov	r12,r8
80025780:	f0 16 00 a4 	mcall	r6[656]
80025784:	18 98       	mov	r8,r12
80025786:	eb e8 00 08 	and	r8,r5,r8
8002578a:	5f 18       	srne	r8
8002578c:	ef 68 ff f7 	st.b	r7[-9],r8
80025790:	ec f8 00 54 	ld.w	r8,r6[84]
80025794:	70 08       	ld.w	r8,r8[0x0]
80025796:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002579a:	f3 e8 10 08 	or	r8,r9,r8
8002579e:	ef 48 ff f8 	st.w	r7[-8],r8
800257a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257a6:	58 08       	cp.w	r8,0
800257a8:	cd f1       	brne	80025766 <flashc_erase_all_pages+0x2a>
800257aa:	ec f8 00 54 	ld.w	r8,r6[84]
800257ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800257b2:	91 09       	st.w	r8[0x0],r9
800257b4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800257b8:	10 9c       	mov	r12,r8
800257ba:	2f cd       	sub	sp,-16
800257bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800257c0:	80 02       	ld.sh	r2,r0[0x0]
800257c2:	55 ca       	stdsp	sp[0x170],r10

800257c4 <flashc_write_page>:
800257c4:	eb cd 40 c0 	pushm	r6-r7,lr
800257c8:	1a 97       	mov	r7,sp
800257ca:	20 1d       	sub	sp,4
800257cc:	48 66       	lddpc	r6,800257e4 <flashc_write_page+0x20>
800257ce:	1e 26       	rsub	r6,pc
800257d0:	ef 4c ff fc 	st.w	r7[-4],r12
800257d4:	ee fb ff fc 	ld.w	r11,r7[-4]
800257d8:	30 1c       	mov	r12,1
800257da:	f0 16 00 2a 	mcall	r6[168]
800257de:	2f fd       	sub	sp,-4
800257e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800257e4:	80 02       	ld.sh	r2,r0[0x0]
800257e6:	56 52       	stdsp	sp[0x194],r2

800257e8 <flashc_quick_user_page_read>:
800257e8:	eb cd 40 c0 	pushm	r6-r7,lr
800257ec:	1a 97       	mov	r7,sp
800257ee:	48 76       	lddpc	r6,80025808 <flashc_quick_user_page_read+0x20>
800257f0:	1e 26       	rsub	r6,pc
800257f2:	3f fb       	mov	r11,-1
800257f4:	30 fc       	mov	r12,15
800257f6:	f0 16 00 2a 	mcall	r6[168]
800257fa:	f0 16 00 e3 	mcall	r6[908]
800257fe:	18 98       	mov	r8,r12
80025800:	10 9c       	mov	r12,r8
80025802:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025806:	00 00       	add	r0,r0
80025808:	80 02       	ld.sh	r2,r0[0x0]
8002580a:	56 74       	stdsp	sp[0x19c],r4

8002580c <flashc_erase_user_page>:
8002580c:	eb cd 40 c0 	pushm	r6-r7,lr
80025810:	1a 97       	mov	r7,sp
80025812:	20 1d       	sub	sp,4
80025814:	48 c6       	lddpc	r6,80025844 <flashc_erase_user_page+0x38>
80025816:	1e 26       	rsub	r6,pc
80025818:	18 98       	mov	r8,r12
8002581a:	ef 68 ff fc 	st.b	r7[-4],r8
8002581e:	3f fb       	mov	r11,-1
80025820:	30 ec       	mov	r12,14
80025822:	f0 16 00 2a 	mcall	r6[168]
80025826:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8002582a:	30 08       	mov	r8,0
8002582c:	f0 09 18 00 	cp.b	r9,r8
80025830:	c0 50       	breq	8002583a <flashc_erase_user_page+0x2e>
80025832:	f0 16 02 16 	mcall	r6[2136]
80025836:	18 98       	mov	r8,r12
80025838:	c0 28       	rjmp	8002583c <flashc_erase_user_page+0x30>
8002583a:	30 18       	mov	r8,1
8002583c:	10 9c       	mov	r12,r8
8002583e:	2f fd       	sub	sp,-4
80025840:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025844:	80 02       	ld.sh	r2,r0[0x0]
80025846:	56 9a       	stdsp	sp[0x1a4],r10

80025848 <flashc_write_user_page>:
80025848:	eb cd 40 c0 	pushm	r6-r7,lr
8002584c:	1a 97       	mov	r7,sp
8002584e:	48 56       	lddpc	r6,80025860 <flashc_write_user_page+0x18>
80025850:	1e 26       	rsub	r6,pc
80025852:	3f fb       	mov	r11,-1
80025854:	30 dc       	mov	r12,13
80025856:	f0 16 00 2a 	mcall	r6[168]
8002585a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002585e:	00 00       	add	r0,r0
80025860:	80 02       	ld.sh	r2,r0[0x0]
80025862:	56 d4       	stdsp	sp[0x1b4],r4

80025864 <flashc_memset8>:
80025864:	eb cd 40 c0 	pushm	r6-r7,lr
80025868:	1a 97       	mov	r7,sp
8002586a:	20 4d       	sub	sp,16
8002586c:	49 26       	lddpc	r6,800258b4 <flashc_memset8+0x50>
8002586e:	1e 26       	rsub	r6,pc
80025870:	ef 4c ff fc 	st.w	r7[-4],r12
80025874:	ef 4a ff f4 	st.w	r7[-12],r10
80025878:	12 98       	mov	r8,r9
8002587a:	16 99       	mov	r9,r11
8002587c:	ef 69 ff f8 	st.b	r7[-8],r9
80025880:	ef 68 ff f0 	st.b	r7[-16],r8
80025884:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025888:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8002588c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025890:	a9 68       	lsl	r8,0x8
80025892:	5c 88       	casts.h	r8
80025894:	f5 e8 10 08 	or	r8,r10,r8
80025898:	5c 88       	casts.h	r8
8002589a:	5c 78       	castu.h	r8
8002589c:	ee fa ff f4 	ld.w	r10,r7[-12]
800258a0:	10 9b       	mov	r11,r8
800258a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800258a6:	f0 16 01 85 	mcall	r6[1556]
800258aa:	18 98       	mov	r8,r12
800258ac:	10 9c       	mov	r12,r8
800258ae:	2f cd       	sub	sp,-16
800258b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800258b4:	80 02       	ld.sh	r2,r0[0x0]
800258b6:	56 f2       	stdsp	sp[0x1bc],r2

800258b8 <flashc_memset16>:
800258b8:	eb cd 40 c0 	pushm	r6-r7,lr
800258bc:	1a 97       	mov	r7,sp
800258be:	20 4d       	sub	sp,16
800258c0:	49 16       	lddpc	r6,80025904 <flashc_memset16+0x4c>
800258c2:	1e 26       	rsub	r6,pc
800258c4:	ef 4c ff fc 	st.w	r7[-4],r12
800258c8:	ef 4a ff f4 	st.w	r7[-12],r10
800258cc:	12 98       	mov	r8,r9
800258ce:	16 99       	mov	r9,r11
800258d0:	ef 59 ff f8 	st.h	r7[-8],r9
800258d4:	ef 68 ff f0 	st.b	r7[-16],r8
800258d8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800258dc:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800258e0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800258e4:	b1 68       	lsl	r8,0x10
800258e6:	f5 e8 10 08 	or	r8,r10,r8
800258ea:	ee fa ff f4 	ld.w	r10,r7[-12]
800258ee:	10 9b       	mov	r11,r8
800258f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800258f4:	f0 16 01 be 	mcall	r6[1784]
800258f8:	18 98       	mov	r8,r12
800258fa:	10 9c       	mov	r12,r8
800258fc:	2f cd       	sub	sp,-16
800258fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025902:	00 00       	add	r0,r0
80025904:	80 02       	ld.sh	r2,r0[0x0]
80025906:	57 46       	stdsp	sp[0x1d0],r6

80025908 <flashc_memset32>:
80025908:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
8002590c:	1a 97       	mov	r7,sp
8002590e:	20 6d       	sub	sp,24
80025910:	49 56       	lddpc	r6,80025964 <flashc_memset32+0x5c>
80025912:	1e 26       	rsub	r6,pc
80025914:	ef 4c ff fc 	st.w	r7[-4],r12
80025918:	ef 4b ff f8 	st.w	r7[-8],r11
8002591c:	ef 4a ff f4 	st.w	r7[-12],r10
80025920:	12 98       	mov	r8,r9
80025922:	ef 68 ff f0 	st.b	r7[-16],r8
80025926:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002592a:	ee f0 ff f8 	ld.w	r0,r7[-8]
8002592e:	30 01       	mov	r1,0
80025930:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025934:	ef 49 ff ec 	st.w	r7[-20],r9
80025938:	30 09       	mov	r9,0
8002593a:	ef 49 ff e8 	st.w	r7[-24],r9
8002593e:	ee f3 ff ec 	ld.w	r3,r7[-20]
80025942:	a1 63       	lsl	r3,0x0
80025944:	30 02       	mov	r2,0
80025946:	e1 e2 10 0a 	or	r10,r0,r2
8002594a:	e3 e3 10 0b 	or	r11,r1,r3
8002594e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025952:	ee fc ff fc 	ld.w	r12,r7[-4]
80025956:	f0 16 01 a3 	mcall	r6[1676]
8002595a:	18 98       	mov	r8,r12
8002595c:	10 9c       	mov	r12,r8
8002595e:	2f ad       	sub	sp,-24
80025960:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80025964:	80 02       	ld.sh	r2,r0[0x0]
80025966:	57 96       	stdsp	sp[0x1e4],r6

80025968 <flashc_memset64>:
80025968:	eb cd 40 c0 	pushm	r6-r7,lr
8002596c:	1a 97       	mov	r7,sp
8002596e:	21 bd       	sub	sp,108
80025970:	fe f6 04 14 	ld.w	r6,pc[1044]
80025974:	1e 26       	rsub	r6,pc
80025976:	ef 4c ff a4 	st.w	r7[-92],r12
8002597a:	ee eb ff 9c 	st.d	r7[-100],r10
8002597e:	ef 49 ff 98 	st.w	r7[-104],r9
80025982:	ef 68 ff 94 	st.b	r7[-108],r8
80025986:	30 08       	mov	r8,0
80025988:	30 09       	mov	r9,0
8002598a:	ee e9 ff d8 	st.d	r7[-40],r8
8002598e:	30 08       	mov	r8,0
80025990:	ef 48 ff ec 	st.w	r7[-20],r8
80025994:	f0 16 00 c8 	mcall	r6[800]
80025998:	18 99       	mov	r9,r12
8002599a:	fc 18 80 00 	movh	r8,0x8000
8002599e:	f2 08 00 08 	add	r8,r9,r8
800259a2:	ef 48 ff e4 	st.w	r7[-28],r8
800259a6:	ee f8 ff a4 	ld.w	r8,r7[-92]
800259aa:	ef 48 ff e0 	st.w	r7[-32],r8
800259ae:	ee f8 ff e0 	ld.w	r8,r7[-32]
800259b2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800259b6:	20 18       	sub	r8,1
800259b8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800259bc:	ef 48 ff f0 	st.w	r7[-16],r8
800259c0:	c1 f8       	rjmp	800259fe <flashc_memset64+0x96>
800259c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800259c6:	ef 38 ff a3 	ld.ub	r8,r7[-93]
800259ca:	ee 09 00 09 	add	r9,r7,r9
800259ce:	f3 68 ff d8 	st.b	r9[-40],r8
800259d2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800259d6:	b9 68       	lsl	r8,0x18
800259d8:	ee f9 ff a0 	ld.w	r9,r7[-96]
800259dc:	a9 89       	lsr	r9,0x8
800259de:	f3 e8 10 08 	or	r8,r9,r8
800259e2:	ef 48 ff a0 	st.w	r7[-96],r8
800259e6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800259ea:	a9 88       	lsr	r8,0x8
800259ec:	ef 48 ff 9c 	st.w	r7[-100],r8
800259f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800259f4:	20 18       	sub	r8,1
800259f6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800259fa:	ef 48 ff f0 	st.w	r7[-16],r8
800259fe:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80025a02:	58 08       	cp.w	r8,0
80025a04:	5c 29       	cpc	r9
80025a06:	cd e1       	brne	800259c2 <flashc_memset64+0x5a>
80025a08:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025a0c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80025a10:	f2 08 00 08 	add	r8,r9,r8
80025a14:	ef 48 ff d4 	st.w	r7[-44],r8
80025a18:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a1c:	e0 69 ff ff 	mov	r9,65535
80025a20:	ea 19 7f ff 	orh	r9,0x7fff
80025a24:	12 38       	cp.w	r8,r9
80025a26:	e0 8b 00 07 	brhi	80025a34 <flashc_memset64+0xcc>
80025a2a:	fc 18 80 00 	movh	r8,0x8000
80025a2e:	ef 48 ff e0 	st.w	r7[-32],r8
80025a32:	c1 58       	rjmp	80025a5c <flashc_memset64+0xf4>
80025a34:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025a38:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a3c:	10 39       	cp.w	r9,r8
80025a3e:	e0 8b 00 0f 	brhi	80025a5c <flashc_memset64+0xf4>
80025a42:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a46:	e0 69 ff ff 	mov	r9,65535
80025a4a:	ea 19 80 7f 	orh	r9,0x807f
80025a4e:	12 38       	cp.w	r8,r9
80025a50:	e0 8b 00 06 	brhi	80025a5c <flashc_memset64+0xf4>
80025a54:	fc 18 80 80 	movh	r8,0x8080
80025a58:	ef 48 ff e0 	st.w	r7[-32],r8
80025a5c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a60:	e0 69 02 00 	mov	r9,512
80025a64:	ea 19 80 80 	orh	r9,0x8080
80025a68:	12 38       	cp.w	r8,r9
80025a6a:	e0 88 00 09 	brls	80025a7c <flashc_memset64+0x114>
80025a6e:	e0 68 02 00 	mov	r8,512
80025a72:	ea 18 80 80 	orh	r8,0x8080
80025a76:	ef 48 ff d4 	st.w	r7[-44],r8
80025a7a:	c1 38       	rjmp	80025aa0 <flashc_memset64+0x138>
80025a7c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a80:	fc 19 80 80 	movh	r9,0x8080
80025a84:	12 38       	cp.w	r8,r9
80025a86:	e0 8b 00 0d 	brhi	80025aa0 <flashc_memset64+0x138>
80025a8a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025a8e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025a92:	10 39       	cp.w	r9,r8
80025a94:	e0 88 00 06 	brls	80025aa0 <flashc_memset64+0x138>
80025a98:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025a9c:	ef 48 ff d4 	st.w	r7[-44],r8
80025aa0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025aa4:	a1 c8       	cbr	r8,0x0
80025aa6:	ef 48 ff cc 	st.w	r7[-52],r8
80025aaa:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025aae:	e0 18 ff fc 	andl	r8,0xfffc
80025ab2:	ef 48 ff c4 	st.w	r7[-60],r8
80025ab6:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025aba:	e0 18 ff f8 	andl	r8,0xfff8
80025abe:	ef 48 ff bc 	st.w	r7[-68],r8
80025ac2:	c4 f9       	rjmp	80025d60 <flashc_memset64+0x3f8>
80025ac4:	f0 16 01 29 	mcall	r6[1188]
80025ac8:	ec f8 00 54 	ld.w	r8,r6[84]
80025acc:	70 08       	ld.w	r8,r8[0x0]
80025ace:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025ad2:	f3 e8 10 08 	or	r8,r9,r8
80025ad6:	ef 48 ff ec 	st.w	r7[-20],r8
80025ada:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025ade:	ef 48 ff f8 	st.w	r7[-8],r8
80025ae2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ae6:	e0 18 fe 00 	andl	r8,0xfe00
80025aea:	f0 c8 fe 00 	sub	r8,r8,-512
80025aee:	ef 48 ff fc 	st.w	r7[-4],r8
80025af2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025af6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025afa:	f0 09 0d 48 	min	r8,r8,r9
80025afe:	ef 48 ff f4 	st.w	r7[-12],r8
80025b02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025b06:	ef 48 ff b4 	st.w	r7[-76],r8
80025b0a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b0e:	10 9a       	mov	r10,r8
80025b10:	e0 1a fe 00 	andl	r10,0xfe00
80025b14:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025b18:	10 99       	mov	r9,r8
80025b1a:	e0 19 fe 00 	andl	r9,0xfe00
80025b1e:	30 18       	mov	r8,1
80025b20:	12 3a       	cp.w	r10,r9
80025b22:	c0 22       	brcc	80025b26 <flashc_memset64+0x1be>
80025b24:	30 08       	mov	r8,0
80025b26:	ef 68 ff eb 	st.b	r7[-21],r8
80025b2a:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025b2e:	ee e9 ff ac 	st.d	r7[-84],r8
80025b32:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b36:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025b3a:	c5 b0       	breq	80025bf0 <flashc_memset64+0x288>
80025b3c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b40:	e0 18 fe 00 	andl	r8,0xfe00
80025b44:	ef 48 ff a8 	st.w	r7[-88],r8
80025b48:	c0 e8       	rjmp	80025b64 <flashc_memset64+0x1fc>
80025b4a:	ee fa ff a8 	ld.w	r10,r7[-88]
80025b4e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b52:	f0 e8 00 00 	ld.d	r8,r8[0]
80025b56:	f4 e9 00 00 	st.d	r10[0],r8
80025b5a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b5e:	2f 88       	sub	r8,-8
80025b60:	ef 48 ff a8 	st.w	r7[-88],r8
80025b64:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025b68:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b6c:	e0 18 ff f8 	andl	r8,0xfff8
80025b70:	10 39       	cp.w	r9,r8
80025b72:	ce c3       	brcs	80025b4a <flashc_memset64+0x1e2>
80025b74:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b78:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025b7c:	c3 a0       	breq	80025bf0 <flashc_memset64+0x288>
80025b7e:	30 08       	mov	r8,0
80025b80:	ef 48 ff f0 	st.w	r7[-16],r8
80025b84:	c1 38       	rjmp	80025baa <flashc_memset64+0x242>
80025b86:	ee fa ff f0 	ld.w	r10,r7[-16]
80025b8a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b8e:	11 89       	ld.ub	r9,r8[0x0]
80025b90:	5c 59       	castu.b	r9
80025b92:	ee 0a 00 0a 	add	r10,r7,r10
80025b96:	f5 69 ff ac 	st.b	r10[-84],r9
80025b9a:	2f f8       	sub	r8,-1
80025b9c:	ef 48 ff a8 	st.w	r7[-88],r8
80025ba0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025ba4:	2f f8       	sub	r8,-1
80025ba6:	ef 48 ff f0 	st.w	r7[-16],r8
80025baa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025bae:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025bb2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025bb6:	10 39       	cp.w	r9,r8
80025bb8:	fe 9b ff e7 	brhi	80025b86 <flashc_memset64+0x21e>
80025bbc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025bc0:	e0 18 ff f8 	andl	r8,0xfff8
80025bc4:	ef 48 ff e0 	st.w	r7[-32],r8
80025bc8:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025bcc:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025bd0:	10 39       	cp.w	r9,r8
80025bd2:	c0 f2       	brcc	80025bf0 <flashc_memset64+0x288>
80025bd4:	ee fa ff e0 	ld.w	r10,r7[-32]
80025bd8:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025bdc:	f4 e9 00 00 	st.d	r10[0],r8
80025be0:	f4 c8 ff f8 	sub	r8,r10,-8
80025be4:	ef 48 ff e0 	st.w	r7[-32],r8
80025be8:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025bec:	ee e9 ff ac 	st.d	r7[-84],r8
80025bf0:	ee f8 ff b4 	ld.w	r8,r7[-76]
80025bf4:	10 99       	mov	r9,r8
80025bf6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025bfa:	f2 08 01 08 	sub	r8,r9,r8
80025bfe:	a3 58       	asr	r8,0x3
80025c00:	ef 48 ff f0 	st.w	r7[-16],r8
80025c04:	c1 08       	rjmp	80025c24 <flashc_memset64+0x2bc>
80025c06:	ee fa ff e0 	ld.w	r10,r7[-32]
80025c0a:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025c0e:	f4 e9 00 00 	st.d	r10[0],r8
80025c12:	f4 c8 ff f8 	sub	r8,r10,-8
80025c16:	ef 48 ff e0 	st.w	r7[-32],r8
80025c1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c1e:	20 18       	sub	r8,1
80025c20:	ef 48 ff f0 	st.w	r7[-16],r8
80025c24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c28:	58 08       	cp.w	r8,0
80025c2a:	ce e1       	brne	80025c06 <flashc_memset64+0x29e>
80025c2c:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80025c30:	30 08       	mov	r8,0
80025c32:	f0 09 18 00 	cp.b	r9,r8
80025c36:	c4 70       	breq	80025cc4 <flashc_memset64+0x35c>
80025c38:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c3c:	ef 48 ff a8 	st.w	r7[-88],r8
80025c40:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c44:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c48:	c3 80       	breq	80025cb8 <flashc_memset64+0x350>
80025c4a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c4e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c52:	ef 48 ff f0 	st.w	r7[-16],r8
80025c56:	c1 38       	rjmp	80025c7c <flashc_memset64+0x314>
80025c58:	ee fa ff f0 	ld.w	r10,r7[-16]
80025c5c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025c60:	11 89       	ld.ub	r9,r8[0x0]
80025c62:	5c 59       	castu.b	r9
80025c64:	ee 0a 00 0a 	add	r10,r7,r10
80025c68:	f5 69 ff ac 	st.b	r10[-84],r9
80025c6c:	2f f8       	sub	r8,-1
80025c6e:	ef 48 ff a8 	st.w	r7[-88],r8
80025c72:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c76:	2f f8       	sub	r8,-1
80025c78:	ef 48 ff f0 	st.w	r7[-16],r8
80025c7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c80:	58 78       	cp.w	r8,7
80025c82:	fe 98 ff eb 	brls	80025c58 <flashc_memset64+0x2f0>
80025c86:	ee fa ff e0 	ld.w	r10,r7[-32]
80025c8a:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025c8e:	f4 e9 00 00 	st.d	r10[0],r8
80025c92:	f4 c8 ff f8 	sub	r8,r10,-8
80025c96:	ef 48 ff e0 	st.w	r7[-32],r8
80025c9a:	c1 08       	rjmp	80025cba <flashc_memset64+0x352>
80025c9c:	ee fa ff a8 	ld.w	r10,r7[-88]
80025ca0:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025ca4:	f0 e8 00 00 	ld.d	r8,r8[0]
80025ca8:	f4 e9 00 00 	st.d	r10[0],r8
80025cac:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025cb0:	2f 88       	sub	r8,-8
80025cb2:	ef 48 ff a8 	st.w	r7[-88],r8
80025cb6:	c0 28       	rjmp	80025cba <flashc_memset64+0x352>
80025cb8:	d7 03       	nop
80025cba:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025cbe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025cc2:	ce d1       	brne	80025c9c <flashc_memset64+0x334>
80025cc4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025cc8:	fc 19 80 80 	movh	r9,0x8080
80025ccc:	12 38       	cp.w	r8,r9
80025cce:	e0 8b 00 2c 	brhi	80025d26 <flashc_memset64+0x3be>
80025cd2:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025cd6:	30 08       	mov	r8,0
80025cd8:	f0 09 18 00 	cp.b	r9,r8
80025cdc:	c0 e0       	breq	80025cf8 <flashc_memset64+0x390>
80025cde:	30 0b       	mov	r11,0
80025ce0:	3f fc       	mov	r12,-1
80025ce2:	f0 16 00 a4 	mcall	r6[656]
80025ce6:	ec f8 00 54 	ld.w	r8,r6[84]
80025cea:	70 08       	ld.w	r8,r8[0x0]
80025cec:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025cf0:	f3 e8 10 08 	or	r8,r9,r8
80025cf4:	ef 48 ff ec 	st.w	r7[-20],r8
80025cf8:	3f fc       	mov	r12,-1
80025cfa:	f0 16 00 f8 	mcall	r6[992]
80025cfe:	ec f8 00 54 	ld.w	r8,r6[84]
80025d02:	70 08       	ld.w	r8,r8[0x0]
80025d04:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d08:	f3 e8 10 08 	or	r8,r9,r8
80025d0c:	ef 48 ff ec 	st.w	r7[-20],r8
80025d10:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025d14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025d18:	10 39       	cp.w	r9,r8
80025d1a:	c2 33       	brcs	80025d60 <flashc_memset64+0x3f8>
80025d1c:	fc 18 80 80 	movh	r8,0x8080
80025d20:	ef 48 ff e0 	st.w	r7[-32],r8
80025d24:	c1 e8       	rjmp	80025d60 <flashc_memset64+0x3f8>
80025d26:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025d2a:	30 08       	mov	r8,0
80025d2c:	f0 09 18 00 	cp.b	r9,r8
80025d30:	c0 d0       	breq	80025d4a <flashc_memset64+0x3e2>
80025d32:	30 0c       	mov	r12,0
80025d34:	f0 16 01 2e 	mcall	r6[1208]
80025d38:	ec f8 00 54 	ld.w	r8,r6[84]
80025d3c:	70 08       	ld.w	r8,r8[0x0]
80025d3e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d42:	f3 e8 10 08 	or	r8,r9,r8
80025d46:	ef 48 ff ec 	st.w	r7[-20],r8
80025d4a:	f0 16 00 f7 	mcall	r6[988]
80025d4e:	ec f8 00 54 	ld.w	r8,r6[84]
80025d52:	70 08       	ld.w	r8,r8[0x0]
80025d54:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d58:	f3 e8 10 08 	or	r8,r9,r8
80025d5c:	ef 48 ff ec 	st.w	r7[-20],r8
80025d60:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025d64:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025d68:	10 39       	cp.w	r9,r8
80025d6a:	fe 93 fe ad 	brlo	80025ac4 <flashc_memset64+0x15c>
80025d6e:	ec f8 00 54 	ld.w	r8,r6[84]
80025d72:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d76:	91 09       	st.w	r8[0x0],r9
80025d78:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025d7c:	10 9c       	mov	r12,r8
80025d7e:	2e 5d       	sub	sp,-108
80025d80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d84:	80 02       	ld.sh	r2,r0[0x0]
80025d86:	57 f8       	stdsp	sp[0x1fc],r8

80025d88 <flashc_memcpy>:
80025d88:	eb cd 40 c0 	pushm	r6-r7,lr
80025d8c:	1a 97       	mov	r7,sp
80025d8e:	21 ad       	sub	sp,104
80025d90:	fe f6 05 80 	ld.w	r6,pc[1408]
80025d94:	1e 26       	rsub	r6,pc
80025d96:	ef 4c ff a4 	st.w	r7[-92],r12
80025d9a:	ef 4b ff a0 	st.w	r7[-96],r11
80025d9e:	ef 4a ff 9c 	st.w	r7[-100],r10
80025da2:	12 98       	mov	r8,r9
80025da4:	ef 68 ff 98 	st.b	r7[-104],r8
80025da8:	30 08       	mov	r8,0
80025daa:	ef 68 ff e7 	st.b	r7[-25],r8
80025dae:	30 08       	mov	r8,0
80025db0:	ef 48 ff e8 	st.w	r7[-24],r8
80025db4:	f0 16 00 c8 	mcall	r6[800]
80025db8:	18 99       	mov	r9,r12
80025dba:	fc 18 80 00 	movh	r8,0x8000
80025dbe:	f2 08 00 08 	add	r8,r9,r8
80025dc2:	ef 48 ff e0 	st.w	r7[-32],r8
80025dc6:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025dca:	ef 48 ff dc 	st.w	r7[-36],r8
80025dce:	ee f8 ff a0 	ld.w	r8,r7[-96]
80025dd2:	ef 48 ff d8 	st.w	r7[-40],r8
80025dd6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025dda:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025dde:	f2 08 00 08 	add	r8,r9,r8
80025de2:	ef 48 ff d4 	st.w	r7[-44],r8
80025de6:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025dea:	e0 6a ff ff 	mov	r10,65535
80025dee:	ea 1a 7f ff 	orh	r10,0x7fff
80025df2:	14 38       	cp.w	r8,r10
80025df4:	e0 8b 00 13 	brhi	80025e1a <flashc_memcpy+0x92>
80025df8:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025dfc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e00:	fc 1a 80 00 	movh	r10,0x8000
80025e04:	f4 08 01 08 	sub	r8,r10,r8
80025e08:	f2 08 00 08 	add	r8,r9,r8
80025e0c:	ef 48 ff d8 	st.w	r7[-40],r8
80025e10:	fc 18 80 00 	movh	r8,0x8000
80025e14:	ef 48 ff dc 	st.w	r7[-36],r8
80025e18:	c2 18       	rjmp	80025e5a <flashc_memcpy+0xd2>
80025e1a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025e1e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e22:	10 39       	cp.w	r9,r8
80025e24:	e0 8b 00 1b 	brhi	80025e5a <flashc_memcpy+0xd2>
80025e28:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e2c:	e0 69 ff ff 	mov	r9,65535
80025e30:	ea 19 80 7f 	orh	r9,0x807f
80025e34:	12 38       	cp.w	r8,r9
80025e36:	e0 8b 00 12 	brhi	80025e5a <flashc_memcpy+0xd2>
80025e3a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025e3e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e42:	fc 1a 80 80 	movh	r10,0x8080
80025e46:	f4 08 01 08 	sub	r8,r10,r8
80025e4a:	f2 08 00 08 	add	r8,r9,r8
80025e4e:	ef 48 ff d8 	st.w	r7[-40],r8
80025e52:	fc 18 80 80 	movh	r8,0x8080
80025e56:	ef 48 ff dc 	st.w	r7[-36],r8
80025e5a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e5e:	e0 69 02 00 	mov	r9,512
80025e62:	ea 19 80 80 	orh	r9,0x8080
80025e66:	12 38       	cp.w	r8,r9
80025e68:	e0 88 00 09 	brls	80025e7a <flashc_memcpy+0xf2>
80025e6c:	e0 68 02 00 	mov	r8,512
80025e70:	ea 18 80 80 	orh	r8,0x8080
80025e74:	ef 48 ff d4 	st.w	r7[-44],r8
80025e78:	c1 38       	rjmp	80025e9e <flashc_memcpy+0x116>
80025e7a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e7e:	fc 1a 80 80 	movh	r10,0x8080
80025e82:	14 38       	cp.w	r8,r10
80025e84:	e0 8b 00 0d 	brhi	80025e9e <flashc_memcpy+0x116>
80025e88:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025e8c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e90:	10 39       	cp.w	r9,r8
80025e92:	e0 88 00 06 	brls	80025e9e <flashc_memcpy+0x116>
80025e96:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e9a:	ef 48 ff d4 	st.w	r7[-44],r8
80025e9e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025ea2:	a1 c8       	cbr	r8,0x0
80025ea4:	ef 48 ff cc 	st.w	r7[-52],r8
80025ea8:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025eac:	e0 18 ff fc 	andl	r8,0xfffc
80025eb0:	ef 48 ff c4 	st.w	r7[-60],r8
80025eb4:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025eb8:	e0 18 ff f8 	andl	r8,0xfff8
80025ebc:	ef 48 ff bc 	st.w	r7[-68],r8
80025ec0:	e0 8f 02 16 	bral	800262ec <flashc_memcpy+0x564>
80025ec4:	f0 16 01 29 	mcall	r6[1188]
80025ec8:	ec f8 00 54 	ld.w	r8,r6[84]
80025ecc:	70 08       	ld.w	r8,r8[0x0]
80025ece:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025ed2:	f3 e8 10 08 	or	r8,r9,r8
80025ed6:	ef 48 ff e8 	st.w	r7[-24],r8
80025eda:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025ede:	ef 48 ff f8 	st.w	r7[-8],r8
80025ee2:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025ee6:	e0 18 fe 00 	andl	r8,0xfe00
80025eea:	f0 c8 fe 00 	sub	r8,r8,-512
80025eee:	ef 48 ff fc 	st.w	r7[-4],r8
80025ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ef6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025efa:	f0 09 0d 48 	min	r8,r8,r9
80025efe:	ef 48 ff f4 	st.w	r7[-12],r8
80025f02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025f06:	ef 48 ff b4 	st.w	r7[-76],r8
80025f0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f0e:	10 9a       	mov	r10,r8
80025f10:	e0 1a fe 00 	andl	r10,0xfe00
80025f14:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025f18:	10 99       	mov	r9,r8
80025f1a:	e0 19 fe 00 	andl	r9,0xfe00
80025f1e:	30 18       	mov	r8,1
80025f20:	12 3a       	cp.w	r10,r9
80025f22:	c0 22       	brcc	80025f26 <flashc_memcpy+0x19e>
80025f24:	30 08       	mov	r8,0
80025f26:	ef 68 ff e6 	st.b	r7[-26],r8
80025f2a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f2e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025f32:	c7 20       	breq	80026016 <flashc_memcpy+0x28e>
80025f34:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f38:	e0 18 fe 00 	andl	r8,0xfe00
80025f3c:	ef 48 ff a8 	st.w	r7[-88],r8
80025f40:	c0 e8       	rjmp	80025f5c <flashc_memcpy+0x1d4>
80025f42:	ee fa ff a8 	ld.w	r10,r7[-88]
80025f46:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f4a:	f0 e8 00 00 	ld.d	r8,r8[0]
80025f4e:	f4 e9 00 00 	st.d	r10[0],r8
80025f52:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f56:	2f 88       	sub	r8,-8
80025f58:	ef 48 ff a8 	st.w	r7[-88],r8
80025f5c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025f60:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f64:	e0 18 ff f8 	andl	r8,0xfff8
80025f68:	10 39       	cp.w	r9,r8
80025f6a:	ce c3       	brcs	80025f42 <flashc_memcpy+0x1ba>
80025f6c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f70:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025f74:	c5 10       	breq	80026016 <flashc_memcpy+0x28e>
80025f76:	30 08       	mov	r8,0
80025f78:	ef 48 ff ec 	st.w	r7[-20],r8
80025f7c:	c1 38       	rjmp	80025fa2 <flashc_memcpy+0x21a>
80025f7e:	ee fa ff ec 	ld.w	r10,r7[-20]
80025f82:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f86:	11 89       	ld.ub	r9,r8[0x0]
80025f88:	5c 59       	castu.b	r9
80025f8a:	ee 0a 00 0a 	add	r10,r7,r10
80025f8e:	f5 69 ff ac 	st.b	r10[-84],r9
80025f92:	2f f8       	sub	r8,-1
80025f94:	ef 48 ff a8 	st.w	r7[-88],r8
80025f98:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025f9c:	2f f8       	sub	r8,-1
80025f9e:	ef 48 ff ec 	st.w	r7[-20],r8
80025fa2:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025fa6:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025faa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025fae:	10 39       	cp.w	r9,r8
80025fb0:	fe 9b ff e7 	brhi	80025f7e <flashc_memcpy+0x1f6>
80025fb4:	c1 28       	rjmp	80025fd8 <flashc_memcpy+0x250>
80025fb6:	ee fa ff ec 	ld.w	r10,r7[-20]
80025fba:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025fbe:	11 89       	ld.ub	r9,r8[0x0]
80025fc0:	ee 0a 00 0a 	add	r10,r7,r10
80025fc4:	f5 69 ff ac 	st.b	r10[-84],r9
80025fc8:	2f f8       	sub	r8,-1
80025fca:	ef 48 ff d8 	st.w	r7[-40],r8
80025fce:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025fd2:	2f f8       	sub	r8,-1
80025fd4:	ef 48 ff ec 	st.w	r7[-20],r8
80025fd8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025fdc:	58 78       	cp.w	r8,7
80025fde:	fe 98 ff ec 	brls	80025fb6 <flashc_memcpy+0x22e>
80025fe2:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025fe6:	e0 18 ff f8 	andl	r8,0xfff8
80025fea:	ef 48 ff dc 	st.w	r7[-36],r8
80025fee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025ff2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025ff6:	10 39       	cp.w	r9,r8
80025ff8:	c0 c2       	brcc	80026010 <flashc_memcpy+0x288>
80025ffa:	ee fa ff dc 	ld.w	r10,r7[-36]
80025ffe:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026002:	f4 e9 00 00 	st.d	r10[0],r8
80026006:	f4 c8 ff f8 	sub	r8,r10,-8
8002600a:	ef 48 ff dc 	st.w	r7[-36],r8
8002600e:	c0 48       	rjmp	80026016 <flashc_memcpy+0x28e>
80026010:	30 18       	mov	r8,1
80026012:	ef 68 ff e7 	st.b	r7[-25],r8
80026016:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002601a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8002601e:	c0 40       	breq	80026026 <flashc_memcpy+0x29e>
80026020:	58 28       	cp.w	r8,2
80026022:	c2 70       	breq	80026070 <flashc_memcpy+0x2e8>
80026024:	c6 18       	rjmp	800260e6 <flashc_memcpy+0x35e>
80026026:	ee f8 ff b4 	ld.w	r8,r7[-76]
8002602a:	10 99       	mov	r9,r8
8002602c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026030:	f2 08 01 08 	sub	r8,r9,r8
80026034:	a3 58       	asr	r8,0x3
80026036:	ef 48 ff ec 	st.w	r7[-20],r8
8002603a:	c1 68       	rjmp	80026066 <flashc_memcpy+0x2de>
8002603c:	ee fb ff dc 	ld.w	r11,r7[-36]
80026040:	ee fa ff d8 	ld.w	r10,r7[-40]
80026044:	f4 e8 00 00 	ld.d	r8,r10[0]
80026048:	f6 e9 00 00 	st.d	r11[0],r8
8002604c:	f6 c8 ff f8 	sub	r8,r11,-8
80026050:	ef 48 ff dc 	st.w	r7[-36],r8
80026054:	f4 c8 ff f8 	sub	r8,r10,-8
80026058:	ef 48 ff d8 	st.w	r7[-40],r8
8002605c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026060:	20 18       	sub	r8,1
80026062:	ef 48 ff ec 	st.w	r7[-20],r8
80026066:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002606a:	58 08       	cp.w	r8,0
8002606c:	ce 81       	brne	8002603c <flashc_memcpy+0x2b4>
8002606e:	c7 48       	rjmp	80026156 <flashc_memcpy+0x3ce>
80026070:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026074:	10 99       	mov	r9,r8
80026076:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002607a:	f2 08 01 08 	sub	r8,r9,r8
8002607e:	a3 58       	asr	r8,0x3
80026080:	ef 48 ff ec 	st.w	r7[-20],r8
80026084:	c2 c8       	rjmp	800260dc <flashc_memcpy+0x354>
80026086:	30 08       	mov	r8,0
80026088:	ef 48 ff f0 	st.w	r7[-16],r8
8002608c:	c1 48       	rjmp	800260b4 <flashc_memcpy+0x32c>
8002608e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026092:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026096:	92 0a       	ld.sh	r10,r9[0x0]
80026098:	a1 78       	lsl	r8,0x1
8002609a:	ee 08 00 08 	add	r8,r7,r8
8002609e:	f1 5a ff ac 	st.h	r8[-84],r10
800260a2:	f2 c8 ff fe 	sub	r8,r9,-2
800260a6:	ef 48 ff d8 	st.w	r7[-40],r8
800260aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800260ae:	2f f8       	sub	r8,-1
800260b0:	ef 48 ff f0 	st.w	r7[-16],r8
800260b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800260b8:	58 38       	cp.w	r8,3
800260ba:	fe 98 ff ea 	brls	8002608e <flashc_memcpy+0x306>
800260be:	ee fa ff dc 	ld.w	r10,r7[-36]
800260c2:	ee e8 ff ac 	ld.d	r8,r7[-84]
800260c6:	f4 e9 00 00 	st.d	r10[0],r8
800260ca:	f4 c8 ff f8 	sub	r8,r10,-8
800260ce:	ef 48 ff dc 	st.w	r7[-36],r8
800260d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800260d6:	20 18       	sub	r8,1
800260d8:	ef 48 ff ec 	st.w	r7[-20],r8
800260dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800260e0:	58 08       	cp.w	r8,0
800260e2:	cd 21       	brne	80026086 <flashc_memcpy+0x2fe>
800260e4:	c3 98       	rjmp	80026156 <flashc_memcpy+0x3ce>
800260e6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800260ea:	10 99       	mov	r9,r8
800260ec:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260f0:	f2 08 01 08 	sub	r8,r9,r8
800260f4:	a3 58       	asr	r8,0x3
800260f6:	ef 48 ff ec 	st.w	r7[-20],r8
800260fa:	c2 a8       	rjmp	8002614e <flashc_memcpy+0x3c6>
800260fc:	30 08       	mov	r8,0
800260fe:	ef 48 ff f0 	st.w	r7[-16],r8
80026102:	c1 28       	rjmp	80026126 <flashc_memcpy+0x39e>
80026104:	ee fa ff f0 	ld.w	r10,r7[-16]
80026108:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002610c:	11 89       	ld.ub	r9,r8[0x0]
8002610e:	ee 0a 00 0a 	add	r10,r7,r10
80026112:	f5 69 ff ac 	st.b	r10[-84],r9
80026116:	2f f8       	sub	r8,-1
80026118:	ef 48 ff d8 	st.w	r7[-40],r8
8002611c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026120:	2f f8       	sub	r8,-1
80026122:	ef 48 ff f0 	st.w	r7[-16],r8
80026126:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002612a:	58 78       	cp.w	r8,7
8002612c:	fe 98 ff ec 	brls	80026104 <flashc_memcpy+0x37c>
80026130:	ee fa ff dc 	ld.w	r10,r7[-36]
80026134:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026138:	f4 e9 00 00 	st.d	r10[0],r8
8002613c:	f4 c8 ff f8 	sub	r8,r10,-8
80026140:	ef 48 ff dc 	st.w	r7[-36],r8
80026144:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026148:	20 18       	sub	r8,1
8002614a:	ef 48 ff ec 	st.w	r7[-20],r8
8002614e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026152:	58 08       	cp.w	r8,0
80026154:	cd 41       	brne	800260fc <flashc_memcpy+0x374>
80026156:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002615a:	30 08       	mov	r8,0
8002615c:	f0 09 18 00 	cp.b	r9,r8
80026160:	c6 c0       	breq	80026238 <flashc_memcpy+0x4b0>
80026162:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80026166:	30 08       	mov	r8,0
80026168:	f0 09 18 00 	cp.b	r9,r8
8002616c:	c0 80       	breq	8002617c <flashc_memcpy+0x3f4>
8002616e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026172:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026176:	ef 48 ff ec 	st.w	r7[-20],r8
8002617a:	c1 f8       	rjmp	800261b8 <flashc_memcpy+0x430>
8002617c:	30 08       	mov	r8,0
8002617e:	ef 48 ff ec 	st.w	r7[-20],r8
80026182:	c1 28       	rjmp	800261a6 <flashc_memcpy+0x41e>
80026184:	ee fa ff ec 	ld.w	r10,r7[-20]
80026188:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002618c:	11 89       	ld.ub	r9,r8[0x0]
8002618e:	ee 0a 00 0a 	add	r10,r7,r10
80026192:	f5 69 ff ac 	st.b	r10[-84],r9
80026196:	2f f8       	sub	r8,-1
80026198:	ef 48 ff d8 	st.w	r7[-40],r8
8002619c:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261a0:	2f f8       	sub	r8,-1
800261a2:	ef 48 ff ec 	st.w	r7[-20],r8
800261a6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261aa:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800261ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261b2:	10 39       	cp.w	r9,r8
800261b4:	fe 9b ff e8 	brhi	80026184 <flashc_memcpy+0x3fc>
800261b8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261bc:	ef 48 ff a8 	st.w	r7[-88],r8
800261c0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261c4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800261c8:	c3 20       	breq	8002622c <flashc_memcpy+0x4a4>
800261ca:	c1 38       	rjmp	800261f0 <flashc_memcpy+0x468>
800261cc:	ee fa ff ec 	ld.w	r10,r7[-20]
800261d0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800261d4:	11 89       	ld.ub	r9,r8[0x0]
800261d6:	5c 59       	castu.b	r9
800261d8:	ee 0a 00 0a 	add	r10,r7,r10
800261dc:	f5 69 ff ac 	st.b	r10[-84],r9
800261e0:	2f f8       	sub	r8,-1
800261e2:	ef 48 ff a8 	st.w	r7[-88],r8
800261e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261ea:	2f f8       	sub	r8,-1
800261ec:	ef 48 ff ec 	st.w	r7[-20],r8
800261f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261f4:	58 78       	cp.w	r8,7
800261f6:	fe 98 ff eb 	brls	800261cc <flashc_memcpy+0x444>
800261fa:	ee fa ff dc 	ld.w	r10,r7[-36]
800261fe:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026202:	f4 e9 00 00 	st.d	r10[0],r8
80026206:	f4 c8 ff f8 	sub	r8,r10,-8
8002620a:	ef 48 ff dc 	st.w	r7[-36],r8
8002620e:	c1 08       	rjmp	8002622e <flashc_memcpy+0x4a6>
80026210:	ee fa ff a8 	ld.w	r10,r7[-88]
80026214:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026218:	f0 e8 00 00 	ld.d	r8,r8[0]
8002621c:	f4 e9 00 00 	st.d	r10[0],r8
80026220:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026224:	2f 88       	sub	r8,-8
80026226:	ef 48 ff a8 	st.w	r7[-88],r8
8002622a:	c0 28       	rjmp	8002622e <flashc_memcpy+0x4a6>
8002622c:	d7 03       	nop
8002622e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026232:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80026236:	ce d1       	brne	80026210 <flashc_memcpy+0x488>
80026238:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002623c:	fc 19 80 80 	movh	r9,0x8080
80026240:	12 38       	cp.w	r8,r9
80026242:	e0 8b 00 38 	brhi	800262b2 <flashc_memcpy+0x52a>
80026246:	ef 39 ff 98 	ld.ub	r9,r7[-104]
8002624a:	30 08       	mov	r8,0
8002624c:	f0 09 18 00 	cp.b	r9,r8
80026250:	c0 e0       	breq	8002626c <flashc_memcpy+0x4e4>
80026252:	30 0b       	mov	r11,0
80026254:	3f fc       	mov	r12,-1
80026256:	f0 16 00 a4 	mcall	r6[656]
8002625a:	ec f8 00 54 	ld.w	r8,r6[84]
8002625e:	70 08       	ld.w	r8,r8[0x0]
80026260:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026264:	f3 e8 10 08 	or	r8,r9,r8
80026268:	ef 48 ff e8 	st.w	r7[-24],r8
8002626c:	3f fc       	mov	r12,-1
8002626e:	f0 16 00 f8 	mcall	r6[992]
80026272:	ec f8 00 54 	ld.w	r8,r6[84]
80026276:	70 08       	ld.w	r8,r8[0x0]
80026278:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002627c:	f3 e8 10 08 	or	r8,r9,r8
80026280:	ef 48 ff e8 	st.w	r7[-24],r8
80026284:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026288:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002628c:	10 39       	cp.w	r9,r8
8002628e:	c2 f3       	brcs	800262ec <flashc_memcpy+0x564>
80026290:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026294:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026298:	fc 1a 80 80 	movh	r10,0x8080
8002629c:	f4 08 01 08 	sub	r8,r10,r8
800262a0:	f2 08 00 08 	add	r8,r9,r8
800262a4:	ef 48 ff d8 	st.w	r7[-40],r8
800262a8:	fc 18 80 80 	movh	r8,0x8080
800262ac:	ef 48 ff dc 	st.w	r7[-36],r8
800262b0:	c1 e8       	rjmp	800262ec <flashc_memcpy+0x564>
800262b2:	ef 39 ff 98 	ld.ub	r9,r7[-104]
800262b6:	30 08       	mov	r8,0
800262b8:	f0 09 18 00 	cp.b	r9,r8
800262bc:	c0 d0       	breq	800262d6 <flashc_memcpy+0x54e>
800262be:	30 0c       	mov	r12,0
800262c0:	f0 16 01 2e 	mcall	r6[1208]
800262c4:	ec f8 00 54 	ld.w	r8,r6[84]
800262c8:	70 08       	ld.w	r8,r8[0x0]
800262ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800262ce:	f3 e8 10 08 	or	r8,r9,r8
800262d2:	ef 48 ff e8 	st.w	r7[-24],r8
800262d6:	f0 16 00 f7 	mcall	r6[988]
800262da:	ec f8 00 54 	ld.w	r8,r6[84]
800262de:	70 08       	ld.w	r8,r8[0x0]
800262e0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800262e4:	f3 e8 10 08 	or	r8,r9,r8
800262e8:	ef 48 ff e8 	st.w	r7[-24],r8
800262ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
800262f0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800262f4:	10 39       	cp.w	r9,r8
800262f6:	fe 93 fd e7 	brlo	80025ec4 <flashc_memcpy+0x13c>
800262fa:	ec f8 00 54 	ld.w	r8,r6[84]
800262fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026302:	91 09       	st.w	r8[0x0],r9
80026304:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026308:	10 9c       	mov	r12,r8
8002630a:	2e 6d       	sub	sp,-104
8002630c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026310:	80 02       	ld.sh	r2,r0[0x0]
80026312:	5c 18       	scr	r8

80026314 <flashc_set_flash_waitstate_and_readmode>:
80026314:	eb cd 40 c0 	pushm	r6-r7,lr
80026318:	1a 97       	mov	r7,sp
8002631a:	20 1d       	sub	sp,4
8002631c:	49 76       	lddpc	r6,80026378 <flashc_set_flash_waitstate_and_readmode+0x64>
8002631e:	1e 26       	rsub	r6,pc
80026320:	ef 4c ff fc 	st.w	r7[-4],r12
80026324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026328:	e0 69 8a 40 	mov	r9,35392
8002632c:	ea 19 01 f7 	orh	r9,0x1f7
80026330:	12 38       	cp.w	r8,r9
80026332:	e0 88 00 18 	brls	80026362 <flashc_set_flash_waitstate_and_readmode+0x4e>
80026336:	30 1c       	mov	r12,1
80026338:	f0 16 00 9d 	mcall	r6[628]
8002633c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026340:	e0 69 14 80 	mov	r9,5248
80026344:	ea 19 03 ef 	orh	r9,0x3ef
80026348:	12 38       	cp.w	r8,r9
8002634a:	e0 8b 00 07 	brhi	80026358 <flashc_set_flash_waitstate_and_readmode+0x44>
8002634e:	3f fb       	mov	r11,-1
80026350:	31 1c       	mov	r12,17
80026352:	f0 16 00 2a 	mcall	r6[168]
80026356:	c0 d8       	rjmp	80026370 <flashc_set_flash_waitstate_and_readmode+0x5c>
80026358:	3f fb       	mov	r11,-1
8002635a:	31 0c       	mov	r12,16
8002635c:	f0 16 00 2a 	mcall	r6[168]
80026360:	c0 88       	rjmp	80026370 <flashc_set_flash_waitstate_and_readmode+0x5c>
80026362:	30 0c       	mov	r12,0
80026364:	f0 16 00 9d 	mcall	r6[628]
80026368:	3f fb       	mov	r11,-1
8002636a:	31 1c       	mov	r12,17
8002636c:	f0 16 00 2a 	mcall	r6[168]
80026370:	2f fd       	sub	sp,-4
80026372:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026376:	00 00       	add	r0,r0
80026378:	80 02       	ld.sh	r2,r0[0x0]
8002637a:	61 a2       	ld.w	r2,r0[0x68]

8002637c <gpio_enable_module>:
8002637c:	eb cd 40 c0 	pushm	r6-r7,lr
80026380:	1a 97       	mov	r7,sp
80026382:	20 4d       	sub	sp,16
80026384:	49 b6       	lddpc	r6,800263f0 <gpio_enable_module+0x74>
80026386:	1e 26       	rsub	r6,pc
80026388:	ef 4c ff f4 	st.w	r7[-12],r12
8002638c:	ef 4b ff f0 	st.w	r7[-16],r11
80026390:	30 08       	mov	r8,0
80026392:	ef 48 ff f8 	st.w	r7[-8],r8
80026396:	30 08       	mov	r8,0
80026398:	ef 48 ff fc 	st.w	r7[-4],r8
8002639c:	c1 d8       	rjmp	800263d6 <gpio_enable_module+0x5a>
8002639e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800263a2:	11 98       	ld.ub	r8,r8[0x1]
800263a4:	10 99       	mov	r9,r8
800263a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800263aa:	11 88       	ld.ub	r8,r8[0x0]
800263ac:	12 9b       	mov	r11,r9
800263ae:	10 9c       	mov	r12,r8
800263b0:	f0 16 00 3f 	mcall	r6[252]
800263b4:	18 98       	mov	r8,r12
800263b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800263ba:	f3 e8 10 08 	or	r8,r9,r8
800263be:	ef 48 ff f8 	st.w	r7[-8],r8
800263c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800263c6:	2f e8       	sub	r8,-2
800263c8:	ef 48 ff f4 	st.w	r7[-12],r8
800263cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800263d0:	2f f8       	sub	r8,-1
800263d2:	ef 48 ff fc 	st.w	r7[-4],r8
800263d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800263da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263de:	10 39       	cp.w	r9,r8
800263e0:	cd f3       	brcs	8002639e <gpio_enable_module+0x22>
800263e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263e6:	10 9c       	mov	r12,r8
800263e8:	2f cd       	sub	sp,-16
800263ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800263ee:	00 00       	add	r0,r0
800263f0:	80 02       	ld.sh	r2,r0[0x0]
800263f2:	62 0a       	ld.w	r10,r1[0x0]

800263f4 <gpio_enable_module_pin>:
800263f4:	eb cd 40 c0 	pushm	r6-r7,lr
800263f8:	1a 97       	mov	r7,sp
800263fa:	20 3d       	sub	sp,12
800263fc:	fe f6 02 94 	ld.w	r6,pc[660]
80026400:	1e 26       	rsub	r6,pc
80026402:	ef 4c ff f8 	st.w	r7[-8],r12
80026406:	ef 4b ff f4 	st.w	r7[-12],r11
8002640a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002640e:	a5 98       	lsr	r8,0x5
80026410:	a9 78       	lsl	r8,0x9
80026412:	e0 28 e0 00 	sub	r8,57344
80026416:	ef 48 ff fc 	st.w	r7[-4],r8
8002641a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002641e:	58 78       	cp.w	r8,7
80026420:	e0 8b 01 26 	brhi	8002666c <gpio_enable_module_pin+0x278>
80026424:	fe c9 ff f8 	sub	r9,pc,-8
80026428:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8002642c:	e0 8f 00 10 	bral	8002644c <gpio_enable_module_pin+0x58>
80026430:	e0 8f 00 30 	bral	80026490 <gpio_enable_module_pin+0x9c>
80026434:	e0 8f 00 50 	bral	800264d4 <gpio_enable_module_pin+0xe0>
80026438:	e0 8f 00 70 	bral	80026518 <gpio_enable_module_pin+0x124>
8002643c:	e0 8f 00 90 	bral	8002655c <gpio_enable_module_pin+0x168>
80026440:	e0 8f 00 b0 	bral	800265a0 <gpio_enable_module_pin+0x1ac>
80026444:	e0 8f 00 d0 	bral	800265e4 <gpio_enable_module_pin+0x1f0>
80026448:	e0 8f 00 f0 	bral	80026628 <gpio_enable_module_pin+0x234>
8002644c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026450:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026454:	30 19       	mov	r9,1
80026456:	f2 08 09 48 	lsl	r8,r9,r8
8002645a:	10 99       	mov	r9,r8
8002645c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026460:	91 69       	st.w	r8[0x18],r9
80026462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026466:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002646a:	30 19       	mov	r9,1
8002646c:	f2 08 09 48 	lsl	r8,r9,r8
80026470:	10 99       	mov	r9,r8
80026472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026476:	91 a9       	st.w	r8[0x28],r9
80026478:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002647c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026480:	30 19       	mov	r9,1
80026482:	f2 08 09 48 	lsl	r8,r9,r8
80026486:	10 99       	mov	r9,r8
80026488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002648c:	91 e9       	st.w	r8[0x38],r9
8002648e:	cf 18       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
80026490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026494:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026498:	30 19       	mov	r9,1
8002649a:	f2 08 09 48 	lsl	r8,r9,r8
8002649e:	10 99       	mov	r9,r8
800264a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264a4:	91 59       	st.w	r8[0x14],r9
800264a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264ae:	30 19       	mov	r9,1
800264b0:	f2 08 09 48 	lsl	r8,r9,r8
800264b4:	10 99       	mov	r9,r8
800264b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264ba:	91 a9       	st.w	r8[0x28],r9
800264bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264c4:	30 19       	mov	r9,1
800264c6:	f2 08 09 48 	lsl	r8,r9,r8
800264ca:	10 99       	mov	r9,r8
800264cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264d0:	91 e9       	st.w	r8[0x38],r9
800264d2:	cc f8       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
800264d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264dc:	30 19       	mov	r9,1
800264de:	f2 08 09 48 	lsl	r8,r9,r8
800264e2:	10 99       	mov	r9,r8
800264e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264e8:	91 69       	st.w	r8[0x18],r9
800264ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264f2:	30 19       	mov	r9,1
800264f4:	f2 08 09 48 	lsl	r8,r9,r8
800264f8:	10 99       	mov	r9,r8
800264fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264fe:	91 99       	st.w	r8[0x24],r9
80026500:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026504:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026508:	30 19       	mov	r9,1
8002650a:	f2 08 09 48 	lsl	r8,r9,r8
8002650e:	10 99       	mov	r9,r8
80026510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026514:	91 e9       	st.w	r8[0x38],r9
80026516:	ca d8       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
80026518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002651c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026520:	30 19       	mov	r9,1
80026522:	f2 08 09 48 	lsl	r8,r9,r8
80026526:	10 99       	mov	r9,r8
80026528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002652c:	91 59       	st.w	r8[0x14],r9
8002652e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026532:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026536:	30 19       	mov	r9,1
80026538:	f2 08 09 48 	lsl	r8,r9,r8
8002653c:	10 99       	mov	r9,r8
8002653e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026542:	91 99       	st.w	r8[0x24],r9
80026544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026548:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002654c:	30 19       	mov	r9,1
8002654e:	f2 08 09 48 	lsl	r8,r9,r8
80026552:	10 99       	mov	r9,r8
80026554:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026558:	91 e9       	st.w	r8[0x38],r9
8002655a:	c8 b8       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
8002655c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026560:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026564:	30 19       	mov	r9,1
80026566:	f2 08 09 48 	lsl	r8,r9,r8
8002656a:	10 99       	mov	r9,r8
8002656c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026570:	91 69       	st.w	r8[0x18],r9
80026572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026576:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002657a:	30 19       	mov	r9,1
8002657c:	f2 08 09 48 	lsl	r8,r9,r8
80026580:	10 99       	mov	r9,r8
80026582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026586:	91 a9       	st.w	r8[0x28],r9
80026588:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002658c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026590:	30 19       	mov	r9,1
80026592:	f2 08 09 48 	lsl	r8,r9,r8
80026596:	10 99       	mov	r9,r8
80026598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002659c:	91 d9       	st.w	r8[0x34],r9
8002659e:	c6 98       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
800265a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265a8:	30 19       	mov	r9,1
800265aa:	f2 08 09 48 	lsl	r8,r9,r8
800265ae:	10 99       	mov	r9,r8
800265b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265b4:	91 59       	st.w	r8[0x14],r9
800265b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265be:	30 19       	mov	r9,1
800265c0:	f2 08 09 48 	lsl	r8,r9,r8
800265c4:	10 99       	mov	r9,r8
800265c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265ca:	91 a9       	st.w	r8[0x28],r9
800265cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265d4:	30 19       	mov	r9,1
800265d6:	f2 08 09 48 	lsl	r8,r9,r8
800265da:	10 99       	mov	r9,r8
800265dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265e0:	91 d9       	st.w	r8[0x34],r9
800265e2:	c4 78       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
800265e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265ec:	30 19       	mov	r9,1
800265ee:	f2 08 09 48 	lsl	r8,r9,r8
800265f2:	10 99       	mov	r9,r8
800265f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265f8:	91 69       	st.w	r8[0x18],r9
800265fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026602:	30 19       	mov	r9,1
80026604:	f2 08 09 48 	lsl	r8,r9,r8
80026608:	10 99       	mov	r9,r8
8002660a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002660e:	91 99       	st.w	r8[0x24],r9
80026610:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026614:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026618:	30 19       	mov	r9,1
8002661a:	f2 08 09 48 	lsl	r8,r9,r8
8002661e:	10 99       	mov	r9,r8
80026620:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026624:	91 d9       	st.w	r8[0x34],r9
80026626:	c2 58       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
80026628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002662c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026630:	30 19       	mov	r9,1
80026632:	f2 08 09 48 	lsl	r8,r9,r8
80026636:	10 99       	mov	r9,r8
80026638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002663c:	91 59       	st.w	r8[0x14],r9
8002663e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026642:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026646:	30 19       	mov	r9,1
80026648:	f2 08 09 48 	lsl	r8,r9,r8
8002664c:	10 99       	mov	r9,r8
8002664e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026652:	91 99       	st.w	r8[0x24],r9
80026654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026658:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002665c:	30 19       	mov	r9,1
8002665e:	f2 08 09 48 	lsl	r8,r9,r8
80026662:	10 99       	mov	r9,r8
80026664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026668:	91 d9       	st.w	r8[0x34],r9
8002666a:	c0 38       	rjmp	80026670 <gpio_enable_module_pin+0x27c>
8002666c:	30 18       	mov	r8,1
8002666e:	c0 d8       	rjmp	80026688 <gpio_enable_module_pin+0x294>
80026670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026674:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026678:	30 19       	mov	r9,1
8002667a:	f2 08 09 48 	lsl	r8,r9,r8
8002667e:	10 99       	mov	r9,r8
80026680:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026684:	91 29       	st.w	r8[0x8],r9
80026686:	30 08       	mov	r8,0
80026688:	10 9c       	mov	r12,r8
8002668a:	2f dd       	sub	sp,-12
8002668c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026690:	80 02       	ld.sh	r2,r0[0x0]
80026692:	62 84       	ld.w	r4,r1[0x20]

80026694 <gpio_enable_gpio>:
80026694:	eb cd 40 c0 	pushm	r6-r7,lr
80026698:	1a 97       	mov	r7,sp
8002669a:	20 3d       	sub	sp,12
8002669c:	49 26       	lddpc	r6,800266e4 <gpio_enable_gpio+0x50>
8002669e:	1e 26       	rsub	r6,pc
800266a0:	ef 4c ff f8 	st.w	r7[-8],r12
800266a4:	ef 4b ff f4 	st.w	r7[-12],r11
800266a8:	30 08       	mov	r8,0
800266aa:	ef 48 ff fc 	st.w	r7[-4],r8
800266ae:	c1 18       	rjmp	800266d0 <gpio_enable_gpio+0x3c>
800266b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266b4:	11 88       	ld.ub	r8,r8[0x0]
800266b6:	10 9c       	mov	r12,r8
800266b8:	f0 16 01 55 	mcall	r6[1364]
800266bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266c0:	2f e8       	sub	r8,-2
800266c2:	ef 48 ff f8 	st.w	r7[-8],r8
800266c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266ca:	2f f8       	sub	r8,-1
800266cc:	ef 48 ff fc 	st.w	r7[-4],r8
800266d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800266d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800266d8:	10 39       	cp.w	r9,r8
800266da:	ce b3       	brcs	800266b0 <gpio_enable_gpio+0x1c>
800266dc:	2f dd       	sub	sp,-12
800266de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800266e2:	00 00       	add	r0,r0
800266e4:	80 02       	ld.sh	r2,r0[0x0]
800266e6:	65 22       	ld.w	r2,r2[0x48]

800266e8 <gpio_enable_gpio_pin>:
800266e8:	eb cd 40 80 	pushm	r7,lr
800266ec:	1a 97       	mov	r7,sp
800266ee:	20 2d       	sub	sp,8
800266f0:	ef 4c ff f8 	st.w	r7[-8],r12
800266f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266f8:	a5 98       	lsr	r8,0x5
800266fa:	a9 78       	lsl	r8,0x9
800266fc:	e0 28 e0 00 	sub	r8,57344
80026700:	ef 48 ff fc 	st.w	r7[-4],r8
80026704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026708:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002670c:	30 19       	mov	r9,1
8002670e:	f2 08 09 48 	lsl	r8,r9,r8
80026712:	10 99       	mov	r9,r8
80026714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026718:	f1 49 00 48 	st.w	r8[72],r9
8002671c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026720:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026724:	30 19       	mov	r9,1
80026726:	f2 08 09 48 	lsl	r8,r9,r8
8002672a:	10 99       	mov	r9,r8
8002672c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026730:	91 19       	st.w	r8[0x4],r9
80026732:	2f ed       	sub	sp,-8
80026734:	e3 cd 80 80 	ldm	sp++,r7,pc

80026738 <gpio_enable_pin_pull_up>:
80026738:	eb cd 40 80 	pushm	r7,lr
8002673c:	1a 97       	mov	r7,sp
8002673e:	20 2d       	sub	sp,8
80026740:	ef 4c ff f8 	st.w	r7[-8],r12
80026744:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026748:	a5 98       	lsr	r8,0x5
8002674a:	a9 78       	lsl	r8,0x9
8002674c:	e0 28 e0 00 	sub	r8,57344
80026750:	ef 48 ff fc 	st.w	r7[-4],r8
80026754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026758:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002675c:	30 19       	mov	r9,1
8002675e:	f2 08 09 48 	lsl	r8,r9,r8
80026762:	10 99       	mov	r9,r8
80026764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026768:	f1 49 00 74 	st.w	r8[116],r9
8002676c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026770:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026774:	30 19       	mov	r9,1
80026776:	f2 08 09 48 	lsl	r8,r9,r8
8002677a:	10 99       	mov	r9,r8
8002677c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026780:	f1 49 00 88 	st.w	r8[136],r9
80026784:	2f ed       	sub	sp,-8
80026786:	e3 cd 80 80 	ldm	sp++,r7,pc

8002678a <gpio_disable_pin_pull_up>:
8002678a:	eb cd 40 80 	pushm	r7,lr
8002678e:	1a 97       	mov	r7,sp
80026790:	20 2d       	sub	sp,8
80026792:	ef 4c ff f8 	st.w	r7[-8],r12
80026796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002679a:	a5 98       	lsr	r8,0x5
8002679c:	a9 78       	lsl	r8,0x9
8002679e:	e0 28 e0 00 	sub	r8,57344
800267a2:	ef 48 ff fc 	st.w	r7[-4],r8
800267a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267ae:	30 19       	mov	r9,1
800267b0:	f2 08 09 48 	lsl	r8,r9,r8
800267b4:	10 99       	mov	r9,r8
800267b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267ba:	f1 49 00 78 	st.w	r8[120],r9
800267be:	2f ed       	sub	sp,-8
800267c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800267c4 <gpio_enable_pin_pull_down>:
800267c4:	eb cd 40 80 	pushm	r7,lr
800267c8:	1a 97       	mov	r7,sp
800267ca:	20 2d       	sub	sp,8
800267cc:	ef 4c ff f8 	st.w	r7[-8],r12
800267d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267d4:	a5 98       	lsr	r8,0x5
800267d6:	a9 78       	lsl	r8,0x9
800267d8:	e0 28 e0 00 	sub	r8,57344
800267dc:	ef 48 ff fc 	st.w	r7[-4],r8
800267e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267e8:	30 19       	mov	r9,1
800267ea:	f2 08 09 48 	lsl	r8,r9,r8
800267ee:	10 99       	mov	r9,r8
800267f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267f4:	f1 49 00 78 	st.w	r8[120],r9
800267f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026800:	30 19       	mov	r9,1
80026802:	f2 08 09 48 	lsl	r8,r9,r8
80026806:	10 99       	mov	r9,r8
80026808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002680c:	f1 49 00 84 	st.w	r8[132],r9
80026810:	2f ed       	sub	sp,-8
80026812:	e3 cd 80 80 	ldm	sp++,r7,pc

80026816 <gpio_disable_pin_pull_down>:
80026816:	eb cd 40 80 	pushm	r7,lr
8002681a:	1a 97       	mov	r7,sp
8002681c:	20 2d       	sub	sp,8
8002681e:	ef 4c ff f8 	st.w	r7[-8],r12
80026822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026826:	a5 98       	lsr	r8,0x5
80026828:	a9 78       	lsl	r8,0x9
8002682a:	e0 28 e0 00 	sub	r8,57344
8002682e:	ef 48 ff fc 	st.w	r7[-4],r8
80026832:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026836:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002683a:	30 19       	mov	r9,1
8002683c:	f2 08 09 48 	lsl	r8,r9,r8
80026840:	10 99       	mov	r9,r8
80026842:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026846:	f1 49 00 88 	st.w	r8[136],r9
8002684a:	2f ed       	sub	sp,-8
8002684c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026850 <gpio_enable_pin_buskeeper>:
80026850:	eb cd 40 80 	pushm	r7,lr
80026854:	1a 97       	mov	r7,sp
80026856:	20 2d       	sub	sp,8
80026858:	ef 4c ff f8 	st.w	r7[-8],r12
8002685c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026860:	a5 98       	lsr	r8,0x5
80026862:	a9 78       	lsl	r8,0x9
80026864:	e0 28 e0 00 	sub	r8,57344
80026868:	ef 48 ff fc 	st.w	r7[-4],r8
8002686c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026870:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026874:	30 19       	mov	r9,1
80026876:	f2 08 09 48 	lsl	r8,r9,r8
8002687a:	10 99       	mov	r9,r8
8002687c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026880:	f1 49 00 74 	st.w	r8[116],r9
80026884:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026888:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002688c:	30 19       	mov	r9,1
8002688e:	f2 08 09 48 	lsl	r8,r9,r8
80026892:	10 99       	mov	r9,r8
80026894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026898:	f1 49 00 84 	st.w	r8[132],r9
8002689c:	2f ed       	sub	sp,-8
8002689e:	e3 cd 80 80 	ldm	sp++,r7,pc

800268a2 <gpio_disable_pin_buskeeper>:
800268a2:	eb cd 40 80 	pushm	r7,lr
800268a6:	1a 97       	mov	r7,sp
800268a8:	20 2d       	sub	sp,8
800268aa:	ef 4c ff f8 	st.w	r7[-8],r12
800268ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268b2:	a5 98       	lsr	r8,0x5
800268b4:	a9 78       	lsl	r8,0x9
800268b6:	e0 28 e0 00 	sub	r8,57344
800268ba:	ef 48 ff fc 	st.w	r7[-4],r8
800268be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268c6:	30 19       	mov	r9,1
800268c8:	f2 08 09 48 	lsl	r8,r9,r8
800268cc:	10 99       	mov	r9,r8
800268ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268d2:	f1 49 00 78 	st.w	r8[120],r9
800268d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268de:	30 19       	mov	r9,1
800268e0:	f2 08 09 48 	lsl	r8,r9,r8
800268e4:	10 99       	mov	r9,r8
800268e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268ea:	f1 49 00 88 	st.w	r8[136],r9
800268ee:	2f ed       	sub	sp,-8
800268f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800268f4 <gpio_configure_pin>:
800268f4:	eb cd 40 80 	pushm	r7,lr
800268f8:	1a 97       	mov	r7,sp
800268fa:	20 3d       	sub	sp,12
800268fc:	ef 4c ff f8 	st.w	r7[-8],r12
80026900:	ef 4b ff f4 	st.w	r7[-12],r11
80026904:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026908:	a5 98       	lsr	r8,0x5
8002690a:	a9 78       	lsl	r8,0x9
8002690c:	e0 28 e0 00 	sub	r8,57344
80026910:	ef 48 ff fc 	st.w	r7[-4],r8
80026914:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026918:	e2 18 00 08 	andl	r8,0x8,COH
8002691c:	c0 e0       	breq	80026938 <gpio_configure_pin+0x44>
8002691e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026922:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026926:	30 19       	mov	r9,1
80026928:	f2 08 09 48 	lsl	r8,r9,r8
8002692c:	10 99       	mov	r9,r8
8002692e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026932:	f1 49 00 84 	st.w	r8[132],r9
80026936:	c0 d8       	rjmp	80026950 <gpio_configure_pin+0x5c>
80026938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002693c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026940:	30 19       	mov	r9,1
80026942:	f2 08 09 48 	lsl	r8,r9,r8
80026946:	10 99       	mov	r9,r8
80026948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002694c:	f1 49 00 88 	st.w	r8[136],r9
80026950:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026954:	e2 18 00 04 	andl	r8,0x4,COH
80026958:	c0 e0       	breq	80026974 <gpio_configure_pin+0x80>
8002695a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002695e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026962:	30 19       	mov	r9,1
80026964:	f2 08 09 48 	lsl	r8,r9,r8
80026968:	10 99       	mov	r9,r8
8002696a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002696e:	f1 49 00 74 	st.w	r8[116],r9
80026972:	c0 d8       	rjmp	8002698c <gpio_configure_pin+0x98>
80026974:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026978:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002697c:	30 19       	mov	r9,1
8002697e:	f2 08 09 48 	lsl	r8,r9,r8
80026982:	10 99       	mov	r9,r8
80026984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026988:	f1 49 00 78 	st.w	r8[120],r9
8002698c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026990:	e2 18 00 40 	andl	r8,0x40,COH
80026994:	c0 e0       	breq	800269b0 <gpio_configure_pin+0xbc>
80026996:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002699a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002699e:	30 19       	mov	r9,1
800269a0:	f2 08 09 48 	lsl	r8,r9,r8
800269a4:	10 99       	mov	r9,r8
800269a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269aa:	f1 49 00 e4 	st.w	r8[228],r9
800269ae:	c0 d8       	rjmp	800269c8 <gpio_configure_pin+0xd4>
800269b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269b8:	30 19       	mov	r9,1
800269ba:	f2 08 09 48 	lsl	r8,r9,r8
800269be:	10 99       	mov	r9,r8
800269c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269c4:	f1 49 00 e8 	st.w	r8[232],r9
800269c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800269cc:	e2 18 00 40 	andl	r8,0x40,COH
800269d0:	c0 e0       	breq	800269ec <gpio_configure_pin+0xf8>
800269d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269da:	30 19       	mov	r9,1
800269dc:	f2 08 09 48 	lsl	r8,r9,r8
800269e0:	10 99       	mov	r9,r8
800269e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269e6:	f1 49 00 84 	st.w	r8[132],r9
800269ea:	c0 d8       	rjmp	80026a04 <gpio_configure_pin+0x110>
800269ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269f4:	30 19       	mov	r9,1
800269f6:	f2 08 09 48 	lsl	r8,r9,r8
800269fa:	10 99       	mov	r9,r8
800269fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a00:	f1 49 00 88 	st.w	r8[136],r9
80026a04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a08:	e2 18 00 10 	andl	r8,0x10,COH
80026a0c:	c0 e0       	breq	80026a28 <gpio_configure_pin+0x134>
80026a0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a12:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a16:	30 19       	mov	r9,1
80026a18:	f2 08 09 48 	lsl	r8,r9,r8
80026a1c:	10 99       	mov	r9,r8
80026a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a22:	f1 49 01 04 	st.w	r8[260],r9
80026a26:	c0 d8       	rjmp	80026a40 <gpio_configure_pin+0x14c>
80026a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a30:	30 19       	mov	r9,1
80026a32:	f2 08 09 48 	lsl	r8,r9,r8
80026a36:	10 99       	mov	r9,r8
80026a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a3c:	f1 49 01 08 	st.w	r8[264],r9
80026a40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a44:	e2 18 00 20 	andl	r8,0x20,COH
80026a48:	c0 e0       	breq	80026a64 <gpio_configure_pin+0x170>
80026a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a52:	30 19       	mov	r9,1
80026a54:	f2 08 09 48 	lsl	r8,r9,r8
80026a58:	10 99       	mov	r9,r8
80026a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a5e:	f1 49 01 14 	st.w	r8[276],r9
80026a62:	c0 d8       	rjmp	80026a7c <gpio_configure_pin+0x188>
80026a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a6c:	30 19       	mov	r9,1
80026a6e:	f2 08 09 48 	lsl	r8,r9,r8
80026a72:	10 99       	mov	r9,r8
80026a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a78:	f1 49 01 18 	st.w	r8[280],r9
80026a7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a80:	e2 18 00 80 	andl	r8,0x80,COH
80026a84:	c5 a0       	breq	80026b38 <gpio_configure_pin+0x244>
80026a86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a8a:	e2 18 01 80 	andl	r8,0x180,COH
80026a8e:	c1 a0       	breq	80026ac2 <gpio_configure_pin+0x1ce>
80026a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a98:	30 19       	mov	r9,1
80026a9a:	f2 08 09 48 	lsl	r8,r9,r8
80026a9e:	10 99       	mov	r9,r8
80026aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026aa4:	f1 49 00 a8 	st.w	r8[168],r9
80026aa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026aac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ab0:	30 19       	mov	r9,1
80026ab2:	f2 08 09 48 	lsl	r8,r9,r8
80026ab6:	10 99       	mov	r9,r8
80026ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026abc:	f1 49 00 b8 	st.w	r8[184],r9
80026ac0:	c3 c8       	rjmp	80026b38 <gpio_configure_pin+0x244>
80026ac2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ac6:	e2 18 02 80 	andl	r8,0x280,COH
80026aca:	c1 a0       	breq	80026afe <gpio_configure_pin+0x20a>
80026acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ad0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ad4:	30 19       	mov	r9,1
80026ad6:	f2 08 09 48 	lsl	r8,r9,r8
80026ada:	10 99       	mov	r9,r8
80026adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ae0:	f1 49 00 a4 	st.w	r8[164],r9
80026ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ae8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026aec:	30 19       	mov	r9,1
80026aee:	f2 08 09 48 	lsl	r8,r9,r8
80026af2:	10 99       	mov	r9,r8
80026af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026af8:	f1 49 00 b8 	st.w	r8[184],r9
80026afc:	c1 e8       	rjmp	80026b38 <gpio_configure_pin+0x244>
80026afe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b02:	e2 18 03 80 	andl	r8,0x380,COH
80026b06:	c1 90       	breq	80026b38 <gpio_configure_pin+0x244>
80026b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b10:	30 19       	mov	r9,1
80026b12:	f2 08 09 48 	lsl	r8,r9,r8
80026b16:	10 99       	mov	r9,r8
80026b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b1c:	f1 49 00 a8 	st.w	r8[168],r9
80026b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b28:	30 19       	mov	r9,1
80026b2a:	f2 08 09 48 	lsl	r8,r9,r8
80026b2e:	10 99       	mov	r9,r8
80026b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b34:	f1 49 00 b4 	st.w	r8[180],r9
80026b38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b3c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026b40:	5c 58       	castu.b	r8
80026b42:	c2 c0       	breq	80026b9a <gpio_configure_pin+0x2a6>
80026b44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b48:	e2 18 00 02 	andl	r8,0x2,COH
80026b4c:	c0 e0       	breq	80026b68 <gpio_configure_pin+0x274>
80026b4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b52:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b56:	30 19       	mov	r9,1
80026b58:	f2 08 09 48 	lsl	r8,r9,r8
80026b5c:	10 99       	mov	r9,r8
80026b5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b62:	f1 49 00 54 	st.w	r8[84],r9
80026b66:	c0 d8       	rjmp	80026b80 <gpio_configure_pin+0x28c>
80026b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b6c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b70:	30 19       	mov	r9,1
80026b72:	f2 08 09 48 	lsl	r8,r9,r8
80026b76:	10 99       	mov	r9,r8
80026b78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b7c:	f1 49 00 58 	st.w	r8[88],r9
80026b80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b88:	30 19       	mov	r9,1
80026b8a:	f2 08 09 48 	lsl	r8,r9,r8
80026b8e:	10 99       	mov	r9,r8
80026b90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b94:	f1 49 00 44 	st.w	r8[68],r9
80026b98:	c0 d8       	rjmp	80026bb2 <gpio_configure_pin+0x2be>
80026b9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ba2:	30 19       	mov	r9,1
80026ba4:	f2 08 09 48 	lsl	r8,r9,r8
80026ba8:	10 99       	mov	r9,r8
80026baa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bae:	f1 49 00 48 	st.w	r8[72],r9
80026bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bb6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bba:	30 19       	mov	r9,1
80026bbc:	f2 08 09 48 	lsl	r8,r9,r8
80026bc0:	10 99       	mov	r9,r8
80026bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bc6:	91 19       	st.w	r8[0x4],r9
80026bc8:	2f dd       	sub	sp,-12
80026bca:	e3 cd 80 80 	ldm	sp++,r7,pc

80026bce <gpio_configure_group>:
80026bce:	eb cd 40 80 	pushm	r7,lr
80026bd2:	1a 97       	mov	r7,sp
80026bd4:	20 4d       	sub	sp,16
80026bd6:	ef 4c ff f8 	st.w	r7[-8],r12
80026bda:	ef 4b ff f4 	st.w	r7[-12],r11
80026bde:	ef 4a ff f0 	st.w	r7[-16],r10
80026be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026be6:	a9 78       	lsl	r8,0x9
80026be8:	e0 28 e0 00 	sub	r8,57344
80026bec:	ef 48 ff fc 	st.w	r7[-4],r8
80026bf0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026bf4:	e2 18 00 08 	andl	r8,0x8,COH
80026bf8:	c0 80       	breq	80026c08 <gpio_configure_group+0x3a>
80026bfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c02:	f1 49 00 84 	st.w	r8[132],r9
80026c06:	c0 78       	rjmp	80026c14 <gpio_configure_group+0x46>
80026c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c10:	f1 49 00 88 	st.w	r8[136],r9
80026c14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c18:	e2 18 00 04 	andl	r8,0x4,COH
80026c1c:	c0 80       	breq	80026c2c <gpio_configure_group+0x5e>
80026c1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c26:	f1 49 00 74 	st.w	r8[116],r9
80026c2a:	c0 78       	rjmp	80026c38 <gpio_configure_group+0x6a>
80026c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c34:	f1 49 00 78 	st.w	r8[120],r9
80026c38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c3c:	e2 18 00 40 	andl	r8,0x40,COH
80026c40:	c0 80       	breq	80026c50 <gpio_configure_group+0x82>
80026c42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c46:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c4a:	f1 49 00 e4 	st.w	r8[228],r9
80026c4e:	c0 78       	rjmp	80026c5c <gpio_configure_group+0x8e>
80026c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c54:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c58:	f1 49 00 e8 	st.w	r8[232],r9
80026c5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c60:	e2 18 00 40 	andl	r8,0x40,COH
80026c64:	c0 80       	breq	80026c74 <gpio_configure_group+0xa6>
80026c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c6a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c6e:	f1 49 00 84 	st.w	r8[132],r9
80026c72:	c0 78       	rjmp	80026c80 <gpio_configure_group+0xb2>
80026c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c7c:	f1 49 00 88 	st.w	r8[136],r9
80026c80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c84:	e2 18 00 10 	andl	r8,0x10,COH
80026c88:	c0 80       	breq	80026c98 <gpio_configure_group+0xca>
80026c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c92:	f1 49 01 04 	st.w	r8[260],r9
80026c96:	c0 78       	rjmp	80026ca4 <gpio_configure_group+0xd6>
80026c98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ca0:	f1 49 01 08 	st.w	r8[264],r9
80026ca4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ca8:	e2 18 00 20 	andl	r8,0x20,COH
80026cac:	c0 80       	breq	80026cbc <gpio_configure_group+0xee>
80026cae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cb6:	f1 49 01 14 	st.w	r8[276],r9
80026cba:	c0 78       	rjmp	80026cc8 <gpio_configure_group+0xfa>
80026cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cc0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cc4:	f1 49 01 18 	st.w	r8[280],r9
80026cc8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026ccc:	e2 18 00 80 	andl	r8,0x80,COH
80026cd0:	c3 60       	breq	80026d3c <gpio_configure_group+0x16e>
80026cd2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026cd6:	e2 18 01 80 	andl	r8,0x180,COH
80026cda:	c0 e0       	breq	80026cf6 <gpio_configure_group+0x128>
80026cdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ce0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ce4:	f1 49 00 a8 	st.w	r8[168],r9
80026ce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cf0:	f1 49 00 b8 	st.w	r8[184],r9
80026cf4:	c2 48       	rjmp	80026d3c <gpio_configure_group+0x16e>
80026cf6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026cfa:	e2 18 02 80 	andl	r8,0x280,COH
80026cfe:	c0 e0       	breq	80026d1a <gpio_configure_group+0x14c>
80026d00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d08:	f1 49 00 a4 	st.w	r8[164],r9
80026d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d14:	f1 49 00 b8 	st.w	r8[184],r9
80026d18:	c1 28       	rjmp	80026d3c <gpio_configure_group+0x16e>
80026d1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d1e:	e2 18 03 80 	andl	r8,0x380,COH
80026d22:	c0 d0       	breq	80026d3c <gpio_configure_group+0x16e>
80026d24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d2c:	f1 49 00 a8 	st.w	r8[168],r9
80026d30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d34:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d38:	f1 49 00 b4 	st.w	r8[180],r9
80026d3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d40:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026d44:	5c 58       	castu.b	r8
80026d46:	c1 a0       	breq	80026d7a <gpio_configure_group+0x1ac>
80026d48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d4c:	e2 18 00 02 	andl	r8,0x2,COH
80026d50:	c0 80       	breq	80026d60 <gpio_configure_group+0x192>
80026d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d5a:	f1 49 00 54 	st.w	r8[84],r9
80026d5e:	c0 78       	rjmp	80026d6c <gpio_configure_group+0x19e>
80026d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d68:	f1 49 00 58 	st.w	r8[88],r9
80026d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d74:	f1 49 00 44 	st.w	r8[68],r9
80026d78:	c0 78       	rjmp	80026d86 <gpio_configure_group+0x1b8>
80026d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d82:	f1 49 00 48 	st.w	r8[72],r9
80026d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d8e:	91 19       	st.w	r8[0x4],r9
80026d90:	2f cd       	sub	sp,-16
80026d92:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d96 <gpio_get_pin_value>:
80026d96:	eb cd 40 80 	pushm	r7,lr
80026d9a:	1a 97       	mov	r7,sp
80026d9c:	20 2d       	sub	sp,8
80026d9e:	ef 4c ff f8 	st.w	r7[-8],r12
80026da2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026da6:	a5 98       	lsr	r8,0x5
80026da8:	a9 78       	lsl	r8,0x9
80026daa:	e0 28 e0 00 	sub	r8,57344
80026dae:	ef 48 ff fc 	st.w	r7[-4],r8
80026db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026db6:	71 89       	ld.w	r9,r8[0x60]
80026db8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dbc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dc0:	f2 08 0a 48 	lsr	r8,r9,r8
80026dc4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026dc8:	10 9c       	mov	r12,r8
80026dca:	2f ed       	sub	sp,-8
80026dcc:	e3 cd 80 80 	ldm	sp++,r7,pc

80026dd0 <gpio_get_gpio_pin_output_value>:
80026dd0:	eb cd 40 80 	pushm	r7,lr
80026dd4:	1a 97       	mov	r7,sp
80026dd6:	20 2d       	sub	sp,8
80026dd8:	ef 4c ff f8 	st.w	r7[-8],r12
80026ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026de0:	a5 98       	lsr	r8,0x5
80026de2:	a9 78       	lsl	r8,0x9
80026de4:	e0 28 e0 00 	sub	r8,57344
80026de8:	ef 48 ff fc 	st.w	r7[-4],r8
80026dec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026df0:	71 49       	ld.w	r9,r8[0x50]
80026df2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026df6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dfa:	f2 08 0a 48 	lsr	r8,r9,r8
80026dfe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026e02:	10 9c       	mov	r12,r8
80026e04:	2f ed       	sub	sp,-8
80026e06:	e3 cd 80 80 	ldm	sp++,r7,pc

80026e0a <gpio_get_gpio_open_drain_pin_output_value>:
80026e0a:	eb cd 40 80 	pushm	r7,lr
80026e0e:	1a 97       	mov	r7,sp
80026e10:	20 2d       	sub	sp,8
80026e12:	ef 4c ff f8 	st.w	r7[-8],r12
80026e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e1a:	a5 98       	lsr	r8,0x5
80026e1c:	a9 78       	lsl	r8,0x9
80026e1e:	e0 28 e0 00 	sub	r8,57344
80026e22:	ef 48 ff fc 	st.w	r7[-4],r8
80026e26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e2a:	71 09       	ld.w	r9,r8[0x40]
80026e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e34:	f2 08 0a 48 	lsr	r8,r9,r8
80026e38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026e3c:	5f 08       	sreq	r8
80026e3e:	10 9c       	mov	r12,r8
80026e40:	2f ed       	sub	sp,-8
80026e42:	e3 cd 80 80 	ldm	sp++,r7,pc

80026e46 <gpio_set_gpio_pin>:
80026e46:	eb cd 40 80 	pushm	r7,lr
80026e4a:	1a 97       	mov	r7,sp
80026e4c:	20 2d       	sub	sp,8
80026e4e:	ef 4c ff f8 	st.w	r7[-8],r12
80026e52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e56:	a5 98       	lsr	r8,0x5
80026e58:	a9 78       	lsl	r8,0x9
80026e5a:	e0 28 e0 00 	sub	r8,57344
80026e5e:	ef 48 ff fc 	st.w	r7[-4],r8
80026e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e6a:	30 19       	mov	r9,1
80026e6c:	f2 08 09 48 	lsl	r8,r9,r8
80026e70:	10 99       	mov	r9,r8
80026e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e76:	f1 49 00 54 	st.w	r8[84],r9
80026e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e82:	30 19       	mov	r9,1
80026e84:	f2 08 09 48 	lsl	r8,r9,r8
80026e88:	10 99       	mov	r9,r8
80026e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e8e:	f1 49 00 44 	st.w	r8[68],r9
80026e92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e9a:	30 19       	mov	r9,1
80026e9c:	f2 08 09 48 	lsl	r8,r9,r8
80026ea0:	10 99       	mov	r9,r8
80026ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ea6:	91 19       	st.w	r8[0x4],r9
80026ea8:	2f ed       	sub	sp,-8
80026eaa:	e3 cd 80 80 	ldm	sp++,r7,pc

80026eae <gpio_set_pin_high>:
80026eae:	eb cd 40 80 	pushm	r7,lr
80026eb2:	1a 97       	mov	r7,sp
80026eb4:	20 2d       	sub	sp,8
80026eb6:	ef 4c ff f8 	st.w	r7[-8],r12
80026eba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ebe:	a5 98       	lsr	r8,0x5
80026ec0:	a9 78       	lsl	r8,0x9
80026ec2:	e0 28 e0 00 	sub	r8,57344
80026ec6:	ef 48 ff fc 	st.w	r7[-4],r8
80026eca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ece:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ed2:	30 19       	mov	r9,1
80026ed4:	f2 08 09 48 	lsl	r8,r9,r8
80026ed8:	10 99       	mov	r9,r8
80026eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ede:	f1 49 00 54 	st.w	r8[84],r9
80026ee2:	2f ed       	sub	sp,-8
80026ee4:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ee8 <gpio_set_group_high>:
80026ee8:	eb cd 40 80 	pushm	r7,lr
80026eec:	1a 97       	mov	r7,sp
80026eee:	20 3d       	sub	sp,12
80026ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80026ef4:	ef 4b ff f4 	st.w	r7[-12],r11
80026ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026efc:	a9 78       	lsl	r8,0x9
80026efe:	e0 28 e0 00 	sub	r8,57344
80026f02:	ef 48 ff fc 	st.w	r7[-4],r8
80026f06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f0e:	f1 49 00 54 	st.w	r8[84],r9
80026f12:	2f dd       	sub	sp,-12
80026f14:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f18 <gpio_set_pin_low>:
80026f18:	eb cd 40 80 	pushm	r7,lr
80026f1c:	1a 97       	mov	r7,sp
80026f1e:	20 2d       	sub	sp,8
80026f20:	ef 4c ff f8 	st.w	r7[-8],r12
80026f24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f28:	a5 98       	lsr	r8,0x5
80026f2a:	a9 78       	lsl	r8,0x9
80026f2c:	e0 28 e0 00 	sub	r8,57344
80026f30:	ef 48 ff fc 	st.w	r7[-4],r8
80026f34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f3c:	30 19       	mov	r9,1
80026f3e:	f2 08 09 48 	lsl	r8,r9,r8
80026f42:	10 99       	mov	r9,r8
80026f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f48:	f1 49 00 58 	st.w	r8[88],r9
80026f4c:	2f ed       	sub	sp,-8
80026f4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f52 <gpio_clr_gpio_pin>:
80026f52:	eb cd 40 80 	pushm	r7,lr
80026f56:	1a 97       	mov	r7,sp
80026f58:	20 2d       	sub	sp,8
80026f5a:	ef 4c ff f8 	st.w	r7[-8],r12
80026f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f62:	a5 98       	lsr	r8,0x5
80026f64:	a9 78       	lsl	r8,0x9
80026f66:	e0 28 e0 00 	sub	r8,57344
80026f6a:	ef 48 ff fc 	st.w	r7[-4],r8
80026f6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f72:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f76:	30 19       	mov	r9,1
80026f78:	f2 08 09 48 	lsl	r8,r9,r8
80026f7c:	10 99       	mov	r9,r8
80026f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f82:	f1 49 00 58 	st.w	r8[88],r9
80026f86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f8e:	30 19       	mov	r9,1
80026f90:	f2 08 09 48 	lsl	r8,r9,r8
80026f94:	10 99       	mov	r9,r8
80026f96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f9a:	f1 49 00 44 	st.w	r8[68],r9
80026f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fa2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026fa6:	30 19       	mov	r9,1
80026fa8:	f2 08 09 48 	lsl	r8,r9,r8
80026fac:	10 99       	mov	r9,r8
80026fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fb2:	91 19       	st.w	r8[0x4],r9
80026fb4:	2f ed       	sub	sp,-8
80026fb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80026fba <gpio_set_group_low>:
80026fba:	eb cd 40 80 	pushm	r7,lr
80026fbe:	1a 97       	mov	r7,sp
80026fc0:	20 3d       	sub	sp,12
80026fc2:	ef 4c ff f8 	st.w	r7[-8],r12
80026fc6:	ef 4b ff f4 	st.w	r7[-12],r11
80026fca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fce:	a9 78       	lsl	r8,0x9
80026fd0:	e0 28 e0 00 	sub	r8,57344
80026fd4:	ef 48 ff fc 	st.w	r7[-4],r8
80026fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fdc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fe0:	f1 49 00 58 	st.w	r8[88],r9
80026fe4:	2f dd       	sub	sp,-12
80026fe6:	e3 cd 80 80 	ldm	sp++,r7,pc

80026fea <gpio_tgl_gpio_pin>:
80026fea:	eb cd 40 80 	pushm	r7,lr
80026fee:	1a 97       	mov	r7,sp
80026ff0:	20 2d       	sub	sp,8
80026ff2:	ef 4c ff f8 	st.w	r7[-8],r12
80026ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ffa:	a5 98       	lsr	r8,0x5
80026ffc:	a9 78       	lsl	r8,0x9
80026ffe:	e0 28 e0 00 	sub	r8,57344
80027002:	ef 48 ff fc 	st.w	r7[-4],r8
80027006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002700a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002700e:	30 19       	mov	r9,1
80027010:	f2 08 09 48 	lsl	r8,r9,r8
80027014:	10 99       	mov	r9,r8
80027016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002701a:	f1 49 00 5c 	st.w	r8[92],r9
8002701e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027022:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027026:	30 19       	mov	r9,1
80027028:	f2 08 09 48 	lsl	r8,r9,r8
8002702c:	10 99       	mov	r9,r8
8002702e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027032:	f1 49 00 44 	st.w	r8[68],r9
80027036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002703a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002703e:	30 19       	mov	r9,1
80027040:	f2 08 09 48 	lsl	r8,r9,r8
80027044:	10 99       	mov	r9,r8
80027046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002704a:	91 19       	st.w	r8[0x4],r9
8002704c:	2f ed       	sub	sp,-8
8002704e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027052 <gpio_toggle_pin>:
80027052:	eb cd 40 80 	pushm	r7,lr
80027056:	1a 97       	mov	r7,sp
80027058:	20 2d       	sub	sp,8
8002705a:	ef 4c ff f8 	st.w	r7[-8],r12
8002705e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027062:	a5 98       	lsr	r8,0x5
80027064:	a9 78       	lsl	r8,0x9
80027066:	e0 28 e0 00 	sub	r8,57344
8002706a:	ef 48 ff fc 	st.w	r7[-4],r8
8002706e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027072:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027076:	30 19       	mov	r9,1
80027078:	f2 08 09 48 	lsl	r8,r9,r8
8002707c:	10 99       	mov	r9,r8
8002707e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027082:	f1 49 00 5c 	st.w	r8[92],r9
80027086:	2f ed       	sub	sp,-8
80027088:	e3 cd 80 80 	ldm	sp++,r7,pc

8002708c <gpio_toggle_group>:
8002708c:	eb cd 40 80 	pushm	r7,lr
80027090:	1a 97       	mov	r7,sp
80027092:	20 3d       	sub	sp,12
80027094:	ef 4c ff f8 	st.w	r7[-8],r12
80027098:	ef 4b ff f4 	st.w	r7[-12],r11
8002709c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270a0:	a9 78       	lsl	r8,0x9
800270a2:	e0 28 e0 00 	sub	r8,57344
800270a6:	ef 48 ff fc 	st.w	r7[-4],r8
800270aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
800270b2:	f1 49 00 5c 	st.w	r8[92],r9
800270b6:	2f dd       	sub	sp,-12
800270b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800270bc <gpio_set_gpio_open_drain_pin>:
800270bc:	eb cd 40 80 	pushm	r7,lr
800270c0:	1a 97       	mov	r7,sp
800270c2:	20 2d       	sub	sp,8
800270c4:	ef 4c ff f8 	st.w	r7[-8],r12
800270c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270cc:	a5 98       	lsr	r8,0x5
800270ce:	a9 78       	lsl	r8,0x9
800270d0:	e0 28 e0 00 	sub	r8,57344
800270d4:	ef 48 ff fc 	st.w	r7[-4],r8
800270d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270e0:	30 19       	mov	r9,1
800270e2:	f2 08 09 48 	lsl	r8,r9,r8
800270e6:	10 99       	mov	r9,r8
800270e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270ec:	f1 49 00 48 	st.w	r8[72],r9
800270f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270f8:	30 19       	mov	r9,1
800270fa:	f2 08 09 48 	lsl	r8,r9,r8
800270fe:	10 99       	mov	r9,r8
80027100:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027104:	91 19       	st.w	r8[0x4],r9
80027106:	2f ed       	sub	sp,-8
80027108:	e3 cd 80 80 	ldm	sp++,r7,pc

8002710c <gpio_clr_gpio_open_drain_pin>:
8002710c:	eb cd 40 80 	pushm	r7,lr
80027110:	1a 97       	mov	r7,sp
80027112:	20 2d       	sub	sp,8
80027114:	ef 4c ff f8 	st.w	r7[-8],r12
80027118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002711c:	a5 98       	lsr	r8,0x5
8002711e:	a9 78       	lsl	r8,0x9
80027120:	e0 28 e0 00 	sub	r8,57344
80027124:	ef 48 ff fc 	st.w	r7[-4],r8
80027128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002712c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027130:	30 19       	mov	r9,1
80027132:	f2 08 09 48 	lsl	r8,r9,r8
80027136:	10 99       	mov	r9,r8
80027138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002713c:	f1 49 00 58 	st.w	r8[88],r9
80027140:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027144:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027148:	30 19       	mov	r9,1
8002714a:	f2 08 09 48 	lsl	r8,r9,r8
8002714e:	10 99       	mov	r9,r8
80027150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027154:	f1 49 00 44 	st.w	r8[68],r9
80027158:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002715c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027160:	30 19       	mov	r9,1
80027162:	f2 08 09 48 	lsl	r8,r9,r8
80027166:	10 99       	mov	r9,r8
80027168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002716c:	91 19       	st.w	r8[0x4],r9
8002716e:	2f ed       	sub	sp,-8
80027170:	e3 cd 80 80 	ldm	sp++,r7,pc

80027174 <gpio_tgl_gpio_open_drain_pin>:
80027174:	eb cd 40 80 	pushm	r7,lr
80027178:	1a 97       	mov	r7,sp
8002717a:	20 2d       	sub	sp,8
8002717c:	ef 4c ff f8 	st.w	r7[-8],r12
80027180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027184:	a5 98       	lsr	r8,0x5
80027186:	a9 78       	lsl	r8,0x9
80027188:	e0 28 e0 00 	sub	r8,57344
8002718c:	ef 48 ff fc 	st.w	r7[-4],r8
80027190:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027194:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027198:	30 19       	mov	r9,1
8002719a:	f2 08 09 48 	lsl	r8,r9,r8
8002719e:	10 99       	mov	r9,r8
800271a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271a4:	f1 49 00 58 	st.w	r8[88],r9
800271a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271b0:	30 19       	mov	r9,1
800271b2:	f2 08 09 48 	lsl	r8,r9,r8
800271b6:	10 99       	mov	r9,r8
800271b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271bc:	f1 49 00 4c 	st.w	r8[76],r9
800271c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271c8:	30 19       	mov	r9,1
800271ca:	f2 08 09 48 	lsl	r8,r9,r8
800271ce:	10 99       	mov	r9,r8
800271d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271d4:	91 19       	st.w	r8[0x4],r9
800271d6:	2f ed       	sub	sp,-8
800271d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800271dc <gpio_enable_pin_glitch_filter>:
800271dc:	eb cd 40 80 	pushm	r7,lr
800271e0:	1a 97       	mov	r7,sp
800271e2:	20 2d       	sub	sp,8
800271e4:	ef 4c ff f8 	st.w	r7[-8],r12
800271e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271ec:	a5 98       	lsr	r8,0x5
800271ee:	a9 78       	lsl	r8,0x9
800271f0:	e0 28 e0 00 	sub	r8,57344
800271f4:	ef 48 ff fc 	st.w	r7[-4],r8
800271f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027200:	30 19       	mov	r9,1
80027202:	f2 08 09 48 	lsl	r8,r9,r8
80027206:	10 99       	mov	r9,r8
80027208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002720c:	f1 49 00 c4 	st.w	r8[196],r9
80027210:	2f ed       	sub	sp,-8
80027212:	e3 cd 80 80 	ldm	sp++,r7,pc

80027216 <gpio_disable_pin_glitch_filter>:
80027216:	eb cd 40 80 	pushm	r7,lr
8002721a:	1a 97       	mov	r7,sp
8002721c:	20 2d       	sub	sp,8
8002721e:	ef 4c ff f8 	st.w	r7[-8],r12
80027222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027226:	a5 98       	lsr	r8,0x5
80027228:	a9 78       	lsl	r8,0x9
8002722a:	e0 28 e0 00 	sub	r8,57344
8002722e:	ef 48 ff fc 	st.w	r7[-4],r8
80027232:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027236:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002723a:	30 19       	mov	r9,1
8002723c:	f2 08 09 48 	lsl	r8,r9,r8
80027240:	10 99       	mov	r9,r8
80027242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027246:	f1 49 00 c8 	st.w	r8[200],r9
8002724a:	2f ed       	sub	sp,-8
8002724c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027250 <gpio_configure_edge_detector>:
80027250:	eb cd 40 80 	pushm	r7,lr
80027254:	1a 97       	mov	r7,sp
80027256:	20 3d       	sub	sp,12
80027258:	ef 4c ff f8 	st.w	r7[-8],r12
8002725c:	ef 4b ff f4 	st.w	r7[-12],r11
80027260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027264:	a5 98       	lsr	r8,0x5
80027266:	a9 78       	lsl	r8,0x9
80027268:	e0 28 e0 00 	sub	r8,57344
8002726c:	ef 48 ff fc 	st.w	r7[-4],r8
80027270:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027274:	58 18       	cp.w	r8,1
80027276:	c1 e0       	breq	800272b2 <gpio_configure_edge_detector+0x62>
80027278:	c0 43       	brcs	80027280 <gpio_configure_edge_detector+0x30>
8002727a:	58 28       	cp.w	r8,2
8002727c:	c3 40       	breq	800272e4 <gpio_configure_edge_detector+0x94>
8002727e:	c4 c8       	rjmp	80027316 <gpio_configure_edge_detector+0xc6>
80027280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027284:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027288:	30 19       	mov	r9,1
8002728a:	f2 08 09 48 	lsl	r8,r9,r8
8002728e:	10 99       	mov	r9,r8
80027290:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027294:	f1 49 00 a8 	st.w	r8[168],r9
80027298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002729c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272a0:	30 19       	mov	r9,1
800272a2:	f2 08 09 48 	lsl	r8,r9,r8
800272a6:	10 99       	mov	r9,r8
800272a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272ac:	f1 49 00 b8 	st.w	r8[184],r9
800272b0:	c3 58       	rjmp	8002731a <gpio_configure_edge_detector+0xca>
800272b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272ba:	30 19       	mov	r9,1
800272bc:	f2 08 09 48 	lsl	r8,r9,r8
800272c0:	10 99       	mov	r9,r8
800272c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272c6:	f1 49 00 a4 	st.w	r8[164],r9
800272ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272d2:	30 19       	mov	r9,1
800272d4:	f2 08 09 48 	lsl	r8,r9,r8
800272d8:	10 99       	mov	r9,r8
800272da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272de:	f1 49 00 b8 	st.w	r8[184],r9
800272e2:	c1 c8       	rjmp	8002731a <gpio_configure_edge_detector+0xca>
800272e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272ec:	30 19       	mov	r9,1
800272ee:	f2 08 09 48 	lsl	r8,r9,r8
800272f2:	10 99       	mov	r9,r8
800272f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272f8:	f1 49 00 a8 	st.w	r8[168],r9
800272fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027300:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027304:	30 19       	mov	r9,1
80027306:	f2 08 09 48 	lsl	r8,r9,r8
8002730a:	10 99       	mov	r9,r8
8002730c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027310:	f1 49 00 b4 	st.w	r8[180],r9
80027314:	c0 38       	rjmp	8002731a <gpio_configure_edge_detector+0xca>
80027316:	30 18       	mov	r8,1
80027318:	c0 28       	rjmp	8002731c <gpio_configure_edge_detector+0xcc>
8002731a:	30 08       	mov	r8,0
8002731c:	10 9c       	mov	r12,r8
8002731e:	2f dd       	sub	sp,-12
80027320:	e3 cd 80 80 	ldm	sp++,r7,pc

80027324 <gpio_enable_pin_interrupt>:
80027324:	eb cd 40 c0 	pushm	r6-r7,lr
80027328:	1a 97       	mov	r7,sp
8002732a:	20 3d       	sub	sp,12
8002732c:	49 b6       	lddpc	r6,80027398 <gpio_enable_pin_interrupt+0x74>
8002732e:	1e 26       	rsub	r6,pc
80027330:	ef 4c ff f8 	st.w	r7[-8],r12
80027334:	ef 4b ff f4 	st.w	r7[-12],r11
80027338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002733c:	a5 98       	lsr	r8,0x5
8002733e:	a9 78       	lsl	r8,0x9
80027340:	e0 28 e0 00 	sub	r8,57344
80027344:	ef 48 ff fc 	st.w	r7[-4],r8
80027348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002734c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027350:	30 19       	mov	r9,1
80027352:	f2 08 09 48 	lsl	r8,r9,r8
80027356:	10 99       	mov	r9,r8
80027358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002735c:	f1 49 00 c4 	st.w	r8[196],r9
80027360:	ee fb ff f4 	ld.w	r11,r7[-12]
80027364:	ee fc ff f8 	ld.w	r12,r7[-8]
80027368:	c7 4f       	rcall	80027250 <gpio_configure_edge_detector>
8002736a:	18 98       	mov	r8,r12
8002736c:	58 18       	cp.w	r8,1
8002736e:	c0 31       	brne	80027374 <gpio_enable_pin_interrupt+0x50>
80027370:	30 18       	mov	r8,1
80027372:	c0 e8       	rjmp	8002738e <gpio_enable_pin_interrupt+0x6a>
80027374:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027378:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002737c:	30 19       	mov	r9,1
8002737e:	f2 08 09 48 	lsl	r8,r9,r8
80027382:	10 99       	mov	r9,r8
80027384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027388:	f1 49 00 94 	st.w	r8[148],r9
8002738c:	30 08       	mov	r8,0
8002738e:	10 9c       	mov	r12,r8
80027390:	2f dd       	sub	sp,-12
80027392:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027396:	00 00       	add	r0,r0
80027398:	80 02       	ld.sh	r2,r0[0x0]
8002739a:	71 b2       	ld.w	r2,r8[0x6c]

8002739c <gpio_disable_pin_interrupt>:
8002739c:	eb cd 40 80 	pushm	r7,lr
800273a0:	1a 97       	mov	r7,sp
800273a2:	20 2d       	sub	sp,8
800273a4:	ef 4c ff f8 	st.w	r7[-8],r12
800273a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273ac:	a5 98       	lsr	r8,0x5
800273ae:	a9 78       	lsl	r8,0x9
800273b0:	e0 28 e0 00 	sub	r8,57344
800273b4:	ef 48 ff fc 	st.w	r7[-4],r8
800273b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273c0:	30 19       	mov	r9,1
800273c2:	f2 08 09 48 	lsl	r8,r9,r8
800273c6:	10 99       	mov	r9,r8
800273c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273cc:	f1 49 00 98 	st.w	r8[152],r9
800273d0:	2f ed       	sub	sp,-8
800273d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800273d6 <gpio_get_pin_interrupt_flag>:
800273d6:	eb cd 40 80 	pushm	r7,lr
800273da:	1a 97       	mov	r7,sp
800273dc:	20 2d       	sub	sp,8
800273de:	ef 4c ff f8 	st.w	r7[-8],r12
800273e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273e6:	a5 98       	lsr	r8,0x5
800273e8:	a9 78       	lsl	r8,0x9
800273ea:	e0 28 e0 00 	sub	r8,57344
800273ee:	ef 48 ff fc 	st.w	r7[-4],r8
800273f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273f6:	f0 f9 00 d0 	ld.w	r9,r8[208]
800273fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027402:	f2 08 0a 48 	lsr	r8,r9,r8
80027406:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002740a:	10 9c       	mov	r12,r8
8002740c:	2f ed       	sub	sp,-8
8002740e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027412 <gpio_clear_pin_interrupt_flag>:
80027412:	eb cd 40 80 	pushm	r7,lr
80027416:	1a 97       	mov	r7,sp
80027418:	20 2d       	sub	sp,8
8002741a:	ef 4c ff f8 	st.w	r7[-8],r12
8002741e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027422:	a5 98       	lsr	r8,0x5
80027424:	a9 78       	lsl	r8,0x9
80027426:	e0 28 e0 00 	sub	r8,57344
8002742a:	ef 48 ff fc 	st.w	r7[-4],r8
8002742e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027432:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027436:	30 19       	mov	r9,1
80027438:	f2 08 09 48 	lsl	r8,r9,r8
8002743c:	10 99       	mov	r9,r8
8002743e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027442:	f1 49 00 d8 	st.w	r8[216],r9
80027446:	2f ed       	sub	sp,-8
80027448:	e3 cd 80 80 	ldm	sp++,r7,pc

8002744c <_unhandled_interrupt>:
8002744c:	eb cd 40 c0 	pushm	r6-r7,lr
80027450:	1a 97       	mov	r7,sp
80027452:	c0 08       	rjmp	80027452 <_unhandled_interrupt+0x6>

80027454 <_get_interrupt_handler>:
80027454:	eb cd 40 c0 	pushm	r6-r7,lr
80027458:	1a 97       	mov	r7,sp
8002745a:	20 3d       	sub	sp,12
8002745c:	49 a6       	lddpc	r6,800274c4 <_get_interrupt_handler+0x70>
8002745e:	1e 26       	rsub	r6,pc
80027460:	ef 4c ff f4 	st.w	r7[-12],r12
80027464:	fe 78 00 00 	mov	r8,-65536
80027468:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002746c:	f2 09 11 03 	rsub	r9,r9,3
80027470:	28 09       	sub	r9,-128
80027472:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027476:	ef 48 ff f8 	st.w	r7[-8],r8
8002747a:	fe 78 00 00 	mov	r8,-65536
8002747e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027482:	2c 09       	sub	r9,-64
80027484:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027488:	ef 48 ff fc 	st.w	r7[-4],r8
8002748c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027490:	58 08       	cp.w	r8,0
80027492:	c1 40       	breq	800274ba <_get_interrupt_handler+0x66>
80027494:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027498:	ec f8 02 80 	ld.w	r8,r6[640]
8002749c:	a1 79       	lsl	r9,0x1
8002749e:	2f f9       	sub	r9,-1
800274a0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800274a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274a8:	f0 08 12 00 	clz	r8,r8
800274ac:	f0 08 11 1f 	rsub	r8,r8,31
800274b0:	a3 68       	lsl	r8,0x2
800274b2:	f2 08 00 08 	add	r8,r9,r8
800274b6:	70 08       	ld.w	r8,r8[0x0]
800274b8:	c0 28       	rjmp	800274bc <_get_interrupt_handler+0x68>
800274ba:	30 08       	mov	r8,0
800274bc:	10 9c       	mov	r12,r8
800274be:	2f dd       	sub	sp,-12
800274c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274c4:	80 02       	ld.sh	r2,r0[0x0]
800274c6:	72 e2       	ld.w	r2,r9[0x38]

800274c8 <INTC_init_evba>:
800274c8:	eb cd 40 c0 	pushm	r6-r7,lr
800274cc:	1a 97       	mov	r7,sp
800274ce:	48 56       	lddpc	r6,800274e0 <INTC_init_evba+0x18>
800274d0:	1e 26       	rsub	r6,pc
800274d2:	ec f8 07 84 	ld.w	r8,r6[1924]
800274d6:	e3 b8 00 01 	mtsr	0x4,r8
800274da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274de:	00 00       	add	r0,r0
800274e0:	80 02       	ld.sh	r2,r0[0x0]
800274e2:	73 54       	ld.w	r4,r9[0x54]

800274e4 <INTC_init_interrupts>:
800274e4:	eb cd 40 c0 	pushm	r6-r7,lr
800274e8:	1a 97       	mov	r7,sp
800274ea:	20 2d       	sub	sp,8
800274ec:	4a 16       	lddpc	r6,80027570 <INTC_init_interrupts+0x8c>
800274ee:	1e 26       	rsub	r6,pc
800274f0:	ce cf       	rcall	800274c8 <INTC_init_evba>
800274f2:	30 08       	mov	r8,0
800274f4:	ef 48 ff f8 	st.w	r7[-8],r8
800274f8:	c3 38       	rjmp	8002755e <INTC_init_interrupts+0x7a>
800274fa:	30 08       	mov	r8,0
800274fc:	ef 48 ff fc 	st.w	r7[-4],r8
80027500:	c1 68       	rjmp	8002752c <INTC_init_interrupts+0x48>
80027502:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027506:	ec f8 02 80 	ld.w	r8,r6[640]
8002750a:	a1 79       	lsl	r9,0x1
8002750c:	2f f9       	sub	r9,-1
8002750e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027516:	a3 68       	lsl	r8,0x2
80027518:	f2 08 00 08 	add	r8,r9,r8
8002751c:	fe c9 00 d0 	sub	r9,pc,208
80027520:	91 09       	st.w	r8[0x0],r9
80027522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027526:	2f f8       	sub	r8,-1
80027528:	ef 48 ff fc 	st.w	r7[-4],r8
8002752c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027530:	ec f8 02 80 	ld.w	r8,r6[640]
80027534:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80027538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002753c:	10 39       	cp.w	r9,r8
8002753e:	fe 9b ff e2 	brhi	80027502 <INTC_init_interrupts+0x1e>
80027542:	fe 78 00 00 	mov	r8,-65536
80027546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002754a:	ec fa 03 d8 	ld.w	r10,r6[984]
8002754e:	74 0a       	ld.w	r10,r10[0x0]
80027550:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80027554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027558:	2f f8       	sub	r8,-1
8002755a:	ef 48 ff f8 	st.w	r7[-8],r8
8002755e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027562:	e0 48 00 2e 	cp.w	r8,46
80027566:	fe 98 ff ca 	brls	800274fa <INTC_init_interrupts+0x16>
8002756a:	2f ed       	sub	sp,-8
8002756c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027570:	80 02       	ld.sh	r2,r0[0x0]
80027572:	73 72       	ld.w	r2,r9[0x5c]

80027574 <INTC_register_interrupt>:
80027574:	eb cd 40 c0 	pushm	r6-r7,lr
80027578:	1a 97       	mov	r7,sp
8002757a:	20 4d       	sub	sp,16
8002757c:	49 86       	lddpc	r6,800275dc <INTC_register_interrupt+0x68>
8002757e:	1e 26       	rsub	r6,pc
80027580:	ef 4c ff f8 	st.w	r7[-8],r12
80027584:	ef 4b ff f4 	st.w	r7[-12],r11
80027588:	ef 4a ff f0 	st.w	r7[-16],r10
8002758c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027590:	a5 98       	lsr	r8,0x5
80027592:	ef 48 ff fc 	st.w	r7[-4],r8
80027596:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002759a:	ec f8 02 80 	ld.w	r8,r6[640]
8002759e:	a1 79       	lsl	r9,0x1
800275a0:	2f f9       	sub	r9,-1
800275a2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800275a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800275aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275ae:	a3 68       	lsl	r8,0x2
800275b0:	f2 08 00 08 	add	r8,r9,r8
800275b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800275b8:	91 09       	st.w	r8[0x0],r9
800275ba:	fe 78 00 00 	mov	r8,-65536
800275be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800275c2:	ee fa ff f0 	ld.w	r10,r7[-16]
800275c6:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
800275ca:	ec fa 03 d8 	ld.w	r10,r6[984]
800275ce:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800275d2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800275d6:	2f cd       	sub	sp,-16
800275d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800275dc:	80 02       	ld.sh	r2,r0[0x0]
800275de:	74 02       	ld.w	r2,r10[0x0]

800275e0 <cpu_irq_is_enabled_flags>:
800275e0:	eb cd 40 80 	pushm	r7,lr
800275e4:	1a 97       	mov	r7,sp
800275e6:	20 1d       	sub	sp,4
800275e8:	ef 4c ff fc 	st.w	r7[-4],r12
800275ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275f0:	e6 18 00 01 	andh	r8,0x1,COH
800275f4:	5f 08       	sreq	r8
800275f6:	5c 58       	castu.b	r8
800275f8:	10 9c       	mov	r12,r8
800275fa:	2f fd       	sub	sp,-4
800275fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80027600 <pdca_get_handler>:
80027600:	eb cd 40 80 	pushm	r7,lr
80027604:	1a 97       	mov	r7,sp
80027606:	20 2d       	sub	sp,8
80027608:	ef 4c ff f8 	st.w	r7[-8],r12
8002760c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027610:	a7 68       	lsl	r8,0x6
80027612:	e2 38 00 00 	sub	r8,196608
80027616:	ef 48 ff fc 	st.w	r7[-4],r8
8002761a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002761e:	58 f8       	cp.w	r8,15
80027620:	e0 88 00 04 	brls	80027628 <pdca_get_handler+0x28>
80027624:	3f f8       	mov	r8,-1
80027626:	c0 38       	rjmp	8002762c <pdca_get_handler+0x2c>
80027628:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002762c:	10 9c       	mov	r12,r8
8002762e:	2f ed       	sub	sp,-8
80027630:	e3 cd 80 80 	ldm	sp++,r7,pc

80027634 <pdca_init_channel>:
80027634:	eb cd 40 c0 	pushm	r6-r7,lr
80027638:	1a 97       	mov	r7,sp
8002763a:	20 4d       	sub	sp,16
8002763c:	4b 26       	lddpc	r6,80027704 <pdca_init_channel+0xd0>
8002763e:	1e 26       	rsub	r6,pc
80027640:	ef 4c ff f4 	st.w	r7[-12],r12
80027644:	ef 4b ff f0 	st.w	r7[-16],r11
80027648:	ee fc ff f4 	ld.w	r12,r7[-12]
8002764c:	f0 16 00 27 	mcall	r6[156]
80027650:	18 98       	mov	r8,r12
80027652:	ef 48 ff f8 	st.w	r7[-8],r8
80027656:	ee fc ff f4 	ld.w	r12,r7[-12]
8002765a:	f0 16 00 9a 	mcall	r6[616]
8002765e:	ee fc ff f4 	ld.w	r12,r7[-12]
80027662:	f0 16 02 00 	mcall	r6[2048]
80027666:	e1 b8 00 00 	mfsr	r8,0x0
8002766a:	10 9c       	mov	r12,r8
8002766c:	cb af       	rcall	800275e0 <cpu_irq_is_enabled_flags>
8002766e:	18 98       	mov	r8,r12
80027670:	ef 68 ff ff 	st.b	r7[-1],r8
80027674:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027678:	30 08       	mov	r8,0
8002767a:	f0 09 18 00 	cp.b	r9,r8
8002767e:	c0 20       	breq	80027682 <pdca_init_channel+0x4e>
80027680:	d3 03       	ssrf	0x10
80027682:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027686:	70 08       	ld.w	r8,r8[0x0]
80027688:	10 99       	mov	r9,r8
8002768a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002768e:	91 09       	st.w	r8[0x0],r9
80027690:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027694:	70 19       	ld.w	r9,r8[0x4]
80027696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002769a:	91 29       	st.w	r8[0x8],r9
8002769c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276a0:	70 49       	ld.w	r9,r8[0x10]
800276a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276a6:	91 19       	st.w	r8[0x4],r9
800276a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276ac:	70 28       	ld.w	r8,r8[0x8]
800276ae:	10 99       	mov	r9,r8
800276b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276b4:	91 39       	st.w	r8[0xc],r9
800276b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276ba:	70 39       	ld.w	r9,r8[0xc]
800276bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276c0:	91 49       	st.w	r8[0x10],r9
800276c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276c6:	f1 38 00 18 	ld.ub	r8,r8[24]
800276ca:	a3 68       	lsl	r8,0x2
800276cc:	10 99       	mov	r9,r8
800276ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276d2:	70 58       	ld.w	r8,r8[0x14]
800276d4:	10 49       	or	r9,r8
800276d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276da:	91 69       	st.w	r8[0x18],r9
800276dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276e0:	e0 69 01 00 	mov	r9,256
800276e4:	91 59       	st.w	r8[0x14],r9
800276e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276ea:	70 b8       	ld.w	r8,r8[0x2c]
800276ec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800276f0:	30 08       	mov	r8,0
800276f2:	f0 09 18 00 	cp.b	r9,r8
800276f6:	c0 20       	breq	800276fa <pdca_init_channel+0xc6>
800276f8:	d5 03       	csrf	0x10
800276fa:	30 08       	mov	r8,0
800276fc:	10 9c       	mov	r12,r8
800276fe:	2f cd       	sub	sp,-16
80027700:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027704:	80 02       	ld.sh	r2,r0[0x0]
80027706:	74 c2       	ld.w	r2,r10[0x30]

80027708 <pdca_get_channel_status>:
80027708:	eb cd 40 c0 	pushm	r6-r7,lr
8002770c:	1a 97       	mov	r7,sp
8002770e:	20 2d       	sub	sp,8
80027710:	48 a6       	lddpc	r6,80027738 <pdca_get_channel_status+0x30>
80027712:	1e 26       	rsub	r6,pc
80027714:	ef 4c ff f8 	st.w	r7[-8],r12
80027718:	ee fc ff f8 	ld.w	r12,r7[-8]
8002771c:	f0 16 00 27 	mcall	r6[156]
80027720:	18 98       	mov	r8,r12
80027722:	ef 48 ff fc 	st.w	r7[-4],r8
80027726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002772a:	70 78       	ld.w	r8,r8[0x1c]
8002772c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027730:	10 9c       	mov	r12,r8
80027732:	2f ed       	sub	sp,-8
80027734:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027738:	80 02       	ld.sh	r2,r0[0x0]
8002773a:	75 96       	ld.w	r6,r10[0x64]

8002773c <pdca_disable>:
8002773c:	eb cd 40 c0 	pushm	r6-r7,lr
80027740:	1a 97       	mov	r7,sp
80027742:	20 2d       	sub	sp,8
80027744:	48 96       	lddpc	r6,80027768 <pdca_disable+0x2c>
80027746:	1e 26       	rsub	r6,pc
80027748:	ef 4c ff f8 	st.w	r7[-8],r12
8002774c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027750:	f0 16 00 27 	mcall	r6[156]
80027754:	18 98       	mov	r8,r12
80027756:	ef 48 ff fc 	st.w	r7[-4],r8
8002775a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002775e:	30 29       	mov	r9,2
80027760:	91 59       	st.w	r8[0x14],r9
80027762:	2f ed       	sub	sp,-8
80027764:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027768:	80 02       	ld.sh	r2,r0[0x0]
8002776a:	75 ca       	ld.w	r10,r10[0x70]

8002776c <pdca_enable>:
8002776c:	eb cd 40 c0 	pushm	r6-r7,lr
80027770:	1a 97       	mov	r7,sp
80027772:	20 2d       	sub	sp,8
80027774:	48 96       	lddpc	r6,80027798 <pdca_enable+0x2c>
80027776:	1e 26       	rsub	r6,pc
80027778:	ef 4c ff f8 	st.w	r7[-8],r12
8002777c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027780:	f0 16 00 27 	mcall	r6[156]
80027784:	18 98       	mov	r8,r12
80027786:	ef 48 ff fc 	st.w	r7[-4],r8
8002778a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002778e:	30 19       	mov	r9,1
80027790:	91 59       	st.w	r8[0x14],r9
80027792:	2f ed       	sub	sp,-8
80027794:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027798:	80 02       	ld.sh	r2,r0[0x0]
8002779a:	75 fa       	ld.w	r10,r10[0x7c]

8002779c <pdca_get_load_size>:
8002779c:	eb cd 40 c0 	pushm	r6-r7,lr
800277a0:	1a 97       	mov	r7,sp
800277a2:	20 2d       	sub	sp,8
800277a4:	48 96       	lddpc	r6,800277c8 <pdca_get_load_size+0x2c>
800277a6:	1e 26       	rsub	r6,pc
800277a8:	ef 4c ff f8 	st.w	r7[-8],r12
800277ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800277b0:	f0 16 00 27 	mcall	r6[156]
800277b4:	18 98       	mov	r8,r12
800277b6:	ef 48 ff fc 	st.w	r7[-4],r8
800277ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277be:	70 28       	ld.w	r8,r8[0x8]
800277c0:	10 9c       	mov	r12,r8
800277c2:	2f ed       	sub	sp,-8
800277c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800277c8:	80 02       	ld.sh	r2,r0[0x0]
800277ca:	76 2a       	ld.w	r10,r11[0x8]

800277cc <pdca_load_channel>:
800277cc:	eb cd 40 c0 	pushm	r6-r7,lr
800277d0:	1a 97       	mov	r7,sp
800277d2:	20 5d       	sub	sp,20
800277d4:	49 d6       	lddpc	r6,80027848 <pdca_load_channel+0x7c>
800277d6:	1e 26       	rsub	r6,pc
800277d8:	ef 4c ff f4 	st.w	r7[-12],r12
800277dc:	ef 4b ff f0 	st.w	r7[-16],r11
800277e0:	ef 4a ff ec 	st.w	r7[-20],r10
800277e4:	ee fc ff f4 	ld.w	r12,r7[-12]
800277e8:	f0 16 00 27 	mcall	r6[156]
800277ec:	18 98       	mov	r8,r12
800277ee:	ef 48 ff f8 	st.w	r7[-8],r8
800277f2:	e1 b8 00 00 	mfsr	r8,0x0
800277f6:	10 9c       	mov	r12,r8
800277f8:	cf 4e       	rcall	800275e0 <cpu_irq_is_enabled_flags>
800277fa:	18 98       	mov	r8,r12
800277fc:	ef 68 ff ff 	st.b	r7[-1],r8
80027800:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027804:	30 08       	mov	r8,0
80027806:	f0 09 18 00 	cp.b	r9,r8
8002780a:	c0 20       	breq	8002780e <pdca_load_channel+0x42>
8002780c:	d3 03       	ssrf	0x10
8002780e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027812:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027816:	91 09       	st.w	r8[0x0],r9
80027818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002781c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027820:	91 29       	st.w	r8[0x8],r9
80027822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027826:	e0 69 01 00 	mov	r9,256
8002782a:	91 59       	st.w	r8[0x14],r9
8002782c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027830:	70 b8       	ld.w	r8,r8[0x2c]
80027832:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027836:	30 08       	mov	r8,0
80027838:	f0 09 18 00 	cp.b	r9,r8
8002783c:	c0 20       	breq	80027840 <pdca_load_channel+0x74>
8002783e:	d5 03       	csrf	0x10
80027840:	2f bd       	sub	sp,-20
80027842:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027846:	00 00       	add	r0,r0
80027848:	80 02       	ld.sh	r2,r0[0x0]
8002784a:	76 5a       	ld.w	r10,r11[0x14]

8002784c <pdca_get_reload_size>:
8002784c:	eb cd 40 c0 	pushm	r6-r7,lr
80027850:	1a 97       	mov	r7,sp
80027852:	20 2d       	sub	sp,8
80027854:	48 96       	lddpc	r6,80027878 <pdca_get_reload_size+0x2c>
80027856:	1e 26       	rsub	r6,pc
80027858:	ef 4c ff f8 	st.w	r7[-8],r12
8002785c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027860:	f0 16 00 27 	mcall	r6[156]
80027864:	18 98       	mov	r8,r12
80027866:	ef 48 ff fc 	st.w	r7[-4],r8
8002786a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002786e:	70 48       	ld.w	r8,r8[0x10]
80027870:	10 9c       	mov	r12,r8
80027872:	2f ed       	sub	sp,-8
80027874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027878:	80 02       	ld.sh	r2,r0[0x0]
8002787a:	76 da       	ld.w	r10,r11[0x34]

8002787c <pdca_reload_channel>:
8002787c:	eb cd 40 c0 	pushm	r6-r7,lr
80027880:	1a 97       	mov	r7,sp
80027882:	20 5d       	sub	sp,20
80027884:	49 d6       	lddpc	r6,800278f8 <pdca_reload_channel+0x7c>
80027886:	1e 26       	rsub	r6,pc
80027888:	ef 4c ff f4 	st.w	r7[-12],r12
8002788c:	ef 4b ff f0 	st.w	r7[-16],r11
80027890:	ef 4a ff ec 	st.w	r7[-20],r10
80027894:	ee fc ff f4 	ld.w	r12,r7[-12]
80027898:	f0 16 00 27 	mcall	r6[156]
8002789c:	18 98       	mov	r8,r12
8002789e:	ef 48 ff f8 	st.w	r7[-8],r8
800278a2:	e1 b8 00 00 	mfsr	r8,0x0
800278a6:	10 9c       	mov	r12,r8
800278a8:	c9 ce       	rcall	800275e0 <cpu_irq_is_enabled_flags>
800278aa:	18 98       	mov	r8,r12
800278ac:	ef 68 ff ff 	st.b	r7[-1],r8
800278b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800278b4:	30 08       	mov	r8,0
800278b6:	f0 09 18 00 	cp.b	r9,r8
800278ba:	c0 20       	breq	800278be <pdca_reload_channel+0x42>
800278bc:	d3 03       	ssrf	0x10
800278be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800278c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278c6:	91 39       	st.w	r8[0xc],r9
800278c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800278d0:	91 49       	st.w	r8[0x10],r9
800278d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278d6:	e0 69 01 00 	mov	r9,256
800278da:	91 59       	st.w	r8[0x14],r9
800278dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278e0:	70 b8       	ld.w	r8,r8[0x2c]
800278e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800278e6:	30 08       	mov	r8,0
800278e8:	f0 09 18 00 	cp.b	r9,r8
800278ec:	c0 20       	breq	800278f0 <pdca_reload_channel+0x74>
800278ee:	d5 03       	csrf	0x10
800278f0:	2f bd       	sub	sp,-20
800278f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800278f6:	00 00       	add	r0,r0
800278f8:	80 02       	ld.sh	r2,r0[0x0]
800278fa:	77 0a       	ld.w	r10,r11[0x40]

800278fc <pdca_set_peripheral_select>:
800278fc:	eb cd 40 c0 	pushm	r6-r7,lr
80027900:	1a 97       	mov	r7,sp
80027902:	20 3d       	sub	sp,12
80027904:	48 b6       	lddpc	r6,80027930 <pdca_set_peripheral_select+0x34>
80027906:	1e 26       	rsub	r6,pc
80027908:	ef 4c ff f8 	st.w	r7[-8],r12
8002790c:	ef 4b ff f4 	st.w	r7[-12],r11
80027910:	ee fc ff f8 	ld.w	r12,r7[-8]
80027914:	f0 16 00 27 	mcall	r6[156]
80027918:	18 98       	mov	r8,r12
8002791a:	ef 48 ff fc 	st.w	r7[-4],r8
8002791e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027922:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027926:	91 19       	st.w	r8[0x4],r9
80027928:	2f dd       	sub	sp,-12
8002792a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002792e:	00 00       	add	r0,r0
80027930:	80 02       	ld.sh	r2,r0[0x0]
80027932:	77 8a       	ld.w	r10,r11[0x60]

80027934 <pdca_set_transfer_size>:
80027934:	eb cd 40 c0 	pushm	r6-r7,lr
80027938:	1a 97       	mov	r7,sp
8002793a:	20 3d       	sub	sp,12
8002793c:	48 e6       	lddpc	r6,80027974 <pdca_set_transfer_size+0x40>
8002793e:	1e 26       	rsub	r6,pc
80027940:	ef 4c ff f8 	st.w	r7[-8],r12
80027944:	ef 4b ff f4 	st.w	r7[-12],r11
80027948:	ee fc ff f8 	ld.w	r12,r7[-8]
8002794c:	f0 16 00 27 	mcall	r6[156]
80027950:	18 98       	mov	r8,r12
80027952:	ef 48 ff fc 	st.w	r7[-4],r8
80027956:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002795a:	70 68       	ld.w	r8,r8[0x18]
8002795c:	10 99       	mov	r9,r8
8002795e:	e0 19 ff fc 	andl	r9,0xfffc
80027962:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027966:	10 49       	or	r9,r8
80027968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002796c:	91 69       	st.w	r8[0x18],r9
8002796e:	2f dd       	sub	sp,-12
80027970:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027974:	80 02       	ld.sh	r2,r0[0x0]
80027976:	77 c2       	ld.w	r2,r11[0x70]

80027978 <pdca_disable_event_trigger>:
80027978:	eb cd 40 c0 	pushm	r6-r7,lr
8002797c:	1a 97       	mov	r7,sp
8002797e:	20 2d       	sub	sp,8
80027980:	48 b6       	lddpc	r6,800279ac <pdca_disable_event_trigger+0x34>
80027982:	1e 26       	rsub	r6,pc
80027984:	ef 4c ff f8 	st.w	r7[-8],r12
80027988:	ee fc ff f8 	ld.w	r12,r7[-8]
8002798c:	f0 16 00 27 	mcall	r6[156]
80027990:	18 98       	mov	r8,r12
80027992:	ef 48 ff fc 	st.w	r7[-4],r8
80027996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002799a:	70 68       	ld.w	r8,r8[0x18]
8002799c:	10 99       	mov	r9,r8
8002799e:	a3 c9       	cbr	r9,0x2
800279a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279a4:	91 69       	st.w	r8[0x18],r9
800279a6:	2f ed       	sub	sp,-8
800279a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279ac:	80 02       	ld.sh	r2,r0[0x0]
800279ae:	78 06       	ld.w	r6,r12[0x0]

800279b0 <pdca_enable_event_trigger>:
800279b0:	eb cd 40 c0 	pushm	r6-r7,lr
800279b4:	1a 97       	mov	r7,sp
800279b6:	20 2d       	sub	sp,8
800279b8:	48 b6       	lddpc	r6,800279e4 <pdca_enable_event_trigger+0x34>
800279ba:	1e 26       	rsub	r6,pc
800279bc:	ef 4c ff f8 	st.w	r7[-8],r12
800279c0:	ee fc ff f8 	ld.w	r12,r7[-8]
800279c4:	f0 16 00 27 	mcall	r6[156]
800279c8:	18 98       	mov	r8,r12
800279ca:	ef 48 ff fc 	st.w	r7[-4],r8
800279ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279d2:	70 68       	ld.w	r8,r8[0x18]
800279d4:	10 99       	mov	r9,r8
800279d6:	a3 a9       	sbr	r9,0x2
800279d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279dc:	91 69       	st.w	r8[0x18],r9
800279de:	2f ed       	sub	sp,-8
800279e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279e4:	80 02       	ld.sh	r2,r0[0x0]
800279e6:	78 3e       	ld.w	lr,r12[0xc]

800279e8 <pdca_disable_interrupt_transfer_error>:
800279e8:	eb cd 40 c0 	pushm	r6-r7,lr
800279ec:	1a 97       	mov	r7,sp
800279ee:	20 3d       	sub	sp,12
800279f0:	49 66       	lddpc	r6,80027a48 <pdca_disable_interrupt_transfer_error+0x60>
800279f2:	1e 26       	rsub	r6,pc
800279f4:	ef 4c ff f4 	st.w	r7[-12],r12
800279f8:	ee fc ff f4 	ld.w	r12,r7[-12]
800279fc:	f0 16 00 27 	mcall	r6[156]
80027a00:	18 98       	mov	r8,r12
80027a02:	ef 48 ff f8 	st.w	r7[-8],r8
80027a06:	e1 b8 00 00 	mfsr	r8,0x0
80027a0a:	10 9c       	mov	r12,r8
80027a0c:	fe b0 fd ea 	rcall	800275e0 <cpu_irq_is_enabled_flags>
80027a10:	18 98       	mov	r8,r12
80027a12:	ef 68 ff ff 	st.b	r7[-1],r8
80027a16:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a1a:	30 08       	mov	r8,0
80027a1c:	f0 09 18 00 	cp.b	r9,r8
80027a20:	c0 20       	breq	80027a24 <pdca_disable_interrupt_transfer_error+0x3c>
80027a22:	d3 03       	ssrf	0x10
80027a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a28:	30 49       	mov	r9,4
80027a2a:	91 99       	st.w	r8[0x24],r9
80027a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a30:	70 b8       	ld.w	r8,r8[0x2c]
80027a32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a36:	30 08       	mov	r8,0
80027a38:	f0 09 18 00 	cp.b	r9,r8
80027a3c:	c0 20       	breq	80027a40 <pdca_disable_interrupt_transfer_error+0x58>
80027a3e:	d5 03       	csrf	0x10
80027a40:	2f dd       	sub	sp,-12
80027a42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a46:	00 00       	add	r0,r0
80027a48:	80 02       	ld.sh	r2,r0[0x0]
80027a4a:	78 76       	ld.w	r6,r12[0x1c]

80027a4c <pdca_enable_interrupt_transfer_error>:
80027a4c:	eb cd 40 c0 	pushm	r6-r7,lr
80027a50:	1a 97       	mov	r7,sp
80027a52:	20 2d       	sub	sp,8
80027a54:	48 96       	lddpc	r6,80027a78 <pdca_enable_interrupt_transfer_error+0x2c>
80027a56:	1e 26       	rsub	r6,pc
80027a58:	ef 4c ff f8 	st.w	r7[-8],r12
80027a5c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027a60:	f0 16 00 27 	mcall	r6[156]
80027a64:	18 98       	mov	r8,r12
80027a66:	ef 48 ff fc 	st.w	r7[-4],r8
80027a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a6e:	30 49       	mov	r9,4
80027a70:	91 89       	st.w	r8[0x20],r9
80027a72:	2f ed       	sub	sp,-8
80027a74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a78:	80 02       	ld.sh	r2,r0[0x0]
80027a7a:	78 da       	ld.w	r10,r12[0x34]

80027a7c <pdca_disable_interrupt_transfer_complete>:
80027a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80027a80:	1a 97       	mov	r7,sp
80027a82:	20 3d       	sub	sp,12
80027a84:	49 66       	lddpc	r6,80027adc <pdca_disable_interrupt_transfer_complete+0x60>
80027a86:	1e 26       	rsub	r6,pc
80027a88:	ef 4c ff f4 	st.w	r7[-12],r12
80027a8c:	ee fc ff f4 	ld.w	r12,r7[-12]
80027a90:	f0 16 00 27 	mcall	r6[156]
80027a94:	18 98       	mov	r8,r12
80027a96:	ef 48 ff f8 	st.w	r7[-8],r8
80027a9a:	e1 b8 00 00 	mfsr	r8,0x0
80027a9e:	10 9c       	mov	r12,r8
80027aa0:	fe b0 fd a0 	rcall	800275e0 <cpu_irq_is_enabled_flags>
80027aa4:	18 98       	mov	r8,r12
80027aa6:	ef 68 ff ff 	st.b	r7[-1],r8
80027aaa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027aae:	30 08       	mov	r8,0
80027ab0:	f0 09 18 00 	cp.b	r9,r8
80027ab4:	c0 20       	breq	80027ab8 <pdca_disable_interrupt_transfer_complete+0x3c>
80027ab6:	d3 03       	ssrf	0x10
80027ab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027abc:	30 29       	mov	r9,2
80027abe:	91 99       	st.w	r8[0x24],r9
80027ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ac4:	70 b8       	ld.w	r8,r8[0x2c]
80027ac6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027aca:	30 08       	mov	r8,0
80027acc:	f0 09 18 00 	cp.b	r9,r8
80027ad0:	c0 20       	breq	80027ad4 <pdca_disable_interrupt_transfer_complete+0x58>
80027ad2:	d5 03       	csrf	0x10
80027ad4:	2f dd       	sub	sp,-12
80027ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ada:	00 00       	add	r0,r0
80027adc:	80 02       	ld.sh	r2,r0[0x0]
80027ade:	79 0a       	ld.w	r10,r12[0x40]

80027ae0 <pdca_enable_interrupt_transfer_complete>:
80027ae0:	eb cd 40 c0 	pushm	r6-r7,lr
80027ae4:	1a 97       	mov	r7,sp
80027ae6:	20 2d       	sub	sp,8
80027ae8:	48 96       	lddpc	r6,80027b0c <pdca_enable_interrupt_transfer_complete+0x2c>
80027aea:	1e 26       	rsub	r6,pc
80027aec:	ef 4c ff f8 	st.w	r7[-8],r12
80027af0:	ee fc ff f8 	ld.w	r12,r7[-8]
80027af4:	f0 16 00 27 	mcall	r6[156]
80027af8:	18 98       	mov	r8,r12
80027afa:	ef 48 ff fc 	st.w	r7[-4],r8
80027afe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b02:	30 29       	mov	r9,2
80027b04:	91 89       	st.w	r8[0x20],r9
80027b06:	2f ed       	sub	sp,-8
80027b08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b0c:	80 02       	ld.sh	r2,r0[0x0]
80027b0e:	79 6e       	ld.w	lr,r12[0x58]

80027b10 <pdca_disable_interrupt_reload_counter_zero>:
80027b10:	eb cd 40 c0 	pushm	r6-r7,lr
80027b14:	1a 97       	mov	r7,sp
80027b16:	20 3d       	sub	sp,12
80027b18:	49 66       	lddpc	r6,80027b70 <pdca_disable_interrupt_reload_counter_zero+0x60>
80027b1a:	1e 26       	rsub	r6,pc
80027b1c:	ef 4c ff f4 	st.w	r7[-12],r12
80027b20:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b24:	f0 16 00 27 	mcall	r6[156]
80027b28:	18 98       	mov	r8,r12
80027b2a:	ef 48 ff f8 	st.w	r7[-8],r8
80027b2e:	e1 b8 00 00 	mfsr	r8,0x0
80027b32:	10 9c       	mov	r12,r8
80027b34:	fe b0 fd 56 	rcall	800275e0 <cpu_irq_is_enabled_flags>
80027b38:	18 98       	mov	r8,r12
80027b3a:	ef 68 ff ff 	st.b	r7[-1],r8
80027b3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b42:	30 08       	mov	r8,0
80027b44:	f0 09 18 00 	cp.b	r9,r8
80027b48:	c0 20       	breq	80027b4c <pdca_disable_interrupt_reload_counter_zero+0x3c>
80027b4a:	d3 03       	ssrf	0x10
80027b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b50:	30 19       	mov	r9,1
80027b52:	91 99       	st.w	r8[0x24],r9
80027b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b58:	70 b8       	ld.w	r8,r8[0x2c]
80027b5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b5e:	30 08       	mov	r8,0
80027b60:	f0 09 18 00 	cp.b	r9,r8
80027b64:	c0 20       	breq	80027b68 <pdca_disable_interrupt_reload_counter_zero+0x58>
80027b66:	d5 03       	csrf	0x10
80027b68:	2f dd       	sub	sp,-12
80027b6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b6e:	00 00       	add	r0,r0
80027b70:	80 02       	ld.sh	r2,r0[0x0]
80027b72:	79 9e       	ld.w	lr,r12[0x64]

80027b74 <pdca_enable_interrupt_reload_counter_zero>:
80027b74:	eb cd 40 c0 	pushm	r6-r7,lr
80027b78:	1a 97       	mov	r7,sp
80027b7a:	20 2d       	sub	sp,8
80027b7c:	48 96       	lddpc	r6,80027ba0 <pdca_enable_interrupt_reload_counter_zero+0x2c>
80027b7e:	1e 26       	rsub	r6,pc
80027b80:	ef 4c ff f8 	st.w	r7[-8],r12
80027b84:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b88:	f0 16 00 27 	mcall	r6[156]
80027b8c:	18 98       	mov	r8,r12
80027b8e:	ef 48 ff fc 	st.w	r7[-4],r8
80027b92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b96:	30 19       	mov	r9,1
80027b98:	91 89       	st.w	r8[0x20],r9
80027b9a:	2f ed       	sub	sp,-8
80027b9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ba0:	80 02       	ld.sh	r2,r0[0x0]
80027ba2:	7a 02       	ld.w	r2,sp[0x0]

80027ba4 <pdca_get_transfer_status>:
80027ba4:	eb cd 40 c0 	pushm	r6-r7,lr
80027ba8:	1a 97       	mov	r7,sp
80027baa:	20 2d       	sub	sp,8
80027bac:	48 96       	lddpc	r6,80027bd0 <pdca_get_transfer_status+0x2c>
80027bae:	1e 26       	rsub	r6,pc
80027bb0:	ef 4c ff f8 	st.w	r7[-8],r12
80027bb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027bb8:	f0 16 00 27 	mcall	r6[156]
80027bbc:	18 98       	mov	r8,r12
80027bbe:	ef 48 ff fc 	st.w	r7[-4],r8
80027bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bc6:	70 b8       	ld.w	r8,r8[0x2c]
80027bc8:	10 9c       	mov	r12,r8
80027bca:	2f ed       	sub	sp,-8
80027bcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027bd0:	80 02       	ld.sh	r2,r0[0x0]
80027bd2:	7a 32       	ld.w	r2,sp[0xc]

80027bd4 <pevc_channel_configure>:
80027bd4:	eb cd 40 80 	pushm	r7,lr
80027bd8:	1a 97       	mov	r7,sp
80027bda:	20 4d       	sub	sp,16
80027bdc:	ef 4c ff fc 	st.w	r7[-4],r12
80027be0:	14 98       	mov	r8,r10
80027be2:	ef 49 ff f0 	st.w	r7[-16],r9
80027be6:	16 99       	mov	r9,r11
80027be8:	ef 59 ff f8 	st.h	r7[-8],r9
80027bec:	ef 58 ff f4 	st.h	r7[-12],r8
80027bf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bf4:	58 08       	cp.w	r8,0
80027bf6:	c6 90       	breq	80027cc8 <pevc_channel_configure+0xf4>
80027bf8:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80027bfc:	32 18       	mov	r8,33
80027bfe:	f0 09 19 00 	cp.h	r9,r8
80027c02:	e0 8b 00 61 	brhi	80027cc4 <pevc_channel_configure+0xf0>
80027c06:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027c0a:	31 58       	mov	r8,21
80027c0c:	f0 09 19 00 	cp.h	r9,r8
80027c10:	e0 8b 00 5a 	brhi	80027cc4 <pevc_channel_configure+0xf0>
80027c14:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80027c18:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80027c1c:	5c 58       	castu.b	r8
80027c1e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80027c22:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c2a:	2c 0a       	sub	r10,-64
80027c2c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c30:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
80027c34:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027c38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c3c:	58 08       	cp.w	r8,0
80027c3e:	c4 10       	breq	80027cc0 <pevc_channel_configure+0xec>
80027c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c44:	11 88       	ld.ub	r8,r8[0x0]
80027c46:	10 99       	mov	r9,r8
80027c48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c4c:	91 29       	st.w	r8[0x8],r9
80027c4e:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c56:	70 18       	ld.w	r8,r8[0x4]
80027c58:	5c 58       	castu.b	r8
80027c5a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c5e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c66:	28 0a       	sub	r10,-128
80027c68:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c6c:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
80027c70:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027c74:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c7c:	70 28       	ld.w	r8,r8[0x8]
80027c7e:	5c 58       	castu.b	r8
80027c80:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c84:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c8c:	28 0a       	sub	r10,-128
80027c8e:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c92:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80027c96:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027c9a:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027ca2:	70 38       	ld.w	r8,r8[0xc]
80027ca4:	5c 58       	castu.b	r8
80027ca6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027caa:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027cae:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027cb2:	28 0a       	sub	r10,-128
80027cb4:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027cb8:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80027cbc:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027cc0:	30 08       	mov	r8,0
80027cc2:	c0 48       	rjmp	80027cca <pevc_channel_configure+0xf6>
80027cc4:	30 18       	mov	r8,1
80027cc6:	c0 28       	rjmp	80027cca <pevc_channel_configure+0xf6>
80027cc8:	30 18       	mov	r8,1
80027cca:	10 9c       	mov	r12,r8
80027ccc:	2f cd       	sub	sp,-16
80027cce:	e3 cd 80 80 	ldm	sp++,r7,pc

80027cd2 <pevc_igfd_set>:
80027cd2:	eb cd 40 80 	pushm	r7,lr
80027cd6:	1a 97       	mov	r7,sp
80027cd8:	20 2d       	sub	sp,8
80027cda:	ef 4c ff fc 	st.w	r7[-4],r12
80027cde:	16 98       	mov	r8,r11
80027ce0:	ef 68 ff f8 	st.b	r7[-8],r8
80027ce4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80027ce8:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80027cec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cf0:	91 29       	st.w	r8[0x8],r9
80027cf2:	2f ed       	sub	sp,-8
80027cf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80027cf8 <pevc_channels_enable>:
80027cf8:	eb cd 40 80 	pushm	r7,lr
80027cfc:	1a 97       	mov	r7,sp
80027cfe:	20 3d       	sub	sp,12
80027d00:	ef 4c ff fc 	st.w	r7[-4],r12
80027d04:	ee eb ff f4 	st.d	r7[-12],r10
80027d08:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027d0c:	fc 1a 80 00 	movh	r10,0x8000
80027d10:	30 0b       	mov	r11,0
80027d12:	14 38       	cp.w	r8,r10
80027d14:	f6 09 13 00 	cpc	r9,r11
80027d18:	e0 8b 00 08 	brhi	80027d28 <pevc_channels_enable+0x30>
80027d1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d24:	91 89       	st.w	r8[0x20],r9
80027d26:	c0 68       	rjmp	80027d32 <pevc_channels_enable+0x3a>
80027d28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d30:	91 99       	st.w	r8[0x24],r9
80027d32:	2f dd       	sub	sp,-12
80027d34:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d38 <pevc_channels_disable>:
80027d38:	eb cd 40 80 	pushm	r7,lr
80027d3c:	1a 97       	mov	r7,sp
80027d3e:	20 3d       	sub	sp,12
80027d40:	ef 4c ff fc 	st.w	r7[-4],r12
80027d44:	ee eb ff f4 	st.d	r7[-12],r10
80027d48:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027d4c:	fc 1a 80 00 	movh	r10,0x8000
80027d50:	30 0b       	mov	r11,0
80027d52:	14 38       	cp.w	r8,r10
80027d54:	f6 09 13 00 	cpc	r9,r11
80027d58:	e0 8b 00 08 	brhi	80027d68 <pevc_channels_disable+0x30>
80027d5c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d64:	91 c9       	st.w	r8[0x30],r9
80027d66:	c0 68       	rjmp	80027d72 <pevc_channels_disable+0x3a>
80027d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d70:	91 d9       	st.w	r8[0x34],r9
80027d72:	2f dd       	sub	sp,-12
80027d74:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d78 <pevc_get_channel_status>:
80027d78:	eb cd 40 80 	pushm	r7,lr
80027d7c:	1a 97       	mov	r7,sp
80027d7e:	20 2d       	sub	sp,8
80027d80:	ef 4c ff fc 	st.w	r7[-4],r12
80027d84:	16 98       	mov	r8,r11
80027d86:	ef 58 ff f8 	st.h	r7[-8],r8
80027d8a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027d8e:	31 f8       	mov	r8,31
80027d90:	f0 09 19 00 	cp.h	r9,r8
80027d94:	e0 8b 00 12 	brhi	80027db8 <pevc_get_channel_status+0x40>
80027d98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d9c:	70 49       	ld.w	r9,r8[0x10]
80027d9e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027da2:	30 1a       	mov	r10,1
80027da4:	f4 08 09 48 	lsl	r8,r10,r8
80027da8:	10 69       	and	r9,r8
80027daa:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027dae:	f2 08 0a 48 	lsr	r8,r9,r8
80027db2:	5f 18       	srne	r8
80027db4:	5c 58       	castu.b	r8
80027db6:	c1 28       	rjmp	80027dda <pevc_get_channel_status+0x62>
80027db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027dbc:	70 59       	ld.w	r9,r8[0x14]
80027dbe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027dc2:	22 08       	sub	r8,32
80027dc4:	30 1a       	mov	r10,1
80027dc6:	f4 08 09 48 	lsl	r8,r10,r8
80027dca:	10 69       	and	r9,r8
80027dcc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027dd0:	22 08       	sub	r8,32
80027dd2:	f2 08 0a 48 	lsr	r8,r9,r8
80027dd6:	5f 18       	srne	r8
80027dd8:	5c 58       	castu.b	r8
80027dda:	10 9c       	mov	r12,r8
80027ddc:	2f ed       	sub	sp,-8
80027dde:	e3 cd 80 80 	ldm	sp++,r7,pc

80027de2 <pevc_get_channel_state>:
80027de2:	eb cd 40 80 	pushm	r7,lr
80027de6:	1a 97       	mov	r7,sp
80027de8:	20 2d       	sub	sp,8
80027dea:	ef 4c ff fc 	st.w	r7[-4],r12
80027dee:	16 98       	mov	r8,r11
80027df0:	ef 58 ff f8 	st.h	r7[-8],r8
80027df4:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027df8:	31 f8       	mov	r8,31
80027dfa:	f0 09 19 00 	cp.h	r9,r8
80027dfe:	e0 8b 00 12 	brhi	80027e22 <pevc_get_channel_state+0x40>
80027e02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e06:	71 49       	ld.w	r9,r8[0x50]
80027e08:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e0c:	30 1a       	mov	r10,1
80027e0e:	f4 08 09 48 	lsl	r8,r10,r8
80027e12:	10 69       	and	r9,r8
80027e14:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e18:	f2 08 0a 48 	lsr	r8,r9,r8
80027e1c:	5f 18       	srne	r8
80027e1e:	5c 58       	castu.b	r8
80027e20:	c1 28       	rjmp	80027e44 <pevc_get_channel_state+0x62>
80027e22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e26:	71 59       	ld.w	r9,r8[0x54]
80027e28:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e2c:	22 08       	sub	r8,32
80027e2e:	30 1a       	mov	r10,1
80027e30:	f4 08 09 48 	lsl	r8,r10,r8
80027e34:	10 69       	and	r9,r8
80027e36:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e3a:	22 08       	sub	r8,32
80027e3c:	f2 08 0a 48 	lsr	r8,r9,r8
80027e40:	5f 18       	srne	r8
80027e42:	5c 58       	castu.b	r8
80027e44:	10 9c       	mov	r12,r8
80027e46:	2f ed       	sub	sp,-8
80027e48:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e4c <pevc_channel_sev_enable>:
80027e4c:	eb cd 40 80 	pushm	r7,lr
80027e50:	1a 97       	mov	r7,sp
80027e52:	20 2d       	sub	sp,8
80027e54:	ef 4c ff fc 	st.w	r7[-4],r12
80027e58:	16 98       	mov	r8,r11
80027e5a:	ef 58 ff f8 	st.h	r7[-8],r8
80027e5e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027e66:	f0 ca ff c0 	sub	r10,r8,-64
80027e6a:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027e6e:	30 1b       	mov	r11,1
80027e70:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80027e74:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027e78:	2f ed       	sub	sp,-8
80027e7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e7e <pevc_channels_trigger_sev>:
80027e7e:	eb cd 40 80 	pushm	r7,lr
80027e82:	1a 97       	mov	r7,sp
80027e84:	20 3d       	sub	sp,12
80027e86:	ef 4c ff fc 	st.w	r7[-4],r12
80027e8a:	ee eb ff f4 	st.d	r7[-12],r10
80027e8e:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027e92:	fc 1a 80 00 	movh	r10,0x8000
80027e96:	30 0b       	mov	r11,0
80027e98:	14 38       	cp.w	r8,r10
80027e9a:	f6 09 13 00 	cpc	r9,r11
80027e9e:	e0 8b 00 09 	brhi	80027eb0 <pevc_channels_trigger_sev+0x32>
80027ea2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027eaa:	f1 49 00 40 	st.w	r8[64],r9
80027eae:	c0 78       	rjmp	80027ebc <pevc_channels_trigger_sev+0x3e>
80027eb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027eb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027eb8:	f1 49 00 44 	st.w	r8[68],r9
80027ebc:	2f dd       	sub	sp,-12
80027ebe:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ec2 <pevc_channel_sev_disable>:
80027ec2:	eb cd 40 80 	pushm	r7,lr
80027ec6:	1a 97       	mov	r7,sp
80027ec8:	20 2d       	sub	sp,8
80027eca:	ef 4c ff fc 	st.w	r7[-4],r12
80027ece:	16 98       	mov	r8,r11
80027ed0:	ef 58 ff f8 	st.h	r7[-8],r8
80027ed4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027ed8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027edc:	f0 ca ff c0 	sub	r10,r8,-64
80027ee0:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027ee4:	30 0b       	mov	r11,0
80027ee6:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80027eea:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80027eee:	2f ed       	sub	sp,-8
80027ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ef4 <pevc_channels_enable_trigger_interrupt>:
80027ef4:	eb cd 40 80 	pushm	r7,lr
80027ef8:	1a 97       	mov	r7,sp
80027efa:	20 3d       	sub	sp,12
80027efc:	ef 4c ff fc 	st.w	r7[-4],r12
80027f00:	ee eb ff f4 	st.d	r7[-12],r10
80027f04:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027f08:	fc 1a 80 00 	movh	r10,0x8000
80027f0c:	30 0b       	mov	r11,0
80027f0e:	14 38       	cp.w	r8,r10
80027f10:	f6 09 13 00 	cpc	r9,r11
80027f14:	e0 8b 00 09 	brhi	80027f26 <pevc_channels_enable_trigger_interrupt+0x32>
80027f18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f20:	f1 49 00 90 	st.w	r8[144],r9
80027f24:	c0 78       	rjmp	80027f32 <pevc_channels_enable_trigger_interrupt+0x3e>
80027f26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f2e:	f1 49 00 94 	st.w	r8[148],r9
80027f32:	2f dd       	sub	sp,-12
80027f34:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f38 <pevc_channels_disable_trigger_interrupt>:
80027f38:	eb cd 40 80 	pushm	r7,lr
80027f3c:	1a 97       	mov	r7,sp
80027f3e:	20 3d       	sub	sp,12
80027f40:	ef 4c ff fc 	st.w	r7[-4],r12
80027f44:	ee eb ff f4 	st.d	r7[-12],r10
80027f48:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027f4c:	fc 1a 80 00 	movh	r10,0x8000
80027f50:	30 0b       	mov	r11,0
80027f52:	14 38       	cp.w	r8,r10
80027f54:	f6 09 13 00 	cpc	r9,r11
80027f58:	e0 8b 00 09 	brhi	80027f6a <pevc_channels_disable_trigger_interrupt+0x32>
80027f5c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f64:	f1 49 00 a0 	st.w	r8[160],r9
80027f68:	c0 78       	rjmp	80027f76 <pevc_channels_disable_trigger_interrupt+0x3e>
80027f6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f72:	f1 49 00 a4 	st.w	r8[164],r9
80027f76:	2f dd       	sub	sp,-12
80027f78:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f7c <pevc_channel_is_trigger_interrupt_enabled>:
80027f7c:	eb cd 40 80 	pushm	r7,lr
80027f80:	1a 97       	mov	r7,sp
80027f82:	20 2d       	sub	sp,8
80027f84:	ef 4c ff fc 	st.w	r7[-4],r12
80027f88:	16 98       	mov	r8,r11
80027f8a:	ef 58 ff f8 	st.h	r7[-8],r8
80027f8e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027f92:	31 f8       	mov	r8,31
80027f94:	f0 09 19 00 	cp.h	r9,r8
80027f98:	e0 8b 00 13 	brhi	80027fbe <pevc_channel_is_trigger_interrupt_enabled+0x42>
80027f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fa0:	f0 f9 00 80 	ld.w	r9,r8[128]
80027fa4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fa8:	30 1a       	mov	r10,1
80027faa:	f4 08 09 48 	lsl	r8,r10,r8
80027fae:	10 69       	and	r9,r8
80027fb0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fb4:	f2 08 0a 48 	lsr	r8,r9,r8
80027fb8:	5f 18       	srne	r8
80027fba:	5c 58       	castu.b	r8
80027fbc:	c1 38       	rjmp	80027fe2 <pevc_channel_is_trigger_interrupt_enabled+0x66>
80027fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fc2:	f0 f9 00 84 	ld.w	r9,r8[132]
80027fc6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fca:	22 08       	sub	r8,32
80027fcc:	30 1a       	mov	r10,1
80027fce:	f4 08 09 48 	lsl	r8,r10,r8
80027fd2:	10 69       	and	r9,r8
80027fd4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fd8:	22 08       	sub	r8,32
80027fda:	f2 08 0a 48 	lsr	r8,r9,r8
80027fde:	5f 18       	srne	r8
80027fe0:	5c 58       	castu.b	r8
80027fe2:	10 9c       	mov	r12,r8
80027fe4:	2f ed       	sub	sp,-8
80027fe6:	e3 cd 80 80 	ldm	sp++,r7,pc

80027fea <pevc_channel_is_trigger_interrupt_raised>:
80027fea:	eb cd 40 80 	pushm	r7,lr
80027fee:	1a 97       	mov	r7,sp
80027ff0:	20 2d       	sub	sp,8
80027ff2:	ef 4c ff fc 	st.w	r7[-4],r12
80027ff6:	16 98       	mov	r8,r11
80027ff8:	ef 58 ff f8 	st.h	r7[-8],r8
80027ffc:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028000:	31 f8       	mov	r8,31
80028002:	f0 09 19 00 	cp.h	r9,r8
80028006:	e0 8b 00 12 	brhi	8002802a <pevc_channel_is_trigger_interrupt_raised+0x40>
8002800a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002800e:	71 89       	ld.w	r9,r8[0x60]
80028010:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028014:	30 1a       	mov	r10,1
80028016:	f4 08 09 48 	lsl	r8,r10,r8
8002801a:	10 69       	and	r9,r8
8002801c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028020:	f2 08 0a 48 	lsr	r8,r9,r8
80028024:	5f 18       	srne	r8
80028026:	5c 58       	castu.b	r8
80028028:	c1 28       	rjmp	8002804c <pevc_channel_is_trigger_interrupt_raised+0x62>
8002802a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002802e:	71 99       	ld.w	r9,r8[0x64]
80028030:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028034:	22 08       	sub	r8,32
80028036:	30 1a       	mov	r10,1
80028038:	f4 08 09 48 	lsl	r8,r10,r8
8002803c:	10 69       	and	r9,r8
8002803e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028042:	22 08       	sub	r8,32
80028044:	f2 08 0a 48 	lsr	r8,r9,r8
80028048:	5f 18       	srne	r8
8002804a:	5c 58       	castu.b	r8
8002804c:	10 9c       	mov	r12,r8
8002804e:	2f ed       	sub	sp,-8
80028050:	e3 cd 80 80 	ldm	sp++,r7,pc

80028054 <pevc_channel_clear_trigger_interrupt>:
80028054:	eb cd 40 80 	pushm	r7,lr
80028058:	1a 97       	mov	r7,sp
8002805a:	20 2d       	sub	sp,8
8002805c:	ef 4c ff fc 	st.w	r7[-4],r12
80028060:	16 98       	mov	r8,r11
80028062:	ef 58 ff f8 	st.h	r7[-8],r8
80028066:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002806a:	31 f8       	mov	r8,31
8002806c:	f0 09 19 00 	cp.h	r9,r8
80028070:	e0 8b 00 0d 	brhi	8002808a <pevc_channel_clear_trigger_interrupt+0x36>
80028074:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028078:	30 19       	mov	r9,1
8002807a:	f2 08 09 48 	lsl	r8,r9,r8
8002807e:	10 99       	mov	r9,r8
80028080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028084:	f1 49 00 70 	st.w	r8[112],r9
80028088:	c0 c8       	rjmp	800280a0 <pevc_channel_clear_trigger_interrupt+0x4c>
8002808a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002808e:	22 08       	sub	r8,32
80028090:	30 19       	mov	r9,1
80028092:	f2 08 09 48 	lsl	r8,r9,r8
80028096:	10 99       	mov	r9,r8
80028098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002809c:	f1 49 00 74 	st.w	r8[116],r9
800280a0:	2f ed       	sub	sp,-8
800280a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800280a6 <pevc_channels_enable_overrun_interrupt>:
800280a6:	eb cd 40 80 	pushm	r7,lr
800280aa:	1a 97       	mov	r7,sp
800280ac:	20 3d       	sub	sp,12
800280ae:	ef 4c ff fc 	st.w	r7[-4],r12
800280b2:	ee eb ff f4 	st.d	r7[-12],r10
800280b6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800280ba:	fc 1a 80 00 	movh	r10,0x8000
800280be:	30 0b       	mov	r11,0
800280c0:	14 38       	cp.w	r8,r10
800280c2:	f6 09 13 00 	cpc	r9,r11
800280c6:	e0 8b 00 09 	brhi	800280d8 <pevc_channels_enable_overrun_interrupt+0x32>
800280ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280d2:	f1 49 00 e0 	st.w	r8[224],r9
800280d6:	c0 78       	rjmp	800280e4 <pevc_channels_enable_overrun_interrupt+0x3e>
800280d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280e0:	f1 49 00 e4 	st.w	r8[228],r9
800280e4:	2f dd       	sub	sp,-12
800280e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800280ea <pevc_channels_disable_overrun_interrupt>:
800280ea:	eb cd 40 80 	pushm	r7,lr
800280ee:	1a 97       	mov	r7,sp
800280f0:	20 3d       	sub	sp,12
800280f2:	ef 4c ff fc 	st.w	r7[-4],r12
800280f6:	ee eb ff f4 	st.d	r7[-12],r10
800280fa:	ee e8 ff f4 	ld.d	r8,r7[-12]
800280fe:	fc 1a 80 00 	movh	r10,0x8000
80028102:	30 0b       	mov	r11,0
80028104:	14 38       	cp.w	r8,r10
80028106:	f6 09 13 00 	cpc	r9,r11
8002810a:	e0 8b 00 09 	brhi	8002811c <pevc_channels_disable_overrun_interrupt+0x32>
8002810e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028116:	f1 49 00 f0 	st.w	r8[240],r9
8002811a:	c0 78       	rjmp	80028128 <pevc_channels_disable_overrun_interrupt+0x3e>
8002811c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028120:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028124:	f1 49 00 f4 	st.w	r8[244],r9
80028128:	2f dd       	sub	sp,-12
8002812a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002812e <pevc_channel_is_overrun_interrupt_enabled>:
8002812e:	eb cd 40 80 	pushm	r7,lr
80028132:	1a 97       	mov	r7,sp
80028134:	20 2d       	sub	sp,8
80028136:	ef 4c ff fc 	st.w	r7[-4],r12
8002813a:	16 98       	mov	r8,r11
8002813c:	ef 58 ff f8 	st.h	r7[-8],r8
80028140:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028144:	31 f8       	mov	r8,31
80028146:	f0 09 19 00 	cp.h	r9,r8
8002814a:	e0 8b 00 13 	brhi	80028170 <pevc_channel_is_overrun_interrupt_enabled+0x42>
8002814e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028152:	f0 f9 00 d0 	ld.w	r9,r8[208]
80028156:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002815a:	30 1a       	mov	r10,1
8002815c:	f4 08 09 48 	lsl	r8,r10,r8
80028160:	10 69       	and	r9,r8
80028162:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028166:	f2 08 0a 48 	lsr	r8,r9,r8
8002816a:	5f 18       	srne	r8
8002816c:	5c 58       	castu.b	r8
8002816e:	c1 38       	rjmp	80028194 <pevc_channel_is_overrun_interrupt_enabled+0x66>
80028170:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028174:	f0 f9 00 d4 	ld.w	r9,r8[212]
80028178:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002817c:	22 08       	sub	r8,32
8002817e:	30 1a       	mov	r10,1
80028180:	f4 08 09 48 	lsl	r8,r10,r8
80028184:	10 69       	and	r9,r8
80028186:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002818a:	22 08       	sub	r8,32
8002818c:	f2 08 0a 48 	lsr	r8,r9,r8
80028190:	5f 18       	srne	r8
80028192:	5c 58       	castu.b	r8
80028194:	10 9c       	mov	r12,r8
80028196:	2f ed       	sub	sp,-8
80028198:	e3 cd 80 80 	ldm	sp++,r7,pc

8002819c <pevc_channel_is_overrun_interrupt_raised>:
8002819c:	eb cd 40 80 	pushm	r7,lr
800281a0:	1a 97       	mov	r7,sp
800281a2:	20 2d       	sub	sp,8
800281a4:	ef 4c ff fc 	st.w	r7[-4],r12
800281a8:	16 98       	mov	r8,r11
800281aa:	ef 58 ff f8 	st.h	r7[-8],r8
800281ae:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800281b2:	31 f8       	mov	r8,31
800281b4:	f0 09 19 00 	cp.h	r9,r8
800281b8:	e0 8b 00 13 	brhi	800281de <pevc_channel_is_overrun_interrupt_raised+0x42>
800281bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281c0:	f0 f9 00 b0 	ld.w	r9,r8[176]
800281c4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281c8:	30 1a       	mov	r10,1
800281ca:	f4 08 09 48 	lsl	r8,r10,r8
800281ce:	10 69       	and	r9,r8
800281d0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281d4:	f2 08 0a 48 	lsr	r8,r9,r8
800281d8:	5f 18       	srne	r8
800281da:	5c 58       	castu.b	r8
800281dc:	c1 38       	rjmp	80028202 <pevc_channel_is_overrun_interrupt_raised+0x66>
800281de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281e2:	f0 f9 00 b4 	ld.w	r9,r8[180]
800281e6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281ea:	22 08       	sub	r8,32
800281ec:	30 1a       	mov	r10,1
800281ee:	f4 08 09 48 	lsl	r8,r10,r8
800281f2:	10 69       	and	r9,r8
800281f4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281f8:	22 08       	sub	r8,32
800281fa:	f2 08 0a 48 	lsr	r8,r9,r8
800281fe:	5f 18       	srne	r8
80028200:	5c 58       	castu.b	r8
80028202:	10 9c       	mov	r12,r8
80028204:	2f ed       	sub	sp,-8
80028206:	e3 cd 80 80 	ldm	sp++,r7,pc

8002820a <pevc_channel_clear_overrun_interrupt>:
8002820a:	eb cd 40 80 	pushm	r7,lr
8002820e:	1a 97       	mov	r7,sp
80028210:	20 2d       	sub	sp,8
80028212:	ef 4c ff fc 	st.w	r7[-4],r12
80028216:	16 98       	mov	r8,r11
80028218:	ef 58 ff f8 	st.h	r7[-8],r8
8002821c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028220:	31 f8       	mov	r8,31
80028222:	f0 09 19 00 	cp.h	r9,r8
80028226:	e0 8b 00 0d 	brhi	80028240 <pevc_channel_clear_overrun_interrupt+0x36>
8002822a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002822e:	30 19       	mov	r9,1
80028230:	f2 08 09 48 	lsl	r8,r9,r8
80028234:	10 99       	mov	r9,r8
80028236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002823a:	f1 49 00 c0 	st.w	r8[192],r9
8002823e:	c0 c8       	rjmp	80028256 <pevc_channel_clear_overrun_interrupt+0x4c>
80028240:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028244:	22 08       	sub	r8,32
80028246:	30 19       	mov	r9,1
80028248:	f2 08 09 48 	lsl	r8,r9,r8
8002824c:	10 99       	mov	r9,r8
8002824e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028252:	f1 49 00 c4 	st.w	r8[196],r9
80028256:	2f ed       	sub	sp,-8
80028258:	e3 cd 80 80 	ldm	sp++,r7,pc

8002825c <cpu_irq_is_enabled_flags>:
8002825c:	eb cd 40 80 	pushm	r7,lr
80028260:	1a 97       	mov	r7,sp
80028262:	20 1d       	sub	sp,4
80028264:	ef 4c ff fc 	st.w	r7[-4],r12
80028268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002826c:	e6 18 00 01 	andh	r8,0x1,COH
80028270:	5f 08       	sreq	r8
80028272:	5c 58       	castu.b	r8
80028274:	10 9c       	mov	r12,r8
80028276:	2f fd       	sub	sp,-4
80028278:	e3 cd 80 80 	ldm	sp++,r7,pc

8002827c <scif_pclksr_statushigh_wait>:
8002827c:	eb cd 40 80 	pushm	r7,lr
80028280:	1a 97       	mov	r7,sp
80028282:	20 2d       	sub	sp,8
80028284:	ef 4c ff f8 	st.w	r7[-8],r12
80028288:	e0 78 86 a0 	mov	r8,100000
8002828c:	ef 48 ff fc 	st.w	r7[-4],r8
80028290:	c0 c8       	rjmp	800282a8 <scif_pclksr_statushigh_wait+0x2c>
80028292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028296:	20 18       	sub	r8,1
80028298:	ef 48 ff fc 	st.w	r7[-4],r8
8002829c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282a0:	58 08       	cp.w	r8,0
800282a2:	c0 31       	brne	800282a8 <scif_pclksr_statushigh_wait+0x2c>
800282a4:	3f f8       	mov	r8,-1
800282a6:	c0 a8       	rjmp	800282ba <scif_pclksr_statushigh_wait+0x3e>
800282a8:	fe 78 08 00 	mov	r8,-63488
800282ac:	70 59       	ld.w	r9,r8[0x14]
800282ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800282b2:	f3 e8 00 08 	and	r8,r9,r8
800282b6:	ce e0       	breq	80028292 <scif_pclksr_statushigh_wait+0x16>
800282b8:	30 08       	mov	r8,0
800282ba:	10 9c       	mov	r12,r8
800282bc:	2f ed       	sub	sp,-8
800282be:	e3 cd 80 80 	ldm	sp++,r7,pc

800282c2 <scif_read_gplp>:
800282c2:	eb cd 40 80 	pushm	r7,lr
800282c6:	1a 97       	mov	r7,sp
800282c8:	20 1d       	sub	sp,4
800282ca:	ef 4c ff fc 	st.w	r7[-4],r12
800282ce:	fe 78 08 00 	mov	r8,-63488
800282d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800282d6:	2e 99       	sub	r9,-23
800282d8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800282dc:	10 9c       	mov	r12,r8
800282de:	2f fd       	sub	sp,-4
800282e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800282e4 <scif_write_gplp>:
800282e4:	eb cd 40 80 	pushm	r7,lr
800282e8:	1a 97       	mov	r7,sp
800282ea:	20 2d       	sub	sp,8
800282ec:	ef 4c ff fc 	st.w	r7[-4],r12
800282f0:	ef 4b ff f8 	st.w	r7[-8],r11
800282f4:	fe 78 08 00 	mov	r8,-63488
800282f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800282fc:	2e 99       	sub	r9,-23
800282fe:	a3 69       	lsl	r9,0x2
80028300:	ea 19 aa 00 	orh	r9,0xaa00
80028304:	91 69       	st.w	r8[0x18],r9
80028306:	fe 78 08 00 	mov	r8,-63488
8002830a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002830e:	2e 99       	sub	r9,-23
80028310:	ee fa ff f8 	ld.w	r10,r7[-8]
80028314:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028318:	2f ed       	sub	sp,-8
8002831a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002831e <scif_start_osc>:
8002831e:	eb cd 40 c0 	pushm	r6-r7,lr
80028322:	1a 97       	mov	r7,sp
80028324:	20 6d       	sub	sp,24
80028326:	4c c6       	lddpc	r6,80028454 <scif_start_osc+0x136>
80028328:	1e 26       	rsub	r6,pc
8002832a:	ef 4c ff f0 	st.w	r7[-16],r12
8002832e:	ef 4b ff ec 	st.w	r7[-20],r11
80028332:	14 98       	mov	r8,r10
80028334:	ef 68 ff e8 	st.b	r7[-24],r8
80028338:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002833c:	fe 79 08 00 	mov	r9,-63488
80028340:	ee fa ff f0 	ld.w	r10,r7[-16]
80028344:	a3 68       	lsl	r8,0x2
80028346:	ee 08 00 08 	add	r8,r7,r8
8002834a:	2f 7a       	sub	r10,-9
8002834c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028350:	f1 49 ff f4 	st.w	r8[-12],r9
80028354:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028358:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002835c:	70 18       	ld.w	r8,r8[0x4]
8002835e:	5c 58       	castu.b	r8
80028360:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028364:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028368:	f2 08 15 02 	lsl	r8,r9,0x2
8002836c:	ee 08 00 08 	add	r8,r7,r8
80028370:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028374:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028378:	f1 49 ff f4 	st.w	r8[-12],r9
8002837c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028380:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028384:	f1 38 00 09 	ld.ub	r8,r8[9]
80028388:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8002838c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028390:	f2 08 15 02 	lsl	r8,r9,0x2
80028394:	ee 08 00 08 	add	r8,r7,r8
80028398:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002839c:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
800283a0:	f1 49 ff f4 	st.w	r8[-12],r9
800283a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800283a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800283ac:	f1 38 00 08 	ld.ub	r8,r8[8]
800283b0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800283b4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800283b8:	f2 08 15 02 	lsl	r8,r9,0x2
800283bc:	ee 08 00 08 	add	r8,r7,r8
800283c0:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800283c4:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
800283c8:	f1 49 ff f4 	st.w	r8[-12],r9
800283cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283d0:	a3 68       	lsl	r8,0x2
800283d2:	ee 08 00 08 	add	r8,r7,r8
800283d6:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800283da:	30 1a       	mov	r10,1
800283dc:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
800283e0:	f1 49 ff f4 	st.w	r8[-12],r9
800283e4:	e1 b8 00 00 	mfsr	r8,0x0
800283e8:	10 9c       	mov	r12,r8
800283ea:	c3 9f       	rcall	8002825c <cpu_irq_is_enabled_flags>
800283ec:	18 98       	mov	r8,r12
800283ee:	ef 68 ff ff 	st.b	r7[-1],r8
800283f2:	d3 03       	ssrf	0x10
800283f4:	fe 78 08 00 	mov	r8,-63488
800283f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800283fc:	2f 79       	sub	r9,-9
800283fe:	a3 69       	lsl	r9,0x2
80028400:	ea 19 aa 00 	orh	r9,0xaa00
80028404:	91 69       	st.w	r8[0x18],r9
80028406:	fe 79 08 00 	mov	r9,-63488
8002840a:	ee fa ff f0 	ld.w	r10,r7[-16]
8002840e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028412:	2f 7a       	sub	r10,-9
80028414:	a3 68       	lsl	r8,0x2
80028416:	ee 08 00 08 	add	r8,r7,r8
8002841a:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002841e:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028422:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028426:	30 08       	mov	r8,0
80028428:	f0 09 18 00 	cp.b	r9,r8
8002842c:	c0 20       	breq	80028430 <scif_start_osc+0x112>
8002842e:	d5 03       	csrf	0x10
80028430:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028434:	30 08       	mov	r8,0
80028436:	f0 09 18 00 	cp.b	r9,r8
8002843a:	c0 80       	breq	8002844a <scif_start_osc+0x12c>
8002843c:	30 1c       	mov	r12,1
8002843e:	c1 ff       	rcall	8002827c <scif_pclksr_statushigh_wait>
80028440:	18 98       	mov	r8,r12
80028442:	58 08       	cp.w	r8,0
80028444:	c0 30       	breq	8002844a <scif_start_osc+0x12c>
80028446:	3f f8       	mov	r8,-1
80028448:	c0 28       	rjmp	8002844c <scif_start_osc+0x12e>
8002844a:	30 08       	mov	r8,0
8002844c:	10 9c       	mov	r12,r8
8002844e:	2f ad       	sub	sp,-24
80028450:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028454:	80 02       	ld.sh	r2,r0[0x0]
80028456:	81 ac       	st.w	r0[0x28],r12

80028458 <scif_is_osc_ready>:
80028458:	eb cd 40 80 	pushm	r7,lr
8002845c:	1a 97       	mov	r7,sp
8002845e:	20 1d       	sub	sp,4
80028460:	ef 4c ff fc 	st.w	r7[-4],r12
80028464:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028468:	58 08       	cp.w	r8,0
8002846a:	c0 81       	brne	8002847a <scif_is_osc_ready+0x22>
8002846c:	fe 78 08 00 	mov	r8,-63488
80028470:	70 58       	ld.w	r8,r8[0x14]
80028472:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028476:	5c 58       	castu.b	r8
80028478:	c0 98       	rjmp	8002848a <scif_is_osc_ready+0x32>
8002847a:	fe 78 08 00 	mov	r8,-63488
8002847e:	70 58       	ld.w	r8,r8[0x14]
80028480:	e2 18 00 02 	andl	r8,0x2,COH
80028484:	a1 98       	lsr	r8,0x1
80028486:	5f 18       	srne	r8
80028488:	5c 58       	castu.b	r8
8002848a:	10 9c       	mov	r12,r8
8002848c:	2f fd       	sub	sp,-4
8002848e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028492 <scif_stop_osc>:
80028492:	eb cd 40 c0 	pushm	r6-r7,lr
80028496:	1a 97       	mov	r7,sp
80028498:	20 3d       	sub	sp,12
8002849a:	49 d6       	lddpc	r6,8002850c <scif_stop_osc+0x7a>
8002849c:	1e 26       	rsub	r6,pc
8002849e:	ef 4c ff f4 	st.w	r7[-12],r12
800284a2:	fe 78 08 00 	mov	r8,-63488
800284a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800284aa:	2f 79       	sub	r9,-9
800284ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800284b0:	ef 48 ff f8 	st.w	r7[-8],r8
800284b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284b8:	b1 c8       	cbr	r8,0x10
800284ba:	ef 48 ff f8 	st.w	r7[-8],r8
800284be:	e1 b8 00 00 	mfsr	r8,0x0
800284c2:	10 9c       	mov	r12,r8
800284c4:	cc ce       	rcall	8002825c <cpu_irq_is_enabled_flags>
800284c6:	18 98       	mov	r8,r12
800284c8:	ef 68 ff ff 	st.b	r7[-1],r8
800284cc:	d3 03       	ssrf	0x10
800284ce:	fe 78 08 00 	mov	r8,-63488
800284d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800284d6:	2f 79       	sub	r9,-9
800284d8:	a3 69       	lsl	r9,0x2
800284da:	ea 19 aa 00 	orh	r9,0xaa00
800284de:	91 69       	st.w	r8[0x18],r9
800284e0:	fe 78 08 00 	mov	r8,-63488
800284e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800284e8:	2f 79       	sub	r9,-9
800284ea:	ee fa ff f8 	ld.w	r10,r7[-8]
800284ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800284f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800284f6:	30 08       	mov	r8,0
800284f8:	f0 09 18 00 	cp.b	r9,r8
800284fc:	c0 20       	breq	80028500 <scif_stop_osc+0x6e>
800284fe:	d5 03       	csrf	0x10
80028500:	30 08       	mov	r8,0
80028502:	10 9c       	mov	r12,r8
80028504:	2f dd       	sub	sp,-12
80028506:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002850a:	00 00       	add	r0,r0
8002850c:	80 02       	ld.sh	r2,r0[0x0]
8002850e:	83 20       	st.w	r1[0x8],r0

80028510 <scif_configure_osc_crystalmode>:
80028510:	eb cd 40 c0 	pushm	r6-r7,lr
80028514:	1a 97       	mov	r7,sp
80028516:	20 5d       	sub	sp,20
80028518:	4d 46       	lddpc	r6,80028668 <scif_configure_osc_crystalmode+0x158>
8002851a:	1e 26       	rsub	r6,pc
8002851c:	ef 4c ff f0 	st.w	r7[-16],r12
80028520:	ef 4b ff ec 	st.w	r7[-20],r11
80028524:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028528:	58 08       	cp.w	r8,0
8002852a:	c4 e1       	brne	800285c6 <scif_configure_osc_crystalmode+0xb6>
8002852c:	fe 78 08 00 	mov	r8,-63488
80028530:	70 98       	ld.w	r8,r8[0x24]
80028532:	ef 48 ff f4 	st.w	r7[-12],r8
80028536:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002853a:	30 19       	mov	r9,1
8002853c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028540:	ef 48 ff f4 	st.w	r7[-12],r8
80028544:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028548:	ec 58 bb 9f 	cp.w	r8,899999
8002854c:	e0 88 00 1b 	brls	80028582 <scif_configure_osc_crystalmode+0x72>
80028550:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028554:	e0 69 c6 bf 	mov	r9,50879
80028558:	ea 19 00 2d 	orh	r9,0x2d
8002855c:	12 38       	cp.w	r8,r9
8002855e:	e0 88 00 0f 	brls	8002857c <scif_configure_osc_crystalmode+0x6c>
80028562:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028566:	e0 69 11 ff 	mov	r9,4607
8002856a:	ea 19 00 7a 	orh	r9,0x7a
8002856e:	12 38       	cp.w	r8,r9
80028570:	e0 8b 00 04 	brhi	80028578 <scif_configure_osc_crystalmode+0x68>
80028574:	30 28       	mov	r8,2
80028576:	c0 28       	rjmp	8002857a <scif_configure_osc_crystalmode+0x6a>
80028578:	30 38       	mov	r8,3
8002857a:	c0 28       	rjmp	8002857e <scif_configure_osc_crystalmode+0x6e>
8002857c:	30 18       	mov	r8,1
8002857e:	10 99       	mov	r9,r8
80028580:	c0 28       	rjmp	80028584 <scif_configure_osc_crystalmode+0x74>
80028582:	30 09       	mov	r9,0
80028584:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028588:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
8002858c:	ef 48 ff f4 	st.w	r7[-12],r8
80028590:	e1 b8 00 00 	mfsr	r8,0x0
80028594:	10 9c       	mov	r12,r8
80028596:	c6 3e       	rcall	8002825c <cpu_irq_is_enabled_flags>
80028598:	18 98       	mov	r8,r12
8002859a:	ef 68 ff fe 	st.b	r7[-2],r8
8002859e:	d3 03       	ssrf	0x10
800285a0:	fe 78 08 00 	mov	r8,-63488
800285a4:	32 49       	mov	r9,36
800285a6:	ea 19 aa 00 	orh	r9,0xaa00
800285aa:	91 69       	st.w	r8[0x18],r9
800285ac:	fe 78 08 00 	mov	r8,-63488
800285b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800285b4:	91 99       	st.w	r8[0x24],r9
800285b6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800285ba:	30 08       	mov	r8,0
800285bc:	f0 09 18 00 	cp.b	r9,r8
800285c0:	c4 f0       	breq	8002865e <scif_configure_osc_crystalmode+0x14e>
800285c2:	d5 03       	csrf	0x10
800285c4:	c4 d8       	rjmp	8002865e <scif_configure_osc_crystalmode+0x14e>
800285c6:	fe 78 08 00 	mov	r8,-63488
800285ca:	70 a8       	ld.w	r8,r8[0x28]
800285cc:	ef 48 ff f8 	st.w	r7[-8],r8
800285d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800285d4:	30 19       	mov	r9,1
800285d6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800285da:	ef 48 ff f8 	st.w	r7[-8],r8
800285de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800285e2:	ec 58 bb 9f 	cp.w	r8,899999
800285e6:	e0 88 00 1b 	brls	8002861c <scif_configure_osc_crystalmode+0x10c>
800285ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800285ee:	e0 69 c6 bf 	mov	r9,50879
800285f2:	ea 19 00 2d 	orh	r9,0x2d
800285f6:	12 38       	cp.w	r8,r9
800285f8:	e0 88 00 0f 	brls	80028616 <scif_configure_osc_crystalmode+0x106>
800285fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028600:	e0 69 11 ff 	mov	r9,4607
80028604:	ea 19 00 7a 	orh	r9,0x7a
80028608:	12 38       	cp.w	r8,r9
8002860a:	e0 8b 00 04 	brhi	80028612 <scif_configure_osc_crystalmode+0x102>
8002860e:	30 28       	mov	r8,2
80028610:	c0 28       	rjmp	80028614 <scif_configure_osc_crystalmode+0x104>
80028612:	30 38       	mov	r8,3
80028614:	c0 28       	rjmp	80028618 <scif_configure_osc_crystalmode+0x108>
80028616:	30 18       	mov	r8,1
80028618:	10 99       	mov	r9,r8
8002861a:	c0 28       	rjmp	8002861e <scif_configure_osc_crystalmode+0x10e>
8002861c:	30 09       	mov	r9,0
8002861e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028622:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028626:	ef 48 ff f8 	st.w	r7[-8],r8
8002862a:	e1 b8 00 00 	mfsr	r8,0x0
8002862e:	10 9c       	mov	r12,r8
80028630:	c1 6e       	rcall	8002825c <cpu_irq_is_enabled_flags>
80028632:	18 98       	mov	r8,r12
80028634:	ef 68 ff ff 	st.b	r7[-1],r8
80028638:	d3 03       	ssrf	0x10
8002863a:	fe 78 08 00 	mov	r8,-63488
8002863e:	32 89       	mov	r9,40
80028640:	ea 19 aa 00 	orh	r9,0xaa00
80028644:	91 69       	st.w	r8[0x18],r9
80028646:	fe 78 08 00 	mov	r8,-63488
8002864a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002864e:	91 a9       	st.w	r8[0x28],r9
80028650:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028654:	30 08       	mov	r8,0
80028656:	f0 09 18 00 	cp.b	r9,r8
8002865a:	c0 20       	breq	8002865e <scif_configure_osc_crystalmode+0x14e>
8002865c:	d5 03       	csrf	0x10
8002865e:	30 08       	mov	r8,0
80028660:	10 9c       	mov	r12,r8
80028662:	2f bd       	sub	sp,-20
80028664:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028668:	80 02       	ld.sh	r2,r0[0x0]
8002866a:	83 9e       	st.w	r1[0x24],lr

8002866c <scif_configure_osc_extmode>:
8002866c:	eb cd 40 c0 	pushm	r6-r7,lr
80028670:	1a 97       	mov	r7,sp
80028672:	20 4d       	sub	sp,16
80028674:	4a 56       	lddpc	r6,80028708 <scif_configure_osc_extmode+0x9c>
80028676:	1e 26       	rsub	r6,pc
80028678:	ef 4c ff f0 	st.w	r7[-16],r12
8002867c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028680:	fe 79 08 00 	mov	r9,-63488
80028684:	ee fa ff f0 	ld.w	r10,r7[-16]
80028688:	a3 68       	lsl	r8,0x2
8002868a:	ee 08 00 08 	add	r8,r7,r8
8002868e:	2f 7a       	sub	r10,-9
80028690:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028694:	f1 49 ff f4 	st.w	r8[-12],r9
80028698:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002869c:	a3 68       	lsl	r8,0x2
8002869e:	ee 08 00 08 	add	r8,r7,r8
800286a2:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800286a6:	30 0a       	mov	r10,0
800286a8:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
800286ac:	f1 49 ff f4 	st.w	r8[-12],r9
800286b0:	e1 b8 00 00 	mfsr	r8,0x0
800286b4:	10 9c       	mov	r12,r8
800286b6:	fe b0 fd d3 	rcall	8002825c <cpu_irq_is_enabled_flags>
800286ba:	18 98       	mov	r8,r12
800286bc:	ef 68 ff ff 	st.b	r7[-1],r8
800286c0:	d3 03       	ssrf	0x10
800286c2:	fe 78 08 00 	mov	r8,-63488
800286c6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800286ca:	2f 79       	sub	r9,-9
800286cc:	a3 69       	lsl	r9,0x2
800286ce:	ea 19 aa 00 	orh	r9,0xaa00
800286d2:	91 69       	st.w	r8[0x18],r9
800286d4:	fe 79 08 00 	mov	r9,-63488
800286d8:	ee fa ff f0 	ld.w	r10,r7[-16]
800286dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800286e0:	2f 7a       	sub	r10,-9
800286e2:	a3 68       	lsl	r8,0x2
800286e4:	ee 08 00 08 	add	r8,r7,r8
800286e8:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800286ec:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800286f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800286f4:	30 08       	mov	r8,0
800286f6:	f0 09 18 00 	cp.b	r9,r8
800286fa:	c0 20       	breq	800286fe <scif_configure_osc_extmode+0x92>
800286fc:	d5 03       	csrf	0x10
800286fe:	30 08       	mov	r8,0
80028700:	10 9c       	mov	r12,r8
80028702:	2f cd       	sub	sp,-16
80028704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028708:	80 02       	ld.sh	r2,r0[0x0]
8002870a:	84 fa       	ld.uh	r10,r2[0xe]

8002870c <scif_enable_osc>:
8002870c:	eb cd 40 c0 	pushm	r6-r7,lr
80028710:	1a 97       	mov	r7,sp
80028712:	20 6d       	sub	sp,24
80028714:	4b 86       	lddpc	r6,800287f4 <scif_enable_osc+0xe8>
80028716:	1e 26       	rsub	r6,pc
80028718:	ef 4c ff f0 	st.w	r7[-16],r12
8002871c:	ef 4b ff ec 	st.w	r7[-20],r11
80028720:	14 98       	mov	r8,r10
80028722:	ef 68 ff e8 	st.b	r7[-24],r8
80028726:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002872a:	fe 79 08 00 	mov	r9,-63488
8002872e:	ee fa ff f0 	ld.w	r10,r7[-16]
80028732:	a3 68       	lsl	r8,0x2
80028734:	ee 08 00 08 	add	r8,r7,r8
80028738:	2f 7a       	sub	r10,-9
8002873a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8002873e:	f1 49 ff f4 	st.w	r8[-12],r9
80028742:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028746:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002874a:	5c 58       	castu.b	r8
8002874c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028750:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028754:	f2 08 15 02 	lsl	r8,r9,0x2
80028758:	ee 08 00 08 	add	r8,r7,r8
8002875c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028760:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028764:	f1 49 ff f4 	st.w	r8[-12],r9
80028768:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002876c:	a3 68       	lsl	r8,0x2
8002876e:	ee 08 00 08 	add	r8,r7,r8
80028772:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028776:	30 1a       	mov	r10,1
80028778:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
8002877c:	f1 49 ff f4 	st.w	r8[-12],r9
80028780:	e1 b8 00 00 	mfsr	r8,0x0
80028784:	10 9c       	mov	r12,r8
80028786:	fe b0 fd 6b 	rcall	8002825c <cpu_irq_is_enabled_flags>
8002878a:	18 98       	mov	r8,r12
8002878c:	ef 68 ff ff 	st.b	r7[-1],r8
80028790:	d3 03       	ssrf	0x10
80028792:	fe 78 08 00 	mov	r8,-63488
80028796:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002879a:	2f 79       	sub	r9,-9
8002879c:	a3 69       	lsl	r9,0x2
8002879e:	ea 19 aa 00 	orh	r9,0xaa00
800287a2:	91 69       	st.w	r8[0x18],r9
800287a4:	fe 79 08 00 	mov	r9,-63488
800287a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800287ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800287b0:	2f 7a       	sub	r10,-9
800287b2:	a3 68       	lsl	r8,0x2
800287b4:	ee 08 00 08 	add	r8,r7,r8
800287b8:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800287bc:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800287c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800287c4:	30 08       	mov	r8,0
800287c6:	f0 09 18 00 	cp.b	r9,r8
800287ca:	c0 20       	breq	800287ce <scif_enable_osc+0xc2>
800287cc:	d5 03       	csrf	0x10
800287ce:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800287d2:	30 08       	mov	r8,0
800287d4:	f0 09 18 00 	cp.b	r9,r8
800287d8:	c0 90       	breq	800287ea <scif_enable_osc+0xde>
800287da:	30 1c       	mov	r12,1
800287dc:	fe b0 fd 50 	rcall	8002827c <scif_pclksr_statushigh_wait>
800287e0:	18 98       	mov	r8,r12
800287e2:	58 08       	cp.w	r8,0
800287e4:	c0 30       	breq	800287ea <scif_enable_osc+0xde>
800287e6:	3f f8       	mov	r8,-1
800287e8:	c0 28       	rjmp	800287ec <scif_enable_osc+0xe0>
800287ea:	30 08       	mov	r8,0
800287ec:	10 9c       	mov	r12,r8
800287ee:	2f ad       	sub	sp,-24
800287f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800287f4:	80 02       	ld.sh	r2,r0[0x0]
800287f6:	85 9a       	st.w	r2[0x24],r10

800287f8 <scif_enable_extosc>:
800287f8:	eb cd 40 c0 	pushm	r6-r7,lr
800287fc:	1a 97       	mov	r7,sp
800287fe:	20 4d       	sub	sp,16
80028800:	4a 56       	lddpc	r6,80028894 <scif_enable_extosc+0x9c>
80028802:	1e 26       	rsub	r6,pc
80028804:	ef 4c ff f0 	st.w	r7[-16],r12
80028808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002880c:	fe 79 08 00 	mov	r9,-63488
80028810:	ee fa ff f0 	ld.w	r10,r7[-16]
80028814:	a3 68       	lsl	r8,0x2
80028816:	ee 08 00 08 	add	r8,r7,r8
8002881a:	2f 7a       	sub	r10,-9
8002881c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028820:	f1 49 ff f4 	st.w	r8[-12],r9
80028824:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028828:	a3 68       	lsl	r8,0x2
8002882a:	ee 08 00 08 	add	r8,r7,r8
8002882e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028832:	30 1a       	mov	r10,1
80028834:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028838:	f1 49 ff f4 	st.w	r8[-12],r9
8002883c:	e1 b8 00 00 	mfsr	r8,0x0
80028840:	10 9c       	mov	r12,r8
80028842:	fe b0 fd 0d 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028846:	18 98       	mov	r8,r12
80028848:	ef 68 ff ff 	st.b	r7[-1],r8
8002884c:	d3 03       	ssrf	0x10
8002884e:	fe 78 08 00 	mov	r8,-63488
80028852:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028856:	2f 79       	sub	r9,-9
80028858:	a3 69       	lsl	r9,0x2
8002885a:	ea 19 aa 00 	orh	r9,0xaa00
8002885e:	91 69       	st.w	r8[0x18],r9
80028860:	fe 79 08 00 	mov	r9,-63488
80028864:	ee fa ff f0 	ld.w	r10,r7[-16]
80028868:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002886c:	2f 7a       	sub	r10,-9
8002886e:	a3 68       	lsl	r8,0x2
80028870:	ee 08 00 08 	add	r8,r7,r8
80028874:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028878:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
8002887c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028880:	30 08       	mov	r8,0
80028882:	f0 09 18 00 	cp.b	r9,r8
80028886:	c0 20       	breq	8002888a <scif_enable_extosc+0x92>
80028888:	d5 03       	csrf	0x10
8002888a:	30 08       	mov	r8,0
8002888c:	10 9c       	mov	r12,r8
8002888e:	2f cd       	sub	sp,-16
80028890:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028894:	80 02       	ld.sh	r2,r0[0x0]
80028896:	86 86       	ld.uh	r6,r3[0x0]

80028898 <scif_pll_setup>:
80028898:	eb cd 40 c0 	pushm	r6-r7,lr
8002889c:	1a 97       	mov	r7,sp
8002889e:	20 4d       	sub	sp,16
800288a0:	4d 46       	lddpc	r6,800289f0 <scif_pll_setup+0x158>
800288a2:	1e 26       	rsub	r6,pc
800288a4:	ee c8 ff f4 	sub	r8,r7,-12
800288a8:	ef 4c ff f0 	st.w	r7[-16],r12
800288ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800288b0:	fe 7a 08 00 	mov	r10,-63488
800288b4:	ee fb ff f0 	ld.w	r11,r7[-16]
800288b8:	a3 69       	lsl	r9,0x2
800288ba:	ee 09 00 09 	add	r9,r7,r9
800288be:	2f 9b       	sub	r11,-7
800288c0:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800288c4:	f3 4a ff f4 	st.w	r9[-12],r10
800288c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800288cc:	f1 39 00 10 	ld.ub	r9,r8[16]
800288d0:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
800288d4:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800288d8:	f4 09 15 02 	lsl	r9,r10,0x2
800288dc:	ee 09 00 09 	add	r9,r7,r9
800288e0:	f2 fa ff f4 	ld.w	r10,r9[-12]
800288e4:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
800288e8:	f3 4a ff f4 	st.w	r9[-12],r10
800288ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800288f0:	11 89       	ld.ub	r9,r8[0x0]
800288f2:	12 9a       	mov	r10,r9
800288f4:	11 a9       	ld.ub	r9,r8[0x2]
800288f6:	a1 79       	lsl	r9,0x1
800288f8:	5c 59       	castu.b	r9
800288fa:	f5 e9 10 09 	or	r9,r10,r9
800288fe:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
80028902:	11 99       	ld.ub	r9,r8[0x1]
80028904:	a3 69       	lsl	r9,0x2
80028906:	5c 59       	castu.b	r9
80028908:	f5 e9 10 09 	or	r9,r10,r9
8002890c:	5c 59       	castu.b	r9
8002890e:	5c 59       	castu.b	r9
80028910:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80028914:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028918:	f8 09 15 02 	lsl	r9,r12,0x2
8002891c:	ee 09 00 09 	add	r9,r7,r9
80028920:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028924:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80028928:	f3 4a ff f4 	st.w	r9[-12],r10
8002892c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028930:	70 29       	ld.w	r9,r8[0x8]
80028932:	5c 59       	castu.b	r9
80028934:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028938:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
8002893c:	f4 09 15 02 	lsl	r9,r10,0x2
80028940:	ee 09 00 09 	add	r9,r7,r9
80028944:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028948:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
8002894c:	f3 4a ff f4 	st.w	r9[-12],r10
80028950:	ee fa ff f0 	ld.w	r10,r7[-16]
80028954:	70 19       	ld.w	r9,r8[0x4]
80028956:	5c 59       	castu.b	r9
80028958:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
8002895c:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028960:	f4 09 15 02 	lsl	r9,r10,0x2
80028964:	ee 09 00 09 	add	r9,r7,r9
80028968:	f2 fa ff f4 	ld.w	r10,r9[-12]
8002896c:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028970:	f3 4a ff f4 	st.w	r9[-12],r10
80028974:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028978:	70 38       	ld.w	r8,r8[0xc]
8002897a:	5c 58       	castu.b	r8
8002897c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028980:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028984:	f2 08 15 02 	lsl	r8,r9,0x2
80028988:	ee 08 00 08 	add	r8,r7,r8
8002898c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028990:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80028994:	f1 49 ff f4 	st.w	r8[-12],r9
80028998:	e1 b8 00 00 	mfsr	r8,0x0
8002899c:	10 9c       	mov	r12,r8
8002899e:	fe b0 fc 5f 	rcall	8002825c <cpu_irq_is_enabled_flags>
800289a2:	18 98       	mov	r8,r12
800289a4:	ef 68 ff ff 	st.b	r7[-1],r8
800289a8:	d3 03       	ssrf	0x10
800289aa:	fe 78 08 00 	mov	r8,-63488
800289ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
800289b2:	2f 99       	sub	r9,-7
800289b4:	a3 69       	lsl	r9,0x2
800289b6:	ea 19 aa 00 	orh	r9,0xaa00
800289ba:	91 69       	st.w	r8[0x18],r9
800289bc:	fe 79 08 00 	mov	r9,-63488
800289c0:	ee fa ff f0 	ld.w	r10,r7[-16]
800289c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800289c8:	2f 9a       	sub	r10,-7
800289ca:	a3 68       	lsl	r8,0x2
800289cc:	ee 08 00 08 	add	r8,r7,r8
800289d0:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800289d4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
800289d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800289dc:	30 08       	mov	r8,0
800289de:	f0 09 18 00 	cp.b	r9,r8
800289e2:	c0 20       	breq	800289e6 <scif_pll_setup+0x14e>
800289e4:	d5 03       	csrf	0x10
800289e6:	30 08       	mov	r8,0
800289e8:	10 9c       	mov	r12,r8
800289ea:	2f cd       	sub	sp,-16
800289ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800289f0:	80 02       	ld.sh	r2,r0[0x0]
800289f2:	87 26       	st.w	r3[0x8],r6

800289f4 <scif_pll_enable>:
800289f4:	eb cd 40 c0 	pushm	r6-r7,lr
800289f8:	1a 97       	mov	r7,sp
800289fa:	20 4d       	sub	sp,16
800289fc:	4a 56       	lddpc	r6,80028a90 <scif_pll_enable+0x9c>
800289fe:	1e 26       	rsub	r6,pc
80028a00:	ef 4c ff f0 	st.w	r7[-16],r12
80028a04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a08:	fe 79 08 00 	mov	r9,-63488
80028a0c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a10:	a3 68       	lsl	r8,0x2
80028a12:	ee 08 00 08 	add	r8,r7,r8
80028a16:	2f 9a       	sub	r10,-7
80028a18:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028a1c:	f1 49 ff f4 	st.w	r8[-12],r9
80028a20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a24:	a3 68       	lsl	r8,0x2
80028a26:	ee 08 00 08 	add	r8,r7,r8
80028a2a:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028a2e:	30 1a       	mov	r10,1
80028a30:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028a34:	f1 49 ff f4 	st.w	r8[-12],r9
80028a38:	e1 b8 00 00 	mfsr	r8,0x0
80028a3c:	10 9c       	mov	r12,r8
80028a3e:	fe b0 fc 0f 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028a42:	18 98       	mov	r8,r12
80028a44:	ef 68 ff ff 	st.b	r7[-1],r8
80028a48:	d3 03       	ssrf	0x10
80028a4a:	fe 78 08 00 	mov	r8,-63488
80028a4e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028a52:	2f 99       	sub	r9,-7
80028a54:	a3 69       	lsl	r9,0x2
80028a56:	ea 19 aa 00 	orh	r9,0xaa00
80028a5a:	91 69       	st.w	r8[0x18],r9
80028a5c:	fe 79 08 00 	mov	r9,-63488
80028a60:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a68:	2f 9a       	sub	r10,-7
80028a6a:	a3 68       	lsl	r8,0x2
80028a6c:	ee 08 00 08 	add	r8,r7,r8
80028a70:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028a74:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028a78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028a7c:	30 08       	mov	r8,0
80028a7e:	f0 09 18 00 	cp.b	r9,r8
80028a82:	c0 20       	breq	80028a86 <scif_pll_enable+0x92>
80028a84:	d5 03       	csrf	0x10
80028a86:	30 08       	mov	r8,0
80028a88:	10 9c       	mov	r12,r8
80028a8a:	2f cd       	sub	sp,-16
80028a8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028a90:	80 02       	ld.sh	r2,r0[0x0]
80028a92:	88 82       	ld.uh	r2,r4[0x0]

80028a94 <scif_pll_disable>:
80028a94:	eb cd 40 c0 	pushm	r6-r7,lr
80028a98:	1a 97       	mov	r7,sp
80028a9a:	20 4d       	sub	sp,16
80028a9c:	4a 56       	lddpc	r6,80028b30 <scif_pll_disable+0x9c>
80028a9e:	1e 26       	rsub	r6,pc
80028aa0:	ef 4c ff f0 	st.w	r7[-16],r12
80028aa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028aa8:	fe 79 08 00 	mov	r9,-63488
80028aac:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ab0:	a3 68       	lsl	r8,0x2
80028ab2:	ee 08 00 08 	add	r8,r7,r8
80028ab6:	2f 9a       	sub	r10,-7
80028ab8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028abc:	f1 49 ff f4 	st.w	r8[-12],r9
80028ac0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ac4:	a3 68       	lsl	r8,0x2
80028ac6:	ee 08 00 08 	add	r8,r7,r8
80028aca:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028ace:	30 0a       	mov	r10,0
80028ad0:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028ad4:	f1 49 ff f4 	st.w	r8[-12],r9
80028ad8:	e1 b8 00 00 	mfsr	r8,0x0
80028adc:	10 9c       	mov	r12,r8
80028ade:	fe b0 fb bf 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028ae2:	18 98       	mov	r8,r12
80028ae4:	ef 68 ff ff 	st.b	r7[-1],r8
80028ae8:	d3 03       	ssrf	0x10
80028aea:	fe 78 08 00 	mov	r8,-63488
80028aee:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028af2:	2f 99       	sub	r9,-7
80028af4:	a3 69       	lsl	r9,0x2
80028af6:	ea 19 aa 00 	orh	r9,0xaa00
80028afa:	91 69       	st.w	r8[0x18],r9
80028afc:	fe 79 08 00 	mov	r9,-63488
80028b00:	ee fa ff f0 	ld.w	r10,r7[-16]
80028b04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b08:	2f 9a       	sub	r10,-7
80028b0a:	a3 68       	lsl	r8,0x2
80028b0c:	ee 08 00 08 	add	r8,r7,r8
80028b10:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028b14:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
80028b18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028b1c:	30 08       	mov	r8,0
80028b1e:	f0 09 18 00 	cp.b	r9,r8
80028b22:	c0 20       	breq	80028b26 <scif_pll_disable+0x92>
80028b24:	d5 03       	csrf	0x10
80028b26:	30 08       	mov	r8,0
80028b28:	10 9c       	mov	r12,r8
80028b2a:	2f cd       	sub	sp,-16
80028b2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028b30:	80 02       	ld.sh	r2,r0[0x0]
80028b32:	89 22       	st.w	r4[0x8],r2

80028b34 <scif_wait_for_pll_locked>:
80028b34:	eb cd 40 80 	pushm	r7,lr
80028b38:	1a 97       	mov	r7,sp
80028b3a:	20 1d       	sub	sp,4
80028b3c:	ef 4c ff fc 	st.w	r7[-4],r12
80028b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b44:	58 08       	cp.w	r8,0
80028b46:	c0 81       	brne	80028b56 <scif_wait_for_pll_locked+0x22>
80028b48:	fe 78 08 00 	mov	r8,-63488
80028b4c:	70 58       	ld.w	r8,r8[0x14]
80028b4e:	e2 18 00 10 	andl	r8,0x10,COH
80028b52:	cf b0       	breq	80028b48 <scif_wait_for_pll_locked+0x14>
80028b54:	c0 78       	rjmp	80028b62 <scif_wait_for_pll_locked+0x2e>
80028b56:	fe 78 08 00 	mov	r8,-63488
80028b5a:	70 58       	ld.w	r8,r8[0x14]
80028b5c:	e2 18 00 20 	andl	r8,0x20,COH
80028b60:	cf b0       	breq	80028b56 <scif_wait_for_pll_locked+0x22>
80028b62:	30 08       	mov	r8,0
80028b64:	10 9c       	mov	r12,r8
80028b66:	2f fd       	sub	sp,-4
80028b68:	e3 cd 80 80 	ldm	sp++,r7,pc

80028b6c <scif_start_osc32>:
80028b6c:	eb cd 40 c0 	pushm	r6-r7,lr
80028b70:	1a 97       	mov	r7,sp
80028b72:	20 4d       	sub	sp,16
80028b74:	4a f6       	lddpc	r6,80028c30 <scif_start_osc32+0xc4>
80028b76:	1e 26       	rsub	r6,pc
80028b78:	ef 4c ff f4 	st.w	r7[-12],r12
80028b7c:	16 98       	mov	r8,r11
80028b7e:	ef 68 ff f0 	st.b	r7[-16],r8
80028b82:	fe 78 08 00 	mov	r8,-63488
80028b86:	71 38       	ld.w	r8,r8[0x4c]
80028b88:	ef 48 ff f8 	st.w	r7[-8],r8
80028b8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028b90:	70 18       	ld.w	r8,r8[0x4]
80028b92:	5c 58       	castu.b	r8
80028b94:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028b98:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028b9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ba0:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80028ba4:	ef 48 ff f8 	st.w	r7[-8],r8
80028ba8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028bac:	f1 38 00 08 	ld.ub	r8,r8[8]
80028bb0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80028bb4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028bbc:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80028bc0:	ef 48 ff f8 	st.w	r7[-8],r8
80028bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028bc8:	30 19       	mov	r9,1
80028bca:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028bce:	ef 48 ff f8 	st.w	r7[-8],r8
80028bd2:	e1 b8 00 00 	mfsr	r8,0x0
80028bd6:	10 9c       	mov	r12,r8
80028bd8:	fe b0 fb 42 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028bdc:	18 98       	mov	r8,r12
80028bde:	ef 68 ff ff 	st.b	r7[-1],r8
80028be2:	d3 03       	ssrf	0x10
80028be4:	fe 78 08 00 	mov	r8,-63488
80028be8:	34 c9       	mov	r9,76
80028bea:	ea 19 aa 00 	orh	r9,0xaa00
80028bee:	91 69       	st.w	r8[0x18],r9
80028bf0:	fe 78 08 00 	mov	r8,-63488
80028bf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028bf8:	f1 49 00 4c 	st.w	r8[76],r9
80028bfc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c00:	30 08       	mov	r8,0
80028c02:	f0 09 18 00 	cp.b	r9,r8
80028c06:	c0 20       	breq	80028c0a <scif_start_osc32+0x9e>
80028c08:	d5 03       	csrf	0x10
80028c0a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028c0e:	30 08       	mov	r8,0
80028c10:	f0 09 18 00 	cp.b	r9,r8
80028c14:	c0 90       	breq	80028c26 <scif_start_osc32+0xba>
80028c16:	30 4c       	mov	r12,4
80028c18:	fe b0 fb 32 	rcall	8002827c <scif_pclksr_statushigh_wait>
80028c1c:	18 98       	mov	r8,r12
80028c1e:	58 08       	cp.w	r8,0
80028c20:	c0 30       	breq	80028c26 <scif_start_osc32+0xba>
80028c22:	3f f8       	mov	r8,-1
80028c24:	c0 28       	rjmp	80028c28 <scif_start_osc32+0xbc>
80028c26:	30 08       	mov	r8,0
80028c28:	10 9c       	mov	r12,r8
80028c2a:	2f cd       	sub	sp,-16
80028c2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c30:	80 02       	ld.sh	r2,r0[0x0]
80028c32:	89 fa       	st.w	r4[0x3c],r10

80028c34 <scif_stop_osc32>:
80028c34:	eb cd 40 c0 	pushm	r6-r7,lr
80028c38:	1a 97       	mov	r7,sp
80028c3a:	20 2d       	sub	sp,8
80028c3c:	49 76       	lddpc	r6,80028c98 <scif_stop_osc32+0x64>
80028c3e:	1e 26       	rsub	r6,pc
80028c40:	fe 78 08 00 	mov	r8,-63488
80028c44:	71 38       	ld.w	r8,r8[0x4c]
80028c46:	ef 48 ff f8 	st.w	r7[-8],r8
80028c4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c4e:	a1 c8       	cbr	r8,0x0
80028c50:	ef 48 ff f8 	st.w	r7[-8],r8
80028c54:	e1 b8 00 00 	mfsr	r8,0x0
80028c58:	10 9c       	mov	r12,r8
80028c5a:	fe b0 fb 01 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028c5e:	18 98       	mov	r8,r12
80028c60:	ef 68 ff ff 	st.b	r7[-1],r8
80028c64:	d3 03       	ssrf	0x10
80028c66:	fe 78 08 00 	mov	r8,-63488
80028c6a:	34 c9       	mov	r9,76
80028c6c:	ea 19 aa 00 	orh	r9,0xaa00
80028c70:	91 69       	st.w	r8[0x18],r9
80028c72:	fe 78 08 00 	mov	r8,-63488
80028c76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028c7a:	f1 49 00 4c 	st.w	r8[76],r9
80028c7e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c82:	30 08       	mov	r8,0
80028c84:	f0 09 18 00 	cp.b	r9,r8
80028c88:	c0 20       	breq	80028c8c <scif_stop_osc32+0x58>
80028c8a:	d5 03       	csrf	0x10
80028c8c:	30 08       	mov	r8,0
80028c8e:	10 9c       	mov	r12,r8
80028c90:	2f ed       	sub	sp,-8
80028c92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c96:	00 00       	add	r0,r0
80028c98:	80 02       	ld.sh	r2,r0[0x0]
80028c9a:	8a c2       	ld.uh	r2,r5[0x8]

80028c9c <scif_start_rc8M>:
80028c9c:	eb cd 40 c0 	pushm	r6-r7,lr
80028ca0:	1a 97       	mov	r7,sp
80028ca2:	20 2d       	sub	sp,8
80028ca4:	49 66       	lddpc	r6,80028cfc <scif_start_rc8M+0x60>
80028ca6:	1e 26       	rsub	r6,pc
80028ca8:	e0 68 02 00 	mov	r8,512
80028cac:	ea 18 80 80 	orh	r8,0x8080
80028cb0:	ef 48 ff f8 	st.w	r7[-8],r8
80028cb4:	e1 b8 00 00 	mfsr	r8,0x0
80028cb8:	10 9c       	mov	r12,r8
80028cba:	fe b0 fa d1 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028cbe:	18 98       	mov	r8,r12
80028cc0:	ef 68 ff ff 	st.b	r7[-1],r8
80028cc4:	d3 03       	ssrf	0x10
80028cc6:	fe 78 08 00 	mov	r8,-63488
80028cca:	34 89       	mov	r9,72
80028ccc:	ea 19 aa 00 	orh	r9,0xaa00
80028cd0:	91 69       	st.w	r8[0x18],r9
80028cd2:	fe 78 08 00 	mov	r8,-63488
80028cd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028cda:	72 09       	ld.w	r9,r9[0x0]
80028cdc:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80028ce0:	b9 a9       	sbr	r9,0x18
80028ce2:	f1 49 00 48 	st.w	r8[72],r9
80028ce6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028cea:	30 08       	mov	r8,0
80028cec:	f0 09 18 00 	cp.b	r9,r8
80028cf0:	c0 20       	breq	80028cf4 <scif_start_rc8M+0x58>
80028cf2:	d5 03       	csrf	0x10
80028cf4:	2f ed       	sub	sp,-8
80028cf6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028cfa:	00 00       	add	r0,r0
80028cfc:	80 02       	ld.sh	r2,r0[0x0]
80028cfe:	8b 2a       	st.w	r5[0x8],r10

80028d00 <scif_stop_rc8M>:
80028d00:	eb cd 40 c0 	pushm	r6-r7,lr
80028d04:	1a 97       	mov	r7,sp
80028d06:	20 2d       	sub	sp,8
80028d08:	49 66       	lddpc	r6,80028d60 <scif_stop_rc8M+0x60>
80028d0a:	1e 26       	rsub	r6,pc
80028d0c:	fe 78 08 00 	mov	r8,-63488
80028d10:	71 28       	ld.w	r8,r8[0x48]
80028d12:	ef 48 ff f8 	st.w	r7[-8],r8
80028d16:	e1 b8 00 00 	mfsr	r8,0x0
80028d1a:	10 9c       	mov	r12,r8
80028d1c:	fe b0 fa a0 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028d20:	18 98       	mov	r8,r12
80028d22:	ef 68 ff ff 	st.b	r7[-1],r8
80028d26:	d3 03       	ssrf	0x10
80028d28:	fe 78 08 00 	mov	r8,-63488
80028d2c:	34 89       	mov	r9,72
80028d2e:	ea 19 aa 00 	orh	r9,0xaa00
80028d32:	91 69       	st.w	r8[0x18],r9
80028d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d38:	b9 c8       	cbr	r8,0x18
80028d3a:	ef 48 ff f8 	st.w	r7[-8],r8
80028d3e:	fe 78 08 00 	mov	r8,-63488
80028d42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028d46:	f1 49 00 48 	st.w	r8[72],r9
80028d4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d4e:	30 08       	mov	r8,0
80028d50:	f0 09 18 00 	cp.b	r9,r8
80028d54:	c0 20       	breq	80028d58 <scif_stop_rc8M+0x58>
80028d56:	d5 03       	csrf	0x10
80028d58:	2f ed       	sub	sp,-8
80028d5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d5e:	00 00       	add	r0,r0
80028d60:	80 02       	ld.sh	r2,r0[0x0]
80028d62:	8b 8e       	st.w	r5[0x20],lr

80028d64 <scif_start_rc120M>:
80028d64:	eb cd 40 c0 	pushm	r6-r7,lr
80028d68:	1a 97       	mov	r7,sp
80028d6a:	20 1d       	sub	sp,4
80028d6c:	49 06       	lddpc	r6,80028dac <scif_start_rc120M+0x48>
80028d6e:	1e 26       	rsub	r6,pc
80028d70:	e1 b8 00 00 	mfsr	r8,0x0
80028d74:	10 9c       	mov	r12,r8
80028d76:	fe b0 fa 73 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028d7a:	18 98       	mov	r8,r12
80028d7c:	ef 68 ff ff 	st.b	r7[-1],r8
80028d80:	d3 03       	ssrf	0x10
80028d82:	fe 78 08 00 	mov	r8,-63488
80028d86:	35 89       	mov	r9,88
80028d88:	ea 19 aa 00 	orh	r9,0xaa00
80028d8c:	91 69       	st.w	r8[0x18],r9
80028d8e:	fe 78 08 00 	mov	r8,-63488
80028d92:	30 19       	mov	r9,1
80028d94:	f1 49 00 58 	st.w	r8[88],r9
80028d98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d9c:	30 08       	mov	r8,0
80028d9e:	f0 09 18 00 	cp.b	r9,r8
80028da2:	c0 20       	breq	80028da6 <scif_start_rc120M+0x42>
80028da4:	d5 03       	csrf	0x10
80028da6:	2f fd       	sub	sp,-4
80028da8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028dac:	80 02       	ld.sh	r2,r0[0x0]
80028dae:	8b f2       	st.w	r5[0x3c],r2

80028db0 <scif_stop_rc120M>:
80028db0:	eb cd 40 c0 	pushm	r6-r7,lr
80028db4:	1a 97       	mov	r7,sp
80028db6:	20 2d       	sub	sp,8
80028db8:	49 66       	lddpc	r6,80028e10 <scif_stop_rc120M+0x60>
80028dba:	1e 26       	rsub	r6,pc
80028dbc:	fe 78 08 00 	mov	r8,-63488
80028dc0:	71 68       	ld.w	r8,r8[0x58]
80028dc2:	ef 48 ff f8 	st.w	r7[-8],r8
80028dc6:	e1 b8 00 00 	mfsr	r8,0x0
80028dca:	10 9c       	mov	r12,r8
80028dcc:	fe b0 fa 48 	rcall	8002825c <cpu_irq_is_enabled_flags>
80028dd0:	18 98       	mov	r8,r12
80028dd2:	ef 68 ff ff 	st.b	r7[-1],r8
80028dd6:	d3 03       	ssrf	0x10
80028dd8:	fe 78 08 00 	mov	r8,-63488
80028ddc:	35 89       	mov	r9,88
80028dde:	ea 19 aa 00 	orh	r9,0xaa00
80028de2:	91 69       	st.w	r8[0x18],r9
80028de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028de8:	a1 c8       	cbr	r8,0x0
80028dea:	ef 48 ff f8 	st.w	r7[-8],r8
80028dee:	fe 78 08 00 	mov	r8,-63488
80028df2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028df6:	f1 49 00 58 	st.w	r8[88],r9
80028dfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028dfe:	30 08       	mov	r8,0
80028e00:	f0 09 18 00 	cp.b	r9,r8
80028e04:	c0 20       	breq	80028e08 <scif_stop_rc120M+0x58>
80028e06:	d5 03       	csrf	0x10
80028e08:	2f ed       	sub	sp,-8
80028e0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028e0e:	00 00       	add	r0,r0
80028e10:	80 02       	ld.sh	r2,r0[0x0]
80028e12:	8c 3e       	ld.sh	lr,r6[0x6]

80028e14 <scif_start_gclk>:
80028e14:	eb cd 40 80 	pushm	r7,lr
80028e18:	1a 97       	mov	r7,sp
80028e1a:	20 2d       	sub	sp,8
80028e1c:	ef 4c ff fc 	st.w	r7[-4],r12
80028e20:	ef 4b ff f8 	st.w	r7[-8],r11
80028e24:	fe 78 08 00 	mov	r8,-63488
80028e28:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028e2c:	2e 79       	sub	r9,-25
80028e2e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028e32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028e36:	5c 58       	castu.b	r8
80028e38:	c0 30       	breq	80028e3e <scif_start_gclk+0x2a>
80028e3a:	3f f8       	mov	r8,-1
80028e3c:	c2 08       	rjmp	80028e7c <scif_start_gclk+0x68>
80028e3e:	fe 78 08 00 	mov	r8,-63488
80028e42:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028e46:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e4a:	74 1a       	ld.w	r10,r10[0x4]
80028e4c:	b1 6a       	lsl	r10,0x10
80028e4e:	14 9b       	mov	r11,r10
80028e50:	e6 1b 00 ff 	andh	r11,0xff,COH
80028e54:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e58:	74 2a       	ld.w	r10,r10[0x8]
80028e5a:	a1 7a       	lsl	r10,0x1
80028e5c:	e2 1a 00 02 	andl	r10,0x2,COH
80028e60:	14 4b       	or	r11,r10
80028e62:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e66:	74 0a       	ld.w	r10,r10[0x0]
80028e68:	a9 6a       	lsl	r10,0x8
80028e6a:	e2 1a 0f 00 	andl	r10,0xf00,COH
80028e6e:	f7 ea 10 0a 	or	r10,r11,r10
80028e72:	a1 aa       	sbr	r10,0x0
80028e74:	2e 79       	sub	r9,-25
80028e76:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028e7a:	30 08       	mov	r8,0
80028e7c:	10 9c       	mov	r12,r8
80028e7e:	2f ed       	sub	sp,-8
80028e80:	e3 cd 80 80 	ldm	sp++,r7,pc

80028e84 <scif_stop_gclk>:
80028e84:	eb cd 40 80 	pushm	r7,lr
80028e88:	1a 97       	mov	r7,sp
80028e8a:	20 2d       	sub	sp,8
80028e8c:	ef 4c ff f8 	st.w	r7[-8],r12
80028e90:	e0 78 86 a0 	mov	r8,100000
80028e94:	ef 48 ff fc 	st.w	r7[-4],r8
80028e98:	fe 78 08 00 	mov	r8,-63488
80028e9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028ea0:	fe 7a 08 00 	mov	r10,-63488
80028ea4:	ee fb ff f8 	ld.w	r11,r7[-8]
80028ea8:	2e 7b       	sub	r11,-25
80028eaa:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028eae:	a1 ca       	cbr	r10,0x0
80028eb0:	2e 79       	sub	r9,-25
80028eb2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028eb6:	c0 c8       	rjmp	80028ece <scif_stop_gclk+0x4a>
80028eb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ebc:	20 18       	sub	r8,1
80028ebe:	ef 48 ff fc 	st.w	r7[-4],r8
80028ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ec6:	58 08       	cp.w	r8,0
80028ec8:	c0 31       	brne	80028ece <scif_stop_gclk+0x4a>
80028eca:	3f f8       	mov	r8,-1
80028ecc:	c0 d8       	rjmp	80028ee6 <scif_stop_gclk+0x62>
80028ece:	fe 78 08 00 	mov	r8,-63488
80028ed2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028ed6:	2e 79       	sub	r9,-25
80028ed8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028edc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028ee0:	5c 58       	castu.b	r8
80028ee2:	ce b1       	brne	80028eb8 <scif_stop_gclk+0x34>
80028ee4:	30 08       	mov	r8,0
80028ee6:	10 9c       	mov	r12,r8
80028ee8:	2f ed       	sub	sp,-8
80028eea:	e3 cd 80 80 	ldm	sp++,r7,pc

80028eee <scif_gc_setup>:
80028eee:	eb cd 40 c0 	pushm	r6-r7,lr
80028ef2:	1a 97       	mov	r7,sp
80028ef4:	20 5d       	sub	sp,20
80028ef6:	4a f6       	lddpc	r6,80028fb0 <scif_gc_setup+0xc2>
80028ef8:	1e 26       	rsub	r6,pc
80028efa:	ef 4c ff f8 	st.w	r7[-8],r12
80028efe:	ef 4b ff f4 	st.w	r7[-12],r11
80028f02:	ef 4a ff f0 	st.w	r7[-16],r10
80028f06:	ef 49 ff ec 	st.w	r7[-20],r9
80028f0a:	30 08       	mov	r8,0
80028f0c:	ef 48 ff fc 	st.w	r7[-4],r8
80028f10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028f14:	a1 98       	lsr	r8,0x1
80028f16:	20 18       	sub	r8,1
80028f18:	ef 48 ff ec 	st.w	r7[-20],r8
80028f1c:	fe 78 08 00 	mov	r8,-63488
80028f20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f24:	2e 79       	sub	r9,-25
80028f26:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028f2a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028f2e:	5c 58       	castu.b	r8
80028f30:	c0 d0       	breq	80028f4a <scif_gc_setup+0x5c>
80028f32:	30 18       	mov	r8,1
80028f34:	ef 48 ff fc 	st.w	r7[-4],r8
80028f38:	ee fc ff f8 	ld.w	r12,r7[-8]
80028f3c:	f0 16 02 1b 	mcall	r6[2156]
80028f40:	18 98       	mov	r8,r12
80028f42:	58 08       	cp.w	r8,0
80028f44:	c0 34       	brge	80028f4a <scif_gc_setup+0x5c>
80028f46:	3f f8       	mov	r8,-1
80028f48:	c2 f8       	rjmp	80028fa6 <scif_gc_setup+0xb8>
80028f4a:	fe 78 08 00 	mov	r8,-63488
80028f4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f52:	ee fa ff ec 	ld.w	r10,r7[-20]
80028f56:	b1 6a       	lsl	r10,0x10
80028f58:	14 9b       	mov	r11,r10
80028f5a:	e6 1b 00 ff 	andh	r11,0xff,COH
80028f5e:	ee fa ff f0 	ld.w	r10,r7[-16]
80028f62:	a1 7a       	lsl	r10,0x1
80028f64:	e2 1a 00 02 	andl	r10,0x2,COH
80028f68:	14 4b       	or	r11,r10
80028f6a:	ee fa ff f4 	ld.w	r10,r7[-12]
80028f6e:	a9 6a       	lsl	r10,0x8
80028f70:	e2 1a 0f 00 	andl	r10,0xf00,COH
80028f74:	f7 ea 10 0a 	or	r10,r11,r10
80028f78:	2e 79       	sub	r9,-25
80028f7a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028f7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f82:	58 18       	cp.w	r8,1
80028f84:	c1 01       	brne	80028fa4 <scif_gc_setup+0xb6>
80028f86:	fe 78 08 00 	mov	r8,-63488
80028f8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f8e:	fe 7a 08 00 	mov	r10,-63488
80028f92:	ee fb ff f8 	ld.w	r11,r7[-8]
80028f96:	2e 7b       	sub	r11,-25
80028f98:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028f9c:	a1 aa       	sbr	r10,0x0
80028f9e:	2e 79       	sub	r9,-25
80028fa0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028fa4:	30 08       	mov	r8,0
80028fa6:	10 9c       	mov	r12,r8
80028fa8:	2f bd       	sub	sp,-20
80028faa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028fae:	00 00       	add	r0,r0
80028fb0:	80 02       	ld.sh	r2,r0[0x0]
80028fb2:	8d 7c       	st.w	r6[0x1c],r12

80028fb4 <scif_gc_enable>:
80028fb4:	eb cd 40 80 	pushm	r7,lr
80028fb8:	1a 97       	mov	r7,sp
80028fba:	20 1d       	sub	sp,4
80028fbc:	ef 4c ff fc 	st.w	r7[-4],r12
80028fc0:	fe 78 08 00 	mov	r8,-63488
80028fc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028fc8:	2e 79       	sub	r9,-25
80028fca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028fce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028fd2:	c1 01       	brne	80028ff2 <scif_gc_enable+0x3e>
80028fd4:	fe 78 08 00 	mov	r8,-63488
80028fd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028fdc:	fe 7a 08 00 	mov	r10,-63488
80028fe0:	ee fb ff fc 	ld.w	r11,r7[-4]
80028fe4:	2e 7b       	sub	r11,-25
80028fe6:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028fea:	a1 aa       	sbr	r10,0x0
80028fec:	2e 79       	sub	r9,-25
80028fee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80028ff2:	30 08       	mov	r8,0
80028ff4:	10 9c       	mov	r12,r8
80028ff6:	2f fd       	sub	sp,-4
80028ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80028ffc <scif_bod18_enable_irq>:
80028ffc:	eb cd 40 80 	pushm	r7,lr
80029000:	1a 97       	mov	r7,sp
80029002:	fe 78 08 00 	mov	r8,-63488
80029006:	34 09       	mov	r9,64
80029008:	91 09       	st.w	r8[0x0],r9
8002900a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002900e <scif_bod18_disable_irq>:
8002900e:	eb cd 40 c0 	pushm	r6-r7,lr
80029012:	1a 97       	mov	r7,sp
80029014:	20 1d       	sub	sp,4
80029016:	49 26       	lddpc	r6,8002905c <scif_bod18_disable_irq+0x4e>
80029018:	1e 26       	rsub	r6,pc
8002901a:	e1 b8 00 00 	mfsr	r8,0x0
8002901e:	10 9c       	mov	r12,r8
80029020:	fe b0 f9 1e 	rcall	8002825c <cpu_irq_is_enabled_flags>
80029024:	18 98       	mov	r8,r12
80029026:	ef 68 ff ff 	st.b	r7[-1],r8
8002902a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002902e:	30 08       	mov	r8,0
80029030:	f0 09 18 00 	cp.b	r9,r8
80029034:	c0 20       	breq	80029038 <scif_bod18_disable_irq+0x2a>
80029036:	d3 03       	ssrf	0x10
80029038:	fe 78 08 00 	mov	r8,-63488
8002903c:	34 09       	mov	r9,64
8002903e:	91 19       	st.w	r8[0x4],r9
80029040:	fe 78 08 00 	mov	r8,-63488
80029044:	70 38       	ld.w	r8,r8[0xc]
80029046:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002904a:	30 08       	mov	r8,0
8002904c:	f0 09 18 00 	cp.b	r9,r8
80029050:	c0 20       	breq	80029054 <scif_bod18_disable_irq+0x46>
80029052:	d5 03       	csrf	0x10
80029054:	2f fd       	sub	sp,-4
80029056:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002905a:	00 00       	add	r0,r0
8002905c:	80 02       	ld.sh	r2,r0[0x0]
8002905e:	8e 9c       	ld.uh	r12,r7[0x2]

80029060 <scif_bod18_clear_irq>:
80029060:	eb cd 40 80 	pushm	r7,lr
80029064:	1a 97       	mov	r7,sp
80029066:	fe 78 08 00 	mov	r8,-63488
8002906a:	34 09       	mov	r9,64
8002906c:	91 49       	st.w	r8[0x10],r9
8002906e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029072 <scif_bod18_get_irq_status>:
80029072:	eb cd 40 80 	pushm	r7,lr
80029076:	1a 97       	mov	r7,sp
80029078:	fe 78 08 00 	mov	r8,-63488
8002907c:	70 38       	ld.w	r8,r8[0xc]
8002907e:	e2 18 00 40 	andl	r8,0x40,COH
80029082:	5f 18       	srne	r8
80029084:	10 9c       	mov	r12,r8
80029086:	e3 cd 80 80 	ldm	sp++,r7,pc

8002908a <scif_bod18_get_irq_enable_bit>:
8002908a:	eb cd 40 80 	pushm	r7,lr
8002908e:	1a 97       	mov	r7,sp
80029090:	fe 78 08 00 	mov	r8,-63488
80029094:	70 28       	ld.w	r8,r8[0x8]
80029096:	e2 18 00 40 	andl	r8,0x40,COH
8002909a:	5f 18       	srne	r8
8002909c:	10 9c       	mov	r12,r8
8002909e:	e3 cd 80 80 	ldm	sp++,r7,pc

800290a2 <scif_bod18_get_level>:
800290a2:	eb cd 40 80 	pushm	r7,lr
800290a6:	1a 97       	mov	r7,sp
800290a8:	fe 78 08 00 	mov	r8,-63488
800290ac:	70 b8       	ld.w	r8,r8[0x2c]
800290ae:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800290b2:	10 9c       	mov	r12,r8
800290b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800290b8 <scif_bod33_enable_irq>:
800290b8:	eb cd 40 80 	pushm	r7,lr
800290bc:	1a 97       	mov	r7,sp
800290be:	fe 78 08 00 	mov	r8,-63488
800290c2:	e0 69 00 80 	mov	r9,128
800290c6:	91 09       	st.w	r8[0x0],r9
800290c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800290cc <scif_bod33_disable_irq>:
800290cc:	eb cd 40 c0 	pushm	r6-r7,lr
800290d0:	1a 97       	mov	r7,sp
800290d2:	20 1d       	sub	sp,4
800290d4:	49 26       	lddpc	r6,8002911c <scif_bod33_disable_irq+0x50>
800290d6:	1e 26       	rsub	r6,pc
800290d8:	e1 b8 00 00 	mfsr	r8,0x0
800290dc:	10 9c       	mov	r12,r8
800290de:	fe b0 f8 bf 	rcall	8002825c <cpu_irq_is_enabled_flags>
800290e2:	18 98       	mov	r8,r12
800290e4:	ef 68 ff ff 	st.b	r7[-1],r8
800290e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290ec:	30 08       	mov	r8,0
800290ee:	f0 09 18 00 	cp.b	r9,r8
800290f2:	c0 20       	breq	800290f6 <scif_bod33_disable_irq+0x2a>
800290f4:	d3 03       	ssrf	0x10
800290f6:	fe 78 08 00 	mov	r8,-63488
800290fa:	e0 69 00 80 	mov	r9,128
800290fe:	91 19       	st.w	r8[0x4],r9
80029100:	fe 78 08 00 	mov	r8,-63488
80029104:	70 38       	ld.w	r8,r8[0xc]
80029106:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002910a:	30 08       	mov	r8,0
8002910c:	f0 09 18 00 	cp.b	r9,r8
80029110:	c0 20       	breq	80029114 <scif_bod33_disable_irq+0x48>
80029112:	d5 03       	csrf	0x10
80029114:	2f fd       	sub	sp,-4
80029116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002911a:	00 00       	add	r0,r0
8002911c:	80 02       	ld.sh	r2,r0[0x0]
8002911e:	8f 5a       	st.w	r7[0x14],r10

80029120 <scif_bod33_clear_irq>:
80029120:	eb cd 40 80 	pushm	r7,lr
80029124:	1a 97       	mov	r7,sp
80029126:	fe 78 08 00 	mov	r8,-63488
8002912a:	e0 69 00 80 	mov	r9,128
8002912e:	91 49       	st.w	r8[0x10],r9
80029130:	e3 cd 80 80 	ldm	sp++,r7,pc

80029134 <scif_bod33_get_irq_status>:
80029134:	eb cd 40 80 	pushm	r7,lr
80029138:	1a 97       	mov	r7,sp
8002913a:	fe 78 08 00 	mov	r8,-63488
8002913e:	70 38       	ld.w	r8,r8[0xc]
80029140:	e2 18 00 80 	andl	r8,0x80,COH
80029144:	5f 18       	srne	r8
80029146:	10 9c       	mov	r12,r8
80029148:	e3 cd 80 80 	ldm	sp++,r7,pc

8002914c <scif_bod33_get_irq_enable_bit>:
8002914c:	eb cd 40 80 	pushm	r7,lr
80029150:	1a 97       	mov	r7,sp
80029152:	fe 78 08 00 	mov	r8,-63488
80029156:	70 28       	ld.w	r8,r8[0x8]
80029158:	e2 18 00 80 	andl	r8,0x80,COH
8002915c:	5f 18       	srne	r8
8002915e:	10 9c       	mov	r12,r8
80029160:	e3 cd 80 80 	ldm	sp++,r7,pc

80029164 <scif_bod33_get_level>:
80029164:	eb cd 40 80 	pushm	r7,lr
80029168:	1a 97       	mov	r7,sp
8002916a:	fe 78 08 00 	mov	r8,-63488
8002916e:	70 d8       	ld.w	r8,r8[0x34]
80029170:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80029174:	10 9c       	mov	r12,r8
80029176:	e3 cd 80 80 	ldm	sp++,r7,pc

8002917a <scif_bod50_enable_irq>:
8002917a:	eb cd 40 80 	pushm	r7,lr
8002917e:	1a 97       	mov	r7,sp
80029180:	fe 78 08 00 	mov	r8,-63488
80029184:	e0 69 01 00 	mov	r9,256
80029188:	91 09       	st.w	r8[0x0],r9
8002918a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002918e <scif_bod50_disable_irq>:
8002918e:	eb cd 40 c0 	pushm	r6-r7,lr
80029192:	1a 97       	mov	r7,sp
80029194:	20 1d       	sub	sp,4
80029196:	49 26       	lddpc	r6,800291dc <scif_bod50_disable_irq+0x4e>
80029198:	1e 26       	rsub	r6,pc
8002919a:	e1 b8 00 00 	mfsr	r8,0x0
8002919e:	10 9c       	mov	r12,r8
800291a0:	fe b0 f8 5e 	rcall	8002825c <cpu_irq_is_enabled_flags>
800291a4:	18 98       	mov	r8,r12
800291a6:	ef 68 ff ff 	st.b	r7[-1],r8
800291aa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800291ae:	30 08       	mov	r8,0
800291b0:	f0 09 18 00 	cp.b	r9,r8
800291b4:	c0 20       	breq	800291b8 <scif_bod50_disable_irq+0x2a>
800291b6:	d3 03       	ssrf	0x10
800291b8:	fe 78 08 00 	mov	r8,-63488
800291bc:	e0 69 01 00 	mov	r9,256
800291c0:	91 19       	st.w	r8[0x4],r9
800291c2:	fe 78 08 00 	mov	r8,-63488
800291c6:	70 38       	ld.w	r8,r8[0xc]
800291c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800291cc:	30 08       	mov	r8,0
800291ce:	f0 09 18 00 	cp.b	r9,r8
800291d2:	c0 20       	breq	800291d6 <scif_bod50_disable_irq+0x48>
800291d4:	d5 03       	csrf	0x10
800291d6:	2f fd       	sub	sp,-4
800291d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291dc:	80 02       	ld.sh	r2,r0[0x0]
800291de:	90 1c       	ld.sh	r12,r8[0x2]

800291e0 <scif_bod50_clear_irq>:
800291e0:	eb cd 40 80 	pushm	r7,lr
800291e4:	1a 97       	mov	r7,sp
800291e6:	fe 78 08 00 	mov	r8,-63488
800291ea:	e0 69 01 00 	mov	r9,256
800291ee:	91 49       	st.w	r8[0x10],r9
800291f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800291f4 <scif_bod50_get_irq_status>:
800291f4:	eb cd 40 80 	pushm	r7,lr
800291f8:	1a 97       	mov	r7,sp
800291fa:	fe 78 08 00 	mov	r8,-63488
800291fe:	70 38       	ld.w	r8,r8[0xc]
80029200:	e2 18 01 00 	andl	r8,0x100,COH
80029204:	5f 18       	srne	r8
80029206:	10 9c       	mov	r12,r8
80029208:	e3 cd 80 80 	ldm	sp++,r7,pc

8002920c <scif_bod50_get_irq_enable_bit>:
8002920c:	eb cd 40 80 	pushm	r7,lr
80029210:	1a 97       	mov	r7,sp
80029212:	fe 78 08 00 	mov	r8,-63488
80029216:	70 28       	ld.w	r8,r8[0x8]
80029218:	e2 18 01 00 	andl	r8,0x100,COH
8002921c:	5f 18       	srne	r8
8002921e:	10 9c       	mov	r12,r8
80029220:	e3 cd 80 80 	ldm	sp++,r7,pc

80029224 <scif_bod50_get_level>:
80029224:	eb cd 40 80 	pushm	r7,lr
80029228:	1a 97       	mov	r7,sp
8002922a:	fe 78 08 00 	mov	r8,-63488
8002922e:	70 e8       	ld.w	r8,r8[0x38]
80029230:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80029234:	10 9c       	mov	r12,r8
80029236:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8002923c <getBaudDiv>:
8002923c:	eb cd 40 80 	pushm	r7,lr
80029240:	1a 97       	mov	r7,sp
80029242:	20 3d       	sub	sp,12
80029244:	ef 4c ff f8 	st.w	r7[-8],r12
80029248:	ef 4b ff f4 	st.w	r7[-12],r11
8002924c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029250:	f0 09 16 01 	lsr	r9,r8,0x1
80029254:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029258:	f2 08 00 08 	add	r8,r9,r8
8002925c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029260:	f0 09 0d 08 	divu	r8,r8,r9
80029264:	ef 48 ff fc 	st.w	r7[-4],r8
80029268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002926c:	58 08       	cp.w	r8,0
8002926e:	e0 8a 00 08 	brle	8002927e <getBaudDiv+0x42>
80029272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029276:	e0 48 00 ff 	cp.w	r8,255
8002927a:	e0 8a 00 04 	brle	80029282 <getBaudDiv+0x46>
8002927e:	3f f8       	mov	r8,-1
80029280:	c0 48       	rjmp	80029288 <getBaudDiv+0x4c>
80029282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029286:	5c 88       	casts.h	r8
80029288:	10 9c       	mov	r12,r8
8002928a:	2f dd       	sub	sp,-12
8002928c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029290 <spi_initSlave>:
80029290:	eb cd 40 80 	pushm	r7,lr
80029294:	1a 97       	mov	r7,sp
80029296:	20 3d       	sub	sp,12
80029298:	ef 4c ff fc 	st.w	r7[-4],r12
8002929c:	16 99       	mov	r9,r11
8002929e:	14 98       	mov	r8,r10
800292a0:	ef 69 ff f8 	st.b	r7[-8],r9
800292a4:	ef 68 ff f4 	st.b	r7[-12],r8
800292a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800292ac:	30 38       	mov	r8,3
800292ae:	f0 09 18 00 	cp.b	r9,r8
800292b2:	e0 8b 00 10 	brhi	800292d2 <spi_initSlave+0x42>
800292b6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800292ba:	30 78       	mov	r8,7
800292bc:	f0 09 18 00 	cp.b	r9,r8
800292c0:	e0 88 00 09 	brls	800292d2 <spi_initSlave+0x42>
800292c4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800292c8:	31 08       	mov	r8,16
800292ca:	f0 09 18 00 	cp.b	r9,r8
800292ce:	e0 88 00 04 	brls	800292d6 <spi_initSlave+0x46>
800292d2:	30 28       	mov	r8,2
800292d4:	c1 f8       	rjmp	80029312 <spi_initSlave+0x82>
800292d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292da:	e0 69 00 80 	mov	r9,128
800292de:	91 09       	st.w	r8[0x0],r9
800292e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800292e4:	a1 98       	lsr	r8,0x1
800292e6:	5c 58       	castu.b	r8
800292e8:	10 99       	mov	r9,r8
800292ea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800292ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800292f2:	c0 31       	brne	800292f8 <spi_initSlave+0x68>
800292f4:	30 28       	mov	r8,2
800292f6:	c0 28       	rjmp	800292fa <spi_initSlave+0x6a>
800292f8:	30 08       	mov	r8,0
800292fa:	10 49       	or	r9,r8
800292fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80029300:	20 88       	sub	r8,8
80029302:	a5 68       	lsl	r8,0x4
80029304:	f3 e8 10 08 	or	r8,r9,r8
80029308:	10 99       	mov	r9,r8
8002930a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002930e:	91 c9       	st.w	r8[0x30],r9
80029310:	30 08       	mov	r8,0
80029312:	10 9c       	mov	r12,r8
80029314:	2f dd       	sub	sp,-12
80029316:	e3 cd 80 80 	ldm	sp++,r7,pc

8002931a <spi_initTest>:
8002931a:	eb cd 40 80 	pushm	r7,lr
8002931e:	1a 97       	mov	r7,sp
80029320:	20 1d       	sub	sp,4
80029322:	ef 4c ff fc 	st.w	r7[-4],r12
80029326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002932a:	e0 69 00 80 	mov	r9,128
8002932e:	91 09       	st.w	r8[0x0],r9
80029330:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029334:	70 18       	ld.w	r8,r8[0x4]
80029336:	10 99       	mov	r9,r8
80029338:	e8 19 00 81 	orl	r9,0x81
8002933c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029340:	91 19       	st.w	r8[0x4],r9
80029342:	30 08       	mov	r8,0
80029344:	10 9c       	mov	r12,r8
80029346:	2f fd       	sub	sp,-4
80029348:	e3 cd 80 80 	ldm	sp++,r7,pc

8002934c <spi_initMaster>:
8002934c:	eb cd 40 80 	pushm	r7,lr
80029350:	1a 97       	mov	r7,sp
80029352:	20 3d       	sub	sp,12
80029354:	ef 4c ff f8 	st.w	r7[-8],r12
80029358:	ef 4b ff f4 	st.w	r7[-12],r11
8002935c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029360:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029364:	30 18       	mov	r8,1
80029366:	f0 09 18 00 	cp.b	r9,r8
8002936a:	e0 88 00 04 	brls	80029372 <spi_initMaster+0x26>
8002936e:	30 28       	mov	r8,2
80029370:	c3 48       	rjmp	800293d8 <spi_initMaster+0x8c>
80029372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029376:	e0 69 00 80 	mov	r9,128
8002937a:	91 09       	st.w	r8[0x0],r9
8002937c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029380:	70 18       	ld.w	r8,r8[0x4]
80029382:	ef 48 ff fc 	st.w	r7[-4],r8
80029386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002938a:	30 19       	mov	r9,1
8002938c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029390:	ef 48 ff fc 	st.w	r7[-4],r8
80029394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029398:	f1 38 00 0d 	ld.ub	r8,r8[13]
8002939c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800293a0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800293a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293a8:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800293ac:	ef 48 ff fc 	st.w	r7[-4],r8
800293b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293b4:	30 09       	mov	r9,0
800293b6:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800293ba:	ef 48 ff fc 	st.w	r7[-4],r8
800293be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293c2:	30 f9       	mov	r9,15
800293c4:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800293c8:	ef 48 ff fc 	st.w	r7[-4],r8
800293cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800293d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800293d4:	91 19       	st.w	r8[0x4],r9
800293d6:	30 08       	mov	r8,0
800293d8:	10 9c       	mov	r12,r8
800293da:	2f dd       	sub	sp,-12
800293dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800293e0 <spi_selectionMode>:
800293e0:	eb cd 40 80 	pushm	r7,lr
800293e4:	1a 97       	mov	r7,sp
800293e6:	20 5d       	sub	sp,20
800293e8:	ef 4c ff f8 	st.w	r7[-8],r12
800293ec:	12 98       	mov	r8,r9
800293ee:	16 99       	mov	r9,r11
800293f0:	ef 69 ff f4 	st.b	r7[-12],r9
800293f4:	14 99       	mov	r9,r10
800293f6:	ef 69 ff f0 	st.b	r7[-16],r9
800293fa:	ef 68 ff ec 	st.b	r7[-20],r8
800293fe:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029402:	30 18       	mov	r8,1
80029404:	f0 09 18 00 	cp.b	r9,r8
80029408:	e0 8b 00 09 	brhi	8002941a <spi_selectionMode+0x3a>
8002940c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029410:	30 18       	mov	r8,1
80029412:	f0 09 18 00 	cp.b	r9,r8
80029416:	e0 88 00 04 	brls	8002941e <spi_selectionMode+0x3e>
8002941a:	30 28       	mov	r8,2
8002941c:	c2 88       	rjmp	8002946c <spi_selectionMode+0x8c>
8002941e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029422:	70 18       	ld.w	r8,r8[0x4]
80029424:	ef 48 ff fc 	st.w	r7[-4],r8
80029428:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002942c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029430:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029438:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8002943c:	ef 48 ff fc 	st.w	r7[-4],r8
80029440:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029444:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029448:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002944c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029450:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029454:	ef 48 ff fc 	st.w	r7[-4],r8
80029458:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002945c:	ef 68 ff fc 	st.b	r7[-4],r8
80029460:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029468:	91 19       	st.w	r8[0x4],r9
8002946a:	30 08       	mov	r8,0
8002946c:	10 9c       	mov	r12,r8
8002946e:	2f bd       	sub	sp,-20
80029470:	e3 cd 80 80 	ldm	sp++,r7,pc

80029474 <spi_selectChip>:
80029474:	eb cd 40 80 	pushm	r7,lr
80029478:	1a 97       	mov	r7,sp
8002947a:	20 2d       	sub	sp,8
8002947c:	ef 4c ff fc 	st.w	r7[-4],r12
80029480:	16 98       	mov	r8,r11
80029482:	ef 68 ff f8 	st.b	r7[-8],r8
80029486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002948a:	70 18       	ld.w	r8,r8[0x4]
8002948c:	10 99       	mov	r9,r8
8002948e:	ea 19 00 0f 	orh	r9,0xf
80029492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029496:	91 19       	st.w	r8[0x4],r9
80029498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002949c:	70 18       	ld.w	r8,r8[0x4]
8002949e:	e2 18 00 04 	andl	r8,0x4,COH
800294a2:	c1 90       	breq	800294d4 <spi_selectChip+0x60>
800294a4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800294a8:	30 e8       	mov	r8,14
800294aa:	f0 09 18 00 	cp.b	r9,r8
800294ae:	e0 88 00 04 	brls	800294b6 <spi_selectChip+0x42>
800294b2:	30 28       	mov	r8,2
800294b4:	c2 88       	rjmp	80029504 <spi_selectChip+0x90>
800294b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294ba:	70 19       	ld.w	r9,r8[0x4]
800294bc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800294c0:	b1 68       	lsl	r8,0x10
800294c2:	ea 18 ff f0 	orh	r8,0xfff0
800294c6:	e8 18 ff ff 	orl	r8,0xffff
800294ca:	10 69       	and	r9,r8
800294cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294d0:	91 19       	st.w	r8[0x4],r9
800294d2:	c1 88       	rjmp	80029502 <spi_selectChip+0x8e>
800294d4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800294d8:	30 38       	mov	r8,3
800294da:	f0 09 18 00 	cp.b	r9,r8
800294de:	e0 88 00 04 	brls	800294e6 <spi_selectChip+0x72>
800294e2:	30 28       	mov	r8,2
800294e4:	c1 08       	rjmp	80029504 <spi_selectChip+0x90>
800294e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294ea:	70 19       	ld.w	r9,r8[0x4]
800294ec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800294f0:	2f 08       	sub	r8,-16
800294f2:	30 1a       	mov	r10,1
800294f4:	f4 08 09 48 	lsl	r8,r10,r8
800294f8:	5c d8       	com	r8
800294fa:	10 69       	and	r9,r8
800294fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029500:	91 19       	st.w	r8[0x4],r9
80029502:	30 08       	mov	r8,0
80029504:	10 9c       	mov	r12,r8
80029506:	2f ed       	sub	sp,-8
80029508:	e3 cd 80 80 	ldm	sp++,r7,pc

8002950c <spi_unselectChip>:
8002950c:	eb cd 40 80 	pushm	r7,lr
80029510:	1a 97       	mov	r7,sp
80029512:	20 3d       	sub	sp,12
80029514:	ef 4c ff f8 	st.w	r7[-8],r12
80029518:	16 98       	mov	r8,r11
8002951a:	ef 68 ff f4 	st.b	r7[-12],r8
8002951e:	e0 68 3a 98 	mov	r8,15000
80029522:	ef 48 ff fc 	st.w	r7[-4],r8
80029526:	c0 f8       	rjmp	80029544 <spi_unselectChip+0x38>
80029528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002952c:	58 08       	cp.w	r8,0
8002952e:	5f 08       	sreq	r8
80029530:	5c 58       	castu.b	r8
80029532:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029536:	20 19       	sub	r9,1
80029538:	ef 49 ff fc 	st.w	r7[-4],r9
8002953c:	58 08       	cp.w	r8,0
8002953e:	c0 30       	breq	80029544 <spi_unselectChip+0x38>
80029540:	30 18       	mov	r8,1
80029542:	c1 68       	rjmp	8002956e <spi_unselectChip+0x62>
80029544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029548:	70 48       	ld.w	r8,r8[0x10]
8002954a:	e2 18 02 00 	andl	r8,0x200,COH
8002954e:	ce d0       	breq	80029528 <spi_unselectChip+0x1c>
80029550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029554:	70 18       	ld.w	r8,r8[0x4]
80029556:	10 99       	mov	r9,r8
80029558:	ea 19 00 0f 	orh	r9,0xf
8002955c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029560:	91 19       	st.w	r8[0x4],r9
80029562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029566:	fc 19 01 00 	movh	r9,0x100
8002956a:	91 09       	st.w	r8[0x0],r9
8002956c:	30 08       	mov	r8,0
8002956e:	10 9c       	mov	r12,r8
80029570:	2f dd       	sub	sp,-12
80029572:	e3 cd 80 80 	ldm	sp++,r7,pc

80029576 <spi_setupChipReg>:
80029576:	eb cd 40 c0 	pushm	r6-r7,lr
8002957a:	1a 97       	mov	r7,sp
8002957c:	20 5d       	sub	sp,20
8002957e:	4e 06       	lddpc	r6,800296fc <spi_setupChipReg+0x186>
80029580:	1e 26       	rsub	r6,pc
80029582:	ef 4c ff f4 	st.w	r7[-12],r12
80029586:	ef 4b ff f0 	st.w	r7[-16],r11
8002958a:	ef 4a ff ec 	st.w	r7[-20],r10
8002958e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029592:	f1 39 00 0c 	ld.ub	r9,r8[12]
80029596:	30 38       	mov	r8,3
80029598:	f0 09 18 00 	cp.b	r9,r8
8002959c:	e0 8b 00 1d 	brhi	800295d6 <spi_setupChipReg+0x60>
800295a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295a4:	f1 39 00 0b 	ld.ub	r9,r8[11]
800295a8:	30 18       	mov	r8,1
800295aa:	f0 09 18 00 	cp.b	r9,r8
800295ae:	e0 8b 00 14 	brhi	800295d6 <spi_setupChipReg+0x60>
800295b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295b6:	f1 39 00 08 	ld.ub	r9,r8[8]
800295ba:	30 78       	mov	r8,7
800295bc:	f0 09 18 00 	cp.b	r9,r8
800295c0:	e0 88 00 0b 	brls	800295d6 <spi_setupChipReg+0x60>
800295c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295c8:	f1 39 00 08 	ld.ub	r9,r8[8]
800295cc:	31 08       	mov	r8,16
800295ce:	f0 09 18 00 	cp.b	r9,r8
800295d2:	e0 88 00 04 	brls	800295da <spi_setupChipReg+0x64>
800295d6:	30 28       	mov	r8,2
800295d8:	c8 d8       	rjmp	800296f2 <spi_setupChipReg+0x17c>
800295da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295de:	70 18       	ld.w	r8,r8[0x4]
800295e0:	ee fb ff ec 	ld.w	r11,r7[-20]
800295e4:	10 9c       	mov	r12,r8
800295e6:	f0 16 01 24 	mcall	r6[1168]
800295ea:	18 98       	mov	r8,r12
800295ec:	ef 48 ff fc 	st.w	r7[-4],r8
800295f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295f4:	58 08       	cp.w	r8,0
800295f6:	c0 34       	brge	800295fc <spi_setupChipReg+0x86>
800295f8:	30 28       	mov	r8,2
800295fa:	c7 c8       	rjmp	800296f2 <spi_setupChipReg+0x17c>
800295fc:	30 08       	mov	r8,0
800295fe:	ef 48 ff f8 	st.w	r7[-8],r8
80029602:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029606:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002960a:	a1 98       	lsr	r8,0x1
8002960c:	5c 58       	castu.b	r8
8002960e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029612:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002961a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002961e:	ef 48 ff f8 	st.w	r7[-8],r8
80029622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029626:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002962a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002962e:	5f 08       	sreq	r8
80029630:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029638:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8002963c:	ef 48 ff f8 	st.w	r7[-8],r8
80029640:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029644:	f1 38 00 0b 	ld.ub	r8,r8[11]
80029648:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002964c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029650:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029654:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80029658:	ef 48 ff f8 	st.w	r7[-8],r8
8002965c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029660:	f1 38 00 08 	ld.ub	r8,r8[8]
80029664:	20 88       	sub	r8,8
80029666:	5c 58       	castu.b	r8
80029668:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002966c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029670:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029674:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80029678:	ef 48 ff f8 	st.w	r7[-8],r8
8002967c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029680:	5c 58       	castu.b	r8
80029682:	ef 68 ff fa 	st.b	r7[-6],r8
80029686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002968a:	f1 38 00 09 	ld.ub	r8,r8[9]
8002968e:	ef 68 ff f9 	st.b	r7[-7],r8
80029692:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029696:	f1 38 00 0a 	ld.ub	r8,r8[10]
8002969a:	ef 68 ff f8 	st.b	r7[-8],r8
8002969e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800296a2:	11 88       	ld.ub	r8,r8[0x0]
800296a4:	58 18       	cp.w	r8,1
800296a6:	c1 10       	breq	800296c8 <spi_setupChipReg+0x152>
800296a8:	e0 89 00 05 	brgt	800296b2 <spi_setupChipReg+0x13c>
800296ac:	58 08       	cp.w	r8,0
800296ae:	c0 70       	breq	800296bc <spi_setupChipReg+0x146>
800296b0:	c1 e8       	rjmp	800296ec <spi_setupChipReg+0x176>
800296b2:	58 28       	cp.w	r8,2
800296b4:	c1 00       	breq	800296d4 <spi_setupChipReg+0x15e>
800296b6:	58 38       	cp.w	r8,3
800296b8:	c1 40       	breq	800296e0 <spi_setupChipReg+0x16a>
800296ba:	c1 98       	rjmp	800296ec <spi_setupChipReg+0x176>
800296bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296c4:	91 c9       	st.w	r8[0x30],r9
800296c6:	c1 58       	rjmp	800296f0 <spi_setupChipReg+0x17a>
800296c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296d0:	91 d9       	st.w	r8[0x34],r9
800296d2:	c0 f8       	rjmp	800296f0 <spi_setupChipReg+0x17a>
800296d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296dc:	91 e9       	st.w	r8[0x38],r9
800296de:	c0 98       	rjmp	800296f0 <spi_setupChipReg+0x17a>
800296e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296e8:	91 f9       	st.w	r8[0x3c],r9
800296ea:	c0 38       	rjmp	800296f0 <spi_setupChipReg+0x17a>
800296ec:	30 28       	mov	r8,2
800296ee:	c0 28       	rjmp	800296f2 <spi_setupChipReg+0x17c>
800296f0:	30 08       	mov	r8,0
800296f2:	10 9c       	mov	r12,r8
800296f4:	2f bd       	sub	sp,-20
800296f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800296fa:	00 00       	add	r0,r0
800296fc:	80 02       	ld.sh	r2,r0[0x0]
800296fe:	94 04       	ld.sh	r4,r10[0x0]

80029700 <spi_enable>:
80029700:	eb cd 40 80 	pushm	r7,lr
80029704:	1a 97       	mov	r7,sp
80029706:	20 1d       	sub	sp,4
80029708:	ef 4c ff fc 	st.w	r7[-4],r12
8002970c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029710:	30 19       	mov	r9,1
80029712:	91 09       	st.w	r8[0x0],r9
80029714:	2f fd       	sub	sp,-4
80029716:	e3 cd 80 80 	ldm	sp++,r7,pc

8002971a <spi_disable>:
8002971a:	eb cd 40 80 	pushm	r7,lr
8002971e:	1a 97       	mov	r7,sp
80029720:	20 1d       	sub	sp,4
80029722:	ef 4c ff fc 	st.w	r7[-4],r12
80029726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002972a:	30 29       	mov	r9,2
8002972c:	91 09       	st.w	r8[0x0],r9
8002972e:	2f fd       	sub	sp,-4
80029730:	e3 cd 80 80 	ldm	sp++,r7,pc

80029734 <spi_is_enabled>:
80029734:	eb cd 40 80 	pushm	r7,lr
80029738:	1a 97       	mov	r7,sp
8002973a:	20 1d       	sub	sp,4
8002973c:	ef 4c ff fc 	st.w	r7[-4],r12
80029740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029744:	70 48       	ld.w	r8,r8[0x10]
80029746:	e6 18 00 01 	andh	r8,0x1,COH
8002974a:	5f 18       	srne	r8
8002974c:	10 9c       	mov	r12,r8
8002974e:	2f fd       	sub	sp,-4
80029750:	e3 cd 80 80 	ldm	sp++,r7,pc

80029754 <spi_writeRegisterEmptyCheck>:
80029754:	eb cd 40 80 	pushm	r7,lr
80029758:	1a 97       	mov	r7,sp
8002975a:	20 1d       	sub	sp,4
8002975c:	ef 4c ff fc 	st.w	r7[-4],r12
80029760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029764:	70 48       	ld.w	r8,r8[0x10]
80029766:	e2 18 00 02 	andl	r8,0x2,COH
8002976a:	5f 18       	srne	r8
8002976c:	10 9c       	mov	r12,r8
8002976e:	2f fd       	sub	sp,-4
80029770:	e3 cd 80 80 	ldm	sp++,r7,pc

80029774 <spi_write>:
80029774:	eb cd 40 80 	pushm	r7,lr
80029778:	1a 97       	mov	r7,sp
8002977a:	20 3d       	sub	sp,12
8002977c:	ef 4c ff f8 	st.w	r7[-8],r12
80029780:	16 98       	mov	r8,r11
80029782:	ef 58 ff f4 	st.h	r7[-12],r8
80029786:	e0 68 3a 98 	mov	r8,15000
8002978a:	ef 48 ff fc 	st.w	r7[-4],r8
8002978e:	c0 f8       	rjmp	800297ac <spi_write+0x38>
80029790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029794:	58 08       	cp.w	r8,0
80029796:	5f 08       	sreq	r8
80029798:	5c 58       	castu.b	r8
8002979a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002979e:	20 19       	sub	r9,1
800297a0:	ef 49 ff fc 	st.w	r7[-4],r9
800297a4:	58 08       	cp.w	r8,0
800297a6:	c0 30       	breq	800297ac <spi_write+0x38>
800297a8:	30 18       	mov	r8,1
800297aa:	c0 d8       	rjmp	800297c4 <spi_write+0x50>
800297ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800297b0:	70 48       	ld.w	r8,r8[0x10]
800297b2:	e2 18 00 02 	andl	r8,0x2,COH
800297b6:	ce d0       	breq	80029790 <spi_write+0x1c>
800297b8:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800297bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800297c0:	91 39       	st.w	r8[0xc],r9
800297c2:	30 08       	mov	r8,0
800297c4:	10 9c       	mov	r12,r8
800297c6:	2f dd       	sub	sp,-12
800297c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800297cc <spi_variableSlaveWrite>:
800297cc:	eb cd 40 80 	pushm	r7,lr
800297d0:	1a 97       	mov	r7,sp
800297d2:	20 5d       	sub	sp,20
800297d4:	ef 4c ff f8 	st.w	r7[-8],r12
800297d8:	12 98       	mov	r8,r9
800297da:	16 99       	mov	r9,r11
800297dc:	ef 59 ff f4 	st.h	r7[-12],r9
800297e0:	14 99       	mov	r9,r10
800297e2:	ef 69 ff f0 	st.b	r7[-16],r9
800297e6:	ef 68 ff ec 	st.b	r7[-20],r8
800297ea:	e0 68 3a 98 	mov	r8,15000
800297ee:	ef 48 ff fc 	st.w	r7[-4],r8
800297f2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800297f6:	30 e8       	mov	r8,14
800297f8:	f0 09 18 00 	cp.b	r9,r8
800297fc:	e0 8b 00 09 	brhi	8002980e <spi_variableSlaveWrite+0x42>
80029800:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029804:	30 18       	mov	r8,1
80029806:	f0 09 18 00 	cp.b	r9,r8
8002980a:	e0 88 00 12 	brls	8002982e <spi_variableSlaveWrite+0x62>
8002980e:	30 28       	mov	r8,2
80029810:	c2 68       	rjmp	8002985c <spi_variableSlaveWrite+0x90>
80029812:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029816:	58 08       	cp.w	r8,0
80029818:	5f 08       	sreq	r8
8002981a:	5c 58       	castu.b	r8
8002981c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029820:	20 19       	sub	r9,1
80029822:	ef 49 ff fc 	st.w	r7[-4],r9
80029826:	58 08       	cp.w	r8,0
80029828:	c0 40       	breq	80029830 <spi_variableSlaveWrite+0x64>
8002982a:	30 18       	mov	r8,1
8002982c:	c1 88       	rjmp	8002985c <spi_variableSlaveWrite+0x90>
8002982e:	d7 03       	nop
80029830:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029834:	70 48       	ld.w	r8,r8[0x10]
80029836:	e2 18 00 02 	andl	r8,0x2,COH
8002983a:	ce c0       	breq	80029812 <spi_variableSlaveWrite+0x46>
8002983c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029840:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029844:	b1 68       	lsl	r8,0x10
80029846:	10 49       	or	r9,r8
80029848:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002984c:	b9 68       	lsl	r8,0x18
8002984e:	f3 e8 10 08 	or	r8,r9,r8
80029852:	10 99       	mov	r9,r8
80029854:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029858:	91 39       	st.w	r8[0xc],r9
8002985a:	30 08       	mov	r8,0
8002985c:	10 9c       	mov	r12,r8
8002985e:	2f bd       	sub	sp,-20
80029860:	e3 cd 80 80 	ldm	sp++,r7,pc

80029864 <spi_writeEndCheck>:
80029864:	eb cd 40 80 	pushm	r7,lr
80029868:	1a 97       	mov	r7,sp
8002986a:	20 1d       	sub	sp,4
8002986c:	ef 4c ff fc 	st.w	r7[-4],r12
80029870:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029874:	70 48       	ld.w	r8,r8[0x10]
80029876:	e2 18 02 00 	andl	r8,0x200,COH
8002987a:	5f 18       	srne	r8
8002987c:	10 9c       	mov	r12,r8
8002987e:	2f fd       	sub	sp,-4
80029880:	e3 cd 80 80 	ldm	sp++,r7,pc

80029884 <spi_readRegisterFullCheck>:
80029884:	eb cd 40 80 	pushm	r7,lr
80029888:	1a 97       	mov	r7,sp
8002988a:	20 1d       	sub	sp,4
8002988c:	ef 4c ff fc 	st.w	r7[-4],r12
80029890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029894:	70 48       	ld.w	r8,r8[0x10]
80029896:	5c 58       	castu.b	r8
80029898:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002989c:	10 9c       	mov	r12,r8
8002989e:	2f fd       	sub	sp,-4
800298a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800298a4 <spi_read>:
800298a4:	eb cd 40 80 	pushm	r7,lr
800298a8:	1a 97       	mov	r7,sp
800298aa:	20 3d       	sub	sp,12
800298ac:	ef 4c ff f8 	st.w	r7[-8],r12
800298b0:	ef 4b ff f4 	st.w	r7[-12],r11
800298b4:	e0 68 3a 98 	mov	r8,15000
800298b8:	ef 48 ff fc 	st.w	r7[-4],r8
800298bc:	c0 f8       	rjmp	800298da <spi_read+0x36>
800298be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298c2:	58 08       	cp.w	r8,0
800298c4:	5f 08       	sreq	r8
800298c6:	5c 58       	castu.b	r8
800298c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800298cc:	20 19       	sub	r9,1
800298ce:	ef 49 ff fc 	st.w	r7[-4],r9
800298d2:	58 08       	cp.w	r8,0
800298d4:	c0 30       	breq	800298da <spi_read+0x36>
800298d6:	30 18       	mov	r8,1
800298d8:	c1 18       	rjmp	800298fa <spi_read+0x56>
800298da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298de:	70 48       	ld.w	r8,r8[0x10]
800298e0:	e2 18 02 01 	andl	r8,0x201,COH
800298e4:	e0 48 02 01 	cp.w	r8,513
800298e8:	ce b1       	brne	800298be <spi_read+0x1a>
800298ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298ee:	70 28       	ld.w	r8,r8[0x8]
800298f0:	5c 88       	casts.h	r8
800298f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800298f6:	b2 08       	st.h	r9[0x0],r8
800298f8:	30 08       	mov	r8,0
800298fa:	10 9c       	mov	r12,r8
800298fc:	2f dd       	sub	sp,-12
800298fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80029902 <spi_getStatus>:
80029902:	eb cd 40 80 	pushm	r7,lr
80029906:	1a 97       	mov	r7,sp
80029908:	20 3d       	sub	sp,12
8002990a:	ef 4c ff f4 	st.w	r7[-12],r12
8002990e:	30 08       	mov	r8,0
80029910:	ef 48 ff f8 	st.w	r7[-8],r8
80029914:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029918:	70 48       	ld.w	r8,r8[0x10]
8002991a:	ef 48 ff fc 	st.w	r7[-4],r8
8002991e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029922:	e2 18 00 08 	andl	r8,0x8,COH
80029926:	c0 40       	breq	8002992e <spi_getStatus+0x2c>
80029928:	30 38       	mov	r8,3
8002992a:	ef 48 ff f8 	st.w	r7[-8],r8
8002992e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029932:	e2 18 00 04 	andl	r8,0x4,COH
80029936:	c0 60       	breq	80029942 <spi_getStatus+0x40>
80029938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002993c:	2f c8       	sub	r8,-4
8002993e:	ef 48 ff f8 	st.w	r7[-8],r8
80029942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029946:	58 78       	cp.w	r8,7
80029948:	c0 31       	brne	8002994e <spi_getStatus+0x4c>
8002994a:	30 58       	mov	r8,5
8002994c:	c0 b8       	rjmp	80029962 <spi_getStatus+0x60>
8002994e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029952:	58 08       	cp.w	r8,0
80029954:	e0 8a 00 06 	brle	80029960 <spi_getStatus+0x5e>
80029958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002995c:	5c 58       	castu.b	r8
8002995e:	c0 28       	rjmp	80029962 <spi_getStatus+0x60>
80029960:	30 08       	mov	r8,0
80029962:	10 9c       	mov	r12,r8
80029964:	2f dd       	sub	sp,-12
80029966:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8002996c <cpu_irq_save>:
8002996c:	eb cd 40 80 	pushm	r7,lr
80029970:	1a 97       	mov	r7,sp
80029972:	20 1d       	sub	sp,4
80029974:	e1 b8 00 00 	mfsr	r8,0x0
80029978:	ef 48 ff fc 	st.w	r7[-4],r8
8002997c:	d3 03       	ssrf	0x10
8002997e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029982:	10 9c       	mov	r12,r8
80029984:	2f fd       	sub	sp,-4
80029986:	e3 cd 80 80 	ldm	sp++,r7,pc

8002998a <cpu_irq_is_enabled_flags>:
8002998a:	eb cd 40 80 	pushm	r7,lr
8002998e:	1a 97       	mov	r7,sp
80029990:	20 1d       	sub	sp,4
80029992:	ef 4c ff fc 	st.w	r7[-4],r12
80029996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002999a:	e6 18 00 01 	andh	r8,0x1,COH
8002999e:	5f 08       	sreq	r8
800299a0:	5c 58       	castu.b	r8
800299a2:	10 9c       	mov	r12,r8
800299a4:	2f fd       	sub	sp,-4
800299a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800299aa <cpu_irq_restore>:
800299aa:	eb cd 40 80 	pushm	r7,lr
800299ae:	1a 97       	mov	r7,sp
800299b0:	20 1d       	sub	sp,4
800299b2:	ef 4c ff fc 	st.w	r7[-4],r12
800299b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299ba:	e3 b8 00 00 	mtsr	0x0,r8
800299be:	2f fd       	sub	sp,-4
800299c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800299c4 <twim_master_interrupt_handler>:
800299c4:	eb cd 40 c0 	pushm	r6-r7,lr
800299c8:	1a 97       	mov	r7,sp
800299ca:	20 1d       	sub	sp,4
800299cc:	4d 96       	lddpc	r6,80029b30 <twim_master_interrupt_handler+0x16c>
800299ce:	1e 26       	rsub	r6,pc
800299d0:	ec f8 00 40 	ld.w	r8,r6[64]
800299d4:	70 08       	ld.w	r8,r8[0x0]
800299d6:	70 79       	ld.w	r9,r8[0x1c]
800299d8:	ec f8 01 08 	ld.w	r8,r6[264]
800299dc:	70 08       	ld.w	r8,r8[0x0]
800299de:	f3 e8 00 08 	and	r8,r9,r8
800299e2:	ef 48 ff fc 	st.w	r7[-4],r8
800299e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299ea:	e2 18 07 00 	andl	r8,0x700,COH
800299ee:	c2 30       	breq	80029a34 <twim_master_interrupt_handler+0x70>
800299f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299f4:	e2 18 03 00 	andl	r8,0x300,COH
800299f8:	c0 30       	breq	800299fe <twim_master_interrupt_handler+0x3a>
800299fa:	3f c8       	mov	r8,-4
800299fc:	c0 28       	rjmp	80029a00 <twim_master_interrupt_handler+0x3c>
800299fe:	3f e8       	mov	r8,-2
80029a00:	ec f9 00 7c 	ld.w	r9,r6[124]
80029a04:	93 08       	st.w	r9[0x0],r8
80029a06:	ec f8 00 40 	ld.w	r8,r6[64]
80029a0a:	70 09       	ld.w	r9,r8[0x0]
80029a0c:	72 38       	ld.w	r8,r9[0xc]
80029a0e:	30 0a       	mov	r10,0
80029a10:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029a14:	93 38       	st.w	r9[0xc],r8
80029a16:	ec f8 00 40 	ld.w	r8,r6[64]
80029a1a:	70 08       	ld.w	r8,r8[0x0]
80029a1c:	3f f9       	mov	r9,-1
80029a1e:	91 b9       	st.w	r8[0x2c],r9
80029a20:	ec f8 00 40 	ld.w	r8,r6[64]
80029a24:	70 08       	ld.w	r8,r8[0x0]
80029a26:	3f f9       	mov	r9,-1
80029a28:	91 99       	st.w	r8[0x24],r9
80029a2a:	ec f9 00 bc 	ld.w	r9,r6[188]
80029a2e:	30 08       	mov	r8,0
80029a30:	b2 88       	st.b	r9[0x0],r8
80029a32:	c7 a8       	rjmp	80029b26 <twim_master_interrupt_handler+0x162>
80029a34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029a3c:	5c 58       	castu.b	r8
80029a3e:	c2 d0       	breq	80029a98 <twim_master_interrupt_handler+0xd4>
80029a40:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a44:	70 09       	ld.w	r9,r8[0x0]
80029a46:	ec f8 00 40 	ld.w	r8,r6[64]
80029a4a:	70 08       	ld.w	r8,r8[0x0]
80029a4c:	70 58       	ld.w	r8,r8[0x14]
80029a4e:	5c 58       	castu.b	r8
80029a50:	b2 88       	st.b	r9[0x0],r8
80029a52:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a56:	70 08       	ld.w	r8,r8[0x0]
80029a58:	f0 c9 ff ff 	sub	r9,r8,-1
80029a5c:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a60:	91 09       	st.w	r8[0x0],r9
80029a62:	ec f8 01 58 	ld.w	r8,r6[344]
80029a66:	70 08       	ld.w	r8,r8[0x0]
80029a68:	f0 c9 00 01 	sub	r9,r8,1
80029a6c:	ec f8 01 58 	ld.w	r8,r6[344]
80029a70:	91 09       	st.w	r8[0x0],r9
80029a72:	ec f8 01 58 	ld.w	r8,r6[344]
80029a76:	70 08       	ld.w	r8,r8[0x0]
80029a78:	58 08       	cp.w	r8,0
80029a7a:	c5 61       	brne	80029b26 <twim_master_interrupt_handler+0x162>
80029a7c:	ec f8 00 40 	ld.w	r8,r6[64]
80029a80:	70 08       	ld.w	r8,r8[0x0]
80029a82:	30 19       	mov	r9,1
80029a84:	91 99       	st.w	r8[0x24],r9
80029a86:	ec f9 00 bc 	ld.w	r9,r6[188]
80029a8a:	30 08       	mov	r8,0
80029a8c:	b2 88       	st.b	r9[0x0],r8
80029a8e:	ec f8 00 7c 	ld.w	r8,r6[124]
80029a92:	30 19       	mov	r9,1
80029a94:	91 09       	st.w	r8[0x0],r9
80029a96:	c4 88       	rjmp	80029b26 <twim_master_interrupt_handler+0x162>
80029a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a9c:	e2 18 00 02 	andl	r8,0x2,COH
80029aa0:	c4 30       	breq	80029b26 <twim_master_interrupt_handler+0x162>
80029aa2:	ec f8 00 88 	ld.w	r8,r6[136]
80029aa6:	70 08       	ld.w	r8,r8[0x0]
80029aa8:	58 08       	cp.w	r8,0
80029aaa:	c0 b1       	brne	80029ac0 <twim_master_interrupt_handler+0xfc>
80029aac:	ec f8 00 40 	ld.w	r8,r6[64]
80029ab0:	70 08       	ld.w	r8,r8[0x0]
80029ab2:	30 29       	mov	r9,2
80029ab4:	91 99       	st.w	r8[0x24],r9
80029ab6:	ec f9 00 bc 	ld.w	r9,r6[188]
80029aba:	30 08       	mov	r8,0
80029abc:	b2 88       	st.b	r9[0x0],r8
80029abe:	c3 48       	rjmp	80029b26 <twim_master_interrupt_handler+0x162>
80029ac0:	ec f8 00 40 	ld.w	r8,r6[64]
80029ac4:	70 0a       	ld.w	r10,r8[0x0]
80029ac6:	ec f8 00 90 	ld.w	r8,r6[144]
80029aca:	70 08       	ld.w	r8,r8[0x0]
80029acc:	11 89       	ld.ub	r9,r8[0x0]
80029ace:	5c 59       	castu.b	r9
80029ad0:	95 69       	st.w	r10[0x18],r9
80029ad2:	f0 c9 ff ff 	sub	r9,r8,-1
80029ad6:	ec f8 00 90 	ld.w	r8,r6[144]
80029ada:	91 09       	st.w	r8[0x0],r9
80029adc:	ec f8 00 88 	ld.w	r8,r6[136]
80029ae0:	70 08       	ld.w	r8,r8[0x0]
80029ae2:	f0 c9 00 01 	sub	r9,r8,1
80029ae6:	ec f8 00 88 	ld.w	r8,r6[136]
80029aea:	91 09       	st.w	r8[0x0],r9
80029aec:	ec f8 00 88 	ld.w	r8,r6[136]
80029af0:	70 08       	ld.w	r8,r8[0x0]
80029af2:	58 08       	cp.w	r8,0
80029af4:	c1 91       	brne	80029b26 <twim_master_interrupt_handler+0x162>
80029af6:	ec f8 00 bc 	ld.w	r8,r6[188]
80029afa:	11 88       	ld.ub	r8,r8[0x0]
80029afc:	5c 58       	castu.b	r8
80029afe:	c1 40       	breq	80029b26 <twim_master_interrupt_handler+0x162>
80029b00:	ec f9 00 bc 	ld.w	r9,r6[188]
80029b04:	30 08       	mov	r8,0
80029b06:	b2 88       	st.b	r9[0x0],r8
80029b08:	ec f8 02 0c 	ld.w	r8,r6[524]
80029b0c:	70 08       	ld.w	r8,r8[0x0]
80029b0e:	70 49       	ld.w	r9,r8[0x10]
80029b10:	ec f8 00 88 	ld.w	r8,r6[136]
80029b14:	91 09       	st.w	r8[0x0],r9
80029b16:	ec f8 02 0c 	ld.w	r8,r6[524]
80029b1a:	70 08       	ld.w	r8,r8[0x0]
80029b1c:	70 38       	ld.w	r8,r8[0xc]
80029b1e:	10 99       	mov	r9,r8
80029b20:	ec f8 00 90 	ld.w	r8,r6[144]
80029b24:	91 09       	st.w	r8[0x0],r9
80029b26:	2f fd       	sub	sp,-4
80029b28:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029b2c:	d6 03       	rete
80029b2e:	00 00       	add	r0,r0
80029b30:	80 02       	ld.sh	r2,r0[0x0]
80029b32:	98 52       	ld.sh	r2,r12[0xa]

80029b34 <twim_master_interrupt_handler2>:
80029b34:	eb cd 40 c0 	pushm	r6-r7,lr
80029b38:	1a 97       	mov	r7,sp
80029b3a:	20 1d       	sub	sp,4
80029b3c:	4d 76       	lddpc	r6,80029c98 <twim_master_interrupt_handler2+0x164>
80029b3e:	1e 26       	rsub	r6,pc
80029b40:	ec f8 00 40 	ld.w	r8,r6[64]
80029b44:	70 08       	ld.w	r8,r8[0x0]
80029b46:	70 79       	ld.w	r9,r8[0x1c]
80029b48:	ec f8 01 08 	ld.w	r8,r6[264]
80029b4c:	70 08       	ld.w	r8,r8[0x0]
80029b4e:	f3 e8 00 08 	and	r8,r9,r8
80029b52:	ef 48 ff fc 	st.w	r7[-4],r8
80029b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b5a:	e2 18 07 00 	andl	r8,0x700,COH
80029b5e:	c2 30       	breq	80029ba4 <twim_master_interrupt_handler2+0x70>
80029b60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b64:	e2 18 03 00 	andl	r8,0x300,COH
80029b68:	c0 30       	breq	80029b6e <twim_master_interrupt_handler2+0x3a>
80029b6a:	3f c8       	mov	r8,-4
80029b6c:	c0 28       	rjmp	80029b70 <twim_master_interrupt_handler2+0x3c>
80029b6e:	3f e8       	mov	r8,-2
80029b70:	ec f9 00 7c 	ld.w	r9,r6[124]
80029b74:	93 08       	st.w	r9[0x0],r8
80029b76:	ec f8 00 40 	ld.w	r8,r6[64]
80029b7a:	70 09       	ld.w	r9,r8[0x0]
80029b7c:	72 38       	ld.w	r8,r9[0xc]
80029b7e:	30 0a       	mov	r10,0
80029b80:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029b84:	93 38       	st.w	r9[0xc],r8
80029b86:	ec f8 00 40 	ld.w	r8,r6[64]
80029b8a:	70 08       	ld.w	r8,r8[0x0]
80029b8c:	3f f9       	mov	r9,-1
80029b8e:	91 b9       	st.w	r8[0x2c],r9
80029b90:	ec f8 00 40 	ld.w	r8,r6[64]
80029b94:	70 08       	ld.w	r8,r8[0x0]
80029b96:	3f f9       	mov	r9,-1
80029b98:	91 99       	st.w	r8[0x24],r9
80029b9a:	ec f9 00 bc 	ld.w	r9,r6[188]
80029b9e:	30 08       	mov	r8,0
80029ba0:	b2 88       	st.b	r9[0x0],r8
80029ba2:	c7 68       	rjmp	80029c8e <twim_master_interrupt_handler2+0x15a>
80029ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ba8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029bac:	5c 58       	castu.b	r8
80029bae:	c2 90       	breq	80029c00 <twim_master_interrupt_handler2+0xcc>
80029bb0:	ec f8 00 c0 	ld.w	r8,r6[192]
80029bb4:	70 09       	ld.w	r9,r8[0x0]
80029bb6:	ec f8 00 40 	ld.w	r8,r6[64]
80029bba:	70 08       	ld.w	r8,r8[0x0]
80029bbc:	70 58       	ld.w	r8,r8[0x14]
80029bbe:	5c 58       	castu.b	r8
80029bc0:	b2 88       	st.b	r9[0x0],r8
80029bc2:	ec f8 00 c0 	ld.w	r8,r6[192]
80029bc6:	70 08       	ld.w	r8,r8[0x0]
80029bc8:	f0 c9 ff ff 	sub	r9,r8,-1
80029bcc:	ec f8 00 c0 	ld.w	r8,r6[192]
80029bd0:	91 09       	st.w	r8[0x0],r9
80029bd2:	ec f8 01 58 	ld.w	r8,r6[344]
80029bd6:	70 08       	ld.w	r8,r8[0x0]
80029bd8:	f0 c9 00 01 	sub	r9,r8,1
80029bdc:	ec f8 01 58 	ld.w	r8,r6[344]
80029be0:	91 09       	st.w	r8[0x0],r9
80029be2:	ec f8 01 58 	ld.w	r8,r6[344]
80029be6:	70 08       	ld.w	r8,r8[0x0]
80029be8:	58 08       	cp.w	r8,0
80029bea:	c5 21       	brne	80029c8e <twim_master_interrupt_handler2+0x15a>
80029bec:	ec f8 00 40 	ld.w	r8,r6[64]
80029bf0:	70 08       	ld.w	r8,r8[0x0]
80029bf2:	30 19       	mov	r9,1
80029bf4:	91 99       	st.w	r8[0x24],r9
80029bf6:	ec f9 00 bc 	ld.w	r9,r6[188]
80029bfa:	30 08       	mov	r8,0
80029bfc:	b2 88       	st.b	r9[0x0],r8
80029bfe:	c4 88       	rjmp	80029c8e <twim_master_interrupt_handler2+0x15a>
80029c00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c04:	e2 18 00 02 	andl	r8,0x2,COH
80029c08:	c4 30       	breq	80029c8e <twim_master_interrupt_handler2+0x15a>
80029c0a:	ec f8 00 88 	ld.w	r8,r6[136]
80029c0e:	70 08       	ld.w	r8,r8[0x0]
80029c10:	58 08       	cp.w	r8,0
80029c12:	c0 b1       	brne	80029c28 <twim_master_interrupt_handler2+0xf4>
80029c14:	ec f8 00 40 	ld.w	r8,r6[64]
80029c18:	70 08       	ld.w	r8,r8[0x0]
80029c1a:	30 29       	mov	r9,2
80029c1c:	91 99       	st.w	r8[0x24],r9
80029c1e:	ec f9 00 bc 	ld.w	r9,r6[188]
80029c22:	30 08       	mov	r8,0
80029c24:	b2 88       	st.b	r9[0x0],r8
80029c26:	c3 48       	rjmp	80029c8e <twim_master_interrupt_handler2+0x15a>
80029c28:	ec f8 00 40 	ld.w	r8,r6[64]
80029c2c:	70 0a       	ld.w	r10,r8[0x0]
80029c2e:	ec f8 00 90 	ld.w	r8,r6[144]
80029c32:	70 08       	ld.w	r8,r8[0x0]
80029c34:	11 89       	ld.ub	r9,r8[0x0]
80029c36:	5c 59       	castu.b	r9
80029c38:	95 69       	st.w	r10[0x18],r9
80029c3a:	f0 c9 ff ff 	sub	r9,r8,-1
80029c3e:	ec f8 00 90 	ld.w	r8,r6[144]
80029c42:	91 09       	st.w	r8[0x0],r9
80029c44:	ec f8 00 88 	ld.w	r8,r6[136]
80029c48:	70 08       	ld.w	r8,r8[0x0]
80029c4a:	f0 c9 00 01 	sub	r9,r8,1
80029c4e:	ec f8 00 88 	ld.w	r8,r6[136]
80029c52:	91 09       	st.w	r8[0x0],r9
80029c54:	ec f8 00 88 	ld.w	r8,r6[136]
80029c58:	70 08       	ld.w	r8,r8[0x0]
80029c5a:	58 08       	cp.w	r8,0
80029c5c:	c1 91       	brne	80029c8e <twim_master_interrupt_handler2+0x15a>
80029c5e:	ec f8 00 bc 	ld.w	r8,r6[188]
80029c62:	11 88       	ld.ub	r8,r8[0x0]
80029c64:	5c 58       	castu.b	r8
80029c66:	c1 40       	breq	80029c8e <twim_master_interrupt_handler2+0x15a>
80029c68:	ec f9 00 bc 	ld.w	r9,r6[188]
80029c6c:	30 08       	mov	r8,0
80029c6e:	b2 88       	st.b	r9[0x0],r8
80029c70:	ec f8 02 0c 	ld.w	r8,r6[524]
80029c74:	70 08       	ld.w	r8,r8[0x0]
80029c76:	70 49       	ld.w	r9,r8[0x10]
80029c78:	ec f8 00 88 	ld.w	r8,r6[136]
80029c7c:	91 09       	st.w	r8[0x0],r9
80029c7e:	ec f8 02 0c 	ld.w	r8,r6[524]
80029c82:	70 08       	ld.w	r8,r8[0x0]
80029c84:	70 38       	ld.w	r8,r8[0xc]
80029c86:	10 99       	mov	r9,r8
80029c88:	ec f8 00 90 	ld.w	r8,r6[144]
80029c8c:	91 09       	st.w	r8[0x0],r9
80029c8e:	2f fd       	sub	sp,-4
80029c90:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029c94:	d6 03       	rete
80029c96:	00 00       	add	r0,r0
80029c98:	80 02       	ld.sh	r2,r0[0x0]
80029c9a:	99 c2       	st.w	r12[0x30],r2

80029c9c <twim_set_speed>:
80029c9c:	eb cd 40 80 	pushm	r7,lr
80029ca0:	1a 97       	mov	r7,sp
80029ca2:	20 5d       	sub	sp,20
80029ca4:	ef 4c ff f4 	st.w	r7[-12],r12
80029ca8:	ef 4b ff f0 	st.w	r7[-16],r11
80029cac:	ef 4a ff ec 	st.w	r7[-20],r10
80029cb0:	30 08       	mov	r8,0
80029cb2:	ef 68 ff ff 	st.b	r7[-1],r8
80029cb6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029cba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029cbe:	f0 09 0d 08 	divu	r8,r8,r9
80029cc2:	a1 98       	lsr	r8,0x1
80029cc4:	ef 48 ff f8 	st.w	r7[-8],r8
80029cc8:	c0 b8       	rjmp	80029cde <twim_set_speed+0x42>
80029cca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029cce:	2f f8       	sub	r8,-1
80029cd0:	ef 68 ff ff 	st.b	r7[-1],r8
80029cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cd8:	a1 98       	lsr	r8,0x1
80029cda:	ef 48 ff f8 	st.w	r7[-8],r8
80029cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ce2:	e0 48 00 ff 	cp.w	r8,255
80029ce6:	e0 88 00 09 	brls	80029cf8 <twim_set_speed+0x5c>
80029cea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029cee:	30 78       	mov	r8,7
80029cf0:	f0 09 18 00 	cp.b	r9,r8
80029cf4:	fe 98 ff eb 	brls	80029cca <twim_set_speed+0x2e>
80029cf8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029cfc:	30 78       	mov	r8,7
80029cfe:	f0 09 18 00 	cp.b	r9,r8
80029d02:	e0 88 00 04 	brls	80029d0a <twim_set_speed+0x6e>
80029d06:	3f 88       	mov	r8,-8
80029d08:	c1 a8       	rjmp	80029d3c <twim_set_speed+0xa0>
80029d0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d0e:	f0 09 16 01 	lsr	r9,r8,0x1
80029d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d16:	a1 98       	lsr	r8,0x1
80029d18:	ee fa ff f8 	ld.w	r10,r7[-8]
80029d1c:	f4 08 01 08 	sub	r8,r10,r8
80029d20:	a9 68       	lsl	r8,0x8
80029d22:	10 49       	or	r9,r8
80029d24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029d28:	bd 68       	lsl	r8,0x1c
80029d2a:	10 49       	or	r9,r8
80029d2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d30:	b1 68       	lsl	r8,0x10
80029d32:	10 49       	or	r9,r8
80029d34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d38:	91 19       	st.w	r8[0x4],r9
80029d3a:	30 08       	mov	r8,0
80029d3c:	10 9c       	mov	r12,r8
80029d3e:	2f bd       	sub	sp,-20
80029d40:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d44 <twim_master_init>:
80029d44:	eb cd 40 c0 	pushm	r6-r7,lr
80029d48:	1a 97       	mov	r7,sp
80029d4a:	20 4d       	sub	sp,16
80029d4c:	4c 06       	lddpc	r6,80029e4c <twim_master_init+0x108>
80029d4e:	1e 26       	rsub	r6,pc
80029d50:	ef 4c ff f4 	st.w	r7[-12],r12
80029d54:	ef 4b ff f0 	st.w	r7[-16],r11
80029d58:	e1 b8 00 00 	mfsr	r8,0x0
80029d5c:	10 9c       	mov	r12,r8
80029d5e:	c1 6e       	rcall	8002998a <cpu_irq_is_enabled_flags>
80029d60:	18 98       	mov	r8,r12
80029d62:	ef 68 ff fb 	st.b	r7[-5],r8
80029d66:	ec f8 00 7c 	ld.w	r8,r6[124]
80029d6a:	30 09       	mov	r9,0
80029d6c:	91 09       	st.w	r8[0x0],r9
80029d6e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80029d72:	30 08       	mov	r8,0
80029d74:	f0 09 18 00 	cp.b	r9,r8
80029d78:	c0 20       	breq	80029d7c <twim_master_init+0x38>
80029d7a:	d3 03       	ssrf	0x10
80029d7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d80:	3f f9       	mov	r9,-1
80029d82:	91 99       	st.w	r8[0x24],r9
80029d84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d88:	30 19       	mov	r9,1
80029d8a:	91 09       	st.w	r8[0x0],r9
80029d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d90:	e0 69 00 80 	mov	r9,128
80029d94:	91 09       	st.w	r8[0x0],r9
80029d96:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80029d9a:	30 08       	mov	r8,0
80029d9c:	f0 09 18 00 	cp.b	r9,r8
80029da0:	c0 20       	breq	80029da4 <twim_master_init+0x60>
80029da2:	d5 03       	csrf	0x10
80029da4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029da8:	3f f9       	mov	r9,-1
80029daa:	91 b9       	st.w	r8[0x2c],r9
80029dac:	fe b0 fd e0 	rcall	8002996c <cpu_irq_save>
80029db0:	18 98       	mov	r8,r12
80029db2:	ef 48 ff fc 	st.w	r7[-4],r8
80029db6:	30 1a       	mov	r10,1
80029db8:	e0 6b 03 20 	mov	r11,800
80029dbc:	fe cc 03 f8 	sub	r12,pc,1016
80029dc0:	f0 16 00 3b 	mcall	r6[236]
80029dc4:	30 1a       	mov	r10,1
80029dc6:	e0 6b 03 40 	mov	r11,832
80029dca:	fe cc 02 96 	sub	r12,pc,662
80029dce:	f0 16 00 3b 	mcall	r6[236]
80029dd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80029dd6:	fe b0 fd ea 	rcall	800299aa <cpu_irq_restore>
80029dda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dde:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029de2:	58 08       	cp.w	r8,0
80029de4:	c0 90       	breq	80029df6 <twim_master_init+0xb2>
80029de6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029dea:	31 09       	mov	r9,16
80029dec:	91 09       	st.w	r8[0x0],r9
80029dee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029df2:	3f f9       	mov	r9,-1
80029df4:	91 29       	st.w	r8[0x8],r9
80029df6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dfa:	70 09       	ld.w	r9,r8[0x0]
80029dfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e00:	70 18       	ld.w	r8,r8[0x4]
80029e02:	12 9a       	mov	r10,r9
80029e04:	10 9b       	mov	r11,r8
80029e06:	ee fc ff f4 	ld.w	r12,r7[-12]
80029e0a:	f0 16 01 32 	mcall	r6[1224]
80029e0e:	18 98       	mov	r8,r12
80029e10:	5b 88       	cp.w	r8,-8
80029e12:	c0 31       	brne	80029e18 <twim_master_init+0xd4>
80029e14:	3f 88       	mov	r8,-8
80029e16:	c1 68       	rjmp	80029e42 <twim_master_init+0xfe>
80029e18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e1c:	70 28       	ld.w	r8,r8[0x8]
80029e1e:	10 9b       	mov	r11,r8
80029e20:	ee fc ff f4 	ld.w	r12,r7[-12]
80029e24:	f0 16 01 0a 	mcall	r6[1064]
80029e28:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e2c:	70 08       	ld.w	r8,r8[0x0]
80029e2e:	5b c8       	cp.w	r8,-4
80029e30:	c0 60       	breq	80029e3c <twim_master_init+0xf8>
80029e32:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e36:	70 08       	ld.w	r8,r8[0x0]
80029e38:	5b e8       	cp.w	r8,-2
80029e3a:	c0 31       	brne	80029e40 <twim_master_init+0xfc>
80029e3c:	3f f8       	mov	r8,-1
80029e3e:	c0 28       	rjmp	80029e42 <twim_master_init+0xfe>
80029e40:	30 08       	mov	r8,0
80029e42:	10 9c       	mov	r12,r8
80029e44:	2f cd       	sub	sp,-16
80029e46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e4a:	00 00       	add	r0,r0
80029e4c:	80 02       	ld.sh	r2,r0[0x0]
80029e4e:	9b d2       	st.w	sp[0x34],r2

80029e50 <twim_disable_interrupt>:
80029e50:	eb cd 40 c0 	pushm	r6-r7,lr
80029e54:	1a 97       	mov	r7,sp
80029e56:	20 2d       	sub	sp,8
80029e58:	48 f6       	lddpc	r6,80029e94 <twim_disable_interrupt+0x44>
80029e5a:	1e 26       	rsub	r6,pc
80029e5c:	ef 4c ff f8 	st.w	r7[-8],r12
80029e60:	e1 b8 00 00 	mfsr	r8,0x0
80029e64:	10 9c       	mov	r12,r8
80029e66:	fe b0 fd 92 	rcall	8002998a <cpu_irq_is_enabled_flags>
80029e6a:	18 98       	mov	r8,r12
80029e6c:	ef 68 ff ff 	st.b	r7[-1],r8
80029e70:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029e74:	30 08       	mov	r8,0
80029e76:	f0 09 18 00 	cp.b	r9,r8
80029e7a:	c0 20       	breq	80029e7e <twim_disable_interrupt+0x2e>
80029e7c:	d3 03       	ssrf	0x10
80029e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e82:	3f f9       	mov	r9,-1
80029e84:	91 99       	st.w	r8[0x24],r9
80029e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e8a:	3f f9       	mov	r9,-1
80029e8c:	91 b9       	st.w	r8[0x2c],r9
80029e8e:	2f ed       	sub	sp,-8
80029e90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e94:	80 02       	ld.sh	r2,r0[0x0]
80029e96:	9c de       	ld.uh	lr,lr[0xa]

80029e98 <twim_probe>:
80029e98:	eb cd 40 c0 	pushm	r6-r7,lr
80029e9c:	1a 97       	mov	r7,sp
80029e9e:	20 3d       	sub	sp,12
80029ea0:	48 c6       	lddpc	r6,80029ed0 <twim_probe+0x38>
80029ea2:	1e 26       	rsub	r6,pc
80029ea4:	ef 4c ff f8 	st.w	r7[-8],r12
80029ea8:	ef 4b ff f4 	st.w	r7[-12],r11
80029eac:	30 08       	mov	r8,0
80029eae:	ef 68 ff fc 	st.b	r7[-4],r8
80029eb2:	ee cb 00 04 	sub	r11,r7,4
80029eb6:	30 08       	mov	r8,0
80029eb8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029ebc:	30 0a       	mov	r10,0
80029ebe:	ee fc ff f8 	ld.w	r12,r7[-8]
80029ec2:	f0 16 00 36 	mcall	r6[216]
80029ec6:	18 98       	mov	r8,r12
80029ec8:	10 9c       	mov	r12,r8
80029eca:	2f dd       	sub	sp,-12
80029ecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029ed0:	80 02       	ld.sh	r2,r0[0x0]
80029ed2:	9d 26       	st.w	lr[0x8],r6

80029ed4 <twim_read_packet>:
80029ed4:	eb cd 40 c0 	pushm	r6-r7,lr
80029ed8:	1a 97       	mov	r7,sp
80029eda:	20 2d       	sub	sp,8
80029edc:	4e 76       	lddpc	r6,8002a078 <twim_read_packet+0x1a4>
80029ede:	1e 26       	rsub	r6,pc
80029ee0:	ef 4c ff fc 	st.w	r7[-4],r12
80029ee4:	ef 4b ff f8 	st.w	r7[-8],r11
80029ee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029eec:	30 29       	mov	r9,2
80029eee:	91 09       	st.w	r8[0x0],r9
80029ef0:	ec f8 00 40 	ld.w	r8,r6[64]
80029ef4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029ef8:	91 09       	st.w	r8[0x0],r9
80029efa:	ec f8 00 40 	ld.w	r8,r6[64]
80029efe:	70 08       	ld.w	r8,r8[0x0]
80029f00:	10 9c       	mov	r12,r8
80029f02:	f0 16 00 81 	mcall	r6[516]
80029f06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f0a:	70 38       	ld.w	r8,r8[0xc]
80029f0c:	10 99       	mov	r9,r8
80029f0e:	ec f8 00 c0 	ld.w	r8,r6[192]
80029f12:	91 09       	st.w	r8[0x0],r9
80029f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f18:	70 49       	ld.w	r9,r8[0x10]
80029f1a:	ec f8 01 58 	ld.w	r8,r6[344]
80029f1e:	91 09       	st.w	r8[0x0],r9
80029f20:	ec f9 00 bc 	ld.w	r9,r6[188]
80029f24:	30 08       	mov	r8,0
80029f26:	b2 88       	st.b	r9[0x0],r8
80029f28:	ec f8 00 7c 	ld.w	r8,r6[124]
80029f2c:	30 09       	mov	r9,0
80029f2e:	91 09       	st.w	r8[0x0],r9
80029f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f34:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f38:	58 08       	cp.w	r8,0
80029f3a:	c5 60       	breq	80029fe6 <twim_read_packet+0x112>
80029f3c:	ec f8 00 40 	ld.w	r8,r6[64]
80029f40:	70 08       	ld.w	r8,r8[0x0]
80029f42:	30 19       	mov	r9,1
80029f44:	91 09       	st.w	r8[0x0],r9
80029f46:	ec f8 00 40 	ld.w	r8,r6[64]
80029f4a:	70 08       	ld.w	r8,r8[0x0]
80029f4c:	e0 69 00 80 	mov	r9,128
80029f50:	91 09       	st.w	r8[0x0],r9
80029f52:	ec f8 00 40 	ld.w	r8,r6[64]
80029f56:	70 08       	ld.w	r8,r8[0x0]
80029f58:	30 29       	mov	r9,2
80029f5a:	91 09       	st.w	r8[0x0],r9
80029f5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f60:	2f c8       	sub	r8,-4
80029f62:	10 99       	mov	r9,r8
80029f64:	ec f8 00 90 	ld.w	r8,r6[144]
80029f68:	91 09       	st.w	r8[0x0],r9
80029f6a:	ec f8 00 90 	ld.w	r8,r6[144]
80029f6e:	70 09       	ld.w	r9,r8[0x0]
80029f70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f74:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f78:	f0 08 11 04 	rsub	r8,r8,4
80029f7c:	10 09       	add	r9,r8
80029f7e:	ec f8 00 90 	ld.w	r8,r6[144]
80029f82:	91 09       	st.w	r8[0x0],r9
80029f84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f88:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f8c:	10 99       	mov	r9,r8
80029f8e:	ec f8 00 88 	ld.w	r8,r6[136]
80029f92:	91 09       	st.w	r8[0x0],r9
80029f94:	ec f8 01 08 	ld.w	r8,r6[264]
80029f98:	e0 69 07 03 	mov	r9,1795
80029f9c:	91 09       	st.w	r8[0x0],r9
80029f9e:	ec f8 00 40 	ld.w	r8,r6[64]
80029fa2:	70 08       	ld.w	r8,r8[0x0]
80029fa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fa8:	72 09       	ld.w	r9,r9[0x0]
80029faa:	f2 0a 15 01 	lsl	r10,r9,0x1
80029fae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fb2:	f3 39 00 08 	ld.ub	r9,r9[8]
80029fb6:	b1 69       	lsl	r9,0x10
80029fb8:	f5 e9 10 09 	or	r9,r10,r9
80029fbc:	e8 19 a0 00 	orl	r9,0xa000
80029fc0:	91 39       	st.w	r8[0xc],r9
80029fc2:	ec f8 00 40 	ld.w	r8,r6[64]
80029fc6:	70 08       	ld.w	r8,r8[0x0]
80029fc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fcc:	72 09       	ld.w	r9,r9[0x0]
80029fce:	f2 0a 15 01 	lsl	r10,r9,0x1
80029fd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fd6:	72 49       	ld.w	r9,r9[0x10]
80029fd8:	b1 69       	lsl	r9,0x10
80029fda:	f5 e9 10 09 	or	r9,r10,r9
80029fde:	e8 19 e0 01 	orl	r9,0xe001
80029fe2:	91 49       	st.w	r8[0x10],r9
80029fe4:	c1 b8       	rjmp	8002a01a <twim_read_packet+0x146>
80029fe6:	ec f8 00 88 	ld.w	r8,r6[136]
80029fea:	30 09       	mov	r9,0
80029fec:	91 09       	st.w	r8[0x0],r9
80029fee:	ec f8 01 08 	ld.w	r8,r6[264]
80029ff2:	e0 69 07 01 	mov	r9,1793
80029ff6:	91 09       	st.w	r8[0x0],r9
80029ff8:	ec f8 00 40 	ld.w	r8,r6[64]
80029ffc:	70 08       	ld.w	r8,r8[0x0]
80029ffe:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a002:	72 09       	ld.w	r9,r9[0x0]
8002a004:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a008:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a00c:	72 49       	ld.w	r9,r9[0x10]
8002a00e:	b1 69       	lsl	r9,0x10
8002a010:	f5 e9 10 09 	or	r9,r10,r9
8002a014:	e8 19 e0 01 	orl	r9,0xe001
8002a018:	91 39       	st.w	r8[0xc],r9
8002a01a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a01e:	70 08       	ld.w	r8,r8[0x0]
8002a020:	ec f9 01 08 	ld.w	r9,r6[264]
8002a024:	72 09       	ld.w	r9,r9[0x0]
8002a026:	91 89       	st.w	r8[0x20],r9
8002a028:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a02c:	30 19       	mov	r9,1
8002a02e:	91 09       	st.w	r8[0x0],r9
8002a030:	d5 03       	csrf	0x10
8002a032:	c0 38       	rjmp	8002a038 <twim_read_packet+0x164>
8002a034:	fe cf ff fc 	sub	pc,pc,-4
8002a038:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a03c:	70 08       	ld.w	r8,r8[0x0]
8002a03e:	58 08       	cp.w	r8,0
8002a040:	c0 61       	brne	8002a04c <twim_read_packet+0x178>
8002a042:	f0 16 00 71 	mcall	r6[452]
8002a046:	18 98       	mov	r8,r12
8002a048:	58 08       	cp.w	r8,0
8002a04a:	cf 50       	breq	8002a034 <twim_read_packet+0x160>
8002a04c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a050:	30 29       	mov	r9,2
8002a052:	91 09       	st.w	r8[0x0],r9
8002a054:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a058:	70 08       	ld.w	r8,r8[0x0]
8002a05a:	5b c8       	cp.w	r8,-4
8002a05c:	c0 60       	breq	8002a068 <twim_read_packet+0x194>
8002a05e:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a062:	70 08       	ld.w	r8,r8[0x0]
8002a064:	5b e8       	cp.w	r8,-2
8002a066:	c0 31       	brne	8002a06c <twim_read_packet+0x198>
8002a068:	3f f8       	mov	r8,-1
8002a06a:	c0 28       	rjmp	8002a06e <twim_read_packet+0x19a>
8002a06c:	30 08       	mov	r8,0
8002a06e:	10 9c       	mov	r12,r8
8002a070:	2f ed       	sub	sp,-8
8002a072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a076:	00 00       	add	r0,r0
8002a078:	80 02       	ld.sh	r2,r0[0x0]
8002a07a:	9d 62       	st.w	lr[0x18],r2

8002a07c <twim_read>:
8002a07c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a080:	1a 97       	mov	r7,sp
8002a082:	20 5d       	sub	sp,20
8002a084:	4c c6       	lddpc	r6,8002a1b4 <twim_read+0x138>
8002a086:	1e 26       	rsub	r6,pc
8002a088:	ef 4c ff fc 	st.w	r7[-4],r12
8002a08c:	ef 4b ff f8 	st.w	r7[-8],r11
8002a090:	ef 4a ff f4 	st.w	r7[-12],r10
8002a094:	ef 49 ff f0 	st.w	r7[-16],r9
8002a098:	ef 68 ff ec 	st.b	r7[-20],r8
8002a09c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0a0:	30 19       	mov	r9,1
8002a0a2:	91 09       	st.w	r8[0x0],r9
8002a0a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0a8:	e0 69 00 80 	mov	r9,128
8002a0ac:	91 09       	st.w	r8[0x0],r9
8002a0ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0b2:	30 29       	mov	r9,2
8002a0b4:	91 09       	st.w	r8[0x0],r9
8002a0b6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a0be:	91 09       	st.w	r8[0x0],r9
8002a0c0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0c4:	70 08       	ld.w	r8,r8[0x0]
8002a0c6:	10 9c       	mov	r12,r8
8002a0c8:	f0 16 00 81 	mcall	r6[516]
8002a0cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a0d0:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a0d4:	91 09       	st.w	r8[0x0],r9
8002a0d6:	ec f8 01 58 	ld.w	r8,r6[344]
8002a0da:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a0de:	91 09       	st.w	r8[0x0],r9
8002a0e0:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a0e4:	30 08       	mov	r8,0
8002a0e6:	b2 88       	st.b	r9[0x0],r8
8002a0e8:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a0ec:	30 09       	mov	r9,0
8002a0ee:	91 09       	st.w	r8[0x0],r9
8002a0f0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a0f4:	30 08       	mov	r8,0
8002a0f6:	f0 09 18 00 	cp.b	r9,r8
8002a0fa:	c1 a0       	breq	8002a12e <twim_read+0xb2>
8002a0fc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a100:	70 08       	ld.w	r8,r8[0x0]
8002a102:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a106:	a1 79       	lsl	r9,0x1
8002a108:	e8 19 a8 00 	orl	r9,0xa800
8002a10c:	91 39       	st.w	r8[0xc],r9
8002a10e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a112:	70 08       	ld.w	r8,r8[0x0]
8002a114:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a118:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a11c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a120:	b1 69       	lsl	r9,0x10
8002a122:	f5 e9 10 09 	or	r9,r10,r9
8002a126:	e8 19 f8 01 	orl	r9,0xf801
8002a12a:	91 49       	st.w	r8[0x10],r9
8002a12c:	c1 08       	rjmp	8002a14c <twim_read+0xd0>
8002a12e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a132:	70 08       	ld.w	r8,r8[0x0]
8002a134:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a138:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a13c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a140:	b1 69       	lsl	r9,0x10
8002a142:	f5 e9 10 09 	or	r9,r10,r9
8002a146:	e8 19 e0 01 	orl	r9,0xe001
8002a14a:	91 39       	st.w	r8[0xc],r9
8002a14c:	ec f8 01 08 	ld.w	r8,r6[264]
8002a150:	e0 69 07 01 	mov	r9,1793
8002a154:	91 09       	st.w	r8[0x0],r9
8002a156:	ec f8 00 40 	ld.w	r8,r6[64]
8002a15a:	70 08       	ld.w	r8,r8[0x0]
8002a15c:	ec f9 01 08 	ld.w	r9,r6[264]
8002a160:	72 09       	ld.w	r9,r9[0x0]
8002a162:	91 89       	st.w	r8[0x20],r9
8002a164:	ec f8 00 40 	ld.w	r8,r6[64]
8002a168:	70 08       	ld.w	r8,r8[0x0]
8002a16a:	30 19       	mov	r9,1
8002a16c:	91 09       	st.w	r8[0x0],r9
8002a16e:	d5 03       	csrf	0x10
8002a170:	c0 38       	rjmp	8002a176 <twim_read+0xfa>
8002a172:	fe cf ff fc 	sub	pc,pc,-4
8002a176:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a17a:	70 08       	ld.w	r8,r8[0x0]
8002a17c:	58 08       	cp.w	r8,0
8002a17e:	c0 61       	brne	8002a18a <twim_read+0x10e>
8002a180:	f0 16 00 71 	mcall	r6[452]
8002a184:	18 98       	mov	r8,r12
8002a186:	58 08       	cp.w	r8,0
8002a188:	cf 50       	breq	8002a172 <twim_read+0xf6>
8002a18a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a18e:	30 29       	mov	r9,2
8002a190:	91 09       	st.w	r8[0x0],r9
8002a192:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a196:	70 08       	ld.w	r8,r8[0x0]
8002a198:	5b c8       	cp.w	r8,-4
8002a19a:	c0 60       	breq	8002a1a6 <twim_read+0x12a>
8002a19c:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a1a0:	70 08       	ld.w	r8,r8[0x0]
8002a1a2:	5b e8       	cp.w	r8,-2
8002a1a4:	c0 31       	brne	8002a1aa <twim_read+0x12e>
8002a1a6:	3f f8       	mov	r8,-1
8002a1a8:	c0 28       	rjmp	8002a1ac <twim_read+0x130>
8002a1aa:	30 08       	mov	r8,0
8002a1ac:	10 9c       	mov	r12,r8
8002a1ae:	2f bd       	sub	sp,-20
8002a1b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a1b4:	80 02       	ld.sh	r2,r0[0x0]
8002a1b6:	9f 0a       	st.w	pc[0x0],r10

8002a1b8 <twim_write_packet>:
8002a1b8:	eb cd 40 c0 	pushm	r6-r7,lr
8002a1bc:	1a 97       	mov	r7,sp
8002a1be:	20 2d       	sub	sp,8
8002a1c0:	4f 16       	lddpc	r6,8002a384 <twim_write_packet+0x1cc>
8002a1c2:	1e 26       	rsub	r6,pc
8002a1c4:	ef 4c ff fc 	st.w	r7[-4],r12
8002a1c8:	ef 4b ff f8 	st.w	r7[-8],r11
8002a1cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1d0:	30 19       	mov	r9,1
8002a1d2:	91 09       	st.w	r8[0x0],r9
8002a1d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1d8:	e0 69 00 80 	mov	r9,128
8002a1dc:	91 09       	st.w	r8[0x0],r9
8002a1de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1e2:	30 29       	mov	r9,2
8002a1e4:	91 09       	st.w	r8[0x0],r9
8002a1e6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a1ee:	91 09       	st.w	r8[0x0],r9
8002a1f0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1f4:	70 08       	ld.w	r8,r8[0x0]
8002a1f6:	10 9c       	mov	r12,r8
8002a1f8:	f0 16 00 81 	mcall	r6[516]
8002a1fc:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a200:	30 09       	mov	r9,0
8002a202:	91 09       	st.w	r8[0x0],r9
8002a204:	ec f8 01 08 	ld.w	r8,r6[264]
8002a208:	e0 69 07 02 	mov	r9,1794
8002a20c:	91 09       	st.w	r8[0x0],r9
8002a20e:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a212:	30 08       	mov	r8,0
8002a214:	b2 88       	st.b	r9[0x0],r8
8002a216:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a21a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a21e:	58 08       	cp.w	r8,0
8002a220:	c6 40       	breq	8002a2e8 <twim_write_packet+0x130>
8002a222:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a226:	2f c8       	sub	r8,-4
8002a228:	10 99       	mov	r9,r8
8002a22a:	ec f8 00 90 	ld.w	r8,r6[144]
8002a22e:	91 09       	st.w	r8[0x0],r9
8002a230:	ec f8 00 90 	ld.w	r8,r6[144]
8002a234:	70 09       	ld.w	r9,r8[0x0]
8002a236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a23a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a23e:	f0 08 11 04 	rsub	r8,r8,4
8002a242:	10 09       	add	r9,r8
8002a244:	ec f8 00 90 	ld.w	r8,r6[144]
8002a248:	91 09       	st.w	r8[0x0],r9
8002a24a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a24e:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a252:	10 99       	mov	r9,r8
8002a254:	ec f8 00 88 	ld.w	r8,r6[136]
8002a258:	91 09       	st.w	r8[0x0],r9
8002a25a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a25e:	70 08       	ld.w	r8,r8[0x0]
8002a260:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a264:	72 09       	ld.w	r9,r9[0x0]
8002a266:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a26a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a26e:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a272:	b1 69       	lsl	r9,0x10
8002a274:	f5 e9 10 09 	or	r9,r10,r9
8002a278:	e8 19 a0 00 	orl	r9,0xa000
8002a27c:	91 39       	st.w	r8[0xc],r9
8002a27e:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a282:	30 18       	mov	r8,1
8002a284:	b2 88       	st.b	r9[0x0],r8
8002a286:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a28a:	ec f8 02 0c 	ld.w	r8,r6[524]
8002a28e:	91 09       	st.w	r8[0x0],r9
8002a290:	ec f8 00 40 	ld.w	r8,r6[64]
8002a294:	70 08       	ld.w	r8,r8[0x0]
8002a296:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a29a:	72 09       	ld.w	r9,r9[0x0]
8002a29c:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a2a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a2a4:	72 49       	ld.w	r9,r9[0x10]
8002a2a6:	b1 69       	lsl	r9,0x10
8002a2a8:	f5 e9 10 09 	or	r9,r10,r9
8002a2ac:	e8 19 e0 00 	orl	r9,0xe000
8002a2b0:	91 49       	st.w	r8[0x10],r9
8002a2b2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2b6:	70 08       	ld.w	r8,r8[0x0]
8002a2b8:	ec f9 01 08 	ld.w	r9,r6[264]
8002a2bc:	72 09       	ld.w	r9,r9[0x0]
8002a2be:	91 89       	st.w	r8[0x20],r9
8002a2c0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2c4:	70 08       	ld.w	r8,r8[0x0]
8002a2c6:	30 19       	mov	r9,1
8002a2c8:	91 09       	st.w	r8[0x0],r9
8002a2ca:	d5 03       	csrf	0x10
8002a2cc:	c0 38       	rjmp	8002a2d2 <twim_write_packet+0x11a>
8002a2ce:	fe cf ff fc 	sub	pc,pc,-4
8002a2d2:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a2d6:	70 08       	ld.w	r8,r8[0x0]
8002a2d8:	58 08       	cp.w	r8,0
8002a2da:	c3 f1       	brne	8002a358 <twim_write_packet+0x1a0>
8002a2dc:	f0 16 00 71 	mcall	r6[452]
8002a2e0:	18 98       	mov	r8,r12
8002a2e2:	58 08       	cp.w	r8,0
8002a2e4:	cf 50       	breq	8002a2ce <twim_write_packet+0x116>
8002a2e6:	c3 98       	rjmp	8002a358 <twim_write_packet+0x1a0>
8002a2e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2ec:	70 38       	ld.w	r8,r8[0xc]
8002a2ee:	10 99       	mov	r9,r8
8002a2f0:	ec f8 00 90 	ld.w	r8,r6[144]
8002a2f4:	91 09       	st.w	r8[0x0],r9
8002a2f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2fa:	70 49       	ld.w	r9,r8[0x10]
8002a2fc:	ec f8 00 88 	ld.w	r8,r6[136]
8002a300:	91 09       	st.w	r8[0x0],r9
8002a302:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a306:	70 08       	ld.w	r8,r8[0x0]
8002a308:	f0 09 15 01 	lsl	r9,r8,0x1
8002a30c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a310:	70 48       	ld.w	r8,r8[0x10]
8002a312:	b1 68       	lsl	r8,0x10
8002a314:	f3 e8 10 08 	or	r8,r9,r8
8002a318:	10 99       	mov	r9,r8
8002a31a:	e8 19 e0 00 	orl	r9,0xe000
8002a31e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a322:	91 39       	st.w	r8[0xc],r9
8002a324:	ec f8 00 40 	ld.w	r8,r6[64]
8002a328:	70 08       	ld.w	r8,r8[0x0]
8002a32a:	ec f9 01 08 	ld.w	r9,r6[264]
8002a32e:	72 09       	ld.w	r9,r9[0x0]
8002a330:	91 89       	st.w	r8[0x20],r9
8002a332:	ec f8 00 40 	ld.w	r8,r6[64]
8002a336:	70 08       	ld.w	r8,r8[0x0]
8002a338:	30 19       	mov	r9,1
8002a33a:	91 09       	st.w	r8[0x0],r9
8002a33c:	d5 03       	csrf	0x10
8002a33e:	c0 38       	rjmp	8002a344 <twim_write_packet+0x18c>
8002a340:	fe cf ff fc 	sub	pc,pc,-4
8002a344:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a348:	70 08       	ld.w	r8,r8[0x0]
8002a34a:	58 08       	cp.w	r8,0
8002a34c:	c0 61       	brne	8002a358 <twim_write_packet+0x1a0>
8002a34e:	f0 16 00 71 	mcall	r6[452]
8002a352:	18 98       	mov	r8,r12
8002a354:	58 08       	cp.w	r8,0
8002a356:	cf 50       	breq	8002a340 <twim_write_packet+0x188>
8002a358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a35c:	30 29       	mov	r9,2
8002a35e:	91 09       	st.w	r8[0x0],r9
8002a360:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a364:	70 08       	ld.w	r8,r8[0x0]
8002a366:	5b c8       	cp.w	r8,-4
8002a368:	c0 60       	breq	8002a374 <twim_write_packet+0x1bc>
8002a36a:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a36e:	70 08       	ld.w	r8,r8[0x0]
8002a370:	5b e8       	cp.w	r8,-2
8002a372:	c0 31       	brne	8002a378 <twim_write_packet+0x1c0>
8002a374:	3f f8       	mov	r8,-1
8002a376:	c0 28       	rjmp	8002a37a <twim_write_packet+0x1c2>
8002a378:	30 08       	mov	r8,0
8002a37a:	10 9c       	mov	r12,r8
8002a37c:	2f ed       	sub	sp,-8
8002a37e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a382:	00 00       	add	r0,r0
8002a384:	80 02       	ld.sh	r2,r0[0x0]
8002a386:	a0 46       	st.h	r0[0x8],r6

8002a388 <twim_write>:
8002a388:	eb cd 40 c0 	pushm	r6-r7,lr
8002a38c:	1a 97       	mov	r7,sp
8002a38e:	20 5d       	sub	sp,20
8002a390:	4b f6       	lddpc	r6,8002a48c <twim_write+0x104>
8002a392:	1e 26       	rsub	r6,pc
8002a394:	ef 4c ff fc 	st.w	r7[-4],r12
8002a398:	ef 4b ff f8 	st.w	r7[-8],r11
8002a39c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a3a0:	ef 49 ff f0 	st.w	r7[-16],r9
8002a3a4:	ef 68 ff ec 	st.b	r7[-20],r8
8002a3a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3ac:	30 19       	mov	r9,1
8002a3ae:	91 09       	st.w	r8[0x0],r9
8002a3b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3b4:	e0 69 00 80 	mov	r9,128
8002a3b8:	91 09       	st.w	r8[0x0],r9
8002a3ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3be:	30 29       	mov	r9,2
8002a3c0:	91 09       	st.w	r8[0x0],r9
8002a3c2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a3ca:	91 09       	st.w	r8[0x0],r9
8002a3cc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3d0:	70 08       	ld.w	r8,r8[0x0]
8002a3d2:	10 9c       	mov	r12,r8
8002a3d4:	f0 16 00 81 	mcall	r6[516]
8002a3d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a3dc:	ec f8 00 90 	ld.w	r8,r6[144]
8002a3e0:	91 09       	st.w	r8[0x0],r9
8002a3e2:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a3ea:	91 09       	st.w	r8[0x0],r9
8002a3ec:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a3f0:	30 08       	mov	r8,0
8002a3f2:	b2 88       	st.b	r9[0x0],r8
8002a3f4:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a3f8:	30 09       	mov	r9,0
8002a3fa:	91 09       	st.w	r8[0x0],r9
8002a3fc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a400:	70 08       	ld.w	r8,r8[0x0]
8002a402:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a406:	f2 0a 15 01 	lsl	r10,r9,0x1
8002a40a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a40e:	b1 69       	lsl	r9,0x10
8002a410:	12 4a       	or	r10,r9
8002a412:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a416:	ab 79       	lsl	r9,0xb
8002a418:	f5 e9 10 09 	or	r9,r10,r9
8002a41c:	e8 19 e0 00 	orl	r9,0xe000
8002a420:	91 39       	st.w	r8[0xc],r9
8002a422:	ec f8 01 08 	ld.w	r8,r6[264]
8002a426:	e0 69 03 02 	mov	r9,770
8002a42a:	91 09       	st.w	r8[0x0],r9
8002a42c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a430:	70 08       	ld.w	r8,r8[0x0]
8002a432:	ec f9 01 08 	ld.w	r9,r6[264]
8002a436:	72 09       	ld.w	r9,r9[0x0]
8002a438:	91 89       	st.w	r8[0x20],r9
8002a43a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a43e:	70 08       	ld.w	r8,r8[0x0]
8002a440:	30 19       	mov	r9,1
8002a442:	91 09       	st.w	r8[0x0],r9
8002a444:	d5 03       	csrf	0x10
8002a446:	c0 38       	rjmp	8002a44c <twim_write+0xc4>
8002a448:	fe cf ff fc 	sub	pc,pc,-4
8002a44c:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a450:	70 08       	ld.w	r8,r8[0x0]
8002a452:	58 08       	cp.w	r8,0
8002a454:	c0 61       	brne	8002a460 <twim_write+0xd8>
8002a456:	f0 16 00 71 	mcall	r6[452]
8002a45a:	18 98       	mov	r8,r12
8002a45c:	58 08       	cp.w	r8,0
8002a45e:	cf 50       	breq	8002a448 <twim_write+0xc0>
8002a460:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a464:	30 29       	mov	r9,2
8002a466:	91 09       	st.w	r8[0x0],r9
8002a468:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a46c:	70 08       	ld.w	r8,r8[0x0]
8002a46e:	5b c8       	cp.w	r8,-4
8002a470:	c0 60       	breq	8002a47c <twim_write+0xf4>
8002a472:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a476:	70 08       	ld.w	r8,r8[0x0]
8002a478:	5b e8       	cp.w	r8,-2
8002a47a:	c0 31       	brne	8002a480 <twim_write+0xf8>
8002a47c:	3f f8       	mov	r8,-1
8002a47e:	c0 28       	rjmp	8002a482 <twim_write+0xfa>
8002a480:	30 08       	mov	r8,0
8002a482:	10 9c       	mov	r12,r8
8002a484:	2f bd       	sub	sp,-20
8002a486:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a48a:	00 00       	add	r0,r0
8002a48c:	80 02       	ld.sh	r2,r0[0x0]
8002a48e:	a2 16       	st.h	r1[0x2],r6

8002a490 <twim_chained_transfer>:
8002a490:	eb cd 40 c0 	pushm	r6-r7,lr
8002a494:	1a 97       	mov	r7,sp
8002a496:	20 4d       	sub	sp,16
8002a498:	fe f6 03 4c 	ld.w	r6,pc[844]
8002a49c:	1e 26       	rsub	r6,pc
8002a49e:	ef 4c ff fc 	st.w	r7[-4],r12
8002a4a2:	ef 4b ff f8 	st.w	r7[-8],r11
8002a4a6:	ef 4a ff f4 	st.w	r7[-12],r10
8002a4aa:	12 98       	mov	r8,r9
8002a4ac:	ef 68 ff f0 	st.b	r7[-16],r8
8002a4b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4b4:	30 19       	mov	r9,1
8002a4b6:	91 09       	st.w	r8[0x0],r9
8002a4b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4bc:	e0 69 00 80 	mov	r9,128
8002a4c0:	91 09       	st.w	r8[0x0],r9
8002a4c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4c6:	30 29       	mov	r9,2
8002a4c8:	91 09       	st.w	r8[0x0],r9
8002a4ca:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a4d2:	91 09       	st.w	r8[0x0],r9
8002a4d4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4d8:	70 08       	ld.w	r8,r8[0x0]
8002a4da:	10 9c       	mov	r12,r8
8002a4dc:	f0 16 00 81 	mcall	r6[516]
8002a4e0:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a4e4:	30 08       	mov	r8,0
8002a4e6:	b2 88       	st.b	r9[0x0],r8
8002a4e8:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a4ec:	30 09       	mov	r9,0
8002a4ee:	91 09       	st.w	r8[0x0],r9
8002a4f0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a4f4:	30 08       	mov	r8,0
8002a4f6:	f0 09 18 00 	cp.b	r9,r8
8002a4fa:	c3 00       	breq	8002a55a <twim_chained_transfer+0xca>
8002a4fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a500:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a504:	5c 58       	castu.b	r8
8002a506:	c2 a0       	breq	8002a55a <twim_chained_transfer+0xca>
8002a508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a50c:	70 08       	ld.w	r8,r8[0x0]
8002a50e:	a1 78       	lsl	r8,0x1
8002a510:	10 99       	mov	r9,r8
8002a512:	e8 19 a8 00 	orl	r9,0xa800
8002a516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a51a:	91 39       	st.w	r8[0xc],r9
8002a51c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a520:	70 08       	ld.w	r8,r8[0x0]
8002a522:	f0 09 15 01 	lsl	r9,r8,0x1
8002a526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a52a:	70 28       	ld.w	r8,r8[0x8]
8002a52c:	b1 68       	lsl	r8,0x10
8002a52e:	f3 e8 10 08 	or	r8,r9,r8
8002a532:	10 99       	mov	r9,r8
8002a534:	e8 19 b8 01 	orl	r9,0xb801
8002a538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a53c:	91 49       	st.w	r8[0x10],r9
8002a53e:	c0 38       	rjmp	8002a544 <twim_chained_transfer+0xb4>
8002a540:	fe cf ff fc 	sub	pc,pc,-4
8002a544:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a548:	70 78       	ld.w	r8,r8[0x1c]
8002a54a:	e2 18 00 08 	andl	r8,0x8,COH
8002a54e:	cf 90       	breq	8002a540 <twim_chained_transfer+0xb0>
8002a550:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a554:	30 89       	mov	r9,8
8002a556:	91 b9       	st.w	r8[0x2c],r9
8002a558:	c1 c8       	rjmp	8002a590 <twim_chained_transfer+0x100>
8002a55a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a55e:	70 08       	ld.w	r8,r8[0x0]
8002a560:	f0 09 15 01 	lsl	r9,r8,0x1
8002a564:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a568:	70 28       	ld.w	r8,r8[0x8]
8002a56a:	b1 68       	lsl	r8,0x10
8002a56c:	10 49       	or	r9,r8
8002a56e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a572:	ab 78       	lsl	r8,0xb
8002a574:	10 49       	or	r9,r8
8002a576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a57a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a57e:	5c 58       	castu.b	r8
8002a580:	f3 e8 10 08 	or	r8,r9,r8
8002a584:	10 99       	mov	r9,r8
8002a586:	e8 19 a0 00 	orl	r9,0xa000
8002a58a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a58e:	91 39       	st.w	r8[0xc],r9
8002a590:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a594:	70 08       	ld.w	r8,r8[0x0]
8002a596:	f0 09 15 01 	lsl	r9,r8,0x1
8002a59a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a59e:	70 28       	ld.w	r8,r8[0x8]
8002a5a0:	b1 68       	lsl	r8,0x10
8002a5a2:	10 49       	or	r9,r8
8002a5a4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a5a8:	ab 78       	lsl	r8,0xb
8002a5aa:	f3 e8 10 0a 	or	r10,r9,r8
8002a5ae:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a5b2:	30 08       	mov	r8,0
8002a5b4:	f0 09 18 00 	cp.b	r9,r8
8002a5b8:	c0 90       	breq	8002a5ca <twim_chained_transfer+0x13a>
8002a5ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a5be:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5c2:	5c 58       	castu.b	r8
8002a5c4:	c0 30       	breq	8002a5ca <twim_chained_transfer+0x13a>
8002a5c6:	30 18       	mov	r8,1
8002a5c8:	c0 28       	rjmp	8002a5cc <twim_chained_transfer+0x13c>
8002a5ca:	30 08       	mov	r8,0
8002a5cc:	ad 68       	lsl	r8,0xc
8002a5ce:	f5 e8 10 09 	or	r9,r10,r8
8002a5d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a5d6:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5da:	5c 58       	castu.b	r8
8002a5dc:	f3 e8 10 08 	or	r8,r9,r8
8002a5e0:	10 99       	mov	r9,r8
8002a5e2:	e8 19 e0 00 	orl	r9,0xe000
8002a5e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a5ea:	91 49       	st.w	r8[0x10],r9
8002a5ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5f0:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5f4:	5c 58       	castu.b	r8
8002a5f6:	c3 80       	breq	8002a666 <twim_chained_transfer+0x1d6>
8002a5f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5fc:	70 18       	ld.w	r8,r8[0x4]
8002a5fe:	10 99       	mov	r9,r8
8002a600:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a604:	91 09       	st.w	r8[0x0],r9
8002a606:	c1 58       	rjmp	8002a630 <twim_chained_transfer+0x1a0>
8002a608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a60c:	70 78       	ld.w	r8,r8[0x1c]
8002a60e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a612:	5c 58       	castu.b	r8
8002a614:	c0 e0       	breq	8002a630 <twim_chained_transfer+0x1a0>
8002a616:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a61a:	70 08       	ld.w	r8,r8[0x0]
8002a61c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a620:	72 59       	ld.w	r9,r9[0x14]
8002a622:	5c 59       	castu.b	r9
8002a624:	b0 89       	st.b	r8[0x0],r9
8002a626:	f0 c9 ff ff 	sub	r9,r8,-1
8002a62a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a62e:	91 09       	st.w	r8[0x0],r9
8002a630:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a634:	70 78       	ld.w	r8,r8[0x1c]
8002a636:	e2 18 00 08 	andl	r8,0x8,COH
8002a63a:	ce 70       	breq	8002a608 <twim_chained_transfer+0x178>
8002a63c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a640:	70 78       	ld.w	r8,r8[0x1c]
8002a642:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a646:	5c 58       	castu.b	r8
8002a648:	c4 40       	breq	8002a6d0 <twim_chained_transfer+0x240>
8002a64a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a64e:	70 08       	ld.w	r8,r8[0x0]
8002a650:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a654:	72 59       	ld.w	r9,r9[0x14]
8002a656:	5c 59       	castu.b	r9
8002a658:	b0 89       	st.b	r8[0x0],r9
8002a65a:	f0 c9 ff ff 	sub	r9,r8,-1
8002a65e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a662:	91 09       	st.w	r8[0x0],r9
8002a664:	c3 68       	rjmp	8002a6d0 <twim_chained_transfer+0x240>
8002a666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a66a:	70 18       	ld.w	r8,r8[0x4]
8002a66c:	10 99       	mov	r9,r8
8002a66e:	ec f8 00 90 	ld.w	r8,r6[144]
8002a672:	91 09       	st.w	r8[0x0],r9
8002a674:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a678:	70 29       	ld.w	r9,r8[0x8]
8002a67a:	ec f8 00 88 	ld.w	r8,r6[136]
8002a67e:	91 09       	st.w	r8[0x0],r9
8002a680:	c2 28       	rjmp	8002a6c4 <twim_chained_transfer+0x234>
8002a682:	ec f8 00 88 	ld.w	r8,r6[136]
8002a686:	70 08       	ld.w	r8,r8[0x0]
8002a688:	58 08       	cp.w	r8,0
8002a68a:	c1 d0       	breq	8002a6c4 <twim_chained_transfer+0x234>
8002a68c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a690:	70 78       	ld.w	r8,r8[0x1c]
8002a692:	e2 18 00 02 	andl	r8,0x2,COH
8002a696:	c1 70       	breq	8002a6c4 <twim_chained_transfer+0x234>
8002a698:	ec f8 00 90 	ld.w	r8,r6[144]
8002a69c:	70 08       	ld.w	r8,r8[0x0]
8002a69e:	11 89       	ld.ub	r9,r8[0x0]
8002a6a0:	5c 59       	castu.b	r9
8002a6a2:	12 9a       	mov	r10,r9
8002a6a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a6a8:	93 6a       	st.w	r9[0x18],r10
8002a6aa:	f0 c9 ff ff 	sub	r9,r8,-1
8002a6ae:	ec f8 00 90 	ld.w	r8,r6[144]
8002a6b2:	91 09       	st.w	r8[0x0],r9
8002a6b4:	ec f8 00 88 	ld.w	r8,r6[136]
8002a6b8:	70 08       	ld.w	r8,r8[0x0]
8002a6ba:	f0 c9 00 01 	sub	r9,r8,1
8002a6be:	ec f8 00 88 	ld.w	r8,r6[136]
8002a6c2:	91 09       	st.w	r8[0x0],r9
8002a6c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6c8:	70 78       	ld.w	r8,r8[0x1c]
8002a6ca:	e2 18 00 08 	andl	r8,0x8,COH
8002a6ce:	cd a0       	breq	8002a682 <twim_chained_transfer+0x1f2>
8002a6d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6d4:	30 89       	mov	r9,8
8002a6d6:	91 b9       	st.w	r8[0x2c],r9
8002a6d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a6dc:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a6e0:	5c 58       	castu.b	r8
8002a6e2:	c2 40       	breq	8002a72a <twim_chained_transfer+0x29a>
8002a6e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a6e8:	70 18       	ld.w	r8,r8[0x4]
8002a6ea:	10 99       	mov	r9,r8
8002a6ec:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a6f0:	91 09       	st.w	r8[0x0],r9
8002a6f2:	c1 58       	rjmp	8002a71c <twim_chained_transfer+0x28c>
8002a6f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6f8:	70 78       	ld.w	r8,r8[0x1c]
8002a6fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a6fe:	5c 58       	castu.b	r8
8002a700:	c0 e0       	breq	8002a71c <twim_chained_transfer+0x28c>
8002a702:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a706:	70 08       	ld.w	r8,r8[0x0]
8002a708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a70c:	72 59       	ld.w	r9,r9[0x14]
8002a70e:	5c 59       	castu.b	r9
8002a710:	b0 89       	st.b	r8[0x0],r9
8002a712:	f0 c9 ff ff 	sub	r9,r8,-1
8002a716:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a71a:	91 09       	st.w	r8[0x0],r9
8002a71c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a720:	70 78       	ld.w	r8,r8[0x1c]
8002a722:	e2 18 00 10 	andl	r8,0x10,COH
8002a726:	ce 70       	breq	8002a6f4 <twim_chained_transfer+0x264>
8002a728:	c3 68       	rjmp	8002a794 <twim_chained_transfer+0x304>
8002a72a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a72e:	70 18       	ld.w	r8,r8[0x4]
8002a730:	10 99       	mov	r9,r8
8002a732:	ec f8 00 90 	ld.w	r8,r6[144]
8002a736:	91 09       	st.w	r8[0x0],r9
8002a738:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a73c:	70 29       	ld.w	r9,r8[0x8]
8002a73e:	ec f8 00 88 	ld.w	r8,r6[136]
8002a742:	91 09       	st.w	r8[0x0],r9
8002a744:	c2 28       	rjmp	8002a788 <twim_chained_transfer+0x2f8>
8002a746:	ec f8 00 88 	ld.w	r8,r6[136]
8002a74a:	70 08       	ld.w	r8,r8[0x0]
8002a74c:	58 08       	cp.w	r8,0
8002a74e:	c1 d0       	breq	8002a788 <twim_chained_transfer+0x2f8>
8002a750:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a754:	70 78       	ld.w	r8,r8[0x1c]
8002a756:	e2 18 00 02 	andl	r8,0x2,COH
8002a75a:	c1 70       	breq	8002a788 <twim_chained_transfer+0x2f8>
8002a75c:	ec f8 00 90 	ld.w	r8,r6[144]
8002a760:	70 08       	ld.w	r8,r8[0x0]
8002a762:	11 89       	ld.ub	r9,r8[0x0]
8002a764:	5c 59       	castu.b	r9
8002a766:	12 9a       	mov	r10,r9
8002a768:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a76c:	93 6a       	st.w	r9[0x18],r10
8002a76e:	f0 c9 ff ff 	sub	r9,r8,-1
8002a772:	ec f8 00 90 	ld.w	r8,r6[144]
8002a776:	91 09       	st.w	r8[0x0],r9
8002a778:	ec f8 00 88 	ld.w	r8,r6[136]
8002a77c:	70 08       	ld.w	r8,r8[0x0]
8002a77e:	f0 c9 00 01 	sub	r9,r8,1
8002a782:	ec f8 00 88 	ld.w	r8,r6[136]
8002a786:	91 09       	st.w	r8[0x0],r9
8002a788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a78c:	70 78       	ld.w	r8,r8[0x1c]
8002a78e:	e2 18 00 10 	andl	r8,0x10,COH
8002a792:	cd a0       	breq	8002a746 <twim_chained_transfer+0x2b6>
8002a794:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a798:	70 78       	ld.w	r8,r8[0x1c]
8002a79a:	e2 18 04 00 	andl	r8,0x400,COH
8002a79e:	c0 80       	breq	8002a7ae <twim_chained_transfer+0x31e>
8002a7a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7a4:	e0 69 04 00 	mov	r9,1024
8002a7a8:	91 b9       	st.w	r8[0x2c],r9
8002a7aa:	3f f8       	mov	r8,-1
8002a7ac:	c1 88       	rjmp	8002a7dc <twim_chained_transfer+0x34c>
8002a7ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7b2:	70 78       	ld.w	r8,r8[0x1c]
8002a7b4:	e2 18 03 00 	andl	r8,0x300,COH
8002a7b8:	c1 10       	breq	8002a7da <twim_chained_transfer+0x34a>
8002a7ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7be:	70 38       	ld.w	r8,r8[0xc]
8002a7c0:	10 99       	mov	r9,r8
8002a7c2:	ec 19 80 00 	eorl	r9,0x8000
8002a7c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7ca:	91 39       	st.w	r8[0xc],r9
8002a7cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7d0:	e0 69 03 00 	mov	r9,768
8002a7d4:	91 b9       	st.w	r8[0x2c],r9
8002a7d6:	3f f8       	mov	r8,-1
8002a7d8:	c0 28       	rjmp	8002a7dc <twim_chained_transfer+0x34c>
8002a7da:	30 08       	mov	r8,0
8002a7dc:	10 9c       	mov	r12,r8
8002a7de:	2f cd       	sub	sp,-16
8002a7e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a7e4:	80 02       	ld.sh	r2,r0[0x0]
8002a7e6:	a3 20       	st.d	r1++,r0

8002a7e8 <twim_status>:
8002a7e8:	eb cd 40 c0 	pushm	r6-r7,lr
8002a7ec:	1a 97       	mov	r7,sp
8002a7ee:	20 1d       	sub	sp,4
8002a7f0:	48 a6       	lddpc	r6,8002a818 <twim_status+0x30>
8002a7f2:	1e 26       	rsub	r6,pc
8002a7f4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7f8:	70 08       	ld.w	r8,r8[0x0]
8002a7fa:	70 78       	ld.w	r8,r8[0x1c]
8002a7fc:	ef 48 ff fc 	st.w	r7[-4],r8
8002a800:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a804:	e2 18 00 10 	andl	r8,0x10,COH
8002a808:	c0 30       	breq	8002a80e <twim_status+0x26>
8002a80a:	30 18       	mov	r8,1
8002a80c:	c0 28       	rjmp	8002a810 <twim_status+0x28>
8002a80e:	30 08       	mov	r8,0
8002a810:	10 9c       	mov	r12,r8
8002a812:	2f fd       	sub	sp,-4
8002a814:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a818:	80 02       	ld.sh	r2,r0[0x0]
8002a81a:	a6 76       	st.h	r3[0xe],r6

8002a81c <cpu_irq_is_enabled_flags>:
8002a81c:	eb cd 40 80 	pushm	r7,lr
8002a820:	1a 97       	mov	r7,sp
8002a822:	20 1d       	sub	sp,4
8002a824:	ef 4c ff fc 	st.w	r7[-4],r12
8002a828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a82c:	e6 18 00 01 	andh	r8,0x1,COH
8002a830:	5f 08       	sreq	r8
8002a832:	5c 58       	castu.b	r8
8002a834:	10 9c       	mov	r12,r8
8002a836:	2f fd       	sub	sp,-4
8002a838:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a83c <usart_set_async_baudrate>:
8002a83c:	eb cd 40 80 	pushm	r7,lr
8002a840:	1a 97       	mov	r7,sp
8002a842:	20 7d       	sub	sp,28
8002a844:	ef 4c ff ec 	st.w	r7[-20],r12
8002a848:	ef 4b ff e8 	st.w	r7[-24],r11
8002a84c:	ef 4a ff e4 	st.w	r7[-28],r10
8002a850:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a854:	f0 09 15 04 	lsl	r9,r8,0x4
8002a858:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a85c:	10 39       	cp.w	r9,r8
8002a85e:	e0 8b 00 04 	brhi	8002a866 <usart_set_async_baudrate+0x2a>
8002a862:	31 08       	mov	r8,16
8002a864:	c0 28       	rjmp	8002a868 <usart_set_async_baudrate+0x2c>
8002a866:	30 88       	mov	r8,8
8002a868:	ef 48 ff f0 	st.w	r7[-16],r8
8002a86c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a870:	f0 09 15 03 	lsl	r9,r8,0x3
8002a874:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a878:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a87c:	f4 08 02 48 	mul	r8,r10,r8
8002a880:	a1 98       	lsr	r8,0x1
8002a882:	f2 08 00 08 	add	r8,r9,r8
8002a886:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a88a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002a88e:	f4 09 02 49 	mul	r9,r10,r9
8002a892:	f0 09 0d 08 	divu	r8,r8,r9
8002a896:	ef 48 ff f4 	st.w	r7[-12],r8
8002a89a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a89e:	a3 98       	lsr	r8,0x3
8002a8a0:	ef 48 ff f8 	st.w	r7[-8],r8
8002a8a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a8a8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002a8ac:	ef 48 ff fc 	st.w	r7[-4],r8
8002a8b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8b4:	58 08       	cp.w	r8,0
8002a8b6:	c0 70       	breq	8002a8c4 <usart_set_async_baudrate+0x88>
8002a8b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8bc:	e0 48 ff ff 	cp.w	r8,65535
8002a8c0:	e0 88 00 04 	brls	8002a8c8 <usart_set_async_baudrate+0x8c>
8002a8c4:	30 18       	mov	r8,1
8002a8c6:	c2 08       	rjmp	8002a906 <usart_set_async_baudrate+0xca>
8002a8c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a8cc:	70 18       	ld.w	r8,r8[0x4]
8002a8ce:	10 99       	mov	r9,r8
8002a8d0:	e4 19 ff f7 	andh	r9,0xfff7
8002a8d4:	e0 19 fe cf 	andl	r9,0xfecf
8002a8d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a8dc:	59 08       	cp.w	r8,16
8002a8de:	c0 40       	breq	8002a8e6 <usart_set_async_baudrate+0xaa>
8002a8e0:	e8 68 00 00 	mov	r8,524288
8002a8e4:	c0 28       	rjmp	8002a8e8 <usart_set_async_baudrate+0xac>
8002a8e6:	30 08       	mov	r8,0
8002a8e8:	10 49       	or	r9,r8
8002a8ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a8ee:	91 19       	st.w	r8[0x4],r9
8002a8f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8f4:	f0 09 15 10 	lsl	r9,r8,0x10
8002a8f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8fc:	10 49       	or	r9,r8
8002a8fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a902:	91 89       	st.w	r8[0x20],r9
8002a904:	30 08       	mov	r8,0
8002a906:	10 9c       	mov	r12,r8
8002a908:	2f 9d       	sub	sp,-28
8002a90a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a90e <usart_set_sync_master_baudrate>:
8002a90e:	eb cd 40 80 	pushm	r7,lr
8002a912:	1a 97       	mov	r7,sp
8002a914:	20 4d       	sub	sp,16
8002a916:	ef 4c ff f8 	st.w	r7[-8],r12
8002a91a:	ef 4b ff f4 	st.w	r7[-12],r11
8002a91e:	ef 4a ff f0 	st.w	r7[-16],r10
8002a922:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a926:	f0 09 16 01 	lsr	r9,r8,0x1
8002a92a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a92e:	f2 08 00 08 	add	r8,r9,r8
8002a932:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a936:	f0 09 0d 08 	divu	r8,r8,r9
8002a93a:	ef 48 ff fc 	st.w	r7[-4],r8
8002a93e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a942:	58 08       	cp.w	r8,0
8002a944:	c0 70       	breq	8002a952 <usart_set_sync_master_baudrate+0x44>
8002a946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a94a:	e0 48 ff ff 	cp.w	r8,65535
8002a94e:	e0 88 00 04 	brls	8002a956 <usart_set_sync_master_baudrate+0x48>
8002a952:	30 18       	mov	r8,1
8002a954:	c1 18       	rjmp	8002a976 <usart_set_sync_master_baudrate+0x68>
8002a956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a95a:	70 18       	ld.w	r8,r8[0x4]
8002a95c:	e0 18 fe cf 	andl	r8,0xfecf
8002a960:	10 99       	mov	r9,r8
8002a962:	a9 a9       	sbr	r9,0x8
8002a964:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a968:	91 19       	st.w	r8[0x4],r9
8002a96a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a96e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a972:	91 89       	st.w	r8[0x20],r9
8002a974:	30 08       	mov	r8,0
8002a976:	10 9c       	mov	r12,r8
8002a978:	2f cd       	sub	sp,-16
8002a97a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a97e <usart_set_sync_slave_baudrate>:
8002a97e:	eb cd 40 80 	pushm	r7,lr
8002a982:	1a 97       	mov	r7,sp
8002a984:	20 1d       	sub	sp,4
8002a986:	ef 4c ff fc 	st.w	r7[-4],r12
8002a98a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a98e:	70 18       	ld.w	r8,r8[0x4]
8002a990:	10 99       	mov	r9,r8
8002a992:	e8 19 01 30 	orl	r9,0x130
8002a996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a99a:	91 19       	st.w	r8[0x4],r9
8002a99c:	30 08       	mov	r8,0
8002a99e:	10 9c       	mov	r12,r8
8002a9a0:	2f fd       	sub	sp,-4
8002a9a2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a9a6 <usart_set_iso7816_clock>:
8002a9a6:	eb cd 40 80 	pushm	r7,lr
8002a9aa:	1a 97       	mov	r7,sp
8002a9ac:	20 4d       	sub	sp,16
8002a9ae:	ef 4c ff f8 	st.w	r7[-8],r12
8002a9b2:	ef 4b ff f4 	st.w	r7[-12],r11
8002a9b6:	ef 4a ff f0 	st.w	r7[-16],r10
8002a9ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a9be:	f0 09 16 01 	lsr	r9,r8,0x1
8002a9c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a9c6:	f2 08 00 08 	add	r8,r9,r8
8002a9ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a9ce:	f0 09 0d 08 	divu	r8,r8,r9
8002a9d2:	ef 48 ff fc 	st.w	r7[-4],r8
8002a9d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9da:	58 08       	cp.w	r8,0
8002a9dc:	c0 70       	breq	8002a9ea <usart_set_iso7816_clock+0x44>
8002a9de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9e2:	e0 48 ff ff 	cp.w	r8,65535
8002a9e6:	e0 88 00 04 	brls	8002a9ee <usart_set_iso7816_clock+0x48>
8002a9ea:	30 18       	mov	r8,1
8002a9ec:	c1 28       	rjmp	8002aa10 <usart_set_iso7816_clock+0x6a>
8002a9ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9f2:	70 18       	ld.w	r8,r8[0x4]
8002a9f4:	10 99       	mov	r9,r8
8002a9f6:	e4 19 ff f7 	andh	r9,0xfff7
8002a9fa:	e0 19 fe cf 	andl	r9,0xfecf
8002a9fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa02:	91 19       	st.w	r8[0x4],r9
8002aa04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa08:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa0c:	91 89       	st.w	r8[0x20],r9
8002aa0e:	30 08       	mov	r8,0
8002aa10:	10 9c       	mov	r12,r8
8002aa12:	2f cd       	sub	sp,-16
8002aa14:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aa18 <usart_set_spi_master_baudrate>:
8002aa18:	eb cd 40 80 	pushm	r7,lr
8002aa1c:	1a 97       	mov	r7,sp
8002aa1e:	20 4d       	sub	sp,16
8002aa20:	ef 4c ff f8 	st.w	r7[-8],r12
8002aa24:	ef 4b ff f4 	st.w	r7[-12],r11
8002aa28:	ef 4a ff f0 	st.w	r7[-16],r10
8002aa2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa30:	f0 09 16 01 	lsr	r9,r8,0x1
8002aa34:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002aa38:	f2 08 00 08 	add	r8,r9,r8
8002aa3c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002aa40:	f0 09 0d 08 	divu	r8,r8,r9
8002aa44:	ef 48 ff fc 	st.w	r7[-4],r8
8002aa48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa4c:	58 38       	cp.w	r8,3
8002aa4e:	e0 88 00 08 	brls	8002aa5e <usart_set_spi_master_baudrate+0x46>
8002aa52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa56:	e0 48 ff ff 	cp.w	r8,65535
8002aa5a:	e0 88 00 04 	brls	8002aa62 <usart_set_spi_master_baudrate+0x4a>
8002aa5e:	30 18       	mov	r8,1
8002aa60:	c1 08       	rjmp	8002aa80 <usart_set_spi_master_baudrate+0x68>
8002aa62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa66:	70 18       	ld.w	r8,r8[0x4]
8002aa68:	10 99       	mov	r9,r8
8002aa6a:	e0 19 ff cf 	andl	r9,0xffcf
8002aa6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa72:	91 19       	st.w	r8[0x4],r9
8002aa74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa7c:	91 89       	st.w	r8[0x20],r9
8002aa7e:	30 08       	mov	r8,0
8002aa80:	10 9c       	mov	r12,r8
8002aa82:	2f cd       	sub	sp,-16
8002aa84:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aa88 <usart_set_spi_slave_baudrate>:
8002aa88:	eb cd 40 80 	pushm	r7,lr
8002aa8c:	1a 97       	mov	r7,sp
8002aa8e:	20 1d       	sub	sp,4
8002aa90:	ef 4c ff fc 	st.w	r7[-4],r12
8002aa94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa98:	70 18       	ld.w	r8,r8[0x4]
8002aa9a:	10 99       	mov	r9,r8
8002aa9c:	e8 19 00 30 	orl	r9,0x30
8002aaa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaa4:	91 19       	st.w	r8[0x4],r9
8002aaa6:	30 08       	mov	r8,0
8002aaa8:	10 9c       	mov	r12,r8
8002aaaa:	2f fd       	sub	sp,-4
8002aaac:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aab0 <usart_reset>:
8002aab0:	eb cd 40 c0 	pushm	r6-r7,lr
8002aab4:	1a 97       	mov	r7,sp
8002aab6:	20 2d       	sub	sp,8
8002aab8:	49 a6       	lddpc	r6,8002ab20 <usart_reset+0x70>
8002aaba:	1e 26       	rsub	r6,pc
8002aabc:	ef 4c ff f8 	st.w	r7[-8],r12
8002aac0:	e1 b8 00 00 	mfsr	r8,0x0
8002aac4:	10 9c       	mov	r12,r8
8002aac6:	ca be       	rcall	8002a81c <cpu_irq_is_enabled_flags>
8002aac8:	18 98       	mov	r8,r12
8002aaca:	ef 68 ff ff 	st.b	r7[-1],r8
8002aace:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002aad2:	30 08       	mov	r8,0
8002aad4:	f0 09 18 00 	cp.b	r9,r8
8002aad8:	c0 20       	breq	8002aadc <usart_reset+0x2c>
8002aada:	d3 03       	ssrf	0x10
8002aadc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aae0:	3f f9       	mov	r9,-1
8002aae2:	91 39       	st.w	r8[0xc],r9
8002aae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aae8:	70 58       	ld.w	r8,r8[0x14]
8002aaea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002aaee:	30 08       	mov	r8,0
8002aaf0:	f0 09 18 00 	cp.b	r9,r8
8002aaf4:	c0 20       	breq	8002aaf8 <usart_reset+0x48>
8002aaf6:	d5 03       	csrf	0x10
8002aaf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aafc:	30 09       	mov	r9,0
8002aafe:	91 19       	st.w	r8[0x4],r9
8002ab00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab04:	30 09       	mov	r9,0
8002ab06:	91 99       	st.w	r8[0x24],r9
8002ab08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab0c:	30 09       	mov	r9,0
8002ab0e:	91 a9       	st.w	r8[0x28],r9
8002ab10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab14:	ea 69 61 0c 	mov	r9,680204
8002ab18:	91 09       	st.w	r8[0x0],r9
8002ab1a:	2f ed       	sub	sp,-8
8002ab1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab20:	80 02       	ld.sh	r2,r0[0x0]
8002ab22:	a9 3e       	mul	lr,r4

8002ab24 <usart_init_rs232>:
8002ab24:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab28:	1a 97       	mov	r7,sp
8002ab2a:	20 3d       	sub	sp,12
8002ab2c:	4d 86       	lddpc	r6,8002ac8c <usart_init_rs232+0x168>
8002ab2e:	1e 26       	rsub	r6,pc
8002ab30:	ef 4c ff fc 	st.w	r7[-4],r12
8002ab34:	ef 4b ff f8 	st.w	r7[-8],r11
8002ab38:	ef 4a ff f4 	st.w	r7[-12],r10
8002ab3c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ab40:	f0 16 00 4d 	mcall	r6[308]
8002ab44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab48:	58 08       	cp.w	r8,0
8002ab4a:	c3 80       	breq	8002abba <usart_init_rs232+0x96>
8002ab4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab50:	11 c9       	ld.ub	r9,r8[0x4]
8002ab52:	30 48       	mov	r8,4
8002ab54:	f0 09 18 00 	cp.b	r9,r8
8002ab58:	e0 88 00 31 	brls	8002abba <usart_init_rs232+0x96>
8002ab5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab60:	11 c9       	ld.ub	r9,r8[0x4]
8002ab62:	30 98       	mov	r8,9
8002ab64:	f0 09 18 00 	cp.b	r9,r8
8002ab68:	e0 8b 00 29 	brhi	8002abba <usart_init_rs232+0x96>
8002ab6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab70:	11 d9       	ld.ub	r9,r8[0x5]
8002ab72:	30 78       	mov	r8,7
8002ab74:	f0 09 18 00 	cp.b	r9,r8
8002ab78:	e0 8b 00 21 	brhi	8002abba <usart_init_rs232+0x96>
8002ab7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab80:	90 39       	ld.sh	r9,r8[0x6]
8002ab82:	e0 68 01 01 	mov	r8,257
8002ab86:	f0 09 19 00 	cp.h	r9,r8
8002ab8a:	e0 8b 00 18 	brhi	8002abba <usart_init_rs232+0x96>
8002ab8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab92:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ab96:	30 38       	mov	r8,3
8002ab98:	f0 09 18 00 	cp.b	r9,r8
8002ab9c:	e0 8b 00 0f 	brhi	8002abba <usart_init_rs232+0x96>
8002aba0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002aba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aba8:	70 08       	ld.w	r8,r8[0x0]
8002abaa:	12 9a       	mov	r10,r9
8002abac:	10 9b       	mov	r11,r8
8002abae:	ee fc ff fc 	ld.w	r12,r7[-4]
8002abb2:	c4 5e       	rcall	8002a83c <usart_set_async_baudrate>
8002abb4:	18 98       	mov	r8,r12
8002abb6:	58 18       	cp.w	r8,1
8002abb8:	c0 31       	brne	8002abbe <usart_init_rs232+0x9a>
8002abba:	30 18       	mov	r8,1
8002abbc:	c6 48       	rjmp	8002ac84 <usart_init_rs232+0x160>
8002abbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abc2:	11 c9       	ld.ub	r9,r8[0x4]
8002abc4:	30 98       	mov	r8,9
8002abc6:	f0 09 18 00 	cp.b	r9,r8
8002abca:	c0 a1       	brne	8002abde <usart_init_rs232+0xba>
8002abcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abd0:	70 18       	ld.w	r8,r8[0x4]
8002abd2:	10 99       	mov	r9,r8
8002abd4:	b1 b9       	sbr	r9,0x11
8002abd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abda:	91 19       	st.w	r8[0x4],r9
8002abdc:	c0 d8       	rjmp	8002abf6 <usart_init_rs232+0xd2>
8002abde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abe2:	70 19       	ld.w	r9,r8[0x4]
8002abe4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abe8:	11 c8       	ld.ub	r8,r8[0x4]
8002abea:	20 58       	sub	r8,5
8002abec:	a7 68       	lsl	r8,0x6
8002abee:	10 49       	or	r9,r8
8002abf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abf4:	91 19       	st.w	r8[0x4],r9
8002abf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abfa:	70 19       	ld.w	r9,r8[0x4]
8002abfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac00:	11 d8       	ld.ub	r8,r8[0x5]
8002ac02:	f0 0a 15 09 	lsl	r10,r8,0x9
8002ac06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac0a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002ac0e:	af 68       	lsl	r8,0xe
8002ac10:	f5 e8 10 08 	or	r8,r10,r8
8002ac14:	10 49       	or	r9,r8
8002ac16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac1a:	91 19       	st.w	r8[0x4],r9
8002ac1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac20:	90 39       	ld.sh	r9,r8[0x6]
8002ac22:	30 28       	mov	r8,2
8002ac24:	f0 09 19 00 	cp.h	r9,r8
8002ac28:	e0 88 00 14 	brls	8002ac50 <usart_init_rs232+0x12c>
8002ac2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac30:	70 18       	ld.w	r8,r8[0x4]
8002ac32:	10 99       	mov	r9,r8
8002ac34:	ad b9       	sbr	r9,0xd
8002ac36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac3a:	91 19       	st.w	r8[0x4],r9
8002ac3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac40:	90 38       	ld.sh	r8,r8[0x6]
8002ac42:	5c 78       	castu.h	r8
8002ac44:	20 28       	sub	r8,2
8002ac46:	10 99       	mov	r9,r8
8002ac48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac4c:	91 a9       	st.w	r8[0x28],r9
8002ac4e:	c0 d8       	rjmp	8002ac68 <usart_init_rs232+0x144>
8002ac50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac54:	70 19       	ld.w	r9,r8[0x4]
8002ac56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac5a:	90 38       	ld.sh	r8,r8[0x6]
8002ac5c:	5c 78       	castu.h	r8
8002ac5e:	ad 68       	lsl	r8,0xc
8002ac60:	10 49       	or	r9,r8
8002ac62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac66:	91 19       	st.w	r8[0x4],r9
8002ac68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac6c:	70 18       	ld.w	r8,r8[0x4]
8002ac6e:	10 99       	mov	r9,r8
8002ac70:	e0 19 ff f0 	andl	r9,0xfff0
8002ac74:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac78:	91 19       	st.w	r8[0x4],r9
8002ac7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac7e:	35 09       	mov	r9,80
8002ac80:	91 09       	st.w	r8[0x0],r9
8002ac82:	30 08       	mov	r8,0
8002ac84:	10 9c       	mov	r12,r8
8002ac86:	2f dd       	sub	sp,-12
8002ac88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ac8c:	80 02       	ld.sh	r2,r0[0x0]
8002ac8e:	a9 b2       	sbr	r2,0x9

8002ac90 <usart_init_rs232_tx_only>:
8002ac90:	eb cd 40 c0 	pushm	r6-r7,lr
8002ac94:	1a 97       	mov	r7,sp
8002ac96:	20 3d       	sub	sp,12
8002ac98:	4d c6       	lddpc	r6,8002ae08 <usart_init_rs232_tx_only+0x178>
8002ac9a:	1e 26       	rsub	r6,pc
8002ac9c:	ef 4c ff fc 	st.w	r7[-4],r12
8002aca0:	ef 4b ff f8 	st.w	r7[-8],r11
8002aca4:	ef 4a ff f4 	st.w	r7[-12],r10
8002aca8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002acac:	f0 16 00 4d 	mcall	r6[308]
8002acb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acb4:	58 08       	cp.w	r8,0
8002acb6:	c4 00       	breq	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002acb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acbc:	11 c9       	ld.ub	r9,r8[0x4]
8002acbe:	30 48       	mov	r8,4
8002acc0:	f0 09 18 00 	cp.b	r9,r8
8002acc4:	e0 88 00 39 	brls	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002acc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002accc:	11 c9       	ld.ub	r9,r8[0x4]
8002acce:	30 98       	mov	r8,9
8002acd0:	f0 09 18 00 	cp.b	r9,r8
8002acd4:	e0 8b 00 31 	brhi	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002acd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acdc:	11 d9       	ld.ub	r9,r8[0x5]
8002acde:	30 78       	mov	r8,7
8002ace0:	f0 09 18 00 	cp.b	r9,r8
8002ace4:	e0 8b 00 29 	brhi	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002ace8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acec:	90 39       	ld.sh	r9,r8[0x6]
8002acee:	30 18       	mov	r8,1
8002acf0:	f0 09 19 00 	cp.h	r9,r8
8002acf4:	c2 10       	breq	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002acf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acfa:	90 39       	ld.sh	r9,r8[0x6]
8002acfc:	e0 68 01 01 	mov	r8,257
8002ad00:	f0 09 19 00 	cp.h	r9,r8
8002ad04:	e0 8b 00 19 	brhi	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002ad08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad0c:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ad10:	30 38       	mov	r8,3
8002ad12:	f0 09 18 00 	cp.b	r9,r8
8002ad16:	e0 8b 00 10 	brhi	8002ad36 <usart_init_rs232_tx_only+0xa6>
8002ad1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ad1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad22:	70 08       	ld.w	r8,r8[0x0]
8002ad24:	12 9a       	mov	r10,r9
8002ad26:	10 9b       	mov	r11,r8
8002ad28:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ad2c:	fe b0 fd f1 	rcall	8002a90e <usart_set_sync_master_baudrate>
8002ad30:	18 98       	mov	r8,r12
8002ad32:	58 18       	cp.w	r8,1
8002ad34:	c0 31       	brne	8002ad3a <usart_init_rs232_tx_only+0xaa>
8002ad36:	30 18       	mov	r8,1
8002ad38:	c6 48       	rjmp	8002ae00 <usart_init_rs232_tx_only+0x170>
8002ad3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad3e:	11 c9       	ld.ub	r9,r8[0x4]
8002ad40:	30 98       	mov	r8,9
8002ad42:	f0 09 18 00 	cp.b	r9,r8
8002ad46:	c0 a1       	brne	8002ad5a <usart_init_rs232_tx_only+0xca>
8002ad48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad4c:	70 18       	ld.w	r8,r8[0x4]
8002ad4e:	10 99       	mov	r9,r8
8002ad50:	b1 b9       	sbr	r9,0x11
8002ad52:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad56:	91 19       	st.w	r8[0x4],r9
8002ad58:	c0 d8       	rjmp	8002ad72 <usart_init_rs232_tx_only+0xe2>
8002ad5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad5e:	70 19       	ld.w	r9,r8[0x4]
8002ad60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad64:	11 c8       	ld.ub	r8,r8[0x4]
8002ad66:	20 58       	sub	r8,5
8002ad68:	a7 68       	lsl	r8,0x6
8002ad6a:	10 49       	or	r9,r8
8002ad6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad70:	91 19       	st.w	r8[0x4],r9
8002ad72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad76:	70 19       	ld.w	r9,r8[0x4]
8002ad78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad7c:	11 d8       	ld.ub	r8,r8[0x5]
8002ad7e:	f0 0a 15 09 	lsl	r10,r8,0x9
8002ad82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad86:	f1 38 00 08 	ld.ub	r8,r8[8]
8002ad8a:	af 68       	lsl	r8,0xe
8002ad8c:	f5 e8 10 08 	or	r8,r10,r8
8002ad90:	10 49       	or	r9,r8
8002ad92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad96:	91 19       	st.w	r8[0x4],r9
8002ad98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad9c:	90 39       	ld.sh	r9,r8[0x6]
8002ad9e:	30 28       	mov	r8,2
8002ada0:	f0 09 19 00 	cp.h	r9,r8
8002ada4:	e0 88 00 14 	brls	8002adcc <usart_init_rs232_tx_only+0x13c>
8002ada8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adac:	70 18       	ld.w	r8,r8[0x4]
8002adae:	10 99       	mov	r9,r8
8002adb0:	ad b9       	sbr	r9,0xd
8002adb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adb6:	91 19       	st.w	r8[0x4],r9
8002adb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adbc:	90 38       	ld.sh	r8,r8[0x6]
8002adbe:	5c 78       	castu.h	r8
8002adc0:	20 28       	sub	r8,2
8002adc2:	10 99       	mov	r9,r8
8002adc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adc8:	91 a9       	st.w	r8[0x28],r9
8002adca:	c0 d8       	rjmp	8002ade4 <usart_init_rs232_tx_only+0x154>
8002adcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002add0:	70 19       	ld.w	r9,r8[0x4]
8002add2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002add6:	90 38       	ld.sh	r8,r8[0x6]
8002add8:	5c 78       	castu.h	r8
8002adda:	ad 68       	lsl	r8,0xc
8002addc:	10 49       	or	r9,r8
8002adde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ade2:	91 19       	st.w	r8[0x4],r9
8002ade4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ade8:	70 18       	ld.w	r8,r8[0x4]
8002adea:	10 99       	mov	r9,r8
8002adec:	e0 19 ff f0 	andl	r9,0xfff0
8002adf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adf4:	91 19       	st.w	r8[0x4],r9
8002adf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adfa:	34 09       	mov	r9,64
8002adfc:	91 09       	st.w	r8[0x0],r9
8002adfe:	30 08       	mov	r8,0
8002ae00:	10 9c       	mov	r12,r8
8002ae02:	2f dd       	sub	sp,-12
8002ae04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ae08:	80 02       	ld.sh	r2,r0[0x0]
8002ae0a:	ab 1e       	ld.d	lr,--r5

8002ae0c <usart_init_hw_handshaking>:
8002ae0c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ae10:	1a 97       	mov	r7,sp
8002ae12:	20 3d       	sub	sp,12
8002ae14:	49 26       	lddpc	r6,8002ae5c <usart_init_hw_handshaking+0x50>
8002ae16:	1e 26       	rsub	r6,pc
8002ae18:	ef 4c ff fc 	st.w	r7[-4],r12
8002ae1c:	ef 4b ff f8 	st.w	r7[-8],r11
8002ae20:	ef 4a ff f4 	st.w	r7[-12],r10
8002ae24:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ae28:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ae2c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae30:	f0 16 00 6a 	mcall	r6[424]
8002ae34:	18 98       	mov	r8,r12
8002ae36:	58 18       	cp.w	r8,1
8002ae38:	c0 31       	brne	8002ae3e <usart_init_hw_handshaking+0x32>
8002ae3a:	30 18       	mov	r8,1
8002ae3c:	c0 c8       	rjmp	8002ae54 <usart_init_hw_handshaking+0x48>
8002ae3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae42:	70 18       	ld.w	r8,r8[0x4]
8002ae44:	e0 18 ff f0 	andl	r8,0xfff0
8002ae48:	10 99       	mov	r9,r8
8002ae4a:	a1 b9       	sbr	r9,0x1
8002ae4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae50:	91 19       	st.w	r8[0x4],r9
8002ae52:	30 08       	mov	r8,0
8002ae54:	10 9c       	mov	r12,r8
8002ae56:	2f dd       	sub	sp,-12
8002ae58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ae5c:	80 02       	ld.sh	r2,r0[0x0]
8002ae5e:	ac 9a       	st.b	r6[0x1],r10

8002ae60 <usart_init_modem>:
8002ae60:	eb cd 40 c0 	pushm	r6-r7,lr
8002ae64:	1a 97       	mov	r7,sp
8002ae66:	20 3d       	sub	sp,12
8002ae68:	49 36       	lddpc	r6,8002aeb4 <usart_init_modem+0x54>
8002ae6a:	1e 26       	rsub	r6,pc
8002ae6c:	ef 4c ff fc 	st.w	r7[-4],r12
8002ae70:	ef 4b ff f8 	st.w	r7[-8],r11
8002ae74:	ef 4a ff f4 	st.w	r7[-12],r10
8002ae78:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ae7c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ae80:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae84:	f0 16 00 6a 	mcall	r6[424]
8002ae88:	18 98       	mov	r8,r12
8002ae8a:	58 18       	cp.w	r8,1
8002ae8c:	c0 31       	brne	8002ae92 <usart_init_modem+0x32>
8002ae8e:	30 18       	mov	r8,1
8002ae90:	c0 d8       	rjmp	8002aeaa <usart_init_modem+0x4a>
8002ae92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae96:	70 18       	ld.w	r8,r8[0x4]
8002ae98:	e0 18 ff f0 	andl	r8,0xfff0
8002ae9c:	10 99       	mov	r9,r8
8002ae9e:	e8 19 00 03 	orl	r9,0x3
8002aea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aea6:	91 19       	st.w	r8[0x4],r9
8002aea8:	30 08       	mov	r8,0
8002aeaa:	10 9c       	mov	r12,r8
8002aeac:	2f dd       	sub	sp,-12
8002aeae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002aeb2:	00 00       	add	r0,r0
8002aeb4:	80 02       	ld.sh	r2,r0[0x0]
8002aeb6:	ac ee       	st.b	r6[0x6],lr

8002aeb8 <usart_init_sync_master>:
8002aeb8:	eb cd 40 c0 	pushm	r6-r7,lr
8002aebc:	1a 97       	mov	r7,sp
8002aebe:	20 3d       	sub	sp,12
8002aec0:	4d e6       	lddpc	r6,8002b038 <usart_init_sync_master+0x180>
8002aec2:	1e 26       	rsub	r6,pc
8002aec4:	ef 4c ff fc 	st.w	r7[-4],r12
8002aec8:	ef 4b ff f8 	st.w	r7[-8],r11
8002aecc:	ef 4a ff f4 	st.w	r7[-12],r10
8002aed0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002aed4:	f0 16 00 4d 	mcall	r6[308]
8002aed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aedc:	58 08       	cp.w	r8,0
8002aede:	c4 00       	breq	8002af5e <usart_init_sync_master+0xa6>
8002aee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aee4:	11 c9       	ld.ub	r9,r8[0x4]
8002aee6:	30 48       	mov	r8,4
8002aee8:	f0 09 18 00 	cp.b	r9,r8
8002aeec:	e0 88 00 39 	brls	8002af5e <usart_init_sync_master+0xa6>
8002aef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aef4:	11 c9       	ld.ub	r9,r8[0x4]
8002aef6:	30 98       	mov	r8,9
8002aef8:	f0 09 18 00 	cp.b	r9,r8
8002aefc:	e0 8b 00 31 	brhi	8002af5e <usart_init_sync_master+0xa6>
8002af00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af04:	11 d9       	ld.ub	r9,r8[0x5]
8002af06:	30 78       	mov	r8,7
8002af08:	f0 09 18 00 	cp.b	r9,r8
8002af0c:	e0 8b 00 29 	brhi	8002af5e <usart_init_sync_master+0xa6>
8002af10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af14:	90 39       	ld.sh	r9,r8[0x6]
8002af16:	30 18       	mov	r8,1
8002af18:	f0 09 19 00 	cp.h	r9,r8
8002af1c:	c2 10       	breq	8002af5e <usart_init_sync_master+0xa6>
8002af1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af22:	90 39       	ld.sh	r9,r8[0x6]
8002af24:	e0 68 01 01 	mov	r8,257
8002af28:	f0 09 19 00 	cp.h	r9,r8
8002af2c:	e0 8b 00 19 	brhi	8002af5e <usart_init_sync_master+0xa6>
8002af30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af34:	f1 39 00 08 	ld.ub	r9,r8[8]
8002af38:	30 38       	mov	r8,3
8002af3a:	f0 09 18 00 	cp.b	r9,r8
8002af3e:	e0 8b 00 10 	brhi	8002af5e <usart_init_sync_master+0xa6>
8002af42:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002af46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af4a:	70 08       	ld.w	r8,r8[0x0]
8002af4c:	12 9a       	mov	r10,r9
8002af4e:	10 9b       	mov	r11,r8
8002af50:	ee fc ff fc 	ld.w	r12,r7[-4]
8002af54:	fe b0 fc dd 	rcall	8002a90e <usart_set_sync_master_baudrate>
8002af58:	18 98       	mov	r8,r12
8002af5a:	58 18       	cp.w	r8,1
8002af5c:	c0 31       	brne	8002af62 <usart_init_sync_master+0xaa>
8002af5e:	30 18       	mov	r8,1
8002af60:	c6 78       	rjmp	8002b02e <usart_init_sync_master+0x176>
8002af62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af66:	11 c9       	ld.ub	r9,r8[0x4]
8002af68:	30 98       	mov	r8,9
8002af6a:	f0 09 18 00 	cp.b	r9,r8
8002af6e:	c0 a1       	brne	8002af82 <usart_init_sync_master+0xca>
8002af70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af74:	70 18       	ld.w	r8,r8[0x4]
8002af76:	10 99       	mov	r9,r8
8002af78:	b1 b9       	sbr	r9,0x11
8002af7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af7e:	91 19       	st.w	r8[0x4],r9
8002af80:	c0 d8       	rjmp	8002af9a <usart_init_sync_master+0xe2>
8002af82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af86:	70 19       	ld.w	r9,r8[0x4]
8002af88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af8c:	11 c8       	ld.ub	r8,r8[0x4]
8002af8e:	20 58       	sub	r8,5
8002af90:	a7 68       	lsl	r8,0x6
8002af92:	10 49       	or	r9,r8
8002af94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af98:	91 19       	st.w	r8[0x4],r9
8002af9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af9e:	70 19       	ld.w	r9,r8[0x4]
8002afa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afa4:	11 d8       	ld.ub	r8,r8[0x5]
8002afa6:	f0 0a 15 09 	lsl	r10,r8,0x9
8002afaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afae:	f1 38 00 08 	ld.ub	r8,r8[8]
8002afb2:	af 68       	lsl	r8,0xe
8002afb4:	f5 e8 10 08 	or	r8,r10,r8
8002afb8:	10 49       	or	r9,r8
8002afba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afbe:	91 19       	st.w	r8[0x4],r9
8002afc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afc4:	90 39       	ld.sh	r9,r8[0x6]
8002afc6:	30 28       	mov	r8,2
8002afc8:	f0 09 19 00 	cp.h	r9,r8
8002afcc:	e0 88 00 14 	brls	8002aff4 <usart_init_sync_master+0x13c>
8002afd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afd4:	70 18       	ld.w	r8,r8[0x4]
8002afd6:	10 99       	mov	r9,r8
8002afd8:	ad b9       	sbr	r9,0xd
8002afda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afde:	91 19       	st.w	r8[0x4],r9
8002afe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afe4:	90 38       	ld.sh	r8,r8[0x6]
8002afe6:	5c 78       	castu.h	r8
8002afe8:	20 28       	sub	r8,2
8002afea:	10 99       	mov	r9,r8
8002afec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aff0:	91 a9       	st.w	r8[0x28],r9
8002aff2:	c0 d8       	rjmp	8002b00c <usart_init_sync_master+0x154>
8002aff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aff8:	70 19       	ld.w	r9,r8[0x4]
8002affa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002affe:	90 38       	ld.sh	r8,r8[0x6]
8002b000:	5c 78       	castu.h	r8
8002b002:	ad 68       	lsl	r8,0xc
8002b004:	10 49       	or	r9,r8
8002b006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b00a:	91 19       	st.w	r8[0x4],r9
8002b00c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b010:	70 18       	ld.w	r8,r8[0x4]
8002b012:	e4 18 ff fb 	andh	r8,0xfffb
8002b016:	e0 18 ff f0 	andl	r8,0xfff0
8002b01a:	10 99       	mov	r9,r8
8002b01c:	b3 a9       	sbr	r9,0x12
8002b01e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b022:	91 19       	st.w	r8[0x4],r9
8002b024:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b028:	35 09       	mov	r9,80
8002b02a:	91 09       	st.w	r8[0x0],r9
8002b02c:	30 08       	mov	r8,0
8002b02e:	10 9c       	mov	r12,r8
8002b030:	2f dd       	sub	sp,-12
8002b032:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b036:	00 00       	add	r0,r0
8002b038:	80 02       	ld.sh	r2,r0[0x0]
8002b03a:	ad 46       	asr	r6,0xc

8002b03c <usart_init_sync_slave>:
8002b03c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b040:	1a 97       	mov	r7,sp
8002b042:	20 3d       	sub	sp,12
8002b044:	4d 96       	lddpc	r6,8002b1a8 <usart_init_sync_slave+0x16c>
8002b046:	1e 26       	rsub	r6,pc
8002b048:	ef 4c ff fc 	st.w	r7[-4],r12
8002b04c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b050:	ef 4a ff f4 	st.w	r7[-12],r10
8002b054:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b058:	f0 16 00 4d 	mcall	r6[308]
8002b05c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b060:	58 08       	cp.w	r8,0
8002b062:	c3 90       	breq	8002b0d4 <usart_init_sync_slave+0x98>
8002b064:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b068:	11 c9       	ld.ub	r9,r8[0x4]
8002b06a:	30 48       	mov	r8,4
8002b06c:	f0 09 18 00 	cp.b	r9,r8
8002b070:	e0 88 00 32 	brls	8002b0d4 <usart_init_sync_slave+0x98>
8002b074:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b078:	11 c9       	ld.ub	r9,r8[0x4]
8002b07a:	30 98       	mov	r8,9
8002b07c:	f0 09 18 00 	cp.b	r9,r8
8002b080:	e0 8b 00 2a 	brhi	8002b0d4 <usart_init_sync_slave+0x98>
8002b084:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b088:	11 d9       	ld.ub	r9,r8[0x5]
8002b08a:	30 78       	mov	r8,7
8002b08c:	f0 09 18 00 	cp.b	r9,r8
8002b090:	e0 8b 00 22 	brhi	8002b0d4 <usart_init_sync_slave+0x98>
8002b094:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b098:	90 39       	ld.sh	r9,r8[0x6]
8002b09a:	30 18       	mov	r8,1
8002b09c:	f0 09 19 00 	cp.h	r9,r8
8002b0a0:	c1 a0       	breq	8002b0d4 <usart_init_sync_slave+0x98>
8002b0a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0a6:	90 39       	ld.sh	r9,r8[0x6]
8002b0a8:	e0 68 01 01 	mov	r8,257
8002b0ac:	f0 09 19 00 	cp.h	r9,r8
8002b0b0:	e0 8b 00 12 	brhi	8002b0d4 <usart_init_sync_slave+0x98>
8002b0b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0b8:	f1 39 00 08 	ld.ub	r9,r8[8]
8002b0bc:	30 38       	mov	r8,3
8002b0be:	f0 09 18 00 	cp.b	r9,r8
8002b0c2:	e0 8b 00 09 	brhi	8002b0d4 <usart_init_sync_slave+0x98>
8002b0c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b0ca:	fe b0 fc 5a 	rcall	8002a97e <usart_set_sync_slave_baudrate>
8002b0ce:	18 98       	mov	r8,r12
8002b0d0:	58 18       	cp.w	r8,1
8002b0d2:	c0 31       	brne	8002b0d8 <usart_init_sync_slave+0x9c>
8002b0d4:	30 18       	mov	r8,1
8002b0d6:	c6 48       	rjmp	8002b19e <usart_init_sync_slave+0x162>
8002b0d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0dc:	11 c9       	ld.ub	r9,r8[0x4]
8002b0de:	30 98       	mov	r8,9
8002b0e0:	f0 09 18 00 	cp.b	r9,r8
8002b0e4:	c0 a1       	brne	8002b0f8 <usart_init_sync_slave+0xbc>
8002b0e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0ea:	70 18       	ld.w	r8,r8[0x4]
8002b0ec:	10 99       	mov	r9,r8
8002b0ee:	b1 b9       	sbr	r9,0x11
8002b0f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0f4:	91 19       	st.w	r8[0x4],r9
8002b0f6:	c0 d8       	rjmp	8002b110 <usart_init_sync_slave+0xd4>
8002b0f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0fc:	70 19       	ld.w	r9,r8[0x4]
8002b0fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b102:	11 c8       	ld.ub	r8,r8[0x4]
8002b104:	20 58       	sub	r8,5
8002b106:	a7 68       	lsl	r8,0x6
8002b108:	10 49       	or	r9,r8
8002b10a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b10e:	91 19       	st.w	r8[0x4],r9
8002b110:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b114:	70 19       	ld.w	r9,r8[0x4]
8002b116:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b11a:	11 d8       	ld.ub	r8,r8[0x5]
8002b11c:	f0 0a 15 09 	lsl	r10,r8,0x9
8002b120:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b124:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b128:	af 68       	lsl	r8,0xe
8002b12a:	f5 e8 10 08 	or	r8,r10,r8
8002b12e:	10 49       	or	r9,r8
8002b130:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b134:	91 19       	st.w	r8[0x4],r9
8002b136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b13a:	90 39       	ld.sh	r9,r8[0x6]
8002b13c:	30 28       	mov	r8,2
8002b13e:	f0 09 19 00 	cp.h	r9,r8
8002b142:	e0 88 00 14 	brls	8002b16a <usart_init_sync_slave+0x12e>
8002b146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b14a:	70 18       	ld.w	r8,r8[0x4]
8002b14c:	10 99       	mov	r9,r8
8002b14e:	ad b9       	sbr	r9,0xd
8002b150:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b154:	91 19       	st.w	r8[0x4],r9
8002b156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b15a:	90 38       	ld.sh	r8,r8[0x6]
8002b15c:	5c 78       	castu.h	r8
8002b15e:	20 28       	sub	r8,2
8002b160:	10 99       	mov	r9,r8
8002b162:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b166:	91 a9       	st.w	r8[0x28],r9
8002b168:	c0 d8       	rjmp	8002b182 <usart_init_sync_slave+0x146>
8002b16a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b16e:	70 19       	ld.w	r9,r8[0x4]
8002b170:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b174:	90 38       	ld.sh	r8,r8[0x6]
8002b176:	5c 78       	castu.h	r8
8002b178:	ad 68       	lsl	r8,0xc
8002b17a:	10 49       	or	r9,r8
8002b17c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b180:	91 19       	st.w	r8[0x4],r9
8002b182:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b186:	70 18       	ld.w	r8,r8[0x4]
8002b188:	10 99       	mov	r9,r8
8002b18a:	e0 19 ff f0 	andl	r9,0xfff0
8002b18e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b192:	91 19       	st.w	r8[0x4],r9
8002b194:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b198:	35 09       	mov	r9,80
8002b19a:	91 09       	st.w	r8[0x0],r9
8002b19c:	30 08       	mov	r8,0
8002b19e:	10 9c       	mov	r12,r8
8002b1a0:	2f dd       	sub	sp,-12
8002b1a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b1a6:	00 00       	add	r0,r0
8002b1a8:	80 02       	ld.sh	r2,r0[0x0]
8002b1aa:	ae ca       	st.b	r7[0x4],r10

8002b1ac <usart_init_rs485>:
8002b1ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002b1b0:	1a 97       	mov	r7,sp
8002b1b2:	20 3d       	sub	sp,12
8002b1b4:	49 26       	lddpc	r6,8002b1fc <usart_init_rs485+0x50>
8002b1b6:	1e 26       	rsub	r6,pc
8002b1b8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b1bc:	ef 4b ff f8 	st.w	r7[-8],r11
8002b1c0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b1c4:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b1c8:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b1cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b1d0:	f0 16 00 6a 	mcall	r6[424]
8002b1d4:	18 98       	mov	r8,r12
8002b1d6:	58 18       	cp.w	r8,1
8002b1d8:	c0 31       	brne	8002b1de <usart_init_rs485+0x32>
8002b1da:	30 18       	mov	r8,1
8002b1dc:	c0 c8       	rjmp	8002b1f4 <usart_init_rs485+0x48>
8002b1de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1e2:	70 18       	ld.w	r8,r8[0x4]
8002b1e4:	e0 18 ff f0 	andl	r8,0xfff0
8002b1e8:	10 99       	mov	r9,r8
8002b1ea:	a1 a9       	sbr	r9,0x0
8002b1ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1f0:	91 19       	st.w	r8[0x4],r9
8002b1f2:	30 08       	mov	r8,0
8002b1f4:	10 9c       	mov	r12,r8
8002b1f6:	2f dd       	sub	sp,-12
8002b1f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b1fc:	80 02       	ld.sh	r2,r0[0x0]
8002b1fe:	b0 3a       	st.h	r8[0x6],r10

8002b200 <usart_init_IrDA>:
8002b200:	eb cd 40 c0 	pushm	r6-r7,lr
8002b204:	1a 97       	mov	r7,sp
8002b206:	20 4d       	sub	sp,16
8002b208:	49 96       	lddpc	r6,8002b26c <usart_init_IrDA+0x6c>
8002b20a:	1e 26       	rsub	r6,pc
8002b20c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b210:	ef 4b ff f8 	st.w	r7[-8],r11
8002b214:	ef 4a ff f4 	st.w	r7[-12],r10
8002b218:	12 98       	mov	r8,r9
8002b21a:	ef 68 ff f0 	st.b	r7[-16],r8
8002b21e:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b222:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b226:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b22a:	f0 16 00 6a 	mcall	r6[424]
8002b22e:	18 98       	mov	r8,r12
8002b230:	58 18       	cp.w	r8,1
8002b232:	c0 31       	brne	8002b238 <usart_init_IrDA+0x38>
8002b234:	30 18       	mov	r8,1
8002b236:	c1 78       	rjmp	8002b264 <usart_init_IrDA+0x64>
8002b238:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b23c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b240:	f1 49 00 4c 	st.w	r8[76],r9
8002b244:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b248:	70 18       	ld.w	r8,r8[0x4]
8002b24a:	e4 18 ef ff 	andh	r8,0xefff
8002b24e:	e0 18 ff f0 	andl	r8,0xfff0
8002b252:	10 99       	mov	r9,r8
8002b254:	ea 19 10 00 	orh	r9,0x1000
8002b258:	e8 19 00 08 	orl	r9,0x8
8002b25c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b260:	91 19       	st.w	r8[0x4],r9
8002b262:	30 08       	mov	r8,0
8002b264:	10 9c       	mov	r12,r8
8002b266:	2f cd       	sub	sp,-16
8002b268:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b26c:	80 02       	ld.sh	r2,r0[0x0]
8002b26e:	b0 8e       	st.b	r8[0x0],lr

8002b270 <usart_init_iso7816>:
8002b270:	eb cd 40 c0 	pushm	r6-r7,lr
8002b274:	1a 97       	mov	r7,sp
8002b276:	20 5d       	sub	sp,20
8002b278:	4c 46       	lddpc	r6,8002b388 <usart_init_iso7816+0x118>
8002b27a:	1e 26       	rsub	r6,pc
8002b27c:	ef 4c ff f8 	st.w	r7[-8],r12
8002b280:	ef 4b ff f4 	st.w	r7[-12],r11
8002b284:	ef 4a ff f0 	st.w	r7[-16],r10
8002b288:	ef 49 ff ec 	st.w	r7[-20],r9
8002b28c:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b290:	f0 16 00 4d 	mcall	r6[308]
8002b294:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b298:	58 08       	cp.w	r8,0
8002b29a:	c0 90       	breq	8002b2ac <usart_init_iso7816+0x3c>
8002b29c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2a0:	11 e9       	ld.ub	r9,r8[0x6]
8002b2a2:	30 18       	mov	r8,1
8002b2a4:	f0 09 18 00 	cp.b	r9,r8
8002b2a8:	e0 88 00 04 	brls	8002b2b0 <usart_init_iso7816+0x40>
8002b2ac:	30 18       	mov	r8,1
8002b2ae:	c6 98       	rjmp	8002b380 <usart_init_iso7816+0x110>
8002b2b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b2b4:	58 08       	cp.w	r8,0
8002b2b6:	c0 c1       	brne	8002b2ce <usart_init_iso7816+0x5e>
8002b2b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2bc:	70 58       	ld.w	r8,r8[0x14]
8002b2be:	b1 68       	lsl	r8,0x10
8002b2c0:	e8 18 20 04 	orl	r8,0x2004
8002b2c4:	10 99       	mov	r9,r8
8002b2c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2ca:	91 19       	st.w	r8[0x4],r9
8002b2cc:	c1 98       	rjmp	8002b2fe <usart_init_iso7816+0x8e>
8002b2ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b2d2:	58 18       	cp.w	r8,1
8002b2d4:	c1 31       	brne	8002b2fa <usart_init_iso7816+0x8a>
8002b2d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2da:	70 58       	ld.w	r8,r8[0x14]
8002b2dc:	58 08       	cp.w	r8,0
8002b2de:	c0 71       	brne	8002b2ec <usart_init_iso7816+0x7c>
8002b2e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2e4:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b2e8:	58 08       	cp.w	r8,0
8002b2ea:	c0 30       	breq	8002b2f0 <usart_init_iso7816+0x80>
8002b2ec:	30 18       	mov	r8,1
8002b2ee:	c4 98       	rjmp	8002b380 <usart_init_iso7816+0x110>
8002b2f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2f4:	30 69       	mov	r9,6
8002b2f6:	91 19       	st.w	r8[0x4],r9
8002b2f8:	c0 38       	rjmp	8002b2fe <usart_init_iso7816+0x8e>
8002b2fa:	30 18       	mov	r8,1
8002b2fc:	c4 28       	rjmp	8002b380 <usart_init_iso7816+0x110>
8002b2fe:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002b302:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b306:	70 08       	ld.w	r8,r8[0x0]
8002b308:	12 9a       	mov	r10,r9
8002b30a:	10 9b       	mov	r11,r8
8002b30c:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b310:	fe b0 fb 4b 	rcall	8002a9a6 <usart_set_iso7816_clock>
8002b314:	18 98       	mov	r8,r12
8002b316:	58 18       	cp.w	r8,1
8002b318:	c0 31       	brne	8002b31e <usart_init_iso7816+0xae>
8002b31a:	30 18       	mov	r8,1
8002b31c:	c3 28       	rjmp	8002b380 <usart_init_iso7816+0x110>
8002b31e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b322:	90 28       	ld.sh	r8,r8[0x4]
8002b324:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002b328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b32c:	f1 49 00 40 	st.w	r8[64],r9
8002b330:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b334:	70 19       	ld.w	r9,r8[0x4]
8002b336:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b33a:	11 e8       	ld.ub	r8,r8[0x6]
8002b33c:	a9 78       	lsl	r8,0x9
8002b33e:	10 9a       	mov	r10,r8
8002b340:	b3 aa       	sbr	r10,0x12
8002b342:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b346:	70 28       	ld.w	r8,r8[0x8]
8002b348:	b5 68       	lsl	r8,0x14
8002b34a:	10 4a       	or	r10,r8
8002b34c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b350:	70 38       	ld.w	r8,r8[0xc]
8002b352:	b5 78       	lsl	r8,0x15
8002b354:	10 4a       	or	r10,r8
8002b356:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b35a:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b35e:	b9 68       	lsl	r8,0x18
8002b360:	f5 e8 10 08 	or	r8,r10,r8
8002b364:	10 49       	or	r9,r8
8002b366:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b36a:	91 19       	st.w	r8[0x4],r9
8002b36c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b370:	ef 48 ff fc 	st.w	r7[-4],r8
8002b374:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b378:	e0 69 00 90 	mov	r9,144
8002b37c:	91 09       	st.w	r8[0x0],r9
8002b37e:	30 08       	mov	r8,0
8002b380:	10 9c       	mov	r12,r8
8002b382:	2f bd       	sub	sp,-20
8002b384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b388:	80 02       	ld.sh	r2,r0[0x0]
8002b38a:	b0 fe       	st.b	r8[0x7],lr

8002b38c <usart_init_lin_master>:
8002b38c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b390:	1a 97       	mov	r7,sp
8002b392:	20 3d       	sub	sp,12
8002b394:	49 66       	lddpc	r6,8002b3ec <usart_init_lin_master+0x60>
8002b396:	1e 26       	rsub	r6,pc
8002b398:	ef 4c ff fc 	st.w	r7[-4],r12
8002b39c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b3a0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b3a4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b3a8:	f0 16 00 4d 	mcall	r6[308]
8002b3ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b3b0:	10 9a       	mov	r10,r8
8002b3b2:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b3b6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b3ba:	fe b0 fa 41 	rcall	8002a83c <usart_set_async_baudrate>
8002b3be:	18 98       	mov	r8,r12
8002b3c0:	58 18       	cp.w	r8,1
8002b3c2:	c0 31       	brne	8002b3c8 <usart_init_lin_master+0x3c>
8002b3c4:	30 18       	mov	r8,1
8002b3c6:	c0 f8       	rjmp	8002b3e4 <usart_init_lin_master+0x58>
8002b3c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3cc:	70 18       	ld.w	r8,r8[0x4]
8002b3ce:	10 99       	mov	r9,r8
8002b3d0:	e8 19 00 0a 	orl	r9,0xa
8002b3d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3d8:	91 19       	st.w	r8[0x4],r9
8002b3da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3de:	35 09       	mov	r9,80
8002b3e0:	91 09       	st.w	r8[0x0],r9
8002b3e2:	30 08       	mov	r8,0
8002b3e4:	10 9c       	mov	r12,r8
8002b3e6:	2f dd       	sub	sp,-12
8002b3e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b3ec:	80 02       	ld.sh	r2,r0[0x0]
8002b3ee:	b2 1a       	st.h	r9[0x2],r10

8002b3f0 <usart_init_lin_slave>:
8002b3f0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b3f4:	1a 97       	mov	r7,sp
8002b3f6:	20 3d       	sub	sp,12
8002b3f8:	49 66       	lddpc	r6,8002b450 <usart_init_lin_slave+0x60>
8002b3fa:	1e 26       	rsub	r6,pc
8002b3fc:	ef 4c ff fc 	st.w	r7[-4],r12
8002b400:	ef 4b ff f8 	st.w	r7[-8],r11
8002b404:	ef 4a ff f4 	st.w	r7[-12],r10
8002b408:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b40c:	f0 16 00 4d 	mcall	r6[308]
8002b410:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b414:	10 9a       	mov	r10,r8
8002b416:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b41a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b41e:	fe b0 fa 0f 	rcall	8002a83c <usart_set_async_baudrate>
8002b422:	18 98       	mov	r8,r12
8002b424:	58 18       	cp.w	r8,1
8002b426:	c0 31       	brne	8002b42c <usart_init_lin_slave+0x3c>
8002b428:	30 18       	mov	r8,1
8002b42a:	c0 f8       	rjmp	8002b448 <usart_init_lin_slave+0x58>
8002b42c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b430:	70 18       	ld.w	r8,r8[0x4]
8002b432:	10 99       	mov	r9,r8
8002b434:	e8 19 00 0b 	orl	r9,0xb
8002b438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b43c:	91 19       	st.w	r8[0x4],r9
8002b43e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b442:	35 09       	mov	r9,80
8002b444:	91 09       	st.w	r8[0x0],r9
8002b446:	30 08       	mov	r8,0
8002b448:	10 9c       	mov	r12,r8
8002b44a:	2f dd       	sub	sp,-12
8002b44c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b450:	80 02       	ld.sh	r2,r0[0x0]
8002b452:	b2 7e       	st.h	r9[0xe],lr

8002b454 <usart_init_spi_master>:
8002b454:	eb cd 40 c0 	pushm	r6-r7,lr
8002b458:	1a 97       	mov	r7,sp
8002b45a:	20 3d       	sub	sp,12
8002b45c:	4c 46       	lddpc	r6,8002b56c <usart_init_spi_master+0x118>
8002b45e:	1e 26       	rsub	r6,pc
8002b460:	ef 4c ff fc 	st.w	r7[-4],r12
8002b464:	ef 4b ff f8 	st.w	r7[-8],r11
8002b468:	ef 4a ff f4 	st.w	r7[-12],r10
8002b46c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b470:	f0 16 00 4d 	mcall	r6[308]
8002b474:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b478:	58 08       	cp.w	r8,0
8002b47a:	c2 f0       	breq	8002b4d8 <usart_init_spi_master+0x84>
8002b47c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b480:	11 c9       	ld.ub	r9,r8[0x4]
8002b482:	30 48       	mov	r8,4
8002b484:	f0 09 18 00 	cp.b	r9,r8
8002b488:	e0 88 00 28 	brls	8002b4d8 <usart_init_spi_master+0x84>
8002b48c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b490:	11 c9       	ld.ub	r9,r8[0x4]
8002b492:	30 98       	mov	r8,9
8002b494:	f0 09 18 00 	cp.b	r9,r8
8002b498:	e0 8b 00 20 	brhi	8002b4d8 <usart_init_spi_master+0x84>
8002b49c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4a0:	11 d9       	ld.ub	r9,r8[0x5]
8002b4a2:	30 38       	mov	r8,3
8002b4a4:	f0 09 18 00 	cp.b	r9,r8
8002b4a8:	e0 8b 00 18 	brhi	8002b4d8 <usart_init_spi_master+0x84>
8002b4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4b0:	11 e9       	ld.ub	r9,r8[0x6]
8002b4b2:	30 38       	mov	r8,3
8002b4b4:	f0 09 18 00 	cp.b	r9,r8
8002b4b8:	e0 8b 00 10 	brhi	8002b4d8 <usart_init_spi_master+0x84>
8002b4bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b4c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4c4:	70 08       	ld.w	r8,r8[0x0]
8002b4c6:	12 9a       	mov	r10,r9
8002b4c8:	10 9b       	mov	r11,r8
8002b4ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b4ce:	fe b0 fa a5 	rcall	8002aa18 <usart_set_spi_master_baudrate>
8002b4d2:	18 98       	mov	r8,r12
8002b4d4:	58 18       	cp.w	r8,1
8002b4d6:	c0 31       	brne	8002b4dc <usart_init_spi_master+0x88>
8002b4d8:	30 18       	mov	r8,1
8002b4da:	c4 48       	rjmp	8002b562 <usart_init_spi_master+0x10e>
8002b4dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4e0:	11 c9       	ld.ub	r9,r8[0x4]
8002b4e2:	30 98       	mov	r8,9
8002b4e4:	f0 09 18 00 	cp.b	r9,r8
8002b4e8:	c0 a1       	brne	8002b4fc <usart_init_spi_master+0xa8>
8002b4ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4ee:	70 18       	ld.w	r8,r8[0x4]
8002b4f0:	10 99       	mov	r9,r8
8002b4f2:	b1 b9       	sbr	r9,0x11
8002b4f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f8:	91 19       	st.w	r8[0x4],r9
8002b4fa:	c0 d8       	rjmp	8002b514 <usart_init_spi_master+0xc0>
8002b4fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b500:	70 19       	ld.w	r9,r8[0x4]
8002b502:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b506:	11 c8       	ld.ub	r8,r8[0x4]
8002b508:	20 58       	sub	r8,5
8002b50a:	a7 68       	lsl	r8,0x6
8002b50c:	10 49       	or	r9,r8
8002b50e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b512:	91 19       	st.w	r8[0x4],r9
8002b514:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b518:	70 19       	ld.w	r9,r8[0x4]
8002b51a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b51e:	11 d8       	ld.ub	r8,r8[0x5]
8002b520:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b524:	c0 41       	brne	8002b52c <usart_init_spi_master+0xd8>
8002b526:	e0 68 01 0e 	mov	r8,270
8002b52a:	c0 28       	rjmp	8002b52e <usart_init_spi_master+0xda>
8002b52c:	30 e8       	mov	r8,14
8002b52e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b532:	15 ea       	ld.ub	r10,r10[0x6]
8002b534:	af 6a       	lsl	r10,0xe
8002b536:	f1 ea 10 0a 	or	r10,r8,r10
8002b53a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b53e:	11 d8       	ld.ub	r8,r8[0x5]
8002b540:	a1 98       	lsr	r8,0x1
8002b542:	5c 58       	castu.b	r8
8002b544:	b1 68       	lsl	r8,0x10
8002b546:	f5 e8 10 08 	or	r8,r10,r8
8002b54a:	f3 e8 10 08 	or	r8,r9,r8
8002b54e:	10 99       	mov	r9,r8
8002b550:	b3 a9       	sbr	r9,0x12
8002b552:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b556:	91 19       	st.w	r8[0x4],r9
8002b558:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b55c:	35 09       	mov	r9,80
8002b55e:	91 09       	st.w	r8[0x0],r9
8002b560:	30 08       	mov	r8,0
8002b562:	10 9c       	mov	r12,r8
8002b564:	2f dd       	sub	sp,-12
8002b566:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b56a:	00 00       	add	r0,r0
8002b56c:	80 02       	ld.sh	r2,r0[0x0]
8002b56e:	b2 e2       	st.b	r9[0x6],r2

8002b570 <usart_init_spi_slave>:
8002b570:	eb cd 40 c0 	pushm	r6-r7,lr
8002b574:	1a 97       	mov	r7,sp
8002b576:	20 3d       	sub	sp,12
8002b578:	4b f6       	lddpc	r6,8002b674 <usart_init_spi_slave+0x104>
8002b57a:	1e 26       	rsub	r6,pc
8002b57c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b580:	ef 4b ff f8 	st.w	r7[-8],r11
8002b584:	ef 4a ff f4 	st.w	r7[-12],r10
8002b588:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b58c:	f0 16 00 4d 	mcall	r6[308]
8002b590:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b594:	58 08       	cp.w	r8,0
8002b596:	c2 80       	breq	8002b5e6 <usart_init_spi_slave+0x76>
8002b598:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b59c:	11 c9       	ld.ub	r9,r8[0x4]
8002b59e:	30 48       	mov	r8,4
8002b5a0:	f0 09 18 00 	cp.b	r9,r8
8002b5a4:	e0 88 00 21 	brls	8002b5e6 <usart_init_spi_slave+0x76>
8002b5a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5ac:	11 c9       	ld.ub	r9,r8[0x4]
8002b5ae:	30 98       	mov	r8,9
8002b5b0:	f0 09 18 00 	cp.b	r9,r8
8002b5b4:	e0 8b 00 19 	brhi	8002b5e6 <usart_init_spi_slave+0x76>
8002b5b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5bc:	11 d9       	ld.ub	r9,r8[0x5]
8002b5be:	30 38       	mov	r8,3
8002b5c0:	f0 09 18 00 	cp.b	r9,r8
8002b5c4:	e0 8b 00 11 	brhi	8002b5e6 <usart_init_spi_slave+0x76>
8002b5c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5cc:	11 e9       	ld.ub	r9,r8[0x6]
8002b5ce:	30 38       	mov	r8,3
8002b5d0:	f0 09 18 00 	cp.b	r9,r8
8002b5d4:	e0 8b 00 09 	brhi	8002b5e6 <usart_init_spi_slave+0x76>
8002b5d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b5dc:	fe b0 fa 56 	rcall	8002aa88 <usart_set_spi_slave_baudrate>
8002b5e0:	18 98       	mov	r8,r12
8002b5e2:	58 18       	cp.w	r8,1
8002b5e4:	c0 31       	brne	8002b5ea <usart_init_spi_slave+0x7a>
8002b5e6:	30 18       	mov	r8,1
8002b5e8:	c4 18       	rjmp	8002b66a <usart_init_spi_slave+0xfa>
8002b5ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5ee:	11 c9       	ld.ub	r9,r8[0x4]
8002b5f0:	30 98       	mov	r8,9
8002b5f2:	f0 09 18 00 	cp.b	r9,r8
8002b5f6:	c0 a1       	brne	8002b60a <usart_init_spi_slave+0x9a>
8002b5f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5fc:	70 18       	ld.w	r8,r8[0x4]
8002b5fe:	10 99       	mov	r9,r8
8002b600:	b1 b9       	sbr	r9,0x11
8002b602:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b606:	91 19       	st.w	r8[0x4],r9
8002b608:	c0 d8       	rjmp	8002b622 <usart_init_spi_slave+0xb2>
8002b60a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b60e:	70 19       	ld.w	r9,r8[0x4]
8002b610:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b614:	11 c8       	ld.ub	r8,r8[0x4]
8002b616:	20 58       	sub	r8,5
8002b618:	a7 68       	lsl	r8,0x6
8002b61a:	10 49       	or	r9,r8
8002b61c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b620:	91 19       	st.w	r8[0x4],r9
8002b622:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b626:	70 19       	ld.w	r9,r8[0x4]
8002b628:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b62c:	11 d8       	ld.ub	r8,r8[0x5]
8002b62e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b632:	c0 41       	brne	8002b63a <usart_init_spi_slave+0xca>
8002b634:	e0 68 01 0f 	mov	r8,271
8002b638:	c0 28       	rjmp	8002b63c <usart_init_spi_slave+0xcc>
8002b63a:	30 f8       	mov	r8,15
8002b63c:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b640:	15 ea       	ld.ub	r10,r10[0x6]
8002b642:	af 6a       	lsl	r10,0xe
8002b644:	f1 ea 10 0a 	or	r10,r8,r10
8002b648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b64c:	11 d8       	ld.ub	r8,r8[0x5]
8002b64e:	a1 98       	lsr	r8,0x1
8002b650:	5c 58       	castu.b	r8
8002b652:	b1 68       	lsl	r8,0x10
8002b654:	f5 e8 10 08 	or	r8,r10,r8
8002b658:	10 49       	or	r9,r8
8002b65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b65e:	91 19       	st.w	r8[0x4],r9
8002b660:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b664:	35 09       	mov	r9,80
8002b666:	91 09       	st.w	r8[0x0],r9
8002b668:	30 08       	mov	r8,0
8002b66a:	10 9c       	mov	r12,r8
8002b66c:	2f dd       	sub	sp,-12
8002b66e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b672:	00 00       	add	r0,r0
8002b674:	80 02       	ld.sh	r2,r0[0x0]
8002b676:	b3 fe       	*unknown*

8002b678 <usart_spi_selectChip>:
8002b678:	eb cd 40 80 	pushm	r7,lr
8002b67c:	1a 97       	mov	r7,sp
8002b67e:	20 1d       	sub	sp,4
8002b680:	ef 4c ff fc 	st.w	r7[-4],r12
8002b684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b688:	e4 69 00 00 	mov	r9,262144
8002b68c:	91 09       	st.w	r8[0x0],r9
8002b68e:	30 08       	mov	r8,0
8002b690:	10 9c       	mov	r12,r8
8002b692:	2f fd       	sub	sp,-4
8002b694:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b698 <usart_spi_unselectChip>:
8002b698:	eb cd 40 80 	pushm	r7,lr
8002b69c:	1a 97       	mov	r7,sp
8002b69e:	20 3d       	sub	sp,12
8002b6a0:	ef 4c ff f4 	st.w	r7[-12],r12
8002b6a4:	e0 68 27 10 	mov	r8,10000
8002b6a8:	ef 48 ff f8 	st.w	r7[-8],r8
8002b6ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6b0:	58 08       	cp.w	r8,0
8002b6b2:	5f 08       	sreq	r8
8002b6b4:	5c 58       	castu.b	r8
8002b6b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b6ba:	20 19       	sub	r9,1
8002b6bc:	ef 49 ff f8 	st.w	r7[-8],r9
8002b6c0:	58 08       	cp.w	r8,0
8002b6c2:	c0 30       	breq	8002b6c8 <usart_spi_unselectChip+0x30>
8002b6c4:	3f f8       	mov	r8,-1
8002b6c6:	c1 38       	rjmp	8002b6ec <usart_spi_unselectChip+0x54>
8002b6c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6cc:	ef 48 ff fc 	st.w	r7[-4],r8
8002b6d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6d4:	70 58       	ld.w	r8,r8[0x14]
8002b6d6:	e2 18 02 00 	andl	r8,0x200,COH
8002b6da:	5f 18       	srne	r8
8002b6dc:	58 08       	cp.w	r8,0
8002b6de:	ce 70       	breq	8002b6ac <usart_spi_unselectChip+0x14>
8002b6e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6e4:	e8 69 00 00 	mov	r9,524288
8002b6e8:	91 09       	st.w	r8[0x0],r9
8002b6ea:	30 08       	mov	r8,0
8002b6ec:	10 9c       	mov	r12,r8
8002b6ee:	2f dd       	sub	sp,-12
8002b6f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b6f4 <usart_send_address>:
8002b6f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002b6f8:	1a 97       	mov	r7,sp
8002b6fa:	20 5d       	sub	sp,20
8002b6fc:	49 96       	lddpc	r6,8002b760 <usart_send_address+0x6c>
8002b6fe:	1e 26       	rsub	r6,pc
8002b700:	ef 4c ff f0 	st.w	r7[-16],r12
8002b704:	ef 4b ff ec 	st.w	r7[-20],r11
8002b708:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b70c:	ef 48 ff f4 	st.w	r7[-12],r8
8002b710:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b714:	70 18       	ld.w	r8,r8[0x4]
8002b716:	a9 98       	lsr	r8,0x9
8002b718:	e2 18 00 06 	andl	r8,0x6,COH
8002b71c:	58 68       	cp.w	r8,6
8002b71e:	5f 08       	sreq	r8
8002b720:	58 08       	cp.w	r8,0
8002b722:	c0 31       	brne	8002b728 <usart_send_address+0x34>
8002b724:	30 58       	mov	r8,5
8002b726:	c1 88       	rjmp	8002b756 <usart_send_address+0x62>
8002b728:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b72c:	e0 69 10 00 	mov	r9,4096
8002b730:	91 09       	st.w	r8[0x0],r9
8002b732:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b736:	ef 48 ff fc 	st.w	r7[-4],r8
8002b73a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b73e:	ef 48 ff f8 	st.w	r7[-8],r8
8002b742:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b746:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b74a:	f0 16 01 18 	mcall	r6[1120]
8002b74e:	18 98       	mov	r8,r12
8002b750:	58 08       	cp.w	r8,0
8002b752:	cf 81       	brne	8002b742 <usart_send_address+0x4e>
8002b754:	30 08       	mov	r8,0
8002b756:	10 9c       	mov	r12,r8
8002b758:	2f bd       	sub	sp,-20
8002b75a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b75e:	00 00       	add	r0,r0
8002b760:	80 02       	ld.sh	r2,r0[0x0]
8002b762:	b5 82       	lsr	r2,0x14

8002b764 <usart_write_char>:
8002b764:	eb cd 40 80 	pushm	r7,lr
8002b768:	1a 97       	mov	r7,sp
8002b76a:	20 3d       	sub	sp,12
8002b76c:	ef 4c ff f8 	st.w	r7[-8],r12
8002b770:	ef 4b ff f4 	st.w	r7[-12],r11
8002b774:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b778:	ef 48 ff fc 	st.w	r7[-4],r8
8002b77c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b780:	70 58       	ld.w	r8,r8[0x14]
8002b782:	e2 18 00 02 	andl	r8,0x2,COH
8002b786:	5f 18       	srne	r8
8002b788:	58 08       	cp.w	r8,0
8002b78a:	c0 a0       	breq	8002b79e <usart_write_char+0x3a>
8002b78c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b790:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b794:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b798:	91 79       	st.w	r8[0x1c],r9
8002b79a:	30 08       	mov	r8,0
8002b79c:	c0 28       	rjmp	8002b7a0 <usart_write_char+0x3c>
8002b79e:	30 28       	mov	r8,2
8002b7a0:	10 9c       	mov	r12,r8
8002b7a2:	2f dd       	sub	sp,-12
8002b7a4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b7a8 <usart_putchar>:
8002b7a8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b7ac:	1a 97       	mov	r7,sp
8002b7ae:	20 3d       	sub	sp,12
8002b7b0:	49 36       	lddpc	r6,8002b7fc <usart_putchar+0x54>
8002b7b2:	1e 26       	rsub	r6,pc
8002b7b4:	ef 4c ff f8 	st.w	r7[-8],r12
8002b7b8:	ef 4b ff f4 	st.w	r7[-12],r11
8002b7bc:	e0 68 27 10 	mov	r8,10000
8002b7c0:	ef 48 ff fc 	st.w	r7[-4],r8
8002b7c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7c8:	58 08       	cp.w	r8,0
8002b7ca:	5f 08       	sreq	r8
8002b7cc:	5c 58       	castu.b	r8
8002b7ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b7d2:	20 19       	sub	r9,1
8002b7d4:	ef 49 ff fc 	st.w	r7[-4],r9
8002b7d8:	58 08       	cp.w	r8,0
8002b7da:	c0 30       	breq	8002b7e0 <usart_putchar+0x38>
8002b7dc:	3f f8       	mov	r8,-1
8002b7de:	c0 b8       	rjmp	8002b7f4 <usart_putchar+0x4c>
8002b7e0:	ee fb ff f4 	ld.w	r11,r7[-12]
8002b7e4:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b7e8:	f0 16 01 18 	mcall	r6[1120]
8002b7ec:	18 98       	mov	r8,r12
8002b7ee:	58 08       	cp.w	r8,0
8002b7f0:	ce a1       	brne	8002b7c4 <usart_putchar+0x1c>
8002b7f2:	30 08       	mov	r8,0
8002b7f4:	10 9c       	mov	r12,r8
8002b7f6:	2f dd       	sub	sp,-12
8002b7f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7fc:	80 02       	ld.sh	r2,r0[0x0]
8002b7fe:	b6 36       	st.h	r11[0x6],r6

8002b800 <usart_read_char>:
8002b800:	eb cd 40 80 	pushm	r7,lr
8002b804:	1a 97       	mov	r7,sp
8002b806:	20 3d       	sub	sp,12
8002b808:	ef 4c ff f8 	st.w	r7[-8],r12
8002b80c:	ef 4b ff f4 	st.w	r7[-12],r11
8002b810:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b814:	70 58       	ld.w	r8,r8[0x14]
8002b816:	e2 18 00 e0 	andl	r8,0xe0,COH
8002b81a:	c0 30       	breq	8002b820 <usart_read_char+0x20>
8002b81c:	30 48       	mov	r8,4
8002b81e:	c1 68       	rjmp	8002b84a <usart_read_char+0x4a>
8002b820:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b824:	ef 48 ff fc 	st.w	r7[-4],r8
8002b828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b82c:	70 58       	ld.w	r8,r8[0x14]
8002b82e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b832:	c0 b0       	breq	8002b848 <usart_read_char+0x48>
8002b834:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b838:	70 68       	ld.w	r8,r8[0x18]
8002b83a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b83e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b842:	91 09       	st.w	r8[0x0],r9
8002b844:	30 08       	mov	r8,0
8002b846:	c0 28       	rjmp	8002b84a <usart_read_char+0x4a>
8002b848:	30 38       	mov	r8,3
8002b84a:	10 9c       	mov	r12,r8
8002b84c:	2f dd       	sub	sp,-12
8002b84e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b852 <usart_getchar>:
8002b852:	eb cd 40 c0 	pushm	r6-r7,lr
8002b856:	1a 97       	mov	r7,sp
8002b858:	20 3d       	sub	sp,12
8002b85a:	49 06       	lddpc	r6,8002b898 <usart_getchar+0x46>
8002b85c:	1e 26       	rsub	r6,pc
8002b85e:	ef 4c ff f4 	st.w	r7[-12],r12
8002b862:	ee c8 00 08 	sub	r8,r7,8
8002b866:	10 9b       	mov	r11,r8
8002b868:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b86c:	f0 16 01 fb 	mcall	r6[2028]
8002b870:	18 98       	mov	r8,r12
8002b872:	ef 48 ff fc 	st.w	r7[-4],r8
8002b876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b87a:	58 38       	cp.w	r8,3
8002b87c:	cf 30       	breq	8002b862 <usart_getchar+0x10>
8002b87e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b882:	58 48       	cp.w	r8,4
8002b884:	c0 31       	brne	8002b88a <usart_getchar+0x38>
8002b886:	3f f8       	mov	r8,-1
8002b888:	c0 38       	rjmp	8002b88e <usart_getchar+0x3c>
8002b88a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b88e:	10 9c       	mov	r12,r8
8002b890:	2f dd       	sub	sp,-12
8002b892:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b896:	00 00       	add	r0,r0
8002b898:	80 02       	ld.sh	r2,r0[0x0]
8002b89a:	b6 e0       	st.b	r11[0x6],r0

8002b89c <usart_write_line>:
8002b89c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b8a0:	1a 97       	mov	r7,sp
8002b8a2:	20 2d       	sub	sp,8
8002b8a4:	48 e6       	lddpc	r6,8002b8dc <usart_write_line+0x40>
8002b8a6:	1e 26       	rsub	r6,pc
8002b8a8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b8ac:	ef 4b ff f8 	st.w	r7[-8],r11
8002b8b0:	c0 e8       	rjmp	8002b8cc <usart_write_line+0x30>
8002b8b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8b6:	11 88       	ld.ub	r8,r8[0x0]
8002b8b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b8bc:	2f f9       	sub	r9,-1
8002b8be:	ef 49 ff f8 	st.w	r7[-8],r9
8002b8c2:	10 9b       	mov	r11,r8
8002b8c4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b8c8:	f0 16 00 a5 	mcall	r6[660]
8002b8cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8d0:	11 88       	ld.ub	r8,r8[0x0]
8002b8d2:	58 08       	cp.w	r8,0
8002b8d4:	ce f1       	brne	8002b8b2 <usart_write_line+0x16>
8002b8d6:	2f ed       	sub	sp,-8
8002b8d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b8dc:	80 02       	ld.sh	r2,r0[0x0]
8002b8de:	b7 2a       	st.d	r11++,r10
8002b8e0:	45 72       	lddsp	r2,sp[0x15c]
8002b8e2:	72 6f       	ld.w	pc,r9[0x18]
8002b8e4:	72 21       	ld.w	r1,r9[0x8]
8002b8e6:	21 21       	sub	r1,18
8002b8e8:	0d 0a       	ld.w	r10,r6++
	...

8002b8ec <usart_get_echo_line>:
8002b8ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002b8f0:	1a 97       	mov	r7,sp
8002b8f2:	20 3d       	sub	sp,12
8002b8f4:	49 e6       	lddpc	r6,8002b96c <usart_get_echo_line+0x80>
8002b8f6:	1e 26       	rsub	r6,pc
8002b8f8:	ef 4c ff f4 	st.w	r7[-12],r12
8002b8fc:	30 08       	mov	r8,0
8002b8fe:	ef 48 ff fc 	st.w	r7[-4],r8
8002b902:	c0 28       	rjmp	8002b906 <usart_get_echo_line+0x1a>
8002b904:	d7 03       	nop
8002b906:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b90a:	f0 16 01 c8 	mcall	r6[1824]
8002b90e:	18 98       	mov	r8,r12
8002b910:	ef 48 ff f8 	st.w	r7[-8],r8
8002b914:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b918:	5b f8       	cp.w	r8,-1
8002b91a:	c0 b1       	brne	8002b930 <usart_get_echo_line+0x44>
8002b91c:	fe cb 00 3c 	sub	r11,pc,60
8002b920:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b924:	f0 16 01 5e 	mcall	r6[1400]
8002b928:	3f f8       	mov	r8,-1
8002b92a:	ef 48 ff fc 	st.w	r7[-4],r8
8002b92e:	c1 98       	rjmp	8002b960 <usart_get_echo_line+0x74>
8002b930:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b934:	58 38       	cp.w	r8,3
8002b936:	c0 51       	brne	8002b940 <usart_get_echo_line+0x54>
8002b938:	3f f8       	mov	r8,-1
8002b93a:	ef 48 ff fc 	st.w	r7[-4],r8
8002b93e:	c1 18       	rjmp	8002b960 <usart_get_echo_line+0x74>
8002b940:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b944:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b948:	f0 16 00 a5 	mcall	r6[660]
8002b94c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b950:	58 d8       	cp.w	r8,13
8002b952:	cd 91       	brne	8002b904 <usart_get_echo_line+0x18>
8002b954:	30 ab       	mov	r11,10
8002b956:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b95a:	f0 16 00 a5 	mcall	r6[660]
8002b95e:	d7 03       	nop
8002b960:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b964:	10 9c       	mov	r12,r8
8002b966:	2f dd       	sub	sp,-12
8002b968:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b96c:	80 02       	ld.sh	r2,r0[0x0]
8002b96e:	b7 7a       	lsl	r10,0x17

8002b970 <delay_init>:
8002b970:	eb cd 40 c0 	pushm	r6-r7,lr
8002b974:	1a 97       	mov	r7,sp
8002b976:	20 1d       	sub	sp,4
8002b978:	48 66       	lddpc	r6,8002b990 <delay_init+0x20>
8002b97a:	1e 26       	rsub	r6,pc
8002b97c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b980:	ec f8 04 cc 	ld.w	r8,r6[1228]
8002b984:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b988:	91 09       	st.w	r8[0x0],r9
8002b98a:	2f fd       	sub	sp,-4
8002b98c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b990:	80 02       	ld.sh	r2,r0[0x0]
8002b992:	b7 fe       	*unknown*

8002b994 <delay_ms>:
8002b994:	eb cd 40 c0 	pushm	r6-r7,lr
8002b998:	1a 97       	mov	r7,sp
8002b99a:	20 cd       	sub	sp,48
8002b99c:	4d 36       	lddpc	r6,8002bae8 <delay_ms+0x154>
8002b99e:	1e 26       	rsub	r6,pc
8002b9a0:	ef 4c ff d0 	st.w	r7[-48],r12
8002b9a4:	ec fc 04 cc 	ld.w	r12,r6[1228]
8002b9a8:	78 0c       	ld.w	r12,r12[0x0]
8002b9aa:	ee fe ff d0 	ld.w	lr,r7[-48]
8002b9ae:	ef 4e ff e4 	st.w	r7[-28],lr
8002b9b2:	ef 4c ff e0 	st.w	r7[-32],r12
8002b9b6:	ee fc ff e4 	ld.w	r12,r7[-28]
8002b9ba:	ef 4c ff ec 	st.w	r7[-20],r12
8002b9be:	ee fc ff e0 	ld.w	r12,r7[-32]
8002b9c2:	ef 4c ff e8 	st.w	r7[-24],r12
8002b9c6:	ee fa ff ec 	ld.w	r10,r7[-20]
8002b9ca:	30 0b       	mov	r11,0
8002b9cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002b9d0:	30 09       	mov	r9,0
8002b9d2:	f6 08 02 4c 	mul	r12,r11,r8
8002b9d6:	f2 0a 02 4e 	mul	lr,r9,r10
8002b9da:	1c 0c       	add	r12,lr
8002b9dc:	f4 08 06 48 	mulu.d	r8,r10,r8
8002b9e0:	12 0c       	add	r12,r9
8002b9e2:	18 99       	mov	r9,r12
8002b9e4:	e0 6a 03 e7 	mov	r10,999
8002b9e8:	30 0b       	mov	r11,0
8002b9ea:	f0 0a 00 0a 	add	r10,r8,r10
8002b9ee:	f2 0b 00 4b 	adc	r11,r9,r11
8002b9f2:	e0 68 03 e8 	mov	r8,1000
8002b9f6:	30 09       	mov	r9,0
8002b9f8:	f0 16 01 03 	mcall	r6[1036]
8002b9fc:	14 98       	mov	r8,r10
8002b9fe:	16 99       	mov	r9,r11
8002ba00:	ef 48 ff f4 	st.w	r7[-12],r8
8002ba04:	ee c8 00 2c 	sub	r8,r7,44
8002ba08:	ef 48 ff f0 	st.w	r7[-16],r8
8002ba0c:	e1 b8 00 42 	mfsr	r8,0x108
8002ba10:	10 99       	mov	r9,r8
8002ba12:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba16:	91 09       	st.w	r8[0x0],r9
8002ba18:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba1c:	70 09       	ld.w	r9,r8[0x0]
8002ba1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba22:	10 09       	add	r9,r8
8002ba24:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba28:	91 19       	st.w	r8[0x4],r9
8002ba2a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002ba2e:	30 08       	mov	r8,0
8002ba30:	f3 68 00 08 	st.b	r9[8],r8
8002ba34:	ee c8 00 2c 	sub	r8,r7,44
8002ba38:	ef 48 ff f8 	st.w	r7[-8],r8
8002ba3c:	e1 b8 00 42 	mfsr	r8,0x108
8002ba40:	ef 48 ff fc 	st.w	r7[-4],r8
8002ba44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba48:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ba4c:	30 28       	mov	r8,2
8002ba4e:	f0 09 18 00 	cp.b	r9,r8
8002ba52:	c0 31       	brne	8002ba58 <delay_ms+0xc4>
8002ba54:	30 08       	mov	r8,0
8002ba56:	c4 38       	rjmp	8002badc <delay_ms+0x148>
8002ba58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba5c:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ba60:	30 18       	mov	r8,1
8002ba62:	f0 09 18 00 	cp.b	r9,r8
8002ba66:	c0 31       	brne	8002ba6c <delay_ms+0xd8>
8002ba68:	30 18       	mov	r8,1
8002ba6a:	c3 98       	rjmp	8002badc <delay_ms+0x148>
8002ba6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba70:	70 09       	ld.w	r9,r8[0x0]
8002ba72:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba76:	70 18       	ld.w	r8,r8[0x4]
8002ba78:	10 39       	cp.w	r9,r8
8002ba7a:	e0 88 00 1a 	brls	8002baae <delay_ms+0x11a>
8002ba7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba82:	70 08       	ld.w	r8,r8[0x0]
8002ba84:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba88:	10 39       	cp.w	r9,r8
8002ba8a:	c1 02       	brcc	8002baaa <delay_ms+0x116>
8002ba8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba90:	70 18       	ld.w	r8,r8[0x4]
8002ba92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba96:	10 39       	cp.w	r9,r8
8002ba98:	e0 88 00 09 	brls	8002baaa <delay_ms+0x116>
8002ba9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002baa0:	30 18       	mov	r8,1
8002baa2:	f3 68 00 08 	st.b	r9[8],r8
8002baa6:	30 18       	mov	r8,1
8002baa8:	c1 a8       	rjmp	8002badc <delay_ms+0x148>
8002baaa:	30 08       	mov	r8,0
8002baac:	c1 88       	rjmp	8002badc <delay_ms+0x148>
8002baae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bab2:	70 08       	ld.w	r8,r8[0x0]
8002bab4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bab8:	10 39       	cp.w	r9,r8
8002baba:	c0 93       	brcs	8002bacc <delay_ms+0x138>
8002babc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bac0:	70 18       	ld.w	r8,r8[0x4]
8002bac2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bac6:	10 39       	cp.w	r9,r8
8002bac8:	e0 88 00 09 	brls	8002bada <delay_ms+0x146>
8002bacc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bad0:	30 18       	mov	r8,1
8002bad2:	f3 68 00 08 	st.b	r9[8],r8
8002bad6:	30 18       	mov	r8,1
8002bad8:	c0 28       	rjmp	8002badc <delay_ms+0x148>
8002bada:	30 08       	mov	r8,0
8002badc:	58 08       	cp.w	r8,0
8002bade:	ca b0       	breq	8002ba34 <delay_ms+0xa0>
8002bae0:	2f 4d       	sub	sp,-48
8002bae2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bae6:	00 00       	add	r0,r0
8002bae8:	80 02       	ld.sh	r2,r0[0x0]
8002baea:	b8 22       	st.h	r12[0x4],r2

8002baec <_stext>:
8002baec:	48 dd       	lddpc	sp,8002bb20 <udata_clear_loop_end+0x4>
8002baee:	fe c0 a8 ee 	sub	r0,pc,-22290
8002baf2:	e3 b0 00 01 	mtsr	0x4,r0
8002baf6:	d5 53       	csrf	0x15
8002baf8:	48 b0       	lddpc	r0,8002bb24 <udata_clear_loop_end+0x8>
8002bafa:	48 c1       	lddpc	r1,8002bb28 <udata_clear_loop_end+0xc>
8002bafc:	02 30       	cp.w	r0,r1
8002bafe:	c0 62       	brcc	8002bb0a <idata_load_loop_end>
8002bb00:	48 b2       	lddpc	r2,8002bb2c <udata_clear_loop_end+0x10>

8002bb02 <idata_load_loop>:
8002bb02:	a5 05       	ld.d	r4,r2++
8002bb04:	a1 24       	st.d	r0++,r4
8002bb06:	02 30       	cp.w	r0,r1
8002bb08:	cf d3       	brcs	8002bb02 <idata_load_loop>

8002bb0a <idata_load_loop_end>:
8002bb0a:	48 a0       	lddpc	r0,8002bb30 <udata_clear_loop_end+0x14>
8002bb0c:	48 a1       	lddpc	r1,8002bb34 <udata_clear_loop_end+0x18>
8002bb0e:	02 30       	cp.w	r0,r1
8002bb10:	c0 62       	brcc	8002bb1c <udata_clear_loop_end>
8002bb12:	30 02       	mov	r2,0
8002bb14:	30 03       	mov	r3,0

8002bb16 <udata_clear_loop>:
8002bb16:	a1 22       	st.d	r0++,r2
8002bb18:	02 30       	cp.w	r0,r1
8002bb1a:	cf e3       	brcs	8002bb16 <udata_clear_loop>

8002bb1c <udata_clear_loop_end>:
8002bb1c:	fe cf e7 f8 	sub	pc,pc,-6152
8002bb20:	00 01       	add	r1,r0
8002bb22:	00 00       	add	r0,r0
8002bb24:	00 00       	add	r0,r0
8002bb26:	00 04       	add	r4,r0
8002bb28:	00 00       	add	r0,r0
8002bb2a:	20 c8       	sub	r8,12
8002bb2c:	80 03       	ld.sh	r3,r0[0x0]
8002bb2e:	1a 48       	or	r8,sp
8002bb30:	00 00       	add	r0,r0
8002bb32:	20 c8       	sub	r8,12
8002bb34:	00 00       	add	r0,r0
8002bb36:	96 f8       	ld.uh	r8,r11[0xe]

8002bb38 <board_init>:
8002bb38:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb3c:	1a 97       	mov	r7,sp
8002bb3e:	48 76       	lddpc	r6,8002bb58 <board_init+0x20>
8002bb40:	1e 26       	rsub	r6,pc
8002bb42:	30 1b       	mov	r11,1
8002bb44:	32 0c       	mov	r12,32
8002bb46:	f0 16 00 3d 	mcall	r6[244]
8002bb4a:	30 1b       	mov	r11,1
8002bb4c:	32 1c       	mov	r12,33
8002bb4e:	f0 16 00 3d 	mcall	r6[244]
8002bb52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb56:	00 00       	add	r0,r0
8002bb58:	80 02       	ld.sh	r2,r0[0x0]
8002bb5a:	b9 c4       	cbr	r4,0x18

8002bb5c <cpu_irq_save>:
8002bb5c:	eb cd 40 80 	pushm	r7,lr
8002bb60:	1a 97       	mov	r7,sp
8002bb62:	20 1d       	sub	sp,4
8002bb64:	e1 b8 00 00 	mfsr	r8,0x0
8002bb68:	ef 48 ff fc 	st.w	r7[-4],r8
8002bb6c:	d3 03       	ssrf	0x10
8002bb6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb72:	10 9c       	mov	r12,r8
8002bb74:	2f fd       	sub	sp,-4
8002bb76:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb7a <cpu_irq_restore>:
8002bb7a:	eb cd 40 80 	pushm	r7,lr
8002bb7e:	1a 97       	mov	r7,sp
8002bb80:	20 1d       	sub	sp,4
8002bb82:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb8a:	e3 b8 00 00 	mtsr	0x0,r8
8002bb8e:	2f fd       	sub	sp,-4
8002bb90:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb94 <osc_priv_enable_osc0>:
8002bb94:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb98:	1a 97       	mov	r7,sp
8002bb9a:	20 1d       	sub	sp,4
8002bb9c:	48 c6       	lddpc	r6,8002bbcc <osc_priv_enable_osc0+0x38>
8002bb9e:	1e 26       	rsub	r6,pc
8002bba0:	cd ef       	rcall	8002bb5c <cpu_irq_save>
8002bba2:	18 98       	mov	r8,r12
8002bba4:	ef 48 ff fc 	st.w	r7[-4],r8
8002bba8:	fe 78 08 00 	mov	r8,-63488
8002bbac:	32 49       	mov	r9,36
8002bbae:	ea 19 aa 00 	orh	r9,0xaa00
8002bbb2:	91 69       	st.w	r8[0x18],r9
8002bbb4:	fe 78 08 00 	mov	r8,-63488
8002bbb8:	e0 79 0c 07 	mov	r9,68615
8002bbbc:	91 99       	st.w	r8[0x24],r9
8002bbbe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bbc2:	cd cf       	rcall	8002bb7a <cpu_irq_restore>
8002bbc4:	2f fd       	sub	sp,-4
8002bbc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bbca:	00 00       	add	r0,r0
8002bbcc:	80 02       	ld.sh	r2,r0[0x0]
8002bbce:	ba 22       	st.h	sp[0x4],r2

8002bbd0 <osc_priv_disable_osc0>:
8002bbd0:	eb cd 40 c0 	pushm	r6-r7,lr
8002bbd4:	1a 97       	mov	r7,sp
8002bbd6:	20 1d       	sub	sp,4
8002bbd8:	48 b6       	lddpc	r6,8002bc04 <osc_priv_disable_osc0+0x34>
8002bbda:	1e 26       	rsub	r6,pc
8002bbdc:	cc 0f       	rcall	8002bb5c <cpu_irq_save>
8002bbde:	18 98       	mov	r8,r12
8002bbe0:	ef 48 ff fc 	st.w	r7[-4],r8
8002bbe4:	fe 78 08 00 	mov	r8,-63488
8002bbe8:	32 49       	mov	r9,36
8002bbea:	ea 19 aa 00 	orh	r9,0xaa00
8002bbee:	91 69       	st.w	r8[0x18],r9
8002bbf0:	fe 78 08 00 	mov	r8,-63488
8002bbf4:	30 09       	mov	r9,0
8002bbf6:	91 99       	st.w	r8[0x24],r9
8002bbf8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bbfc:	cb ff       	rcall	8002bb7a <cpu_irq_restore>
8002bbfe:	2f fd       	sub	sp,-4
8002bc00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc04:	80 02       	ld.sh	r2,r0[0x0]
8002bc06:	ba 5e       	st.h	sp[0xa],lr

8002bc08 <osc_priv_enable_osc32>:
8002bc08:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc0c:	1a 97       	mov	r7,sp
8002bc0e:	20 1d       	sub	sp,4
8002bc10:	48 c6       	lddpc	r6,8002bc40 <osc_priv_enable_osc32+0x38>
8002bc12:	1e 26       	rsub	r6,pc
8002bc14:	ca 4f       	rcall	8002bb5c <cpu_irq_save>
8002bc16:	18 98       	mov	r8,r12
8002bc18:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc1c:	fe 78 08 00 	mov	r8,-63488
8002bc20:	34 c9       	mov	r9,76
8002bc22:	ea 19 aa 00 	orh	r9,0xaa00
8002bc26:	91 69       	st.w	r8[0x18],r9
8002bc28:	fe 78 08 00 	mov	r8,-63488
8002bc2c:	e2 69 01 01 	mov	r9,131329
8002bc30:	f1 49 00 4c 	st.w	r8[76],r9
8002bc34:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc38:	ca 1f       	rcall	8002bb7a <cpu_irq_restore>
8002bc3a:	2f fd       	sub	sp,-4
8002bc3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc40:	80 02       	ld.sh	r2,r0[0x0]
8002bc42:	ba 96       	st.b	sp[0x1],r6

8002bc44 <osc_priv_disable_osc32>:
8002bc44:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc48:	1a 97       	mov	r7,sp
8002bc4a:	20 1d       	sub	sp,4
8002bc4c:	48 c6       	lddpc	r6,8002bc7c <osc_priv_disable_osc32+0x38>
8002bc4e:	1e 26       	rsub	r6,pc
8002bc50:	c8 6f       	rcall	8002bb5c <cpu_irq_save>
8002bc52:	18 98       	mov	r8,r12
8002bc54:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc58:	fe 78 08 00 	mov	r8,-63488
8002bc5c:	34 c9       	mov	r9,76
8002bc5e:	ea 19 aa 00 	orh	r9,0xaa00
8002bc62:	91 69       	st.w	r8[0x18],r9
8002bc64:	fe 78 08 00 	mov	r8,-63488
8002bc68:	30 09       	mov	r9,0
8002bc6a:	f1 49 00 4c 	st.w	r8[76],r9
8002bc6e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc72:	c8 4f       	rcall	8002bb7a <cpu_irq_restore>
8002bc74:	2f fd       	sub	sp,-4
8002bc76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc7a:	00 00       	add	r0,r0
8002bc7c:	80 02       	ld.sh	r2,r0[0x0]
8002bc7e:	ba d2       	st.b	sp[0x5],r2

8002bc80 <osc_priv_enable_rc8m>:
8002bc80:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc84:	1a 97       	mov	r7,sp
8002bc86:	20 3d       	sub	sp,12
8002bc88:	49 d6       	lddpc	r6,8002bcfc <osc_priv_enable_rc8m+0x7c>
8002bc8a:	1e 26       	rsub	r6,pc
8002bc8c:	e0 68 02 00 	mov	r8,512
8002bc90:	ea 18 80 80 	orh	r8,0x8080
8002bc94:	ef 48 ff fc 	st.w	r7[-4],r8
8002bc98:	fe 78 08 00 	mov	r8,-63488
8002bc9c:	71 28       	ld.w	r8,r8[0x48]
8002bc9e:	e6 18 00 01 	andh	r8,0x1,COH
8002bca2:	cf b0       	breq	8002bc98 <osc_priv_enable_rc8m+0x18>
8002bca4:	c5 cf       	rcall	8002bb5c <cpu_irq_save>
8002bca6:	18 98       	mov	r8,r12
8002bca8:	ef 48 ff f4 	st.w	r7[-12],r8
8002bcac:	fe 78 08 00 	mov	r8,-63488
8002bcb0:	71 28       	ld.w	r8,r8[0x48]
8002bcb2:	ef 48 ff f8 	st.w	r7[-8],r8
8002bcb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcba:	70 08       	ld.w	r8,r8[0x0]
8002bcbc:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002bcc0:	b1 a8       	sbr	r8,0x10
8002bcc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bcc6:	f3 e8 00 08 	and	r8,r9,r8
8002bcca:	ef 48 ff f8 	st.w	r7[-8],r8
8002bcce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcd2:	b9 a8       	sbr	r8,0x18
8002bcd4:	ef 48 ff f8 	st.w	r7[-8],r8
8002bcd8:	fe 78 08 00 	mov	r8,-63488
8002bcdc:	34 89       	mov	r9,72
8002bcde:	ea 19 aa 00 	orh	r9,0xaa00
8002bce2:	91 69       	st.w	r8[0x18],r9
8002bce4:	fe 78 08 00 	mov	r8,-63488
8002bce8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bcec:	f1 49 00 48 	st.w	r8[72],r9
8002bcf0:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bcf4:	c4 3f       	rcall	8002bb7a <cpu_irq_restore>
8002bcf6:	2f dd       	sub	sp,-12
8002bcf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bcfc:	80 02       	ld.sh	r2,r0[0x0]
8002bcfe:	bb 0e       	ld.d	lr,sp

8002bd00 <osc_priv_disable_rc8m>:
8002bd00:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd04:	1a 97       	mov	r7,sp
8002bd06:	20 2d       	sub	sp,8
8002bd08:	49 36       	lddpc	r6,8002bd54 <osc_priv_disable_rc8m+0x54>
8002bd0a:	1e 26       	rsub	r6,pc
8002bd0c:	c2 8f       	rcall	8002bb5c <cpu_irq_save>
8002bd0e:	18 98       	mov	r8,r12
8002bd10:	ef 48 ff f8 	st.w	r7[-8],r8
8002bd14:	fe 78 08 00 	mov	r8,-63488
8002bd18:	71 28       	ld.w	r8,r8[0x48]
8002bd1a:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd22:	e4 18 00 01 	andh	r8,0x1
8002bd26:	e0 18 00 ff 	andl	r8,0xff
8002bd2a:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd2e:	fe 78 08 00 	mov	r8,-63488
8002bd32:	34 89       	mov	r9,72
8002bd34:	ea 19 aa 00 	orh	r9,0xaa00
8002bd38:	91 69       	st.w	r8[0x18],r9
8002bd3a:	fe 78 08 00 	mov	r8,-63488
8002bd3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd42:	f1 49 00 48 	st.w	r8[72],r9
8002bd46:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bd4a:	c1 8f       	rcall	8002bb7a <cpu_irq_restore>
8002bd4c:	2f ed       	sub	sp,-8
8002bd4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd52:	00 00       	add	r0,r0
8002bd54:	80 02       	ld.sh	r2,r0[0x0]
8002bd56:	bb 8e       	lsr	lr,0x1a

8002bd58 <osc_priv_enable_rc120m>:
8002bd58:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd5c:	1a 97       	mov	r7,sp
8002bd5e:	20 1d       	sub	sp,4
8002bd60:	48 c6       	lddpc	r6,8002bd90 <osc_priv_enable_rc120m+0x38>
8002bd62:	1e 26       	rsub	r6,pc
8002bd64:	cf ce       	rcall	8002bb5c <cpu_irq_save>
8002bd66:	18 98       	mov	r8,r12
8002bd68:	ef 48 ff fc 	st.w	r7[-4],r8
8002bd6c:	fe 78 08 00 	mov	r8,-63488
8002bd70:	35 89       	mov	r9,88
8002bd72:	ea 19 aa 00 	orh	r9,0xaa00
8002bd76:	91 69       	st.w	r8[0x18],r9
8002bd78:	fe 78 08 00 	mov	r8,-63488
8002bd7c:	30 19       	mov	r9,1
8002bd7e:	f1 49 00 58 	st.w	r8[88],r9
8002bd82:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bd86:	cf ae       	rcall	8002bb7a <cpu_irq_restore>
8002bd88:	2f fd       	sub	sp,-4
8002bd8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd8e:	00 00       	add	r0,r0
8002bd90:	80 02       	ld.sh	r2,r0[0x0]
8002bd92:	bb e6       	*unknown*

8002bd94 <osc_priv_disable_rc120m>:
8002bd94:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd98:	1a 97       	mov	r7,sp
8002bd9a:	20 1d       	sub	sp,4
8002bd9c:	48 c6       	lddpc	r6,8002bdcc <osc_priv_disable_rc120m+0x38>
8002bd9e:	1e 26       	rsub	r6,pc
8002bda0:	cd ee       	rcall	8002bb5c <cpu_irq_save>
8002bda2:	18 98       	mov	r8,r12
8002bda4:	ef 48 ff fc 	st.w	r7[-4],r8
8002bda8:	fe 78 08 00 	mov	r8,-63488
8002bdac:	35 89       	mov	r9,88
8002bdae:	ea 19 aa 00 	orh	r9,0xaa00
8002bdb2:	91 69       	st.w	r8[0x18],r9
8002bdb4:	fe 78 08 00 	mov	r8,-63488
8002bdb8:	30 09       	mov	r9,0
8002bdba:	f1 49 00 58 	st.w	r8[88],r9
8002bdbe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bdc2:	cd ce       	rcall	8002bb7a <cpu_irq_restore>
8002bdc4:	2f fd       	sub	sp,-4
8002bdc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bdca:	00 00       	add	r0,r0
8002bdcc:	80 02       	ld.sh	r2,r0[0x0]
8002bdce:	bc 22       	st.h	lr[0x4],r2

8002bdd0 <cpu_irq_save>:
8002bdd0:	eb cd 40 80 	pushm	r7,lr
8002bdd4:	1a 97       	mov	r7,sp
8002bdd6:	20 1d       	sub	sp,4
8002bdd8:	e1 b8 00 00 	mfsr	r8,0x0
8002bddc:	ef 48 ff fc 	st.w	r7[-4],r8
8002bde0:	d3 03       	ssrf	0x10
8002bde2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bde6:	10 9c       	mov	r12,r8
8002bde8:	2f fd       	sub	sp,-4
8002bdea:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bdee <cpu_irq_restore>:
8002bdee:	eb cd 40 80 	pushm	r7,lr
8002bdf2:	1a 97       	mov	r7,sp
8002bdf4:	20 1d       	sub	sp,4
8002bdf6:	ef 4c ff fc 	st.w	r7[-4],r12
8002bdfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdfe:	e3 b8 00 00 	mtsr	0x0,r8
8002be02:	2f fd       	sub	sp,-4
8002be04:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be08 <pll_config_write>:
8002be08:	eb cd 40 c0 	pushm	r6-r7,lr
8002be0c:	1a 97       	mov	r7,sp
8002be0e:	20 3d       	sub	sp,12
8002be10:	49 26       	lddpc	r6,8002be58 <pll_config_write+0x50>
8002be12:	1e 26       	rsub	r6,pc
8002be14:	ef 4c ff f8 	st.w	r7[-8],r12
8002be18:	ef 4b ff f4 	st.w	r7[-12],r11
8002be1c:	cd af       	rcall	8002bdd0 <cpu_irq_save>
8002be1e:	18 98       	mov	r8,r12
8002be20:	ef 48 ff fc 	st.w	r7[-4],r8
8002be24:	fe 78 08 00 	mov	r8,-63488
8002be28:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be2c:	2f 99       	sub	r9,-7
8002be2e:	a3 69       	lsl	r9,0x2
8002be30:	ea 19 aa 00 	orh	r9,0xaa00
8002be34:	91 69       	st.w	r8[0x18],r9
8002be36:	fe 78 08 00 	mov	r8,-63488
8002be3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be3e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002be42:	74 0a       	ld.w	r10,r10[0x0]
8002be44:	2f 99       	sub	r9,-7
8002be46:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002be4a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002be4e:	cd 0f       	rcall	8002bdee <cpu_irq_restore>
8002be50:	2f dd       	sub	sp,-12
8002be52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be56:	00 00       	add	r0,r0
8002be58:	80 02       	ld.sh	r2,r0[0x0]
8002be5a:	bc 96       	st.b	lr[0x1],r6

8002be5c <pll_enable>:
8002be5c:	eb cd 40 c0 	pushm	r6-r7,lr
8002be60:	1a 97       	mov	r7,sp
8002be62:	20 3d       	sub	sp,12
8002be64:	49 26       	lddpc	r6,8002beac <pll_enable+0x50>
8002be66:	1e 26       	rsub	r6,pc
8002be68:	ef 4c ff f8 	st.w	r7[-8],r12
8002be6c:	ef 4b ff f4 	st.w	r7[-12],r11
8002be70:	cb 0f       	rcall	8002bdd0 <cpu_irq_save>
8002be72:	18 98       	mov	r8,r12
8002be74:	ef 48 ff fc 	st.w	r7[-4],r8
8002be78:	fe 78 08 00 	mov	r8,-63488
8002be7c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be80:	2f 99       	sub	r9,-7
8002be82:	a3 69       	lsl	r9,0x2
8002be84:	ea 19 aa 00 	orh	r9,0xaa00
8002be88:	91 69       	st.w	r8[0x18],r9
8002be8a:	fe 78 08 00 	mov	r8,-63488
8002be8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be92:	ee fa ff f8 	ld.w	r10,r7[-8]
8002be96:	74 0a       	ld.w	r10,r10[0x0]
8002be98:	a1 aa       	sbr	r10,0x0
8002be9a:	2f 99       	sub	r9,-7
8002be9c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002bea0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bea4:	ca 5f       	rcall	8002bdee <cpu_irq_restore>
8002bea6:	2f dd       	sub	sp,-12
8002bea8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002beac:	80 02       	ld.sh	r2,r0[0x0]
8002beae:	bc ea       	st.b	lr[0x6],r10

8002beb0 <pll_disable>:
8002beb0:	eb cd 40 c0 	pushm	r6-r7,lr
8002beb4:	1a 97       	mov	r7,sp
8002beb6:	20 2d       	sub	sp,8
8002beb8:	49 06       	lddpc	r6,8002bef8 <pll_disable+0x48>
8002beba:	1e 26       	rsub	r6,pc
8002bebc:	ef 4c ff f8 	st.w	r7[-8],r12
8002bec0:	c8 8f       	rcall	8002bdd0 <cpu_irq_save>
8002bec2:	18 98       	mov	r8,r12
8002bec4:	ef 48 ff fc 	st.w	r7[-4],r8
8002bec8:	fe 78 08 00 	mov	r8,-63488
8002becc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bed0:	2f 99       	sub	r9,-7
8002bed2:	a3 69       	lsl	r9,0x2
8002bed4:	ea 19 aa 00 	orh	r9,0xaa00
8002bed8:	91 69       	st.w	r8[0x18],r9
8002beda:	fe 78 08 00 	mov	r8,-63488
8002bede:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bee2:	2f 99       	sub	r9,-7
8002bee4:	30 0a       	mov	r10,0
8002bee6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002beea:	ee fc ff fc 	ld.w	r12,r7[-4]
8002beee:	c8 0f       	rcall	8002bdee <cpu_irq_restore>
8002bef0:	2f ed       	sub	sp,-8
8002bef2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bef6:	00 00       	add	r0,r0
8002bef8:	80 02       	ld.sh	r2,r0[0x0]
8002befa:	bd 3e       	mul	lr,lr

8002befc <cpu_irq_save>:
8002befc:	eb cd 40 80 	pushm	r7,lr
8002bf00:	1a 97       	mov	r7,sp
8002bf02:	20 1d       	sub	sp,4
8002bf04:	e1 b8 00 00 	mfsr	r8,0x0
8002bf08:	ef 48 ff fc 	st.w	r7[-4],r8
8002bf0c:	d3 03       	ssrf	0x10
8002bf0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf12:	10 9c       	mov	r12,r8
8002bf14:	2f fd       	sub	sp,-4
8002bf16:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf1a <cpu_irq_restore>:
8002bf1a:	eb cd 40 80 	pushm	r7,lr
8002bf1e:	1a 97       	mov	r7,sp
8002bf20:	20 1d       	sub	sp,4
8002bf22:	ef 4c ff fc 	st.w	r7[-4],r12
8002bf26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf2a:	e3 b8 00 00 	mtsr	0x0,r8
8002bf2e:	2f fd       	sub	sp,-4
8002bf30:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf34 <osc_enable>:
8002bf34:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf38:	1a 97       	mov	r7,sp
8002bf3a:	20 1d       	sub	sp,4
8002bf3c:	49 16       	lddpc	r6,8002bf80 <osc_enable+0x4c>
8002bf3e:	1e 26       	rsub	r6,pc
8002bf40:	18 98       	mov	r8,r12
8002bf42:	ef 68 ff fc 	st.b	r7[-4],r8
8002bf46:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bf4a:	58 28       	cp.w	r8,2
8002bf4c:	c1 10       	breq	8002bf6e <osc_enable+0x3a>
8002bf4e:	e0 89 00 05 	brgt	8002bf58 <osc_enable+0x24>
8002bf52:	58 08       	cp.w	r8,0
8002bf54:	c0 70       	breq	8002bf62 <osc_enable+0x2e>
8002bf56:	c1 18       	rjmp	8002bf78 <osc_enable+0x44>
8002bf58:	58 38       	cp.w	r8,3
8002bf5a:	c0 70       	breq	8002bf68 <osc_enable+0x34>
8002bf5c:	58 48       	cp.w	r8,4
8002bf5e:	c0 b0       	breq	8002bf74 <osc_enable+0x40>
8002bf60:	c0 c8       	rjmp	8002bf78 <osc_enable+0x44>
8002bf62:	f0 16 01 e3 	mcall	r6[1932]
8002bf66:	c0 98       	rjmp	8002bf78 <osc_enable+0x44>
8002bf68:	f0 16 01 da 	mcall	r6[1896]
8002bf6c:	c0 68       	rjmp	8002bf78 <osc_enable+0x44>
8002bf6e:	f0 16 01 6f 	mcall	r6[1468]
8002bf72:	c0 38       	rjmp	8002bf78 <osc_enable+0x44>
8002bf74:	f0 16 01 9a 	mcall	r6[1640]
8002bf78:	2f fd       	sub	sp,-4
8002bf7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf7e:	00 00       	add	r0,r0
8002bf80:	80 02       	ld.sh	r2,r0[0x0]
8002bf82:	bd c2       	cbr	r2,0x1c

8002bf84 <osc_is_ready>:
8002bf84:	eb cd 40 80 	pushm	r7,lr
8002bf88:	1a 97       	mov	r7,sp
8002bf8a:	20 1d       	sub	sp,4
8002bf8c:	18 98       	mov	r8,r12
8002bf8e:	ef 68 ff fc 	st.b	r7[-4],r8
8002bf92:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bf96:	58 38       	cp.w	r8,3
8002bf98:	c1 50       	breq	8002bfc2 <osc_is_ready+0x3e>
8002bf9a:	e0 89 00 07 	brgt	8002bfa8 <osc_is_ready+0x24>
8002bf9e:	58 08       	cp.w	r8,0
8002bfa0:	c0 90       	breq	8002bfb2 <osc_is_ready+0x2e>
8002bfa2:	58 28       	cp.w	r8,2
8002bfa4:	c1 70       	breq	8002bfd2 <osc_is_ready+0x4e>
8002bfa6:	c2 88       	rjmp	8002bff6 <osc_is_ready+0x72>
8002bfa8:	58 48       	cp.w	r8,4
8002bfaa:	c1 c0       	breq	8002bfe2 <osc_is_ready+0x5e>
8002bfac:	58 58       	cp.w	r8,5
8002bfae:	c2 20       	breq	8002bff2 <osc_is_ready+0x6e>
8002bfb0:	c2 38       	rjmp	8002bff6 <osc_is_ready+0x72>
8002bfb2:	fe 78 08 00 	mov	r8,-63488
8002bfb6:	70 58       	ld.w	r8,r8[0x14]
8002bfb8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bfbc:	5f 18       	srne	r8
8002bfbe:	5c 58       	castu.b	r8
8002bfc0:	c1 c8       	rjmp	8002bff8 <osc_is_ready+0x74>
8002bfc2:	fe 78 08 00 	mov	r8,-63488
8002bfc6:	70 58       	ld.w	r8,r8[0x14]
8002bfc8:	e2 18 00 04 	andl	r8,0x4,COH
8002bfcc:	5f 18       	srne	r8
8002bfce:	5c 58       	castu.b	r8
8002bfd0:	c1 48       	rjmp	8002bff8 <osc_is_ready+0x74>
8002bfd2:	fe 78 08 00 	mov	r8,-63488
8002bfd6:	70 58       	ld.w	r8,r8[0x14]
8002bfd8:	e2 18 00 08 	andl	r8,0x8,COH
8002bfdc:	5f 18       	srne	r8
8002bfde:	5c 58       	castu.b	r8
8002bfe0:	c0 c8       	rjmp	8002bff8 <osc_is_ready+0x74>
8002bfe2:	fe 78 08 00 	mov	r8,-63488
8002bfe6:	71 68       	ld.w	r8,r8[0x58]
8002bfe8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bfec:	5f 18       	srne	r8
8002bfee:	5c 58       	castu.b	r8
8002bff0:	c0 48       	rjmp	8002bff8 <osc_is_ready+0x74>
8002bff2:	30 18       	mov	r8,1
8002bff4:	c0 28       	rjmp	8002bff8 <osc_is_ready+0x74>
8002bff6:	30 08       	mov	r8,0
8002bff8:	10 9c       	mov	r12,r8
8002bffa:	2f fd       	sub	sp,-4
8002bffc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c000 <osc_get_rate>:
8002c000:	eb cd 40 80 	pushm	r7,lr
8002c004:	1a 97       	mov	r7,sp
8002c006:	20 1d       	sub	sp,4
8002c008:	18 98       	mov	r8,r12
8002c00a:	ef 68 ff fc 	st.b	r7[-4],r8
8002c00e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c012:	58 38       	cp.w	r8,3
8002c014:	c1 20       	breq	8002c038 <osc_get_rate+0x38>
8002c016:	e0 89 00 07 	brgt	8002c024 <osc_get_rate+0x24>
8002c01a:	58 08       	cp.w	r8,0
8002c01c:	c0 90       	breq	8002c02e <osc_get_rate+0x2e>
8002c01e:	58 28       	cp.w	r8,2
8002c020:	c0 f0       	breq	8002c03e <osc_get_rate+0x3e>
8002c022:	c1 b8       	rjmp	8002c058 <osc_get_rate+0x58>
8002c024:	58 48       	cp.w	r8,4
8002c026:	c1 10       	breq	8002c048 <osc_get_rate+0x48>
8002c028:	58 58       	cp.w	r8,5
8002c02a:	c1 40       	breq	8002c052 <osc_get_rate+0x52>
8002c02c:	c1 68       	rjmp	8002c058 <osc_get_rate+0x58>
8002c02e:	e0 68 24 00 	mov	r8,9216
8002c032:	ea 18 00 f4 	orh	r8,0xf4
8002c036:	c1 28       	rjmp	8002c05a <osc_get_rate+0x5a>
8002c038:	e0 68 80 00 	mov	r8,32768
8002c03c:	c0 f8       	rjmp	8002c05a <osc_get_rate+0x5a>
8002c03e:	e0 68 12 00 	mov	r8,4608
8002c042:	ea 18 00 7a 	orh	r8,0x7a
8002c046:	c0 a8       	rjmp	8002c05a <osc_get_rate+0x5a>
8002c048:	e0 68 0e 00 	mov	r8,3584
8002c04c:	ea 18 07 27 	orh	r8,0x727
8002c050:	c0 58       	rjmp	8002c05a <osc_get_rate+0x5a>
8002c052:	e0 78 c1 38 	mov	r8,115000
8002c056:	c0 28       	rjmp	8002c05a <osc_get_rate+0x5a>
8002c058:	30 08       	mov	r8,0
8002c05a:	10 9c       	mov	r12,r8
8002c05c:	2f fd       	sub	sp,-4
8002c05e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c062 <osc_wait_ready>:
8002c062:	eb cd 40 c0 	pushm	r6-r7,lr
8002c066:	1a 97       	mov	r7,sp
8002c068:	20 1d       	sub	sp,4
8002c06a:	48 96       	lddpc	r6,8002c08c <osc_wait_ready+0x2a>
8002c06c:	1e 26       	rsub	r6,pc
8002c06e:	18 98       	mov	r8,r12
8002c070:	ef 68 ff fc 	st.b	r7[-4],r8
8002c074:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c078:	10 9c       	mov	r12,r8
8002c07a:	c8 5f       	rcall	8002bf84 <osc_is_ready>
8002c07c:	18 98       	mov	r8,r12
8002c07e:	ec 18 00 01 	eorl	r8,0x1
8002c082:	5c 58       	castu.b	r8
8002c084:	cf 81       	brne	8002c074 <osc_wait_ready+0x12>
8002c086:	2f fd       	sub	sp,-4
8002c088:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c08c:	80 02       	ld.sh	r2,r0[0x0]
8002c08e:	be f0       	st.b	pc[0x7],r0

8002c090 <pll_config_set_option>:
8002c090:	eb cd 40 80 	pushm	r7,lr
8002c094:	1a 97       	mov	r7,sp
8002c096:	20 2d       	sub	sp,8
8002c098:	ef 4c ff fc 	st.w	r7[-4],r12
8002c09c:	ef 4b ff f8 	st.w	r7[-8],r11
8002c0a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0a4:	70 09       	ld.w	r9,r8[0x0]
8002c0a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0aa:	2f d8       	sub	r8,-3
8002c0ac:	30 1a       	mov	r10,1
8002c0ae:	f4 08 09 48 	lsl	r8,r10,r8
8002c0b2:	10 49       	or	r9,r8
8002c0b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0b8:	91 09       	st.w	r8[0x0],r9
8002c0ba:	2f ed       	sub	sp,-8
8002c0bc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0c0 <pll_config_init>:
8002c0c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0c4:	1a 97       	mov	r7,sp
8002c0c6:	20 5d       	sub	sp,20
8002c0c8:	4b 46       	lddpc	r6,8002c198 <pll_config_init+0xd8>
8002c0ca:	1e 26       	rsub	r6,pc
8002c0cc:	ef 4c ff f8 	st.w	r7[-8],r12
8002c0d0:	ef 4b ff f4 	st.w	r7[-12],r11
8002c0d4:	ef 4a ff f0 	st.w	r7[-16],r10
8002c0d8:	ef 49 ff ec 	st.w	r7[-20],r9
8002c0dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c0e0:	5c 58       	castu.b	r8
8002c0e2:	10 9c       	mov	r12,r8
8002c0e4:	c8 ef       	rcall	8002c000 <osc_get_rate>
8002c0e6:	18 99       	mov	r9,r12
8002c0e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c0ec:	f2 08 02 48 	mul	r8,r9,r8
8002c0f0:	ef 48 ff fc 	st.w	r7[-4],r8
8002c0f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c0fc:	f0 09 0d 08 	divu	r8,r8,r9
8002c100:	ef 48 ff fc 	st.w	r7[-4],r8
8002c104:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c108:	30 09       	mov	r9,0
8002c10a:	91 09       	st.w	r8[0x0],r9
8002c10c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c110:	e0 69 b3 ff 	mov	r9,46079
8002c114:	ea 19 04 c4 	orh	r9,0x4c4
8002c118:	12 38       	cp.w	r8,r9
8002c11a:	e0 8b 00 15 	brhi	8002c144 <pll_config_init+0x84>
8002c11e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c122:	58 88       	cp.w	r8,8
8002c124:	e0 8b 00 10 	brhi	8002c144 <pll_config_init+0x84>
8002c128:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c12c:	a1 78       	lsl	r8,0x1
8002c12e:	ef 48 ff ec 	st.w	r7[-20],r8
8002c132:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c136:	a1 78       	lsl	r8,0x1
8002c138:	ef 48 ff fc 	st.w	r7[-4],r8
8002c13c:	30 1b       	mov	r11,1
8002c13e:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c142:	ca 7f       	rcall	8002c090 <pll_config_set_option>
8002c144:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c148:	e0 69 fe 7f 	mov	r9,65151
8002c14c:	ea 19 0a 21 	orh	r9,0xa21
8002c150:	12 38       	cp.w	r8,r9
8002c152:	e0 8b 00 06 	brhi	8002c15e <pll_config_init+0x9e>
8002c156:	30 0b       	mov	r11,0
8002c158:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c15c:	c9 af       	rcall	8002c090 <pll_config_set_option>
8002c15e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c162:	70 09       	ld.w	r9,r8[0x0]
8002c164:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c168:	20 18       	sub	r8,1
8002c16a:	f0 0a 15 10 	lsl	r10,r8,0x10
8002c16e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c172:	a9 68       	lsl	r8,0x8
8002c174:	10 4a       	or	r10,r8
8002c176:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c17a:	a1 78       	lsl	r8,0x1
8002c17c:	f5 e8 10 08 	or	r8,r10,r8
8002c180:	f3 e8 10 08 	or	r8,r9,r8
8002c184:	10 99       	mov	r9,r8
8002c186:	ea 19 3f 00 	orh	r9,0x3f00
8002c18a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c18e:	91 09       	st.w	r8[0x0],r9
8002c190:	2f bd       	sub	sp,-20
8002c192:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c196:	00 00       	add	r0,r0
8002c198:	80 02       	ld.sh	r2,r0[0x0]
8002c19a:	bf 4e       	asr	lr,0x1e

8002c19c <pll_is_locked>:
8002c19c:	eb cd 40 80 	pushm	r7,lr
8002c1a0:	1a 97       	mov	r7,sp
8002c1a2:	20 1d       	sub	sp,4
8002c1a4:	ef 4c ff fc 	st.w	r7[-4],r12
8002c1a8:	fe 78 08 00 	mov	r8,-63488
8002c1ac:	70 59       	ld.w	r9,r8[0x14]
8002c1ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1b2:	2f c8       	sub	r8,-4
8002c1b4:	30 1a       	mov	r10,1
8002c1b6:	f4 08 09 48 	lsl	r8,r10,r8
8002c1ba:	f3 e8 00 08 	and	r8,r9,r8
8002c1be:	5f 18       	srne	r8
8002c1c0:	5c 58       	castu.b	r8
8002c1c2:	10 9c       	mov	r12,r8
8002c1c4:	2f fd       	sub	sp,-4
8002c1c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1ca <pll_enable_source_sync>:
8002c1ca:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1ce:	1a 97       	mov	r7,sp
8002c1d0:	20 1d       	sub	sp,4
8002c1d2:	49 06       	lddpc	r6,8002c210 <pll_enable_source_sync+0x46>
8002c1d4:	1e 26       	rsub	r6,pc
8002c1d6:	ef 4c ff fc 	st.w	r7[-4],r12
8002c1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1de:	58 18       	cp.w	r8,1
8002c1e0:	e0 88 00 05 	brls	8002c1ea <pll_enable_source_sync+0x20>
8002c1e4:	58 28       	cp.w	r8,2
8002c1e6:	c0 d0       	breq	8002c200 <pll_enable_source_sync+0x36>
8002c1e8:	c1 08       	rjmp	8002c208 <pll_enable_source_sync+0x3e>
8002c1ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1ee:	5c 58       	castu.b	r8
8002c1f0:	10 9c       	mov	r12,r8
8002c1f2:	ca 1e       	rcall	8002bf34 <osc_enable>
8002c1f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1f8:	5c 58       	castu.b	r8
8002c1fa:	10 9c       	mov	r12,r8
8002c1fc:	c3 3f       	rcall	8002c062 <osc_wait_ready>
8002c1fe:	c0 58       	rjmp	8002c208 <pll_enable_source_sync+0x3e>
8002c200:	30 2c       	mov	r12,2
8002c202:	c9 9e       	rcall	8002bf34 <osc_enable>
8002c204:	30 2c       	mov	r12,2
8002c206:	c2 ef       	rcall	8002c062 <osc_wait_ready>
8002c208:	2f fd       	sub	sp,-4
8002c20a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c20e:	00 00       	add	r0,r0
8002c210:	80 02       	ld.sh	r2,r0[0x0]
8002c212:	c0 58       	rjmp	8002c21c <pll_wait_for_lock+0x8>

8002c214 <pll_wait_for_lock>:
8002c214:	eb cd 40 c0 	pushm	r6-r7,lr
8002c218:	1a 97       	mov	r7,sp
8002c21a:	20 1d       	sub	sp,4
8002c21c:	48 96       	lddpc	r6,8002c240 <pll_wait_for_lock+0x2c>
8002c21e:	1e 26       	rsub	r6,pc
8002c220:	ef 4c ff fc 	st.w	r7[-4],r12
8002c224:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c228:	cb af       	rcall	8002c19c <pll_is_locked>
8002c22a:	18 98       	mov	r8,r12
8002c22c:	ec 18 00 01 	eorl	r8,0x1
8002c230:	5c 58       	castu.b	r8
8002c232:	cf 91       	brne	8002c224 <pll_wait_for_lock+0x10>
8002c234:	30 08       	mov	r8,0
8002c236:	10 9c       	mov	r12,r8
8002c238:	2f fd       	sub	sp,-4
8002c23a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c23e:	00 00       	add	r0,r0
8002c240:	80 02       	ld.sh	r2,r0[0x0]
8002c242:	c0 a2       	brcc	8002c256 <genclk_config_defaults+0x12>

8002c244 <genclk_config_defaults>:
8002c244:	eb cd 40 80 	pushm	r7,lr
8002c248:	1a 97       	mov	r7,sp
8002c24a:	20 2d       	sub	sp,8
8002c24c:	ef 4c ff fc 	st.w	r7[-4],r12
8002c250:	ef 4b ff f8 	st.w	r7[-8],r11
8002c254:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c258:	30 09       	mov	r9,0
8002c25a:	91 09       	st.w	r8[0x0],r9
8002c25c:	2f ed       	sub	sp,-8
8002c25e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c262 <genclk_config_set_source>:
8002c262:	eb cd 40 80 	pushm	r7,lr
8002c266:	1a 97       	mov	r7,sp
8002c268:	20 2d       	sub	sp,8
8002c26a:	ef 4c ff fc 	st.w	r7[-4],r12
8002c26e:	ef 4b ff f8 	st.w	r7[-8],r11
8002c272:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c276:	70 08       	ld.w	r8,r8[0x0]
8002c278:	10 99       	mov	r9,r8
8002c27a:	e0 19 f0 ff 	andl	r9,0xf0ff
8002c27e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c282:	a9 68       	lsl	r8,0x8
8002c284:	10 49       	or	r9,r8
8002c286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c28a:	91 09       	st.w	r8[0x0],r9
8002c28c:	2f ed       	sub	sp,-8
8002c28e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c292 <genclk_config_set_divider>:
8002c292:	eb cd 40 80 	pushm	r7,lr
8002c296:	1a 97       	mov	r7,sp
8002c298:	20 2d       	sub	sp,8
8002c29a:	ef 4c ff fc 	st.w	r7[-4],r12
8002c29e:	ef 4b ff f8 	st.w	r7[-8],r11
8002c2a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2a6:	70 08       	ld.w	r8,r8[0x0]
8002c2a8:	10 99       	mov	r9,r8
8002c2aa:	e4 19 ff 00 	andh	r9,0xff00
8002c2ae:	e0 19 ff fd 	andl	r9,0xfffd
8002c2b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2b6:	91 09       	st.w	r8[0x0],r9
8002c2b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2bc:	58 18       	cp.w	r8,1
8002c2be:	e0 88 00 17 	brls	8002c2ec <genclk_config_set_divider+0x5a>
8002c2c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2c6:	70 08       	ld.w	r8,r8[0x0]
8002c2c8:	10 99       	mov	r9,r8
8002c2ca:	a1 b9       	sbr	r9,0x1
8002c2cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2d0:	91 09       	st.w	r8[0x0],r9
8002c2d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2d6:	70 09       	ld.w	r9,r8[0x0]
8002c2d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2dc:	2f f8       	sub	r8,-1
8002c2de:	a1 98       	lsr	r8,0x1
8002c2e0:	20 18       	sub	r8,1
8002c2e2:	b1 68       	lsl	r8,0x10
8002c2e4:	10 49       	or	r9,r8
8002c2e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2ea:	91 09       	st.w	r8[0x0],r9
8002c2ec:	2f ed       	sub	sp,-8
8002c2ee:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2f2 <genclk_enable>:
8002c2f2:	eb cd 40 80 	pushm	r7,lr
8002c2f6:	1a 97       	mov	r7,sp
8002c2f8:	20 2d       	sub	sp,8
8002c2fa:	ef 4c ff fc 	st.w	r7[-4],r12
8002c2fe:	ef 4b ff f8 	st.w	r7[-8],r11
8002c302:	fe 78 08 00 	mov	r8,-63488
8002c306:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c30a:	ee fa ff fc 	ld.w	r10,r7[-4]
8002c30e:	74 0a       	ld.w	r10,r10[0x0]
8002c310:	a1 aa       	sbr	r10,0x0
8002c312:	2e 79       	sub	r9,-25
8002c314:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002c318:	2f ed       	sub	sp,-8
8002c31a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c31e <genclk_disable>:
8002c31e:	eb cd 40 80 	pushm	r7,lr
8002c322:	1a 97       	mov	r7,sp
8002c324:	20 1d       	sub	sp,4
8002c326:	ef 4c ff fc 	st.w	r7[-4],r12
8002c32a:	fe 78 08 00 	mov	r8,-63488
8002c32e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c332:	2e 79       	sub	r9,-25
8002c334:	30 0a       	mov	r10,0
8002c336:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8002c33a:	2f fd       	sub	sp,-4
8002c33c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c340 <sysclk_get_main_hz>:
8002c340:	eb cd 40 c0 	pushm	r6-r7,lr
8002c344:	1a 97       	mov	r7,sp
8002c346:	48 56       	lddpc	r6,8002c358 <sysclk_get_main_hz+0x18>
8002c348:	1e 26       	rsub	r6,pc
8002c34a:	30 0c       	mov	r12,0
8002c34c:	c5 ae       	rcall	8002c000 <osc_get_rate>
8002c34e:	18 98       	mov	r8,r12
8002c350:	a3 68       	lsl	r8,0x2
8002c352:	10 9c       	mov	r12,r8
8002c354:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c358:	80 02       	ld.sh	r2,r0[0x0]
8002c35a:	c1 cc       	rcall	8002c392 <sysclk_priv_enable_module+0x36>

8002c35c <sysclk_priv_enable_module>:
8002c35c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c360:	1a 97       	mov	r7,sp
8002c362:	20 4d       	sub	sp,16
8002c364:	49 d6       	lddpc	r6,8002c3d8 <sysclk_priv_enable_module+0x7c>
8002c366:	1e 26       	rsub	r6,pc
8002c368:	ef 4c ff f4 	st.w	r7[-12],r12
8002c36c:	ef 4b ff f0 	st.w	r7[-16],r11
8002c370:	fe b0 fd c6 	rcall	8002befc <cpu_irq_save>
8002c374:	18 98       	mov	r8,r12
8002c376:	ef 48 ff f8 	st.w	r7[-8],r8
8002c37a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c37e:	a3 68       	lsl	r8,0x2
8002c380:	e0 28 fb e0 	sub	r8,64480
8002c384:	70 08       	ld.w	r8,r8[0x0]
8002c386:	ef 48 ff fc 	st.w	r7[-4],r8
8002c38a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c38e:	30 19       	mov	r9,1
8002c390:	f2 08 09 48 	lsl	r8,r9,r8
8002c394:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c398:	f3 e8 10 08 	or	r8,r9,r8
8002c39c:	ef 48 ff fc 	st.w	r7[-4],r8
8002c3a0:	fe 78 04 00 	mov	r8,-64512
8002c3a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c3a8:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c3ac:	32 09       	mov	r9,32
8002c3ae:	ea 19 aa 00 	orh	r9,0xaa00
8002c3b2:	f4 09 00 09 	add	r9,r10,r9
8002c3b6:	f1 49 00 58 	st.w	r8[88],r9
8002c3ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c3be:	a3 68       	lsl	r8,0x2
8002c3c0:	e0 28 fb e0 	sub	r8,64480
8002c3c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3c8:	91 09       	st.w	r8[0x0],r9
8002c3ca:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c3ce:	fe b0 fd a6 	rcall	8002bf1a <cpu_irq_restore>
8002c3d2:	2f cd       	sub	sp,-16
8002c3d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c3d8:	80 02       	ld.sh	r2,r0[0x0]
8002c3da:	c1 ea       	rjmp	8002c016 <osc_get_rate+0x16>

8002c3dc <sysclk_priv_disable_module>:
8002c3dc:	eb cd 40 c0 	pushm	r6-r7,lr
8002c3e0:	1a 97       	mov	r7,sp
8002c3e2:	20 4d       	sub	sp,16
8002c3e4:	49 e6       	lddpc	r6,8002c45c <sysclk_priv_disable_module+0x80>
8002c3e6:	1e 26       	rsub	r6,pc
8002c3e8:	ef 4c ff f4 	st.w	r7[-12],r12
8002c3ec:	ef 4b ff f0 	st.w	r7[-16],r11
8002c3f0:	fe b0 fd 86 	rcall	8002befc <cpu_irq_save>
8002c3f4:	18 98       	mov	r8,r12
8002c3f6:	ef 48 ff f8 	st.w	r7[-8],r8
8002c3fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c3fe:	a3 68       	lsl	r8,0x2
8002c400:	e0 28 fb e0 	sub	r8,64480
8002c404:	70 08       	ld.w	r8,r8[0x0]
8002c406:	ef 48 ff fc 	st.w	r7[-4],r8
8002c40a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c40e:	30 19       	mov	r9,1
8002c410:	f2 08 09 48 	lsl	r8,r9,r8
8002c414:	5c d8       	com	r8
8002c416:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c41a:	f3 e8 00 08 	and	r8,r9,r8
8002c41e:	ef 48 ff fc 	st.w	r7[-4],r8
8002c422:	fe 78 04 00 	mov	r8,-64512
8002c426:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c42a:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c42e:	32 09       	mov	r9,32
8002c430:	ea 19 aa 00 	orh	r9,0xaa00
8002c434:	f4 09 00 09 	add	r9,r10,r9
8002c438:	f1 49 00 58 	st.w	r8[88],r9
8002c43c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c440:	a3 68       	lsl	r8,0x2
8002c442:	e0 28 fb e0 	sub	r8,64480
8002c446:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c44a:	91 09       	st.w	r8[0x0],r9
8002c44c:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c450:	fe b0 fd 65 	rcall	8002bf1a <cpu_irq_restore>
8002c454:	2f cd       	sub	sp,-16
8002c456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c45a:	00 00       	add	r0,r0
8002c45c:	80 02       	ld.sh	r2,r0[0x0]
8002c45e:	c2 6a       	rjmp	8002c0aa <pll_config_set_option+0x1a>

8002c460 <sysclk_set_prescalers>:
8002c460:	eb cd 40 c0 	pushm	r6-r7,lr
8002c464:	1a 97       	mov	r7,sp
8002c466:	20 9d       	sub	sp,36
8002c468:	4b f6       	lddpc	r6,8002c564 <sysclk_set_prescalers+0x104>
8002c46a:	1e 26       	rsub	r6,pc
8002c46c:	ef 4c ff e8 	st.w	r7[-24],r12
8002c470:	ef 4b ff e4 	st.w	r7[-28],r11
8002c474:	ef 4a ff e0 	st.w	r7[-32],r10
8002c478:	ef 49 ff dc 	st.w	r7[-36],r9
8002c47c:	30 08       	mov	r8,0
8002c47e:	ef 48 ff f0 	st.w	r7[-16],r8
8002c482:	30 08       	mov	r8,0
8002c484:	ef 48 ff f4 	st.w	r7[-12],r8
8002c488:	30 08       	mov	r8,0
8002c48a:	ef 48 ff f8 	st.w	r7[-8],r8
8002c48e:	30 08       	mov	r8,0
8002c490:	ef 48 ff fc 	st.w	r7[-4],r8
8002c494:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c498:	58 08       	cp.w	r8,0
8002c49a:	c0 80       	breq	8002c4aa <sysclk_set_prescalers+0x4a>
8002c49c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c4a0:	20 18       	sub	r8,1
8002c4a2:	a5 68       	lsl	r8,0x4
8002c4a4:	a7 b8       	sbr	r8,0x7
8002c4a6:	ef 48 ff f0 	st.w	r7[-16],r8
8002c4aa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c4ae:	58 08       	cp.w	r8,0
8002c4b0:	c0 80       	breq	8002c4c0 <sysclk_set_prescalers+0x60>
8002c4b2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c4b6:	20 18       	sub	r8,1
8002c4b8:	ad 68       	lsl	r8,0xc
8002c4ba:	a7 b8       	sbr	r8,0x7
8002c4bc:	ef 48 ff f4 	st.w	r7[-12],r8
8002c4c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c4c4:	58 08       	cp.w	r8,0
8002c4c6:	c0 80       	breq	8002c4d6 <sysclk_set_prescalers+0x76>
8002c4c8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c4cc:	20 18       	sub	r8,1
8002c4ce:	b1 68       	lsl	r8,0x10
8002c4d0:	a7 b8       	sbr	r8,0x7
8002c4d2:	ef 48 ff f8 	st.w	r7[-8],r8
8002c4d6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c4da:	58 08       	cp.w	r8,0
8002c4dc:	c0 80       	breq	8002c4ec <sysclk_set_prescalers+0x8c>
8002c4de:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c4e2:	20 18       	sub	r8,1
8002c4e4:	b5 68       	lsl	r8,0x14
8002c4e6:	a7 b8       	sbr	r8,0x7
8002c4e8:	ef 48 ff fc 	st.w	r7[-4],r8
8002c4ec:	fe b0 fd 08 	rcall	8002befc <cpu_irq_save>
8002c4f0:	18 98       	mov	r8,r12
8002c4f2:	ef 48 ff ec 	st.w	r7[-20],r8
8002c4f6:	fe 78 04 00 	mov	r8,-64512
8002c4fa:	30 49       	mov	r9,4
8002c4fc:	ea 19 aa 00 	orh	r9,0xaa00
8002c500:	f1 49 00 58 	st.w	r8[88],r9
8002c504:	fe 78 04 00 	mov	r8,-64512
8002c508:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c50c:	91 19       	st.w	r8[0x4],r9
8002c50e:	fe 78 04 00 	mov	r8,-64512
8002c512:	30 c9       	mov	r9,12
8002c514:	ea 19 aa 00 	orh	r9,0xaa00
8002c518:	f1 49 00 58 	st.w	r8[88],r9
8002c51c:	fe 78 04 00 	mov	r8,-64512
8002c520:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c524:	91 39       	st.w	r8[0xc],r9
8002c526:	fe 78 04 00 	mov	r8,-64512
8002c52a:	31 09       	mov	r9,16
8002c52c:	ea 19 aa 00 	orh	r9,0xaa00
8002c530:	f1 49 00 58 	st.w	r8[88],r9
8002c534:	fe 78 04 00 	mov	r8,-64512
8002c538:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c53c:	91 49       	st.w	r8[0x10],r9
8002c53e:	fe 78 04 00 	mov	r8,-64512
8002c542:	31 49       	mov	r9,20
8002c544:	ea 19 aa 00 	orh	r9,0xaa00
8002c548:	f1 49 00 58 	st.w	r8[88],r9
8002c54c:	fe 78 04 00 	mov	r8,-64512
8002c550:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c554:	91 49       	st.w	r8[0x10],r9
8002c556:	ee fc ff ec 	ld.w	r12,r7[-20]
8002c55a:	fe b0 fc e0 	rcall	8002bf1a <cpu_irq_restore>
8002c55e:	2f 7d       	sub	sp,-36
8002c560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c564:	80 02       	ld.sh	r2,r0[0x0]
8002c566:	c2 ee       	rcall	8002c1c2 <pll_is_locked+0x26>

8002c568 <sysclk_set_source>:
8002c568:	eb cd 40 c0 	pushm	r6-r7,lr
8002c56c:	1a 97       	mov	r7,sp
8002c56e:	20 2d       	sub	sp,8
8002c570:	48 e6       	lddpc	r6,8002c5a8 <sysclk_set_source+0x40>
8002c572:	1e 26       	rsub	r6,pc
8002c574:	ef 4c ff f8 	st.w	r7[-8],r12
8002c578:	fe b0 fc c2 	rcall	8002befc <cpu_irq_save>
8002c57c:	18 98       	mov	r8,r12
8002c57e:	ef 48 ff fc 	st.w	r7[-4],r8
8002c582:	fe 78 04 00 	mov	r8,-64512
8002c586:	fc 19 aa 00 	movh	r9,0xaa00
8002c58a:	f1 49 00 58 	st.w	r8[88],r9
8002c58e:	fe 78 04 00 	mov	r8,-64512
8002c592:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c596:	91 09       	st.w	r8[0x0],r9
8002c598:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c59c:	fe b0 fc bf 	rcall	8002bf1a <cpu_irq_restore>
8002c5a0:	2f ed       	sub	sp,-8
8002c5a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c5a6:	00 00       	add	r0,r0
8002c5a8:	80 02       	ld.sh	r2,r0[0x0]
8002c5aa:	c3 f6       	brmi	8002c628 <sysclk_init>

8002c5ac <sysclk_enable_usb>:
8002c5ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5b0:	1a 97       	mov	r7,sp
8002c5b2:	20 3d       	sub	sp,12
8002c5b4:	49 66       	lddpc	r6,8002c60c <sysclk_enable_usb+0x60>
8002c5b6:	1e 26       	rsub	r6,pc
8002c5b8:	ee c8 00 04 	sub	r8,r7,4
8002c5bc:	30 0b       	mov	r11,0
8002c5be:	10 9c       	mov	r12,r8
8002c5c0:	c4 2e       	rcall	8002c244 <genclk_config_defaults>
8002c5c2:	30 0c       	mov	r12,0
8002c5c4:	c0 3e       	rcall	8002c1ca <pll_enable_source_sync>
8002c5c6:	ee c8 00 0c 	sub	r8,r7,12
8002c5ca:	30 39       	mov	r9,3
8002c5cc:	30 1a       	mov	r10,1
8002c5ce:	30 0b       	mov	r11,0
8002c5d0:	10 9c       	mov	r12,r8
8002c5d2:	fe b0 fd 77 	rcall	8002c0c0 <pll_config_init>
8002c5d6:	ee c8 00 0c 	sub	r8,r7,12
8002c5da:	30 1b       	mov	r11,1
8002c5dc:	10 9c       	mov	r12,r8
8002c5de:	f0 16 00 ae 	mcall	r6[696]
8002c5e2:	30 1c       	mov	r12,1
8002c5e4:	c1 8e       	rcall	8002c214 <pll_wait_for_lock>
8002c5e6:	ee c8 00 04 	sub	r8,r7,4
8002c5ea:	30 6b       	mov	r11,6
8002c5ec:	10 9c       	mov	r12,r8
8002c5ee:	c3 ae       	rcall	8002c262 <genclk_config_set_source>
8002c5f0:	ee c8 00 04 	sub	r8,r7,4
8002c5f4:	30 1b       	mov	r11,1
8002c5f6:	10 9c       	mov	r12,r8
8002c5f8:	c4 de       	rcall	8002c292 <genclk_config_set_divider>
8002c5fa:	ee c8 00 04 	sub	r8,r7,4
8002c5fe:	30 0b       	mov	r11,0
8002c600:	10 9c       	mov	r12,r8
8002c602:	c7 8e       	rcall	8002c2f2 <genclk_enable>
8002c604:	2f dd       	sub	sp,-12
8002c606:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c60a:	00 00       	add	r0,r0
8002c60c:	80 02       	ld.sh	r2,r0[0x0]
8002c60e:	c4 3a       	rjmp	8002c294 <genclk_config_set_divider+0x2>

8002c610 <sysclk_disable_usb>:
8002c610:	eb cd 40 c0 	pushm	r6-r7,lr
8002c614:	1a 97       	mov	r7,sp
8002c616:	48 46       	lddpc	r6,8002c624 <sysclk_disable_usb+0x14>
8002c618:	1e 26       	rsub	r6,pc
8002c61a:	30 0c       	mov	r12,0
8002c61c:	c8 1e       	rcall	8002c31e <genclk_disable>
8002c61e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c622:	00 00       	add	r0,r0
8002c624:	80 02       	ld.sh	r2,r0[0x0]
8002c626:	c4 9c       	rcall	8002c6b8 <osc_get_rate+0x18>

8002c628 <sysclk_init>:
8002c628:	eb cd 40 c0 	pushm	r6-r7,lr
8002c62c:	1a 97       	mov	r7,sp
8002c62e:	20 2d       	sub	sp,8
8002c630:	49 b6       	lddpc	r6,8002c69c <sysclk_init+0x74>
8002c632:	1e 26       	rsub	r6,pc
8002c634:	30 0c       	mov	r12,0
8002c636:	fe b0 fd ca 	rcall	8002c1ca <pll_enable_source_sync>
8002c63a:	ee c8 00 04 	sub	r8,r7,4
8002c63e:	30 49       	mov	r9,4
8002c640:	30 1a       	mov	r10,1
8002c642:	30 0b       	mov	r11,0
8002c644:	10 9c       	mov	r12,r8
8002c646:	fe b0 fd 3d 	rcall	8002c0c0 <pll_config_init>
8002c64a:	ee c8 00 04 	sub	r8,r7,4
8002c64e:	30 0b       	mov	r11,0
8002c650:	10 9c       	mov	r12,r8
8002c652:	f0 16 00 ae 	mcall	r6[696]
8002c656:	30 0c       	mov	r12,0
8002c658:	fe b0 fd de 	rcall	8002c214 <pll_wait_for_lock>
8002c65c:	30 0c       	mov	r12,0
8002c65e:	fe b0 fd b6 	rcall	8002c1ca <pll_enable_source_sync>
8002c662:	ee c8 00 08 	sub	r8,r7,8
8002c666:	30 39       	mov	r9,3
8002c668:	30 1a       	mov	r10,1
8002c66a:	30 0b       	mov	r11,0
8002c66c:	10 9c       	mov	r12,r8
8002c66e:	fe b0 fd 29 	rcall	8002c0c0 <pll_config_init>
8002c672:	ee c8 00 08 	sub	r8,r7,8
8002c676:	30 1b       	mov	r11,1
8002c678:	10 9c       	mov	r12,r8
8002c67a:	f0 16 00 ae 	mcall	r6[696]
8002c67e:	30 1c       	mov	r12,1
8002c680:	fe b0 fd ca 	rcall	8002c214 <pll_wait_for_lock>
8002c684:	c5 ee       	rcall	8002c340 <sysclk_get_main_hz>
8002c686:	18 98       	mov	r8,r12
8002c688:	10 9c       	mov	r12,r8
8002c68a:	f0 16 01 62 	mcall	r6[1416]
8002c68e:	30 3c       	mov	r12,3
8002c690:	f0 16 01 c7 	mcall	r6[1820]
8002c694:	2f ed       	sub	sp,-8
8002c696:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c69a:	00 00       	add	r0,r0
8002c69c:	80 02       	ld.sh	r2,r0[0x0]
8002c69e:	c4 b6       	brmi	8002c734 <sysclk_get_pba_hz+0x14>

8002c6a0 <osc_get_rate>:
8002c6a0:	eb cd 40 80 	pushm	r7,lr
8002c6a4:	1a 97       	mov	r7,sp
8002c6a6:	20 1d       	sub	sp,4
8002c6a8:	18 98       	mov	r8,r12
8002c6aa:	ef 68 ff fc 	st.b	r7[-4],r8
8002c6ae:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c6b2:	58 38       	cp.w	r8,3
8002c6b4:	c1 20       	breq	8002c6d8 <osc_get_rate+0x38>
8002c6b6:	e0 89 00 07 	brgt	8002c6c4 <osc_get_rate+0x24>
8002c6ba:	58 08       	cp.w	r8,0
8002c6bc:	c0 90       	breq	8002c6ce <osc_get_rate+0x2e>
8002c6be:	58 28       	cp.w	r8,2
8002c6c0:	c0 f0       	breq	8002c6de <osc_get_rate+0x3e>
8002c6c2:	c1 b8       	rjmp	8002c6f8 <osc_get_rate+0x58>
8002c6c4:	58 48       	cp.w	r8,4
8002c6c6:	c1 10       	breq	8002c6e8 <osc_get_rate+0x48>
8002c6c8:	58 58       	cp.w	r8,5
8002c6ca:	c1 40       	breq	8002c6f2 <osc_get_rate+0x52>
8002c6cc:	c1 68       	rjmp	8002c6f8 <osc_get_rate+0x58>
8002c6ce:	e0 68 24 00 	mov	r8,9216
8002c6d2:	ea 18 00 f4 	orh	r8,0xf4
8002c6d6:	c1 28       	rjmp	8002c6fa <osc_get_rate+0x5a>
8002c6d8:	e0 68 80 00 	mov	r8,32768
8002c6dc:	c0 f8       	rjmp	8002c6fa <osc_get_rate+0x5a>
8002c6de:	e0 68 12 00 	mov	r8,4608
8002c6e2:	ea 18 00 7a 	orh	r8,0x7a
8002c6e6:	c0 a8       	rjmp	8002c6fa <osc_get_rate+0x5a>
8002c6e8:	e0 68 0e 00 	mov	r8,3584
8002c6ec:	ea 18 07 27 	orh	r8,0x727
8002c6f0:	c0 58       	rjmp	8002c6fa <osc_get_rate+0x5a>
8002c6f2:	e0 78 c1 38 	mov	r8,115000
8002c6f6:	c0 28       	rjmp	8002c6fa <osc_get_rate+0x5a>
8002c6f8:	30 08       	mov	r8,0
8002c6fa:	10 9c       	mov	r12,r8
8002c6fc:	2f fd       	sub	sp,-4
8002c6fe:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c702 <sysclk_get_main_hz>:
8002c702:	eb cd 40 c0 	pushm	r6-r7,lr
8002c706:	1a 97       	mov	r7,sp
8002c708:	48 56       	lddpc	r6,8002c71c <sysclk_get_main_hz+0x1a>
8002c70a:	1e 26       	rsub	r6,pc
8002c70c:	30 0c       	mov	r12,0
8002c70e:	cc 9f       	rcall	8002c6a0 <osc_get_rate>
8002c710:	18 98       	mov	r8,r12
8002c712:	a3 68       	lsl	r8,0x2
8002c714:	10 9c       	mov	r12,r8
8002c716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c71a:	00 00       	add	r0,r0
8002c71c:	80 02       	ld.sh	r2,r0[0x0]
8002c71e:	c5 8e       	rcall	8002c3ce <sysclk_priv_enable_module+0x72>

8002c720 <sysclk_get_pba_hz>:
8002c720:	eb cd 40 c0 	pushm	r6-r7,lr
8002c724:	1a 97       	mov	r7,sp
8002c726:	48 46       	lddpc	r6,8002c734 <sysclk_get_pba_hz+0x14>
8002c728:	1e 26       	rsub	r6,pc
8002c72a:	ce cf       	rcall	8002c702 <sysclk_get_main_hz>
8002c72c:	18 98       	mov	r8,r12
8002c72e:	10 9c       	mov	r12,r8
8002c730:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c734:	80 02       	ld.sh	r2,r0[0x0]
8002c736:	c5 ac       	rcall	8002c7ea <spi_set_chipselect_delay_bs+0x32>

8002c738 <spi_set_chipselect_delay_bct>:
8002c738:	eb cd 40 80 	pushm	r7,lr
8002c73c:	1a 97       	mov	r7,sp
8002c73e:	20 3d       	sub	sp,12
8002c740:	ef 4c ff fc 	st.w	r7[-4],r12
8002c744:	16 99       	mov	r9,r11
8002c746:	14 98       	mov	r8,r10
8002c748:	ef 69 ff f8 	st.b	r7[-8],r9
8002c74c:	ef 68 ff f4 	st.b	r7[-12],r8
8002c750:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c754:	58 18       	cp.w	r8,1
8002c756:	c1 40       	breq	8002c77e <spi_set_chipselect_delay_bct+0x46>
8002c758:	e0 89 00 05 	brgt	8002c762 <spi_set_chipselect_delay_bct+0x2a>
8002c75c:	58 08       	cp.w	r8,0
8002c75e:	c0 70       	breq	8002c76c <spi_set_chipselect_delay_bct+0x34>
8002c760:	c2 98       	rjmp	8002c7b2 <spi_set_chipselect_delay_bct+0x7a>
8002c762:	58 28       	cp.w	r8,2
8002c764:	c1 60       	breq	8002c790 <spi_set_chipselect_delay_bct+0x58>
8002c766:	58 38       	cp.w	r8,3
8002c768:	c1 d0       	breq	8002c7a2 <spi_set_chipselect_delay_bct+0x6a>
8002c76a:	c2 48       	rjmp	8002c7b2 <spi_set_chipselect_delay_bct+0x7a>
8002c76c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c770:	72 c8       	ld.w	r8,r9[0x30]
8002c772:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c776:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c77a:	93 c8       	st.w	r9[0x30],r8
8002c77c:	c1 b8       	rjmp	8002c7b2 <spi_set_chipselect_delay_bct+0x7a>
8002c77e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c782:	72 d8       	ld.w	r8,r9[0x34]
8002c784:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c788:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c78c:	93 d8       	st.w	r9[0x34],r8
8002c78e:	c1 28       	rjmp	8002c7b2 <spi_set_chipselect_delay_bct+0x7a>
8002c790:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c794:	72 e8       	ld.w	r8,r9[0x38]
8002c796:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c79a:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c79e:	93 e8       	st.w	r9[0x38],r8
8002c7a0:	c0 98       	rjmp	8002c7b2 <spi_set_chipselect_delay_bct+0x7a>
8002c7a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7a6:	72 f8       	ld.w	r8,r9[0x3c]
8002c7a8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c7ac:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c7b0:	93 f8       	st.w	r9[0x3c],r8
8002c7b2:	2f dd       	sub	sp,-12
8002c7b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c7b8 <spi_set_chipselect_delay_bs>:
8002c7b8:	eb cd 40 80 	pushm	r7,lr
8002c7bc:	1a 97       	mov	r7,sp
8002c7be:	20 3d       	sub	sp,12
8002c7c0:	ef 4c ff fc 	st.w	r7[-4],r12
8002c7c4:	16 99       	mov	r9,r11
8002c7c6:	14 98       	mov	r8,r10
8002c7c8:	ef 69 ff f8 	st.b	r7[-8],r9
8002c7cc:	ef 68 ff f4 	st.b	r7[-12],r8
8002c7d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c7d4:	58 18       	cp.w	r8,1
8002c7d6:	c1 40       	breq	8002c7fe <spi_set_chipselect_delay_bs+0x46>
8002c7d8:	e0 89 00 05 	brgt	8002c7e2 <spi_set_chipselect_delay_bs+0x2a>
8002c7dc:	58 08       	cp.w	r8,0
8002c7de:	c0 70       	breq	8002c7ec <spi_set_chipselect_delay_bs+0x34>
8002c7e0:	c2 98       	rjmp	8002c832 <spi_set_chipselect_delay_bs+0x7a>
8002c7e2:	58 28       	cp.w	r8,2
8002c7e4:	c1 60       	breq	8002c810 <spi_set_chipselect_delay_bs+0x58>
8002c7e6:	58 38       	cp.w	r8,3
8002c7e8:	c1 d0       	breq	8002c822 <spi_set_chipselect_delay_bs+0x6a>
8002c7ea:	c2 48       	rjmp	8002c832 <spi_set_chipselect_delay_bs+0x7a>
8002c7ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7f0:	72 c8       	ld.w	r8,r9[0x30]
8002c7f2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c7f6:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c7fa:	93 c8       	st.w	r9[0x30],r8
8002c7fc:	c1 b8       	rjmp	8002c832 <spi_set_chipselect_delay_bs+0x7a>
8002c7fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c802:	72 d8       	ld.w	r8,r9[0x34]
8002c804:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c808:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c80c:	93 d8       	st.w	r9[0x34],r8
8002c80e:	c1 28       	rjmp	8002c832 <spi_set_chipselect_delay_bs+0x7a>
8002c810:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c814:	72 e8       	ld.w	r8,r9[0x38]
8002c816:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c81a:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c81e:	93 e8       	st.w	r9[0x38],r8
8002c820:	c0 98       	rjmp	8002c832 <spi_set_chipselect_delay_bs+0x7a>
8002c822:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c826:	72 f8       	ld.w	r8,r9[0x3c]
8002c828:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c82c:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c830:	93 f8       	st.w	r9[0x3c],r8
8002c832:	2f dd       	sub	sp,-12
8002c834:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c838 <spi_set_bits_per_transfer>:
8002c838:	eb cd 40 80 	pushm	r7,lr
8002c83c:	1a 97       	mov	r7,sp
8002c83e:	20 3d       	sub	sp,12
8002c840:	ef 4c ff fc 	st.w	r7[-4],r12
8002c844:	16 99       	mov	r9,r11
8002c846:	14 98       	mov	r8,r10
8002c848:	ef 69 ff f8 	st.b	r7[-8],r9
8002c84c:	ef 68 ff f4 	st.b	r7[-12],r8
8002c850:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c854:	58 18       	cp.w	r8,1
8002c856:	c1 a0       	breq	8002c88a <spi_set_bits_per_transfer+0x52>
8002c858:	e0 89 00 05 	brgt	8002c862 <spi_set_bits_per_transfer+0x2a>
8002c85c:	58 08       	cp.w	r8,0
8002c85e:	c0 70       	breq	8002c86c <spi_set_bits_per_transfer+0x34>
8002c860:	c4 18       	rjmp	8002c8e2 <spi_set_bits_per_transfer+0xaa>
8002c862:	58 28       	cp.w	r8,2
8002c864:	c2 20       	breq	8002c8a8 <spi_set_bits_per_transfer+0x70>
8002c866:	58 38       	cp.w	r8,3
8002c868:	c2 f0       	breq	8002c8c6 <spi_set_bits_per_transfer+0x8e>
8002c86a:	c3 c8       	rjmp	8002c8e2 <spi_set_bits_per_transfer+0xaa>
8002c86c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c870:	20 88       	sub	r8,8
8002c872:	5c 58       	castu.b	r8
8002c874:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c878:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c87c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c880:	72 c8       	ld.w	r8,r9[0x30]
8002c882:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c886:	93 c8       	st.w	r9[0x30],r8
8002c888:	c2 d8       	rjmp	8002c8e2 <spi_set_bits_per_transfer+0xaa>
8002c88a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c88e:	20 88       	sub	r8,8
8002c890:	5c 58       	castu.b	r8
8002c892:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c896:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c89a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c89e:	72 d8       	ld.w	r8,r9[0x34]
8002c8a0:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c8a4:	93 d8       	st.w	r9[0x34],r8
8002c8a6:	c1 e8       	rjmp	8002c8e2 <spi_set_bits_per_transfer+0xaa>
8002c8a8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c8ac:	20 88       	sub	r8,8
8002c8ae:	5c 58       	castu.b	r8
8002c8b0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c8b4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c8b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c8bc:	72 e8       	ld.w	r8,r9[0x38]
8002c8be:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c8c2:	93 e8       	st.w	r9[0x38],r8
8002c8c4:	c0 f8       	rjmp	8002c8e2 <spi_set_bits_per_transfer+0xaa>
8002c8c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c8ca:	20 88       	sub	r8,8
8002c8cc:	5c 58       	castu.b	r8
8002c8ce:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c8d2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c8d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c8da:	72 f8       	ld.w	r8,r9[0x3c]
8002c8dc:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c8e0:	93 f8       	st.w	r9[0x3c],r8
8002c8e2:	2f dd       	sub	sp,-12
8002c8e4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c8e8 <spi_set_baudrate_register>:
8002c8e8:	eb cd 40 80 	pushm	r7,lr
8002c8ec:	1a 97       	mov	r7,sp
8002c8ee:	20 3d       	sub	sp,12
8002c8f0:	ef 4c ff fc 	st.w	r7[-4],r12
8002c8f4:	16 99       	mov	r9,r11
8002c8f6:	14 98       	mov	r8,r10
8002c8f8:	ef 69 ff f8 	st.b	r7[-8],r9
8002c8fc:	ef 68 ff f4 	st.b	r7[-12],r8
8002c900:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c904:	58 18       	cp.w	r8,1
8002c906:	c1 40       	breq	8002c92e <spi_set_baudrate_register+0x46>
8002c908:	e0 89 00 05 	brgt	8002c912 <spi_set_baudrate_register+0x2a>
8002c90c:	58 08       	cp.w	r8,0
8002c90e:	c0 70       	breq	8002c91c <spi_set_baudrate_register+0x34>
8002c910:	c2 98       	rjmp	8002c962 <spi_set_baudrate_register+0x7a>
8002c912:	58 28       	cp.w	r8,2
8002c914:	c1 60       	breq	8002c940 <spi_set_baudrate_register+0x58>
8002c916:	58 38       	cp.w	r8,3
8002c918:	c1 d0       	breq	8002c952 <spi_set_baudrate_register+0x6a>
8002c91a:	c2 48       	rjmp	8002c962 <spi_set_baudrate_register+0x7a>
8002c91c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c920:	72 c8       	ld.w	r8,r9[0x30]
8002c922:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c926:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c92a:	93 c8       	st.w	r9[0x30],r8
8002c92c:	c1 b8       	rjmp	8002c962 <spi_set_baudrate_register+0x7a>
8002c92e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c932:	72 d8       	ld.w	r8,r9[0x34]
8002c934:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c938:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c93c:	93 d8       	st.w	r9[0x34],r8
8002c93e:	c1 28       	rjmp	8002c962 <spi_set_baudrate_register+0x7a>
8002c940:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c944:	72 e8       	ld.w	r8,r9[0x38]
8002c946:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c94a:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c94e:	93 e8       	st.w	r9[0x38],r8
8002c950:	c0 98       	rjmp	8002c962 <spi_set_baudrate_register+0x7a>
8002c952:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c956:	72 f8       	ld.w	r8,r9[0x3c]
8002c958:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c95c:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c960:	93 f8       	st.w	r9[0x3c],r8
8002c962:	2f dd       	sub	sp,-12
8002c964:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c968 <spi_enable_active_mode>:
8002c968:	eb cd 40 80 	pushm	r7,lr
8002c96c:	1a 97       	mov	r7,sp
8002c96e:	20 2d       	sub	sp,8
8002c970:	ef 4c ff fc 	st.w	r7[-4],r12
8002c974:	16 98       	mov	r8,r11
8002c976:	ef 68 ff f8 	st.b	r7[-8],r8
8002c97a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c97e:	58 18       	cp.w	r8,1
8002c980:	c1 30       	breq	8002c9a6 <spi_enable_active_mode+0x3e>
8002c982:	e0 89 00 05 	brgt	8002c98c <spi_enable_active_mode+0x24>
8002c986:	58 08       	cp.w	r8,0
8002c988:	c0 70       	breq	8002c996 <spi_enable_active_mode+0x2e>
8002c98a:	c2 58       	rjmp	8002c9d4 <spi_enable_active_mode+0x6c>
8002c98c:	58 28       	cp.w	r8,2
8002c98e:	c1 40       	breq	8002c9b6 <spi_enable_active_mode+0x4e>
8002c990:	58 38       	cp.w	r8,3
8002c992:	c1 a0       	breq	8002c9c6 <spi_enable_active_mode+0x5e>
8002c994:	c2 08       	rjmp	8002c9d4 <spi_enable_active_mode+0x6c>
8002c996:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c99a:	72 c8       	ld.w	r8,r9[0x30]
8002c99c:	30 1a       	mov	r10,1
8002c99e:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9a2:	93 c8       	st.w	r9[0x30],r8
8002c9a4:	c1 88       	rjmp	8002c9d4 <spi_enable_active_mode+0x6c>
8002c9a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c9aa:	72 d8       	ld.w	r8,r9[0x34]
8002c9ac:	30 1a       	mov	r10,1
8002c9ae:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9b2:	93 d8       	st.w	r9[0x34],r8
8002c9b4:	c1 08       	rjmp	8002c9d4 <spi_enable_active_mode+0x6c>
8002c9b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c9ba:	72 e8       	ld.w	r8,r9[0x38]
8002c9bc:	30 1a       	mov	r10,1
8002c9be:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9c2:	93 e8       	st.w	r9[0x38],r8
8002c9c4:	c0 88       	rjmp	8002c9d4 <spi_enable_active_mode+0x6c>
8002c9c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c9ca:	72 f8       	ld.w	r8,r9[0x3c]
8002c9cc:	30 1a       	mov	r10,1
8002c9ce:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9d2:	93 f8       	st.w	r9[0x3c],r8
8002c9d4:	2f ed       	sub	sp,-8
8002c9d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c9da <spi_set_mode>:
8002c9da:	eb cd 40 80 	pushm	r7,lr
8002c9de:	1a 97       	mov	r7,sp
8002c9e0:	20 3d       	sub	sp,12
8002c9e2:	ef 4c ff fc 	st.w	r7[-4],r12
8002c9e6:	16 99       	mov	r9,r11
8002c9e8:	14 98       	mov	r8,r10
8002c9ea:	ef 69 ff f8 	st.b	r7[-8],r9
8002c9ee:	ef 68 ff f4 	st.b	r7[-12],r8
8002c9f2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c9f6:	58 18       	cp.w	r8,1
8002c9f8:	c2 70       	breq	8002ca46 <spi_set_mode+0x6c>
8002c9fa:	e0 89 00 05 	brgt	8002ca04 <spi_set_mode+0x2a>
8002c9fe:	58 08       	cp.w	r8,0
8002ca00:	c0 70       	breq	8002ca0e <spi_set_mode+0x34>
8002ca02:	c7 58       	rjmp	8002caec <spi_set_mode+0x112>
8002ca04:	58 28       	cp.w	r8,2
8002ca06:	c3 c0       	breq	8002ca7e <spi_set_mode+0xa4>
8002ca08:	58 38       	cp.w	r8,3
8002ca0a:	c5 60       	breq	8002cab6 <spi_set_mode+0xdc>
8002ca0c:	c7 08       	rjmp	8002caec <spi_set_mode+0x112>
8002ca0e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca12:	a1 98       	lsr	r8,0x1
8002ca14:	5c 58       	castu.b	r8
8002ca16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca1a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca22:	72 c8       	ld.w	r8,r9[0x30]
8002ca24:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca28:	93 c8       	st.w	r9[0x30],r8
8002ca2a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca2e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca32:	5f 08       	sreq	r8
8002ca34:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca38:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca3c:	72 c8       	ld.w	r8,r9[0x30]
8002ca3e:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ca42:	93 c8       	st.w	r9[0x30],r8
8002ca44:	c5 48       	rjmp	8002caec <spi_set_mode+0x112>
8002ca46:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca4a:	a1 98       	lsr	r8,0x1
8002ca4c:	5c 58       	castu.b	r8
8002ca4e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca52:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca56:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca5a:	72 d8       	ld.w	r8,r9[0x34]
8002ca5c:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca60:	93 d8       	st.w	r9[0x34],r8
8002ca62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca66:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca6a:	5f 08       	sreq	r8
8002ca6c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca70:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca74:	72 d8       	ld.w	r8,r9[0x34]
8002ca76:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ca7a:	93 d8       	st.w	r9[0x34],r8
8002ca7c:	c3 88       	rjmp	8002caec <spi_set_mode+0x112>
8002ca7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca82:	a1 98       	lsr	r8,0x1
8002ca84:	5c 58       	castu.b	r8
8002ca86:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca8a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca92:	72 e8       	ld.w	r8,r9[0x38]
8002ca94:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca98:	93 e8       	st.w	r9[0x38],r8
8002ca9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca9e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002caa2:	5f 08       	sreq	r8
8002caa4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002caa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002caac:	72 e8       	ld.w	r8,r9[0x38]
8002caae:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cab2:	93 e8       	st.w	r9[0x38],r8
8002cab4:	c1 c8       	rjmp	8002caec <spi_set_mode+0x112>
8002cab6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002caba:	a1 98       	lsr	r8,0x1
8002cabc:	5c 58       	castu.b	r8
8002cabe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cac2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cac6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002caca:	72 f8       	ld.w	r8,r9[0x3c]
8002cacc:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cad0:	93 f8       	st.w	r9[0x3c],r8
8002cad2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002cad6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cada:	5f 08       	sreq	r8
8002cadc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cae0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cae4:	72 f8       	ld.w	r8,r9[0x3c]
8002cae6:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002caea:	93 f8       	st.w	r9[0x3c],r8
8002caec:	2f dd       	sub	sp,-12
8002caee:	e3 cd 80 80 	ldm	sp++,r7,pc

8002caf2 <spi_put>:
8002caf2:	eb cd 40 80 	pushm	r7,lr
8002caf6:	1a 97       	mov	r7,sp
8002caf8:	20 2d       	sub	sp,8
8002cafa:	ef 4c ff fc 	st.w	r7[-4],r12
8002cafe:	16 98       	mov	r8,r11
8002cb00:	ef 58 ff f8 	st.h	r7[-8],r8
8002cb04:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002cb08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb0c:	91 39       	st.w	r8[0xc],r9
8002cb0e:	2f ed       	sub	sp,-8
8002cb10:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb14 <spi_get>:
8002cb14:	eb cd 40 80 	pushm	r7,lr
8002cb18:	1a 97       	mov	r7,sp
8002cb1a:	20 1d       	sub	sp,4
8002cb1c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb24:	70 28       	ld.w	r8,r8[0x8]
8002cb26:	5c 88       	casts.h	r8
8002cb28:	10 9c       	mov	r12,r8
8002cb2a:	2f fd       	sub	sp,-4
8002cb2c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb30 <spi_is_tx_ready>:
8002cb30:	eb cd 40 80 	pushm	r7,lr
8002cb34:	1a 97       	mov	r7,sp
8002cb36:	20 1d       	sub	sp,4
8002cb38:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb40:	70 48       	ld.w	r8,r8[0x10]
8002cb42:	e2 18 00 02 	andl	r8,0x2,COH
8002cb46:	5f 18       	srne	r8
8002cb48:	5c 58       	castu.b	r8
8002cb4a:	10 9c       	mov	r12,r8
8002cb4c:	2f fd       	sub	sp,-4
8002cb4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb52 <spi_is_rx_ready>:
8002cb52:	eb cd 40 80 	pushm	r7,lr
8002cb56:	1a 97       	mov	r7,sp
8002cb58:	20 1d       	sub	sp,4
8002cb5a:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb62:	70 48       	ld.w	r8,r8[0x10]
8002cb64:	e2 18 02 01 	andl	r8,0x201,COH
8002cb68:	e0 48 02 01 	cp.w	r8,513
8002cb6c:	5f 08       	sreq	r8
8002cb6e:	5c 58       	castu.b	r8
8002cb70:	10 9c       	mov	r12,r8
8002cb72:	2f fd       	sub	sp,-4
8002cb74:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb78 <spi_write_single>:
8002cb78:	eb cd 40 c0 	pushm	r6-r7,lr
8002cb7c:	1a 97       	mov	r7,sp
8002cb7e:	20 2d       	sub	sp,8
8002cb80:	48 86       	lddpc	r6,8002cba0 <spi_write_single+0x28>
8002cb82:	1e 26       	rsub	r6,pc
8002cb84:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb88:	16 98       	mov	r8,r11
8002cb8a:	ef 68 ff f8 	st.b	r7[-8],r8
8002cb8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cb92:	10 9b       	mov	r11,r8
8002cb94:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cb98:	ca df       	rcall	8002caf2 <spi_put>
8002cb9a:	2f ed       	sub	sp,-8
8002cb9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cba0:	80 02       	ld.sh	r2,r0[0x0]
8002cba2:	ca 06       	brmi	8002cae2 <spi_set_mode+0x108>

8002cba4 <spi_read_single>:
8002cba4:	eb cd 40 c0 	pushm	r6-r7,lr
8002cba8:	1a 97       	mov	r7,sp
8002cbaa:	20 2d       	sub	sp,8
8002cbac:	48 96       	lddpc	r6,8002cbd0 <spi_read_single+0x2c>
8002cbae:	1e 26       	rsub	r6,pc
8002cbb0:	ef 4c ff fc 	st.w	r7[-4],r12
8002cbb4:	ef 4b ff f8 	st.w	r7[-8],r11
8002cbb8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cbbc:	ca cf       	rcall	8002cb14 <spi_get>
8002cbbe:	18 98       	mov	r8,r12
8002cbc0:	5c 88       	casts.h	r8
8002cbc2:	5c 58       	castu.b	r8
8002cbc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cbc8:	b2 88       	st.b	r9[0x0],r8
8002cbca:	2f ed       	sub	sp,-8
8002cbcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cbd0:	80 02       	ld.sh	r2,r0[0x0]
8002cbd2:	ca 32       	brcc	8002cb18 <spi_get+0x4>

8002cbd4 <spi_master_setup_device>:
8002cbd4:	eb cd 40 c0 	pushm	r6-r7,lr
8002cbd8:	1a 97       	mov	r7,sp
8002cbda:	20 5d       	sub	sp,20
8002cbdc:	4a 76       	lddpc	r6,8002cc78 <spi_master_setup_device+0xa4>
8002cbde:	1e 26       	rsub	r6,pc
8002cbe0:	ef 4c ff fc 	st.w	r7[-4],r12
8002cbe4:	ef 4b ff f8 	st.w	r7[-8],r11
8002cbe8:	ef 49 ff f0 	st.w	r7[-16],r9
8002cbec:	14 99       	mov	r9,r10
8002cbee:	ef 69 ff f4 	st.b	r7[-12],r9
8002cbf2:	ef 68 ff ec 	st.b	r7[-20],r8
8002cbf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbfa:	11 88       	ld.ub	r8,r8[0x0]
8002cbfc:	30 0a       	mov	r10,0
8002cbfe:	10 9b       	mov	r11,r8
8002cc00:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc04:	fe b0 fd 9a 	rcall	8002c738 <spi_set_chipselect_delay_bct>
8002cc08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc0c:	11 88       	ld.ub	r8,r8[0x0]
8002cc0e:	30 0a       	mov	r10,0
8002cc10:	10 9b       	mov	r11,r8
8002cc12:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc16:	fe b0 fd d1 	rcall	8002c7b8 <spi_set_chipselect_delay_bs>
8002cc1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc1e:	11 88       	ld.ub	r8,r8[0x0]
8002cc20:	30 8a       	mov	r10,8
8002cc22:	10 9b       	mov	r11,r8
8002cc24:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc28:	c0 8e       	rcall	8002c838 <spi_set_bits_per_transfer>
8002cc2a:	fe b0 fd 7b 	rcall	8002c720 <sysclk_get_pba_hz>
8002cc2e:	18 98       	mov	r8,r12
8002cc30:	10 9b       	mov	r11,r8
8002cc32:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cc36:	f0 16 01 24 	mcall	r6[1168]
8002cc3a:	18 98       	mov	r8,r12
8002cc3c:	5c 58       	castu.b	r8
8002cc3e:	10 99       	mov	r9,r8
8002cc40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc44:	11 88       	ld.ub	r8,r8[0x0]
8002cc46:	12 9a       	mov	r10,r9
8002cc48:	10 9b       	mov	r11,r8
8002cc4a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc4e:	c4 de       	rcall	8002c8e8 <spi_set_baudrate_register>
8002cc50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc54:	11 88       	ld.ub	r8,r8[0x0]
8002cc56:	10 9b       	mov	r11,r8
8002cc58:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc5c:	c8 6e       	rcall	8002c968 <spi_enable_active_mode>
8002cc5e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002cc62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc66:	11 88       	ld.ub	r8,r8[0x0]
8002cc68:	12 9a       	mov	r10,r9
8002cc6a:	10 9b       	mov	r11,r8
8002cc6c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc70:	cb 5e       	rcall	8002c9da <spi_set_mode>
8002cc72:	2f bd       	sub	sp,-20
8002cc74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cc78:	80 02       	ld.sh	r2,r0[0x0]
8002cc7a:	ca 62       	brcc	8002cbc6 <spi_read_single+0x22>

8002cc7c <spi_read_packet>:
8002cc7c:	eb cd 40 c0 	pushm	r6-r7,lr
8002cc80:	1a 97       	mov	r7,sp
8002cc82:	20 6d       	sub	sp,24
8002cc84:	4b 66       	lddpc	r6,8002cd5c <spi_read_packet+0xe0>
8002cc86:	1e 26       	rsub	r6,pc
8002cc88:	ef 4c ff f0 	st.w	r7[-16],r12
8002cc8c:	ef 4b ff ec 	st.w	r7[-20],r11
8002cc90:	ef 4a ff e8 	st.w	r7[-24],r10
8002cc94:	e0 68 3a 98 	mov	r8,15000
8002cc98:	ef 48 ff f8 	st.w	r7[-8],r8
8002cc9c:	30 08       	mov	r8,0
8002cc9e:	ef 48 ff fc 	st.w	r7[-4],r8
8002cca2:	c5 48       	rjmp	8002cd4a <spi_read_packet+0xce>
8002cca4:	e0 68 3a 98 	mov	r8,15000
8002cca8:	ef 48 ff f8 	st.w	r7[-8],r8
8002ccac:	c0 f8       	rjmp	8002ccca <spi_read_packet+0x4e>
8002ccae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ccb2:	58 08       	cp.w	r8,0
8002ccb4:	5f 08       	sreq	r8
8002ccb6:	5c 58       	castu.b	r8
8002ccb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ccbc:	20 19       	sub	r9,1
8002ccbe:	ef 49 ff f8 	st.w	r7[-8],r9
8002ccc2:	58 08       	cp.w	r8,0
8002ccc4:	c0 30       	breq	8002ccca <spi_read_packet+0x4e>
8002ccc6:	3f d8       	mov	r8,-3
8002ccc8:	c4 68       	rjmp	8002cd54 <spi_read_packet+0xd8>
8002ccca:	ee fc ff f0 	ld.w	r12,r7[-16]
8002ccce:	c3 1f       	rcall	8002cb30 <spi_is_tx_ready>
8002ccd0:	18 98       	mov	r8,r12
8002ccd2:	ec 18 00 01 	eorl	r8,0x1
8002ccd6:	5c 58       	castu.b	r8
8002ccd8:	ce b1       	brne	8002ccae <spi_read_packet+0x32>
8002ccda:	e0 6b 00 ff 	mov	r11,255
8002ccde:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cce2:	c4 bf       	rcall	8002cb78 <spi_write_single>
8002cce4:	e0 68 3a 98 	mov	r8,15000
8002cce8:	ef 48 ff f8 	st.w	r7[-8],r8
8002ccec:	c0 f8       	rjmp	8002cd0a <spi_read_packet+0x8e>
8002ccee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ccf2:	58 08       	cp.w	r8,0
8002ccf4:	5f 08       	sreq	r8
8002ccf6:	5c 58       	castu.b	r8
8002ccf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ccfc:	20 19       	sub	r9,1
8002ccfe:	ef 49 ff f8 	st.w	r7[-8],r9
8002cd02:	58 08       	cp.w	r8,0
8002cd04:	c0 30       	breq	8002cd0a <spi_read_packet+0x8e>
8002cd06:	3f d8       	mov	r8,-3
8002cd08:	c2 68       	rjmp	8002cd54 <spi_read_packet+0xd8>
8002cd0a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cd0e:	c2 2f       	rcall	8002cb52 <spi_is_rx_ready>
8002cd10:	18 98       	mov	r8,r12
8002cd12:	ec 18 00 01 	eorl	r8,0x1
8002cd16:	5c 58       	castu.b	r8
8002cd18:	ce b1       	brne	8002ccee <spi_read_packet+0x72>
8002cd1a:	ee c8 00 09 	sub	r8,r7,9
8002cd1e:	10 9b       	mov	r11,r8
8002cd20:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cd24:	c4 0f       	rcall	8002cba4 <spi_read_single>
8002cd26:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002cd2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cd2e:	10 09       	add	r9,r8
8002cd30:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002cd34:	b2 88       	st.b	r9[0x0],r8
8002cd36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cd3a:	2f f8       	sub	r8,-1
8002cd3c:	ef 48 ff fc 	st.w	r7[-4],r8
8002cd40:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cd44:	20 18       	sub	r8,1
8002cd46:	ef 48 ff e8 	st.w	r7[-24],r8
8002cd4a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cd4e:	58 08       	cp.w	r8,0
8002cd50:	ca a1       	brne	8002cca4 <spi_read_packet+0x28>
8002cd52:	30 08       	mov	r8,0
8002cd54:	10 9c       	mov	r12,r8
8002cd56:	2f ad       	sub	sp,-24
8002cd58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cd5c:	80 02       	ld.sh	r2,r0[0x0]
8002cd5e:	cb 0a       	rjmp	8002cabe <spi_set_mode+0xe4>

8002cd60 <spi_write_packet>:
8002cd60:	eb cd 40 c0 	pushm	r6-r7,lr
8002cd64:	1a 97       	mov	r7,sp
8002cd66:	20 6d       	sub	sp,24
8002cd68:	4a 76       	lddpc	r6,8002ce04 <spi_write_packet+0xa4>
8002cd6a:	1e 26       	rsub	r6,pc
8002cd6c:	ef 4c ff f0 	st.w	r7[-16],r12
8002cd70:	ef 4b ff ec 	st.w	r7[-20],r11
8002cd74:	ef 4a ff e8 	st.w	r7[-24],r10
8002cd78:	e0 68 3a 98 	mov	r8,15000
8002cd7c:	ef 48 ff f4 	st.w	r7[-12],r8
8002cd80:	30 08       	mov	r8,0
8002cd82:	ef 48 ff f8 	st.w	r7[-8],r8
8002cd86:	c3 58       	rjmp	8002cdf0 <spi_write_packet+0x90>
8002cd88:	e0 68 3a 98 	mov	r8,15000
8002cd8c:	ef 48 ff f4 	st.w	r7[-12],r8
8002cd90:	c0 f8       	rjmp	8002cdae <spi_write_packet+0x4e>
8002cd92:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cd96:	58 08       	cp.w	r8,0
8002cd98:	5f 08       	sreq	r8
8002cd9a:	5c 58       	castu.b	r8
8002cd9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002cda0:	20 19       	sub	r9,1
8002cda2:	ef 49 ff f4 	st.w	r7[-12],r9
8002cda6:	58 08       	cp.w	r8,0
8002cda8:	c0 30       	breq	8002cdae <spi_write_packet+0x4e>
8002cdaa:	3f d8       	mov	r8,-3
8002cdac:	c2 78       	rjmp	8002cdfa <spi_write_packet+0x9a>
8002cdae:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cdb2:	cb fe       	rcall	8002cb30 <spi_is_tx_ready>
8002cdb4:	18 98       	mov	r8,r12
8002cdb6:	ec 18 00 01 	eorl	r8,0x1
8002cdba:	5c 58       	castu.b	r8
8002cdbc:	ce b1       	brne	8002cd92 <spi_write_packet+0x32>
8002cdbe:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002cdc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cdc6:	f2 08 00 08 	add	r8,r9,r8
8002cdca:	11 88       	ld.ub	r8,r8[0x0]
8002cdcc:	ef 68 ff ff 	st.b	r7[-1],r8
8002cdd0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002cdd4:	10 9b       	mov	r11,r8
8002cdd6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cdda:	cc fe       	rcall	8002cb78 <spi_write_single>
8002cddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cde0:	2f f8       	sub	r8,-1
8002cde2:	ef 48 ff f8 	st.w	r7[-8],r8
8002cde6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cdea:	20 18       	sub	r8,1
8002cdec:	ef 48 ff e8 	st.w	r7[-24],r8
8002cdf0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cdf4:	58 08       	cp.w	r8,0
8002cdf6:	cc 91       	brne	8002cd88 <spi_write_packet+0x28>
8002cdf8:	30 08       	mov	r8,0
8002cdfa:	10 9c       	mov	r12,r8
8002cdfc:	2f ad       	sub	sp,-24
8002cdfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce02:	00 00       	add	r0,r0
8002ce04:	80 02       	ld.sh	r2,r0[0x0]
8002ce06:	cb ee       	rcall	8002cb82 <spi_write_single+0xa>

8002ce08 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002ce08:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce0c:	1a 97       	mov	r7,sp
8002ce0e:	20 3d       	sub	sp,12
8002ce10:	49 06       	lddpc	r6,8002ce50 <mav_array_memcpy+0x48>
8002ce12:	1e 26       	rsub	r6,pc
8002ce14:	ef 4c ff fc 	st.w	r7[-4],r12
8002ce18:	ef 4b ff f8 	st.w	r7[-8],r11
8002ce1c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002ce20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ce24:	58 08       	cp.w	r8,0
8002ce26:	c0 91       	brne	8002ce38 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002ce28:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ce2c:	30 0b       	mov	r11,0
8002ce2e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce32:	f0 16 00 31 	mcall	r6[196]
8002ce36:	c0 98       	rjmp	8002ce48 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002ce38:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ce3c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ce40:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce44:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002ce48:	2f dd       	sub	sp,-12
8002ce4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce4e:	00 00       	add	r0,r0
8002ce50:	80 02       	ld.sh	r2,r0[0x0]
8002ce52:	cc 96       	brmi	8002cde4 <spi_write_packet+0x84>

8002ce54 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002ce54:	eb cd 40 80 	pushm	r7,lr
8002ce58:	1a 97       	mov	r7,sp
8002ce5a:	20 1d       	sub	sp,4
8002ce5c:	18 98       	mov	r8,r12
8002ce5e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002ce62:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002ce66:	58 38       	cp.w	r8,3
8002ce68:	c1 20       	breq	8002ce8c <osc_get_rate+0x38>
8002ce6a:	e0 89 00 07 	brgt	8002ce78 <osc_get_rate+0x24>
8002ce6e:	58 08       	cp.w	r8,0
8002ce70:	c0 90       	breq	8002ce82 <osc_get_rate+0x2e>
8002ce72:	58 28       	cp.w	r8,2
8002ce74:	c0 f0       	breq	8002ce92 <osc_get_rate+0x3e>
8002ce76:	c1 b8       	rjmp	8002ceac <osc_get_rate+0x58>
8002ce78:	58 48       	cp.w	r8,4
8002ce7a:	c1 10       	breq	8002ce9c <osc_get_rate+0x48>
8002ce7c:	58 58       	cp.w	r8,5
8002ce7e:	c1 40       	breq	8002cea6 <osc_get_rate+0x52>
8002ce80:	c1 68       	rjmp	8002ceac <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002ce82:	e0 68 24 00 	mov	r8,9216
8002ce86:	ea 18 00 f4 	orh	r8,0xf4
8002ce8a:	c1 28       	rjmp	8002ceae <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002ce8c:	e0 68 80 00 	mov	r8,32768
8002ce90:	c0 f8       	rjmp	8002ceae <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002ce92:	e0 68 12 00 	mov	r8,4608
8002ce96:	ea 18 00 7a 	orh	r8,0x7a
8002ce9a:	c0 a8       	rjmp	8002ceae <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002ce9c:	e0 68 0e 00 	mov	r8,3584
8002cea0:	ea 18 07 27 	orh	r8,0x727
8002cea4:	c0 58       	rjmp	8002ceae <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002cea6:	e0 78 c1 38 	mov	r8,115000
8002ceaa:	c0 28       	rjmp	8002ceae <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002ceac:	30 08       	mov	r8,0
	}
}
8002ceae:	10 9c       	mov	r12,r8
8002ceb0:	2f fd       	sub	sp,-4
8002ceb2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ceb6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002ceb6:	eb cd 40 c0 	pushm	r6-r7,lr
8002ceba:	1a 97       	mov	r7,sp
8002cebc:	48 56       	lddpc	r6,8002ced0 <sysclk_get_main_hz+0x1a>
8002cebe:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cec0:	30 0c       	mov	r12,0
8002cec2:	cc 9f       	rcall	8002ce54 <osc_get_rate>
8002cec4:	18 98       	mov	r8,r12
8002cec6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002cec8:	10 9c       	mov	r12,r8
8002ceca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cece:	00 00       	add	r0,r0
8002ced0:	80 02       	ld.sh	r2,r0[0x0]
8002ced2:	cd 42       	brcc	8002ce7a <osc_get_rate+0x26>

8002ced4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002ced4:	eb cd 40 c0 	pushm	r6-r7,lr
8002ced8:	1a 97       	mov	r7,sp
8002ceda:	48 46       	lddpc	r6,8002cee8 <sysclk_get_cpu_hz+0x14>
8002cedc:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002cede:	ce cf       	rcall	8002ceb6 <sysclk_get_main_hz>
8002cee0:	18 98       	mov	r8,r12
}
8002cee2:	10 9c       	mov	r12,r8
8002cee4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cee8:	80 02       	ld.sh	r2,r0[0x0]
8002ceea:	cd 60       	breq	8002ce96 <osc_get_rate+0x42>

8002ceec <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002ceec:	eb cd 40 c0 	pushm	r6-r7,lr
8002cef0:	1a 97       	mov	r7,sp
8002cef2:	20 1d       	sub	sp,4
8002cef4:	49 06       	lddpc	r6,8002cf34 <sleepmgr_init+0x48>
8002cef6:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002cef8:	30 08       	mov	r8,0
8002cefa:	ef 68 ff ff 	st.b	r7[-1],r8
8002cefe:	c0 d8       	rjmp	8002cf18 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002cf00:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002cf04:	ec fa 04 00 	ld.w	r10,r6[1024]
8002cf08:	30 08       	mov	r8,0
8002cf0a:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002cf0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002cf12:	2f f8       	sub	r8,-1
8002cf14:	ef 68 ff ff 	st.b	r7[-1],r8
8002cf18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002cf1c:	30 58       	mov	r8,5
8002cf1e:	f0 09 18 00 	cp.b	r9,r8
8002cf22:	fe 98 ff ef 	brls	8002cf00 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002cf26:	ec f9 04 00 	ld.w	r9,r6[1024]
8002cf2a:	30 18       	mov	r8,1
8002cf2c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002cf2e:	2f fd       	sub	sp,-4
8002cf30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf34:	80 02       	ld.sh	r2,r0[0x0]
8002cf36:	cd 7a       	rjmp	8002cce4 <spi_read_packet+0x68>
8002cf38:	42 6f       	lddsp	pc,sp[0x98]
8002cf3a:	61 72       	ld.w	r2,r0[0x5c]
8002cf3c:	64 20       	ld.w	r0,r2[0x8]
8002cf3e:	69 6e       	ld.w	lr,r4[0x58]
8002cf40:	69 74       	ld.w	r4,r4[0x5c]
8002cf42:	69 61       	ld.w	r1,r4[0x58]
8002cf44:	6c 69       	ld.w	r9,r6[0x18]
8002cf46:	73 65       	ld.w	r5,r9[0x58]
8002cf48:	64 2e       	ld.w	lr,r2[0x8]
8002cf4a:	0a 00       	add	r0,r5

8002cf4c <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002cf4c:	eb cd 40 e0 	pushm	r5-r7,lr
8002cf50:	1a 97       	mov	r7,sp
8002cf52:	20 3d       	sub	sp,12
8002cf54:	4f 66       	lddpc	r6,8002d12c <initialise_board+0x1e0>
8002cf56:	1e 26       	rsub	r6,pc
8002cf58:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002cf5c:	30 88       	mov	r8,8
8002cf5e:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002cf62:	f0 16 01 1e 	mcall	r6[1144]
	cpu_irq_enable();
8002cf66:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002cf68:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002cf6a:	cc 1f       	rcall	8002ceec <sleepmgr_init>
	sysclk_init();
8002cf6c:	f0 16 01 4d 	mcall	r6[1332]
	board_init();
8002cf70:	f0 16 01 a7 	mcall	r6[1692]
	delay_init(sysclk_get_cpu_hz());
8002cf74:	cb 0f       	rcall	8002ced4 <sysclk_get_cpu_hz>
8002cf76:	18 98       	mov	r8,r12
8002cf78:	10 9c       	mov	r12,r8
8002cf7a:	f0 16 01 b8 	mcall	r6[1760]
	init_time_keeper();
8002cf7e:	f0 16 01 fe 	mcall	r6[2040]
		
	INTC_init_interrupts();
8002cf82:	f0 16 01 1e 	mcall	r6[1144]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002cf86:	30 0c       	mov	r12,0
8002cf88:	f0 16 00 e5 	mcall	r6[916]
8002cf8c:	18 98       	mov	r8,r12
8002cf8e:	58 08       	cp.w	r8,0
8002cf90:	c0 20       	breq	8002cf94 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002cf92:	c0 08       	rjmp	8002cf92 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002cf94:	30 1c       	mov	r12,1
8002cf96:	f0 16 00 e5 	mcall	r6[916]
8002cf9a:	18 98       	mov	r8,r12
8002cf9c:	58 08       	cp.w	r8,0
8002cf9e:	c0 20       	breq	8002cfa2 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002cfa0:	c0 08       	rjmp	8002cfa0 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002cfa2:	30 2c       	mov	r12,2
8002cfa4:	f0 16 01 6d 	mcall	r6[1460]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002cfa8:	f0 16 02 25 	mcall	r6[2196]
	set_servos(&servo_failsafe);
8002cfac:	ec fc 08 a0 	ld.w	r12,r6[2208]
8002cfb0:	f0 16 00 ab 	mcall	r6[684]
	
		
	init_UART_int(0);
8002cfb4:	30 0c       	mov	r12,0
8002cfb6:	f0 16 00 a7 	mcall	r6[668]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002cfba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfbe:	f0 c5 f6 8c 	sub	r5,r8,-2420
8002cfc2:	30 0c       	mov	r12,0
8002cfc4:	f0 16 00 6b 	mcall	r6[428]
8002cfc8:	18 98       	mov	r8,r12
8002cfca:	0a 9b       	mov	r11,r5
8002cfcc:	10 9c       	mov	r12,r8
8002cfce:	f0 16 00 d7 	mcall	r6[860]
				
		
	init_UART_int(3);
8002cfd2:	30 3c       	mov	r12,3
8002cfd4:	f0 16 00 a7 	mcall	r6[668]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002cfd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfdc:	f0 c9 f5 28 	sub	r9,r8,-2776
8002cfe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfe4:	f0 c8 f6 2c 	sub	r8,r8,-2516
8002cfe8:	12 9b       	mov	r11,r9
8002cfea:	10 9c       	mov	r12,r8
8002cfec:	f0 16 01 70 	mcall	r6[1472]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002cff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cff4:	f0 c5 f5 28 	sub	r5,r8,-2776
8002cff8:	30 3c       	mov	r12,3
8002cffa:	f0 16 00 6b 	mcall	r6[428]
8002cffe:	18 98       	mov	r8,r12
8002d000:	0a 9b       	mov	r11,r5
8002d002:	10 9c       	mov	r12,r8
8002d004:	f0 16 00 c4 	mcall	r6[784]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002d008:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d00c:	f0 c5 f5 10 	sub	r5,r8,-2800
8002d010:	30 3c       	mov	r12,3
8002d012:	f0 16 00 6b 	mcall	r6[428]
8002d016:	18 98       	mov	r8,r12
8002d018:	0a 9b       	mov	r11,r5
8002d01a:	10 9c       	mov	r12,r8
8002d01c:	f0 16 00 d7 	mcall	r6[860]
		
	init_UART_int(4);
8002d020:	30 4c       	mov	r12,4
8002d022:	f0 16 00 a7 	mcall	r6[668]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d02a:	f0 c5 f6 5c 	sub	r5,r8,-2468
8002d02e:	30 4c       	mov	r12,4
8002d030:	f0 16 00 6b 	mcall	r6[428]
8002d034:	18 98       	mov	r8,r12
8002d036:	0a 9b       	mov	r11,r5
8002d038:	10 9c       	mov	r12,r8
8002d03a:	f0 16 00 d7 	mcall	r6[860]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d03e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d042:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d046:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d04a:	f0 c8 f8 94 	sub	r8,r8,-1900
8002d04e:	12 9b       	mov	r11,r9
8002d050:	10 9c       	mov	r12,r8
8002d052:	f0 16 00 f3 	mcall	r6[972]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d056:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d05a:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d05e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d062:	f0 c8 f7 91 	sub	r8,r8,-2159
8002d066:	12 9b       	mov	r11,r9
8002d068:	10 9c       	mov	r12,r8
8002d06a:	f0 16 00 f3 	mcall	r6[972]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d06e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d072:	f0 c5 f6 44 	sub	r5,r8,-2492
8002d076:	30 4c       	mov	r12,4
8002d078:	f0 16 00 6b 	mcall	r6[428]
8002d07c:	18 98       	mov	r8,r12
8002d07e:	0a 9b       	mov	r11,r5
8002d080:	10 9c       	mov	r12,r8
8002d082:	f0 16 00 c4 	mcall	r6[784]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d086:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d08a:	f0 c5 f6 74 	sub	r5,r8,-2444
8002d08e:	30 0c       	mov	r12,0
8002d090:	f0 16 00 6b 	mcall	r6[428]
8002d094:	18 98       	mov	r8,r12
8002d096:	0a 9b       	mov	r11,r5
8002d098:	10 9c       	mov	r12,r8
8002d09a:	f0 16 00 c4 	mcall	r6[784]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d09e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0a2:	f0 c9 f6 8c 	sub	r9,r8,-2420
8002d0a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0aa:	f1 49 0d fc 	st.w	r8[3580],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d0ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0b2:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d0b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0ba:	f1 49 0e 00 	st.w	r8[3584],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d0be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0c2:	f0 c9 f6 5c 	sub	r9,r8,-2468
8002d0c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0ca:	f1 49 0e 04 	st.w	r8[3588],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d0ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0d2:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d0d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0da:	f1 49 0e 08 	st.w	r8[3592],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d0de:	f0 16 01 c3 	mcall	r6[1804]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d0e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0e6:	f0 f9 0e 00 	ld.w	r9,r8[3584]
8002d0ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0ee:	f0 f8 0d fc 	ld.w	r8,r8[3580]
8002d0f2:	32 ca       	mov	r10,44
8002d0f4:	12 9b       	mov	r11,r9
8002d0f6:	10 9c       	mov	r12,r8
8002d0f8:	f0 16 01 d0 	mcall	r6[1856]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d0fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d100:	f0 f8 0e 04 	ld.w	r8,r8[3588]
8002d104:	10 9c       	mov	r12,r8
8002d106:	f0 16 01 67 	mcall	r6[1436]
		
	init_imu(&(centralData->imu1));
8002d10a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d10e:	10 9c       	mov	r12,r8
8002d110:	f0 16 01 73 	mcall	r6[1484]
	init_bmp085();
8002d114:	f0 16 01 eb 	mcall	r6[1964]

	rc_init();
8002d118:	f0 16 01 3d 	mcall	r6[1268]


	Enable_global_interrupt();
8002d11c:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d11e:	fe cc 01 e6 	sub	r12,pc,486
8002d122:	f0 16 00 01 	mcall	r6[4]
}
8002d126:	2f dd       	sub	sp,-12
8002d128:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d12c:	80 02       	ld.sh	r2,r0[0x0]
8002d12e:	cd da       	rjmp	8002cee8 <sysclk_get_cpu_hz+0x14>

8002d130 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d130:	eb cd 40 c0 	pushm	r6-r7,lr
8002d134:	1a 97       	mov	r7,sp
8002d136:	20 3d       	sub	sp,12
8002d138:	49 06       	lddpc	r6,8002d178 <mav_array_memcpy+0x48>
8002d13a:	1e 26       	rsub	r6,pc
8002d13c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d140:	ef 4b ff f8 	st.w	r7[-8],r11
8002d144:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d148:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d14c:	58 08       	cp.w	r8,0
8002d14e:	c0 91       	brne	8002d160 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d150:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d154:	30 0b       	mov	r11,0
8002d156:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d15a:	f0 16 00 31 	mcall	r6[196]
8002d15e:	c0 98       	rjmp	8002d170 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d160:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d164:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d168:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d16c:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002d170:	2f dd       	sub	sp,-12
8002d172:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d176:	00 00       	add	r0,r0
8002d178:	80 02       	ld.sh	r2,r0[0x0]
8002d17a:	cf be       	rcall	8002cf70 <initialise_board+0x24>
8002d17c:	44 65       	lddsp	r5,sp[0x118]
8002d17e:	62 75       	ld.w	r5,r1[0x1c]
8002d180:	67 20       	ld.w	r0,r3[0x48]
8002d182:	73 74       	ld.w	r4,r9[0x5c]
8002d184:	72 65       	ld.w	r5,r9[0x18]
8002d186:	61 6d       	ld.w	sp,r0[0x58]
8002d188:	20 69       	sub	r9,6
8002d18a:	6e 69       	ld.w	r9,r7[0x18]
8002d18c:	74 69       	ld.w	r9,r10[0x18]
8002d18e:	61 6c       	ld.w	r12,r0[0x58]
8002d190:	69 73       	ld.w	r3,r4[0x5c]
8002d192:	65 64       	ld.w	r4,r2[0x58]
8002d194:	0a 00       	add	r0,r5

8002d196 <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002d196:	eb cd 40 c0 	pushm	r6-r7,lr
8002d19a:	1a 97       	mov	r7,sp
8002d19c:	20 2d       	sub	sp,8
8002d19e:	4e 16       	lddpc	r6,8002d320 <initialisation+0x18a>
8002d1a0:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d1a2:	30 88       	mov	r8,8
8002d1a4:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002d1a8:	f0 16 00 33 	mcall	r6[204]
8002d1ac:	18 99       	mov	r9,r12
8002d1ae:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1b2:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002d1b4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1b8:	70 08       	ld.w	r8,r8[0x0]
8002d1ba:	10 9c       	mov	r12,r8
8002d1bc:	f0 16 02 22 	mcall	r6[2184]
	initialise_central_data();
8002d1c0:	f0 16 01 ba 	mcall	r6[1768]
	

	init_radar_modules();
8002d1c4:	f0 16 01 6e 	mcall	r6[1464]
	dbg_print("Debug stream initialised\n");
8002d1c8:	fe cc 00 4c 	sub	r12,pc,76
8002d1cc:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002d1d0:	ec fc 08 9c 	ld.w	r12,r6[2204]
8002d1d4:	f0 16 00 ab 	mcall	r6[684]

	init_onboard_parameters();
8002d1d8:	f0 16 01 e8 	mcall	r6[1952]
	init_mavlink_actions();
8002d1dc:	f0 16 01 d8 	mcall	r6[1888]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002d1e0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1e4:	70 08       	ld.w	r8,r8[0x0]
8002d1e6:	f0 ca f4 f8 	sub	r10,r8,-2824
8002d1ea:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1ee:	70 08       	ld.w	r8,r8[0x0]
8002d1f0:	f0 c9 ef 3c 	sub	r9,r8,-4292
8002d1f4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1f8:	70 08       	ld.w	r8,r8[0x0]
8002d1fa:	f0 c8 f2 c4 	sub	r8,r8,-3388
8002d1fe:	12 9b       	mov	r11,r9
8002d200:	10 9c       	mov	r12,r8
8002d202:	f0 16 01 75 	mcall	r6[1492]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002d206:	ec f8 00 00 	ld.w	r8,r6[0]
8002d20a:	70 09       	ld.w	r9,r8[0x0]
8002d20c:	30 18       	mov	r8,1
8002d20e:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002d212:	ec f8 00 00 	ld.w	r8,r6[0]
8002d216:	70 09       	ld.w	r9,r8[0x0]
8002d218:	30 28       	mov	r8,2
8002d21a:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002d21e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d222:	70 09       	ld.w	r9,r8[0x0]
8002d224:	30 08       	mov	r8,0
8002d226:	f3 68 10 bc 	st.b	r9[4284],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d22a:	e0 68 01 90 	mov	r8,400
8002d22e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d232:	c2 68       	rjmp	8002d27e <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002d234:	ec f8 00 00 	ld.w	r8,r6[0]
8002d238:	70 08       	ld.w	r8,r8[0x0]
8002d23a:	10 9c       	mov	r12,r8
8002d23c:	f0 16 00 97 	mcall	r6[604]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002d240:	ec f8 00 00 	ld.w	r8,r6[0]
8002d244:	70 08       	ld.w	r8,r8[0x0]
8002d246:	f0 c9 f4 f8 	sub	r9,r8,-2824
8002d24a:	ec f8 00 00 	ld.w	r8,r6[0]
8002d24e:	70 08       	ld.w	r8,r8[0x0]
8002d250:	f0 ca ef 3c 	sub	r10,r8,-4292
8002d254:	ec f8 00 00 	ld.w	r8,r6[0]
8002d258:	70 08       	ld.w	r8,r8[0x0]
8002d25a:	f0 cb f2 c4 	sub	r11,r8,-3388
8002d25e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d262:	70 08       	ld.w	r8,r8[0x0]
8002d264:	10 9c       	mov	r12,r8
8002d266:	f0 16 00 98 	mcall	r6[608]
		mavlink_protocol_update();	
8002d26a:	f0 16 00 e4 	mcall	r6[912]
		delay_ms(5);
8002d26e:	30 5c       	mov	r12,5
8002d270:	f0 16 01 05 	mcall	r6[1044]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d274:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d278:	20 18       	sub	r8,1
8002d27a:	ef 48 ff f8 	st.w	r7[-8],r8
8002d27e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d282:	58 08       	cp.w	r8,0
8002d284:	fe 99 ff d8 	brgt	8002d234 <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002d288:	ec f8 00 00 	ld.w	r8,r6[0]
8002d28c:	70 09       	ld.w	r9,r8[0x0]
8002d28e:	30 08       	mov	r8,0
8002d290:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002d294:	30 08       	mov	r8,0
8002d296:	ef 48 ff f8 	st.w	r7[-8],r8
8002d29a:	c2 48       	rjmp	8002d2e2 <initialisation+0x14c>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002d29c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2a0:	70 08       	ld.w	r8,r8[0x0]
8002d2a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2a6:	f2 c9 fc a6 	sub	r9,r9,-858
8002d2aa:	30 0a       	mov	r10,0
8002d2ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002d2b0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2b4:	70 08       	ld.w	r8,r8[0x0]
8002d2b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2ba:	f2 c9 fc a3 	sub	r9,r9,-861
8002d2be:	30 0a       	mov	r10,0
8002d2c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002d2c4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2c8:	70 08       	ld.w	r8,r8[0x0]
8002d2ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2ce:	f2 c9 fc 99 	sub	r9,r9,-871
8002d2d2:	30 0a       	mov	r10,0
8002d2d4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002d2d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2dc:	2f f8       	sub	r8,-1
8002d2de:	ef 48 ff f8 	st.w	r7[-8],r8
8002d2e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2e6:	58 28       	cp.w	r8,2
8002d2e8:	fe 9a ff da 	brle	8002d29c <initialisation+0x106>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002d2ec:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2f0:	70 09       	ld.w	r9,r8[0x0]
8002d2f2:	30 38       	mov	r8,3
8002d2f4:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002d2f8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2fc:	70 09       	ld.w	r9,r8[0x0]
8002d2fe:	34 08       	mov	r8,64
8002d300:	f3 68 10 bc 	st.b	r9[4284],r8
	init_nav();
8002d304:	f0 16 01 c1 	mcall	r6[1796]
	init_waypoint_handler();
8002d308:	f0 16 01 5f 	mcall	r6[1404]
	//e_init();
	
	init_neighbors();
8002d30c:	f0 16 01 90 	mcall	r6[1600]
	init_orca();
8002d310:	f0 16 02 0b 	mcall	r6[2092]
	
	LED_On(LED1);
8002d314:	30 2c       	mov	r12,2
8002d316:	f0 16 01 48 	mcall	r6[1312]
}
8002d31a:	2f ed       	sub	sp,-8
8002d31c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d320:	80 02       	ld.sh	r2,r0[0x0]
8002d322:	d0 24       	*unknown*

8002d324 <main>:



void main (void)
{
8002d324:	eb cd 40 c0 	pushm	r6-r7,lr
8002d328:	1a 97       	mov	r7,sp
8002d32a:	48 b6       	lddpc	r6,8002d354 <main+0x30>
8002d32c:	1e 26       	rsub	r6,pc
	
	initialisation();
8002d32e:	f0 16 01 dc 	mcall	r6[1904]
	
	create_tasks();
8002d332:	f0 16 02 17 	mcall	r6[2140]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002d336:	ec f8 00 00 	ld.w	r8,r6[0]
8002d33a:	70 08       	ld.w	r8,r8[0x0]
8002d33c:	30 19       	mov	r9,1
8002d33e:	f1 49 10 c0 	st.w	r8[4288],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002d342:	f0 16 01 06 	mcall	r6[1048]
8002d346:	18 98       	mov	r8,r12
8002d348:	30 0b       	mov	r11,0
8002d34a:	10 9c       	mov	r12,r8
8002d34c:	f0 16 00 ef 	mcall	r6[956]
		
		//LED_On(LED1);

		
	}		
8002d350:	cf 9b       	rjmp	8002d342 <main+0x1e>
8002d352:	00 00       	add	r0,r0
8002d354:	80 02       	ld.sh	r2,r0[0x0]
8002d356:	d1 b0       	acall	0x1b

8002d358 <cos>:
8002d358:	d4 21       	pushm	r4-r7,lr
8002d35a:	20 4d       	sub	sp,16
8002d35c:	e0 6e 21 fb 	mov	lr,8699
8002d360:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d364:	14 98       	mov	r8,r10
8002d366:	16 99       	mov	r9,r11
8002d368:	16 95       	mov	r5,r11
8002d36a:	14 96       	mov	r6,r10
8002d36c:	16 97       	mov	r7,r11
8002d36e:	16 94       	mov	r4,r11
8002d370:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d374:	1c 3c       	cp.w	r12,lr
8002d376:	e0 89 00 05 	brgt	8002d380 <cos+0x28>
8002d37a:	30 08       	mov	r8,0
8002d37c:	30 09       	mov	r9,0
8002d37e:	c1 a8       	rjmp	8002d3b2 <cos+0x5a>
8002d380:	e0 65 ff ff 	mov	r5,65535
8002d384:	ea 15 7f ef 	orh	r5,0x7fef
8002d388:	0a 3c       	cp.w	r12,r5
8002d38a:	e0 8a 00 05 	brle	8002d394 <cos+0x3c>
8002d38e:	e0 a0 17 bd 	rcall	80030308 <__avr32_f64_sub>
8002d392:	c2 68       	rjmp	8002d3de <cos+0x86>
8002d394:	1a 9c       	mov	r12,sp
8002d396:	e0 a0 0b 47 	rcall	8002ea24 <__ieee754_rem_pio2>
8002d39a:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d39e:	58 1c       	cp.w	r12,1
8002d3a0:	c0 c0       	breq	8002d3b8 <cos+0x60>
8002d3a2:	58 2c       	cp.w	r12,2
8002d3a4:	c1 10       	breq	8002d3c6 <cos+0x6e>
8002d3a6:	fa e8 00 08 	ld.d	r8,sp[8]
8002d3aa:	fa ea 00 00 	ld.d	r10,sp[0]
8002d3ae:	58 0c       	cp.w	r12,0
8002d3b0:	c1 41       	brne	8002d3d8 <cos+0x80>
8002d3b2:	e0 a0 0e 37 	rcall	8002f020 <__kernel_cos>
8002d3b6:	c1 48       	rjmp	8002d3de <cos+0x86>
8002d3b8:	fa e8 00 08 	ld.d	r8,sp[8]
8002d3bc:	fa ea 00 00 	ld.d	r10,sp[0]
8002d3c0:	e0 a0 12 94 	rcall	8002f8e8 <__kernel_sin>
8002d3c4:	c0 78       	rjmp	8002d3d2 <cos+0x7a>
8002d3c6:	fa e8 00 08 	ld.d	r8,sp[8]
8002d3ca:	fa ea 00 00 	ld.d	r10,sp[0]
8002d3ce:	e0 a0 0e 29 	rcall	8002f020 <__kernel_cos>
8002d3d2:	ee 1b 80 00 	eorh	r11,0x8000
8002d3d6:	c0 48       	rjmp	8002d3de <cos+0x86>
8002d3d8:	30 1c       	mov	r12,1
8002d3da:	e0 a0 12 87 	rcall	8002f8e8 <__kernel_sin>
8002d3de:	2f cd       	sub	sp,-16
8002d3e0:	d8 22       	popm	r4-r7,pc
8002d3e2:	d7 03       	nop

8002d3e4 <sin>:
8002d3e4:	d4 21       	pushm	r4-r7,lr
8002d3e6:	20 4d       	sub	sp,16
8002d3e8:	e0 6e 21 fb 	mov	lr,8699
8002d3ec:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d3f0:	14 98       	mov	r8,r10
8002d3f2:	16 99       	mov	r9,r11
8002d3f4:	16 95       	mov	r5,r11
8002d3f6:	14 96       	mov	r6,r10
8002d3f8:	16 97       	mov	r7,r11
8002d3fa:	16 94       	mov	r4,r11
8002d3fc:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d400:	1c 3c       	cp.w	r12,lr
8002d402:	e0 89 00 06 	brgt	8002d40e <sin+0x2a>
8002d406:	30 0c       	mov	r12,0
8002d408:	30 08       	mov	r8,0
8002d40a:	30 09       	mov	r9,0
8002d40c:	c1 b8       	rjmp	8002d442 <sin+0x5e>
8002d40e:	e0 65 ff ff 	mov	r5,65535
8002d412:	ea 15 7f ef 	orh	r5,0x7fef
8002d416:	0a 3c       	cp.w	r12,r5
8002d418:	e0 8a 00 05 	brle	8002d422 <sin+0x3e>
8002d41c:	e0 a0 17 76 	rcall	80030308 <__avr32_f64_sub>
8002d420:	c2 78       	rjmp	8002d46e <sin+0x8a>
8002d422:	1a 9c       	mov	r12,sp
8002d424:	e0 a0 0b 00 	rcall	8002ea24 <__ieee754_rem_pio2>
8002d428:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d42c:	58 1c       	cp.w	r12,1
8002d42e:	c0 d0       	breq	8002d448 <sin+0x64>
8002d430:	58 2c       	cp.w	r12,2
8002d432:	c1 20       	breq	8002d456 <sin+0x72>
8002d434:	fa e8 00 08 	ld.d	r8,sp[8]
8002d438:	fa ea 00 00 	ld.d	r10,sp[0]
8002d43c:	58 0c       	cp.w	r12,0
8002d43e:	c1 41       	brne	8002d466 <sin+0x82>
8002d440:	30 1c       	mov	r12,1
8002d442:	e0 a0 12 53 	rcall	8002f8e8 <__kernel_sin>
8002d446:	c1 48       	rjmp	8002d46e <sin+0x8a>
8002d448:	fa e8 00 08 	ld.d	r8,sp[8]
8002d44c:	fa ea 00 00 	ld.d	r10,sp[0]
8002d450:	e0 a0 0d e8 	rcall	8002f020 <__kernel_cos>
8002d454:	c0 d8       	rjmp	8002d46e <sin+0x8a>
8002d456:	30 1c       	mov	r12,1
8002d458:	fa e8 00 08 	ld.d	r8,sp[8]
8002d45c:	fa ea 00 00 	ld.d	r10,sp[0]
8002d460:	e0 a0 12 44 	rcall	8002f8e8 <__kernel_sin>
8002d464:	c0 38       	rjmp	8002d46a <sin+0x86>
8002d466:	e0 a0 0d dd 	rcall	8002f020 <__kernel_cos>
8002d46a:	ee 1b 80 00 	eorh	r11,0x8000
8002d46e:	2f cd       	sub	sp,-16
8002d470:	d8 22       	popm	r4-r7,pc
8002d472:	d7 03       	nop

8002d474 <asin>:
8002d474:	d4 31       	pushm	r0-r7,lr
8002d476:	20 9d       	sub	sp,36
8002d478:	4a 17       	lddpc	r7,8002d4fc <asin+0x88>
8002d47a:	14 94       	mov	r4,r10
8002d47c:	16 95       	mov	r5,r11
8002d47e:	cf 3d       	rcall	8002d864 <__ieee754_asin>
8002d480:	6e 08       	ld.w	r8,r7[0x0]
8002d482:	14 92       	mov	r2,r10
8002d484:	16 93       	mov	r3,r11
8002d486:	5b f8       	cp.w	r8,-1
8002d488:	c3 50       	breq	8002d4f2 <asin+0x7e>
8002d48a:	08 9a       	mov	r10,r4
8002d48c:	0a 9b       	mov	r11,r5
8002d48e:	e0 a0 15 37 	rcall	8002fefc <__isnand>
8002d492:	18 96       	mov	r6,r12
8002d494:	c2 f1       	brne	8002d4f2 <asin+0x7e>
8002d496:	08 9a       	mov	r10,r4
8002d498:	0a 9b       	mov	r11,r5
8002d49a:	e0 a0 14 95 	rcall	8002fdc4 <fabs>
8002d49e:	14 98       	mov	r8,r10
8002d4a0:	16 99       	mov	r9,r11
8002d4a2:	30 0a       	mov	r10,0
8002d4a4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d4a8:	e0 a0 19 56 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d4ac:	c2 30       	breq	8002d4f2 <asin+0x7e>
8002d4ae:	30 18       	mov	r8,1
8002d4b0:	50 08       	stdsp	sp[0x0],r8
8002d4b2:	49 48       	lddpc	r8,8002d500 <asin+0x8c>
8002d4b4:	50 86       	stdsp	sp[0x20],r6
8002d4b6:	50 18       	stdsp	sp[0x4],r8
8002d4b8:	fa e5 00 08 	st.d	sp[8],r4
8002d4bc:	fa e5 00 10 	st.d	sp[16],r4
8002d4c0:	49 1c       	lddpc	r12,8002d504 <asin+0x90>
8002d4c2:	e0 a0 15 2c 	rcall	8002ff1a <nan>
8002d4c6:	fa eb 00 18 	st.d	sp[24],r10
8002d4ca:	6e 08       	ld.w	r8,r7[0x0]
8002d4cc:	58 28       	cp.w	r8,2
8002d4ce:	c0 50       	breq	8002d4d8 <asin+0x64>
8002d4d0:	1a 9c       	mov	r12,sp
8002d4d2:	e0 a0 15 23 	rcall	8002ff18 <matherr>
8002d4d6:	c0 51       	brne	8002d4e0 <asin+0x6c>
8002d4d8:	e0 a0 1d 56 	rcall	80030f84 <__errno>
8002d4dc:	32 18       	mov	r8,33
8002d4de:	99 08       	st.w	r12[0x0],r8
8002d4e0:	40 88       	lddsp	r8,sp[0x20]
8002d4e2:	58 08       	cp.w	r8,0
8002d4e4:	c0 50       	breq	8002d4ee <asin+0x7a>
8002d4e6:	e0 a0 1d 4f 	rcall	80030f84 <__errno>
8002d4ea:	40 88       	lddsp	r8,sp[0x20]
8002d4ec:	99 08       	st.w	r12[0x0],r8
8002d4ee:	fa e2 00 18 	ld.d	r2,sp[24]
8002d4f2:	04 9a       	mov	r10,r2
8002d4f4:	06 9b       	mov	r11,r3
8002d4f6:	2f 7d       	sub	sp,-36
8002d4f8:	d8 32       	popm	r0-r7,pc
8002d4fa:	d7 03       	nop
8002d4fc:	00 00       	add	r0,r0
8002d4fe:	1f cc       	ld.ub	r12,pc[0x4]
8002d500:	80 03       	ld.sh	r3,r0[0x0]
8002d502:	17 74       	ld.ub	r4,--r11
8002d504:	80 03       	ld.sh	r3,r0[0x0]
8002d506:	17 78       	ld.ub	r8,--r11

8002d508 <atan2>:
8002d508:	d4 01       	pushm	lr
8002d50a:	e0 a0 04 25 	rcall	8002dd54 <__ieee754_atan2>
8002d50e:	d8 02       	popm	pc

8002d510 <pow>:
8002d510:	d4 31       	pushm	r0-r7,lr
8002d512:	20 cd       	sub	sp,48
8002d514:	10 94       	mov	r4,r8
8002d516:	14 92       	mov	r2,r10
8002d518:	16 93       	mov	r3,r11
8002d51a:	12 95       	mov	r5,r9
8002d51c:	e0 a0 05 32 	rcall	8002df80 <__ieee754_pow>
8002d520:	4b f6       	lddpc	r6,8002d61c <pow+0x10c>
8002d522:	14 90       	mov	r0,r10
8002d524:	16 91       	mov	r1,r11
8002d526:	6c 08       	ld.w	r8,r6[0x0]
8002d528:	5b f8       	cp.w	r8,-1
8002d52a:	e0 80 01 46 	breq	8002d7b6 <pow+0x2a6>
8002d52e:	08 9a       	mov	r10,r4
8002d530:	0a 9b       	mov	r11,r5
8002d532:	e0 a0 14 e5 	rcall	8002fefc <__isnand>
8002d536:	50 2c       	stdsp	sp[0x8],r12
8002d538:	e0 81 01 3f 	brne	8002d7b6 <pow+0x2a6>
8002d53c:	04 9a       	mov	r10,r2
8002d53e:	06 9b       	mov	r11,r3
8002d540:	e0 a0 14 de 	rcall	8002fefc <__isnand>
8002d544:	18 97       	mov	r7,r12
8002d546:	c2 40       	breq	8002d58e <pow+0x7e>
8002d548:	30 08       	mov	r8,0
8002d54a:	30 09       	mov	r9,0
8002d54c:	08 9a       	mov	r10,r4
8002d54e:	0a 9b       	mov	r11,r5
8002d550:	e0 a0 18 bb 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d554:	e0 80 01 31 	breq	8002d7b6 <pow+0x2a6>
8002d558:	30 18       	mov	r8,1
8002d55a:	50 38       	stdsp	sp[0xc],r8
8002d55c:	4b 18       	lddpc	r8,8002d620 <pow+0x110>
8002d55e:	40 2c       	lddsp	r12,sp[0x8]
8002d560:	50 48       	stdsp	sp[0x10],r8
8002d562:	fc 19 3f f0 	movh	r9,0x3ff0
8002d566:	30 08       	mov	r8,0
8002d568:	fa e3 00 14 	st.d	sp[20],r2
8002d56c:	fa e5 00 1c 	st.d	sp[28],r4
8002d570:	50 bc       	stdsp	sp[0x2c],r12
8002d572:	fa e9 00 24 	st.d	sp[36],r8
8002d576:	6c 0a       	ld.w	r10,r6[0x0]
8002d578:	5b fa       	cp.w	r10,-1
8002d57a:	5f 0b       	sreq	r11
8002d57c:	58 2a       	cp.w	r10,2
8002d57e:	5f 0a       	sreq	r10
8002d580:	f5 eb 10 0b 	or	r11,r10,r11
8002d584:	f8 0b 18 00 	cp.b	r11,r12
8002d588:	e0 81 01 0e 	brne	8002d7a4 <pow+0x294>
8002d58c:	c8 08       	rjmp	8002d68c <pow+0x17c>
8002d58e:	30 08       	mov	r8,0
8002d590:	30 09       	mov	r9,0
8002d592:	04 9a       	mov	r10,r2
8002d594:	06 9b       	mov	r11,r3
8002d596:	e0 a0 18 98 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d59a:	c4 50       	breq	8002d624 <pow+0x114>
8002d59c:	30 08       	mov	r8,0
8002d59e:	30 09       	mov	r9,0
8002d5a0:	08 9a       	mov	r10,r4
8002d5a2:	0a 9b       	mov	r11,r5
8002d5a4:	e0 a0 18 91 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d5a8:	c1 70       	breq	8002d5d6 <pow+0xc6>
8002d5aa:	30 18       	mov	r8,1
8002d5ac:	50 38       	stdsp	sp[0xc],r8
8002d5ae:	49 d8       	lddpc	r8,8002d620 <pow+0x110>
8002d5b0:	30 09       	mov	r9,0
8002d5b2:	50 48       	stdsp	sp[0x10],r8
8002d5b4:	50 b7       	stdsp	sp[0x2c],r7
8002d5b6:	30 08       	mov	r8,0
8002d5b8:	fa e3 00 14 	st.d	sp[20],r2
8002d5bc:	fa e9 00 24 	st.d	sp[36],r8
8002d5c0:	fa e5 00 1c 	st.d	sp[28],r4
8002d5c4:	6c 08       	ld.w	r8,r6[0x0]
8002d5c6:	58 08       	cp.w	r8,0
8002d5c8:	c6 20       	breq	8002d68c <pow+0x17c>
8002d5ca:	30 08       	mov	r8,0
8002d5cc:	fc 19 3f f0 	movh	r9,0x3ff0
8002d5d0:	fa e9 00 24 	st.d	sp[36],r8
8002d5d4:	ce 88       	rjmp	8002d7a4 <pow+0x294>
8002d5d6:	08 9a       	mov	r10,r4
8002d5d8:	0a 9b       	mov	r11,r5
8002d5da:	e0 a0 13 f9 	rcall	8002fdcc <finite>
8002d5de:	e0 80 00 ec 	breq	8002d7b6 <pow+0x2a6>
8002d5e2:	30 08       	mov	r8,0
8002d5e4:	30 09       	mov	r9,0
8002d5e6:	08 9a       	mov	r10,r4
8002d5e8:	0a 9b       	mov	r11,r5
8002d5ea:	e0 a0 18 b5 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d5ee:	e0 80 00 e4 	breq	8002d7b6 <pow+0x2a6>
8002d5f2:	30 18       	mov	r8,1
8002d5f4:	50 b7       	stdsp	sp[0x2c],r7
8002d5f6:	50 38       	stdsp	sp[0xc],r8
8002d5f8:	fa e3 00 14 	st.d	sp[20],r2
8002d5fc:	48 98       	lddpc	r8,8002d620 <pow+0x110>
8002d5fe:	fa e5 00 1c 	st.d	sp[28],r4
8002d602:	50 48       	stdsp	sp[0x10],r8
8002d604:	6c 08       	ld.w	r8,r6[0x0]
8002d606:	58 08       	cp.w	r8,0
8002d608:	c3 30       	breq	8002d66e <pow+0x15e>
8002d60a:	30 0a       	mov	r10,0
8002d60c:	f0 6b 00 00 	mov	r11,-1048576
8002d610:	fa eb 00 24 	st.d	sp[36],r10
8002d614:	58 28       	cp.w	r8,2
8002d616:	c4 10       	breq	8002d698 <pow+0x188>
8002d618:	c3 a8       	rjmp	8002d68c <pow+0x17c>
8002d61a:	d7 03       	nop
8002d61c:	00 00       	add	r0,r0
8002d61e:	1f cc       	ld.ub	r12,pc[0x4]
8002d620:	80 03       	ld.sh	r3,r0[0x0]
8002d622:	17 7c       	ld.ub	r12,--r11
8002d624:	00 9a       	mov	r10,r0
8002d626:	02 9b       	mov	r11,r1
8002d628:	e0 a0 13 d2 	rcall	8002fdcc <finite>
8002d62c:	18 97       	mov	r7,r12
8002d62e:	e0 81 00 8f 	brne	8002d74c <pow+0x23c>
8002d632:	04 9a       	mov	r10,r2
8002d634:	06 9b       	mov	r11,r3
8002d636:	e0 a0 13 cb 	rcall	8002fdcc <finite>
8002d63a:	e0 80 00 89 	breq	8002d74c <pow+0x23c>
8002d63e:	08 9a       	mov	r10,r4
8002d640:	0a 9b       	mov	r11,r5
8002d642:	e0 a0 13 c5 	rcall	8002fdcc <finite>
8002d646:	e0 80 00 83 	breq	8002d74c <pow+0x23c>
8002d64a:	00 9a       	mov	r10,r0
8002d64c:	02 9b       	mov	r11,r1
8002d64e:	e0 a0 14 57 	rcall	8002fefc <__isnand>
8002d652:	4b e8       	lddpc	r8,8002d748 <pow+0x238>
8002d654:	58 0c       	cp.w	r12,0
8002d656:	c2 50       	breq	8002d6a0 <pow+0x190>
8002d658:	50 48       	stdsp	sp[0x10],r8
8002d65a:	50 b7       	stdsp	sp[0x2c],r7
8002d65c:	30 18       	mov	r8,1
8002d65e:	fa e3 00 14 	st.d	sp[20],r2
8002d662:	fa e5 00 1c 	st.d	sp[28],r4
8002d666:	50 38       	stdsp	sp[0xc],r8
8002d668:	6c 07       	ld.w	r7,r6[0x0]
8002d66a:	58 07       	cp.w	r7,0
8002d66c:	c0 61       	brne	8002d678 <pow+0x168>
8002d66e:	30 08       	mov	r8,0
8002d670:	30 09       	mov	r9,0
8002d672:	fa e9 00 24 	st.d	sp[36],r8
8002d676:	c0 b8       	rjmp	8002d68c <pow+0x17c>
8002d678:	30 08       	mov	r8,0
8002d67a:	30 09       	mov	r9,0
8002d67c:	10 9a       	mov	r10,r8
8002d67e:	12 9b       	mov	r11,r9
8002d680:	e0 a0 18 9e 	rcall	800307bc <__avr32_f64_div>
8002d684:	fa eb 00 24 	st.d	sp[36],r10
8002d688:	58 27       	cp.w	r7,2
8002d68a:	c0 70       	breq	8002d698 <pow+0x188>
8002d68c:	fa cc ff f4 	sub	r12,sp,-12
8002d690:	e0 a0 14 44 	rcall	8002ff18 <matherr>
8002d694:	e0 81 00 88 	brne	8002d7a4 <pow+0x294>
8002d698:	e0 a0 1c 76 	rcall	80030f84 <__errno>
8002d69c:	32 18       	mov	r8,33
8002d69e:	c8 28       	rjmp	8002d7a2 <pow+0x292>
8002d6a0:	50 48       	stdsp	sp[0x10],r8
8002d6a2:	50 bc       	stdsp	sp[0x2c],r12
8002d6a4:	30 38       	mov	r8,3
8002d6a6:	fa e3 00 14 	st.d	sp[20],r2
8002d6aa:	50 38       	stdsp	sp[0xc],r8
8002d6ac:	fa e5 00 1c 	st.d	sp[28],r4
8002d6b0:	6c 08       	ld.w	r8,r6[0x0]
8002d6b2:	58 08       	cp.w	r8,0
8002d6b4:	c2 81       	brne	8002d704 <pow+0x1f4>
8002d6b6:	fc 18 e0 00 	movh	r8,0xe000
8002d6ba:	e0 69 ff ff 	mov	r9,65535
8002d6be:	ea 19 47 ef 	orh	r9,0x47ef
8002d6c2:	04 9a       	mov	r10,r2
8002d6c4:	fa e9 00 24 	st.d	sp[36],r8
8002d6c8:	06 9b       	mov	r11,r3
8002d6ca:	30 08       	mov	r8,0
8002d6cc:	30 09       	mov	r9,0
8002d6ce:	e0 a0 18 43 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d6d2:	c5 c0       	breq	8002d78a <pow+0x27a>
8002d6d4:	fc 19 3f e0 	movh	r9,0x3fe0
8002d6d8:	30 08       	mov	r8,0
8002d6da:	08 9a       	mov	r10,r4
8002d6dc:	0a 9b       	mov	r11,r5
8002d6de:	e0 a0 15 29 	rcall	80030130 <__avr32_f64_mul>
8002d6e2:	16 99       	mov	r9,r11
8002d6e4:	50 0a       	stdsp	sp[0x0],r10
8002d6e6:	50 19       	stdsp	sp[0x4],r9
8002d6e8:	e0 a0 14 1e 	rcall	8002ff24 <rint>
8002d6ec:	40 19       	lddsp	r9,sp[0x4]
8002d6ee:	40 08       	lddsp	r8,sp[0x0]
8002d6f0:	e0 a0 17 eb 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d6f4:	c4 b1       	brne	8002d78a <pow+0x27a>
8002d6f6:	fc 18 e0 00 	movh	r8,0xe000
8002d6fa:	e0 69 ff ff 	mov	r9,65535
8002d6fe:	ea 19 c7 ef 	orh	r9,0xc7ef
8002d702:	c4 28       	rjmp	8002d786 <pow+0x276>
8002d704:	30 08       	mov	r8,0
8002d706:	fc 19 7f f0 	movh	r9,0x7ff0
8002d70a:	04 9a       	mov	r10,r2
8002d70c:	fa e9 00 24 	st.d	sp[36],r8
8002d710:	06 9b       	mov	r11,r3
8002d712:	30 08       	mov	r8,0
8002d714:	30 09       	mov	r9,0
8002d716:	e0 a0 18 1f 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d71a:	c3 80       	breq	8002d78a <pow+0x27a>
8002d71c:	fc 19 3f e0 	movh	r9,0x3fe0
8002d720:	30 08       	mov	r8,0
8002d722:	08 9a       	mov	r10,r4
8002d724:	0a 9b       	mov	r11,r5
8002d726:	e0 a0 15 05 	rcall	80030130 <__avr32_f64_mul>
8002d72a:	16 99       	mov	r9,r11
8002d72c:	50 0a       	stdsp	sp[0x0],r10
8002d72e:	50 19       	stdsp	sp[0x4],r9
8002d730:	e0 a0 13 fa 	rcall	8002ff24 <rint>
8002d734:	40 19       	lddsp	r9,sp[0x4]
8002d736:	40 08       	lddsp	r8,sp[0x0]
8002d738:	e0 a0 17 c7 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d73c:	c2 71       	brne	8002d78a <pow+0x27a>
8002d73e:	30 08       	mov	r8,0
8002d740:	f0 69 00 00 	mov	r9,-1048576
8002d744:	c2 18       	rjmp	8002d786 <pow+0x276>
8002d746:	d7 03       	nop
8002d748:	80 03       	ld.sh	r3,r0[0x0]
8002d74a:	17 7c       	ld.ub	r12,--r11
8002d74c:	30 08       	mov	r8,0
8002d74e:	30 09       	mov	r9,0
8002d750:	00 9a       	mov	r10,r0
8002d752:	02 9b       	mov	r11,r1
8002d754:	e0 a0 17 b9 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002d758:	c2 f0       	breq	8002d7b6 <pow+0x2a6>
8002d75a:	04 9a       	mov	r10,r2
8002d75c:	06 9b       	mov	r11,r3
8002d75e:	e0 a0 13 37 	rcall	8002fdcc <finite>
8002d762:	c2 a0       	breq	8002d7b6 <pow+0x2a6>
8002d764:	08 9a       	mov	r10,r4
8002d766:	0a 9b       	mov	r11,r5
8002d768:	e0 a0 13 32 	rcall	8002fdcc <finite>
8002d76c:	c2 50       	breq	8002d7b6 <pow+0x2a6>
8002d76e:	30 48       	mov	r8,4
8002d770:	50 38       	stdsp	sp[0xc],r8
8002d772:	49 48       	lddpc	r8,8002d7c0 <pow+0x2b0>
8002d774:	50 48       	stdsp	sp[0x10],r8
8002d776:	30 08       	mov	r8,0
8002d778:	fa e3 00 14 	st.d	sp[20],r2
8002d77c:	50 b8       	stdsp	sp[0x2c],r8
8002d77e:	fa e5 00 1c 	st.d	sp[28],r4
8002d782:	30 08       	mov	r8,0
8002d784:	30 09       	mov	r9,0
8002d786:	fa e9 00 24 	st.d	sp[36],r8
8002d78a:	48 f8       	lddpc	r8,8002d7c4 <pow+0x2b4>
8002d78c:	70 08       	ld.w	r8,r8[0x0]
8002d78e:	58 28       	cp.w	r8,2
8002d790:	c0 60       	breq	8002d79c <pow+0x28c>
8002d792:	fa cc ff f4 	sub	r12,sp,-12
8002d796:	e0 a0 13 c1 	rcall	8002ff18 <matherr>
8002d79a:	c0 51       	brne	8002d7a4 <pow+0x294>
8002d79c:	e0 a0 1b f4 	rcall	80030f84 <__errno>
8002d7a0:	32 28       	mov	r8,34
8002d7a2:	99 08       	st.w	r12[0x0],r8
8002d7a4:	40 b8       	lddsp	r8,sp[0x2c]
8002d7a6:	58 08       	cp.w	r8,0
8002d7a8:	c0 50       	breq	8002d7b2 <pow+0x2a2>
8002d7aa:	e0 a0 1b ed 	rcall	80030f84 <__errno>
8002d7ae:	40 b8       	lddsp	r8,sp[0x2c]
8002d7b0:	99 08       	st.w	r12[0x0],r8
8002d7b2:	fa e0 00 24 	ld.d	r0,sp[36]
8002d7b6:	00 9a       	mov	r10,r0
8002d7b8:	02 9b       	mov	r11,r1
8002d7ba:	2f 4d       	sub	sp,-48
8002d7bc:	d8 32       	popm	r0-r7,pc
8002d7be:	d7 03       	nop
8002d7c0:	80 03       	ld.sh	r3,r0[0x0]
8002d7c2:	17 7c       	ld.ub	r12,--r11
8002d7c4:	00 00       	add	r0,r0
8002d7c6:	1f cc       	ld.ub	r12,pc[0x4]

8002d7c8 <sqrt>:
8002d7c8:	d4 31       	pushm	r0-r7,lr
8002d7ca:	20 9d       	sub	sp,36
8002d7cc:	4a 47       	lddpc	r7,8002d85c <sqrt+0x94>
8002d7ce:	14 94       	mov	r4,r10
8002d7d0:	16 95       	mov	r5,r11
8002d7d2:	e0 a0 0b 61 	rcall	8002ee94 <__ieee754_sqrt>
8002d7d6:	6e 08       	ld.w	r8,r7[0x0]
8002d7d8:	14 92       	mov	r2,r10
8002d7da:	16 93       	mov	r3,r11
8002d7dc:	5b f8       	cp.w	r8,-1
8002d7de:	c3 a0       	breq	8002d852 <sqrt+0x8a>
8002d7e0:	08 9a       	mov	r10,r4
8002d7e2:	0a 9b       	mov	r11,r5
8002d7e4:	e0 a0 13 8c 	rcall	8002fefc <__isnand>
8002d7e8:	18 96       	mov	r6,r12
8002d7ea:	c3 41       	brne	8002d852 <sqrt+0x8a>
8002d7ec:	30 08       	mov	r8,0
8002d7ee:	30 09       	mov	r9,0
8002d7f0:	08 9a       	mov	r10,r4
8002d7f2:	0a 9b       	mov	r11,r5
8002d7f4:	e0 a0 17 b0 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d7f8:	c2 d0       	breq	8002d852 <sqrt+0x8a>
8002d7fa:	30 18       	mov	r8,1
8002d7fc:	50 86       	stdsp	sp[0x20],r6
8002d7fe:	50 08       	stdsp	sp[0x0],r8
8002d800:	fa e5 00 08 	st.d	sp[8],r4
8002d804:	49 78       	lddpc	r8,8002d860 <sqrt+0x98>
8002d806:	fa e5 00 10 	st.d	sp[16],r4
8002d80a:	50 18       	stdsp	sp[0x4],r8
8002d80c:	6e 07       	ld.w	r7,r7[0x0]
8002d80e:	58 07       	cp.w	r7,0
8002d810:	c0 61       	brne	8002d81c <sqrt+0x54>
8002d812:	30 08       	mov	r8,0
8002d814:	30 09       	mov	r9,0
8002d816:	fa e9 00 18 	st.d	sp[24],r8
8002d81a:	c0 b8       	rjmp	8002d830 <sqrt+0x68>
8002d81c:	30 08       	mov	r8,0
8002d81e:	30 09       	mov	r9,0
8002d820:	10 9a       	mov	r10,r8
8002d822:	12 9b       	mov	r11,r9
8002d824:	e0 a0 17 cc 	rcall	800307bc <__avr32_f64_div>
8002d828:	fa eb 00 18 	st.d	sp[24],r10
8002d82c:	58 27       	cp.w	r7,2
8002d82e:	c0 50       	breq	8002d838 <sqrt+0x70>
8002d830:	1a 9c       	mov	r12,sp
8002d832:	e0 a0 13 73 	rcall	8002ff18 <matherr>
8002d836:	c0 51       	brne	8002d840 <sqrt+0x78>
8002d838:	e0 a0 1b a6 	rcall	80030f84 <__errno>
8002d83c:	32 18       	mov	r8,33
8002d83e:	99 08       	st.w	r12[0x0],r8
8002d840:	40 88       	lddsp	r8,sp[0x20]
8002d842:	58 08       	cp.w	r8,0
8002d844:	c0 50       	breq	8002d84e <sqrt+0x86>
8002d846:	e0 a0 1b 9f 	rcall	80030f84 <__errno>
8002d84a:	40 88       	lddsp	r8,sp[0x20]
8002d84c:	99 08       	st.w	r12[0x0],r8
8002d84e:	fa e2 00 18 	ld.d	r2,sp[24]
8002d852:	04 9a       	mov	r10,r2
8002d854:	06 9b       	mov	r11,r3
8002d856:	2f 7d       	sub	sp,-36
8002d858:	d8 32       	popm	r0-r7,pc
8002d85a:	d7 03       	nop
8002d85c:	00 00       	add	r0,r0
8002d85e:	1f cc       	ld.ub	r12,pc[0x4]
8002d860:	80 03       	ld.sh	r3,r0[0x0]
8002d862:	17 80       	ld.ub	r0,r11[0x0]

8002d864 <__ieee754_asin>:
8002d864:	d4 31       	pushm	r0-r7,lr
8002d866:	20 5d       	sub	sp,20
8002d868:	50 0b       	stdsp	sp[0x0],r11
8002d86a:	16 96       	mov	r6,r11
8002d86c:	14 97       	mov	r7,r10
8002d86e:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002d872:	e0 68 ff ff 	mov	r8,65535
8002d876:	ea 18 3f ef 	orh	r8,0x3fef
8002d87a:	10 35       	cp.w	r5,r8
8002d87c:	e0 8a 00 32 	brle	8002d8e0 <__ieee754_asin+0x7c>
8002d880:	fc 1a c0 10 	movh	r10,0xc010
8002d884:	14 05       	add	r5,r10
8002d886:	0e 45       	or	r5,r7
8002d888:	c1 f1       	brne	8002d8c6 <__ieee754_asin+0x62>
8002d88a:	e0 68 2d 18 	mov	r8,11544
8002d88e:	ea 18 54 44 	orh	r8,0x5444
8002d892:	e0 69 21 fb 	mov	r9,8699
8002d896:	ea 19 3f f9 	orh	r9,0x3ff9
8002d89a:	0e 9a       	mov	r10,r7
8002d89c:	e0 a0 14 4a 	rcall	80030130 <__avr32_f64_mul>
8002d8a0:	e0 68 5c 07 	mov	r8,23559
8002d8a4:	ea 18 33 14 	orh	r8,0x3314
8002d8a8:	14 94       	mov	r4,r10
8002d8aa:	16 95       	mov	r5,r11
8002d8ac:	e0 69 a6 26 	mov	r9,42534
8002d8b0:	ea 19 3c 91 	orh	r9,0x3c91
8002d8b4:	0c 9b       	mov	r11,r6
8002d8b6:	0e 9a       	mov	r10,r7
8002d8b8:	e0 a0 14 3c 	rcall	80030130 <__avr32_f64_mul>
8002d8bc:	14 98       	mov	r8,r10
8002d8be:	16 99       	mov	r9,r11
8002d8c0:	08 9a       	mov	r10,r4
8002d8c2:	0a 9b       	mov	r11,r5
8002d8c4:	ce 48       	rjmp	8002da8c <__ieee754_asin+0x228>
8002d8c6:	0c 99       	mov	r9,r6
8002d8c8:	0e 98       	mov	r8,r7
8002d8ca:	0e 9a       	mov	r10,r7
8002d8cc:	e0 a0 15 1e 	rcall	80030308 <__avr32_f64_sub>
8002d8d0:	14 98       	mov	r8,r10
8002d8d2:	16 99       	mov	r9,r11
8002d8d4:	e0 a0 17 74 	rcall	800307bc <__avr32_f64_div>
8002d8d8:	16 96       	mov	r6,r11
8002d8da:	14 97       	mov	r7,r10
8002d8dc:	e0 8f 02 37 	bral	8002dd4a <__ieee754_asin+0x4e6>
8002d8e0:	e0 68 ff ff 	mov	r8,65535
8002d8e4:	ea 18 3f df 	orh	r8,0x3fdf
8002d8e8:	10 35       	cp.w	r5,r8
8002d8ea:	e0 89 00 d4 	brgt	8002da92 <__ieee754_asin+0x22e>
8002d8ee:	e0 68 ff ff 	mov	r8,65535
8002d8f2:	ea 18 3e 3f 	orh	r8,0x3e3f
8002d8f6:	10 35       	cp.w	r5,r8
8002d8f8:	e0 89 00 17 	brgt	8002d926 <__ieee754_asin+0xc2>
8002d8fc:	e0 68 75 9c 	mov	r8,30108
8002d900:	ea 18 88 00 	orh	r8,0x8800
8002d904:	e0 69 e4 3c 	mov	r9,58428
8002d908:	ea 19 7e 37 	orh	r9,0x7e37
8002d90c:	e0 a0 15 cc 	rcall	800304a4 <__avr32_f64_add>
8002d910:	14 98       	mov	r8,r10
8002d912:	16 99       	mov	r9,r11
8002d914:	30 0a       	mov	r10,0
8002d916:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d91a:	e0 a0 17 1d 	rcall	80030754 <__avr32_f64_cmp_lt>
8002d91e:	e0 80 00 ba 	breq	8002da92 <__ieee754_asin+0x22e>
8002d922:	e0 8f 02 14 	bral	8002dd4a <__ieee754_asin+0x4e6>
8002d926:	16 99       	mov	r9,r11
8002d928:	14 98       	mov	r8,r10
8002d92a:	e0 a0 14 03 	rcall	80030130 <__avr32_f64_mul>
8002d92e:	e0 68 f7 09 	mov	r8,63241
8002d932:	ea 18 0d fd 	orh	r8,0xdfd
8002d936:	14 94       	mov	r4,r10
8002d938:	16 95       	mov	r5,r11
8002d93a:	e0 69 3d e1 	mov	r9,15841
8002d93e:	ea 19 3f 02 	orh	r9,0x3f02
8002d942:	e0 a0 13 f7 	rcall	80030130 <__avr32_f64_mul>
8002d946:	e0 68 b2 88 	mov	r8,45704
8002d94a:	ea 18 75 01 	orh	r8,0x7501
8002d94e:	e0 69 ef e0 	mov	r9,61408
8002d952:	ea 19 3f 49 	orh	r9,0x3f49
8002d956:	e0 a0 15 a7 	rcall	800304a4 <__avr32_f64_add>
8002d95a:	14 98       	mov	r8,r10
8002d95c:	16 99       	mov	r9,r11
8002d95e:	08 9a       	mov	r10,r4
8002d960:	0a 9b       	mov	r11,r5
8002d962:	e0 a0 13 e7 	rcall	80030130 <__avr32_f64_mul>
8002d966:	e0 68 8f 3b 	mov	r8,36667
8002d96a:	ea 18 b5 68 	orh	r8,0xb568
8002d96e:	e0 69 82 28 	mov	r9,33320
8002d972:	ea 19 3f a4 	orh	r9,0x3fa4
8002d976:	e0 a0 14 c9 	rcall	80030308 <__avr32_f64_sub>
8002d97a:	14 98       	mov	r8,r10
8002d97c:	16 99       	mov	r9,r11
8002d97e:	08 9a       	mov	r10,r4
8002d980:	0a 9b       	mov	r11,r5
8002d982:	e0 a0 13 d7 	rcall	80030130 <__avr32_f64_mul>
8002d986:	e0 68 44 55 	mov	r8,17493
8002d98a:	ea 18 0e 88 	orh	r8,0xe88
8002d98e:	e0 69 c1 55 	mov	r9,49493
8002d992:	ea 19 3f c9 	orh	r9,0x3fc9
8002d996:	e0 a0 15 87 	rcall	800304a4 <__avr32_f64_add>
8002d99a:	14 98       	mov	r8,r10
8002d99c:	16 99       	mov	r9,r11
8002d99e:	08 9a       	mov	r10,r4
8002d9a0:	0a 9b       	mov	r11,r5
8002d9a2:	e0 a0 13 c7 	rcall	80030130 <__avr32_f64_mul>
8002d9a6:	e0 68 6f 7d 	mov	r8,28541
8002d9aa:	ea 18 03 eb 	orh	r8,0x3eb
8002d9ae:	e0 69 d6 12 	mov	r9,54802
8002d9b2:	ea 19 3f d4 	orh	r9,0x3fd4
8002d9b6:	e0 a0 14 a9 	rcall	80030308 <__avr32_f64_sub>
8002d9ba:	14 98       	mov	r8,r10
8002d9bc:	16 99       	mov	r9,r11
8002d9be:	08 9a       	mov	r10,r4
8002d9c0:	0a 9b       	mov	r11,r5
8002d9c2:	e0 a0 13 b7 	rcall	80030130 <__avr32_f64_mul>
8002d9c6:	e0 68 55 55 	mov	r8,21845
8002d9ca:	ea 18 55 55 	orh	r8,0x5555
8002d9ce:	e0 69 55 55 	mov	r9,21845
8002d9d2:	ea 19 3f c5 	orh	r9,0x3fc5
8002d9d6:	e0 a0 15 67 	rcall	800304a4 <__avr32_f64_add>
8002d9da:	14 98       	mov	r8,r10
8002d9dc:	16 99       	mov	r9,r11
8002d9de:	08 9a       	mov	r10,r4
8002d9e0:	0a 9b       	mov	r11,r5
8002d9e2:	e0 a0 13 a7 	rcall	80030130 <__avr32_f64_mul>
8002d9e6:	e0 68 92 82 	mov	r8,37506
8002d9ea:	ea 18 b1 2e 	orh	r8,0xb12e
8002d9ee:	14 92       	mov	r2,r10
8002d9f0:	16 93       	mov	r3,r11
8002d9f2:	e0 69 b8 c5 	mov	r9,47301
8002d9f6:	ea 19 3f b3 	orh	r9,0x3fb3
8002d9fa:	08 9a       	mov	r10,r4
8002d9fc:	0a 9b       	mov	r11,r5
8002d9fe:	e0 a0 13 99 	rcall	80030130 <__avr32_f64_mul>
8002da02:	e0 68 01 59 	mov	r8,345
8002da06:	ea 18 1b 8d 	orh	r8,0x1b8d
8002da0a:	e0 69 06 6c 	mov	r9,1644
8002da0e:	ea 19 3f e6 	orh	r9,0x3fe6
8002da12:	e0 a0 14 7b 	rcall	80030308 <__avr32_f64_sub>
8002da16:	14 98       	mov	r8,r10
8002da18:	16 99       	mov	r9,r11
8002da1a:	08 9a       	mov	r10,r4
8002da1c:	0a 9b       	mov	r11,r5
8002da1e:	e0 a0 13 89 	rcall	80030130 <__avr32_f64_mul>
8002da22:	e0 68 8a c8 	mov	r8,35528
8002da26:	ea 18 9c 59 	orh	r8,0x9c59
8002da2a:	e0 69 2a e5 	mov	r9,10981
8002da2e:	ea 19 40 00 	orh	r9,0x4000
8002da32:	e0 a0 15 39 	rcall	800304a4 <__avr32_f64_add>
8002da36:	14 98       	mov	r8,r10
8002da38:	16 99       	mov	r9,r11
8002da3a:	08 9a       	mov	r10,r4
8002da3c:	0a 9b       	mov	r11,r5
8002da3e:	e0 a0 13 79 	rcall	80030130 <__avr32_f64_mul>
8002da42:	e0 68 2d 4b 	mov	r8,11595
8002da46:	ea 18 1c 8a 	orh	r8,0x1c8a
8002da4a:	e0 69 3a 27 	mov	r9,14887
8002da4e:	ea 19 40 03 	orh	r9,0x4003
8002da52:	e0 a0 14 5b 	rcall	80030308 <__avr32_f64_sub>
8002da56:	14 98       	mov	r8,r10
8002da58:	16 99       	mov	r9,r11
8002da5a:	08 9a       	mov	r10,r4
8002da5c:	0a 9b       	mov	r11,r5
8002da5e:	e0 a0 13 69 	rcall	80030130 <__avr32_f64_mul>
8002da62:	30 08       	mov	r8,0
8002da64:	fc 19 3f f0 	movh	r9,0x3ff0
8002da68:	e0 a0 15 1e 	rcall	800304a4 <__avr32_f64_add>
8002da6c:	14 98       	mov	r8,r10
8002da6e:	16 99       	mov	r9,r11
8002da70:	04 9a       	mov	r10,r2
8002da72:	06 9b       	mov	r11,r3
8002da74:	e0 a0 16 a4 	rcall	800307bc <__avr32_f64_div>
8002da78:	14 98       	mov	r8,r10
8002da7a:	16 99       	mov	r9,r11
8002da7c:	0e 9a       	mov	r10,r7
8002da7e:	0c 9b       	mov	r11,r6
8002da80:	e0 a0 13 58 	rcall	80030130 <__avr32_f64_mul>
8002da84:	14 98       	mov	r8,r10
8002da86:	16 99       	mov	r9,r11
8002da88:	0e 9a       	mov	r10,r7
8002da8a:	0c 9b       	mov	r11,r6
8002da8c:	e0 a0 15 0c 	rcall	800304a4 <__avr32_f64_add>
8002da90:	c2 4b       	rjmp	8002d8d8 <__ieee754_asin+0x74>
8002da92:	0c 9b       	mov	r11,r6
8002da94:	0e 9a       	mov	r10,r7
8002da96:	e0 a0 11 97 	rcall	8002fdc4 <fabs>
8002da9a:	14 98       	mov	r8,r10
8002da9c:	16 99       	mov	r9,r11
8002da9e:	30 0a       	mov	r10,0
8002daa0:	fc 1b 3f f0 	movh	r11,0x3ff0
8002daa4:	e0 a0 14 32 	rcall	80030308 <__avr32_f64_sub>
8002daa8:	30 08       	mov	r8,0
8002daaa:	fc 19 3f e0 	movh	r9,0x3fe0
8002daae:	e0 a0 13 41 	rcall	80030130 <__avr32_f64_mul>
8002dab2:	e0 68 f7 09 	mov	r8,63241
8002dab6:	ea 18 0d fd 	orh	r8,0xdfd
8002daba:	16 97       	mov	r7,r11
8002dabc:	14 96       	mov	r6,r10
8002dabe:	e0 69 3d e1 	mov	r9,15841
8002dac2:	ea 19 3f 02 	orh	r9,0x3f02
8002dac6:	e0 a0 13 35 	rcall	80030130 <__avr32_f64_mul>
8002daca:	e0 68 b2 88 	mov	r8,45704
8002dace:	ea 18 75 01 	orh	r8,0x7501
8002dad2:	e0 69 ef e0 	mov	r9,61408
8002dad6:	ea 19 3f 49 	orh	r9,0x3f49
8002dada:	e0 a0 14 e5 	rcall	800304a4 <__avr32_f64_add>
8002dade:	14 98       	mov	r8,r10
8002dae0:	16 99       	mov	r9,r11
8002dae2:	0c 9a       	mov	r10,r6
8002dae4:	0e 9b       	mov	r11,r7
8002dae6:	e0 a0 13 25 	rcall	80030130 <__avr32_f64_mul>
8002daea:	e0 68 8f 3b 	mov	r8,36667
8002daee:	ea 18 b5 68 	orh	r8,0xb568
8002daf2:	e0 69 82 28 	mov	r9,33320
8002daf6:	ea 19 3f a4 	orh	r9,0x3fa4
8002dafa:	e0 a0 14 07 	rcall	80030308 <__avr32_f64_sub>
8002dafe:	14 98       	mov	r8,r10
8002db00:	16 99       	mov	r9,r11
8002db02:	0c 9a       	mov	r10,r6
8002db04:	0e 9b       	mov	r11,r7
8002db06:	e0 a0 13 15 	rcall	80030130 <__avr32_f64_mul>
8002db0a:	e0 68 44 55 	mov	r8,17493
8002db0e:	ea 18 0e 88 	orh	r8,0xe88
8002db12:	e0 69 c1 55 	mov	r9,49493
8002db16:	ea 19 3f c9 	orh	r9,0x3fc9
8002db1a:	e0 a0 14 c5 	rcall	800304a4 <__avr32_f64_add>
8002db1e:	14 98       	mov	r8,r10
8002db20:	16 99       	mov	r9,r11
8002db22:	0c 9a       	mov	r10,r6
8002db24:	0e 9b       	mov	r11,r7
8002db26:	e0 a0 13 05 	rcall	80030130 <__avr32_f64_mul>
8002db2a:	e0 68 6f 7d 	mov	r8,28541
8002db2e:	ea 18 03 eb 	orh	r8,0x3eb
8002db32:	e0 69 d6 12 	mov	r9,54802
8002db36:	ea 19 3f d4 	orh	r9,0x3fd4
8002db3a:	e0 a0 13 e7 	rcall	80030308 <__avr32_f64_sub>
8002db3e:	14 98       	mov	r8,r10
8002db40:	16 99       	mov	r9,r11
8002db42:	0c 9a       	mov	r10,r6
8002db44:	0e 9b       	mov	r11,r7
8002db46:	e0 a0 12 f5 	rcall	80030130 <__avr32_f64_mul>
8002db4a:	e0 68 55 55 	mov	r8,21845
8002db4e:	ea 18 55 55 	orh	r8,0x5555
8002db52:	e0 69 55 55 	mov	r9,21845
8002db56:	ea 19 3f c5 	orh	r9,0x3fc5
8002db5a:	e0 a0 14 a5 	rcall	800304a4 <__avr32_f64_add>
8002db5e:	14 98       	mov	r8,r10
8002db60:	16 99       	mov	r9,r11
8002db62:	0c 9a       	mov	r10,r6
8002db64:	0e 9b       	mov	r11,r7
8002db66:	e0 a0 12 e5 	rcall	80030130 <__avr32_f64_mul>
8002db6a:	e0 68 92 82 	mov	r8,37506
8002db6e:	ea 18 b1 2e 	orh	r8,0xb12e
8002db72:	e0 69 b8 c5 	mov	r9,47301
8002db76:	ea 19 3f b3 	orh	r9,0x3fb3
8002db7a:	14 90       	mov	r0,r10
8002db7c:	16 91       	mov	r1,r11
8002db7e:	0c 9a       	mov	r10,r6
8002db80:	0e 9b       	mov	r11,r7
8002db82:	e0 a0 12 d7 	rcall	80030130 <__avr32_f64_mul>
8002db86:	e0 68 01 59 	mov	r8,345
8002db8a:	ea 18 1b 8d 	orh	r8,0x1b8d
8002db8e:	e0 69 06 6c 	mov	r9,1644
8002db92:	ea 19 3f e6 	orh	r9,0x3fe6
8002db96:	e0 a0 13 b9 	rcall	80030308 <__avr32_f64_sub>
8002db9a:	14 98       	mov	r8,r10
8002db9c:	16 99       	mov	r9,r11
8002db9e:	0c 9a       	mov	r10,r6
8002dba0:	0e 9b       	mov	r11,r7
8002dba2:	e0 a0 12 c7 	rcall	80030130 <__avr32_f64_mul>
8002dba6:	e0 68 8a c8 	mov	r8,35528
8002dbaa:	ea 18 9c 59 	orh	r8,0x9c59
8002dbae:	e0 69 2a e5 	mov	r9,10981
8002dbb2:	ea 19 40 00 	orh	r9,0x4000
8002dbb6:	e0 a0 14 77 	rcall	800304a4 <__avr32_f64_add>
8002dbba:	14 98       	mov	r8,r10
8002dbbc:	16 99       	mov	r9,r11
8002dbbe:	0c 9a       	mov	r10,r6
8002dbc0:	0e 9b       	mov	r11,r7
8002dbc2:	e0 a0 12 b7 	rcall	80030130 <__avr32_f64_mul>
8002dbc6:	e0 68 2d 4b 	mov	r8,11595
8002dbca:	ea 18 1c 8a 	orh	r8,0x1c8a
8002dbce:	e0 69 3a 27 	mov	r9,14887
8002dbd2:	ea 19 40 03 	orh	r9,0x4003
8002dbd6:	e0 a0 13 99 	rcall	80030308 <__avr32_f64_sub>
8002dbda:	14 98       	mov	r8,r10
8002dbdc:	16 99       	mov	r9,r11
8002dbde:	0c 9a       	mov	r10,r6
8002dbe0:	0e 9b       	mov	r11,r7
8002dbe2:	e0 a0 12 a7 	rcall	80030130 <__avr32_f64_mul>
8002dbe6:	30 08       	mov	r8,0
8002dbe8:	fc 19 3f f0 	movh	r9,0x3ff0
8002dbec:	e0 a0 14 5c 	rcall	800304a4 <__avr32_f64_add>
8002dbf0:	fa eb 00 04 	st.d	sp[4],r10
8002dbf4:	0c 9a       	mov	r10,r6
8002dbf6:	0e 9b       	mov	r11,r7
8002dbf8:	e0 a0 09 4e 	rcall	8002ee94 <__ieee754_sqrt>
8002dbfc:	e0 68 33 32 	mov	r8,13106
8002dc00:	ea 18 3f ef 	orh	r8,0x3fef
8002dc04:	14 92       	mov	r2,r10
8002dc06:	16 93       	mov	r3,r11
8002dc08:	10 35       	cp.w	r5,r8
8002dc0a:	e0 8a 00 2d 	brle	8002dc64 <__ieee754_asin+0x400>
8002dc0e:	fa e8 00 04 	ld.d	r8,sp[4]
8002dc12:	00 9a       	mov	r10,r0
8002dc14:	02 9b       	mov	r11,r1
8002dc16:	e0 a0 15 d3 	rcall	800307bc <__avr32_f64_div>
8002dc1a:	14 98       	mov	r8,r10
8002dc1c:	16 99       	mov	r9,r11
8002dc1e:	04 9a       	mov	r10,r2
8002dc20:	06 9b       	mov	r11,r3
8002dc22:	e0 a0 12 87 	rcall	80030130 <__avr32_f64_mul>
8002dc26:	14 98       	mov	r8,r10
8002dc28:	16 99       	mov	r9,r11
8002dc2a:	04 9a       	mov	r10,r2
8002dc2c:	06 9b       	mov	r11,r3
8002dc2e:	e0 a0 14 3b 	rcall	800304a4 <__avr32_f64_add>
8002dc32:	14 98       	mov	r8,r10
8002dc34:	16 99       	mov	r9,r11
8002dc36:	e0 a0 14 37 	rcall	800304a4 <__avr32_f64_add>
8002dc3a:	e0 68 5c 07 	mov	r8,23559
8002dc3e:	ea 18 33 14 	orh	r8,0x3314
8002dc42:	e0 69 a6 26 	mov	r9,42534
8002dc46:	ea 19 3c 91 	orh	r9,0x3c91
8002dc4a:	e0 a0 13 5f 	rcall	80030308 <__avr32_f64_sub>
8002dc4e:	14 98       	mov	r8,r10
8002dc50:	16 99       	mov	r9,r11
8002dc52:	e0 6a 2d 18 	mov	r10,11544
8002dc56:	ea 1a 54 44 	orh	r10,0x5444
8002dc5a:	e0 6b 21 fb 	mov	r11,8699
8002dc5e:	ea 1b 3f f9 	orh	r11,0x3ff9
8002dc62:	c6 98       	rjmp	8002dd34 <__ieee754_asin+0x4d0>
8002dc64:	14 98       	mov	r8,r10
8002dc66:	06 99       	mov	r9,r3
8002dc68:	e0 a0 14 1e 	rcall	800304a4 <__avr32_f64_add>
8002dc6c:	fa e8 00 04 	ld.d	r8,sp[4]
8002dc70:	fa eb 00 0c 	st.d	sp[12],r10
8002dc74:	00 9a       	mov	r10,r0
8002dc76:	02 9b       	mov	r11,r1
8002dc78:	e0 a0 15 a2 	rcall	800307bc <__avr32_f64_div>
8002dc7c:	14 98       	mov	r8,r10
8002dc7e:	16 99       	mov	r9,r11
8002dc80:	fa ea 00 0c 	ld.d	r10,sp[12]
8002dc84:	e0 a0 12 56 	rcall	80030130 <__avr32_f64_mul>
8002dc88:	30 04       	mov	r4,0
8002dc8a:	14 90       	mov	r0,r10
8002dc8c:	16 91       	mov	r1,r11
8002dc8e:	08 98       	mov	r8,r4
8002dc90:	06 99       	mov	r9,r3
8002dc92:	08 9a       	mov	r10,r4
8002dc94:	06 9b       	mov	r11,r3
8002dc96:	e0 a0 12 4d 	rcall	80030130 <__avr32_f64_mul>
8002dc9a:	14 98       	mov	r8,r10
8002dc9c:	16 99       	mov	r9,r11
8002dc9e:	0c 9a       	mov	r10,r6
8002dca0:	0e 9b       	mov	r11,r7
8002dca2:	e0 a0 13 33 	rcall	80030308 <__avr32_f64_sub>
8002dca6:	08 98       	mov	r8,r4
8002dca8:	16 97       	mov	r7,r11
8002dcaa:	14 96       	mov	r6,r10
8002dcac:	06 99       	mov	r9,r3
8002dcae:	04 9a       	mov	r10,r2
8002dcb0:	06 9b       	mov	r11,r3
8002dcb2:	e0 a0 13 f9 	rcall	800304a4 <__avr32_f64_add>
8002dcb6:	14 98       	mov	r8,r10
8002dcb8:	16 99       	mov	r9,r11
8002dcba:	0c 9a       	mov	r10,r6
8002dcbc:	0e 9b       	mov	r11,r7
8002dcbe:	e0 a0 15 7f 	rcall	800307bc <__avr32_f64_div>
8002dcc2:	30 08       	mov	r8,0
8002dcc4:	fc 19 c0 00 	movh	r9,0xc000
8002dcc8:	e0 a0 12 34 	rcall	80030130 <__avr32_f64_mul>
8002dccc:	e0 68 5c 07 	mov	r8,23559
8002dcd0:	ea 18 33 14 	orh	r8,0x3314
8002dcd4:	e0 69 a6 26 	mov	r9,42534
8002dcd8:	ea 19 3c 91 	orh	r9,0x3c91
8002dcdc:	e0 a0 13 e4 	rcall	800304a4 <__avr32_f64_add>
8002dce0:	14 98       	mov	r8,r10
8002dce2:	16 99       	mov	r9,r11
8002dce4:	00 9a       	mov	r10,r0
8002dce6:	02 9b       	mov	r11,r1
8002dce8:	e0 a0 13 10 	rcall	80030308 <__avr32_f64_sub>
8002dcec:	30 08       	mov	r8,0
8002dcee:	16 97       	mov	r7,r11
8002dcf0:	14 96       	mov	r6,r10
8002dcf2:	fc 19 c0 00 	movh	r9,0xc000
8002dcf6:	08 9a       	mov	r10,r4
8002dcf8:	06 9b       	mov	r11,r3
8002dcfa:	e0 a0 12 1b 	rcall	80030130 <__avr32_f64_mul>
8002dcfe:	e0 68 2d 18 	mov	r8,11544
8002dd02:	ea 18 54 44 	orh	r8,0x5444
8002dd06:	e0 69 21 fb 	mov	r9,8699
8002dd0a:	ea 19 3f e9 	orh	r9,0x3fe9
8002dd0e:	e0 a0 13 cb 	rcall	800304a4 <__avr32_f64_add>
8002dd12:	14 98       	mov	r8,r10
8002dd14:	16 99       	mov	r9,r11
8002dd16:	0c 9a       	mov	r10,r6
8002dd18:	0e 9b       	mov	r11,r7
8002dd1a:	e0 a0 12 f7 	rcall	80030308 <__avr32_f64_sub>
8002dd1e:	06 95       	mov	r5,r3
8002dd20:	14 98       	mov	r8,r10
8002dd22:	16 99       	mov	r9,r11
8002dd24:	e0 6a 2d 18 	mov	r10,11544
8002dd28:	ea 1a 54 44 	orh	r10,0x5444
8002dd2c:	e0 6b 21 fb 	mov	r11,8699
8002dd30:	ea 1b 3f e9 	orh	r11,0x3fe9
8002dd34:	e0 a0 12 ea 	rcall	80030308 <__avr32_f64_sub>
8002dd38:	40 08       	lddsp	r8,sp[0x0]
8002dd3a:	16 96       	mov	r6,r11
8002dd3c:	14 97       	mov	r7,r10
8002dd3e:	ee 16 80 00 	eorh	r6,0x8000
8002dd42:	58 08       	cp.w	r8,0
8002dd44:	e0 8a 00 03 	brle	8002dd4a <__ieee754_asin+0x4e6>
8002dd48:	16 96       	mov	r6,r11
8002dd4a:	0c 9b       	mov	r11,r6
8002dd4c:	0e 9a       	mov	r10,r7
8002dd4e:	2f bd       	sub	sp,-20
8002dd50:	d8 32       	popm	r0-r7,pc
8002dd52:	d7 03       	nop

8002dd54 <__ieee754_atan2>:
8002dd54:	d4 31       	pushm	r0-r7,lr
8002dd56:	20 2d       	sub	sp,8
8002dd58:	50 0b       	stdsp	sp[0x0],r11
8002dd5a:	10 96       	mov	r6,r8
8002dd5c:	10 92       	mov	r2,r8
8002dd5e:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002dd62:	5c 38       	neg	r8
8002dd64:	14 94       	mov	r4,r10
8002dd66:	0c 48       	or	r8,r6
8002dd68:	16 95       	mov	r5,r11
8002dd6a:	12 93       	mov	r3,r9
8002dd6c:	14 90       	mov	r0,r10
8002dd6e:	16 91       	mov	r1,r11
8002dd70:	12 9c       	mov	r12,r9
8002dd72:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002dd76:	fc 17 7f f0 	movh	r7,0x7ff0
8002dd7a:	0e 38       	cp.w	r8,r7
8002dd7c:	e0 8b 00 0e 	brhi	8002dd98 <__ieee754_atan2+0x44>
8002dd80:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002dd84:	f4 07 11 00 	rsub	r7,r10,0
8002dd88:	fc 10 7f f0 	movh	r0,0x7ff0
8002dd8c:	14 47       	or	r7,r10
8002dd8e:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002dd92:	00 37       	cp.w	r7,r0
8002dd94:	e0 88 00 09 	brls	8002dda6 <__ieee754_atan2+0x52>
8002dd98:	04 98       	mov	r8,r2
8002dd9a:	06 99       	mov	r9,r3
8002dd9c:	08 9a       	mov	r10,r4
8002dd9e:	0a 9b       	mov	r11,r5
8002dda0:	e0 a0 13 82 	rcall	800304a4 <__avr32_f64_add>
8002dda4:	ce 88       	rjmp	8002df74 <__ieee754_atan2+0x220>
8002dda6:	fc 17 c0 10 	movh	r7,0xc010
8002ddaa:	f8 07 00 07 	add	r7,r12,r7
8002ddae:	0c 47       	or	r7,r6
8002ddb0:	c0 41       	brne	8002ddb8 <__ieee754_atan2+0x64>
8002ddb2:	e0 a0 0e 65 	rcall	8002fa7c <atan>
8002ddb6:	cd f8       	rjmp	8002df74 <__ieee754_atan2+0x220>
8002ddb8:	f8 07 14 1e 	asr	r7,r12,0x1e
8002ddbc:	f1 ea 10 09 	or	r9,r8,r10
8002ddc0:	e2 17 00 02 	andl	r7,0x2,COH
8002ddc4:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002ddc8:	58 09       	cp.w	r9,0
8002ddca:	c0 71       	brne	8002ddd8 <__ieee754_atan2+0x84>
8002ddcc:	58 27       	cp.w	r7,2
8002ddce:	c5 10       	breq	8002de70 <__ieee754_atan2+0x11c>
8002ddd0:	e0 8a 00 d4 	brle	8002df78 <__ieee754_atan2+0x224>
8002ddd4:	58 37       	cp.w	r7,3
8002ddd6:	c5 60       	breq	8002de82 <__ieee754_atan2+0x12e>
8002ddd8:	fd e6 10 06 	or	r6,lr,r6
8002dddc:	c6 00       	breq	8002de9c <__ieee754_atan2+0x148>
8002ddde:	fc 19 7f f0 	movh	r9,0x7ff0
8002dde2:	12 3e       	cp.w	lr,r9
8002dde4:	c5 81       	brne	8002de94 <__ieee754_atan2+0x140>
8002dde6:	12 38       	cp.w	r8,r9
8002dde8:	c3 11       	brne	8002de4a <__ieee754_atan2+0xf6>
8002ddea:	58 17       	cp.w	r7,1
8002ddec:	c0 b0       	breq	8002de02 <__ieee754_atan2+0xae>
8002ddee:	e0 89 00 05 	brgt	8002ddf8 <__ieee754_atan2+0xa4>
8002ddf2:	58 07       	cp.w	r7,0
8002ddf4:	c1 00       	breq	8002de14 <__ieee754_atan2+0xc0>
8002ddf6:	c5 38       	rjmp	8002de9c <__ieee754_atan2+0x148>
8002ddf8:	58 27       	cp.w	r7,2
8002ddfa:	c1 60       	breq	8002de26 <__ieee754_atan2+0xd2>
8002ddfc:	58 37       	cp.w	r7,3
8002ddfe:	c4 f1       	brne	8002de9c <__ieee754_atan2+0x148>
8002de00:	c1 c8       	rjmp	8002de38 <__ieee754_atan2+0xe4>
8002de02:	e0 64 2d 18 	mov	r4,11544
8002de06:	ea 14 54 44 	orh	r4,0x5444
8002de0a:	e0 65 21 fb 	mov	r5,8699
8002de0e:	ea 15 bf e9 	orh	r5,0xbfe9
8002de12:	cb 38       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de14:	e0 64 2d 18 	mov	r4,11544
8002de18:	ea 14 54 44 	orh	r4,0x5444
8002de1c:	e0 65 21 fb 	mov	r5,8699
8002de20:	ea 15 3f e9 	orh	r5,0x3fe9
8002de24:	ca a8       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de26:	e0 64 21 d2 	mov	r4,8658
8002de2a:	ea 14 7f 33 	orh	r4,0x7f33
8002de2e:	e0 65 d9 7c 	mov	r5,55676
8002de32:	ea 15 40 02 	orh	r5,0x4002
8002de36:	ca 18       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de38:	e0 64 21 d2 	mov	r4,8658
8002de3c:	ea 14 7f 33 	orh	r4,0x7f33
8002de40:	e0 65 d9 7c 	mov	r5,55676
8002de44:	ea 15 c0 02 	orh	r5,0xc002
8002de48:	c9 88       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de4a:	58 17       	cp.w	r7,1
8002de4c:	c0 b0       	breq	8002de62 <__ieee754_atan2+0x10e>
8002de4e:	e0 89 00 05 	brgt	8002de58 <__ieee754_atan2+0x104>
8002de52:	58 07       	cp.w	r7,0
8002de54:	c0 b0       	breq	8002de6a <__ieee754_atan2+0x116>
8002de56:	c1 f8       	rjmp	8002de94 <__ieee754_atan2+0x140>
8002de58:	58 27       	cp.w	r7,2
8002de5a:	c0 b0       	breq	8002de70 <__ieee754_atan2+0x11c>
8002de5c:	58 37       	cp.w	r7,3
8002de5e:	c1 b1       	brne	8002de94 <__ieee754_atan2+0x140>
8002de60:	c1 18       	rjmp	8002de82 <__ieee754_atan2+0x12e>
8002de62:	30 04       	mov	r4,0
8002de64:	fc 15 80 00 	movh	r5,0x8000
8002de68:	c8 88       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de6a:	30 04       	mov	r4,0
8002de6c:	30 05       	mov	r5,0
8002de6e:	c8 58       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de70:	e0 64 2d 18 	mov	r4,11544
8002de74:	ea 14 54 44 	orh	r4,0x5444
8002de78:	e0 65 21 fb 	mov	r5,8699
8002de7c:	ea 15 40 09 	orh	r5,0x4009
8002de80:	c7 c8       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de82:	e0 64 2d 18 	mov	r4,11544
8002de86:	ea 14 54 44 	orh	r4,0x5444
8002de8a:	e0 65 21 fb 	mov	r5,8699
8002de8e:	ea 15 c0 09 	orh	r5,0xc009
8002de92:	c7 38       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002de94:	fc 10 7f f0 	movh	r0,0x7ff0
8002de98:	00 38       	cp.w	r8,r0
8002de9a:	c1 51       	brne	8002dec4 <__ieee754_atan2+0x170>
8002de9c:	58 01       	cp.w	r1,0
8002de9e:	c0 a5       	brlt	8002deb2 <__ieee754_atan2+0x15e>
8002dea0:	e0 64 2d 18 	mov	r4,11544
8002dea4:	ea 14 54 44 	orh	r4,0x5444
8002dea8:	e0 65 21 fb 	mov	r5,8699
8002deac:	ea 15 3f f9 	orh	r5,0x3ff9
8002deb0:	c6 48       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002deb2:	e0 64 2d 18 	mov	r4,11544
8002deb6:	ea 14 54 44 	orh	r4,0x5444
8002deba:	e0 65 21 fb 	mov	r5,8699
8002debe:	ea 15 bf f9 	orh	r5,0xbff9
8002dec2:	c5 b8       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002dec4:	1c 18       	sub	r8,lr
8002dec6:	b5 48       	asr	r8,0x14
8002dec8:	e0 48 00 3c 	cp.w	r8,60
8002decc:	e0 8a 00 0b 	brle	8002dee2 <__ieee754_atan2+0x18e>
8002ded0:	e0 6a 2d 18 	mov	r10,11544
8002ded4:	ea 1a 54 44 	orh	r10,0x5444
8002ded8:	e0 6b 21 fb 	mov	r11,8699
8002dedc:	ea 1b 3f f9 	orh	r11,0x3ff9
8002dee0:	c1 48       	rjmp	8002df08 <__ieee754_atan2+0x1b4>
8002dee2:	fe 58 ff c4 	cp.w	r8,-60
8002dee6:	5f 58       	srlt	r8
8002dee8:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002deec:	c0 40       	breq	8002def4 <__ieee754_atan2+0x1a0>
8002deee:	30 0a       	mov	r10,0
8002def0:	30 0b       	mov	r11,0
8002def2:	c0 b8       	rjmp	8002df08 <__ieee754_atan2+0x1b4>
8002def4:	04 98       	mov	r8,r2
8002def6:	06 99       	mov	r9,r3
8002def8:	08 9a       	mov	r10,r4
8002defa:	0a 9b       	mov	r11,r5
8002defc:	e0 a0 14 60 	rcall	800307bc <__avr32_f64_div>
8002df00:	e0 a0 0f 62 	rcall	8002fdc4 <fabs>
8002df04:	e0 a0 0d bc 	rcall	8002fa7c <atan>
8002df08:	58 17       	cp.w	r7,1
8002df0a:	c0 60       	breq	8002df16 <__ieee754_atan2+0x1c2>
8002df0c:	58 27       	cp.w	r7,2
8002df0e:	c0 a0       	breq	8002df22 <__ieee754_atan2+0x1ce>
8002df10:	58 07       	cp.w	r7,0
8002df12:	c1 d1       	brne	8002df4c <__ieee754_atan2+0x1f8>
8002df14:	c3 08       	rjmp	8002df74 <__ieee754_atan2+0x220>
8002df16:	fc 18 80 00 	movh	r8,0x8000
8002df1a:	14 94       	mov	r4,r10
8002df1c:	f6 08 00 05 	add	r5,r11,r8
8002df20:	c2 c8       	rjmp	8002df78 <__ieee754_atan2+0x224>
8002df22:	e0 68 5c 07 	mov	r8,23559
8002df26:	ea 18 33 14 	orh	r8,0x3314
8002df2a:	e0 69 a6 26 	mov	r9,42534
8002df2e:	ea 19 3c a1 	orh	r9,0x3ca1
8002df32:	e0 a0 11 eb 	rcall	80030308 <__avr32_f64_sub>
8002df36:	14 98       	mov	r8,r10
8002df38:	16 99       	mov	r9,r11
8002df3a:	e0 6a 2d 18 	mov	r10,11544
8002df3e:	ea 1a 54 44 	orh	r10,0x5444
8002df42:	e0 6b 21 fb 	mov	r11,8699
8002df46:	ea 1b 40 09 	orh	r11,0x4009
8002df4a:	c1 38       	rjmp	8002df70 <__ieee754_atan2+0x21c>
8002df4c:	e0 68 5c 07 	mov	r8,23559
8002df50:	ea 18 33 14 	orh	r8,0x3314
8002df54:	e0 69 a6 26 	mov	r9,42534
8002df58:	ea 19 3c a1 	orh	r9,0x3ca1
8002df5c:	e0 a0 11 d6 	rcall	80030308 <__avr32_f64_sub>
8002df60:	e0 68 2d 18 	mov	r8,11544
8002df64:	ea 18 54 44 	orh	r8,0x5444
8002df68:	e0 69 21 fb 	mov	r9,8699
8002df6c:	ea 19 40 09 	orh	r9,0x4009
8002df70:	e0 a0 11 cc 	rcall	80030308 <__avr32_f64_sub>
8002df74:	14 94       	mov	r4,r10
8002df76:	16 95       	mov	r5,r11
8002df78:	08 9a       	mov	r10,r4
8002df7a:	0a 9b       	mov	r11,r5
8002df7c:	2f ed       	sub	sp,-8
8002df7e:	d8 32       	popm	r0-r7,pc

8002df80 <__ieee754_pow>:
8002df80:	d4 31       	pushm	r0-r7,lr
8002df82:	20 ed       	sub	sp,56
8002df84:	10 94       	mov	r4,r8
8002df86:	12 95       	mov	r5,r9
8002df88:	50 7b       	stdsp	sp[0x1c],r11
8002df8a:	fa e5 00 0c 	st.d	sp[12],r4
8002df8e:	12 97       	mov	r7,r9
8002df90:	10 96       	mov	r6,r8
8002df92:	40 31       	lddsp	r1,sp[0xc]
8002df94:	40 49       	lddsp	r9,sp[0x10]
8002df96:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002df9a:	16 90       	mov	r0,r11
8002df9c:	14 93       	mov	r3,r10
8002df9e:	14 98       	mov	r8,r10
8002dfa0:	e5 e9 10 0c 	or	r12,r2,r9
8002dfa4:	e0 80 05 33 	breq	8002ea0a <__ieee754_pow+0xa8a>
8002dfa8:	50 1b       	stdsp	sp[0x4],r11
8002dfaa:	16 9e       	mov	lr,r11
8002dfac:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002dfb0:	fc 1c 7f f0 	movh	r12,0x7ff0
8002dfb4:	18 34       	cp.w	r4,r12
8002dfb6:	e0 89 00 1a 	brgt	8002dfea <__ieee754_pow+0x6a>
8002dfba:	5f 05       	sreq	r5
8002dfbc:	50 55       	stdsp	sp[0x14],r5
8002dfbe:	30 0c       	mov	r12,0
8002dfc0:	58 0a       	cp.w	r10,0
8002dfc2:	5f 15       	srne	r5
8002dfc4:	40 5e       	lddsp	lr,sp[0x14]
8002dfc6:	fd e5 00 05 	and	r5,lr,r5
8002dfca:	f8 05 18 00 	cp.b	r5,r12
8002dfce:	c0 e1       	brne	8002dfea <__ieee754_pow+0x6a>
8002dfd0:	fc 1c 7f f0 	movh	r12,0x7ff0
8002dfd4:	18 32       	cp.w	r2,r12
8002dfd6:	e0 89 00 0a 	brgt	8002dfea <__ieee754_pow+0x6a>
8002dfda:	5f 0c       	sreq	r12
8002dfdc:	58 09       	cp.w	r9,0
8002dfde:	5f 1e       	srne	lr
8002dfe0:	f9 ee 00 0e 	and	lr,r12,lr
8002dfe4:	ea 0e 18 00 	cp.b	lr,r5
8002dfe8:	c0 d0       	breq	8002e002 <__ieee754_pow+0x82>
8002dfea:	fc 19 c0 10 	movh	r9,0xc010
8002dfee:	12 04       	add	r4,r9
8002dff0:	e9 e8 10 08 	or	r8,r4,r8
8002dff4:	e0 80 05 0b 	breq	8002ea0a <__ieee754_pow+0xa8a>
8002dff8:	4d 6c       	lddpc	r12,8002e150 <__ieee754_pow+0x1d0>
8002dffa:	e0 a0 0f 90 	rcall	8002ff1a <nan>
8002dffe:	e0 8f 05 03 	bral	8002ea04 <__ieee754_pow+0xa84>
8002e002:	58 0b       	cp.w	r11,0
8002e004:	c3 64       	brge	8002e070 <__ieee754_pow+0xf0>
8002e006:	e0 6b ff ff 	mov	r11,65535
8002e00a:	ea 1b 43 3f 	orh	r11,0x433f
8002e00e:	16 32       	cp.w	r2,r11
8002e010:	e0 8a 00 04 	brle	8002e018 <__ieee754_pow+0x98>
8002e014:	30 25       	mov	r5,2
8002e016:	c2 e8       	rjmp	8002e072 <__ieee754_pow+0xf2>
8002e018:	e0 6a ff ff 	mov	r10,65535
8002e01c:	ea 1a 3f ef 	orh	r10,0x3fef
8002e020:	14 32       	cp.w	r2,r10
8002e022:	e0 8a 00 27 	brle	8002e070 <__ieee754_pow+0xf0>
8002e026:	e4 0a 14 14 	asr	r10,r2,0x14
8002e02a:	f4 ca 03 ff 	sub	r10,r10,1023
8002e02e:	59 4a       	cp.w	r10,20
8002e030:	e0 8a 00 0f 	brle	8002e04e <__ieee754_pow+0xce>
8002e034:	f4 0a 11 34 	rsub	r10,r10,52
8002e038:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e03c:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e040:	12 3a       	cp.w	r10,r9
8002e042:	c1 71       	brne	8002e070 <__ieee754_pow+0xf0>
8002e044:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e048:	ea 05 11 02 	rsub	r5,r5,2
8002e04c:	c1 38       	rjmp	8002e072 <__ieee754_pow+0xf2>
8002e04e:	40 49       	lddsp	r9,sp[0x10]
8002e050:	58 09       	cp.w	r9,0
8002e052:	c5 01       	brne	8002e0f2 <__ieee754_pow+0x172>
8002e054:	f4 0a 11 14 	rsub	r10,r10,20
8002e058:	e4 0a 08 45 	asr	r5,r2,r10
8002e05c:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e060:	04 3a       	cp.w	r10,r2
8002e062:	e0 81 04 de 	brne	8002ea1e <__ieee754_pow+0xa9e>
8002e066:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e06a:	ea 05 11 02 	rsub	r5,r5,2
8002e06e:	c0 48       	rjmp	8002e076 <__ieee754_pow+0xf6>
8002e070:	30 05       	mov	r5,0
8002e072:	58 09       	cp.w	r9,0
8002e074:	c4 01       	brne	8002e0f4 <__ieee754_pow+0x174>
8002e076:	58 0c       	cp.w	r12,0
8002e078:	c1 90       	breq	8002e0aa <__ieee754_pow+0x12a>
8002e07a:	fc 19 c0 10 	movh	r9,0xc010
8002e07e:	e8 09 00 09 	add	r9,r4,r9
8002e082:	f3 e8 10 08 	or	r8,r9,r8
8002e086:	e0 80 04 c2 	breq	8002ea0a <__ieee754_pow+0xa8a>
8002e08a:	e0 68 ff ff 	mov	r8,65535
8002e08e:	ea 18 3f ef 	orh	r8,0x3fef
8002e092:	10 34       	cp.w	r4,r8
8002e094:	e0 8a 00 07 	brle	8002e0a2 <__ieee754_pow+0x122>
8002e098:	58 01       	cp.w	r1,0
8002e09a:	e0 84 04 be 	brge	8002ea16 <__ieee754_pow+0xa96>
8002e09e:	e0 8f 04 ba 	bral	8002ea12 <__ieee754_pow+0xa92>
8002e0a2:	58 01       	cp.w	r1,0
8002e0a4:	e0 84 04 b7 	brge	8002ea12 <__ieee754_pow+0xa92>
8002e0a8:	c5 98       	rjmp	8002e15a <__ieee754_pow+0x1da>
8002e0aa:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e0ae:	1c 32       	cp.w	r2,lr
8002e0b0:	c0 d1       	brne	8002e0ca <__ieee754_pow+0x14a>
8002e0b2:	58 01       	cp.w	r1,0
8002e0b4:	c0 55       	brlt	8002e0be <__ieee754_pow+0x13e>
8002e0b6:	00 97       	mov	r7,r0
8002e0b8:	06 96       	mov	r6,r3
8002e0ba:	e0 8f 04 ae 	bral	8002ea16 <__ieee754_pow+0xa96>
8002e0be:	00 99       	mov	r9,r0
8002e0c0:	06 98       	mov	r8,r3
8002e0c2:	30 0a       	mov	r10,0
8002e0c4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e0c8:	c5 c8       	rjmp	8002e180 <__ieee754_pow+0x200>
8002e0ca:	fc 1c 40 00 	movh	r12,0x4000
8002e0ce:	18 31       	cp.w	r1,r12
8002e0d0:	c0 41       	brne	8002e0d8 <__ieee754_pow+0x158>
8002e0d2:	00 99       	mov	r9,r0
8002e0d4:	06 98       	mov	r8,r3
8002e0d6:	c8 68       	rjmp	8002e1e2 <__ieee754_pow+0x262>
8002e0d8:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e0dc:	16 31       	cp.w	r1,r11
8002e0de:	c0 b1       	brne	8002e0f4 <__ieee754_pow+0x174>
8002e0e0:	40 1a       	lddsp	r10,sp[0x4]
8002e0e2:	58 0a       	cp.w	r10,0
8002e0e4:	c0 85       	brlt	8002e0f4 <__ieee754_pow+0x174>
8002e0e6:	00 9b       	mov	r11,r0
8002e0e8:	06 9a       	mov	r10,r3
8002e0ea:	e0 a0 06 d5 	rcall	8002ee94 <__ieee754_sqrt>
8002e0ee:	e0 8f 04 8b 	bral	8002ea04 <__ieee754_pow+0xa84>
8002e0f2:	30 05       	mov	r5,0
8002e0f4:	50 08       	stdsp	sp[0x0],r8
8002e0f6:	00 9b       	mov	r11,r0
8002e0f8:	06 9a       	mov	r10,r3
8002e0fa:	e0 a0 0e 65 	rcall	8002fdc4 <fabs>
8002e0fe:	40 08       	lddsp	r8,sp[0x0]
8002e100:	58 08       	cp.w	r8,0
8002e102:	c3 01       	brne	8002e162 <__ieee754_pow+0x1e2>
8002e104:	58 04       	cp.w	r4,0
8002e106:	5f 09       	sreq	r9
8002e108:	40 5e       	lddsp	lr,sp[0x14]
8002e10a:	fd e9 10 09 	or	r9,lr,r9
8002e10e:	f0 09 18 00 	cp.b	r9,r8
8002e112:	c0 51       	brne	8002e11c <__ieee754_pow+0x19c>
8002e114:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e118:	18 34       	cp.w	r4,r12
8002e11a:	c2 41       	brne	8002e162 <__ieee754_pow+0x1e2>
8002e11c:	58 01       	cp.w	r1,0
8002e11e:	c0 84       	brge	8002e12e <__ieee754_pow+0x1ae>
8002e120:	16 99       	mov	r9,r11
8002e122:	14 98       	mov	r8,r10
8002e124:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e128:	30 0a       	mov	r10,0
8002e12a:	e0 a0 13 49 	rcall	800307bc <__avr32_f64_div>
8002e12e:	16 97       	mov	r7,r11
8002e130:	14 96       	mov	r6,r10
8002e132:	40 1b       	lddsp	r11,sp[0x4]
8002e134:	58 0b       	cp.w	r11,0
8002e136:	e0 84 04 70 	brge	8002ea16 <__ieee754_pow+0xa96>
8002e13a:	fc 18 c0 10 	movh	r8,0xc010
8002e13e:	10 04       	add	r4,r8
8002e140:	eb e4 10 04 	or	r4,r5,r4
8002e144:	c0 81       	brne	8002e154 <__ieee754_pow+0x1d4>
8002e146:	0e 9b       	mov	r11,r7
8002e148:	0e 99       	mov	r9,r7
8002e14a:	0c 98       	mov	r8,r6
8002e14c:	c1 68       	rjmp	8002e178 <__ieee754_pow+0x1f8>
8002e14e:	d7 03       	nop
8002e150:	80 03       	ld.sh	r3,r0[0x0]
8002e152:	17 78       	ld.ub	r8,--r11
8002e154:	58 15       	cp.w	r5,1
8002e156:	e0 81 04 60 	brne	8002ea16 <__ieee754_pow+0xa96>
8002e15a:	ee 17 80 00 	eorh	r7,0x8000
8002e15e:	e0 8f 04 5c 	bral	8002ea16 <__ieee754_pow+0xa96>
8002e162:	40 78       	lddsp	r8,sp[0x1c]
8002e164:	bf 98       	lsr	r8,0x1f
8002e166:	20 18       	sub	r8,1
8002e168:	50 d8       	stdsp	sp[0x34],r8
8002e16a:	eb e8 10 08 	or	r8,r5,r8
8002e16e:	c0 d1       	brne	8002e188 <__ieee754_pow+0x208>
8002e170:	00 99       	mov	r9,r0
8002e172:	06 98       	mov	r8,r3
8002e174:	06 9a       	mov	r10,r3
8002e176:	00 9b       	mov	r11,r0
8002e178:	e0 a0 10 c8 	rcall	80030308 <__avr32_f64_sub>
8002e17c:	14 98       	mov	r8,r10
8002e17e:	16 99       	mov	r9,r11
8002e180:	e0 a0 13 1e 	rcall	800307bc <__avr32_f64_div>
8002e184:	e0 8f 04 40 	bral	8002ea04 <__ieee754_pow+0xa84>
8002e188:	fc 19 41 e0 	movh	r9,0x41e0
8002e18c:	12 32       	cp.w	r2,r9
8002e18e:	e0 8a 00 9f 	brle	8002e2cc <__ieee754_pow+0x34c>
8002e192:	fc 18 43 f0 	movh	r8,0x43f0
8002e196:	10 32       	cp.w	r2,r8
8002e198:	e0 8a 00 0a 	brle	8002e1ac <__ieee754_pow+0x22c>
8002e19c:	e0 65 ff ff 	mov	r5,65535
8002e1a0:	ea 15 3f ef 	orh	r5,0x3fef
8002e1a4:	0a 34       	cp.w	r4,r5
8002e1a6:	e0 89 00 13 	brgt	8002e1cc <__ieee754_pow+0x24c>
8002e1aa:	c0 88       	rjmp	8002e1ba <__ieee754_pow+0x23a>
8002e1ac:	e0 60 ff fe 	mov	r0,65534
8002e1b0:	ea 10 3f ef 	orh	r0,0x3fef
8002e1b4:	00 34       	cp.w	r4,r0
8002e1b6:	e0 89 00 06 	brgt	8002e1c2 <__ieee754_pow+0x242>
8002e1ba:	58 01       	cp.w	r1,0
8002e1bc:	e0 84 04 2b 	brge	8002ea12 <__ieee754_pow+0xa92>
8002e1c0:	c0 98       	rjmp	8002e1d2 <__ieee754_pow+0x252>
8002e1c2:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e1c6:	1c 34       	cp.w	r4,lr
8002e1c8:	e0 8a 00 11 	brle	8002e1ea <__ieee754_pow+0x26a>
8002e1cc:	58 01       	cp.w	r1,0
8002e1ce:	e0 8a 04 22 	brle	8002ea12 <__ieee754_pow+0xa92>
8002e1d2:	e0 68 75 9c 	mov	r8,30108
8002e1d6:	ea 18 88 00 	orh	r8,0x8800
8002e1da:	e0 69 e4 3c 	mov	r9,58428
8002e1de:	ea 19 7e 37 	orh	r9,0x7e37
8002e1e2:	10 9a       	mov	r10,r8
8002e1e4:	12 9b       	mov	r11,r9
8002e1e6:	e0 8f 04 0d 	bral	8002ea00 <__ieee754_pow+0xa80>
8002e1ea:	30 08       	mov	r8,0
8002e1ec:	fc 19 3f f0 	movh	r9,0x3ff0
8002e1f0:	e0 a0 10 8c 	rcall	80030308 <__avr32_f64_sub>
8002e1f4:	fc 18 60 00 	movh	r8,0x6000
8002e1f8:	14 92       	mov	r2,r10
8002e1fa:	16 93       	mov	r3,r11
8002e1fc:	e0 69 15 47 	mov	r9,5447
8002e200:	ea 19 3f f7 	orh	r9,0x3ff7
8002e204:	e0 a0 0f 96 	rcall	80030130 <__avr32_f64_mul>
8002e208:	e0 68 df 44 	mov	r8,57156
8002e20c:	ea 18 f8 5d 	orh	r8,0xf85d
8002e210:	fa eb 00 0c 	st.d	sp[12],r10
8002e214:	e0 69 ae 0b 	mov	r9,44555
8002e218:	ea 19 3e 54 	orh	r9,0x3e54
8002e21c:	04 9a       	mov	r10,r2
8002e21e:	06 9b       	mov	r11,r3
8002e220:	e0 a0 0f 88 	rcall	80030130 <__avr32_f64_mul>
8002e224:	04 98       	mov	r8,r2
8002e226:	fa eb 00 04 	st.d	sp[4],r10
8002e22a:	06 99       	mov	r9,r3
8002e22c:	04 9a       	mov	r10,r2
8002e22e:	06 9b       	mov	r11,r3
8002e230:	e0 a0 0f 80 	rcall	80030130 <__avr32_f64_mul>
8002e234:	30 08       	mov	r8,0
8002e236:	14 90       	mov	r0,r10
8002e238:	16 91       	mov	r1,r11
8002e23a:	fc 19 bf d0 	movh	r9,0xbfd0
8002e23e:	04 9a       	mov	r10,r2
8002e240:	06 9b       	mov	r11,r3
8002e242:	e0 a0 0f 77 	rcall	80030130 <__avr32_f64_mul>
8002e246:	e0 68 55 55 	mov	r8,21845
8002e24a:	ea 18 55 55 	orh	r8,0x5555
8002e24e:	e0 69 55 55 	mov	r9,21845
8002e252:	ea 19 3f d5 	orh	r9,0x3fd5
8002e256:	e0 a0 11 27 	rcall	800304a4 <__avr32_f64_add>
8002e25a:	14 98       	mov	r8,r10
8002e25c:	16 99       	mov	r9,r11
8002e25e:	04 9a       	mov	r10,r2
8002e260:	06 9b       	mov	r11,r3
8002e262:	e0 a0 0f 67 	rcall	80030130 <__avr32_f64_mul>
8002e266:	14 98       	mov	r8,r10
8002e268:	16 99       	mov	r9,r11
8002e26a:	30 0a       	mov	r10,0
8002e26c:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e270:	e0 a0 10 4c 	rcall	80030308 <__avr32_f64_sub>
8002e274:	14 98       	mov	r8,r10
8002e276:	16 99       	mov	r9,r11
8002e278:	00 9a       	mov	r10,r0
8002e27a:	02 9b       	mov	r11,r1
8002e27c:	e0 a0 0f 5a 	rcall	80030130 <__avr32_f64_mul>
8002e280:	e0 68 82 fe 	mov	r8,33534
8002e284:	ea 18 65 2b 	orh	r8,0x652b
8002e288:	e0 69 15 47 	mov	r9,5447
8002e28c:	ea 19 bf f7 	orh	r9,0xbff7
8002e290:	e0 a0 0f 50 	rcall	80030130 <__avr32_f64_mul>
8002e294:	14 98       	mov	r8,r10
8002e296:	16 99       	mov	r9,r11
8002e298:	fa ea 00 04 	ld.d	r10,sp[4]
8002e29c:	e0 a0 11 04 	rcall	800304a4 <__avr32_f64_add>
8002e2a0:	16 91       	mov	r1,r11
8002e2a2:	14 98       	mov	r8,r10
8002e2a4:	14 90       	mov	r0,r10
8002e2a6:	02 99       	mov	r9,r1
8002e2a8:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e2ac:	e0 a0 10 fc 	rcall	800304a4 <__avr32_f64_add>
8002e2b0:	fa e8 00 0c 	ld.d	r8,sp[12]
8002e2b4:	16 93       	mov	r3,r11
8002e2b6:	30 02       	mov	r2,0
8002e2b8:	06 9b       	mov	r11,r3
8002e2ba:	04 9a       	mov	r10,r2
8002e2bc:	e0 a0 10 26 	rcall	80030308 <__avr32_f64_sub>
8002e2c0:	14 98       	mov	r8,r10
8002e2c2:	16 99       	mov	r9,r11
8002e2c4:	00 9a       	mov	r10,r0
8002e2c6:	02 9b       	mov	r11,r1
8002e2c8:	e0 8f 01 c6 	bral	8002e654 <__ieee754_pow+0x6d4>
8002e2cc:	ee 54 ff ff 	cp.w	r4,1048575
8002e2d0:	e0 8a 00 04 	brle	8002e2d8 <__ieee754_pow+0x358>
8002e2d4:	30 0c       	mov	r12,0
8002e2d6:	c0 98       	rjmp	8002e2e8 <__ieee754_pow+0x368>
8002e2d8:	fc 19 43 40 	movh	r9,0x4340
8002e2dc:	30 08       	mov	r8,0
8002e2de:	e0 a0 0f 29 	rcall	80030130 <__avr32_f64_mul>
8002e2e2:	3c bc       	mov	r12,-53
8002e2e4:	16 99       	mov	r9,r11
8002e2e6:	12 94       	mov	r4,r9
8002e2e8:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002e2ec:	f8 cc 03 ff 	sub	r12,r12,1023
8002e2f0:	b5 44       	asr	r4,0x14
8002e2f2:	10 93       	mov	r3,r8
8002e2f4:	08 0c       	add	r12,r4
8002e2f6:	ea 13 3f f0 	orh	r3,0x3ff0
8002e2fa:	e2 58 98 8e 	cp.w	r8,235662
8002e2fe:	e0 8a 00 0c 	brle	8002e316 <__ieee754_pow+0x396>
8002e302:	ea 58 b6 79 	cp.w	r8,767609
8002e306:	e0 89 00 04 	brgt	8002e30e <__ieee754_pow+0x38e>
8002e30a:	30 14       	mov	r4,1
8002e30c:	c0 68       	rjmp	8002e318 <__ieee754_pow+0x398>
8002e30e:	f0 68 00 00 	mov	r8,-1048576
8002e312:	2f fc       	sub	r12,-1
8002e314:	10 03       	add	r3,r8
8002e316:	30 04       	mov	r4,0
8002e318:	14 98       	mov	r8,r10
8002e31a:	06 99       	mov	r9,r3
8002e31c:	4d ea       	lddpc	r10,8002e494 <__ieee754_pow+0x514>
8002e31e:	50 0c       	stdsp	sp[0x0],r12
8002e320:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002e324:	fa e9 00 14 	st.d	sp[20],r8
8002e328:	fa e1 00 1c 	st.d	sp[28],r0
8002e32c:	00 98       	mov	r8,r0
8002e32e:	02 99       	mov	r9,r1
8002e330:	fa ea 00 14 	ld.d	r10,sp[20]
8002e334:	e0 a0 0f ea 	rcall	80030308 <__avr32_f64_sub>
8002e338:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e33c:	fa eb 00 24 	st.d	sp[36],r10
8002e340:	fa ea 00 14 	ld.d	r10,sp[20]
8002e344:	e0 a0 10 b0 	rcall	800304a4 <__avr32_f64_add>
8002e348:	14 98       	mov	r8,r10
8002e34a:	16 99       	mov	r9,r11
8002e34c:	30 0a       	mov	r10,0
8002e34e:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e352:	e0 a0 12 35 	rcall	800307bc <__avr32_f64_div>
8002e356:	14 98       	mov	r8,r10
8002e358:	16 99       	mov	r9,r11
8002e35a:	fa eb 00 2c 	st.d	sp[44],r10
8002e35e:	fa ea 00 24 	ld.d	r10,sp[36]
8002e362:	e0 a0 0e e7 	rcall	80030130 <__avr32_f64_mul>
8002e366:	30 09       	mov	r9,0
8002e368:	fa eb 00 0c 	st.d	sp[12],r10
8002e36c:	fa eb 00 04 	st.d	sp[4],r10
8002e370:	a1 53       	asr	r3,0x1
8002e372:	30 0a       	mov	r10,0
8002e374:	bd b3       	sbr	r3,0x1d
8002e376:	e8 08 15 12 	lsl	r8,r4,0x12
8002e37a:	f8 28 00 00 	sub	r8,-524288
8002e37e:	f0 03 00 0b 	add	r11,r8,r3
8002e382:	50 49       	stdsp	sp[0x10],r9
8002e384:	14 92       	mov	r2,r10
8002e386:	fa e0 00 0c 	ld.d	r0,sp[12]
8002e38a:	16 93       	mov	r3,r11
8002e38c:	14 98       	mov	r8,r10
8002e38e:	16 99       	mov	r9,r11
8002e390:	00 9a       	mov	r10,r0
8002e392:	02 9b       	mov	r11,r1
8002e394:	e0 a0 0e ce 	rcall	80030130 <__avr32_f64_mul>
8002e398:	14 98       	mov	r8,r10
8002e39a:	16 99       	mov	r9,r11
8002e39c:	fa ea 00 24 	ld.d	r10,sp[36]
8002e3a0:	e0 a0 0f b4 	rcall	80030308 <__avr32_f64_sub>
8002e3a4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e3a8:	fa eb 00 24 	st.d	sp[36],r10
8002e3ac:	04 9a       	mov	r10,r2
8002e3ae:	06 9b       	mov	r11,r3
8002e3b0:	e0 a0 0f ac 	rcall	80030308 <__avr32_f64_sub>
8002e3b4:	14 98       	mov	r8,r10
8002e3b6:	16 99       	mov	r9,r11
8002e3b8:	fa ea 00 14 	ld.d	r10,sp[20]
8002e3bc:	e0 a0 0f a6 	rcall	80030308 <__avr32_f64_sub>
8002e3c0:	14 98       	mov	r8,r10
8002e3c2:	16 99       	mov	r9,r11
8002e3c4:	00 9a       	mov	r10,r0
8002e3c6:	02 9b       	mov	r11,r1
8002e3c8:	e0 a0 0e b4 	rcall	80030130 <__avr32_f64_mul>
8002e3cc:	14 98       	mov	r8,r10
8002e3ce:	16 99       	mov	r9,r11
8002e3d0:	fa ea 00 24 	ld.d	r10,sp[36]
8002e3d4:	e0 a0 0f 9a 	rcall	80030308 <__avr32_f64_sub>
8002e3d8:	14 98       	mov	r8,r10
8002e3da:	16 99       	mov	r9,r11
8002e3dc:	fa ea 00 2c 	ld.d	r10,sp[44]
8002e3e0:	e0 a0 0e a8 	rcall	80030130 <__avr32_f64_mul>
8002e3e4:	fa e8 00 04 	ld.d	r8,sp[4]
8002e3e8:	fa eb 00 14 	st.d	sp[20],r10
8002e3ec:	10 9a       	mov	r10,r8
8002e3ee:	12 9b       	mov	r11,r9
8002e3f0:	e0 a0 0e a0 	rcall	80030130 <__avr32_f64_mul>
8002e3f4:	16 93       	mov	r3,r11
8002e3f6:	14 92       	mov	r2,r10
8002e3f8:	06 99       	mov	r9,r3
8002e3fa:	14 98       	mov	r8,r10
8002e3fc:	e0 a0 0e 9a 	rcall	80030130 <__avr32_f64_mul>
8002e400:	e0 68 4e ef 	mov	r8,20207
8002e404:	ea 18 4a 45 	orh	r8,0x4a45
8002e408:	fa eb 00 1c 	st.d	sp[28],r10
8002e40c:	e0 69 7e 28 	mov	r9,32296
8002e410:	ea 19 3f ca 	orh	r9,0x3fca
8002e414:	04 9a       	mov	r10,r2
8002e416:	06 9b       	mov	r11,r3
8002e418:	e0 a0 0e 8c 	rcall	80030130 <__avr32_f64_mul>
8002e41c:	e0 68 db 65 	mov	r8,56165
8002e420:	ea 18 93 c9 	orh	r8,0x93c9
8002e424:	e0 69 86 4a 	mov	r9,34378
8002e428:	ea 19 3f cd 	orh	r9,0x3fcd
8002e42c:	e0 a0 10 3c 	rcall	800304a4 <__avr32_f64_add>
8002e430:	14 98       	mov	r8,r10
8002e432:	16 99       	mov	r9,r11
8002e434:	04 9a       	mov	r10,r2
8002e436:	06 9b       	mov	r11,r3
8002e438:	e0 a0 0e 7c 	rcall	80030130 <__avr32_f64_mul>
8002e43c:	e0 68 41 01 	mov	r8,16641
8002e440:	ea 18 a9 1d 	orh	r8,0xa91d
8002e444:	e0 69 74 60 	mov	r9,29792
8002e448:	ea 19 3f d1 	orh	r9,0x3fd1
8002e44c:	e0 a0 10 2c 	rcall	800304a4 <__avr32_f64_add>
8002e450:	14 98       	mov	r8,r10
8002e452:	16 99       	mov	r9,r11
8002e454:	04 9a       	mov	r10,r2
8002e456:	06 9b       	mov	r11,r3
8002e458:	e0 a0 0e 6c 	rcall	80030130 <__avr32_f64_mul>
8002e45c:	e0 68 26 4d 	mov	r8,9805
8002e460:	ea 18 51 8f 	orh	r8,0x518f
8002e464:	e0 69 55 55 	mov	r9,21845
8002e468:	ea 19 3f d5 	orh	r9,0x3fd5
8002e46c:	e0 a0 10 1c 	rcall	800304a4 <__avr32_f64_add>
8002e470:	14 98       	mov	r8,r10
8002e472:	16 99       	mov	r9,r11
8002e474:	04 9a       	mov	r10,r2
8002e476:	06 9b       	mov	r11,r3
8002e478:	e0 a0 0e 5c 	rcall	80030130 <__avr32_f64_mul>
8002e47c:	e0 68 ab ff 	mov	r8,44031
8002e480:	ea 18 db 6f 	orh	r8,0xdb6f
8002e484:	e0 69 6d b6 	mov	r9,28086
8002e488:	ea 19 3f db 	orh	r9,0x3fdb
8002e48c:	e0 a0 10 0c 	rcall	800304a4 <__avr32_f64_add>
8002e490:	c0 48       	rjmp	8002e498 <__ieee754_pow+0x518>
8002e492:	d7 03       	nop
8002e494:	80 03       	ld.sh	r3,r0[0x0]
8002e496:	17 a8       	ld.ub	r8,r11[0x2]
8002e498:	14 98       	mov	r8,r10
8002e49a:	16 99       	mov	r9,r11
8002e49c:	04 9a       	mov	r10,r2
8002e49e:	06 9b       	mov	r11,r3
8002e4a0:	e0 a0 0e 48 	rcall	80030130 <__avr32_f64_mul>
8002e4a4:	e0 68 33 03 	mov	r8,13059
8002e4a8:	ea 18 33 33 	orh	r8,0x3333
8002e4ac:	e0 69 33 33 	mov	r9,13107
8002e4b0:	ea 19 3f e3 	orh	r9,0x3fe3
8002e4b4:	e0 a0 0f f8 	rcall	800304a4 <__avr32_f64_add>
8002e4b8:	14 98       	mov	r8,r10
8002e4ba:	16 99       	mov	r9,r11
8002e4bc:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e4c0:	e0 a0 0e 38 	rcall	80030130 <__avr32_f64_mul>
8002e4c4:	fa e8 00 04 	ld.d	r8,sp[4]
8002e4c8:	14 92       	mov	r2,r10
8002e4ca:	16 93       	mov	r3,r11
8002e4cc:	00 9a       	mov	r10,r0
8002e4ce:	02 9b       	mov	r11,r1
8002e4d0:	e0 a0 0f ea 	rcall	800304a4 <__avr32_f64_add>
8002e4d4:	14 98       	mov	r8,r10
8002e4d6:	16 99       	mov	r9,r11
8002e4d8:	fa ea 00 14 	ld.d	r10,sp[20]
8002e4dc:	e0 a0 0e 2a 	rcall	80030130 <__avr32_f64_mul>
8002e4e0:	14 98       	mov	r8,r10
8002e4e2:	16 99       	mov	r9,r11
8002e4e4:	04 9a       	mov	r10,r2
8002e4e6:	06 9b       	mov	r11,r3
8002e4e8:	e0 a0 0f de 	rcall	800304a4 <__avr32_f64_add>
8002e4ec:	00 98       	mov	r8,r0
8002e4ee:	fa eb 00 1c 	st.d	sp[28],r10
8002e4f2:	02 99       	mov	r9,r1
8002e4f4:	00 9a       	mov	r10,r0
8002e4f6:	02 9b       	mov	r11,r1
8002e4f8:	e0 a0 0e 1c 	rcall	80030130 <__avr32_f64_mul>
8002e4fc:	30 08       	mov	r8,0
8002e4fe:	fc 19 40 08 	movh	r9,0x4008
8002e502:	fa eb 00 2c 	st.d	sp[44],r10
8002e506:	e0 a0 0f cf 	rcall	800304a4 <__avr32_f64_add>
8002e50a:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e50e:	e0 a0 0f cb 	rcall	800304a4 <__avr32_f64_add>
8002e512:	40 48       	lddsp	r8,sp[0x10]
8002e514:	16 93       	mov	r3,r11
8002e516:	10 92       	mov	r2,r8
8002e518:	06 99       	mov	r9,r3
8002e51a:	00 9a       	mov	r10,r0
8002e51c:	02 9b       	mov	r11,r1
8002e51e:	e0 a0 0e 09 	rcall	80030130 <__avr32_f64_mul>
8002e522:	04 98       	mov	r8,r2
8002e524:	06 99       	mov	r9,r3
8002e526:	fa eb 00 24 	st.d	sp[36],r10
8002e52a:	fa ea 00 14 	ld.d	r10,sp[20]
8002e52e:	e0 a0 0e 01 	rcall	80030130 <__avr32_f64_mul>
8002e532:	30 08       	mov	r8,0
8002e534:	14 90       	mov	r0,r10
8002e536:	16 91       	mov	r1,r11
8002e538:	04 9a       	mov	r10,r2
8002e53a:	06 9b       	mov	r11,r3
8002e53c:	fc 19 40 08 	movh	r9,0x4008
8002e540:	e0 a0 0e e4 	rcall	80030308 <__avr32_f64_sub>
8002e544:	fa e8 00 2c 	ld.d	r8,sp[44]
8002e548:	e0 a0 0e e0 	rcall	80030308 <__avr32_f64_sub>
8002e54c:	14 98       	mov	r8,r10
8002e54e:	16 99       	mov	r9,r11
8002e550:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e554:	e0 a0 0e da 	rcall	80030308 <__avr32_f64_sub>
8002e558:	fa e8 00 04 	ld.d	r8,sp[4]
8002e55c:	e0 a0 0d ea 	rcall	80030130 <__avr32_f64_mul>
8002e560:	14 98       	mov	r8,r10
8002e562:	16 99       	mov	r9,r11
8002e564:	00 9a       	mov	r10,r0
8002e566:	02 9b       	mov	r11,r1
8002e568:	e0 a0 0f 9e 	rcall	800304a4 <__avr32_f64_add>
8002e56c:	16 91       	mov	r1,r11
8002e56e:	14 90       	mov	r0,r10
8002e570:	14 98       	mov	r8,r10
8002e572:	02 99       	mov	r9,r1
8002e574:	fa ea 00 24 	ld.d	r10,sp[36]
8002e578:	e0 a0 0f 96 	rcall	800304a4 <__avr32_f64_add>
8002e57c:	40 4e       	lddsp	lr,sp[0x10]
8002e57e:	16 93       	mov	r3,r11
8002e580:	1c 92       	mov	r2,lr
8002e582:	1c 9a       	mov	r10,lr
8002e584:	fc 18 e0 00 	movh	r8,0xe000
8002e588:	e0 69 c7 09 	mov	r9,50953
8002e58c:	ea 19 3f ee 	orh	r9,0x3fee
8002e590:	06 9b       	mov	r11,r3
8002e592:	e0 a0 0d cf 	rcall	80030130 <__avr32_f64_mul>
8002e596:	e0 68 01 f5 	mov	r8,501
8002e59a:	ea 18 14 5b 	orh	r8,0x145b
8002e59e:	fa eb 00 14 	st.d	sp[20],r10
8002e5a2:	e0 69 2f e0 	mov	r9,12256
8002e5a6:	ea 19 be 3e 	orh	r9,0xbe3e
8002e5aa:	04 9a       	mov	r10,r2
8002e5ac:	06 9b       	mov	r11,r3
8002e5ae:	e0 a0 0d c1 	rcall	80030130 <__avr32_f64_mul>
8002e5b2:	fa e8 00 24 	ld.d	r8,sp[36]
8002e5b6:	fa eb 00 04 	st.d	sp[4],r10
8002e5ba:	04 9a       	mov	r10,r2
8002e5bc:	06 9b       	mov	r11,r3
8002e5be:	e0 a0 0e a5 	rcall	80030308 <__avr32_f64_sub>
8002e5c2:	14 98       	mov	r8,r10
8002e5c4:	16 99       	mov	r9,r11
8002e5c6:	00 9a       	mov	r10,r0
8002e5c8:	02 9b       	mov	r11,r1
8002e5ca:	e0 a0 0e 9f 	rcall	80030308 <__avr32_f64_sub>
8002e5ce:	e0 68 03 fd 	mov	r8,1021
8002e5d2:	ea 18 dc 3a 	orh	r8,0xdc3a
8002e5d6:	e0 69 c7 09 	mov	r9,50953
8002e5da:	ea 19 3f ee 	orh	r9,0x3fee
8002e5de:	e0 a0 0d a9 	rcall	80030130 <__avr32_f64_mul>
8002e5e2:	14 98       	mov	r8,r10
8002e5e4:	16 99       	mov	r9,r11
8002e5e6:	fa ea 00 04 	ld.d	r10,sp[4]
8002e5ea:	e0 a0 0f 5d 	rcall	800304a4 <__avr32_f64_add>
8002e5ee:	4a 18       	lddpc	r8,8002e670 <__ieee754_pow+0x6f0>
8002e5f0:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002e5f4:	e0 a0 0f 58 	rcall	800304a4 <__avr32_f64_add>
8002e5f8:	40 0c       	lddsp	r12,sp[0x0]
8002e5fa:	fa eb 00 1c 	st.d	sp[28],r10
8002e5fe:	e0 a0 0f f4 	rcall	800305e6 <__avr32_s32_to_f64>
8002e602:	49 d8       	lddpc	r8,8002e674 <__ieee754_pow+0x6f4>
8002e604:	14 90       	mov	r0,r10
8002e606:	16 91       	mov	r1,r11
8002e608:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002e60c:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e610:	fa eb 00 04 	st.d	sp[4],r10
8002e614:	fa ea 00 14 	ld.d	r10,sp[20]
8002e618:	e0 a0 0f 46 	rcall	800304a4 <__avr32_f64_add>
8002e61c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e620:	e0 a0 0f 42 	rcall	800304a4 <__avr32_f64_add>
8002e624:	00 98       	mov	r8,r0
8002e626:	02 99       	mov	r9,r1
8002e628:	e0 a0 0f 3e 	rcall	800304a4 <__avr32_f64_add>
8002e62c:	00 98       	mov	r8,r0
8002e62e:	02 99       	mov	r9,r1
8002e630:	40 4a       	lddsp	r10,sp[0x10]
8002e632:	16 93       	mov	r3,r11
8002e634:	14 92       	mov	r2,r10
8002e636:	06 9b       	mov	r11,r3
8002e638:	e0 a0 0e 68 	rcall	80030308 <__avr32_f64_sub>
8002e63c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e640:	e0 a0 0e 64 	rcall	80030308 <__avr32_f64_sub>
8002e644:	fa e8 00 14 	ld.d	r8,sp[20]
8002e648:	e0 a0 0e 60 	rcall	80030308 <__avr32_f64_sub>
8002e64c:	14 98       	mov	r8,r10
8002e64e:	16 99       	mov	r9,r11
8002e650:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e654:	e0 a0 0e 5a 	rcall	80030308 <__avr32_f64_sub>
8002e658:	20 15       	sub	r5,1
8002e65a:	40 d9       	lddsp	r9,sp[0x34]
8002e65c:	14 90       	mov	r0,r10
8002e65e:	16 91       	mov	r1,r11
8002e660:	12 45       	or	r5,r9
8002e662:	c0 b0       	breq	8002e678 <__ieee754_pow+0x6f8>
8002e664:	30 04       	mov	r4,0
8002e666:	fc 15 3f f0 	movh	r5,0x3ff0
8002e66a:	fa e5 00 0c 	st.d	sp[12],r4
8002e66e:	c0 a8       	rjmp	8002e682 <__ieee754_pow+0x702>
8002e670:	80 03       	ld.sh	r3,r0[0x0]
8002e672:	17 98       	ld.ub	r8,r11[0x1]
8002e674:	80 03       	ld.sh	r3,r0[0x0]
8002e676:	17 88       	ld.ub	r8,r11[0x0]
8002e678:	30 0a       	mov	r10,0
8002e67a:	fc 1b bf f0 	movh	r11,0xbff0
8002e67e:	fa eb 00 0c 	st.d	sp[12],r10
8002e682:	0e 99       	mov	r9,r7
8002e684:	30 08       	mov	r8,0
8002e686:	0e 9b       	mov	r11,r7
8002e688:	fa e9 00 04 	st.d	sp[4],r8
8002e68c:	0c 9a       	mov	r10,r6
8002e68e:	e0 a0 0e 3d 	rcall	80030308 <__avr32_f64_sub>
8002e692:	04 98       	mov	r8,r2
8002e694:	06 99       	mov	r9,r3
8002e696:	e0 a0 0d 4d 	rcall	80030130 <__avr32_f64_mul>
8002e69a:	00 98       	mov	r8,r0
8002e69c:	14 94       	mov	r4,r10
8002e69e:	16 95       	mov	r5,r11
8002e6a0:	02 99       	mov	r9,r1
8002e6a2:	0e 9b       	mov	r11,r7
8002e6a4:	0c 9a       	mov	r10,r6
8002e6a6:	e0 a0 0d 45 	rcall	80030130 <__avr32_f64_mul>
8002e6aa:	14 98       	mov	r8,r10
8002e6ac:	16 99       	mov	r9,r11
8002e6ae:	08 9a       	mov	r10,r4
8002e6b0:	0a 9b       	mov	r11,r5
8002e6b2:	e0 a0 0e f9 	rcall	800304a4 <__avr32_f64_add>
8002e6b6:	04 98       	mov	r8,r2
8002e6b8:	06 99       	mov	r9,r3
8002e6ba:	14 90       	mov	r0,r10
8002e6bc:	16 91       	mov	r1,r11
8002e6be:	fa ea 00 04 	ld.d	r10,sp[4]
8002e6c2:	e0 a0 0d 37 	rcall	80030130 <__avr32_f64_mul>
8002e6c6:	14 94       	mov	r4,r10
8002e6c8:	16 95       	mov	r5,r11
8002e6ca:	08 98       	mov	r8,r4
8002e6cc:	00 9a       	mov	r10,r0
8002e6ce:	02 9b       	mov	r11,r1
8002e6d0:	0a 99       	mov	r9,r5
8002e6d2:	fa e5 00 04 	st.d	sp[4],r4
8002e6d6:	e0 a0 0e e7 	rcall	800304a4 <__avr32_f64_add>
8002e6da:	e0 6e ff ff 	mov	lr,65535
8002e6de:	ea 1e 40 8f 	orh	lr,0x408f
8002e6e2:	16 93       	mov	r3,r11
8002e6e4:	14 92       	mov	r2,r10
8002e6e6:	06 97       	mov	r7,r3
8002e6e8:	06 98       	mov	r8,r3
8002e6ea:	1c 33       	cp.w	r3,lr
8002e6ec:	e0 8a 00 36 	brle	8002e758 <__ieee754_pow+0x7d8>
8002e6f0:	fc 1a bf 70 	movh	r10,0xbf70
8002e6f4:	14 08       	add	r8,r10
8002e6f6:	f1 e2 10 09 	or	r9,r8,r2
8002e6fa:	c1 a1       	brne	8002e72e <__ieee754_pow+0x7ae>
8002e6fc:	e0 68 82 fe 	mov	r8,33534
8002e700:	ea 18 65 2b 	orh	r8,0x652b
8002e704:	e0 69 15 47 	mov	r9,5447
8002e708:	ea 19 3c 97 	orh	r9,0x3c97
8002e70c:	00 9a       	mov	r10,r0
8002e70e:	02 9b       	mov	r11,r1
8002e710:	e0 a0 0e ca 	rcall	800304a4 <__avr32_f64_add>
8002e714:	08 98       	mov	r8,r4
8002e716:	fa eb 00 14 	st.d	sp[20],r10
8002e71a:	0a 99       	mov	r9,r5
8002e71c:	04 9a       	mov	r10,r2
8002e71e:	06 9b       	mov	r11,r3
8002e720:	e0 a0 0d f4 	rcall	80030308 <__avr32_f64_sub>
8002e724:	fa e8 00 14 	ld.d	r8,sp[20]
8002e728:	e0 a0 10 16 	rcall	80030754 <__avr32_f64_cmp_lt>
8002e72c:	c4 40       	breq	8002e7b4 <__ieee754_pow+0x834>
8002e72e:	e0 68 75 9c 	mov	r8,30108
8002e732:	ea 18 88 00 	orh	r8,0x8800
8002e736:	e0 69 e4 3c 	mov	r9,58428
8002e73a:	ea 19 7e 37 	orh	r9,0x7e37
8002e73e:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e742:	e0 a0 0c f7 	rcall	80030130 <__avr32_f64_mul>
8002e746:	e0 68 75 9c 	mov	r8,30108
8002e74a:	ea 18 88 00 	orh	r8,0x8800
8002e74e:	e0 69 e4 3c 	mov	r9,58428
8002e752:	ea 19 7e 37 	orh	r9,0x7e37
8002e756:	c5 59       	rjmp	8002ea00 <__ieee754_pow+0xa80>
8002e758:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002e75c:	e0 6e cb ff 	mov	lr,52223
8002e760:	ea 1e 40 90 	orh	lr,0x4090
8002e764:	1c 3c       	cp.w	r12,lr
8002e766:	e0 8a 00 27 	brle	8002e7b4 <__ieee754_pow+0x834>
8002e76a:	e0 6c 34 00 	mov	r12,13312
8002e76e:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002e772:	18 08       	add	r8,r12
8002e774:	14 48       	or	r8,r10
8002e776:	c0 a1       	brne	8002e78a <__ieee754_pow+0x80a>
8002e778:	08 98       	mov	r8,r4
8002e77a:	0a 99       	mov	r9,r5
8002e77c:	e0 a0 0d c6 	rcall	80030308 <__avr32_f64_sub>
8002e780:	00 98       	mov	r8,r0
8002e782:	02 99       	mov	r9,r1
8002e784:	e0 a0 0f b4 	rcall	800306ec <__avr32_f64_cmp_ge>
8002e788:	c1 60       	breq	8002e7b4 <__ieee754_pow+0x834>
8002e78a:	e0 68 f3 59 	mov	r8,62297
8002e78e:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e792:	e0 69 6e 1f 	mov	r9,28191
8002e796:	ea 19 01 a5 	orh	r9,0x1a5
8002e79a:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e79e:	e0 a0 0c c9 	rcall	80030130 <__avr32_f64_mul>
8002e7a2:	e0 68 f3 59 	mov	r8,62297
8002e7a6:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e7aa:	e0 69 6e 1f 	mov	r9,28191
8002e7ae:	ea 19 01 a5 	orh	r9,0x1a5
8002e7b2:	c2 79       	rjmp	8002ea00 <__ieee754_pow+0xa80>
8002e7b4:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002e7b8:	fc 1c 3f e0 	movh	r12,0x3fe0
8002e7bc:	18 38       	cp.w	r8,r12
8002e7be:	e0 89 00 04 	brgt	8002e7c6 <__ieee754_pow+0x846>
8002e7c2:	30 06       	mov	r6,0
8002e7c4:	c2 78       	rjmp	8002e812 <__ieee754_pow+0x892>
8002e7c6:	fc 19 00 10 	movh	r9,0x10
8002e7ca:	b5 48       	asr	r8,0x14
8002e7cc:	f0 c8 03 fe 	sub	r8,r8,1022
8002e7d0:	f2 08 08 48 	asr	r8,r9,r8
8002e7d4:	0e 08       	add	r8,r7
8002e7d6:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002e7da:	b5 a9       	sbr	r9,0x14
8002e7dc:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002e7e0:	30 0a       	mov	r10,0
8002e7e2:	f8 cc 03 ff 	sub	r12,r12,1023
8002e7e6:	f8 06 11 14 	rsub	r6,r12,20
8002e7ea:	f2 06 08 46 	asr	r6,r9,r6
8002e7ee:	ee 79 ff ff 	mov	r9,1048575
8002e7f2:	f2 0c 08 4c 	asr	r12,r9,r12
8002e7f6:	5c dc       	com	r12
8002e7f8:	f9 e8 00 0b 	and	r11,r12,r8
8002e7fc:	58 07       	cp.w	r7,0
8002e7fe:	fb b6 05 00 	rsublt	r6,0
8002e802:	14 98       	mov	r8,r10
8002e804:	16 99       	mov	r9,r11
8002e806:	08 9a       	mov	r10,r4
8002e808:	0a 9b       	mov	r11,r5
8002e80a:	e0 a0 0d 7f 	rcall	80030308 <__avr32_f64_sub>
8002e80e:	fa eb 00 04 	st.d	sp[4],r10
8002e812:	fa e8 00 04 	ld.d	r8,sp[4]
8002e816:	00 9a       	mov	r10,r0
8002e818:	02 9b       	mov	r11,r1
8002e81a:	e0 a0 0e 45 	rcall	800304a4 <__avr32_f64_add>
8002e81e:	30 04       	mov	r4,0
8002e820:	16 95       	mov	r5,r11
8002e822:	30 08       	mov	r8,0
8002e824:	e0 69 2e 43 	mov	r9,11843
8002e828:	ea 19 3f e6 	orh	r9,0x3fe6
8002e82c:	08 9a       	mov	r10,r4
8002e82e:	0a 9b       	mov	r11,r5
8002e830:	e0 a0 0c 80 	rcall	80030130 <__avr32_f64_mul>
8002e834:	fa e8 00 04 	ld.d	r8,sp[4]
8002e838:	fa eb 00 14 	st.d	sp[20],r10
8002e83c:	08 9a       	mov	r10,r4
8002e83e:	0a 9b       	mov	r11,r5
8002e840:	e0 a0 0d 64 	rcall	80030308 <__avr32_f64_sub>
8002e844:	14 98       	mov	r8,r10
8002e846:	16 99       	mov	r9,r11
8002e848:	00 9a       	mov	r10,r0
8002e84a:	02 9b       	mov	r11,r1
8002e84c:	e0 a0 0d 5e 	rcall	80030308 <__avr32_f64_sub>
8002e850:	e0 68 39 ef 	mov	r8,14831
8002e854:	ea 18 fe fa 	orh	r8,0xfefa
8002e858:	e0 69 2e 42 	mov	r9,11842
8002e85c:	ea 19 3f e6 	orh	r9,0x3fe6
8002e860:	e0 a0 0c 68 	rcall	80030130 <__avr32_f64_mul>
8002e864:	e0 68 6c 39 	mov	r8,27705
8002e868:	ea 18 0c a8 	orh	r8,0xca8
8002e86c:	14 92       	mov	r2,r10
8002e86e:	16 93       	mov	r3,r11
8002e870:	08 9a       	mov	r10,r4
8002e872:	0a 9b       	mov	r11,r5
8002e874:	e0 69 5c 61 	mov	r9,23649
8002e878:	ea 19 be 20 	orh	r9,0xbe20
8002e87c:	e0 a0 0c 5a 	rcall	80030130 <__avr32_f64_mul>
8002e880:	14 98       	mov	r8,r10
8002e882:	16 99       	mov	r9,r11
8002e884:	04 9a       	mov	r10,r2
8002e886:	06 9b       	mov	r11,r3
8002e888:	e0 a0 0e 0e 	rcall	800304a4 <__avr32_f64_add>
8002e88c:	16 93       	mov	r3,r11
8002e88e:	14 92       	mov	r2,r10
8002e890:	14 98       	mov	r8,r10
8002e892:	06 99       	mov	r9,r3
8002e894:	fa ea 00 14 	ld.d	r10,sp[20]
8002e898:	e0 a0 0e 06 	rcall	800304a4 <__avr32_f64_add>
8002e89c:	fa e8 00 14 	ld.d	r8,sp[20]
8002e8a0:	14 94       	mov	r4,r10
8002e8a2:	16 95       	mov	r5,r11
8002e8a4:	e0 a0 0d 32 	rcall	80030308 <__avr32_f64_sub>
8002e8a8:	14 98       	mov	r8,r10
8002e8aa:	16 99       	mov	r9,r11
8002e8ac:	04 9a       	mov	r10,r2
8002e8ae:	06 9b       	mov	r11,r3
8002e8b0:	e0 a0 0d 2c 	rcall	80030308 <__avr32_f64_sub>
8002e8b4:	08 98       	mov	r8,r4
8002e8b6:	fa eb 00 04 	st.d	sp[4],r10
8002e8ba:	0a 99       	mov	r9,r5
8002e8bc:	08 9a       	mov	r10,r4
8002e8be:	0a 9b       	mov	r11,r5
8002e8c0:	e0 a0 0c 38 	rcall	80030130 <__avr32_f64_mul>
8002e8c4:	e0 68 a4 d0 	mov	r8,42192
8002e8c8:	ea 18 72 be 	orh	r8,0x72be
8002e8cc:	14 92       	mov	r2,r10
8002e8ce:	16 93       	mov	r3,r11
8002e8d0:	e0 69 37 69 	mov	r9,14185
8002e8d4:	ea 19 3e 66 	orh	r9,0x3e66
8002e8d8:	e0 a0 0c 2c 	rcall	80030130 <__avr32_f64_mul>
8002e8dc:	e0 68 6b f1 	mov	r8,27633
8002e8e0:	ea 18 c5 d2 	orh	r8,0xc5d2
8002e8e4:	e0 69 bd 41 	mov	r9,48449
8002e8e8:	ea 19 3e bb 	orh	r9,0x3ebb
8002e8ec:	e0 a0 0d 0e 	rcall	80030308 <__avr32_f64_sub>
8002e8f0:	14 98       	mov	r8,r10
8002e8f2:	16 99       	mov	r9,r11
8002e8f4:	04 9a       	mov	r10,r2
8002e8f6:	06 9b       	mov	r11,r3
8002e8f8:	e0 a0 0c 1c 	rcall	80030130 <__avr32_f64_mul>
8002e8fc:	e0 68 de 2c 	mov	r8,56876
8002e900:	ea 18 af 25 	orh	r8,0xaf25
8002e904:	e0 69 56 6a 	mov	r9,22122
8002e908:	ea 19 3f 11 	orh	r9,0x3f11
8002e90c:	e0 a0 0d cc 	rcall	800304a4 <__avr32_f64_add>
8002e910:	14 98       	mov	r8,r10
8002e912:	16 99       	mov	r9,r11
8002e914:	04 9a       	mov	r10,r2
8002e916:	06 9b       	mov	r11,r3
8002e918:	e0 a0 0c 0c 	rcall	80030130 <__avr32_f64_mul>
8002e91c:	e0 68 bd 93 	mov	r8,48531
8002e920:	ea 18 16 be 	orh	r8,0x16be
8002e924:	e0 69 c1 6c 	mov	r9,49516
8002e928:	ea 19 3f 66 	orh	r9,0x3f66
8002e92c:	e0 a0 0c ee 	rcall	80030308 <__avr32_f64_sub>
8002e930:	14 98       	mov	r8,r10
8002e932:	16 99       	mov	r9,r11
8002e934:	04 9a       	mov	r10,r2
8002e936:	06 9b       	mov	r11,r3
8002e938:	e0 a0 0b fc 	rcall	80030130 <__avr32_f64_mul>
8002e93c:	e0 68 55 3e 	mov	r8,21822
8002e940:	ea 18 55 55 	orh	r8,0x5555
8002e944:	e0 69 55 55 	mov	r9,21845
8002e948:	ea 19 3f c5 	orh	r9,0x3fc5
8002e94c:	e0 a0 0d ac 	rcall	800304a4 <__avr32_f64_add>
8002e950:	14 98       	mov	r8,r10
8002e952:	16 99       	mov	r9,r11
8002e954:	04 9a       	mov	r10,r2
8002e956:	06 9b       	mov	r11,r3
8002e958:	e0 a0 0b ec 	rcall	80030130 <__avr32_f64_mul>
8002e95c:	14 98       	mov	r8,r10
8002e95e:	16 99       	mov	r9,r11
8002e960:	08 9a       	mov	r10,r4
8002e962:	0a 9b       	mov	r11,r5
8002e964:	e0 a0 0c d2 	rcall	80030308 <__avr32_f64_sub>
8002e968:	16 93       	mov	r3,r11
8002e96a:	14 92       	mov	r2,r10
8002e96c:	14 98       	mov	r8,r10
8002e96e:	06 99       	mov	r9,r3
8002e970:	08 9a       	mov	r10,r4
8002e972:	0a 9b       	mov	r11,r5
8002e974:	e0 a0 0b de 	rcall	80030130 <__avr32_f64_mul>
8002e978:	30 08       	mov	r8,0
8002e97a:	14 90       	mov	r0,r10
8002e97c:	16 91       	mov	r1,r11
8002e97e:	04 9a       	mov	r10,r2
8002e980:	06 9b       	mov	r11,r3
8002e982:	fc 19 40 00 	movh	r9,0x4000
8002e986:	e0 a0 0c c1 	rcall	80030308 <__avr32_f64_sub>
8002e98a:	14 98       	mov	r8,r10
8002e98c:	16 99       	mov	r9,r11
8002e98e:	00 9a       	mov	r10,r0
8002e990:	02 9b       	mov	r11,r1
8002e992:	e0 a0 0f 15 	rcall	800307bc <__avr32_f64_div>
8002e996:	fa e8 00 04 	ld.d	r8,sp[4]
8002e99a:	14 92       	mov	r2,r10
8002e99c:	16 93       	mov	r3,r11
8002e99e:	08 9a       	mov	r10,r4
8002e9a0:	0a 9b       	mov	r11,r5
8002e9a2:	e0 a0 0b c7 	rcall	80030130 <__avr32_f64_mul>
8002e9a6:	14 98       	mov	r8,r10
8002e9a8:	16 99       	mov	r9,r11
8002e9aa:	fa ea 00 04 	ld.d	r10,sp[4]
8002e9ae:	e0 a0 0d 7b 	rcall	800304a4 <__avr32_f64_add>
8002e9b2:	14 98       	mov	r8,r10
8002e9b4:	16 99       	mov	r9,r11
8002e9b6:	04 9a       	mov	r10,r2
8002e9b8:	06 9b       	mov	r11,r3
8002e9ba:	e0 a0 0c a7 	rcall	80030308 <__avr32_f64_sub>
8002e9be:	08 98       	mov	r8,r4
8002e9c0:	0a 99       	mov	r9,r5
8002e9c2:	e0 a0 0c a3 	rcall	80030308 <__avr32_f64_sub>
8002e9c6:	14 98       	mov	r8,r10
8002e9c8:	16 99       	mov	r9,r11
8002e9ca:	30 0a       	mov	r10,0
8002e9cc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e9d0:	e0 a0 0c 9c 	rcall	80030308 <__avr32_f64_sub>
8002e9d4:	ec 0c 15 14 	lsl	r12,r6,0x14
8002e9d8:	16 95       	mov	r5,r11
8002e9da:	14 94       	mov	r4,r10
8002e9dc:	f8 05 00 08 	add	r8,r12,r5
8002e9e0:	f0 09 14 14 	asr	r9,r8,0x14
8002e9e4:	58 09       	cp.w	r9,0
8002e9e6:	e0 89 00 08 	brgt	8002e9f6 <__ieee754_pow+0xa76>
8002e9ea:	0c 9c       	mov	r12,r6
8002e9ec:	e0 a0 0b 28 	rcall	8003003c <scalbn>
8002e9f0:	14 98       	mov	r8,r10
8002e9f2:	16 99       	mov	r9,r11
8002e9f4:	c0 48       	rjmp	8002e9fc <__ieee754_pow+0xa7c>
8002e9f6:	10 95       	mov	r5,r8
8002e9f8:	14 98       	mov	r8,r10
8002e9fa:	0a 99       	mov	r9,r5
8002e9fc:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ea00:	e0 a0 0b 98 	rcall	80030130 <__avr32_f64_mul>
8002ea04:	16 97       	mov	r7,r11
8002ea06:	14 96       	mov	r6,r10
8002ea08:	c0 78       	rjmp	8002ea16 <__ieee754_pow+0xa96>
8002ea0a:	fc 17 3f f0 	movh	r7,0x3ff0
8002ea0e:	30 06       	mov	r6,0
8002ea10:	c0 38       	rjmp	8002ea16 <__ieee754_pow+0xa96>
8002ea12:	30 07       	mov	r7,0
8002ea14:	0e 96       	mov	r6,r7
8002ea16:	0e 9b       	mov	r11,r7
8002ea18:	0c 9a       	mov	r10,r6
8002ea1a:	2f 2d       	sub	sp,-56
8002ea1c:	d8 32       	popm	r0-r7,pc
8002ea1e:	30 05       	mov	r5,0
8002ea20:	fe 9f fb 2b 	bral	8002e076 <__ieee754_pow+0xf6>

8002ea24 <__ieee754_rem_pio2>:
8002ea24:	d4 31       	pushm	r0-r7,lr
8002ea26:	20 ad       	sub	sp,40
8002ea28:	50 3b       	stdsp	sp[0xc],r11
8002ea2a:	18 96       	mov	r6,r12
8002ea2c:	14 98       	mov	r8,r10
8002ea2e:	16 99       	mov	r9,r11
8002ea30:	14 92       	mov	r2,r10
8002ea32:	16 93       	mov	r3,r11
8002ea34:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002ea38:	e0 6c 21 fb 	mov	r12,8699
8002ea3c:	ea 1c 3f e9 	orh	r12,0x3fe9
8002ea40:	18 35       	cp.w	r5,r12
8002ea42:	e0 89 00 0b 	brgt	8002ea58 <__ieee754_rem_pio2+0x34>
8002ea46:	ec e9 00 00 	st.d	r6[0],r8
8002ea4a:	30 07       	mov	r7,0
8002ea4c:	30 08       	mov	r8,0
8002ea4e:	30 09       	mov	r9,0
8002ea50:	ec e9 00 08 	st.d	r6[8],r8
8002ea54:	e0 8f 02 1a 	bral	8002ee88 <__ieee754_rem_pio2+0x464>
8002ea58:	e0 6c d9 7b 	mov	r12,55675
8002ea5c:	ea 1c 40 02 	orh	r12,0x4002
8002ea60:	18 35       	cp.w	r5,r12
8002ea62:	e0 89 00 b6 	brgt	8002ebce <__ieee754_rem_pio2+0x1aa>
8002ea66:	58 0b       	cp.w	r11,0
8002ea68:	e0 8a 00 59 	brle	8002eb1a <__ieee754_rem_pio2+0xf6>
8002ea6c:	fc 18 54 40 	movh	r8,0x5440
8002ea70:	e0 69 21 fb 	mov	r9,8699
8002ea74:	ea 19 3f f9 	orh	r9,0x3ff9
8002ea78:	e0 a0 0c 48 	rcall	80030308 <__avr32_f64_sub>
8002ea7c:	e0 68 21 fb 	mov	r8,8699
8002ea80:	ea 18 3f f9 	orh	r8,0x3ff9
8002ea84:	14 92       	mov	r2,r10
8002ea86:	16 93       	mov	r3,r11
8002ea88:	10 35       	cp.w	r5,r8
8002ea8a:	c1 e0       	breq	8002eac6 <__ieee754_rem_pio2+0xa2>
8002ea8c:	e0 68 63 31 	mov	r8,25393
8002ea90:	ea 18 1a 62 	orh	r8,0x1a62
8002ea94:	e0 69 b4 61 	mov	r9,46177
8002ea98:	ea 19 3d d0 	orh	r9,0x3dd0
8002ea9c:	e0 a0 0c 36 	rcall	80030308 <__avr32_f64_sub>
8002eaa0:	14 94       	mov	r4,r10
8002eaa2:	16 95       	mov	r5,r11
8002eaa4:	08 98       	mov	r8,r4
8002eaa6:	0a 99       	mov	r9,r5
8002eaa8:	04 9a       	mov	r10,r2
8002eaaa:	06 9b       	mov	r11,r3
8002eaac:	ec e5 00 00 	st.d	r6[0],r4
8002eab0:	e0 a0 0c 2c 	rcall	80030308 <__avr32_f64_sub>
8002eab4:	e0 68 63 31 	mov	r8,25393
8002eab8:	ea 18 1a 62 	orh	r8,0x1a62
8002eabc:	e0 69 b4 61 	mov	r9,46177
8002eac0:	ea 19 3d d0 	orh	r9,0x3dd0
8002eac4:	c2 78       	rjmp	8002eb12 <__ieee754_rem_pio2+0xee>
8002eac6:	fc 18 1a 60 	movh	r8,0x1a60
8002eaca:	e0 69 b4 61 	mov	r9,46177
8002eace:	ea 19 3d d0 	orh	r9,0x3dd0
8002ead2:	e0 a0 0c 1b 	rcall	80030308 <__avr32_f64_sub>
8002ead6:	e0 68 70 73 	mov	r8,28787
8002eada:	ea 18 2e 03 	orh	r8,0x2e03
8002eade:	14 94       	mov	r4,r10
8002eae0:	16 95       	mov	r5,r11
8002eae2:	e0 69 19 8a 	mov	r9,6538
8002eae6:	ea 19 3b a3 	orh	r9,0x3ba3
8002eaea:	e0 a0 0c 0f 	rcall	80030308 <__avr32_f64_sub>
8002eaee:	14 92       	mov	r2,r10
8002eaf0:	16 93       	mov	r3,r11
8002eaf2:	04 98       	mov	r8,r2
8002eaf4:	06 99       	mov	r9,r3
8002eaf6:	08 9a       	mov	r10,r4
8002eaf8:	0a 9b       	mov	r11,r5
8002eafa:	ec e3 00 00 	st.d	r6[0],r2
8002eafe:	e0 a0 0c 05 	rcall	80030308 <__avr32_f64_sub>
8002eb02:	e0 68 70 73 	mov	r8,28787
8002eb06:	ea 18 2e 03 	orh	r8,0x2e03
8002eb0a:	e0 69 19 8a 	mov	r9,6538
8002eb0e:	ea 19 3b a3 	orh	r9,0x3ba3
8002eb12:	30 17       	mov	r7,1
8002eb14:	e0 a0 0b fa 	rcall	80030308 <__avr32_f64_sub>
8002eb18:	c3 08       	rjmp	8002eb78 <__ieee754_rem_pio2+0x154>
8002eb1a:	fc 18 54 40 	movh	r8,0x5440
8002eb1e:	e0 69 21 fb 	mov	r9,8699
8002eb22:	ea 19 3f f9 	orh	r9,0x3ff9
8002eb26:	e0 a0 0c bf 	rcall	800304a4 <__avr32_f64_add>
8002eb2a:	e0 6c 21 fb 	mov	r12,8699
8002eb2e:	ea 1c 3f f9 	orh	r12,0x3ff9
8002eb32:	14 92       	mov	r2,r10
8002eb34:	16 93       	mov	r3,r11
8002eb36:	18 35       	cp.w	r5,r12
8002eb38:	c2 40       	breq	8002eb80 <__ieee754_rem_pio2+0x15c>
8002eb3a:	e0 68 63 31 	mov	r8,25393
8002eb3e:	ea 18 1a 62 	orh	r8,0x1a62
8002eb42:	e0 69 b4 61 	mov	r9,46177
8002eb46:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb4a:	e0 a0 0c ad 	rcall	800304a4 <__avr32_f64_add>
8002eb4e:	14 94       	mov	r4,r10
8002eb50:	16 95       	mov	r5,r11
8002eb52:	08 98       	mov	r8,r4
8002eb54:	0a 99       	mov	r9,r5
8002eb56:	04 9a       	mov	r10,r2
8002eb58:	06 9b       	mov	r11,r3
8002eb5a:	ec e5 00 00 	st.d	r6[0],r4
8002eb5e:	e0 a0 0b d5 	rcall	80030308 <__avr32_f64_sub>
8002eb62:	e0 68 63 31 	mov	r8,25393
8002eb66:	ea 18 1a 62 	orh	r8,0x1a62
8002eb6a:	e0 69 b4 61 	mov	r9,46177
8002eb6e:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb72:	3f f7       	mov	r7,-1
8002eb74:	e0 a0 0c 98 	rcall	800304a4 <__avr32_f64_add>
8002eb78:	ec eb 00 08 	st.d	r6[8],r10
8002eb7c:	e0 8f 01 86 	bral	8002ee88 <__ieee754_rem_pio2+0x464>
8002eb80:	fc 18 1a 60 	movh	r8,0x1a60
8002eb84:	e0 69 b4 61 	mov	r9,46177
8002eb88:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb8c:	e0 a0 0c 8c 	rcall	800304a4 <__avr32_f64_add>
8002eb90:	e0 68 70 73 	mov	r8,28787
8002eb94:	ea 18 2e 03 	orh	r8,0x2e03
8002eb98:	14 94       	mov	r4,r10
8002eb9a:	16 95       	mov	r5,r11
8002eb9c:	e0 69 19 8a 	mov	r9,6538
8002eba0:	ea 19 3b a3 	orh	r9,0x3ba3
8002eba4:	e0 a0 0c 80 	rcall	800304a4 <__avr32_f64_add>
8002eba8:	14 92       	mov	r2,r10
8002ebaa:	16 93       	mov	r3,r11
8002ebac:	04 98       	mov	r8,r2
8002ebae:	06 99       	mov	r9,r3
8002ebb0:	08 9a       	mov	r10,r4
8002ebb2:	0a 9b       	mov	r11,r5
8002ebb4:	ec e3 00 00 	st.d	r6[0],r2
8002ebb8:	e0 a0 0b a8 	rcall	80030308 <__avr32_f64_sub>
8002ebbc:	e0 68 70 73 	mov	r8,28787
8002ebc0:	ea 18 2e 03 	orh	r8,0x2e03
8002ebc4:	e0 69 19 8a 	mov	r9,6538
8002ebc8:	ea 19 3b a3 	orh	r9,0x3ba3
8002ebcc:	cd 3b       	rjmp	8002eb72 <__ieee754_rem_pio2+0x14e>
8002ebce:	e0 6c 21 fb 	mov	r12,8699
8002ebd2:	ea 1c 41 39 	orh	r12,0x4139
8002ebd6:	18 35       	cp.w	r5,r12
8002ebd8:	e0 89 00 f4 	brgt	8002edc0 <__ieee754_rem_pio2+0x39c>
8002ebdc:	e0 a0 08 f4 	rcall	8002fdc4 <fabs>
8002ebe0:	e0 68 c8 83 	mov	r8,51331
8002ebe4:	ea 18 6d c9 	orh	r8,0x6dc9
8002ebe8:	14 92       	mov	r2,r10
8002ebea:	16 93       	mov	r3,r11
8002ebec:	e0 69 5f 30 	mov	r9,24368
8002ebf0:	ea 19 3f e4 	orh	r9,0x3fe4
8002ebf4:	e0 a0 0a 9e 	rcall	80030130 <__avr32_f64_mul>
8002ebf8:	30 08       	mov	r8,0
8002ebfa:	fc 19 3f e0 	movh	r9,0x3fe0
8002ebfe:	e0 a0 0c 53 	rcall	800304a4 <__avr32_f64_add>
8002ec02:	e0 a0 0c db 	rcall	800305b8 <__avr32_f64_to_s32>
8002ec06:	18 97       	mov	r7,r12
8002ec08:	e0 a0 0c ef 	rcall	800305e6 <__avr32_s32_to_f64>
8002ec0c:	fc 18 54 40 	movh	r8,0x5440
8002ec10:	e0 69 21 fb 	mov	r9,8699
8002ec14:	ea 19 bf f9 	orh	r9,0xbff9
8002ec18:	fa eb 00 04 	st.d	sp[4],r10
8002ec1c:	e0 a0 0a 8a 	rcall	80030130 <__avr32_f64_mul>
8002ec20:	14 98       	mov	r8,r10
8002ec22:	16 99       	mov	r9,r11
8002ec24:	04 9a       	mov	r10,r2
8002ec26:	06 9b       	mov	r11,r3
8002ec28:	e0 a0 0c 3e 	rcall	800304a4 <__avr32_f64_add>
8002ec2c:	e0 68 63 31 	mov	r8,25393
8002ec30:	ea 18 1a 62 	orh	r8,0x1a62
8002ec34:	14 92       	mov	r2,r10
8002ec36:	16 93       	mov	r3,r11
8002ec38:	e0 69 b4 61 	mov	r9,46177
8002ec3c:	ea 19 3d d0 	orh	r9,0x3dd0
8002ec40:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec44:	e0 a0 0a 76 	rcall	80030130 <__avr32_f64_mul>
8002ec48:	14 90       	mov	r0,r10
8002ec4a:	16 91       	mov	r1,r11
8002ec4c:	59 f7       	cp.w	r7,31
8002ec4e:	e0 89 00 0a 	brgt	8002ec62 <__ieee754_rem_pio2+0x23e>
8002ec52:	ee c9 00 01 	sub	r9,r7,1
8002ec56:	4d a8       	lddpc	r8,8002edbc <__ieee754_rem_pio2+0x398>
8002ec58:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002ec5c:	10 35       	cp.w	r5,r8
8002ec5e:	e0 81 00 8b 	brne	8002ed74 <__ieee754_rem_pio2+0x350>
8002ec62:	00 98       	mov	r8,r0
8002ec64:	02 99       	mov	r9,r1
8002ec66:	04 9a       	mov	r10,r2
8002ec68:	06 9b       	mov	r11,r3
8002ec6a:	e0 a0 0b 4f 	rcall	80030308 <__avr32_f64_sub>
8002ec6e:	ec eb 00 00 	st.d	r6[0],r10
8002ec72:	ea 0c 14 14 	asr	r12,r5,0x14
8002ec76:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002ec7a:	f8 0b 01 0b 	sub	r11,r12,r11
8002ec7e:	59 0b       	cp.w	r11,16
8002ec80:	e0 8a 00 82 	brle	8002ed84 <__ieee754_rem_pio2+0x360>
8002ec84:	50 0c       	stdsp	sp[0x0],r12
8002ec86:	fc 18 1a 60 	movh	r8,0x1a60
8002ec8a:	e0 69 b4 61 	mov	r9,46177
8002ec8e:	ea 19 3d d0 	orh	r9,0x3dd0
8002ec92:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec96:	e0 a0 0a 4d 	rcall	80030130 <__avr32_f64_mul>
8002ec9a:	16 91       	mov	r1,r11
8002ec9c:	14 90       	mov	r0,r10
8002ec9e:	14 98       	mov	r8,r10
8002eca0:	02 99       	mov	r9,r1
8002eca2:	04 9a       	mov	r10,r2
8002eca4:	06 9b       	mov	r11,r3
8002eca6:	e0 a0 0b 31 	rcall	80030308 <__avr32_f64_sub>
8002ecaa:	16 95       	mov	r5,r11
8002ecac:	14 98       	mov	r8,r10
8002ecae:	14 94       	mov	r4,r10
8002ecb0:	0a 99       	mov	r9,r5
8002ecb2:	04 9a       	mov	r10,r2
8002ecb4:	06 9b       	mov	r11,r3
8002ecb6:	e0 a0 0b 29 	rcall	80030308 <__avr32_f64_sub>
8002ecba:	00 98       	mov	r8,r0
8002ecbc:	02 99       	mov	r9,r1
8002ecbe:	e0 a0 0b 25 	rcall	80030308 <__avr32_f64_sub>
8002ecc2:	e0 68 70 73 	mov	r8,28787
8002ecc6:	ea 18 2e 03 	orh	r8,0x2e03
8002ecca:	14 92       	mov	r2,r10
8002eccc:	16 93       	mov	r3,r11
8002ecce:	e0 69 19 8a 	mov	r9,6538
8002ecd2:	ea 19 3b a3 	orh	r9,0x3ba3
8002ecd6:	fa ea 00 04 	ld.d	r10,sp[4]
8002ecda:	e0 a0 0a 2b 	rcall	80030130 <__avr32_f64_mul>
8002ecde:	04 98       	mov	r8,r2
8002ece0:	06 99       	mov	r9,r3
8002ece2:	e0 a0 0b 13 	rcall	80030308 <__avr32_f64_sub>
8002ece6:	16 91       	mov	r1,r11
8002ece8:	14 98       	mov	r8,r10
8002ecea:	14 90       	mov	r0,r10
8002ecec:	02 99       	mov	r9,r1
8002ecee:	08 9a       	mov	r10,r4
8002ecf0:	0a 9b       	mov	r11,r5
8002ecf2:	e0 a0 0b 0b 	rcall	80030308 <__avr32_f64_sub>
8002ecf6:	ec eb 00 00 	st.d	r6[0],r10
8002ecfa:	40 0c       	lddsp	r12,sp[0x0]
8002ecfc:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002ed00:	16 1c       	sub	r12,r11
8002ed02:	e0 4c 00 31 	cp.w	r12,49
8002ed06:	e0 89 00 05 	brgt	8002ed10 <__ieee754_rem_pio2+0x2ec>
8002ed0a:	08 92       	mov	r2,r4
8002ed0c:	0a 93       	mov	r3,r5
8002ed0e:	c3 b8       	rjmp	8002ed84 <__ieee754_rem_pio2+0x360>
8002ed10:	fc 18 2e 00 	movh	r8,0x2e00
8002ed14:	e0 69 19 8a 	mov	r9,6538
8002ed18:	ea 19 3b a3 	orh	r9,0x3ba3
8002ed1c:	fa ea 00 04 	ld.d	r10,sp[4]
8002ed20:	e0 a0 0a 08 	rcall	80030130 <__avr32_f64_mul>
8002ed24:	16 91       	mov	r1,r11
8002ed26:	14 90       	mov	r0,r10
8002ed28:	14 98       	mov	r8,r10
8002ed2a:	02 99       	mov	r9,r1
8002ed2c:	08 9a       	mov	r10,r4
8002ed2e:	0a 9b       	mov	r11,r5
8002ed30:	e0 a0 0a ec 	rcall	80030308 <__avr32_f64_sub>
8002ed34:	14 98       	mov	r8,r10
8002ed36:	16 93       	mov	r3,r11
8002ed38:	14 92       	mov	r2,r10
8002ed3a:	06 99       	mov	r9,r3
8002ed3c:	08 9a       	mov	r10,r4
8002ed3e:	0a 9b       	mov	r11,r5
8002ed40:	e0 a0 0a e4 	rcall	80030308 <__avr32_f64_sub>
8002ed44:	00 98       	mov	r8,r0
8002ed46:	02 99       	mov	r9,r1
8002ed48:	e0 a0 0a e0 	rcall	80030308 <__avr32_f64_sub>
8002ed4c:	e0 68 49 c1 	mov	r8,18881
8002ed50:	ea 18 25 20 	orh	r8,0x2520
8002ed54:	14 94       	mov	r4,r10
8002ed56:	16 95       	mov	r5,r11
8002ed58:	e0 69 83 9a 	mov	r9,33690
8002ed5c:	ea 19 39 7b 	orh	r9,0x397b
8002ed60:	fa ea 00 04 	ld.d	r10,sp[4]
8002ed64:	e0 a0 09 e6 	rcall	80030130 <__avr32_f64_mul>
8002ed68:	08 98       	mov	r8,r4
8002ed6a:	0a 99       	mov	r9,r5
8002ed6c:	e0 a0 0a ce 	rcall	80030308 <__avr32_f64_sub>
8002ed70:	14 90       	mov	r0,r10
8002ed72:	16 91       	mov	r1,r11
8002ed74:	00 98       	mov	r8,r0
8002ed76:	02 99       	mov	r9,r1
8002ed78:	04 9a       	mov	r10,r2
8002ed7a:	06 9b       	mov	r11,r3
8002ed7c:	e0 a0 0a c6 	rcall	80030308 <__avr32_f64_sub>
8002ed80:	ec eb 00 00 	st.d	r6[0],r10
8002ed84:	ec e8 00 00 	ld.d	r8,r6[0]
8002ed88:	04 9a       	mov	r10,r2
8002ed8a:	06 9b       	mov	r11,r3
8002ed8c:	e0 a0 0a be 	rcall	80030308 <__avr32_f64_sub>
8002ed90:	00 98       	mov	r8,r0
8002ed92:	ec c5 ff f8 	sub	r5,r6,-8
8002ed96:	02 99       	mov	r9,r1
8002ed98:	e0 a0 0a b8 	rcall	80030308 <__avr32_f64_sub>
8002ed9c:	ea eb 00 00 	st.d	r5[0],r10
8002eda0:	40 38       	lddsp	r8,sp[0xc]
8002eda2:	58 08       	cp.w	r8,0
8002eda4:	c7 24       	brge	8002ee88 <__ieee754_rem_pio2+0x464>
8002eda6:	6c 08       	ld.w	r8,r6[0x0]
8002eda8:	ee 18 80 00 	eorh	r8,0x8000
8002edac:	8d 08       	st.w	r6[0x0],r8
8002edae:	5c 37       	neg	r7
8002edb0:	6a 08       	ld.w	r8,r5[0x0]
8002edb2:	ee 18 80 00 	eorh	r8,0x8000
8002edb6:	8b 08       	st.w	r5[0x0],r8
8002edb8:	c6 88       	rjmp	8002ee88 <__ieee754_rem_pio2+0x464>
8002edba:	d7 03       	nop
8002edbc:	80 03       	ld.sh	r3,r0[0x0]
8002edbe:	17 b8       	ld.ub	r8,r11[0x3]
8002edc0:	e0 6c ff ff 	mov	r12,65535
8002edc4:	ea 1c 7f ef 	orh	r12,0x7fef
8002edc8:	18 35       	cp.w	r5,r12
8002edca:	e0 8a 00 08 	brle	8002edda <__ieee754_rem_pio2+0x3b6>
8002edce:	30 07       	mov	r7,0
8002edd0:	e0 a0 0a 9c 	rcall	80030308 <__avr32_f64_sub>
8002edd4:	ec eb 00 00 	st.d	r6[0],r10
8002edd8:	cd 0a       	rjmp	8002eb78 <__ieee754_rem_pio2+0x154>
8002edda:	ea 03 14 14 	asr	r3,r5,0x14
8002edde:	e6 c3 04 16 	sub	r3,r3,1046
8002ede2:	e6 08 15 14 	lsl	r8,r3,0x14
8002ede6:	ea 08 01 01 	sub	r1,r5,r8
8002edea:	02 9b       	mov	r11,r1
8002edec:	e0 a0 0b e6 	rcall	800305b8 <__avr32_f64_to_s32>
8002edf0:	e0 a0 0b fb 	rcall	800305e6 <__avr32_s32_to_f64>
8002edf4:	14 94       	mov	r4,r10
8002edf6:	16 95       	mov	r5,r11
8002edf8:	08 98       	mov	r8,r4
8002edfa:	0a 99       	mov	r9,r5
8002edfc:	fa e5 00 10 	st.d	sp[16],r4
8002ee00:	02 9b       	mov	r11,r1
8002ee02:	04 9a       	mov	r10,r2
8002ee04:	e0 a0 0a 82 	rcall	80030308 <__avr32_f64_sub>
8002ee08:	30 08       	mov	r8,0
8002ee0a:	fc 19 41 70 	movh	r9,0x4170
8002ee0e:	e0 a0 09 91 	rcall	80030130 <__avr32_f64_mul>
8002ee12:	14 90       	mov	r0,r10
8002ee14:	16 91       	mov	r1,r11
8002ee16:	e0 a0 0b d1 	rcall	800305b8 <__avr32_f64_to_s32>
8002ee1a:	e0 a0 0b e6 	rcall	800305e6 <__avr32_s32_to_f64>
8002ee1e:	16 95       	mov	r5,r11
8002ee20:	14 94       	mov	r4,r10
8002ee22:	0a 99       	mov	r9,r5
8002ee24:	08 98       	mov	r8,r4
8002ee26:	fa e5 00 18 	st.d	sp[24],r4
8002ee2a:	00 9a       	mov	r10,r0
8002ee2c:	02 9b       	mov	r11,r1
8002ee2e:	e0 a0 0a 6d 	rcall	80030308 <__avr32_f64_sub>
8002ee32:	30 08       	mov	r8,0
8002ee34:	fc 19 41 70 	movh	r9,0x4170
8002ee38:	30 35       	mov	r5,3
8002ee3a:	e0 a0 09 7b 	rcall	80030130 <__avr32_f64_mul>
8002ee3e:	fa c7 ff d8 	sub	r7,sp,-40
8002ee42:	af 2b       	st.d	--r7,r10
8002ee44:	ee ea 00 00 	ld.d	r10,r7[0]
8002ee48:	0a 91       	mov	r1,r5
8002ee4a:	20 87       	sub	r7,8
8002ee4c:	20 15       	sub	r5,1
8002ee4e:	30 08       	mov	r8,0
8002ee50:	30 09       	mov	r9,0
8002ee52:	e0 a0 0c 3a 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002ee56:	cf 71       	brne	8002ee44 <__ieee754_rem_pio2+0x420>
8002ee58:	48 e8       	lddpc	r8,8002ee90 <__ieee754_rem_pio2+0x46c>
8002ee5a:	02 99       	mov	r9,r1
8002ee5c:	1a d8       	st.w	--sp,r8
8002ee5e:	06 9a       	mov	r10,r3
8002ee60:	30 28       	mov	r8,2
8002ee62:	fa cc ff ec 	sub	r12,sp,-20
8002ee66:	0c 9b       	mov	r11,r6
8002ee68:	cd 0d       	rcall	8002f208 <__kernel_rem_pio2>
8002ee6a:	2f fd       	sub	sp,-4
8002ee6c:	18 97       	mov	r7,r12
8002ee6e:	40 38       	lddsp	r8,sp[0xc]
8002ee70:	58 08       	cp.w	r8,0
8002ee72:	c0 b4       	brge	8002ee88 <__ieee754_rem_pio2+0x464>
8002ee74:	6c 08       	ld.w	r8,r6[0x0]
8002ee76:	ee 18 80 00 	eorh	r8,0x8000
8002ee7a:	8d 08       	st.w	r6[0x0],r8
8002ee7c:	5c 37       	neg	r7
8002ee7e:	2f 86       	sub	r6,-8
8002ee80:	6c 08       	ld.w	r8,r6[0x0]
8002ee82:	ee 18 80 00 	eorh	r8,0x8000
8002ee86:	8d 08       	st.w	r6[0x0],r8
8002ee88:	0e 9c       	mov	r12,r7
8002ee8a:	2f 6d       	sub	sp,-40
8002ee8c:	d8 32       	popm	r0-r7,pc
8002ee8e:	d7 03       	nop
8002ee90:	80 03       	ld.sh	r3,r0[0x0]
8002ee92:	18 38       	cp.w	r8,r12

8002ee94 <__ieee754_sqrt>:
8002ee94:	d4 31       	pushm	r0-r7,lr
8002ee96:	fc 1e 7f f0 	movh	lr,0x7ff0
8002ee9a:	16 9c       	mov	r12,r11
8002ee9c:	14 96       	mov	r6,r10
8002ee9e:	16 97       	mov	r7,r11
8002eea0:	14 94       	mov	r4,r10
8002eea2:	16 95       	mov	r5,r11
8002eea4:	16 99       	mov	r9,r11
8002eea6:	14 98       	mov	r8,r10
8002eea8:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002eeac:	1c 3c       	cp.w	r12,lr
8002eeae:	c0 c1       	brne	8002eec6 <__ieee754_sqrt+0x32>
8002eeb0:	14 98       	mov	r8,r10
8002eeb2:	16 99       	mov	r9,r11
8002eeb4:	e0 a0 09 3e 	rcall	80030130 <__avr32_f64_mul>
8002eeb8:	14 98       	mov	r8,r10
8002eeba:	16 99       	mov	r9,r11
8002eebc:	0c 9a       	mov	r10,r6
8002eebe:	0e 9b       	mov	r11,r7
8002eec0:	e0 a0 0a f2 	rcall	800304a4 <__avr32_f64_add>
8002eec4:	c1 38       	rjmp	8002eeea <__ieee754_sqrt+0x56>
8002eec6:	58 0b       	cp.w	r11,0
8002eec8:	e0 89 00 14 	brgt	8002eef0 <__ieee754_sqrt+0x5c>
8002eecc:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002eed0:	14 4c       	or	r12,r10
8002eed2:	e0 80 00 a3 	breq	8002f018 <__ieee754_sqrt+0x184>
8002eed6:	58 0b       	cp.w	r11,0
8002eed8:	c0 c0       	breq	8002eef0 <__ieee754_sqrt+0x5c>
8002eeda:	14 98       	mov	r8,r10
8002eedc:	16 99       	mov	r9,r11
8002eede:	e0 a0 0a 15 	rcall	80030308 <__avr32_f64_sub>
8002eee2:	14 98       	mov	r8,r10
8002eee4:	16 99       	mov	r9,r11
8002eee6:	e0 a0 0c 6b 	rcall	800307bc <__avr32_f64_div>
8002eeea:	14 96       	mov	r6,r10
8002eeec:	16 97       	mov	r7,r11
8002eeee:	c9 58       	rjmp	8002f018 <__ieee754_sqrt+0x184>
8002eef0:	f2 0a 14 14 	asr	r10,r9,0x14
8002eef4:	c0 60       	breq	8002ef00 <__ieee754_sqrt+0x6c>
8002eef6:	c1 88       	rjmp	8002ef26 <__ieee754_sqrt+0x92>
8002eef8:	f0 09 16 0b 	lsr	r9,r8,0xb
8002eefc:	21 5a       	sub	r10,21
8002eefe:	b5 78       	lsl	r8,0x15
8002ef00:	58 09       	cp.w	r9,0
8002ef02:	cf b0       	breq	8002eef8 <__ieee754_sqrt+0x64>
8002ef04:	30 0b       	mov	r11,0
8002ef06:	c0 38       	rjmp	8002ef0c <__ieee754_sqrt+0x78>
8002ef08:	a1 79       	lsl	r9,0x1
8002ef0a:	2f fb       	sub	r11,-1
8002ef0c:	ed b9 00 14 	bld	r9,0x14
8002ef10:	cf c1       	brne	8002ef08 <__ieee754_sqrt+0x74>
8002ef12:	2f fa       	sub	r10,-1
8002ef14:	f6 0c 11 20 	rsub	r12,r11,32
8002ef18:	16 1a       	sub	r10,r11
8002ef1a:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002ef1e:	f0 0b 09 48 	lsl	r8,r8,r11
8002ef22:	f9 e9 10 09 	or	r9,r12,r9
8002ef26:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002ef2a:	f4 c6 03 ff 	sub	r6,r10,1023
8002ef2e:	b5 a9       	sbr	r9,0x14
8002ef30:	ed b6 00 00 	bld	r6,0x0
8002ef34:	c0 61       	brne	8002ef40 <__ieee754_sqrt+0xac>
8002ef36:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002ef3a:	a1 78       	lsl	r8,0x1
8002ef3c:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002ef40:	30 07       	mov	r7,0
8002ef42:	f0 0a 15 01 	lsl	r10,r8,0x1
8002ef46:	0e 9c       	mov	r12,r7
8002ef48:	bf 98       	lsr	r8,0x1f
8002ef4a:	fc 1b 00 20 	movh	r11,0x20
8002ef4e:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002ef52:	0e 99       	mov	r9,r7
8002ef54:	f2 0b 00 0e 	add	lr,r9,r11
8002ef58:	2f f7       	sub	r7,-1
8002ef5a:	10 3e       	cp.w	lr,r8
8002ef5c:	f1 de ea 18 	suble	r8,r8,lr
8002ef60:	f9 db ea 0c 	addle	r12,r12,r11
8002ef64:	fd db ea 09 	addle	r9,lr,r11
8002ef68:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002ef6c:	a1 9b       	lsr	r11,0x1
8002ef6e:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002ef72:	a1 7a       	lsl	r10,0x1
8002ef74:	59 67       	cp.w	r7,22
8002ef76:	ce f1       	brne	8002ef54 <__ieee754_sqrt+0xc0>
8002ef78:	30 07       	mov	r7,0
8002ef7a:	fc 15 80 00 	movh	r5,0x8000
8002ef7e:	0e 9b       	mov	r11,r7
8002ef80:	0e 94       	mov	r4,r7
8002ef82:	0e 92       	mov	r2,r7
8002ef84:	ea 04 00 0e 	add	lr,r5,r4
8002ef88:	10 39       	cp.w	r9,r8
8002ef8a:	c0 95       	brlt	8002ef9c <__ieee754_sqrt+0x108>
8002ef8c:	5f 03       	sreq	r3
8002ef8e:	14 3e       	cp.w	lr,r10
8002ef90:	5f 81       	srls	r1
8002ef92:	e3 e3 00 03 	and	r3,r1,r3
8002ef96:	e4 03 18 00 	cp.b	r3,r2
8002ef9a:	c1 70       	breq	8002efc8 <__ieee754_sqrt+0x134>
8002ef9c:	1c 93       	mov	r3,lr
8002ef9e:	fc 05 00 04 	add	r4,lr,r5
8002efa2:	e6 13 80 00 	andh	r3,0x8000,COH
8002efa6:	fc 11 80 00 	movh	r1,0x8000
8002efaa:	02 33       	cp.w	r3,r1
8002efac:	c0 61       	brne	8002efb8 <__ieee754_sqrt+0x124>
8002efae:	58 04       	cp.w	r4,0
8002efb0:	c0 45       	brlt	8002efb8 <__ieee754_sqrt+0x124>
8002efb2:	f2 c3 ff ff 	sub	r3,r9,-1
8002efb6:	c0 28       	rjmp	8002efba <__ieee754_sqrt+0x126>
8002efb8:	12 93       	mov	r3,r9
8002efba:	12 18       	sub	r8,r9
8002efbc:	0a 0b       	add	r11,r5
8002efbe:	1c 3a       	cp.w	r10,lr
8002efc0:	f7 b8 03 01 	sublo	r8,1
8002efc4:	06 99       	mov	r9,r3
8002efc6:	1c 1a       	sub	r10,lr
8002efc8:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002efcc:	a1 95       	lsr	r5,0x1
8002efce:	2f f7       	sub	r7,-1
8002efd0:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002efd4:	a1 7a       	lsl	r10,0x1
8002efd6:	e0 47 00 20 	cp.w	r7,32
8002efda:	cd 51       	brne	8002ef84 <__ieee754_sqrt+0xf0>
8002efdc:	14 48       	or	r8,r10
8002efde:	c0 a0       	breq	8002eff2 <__ieee754_sqrt+0x15e>
8002efe0:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002efe4:	5b fb       	cp.w	r11,-1
8002efe6:	f7 bc 00 ff 	subeq	r12,-1
8002efea:	f9 bb 00 00 	moveq	r11,0
8002efee:	f1 db e1 0b 	addne	r11,r8,r11
8002eff2:	a1 9b       	lsr	r11,0x1
8002eff4:	16 99       	mov	r9,r11
8002eff6:	bf b9       	sbr	r9,0x1f
8002eff8:	ec 0a 14 01 	asr	r10,r6,0x1
8002effc:	f8 08 14 01 	asr	r8,r12,0x1
8002f000:	b5 6a       	lsl	r10,0x14
8002f002:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002f006:	f2 0b 17 10 	movne	r11,r9
8002f00a:	fc 19 3f e0 	movh	r9,0x3fe0
8002f00e:	16 96       	mov	r6,r11
8002f010:	12 0a       	add	r10,r9
8002f012:	f4 08 00 08 	add	r8,r10,r8
8002f016:	10 97       	mov	r7,r8
8002f018:	0c 9a       	mov	r10,r6
8002f01a:	0e 9b       	mov	r11,r7
8002f01c:	d8 32       	popm	r0-r7,pc
8002f01e:	d7 03       	nop

8002f020 <__kernel_cos>:
8002f020:	d4 31       	pushm	r0-r7,lr
8002f022:	20 6d       	sub	sp,24
8002f024:	fa e9 00 08 	st.d	sp[8],r8
8002f028:	14 92       	mov	r2,r10
8002f02a:	16 93       	mov	r3,r11
8002f02c:	14 96       	mov	r6,r10
8002f02e:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f032:	e0 69 ff ff 	mov	r9,65535
8002f036:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f03a:	12 37       	cp.w	r7,r9
8002f03c:	e0 89 00 09 	brgt	8002f04e <__kernel_cos+0x2e>
8002f040:	e0 a0 0a bc 	rcall	800305b8 <__avr32_f64_to_s32>
8002f044:	c0 51       	brne	8002f04e <__kernel_cos+0x2e>
8002f046:	30 0a       	mov	r10,0
8002f048:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f04c:	cd b8       	rjmp	8002f202 <__kernel_cos+0x1e2>
8002f04e:	04 98       	mov	r8,r2
8002f050:	06 99       	mov	r9,r3
8002f052:	04 9a       	mov	r10,r2
8002f054:	06 9b       	mov	r11,r3
8002f056:	e0 a0 08 6d 	rcall	80030130 <__avr32_f64_mul>
8002f05a:	e0 68 38 d4 	mov	r8,14548
8002f05e:	ea 18 be 88 	orh	r8,0xbe88
8002f062:	14 94       	mov	r4,r10
8002f064:	16 95       	mov	r5,r11
8002f066:	e0 69 fa e9 	mov	r9,64233
8002f06a:	ea 19 bd a8 	orh	r9,0xbda8
8002f06e:	e0 a0 08 61 	rcall	80030130 <__avr32_f64_mul>
8002f072:	e0 68 b1 c4 	mov	r8,45508
8002f076:	ea 18 bd b4 	orh	r8,0xbdb4
8002f07a:	e0 69 ee 9e 	mov	r9,61086
8002f07e:	ea 19 3e 21 	orh	r9,0x3e21
8002f082:	e0 a0 0a 11 	rcall	800304a4 <__avr32_f64_add>
8002f086:	14 98       	mov	r8,r10
8002f088:	16 99       	mov	r9,r11
8002f08a:	08 9a       	mov	r10,r4
8002f08c:	0a 9b       	mov	r11,r5
8002f08e:	e0 a0 08 51 	rcall	80030130 <__avr32_f64_mul>
8002f092:	e0 68 52 ad 	mov	r8,21165
8002f096:	ea 18 80 9c 	orh	r8,0x809c
8002f09a:	e0 69 7e 4f 	mov	r9,32335
8002f09e:	ea 19 3e 92 	orh	r9,0x3e92
8002f0a2:	e0 a0 09 33 	rcall	80030308 <__avr32_f64_sub>
8002f0a6:	14 98       	mov	r8,r10
8002f0a8:	16 99       	mov	r9,r11
8002f0aa:	08 9a       	mov	r10,r4
8002f0ac:	0a 9b       	mov	r11,r5
8002f0ae:	e0 a0 08 41 	rcall	80030130 <__avr32_f64_mul>
8002f0b2:	e0 68 15 90 	mov	r8,5520
8002f0b6:	ea 18 19 cb 	orh	r8,0x19cb
8002f0ba:	e0 69 01 a0 	mov	r9,416
8002f0be:	ea 19 3e fa 	orh	r9,0x3efa
8002f0c2:	e0 a0 09 f1 	rcall	800304a4 <__avr32_f64_add>
8002f0c6:	14 98       	mov	r8,r10
8002f0c8:	16 99       	mov	r9,r11
8002f0ca:	08 9a       	mov	r10,r4
8002f0cc:	0a 9b       	mov	r11,r5
8002f0ce:	e0 a0 08 31 	rcall	80030130 <__avr32_f64_mul>
8002f0d2:	e0 68 51 77 	mov	r8,20855
8002f0d6:	ea 18 16 c1 	orh	r8,0x16c1
8002f0da:	e0 69 c1 6c 	mov	r9,49516
8002f0de:	ea 19 3f 56 	orh	r9,0x3f56
8002f0e2:	e0 a0 09 13 	rcall	80030308 <__avr32_f64_sub>
8002f0e6:	14 98       	mov	r8,r10
8002f0e8:	16 99       	mov	r9,r11
8002f0ea:	08 9a       	mov	r10,r4
8002f0ec:	0a 9b       	mov	r11,r5
8002f0ee:	e0 a0 08 21 	rcall	80030130 <__avr32_f64_mul>
8002f0f2:	e0 68 55 4c 	mov	r8,21836
8002f0f6:	ea 18 55 55 	orh	r8,0x5555
8002f0fa:	e0 69 55 55 	mov	r9,21845
8002f0fe:	ea 19 3f a5 	orh	r9,0x3fa5
8002f102:	e0 a0 09 d1 	rcall	800304a4 <__avr32_f64_add>
8002f106:	14 98       	mov	r8,r10
8002f108:	16 99       	mov	r9,r11
8002f10a:	08 9a       	mov	r10,r4
8002f10c:	0a 9b       	mov	r11,r5
8002f10e:	e0 a0 08 11 	rcall	80030130 <__avr32_f64_mul>
8002f112:	fa eb 00 00 	st.d	sp[0],r10
8002f116:	e0 68 33 32 	mov	r8,13106
8002f11a:	ea 18 3f d3 	orh	r8,0x3fd3
8002f11e:	10 37       	cp.w	r7,r8
8002f120:	e0 89 00 2b 	brgt	8002f176 <__kernel_cos+0x156>
8002f124:	30 08       	mov	r8,0
8002f126:	fc 19 3f e0 	movh	r9,0x3fe0
8002f12a:	08 9a       	mov	r10,r4
8002f12c:	0a 9b       	mov	r11,r5
8002f12e:	e0 a0 08 01 	rcall	80030130 <__avr32_f64_mul>
8002f132:	fa e8 00 00 	ld.d	r8,sp[0]
8002f136:	14 90       	mov	r0,r10
8002f138:	16 91       	mov	r1,r11
8002f13a:	08 9a       	mov	r10,r4
8002f13c:	0a 9b       	mov	r11,r5
8002f13e:	e0 a0 07 f9 	rcall	80030130 <__avr32_f64_mul>
8002f142:	fa e8 00 08 	ld.d	r8,sp[8]
8002f146:	16 97       	mov	r7,r11
8002f148:	14 96       	mov	r6,r10
8002f14a:	06 9b       	mov	r11,r3
8002f14c:	04 9a       	mov	r10,r2
8002f14e:	e0 a0 07 f1 	rcall	80030130 <__avr32_f64_mul>
8002f152:	14 98       	mov	r8,r10
8002f154:	16 99       	mov	r9,r11
8002f156:	0c 9a       	mov	r10,r6
8002f158:	0e 9b       	mov	r11,r7
8002f15a:	e0 a0 08 d7 	rcall	80030308 <__avr32_f64_sub>
8002f15e:	14 98       	mov	r8,r10
8002f160:	16 99       	mov	r9,r11
8002f162:	00 9a       	mov	r10,r0
8002f164:	02 9b       	mov	r11,r1
8002f166:	e0 a0 08 d1 	rcall	80030308 <__avr32_f64_sub>
8002f16a:	14 98       	mov	r8,r10
8002f16c:	16 99       	mov	r9,r11
8002f16e:	30 0a       	mov	r10,0
8002f170:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f174:	c4 58       	rjmp	8002f1fe <__kernel_cos+0x1de>
8002f176:	fc 19 3f e9 	movh	r9,0x3fe9
8002f17a:	12 37       	cp.w	r7,r9
8002f17c:	e0 8a 00 06 	brle	8002f188 <__kernel_cos+0x168>
8002f180:	30 06       	mov	r6,0
8002f182:	fc 17 3f d2 	movh	r7,0x3fd2
8002f186:	c0 88       	rjmp	8002f196 <__kernel_cos+0x176>
8002f188:	fc 1a ff e0 	movh	r10,0xffe0
8002f18c:	30 08       	mov	r8,0
8002f18e:	ee 0a 00 09 	add	r9,r7,r10
8002f192:	10 96       	mov	r6,r8
8002f194:	12 97       	mov	r7,r9
8002f196:	0c 98       	mov	r8,r6
8002f198:	0e 99       	mov	r9,r7
8002f19a:	30 0a       	mov	r10,0
8002f19c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f1a0:	e0 a0 08 b4 	rcall	80030308 <__avr32_f64_sub>
8002f1a4:	30 08       	mov	r8,0
8002f1a6:	fa eb 00 10 	st.d	sp[16],r10
8002f1aa:	fc 19 3f e0 	movh	r9,0x3fe0
8002f1ae:	08 9a       	mov	r10,r4
8002f1b0:	0a 9b       	mov	r11,r5
8002f1b2:	e0 a0 07 bf 	rcall	80030130 <__avr32_f64_mul>
8002f1b6:	0c 98       	mov	r8,r6
8002f1b8:	0e 99       	mov	r9,r7
8002f1ba:	e0 a0 08 a7 	rcall	80030308 <__avr32_f64_sub>
8002f1be:	fa e8 00 00 	ld.d	r8,sp[0]
8002f1c2:	14 90       	mov	r0,r10
8002f1c4:	16 91       	mov	r1,r11
8002f1c6:	08 9a       	mov	r10,r4
8002f1c8:	0a 9b       	mov	r11,r5
8002f1ca:	e0 a0 07 b3 	rcall	80030130 <__avr32_f64_mul>
8002f1ce:	fa e8 00 08 	ld.d	r8,sp[8]
8002f1d2:	16 97       	mov	r7,r11
8002f1d4:	14 96       	mov	r6,r10
8002f1d6:	06 9b       	mov	r11,r3
8002f1d8:	04 9a       	mov	r10,r2
8002f1da:	e0 a0 07 ab 	rcall	80030130 <__avr32_f64_mul>
8002f1de:	14 98       	mov	r8,r10
8002f1e0:	16 99       	mov	r9,r11
8002f1e2:	0c 9a       	mov	r10,r6
8002f1e4:	0e 9b       	mov	r11,r7
8002f1e6:	e0 a0 08 91 	rcall	80030308 <__avr32_f64_sub>
8002f1ea:	14 98       	mov	r8,r10
8002f1ec:	16 99       	mov	r9,r11
8002f1ee:	00 9a       	mov	r10,r0
8002f1f0:	02 9b       	mov	r11,r1
8002f1f2:	e0 a0 08 8b 	rcall	80030308 <__avr32_f64_sub>
8002f1f6:	14 98       	mov	r8,r10
8002f1f8:	16 99       	mov	r9,r11
8002f1fa:	fa ea 00 10 	ld.d	r10,sp[16]
8002f1fe:	e0 a0 08 85 	rcall	80030308 <__avr32_f64_sub>
8002f202:	2f ad       	sub	sp,-24
8002f204:	d8 32       	popm	r0-r7,pc
8002f206:	d7 03       	nop

8002f208 <__kernel_rem_pio2>:
8002f208:	d4 31       	pushm	r0-r7,lr
8002f20a:	fa cd 02 70 	sub	sp,sp,624
8002f20e:	50 b9       	stdsp	sp[0x2c],r9
8002f210:	fa f9 02 94 	ld.w	r9,sp[660]
8002f214:	50 68       	stdsp	sp[0x18],r8
8002f216:	50 c9       	stdsp	sp[0x30],r9
8002f218:	16 94       	mov	r4,r11
8002f21a:	40 b8       	lddsp	r8,sp[0x2c]
8002f21c:	4b e9       	lddpc	r9,8002f314 <__kernel_rem_pio2+0x10c>
8002f21e:	20 18       	sub	r8,1
8002f220:	40 6b       	lddsp	r11,sp[0x18]
8002f222:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002f226:	50 58       	stdsp	sp[0x14],r8
8002f228:	50 39       	stdsp	sp[0xc],r9
8002f22a:	30 08       	mov	r8,0
8002f22c:	f4 c9 00 03 	sub	r9,r10,3
8002f230:	10 97       	mov	r7,r8
8002f232:	31 83       	mov	r3,24
8002f234:	f2 03 0c 02 	divs	r2,r9,r3
8002f238:	f0 02 0c 48 	max	r8,r8,r2
8002f23c:	40 59       	lddsp	r9,sp[0x14]
8002f23e:	10 96       	mov	r6,r8
8002f240:	10 93       	mov	r3,r8
8002f242:	50 78       	stdsp	sp[0x1c],r8
8002f244:	40 31       	lddsp	r1,sp[0xc]
8002f246:	5c d6       	com	r6
8002f248:	12 13       	sub	r3,r9
8002f24a:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002f24e:	40 c8       	lddsp	r8,sp[0x30]
8002f250:	50 ac       	stdsp	sp[0x28],r12
8002f252:	12 01       	add	r1,r9
8002f254:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002f258:	fa c2 fe 80 	sub	r2,sp,-384
8002f25c:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002f260:	c0 d8       	rjmp	8002f27a <__kernel_rem_pio2+0x72>
8002f262:	ee 03 00 08 	add	r8,r7,r3
8002f266:	c0 47       	brpl	8002f26e <__kernel_rem_pio2+0x66>
8002f268:	30 0a       	mov	r10,0
8002f26a:	30 0b       	mov	r11,0
8002f26c:	c0 48       	rjmp	8002f274 <__kernel_rem_pio2+0x6c>
8002f26e:	6a 0c       	ld.w	r12,r5[0x0]
8002f270:	e0 a0 09 bb 	rcall	800305e6 <__avr32_s32_to_f64>
8002f274:	a5 2a       	st.d	r2++,r10
8002f276:	2f f7       	sub	r7,-1
8002f278:	2f c5       	sub	r5,-4
8002f27a:	02 37       	cp.w	r7,r1
8002f27c:	fe 9a ff f3 	brle	8002f262 <__kernel_rem_pio2+0x5a>
8002f280:	fa c0 ff c0 	sub	r0,sp,-64
8002f284:	40 53       	lddsp	r3,sp[0x14]
8002f286:	30 02       	mov	r2,0
8002f288:	fa cc fe 80 	sub	r12,sp,-384
8002f28c:	0c 95       	mov	r5,r6
8002f28e:	c1 b8       	rjmp	8002f2c4 <__kernel_rem_pio2+0xbc>
8002f290:	ee e8 00 00 	ld.d	r8,r7[0]
8002f294:	50 0c       	stdsp	sp[0x0],r12
8002f296:	20 87       	sub	r7,8
8002f298:	a3 0b       	ld.d	r10,r1++
8002f29a:	e0 a0 07 4b 	rcall	80030130 <__avr32_f64_mul>
8002f29e:	14 98       	mov	r8,r10
8002f2a0:	16 99       	mov	r9,r11
8002f2a2:	fa ea 00 04 	ld.d	r10,sp[4]
8002f2a6:	e0 a0 08 ff 	rcall	800304a4 <__avr32_f64_add>
8002f2aa:	2f f6       	sub	r6,-1
8002f2ac:	fa eb 00 04 	st.d	sp[4],r10
8002f2b0:	40 0c       	lddsp	r12,sp[0x0]
8002f2b2:	40 5b       	lddsp	r11,sp[0x14]
8002f2b4:	16 36       	cp.w	r6,r11
8002f2b6:	fe 9a ff ed 	brle	8002f290 <__kernel_rem_pio2+0x88>
8002f2ba:	fa e8 00 04 	ld.d	r8,sp[4]
8002f2be:	2f f2       	sub	r2,-1
8002f2c0:	a1 28       	st.d	r0++,r8
8002f2c2:	2f f3       	sub	r3,-1
8002f2c4:	40 38       	lddsp	r8,sp[0xc]
8002f2c6:	10 32       	cp.w	r2,r8
8002f2c8:	e0 89 00 0b 	brgt	8002f2de <__kernel_rem_pio2+0xd6>
8002f2cc:	30 0a       	mov	r10,0
8002f2ce:	30 0b       	mov	r11,0
8002f2d0:	40 a1       	lddsp	r1,sp[0x28]
8002f2d2:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002f2d6:	fa eb 00 04 	st.d	sp[4],r10
8002f2da:	30 06       	mov	r6,0
8002f2dc:	ce bb       	rjmp	8002f2b2 <__kernel_rem_pio2+0xaa>
8002f2de:	40 38       	lddsp	r8,sp[0xc]
8002f2e0:	fa ca fd e0 	sub	r10,sp,-544
8002f2e4:	20 18       	sub	r8,1
8002f2e6:	0a 96       	mov	r6,r5
8002f2e8:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002f2ec:	40 37       	lddsp	r7,sp[0xc]
8002f2ee:	50 fa       	stdsp	sp[0x3c],r10
8002f2f0:	50 e4       	stdsp	sp[0x38],r4
8002f2f2:	fa c9 fd 90 	sub	r9,sp,-624
8002f2f6:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002f2fa:	ee c5 00 01 	sub	r5,r7,1
8002f2fe:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002f302:	fa c1 fd e0 	sub	r1,sp,-544
8002f306:	fa c8 ff c0 	sub	r8,sp,-64
8002f30a:	50 11       	stdsp	sp[0x4],r1
8002f30c:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002f310:	0e 90       	mov	r0,r7
8002f312:	c2 58       	rjmp	8002f35c <__kernel_rem_pio2+0x154>
8002f314:	80 03       	ld.sh	r3,r0[0x0]
8002f316:	19 40       	ld.w	r0,--r12
8002f318:	e0 a0 07 0c 	rcall	80030130 <__avr32_f64_mul>
8002f31c:	e0 a0 09 4e 	rcall	800305b8 <__avr32_f64_to_s32>
8002f320:	e0 a0 09 63 	rcall	800305e6 <__avr32_s32_to_f64>
8002f324:	30 08       	mov	r8,0
8002f326:	fc 19 c1 70 	movh	r9,0xc170
8002f32a:	fa eb 00 20 	st.d	sp[32],r10
8002f32e:	e0 a0 07 01 	rcall	80030130 <__avr32_f64_mul>
8002f332:	14 98       	mov	r8,r10
8002f334:	16 99       	mov	r9,r11
8002f336:	04 9a       	mov	r10,r2
8002f338:	06 9b       	mov	r11,r3
8002f33a:	e0 a0 08 b5 	rcall	800304a4 <__avr32_f64_add>
8002f33e:	e0 a0 09 3d 	rcall	800305b8 <__avr32_f64_to_s32>
8002f342:	40 1a       	lddsp	r10,sp[0x4]
8002f344:	14 ac       	st.w	r10++,r12
8002f346:	e8 e8 00 00 	ld.d	r8,r4[0]
8002f34a:	50 1a       	stdsp	sp[0x4],r10
8002f34c:	20 10       	sub	r0,1
8002f34e:	fa ea 00 20 	ld.d	r10,sp[32]
8002f352:	20 84       	sub	r4,8
8002f354:	e0 a0 08 a8 	rcall	800304a4 <__avr32_f64_add>
8002f358:	14 92       	mov	r2,r10
8002f35a:	16 93       	mov	r3,r11
8002f35c:	30 08       	mov	r8,0
8002f35e:	fc 19 3e 70 	movh	r9,0x3e70
8002f362:	04 9a       	mov	r10,r2
8002f364:	06 9b       	mov	r11,r3
8002f366:	58 00       	cp.w	r0,0
8002f368:	fe 99 ff d8 	brgt	8002f318 <__kernel_rem_pio2+0x110>
8002f36c:	0c 9c       	mov	r12,r6
8002f36e:	e0 a0 06 67 	rcall	8003003c <scalbn>
8002f372:	30 08       	mov	r8,0
8002f374:	fc 19 3f c0 	movh	r9,0x3fc0
8002f378:	14 92       	mov	r2,r10
8002f37a:	16 93       	mov	r3,r11
8002f37c:	e0 a0 06 da 	rcall	80030130 <__avr32_f64_mul>
8002f380:	e0 a0 05 2e 	rcall	8002fddc <floor>
8002f384:	30 08       	mov	r8,0
8002f386:	fc 19 c0 20 	movh	r9,0xc020
8002f38a:	e0 a0 06 d3 	rcall	80030130 <__avr32_f64_mul>
8002f38e:	14 98       	mov	r8,r10
8002f390:	16 99       	mov	r9,r11
8002f392:	04 9a       	mov	r10,r2
8002f394:	06 9b       	mov	r11,r3
8002f396:	e0 a0 08 87 	rcall	800304a4 <__avr32_f64_add>
8002f39a:	14 92       	mov	r2,r10
8002f39c:	16 93       	mov	r3,r11
8002f39e:	e0 a0 09 0d 	rcall	800305b8 <__avr32_f64_to_s32>
8002f3a2:	18 90       	mov	r0,r12
8002f3a4:	e0 a0 09 21 	rcall	800305e6 <__avr32_s32_to_f64>
8002f3a8:	14 98       	mov	r8,r10
8002f3aa:	16 99       	mov	r9,r11
8002f3ac:	04 9a       	mov	r10,r2
8002f3ae:	06 9b       	mov	r11,r3
8002f3b0:	e0 a0 07 ac 	rcall	80030308 <__avr32_f64_sub>
8002f3b4:	fa eb 00 04 	st.d	sp[4],r10
8002f3b8:	58 06       	cp.w	r6,0
8002f3ba:	e0 8a 00 18 	brle	8002f3ea <__kernel_rem_pio2+0x1e2>
8002f3be:	fa c8 fd 90 	sub	r8,sp,-624
8002f3c2:	ec 0b 11 18 	rsub	r11,r6,24
8002f3c6:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f3ca:	ec 0c 11 17 	rsub	r12,r6,23
8002f3ce:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002f3d2:	f4 0b 08 48 	asr	r8,r10,r11
8002f3d6:	f0 0b 09 4b 	lsl	r11,r8,r11
8002f3da:	10 00       	add	r0,r8
8002f3dc:	f4 0b 01 0b 	sub	r11,r10,r11
8002f3e0:	f3 4b ff b0 	st.w	r9[-80],r11
8002f3e4:	f6 0c 08 44 	asr	r4,r11,r12
8002f3e8:	c1 58       	rjmp	8002f412 <__kernel_rem_pio2+0x20a>
8002f3ea:	58 06       	cp.w	r6,0
8002f3ec:	c0 91       	brne	8002f3fe <__kernel_rem_pio2+0x1f6>
8002f3ee:	fa cb fd 90 	sub	r11,sp,-624
8002f3f2:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002f3f6:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002f3fa:	b7 54       	asr	r4,0x17
8002f3fc:	c0 b8       	rjmp	8002f412 <__kernel_rem_pio2+0x20a>
8002f3fe:	30 08       	mov	r8,0
8002f400:	fc 19 3f e0 	movh	r9,0x3fe0
8002f404:	e0 a0 09 74 	rcall	800306ec <__avr32_f64_cmp_ge>
8002f408:	c0 31       	brne	8002f40e <__kernel_rem_pio2+0x206>
8002f40a:	30 04       	mov	r4,0
8002f40c:	c5 58       	rjmp	8002f4b6 <__kernel_rem_pio2+0x2ae>
8002f40e:	30 24       	mov	r4,2
8002f410:	c0 48       	rjmp	8002f418 <__kernel_rem_pio2+0x210>
8002f412:	58 04       	cp.w	r4,0
8002f414:	e0 8a 00 51 	brle	8002f4b6 <__kernel_rem_pio2+0x2ae>
8002f418:	30 08       	mov	r8,0
8002f41a:	2f f0       	sub	r0,-1
8002f41c:	10 93       	mov	r3,r8
8002f41e:	c1 48       	rjmp	8002f446 <__kernel_rem_pio2+0x23e>
8002f420:	62 09       	ld.w	r9,r1[0x0]
8002f422:	58 03       	cp.w	r3,0
8002f424:	c0 81       	brne	8002f434 <__kernel_rem_pio2+0x22c>
8002f426:	58 09       	cp.w	r9,0
8002f428:	c0 d0       	breq	8002f442 <__kernel_rem_pio2+0x23a>
8002f42a:	fc 1a 01 00 	movh	r10,0x100
8002f42e:	12 1a       	sub	r10,r9
8002f430:	83 0a       	st.w	r1[0x0],r10
8002f432:	c0 78       	rjmp	8002f440 <__kernel_rem_pio2+0x238>
8002f434:	e0 6b ff ff 	mov	r11,65535
8002f438:	ea 1b 00 ff 	orh	r11,0xff
8002f43c:	12 1b       	sub	r11,r9
8002f43e:	83 0b       	st.w	r1[0x0],r11
8002f440:	30 13       	mov	r3,1
8002f442:	2f f8       	sub	r8,-1
8002f444:	2f c1       	sub	r1,-4
8002f446:	0e 38       	cp.w	r8,r7
8002f448:	ce c5       	brlt	8002f420 <__kernel_rem_pio2+0x218>
8002f44a:	58 06       	cp.w	r6,0
8002f44c:	e0 8a 00 1a 	brle	8002f480 <__kernel_rem_pio2+0x278>
8002f450:	58 16       	cp.w	r6,1
8002f452:	c0 40       	breq	8002f45a <__kernel_rem_pio2+0x252>
8002f454:	58 26       	cp.w	r6,2
8002f456:	c1 51       	brne	8002f480 <__kernel_rem_pio2+0x278>
8002f458:	c0 a8       	rjmp	8002f46c <__kernel_rem_pio2+0x264>
8002f45a:	fa ca fd 90 	sub	r10,sp,-624
8002f45e:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002f462:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f466:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002f46a:	c0 98       	rjmp	8002f47c <__kernel_rem_pio2+0x274>
8002f46c:	fa c9 fd 90 	sub	r9,sp,-624
8002f470:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002f474:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f478:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002f47c:	f1 49 ff b0 	st.w	r8[-80],r9
8002f480:	58 24       	cp.w	r4,2
8002f482:	c1 a1       	brne	8002f4b6 <__kernel_rem_pio2+0x2ae>
8002f484:	fa e8 00 04 	ld.d	r8,sp[4]
8002f488:	30 0a       	mov	r10,0
8002f48a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f48e:	e0 a0 07 3d 	rcall	80030308 <__avr32_f64_sub>
8002f492:	fa eb 00 04 	st.d	sp[4],r10
8002f496:	58 03       	cp.w	r3,0
8002f498:	c0 f0       	breq	8002f4b6 <__kernel_rem_pio2+0x2ae>
8002f49a:	0c 9c       	mov	r12,r6
8002f49c:	30 0a       	mov	r10,0
8002f49e:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f4a2:	e0 a0 05 cd 	rcall	8003003c <scalbn>
8002f4a6:	14 98       	mov	r8,r10
8002f4a8:	16 99       	mov	r9,r11
8002f4aa:	fa ea 00 04 	ld.d	r10,sp[4]
8002f4ae:	e0 a0 07 2d 	rcall	80030308 <__avr32_f64_sub>
8002f4b2:	fa eb 00 04 	st.d	sp[4],r10
8002f4b6:	30 08       	mov	r8,0
8002f4b8:	30 09       	mov	r9,0
8002f4ba:	fa ea 00 04 	ld.d	r10,sp[4]
8002f4be:	e0 a0 09 04 	rcall	800306c6 <__avr32_f64_cmp_eq>
8002f4c2:	c6 40       	breq	8002f58a <__kernel_rem_pio2+0x382>
8002f4c4:	fa c8 fd e0 	sub	r8,sp,-544
8002f4c8:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f4cc:	30 08       	mov	r8,0
8002f4ce:	c0 58       	rjmp	8002f4d8 <__kernel_rem_pio2+0x2d0>
8002f4d0:	72 0a       	ld.w	r10,r9[0x0]
8002f4d2:	20 15       	sub	r5,1
8002f4d4:	14 48       	or	r8,r10
8002f4d6:	20 49       	sub	r9,4
8002f4d8:	40 3b       	lddsp	r11,sp[0xc]
8002f4da:	16 35       	cp.w	r5,r11
8002f4dc:	cf a4       	brge	8002f4d0 <__kernel_rem_pio2+0x2c8>
8002f4de:	58 08       	cp.w	r8,0
8002f4e0:	c5 b1       	brne	8002f596 <__kernel_rem_pio2+0x38e>
8002f4e2:	40 f9       	lddsp	r9,sp[0x3c]
8002f4e4:	30 18       	mov	r8,1
8002f4e6:	c0 28       	rjmp	8002f4ea <__kernel_rem_pio2+0x2e2>
8002f4e8:	2f f8       	sub	r8,-1
8002f4ea:	72 0a       	ld.w	r10,r9[0x0]
8002f4ec:	20 49       	sub	r9,4
8002f4ee:	58 0a       	cp.w	r10,0
8002f4f0:	cf c0       	breq	8002f4e8 <__kernel_rem_pio2+0x2e0>
8002f4f2:	0e 08       	add	r8,r7
8002f4f4:	40 ba       	lddsp	r10,sp[0x2c]
8002f4f6:	50 d8       	stdsp	sp[0x34],r8
8002f4f8:	ee 0a 00 02 	add	r2,r7,r10
8002f4fc:	fa c8 fe 80 	sub	r8,sp,-384
8002f500:	04 91       	mov	r1,r2
8002f502:	ee c5 ff ff 	sub	r5,r7,-1
8002f506:	40 73       	lddsp	r3,sp[0x1c]
8002f508:	40 c9       	lddsp	r9,sp[0x30]
8002f50a:	2f f3       	sub	r3,-1
8002f50c:	fa cb ff c0 	sub	r11,sp,-64
8002f510:	0e 03       	add	r3,r7
8002f512:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002f516:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002f51a:	50 8b       	stdsp	sp[0x20],r11
8002f51c:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002f520:	0c 94       	mov	r4,r6
8002f522:	c2 d8       	rjmp	8002f57c <__kernel_rem_pio2+0x374>
8002f524:	66 0c       	ld.w	r12,r3[0x0]
8002f526:	e0 a0 08 60 	rcall	800305e6 <__avr32_s32_to_f64>
8002f52a:	30 08       	mov	r8,0
8002f52c:	e4 eb 00 00 	st.d	r2[0],r10
8002f530:	30 09       	mov	r9,0
8002f532:	fa ca fe 80 	sub	r10,sp,-384
8002f536:	40 a0       	lddsp	r0,sp[0x28]
8002f538:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002f53c:	30 06       	mov	r6,0
8002f53e:	fa e9 00 04 	st.d	sp[4],r8
8002f542:	c1 08       	rjmp	8002f562 <__kernel_rem_pio2+0x35a>
8002f544:	ee e8 00 00 	ld.d	r8,r7[0]
8002f548:	a1 0b       	ld.d	r10,r0++
8002f54a:	20 87       	sub	r7,8
8002f54c:	e0 a0 05 f2 	rcall	80030130 <__avr32_f64_mul>
8002f550:	2f f6       	sub	r6,-1
8002f552:	14 98       	mov	r8,r10
8002f554:	16 99       	mov	r9,r11
8002f556:	fa ea 00 04 	ld.d	r10,sp[4]
8002f55a:	e0 a0 07 a5 	rcall	800304a4 <__avr32_f64_add>
8002f55e:	fa eb 00 04 	st.d	sp[4],r10
8002f562:	40 58       	lddsp	r8,sp[0x14]
8002f564:	10 36       	cp.w	r6,r8
8002f566:	fe 9a ff ef 	brle	8002f544 <__kernel_rem_pio2+0x33c>
8002f56a:	40 89       	lddsp	r9,sp[0x20]
8002f56c:	fa ea 00 04 	ld.d	r10,sp[4]
8002f570:	2f f5       	sub	r5,-1
8002f572:	b3 2a       	st.d	r9++,r10
8002f574:	2f c3       	sub	r3,-4
8002f576:	50 89       	stdsp	sp[0x20],r9
8002f578:	2f 82       	sub	r2,-8
8002f57a:	2f f1       	sub	r1,-1
8002f57c:	40 d8       	lddsp	r8,sp[0x34]
8002f57e:	10 35       	cp.w	r5,r8
8002f580:	fe 9a ff d2 	brle	8002f524 <__kernel_rem_pio2+0x31c>
8002f584:	08 96       	mov	r6,r4
8002f586:	10 97       	mov	r7,r8
8002f588:	cb 5a       	rjmp	8002f2f2 <__kernel_rem_pio2+0xea>
8002f58a:	50 50       	stdsp	sp[0x14],r0
8002f58c:	08 95       	mov	r5,r4
8002f58e:	40 e4       	lddsp	r4,sp[0x38]
8002f590:	58 0c       	cp.w	r12,0
8002f592:	c1 30       	breq	8002f5b8 <__kernel_rem_pio2+0x3b0>
8002f594:	c0 48       	rjmp	8002f59c <__kernel_rem_pio2+0x394>
8002f596:	08 95       	mov	r5,r4
8002f598:	50 50       	stdsp	sp[0x14],r0
8002f59a:	40 e4       	lddsp	r4,sp[0x38]
8002f59c:	20 17       	sub	r7,1
8002f59e:	fa c8 fd e0 	sub	r8,sp,-544
8002f5a2:	21 86       	sub	r6,24
8002f5a4:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002f5a8:	c0 38       	rjmp	8002f5ae <__kernel_rem_pio2+0x3a6>
8002f5aa:	20 17       	sub	r7,1
8002f5ac:	21 86       	sub	r6,24
8002f5ae:	70 09       	ld.w	r9,r8[0x0]
8002f5b0:	20 48       	sub	r8,4
8002f5b2:	58 09       	cp.w	r9,0
8002f5b4:	cf b0       	breq	8002f5aa <__kernel_rem_pio2+0x3a2>
8002f5b6:	c4 48       	rjmp	8002f63e <__kernel_rem_pio2+0x436>
8002f5b8:	fa ea 00 04 	ld.d	r10,sp[4]
8002f5bc:	ec 0c 11 00 	rsub	r12,r6,0
8002f5c0:	e0 a0 05 3e 	rcall	8003003c <scalbn>
8002f5c4:	30 08       	mov	r8,0
8002f5c6:	14 90       	mov	r0,r10
8002f5c8:	16 91       	mov	r1,r11
8002f5ca:	fc 19 41 70 	movh	r9,0x4170
8002f5ce:	ee 03 15 02 	lsl	r3,r7,0x2
8002f5d2:	e0 a0 08 8d 	rcall	800306ec <__avr32_f64_cmp_ge>
8002f5d6:	c2 a0       	breq	8002f62a <__kernel_rem_pio2+0x422>
8002f5d8:	30 08       	mov	r8,0
8002f5da:	fc 19 3e 70 	movh	r9,0x3e70
8002f5de:	00 9a       	mov	r10,r0
8002f5e0:	02 9b       	mov	r11,r1
8002f5e2:	e0 a0 05 a7 	rcall	80030130 <__avr32_f64_mul>
8002f5e6:	e0 a0 07 e9 	rcall	800305b8 <__avr32_f64_to_s32>
8002f5ea:	e0 a0 07 fe 	rcall	800305e6 <__avr32_s32_to_f64>
8002f5ee:	30 08       	mov	r8,0
8002f5f0:	fc 19 c1 70 	movh	r9,0xc170
8002f5f4:	fa eb 00 04 	st.d	sp[4],r10
8002f5f8:	e0 a0 05 9c 	rcall	80030130 <__avr32_f64_mul>
8002f5fc:	16 99       	mov	r9,r11
8002f5fe:	14 98       	mov	r8,r10
8002f600:	02 9b       	mov	r11,r1
8002f602:	00 9a       	mov	r10,r0
8002f604:	e0 a0 07 50 	rcall	800304a4 <__avr32_f64_add>
8002f608:	e0 a0 07 d8 	rcall	800305b8 <__avr32_f64_to_s32>
8002f60c:	fa cb fd 90 	sub	r11,sp,-624
8002f610:	f6 03 00 03 	add	r3,r11,r3
8002f614:	2f f7       	sub	r7,-1
8002f616:	e7 4c ff b0 	st.w	r3[-80],r12
8002f61a:	fa c9 fd 90 	sub	r9,sp,-624
8002f61e:	fa ea 00 04 	ld.d	r10,sp[4]
8002f622:	2e 86       	sub	r6,-24
8002f624:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002f628:	c0 78       	rjmp	8002f636 <__kernel_rem_pio2+0x42e>
8002f62a:	fa c8 fd 90 	sub	r8,sp,-624
8002f62e:	00 9a       	mov	r10,r0
8002f630:	f0 03 00 03 	add	r3,r8,r3
8002f634:	02 9b       	mov	r11,r1
8002f636:	e0 a0 07 c1 	rcall	800305b8 <__avr32_f64_to_s32>
8002f63a:	e7 4c ff b0 	st.w	r3[-80],r12
8002f63e:	0c 9c       	mov	r12,r6
8002f640:	30 0a       	mov	r10,0
8002f642:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f646:	fa c3 fd e0 	sub	r3,sp,-544
8002f64a:	e0 a0 04 f9 	rcall	8003003c <scalbn>
8002f64e:	fa c2 ff c0 	sub	r2,sp,-64
8002f652:	0e 96       	mov	r6,r7
8002f654:	14 90       	mov	r0,r10
8002f656:	16 91       	mov	r1,r11
8002f658:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002f65c:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002f660:	c1 88       	rjmp	8002f690 <__kernel_rem_pio2+0x488>
8002f662:	66 0c       	ld.w	r12,r3[0x0]
8002f664:	e0 a0 07 c1 	rcall	800305e6 <__avr32_s32_to_f64>
8002f668:	14 98       	mov	r8,r10
8002f66a:	16 99       	mov	r9,r11
8002f66c:	00 9a       	mov	r10,r0
8002f66e:	02 9b       	mov	r11,r1
8002f670:	e0 a0 05 60 	rcall	80030130 <__avr32_f64_mul>
8002f674:	30 08       	mov	r8,0
8002f676:	e4 eb 00 00 	st.d	r2[0],r10
8002f67a:	fc 19 3e 70 	movh	r9,0x3e70
8002f67e:	00 9a       	mov	r10,r0
8002f680:	02 9b       	mov	r11,r1
8002f682:	20 16       	sub	r6,1
8002f684:	e0 a0 05 56 	rcall	80030130 <__avr32_f64_mul>
8002f688:	20 43       	sub	r3,4
8002f68a:	20 82       	sub	r2,8
8002f68c:	14 90       	mov	r0,r10
8002f68e:	16 91       	mov	r1,r11
8002f690:	58 06       	cp.w	r6,0
8002f692:	ce 84       	brge	8002f662 <__kernel_rem_pio2+0x45a>
8002f694:	fa cc ff 20 	sub	r12,sp,-224
8002f698:	0a 91       	mov	r1,r5
8002f69a:	0e 93       	mov	r3,r7
8002f69c:	30 02       	mov	r2,0
8002f69e:	18 96       	mov	r6,r12
8002f6a0:	0e 95       	mov	r5,r7
8002f6a2:	c1 c8       	rjmp	8002f6da <__kernel_rem_pio2+0x4d2>
8002f6a4:	ad 09       	ld.d	r8,r6++
8002f6a6:	2f f7       	sub	r7,-1
8002f6a8:	a1 0b       	ld.d	r10,r0++
8002f6aa:	e0 a0 05 43 	rcall	80030130 <__avr32_f64_mul>
8002f6ae:	14 98       	mov	r8,r10
8002f6b0:	16 99       	mov	r9,r11
8002f6b2:	fa ea 00 04 	ld.d	r10,sp[4]
8002f6b6:	e0 a0 06 f7 	rcall	800304a4 <__avr32_f64_add>
8002f6ba:	fa eb 00 04 	st.d	sp[4],r10
8002f6be:	40 3b       	lddsp	r11,sp[0xc]
8002f6c0:	16 37       	cp.w	r7,r11
8002f6c2:	e0 89 00 05 	brgt	8002f6cc <__kernel_rem_pio2+0x4c4>
8002f6c6:	04 37       	cp.w	r7,r2
8002f6c8:	fe 9a ff ee 	brle	8002f6a4 <__kernel_rem_pio2+0x49c>
8002f6cc:	06 96       	mov	r6,r3
8002f6ce:	fa e8 00 04 	ld.d	r8,sp[4]
8002f6d2:	40 73       	lddsp	r3,sp[0x1c]
8002f6d4:	ad 28       	st.d	r6++,r8
8002f6d6:	20 13       	sub	r3,1
8002f6d8:	2f f2       	sub	r2,-1
8002f6da:	58 03       	cp.w	r3,0
8002f6dc:	c0 f5       	brlt	8002f6fa <__kernel_rem_pio2+0x4f2>
8002f6de:	fa c8 ff c0 	sub	r8,sp,-64
8002f6e2:	30 0a       	mov	r10,0
8002f6e4:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002f6e8:	30 0b       	mov	r11,0
8002f6ea:	50 73       	stdsp	sp[0x1c],r3
8002f6ec:	4d 00       	lddpc	r0,8002f82c <__kernel_rem_pio2+0x624>
8002f6ee:	0c 93       	mov	r3,r6
8002f6f0:	fa eb 00 04 	st.d	sp[4],r10
8002f6f4:	30 07       	mov	r7,0
8002f6f6:	18 96       	mov	r6,r12
8002f6f8:	ce 3b       	rjmp	8002f6be <__kernel_rem_pio2+0x4b6>
8002f6fa:	0a 97       	mov	r7,r5
8002f6fc:	40 6a       	lddsp	r10,sp[0x18]
8002f6fe:	02 95       	mov	r5,r1
8002f700:	58 2a       	cp.w	r10,2
8002f702:	e0 89 00 07 	brgt	8002f710 <__kernel_rem_pio2+0x508>
8002f706:	58 1a       	cp.w	r10,1
8002f708:	c1 14       	brge	8002f72a <__kernel_rem_pio2+0x522>
8002f70a:	58 0a       	cp.w	r10,0
8002f70c:	c1 70       	breq	8002f73a <__kernel_rem_pio2+0x532>
8002f70e:	ce 68       	rjmp	8002f8da <__kernel_rem_pio2+0x6d2>
8002f710:	40 69       	lddsp	r9,sp[0x18]
8002f712:	58 39       	cp.w	r9,3
8002f714:	e0 81 00 e3 	brne	8002f8da <__kernel_rem_pio2+0x6d2>
8002f718:	ee c6 00 01 	sub	r6,r7,1
8002f71c:	fa c8 ff 20 	sub	r8,sp,-224
8002f720:	0e 92       	mov	r2,r7
8002f722:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002f726:	0c 93       	mov	r3,r6
8002f728:	c7 d8       	rjmp	8002f822 <__kernel_rem_pio2+0x61a>
8002f72a:	fa c6 ff 20 	sub	r6,sp,-224
8002f72e:	30 0c       	mov	r12,0
8002f730:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002f734:	0e 93       	mov	r3,r7
8002f736:	18 9a       	mov	r10,r12
8002f738:	c2 98       	rjmp	8002f78a <__kernel_rem_pio2+0x582>
8002f73a:	40 6c       	lddsp	r12,sp[0x18]
8002f73c:	0e 96       	mov	r6,r7
8002f73e:	fa c8 ff 20 	sub	r8,sp,-224
8002f742:	18 9a       	mov	r10,r12
8002f744:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f748:	c0 a8       	rjmp	8002f75c <__kernel_rem_pio2+0x554>
8002f74a:	ee e8 00 00 	ld.d	r8,r7[0]
8002f74e:	18 9b       	mov	r11,r12
8002f750:	20 87       	sub	r7,8
8002f752:	06 9a       	mov	r10,r3
8002f754:	20 16       	sub	r6,1
8002f756:	e0 a0 06 a7 	rcall	800304a4 <__avr32_f64_add>
8002f75a:	16 9c       	mov	r12,r11
8002f75c:	14 93       	mov	r3,r10
8002f75e:	58 06       	cp.w	r6,0
8002f760:	cf 54       	brge	8002f74a <__kernel_rem_pio2+0x542>
8002f762:	18 98       	mov	r8,r12
8002f764:	ee 18 80 00 	eorh	r8,0x8000
8002f768:	58 05       	cp.w	r5,0
8002f76a:	f0 0c 17 10 	movne	r12,r8
8002f76e:	14 98       	mov	r8,r10
8002f770:	18 99       	mov	r9,r12
8002f772:	e8 e9 00 00 	st.d	r4[0],r8
8002f776:	cb 28       	rjmp	8002f8da <__kernel_rem_pio2+0x6d2>
8002f778:	ec e8 00 00 	ld.d	r8,r6[0]
8002f77c:	18 9b       	mov	r11,r12
8002f77e:	04 9a       	mov	r10,r2
8002f780:	20 13       	sub	r3,1
8002f782:	e0 a0 06 91 	rcall	800304a4 <__avr32_f64_add>
8002f786:	20 86       	sub	r6,8
8002f788:	16 9c       	mov	r12,r11
8002f78a:	14 92       	mov	r2,r10
8002f78c:	58 03       	cp.w	r3,0
8002f78e:	cf 54       	brge	8002f778 <__kernel_rem_pio2+0x570>
8002f790:	18 9b       	mov	r11,r12
8002f792:	18 98       	mov	r8,r12
8002f794:	ee 18 80 00 	eorh	r8,0x8000
8002f798:	58 05       	cp.w	r5,0
8002f79a:	f0 0c 17 10 	movne	r12,r8
8002f79e:	18 93       	mov	r3,r12
8002f7a0:	14 92       	mov	r2,r10
8002f7a2:	16 99       	mov	r9,r11
8002f7a4:	e8 e3 00 00 	st.d	r4[0],r2
8002f7a8:	14 98       	mov	r8,r10
8002f7aa:	fa c3 ff 18 	sub	r3,sp,-232
8002f7ae:	fa ea 00 e0 	ld.d	r10,sp[224]
8002f7b2:	30 16       	mov	r6,1
8002f7b4:	e0 a0 05 aa 	rcall	80030308 <__avr32_f64_sub>
8002f7b8:	c0 78       	rjmp	8002f7c6 <__kernel_rem_pio2+0x5be>
8002f7ba:	2f f6       	sub	r6,-1
8002f7bc:	a7 09       	ld.d	r8,r3++
8002f7be:	18 9b       	mov	r11,r12
8002f7c0:	04 9a       	mov	r10,r2
8002f7c2:	e0 a0 06 71 	rcall	800304a4 <__avr32_f64_add>
8002f7c6:	16 9c       	mov	r12,r11
8002f7c8:	14 92       	mov	r2,r10
8002f7ca:	0e 36       	cp.w	r6,r7
8002f7cc:	fe 9a ff f7 	brle	8002f7ba <__kernel_rem_pio2+0x5b2>
8002f7d0:	16 98       	mov	r8,r11
8002f7d2:	ee 18 80 00 	eorh	r8,0x8000
8002f7d6:	58 05       	cp.w	r5,0
8002f7d8:	f0 0c 17 10 	movne	r12,r8
8002f7dc:	14 98       	mov	r8,r10
8002f7de:	18 99       	mov	r9,r12
8002f7e0:	e8 e9 00 08 	st.d	r4[8],r8
8002f7e4:	c7 b8       	rjmp	8002f8da <__kernel_rem_pio2+0x6d2>
8002f7e6:	e6 e0 00 00 	ld.d	r0,r3[0]
8002f7ea:	e6 e8 00 08 	ld.d	r8,r3[8]
8002f7ee:	00 9a       	mov	r10,r0
8002f7f0:	02 9b       	mov	r11,r1
8002f7f2:	e0 a0 06 59 	rcall	800304a4 <__avr32_f64_add>
8002f7f6:	fa eb 00 0c 	st.d	sp[12],r10
8002f7fa:	14 98       	mov	r8,r10
8002f7fc:	16 99       	mov	r9,r11
8002f7fe:	00 9a       	mov	r10,r0
8002f800:	02 9b       	mov	r11,r1
8002f802:	e0 a0 05 83 	rcall	80030308 <__avr32_f64_sub>
8002f806:	14 98       	mov	r8,r10
8002f808:	16 99       	mov	r9,r11
8002f80a:	e6 ea 00 08 	ld.d	r10,r3[8]
8002f80e:	e0 a0 06 4b 	rcall	800304a4 <__avr32_f64_add>
8002f812:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f816:	e6 eb 00 08 	st.d	r3[8],r10
8002f81a:	e6 e9 00 00 	st.d	r3[0],r8
8002f81e:	20 12       	sub	r2,1
8002f820:	20 83       	sub	r3,8
8002f822:	58 02       	cp.w	r2,0
8002f824:	fe 99 ff e1 	brgt	8002f7e6 <__kernel_rem_pio2+0x5de>
8002f828:	0e 93       	mov	r3,r7
8002f82a:	c2 18       	rjmp	8002f86c <__kernel_rem_pio2+0x664>
8002f82c:	80 03       	ld.sh	r3,r0[0x0]
8002f82e:	19 50       	ld.sh	r0,--r12
8002f830:	ec e0 00 00 	ld.d	r0,r6[0]
8002f834:	ec e8 00 08 	ld.d	r8,r6[8]
8002f838:	00 9a       	mov	r10,r0
8002f83a:	02 9b       	mov	r11,r1
8002f83c:	e0 a0 06 34 	rcall	800304a4 <__avr32_f64_add>
8002f840:	fa eb 00 0c 	st.d	sp[12],r10
8002f844:	14 98       	mov	r8,r10
8002f846:	16 99       	mov	r9,r11
8002f848:	00 9a       	mov	r10,r0
8002f84a:	02 9b       	mov	r11,r1
8002f84c:	e0 a0 05 5e 	rcall	80030308 <__avr32_f64_sub>
8002f850:	14 98       	mov	r8,r10
8002f852:	16 99       	mov	r9,r11
8002f854:	ec ea 00 08 	ld.d	r10,r6[8]
8002f858:	e0 a0 06 26 	rcall	800304a4 <__avr32_f64_add>
8002f85c:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f860:	ec eb 00 08 	st.d	r6[8],r10
8002f864:	ec e9 00 00 	st.d	r6[0],r8
8002f868:	20 13       	sub	r3,1
8002f86a:	20 86       	sub	r6,8
8002f86c:	58 13       	cp.w	r3,1
8002f86e:	fe 99 ff e1 	brgt	8002f830 <__kernel_rem_pio2+0x628>
8002f872:	0e 96       	mov	r6,r7
8002f874:	fa c8 ff 20 	sub	r8,sp,-224
8002f878:	30 0c       	mov	r12,0
8002f87a:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f87e:	18 9a       	mov	r10,r12
8002f880:	c0 a8       	rjmp	8002f894 <__kernel_rem_pio2+0x68c>
8002f882:	ee e8 00 00 	ld.d	r8,r7[0]
8002f886:	18 9b       	mov	r11,r12
8002f888:	20 87       	sub	r7,8
8002f88a:	06 9a       	mov	r10,r3
8002f88c:	20 16       	sub	r6,1
8002f88e:	e0 a0 06 0b 	rcall	800304a4 <__avr32_f64_add>
8002f892:	16 9c       	mov	r12,r11
8002f894:	14 93       	mov	r3,r10
8002f896:	58 16       	cp.w	r6,1
8002f898:	fe 99 ff f5 	brgt	8002f882 <__kernel_rem_pio2+0x67a>
8002f89c:	58 05       	cp.w	r5,0
8002f89e:	c0 e1       	brne	8002f8ba <__kernel_rem_pio2+0x6b2>
8002f8a0:	fa e8 00 e0 	ld.d	r8,sp[224]
8002f8a4:	e8 e9 00 00 	st.d	r4[0],r8
8002f8a8:	fa e8 00 e8 	ld.d	r8,sp[232]
8002f8ac:	e8 e9 00 08 	st.d	r4[8],r8
8002f8b0:	18 99       	mov	r9,r12
8002f8b2:	14 98       	mov	r8,r10
8002f8b4:	e8 e9 00 10 	st.d	r4[16],r8
8002f8b8:	c1 18       	rjmp	8002f8da <__kernel_rem_pio2+0x6d2>
8002f8ba:	89 5a       	st.w	r4[0x14],r10
8002f8bc:	ee 1c 80 00 	eorh	r12,0x8000
8002f8c0:	89 4c       	st.w	r4[0x10],r12
8002f8c2:	43 88       	lddsp	r8,sp[0xe0]
8002f8c4:	ee 18 80 00 	eorh	r8,0x8000
8002f8c8:	89 08       	st.w	r4[0x0],r8
8002f8ca:	43 98       	lddsp	r8,sp[0xe4]
8002f8cc:	89 18       	st.w	r4[0x4],r8
8002f8ce:	43 a8       	lddsp	r8,sp[0xe8]
8002f8d0:	ee 18 80 00 	eorh	r8,0x8000
8002f8d4:	89 28       	st.w	r4[0x8],r8
8002f8d6:	43 b8       	lddsp	r8,sp[0xec]
8002f8d8:	89 38       	st.w	r4[0xc],r8
8002f8da:	40 58       	lddsp	r8,sp[0x14]
8002f8dc:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8002f8e0:	fe 3d fd 90 	sub	sp,-624
8002f8e4:	d8 32       	popm	r0-r7,pc
8002f8e6:	d7 03       	nop

8002f8e8 <__kernel_sin>:
8002f8e8:	d4 31       	pushm	r0-r7,lr
8002f8ea:	20 4d       	sub	sp,16
8002f8ec:	fa e9 00 08 	st.d	sp[8],r8
8002f8f0:	50 0c       	stdsp	sp[0x0],r12
8002f8f2:	14 96       	mov	r6,r10
8002f8f4:	16 97       	mov	r7,r11
8002f8f6:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002f8fa:	e0 69 ff ff 	mov	r9,65535
8002f8fe:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f902:	12 38       	cp.w	r8,r9
8002f904:	e0 89 00 06 	brgt	8002f910 <__kernel_sin+0x28>
8002f908:	e0 a0 06 58 	rcall	800305b8 <__avr32_f64_to_s32>
8002f90c:	e0 80 00 b3 	breq	8002fa72 <__kernel_sin+0x18a>
8002f910:	0c 98       	mov	r8,r6
8002f912:	0e 99       	mov	r9,r7
8002f914:	0c 9a       	mov	r10,r6
8002f916:	0e 9b       	mov	r11,r7
8002f918:	e0 a0 04 0c 	rcall	80030130 <__avr32_f64_mul>
8002f91c:	0c 98       	mov	r8,r6
8002f91e:	14 94       	mov	r4,r10
8002f920:	16 95       	mov	r5,r11
8002f922:	0e 99       	mov	r9,r7
8002f924:	e0 a0 04 06 	rcall	80030130 <__avr32_f64_mul>
8002f928:	e0 68 d5 7c 	mov	r8,54652
8002f92c:	ea 18 5a cf 	orh	r8,0x5acf
8002f930:	e0 69 d9 3a 	mov	r9,55610
8002f934:	ea 19 3d e5 	orh	r9,0x3de5
8002f938:	14 90       	mov	r0,r10
8002f93a:	16 91       	mov	r1,r11
8002f93c:	08 9a       	mov	r10,r4
8002f93e:	0a 9b       	mov	r11,r5
8002f940:	e0 a0 03 f8 	rcall	80030130 <__avr32_f64_mul>
8002f944:	e0 68 9c eb 	mov	r8,40171
8002f948:	ea 18 8a 2b 	orh	r8,0x8a2b
8002f94c:	e0 69 e5 e6 	mov	r9,58854
8002f950:	ea 19 3e 5a 	orh	r9,0x3e5a
8002f954:	e0 a0 04 da 	rcall	80030308 <__avr32_f64_sub>
8002f958:	14 98       	mov	r8,r10
8002f95a:	16 99       	mov	r9,r11
8002f95c:	08 9a       	mov	r10,r4
8002f95e:	0a 9b       	mov	r11,r5
8002f960:	e0 a0 03 e8 	rcall	80030130 <__avr32_f64_mul>
8002f964:	e0 68 fe 7d 	mov	r8,65149
8002f968:	ea 18 57 b1 	orh	r8,0x57b1
8002f96c:	e0 69 1d e3 	mov	r9,7651
8002f970:	ea 19 3e c7 	orh	r9,0x3ec7
8002f974:	e0 a0 05 98 	rcall	800304a4 <__avr32_f64_add>
8002f978:	14 98       	mov	r8,r10
8002f97a:	16 99       	mov	r9,r11
8002f97c:	08 9a       	mov	r10,r4
8002f97e:	0a 9b       	mov	r11,r5
8002f980:	e0 a0 03 d8 	rcall	80030130 <__avr32_f64_mul>
8002f984:	e0 68 61 d5 	mov	r8,25045
8002f988:	ea 18 19 c1 	orh	r8,0x19c1
8002f98c:	e0 69 01 a0 	mov	r9,416
8002f990:	ea 19 3f 2a 	orh	r9,0x3f2a
8002f994:	e0 a0 04 ba 	rcall	80030308 <__avr32_f64_sub>
8002f998:	14 98       	mov	r8,r10
8002f99a:	16 99       	mov	r9,r11
8002f99c:	08 9a       	mov	r10,r4
8002f99e:	0a 9b       	mov	r11,r5
8002f9a0:	e0 a0 03 c8 	rcall	80030130 <__avr32_f64_mul>
8002f9a4:	e0 68 f8 a6 	mov	r8,63654
8002f9a8:	ea 18 11 10 	orh	r8,0x1110
8002f9ac:	e0 69 11 11 	mov	r9,4369
8002f9b0:	ea 19 3f 81 	orh	r9,0x3f81
8002f9b4:	e0 a0 05 78 	rcall	800304a4 <__avr32_f64_add>
8002f9b8:	40 08       	lddsp	r8,sp[0x0]
8002f9ba:	14 92       	mov	r2,r10
8002f9bc:	16 93       	mov	r3,r11
8002f9be:	58 08       	cp.w	r8,0
8002f9c0:	c1 e1       	brne	8002f9fc <__kernel_sin+0x114>
8002f9c2:	14 98       	mov	r8,r10
8002f9c4:	06 99       	mov	r9,r3
8002f9c6:	08 9a       	mov	r10,r4
8002f9c8:	0a 9b       	mov	r11,r5
8002f9ca:	e0 a0 03 b3 	rcall	80030130 <__avr32_f64_mul>
8002f9ce:	e0 68 55 49 	mov	r8,21833
8002f9d2:	ea 18 55 55 	orh	r8,0x5555
8002f9d6:	e0 69 55 55 	mov	r9,21845
8002f9da:	ea 19 3f c5 	orh	r9,0x3fc5
8002f9de:	e0 a0 04 95 	rcall	80030308 <__avr32_f64_sub>
8002f9e2:	14 98       	mov	r8,r10
8002f9e4:	16 99       	mov	r9,r11
8002f9e6:	00 9a       	mov	r10,r0
8002f9e8:	02 9b       	mov	r11,r1
8002f9ea:	e0 a0 03 a3 	rcall	80030130 <__avr32_f64_mul>
8002f9ee:	14 98       	mov	r8,r10
8002f9f0:	16 99       	mov	r9,r11
8002f9f2:	0c 9a       	mov	r10,r6
8002f9f4:	0e 9b       	mov	r11,r7
8002f9f6:	e0 a0 05 57 	rcall	800304a4 <__avr32_f64_add>
8002f9fa:	c3 a8       	rjmp	8002fa6e <__kernel_sin+0x186>
8002f9fc:	30 08       	mov	r8,0
8002f9fe:	fc 19 3f e0 	movh	r9,0x3fe0
8002fa02:	fa ea 00 08 	ld.d	r10,sp[8]
8002fa06:	e0 a0 03 95 	rcall	80030130 <__avr32_f64_mul>
8002fa0a:	04 98       	mov	r8,r2
8002fa0c:	fa eb 00 00 	st.d	sp[0],r10
8002fa10:	06 99       	mov	r9,r3
8002fa12:	00 9a       	mov	r10,r0
8002fa14:	02 9b       	mov	r11,r1
8002fa16:	e0 a0 03 8d 	rcall	80030130 <__avr32_f64_mul>
8002fa1a:	14 98       	mov	r8,r10
8002fa1c:	16 99       	mov	r9,r11
8002fa1e:	fa ea 00 00 	ld.d	r10,sp[0]
8002fa22:	e0 a0 04 73 	rcall	80030308 <__avr32_f64_sub>
8002fa26:	14 98       	mov	r8,r10
8002fa28:	16 99       	mov	r9,r11
8002fa2a:	08 9a       	mov	r10,r4
8002fa2c:	0a 9b       	mov	r11,r5
8002fa2e:	e0 a0 03 81 	rcall	80030130 <__avr32_f64_mul>
8002fa32:	fa e8 00 08 	ld.d	r8,sp[8]
8002fa36:	e0 a0 04 69 	rcall	80030308 <__avr32_f64_sub>
8002fa3a:	e0 68 55 49 	mov	r8,21833
8002fa3e:	ea 18 55 55 	orh	r8,0x5555
8002fa42:	14 94       	mov	r4,r10
8002fa44:	16 95       	mov	r5,r11
8002fa46:	e0 69 55 55 	mov	r9,21845
8002fa4a:	ea 19 3f c5 	orh	r9,0x3fc5
8002fa4e:	00 9a       	mov	r10,r0
8002fa50:	02 9b       	mov	r11,r1
8002fa52:	e0 a0 03 6f 	rcall	80030130 <__avr32_f64_mul>
8002fa56:	14 98       	mov	r8,r10
8002fa58:	16 99       	mov	r9,r11
8002fa5a:	08 9a       	mov	r10,r4
8002fa5c:	0a 9b       	mov	r11,r5
8002fa5e:	e0 a0 05 23 	rcall	800304a4 <__avr32_f64_add>
8002fa62:	14 98       	mov	r8,r10
8002fa64:	16 99       	mov	r9,r11
8002fa66:	0c 9a       	mov	r10,r6
8002fa68:	0e 9b       	mov	r11,r7
8002fa6a:	e0 a0 04 4f 	rcall	80030308 <__avr32_f64_sub>
8002fa6e:	14 96       	mov	r6,r10
8002fa70:	16 97       	mov	r7,r11
8002fa72:	0c 9a       	mov	r10,r6
8002fa74:	0e 9b       	mov	r11,r7
8002fa76:	2f cd       	sub	sp,-16
8002fa78:	d8 32       	popm	r0-r7,pc
8002fa7a:	d7 03       	nop

8002fa7c <atan>:
8002fa7c:	d4 31       	pushm	r0-r7,lr
8002fa7e:	20 1d       	sub	sp,4
8002fa80:	50 0b       	stdsp	sp[0x0],r11
8002fa82:	16 96       	mov	r6,r11
8002fa84:	14 97       	mov	r7,r10
8002fa86:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
8002fa8a:	e0 68 ff ff 	mov	r8,65535
8002fa8e:	ea 18 44 0f 	orh	r8,0x440f
8002fa92:	10 33       	cp.w	r3,r8
8002fa94:	e0 8a 00 24 	brle	8002fadc <atan+0x60>
8002fa98:	fc 1c 7f f0 	movh	r12,0x7ff0
8002fa9c:	18 33       	cp.w	r3,r12
8002fa9e:	e0 89 00 08 	brgt	8002faae <atan+0x32>
8002faa2:	5f 0c       	sreq	r12
8002faa4:	58 0a       	cp.w	r10,0
8002faa6:	5f 18       	srne	r8
8002faa8:	f9 e8 00 08 	and	r8,r12,r8
8002faac:	c0 80       	breq	8002fabc <atan+0x40>
8002faae:	0c 9b       	mov	r11,r6
8002fab0:	0e 9a       	mov	r10,r7
8002fab2:	0c 99       	mov	r9,r6
8002fab4:	0e 98       	mov	r8,r7
8002fab6:	e0 a0 04 f7 	rcall	800304a4 <__avr32_f64_add>
8002faba:	c5 99       	rjmp	8002fd6c <atan+0x2f0>
8002fabc:	e0 68 21 fb 	mov	r8,8699
8002fac0:	ea 18 bf f9 	orh	r8,0xbff9
8002fac4:	e0 66 21 fb 	mov	r6,8699
8002fac8:	ea 16 3f f9 	orh	r6,0x3ff9
8002facc:	e0 67 2d 18 	mov	r7,11544
8002fad0:	ea 17 54 44 	orh	r7,0x5444
8002fad4:	58 0b       	cp.w	r11,0
8002fad6:	f0 06 17 a0 	movle	r6,r8
8002fada:	c6 d9       	rjmp	8002fdb4 <atan+0x338>
8002fadc:	e0 68 ff ff 	mov	r8,65535
8002fae0:	ea 18 3f db 	orh	r8,0x3fdb
8002fae4:	10 33       	cp.w	r3,r8
8002fae6:	e0 89 00 1d 	brgt	8002fb20 <atan+0xa4>
8002faea:	e0 6c ff ff 	mov	r12,65535
8002faee:	ea 1c 3e 1f 	orh	r12,0x3e1f
8002faf2:	18 33       	cp.w	r3,r12
8002faf4:	e0 89 00 73 	brgt	8002fbda <atan+0x15e>
8002faf8:	e0 68 75 9c 	mov	r8,30108
8002fafc:	ea 18 88 00 	orh	r8,0x8800
8002fb00:	e0 69 e4 3c 	mov	r9,58428
8002fb04:	ea 19 7e 37 	orh	r9,0x7e37
8002fb08:	0c 9b       	mov	r11,r6
8002fb0a:	e0 a0 04 cd 	rcall	800304a4 <__avr32_f64_add>
8002fb0e:	14 98       	mov	r8,r10
8002fb10:	16 99       	mov	r9,r11
8002fb12:	30 0a       	mov	r10,0
8002fb14:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fb18:	e0 a0 06 1e 	rcall	80030754 <__avr32_f64_cmp_lt>
8002fb1c:	c5 f0       	breq	8002fbda <atan+0x15e>
8002fb1e:	c4 b9       	rjmp	8002fdb4 <atan+0x338>
8002fb20:	0c 9b       	mov	r11,r6
8002fb22:	c5 1d       	rcall	8002fdc4 <fabs>
8002fb24:	e0 68 ff ff 	mov	r8,65535
8002fb28:	ea 18 3f f2 	orh	r8,0x3ff2
8002fb2c:	14 94       	mov	r4,r10
8002fb2e:	16 95       	mov	r5,r11
8002fb30:	10 33       	cp.w	r3,r8
8002fb32:	e0 89 00 33 	brgt	8002fb98 <atan+0x11c>
8002fb36:	e0 6c ff ff 	mov	r12,65535
8002fb3a:	ea 1c 3f e5 	orh	r12,0x3fe5
8002fb3e:	18 33       	cp.w	r3,r12
8002fb40:	e0 89 00 14 	brgt	8002fb68 <atan+0xec>
8002fb44:	0a 99       	mov	r9,r5
8002fb46:	14 98       	mov	r8,r10
8002fb48:	e0 a0 04 ae 	rcall	800304a4 <__avr32_f64_add>
8002fb4c:	30 08       	mov	r8,0
8002fb4e:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb52:	e0 a0 03 db 	rcall	80030308 <__avr32_f64_sub>
8002fb56:	30 08       	mov	r8,0
8002fb58:	14 96       	mov	r6,r10
8002fb5a:	16 97       	mov	r7,r11
8002fb5c:	08 9a       	mov	r10,r4
8002fb5e:	0a 9b       	mov	r11,r5
8002fb60:	fc 19 40 00 	movh	r9,0x4000
8002fb64:	30 05       	mov	r5,0
8002fb66:	c0 e8       	rjmp	8002fb82 <atan+0x106>
8002fb68:	30 08       	mov	r8,0
8002fb6a:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb6e:	e0 a0 03 cd 	rcall	80030308 <__avr32_f64_sub>
8002fb72:	30 08       	mov	r8,0
8002fb74:	14 96       	mov	r6,r10
8002fb76:	16 97       	mov	r7,r11
8002fb78:	08 9a       	mov	r10,r4
8002fb7a:	0a 9b       	mov	r11,r5
8002fb7c:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb80:	30 15       	mov	r5,1
8002fb82:	e0 a0 04 91 	rcall	800304a4 <__avr32_f64_add>
8002fb86:	14 98       	mov	r8,r10
8002fb88:	16 99       	mov	r9,r11
8002fb8a:	0c 9a       	mov	r10,r6
8002fb8c:	0e 9b       	mov	r11,r7
8002fb8e:	e0 a0 06 17 	rcall	800307bc <__avr32_f64_div>
8002fb92:	16 96       	mov	r6,r11
8002fb94:	14 97       	mov	r7,r10
8002fb96:	c2 38       	rjmp	8002fbdc <atan+0x160>
8002fb98:	e0 68 7f ff 	mov	r8,32767
8002fb9c:	ea 18 40 03 	orh	r8,0x4003
8002fba0:	10 33       	cp.w	r3,r8
8002fba2:	e0 89 00 15 	brgt	8002fbcc <atan+0x150>
8002fba6:	30 08       	mov	r8,0
8002fba8:	fc 19 3f f8 	movh	r9,0x3ff8
8002fbac:	e0 a0 03 ae 	rcall	80030308 <__avr32_f64_sub>
8002fbb0:	30 08       	mov	r8,0
8002fbb2:	16 97       	mov	r7,r11
8002fbb4:	fc 19 3f f8 	movh	r9,0x3ff8
8002fbb8:	0a 9b       	mov	r11,r5
8002fbba:	14 96       	mov	r6,r10
8002fbbc:	08 9a       	mov	r10,r4
8002fbbe:	e0 a0 02 b9 	rcall	80030130 <__avr32_f64_mul>
8002fbc2:	30 08       	mov	r8,0
8002fbc4:	fc 19 3f f0 	movh	r9,0x3ff0
8002fbc8:	30 25       	mov	r5,2
8002fbca:	cd cb       	rjmp	8002fb82 <atan+0x106>
8002fbcc:	14 98       	mov	r8,r10
8002fbce:	0a 99       	mov	r9,r5
8002fbd0:	30 0a       	mov	r10,0
8002fbd2:	fc 1b bf f0 	movh	r11,0xbff0
8002fbd6:	30 35       	mov	r5,3
8002fbd8:	cd bb       	rjmp	8002fb8e <atan+0x112>
8002fbda:	3f f5       	mov	r5,-1
8002fbdc:	0c 99       	mov	r9,r6
8002fbde:	0e 98       	mov	r8,r7
8002fbe0:	0c 9b       	mov	r11,r6
8002fbe2:	0e 9a       	mov	r10,r7
8002fbe4:	e0 a0 02 a6 	rcall	80030130 <__avr32_f64_mul>
8002fbe8:	16 91       	mov	r1,r11
8002fbea:	14 90       	mov	r0,r10
8002fbec:	02 99       	mov	r9,r1
8002fbee:	14 98       	mov	r8,r10
8002fbf0:	e0 a0 02 a0 	rcall	80030130 <__avr32_f64_mul>
8002fbf4:	e0 68 da 11 	mov	r8,55825
8002fbf8:	ea 18 e3 22 	orh	r8,0xe322
8002fbfc:	14 92       	mov	r2,r10
8002fbfe:	16 93       	mov	r3,r11
8002fc00:	e0 69 ad 3a 	mov	r9,44346
8002fc04:	ea 19 3f 90 	orh	r9,0x3f90
8002fc08:	e0 a0 02 94 	rcall	80030130 <__avr32_f64_mul>
8002fc0c:	e0 68 0d eb 	mov	r8,3563
8002fc10:	ea 18 24 76 	orh	r8,0x2476
8002fc14:	e0 69 7b 4b 	mov	r9,31563
8002fc18:	ea 19 3f a9 	orh	r9,0x3fa9
8002fc1c:	e0 a0 04 44 	rcall	800304a4 <__avr32_f64_add>
8002fc20:	14 98       	mov	r8,r10
8002fc22:	16 99       	mov	r9,r11
8002fc24:	04 9a       	mov	r10,r2
8002fc26:	06 9b       	mov	r11,r3
8002fc28:	e0 a0 02 84 	rcall	80030130 <__avr32_f64_mul>
8002fc2c:	e0 68 3d 51 	mov	r8,15697
8002fc30:	ea 18 a0 d0 	orh	r8,0xa0d0
8002fc34:	e0 69 0d 66 	mov	r9,3430
8002fc38:	ea 19 3f b1 	orh	r9,0x3fb1
8002fc3c:	e0 a0 04 34 	rcall	800304a4 <__avr32_f64_add>
8002fc40:	14 98       	mov	r8,r10
8002fc42:	16 99       	mov	r9,r11
8002fc44:	04 9a       	mov	r10,r2
8002fc46:	06 9b       	mov	r11,r3
8002fc48:	e0 a0 02 74 	rcall	80030130 <__avr32_f64_mul>
8002fc4c:	e0 68 20 6e 	mov	r8,8302
8002fc50:	ea 18 c5 4c 	orh	r8,0xc54c
8002fc54:	e0 69 45 cd 	mov	r9,17869
8002fc58:	ea 19 3f b7 	orh	r9,0x3fb7
8002fc5c:	e0 a0 04 24 	rcall	800304a4 <__avr32_f64_add>
8002fc60:	14 98       	mov	r8,r10
8002fc62:	16 99       	mov	r9,r11
8002fc64:	04 9a       	mov	r10,r2
8002fc66:	06 9b       	mov	r11,r3
8002fc68:	e0 a0 02 64 	rcall	80030130 <__avr32_f64_mul>
8002fc6c:	e0 68 83 ff 	mov	r8,33791
8002fc70:	ea 18 92 00 	orh	r8,0x9200
8002fc74:	e0 69 49 24 	mov	r9,18724
8002fc78:	ea 19 3f c2 	orh	r9,0x3fc2
8002fc7c:	e0 a0 04 14 	rcall	800304a4 <__avr32_f64_add>
8002fc80:	14 98       	mov	r8,r10
8002fc82:	16 99       	mov	r9,r11
8002fc84:	04 9a       	mov	r10,r2
8002fc86:	06 9b       	mov	r11,r3
8002fc88:	e0 a0 02 54 	rcall	80030130 <__avr32_f64_mul>
8002fc8c:	e0 68 55 0d 	mov	r8,21773
8002fc90:	ea 18 55 55 	orh	r8,0x5555
8002fc94:	e0 69 55 55 	mov	r9,21845
8002fc98:	ea 19 3f d5 	orh	r9,0x3fd5
8002fc9c:	e0 a0 04 04 	rcall	800304a4 <__avr32_f64_add>
8002fca0:	14 98       	mov	r8,r10
8002fca2:	16 99       	mov	r9,r11
8002fca4:	00 9a       	mov	r10,r0
8002fca6:	02 9b       	mov	r11,r1
8002fca8:	e0 a0 02 44 	rcall	80030130 <__avr32_f64_mul>
8002fcac:	e0 68 6c 2f 	mov	r8,27695
8002fcb0:	ea 18 2c 6a 	orh	r8,0x2c6a
8002fcb4:	e0 69 b4 44 	mov	r9,46148
8002fcb8:	ea 19 bf a2 	orh	r9,0xbfa2
8002fcbc:	14 90       	mov	r0,r10
8002fcbe:	16 91       	mov	r1,r11
8002fcc0:	04 9a       	mov	r10,r2
8002fcc2:	06 9b       	mov	r11,r3
8002fcc4:	e0 a0 02 36 	rcall	80030130 <__avr32_f64_mul>
8002fcc8:	e0 68 fd 9a 	mov	r8,64922
8002fccc:	ea 18 52 de 	orh	r8,0x52de
8002fcd0:	e0 69 de 2d 	mov	r9,56877
8002fcd4:	ea 19 3f ad 	orh	r9,0x3fad
8002fcd8:	e0 a0 03 18 	rcall	80030308 <__avr32_f64_sub>
8002fcdc:	14 98       	mov	r8,r10
8002fcde:	16 99       	mov	r9,r11
8002fce0:	04 9a       	mov	r10,r2
8002fce2:	06 9b       	mov	r11,r3
8002fce4:	e0 a0 02 26 	rcall	80030130 <__avr32_f64_mul>
8002fce8:	e0 68 9a 6d 	mov	r8,39533
8002fcec:	ea 18 af 74 	orh	r8,0xaf74
8002fcf0:	e0 69 b0 f2 	mov	r9,45298
8002fcf4:	ea 19 3f b3 	orh	r9,0x3fb3
8002fcf8:	e0 a0 03 08 	rcall	80030308 <__avr32_f64_sub>
8002fcfc:	14 98       	mov	r8,r10
8002fcfe:	16 99       	mov	r9,r11
8002fd00:	04 9a       	mov	r10,r2
8002fd02:	06 9b       	mov	r11,r3
8002fd04:	e0 a0 02 16 	rcall	80030130 <__avr32_f64_mul>
8002fd08:	e0 68 16 71 	mov	r8,5745
8002fd0c:	ea 18 fe 23 	orh	r8,0xfe23
8002fd10:	e0 69 71 c6 	mov	r9,29126
8002fd14:	ea 19 3f bc 	orh	r9,0x3fbc
8002fd18:	e0 a0 02 f8 	rcall	80030308 <__avr32_f64_sub>
8002fd1c:	14 98       	mov	r8,r10
8002fd1e:	16 99       	mov	r9,r11
8002fd20:	04 9a       	mov	r10,r2
8002fd22:	06 9b       	mov	r11,r3
8002fd24:	e0 a0 02 06 	rcall	80030130 <__avr32_f64_mul>
8002fd28:	e0 68 eb c4 	mov	r8,60356
8002fd2c:	ea 18 99 98 	orh	r8,0x9998
8002fd30:	e0 69 99 99 	mov	r9,39321
8002fd34:	ea 19 3f c9 	orh	r9,0x3fc9
8002fd38:	e0 a0 02 e8 	rcall	80030308 <__avr32_f64_sub>
8002fd3c:	14 98       	mov	r8,r10
8002fd3e:	16 99       	mov	r9,r11
8002fd40:	04 9a       	mov	r10,r2
8002fd42:	06 9b       	mov	r11,r3
8002fd44:	cf 6d       	rcall	80030130 <__avr32_f64_mul>
8002fd46:	14 98       	mov	r8,r10
8002fd48:	16 99       	mov	r9,r11
8002fd4a:	5b f5       	cp.w	r5,-1
8002fd4c:	c1 31       	brne	8002fd72 <atan+0x2f6>
8002fd4e:	00 9a       	mov	r10,r0
8002fd50:	02 9b       	mov	r11,r1
8002fd52:	e0 a0 03 a9 	rcall	800304a4 <__avr32_f64_add>
8002fd56:	14 98       	mov	r8,r10
8002fd58:	16 99       	mov	r9,r11
8002fd5a:	0e 9a       	mov	r10,r7
8002fd5c:	0c 9b       	mov	r11,r6
8002fd5e:	ce 9d       	rcall	80030130 <__avr32_f64_mul>
8002fd60:	14 98       	mov	r8,r10
8002fd62:	16 99       	mov	r9,r11
8002fd64:	0e 9a       	mov	r10,r7
8002fd66:	0c 9b       	mov	r11,r6
8002fd68:	e0 a0 02 d0 	rcall	80030308 <__avr32_f64_sub>
8002fd6c:	16 96       	mov	r6,r11
8002fd6e:	14 97       	mov	r7,r10
8002fd70:	c2 28       	rjmp	8002fdb4 <atan+0x338>
8002fd72:	00 9a       	mov	r10,r0
8002fd74:	02 9b       	mov	r11,r1
8002fd76:	e0 a0 03 97 	rcall	800304a4 <__avr32_f64_add>
8002fd7a:	14 98       	mov	r8,r10
8002fd7c:	16 99       	mov	r9,r11
8002fd7e:	0e 9a       	mov	r10,r7
8002fd80:	0c 9b       	mov	r11,r6
8002fd82:	cd 7d       	rcall	80030130 <__avr32_f64_mul>
8002fd84:	48 e8       	lddpc	r8,8002fdbc <atan+0x340>
8002fd86:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
8002fd8a:	e0 a0 02 bf 	rcall	80030308 <__avr32_f64_sub>
8002fd8e:	0c 99       	mov	r9,r6
8002fd90:	0e 98       	mov	r8,r7
8002fd92:	e0 a0 02 bb 	rcall	80030308 <__avr32_f64_sub>
8002fd96:	14 98       	mov	r8,r10
8002fd98:	16 99       	mov	r9,r11
8002fd9a:	48 aa       	lddpc	r10,8002fdc0 <atan+0x344>
8002fd9c:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
8002fda0:	e0 a0 02 b4 	rcall	80030308 <__avr32_f64_sub>
8002fda4:	40 0c       	lddsp	r12,sp[0x0]
8002fda6:	16 96       	mov	r6,r11
8002fda8:	14 97       	mov	r7,r10
8002fdaa:	ee 16 80 00 	eorh	r6,0x8000
8002fdae:	58 0c       	cp.w	r12,0
8002fdb0:	c0 25       	brlt	8002fdb4 <atan+0x338>
8002fdb2:	16 96       	mov	r6,r11
8002fdb4:	0c 9b       	mov	r11,r6
8002fdb6:	0e 9a       	mov	r10,r7
8002fdb8:	2f fd       	sub	sp,-4
8002fdba:	d8 32       	popm	r0-r7,pc
8002fdbc:	80 03       	ld.sh	r3,r0[0x0]
8002fdbe:	19 90       	ld.ub	r0,r12[0x1]
8002fdc0:	80 03       	ld.sh	r3,r0[0x0]
8002fdc2:	19 b0       	ld.ub	r0,r12[0x3]

8002fdc4 <fabs>:
8002fdc4:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002fdc8:	12 9b       	mov	r11,r9
8002fdca:	5e fc       	retal	r12

8002fdcc <finite>:
8002fdcc:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002fdd0:	fc 18 80 10 	movh	r8,0x8010
8002fdd4:	f6 08 00 0c 	add	r12,r11,r8
8002fdd8:	bf 9c       	lsr	r12,0x1f
8002fdda:	5e fc       	retal	r12

8002fddc <floor>:
8002fddc:	d4 31       	pushm	r0-r7,lr
8002fdde:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8002fde2:	14 98       	mov	r8,r10
8002fde4:	16 99       	mov	r9,r11
8002fde6:	14 92       	mov	r2,r10
8002fde8:	16 93       	mov	r3,r11
8002fdea:	16 97       	mov	r7,r11
8002fdec:	14 91       	mov	r1,r10
8002fdee:	14 96       	mov	r6,r10
8002fdf0:	e8 c5 03 ff 	sub	r5,r4,1023
8002fdf4:	59 35       	cp.w	r5,19
8002fdf6:	e0 89 00 48 	brgt	8002fe86 <floor+0xaa>
8002fdfa:	58 05       	cp.w	r5,0
8002fdfc:	c2 04       	brge	8002fe3c <floor+0x60>
8002fdfe:	e0 68 75 9c 	mov	r8,30108
8002fe02:	ea 18 88 00 	orh	r8,0x8800
8002fe06:	e0 69 e4 3c 	mov	r9,58428
8002fe0a:	ea 19 7e 37 	orh	r9,0x7e37
8002fe0e:	e0 a0 03 4b 	rcall	800304a4 <__avr32_f64_add>
8002fe12:	14 98       	mov	r8,r10
8002fe14:	16 99       	mov	r9,r11
8002fe16:	30 0a       	mov	r10,0
8002fe18:	30 0b       	mov	r11,0
8002fe1a:	e0 a0 04 9d 	rcall	80030754 <__avr32_f64_cmp_lt>
8002fe1e:	c6 a0       	breq	8002fef2 <floor+0x116>
8002fe20:	58 03       	cp.w	r3,0
8002fe22:	c0 45       	brlt	8002fe2a <floor+0x4e>
8002fe24:	30 06       	mov	r6,0
8002fe26:	0c 97       	mov	r7,r6
8002fe28:	c6 58       	rjmp	8002fef2 <floor+0x116>
8002fe2a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8002fe2e:	f1 e2 10 06 	or	r6,r8,r2
8002fe32:	fc 18 bf f0 	movh	r8,0xbff0
8002fe36:	f0 07 17 10 	movne	r7,r8
8002fe3a:	c2 48       	rjmp	8002fe82 <floor+0xa6>
8002fe3c:	ee 74 ff ff 	mov	r4,1048575
8002fe40:	e8 05 08 44 	asr	r4,r4,r5
8002fe44:	e9 eb 00 0c 	and	r12,r4,r11
8002fe48:	f9 ea 10 01 	or	r1,r12,r10
8002fe4c:	c5 50       	breq	8002fef6 <floor+0x11a>
8002fe4e:	e0 68 75 9c 	mov	r8,30108
8002fe52:	ea 18 88 00 	orh	r8,0x8800
8002fe56:	e0 69 e4 3c 	mov	r9,58428
8002fe5a:	ea 19 7e 37 	orh	r9,0x7e37
8002fe5e:	e0 a0 03 23 	rcall	800304a4 <__avr32_f64_add>
8002fe62:	14 98       	mov	r8,r10
8002fe64:	16 99       	mov	r9,r11
8002fe66:	30 0a       	mov	r10,0
8002fe68:	30 0b       	mov	r11,0
8002fe6a:	e0 a0 04 75 	rcall	80030754 <__avr32_f64_cmp_lt>
8002fe6e:	c4 20       	breq	8002fef2 <floor+0x116>
8002fe70:	58 03       	cp.w	r3,0
8002fe72:	c0 64       	brge	8002fe7e <floor+0xa2>
8002fe74:	fc 18 00 10 	movh	r8,0x10
8002fe78:	f0 05 08 45 	asr	r5,r8,r5
8002fe7c:	0a 07       	add	r7,r5
8002fe7e:	5c d4       	com	r4
8002fe80:	08 67       	and	r7,r4
8002fe82:	30 06       	mov	r6,0
8002fe84:	c3 78       	rjmp	8002fef2 <floor+0x116>
8002fe86:	e0 45 00 33 	cp.w	r5,51
8002fe8a:	e0 8a 00 0a 	brle	8002fe9e <floor+0xc2>
8002fe8e:	e0 45 04 00 	cp.w	r5,1024
8002fe92:	c3 21       	brne	8002fef6 <floor+0x11a>
8002fe94:	e0 a0 03 08 	rcall	800304a4 <__avr32_f64_add>
8002fe98:	14 98       	mov	r8,r10
8002fe9a:	16 99       	mov	r9,r11
8002fe9c:	c2 d8       	rjmp	8002fef6 <floor+0x11a>
8002fe9e:	3f fc       	mov	r12,-1
8002fea0:	e8 c4 04 13 	sub	r4,r4,1043
8002fea4:	f8 04 0a 44 	lsr	r4,r12,r4
8002fea8:	e9 ea 00 0c 	and	r12,r4,r10
8002feac:	c2 50       	breq	8002fef6 <floor+0x11a>
8002feae:	e0 68 75 9c 	mov	r8,30108
8002feb2:	ea 18 88 00 	orh	r8,0x8800
8002feb6:	e0 69 e4 3c 	mov	r9,58428
8002feba:	ea 19 7e 37 	orh	r9,0x7e37
8002febe:	e0 a0 02 f3 	rcall	800304a4 <__avr32_f64_add>
8002fec2:	14 98       	mov	r8,r10
8002fec4:	16 99       	mov	r9,r11
8002fec6:	30 0a       	mov	r10,0
8002fec8:	30 0b       	mov	r11,0
8002feca:	e0 a0 04 45 	rcall	80030754 <__avr32_f64_cmp_lt>
8002fece:	c1 20       	breq	8002fef2 <floor+0x116>
8002fed0:	58 03       	cp.w	r3,0
8002fed2:	c0 e4       	brge	8002feee <floor+0x112>
8002fed4:	59 45       	cp.w	r5,20
8002fed6:	c0 31       	brne	8002fedc <floor+0x100>
8002fed8:	2f f7       	sub	r7,-1
8002feda:	c0 a8       	rjmp	8002feee <floor+0x112>
8002fedc:	30 18       	mov	r8,1
8002fede:	ea 05 11 34 	rsub	r5,r5,52
8002fee2:	f0 05 09 45 	lsl	r5,r8,r5
8002fee6:	0a 06       	add	r6,r5
8002fee8:	04 36       	cp.w	r6,r2
8002feea:	e7 d8 e3 07 	addcs	r7,r3,r8
8002feee:	5c d4       	com	r4
8002fef0:	08 66       	and	r6,r4
8002fef2:	0e 99       	mov	r9,r7
8002fef4:	0c 98       	mov	r8,r6
8002fef6:	10 9a       	mov	r10,r8
8002fef8:	12 9b       	mov	r11,r9
8002fefa:	d8 32       	popm	r0-r7,pc

8002fefc <__isnand>:
8002fefc:	14 98       	mov	r8,r10
8002fefe:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8002ff02:	f0 0c 11 00 	rsub	r12,r8,0
8002ff06:	10 4c       	or	r12,r8
8002ff08:	fc 18 7f f0 	movh	r8,0x7ff0
8002ff0c:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8002ff10:	f0 0c 01 0c 	sub	r12,r8,r12
8002ff14:	bf 9c       	lsr	r12,0x1f
8002ff16:	5e fc       	retal	r12

8002ff18 <matherr>:
8002ff18:	5e fd       	retal	0

8002ff1a <nan>:
8002ff1a:	30 0a       	mov	r10,0
8002ff1c:	fc 1b 7f f8 	movh	r11,0x7ff8
8002ff20:	5e fc       	retal	r12
8002ff22:	d7 03       	nop

8002ff24 <rint>:
8002ff24:	d4 21       	pushm	r4-r7,lr
8002ff26:	20 2d       	sub	sp,8
8002ff28:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
8002ff2c:	14 94       	mov	r4,r10
8002ff2e:	16 95       	mov	r5,r11
8002ff30:	14 98       	mov	r8,r10
8002ff32:	16 9e       	mov	lr,r11
8002ff34:	16 9c       	mov	r12,r11
8002ff36:	f6 07 16 1f 	lsr	r7,r11,0x1f
8002ff3a:	ec c9 03 ff 	sub	r9,r6,1023
8002ff3e:	59 39       	cp.w	r9,19
8002ff40:	e0 89 00 49 	brgt	8002ffd2 <rint+0xae>
8002ff44:	58 09       	cp.w	r9,0
8002ff46:	c2 b4       	brge	8002ff9c <rint+0x78>
8002ff48:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002ff4c:	14 49       	or	r9,r10
8002ff4e:	c7 10       	breq	80030030 <rint+0x10c>
8002ff50:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
8002ff54:	4b 9c       	lddpc	r12,80030038 <rint+0x114>
8002ff56:	fd e4 10 08 	or	r8,lr,r4
8002ff5a:	16 99       	mov	r9,r11
8002ff5c:	f0 0e 11 00 	rsub	lr,r8,0
8002ff60:	e6 19 ff fe 	andh	r9,0xfffe,COH
8002ff64:	fd e8 10 08 	or	r8,lr,r8
8002ff68:	ad 88       	lsr	r8,0xc
8002ff6a:	e6 18 00 08 	andh	r8,0x8,COH
8002ff6e:	f1 e9 10 0b 	or	r11,r8,r9
8002ff72:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8002ff76:	14 98       	mov	r8,r10
8002ff78:	16 99       	mov	r9,r11
8002ff7a:	08 9a       	mov	r10,r4
8002ff7c:	0a 9b       	mov	r11,r5
8002ff7e:	e0 a0 02 93 	rcall	800304a4 <__avr32_f64_add>
8002ff82:	08 98       	mov	r8,r4
8002ff84:	fa eb 00 00 	st.d	sp[0],r10
8002ff88:	0a 99       	mov	r9,r5
8002ff8a:	fa ea 00 00 	ld.d	r10,sp[0]
8002ff8e:	cb dd       	rcall	80030308 <__avr32_f64_sub>
8002ff90:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002ff94:	14 94       	mov	r4,r10
8002ff96:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
8002ff9a:	c4 b8       	rjmp	80030030 <rint+0x10c>
8002ff9c:	ee 7a ff ff 	mov	r10,1048575
8002ffa0:	f4 09 08 4a 	asr	r10,r10,r9
8002ffa4:	f5 eb 00 0b 	and	r11,r10,r11
8002ffa8:	08 4b       	or	r11,r4
8002ffaa:	c4 30       	breq	80030030 <rint+0x10c>
8002ffac:	a1 9a       	lsr	r10,0x1
8002ffae:	f5 e5 00 0b 	and	r11,r10,r5
8002ffb2:	08 4b       	or	r11,r4
8002ffb4:	c0 31       	brne	8002ffba <rint+0x96>
8002ffb6:	16 98       	mov	r8,r11
8002ffb8:	c2 b8       	rjmp	8003000e <rint+0xea>
8002ffba:	59 39       	cp.w	r9,19
8002ffbc:	c0 41       	brne	8002ffc4 <rint+0xa0>
8002ffbe:	fc 18 40 00 	movh	r8,0x4000
8002ffc2:	c2 68       	rjmp	8003000e <rint+0xea>
8002ffc4:	14 8c       	andn	r12,r10
8002ffc6:	e2 6a 00 00 	mov	r10,131072
8002ffca:	f4 09 08 49 	asr	r9,r10,r9
8002ffce:	12 4c       	or	r12,r9
8002ffd0:	c1 f8       	rjmp	8003000e <rint+0xea>
8002ffd2:	e0 49 00 33 	cp.w	r9,51
8002ffd6:	e0 8a 00 0a 	brle	8002ffea <rint+0xc6>
8002ffda:	e0 49 04 00 	cp.w	r9,1024
8002ffde:	c2 91       	brne	80030030 <rint+0x10c>
8002ffe0:	14 98       	mov	r8,r10
8002ffe2:	16 99       	mov	r9,r11
8002ffe4:	e0 a0 02 60 	rcall	800304a4 <__avr32_f64_add>
8002ffe8:	c2 28       	rjmp	8003002c <rint+0x108>
8002ffea:	ec c6 04 13 	sub	r6,r6,1043
8002ffee:	3f f9       	mov	r9,-1
8002fff0:	f2 06 0a 49 	lsr	r9,r9,r6
8002fff4:	f3 ea 00 0a 	and	r10,r9,r10
8002fff8:	c1 c0       	breq	80030030 <rint+0x10c>
8002fffa:	a1 99       	lsr	r9,0x1
8002fffc:	f3 e4 00 0a 	and	r10,r9,r4
80030000:	c0 70       	breq	8003000e <rint+0xea>
80030002:	12 88       	andn	r8,r9
80030004:	fc 19 40 00 	movh	r9,0x4000
80030008:	f2 06 08 46 	asr	r6,r9,r6
8003000c:	0c 48       	or	r8,r6
8003000e:	48 ba       	lddpc	r10,80030038 <rint+0x114>
80030010:	18 99       	mov	r9,r12
80030012:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
80030016:	0c 9a       	mov	r10,r6
80030018:	0e 9b       	mov	r11,r7
8003001a:	e0 a0 02 45 	rcall	800304a4 <__avr32_f64_add>
8003001e:	0c 98       	mov	r8,r6
80030020:	fa eb 00 00 	st.d	sp[0],r10
80030024:	0e 99       	mov	r9,r7
80030026:	fa ea 00 00 	ld.d	r10,sp[0]
8003002a:	c6 fd       	rcall	80030308 <__avr32_f64_sub>
8003002c:	14 94       	mov	r4,r10
8003002e:	16 95       	mov	r5,r11
80030030:	08 9a       	mov	r10,r4
80030032:	0a 9b       	mov	r11,r5
80030034:	2f ed       	sub	sp,-8
80030036:	d8 22       	popm	r4-r7,pc
80030038:	80 03       	ld.sh	r3,r0[0x0]
8003003a:	19 d0       	ld.ub	r0,r12[0x5]

8003003c <scalbn>:
8003003c:	d4 21       	pushm	r4-r7,lr
8003003e:	18 97       	mov	r7,r12
80030040:	14 98       	mov	r8,r10
80030042:	16 99       	mov	r9,r11
80030044:	14 94       	mov	r4,r10
80030046:	16 95       	mov	r5,r11
80030048:	14 96       	mov	r6,r10
8003004a:	16 9c       	mov	r12,r11
8003004c:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80030050:	c1 11       	brne	80030072 <scalbn+0x36>
80030052:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80030056:	14 4c       	or	r12,r10
80030058:	c5 c0       	breq	80030110 <scalbn+0xd4>
8003005a:	30 08       	mov	r8,0
8003005c:	fc 19 43 50 	movh	r9,0x4350
80030060:	c6 8c       	rcall	80030130 <__avr32_f64_mul>
80030062:	16 99       	mov	r9,r11
80030064:	14 98       	mov	r8,r10
80030066:	14 94       	mov	r4,r10
80030068:	12 95       	mov	r5,r9
8003006a:	fe 57 3c b0 	cp.w	r7,-50000
8003006e:	c0 84       	brge	8003007e <scalbn+0x42>
80030070:	c3 a8       	rjmp	800300e4 <scalbn+0xa8>
80030072:	e0 4e 07 ff 	cp.w	lr,2047
80030076:	c0 81       	brne	80030086 <scalbn+0x4a>
80030078:	e0 a0 02 16 	rcall	800304a4 <__avr32_f64_add>
8003007c:	c4 88       	rjmp	8003010c <scalbn+0xd0>
8003007e:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
80030082:	12 9c       	mov	r12,r9
80030084:	23 6e       	sub	lr,54
80030086:	0e 0e       	add	lr,r7
80030088:	e0 4e 07 fe 	cp.w	lr,2046
8003008c:	e0 89 00 11 	brgt	800300ae <scalbn+0x72>
80030090:	58 0e       	cp.w	lr,0
80030092:	e0 8a 00 07 	brle	800300a0 <scalbn+0x64>
80030096:	e4 1c 80 0f 	andh	r12,0x800f
8003009a:	f9 ee 11 49 	or	r9,r12,lr<<0x14
8003009e:	c3 98       	rjmp	80030110 <scalbn+0xd4>
800300a0:	fe 5e ff cb 	cp.w	lr,-53
800300a4:	c2 94       	brge	800300f6 <scalbn+0xba>
800300a6:	e0 47 c3 50 	cp.w	r7,50000
800300aa:	e0 8a 00 14 	brle	800300d2 <scalbn+0x96>
800300ae:	e0 6a 75 9c 	mov	r10,30108
800300b2:	ea 1a 88 00 	orh	r10,0x8800
800300b6:	e0 6b e4 3c 	mov	r11,58428
800300ba:	ea 1b 7e 37 	orh	r11,0x7e37
800300be:	c2 dc       	rcall	80030118 <copysign>
800300c0:	e0 68 75 9c 	mov	r8,30108
800300c4:	ea 18 88 00 	orh	r8,0x8800
800300c8:	e0 69 e4 3c 	mov	r9,58428
800300cc:	ea 19 7e 37 	orh	r9,0x7e37
800300d0:	c1 d8       	rjmp	8003010a <scalbn+0xce>
800300d2:	e0 6a f3 59 	mov	r10,62297
800300d6:	ea 1a c2 f8 	orh	r10,0xc2f8
800300da:	e0 6b 6e 1f 	mov	r11,28191
800300de:	ea 1b 01 a5 	orh	r11,0x1a5
800300e2:	c1 bc       	rcall	80030118 <copysign>
800300e4:	e0 68 f3 59 	mov	r8,62297
800300e8:	ea 18 c2 f8 	orh	r8,0xc2f8
800300ec:	e0 69 6e 1f 	mov	r9,28191
800300f0:	ea 19 01 a5 	orh	r9,0x1a5
800300f4:	c0 b8       	rjmp	8003010a <scalbn+0xce>
800300f6:	2c ae       	sub	lr,-54
800300f8:	e4 1c 80 0f 	andh	r12,0x800f
800300fc:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030100:	10 9a       	mov	r10,r8
80030102:	12 9b       	mov	r11,r9
80030104:	30 08       	mov	r8,0
80030106:	fc 19 3c 90 	movh	r9,0x3c90
8003010a:	c1 3c       	rcall	80030130 <__avr32_f64_mul>
8003010c:	14 98       	mov	r8,r10
8003010e:	16 99       	mov	r9,r11
80030110:	10 9a       	mov	r10,r8
80030112:	12 9b       	mov	r11,r9
80030114:	d8 22       	popm	r4-r7,pc
80030116:	d7 03       	nop

80030118 <copysign>:
80030118:	d4 21       	pushm	r4-r7,lr
8003011a:	e6 19 80 00 	andh	r9,0x8000,COH
8003011e:	16 95       	mov	r5,r11
80030120:	14 94       	mov	r4,r10
80030122:	14 96       	mov	r6,r10
80030124:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030128:	f3 eb 10 0b 	or	r11,r9,r11
8003012c:	16 97       	mov	r7,r11
8003012e:	d8 22       	popm	r4-r7,pc

80030130 <__avr32_f64_mul>:
80030130:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80030134:	e0 80 00 dc 	breq	800302ec <__avr32_f64_mul_op1_zero>
80030138:	d4 21       	pushm	r4-r7,lr
8003013a:	f7 e9 20 0e 	eor	lr,r11,r9
8003013e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030142:	30 15       	mov	r5,1
80030144:	c4 30       	breq	800301ca <__avr32_f64_mul_op1_subnormal>
80030146:	ab 6b       	lsl	r11,0xa
80030148:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8003014c:	ab 6a       	lsl	r10,0xa
8003014e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80030152:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030156:	c5 c0       	breq	8003020e <__avr32_f64_mul_op2_subnormal>
80030158:	a1 78       	lsl	r8,0x1
8003015a:	5c f9       	rol	r9
8003015c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030160:	e0 47 07 ff 	cp.w	r7,2047
80030164:	c7 70       	breq	80030252 <__avr32_f64_mul_op_nan_or_inf>
80030166:	e0 46 07 ff 	cp.w	r6,2047
8003016a:	c7 40       	breq	80030252 <__avr32_f64_mul_op_nan_or_inf>
8003016c:	ee 06 00 0c 	add	r12,r7,r6
80030170:	e0 2c 03 fe 	sub	r12,1022
80030174:	f6 08 06 44 	mulu.d	r4,r11,r8
80030178:	f4 09 07 44 	macu.d	r4,r10,r9
8003017c:	f4 08 06 46 	mulu.d	r6,r10,r8
80030180:	f6 09 06 4a 	mulu.d	r10,r11,r9
80030184:	08 07       	add	r7,r4
80030186:	f4 05 00 4a 	adc	r10,r10,r5
8003018a:	5c 0b       	acr	r11
8003018c:	ed bb 00 14 	bld	r11,0x14
80030190:	c0 50       	breq	8003019a <__avr32_f64_mul+0x6a>
80030192:	a1 77       	lsl	r7,0x1
80030194:	5c fa       	rol	r10
80030196:	5c fb       	rol	r11
80030198:	20 1c       	sub	r12,1
8003019a:	58 0c       	cp.w	r12,0
8003019c:	e0 8a 00 6f 	brle	8003027a <__avr32_f64_mul_res_subnormal>
800301a0:	e0 4c 07 ff 	cp.w	r12,2047
800301a4:	e0 84 00 9c 	brge	800302dc <__avr32_f64_mul_res_inf>
800301a8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
800301ac:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
800301b0:	ef e6 12 17 	or	r7,r7,r6>>0x1
800301b4:	ee 17 80 00 	eorh	r7,0x8000
800301b8:	f1 b7 04 20 	satu	r7,0x1
800301bc:	0e 0a       	add	r10,r7
800301be:	5c 0b       	acr	r11
800301c0:	ed be 00 1f 	bld	lr,0x1f
800301c4:	ef bb 00 1f 	bst	r11,0x1f
800301c8:	d8 22       	popm	r4-r7,pc

800301ca <__avr32_f64_mul_op1_subnormal>:
800301ca:	e4 1b 00 0f 	andh	r11,0xf
800301ce:	f4 0c 12 00 	clz	r12,r10
800301d2:	f6 06 12 00 	clz	r6,r11
800301d6:	f7 bc 03 e1 	sublo	r12,-31
800301da:	f8 06 17 30 	movlo	r6,r12
800301de:	f7 b6 02 01 	subhs	r6,1
800301e2:	e0 46 00 20 	cp.w	r6,32
800301e6:	c0 d4       	brge	80030200 <__avr32_f64_mul_op1_subnormal+0x36>
800301e8:	ec 0c 11 20 	rsub	r12,r6,32
800301ec:	f6 06 09 4b 	lsl	r11,r11,r6
800301f0:	f4 0c 0a 4c 	lsr	r12,r10,r12
800301f4:	18 4b       	or	r11,r12
800301f6:	f4 06 09 4a 	lsl	r10,r10,r6
800301fa:	20 b6       	sub	r6,11
800301fc:	0c 17       	sub	r7,r6
800301fe:	ca ab       	rjmp	80030152 <__avr32_f64_mul+0x22>
80030200:	f4 06 09 4b 	lsl	r11,r10,r6
80030204:	c6 40       	breq	800302cc <__avr32_f64_mul_res_zero>
80030206:	30 0a       	mov	r10,0
80030208:	20 b6       	sub	r6,11
8003020a:	0c 17       	sub	r7,r6
8003020c:	ca 3b       	rjmp	80030152 <__avr32_f64_mul+0x22>

8003020e <__avr32_f64_mul_op2_subnormal>:
8003020e:	e4 19 00 0f 	andh	r9,0xf
80030212:	f0 0c 12 00 	clz	r12,r8
80030216:	f2 05 12 00 	clz	r5,r9
8003021a:	f7 bc 03 ea 	sublo	r12,-22
8003021e:	f8 05 17 30 	movlo	r5,r12
80030222:	f7 b5 02 0a 	subhs	r5,10
80030226:	e0 45 00 20 	cp.w	r5,32
8003022a:	c0 d4       	brge	80030244 <__avr32_f64_mul_op2_subnormal+0x36>
8003022c:	ea 0c 11 20 	rsub	r12,r5,32
80030230:	f2 05 09 49 	lsl	r9,r9,r5
80030234:	f0 0c 0a 4c 	lsr	r12,r8,r12
80030238:	18 49       	or	r9,r12
8003023a:	f0 05 09 48 	lsl	r8,r8,r5
8003023e:	20 25       	sub	r5,2
80030240:	0a 16       	sub	r6,r5
80030242:	c8 fb       	rjmp	80030160 <__avr32_f64_mul+0x30>
80030244:	f0 05 09 49 	lsl	r9,r8,r5
80030248:	c4 20       	breq	800302cc <__avr32_f64_mul_res_zero>
8003024a:	30 08       	mov	r8,0
8003024c:	20 25       	sub	r5,2
8003024e:	0a 16       	sub	r6,r5
80030250:	c8 8b       	rjmp	80030160 <__avr32_f64_mul+0x30>

80030252 <__avr32_f64_mul_op_nan_or_inf>:
80030252:	e4 19 00 0f 	andh	r9,0xf
80030256:	e4 1b 00 0f 	andh	r11,0xf
8003025a:	14 4b       	or	r11,r10
8003025c:	10 49       	or	r9,r8
8003025e:	e0 47 07 ff 	cp.w	r7,2047
80030262:	c0 91       	brne	80030274 <__avr32_f64_mul_op1_not_naninf>
80030264:	58 0b       	cp.w	r11,0
80030266:	c3 81       	brne	800302d6 <__avr32_f64_mul_res_nan>
80030268:	e0 46 07 ff 	cp.w	r6,2047
8003026c:	c3 81       	brne	800302dc <__avr32_f64_mul_res_inf>
8003026e:	58 09       	cp.w	r9,0
80030270:	c3 60       	breq	800302dc <__avr32_f64_mul_res_inf>
80030272:	c3 28       	rjmp	800302d6 <__avr32_f64_mul_res_nan>

80030274 <__avr32_f64_mul_op1_not_naninf>:
80030274:	58 09       	cp.w	r9,0
80030276:	c3 30       	breq	800302dc <__avr32_f64_mul_res_inf>
80030278:	c2 f8       	rjmp	800302d6 <__avr32_f64_mul_res_nan>

8003027a <__avr32_f64_mul_res_subnormal>:
8003027a:	5c 3c       	neg	r12
8003027c:	2f fc       	sub	r12,-1
8003027e:	f1 bc 04 c0 	satu	r12,0x6
80030282:	e0 4c 00 20 	cp.w	r12,32
80030286:	c1 14       	brge	800302a8 <__avr32_f64_mul_res_subnormal+0x2e>
80030288:	f8 08 11 20 	rsub	r8,r12,32
8003028c:	0e 46       	or	r6,r7
8003028e:	ee 0c 0a 47 	lsr	r7,r7,r12
80030292:	f4 08 09 49 	lsl	r9,r10,r8
80030296:	12 47       	or	r7,r9
80030298:	f4 0c 0a 4a 	lsr	r10,r10,r12
8003029c:	f6 08 09 49 	lsl	r9,r11,r8
800302a0:	12 4a       	or	r10,r9
800302a2:	f6 0c 0a 4b 	lsr	r11,r11,r12
800302a6:	c8 3b       	rjmp	800301ac <__avr32_f64_mul+0x7c>
800302a8:	f8 08 11 20 	rsub	r8,r12,32
800302ac:	f9 b9 00 00 	moveq	r9,0
800302b0:	c0 30       	breq	800302b6 <__avr32_f64_mul_res_subnormal+0x3c>
800302b2:	f6 08 09 49 	lsl	r9,r11,r8
800302b6:	0e 46       	or	r6,r7
800302b8:	ed ea 10 16 	or	r6,r6,r10<<0x1
800302bc:	f4 0c 0a 4a 	lsr	r10,r10,r12
800302c0:	f3 ea 10 07 	or	r7,r9,r10
800302c4:	f6 0c 0a 4a 	lsr	r10,r11,r12
800302c8:	30 0b       	mov	r11,0
800302ca:	c7 1b       	rjmp	800301ac <__avr32_f64_mul+0x7c>

800302cc <__avr32_f64_mul_res_zero>:
800302cc:	1c 9b       	mov	r11,lr
800302ce:	e6 1b 80 00 	andh	r11,0x8000,COH
800302d2:	30 0a       	mov	r10,0
800302d4:	d8 22       	popm	r4-r7,pc

800302d6 <__avr32_f64_mul_res_nan>:
800302d6:	3f fb       	mov	r11,-1
800302d8:	3f fa       	mov	r10,-1
800302da:	d8 22       	popm	r4-r7,pc

800302dc <__avr32_f64_mul_res_inf>:
800302dc:	f0 6b 00 00 	mov	r11,-1048576
800302e0:	ed be 00 1f 	bld	lr,0x1f
800302e4:	ef bb 00 1f 	bst	r11,0x1f
800302e8:	30 0a       	mov	r10,0
800302ea:	d8 22       	popm	r4-r7,pc

800302ec <__avr32_f64_mul_op1_zero>:
800302ec:	f7 e9 20 0b 	eor	r11,r11,r9
800302f0:	e6 1b 80 00 	andh	r11,0x8000,COH
800302f4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800302f8:	e0 4c 07 ff 	cp.w	r12,2047
800302fc:	5e 1c       	retne	r12
800302fe:	3f fa       	mov	r10,-1
80030300:	3f fb       	mov	r11,-1
80030302:	5e fc       	retal	r12

80030304 <__avr32_f64_sub_from_add>:
80030304:	ee 19 80 00 	eorh	r9,0x8000

80030308 <__avr32_f64_sub>:
80030308:	f7 e9 20 0c 	eor	r12,r11,r9
8003030c:	e0 86 00 ca 	brmi	800304a0 <__avr32_f64_add_from_sub>
80030310:	eb cd 40 e0 	pushm	r5-r7,lr
80030314:	16 9c       	mov	r12,r11
80030316:	e6 1c 80 00 	andh	r12,0x8000,COH
8003031a:	bf db       	cbr	r11,0x1f
8003031c:	bf d9       	cbr	r9,0x1f
8003031e:	10 3a       	cp.w	r10,r8
80030320:	f2 0b 13 00 	cpc	r11,r9
80030324:	c0 92       	brcc	80030336 <__avr32_f64_sub+0x2e>
80030326:	16 97       	mov	r7,r11
80030328:	12 9b       	mov	r11,r9
8003032a:	0e 99       	mov	r9,r7
8003032c:	14 97       	mov	r7,r10
8003032e:	10 9a       	mov	r10,r8
80030330:	0e 98       	mov	r8,r7
80030332:	ee 1c 80 00 	eorh	r12,0x8000
80030336:	f6 07 16 14 	lsr	r7,r11,0x14
8003033a:	ab 7b       	lsl	r11,0xb
8003033c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030340:	ab 7a       	lsl	r10,0xb
80030342:	bf bb       	sbr	r11,0x1f
80030344:	f2 06 16 14 	lsr	r6,r9,0x14
80030348:	c4 40       	breq	800303d0 <__avr32_f64_sub_opL_subnormal>
8003034a:	ab 79       	lsl	r9,0xb
8003034c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030350:	ab 78       	lsl	r8,0xb
80030352:	bf b9       	sbr	r9,0x1f

80030354 <__avr32_f64_sub_opL_subnormal_done>:
80030354:	e0 47 07 ff 	cp.w	r7,2047
80030358:	c4 f0       	breq	800303f6 <__avr32_f64_sub_opH_nan_or_inf>
8003035a:	0e 26       	rsub	r6,r7
8003035c:	c1 20       	breq	80030380 <__avr32_f64_sub_shift_done>
8003035e:	ec 05 11 20 	rsub	r5,r6,32
80030362:	e0 46 00 20 	cp.w	r6,32
80030366:	c7 c2       	brcc	8003045e <__avr32_f64_sub_longshift>
80030368:	f0 05 09 4e 	lsl	lr,r8,r5
8003036c:	f2 05 09 45 	lsl	r5,r9,r5
80030370:	f0 06 0a 48 	lsr	r8,r8,r6
80030374:	f2 06 0a 49 	lsr	r9,r9,r6
80030378:	0a 48       	or	r8,r5
8003037a:	58 0e       	cp.w	lr,0
8003037c:	5f 1e       	srne	lr
8003037e:	1c 48       	or	r8,lr

80030380 <__avr32_f64_sub_shift_done>:
80030380:	10 1a       	sub	r10,r8
80030382:	f6 09 01 4b 	sbc	r11,r11,r9
80030386:	f6 06 12 00 	clz	r6,r11
8003038a:	c0 e0       	breq	800303a6 <__avr32_f64_sub_longnormalize_done>
8003038c:	c7 83       	brcs	8003047c <__avr32_f64_sub_longnormalize>
8003038e:	ec 0e 11 20 	rsub	lr,r6,32
80030392:	f6 06 09 4b 	lsl	r11,r11,r6
80030396:	f4 0e 0a 4e 	lsr	lr,r10,lr
8003039a:	1c 4b       	or	r11,lr
8003039c:	f4 06 09 4a 	lsl	r10,r10,r6
800303a0:	0c 17       	sub	r7,r6
800303a2:	e0 8a 00 39 	brle	80030414 <__avr32_f64_sub_subnormal_result>

800303a6 <__avr32_f64_sub_longnormalize_done>:
800303a6:	f4 09 15 15 	lsl	r9,r10,0x15
800303aa:	ab 9a       	lsr	r10,0xb
800303ac:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800303b0:	ab 9b       	lsr	r11,0xb
800303b2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800303b6:	18 4b       	or	r11,r12

800303b8 <__avr32_f64_sub_round>:
800303b8:	fc 17 80 00 	movh	r7,0x8000
800303bc:	ed ba 00 00 	bld	r10,0x0
800303c0:	f7 b7 01 ff 	subne	r7,-1
800303c4:	0e 39       	cp.w	r9,r7
800303c6:	5f 29       	srhs	r9
800303c8:	12 0a       	add	r10,r9
800303ca:	5c 0b       	acr	r11
800303cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800303d0 <__avr32_f64_sub_opL_subnormal>:
800303d0:	ab 79       	lsl	r9,0xb
800303d2:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800303d6:	ab 78       	lsl	r8,0xb
800303d8:	f3 e8 10 0e 	or	lr,r9,r8
800303dc:	f9 b6 01 01 	movne	r6,1
800303e0:	ee 0e 11 00 	rsub	lr,r7,0
800303e4:	f9 b7 00 01 	moveq	r7,1
800303e8:	ef bb 00 1f 	bst	r11,0x1f
800303ec:	f7 ea 10 0e 	or	lr,r11,r10
800303f0:	f9 b7 00 00 	moveq	r7,0
800303f4:	cb 0b       	rjmp	80030354 <__avr32_f64_sub_opL_subnormal_done>

800303f6 <__avr32_f64_sub_opH_nan_or_inf>:
800303f6:	bf db       	cbr	r11,0x1f
800303f8:	f7 ea 10 0e 	or	lr,r11,r10
800303fc:	c0 81       	brne	8003040c <__avr32_f64_sub_return_nan>
800303fe:	e0 46 07 ff 	cp.w	r6,2047
80030402:	c0 50       	breq	8003040c <__avr32_f64_sub_return_nan>
80030404:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80030408:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003040c <__avr32_f64_sub_return_nan>:
8003040c:	3f fa       	mov	r10,-1
8003040e:	3f fb       	mov	r11,-1
80030410:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030414 <__avr32_f64_sub_subnormal_result>:
80030414:	5c 37       	neg	r7
80030416:	2f f7       	sub	r7,-1
80030418:	f1 b7 04 c0 	satu	r7,0x6
8003041c:	e0 47 00 20 	cp.w	r7,32
80030420:	c1 14       	brge	80030442 <__avr32_f64_sub_subnormal_result+0x2e>
80030422:	ee 08 11 20 	rsub	r8,r7,32
80030426:	f4 08 09 49 	lsl	r9,r10,r8
8003042a:	5f 16       	srne	r6
8003042c:	f4 07 0a 4a 	lsr	r10,r10,r7
80030430:	0c 4a       	or	r10,r6
80030432:	f6 08 09 49 	lsl	r9,r11,r8
80030436:	f5 e9 10 0a 	or	r10,r10,r9
8003043a:	f4 07 0a 4b 	lsr	r11,r10,r7
8003043e:	30 07       	mov	r7,0
80030440:	cb 3b       	rjmp	800303a6 <__avr32_f64_sub_longnormalize_done>
80030442:	ee 08 11 40 	rsub	r8,r7,64
80030446:	f6 08 09 49 	lsl	r9,r11,r8
8003044a:	14 49       	or	r9,r10
8003044c:	5f 16       	srne	r6
8003044e:	f6 07 0a 4a 	lsr	r10,r11,r7
80030452:	0c 4a       	or	r10,r6
80030454:	30 0b       	mov	r11,0
80030456:	30 07       	mov	r7,0
80030458:	ca 7b       	rjmp	800303a6 <__avr32_f64_sub_longnormalize_done>
8003045a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003045e <__avr32_f64_sub_longshift>:
8003045e:	f1 b6 04 c0 	satu	r6,0x6
80030462:	f0 0e 17 00 	moveq	lr,r8
80030466:	c0 40       	breq	8003046e <__avr32_f64_sub_longshift+0x10>
80030468:	f2 05 09 4e 	lsl	lr,r9,r5
8003046c:	10 4e       	or	lr,r8
8003046e:	f2 06 0a 48 	lsr	r8,r9,r6
80030472:	30 09       	mov	r9,0
80030474:	58 0e       	cp.w	lr,0
80030476:	5f 1e       	srne	lr
80030478:	1c 48       	or	r8,lr
8003047a:	c8 3b       	rjmp	80030380 <__avr32_f64_sub_shift_done>

8003047c <__avr32_f64_sub_longnormalize>:
8003047c:	f4 06 12 00 	clz	r6,r10
80030480:	f9 b7 03 00 	movlo	r7,0
80030484:	f9 b6 03 00 	movlo	r6,0
80030488:	f9 bc 03 00 	movlo	r12,0
8003048c:	f7 b6 02 e0 	subhs	r6,-32
80030490:	f4 06 09 4b 	lsl	r11,r10,r6
80030494:	30 0a       	mov	r10,0
80030496:	0c 17       	sub	r7,r6
80030498:	fe 9a ff be 	brle	80030414 <__avr32_f64_sub_subnormal_result>
8003049c:	c8 5b       	rjmp	800303a6 <__avr32_f64_sub_longnormalize_done>
8003049e:	d7 03       	nop

800304a0 <__avr32_f64_add_from_sub>:
800304a0:	ee 19 80 00 	eorh	r9,0x8000

800304a4 <__avr32_f64_add>:
800304a4:	f7 e9 20 0c 	eor	r12,r11,r9
800304a8:	fe 96 ff 2e 	brmi	80030304 <__avr32_f64_sub_from_add>
800304ac:	eb cd 40 e0 	pushm	r5-r7,lr
800304b0:	16 9c       	mov	r12,r11
800304b2:	e6 1c 80 00 	andh	r12,0x8000,COH
800304b6:	bf db       	cbr	r11,0x1f
800304b8:	bf d9       	cbr	r9,0x1f
800304ba:	12 3b       	cp.w	r11,r9
800304bc:	c0 72       	brcc	800304ca <__avr32_f64_add+0x26>
800304be:	16 97       	mov	r7,r11
800304c0:	12 9b       	mov	r11,r9
800304c2:	0e 99       	mov	r9,r7
800304c4:	14 97       	mov	r7,r10
800304c6:	10 9a       	mov	r10,r8
800304c8:	0e 98       	mov	r8,r7
800304ca:	30 0e       	mov	lr,0
800304cc:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800304d0:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800304d4:	b5 ab       	sbr	r11,0x14
800304d6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800304da:	c6 20       	breq	8003059e <__avr32_f64_add_op2_subnormal>
800304dc:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800304e0:	b5 a9       	sbr	r9,0x14
800304e2:	e0 47 07 ff 	cp.w	r7,2047
800304e6:	c2 80       	breq	80030536 <__avr32_f64_add_opH_nan_or_inf>
800304e8:	0e 26       	rsub	r6,r7
800304ea:	c1 20       	breq	8003050e <__avr32_f64_add_shift_done>
800304ec:	e0 46 00 36 	cp.w	r6,54
800304f0:	c1 52       	brcc	8003051a <__avr32_f64_add_res_of_done>
800304f2:	ec 05 11 20 	rsub	r5,r6,32
800304f6:	e0 46 00 20 	cp.w	r6,32
800304fa:	c3 52       	brcc	80030564 <__avr32_f64_add_longshift>
800304fc:	f0 05 09 4e 	lsl	lr,r8,r5
80030500:	f2 05 09 45 	lsl	r5,r9,r5
80030504:	f0 06 0a 48 	lsr	r8,r8,r6
80030508:	f2 06 0a 49 	lsr	r9,r9,r6
8003050c:	0a 48       	or	r8,r5

8003050e <__avr32_f64_add_shift_done>:
8003050e:	10 0a       	add	r10,r8
80030510:	f6 09 00 4b 	adc	r11,r11,r9
80030514:	ed bb 00 15 	bld	r11,0x15
80030518:	c3 40       	breq	80030580 <__avr32_f64_add_res_of>

8003051a <__avr32_f64_add_res_of_done>:
8003051a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003051e:	18 4b       	or	r11,r12

80030520 <__avr32_f64_add_round>:
80030520:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80030524:	18 4e       	or	lr,r12
80030526:	ee 1e 80 00 	eorh	lr,0x8000
8003052a:	f1 be 04 20 	satu	lr,0x1
8003052e:	1c 0a       	add	r10,lr
80030530:	5c 0b       	acr	r11
80030532:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030536 <__avr32_f64_add_opH_nan_or_inf>:
80030536:	b5 cb       	cbr	r11,0x14
80030538:	f7 ea 10 0e 	or	lr,r11,r10
8003053c:	c1 01       	brne	8003055c <__avr32_f64_add_return_nan>
8003053e:	e0 46 07 ff 	cp.w	r6,2047
80030542:	c0 30       	breq	80030548 <__avr32_f64_add_opL_nan_or_inf>
80030544:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030548 <__avr32_f64_add_opL_nan_or_inf>:
80030548:	b5 c9       	cbr	r9,0x14
8003054a:	f3 e8 10 0e 	or	lr,r9,r8
8003054e:	c0 71       	brne	8003055c <__avr32_f64_add_return_nan>
80030550:	30 0a       	mov	r10,0
80030552:	fc 1b 7f f0 	movh	r11,0x7ff0
80030556:	18 4b       	or	r11,r12
80030558:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003055c <__avr32_f64_add_return_nan>:
8003055c:	3f fa       	mov	r10,-1
8003055e:	3f fb       	mov	r11,-1
80030560:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030564 <__avr32_f64_add_longshift>:
80030564:	f1 b6 04 c0 	satu	r6,0x6
80030568:	f0 0e 17 00 	moveq	lr,r8
8003056c:	c0 60       	breq	80030578 <__avr32_f64_add_longshift+0x14>
8003056e:	f2 05 09 4e 	lsl	lr,r9,r5
80030572:	58 08       	cp.w	r8,0
80030574:	5f 18       	srne	r8
80030576:	10 4e       	or	lr,r8
80030578:	f2 06 0a 48 	lsr	r8,r9,r6
8003057c:	30 09       	mov	r9,0
8003057e:	cc 8b       	rjmp	8003050e <__avr32_f64_add_shift_done>

80030580 <__avr32_f64_add_res_of>:
80030580:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80030584:	a1 9b       	lsr	r11,0x1
80030586:	5d 0a       	ror	r10
80030588:	5d 0e       	ror	lr
8003058a:	2f f7       	sub	r7,-1
8003058c:	e0 47 07 ff 	cp.w	r7,2047
80030590:	f9 ba 00 00 	moveq	r10,0
80030594:	f9 bb 00 00 	moveq	r11,0
80030598:	f9 be 00 00 	moveq	lr,0
8003059c:	cb fb       	rjmp	8003051a <__avr32_f64_add_res_of_done>

8003059e <__avr32_f64_add_op2_subnormal>:
8003059e:	30 16       	mov	r6,1
800305a0:	58 07       	cp.w	r7,0
800305a2:	ca 01       	brne	800304e2 <__avr32_f64_add+0x3e>
800305a4:	b5 cb       	cbr	r11,0x14
800305a6:	10 0a       	add	r10,r8
800305a8:	f6 09 00 4b 	adc	r11,r11,r9
800305ac:	18 4b       	or	r11,r12
800305ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800305b2:	d7 03       	nop

800305b4 <__avr32_f64_to_u32>:
800305b4:	58 0b       	cp.w	r11,0
800305b6:	5e 6d       	retmi	0

800305b8 <__avr32_f64_to_s32>:
800305b8:	f6 0c 15 01 	lsl	r12,r11,0x1
800305bc:	b5 9c       	lsr	r12,0x15
800305be:	e0 2c 03 ff 	sub	r12,1023
800305c2:	5e 3d       	retlo	0
800305c4:	f8 0c 11 1f 	rsub	r12,r12,31
800305c8:	16 99       	mov	r9,r11
800305ca:	ab 7b       	lsl	r11,0xb
800305cc:	bf bb       	sbr	r11,0x1f
800305ce:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800305d2:	f6 0c 0a 4b 	lsr	r11,r11,r12
800305d6:	a1 79       	lsl	r9,0x1
800305d8:	5e 2b       	reths	r11
800305da:	5c 3b       	neg	r11
800305dc:	5e fb       	retal	r11

800305de <__avr32_u32_to_f64>:
800305de:	f8 cb 00 00 	sub	r11,r12,0
800305e2:	30 0c       	mov	r12,0
800305e4:	c0 38       	rjmp	800305ea <__avr32_s32_to_f64+0x4>

800305e6 <__avr32_s32_to_f64>:
800305e6:	18 9b       	mov	r11,r12
800305e8:	5c 4b       	abs	r11
800305ea:	30 0a       	mov	r10,0
800305ec:	5e 0b       	reteq	r11
800305ee:	d4 01       	pushm	lr
800305f0:	e0 69 04 1e 	mov	r9,1054
800305f4:	f6 08 12 00 	clz	r8,r11
800305f8:	c1 70       	breq	80030626 <__avr32_s32_to_f64+0x40>
800305fa:	c0 c3       	brcs	80030612 <__avr32_s32_to_f64+0x2c>
800305fc:	f0 0e 11 20 	rsub	lr,r8,32
80030600:	f6 08 09 4b 	lsl	r11,r11,r8
80030604:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030608:	1c 4b       	or	r11,lr
8003060a:	f4 08 09 4a 	lsl	r10,r10,r8
8003060e:	10 19       	sub	r9,r8
80030610:	c0 b8       	rjmp	80030626 <__avr32_s32_to_f64+0x40>
80030612:	f4 08 12 00 	clz	r8,r10
80030616:	f9 b8 03 00 	movlo	r8,0
8003061a:	f7 b8 02 e0 	subhs	r8,-32
8003061e:	f4 08 09 4b 	lsl	r11,r10,r8
80030622:	30 0a       	mov	r10,0
80030624:	10 19       	sub	r9,r8
80030626:	58 09       	cp.w	r9,0
80030628:	e0 89 00 30 	brgt	80030688 <__avr32_s32_to_f64+0xa2>
8003062c:	5c 39       	neg	r9
8003062e:	2f f9       	sub	r9,-1
80030630:	e0 49 00 36 	cp.w	r9,54
80030634:	c0 43       	brcs	8003063c <__avr32_s32_to_f64+0x56>
80030636:	30 0b       	mov	r11,0
80030638:	30 0a       	mov	r10,0
8003063a:	c2 68       	rjmp	80030686 <__avr32_s32_to_f64+0xa0>
8003063c:	2f 69       	sub	r9,-10
8003063e:	f2 08 11 20 	rsub	r8,r9,32
80030642:	e0 49 00 20 	cp.w	r9,32
80030646:	c0 b2       	brcc	8003065c <__avr32_s32_to_f64+0x76>
80030648:	f4 08 09 4e 	lsl	lr,r10,r8
8003064c:	f6 08 09 48 	lsl	r8,r11,r8
80030650:	f4 09 0a 4a 	lsr	r10,r10,r9
80030654:	f6 09 0a 4b 	lsr	r11,r11,r9
80030658:	10 4b       	or	r11,r8
8003065a:	c0 88       	rjmp	8003066a <__avr32_s32_to_f64+0x84>
8003065c:	f6 08 09 4e 	lsl	lr,r11,r8
80030660:	14 4e       	or	lr,r10
80030662:	16 9a       	mov	r10,r11
80030664:	30 0b       	mov	r11,0
80030666:	f4 09 0a 4a 	lsr	r10,r10,r9
8003066a:	ed ba 00 00 	bld	r10,0x0
8003066e:	c0 92       	brcc	80030680 <__avr32_s32_to_f64+0x9a>
80030670:	1c 7e       	tst	lr,lr
80030672:	c0 41       	brne	8003067a <__avr32_s32_to_f64+0x94>
80030674:	ed ba 00 01 	bld	r10,0x1
80030678:	c0 42       	brcc	80030680 <__avr32_s32_to_f64+0x9a>
8003067a:	2f fa       	sub	r10,-1
8003067c:	f7 bb 02 ff 	subhs	r11,-1
80030680:	5c fc       	rol	r12
80030682:	5d 0b       	ror	r11
80030684:	5d 0a       	ror	r10
80030686:	d8 02       	popm	pc
80030688:	e0 68 03 ff 	mov	r8,1023
8003068c:	ed ba 00 0b 	bld	r10,0xb
80030690:	f7 b8 00 ff 	subeq	r8,-1
80030694:	10 0a       	add	r10,r8
80030696:	5c 0b       	acr	r11
80030698:	f7 b9 03 fe 	sublo	r9,-2
8003069c:	e0 49 07 ff 	cp.w	r9,2047
800306a0:	c0 55       	brlt	800306aa <__avr32_s32_to_f64+0xc4>
800306a2:	30 0a       	mov	r10,0
800306a4:	fc 1b ff e0 	movh	r11,0xffe0
800306a8:	c0 c8       	rjmp	800306c0 <__floatsidf_return_op1>
800306aa:	ed bb 00 1f 	bld	r11,0x1f
800306ae:	f7 b9 01 01 	subne	r9,1
800306b2:	ab 9a       	lsr	r10,0xb
800306b4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800306b8:	a1 7b       	lsl	r11,0x1
800306ba:	ab 9b       	lsr	r11,0xb
800306bc:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800306c0 <__floatsidf_return_op1>:
800306c0:	a1 7c       	lsl	r12,0x1
800306c2:	5d 0b       	ror	r11
800306c4:	d8 02       	popm	pc

800306c6 <__avr32_f64_cmp_eq>:
800306c6:	10 3a       	cp.w	r10,r8
800306c8:	f2 0b 13 00 	cpc	r11,r9
800306cc:	c0 80       	breq	800306dc <__avr32_f64_cmp_eq+0x16>
800306ce:	a1 7b       	lsl	r11,0x1
800306d0:	a1 79       	lsl	r9,0x1
800306d2:	14 4b       	or	r11,r10
800306d4:	12 4b       	or	r11,r9
800306d6:	10 4b       	or	r11,r8
800306d8:	5e 0f       	reteq	1
800306da:	5e fd       	retal	0
800306dc:	a1 7b       	lsl	r11,0x1
800306de:	fc 1c ff e0 	movh	r12,0xffe0
800306e2:	58 0a       	cp.w	r10,0
800306e4:	f8 0b 13 00 	cpc	r11,r12
800306e8:	5e 8f       	retls	1
800306ea:	5e fd       	retal	0

800306ec <__avr32_f64_cmp_ge>:
800306ec:	1a de       	st.w	--sp,lr
800306ee:	1a d7       	st.w	--sp,r7
800306f0:	a1 7b       	lsl	r11,0x1
800306f2:	5f 3c       	srlo	r12
800306f4:	a1 79       	lsl	r9,0x1
800306f6:	5f 37       	srlo	r7
800306f8:	5c fc       	rol	r12
800306fa:	fc 1e ff e0 	movh	lr,0xffe0
800306fe:	58 0a       	cp.w	r10,0
80030700:	fc 0b 13 00 	cpc	r11,lr
80030704:	e0 8b 00 1d 	brhi	8003073e <__avr32_f64_cmp_ge+0x52>
80030708:	58 08       	cp.w	r8,0
8003070a:	fc 09 13 00 	cpc	r9,lr
8003070e:	e0 8b 00 18 	brhi	8003073e <__avr32_f64_cmp_ge+0x52>
80030712:	58 0b       	cp.w	r11,0
80030714:	f5 ba 00 00 	subfeq	r10,0
80030718:	c1 50       	breq	80030742 <__avr32_f64_cmp_ge+0x56>
8003071a:	1b 07       	ld.w	r7,sp++
8003071c:	1b 0e       	ld.w	lr,sp++
8003071e:	58 3c       	cp.w	r12,3
80030720:	c0 a0       	breq	80030734 <__avr32_f64_cmp_ge+0x48>
80030722:	58 1c       	cp.w	r12,1
80030724:	c0 33       	brcs	8003072a <__avr32_f64_cmp_ge+0x3e>
80030726:	5e 0f       	reteq	1
80030728:	5e 1d       	retne	0
8003072a:	10 3a       	cp.w	r10,r8
8003072c:	f2 0b 13 00 	cpc	r11,r9
80030730:	5e 2f       	reths	1
80030732:	5e 3d       	retlo	0
80030734:	14 38       	cp.w	r8,r10
80030736:	f6 09 13 00 	cpc	r9,r11
8003073a:	5e 2f       	reths	1
8003073c:	5e 3d       	retlo	0
8003073e:	1b 07       	ld.w	r7,sp++
80030740:	d8 0a       	popm	pc,r12=0
80030742:	58 17       	cp.w	r7,1
80030744:	5f 0c       	sreq	r12
80030746:	58 09       	cp.w	r9,0
80030748:	f5 b8 00 00 	subfeq	r8,0
8003074c:	1b 07       	ld.w	r7,sp++
8003074e:	1b 0e       	ld.w	lr,sp++
80030750:	5e 0f       	reteq	1
80030752:	5e fc       	retal	r12

80030754 <__avr32_f64_cmp_lt>:
80030754:	1a de       	st.w	--sp,lr
80030756:	1a d7       	st.w	--sp,r7
80030758:	a1 7b       	lsl	r11,0x1
8003075a:	5f 3c       	srlo	r12
8003075c:	a1 79       	lsl	r9,0x1
8003075e:	5f 37       	srlo	r7
80030760:	5c fc       	rol	r12
80030762:	fc 1e ff e0 	movh	lr,0xffe0
80030766:	58 0a       	cp.w	r10,0
80030768:	fc 0b 13 00 	cpc	r11,lr
8003076c:	e0 8b 00 1d 	brhi	800307a6 <__avr32_f64_cmp_lt+0x52>
80030770:	58 08       	cp.w	r8,0
80030772:	fc 09 13 00 	cpc	r9,lr
80030776:	e0 8b 00 18 	brhi	800307a6 <__avr32_f64_cmp_lt+0x52>
8003077a:	58 0b       	cp.w	r11,0
8003077c:	f5 ba 00 00 	subfeq	r10,0
80030780:	c1 50       	breq	800307aa <__avr32_f64_cmp_lt+0x56>
80030782:	1b 07       	ld.w	r7,sp++
80030784:	1b 0e       	ld.w	lr,sp++
80030786:	58 3c       	cp.w	r12,3
80030788:	c0 a0       	breq	8003079c <__avr32_f64_cmp_lt+0x48>
8003078a:	58 1c       	cp.w	r12,1
8003078c:	c0 33       	brcs	80030792 <__avr32_f64_cmp_lt+0x3e>
8003078e:	5e 0d       	reteq	0
80030790:	5e 1f       	retne	1
80030792:	10 3a       	cp.w	r10,r8
80030794:	f2 0b 13 00 	cpc	r11,r9
80030798:	5e 2d       	reths	0
8003079a:	5e 3f       	retlo	1
8003079c:	14 38       	cp.w	r8,r10
8003079e:	f6 09 13 00 	cpc	r9,r11
800307a2:	5e 2d       	reths	0
800307a4:	5e 3f       	retlo	1
800307a6:	1b 07       	ld.w	r7,sp++
800307a8:	d8 0a       	popm	pc,r12=0
800307aa:	58 17       	cp.w	r7,1
800307ac:	5f 1c       	srne	r12
800307ae:	58 09       	cp.w	r9,0
800307b0:	f5 b8 00 00 	subfeq	r8,0
800307b4:	1b 07       	ld.w	r7,sp++
800307b6:	1b 0e       	ld.w	lr,sp++
800307b8:	5e 0d       	reteq	0
800307ba:	5e fc       	retal	r12

800307bc <__avr32_f64_div>:
800307bc:	eb cd 40 ff 	pushm	r0-r7,lr
800307c0:	f7 e9 20 0e 	eor	lr,r11,r9
800307c4:	f6 07 16 14 	lsr	r7,r11,0x14
800307c8:	a9 7b       	lsl	r11,0x9
800307ca:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800307ce:	a9 7a       	lsl	r10,0x9
800307d0:	bd bb       	sbr	r11,0x1d
800307d2:	e4 1b 3f ff 	andh	r11,0x3fff
800307d6:	ab d7       	cbr	r7,0xb
800307d8:	e0 80 00 cc 	breq	80030970 <__avr32_f64_div_round_subnormal+0x54>
800307dc:	e0 47 07 ff 	cp.w	r7,2047
800307e0:	e0 84 00 b5 	brge	8003094a <__avr32_f64_div_round_subnormal+0x2e>
800307e4:	f2 06 16 14 	lsr	r6,r9,0x14
800307e8:	a9 79       	lsl	r9,0x9
800307ea:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800307ee:	a9 78       	lsl	r8,0x9
800307f0:	bd b9       	sbr	r9,0x1d
800307f2:	e4 19 3f ff 	andh	r9,0x3fff
800307f6:	ab d6       	cbr	r6,0xb
800307f8:	e0 80 00 e2 	breq	800309bc <__avr32_f64_div_round_subnormal+0xa0>
800307fc:	e0 46 07 ff 	cp.w	r6,2047
80030800:	e0 84 00 b2 	brge	80030964 <__avr32_f64_div_round_subnormal+0x48>
80030804:	0c 17       	sub	r7,r6
80030806:	fe 37 fc 01 	sub	r7,-1023
8003080a:	fc 1c 80 00 	movh	r12,0x8000
8003080e:	f8 03 16 01 	lsr	r3,r12,0x1
80030812:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80030816:	5c d4       	com	r4
80030818:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8003081c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030820:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030824:	e6 05 06 44 	mulu.d	r4,r3,r5
80030828:	ea 03 15 02 	lsl	r3,r5,0x2
8003082c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030830:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030834:	e6 05 06 44 	mulu.d	r4,r3,r5
80030838:	ea 03 15 02 	lsl	r3,r5,0x2
8003083c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030840:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80030844:	e6 05 06 44 	mulu.d	r4,r3,r5
80030848:	ea 03 15 02 	lsl	r3,r5,0x2
8003084c:	e6 08 06 40 	mulu.d	r0,r3,r8
80030850:	e4 09 07 40 	macu.d	r0,r2,r9
80030854:	e6 09 06 44 	mulu.d	r4,r3,r9
80030858:	02 04       	add	r4,r1
8003085a:	5c 05       	acr	r5
8003085c:	a3 65       	lsl	r5,0x2
8003085e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030862:	a3 64       	lsl	r4,0x2
80030864:	5c 34       	neg	r4
80030866:	f8 05 01 45 	sbc	r5,r12,r5
8003086a:	e6 04 06 40 	mulu.d	r0,r3,r4
8003086e:	e4 05 07 40 	macu.d	r0,r2,r5
80030872:	e6 05 06 44 	mulu.d	r4,r3,r5
80030876:	02 04       	add	r4,r1
80030878:	5c 05       	acr	r5
8003087a:	ea 03 15 02 	lsl	r3,r5,0x2
8003087e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80030882:	e8 02 15 02 	lsl	r2,r4,0x2
80030886:	e6 08 06 40 	mulu.d	r0,r3,r8
8003088a:	e4 09 07 40 	macu.d	r0,r2,r9
8003088e:	e6 09 06 44 	mulu.d	r4,r3,r9
80030892:	02 04       	add	r4,r1
80030894:	5c 05       	acr	r5
80030896:	a3 65       	lsl	r5,0x2
80030898:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8003089c:	a3 64       	lsl	r4,0x2
8003089e:	5c 34       	neg	r4
800308a0:	f8 05 01 45 	sbc	r5,r12,r5
800308a4:	e6 04 06 40 	mulu.d	r0,r3,r4
800308a8:	e4 05 07 40 	macu.d	r0,r2,r5
800308ac:	e6 05 06 44 	mulu.d	r4,r3,r5
800308b0:	02 04       	add	r4,r1
800308b2:	5c 05       	acr	r5
800308b4:	ea 03 15 02 	lsl	r3,r5,0x2
800308b8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800308bc:	e8 02 15 02 	lsl	r2,r4,0x2
800308c0:	e6 0a 06 40 	mulu.d	r0,r3,r10
800308c4:	e4 0b 07 40 	macu.d	r0,r2,r11
800308c8:	e6 0b 06 42 	mulu.d	r2,r3,r11
800308cc:	02 02       	add	r2,r1
800308ce:	5c 03       	acr	r3
800308d0:	ed b3 00 1c 	bld	r3,0x1c
800308d4:	c0 90       	breq	800308e6 <__avr32_f64_div+0x12a>
800308d6:	a1 72       	lsl	r2,0x1
800308d8:	5c f3       	rol	r3
800308da:	20 17       	sub	r7,1
800308dc:	a3 9a       	lsr	r10,0x3
800308de:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800308e2:	a3 9b       	lsr	r11,0x3
800308e4:	c0 58       	rjmp	800308ee <__avr32_f64_div+0x132>
800308e6:	a5 8a       	lsr	r10,0x4
800308e8:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800308ec:	a5 8b       	lsr	r11,0x4
800308ee:	58 07       	cp.w	r7,0
800308f0:	e0 8a 00 8b 	brle	80030a06 <__avr32_f64_div_res_subnormal>
800308f4:	e0 12 ff 00 	andl	r2,0xff00
800308f8:	e8 12 00 80 	orl	r2,0x80
800308fc:	e6 08 06 40 	mulu.d	r0,r3,r8
80030900:	e4 09 07 40 	macu.d	r0,r2,r9
80030904:	e4 08 06 44 	mulu.d	r4,r2,r8
80030908:	e6 09 06 48 	mulu.d	r8,r3,r9
8003090c:	00 05       	add	r5,r0
8003090e:	f0 01 00 48 	adc	r8,r8,r1
80030912:	5c 09       	acr	r9
80030914:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030918:	58 04       	cp.w	r4,0
8003091a:	5c 25       	cpc	r5

8003091c <__avr32_f64_div_round_subnormal>:
8003091c:	f4 08 13 00 	cpc	r8,r10
80030920:	f6 09 13 00 	cpc	r9,r11
80030924:	5f 36       	srlo	r6
80030926:	f8 06 17 00 	moveq	r6,r12
8003092a:	e4 0a 16 08 	lsr	r10,r2,0x8
8003092e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80030932:	e6 0b 16 08 	lsr	r11,r3,0x8
80030936:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003093a:	ed be 00 1f 	bld	lr,0x1f
8003093e:	ef bb 00 1f 	bst	r11,0x1f
80030942:	0c 0a       	add	r10,r6
80030944:	5c 0b       	acr	r11
80030946:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8003094a:	e4 1b 00 0f 	andh	r11,0xf
8003094e:	14 4b       	or	r11,r10
80030950:	e0 81 00 a7 	brne	80030a9e <__avr32_f64_div_res_subnormal+0x98>
80030954:	f2 06 16 14 	lsr	r6,r9,0x14
80030958:	ab d6       	cbr	r6,0xb
8003095a:	e0 46 07 ff 	cp.w	r6,2047
8003095e:	e0 81 00 a4 	brne	80030aa6 <__avr32_f64_div_res_subnormal+0xa0>
80030962:	c9 e8       	rjmp	80030a9e <__avr32_f64_div_res_subnormal+0x98>
80030964:	e4 19 00 0f 	andh	r9,0xf
80030968:	10 49       	or	r9,r8
8003096a:	e0 81 00 9a 	brne	80030a9e <__avr32_f64_div_res_subnormal+0x98>
8003096e:	c9 28       	rjmp	80030a92 <__avr32_f64_div_res_subnormal+0x8c>
80030970:	a3 7b       	lsl	r11,0x3
80030972:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80030976:	a3 7a       	lsl	r10,0x3
80030978:	f5 eb 10 04 	or	r4,r10,r11
8003097c:	e0 80 00 a0 	breq	80030abc <__avr32_f64_div_op1_zero>
80030980:	f6 04 12 00 	clz	r4,r11
80030984:	c1 70       	breq	800309b2 <__avr32_f64_div_round_subnormal+0x96>
80030986:	c0 c3       	brcs	8003099e <__avr32_f64_div_round_subnormal+0x82>
80030988:	e8 05 11 20 	rsub	r5,r4,32
8003098c:	f6 04 09 4b 	lsl	r11,r11,r4
80030990:	f4 05 0a 45 	lsr	r5,r10,r5
80030994:	0a 4b       	or	r11,r5
80030996:	f4 04 09 4a 	lsl	r10,r10,r4
8003099a:	08 17       	sub	r7,r4
8003099c:	c0 b8       	rjmp	800309b2 <__avr32_f64_div_round_subnormal+0x96>
8003099e:	f4 04 12 00 	clz	r4,r10
800309a2:	f9 b4 03 00 	movlo	r4,0
800309a6:	f7 b4 02 e0 	subhs	r4,-32
800309aa:	f4 04 09 4b 	lsl	r11,r10,r4
800309ae:	30 0a       	mov	r10,0
800309b0:	08 17       	sub	r7,r4
800309b2:	a3 8a       	lsr	r10,0x2
800309b4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800309b8:	a3 8b       	lsr	r11,0x2
800309ba:	c1 1b       	rjmp	800307dc <__avr32_f64_div+0x20>
800309bc:	a3 79       	lsl	r9,0x3
800309be:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800309c2:	a3 78       	lsl	r8,0x3
800309c4:	f3 e8 10 04 	or	r4,r9,r8
800309c8:	c6 f0       	breq	80030aa6 <__avr32_f64_div_res_subnormal+0xa0>
800309ca:	f2 04 12 00 	clz	r4,r9
800309ce:	c1 70       	breq	800309fc <__avr32_f64_div_round_subnormal+0xe0>
800309d0:	c0 c3       	brcs	800309e8 <__avr32_f64_div_round_subnormal+0xcc>
800309d2:	e8 05 11 20 	rsub	r5,r4,32
800309d6:	f2 04 09 49 	lsl	r9,r9,r4
800309da:	f0 05 0a 45 	lsr	r5,r8,r5
800309de:	0a 49       	or	r9,r5
800309e0:	f0 04 09 48 	lsl	r8,r8,r4
800309e4:	08 16       	sub	r6,r4
800309e6:	c0 b8       	rjmp	800309fc <__avr32_f64_div_round_subnormal+0xe0>
800309e8:	f0 04 12 00 	clz	r4,r8
800309ec:	f9 b4 03 00 	movlo	r4,0
800309f0:	f7 b4 02 e0 	subhs	r4,-32
800309f4:	f0 04 09 49 	lsl	r9,r8,r4
800309f8:	30 08       	mov	r8,0
800309fa:	08 16       	sub	r6,r4
800309fc:	a3 88       	lsr	r8,0x2
800309fe:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80030a02:	a3 89       	lsr	r9,0x2
80030a04:	cf ca       	rjmp	800307fc <__avr32_f64_div+0x40>

80030a06 <__avr32_f64_div_res_subnormal>:
80030a06:	5c 37       	neg	r7
80030a08:	2f f7       	sub	r7,-1
80030a0a:	f1 b7 04 c0 	satu	r7,0x6
80030a0e:	e0 47 00 20 	cp.w	r7,32
80030a12:	c1 54       	brge	80030a3c <__avr32_f64_div_res_subnormal+0x36>
80030a14:	ee 06 11 20 	rsub	r6,r7,32
80030a18:	e4 07 0a 42 	lsr	r2,r2,r7
80030a1c:	e6 06 09 4c 	lsl	r12,r3,r6
80030a20:	18 42       	or	r2,r12
80030a22:	e6 07 0a 43 	lsr	r3,r3,r7
80030a26:	f4 06 09 41 	lsl	r1,r10,r6
80030a2a:	f4 07 0a 4a 	lsr	r10,r10,r7
80030a2e:	f6 06 09 4c 	lsl	r12,r11,r6
80030a32:	18 4a       	or	r10,r12
80030a34:	f6 07 0a 4b 	lsr	r11,r11,r7
80030a38:	30 00       	mov	r0,0
80030a3a:	c1 58       	rjmp	80030a64 <__avr32_f64_div_res_subnormal+0x5e>
80030a3c:	ee 06 11 20 	rsub	r6,r7,32
80030a40:	f9 b0 00 00 	moveq	r0,0
80030a44:	f9 bc 00 00 	moveq	r12,0
80030a48:	c0 50       	breq	80030a52 <__avr32_f64_div_res_subnormal+0x4c>
80030a4a:	f4 06 09 40 	lsl	r0,r10,r6
80030a4e:	f6 06 09 4c 	lsl	r12,r11,r6
80030a52:	e6 07 0a 42 	lsr	r2,r3,r7
80030a56:	30 03       	mov	r3,0
80030a58:	f4 07 0a 41 	lsr	r1,r10,r7
80030a5c:	18 41       	or	r1,r12
80030a5e:	f6 07 0a 4a 	lsr	r10,r11,r7
80030a62:	30 0b       	mov	r11,0
80030a64:	e0 12 ff 00 	andl	r2,0xff00
80030a68:	e8 12 00 80 	orl	r2,0x80
80030a6c:	e6 08 06 46 	mulu.d	r6,r3,r8
80030a70:	e4 09 07 46 	macu.d	r6,r2,r9
80030a74:	e4 08 06 44 	mulu.d	r4,r2,r8
80030a78:	e6 09 06 48 	mulu.d	r8,r3,r9
80030a7c:	0c 05       	add	r5,r6
80030a7e:	f0 07 00 48 	adc	r8,r8,r7
80030a82:	5c 09       	acr	r9
80030a84:	30 07       	mov	r7,0
80030a86:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030a8a:	00 34       	cp.w	r4,r0
80030a8c:	e2 05 13 00 	cpc	r5,r1
80030a90:	c4 6b       	rjmp	8003091c <__avr32_f64_div_round_subnormal>
80030a92:	1c 9b       	mov	r11,lr
80030a94:	e6 1b 80 00 	andh	r11,0x8000,COH
80030a98:	30 0a       	mov	r10,0
80030a9a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030a9e:	3f fb       	mov	r11,-1
80030aa0:	30 0a       	mov	r10,0
80030aa2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030aa6:	f5 eb 10 04 	or	r4,r10,r11
80030aaa:	c0 90       	breq	80030abc <__avr32_f64_div_op1_zero>
80030aac:	1c 9b       	mov	r11,lr
80030aae:	e6 1b 80 00 	andh	r11,0x8000,COH
80030ab2:	ea 1b 7f f0 	orh	r11,0x7ff0
80030ab6:	30 0a       	mov	r10,0
80030ab8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80030abc <__avr32_f64_div_op1_zero>:
80030abc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80030ac0:	ce f0       	breq	80030a9e <__avr32_f64_div_res_subnormal+0x98>
80030ac2:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80030ac6:	e0 44 07 ff 	cp.w	r4,2047
80030aca:	ce 41       	brne	80030a92 <__avr32_f64_div_res_subnormal+0x8c>
80030acc:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80030ad0:	ce 10       	breq	80030a92 <__avr32_f64_div_res_subnormal+0x8c>
80030ad2:	ce 6b       	rjmp	80030a9e <__avr32_f64_div_res_subnormal+0x98>

80030ad4 <__avr32_f32_div>:
80030ad4:	f7 ec 20 08 	eor	r8,r11,r12
80030ad8:	a1 7c       	lsl	r12,0x1
80030ada:	a1 7b       	lsl	r11,0x1
80030adc:	c7 a0       	breq	80030bd0 <__divsf_return_op1+0x16>
80030ade:	18 7c       	tst	r12,r12
80030ae0:	f9 b9 00 00 	moveq	r9,0
80030ae4:	c0 90       	breq	80030af6 <__avr32_f32_div+0x22>
80030ae6:	f8 09 16 18 	lsr	r9,r12,0x18
80030aea:	c7 e0       	breq	80030be6 <__divsf_return_op1+0x2c>
80030aec:	e0 49 00 ff 	cp.w	r9,255
80030af0:	c6 82       	brcc	80030bc0 <__divsf_return_op1+0x6>
80030af2:	a7 7c       	lsl	r12,0x7
80030af4:	bf bc       	sbr	r12,0x1f
80030af6:	f6 0a 16 18 	lsr	r10,r11,0x18
80030afa:	c7 e0       	breq	80030bf6 <__divsf_return_op1+0x3c>
80030afc:	e0 4a 00 ff 	cp.w	r10,255
80030b00:	c6 62       	brcc	80030bcc <__divsf_return_op1+0x12>
80030b02:	a7 7b       	lsl	r11,0x7
80030b04:	bf bb       	sbr	r11,0x1f
80030b06:	58 09       	cp.w	r9,0
80030b08:	f5 bc 00 00 	subfeq	r12,0
80030b0c:	5e 0d       	reteq	0
80030b0e:	1a d5       	st.w	--sp,r5
80030b10:	bb 27       	st.d	--sp,r6
80030b12:	14 19       	sub	r9,r10
80030b14:	28 19       	sub	r9,-127
80030b16:	fc 1a 80 00 	movh	r10,0x8000
80030b1a:	a3 8c       	lsr	r12,0x2
80030b1c:	f6 05 16 02 	lsr	r5,r11,0x2
80030b20:	f4 0b 16 01 	lsr	r11,r10,0x1
80030b24:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80030b28:	5c d6       	com	r6
80030b2a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80030b2e:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b32:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b36:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b3a:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b3e:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b42:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b46:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b4a:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b4e:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b52:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b56:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b5a:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b5e:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b62:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b66:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b6a:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b6e:	f6 0c 06 46 	mulu.d	r6,r11,r12
80030b72:	a5 8c       	lsr	r12,0x4
80030b74:	ed b7 00 1c 	bld	r7,0x1c
80030b78:	c0 40       	breq	80030b80 <__avr32_f32_div+0xac>
80030b7a:	a1 77       	lsl	r7,0x1
80030b7c:	20 19       	sub	r9,1
80030b7e:	a1 7c       	lsl	r12,0x1
80030b80:	58 09       	cp.w	r9,0
80030b82:	e0 8a 00 42 	brle	80030c06 <__avr32_f32_div_res_subnormal>
80030b86:	e0 17 ff e0 	andl	r7,0xffe0
80030b8a:	e8 17 00 10 	orl	r7,0x10
80030b8e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030b92:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030b96:	58 0a       	cp.w	r10,0

80030b98 <__avr32_f32_div_round_subnormal>:
80030b98:	f8 0b 13 00 	cpc	r11,r12
80030b9c:	5f 3b       	srlo	r11
80030b9e:	ea 0b 17 00 	moveq	r11,r5
80030ba2:	ee 0c 16 05 	lsr	r12,r7,0x5
80030ba6:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80030baa:	bb 07       	ld.d	r6,sp++
80030bac:	1b 05       	ld.w	r5,sp++
80030bae:	ed b8 00 1f 	bld	r8,0x1f
80030bb2:	ef bc 00 1f 	bst	r12,0x1f
80030bb6:	16 0c       	add	r12,r11
80030bb8:	5e fc       	retal	r12

80030bba <__divsf_return_op1>:
80030bba:	a1 78       	lsl	r8,0x1
80030bbc:	5d 0c       	ror	r12
80030bbe:	5e fc       	retal	r12
80030bc0:	5e 1e       	retne	-1
80030bc2:	fc 19 ff 00 	movh	r9,0xff00
80030bc6:	12 3b       	cp.w	r11,r9
80030bc8:	cf 93       	brcs	80030bba <__divsf_return_op1>
80030bca:	5e fe       	retal	-1
80030bcc:	5e 0d       	reteq	0
80030bce:	5e fe       	retal	-1
80030bd0:	18 7c       	tst	r12,r12
80030bd2:	5e 0e       	reteq	-1
80030bd4:	f8 09 16 18 	lsr	r9,r12,0x18
80030bd8:	c0 70       	breq	80030be6 <__divsf_return_op1+0x2c>
80030bda:	e0 49 00 ff 	cp.w	r9,255
80030bde:	cf 12       	brcc	80030bc0 <__divsf_return_op1+0x6>
80030be0:	fc 1c ff 00 	movh	r12,0xff00
80030be4:	ce bb       	rjmp	80030bba <__divsf_return_op1>
80030be6:	a7 7c       	lsl	r12,0x7
80030be8:	f8 09 12 00 	clz	r9,r12
80030bec:	f8 09 09 4c 	lsl	r12,r12,r9
80030bf0:	f2 09 11 01 	rsub	r9,r9,1
80030bf4:	c8 1b       	rjmp	80030af6 <__avr32_f32_div+0x22>
80030bf6:	a7 7b       	lsl	r11,0x7
80030bf8:	f6 0a 12 00 	clz	r10,r11
80030bfc:	f6 0a 09 4b 	lsl	r11,r11,r10
80030c00:	f4 0a 11 01 	rsub	r10,r10,1
80030c04:	c8 5b       	rjmp	80030b0e <__avr32_f32_div+0x3a>

80030c06 <__avr32_f32_div_res_subnormal>:
80030c06:	5c 39       	neg	r9
80030c08:	2f f9       	sub	r9,-1
80030c0a:	f1 b9 04 a0 	satu	r9,0x5
80030c0e:	f2 0a 11 20 	rsub	r10,r9,32
80030c12:	ee 09 0a 47 	lsr	r7,r7,r9
80030c16:	f8 0a 09 46 	lsl	r6,r12,r10
80030c1a:	f8 09 0a 4c 	lsr	r12,r12,r9
80030c1e:	e0 17 ff e0 	andl	r7,0xffe0
80030c22:	e8 17 00 10 	orl	r7,0x10
80030c26:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030c2a:	30 09       	mov	r9,0
80030c2c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030c30:	0c 3a       	cp.w	r10,r6
80030c32:	cb 3b       	rjmp	80030b98 <__avr32_f32_div_round_subnormal>

80030c34 <__avr32_f32_to_f64>:
80030c34:	f8 0b 15 01 	lsl	r11,r12,0x1
80030c38:	f9 ba 00 00 	moveq	r10,0
80030c3c:	5e 0b       	reteq	r11
80030c3e:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80030c42:	e0 49 00 ff 	cp.w	r9,255
80030c46:	c1 e0       	breq	80030c82 <__extendsfdf_return_op1+0x6>
80030c48:	a7 7b       	lsl	r11,0x7
80030c4a:	30 0a       	mov	r10,0
80030c4c:	58 09       	cp.w	r9,0
80030c4e:	f7 b9 00 ff 	subeq	r9,-1
80030c52:	5f 18       	srne	r8
80030c54:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80030c58:	fe 39 fc 80 	sub	r9,-896
80030c5c:	f6 08 12 00 	clz	r8,r11
80030c60:	10 19       	sub	r9,r8
80030c62:	f6 08 09 4b 	lsl	r11,r11,r8
80030c66:	ed bb 00 1f 	bld	r11,0x1f
80030c6a:	f7 b9 01 01 	subne	r9,1
80030c6e:	ab 9a       	lsr	r10,0xb
80030c70:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030c74:	a1 7b       	lsl	r11,0x1
80030c76:	ab 9b       	lsr	r11,0xb
80030c78:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030c7c <__extendsfdf_return_op1>:
80030c7c:	a1 7c       	lsl	r12,0x1
80030c7e:	5d 0b       	ror	r11
80030c80:	5e fb       	retal	r11
80030c82:	fc 1a ff e0 	movh	r10,0xffe0
80030c86:	a9 6b       	lsl	r11,0x8
80030c88:	f9 bb 01 ff 	movne	r11,-1
80030c8c:	f4 0b 17 00 	moveq	r11,r10
80030c90:	30 0a       	mov	r10,0
80030c92:	cf 5b       	rjmp	80030c7c <__extendsfdf_return_op1>

80030c94 <__avr32_f64_to_f32>:
80030c94:	f6 09 15 01 	lsl	r9,r11,0x1
80030c98:	b5 99       	lsr	r9,0x15
80030c9a:	5e 0d       	reteq	0
80030c9c:	f6 08 15 0a 	lsl	r8,r11,0xa
80030ca0:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80030ca4:	ab 6a       	lsl	r10,0xa
80030ca6:	5c 3a       	neg	r10
80030ca8:	5c fc       	rol	r12
80030caa:	e0 49 07 ff 	cp.w	r9,2047
80030cae:	c1 a0       	breq	80030ce2 <__truncdfsf_return_op1+0x6>
80030cb0:	e0 29 03 80 	sub	r9,896
80030cb4:	bf bc       	sbr	r12,0x1f
80030cb6:	58 09       	cp.w	r9,0
80030cb8:	e0 8a 00 1a 	brle	80030cec <__truncdfsf_return_op1+0x10>
80030cbc:	37 fa       	mov	r10,127
80030cbe:	ed bc 00 08 	bld	r12,0x8
80030cc2:	f7 ba 00 ff 	subeq	r10,-1
80030cc6:	14 0c       	add	r12,r10
80030cc8:	f7 b9 03 fe 	sublo	r9,-2
80030ccc:	ed bc 00 1f 	bld	r12,0x1f
80030cd0:	f7 b9 01 01 	subne	r9,1
80030cd4:	f8 0c 16 07 	lsr	r12,r12,0x7
80030cd8:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80030cdc <__truncdfsf_return_op1>:
80030cdc:	a1 7b       	lsl	r11,0x1
80030cde:	5d 0c       	ror	r12
80030ce0:	5e fc       	retal	r12
80030ce2:	bf dc       	cbr	r12,0x1f
80030ce4:	5e 1e       	retne	-1
80030ce6:	fc 1c 7f 80 	movh	r12,0x7f80
80030cea:	5e fc       	retal	r12
80030cec:	f2 09 11 01 	rsub	r9,r9,1
80030cf0:	59 99       	cp.w	r9,25
80030cf2:	f9 bc 02 00 	movhs	r12,0
80030cf6:	c1 32       	brcc	80030d1c <__truncdfsf_return_op1+0x40>
80030cf8:	f2 0a 11 20 	rsub	r10,r9,32
80030cfc:	f8 0a 09 4a 	lsl	r10,r12,r10
80030d00:	5f 1a       	srne	r10
80030d02:	f8 09 0a 4c 	lsr	r12,r12,r9
80030d06:	14 4c       	or	r12,r10
80030d08:	37 fa       	mov	r10,127
80030d0a:	ed bc 00 08 	bld	r12,0x8
80030d0e:	f7 ba 00 ff 	subeq	r10,-1
80030d12:	14 0c       	add	r12,r10
80030d14:	f8 0c 16 07 	lsr	r12,r12,0x7
80030d18:	a1 7b       	lsl	r11,0x1
80030d1a:	5d 0c       	ror	r12
80030d1c:	5e fc       	retal	r12

80030d1e <__avr32_udiv64>:
80030d1e:	d4 31       	pushm	r0-r7,lr
80030d20:	1a 97       	mov	r7,sp
80030d22:	20 3d       	sub	sp,12
80030d24:	10 9c       	mov	r12,r8
80030d26:	12 9e       	mov	lr,r9
80030d28:	14 93       	mov	r3,r10
80030d2a:	58 09       	cp.w	r9,0
80030d2c:	e0 81 00 bd 	brne	80030ea6 <__avr32_udiv64+0x188>
80030d30:	16 38       	cp.w	r8,r11
80030d32:	e0 88 00 40 	brls	80030db2 <__avr32_udiv64+0x94>
80030d36:	f0 08 12 00 	clz	r8,r8
80030d3a:	c0 d0       	breq	80030d54 <__avr32_udiv64+0x36>
80030d3c:	f6 08 09 4b 	lsl	r11,r11,r8
80030d40:	f0 09 11 20 	rsub	r9,r8,32
80030d44:	f8 08 09 4c 	lsl	r12,r12,r8
80030d48:	f4 09 0a 49 	lsr	r9,r10,r9
80030d4c:	f4 08 09 43 	lsl	r3,r10,r8
80030d50:	f3 eb 10 0b 	or	r11,r9,r11
80030d54:	f8 0e 16 10 	lsr	lr,r12,0x10
80030d58:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80030d5c:	f6 0e 0d 00 	divu	r0,r11,lr
80030d60:	e6 0b 16 10 	lsr	r11,r3,0x10
80030d64:	00 99       	mov	r9,r0
80030d66:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030d6a:	e0 0a 02 48 	mul	r8,r0,r10
80030d6e:	10 3b       	cp.w	r11,r8
80030d70:	c0 a2       	brcc	80030d84 <__avr32_udiv64+0x66>
80030d72:	20 19       	sub	r9,1
80030d74:	18 0b       	add	r11,r12
80030d76:	18 3b       	cp.w	r11,r12
80030d78:	c0 63       	brcs	80030d84 <__avr32_udiv64+0x66>
80030d7a:	10 3b       	cp.w	r11,r8
80030d7c:	f7 b9 03 01 	sublo	r9,1
80030d80:	f7 dc e3 0b 	addcs	r11,r11,r12
80030d84:	f6 08 01 01 	sub	r1,r11,r8
80030d88:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030d8c:	e2 0e 0d 00 	divu	r0,r1,lr
80030d90:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80030d94:	00 98       	mov	r8,r0
80030d96:	e0 0a 02 4a 	mul	r10,r0,r10
80030d9a:	14 33       	cp.w	r3,r10
80030d9c:	c0 82       	brcc	80030dac <__avr32_udiv64+0x8e>
80030d9e:	20 18       	sub	r8,1
80030da0:	18 03       	add	r3,r12
80030da2:	18 33       	cp.w	r3,r12
80030da4:	c0 43       	brcs	80030dac <__avr32_udiv64+0x8e>
80030da6:	14 33       	cp.w	r3,r10
80030da8:	f7 b8 03 01 	sublo	r8,1
80030dac:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80030db0:	cd f8       	rjmp	80030f6e <__avr32_udiv64+0x250>
80030db2:	58 08       	cp.w	r8,0
80030db4:	c0 51       	brne	80030dbe <__avr32_udiv64+0xa0>
80030db6:	30 19       	mov	r9,1
80030db8:	f2 08 0d 08 	divu	r8,r9,r8
80030dbc:	10 9c       	mov	r12,r8
80030dbe:	f8 06 12 00 	clz	r6,r12
80030dc2:	c0 41       	brne	80030dca <__avr32_udiv64+0xac>
80030dc4:	18 1b       	sub	r11,r12
80030dc6:	30 19       	mov	r9,1
80030dc8:	c4 08       	rjmp	80030e48 <__avr32_udiv64+0x12a>
80030dca:	ec 01 11 20 	rsub	r1,r6,32
80030dce:	f4 01 0a 49 	lsr	r9,r10,r1
80030dd2:	f8 06 09 4c 	lsl	r12,r12,r6
80030dd6:	f6 06 09 48 	lsl	r8,r11,r6
80030dda:	f6 01 0a 41 	lsr	r1,r11,r1
80030dde:	f3 e8 10 08 	or	r8,r9,r8
80030de2:	f8 03 16 10 	lsr	r3,r12,0x10
80030de6:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80030dea:	e2 03 0d 00 	divu	r0,r1,r3
80030dee:	f0 0b 16 10 	lsr	r11,r8,0x10
80030df2:	00 9e       	mov	lr,r0
80030df4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030df8:	e0 05 02 49 	mul	r9,r0,r5
80030dfc:	12 3b       	cp.w	r11,r9
80030dfe:	c0 a2       	brcc	80030e12 <__avr32_udiv64+0xf4>
80030e00:	20 1e       	sub	lr,1
80030e02:	18 0b       	add	r11,r12
80030e04:	18 3b       	cp.w	r11,r12
80030e06:	c0 63       	brcs	80030e12 <__avr32_udiv64+0xf4>
80030e08:	12 3b       	cp.w	r11,r9
80030e0a:	f7 be 03 01 	sublo	lr,1
80030e0e:	f7 dc e3 0b 	addcs	r11,r11,r12
80030e12:	12 1b       	sub	r11,r9
80030e14:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80030e18:	f6 03 0d 02 	divu	r2,r11,r3
80030e1c:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80030e20:	04 99       	mov	r9,r2
80030e22:	e4 05 02 4b 	mul	r11,r2,r5
80030e26:	16 38       	cp.w	r8,r11
80030e28:	c0 a2       	brcc	80030e3c <__avr32_udiv64+0x11e>
80030e2a:	20 19       	sub	r9,1
80030e2c:	18 08       	add	r8,r12
80030e2e:	18 38       	cp.w	r8,r12
80030e30:	c0 63       	brcs	80030e3c <__avr32_udiv64+0x11e>
80030e32:	16 38       	cp.w	r8,r11
80030e34:	f7 b9 03 01 	sublo	r9,1
80030e38:	f1 dc e3 08 	addcs	r8,r8,r12
80030e3c:	f4 06 09 43 	lsl	r3,r10,r6
80030e40:	f0 0b 01 0b 	sub	r11,r8,r11
80030e44:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80030e48:	f8 06 16 10 	lsr	r6,r12,0x10
80030e4c:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80030e50:	f6 06 0d 00 	divu	r0,r11,r6
80030e54:	e6 0b 16 10 	lsr	r11,r3,0x10
80030e58:	00 9a       	mov	r10,r0
80030e5a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030e5e:	e0 0e 02 48 	mul	r8,r0,lr
80030e62:	10 3b       	cp.w	r11,r8
80030e64:	c0 a2       	brcc	80030e78 <__avr32_udiv64+0x15a>
80030e66:	20 1a       	sub	r10,1
80030e68:	18 0b       	add	r11,r12
80030e6a:	18 3b       	cp.w	r11,r12
80030e6c:	c0 63       	brcs	80030e78 <__avr32_udiv64+0x15a>
80030e6e:	10 3b       	cp.w	r11,r8
80030e70:	f7 ba 03 01 	sublo	r10,1
80030e74:	f7 dc e3 0b 	addcs	r11,r11,r12
80030e78:	f6 08 01 01 	sub	r1,r11,r8
80030e7c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030e80:	e2 06 0d 00 	divu	r0,r1,r6
80030e84:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80030e88:	00 98       	mov	r8,r0
80030e8a:	e0 0e 02 4b 	mul	r11,r0,lr
80030e8e:	16 33       	cp.w	r3,r11
80030e90:	c0 82       	brcc	80030ea0 <__avr32_udiv64+0x182>
80030e92:	20 18       	sub	r8,1
80030e94:	18 03       	add	r3,r12
80030e96:	18 33       	cp.w	r3,r12
80030e98:	c0 43       	brcs	80030ea0 <__avr32_udiv64+0x182>
80030e9a:	16 33       	cp.w	r3,r11
80030e9c:	f7 b8 03 01 	sublo	r8,1
80030ea0:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80030ea4:	c6 98       	rjmp	80030f76 <__avr32_udiv64+0x258>
80030ea6:	16 39       	cp.w	r9,r11
80030ea8:	e0 8b 00 65 	brhi	80030f72 <__avr32_udiv64+0x254>
80030eac:	f2 09 12 00 	clz	r9,r9
80030eb0:	c0 b1       	brne	80030ec6 <__avr32_udiv64+0x1a8>
80030eb2:	10 3a       	cp.w	r10,r8
80030eb4:	5f 2a       	srhs	r10
80030eb6:	1c 3b       	cp.w	r11,lr
80030eb8:	5f b8       	srhi	r8
80030eba:	10 4a       	or	r10,r8
80030ebc:	f2 0a 18 00 	cp.b	r10,r9
80030ec0:	c5 90       	breq	80030f72 <__avr32_udiv64+0x254>
80030ec2:	30 18       	mov	r8,1
80030ec4:	c5 98       	rjmp	80030f76 <__avr32_udiv64+0x258>
80030ec6:	f0 09 09 46 	lsl	r6,r8,r9
80030eca:	f2 03 11 20 	rsub	r3,r9,32
80030ece:	fc 09 09 4e 	lsl	lr,lr,r9
80030ed2:	f0 03 0a 48 	lsr	r8,r8,r3
80030ed6:	f6 09 09 4c 	lsl	r12,r11,r9
80030eda:	f4 03 0a 42 	lsr	r2,r10,r3
80030ede:	ef 46 ff f4 	st.w	r7[-12],r6
80030ee2:	f6 03 0a 43 	lsr	r3,r11,r3
80030ee6:	18 42       	or	r2,r12
80030ee8:	f1 ee 10 0c 	or	r12,r8,lr
80030eec:	f8 01 16 10 	lsr	r1,r12,0x10
80030ef0:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80030ef4:	e6 01 0d 04 	divu	r4,r3,r1
80030ef8:	e4 03 16 10 	lsr	r3,r2,0x10
80030efc:	08 9e       	mov	lr,r4
80030efe:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80030f02:	e8 06 02 48 	mul	r8,r4,r6
80030f06:	10 33       	cp.w	r3,r8
80030f08:	c0 a2       	brcc	80030f1c <__avr32_udiv64+0x1fe>
80030f0a:	20 1e       	sub	lr,1
80030f0c:	18 03       	add	r3,r12
80030f0e:	18 33       	cp.w	r3,r12
80030f10:	c0 63       	brcs	80030f1c <__avr32_udiv64+0x1fe>
80030f12:	10 33       	cp.w	r3,r8
80030f14:	f7 be 03 01 	sublo	lr,1
80030f18:	e7 dc e3 03 	addcs	r3,r3,r12
80030f1c:	10 13       	sub	r3,r8
80030f1e:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80030f22:	e6 01 0d 00 	divu	r0,r3,r1
80030f26:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030f2a:	00 98       	mov	r8,r0
80030f2c:	e0 06 02 46 	mul	r6,r0,r6
80030f30:	0c 3b       	cp.w	r11,r6
80030f32:	c0 a2       	brcc	80030f46 <__avr32_udiv64+0x228>
80030f34:	20 18       	sub	r8,1
80030f36:	18 0b       	add	r11,r12
80030f38:	18 3b       	cp.w	r11,r12
80030f3a:	c0 63       	brcs	80030f46 <__avr32_udiv64+0x228>
80030f3c:	0c 3b       	cp.w	r11,r6
80030f3e:	f7 dc e3 0b 	addcs	r11,r11,r12
80030f42:	f7 b8 03 01 	sublo	r8,1
80030f46:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80030f4a:	ee f4 ff f4 	ld.w	r4,r7[-12]
80030f4e:	0c 1b       	sub	r11,r6
80030f50:	f0 04 06 42 	mulu.d	r2,r8,r4
80030f54:	06 95       	mov	r5,r3
80030f56:	16 35       	cp.w	r5,r11
80030f58:	e0 8b 00 0a 	brhi	80030f6c <__avr32_udiv64+0x24e>
80030f5c:	5f 0b       	sreq	r11
80030f5e:	f4 09 09 49 	lsl	r9,r10,r9
80030f62:	12 32       	cp.w	r2,r9
80030f64:	5f b9       	srhi	r9
80030f66:	f7 e9 00 09 	and	r9,r11,r9
80030f6a:	c0 60       	breq	80030f76 <__avr32_udiv64+0x258>
80030f6c:	20 18       	sub	r8,1
80030f6e:	30 09       	mov	r9,0
80030f70:	c0 38       	rjmp	80030f76 <__avr32_udiv64+0x258>
80030f72:	30 09       	mov	r9,0
80030f74:	12 98       	mov	r8,r9
80030f76:	10 9a       	mov	r10,r8
80030f78:	12 93       	mov	r3,r9
80030f7a:	10 92       	mov	r2,r8
80030f7c:	12 9b       	mov	r11,r9
80030f7e:	2f dd       	sub	sp,-12
80030f80:	d8 32       	popm	r0-r7,pc
80030f82:	d7 03       	nop

80030f84 <__errno>:
80030f84:	48 28       	lddpc	r8,80030f8c <__errno+0x8>
80030f86:	70 0c       	ld.w	r12,r8[0x0]
80030f88:	2f 4c       	sub	r12,-12
80030f8a:	5e fc       	retal	r12
80030f8c:	00 00       	add	r0,r0
80030f8e:	20 c0       	sub	r0,12

80030f90 <memcpy>:
80030f90:	58 8a       	cp.w	r10,8
80030f92:	c2 f5       	brlt	80030ff0 <memcpy+0x60>
80030f94:	f9 eb 10 09 	or	r9,r12,r11
80030f98:	e2 19 00 03 	andl	r9,0x3,COH
80030f9c:	e0 81 00 97 	brne	800310ca <memcpy+0x13a>
80030fa0:	e0 4a 00 20 	cp.w	r10,32
80030fa4:	c3 b4       	brge	8003101a <memcpy+0x8a>
80030fa6:	f4 08 14 02 	asr	r8,r10,0x2
80030faa:	f0 09 11 08 	rsub	r9,r8,8
80030fae:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80030fb2:	76 69       	ld.w	r9,r11[0x18]
80030fb4:	99 69       	st.w	r12[0x18],r9
80030fb6:	76 59       	ld.w	r9,r11[0x14]
80030fb8:	99 59       	st.w	r12[0x14],r9
80030fba:	76 49       	ld.w	r9,r11[0x10]
80030fbc:	99 49       	st.w	r12[0x10],r9
80030fbe:	76 39       	ld.w	r9,r11[0xc]
80030fc0:	99 39       	st.w	r12[0xc],r9
80030fc2:	76 29       	ld.w	r9,r11[0x8]
80030fc4:	99 29       	st.w	r12[0x8],r9
80030fc6:	76 19       	ld.w	r9,r11[0x4]
80030fc8:	99 19       	st.w	r12[0x4],r9
80030fca:	76 09       	ld.w	r9,r11[0x0]
80030fcc:	99 09       	st.w	r12[0x0],r9
80030fce:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80030fd2:	f8 08 00 28 	add	r8,r12,r8<<0x2
80030fd6:	e0 1a 00 03 	andl	r10,0x3
80030fda:	f4 0a 11 04 	rsub	r10,r10,4
80030fde:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80030fe2:	17 a9       	ld.ub	r9,r11[0x2]
80030fe4:	b0 a9       	st.b	r8[0x2],r9
80030fe6:	17 99       	ld.ub	r9,r11[0x1]
80030fe8:	b0 99       	st.b	r8[0x1],r9
80030fea:	17 89       	ld.ub	r9,r11[0x0]
80030fec:	b0 89       	st.b	r8[0x0],r9
80030fee:	5e fc       	retal	r12
80030ff0:	f4 0a 11 09 	rsub	r10,r10,9
80030ff4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80030ff8:	17 f9       	ld.ub	r9,r11[0x7]
80030ffa:	b8 f9       	st.b	r12[0x7],r9
80030ffc:	17 e9       	ld.ub	r9,r11[0x6]
80030ffe:	b8 e9       	st.b	r12[0x6],r9
80031000:	17 d9       	ld.ub	r9,r11[0x5]
80031002:	b8 d9       	st.b	r12[0x5],r9
80031004:	17 c9       	ld.ub	r9,r11[0x4]
80031006:	b8 c9       	st.b	r12[0x4],r9
80031008:	17 b9       	ld.ub	r9,r11[0x3]
8003100a:	b8 b9       	st.b	r12[0x3],r9
8003100c:	17 a9       	ld.ub	r9,r11[0x2]
8003100e:	b8 a9       	st.b	r12[0x2],r9
80031010:	17 99       	ld.ub	r9,r11[0x1]
80031012:	b8 99       	st.b	r12[0x1],r9
80031014:	17 89       	ld.ub	r9,r11[0x0]
80031016:	b8 89       	st.b	r12[0x0],r9
80031018:	5e fc       	retal	r12
8003101a:	eb cd 40 c0 	pushm	r6-r7,lr
8003101e:	18 99       	mov	r9,r12
80031020:	22 0a       	sub	r10,32
80031022:	b7 07       	ld.d	r6,r11++
80031024:	b3 26       	st.d	r9++,r6
80031026:	b7 07       	ld.d	r6,r11++
80031028:	b3 26       	st.d	r9++,r6
8003102a:	b7 07       	ld.d	r6,r11++
8003102c:	b3 26       	st.d	r9++,r6
8003102e:	b7 07       	ld.d	r6,r11++
80031030:	b3 26       	st.d	r9++,r6
80031032:	22 0a       	sub	r10,32
80031034:	cf 74       	brge	80031022 <memcpy+0x92>
80031036:	2f 0a       	sub	r10,-16
80031038:	c0 65       	brlt	80031044 <memcpy+0xb4>
8003103a:	b7 07       	ld.d	r6,r11++
8003103c:	b3 26       	st.d	r9++,r6
8003103e:	b7 07       	ld.d	r6,r11++
80031040:	b3 26       	st.d	r9++,r6
80031042:	21 0a       	sub	r10,16
80031044:	5c 3a       	neg	r10
80031046:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8003104a:	d7 03       	nop
8003104c:	d7 03       	nop
8003104e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80031052:	f3 66 00 0e 	st.b	r9[14],r6
80031056:	f7 36 00 0d 	ld.ub	r6,r11[13]
8003105a:	f3 66 00 0d 	st.b	r9[13],r6
8003105e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80031062:	f3 66 00 0c 	st.b	r9[12],r6
80031066:	f7 36 00 0b 	ld.ub	r6,r11[11]
8003106a:	f3 66 00 0b 	st.b	r9[11],r6
8003106e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80031072:	f3 66 00 0a 	st.b	r9[10],r6
80031076:	f7 36 00 09 	ld.ub	r6,r11[9]
8003107a:	f3 66 00 09 	st.b	r9[9],r6
8003107e:	f7 36 00 08 	ld.ub	r6,r11[8]
80031082:	f3 66 00 08 	st.b	r9[8],r6
80031086:	f7 36 00 07 	ld.ub	r6,r11[7]
8003108a:	f3 66 00 07 	st.b	r9[7],r6
8003108e:	f7 36 00 06 	ld.ub	r6,r11[6]
80031092:	f3 66 00 06 	st.b	r9[6],r6
80031096:	f7 36 00 05 	ld.ub	r6,r11[5]
8003109a:	f3 66 00 05 	st.b	r9[5],r6
8003109e:	f7 36 00 04 	ld.ub	r6,r11[4]
800310a2:	f3 66 00 04 	st.b	r9[4],r6
800310a6:	f7 36 00 03 	ld.ub	r6,r11[3]
800310aa:	f3 66 00 03 	st.b	r9[3],r6
800310ae:	f7 36 00 02 	ld.ub	r6,r11[2]
800310b2:	f3 66 00 02 	st.b	r9[2],r6
800310b6:	f7 36 00 01 	ld.ub	r6,r11[1]
800310ba:	f3 66 00 01 	st.b	r9[1],r6
800310be:	f7 36 00 00 	ld.ub	r6,r11[0]
800310c2:	f3 66 00 00 	st.b	r9[0],r6
800310c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800310ca:	20 1a       	sub	r10,1
800310cc:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800310d0:	f8 0a 0b 09 	st.b	r12[r10],r9
800310d4:	cf b1       	brne	800310ca <memcpy+0x13a>
800310d6:	5e fc       	retal	r12

800310d8 <memset>:
800310d8:	18 98       	mov	r8,r12
800310da:	c0 38       	rjmp	800310e0 <memset+0x8>
800310dc:	10 cb       	st.b	r8++,r11
800310de:	20 1a       	sub	r10,1
800310e0:	58 0a       	cp.w	r10,0
800310e2:	cf d1       	brne	800310dc <memset+0x4>
800310e4:	5e fc       	retal	r12

800310e6 <strcpy>:
800310e6:	30 08       	mov	r8,0
800310e8:	f6 08 07 09 	ld.ub	r9,r11[r8]
800310ec:	f8 08 0b 09 	st.b	r12[r8],r9
800310f0:	2f f8       	sub	r8,-1
800310f2:	58 09       	cp.w	r9,0
800310f4:	cf a1       	brne	800310e8 <strcpy+0x2>
800310f6:	5e fc       	retal	r12

800310f8 <strlen>:
800310f8:	30 09       	mov	r9,0
800310fa:	18 98       	mov	r8,r12
800310fc:	c0 28       	rjmp	80031100 <strlen+0x8>
800310fe:	2f f8       	sub	r8,-1
80031100:	11 8a       	ld.ub	r10,r8[0x0]
80031102:	f2 0a 18 00 	cp.b	r10,r9
80031106:	cf c1       	brne	800310fe <strlen+0x6>
80031108:	f0 0c 01 0c 	sub	r12,r8,r12
8003110c:	5e fc       	retal	r12

Disassembly of section .exception:

80031200 <_evba>:
80031200:	c0 08       	rjmp	80031200 <_evba>
	...

80031204 <_handle_TLB_Multiple_Hit>:
80031204:	c0 08       	rjmp	80031204 <_handle_TLB_Multiple_Hit>
	...

80031208 <_handle_Bus_Error_Data_Fetch>:
80031208:	c0 08       	rjmp	80031208 <_handle_Bus_Error_Data_Fetch>
	...

8003120c <_handle_Bus_Error_Instruction_Fetch>:
8003120c:	c0 08       	rjmp	8003120c <_handle_Bus_Error_Instruction_Fetch>
	...

80031210 <_handle_NMI>:
80031210:	4c ff       	lddpc	pc,8003134c <ipr_val+0x10>
	...

80031214 <_handle_Instruction_Address>:
80031214:	c0 08       	rjmp	80031214 <_handle_Instruction_Address>
	...

80031218 <_handle_ITLB_Protection>:
80031218:	c0 08       	rjmp	80031218 <_handle_ITLB_Protection>
	...

8003121c <_handle_Breakpoint>:
8003121c:	c0 08       	rjmp	8003121c <_handle_Breakpoint>
	...

80031220 <_handle_Illegal_Opcode>:
80031220:	c0 08       	rjmp	80031220 <_handle_Illegal_Opcode>
	...

80031224 <_handle_Unimplemented_Instruction>:
80031224:	c0 08       	rjmp	80031224 <_handle_Unimplemented_Instruction>
	...

80031228 <_handle_Privilege_Violation>:
80031228:	c0 08       	rjmp	80031228 <_handle_Privilege_Violation>
	...

8003122c <_handle_Floating_Point>:
8003122c:	c0 08       	rjmp	8003122c <_handle_Floating_Point>
	...

80031230 <_handle_Coprocessor_Absent>:
80031230:	c0 08       	rjmp	80031230 <_handle_Coprocessor_Absent>
	...

80031234 <_handle_Data_Address_Read>:
80031234:	c0 08       	rjmp	80031234 <_handle_Data_Address_Read>
	...

80031238 <_handle_Data_Address_Write>:
80031238:	c0 08       	rjmp	80031238 <_handle_Data_Address_Write>
	...

8003123c <_handle_DTLB_Protection_Read>:
8003123c:	c0 08       	rjmp	8003123c <_handle_DTLB_Protection_Read>
	...

80031240 <_handle_DTLB_Protection_Write>:
80031240:	c0 08       	rjmp	80031240 <_handle_DTLB_Protection_Write>
	...

80031244 <_handle_DTLB_Modified>:
80031244:	c0 08       	rjmp	80031244 <_handle_DTLB_Modified>
	...

80031250 <_handle_ITLB_Miss>:
80031250:	c0 08       	rjmp	80031250 <_handle_ITLB_Miss>
	...

80031260 <_handle_DTLB_Miss_Read>:
80031260:	c0 08       	rjmp	80031260 <_handle_DTLB_Miss_Read>
	...

80031270 <_handle_DTLB_Miss_Write>:
80031270:	c0 08       	rjmp	80031270 <_handle_DTLB_Miss_Write>
	...

80031300 <_handle_Supervisor_Call>:
80031300:	c0 08       	rjmp	80031300 <_handle_Supervisor_Call>
80031302:	d7 03       	nop

80031304 <_int0>:
80031304:	30 0c       	mov	r12,0
80031306:	fe b0 b0 a7 	rcall	80027454 <_get_interrupt_handler>
8003130a:	58 0c       	cp.w	r12,0
8003130c:	f8 0f 17 10 	movne	pc,r12
80031310:	d6 03       	rete

80031312 <_int1>:
80031312:	30 1c       	mov	r12,1
80031314:	fe b0 b0 a0 	rcall	80027454 <_get_interrupt_handler>
80031318:	58 0c       	cp.w	r12,0
8003131a:	f8 0f 17 10 	movne	pc,r12
8003131e:	d6 03       	rete

80031320 <_int2>:
80031320:	30 2c       	mov	r12,2
80031322:	fe b0 b0 99 	rcall	80027454 <_get_interrupt_handler>
80031326:	58 0c       	cp.w	r12,0
80031328:	f8 0f 17 10 	movne	pc,r12
8003132c:	d6 03       	rete

8003132e <_int3>:
8003132e:	30 3c       	mov	r12,3
80031330:	fe b0 b0 92 	rcall	80027454 <_get_interrupt_handler>
80031334:	58 0c       	cp.w	r12,0
80031336:	f8 0f 17 10 	movne	pc,r12
8003133a:	d6 03       	rete

8003133c <ipr_val>:
8003133c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8003134c:	80 01 5a 10 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..Z.............
8003135c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003136c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003137c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003138c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003139c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313fc:	d7 03 d7 03                                         ....
